"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_arcgis-raster-function-editor_-9eb885"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/portal-d50d8334.js":
/*!***************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/portal-d50d8334.js ***!
  \***************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ getRenderingServiceValidateUrl),
/* harmony export */   b: () => (/* binding */ getRenderingImageServiceUrl),
/* harmony export */   g: () => (/* binding */ getBaseUrl)
/* harmony export */ });
/**
 * Returns a base url to pass to the item browser
 * Taken from https://devtopia.esri.com/WebGIS/arcgis-webviewer-app/blob/master/src/utils/urlUtils.ts#L106
 * @param {__esri.Portal} portal portal instance
 * @returns {string} formatted baseUrl
 */
function getBaseUrl(portal) {
    const { customBaseUrl, portalHostname, urlKey } = portal;
    const { protocol } = window.location;
    const url = urlKey !== undefined ? `${urlKey}.${customBaseUrl}` : portalHostname;
    return `${protocol}//${url}`;
}
/**
 * To get the rendering service base url based on agol/enterprise
 * @param portal
 * @returns
 */
function getRenderingServiceBaseUrl(portal) {
    const { helperServices: { rasterAnalytics: { url: GPServer } }, isPortal } = portal;
    return isPortal ? GPServer : GPServer.replace("rasteranalysis", "rasterutils");
}
/**
 * function to get rendering service validate url
 * @param {Portal} portal portal instance
 * @returns {string} url string
 */
function getRenderingServiceValidateUrl(portal) {
    return getRenderingServiceBaseUrl(portal).replace("RasterAnalysisTools/GPServer", "RasterRendering/ImageServer/validate");
}
/**
 * function to get rendering service image service url
 * @param {Portal} portal portal instance
 * @returns {string} url string
 */
function getRenderingImageServiceUrl(portal) {
    return getRenderingServiceBaseUrl(portal).replace("RasterAnalysisTools/GPServer", "RasterRendering/ImageServer");
}



//# sourceMappingURL=portal-d50d8334.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/rfx-args-editor_27.entry.js":
/*!************************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/rfx-args-editor_27.entry.js ***!
  \************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   rfx_args_editor: () => (/* binding */ RFxArgsEditor),
/* harmony export */   rfx_dte_band_matrix: () => (/* binding */ RFxDteBandMatrix),
/* harmony export */   rfx_dte_cell_size_input: () => (/* binding */ RFxCellSizeInput),
/* harmony export */   rfx_dte_color_ramp_selector: () => (/* binding */ RFxColorRampSelector),
/* harmony export */   rfx_dte_extent: () => (/* binding */ RFxCustomExtent),
/* harmony export */   rfx_dte_feature_select: () => (/* binding */ RFxFeatureSelect),
/* harmony export */   rfx_dte_json_file_uploader: () => (/* binding */ RFxJsonFileUploader),
/* harmony export */   rfx_dte_local_raster_inputs: () => (/* binding */ RFxDteLocalRasterInputs),
/* harmony export */   rfx_dte_property_set: () => (/* binding */ RFxDtePropertySet),
/* harmony export */   rfx_dte_raster_array_editor: () => (/* binding */ RFxDteRasterArrayEditor),
/* harmony export */   rfx_dte_raster_info: () => (/* binding */ RfxDteRasterInfo),
/* harmony export */   rfx_dte_spatial_reference_picker: () => (/* binding */ SpatialReferencePicker),
/* harmony export */   rfx_dte_statistics_grid: () => (/* binding */ RFxDteStatisticsGrid),
/* harmony export */   rfx_dtex_aggregation_definition_editor: () => (/* binding */ RFxAggregationDefinitionEditor),
/* harmony export */   rfx_dtex_arg_slider: () => (/* binding */ RFxArgSlider),
/* harmony export */   rfx_dtex_band_index_picker: () => (/* binding */ RFxBandIndexPicker),
/* harmony export */   rfx_dtex_band_name_picker: () => (/* binding */ RFxBandNamePicker),
/* harmony export */   rfx_dtex_linear_unit: () => (/* binding */ RFxLinearUnit),
/* harmony export */   rfx_dtex_multidimensional_definition_editor: () => (/* binding */ RFxMultidimensionalDefinitionEditor),
/* harmony export */   rfx_dtex_raster_dimension_select: () => (/* binding */ RFxRasterDimensionSelect),
/* harmony export */   rfx_dtex_raster_variables_list: () => (/* binding */ RFxRasterVariablesList),
/* harmony export */   rfx_dtex_switchable: () => (/* binding */ RFxSwitchable),
/* harmony export */   rfx_help_popover: () => (/* binding */ RfxHelpPopover),
/* harmony export */   rfx_item_browser: () => (/* binding */ RFxItemBrowser),
/* harmony export */   rfx_node_interaction_toolbar: () => (/* binding */ RfxNodeInteractionToolbar),
/* harmony export */   rfx_save_modal: () => (/* binding */ RFxSaveModal),
/* harmony export */   rfx_spatial_reference_popover: () => (/* binding */ RfxSpatialReferencePopover)
/* harmony export */ });
/* harmony import */ var _index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-da1b7138.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/index-da1b7138.js");
/* harmony import */ var _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./resources-27c66f5c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/resources-27c66f5c.js");
/* harmony import */ var _functions_f1f2dffd_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./functions-f1f2dffd.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/functions-f1f2dffd.js");
/* harmony import */ var _localization_helper_4819b67d_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./localization-helper-4819b67d.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/localization-helper-4819b67d.js");
/* harmony import */ var _ui_utils_928a4096_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ui-utils-928a4096.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/ui-utils-928a4096.js");
/* harmony import */ var _help_text_34a29835_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./help-text-34a29835.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/help-text-34a29835.js");
/* harmony import */ var _rfx_args_helper_ab401543_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./rfx-args-helper-ab401543.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/rfx-args-helper-ab401543.js");
/* harmony import */ var _interfaces_d0c68944_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./interfaces-d0c68944.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/interfaces-d0c68944.js");
/* harmony import */ var _type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./type-gaurds-1840747f.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/type-gaurds-1840747f.js");
/* harmony import */ var _arcgis_core_identity_IdentityManager_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @arcgis/core/identity/IdentityManager.js */ "@arcgis/core/identity/IdentityManager.js");
/* harmony import */ var _arcgis_core_core_lang_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @arcgis/core/core/lang.js */ "@arcgis/core/core/lang.js");
/* harmony import */ var _arcgis_core_core_urlUtils_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @arcgis/core/core/urlUtils.js */ "@arcgis/core/core/urlUtils.js");
/* harmony import */ var _arcgis_core_layers_Layer_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @arcgis/core/layers/Layer.js */ "@arcgis/core/layers/Layer.js");
/* harmony import */ var _arcgis_core_layers_ImageryLayer_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @arcgis/core/layers/ImageryLayer.js */ "@arcgis/core/layers/ImageryLayer.js");
/* harmony import */ var _arcgis_core_smartMapping_raster_renderers_stretch_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @arcgis/core/smartMapping/raster/renderers/stretch.js */ "@arcgis/core/smartMapping/raster/renderers/stretch.js");
/* harmony import */ var _common_fda1462e_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./common-fda1462e.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/common-fda1462e.js");
/* harmony import */ var _color_ramp_8935ed29_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./color-ramp-8935ed29.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/color-ramp-8935ed29.js");
/* harmony import */ var _sanitize_number_d84114f7_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./sanitize-number-d84114f7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/sanitize-number-d84114f7.js");
/* harmony import */ var _arcgis_core_rest_geoprocessor_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @arcgis/core/rest/geoprocessor.js */ "@arcgis/core/rest/geoprocessor.js");
/* harmony import */ var _arcgis_core_request_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! @arcgis/core/request.js */ "@arcgis/core/request.js");
/* harmony import */ var _arcgis_core_portal_PortalItem_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! @arcgis/core/portal/PortalItem.js */ "@arcgis/core/portal/PortalItem.js");
/* harmony import */ var _widget_factory_e81c7501_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./widget-factory-e81c7501.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/widget-factory-e81c7501.js");
/* harmony import */ var _arcgis_core_rest_support_AlgorithmicColorRamp_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! @arcgis/core/rest/support/AlgorithmicColorRamp.js */ "@arcgis/core/rest/support/AlgorithmicColorRamp.js");
/* harmony import */ var _arcgis_core_rest_support_MultipartColorRamp_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! @arcgis/core/rest/support/MultipartColorRamp.js */ "@arcgis/core/rest/support/MultipartColorRamp.js");
/* harmony import */ var _arcgis_core_Color_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! @arcgis/core/Color.js */ "@arcgis/core/Color.js");
/* harmony import */ var _colorRampUtils_8bdd46c5_js__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./colorRampUtils-8bdd46c5.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/colorRampUtils-8bdd46c5.js");
/* harmony import */ var _arcgis_core_symbols_SimpleMarkerSymbol_js__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! @arcgis/core/symbols/SimpleMarkerSymbol.js */ "@arcgis/core/symbols/SimpleMarkerSymbol.js");
/* harmony import */ var _layer_helper_3867eef7_js__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./layer-helper-3867eef7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/layer-helper-3867eef7.js");
/* harmony import */ var _spatial_reference_helper_42965f73_js__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./spatial-reference-helper-42965f73.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/spatial-reference-helper-42965f73.js");
/* harmony import */ var _multidimensional_helper_fc8fbe0e_js__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./multidimensional-helper-fc8fbe0e.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/multidimensional-helper-fc8fbe0e.js");
/* harmony import */ var _portal_d50d8334_js__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./portal-d50d8334.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/portal-d50d8334.js");
/* harmony import */ var _getTag_96af029d_js__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./_getTag-96af029d.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/_getTag-96af029d.js");
/* harmony import */ var _Uint8Array_68e1e3f9_js__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ./_Uint8Array-68e1e3f9.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/_Uint8Array-68e1e3f9.js");


































/** Used to match a single whitespace character. */
var reWhitespace = /\s/;

/**
 * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace
 * character of `string`.
 *
 * @private
 * @param {string} string The string to inspect.
 * @returns {number} Returns the index of the last non-whitespace character.
 */
function trimmedEndIndex(string) {
  var index = string.length;

  while (index-- && reWhitespace.test(string.charAt(index))) {}
  return index;
}

/** Used to match leading whitespace. */
var reTrimStart = /^\s+/;

/**
 * The base implementation of `_.trim`.
 *
 * @private
 * @param {string} string The string to trim.
 * @returns {string} Returns the trimmed string.
 */
function baseTrim(string) {
  return string
    ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '')
    : string;
}

/** Used as references for various `Number` constants. */
var NAN = 0 / 0;

/** Used to detect bad signed hexadecimal string values. */
var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

/** Used to detect binary string values. */
var reIsBinary = /^0b[01]+$/i;

/** Used to detect octal string values. */
var reIsOctal = /^0o[0-7]+$/i;

/** Built-in method references without a dependency on `root`. */
var freeParseInt = parseInt;

/**
 * Converts `value` to a number.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {number} Returns the number.
 * @example
 *
 * _.toNumber(3.2);
 * // => 3.2
 *
 * _.toNumber(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toNumber(Infinity);
 * // => Infinity
 *
 * _.toNumber('3.2');
 * // => 3.2
 */
function toNumber(value) {
  if (typeof value == 'number') {
    return value;
  }
  if ((0,_common_fda1462e_js__WEBPACK_IMPORTED_MODULE_15__.c)(value)) {
    return NAN;
  }
  if ((0,_getTag_96af029d_js__WEBPACK_IMPORTED_MODULE_31__.j)(value)) {
    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
    value = (0,_getTag_96af029d_js__WEBPACK_IMPORTED_MODULE_31__.j)(other) ? (other + '') : other;
  }
  if (typeof value != 'string') {
    return value === 0 ? value : +value;
  }
  value = baseTrim(value);
  var isBinary = reIsBinary.test(value);
  return (isBinary || reIsOctal.test(value))
    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
    : (reIsBadHex.test(value) ? NAN : +value);
}

/**
 * Gets the timestamp of the number of milliseconds that have elapsed since
 * the Unix epoch (1 January 1970 00:00:00 UTC).
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Date
 * @returns {number} Returns the timestamp.
 * @example
 *
 * _.defer(function(stamp) {
 *   console.log(_.now() - stamp);
 * }, _.now());
 * // => Logs the number of milliseconds it took for the deferred invocation.
 */
var now = function() {
  return _getTag_96af029d_js__WEBPACK_IMPORTED_MODULE_31__.r.Date.now();
};

/** Error message constants. */
var FUNC_ERROR_TEXT = 'Expected a function';

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max,
    nativeMin = Math.min;

/**
 * Creates a debounced function that delays invoking `func` until after `wait`
 * milliseconds have elapsed since the last time the debounced function was
 * invoked. The debounced function comes with a `cancel` method to cancel
 * delayed `func` invocations and a `flush` method to immediately invoke them.
 * Provide `options` to indicate whether `func` should be invoked on the
 * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
 * with the last arguments provided to the debounced function. Subsequent
 * calls to the debounced function return the result of the last `func`
 * invocation.
 *
 * **Note:** If `leading` and `trailing` options are `true`, `func` is
 * invoked on the trailing edge of the timeout only if the debounced function
 * is invoked more than once during the `wait` timeout.
 *
 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
 *
 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
 * for details over the differences between `_.debounce` and `_.throttle`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to debounce.
 * @param {number} [wait=0] The number of milliseconds to delay.
 * @param {Object} [options={}] The options object.
 * @param {boolean} [options.leading=false]
 *  Specify invoking on the leading edge of the timeout.
 * @param {number} [options.maxWait]
 *  The maximum time `func` is allowed to be delayed before it's invoked.
 * @param {boolean} [options.trailing=true]
 *  Specify invoking on the trailing edge of the timeout.
 * @returns {Function} Returns the new debounced function.
 * @example
 *
 * // Avoid costly calculations while the window size is in flux.
 * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
 *
 * // Invoke `sendMail` when clicked, debouncing subsequent calls.
 * jQuery(element).on('click', _.debounce(sendMail, 300, {
 *   'leading': true,
 *   'trailing': false
 * }));
 *
 * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
 * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
 * var source = new EventSource('/stream');
 * jQuery(source).on('message', debounced);
 *
 * // Cancel the trailing debounced invocation.
 * jQuery(window).on('popstate', debounced.cancel);
 */
function debounce(func, wait, options) {
  var lastArgs,
      lastThis,
      maxWait,
      result,
      timerId,
      lastCallTime,
      lastInvokeTime = 0,
      leading = false,
      maxing = false,
      trailing = true;

  if (typeof func != 'function') {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  wait = toNumber(wait) || 0;
  if ((0,_getTag_96af029d_js__WEBPACK_IMPORTED_MODULE_31__.j)(options)) {
    leading = !!options.leading;
    maxing = 'maxWait' in options;
    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
    trailing = 'trailing' in options ? !!options.trailing : trailing;
  }

  function invokeFunc(time) {
    var args = lastArgs,
        thisArg = lastThis;

    lastArgs = lastThis = undefined;
    lastInvokeTime = time;
    result = func.apply(thisArg, args);
    return result;
  }

  function leadingEdge(time) {
    // Reset any `maxWait` timer.
    lastInvokeTime = time;
    // Start the timer for the trailing edge.
    timerId = setTimeout(timerExpired, wait);
    // Invoke the leading edge.
    return leading ? invokeFunc(time) : result;
  }

  function remainingWait(time) {
    var timeSinceLastCall = time - lastCallTime,
        timeSinceLastInvoke = time - lastInvokeTime,
        timeWaiting = wait - timeSinceLastCall;

    return maxing
      ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)
      : timeWaiting;
  }

  function shouldInvoke(time) {
    var timeSinceLastCall = time - lastCallTime,
        timeSinceLastInvoke = time - lastInvokeTime;

    // Either this is the first call, activity has stopped and we're at the
    // trailing edge, the system time has gone backwards and we're treating
    // it as the trailing edge, or we've hit the `maxWait` limit.
    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
  }

  function timerExpired() {
    var time = now();
    if (shouldInvoke(time)) {
      return trailingEdge(time);
    }
    // Restart the timer.
    timerId = setTimeout(timerExpired, remainingWait(time));
  }

  function trailingEdge(time) {
    timerId = undefined;

    // Only invoke if we have `lastArgs` which means `func` has been
    // debounced at least once.
    if (trailing && lastArgs) {
      return invokeFunc(time);
    }
    lastArgs = lastThis = undefined;
    return result;
  }

  function cancel() {
    if (timerId !== undefined) {
      clearTimeout(timerId);
    }
    lastInvokeTime = 0;
    lastArgs = lastCallTime = lastThis = timerId = undefined;
  }

  function flush() {
    return timerId === undefined ? result : trailingEdge(now());
  }

  function debounced() {
    var time = now(),
        isInvoking = shouldInvoke(time);

    lastArgs = arguments;
    lastThis = this;
    lastCallTime = time;

    if (isInvoking) {
      if (timerId === undefined) {
        return leadingEdge(lastCallTime);
      }
      if (maxing) {
        // Handle invocations in a tight loop.
        clearTimeout(timerId);
        timerId = setTimeout(timerExpired, wait);
        return invokeFunc(lastCallTime);
      }
    }
    if (timerId === undefined) {
      timerId = setTimeout(timerExpired, wait);
    }
    return result;
  }
  debounced.cancel = cancel;
  debounced.flush = flush;
  return debounced;
}

const component$b = "rfx-args-editor";
const HTMLClasses$g = {
    unsupportedComponentMessage: `${component$b}__unsupported-component-message`,
    unsupportedComponentContainer: `${component$b}__unsupported-component-container`
};

const rfxArgsEditorCss = ":root{--calcite-color-brand:#007ac2;--calcite-color-brand-hover:#00619b;--calcite-color-brand-press:#004874;--calcite-color-status-info:#00619b;--calcite-color-status-success:#35ac46;--calcite-color-status-warning:#edd317;--calcite-color-status-danger:#d83020;--calcite-color-status-danger-hover:#a82b1e;--calcite-color-status-danger-press:#7c1d13;--calcite-color-background:#f8f8f8;--calcite-color-foreground-1:#ffffff;--calcite-color-foreground-2:#f3f3f3;--calcite-color-foreground-3:#eaeaea;--calcite-color-text-1:#151515;--calcite-color-text-2:#4a4a4a;--calcite-color-text-3:#6a6a6a;--calcite-color-text-inverse:#ffffff;--calcite-color-text-link:#00619b;--calcite-color-border-1:#cacaca;--calcite-color-border-2:#d4d4d4;--calcite-color-border-3:#dfdfdf;--calcite-color-border-input:#949494;--rfx-quarter-spacing:0.25rem;--rfx-half-spacing:0.5rem;--rfx-three-quarter-spacing:0.75rem;--rfx-full-spacing:1rem;--rfx-component-default-width:100%;--rfx-ui-border-input:var(--calcite-color-border-2);--rfx-popover-content-min-height:30vh;--rfx-popover-content-max-height:60vh;--rfx-popover-content-height:45vh;--rfx-widget-content-height:30vh}.rfx-args-editor__unsupported-component-message{--calcite-ui-text-1:red}";

const RFxArgsEditor = class {
    constructor(hostRef) {
        (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.rfxArgHelpClick = (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "rfxArgHelpClick", 7);
        this.rfxUnsupportedFunctionFound = (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "rfxUnsupportedFunctionFound", 7);
        this.rfxBrowseClick = (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "rfxBrowseClick", 7);
        /**
         * @category Private
         */
        this.direction = "ltr";
        /**
         * @category Private
         */
        this.rasterFunctions = null;
        /**
         * @category Private
         */
        this.enumLabels = null;
        /**
         * @category Private
         */
        this.categoryReference = null;
        this.isFunctionChain = false;
        /**
         * will set internally if unsupported functions are found
         */
        this.hasUnsupportedFunctions = false;
        /**
         * use check the template is valid
         * @category Private
         */
        this.isTemplateValid = true;
        this.templateErrors = new Set();
        this._inputWidgets = [];
        /**
         * stores
         */
        this.rfxSectionMapper = new Map();
        /**
         * stores Pseudo Args to be hidden from persistence
         */
        this.pseudoArgs = new Set();
        // Event handlers are intentionally written using arrow functions to avoid scope issues
        this.handleHelpActionClick = (params) => {
            const { helpTextID, heading, referenceElement } = params;
            const helpActionClickWrapper = async () => {
                const helpText = await (0,_help_text_34a29835_js__WEBPACK_IMPORTED_MODULE_5__.g)(helpTextID);
                this.rfxArgHelpClick.emit({
                    referenceElement,
                    helpSrcdoc: helpText,
                    heading
                });
            };
            return helpActionClickWrapper;
        };
        this.rfxTemplate = undefined;
        this.showChildrenRFTs = true;
        this.showAllArguments = false;
        this.imageryLayers = undefined;
        this.featureLayers = undefined;
        this.showVariableNames = true;
        this.mode = _interfaces_d0c68944_js__WEBPACK_IMPORTED_MODULE_7__.a.ANALYSIS;
        this.showUnsupportedFunction = false;
        this.mapView = undefined;
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    async componentWillLoad() {
        ({ strings: this.strings, dir: this.direction } = await (0,_localization_helper_4819b67d_js__WEBPACK_IMPORTED_MODULE_3__.b)(this.hostElement, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.g)(`.`)));
        const { locale } = (0,_localization_helper_4819b67d_js__WEBPACK_IMPORTED_MODULE_3__.g)(this.hostElement);
        this.rasterFunctions = await (0,_functions_f1f2dffd_js__WEBPACK_IMPORTED_MODULE_2__.g)(locale);
        this.enumLabels = await (0,_resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.g)(locale);
        this.categoryReference = await (0,_resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.e)(locale);
        this.argDataTypes = _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d;
        this.domainTypes = _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a;
    }
    componentDidRender() {
        if (this.rfxTemplate !== undefined) {
            this._rfxTemplate = (0,_rfx_args_helper_ab401543_js__WEBPACK_IMPORTED_MODULE_6__.j)(this.rfxTemplate);
            this._honorIsPublic = (0,_rfx_args_helper_ab401543_js__WEBPACK_IMPORTED_MODULE_6__.s)(this.rfxTemplate);
        }
        if (this.argsContainterNode !== undefined && this._rfxTemplate !== undefined) {
            this.populateUI();
        }
    }
    /**
     * a public method to get the updated template with the values selected by the user
     *
     */
    async getUpdatedRFTWithValues() {
        const templateWithVals = this._getUpdatedRFTWithValues(this._rfxTemplate);
        return Promise.resolve((0,_rfx_args_helper_ab401543_js__WEBPACK_IMPORTED_MODULE_6__.j)(templateWithVals, [
            "input",
            "uxBlocks",
            "overrideWidget",
            "displayName",
            "helpTextID",
            ...this.pseudoArgs
        ]));
    }
    /**
     * gives the validity status of the template and also the error which caused the
     * @returns Promise<RFxValidityState>
     */
    async checkTemplateValidity() {
        return Promise.resolve({ valid: this.isTemplateValid, errorStrings: [...this.templateErrors] });
    }
    //--------------------------------------------------------------------------
    //
    //  Private Methods
    //
    //--------------------------------------------------------------------------
    populateUI() {
        // this._destroyInputWidgets();
        this.argsContainterNode.innerHTML = "";
        this.isFunctionChain = (0,_rfx_args_helper_ab401543_js__WEBPACK_IMPORTED_MODULE_6__.n)(this._rfxTemplate);
        this.buildRFxTemplateUI(this._rfxTemplate);
        if (this.hasUnsupportedFunctions === true) {
            this.rfxUnsupportedFunctionFound.emit();
        }
        // done only for aggregation function where for aggregation definition is depends upon the chained RFT out put.
        // aggregation definition has a limitation that UI cannot be loaded if the layer arg input is not there.
        // going this hacky route, just creation the UI of definition once the whole UI creation is finished.
        // if there are more functions with same level of dependency we may have to think of a proper way
        // if (this._rfxTemplate[ARGS_KEYWORD].type === "RasterCollectionFunctionArguments" && !this._rfxTemplate[ARGS_KEYWORD].AggregationDefinition.input) {
        //     var inputArgName = "AggregationDefinition";
        //     var rfxArgs = this._rfxTemplate[ARGS_KEYWORD];
        //     var functionSchema = rfxUtils.getFunctionSchema(this._rfxTemplate);
        //     var functionSchemaArgs = functionSchema && functionSchema.rasterFunctionArguments;
        //     var rfxArg = rfxArgs[inputArgName];
        //     var argSchema = rfxUtils.getCaseInsenstitiveArg(inputArgName, functionSchemaArgs);
        //     var widgetContainer = rfxArg.uxBlocks[2];
        //     this.createInputWidget(rfxArg, widgetContainer, argSchema, rfxArgs);
        // }
    }
    /**
     * Main function called to build the UI for an RFT; Builds the UI for an RFxTemplate and its contained RFxTemplates and RFxArgs.
     * Flow: buildRFxTemplateUI -> buildRFxUI (For each individual rfx)
     * buildRFxTemplateUI -> buildArgRFTUI (to check for rfts within arguments and build the UI for them)
     *
     * @param {RFxTemplate} rfxTemplate - The RFxTemplate to build the UI for.
     * @returns {void}
     *
     * */
    buildRFxTemplateUI(rfxTemplate) {
        const rfxArgs = rfxTemplate[_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_8__.A];
        if (rfxTemplate[_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_8__.F] && rfxTemplate.name && rfxArgs) {
            this.buildRFxUI(rfxTemplate);
        }
        if ((0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_8__.i)(this.showChildrenRFTs) ||
            (0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_8__.i)(rfxArgs) ||
            this.hasUnsupportedFunctions === true) {
            return;
        }
        if ((0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_8__.a)(rfxArgs)) {
            this.buildArgRFTUI(rfxArgs);
            return;
        }
        // Build UI of chained functions.
        for (const rfxTemplateArgName in rfxArgs) {
            if (rfxTemplateArgName === _type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_8__.T) {
                continue;
            }
            const rfxTemplateArg = rfxArgs[rfxTemplateArgName];
            if ((0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_8__.a)(rfxTemplateArg)) {
                this.buildArgRFTUI(rfxTemplateArg);
            }
        }
    }
    isUnsupportedFunction(rfxtemplate) {
        if (this.showUnsupportedFunction !== true) {
            // if all the args, which is not of type RFT is not public, then we can render the UI
            const hasPublicArgs = Object.keys(rfxtemplate.arguments).some((argName) => {
                const rfxArg = rfxtemplate.arguments[argName];
                return rfxArg.type !== _type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_8__.b && this._isShown(rfxArg);
            });
            return hasPublicArgs;
        }
        return false;
    }
    buildRFxUI(rfxTemplateComponent) {
        // Builds UI for a single RFx
        const rfxArgs = rfxTemplateComponent[_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_8__.A];
        let overriddenArgNames = [];
        const unsupportedOverrideArgs = [];
        const stateTriggerArgs = [];
        const valueTriggerArgs = [];
        const functionSchema = (0,_rfx_args_helper_ab401543_js__WEBPACK_IMPORTED_MODULE_6__.g)({
            schema: this.rasterFunctions,
            rfxTemplate: rfxTemplateComponent
        });
        if (functionSchema.hidden && this.isUnsupportedFunction(rfxTemplateComponent)) {
            this.hasUnsupportedFunctions = true;
            return;
        }
        const functionSchemaArgs = functionSchema?.rasterFunctionArguments;
        const schemaEditorOverrides = functionSchema?.editorArgumentOverride?.active
            ? functionSchema.editorArgumentOverride.overrides
            : null;
        // Logic to handle customFunctions to show help texts
        if (!(0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_8__.i)(rfxTemplateComponent.customFunction)) {
            rfxArgs.customFunction = rfxTemplateComponent.customFunction;
        }
        const mainContainer = document.createElement("div");
        mainContainer.setAttribute("id", (0,_common_fda1462e_js__WEBPACK_IMPORTED_MODULE_15__.g)("rfx-container-"));
        const titlePaneNode = document.createElement("div");
        if (this.isFunctionChain === true) {
            this.argsContainterNode.prepend(titlePaneNode);
        }
        else {
            this.argsContainterNode.appendChild(titlePaneNode);
        }
        let argUIBuildResults;
        const commonArgs = {
            functionSchema,
            functionSchemaArgs,
            schemaEditorOverrides,
            rfxArgs,
            // sessionData,
            container: mainContainer,
            stateTriggerArgs,
            valueTriggerArgs,
            overriddenArgNames,
            unsupportedOverrideArgs
        };
        const collateRFxUIBuildResults = (results) => {
            if (!results)
                return;
            overriddenArgNames = [...overriddenArgNames, ...results.overriddenArgNames];
            unsupportedOverrideArgs?.push(...results.unsupportedOverrideArgs);
        };
        const buildUIIteratively = (argumentsJson) => {
            Object.keys(argumentsJson).forEach((rfxTemplateArgName) => {
                const rfxTemplateArg = (0,_rfx_args_helper_ab401543_js__WEBPACK_IMPORTED_MODULE_6__.d)(rfxTemplateArgName, rfxArgs);
                if (rfxTemplateArg && (0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_8__.a)(rfxTemplateArg) && !rfxTemplateArg.uxBlocks) {
                    argUIBuildResults = this.buildRFxArgUI({
                        ...commonArgs,
                        rfxArg: rfxTemplateArg,
                        rfxArgName: rfxTemplateArgName
                    });
                    collateRFxUIBuildResults(argUIBuildResults);
                }
            });
        };
        if (!(0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_8__.i)(rfxArgs)) {
            if ((0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_8__.a)(rfxArgs)) {
                argUIBuildResults = this.buildRFxArgUI({ rfxArg: rfxArgs, ...commonArgs });
                collateRFxUIBuildResults(argUIBuildResults);
            }
            else {
                if (!(0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_8__.i)(functionSchemaArgs)) {
                    // if schema exists build UI in the schema order
                    buildUIIteratively.bind(this)(functionSchemaArgs);
                }
                buildUIIteratively.bind(this)(rfxArgs); //if schema doesn't exist or there are arguments in RFT which are not in schema build UI for that
            }
            stateTriggerArgs.forEach((triggerArg) => {
                const rfxArg = triggerArg.rfxArg, value = rfxArg && rfxArg.value;
                // Pass mainContainer to handle visibility of Category Pane
                // Passed here because mainContainer is not yet appended to DOM
                this._handleEditorStateTriggers(rfxArgs, value, triggerArg.schemaArgDef);
            });
            valueTriggerArgs.forEach((triggerArg) => {
                const rfxArg = triggerArg.rfxArg, value = rfxArg && rfxArg.value;
                this._handleEditorValueTriggers(rfxArgs, value, triggerArg.schemaArgDef);
            });
        }
        if (mainContainer.childNodes && mainContainer.childNodes.length && this.showChildrenRFTs) {
            let unsupportedWarningComponent = null;
            if (unsupportedOverrideArgs?.length > 0) {
                //set the validity of RFT to false as the override widget is not there
                this.isTemplateValid = false;
                unsupportedWarningComponent =
                    this.createUnsupportedWarningComponent(unsupportedOverrideArgs);
            }
            const titlePane = (0,_widget_factory_e81c7501_js__WEBPACK_IMPORTED_MODULE_21__.b)({
                content: mainContainer,
                unsupportedWarningComponent,
                title: rfxTemplateComponent.function?.name,
                isFunctionChain: this.isFunctionChain
            });
            titlePaneNode.appendChild(titlePane);
        }
        else {
            titlePaneNode.appendChild(mainContainer);
        }
    }
    createInputWidget(rfxArg, widgetContainer, argSchema, rfxArgs) {
        let widget;
        if (!rfxArg) {
            widget = undefined;
        }
        const dataType = argSchema?.dataType;
        const value = rfxArg.value ?? argSchema?.defaultValue;
        const domain = argSchema?.domain;
        const dataTypeAttributes = argSchema?.dataTypeAttributes;
        if (rfxArg.isDataset || dataType === _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster) {
            widget = document.createElement("rfx-dte-raster-input");
            widget.inputLayers = this.imageryLayers;
            widget.allowScalar = argSchema.allowScalar;
            widget.value = value;
        }
        else if (domain) {
            widget = this.getDomainBasedWidget({
                domain,
                argDetails: { rfxArg, argSchema, rfxArgs },
                value
            });
        }
        else {
            widget = this.getDataTypeBasedWidget({
                dataType,
                dataTypeAttributes,
                argDetails: { rfxArg, argSchema, rfxArgs }
            });
        }
        if (widget) {
            widget.addEventListener("rfxArgumentChange", (event) => {
                this.onArgumentValueChange({ rfxArg, argSchema, rfxArgs }, event?.detail.value);
            });
            widget.rfxBrowseLayerClick = this.handleBrowseLayerClick.bind(this);
        }
        widgetContainer.appendChild(widget);
        rfxArg.input = widget;
        this._inputWidgets.push(widget);
        this.attachRFxArgHelpClick(widget);
        return widget;
    }
    buildArgRFTUI(rfxArg) {
        if (!rfxArg)
            return;
        let argRFT = (0,_rfx_args_helper_ab401543_js__WEBPACK_IMPORTED_MODULE_6__.b)(rfxArg);
        if (argRFT) {
            this.buildRFxTemplateUI(argRFT);
        }
        else if ((0,_rfx_args_helper_ab401543_js__WEBPACK_IMPORTED_MODULE_6__.h)(rfxArg)) {
            const elements = rfxArg.value.elements ?? [rfxArg.value];
            Array.from(elements).forEach((element) => {
                argRFT = (0,_rfx_args_helper_ab401543_js__WEBPACK_IMPORTED_MODULE_6__.b)(element);
                if (argRFT) {
                    this.buildRFxTemplateUI(argRFT);
                }
            });
        }
    }
    // TODO give appropriate type
    buildRFxArgUI(options) {
        // builds the UI for a single RFx Arg
        options = options || {};
        let schemaArgName = "", schemaArgDef, overriddenArgNames = options.overriddenArgNames, unsupportedOverrideArgs = [];
        const rfxArg = options.rfxArg, rfxArgName = options.rfxArgName, functionSchemaArgs = options.functionSchemaArgs, schemaEditorOverrides = options.schemaEditorOverrides, rfxArgs = options.rfxArgs, 
        // sessionData = options.sessionData,
        // container = options.container,
        stateTriggerArgs = options.stateTriggerArgs, valueTriggerArgs = options.valueTriggerArgs;
        let container = options.container;
        if (!rfxArg) {
            return;
        }
        if (functionSchemaArgs) {
            schemaArgName = (0,_rfx_args_helper_ab401543_js__WEBPACK_IMPORTED_MODULE_6__.k)(functionSchemaArgs, rfxArgName);
            schemaArgDef = functionSchemaArgs[schemaArgName];
            if (schemaArgDef) {
                schemaArgDef.key = schemaArgName;
            }
        }
        if (this._isShown(rfxArg, schemaArgDef) && schemaArgDef?.categoryRefId) {
            let section = this.rfxSectionMapper.get(`${container?.id}-${schemaArgDef.categoryRefId}`);
            if ((0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_8__.i)(section?.label)) {
                const categoryReference = this.categoryReference?.[schemaArgDef.categoryRefId];
                const isSectionOpen = categoryReference.visible;
                const sectionLabel = categoryReference.title;
                section = (0,_widget_factory_e81c7501_js__WEBPACK_IMPORTED_MODULE_21__.d)({ open: isSectionOpen, label: sectionLabel });
                this.rfxSectionMapper.set(`${container?.id}-${schemaArgDef.categoryRefId}`, section);
                container.appendChild(section);
            }
            container = section;
        }
        if (Array.isArray(schemaEditorOverrides)) {
            schemaEditorOverrides.forEach((editorArgumentOverride) => {
                const argumentNames = editorArgumentOverride.argumentNames;
                if (Array.isArray(argumentNames)) {
                    if (argumentNames.indexOf(schemaArgName) >= 0 &&
                        this._isOverrideWidgetShown(editorArgumentOverride.argumentNames, rfxArgs)) {
                        if (Array.isArray(overriddenArgNames) &&
                            overriddenArgNames.indexOf(schemaArgName) < 0) {
                            if (editorArgumentOverride?.widget?.path) {
                                //@todo to be removed when all the overrides start supporting
                                overriddenArgNames = overriddenArgNames.concat(editorArgumentOverride.argumentNames);
                                this._buildOverrideWidgetLayout(editorArgumentOverride, rfxArgs, container, functionSchemaArgs);
                            }
                            else {
                                unsupportedOverrideArgs = unsupportedOverrideArgs.concat(editorArgumentOverride.argumentNames);
                            }
                        }
                    }
                }
            });
        }
        if (Array.isArray(overriddenArgNames) &&
            overriddenArgNames.indexOf(schemaArgName) < 0 &&
            // In editor mode Need to show RFT inputs to other RFTs as <InputRFT.OutputRaster>,
            // in Analysis pane mode, if the arg type is template we will be hiding it.
            // Resh: @todo need to add a check on which mode this is opened.
            (schemaArgDef?.dataType === "rfxtemplate" || rfxArg?.type !== _type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_8__.b) &&
            this._isShown(rfxArg, schemaArgDef)) {
            this.buildRFxArgLayout(rfxArg, container, schemaArgDef, rfxArgs);
        }
        if (schemaArgDef && schemaArgDef.editorStateTrigger && schemaArgDef.editorStateTrigger.active) {
            stateTriggerArgs.push({
                rfxArg: rfxArg,
                schemaArgDef: schemaArgDef
            });
        }
        if (schemaArgDef && schemaArgDef.editorValueTrigger && schemaArgDef.editorValueTrigger.active) {
            valueTriggerArgs.push({
                rfxArg: rfxArg,
                schemaArgDef: schemaArgDef
            });
        }
        return {
            overriddenArgNames,
            unsupportedOverrideArgs
        };
    }
    _isOverrideWidgetShown(argumentNames, rfxArgs) {
        // If any of the arguments handled by the override widget are shown,
        // Show the override widget
        let rfxArg;
        return argumentNames.some((argName) => {
            rfxArg = (0,_rfx_args_helper_ab401543_js__WEBPACK_IMPORTED_MODULE_6__.d)(argName, rfxArgs);
            if (this._isShown(rfxArg)) {
                return true;
            }
        }, this);
    }
    _buildOverrideWidgetLayout(editorArgumentOverride, rfxArgs, container, functionSchemaArgs) {
        if (!editorArgumentOverride) {
            return;
        }
        const rasterArgs = {}, inputArgs = {}, triggerArgs = {};
        let triggerAttributes = "", rfxArg, schemaArg;
        if (editorArgumentOverride.triggerAttributes) {
            triggerAttributes = editorArgumentOverride.triggerAttributes;
        }
        //The argumentNames in editorArgumentOverride are from the rasterFunction schema, rfxArgs are from the RFT JSON
        //Adjusting here for case inconsistencies.
        editorArgumentOverride?.argumentNames?.forEach((argName) => {
            rfxArg = (0,_rfx_args_helper_ab401543_js__WEBPACK_IMPORTED_MODULE_6__.d)(argName, rfxArgs);
            schemaArg = functionSchemaArgs[argName];
            // PseudoArgs do not persist in RFT, in order for persistence to work this is done.
            if ((0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_8__.i)(rfxArg) && schemaArg.isPseudoArg) {
                rfxArg = schemaArg;
            }
            if (!(0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_8__.i)(schemaArg)) {
                schemaArg.key = argName;
            }
            if (rfxArg) {
                rfxArg.displayName = this.getArgDisplayName(rfxArg.name, schemaArg);
                rfxArg.helpTextID = schemaArg?.helpTextID;
                //assign the default value as value, if no value exists
                if (((0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_8__.i)(rfxArg.value) ||
                    (Array.isArray(rfxArg.value) && rfxArg.value.length === 0)) &&
                    schemaArg.defaultValue) {
                    rfxArg.value = schemaArg.defaultValue;
                }
                inputArgs[argName] = rfxArg;
            }
        }, this);
        editorArgumentOverride?.triggerArguments?.forEach((argName) => {
            rfxArg = (0,_rfx_args_helper_ab401543_js__WEBPACK_IMPORTED_MODULE_6__.d)(argName, rfxArgs);
            schemaArg = functionSchemaArgs[argName];
            if (!(0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_8__.i)(schemaArg)) {
                schemaArg.key = argName;
            }
            if (rfxArg) {
                rfxArg.displayName = this.getArgDisplayName(rfxArg.name, schemaArg);
                rfxArg.helpTextID = schemaArg?.helpTextID;
                triggerArgs[argName] = rfxArg;
            }
        }, this);
        Object.keys(functionSchemaArgs).forEach((key) => {
            schemaArg = functionSchemaArgs[key];
            if (schemaArg.dataType === this.argDataTypes.raster) {
                rfxArg = (0,_rfx_args_helper_ab401543_js__WEBPACK_IMPORTED_MODULE_6__.d)(key, rfxArgs);
                if (rfxArg) {
                    rasterArgs[key] = rfxArg;
                }
            }
        }, this);
        // TODO: maybe we don't need overrideWidgetContainer
        const overrideWidgetContainer = document.createElement("div");
        // needed for rfx-section to work
        overrideWidgetContainer.setAttribute("display", "block");
        container.appendChild(overrideWidgetContainer);
        // TODO: ama10117 figure out how to pass context without passing everything as prop.
        this._createOverrideWidget(editorArgumentOverride.widget.path, {
            rasterFunctionEnums: this.enumLabels,
            rasterFunctions: this.rasterFunctions,
            rasterArgs: rasterArgs,
            rfxArgs: rfxArgs,
            inputArgs: inputArgs,
            triggerArgs: triggerArgs,
            triggerAttributes: triggerAttributes,
            overrideWidgetPath: editorArgumentOverride.widget.path,
            helpTextIDs: editorArgumentOverride.helpTextIDs,
            inputLayers: this.imageryLayers,
            featureLayers: this.featureLayers,
            getRFT: this._getUpdatedRFTWithValues.bind(this),
            allowScalar: false,
            isShownFx: this._isShown,
            argSchema: schemaArg,
            browseProperties: {
                map: this.mapView
            },
            onHelpActionClick: (params) => this.handleHelpActionClick(params),
            onRfxBrowseLayerClick: this.handleBrowseLayerClick.bind(this)
        }, overrideWidgetContainer);
    }
    attachRFxArgHelpClick(widget) {
        widget.addEventListener("rfxArgHelpClick", (event) => {
            const { referenceElement, helpSrcdoc, heading } = event.detail;
            this.rfxArgHelpClick.emit({
                referenceElement,
                helpSrcdoc,
                heading
            });
        });
    }
    _createOverrideWidget(overrideWidgetTag, overrideWidgetArgs, widgetContainer) {
        // Needed to emit change event
        const rfxArgs = overrideWidgetArgs?.rfxArgs;
        const argName = Object.keys(overrideWidgetArgs?.inputArgs || {})[0];
        const rfxArg = (0,_rfx_args_helper_ab401543_js__WEBPACK_IMPORTED_MODULE_6__.d)(argName, rfxArgs);
        const toolName = (0,_functions_f1f2dffd_js__WEBPACK_IMPORTED_MODULE_2__.e)(rfxArgs);
        const rasterFunction = overrideWidgetArgs?.rasterFunctions?.[toolName];
        const argSchema = rasterFunction?.rasterFunctionArguments?.[argName];
        const overrideWidget = document.createElement(overrideWidgetTag);
        overrideWidget.widgetArgs = overrideWidgetArgs;
        this.attachRFxArgHelpClick(overrideWidget);
        overrideWidget.addEventListener("rfxArgumentChange", (event) => {
            this.onArgumentValueChange({ rfxArg, argSchema, rfxArgs }, event?.detail.value);
        });
        widgetContainer.appendChild(overrideWidget);
        const inputArgs = overrideWidgetArgs && overrideWidgetArgs.inputArgs;
        this._inputWidgets.push(overrideWidget);
        if (inputArgs) {
            Object.keys(inputArgs).forEach((_argName) => {
                const inputArg = inputArgs[_argName];
                if (inputArg) {
                    inputArg.uxBlocks = [widgetContainer];
                    // TODO: Don't think this is used anymore
                    inputArg.overrideWidget = overrideWidget;
                }
            });
        }
    }
    /**
     * Checks if the given RFx argument should be shown.
     * @param {any} rfxArg - The RFx argument to check.
     * @param {RFxArgumentSchema} [schemaArg] - The argument schema.
     * @returns {boolean} - Returns `true` if the RFx argument should be shown, `false` otherwise.
     */
    _isShown(rfxArg, schemaArg) {
        if (!rfxArg || schemaArg?.hidden) {
            return false;
        }
        if (this.showAllArguments) {
            return true;
        }
        if (this._honorIsPublic) {
            //if we are honoring is public show elements if the arg is explicitly set as ispublic or
            //arg value is an element array and one of the elemnet value is set as public
            return rfxArg.isPublic || this._hasVisibleElements(rfxArg) ? true : false;
        }
        return true;
    }
    _hasVisibleElements(rfxArg) {
        if (!rfxArg) {
            return false;
        }
        if ((0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_8__.c)(rfxArg)) {
            return false;
        }
        const elements = rfxArg.value && rfxArg.value.elements;
        if (Array.isArray(elements)) {
            return elements.some((element) => this._isShown(element));
        }
        return false;
    }
    buildRFxArgLayout(rfxArg, container, argSchema, rfxArgs) {
        const isBoolean = argSchema?.dataType === this.argDataTypes.boolean;
        const isSelfContainedRFxArgWidget = (0,_rfx_args_helper_ab401543_js__WEBPACK_IMPORTED_MODULE_6__.u)(argSchema);
        const hasDomain = Boolean(argSchema?.domain);
        const layoutConatiner = document.createElement("div");
        layoutConatiner.setAttribute("type", "layout");
        if (isSelfContainedRFxArgWidget || isBoolean) {
            container.appendChild(layoutConatiner);
            rfxArg.uxBlocks = [layoutConatiner];
        }
        if (isSelfContainedRFxArgWidget) {
            // If the widget has its own label and needs only one row
            return this.buildRFxWidgetLayout(layoutConatiner, rfxArg, argSchema, rfxArgs);
        }
        if (isBoolean && !hasDomain) {
            return this.buildBooleanLayout(layoutConatiner, rfxArg, argSchema, rfxArgs);
        }
        return this.buildStdTwoRowLayout(container, rfxArg, argSchema, rfxArgs);
    }
    buildRFxWidgetLayout(container, rfxArg, argSchema, rfxArgs) {
        const widgetContainer = document.createElement("div");
        container.appendChild(widgetContainer);
        this.createInputWidget(rfxArg, widgetContainer, argSchema, rfxArgs);
    }
    buildBooleanLayout(container, rfxArg, argSchema, rfxArgs) {
        const calciteLabelWrapper = document.createElement("calcite-label");
        calciteLabelWrapper.alignment = "start";
        calciteLabelWrapper.scale = _ui_utils_928a4096_js__WEBPACK_IMPORTED_MODULE_4__.U.Scale;
        calciteLabelWrapper.layout = "inline-space-between";
        const widgetContainer = document.createElement("div");
        const label = this.getArgDisplayName(rfxArg.name, argSchema);
        const rfxArgLabel = (0,_widget_factory_e81c7501_js__WEBPACK_IMPORTED_MODULE_21__.e)({
            label: label,
            hideHelp: (0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_8__.i)(argSchema?.helpTextID),
            onHelpActionClick: this.handleHelpActionClick({
                heading: label,
                referenceElement: calciteLabelWrapper,
                helpTextID: argSchema?.helpTextID
            })
        });
        calciteLabelWrapper.appendChild(widgetContainer);
        calciteLabelWrapper.appendChild(rfxArgLabel);
        container.appendChild(calciteLabelWrapper);
        this.createInputWidget(rfxArg, widgetContainer, argSchema, rfxArgs);
    }
    buildStdTwoRowLayout(container, rfxArg, argSchema, rfxArgs) {
        const widgetContainer = document.createElement("div");
        // Container has both the RFxArg Label and the widget
        const calciteLabelWrapper = document.createElement("calcite-label");
        calciteLabelWrapper.alignment = "start";
        calciteLabelWrapper.scale = _ui_utils_928a4096_js__WEBPACK_IMPORTED_MODULE_4__.U.Scale;
        calciteLabelWrapper.layout = "default";
        const label = this.getArgDisplayName(rfxArg.name, argSchema);
        const rfxArgLabel = (0,_widget_factory_e81c7501_js__WEBPACK_IMPORTED_MODULE_21__.e)({
            label: label,
            hideHelp: (0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_8__.i)(argSchema?.helpTextID),
            onHelpActionClick: this.handleHelpActionClick({
                heading: label,
                referenceElement: calciteLabelWrapper,
                helpTextID: argSchema?.helpTextID
            })
        });
        calciteLabelWrapper.appendChild(rfxArgLabel);
        calciteLabelWrapper.appendChild(widgetContainer);
        container.appendChild(calciteLabelWrapper);
        rfxArg.uxBlocks = [calciteLabelWrapper];
        this.createInputWidget(rfxArg, widgetContainer, argSchema, rfxArgs);
    }
    _getActiveStateTriggers(rfxArgs, value, _argSchema) {
        // TODO: Ama10117 - use conditional checks for accessing properties.
        const toolName = (0,_functions_f1f2dffd_js__WEBPACK_IMPORTED_MODULE_2__.e)(rfxArgs);
        const activeTriggers = [];
        // Step 1: iterate over each rfxArg
        Object.keys(rfxArgs).forEach((_rfxArgName) => {
            // Step 2: extract argSchema for each _rfxArgName
            const rasterFunction = this.rasterFunctions[toolName];
            const argSchema = rasterFunction &&
                rasterFunction.rasterFunctionArguments &&
                rasterFunction.rasterFunctionArguments[_rfxArgName];
            let argValue = this.getArgumentValue(rfxArgs[_rfxArgName], argSchema);
            // if argValue is not boolean and is a number, because if value is boolean gets converted to 1 or 0
            if (typeof argValue !== "boolean" && !isNaN(argValue)) {
                // check done to convert number strings to numbers
                argValue = Number(argValue);
            }
            if (argSchema &&
                argSchema.dataType === "raster" &&
                _argSchema?.key === _rfxArgName &&
                value &&
                value.type === "change") {
                argValue = value && value.detail.widget.value;
            }
            // Step 3: early exits
            const isStateTriggerAcive = argSchema?.editorStateTrigger?.active && rfxArgs;
            // check if argSchema has editor state triggers and if it is active else exit
            if (!isStateTriggerAcive) {
                return;
            }
            const hasStateTriggers = Array.isArray(argSchema.editorStateTrigger.triggers);
            if (!hasStateTriggers) {
                return;
            }
            // Step 4: iterate over each trigger
            argSchema.editorStateTrigger.triggers.forEach((trigger) => {
                let rfxArg, isActive, isInactive, uxBlocks, showWidget, hideWidget, display;
                // checkValuePresent flag: checks if a value is present in field,
                // if true and value is present set `isTriggerValue` as true. (used in `Switchable` Domain type)
                const autoRevert = trigger.autoRevert || false;
                const isTriggerValue = trigger.checkValuePresent
                    ? !!argValue
                    : Array.isArray(trigger.values) && trigger.values.indexOf(argValue) >= 0;
                // display is only modified when `isTriggerValue` : true or `autoRevert`: true
                // if both are false no need to iterate over each rfxArgs as display wont be affected
                if (!isTriggerValue && !autoRevert) {
                    // skip to the next trigger
                    return;
                }
                //Step 5: for each trigger identify the active and inactive changes
                Object.keys(rfxArgs).forEach((rfxArgName) => {
                    if (rfxArgName === _rfxArgName) {
                        return;
                    }
                    // Getting the Schema of the fields to extract the category of the field
                    const _rasterFunction = this.rasterFunctions?.[toolName];
                    const _argSchema = _rasterFunction?.rasterFunctionArguments?.[rfxArgName];
                    const category = _argSchema && _argSchema.categoryRefId;
                    rfxArg = rfxArgs[rfxArgName];
                    uxBlocks = rfxArg?.uxBlocks;
                    // let argWidget = rfxArg.input;
                    if (!(uxBlocks && Array.isArray(uxBlocks))) {
                        // skip to next rfxArgName
                        return;
                    }
                    isActive = (0,_rfx_args_helper_ab401543_js__WEBPACK_IMPORTED_MODULE_6__.e)(trigger.active, rfxArgName);
                    isInactive = (0,_rfx_args_helper_ab401543_js__WEBPACK_IMPORTED_MODULE_6__.e)(trigger.inactive, rfxArgName);
                    showWidget =
                        (isActive && isTriggerValue) || (isInactive && !isTriggerValue && autoRevert);
                    hideWidget =
                        (isInactive && isTriggerValue) || (isActive && !isTriggerValue && autoRevert);
                    if (showWidget) {
                        display =
                            uxBlocks && uxBlocks[0] && uxBlocks[0].tagName === "div" ? "table-row" : "block";
                        activeTriggers.push({
                            state: "active",
                            rfxArgName: rfxArgName,
                            display: display,
                            category: category
                        });
                    }
                    if (hideWidget) {
                        display = "none";
                        activeTriggers.push({
                            state: "inactive",
                            rfxArgName: rfxArgName,
                            display: display,
                            category: category
                        });
                    }
                }, this);
            }, this);
        }, this);
        return activeTriggers;
    }
    _handleEditorStateTriggers(rfxArgs, value, argSchema) {
        // container is used to handle the visibility of Category Panel
        const isStateTriggerAcive = argSchema && argSchema.editorStateTrigger && argSchema.editorStateTrigger.active && rfxArgs;
        // check if argSchema has editor state triggers and if it is active else exit
        if (!isStateTriggerAcive) {
            return;
        }
        let activeTriggers = this._getActiveStateTriggers(rfxArgs, value, argSchema);
        const filterRule = (trigger, index, array) => {
            // return true if you want to keep the item in array
            // Rule 1 => remove exactly same items.
            const identicalItem = array.some((element, _index) => {
                return (_index > index &&
                    element.rfxArgName === trigger.rfxArgName &&
                    element.state === trigger.state);
            });
            if (identicalItem) {
                // if identical item exists, then return false to discard this item.
                return false;
            }
            // Rule 2 => remove active triggers if they are also inactive.
            const invalidTrigger = array.some((element, _index) => {
                return (_index !== index &&
                    element.rfxArgName === trigger.rfxArgName &&
                    element.state !== trigger.state);
            });
            if (invalidTrigger && trigger.state === "active") {
                // if trigger is invalid means both active and inactive state
                // exist for same 'rfxArg'; then remove 'active' one
                return false;
            }
            return true;
        };
        // Step 6: remove duplicates from the active triggers.
        // Rule: inactive trigger is given more priortiy over active triggers
        // Step 7: remove 'active' from triggers (rfxArgName) which have both active and inactive state.
        activeTriggers = activeTriggers.filter(filterRule, this);
        let rfxArgName, rfxArg, uxBlocks, argWidget;
        activeTriggers.forEach(function (stateTrigger) {
            rfxArgName = stateTrigger.rfxArgName;
            rfxArg = rfxArgs[rfxArgName];
            uxBlocks = rfxArg.uxBlocks;
            argWidget = rfxArg.input;
            const isStateTriggerActive = stateTrigger.state === "active";
            const hasOnChange = argWidget && argWidget.onChange;
            const activeTriggerFunctionKey = rfxArgName && rfxArgName.toLowerCase();
            const valueChangedfunctionKey = argSchema && argSchema.key && argSchema.key.toLowerCase();
            // avoid calling onChange methods when the changed Widget is of type Raster
            if (isStateTriggerActive &&
                hasOnChange &&
                activeTriggerFunctionKey !== valueChangedfunctionKey) {
                argWidget.onChange(argWidget.value);
            }
            uxBlocks.forEach((uxBlock) => {
                if (uxBlock &&
                    stateTrigger.display &&
                    uxBlock?.className?.indexOf("calcite-component") < 0) {
                    //   domStyle.set(uxBlock, "display", stateTrigger.display);
                    uxBlock.style.display = stateTrigger.display;
                    uxBlock.setAttribute("display", stateTrigger.display);
                }
            });
        }, this);
        // Step 8: if all fields from a particular category are 'inactive' then hide the category
        /** Done to handle Edge case
         * <case> when all fields from a category are hidden -> hide the category
         */
        // var RFxNameAndCategoryRefIdRelation = this._getRFxNameAndCategoryRefIdRelation(rfxArgs);
        //@todo
        // this._handleCategoryVisibility(RFxNameAndCategoryRefIdRelation, activeTriggers, container);
    }
    _handleEditorValueTriggers(rfxArgs, value, argSchema) {
        if (argSchema &&
            argSchema.editorValueTrigger &&
            argSchema.editorValueTrigger.active &&
            rfxArgs) {
            //Setting argument table row display based on triggers
            if (!Array.isArray(argSchema.editorValueTrigger.triggers)) {
                return;
            }
            argSchema.editorValueTrigger.triggers.forEach((trigger) => {
                let rfxArg, argWidget, triggerArgValue;
                const isTriggerValue = Array.isArray(trigger.values) && trigger.values.indexOf(value) >= 0;
                if (isTriggerValue) {
                    Object.keys(rfxArgs).forEach((rfxArgName) => {
                        rfxArg = rfxArgs[rfxArgName];
                        argWidget = rfxArg.input;
                        if (argWidget) {
                            triggerArgValue = this._getTriggerArgValue(trigger.changedArgs, rfxArgName);
                            if (triggerArgValue !== null && triggerArgValue !== undefined) {
                                argWidget.value = triggerArgValue;
                                // if (rfxArgs.type === "PansharpeningFunctionArguments") {
                                //   argWidget.refreshGrid && argWidget.refreshGrid();
                                // }
                            }
                        }
                    });
                }
            }, this);
        }
    }
    getArgDisplayName(rfxArgName, argSchema) {
        if (!argSchema || !argSchema.displayName) {
            return rfxArgName;
        }
        if (this.showVariableNames) {
            // take the localized argument display name if the argument name in RFT is same as the default name
            // else display the argument name itself
            const argName = argSchema?.key;
            if (rfxArgName == null ||
                rfxArgName === "" ||
                rfxArgName.toLowerCase() === argName?.toLowerCase()) {
                return argSchema.displayName;
            }
            else {
                return rfxArgName;
            }
        }
        else {
            return argSchema.displayName;
        }
    }
    getArgumentValue(arg, schemaArg) {
        if (!arg) {
            return;
        }
        //@todo have to handle datatype
        //returns the widget user input based on widget type
        let arr = [], widgetValue, isNum, isBoolean;
        const widget = arg.input, dataType = schemaArg && schemaArg.dataType;
        if (!widget) {
            // if (dataType === argDataTypes.rasterArray && arg.value) {
            //     // add credentials/tokens for secured services in raster array elements
            //     var arrRasters = arg.value.elements;
            //     array.forEach(arrRasters, function(item, idx) {
            //       lang.mixin(arrRasters[idx].value, rfxUtils.getRasterJsonFromLayer(item.value));
            //     });
            //   }
            return arg.value;
        }
        // const valuePropWidgets = [HTMLCalciteInputNumberElement, HTMLCalciteInputTextElement, HTMLCalciteSelectElement, HTMLCalciteComboboxElement],
        //     checkboxWidgets = [HTMLCalciteCheckboxElement];
        //   rfxWidgets = [RFxArgSlider, RFxBandMatrix, RFxRasterArrayEditor, RFxStatisticsGrid, RFxBandIndexPicker,
        //     RFxBandNamePicker, RFxFeatureSelect, RFxRasterInputs, RFxCellSizeInput, RFxScalesInput, RFxFieldNumberSwitchable,
        //     RFxFieldSelect, RFxRasterDimensionSelect, RFxRasterVariableGrid, RFxMultidimensionalDefinitionEditor,
        //     RFxAggregationDefinitionEditor, RFxLinearUnit, RFxPropertySet, RFxSRPicker, RFxRasterInfo, RFxJsonFileUploader,
        //     RFxCustomExtent],
        const colorRampWidget = [_interfaces_d0c68944_js__WEBPACK_IMPORTED_MODULE_7__.A.RFX_DTE_COLOR_RAMP_SELECTOR];
        const rfxWidgets = [
            _interfaces_d0c68944_js__WEBPACK_IMPORTED_MODULE_7__.A.RFX_DTEX_RASTER_VARIABLES_LIST,
            _interfaces_d0c68944_js__WEBPACK_IMPORTED_MODULE_7__.A.RFX_CTE_RANGED_VALUE_EDITOR,
            _interfaces_d0c68944_js__WEBPACK_IMPORTED_MODULE_7__.A.RFX_CTE_GAMMA_EDITOR,
            _interfaces_d0c68944_js__WEBPACK_IMPORTED_MODULE_7__.A.RFX_CTE_FACTOR_FUNCTION_EDITOR,
            _interfaces_d0c68944_js__WEBPACK_IMPORTED_MODULE_7__.A.RFX_CTE_NEIGHBORHOOD_VALUES,
            _interfaces_d0c68944_js__WEBPACK_IMPORTED_MODULE_7__.A.RFX_DTE_EXTENT
        ];
        const instanceOfWidgets = (widgetTypes) => {
            return widgetTypes.some((widgetType) => {
                if (widget.tagName === widgetType) {
                    return true;
                }
                return false;
            });
        };
        if (instanceOfWidgets(colorRampWidget)) {
            return (0,_color_ramp_8935ed29_js__WEBPACK_IMPORTED_MODULE_16__.b)(widget.value);
        }
        // if (instanceOfWidgets(rfxWidgets)) {
        //   return widget.get("value");
        // }
        if (widget.tagName === _interfaces_d0c68944_js__WEBPACK_IMPORTED_MODULE_7__.A.RFX_DTE_COMMON_CHECKBOX) {
            return schemaArg && schemaArg.reverseDisplayValue ? !widget.checked : widget.checked;
        }
        // if (instanceOfWidgets(valuePropWidgets)) {
        widgetValue = widget.value;
        if (instanceOfWidgets(rfxWidgets)) {
            return widgetValue;
        }
        if (dataType &&
            dataType.indexOf("array") >= 0 &&
            widgetValue &&
            typeof widgetValue === "string") {
            widgetValue = widgetValue.trim();
            if (widgetValue.indexOf(",") >= 0) {
                arr = widgetValue.split(",");
            }
            else {
                arr = widgetValue.split(" ");
            }
        }
        if (dataType && dataType === this.argDataTypes.boolean && typeof widgetValue === "string") {
            widgetValue = widget.value === "true" ? true : false;
        }
        switch (dataType) {
            case this.argDataTypes.raster:
                //non dataset scalar value
                if (!arg.isDataset) {
                    return {
                        value: widgetValue,
                        type: "Scalar"
                    };
                }
                else {
                    return widgetValue;
                }
            case this.argDataTypes.longArray:
                if (arr) {
                    arr.forEach(function (item, idx) {
                        arr[idx] = parseInt(item, 10);
                    });
                    return arr;
                }
                break;
            case this.argDataTypes.doubleArray:
                const isValueString = typeof widgetValue === "string";
                const valueArray = isValueString ? arr : widgetValue?.length > 0 ? widgetValue : arr;
                if (valueArray.length > 0) {
                    return valueArray.map((item) => parseFloat(item));
                }
                break;
            case this.argDataTypes.stringArray:
            case this.argDataTypes.rasterArray:
                if (arr.length > 0) {
                    arr.forEach(function (item, idx) {
                        arr[idx] = item.trim();
                    });
                    return arr;
                }
                return widgetValue;
            case this.argDataTypes.double:
            case this.argDataTypes.long:
                // does a parseFloat instead of parseInt
                return (0,_sanitize_number_d84114f7_js__WEBPACK_IMPORTED_MODULE_17__.p)(widgetValue);
            case this.argDataTypes.float:
                return parseFloat(widgetValue);
            case this.argDataTypes.cellSize:
                return widgetValue;
            case undefined:
                widgetValue = widgetValue && widgetValue.trim();
                //regex supports int and float values
                isNum = (0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_8__.d)(widgetValue);
                isBoolean = (0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_8__.e)(widgetValue);
                if (isNum) {
                    return parseFloat(widgetValue);
                }
                if (isBoolean) {
                    return widgetValue === "true";
                }
                return widgetValue;
            default:
                return widgetValue;
        }
        // }
        // else if (instanceOfWidgets(checkboxWidgets)) {
        //     return schemaArg && schemaArg.reverseDisplayValue ? !widget.checked : widget.checked;
        // }
    }
    _getTriggerArgValue(changedArgs, rfxArgName) {
        if (!Array.isArray(changedArgs)) {
            return;
        }
        let changedValue;
        changedArgs.some((changedArg) => {
            for (const changedArgName in changedArg) {
                if (changedArg.hasOwnProperty(changedArgName)) {
                    if (changedArgName.toLowerCase() === rfxArgName.toLowerCase()) {
                        changedValue = changedArg[changedArgName];
                        return true;
                    }
                }
            }
            return false;
        });
        return changedValue;
    }
    // TODO: set domain as type: RFxArgumentDomain
    getDomainBasedWidget({ domain, argDetails, value }) {
        if (!domain || !argDetails) {
            return;
        }
        const { rfxArgs } = argDetails;
        const domainType = domain?.type;
        const rfxArgEnum = (0,_rfx_args_helper_ab401543_js__WEBPACK_IMPORTED_MODULE_6__.f)(domain.enum);
        let widget;
        switch (domainType) {
            case this.domainTypes.list:
                widget = document.createElement("rfx-dtex-common-select");
                widget.options = rfxArgEnum;
                widget.value = value?.toString();
                break;
            case this.domainTypes.range:
                widget = document.createElement("rfx-dtex-arg-slider");
                widget.max = domain.max;
                widget.min = domain.min;
                widget.value = value;
                break;
            case this.domainTypes.fields:
                widget = document.createElement("rfx-dtex-field-select");
                widget.layerArg = (0,_rfx_args_helper_ab401543_js__WEBPACK_IMPORTED_MODULE_6__.d)(domain.argumentName, rfxArgs);
                widget.otherOptions = domain.otherOptions;
                widget.value = value;
                break;
            case this.domainTypes.numList:
                widget = document.createElement("rfx-dtex-common-select");
                const { start, inc, count } = domain;
                // The `Array.from()` method is used to create an array with a specified length (`count`),
                // and the second parameter is a function that returns an object for each index in the array.
                // In this case it returns [ start, start+inc , start + inc + inc ] if count is 3
                widget.options = domain
                    ? Array.from({ length: count }, (_, j) => ({
                        key: `${start + j * inc}`,
                        label: `${start + j * inc}`
                    }))
                    : [];
                widget.otherOptions = domain.otherOptions;
                widget.value = value?.toString();
                break;
            case _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.bandIndex:
                widget = document.createElement("rfx-dtex-band-index-picker");
                widget.layerArg = (0,_rfx_args_helper_ab401543_js__WEBPACK_IMPORTED_MODULE_6__.d)(domain.argumentName, rfxArgs);
                widget.otherOptions = domain.otherOptions;
                widget.value = value;
                break;
            case _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.bandName:
                widget = document.createElement("rfx-dtex-band-name-picker");
                widget.layerArg = (0,_rfx_args_helper_ab401543_js__WEBPACK_IMPORTED_MODULE_6__.d)(domain.argumentName, rfxArgs);
                widget.otherOptions = domain.otherOptions;
                widget.value = value;
                break;
            case _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.switchable:
                const attributes = (0,_rfx_args_helper_ab401543_js__WEBPACK_IMPORTED_MODULE_6__.p)(domain.attributes, rfxArgs);
                widget = document.createElement("rfx-dtex-switchable");
                widget.switchAttributes = attributes;
                widget.value = value;
                break;
            case _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.linearUnit:
                widget = document.createElement("rfx-dtex-linear-unit");
                widget.unitOptions = rfxArgEnum;
                widget.value = value;
                break;
            case _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.rasterDimensions: {
                const argName = (0,_rfx_args_helper_ab401543_js__WEBPACK_IMPORTED_MODULE_6__.d)(domain.argumentName, rfxArgs);
                widget = document.createElement("rfx-dtex-raster-dimension-select");
                widget.layerArg = argName;
                widget.otherOptions = domain.otherOptions;
                widget.value = value;
                break;
            }
            case _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.rasterVariables: {
                const argName = (0,_rfx_args_helper_ab401543_js__WEBPACK_IMPORTED_MODULE_6__.d)(domain.argumentName, rfxArgs);
                widget = document.createElement("rfx-dtex-raster-variables-list");
                widget.layerArg = argName;
                widget.otherOptions = domain.otherOptions;
                widget.value = value;
                break;
            }
            case _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.mdimdef: {
                const argName = (0,_rfx_args_helper_ab401543_js__WEBPACK_IMPORTED_MODULE_6__.d)(domain.argumentName, rfxArgs);
                widget = document.createElement("rfx-dtex-multidimensional-definition-editor");
                widget.layerArg = argName;
                widget.otherOptions = {
                    ...domain.otherOptions,
                    helpTextIDs: domain.helpTextIDs,
                    onHelpActionClick: (params) => this.handleHelpActionClick(params),
                    inputLayers: this.imageryLayers
                };
                widget.domainAttributes = domain.attributes;
                widget.value = value;
                break;
            }
            case _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.aggregationdef:
                const argName = (0,_rfx_args_helper_ab401543_js__WEBPACK_IMPORTED_MODULE_6__.d)(domain.argumentName, rfxArgs);
                widget = document.createElement("rfx-dtex-aggregation-definition-editor");
                widget.layerArg = argName;
                widget.otherOptions = {
                    ...domain.otherOptions,
                    helpTextIDs: domain.helpTextIDs,
                    onHelpActionClick: (params) => this.handleHelpActionClick(params),
                    inputLayers: this.imageryLayers
                };
                widget.domainAttributes = domain.attributes;
                widget.value = value;
                // true in case of Aggregate Multidimensional function
                // var isCustomFunction = argName.function && argName.function.customFunction;
                // // in case of aggregation multiDimension the depended arg can be a template.
                // // so will create the ui after that template ui is created
                // if (argName.type && argName.type === "RasterFunctionTemplate" &&
                // argName.function && argName.function.type === "MultidimensionalFilterFunction") {
                //   argName = argName.arguments.Raster;
                //   argName.customFunction = isCustomFunction;
                // }
                // if (rfxArg.uxBlocks && rfxArg.uxBlocks[0]) {
                //   // hide the label tr
                //   rfxArg.uxBlocks[0].style.display = "none";
                // }
                // // In case of fn-editor the UI of mdim filter isn't
                // // initialized like in RA pane, hence the raster arg
                // // can't be passed and hence is not checked.
                // widget = new RFxAggregationDefinitionEditor({
                //   layerArg: argName,
                //   otherOptions: domain.otherOptions,
                //   defaultValue: value,
                //   rfxTemplate: this._rfxTemplate
                // }, node);
                break;
            default:
                widget = this.createUnsupportedWidget(`domain type ${domainType.toUpperCase()}`);
                break;
        }
        return widget;
    }
    getDataTypeAttributeBasedWidget({ dataType, dataTypeAttributes, value, rfxArgs }) {
        const widget = document.createElement("rfx-dte-band-matrix");
        widget.dataTypeAttributes = dataTypeAttributes;
        widget.value = value;
        widget.nBandsArg = (0,_rfx_args_helper_ab401543_js__WEBPACK_IMPORTED_MODULE_6__.d)(dataTypeAttributes.nBands, rfxArgs);
        widget.dataType = dataType;
        return widget;
    }
    /**
     * called to create widgets based on data type
     * @param {dataType, argDetails, dataTypeAttributes}
     * @returns widget
     */
    getDataTypeBasedWidget({ dataType, argDetails, dataTypeAttributes }) {
        const { argSchema, rfxArg, rfxArgs } = argDetails;
        let widget, value = rfxArg.value;
        // checks if value === null || typeof value === 'undefined'
        const numberTextBoxValue = value == null ? argSchema && argSchema.defaultValue : value;
        if (dataTypeAttributes && dataTypeAttributes.type === "bandmatrix") {
            return this.getDataTypeAttributeBasedWidget({ dataType, dataTypeAttributes, value, rfxArgs });
        }
        switch (dataType) {
            case this.argDataTypes.raster:
                if (!rfxArg.isDataset) {
                    widget = document.createElement("calcite-input-number");
                    widget.scale = _ui_utils_928a4096_js__WEBPACK_IMPORTED_MODULE_4__.U.Scale;
                    widget.dir = this.direction;
                    widget.value = value?.toString();
                }
                break;
            case this.argDataTypes.string:
                widget = document.createElement("calcite-input-text");
                widget.scale = _ui_utils_928a4096_js__WEBPACK_IMPORTED_MODULE_4__.U.Scale;
                widget.dir = this.direction;
                widget.value = value?.toString();
                break;
            case this.argDataTypes.double:
            case this.argDataTypes.long:
                widget = document.createElement("calcite-input-number");
                widget.scale = _ui_utils_928a4096_js__WEBPACK_IMPORTED_MODULE_4__.U.Scale;
                widget.dir = this.direction;
                widget.value = numberTextBoxValue;
                break;
            case this.argDataTypes.boolean:
                widget = document.createElement("calcite-checkbox");
                widget.addEventListener("calciteCheckboxChange", (e) => {
                    const element = e.target;
                    const checkboxValue = element.checked;
                    this.onArgumentValueChange({ rfxArg, argSchema, rfxArgs }, checkboxValue);
                });
                widget.dir = this.direction;
                widget.checked = argSchema && argSchema.reverseDisplayValue ? !value : value;
                break;
            case this.argDataTypes.stringArray:
            case this.argDataTypes.doubleArray:
            case this.argDataTypes.longArray:
                if (value && value.length) {
                    value = value.join(",");
                }
                widget = document.createElement("calcite-input-text");
                widget.dir = this.direction;
                widget.scale = _ui_utils_928a4096_js__WEBPACK_IMPORTED_MODULE_4__.U.Scale;
                widget.value = value?.toString();
                break;
            case this.argDataTypes.featureClass:
                widget = document.createElement("rfx-dte-feature-select");
                widget.inputLayers = this.featureLayers;
                widget.value = value;
                // widget.geometryType = dataTypeAttributes?.type || null;
                // widget.browseProperties = {
                //   map: this.map,
                //   portalUrl: this.portalUrl,
                //   portalSelf: this.portalSelf
                // };
                break;
            case this.argDataTypes.rasterArray:
                const elementInfos = argSchema?.elementInfos;
                let inputArgs;
                if (elementInfos) {
                    inputArgs = (0,_rfx_args_helper_ab401543_js__WEBPACK_IMPORTED_MODULE_6__.m)(argSchema, rfxArgs);
                }
                if (inputArgs) {
                    //handle local functions
                    widget = document.createElement("rfx-dte-local-raster-inputs");
                    widget.inputLayers = this.imageryLayers;
                    widget.value = value;
                    widget.getRFT = this.getRFT.bind(this);
                    widget.allowScalar = argSchema.allowScalar;
                    widget.isShown = this._isShown.bind(this);
                    widget.schemaElementInfos = inputArgs;
                    widget.mode = this.mode;
                    widget.isFunctionChain = this.isFunctionChain;
                    widget.rfxArgs = rfxArgs;
                }
                else {
                    widget = document.createElement("rfx-dte-raster-array-editor");
                    widget.inputLayers = this.imageryLayers;
                    widget.getRFT = this.getRFT.bind(this);
                    widget.allowScalar = argSchema.allowScalar;
                    widget.value = value;
                }
                break;
            case this.argDataTypes.cellSize:
                widget = document.createElement("rfx-dte-cell-size-input");
                widget.value = value;
                break;
            case this.argDataTypes.rasterStatisticsArray:
            case this.argDataTypes.arrayOfRasterStatistics:
                widget = document.createElement("rfx-dte-statistics-grid");
                widget.layerArg = (0,_rfx_args_helper_ab401543_js__WEBPACK_IMPORTED_MODULE_6__.d)("Raster", rfxArgs);
                widget.value = value;
                break;
            case this.argDataTypes.colorRamp:
                widget = document.createElement("rfx-dte-color-ramp-selector");
                widget.value = value;
                break;
            case this.argDataTypes.file:
                widget = document.createElement("rfx-dte-json-file-uploader");
                widget.value = value;
                widget.fileExtSupported = argSchema.fileExtSupported;
                break;
            case undefined:
                // If we don't know the data type, try stringifying the value and setting that
                widget = document.createElement("calcite-input-text");
                widget.scale = _ui_utils_928a4096_js__WEBPACK_IMPORTED_MODULE_4__.U.Scale;
                widget.dir = this.direction;
                // widget.value = value.toString();
                try {
                    if (typeof value === "string") {
                        widget.value = value;
                    }
                    else {
                        widget.value = JSON.stringify(value);
                    }
                }
                catch (err) {
                    widget.value = value;
                }
                break;
            case this.argDataTypes.extent:
                widget = document.createElement("rfx-dte-extent");
                widget.value = value;
                // var layerArg = rfxUtils.getCaseInsenstitiveArg("Raster", rfxArgs);
                //     layerArg: layerArg,
                break;
            case this.argDataTypes.spatialReference:
                widget = document.createElement("rfx-dte-spatial-reference-picker");
                const hideCategories = ["Vertical Coordinate Systems"];
                widget.hideCategories = hideCategories;
                widget.value = value;
                break;
            case this.argDataTypes.rasterInfo:
                widget = document.createElement("rfx-dte-raster-info");
                widget.inputLayers = this.imageryLayers;
                widget.getRFT = this.getRFT.bind(this);
                widget.allowScalar = argSchema.allowScalar;
                widget.value = value;
                break;
            case this.argDataTypes.rfxtemplate:
                // TODO: temporarily done so aggmdim domain type can be tested
                widget = document.createElement("calcite-input-text");
                widget.scale = _ui_utils_928a4096_js__WEBPACK_IMPORTED_MODULE_4__.U.Scale;
                widget.value = value;
                break;
            default:
                widget = this.createUnsupportedWidget(`data type ${dataType.toUpperCase()}`);
                break;
            case this.argDataTypes.propertySet:
                widget = document.createElement("rfx-dte-property-set");
                widget.value = value;
                break;
            // case this.argDataTypes.rfxtemplate:
            //     value = String(value);
            //     var disabled = false;
            //     if (rfxArg) {
            //         value = this._getFormattedValueFromVariable(rfxArg);
            //         if (value) {
            //             disabled = true;
            //         }
            //     }
            //     widget = new RFxCommonTextInput({
            //         value: value,
            //         disabled: disabled
            //     }, node);
            //     break;
        }
        widget.dir = this.direction;
        return widget;
    }
    getRFT(rfxTemplate) {
        rfxTemplate = this._getUpdatedRFTWithValues(rfxTemplate);
        return (0,_rfx_args_helper_ab401543_js__WEBPACK_IMPORTED_MODULE_6__.j)(rfxTemplate, ["input", "uxBlocks"]);
    }
    _getUpdatedRFTWithValues(rfxTemplate) {
        const rfxArgs = rfxTemplate[_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_8__.A];
        const functionSchema = (0,_rfx_args_helper_ab401543_js__WEBPACK_IMPORTED_MODULE_6__.g)({
            schema: this.rasterFunctions,
            rfxTemplate
        });
        if ((0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_8__.i)(rfxArgs)) {
            return rfxTemplate;
        }
        if ((0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_8__.a)(rfxArgs)) {
            rfxTemplate[_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_8__.A] = this._getUpdatedRFxArg(rfxArgs, "Raster", functionSchema);
            return rfxTemplate;
        }
        Object.keys(rfxArgs).forEach((rfxTemplateArgName) => {
            if (rfxTemplateArgName === _type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_8__.T) {
                return;
            }
            const rfxTemplateArg = rfxArgs[rfxTemplateArgName];
            if (!rfxTemplateArg) {
                return;
            }
            rfxArgs[rfxTemplateArgName] = this._getUpdatedRFxArg(rfxTemplateArg, rfxTemplateArgName, functionSchema);
        });
        return rfxTemplate;
    }
    _getUpdatedRFxArg(rfxArg, rfxArgKey, functionSchema) {
        // Handle raster function argument and return with updated values injected
        // Gets the updated value from the widget if available
        if (!(rfxArg && (0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_8__.a)(rfxArg))) {
            return rfxArg;
        }
        let argRFT = (0,_rfx_args_helper_ab401543_js__WEBPACK_IMPORTED_MODULE_6__.b)(rfxArg);
        const schemaArgs = functionSchema?.rasterFunctionArguments;
        const schemaArg = (0,_rfx_args_helper_ab401543_js__WEBPACK_IMPORTED_MODULE_6__.d)(rfxArgKey, schemaArgs);
        if (!(0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_8__.i)(schemaArg)) {
            schemaArg.key = rfxArgKey;
        }
        if (schemaArg?.isPseudoArg === true) {
            // Add argument so that it doesn't leak into persistence
            this.pseudoArgs.add(rfxArgKey);
        }
        if (argRFT) {
            if (rfxArg.type === _type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_8__.R) {
                rfxArg.value = this._getUpdatedRFTWithValues(argRFT);
                return rfxArg;
            }
            else {
                return this._getUpdatedRFTWithValues(argRFT);
            }
        }
        // If a raster array arg isn't public, then it needs to be processed here.
        // Else it's handled by the widget.
        if ((0,_rfx_args_helper_ab401543_js__WEBPACK_IMPORTED_MODULE_6__.l)(rfxArg)) {
            const elements = rfxArg.value?.elements ? rfxArg.value.elements : rfxArg.value;
            elements.forEach((element, idx) => {
                if (!element) {
                    return;
                }
                // Referenced object
                if ((0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_8__.c)(element)) {
                    return;
                }
                argRFT = (0,_rfx_args_helper_ab401543_js__WEBPACK_IMPORTED_MODULE_6__.b)(element);
                if (argRFT) {
                    elements[idx] = this._getUpdatedRFTWithValues(argRFT);
                }
                else if (element.type === _type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_8__.R) {
                    element.value = this.getArgumentValue(element, schemaArg);
                }
                else {
                    elements[idx] = this.getArgumentValue(element, schemaArg);
                }
            }, this);
            return rfxArg;
        }
        if (schemaArg && schemaArg.dataType === this.argDataTypes.rfxtemplate) {
            rfxArg = this.getArgumentValue(rfxArg, schemaArg);
            return rfxArg;
        }
        if (rfxArg.type === _type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_8__.R) {
            rfxArg.value = this.getArgumentValue(rfxArg, schemaArg);
            return rfxArg;
        }
        else if ((0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_8__.g)(rfxArg)) {
            return rfxArg;
        }
    }
    onArgumentValueChange(argumentDetails, newValue) {
        const { rfxArg, argSchema, rfxArgs } = argumentDetails;
        const widget = rfxArg && rfxArg.input;
        if (widget?.tagName === _interfaces_d0c68944_js__WEBPACK_IMPORTED_MODULE_7__.A.RFX_DTEX_COMMON_SELECT &&
            argSchema &&
            argSchema.dataType === this.argDataTypes.long) {
            newValue = parseInt(newValue, 10);
        }
        //@todo changes to handle different types of widget
        // if (widget instanceof Select && argSchema && argSchema.dataType === argDataTypes["boolean"]) {
        //   newValue = (newValue === "true") ? true : false;
        // }
        // if (widget && widget.declaredClass.indexOf("RFxFeatureSelect") >= 0) {
        //   this._handleFeatureValueChange(selectedArg, rfxArgs);
        // }
        if (widget?.tagName === _interfaces_d0c68944_js__WEBPACK_IMPORTED_MODULE_7__.A.RFX_DTE_JSON_FILE_UPLOADER) {
            this.handleFileInputChange(rfxArg, rfxArgs, newValue);
        }
        this._handleEditorStateTriggers(rfxArgs, newValue, argSchema);
        this._handleEditorValueTriggers(rfxArgs, newValue, argSchema);
        // setTimeout(lang.hitch(this, function() {
        //   this._started = true; // since the started flag is false coudn't emit the event
        //   this.emit("update-preview");
        // }), 1000);
    }
    handleFileInputChange(selectedArg, rfxArgs, newValue) {
        if ((0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_8__.i)(newValue)) {
            return;
        }
        let parsedFileData;
        try {
            parsedFileData = JSON.parse(newValue);
        }
        catch (error) {
            console.error(error);
        }
        if ((0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_8__.i)(parsedFileData)) {
            return;
        }
        if (rfxArgs.type === "ClassifyFunctionArguments" &&
            selectedArg.name === "ClassifierDefinitionFile") {
            // For Classify function
            // assign parsed ECD file content to ClassifierDefinition as object
            rfxArgs.ClassifierDefinition = parsedFileData;
        }
        if (rfxArgs.type === "PredictUsingRegressionFunctionArguments" &&
            selectedArg.name === "RegressionDefinitionFile") {
            // For Predict Using Regression function
            // assign parsed ECD file content to RegressionDefinition as object
            rfxArgs.RegressionDefinition = parsedFileData;
        }
    }
    handleBrowseLayerClick(params) {
        const { isFeatureSelectElement, filter, allowedGeometries, layerFilterType } = params;
        params.isFeatureSelectElement = isFeatureSelectElement === true;
        params.filter = !(0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_8__.i)(filter)
            ? filter
            : params.isFeatureSelectElement
                ? '(type:"Feature Service")'
                : '(type:"Image Service")';
        params.allowedGeometries = !(0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_8__.i)(allowedGeometries)
            ? allowedGeometries
            : params.isFeatureSelectElement
                ? ["point", "polygon", "polyline", "multipoint"]
                : undefined;
        params.layerFilterType = !(0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_8__.i)(layerFilterType)
            ? layerFilterType
            : params.isFeatureSelectElement
                ? "feature"
                : "imagery";
        this.rfxBrowseClick.emit(params);
    }
    createUnsupportedWidget(unsupportedType) {
        //set the validity of RFT to false as the UI is incomplete
        this.isTemplateValid = false;
        this.templateErrors.add(this.strings.uiIncomplete);
        const widgetContainer = document.createElement("div");
        widgetContainer.className = HTMLClasses$g.unsupportedComponentContainer;
        const textInput = document.createElement("calcite-input-text");
        textInput.dir = this.direction;
        textInput.scale = _ui_utils_928a4096_js__WEBPACK_IMPORTED_MODULE_4__.U.Scale;
        textInput.placeholder = this.strings.unsupportedDataType;
        const inputMessage = document.createElement("calcite-input-message");
        inputMessage.innerHTML = this.strings.currentlyUnsupported.replace("${missingType}", unsupportedType);
        inputMessage.icon = "exclamationMarkTriangle";
        inputMessage.status = _interfaces_d0c68944_js__WEBPACK_IMPORTED_MODULE_7__.U.INVALID;
        inputMessage.className = HTMLClasses$g.unsupportedComponentMessage;
        widgetContainer.appendChild(textInput);
        widgetContainer.appendChild(inputMessage);
        return widgetContainer;
    }
    createUnsupportedWarningComponent(unsupportedOverrideArgs) {
        const notice = document.createElement("calcite-notice");
        notice.open = true;
        notice.closable = true;
        notice.kind = "warning";
        notice.scale = _ui_utils_928a4096_js__WEBPACK_IMPORTED_MODULE_4__.U.Scale;
        const noticeTitle = document.createElement("div");
        noticeTitle.slot = "title";
        noticeTitle.innerHTML = this.strings.overrideWidgetMissing;
        notice.appendChild(noticeTitle);
        const noticeMessage = document.createElement("div");
        noticeMessage.slot = "message";
        //remove duplicates
        unsupportedOverrideArgs = Array.from(new Set(unsupportedOverrideArgs));
        const warningMsg = `${this.strings.unsupportedOverrideWarning} ${unsupportedOverrideArgs.join(", ")}`;
        noticeMessage.innerHTML = warningMsg;
        notice.appendChild(noticeMessage);
        return notice;
    }
    /**
     * @category Lifecycle
     * Render lifecycle method
     */
    render() {
        return ((0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "esri-rfx-args-editor" }, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { id: "_argsContainterNode", ref: (el) => {
                this.argsContainterNode = el;
            } })));
    }
    static get assetsDirs() { return ["t9n"]; }
    get hostElement() { return (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.a)(this); }
};
RFxArgsEditor.style = rfxArgsEditorCss;

const RFxDteBandMatrix = class {
    constructor(hostRef) {
        (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.rfxArgumentChange = (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "rfxArgumentChange", 7);
        this.updateValue = (event) => {
            let value = [];
            const { detail: { gridOptions } } = event;
            gridOptions.forEach((gridOption, id) => {
                if (this.dataTypeAttributes.isExtensible !== false && id === gridOptions.length - 1) {
                    return; // last is a placeholder
                }
                Object.keys(this.gridSchema).forEach((columnName) => {
                    value.push(gridOption[columnName]);
                });
            });
            if (this.dataType === _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.stringArray) {
                value = value.map((val) => (val === null ? "" : val.toString()));
            }
            //   this.value = this._createComplexValue ? this._createComplexValue(value) : value;
            this.value = value;
            this.rfxArgumentChange.emit({ value: this.value });
        };
        this.dataTypeAttributes = undefined;
        this.value = undefined;
        this.nBandsArg = undefined;
        this.dataType = undefined;
    }
    onValueChange() {
        this.getGridOptions();
    }
    async componentWillLoad() {
        this.getGridSchema();
        await this.processLayerArg();
        this.getGridOptions();
    }
    async processLayerArg() {
        if ((0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_8__.i)(this.nBandsArg)) {
            return;
        }
        const layerInput = this.nBandsArg?.input;
        await this.updateValuesBasedOnRaster();
        layerInput.addEventListener("rfxArgumentChange", async () => {
            await this.updateValuesBasedOnRaster();
        });
    }
    async updateValuesBasedOnRaster() {
        const layerInput = this.nBandsArg.input;
        const layer = typeof layerInput.getSelectedLayer === "function"
            ? await layerInput.getSelectedLayer()
            : undefined;
        if ((0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_8__.i)(layer)) {
            return;
        }
        const actualValueLength = layer.rasterInfo?.bandCount * Object.keys(this.gridSchema).length;
        const currentValueLength = this.value?.length ?? 0;
        //default value in case of nodata vales can be null, hence check only for undefined. Null is valid case here.
        const defaultValue = this.dataTypeAttributes.defaultValue !== undefined ? this.dataTypeAttributes.defaultValue : 0;
        let value;
        if ((0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_8__.i)(this.value)) {
            value = new Array(actualValueLength).fill(defaultValue);
        }
        else {
            value =
                actualValueLength > currentValueLength
                    ? [...this.value, ...new Array(actualValueLength - currentValueLength).fill(defaultValue)]
                    : this.value.slice(0, actualValueLength);
        }
        this.value = [...value];
    }
    getGridOptions() {
        const columnNumber = this.dataTypeAttributes.cols;
        const gridOptions = [];
        if (!(0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_8__.i)(this.value)) {
            const value = [...this.value];
            while (value.length > 0) {
                const valObj = { id: value.length / columnNumber };
                const groupedValues = value.splice(0, columnNumber);
                groupedValues.forEach(function (val, index) {
                    valObj[`bandMatrix${index}`] = val;
                });
                gridOptions.push(valObj);
            }
        }
        // add a blank object
        if (this.dataTypeAttributes.isExtensible !== false) {
            gridOptions.push({ id: 0 });
        }
        this.gridOptions = gridOptions;
    }
    getUIType() {
        switch (this.dataType) {
            case _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.stringArray:
            case _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.doubleArray:
                return _interfaces_d0c68944_js__WEBPACK_IMPORTED_MODULE_7__.G.number;
            default:
                return _interfaces_d0c68944_js__WEBPACK_IMPORTED_MODULE_7__.G.textInput;
        }
    }
    getGridSchema() {
        this.gridSchema = {};
        this.dataTypeAttributes?.displayNames.forEach((name, index) => {
            const columnName = `bandMatrix${index}`;
            this.gridSchema[columnName] = {
                label: name,
                uiType: this.getUIType()
            };
        });
    }
    render() {
        return ((0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("rfx-grid", { hasHeader: true, canAdd: this.dataTypeAttributes.isExtensible, canRemove: this.dataTypeAttributes.hasIdColumn, hasIdColumn: this.dataTypeAttributes.hasIdColumn, gridLayout: this.gridSchema, gridOptions: this.gridOptions, hasBorder: true, onRfxGridOptionChange: this.updateValue }));
    }
    static get watchers() { return {
        "value": ["onValueChange"]
    }; }
};

const RFxCellSizeInput = class {
    constructor(hostRef) {
        (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.rfxArgumentChange = (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "rfxArgumentChange", 7);
        this.onCellSizeChange = (pixelSize) => {
            if (isNaN(pixelSize))
                return;
            this.value = { x: pixelSize, y: pixelSize };
            this.rfxArgumentChange.emit({ value: this.value });
        };
        /**
         * @category Event Handler
         * Called when the calcite input value changes to a valid number
         * @param {CustomEvent} event custom calciteInputInput event
         */
        this.handleInputChange = (event) => {
            // We are stopping the propagation of this change event as we emit a customEvent instead.
            event.stopPropagation();
            if (event.target === null)
                return;
            const newValueString = (event?.target).value;
            const pixelSize = (0,_sanitize_number_d84114f7_js__WEBPACK_IMPORTED_MODULE_17__.p)(newValueString);
            this.onCellSizeChange(pixelSize);
        };
        this.value = { x: 0, y: 0 };
    }
    componentWillLoad() {
        this.setInitialValues();
    }
    /**
     * Sets the initial value of the input based on the `value` property.
     */
    setInitialValues() {
        const { x, y } = this.value;
        const pixelSize = x ?? y ?? 0;
        this.cellSizeInput = pixelSize;
    }
    render() {
        return ((0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-input", { type: "number", value: (0,_sanitize_number_d84114f7_js__WEBPACK_IMPORTED_MODULE_17__.s)(this.cellSizeInput), scale: _ui_utils_928a4096_js__WEBPACK_IMPORTED_MODULE_4__.U.Scale, groupSeparator: true, onCalciteInputChange: this.handleInputChange })));
    }
    get hostElement() { return (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.a)(this); }
};

const component$a = "rfx-dte-color-ramp-selector";
const HTMLClasses$f = {
    containerDiv: `${component$a}__container-div`
};

const rfxDteColorRampSelectorCss = ":root{--calcite-color-brand:#007ac2;--calcite-color-brand-hover:#00619b;--calcite-color-brand-press:#004874;--calcite-color-status-info:#00619b;--calcite-color-status-success:#35ac46;--calcite-color-status-warning:#edd317;--calcite-color-status-danger:#d83020;--calcite-color-status-danger-hover:#a82b1e;--calcite-color-status-danger-press:#7c1d13;--calcite-color-background:#f8f8f8;--calcite-color-foreground-1:#ffffff;--calcite-color-foreground-2:#f3f3f3;--calcite-color-foreground-3:#eaeaea;--calcite-color-text-1:#151515;--calcite-color-text-2:#4a4a4a;--calcite-color-text-3:#6a6a6a;--calcite-color-text-inverse:#ffffff;--calcite-color-text-link:#00619b;--calcite-color-border-1:#cacaca;--calcite-color-border-2:#d4d4d4;--calcite-color-border-3:#dfdfdf;--calcite-color-border-input:#949494;--rfx-quarter-spacing:0.25rem;--rfx-half-spacing:0.5rem;--rfx-three-quarter-spacing:0.75rem;--rfx-full-spacing:1rem;--rfx-component-default-width:100%;--rfx-ui-border-input:var(--calcite-color-border-2);--rfx-popover-content-min-height:30vh;--rfx-popover-content-max-height:60vh;--rfx-popover-content-height:45vh;--rfx-widget-content-height:30vh}.rfx-dte-color-ramp-selector__container-div{padding:0px;width:-webkit-fill-available;margin:-16px -10px;overflow:hidden}";

const RFxColorRampSelector = class {
    constructor(hostRef) {
        (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.rfxArgumentChange = (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "rfxArgumentChange", 7);
        //--------------------------------------------------------------------------
        //
        //  Private Methods
        //
        //--------------------------------------------------------------------------
        this.createArcgisSymbolStyler = (el) => {
            const defaultColors = this.value ? (0,_color_ramp_8935ed29_js__WEBPACK_IMPORTED_MODULE_16__.c)(this.value) : undefined;
            el.edit(new _arcgis_core_symbols_SimpleMarkerSymbol_js__WEBPACK_IMPORTED_MODULE_26__["default"](), (0,_color_ramp_8935ed29_js__WEBPACK_IMPORTED_MODULE_16__.a)({}, { defaultColors }));
        };
        this.handleArcgisSymbolStylerFillChange = ({ detail: fill }) => {
            const colorramp = (0,_color_ramp_8935ed29_js__WEBPACK_IMPORTED_MODULE_16__.d)(fill.color);
            this.value = colorramp;
            this.rfxArgumentChange.emit({ value: this.value });
        };
        this.value = undefined;
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    componentWillLoad() {
        if ((0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_8__.i)(this.value)) {
            this.value = (0,_color_ramp_8935ed29_js__WEBPACK_IMPORTED_MODULE_16__.f)();
            this.rfxArgumentChange.emit({ value: this.value });
        }
    }
    render() {
        return ((0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: `${HTMLClasses$f.containerDiv}` }, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-symbol-styler", { ref: this.createArcgisSymbolStyler, onArcgisSymbolStylerFillChange: this.handleArcgisSymbolStylerFillChange, stringOverrides: {
                fillColor: ""
            } })));
    }
};
RFxColorRampSelector.style = rfxDteColorRampSelectorCss;

const component$9 = "rfx-dte-extent";
const HTMLClasses$e = {
    base: `${component$9}`,
    extentTop: `${component$9}__top`,
    extentBottom: `${component$9}__bottom`,
    extentLeft: `${component$9}__left`,
    extentright: `${component$9}__right`
};

const rfxDteExtentCss = ":root{--calcite-color-brand:#007ac2;--calcite-color-brand-hover:#00619b;--calcite-color-brand-press:#004874;--calcite-color-status-info:#00619b;--calcite-color-status-success:#35ac46;--calcite-color-status-warning:#edd317;--calcite-color-status-danger:#d83020;--calcite-color-status-danger-hover:#a82b1e;--calcite-color-status-danger-press:#7c1d13;--calcite-color-background:#f8f8f8;--calcite-color-foreground-1:#ffffff;--calcite-color-foreground-2:#f3f3f3;--calcite-color-foreground-3:#eaeaea;--calcite-color-text-1:#151515;--calcite-color-text-2:#4a4a4a;--calcite-color-text-3:#6a6a6a;--calcite-color-text-inverse:#ffffff;--calcite-color-text-link:#00619b;--calcite-color-border-1:#cacaca;--calcite-color-border-2:#d4d4d4;--calcite-color-border-3:#dfdfdf;--calcite-color-border-input:#949494;--rfx-quarter-spacing:0.25rem;--rfx-half-spacing:0.5rem;--rfx-three-quarter-spacing:0.75rem;--rfx-full-spacing:1rem;--rfx-component-default-width:100%;--rfx-ui-border-input:var(--calcite-color-border-2);--rfx-popover-content-min-height:30vh;--rfx-popover-content-max-height:60vh;--rfx-popover-content-height:45vh;--rfx-widget-content-height:30vh}.rfx-dte-extent{width:100%;height:14em;display:block;position:relative}.rfx-dte-extent .rfx-dte-extent__bottom,.rfx-dte-extent .rfx-dte-extent__right,.rfx-dte-extent .rfx-dte-extent__left,.rfx-dte-extent .rfx-dte-extent__top{position:absolute;display:block;width:8em;text-align:center}.rfx-dte-extent__top{top:0;left:0;right:0;margin:auto}.rfx-dte-extent__left{top:45%;left:0;margin-top:-1em}.rfx-dte-extent__right{top:45%;right:0;margin-top:-1em}.rfx-dte-extent__bottom{bottom:0;left:0;right:0;margin:auto}";

const RFxCustomExtent = class {
    constructor(hostRef) {
        (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.rfxArgumentChange = (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "rfxArgumentChange", 7);
        /**
         * @category Event Handler
         * Called when the calcite input value changes to a valid number
         * @param {CustomEvent} event custom calciteInputInput event
         */
        this.handleInputChange = (event) => {
            // We are stopping the propagation of this change event as we emit a customEvent instead.
            event.stopPropagation();
            if ((0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_8__.i)(event.target))
                return;
            const extent = {
                xmin: (0,_sanitize_number_d84114f7_js__WEBPACK_IMPORTED_MODULE_17__.p)(this.leftInput.value),
                ymin: (0,_sanitize_number_d84114f7_js__WEBPACK_IMPORTED_MODULE_17__.p)(this.bottomInput.value),
                xmax: (0,_sanitize_number_d84114f7_js__WEBPACK_IMPORTED_MODULE_17__.p)(this.rightInput.value),
                ymax: (0,_sanitize_number_d84114f7_js__WEBPACK_IMPORTED_MODULE_17__.p)(this.topInput.value)
            };
            this.value = extent;
        };
        this.value = undefined;
    }
    async componentWillLoad() {
        ({ strings: this.strings, dir: this.direction } = await (0,_localization_helper_4819b67d_js__WEBPACK_IMPORTED_MODULE_3__.b)(this.hostElement, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.g)(`.`)));
    }
    render() {
        return ((0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: HTMLClasses$e.base }, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: HTMLClasses$e.extentTop }, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("label", null, this.strings.rasterExtentTop), (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-input", { numberButtonType: "none", type: "number", ref: (el) => (this.topInput = el), value: (0,_sanitize_number_d84114f7_js__WEBPACK_IMPORTED_MODULE_17__.s)((0,_sanitize_number_d84114f7_js__WEBPACK_IMPORTED_MODULE_17__.f)(this.value?.ymax, 3)), scale: _ui_utils_928a4096_js__WEBPACK_IMPORTED_MODULE_4__.U.Scale, groupSeparator: true, onCalciteInputChange: this.handleInputChange })), (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: HTMLClasses$e.extentright }, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("label", null, this.strings.rasterExtentRight), (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-input", { numberButtonType: "none", type: "number", ref: (el) => (this.rightInput = el), value: (0,_sanitize_number_d84114f7_js__WEBPACK_IMPORTED_MODULE_17__.s)((0,_sanitize_number_d84114f7_js__WEBPACK_IMPORTED_MODULE_17__.f)(this.value?.xmax, 3)), scale: _ui_utils_928a4096_js__WEBPACK_IMPORTED_MODULE_4__.U.Scale, groupSeparator: true, onCalciteInputChange: this.handleInputChange })), (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: HTMLClasses$e.extentBottom }, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("label", null, this.strings.rasterExtentBottom), (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-input", { numberButtonType: "none", type: "number", ref: (el) => (this.bottomInput = el), value: (0,_sanitize_number_d84114f7_js__WEBPACK_IMPORTED_MODULE_17__.s)((0,_sanitize_number_d84114f7_js__WEBPACK_IMPORTED_MODULE_17__.f)(this.value?.ymin, 3)), scale: _ui_utils_928a4096_js__WEBPACK_IMPORTED_MODULE_4__.U.Scale, groupSeparator: true, onCalciteInputChange: this.handleInputChange })), (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: HTMLClasses$e.extentLeft }, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("label", null, this.strings.rasterExtentLeft), (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-input", { numberButtonType: "none", type: "number", ref: (el) => (this.leftInput = el), value: (0,_sanitize_number_d84114f7_js__WEBPACK_IMPORTED_MODULE_17__.s)((0,_sanitize_number_d84114f7_js__WEBPACK_IMPORTED_MODULE_17__.f)(this.value?.xmin, 3)), scale: _ui_utils_928a4096_js__WEBPACK_IMPORTED_MODULE_4__.U.Scale, groupSeparator: true, onCalciteInputChange: this.handleInputChange }))));
    }
    static get assetsDirs() { return ["t9n"]; }
    get hostElement() { return (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.a)(this); }
};
RFxCustomExtent.style = rfxDteExtentCss;

const rfxDteFeatureSelectCss = ":root{--calcite-color-brand:#007ac2;--calcite-color-brand-hover:#00619b;--calcite-color-brand-press:#004874;--calcite-color-status-info:#00619b;--calcite-color-status-success:#35ac46;--calcite-color-status-warning:#edd317;--calcite-color-status-danger:#d83020;--calcite-color-status-danger-hover:#a82b1e;--calcite-color-status-danger-press:#7c1d13;--calcite-color-background:#f8f8f8;--calcite-color-foreground-1:#ffffff;--calcite-color-foreground-2:#f3f3f3;--calcite-color-foreground-3:#eaeaea;--calcite-color-text-1:#151515;--calcite-color-text-2:#4a4a4a;--calcite-color-text-3:#6a6a6a;--calcite-color-text-inverse:#ffffff;--calcite-color-text-link:#00619b;--calcite-color-border-1:#cacaca;--calcite-color-border-2:#d4d4d4;--calcite-color-border-3:#dfdfdf;--calcite-color-border-input:#949494;--rfx-quarter-spacing:0.25rem;--rfx-half-spacing:0.5rem;--rfx-three-quarter-spacing:0.75rem;--rfx-full-spacing:1rem;--rfx-component-default-width:100%;--rfx-ui-border-input:var(--calcite-color-border-2);--rfx-popover-content-min-height:30vh;--rfx-popover-content-max-height:60vh;--rfx-popover-content-height:45vh;--rfx-widget-content-height:30vh}.browse-layer{--calcite-ui-text-1:var(--calcite-color-text-link);--calcite-ui-text-3:var(--calcite-color-text-link)}";

const RFxFeatureSelect = class {
    constructor(hostRef) {
        (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.rfxArgumentChange = (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "rfxArgumentChange", 7);
        /**
         * flag indicating whether the widget is loaded.
         * flag is set to true once processValueLayer is completed
         */
        this.loaded = false;
        this.inputLayers = undefined;
        this.value = undefined;
        this.rfxBrowseLayerClick = undefined;
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    async connectedCallback() {
        // similar as in rfx-dte-raster-input component:
        // load function is moved to connectedCallback as the function only deals with processing props;
        // Props should be processed in connectedCallback, to load data asynchronously and to setup the state componentWillLoad.
        if (this.loaded === false) {
            await this.load();
        }
    }
    async componentWillLoad() {
        ({ strings: this.strings } = await (0,_localization_helper_4819b67d_js__WEBPACK_IMPORTED_MODULE_3__.b)(this.hostElement, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.g)(`.`)));
    }
    /**
     * a public methd exposed to get the selected feature layer
     * @returns a feature layer object
     */
    async getSelectedLayer() {
        // getSelectedLayer public method could be called before the connectedCallback is completed
        // hence a flag is used to make sure widget is initialized properly.
        if (this.loaded === false) {
            await this.load();
        }
        if (!(0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_8__.i)(this.value)) {
            return this._getSelectedLayer(this.value.url);
        }
        return Promise.resolve(undefined);
    }
    /**
     * used to process the browsed layer
     * @param layers
     * @returns
     */
    async updateBrowsedLayer(layers) {
        layers.forEach((layer) => {
            //push to inputput layers if it does not exist
            const browsedLayer = this.inputLayers.filter((inputLayer) => inputLayer.url === layer.url || `${inputLayer.url}/${inputLayer.layerId}` === layer.url);
            if (browsedLayer.length === 0) {
                this.inputLayers.push(layer);
            }
            this.value = {
                name: layer.title,
                url: (0,_layer_helper_3867eef7_js__WEBPACK_IMPORTED_MODULE_27__.b)(layer)
            };
            this.rfxArgumentChange.emit({ value: this.value });
        });
        return Promise.resolve(undefined);
    }
    //--------------------------------------------------------------------------
    //
    //  Private Methods
    //
    //--------------------------------------------------------------------------
    async load() {
        if (!(0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_8__.i)(this.value)) {
            await this.processValueLayer();
        }
        this.loaded = true;
    }
    isLayerAddedToMap(layerUrl) {
        return this.inputLayers.some((layer) => layer.url === layerUrl || `${layer.url}/${layer.layerId}` === layerUrl);
    }
    async processValueLayer() {
        const valueLayerUrl = this.value?.url;
        if ((0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_8__.i)(valueLayerUrl)) {
            return;
        }
        if (!this.isLayerAddedToMap(valueLayerUrl)) {
            // if value layer does not exist on current map, we need to load and add it to inputLayers
            const valueLayerObject = await (0,_layer_helper_3867eef7_js__WEBPACK_IMPORTED_MODULE_27__.h)(this.value);
            const valueLayerObjectUrl = `${valueLayerObject?.url}/${valueLayerObject?.layerId}`;
            if (valueLayerObject !== undefined && !this.isLayerAddedToMap(valueLayerObjectUrl)) {
                // it is necessary to check whether valueLayerObject is added to map before pushing to this.inputLayers
                // in order to prevent duplicate options being added to the combobox when multiple async calls are triggered.
                this.inputLayers = [...this.inputLayers, valueLayerObject];
            }
        }
        // regenerate token for layer url
        const selectedLayer = await this._getSelectedLayer(valueLayerUrl);
        const selectedLayerUrl = (0,_layer_helper_3867eef7_js__WEBPACK_IMPORTED_MODULE_27__.b)(selectedLayer);
        if (!(0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_8__.i)(selectedLayer) && !(0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_8__.i)(selectedLayerUrl)) {
            this.value = {
                name: selectedLayer.title,
                url: selectedLayerUrl
            };
        }
    }
    async _handleComboBoxChange(e) {
        const selectedItemValue = e.target.value;
        if ((0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_8__.i)(selectedItemValue)) {
            this.value = undefined;
        }
        else if (selectedItemValue === "browse") {
            this.value = undefined;
            this.rfxBrowseLayerClick({
                referenceElement: this.hostElement,
                isFeatureSelectElement: true
            });
            return;
        }
        else {
            const selectedLayer = await this._getSelectedLayer(selectedItemValue);
            this.value = {
                name: selectedLayer.title,
                url: (0,_layer_helper_3867eef7_js__WEBPACK_IMPORTED_MODULE_27__.b)(selectedLayer)
            };
        }
        this.rfxArgumentChange.emit({ value: this.value });
    }
    async _getSelectedLayer(url) {
        url = (0,_layer_helper_3867eef7_js__WEBPACK_IMPORTED_MODULE_27__.g)(url);
        const selectedLayer = this.inputLayers.find((layer) => layer.url === url || `${layer.url}/${layer.layerId}` === url);
        await selectedLayer?.load();
        return selectedLayer;
    }
    render() {
        const value = (0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_8__.i)(this.value)
            ? this.value
            : (0,_layer_helper_3867eef7_js__WEBPACK_IMPORTED_MODULE_27__.g)(this.value?.url);
        let options = [];
        if (this.inputLayers && Array.isArray(this.inputLayers)) {
            options = this.inputLayers.map((layer, index) => {
                const layerUrl = `${layer.url}/${layer.layerId}`;
                if (layer?.url !== undefined) {
                    return ((0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-combobox-item", { key: `feature-layer-item-${index}`, value: layerUrl, textLabel: layer.title, selected: layerUrl.indexOf(value) > -1, icon: "feature-layer", scale: _ui_utils_928a4096_js__WEBPACK_IMPORTED_MODULE_4__.U.Scale }));
                }
            });
        }
        return ((0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "esriRFxFeatureSelect" }, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-combobox", { label: "rfx-dte-feature-select-combobox", maxItems: 0, placeholder: this.strings.selectFeature, selectionMode: "single", scale: _ui_utils_928a4096_js__WEBPACK_IMPORTED_MODULE_4__.U.Scale, value: value, onCalciteComboboxChange: (e) => this._handleComboBoxChange(e), clearDisabled: true }, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.F, null, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-combobox-item", { class: "browse-layer", key: "layer-item-browse", value: "browse", textLabel: this.strings.browseLayer, scale: _ui_utils_928a4096_js__WEBPACK_IMPORTED_MODULE_4__.U.Scale, icon: "search", filterDisabled: true }), ...options))));
    }
    static get assetsDirs() { return ["t9n"]; }
    get hostElement() { return (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.a)(this); }
};
RFxFeatureSelect.style = rfxDteFeatureSelectCss;

const component$8 = "rfx-dte-json-file-uploader";
const HTMLClasses$d = {
    button: `${component$8}__button`,
    inputFile: `${component$8}__input-file`,
    inputText: `${component$8}__input-text`,
    unsupportedTypeMessage: `${component$8}__unsupported-type-message`
};

const rfxDteJsonFileUploaderCss = ":root{--calcite-color-brand:#007ac2;--calcite-color-brand-hover:#00619b;--calcite-color-brand-press:#004874;--calcite-color-status-info:#00619b;--calcite-color-status-success:#35ac46;--calcite-color-status-warning:#edd317;--calcite-color-status-danger:#d83020;--calcite-color-status-danger-hover:#a82b1e;--calcite-color-status-danger-press:#7c1d13;--calcite-color-background:#f8f8f8;--calcite-color-foreground-1:#ffffff;--calcite-color-foreground-2:#f3f3f3;--calcite-color-foreground-3:#eaeaea;--calcite-color-text-1:#151515;--calcite-color-text-2:#4a4a4a;--calcite-color-text-3:#6a6a6a;--calcite-color-text-inverse:#ffffff;--calcite-color-text-link:#00619b;--calcite-color-border-1:#cacaca;--calcite-color-border-2:#d4d4d4;--calcite-color-border-3:#dfdfdf;--calcite-color-border-input:#949494;--rfx-quarter-spacing:0.25rem;--rfx-half-spacing:0.5rem;--rfx-three-quarter-spacing:0.75rem;--rfx-full-spacing:1rem;--rfx-component-default-width:100%;--rfx-ui-border-input:var(--calcite-color-border-2);--rfx-popover-content-min-height:30vh;--rfx-popover-content-max-height:60vh;--rfx-popover-content-height:45vh;--rfx-widget-content-height:30vh}.rfx-dte-json-file-uploader__button{margin-top:var(--rfx-half-spacing);margin-bottom:var(--rfx-half-spacing)}.rfx-dte-json-file-uploader__unsupported-type-message{--calcite-ui-text-1:red}";

const RFxJsonFileUploader = class {
    constructor(hostRef) {
        (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.rfxArgumentChange = (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "rfxArgumentChange", 7);
        /**
         * The "accept" prop of file input component.
         */
        this.fileInputAccept = "";
        /**
         * initialize the "accept" prop of file input component.
         */
        this.initFileInputAcceptProp = () => {
            if (this.fileExtSupported?.length > 0) {
                // add file type filter for browsing specified file exts
                this.fileInputAccept = "." + this.fileExtSupported.join(", .");
            }
        };
        /**
         * To check whether file ext is supported in the file input component.
         * @param {string} fileName to check whether file ext is supported
         * @returns {boolean} true if ext is supported, false otherwise
         */
        this.isFileExtSupported = (fileName) => {
            return this.fileExtSupported.some(function (fileExt) {
                return fileName.indexOf(`\.${fileExt.toLowerCase()}`) > 0;
            });
        };
        /**
         * Event handler on file input change.
         */
        this.onFileInputChange = (fileSelected) => {
            if (fileSelected === undefined || fileSelected === null) {
                // cannot use isEmptyDataItem() in this case, always return true
                return;
            }
            const fileName = fileSelected.name;
            if (this.isFileExtSupported(fileName?.toLowerCase())) {
                this.value = fileName;
                const reader = new FileReader();
                reader.readAsText(fileSelected);
                this.showError = false;
                reader.onload = () => {
                    const result = reader.result;
                    if (!(0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_8__.i)(result)) {
                        this.rfxArgumentChange.emit({ value: result });
                    }
                };
                reader.onerror = () => {
                    console.error(reader.error);
                };
            }
            else {
                this.value = "";
                this.showError = true;
                this.rfxArgumentChange.emit({ value: undefined });
            }
        };
        /**
         * @category Event Handler
         * Called when the file input value changes.
         * @param {Event} event input change event
         */
        this.handleFileInputChange = (event) => {
            // We are stopping the propagation of this change event as we emit a customEvent instead.
            event.stopPropagation();
            const fileInputElement = event.target;
            this.files = fileInputElement?.files;
            if ((0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_8__.i)(this.files) || this.files?.length < 1) {
                return;
            }
            const fileSelected = this.files[0];
            this.onFileInputChange(fileSelected);
        };
        /**
         * @category Event Handler
         * Called when the browse file button is clicked.
         */
        this.handleButtonClick = () => {
            this.fileInputElement?.click();
        };
        this.showError = false;
        this.value = "";
        this.fileExtSupported = [];
    }
    async componentWillLoad() {
        ({ strings: this.strings } = await (0,_localization_helper_4819b67d_js__WEBPACK_IMPORTED_MODULE_3__.b)(this.hostElement, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.g)(`.`)));
        this.initFileInputAcceptProp();
    }
    render() {
        const inputMessageStatus = this.showError ? _interfaces_d0c68944_js__WEBPACK_IMPORTED_MODULE_7__.U.INVALID : _interfaces_d0c68944_js__WEBPACK_IMPORTED_MODULE_7__.U.IDLE;
        const inputMessageText = this.showError ? this.strings.unsupportedDataType : "";
        return ((0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-input-text", { alignment: "start", class: HTMLClasses$d.inputText, dir: this.direction, scale: _ui_utils_928a4096_js__WEBPACK_IMPORTED_MODULE_4__.U.Scale, status: "idle", value: this.value }), (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("input", { accept: this.fileInputAccept, class: HTMLClasses$d.inputFile, multiple: false, onChange: this.handleFileInputChange, ref: (el) => (this.fileInputElement = el), type: "file", hidden: true }), (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { appearance: "solid", class: HTMLClasses$d.button, kind: "neutral", scale: _ui_utils_928a4096_js__WEBPACK_IMPORTED_MODULE_4__.U.Scale, onClick: this.handleButtonClick }, this.strings.browseDefinitionFile), (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-input-message", { class: HTMLClasses$d.unsupportedTypeMessage, hidden: !this.showError, icon: "exclamationMarkTriangle", iconFlipRtl: this.direction === "rtl", scale: _ui_utils_928a4096_js__WEBPACK_IMPORTED_MODULE_4__.U.Scale, status: inputMessageStatus }, inputMessageText)));
    }
    static get assetsDirs() { return ["t9n"]; }
    get hostElement() { return (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.a)(this); }
};
RFxJsonFileUploader.style = rfxDteJsonFileUploaderCss;

const RFxDteLocalRasterInputs = class {
    constructor(hostRef) {
        (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.rfxArgHelpClick = (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "rfxArgHelpClick", 7);
        this.rfxArgumentChange = (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "rfxArgumentChange", 7);
        /**
         * raster values extracted from the value passed
         * @Private
         *
         */
        this.rasterElements = [];
        this.onRasterChange = (value, index) => {
            const rasterElement = this.rasterElements[index];
            rasterElement.value = value;
            if (rasterElement !== undefined) {
                if (this.value.elements?.length > 0) {
                    this.value.elements[index] = rasterElement;
                }
                else {
                    this.value[index] = rasterElement;
                }
            }
            this.rfxArgumentChange.emit({ value: this.value });
        };
        this.inputLayers = undefined;
        this.value = undefined;
        this.getRFT = undefined;
        this.allowScalar = undefined;
        this.isShown = undefined;
        this.schemaElementInfos = undefined;
        this.rfxArgs = undefined;
        this.mode = undefined;
        this.isFunctionChain = false;
        this.rfxBrowseLayerClick = undefined;
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    componentWillLoad() {
        this.readRasterElements();
    }
    /**
     * Function to read the value and initialize that rasterElements
     * @returns
     */
    readRasterElements() {
        const value = this.value;
        if (!value) {
            return;
        }
        this.rasterElements = value.elements?.length ? value.elements : value;
    }
    renderRasterInputs() {
        return this.schemaElementInfos.map((inputArgSchema, index) => {
            const element = this.rasterElements[index];
            if ((0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_8__.i)(element) || element.type === _type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_8__.b) {
                return;
            }
            const isElementHidden = (0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_8__.c)(element) || !this.isShown(element);
            if (isElementHidden) {
                return;
            }
            const label = this.isFunctionChain
                ? element.name
                : inputArgSchema.displayName ?? element.name;
            const dataKey = index == 0 ? "Raster" : `InRaster${index + 1}`;
            return ((0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { id: `calcite-label-${index}`, alignment: "start", scale: _ui_utils_928a4096_js__WEBPACK_IMPORTED_MODULE_4__.U.Scale, layout: "default" }, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("rfx-label", { label: label, onRfxLabelHelpActionClick: async () => {
                    const helpText = await (0,_help_text_34a29835_js__WEBPACK_IMPORTED_MODULE_5__.a)(dataKey, this.rfxArgs);
                    this.rfxArgHelpClick.emit({
                        referenceElement: this.hostElement.shadowRoot.getElementById(`calcite-label-${index}`),
                        helpSrcdoc: helpText,
                        heading: label
                    });
                } }), (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("rfx-dte-raster-input", { allowScalar: inputArgSchema.allowScalar, inputLayers: this.inputLayers, value: element && element.type === _type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_8__.R ? element.value : element, rfxVariable: element, onRfxArgumentChange: (event) => {
                    const value = event.target.value;
                    this.onRasterChange(value, index);
                }, rfxBrowseLayerClick: this.rfxBrowseLayerClick, mode: this.mode })));
        });
    }
    render() {
        return (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, this.schemaElementInfos.length !== 0 && this.renderRasterInputs());
    }
    get hostElement() { return (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.a)(this); }
};

const rfxDtePropertySetCss = "";

const RFxDtePropertySet = class {
    constructor(hostRef) {
        (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.rfxArgumentChange = (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "rfxArgumentChange", 7);
        /**
         * Grid Schema
         */
        this.gridSchema = {
            gridLayout: {},
            gridOptions: [],
            hasBorder: true,
            hasHeader: true,
            canAdd: true,
            hasIdColumn: true,
            canRemove: true,
            isStacked: false
        };
        this.updateGridValue = (event) => {
            const { detail: { gridOptions } } = event;
            if ((0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_8__.i)(gridOptions)) {
                return;
            }
            this.gridStore = gridOptions;
        };
        this.value = undefined;
        this.gridStore = [];
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    async componentWillLoad() {
        ({ strings: this.strings, dir: this.direction } = await (0,_localization_helper_4819b67d_js__WEBPACK_IMPORTED_MODULE_3__.b)(this.hostElement, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.g)(".")));
        this.setupInitialState();
    }
    componentWillRender() {
        this.initGrid();
        this.setWidgetValue();
    }
    //--------------------------------------------------------------------------
    //
    //  Private Methods
    //
    //--------------------------------------------------------------------------
    setupInitialState() {
        this.gridStore = this.createDataObjects();
    }
    /**
     * @returns {Object[]} An array of data objects.
     */
    createDataObjects() {
        const widgetData = [];
        if (typeof this.value !== "undefined") {
            Object.keys(this.value).forEach((name, index) => {
                if (name !== "type" && name !== "_object_id") {
                    widgetData.push({
                        id: index + 1,
                        Name: name,
                        Value: this.value[name]
                    });
                }
            });
        }
        else {
            widgetData.push({
                id: 1,
                Name: "",
                Value: ""
            });
        }
        return widgetData;
    }
    initGrid() {
        const gridLayout = {
            Name: {
                uiType: _interfaces_d0c68944_js__WEBPACK_IMPORTED_MODULE_7__.G.textInput,
                label: this.strings.name
            },
            Value: {
                uiType: _interfaces_d0c68944_js__WEBPACK_IMPORTED_MODULE_7__.G.textInput,
                label: this.strings.value
            }
        };
        const gridOptions = this.gridStore;
        this.gridSchema = {
            ...this.gridSchema,
            gridLayout,
            gridOptions
        };
    }
    setWidgetValue() {
        const value = {};
        this.gridStore.forEach((storeItem) => {
            if (Boolean(storeItem.Name)) {
                value[storeItem.Name] = storeItem.Value;
            }
        });
        this.value = { ...value, type: "PropertySet" };
    }
    render() {
        return ((0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { alignment: "start", scale: _ui_utils_928a4096_js__WEBPACK_IMPORTED_MODULE_4__.U.Scale, layout: "default" }, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("rfx-grid", { hasHeader: this.gridSchema.hasHeader, canAdd: this.gridSchema.canAdd, hasIdColumn: this.gridSchema.hasIdColumn, gridLayout: this.gridSchema.gridLayout, gridOptions: this.gridSchema.gridOptions, hasBorder: this.gridSchema.hasBorder, canRemove: this.gridSchema.canRemove, isStacked: this.gridSchema.isStacked, onRfxGridOptionChange: this.updateGridValue })));
    }
    static get assetsDirs() { return ["t9n"]; }
    get hostElement() { return (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.a)(this); }
};
RFxDtePropertySet.style = rfxDtePropertySetCss;

const component$7 = "rfx-dte-raster-array-editor";
const HTMLClasses$c = {
    valueList: `${component$7}__value-list`
};

const rfxDteRasterArrayEditorCss = ":root{--calcite-color-brand:#007ac2;--calcite-color-brand-hover:#00619b;--calcite-color-brand-press:#004874;--calcite-color-status-info:#00619b;--calcite-color-status-success:#35ac46;--calcite-color-status-warning:#edd317;--calcite-color-status-danger:#d83020;--calcite-color-status-danger-hover:#a82b1e;--calcite-color-status-danger-press:#7c1d13;--calcite-color-background:#f8f8f8;--calcite-color-foreground-1:#ffffff;--calcite-color-foreground-2:#f3f3f3;--calcite-color-foreground-3:#eaeaea;--calcite-color-text-1:#151515;--calcite-color-text-2:#4a4a4a;--calcite-color-text-3:#6a6a6a;--calcite-color-text-inverse:#ffffff;--calcite-color-text-link:#00619b;--calcite-color-border-1:#cacaca;--calcite-color-border-2:#d4d4d4;--calcite-color-border-3:#dfdfdf;--calcite-color-border-input:#949494;--rfx-quarter-spacing:0.25rem;--rfx-half-spacing:0.5rem;--rfx-three-quarter-spacing:0.75rem;--rfx-full-spacing:1rem;--rfx-component-default-width:100%;--rfx-ui-border-input:var(--calcite-color-border-2);--rfx-popover-content-min-height:30vh;--rfx-popover-content-max-height:60vh;--rfx-popover-content-height:45vh;--rfx-widget-content-height:30vh}.rfx-dte-raster-array-editor__value-list{border:1px solid var(--rfx-ui-border-input);margin-top:var(--rfx-half-spacing)}";

const RFxDteRasterArrayEditor = class {
    constructor(hostRef) {
        (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.rfxArgumentChange = (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "rfxArgumentChange", 7);
        /**
         * raster values extracted from the value passed
         * @Private
         *
         */
        this.rasterElements = [];
        /**
         * called when a raster input change happens and updates the value
         * @param event
         * @returns
         */
        this.onRasterChange = (event) => {
            event.stopPropagation();
            const value = event.target.value;
            if ((0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_8__.i)(value)) {
                return;
            }
            this.addToValueList(value);
            this.updateValue();
        };
        /**
         * called when array order changes and updates the value
         * @param event
         */
        this.onArrayOrderChange = (event) => {
            const currentOrderIDList = event.detail;
            this.valueListOptions = currentOrderIDList.map((valueId) => {
                return this.valueListOptions.find((listValue) => valueId === listValue.id);
            });
            this.updateValue();
        };
        /**
         * called when an item is removed from the array. Also updates the value
         * @param event
         */
        this.onArrayValueRemove = (event) => {
            const target = event.target;
            const datasetId = target.value;
            this.valueListOptions = this.valueListOptions?.filter((dataset) => dataset.id !== datasetId);
            this.updateValue();
        };
        this.valueListOptions = [];
        this.inputLayers = undefined;
        this.value = undefined;
        this.getRFT = undefined;
        this.allowScalar = undefined;
        this.rfxBrowseLayerClick = undefined;
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    async componentWillLoad() {
        ({ strings: this.strings } = await (0,_localization_helper_4819b67d_js__WEBPACK_IMPORTED_MODULE_3__.b)(this.hostElement, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.g)(`.`)));
        this.readRasterElements();
    }
    /**
     * Function to read the value and initialize that rasterElements
     * @returns
     */
    readRasterElements() {
        //if value doesn't exist, and value is not array and it doesn't have elements
        if (!this.value) {
            return;
        }
        if ((0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_8__.i)(this.value.elements) &&
            !Array.isArray(this.value)) {
            return;
        }
        const elements = this.value.elements ||
            this.value;
        this.rasterElements = elements;
        elements.forEach(async (element, index) => {
            const value = element?.type === _interfaces_d0c68944_js__WEBPACK_IMPORTED_MODULE_7__.J.RASTER_FUNCTION_VARIABLE
                ? element.value
                : element;
            const type = element.type;
            if (type === _interfaces_d0c68944_js__WEBPACK_IMPORTED_MODULE_7__.J.RASTER_FUNCTION_TEMPLATE) {
                return this.valueListOptions.push(this.getRFTValueListData(element, index));
            }
            if (value?.type === _interfaces_d0c68944_js__WEBPACK_IMPORTED_MODULE_7__.J.RASTER_FUNCTION_TEMPLATE) {
                return this.valueListOptions.push(this.getRFTValueListData(value, index));
            }
            if (type === _interfaces_d0c68944_js__WEBPACK_IMPORTED_MODULE_7__.J.RASTER_FUNCTION_VARIABLE ||
                element.url !== undefined) {
                const rfvData = await this.getRFVValueListData(element, index);
                if (rfvData !== undefined) {
                    // In amd(map viewer), even though there is an await, loading layer is async, so recreating the value list options.
                    // so that UI rerenders
                    this.valueListOptions = [...this.valueListOptions, rfvData];
                }
            }
        });
    }
    /**
     * read an RFT value input and create a value list element to be populated
     * in the raster array
     * @param rft
     * @returns RasterArrayValueList
     */
    getRFTValueListData(rft, index) {
        if ((0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_8__.i)(rft)) {
            return;
        }
        return {
            label: `<${rft.function.name}.${this.strings.outputRaster}>`,
            id: index,
            value: rft,
            isTemplate: true,
            element: rft
        };
    }
    /**
     * if the input element is of type raster function variable read and populate the raster array
     * @param element
     * @returns RasterArrayValueList
     */
    async getRFVValueListData(element, index) {
        const value = element?.value;
        if (!value) {
            return;
        }
        let selectedLayer;
        if (value && value.type && value.type.toLowerCase() === "scalar") {
            return {
                label: String(value.value),
                id: index,
                value,
                isTemplate: false,
                element
            };
        }
        else {
            const selectedLayerId = (0,_layer_helper_3867eef7_js__WEBPACK_IMPORTED_MODULE_27__.e)(value, this.inputLayers);
            if (!(0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_8__.i)(selectedLayerId)) {
                selectedLayer = this.inputLayers.find((layer) => {
                    return selectedLayerId === layer.id;
                });
                if (selectedLayer) {
                    return {
                        label: selectedLayer.name ?? value.name,
                        id: index,
                        value,
                        isTemplate: false
                    };
                }
            }
            else {
                const arcGISImageServiceLayerObject = await (0,_layer_helper_3867eef7_js__WEBPACK_IMPORTED_MODULE_27__.f)(value);
                this.inputLayers.push(arcGISImageServiceLayerObject);
                return {
                    label: value.name || value.value,
                    id: index,
                    value,
                    isTemplate: false
                };
            }
        }
    }
    /**
     * check the option send is there in the current valueList
     * @param valueListOption
     * @returns boolean
     */
    isNotValueListElement(valueListOption) {
        return (0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_8__.i)(this.valueListOptions.find((option) => option.label === valueListOption.label));
    }
    /**
     *
     * called to update the value on event change and emit the updated value
     */
    updateValue() {
        const data = this.valueListOptions, elements = [];
        if ((0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_8__.i)(data)) {
            return;
        }
        data.forEach((layerData) => {
            const rasterElement = layerData.element !== undefined
                ? this.rasterElements.find((element) => {
                    return (element === layerData.element ||
                        element.value === layerData.element);
                })
                : undefined;
            if (layerData.isTemplate) {
                const rft = this.getRFT ? this.getRFT(layerData.value) : layerData.value;
                if (rasterElement.value) {
                    rasterElement.value = rft;
                    elements.push(rasterElement);
                }
                else {
                    elements.push(rft);
                }
            }
            else {
                if (rasterElement) {
                    rasterElement.value = layerData.value;
                }
                else {
                    elements.push({
                        type: _interfaces_d0c68944_js__WEBPACK_IMPORTED_MODULE_7__.J.RASTER_FUNCTION_VARIABLE,
                        isDataset: true,
                        value: layerData.value
                    });
                }
            }
        });
        this.rasterElements.forEach(function (rasterElement) {
            if (!(0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_8__.i)(rasterElement._object_ref_id)) {
                elements.push(rasterElement);
            }
        });
        this.value = {
            elements: elements,
            type: "ArgumentArray"
        };
        this.rfxArgumentChange.emit({ value: this.value });
    }
    /**
     * function to correct the ids in the options, before adding a new one.
     *  We need the becuse in between ids can be removed and adding one id equal to array length doesnt work
     */
    adjustValueListItemIds() {
        this.valueListOptions.forEach((option, idx) => {
            option.id = idx + 1;
        });
    }
    /**
     * function to add the changed value to the valueList options
     * @param value
     */
    addToValueList(value) {
        this.adjustValueListItemIds();
        const valueListOption = {
            id: this.valueListOptions.length + 1,
            value,
            label: value.name || value.value,
            isTemplate: false
        };
        if (this.isNotValueListElement(valueListOption)) {
            this.valueListOptions = [...this.valueListOptions, valueListOption];
        }
    }
    /**
     * used to render each row in the value list based on the valueListOptions
     * @returns
     */
    renderRasterArray() {
        return this.valueListOptions.map((option) => {
            return ((0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-value-list-item", { key: `list-${option.id}`, label: option.label, value: option.id, disabled: option.isTemplate, removable: true, onCalciteListItemRemove: this.onArrayValueRemove }));
        });
    }
    render() {
        return ((0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("rfx-dte-raster-input", { inputLayers: this.inputLayers, allowScalar: this.allowScalar, onRfxArgumentChange: this.onRasterChange, rfxBrowseLayerClick: (params) => {
                this.rfxBrowseLayerClick({
                    referenceElement: params.referenceElement,
                    selectionMode: "multi"
                });
            } }), this.valueListOptions.length > 0 && ((0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-value-list", { class: HTMLClasses$c.valueList, dragEnabled: true, onCalciteListOrderChange: this.onArrayOrderChange }, this.renderRasterArray()))));
    }
    static get assetsDirs() { return ["t9n"]; }
    get hostElement() { return (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.a)(this); }
};
RFxDteRasterArrayEditor.style = rfxDteRasterArrayEditorCss;

const rasterInfoi18nMap = {
    columns: "rasterInfoColumns",
    rows: "rasterInfoRows",
    bandCount: "rasterInfoBandCount",
    pixelSizeX: "rasterInfoPixelSizeX",
    pixelSizeY: "rasterInfoPixelSizeY",
    pixelType: "rasterInfoPixelType"
};
const rasterExtenti18nMap = {
    top: "rasterExtentTop",
    bottom: "rasterExtentBottom",
    left: "rasterExtentLeft",
    right: "rasterExtentRight"
};
const rasterSpatialReferencei18nMap = {
    wkid: "spatialReferenceWkid",
    latestWkid: "spatialReferenceLatestWkid",
    wkt: "spatialReferenceWkt",
    vcsWkid: "spatialReferenceVcsWkid",
    latestVcsWkid: "spatialReferenceLatestVcsWkid"
};
const component$6 = "rfx-dte-raster-info";
const HTMLClasses$b = {
    grid: `${component$6}__grid`
};

const rfxDteRasterInfoCss = ":root{--calcite-color-brand:#007ac2;--calcite-color-brand-hover:#00619b;--calcite-color-brand-press:#004874;--calcite-color-status-info:#00619b;--calcite-color-status-success:#35ac46;--calcite-color-status-warning:#edd317;--calcite-color-status-danger:#d83020;--calcite-color-status-danger-hover:#a82b1e;--calcite-color-status-danger-press:#7c1d13;--calcite-color-background:#f8f8f8;--calcite-color-foreground-1:#ffffff;--calcite-color-foreground-2:#f3f3f3;--calcite-color-foreground-3:#eaeaea;--calcite-color-text-1:#151515;--calcite-color-text-2:#4a4a4a;--calcite-color-text-3:#6a6a6a;--calcite-color-text-inverse:#ffffff;--calcite-color-text-link:#00619b;--calcite-color-border-1:#cacaca;--calcite-color-border-2:#d4d4d4;--calcite-color-border-3:#dfdfdf;--calcite-color-border-input:#949494;--rfx-quarter-spacing:0.25rem;--rfx-half-spacing:0.5rem;--rfx-three-quarter-spacing:0.75rem;--rfx-full-spacing:1rem;--rfx-component-default-width:100%;--rfx-ui-border-input:var(--calcite-color-border-2);--rfx-popover-content-min-height:30vh;--rfx-popover-content-max-height:60vh;--rfx-popover-content-height:45vh;--rfx-widget-content-height:30vh}.rfx-dte-raster-info__grid{overflow-x:auto}";

const RfxDteRasterInfo = class {
    constructor(hostRef) {
        (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.rfxArgumentChange = (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "rfxArgumentChange", 7);
        this.categoryReference = {
            rasterInfo: "rfxArgCat_RasterInfo",
            spatialReference: "rfxArgCat_SpatialReference",
            extent: "rfxArgCat_Extent",
            statistics: "rfxArgCat_Statistics"
        };
        this.uiElements = {
            rasterInfoSectionLabel: undefined,
            spatialReferenceSectionLabel: undefined,
            extentSectionLabel: undefined,
            statisticsSectionLabel: undefined,
            rasterInfoSectionVisible: undefined,
            spatialReferenceSectionVisible: undefined,
            extentSectionVisible: undefined,
            statisticsSectionVisible: undefined
        };
        /**
         * Grid Schema
         */
        this.gridSchema = {
            gridLayout: {},
            gridOptions: [],
            hasBorder: true,
            hasHeader: true,
            canAdd: false,
            hasIdColumn: false,
            canRemove: false,
            isStacked: false
        };
        this.onRasterChange = async () => {
            const layer = await this.layerArg.getSelectedLayer();
            if ((0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_8__.i)(layer)) ;
            this.setRasterDetails(layer);
        };
        this.rasterDetails = {
            rasterInfoProperties: undefined,
            rasterExtentProperties: undefined,
            rasterStatisticsProperties: undefined,
            rasterSpatialReferenceProperties: undefined
        };
        this.inputLayers = undefined;
        this.rfxBrowseLayerClick = undefined;
        this.value = undefined;
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    async connectedCallback() {
        const categoryReferenceStore = await (0,_resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.e)();
        this.categoryReferenceStore = categoryReferenceStore;
    }
    async componentWillLoad() {
        ({ strings: this.strings, dir: this.direction } = await (0,_localization_helper_4819b67d_js__WEBPACK_IMPORTED_MODULE_3__.b)(this.hostElement, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.g)(".")));
        this.setupInitialState();
    }
    //--------------------------------------------------------------------------
    //
    //  Private Methods
    //
    //--------------------------------------------------------------------------
    setupInitialState() {
        this.uiElements.rasterInfoSectionLabel =
            this.categoryReferenceStore[this.categoryReference.rasterInfo]?.title;
        this.uiElements.rasterInfoSectionVisible =
            this.categoryReferenceStore[this.categoryReference.rasterInfo]?.visible;
        this.uiElements.spatialReferenceSectionLabel =
            this.categoryReferenceStore[this.categoryReference.spatialReference]?.title;
        this.uiElements.spatialReferenceSectionVisible =
            this.categoryReferenceStore[this.categoryReference.spatialReference]?.visible;
        this.uiElements.extentSectionLabel =
            this.categoryReferenceStore[this.categoryReference.extent]?.title;
        this.uiElements.extentSectionVisible =
            this.categoryReferenceStore[this.categoryReference.extent]?.visible;
        this.uiElements.statisticsSectionLabel =
            this.categoryReferenceStore[this.categoryReference.statistics]?.title;
        this.uiElements.statisticsSectionVisible =
            this.categoryReferenceStore[this.categoryReference.statistics]?.visible;
        const hasPersistedData = Boolean(this.value);
        if (hasPersistedData) {
            const persistedData = this.value;
            const rasterInfoProperties = {
                columns: (0,_sanitize_number_d84114f7_js__WEBPACK_IMPORTED_MODULE_17__.f)((persistedData.extent.xmax - persistedData.extent.xmin) / persistedData.pixelSizeX, 6),
                rows: (0,_sanitize_number_d84114f7_js__WEBPACK_IMPORTED_MODULE_17__.f)((persistedData.extent.ymax - persistedData.extent.ymin) / persistedData.pixelSizeY, 6),
                pixelSizeX: (0,_sanitize_number_d84114f7_js__WEBPACK_IMPORTED_MODULE_17__.f)(persistedData.pixelSizeX, 6),
                pixelSizeY: (0,_sanitize_number_d84114f7_js__WEBPACK_IMPORTED_MODULE_17__.f)(persistedData.pixelSizeY, 6),
                bandCount: persistedData.bandCount,
                pixelType: persistedData.pixelType
            };
            const rasterExtentProperties = {
                top: (0,_sanitize_number_d84114f7_js__WEBPACK_IMPORTED_MODULE_17__.f)(persistedData.extent.ymax, 6),
                bottom: (0,_sanitize_number_d84114f7_js__WEBPACK_IMPORTED_MODULE_17__.f)(persistedData.extent.ymin, 6),
                left: (0,_sanitize_number_d84114f7_js__WEBPACK_IMPORTED_MODULE_17__.f)(persistedData.extent.xmin, 6),
                right: (0,_sanitize_number_d84114f7_js__WEBPACK_IMPORTED_MODULE_17__.f)(persistedData.extent.xmax, 6)
            };
            /** array of statistics objects */
            const rasterStatisticsProperties = persistedData.statistics;
            const rasterSpatialReferenceProperties = persistedData.extent.spatialReference;
            this.rasterDetails = {
                rasterInfoProperties,
                rasterExtentProperties,
                rasterStatisticsProperties,
                rasterSpatialReferenceProperties
            };
        }
    }
    /**
     * Widget value is only explicitly set when raster is changed
     * @param layer
     */
    setWidgetValue(layer) {
        let rasterInfoProperties = undefined;
        try {
            const layerRasterInfo = layer.rasterInfo;
            rasterInfoProperties = {
                extent: {
                    xmin: layerRasterInfo.extent.xmin,
                    ymin: layerRasterInfo.extent.ymin,
                    xmax: layerRasterInfo.extent.xmax,
                    ymax: layerRasterInfo.extent.ymax,
                    spatialReference: {
                        wkid: layerRasterInfo.spatialReference.wkid,
                        latestWkid: layerRasterInfo.spatialReference.latestWkid,
                        wkt: layerRasterInfo.spatialReference.wkt
                    }
                },
                blockWidth: layerRasterInfo.blockWidth || 256,
                blockHeight: layerRasterInfo.blockHeight || 256,
                bandCount: layerRasterInfo.bandCount,
                pixelType: layerRasterInfo.pixelType.toUpperCase(),
                pixelSizeX: layerRasterInfo.pixelSize.x,
                pixelSizeY: layerRasterInfo.pixelSize.y,
                format: layerRasterInfo.format || "Image Service",
                compressionType: layerRasterInfo.compressionType || "",
                // "firstPyramidLevel" : 1,
                // "maximumPyramidLevel" : 42,
                // "packetSize" : 4,
                compressionQuality: layerRasterInfo.compressionQuality || 0,
                statistics: layerRasterInfo.statistics,
                // "pyramidResamplingType" : -1,
                type: "RasterInfo"
            };
        }
        catch (e) { }
        this.value = rasterInfoProperties;
        this.rfxArgumentChange.emit({ value: this.value });
    }
    setRasterDetails(layer) {
        try {
            const layerRasterInfo = layer.rasterInfo;
            const rasterInfoProperties = {
                columns: (0,_sanitize_number_d84114f7_js__WEBPACK_IMPORTED_MODULE_17__.f)((layerRasterInfo.extent.xmax - layerRasterInfo.extent.xmin) / layerRasterInfo.pixelSize.x, 6),
                rows: (0,_sanitize_number_d84114f7_js__WEBPACK_IMPORTED_MODULE_17__.f)((layerRasterInfo.extent.ymax - layerRasterInfo.extent.ymin) / layerRasterInfo.pixelSize.y, 6),
                pixelSizeX: (0,_sanitize_number_d84114f7_js__WEBPACK_IMPORTED_MODULE_17__.f)(layerRasterInfo.pixelSize.x, 6),
                pixelSizeY: (0,_sanitize_number_d84114f7_js__WEBPACK_IMPORTED_MODULE_17__.f)(layerRasterInfo.pixelSize.y, 6),
                bandCount: layerRasterInfo.bandCount,
                pixelType: layerRasterInfo.pixelType
            };
            const rasterExtentProperties = {
                top: (0,_sanitize_number_d84114f7_js__WEBPACK_IMPORTED_MODULE_17__.f)(layerRasterInfo.extent.ymax, 6),
                bottom: (0,_sanitize_number_d84114f7_js__WEBPACK_IMPORTED_MODULE_17__.f)(layerRasterInfo.extent.ymin, 6),
                left: (0,_sanitize_number_d84114f7_js__WEBPACK_IMPORTED_MODULE_17__.f)(layerRasterInfo.extent.xmin, 6),
                right: (0,_sanitize_number_d84114f7_js__WEBPACK_IMPORTED_MODULE_17__.f)(layerRasterInfo.extent.xmax, 6)
            };
            /** array of statistics objects */
            const rasterStatisticsProperties = layerRasterInfo.statistics;
            const rasterSpatialReferenceProperties = layerRasterInfo.spatialReference?.toJSON();
            this.rasterDetails = {
                rasterInfoProperties,
                rasterExtentProperties,
                rasterStatisticsProperties,
                rasterSpatialReferenceProperties
            };
        }
        catch (e) {
            // handles case where layer is removed
            this.rasterDetails = {
                rasterInfoProperties: undefined,
                rasterExtentProperties: undefined,
                rasterStatisticsProperties: undefined,
                rasterSpatialReferenceProperties: undefined
            };
        }
        this.setWidgetValue(layer);
    }
    getRasterInfoGridSchema(rasterInfoProperties) {
        const rasterInfoGridLayout = {
            Property: {
                uiType: _interfaces_d0c68944_js__WEBPACK_IMPORTED_MODULE_7__.G.text,
                label: this.strings.rasterInfoProperty
            },
            Value: {
                uiType: _interfaces_d0c68944_js__WEBPACK_IMPORTED_MODULE_7__.G.text,
                label: this.strings.rasterInfoValue
            }
        };
        const defaultRasterInfoGridOptions = [
            {
                id: 1,
                Property: "",
                Value: ""
            }
        ];
        const rasterInfoGridOptions = rasterInfoProperties
            ? Object.keys(rasterInfoProperties).map((key, index) => {
                return {
                    id: index + 1,
                    Property: this.strings[rasterInfoi18nMap[key]],
                    Value: rasterInfoProperties[key]
                };
            })
            : defaultRasterInfoGridOptions;
        const gridSchema = {
            gridLayout: rasterInfoGridLayout,
            gridOptions: rasterInfoGridOptions
        };
        return gridSchema;
    }
    getRasterExtentGridSchema(rasterExtentProperties) {
        const rasterExtentGridLayout = {
            Property: {
                uiType: _interfaces_d0c68944_js__WEBPACK_IMPORTED_MODULE_7__.G.text,
                label: this.strings.rasterInfoProperty
            },
            Value: {
                uiType: _interfaces_d0c68944_js__WEBPACK_IMPORTED_MODULE_7__.G.text,
                label: this.strings.rasterInfoValue
            }
        };
        const defaultRasterExtentGridOptions = [
            {
                id: 1,
                Property: "",
                Value: ""
            }
        ];
        const rasterExtentGridOptions = rasterExtentProperties
            ? Object.keys(rasterExtentProperties)?.map((key, index) => {
                return {
                    id: index + 1,
                    Property: this.strings[rasterExtenti18nMap[key]],
                    Value: rasterExtentProperties[key]
                };
            })
            : defaultRasterExtentGridOptions;
        const gridSchema = {
            gridLayout: rasterExtentGridLayout,
            gridOptions: rasterExtentGridOptions
        };
        return gridSchema;
    }
    getRasterSpatialReferenceGridSchema(rasterSpatialReferenceProperties) {
        const rasterInfoGridLayout = {
            Property: {
                uiType: _interfaces_d0c68944_js__WEBPACK_IMPORTED_MODULE_7__.G.text,
                label: this.strings.rasterInfoProperty
            },
            Value: {
                uiType: _interfaces_d0c68944_js__WEBPACK_IMPORTED_MODULE_7__.G.text,
                label: this.strings.rasterInfoValue
            }
        };
        const defaultRasterSpatialReferenceOptions = [
            {
                id: 1,
                Property: "",
                Value: ""
            }
        ];
        // Spatial Reference Category and Name
        // var rasterSpatialReference_data = [{
        //   Property: this.strings[spatialReferenceCategories[rasterSpatialReferencePicker.category]],
        //   Value: sr && sr.name
        // }];
        let rasterSpatialReferenceOptions = rasterSpatialReferenceProperties
            ? Object.keys(rasterSpatialReferenceProperties)
                .map((key, index) => {
                const property = this.strings[rasterSpatialReferencei18nMap[key]], value = rasterSpatialReferenceProperties?.[key];
                if (!property) {
                    return;
                }
                return {
                    id: index + 1,
                    Property: property,
                    Value: value
                };
            })
                .filter((pair) => {
                return pair && pair.Property && pair.Value;
            })
            : defaultRasterSpatialReferenceOptions;
        if (rasterSpatialReferenceProperties?.wkt) {
            rasterSpatialReferenceOptions = [
                {
                    id: 1,
                    Property: this.strings[rasterSpatialReferencei18nMap.wkt],
                    Value: rasterSpatialReferenceProperties.wkt
                }
            ];
        }
        const gridSchema = {
            gridLayout: rasterInfoGridLayout,
            gridOptions: rasterSpatialReferenceOptions
        };
        return gridSchema;
    }
    getRasterStatisticsGridSchema(rasterStatisticsProperties) {
        const rasterStatisticsGridLayout = {
            BandName: {
                uiType: _interfaces_d0c68944_js__WEBPACK_IMPORTED_MODULE_7__.G.text,
                label: this.strings.bandName
            },
            Minimum: {
                uiType: _interfaces_d0c68944_js__WEBPACK_IMPORTED_MODULE_7__.G.text,
                label: this.strings.minimum
            },
            Maximum: {
                uiType: _interfaces_d0c68944_js__WEBPACK_IMPORTED_MODULE_7__.G.text,
                label: this.strings.maximum
            },
            Mean: {
                uiType: _interfaces_d0c68944_js__WEBPACK_IMPORTED_MODULE_7__.G.text,
                label: this.strings.mean
            },
            StdDeviation: {
                uiType: _interfaces_d0c68944_js__WEBPACK_IMPORTED_MODULE_7__.G.text,
                label: this.strings.stdDeviation
            }
        };
        const rasterStatisticsGridOptions = rasterStatisticsProperties.map((statistics, index) => {
            return {
                id: index + 1,
                BandName: `Band_${index + 1}`,
                Minimum: (0,_sanitize_number_d84114f7_js__WEBPACK_IMPORTED_MODULE_17__.f)(statistics.min, 3),
                Maximum: (0,_sanitize_number_d84114f7_js__WEBPACK_IMPORTED_MODULE_17__.f)(statistics.max, 3),
                Mean: (0,_sanitize_number_d84114f7_js__WEBPACK_IMPORTED_MODULE_17__.f)(statistics.avg || statistics.mean, 3),
                StdDeviation: (0,_sanitize_number_d84114f7_js__WEBPACK_IMPORTED_MODULE_17__.f)(statistics.stddev)
            };
        });
        const gridSchema = {
            gridLayout: rasterStatisticsGridLayout,
            gridOptions: rasterStatisticsGridOptions
        };
        return gridSchema;
    }
    renderRasterInfoGrid(rasterInfoProperties) {
        const gridSchema = this.getRasterInfoGridSchema(rasterInfoProperties);
        return ((0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("rfx-section", { label: this.uiElements.rasterInfoSectionLabel, open: this.uiElements.rasterInfoSectionVisible }, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("rfx-grid", { hasHeader: this.gridSchema.hasHeader, canAdd: this.gridSchema.canAdd, hasIdColumn: this.gridSchema.hasIdColumn, gridLayout: gridSchema.gridLayout, gridOptions: gridSchema.gridOptions, hasBorder: this.gridSchema.hasBorder, onRfxGridOptionChange: () => { }, isStacked: this.gridSchema.isStacked, canRemove: this.gridSchema.canRemove }))));
    }
    renderRasterExtentGrid(rasterExtentProperties) {
        const gridSchema = this.getRasterExtentGridSchema(rasterExtentProperties);
        return ((0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("rfx-section", { label: this.uiElements.extentSectionLabel, open: this.uiElements.extentSectionVisible }, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("rfx-grid", { hasHeader: this.gridSchema.hasHeader, canAdd: this.gridSchema.canAdd, hasIdColumn: this.gridSchema.hasIdColumn, gridLayout: gridSchema.gridLayout, gridOptions: gridSchema.gridOptions, hasBorder: this.gridSchema.hasBorder, onRfxGridOptionChange: () => { }, isStacked: this.gridSchema.isStacked, canRemove: this.gridSchema.canRemove }))));
    }
    renderRasterSpatialReferenceGrid(rasterSpatialReferenceProperties) {
        const gridSchema = this.getRasterSpatialReferenceGridSchema(rasterSpatialReferenceProperties);
        return ((0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("rfx-section", { label: this.uiElements.spatialReferenceSectionLabel, open: this.uiElements.spatialReferenceSectionVisible }, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("rfx-grid", { class: HTMLClasses$b.grid, hasHeader: this.gridSchema.hasHeader, canAdd: this.gridSchema.canAdd, hasIdColumn: this.gridSchema.hasIdColumn, gridLayout: gridSchema.gridLayout, gridOptions: gridSchema.gridOptions, hasBorder: this.gridSchema.hasBorder, onRfxGridOptionChange: () => { }, isStacked: this.gridSchema.isStacked, canRemove: this.gridSchema.canRemove }))));
    }
    renderRasterStatisticsGrid(rasterStatisticsProperties) {
        const isStatisticsPresent = rasterStatisticsProperties?.length > 0;
        const gridSchema = isStatisticsPresent
            ? this.getRasterStatisticsGridSchema(rasterStatisticsProperties)
            : undefined;
        return ((0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("rfx-section", { label: this.uiElements.statisticsSectionLabel, open: this.uiElements.statisticsSectionVisible }, isStatisticsPresent ? ((0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("rfx-grid", { class: HTMLClasses$b.grid, hasHeader: this.gridSchema.hasHeader, canAdd: this.gridSchema.canAdd, hasIdColumn: this.gridSchema.hasIdColumn, gridLayout: gridSchema.gridLayout, gridOptions: gridSchema.gridOptions, hasBorder: this.gridSchema.hasBorder, onRfxGridOptionChange: () => { }, isStacked: this.gridSchema.isStacked, canRemove: this.gridSchema.canRemove }))) : ((0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("h3", null, this.strings.rasterStatisticsNotCalculated))));
    }
    render() {
        // Only show grids when a layer is set.
        const showGrids = Boolean(this.value);
        return ((0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.F, null, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { alignment: "start", scale: _ui_utils_928a4096_js__WEBPACK_IMPORTED_MODULE_4__.U.Scale, layout: "default" }, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("rfx-dte-raster-input", { ref: (e) => (this.layerArg = e), allowScalar: true, inputLayers: this.inputLayers,
            // value={element && element.type === RFV_TYPE ? element.value : element}
            value: undefined,
            // rfxVariable={element}
            onRfxArgumentChange: (event) => {
                event.stopPropagation();
                this.onRasterChange();
            }, rfxBrowseLayerClick: this.rfxBrowseLayerClick })), showGrids ? ((0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.F, null, this.renderRasterInfoGrid(this.rasterDetails.rasterInfoProperties), this.renderRasterExtentGrid(this.rasterDetails.rasterExtentProperties), this.renderRasterSpatialReferenceGrid(this.rasterDetails.rasterSpatialReferenceProperties), this.renderRasterStatisticsGrid(this.rasterDetails.rasterStatisticsProperties))) : null));
    }
    static get assetsDirs() { return ["t9n"]; }
    get hostElement() { return (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.a)(this); }
};
RfxDteRasterInfo.style = rfxDteRasterInfoCss;

const HTMLClasses$a = {
    selectButton: "select-button"
};

const rfxDteSpatialReferencePickerCss = ":root{--calcite-color-brand:#007ac2;--calcite-color-brand-hover:#00619b;--calcite-color-brand-press:#004874;--calcite-color-status-info:#00619b;--calcite-color-status-success:#35ac46;--calcite-color-status-warning:#edd317;--calcite-color-status-danger:#d83020;--calcite-color-status-danger-hover:#a82b1e;--calcite-color-status-danger-press:#7c1d13;--calcite-color-background:#f8f8f8;--calcite-color-foreground-1:#ffffff;--calcite-color-foreground-2:#f3f3f3;--calcite-color-foreground-3:#eaeaea;--calcite-color-text-1:#151515;--calcite-color-text-2:#4a4a4a;--calcite-color-text-3:#6a6a6a;--calcite-color-text-inverse:#ffffff;--calcite-color-text-link:#00619b;--calcite-color-border-1:#cacaca;--calcite-color-border-2:#d4d4d4;--calcite-color-border-3:#dfdfdf;--calcite-color-border-input:#949494;--rfx-quarter-spacing:0.25rem;--rfx-half-spacing:0.5rem;--rfx-three-quarter-spacing:0.75rem;--rfx-full-spacing:1rem;--rfx-component-default-width:100%;--rfx-ui-border-input:var(--calcite-color-border-2);--rfx-popover-content-min-height:30vh;--rfx-popover-content-max-height:60vh;--rfx-popover-content-height:45vh;--rfx-widget-content-height:30vh}:host{display:flex;flex-direction:column;width:var(--rfx-component-default-width)}.select-button{margin-bottom:var(--rfx-half-spacing)}";

const SpatialReferencePicker = class {
    constructor(hostRef) {
        (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.spatialReferenceInputChange = (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "spatialReferenceInputChange", 7);
        this.createPopover = (event) => {
            if (this.spatialReferencePopover) {
                this.spatialReferencePopover.remove();
                this.spatialReferencePopover = undefined;
            }
            this.spatialReferencePopover = document.createElement("calcite-popover");
            const popoverProps = {
                autoClose: true,
                dir: this.dir,
                focusTrapDisabled: true,
                heading: this.strings.browseCoordinateSystems,
                closable: true,
                open: true,
                referenceElement: event.target
            };
            Object.assign(this.spatialReferencePopover, popoverProps);
            this.spatialReferencePopover.addEventListener("calcitePopoverClose", this.handleSpatialReferenceClose);
            const srSelector = document.createElement("rfx-spatial-reference-popover");
            srSelector.hideCategories = this.hideCategories;
            srSelector.value = this.value;
            // srSelector.defaultWkid = this.selectedLayer?.spatialReference?.wkid;
            srSelector.addEventListener("spatialReferenceValueChange", this.handleSpatialReferenceChange);
            srSelector.addEventListener("spatialReferencePopoverDismissed", this.handleSpatialReferenceClose);
            this.spatialReferencePopover.append(srSelector);
            document.body.append(this.spatialReferencePopover);
            setTimeout(() => requestAnimationFrame(() => this.spatialReferencePopover?.setFocus()), 1);
        };
        this.validate = () => {
            if (this.required && this.value === undefined) {
                this.errorMessage = (0,_common_fda1462e_js__WEBPACK_IMPORTED_MODULE_15__.f)(this.strings.isRequired, { label: "Spatial reference" });
            }
            else {
                this.errorMessage = undefined;
            }
            return this.errorMessage === undefined;
        };
        this.handleSpatialReferenceChange = (event) => {
            // TODO: Just emit latestWkid property on deprecation
            this.value = {
                latestWkid: event.detail.latestWkid,
                wkid: event.detail.latestWkid
            };
            this.spatialReferenceInputChange.emit(this.value);
        };
        this.handleSpatialReferenceClose = () => {
            this.spatialReferencePopover?.remove();
            this.spatialReferencePopover = undefined;
            this.validate();
        };
        this.required = false;
        this.hideCategories = undefined;
        this.value = undefined;
        this.errorMessage = undefined;
    }
    onValueChange() {
        var _a, _b;
        if (this.value !== undefined) {
            // keep wkids in sync while both are supported
            (_a = this.value).wkid ?? (_a.wkid = this.value.latestWkid);
            (_b = this.value).latestWkid ?? (_b.latestWkid = this.value.wkid);
        }
        this.validate();
    }
    /**
     * @category Lifecycle
     */
    async componentWillLoad() {
        var _a, _b;
        ({ strings: this.strings, dir: this.dir } = await (0,_localization_helper_4819b67d_js__WEBPACK_IMPORTED_MODULE_3__.b)(this.hostElement, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.g)(`.`)));
        if (this.value !== undefined) {
            // keep wkids in sync while both are supported
            (_a = this.value).wkid ?? (_a.wkid = this.value.latestWkid);
            (_b = this.value).latestWkid ?? (_b.latestWkid = this.value.wkid);
        }
    }
    /**
     * @category Lifecycle
     */
    disconnectedCallback() {
        this.spatialReferencePopover?.remove();
    }
    /**
     * Method to run validation on current input, update the validity, and return the validity result
     * @category Public
     */
    async checkValidity() {
        // Run validation (updates error message)
        this.validate();
        // Return validity (if there is no error message, then the input is valid)
        const validity = this.errorMessage === undefined || this.errorMessage === "";
        return Promise.resolve(validity);
    }
    render() {
        const buttonText = (0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_8__.i)(this.value)
            ? this.strings.browseCoordinateSystems
            : (0,_spatial_reference_helper_42965f73_js__WEBPACK_IMPORTED_MODULE_28__.a)(this.value?.latestWkid) ??
                this.strings.browseCoordinateSystems;
        return ((0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.H, null, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { width: "full", appearance: "outline", kind: "neutral", "icon-end": "chevron-down", alignment: "icon-end-space-between", onClick: this.createPopover, class: HTMLClasses$a.selectButton, scale: _ui_utils_928a4096_js__WEBPACK_IMPORTED_MODULE_4__.U.Scale }, buttonText), (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-input-message", { status: "invalid", scale: _ui_utils_928a4096_js__WEBPACK_IMPORTED_MODULE_4__.U.Scale, hidden: this.errorMessage === undefined, icon: "exclamationMarkTriangle" }, this.errorMessage)));
    }
    static get assetsDirs() { return ["t9n"]; }
    get hostElement() { return (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.a)(this); }
    static get watchers() { return {
        "value": ["onValueChange"]
    }; }
};
SpatialReferencePicker.style = rfxDteSpatialReferencePickerCss;

const component$5 = "rfx-dte-statistics-grid";
const HTMLClasses$9 = {
    base: `${component$5}`
};

const rfxDteStatisticsGridCss = ":root{--calcite-color-brand:#007ac2;--calcite-color-brand-hover:#00619b;--calcite-color-brand-press:#004874;--calcite-color-status-info:#00619b;--calcite-color-status-success:#35ac46;--calcite-color-status-warning:#edd317;--calcite-color-status-danger:#d83020;--calcite-color-status-danger-hover:#a82b1e;--calcite-color-status-danger-press:#7c1d13;--calcite-color-background:#f8f8f8;--calcite-color-foreground-1:#ffffff;--calcite-color-foreground-2:#f3f3f3;--calcite-color-foreground-3:#eaeaea;--calcite-color-text-1:#151515;--calcite-color-text-2:#4a4a4a;--calcite-color-text-3:#6a6a6a;--calcite-color-text-inverse:#ffffff;--calcite-color-text-link:#00619b;--calcite-color-border-1:#cacaca;--calcite-color-border-2:#d4d4d4;--calcite-color-border-3:#dfdfdf;--calcite-color-border-input:#949494;--rfx-quarter-spacing:0.25rem;--rfx-half-spacing:0.5rem;--rfx-three-quarter-spacing:0.75rem;--rfx-full-spacing:1rem;--rfx-component-default-width:100%;--rfx-ui-border-input:var(--calcite-color-border-2);--rfx-popover-content-min-height:30vh;--rfx-popover-content-max-height:60vh;--rfx-popover-content-height:45vh;--rfx-widget-content-height:30vh}.rfx-dte-statistics-grid{overflow-x:auto}";

const RFxDteStatisticsGrid = class {
    constructor(hostRef) {
        (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.rfxArgumentChange = (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "rfxArgumentChange", 7);
        this.displayNames = ["min", "max", "mean", "stdDev"];
        this.ncolumns = 4;
        this.updateValue = (event) => {
            const value = [];
            const { detail: { gridOptions } } = event;
            gridOptions.forEach((gridOption, id) => {
                if (id === gridOptions.length - 1) {
                    return; // last is a placeholder
                }
                Object.keys(this.gridSchema).forEach((columnName) => {
                    value.push(gridOption[columnName]);
                });
            });
            this.value = this.createComplexValue(value);
            this.rfxArgumentChange.emit({ value: this.value });
        };
        this.dataTypeAttributes = undefined;
        this.value = undefined;
        this.layerArg = undefined;
        this.dataType = undefined;
    }
    onValueChange() {
        this.getGridOptions();
    }
    async componentWillLoad() {
        ({ strings: this.strings } = await (0,_localization_helper_4819b67d_js__WEBPACK_IMPORTED_MODULE_3__.b)(this.hostElement, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.g)(`.`)));
        this.displayNames = this.displayNames.map((name) => this.strings[name]);
        this.getGridSchema();
        await this.processLayerArg();
        this.getGridOptions();
    }
    async processLayerArg() {
        if ((0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_8__.i)(this.layerArg)) {
            return;
        }
        const layerInput = this.layerArg?.input;
        if ((0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_8__.i)(this.value)) {
            await this.updateValuesBasedOnRasterStats();
        }
        layerInput?.addEventListener("rfxArgumentChange", async () => {
            await this.updateValuesBasedOnRasterStats();
        });
    }
    async updateValuesBasedOnRasterStats() {
        const layerInput = this.layerArg.input;
        const layer = typeof layerInput.getSelectedLayer === "function"
            ? await layerInput.getSelectedLayer()
            : undefined;
        if ((0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_8__.i)(layer)) {
            return;
        }
        const rasterStats = layer.rasterInfo.statistics;
        this.value = rasterStats.map((element) => {
            return [element.min, element.max, element.avg.toFixed(3), element.stddev.toFixed(3)];
        });
    }
    getProcessedValue() {
        if (!(0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_8__.i)(this.value?.elements)) {
            //pro format- gives the values in elements
            // convert into array of arrays
            this.value = this.value.elements.map((element) => {
                return [element.min, element.max, element.mean, element.standardDeviation];
            });
        }
        return Array.isArray(this.value)
            ? this.value.join(",").split(",").map(Number)
            : this.value;
    }
    getGridOptions() {
        const columnCount = this.ncolumns;
        const gridOptions = [];
        if (!(0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_8__.i)(this.value)) {
            const value = this.getProcessedValue();
            while (value.length > 0) {
                const valObj = { id: value.length / columnCount };
                const groupedValues = value.splice(0, columnCount);
                groupedValues.forEach(function (val, index) {
                    valObj[`statistics${index}`] = val;
                });
                gridOptions.push(valObj);
            }
        }
        // add a blank object
        gridOptions.push({ id: 0 });
        this.gridOptions = gridOptions;
    }
    createComplexValue(updatedValue) {
        if (updatedValue.length === 0) {
            this.value = [];
        }
        let value;
        value = !(0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_8__.i)(this.value?.elements)
            ? {
                elements: []
            }
            : [];
        if (value.elements) {
            value.elements = updatedValue;
        }
        else {
            value = updatedValue;
        }
        return value;
    }
    getGridSchema() {
        this.gridSchema = {};
        this.displayNames.forEach((name, index) => {
            const columnName = `statistics${index}`;
            this.gridSchema[columnName] = {
                label: name,
                uiType: _interfaces_d0c68944_js__WEBPACK_IMPORTED_MODULE_7__.G.number
            };
        });
    }
    render() {
        return ((0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("rfx-grid", { class: HTMLClasses$9.base, hasHeader: true, canAdd: true, canRemove: true, hasIdColumn: true, gridLayout: this.gridSchema, gridOptions: this.gridOptions, hasBorder: true, onRfxGridOptionChange: this.updateValue }));
    }
    static get assetsDirs() { return ["t9n"]; }
    get hostElement() { return (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.a)(this); }
    static get watchers() { return {
        "value": ["onValueChange"]
    }; }
};
RFxDteStatisticsGrid.style = rfxDteStatisticsGridCss;

const aggregationDefinitionOptions = {
    ALL: "ALL",
    INTERVAL_VALUE: "INTERVAL_VALUE",
    INTERVAL_RANGES: "INTERVAL_RANGES",
    INTERVAL_KEYWORD: "INTERVAL_KEYWORD"
};
const aggregationDefinitionOptionsDefault = {
    ALL: "ALL",
    INTERVAL_VALUE: "INTERVAL_VALUE",
    INTERVAL_RANGES: "INTERVAL_RANGES"
};
const aggregationDefinitionOptionsForStdTime = {
    ALL: "ALL",
    INTERVAL_KEYWORD: "INTERVAL_KEYWORD",
    INTERVAL_VALUE: "INTERVAL_VALUE",
    INTERVAL_RANGES: "INTERVAL_RANGES"
};
const aggregationDefinitionLabels = {
    ALL: "aggDefTypeAll",
    INTERVAL_KEYWORD: "aggDefTypeIntervalKeyword",
    INTERVAL_VALUE: "aggDefTypeIntervalValue",
    INTERVAL_RANGES: "aggDefTypeIntervalRanges"
};
const esriTimeIntervalKeywords = {
    HOURLY: "HOURLY",
    DAILY: "DAILY",
    WEEKLY: "WEEKLY",
    DEKADLY: "DEKADLY",
    PENTADLY: "PENTADLY",
    MONTHLY: "Monthly",
    QUARTERLY: "QUARTERLY",
    YEARLY: "YEARLY",
    RECURRING_DAILY: "RECURRINGDAILY",
    RECURRING_WEEKLY: "RECURRINGWEEKLY",
    RECURRING_MONTHLY: "RECURRINGMONTHLY",
    RECURRING_QUARTERLY: "RECURRINGQUARTERLY"
};
const esriTimeIntervalKeywordLabels = {
    HOURLY: "esriTimeIntervalKeywordHourly",
    DAILY: "esriTimeIntervalKeywordDaily",
    WEEKLY: "esriTimeIntervalKeywordWeekly",
    DEKADLY: "esriTimeIntervalKeywordDekadly",
    PENTADLY: "esriTimeIntervalKeywordPentadly",
    MONTHLY: "esriTimeIntervalKeywordMonthly",
    QUARTERLY: "esriTimeIntervalKeywordQuarterly",
    YEARLY: "esriTimeIntervalKeywordYearly",
    RECURRING_DAILY: "esriTimeIntervalKeywordRecurringDaily",
    RECURRING_WEEKLY: "esriTimeIntervalKeywordRecurringWeekly",
    RECURRING_MONTHLY: "esriTimeIntervalKeywordRecurringMonthly",
    RECURRING_QUARTERLY: "esriTimeIntervalKeywordRecurringQuarterly"
};
const esriTimeUnits$1 = {
    HOURS: "HOURS",
    DAYS: "DAYS",
    WEEKS: "WEEKS",
    MONTHS: "MONTHS",
    YEARS: "YEARS"
};
const esriTimeUnitLabels$1 = {
    HOURS: "esriTimeUnitsHours",
    DAYS: "esriTimeUnitsDays",
    WEEKS: "esriTimeUnitsWeeks",
    MONTHS: "esriTimeUnitsMonths",
    YEARS: "esriTimeUnitsYears"
};
const component$4 = "rfx-dtex-aggregation-definition-editor";
const HTMLClasses$8 = {
    grid: `${component$4}__grid`,
    minValueColumn: `${component$4}__minValue-column`,
    maxValueColumn: `${component$4}__maxValue-column`
};
const HelpClickHandlerKeys$1 = {
    aggregationDefinitionTypeHelpClickHandler: "aggregationDefinitionTypeHelpClickHandler",
    intervalRangesGridArgHelpClickHandler: "intervalRangesGridArgHelpClickHandler",
    dimensionArgHelpClickHandler: "dimensionArgHelpClickHandler",
    valueIntervalHelpClickHandler: "valueIntervalHelpClickHandler",
    unitArgHelpClickHandler: "unitArgHelpClickHandler",
    esriTimeIntervalKeywordHelpClickHandler: "esriTimeIntervalKeywordHelpClickHandler"
};

const rfxDtexAggregationDefinitionEditorCss = ":root{--calcite-color-brand:#007ac2;--calcite-color-brand-hover:#00619b;--calcite-color-brand-press:#004874;--calcite-color-status-info:#00619b;--calcite-color-status-success:#35ac46;--calcite-color-status-warning:#edd317;--calcite-color-status-danger:#d83020;--calcite-color-status-danger-hover:#a82b1e;--calcite-color-status-danger-press:#7c1d13;--calcite-color-background:#f8f8f8;--calcite-color-foreground-1:#ffffff;--calcite-color-foreground-2:#f3f3f3;--calcite-color-foreground-3:#eaeaea;--calcite-color-text-1:#151515;--calcite-color-text-2:#4a4a4a;--calcite-color-text-3:#6a6a6a;--calcite-color-text-inverse:#ffffff;--calcite-color-text-link:#00619b;--calcite-color-border-1:#cacaca;--calcite-color-border-2:#d4d4d4;--calcite-color-border-3:#dfdfdf;--calcite-color-border-input:#949494;--rfx-quarter-spacing:0.25rem;--rfx-half-spacing:0.5rem;--rfx-three-quarter-spacing:0.75rem;--rfx-full-spacing:1rem;--rfx-component-default-width:100%;--rfx-ui-border-input:var(--calcite-color-border-2);--rfx-popover-content-min-height:30vh;--rfx-popover-content-max-height:60vh;--rfx-popover-content-height:45vh;--rfx-widget-content-height:30vh}.rfx-dtex-aggregation-definition-editor__grid table{width:100%;table-layout:fixed}.rfx-dtex-aggregation-definition-editor__grid table thead tr th:last-child{width:6%}.rfx-dtex-aggregation-definition-editor__grid table tbody tr td:last-child{width:6%}.rfx-dtex-aggregation-definition-editor__minValue-column{width:47%}.rfx-dtex-aggregation-definition-editor__maxValue-column{width:47%}";

const RFxAggregationDefinitionEditor = class {
    constructor(hostRef) {
        (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.rfxArgumentChange = (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "rfxArgumentChange", 7);
        /**
         * The reference element for the rasterVariables select button.
         * @category Private
         */
        this.uiElements = {
            aggregationDefinitionLabel: undefined,
            aggregationDefinitionContainer: undefined,
            intervalRangesGridLabel: undefined,
            intervalRangesGridContainer: undefined,
            esriTimeIntervalKeywordContainer: undefined,
            valueIntervalLabel: undefined,
            valueIntervalContainer: undefined,
            dimensionUnitLabel: undefined,
            dimensionUnitContainer: undefined
        };
        /**
         * Stores event handlers for help action click, stored in connected callback to avoid
         * fetching function on each render ( to avoid common bad practice )
         */
        this.helpActionClickEventHandlers = new Map();
        this.multidimensionalData = undefined;
        this.timeInfoData = undefined;
        this.gridLayoutState = undefined;
        this.dimensionUnitsOptions = [];
        this.esriTimeIntervalKeywordOptions = [];
        this.defaults = {
            intervalValue: 3,
            intervalKeyword: esriTimeIntervalKeywords.HOURLY,
            units: esriTimeUnits$1.HOURS
        };
        //--------------------------------------------------------------------------
        //
        //  Private Methods
        //
        //--------------------------------------------------------------------------
        this.hanldeLayerInputchange = async () => {
            // reset widget values
            this.selectedDimension = undefined;
            this.value = undefined;
            this.gridLayoutState = undefined;
            await this.setLayerData();
        };
        this.onRasterdimensionSelectChange = ({ detail: { value } }) => {
            this.selectedDimension = value;
        };
        this.onDimensionDefinitionChange = ({ detail: { value } }) => {
            this.value = undefined;
            this.gridLayoutState = undefined;
            this.aggregationDefinition = value;
        };
        this.updateByRangeGridValue = (event) => {
            const { detail: { gridOptions } } = event;
            if ((0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_8__.i)(gridOptions)) {
                return;
            }
            const unfilteredValue = gridOptions.reduce((acc, gridOption) => {
                const fields = Object.keys(gridOption);
                const values = fields.map((field) => gridOption[field].value);
                // filter out id column value
                values.shift();
                // if all values are not set return accumulator
                if (values.length !== fields.length - 1) {
                    return acc;
                }
                const [minValue, maxValue] = values;
                acc.minValues.push(minValue);
                acc.maxValues.push(maxValue);
                return acc;
            }, { minValues: [], maxValues: [] });
            const value = gridOptions.reduce((acc, gridOption) => {
                const fields = Object.keys(gridOption);
                // filter out all falsy values
                const values = fields.map((field) => gridOption[field].value).filter(Boolean);
                // if all values are not set return accumulator
                if (values.length !== fields.length - 1) {
                    return acc;
                }
                const [minValue, maxValue] = values;
                acc.minValues.push(minValue);
                acc.maxValues.push(maxValue);
                return acc;
            }, { minValues: [], maxValues: [] });
            this.gridLayoutState = unfilteredValue;
            this.value = value;
        };
        this.selectedDimension = undefined;
        this.aggregationDefinitionOptions = [];
        this.aggregationDefinition = undefined;
        this.gridSchema = {
            gridLayout: {},
            gridOptions: [],
            hasBorder: true,
            hasHeader: true,
            canAdd: true,
            canRemove: true,
            hasIdColumn: false
        };
        this.layerArg = undefined;
        this.otherOptions = undefined;
        this.domainAttributes = undefined;
        this.defaultValue = undefined;
        this.value = undefined;
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    connectedCallback() {
        this.layerArg?.input?.addEventListener("rfxArgumentChange", this.hanldeLayerInputchange);
    }
    async componentWillLoad() {
        ({ strings: this.strings, dir: this.direction } = await (0,_localization_helper_4819b67d_js__WEBPACK_IMPORTED_MODULE_3__.b)(this.hostElement, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.g)(`.`)));
        this.uiElements.aggregationDefinitionLabel = this.strings.aggregationType;
        this.uiElements.intervalRangesGridLabel = this.strings.ranges;
        this.uiElements.valueIntervalLabel = this.strings.valueInterval;
        this.uiElements.dimensionUnitLabel = this.strings.dimensionUnit;
        await this.setInitialState();
    }
    componentWillRender() {
        this.setWidgetstate();
        this.setWidgetValue();
    }
    componentDidLoad() {
        this.attachHelpClickEventHandlers();
    }
    disconnectedCallback() { }
    async setLayerData() {
        const layer = await this.layerArg?.input.getSelectedLayer();
        if ((0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_8__.i)(layer)) {
            return;
        }
        const mutlidimensionalInfo = layer.type === "imagery-tile"
            ? layer.rasterInfo.multidimensionalInfo
            : layer.multidimensionalInfo;
        this.multidimensionalData = (0,_multidimensional_helper_fc8fbe0e_js__WEBPACK_IMPORTED_MODULE_29__.c)(mutlidimensionalInfo);
        const timeInfo = layer.timeInfo?.toJSON();
        const intervalInfo = layer.timeInfo?.interval?.toJSON();
        this.timeInfoData = { ...timeInfo, interval: intervalInfo };
    }
    async setInitialState() {
        this.value = typeof this.value === "string" ? JSON.parse(this.value) : this.value;
        await this.setLayerData();
        this.aggregationDefinitionOptions = Object.keys(aggregationDefinitionOptions).map((option) => ({
            key: option,
            label: this.strings[aggregationDefinitionLabels[option]]
        }));
        this.dimensionUnitsOptions = Object.keys(esriTimeUnitLabels$1).map((esriTimeUnitLabel) => ({
            key: esriTimeUnitLabel,
            label: this.strings[esriTimeUnitLabels$1[esriTimeUnitLabel]]
        }));
        this.esriTimeIntervalKeywordOptions = Object.keys(esriTimeIntervalKeywordLabels).map((esriTimeUnitLabel) => ({
            key: esriTimeUnitLabel,
            label: this.strings[esriTimeIntervalKeywordLabels[esriTimeUnitLabel]]
        }));
        this.gridLayoutState = {
            minValues: this.value?.minValues ? [...this.value.minValues, undefined] : undefined,
            maxValues: this.value?.maxValues ? [...this.value.maxValues, undefined] : undefined
        };
        this.aggregationDefinition =
            this.value?.definitionType ?? this.aggregationDefinitionOptions?.[0]?.key;
        this.selectedDimension = this.value?.dimension;
    }
    setWidgetValue() {
        const widgetValue = {
            definitionType: this.aggregationDefinition,
            dimension: this.selectedDimension
        };
        switch (widgetValue.definitionType) {
            case aggregationDefinitionOptions.INTERVAL_VALUE:
                widgetValue.intervalValue = this.value?.intervalValue || this.defaults.intervalValue;
                widgetValue.units = this.value?.units || this.defaults.units;
                break;
            case aggregationDefinitionOptions.INTERVAL_KEYWORD:
                widgetValue.intervalKeyword = this.value?.intervalKeyword || this.defaults.intervalKeyword;
                break;
            case aggregationDefinitionOptions.INTERVAL_RANGES:
                widgetValue.minValues = this.value?.minValues;
                widgetValue.maxValues = this.value?.maxValues;
                break;
        }
        this.value = (0,_multidimensional_helper_fc8fbe0e_js__WEBPACK_IMPORTED_MODULE_29__.c)(widgetValue);
        this.rfxArgumentChange.emit({ value: this.value });
    }
    attachHelpClickEventHandlers() {
        const aggregationDefinitionTypeHelpClickHandler = this.otherOptions.onHelpActionClick({
            heading: this.uiElements.aggregationDefinitionLabel,
            referenceElement: this.uiElements.aggregationDefinitionContainer,
            helpTextID: this.otherOptions.helpTextIDs?.type
        });
        this.helpActionClickEventHandlers.set(HelpClickHandlerKeys$1.aggregationDefinitionTypeHelpClickHandler, aggregationDefinitionTypeHelpClickHandler);
        // TODO: identify performance impact;
        // help handlers for conditionally rendered UI elemnts are set during their creation.
    }
    createIntervalRangesDataObject(multidimensionalInfo, selectedDimension, persistedData) {
        const widgetData = [];
        try {
            let gridDimensionMinValuesOptions = [], gridDimensionMaxValuesOptions = [];
            const multidimensionalInfoVariables = multidimensionalInfo && multidimensionalInfo.variables;
            if (!multidimensionalInfoVariables) {
                throw new Error("Layer does not have MultidimensionalInfo variables");
            }
            const selectedDimensionMinValues = persistedData?.minValues || ["UNUSED_PARAM"];
            const selectedDimensionMaxValues = persistedData?.maxValues;
            /** 2. for each rowData/dimensions get the corresponding options */
            selectedDimensionMinValues.forEach(function (_, index) {
                const gridDimensionValuesOptions = (0,_multidimensional_helper_fc8fbe0e_js__WEBPACK_IMPORTED_MODULE_29__.g)(multidimensionalInfo, undefined, selectedDimension);
                gridDimensionMinValuesOptions = (0,_multidimensional_helper_fc8fbe0e_js__WEBPACK_IMPORTED_MODULE_29__.c)(gridDimensionValuesOptions.startValueOptions);
                gridDimensionMaxValuesOptions = (0,_multidimensional_helper_fc8fbe0e_js__WEBPACK_IMPORTED_MODULE_29__.c)(gridDimensionValuesOptions.endValueOptions);
                const selectedMinDimensionOption = selectedDimensionMinValues?.[index];
                const selectedMaxDimensionOption = selectedDimensionMaxValues?.[index];
                /** 3. select the options similiar to the persisted value */
                widgetData.push((0,_multidimensional_helper_fc8fbe0e_js__WEBPACK_IMPORTED_MODULE_29__.c)({
                    id: index,
                    MinValue: { options: gridDimensionMinValuesOptions, value: selectedMinDimensionOption },
                    MaxValue: { options: gridDimensionMaxValuesOptions, value: selectedMaxDimensionOption }
                }));
            }, this);
        }
        catch (e) {
            widgetData.push({
                id: 0,
                MinValue: { options: [], value: undefined },
                MaxValue: { options: [], value: undefined }
            });
        }
        return widgetData;
    }
    setWidgetstate() {
        const intervalRangesGridLayout = {
            MinValue: {
                label: this.strings.minValue,
                uiType: _interfaces_d0c68944_js__WEBPACK_IMPORTED_MODULE_7__.G.select,
                style: HTMLClasses$8.minValueColumn
            },
            MaxValue: {
                label: this.strings.maxValue,
                uiType: _interfaces_d0c68944_js__WEBPACK_IMPORTED_MODULE_7__.G.select,
                style: HTMLClasses$8.maxValueColumn
            }
        };
        const isDimensionStdTime = this.selectedDimension === "StdTime";
        const aggregationOptions = isDimensionStdTime
            ? aggregationDefinitionOptionsForStdTime
            : aggregationDefinitionOptionsDefault;
        this.aggregationDefinitionOptions = Object.keys(aggregationOptions).map((option) => ({
            key: option,
            label: this.strings[aggregationDefinitionLabels[option]]
        }));
        let gridLayout, gridOptions;
        switch (this.aggregationDefinition) {
            case aggregationDefinitionOptions.INTERVAL_RANGES:
                gridLayout = intervalRangesGridLayout;
                gridOptions = this.createIntervalRangesDataObject(this.multidimensionalData, this.selectedDimension, this.gridLayoutState);
                break;
            case aggregationDefinitionOptions.INTERVAL_KEYWORD:
                // if dimension is changed to "StdTime" while user is in "INTERVAL_KEYWORD" option chage to "ALL"
                if (!isDimensionStdTime) {
                    // invalid state
                    this.aggregationDefinition = aggregationDefinitionOptions.ALL;
                }
            default:
                // exit function
                return;
        }
        this.gridSchema = {
            ...this.gridSchema,
            gridLayout,
            gridOptions
        };
    }
    //--------------------------------------------------------------------------
    //
    //  Render
    //
    //--------------------------------------------------------------------------
    renderByRangesGrid() {
        return ((0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { alignment: "start", scale: _ui_utils_928a4096_js__WEBPACK_IMPORTED_MODULE_4__.U.Scale, layout: "default", ref: (e) => {
                this.uiElements.intervalRangesGridContainer = e;
                const intervalRangesGridArgHelpClickHandler = this.otherOptions.onHelpActionClick({
                    heading: this.uiElements.intervalRangesGridLabel,
                    referenceElement: this.uiElements.intervalRangesGridContainer,
                    helpTextID: this.otherOptions.helpTextIDs?.ranges
                });
                this.helpActionClickEventHandlers.set(HelpClickHandlerKeys$1.intervalRangesGridArgHelpClickHandler, intervalRangesGridArgHelpClickHandler);
            } }, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("rfx-label", { label: this.uiElements.intervalRangesGridLabel, hideHelp: true, onRfxLabelHelpActionClick: () => this.helpActionClickEventHandlers?.get(HelpClickHandlerKeys$1.intervalRangesGridArgHelpClickHandler)() }), (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("rfx-grid", { class: HTMLClasses$8.grid, hasHeader: this.gridSchema.hasHeader, canAdd: this.gridSchema.canAdd, hasIdColumn: this.gridSchema.hasIdColumn, gridLayout: this.gridSchema.gridLayout, gridOptions: this.gridSchema.gridOptions, hasBorder: this.gridSchema.hasBorder, canRemove: this.gridSchema.canRemove, onRfxGridOptionChange: this.updateByRangeGridValue })));
    }
    renderIntervalKeywordForm() {
        return ((0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { alignment: "start", scale: _ui_utils_928a4096_js__WEBPACK_IMPORTED_MODULE_4__.U.Scale, layout: "default", ref: (e) => {
                this.uiElements.esriTimeIntervalKeywordContainer = e;
                const esriTimeIntervalKeywordHelpClickHandler = this.otherOptions.onHelpActionClick({
                    heading: this.uiElements.dimensionUnitLabel,
                    referenceElement: this.uiElements.esriTimeIntervalKeywordContainer,
                    helpTextID: this.otherOptions.helpTextIDs?.keywordinterval
                });
                this.helpActionClickEventHandlers.set(HelpClickHandlerKeys$1.esriTimeIntervalKeywordHelpClickHandler, esriTimeIntervalKeywordHelpClickHandler);
            } }, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("rfx-label", { label: this.uiElements.dimensionUnitLabel, onRfxLabelHelpActionClick: () => this.helpActionClickEventHandlers?.get(HelpClickHandlerKeys$1.esriTimeIntervalKeywordHelpClickHandler)() }), (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("rfx-dtex-common-select", { options: this.esriTimeIntervalKeywordOptions, value: this.value?.intervalKeyword, onRfxArgumentChange: ({ detail: { value } }) => {
                // intentionally done to not cause a rerender
                this.value.intervalKeyword = value;
            } })));
    }
    renderIntervalValueForm() {
        const isDimensionStdTime = this.selectedDimension === "StdTime";
        return ((0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { alignment: "start", scale: _ui_utils_928a4096_js__WEBPACK_IMPORTED_MODULE_4__.U.Scale, layout: "default", ref: (e) => {
                this.uiElements.valueIntervalContainer = e;
                const valueIntervalHelpClickHandler = this.otherOptions.onHelpActionClick({
                    heading: this.uiElements.valueIntervalLabel,
                    referenceElement: this.uiElements.valueIntervalContainer,
                    helpTextID: this.otherOptions.helpTextIDs?.valueinterval
                });
                this.helpActionClickEventHandlers.set(HelpClickHandlerKeys$1.valueIntervalHelpClickHandler, valueIntervalHelpClickHandler);
            } }, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("rfx-label", { label: this.uiElements.valueIntervalLabel, onRfxLabelHelpActionClick: () => this.helpActionClickEventHandlers?.get(HelpClickHandlerKeys$1.valueIntervalHelpClickHandler)() }), (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-input-number", { value: this.value?.intervalValue, onCalciteInputNumberChange: (event) => (this.value.intervalValue = Number.parseInt(event.target.value, 10)), scale: _ui_utils_928a4096_js__WEBPACK_IMPORTED_MODULE_4__.U.Scale })), isDimensionStdTime ? ((0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { alignment: "start", scale: _ui_utils_928a4096_js__WEBPACK_IMPORTED_MODULE_4__.U.Scale, layout: "default", ref: (e) => {
                this.uiElements.dimensionUnitContainer = e;
                const unitArgHelpClickHandler = this.otherOptions.onHelpActionClick({
                    heading: this.uiElements.dimensionUnitLabel,
                    referenceElement: this.uiElements.dimensionUnitContainer,
                    helpTextID: this.otherOptions.helpTextIDs?.unit
                });
                this.helpActionClickEventHandlers.set(HelpClickHandlerKeys$1.unitArgHelpClickHandler, unitArgHelpClickHandler);
            } }, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("rfx-label", { label: this.uiElements.dimensionUnitLabel, onRfxLabelHelpActionClick: () => this.helpActionClickEventHandlers?.get(HelpClickHandlerKeys$1.unitArgHelpClickHandler)() }), (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("rfx-dtex-common-select", { options: this.dimensionUnitsOptions, value: this.value?.units, onRfxArgumentChange: ({ detail: { value } }) => {
                // intentionally done to not cause a rerender
                this.value.units = value;
            } }))) : null));
    }
    renderAggregationDefinitionEditorLayout(aggregationDefinition) {
        switch (aggregationDefinition) {
            case aggregationDefinitionOptions.INTERVAL_VALUE:
                return this.renderIntervalValueForm();
            case aggregationDefinitionOptions.INTERVAL_RANGES:
                return this.renderByRangesGrid();
            case aggregationDefinitionOptions.INTERVAL_KEYWORD:
                return this.renderIntervalKeywordForm();
            case aggregationDefinitionOptions.ALL:
            default:
                return null;
        }
    }
    render() {
        const aggregationDefinitionEditorLayout = this.renderAggregationDefinitionEditorLayout(this.aggregationDefinition);
        return ((0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("rfx-dtex-raster-dimension-select", { layerArg: this.layerArg, value: this.selectedDimension, onRfxArgumentChange: this.onRasterdimensionSelectChange }), (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { alignment: "start", scale: _ui_utils_928a4096_js__WEBPACK_IMPORTED_MODULE_4__.U.Scale, layout: "default", ref: (e) => {
                this.uiElements.aggregationDefinitionContainer = e;
            } }, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("rfx-label", { label: this.uiElements.aggregationDefinitionLabel, onRfxLabelHelpActionClick: () => this.helpActionClickEventHandlers?.get(HelpClickHandlerKeys$1.aggregationDefinitionTypeHelpClickHandler)() }), (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("rfx-dtex-common-select", { options: this.aggregationDefinitionOptions, value: this.aggregationDefinition, onRfxArgumentChange: this.onDimensionDefinitionChange })), aggregationDefinitionEditorLayout));
    }
    static get assetsDirs() { return ["t9n"]; }
    get hostElement() { return (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.a)(this); }
};
RFxAggregationDefinitionEditor.style = rfxDtexAggregationDefinitionEditorCss;

const component$3 = "rfx-dtex-arg-slider";
const HTMLClasses$7 = {
    slider: `${component$3}__slider`,
    input: `${component$3}__input`
};

const rfxDtexArgSliderCss = ":root{--calcite-color-brand:#007ac2;--calcite-color-brand-hover:#00619b;--calcite-color-brand-press:#004874;--calcite-color-status-info:#00619b;--calcite-color-status-success:#35ac46;--calcite-color-status-warning:#edd317;--calcite-color-status-danger:#d83020;--calcite-color-status-danger-hover:#a82b1e;--calcite-color-status-danger-press:#7c1d13;--calcite-color-background:#f8f8f8;--calcite-color-foreground-1:#ffffff;--calcite-color-foreground-2:#f3f3f3;--calcite-color-foreground-3:#eaeaea;--calcite-color-text-1:#151515;--calcite-color-text-2:#4a4a4a;--calcite-color-text-3:#6a6a6a;--calcite-color-text-inverse:#ffffff;--calcite-color-text-link:#00619b;--calcite-color-border-1:#cacaca;--calcite-color-border-2:#d4d4d4;--calcite-color-border-3:#dfdfdf;--calcite-color-border-input:#949494;--rfx-quarter-spacing:0.25rem;--rfx-half-spacing:0.5rem;--rfx-three-quarter-spacing:0.75rem;--rfx-full-spacing:1rem;--rfx-component-default-width:100%;--rfx-ui-border-input:var(--calcite-color-border-2);--rfx-popover-content-min-height:30vh;--rfx-popover-content-max-height:60vh;--rfx-popover-content-height:45vh;--rfx-widget-content-height:30vh}.rfx-dtex-arg-slider__slider{width:-webkit-fill-available}.rfx-dtex-arg-slider__input{width:40%}";

const RFxArgSlider = class {
    constructor(hostRef) {
        (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.rfxArgumentChange = (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "rfxArgumentChange", 7);
        //--------------------------------------------------------------------------
        //
        //  Private Methods
        //
        //--------------------------------------------------------------------------
        this._handleSliderChange = (e) => {
            const element = e.target;
            this.value = element.value;
            this.rfxArgumentChange.emit({ value: this.value });
        };
        /**
         * @category Event Handler
         * Called when the calcite input value changes to a valid number
         * @param {CustomEvent} event custom calciteInputInput event
         */
        this.handleInputChange = (event) => {
            // We are stopping the propagation of this change event as we emit a customEvent instead.
            event.stopPropagation();
            if (event.target !== null) {
                const newValueString = (event?.target).value;
                const value = (0,_sanitize_number_d84114f7_js__WEBPACK_IMPORTED_MODULE_17__.p)(newValueString);
                if (value > this.max || value < this.min) {
                    // validation
                    return;
                }
                this.value = value;
                this.rfxArgumentChange.emit({ value: this.value });
            }
        };
        this.min = 0;
        this.max = 100;
        this.value = 0;
        this.step = 1;
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    render() {
        const ticks = (this.max - this.min) / 10;
        return ((0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { scale: _ui_utils_928a4096_js__WEBPACK_IMPORTED_MODULE_4__.U.Scale, layout: "inline" }, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-slider", { ref: (el) => {
                el.classList.add(`${HTMLClasses$7.slider}`);
            }, max: this.max, min: this.min, ticks: ticks, value: this.value, step: this.step, onCalciteSliderChange: this._handleSliderChange }), (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-input", { ref: (el) => {
                el.classList.add(`${HTMLClasses$7.input}`);
            }, numberButtonType: "none", type: "number", value: (0,_sanitize_number_d84114f7_js__WEBPACK_IMPORTED_MODULE_17__.s)(this.value), step: "any", min: this.min, max: this.max, scale: _ui_utils_928a4096_js__WEBPACK_IMPORTED_MODULE_4__.U.Scale, groupSeparator: true, onCalciteInputChange: this.handleInputChange })));
    }
};
RFxArgSlider.style = rfxDtexArgSliderCss;

const RFxBandIndexPicker = class {
    constructor(hostRef) {
        (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.rfxArgumentChange = (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "rfxArgumentChange", 7);
        this.allowCustomValues = false;
        this.getBandIndexs = (rasterInfo) => {
            const bandCount = rasterInfo.bandCount || 0;
            // Returns ["1", "2", "3"] if bandCount is 3
            return Array.from({ length: bandCount }, (_, i) => this.formatValue(i));
        };
        this.parseFormatterValue = (value) => {
            return Number(value) - 1;
        };
        // bandCount is 0 indexed, but shown to the user as 1 indexed
        this.formatValue = (value) => {
            return `${value + 1}`;
        };
        this.handleBandIndexSelectChange = (e) => {
            // We are stopping the propagation of this change event as we emit a customEvent instead.
            e.stopPropagation();
            const element = e.target;
            this.value = this.parseFormatterValue(element.value);
            this.rfxArgumentChange.emit({ value: this.value });
        };
        this.layerArg = undefined;
        this.value = undefined;
        this.options = [];
        this.bandIndexs = [];
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    connectedCallback() {
        this.layerArg?.input?.addEventListener("rfxArgumentChange", this.setBandIndexOptions.bind(this));
    }
    componentWillLoad() {
        this.setBandIndexOptions();
    }
    render() {
        return ((0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("rfx-dtex-common-select", { options: this.bandIndexs, value: this.formatValue(this.value), allowCustomValues: this.allowCustomValues, onRfxArgumentChange: this.handleBandIndexSelectChange })));
    }
    //--------------------------------------------------------------------------
    //
    //  Private Methods
    //
    //--------------------------------------------------------------------------
    async setBandIndexOptions() {
        let layerBandIndexs = [];
        try {
            const layer = await this.layerArg?.input.getSelectedLayer();
            if (!layer) {
                throw new Error("No layer selected");
            }
            const rasterInfo = layer.rasterInfo;
            if (rasterInfo === undefined) {
                throw new Error("Layer does not have rasterInfo");
            }
            layerBandIndexs = this.getBandIndexs(rasterInfo);
            this.allowCustomValues = false;
        }
        catch (error) {
            // handle error
            // console.warn("An issue occurred while setting Band Name options:", error);
            // fallback Option
            layerBandIndexs = ["1"];
            //if layer value doesnot exists make textbox editable and populate with the value in RFT
            this.allowCustomValues = true;
        }
        finally {
            this.bandIndexs = layerBandIndexs.map((bandIndex) => ({
                label: bandIndex,
                key: bandIndex
            }));
        }
    }
};

const RFxBandNamePicker = class {
    constructor(hostRef) {
        (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.rfxArgumentChange = (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "rfxArgumentChange", 7);
        this.allowCustomValues = false;
        this.getBandNames = (rasterInfo) => {
            const bandProperties = rasterInfo?.keyProperties?.BandProperties;
            const bandCount = rasterInfo.bandCount || 0;
            if (!bandProperties || bandProperties.length !== bandCount) {
                // Returns ["Band_1", "Band_2", "Band_3"] if bandCount is 3
                return Array.from({ length: bandCount }, (_, i) => `Band_${i + 1}`);
            }
            return bandProperties.map((prop, index) => prop.BandName || `Band_${index + 1}`);
        };
        this.handleBandNameSelectChange = (e) => {
            // We are stopping the propagation of this change event as we emit a customEvent instead.
            e.stopPropagation();
            const element = e.target;
            this.value = element.value;
            this.rfxArgumentChange.emit({ value: this.value });
        };
        this.layerArg = undefined;
        this.value = undefined;
        this.options = [];
        this.bandNames = [];
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    connectedCallback() {
        this.layerArg?.input?.addEventListener("rfxArgumentChange", this.setBandNameOptions.bind(this));
    }
    componentWillLoad() {
        this.setBandNameOptions();
    }
    render() {
        return ((0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("rfx-dtex-common-select", { options: this.bandNames, value: this.value, allowCustomValues: this.allowCustomValues, onRfxArgumentChange: this.handleBandNameSelectChange })));
    }
    //--------------------------------------------------------------------------
    //
    //  Private Methods
    //
    //--------------------------------------------------------------------------
    async setBandNameOptions() {
        let layerBandNames = [];
        try {
            const layer = await this.layerArg?.input.getSelectedLayer();
            if (!layer) {
                throw new Error("No layer selected");
            }
            const rasterInfo = layer.rasterInfo;
            if (!rasterInfo) {
                throw new Error("Layer does not have rasterInfo");
            }
            layerBandNames = this.getBandNames(rasterInfo);
            this.allowCustomValues = false;
        }
        catch (error) {
            // handle error
            // console.warn("An issue occurred while setting Band Name options:", error);
            // fallback Option
            layerBandNames = ["Band_1"];
            //if layer value doesnot exists make textbox editable and populate with the value in RFT
            this.allowCustomValues = true;
        }
        finally {
            this.bandNames = layerBandNames.map((bandName) => ({
                label: bandName,
                key: bandName
            }));
        }
    }
};

const component$2 = "rfx-dtex-linear-unit";
const HTMLClasses$6 = {
    containerDiv: `${component$2}__container-div`,
    unitDiv: `${component$2}__unit-div`,
    valueDiv: `${component$2}__value-div`
};

const rfxDtexLinearUnitCss = ":root{--calcite-color-brand:#007ac2;--calcite-color-brand-hover:#00619b;--calcite-color-brand-press:#004874;--calcite-color-status-info:#00619b;--calcite-color-status-success:#35ac46;--calcite-color-status-warning:#edd317;--calcite-color-status-danger:#d83020;--calcite-color-status-danger-hover:#a82b1e;--calcite-color-status-danger-press:#7c1d13;--calcite-color-background:#f8f8f8;--calcite-color-foreground-1:#ffffff;--calcite-color-foreground-2:#f3f3f3;--calcite-color-foreground-3:#eaeaea;--calcite-color-text-1:#151515;--calcite-color-text-2:#4a4a4a;--calcite-color-text-3:#6a6a6a;--calcite-color-text-inverse:#ffffff;--calcite-color-text-link:#00619b;--calcite-color-border-1:#cacaca;--calcite-color-border-2:#d4d4d4;--calcite-color-border-3:#dfdfdf;--calcite-color-border-input:#949494;--rfx-quarter-spacing:0.25rem;--rfx-half-spacing:0.5rem;--rfx-three-quarter-spacing:0.75rem;--rfx-full-spacing:1rem;--rfx-component-default-width:100%;--rfx-ui-border-input:var(--calcite-color-border-2);--rfx-popover-content-min-height:30vh;--rfx-popover-content-max-height:60vh;--rfx-popover-content-height:45vh;--rfx-widget-content-height:30vh}.rfx-dtex-linear-unit__container-div{display:flex;justify-content:space-between}.rfx-dtex-linear-unit__unit-div{width:55%}.rfx-dtex-linear-unit__value-div{width:40%}";

const RFxLinearUnit = class {
    constructor(hostRef) {
        (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.rfxArgumentChange = (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "rfxArgumentChange", 7);
        //--------------------------------------------------------------------------
        //
        //  Private Methods
        //
        //--------------------------------------------------------------------------
        /**
         * function called on unit select change
         * @param e Event from Unit selector
         */
        this.handleUnitSelectChange = (e) => {
            // We are stopping the propagation of this change event as we emit a customEvent instead.
            e.stopPropagation();
            const element = e.target;
            this.unitObject.unit = element.value;
            this.emitValueChangeEvent();
        };
        /**
         * function caled when the unit value is changed
         * @param e event from unit value input
         */
        this.handleUnitValueChange = (e) => {
            // We are stopping the propagation of this change event as we emit a customEvent instead.
            e.stopPropagation();
            const element = e.target;
            this.unitObject.value = element.value;
            this.emitValueChangeEvent();
        };
        this.value = undefined;
        this.unitOptions = [];
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    componentWillLoad() {
        if (this.value !== undefined) {
            const [value, unit] = this.value.split(" ");
            this.unitObject = { unit, value };
        }
        else {
            this.unitObject = { unit: this.unitOptions[0].key.toString(), value: undefined };
        }
    }
    /**
     * called to emit a custom event when value or unit is changed
     */
    emitValueChangeEvent() {
        this.value = this.unitObject.value + " " + this.unitObject.unit;
        this.rfxArgumentChange.emit({ value: this.value });
    }
    render() {
        return ((0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: HTMLClasses$6.containerDiv }, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: HTMLClasses$6.valueDiv }, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-input-number", { scale: _ui_utils_928a4096_js__WEBPACK_IMPORTED_MODULE_4__.U.Scale, alignment: "start", "number-button-type": "vertical", min: 0, max: 1000, step: 1, value: this.unitObject?.value, onCalciteInputNumberChange: this.handleUnitValueChange })), (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: HTMLClasses$6.unitDiv }, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("rfx-dtex-common-select", { options: this.unitOptions, onRfxArgumentChange: this.handleUnitSelectChange, value: this.unitObject?.unit }))));
    }
};
RFxLinearUnit.style = rfxDtexLinearUnitCss;

const dimensionDefinitionOptions = {
    ALL: "ALL",
    BY_VALUES: "BY_VALUES",
    BY_RANGES: "BY_RANGES",
    BY_ITERATION: "BY_ITERATION",
    BY_INTERVAL: "BY_INTERVAL",
    BY_TARGET_RASTER: "BY_TARGET_RASTER"
};
const dimensionDefinitionOptionsForIRBD = [
    dimensionDefinitionOptions.BY_VALUES,
    dimensionDefinitionOptions.BY_INTERVAL,
    dimensionDefinitionOptions.BY_TARGET_RASTER
];
const dimensionDefinitionOptionsForMF = [
    dimensionDefinitionOptions.ALL,
    dimensionDefinitionOptions.BY_VALUES,
    dimensionDefinitionOptions.BY_RANGES,
    dimensionDefinitionOptions.BY_ITERATION
];
const dimensionDefinitionLabels = {
    ALL: "mdimDefTypeAll",
    BY_VALUES: "mdimDefTypeByValues",
    BY_RANGES: "mdimDefTypeByRanges",
    BY_ITERATION: "mdimDefTypeByIteration",
    BY_INTERVAL: "mdimDefTypeByInterval",
    BY_TARGET_RASTER: "mdimDefTypeByTargetRaster"
};
const esriTimeUnits = {
    HOURS: "HOURS",
    DAYS: "DAYS",
    WEEKS: "WEEKS",
    MONTHS: "MONTHS",
    YEARS: "YEARS"
};
const esriTimeUnitLabels = {
    HOURS: "esriTimeUnitsHours",
    DAYS: "esriTimeUnitsDays",
    WEEKS: "esriTimeUnitsWeeks",
    MONTHS: "esriTimeUnitsMonths",
    YEARS: "esriTimeUnitsYears"
};
const component$1 = "rfx-dtex-multidimensional-definition-editor";
const HTMLClasses$5 = {
    grid: `${component$1}__grid`,
    dimensionColumn: `${component$1}__dimension-column`,
    valuesColumn: `${component$1}__values-column`,
    minValueColumn: `${component$1}__minValue-column`,
    maxValueColumn: `${component$1}__maxValue-column`
};
const HelpClickHandlerKeys = {
    dimensionDefinitionArgHelpClickHandler: "dimensionDefinitionArgHelpClickHandler",
    byValuesGridArgHelpClickHandler: "byValuesGridArgHelpClickHandler",
    byRangesGridArgHelpClickHandler: "byRangesGridArgHelpClickHandler",
    dimensionArgHelpClickHandler: "dimensionArgHelpClickHandler",
    startOfArgHelpClickHandler: "startOfArgHelpClickHandler",
    endOfArgHelpClickHandler: "endOfArgHelpClickHandler",
    stepArgHelpClickHandler: "stepArgHelpClickHandler",
    unitArgHelpClickHandler: "unitArgHelpClickHandler",
    targetRasterArgHelpClickHandler: "targetRasterArgHelpClickHandler"
};

const rfxDtexMultidimensionalDefinitionEditorCss = ":root{--calcite-color-brand:#007ac2;--calcite-color-brand-hover:#00619b;--calcite-color-brand-press:#004874;--calcite-color-status-info:#00619b;--calcite-color-status-success:#35ac46;--calcite-color-status-warning:#edd317;--calcite-color-status-danger:#d83020;--calcite-color-status-danger-hover:#a82b1e;--calcite-color-status-danger-press:#7c1d13;--calcite-color-background:#f8f8f8;--calcite-color-foreground-1:#ffffff;--calcite-color-foreground-2:#f3f3f3;--calcite-color-foreground-3:#eaeaea;--calcite-color-text-1:#151515;--calcite-color-text-2:#4a4a4a;--calcite-color-text-3:#6a6a6a;--calcite-color-text-inverse:#ffffff;--calcite-color-text-link:#00619b;--calcite-color-border-1:#cacaca;--calcite-color-border-2:#d4d4d4;--calcite-color-border-3:#dfdfdf;--calcite-color-border-input:#949494;--rfx-quarter-spacing:0.25rem;--rfx-half-spacing:0.5rem;--rfx-three-quarter-spacing:0.75rem;--rfx-full-spacing:1rem;--rfx-component-default-width:100%;--rfx-ui-border-input:var(--calcite-color-border-2);--rfx-popover-content-min-height:30vh;--rfx-popover-content-max-height:60vh;--rfx-popover-content-height:45vh;--rfx-widget-content-height:30vh}.rfx-dtex-multidimensional-definition-editor__grid table{width:100%;table-layout:fixed}.rfx-dtex-multidimensional-definition-editor__grid table thead tr th:last-child{width:7%}.rfx-dtex-multidimensional-definition-editor__grid table tbody tr td:last-child{width:7%}.rfx-dtex-multidimensional-definition-editor__dimension-column{width:30%}.rfx-dtex-multidimensional-definition-editor__values-column{width:63%}.rfx-dtex-multidimensional-definition-editor__minValue-column{width:30%}.rfx-dtex-multidimensional-definition-editor__maxValue-column{width:30%}";

const RFxMultidimensionalDefinitionEditor = class {
    constructor(hostRef) {
        (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.rfxArgumentChange = (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "rfxArgumentChange", 7);
        /**
         * The reference element for the rasterVariables select button.
         * @category Private
         */
        this.uiElements = {
            dimensionDefinitionLabel: undefined,
            dimensionDefinitionContainer: undefined,
            byValuesGridLabel: undefined,
            byValuesGridContainer: undefined,
            byRangesGridLabel: undefined,
            byRangesGridContainer: undefined,
            dimensionLabel: undefined,
            dimensionContainer: undefined,
            startOfLabel: undefined,
            startOfContainer: undefined,
            endOfLabel: undefined,
            endOfContainer: undefined,
            stepLabel: undefined,
            stepContainer: undefined,
            dimensionUnitLabel: undefined,
            dimensionUnitContainer: undefined,
            byTargetRasterLabel: undefined,
            byTargetRasterContainer: undefined
        };
        /**
         * Stores event handlers for help action click, stored in connected callback to avoid
         * fetching function on each render ( to avoid common bad practice )
         */
        this.helpActionClickEventHandlers = new Map();
        this.multidimensionalData = undefined;
        this.timeInfoData = undefined;
        this.gridLayoutState = undefined;
        this.dimensionUnitsOptions = [];
        this.defaults = {
            stepValue: 3,
            units: esriTimeUnits.HOURS
        };
        //--------------------------------------------------------------------------
        //
        //  Private Methods
        //
        //--------------------------------------------------------------------------
        this.hanldeLayerInputchange = async () => {
            // reset widget values
            this.selectedVariables = [];
            this.value = undefined;
            this.gridLayoutState = undefined;
            await this.setLayerData();
        };
        this.onRasterVariablesListChange = (e) => {
            e.stopPropagation();
            const { detail: { value } } = e;
            this.selectedVariables = value;
        };
        this.onDimensionDefinitionChange = (e) => {
            e.stopPropagation();
            const { detail: { value } } = e;
            this.value = undefined;
            this.gridLayoutState = undefined;
            this.dimensionDefinition = value;
        };
        this.updateByValueGridValue = (event) => {
            const { detail: { gridOptions } } = event;
            if ((0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_8__.i)(gridOptions)) {
                return;
            }
            const unfilteredValue = gridOptions.reduce((acc, gridOption) => {
                const fields = Object.keys(gridOption);
                const values = fields.map((field) => gridOption[field].value);
                // filter out id column value
                values.shift();
                // if all values are not set return accumulator
                if (values.length !== fields.length - 1) {
                    return acc;
                }
                const [dimensionValue, valueValue] = values;
                acc.dimensions.push(dimensionValue);
                acc.values.push(valueValue);
                return acc;
            }, { dimensions: [], values: [] });
            const value = gridOptions.reduce((acc, gridOption) => {
                const fields = Object.keys(gridOption);
                // filter out all falsy values
                const values = fields.map((field) => gridOption[field].value).filter(Boolean);
                // if all values are not set return accumulator
                if (values.length !== fields.length - 1) {
                    return acc;
                }
                const [dimensionValue, valueValue] = values;
                acc.dimensions.push(dimensionValue);
                acc.values.push(valueValue);
                return acc;
            }, { dimensions: [], values: [] });
            this.gridLayoutState = unfilteredValue;
            this.value = value;
        };
        this.updateByRangeGridValue = (event) => {
            const { detail: { gridOptions } } = event;
            if ((0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_8__.i)(gridOptions)) {
                return;
            }
            const unfilteredValue = gridOptions.reduce((acc, gridOption) => {
                const fields = Object.keys(gridOption);
                const values = fields.map((field) => gridOption[field].value);
                // filter out id column value
                values.shift();
                // if all values are not set return accumulator
                if (values.length !== fields.length - 1) {
                    return acc;
                }
                const [dimensionValue, minValue, maxValue] = values;
                acc.dimensions.push(dimensionValue);
                acc.minValues.push(minValue);
                acc.maxValues.push(maxValue);
                return acc;
            }, { dimensions: [], minValues: [], maxValues: [] });
            const value = gridOptions.reduce((acc, gridOption) => {
                const fields = Object.keys(gridOption);
                // filter out all falsy values
                const values = fields.map((field) => gridOption[field].value).filter(Boolean);
                // if all values are not set return accumulator
                if (values.length !== fields.length - 1) {
                    return acc;
                }
                const [dimensionValue, minValue, maxValue] = values;
                acc.dimensions.push(dimensionValue);
                acc.minValues.push(minValue);
                acc.maxValues.push(maxValue);
                return acc;
            }, { dimensions: [], minValues: [], maxValues: [] });
            this.gridLayoutState = unfilteredValue;
            this.value = value;
        };
        this.selectedVariables = undefined;
        this.dimensionDefinitionOptions = [];
        this.dimensionDefinition = undefined;
        this.gridSchema = {
            gridLayout: {},
            gridOptions: [],
            hasBorder: true,
            hasHeader: true,
            canAdd: true,
            canRemove: true,
            hasIdColumn: false
        };
        this.layerArg = undefined;
        this.otherOptions = undefined;
        this.domainAttributes = undefined;
        this.defaultValue = undefined;
        this.rfxBrowseLayerClick = undefined;
        this.value = undefined;
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    connectedCallback() {
        this.layerArg?.input?.addEventListener("rfxArgumentChange", this.hanldeLayerInputchange);
    }
    async componentWillLoad() {
        ({ strings: this.strings, dir: this.direction } = await (0,_localization_helper_4819b67d_js__WEBPACK_IMPORTED_MODULE_3__.b)(this.hostElement, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.g)(`.`)));
        const isIRDB = this.isInterpolateByDimFunction;
        this.uiElements.dimensionDefinitionLabel = this.strings.dimensionDefinition;
        this.uiElements.byValuesGridLabel = this.strings.values;
        this.uiElements.byRangesGridLabel = this.strings.ranges;
        this.uiElements.dimensionLabel = this.strings.dimension;
        this.uiElements.startOfLabel = isIRDB
            ? this.strings.intervalStart
            : this.strings.startOfFirstIteration;
        this.uiElements.endOfLabel = isIRDB
            ? this.strings.intervalEnd
            : this.strings.endOfFirstIteration;
        this.uiElements.stepLabel = this.strings.step;
        this.uiElements.dimensionUnitLabel = this.strings.dimensionUnit;
        this.uiElements.byTargetRasterLabel = this.strings.targetRaster;
        (0,_multidimensional_helper_fc8fbe0e_js__WEBPACK_IMPORTED_MODULE_29__.e)(this.strings);
        await this.setInitialState();
    }
    componentWillRender() {
        this.initGrid();
        this.setWidgetValue();
    }
    componentDidLoad() {
        this.attachHelpClickEventHandlers();
    }
    disconnectedCallback() { }
    get isInterpolateByDimFunction() {
        // Same domaintype is used across two functions
        // the following is used to differentiate between the two.
        return this.domainAttributes === "interpolateByDim";
    }
    async setLayerData() {
        const layer = await this.layerArg?.input.getSelectedLayer();
        if ((0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_8__.i)(layer)) {
            return;
        }
        const mutlidimensionalInfo = layer.type === "imagery-tile"
            ? layer.rasterInfo.multidimensionalInfo
            : layer.multidimensionalInfo;
        this.multidimensionalData = (0,_multidimensional_helper_fc8fbe0e_js__WEBPACK_IMPORTED_MODULE_29__.c)(mutlidimensionalInfo);
        const timeInfo = layer.timeInfo?.toJSON();
        const intervalInfo = layer.timeInfo?.interval?.toJSON();
        this.timeInfoData = { ...timeInfo, interval: intervalInfo };
    }
    async setInitialState() {
        this.value = typeof this.value === "string" ? JSON.parse(this.value) : this.value;
        await this.setLayerData();
        this.dimensionDefinitionOptions = (this.isInterpolateByDimFunction
            ? dimensionDefinitionOptionsForIRBD
            : dimensionDefinitionOptionsForMF).map((option) => ({
            key: option,
            label: this.strings[dimensionDefinitionLabels[option]]
        }));
        this.dimensionUnitsOptions = Object.keys(esriTimeUnitLabels).map((esriTimeUnitLabel) => ({
            key: esriTimeUnitLabel,
            label: this.strings[esriTimeUnitLabels[esriTimeUnitLabel]]
        }));
        this.gridLayoutState = {
            dimensions: this.value?.dimensions ? [...this.value.dimensions, undefined] : undefined,
            values: this.value?.values ? [...this.value.values, undefined] : undefined,
            minValues: this.value?.minValues ? [...this.value.minValues, undefined] : undefined,
            maxValues: this.value?.maxValues ? [...this.value.maxValues, undefined] : undefined
        };
        this.dimensionDefinition =
            this.value?.definitionType ?? this.dimensionDefinitionOptions?.[0]?.key;
        this.selectedVariables = this.value?.variables ?? [];
    }
    setWidgetValue() {
        const widgetValue = {
            definitionType: this.dimensionDefinition,
            variables: this.selectedVariables
        };
        switch (widgetValue.definitionType) {
            case dimensionDefinitionOptions.BY_VALUES:
                widgetValue.dimensions = this.value?.dimensions;
                widgetValue.values = this.value?.values;
                break;
            case dimensionDefinitionOptions.BY_RANGES:
                widgetValue.dimensions = this.value?.dimensions;
                widgetValue.minValues = this.value?.minValues;
                widgetValue.maxValues = this.value?.maxValues;
                break;
            case dimensionDefinitionOptions.BY_ITERATION:
            case dimensionDefinitionOptions.BY_INTERVAL:
                widgetValue.dimension = this.value?.dimension;
                widgetValue.startValue = this.value?.startValue;
                widgetValue.endValue = this.value?.endValue;
                widgetValue.stepValue = this.value?.stepValue || this.defaults.stepValue;
                widgetValue.units = this.value?.units || this.defaults.units;
                break;
            case dimensionDefinitionOptions.BY_TARGET_RASTER:
                widgetValue.target = this.value?.target;
                break;
        }
        this.value = (0,_multidimensional_helper_fc8fbe0e_js__WEBPACK_IMPORTED_MODULE_29__.c)(widgetValue);
        this.rfxArgumentChange.emit({ value: this.value });
    }
    attachHelpClickEventHandlers() {
        const dimensionDefinitionArgHelpClickHandler = this.otherOptions.onHelpActionClick({
            heading: this.uiElements.dimensionDefinitionLabel,
            referenceElement: this.uiElements.dimensionDefinitionContainer,
            helpTextID: this.otherOptions.helpTextIDs?.dimensiondefinition
        });
        this.helpActionClickEventHandlers.set(HelpClickHandlerKeys.dimensionDefinitionArgHelpClickHandler, dimensionDefinitionArgHelpClickHandler);
        // TODO: identify performance impact;
        // help handlers for conditionally rendered UI elemnts are set during their creation.
    }
    createByValuesDataObject(multidimensionalInfo, selectedVariables, persistedData) {
        const widgetData = [];
        try {
            let selectedDimensions = [], selectedDimensionValues = [];
            const multidimensionalInfoVariables = multidimensionalInfo?.variables;
            if (!multidimensionalInfoVariables) {
                throw new Error("Layer does not have MultidimensionalInfo variables");
            }
            // this._validateVariables(multidimensionalInfoVariables, selectedVariables);
            /** 1. get all possible dimensions for the selected variables */
            const girdDimensionOptions = (0,_multidimensional_helper_fc8fbe0e_js__WEBPACK_IMPORTED_MODULE_29__.b)(multidimensionalInfo, selectedVariables).map((option) => ({
                key: option,
                label: option
            }));
            const hasPersistedData = Boolean(persistedData);
            if (hasPersistedData && persistedData.dimensions.length > 0) {
                /** if default value is already present */
                selectedDimensions = persistedData.dimensions;
                selectedDimensionValues = persistedData.values;
            }
            else {
                const firstDimension = girdDimensionOptions?.[0]?.key;
                selectedDimensions = [firstDimension];
            }
            /** 2. for each rowData/dimensions get the corresponding options */
            selectedDimensions.forEach((dimension, index) => {
                let selectedDimension = dimension;
                /** 2.5 check if dimension is present in the gridDimensionOptions */
                if (!(0,_multidimensional_helper_fc8fbe0e_js__WEBPACK_IMPORTED_MODULE_29__.i)(girdDimensionOptions, dimension)) {
                    /** if not present make the dimension as the first option */
                    selectedDimension = girdDimensionOptions[0]?.key;
                    /** happens when deselect a variable with that specific dimension */
                    /** the corresposnding value change is handled in makeDropdownSelection Function */
                    // return;
                }
                const gridDimensionValuesOptions = (0,_multidimensional_helper_fc8fbe0e_js__WEBPACK_IMPORTED_MODULE_29__.d)(multidimensionalInfo, selectedVariables, selectedDimension);
                const girdDimensionOptionsClone = (0,_multidimensional_helper_fc8fbe0e_js__WEBPACK_IMPORTED_MODULE_29__.c)(girdDimensionOptions);
                const selectedDimensionOption = selectedDimensionValues?.[index];
                widgetData.push((0,_multidimensional_helper_fc8fbe0e_js__WEBPACK_IMPORTED_MODULE_29__.c)({
                    id: index,
                    Dimension: { options: girdDimensionOptionsClone, value: dimension },
                    Value: { options: gridDimensionValuesOptions, value: selectedDimensionOption }
                }));
            });
        }
        catch (e) {
            widgetData.push({
                id: 0,
                Dimension: { options: [], value: undefined },
                Value: { options: [], value: undefined }
            });
        }
        return widgetData;
    }
    createByRangesDataObject(multidimensionalInfo, selectedVariables, persistedData) {
        const widgetData = [];
        try {
            let gridDimensionMinValuesOptions = [], gridDimensionMaxValuesOptions = [];
            const multidimensionalInfoVariables = multidimensionalInfo && multidimensionalInfo.variables;
            if (!multidimensionalInfoVariables) {
                throw new Error("Layer does not have MultidimensionalInfo variables");
            }
            // this._validateVariables(multidimensionalInfoVariables, this.selectedVariables);
            const hasPersistedData = Boolean(persistedData);
            /** 1. get all possible dimensions for the selected variables */
            // girdDimensionOptions = this._getDimensionNameOfVariables(multidimensionalInfo, selectedVariables);
            const girdDimensionOptions = (0,_multidimensional_helper_fc8fbe0e_js__WEBPACK_IMPORTED_MODULE_29__.b)(multidimensionalInfo, selectedVariables).map((option) => ({
                key: option,
                label: option
            }));
            let selectedDimensions, selectedDimensionMinValues, selectedDimensionMaxValues;
            if (hasPersistedData && persistedData.dimensions?.length > 0) {
                /** if default value is already present */
                selectedDimensions = persistedData.dimensions;
                selectedDimensionMinValues = persistedData.minValues;
                selectedDimensionMaxValues = persistedData.maxValues;
            }
            else {
                const firstDimension = girdDimensionOptions?.[0]?.key;
                selectedDimensions = [firstDimension];
            }
            /** 2. for each rowData/dimensions get the corresponding options */
            selectedDimensions.forEach(function (dimension, index) {
                let selectedDimension = dimension;
                /** 2.5 check if dimension is present in the gridDimensionOptions */
                if (!(0,_multidimensional_helper_fc8fbe0e_js__WEBPACK_IMPORTED_MODULE_29__.i)(girdDimensionOptions, dimension)) {
                    /** if not present make the dimension as the first option */
                    selectedDimension = girdDimensionOptions[0].key;
                    /** happens when deselect a variable with that specific dimension */
                    /** the corresposnding value change is handled in makeDropdownSelection Function */
                }
                const gridDimensionValuesOptions = (0,_multidimensional_helper_fc8fbe0e_js__WEBPACK_IMPORTED_MODULE_29__.g)(multidimensionalInfo, selectedVariables, selectedDimension);
                gridDimensionMinValuesOptions = (0,_multidimensional_helper_fc8fbe0e_js__WEBPACK_IMPORTED_MODULE_29__.c)(gridDimensionValuesOptions.startValueOptions);
                gridDimensionMaxValuesOptions = (0,_multidimensional_helper_fc8fbe0e_js__WEBPACK_IMPORTED_MODULE_29__.c)(gridDimensionValuesOptions.endValueOptions);
                const girdDimensionOptionsClone = (0,_multidimensional_helper_fc8fbe0e_js__WEBPACK_IMPORTED_MODULE_29__.c)(girdDimensionOptions);
                const selectedMinDimensionOption = selectedDimensionMinValues?.[index];
                const selectedMaxDimensionOption = selectedDimensionMaxValues?.[index];
                /** 3. select the options similiar to the persisted value */
                widgetData.push((0,_multidimensional_helper_fc8fbe0e_js__WEBPACK_IMPORTED_MODULE_29__.c)({
                    id: index,
                    Dimension: { options: girdDimensionOptionsClone, value: dimension },
                    MinValue: { options: gridDimensionMinValuesOptions, value: selectedMinDimensionOption },
                    MaxValue: { options: gridDimensionMaxValuesOptions, value: selectedMaxDimensionOption }
                }));
            }, this);
        }
        catch (e) {
            widgetData.push({
                id: 0,
                Dimension: { options: [], value: undefined },
                MinValue: { options: [], value: undefined },
                MaxValue: { options: [], value: undefined }
            });
        }
        return widgetData;
    }
    createByIterationDataObject(multidimensionalInfo, timeInfo, selectedVariables, persistedData) {
        let widgetData;
        try {
            const multidimensionalInfoVariables = multidimensionalInfo?.variables;
            if (!multidimensionalInfoVariables) {
                throw new Error("Layer does not have MultidimensionalInfo variables");
            }
            // this._validateVariables(multidimensionalInfoVariables, selectedVariables);
            /** 1. get all possible dimensions for the selected variables */
            const dimensionOptions = (0,_multidimensional_helper_fc8fbe0e_js__WEBPACK_IMPORTED_MODULE_29__.b)(multidimensionalInfo, selectedVariables).map((option) => ({
                key: option,
                label: option
            }));
            const selectedStartOfFirstIteration = persistedData?.startValue;
            const selectedEndOfFirstIteration = persistedData?.endValue;
            const selectedDimension = persistedData?.dimension || dimensionOptions[0]?.key;
            const stepValue = persistedData?.stepValue || timeInfo?.interval?.value;
            const units = persistedData?.units || timeInfo?.interval?.unit?.toUpperCase();
            const gridDimensionValuesOptions = (0,_multidimensional_helper_fc8fbe0e_js__WEBPACK_IMPORTED_MODULE_29__.g)(multidimensionalInfo, selectedVariables, selectedDimension);
            const startValueOptions = (0,_multidimensional_helper_fc8fbe0e_js__WEBPACK_IMPORTED_MODULE_29__.c)(gridDimensionValuesOptions.startValueOptions);
            const endValueOptions = (0,_multidimensional_helper_fc8fbe0e_js__WEBPACK_IMPORTED_MODULE_29__.c)(gridDimensionValuesOptions.endValueOptions);
            widgetData = {
                dimensionOptions,
                selectedDimension,
                startValue: startValueOptions,
                selectedStartOfFirstIteration,
                endValue: endValueOptions,
                selectedEndOfFirstIteration,
                stepValue,
                units
            };
        }
        catch (e) {
            widgetData = {
                dimensionOptions: [],
                selectedDimension: undefined,
                startValue: [],
                selectedStartOfFirstIteration: undefined,
                endValue: [],
                selectedEndOfFirstIteration: undefined,
                stepValue: 3,
                units: "HOURS"
            };
        }
        finally {
            // TODO: temp anti-pattern
            this.value.dimension = widgetData.selectedDimension;
        }
        return widgetData;
    }
    initGrid() {
        const isIRDB = this.isInterpolateByDimFunction;
        const byValuesGridLayout = {
            Dimension: {
                label: this.strings.dimension,
                uiType: _interfaces_d0c68944_js__WEBPACK_IMPORTED_MODULE_7__.G.select,
                style: HTMLClasses$5.dimensionColumn
            },
            Value: {
                label: this.strings.value,
                uiType: _interfaces_d0c68944_js__WEBPACK_IMPORTED_MODULE_7__.G.select,
                allowCustomValues: isIRDB,
                style: HTMLClasses$5.valuesColumn
            }
        };
        const byRangesGridLayout = {
            Dimension: {
                label: this.strings.dimension,
                uiType: _interfaces_d0c68944_js__WEBPACK_IMPORTED_MODULE_7__.G.select,
                style: HTMLClasses$5.dimensionColumn
            },
            MinValue: {
                label: this.strings.minValue,
                uiType: _interfaces_d0c68944_js__WEBPACK_IMPORTED_MODULE_7__.G.select,
                style: HTMLClasses$5.minValueColumn
            },
            MaxValue: {
                label: this.strings.maxValue,
                uiType: _interfaces_d0c68944_js__WEBPACK_IMPORTED_MODULE_7__.G.select,
                style: HTMLClasses$5.maxValueColumn
            }
        };
        let gridLayout, gridOptions;
        switch (this.dimensionDefinition) {
            case dimensionDefinitionOptions.BY_VALUES:
                gridLayout = byValuesGridLayout;
                gridOptions = this.createByValuesDataObject(this.multidimensionalData, this.selectedVariables, this.gridLayoutState);
                break;
            case dimensionDefinitionOptions.BY_RANGES:
                gridLayout = byRangesGridLayout;
                gridOptions = this.createByRangesDataObject(this.multidimensionalData, this.selectedVariables, this.gridLayoutState);
                break;
        }
        this.gridSchema = {
            ...this.gridSchema,
            gridLayout,
            gridOptions
        };
    }
    //--------------------------------------------------------------------------
    //
    //  Render
    //
    //--------------------------------------------------------------------------
    renderByValuesGrid() {
        return ((0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { alignment: "start", scale: _ui_utils_928a4096_js__WEBPACK_IMPORTED_MODULE_4__.U.Scale, layout: "default", ref: (e) => {
                this.uiElements.byValuesGridContainer = e;
                const byValuesGridArgHelpClickHandler = this.otherOptions.onHelpActionClick({
                    heading: this.uiElements.byValuesGridLabel,
                    referenceElement: this.uiElements.byValuesGridContainer,
                    helpTextID: this.otherOptions.helpTextIDs?.values
                });
                this.helpActionClickEventHandlers.set(HelpClickHandlerKeys.byValuesGridArgHelpClickHandler, byValuesGridArgHelpClickHandler);
            } }, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("rfx-label", { label: this.uiElements.byValuesGridLabel, onRfxLabelHelpActionClick: () => this.helpActionClickEventHandlers?.get(HelpClickHandlerKeys.byValuesGridArgHelpClickHandler)() }), (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("rfx-grid", { class: HTMLClasses$5.grid, hasHeader: this.gridSchema.hasHeader, canAdd: this.gridSchema.canAdd, hasIdColumn: this.gridSchema.hasIdColumn, gridLayout: this.gridSchema.gridLayout, gridOptions: this.gridSchema.gridOptions, hasBorder: this.gridSchema.hasBorder, canRemove: this.gridSchema.canRemove, onRfxGridOptionChange: this.updateByValueGridValue })));
    }
    renderByRangesGrid() {
        return ((0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { alignment: "start", scale: _ui_utils_928a4096_js__WEBPACK_IMPORTED_MODULE_4__.U.Scale, layout: "default", ref: (e) => {
                this.uiElements.byRangesGridContainer = e;
                const byRangesGridArgHelpClickHandler = this.otherOptions.onHelpActionClick({
                    heading: this.uiElements.byRangesGridLabel,
                    referenceElement: this.uiElements.byRangesGridContainer,
                    helpTextID: this.otherOptions.helpTextIDs?.ranges
                });
                this.helpActionClickEventHandlers.set(HelpClickHandlerKeys.byRangesGridArgHelpClickHandler, byRangesGridArgHelpClickHandler);
            } }, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("rfx-label", { label: this.uiElements.byRangesGridLabel, onRfxLabelHelpActionClick: () => this.helpActionClickEventHandlers?.get(HelpClickHandlerKeys.byRangesGridArgHelpClickHandler)() }), (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("rfx-grid", { class: HTMLClasses$5.grid, hasHeader: this.gridSchema.hasHeader, canAdd: this.gridSchema.canAdd, hasIdColumn: this.gridSchema.hasIdColumn, gridLayout: this.gridSchema.gridLayout, gridOptions: this.gridSchema.gridOptions, hasBorder: this.gridSchema.hasBorder, canRemove: this.gridSchema.canRemove, onRfxGridOptionChange: this.updateByRangeGridValue })));
    }
    renderbyTargetRasterForm() {
        return ((0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { alignment: "start", scale: _ui_utils_928a4096_js__WEBPACK_IMPORTED_MODULE_4__.U.Scale, layout: "default", ref: (e) => {
                this.uiElements.byTargetRasterContainer = e;
                const targetRasterArgHelpClickHandler = this.otherOptions.onHelpActionClick({
                    heading: this.uiElements.byTargetRasterLabel,
                    referenceElement: this.uiElements.byTargetRasterContainer,
                    helpTextID: this.otherOptions.helpTextIDs?.targetraster
                });
                this.helpActionClickEventHandlers.set(HelpClickHandlerKeys.targetRasterArgHelpClickHandler, targetRasterArgHelpClickHandler);
            } }, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("rfx-label", { label: this.uiElements.byTargetRasterLabel, onRfxLabelHelpActionClick: () => this.helpActionClickEventHandlers?.get(HelpClickHandlerKeys.targetRasterArgHelpClickHandler)() }), (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("rfx-dte-raster-input", { inputLayers: this.otherOptions.inputLayers, onRfxArgumentChange: (event) => {
                event.stopPropagation();
                const value = event.target.value;
                if ((0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_8__.i)(value)) {
                    return;
                }
                this.value = { ...this.value, target: value.url };
            }, rfxBrowseLayerClick: this.rfxBrowseLayerClick })));
    }
    renderByIterationForm() {
        const { dimensionOptions, selectedDimension, startValue, selectedStartOfFirstIteration, endValue, selectedEndOfFirstIteration, stepValue, units } = this.createByIterationDataObject(this.multidimensionalData, this.timeInfoData, this.selectedVariables, this.value);
        const isDimensionStdTime = selectedDimension === "StdTime";
        const isIRDB = this.isInterpolateByDimFunction;
        return ((0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { alignment: "start", scale: _ui_utils_928a4096_js__WEBPACK_IMPORTED_MODULE_4__.U.Scale, layout: "default", ref: (e) => {
                this.uiElements.dimensionContainer = e;
                const dimensionArgHelpClickHandler = this.otherOptions.onHelpActionClick({
                    heading: this.uiElements.dimensionLabel,
                    referenceElement: this.uiElements.dimensionContainer,
                    helpTextID: this.otherOptions.helpTextIDs?.dimension
                });
                this.helpActionClickEventHandlers.set(HelpClickHandlerKeys.dimensionArgHelpClickHandler, dimensionArgHelpClickHandler);
            } }, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("rfx-label", { label: this.uiElements.dimensionLabel, onRfxLabelHelpActionClick: () => this.helpActionClickEventHandlers?.get(HelpClickHandlerKeys.dimensionArgHelpClickHandler)() }), (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("rfx-dtex-common-select", { options: dimensionOptions, value: selectedDimension, onRfxArgumentChange: (e) => {
                e.stopPropagation();
                const { detail: { value } } = e;
                this.value = { ...this.value, dimension: value };
            } })), (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { alignment: "start", scale: _ui_utils_928a4096_js__WEBPACK_IMPORTED_MODULE_4__.U.Scale, layout: "default", ref: (e) => {
                this.uiElements.startOfContainer = e;
                const startOfArgHelpClickHandler = this.otherOptions.onHelpActionClick({
                    heading: this.uiElements.startOfLabel,
                    referenceElement: this.uiElements.startOfContainer,
                    helpTextID: this.otherOptions.helpTextIDs?.startof
                });
                this.helpActionClickEventHandlers.set(HelpClickHandlerKeys.startOfArgHelpClickHandler, startOfArgHelpClickHandler);
            } }, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("rfx-label", { label: this.uiElements.startOfLabel, onRfxLabelHelpActionClick: () => this.helpActionClickEventHandlers?.get(HelpClickHandlerKeys.startOfArgHelpClickHandler)() }), (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("rfx-dtex-common-select", { options: startValue, value: selectedStartOfFirstIteration, onRfxArgumentChange: (e) => {
                e.stopPropagation();
                const { detail: { value } } = e;
                this.value = { ...this.value, startValue: value };
            }, allowCustomValues: isIRDB })), (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { alignment: "start", scale: _ui_utils_928a4096_js__WEBPACK_IMPORTED_MODULE_4__.U.Scale, layout: "default", ref: (e) => {
                this.uiElements.endOfContainer = e;
                const endOfArgHelpClickHandler = this.otherOptions.onHelpActionClick({
                    heading: this.uiElements.endOfLabel,
                    referenceElement: this.uiElements.endOfContainer,
                    helpTextID: this.otherOptions.helpTextIDs?.endof
                });
                this.helpActionClickEventHandlers.set(HelpClickHandlerKeys.endOfArgHelpClickHandler, endOfArgHelpClickHandler);
            } }, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("rfx-label", { label: this.uiElements.endOfLabel, onRfxLabelHelpActionClick: () => this.helpActionClickEventHandlers?.get(HelpClickHandlerKeys.endOfArgHelpClickHandler)() }), (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("rfx-dtex-common-select", { options: endValue, value: selectedEndOfFirstIteration, onRfxArgumentChange: (e) => {
                e.stopPropagation();
                const { detail: { value } } = e;
                this.value = { ...this.value, endValue: value };
            }, allowCustomValues: isIRDB })), (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { alignment: "start", scale: _ui_utils_928a4096_js__WEBPACK_IMPORTED_MODULE_4__.U.Scale, layout: "default", ref: (e) => {
                this.uiElements.stepContainer = e;
                const stepArgHelpClickHandler = this.otherOptions.onHelpActionClick({
                    heading: this.uiElements.stepLabel,
                    referenceElement: this.uiElements.stepContainer,
                    helpTextID: this.otherOptions.helpTextIDs?.step
                });
                this.helpActionClickEventHandlers.set(HelpClickHandlerKeys.stepArgHelpClickHandler, stepArgHelpClickHandler);
            } }, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("rfx-label", { label: this.uiElements.stepLabel, onRfxLabelHelpActionClick: () => this.helpActionClickEventHandlers?.get(HelpClickHandlerKeys.stepArgHelpClickHandler)() }), (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-input-number", { value: String(stepValue), onCalciteInputNumberChange: (event) => {
                this.value = { ...this.value, stepValue: Number.parseInt(event.target.value, 10) };
            }, scale: _ui_utils_928a4096_js__WEBPACK_IMPORTED_MODULE_4__.U.Scale })), isDimensionStdTime ? ((0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { alignment: "start", scale: _ui_utils_928a4096_js__WEBPACK_IMPORTED_MODULE_4__.U.Scale, layout: "default", ref: (e) => {
                this.uiElements.dimensionUnitContainer = e;
                const unitArgHelpClickHandler = this.otherOptions.onHelpActionClick({
                    heading: this.uiElements.dimensionUnitLabel,
                    referenceElement: this.uiElements.dimensionUnitContainer,
                    helpTextID: this.otherOptions.helpTextIDs?.unit
                });
                this.helpActionClickEventHandlers.set(HelpClickHandlerKeys.unitArgHelpClickHandler, unitArgHelpClickHandler);
            } }, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("rfx-label", { label: this.uiElements.dimensionUnitLabel, onRfxLabelHelpActionClick: () => this.helpActionClickEventHandlers?.get(HelpClickHandlerKeys.unitArgHelpClickHandler)() }), (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("rfx-dtex-common-select", { options: this.dimensionUnitsOptions, value: units, onRfxArgumentChange: (e) => {
                e.stopPropagation();
                const { detail: { value } } = e;
                this.value = { ...this.value, units: value };
            } }))) : null));
    }
    renderDimensionDefinitionEditorLayout(dimensionDefinition) {
        switch (dimensionDefinition) {
            case dimensionDefinitionOptions.BY_VALUES:
                return this.renderByValuesGrid();
            case dimensionDefinitionOptions.BY_RANGES:
                return this.renderByRangesGrid();
            case dimensionDefinitionOptions.BY_ITERATION:
            case dimensionDefinitionOptions.BY_INTERVAL:
                return this.renderByIterationForm();
            case dimensionDefinitionOptions.BY_TARGET_RASTER:
                return this.renderbyTargetRasterForm();
            case dimensionDefinitionOptions.ALL:
            default:
                return null;
        }
    }
    render() {
        const dimensionDefinitionEditorLayout = this.renderDimensionDefinitionEditorLayout(this.dimensionDefinition);
        return ((0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("rfx-dtex-raster-variables-list", { layerArg: this.layerArg, value: this.selectedVariables, onRfxArgumentChange: this.onRasterVariablesListChange }), (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { alignment: "start", scale: _ui_utils_928a4096_js__WEBPACK_IMPORTED_MODULE_4__.U.Scale, layout: "default", ref: (e) => {
                this.uiElements.dimensionDefinitionContainer = e;
            } }, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("rfx-label", { label: this.uiElements.dimensionDefinitionLabel, onRfxLabelHelpActionClick: () => this.helpActionClickEventHandlers?.get(HelpClickHandlerKeys.dimensionDefinitionArgHelpClickHandler)() }), (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("rfx-dtex-common-select", { options: this.dimensionDefinitionOptions, value: this.dimensionDefinition, onRfxArgumentChange: this.onDimensionDefinitionChange })), dimensionDefinitionEditorLayout));
    }
    static get assetsDirs() { return ["t9n"]; }
    get hostElement() { return (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.a)(this); }
};
RFxMultidimensionalDefinitionEditor.style = rfxDtexMultidimensionalDefinitionEditorCss;

const RFxRasterDimensionSelect = class {
    constructor(hostRef) {
        (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.rfxArgumentChange = (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "rfxArgumentChange", 7);
        this.handleRasterDimensionSelectChange = (e) => {
            const element = e.target;
            this.value = element.value;
            this.rfxArgumentChange.emit({ value: this.value });
        };
        this.layerArg = undefined;
        this.value = undefined;
        this.dimensionData = [];
    }
    async setDimensionOptions() {
        try {
            const layer = await this.layerArg?.input.getSelectedLayer();
            if (!layer) {
                throw new Error("No layer selected");
            }
            if (!layer.sourceJSON?.hasMultidimensions) {
                throw new Error("Layer does not have MultidimensionalInfo");
            }
            const rasterInfo = layer.rasterInfo;
            // get all dimensions of each variables
            const dimensions = rasterInfo?.multidimensionalInfo?.variables.flatMap((variable) => variable.dimensions.map((dimension) => dimension.name));
            // remove duplicates from the array of dimension names.
            const uniqueDimensions = Array.from(new Set(dimensions));
            this.dimensionData = uniqueDimensions.map((dimension) => ({
                label: dimension,
                key: dimension
            }));
        }
        catch (error) {
            // handle error
            // console.warn("An issue occurred while setting dimension options:", error);
            this.dimensionData = [];
        }
        finally {
            if (!(0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_8__.i)(this.value)) {
                return;
            }
            this.value = this.dimensionData?.[0]?.key;
            this.rfxArgumentChange.emit({ value: this.value });
        }
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    connectedCallback() {
        this.layerArg?.input?.addEventListener("rfxArgumentChange", () => {
            this.value = undefined;
            this.setDimensionOptions();
        });
    }
    componentWillLoad() {
        this.setDimensionOptions();
    }
    render() {
        return ((0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("rfx-dtex-common-select", { options: this.dimensionData, value: this.value, onRfxArgumentChange: this.handleRasterDimensionSelectChange })));
    }
    static get watchers() { return {
        "layerArg": ["setDimensionOptions"]
    }; }
};

const HTMLClasses$4 = {
    multiSelectContainer: "multi-select-container",
    fieldMultiSelectButtonSpaced: "field-multi-select-btn-spaced",
    arcgisFieldPopover: "arcgis-field-popover"
};

const rfxDtexRasterVariablesListCss = ":root{--calcite-color-brand:#007ac2;--calcite-color-brand-hover:#00619b;--calcite-color-brand-press:#004874;--calcite-color-status-info:#00619b;--calcite-color-status-success:#35ac46;--calcite-color-status-warning:#edd317;--calcite-color-status-danger:#d83020;--calcite-color-status-danger-hover:#a82b1e;--calcite-color-status-danger-press:#7c1d13;--calcite-color-background:#f8f8f8;--calcite-color-foreground-1:#ffffff;--calcite-color-foreground-2:#f3f3f3;--calcite-color-foreground-3:#eaeaea;--calcite-color-text-1:#151515;--calcite-color-text-2:#4a4a4a;--calcite-color-text-3:#6a6a6a;--calcite-color-text-inverse:#ffffff;--calcite-color-text-link:#00619b;--calcite-color-border-1:#cacaca;--calcite-color-border-2:#d4d4d4;--calcite-color-border-3:#dfdfdf;--calcite-color-border-input:#949494;--rfx-quarter-spacing:0.25rem;--rfx-half-spacing:0.5rem;--rfx-three-quarter-spacing:0.75rem;--rfx-full-spacing:1rem;--rfx-component-default-width:100%;--rfx-ui-border-input:var(--calcite-color-border-2);--rfx-popover-content-min-height:30vh;--rfx-popover-content-max-height:60vh;--rfx-popover-content-height:45vh;--rfx-widget-content-height:30vh}:host{display:flex;width:100%}.field-multi-select-btn-spaced{margin-top:var(--rfx-half-spacing)}.multi-select-container{display:flex;flex-direction:column;gap:var(--rfx-quarter-spacing);width:100%;margin-bottom:var(--rfx-half-spacing)}";

const RFxRasterVariablesList = class {
    constructor(hostRef) {
        (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.rfxArgumentChange = (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "rfxArgumentChange", 7);
        /**
         * Data used to populate calcite-list items.
         * Has Multidimensional variables with custom formated label from a selected layer that has multidimensional info.
         * If the layer has no multidimensional info or an error occurs, variablesListData is an empty array.
         */
        this.variablesListData = [];
        //--------------------------------------------------------------------------
        //
        //  Private Methods
        //
        //--------------------------------------------------------------------------
        /**
         * Generates an array of data items for use in a multidimensional variable selection widget.
         * The label of each list item is The variable name along with it's description and dimensions info.
         *
         * @param {object} multidimensionalInfo - The multidimensional info object containing variable information.
         *
         * @returns {array} An array of data items with properties for selection status, display label, and value.
         */
        this.getRasterVariableListData = (multidimensionalInfo) => {
            const multidimensionalInfoVariables = multidimensionalInfo?.variables;
            if (!multidimensionalInfoVariables) {
                throw new Error("Layer does not have MultidimensionalInfo.Variables");
            }
            const variableListData = multidimensionalInfoVariables.map((variable) => {
                const dimensionInfo = variable.dimensions
                    .map((dimension) => `${dimension.name}=${dimension.values.length}`)
                    .join(",");
                const variableInfoString = `${variable.name} [${dimensionInfo}] (${variable.description || ""})`;
                return {
                    label: variableInfoString,
                    value: variable.name
                };
            });
            return variableListData;
        };
        this.setupPopover = () => {
            const arcgisFieldPickListConfig = {
                isMultiSelect: true,
                showSort: true,
                showDescription: false,
                showFieldInfo: false,
                heading: this.strings.selectVariables,
                filterPlaceholderText: this.strings.variables,
                showSelectionAll: true
            };
            this.rasterVariablesPickListElement = document.createElement("arcgis-field-pick-list");
            this.rasterVariablesPickListElement.className = HTMLClasses$4.arcgisFieldPopover;
            this.rasterVariablesPickListElement.showDescription = arcgisFieldPickListConfig.showDescription;
            this.rasterVariablesPickListElement.dir = this.direction;
            this.rasterVariablesPickListElement.showSort = arcgisFieldPickListConfig.showSort;
            this.rasterVariablesPickListElement.heading = arcgisFieldPickListConfig.heading;
            this.rasterVariablesPickListElement.filterPlaceholderText =
                arcgisFieldPickListConfig.filterPlaceholderText;
            // Field info requires a layer, so don't show field info if the fields were specified
            // via a dataset instead
            this.rasterVariablesPickListElement.showFieldInfo = false;
            this.rasterVariablesPickListElement.fields = this.variablesListData.map((item) => {
                return {
                    alias: item.label,
                    name: item.value,
                    type: "string"
                };
            });
            // selectedFields must be an array of "selected" variables
            if (this.value !== undefined) {
                this.rasterVariablesPickListElement.selectedFields = this.value;
            }
            else {
                this.rasterVariablesPickListElement.selectedFields = [];
            }
            this.rasterVariablesPickListElement.multiple = arcgisFieldPickListConfig.isMultiSelect;
            this.rasterVariablesPickListElement.showSelectionAll =
                arcgisFieldPickListConfig.showSelectionAll;
            this.rasterVariablesPickListElement.addEventListener("arcgisFieldPickListDismissed", this.arcgisFieldPickListDismissed);
            this.rasterVariablesPickListElement.popoverProps = {
                refElement: this.rasterVariableSelectElement,
                // TODO: Request change from px to relative width.
                popoverWidth: 300
            };
        };
        /**
         * @param event
         * @category Private
         * This method is triggered when the field pick list popover is dismissed.
         * It updates the value property of the component with the selected fields.
         * Then, it emits an event rfxArgumentChange with the new value,
         * and calls closeFieldPickList method to close the popover.
         */
        this.arcgisFieldPickListDismissed = (event) => {
            // `null` happens when close or cancel is clicked
            if (event.detail !== null) {
                this.value = event.detail.selectedFields;
                this.rfxArgumentChange.emit({ value: this.value });
            }
            this.closeFieldPickList();
        };
        /**
         * @param event
         * @category Private
         * This method is triggered when a value is removed from the selected values list.
         * It removes the clicked value from the value property of the component.
         * Then, it emits an event rfxArgumentChange with the new value.
         */
        this.onListItemRemoved = (event) => {
            // removeOpenableDomElement(this.replaceTooltip);
            const element = event.target;
            const { value } = element;
            if (this.value instanceof Array) {
                this.value = this.value.filter((v) => v !== value);
            }
            this.rfxArgumentChange.emit({ value: this.value });
        };
        /**
         * @category Private
         * This method adds the field pick list popover to the body of the document.
         */
        this.addPopover = () => {
            if (this.rasterVariablesPickListElement !== undefined) {
                document.body.appendChild(this.rasterVariablesPickListElement);
            }
        };
        /**
         * @category Private
         * This method removes the field pick list popover from the document
         */
        this.closePopover = () => {
            this.rasterVariablesPickListElement?.remove();
            this.rasterVariablesPickListElement = undefined;
        };
        /**
         * @category Private
         * This method opens the field pick list popover by calling the setupPopover and addPopover methods.
         */
        this.openFieldPickList = () => {
            this.closeFieldPickList();
            this.setupPopover();
            this.addPopover();
        };
        /**
         * @category Private
         * This method closes the field pick list popover by calling the closePopover method
         * and validates the value if it is required.
         */
        this.closeFieldPickList = () => {
            if (this.rasterVariablesPickListElement !== undefined) {
                this.closePopover();
                // TODO: Add logic to show error message if value is required but is not selected by user
                // this.validate();
            }
        };
        /**
         * This method is triggered when the user clicks on the select Variables button.
         * It calls the openFieldPickList method to open the popover.
         */
        this.onSelectClick = () => {
            this.openFieldPickList();
        };
        this.fetchingRasterVariablesListData = true;
        this.layerArg = undefined;
        this.value = undefined;
    }
    /**
     * Sets the raster variables list data asynchronously based on the currently selected layer's multidimensional info.
     * If no layer is selected, If the selected layer does not have multidimensional info, an empty array is set.
     * @category Public
     */
    async setRasterVariablesListData() {
        this.fetchingRasterVariablesListData = true;
        try {
            const layer = await this.layerArg?.input.getSelectedLayer();
            if (!layer) {
                throw new Error("No layer selected");
            }
            if (!layer.sourceJSON?.hasMultidimensions) {
                throw new Error("Layer does not have MultidimensionalInfo");
            }
            const rasterInfo = layer.rasterInfo;
            this.variablesListData = this.getRasterVariableListData(rasterInfo.multidimensionalInfo);
        }
        catch (error) {
            // handle error
            // console.warn("An issue occurred while setting dimension options:", error);
            this.variablesListData = [];
        }
        finally {
            // checks if this.value is not an array or if it is an empty array
            // it sets this.value to an array containing the first value from this.variablesListData.
            if (!Array.isArray(this.value) || this.value.length < 1) {
                this.value = [this.variablesListData?.[0]?.value];
            }
            this.fetchingRasterVariablesListData = false;
            this.rfxArgumentChange.emit({ value: this.value });
        }
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    connectedCallback() {
        this.layerArg?.input?.addEventListener("rfxArgumentChange", () => {
            this.variablesListData = [];
            this.value = [];
            this.setRasterVariablesListData();
        });
    }
    async componentWillLoad() {
        ({ strings: this.strings, dir: this.direction } = await (0,_localization_helper_4819b67d_js__WEBPACK_IMPORTED_MODULE_3__.b)(this.hostElement, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.g)(`.`)));
        this.setRasterVariablesListData();
    }
    disconnectedCallback() {
        this.rasterVariablesPickListElement?.remove();
    }
    //--------------------------------------------------------------------------
    //
    //  Render
    //
    //--------------------------------------------------------------------------
    render() {
        const buttonClass = this.value?.length > 0 ? HTMLClasses$4.fieldMultiSelectButtonSpaced : undefined;
        return ((0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: HTMLClasses$4.multiSelectContainer, ref: (e) => {
                this.rasterVariableSelectElement = e;
            } }, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-list", { selectionMode: "none", loading: this.fetchingRasterVariablesListData, label: "rfx-raster-variables-list" }, this.variablesListData !== undefined && this.variablesListData.length > 0 && ((0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-value-list", null, this.variablesListData
            .filter((item) => this.value?.includes(item.value))
            .map((dataItem) => ((0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-value-list-item", { key: dataItem.value, label: dataItem.label, value: dataItem.value, removable: true, onCalciteListItemRemove: this.onListItemRemoved })))))), (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { round: true, iconStart: "plus", appearance: "outline", kind: "neutral", width: "full", onClick: this.onSelectClick, class: buttonClass, id: "multi-select-field-btn", scale: _ui_utils_928a4096_js__WEBPACK_IMPORTED_MODULE_4__.U.Scale }, this.strings.variables)));
    }
    static get assetsDirs() { return ["t9n"]; }
    get hostElement() { return (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.a)(this); }
};
RFxRasterVariablesList.style = rfxDtexRasterVariablesListCss;

const component = "rfx-dtex-switchable";
const HTMLClasses$3 = {
    containerDiv: `${component}__container-div`,
    switchOptionsDiv: `${component}__switch-options`,
    switchControlsDiv: `${component}__switch-controls`
};

const rfxDtexSwitchableCss = ":root{--calcite-color-brand:#007ac2;--calcite-color-brand-hover:#00619b;--calcite-color-brand-press:#004874;--calcite-color-status-info:#00619b;--calcite-color-status-success:#35ac46;--calcite-color-status-warning:#edd317;--calcite-color-status-danger:#d83020;--calcite-color-status-danger-hover:#a82b1e;--calcite-color-status-danger-press:#7c1d13;--calcite-color-background:#f8f8f8;--calcite-color-foreground-1:#ffffff;--calcite-color-foreground-2:#f3f3f3;--calcite-color-foreground-3:#eaeaea;--calcite-color-text-1:#151515;--calcite-color-text-2:#4a4a4a;--calcite-color-text-3:#6a6a6a;--calcite-color-text-inverse:#ffffff;--calcite-color-text-link:#00619b;--calcite-color-border-1:#cacaca;--calcite-color-border-2:#d4d4d4;--calcite-color-border-3:#dfdfdf;--calcite-color-border-input:#949494;--rfx-quarter-spacing:0.25rem;--rfx-half-spacing:0.5rem;--rfx-three-quarter-spacing:0.75rem;--rfx-full-spacing:1rem;--rfx-component-default-width:100%;--rfx-ui-border-input:var(--calcite-color-border-2);--rfx-popover-content-min-height:30vh;--rfx-popover-content-max-height:60vh;--rfx-popover-content-height:45vh;--rfx-widget-content-height:30vh}.rfx-dtex-switchable__switch-options{display:flex;justify-content:flex-start;-moz-column-gap:var(--rfx-quarter-spacing);column-gap:var(--rfx-quarter-spacing)}.rfx-dtex-switchable__switch-controls{padding-top:var(--rfx-quarter-spacing);width:var(--rfx-component-default-width)}";

const RFxSwitchable = class {
    constructor(hostRef) {
        (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.rfxArgumentChange = (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "rfxArgumentChange", 7);
        //--------------------------------------------------------------------------
        //
        //  Properties
        //
        //--------------------------------------------------------------------------
        /**
         * @private
         * switchable options based on the attributes based
         */
        this.switchableOptions = [];
        /**
         * @category Private
         */
        this.defaultEnumValue = "default";
        /**
         * @category Private
         *
         */
        this.isLoading = true;
        //--------------------------------------------------------------------------
        //
        //  Private Methods
        //
        //--------------------------------------------------------------------------
        this.onFieldOptionLoaded = () => {
            // currentType can be determined from the value, and for this fields should be populated
            if (this.isLoading === true) {
                // have to update the type only on loading
                this.currentType = this.getCurrentType();
            }
        };
        /**
         * function called on switch select change
         * @param e Event from switch options selector
         */
        this.handleSwitchSelectChange = (e) => {
            // We are stopping the propagation of this change event as we emit a customEvent instead.
            e.stopPropagation();
            const element = e.target;
            this.currentType = (0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_8__.i)(element.value) ? this.currentType : element.value;
            this.isLoading = false;
        };
        this.handleSwitchValueChange = (e) => {
            // We are stopping the propagation of this change event as we emit a customEvent instead.
            e.stopPropagation();
            const element = e.target;
            this.value = element.value?.toString();
            this.rfxArgumentChange.emit({ value: this.value });
        };
        this.value = undefined;
        this.switchAttributes = undefined;
        this.currentType = undefined;
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    async componentWillLoad() {
        ({ strings: this.strings } = await (0,_localization_helper_4819b67d_js__WEBPACK_IMPORTED_MODULE_3__.b)(this.hostElement, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.g)(`.`)));
        if (!(0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_8__.i)(this.switchAttributes)) {
            this.populateSwitchableOptions();
        }
    }
    componentDidUpdate() {
        this.value = this.getCurrentValue();
    }
    /**
     * @private
     * to populate the switchable select controls with the attribute data
     */
    populateSwitchableOptions() {
        this.switchableOptions = this.switchAttributes.map((attribute) => {
            // this.currentType = attribute.type;
            switch (attribute.type) {
                case _rfx_args_helper_ab401543_js__WEBPACK_IMPORTED_MODULE_6__.S.Number:
                    return {
                        key: _rfx_args_helper_ab401543_js__WEBPACK_IMPORTED_MODULE_6__.S.Number,
                        label: this.strings.number,
                        icon: "number"
                    };
                case _rfx_args_helper_ab401543_js__WEBPACK_IMPORTED_MODULE_6__.S.Field:
                    return {
                        key: _rfx_args_helper_ab401543_js__WEBPACK_IMPORTED_MODULE_6__.S.Field,
                        label: this.strings.field,
                        icon: "brackets-curly"
                    };
                case _rfx_args_helper_ab401543_js__WEBPACK_IMPORTED_MODULE_6__.S.List:
                    return {
                        key: _rfx_args_helper_ab401543_js__WEBPACK_IMPORTED_MODULE_6__.S.List,
                        label: this.strings.string,
                        icon: "string"
                    };
                case _rfx_args_helper_ab401543_js__WEBPACK_IMPORTED_MODULE_6__.S.Unit:
                    return {
                        key: _rfx_args_helper_ab401543_js__WEBPACK_IMPORTED_MODULE_6__.S.Unit,
                        label: this.strings.value,
                        icon: "measure"
                    };
            }
        });
    }
    /**
     * determine the currentType from the value if available
     */
    getCurrentType() {
        const val = this.value;
        if (val !== undefined &&
            this.switchFieldElement?.options?.filter((option) => option.key === val).length > 0) {
            return _rfx_args_helper_ab401543_js__WEBPACK_IMPORTED_MODULE_6__.S.Field;
        }
        else {
            return this.switchableOptions.find((option) => option.key !== _rfx_args_helper_ab401543_js__WEBPACK_IMPORTED_MODULE_6__.S.Field).key;
        }
    }
    getCurrentValue() {
        switch (this.currentType) {
            case _rfx_args_helper_ab401543_js__WEBPACK_IMPORTED_MODULE_6__.S.Field:
                return this.switchFieldElement.value?.toString();
            case _rfx_args_helper_ab401543_js__WEBPACK_IMPORTED_MODULE_6__.S.List:
                return this.switchListElement.value;
            case _rfx_args_helper_ab401543_js__WEBPACK_IMPORTED_MODULE_6__.S.Number:
                return this.switchNumberElement.value;
            case _rfx_args_helper_ab401543_js__WEBPACK_IMPORTED_MODULE_6__.S.Unit:
                return this.switchLinearUnitElement.value;
        }
    }
    getCurrentAttribute() {
        this.currentType =
            this.currentType ??
                (this.value === undefined ? this.switchAttributes[0].type : this.switchAttributes[1].type);
        return this.switchAttributes.filter((attribute) => attribute.type === this.currentType)[0];
    }
    renderOptionChips() {
        return this.switchableOptions.map((option) => {
            return ((0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-chip", { key: option.key, scale: _ui_utils_928a4096_js__WEBPACK_IMPORTED_MODULE_4__.U.Scale, appearance: "outline", kind: this.currentType === option.key ? "brand" : "neutral", value: option.key, onClick: this.handleSwitchSelectChange, closed: false, closable: false }, option.label));
        });
    }
    render() {
        const currentAttribute = this.getCurrentAttribute();
        return ((0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: HTMLClasses$3.switchOptionsDiv }, this.renderOptionChips()), (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: HTMLClasses$3.switchControlsDiv }, this.currentType === _rfx_args_helper_ab401543_js__WEBPACK_IMPORTED_MODULE_6__.S.Number && ((0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-input-number", { scale: _ui_utils_928a4096_js__WEBPACK_IMPORTED_MODULE_4__.U.Scale, alignment: "start", "number-button-type": "vertical", min: 0, max: 1000, step: 1, value: this.value, onCalciteInputNumberChange: this.handleSwitchValueChange, ref: (el) => {
                this.switchNumberElement = el;
            } })), this.currentType === _rfx_args_helper_ab401543_js__WEBPACK_IMPORTED_MODULE_6__.S.Field && ((0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("rfx-dtex-field-select", { layerArg: currentAttribute.layerArgument, fieldType: currentAttribute.type, value: this.value, showDefaultFields: false, ref: (el) => {
                this.switchFieldElement = el;
            }, onRfxArgumentChange: this.handleSwitchValueChange, onRfxFieldOptionsLoaded: this.onFieldOptionLoaded })), this.currentType === _rfx_args_helper_ab401543_js__WEBPACK_IMPORTED_MODULE_6__.S.List && ((0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("rfx-dtex-common-select", { options: currentAttribute.enum || [{ key: this.defaultEnumValue, label: "" }], onRfxArgumentChange: this.handleSwitchValueChange, value: this.value ?? (currentAttribute.enum[0].key.toString() || this.defaultEnumValue), ref: (el) => {
                this.switchListElement = el;
            } })), this.currentType === _rfx_args_helper_ab401543_js__WEBPACK_IMPORTED_MODULE_6__.S.Unit && ((0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("rfx-dtex-linear-unit", { unitOptions: currentAttribute.enum, value: this.value?.split(" ").length === 2 ? this.value : undefined, ref: (el) => {
                this.switchLinearUnitElement = el;
            }, onRfxArgumentChange: this.handleSwitchValueChange })))));
    }
    static get assetsDirs() { return ["t9n"]; }
    get hostElement() { return (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.a)(this); }
};
RFxSwitchable.style = rfxDtexSwitchableCss;

const HTMLClasses$2 = {
    analysisPopover: "analysis-popover",
    jsAppFlyout: "js-app-flyout",
    iframeSmall: "help-iframe-s",
    iframeMedium: "help-iframe-m",
    learnMore: "learn-more",
    onlineOnly: "OnlineOnly",
    portalOnly: "PortalOnly"
};

const rfxHelpPopoverCss = ":root{--calcite-color-brand:#007ac2;--calcite-color-brand-hover:#00619b;--calcite-color-brand-press:#004874;--calcite-color-status-info:#00619b;--calcite-color-status-success:#35ac46;--calcite-color-status-warning:#edd317;--calcite-color-status-danger:#d83020;--calcite-color-status-danger-hover:#a82b1e;--calcite-color-status-danger-press:#7c1d13;--calcite-color-background:#f8f8f8;--calcite-color-foreground-1:#ffffff;--calcite-color-foreground-2:#f3f3f3;--calcite-color-foreground-3:#eaeaea;--calcite-color-text-1:#151515;--calcite-color-text-2:#4a4a4a;--calcite-color-text-3:#6a6a6a;--calcite-color-text-inverse:#ffffff;--calcite-color-text-link:#00619b;--calcite-color-border-1:#cacaca;--calcite-color-border-2:#d4d4d4;--calcite-color-border-3:#dfdfdf;--calcite-color-border-input:#949494;--rfx-quarter-spacing:0.25rem;--rfx-half-spacing:0.5rem;--rfx-three-quarter-spacing:0.75rem;--rfx-full-spacing:1rem;--rfx-component-default-width:100%;--rfx-ui-border-input:var(--calcite-color-border-2);--rfx-popover-content-min-height:30vh;--rfx-popover-content-max-height:60vh;--rfx-popover-content-height:45vh;--rfx-widget-content-height:30vh}:host{display:flex;background-color:var(--calcite-color-foreground-1)}.help-iframe-s{padding:var(--rfx-quarter-spacing);height:var(--help-popover-content-height-s, 120);border:0px}.help-iframe-m{padding:var(--rfx-quarter-spacing);height:var(--help-popover-content-height-m, 140);border:0px}.learn-more{margin:var(--rfx-full-spacing)}";

const RfxHelpPopover = class {
    constructor(hostRef) {
        (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.rfxHelpPopoverClose = (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "rfxHelpPopoverClose", 7);
        this.rfxHelpPopoverSelectionChange = (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "rfxHelpPopoverSelectionChange", 7);
        this.referenceElement = undefined;
        this.helpUrl = undefined;
        this.helpId = undefined;
        this.heading = undefined;
        this.portal = undefined;
        this.placement = "auto";
        this.open = undefined;
        this.helpSrcdoc = undefined;
        this.learnMoreUrl = undefined;
        this.offsetDistance = 20;
        this.offsetSkidding = 0;
    }
    /**
     * @category Lifecycle
     */
    async componentWillLoad() {
        ({
            strings: this.strings,
            dir: this.dir,
            locale: this.locale
        } = await (0,_localization_helper_4819b67d_js__WEBPACK_IMPORTED_MODULE_3__.b)(this.hostElement, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.g)(`.`)));
    }
    /**
     * @category Lifecycle
     */
    componentDidLoad() {
        try {
            setTimeout(() => requestAnimationFrame(() => this.popoverElement?.setFocus()), 1);
            setTimeout(() => {
                this.popoverElement?.reposition?.();
            }, _ui_utils_928a4096_js__WEBPACK_IMPORTED_MODULE_4__.U.PopoverTimer);
        }
        catch (e) {
            // do nothing, but fail gracefully
        }
    }
    /**
     * Calls `reposition()` method on popover element.
     * @category Public
     */
    async reposition() {
        await this.popoverElement?.reposition?.();
    }
    /**
     * computes the height and width of the help iframe container
     * @param {string} helpId the popup helpId to display
     * @category Private
     */
    getContentStyleClass(helpId) {
        let className = HTMLClasses$2.iframeSmall;
        if (helpId.indexOf("Category") !== -1) {
            className = HTMLClasses$2.iframeMedium;
        }
        else if (helpId.indexOf("Tool") !== -1) {
            className = HTMLClasses$2.iframeMedium;
        }
        else if (helpId.indexOf("toolDescription") !== -1) {
            className = HTMLClasses$2.iframeMedium;
        }
        return className;
    }
    /**
     * computes learnMore url based on learnMoreBaseUrl Prop or learnMoreUlr Prop
     * @category Private
     */
    getLearnMoreUrl() {
        let learnMoreUrl;
        if (this.learnMoreUrl !== undefined) {
            // this maps to a direct learn more url for the help topic provided to the component. used as-is
            learnMoreUrl = this.learnMoreUrl;
        }
        return learnMoreUrl;
    }
    renderIframeUsingSrcDoc() {
        return ((0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("iframe", { class: this.getContentStyleClass(this.helpId), id: this.helpId, title: this.heading ?? this.helpId, srcdoc: this.helpSrcdoc }));
    }
    render() {
        const IframeContent = this.helpSrcdoc !== undefined ? this.renderIframeUsingSrcDoc() : null;
        const learnMoreUrl = this.getLearnMoreUrl();
        return ((0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.H, { class: `${HTMLClasses$2.analysisPopover} ${HTMLClasses$2.jsAppFlyout}`, dir: this.dir }, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-popover", { overlayPositioning: "fixed", autoClose: true, ref: (el) => (this.popoverElement = el), referenceElement: this.referenceElement ?? "analysis-tool", placement: this.placement, open: this.open, closable: true, heading: this.heading ?? this.helpId, headingLevel: 4, triggerDisabled: false, focusTrapDisabled: true, label: this.heading ?? this.helpId ?? "", offsetDistance: this.offsetDistance, offsetSkidding: this.offsetSkidding, onCalcitePopoverClose: () => this.rfxHelpPopoverClose.emit() }, IframeContent, learnMoreUrl !== undefined && ((0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-link", { rel: "help", target: "_blank", href: learnMoreUrl, class: HTMLClasses$2.learnMore }, this.strings.learnMoreLabel)))));
    }
    static get assetsDirs() { return ["t9n"]; }
    get hostElement() { return (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.a)(this); }
};
RfxHelpPopover.style = rfxHelpPopoverCss;

const HTMLClasses$1 = {
    modalVariables: "modal-variables",
    modalAlert: "modal-alert"
};

const rfxItemBrowserCss = ":root{--calcite-color-brand:#007ac2;--calcite-color-brand-hover:#00619b;--calcite-color-brand-press:#004874;--calcite-color-status-info:#00619b;--calcite-color-status-success:#35ac46;--calcite-color-status-warning:#edd317;--calcite-color-status-danger:#d83020;--calcite-color-status-danger-hover:#a82b1e;--calcite-color-status-danger-press:#7c1d13;--calcite-color-background:#f8f8f8;--calcite-color-foreground-1:#ffffff;--calcite-color-foreground-2:#f3f3f3;--calcite-color-foreground-3:#eaeaea;--calcite-color-text-1:#151515;--calcite-color-text-2:#4a4a4a;--calcite-color-text-3:#6a6a6a;--calcite-color-text-inverse:#ffffff;--calcite-color-text-link:#00619b;--calcite-color-border-1:#cacaca;--calcite-color-border-2:#d4d4d4;--calcite-color-border-3:#dfdfdf;--calcite-color-border-input:#949494;--rfx-quarter-spacing:0.25rem;--rfx-half-spacing:0.5rem;--rfx-three-quarter-spacing:0.75rem;--rfx-full-spacing:1rem;--rfx-component-default-width:100%;--rfx-ui-border-input:var(--calcite-color-border-2);--rfx-popover-content-min-height:30vh;--rfx-popover-content-max-height:60vh;--rfx-popover-content-height:45vh;--rfx-widget-content-height:30vh}.modal-content{height:min(700px, 75vh)}.modal-variables{--calcite-modal-width:1080px;--calcite-modal-content-padding:0px}.modal-alert{pointer-events:none;position:absolute;left:0px;bottom:0px;width:100%;display:block;z-index:50;transform:translate(0px, -0.5rem);height:calc(100% - 4rem)}";

const MAX_ITEMS_PER_PAGE = 20;
const RFxItemBrowser = class {
    constructor(hostRef) {
        (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.rfxItemBrowserSelection = (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "rfxItemBrowserSelection", 7);
        this.rfxItemBrowserClose = (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "rfxItemBrowserClose", 7);
        /**
         * @category Private
         */
        this.webToolTaskMap = {};
        this.buildDropdownItem = (taskName) => {
            return ((0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-dropdown-item", { key: taskName, onClick: () => {
                    const taskDetails = {
                        ...this.currentPreviewItem,
                        ...{ toolName: taskName }
                    };
                    this.selectedItems = [this.currentPreviewItem];
                    this.rfxItemBrowserSelection.emit(taskDetails);
                    this.close();
                } }, taskName));
        };
        this.getAllowedItemTypes = () => {
            const baseAllowedTypes = [
                "layers",
                "layers-weblayers-features",
                "layers-weblayers-imagery",
                "layers-weblayers-tiledimagelayers",
                "layers-weblayers-tables"
            ];
            return baseAllowedTypes;
        };
        this.formatSublayerUrl = (selectedItem) => {
            const baseUrl = `${"item" in selectedItem ? selectedItem.item.url : selectedItem.url}`;
            const sublayerIndex = `${"sublayer" in selectedItem ? selectedItem.sublayer?.id ?? 0 : ""}`;
            return `${baseUrl}/${sublayerIndex}`;
        };
        this.getItemDetailsUrl = (item) => {
            let url = "";
            if (!(0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_8__.i)(item)) {
                const { id } = item; // Assert because isEmptyDataItem does not narrow
                url = `${(0,_portal_d50d8334_js__WEBPACK_IMPORTED_MODULE_30__.g)(this.portal)}/home/item.html?id=${id}`;
            }
            return url;
        };
        this.close = () => {
            if (this.containerRef !== undefined) {
                this.containerRef.open = false;
            }
        };
        this.onSelectButtonClick = () => {
            const rfxItemBrowserEvent = this.rfxItemBrowserSelection;
            // For sub-layer modes, emit the full layer object for better ux
            switch (this.selectionMode) {
                case "single":
                    rfxItemBrowserEvent.emit(this.selectedItems[0]);
                    this.close();
                    break;
                case "multiple":
                    rfxItemBrowserEvent.emit(this.selectedItems);
                    this.close();
                    break;
                default:
                    rfxItemBrowserEvent.emit(this.selectedItems);
                    this.close();
                    break;
            }
        };
        this.onClose = () => {
            this.rfxItemBrowserClose.emit();
        };
        this.onItemBrowserUpdate = (event) => {
            this.items = event.detail.results;
            this.totalItems = event.detail.total;
        };
        this.onItemBrowserSelect = (event) => {
            this.selectedItems = event.detail;
        };
        this.onItemBrowserLoading = () => {
            // Advised from Paul to clear these on searching to reset the vdom rendering
            this.items = [];
            this.totalItems = undefined;
        };
        this.onItemBrowserPreview = async (event) => {
            const previewItem = event.detail;
            if (this.showWebToolSelect === true) {
                this.tasksLoading = true;
                const tasks = await this.fetchTasks(previewItem);
                this.webToolTaskMap[previewItem.id] = tasks;
            }
            this.currentPreviewItem = previewItem;
            // Extra if check to further scope to feature flag
            if (this.tasksLoading === true) {
                this.tasksLoading = false;
            }
        };
        this.fetchTasks = async (item) => {
            const gpServerRes = await (0,_common_fda1462e_js__WEBPACK_IMPORTED_MODULE_15__.r)(`${item.url}?f=json`, {
                responseType: "json",
                authMode: "no-prompt"
            });
            return gpServerRes.data.tasks;
        };
        this.items = [];
        this.selectedItems = [];
        this.totalItems = undefined;
        this.browsedLayerCreating = false;
        this.invalidBrowsedLayers = [];
        this.currentPreviewItem = undefined;
        this.layerLoadingFailed = false;
        this.tasksLoading = false;
        this.displayMode = "modal";
        this.filter = "";
        this.hideFilters = true;
        this.header = undefined;
        this.user = undefined;
        this.portal = undefined;
        this.selectionMode = undefined;
        this.showWebToolSelect = false;
    }
    /**
     * @category Lifecycle
     */
    async componentWillLoad() {
        ({ strings: this.strings } = await (0,_localization_helper_4819b67d_js__WEBPACK_IMPORTED_MODULE_3__.b)(this.hostElement, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.g)(".")));
    }
    renderModal() {
        return ((0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-modal", { class: HTMLClasses$1.modalVariables, scale: "s", open: true, escapeDisabled: true, outsideCloseDisabled: true, focusTrapDisabled: true, onCalciteModalClose: this.onClose, ref: (el) => (this.containerRef = el) }, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "header" }, this.header ?? this.strings.header), (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "content", class: "modal-content" }, this.renderItemBrowser()), (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { slot: "back", width: "full", appearance: "solid", kind: "neutral", onClick: this.close }, this.strings.cancel), (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { slot: "primary", appearance: "solid", width: "full", disabled: this.browsedLayerCreating === true, onClick: () => this.onSelectButtonClick() }, this.strings.confirm)));
    }
    renderItemBrowser() {
        return ((0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-item-browser", { api: 4, filter: this.filter, num: MAX_ITEMS_PER_PAGE, config: { baseUrl: (0,_portal_d50d8334_js__WEBPACK_IMPORTED_MODULE_30__.g)(this.portal) }, portal: this.portal, user: this.user, selection: "single", onArcgisItemBrowserLoading: this.onItemBrowserLoading, onArcgisItemBrowserUpdate: this.onItemBrowserUpdate, onArcgisItemBrowserSelect: this.onItemBrowserSelect, onArcgisItemBrowserPreview: this.onItemBrowserPreview }, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-item-browser-top-bar", { slot: "top-bar", "filter-toggle": true }, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-item-browser-search", { slot: "search", term: "" })), (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-item-browser-sort", { slot: "sort", field: "modified" }), this.hideFilters === false && ((0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-item-browser-filters", { slot: "filters" }, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-item-browser-filter-folder", null), (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-item-browser-filter-categories", null), (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-item-browser-filter-date", { property: "modified" }), (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-item-browser-filter-date", { property: "created" }), (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-item-browser-filter-item-type", { allowedItemTypes: this.getAllowedItemTypes() }), (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-item-browser-filter-tags", null), (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-item-browser-filter-sharing", null), (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-item-browser-filter-content-status", null), (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-item-browser-filter-collaborations", null))), (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-item-browser-content", { slot: "content" }, this.items.map((item) => ((0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-item-browser-card", { key: item.id, item: item, portal: this.portal, user: this.user, name: "item-browser", showThumbnail: false })))), (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "preview-footer" }, this.showWebToolSelect === true && ((0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-dropdown", { placement: "top", style: { width: "100%" } }, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { loading: this.tasksLoading, slot: "trigger", appearance: "solid", kind: "neutral", iconEnd: "chevron-down", width: "full" }, this.strings.selectTask), (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-dropdown-group", null, this.currentPreviewItem?.id !== undefined
            ? this.webToolTaskMap[this.currentPreviewItem.id].map(this.buildDropdownItem)
            : null))), (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { href: this.getItemDetailsUrl(this.currentPreviewItem), target: "_blank", appearance: "outline", kind: "neutral", iconEnd: "launch", width: "full" }, this.strings.viewDetails)), (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-item-browser-pagination", { slot: "pagination", start: 1, num: MAX_ITEMS_PER_PAGE, total: this.totalItems })));
    }
    /**
     * @category Lifecycle
     * Render lifecycle method
     */
    render() {
        return this.renderModal();
    }
    static get assetsDirs() { return ["t9n"]; }
    get hostElement() { return (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.a)(this); }
};
RFxItemBrowser.style = rfxItemBrowserCss;

const HTMLClasses = {
    tooltip: "tooltip"
};

const rfxNodeInteractionToolbarCss = ":root{--calcite-color-brand:#007ac2;--calcite-color-brand-hover:#00619b;--calcite-color-brand-press:#004874;--calcite-color-status-info:#00619b;--calcite-color-status-success:#35ac46;--calcite-color-status-warning:#edd317;--calcite-color-status-danger:#d83020;--calcite-color-status-danger-hover:#a82b1e;--calcite-color-status-danger-press:#7c1d13;--calcite-color-background:#f8f8f8;--calcite-color-foreground-1:#ffffff;--calcite-color-foreground-2:#f3f3f3;--calcite-color-foreground-3:#eaeaea;--calcite-color-text-1:#151515;--calcite-color-text-2:#4a4a4a;--calcite-color-text-3:#6a6a6a;--calcite-color-text-inverse:#ffffff;--calcite-color-text-link:#00619b;--calcite-color-border-1:#cacaca;--calcite-color-border-2:#d4d4d4;--calcite-color-border-3:#dfdfdf;--calcite-color-border-input:#949494;--rfx-quarter-spacing:0.25rem;--rfx-half-spacing:0.5rem;--rfx-three-quarter-spacing:0.75rem;--rfx-full-spacing:1rem;--rfx-component-default-width:100%;--rfx-ui-border-input:var(--calcite-color-border-2);--rfx-popover-content-min-height:30vh;--rfx-popover-content-max-height:60vh;--rfx-popover-content-height:45vh;--rfx-widget-content-height:30vh}.tooltip{white-space:nowrap}";

const RfxNodeInteractionToolbar = class {
    constructor(hostRef) {
        (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.showPropertiesAction = true;
        this.handleNodeDuplicate = undefined;
        this.handleNodeRename = undefined;
        this.handleNodeDelete = undefined;
        this.handleNodeEditProperties = undefined;
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    async componentWillLoad() {
        ({ strings: this.strings, dir: this.direction } = await (0,_localization_helper_4819b67d_js__WEBPACK_IMPORTED_MODULE_3__.b)(this.hostElement, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.g)(".")));
    }
    //--------------------------------------------------------------------------
    //
    //  Private Methods
    //
    //--------------------------------------------------------------------------
    render() {
        return ((0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action-pad", { "expand-disabled": true, layout: "horizontal", scale: "s", dir: this.direction }, this.showPropertiesAction ? ((0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action-group", null, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { id: "properties", scale: _ui_utils_928a4096_js__WEBPACK_IMPORTED_MODULE_4__.C.s, text: this.strings.properties, icon: "properties", onClick: this.handleNodeEditProperties }), (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-tooltip", { referenceElement: "properties", placement: "top", closeOnClick: true }, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: HTMLClasses.tooltip }, this.strings.properties)))) : null, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { id: "rename", scale: _ui_utils_928a4096_js__WEBPACK_IMPORTED_MODULE_4__.C.s, text: this.strings.rename, icon: "pencil", onClick: this.handleNodeRename }), (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-tooltip", { referenceElement: "rename", placement: "top", closeOnClick: true }, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: HTMLClasses.tooltip }, this.strings.rename)), (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { id: "duplicate", scale: _ui_utils_928a4096_js__WEBPACK_IMPORTED_MODULE_4__.C.s, text: this.strings.duplicate, icon: "duplicate", onClick: this.handleNodeDuplicate }), (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-tooltip", { referenceElement: "duplicate", placement: "top", closeOnClick: true }, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: HTMLClasses.tooltip }, this.strings.duplicate)), (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { id: "delete", scale: _ui_utils_928a4096_js__WEBPACK_IMPORTED_MODULE_4__.C.s, text: this.strings.delete, icon: "trash", onClick: this.handleNodeDelete }), (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-tooltip", { referenceElement: "delete", placement: "top", closeOnClick: true }, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: HTMLClasses.tooltip }, this.strings.delete))));
    }
    static get assetsDirs() { return ["t9n"]; }
    get hostElement() { return (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.a)(this); }
};
RfxNodeInteractionToolbar.style = rfxNodeInteractionToolbarCss;

const rfxSaveModalCss = "";

const RFxSaveModal = class {
    constructor(hostRef) {
        (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.cancelClick = (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "cancelClick", 7);
        this.saveClick = (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "saveClick", 7);
        this.onCancel = () => {
            this.onClose();
            console.log("cancel click");
            this.cancelClick.emit();
        };
        this.portal = undefined;
        this.portalItem = undefined;
        this.itemProps = undefined;
        this.itemCreating = false;
    }
    /**
     * @category Lifecycle
     */
    async componentWillLoad() {
        ({ strings: this.strings, dir: this.dir } = await (0,_localization_helper_4819b67d_js__WEBPACK_IMPORTED_MODULE_3__.b)(this.hostElement, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.g)(".")));
        await this.initItemProps();
    }
    async initItemProps() {
        const { portalItem, portal } = this;
        const itemTitle = portalItem?.title;
        if (portalItem !== undefined) {
            const title = await this.getUniqueItemTitle(itemTitle, portalItem.ownerFolder, portalItem.type);
            this.itemProps = { title };
            this.itemProps.ownerFolder = this.findFolder(portalItem.ownerFolder);
            this.itemProps.categories = portalItem.isOrgItem ? portalItem.categories : undefined;
            this.itemProps.tags = portalItem.tags;
            this.itemProps.snippet = portalItem.snippet;
        }
        else {
            this.itemProps = { title: itemTitle };
        }
        const baseUrl = (0,_portal_d50d8334_js__WEBPACK_IMPORTED_MODULE_30__.g)(portal);
        const portalRestUrl = portal.restUrl.substr(-portal.restUrl.length) === "/" ? portal.restUrl : portal.restUrl + "/";
        this.itemProps.baseUrl = baseUrl;
        this.itemProps.restBaseUrl = portalRestUrl;
    }
    findFolder(folderId) {
        const { portal } = this;
        const { user } = portal;
        return user.folders.find((folder) => folder.id === folderId);
    }
    getUniqueItemTitle(suggestedTitle, folder, type) {
        const { user } = this.portal;
        const queryParams = {
            query: "owner:" +
                user.username +
                " orgid:" +
                this.portal.id +
                " ownerfolder:" +
                (folder || "root") +
                ' type:"' +
                type +
                '" title:"' +
                suggestedTitle +
                '"',
            num: 100
        };
        return this.portal.queryItems(queryParams).then((results) => {
            return results && results.total > 0
                ? `${suggestedTitle}"_"${results.total + 1}`
                : suggestedTitle;
        });
    }
    renderHeader() {
        return ((0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "header", id: "modal-title" }, this.strings.createItem));
    }
    renderContent() {
        return ((0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "content", class: "modal-content" }, this.renderItemProperties()));
    }
    /**
     * to get the item type
     * @returns itemType
     */
    getType() {
        return this.portalItem?.type || "Raster Function Template";
    }
    onItemPropChange(params) {
        const { prop, value } = params;
        this.itemProps[prop] = value || "";
        //this.validate();
    }
    async onSave() {
        if (await this.validate()) {
            this.itemCreating = true;
            this.saveClick.emit({ itemProperties: this.itemProps });
        }
    }
    // arcgis-item-properties handles showing the error state, however if there
    // is an error we should not sent save event
    async validate() {
        if (!(await this.folderInput.saveActiveFolder())) {
            return false;
        }
        const titleError = await this.titleInput.validateTitle();
        if (titleError) {
            titleError.focusMainInput();
            return false;
        }
        return true;
    }
    onClose() {
        if (this.containerRef !== undefined) {
            this.containerRef.open = false;
            this.containerRef.remove();
        }
    }
    renderItemProperties() {
        const { itemProps, portal, portalItem } = this;
        const type = this.getType();
        const { title, tags, categories, snippet, ownerFolder, baseUrl, restBaseUrl } = itemProps || {};
        const { user } = portal;
        // const { isOrgUser } = user;
        return ((0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-item-properties", { scale: "m", portal: portal, config: { baseUrl: `${baseUrl}"/home"`, restBaseUrl }, user: user, api: 4, type: type || "Feature Service", ref: (element) => (this.itemPropertiesElement = element) }, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-title-input", { scale: "m", "item-title": portalItem?.id !== undefined ? title : null, currentFolder: portalItem?.id !== undefined ? ownerFolder : null, onArcgisTitleInputChange: (e) => this.onItemPropChange({ prop: "title", value: e.detail }), ref: (element) => {
                this.titleInput = element;
            } }), (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-folder-picker", { scale: "m", folder: portalItem?.id !== undefined ? ownerFolder : null, ref: (e) => (this.folderInput = e), onArcgisFolderPickerChange: (e) => this.onItemPropChange({ prop: "ownerFolder", value: e.detail }) }), (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-categories-picker", { scale: "m", categories: categories, onArcgisCategoriesPickerChange: (e) => this.onItemPropChange({ prop: "categories", value: e.detail }) }), (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-tags-picker", { scale: "m", activeTags: tags, onArcgisTagsPickerChange: (e) => this.onItemPropChange({ prop: "tags", value: e.detail }) }), (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-summary-input", { scale: "m", summary: snippet, onArcgisSummaryInputChange: (e) => this.onItemPropChange({ prop: "snippet", value: e.detail }) })));
    }
    renderFooter() {
        return [
            (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { class: "js-cancel", slot: "primary", width: "full", appearance: "outline-fill", onClick: this.onCancel }, this.strings.cancel),
            (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { class: "js-save", slot: "secondary", width: "full",
                //disabled={true}
                onClick: this.onSave }, this.strings.save)
        ];
    }
    render() {
        return ((0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-modal", { scale: "s", open: true, escapeDisabled: true, outsideCloseDisabled: true, focusTrapDisabled: true, onCalciteModalClose: this.onClose, ref: (el) => (this.containerRef = el) }, this.renderHeader(), this.renderContent(), this.renderFooter()));
    }
    static get assetsDirs() { return ["t9n"]; }
    get hostElement() { return (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.a)(this); }
};
RFxSaveModal.style = rfxSaveModalCss;

/**
 * The time the debounce will wait before firing.
 */
const searchDebounceTimeout = 250;

const rfxSpatialReferencePopoverCss = ":root{--calcite-color-brand:#007ac2;--calcite-color-brand-hover:#00619b;--calcite-color-brand-press:#004874;--calcite-color-status-info:#00619b;--calcite-color-status-success:#35ac46;--calcite-color-status-warning:#edd317;--calcite-color-status-danger:#d83020;--calcite-color-status-danger-hover:#a82b1e;--calcite-color-status-danger-press:#7c1d13;--calcite-color-background:#f8f8f8;--calcite-color-foreground-1:#ffffff;--calcite-color-foreground-2:#f3f3f3;--calcite-color-foreground-3:#eaeaea;--calcite-color-text-1:#151515;--calcite-color-text-2:#4a4a4a;--calcite-color-text-3:#6a6a6a;--calcite-color-text-inverse:#ffffff;--calcite-color-text-link:#00619b;--calcite-color-border-1:#cacaca;--calcite-color-border-2:#d4d4d4;--calcite-color-border-3:#dfdfdf;--calcite-color-border-input:#949494;--rfx-quarter-spacing:0.25rem;--rfx-half-spacing:0.5rem;--rfx-three-quarter-spacing:0.75rem;--rfx-full-spacing:1rem;--rfx-component-default-width:100%;--rfx-ui-border-input:var(--calcite-color-border-2);--rfx-popover-content-min-height:30vh;--rfx-popover-content-max-height:60vh;--rfx-popover-content-height:45vh;--rfx-widget-content-height:30vh}:host{overflow-y:hidden;display:flex;flex-direction:column;--calcite-ui-border-input:var(--analysis-ui-border-input);height:var(--rfx-popover-content-height);min-width:20rem;max-width:27rem}rfx-tree{flex:1}";

const RfxSpatialReferencePopover = class {
    constructor(hostRef) {
        (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.spatialReferenceValueChange = (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "spatialReferenceValueChange", 7);
        this.spatialReferencePopoverDismissed = (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "spatialReferencePopoverDismissed", 7);
        /**
         * @category private
         * Current text that is being used to filter the list of spatial references.
         */
        this.searchText = "";
        /**
         * Returns a list of matching spatial references
         * This is a debounced version of filterSpatialReferences
         * @param {string} searchString the search stringFields
         * @returns {NestedObject} the list of matching spatial references
         */
        this.performantFilterSpatialReferences = debounce((searchString) => {
            this.updateSearchResults(searchString);
        }, searchDebounceTimeout, { leading: false, trailing: true });
        this.defaultWkid = 4326;
        this.value = undefined;
        this.hideCategories = undefined;
        this.searchResults = undefined;
    }
    /**
     * @category Public
     * @returns { Promise<string | undefined> } the description of the spatial reference
     */
    async getSRDescription() {
        if (this.value?.latestWkid !== undefined) {
            return Promise.resolve((0,_spatial_reference_helper_42965f73_js__WEBPACK_IMPORTED_MODULE_28__.a)(this.value?.latestWkid));
        }
        else {
            return Promise.resolve(undefined);
        }
    }
    /**
     * @category lifecycle
     */
    async componentWillLoad() {
        ({ strings: this.strings, dir: this.dir } = await (0,_localization_helper_4819b67d_js__WEBPACK_IMPORTED_MODULE_3__.b)(this.hostElement, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.g)(".")));
        this.value = this.value ?? { latestWkid: this.defaultWkid };
        const filteredSrCategories = this.filterSrCategories(_spatial_reference_helper_42965f73_js__WEBPACK_IMPORTED_MODULE_28__.s);
        this.visibleSrCategories = this.translateSrCategories(filteredSrCategories);
    }
    //--------------------------------------------------------------------------
    //
    //  Private Methods
    //
    //--------------------------------------------------------------------------
    /**
     * translate the spatial reference categories
     * @param {NestedObject} untranslatedSrCategories the untranslated spatial reference categories, as defined in utils
     * @returns {NestedObject} the translated spatial reference categories
     * @category private
     */
    translateSrCategories(untranslatedSrCategories) {
        const translatedSrCategories = {};
        this.recursiveTranslate(untranslatedSrCategories, translatedSrCategories);
        return translatedSrCategories;
    }
    /**
     * helper recursive function to translate the spatial reference categories
     * @param {NestedObject} obj - the object to translate
     * @param {NestedObject} translatedObj - the translated object
     */
    recursiveTranslate(obj, translatedObj) {
        Object.keys(obj).forEach((key) => {
            const translatedKey = this.getTranslatedKey(key); // try to translate the key, if not found, use the key as is
            if (typeof obj[key] === "object") {
                translatedObj[translatedKey] = {}; // create the nested object (it will be filled/copied during recursion)
                this.recursiveTranslate(obj[key], translatedObj[translatedKey]);
            }
            else {
                translatedObj[translatedKey] = obj[key];
            }
        });
    }
    /**
     * Helper function to try to translate the key, if not found, return the key as is
     * @param {string} key - the key/string to translate
     * @returns {string} the translated key or the key as is
     * @category private
     */
    getTranslatedKey(key) {
        return key in this.strings ? this.strings[key] : key;
    }
    /**
     * remove the categories that are in the hideCategories array
     * @param {NestedObject} obj - the object to filter
     * @returns {NestedObject} the filtered object
     * @category private
     */
    filterSrCategories(obj) {
        const filteredObj = {};
        Object.keys(obj).forEach((key) => {
            if (this.hideCategories === undefined || this.hideCategories?.includes(key) === false) {
                if (typeof obj[key] === "object") {
                    filteredObj[key] = this.filterSrCategories(obj[key]);
                }
                else {
                    filteredObj[key] = obj[key];
                }
            }
        });
        return filteredObj;
    }
    /**
     * Stores the wkid as the components value.
     * @param {string} wkid - the wkid of the spatial reference as a string
     */
    setSpatialRef(wkid) {
        this.value = { latestWkid: Number(wkid) };
        this.spatialReferenceValueChange.emit(this.value);
    }
    /**
     * Select the first child on Enter key click
     * OR
     * Clear any selection while user is entering values and use the default wkid
     * @param {KeyboardEvent} event - The keyboard event
     */
    inputKeyDown(event) {
        if (event.key === "Enter") {
            this.selectFirstChild(true);
        }
    }
    /**
     * Select the first child from the tree.
     * @param {boolean} autoFocus - indicate if focus should also be shifted to the first child.
     */
    selectFirstChild(autoFocus) {
        const wkidContainer = this.treeElement;
        const firstChild = wkidContainer?.shadowRoot?.querySelector("calcite-tree-item:not([has-children]):not([data-key='placeholder'])") || undefined;
        if (wkidContainer !== undefined && firstChild !== undefined) {
            firstChild.selected = true;
            this.setSpatialRef(firstChild.dataset.key ?? "");
            if (autoFocus) {
                firstChild.focus();
            }
        }
    }
    /**
     * Updates this.searchResults with the results of the search
     * Separated from performantFilterSpatialReferences to allow for testing
     * @param {string} searchString - the search text
     */
    updateSearchResults(searchString) {
        this.searchResults = (0,_spatial_reference_helper_42965f73_js__WEBPACK_IMPORTED_MODULE_28__.b)(searchString);
    }
    /**
     * Set the search text State and cause render.
     * @param {CustomEvent} event the calcite input event to get the value from
     */
    searchSpatialReferences(event) {
        if (event.target !== null) {
            this.searchText = event.target.value ?? "";
            if (this.searchText.length > 1) {
                this.performantFilterSpatialReferences(this.searchText);
            }
            else {
                this.searchResults = undefined;
            }
        }
    }
    /**
     * @category lifecycle
     */
    render() {
        return ((0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.H, { dir: this.dir }, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-panel", { closable: false, closed: false, onCalcitePanelClose: () => this.spatialReferencePopoverDismissed.emit(this.value) }, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-input", { onCalciteInputInput: (evt) => this.searchSpatialReferences(evt), onKeyDown: (evt) => this.inputKeyDown(evt), placeholder: this.strings.searchPlaceholder, scale: _ui_utils_928a4096_js__WEBPACK_IMPORTED_MODULE_4__.U.Scale, type: "search", icon: true, autofocus: true }), this.searchText.length > 1 && (0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_8__.i)(this.searchResults) && ((0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { alignment: "center" }, this.strings.noResults)), (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("rfx-tree", { key: "tree", ref: (el) => (this.treeElement = el), data: this.searchResults !== undefined && this.searchText.length > 0
                ? this.searchResults
                : this.visibleSrCategories, value: this.value && `${this.value?.latestWkid}`, onRfxTreeValueChange: () => {
                this.setSpatialRef(this.treeElement.value);
            } }), (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { appearance: "solid", scale: _ui_utils_928a4096_js__WEBPACK_IMPORTED_MODULE_4__.U.Scale, width: "full", slot: "footer-actions", onClick: () => this.spatialReferencePopoverDismissed.emit(this.value) }, this.strings.done))));
    }
    static get assetsDirs() { return ["t9n"]; }
    get hostElement() { return (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.a)(this); }
};
RfxSpatialReferencePopover.style = rfxSpatialReferencePopoverCss;



//# sourceMappingURL=rfx-args-editor_27.entry.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/sanitize-number-d84114f7.js":
/*!************************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/sanitize-number-d84114f7.js ***!
  \************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ formatNumberToLocale),
/* harmony export */   f: () => (/* binding */ formatNumber),
/* harmony export */   i: () => (/* binding */ isValidNumber),
/* harmony export */   p: () => (/* binding */ parseNumber),
/* harmony export */   s: () => (/* binding */ sanitizeNumber)
/* harmony export */ });
/* harmony import */ var _localization_helper_4819b67d_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./localization-helper-4819b67d.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/localization-helper-4819b67d.js");
/* harmony import */ var _type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./type-gaurds-1840747f.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/type-gaurds-1840747f.js");



/**
 * Indicates if a provided number value is valid.
 * An invalid value is: undefined | NaN | Infinite | -Infinite | null
 * See for more details:
 *   - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isFinite
 *   - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN
 * @param {number | undefined | null} value value to check
 * @returns {boolean} if valid or not
 */
function isValidNumber(value) {
    return value !== undefined && value !== null && Number.isNaN(value) === false && Number.isFinite(value) === true;
}
/**
 * Returns a string representation of the provided number for use with calcite-input. It also
 * guards against invalid types following this logic:
 *   - If the value is valid (not NaN, finite), the value is returned as a string
 *   - If not and if a valid default value is provided, the default value is returned as a string
 *   - If not, an empty string is returned
 * @param value
 * @param defaultValue
 * @returns a sanitized string
 */
function sanitizeNumber(value, defaultValue) {
    let returnedValue;
    if (value !== null) {
        const testedValue = typeof value === "string" ? Number.parseFloat(value) : value;
        if (isValidNumber(testedValue))
            returnedValue = testedValue;
        else if (isValidNumber(defaultValue))
            returnedValue = defaultValue;
    }
    return returnedValue === undefined ? "" : `${returnedValue}`;
}
/**
 * Parses a value string to a number for use with calcite-input. If the string is empty, it will return undefined.
 * If the string is otherwise invalid, it will return NaN.
 * @param value calcite-input value
 * @returns {number | undefined} the parsed number
 */
function parseNumber(value) {
    if (value === "")
        return undefined;
    return Number.parseFloat(value);
}
/**
 * Formats a number to a specified number of decimal places.
 *
 * @param {number} value - The number to format.
 * @param {number} [fractionDigits=3] - The number of decimal places to include in the formatted number. Defaults to 3.
 * @returns {number|undefined} - The formatted number, or undefined if the input value is empty.
 */
function formatNumber(value, fractionDigits = 3) {
    if ((0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_1__.i)(value))
        return undefined;
    return Number.parseFloat(value.toFixed(fractionDigits));
}
/**
 * Formats a number or string representing a number according to the locale, passing Intl number format options
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/ReferenceGlobal_Objects/Intl/NumberFormat/NumberFormat#options
 * @param {number | string | undefined} value to be formatted and localized
 * @param {Intl.NumberFormatOptions} formatOptions options object matching Intl.NumberFormat
 * @returns {string} localized / rounded string
 */
function formatNumberToLocale(value, formatOptions) {
    let formattedValue = "";
    if (!(0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_1__.i)(value) && !Number.isNaN(value)) {
        const localeCode = (0,_localization_helper_4819b67d_js__WEBPACK_IMPORTED_MODULE_0__.g)().locale;
        formattedValue = Intl.NumberFormat(localeCode, formatOptions).format(Number(value));
    }
    return formattedValue;
}



//# sourceMappingURL=sanitize-number-d84114f7.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/spatial-reference-helper-42965f73.js":
/*!*********************************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/spatial-reference-helper-42965f73.js ***!
  \*********************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ getSpatialReferenceDescription),
/* harmony export */   b: () => (/* binding */ filterSpatialReferences),
/* harmony export */   f: () => (/* binding */ flattenObject),
/* harmony export */   g: () => (/* binding */ getWkidMap),
/* harmony export */   s: () => (/* binding */ srCategories)
/* harmony export */ });
const srCategories = {
    "Geographic Coordinate Systems": {
        Africa: {
            "4143": "Abidjan 1987",
            "4168": "Accra",
            "4201": "Adindan",
            "4205": "Afgooye",
            "4206": "Agadez",
            "4204": "Ain el Abd 1970",
            "4209": "Arc 1950",
            "4210": "Arc 1960",
            "4713": "Ayabelle Lighthouse",
            "4213": "Beduaram",
            "6883": "Bioko",
            "4165": "Bissau",
            "4220": "Camacupa",
            "8694": "Camacupa_2015",
            "4222": "Cape",
            "4223": "Carthage",
            "4816": "Carthage (Paris)",
            "37225": "Carthage (grads)",
            "4315": "Conakry 1905",
            "4226": "Cote d\u0027Ivoire",
            "4155": "Dabola 1981",
            "4228": "Douala",
            "4192": "Douala 1948",
            "4229": "Egypt 1907",
            "4199": "Egypt 1930",
            "4706": "Egypt Gulf of Suez S-650 TL",
            "4230": "European Datum 1950",
            "4159": "European Libyan Datum 1979",
            "6894": "Gambia",
            "4197": "Garoua",
            "4148": "Hartebeesthoek 1994",
            "4697": "IGC 1962 Arc of the 6th Parallel South",
            "4701": "IGCB 1955",
            "4700": "IGN Astro 1960",
            "4679": "Jouik 1961",
            "4696": "Kasai 1953",
            "4695": "Katanga 1955",
            "4198": "Kousseri",
            "4246": "Kuwait Oil Company",
            "4319": "Kuwait Utility",
            "4754": "LGD2006",
            "4699": "Le Pouce 1934",
            "4250": "Leigon",
            "4251": "Liberia 1964",
            "4142": "Locodjo 1965",
            "4252": "Lome",
            "4266": "M\u0027poraloko",
            "4128": "Madzansua",
            "4256": "Mahe 1971",
            "4259": "Malongo 1987",
            "4260": "Manoca",
            "4193": "Manoca 1962",
            "4262": "Massawa",
            "4702": "Mauritania 1999",
            "4261": "Merchich",
            "104261": "Merchich (degrees)",
            "4705": "Mhast (Offshore)",
            "4704": "Mhast (Onshore)",
            "4703": "Mhast 1951",
            "4263": "Minna",
            "4130": "Moznet",
            "4270": "Nahrwan 1967",
            "4318": "National Geodetic Network (Kuwait)",
            "4307": "Nord Sahara 1959",
            "4680": "Nouakchott 1965",
            "4129": "Observatario",
            "4281": "Palestine 1923",
            "4620": "Point 58",
            "4282": "Pointe Noire",
            "4286": "Qatar 1948",
            "4285": "Qatar 1974",
            "4046": "RGRDC 2005",
            "8699": "RSAO13",
            "4293": "Schwarzeck",
            "4174": "Sierra Leone 1924",
            "104103": "Sierra Leone 1960",
            "4175": "Sierra Leone 1968",
            "4164": "South Yemen",
            "4296": "Sudan",
            "4297": "Tananarive 1925",
            "4810": "Tananarive 1925 (Paris)",
            "4127": "Tete",
            "4303": "Trucial Coast 1948",
            "4304": "Voirol 1875",
            "4811": "Voirol 1875 (Paris)",
            "104139": "Voirol 1875 (grads)",
            "4821": "Voirol 1879 (Paris)",
            "4671": "Voirol 1879 (degrees)",
            "104140": "Voirol 1879 (grads)",
            "4163": "Yemen NGN 1996",
            "4310": "Yoff"
        },
        Antarctica: {
            "4176": "Australian Antarctic 1998",
            "4715": "Camp Area Astro",
            "4736": "Deception Island",
            "4636": "Petrels 1972",
            "4637": "Pointe Geologie Perroud 1950",
            "7073": "RGTAAF07",
            "7133": "RGTAAF07 (lon-lat)",
            "4764": "RSRGD2000"
        },
        Asia: {
            "6881": "Aden 1925",
            "4204": "Ain el Abd 1970",
            "4211": "Batavia",
            "4813": "Batavia (Jakarta)",
            "4214": "Beijing 1954",
            "6882": "Bekaa Valley 1920",
            "4219": "Bukit Rimpah",
            "4490": "China Geodetic Coordinate System 2000",
            "4755": "DGN 1995",
            "5264": "DRUKREF 03",
            "4227": "Deir ez Zor",
            "4154": "European 1950 (ED77)",
            "4230": "European Datum 1950",
            "37202": "Everest - Bangladesh",
            "37203": "Everest - India and Nepal",
            "4132": "FD 1958",
            "4232": "Fahud",
            "5246": "GDBD2009",
            "4742": "GDM 2000",
            "104022": "GGD",
            "4682": "Gulshan 303",
            "4613": "Gunung Segara",
            "4820": "Gunung Segara (Jakarta)",
            "4147": "Hanoi 1972",
            "4255": "Herat North",
            "4738": "Hong Kong 1963",
            "4739": "Hong Kong 1963 (67)",
            "4611": "Hong Kong 1980",
            "8427": "Hong Kong Geodetic CS",
            "4236": "Hu Tzu Shan",
            "6983": "IG05 Intermediate CRS",
            "6990": "IG05(2012) Intermediate CRS",
            "7136": "IGD05",
            "7139": "IGD05(2012)",
            "4670": "IGM 1995",
            "3889": "IGRS",
            "4667": "IKBD 1992",
            "4239": "Indian 1954",
            "4131": "Indian 1960",
            "4240": "Indian 1975",
            "4238": "Indonesian Datum 1974",
            "4141": "Israel",
            "4612": "JGD 2000",
            "6668": "JGD 2011",
            "104130": "Jordan",
            "9333": "KSA-GRF17",
            "4243": "Kalianpur 1880",
            "4144": "Kalianpur 1937",
            "4145": "Kalianpur 1962",
            "4146": "Kalianpur 1975",
            "4244": "Kandawala",
            "4743": "Karbala 1979 Polservice",
            "4245": "Kertau",
            "4751": "Kertau (RSO)",
            "4737": "Korea Geodetic Datum 2000",
            "4162": "Korean Datum 1985",
            "4166": "Korean Datum 1995",
            "4246": "Kuwait Oil Company",
            "4319": "Kuwait Utility",
            "104009": "Kyrg-06",
            "4677": "Lao 1993",
            "4678": "Lao 1997",
            "4253": "Luzon 1911",
            "104134": "MONREF 1997",
            "104135": "MSK 1942",
            "8818": "MTRF-2000",
            "8428": "Macao 1920",
            "8431": "Macao 2008",
            "4257": "Makassar",
            "4804": "Makassar (Jakarta)",
            "4744": "Nahrwan 1934",
            "4270": "Nahrwan 1967",
            "4693": "Nakhl-e Ghanem",
            "4318": "National Geodetic Network (Kuwait)",
            "6207": "Nepal Nagarkot",
            "4555": "New Beijing",
            "7373": "ONGD14",
            "9294": "ONGD17",
            "104126": "Observatorio Meteorologico 1965",
            "37206": "Oman",
            "4134": "PDO 1993",
            "5546": "PNG94",
            "4683": "PRS 1992",
            "4280": "Padang 1884",
            "4808": "Padang 1884 (Jakarta)",
            "4281": "Palestine 1923",
            "4284": "Pulkovo 1942",
            "4200": "Pulkovo 1995",
            "4614": "QND 1995",
            "4286": "Qatar 1948",
            "4285": "Qatar 1974",
            "4153": "Rassadiran",
            "5233": "SLD99",
            "9470": "SRGI2013",
            "4757": "SVY21",
            "4294": "Segora",
            "4295": "Serindung",
            "37207": "South Asia Singapore",
            "3821": "Taiwan 1967",
            "3824": "Taiwan 1997",
            "4298": "Timbalai 1948",
            "4301": "Tokyo",
            "4303": "Trucial Coast 1948",
            "4756": "VN 2000",
            "4676": "Vientiane 1982",
            "4610": "Xian 1980"
        },
        "Atlantic Ocean": {
            "4712": "Ascension Island 1958",
            "4710": "Astro DOS 71-4",
            "4183": "Azores Central 1948",
            "4665": "Azores Central 1995",
            "4182": "Azores Occidental 1939",
            "4184": "Azores Oriental 1940",
            "4664": "Azores Oriental 1995",
            "4216": "Bermuda 1957",
            "4762": "Bermuda 2000",
            "37241": "Graciosa Base SW 1948",
            "4658": "Hjorsey 1955",
            "4722": "ISTS 061 Astro 1968",
            "4185": "Madeira 1936",
            "37245": "Observ. Meteorologico 1939",
            "9403": "PN68",
            "5013": "PTRA08",
            "4728": "Pico de Las Nieves",
            "4615": "Porto Santo 1936",
            "4663": "Porto Santo 1995",
            "4824": "Principe",
            "4081": "REGCAN95",
            "4463": "RGSPM06",
            "7035": "RGSPM06 (lon-lat)",
            "7886": "SHGD2015",
            "37249": "Sao Braz",
            "4823": "Sao Tome",
            "4292": "Sapper Hill 1943",
            "4616": "Selvagem Grande 1938",
            "7881": "St. Helena Tritan",
            "4734": "Tristan Astro 1968"
        },
        "Australia and New Zealand": {
            "9309": "ATRF2014",
            "4202": "Australian Geodetic Datum 1966",
            "4203": "Australian Geodetic Datum 1984",
            "4673": "Chatham Islands 1979",
            "7844": "GDA2020",
            "4283": "Geocentric Datum of Australia 1994",
            "4167": "NZGD2000",
            "4272": "New Zealand Geodetic Datum 1949"
        },
        Caribbean: {
            "4600": "Anguilla 1957",
            "4601": "Antigua 1943",
            "4212": "Barbados 1938",
            "6135": "CIGD11",
            "4602": "Dominica 1945",
            "4625": "Fort Desaix",
            "4621": "Fort Marigot",
            "37240": "Fort Thomas 1955",
            "4723": "Grand Cayman 1959",
            "4603": "Grenada 1953",
            "4758": "JAD 2001",
            "4241": "Jamaica 1875",
            "4242": "Jamaica 1969",
            "37243": "L.C. 5 Astro 1961",
            "4726": "Little Cayman 1961",
            "4604": "Montserrat 1958",
            "4139": "Puerto Rico",
            "7086": "RGAF09 (lon-lat)",
            "4558": "RRAF 1991",
            "4622": "Sainte Anne",
            "4605": "St. Kitts 1955",
            "4606": "St. Lucia 1955",
            "4607": "St. Vincent 1945"
        },
        "Central America": {
            "8907": "CR-SIRGAS",
            "5365": "CR05",
            "5371": "MARCARIO SOLIS",
            "5451": "Ocotepeque 1935",
            "5467": "Panama-Colon 1911",
            "8972": "SIRGAS-CON DGF00P01",
            "8973": "SIRGAS-CON DGF01P01",
            "8974": "SIRGAS-CON DGF01P02",
            "8975": "SIRGAS-CON DGF02P01",
            "8976": "SIRGAS-CON DGF04P01",
            "8977": "SIRGAS-CON DGF05P01",
            "8978": "SIRGAS-CON DGF06P01",
            "8979": "SIRGAS-CON DGF07P01",
            "8980": "SIRGAS-CON DGF08P01",
            "8981": "SIRGAS-CON SIR09P01",
            "8982": "SIRGAS-CON SIR10P01",
            "8983": "SIRGAS-CON SIR11P01",
            "8984": "SIRGAS-CON SIR13P01",
            "8985": "SIRGAS-CON SIR14P01",
            "8986": "SIRGAS-CON SIR15P01",
            "8987": "SIRGAS-CON SIR17P01",
            "5393": "SIRGAS_ES2007.8",
            "5464": "Sibun Gorge 1922"
        },
        "County Systems": {
            Minnesota: {
                "104700": "NAD 1983 HARN Adj MN Anoka",
                "104701": "NAD 1983 HARN Adj MN Becker",
                "104702": "NAD 1983 HARN Adj MN Beltrami North",
                "104703": "NAD 1983 HARN Adj MN Beltrami South",
                "104704": "NAD 1983 HARN Adj MN Benton",
                "104705": "NAD 1983 HARN Adj MN Big Stone",
                "104706": "NAD 1983 HARN Adj MN Blue Earth",
                "104707": "NAD 1983 HARN Adj MN Brown",
                "104708": "NAD 1983 HARN Adj MN Carlton",
                "104709": "NAD 1983 HARN Adj MN Carver",
                "104710": "NAD 1983 HARN Adj MN Cass North",
                "104711": "NAD 1983 HARN Adj MN Cass South",
                "104712": "NAD 1983 HARN Adj MN Chippewa",
                "104713": "NAD 1983 HARN Adj MN Chisago",
                "104714": "NAD 1983 HARN Adj MN Cook North",
                "104715": "NAD 1983 HARN Adj MN Cook South",
                "104716": "NAD 1983 HARN Adj MN Cottonwood",
                "104717": "NAD 1983 HARN Adj MN Crow Wing",
                "104718": "NAD 1983 HARN Adj MN Dakota",
                "104719": "NAD 1983 HARN Adj MN Dodge",
                "104720": "NAD 1983 HARN Adj MN Douglas",
                "104721": "NAD 1983 HARN Adj MN Faribault",
                "104722": "NAD 1983 HARN Adj MN Fillmore",
                "104723": "NAD 1983 HARN Adj MN Freeborn",
                "104724": "NAD 1983 HARN Adj MN Goodhue",
                "104725": "NAD 1983 HARN Adj MN Grant",
                "104726": "NAD 1983 HARN Adj MN Hennepin",
                "104727": "NAD 1983 HARN Adj MN Houston",
                "104728": "NAD 1983 HARN Adj MN Isanti",
                "104729": "NAD 1983 HARN Adj MN Itasca North",
                "104730": "NAD 1983 HARN Adj MN Itasca South",
                "104731": "NAD 1983 HARN Adj MN Jackson",
                "104732": "NAD 1983 HARN Adj MN Kanabec",
                "104733": "NAD 1983 HARN Adj MN Kandiyohi",
                "104734": "NAD 1983 HARN Adj MN Kittson",
                "104735": "NAD 1983 HARN Adj MN Koochiching",
                "104736": "NAD 1983 HARN Adj MN Lac Qui Parle",
                "104737": "NAD 1983 HARN Adj MN Lake of the Woods North",
                "104738": "NAD 1983 HARN Adj MN Lake of the Woods South",
                "104739": "NAD 1983 HARN Adj MN Le Sueur",
                "104740": "NAD 1983 HARN Adj MN Lincoln",
                "104741": "NAD 1983 HARN Adj MN Lyon",
                "104743": "NAD 1983 HARN Adj MN Mahnomen",
                "104744": "NAD 1983 HARN Adj MN Marshall",
                "104745": "NAD 1983 HARN Adj MN Martin",
                "104742": "NAD 1983 HARN Adj MN McLeod",
                "104746": "NAD 1983 HARN Adj MN Meeker",
                "104747": "NAD 1983 HARN Adj MN Morrison",
                "104748": "NAD 1983 HARN Adj MN Mower",
                "104749": "NAD 1983 HARN Adj MN Murray",
                "104750": "NAD 1983 HARN Adj MN Nicollet",
                "104751": "NAD 1983 HARN Adj MN Nobles",
                "104752": "NAD 1983 HARN Adj MN Norman",
                "104753": "NAD 1983 HARN Adj MN Olmsted",
                "104754": "NAD 1983 HARN Adj MN Ottertail",
                "104755": "NAD 1983 HARN Adj MN Pennington",
                "104756": "NAD 1983 HARN Adj MN Pine",
                "104757": "NAD 1983 HARN Adj MN Pipestone",
                "104758": "NAD 1983 HARN Adj MN Polk",
                "104759": "NAD 1983 HARN Adj MN Pope",
                "104760": "NAD 1983 HARN Adj MN Ramsey",
                "104761": "NAD 1983 HARN Adj MN Red Lake",
                "104762": "NAD 1983 HARN Adj MN Redwood",
                "104763": "NAD 1983 HARN Adj MN Renville",
                "104764": "NAD 1983 HARN Adj MN Rice",
                "104765": "NAD 1983 HARN Adj MN Rock",
                "104766": "NAD 1983 HARN Adj MN Roseau",
                "104770": "NAD 1983 HARN Adj MN Scott",
                "104771": "NAD 1983 HARN Adj MN Sherburne",
                "104772": "NAD 1983 HARN Adj MN Sibley",
                "104786": "NAD 1983 HARN Adj MN St Louis",
                "104768": "NAD 1983 HARN Adj MN St Louis Central",
                "104767": "NAD 1983 HARN Adj MN St Louis North",
                "104769": "NAD 1983 HARN Adj MN St Louis South",
                "104773": "NAD 1983 HARN Adj MN Stearns",
                "104774": "NAD 1983 HARN Adj MN Steele",
                "104775": "NAD 1983 HARN Adj MN Stevens",
                "104776": "NAD 1983 HARN Adj MN Swift",
                "104777": "NAD 1983 HARN Adj MN Todd",
                "104778": "NAD 1983 HARN Adj MN Traverse",
                "104779": "NAD 1983 HARN Adj MN Wabasha",
                "104780": "NAD 1983 HARN Adj MN Wadena",
                "104781": "NAD 1983 HARN Adj MN Waseca",
                "104782": "NAD 1983 HARN Adj MN Watonwan",
                "104783": "NAD 1983 HARN Adj MN Winona",
                "104784": "NAD 1983 HARN Adj MN Wright",
                "104785": "NAD 1983 HARN Adj MN Yellow Medicine"
            },
            Wisconsin: { "104808": "NAD 1983 HARN Adj. Wisconsin Chippewa WCCS" }
        },
        Europe: {
            "4901": "ATF (Paris)",
            "9384": "AbInvA96_2020-IRF",
            "4191": "Albanian 1987",
            "4289": "Amersfoort",
            "7798": "BGS2005",
            "4809": "Belge 1950 (Brussels)",
            "4313": "Belge 1972",
            "4801": "Bern 1898 (Bern)",
            "4306": "Bern 1938",
            "6311": "CGRS 1993",
            "4149": "CH1903",
            "4150": "CH1903+",
            "104131": "D48",
            "5681": "DB_REF",
            "4274": "Datum 73",
            "104105": "Datum Lisboa Bessel",
            "104106": "Datum Lisboa Hayford",
            "4316": "Dealul Piscului 1933 (Romania)",
            "4317": "Dealul Piscului 1970 (Romania)",
            "4314": "Deutsches Hauptdreiecksnetz",
            "9758": "ECML14_NB-IRF",
            "9739": "EOS21-IRF",
            "9059": "ETRF 1989",
            "9067": "ETRF2000",
            "9702": "ETRF2000-PL",
            "9068": "ETRF2005",
            "9069": "ETRF2014",
            "9060": "ETRF90",
            "9061": "ETRF91",
            "9062": "ETRF92",
            "9063": "ETRF93",
            "9064": "ETRF94",
            "9065": "ETRF96",
            "9066": "ETRF97",
            "4258": "ETRS 1989",
            "104129": "EUREF FIN",
            "9763": "EWR2-IRF",
            "104101": "Estonia 1937",
            "4133": "Estonia 1992",
            "4180": "Estonia 1997",
            "4668": "European 1979",
            "4230": "European Datum 1950",
            "4231": "European Datum 1987",
            "4741": "FD 1954",
            "5593": "FEH2010",
            "9453": "GBK19-IRF",
            "4121": "GGRS 1987",
            "7683": "GSK-2011",
            "4120": "Greek",
            "4815": "Greek (Athens)",
            "8042": "Gusterberg (Ferro)",
            "3819": "HD1909",
            "9299": "HS2-IRF",
            "4761": "HTRS96",
            "104102": "Hermannskogel",
            "4658": "Hjorsey 1955",
            "4237": "Hungarian Datum 1972",
            "4173": "IRENET95",
            "4659": "ISN 1993",
            "5324": "ISN 2004",
            "8086": "ISN2016",
            "9140": "KOSOVAREF01",
            "4123": "Kartastokoordinaattijarjestelma",
            "4661": "LKS 1992",
            "4669": "LKS 1994",
            "9547": "LTF2004(G)",
            "4207": "Lisbon",
            "4803": "Lisbon (Lisbon)",
            "4666": "Lisbon 1890",
            "4904": "Lisbon 1890 (Lisbon)",
            "4181": "Luxembourg 1930",
            "4805": "MGI (Ferro)",
            "3906": "MGI 1901",
            "9372": "MML07-IRF",
            "4023": "MOLDREF99",
            "4903": "Madrid 1870 (Madrid)",
            "4312": "Militar-Geographische Institut",
            "4265": "Monte Mario",
            "4806": "Monte Mario (Rome)",
            "4273": "NGO 1948",
            "4817": "NGO 1948 (Oslo)",
            "4807": "NTF (Paris)",
            "4902": "Nord de Guerre (Paris)",
            "4275": "Nouvelle Triangulation Francaise",
            "4279": "OS (SN) 1980",
            "4277": "OSGB 1936",
            "4278": "OSGB 1970 (SN)",
            "4188": "OSNI 1952",
            "4746": "PD 83",
            "4740": "PZ 1990",
            "104017": "PZ-90.02",
            "104018": "PZ-90.11",
            "4284": "Pulkovo 1942",
            "4179": "Pulkovo 1942 Adj 1958",
            "4178": "Pulkovo 1942 Adj 1983",
            "4200": "Pulkovo 1995",
            "4745": "RD 83",
            "6706": "RDN2008",
            "4171": "RGF 1993",
            "7084": "RGF 1993 (lon-lat)",
            "4124": "RT 1990",
            "4308": "RT38",
            "4814": "RT38 (Stockholm)",
            "4215": "Reseau National Belge 1950",
            "4657": "Reykjavik 1900",
            "104127": "Roma 1940",
            "37257": "S-42 Hungary",
            "4156": "S-JTSK",
            "4818": "S-JTSK (Ferro)",
            "8351": "S-JTSK [JTSK03]",
            "5228": "S-JTSK-05",
            "5229": "S-JTSK-05 (Ferro)",
            "8685": "SRB_ETRS89",
            "4075": "SREF98",
            "4619": "SWEREF99",
            "4765": "Slovenia 1996",
            "8043": "St. Stephen (Ferro)",
            "4151": "Swiss TRF 1995",
            "4299": "TM65",
            "4300": "TM75",
            "9364": "TPEN11-IRF",
            "5252": "TUREF",
            "5561": "Ukraine 2000",
            "104050": "Xrail84",
            "4753": "fk89"
        },
        "Indian Ocean": {
            "4708": "Anna 1 Astro 1965",
            "4475": "Cadastre 1997",
            "4632": "Combani 1950",
            "104028": "GDM2008",
            "4684": "Gan 1970",
            "4646": "Grand Comoros",
            "4724": "ISTS 073 Astro 1969",
            "4698": "Kerguelen Island 1949",
            "4256": "Mahe 1971",
            "4470": "RGM04",
            "7039": "RGM04 (lon-lat)",
            "4627": "RGR 1992",
            "7037": "RGR 1992 (lon-lat)",
            "7073": "RGTAAF07",
            "7133": "RGTAAF07 (lon-lat)",
            "4626": "Reunion 1947",
            "6892": "South East Island 1943"
        },
        "North America": {
            "4196": "Ammassalik 1958",
            "4212": "Barbados 1938",
            "4216": "Bermuda 1957",
            "4762": "Bermuda 2000",
            "4747": "Greenland 1996",
            "4660": "Helle 1954",
            "4483": "Mexican Datum of 1993",
            "6365": "Mexico ITRF2008",
            "4194": "Qornoq 1927",
            "5489": "RGAF09",
            "4638": "Saint Pierre et Miquelon 1950",
            "4195": "Scoresbysund 1952",
            Canada: {
                "4122": "Average Terrestrial System 1977",
                "4267": "NAD 1927",
                "4609": "NAD 1927 (CGQ77)",
                "4608": "NAD 1927 (Definition 1976)",
                "4269": "NAD 1983",
                "4617": "NAD 1983 (CSRS)",
                "8237": "NAD 1983 (CSRS) v2",
                "8240": "NAD 1983 (CSRS) v3",
                "8246": "NAD 1983 (CSRS) v4",
                "8249": "NAD 1983 (CSRS) v5",
                "8252": "NAD 1983 (CSRS) v6",
                "8255": "NAD 1983 (CSRS) v7",
                "8232": "NAD 1983 (CSRS96)"
            },
            "USA and territories": {
                "37260": "Alaskan Islands",
                "4169": "American Samoa 1962",
                "104024": "California SRS Epoch 2017.50 (NAD83)",
                "4717": "Cape Canaveral",
                "4675": "Guam 1963",
                "4267": "NAD 1927",
                "4269": "NAD 1983",
                "6318": "NAD 1983 (2011)",
                "6783": "NAD 1983 (CORS96)",
                "8860": "NAD 1983 (FBN)",
                "8545": "NAD 1983 (HARN Corrected)",
                "4759": "NAD 1983 (NSRS2007)",
                "4152": "NAD 1983 HARN",
                "4135": "Old Hawaiian",
                "104138": "Old Hawaiian Intl 1924",
                "4139": "Puerto Rico",
                "4138": "St. George Island",
                "4136": "St. Lawrence Island",
                "4137": "St. Paul Island"
            }
        },
        Oceans: { "Pacific Ocean": { "8900": "RGWF96", "8902": "RGWF96 (lon-lat)" } },
        "Pacific Ocean": {
            "37260": "Alaskan Islands",
            "4169": "American Samoa 1962",
            "4709": "Astro Beacon E 1945",
            "4711": "Astronomical Station 1952",
            "104112": "Bab South",
            "4714": "Bellevue IGN",
            "4716": "Canton Astro 1966",
            "4672": "Chatham Island Astro 1971",
            "37218": "DOS 1968",
            "4719": "Easter Island 1967",
            "4688": "Fatu Iva 1972",
            "4721": "Fiji 1956",
            "4720": "Fiji 1986",
            "37221": "GUX 1 Astro",
            "4675": "Guam 1963",
            "4641": "IGN53 Mare",
            "4633": "IGN56 Lifou",
            "4689": "IGN63 Hiva Oa",
            "4662": "IGN72 Grande Terre",
            "4630": "IGN72 Nuku Hiva",
            "4725": "Johnston Island 1961",
            "4735": "Kusaie Astro 1951",
            "4639": "MOP78",
            "104113": "Majuro",
            "4692": "Maupiti 1983",
            "4727": "Midway Astro 1961",
            "4691": "Moorea 1987",
            "6325": "NAD 1983 (MA11)",
            "6322": "NAD 1983 (PA11)",
            "9072": "NAD 1983 MARP00",
            "9075": "NAD 1983 PACP00",
            "4644": "NEA74 Noumea",
            "4135": "Old Hawaiian",
            "104138": "Old Hawaiian Intl 1924",
            "4763": "Pitcairn 2006",
            "4729": "Pitcairn Astro 1967",
            "104109": "Pohnpei",
            "4645": "RGNC 1991",
            "4749": "RGNC 1991-93",
            "4687": "RGPF",
            "4643": "ST71 Belep",
            "4642": "ST84 Ile des Pins",
            "4750": "ST87 Ouvea",
            "4730": "Santo DOS 1965",
            "4718": "Solomon 1968",
            "5886": "TGD2005",
            "4629": "Tahaa 1954",
            "4628": "Tahiti",
            "4690": "Tahiti 1979",
            "4707": "Tern Island Astro 1961",
            "4748": "Vanua Levu 1915",
            "4752": "Viti Levu 1912",
            "4731": "Viti Levu 1916",
            "4733": "Wake Island Astro 1952",
            "4732": "Wake-Eniwetok 1960"
        },
        "Solar System": {
            "104975": "Sun 2015",
            "Asteroid Belt": { "104972": "1 Ceres 2015", "104973": "4 Vesta 2015" },
            Earth: { "104903": "Moon 2000" },
            Jupiter: {
                "104909": "Adrastea 2000",
                "104910": "Amalthea 2000",
                "104911": "Ananke 2000",
                "104912": "Callisto 2000",
                "104913": "Carme 2000",
                "104914": "Elara 2000",
                "104915": "Europa 2000",
                "104916": "Ganymede 2000",
                "104917": "Himalia 2000",
                "104918": "Io 2000",
                "104908": "Jupiter 2000",
                "104919": "Leda 2000",
                "104920": "Lysithea 2000",
                "104921": "Metis 2000",
                "104922": "Pasiphae 2000",
                "104923": "Sinope 2000",
                "104924": "Thebe 2000"
            },
            Mars: {
                "104906": "Deimos 2000",
                "104904": "Mars 1979",
                "104905": "Mars 2000",
                "104971": "Mars 2000 (Sphere)",
                "104907": "Phobos 2000"
            },
            Mercury: { "104900": "Mercury 2000", "104974": "Mercury 2015" },
            Neptune: {
                "104961": "Despina 2000",
                "104962": "Galatea 2000",
                "104963": "Larissa 2000",
                "104964": "Naiad 2000",
                "104960": "Neptune 2000",
                "104965": "Nereid 2000",
                "104966": "Proteus 2000",
                "104967": "Thalassa 2000",
                "104968": "Triton 2000"
            },
            Pluto: { "104970": "Charon 2000", "104969": "Pluto 2000" },
            Saturn: {
                "104926": "Atlas 2000",
                "104927": "Calypso 2000",
                "104928": "Dione 2000",
                "104929": "Enceladus 2000",
                "104930": "Epimetheus 2000",
                "104931": "Helene 2000",
                "104932": "Hyperion 2000",
                "104933": "Iapetus 2000",
                "104934": "Janus 2000",
                "104935": "Mimas 2000",
                "104936": "Pan 2000",
                "104937": "Pandora 2000",
                "104938": "Phoebe 2000",
                "104939": "Prometheus 2000",
                "104940": "Rhea 2000",
                "104925": "Saturn 2000",
                "104941": "Telesto 2000",
                "104942": "Tethys 2000",
                "104943": "Titan 2000"
            },
            Uranus: {
                "104945": "Ariel 2000",
                "104946": "Belinda 2000",
                "104947": "Bianca 2000",
                "104948": "Cordelia 2000",
                "104949": "Cressida 2000",
                "104950": "Desdemona 2000",
                "104951": "Juliet 2000",
                "104952": "Miranda 2000",
                "104953": "Oberon 2000",
                "104954": "Ophelia 2000",
                "104955": "Portia 2000",
                "104956": "Puck 2000",
                "104957": "Rosalind 2000",
                "104958": "Titania 2000",
                "104959": "Umbriel 2000",
                "104944": "Uranus 2000"
            },
            Venus: { "104901": "Venus 1985", "104902": "Venus 2000" }
        },
        "South America": {
            "4208": "Aratu",
            "4218": "Bogota",
            "4802": "Bogota (Bogota)",
            "4623": "CSG 1967",
            "4221": "Campo Inchauspe",
            "4160": "Chos Malal 1914",
            "4224": "Chua",
            "4225": "Corrego Alegre",
            "5524": "Corrego Alegre 1961",
            "4235": "Guyane Francaise",
            "4254": "Hito XVIII 1963",
            "4247": "La Canoa",
            "4249": "Lake",
            "4288": "Loma Quintana",
            "4686": "MAGNA",
            "5354": "MARGEN",
            "9251": "MMN",
            "9253": "MMS",
            "4157": "Mount Dillon",
            "4158": "Naparima 1955",
            "4271": "Naparima 1972",
            "4172": "POSGAR",
            "4694": "POSGAR 1994",
            "4190": "POSGAR 1998",
            "5340": "POSGAR 2007",
            "4161": "Pampa del Castillo",
            "5373": "Peru96",
            "4248": "Provisional South American Datum 1956",
            "9696": "REDGEOMIN",
            "4189": "REGVEN",
            "4624": "RGFG 1995",
            "7041": "RGFG95 (lon-lat)",
            "5527": "SAD 1969 (96)",
            "4170": "SIRGAS",
            "4674": "SIRGAS 2000",
            "8972": "SIRGAS-CON DGF00P01",
            "8973": "SIRGAS-CON DGF01P01",
            "8974": "SIRGAS-CON DGF01P02",
            "8975": "SIRGAS-CON DGF02P01",
            "8976": "SIRGAS-CON DGF04P01",
            "8977": "SIRGAS-CON DGF05P01",
            "8978": "SIRGAS-CON DGF06P01",
            "8979": "SIRGAS-CON DGF07P01",
            "8980": "SIRGAS-CON DGF08P01",
            "8981": "SIRGAS-CON SIR09P01",
            "8982": "SIRGAS-CON SIR10P01",
            "8983": "SIRGAS-CON SIR11P01",
            "8984": "SIRGAS-CON SIR13P01",
            "8985": "SIRGAS-CON SIR14P01",
            "8986": "SIRGAS-CON SIR15P01",
            "8987": "SIRGAS-CON SIR17P01",
            "9184": "SIRGAS-Chile",
            "8949": "SIRGAS-Chile 2010",
            "9148": "SIRGAS-Chile 2013",
            "9153": "SIRGAS-Chile 2016",
            "5381": "SIRGAS-ROU98",
            "4292": "Sapper Hill 1943",
            "4618": "South American Datum 1969",
            "9248": "Tapi Aike",
            "4302": "Trinidad 1903",
            "4309": "Yacare",
            "4311": "Zanderij"
        },
        "Spheroid-based": {
            "4001": "Airy 1830",
            "4002": "Airy modified",
            "4003": "Australian National",
            "4035": "Authalic sphere",
            "37008": "Authalic sphere (ARCINFO)",
            "4122": "Average Terrestrial System 1977",
            "4004": "Bessel 1841",
            "4006": "Bessel Namibia",
            "4005": "Bessel modified",
            "4007": "Clarke 1858",
            "4008": "Clarke 1866",
            "4052": "Clarke 1866 Authalic Sphere",
            "4009": "Clarke 1866 Michigan",
            "4034": "Clarke 1880",
            "4013": "Clarke 1880 (Arc)",
            "4010": "Clarke 1880 (Benoit)",
            "4011": "Clarke 1880 (IGN)",
            "4012": "Clarke 1880 (RGS)",
            "4014": "Clarke 1880 (SGA)",
            "4015": "Everest (definition 1937)",
            "4044": "Everest (definition 1962)",
            "4016": "Everest (definition 1967)",
            "4045": "Everest (definition 1975)",
            "4042": "Everest 1830",
            "4018": "Everest Modified",
            "37006": "Everest modified 1969",
            "37002": "Fischer 1960",
            "37003": "Fischer 1968",
            "37004": "Fischer modified",
            "4031": "GEM gravity potential model",
            "4036": "GRS 1967",
            "4019": "GRS 1980",
            "4047": "GRS 1980 Authalic Sphere",
            "104047": "GRS 1980 Mean Radius Sphere",
            "4020": "Helmert 1906",
            "37005": "Hough 1960",
            "4054": "Hughes 1980",
            "4021": "Indonesian National",
            "4022": "International 1924",
            "4053": "International 1924 Authalic Sphere",
            "4024": "Krasovsky 1940",
            "4032": "OSU 1986 geoidal model",
            "4033": "OSU 1991 geoidal model",
            "4027": "Plessis 1817",
            "104128": "Sphere EMEP",
            "4028": "Struve 1860",
            "4025": "Transit precise ephemeris",
            "4760": "WGS 1966",
            "37007": "Walbeck",
            "4029": "War Office"
        },
        World: {
            "9006": "IGS00",
            "9012": "IGS05",
            "9014": "IGS08",
            "9019": "IGS14",
            "9003": "IGS97",
            "9009": "IGb00",
            "9017": "IGb08",
            "9380": "IGb14",
            "8988": "ITRF 1988",
            "8989": "ITRF 1989",
            "8990": "ITRF 1990",
            "8991": "ITRF 1991",
            "8992": "ITRF 1992",
            "8993": "ITRF 1993",
            "8994": "ITRF 1994",
            "8995": "ITRF 1996",
            "8996": "ITRF 1997",
            "8997": "ITRF 2000",
            "8998": "ITRF 2005",
            "8999": "ITRF 2008",
            "9000": "ITRF 2014",
            "4276": "NSWC 9Z-2",
            "104017": "PZ-90.02",
            "104018": "PZ-90.11",
            "4760": "WGS 1966",
            "4322": "WGS 1972",
            "4324": "WGS 1972 TBE",
            "4326": "WGS 1984",
            "9055": "WGS 1984 (G1150)",
            "9056": "WGS 1984 (G1674)",
            "9057": "WGS 1984 (G1762)",
            "9053": "WGS 1984 (G730)",
            "9054": "WGS 1984 (G873)",
            "8888": "WGS 1984 (Transit)"
        }
    },
    "Projected Coordinate Systems": {
        "ARC (equal arc-second)": {
            "102421": "WGS84 ARC System Zone 01",
            "102422": "WGS84 ARC System Zone 02",
            "102423": "WGS84 ARC System Zone 03",
            "102424": "WGS84 ARC System Zone 04",
            "102425": "WGS84 ARC System Zone 05",
            "102426": "WGS84 ARC System Zone 06",
            "102427": "WGS84 ARC System Zone 07",
            "102428": "WGS84 ARC System Zone 08",
            "102429": "WGS84 ARC System Zone 09",
            "102430": "WGS84 ARC System Zone 10",
            "102431": "WGS84 ARC System Zone 11",
            "102432": "WGS84 ARC System Zone 12",
            "102433": "WGS84 ARC System Zone 13",
            "102434": "WGS84 ARC System Zone 14",
            "102435": "WGS84 ARC System Zone 15",
            "102436": "WGS84 ARC System Zone 16",
            "102437": "WGS84 ARC System Zone 17",
            "102438": "WGS84 ARC System Zone 18"
        },
        Continental: {
            Africa: {
                "102022": "Africa Albers Equal Area Conic",
                "102023": "Africa Equidistant Conic",
                "102024": "Africa Lambert Conformal Conic",
                "102011": "Africa Sinusoidal"
            },
            Asia: {
                "102012": "Asia Lambert Conformal Conic",
                "102025": "Asia North Albers Equal Area Conic",
                "102026": "Asia North Equidistant Conic",
                "102027": "Asia North Lambert Conformal Conic",
                "102028": "Asia South Albers Equal Area Conic",
                "102029": "Asia South Equidistant Conic",
                "102030": "Asia South Lambert Conformal Conic"
            },
            Europe: {
                "5643": "ED 1950 SPBA LCC",
                "102069": "EMEP 150 Kilometer Grid",
                "102068": "EMEP 50 Kilometer Grid",
                "3035": "ETRS 1989 LAEA",
                "3034": "ETRS 1989 LCC",
                "102013": "Europe Albers Equal Area Conic",
                "102031": "Europe Equidistant Conic",
                "102014": "Europe Lambert Conformal Conic"
            },
            "North America": {
                "3338": "Alaska Albers Equal Area Conic",
                "102001": "Canada Albers Equal Area Conic",
                "102002": "Canada Lambert Conformal Conic",
                "102007": "Hawaii Albers Equal Area Conic",
                "5069": "NAD 1927 Contiguous USA Albers",
                "6350": "NAD 1983 (2011) Contiguous USA Albers",
                "3979": "NAD 1983 CSRS Canada Atlas Lambert",
                "3978": "NAD 1983 Canada Atlas Lambert",
                "5070": "NAD 1983 Contiguous USA Albers",
                "3174": "NAD 1983 Great Lakes Basin Albers",
                "3175": "NAD 1983 Great Lakes and St. Lawrence Albers",
                "5071": "NAD 1983 HARN Contiguous USA Albers",
                "5072": "NAD 1983 NSRS2007 Contiguous USA Albers",
                "102008": "North America Albers Equal Area Conic",
                "102010": "North America Equidistant Conic",
                "102009": "North America Lambert Conformal Conic",
                "102589": "Panhandle Energy Albers",
                "2163": "US National Atlas Equal Area",
                "102003": "USA Contiguous Albers Equal Area Conic",
                "102039": "USA Contiguous Albers Equal Area Conic USGS",
                "102005": "USA Contiguous Equidistant Conic",
                "102004": "USA Contiguous Lambert Conformal Conic",
                "102215": "WGS 1984 Canada Atlas LCC"
            },
            "South America": {
                "102033": "South America Albers Equal Area Conic",
                "102032": "South America Equidistant Conic",
                "102015": "South America Lambert Conformal Conic"
            }
        },
        "County Systems": {
            "102460": "HJAIA_AirportGrid_09March2010",
            "102391": "NAD 1983 (2011) Fargo Ground Coordinate System (US Feet)",
            "8065": "NAD 1983 (2011) PCCS zone 1 (Feet)",
            "8066": "NAD 1983 (2011) PCCS zone 2 (Feet)",
            "8067": "NAD 1983 (2011) PCCS zone 3 (Feet)",
            "8068": "NAD 1983 (2011) PCCS zone 4 (Feet)",
            "7131": "NAD 1983 (2011) San Francisco CS13 (Meters)",
            "7132": "NAD 1983 (2011) San Francisco CS13 (US Feet)",
            "102389": "NAD 1983 Fargo Ground Coordinate System (US Feet)",
            "102390": "NAD 1983 HARN Fargo Ground Coordinate System (US Feet)",
            "102459": "NAD 1983 Idaho - Ada County",
            "102705": "NAD 1983 Nebraska - Lancaster County (US Feet)",
            Illinois: {
                "102901": "NAD 1983 (2011) ICS Aurora (US Feet)",
                "102929": "NAD 1983 (2011) ICS Belleville (US Feet)",
                "102914": "NAD 1983 (2011) ICS Bloomington (US Feet)",
                "102932": "NAD 1983 (2011) ICS Carbondale (US Feet)",
                "102925": "NAD 1983 (2011) ICS Carlinville (US Feet)",
                "102916": "NAD 1983 (2011) ICS Champaign (US Feet)",
                "102924": "NAD 1983 (2011) ICS Charleston (US Feet)",
                "102903": "NAD 1983 (2011) ICS Chicago (US Feet)",
                "102917": "NAD 1983 (2011) ICS Decatur (US Feet)",
                "102928": "NAD 1983 (2011) ICS Effingham (US Feet)",
                "102909": "NAD 1983 (2011) ICS Eureka (US Feet)",
                "102902": "NAD 1983 (2011) ICS Freeport (US Feet)",
                "102915": "NAD 1983 (2011) ICS Galesburg (US Feet)",
                "102922": "NAD 1983 (2011) ICS Jacksonville (US Feet)",
                "102927": "NAD 1983 (2011) ICS Jerseyville (US Feet)",
                "102908": "NAD 1983 (2011) ICS Joliet (US Feet)",
                "102919": "NAD 1983 (2011) ICS Lincoln (US Feet)",
                "102920": "NAD 1983 (2011) ICS Macomb (US Feet)",
                "102933": "NAD 1983 (2011) ICS Metropolis (US Feet)",
                "102905": "NAD 1983 (2011) ICS Moline (US Feet)",
                "102911": "NAD 1983 (2011) ICS Monmouth (US Feet)",
                "102931": "NAD 1983 (2011) ICS Mount Vernon (US Feet)",
                "102930": "NAD 1983 (2011) ICS Olney (US Feet)",
                "102906": "NAD 1983 (2011) ICS Ottawa (US Feet)",
                "102913": "NAD 1983 (2011) ICS Peoria (US Feet)",
                "102910": "NAD 1983 (2011) ICS Pontiac (US Feet)",
                "102918": "NAD 1983 (2011) ICS Quincy (US Feet)",
                "102926": "NAD 1983 (2011) ICS Robinson (US Feet)",
                "102904": "NAD 1983 (2011) ICS Rockford (US Feet)",
                "102921": "NAD 1983 (2011) ICS Springfield (US Feet)",
                "102907": "NAD 1983 (2011) ICS Sterling (US Feet)",
                "102923": "NAD 1983 (2011) ICS Taylorville (US Feet)",
                "102912": "NAD 1983 (2011) ICS Watseka (US Feet)"
            },
            Indiana: {
                Meters: {
                    "7257": "NAD 1983 (2011) InGCS Adams (m)",
                    "7259": "NAD 1983 (2011) InGCS Allen (m)",
                    "7261": "NAD 1983 (2011) InGCS Bartholomew (m)",
                    "7263": "NAD 1983 (2011) InGCS Benton (m)",
                    "7265": "NAD 1983 (2011) InGCS Blackford-Delaware (m)",
                    "7267": "NAD 1983 (2011) InGCS Boone-Hendricks (m)",
                    "7269": "NAD 1983 (2011) InGCS Brown (m)",
                    "7271": "NAD 1983 (2011) InGCS Carroll (m)",
                    "7273": "NAD 1983 (2011) InGCS Cass (m)",
                    "7275": "NAD 1983 (2011) InGCS Clark-Floyd-Scott (m)",
                    "7277": "NAD 1983 (2011) InGCS Clay (m)",
                    "7279": "NAD 1983 (2011) InGCS Clinton (m)",
                    "7281": "NAD 1983 (2011) InGCS Crawford-Lawrence-Orange (m)",
                    "7283": "NAD 1983 (2011) InGCS Daviess-Greene (m)",
                    "7289": "NAD 1983 (2011) InGCS DeKalb (m)",
                    "7285": "NAD 1983 (2011) InGCS Dearborn-Ohio-Switzerland (m)",
                    "7287": "NAD 1983 (2011) InGCS Decatur-Rush (m)",
                    "7291": "NAD 1983 (2011) InGCS Dubois-Martin (m)",
                    "7293": "NAD 1983 (2011) InGCS Elkhart-Kosciusko-Wabash (m)",
                    "7295": "NAD 1983 (2011) InGCS Fayette-Franklin-Union (m)",
                    "7297": "NAD 1983 (2011) InGCS Fountain-Warren (m)",
                    "7299": "NAD 1983 (2011) InGCS Fulton-Marshall-St. Joseph (m)",
                    "7301": "NAD 1983 (2011) InGCS Gibson (m)",
                    "7303": "NAD 1983 (2011) InGCS Grant (m)",
                    "7305": "NAD 1983 (2011) InGCS Hamilton-Tipton (m)",
                    "7307": "NAD 1983 (2011) InGCS Hancock-Madison (m)",
                    "7309": "NAD 1983 (2011) InGCS Harrison-Washington (m)",
                    "7311": "NAD 1983 (2011) InGCS Henry (m)",
                    "7313": "NAD 1983 (2011) InGCS Howard-Miami (m)",
                    "7315": "NAD 1983 (2011) InGCS Huntington-Whitley (m)",
                    "7317": "NAD 1983 (2011) InGCS Jackson (m)",
                    "7319": "NAD 1983 (2011) InGCS Jasper-Porter (m)",
                    "7321": "NAD 1983 (2011) InGCS Jay (m)",
                    "7323": "NAD 1983 (2011) InGCS Jefferson (m)",
                    "7325": "NAD 1983 (2011) InGCS Jennings (m)",
                    "7327": "NAD 1983 (2011) InGCS Johnson-Marion (m)",
                    "7329": "NAD 1983 (2011) InGCS Knox (m)",
                    "7331": "NAD 1983 (2011) InGCS LaGrange-Noble (m)",
                    "7335": "NAD 1983 (2011) InGCS LaPorte-Pulaski-Starke (m)",
                    "7333": "NAD 1983 (2011) InGCS Lake-Newton (m)",
                    "7337": "NAD 1983 (2011) InGCS Monroe-Morgan (m)",
                    "7339": "NAD 1983 (2011) InGCS Montgomery-Putnam (m)",
                    "7341": "NAD 1983 (2011) InGCS Owen (m)",
                    "7343": "NAD 1983 (2011) InGCS Parke-Vermillion (m)",
                    "7345": "NAD 1983 (2011) InGCS Perry (m)",
                    "7347": "NAD 1983 (2011) InGCS Pike-Warrick (m)",
                    "7349": "NAD 1983 (2011) InGCS Posey (m)",
                    "7351": "NAD 1983 (2011) InGCS Randolph-Wayne (m)",
                    "7353": "NAD 1983 (2011) InGCS Ripley (m)",
                    "7355": "NAD 1983 (2011) InGCS Shelby (m)",
                    "7357": "NAD 1983 (2011) InGCS Spencer (m)",
                    "7359": "NAD 1983 (2011) InGCS Steuben (m)",
                    "7361": "NAD 1983 (2011) InGCS Sullivan (m)",
                    "7363": "NAD 1983 (2011) InGCS Tippecanoe-White (m)",
                    "7365": "NAD 1983 (2011) InGCS Vanderburgh (m)",
                    "7367": "NAD 1983 (2011) InGCS Vigo (m)",
                    "7369": "NAD 1983 (2011) InGCS Wells (m)"
                },
                "US Feet": {
                    "7258": "NAD 1983 (2011) InGCS Adams (ftUS)",
                    "7260": "NAD 1983 (2011) InGCS Allen (ftUS)",
                    "7262": "NAD 1983 (2011) InGCS Bartholomew (ftUS)",
                    "7264": "NAD 1983 (2011) InGCS Benton (ftUS)",
                    "7266": "NAD 1983 (2011) InGCS Blackford-Delaware (ftUS)",
                    "7268": "NAD 1983 (2011) InGCS Boone-Hendricks (ftUS)",
                    "7270": "NAD 1983 (2011) InGCS Brown (ftUS)",
                    "7272": "NAD 1983 (2011) InGCS Carroll (ftUS)",
                    "7274": "NAD 1983 (2011) InGCS Cass (ftUS)",
                    "7276": "NAD 1983 (2011) InGCS Clark-Floyd-Scott (ftUS)",
                    "7278": "NAD 1983 (2011) InGCS Clay (ftUS)",
                    "7280": "NAD 1983 (2011) InGCS Clinton (ftUS)",
                    "7282": "NAD 1983 (2011) InGCS Crawford-Lawrence-Orange (ftUS)",
                    "7284": "NAD 1983 (2011) InGCS Daviess-Greene (ftUS)",
                    "7290": "NAD 1983 (2011) InGCS DeKalb (ftUS)",
                    "7286": "NAD 1983 (2011) InGCS Dearborn-Ohio-Switzerland (ftUS)",
                    "7288": "NAD 1983 (2011) InGCS Decatur-Rush (ftUS)",
                    "7292": "NAD 1983 (2011) InGCS Dubois-Martin (ftUS)",
                    "7294": "NAD 1983 (2011) InGCS Elkhart-Kosciusko-Wabash (ftUS)",
                    "7296": "NAD 1983 (2011) InGCS Fayette-Franklin-Union (ftUS)",
                    "7298": "NAD 1983 (2011) InGCS Fountain-Warren (ftUS)",
                    "7300": "NAD 1983 (2011) InGCS Fulton-Marshall-St. Joseph (ftUS)",
                    "7302": "NAD 1983 (2011) InGCS Gibson (ftUS)",
                    "7304": "NAD 1983 (2011) InGCS Grant (ftUS)",
                    "7306": "NAD 1983 (2011) InGCS Hamilton-Tipton (ftUS)",
                    "7308": "NAD 1983 (2011) InGCS Hancock-Madison (ftUS)",
                    "7310": "NAD 1983 (2011) InGCS Harrison-Washington (ftUS)",
                    "7312": "NAD 1983 (2011) InGCS Henry (ftUS)",
                    "7314": "NAD 1983 (2011) InGCS Howard-Miami (ftUS)",
                    "7316": "NAD 1983 (2011) InGCS Huntington-Whitley (ftUS)",
                    "7318": "NAD 1983 (2011) InGCS Jackson (ftUS)",
                    "7320": "NAD 1983 (2011) InGCS Jasper-Porter (ftUS)",
                    "7322": "NAD 1983 (2011) InGCS Jay (ftUS)",
                    "7324": "NAD 1983 (2011) InGCS Jefferson (ftUS)",
                    "7326": "NAD 1983 (2011) InGCS Jennings (ftUS)",
                    "7328": "NAD 1983 (2011) InGCS Johnson-Marion (ftUS)",
                    "7330": "NAD 1983 (2011) InGCS Knox (ftUS)",
                    "7332": "NAD 1983 (2011) InGCS LaGrange-Noble (ftUS)",
                    "7336": "NAD 1983 (2011) InGCS LaPorte-Pulaski-Starke (ftUS)",
                    "7334": "NAD 1983 (2011) InGCS Lake-Newton (ftUS)",
                    "7338": "NAD 1983 (2011) InGCS Monroe-Morgan (ftUS)",
                    "7340": "NAD 1983 (2011) InGCS Montgomery-Putnam (ftUS)",
                    "7342": "NAD 1983 (2011) InGCS Owen (ftUS)",
                    "7344": "NAD 1983 (2011) InGCS Parke-Vermillion (ftUS)",
                    "7346": "NAD 1983 (2011) InGCS Perry (ftUS)",
                    "7348": "NAD 1983 (2011) InGCS Pike-Warrick (ftUS)",
                    "7350": "NAD 1983 (2011) InGCS Posey (ftUS)",
                    "7352": "NAD 1983 (2011) InGCS Randolph-Wayne (ftUS)",
                    "7354": "NAD 1983 (2011) InGCS Ripley (ftUS)",
                    "7356": "NAD 1983 (2011) InGCS Shelby (ftUS)",
                    "7358": "NAD 1983 (2011) InGCS Spencer (ftUS)",
                    "7360": "NAD 1983 (2011) InGCS Steuben (ftUS)",
                    "7362": "NAD 1983 (2011) InGCS Sullivan (ftUS)",
                    "7364": "NAD 1983 (2011) InGCS Tippecanoe-White (ftUS)",
                    "7366": "NAD 1983 (2011) InGCS Vanderburgh (ftUS)",
                    "7368": "NAD 1983 (2011) InGCS Vigo (ftUS)",
                    "7370": "NAD 1983 (2011) InGCS Wells (ftUS)"
                }
            },
            Iowa: {
                "7057": "NAD 1983 (2011) IaRCS zone 1",
                "7066": "NAD 1983 (2011) IaRCS zone 10",
                "7067": "NAD 1983 (2011) IaRCS zone 11",
                "7068": "NAD 1983 (2011) IaRCS zone 12",
                "7069": "NAD 1983 (2011) IaRCS zone 13",
                "7070": "NAD 1983 (2011) IaRCS zone 14",
                "7058": "NAD 1983 (2011) IaRCS zone 2",
                "7059": "NAD 1983 (2011) IaRCS zone 3",
                "7060": "NAD 1983 (2011) IaRCS zone 4",
                "7061": "NAD 1983 (2011) IaRCS zone 5",
                "7062": "NAD 1983 (2011) IaRCS zone 6",
                "7063": "NAD 1983 (2011) IaRCS zone 7",
                "7064": "NAD 1983 (2011) IaRCS zone 8",
                "7065": "NAD 1983 (2011) IaRCS zone 9"
            },
            Kansas: {
                "8518": "NAD 1983 (2011) KS RCS Zone 1",
                "8527": "NAD 1983 (2011) KS RCS Zone 10",
                "8528": "NAD 1983 (2011) KS RCS Zone 11",
                "8529": "NAD 1983 (2011) KS RCS Zone 12",
                "8531": "NAD 1983 (2011) KS RCS Zone 13",
                "8533": "NAD 1983 (2011) KS RCS Zone 14",
                "8534": "NAD 1983 (2011) KS RCS Zone 15",
                "8535": "NAD 1983 (2011) KS RCS Zone 16",
                "8536": "NAD 1983 (2011) KS RCS Zone 17",
                "8538": "NAD 1983 (2011) KS RCS Zone 18",
                "8539": "NAD 1983 (2011) KS RCS Zone 19",
                "8519": "NAD 1983 (2011) KS RCS Zone 2",
                "8540": "NAD 1983 (2011) KS RCS Zone 20",
                "8520": "NAD 1983 (2011) KS RCS Zone 3",
                "8521": "NAD 1983 (2011) KS RCS Zone 4",
                "8522": "NAD 1983 (2011) KS RCS Zone 5",
                "8523": "NAD 1983 (2011) KS RCS Zone 6",
                "8524": "NAD 1983 (2011) KS RCS Zone 7",
                "8525": "NAD 1983 (2011) KS RCS Zone 8",
                "8526": "NAD 1983 (2011) KS RCS Zone 9"
            },
            "Las Vegas": {
                "8383": "NAD 1983 (2011) NCRS Las Vegas (Meters)",
                "8384": "NAD 1983 (2011) NCRS Las Vegas (US Feet)",
                "8385": "NAD 1983 (2011) NCRS Las Vegas high (Meters)",
                "8387": "NAD 1983 (2011) NCRS Las Vegas high (US Feet)",
                "8379": "NAD 1983 NCRS Las Vegas (Meters)",
                "8380": "NAD 1983 NCRS Las Vegas (US Feet)",
                "8381": "NAD 1983 NCRS Las Vegas high (Meters)",
                "8382": "NAD 1983 NCRS Las Vegas high (US Feet)"
            },
            Minnesota: {
                Meters: {
                    "103600": "NAD 1983 HARN Adj MN Aitkin (Meters)",
                    "103608": "NAD 1983 HARN Adj MN Anoka (Meters)",
                    "103609": "NAD 1983 HARN Adj MN Becker (Meters)",
                    "103610": "NAD 1983 HARN Adj MN Beltrami North (Meters)",
                    "103611": "NAD 1983 HARN Adj MN Beltrami South (Meters)",
                    "103612": "NAD 1983 HARN Adj MN Benton (Meters)",
                    "103613": "NAD 1983 HARN Adj MN Big Stone (Meters)",
                    "103614": "NAD 1983 HARN Adj MN Blue Earth (Meters)",
                    "103615": "NAD 1983 HARN Adj MN Brown (Meters)",
                    "103616": "NAD 1983 HARN Adj MN Carlton (Meters)",
                    "103617": "NAD 1983 HARN Adj MN Carver (Meters)",
                    "103618": "NAD 1983 HARN Adj MN Cass North (Meters)",
                    "103619": "NAD 1983 HARN Adj MN Cass South (Meters)",
                    "103620": "NAD 1983 HARN Adj MN Chippewa (Meters)",
                    "103621": "NAD 1983 HARN Adj MN Chisago (Meters)",
                    "103601": "NAD 1983 HARN Adj MN Clay (Meters)",
                    "103602": "NAD 1983 HARN Adj MN Clearwater (Meters)",
                    "103622": "NAD 1983 HARN Adj MN Cook North (Meters)",
                    "103623": "NAD 1983 HARN Adj MN Cook South (Meters)",
                    "103624": "NAD 1983 HARN Adj MN Cottonwood (Meters)",
                    "103625": "NAD 1983 HARN Adj MN Crow Wing (Meters)",
                    "103626": "NAD 1983 HARN Adj MN Dakota (Meters)",
                    "103627": "NAD 1983 HARN Adj MN Dodge (Meters)",
                    "103628": "NAD 1983 HARN Adj MN Douglas (Meters)",
                    "103629": "NAD 1983 HARN Adj MN Faribault (Meters)",
                    "103630": "NAD 1983 HARN Adj MN Fillmore (Meters)",
                    "103631": "NAD 1983 HARN Adj MN Freeborn (Meters)",
                    "103632": "NAD 1983 HARN Adj MN Goodhue (Meters)",
                    "103633": "NAD 1983 HARN Adj MN Grant (Meters)",
                    "103634": "NAD 1983 HARN Adj MN Hennepin (Meters)",
                    "103635": "NAD 1983 HARN Adj MN Houston (Meters)",
                    "103603": "NAD 1983 HARN Adj MN Hubbard (Meters)",
                    "103636": "NAD 1983 HARN Adj MN Isanti (Meters)",
                    "103637": "NAD 1983 HARN Adj MN Itasca North (Meters)",
                    "103638": "NAD 1983 HARN Adj MN Itasca South (Meters)",
                    "103639": "NAD 1983 HARN Adj MN Jackson (Meters)",
                    "103640": "NAD 1983 HARN Adj MN Kanabec (Meters)",
                    "103641": "NAD 1983 HARN Adj MN Kandiyohi (Meters)",
                    "103642": "NAD 1983 HARN Adj MN Kittson (Meters)",
                    "103643": "NAD 1983 HARN Adj MN Koochiching (Meters)",
                    "103644": "NAD 1983 HARN Adj MN Lac Qui Parle (Meters)",
                    "103604": "NAD 1983 HARN Adj MN Lake (Meters)",
                    "103645": "NAD 1983 HARN Adj MN Lake of the Woods North (Meters)",
                    "103646": "NAD 1983 HARN Adj MN Lake of the Woods South (Meters)",
                    "103647": "NAD 1983 HARN Adj MN Le Sueur (Meters)",
                    "103648": "NAD 1983 HARN Adj MN Lincoln (Meters)",
                    "103649": "NAD 1983 HARN Adj MN Lyon (Meters)",
                    "103651": "NAD 1983 HARN Adj MN Mahnomen (Meters)",
                    "103652": "NAD 1983 HARN Adj MN Marshall (Meters)",
                    "103653": "NAD 1983 HARN Adj MN Martin (Meters)",
                    "103650": "NAD 1983 HARN Adj MN McLeod (Meters)",
                    "103654": "NAD 1983 HARN Adj MN Meeker (Meters)",
                    "103605": "NAD 1983 HARN Adj MN Mille Lacs (Meters)",
                    "103655": "NAD 1983 HARN Adj MN Morrison (Meters)",
                    "103656": "NAD 1983 HARN Adj MN Mower (Meters)",
                    "103657": "NAD 1983 HARN Adj MN Murray (Meters)",
                    "103658": "NAD 1983 HARN Adj MN Nicollet (Meters)",
                    "103659": "NAD 1983 HARN Adj MN Nobles (Meters)",
                    "103660": "NAD 1983 HARN Adj MN Norman (Meters)",
                    "103661": "NAD 1983 HARN Adj MN Olmsted (Meters)",
                    "103662": "NAD 1983 HARN Adj MN Ottertail (Meters)",
                    "103663": "NAD 1983 HARN Adj MN Pennington (Meters)",
                    "103664": "NAD 1983 HARN Adj MN Pine (Meters)",
                    "103665": "NAD 1983 HARN Adj MN Pipestone (Meters)",
                    "103666": "NAD 1983 HARN Adj MN Polk (Meters)",
                    "103667": "NAD 1983 HARN Adj MN Pope (Meters)",
                    "103668": "NAD 1983 HARN Adj MN Ramsey (Meters)",
                    "103669": "NAD 1983 HARN Adj MN Red Lake (Meters)",
                    "103670": "NAD 1983 HARN Adj MN Redwood (Meters)",
                    "103671": "NAD 1983 HARN Adj MN Renville (Meters)",
                    "103672": "NAD 1983 HARN Adj MN Rice (Meters)",
                    "103673": "NAD 1983 HARN Adj MN Rock (Meters)",
                    "103674": "NAD 1983 HARN Adj MN Roseau (Meters)",
                    "103678": "NAD 1983 HARN Adj MN Scott (Meters)",
                    "103679": "NAD 1983 HARN Adj MN Sherburne (Meters)",
                    "103680": "NAD 1983 HARN Adj MN Sibley (Meters)",
                    "103694": "NAD 1983 HARN Adj MN St. Louis (Meters)",
                    "103676": "NAD 1983 HARN Adj MN St. Louis Central (Meters)",
                    "103675": "NAD 1983 HARN Adj MN St. Louis North (Meters)",
                    "103677": "NAD 1983 HARN Adj MN St. Louis South (Meters)",
                    "103681": "NAD 1983 HARN Adj MN Stearns (Meters)",
                    "103682": "NAD 1983 HARN Adj MN Steele (Meters)",
                    "103683": "NAD 1983 HARN Adj MN Stevens (Meters)",
                    "103684": "NAD 1983 HARN Adj MN Swift (Meters)",
                    "103685": "NAD 1983 HARN Adj MN Todd (Meters)",
                    "103686": "NAD 1983 HARN Adj MN Traverse (Meters)",
                    "103687": "NAD 1983 HARN Adj MN Wabasha (Meters)",
                    "103688": "NAD 1983 HARN Adj MN Wadena (Meters)",
                    "103689": "NAD 1983 HARN Adj MN Waseca (Meters)",
                    "103606": "NAD 1983 HARN Adj MN Washington (Meters)",
                    "103690": "NAD 1983 HARN Adj MN Watonwan (Meters)",
                    "103607": "NAD 1983 HARN Adj MN Wilkin (Meters)",
                    "103691": "NAD 1983 HARN Adj MN Winona (Meters)",
                    "103692": "NAD 1983 HARN Adj MN Wright (Meters)",
                    "103693": "NAD 1983 HARN Adj MN Yellow Medicine (Meters)"
                },
                "US Feet": {
                    "103700": "NAD 1983 HARN Adj MN Aitkin (US Feet)",
                    "103708": "NAD 1983 HARN Adj MN Anoka (US Feet)",
                    "103709": "NAD 1983 HARN Adj MN Becker (US Feet)",
                    "103710": "NAD 1983 HARN Adj MN Beltrami North (US Feet)",
                    "103711": "NAD 1983 HARN Adj MN Beltrami South (US Feet)",
                    "103712": "NAD 1983 HARN Adj MN Benton (US Feet)",
                    "103713": "NAD 1983 HARN Adj MN Big Stone (US Feet)",
                    "103714": "NAD 1983 HARN Adj MN Blue Earth (US Feet)",
                    "103715": "NAD 1983 HARN Adj MN Brown (US Feet)",
                    "103716": "NAD 1983 HARN Adj MN Carlton (US Feet)",
                    "103717": "NAD 1983 HARN Adj MN Carver (US Feet)",
                    "103718": "NAD 1983 HARN Adj MN Cass North (US Feet)",
                    "103719": "NAD 1983 HARN Adj MN Cass South (US Feet)",
                    "103720": "NAD 1983 HARN Adj MN Chippewa (US Feet)",
                    "103721": "NAD 1983 HARN Adj MN Chisago (US Feet)",
                    "103701": "NAD 1983 HARN Adj MN Clay (US Feet)",
                    "103702": "NAD 1983 HARN Adj MN Clearwater (US Feet)",
                    "103722": "NAD 1983 HARN Adj MN Cook North (US Feet)",
                    "103723": "NAD 1983 HARN Adj MN Cook South (US Feet)",
                    "103724": "NAD 1983 HARN Adj MN Cottonwood (US Feet)",
                    "103725": "NAD 1983 HARN Adj MN Crow Wing (US Feet)",
                    "103726": "NAD 1983 HARN Adj MN Dakota (US Feet)",
                    "103727": "NAD 1983 HARN Adj MN Dodge (US Feet)",
                    "103728": "NAD 1983 HARN Adj MN Douglas (US Feet)",
                    "103729": "NAD 1983 HARN Adj MN Faribault (US Feet)",
                    "103730": "NAD 1983 HARN Adj MN Fillmore (US Feet)",
                    "103731": "NAD 1983 HARN Adj MN Freeborn (US Feet)",
                    "103732": "NAD 1983 HARN Adj MN Goodhue (US Feet)",
                    "103733": "NAD 1983 HARN Adj MN Grant (US Feet)",
                    "103734": "NAD 1983 HARN Adj MN Hennepin (US Feet)",
                    "103735": "NAD 1983 HARN Adj MN Houston (US Feet)",
                    "103703": "NAD 1983 HARN Adj MN Hubbard (US Feet)",
                    "103736": "NAD 1983 HARN Adj MN Isanti (US Feet)",
                    "103737": "NAD 1983 HARN Adj MN Itasca North (US Feet)",
                    "103738": "NAD 1983 HARN Adj MN Itasca South (US Feet)",
                    "103739": "NAD 1983 HARN Adj MN Jackson (US Feet)",
                    "103740": "NAD 1983 HARN Adj MN Kanabec (US Feet)",
                    "103741": "NAD 1983 HARN Adj MN Kandiyohi (US Feet)",
                    "103742": "NAD 1983 HARN Adj MN Kittson (US Feet)",
                    "103743": "NAD 1983 HARN Adj MN Koochiching (US Feet)",
                    "103744": "NAD 1983 HARN Adj MN Lac Qui Parle (US Feet)",
                    "103704": "NAD 1983 HARN Adj MN Lake (US Feet)",
                    "103745": "NAD 1983 HARN Adj MN Lake of the Woods North (US Feet)",
                    "103746": "NAD 1983 HARN Adj MN Lake of the Woods South (US Feet)",
                    "103747": "NAD 1983 HARN Adj MN Le Sueur (US Feet)",
                    "103748": "NAD 1983 HARN Adj MN Lincoln (US Feet)",
                    "103749": "NAD 1983 HARN Adj MN Lyon (US Feet)",
                    "103751": "NAD 1983 HARN Adj MN Mahnomen (US Feet)",
                    "103752": "NAD 1983 HARN Adj MN Marshall (US Feet)",
                    "103753": "NAD 1983 HARN Adj MN Martin (US Feet)",
                    "103750": "NAD 1983 HARN Adj MN McLeod (US Feet)",
                    "103754": "NAD 1983 HARN Adj MN Meeker (US Feet)",
                    "103705": "NAD 1983 HARN Adj MN Mille Lacs (US Feet)",
                    "103755": "NAD 1983 HARN Adj MN Morrison (US Feet)",
                    "103756": "NAD 1983 HARN Adj MN Mower (US Feet)",
                    "103757": "NAD 1983 HARN Adj MN Murray (US Feet)",
                    "103758": "NAD 1983 HARN Adj MN Nicollet (US Feet)",
                    "103759": "NAD 1983 HARN Adj MN Nobles (US Feet)",
                    "103760": "NAD 1983 HARN Adj MN Norman (US Feet)",
                    "103761": "NAD 1983 HARN Adj MN Olmsted (US Feet)",
                    "103762": "NAD 1983 HARN Adj MN Ottertail (US Feet)",
                    "103763": "NAD 1983 HARN Adj MN Pennington (US Feet)",
                    "103764": "NAD 1983 HARN Adj MN Pine (US Feet)",
                    "103765": "NAD 1983 HARN Adj MN Pipestone (US Feet)",
                    "103766": "NAD 1983 HARN Adj MN Polk (US Feet)",
                    "103767": "NAD 1983 HARN Adj MN Pope (US Feet)",
                    "103768": "NAD 1983 HARN Adj MN Ramsey (US Feet)",
                    "103769": "NAD 1983 HARN Adj MN Red Lake (US Feet)",
                    "103770": "NAD 1983 HARN Adj MN Redwood (US Feet)",
                    "103771": "NAD 1983 HARN Adj MN Renville (US Feet)",
                    "103772": "NAD 1983 HARN Adj MN Rice (US Feet)",
                    "103773": "NAD 1983 HARN Adj MN Rock (US Feet)",
                    "103774": "NAD 1983 HARN Adj MN Roseau (US Feet)",
                    "103778": "NAD 1983 HARN Adj MN Scott (US Feet)",
                    "103779": "NAD 1983 HARN Adj MN Sherburne (US Feet)",
                    "103780": "NAD 1983 HARN Adj MN Sibley (US Feet)",
                    "103695": "NAD 1983 HARN Adj MN St. Louis (US Feet)",
                    "103776": "NAD 1983 HARN Adj MN St. Louis Central (US Feet)",
                    "103775": "NAD 1983 HARN Adj MN St. Louis North (US Feet)",
                    "103777": "NAD 1983 HARN Adj MN St. Louis South (US Feet)",
                    "103781": "NAD 1983 HARN Adj MN Stearns (US Feet)",
                    "103782": "NAD 1983 HARN Adj MN Steele (US Feet)",
                    "103783": "NAD 1983 HARN Adj MN Stevens (US Feet)",
                    "103784": "NAD 1983 HARN Adj MN Swift (US Feet)",
                    "103785": "NAD 1983 HARN Adj MN Todd (US Feet)",
                    "103786": "NAD 1983 HARN Adj MN Traverse (US Feet)",
                    "103787": "NAD 1983 HARN Adj MN Wabasha (US Feet)",
                    "103788": "NAD 1983 HARN Adj MN Wadena (US Feet)",
                    "103789": "NAD 1983 HARN Adj MN Waseca (US Feet)",
                    "103706": "NAD 1983 HARN Adj MN Washington (US Feet)",
                    "103790": "NAD 1983 HARN Adj MN Watonwan (US Feet)",
                    "103707": "NAD 1983 HARN Adj MN Wilkin (US Feet)",
                    "103791": "NAD 1983 HARN Adj MN Winona (US Feet)",
                    "103792": "NAD 1983 HARN Adj MN Wright (US Feet)",
                    "103793": "NAD 1983 HARN Adj MN Yellow Medicine (US Feet)"
                }
            },
            Wisconsin: {
                "103946": "NAD 1983 HARN Adj. Wisconsin Chippewa WCCS (US foot)",
                "103846": "NAD 1983 HARN Adj. Wisconsin Chippewa WCCS (meters)"
            },
            "Wisconsin CRS": {
                Meters: {
                    "103300": "NAD 1983 HARN Wisconsin CRS Adams (Meters)",
                    "8225": "NAD 1983 HARN Wisconsin CRS Adams and Juneau (Meters)",
                    "8222": "NAD 1983 HARN Wisconsin CRS Ashland (Meters)",
                    "8218": "NAD 1983 HARN Wisconsin CRS Barron (Meters)",
                    "8214": "NAD 1983 HARN Wisconsin CRS Bayfield (Meters)",
                    "8212": "NAD 1983 HARN Wisconsin CRS Brown (Meters)",
                    "8209": "NAD 1983 HARN Wisconsin CRS Buffalo (Meters)",
                    "8207": "NAD 1983 HARN Wisconsin CRS Burnett (Meters)",
                    "103307": "NAD 1983 HARN Wisconsin CRS Calumet (Meters)",
                    "8205": "NAD 1983 HARN Wisconsin CRS Calumet, Fond du Lac, Outagamie and Winnebago (m)",
                    "8203": "NAD 1983 HARN Wisconsin CRS Chippewa (Meters)",
                    "8201": "NAD 1983 HARN Wisconsin CRS Clark (Meters)",
                    "8198": "NAD 1983 HARN Wisconsin CRS Columbia (Meters)",
                    "8196": "NAD 1983 HARN Wisconsin CRS Crawford (Meters)",
                    "8191": "NAD 1983 HARN Wisconsin CRS Dane (Meters)",
                    "103313": "NAD 1983 HARN Wisconsin CRS Dodge (Meters)",
                    "8187": "NAD 1983 HARN Wisconsin CRS Dodge and Jefferson (Meters)",
                    "8184": "NAD 1983 HARN Wisconsin CRS Door (Meters)",
                    "8181": "NAD 1983 HARN Wisconsin CRS Douglas (Meters)",
                    "8179": "NAD 1983 HARN Wisconsin CRS Dunn (Meters)",
                    "8092": "NAD 1983 HARN Wisconsin CRS Eau Claire (Meters)",
                    "8090": "NAD 1983 HARN Wisconsin CRS Florence (Meters)",
                    "103319": "NAD 1983 HARN Wisconsin CRS Fond du Lac (Meters)",
                    "8173": "NAD 1983 HARN Wisconsin CRS Forest (Meters)",
                    "8171": "NAD 1983 HARN Wisconsin CRS Grant (Meters)",
                    "103322": "NAD 1983 HARN Wisconsin CRS Green (Meters)",
                    "103323": "NAD 1983 HARN Wisconsin CRS Green Lake (Meters)",
                    "8167": "NAD 1983 HARN Wisconsin CRS Green Lake and Marquette (Meters)",
                    "8169": "NAD 1983 HARN Wisconsin CRS Green and Lafayette (Meters)",
                    "8165": "NAD 1983 HARN Wisconsin CRS Iowa (Meters)",
                    "8163": "NAD 1983 HARN Wisconsin CRS Iron (Meters)",
                    "8161": "NAD 1983 HARN Wisconsin CRS Jackson (Meters)",
                    "103327": "NAD 1983 HARN Wisconsin CRS Jefferson (Meters)",
                    "103328": "NAD 1983 HARN Wisconsin CRS Juneau (Meters)",
                    "103329": "NAD 1983 HARN Wisconsin CRS Kenosha (Meters)",
                    "8159": "NAD 1983 HARN Wisconsin CRS Kenosha, Milwaukee, Ozaukee and Racine (Meters)",
                    "103330": "NAD 1983 HARN Wisconsin CRS Kewaunee (Meters)",
                    "8157": "NAD 1983 HARN Wisconsin CRS Kewaunee, Manitowoc and Sheboygan (Meters)",
                    "8155": "NAD 1983 HARN Wisconsin CRS La Crosse (Meters)",
                    "103332": "NAD 1983 HARN Wisconsin CRS Lafayette (Meters)",
                    "8153": "NAD 1983 HARN Wisconsin CRS Langlade (Meters)",
                    "8151": "NAD 1983 HARN Wisconsin CRS Lincoln (Meters)",
                    "103335": "NAD 1983 HARN Wisconsin CRS Manitowoc (Meters)",
                    "8149": "NAD 1983 HARN Wisconsin CRS Marathon (Meters)",
                    "8147": "NAD 1983 HARN Wisconsin CRS Marinette (Meters)",
                    "103338": "NAD 1983 HARN Wisconsin CRS Marquette (Meters)",
                    "8145": "NAD 1983 HARN Wisconsin CRS Menominee (Meters)",
                    "103340": "NAD 1983 HARN Wisconsin CRS Milwaukee (Meters)",
                    "8143": "NAD 1983 HARN Wisconsin CRS Monroe (Meters)",
                    "8141": "NAD 1983 HARN Wisconsin CRS Oconto (Meters)",
                    "8139": "NAD 1983 HARN Wisconsin CRS Oneida (Meters)",
                    "103344": "NAD 1983 HARN Wisconsin CRS Outagamie (Meters)",
                    "103345": "NAD 1983 HARN Wisconsin CRS Ozaukee (Meters)",
                    "103346": "NAD 1983 HARN Wisconsin CRS Pepin (Meters)",
                    "8137": "NAD 1983 HARN Wisconsin CRS Pepin and Pierce (Meters)",
                    "103347": "NAD 1983 HARN Wisconsin CRS Pierce (Meters)",
                    "8135": "NAD 1983 HARN Wisconsin CRS Polk (Meters)",
                    "8133": "NAD 1983 HARN Wisconsin CRS Portage (Meters)",
                    "8131": "NAD 1983 HARN Wisconsin CRS Price (Meters)",
                    "103351": "NAD 1983 HARN Wisconsin CRS Racine (Meters)",
                    "8129": "NAD 1983 HARN Wisconsin CRS Richland (Meters)",
                    "8127": "NAD 1983 HARN Wisconsin CRS Rock (Meters)",
                    "8125": "NAD 1983 HARN Wisconsin CRS Rusk (Meters)",
                    "8123": "NAD 1983 HARN Wisconsin CRS Sauk (Meters)",
                    "8121": "NAD 1983 HARN Wisconsin CRS Sawyer (Meters)",
                    "8119": "NAD 1983 HARN Wisconsin CRS Shawano (Meters)",
                    "103358": "NAD 1983 HARN Wisconsin CRS Sheboygan (Meters)",
                    "8117": "NAD 1983 HARN Wisconsin CRS St. Croix (Meters)",
                    "8115": "NAD 1983 HARN Wisconsin CRS Taylor (Meters)",
                    "8113": "NAD 1983 HARN Wisconsin CRS Trempealeau (Meters)",
                    "8111": "NAD 1983 HARN Wisconsin CRS Vernon (Meters)",
                    "8109": "NAD 1983 HARN Wisconsin CRS Vilas (Meters)",
                    "8107": "NAD 1983 HARN Wisconsin CRS Walworth (Meters)",
                    "8105": "NAD 1983 HARN Wisconsin CRS Washburn (Meters)",
                    "8103": "NAD 1983 HARN Wisconsin CRS Washington (Meters)",
                    "8101": "NAD 1983 HARN Wisconsin CRS Waukesha (Meters)",
                    "8099": "NAD 1983 HARN Wisconsin CRS Waupaca (Meters)",
                    "8097": "NAD 1983 HARN Wisconsin CRS Waushara (Meters)",
                    "103370": "NAD 1983 HARN Wisconsin CRS Winnebago (Meters)",
                    "8095": "NAD 1983 HARN Wisconsin CRS Wood (Meters)"
                },
                "NAD 1983 (2011)": {
                    Meters: {
                        "7528": "NAD 1983 (2011) WISCRS Adams and Juneau (Meters)",
                        "7529": "NAD 1983 (2011) WISCRS Ashland (Meters)",
                        "7530": "NAD 1983 (2011) WISCRS Barron (Meters)",
                        "7531": "NAD 1983 (2011) WISCRS Bayfield (Meters)",
                        "7532": "NAD 1983 (2011) WISCRS Brown (Meters)",
                        "7533": "NAD 1983 (2011) WISCRS Buffalo (Meters)",
                        "7534": "NAD 1983 (2011) WISCRS Burnett (Meters)",
                        "7535": "NAD 1983 (2011) WISCRS Calumet, Fond du Lac, Outagamie, Winnebago (Meters)",
                        "7536": "NAD 1983 (2011) WISCRS Chippewa (Meters)",
                        "7537": "NAD 1983 (2011) WISCRS Clark (Meters)",
                        "7538": "NAD 1983 (2011) WISCRS Columbia (Meters)",
                        "7539": "NAD 1983 (2011) WISCRS Crawford (Meters)",
                        "7540": "NAD 1983 (2011) WISCRS Dane (Meters)",
                        "7541": "NAD 1983 (2011) WISCRS Dodge and Jefferson (Meters)",
                        "7542": "NAD 1983 (2011) WISCRS Door (Meters)",
                        "7543": "NAD 1983 (2011) WISCRS Douglas (Meters)",
                        "7544": "NAD 1983 (2011) WISCRS Dunn (Meters)",
                        "7545": "NAD 1983 (2011) WISCRS Eau Claire (Meters)",
                        "7546": "NAD 1983 (2011) WISCRS Florence (Meters)",
                        "7547": "NAD 1983 (2011) WISCRS Forest (Meters)",
                        "7548": "NAD 1983 (2011) WISCRS Grant (Meters)",
                        "7550": "NAD 1983 (2011) WISCRS Green Lake and Marquette (Meters)",
                        "7549": "NAD 1983 (2011) WISCRS Green and Lafayette (Meters)",
                        "7551": "NAD 1983 (2011) WISCRS Iowa (Meters)",
                        "7552": "NAD 1983 (2011) WISCRS Iron (Meters)",
                        "7553": "NAD 1983 (2011) WISCRS Jackson (Meters)",
                        "7554": "NAD 1983 (2011) WISCRS Kenosha, Milwaukee, Ozaukee, Racine (Meters)",
                        "7555": "NAD 1983 (2011) WISCRS Kewaunee, Manitowoc, Sheboygan (Meters)",
                        "7556": "NAD 1983 (2011) WISCRS La Crosse (Meters)",
                        "7557": "NAD 1983 (2011) WISCRS Langlade (Meters)",
                        "7558": "NAD 1983 (2011) WISCRS Lincoln (Meters)",
                        "7559": "NAD 1983 (2011) WISCRS Marathon (Meters)",
                        "7560": "NAD 1983 (2011) WISCRS Marinette (Meters)",
                        "7561": "NAD 1983 (2011) WISCRS Menominee (Meters)",
                        "7562": "NAD 1983 (2011) WISCRS Monroe (Meters)",
                        "7563": "NAD 1983 (2011) WISCRS Oconto (Meters)",
                        "7564": "NAD 1983 (2011) WISCRS Oneida (Meters)",
                        "7565": "NAD 1983 (2011) WISCRS Pepin and Pierce (Meters)",
                        "7566": "NAD 1983 (2011) WISCRS Polk (Meters)",
                        "7567": "NAD 1983 (2011) WISCRS Portage (Meters)",
                        "7568": "NAD 1983 (2011) WISCRS Price (Meters)",
                        "7569": "NAD 1983 (2011) WISCRS Richland (Meters)",
                        "7570": "NAD 1983 (2011) WISCRS Rock (Meters)",
                        "7571": "NAD 1983 (2011) WISCRS Rusk (Meters)",
                        "7572": "NAD 1983 (2011) WISCRS Sauk (Meters)",
                        "7573": "NAD 1983 (2011) WISCRS Sawyer (Meters)",
                        "7574": "NAD 1983 (2011) WISCRS Shawano (Meters)",
                        "7575": "NAD 1983 (2011) WISCRS St. Croix (Meters)",
                        "7576": "NAD 1983 (2011) WISCRS Taylor (Meters)",
                        "7577": "NAD 1983 (2011) WISCRS Trempealeau (Meters)",
                        "7578": "NAD 1983 (2011) WISCRS Vernon (Meters)",
                        "7579": "NAD 1983 (2011) WISCRS Vilas (Meters)",
                        "7580": "NAD 1983 (2011) WISCRS Walworth (Meters)",
                        "7581": "NAD 1983 (2011) WISCRS Washburn (Meters)",
                        "7582": "NAD 1983 (2011) WISCRS Washington (Meters)",
                        "7583": "NAD 1983 (2011) WISCRS Waukesha (Meters)",
                        "7584": "NAD 1983 (2011) WISCRS Waupaca (Meters)",
                        "7585": "NAD 1983 (2011) WISCRS Waushara (Meters)",
                        "7586": "NAD 1983 (2011) WISCRS Wood (Meters)"
                    },
                    "US Feet": {
                        "7587": "NAD 1983 (2011) WISCRS Adams and Juneau (US Feet)",
                        "7588": "NAD 1983 (2011) WISCRS Ashland (US Feet)",
                        "7589": "NAD 1983 (2011) WISCRS Barron (US Feet)",
                        "7590": "NAD 1983 (2011) WISCRS Bayfield (US Feet)",
                        "7591": "NAD 1983 (2011) WISCRS Brown (US Feet)",
                        "7592": "NAD 1983 (2011) WISCRS Buffalo (US Feet)",
                        "7593": "NAD 1983 (2011) WISCRS Burnett (US Feet)",
                        "7594": "NAD 1983 (2011) WISCRS Calumet, Fond du Lac, Outagamie, Winnebago (US Feet)",
                        "7595": "NAD 1983 (2011) WISCRS Chippewa (US Feet)",
                        "7596": "NAD 1983 (2011) WISCRS Clark (US Feet)",
                        "7597": "NAD 1983 (2011) WISCRS Columbia (US Feet)",
                        "7598": "NAD 1983 (2011) WISCRS Crawford (US Feet)",
                        "7599": "NAD 1983 (2011) WISCRS Dane (US Feet)",
                        "7600": "NAD 1983 (2011) WISCRS Dodge and Jefferson (US Feet)",
                        "7601": "NAD 1983 (2011) WISCRS Door (US Feet)",
                        "7602": "NAD 1983 (2011) WISCRS Douglas (US Feet)",
                        "7603": "NAD 1983 (2011) WISCRS Dunn (US Feet)",
                        "7604": "NAD 1983 (2011) WISCRS Eau Claire (US Feet)",
                        "7605": "NAD 1983 (2011) WISCRS Florence (US Feet)",
                        "7606": "NAD 1983 (2011) WISCRS Forest (US Feet)",
                        "7607": "NAD 1983 (2011) WISCRS Grant (US Feet)",
                        "7609": "NAD 1983 (2011) WISCRS Green Lake and Marquette (US Feet)",
                        "7608": "NAD 1983 (2011) WISCRS Green and Lafayette (US Feet)",
                        "7610": "NAD 1983 (2011) WISCRS Iowa (US Feet)",
                        "7611": "NAD 1983 (2011) WISCRS Iron (US Feet)",
                        "7612": "NAD 1983 (2011) WISCRS Jackson (US Feet)",
                        "7613": "NAD 1983 (2011) WISCRS Kenosha, Milwaukee, Ozaukee, Racine (US Feet)",
                        "7614": "NAD 1983 (2011) WISCRS Kewaunee, Manitowoc, Sheboygan (US Feet)",
                        "7615": "NAD 1983 (2011) WISCRS La Crosse (US Feet)",
                        "7616": "NAD 1983 (2011) WISCRS Langlade (US Feet)",
                        "7617": "NAD 1983 (2011) WISCRS Lincoln (US Feet)",
                        "7618": "NAD 1983 (2011) WISCRS Marathon (US Feet)",
                        "7619": "NAD 1983 (2011) WISCRS Marinette (US Feet)",
                        "7620": "NAD 1983 (2011) WISCRS Menominee (US Feet)",
                        "7621": "NAD 1983 (2011) WISCRS Monroe (US Feet)",
                        "7622": "NAD 1983 (2011) WISCRS Oconto (US Feet)",
                        "7623": "NAD 1983 (2011) WISCRS Oneida (US Feet)",
                        "7624": "NAD 1983 (2011) WISCRS Pepin and Pierce (US Feet)",
                        "7625": "NAD 1983 (2011) WISCRS Polk (US Feet)",
                        "7626": "NAD 1983 (2011) WISCRS Portage (US Feet)",
                        "7627": "NAD 1983 (2011) WISCRS Price (US Feet)",
                        "7628": "NAD 1983 (2011) WISCRS Richland (US Feet)",
                        "7629": "NAD 1983 (2011) WISCRS Rock (US Feet)",
                        "7630": "NAD 1983 (2011) WISCRS Rusk (US Feet)",
                        "7631": "NAD 1983 (2011) WISCRS Sauk (US Feet)",
                        "7632": "NAD 1983 (2011) WISCRS Sawyer (US Feet)",
                        "7633": "NAD 1983 (2011) WISCRS Shawano (US Feet)",
                        "7634": "NAD 1983 (2011) WISCRS St. Croix (US Feet)",
                        "7635": "NAD 1983 (2011) WISCRS Taylor (US Feet)",
                        "7636": "NAD 1983 (2011) WISCRS Trempealeau (US Feet)",
                        "7637": "NAD 1983 (2011) WISCRS Vernon (US Feet)",
                        "7638": "NAD 1983 (2011) WISCRS Vilas (US Feet)",
                        "7639": "NAD 1983 (2011) WISCRS Walworth (US Feet)",
                        "7640": "NAD 1983 (2011) WISCRS Washburn (US Feet)",
                        "7641": "NAD 1983 (2011) WISCRS Washington (US Feet)",
                        "7642": "NAD 1983 (2011) WISCRS Waukesha (US Feet)",
                        "7643": "NAD 1983 (2011) WISCRS Waupaca (US Feet)",
                        "7644": "NAD 1983 (2011) WISCRS Waushara (US Feet)",
                        "7645": "NAD 1983 (2011) WISCRS Wood (US Feet)"
                    }
                },
                "US Feet": {
                    "103400": "NAD 1983 HARN Wisconsin CRS Adams (US Feet)",
                    "8226": "NAD 1983 HARN Wisconsin CRS Adams and Juneau (US Feet)",
                    "8224": "NAD 1983 HARN Wisconsin CRS Ashland (US Feet)",
                    "8220": "NAD 1983 HARN Wisconsin CRS Barron (US Feet)",
                    "8216": "NAD 1983 HARN Wisconsin CRS Bayfield (US Feet)",
                    "8213": "NAD 1983 HARN Wisconsin CRS Brown (US Feet)",
                    "8210": "NAD 1983 HARN Wisconsin CRS Buffalo (US Feet)",
                    "8208": "NAD 1983 HARN Wisconsin CRS Burnett (US Feet)",
                    "103407": "NAD 1983 HARN Wisconsin CRS Calumet (US Feet)",
                    "8206": "NAD 1983 HARN Wisconsin CRS Calumet, Fond du Lac, Outagamie and Winnebago (ft)",
                    "8204": "NAD 1983 HARN Wisconsin CRS Chippewa (US Feet)",
                    "8202": "NAD 1983 HARN Wisconsin CRS Clark (US Feet)",
                    "8200": "NAD 1983 HARN Wisconsin CRS Columbia (US Feet)",
                    "8197": "NAD 1983 HARN Wisconsin CRS Crawford (US Feet)",
                    "8193": "NAD 1983 HARN Wisconsin CRS Dane (US Feet)",
                    "103413": "NAD 1983 HARN Wisconsin CRS Dodge (US Feet)",
                    "8189": "NAD 1983 HARN Wisconsin CRS Dodge and Jefferson (US Feet)",
                    "8185": "NAD 1983 HARN Wisconsin CRS Door (US Feet)",
                    "8182": "NAD 1983 HARN Wisconsin CRS Douglas (US Feet)",
                    "8180": "NAD 1983 HARN Wisconsin CRS Dunn (US Feet)",
                    "8093": "NAD 1983 HARN Wisconsin CRS Eau Claire (US Feet)",
                    "8091": "NAD 1983 HARN Wisconsin CRS Florence (US Feet)",
                    "103419": "NAD 1983 HARN Wisconsin CRS Fond du Lac (US Feet)",
                    "8177": "NAD 1983 HARN Wisconsin CRS Forest (US Feet)",
                    "8172": "NAD 1983 HARN Wisconsin CRS Grant (US Feet)",
                    "103422": "NAD 1983 HARN Wisconsin CRS Green (US Feet)",
                    "103423": "NAD 1983 HARN Wisconsin CRS Green Lake (US Feet)",
                    "8168": "NAD 1983 HARN Wisconsin CRS Green Lake and Marquette (US Feet)",
                    "8170": "NAD 1983 HARN Wisconsin CRS Green and Lafayette (US Feet)",
                    "8166": "NAD 1983 HARN Wisconsin CRS Iowa (US Feet)",
                    "8164": "NAD 1983 HARN Wisconsin CRS Iron (US Feet)",
                    "8162": "NAD 1983 HARN Wisconsin CRS Jackson (US Feet)",
                    "103427": "NAD 1983 HARN Wisconsin CRS Jefferson (US Feet)",
                    "103428": "NAD 1983 HARN Wisconsin CRS Juneau (US Feet)",
                    "103429": "NAD 1983 HARN Wisconsin CRS Kenosha (US Feet)",
                    "8160": "NAD 1983 HARN Wisconsin CRS Kenosha, Milwaukee, Ozaukee and Racine (US Feet)",
                    "103430": "NAD 1983 HARN Wisconsin CRS Kewaunee (US Feet)",
                    "8158": "NAD 1983 HARN Wisconsin CRS Kewaunee, Manitowoc and Sheboygan (US Feet)",
                    "8156": "NAD 1983 HARN Wisconsin CRS La Crosse (US Feet)",
                    "103432": "NAD 1983 HARN Wisconsin CRS Lafayette (US Feet)",
                    "8154": "NAD 1983 HARN Wisconsin CRS Langlade (US Feet)",
                    "8152": "NAD 1983 HARN Wisconsin CRS Lincoln (US Feet)",
                    "103435": "NAD 1983 HARN Wisconsin CRS Manitowoc (US Feet)",
                    "8150": "NAD 1983 HARN Wisconsin CRS Marathon (US Feet)",
                    "8148": "NAD 1983 HARN Wisconsin CRS Marinette (US Feet)",
                    "103438": "NAD 1983 HARN Wisconsin CRS Marquette (US Feet)",
                    "8146": "NAD 1983 HARN Wisconsin CRS Menominee (US Feet)",
                    "103440": "NAD 1983 HARN Wisconsin CRS Milwaukee (US Feet)",
                    "8144": "NAD 1983 HARN Wisconsin CRS Monroe (US Feet)",
                    "8142": "NAD 1983 HARN Wisconsin CRS Oconto (US Feet)",
                    "8140": "NAD 1983 HARN Wisconsin CRS Oneida (US Feet)",
                    "103444": "NAD 1983 HARN Wisconsin CRS Outagamie (US Feet)",
                    "103445": "NAD 1983 HARN Wisconsin CRS Ozaukee (US Feet)",
                    "103446": "NAD 1983 HARN Wisconsin CRS Pepin (US Feet)",
                    "8138": "NAD 1983 HARN Wisconsin CRS Pepin and Pierce (US Feet)",
                    "103447": "NAD 1983 HARN Wisconsin CRS Pierce (US Feet)",
                    "8136": "NAD 1983 HARN Wisconsin CRS Polk (US Feet)",
                    "8134": "NAD 1983 HARN Wisconsin CRS Portage (US Feet)",
                    "8132": "NAD 1983 HARN Wisconsin CRS Price (US Feet)",
                    "103451": "NAD 1983 HARN Wisconsin CRS Racine (US Feet)",
                    "8130": "NAD 1983 HARN Wisconsin CRS Richland (US Feet)",
                    "8128": "NAD 1983 HARN Wisconsin CRS Rock (US Feet)",
                    "8126": "NAD 1983 HARN Wisconsin CRS Rusk (US Feet)",
                    "8124": "NAD 1983 HARN Wisconsin CRS Sauk (US Feet)",
                    "8122": "NAD 1983 HARN Wisconsin CRS Sawyer (US Feet)",
                    "8120": "NAD 1983 HARN Wisconsin CRS Shawano (US Feet)",
                    "103458": "NAD 1983 HARN Wisconsin CRS Sheboygan (US Feet)",
                    "8118": "NAD 1983 HARN Wisconsin CRS St. Croix (US Feet)",
                    "8116": "NAD 1983 HARN Wisconsin CRS Taylor (US Feet)",
                    "8114": "NAD 1983 HARN Wisconsin CRS Trempealeau (US Feet)",
                    "8112": "NAD 1983 HARN Wisconsin CRS Vernon (US Feet)",
                    "8110": "NAD 1983 HARN Wisconsin CRS Vilas (US Feet)",
                    "8108": "NAD 1983 HARN Wisconsin CRS Walworth (US Feet)",
                    "8106": "NAD 1983 HARN Wisconsin CRS Washburn (US Feet)",
                    "8104": "NAD 1983 HARN Wisconsin CRS Washington (US Feet)",
                    "8102": "NAD 1983 HARN Wisconsin CRS Waukesha (US Feet)",
                    "8100": "NAD 1983 HARN Wisconsin CRS Waupaca (US Feet)",
                    "8098": "NAD 1983 HARN Wisconsin CRS Waushara (US Feet)",
                    "103470": "NAD 1983 HARN Wisconsin CRS Winnebago (US Feet)",
                    "8096": "NAD 1983 HARN Wisconsin CRS Wood (US Feet)"
                }
            }
        },
        "Gauss Kruger": {
            Asia: {
                "2044": "Hanoi 1972 GK Zone 18",
                "2045": "Hanoi 1972 GK Zone 19",
                "2395": "South Yemen GK Zone 8",
                "2396": "South Yemen GK Zone 9"
            },
            "Beijing 1954": {
                "2431": "Beijing 1954 3 Degree GK CM 102E",
                "2432": "Beijing 1954 3 Degree GK CM 105E",
                "2433": "Beijing 1954 3 Degree GK CM 108E",
                "2434": "Beijing 1954 3 Degree GK CM 111E",
                "2435": "Beijing 1954 3 Degree GK CM 114E",
                "2436": "Beijing 1954 3 Degree GK CM 117E",
                "2437": "Beijing 1954 3 Degree GK CM 120E",
                "2438": "Beijing 1954 3 Degree GK CM 123E",
                "2439": "Beijing 1954 3 Degree GK CM 126E",
                "2440": "Beijing 1954 3 Degree GK CM 129E",
                "2441": "Beijing 1954 3 Degree GK CM 132E",
                "2442": "Beijing 1954 3 Degree GK CM 135E",
                "2422": "Beijing 1954 3 Degree GK CM 75E",
                "2423": "Beijing 1954 3 Degree GK CM 78E",
                "2424": "Beijing 1954 3 Degree GK CM 81E",
                "2425": "Beijing 1954 3 Degree GK CM 84E",
                "2426": "Beijing 1954 3 Degree GK CM 87E",
                "2427": "Beijing 1954 3 Degree GK CM 90E",
                "2428": "Beijing 1954 3 Degree GK CM 93E",
                "2429": "Beijing 1954 3 Degree GK CM 96E",
                "2430": "Beijing 1954 3 Degree GK CM 99E",
                "2401": "Beijing 1954 3 Degree GK Zone 25",
                "2402": "Beijing 1954 3 Degree GK Zone 26",
                "2403": "Beijing 1954 3 Degree GK Zone 27",
                "2404": "Beijing 1954 3 Degree GK Zone 28",
                "2405": "Beijing 1954 3 Degree GK Zone 29",
                "2406": "Beijing 1954 3 Degree GK Zone 30",
                "2407": "Beijing 1954 3 Degree GK Zone 31",
                "2408": "Beijing 1954 3 Degree GK Zone 32",
                "2409": "Beijing 1954 3 Degree GK Zone 33",
                "2410": "Beijing 1954 3 Degree GK Zone 34",
                "2411": "Beijing 1954 3 Degree GK Zone 35",
                "2412": "Beijing 1954 3 Degree GK Zone 36",
                "2413": "Beijing 1954 3 Degree GK Zone 37",
                "2414": "Beijing 1954 3 Degree GK Zone 38",
                "2415": "Beijing 1954 3 Degree GK Zone 39",
                "2416": "Beijing 1954 3 Degree GK Zone 40",
                "2417": "Beijing 1954 3 Degree GK Zone 41",
                "2418": "Beijing 1954 3 Degree GK Zone 42",
                "2419": "Beijing 1954 3 Degree GK Zone 43",
                "2420": "Beijing 1954 3 Degree GK Zone 44",
                "2421": "Beijing 1954 3 Degree GK Zone 45",
                "21458": "Beijing 1954 GK CM 105E",
                "21459": "Beijing 1954 GK CM 111E",
                "21460": "Beijing 1954 GK CM 117E",
                "21461": "Beijing 1954 GK CM 123E",
                "21462": "Beijing 1954 GK CM 129E",
                "21463": "Beijing 1954 GK CM 135E",
                "21453": "Beijing 1954 GK CM 75E",
                "21454": "Beijing 1954 GK CM 81E",
                "21455": "Beijing 1954 GK CM 87E",
                "21456": "Beijing 1954 GK CM 93E",
                "21457": "Beijing 1954 GK CM 99E",
                "21413": "Beijing 1954 GK Zone 13",
                "21473": "Beijing 1954 GK Zone 13N",
                "21414": "Beijing 1954 GK Zone 14",
                "21474": "Beijing 1954 GK Zone 14N",
                "21415": "Beijing 1954 GK Zone 15",
                "21475": "Beijing 1954 GK Zone 15N",
                "21416": "Beijing 1954 GK Zone 16",
                "21476": "Beijing 1954 GK Zone 16N",
                "21417": "Beijing 1954 GK Zone 17",
                "21477": "Beijing 1954 GK Zone 17N",
                "21418": "Beijing 1954 GK Zone 18",
                "21478": "Beijing 1954 GK Zone 18N",
                "21419": "Beijing 1954 GK Zone 19",
                "21479": "Beijing 1954 GK Zone 19N",
                "21420": "Beijing 1954 GK Zone 20",
                "21480": "Beijing 1954 GK Zone 20N",
                "21421": "Beijing 1954 GK Zone 21",
                "21481": "Beijing 1954 GK Zone 21N",
                "21422": "Beijing 1954 GK Zone 22",
                "21482": "Beijing 1954 GK Zone 22N",
                "21423": "Beijing 1954 GK Zone 23",
                "21483": "Beijing 1954 GK Zone 23N"
            },
            CGCS2000: {
                "4543": "CGCS2000 3 Degree GK CM 102E",
                "4544": "CGCS2000 3 Degree GK CM 105E",
                "4545": "CGCS2000 3 Degree GK CM 108E",
                "4546": "CGCS2000 3 Degree GK CM 111E",
                "4547": "CGCS2000 3 Degree GK CM 114E",
                "4548": "CGCS2000 3 Degree GK CM 117E",
                "4549": "CGCS2000 3 Degree GK CM 120E",
                "4550": "CGCS2000 3 Degree GK CM 123E",
                "4551": "CGCS2000 3 Degree GK CM 126E",
                "4552": "CGCS2000 3 Degree GK CM 129E",
                "4553": "CGCS2000 3 Degree GK CM 132E",
                "4554": "CGCS2000 3 Degree GK CM 135E",
                "4534": "CGCS2000 3 Degree GK CM 75E",
                "4535": "CGCS2000 3 Degree GK CM 78E",
                "4536": "CGCS2000 3 Degree GK CM 81E",
                "4537": "CGCS2000 3 Degree GK CM 84E",
                "4538": "CGCS2000 3 Degree GK CM 87E",
                "4539": "CGCS2000 3 Degree GK CM 90E",
                "4540": "CGCS2000 3 Degree GK CM 93E",
                "4541": "CGCS2000 3 Degree GK CM 96E",
                "4542": "CGCS2000 3 Degree GK CM 99E",
                "4513": "CGCS2000 3 Degree GK Zone 25",
                "4514": "CGCS2000 3 Degree GK Zone 26",
                "4515": "CGCS2000 3 Degree GK Zone 27",
                "4516": "CGCS2000 3 Degree GK Zone 28",
                "4517": "CGCS2000 3 Degree GK Zone 29",
                "4518": "CGCS2000 3 Degree GK Zone 30",
                "4519": "CGCS2000 3 Degree GK Zone 31",
                "4520": "CGCS2000 3 Degree GK Zone 32",
                "4521": "CGCS2000 3 Degree GK Zone 33",
                "4522": "CGCS2000 3 Degree GK Zone 34",
                "4523": "CGCS2000 3 Degree GK Zone 35",
                "4524": "CGCS2000 3 Degree GK Zone 36",
                "4525": "CGCS2000 3 Degree GK Zone 37",
                "4526": "CGCS2000 3 Degree GK Zone 38",
                "4527": "CGCS2000 3 Degree GK Zone 39",
                "4528": "CGCS2000 3 Degree GK Zone 40",
                "4529": "CGCS2000 3 Degree GK Zone 41",
                "4530": "CGCS2000 3 Degree GK Zone 42",
                "4531": "CGCS2000 3 Degree GK Zone 43",
                "4532": "CGCS2000 3 Degree GK Zone 44",
                "4533": "CGCS2000 3 Degree GK Zone 45",
                "4507": "CGCS2000 GK CM 105E",
                "4508": "CGCS2000 GK CM 111E",
                "4509": "CGCS2000 GK CM 117E",
                "4510": "CGCS2000 GK CM 123E",
                "4511": "CGCS2000 GK CM 129E",
                "4512": "CGCS2000 GK CM 135E",
                "4502": "CGCS2000 GK CM 75E",
                "4503": "CGCS2000 GK CM 81E",
                "4504": "CGCS2000 GK CM 87E",
                "4505": "CGCS2000 GK CM 93E",
                "4506": "CGCS2000 GK CM 99E",
                "4491": "CGCS2000 GK Zone 13",
                "4492": "CGCS2000 GK Zone 14",
                "4493": "CGCS2000 GK Zone 15",
                "4494": "CGCS2000 GK Zone 16",
                "4495": "CGCS2000 GK Zone 17",
                "4496": "CGCS2000 GK Zone 18",
                "4497": "CGCS2000 GK Zone 19",
                "4498": "CGCS2000 GK Zone 20",
                "4499": "CGCS2000 GK Zone 21",
                "4500": "CGCS2000 GK Zone 22",
                "4501": "CGCS2000 GK Zone 23"
            },
            Europe: {
                "2462": "Albanian 1987 GK Zone 4",
                "8395": "ETRS 1989 GK CM 9E",
                "3396": "PD 83 GK Zone 3",
                "3397": "PD 83 GK Zone 4",
                "3840": "Pulkovo 1942 Adj 1958 3 Degree GK Zone 10",
                "3837": "Pulkovo 1942 Adj 1958 3 Degree GK Zone 3",
                "3838": "Pulkovo 1942 Adj 1958 3 Degree GK Zone 4",
                "3329": "Pulkovo 1942 Adj 1958 3 Degree GK Zone 5",
                "3330": "Pulkovo 1942 Adj 1958 3 Degree GK Zone 6",
                "3332": "Pulkovo 1942 Adj 1958 3 Degree GK Zone 8",
                "3839": "Pulkovo 1942 Adj 1958 3 Degree GK Zone 9",
                "5670": "Pulkovo 1942 Adj 1958 3-Degree GK Zone 3 (E-N)",
                "5671": "Pulkovo 1942 Adj 1958 3-Degree GK Zone 4 (E-N)",
                "5672": "Pulkovo 1942 Adj 1958 3-Degree GK Zone 5 (E-N)",
                "3331": "Pulkovo 1942 Adj 1958 3-Degree GK Zone 7",
                "3833": "Pulkovo 1942 Adj 1958 GK Zone 2",
                "5631": "Pulkovo 1942 Adj 1958 GK Zone 2 (E-N)",
                "3333": "Pulkovo 1942 Adj 1958 GK Zone 3",
                "5663": "Pulkovo 1942 Adj 1958 GK Zone 3 (E-N)",
                "3334": "Pulkovo 1942 Adj 1958 GK Zone 4",
                "3335": "Pulkovo 1942 Adj 1958 GK Zone 5",
                "2397": "Pulkovo 1942 Adj 1983 3 Degree GK Zone 3",
                "2398": "Pulkovo 1942 Adj 1983 3 Degree GK Zone 4",
                "2399": "Pulkovo 1942 Adj 1983 3 Degree GK Zone 5",
                "3841": "Pulkovo 1942 Adj 1983 3 Degree GK Zone 6",
                "4434": "Pulkovo 1942 Adj 1983 3 Degree GK Zone 8",
                "5673": "Pulkovo 1942 Adj 1983 3-Degree GK Zone 3 (E-N)",
                "5674": "Pulkovo 1942 Adj 1983 3-Degree GK Zone 4 (E-N)",
                "5675": "Pulkovo 1942 Adj 1983 3-Degree GK Zone 5 (E-N)",
                "4417": "Pulkovo 1942 Adj 1983 3-Degree GK Zone 7",
                "3834": "Pulkovo 1942 Adj 1983 GK Zone 2",
                "5664": "Pulkovo 1942 Adj 1983 GK Zone 2 (E-N)",
                "3835": "Pulkovo 1942 Adj 1983 GK Zone 3",
                "5665": "Pulkovo 1942 Adj 1983 GK Zone 3 (E-N)",
                "3836": "Pulkovo 1942 Adj 1983 GK Zone 4",
                "5668": "RD 83 3 Degree GK Zone 4 (E-N)",
                "5669": "RD 83 3 Degree GK Zone 5 (E-N)",
                "3398": "RD 83 GK Zone 4",
                "3399": "RD 83 GK Zone 5"
            },
            "GSK 2011": {
                "21334": "GSK-2011 GSK 3GK CM 102E",
                "21335": "GSK-2011 GSK 3GK CM 105E",
                "21336": "GSK-2011 GSK 3GK CM 108E",
                "21337": "GSK-2011 GSK 3GK CM 111E",
                "21338": "GSK-2011 GSK 3GK CM 114E",
                "21339": "GSK-2011 GSK 3GK CM 117E",
                "21340": "GSK-2011 GSK 3GK CM 120E",
                "21341": "GSK-2011 GSK 3GK CM 123E",
                "21342": "GSK-2011 GSK 3GK CM 126E",
                "21343": "GSK-2011 GSK 3GK CM 129E",
                "21344": "GSK-2011 GSK 3GK CM 132E",
                "21345": "GSK-2011 GSK 3GK CM 135E",
                "21346": "GSK-2011 GSK 3GK CM 138E",
                "21347": "GSK-2011 GSK 3GK CM 141E",
                "21348": "GSK-2011 GSK 3GK CM 144E",
                "21349": "GSK-2011 GSK 3GK CM 147E",
                "21350": "GSK-2011 GSK 3GK CM 150E",
                "21351": "GSK-2011 GSK 3GK CM 153E",
                "21352": "GSK-2011 GSK 3GK CM 156E",
                "21353": "GSK-2011 GSK 3GK CM 159E",
                "21354": "GSK-2011 GSK 3GK CM 162E",
                "21355": "GSK-2011 GSK 3GK CM 165E",
                "21356": "GSK-2011 GSK 3GK CM 168E",
                "21364": "GSK-2011 GSK 3GK CM 168W",
                "21357": "GSK-2011 GSK 3GK CM 171E",
                "21363": "GSK-2011 GSK 3GK CM 171W",
                "21358": "GSK-2011 GSK 3GK CM 174E",
                "21362": "GSK-2011 GSK 3GK CM 174W",
                "21359": "GSK-2011 GSK 3GK CM 177E",
                "21361": "GSK-2011 GSK 3GK CM 177W",
                "21360": "GSK-2011 GSK 3GK CM 180E",
                "21307": "GSK-2011 GSK 3GK CM 21E",
                "21308": "GSK-2011 GSK 3GK CM 24E",
                "21309": "GSK-2011 GSK 3GK CM 27E",
                "21310": "GSK-2011 GSK 3GK CM 30E",
                "21311": "GSK-2011 GSK 3GK CM 33E",
                "21312": "GSK-2011 GSK 3GK CM 36E",
                "21313": "GSK-2011 GSK 3GK CM 39E",
                "21314": "GSK-2011 GSK 3GK CM 42E",
                "21315": "GSK-2011 GSK 3GK CM 45E",
                "21316": "GSK-2011 GSK 3GK CM 48E",
                "21317": "GSK-2011 GSK 3GK CM 51E",
                "21318": "GSK-2011 GSK 3GK CM 54E",
                "21319": "GSK-2011 GSK 3GK CM 57E",
                "21320": "GSK-2011 GSK 3GK CM 60E",
                "21321": "GSK-2011 GSK 3GK CM 63E",
                "21322": "GSK-2011 GSK 3GK CM 66E",
                "21323": "GSK-2011 GSK 3GK CM 69E",
                "21324": "GSK-2011 GSK 3GK CM 72E",
                "21325": "GSK-2011 GSK 3GK CM 75E",
                "21326": "GSK-2011 GSK 3GK CM 78E",
                "21327": "GSK-2011 GSK 3GK CM 81E",
                "21328": "GSK-2011 GSK 3GK CM 84E",
                "21329": "GSK-2011 GSK 3GK CM 87E",
                "21330": "GSK-2011 GSK 3GK CM 90E",
                "21331": "GSK-2011 GSK 3GK CM 93E",
                "21332": "GSK-2011 GSK 3GK CM 96E",
                "21333": "GSK-2011 GSK 3GK CM 99E",
                "21210": "GSK-2011 GSK 3GK zone 10",
                "21211": "GSK-2011 GSK 3GK zone 11",
                "21212": "GSK-2011 GSK 3GK zone 12",
                "21213": "GSK-2011 GSK 3GK zone 13",
                "21214": "GSK-2011 GSK 3GK zone 14",
                "21215": "GSK-2011 GSK 3GK zone 15",
                "21216": "GSK-2011 GSK 3GK zone 16",
                "21217": "GSK-2011 GSK 3GK zone 17",
                "21218": "GSK-2011 GSK 3GK zone 18",
                "21219": "GSK-2011 GSK 3GK zone 19",
                "21220": "GSK-2011 GSK 3GK zone 20",
                "21221": "GSK-2011 GSK 3GK zone 21",
                "21222": "GSK-2011 GSK 3GK zone 22",
                "21223": "GSK-2011 GSK 3GK zone 23",
                "21224": "GSK-2011 GSK 3GK zone 24",
                "21225": "GSK-2011 GSK 3GK zone 25",
                "21226": "GSK-2011 GSK 3GK zone 26",
                "21227": "GSK-2011 GSK 3GK zone 27",
                "21228": "GSK-2011 GSK 3GK zone 28",
                "21229": "GSK-2011 GSK 3GK zone 29",
                "21230": "GSK-2011 GSK 3GK zone 30",
                "21231": "GSK-2011 GSK 3GK zone 31",
                "21232": "GSK-2011 GSK 3GK zone 32",
                "21233": "GSK-2011 GSK 3GK zone 33",
                "21234": "GSK-2011 GSK 3GK zone 34",
                "21235": "GSK-2011 GSK 3GK zone 35",
                "21236": "GSK-2011 GSK 3GK zone 36",
                "21237": "GSK-2011 GSK 3GK zone 37",
                "21238": "GSK-2011 GSK 3GK zone 38",
                "21239": "GSK-2011 GSK 3GK zone 39",
                "21240": "GSK-2011 GSK 3GK zone 40",
                "21241": "GSK-2011 GSK 3GK zone 41",
                "21242": "GSK-2011 GSK 3GK zone 42",
                "21243": "GSK-2011 GSK 3GK zone 43",
                "21244": "GSK-2011 GSK 3GK zone 44",
                "21245": "GSK-2011 GSK 3GK zone 45",
                "21246": "GSK-2011 GSK 3GK zone 46",
                "21247": "GSK-2011 GSK 3GK zone 47",
                "21248": "GSK-2011 GSK 3GK zone 48",
                "21249": "GSK-2011 GSK 3GK zone 49",
                "21250": "GSK-2011 GSK 3GK zone 50",
                "21251": "GSK-2011 GSK 3GK zone 51",
                "21252": "GSK-2011 GSK 3GK zone 52",
                "21253": "GSK-2011 GSK 3GK zone 53",
                "21254": "GSK-2011 GSK 3GK zone 54",
                "21255": "GSK-2011 GSK 3GK zone 55",
                "21256": "GSK-2011 GSK 3GK zone 56",
                "21257": "GSK-2011 GSK 3GK zone 57",
                "21258": "GSK-2011 GSK 3GK zone 58",
                "21259": "GSK-2011 GSK 3GK zone 59",
                "21260": "GSK-2011 GSK 3GK zone 60",
                "21261": "GSK-2011 GSK 3GK zone 61",
                "21262": "GSK-2011 GSK 3GK zone 62",
                "21263": "GSK-2011 GSK 3GK zone 63",
                "21264": "GSK-2011 GSK 3GK zone 64",
                "21207": "GSK-2011 GSK 3GK zone 7",
                "21208": "GSK-2011 GSK 3GK zone 8",
                "21209": "GSK-2011 GSK 3GK zone 9",
                "21018": "GSK-2011 Gauss-Kruger CM 105E",
                "21019": "GSK-2011 Gauss-Kruger CM 111E",
                "21020": "GSK-2011 Gauss-Kruger CM 117E",
                "21021": "GSK-2011 Gauss-Kruger CM 123E",
                "21022": "GSK-2011 Gauss-Kruger CM 129E",
                "21023": "GSK-2011 Gauss-Kruger CM 135E",
                "21024": "GSK-2011 Gauss-Kruger CM 141E",
                "21025": "GSK-2011 Gauss-Kruger CM 147E",
                "21026": "GSK-2011 Gauss-Kruger CM 153E",
                "21027": "GSK-2011 Gauss-Kruger CM 159E",
                "21028": "GSK-2011 Gauss-Kruger CM 165E",
                "21029": "GSK-2011 Gauss-Kruger CM 171E",
                "21032": "GSK-2011 Gauss-Kruger CM 171W",
                "21030": "GSK-2011 Gauss-Kruger CM 177E",
                "21031": "GSK-2011 Gauss-Kruger CM 177W",
                "21004": "GSK-2011 Gauss-Kruger CM 21E",
                "21005": "GSK-2011 Gauss-Kruger CM 27E",
                "21006": "GSK-2011 Gauss-Kruger CM 33E",
                "21007": "GSK-2011 Gauss-Kruger CM 39E",
                "21008": "GSK-2011 Gauss-Kruger CM 45E",
                "21009": "GSK-2011 Gauss-Kruger CM 51E",
                "21010": "GSK-2011 Gauss-Kruger CM 57E",
                "21011": "GSK-2011 Gauss-Kruger CM 63E",
                "21012": "GSK-2011 Gauss-Kruger CM 69E",
                "21013": "GSK-2011 Gauss-Kruger CM 75E",
                "21014": "GSK-2011 Gauss-Kruger CM 81E",
                "21015": "GSK-2011 Gauss-Kruger CM 87E",
                "21016": "GSK-2011 Gauss-Kruger CM 93E",
                "21017": "GSK-2011 Gauss-Kruger CM 99E",
                "20910": "GSK-2011 Gauss-Kruger zone 10",
                "20911": "GSK-2011 Gauss-Kruger zone 11",
                "20912": "GSK-2011 Gauss-Kruger zone 12",
                "20913": "GSK-2011 Gauss-Kruger zone 13",
                "20914": "GSK-2011 Gauss-Kruger zone 14",
                "20915": "GSK-2011 Gauss-Kruger zone 15",
                "20916": "GSK-2011 Gauss-Kruger zone 16",
                "20917": "GSK-2011 Gauss-Kruger zone 17",
                "20918": "GSK-2011 Gauss-Kruger zone 18",
                "20919": "GSK-2011 Gauss-Kruger zone 19",
                "20920": "GSK-2011 Gauss-Kruger zone 20",
                "20921": "GSK-2011 Gauss-Kruger zone 21",
                "20922": "GSK-2011 Gauss-Kruger zone 22",
                "20923": "GSK-2011 Gauss-Kruger zone 23",
                "20924": "GSK-2011 Gauss-Kruger zone 24",
                "20925": "GSK-2011 Gauss-Kruger zone 25",
                "20926": "GSK-2011 Gauss-Kruger zone 26",
                "20927": "GSK-2011 Gauss-Kruger zone 27",
                "20928": "GSK-2011 Gauss-Kruger zone 28",
                "20929": "GSK-2011 Gauss-Kruger zone 29",
                "20930": "GSK-2011 Gauss-Kruger zone 30",
                "20931": "GSK-2011 Gauss-Kruger zone 31",
                "20932": "GSK-2011 Gauss-Kruger zone 32",
                "20904": "GSK-2011 Gauss-Kruger zone 4",
                "20905": "GSK-2011 Gauss-Kruger zone 5",
                "20906": "GSK-2011 Gauss-Kruger zone 6",
                "20907": "GSK-2011 Gauss-Kruger zone 7",
                "20908": "GSK-2011 Gauss-Kruger zone 8",
                "20909": "GSK-2011 Gauss-Kruger zone 9"
            },
            "New Beijing": {
                "4791": "New Beijing Gauss-Kruger 3 Degree CM 102E",
                "4792": "New Beijing Gauss-Kruger 3 Degree CM 105E",
                "4793": "New Beijing Gauss-Kruger 3 Degree CM 108E",
                "4794": "New Beijing Gauss-Kruger 3 Degree CM 111E",
                "4795": "New Beijing Gauss-Kruger 3 Degree CM 114E",
                "4796": "New Beijing Gauss-Kruger 3 Degree CM 117E",
                "4797": "New Beijing Gauss-Kruger 3 Degree CM 120E",
                "4798": "New Beijing Gauss-Kruger 3 Degree CM 123E",
                "4799": "New Beijing Gauss-Kruger 3 Degree CM 126E",
                "4800": "New Beijing Gauss-Kruger 3 Degree CM 129E",
                "102569": "New Beijing Gauss-Kruger 3 Degree CM 132E",
                "4822": "New Beijing Gauss-Kruger 3 Degree CM 135E",
                "4782": "New Beijing Gauss-Kruger 3 Degree CM 75E",
                "4783": "New Beijing Gauss-Kruger 3 Degree CM 78E",
                "4784": "New Beijing Gauss-Kruger 3 Degree CM 81E",
                "4785": "New Beijing Gauss-Kruger 3 Degree CM 84E",
                "4786": "New Beijing Gauss-Kruger 3 Degree CM 87E",
                "4787": "New Beijing Gauss-Kruger 3 Degree CM 90E",
                "4788": "New Beijing Gauss-Kruger 3 Degree CM 93E",
                "4789": "New Beijing Gauss-Kruger 3 Degree CM 96E",
                "4790": "New Beijing Gauss-Kruger 3 Degree CM 99E",
                "4652": "New Beijing Gauss-Kruger 3 Degree Zone 25",
                "4653": "New Beijing Gauss-Kruger 3 Degree Zone 26",
                "4654": "New Beijing Gauss-Kruger 3 Degree Zone 27",
                "4655": "New Beijing Gauss-Kruger 3 Degree Zone 28",
                "4656": "New Beijing Gauss-Kruger 3 Degree Zone 29",
                "4766": "New Beijing Gauss-Kruger 3 Degree Zone 30",
                "4767": "New Beijing Gauss-Kruger 3 Degree Zone 31",
                "4768": "New Beijing Gauss-Kruger 3 Degree Zone 32",
                "4769": "New Beijing Gauss-Kruger 3 Degree Zone 33",
                "4770": "New Beijing Gauss-Kruger 3 Degree Zone 34",
                "4771": "New Beijing Gauss-Kruger 3 Degree Zone 35",
                "4772": "New Beijing Gauss-Kruger 3 Degree Zone 36",
                "4773": "New Beijing Gauss-Kruger 3 Degree Zone 37",
                "4774": "New Beijing Gauss-Kruger 3 Degree Zone 38",
                "4775": "New Beijing Gauss-Kruger 3 Degree Zone 39",
                "4776": "New Beijing Gauss-Kruger 3 Degree Zone 40",
                "4777": "New Beijing Gauss-Kruger 3 Degree Zone 41",
                "4778": "New Beijing Gauss-Kruger 3 Degree Zone 42",
                "4779": "New Beijing Gauss-Kruger 3 Degree Zone 43",
                "4780": "New Beijing Gauss-Kruger 3 Degree Zone 44",
                "4781": "New Beijing Gauss-Kruger 3 Degree Zone 45",
                "4584": "New Beijing Gauss-Kruger CM 105E",
                "4585": "New Beijing Gauss-Kruger CM 111E",
                "4586": "New Beijing Gauss-Kruger CM 117E",
                "4587": "New Beijing Gauss-Kruger CM 123E",
                "4588": "New Beijing Gauss-Kruger CM 129E",
                "4589": "New Beijing Gauss-Kruger CM 135E",
                "4579": "New Beijing Gauss-Kruger CM 75E",
                "4580": "New Beijing Gauss-Kruger CM 81E",
                "4581": "New Beijing Gauss-Kruger CM 87E",
                "4582": "New Beijing Gauss-Kruger CM 93E",
                "4583": "New Beijing Gauss-Kruger CM 99E",
                "4568": "New Beijing Gauss-Kruger Zone 13",
                "4569": "New Beijing Gauss-Kruger Zone 14",
                "4570": "New Beijing Gauss-Kruger Zone 15",
                "4571": "New Beijing Gauss-Kruger Zone 16",
                "4572": "New Beijing Gauss-Kruger Zone 17",
                "4573": "New Beijing Gauss-Kruger Zone 18",
                "4574": "New Beijing Gauss-Kruger Zone 19",
                "4575": "New Beijing Gauss-Kruger Zone 20",
                "4576": "New Beijing Gauss-Kruger Zone 21",
                "4577": "New Beijing Gauss-Kruger Zone 22",
                "4578": "New Beijing Gauss-Kruger Zone 23"
            },
            "Pulkovo 1942": {
                "2610": "Pulkovo 1942 3 Degree GK CM 102E",
                "2611": "Pulkovo 1942 3 Degree GK CM 105E",
                "2612": "Pulkovo 1942 3 Degree GK CM 108E",
                "2613": "Pulkovo 1942 3 Degree GK CM 111E",
                "2614": "Pulkovo 1942 3 Degree GK CM 114E",
                "2615": "Pulkovo 1942 3 Degree GK CM 117E",
                "2616": "Pulkovo 1942 3 Degree GK CM 120E",
                "2617": "Pulkovo 1942 3 Degree GK CM 123E",
                "2618": "Pulkovo 1942 3 Degree GK CM 126E",
                "2619": "Pulkovo 1942 3 Degree GK CM 129E",
                "2620": "Pulkovo 1942 3 Degree GK CM 132E",
                "2621": "Pulkovo 1942 3 Degree GK CM 135E",
                "2622": "Pulkovo 1942 3 Degree GK CM 138E",
                "2623": "Pulkovo 1942 3 Degree GK CM 141E",
                "2624": "Pulkovo 1942 3 Degree GK CM 144E",
                "2625": "Pulkovo 1942 3 Degree GK CM 147E",
                "2626": "Pulkovo 1942 3 Degree GK CM 150E",
                "2627": "Pulkovo 1942 3 Degree GK CM 153E",
                "2628": "Pulkovo 1942 3 Degree GK CM 156E",
                "2629": "Pulkovo 1942 3 Degree GK CM 159E",
                "2630": "Pulkovo 1942 3 Degree GK CM 162E",
                "2631": "Pulkovo 1942 3 Degree GK CM 165E",
                "2632": "Pulkovo 1942 3 Degree GK CM 168E",
                "2640": "Pulkovo 1942 3 Degree GK CM 168W",
                "2633": "Pulkovo 1942 3 Degree GK CM 171E",
                "2639": "Pulkovo 1942 3 Degree GK CM 171W",
                "2634": "Pulkovo 1942 3 Degree GK CM 174E",
                "2638": "Pulkovo 1942 3 Degree GK CM 174W",
                "2635": "Pulkovo 1942 3 Degree GK CM 177E",
                "2637": "Pulkovo 1942 3 Degree GK CM 177W",
                "2636": "Pulkovo 1942 3 Degree GK CM 180E",
                "3147": "Pulkovo 1942 3 Degree GK CM 18E",
                "2582": "Pulkovo 1942 3 Degree GK CM 21E",
                "2583": "Pulkovo 1942 3 Degree GK CM 24E",
                "2584": "Pulkovo 1942 3 Degree GK CM 27E",
                "2585": "Pulkovo 1942 3 Degree GK CM 30E",
                "2586": "Pulkovo 1942 3 Degree GK CM 33E",
                "2587": "Pulkovo 1942 3 Degree GK CM 36E",
                "2588": "Pulkovo 1942 3 Degree GK CM 39E",
                "2589": "Pulkovo 1942 3 Degree GK CM 42E",
                "2590": "Pulkovo 1942 3 Degree GK CM 45E",
                "2591": "Pulkovo 1942 3 Degree GK CM 48E",
                "2592": "Pulkovo 1942 3 Degree GK CM 51E",
                "2593": "Pulkovo 1942 3 Degree GK CM 54E",
                "2594": "Pulkovo 1942 3 Degree GK CM 57E",
                "3146": "Pulkovo 1942 3 Degree GK CM 6",
                "3389": "Pulkovo 1942 3 Degree GK CM 60",
                "2595": "Pulkovo 1942 3 Degree GK CM 60E",
                "2596": "Pulkovo 1942 3 Degree GK CM 63E",
                "2597": "Pulkovo 1942 3 Degree GK CM 66E",
                "2598": "Pulkovo 1942 3 Degree GK CM 69E",
                "2599": "Pulkovo 1942 3 Degree GK CM 72E",
                "2601": "Pulkovo 1942 3 Degree GK CM 75E",
                "2602": "Pulkovo 1942 3 Degree GK CM 78E",
                "2603": "Pulkovo 1942 3 Degree GK CM 81E",
                "2604": "Pulkovo 1942 3 Degree GK CM 84E",
                "2605": "Pulkovo 1942 3 Degree GK CM 87E",
                "2606": "Pulkovo 1942 3 Degree GK CM 90E",
                "2607": "Pulkovo 1942 3 Degree GK CM 93E",
                "2608": "Pulkovo 1942 3 Degree GK CM 96E",
                "2609": "Pulkovo 1942 3 Degree GK CM 99E",
                "2526": "Pulkovo 1942 3 Degree GK Zone 10",
                "2527": "Pulkovo 1942 3 Degree GK Zone 11",
                "2528": "Pulkovo 1942 3 Degree GK Zone 12",
                "2529": "Pulkovo 1942 3 Degree GK Zone 13",
                "2530": "Pulkovo 1942 3 Degree GK Zone 14",
                "2531": "Pulkovo 1942 3 Degree GK Zone 15",
                "2532": "Pulkovo 1942 3 Degree GK Zone 16",
                "2533": "Pulkovo 1942 3 Degree GK Zone 17",
                "2534": "Pulkovo 1942 3 Degree GK Zone 18",
                "2535": "Pulkovo 1942 3 Degree GK Zone 19",
                "2536": "Pulkovo 1942 3 Degree GK Zone 20",
                "2537": "Pulkovo 1942 3 Degree GK Zone 21",
                "2538": "Pulkovo 1942 3 Degree GK Zone 22",
                "2539": "Pulkovo 1942 3 Degree GK Zone 23",
                "2540": "Pulkovo 1942 3 Degree GK Zone 24",
                "2541": "Pulkovo 1942 3 Degree GK Zone 25",
                "2542": "Pulkovo 1942 3 Degree GK Zone 26",
                "2543": "Pulkovo 1942 3 Degree GK Zone 27",
                "2544": "Pulkovo 1942 3 Degree GK Zone 28",
                "2545": "Pulkovo 1942 3 Degree GK Zone 29",
                "2546": "Pulkovo 1942 3 Degree GK Zone 30",
                "2547": "Pulkovo 1942 3 Degree GK Zone 31",
                "2548": "Pulkovo 1942 3 Degree GK Zone 32",
                "2549": "Pulkovo 1942 3 Degree GK Zone 33",
                "2551": "Pulkovo 1942 3 Degree GK Zone 34",
                "2552": "Pulkovo 1942 3 Degree GK Zone 35",
                "2553": "Pulkovo 1942 3 Degree GK Zone 36",
                "2554": "Pulkovo 1942 3 Degree GK Zone 37",
                "2555": "Pulkovo 1942 3 Degree GK Zone 38",
                "2556": "Pulkovo 1942 3 Degree GK Zone 39",
                "2557": "Pulkovo 1942 3 Degree GK Zone 40",
                "2558": "Pulkovo 1942 3 Degree GK Zone 41",
                "2559": "Pulkovo 1942 3 Degree GK Zone 42",
                "2560": "Pulkovo 1942 3 Degree GK Zone 43",
                "2561": "Pulkovo 1942 3 Degree GK Zone 44",
                "2562": "Pulkovo 1942 3 Degree GK Zone 45",
                "2563": "Pulkovo 1942 3 Degree GK Zone 46",
                "2564": "Pulkovo 1942 3 Degree GK Zone 47",
                "2565": "Pulkovo 1942 3 Degree GK Zone 48",
                "2566": "Pulkovo 1942 3 Degree GK Zone 49",
                "2567": "Pulkovo 1942 3 Degree GK Zone 50",
                "2568": "Pulkovo 1942 3 Degree GK Zone 51",
                "2569": "Pulkovo 1942 3 Degree GK Zone 52",
                "2570": "Pulkovo 1942 3 Degree GK Zone 53",
                "2571": "Pulkovo 1942 3 Degree GK Zone 54",
                "2572": "Pulkovo 1942 3 Degree GK Zone 55",
                "2573": "Pulkovo 1942 3 Degree GK Zone 56",
                "2574": "Pulkovo 1942 3 Degree GK Zone 57",
                "2575": "Pulkovo 1942 3 Degree GK Zone 58",
                "2576": "Pulkovo 1942 3 Degree GK Zone 59",
                "2578": "Pulkovo 1942 3 Degree GK Zone 61",
                "2579": "Pulkovo 1942 3 Degree GK Zone 62",
                "2580": "Pulkovo 1942 3 Degree GK Zone 63",
                "2581": "Pulkovo 1942 3 Degree GK Zone 64",
                "2523": "Pulkovo 1942 3 Degree GK Zone 7",
                "2524": "Pulkovo 1942 3 Degree GK Zone 8",
                "2525": "Pulkovo 1942 3 Degree GK Zone 9",
                "2935": "Pulkovo 1942 CS63 Zone A1",
                "2936": "Pulkovo 1942 CS63 Zone A2",
                "2937": "Pulkovo 1942 CS63 Zone A3",
                "2938": "Pulkovo 1942 CS63 Zone A4",
                "3350": "Pulkovo 1942 CS63 Zone C0",
                "3351": "Pulkovo 1942 CS63 Zone C1",
                "3352": "Pulkovo 1942 CS63 Zone C2",
                "2939": "Pulkovo 1942 CS63 Zone K2",
                "2940": "Pulkovo 1942 CS63 Zone K3",
                "2941": "Pulkovo 1942 CS63 Zone K4",
                "28410": "Pulkovo 1942 GK Zone 10",
                "28470": "Pulkovo 1942 GK Zone 10N",
                "28411": "Pulkovo 1942 GK Zone 11",
                "28471": "Pulkovo 1942 GK Zone 11N",
                "28412": "Pulkovo 1942 GK Zone 12",
                "28472": "Pulkovo 1942 GK Zone 12N",
                "28413": "Pulkovo 1942 GK Zone 13",
                "28473": "Pulkovo 1942 GK Zone 13N",
                "28414": "Pulkovo 1942 GK Zone 14",
                "28474": "Pulkovo 1942 GK Zone 14N",
                "28415": "Pulkovo 1942 GK Zone 15",
                "28475": "Pulkovo 1942 GK Zone 15N",
                "28416": "Pulkovo 1942 GK Zone 16",
                "28476": "Pulkovo 1942 GK Zone 16N",
                "28417": "Pulkovo 1942 GK Zone 17",
                "28477": "Pulkovo 1942 GK Zone 17N",
                "28418": "Pulkovo 1942 GK Zone 18",
                "28478": "Pulkovo 1942 GK Zone 18N",
                "28419": "Pulkovo 1942 GK Zone 19",
                "28479": "Pulkovo 1942 GK Zone 19N",
                "28402": "Pulkovo 1942 GK Zone 2",
                "28420": "Pulkovo 1942 GK Zone 20",
                "28480": "Pulkovo 1942 GK Zone 20N",
                "28421": "Pulkovo 1942 GK Zone 21",
                "28481": "Pulkovo 1942 GK Zone 21N",
                "28422": "Pulkovo 1942 GK Zone 22",
                "28482": "Pulkovo 1942 GK Zone 22N",
                "28423": "Pulkovo 1942 GK Zone 23",
                "28483": "Pulkovo 1942 GK Zone 23N",
                "28424": "Pulkovo 1942 GK Zone 24",
                "28484": "Pulkovo 1942 GK Zone 24N",
                "28425": "Pulkovo 1942 GK Zone 25",
                "28485": "Pulkovo 1942 GK Zone 25N",
                "28426": "Pulkovo 1942 GK Zone 26",
                "28486": "Pulkovo 1942 GK Zone 26N",
                "28427": "Pulkovo 1942 GK Zone 27",
                "28487": "Pulkovo 1942 GK Zone 27N",
                "28428": "Pulkovo 1942 GK Zone 28",
                "28488": "Pulkovo 1942 GK Zone 28N",
                "28429": "Pulkovo 1942 GK Zone 29",
                "28489": "Pulkovo 1942 GK Zone 29N",
                "28462": "Pulkovo 1942 GK Zone 2N",
                "28403": "Pulkovo 1942 GK Zone 3",
                "28430": "Pulkovo 1942 GK Zone 30",
                "28490": "Pulkovo 1942 GK Zone 30N",
                "28431": "Pulkovo 1942 GK Zone 31",
                "28491": "Pulkovo 1942 GK Zone 31N",
                "28432": "Pulkovo 1942 GK Zone 32",
                "28492": "Pulkovo 1942 GK Zone 32N",
                "28463": "Pulkovo 1942 GK Zone 3N",
                "28404": "Pulkovo 1942 GK Zone 4",
                "28464": "Pulkovo 1942 GK Zone 4N",
                "28405": "Pulkovo 1942 GK Zone 5",
                "28465": "Pulkovo 1942 GK Zone 5N",
                "28406": "Pulkovo 1942 GK Zone 6",
                "28466": "Pulkovo 1942 GK Zone 6N",
                "28407": "Pulkovo 1942 GK Zone 7",
                "28467": "Pulkovo 1942 GK Zone 7N",
                "28408": "Pulkovo 1942 GK Zone 8",
                "28468": "Pulkovo 1942 GK Zone 8N",
                "28409": "Pulkovo 1942 GK Zone 9",
                "28469": "Pulkovo 1942 GK Zone 9N",
                "2508": "Pulkovo 1942 Gauss-Kruger CM 105E",
                "2509": "Pulkovo 1942 Gauss-Kruger CM 111E",
                "2510": "Pulkovo 1942 Gauss-Kruger CM 117E",
                "2511": "Pulkovo 1942 Gauss-Kruger CM 123E",
                "2512": "Pulkovo 1942 Gauss-Kruger CM 129E",
                "2513": "Pulkovo 1942 Gauss-Kruger CM 135E",
                "2514": "Pulkovo 1942 Gauss-Kruger CM 141E",
                "2515": "Pulkovo 1942 Gauss-Kruger CM 147E",
                "2516": "Pulkovo 1942 Gauss-Kruger CM 153E",
                "2517": "Pulkovo 1942 Gauss-Kruger CM 159E",
                "2518": "Pulkovo 1942 Gauss-Kruger CM 165E",
                "2519": "Pulkovo 1942 Gauss-Kruger CM 171E",
                "2522": "Pulkovo 1942 Gauss-Kruger CM 171W",
                "2520": "Pulkovo 1942 Gauss-Kruger CM 177E",
                "2521": "Pulkovo 1942 Gauss-Kruger CM 177W",
                "2494": "Pulkovo 1942 Gauss-Kruger CM 21E",
                "2495": "Pulkovo 1942 Gauss-Kruger CM 27E",
                "2496": "Pulkovo 1942 Gauss-Kruger CM 33E",
                "2497": "Pulkovo 1942 Gauss-Kruger CM 39E",
                "2499": "Pulkovo 1942 Gauss-Kruger CM 51E",
                "2500": "Pulkovo 1942 Gauss-Kruger CM 57E",
                "2501": "Pulkovo 1942 Gauss-Kruger CM 63E",
                "2503": "Pulkovo 1942 Gauss-Kruger CM 75E",
                "2504": "Pulkovo 1942 Gauss-Kruger CM 81E",
                "2505": "Pulkovo 1942 Gauss-Kruger CM 87E",
                "2506": "Pulkovo 1942 Gauss-Kruger CM 93E",
                "2507": "Pulkovo 1942 Gauss-Kruger CM 99E",
                "2498": "Pulkovo 1942 Gauss-Krugerr CM 45E",
                "2502": "Pulkovo 1942 Gauss-Krugerr CM 69E"
            },
            "Pulkovo 1995": {
                "2726": "Pulkovo 1995 3 Degree GK CM 102E",
                "2727": "Pulkovo 1995 3 Degree GK CM 105E",
                "2728": "Pulkovo 1995 3 Degree GK CM 108E",
                "2729": "Pulkovo 1995 3 Degree GK CM 111E",
                "2730": "Pulkovo 1995 3 Degree GK CM 114E",
                "2731": "Pulkovo 1995 3 Degree GK CM 117E",
                "2732": "Pulkovo 1995 3 Degree GK CM 120E",
                "2733": "Pulkovo 1995 3 Degree GK CM 123E",
                "2734": "Pulkovo 1995 3 Degree GK CM 126E",
                "2735": "Pulkovo 1995 3 Degree GK CM 129E",
                "2738": "Pulkovo 1995 3 Degree GK CM 132E",
                "2739": "Pulkovo 1995 3 Degree GK CM 135E",
                "2740": "Pulkovo 1995 3 Degree GK CM 138E",
                "2741": "Pulkovo 1995 3 Degree GK CM 141E",
                "2742": "Pulkovo 1995 3 Degree GK CM 144E",
                "2743": "Pulkovo 1995 3 Degree GK CM 147E",
                "2744": "Pulkovo 1995 3 Degree GK CM 150E",
                "2745": "Pulkovo 1995 3 Degree GK CM 153E",
                "2746": "Pulkovo 1995 3 Degree GK CM 156E",
                "2747": "Pulkovo 1995 3 Degree GK CM 159E",
                "2748": "Pulkovo 1995 3 Degree GK CM 162E",
                "2749": "Pulkovo 1995 3 Degree GK CM 165E",
                "2750": "Pulkovo 1995 3 Degree GK CM 168E",
                "2758": "Pulkovo 1995 3 Degree GK CM 168W",
                "2751": "Pulkovo 1995 3 Degree GK CM 171E",
                "2757": "Pulkovo 1995 3 Degree GK CM 171W",
                "2752": "Pulkovo 1995 3 Degree GK CM 174E",
                "2756": "Pulkovo 1995 3 Degree GK CM 174W",
                "2753": "Pulkovo 1995 3 Degree GK CM 177E",
                "2755": "Pulkovo 1995 3 Degree GK CM 177W",
                "2754": "Pulkovo 1995 3 Degree GK CM 180E",
                "3151": "Pulkovo 1995 3 Degree GK CM 18E",
                "2699": "Pulkovo 1995 3 Degree GK CM 21E",
                "2700": "Pulkovo 1995 3 Degree GK CM 24E",
                "2701": "Pulkovo 1995 3 Degree GK CM 27E",
                "2702": "Pulkovo 1995 3 Degree GK CM 30E",
                "2703": "Pulkovo 1995 3 Degree GK CM 33E",
                "2704": "Pulkovo 1995 3 Degree GK CM 36E",
                "2705": "Pulkovo 1995 3 Degree GK CM 39E",
                "2706": "Pulkovo 1995 3 Degree GK CM 42E",
                "2707": "Pulkovo 1995 3 Degree GK CM 45E",
                "2708": "Pulkovo 1995 3 Degree GK CM 48E",
                "2709": "Pulkovo 1995 3 Degree GK CM 51E",
                "2710": "Pulkovo 1995 3 Degree GK CM 54E",
                "2711": "Pulkovo 1995 3 Degree GK CM 57E",
                "3150": "Pulkovo 1995 3 Degree GK CM 6",
                "3390": "Pulkovo 1995 3 Degree GK CM 60",
                "2712": "Pulkovo 1995 3 Degree GK CM 60E",
                "2713": "Pulkovo 1995 3 Degree GK CM 63E",
                "2714": "Pulkovo 1995 3 Degree GK CM 66E",
                "2715": "Pulkovo 1995 3 Degree GK CM 69E",
                "2716": "Pulkovo 1995 3 Degree GK CM 72E",
                "2717": "Pulkovo 1995 3 Degree GK CM 75E",
                "2718": "Pulkovo 1995 3 Degree GK CM 78E",
                "2719": "Pulkovo 1995 3 Degree GK CM 81E",
                "2720": "Pulkovo 1995 3 Degree GK CM 84E",
                "2721": "Pulkovo 1995 3 Degree GK CM 87E",
                "2722": "Pulkovo 1995 3 Degree GK CM 90E",
                "2723": "Pulkovo 1995 3 Degree GK CM 93E",
                "2724": "Pulkovo 1995 3 Degree GK CM 96E",
                "2725": "Pulkovo 1995 3 Degree GK CM 99E",
                "2644": "Pulkovo 1995 3 Degree GK Zone 10",
                "2645": "Pulkovo 1995 3 Degree GK Zone 11",
                "2646": "Pulkovo 1995 3 Degree GK Zone 12",
                "2647": "Pulkovo 1995 3 Degree GK Zone 13",
                "2648": "Pulkovo 1995 3 Degree GK Zone 14",
                "2649": "Pulkovo 1995 3 Degree GK Zone 15",
                "2650": "Pulkovo 1995 3 Degree GK Zone 16",
                "2651": "Pulkovo 1995 3 Degree GK Zone 17",
                "2652": "Pulkovo 1995 3 Degree GK Zone 18",
                "2653": "Pulkovo 1995 3 Degree GK Zone 19",
                "2654": "Pulkovo 1995 3 Degree GK Zone 20",
                "2655": "Pulkovo 1995 3 Degree GK Zone 21",
                "2656": "Pulkovo 1995 3 Degree GK Zone 22",
                "2657": "Pulkovo 1995 3 Degree GK Zone 23",
                "2658": "Pulkovo 1995 3 Degree GK Zone 24",
                "2659": "Pulkovo 1995 3 Degree GK Zone 25",
                "2660": "Pulkovo 1995 3 Degree GK Zone 26",
                "2661": "Pulkovo 1995 3 Degree GK Zone 27",
                "2662": "Pulkovo 1995 3 Degree GK Zone 28",
                "2663": "Pulkovo 1995 3 Degree GK Zone 29",
                "2664": "Pulkovo 1995 3 Degree GK Zone 30",
                "2665": "Pulkovo 1995 3 Degree GK Zone 31",
                "2666": "Pulkovo 1995 3 Degree GK Zone 32",
                "2667": "Pulkovo 1995 3 Degree GK Zone 33",
                "2668": "Pulkovo 1995 3 Degree GK Zone 34",
                "2669": "Pulkovo 1995 3 Degree GK Zone 35",
                "2670": "Pulkovo 1995 3 Degree GK Zone 36",
                "2671": "Pulkovo 1995 3 Degree GK Zone 37",
                "2672": "Pulkovo 1995 3 Degree GK Zone 38",
                "2673": "Pulkovo 1995 3 Degree GK Zone 39",
                "2674": "Pulkovo 1995 3 Degree GK Zone 40",
                "2675": "Pulkovo 1995 3 Degree GK Zone 41",
                "2676": "Pulkovo 1995 3 Degree GK Zone 42",
                "2677": "Pulkovo 1995 3 Degree GK Zone 43",
                "2678": "Pulkovo 1995 3 Degree GK Zone 44",
                "2679": "Pulkovo 1995 3 Degree GK Zone 45",
                "2680": "Pulkovo 1995 3 Degree GK Zone 46",
                "2681": "Pulkovo 1995 3 Degree GK Zone 47",
                "2682": "Pulkovo 1995 3 Degree GK Zone 48",
                "2683": "Pulkovo 1995 3 Degree GK Zone 49",
                "2684": "Pulkovo 1995 3 Degree GK Zone 50",
                "2685": "Pulkovo 1995 3 Degree GK Zone 51",
                "2686": "Pulkovo 1995 3 Degree GK Zone 52",
                "2687": "Pulkovo 1995 3 Degree GK Zone 53",
                "2688": "Pulkovo 1995 3 Degree GK Zone 54",
                "2689": "Pulkovo 1995 3 Degree GK Zone 55",
                "2690": "Pulkovo 1995 3 Degree GK Zone 56",
                "2691": "Pulkovo 1995 3 Degree GK Zone 57",
                "2692": "Pulkovo 1995 3 Degree GK Zone 58",
                "2693": "Pulkovo 1995 3 Degree GK Zone 59",
                "2695": "Pulkovo 1995 3 Degree GK Zone 61",
                "2696": "Pulkovo 1995 3 Degree GK Zone 62",
                "2697": "Pulkovo 1995 3 Degree GK Zone 63",
                "2698": "Pulkovo 1995 3 Degree GK Zone 64",
                "2641": "Pulkovo 1995 3 Degree GK Zone 7",
                "2642": "Pulkovo 1995 3 Degree GK Zone 8",
                "2643": "Pulkovo 1995 3 Degree GK Zone 9",
                "20010": "Pulkovo 1995 GK Zone 10",
                "20070": "Pulkovo 1995 GK Zone 10N",
                "20011": "Pulkovo 1995 GK Zone 11",
                "20071": "Pulkovo 1995 GK Zone 11N",
                "20012": "Pulkovo 1995 GK Zone 12",
                "20072": "Pulkovo 1995 GK Zone 12N",
                "20013": "Pulkovo 1995 GK Zone 13",
                "20073": "Pulkovo 1995 GK Zone 13N",
                "20014": "Pulkovo 1995 GK Zone 14",
                "20074": "Pulkovo 1995 GK Zone 14N",
                "20015": "Pulkovo 1995 GK Zone 15",
                "20075": "Pulkovo 1995 GK Zone 15N",
                "20016": "Pulkovo 1995 GK Zone 16",
                "20076": "Pulkovo 1995 GK Zone 16N",
                "20017": "Pulkovo 1995 GK Zone 17",
                "20077": "Pulkovo 1995 GK Zone 17N",
                "20018": "Pulkovo 1995 GK Zone 18",
                "20078": "Pulkovo 1995 GK Zone 18N",
                "20019": "Pulkovo 1995 GK Zone 19",
                "20079": "Pulkovo 1995 GK Zone 19N",
                "20002": "Pulkovo 1995 GK Zone 2",
                "20020": "Pulkovo 1995 GK Zone 20",
                "20080": "Pulkovo 1995 GK Zone 20N",
                "20021": "Pulkovo 1995 GK Zone 21",
                "20081": "Pulkovo 1995 GK Zone 21N",
                "20022": "Pulkovo 1995 GK Zone 22",
                "20082": "Pulkovo 1995 GK Zone 22N",
                "20023": "Pulkovo 1995 GK Zone 23",
                "20083": "Pulkovo 1995 GK Zone 23N",
                "20024": "Pulkovo 1995 GK Zone 24",
                "20084": "Pulkovo 1995 GK Zone 24N",
                "20025": "Pulkovo 1995 GK Zone 25",
                "20085": "Pulkovo 1995 GK Zone 25N",
                "20026": "Pulkovo 1995 GK Zone 26",
                "20086": "Pulkovo 1995 GK Zone 26N",
                "20027": "Pulkovo 1995 GK Zone 27",
                "20087": "Pulkovo 1995 GK Zone 27N",
                "20028": "Pulkovo 1995 GK Zone 28",
                "20088": "Pulkovo 1995 GK Zone 28N",
                "20029": "Pulkovo 1995 GK Zone 29",
                "20089": "Pulkovo 1995 GK Zone 29N",
                "20062": "Pulkovo 1995 GK Zone 2N",
                "20003": "Pulkovo 1995 GK Zone 3",
                "20030": "Pulkovo 1995 GK Zone 30",
                "20090": "Pulkovo 1995 GK Zone 30N",
                "20031": "Pulkovo 1995 GK Zone 31",
                "20091": "Pulkovo 1995 GK Zone 31N",
                "20032": "Pulkovo 1995 GK Zone 32",
                "20092": "Pulkovo 1995 GK Zone 32N",
                "20063": "Pulkovo 1995 GK Zone 3N",
                "20004": "Pulkovo 1995 GK Zone 4",
                "20064": "Pulkovo 1995 GK Zone 4N",
                "20005": "Pulkovo 1995 GK Zone 5",
                "20065": "Pulkovo 1995 GK Zone 5N",
                "20006": "Pulkovo 1995 GK Zone 6",
                "20066": "Pulkovo 1995 GK Zone 6N",
                "20007": "Pulkovo 1995 GK Zone 7",
                "20067": "Pulkovo 1995 GK Zone 7N",
                "20008": "Pulkovo 1995 GK Zone 8",
                "20068": "Pulkovo 1995 GK Zone 8N",
                "20009": "Pulkovo 1995 GK Zone 9",
                "20069": "Pulkovo 1995 GK Zone 9N",
                "2477": "Pulkovo 1995 Gauss-Kruger CM 105E",
                "2478": "Pulkovo 1995 Gauss-Kruger CM 111E",
                "2479": "Pulkovo 1995 Gauss-Kruger CM 117E",
                "2480": "Pulkovo 1995 Gauss-Kruger CM 123E",
                "2481": "Pulkovo 1995 Gauss-Kruger CM 129E",
                "2482": "Pulkovo 1995 Gauss-Kruger CM 135E",
                "2483": "Pulkovo 1995 Gauss-Kruger CM 141E",
                "2484": "Pulkovo 1995 Gauss-Kruger CM 147E",
                "2485": "Pulkovo 1995 Gauss-Kruger CM 153E",
                "2486": "Pulkovo 1995 Gauss-Kruger CM 159E",
                "2487": "Pulkovo 1995 Gauss-Kruger CM 165E",
                "2488": "Pulkovo 1995 Gauss-Kruger CM 171E",
                "2491": "Pulkovo 1995 Gauss-Kruger CM 171W",
                "2489": "Pulkovo 1995 Gauss-Kruger CM 177E",
                "2490": "Pulkovo 1995 Gauss-Kruger CM 177W",
                "2463": "Pulkovo 1995 Gauss-Kruger CM 21E",
                "2464": "Pulkovo 1995 Gauss-Kruger CM 27E",
                "2465": "Pulkovo 1995 Gauss-Kruger CM 33E",
                "2466": "Pulkovo 1995 Gauss-Kruger CM 39E",
                "2467": "Pulkovo 1995 Gauss-Kruger CM 45E",
                "2468": "Pulkovo 1995 Gauss-Kruger CM 51E",
                "2469": "Pulkovo 1995 Gauss-Kruger CM 57E",
                "2470": "Pulkovo 1995 Gauss-Kruger CM 63E",
                "2471": "Pulkovo 1995 Gauss-Kruger CM 69E",
                "2472": "Pulkovo 1995 Gauss-Kruger CM 75E",
                "2473": "Pulkovo 1995 Gauss-Kruger CM 81E",
                "2474": "Pulkovo 1995 Gauss-Kruger CM 87E",
                "2475": "Pulkovo 1995 Gauss-Kruger CM 93E",
                "2476": "Pulkovo 1995 Gauss-Kruger CM 99E"
            },
            Turkey: {
                "2207": "ED 1950 3 Degree GK Zone 10",
                "2208": "ED 1950 3 Degree GK Zone 11",
                "2209": "ED 1950 3 Degree GK Zone 12",
                "2210": "ED 1950 3 Degree GK Zone 13",
                "2211": "ED 1950 3 Degree GK Zone 14",
                "2212": "ED 1950 3 Degree GK Zone 15",
                "2206": "ED 1950 3 Degree GK Zone 9"
            },
            "Xian 1980": {
                "2379": "Xian 1980 3 Degree GK CM 102E",
                "2380": "Xian 1980 3 Degree GK CM 105E",
                "2381": "Xian 1980 3 Degree GK CM 108E",
                "2382": "Xian 1980 3 Degree GK CM 111E",
                "2383": "Xian 1980 3 Degree GK CM 114E",
                "2384": "Xian 1980 3 Degree GK CM 117E",
                "2385": "Xian 1980 3 Degree GK CM 120E",
                "2386": "Xian 1980 3 Degree GK CM 123E",
                "2387": "Xian 1980 3 Degree GK CM 126E",
                "2388": "Xian 1980 3 Degree GK CM 129E",
                "2389": "Xian 1980 3 Degree GK CM 132E",
                "2390": "Xian 1980 3 Degree GK CM 135E",
                "2370": "Xian 1980 3 Degree GK CM 75E",
                "2371": "Xian 1980 3 Degree GK CM 78E",
                "2372": "Xian 1980 3 Degree GK CM 81E",
                "2373": "Xian 1980 3 Degree GK CM 84E",
                "2374": "Xian 1980 3 Degree GK CM 87E",
                "2375": "Xian 1980 3 Degree GK CM 90E",
                "2376": "Xian 1980 3 Degree GK CM 93E",
                "2377": "Xian 1980 3 Degree GK CM 96E",
                "2378": "Xian 1980 3 Degree GK CM 99E",
                "2349": "Xian 1980 3 Degree GK Zone 25",
                "2350": "Xian 1980 3 Degree GK Zone 26",
                "2351": "Xian 1980 3 Degree GK Zone 27",
                "2352": "Xian 1980 3 Degree GK Zone 28",
                "2353": "Xian 1980 3 Degree GK Zone 29",
                "2354": "Xian 1980 3 Degree GK Zone 30",
                "2355": "Xian 1980 3 Degree GK Zone 31",
                "2356": "Xian 1980 3 Degree GK Zone 32",
                "2357": "Xian 1980 3 Degree GK Zone 33",
                "2358": "Xian 1980 3 Degree GK Zone 34",
                "2359": "Xian 1980 3 Degree GK Zone 35",
                "2360": "Xian 1980 3 Degree GK Zone 36",
                "2361": "Xian 1980 3 Degree GK Zone 37",
                "2362": "Xian 1980 3 Degree GK Zone 38",
                "2363": "Xian 1980 3 Degree GK Zone 39",
                "2364": "Xian 1980 3 Degree GK Zone 40",
                "2365": "Xian 1980 3 Degree GK Zone 41",
                "2366": "Xian 1980 3 Degree GK Zone 42",
                "2367": "Xian 1980 3 Degree GK Zone 43",
                "2368": "Xian 1980 3 Degree GK Zone 44",
                "2369": "Xian 1980 3 Degree GK Zone 45",
                "2343": "Xian 1980 GK CM 105E",
                "2344": "Xian 1980 GK CM 111E",
                "2345": "Xian 1980 GK CM 117E",
                "2346": "Xian 1980 GK CM 123E",
                "2347": "Xian 1980 GK CM 129E",
                "2348": "Xian 1980 GK CM 135E",
                "2338": "Xian 1980 GK CM 75E",
                "2339": "Xian 1980 GK CM 81E",
                "2340": "Xian 1980 GK CM 87E",
                "2341": "Xian 1980 GK CM 93E",
                "2342": "Xian 1980 GK CM 99E",
                "2327": "Xian 1980 GK Zone 13",
                "2328": "Xian 1980 GK Zone 14",
                "2329": "Xian 1980 GK Zone 15",
                "2330": "Xian 1980 GK Zone 16",
                "2331": "Xian 1980 GK Zone 17",
                "2332": "Xian 1980 GK Zone 18",
                "2333": "Xian 1980 GK Zone 19",
                "2334": "Xian 1980 GK Zone 20",
                "2335": "Xian 1980 GK Zone 21",
                "2336": "Xian 1980 GK Zone 22",
                "2337": "Xian 1980 GK Zone 23"
            }
        },
        "National Grids": {
            Africa: {
                "2165": "Abidjan 1987 TM 5 NW",
                "2136": "Accra Ghana Grid",
                "2137": "Accra TM 1 NW",
                "2931": "Beduaram TM 13 NE",
                "22091": "Camacupa TM 11 30 SE",
                "22092": "Camacupa TM 12 SE",
                "2088": "Carthage TM 11 NE",
                "3119": "Douala 1948 AOF West",
                "22991": "Egypt Blue Belt",
                "22994": "Egypt Extended Purple Belt",
                "3355": "Egypt Gulf of Suez S-650 TL Red Belt",
                "22993": "Egypt Purple Belt",
                "22992": "Egypt Red Belt",
                "25000": "Ghana Metre Grid",
                "3986": "Katanga 1955 Katanga Gauss A",
                "3987": "Katanga 1955 Katanga Gauss B",
                "3988": "Katanga 1955 Katanga Gauss C",
                "3989": "Katanga 1955 Katanga Gauss D",
                "4415": "Katanga 1955 Katanga Lambert",
                "3315": "Katanga 1955 Katanga TM",
                "2164": "Locodjo 1965 TM 5 NW",
                "26194": "Merchich Sahara Nord",
                "26195": "Merchich Sahara Sud",
                "26393": "Nigeria East Belt",
                "26392": "Nigeria Mid Belt",
                "26391": "Nigeria West Belt",
                "102491": "Nord Algerie Ancienne (degrees)",
                "30491": "Nord Algerie ancienne",
                "26191": "Nord Maroc",
                "102191": "Nord Maroc (degrees)",
                "30791": "Nord Sahara 1959 Voirol Unifie Nord",
                "30792": "Nord Sahara 1959 Voirol Unifie Sud",
                "22391": "Nord Tunisie",
                "5844": "RGRDC 2005 Congo TM Zone 30",
                "9159": "RSAO13 TM 12 SE",
                "9156": "RSAO13 UTM zone 32S",
                "9157": "RSAO13 UTM zone 33S",
                "9158": "RSAO13 UTM zone 34S",
                "26193": "Sahara",
                "102193": "Sahara (degrees)",
                "2159": "Sierra Leone 1924 New Colony Grid",
                "2160": "Sierra Leone 1924 New War Office Grid",
                "30492": "Sud Algerie Ancienne",
                "102492": "Sud Algerie Ancienne Degree",
                "26192": "Sud Maroc",
                "102192": "Sud Maroc (degrees)",
                "22392": "Sud Tunisie",
                "29701": "Tananarive 1925 (Paris) Laborde Grid",
                "8441": "Tananarive 1925 Laborde Grid",
                "30493": "Voirol 1879 Nord Algerie Ancienne",
                "30494": "Voirol 1879 Sud Algerie Ancienne",
                "5223": "WGS 1984 Gabon TM",
                "5523": "WGS 1984 Gabon TM 2011",
                "5842": "WGS 1984 TM 12 SE",
                "32766": "WGS 1984 TM 36 SE",
                "2311": "WGS 1984 TM 6 NE"
            },
            Argentina: {
                "22191": "Argentina Zone 1",
                "22192": "Argentina Zone 2",
                "22193": "Argentina Zone 3",
                "22194": "Argentina Zone 4",
                "22195": "Argentina Zone 5",
                "22196": "Argentina Zone 6",
                "22197": "Argentina Zone 7",
                "2081": "Chos Malal 1914 Argentina 2",
                "2083": "Hito XVIII 1963 Argentina 2",
                "9252": "MMN Argentina 2",
                "9254": "MMS Argentina 2",
                "22181": "POSGAR 1994 Argentina Zone 1",
                "22182": "POSGAR 1994 Argentina Zone 2",
                "22183": "POSGAR 1994 Argentina Zone 3",
                "22184": "POSGAR 1994 Argentina Zone 4",
                "22185": "POSGAR 1994 Argentina Zone 5",
                "22186": "POSGAR 1994 Argentina Zone 6",
                "22187": "POSGAR 1994 Argentina Zone 7",
                "22171": "POSGAR 1998 Argentina Zone 1",
                "22172": "POSGAR 1998 Argentina Zone 2",
                "22173": "POSGAR 1998 Argentina Zone 3",
                "22174": "POSGAR 1998 Argentina Zone 4",
                "22175": "POSGAR 1998 Argentina Zone 5",
                "22176": "POSGAR 1998 Argentina Zone 6",
                "22177": "POSGAR 1998 Argentina Zone 7",
                "5343": "POSGAR 2007 Argentina Zone 1",
                "5344": "POSGAR 2007 Argentina Zone 2",
                "5345": "POSGAR 2007 Argentina Zone 3",
                "5346": "POSGAR 2007 Argentina Zone 4",
                "5347": "POSGAR 2007 Argentina Zone 5",
                "5348": "POSGAR 2007 Argentina Zone 6",
                "5349": "POSGAR 2007 Argentina Zone 7",
                "9498": "POSGAR 2007 CABA 2019",
                "9284": "Pampa del Castillo Argentina 1",
                "2082": "Pampa del Castillo Argentina 2",
                "9285": "Pampa del Castillo Argentina 3",
                "9249": "Tapi Aike Argentina 1",
                "9250": "Tapi Aike Argentina 2"
            },
            Asia: {
                "102204": "Ain el Abd 1970 Aramco Lambert 2",
                "2318": "Ain el Abd Aramco Lambert",
                "20499": "Bahrain State Grid",
                "5266": "DRUKREF 03 Bhutan National Grid",
                "22780": "Deir ez Zor Levant Stereographic",
                "22700": "Deir ez Zor Levant Zone",
                "22770": "Deir ez Zor Syria Lambert",
                "3893": "ED 1950 Iraq National Grid",
                "3066": "ED 1950 Jordan TM",
                "102061": "Everest Modified 1969 RSO Malaya (Meters)",
                "3200": "FD 1958 Iraq",
                "2093": "Hanoi 1972 GK 106 NE",
                "3407": "Hong Kong 1963 Grid System",
                "2326": "Hong Kong 1980 Grid",
                "3176": "Indian 1960 TM 106NE",
                "2039": "Israel TM Grid",
                "6984": "Israeli Grid 05",
                "6991": "Israeli Grid 05-12",
                "102158": "Jordan JTM",
                "31901": "KUDAMS KTM",
                "102064": "Kandawala Ceylon Belt (Indian Yards 1937)",
                "102063": "Kandawala Ceylon Belt (Meters)",
                "5234": "Kandawala Sri Lanka Grid",
                "6646": "Karbala 1979 Iraq National Grid",
                "24600": "Kuwait Oil Co - Lambert",
                "7692": "Kyrg-06 TM Zone 1",
                "7693": "Kyrg-06 TM Zone 2",
                "7694": "Kyrg-06 TM Zone 3",
                "7695": "Kyrg-06 TM Zone 4",
                "7696": "Kyrg-06 TM Zone 5",
                "8433": "Macao 1920 Macao Grid",
                "102448": "Macao 2008 Macao Grid",
                "3394": "Nahrwan 1934 Iraq Zone",
                "102306": "Nepal Nagarkot TM",
                "102159": "Observatorio Meteorologico 1965 Macau Grid",
                "5550": "PNG94 PNGMG94 Zone 54",
                "5551": "PNG94 PNGMG94 Zone 55",
                "5552": "PNG94 PNGMG94 Zone 56",
                "3121": "PRS 1992 Philippines Zone I",
                "3122": "PRS 1992 Philippines Zone II",
                "3123": "PRS 1992 Philippines Zone III",
                "3124": "PRS 1992 Philippines Zone IV",
                "3125": "PRS 1992 Philippines Zone V",
                "28193": "Palestine 1923 Israel CS Grid",
                "28192": "Palestine 1923 Palestine Belt",
                "28191": "Palestine 1923 Palestine Grid",
                "7142": "Palestine 1923 Palestine Grid TM",
                "103699": "Palestine Grid 1923 Modified TM",
                "25391": "Philippines Zone I",
                "25392": "Philippines Zone II",
                "25393": "Philippines Zone III",
                "25394": "Philippines Zone IV",
                "25395": "Philippines Zone V",
                "3388": "Pulkovo 1942 Caspian Sea Mercator",
                "2932": "QND 1995 Qatar National Grid",
                "2099": "Qatar 1948 Qatar Grid",
                "28600": "Qatar National Grid",
                "2057": "Rassadiran Nakhl e Taqi",
                "5235": "SLD99 Sri Lanka Grid 1999",
                "3827": "TWD 1967 TM Penghu",
                "3828": "TWD 1967 TM Taiwan",
                "3825": "TWD 1997 TM Penghu",
                "3826": "TWD 1997 TM Taiwan",
                "3415": "WGS 1972 BE South China Sea Lambert",
                "2094": "WGS 1972 TM 106 NE",
                "3997": "WGS 1984 Dubai Local TM"
            },
            Australia: {
                "102071": "AGD 1966 ACT Grid AGC Zone",
                "5825": "AGD 1966 ACT Standard Grid",
                "20248": "AGD 1966 AMG Zone 48",
                "20249": "AGD 1966 AMG Zone 49",
                "20250": "AGD 1966 AMG Zone 50",
                "20251": "AGD 1966 AMG Zone 51",
                "20252": "AGD 1966 AMG Zone 52",
                "20253": "AGD 1966 AMG Zone 53",
                "20254": "AGD 1966 AMG Zone 54",
                "20255": "AGD 1966 AMG Zone 55",
                "20256": "AGD 1966 AMG Zone 56",
                "20257": "AGD 1966 AMG Zone 57",
                "20258": "AGD 1966 AMG Zone 58",
                "102072": "AGD 1966 ISG 54 2",
                "102073": "AGD 1966 ISG 54 3",
                "102074": "AGD 1966 ISG 55 1",
                "102075": "AGD 1966 ISG 55 2",
                "102076": "AGD 1966 ISG 55 3",
                "102077": "AGD 1966 ISG 56 1",
                "102078": "AGD 1966 ISG 56 2",
                "102079": "AGD 1966 ISG 56 3",
                "3110": "AGD 1966 VICGRID",
                "20348": "AGD 1984 AMG Zone 48",
                "20349": "AGD 1984 AMG Zone 49",
                "20350": "AGD 1984 AMG Zone 50",
                "20351": "AGD 1984 AMG Zone 51",
                "20352": "AGD 1984 AMG Zone 52",
                "20353": "AGD 1984 AMG Zone 53",
                "20354": "AGD 1984 AMG Zone 54",
                "20355": "AGD 1984 AMG Zone 55",
                "20356": "AGD 1984 AMG Zone 56",
                "20357": "AGD 1984 AMG Zone 57",
                "20358": "AGD 1984 AMG Zone 58",
                "3577": "GDA 1994 Australia Albers",
                "3113": "GDA 1994 BCSG02",
                "6721": "GDA 1994 CIG94",
                "6723": "GDA 1994 CKIG94",
                "3112": "GDA 1994 Geoscience Australia Lambert",
                "6732": "GDA 1994 MGA Zone 41",
                "6733": "GDA 1994 MGA Zone 42",
                "6734": "GDA 1994 MGA Zone 43",
                "6735": "GDA 1994 MGA Zone 44",
                "6736": "GDA 1994 MGA Zone 46",
                "6737": "GDA 1994 MGA Zone 47",
                "28348": "GDA 1994 MGA Zone 48",
                "28349": "GDA 1994 MGA Zone 49",
                "28350": "GDA 1994 MGA Zone 50",
                "28351": "GDA 1994 MGA Zone 51",
                "28352": "GDA 1994 MGA Zone 52",
                "28353": "GDA 1994 MGA Zone 53",
                "28354": "GDA 1994 MGA Zone 54",
                "28355": "GDA 1994 MGA Zone 55",
                "28356": "GDA 1994 MGA Zone 56",
                "28357": "GDA 1994 MGA Zone 57",
                "28358": "GDA 1994 MGA Zone 58",
                "6738": "GDA 1994 MGA Zone 59",
                "3308": "GDA 1994 New South Wales Lambert",
                "102216": "GDA 1994 PCG94",
                "3107": "GDA 1994 South Australia Lambert",
                "3111": "GDA 1994 VICGRID94",
                "8391": "GDA 1994 WEIPA94",
                "8013": "GDA2020 ALB2020",
                "9473": "GDA2020 Australian Albers",
                "8016": "GDA2020 BCG2020",
                "8014": "GDA2020 BIO2020",
                "8015": "GDA2020 BRO2020",
                "8017": "GDA2020 CARN2020",
                "8018": "GDA2020 CIG2020",
                "8019": "GDA2020 CKIG2020",
                "8020": "GDA2020 COL2020",
                "8021": "GDA2020 ESP2020",
                "8022": "GDA2020 EXM2020",
                "7845": "GDA2020 GA LCC",
                "8023": "GDA2020 GCG2020",
                "8024": "GDA2020 GOLD2020",
                "8025": "GDA2020 JCG2020",
                "8026": "GDA2020 KALB2020",
                "8027": "GDA2020 KAR2020",
                "8028": "GDA2020 KUN2020",
                "8029": "GDA2020 LCG2020",
                "7846": "GDA2020 MGA Zone 46",
                "7847": "GDA2020 MGA Zone 47",
                "7848": "GDA2020 MGA Zone 48",
                "7849": "GDA2020 MGA Zone 49",
                "7850": "GDA2020 MGA Zone 50",
                "7851": "GDA2020 MGA Zone 51",
                "7852": "GDA2020 MGA Zone 52",
                "7853": "GDA2020 MGA Zone 53",
                "7854": "GDA2020 MGA Zone 54",
                "7855": "GDA2020 MGA Zone 55",
                "7856": "GDA2020 MGA Zone 56",
                "7857": "GDA2020 MGA Zone 57",
                "7858": "GDA2020 MGA Zone 58",
                "7859": "GDA2020 MGA Zone 59",
                "8030": "GDA2020 MRCG2020",
                "8058": "GDA2020 New South Wales Lambert",
                "8031": "GDA2020 PCG2020",
                "8032": "GDA2020 PHG2020",
                "8059": "GDA2020 South Australia Lambert",
                "7899": "GDA2020 Vicgrid",
                "4462": "WGS 1984 Austalian Centre for Remote Sensing Lambert",
                "6720": "WGS 1984 CIG92",
                "6722": "WGS 1984 CKIG92"
            },
            Austria: {
                "31282": "Austria (Ferro) Central Zone",
                "31283": "Austria (Ferro) East Zone",
                "31281": "Austria (Ferro) West Zone",
                "3416": "ETRS 1989 Austria Lambert",
                "31252": "MGI (Ferro) Austria GK Central",
                "31253": "MGI (Ferro) Austria GK East",
                "31251": "MGI (Ferro) Austria GK West",
                "31288": "MGI (Ferro) M28",
                "31289": "MGI (Ferro) M31",
                "31290": "MGI (Ferro) M34",
                "9272": "MGI (Greenwich) Austria Central",
                "9273": "MGI (Greenwich) Austria East",
                "9271": "MGI (Greenwich) Austria West",
                "31255": "MGI Austria GK Central",
                "31256": "MGI Austria GK East",
                "31257": "MGI Austria GK M28",
                "31258": "MGI Austria GK M31",
                "31259": "MGI Austria GK M34",
                "31254": "MGI Austria GK West",
                "31287": "MGI Austria Lambert",
                "31284": "MGI M28",
                "31285": "MGI M31",
                "31286": "MGI M34"
            },
            Bangladesh: {
                "102954": "BUTM2010",
                "102934": "Cassini Bangladesh Zone 01 Dinajpur",
                "102935": "Cassini Bangladesh Zone 02 Rangpur",
                "102936": "Cassini Bangladesh Zone 03 Rajshahi",
                "102937": "Cassini Bangladesh Zone 04 Bogura",
                "102938": "Cassini Bangladesh Zone 05 Pabna",
                "102939": "Cassini Bangladesh Zone 06 Mymensingh",
                "102940": "Cassini Bangladesh Zone 07 Dhaka",
                "102941": "Cassini Bangladesh Zone 08 Faridpur",
                "102942": "Cassini Bangladesh Zone 09 Sylhet",
                "102943": "Cassini Bangladesh Zone 10 Kushtia",
                "102944": "Cassini Bangladesh Zone 11 Joshore",
                "102945": "Cassini Bangladesh Zone 12 Khulna",
                "102946": "Cassini Bangladesh Zone 13 Barishal",
                "102947": "Cassini Bangladesh Zone 14 Cumilla",
                "102948": "Cassini Bangladesh Zone 15 Noakhali",
                "102949": "Cassini Bangladesh Zone 16 Chottogram",
                "102950": "Cassini Bangladesh Zone 17 CHT",
                "3106": "Gulshan 303 Bangladesh TM 90 NE",
                "9678": "Gulshan 303 Bangladesh Transverse Mercator",
                "24305": "Kalianpur 1937 UTM Zone 45N",
                "24306": "Kalianpur 1937 UTM Zone 46N",
                "102951": "LCC Bangladesh",
                "102952": "LCC Gulshan",
                "102953": "UTM Bangladesh (BTM)",
                "102955": "UTM Gulshan",
                "9680": "WGS 84 TM 90 NE"
            },
            Bhutan: {
                "5292": "DRUKREF 03 Bumthang TM",
                "5293": "DRUKREF 03 Chhukha TM",
                "5294": "DRUKREF 03 Dagana TM",
                "5295": "DRUKREF 03 Gasa TM",
                "5296": "DRUKREF 03 Ha TM",
                "5297": "DRUKREF 03 Lhuentse TM",
                "5298": "DRUKREF 03 Mongar TM",
                "5299": "DRUKREF 03 Paro TM",
                "5300": "DRUKREF 03 Pemagatshel TM",
                "5301": "DRUKREF 03 Punakha TM",
                "5302": "DRUKREF 03 Samdrup Jongkhar TM",
                "5303": "DRUKREF 03 Samtse TM",
                "5304": "DRUKREF 03 Sarpang TM",
                "5305": "DRUKREF 03 Thimphu TM",
                "5306": "DRUKREF 03 Trashigang TM",
                "5307": "DRUKREF 03 Trongsa TM",
                "5308": "DRUKREF 03 Tsirang TM",
                "5309": "DRUKREF 03 Wangdue Phodrang TM",
                "5310": "DRUKREF 03 Yangtse TM",
                "5311": "DRUKREF 03 Zhemgang TM"
            },
            Canada: {
                "2294": "ATS 1977 MTM 4 Nova Scotia",
                "2295": "ATS 1977 MTM 5 Nova Scotia",
                "2200": "ATS 1977 New Brunswick Stereographic",
                "102178": "NAD 1927 10TM AEP Forest",
                "102179": "NAD 1927 10TM AEP Resource",
                "3771": "NAD 1927 3TM 111",
                "3772": "NAD 1927 3TM 114",
                "3773": "NAD 1927 3TM 117",
                "3800": "NAD 1927 3TM 120",
                "2016": "NAD 1927 CGQ77 MTM 10 SCoPQ",
                "2008": "NAD 1927 CGQ77 MTM 2 SCoPQ",
                "2009": "NAD 1927 CGQ77 MTM 3 SCoPQ",
                "2010": "NAD 1927 CGQ77 MTM 4 SCoPQ",
                "2011": "NAD 1927 CGQ77 MTM 5 SCoPQ",
                "2012": "NAD 1927 CGQ77 MTM 6 SCoPQ",
                "2013": "NAD 1927 CGQ77 MTM 7 SCoPQ",
                "2014": "NAD 1927 CGQ77 MTM 8 SCoPQ",
                "2015": "NAD 1927 CGQ77 MTM 9 SCoPQ",
                "2138": "NAD 1927 CGQ77 Quebec Lambert",
                "2031": "NAD 1927 CGQ77 UTM Zone 17N",
                "2032": "NAD 1927 CGQ77 UTM Zone 18N",
                "2033": "NAD 1927 CGQ77 UTM Zone 19N",
                "2034": "NAD 1927 CGQ77 UTM Zone 20N",
                "2035": "NAD 1927 CGQ77 UTM Zone 21N",
                "2019": "NAD 1927 DEF 1976 MTM 10",
                "2020": "NAD 1927 DEF 1976 MTM 11",
                "2021": "NAD 1927 DEF 1976 MTM 12",
                "2022": "NAD 1927 DEF 1976 MTM 13",
                "2023": "NAD 1927 DEF 1976 MTM 14",
                "2024": "NAD 1927 DEF 1976 MTM 15",
                "2025": "NAD 1927 DEF 1976 MTM 16",
                "2026": "NAD 1927 DEF 1976 MTM 17",
                "2017": "NAD 1927 DEF 1976 MTM 8",
                "2018": "NAD 1927 DEF 1976 MTM 9",
                "2027": "NAD 1927 DEF 1976 UTM Zone 15N",
                "2028": "NAD 1927 DEF 1976 UTM Zone 16N",
                "2029": "NAD 1927 DEF 1976 UTM Zone 17N",
                "2030": "NAD 1927 DEF 1976 UTM Zone 18N",
                "32081": "NAD 1927 MTM 1",
                "32082": "NAD 1927 MTM 2",
                "32083": "NAD 1927 MTM 3",
                "32084": "NAD 1927 MTM 4",
                "32085": "NAD 1927 MTM 5",
                "32086": "NAD 1927 MTM 6",
                "7991": "NAD 1927 MTM zone 10",
                "3797": "NAD 1927 MTQ Lambert",
                "5588": "NAD 1927 New Brunswick Stereographic",
                "32098": "NAD 1927 Quebec Lambert",
                "8082": "NAD 1983 (2011) CSRS v6 MTM Nova Scotia zone 4",
                "8083": "NAD 1983 (2011) CSRS v6 MTM Nova Scotia zone 5",
                "103696": "NAD 1983 (CSRS) v6 UTM Zone 19N",
                "103697": "NAD 1983 (CSRS) v6 UTM Zone 20N",
                "103698": "NAD 1983 (CSRS) v6 UTM Zone 21N",
                "3400": "NAD 1983 10TM AEP Forest",
                "3401": "NAD 1983 10TM AEP Resource",
                "3775": "NAD 1983 3TM 111",
                "3776": "NAD 1983 3TM 114",
                "3777": "NAD 1983 3TM 117",
                "3801": "NAD 1983 3TM 120",
                "3005": "NAD 1983 BC Environment Albers",
                "3402": "NAD 1983 CSRS 10TM AEP Forest",
                "3403": "NAD 1983 CSRS 10TM AEP Resource",
                "3779": "NAD 1983 CSRS 3TM 111",
                "3780": "NAD 1983 CSRS 3TM 114",
                "3781": "NAD 1983 CSRS 3TM 117",
                "3802": "NAD 1983 CSRS 3TM 120",
                "3153": "NAD 1983 CSRS BC Environment Albers",
                "26898": "NAD 1983 CSRS MTM  1",
                "26899": "NAD 1983 CSRS MTM  2",
                "2944": "NAD 1983 CSRS MTM  2 SCoPQ",
                "2945": "NAD 1983 CSRS MTM  3",
                "2946": "NAD 1983 CSRS MTM  4",
                "2947": "NAD 1983 CSRS MTM  5",
                "2948": "NAD 1983 CSRS MTM  6",
                "2949": "NAD 1983 CSRS MTM  7",
                "2950": "NAD 1983 CSRS MTM  8",
                "2951": "NAD 1983 CSRS MTM  9",
                "2952": "NAD 1983 CSRS MTM 10",
                "26891": "NAD 1983 CSRS MTM 11",
                "26892": "NAD 1983 CSRS MTM 12",
                "26893": "NAD 1983 CSRS MTM 13",
                "26894": "NAD 1983 CSRS MTM 14",
                "26895": "NAD 1983 CSRS MTM 15",
                "26896": "NAD 1983 CSRS MTM 16",
                "26897": "NAD 1983 CSRS MTM 17",
                "3799": "NAD 1983 CSRS MTQ Lambert",
                "2953": "NAD 1983 CSRS New Brunswick Stereographic",
                "3581": "NAD 1983 CSRS Northwest Territories Lambert",
                "3162": "NAD 1983 CSRS Ontario MNR Lambert",
                "2954": "NAD 1983 CSRS Prince Edward Island",
                "6624": "NAD 1983 CSRS Quebec Albers",
                "6622": "NAD 1983 CSRS Quebec Lambert",
                "3348": "NAD 1983 CSRS Statistics Canada Lambert",
                "5321": "NAD 1983 CSRS Teranet Ontario Lambert",
                "3157": "NAD 1983 CSRS UTM Zone 10N",
                "2955": "NAD 1983 CSRS UTM Zone 11N",
                "2956": "NAD 1983 CSRS UTM Zone 12N",
                "2957": "NAD 1983 CSRS UTM Zone 13N",
                "3158": "NAD 1983 CSRS UTM Zone 14N",
                "3159": "NAD 1983 CSRS UTM Zone 15N",
                "3160": "NAD 1983 CSRS UTM Zone 16N",
                "2958": "NAD 1983 CSRS UTM Zone 17N",
                "2959": "NAD 1983 CSRS UTM Zone 18N",
                "2960": "NAD 1983 CSRS UTM Zone 19N",
                "2961": "NAD 1983 CSRS UTM Zone 20N",
                "2962": "NAD 1983 CSRS UTM Zone 21N",
                "3761": "NAD 1983 CSRS UTM Zone 22N",
                "9709": "NAD 1983 CSRS UTM Zone 23N",
                "9713": "NAD 1983 CSRS UTM Zone 24N",
                "3154": "NAD 1983 CSRS UTM Zone 7N",
                "3155": "NAD 1983 CSRS UTM Zone 8N",
                "3156": "NAD 1983 CSRS UTM Zone 9N",
                "3579": "NAD 1983 CSRS Yukon Albers",
                "32181": "NAD 1983 MTM  1",
                "32182": "NAD 1983 MTM  2",
                "32180": "NAD 1983 MTM  2 SCoPQ",
                "32183": "NAD 1983 MTM  3",
                "32184": "NAD 1983 MTM  4",
                "32185": "NAD 1983 MTM  5",
                "32186": "NAD 1983 MTM  6",
                "32187": "NAD 1983 MTM  7",
                "32188": "NAD 1983 MTM  8",
                "32189": "NAD 1983 MTM  9",
                "32190": "NAD 1983 MTM 10",
                "32191": "NAD 1983 MTM 11",
                "32192": "NAD 1983 MTM 12",
                "32193": "NAD 1983 MTM 13",
                "32194": "NAD 1983 MTM 14",
                "32195": "NAD 1983 MTM 15",
                "32196": "NAD 1983 MTM 16",
                "32197": "NAD 1983 MTM 17",
                "3798": "NAD 1983 MTQ Lambert",
                "3580": "NAD 1983 Northwest Territories Lambert",
                "3161": "NAD 1983 Ontario MNR Lambert",
                "6623": "NAD 1983 Quebec Albers",
                "32198": "NAD 1983 Quebec Lambert",
                "3347": "NAD 1983 Statistics Canada Lambert",
                "5320": "NAD 1983 Teranet Ontario Lambert",
                "9712": "NAD 1983 UTM Zone 24N",
                "3578": "NAD 1983 Yukon Albers",
                "2290": "Prince Edward Island Stereographic"
            },
            "Central and North America": {
                "8908": "CR-SIRGAS CRTM05",
                "8909": "CR-SIRGAS UTM Zone 16N",
                "8910": "CR-SIRGAS UTM Zone 17N",
                "5367": "CRTM05",
                "103598": "GTM",
                "4484": "Mexican Datum 1993 UTM Zone 11N",
                "4485": "Mexican Datum 1993 UTM Zone 12N",
                "4486": "Mexican Datum 1993 UTM Zone 13N",
                "4487": "Mexican Datum 1993 UTM Zone 14N",
                "4488": "Mexican Datum 1993 UTM Zone 15N",
                "4489": "Mexican Datum 1993 UTM Zone 16N",
                "6372": "Mexico ITRF2008 LCC",
                "6362": "Mexico ITRF92 LCC",
                "32061": "NAD 1927 Guatemala Norte",
                "32062": "NAD 1927 Guatemala Sur",
                "102221": "Ocotepeque 1935 Costa Rica Lambert Norte",
                "102222": "Ocotepeque 1935 Costa Rica Lambert Sur",
                "5456": "Ocotepeque 1935 Costa Rica Norte",
                "5457": "Ocotepeque 1935 Costa Rica Sur",
                "5460": "Ocotepeque 1935 El Salvador Lambert",
                "5559": "Ocotepeque 1935 Guatemala Norte",
                "5459": "Ocotepeque 1935 Guatemala Sur",
                "5461": "Ocotepeque 1935 Nicaragua Norte",
                "5462": "Ocotepeque 1935 Nicaragua Sur",
                "5469": "Panama-Colon 1911 Panama Lambert",
                "5472": "Panama-Colon 1911 Panama Polyconic",
                "5589": "Sibun Gorge 1922 Colony Grid",
                "102223": "WGS 1984 Costa Rica TM 90"
            },
            "Democratic Republic of the Congo": {
                "3318": "IGC 1962 Congo TM Zone 12",
                "3319": "IGC 1962 Congo TM Zone 14",
                "3320": "IGC 1962 Congo TM Zone 16",
                "3321": "IGC 1962 Congo TM Zone 18",
                "3322": "IGC 1962 Congo TM Zone 20",
                "3323": "IGC 1962 Congo TM Zone 22",
                "3324": "IGC 1962 Congo TM Zone 24",
                "3325": "IGC 1962 Congo TM Zone 26",
                "3326": "IGC 1962 Congo TM Zone 28",
                "3327": "IGC 1962 Congo TM Zone 30",
                "3339": "IGCB 1955 Congo TM Zone 12",
                "3340": "IGCB 1955 Congo TM Zone 14",
                "3341": "IGCB 1955 Congo TM Zone 16",
                "3316": "Kasai 1953 Congo TM Zone 22",
                "3317": "Kasai 1953 Congo TM Zone 24",
                "4048": "RGRDC 2005 Congo TM Zone 12",
                "4049": "RGRDC 2005 Congo TM Zone 14",
                "4050": "RGRDC 2005 Congo TM Zone 16",
                "4051": "RGRDC 2005 Congo TM Zone 18",
                "4056": "RGRDC 2005 Congo TM Zone 20",
                "4057": "RGRDC 2005 Congo TM Zone 22",
                "4058": "RGRDC 2005 Congo TM Zone 24",
                "4059": "RGRDC 2005 Congo TM Zone 26",
                "4060": "RGRDC 2005 Congo TM Zone 28"
            },
            Europe: {
                "9387": "AbInvA96 2020 Grid",
                "7801": "BGS2005 - CCS2005",
                "21500": "Belge Lambert 1950",
                "31370": "Belge Lambert 1972",
                "102499": "Belge Lambert 1972 (Bad false easting and northing)",
                "3447": "Belge Lambert 2005",
                "3812": "Belge Lambert 2008",
                "27700": "British National Grid",
                "6312": "CGRS 1993 Cyprus Local Transverse Mercator",
                "102319": "CGRS 1993 LTM",
                "102060": "D48 Slovenia TM",
                "102160": "Datum 73 Hayford Gauss IGeoE",
                "102161": "Datum 73 Hayford Gauss IPCC",
                "27493": "Datum 73 Modified Portuguese Grid",
                "9761": "ECML14_NB Grid",
                "23090": "ED 1950 TM 0 N",
                "23095": "ED 1950 TM 5 NE",
                "5627": "ED 1950 TM 6 NE",
                "9741": "EOS21 Grid",
                "6870": "ETRS 1989 Albania 2010",
                "6962": "ETRS 1989 Albania LCC 2010",
                "4093": "ETRS 1989 DKTM1",
                "4094": "ETRS 1989 DKTM2",
                "4095": "ETRS 1989 DKTM3",
                "4096": "ETRS 1989 DKTM4",
                "5316": "ETRS 1989 Faroe TM",
                "3108": "ETRS 1989 Guernsey Grid",
                "3109": "ETRS 1989 Jersey TM",
                "102157": "ETRS 1989 Kosovo Grid",
                "2198": "ETRS 1989 Kp2000 Bornholm",
                "2196": "ETRS 1989 Kp2000 Jutland",
                "2197": "ETRS 1989 Kp2000 Zealand",
                "2176": "ETRS 1989 Poland CS2000 Zone 5",
                "2177": "ETRS 1989 Poland CS2000 Zone 6",
                "2178": "ETRS 1989 Poland CS2000 Zone 7",
                "2179": "ETRS 1989 Poland CS2000 Zone 8",
                "2180": "ETRS 1989 Poland CS92",
                "3763": "ETRS 1989 Portugal TM06",
                "102109": "ETRS 1989 Slovenia TM",
                "2213": "ETRS 1989 TM 30 NE",
                "25884": "ETRS 1989 TM Baltic 1993",
                "102173": "ETRS 1989 UWPP 1992",
                "102174": "ETRS 1989 UWPP 2000 PAS 5",
                "102175": "ETRS 1989 UWPP 2000 PAS 6",
                "102176": "ETRS 1989 UWPP 2000 PAS 7",
                "102177": "ETRS 1989 UWPP 2000 PAS 8",
                "9766": "EWR2 Grid",
                "3301": "Estonia 1997 Estonia National Grid",
                "3300": "Estonian Coordinate System of 1992",
                "5596": "FEH2010 Fehmarnbelt TM",
                "9456": "GBK19 Grid",
                "2100": "Greek Grid",
                "102070": "Guernsey Grid",
                "23700": "HD 1972 EOV",
                "102960": "HD 1972 EOV (shifted)",
                "9300": "HS2 Survey Grid",
                "3766": "HTRS96 Croatia LCC",
                "3765": "HTRS96 Croatia TM",
                "3058": "Helle 1954 Jan Mayen Grid",
                "2157": "IRENET95 Irish Tranverse Mercator",
                "3057": "ISN 1993 Lambert 1993",
                "5638": "ISN 2004 LAEA Europe",
                "5639": "ISN 2004 LCC Europe",
                "5325": "ISN 2004 Lambert 2004",
                "9039": "ISN2016 LAEA Europe",
                "9040": "ISN2016 LCC Europe",
                "8088": "ISN2016 Lambert 2016",
                "29902": "Irish National Grid",
                "9141": "KOSOVAREF01 Balkans Zone 7",
                "3059": "LKS 1992 Latvia TM",
                "102440": "LKS 1992 Latvia TM (FN = 0)",
                "3346": "LKS 1994 Lithuania TM",
                "102163": "Lisboa Bessel Bonne",
                "102164": "Lisboa Hayford Gauss IGeoE",
                "102165": "Lisboa Hayford Gauss IPCC",
                "5018": "Lisbon (Greenwich) Portuguese Grid New",
                "20791": "Lisbon (Lisbon) Portuguese Grid",
                "20790": "Lisbon (Lisbon) Portuguese National Grid",
                "102400": "London Survey Grid",
                "2169": "Luxembourg 1930 Gauss",
                "8677": "MGI 1901 Balkans zone 5",
                "8678": "MGI 1901 Balkans zone 6",
                "6316": "MGI 1901 Balkans zone 7",
                "8679": "MGI 1901 Balkans zone 8",
                "3912": "MGI 1901 Slovene National Grid",
                "8686": "MGI 1901 Slovenia Grid",
                "31265": "MGI 3 Degree Gauss Zone 5",
                "31266": "MGI 3 Degree Gauss Zone 6",
                "31267": "MGI 3 Degree Gauss Zone 7",
                "31268": "MGI 3 Degree Gauss Zone 8",
                "31275": "MGI Balkans 5",
                "31276": "MGI Balkans 6",
                "31277": "MGI Balkans 7",
                "31279": "MGI Balkans 8",
                "2170": "MGI Slovenia Grid",
                "9373": "MML07 Grid",
                "4026": "MOLDREF99 Moldova TM",
                "6204": "Macedonian State Coordinate System",
                "2062": "Madrid 1870 Madrid Spain",
                "29901": "OSNI 1952 Irish National Grid",
                "5633": "PTRA08 LAEA Europe",
                "5632": "PTRA08 LCC Europe",
                "3120": "Pulkovo 1942 Adj 1958 Poland Zone I",
                "2172": "Pulkovo 1942 Adj 1958 Poland Zone II",
                "2173": "Pulkovo 1942 Adj 1958 Poland Zone III",
                "2174": "Pulkovo 1942 Adj 1958 Poland Zone IV",
                "2175": "Pulkovo 1942 Adj 1958 Poland Zone V",
                "3844": "Pulkovo 1942 Adj 1958 Stereo 1970",
                "3328": "Pulkovo 1942(58) GUGiK-80",
                "28992": "RD New",
                "28991": "RD Old",
                "5635": "REGCAN95 LAEA Europe",
                "5634": "REGCAN95 LCC Europe",
                "2400": "RT90 2.5 gon West",
                "2065": "S-JTSK (Ferro) Krovak",
                "5221": "S-JTSK (Ferro) Krovak EastNorth",
                "5513": "S-JTSK Krovak",
                "5514": "S-JTSK Krovak EastNorth",
                "8352": "S-JTSK [JTSK03] Krovak",
                "8353": "S-JTSK [JTSK03] Krovak EastNorth",
                "8682": "SRB_ETRS89 UTM zone 34N",
                "3794": "Slovenia 1996 Slovene National Grid",
                "8687": "Slovenia 1996 UTM Zone 33N",
                "31600": "Stereo 1933",
                "31700": "Stereo 1970",
                "29903": "TM75 Irish Grid",
                "9367": "TPEN11 Grid",
                "102194": "UWPP 1992",
                "102195": "UWPP 2000 pas 5",
                "102196": "UWPP 2000 pas 6",
                "102197": "UWPP 2000 pas 7",
                "102198": "UWPP 2000 pas 8",
                "4037": "WGS 1984 TMzn35N (N,E)",
                "4038": "WGS 1984 TMzn36N (N,E)",
                "Highways England": {
                    "102814": "OSGB36 Highways England A10H1",
                    "102815": "OSGB36 Highways England A10H2",
                    "102816": "OSGB36 Highways England A11H1",
                    "102817": "OSGB36 Highways England A11H2",
                    "102818": "OSGB36 Highways England A11H3",
                    "102819": "OSGB36 Highways England A12H1",
                    "102820": "OSGB36 Highways England A12H2",
                    "102821": "OSGB36 Highways England A12H3",
                    "102822": "OSGB36 Highways England A13H1",
                    "102823": "OSGB36 Highways England A13H2",
                    "102824": "OSGB36 Highways England A14H1",
                    "102825": "OSGB36 Highways England A14H2",
                    "102826": "OSGB36 Highways England A15H1",
                    "102827": "OSGB36 Highways England A15H2",
                    "102828": "OSGB36 Highways England A16H1",
                    "102829": "OSGB36 Highways England A16H2",
                    "102830": "OSGB36 Highways England A17H1",
                    "102831": "OSGB36 Highways England A17H2",
                    "102832": "OSGB36 Highways England A18H1",
                    "102833": "OSGB36 Highways England A18H2",
                    "102834": "OSGB36 Highways England A19H1",
                    "102835": "OSGB36 Highways England A19H2",
                    "102799": "OSGB36 Highways England A1H1",
                    "102836": "OSGB36 Highways England A20H1",
                    "102837": "OSGB36 Highways England A20H2",
                    "102838": "OSGB36 Highways England A21H1",
                    "102839": "OSGB36 Highways England A21H2",
                    "102840": "OSGB36 Highways England A22H1",
                    "102841": "OSGB36 Highways England A22H2",
                    "102842": "OSGB36 Highways England A23H1",
                    "102843": "OSGB36 Highways England A23H2",
                    "102844": "OSGB36 Highways England A24H1",
                    "102845": "OSGB36 Highways England A24H2",
                    "102846": "OSGB36 Highways England A25H1",
                    "102847": "OSGB36 Highways England A25H2",
                    "102848": "OSGB36 Highways England A26H1",
                    "102849": "OSGB36 Highways England A26H2",
                    "102850": "OSGB36 Highways England A27H1",
                    "102851": "OSGB36 Highways England A27H2",
                    "102852": "OSGB36 Highways England A28H1",
                    "102853": "OSGB36 Highways England A28H2",
                    "102854": "OSGB36 Highways England A29H1",
                    "102800": "OSGB36 Highways England A2H1",
                    "102855": "OSGB36 Highways England A30H1",
                    "102801": "OSGB36 Highways England A3H1",
                    "102802": "OSGB36 Highways England A3H2",
                    "102803": "OSGB36 Highways England A4H1",
                    "102804": "OSGB36 Highways England A5H1",
                    "102805": "OSGB36 Highways England A5H2",
                    "102806": "OSGB36 Highways England A6H1",
                    "102807": "OSGB36 Highways England A6H2",
                    "102808": "OSGB36 Highways England A7H1",
                    "102809": "OSGB36 Highways England A7H2",
                    "102810": "OSGB36 Highways England A8H1",
                    "102811": "OSGB36 Highways England A8H2",
                    "102812": "OSGB36 Highways England A9H1",
                    "102813": "OSGB36 Highways England A9H2",
                    "102856": "OSGB36 Highways England B15H1",
                    "102857": "OSGB36 Highways England B15H2",
                    "102858": "OSGB36 Highways England B15H3",
                    "102859": "OSGB36 Highways England B16H1",
                    "102860": "OSGB36 Highways England B16H2",
                    "102861": "OSGB36 Highways England B16H3",
                    "102862": "OSGB36 Highways England B16H4",
                    "102863": "OSGB36 Highways England B17H1",
                    "102864": "OSGB36 Highways England B17H2",
                    "102865": "OSGB36 Highways England B18H1",
                    "102866": "OSGB36 Highways England B18H2",
                    "102867": "OSGB36 Highways England B19H1",
                    "102868": "OSGB36 Highways England B20H1",
                    "102869": "OSGB36 Highways England B21H1",
                    "102870": "OSGB36 Highways England B22H1",
                    "102871": "OSGB36 Highways England B23H1",
                    "102872": "OSGB36 Highways England B24H1",
                    "102873": "OSGB36 Highways England B25H1",
                    "102874": "OSGB36 Highways England B26H1",
                    "102875": "OSGB36 Highways England B27H1",
                    "102876": "OSGB36 Highways England B28H1",
                    "102877": "OSGB36 Highways England B29H1",
                    "102878": "OSGB36 Highways England B30H1",
                    "102879": "OSGB36 Highways England B31H1",
                    "102880": "OSGB36 Highways England B32H1",
                    "102881": "OSGB36 Highways England C13H1",
                    "102882": "OSGB36 Highways England C14H1",
                    "102883": "OSGB36 Highways England C14H2",
                    "102884": "OSGB36 Highways England C14H3",
                    "102885": "OSGB36 Highways England C14H4",
                    "102886": "OSGB36 Highways England C15H1",
                    "102887": "OSGB36 Highways England C15H2",
                    "102888": "OSGB36 Highways England C15H3",
                    "102889": "OSGB36 Highways England C15H4",
                    "102890": "OSGB36 Highways England C15H5",
                    "102891": "OSGB36 Highways England C16H1",
                    "102892": "OSGB36 Highways England C16H2",
                    "102893": "OSGB36 Highways England C16H3",
                    "102894": "OSGB36 Highways England C16H4",
                    "102895": "OSGB36 Highways England C17H1",
                    "102896": "OSGB36 Highways England C17H2",
                    "102897": "OSGB36 Highways England C18H1",
                    "102898": "OSGB36 Highways England C18H2",
                    "102899": "OSGB36 Highways England C19H1",
                    "102900": "OSGB36 Highways England C19H2"
                }
            },
            Finland: {
                "3873": "ETRS 1989 GK19FIN",
                "3874": "ETRS 1989 GK20FIN",
                "3875": "ETRS 1989 GK21FIN",
                "3876": "ETRS 1989 GK22FIN",
                "3877": "ETRS 1989 GK23FIN",
                "3878": "ETRS 1989 GK24FIN",
                "3879": "ETRS 1989 GK25FIN",
                "3880": "ETRS 1989 GK26FIN",
                "3881": "ETRS 1989 GK27FIN",
                "3882": "ETRS 1989 GK28FIN",
                "3883": "ETRS 1989 GK29FIN",
                "3884": "ETRS 1989 GK30FIN",
                "3885": "ETRS 1989 GK31FIN",
                "5048": "ETRS 1989 TM35FIN (North,East)",
                "3067": "EUREF FIN TM35FIN",
                "2391": "Finland Zone 1",
                "2392": "Finland Zone 2",
                "2393": "Finland Zone 3",
                "2394": "Finland Zone 4",
                "3386": "KKJ Finland Zone 0",
                "3387": "KKJ Finland Zone 5",
                Replaced: {
                    "3126": "ETRS 1989 ETRS-GK19FIN",
                    "3127": "ETRS 1989 ETRS-GK20FIN",
                    "3128": "ETRS 1989 ETRS-GK21FIN",
                    "3129": "ETRS 1989 ETRS-GK22FIN",
                    "3130": "ETRS 1989 ETRS-GK23FIN",
                    "3131": "ETRS 1989 ETRS-GK24FIN",
                    "3132": "ETRS 1989 ETRS-GK25FIN",
                    "3133": "ETRS 1989 ETRS-GK26FIN",
                    "3134": "ETRS 1989 ETRS-GK27FIN",
                    "3135": "ETRS 1989 ETRS-GK28FIN",
                    "3136": "ETRS 1989 ETRS-GK29FIN",
                    "3137": "ETRS 1989 ETRS-GK30FIN",
                    "3138": "ETRS 1989 ETRS-GK31FIN"
                }
            },
            France: {
                "2192": "ED 1950 France EuroLambert",
                "27581": "France I",
                "27582": "France II",
                "27583": "France III",
                "27584": "France IV",
                "27592": "NTF (Paris) Centre France",
                "27594": "NTF (Paris) Corse",
                "27562": "NTF (Paris) Lambert Centre France",
                "27564": "NTF (Paris) Lambert Corse",
                "27561": "NTF (Paris) Lambert Nord France",
                "27563": "NTF (Paris) Lambert Sud France",
                "27571": "NTF (Paris) Lambert Zone I",
                "27572": "NTF (Paris) Lambert Zone II",
                "27573": "NTF (Paris) Lambert Zone III",
                "27574": "NTF (Paris) Lambert Zone IV",
                "27591": "NTF (Paris) Nord France",
                "27593": "NTF (Paris) Sud France",
                "102581": "NTF France I (degrees)",
                "102582": "NTF France II (degrees)",
                "102583": "NTF France III (degrees)",
                "102584": "NTF France IV (degrees)",
                "102585": "NTF Lambert Zone I",
                "102586": "NTF Lambert Zone II",
                "102587": "NTF Lambert Zone III",
                "102588": "NTF Lambert Zone IV",
                "27500": "Nord de Guerre",
                "3942": "RGF 1993 CC42",
                "3943": "RGF 1993 CC43",
                "3944": "RGF 1993 CC44",
                "3945": "RGF 1993 CC45",
                "3946": "RGF 1993 CC46",
                "3947": "RGF 1993 CC47",
                "3948": "RGF 1993 CC48",
                "3949": "RGF 1993 CC49",
                "3950": "RGF 1993 CC50",
                "2154": "RGF 1993 Lambert-93"
            },
            Germany: {
                "5682": "DB_REF 3-Degree GK Zone 2 (E-N)",
                "5683": "DB_REF 3-Degree GK Zone 3 (E-N)",
                "5684": "DB_REF 3-Degree GK Zone 4 (E-N)",
                "5685": "DB_REF 3-Degree GK Zone 5 (E-N)",
                "5680": "DHDN 3-Degree GK Zone 1 (E-N)",
                "5676": "DHDN 3-Degree GK Zone 2 (E-N)",
                "5677": "DHDN 3-Degree GK Zone 3 (E-N)",
                "5678": "DHDN 3-Degree GK Zone 4 (E-N)",
                "5679": "DHDN 3-Degree GK Zone 5 (E-N)",
                "5520": "DHDN 3-Degree Gauss Zone 1",
                "31466": "DHDN 3-Degree Gauss Zone 2",
                "31467": "DHDN 3-Degree Gauss Zone 3",
                "31468": "DHDN 3-Degree Gauss Zone 4",
                "31469": "DHDN 3-Degree Gauss Zone 5",
                "3068": "DHDN Soldner Berlin",
                "8395": "ETRS 1989 GK CM 9E",
                "5243": "ETRS 1989 LCC Germany (E-N)",
                "4839": "ETRS 1989 LCC Germany (N-E)",
                "5651": "ETRS 1989 UTM Zone 31N (N-zE)",
                "5649": "ETRS 1989 UTM Zone 31N (zE-N)",
                "5652": "ETRS 1989 UTM Zone 32N (N-zE)",
                "102328": "ETRS 1989 UTM Zone 32N 7stellen",
                "102329": "ETRS 1989 UTM Zone 32N 8stellen",
                "5653": "ETRS 1989 UTM Zone 33N (N-zE)",
                "5650": "ETRS 1989 UTM Zone 33N (zE-N)",
                "102359": "ETRS 1989 UTM Zone 33N 7stellen",
                "102360": "ETRS 1989 UTM Zone 33N 8stellen",
                "4647": "ETRS 1989 UTM Zone N32",
                "31491": "Germany Zone 1",
                "31492": "Germany Zone 2",
                "31493": "Germany Zone 3",
                "31494": "Germany Zone 4",
                "31495": "Germany Zone 5",
                "3396": "PD 83 3-Degree GK Zone 3 (N-E)",
                "3397": "PD 83 3-Degree GK Zone 4 (N-E)",
                "5666": "PD 83 GK Zone 3 (E-N)",
                "5667": "PD 83 GK Zone 4 (E-N)",
                "3398": "RD 83 3-Degree GK Zone 4",
                "5668": "RD 83 3-Degree GK Zone 4 (E-N)",
                "3399": "RD 83 3-Degree GK Zone 5",
                "5669": "RD 83 3-Degree GK Zone 5 (E-N)"
            },
            "Indian Subcontinent": {
                "24370": "Kalianpur 1880 India Zone 0",
                "24371": "Kalianpur 1880 India Zone I",
                "24373": "Kalianpur 1880 India Zone III",
                "24372": "Kalianpur 1880 India Zone IIa",
                "24382": "Kalianpur 1880 India Zone IIb",
                "24374": "Kalianpur 1880 India Zone IV",
                "24375": "Kalianpur 1937 India Zone IIb",
                "24305": "Kalianpur 1937 UTM Zone 45N",
                "24306": "Kalianpur 1937 UTM Zone 46N",
                "24376": "Kalianpur 1962 India Zone I",
                "24377": "Kalianpur 1962 India Zone IIa",
                "24311": "Kalianpur 1962 UTM Zone 41N",
                "24312": "Kalianpur 1962 UTM Zone 42N",
                "24313": "Kalianpur 1962 UTM Zone 43N",
                "24378": "Kalianpur 1975 India Zone I",
                "24381": "Kalianpur 1975 India Zone III",
                "24379": "Kalianpur 1975 India Zone IIa",
                "24380": "Kalianpur 1975 India Zone IIb",
                "24383": "Kalianpur 1975 India Zone IV",
                "24342": "Kalianpur 1975 UTM Zone 42N",
                "24343": "Kalianpur 1975 UTM Zone 43N",
                "24344": "Kalianpur 1975 UTM Zone 44N",
                "24345": "Kalianpur 1975 UTM Zone 45N",
                "24346": "Kalianpur 1975 UTM Zone 46N",
                "24347": "Kalianpur 1975 UTM Zone 47N",
                "7777": "WGS 1984 Andaman and Nicobar Islands",
                "7756": "WGS 1984 Andhra Pradesh",
                "7757": "WGS 1984 Arunachal Pradesh",
                "7758": "WGS 1984 Assam",
                "7759": "WGS 1984 Bihar",
                "7778": "WGS 1984 Chhattisgarh",
                "7760": "WGS 1984 Delhi",
                "7779": "WGS 1984 Goa",
                "7761": "WGS 1984 Gujarat",
                "7762": "WGS 1984 Haryana",
                "7763": "WGS 1984 Himachal Pradesh",
                "7755": "WGS 1984 India NSF LCC",
                "7771": "WGS 1984 India Northeast",
                "7764": "WGS 1984 Jammu and Kashmir",
                "7765": "WGS 1984 Jharkhand",
                "7780": "WGS 1984 Karnataka",
                "7781": "WGS 1984 Kerala",
                "7782": "WGS 1984 Lakshadweep",
                "7766": "WGS 1984 Madhya Pradesh",
                "7767": "WGS 1984 Maharashtra",
                "7768": "WGS 1984 Manipur",
                "7769": "WGS 1984 Meghalaya",
                "7783": "WGS 1984 Mizoram",
                "7770": "WGS 1984 Nagaland",
                "7772": "WGS 1984 Orissa",
                "7773": "WGS 1984 Punjab",
                "7774": "WGS 1984 Rajasthan",
                "7784": "WGS 1984 Sikkim",
                "7785": "WGS 1984 Tamil Nadu",
                "7786": "WGS 1984 Tripura",
                "7775": "WGS 1984 Uttar Pradesh",
                "7776": "WGS 1984 Uttaranchal",
                "7787": "WGS 1984 West Bengal"
            },
            Indonesia: {
                "5330": "Batavia (Jakarta) NEIEZ",
                "3001": "Batavia NEIEZ",
                "2308": "Batavia TM 109 SE",
                "23830": "DGN 1995 Indonesia TM-3 Zone 46 2",
                "23831": "DGN 1995 Indonesia TM-3 Zone 47 1",
                "23832": "DGN 1995 Indonesia TM-3 Zone 47 2",
                "23833": "DGN 1995 Indonesia TM-3 Zone 48 1",
                "23834": "DGN 1995 Indonesia TM-3 Zone 48 2",
                "23835": "DGN 1995 Indonesia TM-3 Zone 49 1",
                "23836": "DGN 1995 Indonesia TM-3 Zone 49 2",
                "23837": "DGN 1995 Indonesia TM-3 Zone 50 1",
                "23838": "DGN 1995 Indonesia TM-3 Zone 50 2",
                "23839": "DGN 1995 Indonesia TM-3 Zone 51 1",
                "23840": "DGN 1995 Indonesia TM-3 Zone 51 2",
                "23841": "DGN 1995 Indonesia TM-3 Zone 52 1",
                "23842": "DGN 1995 Indonesia TM-3 Zone 52 2",
                "23843": "DGN 1995 Indonesia TM-3 Zone 53 1",
                "23844": "DGN 1995 Indonesia TM-3 Zone 53 2",
                "23845": "DGN 1995 Indonesia TM-3 Zone 54 1",
                "3000": "Gunung Segara NEIEZ",
                "5331": "Makassar (Jakarta) NEIEZ",
                "3002": "Makassar NEIEZ",
                "9476": "SRGI2013 UTM zone 46N",
                "9477": "SRGI2013 UTM zone 47N",
                "9487": "SRGI2013 UTM zone 47S",
                "9478": "SRGI2013 UTM zone 48N",
                "9488": "SRGI2013 UTM zone 48S",
                "9479": "SRGI2013 UTM zone 49N",
                "9489": "SRGI2013 UTM zone 49S",
                "9480": "SRGI2013 UTM zone 50N",
                "9490": "SRGI2013 UTM zone 50S",
                "9481": "SRGI2013 UTM zone 51N",
                "9491": "SRGI2013 UTM zone 51S",
                "9482": "SRGI2013 UTM zone 52N",
                "9492": "SRGI2013 UTM zone 52S",
                "9493": "SRGI2013 UTM zone 53S",
                "9494": "SRGI2013 UTM zone 54S",
                "5329": "Segara (Jakarta) NEIEZ",
                "2309": "WGS 1984 TM 116 SE",
                "2310": "WGS 1984 TM 132 SE"
            },
            Italy: {
                "9716": "IGM95 UTM Zone 34N",
                "26591": "Monte Mario (Rome) Italy 1",
                "26592": "Monte Mario (Rome) Italy 2",
                "3003": "Monte Mario Italy 1",
                "3004": "Monte Mario Italy 2",
                "5659": "Monte Mario TM Emilia-Romagna",
                "6875": "RDN2008 Italy zone",
                "7794": "RDN2008 Italy zone (E-N)",
                "7795": "RDN2008 Italy zone 12 (E-N)",
                "6707": "RDN2008 TM32",
                "6708": "RDN2008 TM33",
                "6709": "RDN2008 TM34",
                "7791": "RDN2008 UTM zone 32N",
                "7792": "RDN2008 UTM zone 33N",
                "7793": "RDN2008 UTM zone 34N",
                "6876": "RDN2008 Zone 12",
                "102093": "Roma 1940 Gauss Boaga Est",
                "102094": "Roma 1940 Gauss Boaga Ovest"
            },
            Japan: {
                "2443": "JGD 2000 Japan Zone  1",
                "2444": "JGD 2000 Japan Zone  2",
                "2445": "JGD 2000 Japan Zone  3",
                "2446": "JGD 2000 Japan Zone  4",
                "2447": "JGD 2000 Japan Zone  5",
                "2448": "JGD 2000 Japan Zone  6",
                "2449": "JGD 2000 Japan Zone  7",
                "2450": "JGD 2000 Japan Zone  8",
                "2451": "JGD 2000 Japan Zone  9",
                "2452": "JGD 2000 Japan Zone 10",
                "2453": "JGD 2000 Japan Zone 11",
                "2454": "JGD 2000 Japan Zone 12",
                "2455": "JGD 2000 Japan Zone 13",
                "2456": "JGD 2000 Japan Zone 14",
                "2457": "JGD 2000 Japan Zone 15",
                "2458": "JGD 2000 Japan Zone 16",
                "2459": "JGD 2000 Japan Zone 17",
                "2460": "JGD 2000 Japan Zone 18",
                "2461": "JGD 2000 Japan Zone 19",
                "6669": "JGD 2011 Japan Zone  1",
                "6670": "JGD 2011 Japan Zone  2",
                "6671": "JGD 2011 Japan Zone  3",
                "6672": "JGD 2011 Japan Zone  4",
                "6673": "JGD 2011 Japan Zone  5",
                "6674": "JGD 2011 Japan Zone  6",
                "6675": "JGD 2011 Japan Zone  7",
                "6676": "JGD 2011 Japan Zone  8",
                "6677": "JGD 2011 Japan Zone  9",
                "6678": "JGD 2011 Japan Zone 10",
                "6679": "JGD 2011 Japan Zone 11",
                "6680": "JGD 2011 Japan Zone 12",
                "6681": "JGD 2011 Japan Zone 13",
                "6682": "JGD 2011 Japan Zone 14",
                "6683": "JGD 2011 Japan Zone 15",
                "6684": "JGD 2011 Japan Zone 16",
                "6685": "JGD 2011 Japan Zone 17",
                "6686": "JGD 2011 Japan Zone 18",
                "6687": "JGD 2011 Japan Zone 19",
                "30161": "Japan Zone  1",
                "30162": "Japan Zone  2",
                "30163": "Japan Zone  3",
                "30164": "Japan Zone  4",
                "30165": "Japan Zone  5",
                "30166": "Japan Zone  6",
                "30167": "Japan Zone  7",
                "30168": "Japan Zone  8",
                "30169": "Japan Zone  9",
                "30170": "Japan Zone 10",
                "30171": "Japan Zone 11",
                "30172": "Japan Zone 12",
                "30173": "Japan Zone 13",
                "30174": "Japan Zone 14",
                "30175": "Japan Zone 15",
                "30176": "Japan Zone 16",
                "30177": "Japan Zone 17",
                "30178": "Japan Zone 18",
                "30179": "Japan Zone 19"
            },
            Libya: {
                "2068": "ELD 1979 Libya  5",
                "2069": "ELD 1979 Libya  6",
                "2070": "ELD 1979 Libya  7",
                "2071": "ELD 1979 Libya  8",
                "2072": "ELD 1979 Libya  9",
                "2073": "ELD 1979 Libya 10",
                "2074": "ELD 1979 Libya 11",
                "2075": "ELD 1979 Libya 12",
                "2076": "ELD 1979 Libya 13",
                "2087": "ELD 1979 TM 12 NE",
                "3177": "LGD2006 Libya TM",
                "3190": "LGD2006 Libya TM Zone  5",
                "3191": "LGD2006 Libya TM Zone  6",
                "3192": "LGD2006 Libya TM Zone  7",
                "3193": "LGD2006 Libya TM Zone  8",
                "3194": "LGD2006 Libya TM Zone  9",
                "3195": "LGD2006 Libya TM Zone 10",
                "3196": "LGD2006 Libya TM Zone 11",
                "3197": "LGD2006 Libya TM Zone 12",
                "3198": "LGD2006 Libya TM Zone 13"
            },
            "Malaysia and Singapore": {
                "5247": "GDBD2009 GEORSO",
                "3376": "GDM 2000 BRSO",
                "3377": "GDM 2000 Johor",
                "3383": "GDM 2000 Kedah and Perlis",
                "3385": "GDM 2000 Kelantan",
                "3375": "GDM 2000 MRSO",
                "3378": "GDM 2000 Negeri Sembilan and Melaka",
                "3379": "GDM 2000 Pahang",
                "3384": "GDM 2000 Perak",
                "3382": "GDM 2000 Pulau Pinang and Seberang Perai",
                "3380": "GDM 2000 Selangor",
                "3381": "GDM 2000 Terengganu",
                "3167": "Kertau (RSO) RSO Malaya (Chains 1922 Truncated)",
                "3168": "Kertau (RSO) RSO Malaya (Meters)",
                "4390": "Kertau 1968 Johor Grid",
                "4396": "Kertau 1968 Kedah and Perlis Grid",
                "4398": "Kertau 1968 Kelantan Grid",
                "4392": "Kertau 1968 Pahang Grid",
                "4397": "Kertau 1968 Perak Revised Grid",
                "4395": "Kertau 1968 Pinang Grid",
                "4393": "Kertau 1968 Selangor Grid",
                "4391": "Kertau 1968 Sembilan and Melaka Grid",
                "4394": "Kertau 1968 Terengganu Grid",
                "24571": "Kertau RSO Malaya (Benoit Chains 1895 B)",
                "102062": "Kertau RSO Malaya (Meters)",
                "24500": "Kertau Singapore Grid",
                "3414": "SVY21 Singapore TM",
                "29873": "Timbalai 1948 RSO Borneo (Meters)",
                "29871": "Timbalai 1948 RSO Borneo (Sears Chains)",
                "29872": "Timbalai 1948 RSO Borneo (Sears Feet)",
                "29874": "Timbalai 1948 RSO Sarawak LSD (Meters)"
            },
            "New Zealand": {
                "5518": "Chatham Island 1971 Map Grid",
                "5519": "Chatham Islands 1979 Map Grid",
                "27219": "NZGD 1949 Amuri Circuit",
                "27206": "NZGD 1949 Bay of Plenty Circuit",
                "27232": "NZGD 1949 Bluff Circuit",
                "27217": "NZGD 1949 Buller Circuit",
                "27214": "NZGD 1949 Collingwood Circuit",
                "27225": "NZGD 1949 Gawler Circuit",
                "27218": "NZGD 1949 Grey Circuit",
                "27208": "NZGD 1949 Hawkes Bay Circuit",
                "27221": "NZGD 1949 Hokitika Circuit",
                "27223": "NZGD 1949 Jacksons Bay Circuit",
                "27216": "NZGD 1949 Karamea Circuit",
                "27227": "NZGD 1949 Lindis Peak Circuit",
                "27220": "NZGD 1949 Marlborough Circuit",
                "27205": "NZGD 1949 Mount Eden Circuit",
                "27228": "NZGD 1949 Mount Nicholas Circuit",
                "27224": "NZGD 1949 Mount Pleasant Circuit",
                "27229": "NZGD 1949 Mount York Circuit",
                "27215": "NZGD 1949 Nelson Circuit",
                "27231": "NZGD 1949 North Taieri Circuit",
                "27230": "NZGD 1949 Observation Point Circuit",
                "27222": "NZGD 1949 Okarito Circuit",
                "27207": "NZGD 1949 Poverty Bay Circuit",
                "27209": "NZGD 1949 Taranaki Circuit",
                "27226": "NZGD 1949 Timaru Circuit",
                "27210": "NZGD 1949 Tuhirangi Circuit",
                "27258": "NZGD 1949 UTM Zone 58S",
                "27259": "NZGD 1949 UTM Zone 59S",
                "27260": "NZGD 1949 UTM Zone 60S",
                "27212": "NZGD 1949 Wairarapa Circuit",
                "27211": "NZGD 1949 Wanganui Circuit",
                "27213": "NZGD 1949 Wellington Circuit",
                "2119": "NZGD 2000 Amuri Circuit",
                "3790": "NZGD 2000 Antipodes Islands TM 2000",
                "3788": "NZGD 2000 Auckland Islands TM 2000",
                "2106": "NZGD 2000 Bay of Plenty Circuit",
                "2132": "NZGD 2000 Bluff Circuit",
                "2117": "NZGD 2000 Buller Circuit",
                "3789": "NZGD 2000 Campbell Island TM 2000",
                "3764": "NZGD 2000 Chatham Island Circuit",
                "3793": "NZGD 2000 Chatham Islands TM 2000",
                "2114": "NZGD 2000 Collingwood Circuit",
                "2125": "NZGD 2000 Gawler Circuit",
                "2118": "NZGD 2000 Grey Circuit",
                "2108": "NZGD 2000 Hawkes Bay Circuit",
                "2121": "NZGD 2000 Hokitika Circuit",
                "2123": "NZGD 2000 Jacksons Bay Circuit",
                "2116": "NZGD 2000 Karamea Circuit",
                "2127": "NZGD 2000 Lindis Peak Circuit",
                "2120": "NZGD 2000 Marlborough Circuit",
                "2105": "NZGD 2000 Mount Eden Circuit",
                "2128": "NZGD 2000 Mount Nicholas Circuit",
                "2124": "NZGD 2000 Mount Pleasant Circuit",
                "2129": "NZGD 2000 Mount York Circuit",
                "3851": "NZGD 2000 NZ Continental Shelf 2000",
                "2115": "NZGD 2000 Nelson Circuit",
                "2193": "NZGD 2000 New Zealand Transverse Mercator",
                "2131": "NZGD 2000 North Taieri Circuit",
                "2130": "NZGD 2000 Observation Point Circuit",
                "2122": "NZGD 2000 Okarito Circuit",
                "2107": "NZGD 2000 Poverty Bay Circuit",
                "3791": "NZGD 2000 Raoul Island TM 2000",
                "2109": "NZGD 2000 Taranaki Circuit",
                "2126": "NZGD 2000 Timaru Circuit",
                "2110": "NZGD 2000 Tuhirangi Circuit",
                "5700": "NZGD 2000 UTM Zone 1S",
                "2133": "NZGD 2000 UTM Zone 58S",
                "2134": "NZGD 2000 UTM Zone 59S",
                "2135": "NZGD 2000 UTM Zone 60S",
                "2112": "NZGD 2000 Wairarapa Circuit",
                "2111": "NZGD 2000 Wanganui Circuit",
                "2113": "NZGD 2000 Wellington Circuit",
                "27200": "New Zealand Map Grid",
                "27291": "New Zealand North Island",
                "27292": "New Zealand South Island",
                "3994": "WGS 1984 Mercator 41",
                "9191": "WGS 1984 NIWA Albers"
            },
            Norway: {
                "5110": "ETRS 1989 NTM Zone 10",
                "5111": "ETRS 1989 NTM Zone 11",
                "5112": "ETRS 1989 NTM Zone 12",
                "5113": "ETRS 1989 NTM Zone 13",
                "5114": "ETRS 1989 NTM Zone 14",
                "5115": "ETRS 1989 NTM Zone 15",
                "5116": "ETRS 1989 NTM Zone 16",
                "5117": "ETRS 1989 NTM Zone 17",
                "5118": "ETRS 1989 NTM Zone 18",
                "5119": "ETRS 1989 NTM Zone 19",
                "5120": "ETRS 1989 NTM Zone 20",
                "5121": "ETRS 1989 NTM Zone 21",
                "5122": "ETRS 1989 NTM Zone 22",
                "5123": "ETRS 1989 NTM Zone 23",
                "5124": "ETRS 1989 NTM Zone 24",
                "5125": "ETRS 1989 NTM Zone 25",
                "5126": "ETRS 1989 NTM Zone 26",
                "5127": "ETRS 1989 NTM Zone 27",
                "5128": "ETRS 1989 NTM Zone 28",
                "5129": "ETRS 1989 NTM Zone 29",
                "5130": "ETRS 1989 NTM Zone 30",
                "5105": "ETRS 1989 NTM Zone 5",
                "5106": "ETRS 1989 NTM Zone 6",
                "5107": "ETRS 1989 NTM Zone 7",
                "5108": "ETRS 1989 NTM Zone 8",
                "5109": "ETRS 1989 NTM Zone 9",
                "102450": "NGO 1948 (Oslo) Baerum Kommune",
                "102451": "NGO 1948 (Oslo) Bergenhalvoen",
                "102452": "NGO 1948 (Oslo) Oslo Kommune",
                "27391": "NGO 1948 Oslo Norway Zone 1",
                "27392": "NGO 1948 Oslo Norway Zone 2",
                "27393": "NGO 1948 Oslo Norway Zone 3",
                "27394": "NGO 1948 Oslo Norway Zone 4",
                "27395": "NGO 1948 Oslo Norway Zone 5",
                "27396": "NGO 1948 Oslo Norway Zone 6",
                "27397": "NGO 1948 Oslo Norway Zone 7",
                "27398": "NGO 1948 Oslo Norway Zone 8",
                "Greenwich-based": {
                    "102136": "NGO 1948 Baerum Kommune",
                    "102137": "NGO 1948 Bergenhalvoen",
                    "102101": "NGO 1948 Norway Zone 1",
                    "102102": "NGO 1948 Norway Zone 2",
                    "102103": "NGO 1948 Norway Zone 3",
                    "102104": "NGO 1948 Norway Zone 4",
                    "102105": "NGO 1948 Norway Zone 5",
                    "102106": "NGO 1948 Norway Zone 6",
                    "102107": "NGO 1948 Norway Zone 7",
                    "102108": "NGO 1948 Norway Zone 8",
                    "102138": "NGO 1948 Oslo Kommune"
                }
            },
            Oceans: {
                "Atlantic Ocean": {
                    "7877": "Astro DOS 71_4 SHLG71",
                    "7878": "Astro DOS 71_4 UTM zone 30S",
                    "3770": "Bermuda 2000 National Grid",
                    "2003": "Grenada 1953 British West Indies Grid",
                    "7887": "SHMG2015",
                    "7882": "St. Helena Tritan SHLG(Tritan)",
                    "7883": "St. Helena Tritan UTM zone 30S",
                    "4826": "WGS 1984 Cape Verde Grid",
                    "3762": "WGS 1984 South Georgia Lambert",
                    "6703": "WGS 1984 TM 60 SW"
                },
                Caribbean: {
                    "2000": "Anguilla 1957 British West Indies Grid",
                    "2001": "Antigua 1943 British West Indies Grid",
                    "21292": "Barbados 1938 Barbados Grid",
                    "21291": "Barbados 1938 British West Indies Grid",
                    "6391": "Cayman Islands National Grid 2011",
                    "2002": "Dominica 1945 British West Indies Grid",
                    "6128": "Grand Cayman National Grid 1959",
                    "3448": "JAD 2001 Jamaica Grid",
                    "24100": "Jamaica 1875 Old Grid",
                    "24200": "Jamaica Grid",
                    "2004": "Montserrat 1958 British West Indies Grid",
                    "2066": "Mount Dillon Tobago Grid",
                    "2085": "NAD 1927 Cuba Norte",
                    "2086": "NAD 1927 Cuba Sur",
                    "6129": "Sister Islands National Grid 1961",
                    "2005": "St. Kitts 1955 British West Indies Grid",
                    "2006": "St. Lucia 1955 British West Indies Grid",
                    "2007": "St. Vincent 1945 British West Indies Grid",
                    "2314": "Trinidad 1903 Trinidad Grid (Clarke Feet)",
                    "30200": "Trinidad 1903 Trinidad Grid (Links Clarke)"
                },
                "Indian Ocean": {
                    "6721": "GDA 1994 CIG94",
                    "6723": "GDA 1994 CKIG94",
                    "103872": "GDM2008 LGM2012",
                    "3337": "Le Pouce 1934 Mauritius Grid",
                    "3727": "Reunion 1947 TM Reunion",
                    "6720": "WGS 1984 CIG92",
                    "6722": "WGS 1984 CKIG92"
                },
                "Pacific Ocean": {
                    "3102": "American Samoa 1962 Samoa Lambert",
                    "102096": "Bab South Palau Azimuthal Equidistant",
                    "3460": "Fiji 1986 Fiji Map Grid",
                    "3295": "Guam 1963 Yap Islands",
                    "3165": "NEA74 Noumea Lambert",
                    "3166": "NEA74 Noumea Lambert 2",
                    "3783": "Pitcairn 2006 Pitcairn TM 2006",
                    "102237": "Pohnpei Az Eq 1971",
                    "2984": "RGNC 1991 Lambert New Caledonia",
                    "3163": "RGNC 1991-93 Lambert New Caledonia",
                    "102238": "Saipan Az Eq 1969",
                    "5887": "TGD2005 Tonga Map Grid"
                }
            },
            "South Africa": {
                "102470": "Cape Lo15",
                "102471": "Cape Lo17",
                "102472": "Cape Lo19",
                "102473": "Cape Lo21",
                "102474": "Cape Lo23",
                "102475": "Cape Lo25",
                "102476": "Cape Lo27",
                "102477": "Cape Lo29",
                "102478": "Cape Lo31",
                "102479": "Cape Lo33",
                "102480": "Hartebeesthoek94 Lo15",
                "102481": "Hartebeesthoek94 Lo17",
                "102482": "Hartebeesthoek94 Lo19",
                "102562": "Hartebeesthoek94 Lo19 (E-N)",
                "102483": "Hartebeesthoek94 Lo21",
                "102563": "Hartebeesthoek94 Lo21 (E-N)",
                "102484": "Hartebeesthoek94 Lo23",
                "102564": "Hartebeesthoek94 Lo23 (E-N)",
                "102485": "Hartebeesthoek94 Lo25",
                "102565": "Hartebeesthoek94 Lo25 (E-N)",
                "102486": "Hartebeesthoek94 Lo27",
                "102566": "Hartebeesthoek94 Lo27 (E-N)",
                "102487": "Hartebeesthoek94 Lo29",
                "102567": "Hartebeesthoek94 Lo29 (E-N)",
                "102488": "Hartebeesthoek94 Lo31",
                "102568": "Hartebeesthoek94 Lo31 (E-N)",
                "102489": "Hartebeesthoek94 Lo33",
                "9221": "Hartebeesthoek94 ZAF BSU Albers 25E",
                "9222": "Hartebeesthoek94 ZAF BSU Albers 44E"
            },
            "South America": {
                "2102": "Lake Maracaibo Grid",
                "2101": "Lake Maracaibo Grid M1",
                "2103": "Lake Maracaibo Grid M3",
                "2104": "Lake Maracaibo La Rosa Grid",
                "24892": "Peru Central Zone",
                "24893": "Peru East Zone",
                "24891": "Peru West Zone",
                "2317": "Provisional South American Datum 1956 ICN Regional",
                "5530": "SAD 1969 (96) Brazil Polyconic",
                "29101": "SAD 1969 Brazil Polyconic",
                "5641": "SIRGAS 2000 Brazil Mercator",
                "5880": "SIRGAS 2000 Brazil Polyconic",
                "2314": "Trinidad 1903 Trinidad Grid (Clarke Feet)",
                "30200": "Trinidad 1903 Trinidad Grid (Links Clarke)",
                "6703": "WGS 1984 TM 60 SW",
                "31170": "Zanderij Suriname Old TM",
                "31171": "Zanderij Suriname TM",
                "31154": "Zanderij TM 54 NW",
                Colombia: {
                    "102232": "Bogota Ciudad Bogota",
                    "21897": "Colombia Bogota Zone",
                    "21898": "Colombia E Central Zone",
                    "21899": "Colombia East Zone",
                    "102231": "Colombia West West Zone",
                    "21896": "Colombia West Zone",
                    "6244": "MAGNA Arauca 2007",
                    "6245": "MAGNA Armenia Quindio 2006",
                    "6246": "MAGNA Barranquilla Atlantico 1997",
                    "6247": "MAGNA Bogota DC 2005",
                    "6248": "MAGNA Bucaramanga Santander 2008",
                    "6249": "MAGNA Cali Valle del Cauca 2009",
                    "6250": "MAGNA Cartagena Bolivar 2005",
                    "102233": "MAGNA Ciudad Bogota",
                    "3116": "MAGNA Colombia Bogota",
                    "3117": "MAGNA Colombia Este",
                    "3118": "MAGNA Colombia Este Este",
                    "3115": "MAGNA Colombia Oeste",
                    "3114": "MAGNA Colombia Oeste Oeste",
                    "6251": "MAGNA Cucuta Norte de Santander 2011",
                    "6252": "MAGNA Florencia Caqueta 2007",
                    "6253": "MAGNA Ibague Tolima 2007",
                    "6254": "MAGNA Inirida Guainia 2008",
                    "6255": "MAGNA Leticia Amazonas 1994",
                    "6256": "MAGNA Manizales Caldas 2011",
                    "6257": "MAGNA Medellin Antioquia 2010",
                    "6258": "MAGNA Mitu Vaupes 2011",
                    "6259": "MAGNA Mocoa Putumayo 2011",
                    "6260": "MAGNA Monteria Cordoba 2006",
                    "6261": "MAGNA Neiva Huila 2006",
                    "6262": "MAGNA Pasto Narino 2008",
                    "6263": "MAGNA Pereira Risaralda 2007",
                    "6264": "MAGNA Popayan Cauca 2006",
                    "6265": "MAGNA Puerto Carreno Vichada 2011",
                    "6266": "MAGNA Quibdo Choco 2011",
                    "6267": "MAGNA Riohacha La Guajira 2006",
                    "6268": "MAGNA San Andres 2007",
                    "6269": "MAGNA San Jose del Guaviare 2011",
                    "6270": "MAGNA Santa Marta Magdalena 2007",
                    "6271": "MAGNA Sucre 2006",
                    "6272": "MAGNA Tunja Boyaca 1997",
                    "6273": "MAGNA Valledupar Cesar 2011",
                    "6274": "MAGNA Villavicencio Meta 2011",
                    "6275": "MAGNA Yopal Casanare 2006",
                    "103599": "MAGNA-SIRGAS CMT12",
                    "9377": "MAGNA-SIRGAS Origen-Nacional"
                }
            },
            "South Korea": {
                "5181": "Korea 2000 Korea Central Belt",
                "5186": "Korea 2000 Korea Central Belt 2010",
                "5182": "Korea 2000 Korea Central Belt Jeju",
                "5183": "Korea 2000 Korea East Belt",
                "5187": "Korea 2000 Korea East Belt 2010",
                "5184": "Korea 2000 Korea East Sea Belt",
                "5188": "Korea 2000 Korea East Sea Belt 2010",
                "5179": "Korea 2000 Korea Unified Coordinate System",
                "5180": "Korea 2000 Korea West Belt",
                "5185": "Korea 2000 Korea West Belt 2010",
                "2097": "Korean 1985 Korea Central Belt",
                "5168": "Korean 1985 Korea Central Belt Jeju",
                "2096": "Korean 1985 Korea East Belt",
                "5167": "Korean 1985 Korea East Sea Belt",
                "5178": "Korean 1985 Korea Unified Coordinate System",
                "2098": "Korean 1985 Korea West Belt",
                "5174": "Korean 1985 Modified Korea Central Belt",
                "5175": "Korean 1985 Modified Korea Central Belt Jeju",
                "5176": "Korean 1985 Modified Korea East Belt",
                "5177": "Korean 1985 Modified Korea East Sea Belt",
                "5173": "Korean 1985 Modified Korea West Belt"
            },
            Sweden: {
                "3028": "RT38 0 gon",
                "3029": "RT38 25 gon O",
                "3027": "RT38 25 gon V",
                "3030": "RT38 5 gon O",
                "3026": "RT38 5 gon V",
                "3025": "RT38 75 gon V",
                "3022": "RT90 0 gon",
                "3023": "RT90 25 gon O",
                "3021": "RT90 25 gon V",
                "3024": "RT90 5 gon O",
                "3020": "RT90 5 gon V",
                "3019": "RT90 75 gon V",
                "3848": "SWEREF99 0 gon emulation",
                "3007": "SWEREF99 12 00",
                "3008": "SWEREF99 13 30",
                "3012": "SWEREF99 14 15",
                "3009": "SWEREF99 15 00",
                "3013": "SWEREF99 15 45",
                "3010": "SWEREF99 16 30",
                "3014": "SWEREF99 17 15",
                "3011": "SWEREF99 18 00",
                "3015": "SWEREF99 18 45",
                "3849": "SWEREF99 2.5 gon O emulation",
                "3847": "SWEREF99 2.5 gon V emulation",
                "3016": "SWEREF99 20 15",
                "3017": "SWEREF99 21 45",
                "3018": "SWEREF99 23 15",
                "3850": "SWEREF99 5 gon O emulation",
                "3846": "SWEREF99 5 gon V emulation",
                "3845": "SWEREF99 7.5 gon V emulation",
                "3854": "SWEREF99 County ST74",
                "3006": "SWEREF99 TM"
            },
            "Switzerland and Liechtenstein": {
                "21780": "Bern 1898 Bern LV03C",
                "102956": "Bern 1898 Bern LV03C (shifted)",
                "21781": "CH1903 LV03",
                "102957": "CH1903 LV03 (shifted)",
                "21782": "CH1903 LV03C-G",
                "102958": "CH1903 LV03C-G (shifted)",
                "2056": "CH1903+ LV95",
                "102959": "CH1903+ LV95 (shifted)"
            },
            Turkey: {
                "2319": "ED 1950 TM27",
                "2320": "ED 1950 TM30",
                "2321": "ED 1950 TM33",
                "2322": "ED 1950 TM36",
                "2323": "ED 1950 TM39",
                "2324": "ED 1950 TM42",
                "2325": "ED 1950 TM45",
                "102551": "ED 1950 Turkey 10",
                "102552": "ED 1950 Turkey 11",
                "102553": "ED 1950 Turkey 12",
                "102554": "ED 1950 Turkey 13",
                "102555": "ED 1950 Turkey 14",
                "102556": "ED 1950 Turkey 15",
                "102550": "ED 1950 Turkey 9",
                "5270": "TUREF 3 Degree GK Zone 10",
                "5271": "TUREF 3 Degree GK Zone 11",
                "5272": "TUREF 3 Degree GK Zone 12",
                "5273": "TUREF 3 Degree GK Zone 13",
                "5274": "TUREF 3 Degree GK Zone 14",
                "5275": "TUREF 3 Degree GK Zone 15",
                "5269": "TUREF 3 Degree GK Zone 9",
                "5636": "TUREF LAEA Europe",
                "5637": "TUREF LCC Europe",
                "5253": "TUREF TM27",
                "5254": "TUREF TM30",
                "5255": "TUREF TM33",
                "5256": "TUREF TM36",
                "5257": "TUREF TM39",
                "5258": "TUREF TM42",
                "5259": "TUREF TM45"
            },
            Ukraine: {
                "7825": "Pulkovo 1942 CS63 zone X1",
                "7826": "Pulkovo 1942 CS63 zone X2",
                "7827": "Pulkovo 1942 CS63 zone X3",
                "7828": "Pulkovo 1942 CS63 zone X4",
                "7829": "Pulkovo 1942 CS63 zone X5",
                "7830": "Pulkovo 1942 CS63 zone X6",
                "7831": "Pulkovo 1942 CS63 zone X7",
                "5577": "Ukraine 2000 3 Degree GK CM 21E",
                "5578": "Ukraine 2000 3 Degree GK CM 24E",
                "5579": "Ukraine 2000 3 Degree GK CM 27E",
                "5580": "Ukraine 2000 3 Degree GK CM 30E",
                "5581": "Ukraine 2000 3 Degree GK CM 33E",
                "5582": "Ukraine 2000 3 Degree GK CM 36E",
                "5583": "Ukraine 2000 3 Degree GK CM 39E",
                "5573": "Ukraine 2000 3-Degree GK Zone 10",
                "5574": "Ukraine 2000 3-Degree GK Zone 11",
                "5575": "Ukraine 2000 3-Degree GK Zone 12",
                "5576": "Ukraine 2000 3-Degree GK Zone 13",
                "5570": "Ukraine 2000 3-Degree GK Zone 7",
                "5571": "Ukraine 2000 3-Degree GK Zone 8",
                "5572": "Ukraine 2000 3-Degree GK Zone 9",
                "5566": "Ukraine 2000 GK CM 21E",
                "5567": "Ukraine 2000 GK CM 27E",
                "5568": "Ukraine 2000 GK CM 33E",
                "5569": "Ukraine 2000 GK CM 39E",
                "5562": "Ukraine 2000 GK Zone 4",
                "5563": "Ukraine 2000 GK Zone 5",
                "5564": "Ukraine 2000 GK Zone 6",
                "5565": "Ukraine 2000 GK Zone 7",
                "6384": "Ukraine 2000 TM Zone 10",
                "6385": "Ukraine 2000 TM Zone 11",
                "6386": "Ukraine 2000 TM Zone 12",
                "6387": "Ukraine 2000 TM Zone 13",
                "6381": "Ukraine 2000 TM Zone 7",
                "6382": "Ukraine 2000 TM Zone 8",
                "6383": "Ukraine 2000 TM Zone 9"
            },
            Vietnam: {
                "9205": "VN-2000 TM-3 103-00",
                "9206": "VN-2000 TM-3 104-00",
                "9207": "VN-2000 TM-3 104-30",
                "9208": "VN-2000 TM-3 104-45",
                "9209": "VN-2000 TM-3 105-30",
                "9210": "VN-2000 TM-3 105-45",
                "9211": "VN-2000 TM-3 106-00",
                "9212": "VN-2000 TM-3 106-15",
                "9213": "VN-2000 TM-3 106-30",
                "9214": "VN-2000 TM-3 107-00",
                "9215": "VN-2000 TM-3 107-15",
                "9216": "VN-2000 TM-3 107-30",
                "5899": "VN-2000 TM-3 107-45",
                "9217": "VN-2000 TM-3 108-15",
                "9218": "VN-2000 TM-3 108-30",
                "5896": "VN-2000 TM-3 zone 481",
                "5897": "VN-2000 TM-3 zone 482",
                "5898": "VN-2000 TM-3 zone 491"
            }
        },
        Oceans: { Caribbean: { "8035": "WGS 1984 TM Zone 20N (US Feet)", "8036": "WGS 1984 TM Zone 21N (US Feet)" } },
        Polar: {
            "5890": "JAXA Snow Depth Polar Stereographic North",
            "3410": "NSIDC EASE Grid Global",
            "3408": "NSIDC EASE Grid North",
            "3409": "NSIDC EASE Grid South",
            "3411": "NSIDC Sea Ice Polar Stereographic North",
            "3412": "NSIDC Sea Ice Polar Stereographic South",
            "102016": "North Pole Azimuthal Equidistant",
            "102034": "North Pole Gnomonic",
            "102017": "North Pole Lambert Azimuthal Equal Area",
            "102035": "North Pole Orthographic",
            "102018": "North Pole Stereographic",
            "2986": "Perroud 1950 Terre Adelie Polar Stereographic",
            "2985": "Petrels 1972 Terre Adelie Polar Stereographic",
            "7082": "RGTAAF07 Terre Adelie Polar Stereographic",
            "8455": "RGTAAF07 UTM Zone 53S",
            "8456": "RGTAAF07 UTM Zone 54S",
            "5480": "RSRGD2000 Borchgrevink Coast LC2000",
            "3852": "RSRGD2000 Darwin Glacier LC2000",
            "5479": "RSRGD2000 McMurdo Sound LC2000",
            "5481": "RSRGD2000 Pennell Coast LC2000",
            "5482": "RSRGD2000 Ross Ice Shelf PS2000",
            "102019": "South Pole Azimuthal Equidistant",
            "102036": "South Pole Gnomonic",
            "102020": "South Pole Lambert Azimuthal Equal Area",
            "102037": "South Pole Orthographic",
            "102021": "South Pole Stereographic",
            "32661": "UPS North",
            "32761": "UPS South",
            "3031": "WGS 1984 Antarctic Polar Stereographic",
            "3995": "WGS 1984 Arctic Polar Stereographic",
            "3033": "WGS 1984 Australian Antarctic Lambert",
            "3032": "WGS 1984 Australian Antarctic Polar Stereographic",
            "3973": "WGS 1984 EASE Grid North",
            "3974": "WGS 1984 EASE Grid South",
            "3996": "WGS 1984 IBCAO Polar Stereographic",
            "9354": "WGS 1984 IBCSO Polar Stereographic",
            "6931": "WGS 1984 NSIDC EASE-Grid 2.0 North",
            "6932": "WGS 1984 NSIDC EASE-Grid 2.0 South",
            "3413": "WGS 1984 NSIDC Sea Ice Polar Stereographic North",
            "3976": "WGS 1984 NSIDC Sea Ice Polar Stereographic South",
            "3572": "WGS 1984 North Pole LAEA Alaska",
            "3574": "WGS 1984 North Pole LAEA Atlantic",
            "3571": "WGS 1984 North Pole LAEA Bering Sea",
            "3573": "WGS 1984 North Pole LAEA Canada",
            "3575": "WGS 1984 North Pole LAEA Europe",
            "3576": "WGS 1984 North Pole LAEA Russia",
            "3294": "WGS 1984 USGS Transantarctic Mountains",
            "EPSG Arctic": {
                "6069": "ETRS 1989 EPSG Arctic zone 2-22",
                "6070": "ETRS 1989 EPSG Arctic zone 3-11",
                "6071": "ETRS 1989 EPSG Arctic zone 4-26",
                "6072": "ETRS 1989 EPSG Arctic zone 4-28",
                "6073": "ETRS 1989 EPSG Arctic zone 5-11",
                "6074": "ETRS 1989 EPSG Arctic zone 5-13",
                "6125": "ETRS 1989 EPSG Arctic zone 5-47",
                "6050": "GR96 EPSG Arctic zone 1-25",
                "6051": "GR96 EPSG Arctic zone 2-18",
                "6052": "GR96 EPSG Arctic zone 2-20",
                "6053": "GR96 EPSG Arctic zone 3-29",
                "6054": "GR96 EPSG Arctic zone 3-31",
                "6055": "GR96 EPSG Arctic zone 3-33",
                "6056": "GR96 EPSG Arctic zone 4-20",
                "6057": "GR96 EPSG Arctic zone 4-22",
                "6058": "GR96 EPSG Arctic zone 4-24",
                "6059": "GR96 EPSG Arctic zone 5-41",
                "6060": "GR96 EPSG Arctic zone 5-43",
                "6061": "GR96 EPSG Arctic zone 5-45",
                "6062": "GR96 EPSG Arctic zone 6-26",
                "6063": "GR96 EPSG Arctic zone 6-28",
                "6064": "GR96 EPSG Arctic zone 6-30",
                "6065": "GR96 EPSG Arctic zone 7-11",
                "6066": "GR96 EPSG Arctic zone 7-13",
                "6067": "GR96 EPSG Arctic zone 8-20",
                "6068": "GR96 EPSG Arctic zone 8-22",
                "6351": "NAD 1983 2011 EPSG Arctic zone 5-29",
                "6352": "NAD 1983 2011 EPSG Arctic zone 5-31",
                "6353": "NAD 1983 2011 EPSG Arctic zone 6-14",
                "6354": "NAD 1983 2011 EPSG Arctic zone 6-16",
                "6098": "NAD 1983 CSRS EPSG Arctic zone 1-23",
                "6099": "NAD 1983 CSRS EPSG Arctic zone 2-14",
                "6100": "NAD 1983 CSRS EPSG Arctic zone 2-16",
                "6101": "NAD 1983 CSRS EPSG Arctic zone 3-25",
                "6102": "NAD 1983 CSRS EPSG Arctic zone 3-27",
                "6103": "NAD 1983 CSRS EPSG Arctic zone 3-29",
                "6104": "NAD 1983 CSRS EPSG Arctic zone 4-14",
                "6105": "NAD 1983 CSRS EPSG Arctic zone 4-16",
                "6106": "NAD 1983 CSRS EPSG Arctic zone 4-18",
                "6107": "NAD 1983 CSRS EPSG Arctic zone 5-33",
                "6108": "NAD 1983 CSRS EPSG Arctic zone 5-35",
                "6109": "NAD 1983 CSRS EPSG Arctic zone 5-37",
                "6110": "NAD 1983 CSRS EPSG Arctic zone 5-39",
                "6111": "NAD 1983 CSRS EPSG Arctic zone 6-18",
                "6112": "NAD 1983 CSRS EPSG Arctic zone 6-20",
                "6113": "NAD 1983 CSRS EPSG Arctic zone 6-22",
                "6114": "NAD 1983 CSRS EPSG Arctic zone 6-24",
                "6094": "NAD 1983 NSRS2007 EPSG Arctic zone 5-29",
                "6095": "NAD 1983 NSRS2007 EPSG Arctic zone 5-31",
                "6096": "NAD 1983 NSRS2007 EPSG Arctic zone 6-14",
                "6097": "NAD 1983 NSRS2007 EPSG Arctic zone 6-16v",
                "5936": "WGS 1984 EPSG Alaska Polar Stereographic",
                "5921": "WGS 1984 EPSG Arctic Regional zone A1",
                "5922": "WGS 1984 EPSG Arctic Regional zone A2",
                "5923": "WGS 1984 EPSG Arctic Regional zone A3",
                "5924": "WGS 1984 EPSG Arctic Regional zone A4",
                "5925": "WGS 1984 EPSG Arctic Regional zone A5",
                "5926": "WGS 1984 EPSG Arctic Regional zone B1",
                "5927": "WGS 1984 EPSG Arctic Regional zone B2",
                "5928": "WGS 1984 EPSG Arctic Regional zone B3",
                "5929": "WGS 1984 EPSG Arctic Regional zone B4",
                "5930": "WGS 1984 EPSG Arctic Regional zone B5",
                "5931": "WGS 1984 EPSG Arctic Regional zone C1",
                "5932": "WGS 1984 EPSG Arctic Regional zone C2",
                "5933": "WGS 1984 EPSG Arctic Regional zone C3",
                "5934": "WGS 1984 EPSG Arctic Regional zone C4",
                "5935": "WGS 1984 EPSG Arctic Regional zone C5",
                "6118": "WGS 1984 EPSG Arctic zone 1-21",
                "6115": "WGS 1984 EPSG Arctic zone 1-27",
                "6116": "WGS 1984 EPSG Arctic zone 1-29",
                "6117": "WGS 1984 EPSG Arctic zone 1-31",
                "6120": "WGS 1984 EPSG Arctic zone 2-10",
                "6121": "WGS 1984 EPSG Arctic zone 2-12",
                "6075": "WGS 1984 EPSG Arctic zone 2-24",
                "6076": "WGS 1984 EPSG Arctic zone 2-26",
                "6119": "WGS 1984 EPSG Arctic zone 2-28",
                "6077": "WGS 1984 EPSG Arctic zone 3-13",
                "6078": "WGS 1984 EPSG Arctic zone 3-15",
                "6079": "WGS 1984 EPSG Arctic zone 3-17",
                "6080": "WGS 1984 EPSG Arctic zone 3-19",
                "6122": "WGS 1984 EPSG Arctic zone 3-21",
                "6123": "WGS 1984 EPSG Arctic zone 3-23",
                "6124": "WGS 1984 EPSG Arctic zone 4-12",
                "6081": "WGS 1984 EPSG Arctic zone 4-30",
                "6082": "WGS 1984 EPSG Arctic zone 4-32",
                "6083": "WGS 1984 EPSG Arctic zone 4-34",
                "6084": "WGS 1984 EPSG Arctic zone 4-36",
                "6085": "WGS 1984 EPSG Arctic zone 4-38",
                "6086": "WGS 1984 EPSG Arctic zone 4-40",
                "6087": "WGS 1984 EPSG Arctic zone 5-15",
                "6088": "WGS 1984 EPSG Arctic zone 5-17",
                "6089": "WGS 1984 EPSG Arctic zone 5-19",
                "6090": "WGS 1984 EPSG Arctic zone 5-21",
                "6091": "WGS 1984 EPSG Arctic zone 5-23",
                "6092": "WGS 1984 EPSG Arctic zone 5-25",
                "6093": "WGS 1984 EPSG Arctic zone 5-27",
                "5937": "WGS 1984 EPSG Canada Polar Stereographic",
                "5938": "WGS 1984 EPSG Greenland Polar Stereographic",
                "5939": "WGS 1984 EPSG Norway Polar Stereographic",
                "5940": "WGS 1984 EPSG Russia Polar Stereographic"
            }
        },
        "State Plane": {
            "NAD 1927 (US Feet)": {
                "26729": "NAD 1927 StatePlane Alabama East FIPS 0101",
                "26730": "NAD 1927 StatePlane Alabama West FIPS 0102",
                "26731": "NAD 1927 StatePlane Alaska  1 FIPS 5001",
                "26732": "NAD 1927 StatePlane Alaska  2 FIPS 5002",
                "26733": "NAD 1927 StatePlane Alaska  3 FIPS 5003",
                "26734": "NAD 1927 StatePlane Alaska  4 FIPS 5004",
                "26735": "NAD 1927 StatePlane Alaska  5 FIPS 5005",
                "26736": "NAD 1927 StatePlane Alaska  6 FIPS 5006",
                "26737": "NAD 1927 StatePlane Alaska  7 FIPS 5007",
                "26738": "NAD 1927 StatePlane Alaska  8 FIPS 5008",
                "26739": "NAD 1927 StatePlane Alaska  9 FIPS 5009",
                "26740": "NAD 1927 StatePlane Alaska 10 FIPS 5010",
                "26749": "NAD 1927 StatePlane Arizona Central FIPS 0202",
                "26748": "NAD 1927 StatePlane Arizona East FIPS 0201",
                "26750": "NAD 1927 StatePlane Arizona West FIPS 0203",
                "26751": "NAD 1927 StatePlane Arkansas North FIPS 0301",
                "26752": "NAD 1927 StatePlane Arkansas South FIPS 0302",
                "26741": "NAD 1927 StatePlane California I FIPS 0401",
                "26742": "NAD 1927 StatePlane California II FIPS 0402",
                "26743": "NAD 1927 StatePlane California III FIPS 0403",
                "26744": "NAD 1927 StatePlane California IV FIPS 0404",
                "26745": "NAD 1927 StatePlane California V FIPS 0405",
                "102699": "NAD 1927 StatePlane California V Ventura",
                "26746": "NAD 1927 StatePlane California VI FIPS 0406",
                "26799": "NAD 1927 StatePlane California VII FIPS 0407",
                "26754": "NAD 1927 StatePlane Colorado Central FIPS 0502",
                "26753": "NAD 1927 StatePlane Colorado North FIPS 0501",
                "26755": "NAD 1927 StatePlane Colorado South FIPS 0503",
                "26756": "NAD 1927 StatePlane Connecticut FIPS 0600",
                "26757": "NAD 1927 StatePlane Delaware FIPS 0700",
                "26758": "NAD 1927 StatePlane Florida East FIPS 0901",
                "26760": "NAD 1927 StatePlane Florida North FIPS 0903",
                "26759": "NAD 1927 StatePlane Florida West FIPS 0902",
                "26766": "NAD 1927 StatePlane Georgia East FIPS 1001",
                "26767": "NAD 1927 StatePlane Georgia West FIPS 1002",
                "65061": "NAD 1927 StatePlane Guam FIPS 5400",
                "26769": "NAD 1927 StatePlane Idaho Central FIPS 1102",
                "26768": "NAD 1927 StatePlane Idaho East FIPS 1101",
                "26770": "NAD 1927 StatePlane Idaho West FIPS 1103",
                "26771": "NAD 1927 StatePlane Illinois East FIPS 1201",
                "26772": "NAD 1927 StatePlane Illinois West FIPS 1202",
                "26773": "NAD 1927 StatePlane Indiana East FIPS 1301",
                "26774": "NAD 1927 StatePlane Indiana West FIPS 1302",
                "26775": "NAD 1927 StatePlane Iowa North FIPS 1401",
                "26776": "NAD 1927 StatePlane Iowa South FIPS 1402",
                "26777": "NAD 1927 StatePlane Kansas North FIPS 1501",
                "26778": "NAD 1927 StatePlane Kansas South FIPS 1502",
                "26779": "NAD 1927 StatePlane Kentucky North FIPS 1601",
                "26780": "NAD 1927 StatePlane Kentucky South FIPS 1602",
                "26781": "NAD 1927 StatePlane Louisiana North FIPS 1701",
                "32099": "NAD 1927 StatePlane Louisiana Offshore FIPS 1703",
                "26782": "NAD 1927 StatePlane Louisiana South FIPS 1702",
                "26783": "NAD 1927 StatePlane Maine East FIPS 1801",
                "26784": "NAD 1927 StatePlane Maine West FIPS 1802",
                "26785": "NAD 1927 StatePlane Maryland FIPS 1900",
                "26786": "NAD 1927 StatePlane Massachusetts FIPS 2001",
                "26787": "NAD 1927 StatePlane Massachusetts Isl FIPS 2002",
                "26789": "NAD 1927 StatePlane Michigan Central FIPS 2112",
                "5624": "NAD 1927 StatePlane Michigan Central Old",
                "5623": "NAD 1927 StatePlane Michigan East Old",
                "26788": "NAD 1927 StatePlane Michigan North FIPS 2111",
                "26790": "NAD 1927 StatePlane Michigan South FIPS 2113",
                "5625": "NAD 1927 StatePlane Michigan West Old",
                "26792": "NAD 1927 StatePlane Minnesota Central FIPS 2202",
                "26791": "NAD 1927 StatePlane Minnesota North FIPS 2201",
                "26793": "NAD 1927 StatePlane Minnesota South FIPS 2203",
                "26794": "NAD 1927 StatePlane Mississippi East FIPS 2301",
                "26795": "NAD 1927 StatePlane Mississippi West FIPS 2302",
                "26797": "NAD 1927 StatePlane Missouri Central FIPS 2402",
                "26796": "NAD 1927 StatePlane Missouri East FIPS 2401",
                "26798": "NAD 1927 StatePlane Missouri West FIPS 2403",
                "32002": "NAD 1927 StatePlane Montana Central FIPS 2502",
                "32001": "NAD 1927 StatePlane Montana North FIPS 2501",
                "32003": "NAD 1927 StatePlane Montana South FIPS 2503",
                "32005": "NAD 1927 StatePlane Nebraska North FIPS 2601",
                "32006": "NAD 1927 StatePlane Nebraska South FIPS 2602",
                "32008": "NAD 1927 StatePlane Nevada Central FIPS 2702",
                "32007": "NAD 1927 StatePlane Nevada East FIPS 2701",
                "32009": "NAD 1927 StatePlane Nevada West FIPS 2703",
                "32010": "NAD 1927 StatePlane New Hampshire FIPS 2800",
                "32011": "NAD 1927 StatePlane New Jersey FIPS 2900",
                "32013": "NAD 1927 StatePlane New Mexico Central FIPS 3002",
                "32012": "NAD 1927 StatePlane New Mexico East FIPS 3001",
                "32014": "NAD 1927 StatePlane New Mexico West FIPS 3003",
                "32016": "NAD 1927 StatePlane New York Central FIPS 3102",
                "32015": "NAD 1927 StatePlane New York East FIPS 3101",
                "4456": "NAD 1927 StatePlane New York Long Isl FIPS 3104",
                "32017": "NAD 1927 StatePlane New York West FIPS 3103",
                "32019": "NAD 1927 StatePlane North Carolina FIPS 3200",
                "32020": "NAD 1927 StatePlane North Dakota N FIPS 3301",
                "32021": "NAD 1927 StatePlane North Dakota S FIPS 3302",
                "32022": "NAD 1927 StatePlane Ohio North FIPS 3401",
                "32023": "NAD 1927 StatePlane Ohio South FIPS 3402",
                "32024": "NAD 1927 StatePlane Oklahoma North FIPS 3501",
                "32025": "NAD 1927 StatePlane Oklahoma South FIPS 3502",
                "32026": "NAD 1927 StatePlane Oregon North FIPS 3601",
                "32027": "NAD 1927 StatePlane Oregon South FIPS 3602",
                "32028": "NAD 1927 StatePlane Pennsylvania North FIPS 3701",
                "4455": "NAD 1927 StatePlane Pennsylvania South FIPS 3702",
                "32059": "NAD 1927 StatePlane Puerto Rico FIPS 5201",
                "32030": "NAD 1927 StatePlane Rhode Island FIPS 3800",
                "32031": "NAD 1927 StatePlane South Carolina N FIPS 3901",
                "32033": "NAD 1927 StatePlane South Carolina S FIPS 3902",
                "32034": "NAD 1927 StatePlane South Dakota N FIPS 4001",
                "32035": "NAD 1927 StatePlane South Dakota S FIPS 4002",
                "2204": "NAD 1927 StatePlane Tennessee FIPS 4100",
                "32039": "NAD 1927 StatePlane Texas Central FIPS 4203",
                "32038": "NAD 1927 StatePlane Texas N Central FIPS 4202",
                "32037": "NAD 1927 StatePlane Texas North FIPS 4201",
                "32040": "NAD 1927 StatePlane Texas S Central FIPS 4204",
                "32041": "NAD 1927 StatePlane Texas South FIPS 4205",
                "32043": "NAD 1927 StatePlane Utah Central FIPS 4302",
                "32042": "NAD 1927 StatePlane Utah North FIPS 4301",
                "32044": "NAD 1927 StatePlane Utah South FIPS 4303",
                "32045": "NAD 1927 StatePlane Vermont FIPS 3400",
                "32060": "NAD 1927 StatePlane Virgin Isl St.Croix FIPS 5202",
                "32046": "NAD 1927 StatePlane Virginia North FIPS 4501",
                "32047": "NAD 1927 StatePlane Virginia South FIPS 4502",
                "32048": "NAD 1927 StatePlane Washington North FIPS 4601",
                "32049": "NAD 1927 StatePlane Washington South FIPS 4602",
                "32050": "NAD 1927 StatePlane West Virginia N FIPS 4701",
                "32051": "NAD 1927 StatePlane West Virginia S FIPS 4702",
                "32053": "NAD 1927 StatePlane Wisconsin Central FIPS 4802",
                "32052": "NAD 1927 StatePlane Wisconsin North FIPS 4801",
                "32054": "NAD 1927 StatePlane Wisconsin South FIPS 4803",
                "32056": "NAD 1927 StatePlane Wyoming E Central FIPS 4902",
                "32055": "NAD 1927 StatePlane Wyoming East FIPS 4901",
                "32057": "NAD 1927 StatePlane Wyoming W Central FIPS 4903",
                "32058": "NAD 1927 StatePlane Wyoming West FIPS 4904"
            },
            "NAD 1983 (2011) (Intl Feet)": {
                "6405": "NAD 1983 (2011) StatePlane Arizona Central FIPS 0202 (Intl Feet)",
                "6407": "NAD 1983 (2011) StatePlane Arizona East FIPS 0201 (Intl Feet)",
                "6409": "NAD 1983 (2011) StatePlane Arizona West FIPS 0203 (Intl Feet)",
                "6494": "NAD 1983 (2011) StatePlane Michigan Central FIPS 2112 (Intl Feet)",
                "6496": "NAD 1983 (2011) StatePlane Michigan North FIPS 2111 (Intl Feet)",
                "6499": "NAD 1983 (2011) StatePlane Michigan South FIPS 2113 (Intl Feet)",
                "6515": "NAD 1983 (2011) StatePlane Montana FIPS 2500 (Intl Feet)",
                "6545": "NAD 1983 (2011) StatePlane North Dakota N FIPS 3301 (Intl Feet)",
                "6547": "NAD 1983 (2011) StatePlane North Dakota S FIPS 3302 (Intl Feet)",
                "6559": "NAD 1983 (2011) StatePlane Oregon North FIPS 3601 (Intl Feet)",
                "6561": "NAD 1983 (2011) StatePlane Oregon South FIPS 3602 (Intl Feet)",
                "6570": "NAD 1983 (2011) StatePlane South Carolina FIPS 3900 (Intl Feet)",
                "103167": "NAD 1983 (2011) StatePlane Utah Central FIPS 4302 (Intl Feet)",
                "103166": "NAD 1983 (2011) StatePlane Utah North FIPS 4301 (Intl Feet)",
                "103168": "NAD 1983 (2011) StatePlane Utah South FIPS 4303 (Intl Feet)"
            },
            "NAD 1983 (2011) (Meters)": {
                "6480": "NAD 1983 (2011) Maine 2000 Central Zone (Meters)",
                "6481": "NAD 1983 (2011) Maine 2000 East Zone (Meters)",
                "6482": "NAD 1983 (2011) Maine 2000 West Zone (Meters)",
                "6355": "NAD 1983 (2011) StatePlane Alabama East FIPS 0101 (Meters)",
                "6356": "NAD 1983 (2011) StatePlane Alabama West FIPS 0102 (Meters)",
                "6394": "NAD 1983 (2011) StatePlane Alaska  1 FIPS 5001 (Meters)",
                "6395": "NAD 1983 (2011) StatePlane Alaska  2 FIPS 5002 (Meters)",
                "6396": "NAD 1983 (2011) StatePlane Alaska  3 FIPS 5003 (Meters)",
                "6397": "NAD 1983 (2011) StatePlane Alaska  4 FIPS 5004 (Meters)",
                "6398": "NAD 1983 (2011) StatePlane Alaska  5 FIPS 5005 (Meters)",
                "6399": "NAD 1983 (2011) StatePlane Alaska  6 FIPS 5006 (Meters)",
                "6400": "NAD 1983 (2011) StatePlane Alaska  7 FIPS 5007 (Meters)",
                "6401": "NAD 1983 (2011) StatePlane Alaska  8 FIPS 5008 (Meters)",
                "6402": "NAD 1983 (2011) StatePlane Alaska  9 FIPS 5009 (Meters)",
                "6403": "NAD 1983 (2011) StatePlane Alaska 10 FIPS 5010 (Meters)",
                "6404": "NAD 1983 (2011) StatePlane Arizona Central FIPS 0202 (Meters)",
                "6406": "NAD 1983 (2011) StatePlane Arizona East FIPS 0201 (Meters)",
                "6408": "NAD 1983 (2011) StatePlane Arizona West FIPS 0203 (Meters)",
                "6410": "NAD 1983 (2011) StatePlane Arkansas North FIPS 0301 (Meters)",
                "6412": "NAD 1983 (2011) StatePlane Arkansas South FIPS 0302 (Meters)",
                "6415": "NAD 1983 (2011) StatePlane California I FIPS 0401 (Meters)",
                "6417": "NAD 1983 (2011) StatePlane California II FIPS 0402 (Meters)",
                "6419": "NAD 1983 (2011) StatePlane California III FIPS 0403 (Meters)",
                "6421": "NAD 1983 (2011) StatePlane California IV FIPS 0404 (Meters)",
                "6423": "NAD 1983 (2011) StatePlane California V FIPS 0405 (Meters)",
                "6425": "NAD 1983 (2011) StatePlane California VI FIPS 0406 (Meters)",
                "6427": "NAD 1983 (2011) StatePlane Colorado Central FIPS 0502 (Meter)",
                "6429": "NAD 1983 (2011) StatePlane Colorado North FIPS 0501 (Meters)",
                "6431": "NAD 1983 (2011) StatePlane Colorado South FIPS 0503 (Meters)",
                "6433": "NAD 1983 (2011) StatePlane Connecticut FIPS 0600 (Meters)",
                "6435": "NAD 1983 (2011) StatePlane Delaware FIPS 0700 (Meters)",
                "6437": "NAD 1983 (2011) StatePlane Florida East FIPS 0901 (Meters)",
                "6440": "NAD 1983 (2011) StatePlane Florida North FIPS 0903 (Meters)",
                "6442": "NAD 1983 (2011) StatePlane Florida West FIPS 0902 (Meters)",
                "6444": "NAD 1983 (2011) StatePlane Georgia East FIPS 1001 (Meters)",
                "6446": "NAD 1983 (2011) StatePlane Georgia West FIPS 1002 (Meters)",
                "6448": "NAD 1983 (2011) StatePlane Idaho Central FIPS 1102 (Meters)",
                "6450": "NAD 1983 (2011) StatePlane Idaho East FIPS 1101 (Meters)",
                "6452": "NAD 1983 (2011) StatePlane Idaho West FIPS 1103 (Meters)",
                "6454": "NAD 1983 (2011) StatePlane Illinois East FIPS 1201 (Meters)",
                "6456": "NAD 1983 (2011) StatePlane Illinois West FIPS 1202 (Meters)",
                "6458": "NAD 1983 (2011) StatePlane Indiana East FIPS 1301 (Meters)",
                "6460": "NAD 1983 (2011) StatePlane Indiana West FIPS 1302 (Meters)",
                "6462": "NAD 1983 (2011) StatePlane Iowa North FIPS 1401 (Meters)",
                "6464": "NAD 1983 (2011) StatePlane Iowa South FIPS 1402 (Meters)",
                "6466": "NAD 1983 (2011) StatePlane Kansas North FIPS 1501 (Meters)",
                "6468": "NAD 1983 (2011) StatePlane Kansas South FIPS 1502 (Meters)",
                "6472": "NAD 1983 (2011) StatePlane Kentucky FIPS 1600 (Meters)",
                "6470": "NAD 1983 (2011) StatePlane Kentucky North FIPS 1601 (Meters)",
                "6474": "NAD 1983 (2011) StatePlane Kentucky South FIPS 1602 (Meters)",
                "6476": "NAD 1983 (2011) StatePlane Louisiana North FIPS 1701 (Meters)",
                "6478": "NAD 1983 (2011) StatePlane Louisiana South FIPS 1702 (Meters)",
                "6483": "NAD 1983 (2011) StatePlane Maine East FIPS 1801 (Meters)",
                "6485": "NAD 1983 (2011) StatePlane Maine West FIPS 1802 (Meters)",
                "6487": "NAD 1983 (2011) StatePlane Maryland FIPS 1900 (Meters)",
                "6491": "NAD 1983 (2011) StatePlane Massachusetts FIPS 2001 (Meters)",
                "6489": "NAD 1983 (2011) StatePlane Massachusetts Isl FIPS 2002 (Meters)",
                "6493": "NAD 1983 (2011) StatePlane Michigan Central FIPS 2112 (Meters)",
                "6495": "NAD 1983 (2011) StatePlane Michigan North FIPS 2111 (Meters)",
                "6498": "NAD 1983 (2011) StatePlane Michigan South FIPS 2113 (Meters)",
                "6500": "NAD 1983 (2011) StatePlane Minnesota Central FIPS 2202 (Meters)",
                "6502": "NAD 1983 (2011) StatePlane Minnesota North FIPS 2201 (Meters)",
                "6504": "NAD 1983 (2011) StatePlane Minnesota South FIPS 2203 (Meters)",
                "6506": "NAD 1983 (2011) StatePlane Mississippi East FIPS 2301 (Meters)",
                "6509": "NAD 1983 (2011) StatePlane Mississippi West FIPS 2302 (Meters)",
                "6511": "NAD 1983 (2011) StatePlane Missouri Central FIPS 2402 (Meters)",
                "6512": "NAD 1983 (2011) StatePlane Missouri East FIPS 2401 (Meters)",
                "6513": "NAD 1983 (2011) StatePlane Missouri West FIPS 2403 (Meters)",
                "6514": "NAD 1983 (2011) StatePlane Montana FIPS 2500 (Meters)",
                "6516": "NAD 1983 (2011) StatePlane Nebraska FIPS 2600 (Meters)",
                "6518": "NAD 1983 (2011) StatePlane Nevada Central FIPS 2702 (Meters)",
                "6520": "NAD 1983 (2011) StatePlane Nevada East FIPS 2701 (Meters)",
                "6522": "NAD 1983 (2011) StatePlane Nevada West FIPS 2703 (Meters)",
                "6524": "NAD 1983 (2011) StatePlane New Hampshire FIPS 2800 (Meters)",
                "6526": "NAD 1983 (2011) StatePlane New Jersey FIPS 2900 (Meters)",
                "6528": "NAD 1983 (2011) StatePlane New Mexico Central FIPS 3002 (Meters)",
                "6530": "NAD 1983 (2011) StatePlane New Mexico East FIPS 3001 (Meters)",
                "6532": "NAD 1983 (2011) StatePlane New Mexico West FIPS 3003 (Meters)",
                "6534": "NAD 1983 (2011) StatePlane New York Central FIPS 3102 (Meters)",
                "6536": "NAD 1983 (2011) StatePlane New York East FIPS 3101 (Meters)",
                "6538": "NAD 1983 (2011) StatePlane New York Long Isl FIPS 3104 (Meters)",
                "6540": "NAD 1983 (2011) StatePlane New York West FIPS 3103 (Meters)",
                "6542": "NAD 1983 (2011) StatePlane North Carolina FIPS 3200 (Meters)",
                "6544": "NAD 1983 (2011) StatePlane North Dakota N FIPS 3301 (Meters)",
                "6546": "NAD 1983 (2011) StatePlane North Dakota S FIPS 3302 (Meters)",
                "6548": "NAD 1983 (2011) StatePlane Ohio North FIPS 3401 (Meters)",
                "6550": "NAD 1983 (2011) StatePlane Ohio South FIPS 3402 (Meters)",
                "6552": "NAD 1983 (2011) StatePlane Oklahoma North FIPS 3501 (Meters)",
                "6554": "NAD 1983 (2011) StatePlane Oklahoma South FIPS 3502 (Meters)",
                "6558": "NAD 1983 (2011) StatePlane Oregon North FIPS 3601 (Meters)",
                "6560": "NAD 1983 (2011) StatePlane Oregon South FIPS 3602 (Meters)",
                "6566": "NAD 1983 (2011) StatePlane PR \u0026 VI FIPS 5200 (Meters)",
                "6562": "NAD 1983 (2011) StatePlane Pennsylvania North FIPS 3701 (Meters)",
                "6564": "NAD 1983 (2011) StatePlane Pennsylvania South FIPS 3702 (Meters)",
                "6567": "NAD 1983 (2011) StatePlane Rhode Island FIPS 3800 (Meters)",
                "6569": "NAD 1983 (2011) StatePlane South Carolina FIPS 3900 (Meters)",
                "6571": "NAD 1983 (2011) StatePlane South Dakota N FIPS 4001 (Meters)",
                "6573": "NAD 1983 (2011) StatePlane South Dakota S FIPS 4002 (Meters)",
                "6575": "NAD 1983 (2011) StatePlane Tennessee FIPS 4100 (Meters)",
                "6577": "NAD 1983 (2011) StatePlane Texas Central FIPS 4203 (Meters)",
                "6583": "NAD 1983 (2011) StatePlane Texas N Central FIPS 4202 (Meters)",
                "6581": "NAD 1983 (2011) StatePlane Texas North FIPS 4201 (Meters)",
                "6587": "NAD 1983 (2011) StatePlane Texas S Central FIPS 4204 (Meters)",
                "6585": "NAD 1983 (2011) StatePlane Texas South FIPS 4205 (Meters)",
                "6619": "NAD 1983 (2011) StatePlane Utah Central FIPS 4302 (Meters)",
                "6620": "NAD 1983 (2011) StatePlane Utah North FIPS 4301 (Meters)",
                "6621": "NAD 1983 (2011) StatePlane Utah South FIPS 4303 (Meters)",
                "6589": "NAD 1983 (2011) StatePlane Vermont FIPS 4400 (Meters)",
                "6592": "NAD 1983 (2011) StatePlane Virginia North FIPS 4501 (Meters)",
                "6594": "NAD 1983 (2011) StatePlane Virginia South FIPS 4502 (Meters)",
                "6596": "NAD 1983 (2011) StatePlane Washington North FIPS 4601 (Meters)",
                "6598": "NAD 1983 (2011) StatePlane Washington South FIPS 4602 (Meters)",
                "6600": "NAD 1983 (2011) StatePlane West Virginia N FIPS 4701 (Meters)",
                "6602": "NAD 1983 (2011) StatePlane West Virginia S FIPS 4702 (Meters)",
                "6879": "NAD 1983 (2011) StatePlane Wisconsin Central FIPS 4802 (Meters)",
                "6606": "NAD 1983 (2011) StatePlane Wisconsin North FIPS 4801 (Meters)",
                "6608": "NAD 1983 (2011) StatePlane Wisconsin South FIPS 4803 (Meters)",
                "6613": "NAD 1983 (2011) StatePlane Wyoming E Central FIPS 4902 (Meters)",
                "6611": "NAD 1983 (2011) StatePlane Wyoming East FIPS 4901 (Meters)",
                "6617": "NAD 1983 (2011) StatePlane Wyoming W Central FIPS 4903 (Meters)",
                "6615": "NAD 1983 (2011) StatePlane Wyoming West FIPS 4904 (Meters)"
            },
            "NAD 1983 (2011) (US Feet)": {
                "9748": "NAD 1983 (2011) StatePlane Alabama East (US Feet)",
                "9749": "NAD 1983 (2011) StatePlane Alabama West (US Feet)",
                "102445": "NAD 1983 (2011) StatePlane Alaska  1 FIPS 5001 (US Feet)",
                "102446": "NAD 1983 (2011) StatePlane Alaska  2 FIPS 5002 (US Feet)",
                "102447": "NAD 1983 (2011) StatePlane Alaska  3 FIPS 5003 (US Feet)",
                "102392": "NAD 1983 (2011) StatePlane Alaska  4 FIPS 5004 (US Feet)",
                "102393": "NAD 1983 (2011) StatePlane Alaska  5 FIPS 5005 (US Feet)",
                "102394": "NAD 1983 (2011) StatePlane Alaska  6 FIPS 5006 (US Feet)",
                "102395": "NAD 1983 (2011) StatePlane Alaska  7 FIPS 5007 (US Feet)",
                "102396": "NAD 1983 (2011) StatePlane Alaska  8 FIPS 5008 (US Feet)",
                "102397": "NAD 1983 (2011) StatePlane Alaska  9 FIPS 5009 (US Feet)",
                "102398": "NAD 1983 (2011) StatePlane Alaska 10 FIPS 5010 (US Feet)",
                "6411": "NAD 1983 (2011) StatePlane Arkansas North FIPS 0301 (US Feet)",
                "6413": "NAD 1983 (2011) StatePlane Arkansas South FIPS 0302 (US Feet)",
                "6416": "NAD 1983 (2011) StatePlane California I FIPS 0401 (US Feet)",
                "6418": "NAD 1983 (2011) StatePlane California II FIPS 0402 (US Feet)",
                "6420": "NAD 1983 (2011) StatePlane California III FIPS 0403 (US Feet)",
                "6422": "NAD 1983 (2011) StatePlane California IV FIPS 0404 (US Feet)",
                "6424": "NAD 1983 (2011) StatePlane California V FIPS 0405 (US Feet)",
                "6426": "NAD 1983 (2011) StatePlane California VI FIPS 0406 (US Feet)",
                "6428": "NAD 1983 (2011) StatePlane Colorado Central FIPS 0502 (US Feet)",
                "6430": "NAD 1983 (2011) StatePlane Colorado North FIPS 0501 (US Feet)",
                "6432": "NAD 1983 (2011) StatePlane Colorado South FIPS 0503 (US Feet)",
                "6434": "NAD 1983 (2011) StatePlane Connecticut FIPS 0600 (US Feet)",
                "6436": "NAD 1983 (2011) StatePlane Delaware FIPS 0700 (US Feet)",
                "6438": "NAD 1983 (2011) StatePlane Florida East FIPS 0901 (US Feet)",
                "6441": "NAD 1983 (2011) StatePlane Florida North FIPS 0903 (US Feet)",
                "6443": "NAD 1983 (2011) StatePlane Florida West FIPS 0902 (US Feet)",
                "6445": "NAD 1983 (2011) StatePlane Georgia East FIPS 1001 (US Feet)",
                "6447": "NAD 1983 (2011) StatePlane Georgia West FIPS 1002 (US Feet)",
                "6449": "NAD 1983 (2011) StatePlane Idaho Central FIPS 1102 (US Feet)",
                "6451": "NAD 1983 (2011) StatePlane Idaho East FIPS 1101 (US Feet)",
                "6453": "NAD 1983 (2011) StatePlane Idaho West FIPS 1103 (US Feet)",
                "6455": "NAD 1983 (2011) StatePlane Illinois East FIPS 1201 (US Feet)",
                "6457": "NAD 1983 (2011) StatePlane Illinois West FIPS 1202 (US Feet)",
                "6459": "NAD 1983 (2011) StatePlane Indiana East FIPS 1301 (US Feet)",
                "6461": "NAD 1983 (2011) StatePlane Indiana West FIPS 1302 (US Feet)",
                "6463": "NAD 1983 (2011) StatePlane Iowa North FIPS 1401 (US Feet)",
                "6465": "NAD 1983 (2011) StatePlane Iowa South FIPS 1402 (US Feet)",
                "6467": "NAD 1983 (2011) StatePlane Kansas North FIPS 1501 (US Feet)",
                "6469": "NAD 1983 (2011) StatePlane Kansas South FIPS 1502 (US Feet)",
                "6473": "NAD 1983 (2011) StatePlane Kentucky FIPS 1600 (US Feet)",
                "6471": "NAD 1983 (2011) StatePlane Kentucky North FIPS 1601 (US Feet)",
                "6475": "NAD 1983 (2011) StatePlane Kentucky South FIPS 1602 (US Feet)",
                "6477": "NAD 1983 (2011) StatePlane Louisiana North FIPS 1701 (US Feet)",
                "6479": "NAD 1983 (2011) StatePlane Louisiana South FIPS 1702 (US Feet)",
                "6484": "NAD 1983 (2011) StatePlane Maine East FIPS 1801 (US Feet)",
                "6486": "NAD 1983 (2011) StatePlane Maine West FIPS 1802 (US Feet)",
                "6488": "NAD 1983 (2011) StatePlane Maryland FIPS 1900 (US Feet)",
                "6492": "NAD 1983 (2011) StatePlane Massachusetts FIPS 2001 (US Feet)",
                "6490": "NAD 1983 (2011) StatePlane Massachusetts Isl FIPS 2002 (US Feet)",
                "6501": "NAD 1983 (2011) StatePlane Minnesota Central FIPS 2202 (US Feet)",
                "6503": "NAD 1983 (2011) StatePlane Minnesota North FIPS 2201 (US Feet)",
                "6505": "NAD 1983 (2011) StatePlane Minnesota South FIPS 2203 (US Feet)",
                "6507": "NAD 1983 (2011) StatePlane Mississippi East FIPS 2301 (US Feet)",
                "6510": "NAD 1983 (2011) StatePlane Mississippi West FIPS 2302 (US Feet)",
                "6880": "NAD 1983 (2011) StatePlane Nebraska FIPS 2600 (US Feet)",
                "6519": "NAD 1983 (2011) StatePlane Nevada Central FIPS 2702 (US Feet)",
                "6521": "NAD 1983 (2011) StatePlane Nevada East FIPS 2701 (US Feet)",
                "6523": "NAD 1983 (2011) StatePlane Nevada West FIPS 2703 (US Feet)",
                "6525": "NAD 1983 (2011) StatePlane New Hampshire FIPS 2800 (US Feet)",
                "6527": "NAD 1983 (2011) StatePlane New Jersey FIPS 2900 (US Feet)",
                "6529": "NAD 1983 (2011) StatePlane New Mexico Central FIPS3002 (US Feet)",
                "6531": "NAD 1983 (2011) StatePlane New Mexico East FIPS 3001 (US Feet)",
                "6533": "NAD 1983 (2011) StatePlane New Mexico West FIPS 3003 (US Feet)",
                "6535": "NAD 1983 (2011) StatePlane New York Central FIPS 3102 (US Feet)",
                "6537": "NAD 1983 (2011) StatePlane New York East FIPS 3101 (US Feet)",
                "6539": "NAD 1983 (2011) StatePlane New York Long Isl FIPS 3104 (US Feet)",
                "6541": "NAD 1983 (2011) StatePlane New York West FIPS 3103 (US Feet)",
                "6543": "NAD 1983 (2011) StatePlane North Carolina FIPS 3200 (US Feet)",
                "6549": "NAD 1983 (2011) StatePlane Ohio North FIPS 3401 (US Feet)",
                "6551": "NAD 1983 (2011) StatePlane Ohio South FIPS 3402 (US Feet)",
                "6553": "NAD 1983 (2011) StatePlane Oklahoma North FIPS 3501 (US Feet)",
                "6555": "NAD 1983 (2011) StatePlane Oklahoma South FIPS 3502 (US Feet)",
                "6563": "NAD 1983 (2011) StatePlane Pennsylvania North FIPS3701 (US Feet)",
                "6565": "NAD 1983 (2011) StatePlane Pennsylvania South FIPS3702 (US Feet)",
                "6568": "NAD 1983 (2011) StatePlane Rhode Island FIPS 3800 (US Feet)",
                "6572": "NAD 1983 (2011) StatePlane South Dakota N FIPS 4001 (US Feet)",
                "6574": "NAD 1983 (2011) StatePlane South Dakota S FIPS 4002 (US Feet)",
                "6576": "NAD 1983 (2011) StatePlane Tennessee FIPS 4100 (US Feet)",
                "6578": "NAD 1983 (2011) StatePlane Texas Central FIPS 4203 (US Feet)",
                "6584": "NAD 1983 (2011) StatePlane Texas N Central FIPS 4202 (US Feet)",
                "6582": "NAD 1983 (2011) StatePlane Texas North FIPS 4201 (US Feet)",
                "6588": "NAD 1983 (2011) StatePlane Texas S Central FIPS 4204 (US Feet)",
                "6586": "NAD 1983 (2011) StatePlane Texas South FIPS 4205 (US Feet)",
                "6625": "NAD 1983 (2011) StatePlane Utah Central FIPS 4302 (US Feet)",
                "6626": "NAD 1983 (2011) StatePlane Utah North FIPS 4301 (US Feet)",
                "6627": "NAD 1983 (2011) StatePlane Utah South FIPS 4303 (US Feet)",
                "6590": "NAD 1983 (2011) StatePlane Vermont FIPS 4400 (US Feet)",
                "6593": "NAD 1983 (2011) StatePlane Virginia North FIPS 4501 (US Feet)",
                "6595": "NAD 1983 (2011) StatePlane Virginia South FIPS 4502 (US Feet)",
                "6597": "NAD 1983 (2011) StatePlane Washington North FIPS 4601 (US Feet)",
                "6599": "NAD 1983 (2011) StatePlane Washington South FIPS 4602 (US Feet)",
                "6601": "NAD 1983 (2011) StatePlane West Virginia N FIPS 4701 (US Feet)",
                "6603": "NAD 1983 (2011) StatePlane West Virginia S FIPS 4702 (US Feet)",
                "6605": "NAD 1983 (2011) StatePlane Wisconsin Central FIPS 4802 (US Feet)",
                "6607": "NAD 1983 (2011) StatePlane Wisconsin North FIPS 4801 (US Feet)",
                "6609": "NAD 1983 (2011) StatePlane Wisconsin South FIPS 4803 (US Feet)",
                "6614": "NAD 1983 (2011) StatePlane Wyoming E Central FIPS 4902 (US Feet)",
                "6612": "NAD 1983 (2011) StatePlane Wyoming East FIPS 4901 (US Feet)",
                "6618": "NAD 1983 (2011) StatePlane Wyoming W Central FIPS 4903 (US Feet)",
                "6616": "NAD 1983 (2011) StatePlane Wyoming West FIPS 4904 (US Feet)"
            },
            "NAD 1983 (CORS96) (Intl Feet)": {
                "103226": "NAD 1983 (CORS96) StatePlane Arizona Central FIPS 0202 (Intl Feet)",
                "103225": "NAD 1983 (CORS96) StatePlane Arizona East FIPS 0201 (Intl Feet)",
                "103227": "NAD 1983 (CORS96) StatePlane Arizona West FIPS 0203 (Intl Feet)",
                "103385": "NAD 1983 (CORS96) StatePlane Michigan Central FIPS 2112 (Intl Feet)",
                "103384": "NAD 1983 (CORS96) StatePlane Michigan North FIPS 2111 (Intl Feet)",
                "103386": "NAD 1983 (CORS96) StatePlane Michigan South FIPS 2113 (Intl Feet)",
                "103473": "NAD 1983 (CORS96) StatePlane Montana FIPS 2500 (Intl Feet)",
                "103504": "NAD 1983 (CORS96) StatePlane North Dakota N FIPS 3301 (Intl Feet)",
                "103505": "NAD 1983 (CORS96) StatePlane North Dakota S FIPS 3302 (Intl Feet)",
                "6885": "NAD 1983 (CORS96) StatePlane Oregon North FIPS 3601 (Intl Feet)",
                "6887": "NAD 1983 (CORS96) StatePlane Oregon South FIPS 3602 (Intl Feet)",
                "103521": "NAD 1983 (CORS96) StatePlane South Carolina FIPS 3900 (Intl Feet)",
                "103553": "NAD 1983 (CORS96) StatePlane Utah Central FIPS 4302 (Intl Feet)",
                "103552": "NAD 1983 (CORS96) StatePlane Utah North FIPS 4301 (Intl Feet)",
                "103554": "NAD 1983 (CORS96) StatePlane Utah South FIPS 4303 (Intl Feet)"
            },
            "NAD 1983 (CORS96) (Meters)": {
                "103373": "NAD 1983 (CORS96) Maine 2000 Central Zone (Meters)",
                "103372": "NAD 1983 (CORS96) Maine 2000 East Zone (Meters)",
                "103374": "NAD 1983 (CORS96) Maine 2000 West Zone (Meters)",
                "103220": "NAD 1983 (CORS96) StatePlane Alabama East FIPS 0101 (Meters)",
                "103221": "NAD 1983 (CORS96) StatePlane Alabama West FIPS 0102 (Meters)",
                "102366": "NAD 1983 (CORS96) StatePlane Alaska  1 FIPS 5001 (Meters)",
                "102367": "NAD 1983 (CORS96) StatePlane Alaska  2 FIPS 5002 (Meters)",
                "102368": "NAD 1983 (CORS96) StatePlane Alaska  3 FIPS 5003 (Meters)",
                "102369": "NAD 1983 (CORS96) StatePlane Alaska  4 FIPS 5004 (Meters)",
                "102370": "NAD 1983 (CORS96) StatePlane Alaska  5 FIPS 5005 (Meters)",
                "102371": "NAD 1983 (CORS96) StatePlane Alaska  6 FIPS 5006 (Meters)",
                "102372": "NAD 1983 (CORS96) StatePlane Alaska  7 FIPS 5007 (Meters)",
                "102373": "NAD 1983 (CORS96) StatePlane Alaska  8 FIPS 5008 (Meters)",
                "102374": "NAD 1983 (CORS96) StatePlane Alaska  9 FIPS 5009 (Meters)",
                "102375": "NAD 1983 (CORS96) StatePlane Alaska 10 FIPS 5010 (Meters)",
                "103223": "NAD 1983 (CORS96) StatePlane Arizona Central FIPS 0202 (Meters)",
                "103222": "NAD 1983 (CORS96) StatePlane Arizona East FIPS 0201 (Meters)",
                "103224": "NAD 1983 (CORS96) StatePlane Arizona West FIPS 0203 (Meters)",
                "103228": "NAD 1983 (CORS96) StatePlane Arkansas North FIPS 0301 (Meters)",
                "103229": "NAD 1983 (CORS96) StatePlane Arkansas South FIPS 0302 (Meters)",
                "103232": "NAD 1983 (CORS96) StatePlane California I FIPS 0401 (Meters)",
                "103233": "NAD 1983 (CORS96) StatePlane California II FIPS 0402 (Meters)",
                "103234": "NAD 1983 (CORS96) StatePlane California III FIPS 0403 (Meters)",
                "103235": "NAD 1983 (CORS96) StatePlane California IV FIPS 0404 (Meters)",
                "103236": "NAD 1983 (CORS96) StatePlane California V FIPS 0405 (Meters)",
                "103237": "NAD 1983 (CORS96) StatePlane California VI FIPS 0406 (Meters)",
                "103245": "NAD 1983 (CORS96) StatePlane Colorado Central FIPS 0502 (Meter)",
                "103244": "NAD 1983 (CORS96) StatePlane Colorado North FIPS 0501 (Meters)",
                "103246": "NAD 1983 (CORS96) StatePlane Colorado South FIPS 0503 (Meters)",
                "103250": "NAD 1983 (CORS96) StatePlane Connecticut FIPS 0600 (Meters)",
                "103252": "NAD 1983 (CORS96) StatePlane Delaware FIPS 0700 (Meters)",
                "103254": "NAD 1983 (CORS96) StatePlane Florida East FIPS 0901 (Meters)",
                "103256": "NAD 1983 (CORS96) StatePlane Florida North FIPS 0903 (Meters)",
                "103255": "NAD 1983 (CORS96) StatePlane Florida West FIPS 0902 (Meters)",
                "103260": "NAD 1983 (CORS96) StatePlane Georgia East FIPS 1001 (Meters)",
                "103261": "NAD 1983 (CORS96) StatePlane Georgia West FIPS 1002 (Meters)",
                "103265": "NAD 1983 (CORS96) StatePlane Idaho Central FIPS 1102 (Meters)",
                "103264": "NAD 1983 (CORS96) StatePlane Idaho East FIPS 1101 (Meters)",
                "103266": "NAD 1983 (CORS96) StatePlane Idaho West FIPS 1103 (Meters)",
                "103270": "NAD 1983 (CORS96) StatePlane Illinois East FIPS 1201 (Meters)",
                "103271": "NAD 1983 (CORS96) StatePlane Illinois West FIPS 1202 (Meters)",
                "103274": "NAD 1983 (CORS96) StatePlane Indiana East FIPS 1301 (Meters)",
                "103275": "NAD 1983 (CORS96) StatePlane Indiana West FIPS 1302 (Meters)",
                "103278": "NAD 1983 (CORS96) StatePlane Iowa North FIPS 1401 (Meters)",
                "103279": "NAD 1983 (CORS96) StatePlane Iowa South FIPS 1402 (Meters)",
                "103282": "NAD 1983 (CORS96) StatePlane Kansas North FIPS 1501 (Meters)",
                "103283": "NAD 1983 (CORS96) StatePlane Kansas South FIPS 1502 (Meters)",
                "103288": "NAD 1983 (CORS96) StatePlane Kentucky FIPS 1600 (Meters)",
                "103286": "NAD 1983 (CORS96) StatePlane Kentucky North FIPS 1601 (Meters)",
                "103290": "NAD 1983 (CORS96) StatePlane Kentucky South FIPS 1602 (Meters)",
                "103292": "NAD 1983 (CORS96) StatePlane Louisiana North FIPS 1701 (Meters)",
                "103293": "NAD 1983 (CORS96) StatePlane Louisiana South FIPS 1702 (Meters)",
                "103296": "NAD 1983 (CORS96) StatePlane Maine East FIPS 1801 (Meters)",
                "103297": "NAD 1983 (CORS96) StatePlane Maine West FIPS 1802 (Meters)",
                "103375": "NAD 1983 (CORS96) StatePlane Maryland FIPS 1900 (Meters)",
                "103377": "NAD 1983 (CORS96) StatePlane Massachusetts FIPS 2001 (Meters)",
                "103378": "NAD 1983 (CORS96) StatePlane Massachusetts Isl FIPS 2002 (Meters)",
                "103382": "NAD 1983 (CORS96) StatePlane Michigan Central FIPS 2112 (Meters)",
                "103381": "NAD 1983 (CORS96) StatePlane Michigan North FIPS 2111 (Meters)",
                "103383": "NAD 1983 (CORS96) StatePlane Michigan South FIPS 2113 (Meters)",
                "103388": "NAD 1983 (CORS96) StatePlane Minnesota Central FIPS 2202 (Meters)",
                "103387": "NAD 1983 (CORS96) StatePlane Minnesota North FIPS 2201 (Meters)",
                "103389": "NAD 1983 (CORS96) StatePlane Minnesota South FIPS 2203 (Meters)",
                "103393": "NAD 1983 (CORS96) StatePlane Mississippi East FIPS 2301 (Meters)",
                "103394": "NAD 1983 (CORS96) StatePlane Mississippi West FIPS 2302 (Meters)",
                "103398": "NAD 1983 (CORS96) StatePlane Missouri Central FIPS 2402 (Meters)",
                "103397": "NAD 1983 (CORS96) StatePlane Missouri East FIPS 2401 (Meters)",
                "103399": "NAD 1983 (CORS96) StatePlane Missouri West FIPS 2403 (Meters)",
                "103472": "NAD 1983 (CORS96) StatePlane Montana FIPS 2500 (Meters)",
                "103474": "NAD 1983 (CORS96) StatePlane Nebraska FIPS 2600 (Meters)",
                "103477": "NAD 1983 (CORS96) StatePlane Nevada Central FIPS 2702 (Meters)",
                "103476": "NAD 1983 (CORS96) StatePlane Nevada East FIPS 2701 (Meters)",
                "103478": "NAD 1983 (CORS96) StatePlane Nevada West FIPS 2703 (Meters)",
                "103482": "NAD 1983 (CORS96) StatePlane New Hampshire FIPS 2800 (Meters)",
                "103484": "NAD 1983 (CORS96) StatePlane New Jersey FIPS 2900 (Meters)",
                "103487": "NAD 1983 (CORS96) StatePlane New Mexico Central FIPS 3002 (Meters)",
                "103486": "NAD 1983 (CORS96) StatePlane New Mexico East FIPS 3001 (Meters)",
                "103488": "NAD 1983 (CORS96) StatePlane New Mexico West FIPS 3003 (Meters)",
                "103493": "NAD 1983 (CORS96) StatePlane New York Central FIPS 3102 (Meters)",
                "103492": "NAD 1983 (CORS96) StatePlane New York East FIPS 3101 (Meters)",
                "103495": "NAD 1983 (CORS96) StatePlane New York Long Isl FIPS 3104 (Meters)",
                "103494": "NAD 1983 (CORS96) StatePlane New York West FIPS 3103 (Meters)",
                "103500": "NAD 1983 (CORS96) StatePlane North Carolina FIPS 3200 (Meters)",
                "103502": "NAD 1983 (CORS96) StatePlane North Dakota N FIPS 3301 (Meters)",
                "103503": "NAD 1983 (CORS96) StatePlane North Dakota S FIPS 3302 (Meters)",
                "103506": "NAD 1983 (CORS96) StatePlane Ohio North FIPS 3401 (Meters)",
                "103507": "NAD 1983 (CORS96) StatePlane Ohio South FIPS 3402 (Meters)",
                "103510": "NAD 1983 (CORS96) StatePlane Oklahoma North FIPS 3501 (Meters)",
                "103511": "NAD 1983 (CORS96) StatePlane Oklahoma South FIPS 3502 (Meters)",
                "6884": "NAD 1983 (CORS96) StatePlane Oregon North FIPS 3601 (Meters)",
                "6886": "NAD 1983 (CORS96) StatePlane Oregon South FIPS 3602 (Meters)",
                "103514": "NAD 1983 (CORS96) StatePlane Pennsylvania North FIPS 3701 (Meters)",
                "103516": "NAD 1983 (CORS96) StatePlane Pennsylvania South FIPS 3702 (Meters)",
                "6307": "NAD 1983 (CORS96) StatePlane Puerto Rico and Virgin Islands (Meters)",
                "103518": "NAD 1983 (CORS96) StatePlane Rhode Island FIPS 3800 (Meters)",
                "103520": "NAD 1983 (CORS96) StatePlane South Carolina FIPS 3900 (Meters)",
                "103522": "NAD 1983 (CORS96) StatePlane South Dakota N FIPS 4001 (Meters)",
                "103523": "NAD 1983 (CORS96) StatePlane South Dakota S FIPS 4002 (Meters)",
                "103526": "NAD 1983 (CORS96) StatePlane Tennessee FIPS 4100 (Meters)",
                "103541": "NAD 1983 (CORS96) StatePlane Texas Central FIPS 4203 (Meters)",
                "103540": "NAD 1983 (CORS96) StatePlane Texas N Central FIPS 4202 (Meters)",
                "103539": "NAD 1983 (CORS96) StatePlane Texas North FIPS 4201 (Meters)",
                "103542": "NAD 1983 (CORS96) StatePlane Texas S Central FIPS 4204 (Meters)",
                "103543": "NAD 1983 (CORS96) StatePlane Texas South FIPS 4205 (Meters)",
                "103550": "NAD 1983 (CORS96) StatePlane Utah Central FIPS 4302 (Meters)",
                "103549": "NAD 1983 (CORS96) StatePlane Utah North FIPS 4301 (Meters)",
                "103551": "NAD 1983 (CORS96) StatePlane Utah South FIPS 4303 (Meters)",
                "103558": "NAD 1983 (CORS96) StatePlane Vermont FIPS 4400 (Meters)",
                "103559": "NAD 1983 (CORS96) StatePlane Virginia North FIPS 4501 (Meters)",
                "103560": "NAD 1983 (CORS96) StatePlane Virginia South FIPS 4502 (Meters)",
                "103563": "NAD 1983 (CORS96) StatePlane Washington North FIPS 4601 (Meters)",
                "103564": "NAD 1983 (CORS96) StatePlane Washington South FIPS 4602 (Meters)",
                "103567": "NAD 1983 (CORS96) StatePlane West Virginia N FIPS 4701 (Meters)",
                "103568": "NAD 1983 (CORS96) StatePlane West Virginia S FIPS 4702 (Meters)",
                "103572": "NAD 1983 (CORS96) StatePlane Wisconsin Central FIPS 4802 (Meters)",
                "103571": "NAD 1983 (CORS96) StatePlane Wisconsin North FIPS 4801 (Meters)",
                "103573": "NAD 1983 (CORS96) StatePlane Wisconsin South FIPS 4803 (Meters)",
                "103578": "NAD 1983 (CORS96) StatePlane Wyoming E Central FIPS 4902 (Meters)",
                "103577": "NAD 1983 (CORS96) StatePlane Wyoming East FIPS 4901 (Meters)",
                "103579": "NAD 1983 (CORS96) StatePlane Wyoming W Central FIPS 4903 (Meters)",
                "103580": "NAD 1983 (CORS96) StatePlane Wyoming West FIPS 4904 (Meters)"
            },
            "NAD 1983 (CORS96) (US Feet)": {
                "103230": "NAD 1983 (CORS96) StatePlane Arkansas North FIPS 0301 (US Feet)",
                "103231": "NAD 1983 (CORS96) StatePlane Arkansas South FIPS 0302 (US Feet)",
                "103238": "NAD 1983 (CORS96) StatePlane California I FIPS 0401 (US Feet)",
                "103239": "NAD 1983 (CORS96) StatePlane California II FIPS 0402 (US Feet)",
                "103240": "NAD 1983 (CORS96) StatePlane California III FIPS 0403 (US Feet)",
                "103241": "NAD 1983 (CORS96) StatePlane California IV FIPS 0404 (US Feet)",
                "103242": "NAD 1983 (CORS96) StatePlane California V FIPS 0405 (US Feet)",
                "103243": "NAD 1983 (CORS96) StatePlane California VI FIPS 0406 (US Feet)",
                "103248": "NAD 1983 (CORS96) StatePlane Colorado Central FIPS 0502 (US Feet)",
                "103247": "NAD 1983 (CORS96) StatePlane Colorado North FIPS 0501 (US Feet)",
                "103249": "NAD 1983 (CORS96) StatePlane Colorado South FIPS 0503 (US Feet)",
                "103251": "NAD 1983 (CORS96) StatePlane Connecticut FIPS 0600 (US Feet)",
                "103253": "NAD 1983 (CORS96) StatePlane Delaware FIPS 0700 (US Feet)",
                "103257": "NAD 1983 (CORS96) StatePlane Florida East FIPS 0901 (US Feet)",
                "103259": "NAD 1983 (CORS96) StatePlane Florida North FIPS 0903 (US Feet)",
                "103258": "NAD 1983 (CORS96) StatePlane Florida West FIPS 0902 (US Feet)",
                "103262": "NAD 1983 (CORS96) StatePlane Georgia East FIPS 1001 (US Feet)",
                "103263": "NAD 1983 (CORS96) StatePlane Georgia West FIPS 1002 (US Feet)",
                "103268": "NAD 1983 (CORS96) StatePlane Idaho Central FIPS 1102 (US Feet)",
                "103267": "NAD 1983 (CORS96) StatePlane Idaho East FIPS 1101 (US Feet)",
                "103269": "NAD 1983 (CORS96) StatePlane Idaho West FIPS 1103 (US Feet)",
                "103272": "NAD 1983 (CORS96) StatePlane Illinois East FIPS 1201 (US Feet)",
                "103273": "NAD 1983 (CORS96) StatePlane Illinois West FIPS 1202 (US Feet)",
                "103276": "NAD 1983 (CORS96) StatePlane Indiana East FIPS 1301 (US Feet)",
                "103277": "NAD 1983 (CORS96) StatePlane Indiana West FIPS 1302 (US Feet)",
                "103280": "NAD 1983 (CORS96) StatePlane Iowa North FIPS 1401 (US Feet)",
                "103281": "NAD 1983 (CORS96) StatePlane Iowa South FIPS 1402 (US Feet)",
                "103284": "NAD 1983 (CORS96) StatePlane Kansas North FIPS 1501 (US Feet)",
                "103285": "NAD 1983 (CORS96) StatePlane Kansas South FIPS 1502 (US Feet)",
                "103289": "NAD 1983 (CORS96) StatePlane Kentucky FIPS 1600 (US Feet)",
                "103287": "NAD 1983 (CORS96) StatePlane Kentucky North FIPS 1601 (US Feet)",
                "103291": "NAD 1983 (CORS96) StatePlane Kentucky South FIPS 1602 (US Feet)",
                "103294": "NAD 1983 (CORS96) StatePlane Louisiana North FIPS 1701 (US Feet)",
                "103295": "NAD 1983 (CORS96) StatePlane Louisiana South FIPS 1702 (US Feet)",
                "103298": "NAD 1983 (CORS96) StatePlane Maine East FIPS 1801 (US Feet)",
                "103299": "NAD 1983 (CORS96) StatePlane Maine West FIPS 1802 (US Feet)",
                "103376": "NAD 1983 (CORS96) StatePlane Maryland FIPS 1900 (US Feet)",
                "103379": "NAD 1983 (CORS96) StatePlane Massachusetts FIPS 2001 (US Feet)",
                "103380": "NAD 1983 (CORS96) StatePlane Massachusetts Isl FIPS 2002 (US Feet)",
                "103391": "NAD 1983 (CORS96) StatePlane Minnesota Central FIPS 2202 (US Feet)",
                "103390": "NAD 1983 (CORS96) StatePlane Minnesota North FIPS 2201 (US Feet)",
                "103392": "NAD 1983 (CORS96) StatePlane Minnesota South FIPS 2203 (US Feet)",
                "103395": "NAD 1983 (CORS96) StatePlane Mississippi East FIPS 2301 (US Feet)",
                "103396": "NAD 1983 (CORS96) StatePlane Mississippi West FIPS 2302 (US Feet)",
                "103475": "NAD 1983 (CORS96) StatePlane Nebraska FIPS 2600 (US Feet)",
                "103480": "NAD 1983 (CORS96) StatePlane Nevada Central FIPS 2702 (US Feet)",
                "103479": "NAD 1983 (CORS96) StatePlane Nevada East FIPS 2701 (US Feet)",
                "103481": "NAD 1983 (CORS96) StatePlane Nevada West FIPS 2703 (US Feet)",
                "103483": "NAD 1983 (CORS96) StatePlane New Hampshire FIPS 2800 (US Feet)",
                "103485": "NAD 1983 (CORS96) StatePlane New Jersey FIPS 2900 (US Feet)",
                "103490": "NAD 1983 (CORS96) StatePlane New Mexico Central FIPS3002 (US Feet)",
                "103489": "NAD 1983 (CORS96) StatePlane New Mexico East FIPS 3001 (US Feet)",
                "103491": "NAD 1983 (CORS96) StatePlane New Mexico West FIPS 3003 (US Feet)",
                "103497": "NAD 1983 (CORS96) StatePlane New York Central FIPS 3102 (US Feet)",
                "103496": "NAD 1983 (CORS96) StatePlane New York East FIPS 3101 (US Feet)",
                "103499": "NAD 1983 (CORS96) StatePlane New York Long Isl FIPS 3104 (US Feet)",
                "103498": "NAD 1983 (CORS96) StatePlane New York West FIPS 3103 (US Feet)",
                "103501": "NAD 1983 (CORS96) StatePlane North Carolina FIPS 3200 (US Feet)",
                "103508": "NAD 1983 (CORS96) StatePlane Ohio North FIPS 3401 (US Feet)",
                "103509": "NAD 1983 (CORS96) StatePlane Ohio South FIPS 3402 (US Feet)",
                "103512": "NAD 1983 (CORS96) StatePlane Oklahoma North FIPS 3501 (US Feet)",
                "103513": "NAD 1983 (CORS96) StatePlane Oklahoma South FIPS 3502 (US Feet)",
                "103515": "NAD 1983 (CORS96) StatePlane Pennsylvania North FIPS3701 (US Feet)",
                "103517": "NAD 1983 (CORS96) StatePlane Pennsylvania South FIPS3702 (US Feet)",
                "103519": "NAD 1983 (CORS96) StatePlane Rhode Island FIPS 3800 (US Feet)",
                "103524": "NAD 1983 (CORS96) StatePlane South Dakota N FIPS 4001 (US Feet)",
                "103525": "NAD 1983 (CORS96) StatePlane South Dakota S FIPS 4002 (US Feet)",
                "103527": "NAD 1983 (CORS96) StatePlane Tennessee FIPS 4100 (US Feet)",
                "103546": "NAD 1983 (CORS96) StatePlane Texas Central FIPS 4203 (US Feet)",
                "103545": "NAD 1983 (CORS96) StatePlane Texas N Central FIPS 4202 (US Feet)",
                "103544": "NAD 1983 (CORS96) StatePlane Texas North FIPS 4201 (US Feet)",
                "103547": "NAD 1983 (CORS96) StatePlane Texas S Central FIPS 4204 (US Feet)",
                "103548": "NAD 1983 (CORS96) StatePlane Texas South FIPS 4205 (US Feet)",
                "103556": "NAD 1983 (CORS96) StatePlane Utah Central FIPS 4302 (US Feet)",
                "103555": "NAD 1983 (CORS96) StatePlane Utah North FIPS 4301 (US Feet)",
                "103557": "NAD 1983 (CORS96) StatePlane Utah South FIPS 4303 (US Feet)",
                "103561": "NAD 1983 (CORS96) StatePlane Virginia North FIPS 4501 (US Feet)",
                "103562": "NAD 1983 (CORS96) StatePlane Virginia South FIPS 4502 (US Feet)",
                "103565": "NAD 1983 (CORS96) StatePlane Washington North FIPS 4601 (US Feet)",
                "103566": "NAD 1983 (CORS96) StatePlane Washington South FIPS 4602 (US Feet)",
                "103569": "NAD 1983 (CORS96) StatePlane West Virginia N FIPS 4701 (US Feet)",
                "103570": "NAD 1983 (CORS96) StatePlane West Virginia S FIPS 4702 (US Feet)",
                "103575": "NAD 1983 (CORS96) StatePlane Wisconsin Central FIPS 4802 (US Feet)",
                "103574": "NAD 1983 (CORS96) StatePlane Wisconsin North FIPS 4801 (US Feet)",
                "103576": "NAD 1983 (CORS96) StatePlane Wisconsin South FIPS 4803 (US Feet)",
                "103582": "NAD 1983 (CORS96) StatePlane Wyoming E Central FIPS 4902 (US Feet)",
                "103581": "NAD 1983 (CORS96) StatePlane Wyoming East FIPS 4901 (US Feet)",
                "103583": "NAD 1983 (CORS96) StatePlane Wyoming W Central FIPS 4903 (US Feet)",
                "103585": "NAD 1983 (CORS96) StatePlane Wyoming West FIPS 4904 (US Feet)"
            },
            "NAD 1983 (Intl Feet)": {
                "2223": "NAD 1983 StatePlane Arizona Central FIPS 0202 (Intl Feet)",
                "2222": "NAD 1983 StatePlane Arizona East FIPS 0201 (Intl Feet)",
                "2224": "NAD 1983 StatePlane Arizona West FIPS 0203 (Intl Feet)",
                "2252": "NAD 1983 StatePlane Michigan Central FIPS 2112 (Intl Feet)",
                "2251": "NAD 1983 StatePlane Michigan North FIPS 2111 (Intl Feet)",
                "2253": "NAD 1983 StatePlane Michigan South FIPS 2113 (Intl Feet)",
                "2256": "NAD 1983 StatePlane Montana FIPS 2500 (Intl Feet)",
                "2265": "NAD 1983 StatePlane North Dakota N FIPS 3301 (Intl Feet)",
                "2266": "NAD 1983 StatePlane North Dakota S FIPS 3302 (Intl Feet)",
                "2269": "NAD 1983 StatePlane Oregon North FIPS 3601 (Intl Feet)",
                "2270": "NAD 1983 StatePlane Oregon South FIPS 3602 (Intl Feet)",
                "2273": "NAD 1983 StatePlane South Carolina FIPS 3900 (Intl Feet)",
                "2281": "NAD 1983 StatePlane Utah Central FIPS 4302 (Intl Feet)",
                "2280": "NAD 1983 StatePlane Utah North FIPS 4301 (Intl Feet)",
                "2282": "NAD 1983 StatePlane Utah South FIPS 4303 (Intl Feet)"
            },
            "NAD 1983 (Meters)": {
                "3463": "NAD 1983 Maine 2000 Central Zone (Meters)",
                "3072": "NAD 1983 Maine 2000 East Zone (Meters)",
                "3074": "NAD 1983 Maine 2000 West Zone (Meters)",
                "26929": "NAD 1983 StatePlane Alabama East FIPS 0101 (Meters)",
                "26930": "NAD 1983 StatePlane Alabama West FIPS 0102 (Meters)",
                "26931": "NAD 1983 StatePlane Alaska  1 FIPS 5001 (Meters)",
                "26932": "NAD 1983 StatePlane Alaska  2 FIPS 5002 (Meters)",
                "26933": "NAD 1983 StatePlane Alaska  3 FIPS 5003 (Meters)",
                "26934": "NAD 1983 StatePlane Alaska  4 FIPS 5004 (Meters)",
                "26935": "NAD 1983 StatePlane Alaska  5 FIPS 5005 (Meters)",
                "26936": "NAD 1983 StatePlane Alaska  6 FIPS 5006 (Meters)",
                "26937": "NAD 1983 StatePlane Alaska  7 FIPS 5007 (Meters)",
                "26938": "NAD 1983 StatePlane Alaska  8 FIPS 5008 (Meters)",
                "26939": "NAD 1983 StatePlane Alaska  9 FIPS 5009 (Meters)",
                "26940": "NAD 1983 StatePlane Alaska 10 FIPS 5010 (Meters)",
                "26949": "NAD 1983 StatePlane Arizona Central FIPS 0202 (Meters)",
                "26948": "NAD 1983 StatePlane Arizona East FIPS 0201 (Meters)",
                "26950": "NAD 1983 StatePlane Arizona West FIPS 0203 (Meters)",
                "26951": "NAD 1983 StatePlane Arkansas North FIPS 0301 (Meters)",
                "26952": "NAD 1983 StatePlane Arkansas South FIPS 0302 (Meters)",
                "26941": "NAD 1983 StatePlane California I FIPS 0401 (Meters)",
                "26942": "NAD 1983 StatePlane California II FIPS 0402 (Meters)",
                "26943": "NAD 1983 StatePlane California III FIPS 0403 (Meters)",
                "26944": "NAD 1983 StatePlane California IV FIPS 0404 (Meters)",
                "26945": "NAD 1983 StatePlane California V FIPS 0405 (Meters)",
                "26946": "NAD 1983 StatePlane California VI FIPS 0406 (Meters)",
                "26954": "NAD 1983 StatePlane Colorado Central FIPS 0502 (Meters)",
                "26953": "NAD 1983 StatePlane Colorado North FIPS 0501 (Meters)",
                "26955": "NAD 1983 StatePlane Colorado South FIPS 0503 (Meters)",
                "26956": "NAD 1983 StatePlane Connecticut FIPS 0600 (Meters)",
                "26957": "NAD 1983 StatePlane Delaware FIPS 0700 (Meters)",
                "26958": "NAD 1983 StatePlane Florida East FIPS 0901 (Meters)",
                "26960": "NAD 1983 StatePlane Florida North FIPS 0903 (Meters)",
                "26959": "NAD 1983 StatePlane Florida West FIPS 0902 (Meters)",
                "26966": "NAD 1983 StatePlane Georgia East FIPS 1001 (Meters)",
                "26967": "NAD 1983 StatePlane Georgia West FIPS 1002 (Meters)",
                "65161": "NAD 1983 StatePlane Guam FIPS 5400 (Meters)",
                "26961": "NAD 1983 StatePlane Hawaii 1 FIPS 5101 (Meters)",
                "26962": "NAD 1983 StatePlane Hawaii 2 FIPS 5102 (Meters)",
                "26963": "NAD 1983 StatePlane Hawaii 3 FIPS 5103 (Meters)",
                "26964": "NAD 1983 StatePlane Hawaii 4 FIPS 5104 (Meters)",
                "26965": "NAD 1983 StatePlane Hawaii 5 FIPS 5105 (Meters)",
                "26969": "NAD 1983 StatePlane Idaho Central FIPS 1102 (Meters)",
                "26968": "NAD 1983 StatePlane Idaho East FIPS 1101 (Meters)",
                "26970": "NAD 1983 StatePlane Idaho West FIPS 1103 (Meters)",
                "26971": "NAD 1983 StatePlane Illinois East FIPS 1201 (Meters)",
                "26972": "NAD 1983 StatePlane Illinois West FIPS 1202 (Meters)",
                "26973": "NAD 1983 StatePlane Indiana East FIPS 1301 (Meters)",
                "26974": "NAD 1983 StatePlane Indiana West FIPS 1302 (Meters)",
                "26975": "NAD 1983 StatePlane Iowa North FIPS 1401 (Meters)",
                "26976": "NAD 1983 StatePlane Iowa South FIPS 1402 (Meters)",
                "26977": "NAD 1983 StatePlane Kansas North FIPS 1501 (Meters)",
                "26978": "NAD 1983 StatePlane Kansas South FIPS 1502 (Meters)",
                "3088": "NAD 1983 StatePlane Kentucky FIPS 1600 (Meters)",
                "2205": "NAD 1983 StatePlane Kentucky North FIPS 1601 (Meters)",
                "26980": "NAD 1983 StatePlane Kentucky South FIPS 1602 (Meters)",
                "26981": "NAD 1983 StatePlane Louisiana North FIPS 1701 (Meters)",
                "32199": "NAD 1983 StatePlane Louisiana Offshore FIPS 1703 (Meters)",
                "26982": "NAD 1983 StatePlane Louisiana South FIPS 1702 (Meters)",
                "26983": "NAD 1983 StatePlane Maine East FIPS 1801 (Meters)",
                "26984": "NAD 1983 StatePlane Maine West FIPS 1802 (Meters)",
                "26985": "NAD 1983 StatePlane Maryland FIPS 1900 (Meters)",
                "26986": "NAD 1983 StatePlane Massachusetts FIPS 2001 (Meters)",
                "26987": "NAD 1983 StatePlane Massachusetts Isl FIPS 2002 (Meters)",
                "26989": "NAD 1983 StatePlane Michigan Central FIPS 2112 (Meters)",
                "26988": "NAD 1983 StatePlane Michigan North FIPS 2111 (Meters)",
                "26990": "NAD 1983 StatePlane Michigan South FIPS 2113 (Meters)",
                "26992": "NAD 1983 StatePlane Minnesota Central FIPS 2202 (Meters)",
                "26991": "NAD 1983 StatePlane Minnesota North FIPS 2201 (Meters)",
                "26993": "NAD 1983 StatePlane Minnesota South FIPS 2203 (Meters)",
                "26994": "NAD 1983 StatePlane Mississippi East FIPS 2301 (Meters)",
                "26995": "NAD 1983 StatePlane Mississippi West FIPS 2302 (Meters)",
                "26997": "NAD 1983 StatePlane Missouri Central FIPS 2402 (Meters)",
                "26996": "NAD 1983 StatePlane Missouri East FIPS 2401 (Meters)",
                "26998": "NAD 1983 StatePlane Missouri West FIPS 2403 (Meters)",
                "32100": "NAD 1983 StatePlane Montana FIPS 2500 (Meters)",
                "32104": "NAD 1983 StatePlane Nebraska FIPS 2600 (Meters)",
                "32108": "NAD 1983 StatePlane Nevada Central FIPS 2702 (Meters)",
                "32107": "NAD 1983 StatePlane Nevada East FIPS 2701 (Meters)",
                "32109": "NAD 1983 StatePlane Nevada West FIPS 2703 (Meters)",
                "32110": "NAD 1983 StatePlane New Hampshire FIPS 2800 (Meters)",
                "32111": "NAD 1983 StatePlane New Jersey FIPS 2900 (Meters)",
                "32113": "NAD 1983 StatePlane New Mexico Central FIPS 3002 (Meters)",
                "32112": "NAD 1983 StatePlane New Mexico East FIPS 3001 (Meters)",
                "32114": "NAD 1983 StatePlane New Mexico West FIPS 3003 (Meters)",
                "32116": "NAD 1983 StatePlane New York Central FIPS 3102 (Meters)",
                "32115": "NAD 1983 StatePlane New York East FIPS 3101 (Meters)",
                "32118": "NAD 1983 StatePlane New York Long Isl FIPS 3104 (Meters)",
                "32117": "NAD 1983 StatePlane New York West FIPS 3103 (Meters)",
                "32119": "NAD 1983 StatePlane North Carolina FIPS 3200 (Meters)",
                "32120": "NAD 1983 StatePlane North Dakota N FIPS 3301 (Meters)",
                "32121": "NAD 1983 StatePlane North Dakota S FIPS 3302 (Meters)",
                "32122": "NAD 1983 StatePlane Ohio North FIPS 3401 (Meters)",
                "32123": "NAD 1983 StatePlane Ohio South FIPS 3402 (Meters)",
                "32124": "NAD 1983 StatePlane Oklahoma North FIPS 3501 (Meters)",
                "32125": "NAD 1983 StatePlane Oklahoma South FIPS 3502 (Meters)",
                "32126": "NAD 1983 StatePlane Oregon North FIPS 3601 (Meters)",
                "32127": "NAD 1983 StatePlane Oregon South FIPS 3602 (Meters)",
                "32128": "NAD 1983 StatePlane Pennsylvania North FIPS 3701 (Meters)",
                "32129": "NAD 1983 StatePlane Pennsylvania South FIPS 3702 (Meters)",
                "32161": "NAD 1983 StatePlane Puerto Rico Virgin Isl FIPS 5200 (Meters)",
                "32130": "NAD 1983 StatePlane Rhode Island FIPS 3800 (Meters)",
                "32133": "NAD 1983 StatePlane South Carolina FIPS 3900 (Meters)",
                "32134": "NAD 1983 StatePlane South Dakota N FIPS 4001 (Meters)",
                "32135": "NAD 1983 StatePlane South Dakota S FIPS 4002 (Meters)",
                "32136": "NAD 1983 StatePlane Tennessee FIPS 4100 (Meters)",
                "32139": "NAD 1983 StatePlane Texas Central FIPS 4203 (Meters)",
                "32138": "NAD 1983 StatePlane Texas N Central FIPS 4202 (Meters)",
                "32137": "NAD 1983 StatePlane Texas North FIPS 4201 (Meters)",
                "32140": "NAD 1983 StatePlane Texas S Central FIPS 4204 (Meters)",
                "32141": "NAD 1983 StatePlane Texas South FIPS 4205 (Meters)",
                "32143": "NAD 1983 StatePlane Utah Central FIPS 4302 (Meters)",
                "32142": "NAD 1983 StatePlane Utah North FIPS 4301 (Meters)",
                "32144": "NAD 1983 StatePlane Utah South FIPS 4303 (Meters)",
                "32145": "NAD 1983 StatePlane Vermont FIPS 4400 (Meters)",
                "32146": "NAD 1983 StatePlane Virginia North FIPS 4501 (Meters)",
                "32147": "NAD 1983 StatePlane Virginia South FIPS 4502 (Meters)",
                "32148": "NAD 1983 StatePlane Washington North FIPS 4601 (Meters)",
                "32149": "NAD 1983 StatePlane Washington South FIPS 4602 (Meters)",
                "32150": "NAD 1983 StatePlane West Virginia N FIPS 4701 (Meters)",
                "32151": "NAD 1983 StatePlane West Virginia S FIPS 4702 (Meters)",
                "32153": "NAD 1983 StatePlane Wisconsin Central FIPS 4802 (Meters)",
                "32152": "NAD 1983 StatePlane Wisconsin North FIPS 4801 (Meters)",
                "32154": "NAD 1983 StatePlane Wisconsin South FIPS 4803 (Meters)",
                "32156": "NAD 1983 StatePlane Wyoming E Central FIPS 4902 (Meters)",
                "32155": "NAD 1983 StatePlane Wyoming East FIPS 4901 (Meters)",
                "32157": "NAD 1983 StatePlane Wyoming W Central FIPS 4903 (Meters)",
                "32158": "NAD 1983 StatePlane Wyoming West FIPS 4904 (Meters)"
            },
            "NAD 1983 (PA11) (Meters)": {
                "6628": "NAD 1983 (PA11) StatePlane Hawaii 1 FIPS 5101 (Meters)",
                "6629": "NAD 1983 (PA11) StatePlane Hawaii 2 FIPS 5102 (Meters)",
                "6630": "NAD 1983 (PA11) StatePlane Hawaii 3 FIPS 5103 (Meters)",
                "6631": "NAD 1983 (PA11) StatePlane Hawaii 4 FIPS 5104 (Meters)",
                "6632": "NAD 1983 (PA11) StatePlane Hawaii 5 FIPS 5105 (Meters)"
            },
            "NAD 1983 (PA11) (US Feet)": {
                "102525": "NAD 1983 (PA11) StatePlane Hawaii 1 FIPS 5101 (US Feet)",
                "102526": "NAD 1983 (PA11) StatePlane Hawaii 2 FIPS 5102 (US Feet)",
                "6633": "NAD 1983 (PA11) StatePlane Hawaii 3 FIPS 5103 (US Feet)",
                "102528": "NAD 1983 (PA11) StatePlane Hawaii 4 FIPS 5104 (US Feet)",
                "102529": "NAD 1983 (PA11) StatePlane Hawaii 5 FIPS 5105 (US Feet)"
            },
            "NAD 1983 (US Feet)": {
                "102629": "NAD 1983 StatePlane Alabama East FIPS 0101 (US Feet)",
                "102630": "NAD 1983 StatePlane Alabama West FIPS 0102 (US Feet)",
                "102631": "NAD 1983 StatePlane Alaska  1 FIPS 5001 (US Feet)",
                "102632": "NAD 1983 StatePlane Alaska  2 FIPS 5002 (US Feet)",
                "102633": "NAD 1983 StatePlane Alaska  3 FIPS 5003 (US Feet)",
                "102634": "NAD 1983 StatePlane Alaska  4 FIPS 5004 (US Feet)",
                "102635": "NAD 1983 StatePlane Alaska  5 FIPS 5005 (US Feet)",
                "102636": "NAD 1983 StatePlane Alaska  6 FIPS 5006 (US Feet)",
                "102637": "NAD 1983 StatePlane Alaska  7 FIPS 5007 (US Feet)",
                "102638": "NAD 1983 StatePlane Alaska  8 FIPS 5008 (US Feet)",
                "102639": "NAD 1983 StatePlane Alaska  9 FIPS 5009 (US Feet)",
                "102640": "NAD 1983 StatePlane Alaska 10 FIPS 5010 (US Feet)",
                "102649": "NAD 1983 StatePlane Arizona Central FIPS 0202 (US Feet)",
                "102648": "NAD 1983 StatePlane Arizona East FIPS 0201 (US Feet)",
                "102650": "NAD 1983 StatePlane Arizona West FIPS 0203 (US Feet)",
                "3433": "NAD 1983 StatePlane Arkansas North FIPS 0301 (US Feet)",
                "3434": "NAD 1983 StatePlane Arkansas South FIPS 0302 (US Feet)",
                "2225": "NAD 1983 StatePlane California I FIPS 0401 (US Feet)",
                "2226": "NAD 1983 StatePlane California II FIPS 0402 (US Feet)",
                "2227": "NAD 1983 StatePlane California III FIPS 0403 (US Feet)",
                "2228": "NAD 1983 StatePlane California IV FIPS 0404 (US Feet)",
                "2229": "NAD 1983 StatePlane California V FIPS 0405 (US Feet)",
                "2230": "NAD 1983 StatePlane California VI FIPS 0406 (US Feet)",
                "2232": "NAD 1983 StatePlane Colorado Central FIPS 0502 (US Feet)",
                "2231": "NAD 1983 StatePlane Colorado North FIPS 0501 (US Feet)",
                "2233": "NAD 1983 StatePlane Colorado South FIPS 0503 (US Feet)",
                "2234": "NAD 1983 StatePlane Connecticut FIPS 0600 (US Feet)",
                "2235": "NAD 1983 StatePlane Delaware FIPS 0700 (US Feet)",
                "2236": "NAD 1983 StatePlane Florida East FIPS 0901 (US Feet)",
                "2238": "NAD 1983 StatePlane Florida North FIPS 0903 (US Feet)",
                "2237": "NAD 1983 StatePlane Florida West FIPS 0902 (US Feet)",
                "2239": "NAD 1983 StatePlane Georgia East FIPS 1001 (US Feet)",
                "2240": "NAD 1983 StatePlane Georgia West FIPS 1002 (US Feet)",
                "102766": "NAD 1983 StatePlane Guam FIPS 5400 (US Feet)",
                "102661": "NAD 1983 StatePlane Hawaii 1 FIPS 5101 (US Feet)",
                "102662": "NAD 1983 StatePlane Hawaii 2 FIPS 5102 (US Feet)",
                "3759": "NAD 1983 StatePlane Hawaii 3 FIPS 5103 (US Feet)",
                "102664": "NAD 1983 StatePlane Hawaii 4 FIPS 5104 (US Feet)",
                "102665": "NAD 1983 StatePlane Hawaii 5 FIPS 5105 (US Feet)",
                "2242": "NAD 1983 StatePlane Idaho Central FIPS 1102 (US Feet)",
                "2241": "NAD 1983 StatePlane Idaho East FIPS 1101 (US Feet)",
                "2243": "NAD 1983 StatePlane Idaho West FIPS 1103 (US Feet)",
                "3435": "NAD 1983 StatePlane Illinois East FIPS 1201 (US Feet)",
                "3436": "NAD 1983 StatePlane Illinois West FIPS 1202 (US Feet)",
                "2965": "NAD 1983 StatePlane Indiana East FIPS 1301 (US Feet)",
                "2966": "NAD 1983 StatePlane Indiana West FIPS 1302 (US Feet)",
                "3417": "NAD 1983 StatePlane Iowa North FIPS 1401 (US Feet)",
                "3418": "NAD 1983 StatePlane Iowa South FIPS 1402 (US Feet)",
                "3419": "NAD 1983 StatePlane Kansas North FIPS 1501 (US Feet)",
                "3420": "NAD 1983 StatePlane Kansas South FIPS 1502 (US Feet)",
                "3089": "NAD 1983 StatePlane Kentucky FIPS 1600 (US Feet)",
                "2246": "NAD 1983 StatePlane Kentucky North FIPS 1601 (US Feet)",
                "2247": "NAD 1983 StatePlane Kentucky South FIPS 1602 (US Feet)",
                "3451": "NAD 1983 StatePlane Louisiana North FIPS 1701 (US Feet)",
                "3453": "NAD 1983 StatePlane Louisiana Offshore FIPS 1703 (US Feet)",
                "3452": "NAD 1983 StatePlane Louisiana South FIPS 1702 (US Feet)",
                "26847": "NAD 1983 StatePlane Maine East FIPS 1801 (US Feet)",
                "26848": "NAD 1983 StatePlane Maine West FIPS 1802 (US Feet)",
                "2248": "NAD 1983 StatePlane Maryland FIPS 1900 (US Feet)",
                "2249": "NAD 1983 StatePlane Massachusetts FIPS 2001 (US Feet)",
                "2250": "NAD 1983 StatePlane Massachusetts Isl FIPS 2002 (US Feet)",
                "102689": "NAD 1983 StatePlane Michigan Central FIPS 2112 (US Feet)",
                "102688": "NAD 1983 StatePlane Michigan North FIPS 2111 (US Feet)",
                "102690": "NAD 1983 StatePlane Michigan South FIPS 2113 (US Feet)",
                "26850": "NAD 1983 StatePlane Minnesota Central FIPS 2202 (US Feet)",
                "26849": "NAD 1983 StatePlane Minnesota North FIPS 2201 (US Feet)",
                "26851": "NAD 1983 StatePlane Minnesota South FIPS 2203 (US Feet)",
                "2254": "NAD 1983 StatePlane Mississippi East FIPS 2301 (US Feet)",
                "2255": "NAD 1983 StatePlane Mississippi West FIPS 2302 (US Feet)",
                "102697": "NAD 1983 StatePlane Missouri Central FIPS 2402 (US Feet)",
                "102696": "NAD 1983 StatePlane Missouri East FIPS 2401 (US Feet)",
                "102698": "NAD 1983 StatePlane Missouri West FIPS 2403 (US Feet)",
                "102700": "NAD 1983 StatePlane Montana FIPS 2500 (US Feet)",
                "26852": "NAD 1983 StatePlane Nebraska FIPS 2600 (US Feet)",
                "3422": "NAD 1983 StatePlane Nevada Central FIPS 2702 (US Feet)",
                "3421": "NAD 1983 StatePlane Nevada East FIPS 2701 (US Feet)",
                "3423": "NAD 1983 StatePlane Nevada West FIPS 2703 (US Feet)",
                "3437": "NAD 1983 StatePlane New Hampshire FIPS 2800 (US Feet)",
                "3424": "NAD 1983 StatePlane New Jersey FIPS 2900 (US Feet)",
                "2258": "NAD 1983 StatePlane New Mexico Central FIPS 3002 (US Feet)",
                "2257": "NAD 1983 StatePlane New Mexico East FIPS 3001 (US Feet)",
                "2259": "NAD 1983 StatePlane New Mexico West FIPS 3003 (US Feet)",
                "2261": "NAD 1983 StatePlane New York Central FIPS 3102 (US Feet)",
                "2260": "NAD 1983 StatePlane New York East FIPS 3101 (US Feet)",
                "2263": "NAD 1983 StatePlane New York Long Isl FIPS 3104 (US Feet)",
                "2262": "NAD 1983 StatePlane New York West FIPS 3103 (US Feet)",
                "2264": "NAD 1983 StatePlane North Carolina FIPS 3200 (US Feet)",
                "102720": "NAD 1983 StatePlane North Dakota N FIPS 3301 (US Feet)",
                "102721": "NAD 1983 StatePlane North Dakota S FIPS 3302 (US Feet)",
                "3734": "NAD 1983 StatePlane Ohio North FIPS 3401 (US Feet)",
                "3735": "NAD 1983 StatePlane Ohio South FIPS 3402 (US Feet)",
                "2267": "NAD 1983 StatePlane Oklahoma North FIPS 3501 (US Feet)",
                "2268": "NAD 1983 StatePlane Oklahoma South FIPS 3502 (US Feet)",
                "102726": "NAD 1983 StatePlane Oregon North FIPS 3601 (US Feet)",
                "102727": "NAD 1983 StatePlane Oregon South FIPS 3602 (US Feet)",
                "2271": "NAD 1983 StatePlane Pennsylvania North FIPS 3701 (US Feet)",
                "2272": "NAD 1983 StatePlane Pennsylvania South FIPS 3702 (US Feet)",
                "102761": "NAD 1983 StatePlane Puerto Rico Virgin Isl FIPS 5200 (US Feet)",
                "3438": "NAD 1983 StatePlane Rhode Island FIPS 3800 (US Feet)",
                "102733": "NAD 1983 StatePlane South Carolina FIPS 3900 (US Feet)",
                "4457": "NAD 1983 StatePlane South Dakota N FIPS 4001 (US Feet)",
                "3455": "NAD 1983 StatePlane South Dakota S FIPS 4002 (US Feet)",
                "2274": "NAD 1983 StatePlane Tennessee FIPS 4100 (US Feet)",
                "2277": "NAD 1983 StatePlane Texas Central FIPS 4203 (US Feet)",
                "2276": "NAD 1983 StatePlane Texas N Central FIPS 4202 (US Feet)",
                "2275": "NAD 1983 StatePlane Texas North FIPS 4201 (US Feet)",
                "2278": "NAD 1983 StatePlane Texas S Central FIPS 4204 (US Feet)",
                "2279": "NAD 1983 StatePlane Texas South FIPS 4205 (US Feet)",
                "3566": "NAD 1983 StatePlane Utah Central FIPS 4302 (US Feet)",
                "3560": "NAD 1983 StatePlane Utah North FIPS 4301 (US Feet)",
                "3567": "NAD 1983 StatePlane Utah South FIPS 4303 (US Feet)",
                "5646": "NAD 1983 StatePlane Vermont FIPS 4400 (US Feet)",
                "2283": "NAD 1983 StatePlane Virginia North FIPS 4501 (US Feet)",
                "2284": "NAD 1983 StatePlane Virginia South FIPS 4502 (US Feet)",
                "2285": "NAD 1983 StatePlane Washington North FIPS 4601 (US Feet)",
                "2286": "NAD 1983 StatePlane Washington South FIPS 4602 (US Feet)",
                "26853": "NAD 1983 StatePlane West Virginia N FIPS 4701 (US Feet)",
                "26854": "NAD 1983 StatePlane West Virginia S FIPS 4702 (US Feet)",
                "2288": "NAD 1983 StatePlane Wisconsin Central FIPS 4802 (US Feet)",
                "2287": "NAD 1983 StatePlane Wisconsin North FIPS 4801 (US Feet)",
                "2289": "NAD 1983 StatePlane Wisconsin South FIPS 4803 (US Feet)",
                "3737": "NAD 1983 StatePlane Wyoming E Central FIPS 4902 (US Feet)",
                "3736": "NAD 1983 StatePlane Wyoming East FIPS 4901 (US Feet)",
                "3738": "NAD 1983 StatePlane Wyoming W Central FIPS 4903 (US Feet)",
                "3739": "NAD 1983 StatePlane Wyoming West FIPS 4904 (US Feet)"
            },
            "NAD 1983 HARN (Intl Feet)": {
                "2868": "NAD 1983 HARN StatePlane Arizona Central FIPS 0202 (Intl Feet)",
                "2867": "NAD 1983 HARN StatePlane Arizona East FIPS 0201 (Intl Feet)",
                "2869": "NAD 1983 HARN StatePlane Arizona West FIPS 0203 (Intl Feet)",
                "2897": "NAD 1983 HARN StatePlane Michigan Central FIPS 2112 (Intl Feet)",
                "2896": "NAD 1983 HARN StatePlane Michigan North FIPS 2111 (Intl Feet)",
                "2898": "NAD 1983 HARN StatePlane Michigan South FIPS 2113 (Intl Feet)",
                "2901": "NAD 1983 HARN StatePlane Montana FIPS 2500 (Intl Feet)",
                "2909": "NAD 1983 HARN StatePlane North Dakota N FIPS 3301 (Intl Feet)",
                "2910": "NAD 1983 HARN StatePlane North Dakota S FIPS 3302 (Intl Feet)",
                "2913": "NAD 1983 HARN StatePlane Oregon North FIPS 3601 (Intl Feet)",
                "2914": "NAD 1983 HARN StatePlane Oregon South FIPS 3602 (Intl Feet)",
                "3361": "NAD 1983 HARN StatePlane South Carolina FIPS 3900 (Intl Feet)",
                "2922": "NAD 1983 HARN StatePlane Utah Central FIPS 4302 (Intl Feet)",
                "2921": "NAD 1983 HARN StatePlane Utah North FIPS 4301 (Intl Feet)",
                "2923": "NAD 1983 HARN StatePlane Utah South FIPS 4303 (Intl Feet)"
            },
            "NAD 1983 HARN (Meters)": {
                "3464": "NAD 1983 HARN Maine 2000 Central Zone (Meters)",
                "3075": "NAD 1983 HARN Maine 2000 East Zone (Meters)",
                "3077": "NAD 1983 HARN Maine 2000 West Zone (Meters)",
                "2759": "NAD 1983 HARN StatePlane Alabama East FIPS 0101 (Meters)",
                "2760": "NAD 1983 HARN StatePlane Alabama West FIPS 0102 (Meters)",
                "2762": "NAD 1983 HARN StatePlane Arizona Central FIPS 0202 (Meters)",
                "2761": "NAD 1983 HARN StatePlane Arizona East FIPS 0201 (Meters)",
                "2763": "NAD 1983 HARN StatePlane Arizona West FIPS 0203 (Meters)",
                "2764": "NAD 1983 HARN StatePlane Arkansas North FIPS 0301 (Meters)",
                "2765": "NAD 1983 HARN StatePlane Arkansas South FIPS 0302 (Meters)",
                "2766": "NAD 1983 HARN StatePlane California I FIPS 0401 (Meters)",
                "2767": "NAD 1983 HARN StatePlane California II FIPS 0402 (Meters)",
                "2768": "NAD 1983 HARN StatePlane California III FIPS 0403 (Meters)",
                "2769": "NAD 1983 HARN StatePlane California IV FIPS 0404 (Meters)",
                "2770": "NAD 1983 HARN StatePlane California V FIPS 0405 (Meters)",
                "2771": "NAD 1983 HARN StatePlane California VI FIPS 0406 (Meters)",
                "2773": "NAD 1983 HARN StatePlane Colorado Central FIPS 0502 (Meters)",
                "2772": "NAD 1983 HARN StatePlane Colorado North FIPS 0501 (Meters)",
                "2774": "NAD 1983 HARN StatePlane Colorado South FIPS 0503 (Meters)",
                "2775": "NAD 1983 HARN StatePlane Connecticut FIPS 0600 (Meters)",
                "2776": "NAD 1983 HARN StatePlane Delaware FIPS 0700 (Meters)",
                "2777": "NAD 1983 HARN StatePlane Florida East FIPS 0901 (Meters)",
                "2779": "NAD 1983 HARN StatePlane Florida North FIPS 0903 (Meters)",
                "2778": "NAD 1983 HARN StatePlane Florida West FIPS 0902 (Meters)",
                "2780": "NAD 1983 HARN StatePlane Georgia East FIPS 1001 (Meters)",
                "2781": "NAD 1983 HARN StatePlane Georgia West FIPS 1002 (Meters)",
                "2782": "NAD 1983 HARN StatePlane Hawaii 1 FIPS 5101 (Meters)",
                "2783": "NAD 1983 HARN StatePlane Hawaii 2 FIPS 5102 (Meters)",
                "2784": "NAD 1983 HARN StatePlane Hawaii 3 FIPS 5103 (Meters)",
                "2785": "NAD 1983 HARN StatePlane Hawaii 4 FIPS 5104 (Meters)",
                "2786": "NAD 1983 HARN StatePlane Hawaii 5 FIPS 5105 (Meters)",
                "2788": "NAD 1983 HARN StatePlane Idaho Central FIPS 1102 (Meters)",
                "2787": "NAD 1983 HARN StatePlane Idaho East FIPS 1101 (Meters)",
                "2789": "NAD 1983 HARN StatePlane Idaho West FIPS 1103 (Meters)",
                "2790": "NAD 1983 HARN StatePlane Illinois East FIPS 1201 (Meters)",
                "2791": "NAD 1983 HARN StatePlane Illinois West FIPS 1202 (Meters)",
                "2792": "NAD 1983 HARN StatePlane Indiana East FIPS 1301 (Meters)",
                "2793": "NAD 1983 HARN StatePlane Indiana West FIPS 1302 (Meters)",
                "2794": "NAD 1983 HARN StatePlane Iowa North FIPS 1401 (Meters)",
                "2795": "NAD 1983 HARN StatePlane Iowa South FIPS 1402 (Meters)",
                "2796": "NAD 1983 HARN StatePlane Kansas North FIPS 1501 (Meters)",
                "2797": "NAD 1983 HARN StatePlane Kansas South FIPS 1502 (Meters)",
                "3090": "NAD 1983 HARN StatePlane Kentucky FIPS 1600 (Meters)",
                "2798": "NAD 1983 HARN StatePlane Kentucky North FIPS 1601 (Meters)",
                "2799": "NAD 1983 HARN StatePlane Kentucky South FIPS 1602 (Meters)",
                "2800": "NAD 1983 HARN StatePlane Louisiana North FIPS 1701 (Meters)",
                "2801": "NAD 1983 HARN StatePlane Louisiana South FIPS 1702 (Meters)",
                "2802": "NAD 1983 HARN StatePlane Maine East FIPS 1801 (Meters)",
                "2803": "NAD 1983 HARN StatePlane Maine West FIPS 1802 (Meters)",
                "2804": "NAD 1983 HARN StatePlane Maryland FIPS 1900 (Meters)",
                "2805": "NAD 1983 HARN StatePlane Massachusetts FIPS 2001 (Meters)",
                "2806": "NAD 1983 HARN StatePlane Massachusetts Isl FIPS 2002 (Meters)",
                "2808": "NAD 1983 HARN StatePlane Michigan Central FIPS 2112 (Meters)",
                "2807": "NAD 1983 HARN StatePlane Michigan North FIPS 2111 (Meters)",
                "2809": "NAD 1983 HARN StatePlane Michigan South FIPS 2113 (Meters)",
                "2811": "NAD 1983 HARN StatePlane Minnesota Central FIPS 2202 (Meters)",
                "2810": "NAD 1983 HARN StatePlane Minnesota North FIPS 2201 (Meters)",
                "2812": "NAD 1983 HARN StatePlane Minnesota South FIPS 2203 (Meters)",
                "2813": "NAD 1983 HARN StatePlane Mississippi East FIPS 2301 (Meters)",
                "2814": "NAD 1983 HARN StatePlane Mississippi West FIPS 2302 (Meters)",
                "2816": "NAD 1983 HARN StatePlane Missouri Central FIPS 2402 (Meters)",
                "2815": "NAD 1983 HARN StatePlane Missouri East FIPS 2401 (Meters)",
                "2817": "NAD 1983 HARN StatePlane Missouri West FIPS 2403 (Meters)",
                "2818": "NAD 1983 HARN StatePlane Montana FIPS 2500 (Meters)",
                "2819": "NAD 1983 HARN StatePlane Nebraska FIPS 2600 (Meters)",
                "2821": "NAD 1983 HARN StatePlane Nevada Central FIPS 2702 (Meters)",
                "2820": "NAD 1983 HARN StatePlane Nevada East FIPS 2701 (Meters)",
                "2822": "NAD 1983 HARN StatePlane Nevada West FIPS 2703 (Meters)",
                "2823": "NAD 1983 HARN StatePlane New Hampshire FIPS 2800 (Meters)",
                "2824": "NAD 1983 HARN StatePlane New Jersey FIPS 2900 (Meters)",
                "2826": "NAD 1983 HARN StatePlane New Mexico Central FIPS 3002 (Meters)",
                "2825": "NAD 1983 HARN StatePlane New Mexico East FIPS 3001 (Meters)",
                "2827": "NAD 1983 HARN StatePlane New Mexico West FIPS 3003 (Meters)",
                "2829": "NAD 1983 HARN StatePlane New York Central FIPS 3102 (Meters)",
                "2828": "NAD 1983 HARN StatePlane New York East FIPS 3101 (Meters)",
                "2831": "NAD 1983 HARN StatePlane New York Long Isl FIPS 3104 (Meters)",
                "2830": "NAD 1983 HARN StatePlane New York West FIPS 3103 (Meters)",
                "3358": "NAD 1983 HARN StatePlane North Carolina FIPS 3200 (Meters)",
                "2832": "NAD 1983 HARN StatePlane North Dakota N FIPS 3301 (Meters)",
                "2833": "NAD 1983 HARN StatePlane North Dakota S FIPS 3302 (Meters)",
                "2834": "NAD 1983 HARN StatePlane Ohio North FIPS 3401 (Meters)",
                "2835": "NAD 1983 HARN StatePlane Ohio South FIPS 3402 (Meters)",
                "2836": "NAD 1983 HARN StatePlane Oklahoma North FIPS 3501 (Meters)",
                "2837": "NAD 1983 HARN StatePlane Oklahoma South FIPS 3502 (Meters)",
                "2838": "NAD 1983 HARN StatePlane Oregon North FIPS 3601 (Meters)",
                "2839": "NAD 1983 HARN StatePlane Oregon South FIPS 3602 (Meters)",
                "2866": "NAD 1983 HARN StatePlane PR VI FIPS 5200 (Meters)",
                "3362": "NAD 1983 HARN StatePlane Pennsylvania North FIPS 3701 (Meters)",
                "3364": "NAD 1983 HARN StatePlane Pennsylvania South FIPS 3702 (Meters)",
                "2840": "NAD 1983 HARN StatePlane Rhode Island FIPS 3800 (Meters)",
                "3360": "NAD 1983 HARN StatePlane South Carolina FIPS 3900 (Meters)",
                "2841": "NAD 1983 HARN StatePlane South Dakota N FIPS 4001 (Meters)",
                "2842": "NAD 1983 HARN StatePlane South Dakota S FIPS 4002 (Meters)",
                "2843": "NAD 1983 HARN StatePlane Tennessee FIPS 4100 (Meters)",
                "2846": "NAD 1983 HARN StatePlane Texas Central FIPS 4203 (Meters)",
                "2845": "NAD 1983 HARN StatePlane Texas N Central FIPS 4202 (Meters)",
                "2844": "NAD 1983 HARN StatePlane Texas North FIPS 4201 (Meters)",
                "2847": "NAD 1983 HARN StatePlane Texas S Central FIPS 4204 (Meters)",
                "2848": "NAD 1983 HARN StatePlane Texas South FIPS 4205 (Meters)",
                "2850": "NAD 1983 HARN StatePlane Utah Central FIPS 4302 (Meters)",
                "2849": "NAD 1983 HARN StatePlane Utah North FIPS 4301 (Meters)",
                "2851": "NAD 1983 HARN StatePlane Utah South FIPS 4303 (Meters)",
                "2852": "NAD 1983 HARN StatePlane Vermont FIPS 4400 (Meters)",
                "2853": "NAD 1983 HARN StatePlane Virginia North FIPS 4501 (Meters)",
                "2854": "NAD 1983 HARN StatePlane Virginia South FIPS 4502 (Meters)",
                "2855": "NAD 1983 HARN StatePlane Washington North FIPS 4601 (Meters)",
                "2856": "NAD 1983 HARN StatePlane Washington South FIPS 4602 (Meters)",
                "2857": "NAD 1983 HARN StatePlane West Virginia N FIPS 4701 (Meters)",
                "2858": "NAD 1983 HARN StatePlane West Virginia S FIPS 4702 (Meters)",
                "2860": "NAD 1983 HARN StatePlane Wisconsin Central FIPS 4802 (Meters)",
                "2859": "NAD 1983 HARN StatePlane Wisconsin North FIPS 4801 (Meters)",
                "2861": "NAD 1983 HARN StatePlane Wisconsin South FIPS 4803 (Meters)",
                "2863": "NAD 1983 HARN StatePlane Wyoming E Central FIPS 4902 (Meters)",
                "2862": "NAD 1983 HARN StatePlane Wyoming East FIPS 4901 (Meters)",
                "2864": "NAD 1983 HARN StatePlane Wyoming W Central FIPS 4903 (Meters)",
                "2865": "NAD 1983 HARN StatePlane Wyoming West FIPS 4904 (Meters)"
            },
            "NAD 1983 HARN (US Feet)": {
                "102041": "City Of Bellevue NAD83 2007",
                "3441": "NAD 1983 HARN StatePlane Arkansas North FIPS 0301 (US Feet)",
                "3442": "NAD 1983 HARN StatePlane Arkansas South FIPS 0302 (US Feet)",
                "2870": "NAD 1983 HARN StatePlane California I FIPS 0401 (US Feet)",
                "2871": "NAD 1983 HARN StatePlane California II FIPS 0402 (US Feet)",
                "2872": "NAD 1983 HARN StatePlane California III FIPS 0403 (US Feet)",
                "2873": "NAD 1983 HARN StatePlane California IV FIPS 0404 (US Feet)",
                "2874": "NAD 1983 HARN StatePlane California V FIPS 0405 (US Feet)",
                "2875": "NAD 1983 HARN StatePlane California VI FIPS 0406 (US Feet)",
                "2877": "NAD 1983 HARN StatePlane Colorado Central FIPS 0502 (US Feet)",
                "2876": "NAD 1983 HARN StatePlane Colorado North FIPS 0501 (US Feet)",
                "2878": "NAD 1983 HARN StatePlane Colorado South FIPS 0503 (US Feet)",
                "2879": "NAD 1983 HARN StatePlane Connecticut FIPS 0600 (US Feet)",
                "2880": "NAD 1983 HARN StatePlane Delaware FIPS 0700 (US Feet)",
                "2881": "NAD 1983 HARN StatePlane Florida East FIPS 0901 (US Feet)",
                "2883": "NAD 1983 HARN StatePlane Florida North FIPS 0903 (US Feet)",
                "2882": "NAD 1983 HARN StatePlane Florida West FIPS 0902 (US Feet)",
                "2884": "NAD 1983 HARN StatePlane Georgia East FIPS 1001 (US Feet)",
                "2885": "NAD 1983 HARN StatePlane Georgia West FIPS 1002 (US Feet)",
                "102461": "NAD 1983 HARN StatePlane Hawaii 1 FIPS 5101 (US Feet)",
                "102462": "NAD 1983 HARN StatePlane Hawaii 2 FIPS 5102 (US Feet)",
                "3760": "NAD 1983 HARN StatePlane Hawaii 3 FIPS 5103 (US Feet)",
                "102464": "NAD 1983 HARN StatePlane Hawaii 4 FIPS 5104 (US Feet)",
                "102465": "NAD 1983 HARN StatePlane Hawaii 5 FIPS 5105 (US Feet)",
                "2887": "NAD 1983 HARN StatePlane Idaho Central FIPS 1102 (US Feet)",
                "2886": "NAD 1983 HARN StatePlane Idaho East FIPS 1101 (US Feet)",
                "2888": "NAD 1983 HARN StatePlane Idaho West FIPS 1103 (US Feet)",
                "3443": "NAD 1983 HARN StatePlane Illinois East FIPS 1201 (US Feet)",
                "3444": "NAD 1983 HARN StatePlane Illinois West FIPS 1202 (US Feet)",
                "2967": "NAD 1983 HARN StatePlane Indiana East FIPS 1301 (US Feet)",
                "2968": "NAD 1983 HARN StatePlane Indiana West FIPS 1302 (US Feet)",
                "3425": "NAD 1983 HARN StatePlane Iowa North FIPS 1401 (US Feet)",
                "3426": "NAD 1983 HARN StatePlane Iowa South FIPS 1402 (US Feet)",
                "3427": "NAD 1983 HARN StatePlane Kansas North FIPS 1501 (US Feet)",
                "3428": "NAD 1983 HARN StatePlane Kansas South FIPS 1502 (US Feet)",
                "3091": "NAD 1983 HARN StatePlane Kentucky FIPS 1600 (US Feet)",
                "2891": "NAD 1983 HARN StatePlane Kentucky North FIPS 1601 (US Feet)",
                "2892": "NAD 1983 HARN StatePlane Kentucky South FIPS 1602 (US Feet)",
                "3456": "NAD 1983 HARN StatePlane Louisiana North FIPS 1701 (US Feet)",
                "3457": "NAD 1983 HARN StatePlane Louisiana South FIPS 1702 (US Feet)",
                "26855": "NAD 1983 HARN StatePlane Maine East FIPS 1801 (US Feet)",
                "26856": "NAD 1983 HARN StatePlane Maine West FIPS 1802 (US Feet)",
                "2893": "NAD 1983 HARN StatePlane Maryland FIPS 1900 (US Feet)",
                "2894": "NAD 1983 HARN StatePlane Massachusetts FIPS 2001 (US Feet)",
                "2895": "NAD 1983 HARN StatePlane Massachusetts Isl FIPS 2002 (US Feet)",
                "26858": "NAD 1983 HARN StatePlane Minnesota Central FIPS 2202 (US Feet)",
                "26857": "NAD 1983 HARN StatePlane Minnesota North FIPS 2201 (US Feet)",
                "26859": "NAD 1983 HARN StatePlane Minnesota South FIPS 2203 (US Feet)",
                "2899": "NAD 1983 HARN StatePlane Mississippi East FIPS 2301 (US Feet)",
                "2900": "NAD 1983 HARN StatePlane Mississippi West FIPS 2302 (US Feet)",
                "26860": "NAD 1983 HARN StatePlane Nebraska FIPS 2600 (US Feet)",
                "3430": "NAD 1983 HARN StatePlane Nevada Central FIPS 2702 (US Feet)",
                "3429": "NAD 1983 HARN StatePlane Nevada East FIPS 2701 (US Feet)",
                "3431": "NAD 1983 HARN StatePlane Nevada West FIPS 2703 (US Feet)",
                "3445": "NAD 1983 HARN StatePlane New Hampshire FIPS 2800 (US Feet)",
                "3432": "NAD 1983 HARN StatePlane New Jersey FIPS 2900 (US Feet)",
                "2903": "NAD 1983 HARN StatePlane New Mexico Central FIPS 3002 (US Feet)",
                "2902": "NAD 1983 HARN StatePlane New Mexico East FIPS 3001 (US Feet)",
                "2904": "NAD 1983 HARN StatePlane New Mexico West FIPS 3003 (US Feet)",
                "2906": "NAD 1983 HARN StatePlane New York Central FIPS 3102 (US Feet)",
                "2905": "NAD 1983 HARN StatePlane New York East FIPS 3101 (US Feet)",
                "2908": "NAD 1983 HARN StatePlane New York Long Isl FIPS 3104 (US Feet)",
                "2907": "NAD 1983 HARN StatePlane New York West FIPS 3103 (US Feet)",
                "3404": "NAD 1983 HARN StatePlane North Carolina FIPS 3200 (US Feet)",
                "3753": "NAD 1983 HARN StatePlane Ohio North FIPS 3401 (US Feet)",
                "3754": "NAD 1983 HARN StatePlane Ohio South FIPS 3402 (US Feet)",
                "2911": "NAD 1983 HARN StatePlane Oklahoma North FIPS 3501 (US Feet)",
                "2912": "NAD 1983 HARN StatePlane Oklahoma South FIPS 3502 (US Feet)",
                "3363": "NAD 1983 HARN StatePlane Pennsylvania North FIPS 3701 (US Feet)",
                "3365": "NAD 1983 HARN StatePlane Pennsylvania South FIPS 3702 (US Feet)",
                "3446": "NAD 1983 HARN StatePlane Rhode Island FIPS 3800 (US Feet)",
                "3458": "NAD 1983 HARN StatePlane South Dakota N FIPS 4001 (US Feet)",
                "3459": "NAD 1983 HARN StatePlane South Dakota S FIPS 4002 (US Feet)",
                "2915": "NAD 1983 HARN StatePlane Tennessee FIPS 4100 (US Feet)",
                "2918": "NAD 1983 HARN StatePlane Texas Central FIPS 4203 (US Feet)",
                "2917": "NAD 1983 HARN StatePlane Texas N Central FIPS 4202 (US Feet)",
                "2916": "NAD 1983 HARN StatePlane Texas North FIPS 4201 (US Feet)",
                "2919": "NAD 1983 HARN StatePlane Texas S Central FIPS 4204 (US Feet)",
                "2920": "NAD 1983 HARN StatePlane Texas South FIPS 4205 (US Feet)",
                "3569": "NAD 1983 HARN StatePlane Utah Central FIPS 4302 (US Feet)",
                "3568": "NAD 1983 HARN StatePlane Utah North FIPS 4301 (US Feet)",
                "3570": "NAD 1983 HARN StatePlane Utah South FIPS 4303 (US Feet)",
                "5654": "NAD 1983 HARN StatePlane Vermont FIPS 4400 (US Feet)",
                "2924": "NAD 1983 HARN StatePlane Virginia North FIPS 4501 (US Feet)",
                "2925": "NAD 1983 HARN StatePlane Virginia South FIPS 4502 (US Feet)",
                "2926": "NAD 1983 HARN StatePlane Washington North FIPS 4601 (US Feet)",
                "2927": "NAD 1983 HARN StatePlane Washington South FIPS 4602 (US Feet)",
                "26861": "NAD 1983 HARN StatePlane West Virginia N FIPS 4701 (US Feet)",
                "26862": "NAD 1983 HARN StatePlane West Virginia S FIPS 4702 (US Feet)",
                "2929": "NAD 1983 HARN StatePlane Wisconsin Central FIPS 4802 (US Feet)",
                "2928": "NAD 1983 HARN StatePlane Wisconsin North FIPS 4801 (US Feet)",
                "2930": "NAD 1983 HARN StatePlane Wisconsin South FIPS 4803 (US Feet)",
                "3756": "NAD 1983 HARN StatePlane Wyoming E Central FIPS 4902 (US Feet)",
                "3755": "NAD 1983 HARN StatePlane Wyoming East FIPS 4901 (US Feet)",
                "3757": "NAD 1983 HARN StatePlane Wyoming W Central FIPS 4903 (US Feet)",
                "3758": "NAD 1983 HARN StatePlane Wyoming West FIPS 4904 (US Feet)"
            },
            "NAD 1983 NSRS2007 (Intl Feet)": {
                "3479": "NAD 1983 NSRS2007 StatePlane Arizona Central FIPS 0202 (Intl Feet)",
                "3481": "NAD 1983 NSRS2007 StatePlane Arizona East FIPS 0201 (Intl Feet)",
                "3483": "NAD 1983 NSRS2007 StatePlane Arizona West FIPS 0203 (Intl Feet)",
                "3588": "NAD 1983 NSRS2007 StatePlane Michigan Central FIPS 2112 (Intl Feet)",
                "3590": "NAD 1983 NSRS2007 StatePlane Michigan North FIPS 2111 (Intl Feet)",
                "3593": "NAD 1983 NSRS2007 StatePlane Michigan South FIPS 2113 (Intl Feet)",
                "3605": "NAD 1983 NSRS2007 StatePlane Montana FIPS 2500 (Intl Feet)",
                "3634": "NAD 1983 NSRS2007 StatePlane North Dakota N FIPS 3301 (Intl Feet)",
                "3636": "NAD 1983 NSRS2007 StatePlane North Dakota S FIPS 3302 (Intl Feet)",
                "3646": "NAD 1983 NSRS2007 StatePlane Oregon North FIPS 3601 (Intl Feet)",
                "3648": "NAD 1983 NSRS2007 StatePlane Oregon South FIPS 3602 (Intl Feet)",
                "3656": "NAD 1983 NSRS2007 StatePlane South Carolina FIPS 3900 (Intl Feet)",
                "3676": "NAD 1983 NSRS2007 StatePlane Utah Central FIPS 4302 (Intl Feet)",
                "3679": "NAD 1983 NSRS2007 StatePlane Utah North FIPS 4301 (Intl Feet)",
                "3682": "NAD 1983 NSRS2007 StatePlane Utah South FIPS 4303 (Intl Feet)"
            },
            "NAD 1983 NSRS2007 (Meters)": {
                "3554": "NAD 1983 NSRS2007 Maine 2000 Central Zone (Meters)",
                "3555": "NAD 1983 NSRS2007 Maine 2000 East Zone (Meters)",
                "3556": "NAD 1983 NSRS2007 Maine 2000 West Zone (Meters)",
                "3465": "NAD 1983 NSRS2007 StatePlane Alabama East FIPS 0101 (Meters)",
                "3466": "NAD 1983 NSRS2007 StatePlane Alabama West FIPS 0102 (Meters)",
                "3468": "NAD 1983 NSRS2007 StatePlane Alaska  1 FIPS 5001 (Meters)",
                "3469": "NAD 1983 NSRS2007 StatePlane Alaska  2 FIPS 5002 (Meters)",
                "3470": "NAD 1983 NSRS2007 StatePlane Alaska  3 FIPS 5003 (Meters)",
                "3471": "NAD 1983 NSRS2007 StatePlane Alaska  4 FIPS 5004 (Meters)",
                "3472": "NAD 1983 NSRS2007 StatePlane Alaska  5 FIPS 5005 (Meters)",
                "3473": "NAD 1983 NSRS2007 StatePlane Alaska  6 FIPS 5006 (Meters)",
                "3474": "NAD 1983 NSRS2007 StatePlane Alaska  7 FIPS 5007 (Meters)",
                "3475": "NAD 1983 NSRS2007 StatePlane Alaska  8 FIPS 5008 (Meters)",
                "3476": "NAD 1983 NSRS2007 StatePlane Alaska  9 FIPS 5009 (Meters)",
                "3477": "NAD 1983 NSRS2007 StatePlane Alaska 10 FIPS 5010 (Meters)",
                "3478": "NAD 1983 NSRS2007 StatePlane Arizona Central FIPS 0202 (Meters)",
                "3480": "NAD 1983 NSRS2007 StatePlane Arizona East FIPS 0201 (Meters)",
                "3482": "NAD 1983 NSRS2007 StatePlane Arizona West FIPS 0203 (Meters)",
                "3484": "NAD 1983 NSRS2007 StatePlane Arkansas North FIPS 0301 (Meters)",
                "3486": "NAD 1983 NSRS2007 StatePlane Arkansas South FIPS 0302 (Meters)",
                "3489": "NAD 1983 NSRS2007 StatePlane California I FIPS 0401 (Meters)",
                "3491": "NAD 1983 NSRS2007 StatePlane California II FIPS 0402 (Meters)",
                "3493": "NAD 1983 NSRS2007 StatePlane California III FIPS 0403 (Meters)",
                "3495": "NAD 1983 NSRS2007 StatePlane California IV FIPS 0404 (Meters)",
                "3497": "NAD 1983 NSRS2007 StatePlane California V FIPS 0405 (Meters)",
                "3499": "NAD 1983 NSRS2007 StatePlane California VI FIPS 0406 (Meters)",
                "3501": "NAD 1983 NSRS2007 StatePlane Colorado Central FIPS 0502 (Meter)",
                "3503": "NAD 1983 NSRS2007 StatePlane Colorado North FIPS 0501 (Meters)",
                "3505": "NAD 1983 NSRS2007 StatePlane Colorado South FIPS 0503 (Meters)",
                "3507": "NAD 1983 NSRS2007 StatePlane Connecticut FIPS 0600 (Meters)",
                "3509": "NAD 1983 NSRS2007 StatePlane Delaware FIPS 0700 (Meters)",
                "3511": "NAD 1983 NSRS2007 StatePlane Florida East FIPS 0901 (Meters)",
                "3514": "NAD 1983 NSRS2007 StatePlane Florida North FIPS 0903 (Meters)",
                "3516": "NAD 1983 NSRS2007 StatePlane Florida West FIPS 0902 (Meters)",
                "3518": "NAD 1983 NSRS2007 StatePlane Georgia East FIPS 1001 (Meters)",
                "3520": "NAD 1983 NSRS2007 StatePlane Georgia West FIPS 1002 (Meters)",
                "3522": "NAD 1983 NSRS2007 StatePlane Idaho Central FIPS 1102 (Meters)",
                "3524": "NAD 1983 NSRS2007 StatePlane Idaho East FIPS 1101 (Meters)",
                "3526": "NAD 1983 NSRS2007 StatePlane Idaho West FIPS 1103 (Meters)",
                "3528": "NAD 1983 NSRS2007 StatePlane Illinois East FIPS 1201 (Meters)",
                "3530": "NAD 1983 NSRS2007 StatePlane Illinois West FIPS 1202 (Meters)",
                "3532": "NAD 1983 NSRS2007 StatePlane Indiana East FIPS 1301 (Meters)",
                "3534": "NAD 1983 NSRS2007 StatePlane Indiana West FIPS 1302 (Meters)",
                "3536": "NAD 1983 NSRS2007 StatePlane Iowa North FIPS 1401 (Meters)",
                "3538": "NAD 1983 NSRS2007 StatePlane Iowa South FIPS 1402 (Meters)",
                "3540": "NAD 1983 NSRS2007 StatePlane Kansas North FIPS 1501 (Meters)",
                "3542": "NAD 1983 NSRS2007 StatePlane Kansas South FIPS 1502 (Meters)",
                "3546": "NAD 1983 NSRS2007 StatePlane Kentucky FIPS 1600 (Meters)",
                "3544": "NAD 1983 NSRS2007 StatePlane Kentucky North FIPS 1601 (Meters)",
                "3548": "NAD 1983 NSRS2007 StatePlane Kentucky South FIPS 1602 (Meters)",
                "3550": "NAD 1983 NSRS2007 StatePlane Louisiana North FIPS 1701 (Meters)",
                "3552": "NAD 1983 NSRS2007 StatePlane Louisiana South FIPS 1702 (Meters)",
                "3557": "NAD 1983 NSRS2007 StatePlane Maine East FIPS 1801 (Meters)",
                "3558": "NAD 1983 NSRS2007 StatePlane Maine West FIPS 1802 (Meters)",
                "3559": "NAD 1983 NSRS2007 StatePlane Maryland FIPS 1900 (Meters)",
                "3585": "NAD 1983 NSRS2007 StatePlane Massachusetts FIPS 2001 (Meters)",
                "3583": "NAD 1983 NSRS2007 StatePlane Massachusetts Isl FIPS 2002 (Meters)",
                "3587": "NAD 1983 NSRS2007 StatePlane Michigan Central FIPS 2112 (Meters)",
                "3589": "NAD 1983 NSRS2007 StatePlane Michigan North FIPS 2111 (Meters)",
                "3592": "NAD 1983 NSRS2007 StatePlane Michigan South FIPS 2113 (Meters)",
                "3594": "NAD 1983 NSRS2007 StatePlane Minnesota Central FIPS 2202 (Meters)",
                "3595": "NAD 1983 NSRS2007 StatePlane Minnesota North FIPS 2201 (Meters)",
                "3596": "NAD 1983 NSRS2007 StatePlane Minnesota South FIPS 2203 (Meters)",
                "3597": "NAD 1983 NSRS2007 StatePlane Mississippi East FIPS 2301 (Meters)",
                "3599": "NAD 1983 NSRS2007 StatePlane Mississippi West FIPS 2302 (Meters)",
                "3601": "NAD 1983 NSRS2007 StatePlane Missouri Central FIPS 2402 (Meters)",
                "3602": "NAD 1983 NSRS2007 StatePlane Missouri East FIPS 2401 (Meters)",
                "3603": "NAD 1983 NSRS2007 StatePlane Missouri West FIPS 2403 (Meters)",
                "3604": "NAD 1983 NSRS2007 StatePlane Montana FIPS 2500 (Meters)",
                "3606": "NAD 1983 NSRS2007 StatePlane Nebraska FIPS 2600 (Meters)",
                "3607": "NAD 1983 NSRS2007 StatePlane Nevada Central FIPS 2702 (Meters)",
                "3609": "NAD 1983 NSRS2007 StatePlane Nevada East FIPS 2701 (Meters)",
                "3611": "NAD 1983 NSRS2007 StatePlane Nevada West FIPS 2703 (Meters)",
                "3613": "NAD 1983 NSRS2007 StatePlane New Hampshire FIPS 2800 (Meters)",
                "3615": "NAD 1983 NSRS2007 StatePlane New Jersey FIPS 2900 (Meters)",
                "3617": "NAD 1983 NSRS2007 StatePlane New Mexico Central FIPS 3002 (Meters)",
                "3619": "NAD 1983 NSRS2007 StatePlane New Mexico East FIPS 3001 (Meters)",
                "3621": "NAD 1983 NSRS2007 StatePlane New Mexico West FIPS 3003 (Meters)",
                "3623": "NAD 1983 NSRS2007 StatePlane New York Central FIPS 3102 (Meters)",
                "3625": "NAD 1983 NSRS2007 StatePlane New York East FIPS 3101 (Meters)",
                "3627": "NAD 1983 NSRS2007 StatePlane New York Long Isl FIPS 3104 (Meters)",
                "3629": "NAD 1983 NSRS2007 StatePlane New York West FIPS 3103 (Meters)",
                "3631": "NAD 1983 NSRS2007 StatePlane North Carolina FIPS 3200 (Meters)",
                "3633": "NAD 1983 NSRS2007 StatePlane North Dakota N FIPS 3301 (Meters)",
                "3635": "NAD 1983 NSRS2007 StatePlane North Dakota S FIPS 3302 (Meters)",
                "3637": "NAD 1983 NSRS2007 StatePlane Ohio North FIPS 3401 (Meters)",
                "3638": "NAD 1983 NSRS2007 StatePlane Ohio South FIPS 3402 (Meters)",
                "3639": "NAD 1983 NSRS2007 StatePlane Oklahoma North FIPS 3501 (Meters)",
                "3641": "NAD 1983 NSRS2007 StatePlane Oklahoma South FIPS 3502 (Meters)",
                "3645": "NAD 1983 NSRS2007 StatePlane Oregon North FIPS 3601 (Meters)",
                "3647": "NAD 1983 NSRS2007 StatePlane Oregon South FIPS 3602 (Meters)",
                "4437": "NAD 1983 NSRS2007 StatePlane PR \u0026 VI FIPS 5200 (Meters)",
                "3649": "NAD 1983 NSRS2007 StatePlane Pennsylvania North FIPS 3701 (Meters)",
                "3651": "NAD 1983 NSRS2007 StatePlane Pennsylvania South FIPS 3702 (Meters)",
                "3653": "NAD 1983 NSRS2007 StatePlane Rhode Island FIPS 3800 (Meters)",
                "3655": "NAD 1983 NSRS2007 StatePlane South Carolina FIPS 3900 (Meters)",
                "3657": "NAD 1983 NSRS2007 StatePlane South Dakota N FIPS 4001 (Meters)",
                "3659": "NAD 1983 NSRS2007 StatePlane South Dakota S FIPS 4002 (Meters)",
                "3661": "NAD 1983 NSRS2007 StatePlane Tennessee FIPS 4100 (Meters)",
                "3663": "NAD 1983 NSRS2007 StatePlane Texas Central FIPS 4203 (Meters)",
                "3669": "NAD 1983 NSRS2007 StatePlane Texas N Central FIPS 4202 (Meters)",
                "3667": "NAD 1983 NSRS2007 StatePlane Texas North FIPS 4201 (Meters)",
                "3673": "NAD 1983 NSRS2007 StatePlane Texas S Central FIPS 4204 (Meters)",
                "3671": "NAD 1983 NSRS2007 StatePlane Texas South FIPS 4205 (Meters)",
                "3675": "NAD 1983 NSRS2007 StatePlane Utah Central FIPS 4302 (Meters)",
                "3678": "NAD 1983 NSRS2007 StatePlane Utah North FIPS 4301 (Meters)",
                "3681": "NAD 1983 NSRS2007 StatePlane Utah South FIPS 4303 (Meters)",
                "3684": "NAD 1983 NSRS2007 StatePlane Vermont FIPS 4400 (Meters)",
                "3685": "NAD 1983 NSRS2007 StatePlane Virginia North FIPS 4501 (Meters)",
                "3687": "NAD 1983 NSRS2007 StatePlane Virginia South FIPS 4502 (Meters)",
                "3689": "NAD 1983 NSRS2007 StatePlane Washington North FIPS 4601 (Meters)",
                "3691": "NAD 1983 NSRS2007 StatePlane Washington South FIPS 4602 (Meters)",
                "3693": "NAD 1983 NSRS2007 StatePlane West Virginia N FIPS 4701 (Meters)",
                "3694": "NAD 1983 NSRS2007 StatePlane West Virginia S FIPS 4702 (Meters)",
                "3695": "NAD 1983 NSRS2007 StatePlane Wisconsin Central FIPS 4802 (Meters)",
                "3697": "NAD 1983 NSRS2007 StatePlane Wisconsin North FIPS 4801 (Meters)",
                "3699": "NAD 1983 NSRS2007 StatePlane Wisconsin South FIPS 4803 (Meters)",
                "3703": "NAD 1983 NSRS2007 StatePlane Wyoming E Central FIPS 4902 (Meters)",
                "3702": "NAD 1983 NSRS2007 StatePlane Wyoming East FIPS 4901 (Meters)",
                "3704": "NAD 1983 NSRS2007 StatePlane Wyoming W Central FIPS 4903 (Meters)",
                "3705": "NAD 1983 NSRS2007 StatePlane Wyoming West FIPS 4904 (Meters)"
            },
            "NAD 1983 NSRS2007 (US Feet)": {
                "3485": "NAD 1983 NSRS2007 StatePlane Arkansas North FIPS 0301 (US Feet)",
                "3487": "NAD 1983 NSRS2007 StatePlane Arkansas South FIPS 0302 (US Feet)",
                "3490": "NAD 1983 NSRS2007 StatePlane California I FIPS 0401 (US Feet)",
                "3492": "NAD 1983 NSRS2007 StatePlane California II FIPS 0402 (US Feet)",
                "3494": "NAD 1983 NSRS2007 StatePlane California III FIPS 0403 (US Feet)",
                "3496": "NAD 1983 NSRS2007 StatePlane California IV FIPS 0404 (US Feet)",
                "3498": "NAD 1983 NSRS2007 StatePlane California V FIPS 0405 (US Feet)",
                "3500": "NAD 1983 NSRS2007 StatePlane California VI FIPS 0406 (US Feet)",
                "3502": "NAD 1983 NSRS2007 StatePlane Colorado Central FIPS 0502 (US Feet)",
                "3504": "NAD 1983 NSRS2007 StatePlane Colorado North FIPS 0501 (US Feet)",
                "3506": "NAD 1983 NSRS2007 StatePlane Colorado South FIPS 0503 (US Feet)",
                "3508": "NAD 1983 NSRS2007 StatePlane Connecticut FIPS 0600 (US Feet)",
                "3510": "NAD 1983 NSRS2007 StatePlane Delaware FIPS 0700 (US Feet)",
                "3512": "NAD 1983 NSRS2007 StatePlane Florida East FIPS 0901 (US Feet)",
                "3515": "NAD 1983 NSRS2007 StatePlane Florida North FIPS 0903 (US Feet)",
                "3517": "NAD 1983 NSRS2007 StatePlane Florida West FIPS 0902 (US Feet)",
                "3519": "NAD 1983 NSRS2007 StatePlane Georgia East FIPS 1001 (US Feet)",
                "3521": "NAD 1983 NSRS2007 StatePlane Georgia West FIPS 1002 (US Feet)",
                "3523": "NAD 1983 NSRS2007 StatePlane Idaho Central FIPS 1102 (US Feet)",
                "3525": "NAD 1983 NSRS2007 StatePlane Idaho East FIPS 1101 (US Feet)",
                "3527": "NAD 1983 NSRS2007 StatePlane Idaho West FIPS 1103 (US Feet)",
                "3529": "NAD 1983 NSRS2007 StatePlane Illinois East FIPS 1201 (US Feet)",
                "3531": "NAD 1983 NSRS2007 StatePlane Illinois West FIPS 1202 (US Feet)",
                "3533": "NAD 1983 NSRS2007 StatePlane Indiana East FIPS 1301 (US Feet)",
                "3535": "NAD 1983 NSRS2007 StatePlane Indiana West FIPS 1302 (US Feet)",
                "3537": "NAD 1983 NSRS2007 StatePlane Iowa North FIPS 1401 (US Feet)",
                "3539": "NAD 1983 NSRS2007 StatePlane Iowa South FIPS 1402 (US Feet)",
                "3541": "NAD 1983 NSRS2007 StatePlane Kansas North FIPS 1501 (US Feet)",
                "3543": "NAD 1983 NSRS2007 StatePlane Kansas South FIPS 1502 (US Feet)",
                "3547": "NAD 1983 NSRS2007 StatePlane Kentucky FIPS 1600 (US Feet)",
                "3545": "NAD 1983 NSRS2007 StatePlane Kentucky North FIPS 1601 (US Feet)",
                "3549": "NAD 1983 NSRS2007 StatePlane Kentucky South FIPS 1602 (US Feet)",
                "3551": "NAD 1983 NSRS2007 StatePlane Louisiana North FIPS 1701 (US Feet)",
                "3553": "NAD 1983 NSRS2007 StatePlane Louisiana South FIPS 1702 (US Feet)",
                "26863": "NAD 1983 NSRS2007 StatePlane Maine East FIPS 1801 (US Feet)",
                "26864": "NAD 1983 NSRS2007 StatePlane Maine West FIPS 1802 (US Feet)",
                "3582": "NAD 1983 NSRS2007 StatePlane Maryland FIPS 1900 (US Feet)",
                "3586": "NAD 1983 NSRS2007 StatePlane Massachusetts FIPS 2001 (US Feet)",
                "3584": "NAD 1983 NSRS2007 StatePlane Massachusetts Isl FIPS 2002 (US Feet)",
                "26866": "NAD 1983 NSRS2007 StatePlane Minnesota Central FIPS 2202 (US Feet)",
                "26865": "NAD 1983 NSRS2007 StatePlane Minnesota North FIPS 2201 (US Feet)",
                "26867": "NAD 1983 NSRS2007 StatePlane Minnesota South FIPS 2203 (US Feet)",
                "3598": "NAD 1983 NSRS2007 StatePlane Mississippi East FIPS 2301 (US Feet)",
                "3600": "NAD 1983 NSRS2007 StatePlane Mississippi West FIPS 2302 (US Feet)",
                "26868": "NAD 1983 NSRS2007 StatePlane Nebraska FIPS 2600 (US Feet)",
                "3608": "NAD 1983 NSRS2007 StatePlane Nevada Central FIPS 2702 (US Feet)",
                "3610": "NAD 1983 NSRS2007 StatePlane Nevada East FIPS 2701 (US Feet)",
                "3612": "NAD 1983 NSRS2007 StatePlane Nevada West FIPS 2703 (US Feet)",
                "3614": "NAD 1983 NSRS2007 StatePlane New Hampshire FIPS 2800 (US Feet)",
                "3616": "NAD 1983 NSRS2007 StatePlane New Jersey FIPS 2900 (US Feet)",
                "3618": "NAD 1983 NSRS2007 StatePlane New Mexico Central FIPS3002 (US Feet)",
                "3620": "NAD 1983 NSRS2007 StatePlane New Mexico East FIPS 3001 (US Feet)",
                "3622": "NAD 1983 NSRS2007 StatePlane New Mexico West FIPS 3003 (US Feet)",
                "3624": "NAD 1983 NSRS2007 StatePlane New York Central FIPS 3102 (US Feet)",
                "3626": "NAD 1983 NSRS2007 StatePlane New York East FIPS 3101 (US Feet)",
                "3628": "NAD 1983 NSRS2007 StatePlane New York Long Isl FIPS 3104 (US Feet)",
                "3630": "NAD 1983 NSRS2007 StatePlane New York West FIPS 3103 (US Feet)",
                "3632": "NAD 1983 NSRS2007 StatePlane North Carolina FIPS 3200 (US Feet)",
                "3728": "NAD 1983 NSRS2007 StatePlane Ohio North FIPS 3401 (US Feet)",
                "3729": "NAD 1983 NSRS2007 StatePlane Ohio South FIPS 3402 (US Feet)",
                "3640": "NAD 1983 NSRS2007 StatePlane Oklahoma North FIPS 3501 (US Feet)",
                "3642": "NAD 1983 NSRS2007 StatePlane Oklahoma South FIPS 3502 (US Feet)",
                "3650": "NAD 1983 NSRS2007 StatePlane Pennsylvania North FIPS3701 (US Feet)",
                "3652": "NAD 1983 NSRS2007 StatePlane Pennsylvania South FIPS3702 (US Feet)",
                "3654": "NAD 1983 NSRS2007 StatePlane Rhode Island FIPS 3800 (US Feet)",
                "3658": "NAD 1983 NSRS2007 StatePlane South Dakota N FIPS 4001 (US Feet)",
                "3660": "NAD 1983 NSRS2007 StatePlane South Dakota S FIPS 4002 (US Feet)",
                "3662": "NAD 1983 NSRS2007 StatePlane Tennessee FIPS 4100 (US Feet)",
                "3664": "NAD 1983 NSRS2007 StatePlane Texas Central FIPS 4203 (US Feet)",
                "3670": "NAD 1983 NSRS2007 StatePlane Texas N Central FIPS 4202 (US Feet)",
                "3668": "NAD 1983 NSRS2007 StatePlane Texas North FIPS 4201 (US Feet)",
                "3674": "NAD 1983 NSRS2007 StatePlane Texas S Central FIPS 4204 (US Feet)",
                "3672": "NAD 1983 NSRS2007 StatePlane Texas South FIPS 4205 (US Feet)",
                "3677": "NAD 1983 NSRS2007 StatePlane Utah Central FIPS 4302 (US Feet)",
                "3680": "NAD 1983 NSRS2007 StatePlane Utah North FIPS 4301 (US Feet)",
                "3683": "NAD 1983 NSRS2007 StatePlane Utah South FIPS 4303 (US Feet)",
                "5655": "NAD 1983 NSRS2007 StatePlane Vermont FIPS 4400 (US Feet)",
                "3686": "NAD 1983 NSRS2007 StatePlane Virginia North FIPS 4501 (US Feet)",
                "3688": "NAD 1983 NSRS2007 StatePlane Virginia South FIPS 4502 (US Feet)",
                "3690": "NAD 1983 NSRS2007 StatePlane Washington North FIPS 4601 (US Feet)",
                "3692": "NAD 1983 NSRS2007 StatePlane Washington South FIPS 4602 (US Feet)",
                "26869": "NAD 1983 NSRS2007 StatePlane West Virginia N FIPS 4701 (US Feet)",
                "26870": "NAD 1983 NSRS2007 StatePlane West Virginia S FIPS 4702 (US Feet)",
                "3696": "NAD 1983 NSRS2007 StatePlane Wisconsin Central FIPS 4802 (US Feet)",
                "3698": "NAD 1983 NSRS2007 StatePlane Wisconsin North FIPS 4801 (US Feet)",
                "3700": "NAD 1983 NSRS2007 StatePlane Wisconsin South FIPS 4803 (US Feet)",
                "3731": "NAD 1983 NSRS2007 StatePlane Wyoming E Central FIPS 4902 (US Feet)",
                "3730": "NAD 1983 NSRS2007 StatePlane Wyoming East FIPS 4901 (US Feet)",
                "3732": "NAD 1983 NSRS2007 StatePlane Wyoming W Central FIPS 4903 (US Feet)",
                "3733": "NAD 1983 NSRS2007 StatePlane Wyoming West FIPS 4904 (US Feet)"
            },
            "Other GCS": {
                "65062": "American Samoa 1962 StatePlane Amer. Samoa FIPS 5300 (US Feet)",
                "102240": "Guam Geodetic Network 1993 (Meters)",
                "102239": "Guam Geodetic Triangulation Network 1963 (Meters)",
                "4414": "NAD 1983 HARN Guam Map Grid (Meters)",
                "6637": "NAD 1983 MA11 Guam Map Grid (Meters)",
                "3561": "Old Hawaiian StatePlane Hawaii 1 FIPS 5101 (US Feet)",
                "3562": "Old Hawaiian StatePlane Hawaii 2 FIPS 5102 (US Feet)",
                "3563": "Old Hawaiian StatePlane Hawaii 3 FIPS 5103 (US Feet)",
                "3564": "Old Hawaiian StatePlane Hawaii 4 FIPS 5104 (US Feet)",
                "3565": "Old Hawaiian StatePlane Hawaii 5 FIPS 5105 (US Feet)",
                "3991": "Puerto Rico StatePlane Puerto Rico FIPS 5201 (US Feet)",
                "3992": "Puerto Rico StatePlane Virgin Isl St.Croix FIPS 5202 (US Feet)"
            }
        },
        "State Systems": {
            "102117": "NAD 1927 Alaska Albers (Meters)",
            "2964": "NAD 1927 Alaska Albers (US Feet)",
            "3309": "NAD 1927 California (Teale) Albers (Meters)",
            "102118": "NAD 1927 Georgia Statewide Albers (US Feet)",
            "102122": "NAD 1927 Michigan GeoRef (Meters)",
            "102120": "NAD 1927 Michigan GeoRef (US Feet)",
            "3069": "NAD 1927 Wisconsin TM (Meters)",
            "6393": "NAD 1983 (2011) Alaska Albers (Meters)",
            "6414": "NAD 1983 (2011) California (Teale) Albers (Meters)",
            "6439": "NAD 1983 (2011) Florida GDL Albers (Meters)",
            "6924": "NAD 1983 (2011) Kansas LCC",
            "6925": "NAD 1983 (2011) Kansas LCC ftUS",
            "6497": "NAD 1983 (2011) Michigan GeoRef (Meters)",
            "6508": "NAD 1983 (2011) Mississippi TM (Meters)",
            "6591": "NAD 1983 (2011) Virginia Lambert (Meters)",
            "6610": "NAD 1983 (2011) Wisconsin TM (Meters)",
            "102974": "NAD 1983 (2011) Wisconsin TM (US Feet)",
            "102247": "NAD 1983 (CORS96) Alaska Albers (Meters)",
            "102399": "NAD 1983 Albers BLM Montana, North Dakota, South Dakota",
            "102760": "NAD 1983 California (Teale) Albers (Intl Feet)",
            "3310": "NAD 1983 California (Teale) Albers (Meters)",
            "102600": "NAD 1983 California (Teale) Albers (US Feet)",
            "3086": "NAD 1983 Florida GDL Albers (Meters)",
            "102604": "NAD 1983 Georgia Statewide Lambert (US Feet)",
            "3311": "NAD 1983 HARN California (Teale) Albers (Meters)",
            "3087": "NAD 1983 HARN Florida GDL Albers (Meters)",
            "3079": "NAD 1983 HARN Michigan GeoRef (Meters)",
            "3815": "NAD 1983 HARN Mississippi TM (Meters)",
            "3969": "NAD 1983 HARN Virginia Lambert (Meters)",
            "3071": "NAD 1983 HARN Wisconsin TM (Meters)",
            "102220": "NAD 1983 HARN Wisconsin TM (US Feet)",
            "8826": "NAD 1983 Idaho TM (Meters)",
            "6922": "NAD 1983 Kansas LCC",
            "6923": "NAD 1983 Kansas LCC ftUS",
            "3078": "NAD 1983 Michigan GeoRef (Meters)",
            "102121": "NAD 1983 Michigan GeoRef (US Feet)",
            "3814": "NAD 1983 Mississippi TM (Meters)",
            "3467": "NAD 1983 NSRS2007 Alaska Albers (Meters)",
            "3488": "NAD 1983 NSRS2007 California (Teale) Albers (Meters)",
            "3513": "NAD 1983 NSRS2007 Florida GDL Albers (Meters)",
            "3591": "NAD 1983 NSRS2007 Michigan GeoRef (Meters)",
            "3816": "NAD 1983 NSRS2007 Mississippi TM (Meters)",
            "3970": "NAD 1983 NSRS2007 Virginia Lambert (Meters)",
            "3701": "NAD 1983 NSRS2007 Wisconsin TM (Meters)",
            "102217": "NAD 1983 NSRS2007 Wisconsin TM (US Feet)",
            "9674": "NAD 1983 USFS R6 Albers (Meters)",
            "102042": "NAD 1983 USFS R9 Albers (Meters)",
            "3968": "NAD 1983 Virginia Lambert (Meters)",
            "3070": "NAD 1983 Wisconsin TM (Meters)",
            "102219": "NAD 1983 Wisconsin TM (US Feet)",
            "102212": "NAD 1983 WyLam (Meters)",
            "102759": "WGS 1984 California (Teale) Albers (Intl Feet)",
            "102599": "WGS 1984 California (Teale) Albers (US Feet)",
            Oregon: {
                "6557": "NAD 1983 (2011) Oregon Statewide Lambert (Intl Feet)",
                "6556": "NAD 1983 (2011) Oregon Statewide Lambert (Meters)",
                "6868": "NAD 1983 (CORS96) Oregon Statewide Lambert (Intl Feet)",
                "6867": "NAD 1983 (CORS96) Oregon Statewide Lambert (Meters)",
                "2994": "NAD 1983 HARN Oregon Statewide Lambert (Intl Feet)",
                "2993": "NAD 1983 HARN Oregon Statewide Lambert (Meters)",
                "3644": "NAD 1983 NSRS2007 Oregon Statewide Lambert (Intl Feet)",
                "3643": "NAD 1983 NSRS2007 Oregon Statewide Lambert (Meters)",
                "2992": "NAD 1983 Oregon Statewide Lambert (Intl Feet)",
                "2991": "NAD 1983 Oregon Statewide Lambert (Meters)",
                "6787": "OCRS Baker NAD 1983 2011 TM (Feet Intl)",
                "6786": "OCRS Baker NAD 1983 2011 TM (Meters)",
                "6785": "OCRS Baker NAD 1983 CORS96 TM (Feet Intl)",
                "6784": "OCRS Baker NAD 1983 CORS96 TM (Meters)",
                "6799": "OCRS Bend-Burns NAD 1983 2011 LCC (Feet Intl)",
                "6798": "OCRS Bend-Burns NAD 1983 2011 LCC (Meters)",
                "6797": "OCRS Bend-Burns NAD 1983 CORS96 LCC (Feet Intl)",
                "6796": "OCRS Bend-Burns NAD 1983 CORS96 LCC (Meters)",
                "6791": "OCRS Bend-Klamath Falls NAD 1983 2011 TM (Feet Intl)",
                "6790": "OCRS Bend-Klamath Falls NAD 1983 2011 TM (Meters)",
                "6789": "OCRS Bend-Klamath Falls NAD 1983 CORS96 TM (Feet Intl)",
                "6788": "OCRS Bend-Klamath Falls NAD 1983 CORS96 TM (Meters)",
                "6795": "OCRS Bend-Redmond-Prineville NAD 1983 2011 LCC (Feet Intl)",
                "6794": "OCRS Bend-Redmond-Prineville NAD 1983 2011 LCC (Meters)",
                "6793": "OCRS Bend-Redmond-Prineville NAD 1983 CORS96 LCC (Feet Intl)",
                "6792": "OCRS Bend-Redmond-Prineville NAD 1983 CORS96 LCC (Meters)",
                "8312": "OCRS Burns-Harper NAD 1983 2011 TM (Feet Intl)",
                "8311": "OCRS Burns-Harper NAD 1983 2011 TM (Meters)",
                "8314": "OCRS Canyon City-Burns NAD 1983 2011 TM (Feet Intl)",
                "8313": "OCRS Canyon City-Burns NAD 1983 2011 TM (Meters)",
                "6803": "OCRS Canyonville-Grants Pass NAD 1983 2011 TM (Feet Intl)",
                "6802": "OCRS Canyonville-Grants Pass NAD 1983 2011 TM (Meters)",
                "6801": "OCRS Canyonville-Grants Pass NAD 1983 CORS96 TM (Feet Intl)",
                "6800": "OCRS Canyonville-Grants Pass NAD 1983 CORS96 TM (Meters)",
                "8316": "OCRS Coast Range North NAD 1983 2011 LCC (Feet Intl)",
                "8315": "OCRS Coast Range North NAD 1983 2011 LCC (Meters)",
                "6807": "OCRS Columbia River East NAD 1983 2011 LCC (Feet Intl)",
                "6806": "OCRS Columbia River East NAD 1983 2011 LCC (Meters)",
                "6805": "OCRS Columbia River East NAD 1983 CORS96 LCC (Feet Intl)",
                "6804": "OCRS Columbia River East NAD 1983 CORS96 LCC (Meters)",
                "6811": "OCRS Columbia River West NAD 1983 2011 OM (Feet Intl)",
                "6810": "OCRS Columbia River West NAD 1983 2011 OM (Meters)",
                "6809": "OCRS Columbia River West NAD 1983 CORS96 OM (Feet Intl)",
                "6808": "OCRS Columbia River West NAD 1983 CORS96 OM (Meters)",
                "6815": "OCRS Cottage Grove-Canyonville NAD 1983 2011 TM (Feet Intl)",
                "6814": "OCRS Cottage Grove-Canyonville NAD 1983 2011 TM (Meters)",
                "6813": "OCRS Cottage Grove-Canyonville NAD 1983 CORS96 TM (Feet Intl)",
                "6812": "OCRS Cottage Grove-Canyonville NAD 1983 CORS96 TM (Meters)",
                "8318": "OCRS Dayville-Prairie City NAD 1983 2011 TM (Feet Intl)",
                "8317": "OCRS Dayville-Prairie City NAD 1983 2011 TM (Meters)",
                "8320": "OCRS Denio-Burns NAD 1983 2011 TM (Feet Intl)",
                "8319": "OCRS Denio-Burns NAD 1983 2011 TM (Meters)",
                "6819": "OCRS Dufur-Madras NAD 1983 2011 TM (Feet Intl)",
                "6818": "OCRS Dufur-Madras NAD 1983 2011 TM (Meters)",
                "6817": "OCRS Dufur-Madras NAD 1983 CORS96 TM (Feet Intl)",
                "6816": "OCRS Dufur-Madras NAD 1983 CORS96 TM (Meters)",
                "6823": "OCRS Eugene NAD 1983 2011 TM (Feet Intl)",
                "6822": "OCRS Eugene NAD 1983 2011 TM (Meters)",
                "6821": "OCRS Eugene NAD 1983 CORS96 TM (Feet Intl)",
                "6820": "OCRS Eugene NAD 1983 CORS96 TM (Meters)",
                "6827": "OCRS Grants Pass-Ashland NAD 1983 2011 TM (Feet Intl)",
                "6826": "OCRS Grants Pass-Ashland NAD 1983 2011 TM (Meters)",
                "6825": "OCRS Grants Pass-Ashland NAD 1983 CORS96 TM (Feet Intl)",
                "6824": "OCRS Grants Pass-Ashland NAD 1983 CORS96 TM (Meters)",
                "6831": "OCRS Gresham-Warm Springs NAD 1983 2011 TM (Feet Intl)",
                "6830": "OCRS Gresham-Warm Springs NAD 1983 2011 TM (Meters)",
                "6829": "OCRS Gresham-Warm Springs NAD 1983 CORS96 TM (Feet Intl)",
                "6828": "OCRS Gresham-Warm Springs NAD 1983 CORS96 TM (Meters)",
                "8322": "OCRS Halfway NAD 1983 2011 LCC (Feet Intl)",
                "8321": "OCRS Halfway NAD 1983 2011 LCC (Meters)",
                "6835": "OCRS La Grande NAD 1983 2011 TM (Feet Intl)",
                "6834": "OCRS La Grande NAD 1983 2011 TM (Meters)",
                "6833": "OCRS La Grande NAD 1983 CORS96 TM (Feet Intl)",
                "6832": "OCRS La Grande NAD 1983 CORS96 TM (Meters)",
                "8324": "OCRS Medford-Diamond Lake NAD 1983 2011 LCC (Feet Intl)",
                "8323": "OCRS Medford-Diamond Lake NAD 1983 2011 LCC (Meters)",
                "8326": "OCRS Mitchell NAD 1983 2011 LCC (Feet Intl)",
                "8325": "OCRS Mitchell NAD 1983 2011 LCC (Meters)",
                "8328": "OCRS North Central NAD 1983 2011 LCC (Feet Intl)",
                "8327": "OCRS North Central NAD 1983 2011 LCC (Meters)",
                "8330": "OCRS Ochoco Summit NAD 1983 2011 LCC (Feet Intl)",
                "8329": "OCRS Ochoco Summit NAD 1983 2011 LCC (Meters)",
                "6839": "OCRS Ontario NAD 1983 2011 TM (Feet Intl)",
                "6838": "OCRS Ontario NAD 1983 2011 TM (Meters)",
                "6837": "OCRS Ontario NAD 1983 CORS96 TM (Feet Intl)",
                "6836": "OCRS Ontario NAD 1983 CORS96 TM (Meters)",
                "6843": "OCRS Oregon Coast NAD 1983 2011 OM (Feet Intl)",
                "6842": "OCRS Oregon Coast NAD 1983 2011 OM (Meters)",
                "6841": "OCRS Oregon Coast NAD 1983 CORS96 OM (Feet Intl)",
                "6840": "OCRS Oregon Coast NAD 1983 CORS96 OM (Meters)",
                "8332": "OCRS Owyhee NAD 1983 2011 TM (Feet Intl)",
                "8331": "OCRS Owyhee NAD 1983 2011 TM (Meters)",
                "6847": "OCRS Pendleton NAD 1983 2011 TM (Feet Intl)",
                "6846": "OCRS Pendleton NAD 1983 2011 TM (Meters)",
                "6845": "OCRS Pendleton NAD 1983 CORS96 TM (Feet Intl)",
                "6844": "OCRS Pendleton NAD 1983 CORS96 TM (Meters)",
                "6851": "OCRS Pendleton-La Grande NAD 1983 2011 TM (Feet Intl)",
                "6850": "OCRS Pendleton-La Grande NAD 1983 2011 TM (Meters)",
                "6849": "OCRS Pendleton-La Grande NAD 1983 CORS96 TM (Feet Intl)",
                "6848": "OCRS Pendleton-La Grande NAD 1983 CORS96 TM (Meters)",
                "8334": "OCRS Pilot Rock-Ukiah NAD 1983 2011 LCC (Feet Intl)",
                "8333": "OCRS Pilot Rock-Ukiah NAD 1983 2011 LCC (Meters)",
                "6855": "OCRS Portland NAD 1983 2011 LCC (Feet Intl)",
                "6854": "OCRS Portland NAD 1983 2011 LCC (Meters)",
                "6853": "OCRS Portland NAD 1983 CORS96 LCC (Feet Intl)",
                "6852": "OCRS Portland NAD 1983 CORS96 LCC (Meters)",
                "8336": "OCRS Prairie City-Brogan NAD 1983 2011 LCC (Feet Intl)",
                "8335": "OCRS Prairie City-Brogan NAD 1983 2011 LCC (Meters)",
                "8338": "OCRS Riley-Lakeview NAD 1983 2011 TM (Feet Intl)",
                "8337": "OCRS Riley-Lakeview NAD 1983 2011 TM (Meters)",
                "6859": "OCRS Salem NAD 1983 2011 TM (Feet Intl)",
                "6858": "OCRS Salem NAD 1983 2011 TM (Meters)",
                "6857": "OCRS Salem NAD 1983 CORS96 TM (Feet Intl)",
                "6856": "OCRS Salem NAD 1983 CORS96 TM (Meters)",
                "6863": "OCRS Santiam Pass NAD 1983 2011 TM (Feet Intl)",
                "6862": "OCRS Santiam Pass NAD 1983 2011 TM (Meters)",
                "6861": "OCRS Santiam Pass NAD 1983 CORS96 TM (Feet Intl)",
                "6860": "OCRS Santiam Pass NAD 1983 CORS96 TM (Meters)",
                "8340": "OCRS Siskiyou Pass NAD 1983 2011 LCC (Feet Intl)",
                "8339": "OCRS Siskiyou Pass NAD 1983 2011 LCC (Meters)",
                "8342": "OCRS Ukiah-Fox NAD 1983 2011 LCC (Feet Intl)",
                "8341": "OCRS Ukiah-Fox NAD 1983 2011 LCC (Meters)",
                "8344": "OCRS Wallowa NAD 1983 2011 TM (Feet Intl)",
                "8343": "OCRS Wallowa NAD 1983 2011 TM (Meters)",
                "8346": "OCRS Warner Highway NAD 1983 2011 LCC (Feet Intl)",
                "8345": "OCRS Warner Highway NAD 1983 2011 LCC (Meters)",
                "8348": "OCRS Willamette Pass NAD 1983 2011 TM (Feet Intl)",
                "8347": "OCRS Willamette Pass NAD 1983 2011 TM (Meters)"
            },
            Texas: {
                "3080": "NAD 1927 Texas Statewide Mapping System (Intl Feet)",
                "6579": "NAD 1983 (2011) Texas Centric Mapping System Albers (Meters)",
                "6580": "NAD 1983 (2011) Texas Centric Mapping System Lambert (Meters)",
                "3085": "NAD 1983 HARN Texas Centric Mapping System Albers (Meters)",
                "3084": "NAD 1983 HARN Texas Centric Mapping System Lambert (Meters)",
                "3665": "NAD 1983 NSRS2007 Texas Centric Mapping System Albers (Meters)",
                "3666": "NAD 1983 NSRS2007 Texas Centric Mapping System Lambert (Meters)",
                "3083": "NAD 1983 Texas Centric Mapping System Albers (Meters)",
                "3082": "NAD 1983 Texas Centric Mapping System Lambert (Meters)",
                "3081": "NAD 1983 Texas Statewide Mapping System (Meters)"
            }
        },
        Tribal: {
            Montana: {
                "7127": "NAD 1983 (2011) RMTCRS Billings (Intl Feet)",
                "7117": "NAD 1983 (2011) RMTCRS Billings (Meters)",
                "7120": "NAD 1983 (2011) RMTCRS Blackfeet (Intl Feet)",
                "7110": "NAD 1983 (2011) RMTCRS Blackfeet (Meters)",
                "7126": "NAD 1983 (2011) RMTCRS Bobcat (Intl Feet)",
                "7116": "NAD 1983 (2011) RMTCRS Bobcat (Meters)",
                "7125": "NAD 1983 (2011) RMTCRS Crow (Intl Feet)",
                "7115": "NAD 1983 (2011) RMTCRS Crow (Meters)",
                "7122": "NAD 1983 (2011) RMTCRS Fort Belknap (Intl Feet)",
                "7112": "NAD 1983 (2011) RMTCRS Fort Belknap (Meters)",
                "7123": "NAD 1983 (2011) RMTCRS Fort Peck Assiniboine (Intl Feet)",
                "7113": "NAD 1983 (2011) RMTCRS Fort Peck Assiniboine (Meters)",
                "7124": "NAD 1983 (2011) RMTCRS Fort Peck Sioux (Intl Feet)",
                "7114": "NAD 1983 (2011) RMTCRS Fort Peck Sioux (Meters)",
                "7121": "NAD 1983 (2011) RMTCRS Milk River (Intl Feet)",
                "7111": "NAD 1983 (2011) RMTCRS Milk River (Meters)",
                "7119": "NAD 1983 (2011) RMTCRS St Mary (Intl Feet)",
                "7109": "NAD 1983 (2011) RMTCRS St Mary (Meters)"
            },
            Navajo: {
                "103594": "NAD 1983 (2011) Navajo Nation Coordinate System (Intl Feet)",
                "103592": "NAD 1983 (2011) Navajo Nation Coordinate System (Meters)",
                "103593": "NAD 1983 (2011) Navajo Nation Coordinate System (US Feet)",
                "103588": "NAD 1983 HARN Navajo Nation Coordinate System (Intl Feet)",
                "103586": "NAD 1983 HARN Navajo Nation Coordinate System (Meters)",
                "103587": "NAD 1983 HARN Navajo Nation Coordinate System (US Feet)",
                "103591": "NAD 1983 NSRS2007 Navajo Nation Coordinate System (Intl Feet)",
                "103589": "NAD 1983 NSRS2007 Navajo Nation Coordinate System (Meters)",
                "103590": "NAD 1983 NSRS2007 Navajo Nation Coordinate System (US Feet)"
            },
            Wyoming: {
                "7118": "NAD 1983 (2011) RMTCRS Wind River (Meters)",
                "7128": "NAD 1983 (2011) RMTCRS Wind River (US Feet)"
            }
        },
        UTM: {
            Africa: {
                "2043": "Abidjan 1987 UTM Zone 29N",
                "2041": "Abidjan 1987 UTM Zone 30N",
                "20135": "Adindan UTM Zone 35N",
                "20136": "Adindan UTM Zone 36N",
                "20137": "Adindan UTM Zone 37N",
                "20138": "Adindan UTM Zone 38N",
                "20934": "Arc 1950 UTM Zone 34S",
                "20935": "Arc 1950 UTM Zone 35S",
                "20936": "Arc 1950 UTM Zone 36S",
                "21095": "Arc 1960 UTM Zone 35N",
                "21035": "Arc 1960 UTM Zone 35S",
                "21096": "Arc 1960 UTM Zone 36N",
                "21036": "Arc 1960 UTM Zone 36S",
                "21097": "Arc 1960 UTM Zone 37N",
                "21037": "Arc 1960 UTM Zone 37S",
                "2095": "Bissau UTM Zone 28N",
                "22032": "Camacupa UTM Zone 32S",
                "22033": "Camacupa UTM Zone 33S",
                "22234": "Cape UTM Zone 34S",
                "22235": "Cape UTM Zone 35S",
                "22236": "Cape UTM Zone 36S",
                "22332": "Carthage UTM Zone 32N",
                "31528": "Conakry 1905 UTM Zone 28N",
                "31529": "Conakry 1905 UTM Zone 29N",
                "22832": "Douala UTM Zone 32N",
                "2312": "Garoua UTM Zone 33N",
                "3342": "IGCB 1955 Congo UTM Zone 33S",
                "3367": "IGN Astro 1960 UTM Zone 28N",
                "3368": "IGN Astro 1960 UTM Zone 29N",
                "3369": "IGN Astro 1960 UTM Zone 30N",
                "2313": "Kousseri UTM Zone 33N",
                "3199": "LGD2006 UTM Zone 32N",
                "3201": "LGD2006 UTM Zone 33N",
                "3202": "LGD2006 UTM Zone 34N",
                "3203": "LGD2006 UTM Zone 35N",
                "2042": "Locodjo 1965 UTM Zone 29N",
                "2040": "Locodjo 1965 UTM Zone 30N",
                "25231": "Lome UTM Zone 31N",
                "26632": "M\u0027poraloko UTM Zone 32N",
                "26692": "M\u0027poraloko UTM Zone 32S",
                "25932": "Malongo 1987 UTM Zone 32S",
                "7992": "Malongo 1987 UTM zone 33S",
                "2215": "Manoca 1962 UTM Zone 32N",
                "26237": "Massawa UTM Zone 37N",
                "3343": "Mauritania 1999 UTM Zone 28N",
                "3344": "Mauritania 1999 UTM Zone 29N",
                "3345": "Mauritania 1999 UTM Zone 30N",
                "102144": "Merchich (degrees) UTM Zone 28N",
                "3354": "Mhast (offshore) UTM Zone 32S",
                "3353": "Mhast (onshore) UTM Zone 32S",
                "26331": "Minna UTM Zone 31N",
                "26332": "Minna UTM Zone 32N",
                "3036": "Moznet UTM Zone 36S",
                "3037": "Moznet UTM Zone 37S",
                "5629": "Moznet UTM Zone 38S",
                "31838": "NGN UTM Zone 38N",
                "31839": "NGN UTM Zone 39N",
                "30729": "Nord Sahara 1959 UTM Zone 29N",
                "30730": "Nord Sahara 1959 UTM Zone 30N",
                "30731": "Nord Sahara 1959 UTM Zone 31N",
                "30732": "Nord Sahara 1959 UTM Zone 32N",
                "28232": "Pointe Noire UTM Zone 32S",
                "4061": "RGRDC 2005 UTM Zone 33S",
                "4062": "RGRDC 2005 UTM Zone 34S",
                "4063": "RGRDC 2005 UTM Zone 35S",
                "29333": "Schwarzeck UTM Zone 33S",
                "2161": "Sierra Leone 1968 UTM Zone 28N",
                "2162": "Sierra Leone 1968 UTM Zone 29N",
                "29635": "Sudan UTM Zone 35N",
                "29636": "Sudan UTM Zone 36N",
                "29738": "Tananarive 1925 UTM Zone 38S",
                "29739": "Tananarive 1925 UTM Zone 39S",
                "2736": "Tete UTM Zone 36S",
                "2737": "Tete UTM Zone 37S",
                "31028": "Yoff 1972 UTM Zone 28N"
            },
            Asia: {
                "20538": "Afgooye UTM Zone 38N",
                "20539": "Afgooye UTM Zone 39N",
                "20436": "Ain el Abd 1970 UTM Zone 36N",
                "20437": "Ain el Abd 1970 UTM Zone 37N",
                "20438": "Ain el Abd 1970 UTM Zone 38N",
                "20439": "Ain el Abd 1970 UTM Zone 39N",
                "20440": "Ain el Abd 1970 UTM Zone 40N",
                "3461": "Dabola 1981 UTM Zone 28N",
                "3462": "Dabola 1981 UTM Zone 29N",
                "23239": "Fahud UTM Zone 39N",
                "23240": "Fahud UTM Zone 40N",
                "102141": "Hong Kong 1980 UTM Zone 49N",
                "102142": "Hong Kong 1980 UTM Zone 50N",
                "3829": "Hu Tzu Shan UTM Zone 51N",
                "3064": "IGM 1995 UTM Zone 32N",
                "3065": "IGM 1995 UTM Zone 33N",
                "3890": "IGRS UTM Zone 37N",
                "3891": "IGRS UTM Zone 38N",
                "3892": "IGRS UTM Zone 39N",
                "23946": "Indian 1954 UTM Zone 46N",
                "23947": "Indian 1954 UTM Zone 47N",
                "23948": "Indian 1954 UTM Zone 48N",
                "3148": "Indian 1960 UTM Zone 48N",
                "3149": "Indian 1960 UTM Zone 49N",
                "24047": "Indian 1975 UTM Zone 47N",
                "24048": "Indian 1975 UTM Zone 48N",
                "3097": "JGD 2000 UTM Zone 51N",
                "3098": "JGD 2000 UTM Zone 52N",
                "3099": "JGD 2000 UTM Zone 53N",
                "3100": "JGD 2000 UTM Zone 54N",
                "3101": "JGD 2000 UTM Zone 55N",
                "102150": "JGD 2000 UTM Zone 56N",
                "6688": "JGD 2011 UTM Zone 51N",
                "6689": "JGD 2011 UTM Zone 52N",
                "6690": "JGD 2011 UTM Zone 53N",
                "6691": "JGD 2011 UTM Zone 54N",
                "6692": "JGD 2011 UTM Zone 55N",
                "102598": "JGD 2011 UTM Zone 56N",
                "9356": "KSA-GRF17 UTM zone 36N",
                "9357": "KSA-GRF17 UTM zone 37N",
                "9358": "KSA-GRF17 UTM zone 38N",
                "9359": "KSA-GRF17 UTM zone 39N",
                "9360": "KSA-GRF17 UTM zone 40N",
                "3391": "Karbala 1979 Polservice UTM Zone 37N",
                "3392": "Karbala 1979 Polservice UTM Zone 38N",
                "3393": "Karbala 1979 Polservice UTM Zone 39N",
                "102453": "Luzon 1911 UTM Zone 50N",
                "102454": "Luzon 1911 UTM Zone 51N",
                "102455": "Luzon 1911 UTM Zone 52N",
                "102224": "MONREF 1997 UTM Zone 46 N",
                "102225": "MONREF 1997 UTM Zone 47 N",
                "102226": "MONREF 1997 UTM Zone 48 N",
                "102227": "MONREF 1997 UTM Zone 49 N",
                "102228": "MONREF 1997 UTM Zone 50 N",
                "8836": "MTRF 2000 UTM zone 36N",
                "8837": "MTRF 2000 UTM zone 37N",
                "8838": "MTRF 2000 UTM zone 38N",
                "8839": "MTRF 2000 UTM zone 39N",
                "8840": "MTRF 2000 UTM zone 40N",
                "7005": "Nahrwan 1934 UTM zone 37N",
                "7006": "Nahrwan 1934 UTM zone 38N",
                "7007": "Nahrwan 1934 UTM zone 39N",
                "27037": "Nahrwan 1967 UTM Zone 37N",
                "27038": "Nahrwan 1967 UTM Zone 38N",
                "27039": "Nahrwan 1967 UTM Zone 39N",
                "27040": "Nahrwan 1967 UTM Zone 40N",
                "3307": "Nakhl-e Ghanem UTM Zone 39N",
                "7374": "ONGD14 UTM Zone 39N",
                "7375": "ONGD14 UTM Zone 40N",
                "7376": "ONGD14 UTM Zone 41N",
                "9295": "ONGD17 UTM Zone 39N",
                "9296": "ONGD17 UTM Zone 40N",
                "9297": "ONGD17 UTM Zone 41N",
                "3439": "PDO 1993 UTM Zone 39N",
                "3440": "PDO 1993 UTM Zone 40N",
                "102456": "PRS 1992 UTM Zone 50N",
                "102457": "PRS 1992 UTM Zone 51N",
                "102458": "PRS 1992 UTM Zone 52N",
                "102143": "QND 1995 UTM Zone 39N",
                "2550": "Samboja UTM Zone 50S",
                "3092": "Tokyo UTM Zone 51N",
                "3093": "Tokyo UTM Zone 52N",
                "3094": "Tokyo UTM Zone 53N",
                "3095": "Tokyo UTM Zone 54N",
                "3096": "Tokyo UTM Zone 55N",
                "102156": "Tokyo UTM Zone 56N",
                "30339": "Trucial Coast 1948 UTM Zone 39N",
                "30340": "Trucial Coast 1948 UTM Zone 40N",
                "3405": "VN 2000 UTM Zone 48N",
                "3406": "VN 2000 UTM Zone 49N",
                "5836": "Yemen NGN 1996 UTM Zone 37N",
                "2089": "Yemen NGN 1996 UTM Zone 38N",
                "2090": "Yemen NGN 1996 UTM Zone 39N",
                "5837": "Yemen NGN 1996 UTM Zone 40N"
            },
            "BLM (US Feet)": {
                "4401": "NAD 1927 BLM Zone  1N (US Feet)",
                "4402": "NAD 1927 BLM Zone  2N (US Feet)",
                "4403": "NAD 1927 BLM Zone  3N (US Feet)",
                "4404": "NAD 1927 BLM Zone  4N (US Feet)",
                "4405": "NAD 1927 BLM Zone  5N (US Feet)",
                "4406": "NAD 1927 BLM Zone  6N (US Feet)",
                "4407": "NAD 1927 BLM Zone  7N (US Feet)",
                "4408": "NAD 1927 BLM Zone  8N (US Feet)",
                "4409": "NAD 1927 BLM Zone  9N (US Feet)",
                "4410": "NAD 1927 BLM Zone 10N (US Feet)",
                "4411": "NAD 1927 BLM Zone 11N (US Feet)",
                "4412": "NAD 1927 BLM Zone 12N (US Feet)",
                "4413": "NAD 1927 BLM Zone 13N (US Feet)",
                "32064": "NAD 1927 BLM Zone 14N (US Feet)",
                "32065": "NAD 1927 BLM Zone 15N (US Feet)",
                "32066": "NAD 1927 BLM Zone 16N (US Feet)",
                "32067": "NAD 1927 BLM Zone 17N (US Feet)",
                "4418": "NAD 1927 BLM Zone 18N (US Feet)",
                "4419": "NAD 1927 BLM Zone 19N (US Feet)",
                "4399": "NAD 1927 BLM Zone 59N (US Feet)",
                "4400": "NAD 1927 BLM Zone 60N (US Feet)",
                "4421": "NAD 1983 BLM Zone  1N (US Feet)",
                "4422": "NAD 1983 BLM Zone  2N (US Feet)",
                "4423": "NAD 1983 BLM Zone  3N (US Feet)",
                "4424": "NAD 1983 BLM Zone  4N (US Feet)",
                "4425": "NAD 1983 BLM Zone  5N (US Feet)",
                "4426": "NAD 1983 BLM Zone  6N (US Feet)",
                "4427": "NAD 1983 BLM Zone  7N (US Feet)",
                "4428": "NAD 1983 BLM Zone  8N (US Feet)",
                "4429": "NAD 1983 BLM Zone  9N (US Feet)",
                "4430": "NAD 1983 BLM Zone 10N (US Feet)",
                "4431": "NAD 1983 BLM Zone 11N (US Feet)",
                "4432": "NAD 1983 BLM Zone 12N (US Feet)",
                "4433": "NAD 1983 BLM Zone 13N (US Feet)",
                "32164": "NAD 1983 BLM Zone 14N (US Feet)",
                "32165": "NAD 1983 BLM Zone 15N (US Feet)",
                "32166": "NAD 1983 BLM Zone 16N (US Feet)",
                "32167": "NAD 1983 BLM Zone 17N (US Feet)",
                "4438": "NAD 1983 BLM Zone 18N (US Feet)",
                "4439": "NAD 1983 BLM Zone 19N (US Feet)",
                "4217": "NAD 1983 BLM Zone 59N (US Feet)",
                "4420": "NAD 1983 BLM Zone 60N (US Feet)",
                "32664": "WGS 1984 BLM Zone 14N (US Feet)",
                "32665": "WGS 1984 BLM Zone 15N (US Feet)",
                "32666": "WGS 1984 BLM Zone 16N (US Feet)",
                "32667": "WGS 1984 BLM Zone 17N (US Feet)"
            },
            Europe: {
                "7803": "BGS2005 UTM zone 34N",
                "7799": "BGS2005 UTM zone 34N (N-E)",
                "9391": "BGS2005 UTM zone 35N",
                "7800": "BGS2005 UTM zone 35N (N-E)",
                "7805": "BGS2005 UTM zone 36N",
                "27429": "Datum 73 UTM Zone 29N",
                "2058": "ED 1950 ED77 UTM Zone 38N",
                "2059": "ED 1950 ED77 UTM Zone 39N",
                "2060": "ED 1950 ED77 UTM Zone 40N",
                "2061": "ED 1950 ED77 UTM Zone 41N",
                "2077": "ELD 1979 UTM Zone 32N",
                "2078": "ELD 1979 UTM Zone 33N",
                "2079": "ELD 1979 UTM Zone 34N",
                "2080": "ELD 1979 UTM Zone 35N",
                "3038": "ETRS 1989 ETRS-TM26",
                "3039": "ETRS 1989 ETRS-TM27",
                "3040": "ETRS 1989 ETRS-TM28",
                "3041": "ETRS 1989 ETRS-TM29",
                "3042": "ETRS 1989 ETRS-TM30",
                "3043": "ETRS 1989 ETRS-TM31",
                "3044": "ETRS 1989 ETRS-TM32",
                "3045": "ETRS 1989 ETRS-TM33",
                "3046": "ETRS 1989 ETRS-TM34",
                "3047": "ETRS 1989 ETRS-TM35",
                "3048": "ETRS 1989 ETRS-TM36",
                "3049": "ETRS 1989 ETRS-TM37",
                "3050": "ETRS 1989 ETRS-TM38",
                "3051": "ETRS 1989 ETRS-TM39",
                "102097": "ETRS 1989 UTM Zone 26N",
                "102098": "ETRS 1989 UTM Zone 27N",
                "25828": "ETRS 1989 UTM Zone 28N",
                "25829": "ETRS 1989 UTM Zone 29N",
                "25830": "ETRS 1989 UTM Zone 30N",
                "25831": "ETRS 1989 UTM Zone 31N",
                "25832": "ETRS 1989 UTM Zone 32N",
                "25833": "ETRS 1989 UTM Zone 33N",
                "25834": "ETRS 1989 UTM Zone 34N",
                "25835": "ETRS 1989 UTM Zone 35N",
                "25836": "ETRS 1989 UTM Zone 36N",
                "25837": "ETRS 1989 UTM Zone 37N",
                "25838": "ETRS 1989 UTM Zone 38N",
                "102099": "ETRS 1989 UTM Zone 39N",
                "23028": "European Datum 1950 UTM Zone 28N",
                "23029": "European Datum 1950 UTM Zone 29N",
                "23030": "European Datum 1950 UTM Zone 30N",
                "23031": "European Datum 1950 UTM Zone 31N",
                "23032": "European Datum 1950 UTM Zone 32N",
                "23033": "European Datum 1950 UTM Zone 33N",
                "23034": "European Datum 1950 UTM Zone 34N",
                "23035": "European Datum 1950 UTM Zone 35N",
                "23036": "European Datum 1950 UTM Zone 36N",
                "23037": "European Datum 1950 UTM Zone 37N",
                "23038": "European Datum 1950 UTM Zone 38N",
                "3374": "FD 1954 UTM Zone 29N",
                "3767": "HTRS96 UTM Zone 33N",
                "3768": "HTRS96 UTM Zone 34N",
                "3054": "Hjorsey 1955 UTM Zone 26N",
                "3055": "Hjorsey 1955 UTM Zone 27N",
                "3056": "Hjorsey 1955 UTM Zone 28N",
                "2158": "IRENET95 UTM Zone 29N",
                "102132": "NGO 1948 UTM Zone 32N",
                "102133": "NGO 1948 UTM Zone 33N",
                "102134": "NGO 1948 UTM Zone 34N",
                "102135": "NGO 1948 UTM Zone 35N",
                "9404": "PN68 UTM zone 27N",
                "9405": "PN68 UTM zone 28N",
                "9406": "PN84 UTM zone 27N",
                "9407": "PN84 UTM zone 28N",
                "2216": "Qornoq 1927 UTM Zone 22N",
                "2217": "Qornoq 1927 UTM Zone 23N",
                "7791": "RDN2008 UTM zone 32N",
                "7792": "RDN2008 UTM zone 33N",
                "7793": "RDN2008 UTM zone 34N",
                "4082": "REGCAN95 UTM Zone 27N",
                "4083": "REGCAN95 UTM Zone 28N"
            },
            Indonesia: {
                "21148": "Batavia UTM Zone 48S",
                "21149": "Batavia UTM Zone 49S",
                "21150": "Batavia UTM Zone 50S",
                "23866": "DGN 1995 UTM Zone 46N",
                "23867": "DGN 1995 UTM Zone 47N",
                "23877": "DGN 1995 UTM Zone 47S",
                "23868": "DGN 1995 UTM Zone 48N",
                "23878": "DGN 1995 UTM Zone 48S",
                "23869": "DGN 1995 UTM Zone 49N",
                "23879": "DGN 1995 UTM Zone 49S",
                "23870": "DGN 1995 UTM Zone 50N",
                "23880": "DGN 1995 UTM Zone 50S",
                "23871": "DGN 1995 UTM Zone 51N",
                "23881": "DGN 1995 UTM Zone 51S",
                "23872": "DGN 1995 UTM Zone 52N",
                "23882": "DGN 1995 UTM Zone 52S",
                "23883": "DGN 1995 UTM Zone 53S",
                "23884": "DGN 1995 UTM Zone 54S",
                "2933": "Gunung Segara UTM Zone 50S",
                "23846": "Indonesia 1974 UTM Zone 46N",
                "23886": "Indonesia 1974 UTM Zone 46S",
                "23847": "Indonesia 1974 UTM Zone 47N",
                "23887": "Indonesia 1974 UTM Zone 47S",
                "23848": "Indonesia 1974 UTM Zone 48N",
                "23888": "Indonesia 1974 UTM Zone 48S",
                "23849": "Indonesia 1974 UTM Zone 49N",
                "23889": "Indonesia 1974 UTM Zone 49S",
                "23850": "Indonesia 1974 UTM Zone 50N",
                "23890": "Indonesia 1974 UTM Zone 50S",
                "23851": "Indonesia 1974 UTM Zone 51N",
                "23891": "Indonesia 1974 UTM Zone 51S",
                "23852": "Indonesia 1974 UTM Zone 52N",
                "23892": "Indonesia 1974 UTM Zone 52S",
                "23853": "Indonesia 1974 UTM Zone 53N",
                "23893": "Indonesia 1974 UTM Zone 53S",
                "23894": "Indonesia 1974 UTM Zone 54S"
            },
            Malaysia: {
                "24547": "Kertau UTM Zone 47N",
                "24548": "Kertau UTM Zone 48N",
                "29849": "Timbalai 1948 UTM Zone 49N",
                "29850": "Timbalai 1948 UTM Zone 50N"
            },
            "NAD 1927": {
                "26701": "NAD 1927 UTM Zone  1N",
                "26702": "NAD 1927 UTM Zone  2N",
                "26703": "NAD 1927 UTM Zone  3N",
                "26704": "NAD 1927 UTM Zone  4N",
                "26705": "NAD 1927 UTM Zone  5N",
                "26706": "NAD 1927 UTM Zone  6N",
                "26707": "NAD 1927 UTM Zone  7N",
                "26708": "NAD 1927 UTM Zone  8N",
                "26709": "NAD 1927 UTM Zone  9N",
                "26710": "NAD 1927 UTM Zone 10N",
                "26711": "NAD 1927 UTM Zone 11N",
                "26712": "NAD 1927 UTM Zone 12N",
                "26713": "NAD 1927 UTM Zone 13N",
                "26714": "NAD 1927 UTM Zone 14N",
                "26715": "NAD 1927 UTM Zone 15N",
                "26716": "NAD 1927 UTM Zone 16N",
                "26717": "NAD 1927 UTM Zone 17N",
                "26718": "NAD 1927 UTM Zone 18N",
                "26719": "NAD 1927 UTM Zone 19N",
                "26720": "NAD 1927 UTM Zone 20N",
                "26721": "NAD 1927 UTM Zone 21N",
                "26722": "NAD 1927 UTM Zone 22N",
                "3370": "NAD 1927 UTM Zone 59N",
                "3371": "NAD 1927 UTM Zone 60N"
            },
            "NAD 1983": {
                "26901": "NAD 1983 UTM Zone  1N",
                "26902": "NAD 1983 UTM Zone  2N",
                "26903": "NAD 1983 UTM Zone  3N",
                "26904": "NAD 1983 UTM Zone  4N",
                "26905": "NAD 1983 UTM Zone  5N",
                "26906": "NAD 1983 UTM Zone  6N",
                "26907": "NAD 1983 UTM Zone  7N",
                "26908": "NAD 1983 UTM Zone  8N",
                "26909": "NAD 1983 UTM Zone  9N",
                "26910": "NAD 1983 UTM Zone 10N",
                "26911": "NAD 1983 UTM Zone 11N",
                "26912": "NAD 1983 UTM Zone 12N",
                "26913": "NAD 1983 UTM Zone 13N",
                "26914": "NAD 1983 UTM Zone 14N",
                "26915": "NAD 1983 UTM Zone 15N",
                "26916": "NAD 1983 UTM Zone 16N",
                "26917": "NAD 1983 UTM Zone 17N",
                "26918": "NAD 1983 UTM Zone 18N",
                "26919": "NAD 1983 UTM Zone 19N",
                "26920": "NAD 1983 UTM Zone 20N",
                "26921": "NAD 1983 UTM Zone 21N",
                "26922": "NAD 1983 UTM Zone 22N",
                "26923": "NAD 1983 UTM Zone 23N",
                "102213": "NAD 1983 UTM Zone 58N",
                "3372": "NAD 1983 UTM Zone 59N",
                "3373": "NAD 1983 UTM Zone 60N"
            },
            "New Zealand": {
                "27258": "NZGD 1949 UTM Zone 58S",
                "27259": "NZGD 1949 UTM Zone 59S",
                "27260": "NZGD 1949 UTM Zone 60S",
                "2133": "NZGD 2000 UTM Zone 58S",
                "2134": "NZGD 2000 UTM Zone 59S",
                "2135": "NZGD 2000 UTM Zone 60S"
            },
            "North America": {
                "2219": "ATS 1977 UTM Zone 19N",
                "2220": "ATS 1977 UTM Zone 20N",
                "3356": "Grand Cayman 1959 UTM Zone 17N",
                "3178": "Greenland 1996 UTM Zone 18N",
                "3179": "Greenland 1996 UTM Zone 19N",
                "3180": "Greenland 1996 UTM Zone 20N",
                "3181": "Greenland 1996 UTM Zone 21N",
                "3182": "Greenland 1996 UTM Zone 22N",
                "3183": "Greenland 1996 UTM Zone 23N",
                "3184": "Greenland 1996 UTM Zone 24N",
                "3185": "Greenland 1996 UTM Zone 25N",
                "3186": "Greenland 1996 UTM Zone 26N",
                "3187": "Greenland 1996 UTM Zone 27N",
                "3188": "Greenland 1996 UTM Zone 28N",
                "3189": "Greenland 1996 UTM Zone 29N",
                "3449": "JAD 2001 UTM Zone 17N",
                "3450": "JAD 2001 UTM Zone 18N",
                "3357": "Little Cayman 1961 UTM Zone 17N",
                "6366": "Mexico ITRF2008 UTM Zone 11N",
                "6367": "Mexico ITRF2008 UTM Zone 12N",
                "6368": "Mexico ITRF2008 UTM Zone 13N",
                "6369": "Mexico ITRF2008 UTM Zone 14N",
                "6370": "Mexico ITRF2008 UTM Zone 15N",
                "6371": "Mexico ITRF2008 UTM Zone 16N",
                "6330": "NAD 1983 (2011) UTM Zone  1N",
                "6331": "NAD 1983 (2011) UTM Zone  2N",
                "6332": "NAD 1983 (2011) UTM Zone  3N",
                "6333": "NAD 1983 (2011) UTM Zone  4N",
                "6334": "NAD 1983 (2011) UTM Zone  5N",
                "6335": "NAD 1983 (2011) UTM Zone  6N",
                "6336": "NAD 1983 (2011) UTM Zone  7N",
                "6337": "NAD 1983 (2011) UTM Zone  8N",
                "6338": "NAD 1983 (2011) UTM Zone  9N",
                "6339": "NAD 1983 (2011) UTM Zone 10N",
                "6340": "NAD 1983 (2011) UTM Zone 11N",
                "6341": "NAD 1983 (2011) UTM Zone 12N",
                "6342": "NAD 1983 (2011) UTM Zone 13N",
                "6343": "NAD 1983 (2011) UTM Zone 14N",
                "6344": "NAD 1983 (2011) UTM Zone 15N",
                "6345": "NAD 1983 (2011) UTM Zone 16N",
                "6346": "NAD 1983 (2011) UTM Zone 17N",
                "6347": "NAD 1983 (2011) UTM Zone 18N",
                "6348": "NAD 1983 (2011) UTM Zone 19N",
                "102045": "NAD 1983 (2011) UTM Zone 20N",
                "6328": "NAD 1983 (2011) UTM Zone 59N",
                "6329": "NAD 1983 (2011) UTM Zone 60N",
                "102401": "NAD 1983 (CORS96) UTM Zone  1N",
                "102402": "NAD 1983 (CORS96) UTM Zone  2N",
                "102403": "NAD 1983 (CORS96) UTM Zone  3N",
                "102404": "NAD 1983 (CORS96) UTM Zone  4N",
                "102405": "NAD 1983 (CORS96) UTM Zone  5N",
                "102406": "NAD 1983 (CORS96) UTM Zone  6N",
                "102407": "NAD 1983 (CORS96) UTM Zone  7N",
                "102408": "NAD 1983 (CORS96) UTM Zone  8N",
                "102409": "NAD 1983 (CORS96) UTM Zone  9N",
                "102410": "NAD 1983 (CORS96) UTM Zone 10N",
                "102411": "NAD 1983 (CORS96) UTM Zone 11N",
                "102412": "NAD 1983 (CORS96) UTM Zone 12N",
                "102413": "NAD 1983 (CORS96) UTM Zone 13N",
                "102414": "NAD 1983 (CORS96) UTM Zone 14N",
                "102415": "NAD 1983 (CORS96) UTM Zone 15N",
                "102416": "NAD 1983 (CORS96) UTM Zone 16N",
                "102417": "NAD 1983 (CORS96) UTM Zone 17N",
                "102418": "NAD 1983 (CORS96) UTM Zone 18N",
                "102419": "NAD 1983 (CORS96) UTM Zone 19N",
                "102043": "NAD 1983 (CORS96) UTM Zone 20N",
                "102364": "NAD 1983 (CORS96) UTM Zone 59N",
                "102365": "NAD 1983 (CORS96) UTM Zone 60N",
                "8692": "NAD 1983 (MA11) UTM Zone 54N",
                "8693": "NAD 1983 (MA11) UTM Zone 55N",
                "3708": "NAD 1983 (NSRS2007) UTM Zone  1N",
                "3709": "NAD 1983 (NSRS2007) UTM Zone  2N",
                "3710": "NAD 1983 (NSRS2007) UTM Zone  3N",
                "3711": "NAD 1983 (NSRS2007) UTM Zone  4N",
                "3712": "NAD 1983 (NSRS2007) UTM Zone  5N",
                "3713": "NAD 1983 (NSRS2007) UTM Zone  6N",
                "3714": "NAD 1983 (NSRS2007) UTM Zone  7N",
                "3715": "NAD 1983 (NSRS2007) UTM Zone  8N",
                "3716": "NAD 1983 (NSRS2007) UTM Zone  9N",
                "3717": "NAD 1983 (NSRS2007) UTM Zone 10N",
                "3718": "NAD 1983 (NSRS2007) UTM Zone 11N",
                "3719": "NAD 1983 (NSRS2007) UTM Zone 12N",
                "3720": "NAD 1983 (NSRS2007) UTM Zone 13N",
                "3721": "NAD 1983 (NSRS2007) UTM Zone 14N",
                "3722": "NAD 1983 (NSRS2007) UTM Zone 15N",
                "3723": "NAD 1983 (NSRS2007) UTM Zone 16N",
                "3724": "NAD 1983 (NSRS2007) UTM Zone 17N",
                "3725": "NAD 1983 (NSRS2007) UTM Zone 18N",
                "3726": "NAD 1983 (NSRS2007) UTM Zone 19N",
                "102044": "NAD 1983 (NSRS2007) UTM Zone 20N",
                "3706": "NAD 1983 (NSRS2007) UTM Zone 59N",
                "3707": "NAD 1983 (NSRS2007) UTM Zone 60N",
                "6636": "NAD 1983 (PA11) UTM Zone 2S",
                "6634": "NAD 1983 (PA11) UTM Zone 4N",
                "6635": "NAD 1983 (PA11) UTM Zone 5N",
                "3740": "NAD 1983 HARN UTM Zone 10N",
                "3741": "NAD 1983 HARN UTM Zone 11N",
                "3742": "NAD 1983 HARN UTM Zone 12N",
                "3743": "NAD 1983 HARN UTM Zone 13N",
                "3744": "NAD 1983 HARN UTM Zone 14N",
                "3745": "NAD 1983 HARN UTM Zone 15N",
                "3746": "NAD 1983 HARN UTM Zone 16N",
                "3747": "NAD 1983 HARN UTM Zone 17N",
                "3748": "NAD 1983 HARN UTM Zone 18N",
                "3749": "NAD 1983 HARN UTM Zone 19N",
                "2195": "NAD 1983 HARN UTM Zone 2S",
                "3750": "NAD 1983 HARN UTM Zone 4N",
                "3751": "NAD 1983 HARN UTM Zone 5N",
                "102703": "NAD 1983 PACP00 UTM Zone 2S",
                "102701": "NAD 1983 PACP00 UTM Zone 4N",
                "102702": "NAD 1983 PACP00 UTM Zone 5N",
                "3920": "Puerto Rico UTM Zone 20N",
                "2216": "Qornoq 1927 UTM Zone 22N",
                "2217": "Qornoq 1927 UTM Zone 23N",
                "2987": "Saint Pierre et Miquelon 1950 UTM Zone 21N"
            },
            Oceans: {
                "Atlantic Ocean": {
                    "7878": "Astro DOS 71_4 UTM zone 30S",
                    "2189": "Azores Central 1948 UTM Zone 26N",
                    "3063": "Azores Central 1995 UTM Zone 26N",
                    "2188": "Azores Occidental 1939 UTM Zone 25N",
                    "2190": "Azores Oriental 1940 UTM Zone 26N",
                    "3062": "Azores Oriental 1995 UTM Zone 26N",
                    "3769": "Bermuda 1957 UTM Zone 20N",
                    "102162": "Graciosa Base SW 1948 UTM Zone 26N",
                    "3054": "Hjorsey 1955 UTM Zone 26N",
                    "3055": "Hjorsey 1955 UTM Zone 27N",
                    "3056": "Hjorsey 1955 UTM Zone 28N",
                    "2191": "Madeira 1936 UTM Zone 28N",
                    "5014": "PTRA08 UTM Zone 25N",
                    "5015": "PTRA08 UTM Zone 26N",
                    "5016": "PTRA08 UTM Zone 28N",
                    "2942": "Porto Santo 1936 UTM Zone 28N",
                    "3061": "Porto Santo 1995 UTM Zone 28N",
                    "4467": "RGSPM 2006 UTM Zone 21N",
                    "102168": "Sao Braz UTM Zone 26N",
                    "29220": "Sapper Hill 1943 UTM Zone 20S",
                    "29221": "Sapper Hill 1943 UTM Zone 21S",
                    "2943": "Selvagem Grande 1938 UTM Zone 28N",
                    "7883": "St. Helena Tritan UTM zone 30S"
                },
                Caribbean: {
                    "2973": "Fort Desaix UTM Zone 20N",
                    "2969": "Fort Marigot UTM Zone 20N",
                    "3449": "JAD 2001 UTM Zone 17N",
                    "3450": "JAD 2001 UTM Zone 18N",
                    "3920": "Puerto Rico UTM Zone 20N",
                    "5490": "RGAF09 UTM Zone 20N",
                    "4559": "RRAF 1991 UTM Zone 20N",
                    "2970": "Sainte Anne UTM Zone 20N"
                },
                "Indian Ocean": {
                    "5879": "Cadastre 1997 UTM Zone 38S",
                    "2980": "Combani 1950 UTM Zone 38S",
                    "2999": "Grand Comoros UTM Zone 38S",
                    "3336": "Kerguelen Island 1949 UTM Zone 42S",
                    "4471": "RGM 2004 UTM Zone 38S",
                    "5644": "RGR 1992 UTM Zone 39S",
                    "2975": "RGR 1992 UTM Zone 40S",
                    "7074": "RGTAAF07 UTM zone 37S",
                    "7075": "RGTAAF07 UTM zone 38S",
                    "7076": "RGTAAF07 UTM zone 39S",
                    "7077": "RGTAAF07 UTM zone 40S",
                    "7078": "RGTAAF07 UTM zone 41S",
                    "7079": "RGTAAF07 UTM zone 42S",
                    "7080": "RGTAAF07 UTM zone 43S",
                    "7081": "RGTAAF07 UTM zone 44S",
                    "6915": "South East Island 1943 UTM Zone 40N"
                },
                "Pacific Ocean": {
                    "102116": "American Samoa 1962 UTM Zone 2S",
                    "3303": "Fatu Iva 1972 UTM Zone 7S",
                    "3142": "Fiji 1956 UTM Zone 1S",
                    "3141": "Fiji 1956 UTM Zone 60S",
                    "2995": "IGN53 Mare UTM Zone 58S",
                    "3172": "IGN53 Mare UTM Zone 59S",
                    "2981": "IGN56 Lifou UTM Zone 58S",
                    "3302": "IGN63 Hiva Oa UTM Zone 7S",
                    "3060": "IGN72 Grande Terre UTM Zone 58S",
                    "2978": "IGN72 Nuku Hiva UTM Zone 7S",
                    "2988": "MOP78 UTM Zone 1S",
                    "3306": "Maupiti 1983 UTM Zone 5S",
                    "3305": "Moorea 1987 UTM Zone 6S",
                    "8692": "NAD 1983 (MA11) UTM Zone 54N",
                    "8693": "NAD 1983 (MA11) UTM Zone 55N",
                    "2998": "NEA74 Noumea UTM Zone 58S",
                    "102166": "Observ Meteorologico 1939 UTM Zone 25N",
                    "102114": "Old Hawaiian UTM Zone 4N",
                    "102115": "Old Hawaiian UTM Zone 5N",
                    "3784": "Pitcairn 1967 UTM Zone 9S",
                    "3169": "RGNC 1991-93 UTM Zone 57S",
                    "3170": "RGNC 1991-93 UTM Zone 58S",
                    "3171": "RGNC 1991-93 UTM Zone 59S",
                    "3296": "RGPF UTM Zone 5S",
                    "3297": "RGPF UTM Zone 6S",
                    "3298": "RGPF UTM Zone 7S",
                    "3299": "RGPF UTM Zone 8S",
                    "8903": "RGWF96 UTM Zone 1S",
                    "2997": "ST71 Belep UTM Zone 58S",
                    "2996": "ST84 Ile des Pins UTM Zone 58S",
                    "3164": "ST87 Ouvea UTM Zone 58S",
                    "2977": "Tahaa UTM Zone 5S",
                    "3304": "Tahiti 1979 UTM Zone 6S",
                    "2976": "Tahiti UTM Zone 6S"
                }
            },
            "South America": {
                "20822": "Aratu UTM Zone 22S",
                "20823": "Aratu UTM Zone 23S",
                "20824": "Aratu UTM Zone 24S",
                "5337": "Aratu UTM Zone 25S",
                "21817": "Bogota UTM Zone 17N",
                "21818": "Bogota UTM Zone 18N",
                "3312": "CSG 1967 UTM Zone 21N",
                "2971": "CSG 1967 UTM Zone 22N",
                "2315": "Campo Inchauspe UTM 19S",
                "2316": "Campo Inchauspe UTM 20S",
                "4071": "Chua UTM Zone 23S",
                "5536": "Corrego Alegre 1961 UTM Zone 21S",
                "5537": "Corrego Alegre 1961 UTM Zone 22S",
                "5538": "Corrego Alegre 1961 UTM Zone 23S",
                "5539": "Corrego Alegre 1961 UTM Zone 24S",
                "22521": "Corrego Alegre UTM Zone 21S",
                "22522": "Corrego Alegre UTM Zone 22S",
                "22523": "Corrego Alegre UTM Zone 23S",
                "22524": "Corrego Alegre UTM Zone 24S",
                "22525": "Corrego Alegre UTM Zone 25S",
                "2084": "Hito XVIII 1963 UTM Zone 19S",
                "24718": "La Canoa UTM Zone 18N",
                "24719": "La Canoa UTM Zone 19N",
                "24720": "La Canoa UTM Zone 20N",
                "24721": "La Canoa UTM Zone 21N",
                "5356": "MARGEN UTM Zone 19S",
                "5355": "MARGEN UTM Zone 20S",
                "5357": "MARGEN UTM Zone 21S",
                "2067": "Naparima 1955 UTM Zone 20N",
                "27120": "Naparima 1972 UTM Zone 20N",
                "9265": "POSGAR 2007 UTM Zone 19S",
                "24817": "PSAD 1956 UTM Zone 17N",
                "24877": "PSAD 1956 UTM Zone 17S",
                "24818": "PSAD 1956 UTM Zone 18N",
                "24878": "PSAD 1956 UTM Zone 18S",
                "24819": "PSAD 1956 UTM Zone 19N",
                "24879": "PSAD 1956 UTM Zone 19S",
                "24820": "PSAD 1956 UTM Zone 20N",
                "24880": "PSAD 1956 UTM Zone 20S",
                "24821": "PSAD 1956 UTM Zone 21N",
                "24881": "PSAD 1956 UTM Zone 21S",
                "24882": "PSAD 1956 UTM Zone 22S",
                "5839": "Peru96 UTM Zone 17S",
                "5387": "Peru96 UTM Zone 18S",
                "5389": "Peru96 UTM Zone 19S",
                "9697": "REDGEOMIN UTM zone 12S",
                "9698": "REDGEOMIN UTM zone 18S",
                "9699": "REDGEOMIN UTM zone 19S",
                "2201": "REGVEN UTM Zone 18N",
                "2202": "REGVEN UTM Zone 19N",
                "2203": "REGVEN UTM Zone 20N",
                "3313": "RGFG 1995 UTM Zone 21N",
                "2972": "RGFG 1995 UTM Zone 22N",
                "8950": "SIRGAS-Chile 2010 UTM zone 18S",
                "8951": "SIRGAS-Chile 2010 UTM zone 19S",
                "9149": "SIRGAS-Chile 2013 UTM zone 18S",
                "9150": "SIRGAS-Chile 2013 UTM zone 19S",
                "9154": "SIRGAS-Chile 2016 UTM zone 18S",
                "9155": "SIRGAS-Chile 2016 UTM zone 19S",
                "5362": "SIRGAS-Chile UTM Zone 18S",
                "5361": "SIRGAS-Chile UTM Zone 19S",
                "5382": "SIRGAS-ROU98 UTM Zone 21S",
                "5383": "SIRGAS-ROU98 UTM Zone 22S",
                "29220": "Sapper Hill 1943 UTM Zone 20S",
                "29221": "Sapper Hill 1943 UTM Zone 21S",
                "5875": "South American 1969 (96) UTM Zone 18S",
                "5876": "South American 1969 (96) UTM Zone 19S",
                "5877": "South American 1969 (96) UTM Zone 20S",
                "5531": "South American 1969 (96) UTM Zone 21S",
                "5858": "South American 1969 (96) UTM Zone 22S",
                "5533": "South American 1969 (96) UTM Zone 23S",
                "5534": "South American 1969 (96) UTM Zone 24S",
                "5535": "South American 1969 (96) UTM Zone 25S",
                "31121": "Zanderij 1972 UTM Zone 21N",
                "SAD 1969": {
                    "5463": "South American 1969 UTM Zone 17N",
                    "29187": "South American 1969 UTM Zone 17S",
                    "29168": "South American 1969 UTM Zone 18N",
                    "29188": "South American 1969 UTM Zone 18S",
                    "29169": "South American 1969 UTM Zone 19N",
                    "29189": "South American 1969 UTM Zone 19S",
                    "29170": "South American 1969 UTM Zone 20N",
                    "29190": "South American 1969 UTM Zone 20S",
                    "29171": "South American 1969 UTM Zone 21N",
                    "29191": "South American 1969 UTM Zone 21S",
                    "29172": "South American 1969 UTM Zone 22N",
                    "29192": "South American 1969 UTM Zone 22S",
                    "29193": "South American 1969 UTM Zone 23S",
                    "29194": "South American 1969 UTM Zone 24S",
                    "29195": "South American 1969 UTM Zone 25S"
                },
                SIRGAS: {
                    "31986": "SIRGAS UTM Zone 17N",
                    "31992": "SIRGAS UTM Zone 17S",
                    "31987": "SIRGAS UTM Zone 18N",
                    "31993": "SIRGAS UTM Zone 18S",
                    "31988": "SIRGAS UTM Zone 19N",
                    "31994": "SIRGAS UTM Zone 19S",
                    "31989": "SIRGAS UTM Zone 20N",
                    "31995": "SIRGAS UTM Zone 20S",
                    "31990": "SIRGAS UTM Zone 21N",
                    "31996": "SIRGAS UTM Zone 21S",
                    "31991": "SIRGAS UTM Zone 22N",
                    "31997": "SIRGAS UTM Zone 22S",
                    "31998": "SIRGAS UTM Zone 23S",
                    "31999": "SIRGAS UTM Zone 24S",
                    "32000": "SIRGAS UTM Zone 25S"
                },
                "SIRGAS 2000": {
                    "31965": "SIRGAS 2000 UTM Zone 11N",
                    "31966": "SIRGAS 2000 UTM Zone 12N",
                    "31967": "SIRGAS 2000 UTM Zone 13N",
                    "31968": "SIRGAS 2000 UTM Zone 14N",
                    "31969": "SIRGAS 2000 UTM Zone 15N",
                    "31970": "SIRGAS 2000 UTM Zone 16N",
                    "31971": "SIRGAS 2000 UTM Zone 17N",
                    "31977": "SIRGAS 2000 UTM Zone 17S",
                    "31972": "SIRGAS 2000 UTM Zone 18N",
                    "31978": "SIRGAS 2000 UTM Zone 18S",
                    "31973": "SIRGAS 2000 UTM Zone 19N",
                    "31979": "SIRGAS 2000 UTM Zone 19S",
                    "31974": "SIRGAS 2000 UTM Zone 20N",
                    "31980": "SIRGAS 2000 UTM Zone 20S",
                    "31975": "SIRGAS 2000 UTM Zone 21N",
                    "31981": "SIRGAS 2000 UTM Zone 21S",
                    "31976": "SIRGAS 2000 UTM Zone 22N",
                    "31982": "SIRGAS 2000 UTM Zone 22S",
                    "6210": "SIRGAS 2000 UTM Zone 23N",
                    "31983": "SIRGAS 2000 UTM Zone 23S",
                    "6211": "SIRGAS 2000 UTM Zone 24N",
                    "31984": "SIRGAS 2000 UTM Zone 24S",
                    "31985": "SIRGAS 2000 UTM Zone 25S",
                    "5396": "SIRGAS 2000 UTM Zone 26S"
                }
            },
            "WGS 1972": {
                "Northern Hemisphere": {
                    "32201": "WGS 1972 UTM Zone  1N",
                    "32202": "WGS 1972 UTM Zone  2N",
                    "32203": "WGS 1972 UTM Zone  3N",
                    "32204": "WGS 1972 UTM Zone  4N",
                    "32205": "WGS 1972 UTM Zone  5N",
                    "32206": "WGS 1972 UTM Zone  6N",
                    "32207": "WGS 1972 UTM Zone  7N",
                    "32208": "WGS 1972 UTM Zone  8N",
                    "32209": "WGS 1972 UTM Zone  9N",
                    "32210": "WGS 1972 UTM Zone 10N",
                    "32211": "WGS 1972 UTM Zone 11N",
                    "32212": "WGS 1972 UTM Zone 12N",
                    "32213": "WGS 1972 UTM Zone 13N",
                    "32214": "WGS 1972 UTM Zone 14N",
                    "32215": "WGS 1972 UTM Zone 15N",
                    "32216": "WGS 1972 UTM Zone 16N",
                    "32217": "WGS 1972 UTM Zone 17N",
                    "32218": "WGS 1972 UTM Zone 18N",
                    "32219": "WGS 1972 UTM Zone 19N",
                    "32220": "WGS 1972 UTM Zone 20N",
                    "32221": "WGS 1972 UTM Zone 21N",
                    "32222": "WGS 1972 UTM Zone 22N",
                    "32223": "WGS 1972 UTM Zone 23N",
                    "32224": "WGS 1972 UTM Zone 24N",
                    "32225": "WGS 1972 UTM Zone 25N",
                    "32226": "WGS 1972 UTM Zone 26N",
                    "32227": "WGS 1972 UTM Zone 27N",
                    "32228": "WGS 1972 UTM Zone 28N",
                    "32229": "WGS 1972 UTM Zone 29N",
                    "32230": "WGS 1972 UTM Zone 30N",
                    "32231": "WGS 1972 UTM Zone 31N",
                    "32232": "WGS 1972 UTM Zone 32N",
                    "32233": "WGS 1972 UTM Zone 33N",
                    "32234": "WGS 1972 UTM Zone 34N",
                    "32235": "WGS 1972 UTM Zone 35N",
                    "32236": "WGS 1972 UTM Zone 36N",
                    "32237": "WGS 1972 UTM Zone 37N",
                    "32238": "WGS 1972 UTM Zone 38N",
                    "32239": "WGS 1972 UTM Zone 39N",
                    "32240": "WGS 1972 UTM Zone 40N",
                    "32241": "WGS 1972 UTM Zone 41N",
                    "32242": "WGS 1972 UTM Zone 42N",
                    "32243": "WGS 1972 UTM Zone 43N",
                    "32244": "WGS 1972 UTM Zone 44N",
                    "32245": "WGS 1972 UTM Zone 45N",
                    "32246": "WGS 1972 UTM Zone 46N",
                    "32247": "WGS 1972 UTM Zone 47N",
                    "32248": "WGS 1972 UTM Zone 48N",
                    "32249": "WGS 1972 UTM Zone 49N",
                    "32250": "WGS 1972 UTM Zone 50N",
                    "32251": "WGS 1972 UTM Zone 51N",
                    "32252": "WGS 1972 UTM Zone 52N",
                    "32253": "WGS 1972 UTM Zone 53N",
                    "32254": "WGS 1972 UTM Zone 54N",
                    "32255": "WGS 1972 UTM Zone 55N",
                    "32256": "WGS 1972 UTM Zone 56N",
                    "32257": "WGS 1972 UTM Zone 57N",
                    "32258": "WGS 1972 UTM Zone 58N",
                    "32259": "WGS 1972 UTM Zone 59N",
                    "32260": "WGS 1972 UTM Zone 60N"
                },
                "Southern Hemisphere": {
                    "32301": "WGS 1972 UTM Zone  1S",
                    "32302": "WGS 1972 UTM Zone  2S",
                    "32303": "WGS 1972 UTM Zone  3S",
                    "32304": "WGS 1972 UTM Zone  4S",
                    "32305": "WGS 1972 UTM Zone  5S",
                    "32306": "WGS 1972 UTM Zone  6S",
                    "32307": "WGS 1972 UTM Zone  7S",
                    "32308": "WGS 1972 UTM Zone  8S",
                    "32309": "WGS 1972 UTM Zone  9S",
                    "32310": "WGS 1972 UTM Zone 10S",
                    "32311": "WGS 1972 UTM Zone 11S",
                    "32312": "WGS 1972 UTM Zone 12S",
                    "32313": "WGS 1972 UTM Zone 13S",
                    "32314": "WGS 1972 UTM Zone 14S",
                    "32315": "WGS 1972 UTM Zone 15S",
                    "32316": "WGS 1972 UTM Zone 16S",
                    "32317": "WGS 1972 UTM Zone 17S",
                    "32318": "WGS 1972 UTM Zone 18S",
                    "32319": "WGS 1972 UTM Zone 19S",
                    "32320": "WGS 1972 UTM Zone 20S",
                    "32321": "WGS 1972 UTM Zone 21S",
                    "32322": "WGS 1972 UTM Zone 22S",
                    "32323": "WGS 1972 UTM Zone 23S",
                    "32324": "WGS 1972 UTM Zone 24S",
                    "32325": "WGS 1972 UTM Zone 25S",
                    "32326": "WGS 1972 UTM Zone 26S",
                    "32327": "WGS 1972 UTM Zone 27S",
                    "32328": "WGS 1972 UTM Zone 28S",
                    "32329": "WGS 1972 UTM Zone 29S",
                    "32330": "WGS 1972 UTM Zone 30S",
                    "32331": "WGS 1972 UTM Zone 31S",
                    "32332": "WGS 1972 UTM Zone 32S",
                    "32333": "WGS 1972 UTM Zone 33S",
                    "32334": "WGS 1972 UTM Zone 34S",
                    "32335": "WGS 1972 UTM Zone 35S",
                    "32336": "WGS 1972 UTM Zone 36S",
                    "32337": "WGS 1972 UTM Zone 37S",
                    "32338": "WGS 1972 UTM Zone 38S",
                    "32339": "WGS 1972 UTM Zone 39S",
                    "32340": "WGS 1972 UTM Zone 40S",
                    "32341": "WGS 1972 UTM Zone 41S",
                    "32342": "WGS 1972 UTM Zone 42S",
                    "32343": "WGS 1972 UTM Zone 43S",
                    "32344": "WGS 1972 UTM Zone 44S",
                    "32345": "WGS 1972 UTM Zone 45S",
                    "32346": "WGS 1972 UTM Zone 46S",
                    "32347": "WGS 1972 UTM Zone 47S",
                    "32348": "WGS 1972 UTM Zone 48S",
                    "32349": "WGS 1972 UTM Zone 49S",
                    "32350": "WGS 1972 UTM Zone 50S",
                    "32351": "WGS 1972 UTM Zone 51S",
                    "32352": "WGS 1972 UTM Zone 52S",
                    "32353": "WGS 1972 UTM Zone 53S",
                    "32354": "WGS 1972 UTM Zone 54S",
                    "32355": "WGS 1972 UTM Zone 55S",
                    "32356": "WGS 1972 UTM Zone 56S",
                    "32357": "WGS 1972 UTM Zone 57S",
                    "32358": "WGS 1972 UTM Zone 58S",
                    "32359": "WGS 1972 UTM Zone 59S",
                    "32360": "WGS 1972 UTM Zone 60S"
                }
            },
            "WGS 1984": {
                "Northern Hemisphere": {
                    "102570": "WGS 1984 Complex UTM Zone 20N",
                    "102571": "WGS 1984 Complex UTM Zone 21N",
                    "102572": "WGS 1984 Complex UTM Zone 22N",
                    "102573": "WGS 1984 Complex UTM Zone 23N",
                    "102574": "WGS 1984 Complex UTM Zone 24N",
                    "102575": "WGS 1984 Complex UTM Zone 25N",
                    "102576": "WGS 1984 Complex UTM Zone 26N",
                    "102577": "WGS 1984 Complex UTM Zone 27N",
                    "102578": "WGS 1984 Complex UTM Zone 28N",
                    "102579": "WGS 1984 Complex UTM Zone 29N",
                    "102580": "WGS 1984 Complex UTM Zone 30N",
                    "32601": "WGS 1984 UTM Zone  1N",
                    "32602": "WGS 1984 UTM Zone  2N",
                    "32603": "WGS 1984 UTM Zone  3N",
                    "32604": "WGS 1984 UTM Zone  4N",
                    "32605": "WGS 1984 UTM Zone  5N",
                    "32606": "WGS 1984 UTM Zone  6N",
                    "32607": "WGS 1984 UTM Zone  7N",
                    "32608": "WGS 1984 UTM Zone  8N",
                    "32609": "WGS 1984 UTM Zone  9N",
                    "32610": "WGS 1984 UTM Zone 10N",
                    "32611": "WGS 1984 UTM Zone 11N",
                    "32612": "WGS 1984 UTM Zone 12N",
                    "32613": "WGS 1984 UTM Zone 13N",
                    "32614": "WGS 1984 UTM Zone 14N",
                    "32615": "WGS 1984 UTM Zone 15N",
                    "32616": "WGS 1984 UTM Zone 16N",
                    "32617": "WGS 1984 UTM Zone 17N",
                    "32618": "WGS 1984 UTM Zone 18N",
                    "32619": "WGS 1984 UTM Zone 19N",
                    "32620": "WGS 1984 UTM Zone 20N",
                    "32621": "WGS 1984 UTM Zone 21N",
                    "32622": "WGS 1984 UTM Zone 22N",
                    "32623": "WGS 1984 UTM Zone 23N",
                    "32624": "WGS 1984 UTM Zone 24N",
                    "32625": "WGS 1984 UTM Zone 25N",
                    "32626": "WGS 1984 UTM Zone 26N",
                    "32627": "WGS 1984 UTM Zone 27N",
                    "32628": "WGS 1984 UTM Zone 28N",
                    "32629": "WGS 1984 UTM Zone 29N",
                    "32630": "WGS 1984 UTM Zone 30N",
                    "32631": "WGS 1984 UTM Zone 31N",
                    "32632": "WGS 1984 UTM Zone 32N",
                    "32633": "WGS 1984 UTM Zone 33N",
                    "32634": "WGS 1984 UTM Zone 34N",
                    "32635": "WGS 1984 UTM Zone 35N",
                    "32636": "WGS 1984 UTM Zone 36N",
                    "32637": "WGS 1984 UTM Zone 37N",
                    "32638": "WGS 1984 UTM Zone 38N",
                    "32639": "WGS 1984 UTM Zone 39N",
                    "32640": "WGS 1984 UTM Zone 40N",
                    "32641": "WGS 1984 UTM Zone 41N",
                    "32642": "WGS 1984 UTM Zone 42N",
                    "32643": "WGS 1984 UTM Zone 43N",
                    "32644": "WGS 1984 UTM Zone 44N",
                    "32645": "WGS 1984 UTM Zone 45N",
                    "32646": "WGS 1984 UTM Zone 46N",
                    "32647": "WGS 1984 UTM Zone 47N",
                    "32648": "WGS 1984 UTM Zone 48N",
                    "32649": "WGS 1984 UTM Zone 49N",
                    "32650": "WGS 1984 UTM Zone 50N",
                    "32651": "WGS 1984 UTM Zone 51N",
                    "32652": "WGS 1984 UTM Zone 52N",
                    "32653": "WGS 1984 UTM Zone 53N",
                    "32654": "WGS 1984 UTM Zone 54N",
                    "32655": "WGS 1984 UTM Zone 55N",
                    "32656": "WGS 1984 UTM Zone 56N",
                    "32657": "WGS 1984 UTM Zone 57N",
                    "32658": "WGS 1984 UTM Zone 58N",
                    "32659": "WGS 1984 UTM Zone 59N",
                    "32660": "WGS 1984 UTM Zone 60N"
                },
                "Southern Hemisphere": {
                    "32701": "WGS 1984 UTM Zone  1S",
                    "32702": "WGS 1984 UTM Zone  2S",
                    "32703": "WGS 1984 UTM Zone  3S",
                    "32704": "WGS 1984 UTM Zone  4S",
                    "32705": "WGS 1984 UTM Zone  5S",
                    "32706": "WGS 1984 UTM Zone  6S",
                    "32707": "WGS 1984 UTM Zone  7S",
                    "32708": "WGS 1984 UTM Zone  8S",
                    "32709": "WGS 1984 UTM Zone  9S",
                    "32710": "WGS 1984 UTM Zone 10S",
                    "32711": "WGS 1984 UTM Zone 11S",
                    "32712": "WGS 1984 UTM Zone 12S",
                    "32713": "WGS 1984 UTM Zone 13S",
                    "32714": "WGS 1984 UTM Zone 14S",
                    "32715": "WGS 1984 UTM Zone 15S",
                    "32716": "WGS 1984 UTM Zone 16S",
                    "32717": "WGS 1984 UTM Zone 17S",
                    "32718": "WGS 1984 UTM Zone 18S",
                    "32719": "WGS 1984 UTM Zone 19S",
                    "32720": "WGS 1984 UTM Zone 20S",
                    "32721": "WGS 1984 UTM Zone 21S",
                    "32722": "WGS 1984 UTM Zone 22S",
                    "32723": "WGS 1984 UTM Zone 23S",
                    "32724": "WGS 1984 UTM Zone 24S",
                    "32725": "WGS 1984 UTM Zone 25S",
                    "32726": "WGS 1984 UTM Zone 26S",
                    "32727": "WGS 1984 UTM Zone 27S",
                    "32728": "WGS 1984 UTM Zone 28S",
                    "32729": "WGS 1984 UTM Zone 29S",
                    "32730": "WGS 1984 UTM Zone 30S",
                    "32731": "WGS 1984 UTM Zone 31S",
                    "32732": "WGS 1984 UTM Zone 32S",
                    "32733": "WGS 1984 UTM Zone 33S",
                    "32734": "WGS 1984 UTM Zone 34S",
                    "32735": "WGS 1984 UTM Zone 35S",
                    "32736": "WGS 1984 UTM Zone 36S",
                    "32737": "WGS 1984 UTM Zone 37S",
                    "32738": "WGS 1984 UTM Zone 38S",
                    "32739": "WGS 1984 UTM Zone 39S",
                    "32740": "WGS 1984 UTM Zone 40S",
                    "32741": "WGS 1984 UTM Zone 41S",
                    "32742": "WGS 1984 UTM Zone 42S",
                    "32743": "WGS 1984 UTM Zone 43S",
                    "32744": "WGS 1984 UTM Zone 44S",
                    "32745": "WGS 1984 UTM Zone 45S",
                    "32746": "WGS 1984 UTM Zone 46S",
                    "32747": "WGS 1984 UTM Zone 47S",
                    "32748": "WGS 1984 UTM Zone 48S",
                    "32749": "WGS 1984 UTM Zone 49S",
                    "32750": "WGS 1984 UTM Zone 50S",
                    "32751": "WGS 1984 UTM Zone 51S",
                    "32752": "WGS 1984 UTM Zone 52S",
                    "32753": "WGS 1984 UTM Zone 53S",
                    "32754": "WGS 1984 UTM Zone 54S",
                    "32755": "WGS 1984 UTM Zone 55S",
                    "32756": "WGS 1984 UTM Zone 56S",
                    "32757": "WGS 1984 UTM Zone 57S",
                    "32758": "WGS 1984 UTM Zone 58S",
                    "32759": "WGS 1984 UTM Zone 59S",
                    "32760": "WGS 1984 UTM Zone 60S"
                }
            }
        },
        World: {
            "54098": "Adams Square II (world)",
            "54043": "Aitoff (world)",
            "54032": "Azimuthal Equidistant (world)",
            "54017": "Behrmann (world)",
            "102299": "Berghaus Star AAG",
            "54024": "Bonne (world)",
            "54028": "Cassini (world)",
            "54080": "Compact Miller (world)",
            "54046": "Craster Parabolic (world)",
            "54051": "Cube (world)",
            "54034": "Cylindrical Equal Area (world)",
            "54015": "Eckert I (world)",
            "54014": "Eckert II (world)",
            "54013": "Eckert III (world)",
            "54012": "Eckert IV (world)",
            "54011": "Eckert V (world)",
            "54010": "Eckert VI (world)",
            "8857": "Equal Earth (world)",
            "8858": "Equal Earth (world) Americas",
            "8859": "Equal Earth (world) Asia-Pacific",
            "54027": "Equidistant Conic (world)",
            "54002": "Equidistant Cylindrical (world)",
            "54045": "Flat Polar Quartic (world)",
            "54050": "Fuller (world)",
            "102498": "GOES-16 East ABI Fixed Grid ITRF2008",
            "54016": "Gall Stereographic (world)",
            "54052": "Goode Homolosine (Land)",
            "54053": "Goode Homolosine (Ocean)",
            "54044": "Hammer-Aitoff (world)",
            "54025": "Hotine (world)",
            "54023": "Loximuthal (world)",
            "54004": "Mercator (world)",
            "54003": "Miller Cylindrical (world)",
            "54009": "Mollweide (world)",
            "3410": "NSIDC EASE Grid Global",
            "54077": "Natural Earth (world)",
            "54078": "Natural Earth II (world)",
            "54079": "Patterson (world)",
            "54091": "Peirce quincuncial North Pole in a diamond (world)",
            "54090": "Peirce quincuncial North Pole in a square (world)",
            "54001": "Plate Carree (world)",
            "54021": "Polyconic (world)",
            "54022": "Quartic Authalic (world)",
            "54030": "Robinson (world)",
            "54008": "Sinusoidal (world)",
            "54099": "Spilhaus Ocean Map in Square",
            "54026": "Stereographic (world)",
            "102038": "The World from Space",
            "54048": "Times (world)",
            "54100": "Tobler Cylindrical I (world)",
            "54101": "Tobler Cylindrical II (world)",
            "54031": "Two Point Equidistant (world)",
            "54029": "Van der Grinten I (world)",
            "54049": "Vertical Perspective (world)",
            "3975": "WGS 1984 EASE Grid Global",
            "6933": "WGS 1984 NSIDC EASE-Grid 2.0 Global",
            "3832": "WGS 1984 PDC Mercator",
            "32662": "WGS 1984 Plate Carree",
            "3857": "WGS 1984 Web Mercator (auxiliary sphere)",
            "4087": "WGS 1984 World Equidistant Cylindrical (std parallel = 0)",
            "3395": "WGS 1984 World Mercator",
            "54074": "Wagner IV (world)",
            "54075": "Wagner V (world)",
            "54076": "Wagner VII (world)",
            "54018": "Winkel I (world)",
            "54019": "Winkel II (world)",
            "54042": "Winkel Tripel (NGS - world)"
        },
        "World (Sphere-based)": {
            "53043": "Aitoff (sphere)",
            "53032": "Azimuthal Equidistant (sphere)",
            "53017": "Behrmann (sphere)",
            "53024": "Bonne (sphere)",
            "53028": "Cassini (sphere)",
            "53080": "Compact Miller (sphere)",
            "53046": "Craster Parabolic (sphere)",
            "53034": "Cylindrical Equal Area (sphere)",
            "53015": "Eckert I (sphere)",
            "53014": "Eckert II (sphere)",
            "53013": "Eckert III (sphere)",
            "53012": "Eckert IV (sphere)",
            "53011": "Eckert V (sphere)",
            "53010": "Eckert VI (sphere)",
            "53035": "Equal Earth (sphere)",
            "53036": "Equal Earth (sphere) Americas",
            "53037": "Equal Earth (sphere) Asia-Pacific",
            "53027": "Equidistant Conic (sphere)",
            "53002": "Equidistant Cylindrical (sphere)",
            "53045": "Flat Polar Quartic (sphere)",
            "53016": "Gall Stereographic (sphere)",
            "53044": "Hammer-Aitoff (sphere)",
            "53025": "Hotine (sphere)",
            "53023": "Loximuthal (sphere)",
            "53004": "Mercator (sphere)",
            "53003": "Miller Cylindrical (sphere)",
            "53009": "Mollweide (sphere)",
            "53077": "Natural Earth (sphere)",
            "53078": "Natural Earth II (sphere)",
            "53079": "Patterson (sphere)",
            "53001": "Plate Carree (sphere)",
            "53021": "Polyconic (sphere)",
            "53022": "Quartic Authalic (sphere)",
            "53030": "Robinson (sphere)",
            "53008": "Sinusoidal (sphere)",
            "53026": "Stereographic (sphere)",
            "53048": "Times (sphere)",
            "53031": "Two Point Equidistant (sphere)",
            "53029": "Van der Grinten I (sphere)",
            "53049": "Vertical Perspective (sphere)",
            "53074": "Wagner IV (sphere)",
            "53075": "Wagner V (sphere)",
            "53076": "Wagner VII (sphere)",
            "53018": "Winkel I (sphere)",
            "53019": "Winkel II (sphere)",
            "53042": "Winkel Tripel (NGS - sphere)",
            "4088": "World Equidistant Cylindrical (Sphere) (GRS80 authalic) (std parallel = 0)"
        }
    },
    "Vertical Coordinate Systems": {
        "Ellipsoidal-based": {
            Africa: { "115719": "Hartebeesthoek94", "115744": "LGD2006", "115754": "Moznet", "115785": "RGRDC 2005" },
            Asia: {
                "115705": "China Geodetic Coordinate System 2000",
                "115710": "DGN 1995",
                "115711": "DRUKREF 03",
                "115716": "GDBD2009",
                "115717": "GDM 2000",
                "115845": "GGD",
                "115839": "Hong Kong Geodetic CS",
                "115721": "IG05 Intermediate CRS",
                "115723": "IG05(2012) Intermediate CRS",
                "115720": "IGD05",
                "115722": "IGD05(2012)",
                "115724": "IGM 1995",
                "115725": "IGRS",
                "115740": "JGD 2000",
                "115741": "JGD 2011",
                "115742": "Korea 2000",
                "115743": "Lao 1997",
                "115747": "MACAO 2008",
                "115753": "MONREF 1997",
                "115843": "MTRF-2000",
                "115764": "Nepal Nagarkot",
                "115846": "ONGD14",
                "115847": "ONGD17",
                "115767": "PNG94",
                "115771": "PRS 1992",
                "115793": "SLD99",
                "115800": "TWD 1997",
                "115802": "Yemen NGN 1996"
            },
            "Australia and New Zealand": { "115715": "GDA 1994", "115805": "GDA2020", "115765": "NZGD 2000" },
            "Central America": {
                "115849": "CR-SIRGAS",
                "115708": "CR05",
                "115749": "MARCARIO SOLIS",
                "115851": "SIRGAS Continuously Operating Network DGF00P01",
                "115852": "SIRGAS Continuously Operating Network DGF01P01",
                "115853": "SIRGAS Continuously Operating Network DGF01P02",
                "115854": "SIRGAS Continuously Operating Network DGF02P01",
                "115855": "SIRGAS Continuously Operating Network DGF04P01",
                "115856": "SIRGAS Continuously Operating Network DGF05P01",
                "115857": "SIRGAS Continuously Operating Network DGF06P01",
                "115858": "SIRGAS Continuously Operating Network DGF07P01",
                "115859": "SIRGAS Continuously Operating Network DGF08P01",
                "115860": "SIRGAS Continuously Operating Network SIR09P01",
                "115861": "SIRGAS Continuously Operating Network SIR10P01",
                "115862": "SIRGAS Continuously Operating Network SIR11P01",
                "115863": "SIRGAS Continuously Operating Network SIR13P01",
                "115864": "SIRGAS Continuously Operating Network SIR14P01",
                "115865": "SIRGAS Continuously Operating Network SIR15P01",
                "115866": "SIRGAS Continuously Operating Network SIR17P01"
            },
            Europe: {
                "115806": "BGS2005",
                "115709": "DB-REF",
                "115873": "ETRF 2005",
                "115874": "ETRF 2014",
                "115829": "ETRF2000",
                "115822": "ETRF90",
                "115823": "ETRF91",
                "115824": "ETRF92",
                "115825": "ETRF93",
                "115826": "ETRF94",
                "115827": "ETRF96",
                "115828": "ETRF97",
                "115701": "ETRS 1989",
                "115713": "EUREF-FIN",
                "115712": "Estonia 1997",
                "115714": "FEH2010",
                "115813": "GSK-2011",
                "115726": "IRENET95",
                "115727": "ISN 1993",
                "115728": "ISN 2004",
                "115838": "ISN2016",
                "115872": "KOSOVAREF01",
                "115745": "LKS 1992",
                "115746": "LKS 1994",
                "115752": "MOLDREF99",
                "115773": "PZ 1990",
                "115815": "PZ-90.02",
                "115814": "PZ-90.11",
                "115774": "RDN2008",
                "115778": "RGF 1993",
                "115848": "S-JTSK [JTSK03]",
                "115796": "S-JTSK-05",
                "115797": "S-JTSK-05 (Ferro)",
                "115842": "SRB ETRS89",
                "115795": "SREF98",
                "115798": "SWEREF99",
                "115794": "Slovenia 1996",
                "115706": "Swiss TRF 1995",
                "115804": "TUREF",
                "115801": "Ukraine 2000"
            },
            "North America": {
                "115844": "California SRS Epoch 2017.50 (NAD83)",
                "115718": "Greenland 1996",
                "115751": "Mexico ITRF2008",
                "115702": "NAD 1983",
                "115755": "NAD 1983 (2011)",
                "115757": "NAD 1983 (CSRS)",
                "115840": "NAD 1983 (FBN)",
                "115841": "NAD 1983 (HARN Corrected)",
                "115761": "NAD 1983 (NSRS2007)",
                "115756": "NAD 1983 CORS96",
                "115758": "NAD 1983 HARN",
                "115831": "NAD83(CSRS)v2",
                "115832": "NAD83(CSRS)v3",
                "115833": "NAD83(CSRS)v4",
                "115834": "NAD83(CSRS)v5",
                "115835": "NAD83(CSRS)v6",
                "115836": "NAD83(CSRS)v7",
                "115830": "NAD83(CSRS96)"
            },
            Oceans: {
                "115707": "CIGD11",
                "115704": "Cadastre 1997",
                "115739": "JAD 2001",
                "115760": "NAD 1983 (MARP00)",
                "115762": "NAD 1983 (PA11)",
                "115763": "NAD 1983 (PACP00)",
                "115759": "NAD_1983 (MA11)",
                "115772": "PTRA08",
                "115775": "REGCAN95",
                "115777": "RGAF09",
                "115779": "RGFG 1995",
                "115780": "RGM 2004",
                "115781": "RGNC 1991",
                "115782": "RGNC 1991-93",
                "115783": "RGPF",
                "115784": "RGR 1992",
                "115786": "RGSPM 2006",
                "115850": "RGWF96",
                "115787": "RRAF 1991",
                "115811": "SHGD2015",
                "115812": "St. Helena Tritan",
                "115799": "TGD2005"
            },
            Polar: { "115703": "Australian Antarctic 1998", "115788": "RSRGD2000" },
            "South America": {
                "115748": "MAGNA",
                "115750": "MARGEN",
                "115768": "POSGAR",
                "115769": "POSGAR 1994",
                "115770": "POSGAR 1998",
                "115766": "Peru96",
                "115776": "REGVEN",
                "115789": "SIRGAS 2000",
                "115851": "SIRGAS Continuously Operating Network DGF00P01",
                "115852": "SIRGAS Continuously Operating Network DGF01P01",
                "115853": "SIRGAS Continuously Operating Network DGF01P02",
                "115854": "SIRGAS Continuously Operating Network DGF02P01",
                "115855": "SIRGAS Continuously Operating Network DGF04P01",
                "115856": "SIRGAS Continuously Operating Network DGF05P01",
                "115857": "SIRGAS Continuously Operating Network DGF06P01",
                "115858": "SIRGAS Continuously Operating Network DGF07P01",
                "115859": "SIRGAS Continuously Operating Network DGF08P01",
                "115860": "SIRGAS Continuously Operating Network SIR09P01",
                "115861": "SIRGAS Continuously Operating Network SIR10P01",
                "115862": "SIRGAS Continuously Operating Network SIR11P01",
                "115863": "SIRGAS Continuously Operating Network SIR13P01",
                "115864": "SIRGAS Continuously Operating Network SIR14P01",
                "115865": "SIRGAS Continuously Operating Network SIR15P01",
                "115866": "SIRGAS Continuously Operating Network SIR17P01",
                "115791": "SIRGAS ES2007.8",
                "115790": "SIRGAS-Chile",
                "115792": "SIRGAS-ROU98"
            },
            World: {
                "115868": "IGS00",
                "115870": "IGS05",
                "115837": "IGS14",
                "115867": "IGS97",
                "115869": "IGb00",
                "115871": "IGb08",
                "115729": "ITRF 1988",
                "115730": "ITRF 1989",
                "115731": "ITRF 1990",
                "115732": "ITRF 1991",
                "115733": "ITRF 1992",
                "115734": "ITRF 1993",
                "115735": "ITRF 1996",
                "115736": "ITRF 1997",
                "115737": "ITRF 2000",
                "115738": "ITRF 2005",
                "115803": "ITRF 2008",
                "115810": "ITRF 2014",
                "115700": "WGS 1984",
                "115819": "WGS 1984 (G1150)",
                "115818": "WGS 1984 (G1674)",
                "115817": "WGS 1984 (G1762)",
                "115821": "WGS 1984 (G730)",
                "115820": "WGS 1984 (G873)",
                "115816": "WGS 1984 (Transit)"
            }
        },
        "Gravity-related": {
            Africa: { "9402": "Ceuta 2 height", "5796": "Lagos 1955", "5722": "Maputo", "9279": "SA LLD height" },
            Asia: {
                "5734": "AIOC95 (Depth)",
                "5797": "AIOC95 (Height)",
                "5752": "Bandar Abbas",
                "5706": "Caspian",
                "5611": "Caspian height",
                "5725": "Fahud Height Datum 1993",
                "5751": "Fao",
                "3886": "Fao 1979",
                "7976": "HKPD depth",
                "5726": "Ha Tien 1960",
                "5727": "Hon Dau 1992",
                "5739": "Hong Kong Chart Datum",
                "5738": "Hong Kong Principal Datum",
                "9471": "INAGeoid2020 height",
                "5193": "Incheon (Height)",
                "6693": "JSLD72 height",
                "6694": "Japanese Geodetic Datum 2000 (vertical) height",
                "6695": "Japanese Geodetic Datum 2011 (vertical) height",
                "5723": "Japanese Standard Levelling Datum 1969",
                "5790": "KOC Construction Datum",
                "7979": "KOC WD height",
                "5789": "KOC Well Datum",
                "5614": "KOC Well Datum (depth in IFt)",
                "9335": "KSA-VRF14 height",
                "5788": "Kuwait PWD",
                "8841": "MVGC height",
                "8434": "Macao height",
                "9681": "NVD 1992 height",
                "5724": "PDO Height Datum 1993",
                "5843": "Ras Ghumays (Height)",
                "6916": "SHD height",
                "5237": "SLVD (Height)",
                "8904": "TWVD 2001 height",
                "5736": "Yellow Sea 1956",
                "5737": "Yellow Sea 1985"
            },
            "Australia and New Zealand": {
                "5711": "AHD",
                "5712": "AHD (Tasmania)",
                "9458": "AVWS height",
                "5759": "Auckland",
                "5760": "Bluff",
                "5771": "Chatham Island",
                "5761": "Dunedin",
                "4458": "Dunedin Bluff 1960 height",
                "5762": "Gisborne",
                "5763": "Lyttelton",
                "5764": "Moturiki",
                "4440": "NZVD2009 height",
                "7839": "NZVD2016 height",
                "5765": "Napier",
                "5766": "Nelson",
                "5767": "One Tree Point",
                "5772": "Stewart Island",
                "5769": "Taranaki",
                "5768": "Tararu",
                "5770": "Wellington"
            },
            "Central America": { "8911": "DACR52 height" },
            Europe: {
                "5782": "Alicante",
                "5775": "Antalya",
                "9669": "BGS2005 height",
                "5705": "Baltic",
                "8358": "Baltic 1957 depth",
                "8357": "Baltic 1957 height",
                "5786": "Baltic 1982",
                "9650": "Baltic 1986 height",
                "5612": "Baltic depth",
                "5735": "Black Sea",
                "5336": "Black Sea (Depth)",
                "9672": "CD Norway depth",
                "9722": "Cagliari 1956 height",
                "9721": "Catania 1965 height",
                "5781": "Constanta",
                "7699": "DHHN12 height",
                "7837": "DHHN2016 height",
                "5784": "DHHN85",
                "5783": "DHHN92",
                "5799": "DVR90",
                "5733": "Dansk Normal Nul",
                "5777": "Durres",
                "9663": "EH2000 height",
                "5787": "EOMA 1980",
                "5621": "EVRF 2007",
                "9389": "EVRF 2019 height",
                "9390": "EVRF 2019 mean-tide height",
                "9274": "EVRF2000 Austria height",
                "9651": "EVRF2007-PL height",
                "5730": "EVRS 2000",
                "5597": "FCSVR10 (Height)",
                "5317": "FVR09 (Height)",
                "7446": "Famagusta 1960 height",
                "5778": "GHA",
                "5214": "Genoa (Height)",
                "5610": "HVRS71",
                "8089": "ISN2004 height",
                "9394": "Ibiza height",
                "9666": "LAS07 height",
                "9287": "LAT NL depth",
                "5729": "LHN95",
                "5728": "LN 1902",
                "7700": "Latvia 2000 height",
                "9288": "MSL NL depth",
                "9392": "Mallorca height",
                "9393": "Menorca height",
                "3900": "N2000 height",
                "8675": "N43 height",
                "5717": "N60",
                "5709": "NAP",
                "5774": "NG-L",
                "5791": "NGC 1948",
                "5720": "NGF IGN69",
                "5721": "NGF IGN78",
                "5719": "NGF Lallemand",
                "5941": "NN2000 height",
                "5776": "NN54",
                "5710": "Oostende",
                "5716": "Piraeus",
                "105603": "REDNAP height",
                "5615": "RH1900",
                "5613": "RH2000",
                "5718": "RH70",
                "5785": "SNN76",
                "8691": "SRB_VRS12 height",
                "5779": "SVS2000",
                "8690": "SVS2010",
                "5195": "Trieste (Height)",
                "8881": "Vienna height"
            },
            "Ireland and United Kingdom": {
                "5732": "Belfast",
                "9451": "British Isles height (ensemble)",
                "5750": "Douglas",
                "5741": "Fair Isle",
                "5748": "Flannan Isles",
                "5743": "Foula",
                "9303": "HS2-VRF height",
                "5742": "Lerwick",
                "5731": "Malin Head",
                "5701": "Newlyn",
                "5740": "Newlyn (Orkney Isles)",
                "5745": "North Rona",
                "7707": "ODN (Offshore) height",
                "5754": "Poolbeg",
                "7962": "Poolbeg height (m)",
                "5747": "St Kilda",
                "5749": "St Marys",
                "5746": "Stornoway",
                "5744": "Sule Skerry"
            },
            "North America": {
                "5713": "CGVD 1928",
                "9245": "CGVD2013 (CGG2013a) height",
                "6647": "CGVD2013 height",
                "8266": "GVR2000 height",
                "8267": "GVR2016 height",
                "5608": "IGLD 1955",
                "5609": "IGLD 1985",
                "8053": "MSL depth (ftUS)",
                "8052": "MSL height (ftUS)",
                "6358": "NAVD88 depth (ftUS)",
                "6357": "NAVD88 depth (m)",
                "8228": "NAVD88 height (ftIntl)",
                "6360": "NAVD88 height (ftUS)",
                "5703": "NAVD88 height (m)",
                "6359": "NGVD29 depth (ftUS)",
                "5702": "NGVD29 height (ftUS)",
                "7968": "NGVD29 height (m)"
            },
            Oceans: {
                "Atlantic Ocean": {
                    "5792": "Danger 1950",
                    "9401": "El Hierro height",
                    "9396": "Fuerteventura height",
                    "9397": "Gran Canaria height",
                    "7888": "Jamestown 1971 height",
                    "9399": "La Gomera height",
                    "9400": "La Palma height",
                    "9395": "Lanzarote height",
                    "7890": "SHVD2015 height",
                    "7889": "St. Helena Tritan 2011 height",
                    "9398": "Tenerife height"
                },
                "Caribbean Sea": {
                    "6132": "CBVD61 height",
                    "6130": "GCVD54 height",
                    "5795": "Guadeloupe 1951",
                    "5756": "IGN 1987",
                    "5757": "IGN 1988",
                    "9130": "IGN 2008 LD height",
                    "6131": "LCVD61 height",
                    "5794": "Martinique 1950",
                    "6641": "PRVD02 height",
                    "6642": "VIVD09 height"
                },
                "Indian Ocean": { "5758": "IGN 1989", "5793": "Mayotte 1950" },
                "Pacific Ocean": {
                    "6643": "ASVD02 height",
                    "5607": "Bora Bora SAU 2001",
                    "6644": "GUVD04 height",
                    "6639": "Guam 1963 height",
                    "5605": "Huahine SAU 2001",
                    "5601": "IGN 1966",
                    "5616": "IGN 1988 Les Saintes",
                    "5617": "IGN 1988 Marie-Galante",
                    "5619": "IGN 1988 St Barthelemy",
                    "5620": "IGN 1988 St Martin",
                    "5618": "IGN 1992 La Desirade",
                    "7652": "Kiunga height",
                    "7651": "Kumul 34 height",
                    "5604": "Maupiti SAU 2001",
                    "5602": "Moorea SAU 1981",
                    "5753": "NGNC",
                    "9351": "NGNC08 height",
                    "5600": "NGPF",
                    "6640": "NMVD03 height",
                    "7447": "PNG08 height",
                    "7841": "POM08 height",
                    "7832": "POM96 height",
                    "9675": "Pago Pago 2020 height",
                    "5603": "Raiatea SAU 2001",
                    "5606": "Tahaa SAU 2001",
                    "6638": "Tutuila 1962 height"
                }
            },
            Portugal: {
                "6184": "Cais da Figueirinha - Angra do Heroismo height",
                "6182": "Cais da Madalena height",
                "6178": "Cais da Pontinha - Funchal height",
                "6179": "Cais da Vila - Porto Santo height",
                "6186": "Cais da Vila do Porto height",
                "6180": "Cais das Velas height",
                "5780": "Cascais",
                "6181": "Horta height",
                "6187": "Ponta Delgada height",
                "6183": "Santa Cruz da Graciosa height",
                "6185": "Santa Cruz das Flores height"
            },
            "South America": { "5755": "NGG 1977", "9255": "SRVN16 height" },
            World: {
                "3855": "EGM2008 Geoid",
                "5798": "EGM84 Geoid",
                "5773": "EGM96 Geoid",
                "5872": "HAT (Height)",
                "5871": "HHWLT (Height)",
                "5874": "HW (Height)",
                "5863": "ISLW (Depth)",
                "5831": "Instantaneous Water Level (Depth)",
                "5829": "Instantaneous Water Level (Height)",
                "5861": "LAT (Depth)",
                "5862": "LLWLT (Depth)",
                "5873": "LW (Depth)",
                "5869": "MHHW (Height)",
                "5868": "MHW (Height)",
                "5870": "MHWS (Height)",
                "5866": "MLLW (Depth)",
                "5864": "MLLWS (Depth)",
                "5867": "MLW (Depth)",
                "5865": "MLWS (Depth)",
                "5715": "MSL (Depth)",
                "5714": "MSL (Height)",
                "8051": "MSL depth (ft)",
                "8050": "MSL height (ft)",
                "105700": "WGS 1984 Geoid"
            }
        },
        "Unknown Height Systems": {
            "115808": "Unknown height system (US survey feet)",
            "115809": "Unknown height system (international feet)",
            "115807": "Unknown height system (meters)"
        }
    }
};

/**
 * Flatten a nested object into a single level.
 * https://stackoverflow.com/a/55251598
 * @param {NestedObject} obj the object to flatten
 * @returns {Record<string, string>} the flattened object
 */
const flattenObject = (obj) => {
    const flattened = {};
    Object.keys(obj).forEach((key) => {
        const value = obj[key];
        if (typeof value === "object") {
            Object.assign(flattened, flattenObject(value));
        }
        else {
            flattened[key] = value;
        }
    });
    return flattened;
};
let wkidMap = undefined;
/**
 * Returns a flat map of all the spatial references, using WKID as the key
 * @returns {Map<number, string>} the map of spatial references
 */
function getWkidMap() {
    if (wkidMap === undefined) {
        wkidMap = new Map();
        const flatWkids = flattenObject(srCategories);
        Object.keys(flatWkids).forEach((key) => {
            wkidMap?.set(Number(key), flatWkids[key]);
        });
    }
    return wkidMap;
}
/**
 * Returns matching spatial reference description for given WKID
 * @param {number} wkid the WKID of the spatial reference
 * @returns {string} the description of the spatial reference (if found)
 */
function getSpatialReferenceDescription(wkid) {
    if (wkidMap === undefined)
        wkidMap = getWkidMap();
    return wkidMap.get(wkid);
}
/**
 * Returns list of matching spatial references for a given search string
 * @param {string} searchString the search stringFields
 * @returns {NestedObject} the list of matching spatial references
 */
function filterSpatialReferences(searchString) {
    if (wkidMap === undefined)
        wkidMap = getWkidMap();
    const regexPattern = new RegExp(searchString, "ig");
    const matches = {};
    wkidMap.forEach((value, key) => {
        if (regexPattern.test(value) || regexPattern.test(key.toString())) {
            matches[String(key)] = value;
        }
    });
    return matches;
}



//# sourceMappingURL=spatial-reference-helper-42965f73.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/widget-factory-e81c7501.js":
/*!***********************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/widget-factory-e81c7501.js ***!
  \***********************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ createRFxSaveModal),
/* harmony export */   b: () => (/* binding */ buildTitlePane),
/* harmony export */   c: () => (/* binding */ createRFxItemBrowser),
/* harmony export */   d: () => (/* binding */ buildRfxSection),
/* harmony export */   e: () => (/* binding */ createRFxLabelWrapper)
/* harmony export */ });
/* harmony import */ var _type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./type-gaurds-1840747f.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/type-gaurds-1840747f.js");


/**
 * Rfx section widget
 * @param {RFxWidgetProps['label']} label - label of the section
 * @param {RFxWidgetProps['open']} open whether or not the component is open
 * @returns {HTMLRfxSectionElement} - Rfx section component
 */
const buildRfxSection = ({ label, open }) => {
    const rfxSection = document.createElement("rfx-section");
    rfxSection.label = label;
    rfxSection.open = open;
    return rfxSection;
};
/**
 * Rfx wrapper around calcite-block, used as function panel
 * @param {RFxWidgetProps['content']} content - content of the section
 * @param {RFxWidgetProps['title']} title - title of the section
 * @param {RFxWidgetProps['isFunctionChain']} isFunctionChain whether or not the rfxtemplate being built is Function Chain
 * @param {RFxWidgetProps['unsupportedWarningComponent']} unsupportedWarningComponent HTMLCalciteNoticeElement notice to append to panel incase rfxtemplate has unsupported ui-overrrdies / data/domain types
 * @returns {HTMLCalciteBlockElement} - Rfx section component
 */
const buildTitlePane = ({ content, unsupportedWarningComponent, title, isFunctionChain }) => {
    const titlePane = document.createElement("calcite-block");
    titlePane.open = true;
    // if function chain show Function name as heading
    if (isFunctionChain === true) {
        titlePane.heading = title;
        titlePane.collapsible = true;
        titlePane.headingLevel = 3;
    }
    if (!(0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_0__.i)(unsupportedWarningComponent)) {
        titlePane.appendChild(unsupportedWarningComponent);
    }
    titlePane.appendChild(content);
    return titlePane;
};
/**
 * Rfx wrapper around rfx-block, used to display label of function parameters
 * @param {RFxWidgetProps['label']} label - label of the parameter
 * @param {RFxWidgetProps['hideHelp']} hideHelp whether or not to show the help icon next to parameter label
 * @param {RFxWidgetProps['onHelpActionClick']} onHelpActionClick function to be executed when helpAction is clicked
 * @returns {HTMLCalciteBlockElement} - Rfx label component
 */
const createRFxLabelWrapper = ({ label, hideHelp = false, onHelpActionClick }) => {
    const labelWrapper = document.createElement("rfx-label");
    labelWrapper.label = label;
    labelWrapper.hideHelp = hideHelp;
    labelWrapper.addEventListener("rfxLabelHelpActionClick", onHelpActionClick);
    return labelWrapper;
};
/**
 * To create save dialgoue on save or save as click
 * @param {RFxModalProps['portal']} portal - portal to which the item should be saved
 * @param {RFxModalProps['portalItem']} portalItem potal item details to be shown on save dialogue
 * @param {RFxModalProps['onCancelClick']} onCancelClick function to be executed when cancel is clicked
 * @returns {HTMLRFxSaveModalElement} - Rfx save modal element
 */
const createRFxSaveModal = ({ portal, portalItem, onCancel }) => {
    const saveModalElement = document.createElement("rfx-save-modal");
    saveModalElement.portal = portal;
    saveModalElement.portalItem = portalItem;
    saveModalElement.addEventListener("cancelClick", onCancel);
    return saveModalElement;
};
/**
 * To create item broser for RFT browsing
 * @param {RfxSaveModalProps['portal']} portal - portal to which the item should be saved
 * @param {RFxWidgetProps['portalItem']} portalItem potal item details to be shown on save dialogue
 * @param {RFxWidgetProps['onCancelClick']} onCancelClick function to be executed when cancel is clicked
 * @returns {HTMLRFxSaveModalElement} - Rfx save modal element
 */
const createRFxItemBrowser = ({ header, portal, user, onClose, onSelection }) => {
    const itemBrowserElement = document.createElement("rfx-item-browser");
    itemBrowserElement.portal = portal;
    itemBrowserElement.user = user;
    itemBrowserElement.header = header;
    itemBrowserElement.filter = `(type: "Raster function template")`;
    itemBrowserElement.selectionMode = "single";
    itemBrowserElement.addEventListener("rfxItemBrowserClose", onClose);
    itemBrowserElement.addEventListener("rfxItemBrowserSelection", onSelection);
    return itemBrowserElement;
};



//# sourceMappingURL=widget-factory-e81c7501.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,