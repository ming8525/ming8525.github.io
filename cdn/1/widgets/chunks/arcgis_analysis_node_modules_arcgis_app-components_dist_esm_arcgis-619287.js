"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_arcgis-619287"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-smart-mapping.entry.js":
/*!***********************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-smart-mapping.entry.js ***!
  \***********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   arcgis_smart_mapping: () => (/* binding */ ArcgisSmartMapping)
/* harmony export */ });
/* harmony import */ var _index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-e3bf7da7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-e3bf7da7.js");
/* harmony import */ var _locale_050b6db9_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./locale-050b6db9.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-050b6db9.js");
/* harmony import */ var _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./raster-unique-value-0976ec7f.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/raster-unique-value-0976ec7f.js");
/* harmony import */ var _loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./loadModules-b4ac1247.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-b4ac1247.js");
/* harmony import */ var _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./commonEnums-fcf13661.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/commonEnums-fcf13661.js");
/* harmony import */ var _raster_renderer_a62f152c_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./raster-renderer-a62f152c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/raster-renderer-a62f152c.js");
/* harmony import */ var _location_e26b539f_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./location-e26b539f.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/location-e26b539f.js");
/* harmony import */ var _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./languageUtil-ef0e54b2.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-ef0e54b2.js");
/* harmony import */ var _dom_4d367677_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./dom-4d367677.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-4d367677.js");
/* harmony import */ var _index_05956cab_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./index-05956cab.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-05956cab.js");
/* harmony import */ var _commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./commonFunctions-b0830e9e.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/commonFunctions-b0830e9e.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */












async function loadSmartMappingModules() {
    const [AuthoringInfo, SimpleRenderer, AttributeColorInfo, Point, Polyline, Polygon, Graphic, SpatialReference, SimpleMarkerSymbol, SimpleLineSymbol, SimpleFillSymbol, Query, FeatureSet, Field, intl, OpacityVariableCreator, PieChartCreator, ColorCreator, UnivariateColorSizeCreator, DotDensityCreator, HeatmapCreator, LocationCreator, PredominanceCreator, RelationshipCreator, SizeCreator, TypeCreator, RasterFlowCreator, RasterVectorFieldCreator, RasterStretchCreator, RasterRGBCreator, RasterShadedReliefCreator, RasterClassBreaksCreator, RasterColormapCreator, RasterUniqueValueCreator, rasterColorRampUtils, RasterRendererUtils, esriColor, typeSchemes, heatmapSchemes, relationshipSchemes, predominanceSchemes, pieChartSchemes, colorSchemes, dotDensitySchemes, colorUtils, MultipartColorRamp, AlgorithmicColorRamp, flowSchemes, heatmapStatistics, summaryStatistics, histogram, predominantCategories, SizeStop, RotationVariable, SizeVariable, HeatmapColorStop, UniqueValue, UniqueValueClass, UniqueValueGroup, OpacitySlider, HeatmapSlider, ColorSlider, ClassedColorSlider, SizeSlider, ClassedSizeSlider, ColorSizeSlider, BinaryColorSizeSlider, Slider, esriLang, fieldUtils, smartMappingUtils, smartMappingRasterUtils, cimSymbolUtils, previewSymbol2D, reactiveUtils, rendererJsonUtils, rendererSupportUtils, screenUtils, symbolUtils] = await (0,_loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_3__.l)([
        "esri/renderers/support/AuthoringInfo",
        "esri/renderers/SimpleRenderer",
        "esri/renderers/support/AttributeColorInfo",
        "esri/geometry/Point",
        "esri/geometry/Polyline",
        "esri/geometry/Polygon",
        "esri/Graphic",
        "esri/geometry/SpatialReference",
        "esri/symbols/SimpleMarkerSymbol",
        "esri/symbols/SimpleLineSymbol",
        "esri/symbols/SimpleFillSymbol",
        "esri/rest/support/Query",
        "esri/rest/support/FeatureSet",
        //"esri/views/layers/FeatureLayerView",
        "esri/layers/support/Field",
        "esri/intl",
        "esri/smartMapping/renderers/opacity",
        "esri/smartMapping/renderers/pieChart",
        "esri/smartMapping/renderers/color",
        "esri/smartMapping/renderers/univariateColorSize",
        "esri/smartMapping/renderers/dotDensity",
        "esri/smartMapping/renderers/heatmap",
        "esri/smartMapping/renderers/location",
        "esri/smartMapping/renderers/predominance",
        "esri/smartMapping/renderers/relationship",
        "esri/smartMapping/renderers/size",
        "esri/smartMapping/renderers/type",
        "esri/smartMapping/raster/renderers/flow",
        "esri/smartMapping/raster/renderers/vectorField",
        "esri/smartMapping/raster/renderers/stretch",
        "esri/smartMapping/raster/renderers/rgb",
        "esri/smartMapping/raster/renderers/shadedRelief",
        "esri/smartMapping/raster/renderers/classBreaks",
        "esri/smartMapping/raster/renderers/colormap",
        "esri/smartMapping/raster/renderers/uniqueValue",
        "esri/smartMapping/raster/support/colorRamps",
        "esri/smartMapping/raster/support/utils",
        "esri/Color",
        "esri/smartMapping/symbology/type",
        "esri/smartMapping/symbology/heatmap",
        "esri/smartMapping/symbology/relationship",
        "esri/smartMapping/symbology/predominance",
        "esri/smartMapping/symbology/pieChart",
        "esri/smartMapping/symbology/color",
        "esri/smartMapping/symbology/dotDensity",
        "esri/views/support/colorUtils",
        "esri/rest/support/MultipartColorRamp",
        "esri/rest/support/AlgorithmicColorRamp",
        "esri/smartMapping/symbology/flow",
        "esri/smartMapping/statistics/heatmapStatistics",
        "esri/smartMapping/statistics/summaryStatistics",
        "esri/smartMapping/statistics/histogram",
        "esri/smartMapping/statistics/predominantCategories",
        "esri/renderers/visualVariables/support/SizeStop",
        "esri/renderers/visualVariables/RotationVariable",
        "esri/renderers/visualVariables/SizeVariable",
        "esri/renderers/support/HeatmapColorStop",
        "esri/renderers/support/UniqueValue",
        "esri/renderers/support/UniqueValueClass",
        "esri/renderers/support/UniqueValueGroup",
        "esri/widgets/smartMapping/OpacitySlider",
        "esri/widgets/smartMapping/HeatmapSlider",
        "esri/widgets/smartMapping/ColorSlider",
        "esri/widgets/smartMapping/ClassedColorSlider",
        "esri/widgets/smartMapping/SizeSlider",
        "esri/widgets/smartMapping/ClassedSizeSlider",
        "esri/widgets/smartMapping/ColorSizeSlider",
        "esri/widgets/smartMapping/BinaryColorSizeSlider",
        "esri/widgets/Slider",
        "esri/core/lang",
        "esri/layers/support/fieldUtils",
        "esri/widgets/smartMapping/support/utils",
        "esri/smartMapping/raster/support/utils",
        "esri/symbols/support/cimSymbolUtils",
        "esri/symbols/support/previewSymbol2D",
        "esri/core/reactiveUtils",
        "esri/renderers/support/jsonUtils",
        "esri/renderers/support/utils",
        "esri/core/screenUtils",
        "esri/symbols/support/symbolUtils"
    ]);
    _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s.modules = {
        AuthoringInfo,
        SimpleRenderer,
        AttributeColorInfo,
        Point,
        Polyline,
        Polygon,
        Graphic,
        SpatialReference,
        SimpleMarkerSymbol,
        SimpleLineSymbol,
        SimpleFillSymbol,
        Query,
        FeatureSet,
        //FeatureLayerView,
        Field,
        intl,
        OpacityVariableCreator,
        PieChartCreator,
        ColorCreator,
        UnivariateColorSizeCreator,
        DotDensityCreator,
        HeatmapCreator,
        LocationCreator,
        PredominanceCreator,
        RelationshipCreator,
        SizeCreator,
        TypeCreator,
        RasterFlowCreator,
        RasterVectorFieldCreator,
        RasterStretchCreator,
        RasterRGBCreator,
        RasterShadedReliefCreator,
        RasterClassBreaksCreator,
        RasterColormapCreator,
        RasterUniqueValueCreator,
        rasterColorRampUtils,
        RasterRendererUtils,
        esriColor,
        typeSchemes,
        heatmapSchemes,
        relationshipSchemes,
        predominanceSchemes,
        pieChartSchemes,
        colorSchemes,
        dotDensitySchemes,
        colorUtils,
        MultipartColorRamp,
        AlgorithmicColorRamp,
        flowSchemes,
        heatmapStatistics,
        summaryStatistics,
        histogram,
        predominantCategories,
        SizeStop,
        RotationVariable,
        SizeVariable,
        HeatmapColorStop,
        UniqueValue,
        UniqueValueClass,
        UniqueValueGroup,
        OpacitySlider,
        HeatmapSlider,
        ColorSlider,
        ClassedColorSlider,
        SizeSlider,
        ClassedSizeSlider,
        ColorSizeSlider,
        BinaryColorSizeSlider,
        Slider,
        esriLang,
        fieldUtils,
        smartMappingUtils,
        smartMappingRasterUtils,
        cimSymbolUtils,
        previewSymbol2D,
        reactiveUtils,
        rendererJsonUtils,
        rendererSupportUtils,
        screenUtils,
        symbolUtils
    };
}

const ArcgisSmartMapping = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisSmartMappingClose = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingClose", 7);
        this.arcgisSmartMappingError = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingError", 7);
        this.arcgisSmartMappingClusterRequiresUpdate = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingClusterRequiresUpdate", 7);
        this.closedViaEvent = false;
        this.allFlowItemComponents = `arcgis-smart-mapping-panels-gallery,
      arcgis-smart-mapping-panels-simple,
      arcgis-smart-mapping-panels-heatmap,
      arcgis-smart-mapping-panels-predominance,
      arcgis-smart-mapping-panels-predominance-size,
      arcgis-smart-mapping-panels-relationship,
      arcgis-smart-mapping-panels-relationship-size,
      arcgis-smart-mapping-panels-size,
      arcgis-smart-mapping-panels-chart,
      arcgis-smart-mapping-panels-chart-size,
      arcgis-smart-mapping-panels-color,
      arcgis-smart-mapping-panels-color-size,
      arcgis-smart-mapping-panels-color-size-univariate,
      arcgis-smart-mapping-panels-compare,
      arcgis-smart-mapping-panels-dot-density,
      arcgis-smart-mapping-panels-type,
      arcgis-smart-mapping-panels-type-size,
      arcgis-smart-mapping-panels-raster-gallery,
      arcgis-smart-mapping-panels-raster-flow,
      arcgis-smart-mapping-panels-raster-vector-field,
      arcgis-smart-mapping-panels-raster-stretch,
      arcgis-smart-mapping-panels-raster-rgb,
      arcgis-smart-mapping-panels-raster-shaded-relief,
      arcgis-smart-mapping-panels-raster-class-breaks,
      arcgis-smart-mapping-panels-raster-colormap,
      arcgis-smart-mapping-panels-raster-unique-value`;
        this.portal = undefined;
        this.config = undefined;
        this.mapView = undefined;
        this.layer = undefined;
        this.skipGallery = false;
        this.stylePart = undefined;
        this.hideLayerTitle = false;
    }
    arcgisSmartMappingCloseHandler() {
        this.closedViaEvent = true;
    }
    //--------------------------------------------------------------------------
    //
    //  Public Methods
    //
    //--------------------------------------------------------------------------
    /**
     * Set focus on component
     */
    async setFocus() {
        this.flowNode.setFocus();
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    async componentWillLoad() {
        var _a;
        const { mapView, layer } = this;
        if (!layer || !mapView) {
            // error
            return;
        }
        await loadSmartMappingModules();
        if (layer.declaredClass === "esri.layers.support.Sublayer") {
            // for predom, age, heatmap+field, and dotDensity:
            //   layer.capabilities?.query?.supportsSqlExpression
            // for bivariate and relationship:
            //   layer.version >= 10.51 && cimVersion >= 1.4
            let supportsArcade = false;
            const cimVersionStr = (_a = layer.layer.sourceJSON) === null || _a === void 0 ? void 0 : _a.cimVersion;
            if (cimVersionStr) {
                const ar = cimVersionStr.split(".");
                const cimVersion = parseFloat(ar.length === 1 ? cimVersionStr : ar[0] + "." + ar[1]);
                supportsArcade =
                    layer.layer.version >= 10.51 && cimVersion >= 1.4;
            }
            _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s.mapImageSublayer = layer;
            delete _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s.layer;
            await _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s.modules.reactiveUtils
                .whenOnce(() => !mapView.updating)
                .then(async () => {
                await _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s.mapImageSublayer
                    .createFeatureLayer()
                    .then(async (sublayerFL) => {
                    this.layer = sublayerFL;
                    await sublayerFL.load().then(async () => {
                        await this.loadStore();
                        _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s.supportsArcade = supportsArcade;
                        this.processLayer();
                    });
                });
            });
        }
        else {
            _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s.mapImageSublayer = null;
            await this.loadStore();
            this.processLayer();
        }
    }
    disconnectedCallback() {
        if (!this.closedViaEvent) {
            this.arcgisSmartMappingClose.emit("save");
        }
    }
    async loadStore() {
        const [strings, currentLanguage, currentLanguageFull] = await (0,_locale_050b6db9_js__WEBPACK_IMPORTED_MODULE_1__.g)(this.hostElement);
        // createStore gets called just once in a app session
        // clear a previous state
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.c)(_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s);
        const { portal, config, mapView, layer, hideLayerTitle } = this;
        _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s.portal = portal;
        _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s.config = config;
        _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s.mapView = mapView;
        _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s.layer = layer;
        _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s.hideLayerTitle = hideLayerTitle;
        _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s.strings = strings;
        _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s.locale = currentLanguage;
        _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s.fullLocale = currentLanguageFull;
        _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s.isRTL = (0,_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_7__.g)(this.hostElement) === "rtl";
    }
    // --------------------------------------------------------------------------
    //
    //  Render Methods
    //
    //--------------------------------------------------------------------------
    render() {
        const { skipGallery } = this;
        const { layer, isRTL } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.H, { class: "calcite-match-height" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-flow", { class: {
                flow: true,
                [_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_7__.C.rtl]: isRTL
            }, ref: (node) => {
                this.flowNode = node;
            },
            // @ts-ignore
            customItemSelectors: this.allFlowItemComponents }, skipGallery ? (this.renderSkipGallery()) : layer.type === "geo-rss" ? ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-panels-simple", { onArcgisSmartMappingPanelsSimpleClose: ({ detail: clickType }) => this.arcgisSmartMappingClose.emit(clickType), onArcgisSmartMappingPanelsSimpleBackClick: () => this.arcgisSmartMappingClose.emit("save") })) : (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.i)(layer) ? ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-panels-raster-gallery", { onArcgisSmartMappingPanelsRasterGalleryClose: ({ detail: clickType }) => this.arcgisSmartMappingClose.emit(clickType), onArcgisSmartMappingPanelsRasterGalleryError: ({ detail }) => this.arcgisSmartMappingError.emit(detail) })) : ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-panels-gallery", { onArcgisSmartMappingPanelsGalleryClose: ({ detail: clickType }) => this.arcgisSmartMappingClose.emit(clickType), onArcgisSmartMappingPanelsGalleryError: ({ detail }) => this.arcgisSmartMappingError.emit(detail), onArcgisSmartMappingPanelsGalleryClusterRequiresUpdate: () => this.arcgisSmartMappingClusterRequiresUpdate.emit() })))));
    }
    renderSkipGallery() {
        const { originalRendererJSON, originalFeatureReduction, stylePart } = this;
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
        const rendererType = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.i)(layer)
            ? (0,_raster_renderer_a62f152c_js__WEBPACK_IMPORTED_MODULE_5__.g)()
            : (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.g)();
        switch (rendererType) {
            case "simple":
                return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-panels-simple", { onArcgisSmartMappingPanelsSimpleClose: ({ detail: clickType }) => {
                        if (clickType === "cancel" && originalRendererJSON) {
                            // we had an unsupported renderer that we switched to simple
                            (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.j)(originalRendererJSON, originalFeatureReduction);
                        }
                        this.arcgisSmartMappingClose.emit(clickType);
                    }, onArcgisSmartMappingPanelsSimpleError: ({ detail }) => this.arcgisSmartMappingError.emit(detail) }));
            case "heatmap":
                return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-panels-heatmap", { onArcgisSmartMappingPanelsHeatmapClose: ({ detail: clickType }) => this.arcgisSmartMappingClose.emit(clickType), onArcgisSmartMappingPanelsHeatmapError: ({ detail }) => this.arcgisSmartMappingError.emit(detail) }));
            case "color":
            case "color-age":
                return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-panels-color", { onArcgisSmartMappingPanelsColorClose: ({ detail: clickType }) => this.arcgisSmartMappingClose.emit(clickType), onArcgisSmartMappingPanelsColorError: ({ detail }) => this.arcgisSmartMappingError.emit(detail) }));
            case "size":
            case "size-age":
                return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-panels-size", { onArcgisSmartMappingPanelsSizeClose: ({ detail: clickType }) => this.arcgisSmartMappingClose.emit(clickType), onArcgisSmartMappingPanelsSizeError: ({ detail }) => this.arcgisSmartMappingError.emit(detail) }));
            case "color-size":
            case "color-age-size":
            case "color-size-age":
                const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.h)(layer);
                const colorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.a)(renderer, "color");
                const sizeVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.a)(renderer, "size");
                if (colorVisVar.field === sizeVisVar.field &&
                    colorVisVar.valueExpression === sizeVisVar.valueExpression &&
                    colorVisVar.valueExpressionTitle === sizeVisVar.valueExpressionTitle) {
                    // same field
                    return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-panels-color-size-univariate", { onArcgisSmartMappingPanelsColorSizeUnivariateClose: ({ detail: clickType }) => this.arcgisSmartMappingClose.emit(clickType), onArcgisSmartMappingPanelsColorSizeUnivariateError: ({ detail }) => this.arcgisSmartMappingError.emit(detail) }));
                }
                else {
                    if (stylePart === "color") {
                        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-panels-color", { onArcgisSmartMappingPanelsColorClose: ({ detail: clickType }) => this.arcgisSmartMappingClose.emit(clickType), onArcgisSmartMappingPanelsColorError: ({ detail }) => this.arcgisSmartMappingError.emit(detail) }));
                    }
                    else if (stylePart === "size") {
                        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-panels-size", { onArcgisSmartMappingPanelsSizeClose: ({ detail: clickType }) => this.arcgisSmartMappingClose.emit(clickType), onArcgisSmartMappingPanelsSizeError: ({ detail }) => this.arcgisSmartMappingError.emit(detail) }));
                    }
                    else {
                        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-panels-color-size", { onArcgisSmartMappingPanelsColorSizeClose: ({ detail: clickType }) => this.arcgisSmartMappingClose.emit(clickType), onArcgisSmartMappingPanelsColorSizeError: ({ detail }) => this.arcgisSmartMappingError.emit(detail) }));
                    }
                }
            case "compare":
                return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-panels-compare", { onArcgisSmartMappingPanelsCompareClose: ({ detail: clickType }) => this.arcgisSmartMappingClose.emit(clickType), onArcgisSmartMappingPanelsCompareError: ({ detail }) => this.arcgisSmartMappingError.emit(detail) }));
            case "dot-density":
                return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-panels-dot-density", { onArcgisSmartMappingPanelsDotDensityClose: ({ detail: clickType }) => this.arcgisSmartMappingClose.emit(clickType) }));
            case "relationship":
                return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-panels-relationship", { onArcgisSmartMappingPanelsRelationshipClose: ({ detail: clickType }) => this.arcgisSmartMappingClose.emit(clickType), onArcgisSmartMappingPanelsRelationshipError: ({ detail }) => this.arcgisSmartMappingError.emit(detail) }));
            case "relationship-size":
                if (stylePart === "color") {
                    return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-panels-relationship", { onArcgisSmartMappingPanelsRelationshipClose: ({ detail: clickType }) => this.arcgisSmartMappingClose.emit(clickType), onArcgisSmartMappingPanelsRelationshipError: ({ detail }) => this.arcgisSmartMappingError.emit(detail) }));
                }
                else if (stylePart === "size") {
                    return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-panels-size", { onArcgisSmartMappingPanelsSizeClose: ({ detail: clickType }) => this.arcgisSmartMappingClose.emit(clickType), onArcgisSmartMappingPanelsSizeError: ({ detail }) => this.arcgisSmartMappingError.emit(detail) }));
                }
                else {
                    return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-panels-relationship-size", { onArcgisSmartMappingPanelsRelationshipSizeClose: ({ detail: clickType }) => this.arcgisSmartMappingClose.emit(clickType), onArcgisSmartMappingPanelsRelationshipSizeError: ({ detail }) => this.arcgisSmartMappingError.emit(detail) }));
                }
            case "predominance":
                return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-panels-predominance", { onArcgisSmartMappingPanelsPredominanceClose: ({ detail: clickType }) => this.arcgisSmartMappingClose.emit(clickType), onArcgisSmartMappingPanelsPredominanceError: ({ detail }) => this.arcgisSmartMappingError.emit(detail) }));
            case "predominance-size":
                if (stylePart === "color") {
                    return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-panels-predominance", { onArcgisSmartMappingPanelsPredominanceClose: ({ detail: clickType }) => this.arcgisSmartMappingClose.emit(clickType), onArcgisSmartMappingPanelsPredominanceError: ({ detail }) => this.arcgisSmartMappingError.emit(detail) }));
                }
                else if (stylePart === "size") {
                    return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-panels-size", { onArcgisSmartMappingPanelsSizeClose: ({ detail: clickType }) => this.arcgisSmartMappingClose.emit(clickType), onArcgisSmartMappingPanelsSizeError: ({ detail }) => this.arcgisSmartMappingError.emit(detail) }));
                }
                else {
                    return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-panels-predominance-size", { onArcgisSmartMappingPanelsPredominanceSizeClose: ({ detail: clickType }) => this.arcgisSmartMappingClose.emit(clickType), onArcgisSmartMappingPanelsPredominanceSizeError: ({ detail }) => this.arcgisSmartMappingError.emit(detail) }));
                }
            case "chart":
                return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-panels-chart", { onArcgisSmartMappingPanelsChartClose: ({ detail: clickType }) => this.arcgisSmartMappingClose.emit(clickType), onArcgisSmartMappingPanelsChartError: ({ detail }) => this.arcgisSmartMappingError.emit(detail) }));
            case "chart-size":
                if (stylePart === "color") {
                    return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-panels-chart", { onArcgisSmartMappingPanelsChartClose: ({ detail: clickType }) => this.arcgisSmartMappingClose.emit(clickType), onArcgisSmartMappingPanelsChartError: ({ detail }) => this.arcgisSmartMappingError.emit(detail) }));
                }
                else if (stylePart === "size") {
                    return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-panels-size", { onArcgisSmartMappingPanelsSizeClose: ({ detail: clickType }) => this.arcgisSmartMappingClose.emit(clickType), onArcgisSmartMappingPanelsSizeError: ({ detail }) => this.arcgisSmartMappingError.emit(detail) }));
                }
                else {
                    return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-panels-chart-size", { onArcgisSmartMappingPanelsChartSizeClose: ({ detail: clickType }) => this.arcgisSmartMappingClose.emit(clickType), onArcgisSmartMappingPanelsChartSizeError: ({ detail }) => this.arcgisSmartMappingError.emit(detail) }));
                }
            case "type":
                return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-panels-type", { onArcgisSmartMappingPanelsTypeClose: ({ detail: clickType }) => this.arcgisSmartMappingClose.emit(clickType), onArcgisSmartMappingPanelsTypeError: ({ detail }) => this.arcgisSmartMappingError.emit(detail) }));
            case "type-size":
                if (stylePart === "color") {
                    return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-panels-type", { onArcgisSmartMappingPanelsTypeClose: ({ detail: clickType }) => this.arcgisSmartMappingClose.emit(clickType), onArcgisSmartMappingPanelsTypeError: ({ detail }) => this.arcgisSmartMappingError.emit(detail) }));
                }
                else if (stylePart === "size") {
                    return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-panels-size", { onArcgisSmartMappingPanelsSizeClose: ({ detail: clickType }) => this.arcgisSmartMappingClose.emit(clickType), onArcgisSmartMappingPanelsSizeError: ({ detail }) => this.arcgisSmartMappingError.emit(detail) }));
                }
                else {
                    return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-panels-type-size", { onArcgisSmartMappingPanelsTypeSizeClose: ({ detail: clickType }) => this.arcgisSmartMappingClose.emit(clickType), onArcgisSmartMappingPanelsTypeSizeError: ({ detail }) => this.arcgisSmartMappingError.emit(detail) }));
                }
            case "raster-flow":
                return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-panels-raster-flow", { onArcgisSmartMappingPanelsRasterFlowClose: ({ detail: clickType }) => this.arcgisSmartMappingClose.emit(clickType), onArcgisSmartMappingPanelsRasterFlowError: ({ detail }) => this.arcgisSmartMappingError.emit(detail) }));
            case "raster-vector-field":
                return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-panels-raster-vector-field", { onArcgisSmartMappingPanelsRasterVectorFieldClose: ({ detail: clickType }) => this.arcgisSmartMappingClose.emit(clickType), onArcgisSmartMappingPanelsRasterVectorFieldError: ({ detail }) => this.arcgisSmartMappingError.emit(detail) }));
            case "raster-stretch":
                return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-panels-raster-stretch", { onArcgisSmartMappingPanelsRasterStretchClose: ({ detail: clickType }) => this.arcgisSmartMappingClose.emit(clickType), onArcgisSmartMappingPanelsRasterStretchError: ({ detail }) => this.arcgisSmartMappingError.emit(detail) }));
            case "raster-rgb":
                return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-panels-raster-rgb", { onArcgisSmartMappingPanelsRasterRgbClose: ({ detail: clickType }) => this.arcgisSmartMappingClose.emit(clickType), onArcgisSmartMappingPanelsRasterRgbError: ({ detail }) => this.arcgisSmartMappingError.emit(detail) }));
            case "raster-shaded-relief":
                return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-panels-raster-shaded-relief", { onArcgisSmartMappingPanelsRasterShadedReliefClose: ({ detail: clickType }) => this.arcgisSmartMappingClose.emit(clickType), onArcgisSmartMappingPanelsRasterShadedReliefError: ({ detail }) => this.arcgisSmartMappingError.emit(detail) }));
            case "raster-class-breaks":
                return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-panels-raster-class-breaks", { onArcgisSmartMappingPanelsRasterClassBreaksClose: ({ detail: clickType }) => this.arcgisSmartMappingClose.emit(clickType), onArcgisSmartMappingPanelsRasterClassBreaksError: ({ detail }) => this.arcgisSmartMappingError.emit(detail) }));
            case "raster-colormap":
                return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-panels-raster-colormap", { onArcgisSmartMappingPanelsRasterColormapClose: ({ detail: clickType }) => this.arcgisSmartMappingClose.emit(clickType) }));
            case "raster-unique-value":
                return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-panels-raster-unique-value", { onArcgisSmartMappingPanelsRasterUniqueValueClose: ({ detail: clickType }) => this.arcgisSmartMappingClose.emit(clickType), onArcgisSmartMappingPanelsRasterUniqueValueError: ({ detail }) => this.arcgisSmartMappingError.emit(detail) }));
            default:
                return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-panels-simple", { onArcgisSmartMappingPanelsSimpleClose: ({ detail: clickType }) => this.arcgisSmartMappingClose.emit(clickType), onArcgisSmartMappingPanelsSimpleError: ({ detail }) => this.arcgisSmartMappingError.emit(detail) }));
        }
    }
    // --------------------------------------------------------------------------
    //
    //  Private methods
    //
    // --------------------------------------------------------------------------
    async processLayer() {
        const { layer: smLayer, mapImageSublayer, strings, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
        let renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.h)(smLayer);
        if (!renderer && (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.i)(smLayer)) {
            const layer = smLayer;
            await modules.smartMappingRasterUtils
                .getSupportedRendererInfo({ layer })
                .then((response) => {
                layer.renderer = response.defaultRenderer;
                renderer = response.defaultRenderer;
            });
        }
        const rendererType = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.i)(smLayer)
            ? (0,_raster_renderer_a62f152c_js__WEBPACK_IMPORTED_MODULE_5__.g)()
            : (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.g)();
        _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s.oneFeatureResponseStatus = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.b.MISSING;
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.d)().then(() => {
            // supported renderer?
            if (rendererType === "unknown") {
                console.log("unsupported renderer", renderer);
                // save original renderer
                this.originalRendererJSON = renderer.toJSON();
                this.originalFeatureReduction =
                    "featureReduction" in smLayer && smLayer.featureReduction
                        ? modules.esriLang.clone(smLayer.featureReduction)
                        : undefined;
                // create simple renderer
                (0,_location_e26b539f_js__WEBPACK_IMPORTED_MODULE_6__.c)()
                    .then((result) => {
                    (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.e)(modules.esriLang.clone(result.renderer), smLayer);
                    if (mapImageSublayer) {
                        mapImageSublayer.renderer = result.renderer;
                    }
                    _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s.selectedFields = [];
                })
                    .catch((err) => {
                    console.log(err);
                });
            }
            else {
                _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s.selectedFields = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.f)(smLayer);
                _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s.selectedFields.forEach((selectedField) => {
                    if (selectedField.expression && !selectedField.expressionTitle) {
                        selectedField.expressionTitle = strings.expression;
                    }
                });
            }
        });
    }
    static get assetsDirs() { return ["assets"]; }
    get hostElement() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};



//# sourceMappingURL=arcgis-smart-mapping.entry.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/location-e26b539f.js":
/*!**************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/location-e26b539f.js ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ buildOutlineVisVar),
/* harmony export */   b: () => (/* binding */ buildSizeAutoVisVar),
/* harmony export */   c: () => (/* binding */ createSimpleRenderer)
/* harmony export */ });
/* harmony import */ var _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./raster-unique-value-0976ec7f.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/raster-unique-value-0976ec7f.js");
/* harmony import */ var _loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./loadModules-b4ac1247.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-b4ac1247.js");
/* harmony import */ var _commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./commonFunctions-b0830e9e.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/commonFunctions-b0830e9e.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */




/**
 * Updates the layer with a Simple renderer with default settings
 * @param options: options
 */
function createSimpleRenderer(options) {
    var _a;
    const { layer: smLayer, mapImageSublayer, mapView, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    const layer = smLayer;
    options = options || {};
    const extras = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.m)((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer));
    return modules.LocationCreator.createRenderer({
        layer,
        view: mapView,
        outlineOptimizationEnabled: mapImageSublayer
            ? false
            : (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_2__.i)(options.outlineOptimizationEnabled)
                ? options.outlineOptimizationEnabled
                : true,
        sizeOptimizationEnabled: mapImageSublayer
            ? false
            : (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_2__.i)(options.sizeOptimizationEnabled)
                ? options.sizeOptimizationEnabled
                : true,
        forBinning: ((_a = layer.featureReduction) === null || _a === void 0 ? void 0 : _a.type) === "binning"
    }).then((result) => {
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.l)(extras, result.renderer);
        return Promise.resolve(result);
    }, (error) => Promise.reject(error));
}
function buildOutlineVisVar() {
    var _a;
    // TODO - can we just get the visualVariable without a full renderer?
    const { layer: smLayer, mapView, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    const layer = smLayer;
    return modules.LocationCreator.createRenderer({
        layer,
        view: mapView,
        outlineOptimizationEnabled: true,
        forBinning: ((_a = layer.featureReduction) === null || _a === void 0 ? void 0 : _a.type) === "binning"
    }).then((result) => {
        const sizeOutlineVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a)(result.renderer, "size", "outline");
        return Promise.resolve(sizeOutlineVisVar);
    });
}
function buildSizeAutoVisVar() {
    var _a;
    const { layer: smLayer, mapView, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    const layer = smLayer;
    return modules.LocationCreator.createRenderer({
        layer,
        view: mapView,
        outlineOptimizationEnabled: false,
        sizeOptimizationEnabled: true,
        forBinning: ((_a = layer.featureReduction) === null || _a === void 0 ? void 0 : _a.type) === "binning"
    }).then((result) => {
        const sizeAutoVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a)(result.renderer, "size", "auto");
        return Promise.resolve(sizeAutoVisVar);
    });
}



//# sourceMappingURL=location-e26b539f.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/raster-renderer-a62f152c.js":
/*!*********************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/raster-renderer-a62f152c.js ***!
  \*********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ applyRasterRenderer),
/* harmony export */   g: () => (/* binding */ getRasterRendererType),
/* harmony export */   n: () => (/* binding */ normalizeColorRamp)
/* harmony export */ });
/* harmony import */ var _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./raster-unique-value-0976ec7f.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/raster-unique-value-0976ec7f.js");
/* harmony import */ var _loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./loadModules-b4ac1247.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-b4ac1247.js");
/* harmony import */ var _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./commonEnums-fcf13661.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/commonEnums-fcf13661.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */




function getRasterRendererType() {
    var _a, _b;
    const { layer: smLayer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    const layer = smLayer;
    switch ((_a = layer === null || layer === void 0 ? void 0 : layer.renderer) === null || _a === void 0 ? void 0 : _a.type) {
        case "flow":
            return "raster-flow";
        case "vector-field":
            return "raster-vector-field";
        case "class-breaks":
            return "raster-class-breaks";
        case "unique-value":
            return "raster-unique-value";
        case "raster-stretch":
            return (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.k)(layer) ? "raster-rgb" : "raster-stretch";
        case "raster-shaded-relief":
            return "raster-shaded-relief";
        default:
            return (_b = layer.renderer) === null || _b === void 0 ? void 0 : _b.type;
    }
}
// TODO: add other raster renderer types
function applyRasterRenderer(renderer, layer) {
    if ("renderer" in layer) {
        layer.renderer = renderer;
    }
}
function normalizeColorRamp(colorRamp) {
    const { modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    if (!colorRamp) {
        return [
            new modules.esriColor([0, 0, 0, 1]),
            new modules.esriColor([50, 50, 50, 1]),
            new modules.esriColor([73, 73, 73, 1]),
            new modules.esriColor([140, 140, 140, 1]),
            new modules.esriColor([255, 255, 255, 1])
        ];
    }
    if ((colorRamp === null || colorRamp === void 0 ? void 0 : colorRamp.type) !== "multipart") {
        return [colorRamp.fromColor, colorRamp.toColor];
    }
    const colorRamps = colorRamp.colorRamps;
    const colors = colorRamps.map((colorRamp) => colorRamp.fromColor);
    colors.push(colorRamps[colorRamps.length - 1].toColor);
    return colors;
}



//# sourceMappingURL=raster-renderer-a62f152c.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,