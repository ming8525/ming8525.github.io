"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_arcgis-cbe964"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-sketch_5.entry.js":
/*!******************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-sketch_5.entry.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   arcgis_sketch: () => (/* binding */ ArcgisSketch),
/* harmony export */   arcgis_sketch_content: () => (/* binding */ ArcgisSketchContent),
/* harmony export */   arcgis_sketch_shortcuts: () => (/* binding */ ArcgisSketchShortcuts),
/* harmony export */   arcgis_sketch_snapping: () => (/* binding */ ArcgisSketchSnapping),
/* harmony export */   arcgis_sketch_tools: () => (/* binding */ ArcgisSketchTools)
/* harmony export */ });
/* harmony import */ var _index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-e3bf7da7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-e3bf7da7.js");
/* harmony import */ var _locale_050b6db9_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./locale-050b6db9.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-050b6db9.js");
/* harmony import */ var _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./languageUtil-ef0e54b2.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-ef0e54b2.js");
/* harmony import */ var _loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./loadModules-b4ac1247.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-b4ac1247.js");
/* harmony import */ var _storage_0353a769_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./storage-0353a769.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/storage-0353a769.js");
/* harmony import */ var _functional_44de8fcf_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./functional-44de8fcf.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-44de8fcf.js");
/* harmony import */ var _symbolUtils_f207d979_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./symbolUtils-f207d979.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/symbolUtils-f207d979.js");
/* harmony import */ var _index_05956cab_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./index-05956cab.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-05956cab.js");
/* harmony import */ var _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./commonEnums-fcf13661.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/commonEnums-fcf13661.js");
/* harmony import */ var _commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./commonFunctions-b0830e9e.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/commonFunctions-b0830e9e.js");
/* harmony import */ var _fontUtil_bbe5d03d_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./fontUtil-bbe5d03d.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/fontUtil-bbe5d03d.js");
/* harmony import */ var _dom_4d367677_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./dom-4d367677.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-4d367677.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */













const suggestedColorList = [
    "#ff4040",
    "#ff8202",
    "#faa83e",
    "#ffd159",
    "#73b566",
    "#008977",
    "#33e3c8",
    "#43abeb",
    "#4b64c9",
    "#9868ed",
    "#b055e6",
    "#db5181",
    "#e03b99",
    "#2b2b2b",
    "#bdbdbd",
    "#ffffff"
];
const savedColorList = [
    "#ffffff",
    "#bdbdbd",
    "#2b2b2b",
    "#e03b99",
    "#db5181",
    "#b055e6",
    "#9868ed",
    "#4b64c9",
    "#43abeb",
    "#33e3c8",
    "#008977",
    "#73b566",
    "#ffd159",
    "#faa83e",
    "#ff8202",
    "#ff4040"
];

function getGeometryTypeFromGraphic(currGraphic) {
    var _a, _b;
    switch ((_a = currGraphic === null || currGraphic === void 0 ? void 0 : currGraphic.geometry) === null || _a === void 0 ? void 0 : _a.type) {
        case "point":
            if (((_b = currGraphic === null || currGraphic === void 0 ? void 0 : currGraphic.symbol) === null || _b === void 0 ? void 0 : _b.type) === "text") {
                return "text";
            }
            else {
                return "point";
            }
        case "polyline":
            return "polyline";
        default:
            return "polygon";
    }
}

const saveSnappingToStorage = (snappingOptions, currentSnappingSessionStorageId) => {
    // get enabled layers and save object in session storage
    const featureSourcesIds = [
        ...new Set([...snappingOptions.featureSources.filter((source) => source.enabled).map((source) => source.layer.id)])
    ];
    const snappingObject = {
        enabled: snappingOptions.enabled,
        selfEnabled: snappingOptions.selfEnabled,
        featureEnabled: snappingOptions.featureEnabled,
        featureSourcesIds: featureSourcesIds
    };
    (0,_storage_0353a769_js__WEBPACK_IMPORTED_MODULE_4__.a)(currentSnappingSessionStorageId, snappingObject, true);
};
const getSnappingOptions = (snappingSessionStorageIds, layer, mapView, SnappingOptions) => {
    const snapping = getSnappingFromStorage(snappingSessionStorageIds) || {
        enabled: true,
        selfEnabled: true,
        featureEnabled: true,
        featureSourcesIds: [layer.id]
    };
    return new SnappingOptions({
        enabled: snapping.enabled,
        selfEnabled: snapping.selfEnabled,
        featureEnabled: snapping.featureEnabled,
        featureSources: getFeatureSourcesFromLayerIds(mapView, snapping.featureSourcesIds)
    });
};
const getFeatureSourcesFromLayerIds = (mapView, layerIds) => {
    const featureSources = [];
    layerIds.forEach((layerId) => {
        mapView.map.allLayers.toArray().find((layer) => {
            if ((layer === null || layer === void 0 ? void 0 : layer.type) === "map-notes" && layer.id === layerId) {
                featureSources.push({ layer, enabled: true });
            }
        });
    });
    return featureSources;
};
const getSnappingFromStorage = (snappingSessionStorageIds) => {
    if (snappingSessionStorageIds) {
        return ((0,_storage_0353a769_js__WEBPACK_IMPORTED_MODULE_4__.b)(snappingSessionStorageIds.webmap, true) ||
            (0,_storage_0353a769_js__WEBPACK_IMPORTED_MODULE_4__.b)(snappingSessionStorageIds.current, true) ||
            null);
    }
    return null;
};

class SVModel {
    constructor(mapNotesLayer, mapView, SketchViewModel, snappingOptions, tooltipOptions, onGraphicCreate, onGraphicUpdate) {
        this.mapNotesLayer = mapNotesLayer;
        this.mapView = mapView;
        // point
        this.sketchViewModelPoint = new SketchViewModel({
            layer: this.mapNotesLayer.pointLayer,
            view: this.mapView,
            defaultCreateOptions: { hasZ: false, mode: "hybrid" },
            updateOnGraphicClick: false,
            defaultUpdateOptions: { multipleSelectionEnabled: false },
            snappingOptions,
            tooltipOptions
        });
        this.sketchViewModelPoint.on("create", (event) => onGraphicCreate(event, this.sketchViewModelPoint));
        this.sketchViewModelPoint.on("update", (event) => onGraphicUpdate(event));
        // line
        this.sketchViewModelLine = new SketchViewModel({
            layer: this.mapNotesLayer.polylineLayer,
            view: this.mapView,
            defaultCreateOptions: { hasZ: false, mode: "hybrid" },
            updateOnGraphicClick: false,
            defaultUpdateOptions: { multipleSelectionEnabled: false },
            snappingOptions,
            tooltipOptions
        });
        this.sketchViewModelLine.on("create", (event) => onGraphicCreate(event, this.sketchViewModelLine));
        this.sketchViewModelLine.on("update", (event) => onGraphicUpdate(event));
        // polygon
        this.sketchViewModelPolygon = new SketchViewModel({
            layer: this.mapNotesLayer.polygonLayer,
            view: this.mapView,
            defaultCreateOptions: { hasZ: false, mode: "hybrid" },
            updateOnGraphicClick: false,
            defaultUpdateOptions: { multipleSelectionEnabled: false },
            snappingOptions,
            tooltipOptions
        });
        this.sketchViewModelPolygon.on("create", (event) => onGraphicCreate(event, this.sketchViewModelPolygon));
        this.sketchViewModelPolygon.on("update", (event) => onGraphicUpdate(event));
        // text
        this.sketchViewModelText = new SketchViewModel({
            layer: this.mapNotesLayer.textLayer,
            view: this.mapView,
            defaultCreateOptions: { hasZ: false, mode: "hybrid" },
            updateOnGraphicClick: false,
            defaultUpdateOptions: { multipleSelectionEnabled: false },
            snappingOptions,
            tooltipOptions
        });
        this.sketchViewModelText.on("create", (event) => onGraphicCreate(event, this.sketchViewModelText));
        this.sketchViewModelText.on("update", (event) => onGraphicUpdate(event));
    }
    delete() {
        this._deletePoint();
        this._deleteLine();
        this._deletePolygon();
        this._deleteText();
    }
    cancel() {
        this._cancelPoint();
        this._cancelLine();
        this._cancelPolygon();
        this._cancelText();
    }
    duplicate() {
        this._duplicatePoint();
        this._duplicateLine();
        this._duplicatePolygon();
        this._duplicateText();
    }
    updateOnGraphic(hitTest, update) {
        var _a;
        (_a = this.hitTestHandle) === null || _a === void 0 ? void 0 : _a.remove();
        if (hitTest) {
            this.hitTestHandle = this.mapView.on("click", async (event) => {
                const hitTestResults = await this.mapView.hitTest(event, {
                    include: this.mapNotesLayer
                });
                const results = hitTestResults.results;
                if (results.length) {
                    // sort by hit test order and choose the 1st result
                    const order = ["point", "polyline", "polygon"];
                    results.sort(function (a, b) {
                        return order.indexOf(a.graphic.geometry.type) - order.indexOf(b.graphic.geometry.type);
                    });
                    const currGraphic = results[0].graphic;
                    switch (currGraphic.layer) {
                        case this.mapNotesLayer.pointLayer:
                            this.updatePoint([currGraphic]);
                            break;
                        case this.mapNotesLayer.textLayer:
                            this.updateText([currGraphic]);
                            break;
                        case this.mapNotesLayer.polylineLayer:
                            this.updateLine([currGraphic]);
                            break;
                        case this.mapNotesLayer.polygonLayer:
                            this.updatePolygon([currGraphic]);
                        default:
                            return;
                    }
                }
                else {
                    if (update) {
                        update({ state: "complete" });
                    }
                }
            });
        }
    }
    destroy() {
        this._destroyPoint();
        this._destroyLine();
        this._destroyPolygon();
        this._destroyText();
    }
    getPointSVM() {
        return this.sketchViewModelPoint;
    }
    getPoint() {
        return this.sketchViewModelPoint.pointSymbol;
    }
    setPoint(symbol) {
        this.sketchViewModelPoint.pointSymbol = symbol;
    }
    createPoint() {
        this.sketchViewModelPoint.create("point");
    }
    updatePoint(graphics) {
        this.sketchViewModelPoint.update(graphics);
    }
    _deletePoint() {
        this.sketchViewModelPoint.delete();
    }
    _cancelPoint() {
        this.sketchViewModelPoint.cancel();
    }
    _duplicatePoint() {
        this.sketchViewModelPoint.duplicate();
    }
    _destroyPoint() {
        this.sketchViewModelPoint.destroy();
    }
    // line
    getLineSVM() {
        return this.sketchViewModelLine;
    }
    getLine() {
        return this.sketchViewModelLine.polylineSymbol;
    }
    setLine(symbol) {
        this.sketchViewModelLine.polylineSymbol = symbol;
    }
    createLine() {
        this.sketchViewModelLine.create("polyline");
    }
    updateLine(graphics) {
        this.sketchViewModelLine.update(graphics);
    }
    _deleteLine() {
        this.sketchViewModelLine.delete();
    }
    _cancelLine() {
        this.sketchViewModelLine.cancel();
    }
    _duplicateLine() {
        this.sketchViewModelLine.duplicate();
    }
    _destroyLine() {
        this.sketchViewModelLine.destroy();
    }
    // polygon
    getPolygonSVM() {
        return this.sketchViewModelPolygon;
    }
    getPolygon() {
        return this.sketchViewModelPolygon.polygonSymbol;
    }
    setPolygon(symbol) {
        this.sketchViewModelPolygon.polygonSymbol = symbol;
    }
    createPolygon(tool) {
        this.sketchViewModelPolygon.create(tool);
    }
    updatePolygon(graphics) {
        this.sketchViewModelPolygon.update(graphics);
    }
    _deletePolygon() {
        this.sketchViewModelPolygon.delete();
    }
    _cancelPolygon() {
        this.sketchViewModelPolygon.cancel();
    }
    _duplicatePolygon() {
        this.sketchViewModelPolygon.duplicate();
    }
    _destroyPolygon() {
        this.sketchViewModelPolygon.destroy();
    }
    // text
    getTextSVM() {
        return this.sketchViewModelText;
    }
    getText() {
        return this.sketchViewModelText.pointSymbol;
    }
    setText(symbol) {
        this.sketchViewModelText.pointSymbol = symbol;
    }
    createText() {
        this.sketchViewModelText.create("point");
    }
    updateText(graphics) {
        this.sketchViewModelText.update(graphics);
    }
    _deleteText() {
        this.sketchViewModelText.delete();
    }
    _cancelText() {
        this.sketchViewModelText.cancel();
    }
    _duplicateText() {
        this.sketchViewModelText.duplicate();
    }
    _destroyText() {
        this.sketchViewModelText.destroy();
    }
}

const defaultLineSymbol = async (mapView, ColorUtils) => {
    const backgroundThemeColor = await ColorUtils.getBackgroundColorTheme(mapView);
    return {
        type: "simple-line",
        color: backgroundThemeColor === "light" ? [0, 0, 0] : [255, 255, 255],
        width: 1 * 0.75
    };
};
const defaultPolygonSymbol = async (mapView, ColorUtils) => {
    const backgroundThemeColor = await ColorUtils.getBackgroundColorTheme(mapView);
    return {
        type: "simple-fill",
        color: backgroundThemeColor === "light" ? [0, 0, 0, 0.25] : [255, 255, 255, 0.25],
        style: "solid",
        outline: {
            color: backgroundThemeColor === "light" ? [0, 0, 0] : [255, 255, 255],
            width: 1 * 0.75
        }
    };
};
const defaultTextSymbol = async (mapView, ColorUtils, TextSymbol, text) => {
    const backgroundColor = await ColorUtils.getBackgroundColor(mapView);
    const backgroundThemeColor = await ColorUtils.getBackgroundColorTheme(mapView);
    return new TextSymbol({
        text,
        color: backgroundThemeColor === "light"
            ? [0, 0, 0]
            : backgroundThemeColor === "dark"
                ? [255, 255, 255]
                : backgroundColor || [0, 0, 0],
        haloColor: null,
        haloSize: 1 * 0.75,
        font: {
            size: 22 * 0.75,
            family: "Arial",
            weight: "bold"
        },
        lineWidth: 512
    });
};
const defaultCimSymbol = async (CIMSymbol, mapView, ColorUtils) => {
    const backgroundThemeColor = await ColorUtils.getBackgroundColorTheme(mapView);
    return new CIMSymbol({
        data: {
            type: "CIMSymbolReference",
            symbol: {
                type: "CIMPointSymbol",
                symbolLayers: [
                    {
                        type: "CIMVectorMarker",
                        enable: true,
                        colorLocked: true,
                        anchorPoint: { x: 0, y: -1.75 },
                        anchorPointUnits: "Relative",
                        size: 5.7,
                        frame: { xmin: 0, ymin: 0, xmax: 84.3, ymax: 84.3 },
                        markerGraphics: [
                            {
                                type: "CIMMarkerGraphic",
                                geometry: {
                                    rings: [
                                        [
                                            [83.2, 32.5],
                                            [84.3, 40.7],
                                            [83.8, 48.9],
                                            [81.7, 56.9],
                                            [78.1, 64.3],
                                            [73, 70.9],
                                            [66.9, 76.4],
                                            [59.7, 80.5],
                                            [51.9, 83.2],
                                            [43.7, 84.3],
                                            [35.4, 83.8],
                                            [27.4, 81.7],
                                            [20, 78],
                                            [13.4, 73],
                                            [7.9, 66.8],
                                            [3.8, 59.7],
                                            [1.1, 51.9],
                                            [0, 43.7],
                                            [0.5, 35.4],
                                            [2.6, 27.4],
                                            [6.3, 20],
                                            [11.3, 13.4],
                                            [17.5, 7.9],
                                            [24.7, 3.8],
                                            [32.5, 1.1],
                                            [39.8, 0.1],
                                            [47.1, 0.3],
                                            [54.3, 1.8],
                                            [61.1, 4.5],
                                            [67.4, 8.4],
                                            [72.9, 13.3],
                                            [77.4, 19.1],
                                            [80.9, 25.5],
                                            [83.2, 32.5]
                                        ]
                                    ]
                                },
                                symbol: {
                                    type: "CIMPolygonSymbol",
                                    symbolLayers: [
                                        {
                                            type: "CIMSolidFill",
                                            enable: true,
                                            color: backgroundThemeColor === "light" ? [242, 242, 242, 255] : [255, 255, 255, 255]
                                        }
                                    ]
                                }
                            }
                        ],
                        scaleSymbolsProportionally: true,
                        respectFrame: true,
                        rotation: 0
                    },
                    {
                        type: "CIMVectorMarker",
                        enable: true,
                        anchorPoint: { x: 0, y: -0.5 },
                        anchorPointUnits: "Relative",
                        size: 15,
                        frame: { xmin: 0, ymin: 0, xmax: 197.7, ymax: 294.7 },
                        markerGraphics: [
                            {
                                type: "CIMMarkerGraphic",
                                geometry: {
                                    rings: [
                                        [
                                            [98.9, 0],
                                            [119.4, 23.2],
                                            [139.4, 49.3],
                                            [156.8, 75.2],
                                            [171.2, 100.8],
                                            [182.4, 125.3],
                                            [190.6, 148.8],
                                            [195.7, 171.4],
                                            [197.7, 192.9],
                                            [197.7, 195.8],
                                            [197.7, 200.3],
                                            [197.6, 202.5],
                                            [197.5, 204.8],
                                            [197.3, 207.1],
                                            [197, 209.4],
                                            [196.7, 211.7],
                                            [196.4, 214.1],
                                            [196, 216.4],
                                            [195.5, 218.7],
                                            [195, 221.1],
                                            [194.4, 223.4],
                                            [193.7, 225.8],
                                            [193, 228.1],
                                            [192.2, 230.5],
                                            [191.4, 232.8],
                                            [190.5, 235.1],
                                            [189.5, 237.5],
                                            [188.5, 239.7],
                                            [187.4, 242],
                                            [186.2, 244.3],
                                            [185, 246.5],
                                            [183.7, 248.7],
                                            [182.4, 250.9],
                                            [181, 253.1],
                                            [179.5, 255.2],
                                            [178, 257.3],
                                            [176.4, 259.4],
                                            [174.7, 261.4],
                                            [173.1, 263.3],
                                            [171.3, 265.3],
                                            [169.5, 267.2],
                                            [167.7, 269],
                                            [165.8, 270.8],
                                            [163.9, 272.5],
                                            [161.9, 274.2],
                                            [159.9, 275.8],
                                            [157.8, 277.4],
                                            [155.7, 278.9],
                                            [153.6, 280.4],
                                            [151.4, 281.7],
                                            [149.2, 283.1],
                                            [147, 284.4],
                                            [144.8, 285.6],
                                            [142.5, 286.7],
                                            [140.3, 287.8],
                                            [138, 288.8],
                                            [135.7, 289.8],
                                            [133.4, 290.7],
                                            [131, 291.5],
                                            [128.7, 292.3],
                                            [126.4, 293],
                                            [124, 293.6],
                                            [121.7, 294.2],
                                            [119.4, 294.7],
                                            [117, 295.2],
                                            [114.7, 295.6],
                                            [112.4, 296],
                                            [110.1, 296.3],
                                            [107.8, 296.5],
                                            [105.5, 296.7],
                                            [103.3, 296.8],
                                            [101.1, 296.9],
                                            [98.8, 296.9],
                                            [83.1, 295.7],
                                            [67.8, 292],
                                            [53.3, 285.9],
                                            [39.9, 277.5],
                                            [28.1, 267.2],
                                            [18, 255.1],
                                            [10, 241.5],
                                            [4.2, 226.9],
                                            [0.9, 211.5],
                                            [0, 195.8],
                                            [0.1, 192.9],
                                            [2.1, 171.4],
                                            [7.2, 148.8],
                                            [15.4, 125.3],
                                            [26.6, 100.8],
                                            [41, 75.2],
                                            [58.4, 49.3],
                                            [78.4, 23.2],
                                            [98.9, 0]
                                        ]
                                    ]
                                },
                                symbol: {
                                    type: "CIMPolygonSymbol",
                                    symbolLayers: [
                                        {
                                            type: "CIMSolidFill",
                                            enable: true,
                                            color: backgroundThemeColor === "light" ? [17, 26, 40, 255] : [186, 186, 186, 255]
                                        }
                                    ]
                                }
                            }
                        ],
                        scaleSymbolsProportionally: true,
                        respectFrame: true,
                        rotation: 0
                    }
                ],
                scaleX: 1,
                angleAlignment: "Display",
                angle: 0
            }
        }
    });
};
// https://devtopia.esri.com/WebGIS/arcgis-components/blob/master/src/smartMapping/_utils/symbol.ts
function getCimOutline(sym) {
    if (!isMVCompatibleCIM(sym)) {
        return;
    }
    const symbolLayers = sym.data.symbol.symbolLayers;
    const bgSymbolLayer = symbolLayers[symbolLayers.length - 1];
    const graphic = bgSymbolLayer.markerGraphics[0];
    return graphic.symbol.symbolLayers.find((symbolLayer) => symbolLayer.type === "CIMSolidStroke");
}
function getSymbolSize(symbol) {
    if (symbol.type === "cim") {
        return _symbolUtils_f207d979_js__WEBPACK_IMPORTED_MODULE_6__.e.cimSymbolUtils.getCIMSymbolSize(symbol);
    }
    else if (symbol.type === "text") {
        return symbol.font.size;
    }
    else if ((0,_functional_44de8fcf_js__WEBPACK_IMPORTED_MODULE_5__.i)(symbol.size)) {
        return symbol.size;
    }
    return symbol.width;
}
function applySymbolSize(symbol, size) {
    if (symbol.type === "cim") {
        _symbolUtils_f207d979_js__WEBPACK_IMPORTED_MODULE_6__.e.cimSymbolUtils.scaleCIMSymbolTo(symbol, size);
    }
    else if ((0,_functional_44de8fcf_js__WEBPACK_IMPORTED_MODULE_5__.i)(symbol.size)) {
        symbol.size = size;
    }
    else {
        const ratio = symbol.height / symbol.width;
        symbol.width = size;
        symbol.height = symbol.width * ratio;
    }
}
function getSymbolRotation(symbol) {
    if (symbol.type === "cim") {
        return _symbolUtils_f207d979_js__WEBPACK_IMPORTED_MODULE_6__.e.cimSymbolUtils.getCIMSymbolRotation(symbol, true);
    }
    else if (["simple-marker", "picture-marker"].indexOf(symbol.type) > -1) {
        return symbol.angle;
    }
    return;
}
function applySymbolRotation(symbol, angle) {
    if (!(0,_functional_44de8fcf_js__WEBPACK_IMPORTED_MODULE_5__.i)(angle)) {
        return;
    }
    if (symbol.type === "cim") {
        _symbolUtils_f207d979_js__WEBPACK_IMPORTED_MODULE_6__.e.cimSymbolUtils.applyCIMSymbolRotation(symbol, angle, true);
    }
    else if (["simple-marker", "picture-marker"].indexOf(symbol.type) > -1) {
        symbol.angle = angle;
    }
}
function getSymbolColor(symbol) {
    var _a, _b;
    return (symbol === null || symbol === void 0 ? void 0 : symbol.type) === "cim"
        ? _symbolUtils_f207d979_js__WEBPACK_IMPORTED_MODULE_6__.e.Color.fromJSON((_a = _symbolUtils_f207d979_js__WEBPACK_IMPORTED_MODULE_6__.e.cimSymbolUtils.getCIMSymbolColor(symbol)) === null || _a === void 0 ? void 0 : _a.toJSON())
        : (symbol === null || symbol === void 0 ? void 0 : symbol.type) === "simple-marker" && ["x", "cross"].indexOf(symbol === null || symbol === void 0 ? void 0 : symbol.style) > -1
            ? (_b = symbol === null || symbol === void 0 ? void 0 : symbol.outline) === null || _b === void 0 ? void 0 : _b.color
            : symbol === null || symbol === void 0 ? void 0 : symbol.color;
}
function applySymbolColor(symbol, color) {
    if (symbol.type === "picture-marker") {
        return;
    }
    if (symbol.type === "cim") {
        _symbolUtils_f207d979_js__WEBPACK_IMPORTED_MODULE_6__.e.cimSymbolUtils.applyCIMSymbolColor(symbol, color);
    }
    else if (symbol.type === "simple-marker" && symbol.style && ["cross", "x"].indexOf(symbol.style) > -1) {
        if (!symbol.outline) {
            symbol.outline = new __esri.SimpleLineSymbol();
        }
        symbol.outline.color = color;
    }
    else {
        symbol.color = color;
    }
}
function getSymbolOutline(symbol) {
    return (symbol === null || symbol === void 0 ? void 0 : symbol.type) === "cim" ? getCimLine(symbol) : symbol === null || symbol === void 0 ? void 0 : symbol.outline;
}
function applySymbolOutline(symbol, outline) {
    if (symbol.type === "cim") {
        symbol.data.symbol.symbolLayers.forEach((symbolLayer, idx) => {
            if (symbolLayer.type === "CIMSolidStroke") {
                symbol.data.symbol.symbolLayers[idx] = outline;
            }
        });
    }
    else {
        symbol.outline = outline;
    }
}
function isMVCompatibleCIM(sym) {
    var _a, _b, _c, _d, _e, _f;
    // -	Have one symbolLayer with a stroke and a fill (CIMVectorMarker) that is not colorLocked
    // -	Have two symbolLayers with a stroke and a fill (CIMVectorMarker)
    //    The smaller (first) symbolLayer is not colorLocked
    //    The second symbolLayer must have a greater size than the first
    const symbolLayers = sym.data.symbol.symbolLayers;
    if (symbolLayers.length === 1) {
        const symbolLayer = symbolLayers[0];
        if (symbolLayer.type !== "CIMVectorMarker" || symbolLayer.colorLocked) {
            return false;
        }
        const markerGraphicLayers = (_b = (_a = symbolLayer.markerGraphics[0]) === null || _a === void 0 ? void 0 : _a.symbol) === null || _b === void 0 ? void 0 : _b.symbolLayers;
        return symbolLayer.markerGraphics.length === 1 && hasUnlockedFillAndStroke(markerGraphicLayers);
    }
    else if (symbolLayers.length === 2) {
        const symbolLayer1 = symbolLayers[0];
        const symbolLayer2 = symbolLayers[1];
        if (symbolLayer1.type !== "CIMVectorMarker" ||
            symbolLayer2.type !== "CIMVectorMarker" ||
            symbolLayer1.colorLocked ||
            symbolLayer1.size > symbolLayer2.size) {
            return false;
        }
        const markerGraphicLayers1 = (_d = (_c = symbolLayer1.markerGraphics[0]) === null || _c === void 0 ? void 0 : _c.symbol) === null || _d === void 0 ? void 0 : _d.symbolLayers;
        const markerGraphicLayers2 = (_f = (_e = symbolLayer2.markerGraphics[0]) === null || _e === void 0 ? void 0 : _e.symbol) === null || _f === void 0 ? void 0 : _f.symbolLayers;
        return (symbolLayer1.markerGraphics.length === 1 &&
            symbolLayer2.markerGraphics.length === 1 &&
            hasUnlockedFillAndStroke(markerGraphicLayers1) &&
            hasFillAndStroke(markerGraphicLayers2));
    }
    return false;
}
function hasUnlockedFillAndStroke(symbolLayers) {
    return hasUnlockedFill(symbolLayers) && hasStroke(symbolLayers);
}
function hasFillAndStroke(symbolLayers) {
    return hasFill(symbolLayers) && hasStroke(symbolLayers);
}
function hasFill(symbolLayers) {
    return symbolLayers === null || symbolLayers === void 0 ? void 0 : symbolLayers.find((symbolLayer) => symbolLayer.type === "CIMSolidFill");
}
function hasUnlockedFill(symbolLayers) {
    return symbolLayers === null || symbolLayers === void 0 ? void 0 : symbolLayers.find((symbolLayer) => symbolLayer.type === "CIMSolidFill" && !symbolLayer.colorLocked);
}
function hasStroke(symbolLayers) {
    return symbolLayers === null || symbolLayers === void 0 ? void 0 : symbolLayers.find((symbolLayer) => symbolLayer.type === "CIMSolidStroke");
}
function getCimLine(symbol) {
    var _a, _b, _c;
    if (symbol.type === "picture-marker") {
        return;
    }
    if (((_a = symbol.data.symbol) === null || _a === void 0 ? void 0 : _a.type) === "CIMPointSymbol") {
        return undefined;
    }
    else if (((_b = symbol.data.symbol) === null || _b === void 0 ? void 0 : _b.type) === "CIMLineSymbol") {
        return getCimLineLine(symbol);
    }
    else if (((_c = symbol.data.symbol) === null || _c === void 0 ? void 0 : _c.type) === "CIMPolygonSymbol") {
        return getCimPolygonOutline(symbol);
    }
}
function getCimLineLine(symbol) {
    const symbolLayers = symbol.data.symbol.symbolLayers;
    return symbolLayers[0];
}
function getCimPolygonOutline(symbol) {
    // Assume the top stroke layer on polygons is an outline
    const symbolLayers = symbol.data.symbol.symbolLayers;
    return symbolLayers.find((symbolLayer) => symbolLayer.type === "CIMSolidStroke");
}

const saveSketchTooltipToStorage = (tooltipOptions, currentTooltipSessionStorageId) => {
    const tooltipObject = {
        enabled: tooltipOptions.enabled
    };
    (0,_storage_0353a769_js__WEBPACK_IMPORTED_MODULE_4__.a)(currentTooltipSessionStorageId, tooltipObject, true);
};
const getSketchTooltipOptions = (sketchTooltipSessionStorageIds, SketchTooltipOptions) => {
    const sketchToolip = getSketchTooltipFromStorage(sketchTooltipSessionStorageIds) || {
        enabled: false
    };
    return new SketchTooltipOptions({
        enabled: sketchToolip.enabled
    });
};
const getSketchTooltipFromStorage = (sketchTooltipSessionStorageIds) => {
    if (sketchTooltipSessionStorageIds) {
        return ((0,_storage_0353a769_js__WEBPACK_IMPORTED_MODULE_4__.b)(sketchTooltipSessionStorageIds.webmap, true) ||
            (0,_storage_0353a769_js__WEBPACK_IMPORTED_MODULE_4__.b)(sketchTooltipSessionStorageIds.current, true) ||
            null);
    }
    return null;
};

const sketchStore = (0,_index_05956cab_js__WEBPACK_IMPORTED_MODULE_7__.c)({
    mapView: null,
    portal: null,
    layer: null,
    strings: null,
    currentLanguage: "",
    sketchMessage: "",
    svModel: null,
    snappingOptions: null,
    sketchTooltipOptions: null,
    snappingSessionStorageIds: null,
    sketchTooltipSessionStorageIds: null
});
const sketchState = sketchStore.state;

const arcgisSketchCss = ":host{display:flex;flex:1 1 auto;overflow:hidden}.sketch-delete-button{padding:var(--arcgis-app-cap-spacing-third)}.snapping{display:flex;padding:var(--arcgis-app-cap-spacing-half);background-color:var(--arcgis-app-background)}.sketch-message{padding:var(--arcgis-app-cap-spacing-half)}.sketch-keyboard-button{margin-right:0.3em}.multiple-selection{margin:1.3em}.multiple-selection calcite-button{margin-top:0.3em}.arcgis--rtl .sketch-keyboard-button{margin-right:unset;margin-left:0.3em}";

const ArcgisSketch = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.sketchUpdated = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "sketchUpdated", 7);
        this.arcgisSketchDismissedChange = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSketchDismissedChange", 7);
        this.arcgisSketchAddToNewSketch = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSketchAddToNewSketch", 7);
        this.arcgisRecentColorsUpdate = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisRecentColorsUpdate", 7);
        this.internalSketchUpdated = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "internalSketchUpdated", 7);
        this.closeSketchPopovers = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "closeSketchPopovers", 7);
        this.closePopupPopovers = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "closePopupPopovers", 7);
        this.sketchContentReRender = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "sketchContentReRender", 7);
        this.disableSketchPanel = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "disableSketchPanel", 7);
        this.closeSketchSnappingPopovers = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "closeSketchSnappingPopovers", 7);
        this.sketchActionOnSelectFeatures = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "sketchActionOnSelectFeatures", 7);
        this.sketchMode = "update";
        this.escKey = false;
        this.keepSelectionMessage = "";
        this.keepSelectionTool = null;
        this.deleteInProgress = false;
        this.needsMapViewHandles = false;
        this.onGraphicUpdate = (event) => {
            var _a, _b;
            if (event.state === "start") {
                this.mapView.closePopup();
                if (this.multipleSelectedGraphics.length <= 1 &&
                    this.newSketchLayerFeatures.length <= 1 &&
                    event.graphics.length === 1) {
                    this.currentSketchInfo.graphics = [event.graphics[0]];
                    this.currentSketchInfo.symbol = this.currentSketchInfo.graphics[0]
                        .symbol;
                    // if multipleSelectedGraphics is 0, coming from single select
                    !this.multipleSelectedGraphics.length &&
                        this.multipleSelectedGraphics.push(this.currentSketchInfo.graphics[0]);
                    this.currentSketchInfo.tool = getGeometryTypeFromGraphic(this.currentSketchInfo.graphics[0]);
                    this.currentSketchInfo.popup = this.currentSketchInfo.graphics[0].popupTemplate;
                    this.currentSketchInfo.title =
                        ((_a = this.currentSketchInfo.graphics[0].attributes) === null || _a === void 0 ? void 0 : _a.title) || this.defaultGraphicTitle();
                    this.sketchContentReRender.emit();
                    this.showSketchContent = true;
                }
                else if (this.multipleSelectedGraphics.length || this.newSketchLayerFeatures.length) {
                    // bulk popup actions
                    this.currentSketchInfo.graphics = this.multipleSelectedGraphics.length
                        ? this.multipleSelectedGraphics
                        : this.newSketchLayerFeatures;
                    this.currentSketchInfo.symbol = this.currentSketchInfo.graphics[0]
                        .symbol;
                    this.currentSketchInfo.tool = getGeometryTypeFromGraphic(this.currentSketchInfo.graphics[0]);
                    const firstTitle = ((_b = this.currentSketchInfo.graphics[0].attributes) === null || _b === void 0 ? void 0 : _b.title) || this.defaultGraphicTitle();
                    const identicalTitles = this.currentSketchInfo.graphics.every((graphic) => { var _a; return ((_a = graphic.attributes) === null || _a === void 0 ? void 0 : _a.title) === firstTitle; });
                    const firstPopup = this.currentSketchInfo.graphics[0].popupTemplate;
                    const identicalPopups = this.currentSketchInfo.graphics.every((graphic) => JSON.stringify(graphic.popupTemplate) === JSON.stringify(firstPopup));
                    // editing bulk items should start with an empty popup and title, unless all titles/popups align
                    this.currentSketchInfo.title = identicalTitles ? firstTitle : null;
                    this.currentSketchInfo.popup = identicalPopups ? firstPopup : null;
                    this.sketchContentReRender.emit();
                    this.showSketchContent = true;
                }
                else {
                    this.sketchMessageHandler(null);
                }
            }
            if (event.state === "complete") {
                const { keepSelectionTool } = this;
                if (!keepSelectionTool) {
                    this.currentSketchInfo.graphics = null;
                    this.multipleSelectedGraphics = [];
                    this.closeSketchPopovers.emit();
                    this.internalSketchUpdated.emit();
                    this.sketchContentReRender.emit();
                }
                else {
                    !this.deleteInProgress && this.keepSelectToolSelection();
                }
            }
        };
        this.mapView = undefined;
        this.layer = undefined;
        this.portal = undefined;
        this.dismissible = false;
        this.snappingSessionStorageIds = undefined;
        this.sketchTooltipSessionStorageIds = undefined;
        this.activeSketchTool = undefined;
        this.sketchToolsToHide = [];
        this.hideSelectionTools = false;
        this.selectedSketchFeaturesFeatures = undefined;
        this.mapNotesFeature = null;
        this.showSketchToolsOnly = false;
        this.sketchToolsReferenceElement = undefined;
        this.currentSketchInfo = {
            tool: null,
            symbol: null,
            graphics: null,
            popup: null,
            title: null,
            sourceIds: {}
        };
        this.multipleSelectedGraphics = [];
        this.newSketchLayerFeatures = [];
        this.showSketchContent = true;
    }
    // Lifecycle Methods
    async componentWillLoad() {
        var _a;
        [this.strings, this.currentLanguage] = await (0,_locale_050b6db9_js__WEBPACK_IMPORTED_MODULE_1__.g)(this.hostElement);
        await this.loadAllModules();
        this.initializeSessionStorageOptions();
        this.initializeSVModel();
        sketchState.svModel = this.svModel;
        sketchState.mapView = this.mapView;
        sketchState.layer = this.layer;
        sketchState.portal = this.portal;
        sketchState.strings = this.strings;
        sketchState.currentLanguage = this.currentLanguage;
        sketchState.snappingOptions = this.snappingOptions;
        sketchState.sketchTooltipOptions = this.sketchTooltipOptions;
        sketchState.snappingSessionStorageIds = this.snappingSessionStorageIds;
        sketchState.sketchTooltipSessionStorageIds = this.sketchTooltipSessionStorageIds;
        if (this.mapNotesFeature) {
            this.selectedSketchFeaturesFeatures = [this.mapNotesFeature];
        }
        if ((_a = this.selectedSketchFeaturesFeatures) === null || _a === void 0 ? void 0 : _a.length) {
            this.multipleSelectedGraphics = this.selectedSketchFeaturesFeatures.filter((graphic) => (0,_functional_44de8fcf_js__WEBPACK_IMPORTED_MODULE_5__.i)(graphic));
            this.currentSketchInfo.graphics = this.multipleSelectedGraphics;
            this.updateCurrentSketchInfo();
        }
    }
    componentDidLoad() {
        if (this.needsMapViewHandles) {
            this.mapView.focus();
            this.watchDeleteOnMapView(true);
            this.watchEscapeOnMapView(true);
        }
        // disable popup in the map view
        this.mapView.popupEnabled = false;
        // sketch tools
        this.createSketchTools();
    }
    disconnectedCallback() {
        var _a;
        this.watchEscapeOnMapView(false);
        this.watchDeleteOnMapView(false);
        this.svModel.updateOnGraphic(false);
        this.removeSketchShortcuts();
        (_a = this.selectorOperation) === null || _a === void 0 ? void 0 : _a.cancel();
    }
    // Events
    arcgisSketchActiveSymbolChangeHandler() {
        this.sketchContentReRender.emit();
    }
    closeSketchPopoversHandler() {
        this.closePopupPopovers.emit();
        this.sketchMessageHandler(null);
        this.showSketchContent = false;
        this.closeSketchSnappingPopovers.emit();
        this.removeSketchShortcuts();
        this.setFocus();
    }
    closeSketchSnappingPopoversHandler() {
        if (this.sketchSnappingEl) {
            document.body.removeChild(this.sketchSnappingEl);
            this.sketchSnappingEl = null;
            this.disableSketchPanel.emit(false);
        }
        this.setFocus();
    }
    disableSketchPanelHandler(event) {
        event.stopPropagation();
        this.sketchFlowItemEl.disabled = event.detail;
    }
    internalSketchUpdatedHandler(event) {
        event.stopPropagation();
        this.sketchUpdated.emit();
    }
    sketchGraphicUpdatesHandler(event) {
        var _a, _b, _c, _d, _e;
        event.stopPropagation();
        const graphicUpdates = event.detail;
        if (graphicUpdates.update) {
            // update recent colors for CIM symbols
            if (graphicUpdates.type === "symbol" && graphicUpdates.symbolSwitchFromRecent) {
                const newColor = (_a = getSymbolColor(this.currentSketchInfo.symbol.clone())) === null || _a === void 0 ? void 0 : _a.toHex();
                if (newColor) {
                    this.arcgisRecentColorsUpdate.emit(newColor);
                }
            }
            if (this.sketchMode === "update" && ((_b = this.currentSketchInfo.graphics) === null || _b === void 0 ? void 0 : _b.length)) {
                const isBulk = this.currentSketchInfo.graphics.length > 1;
                // get basis for comparison: original symbol is the first selected symbol pre-modification
                const originalSymbol = this.currentSketchInfo.graphics[0].symbol.clone();
                const newSymbol = this.currentSketchInfo.symbol.clone();
                const originalSymbolSize = getSymbolSize(originalSymbol);
                const originalSymbolRotation = getSymbolRotation(originalSymbol);
                const originalSymbolColor = getSymbolColor(originalSymbol);
                const originalSymbolOutline = getSymbolOutline(originalSymbol);
                const originalSymbolOutlineStyle = (_c = originalSymbol.outline) === null || _c === void 0 ? void 0 : _c.style;
                const originalSymbolStrokeStyle = originalSymbol.style;
                const newSymbolSize = getSymbolSize(newSymbol);
                const newSymbolRotation = getSymbolRotation(newSymbol);
                const newSymbolColor = getSymbolColor(newSymbol);
                const newSymbolOutline = getSymbolOutline(newSymbol);
                const newSymbolOutlineStyle = (_d = newSymbol.outline) === null || _d === void 0 ? void 0 : _d.style;
                const newSymbolStrokeStyle = newSymbol.style;
                this.currentSketchInfo.graphics.forEach((graphic, idx) => {
                    if (graphicUpdates.type === "title") {
                        if (graphic.attributes) {
                            this.currentSketchInfo.graphics[idx].attributes.title = this.currentSketchInfo.title;
                        }
                        else {
                            this.currentSketchInfo.graphics[idx].attributes = {
                                title: this.currentSketchInfo.title
                            };
                        }
                    }
                    if (graphicUpdates.type === "popup") {
                        this.currentSketchInfo.graphics[idx].popupTemplate = this.currentSketchInfo.popup;
                    }
                    if (graphicUpdates.type === "symbol") {
                        if (!isBulk || graphicUpdates.symbolSwitchFromRecent) {
                            this.currentSketchInfo.graphics[idx].symbol = this.currentSketchInfo.symbol.clone();
                        }
                        else if (graphicUpdates.symbolSwitch) {
                            // if we trigger a symbol change, we want to apply some of the old symbol's attributes to the new symbol
                            const newSymbol = this.currentSketchInfo.symbol.clone();
                            const currentSymbol = this.currentSketchInfo.graphics[idx].symbol.clone();
                            if ((0,_functional_44de8fcf_js__WEBPACK_IMPORTED_MODULE_5__.i)(getSymbolSize(currentSymbol)) && (0,_functional_44de8fcf_js__WEBPACK_IMPORTED_MODULE_5__.i)(getSymbolSize(newSymbol))) {
                                applySymbolSize(newSymbol, getSymbolSize(currentSymbol));
                            }
                            if ((0,_functional_44de8fcf_js__WEBPACK_IMPORTED_MODULE_5__.i)(getSymbolRotation(currentSymbol)) &&
                                (0,_functional_44de8fcf_js__WEBPACK_IMPORTED_MODULE_5__.i)(getSymbolRotation(newSymbol))) {
                                applySymbolRotation(newSymbol, getSymbolRotation(currentSymbol));
                            }
                            if ((0,_functional_44de8fcf_js__WEBPACK_IMPORTED_MODULE_5__.i)(getSymbolColor(currentSymbol)) &&
                                (0,_functional_44de8fcf_js__WEBPACK_IMPORTED_MODULE_5__.i)(getSymbolColor(newSymbol))) {
                                applySymbolColor(newSymbol, getSymbolColor(currentSymbol));
                            }
                            this.currentSketchInfo.graphics[idx].symbol = newSymbol;
                        }
                        else {
                            // if we did not trigger a symbol change, we want to apply some of the new symbol's attributes to the old symbol
                            const currentSymbol = this.currentSketchInfo.graphics[idx].symbol.clone();
                            const newSymbol = this.currentSketchInfo.symbol.clone();
                            if (originalSymbolSize !== newSymbolSize) {
                                applySymbolSize(currentSymbol, getSymbolSize(newSymbol));
                            }
                            if (originalSymbolRotation !== newSymbolRotation) {
                                applySymbolRotation(currentSymbol, getSymbolRotation(newSymbol));
                            }
                            if (JSON.stringify(originalSymbolColor === null || originalSymbolColor === void 0 ? void 0 : originalSymbolColor.toJSON()) !==
                                JSON.stringify(newSymbolColor === null || newSymbolColor === void 0 ? void 0 : newSymbolColor.toJSON())) {
                                const currentColor = getSymbolColor(currentSymbol);
                                const updatedColor = getSymbolColor(newSymbol);
                                const isSameColorTransparency = originalSymbolColor.a === newSymbolColor.a;
                                if (isSameColorTransparency) {
                                    currentColor.r = updatedColor.r;
                                    currentColor.g = updatedColor.g;
                                    currentColor.b = updatedColor.b;
                                }
                                else {
                                    currentColor.a = updatedColor.a;
                                }
                                applySymbolColor(currentSymbol, currentColor);
                            }
                            if (JSON.stringify(originalSymbolOutline === null || originalSymbolOutline === void 0 ? void 0 : originalSymbolOutline.toJSON()) !==
                                JSON.stringify(newSymbolOutline === null || newSymbolOutline === void 0 ? void 0 : newSymbolOutline.toJSON())) {
                                const currentOutline = getSymbolOutline(currentSymbol);
                                const updatedOutline = getSymbolOutline(newSymbol);
                                const isSameOutlineTransparency = (originalSymbolOutline === null || originalSymbolOutline === void 0 ? void 0 : originalSymbolOutline.color.a) === (newSymbolOutline === null || newSymbolOutline === void 0 ? void 0 : newSymbolOutline.color.a);
                                const isSameOutlineWidth = (originalSymbolOutline === null || originalSymbolOutline === void 0 ? void 0 : originalSymbolOutline.width) === (newSymbolOutline === null || newSymbolOutline === void 0 ? void 0 : newSymbolOutline.width);
                                if (!isSameOutlineWidth) {
                                    currentOutline.width = updatedOutline.width;
                                }
                                else {
                                    if (isSameOutlineTransparency) {
                                        currentOutline.color.r = updatedOutline.color.r;
                                        currentOutline.color.g = updatedOutline.color.g;
                                        currentOutline.color.b = updatedOutline.color.b;
                                    }
                                    else {
                                        currentOutline.color.a = updatedOutline.color.a;
                                    }
                                }
                                applySymbolOutline(currentSymbol, currentOutline);
                            }
                            if (JSON.stringify(originalSymbolOutlineStyle) !== JSON.stringify(newSymbolOutlineStyle)) {
                                if (currentSymbol.outline) {
                                    currentSymbol.outline.style = newSymbolOutlineStyle;
                                }
                            }
                            if (JSON.stringify(originalSymbolStrokeStyle) !== JSON.stringify(newSymbolStrokeStyle)) {
                                currentSymbol.style = newSymbolStrokeStyle;
                            }
                            // text
                            if (graphicUpdates.textProp) {
                                switch (graphicUpdates.textProp) {
                                    case "text":
                                        currentSymbol.text = newSymbol.text;
                                        break;
                                    case "font":
                                        currentSymbol.font.family = newSymbol.font.family;
                                        currentSymbol.font.weight = newSymbol.font.weight;
                                        currentSymbol.font.style = newSymbol.font.style;
                                        break;
                                    case "font-size":
                                        currentSymbol.font.size = newSymbol.font.size;
                                        break;
                                    case "color":
                                        currentSymbol.color = newSymbol.color;
                                        break;
                                    case "rotation":
                                        currentSymbol.angle = newSymbol.angle;
                                        break;
                                    case "halo":
                                        currentSymbol.haloColor = newSymbol.haloColor;
                                        currentSymbol.haloSize = newSymbol.haloSize;
                                        break;
                                    case "halo-color":
                                        currentSymbol.haloColor = newSymbol.haloColor;
                                        break;
                                    case "halo-size":
                                        currentSymbol.haloSize = newSymbol.haloSize;
                                        break;
                                }
                            }
                            this.currentSketchInfo.graphics[idx].symbol = currentSymbol;
                        }
                    }
                });
            }
            else {
                if (this.tempCreatedGraphic) {
                    if (this.tempCreatedGraphic.attributes) {
                        this.tempCreatedGraphic.attributes.title = this.currentSketchInfo.title;
                    }
                    else {
                        this.tempCreatedGraphic.attributes = {
                            title: this.currentSketchInfo.title
                        };
                    }
                    this.tempCreatedGraphic.popupTemplate = this.currentSketchInfo.popup;
                    this.tempCreatedGraphic.symbol = this.currentSketchInfo.symbol;
                }
                if (this.currentSketchInfo.tool === "point") {
                    this.svModel.setPoint(this.currentSketchInfo.symbol);
                }
                else if (this.currentSketchInfo.tool === "text") {
                    this.svModel.setText(this.currentSketchInfo.symbol);
                }
                else if (this.currentSketchInfo.tool === "polyline") {
                    this.svModel.setLine(this.currentSketchInfo.symbol);
                }
                else if (["circle", "polygon", "rectangle"].indexOf(this.currentSketchInfo.tool) > -1) {
                    this.svModel.setPolygon(this.currentSketchInfo.symbol);
                }
            }
            // to refresh popup
            this.mapView.popup.features = [(_e = this.currentSketchInfo.graphics) === null || _e === void 0 ? void 0 : _e[0]];
        }
        if (graphicUpdates.close) {
            this.clearHighlightAndPopup();
            this.closeSketchPopovers.emit();
            this.svModel.cancel();
            this.svModel.updateOnGraphic(false);
            this.setFocus();
        }
        this.internalSketchUpdated.emit();
    }
    async sketchActionOnDrawFeaturesHandler({ detail: { tool, sketchMessage } }) {
        this.clearHighlightAndPopup();
        this.watchEscapeOnMapView(true);
        this.watchDeleteOnMapView(false);
        // close popover to reset when moving from update to continuous mode
        if (this.sketchMode === "update") {
            this.closeSketchPopovers.emit();
        }
        this.sketchMessageHandler(sketchMessage);
        this.sketchMode = "continuous";
        this.svModel.cancel();
        this.svModel.updateOnGraphic(false);
        this.tempCreatedGraphic = null;
        this.currentSketchInfo.graphics = null;
        this.currentSketchInfo.tool = tool;
        switch (tool) {
            case "point":
                this.svModel.setPoint((await defaultCimSymbol(this.CIMSymbol, this.mapView, this.ColorUtils)));
                this.currentSketchInfo.symbol = this.svModel.getPoint();
                this.svModel.createPoint();
                break;
            case "polyline":
                this.svModel.setLine(await defaultLineSymbol(this.mapView, this.ColorUtils));
                this.currentSketchInfo.symbol = this.svModel.getLine();
                this.svModel.createLine();
                break;
            case "polygon":
            case "rectangle":
            case "circle":
                this.svModel.setPolygon(await defaultPolygonSymbol(this.mapView, this.ColorUtils));
                this.currentSketchInfo.symbol = this.svModel.getPolygon();
                this.svModel.createPolygon(tool);
                break;
            case "text":
                this.svModel.setText((await defaultTextSymbol(this.mapView, this.ColorUtils, this.TextSymbol, this.strings.text)));
                this.currentSketchInfo.symbol = this.svModel.getText();
                this.svModel.createText();
                break;
        }
        this.currentSketchInfo.popup = null;
        this.currentSketchInfo.title = this.defaultGraphicTitle();
        this.sketchContentReRender.emit(tool);
        this.showSketchContent = true;
    }
    async sketchActionOnSelectFeaturesHandler({ detail: { sketchMessage, multipleSelectTool } }) {
        var _a;
        this.keepSelectionMessage = sketchMessage;
        this.keepSelectionTool = multipleSelectTool;
        this.clearHighlightAndPopup();
        this.watchEscapeOnMapView(false);
        this.watchDeleteOnMapView(false);
        this.closeSketchPopovers.emit();
        this.tempCreatedGraphic = null;
        this.currentSketchInfo.graphics = null;
        this.currentSketchInfo.symbol = null;
        this.currentSketchInfo.tool = null;
        this.multipleSelectedGraphics = [];
        this.svModel.cancel();
        this.sketchMode = "update";
        this.sketchMessageHandler(this.keepSelectionMessage);
        this.sketchContentReRender.emit();
        if (this.keepSelectionTool) {
            this.actionOnMultipleSelections(this.keepSelectionTool);
        }
        else {
            (_a = this.selectorOperation) === null || _a === void 0 ? void 0 : _a.cancel();
            this.svModel.updateOnGraphic(true);
        }
    }
    arcgisSketchPanelLoaderHandler(event) {
        event.stopPropagation();
        this.sketchFlowItemEl.loading = event.detail;
    }
    // Public Methods
    async done() {
        var _a, _b, _c;
        this.removeHighlight();
        if ((_a = this.snappingSessionStorageIds) === null || _a === void 0 ? void 0 : _a.current) {
            saveSnappingToStorage(this.snappingOptions, this.snappingSessionStorageIds.current);
        }
        if ((_b = this.sketchTooltipSessionStorageIds) === null || _b === void 0 ? void 0 : _b.current) {
            saveSketchTooltipToStorage(this.sketchTooltipOptions, this.sketchTooltipSessionStorageIds.current);
        }
        this.closeSketchPopovers.emit();
        this.svModel.destroy();
        (_c = this.sketchToolsEl) === null || _c === void 0 ? void 0 : _c.remove();
        this.sketchToolsEl = undefined;
        this.removeSketchShortcuts();
        // enable popup in the map view
        this.mapView.popupEnabled = true;
    }
    async activateLayer(layer, featuresToSelect) {
        var _a, _b;
        (_a = this.svModel) === null || _a === void 0 ? void 0 : _a.destroy();
        this.layer = layer;
        this.initializeSessionStorageOptions();
        this.initializeSVModel();
        if (featuresToSelect) {
            this.newSketchLayerFeatures = featuresToSelect.map((featureToSelect) => featureToSelect.clone());
        }
        if ((_b = this.newSketchLayerFeatures) === null || _b === void 0 ? void 0 : _b.length) {
            let tempPoint = [];
            let tempLine = [];
            let tempPolygon = [];
            let tempText = [];
            this.newSketchLayerFeatures.forEach((currGraphic) => {
                switch (getGeometryTypeFromGraphic(currGraphic)) {
                    case "polyline":
                        currGraphic.layer = this.layer.polylineLayer;
                        tempLine = [...tempLine, currGraphic];
                        break;
                    case "polygon":
                        currGraphic.layer = this.layer.polygonLayer;
                        tempPolygon = [...tempPolygon, currGraphic];
                        break;
                    case "text":
                        currGraphic.layer = this.layer.textLayer;
                        tempText = [...tempText, currGraphic];
                        break;
                    default:
                        currGraphic.layer = this.layer.pointLayer;
                        tempPoint = [...tempPoint, currGraphic];
                        break;
                }
            });
            this.currentSketchInfo.graphics = this.newSketchLayerFeatures;
            this.updateCurrentSketchInfo();
            // Timeout is required to correctly highlight graphics
            setTimeout(() => {
                tempPoint.length && this.svModel.updatePoint(tempPoint);
                tempLine.length && this.svModel.updateLine(tempLine);
                tempPolygon.length && this.svModel.updatePolygon(tempPolygon);
                tempText.length && this.svModel.updateText(tempText);
                this.sketchMode = "update";
            }, 300);
        }
    }
    async setFocus(focusId) {
        var _a;
        if (focusId === "dismiss-button") {
            (_a = this.dismissButtonEl) === null || _a === void 0 ? void 0 : _a.setFocus();
            return;
        }
    }
    async clearHighlights() {
        this.removeHighlight();
    }
    // Private Methods
    initializeSessionStorageOptions() {
        this.snappingOptions = getSnappingOptions(this.snappingSessionStorageIds, this.layer, this.mapView, this.SnappingOptions);
        this.sketchTooltipOptions = getSketchTooltipOptions(this.sketchTooltipSessionStorageIds, this.SketchTooltipOptions);
    }
    initializeSVModel() {
        this.svModel = new SVModel(this.layer, this.mapView, this.SketchViewModel, this.snappingOptions, this.sketchTooltipOptions, (event, sketchViewModel) => this.onGraphicCreate(event, sketchViewModel), this.onGraphicUpdate);
    }
    updateCurrentSketchInfo() {
        var _a;
        this.currentSketchInfo.symbol = this.currentSketchInfo.graphics[0]
            .symbol;
        this.currentSketchInfo.tool = getGeometryTypeFromGraphic(this.currentSketchInfo.graphics[0]);
        const firstTitle = ((_a = this.currentSketchInfo.graphics[0].attributes) === null || _a === void 0 ? void 0 : _a.title) || this.defaultGraphicTitle();
        const identicalTitles = this.currentSketchInfo.graphics.every((graphic) => { var _a; return ((_a = graphic.attributes) === null || _a === void 0 ? void 0 : _a.title) === firstTitle; });
        const firstPopup = this.currentSketchInfo.graphics[0].popupTemplate;
        const identicalPopups = this.currentSketchInfo.graphics.every((graphic) => JSON.stringify(graphic.popupTemplate) === JSON.stringify(firstPopup));
        // editing bulk items should start with an empty popup and title, unless all titles/popups align
        this.currentSketchInfo.title = identicalTitles ? firstTitle : null;
        this.currentSketchInfo.popup = identicalPopups ? firstPopup : null;
        this.showSketchContent = true;
        this.svModel.updateOnGraphic(true, this.onGraphicUpdate);
        this.needsMapViewHandles = true;
    }
    async updateSketchTools() {
        if (this.sketchToolsEl) {
            this.sketchToolsEl.sketchToolsToHide = this.sketchToolsToHide;
            this.sketchToolsEl.hideSelectionTools = this.hideSelectionTools;
            this.sketchToolsEl.activeSketchTool = this.activeSketchTool;
        }
    }
    createSketchTools() {
        var _a;
        this.sketchToolsEl = document.createElement("arcgis-sketch-tools");
        this.sketchToolsEl.sketchToolsToHide = this.sketchToolsToHide;
        this.sketchToolsEl.activeSketchTool = this.activeSketchTool;
        this.sketchToolsEl.hideSelectionTools = this.hideSelectionTools;
        this.sketchToolsEl.refElement = (_a = this.sketchToolsReferenceElement) !== null && _a !== void 0 ? _a : this.hostElement;
        if (this.selectedSketchFeaturesFeatures) {
            this.sketchToolsEl.mapNotesFeatures = this.selectedSketchFeaturesFeatures;
        }
        document.body.appendChild(this.sketchToolsEl);
        if (this.sketchContentEl && !this.sketchContentEl.symbolStylerRefElement) {
            this.sketchContentEl.symbolStylerRefElement = this.dismissButtonEl;
        }
    }
    async loadAllModules() {
        [
            this.SketchViewModel,
            this.TextSymbol,
            this.ColorUtils,
            this.CIMSymbol,
            this.SnappingOptions,
            this.SketchTooltipOptions,
            this.SelectionOperation
        ] = await (0,_loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_3__.l)([
            "esri/widgets/Sketch/SketchViewModel",
            "esri/symbols/TextSymbol",
            "esri/views/support/colorUtils",
            "esri/symbols/CIMSymbol",
            "esri/views/interactive/snapping/SnappingOptions",
            "esri/views/interactive/sketch/SketchTooltipOptions",
            "esri/widgets/support/Selector2D/SelectionOperation"
        ]);
    }
    removeSketchShortcuts() {
        if (this.arcgisSketchShortcuts) {
            this.arcgisSketchShortcuts.removeEventListener("arcgisSketchShortcutsDismissedChange", () => this.removeSketchShortcuts());
            document.body.removeChild(this.arcgisSketchShortcuts);
            this.arcgisSketchShortcuts = null;
        }
    }
    onGraphicCreate(event, sketchViewModel) {
        if (event.state === "start") {
            this.tempCreatedGraphic = null;
            this.removeHighlight();
        }
        if (event.state === "cancel" && this.escKey) {
            this.escKey = false;
            const tool = this.currentSketchInfo.tool === "text" ? "point" : this.currentSketchInfo.tool;
            sketchViewModel.create(tool);
        }
        if (event.state === "complete") {
            this.internalSketchUpdated.emit();
            if (event.graphic) {
                event.graphic.popupTemplate = this.currentSketchInfo.popup;
                event.graphic.attributes = {
                    title: this.currentSketchInfo.title
                };
                this.currentSketchInfo.graphics = [event.graphic];
                this.tempCreatedGraphic = event.graphic;
                this.highlightGraphic(event.graphic);
            }
            const tool = this.currentSketchInfo.tool === "text" ? "point" : this.currentSketchInfo.tool;
            sketchViewModel.create(tool);
        }
    }
    watchEscapeOnMapView(watch) {
        var _a;
        if (watch && !this.watchEscapeHandle) {
            this.watchEscapeHandle = this.mapView.on("key-down", (event) => {
                if (event.key === "Escape" &&
                    (this.svModel.getPointSVM().state === "active" ||
                        this.svModel.getLineSVM().state === "active" ||
                        this.svModel.getPolygonSVM().state === "active" ||
                        this.svModel.getTextSVM().state === "active")) {
                    event.stopPropagation();
                    this.escKey = true;
                    this.svModel.cancel();
                }
            });
        }
        else {
            (_a = this.watchEscapeHandle) === null || _a === void 0 ? void 0 : _a.remove();
            this.watchEscapeHandle = undefined;
        }
    }
    watchDeleteOnMapView(watch) {
        var _a;
        if (watch && !this.watchDeleteHandle) {
            this.watchDeleteHandle = this.mapView.on("key-down", (event) => {
                if (event.key === "Delete" || event.key === "Backspace") {
                    this.deleteInProgress = true;
                    this.svModel.delete();
                    this.deleteInProgress = false;
                    this.keepSelectToolSelection();
                }
            });
        }
        else {
            (_a = this.watchDeleteHandle) === null || _a === void 0 ? void 0 : _a.remove();
            this.watchDeleteHandle = undefined;
        }
    }
    defaultGraphicTitle() {
        switch (this.currentSketchInfo.tool) {
            case "point":
                return this.strings.point;
            case "polyline":
                return this.strings.line;
            case "polygon":
                return this.strings.polygon;
            case "rectangle":
                return this.strings.rectangle;
            case "circle":
                return this.strings.circle;
            case "text":
                return this.strings.text;
            default:
                return this.strings.point;
        }
    }
    clearHighlightAndPopup() {
        this.removeHighlight();
        this.mapView.closePopup();
    }
    actionOnMultipleSelections(multipleSelectTool) {
        this.selectedSketchFeaturesFeatures = null;
        const selectionSources = [
            this.layer.pointLayer,
            this.layer.polylineLayer,
            this.layer.polygonLayer,
            this.layer.textLayer
        ];
        const drawObject = multipleSelectTool === "rectangle"
            ? {
                createTool: "rectangle"
            }
            : {
                createTool: "polygon",
                mode: "freehand"
            };
        const operation = (this.selectorOperation = new this.SelectionOperation({
            view: this.mapView,
            sources: selectionSources,
            options: drawObject
        }));
        operation.once("complete", (event) => {
            const { selection } = event;
            //this.sketchMessageHandler(null);
            this.clearHighlightAndPopup();
            if (!event.aborted && selection.length) {
                let tempPoint = [];
                let tempLine = [];
                let tempPolygon = [];
                let tempText = [];
                selection.forEach((currGraphic) => {
                    switch (getGeometryTypeFromGraphic(currGraphic)) {
                        case "point":
                            tempPoint = [...tempPoint, currGraphic];
                            break;
                        case "polyline":
                            tempLine = [...tempLine, currGraphic];
                            break;
                        case "polygon":
                            tempPolygon = [...tempPolygon, currGraphic];
                            break;
                        case "text":
                            tempText = [...tempText, currGraphic];
                            break;
                        default:
                            tempPoint = [...tempPoint, currGraphic];
                            break;
                    }
                });
                this.multipleSelectedGraphics = [...tempPoint, ...tempLine, ...tempPolygon, ...tempText];
                tempPoint.length && this.svModel.updatePoint(tempPoint);
                tempLine.length && this.svModel.updateLine(tempLine);
                tempPolygon.length && this.svModel.updatePolygon(tempPolygon);
                tempText.length && this.svModel.updateText(tempText);
                this.watchDeleteOnMapView(true);
            }
        });
        this.svModel.updateOnGraphic(false);
    }
    sketchMessageHandler(message) {
        sketchState.sketchMessage = message;
    }
    highlightGraphic(graphic) {
        var _a;
        this.removeHighlight();
        const match = (_a = this.mapView.allLayerViews) === null || _a === void 0 ? void 0 : _a.items.find(({ layer }) => layer === this.layer);
        this.createdGraphicHighlightHandle = match === null || match === void 0 ? void 0 : match.highlight(graphic);
    }
    removeHighlight() {
        var _a;
        (_a = this.createdGraphicHighlightHandle) === null || _a === void 0 ? void 0 : _a.remove();
        this.createdGraphicHighlightHandle = undefined;
    }
    // for workflows where we want the current select tools to stay activated
    keepSelectToolSelection() {
        this.sketchActionOnSelectFeatures.emit({
            sketchMessage: this.keepSelectionMessage,
            multipleSelectTool: this.keepSelectionTool
        });
    }
    /**
     * Renders the Sketch Flow Panels
     * @returns VNode
     */
    renderSketchFlowPanel() {
        var _a, _b, _c, _d;
        const dismissButton = ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { text: "close", scale: "m", icon: "x", slot: "header-actions-end", ref: (el) => (this.dismissButtonEl = el), onClick: (event) => {
                event.stopPropagation();
                this.sketchMessageHandler(null);
                this.svModel.cancel();
                this.clearHighlightAndPopup();
                this.arcgisSketchDismissedChange.emit();
            } }));
        const selectionMultipleLabel = ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { alignment: "center", for: "multiple-selection-buttons" }, ((_a = this.currentSketchInfo.graphics) === null || _a === void 0 ? void 0 : _a.length) <= 1
            ? this.strings.singleFeatureSelected
            : this.strings.featuresSelected.replace("${number}", (_b = this.currentSketchInfo.graphics) === null || _b === void 0 ? void 0 : _b.length.toString())));
        const deleteMultiple = ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { appearance: "outline-fill", alignment: "center", iconStart: "trash", kind: "danger", width: "full", onClick: (event) => {
                event.stopPropagation();
                // svm knows what's selected, and will delete accordingly
                this.deleteInProgress = true;
                this.svModel.delete();
                this.deleteInProgress = false;
                this.multipleSelectedGraphics = [];
                this.keepSelectToolSelection();
            } }, this.strings.delete));
        const addToNewSketch = ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { appearance: "outline-fill", alignment: "center", iconStart: "copy", kind: "neutral", width: "full", onClick: (event) => {
                event.stopPropagation();
                this.newSketchLayerFeatures = this.multipleSelectedGraphics.map((graphic) => graphic.clone());
                this.arcgisSketchAddToNewSketch.emit();
            } }, this.strings.addToNewSketch));
        const duplicateMultiple = ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { appearance: "outline-fill", alignment: "center", iconStart: "duplicate", kind: "neutral", width: "full", onClick: (event) => {
                event.stopPropagation();
                this.svModel.duplicate();
                //this.keepSelectToolSelection();
            } }, this.strings.duplicate));
        const ShortcutAndSnapping = ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "snapping", ref: (el) => (this.shortcutSnappingDiv = el) }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { appearance: "outline-fill", class: "sketch-keyboard-button", kind: "neutral", iconStart: "keyboard", scale: "l", label: this.strings.sketchShortcuts, onClick: () => {
                if (!this.arcgisSketchShortcuts) {
                    this.arcgisSketchShortcuts = document.createElement("arcgis-sketch-shortcuts");
                    this.arcgisSketchShortcuts.refElement = this.shortcutSnappingDiv;
                    document.body.appendChild(this.arcgisSketchShortcuts);
                    this.arcgisSketchShortcuts.addEventListener("arcgisSketchShortcutsDismissedChange", () => this.removeSketchShortcuts());
                }
            } }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { alignment: "icon-end-space-between", appearance: "outline-fill", kind: "neutral", width: "full", iconStart: "gear", iconEnd: "chevron-down", scale: "l", label: this.strings.settings, onClick: (event) => {
                event.stopPropagation();
                if (!this.sketchSnappingEl) {
                    this.sketchSnappingEl = document.createElement("arcgis-sketch-snapping");
                    this.sketchSnappingEl.refElement = this.shortcutSnappingDiv;
                    document.body.appendChild(this.sketchSnappingEl);
                    this.disableSketchPanel.emit(true);
                }
            } }, this.strings.settings)));
        const sketchMessage = ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: sketchState.sketchMessage && "sketch-message" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-notice", { width: "full", open: !!sketchState.sketchMessage && !(((_c = this.currentSketchInfo.graphics) === null || _c === void 0 ? void 0 : _c.length) > 1) }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "message" }, sketchState.sketchMessage))));
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-flow", { ref: (el) => (this.flowEl = el), dir: (0,_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_2__.g)(this.hostElement), class: (0,_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_2__.g)(this.hostElement) === "rtl" ? _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_2__.C.rtl : "" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-flow-item", { ref: (el) => (this.sketchFlowItemEl = el), heading: this.strings.sketch, disabled: !this.layer.capabilities.operations.supportsMapNotesEditing }, this.dismissible && dismissButton, ShortcutAndSnapping, sketchMessage, ((_d = this.currentSketchInfo.graphics) === null || _d === void 0 ? void 0 : _d.length) ? ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "multiple-selection" }, selectionMultipleLabel, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { id: "multiple-selection-buttons", class: "buttons" }, duplicateMultiple, addToNewSketch, deleteMultiple))) : null, this.showSketchContent && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-sketch-content", { currentSketchInfo: this.currentSketchInfo, flowEl: this.flowEl, symbolStylerRefElement: this.dismissButtonEl, ref: (element) => (this.sketchContentEl = element) })))));
    }
    render() {
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.H, { class: "calcite-match-height" }, !this.showSketchToolsOnly && this.renderSketchFlowPanel()));
    }
    get hostElement() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisSketch.style = arcgisSketchCss;

const arcgisSketchContentCss = ".sketch-content{display:flex;flex-direction:column;background-color:var(--arcgis-app-background);padding:var(--arcgis-app-cap-spacing) var(--arcgis-app-side-spacing-half)}.sketch-title calcite-inline-editable{border:1px solid;border-color:var(--calcite-color-border-input);padding:var(--arcgis-app-cap-spacing-third)}.rotation{display:flex;align-items:center;justify-content:space-between;position:relative}.rotation calcite-slider{width:50%}.rotation calcite-input-number{width:45%;font-size:var(--arcgis-app-font-size-0);font-family:var(--arcgis-app-font-family)}.sketch-popup-button{margin-bottom:0.4em}.recent-symbols{display:flex;flex-direction:column;padding:var(--arcgis-app-cap-spacing) var(--arcgis-app-side-spacing-half)}.container{background-color:var(--arcgis-app-background);box-shadow:0px 1px 10px 2px rgba(0, 0, 0, 0.1);padding:8px 12px;display:flex;align-items:center;justify-content:space-evenly}.symbol{height:32px;display:flex;align-items:center;cursor:pointer}.symbol:focus{outline:2px solid var(--calcite-ui-brand);outline-offset:2px}.no-recent-symbols{min-height:32px;display:flex;align-items:center}.clear-recent-button{padding-top:8px;margin:auto}.halo-block{padding-top:6px}";

const ArcgisSketchContent = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.sketchGraphicUpdates = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "sketchGraphicUpdates", 7);
        this.arcgisSketchPanelLoader = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSketchPanelLoader", 7);
        this.disableSketchPanel = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "disableSketchPanel", 7);
        this.arcgisSketchActiveSymbolChange = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSketchActiveSymbolChange", 7);
        this.resizeObserver = new ResizeObserver(() => (this.reRender = !this.reRender));
        this.divNodes = [];
        this.symbolNodes = [];
        this.suggestedFillColors = [];
        this.savedColors = [];
        this.storePointStyler = (el) => {
            if (!el) {
                return;
            }
            this.pointStyler = el;
            this.startPointEdit();
        };
        this.storePolylineStyler = (el) => {
            if (!el) {
                return;
            }
            this.polylineStyler = el;
            this.startPolylineEdit();
        };
        this.storePolygonStyler = (el) => {
            if (!el) {
                return;
            }
            this.polygonStyler = el;
            this.startPolygonEdit();
        };
        // open font popover
        this.openFontPopover = () => {
            var _a;
            if (!this.arcgisFontPicker) {
                this.disableSketchPanel.emit(true);
                this.arcgisFontPicker = document.createElement("arcgis-font-picker");
                this.arcgisFontPicker.fontMap = _fontUtil_bbe5d03d_js__WEBPACK_IMPORTED_MODULE_10__.f;
                this.arcgisFontPicker.font = (_a = this.currentSketchInfo.symbol) === null || _a === void 0 ? void 0 : _a.font;
                this.arcgisFontPicker.popoverProps = {
                    refElement: this.hostElement
                };
                this.arcgisFontPicker.addEventListener("arcgisFontPickerDismissed", this.closeFontPopover);
                this.arcgisFontPicker.addEventListener("arcgisFontPickerChange", this.changeFont);
                document.body.appendChild(this.arcgisFontPicker);
            }
        };
        this.closeFontPopover = () => {
            if (this.arcgisFontPicker) {
                this.disableSketchPanel.emit(false);
                document.body.removeChild(this.arcgisFontPicker);
                this.arcgisFontPicker = null;
            }
        };
        this.changeFont = (event) => {
            var _a;
            const font = event.detail;
            if (font) {
                const tempSymbol = (_a = this.currentSketchInfo.symbol) === null || _a === void 0 ? void 0 : _a.clone();
                tempSymbol.font.family = font.family;
                tempSymbol.font.weight = font.weight;
                tempSymbol.font.style = font.style;
                this.updateSymbol(tempSymbol, false, false, "font");
                this.reRender = !this.reRender;
            }
        };
        this.currentSketchInfo = undefined;
        this.flowEl = undefined;
        this.symbolStylerRefElement = undefined;
        this.storageId = undefined;
        this.reRender = true;
    }
    // lifecycle methods
    async componentWillLoad() {
        this.arcgisSketchPanelLoader.emit(true);
        await this.loadAllModules();
        // add sketch
        suggestedColorList.forEach((hex) => this.suggestedFillColors.push(new this.Color(hex)));
        savedColorList.forEach((hex) => this.savedColors.push(new this.Color(hex)));
        this.mapView = sketchState.mapView;
        this.strings = sketchState.strings;
        this.currentLanguage = sketchState.currentLanguage;
        this.portal = sketchState.portal;
        if (!this.flowEl) {
            this.flowEl = (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_9__.q)(this.hostElement, "calcite-flow");
        }
        // get recent symbols
        const storageId = this.currentSketchInfo.tool
            ? ["circle", "rectangle"].indexOf(this.currentSketchInfo.tool) > -1
                ? "arcgis-sketch-recent-polygon-symbols"
                : `arcgis-sketch-recent-${this.currentSketchInfo.tool}-symbols`
            : "arcgis-sketch-recent-point-symbols";
        const recentSymbols = (0,_storage_0353a769_js__WEBPACK_IMPORTED_MODULE_4__.g)(storageId, true);
        if (recentSymbols) {
            this.recentSymbols = [...recentSymbols];
        }
    }
    componentDidLoad() {
        this.arcgisSketchPanelLoader.emit(false);
        this.flowEl && this.resizeObserver.observe(this.flowEl);
    }
    disconnectedCallback() {
        this.flowEl && this.resizeObserver.unobserve(this.flowEl);
    }
    // events
    calciteFlowItemBackHandler(event) {
        event.stopPropagation();
        this.mapView.closePopup();
        this.sketchPopupFlowItem = null;
    }
    // currentSketchInfo is updated. rerender.
    sketchContentReRenderHandler(event) {
        event.stopPropagation();
        if ((0,_functional_44de8fcf_js__WEBPACK_IMPORTED_MODULE_5__.i)(event.detail)) {
            this.storageId = this.currentSketchInfo.tool
                ? ["circle", "rectangle"].indexOf(event.detail) > -1
                    ? "arcgis-sketch-recent-polygon-symbols"
                    : `arcgis-sketch-recent-${event.detail}-symbols`
                : "arcgis-sketch-recent-point-symbols";
            this.recentSymbols = (0,_storage_0353a769_js__WEBPACK_IMPORTED_MODULE_4__.g)(this.storageId, true);
        }
        this.reRender = !this.reRender;
        // go back if popup panel is open
        if (this.sketchPopupFlowItem) {
            this.flowEl.back();
            this.sketchPopupFlowItem = null;
        }
        const { tool } = this.currentSketchInfo;
        if (tool === "point") {
            this.startPointEdit();
        }
        else if (tool === "polyline") {
            this.startPolylineEdit();
        }
        else if (["circle", "polygon", "rectangle"].includes(tool)) {
            this.startPolygonEdit();
        }
    }
    popupUpdatedHandler({ detail: { mapNotesPopuptemplate } }) {
        this.currentSketchInfo.popup = mapNotesPopuptemplate;
        this.sketchGraphicUpdates.emit({
            type: "popup",
            update: true,
            close: false
        });
    }
    // Private Methods
    async loadAllModules() {
        [
            this.Color,
            this.cimSymbolUtils,
            this.symbolUtils,
            this.CIMSymbol,
            this.SimpleLineSymbol,
            this.SimpleFillSymbol,
            this.PictureMarkerSymbol,
            this.PictureFillSymbol,
            this.TextSymbol
        ] = await (0,_loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_3__.l)([
            "esri/Color",
            "esri/symbols/support/cimSymbolUtils",
            "esri/symbols/support/symbolUtils",
            "esri/symbols/CIMSymbol",
            "esri/symbols/SimpleLineSymbol",
            "esri/symbols/SimpleFillSymbol",
            "esri/symbols/PictureMarkerSymbol",
            "esri/symbols/PictureFillSymbol",
            "esri/symbols/TextSymbol"
        ]);
    }
    updateSymbol(symbol, symbolSwitch, symbolSwitchFromRecent, textProp, needsDebounceBeforeUpdate) {
        var _a;
        const currentSymbolClone = this.currentSketchInfo.symbol.clone();
        const newSymbolClone = symbol.clone();
        const sizeChanged = getSymbolSize(this.currentSketchInfo.symbol) !== getSymbolSize(symbol);
        this.currentSketchInfo.symbol = symbol.clone();
        if (textProp === "recent-text") {
            this.currentSketchInfo.symbol.text = currentSymbolClone.text;
        }
        this.sketchGraphicUpdates.emit({
            type: "symbol",
            update: true,
            close: false,
            symbolSwitch,
            symbolSwitchFromRecent,
            textProp
        });
        if (needsDebounceBeforeUpdate) {
            this.arcgisSketchActiveSymbolChange.emit();
        }
        else if (!((sizeChanged && !symbolSwitch && !symbolSwitchFromRecent) ||
            ["halo-size", "text"].indexOf(textProp) > -1)) {
            if (newSymbolClone.type === "text") {
                newSymbolClone.text = this.strings.textPreview;
            }
            const currentlyStoredSymbols = (_a = this.recentSymbols) === null || _a === void 0 ? void 0 : _a.filter((recent) => JSON.stringify(recent) !== JSON.stringify(newSymbolClone));
            const recentSymbols = (0,_functional_44de8fcf_js__WEBPACK_IMPORTED_MODULE_5__.i)(currentlyStoredSymbols)
                ? [newSymbolClone, ...currentlyStoredSymbols].slice(0, 5)
                : [newSymbolClone];
            const storageId = this.currentSketchInfo.tool
                ? ["circle", "rectangle"].indexOf(this.currentSketchInfo.tool) > -1
                    ? "arcgis-sketch-recent-polygon-symbols"
                    : `arcgis-sketch-recent-${this.currentSketchInfo.tool}-symbols`
                : "arcgis-sketch-recent-point-symbols";
            (0,_storage_0353a769_js__WEBPACK_IMPORTED_MODULE_4__.s)(storageId, recentSymbols, true);
            this.recentSymbols = recentSymbols;
            this.arcgisSketchActiveSymbolChange.emit();
        }
    }
    applyCimOutline(sym, stroke) {
        const outline = getCimOutline(sym);
        if (!outline) {
            return;
        }
        const rgba = stroke.color.toRgba();
        rgba[3] *= 255;
        outline.color = rgba;
        outline.width = stroke.size;
    }
    // https://devtopia.esri.com/WebGIS/arcgis-components/blob/master/src/smartMapping/_utils/symbolStyler.ts#L4996
    getCimOutlineProps(sym) {
        var _a;
        const outline = getCimOutline(sym);
        return {
            color: new this.Color(outline === null || outline === void 0 ? void 0 : outline.color),
            size: (_a = outline === null || outline === void 0 ? void 0 : outline.width) !== null && _a !== void 0 ? _a : 1
        };
    }
    getPopoverProps(isRtl) {
        var _a;
        const flowRect = (_a = this.flowEl) === null || _a === void 0 ? void 0 : _a.getBoundingClientRect();
        return {
            placement: isRtl ? "bottom-start" : "bottom-end",
            offsetDistance: 10,
            offsetSkidding: isRtl ? 3 : -3,
            overlayPositioning: "fixed",
            maxHeight: flowRect && `${flowRect.height - 65}px`,
            refElement: this.symbolStylerRefElement
        };
    }
    startPointEdit() {
        var _a;
        // cim and custom picture-markers are allowed
        const isCIM = this.currentSketchInfo.symbol.type === "cim";
        (_a = this.pointStyler) === null || _a === void 0 ? void 0 : _a.edit(this.currentSketchInfo.symbol.clone(), {
            sections: {
                marker: {
                    open: true,
                    symbolsOpen: true,
                    sizeOpen: false,
                    rotationOpen: false,
                    // 'all' by default, can be 'simple', 'picture', 'cim', 'cim:picture', 'cim:vector'
                    // or an array of a combination of specific types
                    markerType: ["cim:vector", "custom"],
                    keepChoice: true,
                    parts: {
                        size: {
                            autoSizeAdjust: false // hide adjust size property
                        }
                    }
                },
                fill: isCIM && {
                    type: "color",
                    optional: true,
                    suggestedColors: this.suggestedFillColors,
                    savedColors: this.savedColors,
                    open: false,
                    suggestedColorsOpen: true
                },
                stroke: isCIM && {
                    optional: true,
                    open: false,
                    type: "color",
                    suggestedColors: this.suggestedFillColors,
                    savedColors: this.savedColors
                }
            },
            marker: {
                size: isCIM
                    ? this.cimSymbolUtils.getCIMSymbolSize(this.currentSketchInfo.symbol)
                    : this.currentSketchInfo.symbol.type === "picture-marker"
                        ? this.currentSketchInfo.symbol.width
                        : 25
            },
            fill: {
                color: (isCIM &&
                    this.cimSymbolUtils.getCIMSymbolColor(this.currentSketchInfo.symbol)) ||
                    this.suggestedFillColors[0]
            },
            stroke: isCIM && this.getCimOutlineProps(this.currentSketchInfo.symbol),
            fillEnabled: isCIM,
            strokeEnabled: isCIM,
            portal: this.createPortalProp()
        });
    }
    startPolylineEdit() {
        var _a, _b, _c, _d, _e;
        (_a = this.polylineStyler) === null || _a === void 0 ? void 0 : _a.edit(this.currentSketchInfo.symbol.clone(), {
            sections: {
                stroke: {
                    type: "color",
                    open: true,
                    suggestedColorsOpen: true,
                    suggestedColors: this.suggestedFillColors,
                    extraParts: {
                        width: true,
                        autoStrokeAdjust: false
                    }
                }
            },
            stroke: {
                color: ((_b = this.currentSketchInfo.symbol) === null || _b === void 0 ? void 0 : _b.color) || this.savedColors[1],
                size: ((_c = this.currentSketchInfo.symbol) === null || _c === void 0 ? void 0 : _c.width) || 10,
                style: ((_d = this.currentSketchInfo.symbol) === null || _d === void 0 ? void 0 : _d.style) ||
                    "solid",
                marker: (_e = this.currentSketchInfo.symbol) === null || _e === void 0 ? void 0 : _e.marker
            },
            portal: this.createPortalProp()
        });
    }
    createPortalProp() {
        return {
            portal: this.portal,
            before: async (portal, data) => {
                await portal.load();
                data.originalStylesGroupQuery2d = portal.stylesGroupQuery2d;
                portal.stylesGroupQuery2d = 'title:"Esri Sketch Styles" AND owner:esri_en';
            },
            after: async (portal, data) => {
                portal.stylesGroupQuery2d = data.originalStylesGroupQuery2d;
            }
        };
    }
    startPolygonEdit() {
        var _a, _b, _c, _d, _e;
        (_a = this.polygonStyler) === null || _a === void 0 ? void 0 : _a.edit(this.currentSketchInfo.symbol.clone(), {
            sections: {
                fill: {
                    type: "color",
                    open: true,
                    optional: true,
                    suggestedColorsOpen: true,
                    transparencyOpen: false,
                    suggestedColors: this.suggestedFillColors
                },
                stroke: {
                    type: "color",
                    open: false,
                    optional: true,
                    suggestedColorsOpen: true,
                    suggestedColors: this.suggestedFillColors,
                    extraParts: {
                        width: true,
                        autoStrokeAdjust: false
                    }
                }
            },
            fill: {
                color: this.currentSketchInfo.symbol.color ||
                    this.suggestedFillColors[0]
            },
            stroke: {
                color: ((_b = this.currentSketchInfo.symbol.outline) === null || _b === void 0 ? void 0 : _b.color) ||
                    this.suggestedFillColors[0],
                size: ((_c = this.currentSketchInfo.symbol.outline) === null || _c === void 0 ? void 0 : _c.width) || 10,
                style: ((_d = this.currentSketchInfo.symbol.outline) === null || _d === void 0 ? void 0 : _d.style) || "solid",
                autoAdjusted: false
            },
            fillEnabled: this.currentSketchInfo.symbol.color ? true : false,
            strokeEnabled: ((_e = this.currentSketchInfo.symbol) === null || _e === void 0 ? void 0 : _e.outline)
                ? true
                : false,
            portal: this.createPortalProp()
        });
    }
    handleTextPropChange(node, textProp) {
        var _a;
        let value = parseInt(node.value);
        if (isNaN(value) || value < node.min) {
            value = node.min;
        }
        else if (value > node.max) {
            value = node.max;
        }
        node.value = `${value}`;
        const tempSymbol = (_a = this.currentSketchInfo.symbol) === null || _a === void 0 ? void 0 : _a.clone();
        switch (textProp) {
            case "font-size":
                tempSymbol.font.size = value * 0.75;
                break;
            case "halo-size":
                tempSymbol.haloSize = value * 0.75;
                break;
            case "rotation":
                tempSymbol.angle = value;
                break;
        }
        this.updateSymbol(tempSymbol, false, false, textProp);
        if (textProp === "rotation") {
            this.reRender = !this.reRender;
        }
    }
    handleRotationSliderValueChange(angle, needsDebounceBeforeUpdate) {
        var _a;
        const tempSymbol = (_a = this.currentSketchInfo.symbol) === null || _a === void 0 ? void 0 : _a.clone();
        tempSymbol.angle = angle;
        this.updateSymbol(tempSymbol, false, false, "rotation", needsDebounceBeforeUpdate);
    }
    render() {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u;
        const isRtl = (0,_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_2__.g)(this.hostElement) === "rtl";
        const isBulk = ((_a = this.currentSketchInfo.graphics) === null || _a === void 0 ? void 0 : _a.length) > 1;
        const firstSymbolType = (_b = this.currentSketchInfo.graphics) === null || _b === void 0 ? void 0 : _b[0].symbol.type;
        const identicalSymbolTypes = (_c = this.currentSketchInfo.graphics) === null || _c === void 0 ? void 0 : _c.every((graphic) => firstSymbolType === graphic.symbol.type);
        const point = ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-symbol-styler", { mode: isBulk ? "minimal" : "default", key: "point-styler", lang: this.currentLanguage, initialSourceId: this.currentSketchInfo.sourceIds.pointSourceId, ref: this.currentSketchInfo.symbol && this.storePointStyler, popoverProps: this.getPopoverProps(isRtl), onArcgisSymbolStylerEdit: ({ detail: { symbol, symbolSwitch } }) => {
                this.updateSymbol(symbol, symbolSwitch);
            }, onArcgisSymbolStylerSourceIdChange: ({ detail: sourceId }) => (this.currentSketchInfo.sourceIds.pointSourceId = sourceId) }));
        const polyline = ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-symbol-styler", { mode: isBulk ? "minimal" : "default", key: "polyline-styler", lang: this.currentLanguage, initialSourceId: this.currentSketchInfo.sourceIds.polylineSourceId, ref: this.currentSketchInfo.symbol && this.storePolylineStyler, popoverProps: this.getPopoverProps(isRtl), onArcgisSymbolStylerEdit: ({ detail: { symbol, symbolSwitch } }) => {
                this.updateSymbol(symbol, symbolSwitch);
            }, onArcgisSymbolStylerSourceIdChange: ({ detail: sourceId }) => (this.currentSketchInfo.sourceIds.polylineSourceId = sourceId) }));
        const polygon = ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-symbol-styler", { mode: isBulk ? "minimal" : "default", key: "polygon-styler", lang: this.currentLanguage, initialSourceId: this.currentSketchInfo.sourceIds.polygonSourceId, ref: this.currentSketchInfo.symbol && this.storePolygonStyler, popoverProps: this.getPopoverProps(isRtl), onArcgisSymbolStylerEdit: ({ detail: { symbol, symbolSwitch } }) => {
                this.updateSymbol(symbol, symbolSwitch);
            }, onArcgisSymbolStylerSourceIdChange: ({ detail: sourceId }) => (this.currentSketchInfo.sourceIds.polygonSourceId = sourceId) }));
        // text
        let firstTextContent;
        let identicalTextContent;
        if (this.textContentEl) {
            firstTextContent = (_d = this.currentSketchInfo.symbol) === null || _d === void 0 ? void 0 : _d.text;
            identicalTextContent = (_e = this.currentSketchInfo.graphics) === null || _e === void 0 ? void 0 : _e.every((graphic) => firstTextContent === graphic.symbol.text);
        }
        const textContent = ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, this.strings.content, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-input", { type: "textarea", placeholder: this.strings.textContentPlaceholder, value: identicalTextContent ? (_f = this.currentSketchInfo.symbol) === null || _f === void 0 ? void 0 : _f.text : "", onCalciteInputInput: (event) => {
                var _a;
                event.stopPropagation();
                const tempSymbol = (_a = this.currentSketchInfo.symbol) === null || _a === void 0 ? void 0 : _a.clone();
                tempSymbol.text = event.target.value;
                this.updateSymbol(tempSymbol, false, false, "text");
            }, ref: (element) => (this.textContentEl = element) })));
        const fontFamilySelection = ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, this.strings.font, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { alignment: "icon-end-space-between", appearance: "outline-fill", kind: "neutral", iconEnd: "chevron-down", label: (0,_fontUtil_bbe5d03d_js__WEBPACK_IMPORTED_MODULE_10__.b)(((_g = this.currentSketchInfo.symbol) === null || _g === void 0 ? void 0 : _g.font) ||
                { family: "Arial", style: "normal", weight: "normal" }), width: "full", scale: "m", onClick: this.openFontPopover }, (0,_fontUtil_bbe5d03d_js__WEBPACK_IMPORTED_MODULE_10__.b)((_h = this.currentSketchInfo.symbol) === null || _h === void 0 ? void 0 : _h.font))));
        const textFontSize = ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, this.strings.size, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-input-number", { scale: "s", min: 5, max: 125, value: `${((_k = (_j = this.currentSketchInfo.symbol) === null || _j === void 0 ? void 0 : _j.font) === null || _k === void 0 ? void 0 : _k.size) / 0.75 || 0}`, onCalciteInputNumberInput: (event) => {
                event.stopPropagation();
                const value = parseInt(this.fontSizeEl.value);
                if (!value || value < this.fontSizeEl.min || value > this.fontSizeEl.max) {
                    this.fontSizeValueHandle = setTimeout(() => this.handleTextPropChange(this.fontSizeEl, "font-size"), 3000);
                }
                else {
                    clearTimeout(this.fontSizeValueHandle);
                    this.handleTextPropChange(this.fontSizeEl, "font-size");
                }
            }, ref: (element) => (this.fontSizeEl = element) })));
        const textColor = ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, this.strings.color, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-color-input", { color: ((_m = (_l = this.currentSketchInfo.symbol) === null || _l === void 0 ? void 0 : _l.color) === null || _m === void 0 ? void 0 : _m.toHex()) || "#ffffff", popoverProps: this.getPopoverProps(isRtl), onArcgisColorInputChange: (event) => {
                var _a;
                const tempSymbol = (_a = this.currentSketchInfo.symbol) === null || _a === void 0 ? void 0 : _a.clone();
                tempSymbol.color = new this.Color(event.target.color);
                this.updateSymbol(tempSymbol, false, false, "color");
            } })));
        const rotation = ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, this.strings.rotation, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "rotation" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-slider", { min: 0, max: 360, value: ((_o = this.currentSketchInfo.symbol) === null || _o === void 0 ? void 0 : _o.angle) || 0, step: 1, onCalciteSliderInput: (event) => this.handleRotationSliderValueChange(event.target.value, true), onCalciteSliderChange: (event) => this.handleRotationSliderValueChange(event.target.value, false) }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-input-number", { scale: "s", min: 0, max: 360, suffixText: isRtl ? "" : "º", prefixText: isRtl ? "º" : "", step: 1, value: `${((_p = this.currentSketchInfo.symbol) === null || _p === void 0 ? void 0 : _p.angle) || 0}`, onCalciteInputNumberInput: (event) => {
                event.stopPropagation();
                const value = parseInt(this.rotationEl.value);
                if (!value || value < this.rotationEl.min || value > this.rotationEl.max) {
                    this.rotationValueHandle = setTimeout(() => this.handleTextPropChange(this.rotationEl, "rotation"), 3000);
                }
                else {
                    clearTimeout(this.rotationValueHandle);
                    this.handleTextPropChange(this.rotationEl, "rotation");
                }
            }, ref: (element) => (this.rotationEl = element) }))));
        const haloBlock = ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-block-section", { ref: (el) => (this.haloBlockSection = el), text: this.strings.halo, toggleDisplay: "switch", open: ((_q = this.currentSketchInfo.symbol) === null || _q === void 0 ? void 0 : _q.haloColor) ? true : false, onCalciteBlockSectionToggle: (event) => {
                var _a;
                event.stopPropagation();
                const tempSymbol = (_a = this.currentSketchInfo.symbol) === null || _a === void 0 ? void 0 : _a.clone();
                if (this.haloBlockSection.open) {
                    tempSymbol.haloColor = this.tempHaloColor || new this.Color("white");
                    tempSymbol.haloSize = (tempSymbol === null || tempSymbol === void 0 ? void 0 : tempSymbol.haloSize) || 1 * 0.75;
                }
                else {
                    this.tempHaloColor = tempSymbol.haloColor;
                    tempSymbol.haloColor = null;
                }
                this.updateSymbol(tempSymbol, false, false, "halo");
            } }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "halo-block" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, this.strings.color, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-color-input", { color: ((_s = (_r = this.currentSketchInfo.symbol) === null || _r === void 0 ? void 0 : _r.haloColor) === null || _s === void 0 ? void 0 : _s.toHex()) ||
                "#ffffff", popoverProps: this.getPopoverProps(isRtl), onArcgisColorInputChange: (event) => {
                var _a;
                const tempSymbol = (_a = this.currentSketchInfo.symbol) === null || _a === void 0 ? void 0 : _a.clone();
                tempSymbol.haloColor = new this.Color(event.target.color);
                this.updateSymbol(tempSymbol, false, false, "halo-color");
            } })), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, this.strings.size, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-input-number", { scale: "s", min: 1, max: 10, value: `${((_t = this.currentSketchInfo.symbol) === null || _t === void 0 ? void 0 : _t.haloSize) / 0.75 || 0}`, onCalciteInputNumberInput: (event) => {
                event.stopPropagation();
                const value = parseInt(this.haloSizeEl.value);
                if (!value || value < this.haloSizeEl.min || value > this.haloSizeEl.max) {
                    this.haloSizeValueHandle = setTimeout(() => this.handleTextPropChange(this.haloSizeEl, "halo-size"), 3000);
                }
                else {
                    clearTimeout(this.haloSizeValueHandle);
                    this.handleTextPropChange(this.haloSizeEl, "halo-size");
                }
            }, ref: (element) => (this.haloSizeEl = element) })))));
        const text = ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, textContent, fontFamilySelection, textFontSize, textColor, rotation, haloBlock));
        this.divNodes = [];
        this.symbolNodes = [];
        let currentToolText;
        switch (this.currentSketchInfo.tool) {
            case "point":
                currentToolText = this.strings.point;
                break;
            case "polyline":
                currentToolText = this.strings.line;
                break;
            case "text":
                currentToolText = this.strings.text;
                break;
            default:
                currentToolText = this.strings.polygon;
        }
        currentToolText = currentToolText.toLocaleLowerCase();
        const recentSymbols = ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.F, null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, this.strings.recentSymbols), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "container", ref: (node) => (this.recentSymbolsContainerEl = node) }, ((_u = this.recentSymbols) === null || _u === void 0 ? void 0 : _u.length) ? (this.recentSymbols.map((recentSymbol, idx) => {
            return recentSymbol ? ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { key: "symbol", class: "symbol", tabindex: "0", onClick: () => this.handleRecentSymbolSelect(idx), onKeyDown: (event) => {
                    if (event.key === " " || event.key === "Enter") {
                        event.preventDefault();
                        event.stopPropagation();
                        this.handleRecentSymbolSelect(idx);
                    }
                }, ref: (node) => {
                    if (node) {
                        this.divNodes[idx] = node;
                        this.afterCreateDiv(node, recentSymbol, idx);
                    }
                } })) : null;
        })) : ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { key: "no-recent-symbol", class: "no-recent-symbols" }, this.strings.noRecentSymbols.replace("${tool}", currentToolText)))), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { scale: "s", class: "clear-recent-button", width: "half", onClick: () => {
                const storageId = this.currentSketchInfo.tool
                    ? ["circle", "rectangle"].indexOf(this.currentSketchInfo.tool) > -1
                        ? "arcgis-sketch-recent-polygon-symbols"
                        : `arcgis-sketch-recent-${this.currentSketchInfo.tool}-symbols`
                    : "arcgis-sketch-recent-point-symbols";
                this.recentSymbols = [];
                (0,_storage_0353a769_js__WEBPACK_IMPORTED_MODULE_4__.s)(storageId, this.recentSymbols, true);
                (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
            } }, this.strings.clear)));
        const sketchTitle = ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { class: "sketch-title" }, this.strings.title, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-inline-editable", { scale: "m" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-input", { alignment: "start", placeholder: this.strings.enterTitlePlaceholder, type: "text", value: this.currentSketchInfo.title, onBlur: (event) => {
                this.currentSketchInfo.title = event.target.value;
                this.sketchGraphicUpdates.emit({
                    type: "title",
                    update: true,
                    close: false
                });
            } }))));
        const popupBtn = ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { alignment: "icon-end-space-between", appearance: "outline-fill", kind: "neutral", iconEnd: isRtl ? "chevron-left" : "chevron-right", label: this.strings.popup, width: "full", scale: "l", class: "sketch-popup-button", onClick: (event) => {
                var _a, _b;
                event.stopPropagation();
                if (!this.sketchPopupFlowItem) {
                    this.sketchPopupFlowItem = document.createElement("calcite-flow-item");
                    this.sketchPopupFlowItem.heading = this.strings.sketch;
                    this.sketchPopupFlowItem.description = this.strings.popup;
                    const calciteFab = document.createElement("calcite-fab");
                    calciteFab.icon = "plus";
                    calciteFab.slot = "fab";
                    calciteFab.scale = "s";
                    calciteFab.appearance = "outline-fill";
                    calciteFab.kind = "neutral";
                    calciteFab.label = this.strings.addContent;
                    calciteFab.text = this.strings.addContent;
                    calciteFab.textEnabled = true;
                    this.sketchPopupFlowItem.appendChild(calciteFab);
                    const popupComponent = document.createElement("arcgis-popup");
                    popupComponent.lang = this.currentLanguage;
                    popupComponent.mapView = this.mapView;
                    popupComponent.layerDisplayType = _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_8__.l.mapNotes;
                    popupComponent.mapNotesGraphic = (_a = this.currentSketchInfo.graphics) === null || _a === void 0 ? void 0 : _a[0];
                    popupComponent.mapNotesPopupTemplate = this.currentSketchInfo.popup;
                    popupComponent.calciteFlowProps = {
                        flow: this.flowEl,
                        calciteFab: calciteFab,
                        calciteFlowItem: this.sketchPopupFlowItem
                    };
                    this.sketchPopupFlowItem.appendChild(popupComponent);
                    this.flowEl.appendChild(this.sketchPopupFlowItem);
                    // handle multiple features
                    if (isBulk) {
                        popupComponent.disableEditing = true;
                        const applyChangesBtn = document.createElement("calcite-button");
                        applyChangesBtn.label = this.strings.applyChanges;
                        applyChangesBtn.innerHTML = this.strings.applyChanges;
                        applyChangesBtn.scale = "l";
                        applyChangesBtn.slot = "footer";
                        this.sketchPopupFlowItem.append(applyChangesBtn);
                        applyChangesBtn.addEventListener("click", () => {
                            popupComponent.disableEditing = false;
                            popupComponent.update();
                        });
                    }
                    this.sketchPopupFlowItem.setFocus();
                    this.sketchPopupFlowItem.beforeBack = async () => await popupComponent.done();
                    this.mapView.closePopup();
                    if (((_b = this.currentSketchInfo.graphics) === null || _b === void 0 ? void 0 : _b.length) && this.currentSketchInfo.popup) {
                        this.mapView.openPopup({
                            features: [this.currentSketchInfo.graphics[0]],
                            location: (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_9__.o)(this.currentSketchInfo.graphics[0].geometry)
                        });
                    }
                }
            } }, this.strings.popup));
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.H, null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { dir: (0,_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_2__.g)(this.hostElement) }, (!isBulk || identicalSymbolTypes) && (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "recent-symbols" }, recentSymbols), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "sketch-content" }, sketchTitle, popupBtn, (() => {
            if (!isBulk || identicalSymbolTypes) {
                switch (this.currentSketchInfo.tool) {
                    case "point":
                        return point;
                    case "text":
                        return text;
                    case "polyline":
                        return polyline;
                    case "polygon":
                    case "rectangle":
                    case "circle":
                        return polygon;
                    default:
                        return null;
                }
            }
        })()))));
    }
    handleRecentSymbolSelect(idx) {
        this.updateSymbol(this.symbolNodes[idx], true, true, this.textContentEl ? "recent-text" : undefined);
        this.divNodes[0].focus();
    }
    async afterCreateDiv(node, symbol, idx) {
        var _a;
        let formattedSymbol;
        // display a symbol chosen from the panel
        if (["simple-line", "simple-fill", "picture-marker", "picture-fill", "text", "cim"].indexOf(symbol.type) > -1) {
            if (symbol.type === "text") {
                symbol.text = this.strings.textPreview;
            }
            formattedSymbol = symbol;
            // display a symbol whose JSON is in local storage
        }
        else {
            switch (symbol.type) {
                case "CIMSymbolReference":
                    formattedSymbol = this.CIMSymbol.fromJSON(symbol);
                    break;
                case "esriSLS":
                    formattedSymbol = this.SimpleLineSymbol.fromJSON(symbol);
                    break;
                case "esriSFS":
                    formattedSymbol = this.SimpleFillSymbol.fromJSON(symbol);
                    break;
                case "esriPMS":
                    formattedSymbol = this.PictureMarkerSymbol.fromJSON(symbol);
                    break;
                case "esriPFS":
                    formattedSymbol = this.PictureFillSymbol.fromJSON(symbol);
                    break;
                case "esriTS":
                    formattedSymbol = this.TextSymbol.fromJSON(symbol);
                    break;
            }
        }
        while ((_a = node === null || node === void 0 ? void 0 : node.childNodes) === null || _a === void 0 ? void 0 : _a.length) {
            node.removeChild(node.childNodes[0]);
        }
        const previewSymbol = formattedSymbol.clone();
        if (previewSymbol.type === "text") {
            previewSymbol.haloSize = Math.min(2, previewSymbol.haloSize);
        }
        if (previewSymbol.type === "simple-line") {
            previewSymbol.width = Math.min(2, previewSymbol.width);
        }
        const options = {
            maxSize: 24,
            scale: true,
            size: previewSymbol.type === "simple-line"
                ? { width: this.recentSymbolsContainerEl.clientWidth / 9 }
                : { width: 24, height: 24 }
        };
        if (previewSymbol) {
            await this.symbolUtils
                .renderPreviewHTML(previewSymbol, options)
                .then((element) => {
                if (element) {
                    node.append(element);
                    this.symbolNodes[idx] = formattedSymbol;
                }
            });
        }
    }
    get hostElement() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisSketchContent.style = arcgisSketchContentCss;

const arcgisSketchShortcutsCss = ".sketch-shortcut{background-color:var(--arcgis-app-background);display:grid;grid-template-columns:21% auto;row-gap:var(--arcgis-app-cap-spacing-half);padding:var(--arcgis-app-cap-spacing-half)}.sketch-shortcut-chip{margin-right:var(--arcgis-app-cap-spacing-half)}.sketch-shortcut-label{align-self:center}.popover{z-index:100}.arcgis--rtl .sketch-shortcut{max-height:40vh}.arcgis--rtl .sketch-shortcut-chip{margin-left:var(--arcgis-app-cap-spacing-half);margin-right:0}";

const ArcgisSketchShortcuts = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisSketchShortcutsDismissedChange = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSketchShortcutsDismissedChange", 7);
        this.refElement = undefined;
        this.isOpen = false;
    }
    componentWillLoad() {
        this.strings = sketchState.strings;
    }
    componentDidLoad() {
        this.isOpen = true;
    }
    async reposition() {
        var _a;
        (_a = this.sketchShortcutsPopover) === null || _a === void 0 ? void 0 : _a.reposition();
    }
    render() {
        const isRtl = (0,_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_2__.g)(this.hostElement) === "rtl";
        const placement = !isRtl ? "leading-start" : "trailing-start";
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.H, { class: "js-app-flyout" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-popover", { dir: (0,_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_2__.g)(this.hostElement), class: "popover " + ((0,_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_2__.g)(this.hostElement) === "rtl" ? _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_2__.C.rtl : ""), ref: (el) => (this.sketchShortcutsPopover = el), placement: placement, open: this.isOpen, pointerDisabled: true, referenceElement: this.refElement, offsetDistance: -Math.round(this.refElement.getBoundingClientRect().width), offsetSkidding: 0, label: this.strings.sketchShortcuts }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-panel", { heading: this.strings.sketchShortcuts, closable: true, style: {
                width: `${Math.max(this.refElement.getBoundingClientRect().width, 375)}px`
            }, onCalcitePanelClose: () => this.arcgisSketchShortcutsDismissedChange.emit() }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "sketch-shortcut" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-chip", { class: "sketch-shortcut-chip", value: "Ctrl", scale: "m" }, "Ctrl"), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { class: "sketch-shortcut-label" }, this.strings.ctrlShortcut), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-chip", { class: "sketch-shortcut-chip", value: "Enter", scale: "m" }, "Enter"), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { class: "sketch-shortcut-label" }, this.strings.cShortcut), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-chip", { class: "sketch-shortcut-chip", value: "Z", scale: "m" }, "Z"), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { class: "sketch-shortcut-label" }, this.strings.zShortcut), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-chip", { class: "sketch-shortcut-chip", value: "R", scale: "m" }, "R"), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { class: "sketch-shortcut-label" }, this.strings.rShortcut), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-chip", { class: "sketch-shortcut-chip", value: "Esc", scale: "m" }, "Esc"), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { class: "sketch-shortcut-label" }, this.strings.escShortcut))))));
    }
    get hostElement() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisSketchShortcuts.style = arcgisSketchShortcutsCss;

const arcgisSketchSnappingCss = ".content{max-height:60vh}";

const ArcgisSketchSnapping = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.closeSketchSnappingPopovers = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "closeSketchSnappingPopovers", 7);
        this.refElement = undefined;
    }
    async componentWillLoad() {
        this.strings = sketchState.strings;
        this.mapView = sketchState.mapView;
        this.snappingOptions = sketchState.snappingOptions;
        this.snappingSessionStorageIds = sketchState.snappingSessionStorageIds;
        this.sketchTooltipOptions = sketchState.sketchTooltipOptions;
        this.sketchTooltipSessionStorageIds = sketchState.sketchTooltipSessionStorageIds;
        await this.loadAllModules();
        this.addSnappingWidget();
        this.addTooltipsWidget();
    }
    componentDidLoad() {
        this.snappingControls.container = this.snappingControlDiv;
        this.sketchTooltipControls.container = this.sketchTooltipControlDiv;
    }
    disconnectedCallback() {
        var _a, _b;
        (_a = this.snappingControls) === null || _a === void 0 ? void 0 : _a.destroy();
        (_b = this.sketchTooltipControls) === null || _b === void 0 ? void 0 : _b.destroy();
    }
    async reposition() {
        var _a;
        (_a = this.sketchSnappingPopover) === null || _a === void 0 ? void 0 : _a.reposition();
    }
    async loadAllModules() {
        const [SnappingControls, SketchTooltipControls] = await (0,_loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_3__.l)([
            "esri/widgets/support/SnappingControls",
            "esri/widgets/support/SketchTooltipControls"
        ]);
        this.SnappingControls = SnappingControls;
        this.SketchTooltipControls = SketchTooltipControls;
    }
    addSnappingWidget() {
        this.snappingControls = new this.SnappingControls({
            view: this.mapView,
            snappingOptions: sketchState.snappingOptions,
            visibleElements: {
                header: false
            }
        });
    }
    addTooltipsWidget() {
        this.sketchTooltipControls = new this.SketchTooltipControls({
            view: this.mapView,
            tooltipOptions: sketchState.sketchTooltipOptions,
            visibleElements: {
                tooltipsToggle: true,
                labelsToggle: false
            }
        } /* __esri.SketchTooltipControlsProperties */);
    }
    render() {
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.H, { class: "js-app-flyout" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-popover", { dir: (0,_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_2__.g)(this.hostElement), placement: "leading-start", ref: (el) => (this.sketchSnappingPopover = el), open: true, pointerDisabled: true, referenceElement: this.refElement, offsetDistance: -Math.round(this.refElement.getBoundingClientRect().width), offsetSkidding: 0, label: this.strings.settings, style: {
                zIndex: "100"
            } }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-panel", { closable: true, headingLevel: 2, heading: this.strings.settings, style: {
                width: `${this.refElement.getBoundingClientRect().width}px`
            }, onCalcitePanelClose: () => {
                var _a, _b;
                if ((_a = this.snappingSessionStorageIds) === null || _a === void 0 ? void 0 : _a.current) {
                    saveSnappingToStorage(this.snappingOptions, this.snappingSessionStorageIds.current);
                }
                if ((_b = this.sketchTooltipSessionStorageIds) === null || _b === void 0 ? void 0 : _b.current) {
                    saveSketchTooltipToStorage(this.sketchTooltipOptions, this.sketchTooltipSessionStorageIds.current);
                }
                this.closeSketchSnappingPopovers.emit();
            } }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "content" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { ref: (el) => (this.sketchTooltipControlDiv = el) }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { ref: (el) => (this.snappingControlDiv = el) }))))));
    }
    get hostElement() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisSketchSnapping.style = arcgisSketchSnappingCss;

const arcgisSketchToolsCss = ".popover{z-index:100}";

const ArcgisSketchTools = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.sketchActionOnDrawFeatures = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "sketchActionOnDrawFeatures", 7);
        this.sketchActionOnSelectFeatures = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "sketchActionOnSelectFeatures", 7);
        this.refElement = undefined;
        this.mapNotesFeatures = null;
        this.sketchToolsToHide = [];
        this.activeSketchTool = undefined;
        this.hideSelectionTools = false;
        this.isOpen = false;
    }
    componentWillLoad() {
        this.strings = sketchState.strings;
        this.svModel = sketchState.svModel;
        this.layer = sketchState.layer;
        this.isOpen = true;
    }
    componentDidLoad() {
        var _a;
        // select mode if feature is available, else default add point mode
        if ((_a = this.mapNotesFeatures) === null || _a === void 0 ? void 0 : _a.length) {
            let tempPoint = [];
            let tempLine = [];
            let tempPolygon = [];
            let tempText = [];
            this.mapNotesFeatures.forEach((currGraphic) => {
                switch (getGeometryTypeFromGraphic(currGraphic)) {
                    case "polyline":
                        tempLine = [...tempLine, currGraphic];
                        break;
                    case "polygon":
                        tempPolygon = [...tempPolygon, currGraphic];
                        break;
                    case "text":
                        tempText = [...tempText, currGraphic];
                        break;
                    default:
                        tempPoint = [...tempPoint, currGraphic];
                        break;
                }
            });
            tempPoint.length && this.svModel.updatePoint(tempPoint);
            tempLine.length && this.svModel.updateLine(tempLine);
            tempPolygon.length && this.svModel.updatePolygon(tempPolygon);
            tempText.length && this.svModel.updateText(tempText);
        }
        else {
            const sketchToolsMapping = {
                point: this.sketchPointElement,
                polygon: this.sketchPolygonElement,
                polyline: this.sketchPolyLineElement,
                circle: this.sketchCircleElement,
                rectangle: this.sketchRectangleElement,
                text: this.sketchTextElement
            };
            let activeSketchElementString;
            let activeSketchElement;
            if (this.activeSketchTool) {
                activeSketchElementString = this.activeSketchTool;
                activeSketchElement = sketchToolsMapping[activeSketchElementString];
            }
            else {
                // Have next non-hidden tool be the defaulted selected tool
                let sketchTools = [
                    "point",
                    "polyline",
                    "polygon",
                    "rectangle",
                    "circle",
                    "text"
                ];
                sketchTools = sketchTools.filter((tool) => !this.sketchToolsToHide.includes(tool));
                activeSketchElementString = sketchTools.length ? sketchTools[0] : "point";
                activeSketchElement = sketchToolsMapping[activeSketchElementString];
            }
            this.actionOnDrawFeatures(activeSketchElementString, this.strings.addStamp, activeSketchElement);
        }
    }
    async reposition() {
        var _a;
        (_a = this.sketchToolsPopoverElement) === null || _a === void 0 ? void 0 : _a.reposition();
    }
    actionOnDrawFeatures(tool, sketchMessage, currentActionElement) {
        this.clearActiveSelection();
        currentActionElement.active = true;
        this.sketchActionOnDrawFeatures.emit({
            tool: tool,
            sketchMessage: sketchMessage
        });
    }
    actionOnSelectFeatures(sketchMessage, currentActionElement, multipleSelectTool) {
        const { active = false } = currentActionElement;
        this.clearActiveSelection();
        currentActionElement.active = !active;
        this.svModel.cancel();
        this.sketchActionOnSelectFeatures.emit({
            sketchMessage: !active ? sketchMessage : "",
            multipleSelectTool: (!active && multipleSelectTool) || null
        });
    }
    clearActiveSelection() {
        const sketchTools = [
            this.sketchPointElement,
            this.sketchPolyLineElement,
            this.sketchPolygonElement,
            this.sketchRectangleElement,
            this.sketchCircleElement,
            this.sketchTextElement,
            this.sketchSelectElement,
            this.sketchRectangleSelectElement,
            this.sketchLassoSelectElement
        ];
        sketchTools.forEach((sketchTool) => {
            if (sketchTool) {
                sketchTool.active = false;
            }
        });
    }
    render() {
        const drawFeatures = ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action-group", { layout: "vertical" }, !this.sketchToolsToHide.includes("point") && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { ref: (el) => (this.sketchPointElement = el), text: this.strings.stamp, label: this.strings.stamp, title: this.strings.stamp, icon: "pin", scale: "m", alignment: "center", onClick: () => {
                this.actionOnDrawFeatures("point", this.strings.addStamp, this.sketchPointElement);
            } })), !this.sketchToolsToHide.includes("polyline") && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { ref: (el) => (this.sketchPolyLineElement = el), text: this.strings.line, label: this.strings.line, title: this.strings.line, icon: "line", scale: "m", alignment: "center", onClick: () => {
                this.actionOnDrawFeatures("polyline", this.strings.startFinishDrawing, this.sketchPolyLineElement);
            } })), !this.sketchToolsToHide.includes("polygon") && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { ref: (el) => (this.sketchPolygonElement = el), text: this.strings.polygon, label: this.strings.polygon, title: this.strings.polygon, icon: "polygon", scale: "m", alignment: "center", onClick: () => {
                this.actionOnDrawFeatures("polygon", this.strings.startFinishDrawing, this.sketchPolygonElement);
            } })), !this.sketchToolsToHide.includes("rectangle") && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { ref: (el) => (this.sketchRectangleElement = el), text: this.strings.rectangle, label: this.strings.rectangle, title: this.strings.rectangle, icon: "rectangle", scale: "m", alignment: "center", onClick: () => {
                this.actionOnDrawFeatures("rectangle", this.strings.addRectangle, this.sketchRectangleElement);
            } })), !this.sketchToolsToHide.includes("circle") && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { ref: (el) => (this.sketchCircleElement = el), text: this.strings.circle, label: this.strings.circle, title: this.strings.circle, icon: "circle", scale: "m", alignment: "center", onClick: () => {
                this.actionOnDrawFeatures("circle", this.strings.addCircle, this.sketchCircleElement);
            } })), !this.sketchToolsToHide.includes("text") && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { ref: (el) => (this.sketchTextElement = el), text: this.strings.text, label: this.strings.text, title: this.strings.text, icon: "text", scale: "m", alignment: "center", onClick: async () => {
                this.actionOnDrawFeatures("text", this.strings.addText, this.sketchTextElement);
            } }))));
        const selectFeatures = ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action-group", { layout: "vertical" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { ref: (el) => (this.sketchSelectElement = el), text: this.strings.select, label: this.strings.select, title: this.strings.select, icon: "cursor", scale: "m", alignment: "center", onClick: () => {
                this.actionOnSelectFeatures(this.strings.selectText, this.sketchSelectElement);
            } }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { ref: (el) => (this.sketchRectangleSelectElement = el), text: this.strings.rectangleSelect, label: this.strings.rectangleSelect, title: this.strings.rectangleSelect, icon: "cursor-marquee", scale: "m", alignment: "center", onClick: () => {
                this.actionOnSelectFeatures(this.strings.rectangleLassoSelect, this.sketchRectangleSelectElement, "rectangle");
            } }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { ref: (el) => (this.sketchLassoSelectElement = el), text: this.strings.lassoSelect, label: this.strings.lassoSelect, title: this.strings.lassoSelect, icon: "lasso", scale: "m", alignment: "center", onClick: () => {
                this.actionOnSelectFeatures(this.strings.rectangleLassoSelect, this.sketchLassoSelectElement, "lasso");
            } })));
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.H, { class: "js-app-flyout" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-popover", { dir: (0,_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_2__.g)(this.hostElement), ref: (el) => (this.sketchToolsPopoverElement = el), placement: "leading-start", open: this.isOpen, referenceElement: this.refElement, offsetDistance: 15, pointerDisabled: true, focusTrapDisabled: true, triggerDisabled: true, label: this.strings.sketch, class: "popover", onCalcitePopoverBeforeClose: () => (this.sketchToolsPopoverElement.open = true) }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action-pad", { position: "start", layout: "vertical", expandDisabled: true }, drawFeatures, !this.hideSelectionTools && selectFeatures))));
    }
    get hostElement() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisSketchTools.style = arcgisSketchToolsCss;



//# sourceMappingURL=arcgis-sketch_5.entry.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-05956cab.js":
/*!***********************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-05956cab.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   c: () => (/* binding */ createStore)
/* harmony export */ });
/* harmony import */ var _index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-e3bf7da7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-e3bf7da7.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */


const appendToMap = (map, propName, value) => {
    const items = map.get(propName);
    if (!items) {
        map.set(propName, [value]);
    }
    else if (!items.includes(value)) {
        items.push(value);
    }
};
const debounce = (fn, ms) => {
    let timeoutId;
    return (...args) => {
        if (timeoutId) {
            clearTimeout(timeoutId);
        }
        timeoutId = setTimeout(() => {
            timeoutId = 0;
            fn(...args);
        }, ms);
    };
};

/**
 * Check if a possible element isConnected.
 * The property might not be there, so we check for it.
 *
 * We want it to return true if isConnected is not a property,
 * otherwise we would remove these elements and would not update.
 *
 * Better leak in Edge than to be useless.
 */
const isConnected = (maybeElement) => !('isConnected' in maybeElement) || maybeElement.isConnected;
const cleanupElements = debounce((map) => {
    for (let key of map.keys()) {
        map.set(key, map.get(key).filter(isConnected));
    }
}, 2000);
const stencilSubscription = () => {
    if (typeof _index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.g !== 'function') {
        // If we are not in a stencil project, we do nothing.
        // This function is not really exported by @stencil/core.
        return {};
    }
    const elmsToUpdate = new Map();
    return {
        dispose: () => elmsToUpdate.clear(),
        get: (propName) => {
            const elm = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.g)();
            if (elm) {
                appendToMap(elmsToUpdate, propName, elm);
            }
        },
        set: (propName) => {
            const elements = elmsToUpdate.get(propName);
            if (elements) {
                elmsToUpdate.set(propName, elements.filter(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f));
            }
            cleanupElements(elmsToUpdate);
        },
        reset: () => {
            elmsToUpdate.forEach((elms) => elms.forEach(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f));
            cleanupElements(elmsToUpdate);
        },
    };
};

const unwrap = (val) => (typeof val === 'function' ? val() : val);
const createObservableMap = (defaultState, shouldUpdate = (a, b) => a !== b) => {
    const unwrappedState = unwrap(defaultState);
    let states = new Map(Object.entries(unwrappedState !== null && unwrappedState !== void 0 ? unwrappedState : {}));
    const handlers = {
        dispose: [],
        get: [],
        set: [],
        reset: [],
    };
    const reset = () => {
        var _a;
        // When resetting the state, the default state may be a function - unwrap it to invoke it.
        // otherwise, the state won't be properly reset
        states = new Map(Object.entries((_a = unwrap(defaultState)) !== null && _a !== void 0 ? _a : {}));
        handlers.reset.forEach((cb) => cb());
    };
    const dispose = () => {
        // Call first dispose as resetting the state would
        // cause less updates ;)
        handlers.dispose.forEach((cb) => cb());
        reset();
    };
    const get = (propName) => {
        handlers.get.forEach((cb) => cb(propName));
        return states.get(propName);
    };
    const set = (propName, value) => {
        const oldValue = states.get(propName);
        if (shouldUpdate(value, oldValue, propName)) {
            states.set(propName, value);
            handlers.set.forEach((cb) => cb(propName, value, oldValue));
        }
    };
    const state = (typeof Proxy === 'undefined'
        ? {}
        : new Proxy(unwrappedState, {
            get(_, propName) {
                return get(propName);
            },
            ownKeys(_) {
                return Array.from(states.keys());
            },
            getOwnPropertyDescriptor() {
                return {
                    enumerable: true,
                    configurable: true,
                };
            },
            has(_, propName) {
                return states.has(propName);
            },
            set(_, propName, value) {
                set(propName, value);
                return true;
            },
        }));
    const on = (eventName, callback) => {
        handlers[eventName].push(callback);
        return () => {
            removeFromArray(handlers[eventName], callback);
        };
    };
    const onChange = (propName, cb) => {
        const unSet = on('set', (key, newValue) => {
            if (key === propName) {
                cb(newValue);
            }
        });
        // We need to unwrap the defaultState because it might be a function.
        // Otherwise we might not be sending the right reset value.
        const unReset = on('reset', () => cb(unwrap(defaultState)[propName]));
        return () => {
            unSet();
            unReset();
        };
    };
    const use = (...subscriptions) => {
        const unsubs = subscriptions.reduce((unsubs, subscription) => {
            if (subscription.set) {
                unsubs.push(on('set', subscription.set));
            }
            if (subscription.get) {
                unsubs.push(on('get', subscription.get));
            }
            if (subscription.reset) {
                unsubs.push(on('reset', subscription.reset));
            }
            if (subscription.dispose) {
                unsubs.push(on('dispose', subscription.dispose));
            }
            return unsubs;
        }, []);
        return () => unsubs.forEach((unsub) => unsub());
    };
    const forceUpdate = (key) => {
        const oldValue = states.get(key);
        handlers.set.forEach((cb) => cb(key, oldValue, oldValue));
    };
    return {
        state,
        get,
        set,
        on,
        onChange,
        use,
        dispose,
        reset,
        forceUpdate,
    };
};
const removeFromArray = (array, item) => {
    const index = array.indexOf(item);
    if (index >= 0) {
        array[index] = array[array.length - 1];
        array.length--;
    }
};

const createStore = (defaultState, shouldUpdate) => {
    const map = createObservableMap(defaultState, shouldUpdate);
    map.use(stencilSubscription());
    return map;
};



//# sourceMappingURL=index-05956cab.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/storage-0353a769.js":
/*!*************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/storage-0353a769.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ setSessionStorageItem),
/* harmony export */   b: () => (/* binding */ getSessionStorageItem),
/* harmony export */   c: () => (/* binding */ getCookie),
/* harmony export */   d: () => (/* binding */ setCookie),
/* harmony export */   g: () => (/* binding */ getLocalStorageItem),
/* harmony export */   s: () => (/* binding */ setLocalStorageItem)
/* harmony export */ });
/* harmony import */ var _functional_44de8fcf_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./functional-44de8fcf.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-44de8fcf.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */


// import stringUtil from "./strings";
/**
 * Utility methods for dealing with storage of various forms (cookies, local storage, and session storage).
 */
function setCookie(name, cookie, properties, stringify) {
    writeCookie(name, stringify ? JSON.stringify(cookie) : cookie, properties);
}
function getCookie(name, parse) {
    const cookie = readCookie(name);
    return cookie && parse ? JSON.parse(cookie) : cookie;
}
function setLocalStorageItem(name, item, stringify) {
    window.localStorage.setItem(name, stringify ? JSON.stringify(item) : item);
}
function getLocalStorageItem(name, parse) {
    const item = window.localStorage.getItem(name);
    return item && parse ? JSON.parse(item) : item;
}
function setSessionStorageItem(name, item, stringify) {
    window.sessionStorage.setItem(name, stringify ? JSON.stringify(item) : item);
}
function getSessionStorageItem(name, parse) {
    const item = window.sessionStorage.getItem(name);
    return item && parse ? JSON.parse(item) : item;
}
function readCookie(name) {
    const cookie = document.cookie;
    const cookieNameRE = new RegExp(`(?:^|; )${(0,_functional_44de8fcf_js__WEBPACK_IMPORTED_MODULE_0__.e)(name)}=([^;]*)`);
    const matchedCookies = cookie.match(cookieNameRE);
    return matchedCookies ? decodeURIComponent(matchedCookies[1]) : undefined;
}
function writeCookie(name, value, properties) {
    properties = properties || {};
    let expires = properties === null || properties === void 0 ? void 0 : properties.expires;
    if (typeof expires === "number") {
        const expirationDate = new Date();
        const daysFromTodayInMs = expires * 24 * 60 * 60 * 1000;
        expirationDate.setTime(Date.now() + daysFromTodayInMs);
        expires = properties.expires = expirationDate;
    }
    if (typeof expires !== "string" && (expires === null || expires === void 0 ? void 0 : expires.toUTCString)) {
        properties.expires = expires.toUTCString();
    }
    let cookie = `${name}=${encodeURIComponent(value)}`;
    let property;
    for (property in properties) {
        cookie += `; ${property}`;
        const propertyValue = properties[property];
        if (propertyValue !== true) {
            cookie += `=${propertyValue}`;
        }
    }
    document.cookie = cookie;
}



//# sourceMappingURL=storage-0353a769.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,