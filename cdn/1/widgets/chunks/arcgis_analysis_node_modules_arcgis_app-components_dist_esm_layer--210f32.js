"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_layer--210f32"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-44de8fcf.js":
/*!****************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-44de8fcf.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ arrayToLookupMap),
/* harmony export */   b: () => (/* binding */ unique),
/* harmony export */   c: () => (/* binding */ throttle),
/* harmony export */   d: () => (/* binding */ debounce),
/* harmony export */   e: () => (/* binding */ escapeRegExp),
/* harmony export */   f: () => (/* binding */ arraysAreEquivalent),
/* harmony export */   g: () => (/* binding */ chunk),
/* harmony export */   i: () => (/* binding */ isDefined),
/* harmony export */   m: () => (/* binding */ minDelay),
/* harmony export */   t: () => (/* binding */ timeout),
/* harmony export */   u: () => (/* binding */ uniqueBy)
/* harmony export */ });
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */
/**
 * Call a function only after it has not been called for n milliseconds
 * @param fn    - function to call
 * @param delay - delay in milliseconds
 */
const debounce = (fn, delay) => {
    let timeout;
    let status = "idle";
    function flush(...args) {
        status = "flushed";
        return debounced(...args);
    }
    function invoke(...args) {
        status = "invoked";
        return debounced(...args);
    }
    function cancel(...args) {
        status = "cancelled";
        return debounced(...args);
    }
    function getStatus() {
        return status;
    }
    const debounced = (...args) => new Promise((resolve) => {
        switch (status) {
            case "flushed":
                status = "idle";
                if (timeout) {
                    clearTimeout(timeout);
                    resolve(fn(...args));
                }
                else {
                    resolve(null);
                }
                break;
            case "invoked":
                clearTimeout(timeout);
                status = "idle";
                resolve(fn(...args));
                break;
            case "cancelled":
                clearTimeout(timeout);
                status = "idle";
                resolve(null);
                break;
            default:
                if (timeout) {
                    clearTimeout(timeout);
                }
                status = "pending";
                timeout = setTimeout(() => {
                    status = "idle";
                    return resolve(fn(...args));
                }, delay);
                break;
        }
    });
    debounced.flush = flush;
    debounced.invoke = invoke;
    debounced.cancel = cancel;
    debounced.getStatus = getStatus;
    return debounced;
};
/**
 * Call a function only after n milliseconds have elapsed
 * @param fn    - function to call
 * @param delay - delay in milliseconds
 */
const throttle = (fn, delay) => {
    let timeout;
    return (...args) => new Promise((resolve) => {
        if (timeout) {
            return;
        }
        timeout = setTimeout(() => {
            clearTimeout(timeout);
            timeout = undefined;
            resolve(fn(...args));
        }, delay);
    });
};
function escapeRegExp(str) {
    return str.replace(/[.*+?^${}()|[\]\\]/g, "\\$&"); // $& means the whole matched string
}
function isDefined(value) {
    return value !== undefined && value !== null;
}
/**
 * Set a minimum time for a promise to resolve (useful for preventing flash of loaders)
 */
async function minDelay(promise, minDelay) {
    await Promise.all([promise, timeout(minDelay)]);
    return promise;
}
/**
 * Helper method to inline setTimeout as an await in async functions
 */
function timeout(ms) {
    return new Promise((resolve) => setTimeout(resolve, ms));
}
const arrayToLookupMap = (dataArr, getKeyAndItem) => Object.fromEntries((dataArr || []).map((item) => {
    const { key, data } = getKeyAndItem(item);
    return [key, data];
}));
/**
 * Check whether two arrays have the same number of elements
 * and whether they contain the same elements
 * regardless of order
 */
const arraysAreEquivalent = (arr1, arr2) => arr1.length === arr2.length && arr1.reduce((memo, str) => memo && arr2.indexOf(str) > -1, true);
function uniqueBy(myArr, getItemId) {
    const resultArr = [];
    const lookupMap = {};
    myArr.forEach((item) => {
        const id = getItemId(item);
        if (lookupMap[id] == null) {
            lookupMap[id] = item;
            resultArr.push(item);
        }
    });
    return resultArr;
}
function unique(myArr) {
    const primitives = { boolean: {}, number: {}, string: {} };
    const objs = [];
    return myArr.filter((item) => {
        let type = typeof item;
        if (type in primitives) {
            return primitives[type].hasOwnProperty(item) ? false : (primitives[type][item] = true);
        }
        else {
            return objs.indexOf(item) >= 0 ? false : objs.push(item);
        }
    });
}
const chunk = (arr, size) => [...Array(Math.ceil(arr.length / size))].map((_, i) => arr.slice(size * i, size + size * i));



//# sourceMappingURL=functional-44de8fcf.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/layer-9a7593aa.js":
/*!***********************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/layer-9a7593aa.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   A: () => (/* binding */ AOI),
/* harmony export */   N: () => (/* binding */ NavigationTab),
/* harmony export */   a: () => (/* binding */ getImageItemCount),
/* harmony export */   b: () => (/* binding */ buildLayerQuery),
/* harmony export */   c: () => (/* binding */ getFilteredImageItems),
/* harmony export */   d: () => (/* binding */ getDefaultImageItemCardDisplayedFields),
/* harmony export */   e: () => (/* binding */ getMinAndMaxValuesForLayerField),
/* harmony export */   f: () => (/* binding */ getUniqueValuesForLayerField),
/* harmony export */   g: () => (/* binding */ getFilteredVisibleImageItems),
/* harmony export */   h: () => (/* binding */ getSupportedLayerFields),
/* harmony export */   i: () => (/* binding */ isAbortedError),
/* harmony export */   j: () => (/* binding */ getDefaultSelectedLayerField),
/* harmony export */   k: () => (/* binding */ isNumericFieldType),
/* harmony export */   l: () => (/* binding */ getFormattedDateString),
/* harmony export */   m: () => (/* binding */ getImageItemGeometry)
/* harmony export */ });
/* harmony import */ var _loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./loadModules-b4ac1247.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-b4ac1247.js");
/* harmony import */ var _functional_44de8fcf_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./functional-44de8fcf.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-44de8fcf.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */



var NavigationTab;
(function (NavigationTab) {
    NavigationTab["Inspect"] = "inspect";
    NavigationTab["Select"] = "select";
})(NavigationTab || (NavigationTab = {}));
var AOI;
(function (AOI) {
    AOI["Visible"] = "visible";
    AOI["DisplayExtent"] = "displayExtent";
    AOI["All"] = "all";
})(AOI || (AOI = {}));
/**
 * check if the error is abort error.
 *
 * @param error
 */
function isAbortedError(error) {
    return (error === null || error === void 0 ? void 0 : error.name) === "AbortError";
}
/**
 * check if field type is numeric type.
 *
 * @param fieldType
 */
function isNumericFieldType(fieldType) {
    const numericFieldTypes = ["small-integer", "big-integer", "integer", "single", "double", "oid"];
    return numericFieldTypes.includes(fieldType);
}
/**
 * get formatted date string from a timestamp.
 *
 * @param unixTimestamp timestamp
 * @returns date string in the format of "yyyy-mm-dd hh:mm:ss"
 */
function getFormattedDateString(unixTimestamp) {
    const dateObj = new Date(unixTimestamp);
    return `${dateObj.getFullYear()}-${padString((dateObj.getMonth() + 1).toString(), 2, "0")}-${padString(dateObj.getDate().toString(), 2, "0")} ${padString(dateObj.getHours().toString(), 2, "0")}:${padString(dateObj.getMinutes().toString(), 2, "0")}:${padString(dateObj.getSeconds().toString(), 2, "0")}`;
}
function padString(str, targetLength, padString) {
    padString = padString || " ";
    while (str.length < targetLength) {
        str = padString + str;
    }
    return str;
}

/**
 * get the default selected layer field for a given layer
 *
 * @param layerFields - layer's fields
 * @returns __esri.Field - default selected layer field
 *
 */
function getDefaultSelectedLayerField(layerFields) {
    const bestField = layerFields.find((field) => field.name.toLowerCase() === "best");
    if (bestField) {
        return bestField;
    }
    const acquisitionDateField = layerFields.find((field) => field.name.toLowerCase() === "acquisitiondate");
    if (acquisitionDateField) {
        return acquisitionDateField;
    }
    const dateTypeField = layerFields.find((field) => field.name.toLowerCase() === "date");
    if (dateTypeField) {
        return dateTypeField;
    }
    const intOrDoubleTypeField = layerFields.find((field) => field.type === "double" || field.type === "integer");
    return intOrDoubleTypeField;
}
/**
 * get the image item count that match the query condition
 *
 * @param layer - imagery layer
 * @param query - layer query
 * @returns number - raster item count
 *
 */
async function getImageItemCount(layer, query) {
    let count;
    try {
        count = await layer.queryRasterCount(query);
    }
    catch (err) {
        console.log(err);
        //
    }
    return Number.isInteger(count) ? count : null;
}
/**
 * get image items that match the query condition
 *
 * @param layer - imagery layer
 * @param query - query
 * @returns __esri.FeatureSet - raster items
 *
 */
async function getFilteredImageItems(layer, query) {
    query.outFields = ["*"];
    query.returnGeometry = true;
    const res = await layer.queryRasters(query);
    return Array.isArray(res === null || res === void 0 ? void 0 : res.features) ? res : null;
}
/**
 * get the geometry of image item
 *
 * @param layer - imagery layer
 * @param imageItemObjectID - image item object id
 * @returns __esri.Geometry - image item geometry
 *
 */
async function getImageItemGeometry(layer, imageItemObjectID) {
    var _a;
    const query = layer.createQuery();
    query.where = `${layer.objectIdField} = ${imageItemObjectID}`;
    query.returnGeometry = true;
    let res;
    try {
        res = await layer.queryRasters(query);
    }
    catch (err) {
        console.log(err);
        //
    }
    return ((_a = res === null || res === void 0 ? void 0 : res.features) === null || _a === void 0 ? void 0 : _a[0].geometry) || null;
}
/**
 * get default displayed fields for image item cards
 *
 * @param layer - imagery layer
 * @param selectedQueryField - current selected query field
 * @returns __esri.Field[] - default displayed fields
 *
 */
function getDefaultImageItemCardDisplayedFields(layer, selectedQueryField) {
    const layerFields = layer.fields;
    const layerObjectIdFieldName = layer.objectIdField;
    let defaultField = layerFields.find((field) => field.name.toLowerCase() === "name");
    if (!defaultField) {
        defaultField = layerFields.find((field) => field.name === layerObjectIdFieldName);
    }
    if (defaultField && defaultField.name !== selectedQueryField.name) {
        return [defaultField, selectedQueryField];
    }
    return [selectedQueryField];
}
/**
 * get supported layer fields based on field type for display and selection
 *
 * @param layerFields - imagery layer
 * @returns __esri.Field[] - supported fields
 *
 */
function getSupportedLayerFields(layerFields) {
    const supportedFieldTypes = ["small-integer", "big-integer", "integer", "single", "double", "date", "oid", "string"];
    return Array.isArray(layerFields) ? layerFields.filter((field) => supportedFieldTypes.includes(field.type)) : [];
}
/**
 * build layer query
 *
 * @param layerFields - imagery layer
 * @param queryField  - query field
 * @param queryValue - query value
 * @param selectedAOI - selected area of interest
 * @param isOverviewsIncluded - is Overviews included
 * @param mapExtent - map extent
 * @returns __esri.Query - layer query
 *
 */
function buildLayerQuery(layer, queryField, queryValues, selectedAOI, isOverviewsIncluded, mapExtent) {
    const query = layer.createQuery();
    if ((queryValues === null || queryValues === void 0 ? void 0 : queryValues.length) > 0) {
        let queryValueWhereClause = "";
        if (queryField.type === "date") {
            if (queryValues.length === 1) {
                const startDate = new Date(queryValues[0]);
                const endDateTimestamp = startDate.setSeconds(startDate.getSeconds() + 1);
                queryValueWhereClause = queryValueWhereClause = `${queryField.name} BETWEEN timestamp '${getFormattedDateString(queryValues[0])}' AND timestamp '${getFormattedDateString(endDateTimestamp)}'`;
            }
            if (queryValues.length === 2) {
                queryValueWhereClause = `${queryField.name} BETWEEN timestamp '${getFormattedDateString(queryValues[0])}' AND timestamp '${getFormattedDateString(queryValues[1])}'`;
            }
        }
        else {
            if (queryValues.length === 1) {
                queryValueWhereClause =
                    typeof queryValues[0] === "string"
                        ? `${queryField.name}='${queryValues[0]}'`
                        : `${queryField.name}=${queryValues[0]}`;
            }
            if (queryValues.length === 2) {
                queryValueWhereClause =
                    typeof queryValues[0] === "string"
                        ? `${queryField.name} BETWEEN '${queryValues[0]}' AND '${queryValues[1]}'`
                        : `${queryField.name} BETWEEN ${queryValues[0]} AND ${queryValues[1]}`;
            }
        }
        query.where = queryValueWhereClause;
    }
    const queryOverviewWhereClause = "(Category <> 2)";
    if (!isOverviewsIncluded) {
        const newWhereClause = queryOverviewWhereClause + (query.where ? " AND " + query.where : "");
        query.where = newWhereClause;
    }
    else {
        query.where = query.where.replace(queryOverviewWhereClause, "");
    }
    query.geometry = selectedAOI === AOI.DisplayExtent ? mapExtent : null;
    query.spatialRelationship = selectedAOI === AOI.DisplayExtent ? "intersects" : null;
    return query;
}
/**
 * get unique value for an attribute field in the imagery layer
 *
 * @param layer - imagery layer
 * @param queryFieldName - query field name
 * @param selectedAOI - selected AOI
 * @param mapExtent - map extent
 * @param abortSignal - abort signal
 * @param isFetchingAll - whether is fetching all results
 * @returns Array<string | number> - unique value array
 */
async function getUniqueValuesForLayerField(layer, queryField, selectedAOI, mapExtent, abortSignal, isFetchingAll = false) {
    var _a, _b;
    if (!queryField)
        return [];
    const query = layer.createQuery();
    query.where = "1=1";
    const isConstrainedByMapExtent = selectedAOI === AOI.DisplayExtent || selectedAOI === AOI.Visible;
    query.geometry = isConstrainedByMapExtent ? mapExtent : null;
    query.spatialRelationship = isConstrainedByMapExtent ? "intersects" : null;
    query.outFields = [queryField];
    query.orderByFields = [`${queryField} ASC`];
    query.returnExceededLimitFeatures = true;
    query.returnGeometry = false;
    const resultValues = [];
    if (isFetchingAll) {
        let hasMore = true;
        while (hasMore) {
            const res = await layer.queryRasters(query, { signal: abortSignal });
            hasMore = res === null || res === void 0 ? void 0 : res.exceededTransferLimit;
            if (((_a = res.features) === null || _a === void 0 ? void 0 : _a.length) > 0) {
                const valuesToAdd = (0,_functional_44de8fcf_js__WEBPACK_IMPORTED_MODULE_1__.b)(res.features.map((feature) => feature.attributes[queryField]));
                resultValues.push(...valuesToAdd);
            }
        }
        return resultValues;
    }
    const res = await layer.queryRasters(query, { signal: abortSignal });
    if (((_b = res === null || res === void 0 ? void 0 : res.features) === null || _b === void 0 ? void 0 : _b.length) > 0) {
        const valuesToAdd = (0,_functional_44de8fcf_js__WEBPACK_IMPORTED_MODULE_1__.b)(res.features.map((feature) => feature.attributes[queryField]));
        return valuesToAdd;
    }
    return [];
}
/**
 * get min/max value for an attribute field in the imagery layer
 *
 * @param layer - imagery layer
 * @param queryFieldName - query field name
 * @param selectedAOI - selected AOI
 * @param mapExtent - map extent
 * @param abortSignal - abort signal
 * @returns Array<string | number> - min/max value array [min, max]
 */
async function getMinAndMaxValuesForLayerField(layer, queryFieldName, selectedAOI, mapExtent, abortSignal) {
    var _a;
    if (!queryFieldName)
        return [];
    const query = layer.createQuery();
    query.where = "1=1";
    const isConstrainedByMapExtent = selectedAOI === AOI.DisplayExtent || selectedAOI === AOI.Visible;
    query.geometry = isConstrainedByMapExtent ? mapExtent : null;
    query.spatialRelationship = isConstrainedByMapExtent ? "intersects" : null;
    query.returnGeometry = false;
    query.outStatistics = [
        {
            statisticType: "min",
            onStatisticField: queryFieldName,
            outStatisticFieldName: "MIN_FIELD_VALUE"
        },
        {
            statisticType: "max",
            onStatisticField: queryFieldName,
            outStatisticFieldName: "MAX_FIELD_VALUE"
        }
    ];
    const res = await layer.queryRasters(query, { signal: abortSignal });
    if (((_a = res === null || res === void 0 ? void 0 : res.features) === null || _a === void 0 ? void 0 : _a.length) > 0) {
        const [feature] = res.features;
        return [feature.attributes["MIN_FIELD_VALUE"], feature.attributes["MAX_FIELD_VALUE"]];
    }
    return [];
}
/**
 * generate the parameters for imagery layer identify function
 *
 * @param layer - imagery layer
 * @param mapView - current map view
 * @returns __esri.ImageIdentifyParameters
 */
async function generateIdentifyParams(layer, mapView) {
    const [Polygon, Point, ImageIdentifyParameters] = await (0,_loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_0__.l)([
        "esri/geometry/Polygon",
        "esri/geometry/Point",
        "esri/rest/support/ImageIdentifyParameters"
    ]);
    const { extent, width, height } = mapView;
    const polygon = new Polygon(extent.spatialReference);
    polygon.addRing([
        [extent.xmin, extent.ymin],
        [extent.xmin, extent.ymax],
        [extent.xmax, extent.ymax],
        [extent.xmax, extent.ymin],
        [extent.xmin, extent.ymin]
    ]);
    const psX = (extent.xmax - extent.xmin) / width;
    const psY = (extent.ymax - extent.ymin) / height;
    const pixelSize = new Point(psX, psY, extent.spatialReference);
    const identifyParams = new ImageIdentifyParameters();
    identifyParams.geometry = polygon;
    identifyParams.returnGeometry = false;
    identifyParams.pixelSize = pixelSize;
    const mosaicRule = layer.mosaicRule.clone();
    if (layer.definitionExpression) {
        mosaicRule.where = layer.definitionExpression;
    }
    identifyParams.mosaicRule = mosaicRule;
    return identifyParams;
}
/**
 * get visible image items that match the query condition
 *
 * @param layer - imagery layer
 * @param mapView - current map view
 * @param layerQuery - current map view
 * @returns __esri.FeatureSet - raster items
 */
async function getFilteredVisibleImageItems(layer, mapView, layerQuery) {
    var _a;
    let visibleImageItemObjectIds = [];
    const identifyParams = await generateIdentifyParams(layer, mapView);
    if (layer.visible) {
        const identifyResult = await layer.identify(identifyParams);
        if (!((_a = identifyResult === null || identifyResult === void 0 ? void 0 : identifyResult.catalogItems) === null || _a === void 0 ? void 0 : _a.features) || !(identifyResult === null || identifyResult === void 0 ? void 0 : identifyResult.catalogItemVisibilities))
            return null;
        const objectIdFieldName = layer.objectIdField;
        for (let i = 0; i < identifyResult.catalogItems.features.length; i++) {
            if (identifyResult.catalogItemVisibilities[i] > 0) {
                visibleImageItemObjectIds.push(identifyResult.catalogItems.features[i].attributes[objectIdFieldName]);
            }
        }
        if (visibleImageItemObjectIds.length === 0)
            return null;
        const objectIdQueryString = `${layer.objectIdField} in (${visibleImageItemObjectIds
            .map((oid) => `${oid}`)
            .join(",")})`;
        layerQuery.where = `${layerQuery.where} AND ${objectIdQueryString}`;
        layerQuery.outFields = ["*"];
        layerQuery.returnGeometry = true;
        const res = await layer.queryRasters(layerQuery);
        return Array.isArray(res === null || res === void 0 ? void 0 : res.features) ? res : null;
    }
}



//# sourceMappingURL=layer-9a7593aa.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,