System.register(["jimu-core","jimu-core/data-source","jimu-layouts/layout-runtime","jimu-theme","jimu-ui","jimu-ui/basic/item-selector"], function(__WEBPACK_DYNAMIC_EXPORT__, __system_context__) {
	var __WEBPACK_EXTERNAL_MODULE_jimu_core__ = {};
	var __WEBPACK_EXTERNAL_MODULE_jimu_core_data_source__ = {};
	var __WEBPACK_EXTERNAL_MODULE_jimu_layouts_layout_runtime__ = {};
	var __WEBPACK_EXTERNAL_MODULE_jimu_theme__ = {};
	var __WEBPACK_EXTERNAL_MODULE_jimu_ui__ = {};
	var __WEBPACK_EXTERNAL_MODULE_jimu_ui_basic_item_selector__ = {};
	Object.defineProperty(__WEBPACK_EXTERNAL_MODULE_jimu_core__, "__esModule", { value: true });
	Object.defineProperty(__WEBPACK_EXTERNAL_MODULE_jimu_core_data_source__, "__esModule", { value: true });
	Object.defineProperty(__WEBPACK_EXTERNAL_MODULE_jimu_layouts_layout_runtime__, "__esModule", { value: true });
	Object.defineProperty(__WEBPACK_EXTERNAL_MODULE_jimu_theme__, "__esModule", { value: true });
	Object.defineProperty(__WEBPACK_EXTERNAL_MODULE_jimu_ui__, "__esModule", { value: true });
	Object.defineProperty(__WEBPACK_EXTERNAL_MODULE_jimu_ui_basic_item_selector__, "__esModule", { value: true });
	return {
		setters: [
			function(module) {
				Object.keys(module).forEach(function(key) {
					__WEBPACK_EXTERNAL_MODULE_jimu_core__[key] = module[key];
				});
			},
			function(module) {
				Object.keys(module).forEach(function(key) {
					__WEBPACK_EXTERNAL_MODULE_jimu_core_data_source__[key] = module[key];
				});
			},
			function(module) {
				Object.keys(module).forEach(function(key) {
					__WEBPACK_EXTERNAL_MODULE_jimu_layouts_layout_runtime__[key] = module[key];
				});
			},
			function(module) {
				Object.keys(module).forEach(function(key) {
					__WEBPACK_EXTERNAL_MODULE_jimu_theme__[key] = module[key];
				});
			},
			function(module) {
				Object.keys(module).forEach(function(key) {
					__WEBPACK_EXTERNAL_MODULE_jimu_ui__[key] = module[key];
				});
			},
			function(module) {
				Object.keys(module).forEach(function(key) {
					__WEBPACK_EXTERNAL_MODULE_jimu_ui_basic_item_selector__[key] = module[key];
				});
			}
		],
		execute: function() {
			__WEBPACK_DYNAMIC_EXPORT__(
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/@esri/arcgis-rest-request/dist/esm/request.js":
/*!********************************************************************!*\
  !*** ./node_modules/@esri/arcgis-rest-request/dist/esm/request.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ArcGISAuthError: () => (/* binding */ ArcGISAuthError),
/* harmony export */   NODEJS_DEFAULT_REFERER_HEADER: () => (/* binding */ NODEJS_DEFAULT_REFERER_HEADER),
/* harmony export */   checkForErrors: () => (/* binding */ checkForErrors),
/* harmony export */   request: () => (/* binding */ request),
/* harmony export */   setDefaultRequestOptions: () => (/* binding */ setDefaultRequestOptions)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ "./node_modules/@esri/arcgis-rest-request/node_modules/tslib/tslib.es6.js");
/* harmony import */ var _utils_encode_form_data__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils/encode-form-data */ "./node_modules/@esri/arcgis-rest-request/dist/esm/utils/encode-form-data.js");
/* harmony import */ var _utils_encode_query_string__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils/encode-query-string */ "./node_modules/@esri/arcgis-rest-request/dist/esm/utils/encode-query-string.js");
/* harmony import */ var _utils_process_params__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils/process-params */ "./node_modules/@esri/arcgis-rest-request/dist/esm/utils/process-params.js");
/* harmony import */ var _utils_ArcGISRequestError__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/ArcGISRequestError */ "./node_modules/@esri/arcgis-rest-request/dist/esm/utils/ArcGISRequestError.js");
/* harmony import */ var _utils_warn__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/warn */ "./node_modules/@esri/arcgis-rest-request/dist/esm/utils/warn.js");
/* Copyright (c) 2017-2018 Environmental Systems Research Institute, Inc.
 * Apache-2.0 */






var NODEJS_DEFAULT_REFERER_HEADER = "@esri/arcgis-rest-js";
var DEFAULT_ARCGIS_REQUEST_OPTIONS = {
    httpMethod: "POST",
    params: {
        f: "json",
    },
};
/**
 * Sets the default options that will be passed in **all requests across all `@esri/arcgis-rest-js` modules**.
 *
 *
 * ```js
 * import { setDefaultRequestOptions } from "@esri/arcgis-rest-request";
 * setDefaultRequestOptions({
 *   authentication: userSession // all requests will use this session by default
 * })
 * ```
 * You should **never** set a default `authentication` when you are in a server side environment where you may be handling requests for many different authenticated users.
 *
 * @param options The default options to pass with every request. Existing default will be overwritten.
 * @param hideWarnings Silence warnings about setting default `authentication` in shared environments.
 */
function setDefaultRequestOptions(options, hideWarnings) {
    if (options.authentication && !hideWarnings) {
        (0,_utils_warn__WEBPACK_IMPORTED_MODULE_0__.warn)("You should not set `authentication` as a default in a shared environment such as a web server which will process multiple users requests. You can call `setDefaultRequestOptions` with `true` as a second argument to disable this warning.");
    }
    DEFAULT_ARCGIS_REQUEST_OPTIONS = options;
}
var ArcGISAuthError = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__extends)(ArcGISAuthError, _super);
    /**
     * Create a new `ArcGISAuthError`  object.
     *
     * @param message - The error message from the API
     * @param code - The error code from the API
     * @param response - The original response from the API that caused the error
     * @param url - The original url of the request
     * @param options - The original options of the request
     */
    function ArcGISAuthError(message, code, response, url, options) {
        if (message === void 0) { message = "AUTHENTICATION_ERROR"; }
        if (code === void 0) { code = "AUTHENTICATION_ERROR_CODE"; }
        var _this = _super.call(this, message, code, response, url, options) || this;
        _this.name = "ArcGISAuthError";
        _this.message =
            code === "AUTHENTICATION_ERROR_CODE" ? message : code + ": " + message;
        return _this;
    }
    ArcGISAuthError.prototype.retry = function (getSession, retryLimit) {
        var _this = this;
        if (retryLimit === void 0) { retryLimit = 3; }
        var tries = 0;
        var retryRequest = function (resolve, reject) {
            getSession(_this.url, _this.options)
                .then(function (session) {
                var newOptions = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, _this.options), { authentication: session });
                tries = tries + 1;
                return request(_this.url, newOptions);
            })
                .then(function (response) {
                resolve(response);
            })
                .catch(function (e) {
                if (e.name === "ArcGISAuthError" && tries < retryLimit) {
                    retryRequest(resolve, reject);
                }
                else if (e.name === "ArcGISAuthError" && tries >= retryLimit) {
                    reject(_this);
                }
                else {
                    reject(e);
                }
            });
        };
        return new Promise(function (resolve, reject) {
            retryRequest(resolve, reject);
        });
    };
    return ArcGISAuthError;
}(_utils_ArcGISRequestError__WEBPACK_IMPORTED_MODULE_2__.ArcGISRequestError));

/**
 * Checks for errors in a JSON response from the ArcGIS REST API. If there are no errors, it will return the `data` passed in. If there is an error, it will throw an `ArcGISRequestError` or `ArcGISAuthError`.
 *
 * @param data The response JSON to check for errors.
 * @param url The url of the original request
 * @param params The parameters of the original request
 * @param options The options of the original request
 * @returns The data that was passed in the `data` parameter
 */
function checkForErrors(response, url, params, options, originalAuthError) {
    // this is an error message from billing.arcgis.com backend
    if (response.code >= 400) {
        var message = response.message, code = response.code;
        throw new _utils_ArcGISRequestError__WEBPACK_IMPORTED_MODULE_2__.ArcGISRequestError(message, code, response, url, options);
    }
    // error from ArcGIS Online or an ArcGIS Portal or server instance.
    if (response.error) {
        var _a = response.error, message = _a.message, code = _a.code, messageCode = _a.messageCode;
        var errorCode = messageCode || code || "UNKNOWN_ERROR_CODE";
        if (code === 498 ||
            code === 499 ||
            messageCode === "GWM_0003" ||
            (code === 400 && message === "Unable to generate token.")) {
            if (originalAuthError) {
                throw originalAuthError;
            }
            else {
                throw new ArcGISAuthError(message, errorCode, response, url, options);
            }
        }
        throw new _utils_ArcGISRequestError__WEBPACK_IMPORTED_MODULE_2__.ArcGISRequestError(message, errorCode, response, url, options);
    }
    // error from a status check
    if (response.status === "failed" || response.status === "failure") {
        var message = void 0;
        var code = "UNKNOWN_ERROR_CODE";
        try {
            message = JSON.parse(response.statusMessage).message;
            code = JSON.parse(response.statusMessage).code;
        }
        catch (e) {
            message = response.statusMessage || response.message;
        }
        throw new _utils_ArcGISRequestError__WEBPACK_IMPORTED_MODULE_2__.ArcGISRequestError(message, code, response, url, options);
    }
    return response;
}
/**
 * ```js
 * import { request } from '@esri/arcgis-rest-request';
 * //
 * request('https://www.arcgis.com/sharing/rest')
 *   .then(response) // response.currentVersion === 5.2
 * //
 * request('https://www.arcgis.com/sharing/rest', {
 *   httpMethod: "GET"
 * })
 * //
 * request('https://www.arcgis.com/sharing/rest/search', {
 *   params: { q: 'parks' }
 * })
 *   .then(response) // response.total => 78379
 * ```
 * Generic method for making HTTP requests to ArcGIS REST API endpoints.
 *
 * @param url - The URL of the ArcGIS REST API endpoint.
 * @param requestOptions - Options for the request, including parameters relevant to the endpoint.
 * @returns A Promise that will resolve with the data from the response.
 */
function request(url, requestOptions) {
    if (requestOptions === void 0) { requestOptions = { params: { f: "json" } }; }
    var options = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({ httpMethod: "POST" }, DEFAULT_ARCGIS_REQUEST_OPTIONS), requestOptions), {
        params: (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, DEFAULT_ARCGIS_REQUEST_OPTIONS.params), requestOptions.params),
        headers: (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, DEFAULT_ARCGIS_REQUEST_OPTIONS.headers), requestOptions.headers),
    });
    var missingGlobals = [];
    var recommendedPackages = [];
    // don't check for a global fetch if a custom implementation was passed through
    if (!options.fetch && typeof fetch !== "undefined") {
        options.fetch = fetch.bind(Function("return this")());
    }
    else {
        missingGlobals.push("`fetch`");
        recommendedPackages.push("`node-fetch`");
    }
    if (typeof Promise === "undefined") {
        missingGlobals.push("`Promise`");
        recommendedPackages.push("`es6-promise`");
    }
    if (typeof FormData === "undefined") {
        missingGlobals.push("`FormData`");
        recommendedPackages.push("`isomorphic-form-data`");
    }
    if (!options.fetch ||
        typeof Promise === "undefined" ||
        typeof FormData === "undefined") {
        throw new Error("`arcgis-rest-request` requires a `fetch` implementation and global variables for `Promise` and `FormData` to be present in the global scope. You are missing " + missingGlobals.join(", ") + ". We recommend installing the " + recommendedPackages.join(", ") + " modules at the root of your application to add these to the global scope. See https://bit.ly/2KNwWaJ for more info.");
    }
    var httpMethod = options.httpMethod, authentication = options.authentication, rawResponse = options.rawResponse;
    var params = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({ f: "json" }, options.params);
    var originalAuthError = null;
    var fetchOptions = {
        method: httpMethod,
        /* ensures behavior mimics XMLHttpRequest.
        needed to support sending IWA cookies */
        credentials: options.credentials || "same-origin",
    };
    // the /oauth2/platformSelf route will add X-Esri-Auth-Client-Id header
    // and that request needs to send cookies cross domain
    // so we need to set the credentials to "include"
    if (options.headers &&
        options.headers["X-Esri-Auth-Client-Id"] &&
        url.indexOf("/oauth2/platformSelf") > -1) {
        fetchOptions.credentials = "include";
    }
    return (authentication
        ? authentication.getToken(url, { fetch: options.fetch }).catch(function (err) {
            /**
             * append original request url and requestOptions
             * to the error thrown by getToken()
             * to assist with retrying
             */
            err.url = url;
            err.options = options;
            /**
             * if an attempt is made to talk to an unfederated server
             * first try the request anonymously. if a 'token required'
             * error is thrown, throw the UNFEDERATED error then.
             */
            originalAuthError = err;
            return Promise.resolve("");
        })
        : Promise.resolve(""))
        .then(function (token) {
        if (token.length) {
            params.token = token;
        }
        if (authentication && authentication.getDomainCredentials) {
            fetchOptions.credentials = authentication.getDomainCredentials(url);
        }
        // Custom headers to add to request. IRequestOptions.headers with merge over requestHeaders.
        var requestHeaders = {};
        if (fetchOptions.method === "GET") {
            // Prevents token from being passed in query params when hideToken option is used.
            /* istanbul ignore if - window is always defined in a browser. Test case is covered by Jasmine in node test */
            if (params.token &&
                options.hideToken &&
                // Sharing API does not support preflight check required by modern browsers https://developer.mozilla.org/en-US/docs/Glossary/Preflight_request
                typeof window === "undefined") {
                requestHeaders["X-Esri-Authorization"] = "Bearer " + params.token;
                delete params.token;
            }
            // encode the parameters into the query string
            var queryParams = (0,_utils_encode_query_string__WEBPACK_IMPORTED_MODULE_3__.encodeQueryString)(params);
            // dont append a '?' unless parameters are actually present
            var urlWithQueryString = queryParams === "" ? url : url + "?" + (0,_utils_encode_query_string__WEBPACK_IMPORTED_MODULE_3__.encodeQueryString)(params);
            if (
            // This would exceed the maximum length for URLs specified by the consumer and requires POST
            (options.maxUrlLength &&
                urlWithQueryString.length > options.maxUrlLength) ||
                // Or if the customer requires the token to be hidden and it has not already been hidden in the header (for browsers)
                (params.token && options.hideToken)) {
                // the consumer specified a maximum length for URLs
                // and this would exceed it, so use post instead
                fetchOptions.method = "POST";
                // If the token was already added as a Auth header, add the token back to body with other params instead of header
                if (token.length && options.hideToken) {
                    params.token = token;
                    // Remove existing header that was added before url query length was checked
                    delete requestHeaders["X-Esri-Authorization"];
                }
            }
            else {
                // just use GET
                url = urlWithQueryString;
            }
        }
        /* updateResources currently requires FormData even when the input parameters dont warrant it.
    https://developers.arcgis.com/rest/users-groups-and-items/update-resources.htm
        see https://github.com/Esri/arcgis-rest-js/pull/500 for more info. */
        var forceFormData = new RegExp("/items/.+/updateResources").test(url);
        if (fetchOptions.method === "POST") {
            fetchOptions.body = (0,_utils_encode_form_data__WEBPACK_IMPORTED_MODULE_4__.encodeFormData)(params, forceFormData);
        }
        // Mixin headers from request options
        fetchOptions.headers = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, requestHeaders), options.headers);
        /* istanbul ignore next - karma reports coverage on browser tests only */
        if (typeof window === "undefined" && !fetchOptions.headers.referer) {
            fetchOptions.headers.referer = NODEJS_DEFAULT_REFERER_HEADER;
        }
        /* istanbul ignore else blob responses are difficult to make cross platform we will just have to trust the isomorphic fetch will do its job */
        if (!(0,_utils_process_params__WEBPACK_IMPORTED_MODULE_5__.requiresFormData)(params) && !forceFormData) {
            fetchOptions.headers["Content-Type"] =
                "application/x-www-form-urlencoded";
        }
        return options.fetch(url, fetchOptions);
    })
        .then(function (response) {
        if (!response.ok) {
            // server responded w/ an actual error (404, 500, etc)
            var status_1 = response.status, statusText = response.statusText;
            throw new _utils_ArcGISRequestError__WEBPACK_IMPORTED_MODULE_2__.ArcGISRequestError(statusText, "HTTP " + status_1, response, url, options);
        }
        if (rawResponse) {
            return response;
        }
        switch (params.f) {
            case "json":
                return response.json();
            case "geojson":
                return response.json();
            case "html":
                return response.text();
            case "text":
                return response.text();
            /* istanbul ignore next blob responses are difficult to make cross platform we will just have to trust that isomorphic fetch will do its job */
            default:
                return response.blob();
        }
    })
        .then(function (data) {
        if ((params.f === "json" || params.f === "geojson") && !rawResponse) {
            var response = checkForErrors(data, url, params, options, originalAuthError);
            if (originalAuthError) {
                /* If the request was made to an unfederated service that
                didn't require authentication, add the base url and a dummy token
                to the list of trusted servers to avoid another federation check
                in the event of a repeat request */
                var truncatedUrl = url
                    .toLowerCase()
                    .split(/\/rest(\/admin)?\/services\//)[0];
                options.authentication.federatedServers[truncatedUrl] = {
                    token: [],
                    // default to 24 hours
                    expires: new Date(Date.now() + 86400 * 1000),
                };
                originalAuthError = null;
            }
            return response;
        }
        else {
            return data;
        }
    });
}
//# sourceMappingURL=request.js.map

/***/ }),

/***/ "./node_modules/@esri/arcgis-rest-request/dist/esm/utils/ArcGISRequestError.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@esri/arcgis-rest-request/dist/esm/utils/ArcGISRequestError.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ArcGISRequestError: () => (/* binding */ ArcGISRequestError)
/* harmony export */ });
/* Copyright (c) 2017 Environmental Systems Research Institute, Inc.
 * Apache-2.0 */
// TypeScript 2.1 no longer allows you to extend built in types. See https://github.com/Microsoft/TypeScript/issues/12790#issuecomment-265981442
// and https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work
//
// This code is from MDN https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types.
var ArcGISRequestError = /** @class */ (function () {
    /**
     * Create a new `ArcGISRequestError`  object.
     *
     * @param message - The error message from the API
     * @param code - The error code from the API
     * @param response - The original response from the API that caused the error
     * @param url - The original url of the request
     * @param options - The original options and parameters of the request
     */
    function ArcGISRequestError(message, code, response, url, options) {
        message = message || "UNKNOWN_ERROR";
        code = code || "UNKNOWN_ERROR_CODE";
        this.name = "ArcGISRequestError";
        this.message =
            code === "UNKNOWN_ERROR_CODE" ? message : code + ": " + message;
        this.originalMessage = message;
        this.code = code;
        this.response = response;
        this.url = url;
        this.options = options;
    }
    return ArcGISRequestError;
}());

ArcGISRequestError.prototype = Object.create(Error.prototype);
ArcGISRequestError.prototype.constructor = ArcGISRequestError;
//# sourceMappingURL=ArcGISRequestError.js.map

/***/ }),

/***/ "./node_modules/@esri/arcgis-rest-request/dist/esm/utils/encode-form-data.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@esri/arcgis-rest-request/dist/esm/utils/encode-form-data.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   encodeFormData: () => (/* binding */ encodeFormData)
/* harmony export */ });
/* harmony import */ var _process_params__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./process-params */ "./node_modules/@esri/arcgis-rest-request/dist/esm/utils/process-params.js");
/* harmony import */ var _encode_query_string__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./encode-query-string */ "./node_modules/@esri/arcgis-rest-request/dist/esm/utils/encode-query-string.js");
/* Copyright (c) 2017 Environmental Systems Research Institute, Inc.
 * Apache-2.0 */


/**
 * Encodes parameters in a [FormData](https://developer.mozilla.org/en-US/docs/Web/API/FormData) object in browsers or in a [FormData](https://github.com/form-data/form-data) in Node.js
 *
 * @param params An object to be encoded.
 * @returns The complete [FormData](https://developer.mozilla.org/en-US/docs/Web/API/FormData) object.
 */
function encodeFormData(params, forceFormData) {
    // see https://github.com/Esri/arcgis-rest-js/issues/499 for more info.
    var useFormData = (0,_process_params__WEBPACK_IMPORTED_MODULE_0__.requiresFormData)(params) || forceFormData;
    var newParams = (0,_process_params__WEBPACK_IMPORTED_MODULE_0__.processParams)(params);
    if (useFormData) {
        var formData_1 = new FormData();
        Object.keys(newParams).forEach(function (key) {
            if (typeof Blob !== "undefined" && newParams[key] instanceof Blob) {
                /* To name the Blob:
                 1. look to an alternate request parameter called 'fileName'
                 2. see if 'name' has been tacked onto the Blob manually
                 3. if all else fails, use the request parameter
                */
                var filename = newParams["fileName"] || newParams[key].name || key;
                formData_1.append(key, newParams[key], filename);
            }
            /* istanbul ignore next */
            else if (newParams[key].constructor &&
                newParams[key].constructor.name === 'ReadStream' &&
                // TODO: only specify the knownLength option if a valid value is given.
                // If we can verify in all REST API that the option is need for
                // node ReadStream, it can throw an error for the missing dataSize value.
                // Note that such change will be a breaking change.
                Number.isInteger(newParams["dataSize"])) {
                // have to cast the formData to any so that I can use the unofficial API
                // in the form-data library to handle Node ReadStream. See
                // https://github.com/form-data/form-data/issues/508
                formData_1.append(key, newParams[key], {
                    knownLength: newParams["dataSize"]
                });
            }
            else {
                formData_1.append(key, newParams[key]);
            }
        });
        return formData_1;
    }
    else {
        return (0,_encode_query_string__WEBPACK_IMPORTED_MODULE_1__.encodeQueryString)(params);
    }
}
//# sourceMappingURL=encode-form-data.js.map

/***/ }),

/***/ "./node_modules/@esri/arcgis-rest-request/dist/esm/utils/encode-query-string.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@esri/arcgis-rest-request/dist/esm/utils/encode-query-string.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   encodeParam: () => (/* binding */ encodeParam),
/* harmony export */   encodeQueryString: () => (/* binding */ encodeQueryString)
/* harmony export */ });
/* harmony import */ var _process_params__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./process-params */ "./node_modules/@esri/arcgis-rest-request/dist/esm/utils/process-params.js");
/* Copyright (c) 2017 Environmental Systems Research Institute, Inc.
 * Apache-2.0 */

/**
 * Encodes keys and parameters for use in a URL's query string.
 *
 * @param key Parameter's key
 * @param value Parameter's value
 * @returns Query string with key and value pairs separated by "&"
 */
function encodeParam(key, value) {
    // For array of arrays, repeat key=value for each element of containing array
    if (Array.isArray(value) && value[0] && Array.isArray(value[0])) {
        return value.map(function (arrayElem) { return encodeParam(key, arrayElem); }).join("&");
    }
    return encodeURIComponent(key) + "=" + encodeURIComponent(value);
}
/**
 * Encodes the passed object as a query string.
 *
 * @param params An object to be encoded.
 * @returns An encoded query string.
 */
function encodeQueryString(params) {
    var newParams = (0,_process_params__WEBPACK_IMPORTED_MODULE_0__.processParams)(params);
    return Object.keys(newParams)
        .map(function (key) {
        return encodeParam(key, newParams[key]);
    })
        .join("&");
}
//# sourceMappingURL=encode-query-string.js.map

/***/ }),

/***/ "./node_modules/@esri/arcgis-rest-request/dist/esm/utils/process-params.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@esri/arcgis-rest-request/dist/esm/utils/process-params.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   processParams: () => (/* binding */ processParams),
/* harmony export */   requiresFormData: () => (/* binding */ requiresFormData)
/* harmony export */ });
/* Copyright (c) 2017 Environmental Systems Research Institute, Inc.
 * Apache-2.0 */
/**
 * Checks parameters to see if we should use FormData to send the request
 * @param params The object whose keys will be encoded.
 * @return A boolean indicating if FormData will be required.
 */
function requiresFormData(params) {
    return Object.keys(params).some(function (key) {
        var value = params[key];
        if (!value) {
            return false;
        }
        if (value && value.toParam) {
            value = value.toParam();
        }
        var type = value.constructor.name;
        switch (type) {
            case "Array":
                return false;
            case "Object":
                return false;
            case "Date":
                return false;
            case "Function":
                return false;
            case "Boolean":
                return false;
            case "String":
                return false;
            case "Number":
                return false;
            default:
                return true;
        }
    });
}
/**
 * Converts parameters to the proper representation to send to the ArcGIS REST API.
 * @param params The object whose keys will be encoded.
 * @return A new object with properly encoded values.
 */
function processParams(params) {
    var newParams = {};
    Object.keys(params).forEach(function (key) {
        var _a, _b;
        var param = params[key];
        if (param && param.toParam) {
            param = param.toParam();
        }
        if (!param &&
            param !== 0 &&
            typeof param !== "boolean" &&
            typeof param !== "string") {
            return;
        }
        var type = param.constructor.name;
        var value;
        // properly encodes objects, arrays and dates for arcgis.com and other services.
        // ported from https://github.com/Esri/esri-leaflet/blob/master/src/Request.js#L22-L30
        // also see https://github.com/Esri/arcgis-rest-js/issues/18:
        // null, undefined, function are excluded. If you want to send an empty key you need to send an empty string "".
        switch (type) {
            case "Array":
                // Based on the first element of the array, classify array as an array of arrays, an array of objects
                // to be stringified, or an array of non-objects to be comma-separated
                // eslint-disable-next-line no-case-declarations
                var firstElementType = (_b = (_a = param[0]) === null || _a === void 0 ? void 0 : _a.constructor) === null || _b === void 0 ? void 0 : _b.name;
                value =
                    firstElementType === "Array" ? param : // pass thru array of arrays
                        firstElementType === "Object" ? JSON.stringify(param) : // stringify array of objects
                            param.join(","); // join other types of array elements
                break;
            case "Object":
                value = JSON.stringify(param);
                break;
            case "Date":
                value = param.valueOf();
                break;
            case "Function":
                value = null;
                break;
            case "Boolean":
                value = param + "";
                break;
            default:
                value = param;
                break;
        }
        if (value || value === 0 || typeof value === "string" || Array.isArray(value)) {
            newParams[key] = value;
        }
    });
    return newParams;
}
//# sourceMappingURL=process-params.js.map

/***/ }),

/***/ "./node_modules/@esri/arcgis-rest-request/dist/esm/utils/warn.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@esri/arcgis-rest-request/dist/esm/utils/warn.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   warn: () => (/* binding */ warn)
/* harmony export */ });
/* Copyright (c) 2017-2018 Environmental Systems Research Institute, Inc.
 * Apache-2.0 */
/**
 * Method used internally to surface messages to developers.
 */
function warn(message) {
    if (console && console.warn) {
        console.warn.apply(console, [message]);
    }
}
//# sourceMappingURL=warn.js.map

/***/ }),

/***/ "./node_modules/@esri/arcgis-rest-request/node_modules/tslib/tslib.es6.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@esri/arcgis-rest-request/node_modules/tslib/tslib.es6.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   __assign: () => (/* binding */ __assign),
/* harmony export */   __asyncDelegator: () => (/* binding */ __asyncDelegator),
/* harmony export */   __asyncGenerator: () => (/* binding */ __asyncGenerator),
/* harmony export */   __asyncValues: () => (/* binding */ __asyncValues),
/* harmony export */   __await: () => (/* binding */ __await),
/* harmony export */   __awaiter: () => (/* binding */ __awaiter),
/* harmony export */   __classPrivateFieldGet: () => (/* binding */ __classPrivateFieldGet),
/* harmony export */   __classPrivateFieldSet: () => (/* binding */ __classPrivateFieldSet),
/* harmony export */   __createBinding: () => (/* binding */ __createBinding),
/* harmony export */   __decorate: () => (/* binding */ __decorate),
/* harmony export */   __exportStar: () => (/* binding */ __exportStar),
/* harmony export */   __extends: () => (/* binding */ __extends),
/* harmony export */   __generator: () => (/* binding */ __generator),
/* harmony export */   __importDefault: () => (/* binding */ __importDefault),
/* harmony export */   __importStar: () => (/* binding */ __importStar),
/* harmony export */   __makeTemplateObject: () => (/* binding */ __makeTemplateObject),
/* harmony export */   __metadata: () => (/* binding */ __metadata),
/* harmony export */   __param: () => (/* binding */ __param),
/* harmony export */   __read: () => (/* binding */ __read),
/* harmony export */   __rest: () => (/* binding */ __rest),
/* harmony export */   __spread: () => (/* binding */ __spread),
/* harmony export */   __spreadArrays: () => (/* binding */ __spreadArrays),
/* harmony export */   __values: () => (/* binding */ __values)
/* harmony export */ });
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    }
    return __assign.apply(this, arguments);
}

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
}

function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}

function __param(paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
}

function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

function __createBinding(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}

function __exportStar(m, exports) {
    for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
}

function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}

function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
}

function __spread() {
    for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read(arguments[i]));
    return ar;
}

function __spreadArrays() {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};

function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}

function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
}

function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
}

function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
}

function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};

function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result.default = mod;
    return result;
}

function __importDefault(mod) {
    return (mod && mod.__esModule) ? mod : { default: mod };
}

function __classPrivateFieldGet(receiver, privateMap) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
    }
    return privateMap.get(receiver);
}

function __classPrivateFieldSet(receiver, privateMap, value) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to set private field on non-instance");
    }
    privateMap.set(receiver, value);
    return value;
}


/***/ }),

/***/ "./jimu-icons/svg/filled/data/layer.svg":
/*!**********************************************!*\
  !*** ./jimu-icons/svg/filled/data/layer.svg ***!
  \**********************************************/
/***/ ((module) => {

module.exports = "<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 16 16\"><path fill=\"#000\" fill-rule=\"evenodd\" d=\"M14.629 9.143 16 10.286 8 16l-8-5.714 1.371-1.143L8 13.714zM8 0l8 5.714-8 5.715-8-5.715z\" clip-rule=\"evenodd\"></path></svg>"

/***/ }),

/***/ "./jimu-icons/svg/filled/data/widget.svg":
/*!***********************************************!*\
  !*** ./jimu-icons/svg/filled/data/widget.svg ***!
  \***********************************************/
/***/ ((module) => {

module.exports = "<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 16 16\"><path fill=\"#000\" fill-rule=\"evenodd\" d=\"M6.667 4.667 11.333 0 16 4.667l-4.667 4.666zM0 1.333V8h6.667V1.333zM6.667 16H0V9.333h6.667zM8 16V9.333h6.667V16z\" clip-rule=\"evenodd\"></path></svg>"

/***/ }),

/***/ "./jimu-icons/svg/filled/suggested/warning-circle.svg":
/*!************************************************************!*\
  !*** ./jimu-icons/svg/filled/suggested/warning-circle.svg ***!
  \************************************************************/
/***/ ((module) => {

module.exports = "<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 16 16\"><path fill=\"#000\" fill-rule=\"evenodd\" d=\"M8 1C4.15 1 1 4.15 1 8s3.15 7 7 7 7-3.15 7-7-3.15-7-7-7m1.167 11.667H6.834v-2.334h2.333zm-2.333-4.5V3.333h2.333v4.834z\" clip-rule=\"evenodd\"></path></svg>"

/***/ }),

/***/ "./jimu-icons/svg/outlined/application/empty.svg":
/*!*******************************************************!*\
  !*** ./jimu-icons/svg/outlined/application/empty.svg ***!
  \*******************************************************/
/***/ ((module) => {

module.exports = "<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 16 16\"><path fill=\"#000\" fill-rule=\"evenodd\" d=\"M7.5 1.5a.5.5 0 0 1 1 0v2.8a.5.5 0 0 1-1 0zm6.028.874a.5.5 0 0 1 .062.705l-1.414 1.685a.5.5 0 1 1-.766-.643l1.414-1.685a.5.5 0 0 1 .704-.062m-10.352.062a.5.5 0 1 0-.766.643l1.414 1.685a.5.5 0 0 0 .766-.643zM6.244 10.6zH5.43zM.961 9.8h4.88c.211 0 .359.19.359.4a1.8 1.8 0 0 0 3.555.4h.814a2.6 2.6 0 0 1-5.139 0H.8v3.6h14.4v-3.6H9.755c.03-.129.045-.263.045-.4 0-.21.148-.4.358-.4h4.881l-2.267-3.4H3.228zm11.81-4.2a.8.8 0 0 1 .666.356l2.429 3.642a.8.8 0 0 1 .134.444V14.2a.8.8 0 0 1-.8.8H.8a.8.8 0 0 1-.8-.8v-4.158a.8.8 0 0 1 .134-.444l2.429-3.642a.8.8 0 0 1 .665-.356z\" clip-rule=\"evenodd\"></path></svg>"

/***/ }),

/***/ "./jimu-icons/svg/outlined/application/invisible.svg":
/*!***********************************************************!*\
  !*** ./jimu-icons/svg/outlined/application/invisible.svg ***!
  \***********************************************************/
/***/ ((module) => {

module.exports = "<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 16 16\"><path fill=\"#000\" fill-rule=\"evenodd\" d=\"M3.154 3.154a.527.527 0 0 1 .746 0l1.317 1.317A8.618 8.618 0 0 1 8 4c2.667 0 5.667 1.333 7 4-.696 1.393-1.847 2.422-3.168 3.087l1.014 1.013a.527.527 0 1 1-.746.746l-1.317-1.317A8.617 8.617 0 0 1 8 12c-2.667 0-5.667-1.333-7-4 .696-1.393 1.847-2.422 3.168-3.087L3.154 3.9a.527.527 0 0 1 0-.746m1.698 2.443C3.726 6.087 2.782 6.882 2 8c1.422 2.033 3.382 3 6 3a8.66 8.66 0 0 0 2.03-.225l-.675-.674A2.5 2.5 0 0 1 5.9 6.644zm6.296 4.805C12.275 9.913 13.218 9.119 14 8c-1.422-2.033-3.382-3-6-3-.726 0-1.402.074-2.03.225l.675.674a2.5 2.5 0 0 1 3.457 3.456zM6.5 8c0-.221.048-.431.134-.62l1.987 1.986A1.5 1.5 0 0 1 6.5 8m.88-1.366 1.986 1.987a1.5 1.5 0 0 0-1.987-1.987\" clip-rule=\"evenodd\"></path></svg>"

/***/ }),

/***/ "./jimu-icons/svg/outlined/application/more-horizontal.svg":
/*!*****************************************************************!*\
  !*** ./jimu-icons/svg/outlined/application/more-horizontal.svg ***!
  \*****************************************************************/
/***/ ((module) => {

module.exports = "<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 16 16\"><path fill=\"#000\" fill-rule=\"evenodd\" d=\"M2 7a1 1 0 1 0 0 2 1 1 0 0 0 0-2m5 1a1 1 0 1 1 2 0 1 1 0 0 1-2 0m6 0a1 1 0 1 1 2 0 1 1 0 0 1-2 0\" clip-rule=\"evenodd\"></path></svg>"

/***/ }),

/***/ "./jimu-icons/svg/outlined/application/setting.svg":
/*!*********************************************************!*\
  !*** ./jimu-icons/svg/outlined/application/setting.svg ***!
  \*********************************************************/
/***/ ((module) => {

module.exports = "<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 16 16\"><path fill=\"#000\" fill-rule=\"evenodd\" d=\"M9.438.994c.213 0 .397.146.44.35.151.722.257 1.34.316 1.852.374.16.725.362 1.048.599l1.728-.676a.455.455 0 0 1 .556.188l1.42 2.394a.43.43 0 0 1-.091.547 21.98 21.98 0 0 1-1.49 1.194 5.17 5.17 0 0 1-.007 1.183l1.464 1.119a.43.43 0 0 1 .111.563l-1.42 2.394a.454.454 0 0 1-.53.197 22.445 22.445 0 0 1-1.807-.66c-.325.233-.679.43-1.055.586l-.263 1.794a.446.446 0 0 1-.445.376H6.574a.446.446 0 0 1-.44-.35 21.019 21.019 0 0 1-.317-1.853 5.34 5.34 0 0 1-1.047-.598l-1.728.675a.455.455 0 0 1-.556-.187l-1.42-2.395a.43.43 0 0 1 .091-.546c.567-.49 1.063-.888 1.49-1.194a5.167 5.167 0 0 1 .008-1.183L1.19 6.243a.43.43 0 0 1-.112-.562l1.42-2.395a.455.455 0 0 1 .531-.196c.719.233 1.321.453 1.807.66.324-.233.679-.43 1.056-.587l.262-1.794A.446.446 0 0 1 6.6.994zm-.365 1H6.985l-.28 1.866-.467.19c-.235.095-.46.21-.672.34l-.207.136-.42.293-.476-.197c-.328-.137-.718-.281-1.169-.433l-.221-.074-1.045 1.719L3.59 6.999l-.06.479a4.127 4.127 0 0 0-.021.816l.014.144.058.492-.419.294c-.288.203-.615.451-.979.746l-.177.145 1.043 1.72 1.845-.703.406.29c.204.146.42.274.645.384l.228.103.474.199.059.49c.04.338.103.731.19 1.177l.043.219h2.088l.282-1.867.466-.19c.236-.095.46-.21.672-.34l.207-.136.419-.293.476.198c.33.136.72.28 1.17.433l.22.072 1.044-1.718-1.56-1.165.06-.479a4.131 4.131 0 0 0 .02-.815l-.013-.144-.06-.492.42-.295a18.1 18.1 0 0 0 .98-.746l.176-.146-1.043-1.72-1.844.705-.406-.29a4.496 4.496 0 0 0-.646-.385l-.228-.103-.474-.199-.058-.49c-.032-.27-.08-.576-.14-.916zm-1.067 3a3 3 0 1 1 0 6 3 3 0 0 1 0-6m0 1a2 2 0 1 0 0 4 2 2 0 0 0 0-4\" clip-rule=\"evenodd\"></path></svg>"

/***/ }),

/***/ "./jimu-icons/svg/outlined/application/visible.svg":
/*!*********************************************************!*\
  !*** ./jimu-icons/svg/outlined/application/visible.svg ***!
  \*********************************************************/
/***/ ((module) => {

module.exports = "<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 16 16\"><path fill=\"#000\" fill-rule=\"evenodd\" d=\"M8 12c-2.667 0-5.667-1.333-7-4 1.333-2.667 4.333-4 7-4s5.667 1.333 7 4c-1.333 2.667-4.333 4-7 4m0-7c-2.618 0-4.578.967-6 3 1.422 2.033 3.382 3 6 3s4.578-.967 6-3c-1.422-2.033-3.382-3-6-3m0 5.5a2.5 2.5 0 1 1 0-5 2.5 2.5 0 0 1 0 5m0-1a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3\" clip-rule=\"evenodd\"></path></svg>"

/***/ }),

/***/ "./jimu-icons/svg/outlined/data/date.svg":
/*!***********************************************!*\
  !*** ./jimu-icons/svg/outlined/data/date.svg ***!
  \***********************************************/
/***/ ((module) => {

module.exports = "<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 16 16\"><path fill=\"#000\" fill-rule=\"evenodd\" d=\"M5.5 1a.5.5 0 0 0-.5.5V2H2a1 1 0 0 0-1 1v11a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V3a1 1 0 0 0-1-1h-3v-.5a.5.5 0 0 0-1 0V2H6v-.5a.5.5 0 0 0-.5-.5M10 3.5V3H6v.5a.5.5 0 0 1-1 0V3H2v2h12V3h-3v.5a.5.5 0 0 1-1 0M14 6H2v8h12zM5 8.5a.5.5 0 0 1 .5-.5h5a.5.5 0 0 1 0 1h-5a.5.5 0 0 1-.5-.5m.5 2.5a.5.5 0 0 0 0 1h5a.5.5 0 0 0 0-1z\" clip-rule=\"evenodd\"></path></svg>"

/***/ }),

/***/ "./jimu-icons/svg/outlined/data/globe.svg":
/*!************************************************!*\
  !*** ./jimu-icons/svg/outlined/data/globe.svg ***!
  \************************************************/
/***/ ((module) => {

module.exports = "<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 16 16\"><path fill=\"#C5C5C5\" d=\"M2.56 12.801a7.284 7.284 0 0 0 11.48 0h.005v-.006a7.27 7.27 0 0 0 0-8.988v-.006h-.004a7.283 7.283 0 0 0-11.482 0h-.004v.006a7.27 7.27 0 0 0 0 8.988v.006zm1.95-8a11.5 11.5 0 0 0-.495 3h-1.99a6.26 6.26 0 0 1 1.04-3zm9.025 0a6.26 6.26 0 0 1 1.04 3h-1.99a11.503 11.503 0 0 0-.495-3zm-1.445 7c.297-.974.464-1.983.495-3h1.99a6.26 6.26 0 0 1-1.04 3zm-4.29 1v1.716a3.324 3.324 0 0 1-1.78-1.716zm-2.225-1a10.318 10.318 0 0 1-.56-3H7.8v3zM8.8 14.517v-1.716h1.78a3.324 3.324 0 0 1-1.78 1.716m0-2.716v-3h2.786a10.32 10.32 0 0 1-.56 3zm2.786-4H8.8v-3h2.225c.335.967.524 1.978.561 3m-2.786-4V2.085c.792.322 1.43.936 1.78 1.716zm-1-1.716v1.716H6.02c.351-.78.988-1.394 1.78-1.716m0 2.716v3H5.014c.038-1.022.227-2.033.561-3zm-3.785 4a11.5 11.5 0 0 0 .495 3H3.065a6.26 6.26 0 0 1-1.04-3zm.881 4c.183.408.404.798.662 1.163A6.325 6.325 0 0 1 3.9 12.801zm6.146 1.163c.258-.365.48-.755.662-1.163h.996a6.326 6.326 0 0 1-1.658 1.163m.662-10.163a6.868 6.868 0 0 0-.662-1.163A6.324 6.324 0 0 1 12.7 3.801zM5.558 2.638c-.258.365-.48.755-.662 1.163H3.9a6.323 6.323 0 0 1 1.66-1.163z\"></path></svg>"

/***/ }),

/***/ "./jimu-icons/svg/outlined/data/number.svg":
/*!*************************************************!*\
  !*** ./jimu-icons/svg/outlined/data/number.svg ***!
  \*************************************************/
/***/ ((module) => {

module.exports = "<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 16 16\"><path fill=\"#000\" fill-rule=\"evenodd\" d=\"m5.635 9.86 2.168-2.18L8 7.471c.068-.073.13-.151.185-.233.055-.082.101-.168.138-.258a.742.742 0 0 0 .055-.283.729.729 0 0 0-.244-.558.786.786 0 0 0-.256-.151.9.9 0 0 0-.312-.054.822.822 0 0 0-.583.214.918.918 0 0 0-.276.573l-.993-.082c.02-.267.082-.504.185-.709.102-.205.235-.375.398-.512.163-.137.352-.24.568-.311A2.23 2.23 0 0 1 7.566 5c.253 0 .488.034.706.102.218.069.409.17.572.304.163.134.291.304.386.512.095.208.142.45.142.73 0 .366-.08.681-.24.946-.16.265-.367.518-.62.758l-1.726 1.664h2.586v.886H5.635zM3.6 6.23 2.55 7.238 2 6.558l1.687-1.46h.86v5.804H3.6zm8.23 1.204h-.244v.886h.229c.142 0 .286.01.434.032.147.022.28.065.398.128a.782.782 0 0 1 .292.27c.076.117.114.27.114.455 0 .137-.025.26-.075.373a.856.856 0 0 1-.205.287.986.986 0 0 1-.658.25c-.253 0-.452-.066-.6-.197a1.053 1.053 0 0 1-.307-.557l-1.01.278c.064.24.156.447.277.62.12.171.264.312.43.421.165.11.35.19.555.242.205.052.423.078.655.078.247 0 .485-.037.713-.11.229-.074.43-.184.603-.328.174-.145.312-.324.414-.537.103-.214.154-.46.154-.738 0-.36-.092-.672-.276-.935-.184-.262-.455-.42-.812-.475v-.016c.3-.077.533-.237.702-.48.168-.243.252-.52.252-.832a1.41 1.41 0 0 0-.536-1.16 1.711 1.711 0 0 0-.568-.29A2.345 2.345 0 0 0 12.076 5c-.205 0-.402.025-.591.074-.19.049-.363.124-.52.225-.158.101-.295.231-.41.39a1.805 1.805 0 0 0-.268.557l1 .279a.948.948 0 0 1 .328-.472.827.827 0 0 1 .508-.168c.237 0 .429.071.576.213a.73.73 0 0 1 .22.55.8.8 0 0 1-.094.418.638.638 0 0 1-.248.237 1 1 0 0 1-.347.107 3.152 3.152 0 0 1-.398.024\" clip-rule=\"evenodd\"></path></svg>"

/***/ }),

/***/ "./jimu-icons/svg/outlined/data/string.svg":
/*!*************************************************!*\
  !*** ./jimu-icons/svg/outlined/data/string.svg ***!
  \*************************************************/
/***/ ((module) => {

module.exports = "<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 16 16\"><path fill=\"#000\" fill-rule=\"evenodd\" d=\"M12.89 6.032c.143.076.29.226.442.452l.574-.58c-.207-.329-.43-.561-.67-.698A1.55 1.55 0 0 0 12.454 5c-.32 0-.614.071-.882.214a2.048 2.048 0 0 0-.69.609 3.046 3.046 0 0 0-.454.955 4.43 4.43 0 0 0-.165 1.246c0 .446.055.852.165 1.218.109.366.26.679.453.94.194.26.424.462.691.604.268.143.562.214.882.214.304 0 .591-.08.86-.242.27-.161.499-.42.686-.774l-.61-.597c-.136.242-.283.418-.441.528a.846.846 0 0 1-.49.166c-.214 0-.408-.054-.582-.162a1.462 1.462 0 0 1-.448-.443 2.236 2.236 0 0 1-.29-.67 3.304 3.304 0 0 1-.102-.846c0-.285.034-.551.102-.799.068-.247.165-.463.29-.649.125-.185.274-.33.448-.435.174-.105.368-.158.583-.158.144 0 .288.038.43.113m-8.448-.887h-.638L2 10.855h.826L3.2 9.548h1.798l.386 1.307h.843zm-.34 1.21.639 2.322H3.452zm2.59-1.21h1.615c.157 0 .31.026.463.077.152.05.288.134.407.25.12.115.216.265.29.447.074.183.111.404.111.662 0 .322-.066.588-.199.798-.133.21-.306.36-.521.452v.016a.871.871 0 0 1 .36.149c.111.078.206.177.284.298.078.121.14.261.185.42.045.158.067.329.067.512 0 .312-.045.571-.135.778-.09.207-.208.374-.354.5a1.308 1.308 0 0 1-.504.27 2.1 2.1 0 0 1-.577.08H6.691zm1.41 2.323H7.43V6.016h.61c.28 0 .484.06.611.182.127.12.19.305.19.552a.731.731 0 0 1-.184.52c-.123.132-.308.198-.554.198M7.43 9.984h.68c.093 0 .194-.008.301-.024a.675.675 0 0 0 .518-.367.96.96 0 0 0 .088-.448c0-.3-.071-.51-.214-.629-.142-.118-.364-.177-.664-.177h-.709z\" clip-rule=\"evenodd\"></path></svg>"

/***/ }),

/***/ "./jimu-icons/svg/outlined/directional/down.svg":
/*!******************************************************!*\
  !*** ./jimu-icons/svg/outlined/directional/down.svg ***!
  \******************************************************/
/***/ ((module) => {

module.exports = "<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 16 16\"><path fill=\"#000\" fill-rule=\"evenodd\" d=\"M2.146 4.653a.485.485 0 0 1 .708 0L8 10.24l5.146-5.587a.485.485 0 0 1 .708 0 .538.538 0 0 1 0 .738l-5.5 5.956a.485.485 0 0 1-.708 0l-5.5-5.956a.538.538 0 0 1 0-.738\" clip-rule=\"evenodd\"></path></svg>"

/***/ }),

/***/ "./jimu-icons/svg/outlined/directional/up.svg":
/*!****************************************************!*\
  !*** ./jimu-icons/svg/outlined/directional/up.svg ***!
  \****************************************************/
/***/ ((module) => {

module.exports = "<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 16 16\"><path fill=\"#000\" fill-rule=\"evenodd\" d=\"M13.854 11.347a.486.486 0 0 1-.708 0L8 5.76l-5.146 5.587a.485.485 0 0 1-.708 0 .538.538 0 0 1 0-.738l5.5-5.956a.485.485 0 0 1 .708 0l5.5 5.956a.538.538 0 0 1 0 .738\" clip-rule=\"evenodd\"></path></svg>"

/***/ }),

/***/ "./jimu-icons/svg/outlined/editor/close.svg":
/*!**************************************************!*\
  !*** ./jimu-icons/svg/outlined/editor/close.svg ***!
  \**************************************************/
/***/ ((module) => {

module.exports = "<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 16 16\"><path fill=\"#000\" d=\"m8.745 8 6.1 6.1a.527.527 0 1 1-.745.746L8 8.746l-6.1 6.1a.527.527 0 1 1-.746-.746l6.1-6.1-6.1-6.1a.527.527 0 0 1 .746-.746l6.1 6.1 6.1-6.1a.527.527 0 0 1 .746.746z\"></path></svg>"

/***/ }),

/***/ "./jimu-icons/svg/outlined/editor/duplicate.svg":
/*!******************************************************!*\
  !*** ./jimu-icons/svg/outlined/editor/duplicate.svg ***!
  \******************************************************/
/***/ ((module) => {

module.exports = "<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 16 16\"><path fill=\"#000\" fill-rule=\"evenodd\" d=\"M1.5 11a.5.5 0 0 0 .5-.5V2h8.5a.5.5 0 0 0 0-1H2a1 1 0 0 0-1 1v8.5a.5.5 0 0 0 .5.5M5 4h9a1 1 0 0 1 1 1v9a1 1 0 0 1-1 1H5a1 1 0 0 1-1-1V5a1 1 0 0 1 1-1m0 1v9h9V5z\" clip-rule=\"evenodd\"></path></svg>"

/***/ }),

/***/ "./jimu-icons/svg/outlined/editor/edit.svg":
/*!*************************************************!*\
  !*** ./jimu-icons/svg/outlined/editor/edit.svg ***!
  \*************************************************/
/***/ ((module) => {

module.exports = "<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 16 16\"><path fill=\"#000\" fill-rule=\"evenodd\" d=\"M11.227 1.312c-.404-.404-1.045-.417-1.432-.03L2.49 8.587l-.48 2.674a.637.637 0 0 0 .73.73l2.673-.48 7.305-7.306c.387-.387.374-1.028-.03-1.431zm-8.114 9.575.32-1.781 4.991-4.992 1.462 1.462-4.992 4.991zm7.473-6.012 1.402-1.4-1.462-1.463-1.401 1.402z\" clip-rule=\"evenodd\"></path><path fill=\"#000\" d=\"M1.5 14a.5.5 0 0 0 0 1h13a.5.5 0 0 0 0-1z\"></path></svg>"

/***/ }),

/***/ "./jimu-icons/svg/outlined/editor/minus-circle.svg":
/*!*********************************************************!*\
  !*** ./jimu-icons/svg/outlined/editor/minus-circle.svg ***!
  \*********************************************************/
/***/ ((module) => {

module.exports = "<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 16 16\"><path fill=\"#000\" fill-rule=\"evenodd\" d=\"M14 8A6 6 0 1 1 2 8a6 6 0 0 1 12 0m1 0A7 7 0 1 1 1 8a7 7 0 0 1 14 0M4 8a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 0 1h-7A.5.5 0 0 1 4 8\" clip-rule=\"evenodd\"></path></svg>"

/***/ }),

/***/ "./jimu-icons/svg/outlined/editor/plus-circle.svg":
/*!********************************************************!*\
  !*** ./jimu-icons/svg/outlined/editor/plus-circle.svg ***!
  \********************************************************/
/***/ ((module) => {

module.exports = "<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 16 16\"><path fill=\"#000\" fill-rule=\"evenodd\" d=\"M14 8A6 6 0 1 1 2 8a6 6 0 0 1 12 0m1 0A7 7 0 1 1 1 8a7 7 0 0 1 14 0M7.5 4.5a.5.5 0 0 1 1 0v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3z\" clip-rule=\"evenodd\"></path></svg>"

/***/ }),

/***/ "./jimu-icons/svg/outlined/editor/plus.svg":
/*!*************************************************!*\
  !*** ./jimu-icons/svg/outlined/editor/plus.svg ***!
  \*************************************************/
/***/ ((module) => {

module.exports = "<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 16 16\"><path fill=\"#000\" d=\"M7.5 0a.5.5 0 0 0-.5.5V7H.5a.5.5 0 0 0 0 1H7v6.5a.5.5 0 0 0 1 0V8h6.5a.5.5 0 0 0 0-1H8V.5a.5.5 0 0 0-.5-.5\"></path></svg>"

/***/ }),

/***/ "./jimu-icons/svg/outlined/editor/preview.svg":
/*!****************************************************!*\
  !*** ./jimu-icons/svg/outlined/editor/preview.svg ***!
  \****************************************************/
/***/ ((module) => {

module.exports = "<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 16 16\"><path fill=\"#000\" fill-rule=\"evenodd\" d=\"M13 1a2 2 0 0 1 2 2v6.5a.5.5 0 0 1-1 0V3a1 1 0 0 0-1-1H3a1 1 0 0 0-1 1v10a1 1 0 0 0 1 1h6.5a.5.5 0 0 1 0 1H3a2 2 0 0 1-2-2V3a2 2 0 0 1 2-2zm-1.849 10.151a.517.517 0 0 1 .73 0l2.923 2.923a.517.517 0 0 1-.73.73l-2.923-2.922a.517.517 0 0 1 0-.73M8 12a4 4 0 1 0 0-8 4 4 0 0 0 0 8m0-1a3 3 0 1 1 0-6 3 3 0 0 1 0 6\" clip-rule=\"evenodd\"></path></svg>"

/***/ }),

/***/ "./jimu-icons/svg/outlined/editor/search.svg":
/*!***************************************************!*\
  !*** ./jimu-icons/svg/outlined/editor/search.svg ***!
  \***************************************************/
/***/ ((module) => {

module.exports = "<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 16 16\"><path fill=\"#000\" fill-rule=\"evenodd\" d=\"M12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0m-1.27 4.936a6.5 6.5 0 1 1 .707-.707l4.136 4.137a.5.5 0 1 1-.707.707z\" clip-rule=\"evenodd\"></path></svg>"

/***/ }),

/***/ "./jimu-icons/svg/outlined/editor/trash.svg":
/*!**************************************************!*\
  !*** ./jimu-icons/svg/outlined/editor/trash.svg ***!
  \**************************************************/
/***/ ((module) => {

module.exports = "<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 16 16\"><path fill=\"#000\" d=\"M6 6.5a.5.5 0 0 1 1 0v6a.5.5 0 0 1-1 0zM9.5 6a.5.5 0 0 0-.5.5v6a.5.5 0 0 0 1 0v-6a.5.5 0 0 0-.5-.5\"></path><path fill=\"#000\" fill-rule=\"evenodd\" d=\"M11 0H5a1 1 0 0 0-1 1v2H.5a.5.5 0 0 0 0 1h1.6l.81 11.1a1 1 0 0 0 .995.9h8.19a1 1 0 0 0 .995-.9L13.9 4h1.6a.5.5 0 0 0 0-1H12V1a1 1 0 0 0-1-1m0 3V1H5v2zm1.895 1h-9.79l.8 11h8.19z\" clip-rule=\"evenodd\"></path></svg>"

/***/ }),

/***/ "./jimu-icons/svg/outlined/suggested/info.svg":
/*!****************************************************!*\
  !*** ./jimu-icons/svg/outlined/suggested/info.svg ***!
  \****************************************************/
/***/ ((module) => {

module.exports = "<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 16 16\"><path fill=\"#000\" d=\"M8 5.5a1 1 0 1 0 0-2 1 1 0 0 0 0 2M6.5 7.5A.5.5 0 0 1 7 7h1.5v4.5h1a.5.5 0 0 1 0 1h-3a.5.5 0 0 1 0-1h1V8H7a.5.5 0 0 1-.5-.5\"></path><path fill=\"#000\" fill-rule=\"evenodd\" d=\"M8 16A8 8 0 1 1 8 0a8 8 0 0 1 0 16m0-1A7 7 0 1 0 8 1a7 7 0 0 0 0 14\" clip-rule=\"evenodd\"></path></svg>"

/***/ }),

/***/ "./jimu-ui/lib/icons/data-layer-16.svg":
/*!*********************************************!*\
  !*** ./jimu-ui/lib/icons/data-layer-16.svg ***!
  \*********************************************/
/***/ ((module) => {

module.exports = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\"><path fill=\"#000\" fill-rule=\"nonzero\" d=\"m8 0 8 6-8 6-8-6zM1.887 6 8 10.82 14.113 6 8 1.18zM.563 9 8 14.775 15.437 9l.563.81L8 16 0 9.81z\"></path></svg>"

/***/ }),

/***/ "./jimu-ui/lib/icons/data-map.svg":
/*!****************************************!*\
  !*** ./jimu-ui/lib/icons/data-map.svg ***!
  \****************************************/
/***/ ((module) => {

module.exports = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\"><path fill=\"#000\" fill-rule=\"nonzero\" d=\"m6 11.943 4 1.711V4.057L6 2.346zm-1 .17V2.494l-4 1.48v9.619zm6 1.393 4-1.48V2.407l-4 1.48zM0 15V3.307L5.75 1.18l4.528 1.937L16 1v11.693l-5.75 2.127-4.528-1.937z\"></path></svg>"

/***/ }),

/***/ "./jimu-ui/lib/icons/data-scene.svg":
/*!******************************************!*\
  !*** ./jimu-ui/lib/icons/data-scene.svg ***!
  \******************************************/
/***/ ((module) => {

module.exports = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\"><path fill=\"#000\" fill-rule=\"nonzero\" d=\"M7.5 4V1.39C6.402 2.12 5.565 2.99 4.985 4zm0 3.5V5H4.512a8.13 8.13 0 0 0-.5 2.5zm0 3.5V8.5H4.012a8.13 8.13 0 0 0 .5 2.5zm0 3.61V12H4.985c.58 1.01 1.417 1.88 2.515 2.61m2.543.087A7.014 7.014 0 0 0 13.745 12h-1.6a8.278 8.278 0 0 1-2.102 2.697M11.015 12H8.5v2.61c1.098-.73 1.935-1.6 2.515-2.61m1.974-3.5a9.328 9.328 0 0 1-.441 2.5h1.778c.365-.767.594-1.61.656-2.5zm-1.001 0H8.5V11h2.988a8.13 8.13 0 0 0 .5-2.5m.56-3.5c.254.775.401 1.609.441 2.5h1.993a6.957 6.957 0 0 0-.656-2.5zm-1.06 0H8.5v2.5h3.488a8.13 8.13 0 0 0-.5-2.5m-1.445-3.697c.91.78 1.611 1.68 2.102 2.697h1.6a7.014 7.014 0 0 0-3.702-2.697M8.5 4h2.515c-.58-1.01-1.417-1.88-2.515-2.61zm-.527 12a8 8 0 1 1 .055-16 8 8 0 0 1-.055 16M5.957 1.302A7.014 7.014 0 0 0 2.255 4h1.6a8.278 8.278 0 0 1 2.102-2.697M3.011 7.5c.04-.891.187-1.725.441-2.5H1.674a6.957 6.957 0 0 0-.656 2.5zm.441 3.5a9.328 9.328 0 0 1-.441-2.5H1.018c.062.89.291 1.733.656 2.5zm2.505 3.697A8.278 8.278 0 0 1 3.855 12h-1.6a7.014 7.014 0 0 0 3.702 2.697\"></path></svg>"

/***/ }),

/***/ "./jimu-ui/lib/icons/widget-link.svg":
/*!*******************************************!*\
  !*** ./jimu-ui/lib/icons/widget-link.svg ***!
  \*******************************************/
/***/ ((module) => {

module.exports = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\"><path fill=\"#000\" fill-rule=\"nonzero\" d=\"m6.262 6.972-.893-.893a.5.5 0 0 1 0-.707l.003-.003a.5.5 0 0 1 .707 0l.893.893.709-.709a1.003 1.003 0 0 0 0-1.419L4.844 1.297a1.003 1.003 0 0 0-1.419 0L1.297 3.425a1.003 1.003 0 0 0 0 1.419L4.134 7.68a1.003 1.003 0 0 0 1.419 0zm1.419 0 1.347 1.347.71-.71a2.006 2.006 0 0 1 2.837 0l2.837 2.838a2.006 2.006 0 0 1 0 2.837l-2.128 2.128a2.006 2.006 0 0 1-2.837 0L7.61 12.575a2.006 2.006 0 0 1 0-2.837l.709-.71-1.347-1.347-.71.71a2.006 2.006 0 0 1-2.837 0L.588 5.552a2.006 2.006 0 0 1 0-2.837L2.716.588a2.006 2.006 0 0 1 2.837 0L8.39 3.425a2.006 2.006 0 0 1 0 2.837zm2.057 2.056.599.6a.5.5 0 0 1 0 .707l-.002.002a.5.5 0 0 1-.707 0l-.6-.6-.709.71a1.003 1.003 0 0 0 0 1.419l2.837 2.837a1.003 1.003 0 0 0 1.419 0l2.128-2.128a1.003 1.003 0 0 0 0-1.419L11.866 8.32a1.003 1.003 0 0 0-1.419 0z\"></path></svg>"

/***/ }),

/***/ "./jimu-icons/filled/data/layer.tsx":
/*!******************************************!*\
  !*** ./jimu-icons/filled/data/layer.tsx ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   LayerFilled: () => (/* binding */ LayerFilled)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");
/* harmony import */ var _svg_filled_data_layer_svg__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../svg/filled/data/layer.svg */ "./jimu-icons/svg/filled/data/layer.svg");
/* harmony import */ var _svg_filled_data_layer_svg__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_svg_filled_data_layer_svg__WEBPACK_IMPORTED_MODULE_1__);
var __rest = (undefined && undefined.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};


const LayerFilled = (props) => {
    const SVG = window.SVG;
    const { className } = props, others = __rest(props, ["className"]);
    const classes = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.classNames)('jimu-icon jimu-icon-component', className);
    if (!SVG)
        return jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement("svg", Object.assign({ className: classes }, others));
    return jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement(SVG, Object.assign({ className: classes, src: (_svg_filled_data_layer_svg__WEBPACK_IMPORTED_MODULE_1___default()) }, others));
};


/***/ }),

/***/ "./jimu-icons/filled/data/widget.tsx":
/*!*******************************************!*\
  !*** ./jimu-icons/filled/data/widget.tsx ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   WidgetFilled: () => (/* binding */ WidgetFilled)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");
/* harmony import */ var _svg_filled_data_widget_svg__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../svg/filled/data/widget.svg */ "./jimu-icons/svg/filled/data/widget.svg");
/* harmony import */ var _svg_filled_data_widget_svg__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_svg_filled_data_widget_svg__WEBPACK_IMPORTED_MODULE_1__);
var __rest = (undefined && undefined.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};


const WidgetFilled = (props) => {
    const SVG = window.SVG;
    const { className } = props, others = __rest(props, ["className"]);
    const classes = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.classNames)('jimu-icon jimu-icon-component', className);
    if (!SVG)
        return jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement("svg", Object.assign({ className: classes }, others));
    return jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement(SVG, Object.assign({ className: classes, src: (_svg_filled_data_widget_svg__WEBPACK_IMPORTED_MODULE_1___default()) }, others));
};


/***/ }),

/***/ "./jimu-icons/filled/suggested/warning-circle.tsx":
/*!********************************************************!*\
  !*** ./jimu-icons/filled/suggested/warning-circle.tsx ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   WarningCircleFilled: () => (/* binding */ WarningCircleFilled)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");
/* harmony import */ var _svg_filled_suggested_warning_circle_svg__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../svg/filled/suggested/warning-circle.svg */ "./jimu-icons/svg/filled/suggested/warning-circle.svg");
/* harmony import */ var _svg_filled_suggested_warning_circle_svg__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_svg_filled_suggested_warning_circle_svg__WEBPACK_IMPORTED_MODULE_1__);
var __rest = (undefined && undefined.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};


const WarningCircleFilled = (props) => {
    const SVG = window.SVG;
    const { className } = props, others = __rest(props, ["className"]);
    const classes = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.classNames)('jimu-icon jimu-icon-component', className);
    if (!SVG)
        return jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement("svg", Object.assign({ className: classes }, others));
    return jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement(SVG, Object.assign({ className: classes, src: (_svg_filled_suggested_warning_circle_svg__WEBPACK_IMPORTED_MODULE_1___default()) }, others));
};


/***/ }),

/***/ "./jimu-icons/outlined/application/empty.tsx":
/*!***************************************************!*\
  !*** ./jimu-icons/outlined/application/empty.tsx ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   EmptyOutlined: () => (/* binding */ EmptyOutlined)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");
/* harmony import */ var _svg_outlined_application_empty_svg__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../svg/outlined/application/empty.svg */ "./jimu-icons/svg/outlined/application/empty.svg");
/* harmony import */ var _svg_outlined_application_empty_svg__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_svg_outlined_application_empty_svg__WEBPACK_IMPORTED_MODULE_1__);
var __rest = (undefined && undefined.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};


const EmptyOutlined = (props) => {
    const SVG = window.SVG;
    const { className } = props, others = __rest(props, ["className"]);
    const classes = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.classNames)('jimu-icon jimu-icon-component', className);
    if (!SVG)
        return jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement("svg", Object.assign({ className: classes }, others));
    return jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement(SVG, Object.assign({ className: classes, src: (_svg_outlined_application_empty_svg__WEBPACK_IMPORTED_MODULE_1___default()) }, others));
};


/***/ }),

/***/ "./jimu-icons/outlined/application/invisible.tsx":
/*!*******************************************************!*\
  !*** ./jimu-icons/outlined/application/invisible.tsx ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   InvisibleOutlined: () => (/* binding */ InvisibleOutlined)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");
/* harmony import */ var _svg_outlined_application_invisible_svg__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../svg/outlined/application/invisible.svg */ "./jimu-icons/svg/outlined/application/invisible.svg");
/* harmony import */ var _svg_outlined_application_invisible_svg__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_svg_outlined_application_invisible_svg__WEBPACK_IMPORTED_MODULE_1__);
var __rest = (undefined && undefined.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};


const InvisibleOutlined = (props) => {
    const SVG = window.SVG;
    const { className } = props, others = __rest(props, ["className"]);
    const classes = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.classNames)('jimu-icon jimu-icon-component', className);
    if (!SVG)
        return jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement("svg", Object.assign({ className: classes }, others));
    return jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement(SVG, Object.assign({ className: classes, src: (_svg_outlined_application_invisible_svg__WEBPACK_IMPORTED_MODULE_1___default()) }, others));
};


/***/ }),

/***/ "./jimu-icons/outlined/application/more-horizontal.tsx":
/*!*************************************************************!*\
  !*** ./jimu-icons/outlined/application/more-horizontal.tsx ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   MoreHorizontalOutlined: () => (/* binding */ MoreHorizontalOutlined)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");
/* harmony import */ var _svg_outlined_application_more_horizontal_svg__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../svg/outlined/application/more-horizontal.svg */ "./jimu-icons/svg/outlined/application/more-horizontal.svg");
/* harmony import */ var _svg_outlined_application_more_horizontal_svg__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_svg_outlined_application_more_horizontal_svg__WEBPACK_IMPORTED_MODULE_1__);
var __rest = (undefined && undefined.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};


const MoreHorizontalOutlined = (props) => {
    const SVG = window.SVG;
    const { className } = props, others = __rest(props, ["className"]);
    const classes = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.classNames)('jimu-icon jimu-icon-component', className);
    if (!SVG)
        return jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement("svg", Object.assign({ className: classes }, others));
    return jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement(SVG, Object.assign({ className: classes, src: (_svg_outlined_application_more_horizontal_svg__WEBPACK_IMPORTED_MODULE_1___default()) }, others));
};


/***/ }),

/***/ "./jimu-icons/outlined/application/setting.tsx":
/*!*****************************************************!*\
  !*** ./jimu-icons/outlined/application/setting.tsx ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SettingOutlined: () => (/* binding */ SettingOutlined)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");
/* harmony import */ var _svg_outlined_application_setting_svg__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../svg/outlined/application/setting.svg */ "./jimu-icons/svg/outlined/application/setting.svg");
/* harmony import */ var _svg_outlined_application_setting_svg__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_svg_outlined_application_setting_svg__WEBPACK_IMPORTED_MODULE_1__);
var __rest = (undefined && undefined.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};


const SettingOutlined = (props) => {
    const SVG = window.SVG;
    const { className } = props, others = __rest(props, ["className"]);
    const classes = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.classNames)('jimu-icon jimu-icon-component', className);
    if (!SVG)
        return jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement("svg", Object.assign({ className: classes }, others));
    return jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement(SVG, Object.assign({ className: classes, src: (_svg_outlined_application_setting_svg__WEBPACK_IMPORTED_MODULE_1___default()) }, others));
};


/***/ }),

/***/ "./jimu-icons/outlined/application/visible.tsx":
/*!*****************************************************!*\
  !*** ./jimu-icons/outlined/application/visible.tsx ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   VisibleOutlined: () => (/* binding */ VisibleOutlined)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");
/* harmony import */ var _svg_outlined_application_visible_svg__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../svg/outlined/application/visible.svg */ "./jimu-icons/svg/outlined/application/visible.svg");
/* harmony import */ var _svg_outlined_application_visible_svg__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_svg_outlined_application_visible_svg__WEBPACK_IMPORTED_MODULE_1__);
var __rest = (undefined && undefined.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};


const VisibleOutlined = (props) => {
    const SVG = window.SVG;
    const { className } = props, others = __rest(props, ["className"]);
    const classes = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.classNames)('jimu-icon jimu-icon-component', className);
    if (!SVG)
        return jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement("svg", Object.assign({ className: classes }, others));
    return jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement(SVG, Object.assign({ className: classes, src: (_svg_outlined_application_visible_svg__WEBPACK_IMPORTED_MODULE_1___default()) }, others));
};


/***/ }),

/***/ "./jimu-icons/outlined/data/globe.tsx":
/*!********************************************!*\
  !*** ./jimu-icons/outlined/data/globe.tsx ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   GlobeOutlined: () => (/* binding */ GlobeOutlined)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");
/* harmony import */ var _svg_outlined_data_globe_svg__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../svg/outlined/data/globe.svg */ "./jimu-icons/svg/outlined/data/globe.svg");
/* harmony import */ var _svg_outlined_data_globe_svg__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_svg_outlined_data_globe_svg__WEBPACK_IMPORTED_MODULE_1__);
var __rest = (undefined && undefined.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};


const GlobeOutlined = (props) => {
    const SVG = window.SVG;
    const { className } = props, others = __rest(props, ["className"]);
    const classes = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.classNames)('jimu-icon jimu-icon-component', className);
    if (!SVG)
        return jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement("svg", Object.assign({ className: classes }, others));
    return jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement(SVG, Object.assign({ className: classes, src: (_svg_outlined_data_globe_svg__WEBPACK_IMPORTED_MODULE_1___default()) }, others));
};


/***/ }),

/***/ "./jimu-icons/outlined/directional/down.tsx":
/*!**************************************************!*\
  !*** ./jimu-icons/outlined/directional/down.tsx ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DownOutlined: () => (/* binding */ DownOutlined)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");
/* harmony import */ var _svg_outlined_directional_down_svg__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../svg/outlined/directional/down.svg */ "./jimu-icons/svg/outlined/directional/down.svg");
/* harmony import */ var _svg_outlined_directional_down_svg__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_svg_outlined_directional_down_svg__WEBPACK_IMPORTED_MODULE_1__);
var __rest = (undefined && undefined.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};


const DownOutlined = (props) => {
    const SVG = window.SVG;
    const { className } = props, others = __rest(props, ["className"]);
    const classes = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.classNames)('jimu-icon jimu-icon-component', className);
    if (!SVG)
        return jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement("svg", Object.assign({ className: classes }, others));
    return jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement(SVG, Object.assign({ className: classes, src: (_svg_outlined_directional_down_svg__WEBPACK_IMPORTED_MODULE_1___default()) }, others));
};


/***/ }),

/***/ "./jimu-icons/outlined/directional/up.tsx":
/*!************************************************!*\
  !*** ./jimu-icons/outlined/directional/up.tsx ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   UpOutlined: () => (/* binding */ UpOutlined)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");
/* harmony import */ var _svg_outlined_directional_up_svg__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../svg/outlined/directional/up.svg */ "./jimu-icons/svg/outlined/directional/up.svg");
/* harmony import */ var _svg_outlined_directional_up_svg__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_svg_outlined_directional_up_svg__WEBPACK_IMPORTED_MODULE_1__);
var __rest = (undefined && undefined.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};


const UpOutlined = (props) => {
    const SVG = window.SVG;
    const { className } = props, others = __rest(props, ["className"]);
    const classes = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.classNames)('jimu-icon jimu-icon-component', className);
    if (!SVG)
        return jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement("svg", Object.assign({ className: classes }, others));
    return jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement(SVG, Object.assign({ className: classes, src: (_svg_outlined_directional_up_svg__WEBPACK_IMPORTED_MODULE_1___default()) }, others));
};


/***/ }),

/***/ "./jimu-icons/outlined/editor/close.tsx":
/*!**********************************************!*\
  !*** ./jimu-icons/outlined/editor/close.tsx ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CloseOutlined: () => (/* binding */ CloseOutlined)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");
/* harmony import */ var _svg_outlined_editor_close_svg__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../svg/outlined/editor/close.svg */ "./jimu-icons/svg/outlined/editor/close.svg");
/* harmony import */ var _svg_outlined_editor_close_svg__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_svg_outlined_editor_close_svg__WEBPACK_IMPORTED_MODULE_1__);
var __rest = (undefined && undefined.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};


const CloseOutlined = (props) => {
    const SVG = window.SVG;
    const { className } = props, others = __rest(props, ["className"]);
    const classes = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.classNames)('jimu-icon jimu-icon-component', className);
    if (!SVG)
        return jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement("svg", Object.assign({ className: classes }, others));
    return jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement(SVG, Object.assign({ className: classes, src: (_svg_outlined_editor_close_svg__WEBPACK_IMPORTED_MODULE_1___default()) }, others));
};


/***/ }),

/***/ "./jimu-icons/outlined/editor/duplicate.tsx":
/*!**************************************************!*\
  !*** ./jimu-icons/outlined/editor/duplicate.tsx ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DuplicateOutlined: () => (/* binding */ DuplicateOutlined)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");
/* harmony import */ var _svg_outlined_editor_duplicate_svg__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../svg/outlined/editor/duplicate.svg */ "./jimu-icons/svg/outlined/editor/duplicate.svg");
/* harmony import */ var _svg_outlined_editor_duplicate_svg__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_svg_outlined_editor_duplicate_svg__WEBPACK_IMPORTED_MODULE_1__);
var __rest = (undefined && undefined.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};


const DuplicateOutlined = (props) => {
    const SVG = window.SVG;
    const { className } = props, others = __rest(props, ["className"]);
    const classes = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.classNames)('jimu-icon jimu-icon-component', className);
    if (!SVG)
        return jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement("svg", Object.assign({ className: classes }, others));
    return jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement(SVG, Object.assign({ className: classes, src: (_svg_outlined_editor_duplicate_svg__WEBPACK_IMPORTED_MODULE_1___default()) }, others));
};


/***/ }),

/***/ "./jimu-icons/outlined/editor/edit.tsx":
/*!*********************************************!*\
  !*** ./jimu-icons/outlined/editor/edit.tsx ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   EditOutlined: () => (/* binding */ EditOutlined)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");
/* harmony import */ var _svg_outlined_editor_edit_svg__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../svg/outlined/editor/edit.svg */ "./jimu-icons/svg/outlined/editor/edit.svg");
/* harmony import */ var _svg_outlined_editor_edit_svg__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_svg_outlined_editor_edit_svg__WEBPACK_IMPORTED_MODULE_1__);
var __rest = (undefined && undefined.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};


const EditOutlined = (props) => {
    const SVG = window.SVG;
    const { className } = props, others = __rest(props, ["className"]);
    const classes = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.classNames)('jimu-icon jimu-icon-component', className);
    if (!SVG)
        return jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement("svg", Object.assign({ className: classes }, others));
    return jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement(SVG, Object.assign({ className: classes, src: (_svg_outlined_editor_edit_svg__WEBPACK_IMPORTED_MODULE_1___default()) }, others));
};


/***/ }),

/***/ "./jimu-icons/outlined/editor/plus.tsx":
/*!*********************************************!*\
  !*** ./jimu-icons/outlined/editor/plus.tsx ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   PlusOutlined: () => (/* binding */ PlusOutlined)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");
/* harmony import */ var _svg_outlined_editor_plus_svg__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../svg/outlined/editor/plus.svg */ "./jimu-icons/svg/outlined/editor/plus.svg");
/* harmony import */ var _svg_outlined_editor_plus_svg__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_svg_outlined_editor_plus_svg__WEBPACK_IMPORTED_MODULE_1__);
var __rest = (undefined && undefined.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};


const PlusOutlined = (props) => {
    const SVG = window.SVG;
    const { className } = props, others = __rest(props, ["className"]);
    const classes = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.classNames)('jimu-icon jimu-icon-component', className);
    if (!SVG)
        return jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement("svg", Object.assign({ className: classes }, others));
    return jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement(SVG, Object.assign({ className: classes, src: (_svg_outlined_editor_plus_svg__WEBPACK_IMPORTED_MODULE_1___default()) }, others));
};


/***/ }),

/***/ "./jimu-icons/outlined/editor/preview.tsx":
/*!************************************************!*\
  !*** ./jimu-icons/outlined/editor/preview.tsx ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   PreviewOutlined: () => (/* binding */ PreviewOutlined)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");
/* harmony import */ var _svg_outlined_editor_preview_svg__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../svg/outlined/editor/preview.svg */ "./jimu-icons/svg/outlined/editor/preview.svg");
/* harmony import */ var _svg_outlined_editor_preview_svg__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_svg_outlined_editor_preview_svg__WEBPACK_IMPORTED_MODULE_1__);
var __rest = (undefined && undefined.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};


const PreviewOutlined = (props) => {
    const SVG = window.SVG;
    const { className } = props, others = __rest(props, ["className"]);
    const classes = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.classNames)('jimu-icon jimu-icon-component', className);
    if (!SVG)
        return jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement("svg", Object.assign({ className: classes }, others));
    return jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement(SVG, Object.assign({ className: classes, src: (_svg_outlined_editor_preview_svg__WEBPACK_IMPORTED_MODULE_1___default()) }, others));
};


/***/ }),

/***/ "./jimu-icons/outlined/editor/search.tsx":
/*!***********************************************!*\
  !*** ./jimu-icons/outlined/editor/search.tsx ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SearchOutlined: () => (/* binding */ SearchOutlined)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");
/* harmony import */ var _svg_outlined_editor_search_svg__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../svg/outlined/editor/search.svg */ "./jimu-icons/svg/outlined/editor/search.svg");
/* harmony import */ var _svg_outlined_editor_search_svg__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_svg_outlined_editor_search_svg__WEBPACK_IMPORTED_MODULE_1__);
var __rest = (undefined && undefined.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};


const SearchOutlined = (props) => {
    const SVG = window.SVG;
    const { className } = props, others = __rest(props, ["className"]);
    const classes = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.classNames)('jimu-icon jimu-icon-component', className);
    if (!SVG)
        return jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement("svg", Object.assign({ className: classes }, others));
    return jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement(SVG, Object.assign({ className: classes, src: (_svg_outlined_editor_search_svg__WEBPACK_IMPORTED_MODULE_1___default()) }, others));
};


/***/ }),

/***/ "./jimu-icons/outlined/editor/trash.tsx":
/*!**********************************************!*\
  !*** ./jimu-icons/outlined/editor/trash.tsx ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TrashOutlined: () => (/* binding */ TrashOutlined)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");
/* harmony import */ var _svg_outlined_editor_trash_svg__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../svg/outlined/editor/trash.svg */ "./jimu-icons/svg/outlined/editor/trash.svg");
/* harmony import */ var _svg_outlined_editor_trash_svg__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_svg_outlined_editor_trash_svg__WEBPACK_IMPORTED_MODULE_1__);
var __rest = (undefined && undefined.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};


const TrashOutlined = (props) => {
    const SVG = window.SVG;
    const { className } = props, others = __rest(props, ["className"]);
    const classes = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.classNames)('jimu-icon jimu-icon-component', className);
    if (!SVG)
        return jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement("svg", Object.assign({ className: classes }, others));
    return jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement(SVG, Object.assign({ className: classes, src: (_svg_outlined_editor_trash_svg__WEBPACK_IMPORTED_MODULE_1___default()) }, others));
};


/***/ }),

/***/ "./jimu-icons/outlined/suggested/info.tsx":
/*!************************************************!*\
  !*** ./jimu-icons/outlined/suggested/info.tsx ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   InfoOutlined: () => (/* binding */ InfoOutlined)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");
/* harmony import */ var _svg_outlined_suggested_info_svg__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../svg/outlined/suggested/info.svg */ "./jimu-icons/svg/outlined/suggested/info.svg");
/* harmony import */ var _svg_outlined_suggested_info_svg__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_svg_outlined_suggested_info_svg__WEBPACK_IMPORTED_MODULE_1__);
var __rest = (undefined && undefined.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};


const InfoOutlined = (props) => {
    const SVG = window.SVG;
    const { className } = props, others = __rest(props, ["className"]);
    const classes = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.classNames)('jimu-icon jimu-icon-component', className);
    if (!SVG)
        return jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement("svg", Object.assign({ className: classes }, others));
    return jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement(SVG, Object.assign({ className: classes, src: (_svg_outlined_suggested_info_svg__WEBPACK_IMPORTED_MODULE_1___default()) }, others));
};


/***/ }),

/***/ "./jimu-ui/advanced/lib/data-source-selector/components/data-source-error-item.tsx":
/*!*****************************************************************************************!*\
  !*** ./jimu-ui/advanced/lib/data-source-selector/components/data-source-error-item.tsx ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DataSourceErrorItem: () => (/* binding */ DataSourceErrorItem)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");
/* harmony import */ var _data_source_item__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./data-source-item */ "./jimu-ui/advanced/lib/data-source-selector/components/data-source-item.tsx");
/* harmony import */ var jimu_theme__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! jimu-theme */ "jimu-theme");
/** @jsx jsx */



class _DataSourceErrorItem extends jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.PureComponent {
    render() {
        if (!this.props.dataSourceJson) {
            return null;
        }
        return ((0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.classNames)({ [this.props.className]: !!this.props.className }) },
            (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'component-data-source-error-item' },
                (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(_data_source_item__WEBPACK_IMPORTED_MODULE_1__.DataSourceItem, Object.assign({}, this.props)))));
    }
}
const DataSourceErrorItem = (0,jimu_theme__WEBPACK_IMPORTED_MODULE_2__.withStyles)(_DataSourceErrorItem, 'DataSourceErrorItem');


/***/ }),

/***/ "./jimu-ui/advanced/lib/data-source-selector/components/data-source-item.tsx":
/*!***********************************************************************************!*\
  !*** ./jimu-ui/advanced/lib/data-source-selector/components/data-source-item.tsx ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DataSourceItem: () => (/* binding */ DataSourceItem)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");
/* harmony import */ var jimu_ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! jimu-ui */ "jimu-ui");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils */ "./jimu-ui/advanced/lib/data-source-selector/utils.ts");
/* harmony import */ var jimu_ui_basic_item_selector__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! jimu-ui/basic/item-selector */ "jimu-ui/basic/item-selector");
/* harmony import */ var jimu_theme__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! jimu-theme */ "jimu-theme");
/* harmony import */ var jimu_icons_outlined_application_more_horizontal__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! jimu-icons/outlined/application/more-horizontal */ "./jimu-icons/outlined/application/more-horizontal.tsx");
/* harmony import */ var jimu_icons_outlined_editor_close__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! jimu-icons/outlined/editor/close */ "./jimu-icons/outlined/editor/close.tsx");
/* harmony import */ var jimu_icons_filled_data_layer__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! jimu-icons/filled/data/layer */ "./jimu-icons/filled/data/layer.tsx");
/* harmony import */ var jimu_icons_filled_data_widget__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! jimu-icons/filled/data/widget */ "./jimu-icons/filled/data/widget.tsx");
/* harmony import */ var jimu_icons_outlined_application_visible__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! jimu-icons/outlined/application/visible */ "./jimu-icons/outlined/application/visible.tsx");
/* harmony import */ var jimu_icons_outlined_application_invisible__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! jimu-icons/outlined/application/invisible */ "./jimu-icons/outlined/application/invisible.tsx");
/* harmony import */ var jimu_icons_outlined_editor_preview__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! jimu-icons/outlined/editor/preview */ "./jimu-icons/outlined/editor/preview.tsx");
/* harmony import */ var jimu_icons_outlined_suggested_info__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! jimu-icons/outlined/suggested/info */ "./jimu-icons/outlined/suggested/info.tsx");
/** @jsx jsx */













class _DataSourceItem extends jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.PureComponent {
    constructor(props) {
        super(props);
        this.onLabelChange = e => {
            this.setState({
                newLabel: e.target.value
            });
        };
        this.onMoreIconClick = e => {
            this.stopPropagation(e);
            this.props.onMoreIconClick && this.props.onMoreIconClick(this.props.dataSourceJson);
        };
        this.onCloseIconClick = e => {
            this.stopPropagation(e);
            this.props.onCloseIconClick && this.props.onCloseIconClick(this.props.dataSourceJson);
        };
        this.onRename = () => {
            const newLabel = this.state.newLabel.trim();
            this.props.onRename && this.props.onRename(newLabel);
        };
        this.onDataSourceItemClick = e => {
            this.stopPropagation(e);
            this.props.onDataSourceItemClick && this.props.onDataSourceItemClick(this.props.dataSourceJson);
        };
        this.onDataSourceItemKeyDown = e => {
            if (e.target === e.currentTarget && (e.key === 'Enter' || e.key === ' ')) {
                this.onDataSourceItemClick(e);
            }
        };
        this.onMappingIconClick = e => {
            this.stopPropagation(e);
            this.props.onMappingIconClick && this.props.onMappingIconClick(this.props.dataSourceJson);
        };
        this.onHideIconClick = e => {
            this.stopPropagation(e);
            this.props.onToggleHidden && this.props.onToggleHidden(this.props.dataSourceJson);
        };
        this.onChildDataIconClick = e => {
            this.stopPropagation(e);
            this.props.onChildDataIconClick && this.props.onChildDataIconClick(this.props.dataSourceJson);
        };
        this.onRelatedWidgetsIconClick = e => {
            this.stopPropagation(e);
            this.props.onRelatedWidgetsIconClick && this.props.onRelatedWidgetsIconClick(this.props.dataSourceJson);
        };
        this.stopPropagation = e => {
            e.stopPropagation();
            e.nativeEvent.stopImmediatePropagation();
        };
        this.getWhetherIsSetDs = (dsJson) => {
            if (!dsJson) {
                return false;
            }
            const ds = jimu_core__WEBPACK_IMPORTED_MODULE_0__.DataSourceManager.getInstance().getDataSource(dsJson.id);
            if (!ds) {
                return false;
            }
            return ds.isDataSourceSet;
        };
        this.getChildDssLength = (dsJson) => {
            if (!dsJson) {
                return null;
            }
            const ds = jimu_core__WEBPACK_IMPORTED_MODULE_0__.DataSourceManager.getInstance().getDataSource(dsJson.id);
            if (!ds || !ds.isDataSourceSet) {
                return null;
            }
            return ds.getChildDataSources().length;
        };
        this.getLabel = () => {
            var _a, _b, _c, _d;
            const ds = jimu_core__WEBPACK_IMPORTED_MODULE_0__.DataSourceManager.getInstance().getDataSource((_a = this.props.dataSourceJson) === null || _a === void 0 ? void 0 : _a.id);
            return (ds === null || ds === void 0 ? void 0 : ds.getLabel()) || ((_b = this.props.dataSourceJson) === null || _b === void 0 ? void 0 : _b.label) || ((_c = this.props.dataSourceJson) === null || _c === void 0 ? void 0 : _c.sourceLabel) || ((_d = this.props.dataSourceJson) === null || _d === void 0 ? void 0 : _d.id) || '';
        };
        this.state = {
            newLabel: this.getLabel()
        };
    }
    componentDidUpdate(prevProps, prevState) {
        if (prevProps.isRenameInputShown !== this.props.isRenameInputShown && this.props.isRenameInputShown && this.renameInput) {
            this.renameInput.focus();
            this.renameInput.select();
        }
        if (prevProps.dataSourceJson !== this.props.dataSourceJson) {
            this.setState({
                newLabel: this.getLabel()
            });
        }
    }
    render() {
        var _a, _b, _c, _d, _e;
        if (!this.props.dataSourceJson) {
            return null;
        }
        const relatedWidgets = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.getWidgetsUsingDsOrItsViews)(this.props.dataSourceJson.id, this.props.widgets, false);
        const allRelatedWidgets = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.getWidgetsUsingDsOrItsDescendantDss)(this.props.dataSourceJson.id, this.props.widgets);
        const originalDataUrl = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.getOriginalDataUrl)(this.props.dataSourceJson);
        const isSetDs = this.getWhetherIsSetDs(this.props.dataSourceJson);
        let childDssLength;
        if (isSetDs) {
            childDssLength = this.getChildDssLength(this.props.dataSourceJson);
        }
        const dsTypeString = jimu_core__WEBPACK_IMPORTED_MODULE_0__.dataSourceUtils.getDsTypeString(this.props.dataSourceJson.type, this.props.intl);
        const label = this.getLabel();
        const ds = jimu_core__WEBPACK_IMPORTED_MODULE_0__.DataSourceManager.getInstance().getDataSource(this.props.dataSourceJson.id);
        const itemInfo = jimu_core__WEBPACK_IMPORTED_MODULE_0__.dataSourceUtils.isItemMixin(ds) ? ds.getItemInfo() : null;
        return ((0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.classNames)({ [this.props.className]: !!this.props.className }) },
            (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.classNames)('component-data-source-item', { 'component-data-source-item-selected-item': this.props.isSelected, 'cursor-pointer': !!this.props.onDataSourceItemClick }), onClick: this.onDataSourceItemClick, tabIndex: 0, onKeyDown: this.onDataSourceItemKeyDown, role: 'option' },
                this.props.isLoadingShown && (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'loading-container' },
                    (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.Loading, { type: jimu_ui__WEBPACK_IMPORTED_MODULE_1__.LoadingType.Bar })),
                (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'd-flex justify-content-between align-items-center ds-item-header' },
                    (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'd-flex align-items-center w-100', title: dsTypeString },
                        (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'd-flex align-items-center justify-content-center flex-shrink-0 ds-thumbnail' },
                            (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.Icon, { icon: jimu_core__WEBPACK_IMPORTED_MODULE_0__.dataSourceUtils.getDsIcon(this.props.dataSourceJson), className: 'text-dark', size: '12' })),
                        (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'flex-grow-1 text-truncate pl-2 ds-type' },
                            (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'text-truncate ds-type-name' }, dsTypeString))),
                    (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'd-flex' },
                        (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'ml-1 flex-shrink-0 d-flex align-items-center ds-badge' }, !this.props.isLoadingShown && (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_ui_basic_item_selector__WEBPACK_IMPORTED_MODULE_3__.DataBadge, { item: itemInfo, itemId: (_a = this.props.dataSourceJson) === null || _a === void 0 ? void 0 : _a.itemId, portalUrl: (_b = this.props.dataSourceJson) === null || _b === void 0 ? void 0 : _b.portalUrl, url: (_c = this.props.dataSourceJson) === null || _c === void 0 ? void 0 : _c.url })),
                        this.props.isErrorIconShown
                            ? (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'ml-1 flex-shrink-0 d-flex align-items-center ds-more p-2' },
                                (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("span", { className: 'd-flex justify-content-center', title: this.props.intl.formatMessage({ id: 'uploadImageError', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_1__.defaultMessages.uploadImageError }) },
                                    (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_icons_outlined_suggested_info__WEBPACK_IMPORTED_MODULE_12__.InfoOutlined, { className: 'align-baseline warning-icon', size: 'm' })))
                            : null,
                        this.props.isHideable
                            ? (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.Button, { size: 'sm', icon: true, type: 'tertiary', className: 'flex-shrink-0 ds-more p-2', onClick: this.onHideIconClick },
                                (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("span", { className: 'd-flex justify-content-center', title: ((_d = this.props.dataSourceJson) === null || _d === void 0 ? void 0 : _d.isHidden)
                                        ? this.props.intl.formatMessage({ id: 'clickToShow', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_1__.defaultMessages.clickToShow })
                                        : this.props.intl.formatMessage({ id: 'clickToHide', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_1__.defaultMessages.clickToHide }) }, ((_e = this.props.dataSourceJson) === null || _e === void 0 ? void 0 : _e.isHidden) ? (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_icons_outlined_application_invisible__WEBPACK_IMPORTED_MODULE_10__.InvisibleOutlined, { className: 'align-baseline', size: 'm' }) : (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_icons_outlined_application_visible__WEBPACK_IMPORTED_MODULE_9__.VisibleOutlined, { className: 'align-baseline', size: 'm' })))
                            : null,
                        this.props.isMoreIconShown
                            ? (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.Button, { size: 'sm', icon: true, type: 'tertiary', className: 'flex-shrink-0 ds-more p-2', onClick: this.onMoreIconClick },
                                (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("span", { className: 'd-flex justify-content-center', title: this.props.intl.formatMessage({ id: 'more', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_1__.defaultMessages.more }) },
                                    (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_icons_outlined_application_more_horizontal__WEBPACK_IMPORTED_MODULE_5__.MoreHorizontalOutlined, { className: 'align-baseline', size: 'm' })))
                            : null,
                        this.props.isCloseIconShown
                            ? (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.Button, { size: 'sm', icon: true, type: 'tertiary', className: 'flex-shrink-0 ds-more p-2', onClick: this.onCloseIconClick },
                                (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("span", { className: 'd-flex justify-content-center', title: this.props.intl.formatMessage({ id: 'remove', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_1__.defaultMessages.remove }) },
                                    (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_icons_outlined_editor_close__WEBPACK_IMPORTED_MODULE_6__.CloseOutlined, { className: 'align-baseline ds-close-icon', size: 'm' })))
                            : null)),
                (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'ds-item-body' },
                    this.props.isRenameInputShown
                        ? (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.TextInput, { className: 'flex-grow-1 text-truncate p-1 ds-label ds-label-input', ref: n => { this.renameInput = n; }, onBlur: this.onRename, onKeyUp: this.onRename, onChange: this.onLabelChange, value: this.state.newLabel, onClick: this.stopPropagation })
                        : (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'flex-grow-1 two-line-truncate ds-label text-left', title: label }, label),
                    (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.classNames)('d-flex justify-content-between', { 'mt-4': originalDataUrl || this.props.isMappingIconShown }) },
                        (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'd-flex' },
                            isSetDs
                                ? (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.Button, { type: 'tertiary', className: 'mr-6 p-0 ds-child-dss', onClick: this.onChildDataIconClick, title: `${this.props.intl.formatMessage({ id: 'containLayersWithNum', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_1__.defaultMessages.containLayersWithNum }, { layerNum: childDssLength })}` },
                                    (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("span", null,
                                        (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_icons_filled_data_layer__WEBPACK_IMPORTED_MODULE_7__.LayerFilled, { size: 'm', className: 'mr-1' }),
                                        (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("span", { className: 'align-middle' }, childDssLength)))
                                : null,
                            this.props.isRelatedWidgetsShown
                                ? (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.Button, { type: 'tertiary', className: 'p-0 flex-grow-1 text-truncate flex-row ds-related-widgets', onClick: this.onRelatedWidgetsIconClick, title: this.props.intl.formatMessage({
                                        id: 'relatedWidgetsWithNum',
                                        defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_1__.defaultMessages.relatedWidgetsWithNum
                                    }, {
                                        directlyNum: relatedWidgets.length,
                                        totalNum: allRelatedWidgets.length
                                    }) },
                                    (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("span", null,
                                        (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_icons_filled_data_widget__WEBPACK_IMPORTED_MODULE_8__.WidgetFilled, { size: 'm', className: 'mr-1' }),
                                        (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("span", { className: 'align-middle' }, `${relatedWidgets.length} / ${allRelatedWidgets.length}`)))
                                : null),
                        originalDataUrl
                            ? (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.Button, { size: 'sm', icon: true, type: 'tertiary', className: 'ds-origin-label', href: originalDataUrl, target: '_blank', onClick: this.stopPropagation, title: this.props.intl.formatMessage({ id: 'source', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_1__.defaultMessages.source }, { directlyNum: relatedWidgets.length, totalNum: allRelatedWidgets.length }) },
                                (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_icons_outlined_editor_preview__WEBPACK_IMPORTED_MODULE_11__.PreviewOutlined, { className: 'm-0', size: 'm' }))
                            : null)))));
    }
}
const mapStateToProps = (state, ownProps) => {
    var _a, _b;
    const appState = ((_a = window === null || window === void 0 ? void 0 : window.jimuConfig) === null || _a === void 0 ? void 0 : _a.isBuilder) ? state.appStateInBuilder : state;
    if (ownProps.isRelatedWidgetsShown) {
        return {
            widgets: (_b = appState === null || appState === void 0 ? void 0 : appState.appConfig) === null || _b === void 0 ? void 0 : _b.widgets
        };
    }
    else {
        return null;
    }
};
const DataSourceItem = jimu_core__WEBPACK_IMPORTED_MODULE_0__.ReactRedux.connect(mapStateToProps)((0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.injectIntl)((0,jimu_theme__WEBPACK_IMPORTED_MODULE_4__.withStyles)(_DataSourceItem, 'DataSourceItem')));


/***/ }),

/***/ "./jimu-ui/advanced/lib/data-source-selector/components/data-source-list/components/common/ds-item.tsx":
/*!*************************************************************************************************************!*\
  !*** ./jimu-ui/advanced/lib/data-source-selector/components/data-source-list/components/common/ds-item.tsx ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ DsItem)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");
/* harmony import */ var jimu_ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! jimu-ui */ "jimu-ui");
/* harmony import */ var jimu_layouts_layout_runtime__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! jimu-layouts/layout-runtime */ "jimu-layouts/layout-runtime");



class DsItem extends jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.PureComponent {
    constructor() {
        super(...arguments);
        this.getWhetherSelected = () => {
            return this.props.useDataSources && this.props.useDataSources.some(useDs => {
                const dsId = (useDs === null || useDs === void 0 ? void 0 : useDs.mainDataSourceId) || (useDs === null || useDs === void 0 ? void 0 : useDs.dataSourceId);
                return dsId === this.props.ds.getMainDataSource().id;
            });
        };
        this.getParentWidget = (widgetId) => {
            var _a, _b, _c;
            const config = (_b = (_a = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().getState()) === null || _a === void 0 ? void 0 : _a.appStateInBuilder) === null || _b === void 0 ? void 0 : _b.appConfig;
            if (!config || !widgetId) {
                return null;
            }
            const widgets = (_c = config.widgets) !== null && _c !== void 0 ? _c : (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.Immutable)({});
            const passDataSourceToChildrenWidgets = (Object.values(widgets)).filter(w => { var _a; return w.useDataSources && w.layouts && ((_a = w.manifest.properties) === null || _a === void 0 ? void 0 : _a.passDataSourceToChildren); });
            if (passDataSourceToChildrenWidgets.length === 0) {
                return null;
            }
            let childWidgets = [];
            const parentWidget = passDataSourceToChildrenWidgets.find(w => {
                childWidgets = jimu_layouts_layout_runtime__WEBPACK_IMPORTED_MODULE_2__.searchUtils.getChildrenContents(config, w.id, jimu_core__WEBPACK_IMPORTED_MODULE_0__.LayoutItemType.Widget, true);
                return childWidgets && childWidgets.some(cW => cW.id === widgetId);
            }) || null;
            return parentWidget;
        };
        this.getUseDsWithoutFields = (useDs) => {
            if (!useDs) {
                return null;
            }
            const useDsWithoutFields = {};
            Object.keys(useDs).forEach(key => {
                if (key !== 'fields') {
                    useDsWithoutFields[key] = useDs[key];
                }
            });
        };
        this.getUseDs = () => {
            let useDs = {
                dataSourceId: this.props.ds.id,
                mainDataSourceId: this.props.ds.id
            };
            // TODO: can have grandparent?
            const parentWidget = this.getParentWidget(this.props.widgetId);
            const parentWidgetUseDss = (parentWidget === null || parentWidget === void 0 ? void 0 : parentWidget.useDataSources) || [];
            const useDsInParentWidget = parentWidgetUseDss.find(u => {
                const dsObj = jimu_core__WEBPACK_IMPORTED_MODULE_0__.DataSourceManager.getInstance().getDataSource(u.dataSourceId);
                const mainDsObj = dsObj && dsObj.getMainDataSource();
                return mainDsObj && mainDsObj.id === useDs.mainDataSourceId;
            });
            if (useDsInParentWidget) { // use data source is one of parent widget's use data sources
                useDs = this.getUseDsWithoutFields(useDsInParentWidget); // keep same view with parent widget
            }
            else {
                const rootDs = this.props.ds.getRootDataSource && this.props.ds.getRootDataSource();
                if (rootDs) {
                    useDs.rootDataSourceId = rootDs.id;
                }
            }
            if (this.props.ds.getDataSourceJson().isOutputFromWidget) {
                // If output data source, widgets should use output view, istead of the main data source.
                useDs.mainDataSourceId = this.props.ds.getMainDataSource().id;
                useDs.dataSourceId = jimu_core__WEBPACK_IMPORTED_MODULE_0__.DataSourceManager.getInstance().getDataViewDataSourceId(useDs.mainDataSourceId, jimu_core__WEBPACK_IMPORTED_MODULE_0__.CONSTANTS.OUTPUT_DATA_VIEW_ID);
                useDs.dataViewId = jimu_core__WEBPACK_IMPORTED_MODULE_0__.CONSTANTS.OUTPUT_DATA_VIEW_ID;
            }
            return useDs;
        };
        this.getDsLabel = (ds) => {
            if (!ds) {
                return '';
            }
            const label = ds.getLabel();
            return label || ds.id;
        };
        this.onItemClick = e => {
            if (this.getWhetherSelected()) {
                if (this.props.disableRemove) {
                    return;
                }
                this.onDsRemoved(this.getUseDs());
            }
            else {
                if (this.props.disableSelection) {
                    if (this.props.onClickDisabledDsItem) {
                        this.props.onClickDisabledDsItem();
                    }
                    return;
                }
                this.onDsSelected(this.getUseDs());
            }
        };
        this.onDsSelected = (selectedDs) => {
            if (!selectedDs) {
                return;
            }
            let useDataSources;
            if (!this.props.useDataSources || !this.props.isMultiple) {
                useDataSources = [selectedDs];
            }
            else {
                useDataSources = this.props.useDataSources.asMutable({ deep: true }).concat(selectedDs);
            }
            this.props.onChange && this.props.onChange(useDataSources);
        };
        this.onDsRemoved = (removedDs) => {
            if (!removedDs || !this.props.useDataSources) {
                return;
            }
            const selectedDsJsons = this.props.useDataSources.filter(useDs => (useDs === null || useDs === void 0 ? void 0 : useDs.mainDataSourceId) !== removedDs.mainDataSourceId);
            this.props.onChange && this.props.onChange(selectedDsJsons.asMutable({ deep: true }));
        };
    }
    render() {
        var _a;
        if (!this.props.ds || !this.props.ds.getDataSourceJson()) {
            return null;
        }
        const isSelected = this.getWhetherSelected();
        const label = this.getDsLabel(this.props.ds);
        return (jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.Button, { type: 'tertiary', onClick: this.onItemClick, className: (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.classNames)('ds-item text-left', { 'ds-item-selected': isSelected, [this.props.className]: !!this.props.className }), "aria-checked": isSelected, "aria-label": label, title: label },
            jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement("div", { className: (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.classNames)({ 'item-active-icon': isSelected }, { 'd-none': !isSelected }) },
                jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement("div", { className: 'text-center item-active-icon-container' })),
            jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement("div", { className: 'd-flex align-items-center w-100 item' },
                jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement("div", { className: 'd-flex align-items-center justify-content-center flex-shrink-0 ds-thumbnail', title: jimu_core__WEBPACK_IMPORTED_MODULE_0__.dataSourceUtils.getDsTypeString((_a = this.props.ds) === null || _a === void 0 ? void 0 : _a.type, this.props.intl) },
                    jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.Icon, { icon: jimu_core__WEBPACK_IMPORTED_MODULE_0__.dataSourceUtils.getDsIcon(this.props.ds.getDataSourceJson()), className: 'text-dark m-0', size: '12' })),
                jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement("div", { className: 'flex-grow-1 text-truncate pl-2 ds-type' },
                    jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement("div", { className: 'text-truncate ds-type-name' }, label)))));
    }
}


/***/ }),

/***/ "./jimu-ui/advanced/lib/data-source-selector/components/data-source-list/components/common/ds-types.tsx":
/*!**************************************************************************************************************!*\
  !*** ./jimu-ui/advanced/lib/data-source-selector/components/data-source-list/components/common/ds-types.tsx ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ DsTypes)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");
/* harmony import */ var jimu_ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! jimu-ui */ "jimu-ui");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils */ "./jimu-ui/advanced/lib/data-source-selector/components/data-source-list/utils.ts");



class DsTypes extends jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.PureComponent {
    constructor() {
        super(...arguments);
        this.__unmount = false;
        this.getWhetherDisableSelectionType = (types) => {
            return types.length <= 1;
        };
        this.onTypeSelected = e => {
            const t = e.target.value;
            let types;
            if (t === 'All') {
                types = null;
            }
            else {
                types = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.Immutable)([t]);
            }
            this.props.onTypeSelected(types);
        };
    }
    render() {
        var _a;
        const types = this.props.toUseTypes
            ? (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.Immutable)(Array.from(new Set(this.props.toUseTypes.asMutable())))
            : (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.Immutable)([]);
        const hideAll = this.props.hideAllOptionOfTypeDropdown;
        return (jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement("div", { className: 'd-flex justify-content-between align-items-center to-use-types' },
            jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement("div", { className: 'mr-2 w-25 text-truncate', title: this.props.intl.formatMessage({ id: 'type', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_1__.defaultMessages.type }) }, this.props.intl.formatMessage({ id: 'type', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_1__.defaultMessages.type })),
            this.getWhetherDisableSelectionType(types)
                ? jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement("div", { className: 'types-selected text-truncate mr-1', title: jimu_core__WEBPACK_IMPORTED_MODULE_0__.dataSourceUtils.getDsTypeString(types[0], this.props.intl) }, jimu_core__WEBPACK_IMPORTED_MODULE_0__.dataSourceUtils.getDsTypeString(types[0], this.props.intl))
                : jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.Select, { value: ((_a = this.props.selectedTypes) === null || _a === void 0 ? void 0 : _a[0]) || 'All', onChange: this.onTypeSelected, className: 'flex-shrink-0 to-use-dp', buttonProps: { className: 'text-truncate h-100' } },
                    (0,_utils__WEBPACK_IMPORTED_MODULE_2__.getSortedLabels)(types.asMutable()).map(t => {
                        return jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement("option", { value: t, key: t }, jimu_core__WEBPACK_IMPORTED_MODULE_0__.dataSourceUtils.getDsTypeString(t, this.props.intl));
                    }),
                    !hideAll && types && types.length > 1 &&
                        jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement("option", { value: 'All' }, this.props.intl.formatMessage({ id: 'all', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_1__.defaultMessages.all })))));
    }
}


/***/ }),

/***/ "./jimu-ui/advanced/lib/data-source-selector/components/data-source-list/components/ds-added-data/ds-error-item.tsx":
/*!**************************************************************************************************************************!*\
  !*** ./jimu-ui/advanced/lib/data-source-selector/components/data-source-list/components/ds-added-data/ds-error-item.tsx ***!
  \**************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ DsErrorItem)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");
/* harmony import */ var jimu_ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! jimu-ui */ "jimu-ui");


class DsErrorItem extends jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.PureComponent {
    constructor() {
        super(...arguments);
        this.getWhetherSelected = () => {
            return this.props.useDataSources && this.props.useDataSources.some(useDs => {
                const dsId = (useDs === null || useDs === void 0 ? void 0 : useDs.mainDataSourceId) || (useDs === null || useDs === void 0 ? void 0 : useDs.dataSourceId);
                return dsId === this.props.dsId;
            });
        };
        this.getUseDs = () => {
            return {
                dataSourceId: this.props.dsId,
                mainDataSourceId: this.props.dsId
            };
        };
        this.onItemClick = () => {
            if (this.getWhetherSelected()) {
                if (this.props.disableRemove) {
                    return;
                }
                this.onDsRemoved(this.getUseDs());
            }
            else {
                if (this.props.disableSelection) {
                    return;
                }
                this.onDsSelected(this.getUseDs());
            }
        };
        this.onDsSelected = (selectedDs) => {
            if (!selectedDs) {
                return;
            }
            let useDataSources;
            if (!this.props.useDataSources || !this.props.isMultiple) {
                useDataSources = [selectedDs];
            }
            else {
                useDataSources = this.props.useDataSources.asMutable({ deep: true }).concat(selectedDs);
            }
            this.props.onChange && this.props.onChange(useDataSources);
        };
        this.onDsRemoved = (removedDs) => {
            if (!removedDs || !this.props.useDataSources) {
                return;
            }
            const selectedDsJsons = this.props.useDataSources.filter(useDs => (useDs === null || useDs === void 0 ? void 0 : useDs.dataSourceId) !== removedDs.dataSourceId);
            this.props.onChange && this.props.onChange(selectedDsJsons.asMutable({ deep: true }));
        };
    }
    render() {
        if (!this.props.dsId) {
            return null;
        }
        const isSelected = this.getWhetherSelected();
        const state = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)() && (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().getState();
        const dataSources = state && state.appStateInBuilder && state.appStateInBuilder.appConfig && state.appStateInBuilder.appConfig.dataSources;
        const dsJson = dataSources && dataSources[this.props.dsId];
        if (!dsJson) {
            return null;
        }
        const label = dsJson.label || dsJson.sourceLabel || dsJson.id || '';
        return (jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement("div", { onClick: this.onItemClick, className: (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.classNames)('ds-item ds-error-item', { 'ds-item-selected': isSelected, [this.props.className]: !!this.props.className }) },
            jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement("div", { className: 'd-flex align-items-center w-100 item' },
                jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement("div", { className: 'd-flex align-items-center justify-content-center flex-shrink-0 ds-thumbnail' },
                    jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.Icon, { icon: jimu_core__WEBPACK_IMPORTED_MODULE_0__.dataSourceUtils.getDsIcon(dsJson), className: 'text-dark', size: '12' })),
                jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement("div", { className: 'flex-grow-1 text-truncate pl-2 ds-type' },
                    jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement("div", { className: 'text-truncate ds-type-name', title: label }, label)))));
    }
}


/***/ }),

/***/ "./jimu-ui/advanced/lib/data-source-selector/components/data-source-list/components/ds-added-data/ds-item-tree.tsx":
/*!*************************************************************************************************************************!*\
  !*** ./jimu-ui/advanced/lib/data-source-selector/components/data-source-list/components/ds-added-data/ds-item-tree.tsx ***!
  \*************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ DsItemTree)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");
/* harmony import */ var jimu_ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! jimu-ui */ "jimu-ui");
/* harmony import */ var _common_ds_item__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../common/ds-item */ "./jimu-ui/advanced/lib/data-source-selector/components/data-source-list/components/common/ds-item.tsx");
/* harmony import */ var _data_source_tree__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../data-source-tree */ "./jimu-ui/advanced/lib/data-source-selector/components/data-source-tree.tsx");




class DsItemTree extends jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.PureComponent {
    constructor(props) {
        super(props);
        this.renderDsItem = (ds) => {
            return (jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement(_common_ds_item__WEBPACK_IMPORTED_MODULE_2__["default"], { useDataSources: this.props.useDataSources, ds: ds, widgetId: this.props.widgetId, key: ds.id, onChange: this.props.onChange, isMultiple: this.props.isMultiple, intl: this.props.intl, disableSelection: this.props.disableSelection, disableRemove: this.props.disableRemove, className: 'w-100', onClickDisabledDsItem: this.props.onClickDisabledDsItem }));
        };
        this.renderDsLabel = (label, dataSource, isRootTree) => {
            /**
             * If is root node, use root ds to get icon, else, use current child ds to get icon.
             */
            const ds = isRootTree ? this.props.ds : dataSource;
            return (jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement("div", { className: 'd-flex w-100', title: label },
                jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement("div", { className: 'd-flex align-items-center justify-content-center flex-shrink-0 ds-thumbnail', title: jimu_core__WEBPACK_IMPORTED_MODULE_0__.dataSourceUtils.getDsTypeString(ds === null || ds === void 0 ? void 0 : ds.type, this.props.intl) },
                    jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.Icon, { icon: jimu_core__WEBPACK_IMPORTED_MODULE_0__.dataSourceUtils.getDsIcon(ds === null || ds === void 0 ? void 0 : ds.getDataSourceJson()), className: 'text-dark', size: '12' })),
                jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement("div", { className: 'flex-grow-1 text-truncate pl-2 ds-type' },
                    jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement("div", { className: 'text-truncate ds-type-name' }, label))));
        };
        this.getChildDataSources = (ds) => {
            if (ds === null || ds === void 0 ? void 0 : ds.isDataSourceSet) {
                return ds.getChildDataSources();
            }
            else {
                return [];
            }
        };
        this.getLabel = (ds) => {
            return (ds === null || ds === void 0 ? void 0 : ds.getLabel()) || (ds === null || ds === void 0 ? void 0 : ds.id);
        };
        this.toggle = () => {
            this.setState({ isOpen: !this.state.isOpen });
        };
        this.state = {
            inAllToUseDss: ds => this.props.allToUseDss.some(d => d.id === ds.id),
            isOpen: this.props.isSearching
        };
    }
    componentDidUpdate(prevProps) {
        if (prevProps.allToUseDss !== this.props.allToUseDss) {
            this.setState({
                inAllToUseDss: ds => this.props.allToUseDss.some(d => d.id === ds.id)
            });
        }
        if (this.props.isSearching !== prevProps.isSearching) {
            this.setState({ isOpen: this.props.isSearching });
        }
    }
    render() {
        if (!this.props.ds) {
            return null;
        }
        return (jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement("div", { className: 'mb-4' },
            jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement(_data_source_tree__WEBPACK_IMPORTED_MODULE_3__.DataSourceTree, { dataSource: this.props.ds, useDataSources: this.props.useDataSources, isNodeSelectable: this.state.inAllToUseDss, renderSelectableNode: this.renderDsItem, renderUnselectableNode: this.renderDsLabel, useDefaultBackground: true, getChildDataSources: this.getChildDataSources, getLabel: this.getLabel, 
                // After clearing search value, need to go back to status before searching.
                isOpen: this.props.isSearching ? this.state.isOpen : undefined, toggle: this.props.isSearching ? this.toggle : undefined })));
    }
}


/***/ }),

/***/ "./jimu-ui/advanced/lib/data-source-selector/components/data-source-list/components/ds-added-data/ds-list.tsx":
/*!********************************************************************************************************************!*\
  !*** ./jimu-ui/advanced/lib/data-source-selector/components/data-source-list/components/ds-added-data/ds-list.tsx ***!
  \********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ DsList)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");
/* harmony import */ var _ds_error_item__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ds-error-item */ "./jimu-ui/advanced/lib/data-source-selector/components/data-source-list/components/ds-added-data/ds-error-item.tsx");
/* harmony import */ var _ds_item_tree__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ds-item-tree */ "./jimu-ui/advanced/lib/data-source-selector/components/data-source-list/components/ds-added-data/ds-item-tree.tsx");



class DsList extends jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.PureComponent {
    constructor(props) {
        super(props);
        this.dsManager = jimu_core__WEBPACK_IMPORTED_MODULE_0__.DataSourceManager.getInstance();
        this.getWhetherShowSingleDss = () => {
            return this.props.rootDss && this.props.rootDss.length > 0;
        };
        this.getSelectedErrorDss = () => {
            return this.props.useDataSources
                ? this.props.useDataSources.asMutable().filter(useDs => {
                    return !(this.dsManager && this.dsManager.getDataSource(useDs === null || useDs === void 0 ? void 0 : useDs.mainDataSourceId));
                }).map(useDs => useDs.mainDataSourceId)
                : null;
        };
        this.state = {
            isTypeDropdownOpen: false,
            selectedErrorDss: null
        };
    }
    componentDidMount() {
        if (this.props.showErrorDss) {
            const selectedErrorDss = this.getSelectedErrorDss();
            this.setState({ selectedErrorDss });
            if (selectedErrorDss && selectedErrorDss.length > 0) {
                this.props.changeHasErrorSelectedDss && this.props.changeHasErrorSelectedDss(true);
            }
            else {
                this.props.changeHasErrorSelectedDss && this.props.changeHasErrorSelectedDss(false);
            }
        }
    }
    componentDidUpdate(prevProps) {
        if (this.props.showErrorDss) {
            if ((!this.state.selectedErrorDss || this.state.selectedErrorDss.length === 0) &&
                (!prevProps.useDataSources || prevProps.useDataSources.length === 0) &&
                (this.props.useDataSources && this.props.useDataSources.length !== 0)) {
                const selectedErrorDss = this.getSelectedErrorDss();
                this.setState({ selectedErrorDss });
                if (selectedErrorDss && selectedErrorDss.length > 0) {
                    this.props.changeHasErrorSelectedDss && this.props.changeHasErrorSelectedDss(true);
                }
                else {
                    this.props.changeHasErrorSelectedDss && this.props.changeHasErrorSelectedDss(false);
                }
            }
        }
    }
    render() {
        return (jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement("div", { className: 'ds-list px-4 pt-1', role: 'listbox' },
            this.props.showErrorDss && this.state.selectedErrorDss &&
                this.state.selectedErrorDss.map(dsId => {
                    return (jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement(_ds_error_item__WEBPACK_IMPORTED_MODULE_1__["default"], { useDataSources: this.props.useDataSources, dsId: dsId, key: dsId, onChange: this.props.onChange, isMultiple: this.props.isMultiple, disableSelection: this.props.disableSelection, disableRemove: this.props.disableRemove, intl: this.props.intl, className: 'mb-4 ml-5', widgetId: this.props.widgetId }));
                }),
            this.getWhetherShowSingleDss() &&
                jimu_core__WEBPACK_IMPORTED_MODULE_0__.dataSourceUtils.getSortedArrayByLabel(this.props.rootDss).map(ds => {
                    if (ds && ds.id) {
                        return (jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement(_ds_item_tree__WEBPACK_IMPORTED_MODULE_2__["default"], { useDataSources: this.props.useDataSources, ds: ds, key: ds.id, onChange: this.props.onChange, isMultiple: this.props.isMultiple, allToUseDss: this.props.allToUseDss, disableSelection: this.props.disableSelection, disableRemove: this.props.disableRemove, intl: this.props.intl, widgetId: this.props.widgetId, isSearching: this.props.isSearching, onClickDisabledDsItem: this.props.onClickDisabledDsItem }));
                    }
                    return null;
                })));
    }
}


/***/ }),

/***/ "./jimu-ui/advanced/lib/data-source-selector/components/data-source-list/components/ds-added-data/index.tsx":
/*!******************************************************************************************************************!*\
  !*** ./jimu-ui/advanced/lib/data-source-selector/components/data-source-list/components/ds-added-data/index.tsx ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ DataSourceAddedData)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");
/* harmony import */ var jimu_ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! jimu-ui */ "jimu-ui");
/* harmony import */ var _ds_list__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ds-list */ "./jimu-ui/advanced/lib/data-source-selector/components/data-source-list/components/ds-added-data/ds-list.tsx");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils */ "./jimu-ui/advanced/lib/data-source-selector/components/data-source-list/utils.ts");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../utils */ "./jimu-ui/advanced/lib/data-source-selector/utils.ts");
/* harmony import */ var jimu_icons_outlined_application_empty__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! jimu-icons/outlined/application/empty */ "./jimu-icons/outlined/application/empty.tsx");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
/* eslint-disable multiline-ternary */






/**
 * Prepare all needed data in the component, including to-use root data sources, to-use child data sources (including descendant data sources).
 * **To-use data source** means the data source meets all of the following conditions and it can be list here:
 * 1. type of the data source is in `selectedTypes` array (if there is `selectedTypes`), or, in `types` array
 * 2. label of the data source matches the `searchValue` (if there is `searchValue`)
 * 3. parent data source of the data source is in `fromRootDsIds` array (if there is `fromRootDsIds`)
 * 4. the data source is in `fromDsIds` array (if there is `fromDsIds`)
 *
 * The reasons why prepare the needed data here rather than in the component which use the data directly:
 * 1. can not know whether to show the empty icon util we get all the needed data, that is to say,
 *    the empty icon should show only when there isn't any data can be list
 * 2. there are multilple conditions (see above) to decide whether a data source can be list here,
 *    preparing data before use it can prevent from executing these logic multiple times
 */
class DataSourceAddedData extends jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.PureComponent {
    constructor(props) {
        super(props);
        this.__unmount = false;
        this.initData = () => {
            // when init data, all types of data sources will be in the list
            this.setToUseDataSources(this.props.selectedTypes || this.props.types, this.props.fromRootDsIds, this.props.fromDsIds, this.props.hideDs, this.props.searchValue);
        };
        this.setHasErrorDss = (hasErrorDss) => { this.setState({ hasErrorSelectedDss: hasErrorDss }); };
        this.setToUseDataSources = (toUseTypes, fromRootDsIds, fromDsIds, hideDs, searchValue) => {
            const toUseRootDss = this.getToUseRootDss(toUseTypes, fromRootDsIds, fromDsIds, hideDs, searchValue);
            this.getToUseChildDss(toUseTypes, fromRootDsIds, fromDsIds, hideDs, searchValue).then(toUseChildDss => {
                if (!this.__unmount) {
                    this.setState({
                        toUseRootDss,
                        toUseChildDss
                    });
                }
            });
        };
        this.getRootDss = () => {
            return jimu_core__WEBPACK_IMPORTED_MODULE_0__.DataSourceManager.getInstance().getConfiguredDataSources().filter(ds => ds && ds.id && ds.getDataSourceJson() && !ds.parentDataSource);
        };
        this.getToUseRootDss = (toUseTypes, fromRootDsIds, fromDsIds, hideDs, searchValue) => {
            // if only need to list child data sources from some root data sources, return an empty array
            return fromRootDsIds
                ? []
                : jimu_core__WEBPACK_IMPORTED_MODULE_0__.DataSourceManager.getInstance().getConfiguredDataSources().filter(ds => ds && !ds.parentDataSource && this.props.dataSources && this.props.dataSources[ds.id] &&
                    (0,_utils__WEBPACK_IMPORTED_MODULE_3__.getWhetherUseDataSource)(ds.getDataSourceJson(), toUseTypes) && this.isValid(ds, fromDsIds, hideDs, searchValue));
        };
        this.getToUseChildDss = (toUseTypes, fromRootDsIds, fromDsIds, hideDs, searchValue) => __awaiter(this, void 0, void 0, function* () {
            let rootDss;
            if (fromRootDsIds) {
                rootDss = fromRootDsIds.asMutable().map(dsId => jimu_core__WEBPACK_IMPORTED_MODULE_0__.DataSourceManager.getInstance().getDataSource(dsId));
            }
            else {
                rootDss = this.getRootDss();
            }
            return (0,_utils__WEBPACK_IMPORTED_MODULE_3__.getToUseChildDss)(rootDss, toUseTypes).then(toUseChildDss => {
                const realToUseChildDss = {};
                Object.keys(toUseChildDss).forEach(rootDsId => {
                    if (toUseChildDss[rootDsId].some(ds => this.isValid(ds, fromDsIds, hideDs, searchValue))) {
                        realToUseChildDss[rootDsId] = toUseChildDss[rootDsId].filter(ds => this.isValid(ds, fromDsIds, hideDs, searchValue));
                    }
                });
                return realToUseChildDss;
            });
        });
        this.isValid = (ds, fromDsIds, hideDs, searchValue) => {
            return ds && ds.getDataSourceJson() && !ds.getDataSourceJson().isOutputFromWidget && !ds.isDataView && !ds.isLocal && !ds.getDataSourceJson().isHidden &&
                (0,_utils__WEBPACK_IMPORTED_MODULE_4__.isFuzzySearch)(ds.getLabel(), searchValue) && (0,_utils__WEBPACK_IMPORTED_MODULE_4__.isFuzzyFromDsIds)(ds.getDataSourceJson(), fromDsIds, hideDs);
        };
        this.getWhetherShowList = () => {
            return this.getWhetherShowRootDss() || this.getWhetherShowChildDss() || !!(this.state.hasErrorSelectedDss && this.props.useDataSources);
        };
        this.getWhetherShowRootDss = () => {
            return this.state.toUseRootDss && this.state.toUseRootDss.length > 0;
        };
        this.getWhetherShowChildDss = () => {
            return this.state.toUseChildDss && Object.keys(this.state.toUseChildDss).length > 0;
        };
        this.state = {
            toUseRootDss: null,
            toUseChildDss: null,
            hasErrorSelectedDss: true
        };
    }
    componentDidMount() {
        this.__unmount = false;
        if (this.props.isDataSourceInited) {
            this.initData();
        }
    }
    componentDidUpdate(prevProps, prevState) {
        if (this.props.isDataSourceInited) {
            if (prevProps.selectedTypes !== this.props.selectedTypes || prevProps.fromRootDsIds !== this.props.fromRootDsIds ||
                prevProps.fromDsIds !== this.props.fromDsIds || prevProps.searchValue !== this.props.searchValue ||
                prevProps.dataSources !== this.props.dataSources) {
                if (this.props.selectedTypes) { // when select a type, data sources with selected type will be in the list
                    this.setToUseDataSources(this.props.selectedTypes, this.props.fromRootDsIds, this.props.fromDsIds, this.props.hideDs, this.props.searchValue);
                }
                else {
                    this.setToUseDataSources(this.props.types, this.props.fromRootDsIds, this.props.fromDsIds, this.props.hideDs, this.props.searchValue);
                }
            }
            if (prevProps.types !== this.props.types || !prevProps.isDataSourceInited || prevProps.dataSources !== this.props.dataSources) {
                this.initData();
            }
            if (this.state.toUseRootDss !== prevState.toUseRootDss || this.state.toUseChildDss !== prevState.toUseChildDss) {
                if (!this.getWhetherShowList()) {
                    this.props.removeDataTab(_utils__WEBPACK_IMPORTED_MODULE_3__.DataSourceTab.Added);
                }
                else {
                    this.props.addDataTab(_utils__WEBPACK_IMPORTED_MODULE_3__.DataSourceTab.Added);
                }
            }
        }
    }
    componentWillUnmount() {
        this.__unmount = true;
    }
    render() {
        var _a, _b;
        const types = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.getAddedDataTypes)(this.props.types);
        return (jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement("div", { className: 'ds-added-data h-100 w-100' }, types && types.length > 0
            ? jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement("div", { className: 'h-100' }, this.getWhetherShowList()
                ? jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement(_ds_list__WEBPACK_IMPORTED_MODULE_2__["default"], { rootDss: (0,_utils__WEBPACK_IMPORTED_MODULE_3__.getAllToUseRootDss)(this.state.toUseRootDss, this.state.toUseChildDss), allToUseDss: (0,_utils__WEBPACK_IMPORTED_MODULE_3__.getAllToUseDss)(this.state.toUseRootDss, this.state.toUseChildDss), onChange: this.props.onChange, isMultiple: this.props.isMultiple, changeHasErrorSelectedDss: this.setHasErrorDss, useDataSources: this.props.useDataSources, showErrorDss: true, disableRemove: this.props.disableRemove, disableSelection: this.props.disableSelection, intl: this.props.intl, widgetId: this.props.widgetId, isSearching: !!this.props.searchValue, onClickDisabledDsItem: this.props.onClickDisabledDsItem })
                : jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement("div", null, ((_b = (_a = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().getState()) === null || _a === void 0 ? void 0 : _a.appStateInBuilder) === null || _b === void 0 ? void 0 : _b.appConfig) && this.props.isDataSourceInited &&
                    jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement("div", { className: 'empty-placeholder w-100' },
                        jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement("div", { className: 'empty-placeholder-icon' },
                            jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement(jimu_icons_outlined_application_empty__WEBPACK_IMPORTED_MODULE_5__.EmptyOutlined, { size: 48 })),
                        jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement("div", { className: 'empty-placeholder-text', dangerouslySetInnerHTML: {
                                // eslint-disable-next-line max-len
                                __html: `${this.props.intl.formatMessage({ id: 'noAddedDataSourceCanBeUsed', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_1__.defaultMessages.noAddedDataSourceCanBeUsed })}<br/>${this.props.intl.formatMessage({ id: 'pleaseAddData', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_1__.defaultMessages.pleaseAddData })}`
                            } })))) : this.props.intl.formatMessage({ id: 'noSelectedType', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_1__.defaultMessages.noSelectedType })));
    }
}


/***/ }),

/***/ "./jimu-ui/advanced/lib/data-source-selector/components/data-source-list/components/ds-widget-outputs/index.tsx":
/*!**********************************************************************************************************************!*\
  !*** ./jimu-ui/advanced/lib/data-source-selector/components/data-source-list/components/ds-widget-outputs/index.tsx ***!
  \**********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ DataSourceWidgetOutputs)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");
/* harmony import */ var jimu_ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! jimu-ui */ "jimu-ui");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils */ "./jimu-ui/advanced/lib/data-source-selector/components/data-source-list/utils.ts");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../utils */ "./jimu-ui/advanced/lib/data-source-selector/utils.ts");
/* harmony import */ var _output_ds_item_tree__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./output-ds-item-tree */ "./jimu-ui/advanced/lib/data-source-selector/components/data-source-list/components/ds-widget-outputs/output-ds-item-tree.tsx");
/* harmony import */ var jimu_icons_outlined_application_empty__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! jimu-icons/outlined/application/empty */ "./jimu-icons/outlined/application/empty.tsx");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
/* eslint-disable multiline-ternary */






class DataSourceWidgetOutputs extends jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.PureComponent {
    constructor(props) {
        super(props);
        this.__unmount = false;
        this.initData = () => {
            /**
             * Exclude output data sources generated by this widget.
             */
            const excludeWidgetId = this.props.enableToSelectOutputDsFromSelf ? null : this.props.widgetId;
            this.setToUseDataSources(this.props.selectedTypes || this.props.types, this.props.fromRootDsIds, this.props.fromDsIds, this.props.hideDs, this.props.searchValue, excludeWidgetId);
        };
        this.setToUseDataSources = (usedTypes, fromRootDsIds, fromDsIds, hideDs, searchValue, widgetId) => {
            const toUseRootDss = this.getToUseRootDss(usedTypes, fromRootDsIds, fromDsIds, hideDs, searchValue, widgetId);
            this.getToUseChildDss(usedTypes, fromRootDsIds, fromDsIds, hideDs, searchValue).then(toUseChildDss => {
                const toUseWidgets = this.getToUseWidgets(toUseRootDss, toUseChildDss);
                if (!this.__unmount) {
                    this.setState({
                        toUseRootDss,
                        toUseChildDss,
                        toUseWidgets
                    });
                }
            });
        };
        this.getRootDss = () => {
            const rootDss = jimu_core__WEBPACK_IMPORTED_MODULE_0__.DataSourceManager.getInstance().getWidgetGeneratedDataSources();
            Object.keys(rootDss).forEach(wId => {
                rootDss[wId] = rootDss[wId].filter(ds => ds && ds.id && ds.getDataSourceJson());
            });
            return rootDss;
        };
        this.getToUseWidgets = (toUseRootDss, toUseChildDss) => {
            var _a, _b;
            return jimu_core__WEBPACK_IMPORTED_MODULE_0__.appConfigUtils.getAllWidgets((_b = (_a = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().getState()) === null || _a === void 0 ? void 0 : _a.appStateInBuilder) === null || _b === void 0 ? void 0 : _b.appConfig).filter(wJson => toUseRootDss[wJson.id] ||
                (this.getRootDss()[wJson.id] && this.getRootDss()[wJson.id].some(rootDs => !!toUseChildDss[rootDs.id])));
        };
        this.getToUseRootDss = (usedTypes, fromRootDsIds, fromDsIds, hideDs, searchValue, excludeWidgetId) => {
            const toUseRootDss = {};
            // if only need to list child data sources from some root data sources, return an empty object
            if (fromRootDsIds) {
                return toUseRootDss;
            }
            const widgetOutputRootDss = this.getRootDss();
            Object.keys(widgetOutputRootDss).forEach(wId => {
                const dss = widgetOutputRootDss[wId].filter(ds => ds && !ds.parentDataSource && this.props.dataSources && this.props.dataSources[ds.id] &&
                    (0,_utils__WEBPACK_IMPORTED_MODULE_2__.getWhetherUseDataSource)(ds.getDataSourceJson(), usedTypes) && this.isValid(ds, fromDsIds, hideDs, searchValue));
                if (dss && dss.length > 0) {
                    if (!toUseRootDss[wId]) {
                        toUseRootDss[wId] = [];
                    }
                    toUseRootDss[wId] = toUseRootDss[wId].concat(dss);
                }
            });
            const allExcludeWidgetIds = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.getWidgetsUsingOutputDsFromOneWidget)(excludeWidgetId);
            Object.keys(toUseRootDss).forEach(wId => {
                // If no output data sources can be used, or, current widget should be excluded, delete it.
                if (toUseRootDss[wId].length === 0 || allExcludeWidgetIds.some(excludeWId => excludeWId === wId)) {
                    delete toUseRootDss[wId];
                }
            });
            return toUseRootDss;
        };
        this.getToUseChildDss = (usedTypes, fromRootDsIds, fromDsIds, hideDs, searchValue) => __awaiter(this, void 0, void 0, function* () {
            let rootDss = [];
            if (fromRootDsIds) {
                rootDss = fromRootDsIds.asMutable().map(dsId => jimu_core__WEBPACK_IMPORTED_MODULE_0__.DataSourceManager.getInstance().getDataSource(dsId));
            }
            else {
                const widgetOutputRootDss = this.getRootDss();
                Object.keys(widgetOutputRootDss).forEach(wId => {
                    rootDss = rootDss.concat(widgetOutputRootDss[wId]);
                });
            }
            return (0,_utils__WEBPACK_IMPORTED_MODULE_2__.getToUseChildDss)(rootDss, usedTypes).then(toUseChildDss => {
                const realToUseChildDss = {};
                Object.keys(toUseChildDss).forEach(rootDsId => {
                    if (toUseChildDss[rootDsId].some(ds => this.isValid(ds, fromDsIds, hideDs, searchValue))) {
                        realToUseChildDss[rootDsId] = toUseChildDss[rootDsId].filter(ds => this.isValid(ds, fromDsIds, hideDs, searchValue));
                    }
                });
                return realToUseChildDss;
            });
        });
        this.getToUseChildDssByWidgetId = (wId) => {
            const toUseDss = {};
            this.getRootDss()[wId].forEach(rootDs => {
                if (!toUseDss[rootDs.id]) {
                    toUseDss[rootDs.id] = [];
                }
                toUseDss[rootDs.id] = this.state.toUseChildDss[rootDs.id]
                    ? toUseDss[rootDs.id].concat(this.state.toUseChildDss[rootDs.id])
                    : toUseDss[rootDs.id];
            });
            Object.keys(toUseDss).forEach(rootId => {
                if (toUseDss[rootId].length === 0) {
                    delete toUseDss[rootId];
                }
            });
            return toUseDss;
        };
        this.isValid = (ds, fromDsIds, hideDs, searchValue) => {
            return ds && ds.getDataSourceJson() && ds.getDataSourceJson().isOutputFromWidget && !ds.isDataView && !ds.isLocal && !ds.getDataSourceJson().isHidden &&
                (0,_utils__WEBPACK_IMPORTED_MODULE_3__.isFuzzySearch)(ds.getLabel(), searchValue) && (0,_utils__WEBPACK_IMPORTED_MODULE_3__.isFuzzyFromDsIds)(ds.getDataSourceJson(), fromDsIds, hideDs);
        };
        this.getWhetherShowList = () => {
            return this.getWhetherShowRootDss() || this.getWhetherShowChildDss();
        };
        this.getWhetherShowRootDss = () => {
            return this.state.toUseRootDss && Object.keys(this.state.toUseRootDss).length > 0;
        };
        this.getWhetherShowChildDss = () => {
            return this.state.toUseChildDss && Object.keys(this.state.toUseChildDss).length > 0;
        };
        this.state = {
            toUseRootDss: null,
            toUseChildDss: null,
            toUseWidgets: null
        };
    }
    componentDidMount() {
        this.__unmount = false;
        if (this.props.isDataSourceInited) {
            this.initData();
        }
    }
    componentDidUpdate(prevProps, prevState) {
        if (this.props.isDataSourceInited) {
            if (prevProps.selectedTypes !== this.props.selectedTypes || prevProps.fromRootDsIds !== this.props.fromRootDsIds ||
                prevProps.fromDsIds !== this.props.fromDsIds || prevProps.searchValue !== this.props.searchValue ||
                prevProps.dataSources !== this.props.dataSources) {
                /**
                 * Exclude output data sources generated by this widget.
                 */
                const excludeWidgetId = this.props.enableToSelectOutputDsFromSelf ? null : this.props.widgetId;
                const types = this.props.selectedTypes || this.props.types;
                this.setToUseDataSources(types, this.props.fromRootDsIds, this.props.fromDsIds, this.props.hideDs, this.props.searchValue, excludeWidgetId);
            }
            if (prevProps.types !== this.props.types || !prevProps.isDataSourceInited || prevProps.dataSources !== this.props.dataSources) {
                this.initData();
            }
            if (this.state.toUseRootDss !== prevState.toUseRootDss || this.state.toUseChildDss !== prevState.toUseChildDss) {
                if (!this.getWhetherShowList()) {
                    this.props.removeDataTab(_utils__WEBPACK_IMPORTED_MODULE_2__.DataSourceTab.Output);
                }
                else {
                    this.props.addDataTab(_utils__WEBPACK_IMPORTED_MODULE_2__.DataSourceTab.Output);
                }
            }
        }
    }
    componentWillUnmount() {
        this.__unmount = true;
    }
    render() {
        var _a, _b;
        if (!this.state.toUseChildDss || !this.state.toUseRootDss || !this.state.toUseWidgets) {
            return null;
        }
        const types = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.getOutputTypes)(this.props.types);
        return (jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement("div", { className: 'ds-widget-outputs h-100 w-100' }, types && types.length > 0
            ? jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement("div", { className: 'h-100' }, this.getWhetherShowList()
                ? jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement("div", { className: 'ds-list px-4 pt-1', role: 'listbox' }, this.state.toUseWidgets.map(w => {
                    return (jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement(_output_ds_item_tree__WEBPACK_IMPORTED_MODULE_4__["default"], { key: w.id, widgetJson: w, allToUseDss: (0,_utils__WEBPACK_IMPORTED_MODULE_2__.getAllToUseDss)(this.state.toUseRootDss[w.id], this.getToUseChildDssByWidgetId(w.id)), allToUseRootDss: (0,_utils__WEBPACK_IMPORTED_MODULE_2__.getAllToUseRootDss)(this.state.toUseRootDss[w.id], this.getToUseChildDssByWidgetId(w.id)), useDataSources: this.props.useDataSources, isMultiple: this.props.isMultiple, intl: this.props.intl, widgetId: this.props.widgetId, onChange: this.props.onChange, disableSelection: this.props.disableSelection, disableRemove: this.props.disableRemove, isSearching: !!this.props.searchValue }));
                }))
                : jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement("div", null, ((_b = (_a = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().getState()) === null || _a === void 0 ? void 0 : _a.appStateInBuilder) === null || _b === void 0 ? void 0 : _b.appConfig) && this.props.isDataSourceInited &&
                    jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement("div", { className: 'empty-placeholder w-100' },
                        jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement("div", { className: 'empty-placeholder-icon' },
                            jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement(jimu_icons_outlined_application_empty__WEBPACK_IMPORTED_MODULE_5__.EmptyOutlined, { size: 48 })),
                        jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement("div", { className: 'empty-placeholder-text', dangerouslySetInnerHTML: {
                                // eslint-disable-next-line max-len
                                __html: `${this.props.intl.formatMessage({ id: 'noWidgetOutputCanBeUsed', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_1__.defaultMessages.noWidgetOutputCanBeUsed })}<br/>${this.props.intl.formatMessage({ id: 'pleaseAddData', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_1__.defaultMessages.pleaseAddData })}`
                            } })))) : this.props.intl.formatMessage({ id: 'noSelectedType', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_1__.defaultMessages.noSelectedType })));
    }
}


/***/ }),

/***/ "./jimu-ui/advanced/lib/data-source-selector/components/data-source-list/components/ds-widget-outputs/output-ds-item-tree.tsx":
/*!************************************************************************************************************************************!*\
  !*** ./jimu-ui/advanced/lib/data-source-selector/components/data-source-list/components/ds-widget-outputs/output-ds-item-tree.tsx ***!
  \************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ OutputDsItemTree)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");
/* harmony import */ var jimu_ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! jimu-ui */ "jimu-ui");
/* harmony import */ var _common_ds_item__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../common/ds-item */ "./jimu-ui/advanced/lib/data-source-selector/components/data-source-list/components/common/ds-item.tsx");
/* harmony import */ var _data_source_tree__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../data-source-tree */ "./jimu-ui/advanced/lib/data-source-selector/components/data-source-tree.tsx");




class OutputDsItemTree extends jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.PureComponent {
    constructor(props) {
        super(props);
        this.getRootNode = (nodeJson) => {
            var _a;
            if ((_a = nodeJson.manifest.properties) === null || _a === void 0 ? void 0 : _a.canGenerateMultipleOutputDataSources) {
                return nodeJson;
            }
            else {
                return this.getChildNodes(nodeJson)[0];
            }
        };
        this.getChildNodes = (nodeJson) => {
            const isWidgetNode = nodeJson.manifest;
            if (isWidgetNode) {
                return this.props.allToUseRootDss.map(d => d.getDataSourceJson());
            }
            else {
                const ds = jimu_core__WEBPACK_IMPORTED_MODULE_0__.DataSourceManager.getInstance().getDataSource(nodeJson.id);
                if (ds === null || ds === void 0 ? void 0 : ds.isDataSourceSet) {
                    return ds.getChildDataSources().map(d => d.getDataSourceJson());
                }
                else {
                    return [];
                }
            }
        };
        this.getLabel = (nodeJson) => {
            return nodeJson.label;
        };
        this.renderUnselectableNode = (label, widgetJson) => {
            const icon = typeof widgetJson.icon === 'string' ? widgetJson.icon : (widgetJson.icon && widgetJson.icon.svg);
            const color = typeof widgetJson.icon === 'string' ? null : (widgetJson.icon && widgetJson.icon.properties && widgetJson.icon.properties.color);
            return (jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement("div", { className: 'd-flex w-100', title: label },
                jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement("div", { className: 'd-flex align-items-center justify-content-center flex-shrink-0 ds-thumbnail' },
                    jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.Icon, { icon: icon, color: color, size: '12' })),
                jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement("div", { className: 'flex-grow-1 text-truncate pl-2 ds-type' },
                    jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement("div", { className: 'text-truncate ds-type-name' }, label))));
        };
        this.renderSelectableNode = (dsJson) => {
            if (!dsJson) {
                return null;
            }
            let ds = jimu_core__WEBPACK_IMPORTED_MODULE_0__.DataSourceManager.getInstance().getDataSource(dsJson.id);
            if (ds.getDataSourceJson().isOutputFromWidget) {
                ds = ds.getMainDataSource().getDataView(jimu_core__WEBPACK_IMPORTED_MODULE_0__.CONSTANTS.OUTPUT_DATA_VIEW_ID);
            }
            return (jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement(_common_ds_item__WEBPACK_IMPORTED_MODULE_2__["default"], { useDataSources: this.props.useDataSources, ds: ds, widgetId: this.props.widgetId, key: ds.id, onChange: this.props.onChange, isMultiple: this.props.isMultiple, intl: this.props.intl, disableSelection: this.props.disableSelection, disableRemove: this.props.disableRemove, className: 'w-100' }));
        };
        this.toggle = () => {
            this.setState({ isOpen: !this.state.isOpen });
        };
        this.state = {
            isNodeSelectable: (nodeJson) => this.props.allToUseDss.some(d => d.id === nodeJson.id),
            isOpen: this.props.isSearching
        };
    }
    componentDidUpdate(prevProps) {
        if (prevProps.allToUseDss !== this.props.allToUseDss) {
            this.setState({
                isNodeSelectable: (nodeJson) => this.props.allToUseDss.some(d => d.id === nodeJson.id)
            });
        }
        if (this.props.isSearching !== prevProps.isSearching) {
            this.setState({ isOpen: this.props.isSearching });
        }
    }
    render() {
        if (!this.props.widgetJson || !this.props.allToUseRootDss) {
            return null;
        }
        return (jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement("div", { className: 'mb-4' },
            jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement(_data_source_tree__WEBPACK_IMPORTED_MODULE_3__.DataSourceTree, { dataSource: this.getRootNode(this.props.widgetJson), useDataSources: this.props.useDataSources, isNodeSelectable: this.state.isNodeSelectable, renderSelectableNode: this.renderSelectableNode, renderUnselectableNode: this.renderUnselectableNode, useDefaultBackground: true, getChildDataSources: this.getChildNodes, getLabel: this.getLabel, 
                // After clearing search value, need to go back to status before searching.
                isOpen: this.props.isSearching ? this.state.isOpen : undefined, toggle: this.props.isSearching ? this.toggle : undefined })));
    }
}


/***/ }),

/***/ "./jimu-ui/advanced/lib/data-source-selector/components/data-source-list/index.tsx":
/*!*****************************************************************************************!*\
  !*** ./jimu-ui/advanced/lib/data-source-selector/components/data-source-list/index.tsx ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DataSourceList: () => (/* binding */ DataSourceList)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");
/* harmony import */ var jimu_ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! jimu-ui */ "jimu-ui");
/* harmony import */ var jimu_theme__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! jimu-theme */ "jimu-theme");
/* harmony import */ var _external_data_source_selector__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../external-data-source-selector */ "./jimu-ui/advanced/lib/data-source-selector/components/external-data-source-selector/index.tsx");
/* harmony import */ var _components_ds_widget_outputs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./components/ds-widget-outputs */ "./jimu-ui/advanced/lib/data-source-selector/components/data-source-list/components/ds-widget-outputs/index.tsx");
/* harmony import */ var _components_ds_added_data__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./components/ds-added-data */ "./jimu-ui/advanced/lib/data-source-selector/components/data-source-list/components/ds-added-data/index.tsx");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./utils */ "./jimu-ui/advanced/lib/data-source-selector/components/data-source-list/utils.ts");
/* harmony import */ var _components_common_ds_types__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./components/common/ds-types */ "./jimu-ui/advanced/lib/data-source-selector/components/data-source-list/components/common/ds-types.tsx");
/* harmony import */ var _external_data_source_selector_utils__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../external-data-source-selector/utils */ "./jimu-ui/advanced/lib/data-source-selector/components/external-data-source-selector/utils.ts");
/* harmony import */ var jimu_icons_outlined_editor_plus__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! jimu-icons/outlined/editor/plus */ "./jimu-icons/outlined/editor/plus.tsx");
/* harmony import */ var jimu_icons_outlined_editor_search__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! jimu-icons/outlined/editor/search */ "./jimu-icons/outlined/editor/search.tsx");
/** @jsx jsx */











class _DataSourceList extends jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.PureComponent {
    constructor(props) {
        super(props);
        this.externalDsStyle = { width: '100%', height: '100%', maxWidth: '5000px', margin: 0 };
        this.__unmount = false;
        this.showExternalDs = () => {
            this.setState({ isExternalDsShown: true });
        };
        this.addDataTab = (tab) => {
            if (!this.props.hideTabs && !this.state.dataTabs.some(t => t === tab)) {
                this.setState({ dataTabs: this.state.dataTabs.concat(tab) });
            }
        };
        this.removeDataTab = (tab) => {
            if (!this.props.hideTabs && this.state.dataTabs.some(t => t === tab)) {
                this.setState({ dataTabs: this.state.dataTabs.filter(t => t !== tab) });
            }
        };
        this.onActiveTabChange = (tab) => {
            this.setState({ activeTab: tab });
        };
        this.onSelectDataFinished = (dsJsons) => {
            if (!dsJsons) {
                this.setState({ isExternalDsShown: false });
                return;
            }
            if (this.state.getAppConfigAction) {
                const getAppConfigAction = this.state.getAppConfigAction;
                getAppConfigAction().addDataSources(dsJsons).exec();
                Promise.all(dsJsons.map(dsJson => jimu_core__WEBPACK_IMPORTED_MODULE_0__.DataSourceManager.getInstance().createDataSource(dsJson))).catch(err => {
                    var _a, _b;
                    if ((_b = (_a = err === null || err === void 0 ? void 0 : err.message) === null || _a === void 0 ? void 0 : _a.toUpperCase()) === null || _b === void 0 ? void 0 : _b.includes(_external_data_source_selector_utils__WEBPACK_IMPORTED_MODULE_8__.AddDataErrorCode.WebMapUnsupportedVersion)) {
                        this.setState({ errorMsg: this.props.intl.formatMessage({ id: 'addDataErrorUnsupportedMap', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_1__.defaultMessages.addDataErrorUnsupportedMap }) });
                    }
                    else {
                        // If cancele the sign in, shouldn't show error.
                        if ((err === null || err === void 0 ? void 0 : err.code) !== jimu_core__WEBPACK_IMPORTED_MODULE_0__.SignInErrorCode.SignInCanceled) {
                            if (err === null || err === void 0 ? void 0 : err.isSignInError) {
                                this.setState({ errorMsg: err.message1 });
                            }
                            else {
                                this.setState({ errorMsg: this.props.intl.formatMessage({ id: 'invalidResourceItem', defaultMessage: jimu_core__WEBPACK_IMPORTED_MODULE_0__.defaultMessages.invalidResourceItem }) });
                            }
                        }
                    }
                    setTimeout(() => {
                        this.setState({ errorMsg: null });
                    }, 5000);
                });
                this.props.changeInitStatus && this.props.changeInitStatus(false);
                if (!this.__unmount) {
                    this.setState({
                        isExternalDsShown: false,
                        activeTab: this.state.dataTabs.some(t => t === _utils__WEBPACK_IMPORTED_MODULE_6__.DataSourceTab.Added) ? _utils__WEBPACK_IMPORTED_MODULE_6__.DataSourceTab.Added : this.state.activeTab
                    });
                }
            }
            else {
                console.error('Can not load jimu-for-builder');
            }
        };
        this.onSelectDataCanceled = () => {
            this.setState({ isExternalDsShown: false });
        };
        this.onToggleExternalDs = () => {
            this.setState({ isExternalDsShown: !this.state.isExternalDsShown });
        };
        this.onSearchValueChange = e => {
            this.setState({ searchValue: e.target.value });
        };
        this.setSelectedType = (types) => {
            this.setState({ selectedTypes: types });
        };
        this.ExternalDs = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(_external_data_source_selector__WEBPACK_IMPORTED_MODULE_3__.ExternalDataSourceSelector, { portalUrl: (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().getState().portalUrl, onCancel: this.onSelectDataCanceled, onFinish: this.onSelectDataFinished, isMultiple: true, types: this.props.types });
        const dataTabs = [_utils__WEBPACK_IMPORTED_MODULE_6__.DataSourceTab.Added, _utils__WEBPACK_IMPORTED_MODULE_6__.DataSourceTab.Output].filter(t => { var _a; return !((_a = this.props.hideTabs) === null || _a === void 0 ? void 0 : _a.includes(t)); });
        this.state = {
            isExternalDsShown: false,
            getAppConfigAction: null,
            searchValue: '',
            dataTabs,
            activeTab: dataTabs[0],
            selectedTypes: (0,_utils__WEBPACK_IMPORTED_MODULE_6__.getDefaultSelectedTypes)(this.props.types, this.props.useDataSources, this.props.hideAllOptionOfTypeDropdown),
            errorMsg: null
        };
    }
    componentDidMount() {
        this.__unmount = false;
        jimu_core__WEBPACK_IMPORTED_MODULE_0__.moduleLoader.loadModule('jimu-for-builder').then(JimuForBuilder => {
            if (!this.__unmount) {
                this.setState({
                    getAppConfigAction: JimuForBuilder.getAppConfigAction
                });
            }
        });
    }
    componentDidUpdate(prevProps) {
        if (prevProps.types !== this.props.types) {
            this.setSelectedType((0,_utils__WEBPACK_IMPORTED_MODULE_6__.getDefaultSelectedTypes)(this.props.types, this.props.useDataSources, this.props.hideAllOptionOfTypeDropdown));
        }
    }
    componentWillUnmount() {
        this.__unmount = true;
    }
    render() {
        var _a;
        if (!jimu_core__WEBPACK_IMPORTED_MODULE_0__.DataSourceManager.getInstance()) {
            return null;
        }
        const onlyUseAdded = this.state.dataTabs.length === 1 && this.state.dataTabs[0] === _utils__WEBPACK_IMPORTED_MODULE_6__.DataSourceTab.Added;
        const onlyUseOutput = this.state.dataTabs.length === 1 && this.state.dataTabs[0] === _utils__WEBPACK_IMPORTED_MODULE_6__.DataSourceTab.Output;
        const AddedData = ((0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(_components_ds_added_data__WEBPACK_IMPORTED_MODULE_5__["default"], { types: this.props.types, selectedTypes: this.state.selectedTypes, isDataSourceInited: this.props.isDataSourceInited, useDataSources: this.props.useDataSources, onChange: this.props.onChange, isMultiple: this.props.isMultiple, disableSelection: this.props.disableSelection, disableRemove: this.props.disableRemove, intl: this.props.intl, fromRootDsIds: this.props.fromRootDsIds, hideTypeDropdown: this.props.hideTypeDropdown, widgetId: this.props.widgetId, searchValue: this.state.searchValue, fromDsIds: this.props.fromDsIds, dataSources: this.props.dataSources, hideDs: this.props.hideDs, removeDataTab: this.removeDataTab, addDataTab: this.addDataTab, hideAllOptionOfTypeDropdown: this.props.hideAllOptionOfTypeDropdown, onClickDisabledDsItem: this.props.onClickDisabledDsItem }));
        const WidgetOutput = ((0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(_components_ds_widget_outputs__WEBPACK_IMPORTED_MODULE_4__["default"], { types: this.props.types, selectedTypes: this.state.selectedTypes, isDataSourceInited: this.props.isDataSourceInited, useDataSources: this.props.useDataSources, onChange: this.props.onChange, isMultiple: this.props.isMultiple, disableSelection: this.props.disableSelection, disableRemove: this.props.disableRemove, intl: this.props.intl, fromRootDsIds: this.props.fromRootDsIds, hideTypeDropdown: this.props.hideTypeDropdown, searchValue: this.state.searchValue, dataSources: this.props.dataSources, widgetId: this.props.widgetId, fromDsIds: this.props.fromDsIds, hideDs: this.props.hideDs, enableToSelectOutputDsFromSelf: this.props.enableToSelectOutputDsFromSelf, removeDataTab: this.removeDataTab, addDataTab: this.addDataTab, hideAllOptionOfTypeDropdown: this.props.hideAllOptionOfTypeDropdown }));
        const DsTabs = ((0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.Tabs, { type: 'pills', fill: true, className: 'data-tabs', value: this.state.activeTab, onChange: this.onActiveTabChange },
            (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.Tab, { id: _utils__WEBPACK_IMPORTED_MODULE_6__.DataSourceTab.Added, title: this.props.intl.formatMessage({ id: 'added', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_1__.defaultMessages.added }) }, AddedData),
            (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.Tab, { id: _utils__WEBPACK_IMPORTED_MODULE_6__.DataSourceTab.Output, title: this.props.intl.formatMessage({ id: 'outputs', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_1__.defaultMessages.outputs }) }, WidgetOutput)));
        return ((0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.classNames)('w-100 h-100', { [this.props.className]: !!this.props.className }) },
            (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'component-data-source-list h-100 w-100' },
                !this.props.hideHeader &&
                    (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'ds-list-header jimu-widget-setting--header d-flex px-4 py-0', title: this.props.intl.formatMessage({ id: 'setDataSource', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_1__.defaultMessages.setDataSource }) },
                        (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.PanelHeader, { level: 1, className: 'py-4', showClose: !!this.props.onCloseClick, onClose: this.props.onCloseClick, title: this.props.intl.formatMessage({ id: 'setDataSource', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_1__.defaultMessages.setDataSource }) })),
                (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'w-100 px-4 mb-4 search' },
                    (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.TextInput, { prefix: (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_icons_outlined_editor_search__WEBPACK_IMPORTED_MODULE_10__.SearchOutlined, { size: 'm', className: 'search-icon' }), value: this.state.searchValue, onChange: this.onSearchValueChange, className: 'search-input', placeholder: this.props.intl.formatMessage({ id: 'search', defaultMessage: jimu_core__WEBPACK_IMPORTED_MODULE_0__.defaultMessages.search }), size: 'sm' })),
                (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'w-100 px-4' }, !this.props.hideTypeDropdown && ((_a = this.props.types) === null || _a === void 0 ? void 0 : _a.length) > 0 &&
                    (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'ds-types my-4' },
                        (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(_components_common_ds_types__WEBPACK_IMPORTED_MODULE_7__["default"], { toUseTypes: this.props.types, onTypeSelected: this.setSelectedType, selectedTypes: this.state.selectedTypes, intl: this.props.intl, hideAllOptionOfTypeDropdown: this.props.hideAllOptionOfTypeDropdown }))),
                (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'w-100 ds-list-container' },
                    (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'ds-list-tabs h-100' }, onlyUseAdded
                        ? (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'h-100' },
                            AddedData,
                            (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'd-none' }, WidgetOutput))
                        : (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'h-100' }, onlyUseOutput
                            ? (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'h-100' },
                                WidgetOutput,
                                (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'd-none' }, AddedData))
                            : DsTabs)),
                    (!this.props.disableAddData && !this.props.hideAddDataButton) &&
                        (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.Button, { type: 'tertiary', className: ' d-flex align-items-center px-4 ds-add-data text-left jimu-outline-inside', onClick: this.showExternalDs, title: this.props.intl.formatMessage({ id: 'addNewData', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_1__.defaultMessages.addNewData }) },
                            (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'add-data-icon-container d-flex align-items-center justify-content-center mr-2' },
                                (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_icons_outlined_editor_plus__WEBPACK_IMPORTED_MODULE_9__.PlusOutlined, { size: 's', className: 'add-data-icon m-0' })),
                            (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'text-truncate flex-grow-1' }, this.props.intl.formatMessage({ id: 'addNewData', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_1__.defaultMessages.addNewData })))),
                !this.props.isDataSourceInited
                    ? (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'jimu-secondary-loading' })
                    : null),
            this.state.isExternalDsShown
                ? (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.Modal, { isOpen: this.state.isExternalDsShown, style: this.externalDsStyle, toggle: this.onToggleExternalDs, contentClassName: 'h-100', className: 'widget-ds-setting-add-data-popup', keyboard: false }, this.ExternalDs)
                : null,
            this.state.errorMsg && (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.Alert, { className: 'w-100', css: (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.css) `position: absolute; bottom: 40px;`, closable: true, form: 'basic', onClose: () => { this.setState({ errorMsg: null }); }, open: true, text: this.state.errorMsg, type: 'warning', withIcon: true })));
    }
}
const mapStateToProps = (state) => {
    var _a, _b, _c, _d;
    return {
        dataSources: ((_a = window === null || window === void 0 ? void 0 : window.jimuConfig) === null || _a === void 0 ? void 0 : _a.isBuilder) ? (_c = (_b = state.appStateInBuilder) === null || _b === void 0 ? void 0 : _b.appConfig) === null || _c === void 0 ? void 0 : _c.dataSources : (_d = state.appConfig) === null || _d === void 0 ? void 0 : _d.dataSources
    };
};
const DataSourceList = (0,jimu_theme__WEBPACK_IMPORTED_MODULE_2__.withStyles)(jimu_core__WEBPACK_IMPORTED_MODULE_0__.ReactRedux.connect(mapStateToProps)((0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.injectIntl)(_DataSourceList)), 'DataSourceList');


/***/ }),

/***/ "./jimu-ui/advanced/lib/data-source-selector/components/data-source-list/utils.ts":
/*!****************************************************************************************!*\
  !*** ./jimu-ui/advanced/lib/data-source-selector/components/data-source-list/utils.ts ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DataSourceTab: () => (/* binding */ DataSourceTab),
/* harmony export */   getAddedDataTypes: () => (/* binding */ getAddedDataTypes),
/* harmony export */   getAllToUseDss: () => (/* binding */ getAllToUseDss),
/* harmony export */   getAllToUseRootDss: () => (/* binding */ getAllToUseRootDss),
/* harmony export */   getDefaultSelectedTypes: () => (/* binding */ getDefaultSelectedTypes),
/* harmony export */   getOutputTypes: () => (/* binding */ getOutputTypes),
/* harmony export */   getSortedLabels: () => (/* binding */ getSortedLabels),
/* harmony export */   getToUseChildDss: () => (/* binding */ getToUseChildDss),
/* harmony export */   getWhetherUseDataSource: () => (/* binding */ getWhetherUseDataSource),
/* harmony export */   traverseGetToUseDss: () => (/* binding */ traverseGetToUseDss)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");

function traverseGetToUseDss(parentDs, toUseDss, toUseTypes) {
    if (!parentDs.isDataSourceSet) {
        return;
    }
    parentDs.getChildDataSources().forEach((ds) => {
        if (!ds || !ds.getDataSourceJson() || !ds.id) {
            return;
        }
        if (getWhetherUseDataSource(ds.getDataSourceJson(), toUseTypes)) {
            toUseDss.push(ds);
        }
        traverseGetToUseDss(ds, toUseDss, toUseTypes);
    });
}
function getWhetherUseDataSource(dsJson, toUseTypes) {
    if (!dsJson) {
        return false;
    }
    return toUseTypes.some(curDsType => dsJson.type && (curDsType === dsJson.type));
}
function getToUseChildDss(rootDss, toUseTypes) {
    const toUseDss = {};
    if (toUseTypes.length === 0) {
        return Promise.resolve(toUseDss);
    }
    return Promise.all(rootDss.filter(rootDs => rootDs && rootDs.id && !rootDs.getDataSourceJson().isHidden && rootDs.isDataSourceSet && !rootDs.isDataView && !rootDs.isLocal).map(rootDs => {
        if (!toUseDss[rootDs.id]) {
            toUseDss[rootDs.id] = [];
        }
        traverseGetToUseDss(rootDs, toUseDss[rootDs.id], toUseTypes);
        return toUseDss[rootDs.id];
    })).then(() => {
        Object.keys(toUseDss).forEach(rootId => {
            if (toUseDss[rootId].length === 0) {
                delete toUseDss[rootId];
            }
        });
        return toUseDss;
    });
}
function getSortedLabels(labels) {
    return labels.sort((l1, l2) => l1 === null || l1 === void 0 ? void 0 : l1.localeCompare(l2));
}
function getAddedDataTypes(types) {
    if (!types) {
        return (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.Immutable)([]);
    }
    return types.filter(t => !!t);
}
function getOutputTypes(types) {
    if (!types) {
        return (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.Immutable)([]);
    }
    return types.filter(t => !!t);
}
/**
 * Return all root data sources, which self is [to-use data sources](./components/ds-added-data.tsx) or which contains to-use child data sources.
 */
function getAllToUseRootDss(toUseRootDss, toUseChildDss) {
    let allToUseRootDss = toUseRootDss || [];
    toUseChildDss && Object.keys(toUseChildDss).forEach(rootDsId => {
        if (!allToUseRootDss.some(ds => ds.id === rootDsId)) {
            const rootDs = jimu_core__WEBPACK_IMPORTED_MODULE_0__.DataSourceManager.getInstance().getDataSource(rootDsId);
            if (rootDs) {
                allToUseRootDss = allToUseRootDss.concat(rootDs);
            }
        }
    });
    return allToUseRootDss;
}
/**
 * Return all [to-use data sources](./components/ds-added-data.tsx).
 */
function getAllToUseDss(toUseRootDss, toUseChildDss) {
    let allToUseRootDss = toUseRootDss || [];
    toUseChildDss && Object.values(toUseChildDss).forEach(dss => {
        if (dss && dss.length > 0) {
            allToUseRootDss = allToUseRootDss.concat(dss);
        }
    });
    return allToUseRootDss;
}
var DataSourceTab;
(function (DataSourceTab) {
    DataSourceTab["Added"] = "ADDED";
    DataSourceTab["Output"] = "OUTPUT"; // widgets output data
})(DataSourceTab || (DataSourceTab = {}));
function getDefaultSelectedTypes(types, useDataSources, hideAllOptionOfTypeDropdown) {
    var _a;
    if (!hideAllOptionOfTypeDropdown) {
        // Use `All` as default.
        return null;
    }
    else {
        if ((useDataSources === null || useDataSources === void 0 ? void 0 : useDataSources.length) > 0) {
            const firstSelectedDs = jimu_core__WEBPACK_IMPORTED_MODULE_0__.DataSourceManager.getInstance().getDataSource((_a = useDataSources[0]) === null || _a === void 0 ? void 0 : _a.dataSourceId);
            const firstSelectedDsType = firstSelectedDs === null || firstSelectedDs === void 0 ? void 0 : firstSelectedDs.type;
            return firstSelectedDsType && (types === null || types === void 0 ? void 0 : types.includes(firstSelectedDsType)) ? (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.Immutable)([firstSelectedDsType]) : ((types === null || types === void 0 ? void 0 : types[0]) ? (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.Immutable)([types[0]]) : null);
        }
        else {
            return (types === null || types === void 0 ? void 0 : types[0]) ? (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.Immutable)([types[0]]) : null;
        }
    }
}


/***/ }),

/***/ "./jimu-ui/advanced/lib/data-source-selector/components/data-source-remove-warning-popup.tsx":
/*!***************************************************************************************************!*\
  !*** ./jimu-ui/advanced/lib/data-source-selector/components/data-source-remove-warning-popup.tsx ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DataSourceRemoveWaringReason: () => (/* binding */ DataSourceRemoveWaringReason),
/* harmony export */   DataSourceRemoveWarningPopup: () => (/* binding */ DataSourceRemoveWarningPopup)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");
/* harmony import */ var jimu_theme__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! jimu-theme */ "jimu-theme");
/* harmony import */ var jimu_ui__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! jimu-ui */ "jimu-ui");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils */ "./jimu-ui/advanced/lib/data-source-selector/utils.ts");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
/** @jsx jsx */




var DataSourceRemoveWaringReason;
(function (DataSourceRemoveWaringReason) {
    /**
     * Data source is removed.
     */
    DataSourceRemoveWaringReason["DataSourceRemoved"] = "DATA_SOURCE_REMOVED";
    /**
     * Source widget of output data source is removed.
     */
    DataSourceRemoveWaringReason["SourceWidgetRemoved"] = "SOURCE_WIDGET_REMOVED";
})(DataSourceRemoveWaringReason || (DataSourceRemoveWaringReason = {}));
class _DataSourceRemoveWarningPopup extends jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.PureComponent {
    constructor(props) {
        super(props);
        this.__unmount = false;
        this.close = () => {
            if (this.props.isOpen && !this.__unmount) {
                this.props.toggle();
            }
        };
        this.onCheckboxBtnClick = (selected, e) => {
            this.stopPropagation(e);
            const index = this.state.selectedWidgets.indexOf(selected);
            if (index < 0) {
                this.state.selectedWidgets.push(selected);
            }
            else {
                this.state.selectedWidgets.splice(index, 1);
            }
            this.setState({ selectedWidgets: [...this.state.selectedWidgets] });
        };
        this.onRemove = (e) => __awaiter(this, void 0, void 0, function* () {
            var _a, _b, _c;
            this.stopPropagation(e);
            if (this.state.getAppConfigAction) {
                this.props.beforeRemove && this.props.beforeRemove();
                const action = this.state.getAppConfigAction();
                if (this.state.selectedWidgets.length > 0) {
                    this.state.selectedWidgets.forEach((widgetId, i) => {
                        action.removeWidget(widgetId);
                    });
                }
                if (this.props.dataSourceId) {
                    const ds = jimu_core__WEBPACK_IMPORTED_MODULE_0__.DataSourceManager.getInstance().getDataSource(this.props.dataSourceId);
                    if (ds === null || ds === void 0 ? void 0 : ds.isDataView) {
                        const dsJson = ds.getDataSourceJson();
                        const dataViewId = ds.dataViewId;
                        let dataViews = dsJson.dataViews || (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.Immutable)({});
                        dataViews = dataViews.without(dataViewId);
                        const rootDsJson = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.editDataSourceJson)(dsJson.setIn(['dataViews'], dataViews));
                        action.editDataSource(rootDsJson).exec();
                    }
                    else {
                        const appProxies = (_a = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().getState().appStateInBuilder) === null || _a === void 0 ? void 0 : _a.appConfig.appProxies;
                        let needProxyDataSourcesFromCurrentDataSource = {};
                        const toDeleteProxyIds = []; // proxy id
                        const toDeleteProxyJsonId = []; // app proxy json id, somthing like `appProxy_1`, it is id in exb app config's `appRoxies`
                        let existingProxyJson;
                        needProxyDataSourcesFromCurrentDataSource = ((_b = this.state.proxySettingUtils) === null || _b === void 0 ? void 0 : _b.traverseToGetNeedProxyDataSources) ? yield this.state.proxySettingUtils.traverseToGetNeedProxyDataSources(ds) : {};
                        Object.keys(needProxyDataSourcesFromCurrentDataSource).forEach(sourceUrl => {
                            var _a;
                            existingProxyJson = (_a = this.state.proxySettingUtils) === null || _a === void 0 ? void 0 : _a.getProxyJsonFromSourceUrl(sourceUrl, appProxies);
                            if (existingProxyJson) {
                                toDeleteProxyJsonId.push(existingProxyJson.id);
                                toDeleteProxyIds.push(existingProxyJson.proxyId);
                            }
                        });
                        action.removeDataSource(this.props.dataSourceId).exec();
                        (_c = this.state.proxySettingUtils) === null || _c === void 0 ? void 0 : _c.deleteProxies(toDeleteProxyIds, action).then(() => {
                            const action = this.state.getAppConfigAction();
                            toDeleteProxyJsonId.forEach(id => {
                                action.removeAppProxy(id);
                            });
                            action.exec();
                        });
                    }
                }
                else {
                    action.removeWidget(this.props.widgetId);
                    action.exec();
                }
                this.props.afterRemove && this.props.afterRemove();
            }
            this.close();
        });
        this.onCancel = (e) => {
            this.stopPropagation(e);
            this.props.onCancel && this.props.onCancel();
            this.close();
        };
        this.stopPropagation = e => {
            e.stopPropagation();
            e.nativeEvent.stopImmediatePropagation();
        };
        this.state = {
            selectedWidgets: [],
            getAppConfigAction: null,
            proxySettingUtils: null
        };
    }
    componentDidMount() {
        this.__unmount = false;
        Promise.all([
            jimu_core__WEBPACK_IMPORTED_MODULE_0__.moduleLoader.loadModule('jimu-for-builder'),
            jimu_core__WEBPACK_IMPORTED_MODULE_0__.moduleLoader.loadModule('jimu-ui/advanced/setting-components')
        ]).then(res => {
            const [{ getAppConfigAction }, { proxySettingUtils }] = res;
            if (!this.__unmount) {
                this.setState({
                    getAppConfigAction,
                    proxySettingUtils
                });
            }
        });
    }
    componentWillUnmount() {
        this.__unmount = true;
    }
    render() {
        var _a, _b;
        if (!this.props.reason || (!this.props.dataSourceId && !this.props.widgetId)) {
            return null;
        }
        const ds = jimu_core__WEBPACK_IMPORTED_MODULE_0__.DataSourceManager.getInstance().getDataSource(this.props.dataSourceId);
        const widgetJson = (_a = this.props.widgets) === null || _a === void 0 ? void 0 : _a[this.props.widgetId];
        const label = this.props.label || (this.props.dataSourceId ? ((ds === null || ds === void 0 ? void 0 : ds.getLabel()) || this.props.dataSourceId) : ((widgetJson === null || widgetJson === void 0 ? void 0 : widgetJson.label) || this.props.widgetId));
        let relatedWidgets = [];
        if (this.props.dataSourceId) {
            relatedWidgets = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.getWidgetsUsingDsOrItsDescendantDss)(this.props.dataSourceId, this.props.widgets);
        }
        else {
            const outputDataSourceIds = widgetJson === null || widgetJson === void 0 ? void 0 : widgetJson.outputDataSources;
            if ((outputDataSourceIds === null || outputDataSourceIds === void 0 ? void 0 : outputDataSourceIds.length) > 0) {
                outputDataSourceIds.forEach(outputDsId => {
                    const widgetsRelatedToOutput = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.getWidgetsUsingDsOrItsDescendantDss)(outputDsId, this.props.widgets);
                    widgetsRelatedToOutput.forEach(w => {
                        if (!relatedWidgets.some(rw => w.id === rw.id)) {
                            relatedWidgets = relatedWidgets.concat(w);
                        }
                    });
                });
            }
        }
        const headerString = this.props.reason === DataSourceRemoveWaringReason.DataSourceRemoved
            ? this.props.intl.formatMessage({ id: 'removeDataSource', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_2__.defaultMessages.removeDataSource })
            : this.props.intl.formatMessage({ id: 'outputDataWillBeRemovedTogether', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_2__.defaultMessages.outputDataWillBeRemovedTogether });
        const warningString = this.props.reason === DataSourceRemoveWaringReason.DataSourceRemoved
            ? this.props.intl.formatMessage({ id: 'removeDataWarningTip', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_2__.defaultMessages.removeDataWarningTip })
            : this.props.intl.formatMessage({ id: 'removeSourceWidgetWarningTip', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_2__.defaultMessages.removeSourceWidgetWarningTip }, { widgetName: label });
        const affectedWidgetsString = this.props.reason === DataSourceRemoveWaringReason.DataSourceRemoved
            ? this.props.intl.formatMessage({ id: 'removeDataAffectedWidgets', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_2__.defaultMessages.removeDataAffectedWidgets })
            : this.props.intl.formatMessage({ id: 'removeSourceWidgetAffectedWidgets', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_2__.defaultMessages.removeSourceWidgetAffectedWidgets });
        const removeButtonString = this.props.reason === DataSourceRemoveWaringReason.DataSourceRemoved
            ? this.props.intl.formatMessage({ id: 'removeDataSource', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_2__.defaultMessages.removeDataSource })
            : this.props.intl.formatMessage({ id: 'delete', defaultMessage: jimu_core__WEBPACK_IMPORTED_MODULE_0__.defaultMessages.delete });
        const cancelButtonString = this.props.intl.formatMessage({ id: 'cancel', defaultMessage: jimu_core__WEBPACK_IMPORTED_MODULE_0__.defaultMessages.cancel });
        const relatedWidgetsString = this.props.intl.formatMessage({ id: 'relatedWidgets', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_2__.defaultMessages.relatedWidgets });
        const removeDescId = `${this.props.dataSourceId}-desc`;
        return ((0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_ui__WEBPACK_IMPORTED_MODULE_2__.Modal, { isOpen: this.props.isOpen, className: (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.classNames)('bg-light-300 d-flex justify-content-between', { [this.props.className]: !!this.props.className }), onClick: this.stopPropagation, role: 'dialog', "aria-label": headerString, "aria-describedby": removeDescId },
            (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_ui__WEBPACK_IMPORTED_MODULE_2__.ModalHeader, { className: 'd-flex justify-content-between border-color-gray-300 py-4 font-16 font-dark-600', onClick: this.stopPropagation, toggle: this.props.toggle, title: headerString }, headerString),
            (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_ui__WEBPACK_IMPORTED_MODULE_2__.ModalBody, { onClick: this.stopPropagation, id: removeDescId },
                (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'px-2 py-0' },
                    (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("p", { className: 'font-13 font-dark-600', "data-testid": 'confirmDeleteMessage' }, warningString),
                    this.props.reason === DataSourceRemoveWaringReason.DataSourceRemoved
                        ? (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("p", { className: 'font-14 font-dark-800 mt-4' }, label)
                        : (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'related-outputs px-2 py-4' }, (_b = widgetJson === null || widgetJson === void 0 ? void 0 : widgetJson.outputDataSources) === null || _b === void 0 ? void 0 : _b.map(outputDsId => {
                            var _a;
                            return (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'font-13 font-dark-800 output-ds-label', key: outputDsId }, ((_a = jimu_core__WEBPACK_IMPORTED_MODULE_0__.DataSourceManager.getInstance().getDataSource(outputDsId)) === null || _a === void 0 ? void 0 : _a.getLabel()) || outputDsId);
                        })),
                    (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("p", { className: 'font-13 font-dark-600 mt-4' }, affectedWidgetsString),
                    (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { role: 'group', "aria-label": relatedWidgetsString },
                        (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("p", { className: 'font-14 font-dark-400 mt-4' }, relatedWidgetsString),
                        (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'related-widgets px-2 py-4' },
                            (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", null, relatedWidgets.map((w) => {
                                if (w && w.id) {
                                    return ((0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_ui__WEBPACK_IMPORTED_MODULE_2__.Label, { key: w.id, className: 'd-flex' },
                                        (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_ui__WEBPACK_IMPORTED_MODULE_2__.Checkbox, { className: 'mr-2 font-13', onClick: e => { this.onCheckboxBtnClick(w.id, e); }, checked: this.state.selectedWidgets.includes(w.id) }),
                                        (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_ui__WEBPACK_IMPORTED_MODULE_2__.Icon, { icon: w.icon, size: '16', className: 'mr-1 font-dark-800' }),
                                        w.label));
                                }
                                return null;
                            })))),
                    (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("p", { className: 'font-13 font-dark-600 mt-2 mb-0' }, this.props.intl.formatMessage({ id: 'howToRemoveWidgetsTip', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_2__.defaultMessages.howToRemoveWidgetsTip })))),
            (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_ui__WEBPACK_IMPORTED_MODULE_2__.ModalFooter, null,
                (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'd-flex justify-content-end mt10' },
                    (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_ui__WEBPACK_IMPORTED_MODULE_2__.Button, { type: 'primary', className: 'mr-2', onClick: this.onRemove, "aria-label": removeButtonString }, removeButtonString),
                    (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_ui__WEBPACK_IMPORTED_MODULE_2__.Button, { type: 'default', onClick: this.onCancel, "aria-label": cancelButtonString }, cancelButtonString)))));
    }
}
const mapStateToProps = (state, ownProps) => {
    var _a, _b, _c, _d;
    return {
        widgets: ((_a = state === null || state === void 0 ? void 0 : state.appContext) === null || _a === void 0 ? void 0 : _a.isBuilder) ? (_c = (_b = state === null || state === void 0 ? void 0 : state.appStateInBuilder) === null || _b === void 0 ? void 0 : _b.appConfig) === null || _c === void 0 ? void 0 : _c.widgets : (_d = state === null || state === void 0 ? void 0 : state.appConfig) === null || _d === void 0 ? void 0 : _d.widgets
    };
};
// eslint-disable-next-line
const __DataSourceRemoveWarningPopup = jimu_core__WEBPACK_IMPORTED_MODULE_0__.ReactRedux.connect(mapStateToProps)(_DataSourceRemoveWarningPopup);
const DataSourceRemoveWarningPopup = (0,jimu_theme__WEBPACK_IMPORTED_MODULE_1__.withStyles)((0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.injectIntl)(__DataSourceRemoveWarningPopup), 'DataSourceRemoveWarningPopup');


/***/ }),

/***/ "./jimu-ui/advanced/lib/data-source-selector/components/data-source-selector/components/added-ds-item.tsx":
/*!****************************************************************************************************************!*\
  !*** ./jimu-ui/advanced/lib/data-source-selector/components/data-source-selector/components/added-ds-item.tsx ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ DsItem)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");
/* harmony import */ var jimu_ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! jimu-ui */ "jimu-ui");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../utils */ "./jimu-ui/advanced/lib/data-source-selector/utils.ts");
/* harmony import */ var _data_view_setting_popup__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../data-view-setting-popup */ "./jimu-ui/advanced/lib/data-source-selector/components/data-view-setting-popup.tsx");
/* harmony import */ var jimu_icons_outlined_editor_close__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! jimu-icons/outlined/editor/close */ "./jimu-icons/outlined/editor/close.tsx");
/* harmony import */ var jimu_icons_outlined_editor_plus__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! jimu-icons/outlined/editor/plus */ "./jimu-icons/outlined/editor/plus.tsx");
/* harmony import */ var jimu_icons_outlined_application_setting__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! jimu-icons/outlined/application/setting */ "./jimu-icons/outlined/application/setting.tsx");
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../types */ "./jimu-ui/advanced/lib/data-source-selector/types.ts");
/** @jsx jsx */








const CREATE_A_VIEW_BUTTON = 'create_a_view';
/**
 * @ignore
 */
class DsItem extends jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.PureComponent {
    constructor(props) {
        super(props);
        this.__unmount = false;
        this.tagDiv = { tag: 'div' };
        this.widthForDropdownItem = { width: 'calc(100% - 30px)' };
        this.widthForDropdownItemLabel = { width: 'calc(100% - 40px)' };
        this.widthForMultiDropdownItemLabel = { width: 'calc(100% - 60px)' };
        this.onRemove = e => {
            e.stopPropagation();
            e.nativeEvent.stopImmediatePropagation();
            const { onRemove } = this.props;
            onRemove && onRemove(this.props.mainDataSourceId);
        };
        this.onDataViewChange = (dataViewId) => {
            if (!dataViewId || dataViewId === CREATE_A_VIEW_BUTTON) {
                return;
            }
            const allDataViews = this.getAllDataViews();
            const changedDataView = allDataViews[dataViewId];
            const newDataViews = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.Immutable)([changedDataView.asMutable({ deep: true })]);
            this.props.onChange(this.props.mainDataSourceId, newDataViews);
        };
        this.onDataViewKeyDown = (dataViewId, evt) => {
            if (evt.target === evt.currentTarget && (evt.key === 'Enter' || evt.key === ' ')) {
                this.onDataViewChange(dataViewId);
            }
        };
        this.onMultiDataViewChange = (e, value) => {
            if (!value || value === CREATE_A_VIEW_BUTTON) {
                return;
            }
            const allDataViews = this.getAllDataViews();
            const changedDataView = allDataViews[value];
            const dataViews = this.props.dataViews || (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.Immutable)([]);
            const isSelected = this.props.dataViews && this.props.dataViews.find(v => v.id === changedDataView.id);
            const newDataViews = isSelected ? dataViews.filter(v => v.id !== changedDataView.id) : dataViews.concat(changedDataView);
            this.props.onChange(this.props.mainDataSourceId, newDataViews);
        };
        this.formatMessage = (id, values) => {
            const messages = Object.assign({}, jimu_ui__WEBPACK_IMPORTED_MODULE_1__.defaultMessages);
            return this.props.intl.formatMessage({ id: id, defaultMessage: messages[id] }, values);
        };
        this.getDsLabel = (dataSourceId) => {
            const dsObj = this.getDsObj(dataSourceId);
            const label = dsObj && dsObj.getLabel();
            return label || this.formatMessage('none');
        };
        this.getWhetherItemError = (dataSourceId, rootDataSourceId) => {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
            const rootDoNotHaveTheChild = ((_c = (_b = (_a = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().getState().appStateInBuilder) === null || _a === void 0 ? void 0 : _a.dataSourcesInfo) === null || _b === void 0 ? void 0 : _b[rootDataSourceId]) === null || _c === void 0 ? void 0 : _c.instanceStatus) === jimu_core__WEBPACK_IMPORTED_MODULE_0__.DataSourceStatus.Created && !((_f = (_e = (_d = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().getState().appStateInBuilder) === null || _d === void 0 ? void 0 : _d.dataSourcesInfo) === null || _e === void 0 ? void 0 : _e[dataSourceId]) === null || _f === void 0 ? void 0 : _f.instanceStatus);
            // may do not have root ds id
            const rootCreatedError = ((_j = (_h = (_g = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().getState().appStateInBuilder) === null || _g === void 0 ? void 0 : _g.dataSourcesInfo) === null || _h === void 0 ? void 0 : _h[rootDataSourceId]) === null || _j === void 0 ? void 0 : _j.instanceStatus) === jimu_core__WEBPACK_IMPORTED_MODULE_0__.DataSourceStatus.CreateError;
            const dsIdValid = typeof dataSourceId === 'string' && dataSourceId !== 'undefined';
            // must have ds id
            const dsCreatedError = !dsIdValid || ((_m = (_l = (_k = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().getState().appStateInBuilder) === null || _k === void 0 ? void 0 : _k.dataSourcesInfo) === null || _l === void 0 ? void 0 : _l[dataSourceId]) === null || _m === void 0 ? void 0 : _m.instanceStatus) === jimu_core__WEBPACK_IMPORTED_MODULE_0__.DataSourceStatus.CreateError;
            return rootDoNotHaveTheChild || rootCreatedError || dsCreatedError;
        };
        this.getAllDataViews = () => {
            if (!this.props.mainDataSourceId) {
                return null;
            }
            const dsObj = jimu_core__WEBPACK_IMPORTED_MODULE_0__.DataSourceManager.getInstance().getDataSource(this.props.mainDataSourceId);
            if (dsObj === null || dsObj === void 0 ? void 0 : dsObj.isDataSourceSet) { // can not create data view for set data source
                return null;
            }
            const dataSourceJson = dsObj && dsObj.getDataSourceJson();
            let dataViews = (dataSourceJson === null || dataSourceJson === void 0 ? void 0 : dataSourceJson.dataViews) || (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.Immutable)({});
            // Add default view, it is actually main data source.
            dataViews = dataViews
                .set(this.props.DefaultDataView.id, (dataSourceJson === null || dataSourceJson === void 0 ? void 0 : dataSourceJson.query) ? dataSourceJson.query.merge(this.props.DefaultDataView.asMutable({ deep: true })) : this.props.DefaultDataView);
            // Add selection view.
            const selectionDataView = {
                id: jimu_core__WEBPACK_IMPORTED_MODULE_0__.CONSTANTS.SELECTION_DATA_VIEW_ID,
                label: this.props.intl.formatMessage({ id: 'selectionDataView', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_1__.defaultMessages.selectionDataView })
            };
            dataViews = dataViews.set(jimu_core__WEBPACK_IMPORTED_MODULE_0__.CONSTANTS.SELECTION_DATA_VIEW_ID, selectionDataView);
            // Can not select this view, it is an internal view, it is used as default selection when actually no record is selected.
            dataViews = dataViews.without(jimu_core__WEBPACK_IMPORTED_MODULE_0__.CONSTANTS.DATA_VIEW_ID_FOR_NO_SELECTION);
            // No need to select this view, it is used by default when select a output data source.
            dataViews = dataViews.without(jimu_core__WEBPACK_IMPORTED_MODULE_0__.CONSTANTS.OUTPUT_DATA_VIEW_ID);
            const hideDataView = typeof this.props.hideDataView === 'function' ? this.props.hideDataView : null;
            hideDataView && Object.values(dataViews).forEach(dv => {
                if (hideDataView(dv, this.props.mainDataSourceId)) {
                    dataViews = dataViews.without(dv.id);
                }
            });
            return dataViews;
        };
        this.getMultiSelectItems = (dataViews) => {
            if (!this.props.mainDataSourceId) {
                return (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.Immutable)([]);
            }
            const res = [];
            if (dataViews) {
                Object.keys(dataViews).forEach(vId => {
                    res.push({
                        value: vId,
                        label: dataViews[vId].label,
                        render: (item, values) => {
                            return ((0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'd-flex w-100 align-items-center justify-content-start w-100' },
                                (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.Checkbox, { checked: this.getSelectedValueForMutiSelect().includes(item.value) }),
                                (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'ml-2 text-truncate', style: this.widthForMultiDropdownItemLabel, title: dataViews[vId].label }, dataViews[vId].label),
                                this.getWhetherAllowToChangeViewSetting(vId) &&
                                    (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.Button, { type: 'tertiary', size: 'sm', className: 'px-2 py-0', onClick: e => { this.onDataViewClick(e, dataViews[vId]); }, title: this.props.intl.formatMessage({ id: 'settings', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_1__.defaultMessages.settings }) },
                                        (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_icons_outlined_application_setting__WEBPACK_IMPORTED_MODULE_6__.SettingOutlined, { size: 's' }))));
                        }
                    });
                });
            }
            const allowToCreateView = this.getWhetherAllowToCreateView();
            if (allowToCreateView) {
                res.push({
                    value: CREATE_A_VIEW_BUTTON,
                    render: () => this.getCreateViewButton()
                });
            }
            return (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.Immutable)(res);
        };
        this.getCreateViewButton = () => {
            return ((0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.Button, { type: 'tertiary', size: 'sm', onClick: this.onCreateViewClick, className: 'p-0 mb-1 w-100 text-left' },
                (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_icons_outlined_editor_plus__WEBPACK_IMPORTED_MODULE_5__.PlusOutlined, { size: 's', className: 'mr-1' }),
                (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("span", null, this.formatMessage('createAView')),
                (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'create-view-button-border' })));
        };
        this.getSelectedValueForSingleSelect = () => {
            var _a;
            return this.props.dataViews && this.props.dataViews.length > 0 ? (_a = this.props.dataViews[0]) === null || _a === void 0 ? void 0 : _a.id : this.props.DefaultDataView.id;
        };
        this.getSelectedValueForMutiSelect = () => {
            return this.props.dataViews && this.props.dataViews.length > 0 ? this.props.dataViews.map(v => v.id) : (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.Immutable)([this.props.DefaultDataView.id]);
        };
        this.getMultiSelectSelectedString = (values) => {
            if (values) {
                return this.formatMessage('numSelected', { number: values.length });
            }
        };
        this.onDataViewClick = (e, dataView) => {
            e.stopPropagation();
            e.nativeEvent.stopImmediatePropagation();
            this.setState({
                settingDataView: dataView
            });
            this.toggleViewSetting();
        };
        this.onCreateViewClick = () => {
            this.setState({
                settingDataView: null
            });
            this.toggleViewSetting();
        };
        this.onCreateViewKeyDown = evt => {
            if (evt.target === evt.currentTarget && (evt.key === 'Enter' || evt.key === ' ')) {
                this.onCreateViewClick();
            }
        };
        this.toggleViewSetting = () => { this.setState({ isViewSettingOpen: !this.state.isViewSettingOpen }); };
        this.toggleViewSelect = () => { this.setState({ isViewSelectOpen: !this.state.isViewSelectOpen }); };
        this.stopPropagation = e => {
            e.stopPropagation();
            e.nativeEvent.stopImmediatePropagation();
        };
        this.onDataViewSettingApply = (dataView) => {
            if (dataView.id === this.props.DefaultDataView.id) {
                this.editQuery(dataView);
            }
            else {
                this.editDataView(dataView);
            }
        };
        this.editQuery = (dataView) => {
            if (!dataView) {
                return;
            }
            const getAppConfigAction = this.state.getAppConfigAction;
            if (!getAppConfigAction) {
                return;
            }
            const dsObj = jimu_core__WEBPACK_IMPORTED_MODULE_0__.DataSourceManager.getInstance().getDataSource(this.props.mainDataSourceId);
            const dsJson = dsObj && dsObj.getDataSourceJson();
            if (!dsJson) {
                return;
            }
            const rootDsJson = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.editDataSourceJson)(dsJson.setIn(['query'], (dsJson === null || dsJson === void 0 ? void 0 : dsJson.query)
                ? dsJson.query.merge(dataView.without('id').without('label').asMutable({ deep: true }))
                : dataView.set('id', 'default').set('label', dsObj.getLabel())));
            getAppConfigAction().editDataSource(rootDsJson).exec();
            dsObj.addSourceVersion();
            this.toggleViewSetting();
        };
        this.editDataView = (dataView) => {
            if (!dataView) {
                return;
            }
            const getAppConfigAction = this.state.getAppConfigAction;
            if (!getAppConfigAction) {
                return;
            }
            const dsObj = jimu_core__WEBPACK_IMPORTED_MODULE_0__.DataSourceManager.getInstance().getDataSource(this.props.mainDataSourceId);
            const dsJson = dsObj && dsObj.getDataSourceJson();
            let dataViews = dsJson.dataViews || (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.Immutable)({});
            dataViews = dataViews.set(dataView.id, dataView);
            const rootDsJson = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.editDataSourceJson)(dsJson.setIn(['dataViews'], dataViews));
            getAppConfigAction().editDataSource(rootDsJson).exec();
            if (!dsObj.getDataView(dataView === null || dataView === void 0 ? void 0 : dataView.id)) {
                jimu_core__WEBPACK_IMPORTED_MODULE_0__.DataSourceManager.getInstance().createDataSource(dsJson, dataView.id).then(() => {
                    if (!this.__unmount) {
                        this.setState({ settingDataView: dataView });
                        this.toggleViewSetting();
                    }
                });
            }
            else {
                this.setState({ settingDataView: dataView });
                dsObj.addSourceVersion();
                this.toggleViewSetting();
            }
        };
        this.getWhetherAllowToCreateView = () => {
            if (this.props.hideCreateViewButton) {
                return false;
            }
            const dsObj = jimu_core__WEBPACK_IMPORTED_MODULE_0__.DataSourceManager.getInstance().getDataSource(this.props.mainDataSourceId);
            return dsObj && !dsObj.isDataSourceSet && !dsObj.getDataSourceJson().isOutputFromWidget;
        };
        this.getWhetherAllowToChangeViewSetting = (vId) => {
            var _a;
            const isSelectionView = vId === jimu_core__WEBPACK_IMPORTED_MODULE_0__.CONSTANTS.SELECTION_DATA_VIEW_ID;
            if (isSelectionView) {
                return false;
            }
            const mainDs = jimu_core__WEBPACK_IMPORTED_MODULE_0__.DataSourceManager.getInstance().getDataSource(this.props.mainDataSourceId);
            if ((_a = mainDs === null || mainDs === void 0 ? void 0 : mainDs.getDataSourceJson()) === null || _a === void 0 ? void 0 : _a.isOutputFromWidget) {
                // If is output data source, shouldn't allow to change data view setting.
                return false;
            }
            else {
                return true;
            }
        };
        this.onClick = () => {
            this.props.onClick && this.props.onClick(this.props.mainDataSourceId);
        };
        this.onKeyDown = (evt) => {
            if (evt.target === evt.currentTarget && (evt.key === 'Enter' || evt.key === ' ')) {
                this.onClick();
            }
        };
        this.afterRemoveDataView = (dataView) => {
            var _a;
            if ((_a = this.props.dataViews) === null || _a === void 0 ? void 0 : _a.some(v => v.id === dataView.id)) {
                this.onDataViewChange(_types__WEBPACK_IMPORTED_MODULE_7__.DEFAULT_DATA_VIEW_ID);
            }
        };
        this.getDsObj = (mainDsId) => {
            var _a;
            let ds = jimu_core__WEBPACK_IMPORTED_MODULE_0__.DataSourceManager.getInstance().getDataSource(mainDsId);
            if ((_a = ds === null || ds === void 0 ? void 0 : ds.getDataSourceJson()) === null || _a === void 0 ? void 0 : _a.isOutputFromWidget) {
                ds = ds.getMainDataSource().getDataView(jimu_core__WEBPACK_IMPORTED_MODULE_0__.CONSTANTS.OUTPUT_DATA_VIEW_ID);
            }
            return ds;
        };
        this.state = {
            isViewSettingOpen: false,
            isViewSelectOpen: false,
            settingDataView: null,
            getAppConfigAction: null
        };
    }
    componentDidMount() {
        this.__unmount = false;
        jimu_core__WEBPACK_IMPORTED_MODULE_0__.moduleLoader.loadModule('jimu-for-builder').then(JimuForBuilder => {
            if (!this.__unmount) {
                this.setState({
                    getAppConfigAction: JimuForBuilder.getAppConfigAction
                });
            }
        });
    }
    componentWillUnmount() {
        this.__unmount = true;
    }
    render() {
        var _a, _b, _c, _d, _e, _f;
        const mainDataSourceId = this.props.mainDataSourceId;
        if (!mainDataSourceId) {
            return null;
        }
        const dsObj = this.getDsObj(mainDataSourceId);
        const dataSourceJson = dsObj === null || dsObj === void 0 ? void 0 : dsObj.getDataSourceJson();
        const rootDataSourceId = this.props.rootDataSourceId || mainDataSourceId;
        const isDataInConfig = (_b = (_a = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.getAppConfig)()) === null || _a === void 0 ? void 0 : _a.dataSources) === null || _b === void 0 ? void 0 : _b[rootDataSourceId];
        const isDataError = this.getWhetherItemError(mainDataSourceId, rootDataSourceId);
        // data source is not created, data source exists in config and data source is not error.
        const isLoadingShown = !dsObj && isDataInConfig && !isDataError;
        const dataViews = this.getAllDataViews();
        const allowToSelectMultipleDataViews = (this.props.isMultiple && typeof this.props.isMultipleDataView !== 'boolean') || this.props.isMultipleDataView;
        const closeIconComponent = ((0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.Button, { icon: true, size: 'sm', type: 'tertiary', title: this.formatMessage('remove'), onClick: this.onRemove, className: 'ds-item-close' },
            (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_icons_outlined_editor_close__WEBPACK_IMPORTED_MODULE_4__.CloseOutlined, { size: 's' })));
        const allowToCreateView = this.getWhetherAllowToCreateView();
        const showDataViewDropdown = this.props.hideDataView !== true;
        const dsLabel = this.getDsLabel(mainDataSourceId);
        return ((0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: this.props.className ? `w-100 added-ds-item ${this.props.className}` : 'w-100 added-ds-item' },
            isLoadingShown && (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'loading-container' },
                (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.Loading, { type: jimu_ui__WEBPACK_IMPORTED_MODULE_1__.LoadingType.Bar })),
            isLoadingShown && (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'loading-placeholder' },
                (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'first-line d-flex align-items-center justify-content-between mb-2 pb-1' },
                    (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'first-line-left mr-2' }),
                    (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'first-line-right flex-grow-1' })),
                (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'second-line w-100' })),
            !isLoadingShown &&
                (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.classNames)('ds-item', {
                        'ds-error-item': isDataError,
                        'disable-cursor': this.props.disableDataSourceList
                    }), onClick: this.onClick, onKeyDown: this.onKeyDown, role: 'menuitem', tabIndex: 0, ref: this.props.innerRef, "aria-label": dsLabel },
                    (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'd-flex align-items-center w-100 item' },
                        (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'd-flex align-items-center justify-content-center flex-shrink-0 ds-thumbnail' },
                            (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.Icon, { icon: jimu_core__WEBPACK_IMPORTED_MODULE_0__.dataSourceUtils.getDsIcon(dataSourceJson), className: 'text-dark', size: '12' })),
                        (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'flex-grow-1 text-truncate pl-2 ds-type' },
                            (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'text-truncate ds-type-name', title: dsLabel }, dsLabel)),
                        !this.props.hideRemove && closeIconComponent),
                    showDataViewDropdown && dataViews && Object.keys(dataViews).length > 0 &&
                        (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'dv-select-container' }, !allowToSelectMultipleDataViews
                            ? (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.Dropdown, { fluid: true, activeIcon: true, autoWidth: true, onClick: this.stopPropagation, isOpen: this.state.isViewSelectOpen, toggle: this.toggleViewSelect, disabled: this.props.disableDataView || isDataError, "aria-label": this.formatMessage('selectADataView'), menuItemCheckMode: 'singleCheck', supportInsideNodesAccessible: true },
                                (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.DropdownButton, { onClick: this.toggleViewSelect, type: 'tertiary', className: 'data-view-dropdown-menu-button', size: 'sm', arrow: !this.props.disableDataView }, (_c = dataViews[this.getSelectedValueForSingleSelect()]) === null || _c === void 0 ? void 0 : _c.label),
                                (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.DropdownMenu, null,
                                    Object.values(dataViews).map((v, i) => (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.DropdownItem, { key: i, tag: 'div', tabIndex: 0, onClick: () => { this.onDataViewChange(v.id); }, onKeyDown: e => { this.onDataViewKeyDown(v.id, e); }, active: this.getSelectedValueForSingleSelect() === v.id },
                                        (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'd-flex justify-content-between align-items-center', style: this.widthForDropdownItem },
                                            (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'text-truncate', title: v.label, style: this.widthForDropdownItemLabel }, v.label),
                                            this.state.isViewSelectOpen && this.getWhetherAllowToChangeViewSetting(v.id) &&
                                                (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.Button, { type: 'tertiary', size: 'sm', icon: true, className: 'px-2 settings-icon py-0', onClick: e => { this.onDataViewClick(e, v); }, title: this.props.intl.formatMessage({ id: 'settings', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_1__.defaultMessages.settings }) },
                                                    (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_icons_outlined_application_setting__WEBPACK_IMPORTED_MODULE_6__.SettingOutlined, { size: 's' }))))),
                                    allowToCreateView && (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.DropdownItem, { tag: 'div', onKeyDown: this.onCreateViewKeyDown, className: 'create-view-button' }, this.getCreateViewButton())))
                            : (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.MultiSelect, { fluid: true, items: this.getMultiSelectItems(dataViews), onClickItem: this.onMultiDataViewChange, values: this.getSelectedValueForMutiSelect(), "aria-label": this.formatMessage('selectADataView'), buttonProps: Object.assign(Object.assign({}, this.tagDiv), { disabled: this.props.disableDataView || isDataError, arrow: !this.props.disableDataView }), displayByValues: this.getMultiSelectSelectedString, menuItemProps: this.tagDiv, size: 'sm', autoWidth: true }))),
            allowToCreateView &&
                (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(_data_view_setting_popup__WEBPACK_IMPORTED_MODULE_3__.DataViewSettingPopup, { isOpen: this.state.isViewSettingOpen, toggle: this.toggleViewSetting, onApply: this.onDataViewSettingApply, onDuplicate: this.onDataViewSettingApply, afterRemove: this.afterRemoveDataView, mainDataSource: dsObj, dataView: this.state.settingDataView, disableDuplicate: !this.state.settingDataView || ((_d = this.state.settingDataView) === null || _d === void 0 ? void 0 : _d.id) === this.props.DefaultDataView.id, disableRemove: !this.state.settingDataView || ((_e = this.state.settingDataView) === null || _e === void 0 ? void 0 : _e.id) === this.props.DefaultDataView.id, disableRename: ((_f = this.state.settingDataView) === null || _f === void 0 ? void 0 : _f.id) === this.props.DefaultDataView.id })));
    }
}


/***/ }),

/***/ "./jimu-ui/advanced/lib/data-source-selector/components/data-source-selector/components/set-ds-btn-ds-list.tsx":
/*!*********************************************************************************************************************!*\
  !*** ./jimu-ui/advanced/lib/data-source-selector/components/data-source-selector/components/set-ds-btn-ds-list.tsx ***!
  \*********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");
/* harmony import */ var jimu_ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! jimu-ui */ "jimu-ui");
/* harmony import */ var jimu_theme__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! jimu-theme */ "jimu-theme");
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../types */ "./jimu-ui/advanced/lib/data-source-selector/types.ts");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../utils */ "./jimu-ui/advanced/lib/data-source-selector/utils.ts");
/* harmony import */ var _data_source_list__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../data-source-list */ "./jimu-ui/advanced/lib/data-source-selector/components/data-source-list/index.tsx");
/* harmony import */ var _added_ds_item__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./added-ds-item */ "./jimu-ui/advanced/lib/data-source-selector/components/data-source-selector/components/added-ds-item.tsx");
/** @jsx jsx */







class _SetDsBtnDsList extends jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.PureComponent {
    constructor(props) {
        super(props);
        this.__unmount = false;
        this.DefaultDataView = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.Immutable)({
            id: _types__WEBPACK_IMPORTED_MODULE_3__.DEFAULT_DATA_VIEW_ID,
            label: this.props.intl.formatMessage({ id: 'default', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_1__.defaultMessages.default })
        });
        this.sidePopperTrigger = jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createRef();
        this.backToFocusNode = jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createRef();
        this.changeInitStatus = (isInited) => {
            this.setState({ isDataSourceInited: isInited });
        };
        this.getIsLoading = (dsId) => {
            var _a;
            const dsInfo = (_a = this.props.dataSourcesInfo) === null || _a === void 0 ? void 0 : _a[dsId];
            // No data source info means the data source is removed.
            if (!dsInfo) {
                return false;
            }
            if (dsInfo.instanceStatus === jimu_core__WEBPACK_IMPORTED_MODULE_0__.DataSourceStatus.CreateError) {
                return false;
            }
            else if (dsInfo.instanceStatus === jimu_core__WEBPACK_IMPORTED_MODULE_0__.DataSourceStatus.Created) {
                // If the data source is set, should wait util all child data sources are created.
                const ds = jimu_core__WEBPACK_IMPORTED_MODULE_0__.DataSourceManager.getInstance().getDataSource(dsId);
                return (ds === null || ds === void 0 ? void 0 : ds.isDataSourceSet) ? !ds.areChildDataSourcesCreated() : false;
            }
            return true;
        };
        this.disableSelection = () => {
            if (this.props.disableSelection) {
                const useDataSources = this.props.useDataSources || (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.Immutable)([]);
                return this.props.disableSelection(useDataSources.asMutable({ deep: true }));
            }
            return false;
        };
        this.disableRemove = () => {
            if (this.props.disableRemove) {
                const useDataSources = this.props.useDataSources || (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.Immutable)([]);
                return this.props.disableRemove(useDataSources.asMutable({ deep: true }));
            }
            return false;
        };
        this.onModalClose = () => {
            this.setState({ modalType: 'none' });
        };
        this.onMainDsChanged = (useDataSources) => {
            if (!useDataSources) {
                return;
            }
            this.props.onChange && this.props.onChange(useDataSources);
            if (this.props.closeDataSourceListOnChange) {
                this.setState({ modalType: 'none' });
            }
        };
        this.onMainDsRemoved = (mainDataSourceId) => {
            if (!mainDataSourceId || !this.props.useDataSources) {
                return;
            }
            const useDataSources = this.props.useDataSources.filter(useDs => (useDs === null || useDs === void 0 ? void 0 : useDs.mainDataSourceId) + '' !== mainDataSourceId);
            this.props.onChange && this.props.onChange(useDataSources.asMutable({ deep: true }));
        };
        this.onDataViewChanged = (mainDataSourceId, dataViews) => {
            if (!mainDataSourceId || !this.props.useDataSources) {
                return;
            }
            const previousUseDs = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.Immutable)(this.props.useDataSources.find(u => u.mainDataSourceId === mainDataSourceId) ||
                { dataSourceId: mainDataSourceId, mainDataSourceId });
            const newUseDataSources = dataViews.map(v => {
                var _a;
                if (v.id === _types__WEBPACK_IMPORTED_MODULE_3__.DEFAULT_DATA_VIEW_ID) {
                    const mainDs = jimu_core__WEBPACK_IMPORTED_MODULE_0__.DataSourceManager.getInstance().getDataSource(mainDataSourceId);
                    if ((_a = mainDs === null || mainDs === void 0 ? void 0 : mainDs.getDataSourceJson()) === null || _a === void 0 ? void 0 : _a.isOutputFromWidget) {
                        // If output data source, should use output view, istead of the main data source.
                        const dsId = jimu_core__WEBPACK_IMPORTED_MODULE_0__.DataSourceManager.getInstance().getDataViewDataSourceId(mainDataSourceId, jimu_core__WEBPACK_IMPORTED_MODULE_0__.CONSTANTS.OUTPUT_DATA_VIEW_ID);
                        const dataViewId = jimu_core__WEBPACK_IMPORTED_MODULE_0__.CONSTANTS.OUTPUT_DATA_VIEW_ID;
                        return previousUseDs.set('dataSourceId', dsId).set('dataViewId', dataViewId).asMutable({ deep: true });
                    }
                    else {
                        return previousUseDs.without('dataViewId').set('dataSourceId', mainDataSourceId).asMutable({ deep: true });
                    }
                }
                else {
                    return previousUseDs.set('dataViewId', v.id)
                        .set('dataSourceId', jimu_core__WEBPACK_IMPORTED_MODULE_0__.DataSourceManager.getInstance().getDataViewDataSourceId(mainDataSourceId, v.id)).asMutable({ deep: true });
                }
            });
            const useDataSources = this.props.useDataSources.filter(useDs => (useDs === null || useDs === void 0 ? void 0 : useDs.mainDataSourceId) !== mainDataSourceId).concat(newUseDataSources);
            this.props.onChange && this.props.onChange(useDataSources.asMutable({ deep: true }));
        };
        this.toggleDsList = () => {
            if (!this.props.disableDataSourceList) {
                this.setState({ modalType: this.state.modalType === 'ds' ? 'none' : 'ds' });
            }
        };
        this.getWhetherShowPlaceholder = () => {
            var _a;
            // If there is some use data source which is not created, should show add data placeholder to allow user to change data source.
            if ((_a = this.props.useDataSources) === null || _a === void 0 ? void 0 : _a.some(useDs => !jimu_core__WEBPACK_IMPORTED_MODULE_0__.DataSourceManager.getInstance().getDataSource(useDs.dataSourceId))) {
                return true;
            }
            if (this.props.disableSelection) {
                const useDataSources = this.props.useDataSources || (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.Immutable)([]);
                return !this.props.disableSelection(useDataSources.asMutable({ deep: true }));
            }
            return this.props.isMultiple || (!this.props.isMultiple && (!this.props.useDataSources || this.props.useDataSources.filter(useDs => !!useDs).length === 0));
        };
        this.groupUseDssByMainDataSource = (useDataSources) => {
            if (!useDataSources || useDataSources.length === 0) {
                return null;
            }
            const res = {};
            useDataSources.forEach(u => {
                if (!res[u.mainDataSourceId]) {
                    res[u.mainDataSourceId] = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.Immutable)([]);
                }
                if (u.dataViewId === jimu_core__WEBPACK_IMPORTED_MODULE_0__.CONSTANTS.SELECTION_DATA_VIEW_ID) { // selection data view
                    res[u.mainDataSourceId] = res[u.mainDataSourceId].concat({
                        id: jimu_core__WEBPACK_IMPORTED_MODULE_0__.CONSTANTS.SELECTION_DATA_VIEW_ID,
                        label: this.props.intl.formatMessage({ id: 'selectionDataView', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_1__.defaultMessages.selectionDataView })
                    });
                }
                else if (u.dataViewId === jimu_core__WEBPACK_IMPORTED_MODULE_0__.CONSTANTS.OUTPUT_DATA_VIEW_ID) { // output data view
                    res[u.mainDataSourceId] = res[u.mainDataSourceId].concat(this.DefaultDataView);
                }
                else if (u.dataViewId) { // user added data views
                    const dsObj = jimu_core__WEBPACK_IMPORTED_MODULE_0__.DataSourceManager.getInstance().getDataSource(u.mainDataSourceId);
                    const dataSourceJson = dsObj && dsObj.getDataSourceJson();
                    const dataViews = dataSourceJson && dataSourceJson.dataViews;
                    if (dataViews === null || dataViews === void 0 ? void 0 : dataViews[u.dataViewId]) {
                        res[u.mainDataSourceId] = res[u.mainDataSourceId].concat(dataViews[u.dataViewId]);
                    }
                }
                else { // default data view (main data source)
                    res[u.mainDataSourceId] = res[u.mainDataSourceId].concat(this.DefaultDataView);
                }
            });
            return res;
        };
        this.onDsItemClick = (mainDsId) => {
            this.toggleDsList();
        };
        this.getIsDsListOpen = () => {
            return this.state.modalType === 'ds' && !jimu_core__WEBPACK_IMPORTED_MODULE_0__.urlUtils.getAppIdPageIdFromUrl().pageId;
        };
        this.onSelectDataKeyDown = evt => {
            if (evt.target === evt.currentTarget && (evt.key === 'Enter' || evt.key === ' ')) {
                this.toggleDsList();
            }
        };
        this.state = {
            isDataSourceInited: (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getWhetherDataSourceIsInited)(this.props.dataSources, this.props.dataSourcesInfo),
            modalType: 'none',
            SidePopper: null
        };
    }
    componentDidMount() {
        this.__unmount = false;
        jimu_core__WEBPACK_IMPORTED_MODULE_0__.moduleLoader.loadModule('jimu-ui/advanced/setting-components').then(SettingComponents => {
            if (!this.__unmount) {
                this.setState({
                    SidePopper: SettingComponents.SidePopper
                });
            }
        });
    }
    componentWillUnmount() {
        this.__unmount = true;
    }
    componentDidUpdate(prevProps) {
        if (!jimu_core__WEBPACK_IMPORTED_MODULE_0__.lodash.isDeepEqual(this.props.dataSources, prevProps.dataSources) || !jimu_core__WEBPACK_IMPORTED_MODULE_0__.lodash.isDeepEqual(this.props.dataSourcesInfo, prevProps.dataSourcesInfo)) {
            const isInited = (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getWhetherDataSourceIsInited)(this.props.dataSources, this.props.dataSourcesInfo);
            this.changeInitStatus(isInited);
            if (!isInited) {
                this.props.dataSourcesInfo && Object.keys(this.props.dataSourcesInfo).forEach(dsId => {
                    if (this.getIsLoading(dsId)) {
                        this.waitForChildDataSourcesReady(dsId).finally(() => {
                            this.changeInitStatus((0,_utils__WEBPACK_IMPORTED_MODULE_4__.getWhetherDataSourceIsInited)(this.props.dataSources, this.props.dataSourcesInfo));
                        });
                    }
                });
            }
        }
    }
    waitForChildDataSourcesReady(dsId) {
        const ds = jimu_core__WEBPACK_IMPORTED_MODULE_0__.DataSourceManager.getInstance().getDataSource(dsId);
        if ((ds === null || ds === void 0 ? void 0 : ds.isDataSourceSet) && !ds.areChildDataSourcesCreated()) {
            return ds.childDataSourcesReady().then(() => ds).catch(err => ds);
        }
        return Promise.resolve(ds);
    }
    render() {
        const SidePopper = this.state.SidePopper;
        const showPlaceholder = this.getWhetherShowPlaceholder();
        const groupedUseDss = this.groupUseDssByMainDataSource(this.props.useDataSources);
        const selectDataLabel = this.props.buttonLabel || this.props.intl.formatMessage({ id: 'setDataSource', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_1__.defaultMessages.setDataSource });
        const groupedUseDssLength = groupedUseDss ? Object.keys(groupedUseDss).length : 0;
        const sidePopperTrigger = [];
        const ariaLabel = this.props['aria-label'] || this.props.intl.formatMessage({ id: 'data', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_1__.defaultMessages.data });
        if (this.sidePopperTrigger.current) {
            sidePopperTrigger.push(this.sidePopperTrigger.current);
        }
        if (this.props.sidePopperTrigger) {
            if (Array.isArray(this.props.sidePopperTrigger)) {
                sidePopperTrigger.push(...this.props.sidePopperTrigger);
            }
            else {
                sidePopperTrigger.push(this.props.sidePopperTrigger);
            }
        }
        return ((0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'w-100', ref: this.sidePopperTrigger, role: 'menu', "aria-label": ariaLabel },
            groupedUseDss && Object.keys(groupedUseDss).sort((d1, d2) => d1 === null || d1 === void 0 ? void 0 : d1.localeCompare(d2))
                .map((mainDataSourceId, index) => {
                var _a, _b;
                if (mainDataSourceId) {
                    return ((0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(_added_ds_item__WEBPACK_IMPORTED_MODULE_6__["default"], { key: index, mainDataSourceId: mainDataSourceId, onRemove: this.onMainDsRemoved, intl: this.props.intl, hideRemove: this.disableRemove(), theme: this.props.theme, disableDataSourceList: this.props.disableDataSourceList, onClick: this.onDsItemClick, className: (showPlaceholder || index !== groupedUseDssLength - 1) && 'mb-4', onChange: this.onDataViewChanged, disableDataView: this.props.disableDataView, isMultiple: this.props.isMultiple, rootDataSourceId: (_b = (_a = this.props.useDataSources) === null || _a === void 0 ? void 0 : _a.find(u => u.mainDataSourceId === mainDataSourceId)) === null || _b === void 0 ? void 0 : _b.rootDataSourceId, dataViews: groupedUseDss[mainDataSourceId], DefaultDataView: this.DefaultDataView, hideDataView: this.props.hideDataView, isMultipleDataView: this.props.isMultipleDataView, hideCreateViewButton: this.props.hideCreateViewButton, innerRef: !showPlaceholder && index === groupedUseDssLength - 1 && this.backToFocusNode }));
                }
                return null;
            }),
            SidePopper && (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(SidePopper, { isOpen: this.getIsDsListOpen(), position: 'right', trigger: sidePopperTrigger, toggle: this.toggleDsList, widgetId: this.props.widgetId, backToFocusNode: this.backToFocusNode.current, title: this.props.hideHeader ? null : this.props.intl.formatMessage({ id: 'setDataSource', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_1__.defaultMessages.setDataSource }) },
                (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'bg-light-300 h-100 w-100' },
                    (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(_data_source_list__WEBPACK_IMPORTED_MODULE_5__.DataSourceList, { types: this.props.types, onChange: this.onMainDsChanged, changeInitStatus: this.changeInitStatus, hideDs: this.props.hideDs, onCloseClick: this.onModalClose, isMultiple: this.props.isMultiple, fromDsIds: this.props.fromDsIds, useDataSources: this.props.useDataSources, isDataSourceInited: this.state.isDataSourceInited, widgetId: this.props.widgetId, disableSelection: this.disableSelection(), disableRemove: this.disableRemove(), fromRootDsIds: this.props.fromRootDsIds, hideHeader: true, hideTypeDropdown: this.props.hideTypeDropdown, hideAllOptionOfTypeDropdown: this.props.hideAllOptionOfTypeDropdown, disableAddData: this.props.disableAddData, hideAddDataButton: this.props.hideAddDataButton, enableToSelectOutputDsFromSelf: this.props.enableToSelectOutputDsFromSelf, hideTabs: this.props.hideTabs, onClickDisabledDsItem: this.props.onClickDisabledDsItem }))),
            showPlaceholder &&
                (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.Link, { className: 'ds-selector-button w-100 mt-0 d-flex justify-content-center align-items-center px-2', onClick: this.toggleDsList, title: selectDataLabel, "aria-label": selectDataLabel, onKeyDown: this.onSelectDataKeyDown, "aria-describedby": this.props['aria-describedby'], innerRef: this.backToFocusNode },
                    (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'text-truncate font-weight-500' }, selectDataLabel))));
    }
}
/**
 * @ignore
 */
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,jimu_theme__WEBPACK_IMPORTED_MODULE_2__.withTheme)(_SetDsBtnDsList));


/***/ }),

/***/ "./jimu-ui/advanced/lib/data-source-selector/components/data-source-selector/index.tsx":
/*!*********************************************************************************************!*\
  !*** ./jimu-ui/advanced/lib/data-source-selector/components/data-source-selector/index.tsx ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DataSourceSelector: () => (/* binding */ DataSourceSelector),
/* harmony export */   _DataSourceSelector: () => (/* binding */ _DataSourceSelector)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");
/* harmony import */ var jimu_theme__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! jimu-theme */ "jimu-theme");
/* harmony import */ var jimu_ui__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! jimu-ui */ "jimu-ui");
/* harmony import */ var _components_set_ds_btn_ds_list__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./components/set-ds-btn-ds-list */ "./jimu-ui/advanced/lib/data-source-selector/components/data-source-selector/components/set-ds-btn-ds-list.tsx");
var __rest = (undefined && undefined.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
/** @jsx jsx */




/**
 * The `DataSourceSelector` component allows an Experience author to select a data source for widgets. This is usually used in a settings panel.
 *
 * ```ts
 * import { DataSourceSelector } from 'jimu-ui/advanced/data-source-selector'
 * ```
 */
class _DataSourceSelector extends jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.PureComponent {
    constructor() {
        super(...arguments);
        this.onToggleUseDataEnabled = () => {
            this.props.onToggleUseDataEnabled && this.props.onToggleUseDataEnabled(!this.props.useDataSourcesEnabled);
        };
        this.onChange = (useDataSources) => {
            this.props.onChange && this.props.onChange(useDataSources);
        };
    }
    render() {
        if (!jimu_core__WEBPACK_IMPORTED_MODULE_0__.DataSourceManager.getInstance()) {
            return null;
        }
        const _a = this.props, { onChange } = _a, otherProps = __rest(_a, ["onChange"]);
        return ((0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.classNames)('w-100', { [this.props.className]: !!this.props.className }) },
            (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'component-data-source-selector' },
                !this.props.mustUseDataSource &&
                    (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.classNames)('d-flex justify-content-between w-100 align-items-center', { 'mb-4': this.props.useDataSourcesEnabled }) },
                        (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_ui__WEBPACK_IMPORTED_MODULE_2__.Label, { className: 'w-75 d-inline-block font-dark-600 setting-text-level-3', for: 'data-source-selector-connect-to-data-switch' }, this.props.intl.formatMessage({ id: 'connectToData', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_2__.defaultMessages.connectToData })),
                        (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_ui__WEBPACK_IMPORTED_MODULE_2__.Switch, { checked: !!this.props.useDataSourcesEnabled, onChange: this.onToggleUseDataEnabled, id: 'data-source-selector-connect-to-data-switch' })),
                (this.props.mustUseDataSource || this.props.useDataSourcesEnabled) &&
                    (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(_components_set_ds_btn_ds_list__WEBPACK_IMPORTED_MODULE_3__["default"], Object.assign({ types: this.props.types }, otherProps, { onChange: this.onChange, intl: this.props.intl, closeDataSourceListOnChange: this.props.closeDataSourceListOnChange, fromDsIds: this.props.fromDsIds, widgetId: this.props.widgetId, isMultipleDataView: this.props.isMultipleDataView, onClickDisabledDsItem: this.props.onClickDisabledDsItem, sidePopperTrigger: this.props.sidePopperTrigger })))));
    }
}
const _DataSourceSelectorWithStyle = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.injectIntl)((0,jimu_theme__WEBPACK_IMPORTED_MODULE_1__.withStyles)(_DataSourceSelector, 'DataSourceSelector'));
/**
 * @ignore
 */
const mapStateToProps = (state) => {
    var _a, _b, _c, _d, _e, _f;
    return {
        dataSources: ((_a = window === null || window === void 0 ? void 0 : window.jimuConfig) === null || _a === void 0 ? void 0 : _a.isBuilder) ? (_c = (_b = state.appStateInBuilder) === null || _b === void 0 ? void 0 : _b.appConfig) === null || _c === void 0 ? void 0 : _c.dataSources : (_d = state.appConfig) === null || _d === void 0 ? void 0 : _d.dataSources,
        dataSourcesInfo: ((_e = window === null || window === void 0 ? void 0 : window.jimuConfig) === null || _e === void 0 ? void 0 : _e.isBuilder) ? (_f = state.appStateInBuilder) === null || _f === void 0 ? void 0 : _f.dataSourcesInfo : state.dataSourcesInfo
    };
};
/**
 * A component that allows an Experience author to select a data source for widgets. This is usually used in a settings panel.
 */
const DataSourceSelector = jimu_core__WEBPACK_IMPORTED_MODULE_0__.ReactRedux.connect(mapStateToProps)(_DataSourceSelectorWithStyle);


/***/ }),

/***/ "./jimu-ui/advanced/lib/data-source-selector/components/data-source-tree.tsx":
/*!***********************************************************************************!*\
  !*** ./jimu-ui/advanced/lib/data-source-selector/components/data-source-tree.tsx ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DataSourceTree: () => (/* binding */ DataSourceTree)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");
/* harmony import */ var jimu_theme__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! jimu-theme */ "jimu-theme");
/* harmony import */ var jimu_ui__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! jimu-ui */ "jimu-ui");
/* harmony import */ var jimu_icons_svg_outlined_editor_minus_circle_svg__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! jimu-icons/svg/outlined/editor/minus-circle.svg */ "./jimu-icons/svg/outlined/editor/minus-circle.svg");
/* harmony import */ var jimu_icons_svg_outlined_editor_minus_circle_svg__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(jimu_icons_svg_outlined_editor_minus_circle_svg__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var jimu_icons_svg_outlined_editor_plus_circle_svg__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! jimu-icons/svg/outlined/editor/plus-circle.svg */ "./jimu-icons/svg/outlined/editor/plus-circle.svg");
/* harmony import */ var jimu_icons_svg_outlined_editor_plus_circle_svg__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(jimu_icons_svg_outlined_editor_plus_circle_svg__WEBPACK_IMPORTED_MODULE_4__);





const FIRST_NODE_IN_COLLAPSE = 'first_node_in_collapse';
class _DataSourceTree extends jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.PureComponent {
    constructor(props) {
        super(props);
        this.__unmounted = false;
        this.getNeedAutoOpen = (dataSource) => {
            if (!this.props.useDataSources || !dataSource) {
                return false;
            }
            if (this.props.useDataSources.some(u => (u === null || u === void 0 ? void 0 : u.mainDataSourceId) === dataSource.id)) {
                return true;
            }
            const childDss = this.props.getChildDataSources(dataSource);
            if (childDss.some(cDs => this.getNeedAutoOpen(cDs))) {
                return true;
            }
            return false;
        };
        this.toggleChildDss = () => {
            if (typeof this.props.isOpen === 'boolean') {
                this.props.toggle && this.props.toggle();
            }
            else {
                this.setState({ isOpen: !this.state.isOpen });
            }
        };
        this.drawCollapseLine = () => {
            jimu_core__WEBPACK_IMPORTED_MODULE_0__.lodash.defer(() => {
                var _a, _b;
                if (this.collapseRef && this.lastNodeInCollapseRef) {
                    const firstNodeOfLastNodeInCollapse = this.lastNodeInCollapseRef.querySelector(`.${FIRST_NODE_IN_COLLAPSE}`) || this.lastNodeInCollapseRef;
                    const paddingTopOfLastNodeInCollapse = window && ((_a = window.getComputedStyle(this.lastNodeInCollapseRef)) === null || _a === void 0 ? void 0 : _a.paddingTop);
                    const paddingTopNumOfLastNodeInCollapse = paddingTopOfLastNodeInCollapse ? parseFloat(paddingTopOfLastNodeInCollapse) + 2 : 0;
                    const paddingTopFirstNodeOfLastNodeInCollapse = window && ((_b = window.getComputedStyle(firstNodeOfLastNodeInCollapse)) === null || _b === void 0 ? void 0 : _b.paddingTop);
                    const paddingTopNumOfFirstNodeOfLastNodeInCollapse = paddingTopFirstNodeOfLastNodeInCollapse ? parseFloat(paddingTopFirstNodeOfLastNodeInCollapse) : 0;
                    if (!this.__unmounted) {
                        this.setState({
                            heightOfCollapseExceptForLastNode: this.collapseRef.offsetHeight - this.lastNodeInCollapseRef.offsetHeight + paddingTopNumOfLastNodeInCollapse,
                            heightOfFirstNodeOfLastNodeInCollapse: firstNodeOfLastNodeInCollapse.offsetHeight - paddingTopNumOfFirstNodeOfLastNodeInCollapse
                        });
                    }
                }
                this.props.drawCollapseLine && this.props.drawCollapseLine();
            });
        };
        // Return child data sources which are selectable.
        this.getSelectableChildNodes = (ds) => {
            if (!ds) {
                return [];
            }
            const childDss = this.props.getChildDataSources(ds) || [];
            const childNodes = childDss.filter(d => this.props.isNodeSelectable(d));
            return childNodes;
        };
        // Return all child nodes, which self is selectable or which contans selectable descendant node.
        this.getChildNodes = (ds) => {
            if (!ds) {
                return [];
            }
            const childDss = this.props.getChildDataSources(ds) || [];
            const childNodes = childDss.filter(d => this.props.isNodeSelectable(d) || this.getChildNodes(d).length > 0);
            return childNodes;
        };
        this.getLabel = () => {
            const parentDsLabel = this.props.getLabel(this.props.dataSource) || this.props.dataSource.id;
            return this.props.label ? `${this.props.label} / ${parentDsLabel}` : parentDsLabel;
        };
        this.getHideLineStyle = () => {
            return {
                height: `${this.state.heightOfCollapseExceptForLastNode + this.state.heightOfFirstNodeOfLastNodeInCollapse / 2}px`
            };
        };
        /**
         * If one node A is unselectable and it has only one child node A1 and the child node A1 is unselectable,
         * the node A should join it's child node A1 and render as one unselectable node (label is `A / A1`).
         */
        this.getWhetherUnselectableParentAndChildNodeCanJoin = () => {
            const isCurrentNodeSelectable = this.props.isNodeSelectable(this.props.dataSource);
            if (isCurrentNodeSelectable) {
                return false;
            }
            else {
                const childNodes = this.getChildNodes(this.props.dataSource);
                const selectableChildNodes = this.getSelectableChildNodes(this.props.dataSource);
                const hasSelectableChildNodes = selectableChildNodes.length > 0;
                return !hasSelectableChildNodes && childNodes.length === 1;
            }
        };
        this.getIsOpen = () => {
            if (typeof this.props.isOpen === 'boolean') {
                return this.props.isOpen;
            }
            else {
                return this.state.isOpen;
            }
        };
        this.getRenderContent = (isRootTree, isChildTreeTheRealRootTree) => {
            var _a;
            if (!this.props.dataSource) {
                return null;
            }
            const childNodes = this.getChildNodes(this.props.dataSource);
            const hasChildNodes = childNodes.length > 0;
            const isRootNodeSelectable = this.props.isNodeSelectable(this.props.dataSource);
            if (!isRootNodeSelectable && !hasChildNodes) {
                return null;
            }
            const selectableChildNodes = this.getSelectableChildNodes(this.props.dataSource);
            const hasSelectableChildNodes = selectableChildNodes.length > 0;
            const label = this.getLabel();
            const canUnselectableParentAndChildNodeJoin = this.getWhetherUnselectableParentAndChildNodeCanJoin();
            const DsItems = childNodes.map((ds, index) => {
                var _a;
                if (ds && ds.id) {
                    return (jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement("div", { 
                        // eslint-disable-next-line
                        key: ds.id, ref: n => { index === childNodes.length - 1 ? this.lastNodeInCollapseRef = n : undefined; }, className: (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.classNames)({ 'pt-4': index !== 0 }) }, this.props.getChildDataSources(ds).length > 0
                        ? jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement(DataSourceTree, Object.assign({}, this.props, { dataSource: ds, label: canUnselectableParentAndChildNodeJoin ? label : '', drawCollapseLine: this.drawCollapseLine, isChildTree: !isChildTreeTheRealRootTree }))
                        : jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement("div", { className: 'd-flex align-items-center' },
                            jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement("div", { className: (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.classNames)('collapse-button leaf') }),
                            jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement("div", { className: (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.classNames)('d-flex align-items-center w-100 z-index-1'), role: 'option', "aria-selected": (_a = this.props.useDataSources) === null || _a === void 0 ? void 0 : _a.some(u => (u === null || u === void 0 ? void 0 : u.mainDataSourceId) === ds.id) }, this.props.renderSelectableNode && this.props.renderSelectableNode(ds)))));
                }
                return null;
            });
            if (hasSelectableChildNodes || isRootNodeSelectable || !canUnselectableParentAndChildNodeJoin) {
                return (jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement("div", { role: 'group' },
                    jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement("div", { className: 'd-flex align-items-center' },
                        jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement("div", { className: (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.classNames)('collapse-button', { root: !this.props.isChildTree }) }, hasChildNodes &&
                            jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement(jimu_ui__WEBPACK_IMPORTED_MODULE_2__.Button, { type: 'tertiary', icon: true, size: 'sm', onClick: this.toggleChildDss, className: 'w-10 px-0 d-flex align-items-center jimu-outline-inside', title: this.getIsOpen()
                                    ? this.props.intl.formatMessage({ id: 'collapse', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_2__.defaultMessages.collapse })
                                    : this.props.intl.formatMessage({ id: 'expand', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_2__.defaultMessages.expand }), "aria-label": this.getIsOpen()
                                    ? `${this.props.intl.formatMessage({ id: 'collapse', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_2__.defaultMessages.collapse })}. ${this.props.getLabel(this.props.dataSource)}`
                                    : `${this.props.intl.formatMessage({ id: 'expand', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_2__.defaultMessages.expand })}. ${this.props.getLabel(this.props.dataSource)}` },
                                jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement(jimu_ui__WEBPACK_IMPORTED_MODULE_2__.Icon, { icon: this.getIsOpen() ? (jimu_icons_svg_outlined_editor_minus_circle_svg__WEBPACK_IMPORTED_MODULE_3___default()) : (jimu_icons_svg_outlined_editor_plus_circle_svg__WEBPACK_IMPORTED_MODULE_4___default()), size: '12' }))),
                        jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement("div", { className: `d-flex align-items-center w-100 z-index-1 ${FIRST_NODE_IN_COLLAPSE}`, role: isRootNodeSelectable ? 'option' : undefined, "aria-selected": isRootNodeSelectable ? (_a = this.props.useDataSources) === null || _a === void 0 ? void 0 : _a.some(u => (u === null || u === void 0 ? void 0 : u.mainDataSourceId) === this.props.dataSource.id) : undefined }, isRootNodeSelectable
                            ? this.props.renderSelectableNode && this.props.renderSelectableNode(this.props.dataSource)
                            : this.props.renderUnselectableNode && this.props.renderUnselectableNode(label, this.props.dataSource, isRootTree))),
                    hasChildNodes &&
                        jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement(jimu_ui__WEBPACK_IMPORTED_MODULE_2__.Collapse, { isOpen: this.getIsOpen(), className: 'collapse-content', innerRef: n => { this.collapseRef = n; }, onEntering: this.drawCollapseLine, onExiting: this.drawCollapseLine, onEntered: this.drawCollapseLine, onExited: this.drawCollapseLine },
                            DsItems,
                            jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement("div", { className: (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.classNames)('collapse-line', { root: !this.props.isChildTree }), style: this.getHideLineStyle() }))));
            }
            else {
                if (hasChildNodes) {
                    return (jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement("div", { role: 'group' }, DsItems));
                }
                else {
                    return null;
                }
            }
        };
        /**
         * If the root node is unselectable and it has only one child node and the child node is unselectable,
         * the root node should join it's child node and render as one unselectable node (label is `${root node's label} / ${child node's label}`).
         * Then the child node will become root node.
         */
        this.getWhetherChildTreeIsTheRealRootTree = () => {
            const canUnselectableParentAndChildNodeJoin = this.getWhetherUnselectableParentAndChildNodeCanJoin();
            const isChildTreeTheRealRootTree = !this.props.isChildTree && canUnselectableParentAndChildNodeJoin;
            return isChildTreeTheRealRootTree;
        };
        this.state = {
            isOpen: typeof this.props.defaultOpen === 'boolean' ? this.props.defaultOpen : this.getNeedAutoOpen(this.props.dataSource),
            heightOfFirstNodeOfLastNodeInCollapse: 0,
            heightOfCollapseExceptForLastNode: 0
        };
    }
    componentDidMount() {
        this.intersectionObserver = new IntersectionObserver(entries => {
            const entry = entries[0];
            /**
             * If the component is not in viewport, the position of DOMs may not correct, which causes the collapse line is not correct.
             * When the component appears in viewport, draw the collapse line again.
             */
            if (entry.intersectionRatio > 0) {
                this.drawCollapseLine();
            }
        });
        this.intersectionObserver.observe(this.rootRef);
    }
    componentDidUpdate(prevProps) {
        if (this.props.isNodeSelectable !== prevProps.isNodeSelectable || this.props.getChildDataSources(this.props.dataSource).length !== prevProps.getChildDataSources(prevProps.dataSource).length) {
            this.drawCollapseLine();
        }
    }
    componentWillUnmount() {
        this.__unmounted = true;
        this.intersectionObserver.disconnect();
    }
    render() {
        const isChildTreeTheRealRootTree = this.getWhetherChildTreeIsTheRealRootTree();
        const isRootTree = !this.props.isChildTree && !isChildTreeTheRealRootTree;
        return (jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement("div", { className: (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.classNames)('w-100 h-100', { [this.props.className]: !!this.props.className }), ref: n => { this.rootRef = n; } },
            jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement("div", { className: (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.classNames)('component-data-source-tree', {
                    bg: this.props.useDefaultBackground && isRootTree && this.getIsOpen() && this.getChildNodes(this.props.dataSource).length > 0,
                    'tree-root': isRootTree
                }) }, this.getRenderContent(isRootTree, isChildTreeTheRealRootTree))));
    }
}
/**
 * The data source tree has two kinds of node, selectable node and unselectable node.
 * Selectable node means the node can be selected and unselectable node means the node can not be selected.
 * The rules to generate unselectable node:
 * 1. If node A can not be selected and all descendant nodes of A can not be selected, the subtree using A as root node will be hidden.
 * 2. If node A can not be selected and some descendant nodes of A can be selected, A will only render as a label.
 * 3. If node A can not be selected, A's child node A1 also can not be selected and A1's child node A11 can be selected,
 *    A11's parent node will be a unselectable node and the label will be `A / A11`.
 */
const DataSourceTree = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.injectIntl)((0,jimu_theme__WEBPACK_IMPORTED_MODULE_1__.withStyles)(_DataSourceTree, 'DataSourceTree'));


/***/ }),

/***/ "./jimu-ui/advanced/lib/data-source-selector/components/data-view-setting-popup.tsx":
/*!******************************************************************************************!*\
  !*** ./jimu-ui/advanced/lib/data-source-selector/components/data-view-setting-popup.tsx ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DataViewSettingPopup: () => (/* binding */ DataViewSettingPopup)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");
/* harmony import */ var jimu_ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! jimu-ui */ "jimu-ui");
/* harmony import */ var _data_source_remove_warning_popup__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./data-source-remove-warning-popup */ "./jimu-ui/advanced/lib/data-source-selector/components/data-source-remove-warning-popup.tsx");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils */ "./jimu-ui/advanced/lib/data-source-selector/utils.ts");
/* harmony import */ var jimu_theme__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! jimu-theme */ "jimu-theme");
/* harmony import */ var jimu_icons_filled_suggested_warning_circle__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! jimu-icons/filled/suggested/warning-circle */ "./jimu-icons/filled/suggested/warning-circle.tsx");
/* harmony import */ var jimu_icons_outlined_editor_edit__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! jimu-icons/outlined/editor/edit */ "./jimu-icons/outlined/editor/edit.tsx");
/* harmony import */ var jimu_icons_outlined_editor_duplicate__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! jimu-icons/outlined/editor/duplicate */ "./jimu-icons/outlined/editor/duplicate.tsx");
/* harmony import */ var jimu_icons_outlined_editor_trash__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! jimu-icons/outlined/editor/trash */ "./jimu-icons/outlined/editor/trash.tsx");
/* harmony import */ var jimu_icons_outlined_data_globe__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! jimu-icons/outlined/data/globe */ "./jimu-icons/outlined/data/globe.tsx");
/** @jsx jsx */










const MIN_RECORD_COUNT = 1;
const DEFAULT_RECORD_COUNT = 100;
const MIN_PAGE_SIZE = 1;
const LOCAL_LOAD_PREFIX = 'DATA_VIEW_SETTING';
const PREVIEW_TABLE_PAGE_SIZE = 15;
class _DataViewSettingPopup extends jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.PureComponent {
    constructor(props) {
        super(props);
        this.titleInput = jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createRef();
        this.editButton = jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createRef();
        this.__unmount = false;
        this.lastScrollTop = 0; // used to get scroll direction
        this.lastTimeToggleTileInput = new Date().getTime();
        this.pendingLoadLocalDsPromise = null;
        this.previousLabel = '';
        this.getLocalDataSource = () => {
            return jimu_core__WEBPACK_IMPORTED_MODULE_0__.DataSourceManager.getInstance().getDataSource(this.getLocalDataSourceId());
        };
        this.initPagination = () => {
            this.setState({
                pagination: {
                    page: 1,
                    pageSize: typeof this.state.dataView.maximum === 'number' ? Math.min(this.state.dataView.maximum, PREVIEW_TABLE_PAGE_SIZE) : PREVIEW_TABLE_PAGE_SIZE
                }
            });
        };
        this.setQueryParams = () => {
            const dataView = this.state.dataView;
            const maxPage = typeof (dataView === null || dataView === void 0 ? void 0 : dataView.maximum) === 'number'
                ? (dataView.maximum <= PREVIEW_TABLE_PAGE_SIZE ? 1 : Math.ceil(dataView.maximum / PREVIEW_TABLE_PAGE_SIZE))
                : null;
            const pageSize = typeof (dataView === null || dataView === void 0 ? void 0 : dataView.maximum) === 'number'
                ? Math.min(dataView.maximum, PREVIEW_TABLE_PAGE_SIZE)
                : PREVIEW_TABLE_PAGE_SIZE;
            let page = this.state.pagination.page;
            if (maxPage) {
                if (page + 1 <= maxPage) {
                    page += 1;
                }
            }
            else {
                page += 1;
            }
            this.setState({
                pagination: {
                    page,
                    pageSize
                }
            });
        };
        this.setLocalDataSource = () => {
            var _a, _b, _c, _d;
            this.setState({ isLocalDataSourceCreated: false });
            const dataView = (_a = this.state.dataView) === null || _a === void 0 ? void 0 : _a.set('orderBy', (_c = (_b = this.state.dataView) === null || _b === void 0 ? void 0 : _b.orderBy) === null || _c === void 0 ? void 0 : _c.filter(orderByOptions => !!orderByOptions.jimuFieldName));
            const dsJson = this.props.mainDataSource.getDataSourceJson().set('id', this.getLocalDataSourceId())
                .set('query', dataView)
                .set('isHidden', true)
                .without('dataViews');
            const ds = jimu_core__WEBPACK_IMPORTED_MODULE_0__.DataSourceManager.getInstance().getDataSource(this.getLocalDataSourceId());
            if (!ds) {
                jimu_core__WEBPACK_IMPORTED_MODULE_0__.DataSourceManager.getInstance().createDataSource({ id: dsJson.id, dataSourceJson: dsJson, layer: (_d = this.props.mainDataSource) === null || _d === void 0 ? void 0 : _d.layer })
                    .then(() => {
                    if (!this.__unmount && this.props.isOpen) {
                        this.setState({ isLocalDataSourceCreated: true });
                    }
                }, err => {
                    console.error('Preview table error: ', err);
                    if (!this.__unmount && this.props.isOpen) {
                        this.setState({ isLocalDataSourceCreated: true });
                    }
                });
            }
            else {
                jimu_core__WEBPACK_IMPORTED_MODULE_0__.DataSourceManager.getInstance().updateDataSourceByDataSourceJson(ds, dsJson);
                jimu_core__WEBPACK_IMPORTED_MODULE_0__.lodash.defer(() => {
                    if (!this.__unmount && this.props.isOpen) {
                        this.setState({
                            isLocalDataSourceCreated: true
                        });
                    }
                });
            }
        };
        this.loadLocalDataSource = () => {
            if (!this.getLocalDataSource()) {
                return;
            }
            if (this.pendingLoadLocalDsPromise) {
                this.pendingLoadLocalDsPromise.cancel();
            }
            this.setState({ isLocalDataSourceLoaded: false });
            let query = Object.assign({ page: 1, pageSize: this.state.pagination.page * this.state.pagination.pageSize }, { outFields: ['*'] });
            // if not setting main data source, need to merge main data source query and local query
            if (!this.props.isSettingMainDataSource) {
                const mainDsQuery = this.props.mainDataSource.getConfigQueryParams() || {};
                // order by fields of main data source should not affect data views
                delete mainDsQuery.orderByFields;
                query = this.props.mainDataSource.mergeQueryParams(mainDsQuery, query);
            }
            this.pendingLoadLocalDsPromise = jimu_core__WEBPACK_IMPORTED_MODULE_0__.cancelablePromise.cancelable(this.getLocalDataSource().load(query, { widgetId: this.getLocalDataSourceId(), scope: jimu_core__WEBPACK_IMPORTED_MODULE_0__.QueryScope.InConfigView })
                .then(() => {
                var _a;
                if (!this.__unmount && this.props.isOpen) {
                    this.setState({
                        isLocalDataSourceLoaded: true,
                        previewTableRecords: (_a = this.getLocalDataSource()) === null || _a === void 0 ? void 0 : _a.getRecordsByPage(1, this.state.pagination.pageSize * this.state.pagination.page)
                    });
                    this.pendingLoadLocalDsPromise = null;
                }
            }, err => {
                console.error('Preview table error: ', err);
                if (!this.__unmount && this.props.isOpen) {
                    this.setState({
                        isLocalDataSourceLoaded: true,
                        previewTableRecords: []
                    });
                    this.pendingLoadLocalDsPromise = null;
                }
            }));
        };
        this.getUseDataSource = (dataSource) => {
            if (!dataSource) {
                return null;
            }
            const rootDs = dataSource.getRootDataSource();
            const mainDs = dataSource.getMainDataSource();
            return (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.Immutable)({
                dataSourceId: dataSource.id,
                rootDataSourceId: rootDs && rootDs.id,
                mainDataSourceId: mainDs && mainDs.id
            });
        };
        this.getNewDataView = (dataSource) => {
            if (!dataSource) {
                return (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.Immutable)({});
            }
            const dsJson = dataSource.getDataSourceJson();
            const dataViewIds = (dsJson === null || dsJson === void 0 ? void 0 : dsJson.dataViews) ? Object.keys(dsJson.dataViews) : null;
            const nextViewIndex = dataViewIds && dataViewIds.map(id => id.split('_')[1]).filter(splitedId => this.isNumeric(splitedId)).length > 0
                ? Math.max.apply(null, dataViewIds.map(id => id.split('_')[1]).filter(splitedId => this.isNumeric(splitedId))) + 1
                : 1;
            return (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.Immutable)({
                id: this.props.newDataViewId || `dataView_${nextViewIndex}`,
                label: this.props.newDataViewLabel || `${this.props.intl.formatMessage({ id: 'dataView', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_1__.defaultMessages.dataView })} ${nextViewIndex}`
            });
        };
        this.getPreviewTable = (ds, records, label) => {
            const schema = ds === null || ds === void 0 ? void 0 : ds.getSchema();
            const fields = schema === null || schema === void 0 ? void 0 : schema.fields;
            if (!records || !fields) {
                return null;
            }
            const sortedFields = Object.values(fields).sort((f1, f2) => { var _a; return (_a = f1.name) === null || _a === void 0 ? void 0 : _a.localeCompare(f2.name); });
            return ((0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'table-container mr-2', onScroll: this.onScroll },
                (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'table-header' },
                    (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("table", null,
                        (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("caption", { className: 'sr-only' }, label),
                        (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("thead", null,
                            (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("tr", { className: 'd-flex' }, sortedFields.map((f, index) => {
                                const isDomainField = !!(ds && jimu_core__WEBPACK_IMPORTED_MODULE_0__.dataSourceUtils.getCodedValueListForCodedValueOrSubtypeField(ds.getLayerDefinition(), f.jimuName));
                                return (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("th", { key: index },
                                    isDomainField && (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_icons_outlined_data_globe__WEBPACK_IMPORTED_MODULE_9__.GlobeOutlined, { className: 'mr-1 domain-field-icon', title: this.props.intl.formatMessage({ id: 'domainField', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_1__.defaultMessages.domainField }) }),
                                    (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("span", { title: f.alias || f.name }, f.alias || f.name));
                            }))))),
                (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'table-body' },
                    (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("table", null,
                        (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("tbody", null, records.map((r, index) => (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("tr", { className: 'd-flex', key: index }, sortedFields.map((f, index) => {
                            const value = r.getFormattedFieldValue(f.jimuName, this.props.intl);
                            return (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("td", { key: index, title: value }, value);
                        }))))))));
        };
        this.isNumeric = (n) => {
            return !isNaN(parseFloat(n)) && isFinite(n);
        };
        this.onScroll = e => {
            const clientHeight = e.target.clientHeight;
            const scrollHeight = e.target.scrollHeight;
            const scrollTop = e.target.scrollTop;
            const isBottom = scrollHeight - (clientHeight + scrollTop) <= 10;
            const isScrollDown = scrollTop > this.lastScrollTop;
            this.lastScrollTop = scrollTop <= 0 ? 0 : scrollTop;
            if (this.state.isLocalDataSourceCreated && this.state.isLocalDataSourceLoaded && isBottom && isScrollDown) {
                this.setQueryParams();
            }
        };
        this.onDuplicate = () => {
            var _a;
            if (!this.props.onDuplicate) {
                return;
            }
            let newDataView = this.getNewDataView(this.props.mainDataSource);
            newDataView = this.state.dataView ? this.state.dataView.merge(newDataView.asMutable({ deep: true })) : newDataView;
            if ((_a = this.state.dataView) === null || _a === void 0 ? void 0 : _a.label) {
                newDataView = newDataView.set('label', this.getDuplicateLabel(this.state.dataView.label));
            }
            this.props.onDuplicate(newDataView);
        };
        this.onRemove = e => {
            var _a, _b, _c;
            e.stopPropagation();
            e.nativeEvent.stopImmediatePropagation();
            const dsId = jimu_core__WEBPACK_IMPORTED_MODULE_0__.DataSourceManager.getInstance().getDataViewDataSourceId((_a = this.props.mainDataSource) === null || _a === void 0 ? void 0 : _a.id, (_b = this.props.dataView) === null || _b === void 0 ? void 0 : _b.id);
            const relatedWidgets = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.getWidgetsUsingDsOrItsDescendantDss)(dsId, this.props.widgets);
            if (relatedWidgets.length === 0) {
                if (this.state.getAppConfigAction) {
                    this.removeDataView((_c = this.props.dataView) === null || _c === void 0 ? void 0 : _c.id);
                    jimu_core__WEBPACK_IMPORTED_MODULE_0__.DataSourceManager.getInstance().destroyDataSource(dsId);
                }
                this.afterRemove();
                this.props.toggle();
            }
            else {
                this.setState({ isRemoveWarningOpen: true }, () => { this.props.toggle(); });
            }
        };
        this.afterRemove = () => {
            this.props.afterRemove && this.props.afterRemove(this.props.dataView);
        };
        this.removeDataView = (dataViewId) => {
            var _a;
            if (!dataViewId || !this.state.getAppConfigAction) {
                return;
            }
            const dsJson = (_a = this.props.mainDataSource) === null || _a === void 0 ? void 0 : _a.getDataSourceJson();
            let dataViews = dsJson.dataViews || (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.Immutable)({});
            dataViews = dataViews.without(dataViewId);
            const rootDsJson = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.editDataSourceJson)(dsJson.setIn(['dataViews'], dataViews));
            this.state.getAppConfigAction().editDataSource(rootDsJson).exec();
        };
        this.onLabelChange = e => {
            this.changeLabel(e.target.value);
        };
        this.changeLabel = (value) => {
            let dataView = this.state.dataView;
            dataView = dataView.set('label', value);
            this.setState({ dataView });
        };
        this.checkLabelOnAccept = (value) => {
            const res = this.checkLabel(value);
            if (!res.valid) {
                this.changeLabel(this.previousLabel);
            }
            return res;
        };
        this.checkLabelOnChange = (value) => {
            return this.checkLabel(value);
        };
        this.checkLabel = (value) => {
            var _a, _b, _c;
            const isLabelChanged = value !== ((_a = this.props.dataView) === null || _a === void 0 ? void 0 : _a.label);
            if (isLabelChanged && (!value || ((_c = (_b = this.props.mainDataSource) === null || _b === void 0 ? void 0 : _b.getDataViews()) === null || _c === void 0 ? void 0 : _c.some(v => v.getLabel() === value)))) {
                return { valid: false, msg: value && this.props.intl.formatMessage({ id: 'duplicatedLabel', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_1__.defaultMessages.duplicatedLabel }) };
            }
            return { valid: true };
        };
        this.onSqlExprBuilderChange = (sqlExprObj) => {
            let dataView = this.state.dataView;
            dataView = dataView.set('where', sqlExprObj);
            this.setState({ dataView });
        };
        this.onSortChange = (sortData, index) => {
            let dataView = this.state.dataView;
            dataView = dataView.set('orderBy', sortData);
            this.setState({ dataView });
        };
        this.onPageSizeChange = (value) => {
            let dataView = this.state.dataView;
            const numberValue = typeof value === 'string' ? parseInt(value) : value;
            if (numberValue && numberValue >= MIN_PAGE_SIZE) {
                dataView = dataView.set('pageSize', numberValue);
            }
            else {
                dataView = dataView.without('pageSize');
            }
            this.setState({ dataView });
        };
        this.onToggleMaximum = (e, checked) => {
            let dataView = this.state.dataView;
            if (checked) {
                dataView = dataView.set('maximum', DEFAULT_RECORD_COUNT);
            }
            else {
                dataView = dataView.without('maximum');
            }
            this.setState({ dataView });
        };
        this.onMaximumChange = (value) => {
            let dataView = this.state.dataView;
            const numberValue = typeof value === 'string' ? parseInt(value) : value;
            if (numberValue && numberValue >= MIN_RECORD_COUNT) {
                dataView = dataView.set('maximum', numberValue);
            }
            else {
                dataView = dataView.set('maximum', DEFAULT_RECORD_COUNT);
            }
            this.setState({ dataView });
        };
        this.onApply = () => {
            var _a;
            let dataView = this.state.dataView;
            dataView = dataView === null || dataView === void 0 ? void 0 : dataView.set('orderBy', (_a = dataView === null || dataView === void 0 ? void 0 : dataView.orderBy) === null || _a === void 0 ? void 0 : _a.filter(orderByOptions => !!orderByOptions.jimuFieldName));
            this.props.onApply(dataView);
        };
        this.toggleTitleInput = () => {
            var _a;
            const time = new Date().getTime();
            /**
             * Pressing tab on edit button will trigger KeyUp event of title input, which causes toggle twice quickly.
             * Can not fix the issue by stopping propagation of edit button.
             */
            if (time - this.lastTimeToggleTileInput > 500) {
                this.previousLabel = (_a = this.state.dataView) === null || _a === void 0 ? void 0 : _a.label;
                this.setState({ isTitleInputShown: !this.state.isTitleInputShown });
                this.lastTimeToggleTileInput = time;
            }
        };
        this.toggleRemoveWarning = () => {
            this.setState({ isRemoveWarningOpen: !this.state.isRemoveWarningOpen });
        };
        _DataViewSettingPopup.count++;
        const dataView = this.props.dataView || this.getNewDataView(this.props.mainDataSource);
        this.state = {
            dataView,
            previewTableRecords: [],
            isTitleInputShown: false,
            isRemoveWarningOpen: false,
            isLocalDataSourceCreated: false,
            isLocalDataSourceLoaded: false,
            SqlExpressionBuilder: null,
            Sort: null,
            getAppConfigAction: null,
            isSqlExpressionValid: null,
            pagination: {
                page: 1,
                pageSize: typeof (dataView === null || dataView === void 0 ? void 0 : dataView.maximum) === 'number' ? Math.min(dataView.maximum, PREVIEW_TABLE_PAGE_SIZE) : PREVIEW_TABLE_PAGE_SIZE
            }
        };
    }
    componentDidMount() {
        this.__unmount = false;
        Promise.all([
            jimu_core__WEBPACK_IMPORTED_MODULE_0__.moduleLoader.loadModule('jimu-ui/advanced/sql-expression-builder'),
            jimu_core__WEBPACK_IMPORTED_MODULE_0__.moduleLoader.loadModule('jimu-ui/basic/sql-expression-runtime'),
            jimu_core__WEBPACK_IMPORTED_MODULE_0__.moduleLoader.loadModule('jimu-for-builder')
        ])
            .then(res => {
            const [sqlBuilder, { isSqlExpressionValid }, { getAppConfigAction }] = res;
            if (!this.__unmount) {
                this.setState({
                    SqlExpressionBuilder: sqlBuilder.SqlExpressionBuilder,
                    Sort: sqlBuilder.Sort,
                    getAppConfigAction,
                    isSqlExpressionValid
                });
            }
        });
        if (this.props.isOpen) {
            this.setLocalDataSource();
        }
    }
    componentDidUpdate(prevProps, prevState) {
        var _a, _b, _c, _d;
        // when props' data view changes, need to reset query params and state's data view
        if (!jimu_core__WEBPACK_IMPORTED_MODULE_0__.lodash.isDeepEqual(prevProps.dataView, this.props.dataView)) {
            this.initPagination();
            this.setState({
                dataView: this.props.dataView || this.getNewDataView(this.props.mainDataSource)
            }, () => {
                var _a, _b;
                // eslint-disable-next-line
                (_b = (_a = document === null || document === void 0 ? void 0 : document.querySelector) === null || _a === void 0 ? void 0 : _a.call(document, '.modal.jimu-outline-inside.show')) === null || _b === void 0 ? void 0 : _b.focus();
            });
        }
        else { // other operations about local data source should wait util state's data view is updated
            if (this.props.isOpen) {
                // when main data source or state's data view changes, change status to loading and set local data source
                if (!this.getLocalDataSource() ||
                    prevProps.mainDataSource !== this.props.mainDataSource ||
                    !jimu_core__WEBPACK_IMPORTED_MODULE_0__.lodash.isDeepEqual((_a = prevState.dataView) === null || _a === void 0 ? void 0 : _a.without('label'), (_b = this.state.dataView) === null || _b === void 0 ? void 0 : _b.without('label'))) {
                    this.setLocalDataSource();
                }
                // when query params or local data source changes, change status to loading and load records
                if (!jimu_core__WEBPACK_IMPORTED_MODULE_0__.lodash.isDeepEqual(prevState.pagination, this.state.pagination) ||
                    (!prevState.isLocalDataSourceCreated && this.state.isLocalDataSourceCreated)) {
                    this.loadLocalDataSource();
                }
            }
        }
        if (((_c = prevState.dataView) === null || _c === void 0 ? void 0 : _c.maximum) !== ((_d = this.state.dataView) === null || _d === void 0 ? void 0 : _d.maximum)) {
            this.initPagination();
        }
        if (prevProps.isOpen && !this.props.isOpen) {
            this.destroyLocalDataSource();
        }
        if (prevState.isTitleInputShown !== this.state.isTitleInputShown) {
            if (this.state.isTitleInputShown && this.titleInput.current) {
                this.titleInput.current.focus();
                this.titleInput.current.select();
            }
            else if (!this.state.isTitleInputShown && this.editButton.current) {
                this.editButton.current.focus();
            }
        }
    }
    componentWillUnmount() {
        var _a;
        this.__unmount = true;
        this.destroyLocalDataSource();
        (_a = this.pendingLoadLocalDsPromise) === null || _a === void 0 ? void 0 : _a.cancel();
    }
    destroyLocalDataSource() {
        if (this.getLocalDataSource()) {
            jimu_core__WEBPACK_IMPORTED_MODULE_0__.DataSourceManager.getInstance().destroyDataSource(this.getLocalDataSource().id);
        }
        if (!this.__unmount) {
            // Reset local data source
            this.setState({
                isLocalDataSourceCreated: false,
                isLocalDataSourceLoaded: false,
                previewTableRecords: [],
                dataView: this.props.dataView || this.getNewDataView(this.props.mainDataSource)
            });
            this.initPagination();
        }
    }
    getLocalDataSourceId() {
        return `${LOCAL_LOAD_PREFIX}-${_DataViewSettingPopup.count}`;
    }
    getDuplicateLabel(label) {
        var _a;
        const copy = (_a = this.props.intl.formatMessage({ id: 'copy', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_1__.defaultMessages.copy })) === null || _a === void 0 ? void 0 : _a.toLocaleLowerCase();
        let newLabel = `${label} ${copy}`;
        let num = 1;
        while (this.props.mainDataSource.getDataSourceJson().dataViews &&
            Object.keys(this.props.mainDataSource.getDataSourceJson().dataViews).find(id => { var _a; return ((_a = this.props.mainDataSource.getDataSourceJson().dataViews[id]) === null || _a === void 0 ? void 0 : _a.label) === newLabel; })) {
            num++;
            newLabel = `${label} ${copy} ${num}`;
        }
        return newLabel;
    }
    render() {
        var _a, _b, _c, _d;
        if (!this.props.mainDataSource.query) {
            return null;
        }
        const dataView = this.state.dataView;
        const dataViewDsId = jimu_core__WEBPACK_IMPORTED_MODULE_0__.DataSourceManager.getInstance().getDataViewDataSourceId((_a = this.props.mainDataSource) === null || _a === void 0 ? void 0 : _a.id, (_b = this.props.dataView) === null || _b === void 0 ? void 0 : _b.id);
        const SqlExpressionBuilder = this.state.SqlExpressionBuilder;
        const Sort = this.state.Sort;
        const isSqlValid = !this.state.isSqlExpressionValid || this.state.isSqlExpressionValid(dataView === null || dataView === void 0 ? void 0 : dataView.where);
        const edit = this.props.intl.formatMessage({ id: 'edit', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_1__.defaultMessages.edit });
        const duplicate = this.props.intl.formatMessage({ id: 'duplicate', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_1__.defaultMessages.duplicate });
        const remove = this.props.intl.formatMessage({ id: 'delete', defaultMessage: jimu_core__WEBPACK_IMPORTED_MODULE_0__.defaultMessages.delete });
        const apply = this.props.intl.formatMessage({ id: 'applyChanges', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_1__.defaultMessages.applyChanges });
        const cancel = this.props.intl.formatMessage({ id: 'cancel', defaultMessage: jimu_core__WEBPACK_IMPORTED_MODULE_0__.defaultMessages.cancel });
        return ((0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", null,
            (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.Modal, { className: (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.classNames)({ [this.props.className]: !!this.props.className }), isOpen: this.props.isOpen, centered: true, toggle: this.props.toggle, returnfocusafterclose: 'true', contentClassName: 'data-view-container', backdrop: 'static', keyboard: false, "aria-label": (_c = this.state.dataView) === null || _c === void 0 ? void 0 : _c.label },
                (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.ModalHeader, { className: 'd-flex justify-content-between align-items-center header' },
                    (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'flex-grow-1 text-truncate' }, !this.props.disableRename
                        ? (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'd-flex align-items-center pr-4' },
                            this.state.isTitleInputShown
                                ? (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.TextInput, { className: 'flex-grow-1', value: dataView === null || dataView === void 0 ? void 0 : dataView.label, onChange: this.onLabelChange, ref: this.titleInput, onBlur: this.toggleTitleInput, onKeyUp: this.toggleTitleInput, checkValidityOnChange: this.checkLabelOnChange, checkValidityOnAccept: this.checkLabelOnAccept })
                                : (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'text-truncate' }, dataView === null || dataView === void 0 ? void 0 : dataView.label),
                            (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.Button, { className: 'flex-shrink-0 ml-2 jimu-outline-inside', type: 'tertiary', size: 'sm', icon: true, onClick: this.toggleTitleInput, title: edit, "aria-label": edit, ref: this.editButton },
                                (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_icons_outlined_editor_edit__WEBPACK_IMPORTED_MODULE_6__.EditOutlined, { size: 'm' })))
                        : (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'flex-grow-1 text-truncate', title: dataView === null || dataView === void 0 ? void 0 : dataView.label }, dataView === null || dataView === void 0 ? void 0 : dataView.label)),
                    (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'flex-shrink-0' },
                        !this.props.disableDuplicate && this.props.dataView &&
                            (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.Button, { className: 'flex-shrink-0 cicle-button mr-4', type: 'default', size: 'sm', icon: true, onClick: this.onDuplicate, title: duplicate, "aria-label": duplicate, disabled: !isSqlValid },
                                (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_icons_outlined_editor_duplicate__WEBPACK_IMPORTED_MODULE_7__.DuplicateOutlined, { size: 'm' })),
                        !this.props.disableRemove && this.props.dataView &&
                            (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.Button, { className: 'flex-shrink-0 cicle-button', type: 'default', size: 'sm', icon: true, onClick: this.onRemove, title: remove, "aria-label": remove },
                                (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_icons_outlined_editor_trash__WEBPACK_IMPORTED_MODULE_8__.TrashOutlined, { size: 'm' })))),
                dataView
                    ? (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.ModalBody, { className: 'd-flex' },
                        (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'w-38 h-100 flex-shrink-0 setting-table' },
                            (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.Tabs, { type: 'underline', fill: true, className: 'h-100', defaultValue: 'filter' },
                                (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.Tab, { id: 'filter', className: 'view-tab', title: this.props.intl.formatMessage({ id: 'filter', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_1__.defaultMessages.filter }) }, SqlExpressionBuilder && (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(SqlExpressionBuilder, { dataSource: this.props.mainDataSource, mode: jimu_core__WEBPACK_IMPORTED_MODULE_0__.SqlExpressionMode.Simple, expression: dataView.where, onChange: this.onSqlExprBuilderChange, queryScope: this.props.isSettingMainDataSource && jimu_core__WEBPACK_IMPORTED_MODULE_0__.QueryScope.InRemoteConfigView })),
                                (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.Tab, { id: 'sort', className: 'view-tab', title: this.props.intl.formatMessage({ id: 'sort', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_1__.defaultMessages.sort }) }, Sort && (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(Sort, { onChange: this.onSortChange, value: dataView.orderBy || (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.Immutable)([]), useDataSource: this.getUseDataSource(this.props.mainDataSource) })),
                                (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.Tab, { id: 'records', className: 'view-tab', title: this.props.intl.formatMessage({ id: 'records', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_1__.defaultMessages.records }) },
                                    (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { css: { paddingRight: 2, paddingTop: 2 } },
                                        (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'd-flex justify-content-between mb-4' },
                                            (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.Label, { for: 'data-view-setting-page-size-input', className: 'label' }, this.props.intl.formatMessage({ id: 'pageSize', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_1__.defaultMessages.pageSize })),
                                            (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.NumericInput, { size: 'sm', value: dataView.pageSize || jimu_core__WEBPACK_IMPORTED_MODULE_0__.CONSTANTS.DEFAULT_QUERY_PAGE_SIZE, onAcceptValue: this.onPageSizeChange, showHandlers: false, precision: 0, min: MIN_PAGE_SIZE, id: 'data-view-setting-page-size-input' })),
                                        (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'd-flex justify-content-between mb-2' },
                                            (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.Label, { for: 'data-view-setting-max-records', className: 'label' }, this.props.intl.formatMessage({ id: 'maximum', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_1__.defaultMessages.maximum })),
                                            (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.Switch, { id: 'data-view-setting-max-records', checked: typeof dataView.maximum === 'number', onChange: this.onToggleMaximum })),
                                        typeof dataView.maximum === 'number' &&
                                            (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'd-flex justify-content-between mb-4' },
                                                (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.Label, { for: 'data-view-setting-max-records-hint', className: 'label' }, this.props.intl.formatMessage({ id: 'maximumLimitationWarning', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_1__.defaultMessages.maximumLimitationWarning })),
                                                (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.Link, { to: 'https://developers.arcgis.com/javascript/latest/api-reference/esri-views-layers-FeatureLayerView.html#maximumNumberOfFeatures', className: 'ml-2 jimu-outline-inside', target: '_blank', id: 'data-view-setting-max-records-hint' }, this.props.intl.formatMessage({ id: 'details', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_1__.defaultMessages.details }))),
                                        typeof dataView.maximum === 'number' &&
                                            (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'd-flex justify-content-between mb-4' },
                                                (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.Label, { for: 'data-view-setting-max-records-num', className: 'label' }, this.props.intl.formatMessage({ id: 'maximumRecordCount', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_1__.defaultMessages.maximumRecordCount })),
                                                (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.NumericInput, { size: 'sm', value: dataView.maximum, onAcceptValue: this.onMaximumChange, precision: 0, min: MIN_RECORD_COUNT, showHandlers: false, id: 'data-view-setting-max-records-num' })))))),
                        (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'w-62 h-100 flex-grow-1 preview-table' },
                            this.getPreviewTable(this.getLocalDataSource(), this.state.previewTableRecords, (_d = this.props.dataView) === null || _d === void 0 ? void 0 : _d.label),
                            (!this.state.isLocalDataSourceCreated || !this.state.isLocalDataSourceLoaded) &&
                                (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.Loading, { type: jimu_ui__WEBPACK_IMPORTED_MODULE_1__.LoadingType.Primary })))
                    : null,
                (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.ModalFooter, { className: 'd-flex justify-content-between pb-30' },
                    (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", null, !isSqlValid &&
                        (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'sql-exp-warning text-truncate', title: this.props.intl.formatMessage({ id: 'sqlExprIncomplete', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_1__.defaultMessages.sqlExprIncomplete }) },
                            (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_icons_filled_suggested_warning_circle__WEBPACK_IMPORTED_MODULE_5__.WarningCircleFilled, { size: 'l', className: 'sql-exp-warning-icon mr-2' }),
                            this.props.intl.formatMessage({ id: 'sqlExprIncomplete', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_1__.defaultMessages.sqlExprIncomplete }))),
                    (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", null,
                        (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.Button, { className: 'mr-10', type: 'primary', onClick: this.onApply, disabled: !isSqlValid, title: apply, "aria-label": apply }, apply),
                        (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.Button, { type: 'default', onClick: this.props.toggle, title: cancel, "aria-label": cancel }, cancel)))),
            (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(_data_source_remove_warning_popup__WEBPACK_IMPORTED_MODULE_2__.DataSourceRemoveWarningPopup, { dataSourceId: dataViewDsId, isOpen: this.state.isRemoveWarningOpen, afterRemove: this.afterRemove, toggle: this.toggleRemoveWarning, reason: _data_source_remove_warning_popup__WEBPACK_IMPORTED_MODULE_2__.DataSourceRemoveWaringReason.DataSourceRemoved })));
    }
}
_DataViewSettingPopup.count = -1;
const mapStateToProps = (state, ownProps) => {
    var _a, _b, _c, _d;
    return {
        widgets: ((_a = state === null || state === void 0 ? void 0 : state.appContext) === null || _a === void 0 ? void 0 : _a.isBuilder) ? (_c = (_b = state === null || state === void 0 ? void 0 : state.appStateInBuilder) === null || _b === void 0 ? void 0 : _b.appConfig) === null || _c === void 0 ? void 0 : _c.widgets : (_d = state === null || state === void 0 ? void 0 : state.appConfig) === null || _d === void 0 ? void 0 : _d.widgets
    };
};
// eslint-disable-next-line
const __DataViewSettingPopup = jimu_core__WEBPACK_IMPORTED_MODULE_0__.ReactRedux.connect(mapStateToProps)(_DataViewSettingPopup);
const DataViewSettingPopup = (0,jimu_theme__WEBPACK_IMPORTED_MODULE_4__.withStyles)((0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.injectIntl)(__DataViewSettingPopup), 'DataViewSettingPopup');


/***/ }),

/***/ "./jimu-ui/advanced/lib/data-source-selector/components/external-data-source-selector/components/url-input.tsx":
/*!*********************************************************************************************************************!*\
  !*** ./jimu-ui/advanced/lib/data-source-selector/components/external-data-source-selector/components/url-input.tsx ***!
  \*********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");
/* harmony import */ var jimu_ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! jimu-ui */ "jimu-ui");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils */ "./jimu-ui/advanced/lib/data-source-selector/components/external-data-source-selector/utils.ts");



let selectDataHelpUrlPromise = null;
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (class extends jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.PureComponent {
    constructor(props) {
        super(props);
        this.__unmounted = false;
        this.dataSourceUrlTypes = [{
                label: this.props.intl.formatMessage({ id: 'anArcGISServerWebService', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_1__.defaultMessages.anArcGISServerWebService })
            } /* , {
              label: 'Other types'
            } */
        ];
        this.onUrlTypesClicked = e => {
            this.setState({ selectedDataSourceUrlType: e.target.value });
        };
        this.onInputUrl = e => {
            this.setState({
                url: e.target.value
            });
        };
        this.onAdded = () => {
            if (this.state.url) {
                const url = this.state.url.split('?')[0];
                if (!url) {
                    return;
                }
                this.props.toggleLoadedStatus(false);
                return (0,_utils__WEBPACK_IMPORTED_MODULE_2__.getDsJsonFromService)(url, this.props.getDsId()).then(res => {
                    this.props.onAdded(res.dsJson, res.label);
                    this.props.toggleLoadedStatus(true);
                }, err => {
                    console.error(err);
                    // If cancele the sign in, shouldn't show error.
                    let errorMsg = '';
                    if ((err === null || err === void 0 ? void 0 : err.code) !== jimu_core__WEBPACK_IMPORTED_MODULE_0__.SignInErrorCode.SignInCanceled) {
                        if (err === null || err === void 0 ? void 0 : err.isSignInError) {
                            errorMsg = err.message2;
                        }
                        else {
                            errorMsg = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.getErrorTextFromErrorCode)(err, this.props.intl);
                        }
                    }
                    errorMsg && this.props.toggleToastStatus(true, errorMsg);
                    this.props.toggleLoadedStatus(true);
                });
            }
        };
        this.checkServiceUrl = (url) => {
            let isSupported = false;
            if ((/^https:\/\//.test(url) || /^\/\//.test(url)) && jimu_core__WEBPACK_IMPORTED_MODULE_0__.dataSourceUtils.isSupportedArcGISService(url, [jimu_core__WEBPACK_IMPORTED_MODULE_0__.SupportedServerTypes.FeatureService, jimu_core__WEBPACK_IMPORTED_MODULE_0__.SupportedServerTypes.MapService, jimu_core__WEBPACK_IMPORTED_MODULE_0__.SupportedServerTypes.SceneService])) {
                isSupported = true;
            }
            return { valid: isSupported };
        };
        this.state = {
            selectedDataSourceUrlType: this.dataSourceUrlTypes[0],
            url: '',
            selectDataHelpUrl: null
        };
    }
    componentDidMount() {
        this.__unmounted = false;
        if (!selectDataHelpUrlPromise) {
            selectDataHelpUrlPromise = jimu_core__WEBPACK_IMPORTED_MODULE_0__.moduleLoader.loadModule('jimu-for-builder')
                .then(module => module.helpUtils)
                .then(helpUtils => helpUtils.getBuildAppsHelpLink('select-data'));
        }
        selectDataHelpUrlPromise.then(url => {
            if (!this.__unmounted) {
                this.setState({
                    selectDataHelpUrl: url
                });
            }
        });
    }
    componentWillUnmount() {
        this.__unmounted = true;
    }
    render() {
        const add = this.props.intl.formatMessage({ id: 'add', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_1__.defaultMessages.add });
        return (jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement("div", { className: 'external-data-source-url-input' },
            jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement("div", { className: 'mt-4 ml-2' },
                jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement("h5", { className: 'url-input-label' }, this.props.intl.formatMessage({ id: 'serviceType', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_1__.defaultMessages.serviceType })),
                jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.Select, { value: this.state.selectedDataSourceUrlType.label, title: this.state.selectedDataSourceUrlType.label, onChange: this.onUrlTypesClicked, className: 'url-type-select', buttonProps: {
                        className: 'text-truncate'
                    } }, this.dataSourceUrlTypes.map((t) => jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement("option", { key: t.label, value: t.label }, t.label)))),
            jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement("div", { className: 'mt-5 ml-2' },
                jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement("h5", { className: 'url-input-label' }, this.props.intl.formatMessage({ id: 'url', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_1__.defaultMessages.url })),
                jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.TextInput, { checkValidityOnChange: this.checkServiceUrl, placeholder: 'URL', onChange: this.onInputUrl, className: 'url-input', value: this.state.url }),
                jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement("div", { className: 'd-flex' },
                    jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement("p", { className: 'mt-2 hint-label' }, this.props.intl.formatMessage({ id: 'addDataByUrlHint', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_1__.defaultMessages.addDataByUrlHint })),
                    this.state.selectDataHelpUrl && jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.Link, { to: this.state.selectDataHelpUrl, className: 'ml-2 font-size-12', target: '_blank' }, this.props.intl.formatMessage({ id: 'details', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_1__.defaultMessages.details })))),
            jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement("div", { className: 'mt-4 ml-2' },
                jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.Button, { onClick: this.onAdded, type: 'primary', disabled: !this.checkServiceUrl(this.state.url).valid, className: 'url-input-add-btn px-4', title: add, "aria-label": add }, add))));
    }
});


/***/ }),

/***/ "./jimu-ui/advanced/lib/data-source-selector/components/external-data-source-selector/index.tsx":
/*!******************************************************************************************************!*\
  !*** ./jimu-ui/advanced/lib/data-source-selector/components/external-data-source-selector/index.tsx ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ExternalDataSourceSelector: () => (/* binding */ ExternalDataSourceSelector)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");
/* harmony import */ var jimu_ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! jimu-ui */ "jimu-ui");
/* harmony import */ var jimu_ui_basic_item_selector__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! jimu-ui/basic/item-selector */ "jimu-ui/basic/item-selector");
/* harmony import */ var _components_url_input__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./components/url-input */ "./jimu-ui/advanced/lib/data-source-selector/components/external-data-source-selector/components/url-input.tsx");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils */ "./jimu-ui/advanced/lib/data-source-selector/components/external-data-source-selector/utils.ts");
/* harmony import */ var _data_source_tree__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../data-source-tree */ "./jimu-ui/advanced/lib/data-source-selector/components/data-source-tree.tsx");
/* harmony import */ var jimu_theme__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! jimu-theme */ "jimu-theme");
/* harmony import */ var jimu_icons_outlined_editor_close__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! jimu-icons/outlined/editor/close */ "./jimu-icons/outlined/editor/close.tsx");
/* harmony import */ var jimu_icons_outlined_application_visible__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! jimu-icons/outlined/application/visible */ "./jimu-icons/outlined/application/visible.tsx");
/* harmony import */ var jimu_icons_outlined_application_invisible__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! jimu-icons/outlined/application/invisible */ "./jimu-icons/outlined/application/invisible.tsx");
/* harmony import */ var jimu_icons_outlined_directional_down__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! jimu-icons/outlined/directional/down */ "./jimu-icons/outlined/directional/down.tsx");
/* harmony import */ var jimu_icons_outlined_directional_up__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! jimu-icons/outlined/directional/up */ "./jimu-icons/outlined/directional/up.tsx");
/* harmony import */ var jimu_core_data_source__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! jimu-core/data-source */ "jimu-core/data-source");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
/** @jsx jsx */



// import AppData from './app-data';










var TabTypes;
(function (TabTypes) {
    TabTypes["WebMap"] = "Web Map";
    TabTypes["WebScene"] = "Web Scene";
    TabTypes["Layers"] = "Layers";
    TabTypes["Url"] = "URL";
})(TabTypes || (TabTypes = {}));
const TabTypeToItemType = {
    [TabTypes.WebMap]: jimu_ui_basic_item_selector__WEBPACK_IMPORTED_MODULE_2__.ItemTypes.WebMap,
    [TabTypes.WebScene]: jimu_ui_basic_item_selector__WEBPACK_IMPORTED_MODULE_2__.ItemTypes.WebScene,
    [TabTypes.Layers]: [jimu_ui_basic_item_selector__WEBPACK_IMPORTED_MODULE_2__.ItemTypes.FeatureService, jimu_ui_basic_item_selector__WEBPACK_IMPORTED_MODULE_2__.ItemTypes.MapService, jimu_ui_basic_item_selector__WEBPACK_IMPORTED_MODULE_2__.ItemTypes.SceneService, jimu_ui_basic_item_selector__WEBPACK_IMPORTED_MODULE_2__.ItemTypes.FeatureCollection, jimu_ui_basic_item_selector__WEBPACK_IMPORTED_MODULE_2__.ItemTypes.GroupLayer]
};
const DsTypeToItemType = {
    [jimu_core__WEBPACK_IMPORTED_MODULE_0__.AllDataSourceTypes.WebMap]: jimu_ui_basic_item_selector__WEBPACK_IMPORTED_MODULE_2__.ItemTypes.WebMap,
    [jimu_core__WEBPACK_IMPORTED_MODULE_0__.AllDataSourceTypes.WebScene]: jimu_ui_basic_item_selector__WEBPACK_IMPORTED_MODULE_2__.ItemTypes.WebScene,
    [jimu_core__WEBPACK_IMPORTED_MODULE_0__.AllDataSourceTypes.FeatureLayer]: [jimu_ui_basic_item_selector__WEBPACK_IMPORTED_MODULE_2__.ItemTypes.WebMap, jimu_ui_basic_item_selector__WEBPACK_IMPORTED_MODULE_2__.ItemTypes.WebScene, jimu_ui_basic_item_selector__WEBPACK_IMPORTED_MODULE_2__.ItemTypes.FeatureService, jimu_ui_basic_item_selector__WEBPACK_IMPORTED_MODULE_2__.ItemTypes.MapService, jimu_ui_basic_item_selector__WEBPACK_IMPORTED_MODULE_2__.ItemTypes.FeatureCollection],
    [jimu_core__WEBPACK_IMPORTED_MODULE_0__.AllDataSourceTypes.SceneLayer]: [jimu_ui_basic_item_selector__WEBPACK_IMPORTED_MODULE_2__.ItemTypes.WebScene, jimu_ui_basic_item_selector__WEBPACK_IMPORTED_MODULE_2__.ItemTypes.SceneService],
    [jimu_core__WEBPACK_IMPORTED_MODULE_0__.AllDataSourceTypes.GroupLayer]: [jimu_ui_basic_item_selector__WEBPACK_IMPORTED_MODULE_2__.ItemTypes.WebMap, jimu_ui_basic_item_selector__WEBPACK_IMPORTED_MODULE_2__.ItemTypes.WebScene, jimu_ui_basic_item_selector__WEBPACK_IMPORTED_MODULE_2__.ItemTypes.MapService, jimu_ui_basic_item_selector__WEBPACK_IMPORTED_MODULE_2__.ItemTypes.FeatureCollection, jimu_ui_basic_item_selector__WEBPACK_IMPORTED_MODULE_2__.ItemTypes.GroupLayer],
    [jimu_core__WEBPACK_IMPORTED_MODULE_0__.AllDataSourceTypes.FeatureService]: jimu_ui_basic_item_selector__WEBPACK_IMPORTED_MODULE_2__.ItemTypes.FeatureService,
    [jimu_core__WEBPACK_IMPORTED_MODULE_0__.AllDataSourceTypes.MapService]: jimu_ui_basic_item_selector__WEBPACK_IMPORTED_MODULE_2__.ItemTypes.MapService,
    [jimu_core__WEBPACK_IMPORTED_MODULE_0__.AllDataSourceTypes.SceneService]: jimu_ui_basic_item_selector__WEBPACK_IMPORTED_MODULE_2__.ItemTypes.SceneService
};
const DsTypeToTabType = {
    [jimu_core__WEBPACK_IMPORTED_MODULE_0__.AllDataSourceTypes.WebMap]: TabTypes.WebMap,
    [jimu_core__WEBPACK_IMPORTED_MODULE_0__.AllDataSourceTypes.WebScene]: TabTypes.WebScene,
    [jimu_core__WEBPACK_IMPORTED_MODULE_0__.AllDataSourceTypes.FeatureLayer]: [TabTypes.WebMap, TabTypes.WebScene, TabTypes.Layers, TabTypes.Url],
    [jimu_core__WEBPACK_IMPORTED_MODULE_0__.AllDataSourceTypes.SceneLayer]: [TabTypes.WebScene, TabTypes.Layers, TabTypes.Url],
    [jimu_core__WEBPACK_IMPORTED_MODULE_0__.AllDataSourceTypes.GroupLayer]: [TabTypes.WebMap, TabTypes.WebScene, TabTypes.Layers, TabTypes.Url],
    [jimu_core__WEBPACK_IMPORTED_MODULE_0__.AllDataSourceTypes.FeatureService]: [TabTypes.Layers, TabTypes.Url],
    [jimu_core__WEBPACK_IMPORTED_MODULE_0__.AllDataSourceTypes.MapService]: [TabTypes.Layers, TabTypes.Url], // If it is map service, should not show webmap and webscene tabs, see issue #9083.
    [jimu_core__WEBPACK_IMPORTED_MODULE_0__.AllDataSourceTypes.SceneService]: [TabTypes.Layers, TabTypes.Url]
};
const TabIcon = {
    [TabTypes.WebMap]: __webpack_require__(/*! jimu-ui/lib/icons/data-map.svg */ "./jimu-ui/lib/icons/data-map.svg"),
    [TabTypes.WebScene]: __webpack_require__(/*! jimu-ui/lib/icons/data-scene.svg */ "./jimu-ui/lib/icons/data-scene.svg"),
    [TabTypes.Layers]: __webpack_require__(/*! jimu-ui/lib/icons/data-layer-16.svg */ "./jimu-ui/lib/icons/data-layer-16.svg"),
    [TabTypes.Url]: __webpack_require__(/*! jimu-ui/lib/icons/widget-link.svg */ "./jimu-ui/lib/icons/widget-link.svg")
};
class _ExternalDataSourceSelector extends jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.PureComponent {
    constructor(props) {
        super(props);
        this.loadingItemNumber = 0;
        this.tabLabel = {
            [TabTypes.WebMap]: this.props.intl.formatMessage({ id: 'webMap', defaultMessage: jimu_core__WEBPACK_IMPORTED_MODULE_0__.defaultMessages.webMap }),
            [TabTypes.WebScene]: this.props.intl.formatMessage({ id: 'webScene', defaultMessage: jimu_core__WEBPACK_IMPORTED_MODULE_0__.defaultMessages.webScene }),
            [TabTypes.Layers]: this.props.intl.formatMessage({ id: 'layers', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_1__.defaultMessages.layers }),
            [TabTypes.Url]: this.props.intl.formatMessage({ id: 'url', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_1__.defaultMessages.url })
        };
        this.__unmount = false;
        this.getTabTypeFromDsType = (dsType) => {
            if (!dsType) {
                return [];
            }
            return Array.isArray(DsTypeToTabType[dsType]) ? DsTypeToTabType[dsType] : [DsTypeToTabType[dsType]];
        };
        this.getTabIcon = (tab) => {
            if (!tab) {
                return null;
            }
            return TabIcon[tab];
        };
        this.getTabLabel = (tab) => {
            if (!tab) {
                return null;
            }
            return this.tabLabel[tab];
        };
        this.getElementPosition = (element) => {
            if (!element) {
                return null;
            }
            let x = element.offsetLeft;
            let y = element.offsetTop;
            let parent = element.offsetParent;
            while (parent !== null) {
                x += parent.offsetLeft;
                y += parent.offsetTop;
                parent = parent.offsetParent;
            }
            return { x, y };
        };
        this.getConfigDsId = () => {
            const appState = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().getState();
            const appConfig = appState && appState.appStateInBuilder && appState.appStateInBuilder.appConfig;
            return jimu_core__WEBPACK_IMPORTED_MODULE_0__.appConfigUtils.getUniqueId(appConfig, 'dataSource');
        };
        this.getNextDsId = () => {
            if (!this.dataSourceId) {
                this.dataSourceId = this.getConfigDsId();
                return this.dataSourceId;
            }
            const currentName = this.dataSourceId.split('_');
            const id = currentName[1] ? parseInt(currentName[1]) + 1 : (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.uuidv1)();
            const name = currentName[0] || 'dataSource';
            this.dataSourceId = `${name}_${id}`;
            return this.dataSourceId;
        };
        this.onItemAdded = (allSelectedItems, latestSelectedItem) => __awaiter(this, void 0, void 0, function* () {
            const dsId = this.getNextDsId();
            try {
                allSelectedItems = allSelectedItems || [];
                this.setState({
                    selectedItems: (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.Immutable)(allSelectedItems.map(item => item.id)),
                    partSelectedItems: this.state.partSelectedItems.filter(id => !allSelectedItems.some(selectedItem => selectedItem.id === id))
                });
                // Show loading.
                this.toggleLoadedStatus(false);
                const dsJson = yield this.getDsJsonFromItemOrService(dsId, latestSelectedItem);
                // Hide loading.
                this.toggleLoadedStatus(true);
                this.onDsJsonAdded(dsJson, latestSelectedItem.title);
            }
            catch (err) {
                if (!this.__unmount) {
                    // Hide loading.
                    this.toggleLoadedStatus(true);
                    // Show error warning.
                    this.toggleToastStatus(true, (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getErrorTextFromErrorCode)(_utils__WEBPACK_IMPORTED_MODULE_4__.AddDataErrorCode.ItemInaccessible, this.props.intl));
                    // Reset selected items.
                    this.setState({
                        selectedItems: this.state.selectedItems.filter(id => id !== latestSelectedItem.id),
                        partSelectedItems: this.state.partSelectedItems.filter(id => id !== latestSelectedItem.id)
                    });
                }
                console.error('Failed to add data. ', latestSelectedItem, err);
            }
        });
        this.getDsJsonFromItemOrService = (dsId, item) => __awaiter(this, void 0, void 0, function* () {
            /**
             * If the item is from a single layer (url ends up with layer id), we need to get data source type by layer definition.
             * For example, group layer of a map service can not be identified by item or url, need `type` of layerDefinition.
             */
            if (item.url && jimu_core__WEBPACK_IMPORTED_MODULE_0__.dataSourceUtils.isSupportedSingleArcGISLayerService(item.url)) {
                return (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getDsJsonFromService)(item.url, dsId, item.portalUrl, item.id).then(res => {
                    var _a;
                    return item.title ? (_a = res.dsJson) === null || _a === void 0 ? void 0 : _a.set('sourceLabel', item.title) : res.dsJson;
                });
            }
            else {
                return jimu_core_data_source__WEBPACK_IMPORTED_MODULE_12__.dataSourceJsonCreator.createDataSourceJsonByItemInfo(dsId, item, item.portalUrl);
            }
        });
        this.onItemRemoved = (allSelectedItems, latestRemovedItem) => {
            this.setState({
                selectedItems: (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.Immutable)(allSelectedItems.map(item => item.id)),
                partSelectedItems: this.state.partSelectedItems.filter(id => id !== latestRemovedItem.id)
            });
            this.onDsJsonRemoved(latestRemovedItem.id, null);
        };
        this.onDsJsonAdded = (dsJson, label) => __awaiter(this, void 0, void 0, function* () {
            var _a, _b;
            try {
                if (!dsJson) {
                    throw new Error((0,_utils__WEBPACK_IMPORTED_MODULE_4__.getErrorTextFromErrorCode)(_utils__WEBPACK_IMPORTED_MODULE_4__.AddDataErrorCode.DataTypeIsNotSupported, this.props.intl));
                }
                this.setState({
                    selectedDss: this.state.selectedDss.concat(dsJson),
                    selectedDssLabels: this.state.selectedDssLabels.concat({ id: dsJson.id, label })
                });
                yield this.checkSceneLayer(dsJson);
                // If selected data source collapse is open, need to create data source to show the data source tree.
                if (this.state.isSelectedDataCollapseOpen) {
                    const ds = yield jimu_core__WEBPACK_IMPORTED_MODULE_0__.DataSourceManager.getInstance().createDataSource(dsJson);
                    this.checkCreatedDss([ds]);
                    if (!this.__unmount) {
                        this.setState({ loadedSelectedDssVersion: this.state.loadedSelectedDssVersion + 1 });
                    }
                }
                this.props.onSelect && this.props.onSelect([dsJson]);
            }
            catch (err) {
                this.clearCacheOfErrorDs(dsJson);
                if (!this.__unmount) {
                    // Show error warning.
                    if ((_b = (_a = err === null || err === void 0 ? void 0 : err.message) === null || _a === void 0 ? void 0 : _a.toUpperCase()) === null || _b === void 0 ? void 0 : _b.includes(_utils__WEBPACK_IMPORTED_MODULE_4__.AddDataErrorCode.WebMapUnsupportedVersion)) {
                        this.toggleToastStatus(true, (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getErrorTextFromErrorCode)(_utils__WEBPACK_IMPORTED_MODULE_4__.AddDataErrorCode.WebMapUnsupportedVersion, this.props.intl));
                    }
                    else {
                        // If cancele the sign in, shouldn't show error.
                        if ((err === null || err === void 0 ? void 0 : err.code) !== jimu_core__WEBPACK_IMPORTED_MODULE_0__.SignInErrorCode.SignInCanceled) {
                            if (err === null || err === void 0 ? void 0 : err.isSignInError) {
                                this.toggleToastStatus(true, err.message1);
                            }
                            else {
                                this.toggleToastStatus(true, (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getErrorTextFromErrorCode)(_utils__WEBPACK_IMPORTED_MODULE_4__.AddDataErrorCode.ItemInaccessible, this.props.intl));
                            }
                        }
                    }
                    // Hide donut loading and reset selected data sources and items.
                    this.setState({
                        loadedSelectedDssVersion: this.state.loadedSelectedDssVersion + 1,
                        selectedDss: this.state.selectedDss.filter(d => d.id !== (dsJson === null || dsJson === void 0 ? void 0 : dsJson.id)),
                        selectedDssLabels: this.state.selectedDssLabels.filter(d => d.id !== (dsJson === null || dsJson === void 0 ? void 0 : dsJson.id)),
                        selectedItems: this.state.selectedItems.filter(id => id !== (dsJson === null || dsJson === void 0 ? void 0 : dsJson.itemId)),
                        partSelectedItems: this.state.partSelectedItems.filter(id => id !== (dsJson === null || dsJson === void 0 ? void 0 : dsJson.itemId))
                    });
                }
                console.error('Failed to create data source. ', dsJson, err);
            }
        });
        this.clearCacheOfErrorDs = (dsJson) => {
            // Clear cache of the error data source.
            jimu_core__WEBPACK_IMPORTED_MODULE_0__.DataSourceManager.getInstance().destroyDataSource(dsJson === null || dsJson === void 0 ? void 0 : dsJson.id);
            if (!this.__unmount) {
                this.onDsJsonRemoved(dsJson === null || dsJson === void 0 ? void 0 : dsJson.itemId, dsJson === null || dsJson === void 0 ? void 0 : dsJson.id);
            }
        };
        /**
         * If data source is scene layer, need to create scene layer data source to check whether it has associated layer or not.
         * If the scene layer dosen't have associated layer, we won't allow to add it.
         */
        this.checkSceneLayer = (dsJson) => __awaiter(this, void 0, void 0, function* () {
            const isSceneLayer = (dsJson === null || dsJson === void 0 ? void 0 : dsJson.type) === jimu_core__WEBPACK_IMPORTED_MODULE_0__.AllDataSourceTypes.SceneLayer;
            if (!dsJson || !isSceneLayer) {
                return;
            }
            try {
                this.toggleLoadedStatus(false);
                const ds = yield jimu_core__WEBPACK_IMPORTED_MODULE_0__.DataSourceManager.getInstance().createDataSource(dsJson);
                this.checkCreatedDss([ds]);
                this.toggleLoadedStatus(true);
            }
            catch (err) {
                this.clearCacheOfErrorDs(dsJson);
                if (!this.__unmount) {
                    // Hide loading.
                    this.toggleLoadedStatus(true);
                    // Show error warning.
                    this.toggleToastStatus(true, (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getErrorTextFromErrorCode)(_utils__WEBPACK_IMPORTED_MODULE_4__.AddDataErrorCode.SceneLayerWithoutAssociatedLayer, this.props.intl));
                    // Reset selected data sources and items.
                    this.setState({
                        selectedDss: this.state.selectedDss.filter(d => d.id !== dsJson.id),
                        selectedDssLabels: this.state.selectedDssLabels.filter(d => d.id !== dsJson.id),
                        selectedItems: this.state.selectedItems.filter(id => id !== dsJson.itemId),
                        partSelectedItems: this.state.partSelectedItems.filter(id => id !== dsJson.itemId)
                    });
                }
            }
        });
        // Check whether the created data source is still selected.
        this.checkCreatedDss = (dss) => {
            dss === null || dss === void 0 ? void 0 : dss.forEach(ds => {
                // If the created data source is unselected now, will destroy it.
                if (ds && !this.state.selectedDss.some(dsJson => dsJson.id === ds.id && (!ds.getDataSourceJson().itemId || dsJson.itemId === ds.getDataSourceJson().itemId))) {
                    jimu_core__WEBPACK_IMPORTED_MODULE_0__.DataSourceManager.getInstance().destroyDataSource(ds.id);
                }
            });
        };
        /**
         * If click close icon to remove selected data source, will remove by data source id.
         * If click an item card to remove selected data, should pass `removeByItemId = true` and remove data by item id.
         */
        this.onDsJsonRemoved = (itemId, dsId) => {
            if (!itemId && !dsId) {
                return;
            }
            const removeDsJsons = itemId
                ? this.state.selectedDss.filter(dsJson => dsJson.itemId === itemId)
                : [this.state.selectedDss.find(dsJson => dsJson.id === dsId)].filter(dsJson => dsJson);
            if (removeDsJsons.length > 0) {
                removeDsJsons.forEach(dsJson => { jimu_core__WEBPACK_IMPORTED_MODULE_0__.DataSourceManager.getInstance().destroyDataSource(dsJson.id); });
                const selectedDss = this.state.selectedDss.filter(selectedDs => itemId ? selectedDs.itemId !== itemId : selectedDs.id !== dsId);
                this.setState({
                    selectedDss,
                    selectedDssLabels: this.state.selectedDssLabels.filter(d => selectedDss.some(selectedDs => selectedDs.id === d.id)),
                    selectedItems: this.state.selectedItems.filter(id => id !== itemId),
                    partSelectedItems: this.state.partSelectedItems.filter(id => id !== itemId),
                    isSelectedDataCollapseOpen: selectedDss.length === 0 ? false : this.state.isSelectedDataCollapseOpen
                });
                this.props.onRemove && this.props.onRemove(removeDsJsons);
            }
        };
        this.onDsJsonChange = (dsJson) => {
            const changedDsIndex = this.state.selectedDss.findIndex(d => d.id === dsJson.id);
            const selectedDssCopy = this.state.selectedDss.slice();
            selectedDssCopy.splice(changedDsIndex, 1, dsJson);
            const ds = jimu_core__WEBPACK_IMPORTED_MODULE_0__.DataSourceManager.getInstance().getDataSource(dsJson.id);
            if (ds) {
                jimu_core__WEBPACK_IMPORTED_MODULE_0__.DataSourceManager.getInstance().updateDataSourceByDataSourceJson(ds, dsJson);
            }
            const changedItem = this.state.selectedItems.concat(this.state.partSelectedItems).find(id => id === (dsJson === null || dsJson === void 0 ? void 0 : dsJson.itemId));
            let selectedItems = this.state.selectedItems;
            let partSelectedItems = this.state.partSelectedItems;
            if (changedItem) {
                const isPartSelected = this.getWhetherIsPartSelected(dsJson);
                if (isPartSelected) {
                    selectedItems = this.state.selectedItems.filter(id => dsJson.itemId && id !== dsJson.itemId);
                    partSelectedItems = this.state.partSelectedItems.concat(changedItem);
                }
                else {
                    selectedItems = this.state.selectedItems.concat(changedItem);
                    partSelectedItems = this.state.partSelectedItems.filter(id => dsJson.itemId && id !== dsJson.itemId);
                }
            }
            this.setState({
                selectedDss: selectedDssCopy,
                selectedItems,
                partSelectedItems
            });
        };
        this.getWhetherIsPartSelected = (dsJson) => {
            let isPartSelected = false;
            if (dsJson === null || dsJson === void 0 ? void 0 : dsJson.childDataSourceJsons) {
                for (let i = 0; i < Object.values(dsJson.childDataSourceJsons).length; i++) {
                    if (this.getWhetherIsPartSelected(Object.values(dsJson.childDataSourceJsons)[i])) {
                        isPartSelected = true;
                        break;
                    }
                }
            }
            else {
                isPartSelected = dsJson.isHidden;
            }
            return isPartSelected;
        };
        this.toggleSelectedDataCollapse = () => {
            // If selected data source collapse is closed, create data source.
            if (!this.state.isSelectedDataCollapseOpen) {
                this.createSelectedDss();
            }
            this.setState({ isSelectedDataCollapseOpen: !this.state.isSelectedDataCollapseOpen });
        };
        this.createSelectedDss = () => {
            const needToCreateDss = this.state.selectedDss.filter(dsJson => !jimu_core__WEBPACK_IMPORTED_MODULE_0__.DataSourceManager.getInstance().getDataSource(dsJson.id));
            // If there are some selected data sources not created, will create them first and then open the collapse.
            if (needToCreateDss.length > 0) {
                return Promise.allSettled(needToCreateDss.map(dsJson => jimu_core__WEBPACK_IMPORTED_MODULE_0__.DataSourceManager.getInstance().createDataSource(dsJson).then(ds => ds.isDataSourceSet ? ds.childDataSourcesReady().then(() => ds) : ds).then(ds => {
                    if (!this.__unmount) {
                        this.setState({ loadedSelectedDssVersion: this.state.loadedSelectedDssVersion + 1 });
                    }
                    return ds;
                }))).then(res => {
                    var _a, _b;
                    const createdRes = res.filter(r => r.status === 'fulfilled');
                    const createdDss = createdRes.map(r => r.value);
                    const failedRes = res.filter(r => r.status === 'rejected');
                    if (failedRes.length > 0) {
                        const failedDss = needToCreateDss.filter(needToCreateDs => !createdDss.some(createdDs => createdDs.id === needToCreateDs.id));
                        failedDss.forEach(failedDs => {
                            this.clearCacheOfErrorDs(failedDs);
                        });
                        if (failedRes.some(r => { var _a, _b, _c; return (_c = (_b = (_a = r.reason) === null || _a === void 0 ? void 0 : _a.message) === null || _b === void 0 ? void 0 : _b.toUpperCase()) === null || _c === void 0 ? void 0 : _c.includes(_utils__WEBPACK_IMPORTED_MODULE_4__.AddDataErrorCode.WebMapUnsupportedVersion); })) {
                            this.toggleToastStatus(true, (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getErrorTextFromErrorCode)(_utils__WEBPACK_IMPORTED_MODULE_4__.AddDataErrorCode.WebMapUnsupportedVersion, this.props.intl));
                        }
                        else {
                            // If cancele the sign in, shouldn't show error.
                            if (!failedRes.some(r => { var _a; return ((_a = r.reason) === null || _a === void 0 ? void 0 : _a.code) === jimu_core__WEBPACK_IMPORTED_MODULE_0__.SignInErrorCode.SignInCanceled; })) {
                                if (failedRes.some(r => { var _a; return (_a = r.reason) === null || _a === void 0 ? void 0 : _a.isSignInError; })) {
                                    this.toggleToastStatus(true, (_b = (_a = failedRes.find(r => { var _a; return (_a = r.reason) === null || _a === void 0 ? void 0 : _a.isSignInError; })) === null || _a === void 0 ? void 0 : _a.reason) === null || _b === void 0 ? void 0 : _b.message1);
                                }
                                else {
                                    this.toggleToastStatus(true, (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getErrorTextFromErrorCode)(_utils__WEBPACK_IMPORTED_MODULE_4__.AddDataErrorCode.ItemInaccessible, this.props.intl));
                                }
                            }
                        }
                    }
                    this.checkCreatedDss(createdDss);
                    // Check whether there are newly selected data sources.
                    return this.createSelectedDss();
                });
            }
            else {
                return Promise.resolve();
            }
        };
        this.onFinish = () => {
            this.props.onFinish && this.props.onFinish(this.state.selectedDss);
        };
        this.onCancel = () => {
            this.state.selectedDss.forEach(dsJson => { jimu_core__WEBPACK_IMPORTED_MODULE_0__.DataSourceManager.getInstance().destroyDataSource(dsJson.id); });
            // Reset `selectedDss` to let `checkCreatedDss` get the latest selected data sources.
            this.setState({ selectedDss: [] }, () => {
                this.props.onCancel && this.props.onCancel();
            });
        };
        this.onActiveTabChange = (tab) => {
            this.setState({ activeTab: tab });
        };
        this.toggleLoadedStatus = (isLoaded) => {
            if (isLoaded) { // one item is loaded
                this.loadingItemNumber -= 1; // number of loading items minus one
            }
            else { // a new item is loading
                this.loadingItemNumber += 1; // number of loading items plus one
            }
            if (this.loadingItemNumber > 0) { // one or more items are loading
                this.setState({ isLoaded: false });
            }
            else {
                this.setState({ isLoaded: true }); // no items are loading
            }
        };
        this.toggleToastStatus = (isToastOpen, errorMsg) => {
            if (isToastOpen) {
                this.setState({ isToastOpen, errorMsg }, () => {
                    setTimeout(() => {
                        if (!this.__unmount) {
                            this.setState({
                                isToastOpen: false,
                                errorMsg: null
                            });
                        }
                    }, 5000);
                });
            }
            else {
                this.setState({ isToastOpen, errorMsg });
            }
        };
        this.toggleHideData = (rootDsJson, dataSource) => {
            if (!rootDsJson) {
                return;
            }
            if (dataSource && dataSource.getDataSourceJson().isHidden) {
                this.onDsJsonChange((0,_utils__WEBPACK_IMPORTED_MODULE_4__.traverseUnhideParentDs)(dataSource));
            }
            else {
                if (dataSource && dataSource.id !== rootDsJson.id) {
                    this.onDsJsonChange((0,_utils__WEBPACK_IMPORTED_MODULE_4__.traverseHideChildDs)(dataSource));
                }
                else {
                    // Only can remove a root data and can not toggle to show and hide it.
                    // So to toggle a root data is actually to remove it.
                    this.onDsJsonRemoved(rootDsJson.itemId, rootDsJson.id);
                }
            }
        };
        this.SelectedDataSourceItem = ({ rootDsJson, dsJson, rootDsLabel }) => {
            const dataSource = jimu_core__WEBPACK_IMPORTED_MODULE_0__.DataSourceManager.getInstance().getDataSource(dsJson.id);
            return ((0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'added-ds-item' },
                !dataSource && (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.Loading, { type: jimu_ui__WEBPACK_IMPORTED_MODULE_1__.LoadingType.Donut, width: 16, height: 16, className: 'w-25 selected-ds-loading' }),
                (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(_data_source_tree__WEBPACK_IMPORTED_MODULE_5__.DataSourceTree, { dataSource: dataSource || dsJson, isNodeSelectable: () => true, renderSelectableNode: ds => this.renderDataItem(ds, rootDsJson, rootDsLabel), getChildDataSources: this.getChildDataSources, getLabel: this.getDataSourceLabel })));
        };
        this.getChildDataSources = (dataSource) => {
            if (!dataSource || !dataSource.isDataSourceSet) {
                return [];
            }
            return dataSource.getChildDataSources();
        };
        this.getDataSourceLabel = (dataSource) => {
            return (dataSource === null || dataSource === void 0 ? void 0 : dataSource.getLabel) ? dataSource.getLabel() || dataSource.id : null;
        };
        this.getItemTypes = (dsTypes, tabType) => {
            const itemTypesFromTabType = TabTypeToItemType[tabType];
            if (!dsTypes || dsTypes.length === 0) {
                return Array.isArray(itemTypesFromTabType) ? (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.Immutable)(itemTypesFromTabType) : itemTypesFromTabType;
            }
            else { // Should join item types generated from data source types and item types generated from current tab type.
                const itemTypesFromDsType = Array.from(new Set(dsTypes.asMutable().reduce((itemTypes, dsType) => {
                    return itemTypes.concat(DsTypeToItemType[dsType]);
                }, [])));
                let finalItemTypes = [];
                itemTypesFromDsType.forEach(itemType => {
                    if (Array.isArray(itemTypesFromTabType) ? itemTypesFromTabType.some(t => t === itemType) : itemType === itemTypesFromTabType) {
                        finalItemTypes = finalItemTypes.concat(itemType);
                    }
                });
                return (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.Immutable)(finalItemTypes);
            }
        };
        this.getWhetherHideSingleLayer = (dsTypes, tabType) => {
            if (dsTypes && tabType === TabTypes.Layers) {
                // If allow to select single feature layer or single scene layer, should not hide single layer items.
                return !dsTypes.some(t => t === jimu_core__WEBPACK_IMPORTED_MODULE_0__.AllDataSourceTypes.FeatureLayer || t === jimu_core__WEBPACK_IMPORTED_MODULE_0__.AllDataSourceTypes.SceneLayer);
            }
            // Show single layer items by default.
            return false;
        };
        this.renderDataItem = (ds, rootDsJson, rootDsLabel) => {
            if (!ds) {
                return null;
            }
            const dsJson = ds.getDataSourceJson ? ds.getDataSourceJson() : ds;
            const dataSource = jimu_core__WEBPACK_IMPORTED_MODULE_0__.DataSourceManager.getInstance().getDataSource(ds.id);
            const isRootDs = ds.id === (rootDsJson === null || rootDsJson === void 0 ? void 0 : rootDsJson.id);
            const l = isRootDs && rootDsLabel ? rootDsLabel : this.getDataSourceLabel(dataSource) || ds.id;
            const clickToShowOrHide = dsJson.isHidden
                ? this.props.intl.formatMessage({ id: 'clickToShow', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_1__.defaultMessages.clickToShow })
                : ((dataSource === null || dataSource === void 0 ? void 0 : dataSource.parentDataSource)
                    ? this.props.intl.formatMessage({ id: 'clickToHide', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_1__.defaultMessages.clickToHide })
                    : this.props.intl.formatMessage({ id: 'remove', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_1__.defaultMessages.remove }));
            return ((0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'd-flex align-items-center justify-content-between w-100 item' },
                (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'd-flex align-items-center flex-grow-1 text-truncate', title: jimu_core__WEBPACK_IMPORTED_MODULE_0__.dataSourceUtils.getDsTypeString(dsJson === null || dsJson === void 0 ? void 0 : dsJson.type, this.props.intl) },
                    (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'd-flex justify-content-center align-items-center flex-shrink-0 ds-thumbnail' },
                        (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.Icon, { icon: jimu_core__WEBPACK_IMPORTED_MODULE_0__.dataSourceUtils.getDsIcon(dsJson), className: 'text-dark', size: '12' })),
                    (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'flex-grow-1 text-truncate pl-2 ds-type', title: l }, l)),
                (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'd-flex align-items-center flex-shrink-0' },
                    (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.Button, { type: 'tertiary', size: 'sm', icon: true, onClick: () => { this.toggleHideData(rootDsJson, dataSource); }, title: clickToShowOrHide, "aria-label": clickToShowOrHide }, dsJson.isHidden ? (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_icons_outlined_application_invisible__WEBPACK_IMPORTED_MODULE_9__.InvisibleOutlined, { size: 's' }) : (dataSource === null || dataSource === void 0 ? void 0 : dataSource.parentDataSource) ? (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_icons_outlined_application_visible__WEBPACK_IMPORTED_MODULE_8__.VisibleOutlined, { size: 's' }) : (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_icons_outlined_editor_close__WEBPACK_IMPORTED_MODULE_7__.CloseOutlined, { size: 's' })))));
        };
        this.getRootDsLabel = (rootDsJson) => {
            var _a;
            return ((_a = this.state.selectedDssLabels.find(d => d.id === (rootDsJson === null || rootDsJson === void 0 ? void 0 : rootDsJson.id))) === null || _a === void 0 ? void 0 : _a.label) || (rootDsJson === null || rootDsJson === void 0 ? void 0 : rootDsJson.id);
        };
        this.setSearchValue = (value) => {
            this.setState({ searchValue: value });
        };
        this.onKeyDown = e => {
            var _a, _b;
            /**
             * Fist time click esc, done button focus, the second time click esc, close button focus.
             */
            if (e.key === 'Esc' || e.key === 'Escape') {
                if (e.target !== this.closeBtnRef.current && e.target !== this.doneBtnRef.current) {
                    // If have the done button, focus it.
                    if (this.doneBtnRef.current) {
                        this.doneBtnRef.current.focus();
                    }
                    else { // Or focus the close button.
                        (_a = this.closeBtnRef.current) === null || _a === void 0 ? void 0 : _a.focus();
                    }
                }
                else if (e.target === this.doneBtnRef.current) {
                    (_b = this.closeBtnRef.current) === null || _b === void 0 ? void 0 : _b.focus();
                }
                else {
                    this.onCancel();
                }
            }
        };
        this.leftMenuRef = jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createRef();
        this.closeBtnRef = jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createRef();
        this.doneBtnRef = jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createRef();
        this.state = {
            searchValue: '',
            selectedDss: [],
            selectedItems: (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.Immutable)([]),
            partSelectedItems: (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.Immutable)([]),
            selectedDssLabels: [],
            activeTab: this.props.types && this.getTabTypeFromDsType(this.props.types[0]) ? this.getTabTypeFromDsType(this.props.types[0])[0] : TabTypes.WebMap,
            isLoaded: true,
            isToastOpen: false,
            isSelectedDataCollapseOpen: false,
            loadedSelectedDssVersion: 0,
            errorMsg: null
        };
    }
    componentDidMount() {
        // Focus the close button on the component is mounted.
        setTimeout(() => {
            var _a;
            (_a = this.closeBtnRef.current) === null || _a === void 0 ? void 0 : _a.focus();
        }, 500);
    }
    componentWillUnmount() {
        this.__unmount = true;
    }
    render() {
        const SelectedDataSourceItem = this.SelectedDataSourceItem;
        let tabs = [];
        if (this.props.types) {
            // To make sure tab order is the same.
            const usedTabs = Array.from(new Set(Array.prototype.concat.apply([], this.props.types.map(t => this.getTabTypeFromDsType(t)).filter(t => !!t))));
            tabs = Object.values(TabTypes).filter(t => usedTabs.includes(t));
        }
        else {
            tabs = Object.values(TabTypes);
        }
        if ((tabs === null || tabs === void 0 ? void 0 : tabs.length) < 1) {
            return null;
        }
        const close = this.props.intl.formatMessage({ id: 'close', defaultMessage: jimu_core__WEBPACK_IMPORTED_MODULE_0__.defaultMessages.close });
        const downUp = this.state.isSelectedDataCollapseOpen ? this.props.intl.formatMessage({ id: 'down', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_1__.defaultMessages.down }) : this.props.intl.formatMessage({ id: 'up', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_1__.defaultMessages.up });
        const done = this.props.intl.formatMessage({ id: 'done', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_1__.defaultMessages.done });
        return ((0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.classNames)('h-100', { [this.props.className]: !!this.props.className }), onKeyDown: this.onKeyDown },
            (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'w-100 component-external-data-source-selector' },
                (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'd-flex flex-wrap align-items-stretch w-100 h-100' },
                    (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'selector-left', ref: this.leftMenuRef },
                        (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("h3", { className: 'selector-left-title', role: 'heading' }, !this.props.isMultiple
                            ? this.props.intl.formatMessage({ id: 'selectData', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_1__.defaultMessages.selectData })
                            : this.props.intl.formatMessage({ id: 'addData', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_1__.defaultMessages.addData })),
                        (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.Nav, { underline: true, vertical: true, right: true, className: 'selector-left-tabs' }, tabs.map(tab => (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.NavItem, { key: tab, className: (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.classNames)('w-100 mb-2', { 'active-tab': this.state.activeTab === tab }) },
                            (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.NavLink, { onClick: () => { this.onActiveTabChange(tab); }, className: 'd-flex' },
                                (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.Icon, { icon: this.getTabIcon(tab), size: '16', className: 'mr-2 flex-shrink-0' }),
                                (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'flex-grow-1 text-truncate text-left', title: this.getTabLabel(tab) }, this.getTabLabel(tab))))))),
                    (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'selector-right h-100' },
                        (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'selector-right-header w-100 d-flex justify-content-end' },
                            (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.Button, { type: 'tertiary', size: 'sm', icon: true, className: 'close-icon', onClick: this.onCancel, title: close, "aria-label": close, ref: this.closeBtnRef },
                                (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_icons_outlined_editor_close__WEBPACK_IMPORTED_MODULE_7__.CloseOutlined, { size: 'l' }))),
                        (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'selector-right-body w-100' }, tabs.map((t, i) => (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.classNames)('inner-item-selector-container h-100 w-100', { 'd-none': t !== this.state.activeTab }), key: i }, t === TabTypes.Url
                            ? (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(_components_url_input__WEBPACK_IMPORTED_MODULE_3__["default"], { onAdded: this.onDsJsonAdded, getDsId: this.getNextDsId, intl: this.props.intl, toggleLoadedStatus: this.toggleLoadedStatus, toggleToastStatus: this.toggleToastStatus })
                            : (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_ui_basic_item_selector__WEBPACK_IMPORTED_MODULE_2__.ItemSelector, { itemType: this.getItemTypes(this.props.types, t), portalUrl: this.props.portalUrl, isMultiple: this.props.isMultiple, onSelect: this.onItemAdded, onRemove: this.onItemRemoved, detailReference: this.leftMenuRef, selectedItems: this.state.selectedItems, partSelectedItems: this.state.partSelectedItems, hideSingleLayer: this.getWhetherHideSingleLayer(this.props.types, t) })))))),
                (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", null, this.state.selectedDss && this.state.selectedDss.length > 0 &&
                    (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'added-ds-container py-4' },
                        (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'd-flex justify-content-between align-items-center px-4' },
                            (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'd-flex align-items-center' },
                                (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("span", { className: 'mr-2' }, this.state.selectedDss.length),
                                (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("span", { className: 'mr-2' }, this.props.intl.formatMessage({ id: 'selected', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_1__.defaultMessages.selected })),
                                (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.Button, { type: 'tertiary', size: 'sm', icon: true, onClick: this.toggleSelectedDataCollapse, title: downUp, "aria-label": downUp }, this.state.isSelectedDataCollapseOpen
                                    ? (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_icons_outlined_directional_down__WEBPACK_IMPORTED_MODULE_10__.DownOutlined, { size: 's' })
                                    : (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_icons_outlined_directional_up__WEBPACK_IMPORTED_MODULE_11__.UpOutlined, { size: 's' }))),
                            (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'small-done-btn' }, !this.state.isSelectedDataCollapseOpen &&
                                (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.Button, { onClick: this.onFinish, type: 'primary', className: 'text-truncate w-100', disabled: !this.state.isLoaded, title: done, "aria-label": done, ref: this.doneBtnRef }, done))),
                        this.state.isSelectedDataCollapseOpen &&
                            (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'added-ds-items' },
                                (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", null, this.state.selectedDss.map((dsJson, i) => (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(SelectedDataSourceItem, { key: i, rootDsJson: dsJson, dsJson: dsJson, rootDsLabel: this.getRootDsLabel(dsJson) })))),
                        this.state.isSelectedDataCollapseOpen &&
                            (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'big-done-btn w-100 px-4' },
                                (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.Button, { onClick: this.onFinish, type: 'primary', className: 'text-truncate w-100', disabled: !this.state.isLoaded, title: done, "aria-label": done }, done)))),
                (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", null, !this.state.isLoaded && (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.Loading, { type: jimu_ui__WEBPACK_IMPORTED_MODULE_1__.LoadingType.Primary })),
                (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.Toast, { text: this.state.errorMsg, type: jimu_ui__WEBPACK_IMPORTED_MODULE_1__.ToastType.Error, open: this.state.isToastOpen }))));
    }
}
const ExternalDataSourceSelector = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.injectIntl)((0,jimu_theme__WEBPACK_IMPORTED_MODULE_6__.withStyles)(_ExternalDataSourceSelector, 'ExternalDataSourceSelector'));


/***/ }),

/***/ "./jimu-ui/advanced/lib/data-source-selector/components/external-data-source-selector/utils.ts":
/*!*****************************************************************************************************!*\
  !*** ./jimu-ui/advanced/lib/data-source-selector/components/external-data-source-selector/utils.ts ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AddDataErrorCode: () => (/* binding */ AddDataErrorCode),
/* harmony export */   getDsJsonFromService: () => (/* binding */ getDsJsonFromService),
/* harmony export */   getErrorTextFromErrorCode: () => (/* binding */ getErrorTextFromErrorCode),
/* harmony export */   traverseHideChildDs: () => (/* binding */ traverseHideChildDs),
/* harmony export */   traverseUnhideParentDs: () => (/* binding */ traverseUnhideParentDs)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");
/* harmony import */ var jimu_ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! jimu-ui */ "jimu-ui");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils */ "./jimu-ui/advanced/lib/data-source-selector/utils.ts");
/* harmony import */ var jimu_core_data_source__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! jimu-core/data-source */ "jimu-core/data-source");




var AddDataErrorCode;
(function (AddDataErrorCode) {
    AddDataErrorCode["DataTypeIsNotSupported"] = "DATA_TYPE_IS_NOT_SUPPORTED_YET";
    AddDataErrorCode["ItemInaccessible"] = "ITEM_INACCESSIBLE";
    AddDataErrorCode["SceneLayerWithoutAssociatedLayer"] = "SCENE_LAYER_WITHOUT_ASSOCIATED_LAYER";
    AddDataErrorCode["WebMapUnsupportedVersion"] = "WEBMAP:UNSUPPORTED-VERSION";
})(AddDataErrorCode || (AddDataErrorCode = {}));
function getErrorTextFromErrorCode(errorCode, intl) {
    switch (errorCode) {
        case AddDataErrorCode.DataTypeIsNotSupported:
            return intl === null || intl === void 0 ? void 0 : intl.formatMessage({ id: 'addDataErrorNotSupported', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_1__.defaultMessages.addDataErrorNotSupported });
        case AddDataErrorCode.SceneLayerWithoutAssociatedLayer:
            return intl === null || intl === void 0 ? void 0 : intl.formatMessage({ id: 'addDataErrorInvalidSceneLayer', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_1__.defaultMessages.addDataErrorInvalidSceneLayer });
        case AddDataErrorCode.WebMapUnsupportedVersion:
            return intl === null || intl === void 0 ? void 0 : intl.formatMessage({ id: 'addDataErrorUnsupportedMap', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_1__.defaultMessages.addDataErrorUnsupportedMap });
        default:
            return intl === null || intl === void 0 ? void 0 : intl.formatMessage({ id: 'invalidResourceItem', defaultMessage: jimu_core__WEBPACK_IMPORTED_MODULE_0__.defaultMessages.invalidResourceItem });
    }
}
function getDsJsonFromService(url, dsId, portalUrl, itemId) {
    if (!url || !dsId) {
        return Promise.reject(AddDataErrorCode.ItemInaccessible);
    }
    url = url.replace(/^http:/, 'https:');
    return jimu_core__WEBPACK_IMPORTED_MODULE_0__.requestUtils.requestWrapper(url, session => {
        return jimu_core__WEBPACK_IMPORTED_MODULE_0__.esri.restRequest.request(url, {
            authentication: session,
            httpMethod: 'GET'
        }).then(response => {
            return jimu_core__WEBPACK_IMPORTED_MODULE_0__.ServiceManager.getInstance().fetchServiceInfo(url)
                .then(res => {
                const serviceDefinition = res.definition;
                if (!serviceDefinition) {
                    return Promise.reject(AddDataErrorCode.ItemInaccessible);
                }
                let dsJson = jimu_core_data_source__WEBPACK_IMPORTED_MODULE_3__.dataSourceJsonCreator.createDataSourceJsonByLayerDefinition(dsId, serviceDefinition, url);
                dsJson = addItemInfoToDsJson(dsJson, portalUrl, itemId);
                return { dsJson, label: serviceDefinition.name || jimu_core__WEBPACK_IMPORTED_MODULE_0__.dataSourceUtils.getLabelFromArcGISServiceUrl(url) };
            });
        });
    }, 1);
}
function addItemInfoToDsJson(dsJson, portalUrl, itemId) {
    if (!dsJson) {
        return null;
    }
    if (portalUrl) {
        dsJson = dsJson.set('portalUrl', portalUrl);
    }
    if (itemId) {
        dsJson = dsJson.set('itemId', itemId);
    }
    return dsJson;
}
function traverseHideChildDs(dataSource) {
    if (!dataSource) {
        return null;
    }
    let dsJson = dataSource.getDataSourceJson();
    dsJson = dsJson.set('isHidden', true);
    return (0,_utils__WEBPACK_IMPORTED_MODULE_2__.editDataSourceJson)(dsJson);
}
function traverseUnhideParentDs(dataSource) {
    if (!dataSource) {
        return null;
    }
    let dsJson = dataSource.getDataSourceJson();
    dsJson = dsJson.set('isHidden', false);
    return (0,_utils__WEBPACK_IMPORTED_MODULE_2__.editDataSourceJson)(dsJson);
}


/***/ }),

/***/ "./jimu-ui/advanced/lib/data-source-selector/components/field-selector-with-full-text-index.tsx":
/*!******************************************************************************************************!*\
  !*** ./jimu-ui/advanced/lib/data-source-selector/components/field-selector-with-full-text-index.tsx ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AddDefinitionStatus: () => (/* binding */ AddDefinitionStatus),
/* harmony export */   FieldSelectorWithFullTextIndex: () => (/* binding */ FieldSelectorWithFullTextIndex)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");
/* harmony import */ var _field_selector__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./field-selector */ "./jimu-ui/advanced/lib/data-source-selector/components/field-selector/index.tsx");
/* harmony import */ var _esri_arcgis_rest_request__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @esri/arcgis-rest-request */ "./node_modules/@esri/arcgis-rest-request/dist/esm/request.js");
/* harmony import */ var jimu_ui__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! jimu-ui */ "jimu-ui");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
/** @jsx jsx */




const { useState, useEffect, useRef } = jimu_core__WEBPACK_IMPORTED_MODULE_0__.React;
var AddDefinitionStatus;
(function (AddDefinitionStatus) {
    AddDefinitionStatus["Success"] = "SUCCESS";
    AddDefinitionStatus["Error"] = "ERROR";
})(AddDefinitionStatus || (AddDefinitionStatus = {}));
const FieldSelectorWithFullTextIndex = (props) => {
    const hadUpdateDefaultIndexes = useRef(false);
    const appId = jimu_core__WEBPACK_IMPORTED_MODULE_0__.ReactRedux.useSelector((state) => { var _a; return (_a = state === null || state === void 0 ? void 0 : state.appStateInBuilder) === null || _a === void 0 ? void 0 : _a.appId; });
    const nls = jimu_core__WEBPACK_IMPORTED_MODULE_0__.hooks.useTranslation(jimu_ui__WEBPACK_IMPORTED_MODULE_2__.defaultMessages);
    const { widgetId, useDataSources, selectedFields, addDefinitionStatusChange, onChange } = props;
    const [showLoading, setShowLoading] = useState(false);
    const [allSelectedFields, setAllSelectedFields] = useState(null);
    useEffect(() => {
        if (!hadUpdateDefaultIndexes.current && selectedFields) {
            const newSelectedFields = getFieldSchema(selectedFields);
            setAllSelectedFields(newSelectedFields);
            hadUpdateDefaultIndexes.current = true;
            addIndexesForDs(newSelectedFields);
        }
    }, [selectedFields]);
    useEffect(() => {
        return () => {
            addIndexesForDs();
        };
    }, []);
    const getFieldSchema = (selectedFields) => {
        var _a;
        const ds = getDs();
        if (!ds || !selectedFields)
            return [];
        const fields = ((_a = ds === null || ds === void 0 ? void 0 : ds.getSchema()) === null || _a === void 0 ? void 0 : _a.fields) || {};
        const fieldSchema = [];
        for (const jimuName in fields) {
            if (selectedFields.includes(fields[jimuName].name)) {
                fieldSchema.push((0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.Immutable)(fields[jimuName]));
            }
        }
        return fieldSchema;
    };
    const getCurrentServiceIndexes = () => __awaiter(void 0, void 0, void 0, function* () {
        const ds = getDs();
        const dsUrl = ds.getDataSourceJson().url;
        return jimu_core__WEBPACK_IMPORTED_MODULE_0__.requestUtils.requestWrapper(dsUrl, (session) => __awaiter(void 0, void 0, void 0, function* () {
            return _esri_arcgis_rest_request__WEBPACK_IMPORTED_MODULE_3__.request(dsUrl, {
                params: {
                    f: 'json'
                },
                authentication: session,
                httpMethod: 'GET'
            }).then(res => {
                const indexes = (res === null || res === void 0 ? void 0 : res.indexes) || [];
                return Promise.resolve(indexes);
            });
        }));
    });
    const onFieldChange = jimu_core__WEBPACK_IMPORTED_MODULE_0__.hooks.useEventCallback((allSelectedFields, ds, isSelectedFromRepeatedDataSourceContext) => {
        setAllSelectedFields(allSelectedFields);
        onChange && onChange(allSelectedFields, ds, isSelectedFromRepeatedDataSourceContext);
    });
    const addToDefinitionForDs = (fields, ds) => __awaiter(void 0, void 0, void 0, function* () {
        if (!fields || (fields === null || fields === void 0 ? void 0 : fields.length) === 0)
            return false;
        const dsUrl = ds.getDataSourceJson().url;
        const indexes = getindexesByField(fields);
        if (!indexes || (indexes === null || indexes === void 0 ? void 0 : indexes.length) === 0)
            return false;
        setShowLoading(true);
        yield jimu_core__WEBPACK_IMPORTED_MODULE_0__.requestUtils.requestWrapper(dsUrl, (session) => __awaiter(void 0, void 0, void 0, function* () {
            if (!session) {
                setShowLoading(false);
                return;
            }
            const adminUrlRegExp = /rest\/services/g;
            let addToDefinitionUrl = `${dsUrl}/addToDefinition`;
            addToDefinitionUrl = addToDefinitionUrl.replace(adminUrlRegExp, 'rest/admin/services');
            yield _esri_arcgis_rest_request__WEBPACK_IMPORTED_MODULE_3__.request(addToDefinitionUrl, {
                params: {
                    f: 'json',
                    async: true,
                    addToDefinition: { indexes: indexes }
                },
                authentication: session,
                httpMethod: 'POST'
            }).then(res => {
                if (res === null || res === void 0 ? void 0 : res.error) {
                    addDefinitionStatusChange && addDefinitionStatusChange(AddDefinitionStatus.Error);
                }
                else {
                    addDefinitionStatusChange && addDefinitionStatusChange(AddDefinitionStatus.Success);
                    updateDsDefinition(indexes);
                }
                setShowLoading(false);
            }).catch(err => {
                addDefinitionStatusChange && addDefinitionStatusChange(AddDefinitionStatus.Error);
                setShowLoading(false);
            });
        }));
    });
    const updateDsDefinition = (newIndexes = []) => __awaiter(void 0, void 0, void 0, function* () {
        const ds = getDs();
        const definition = ds.getLayerDefinition();
        let indexes = (definition === null || definition === void 0 ? void 0 : definition.indexes) || [];
        indexes = indexes.concat(newIndexes);
        const newDefinition = Object.assign(Object.assign({}, definition), { indexes });
        ds.setLayerDefinition(newDefinition);
    });
    const getCurrentDsIndexesField = () => __awaiter(void 0, void 0, void 0, function* () {
        let indexesField = [];
        return getCurrentServiceIndexes().then(indexes => {
            indexes === null || indexes === void 0 ? void 0 : indexes.forEach(item => {
                var _a;
                if (item.fields && (item === null || item === void 0 ? void 0 : item.indexType) === 'FullText') {
                    const currentFields = ((_a = item.fields) === null || _a === void 0 ? void 0 : _a.split(', ')) || [];
                    indexesField = indexesField.concat(currentFields);
                }
            });
            return Promise.resolve(indexesField);
        });
    });
    const getShouldAddIndexFields = (fields) => __awaiter(void 0, void 0, void 0, function* () {
        if (!fields)
            return [];
        return getCurrentDsIndexesField().then(indexesField => {
            const shouldAddIndexFields = fields.filter(field => !(indexesField === null || indexesField === void 0 ? void 0 : indexesField.includes(field.name)));
            return Promise.resolve(shouldAddIndexFields);
        });
    });
    const getindexesByField = (allSelectedFields) => {
        var _a, _b;
        const indexes = [];
        allSelectedFields.forEach(fields => {
            if (fields.esriType !== jimu_core__WEBPACK_IMPORTED_MODULE_0__.EsriFieldType.GlobalID && fields.type === jimu_core__WEBPACK_IMPORTED_MODULE_0__.JimuFieldType.String) {
                indexes.push({
                    name: `exb-${appId}-${widgetId}-${fields.name}`,
                    fields: `${fields.name}`
                });
            }
        });
        const totalIndex = {
            name: `exb-${appId}-${widgetId}-${(_a = allSelectedFields === null || allSelectedFields === void 0 ? void 0 : allSelectedFields[0]) === null || _a === void 0 ? void 0 : _a.name}`,
            fields: (_b = allSelectedFields === null || allSelectedFields === void 0 ? void 0 : allSelectedFields.map(field => field.name)) === null || _b === void 0 ? void 0 : _b.join(', '),
            indexType: 'FullText'
        };
        indexes.push(totalIndex);
        return indexes;
    };
    const toggleDropdown = (isOpen) => {
        if (isOpen)
            return false;
        addIndexesForDs();
    };
    const getDs = () => {
        var _a;
        const dsId = (_a = useDataSources[0]) === null || _a === void 0 ? void 0 : _a.dataSourceId;
        const dsManager = jimu_core__WEBPACK_IMPORTED_MODULE_0__.DataSourceManager.getInstance();
        return dsManager.getDataSource(dsId);
    };
    const addIndexesForDs = (selectedFields) => __awaiter(void 0, void 0, void 0, function* () {
        var _a, _b;
        const ds = getDs();
        const supportsFullTextSearch = (_b = (_a = ds === null || ds === void 0 ? void 0 : ds.getLayerDefinition()) === null || _a === void 0 ? void 0 : _a.advancedQueryCapabilities) === null || _b === void 0 ? void 0 : _b.supportsFullTextSearch;
        if (supportsFullTextSearch) {
            const currentSelectedFields = selectedFields || allSelectedFields;
            const fields = yield getShouldAddIndexFields(currentSelectedFields);
            addToDefinitionForDs(fields, ds);
        }
    });
    const STYLE = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.css) `
    .loading {
      margin-top: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(6)};
      color: var(--dark-400);
      align
    }
    .loading-msg {
      margin-left: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(10)};
    }
    .loading-icon-con {
      @keyframes loading {
        0% {transform: rotate(0deg); };
        100% {transform: rotate(360deg)};
      }
      width: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(16)};
      height: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(16)};
      min-width: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(16)};
      border: 2px solid var(--dark-300);
      border-radius: 50%;
      border-top: 2px solid var(--primary-500);
      box-sizing: border-box;
      animation:loading 2s infinite linear;
      box-sizing: border-box;
    }
  `;
    return ((0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'field-selector-with-full-text-index-con w-100', css: STYLE },
        (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(_field_selector__WEBPACK_IMPORTED_MODULE_1__.FieldSelector, Object.assign({}, props, { onChange: onFieldChange, toggle: toggleDropdown })),
        showLoading && (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'loading d-flex align-items-center' },
            (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'loading-icon-con' }),
            (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'loading-msg' }, nls('creatingIndexes')))));
};


/***/ }),

/***/ "./jimu-ui/advanced/lib/data-source-selector/components/field-selector/components/common-list.tsx":
/*!********************************************************************************************************!*\
  !*** ./jimu-ui/advanced/lib/data-source-selector/components/field-selector/components/common-list.tsx ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ CommonList)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");
/* harmony import */ var jimu_ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! jimu-ui */ "jimu-ui");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils */ "./jimu-ui/advanced/lib/data-source-selector/components/field-selector/utils.ts");



class CommonList extends jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.PureComponent {
    constructor(props) {
        super(props);
        this.state = {
            isOpen: false
        };
    }
    render() {
        const fields = this.props.fields;
        if (!fields || !this.props.ds) {
            return null;
        }
        const noSelectionId = fields[_utils__WEBPACK_IMPORTED_MODULE_2__.NO_SELECTION_ID] ? [_utils__WEBPACK_IMPORTED_MODULE_2__.NO_SELECTION_ID] : [];
        return (jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement("div", { className: 'field-list px-4', role: 'menu' }, fields && noSelectionId.concat(Object.keys(fields).filter(fieldId => fieldId !== _utils__WEBPACK_IMPORTED_MODULE_2__.NO_SELECTION_ID)).map(fieldId => {
            const iconAndColor = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.getIconFromFieldType)(fields[fieldId].type, this.props.theme, this.props.intl);
            const isSelected = this.props.selectedFields && (this.props.isMultiple
                ? this.props.selectedFields.some(name => name === fieldId)
                : fieldId === this.props.selectedFields[0]);
            const label = fields[fieldId].alias || fields[fieldId].name;
            return (jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.Button, { role: `menuitem${this.props.isMultiple ? 'checkbox' : 'radio'}`, title: label, "aria-checked": isSelected, "aria-label": `${iconAndColor === null || iconAndColor === void 0 ? void 0 : iconAndColor.title} ${label}`, key: fieldId, onClick: () => { this.props.onFieldClick([fields[fieldId]]); }, className: (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.classNames)('field-item mt-2 py-1 px-2 d-flex w-100 align-items-center', {
                    'field-item-selected': isSelected
                }) },
                iconAndColor && jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.Icon, { icon: iconAndColor.icon, color: iconAndColor.color, className: 'mr-2 flex-shrink-0', size: 16 }),
                jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement("div", { className: 'flex-grow-1 text-truncate' }, label)));
        })));
    }
}


/***/ }),

/***/ "./jimu-ui/advanced/lib/data-source-selector/components/field-selector/components/dropdown-list.tsx":
/*!**********************************************************************************************************!*\
  !*** ./jimu-ui/advanced/lib/data-source-selector/components/field-selector/components/dropdown-list.tsx ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ MultipleDropdownList)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");
/* harmony import */ var jimu_ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! jimu-ui */ "jimu-ui");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils */ "./jimu-ui/advanced/lib/data-source-selector/components/field-selector/utils.ts");



class MultipleDropdownList extends jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.PureComponent {
    constructor() {
        super(...arguments);
        this.dropdownProps = {
            autoWidth: true
        };
        this.widthForDropdownItem = { width: 'calc(100% - 20px)' };
        this.widthForDropdownItemLabel = { width: 'calc(100% - 10px)' };
        this.onChange = (selectedFieldPairs) => {
            var _a;
            // eslint-disable-next-line
            const prevSelectedFields = (((_a = this.props.selectedFields) === null || _a === void 0 ? void 0 : _a.asMutable()) || []);
            const selectedFields = ((selectedFieldPairs === null || selectedFieldPairs === void 0 ? void 0 : selectedFieldPairs.map(p => p.value)) || []);
            let longerSelected = selectedFields;
            let shorterSelected = prevSelectedFields;
            if (prevSelectedFields.length > selectedFields.length) {
                longerSelected = prevSelectedFields;
                shorterSelected = selectedFields;
            }
            const clickedFields = longerSelected.filter(lJimuName => !shorterSelected.some(sJimuName => sJimuName === lJimuName));
            this.props.onFieldClick(clickedFields.map(f => this.props.fields[f]));
        };
        this.getFields = () => {
            if (this.props.fields) {
                const res = [];
                const noSelectionId = this.props.fields[_utils__WEBPACK_IMPORTED_MODULE_2__.NO_SELECTION_ID] ? [_utils__WEBPACK_IMPORTED_MODULE_2__.NO_SELECTION_ID] : [];
                noSelectionId.concat(Object.keys(this.props.fields).filter(fieldId => fieldId !== _utils__WEBPACK_IMPORTED_MODULE_2__.NO_SELECTION_ID)).forEach(fieldId => {
                    const fieldItem = this.getFieldItem(fieldId);
                    res.push(fieldItem);
                });
                return res;
            }
            return [];
        };
        this.getSelectedFields = () => {
            if (this.props.fields && this.props.selectedFields) {
                const res = [];
                this.props.selectedFields.filter(fieldId => !!this.props.fields[fieldId]).forEach(fieldId => {
                    const fieldItem = this.getFieldItem(fieldId);
                    res.push(fieldItem);
                });
                return res;
            }
            return [];
        };
        this.getFieldItem = (fieldId) => {
            var _a, _b, _c;
            const label = ((_a = this.props.fields[fieldId]) === null || _a === void 0 ? void 0 : _a.alias) || ((_b = this.props.fields[fieldId]) === null || _b === void 0 ? void 0 : _b.name);
            const iconAndColor = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.getIconFromFieldType)((_c = this.props.fields[fieldId]) === null || _c === void 0 ? void 0 : _c.type, this.props.theme, this.props.intl);
            return {
                value: fieldId,
                label,
                render: () => {
                    return (jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement("div", { className: 'd-flex justify-content-start align-items-center', style: this.widthForDropdownItem, "aria-label": `${iconAndColor === null || iconAndColor === void 0 ? void 0 : iconAndColor.title} ${label}` },
                        iconAndColor && jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.Icon, { icon: iconAndColor.icon, color: iconAndColor.color, className: 'd-inline-block mr-2', size: 16 }),
                        jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement("div", { className: 'text-truncate', style: this.widthForDropdownItemLabel, title: label }, label)));
                }
            };
        };
        this.toggleAdvancedSelect = (isOpen) => {
            this.props.toggle && this.props.toggle(isOpen);
        };
    }
    render() {
        if (!this.props.fields || !this.props.ds) {
            return null;
        }
        const dropdownProps = this.props.dropdownProps ? Object.assign(Object.assign({}, this.props.dropdownProps), this.dropdownProps) : this.dropdownProps;
        return (jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement("div", null,
            jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.AdvancedSelect, Object.assign({ size: 'sm' }, dropdownProps, { fluid: true, staticValues: this.getFields(), sortValuesByLabel: false, selectedValues: this.getSelectedFields(), onChange: this.onChange, placeholder: this.props.placeholder, isMultiple: this.props.isMultiple, hideSearchInput: this.props.isSearchInputHidden, hideBottomTools: !this.props.useMultiDropdownBottomTools, isEmptyOptionHidden: true, title: `${this.getSelectedFields().map(field => field.label).toString()}`, toggle: this.toggleAdvancedSelect }))));
    }
}


/***/ }),

/***/ "./jimu-ui/advanced/lib/data-source-selector/components/field-selector/components/field-selector-inner.tsx":
/*!*****************************************************************************************************************!*\
  !*** ./jimu-ui/advanced/lib/data-source-selector/components/field-selector/components/field-selector-inner.tsx ***!
  \*****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   FieldSelectorInner: () => (/* binding */ FieldSelectorInner),
/* harmony export */   _FieldSelectorInner: () => (/* binding */ _FieldSelectorInner)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");
/* harmony import */ var jimu_ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! jimu-ui */ "jimu-ui");
/* harmony import */ var _common_list__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./common-list */ "./jimu-ui/advanced/lib/data-source-selector/components/field-selector/components/common-list.tsx");
/* harmony import */ var _dropdown_list__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./dropdown-list */ "./jimu-ui/advanced/lib/data-source-selector/components/field-selector/components/dropdown-list.tsx");
/* harmony import */ var _main_data_and_view_selector__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../main-data-and-view-selector */ "./jimu-ui/advanced/lib/data-source-selector/components/main-data-and-view-selector.tsx");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils */ "./jimu-ui/advanced/lib/data-source-selector/components/field-selector/utils.ts");
/* harmony import */ var jimu_theme__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! jimu-theme */ "jimu-theme");
/* harmony import */ var jimu_icons_outlined_editor_search__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! jimu-icons/outlined/editor/search */ "./jimu-icons/outlined/editor/search.tsx");
/** @jsx jsx */








/**
 * The `FieldSelector` component allows users to select fields from a data source.
 *
 * ```ts
 * import { FieldSelector } from 'jimu-ui/advanced/data-source-selector'
 * ```
 */
class _FieldSelectorInner extends jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.PureComponent {
    constructor(props) {
        super(props);
        this.getWhetherArrayIsShallowEqual = (arr1, arr2) => {
            let isEqual = false;
            if (arr1 && arr2 && arr1.length === arr2.length) {
                isEqual = !arr1.some((v, i) => v !== arr2[i]);
            }
            return isEqual;
        };
        this.getDefaultSelectedDs = (dataSources, selectedFields) => {
            /**
             * If don't have selected fields and use data source dropdown, will not set selected data source.
             * The reason is that,
             * some run time data views (such as data view for populated features) will be added automatically if use data source dropdown,
             * and will get the default selected data source and data view from callback of data source dropdown,
             * the default selected data view will honor `defaultDataViewPriority` of the data source dropdown (`MainDataAndViewSelector`).
             */
            const hasSelectedFields = this.hasSelectedFields();
            const selectedDs = (hasSelectedFields || this.props.isDataSourceDropDownHidden) ? this.getDsFromSelectedFieldsAndUseDss(dataSources, selectedFields) : null;
            return selectedDs;
        };
        this.hasSelectedFields = () => {
            if (!this.props.selectedFields) {
                return false;
            }
            if (Array.isArray(this.props.selectedFields)) {
                return this.props.selectedFields.length > 0;
            }
            else if (typeof this.props.selectedFields === 'object') {
                return Object.values(this.props.selectedFields).every(s => s && s.length > 0);
            }
            else {
                return false;
            }
        };
        /**
         * If have selected fields,
         */
        this.getDsFromSelectedFieldsAndUseDss = (dataSources, selectedFields) => {
            let ds;
            if (selectedFields && dataSources) { // selected fields are passed to props
                // get selected data source from selected fields
                const areFromMultipleDataSources = this.getAreFromMultipleDss(dataSources, selectedFields);
                if (areFromMultipleDataSources) {
                    const dsId = Object.keys(this.props.selectedFields)[0];
                    const isSelectionDataView = dsId.split('-').reverse()[0] === jimu_core__WEBPACK_IMPORTED_MODULE_0__.CONSTANTS.SELECTION_DATA_VIEW_ID;
                    if (isSelectionDataView) {
                        const dataView = jimu_core__WEBPACK_IMPORTED_MODULE_0__.DataSourceManager.getInstance().getDataSource(dsId);
                        const mainDs = dataView && dataView.getMainDataSource();
                        const mainDsId = mainDs && mainDs.id;
                        ds = this.props.dataSources.some(ds => ds && ds.getMainDataSource().id === mainDsId)
                            ? dataView
                            : null;
                    }
                    else {
                        ds = this.props.dataSources.find(ds => ds && ds.id === dsId);
                    }
                }
                else {
                    ds = dataSources[0];
                }
            }
            else if (dataSources) { // selected fields are not passed to props
                // use the first one of data sources as selected data source
                ds = dataSources[0];
            }
            return ds;
        };
        this.getAreFromMultipleDss = (dataSources, selectedFields) => {
            if (!selectedFields) {
                return (dataSources === null || dataSources === void 0 ? void 0 : dataSources.length) > 1;
            }
            return !Array.isArray(selectedFields);
        };
        this.getDsLabel = (ds) => {
            if (!ds || !ds.getDataSourceJson()) {
                return '';
            }
            return ds.getLabel() || ds.id || '';
        };
        this.getSelectedFieldsJimuName = (selectedDs, dataSources, selectedFields, isMultiple) => {
            if (!selectedDs || !selectedDs.id || !selectedFields) {
                return (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.Immutable)([]);
            }
            const areFromMultipleDataSources = this.getAreFromMultipleDss(dataSources, selectedFields);
            // If there are multiple data sources, get selected field array by data source id.
            const fields = areFromMultipleDataSources ? (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.Immutable)(selectedFields[selectedDs.id]) : selectedFields;
            if (!fields) {
                return (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.Immutable)([]);
            }
            if (isMultiple) {
                return fields;
            }
            else {
                return fields.slice(0, 1);
            }
        };
        this.getSelectedUseDataSource = () => {
            if (!this.state.selectedDs) {
                return null;
            }
            return this.getUseDataSources([this.state.selectedDs])[0];
        };
        this.getWhetherJimuNameIsInHiddenFields = (jimuName) => {
            var _a;
            let isInHiddenFields = false;
            if (this.props.hiddenFields) {
                const areFromMultipleDataSources = this.getAreFromMultipleDss(this.props.dataSources, this.props.selectedFields);
                let hiddenFields = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.Immutable)([]);
                if (areFromMultipleDataSources) {
                    hiddenFields = this.props.hiddenFields[(_a = this.state.selectedDs) === null || _a === void 0 ? void 0 : _a.id];
                }
                else {
                    hiddenFields = this.props.hiddenFields;
                }
                isInHiddenFields = hiddenFields.some(f => f === jimuName);
            }
            return isInHiddenFields;
        };
        /**
         * Get fields which are -
         * 1. macth types in props
         * 2. not in hidden fields in props
         * 3. match search values
         */
        this.getValidFields = (ds) => {
            const allFields = this.getAllFields(ds);
            if (!allFields) {
                return null;
            }
            let fields;
            if (!this.props.types && !this.props.hiddenFields && !this.state.searchValue) {
                fields = allFields;
            }
            else {
                let f = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.Immutable)({});
                let type;
                let name;
                Object.keys(allFields).forEach(jimuName => {
                    type = allFields[jimuName].type;
                    name = allFields[jimuName].alias || allFields[jimuName].name;
                    const isInTypes = !this.props.types || (type && this.props.types && this.props.types.some(t => t === type));
                    const isInHiddenFields = this.getWhetherJimuNameIsInHiddenFields(jimuName);
                    const isMatchingSearchValue = !this.state.searchValue || (this.state.searchValue && name && name.toLowerCase().includes(this.state.searchValue.toLowerCase()));
                    if (isInTypes && !isInHiddenFields && isMatchingSearchValue) {
                        f = f.setIn([jimuName], allFields[jimuName]);
                    }
                });
                fields = f;
            }
            if (fields && this.props.noSelectionItem) {
                fields = fields.set(_utils__WEBPACK_IMPORTED_MODULE_5__.NO_SELECTION_ID, this.getNoSelectionItem());
            }
            return fields;
        };
        this.getNoSelectionItem = () => ((0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.Immutable)(Object.assign(Object.assign({}, this.props.noSelectionItem), { jimuName: _utils__WEBPACK_IMPORTED_MODULE_5__.NO_SELECTION_ID })));
        this.getUseDataSources = (dataSources) => {
            if (!dataSources) {
                return null;
            }
            let useDataSources = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.Immutable)([]);
            dataSources.forEach(d => {
                var _a;
                if (d) {
                    useDataSources = useDataSources.concat({
                        dataSourceId: d.id,
                        mainDataSourceId: d.getMainDataSource().id,
                        dataViewId: d.dataViewId,
                        rootDataSourceId: (_a = d.getRootDataSource()) === null || _a === void 0 ? void 0 : _a.id
                    });
                }
            });
            return useDataSources;
        };
        this.onSelectedUseDsChange = (useDataSource, isSelectedFromRepeatedDataSourceContext) => {
            const selectedDs = jimu_core__WEBPACK_IMPORTED_MODULE_0__.DataSourceManager.getInstance().getDataSource(useDataSource.dataSourceId);
            // update state
            this.setState({
                selectedDs,
                isFromRepeatedDs: isSelectedFromRepeatedDataSourceContext
            });
            // change the selected fields if selected use data source is changed
            if (this.hasSelectedFields()) {
                const selectedFieldJimuNames = this.getSelectedFieldsJimuName(this.state.selectedDs, this.props.dataSources, this.props.selectedFields, this.props.isMultiple);
                const selectedFields = selectedFieldJimuNames.map(jimuName => { var _a; return selectedDs && ((_a = this.getAllFields(selectedDs)) === null || _a === void 0 ? void 0 : _a[jimuName]); }).filter(f => !!f);
                this.props.onChange && this.props.onChange(selectedFields.asMutable(), selectedDs, isSelectedFromRepeatedDataSourceContext);
            }
        };
        this.onSearchChange = e => {
            this.setState({ searchValue: e.target.value });
        };
        this.onSelectedFieldsChange = (clickedFields) => {
            if (clickedFields.some(f => (f === null || f === void 0 ? void 0 : f.jimuName) === _utils__WEBPACK_IMPORTED_MODULE_5__.NO_SELECTION_ID)) {
                this.props.onChange && this.props.onChange([], this.state.selectedDs, this.state.isFromRepeatedDs);
                return;
            }
            const prevSelectedFieldsJimuName = this.getSelectedFieldsJimuName(this.state.selectedDs, this.props.dataSources, this.props.selectedFields, this.props.isMultiple).asMutable();
            const fields = this.getAllFields(this.state.selectedDs);
            let currentSelectedFields = prevSelectedFieldsJimuName.map(jimuName => fields === null || fields === void 0 ? void 0 : fields[jimuName]).filter(f => f);
            clickedFields.forEach(clickedField => {
                if (!clickedField) {
                    return;
                }
                if (prevSelectedFieldsJimuName.some(selectedFieldJimuName => selectedFieldJimuName === clickedField.jimuName)) {
                    if (this.props.isMultiple) {
                        currentSelectedFields = currentSelectedFields.filter(selectedField => selectedField.jimuName !== clickedField.jimuName);
                    }
                    else {
                        currentSelectedFields = [];
                    }
                }
                else {
                    if (this.props.isMultiple) {
                        currentSelectedFields = currentSelectedFields.concat(clickedField);
                    }
                    else {
                        currentSelectedFields = [clickedField];
                    }
                }
            });
            this.props.onChange && this.props.onChange(currentSelectedFields, this.state.selectedDs, this.state.isFromRepeatedDs);
        };
        this.toggleDropdown = (isOpen) => {
            this.props.toggle && this.props.toggle(isOpen);
        };
        this.state = {
            selectedDs: this.getDefaultSelectedDs(this.props.dataSources, this.props.selectedFields),
            searchValue: '',
            isFromRepeatedDs: !!this.props.isSelectedFromRepeatedDataSourceContext
        };
    }
    componentDidMount() {
        var _a;
        if (this.props.useDefault && !this.props.selectedFields) {
            const defaultSelectedField = Object.values((_a = this.getValidFields(this.state.selectedDs)) !== null && _a !== void 0 ? _a : {})[0];
            if (defaultSelectedField) {
                this.props.onChange([defaultSelectedField], this.state.selectedDs, this.state.isFromRepeatedDs);
            }
        }
    }
    componentDidUpdate(prevProps, prevState) {
        var _a;
        if (!this.getWhetherArrayIsShallowEqual(this.props.dataSources, prevProps.dataSources) || this.props.selectedFields !== prevProps.selectedFields) {
            this.setState({ selectedDs: this.getDefaultSelectedDs(this.props.dataSources, this.props.selectedFields) });
        }
        if (this.props.useDefault && !this.props.selectedFields && prevState.selectedDs !== this.state.selectedDs) {
            const defaultSelectedField = Object.values((_a = this.getValidFields(this.state.selectedDs)) !== null && _a !== void 0 ? _a : {})[0];
            if (defaultSelectedField) {
                this.props.onChange([defaultSelectedField], this.state.selectedDs, this.state.isFromRepeatedDs);
            }
        }
        if (prevProps.isSelectedFromRepeatedDataSourceContext !== this.props.isSelectedFromRepeatedDataSourceContext) {
            this.setState({ isFromRepeatedDs: !!this.props.isSelectedFromRepeatedDataSourceContext });
        }
    }
    getAllFields(ds) {
        var _a;
        const selectedFieldJimuNames = ds === null || ds === void 0 ? void 0 : ds.getSelectedFields();
        const fields = (_a = ds === null || ds === void 0 ? void 0 : ds.getSchema()) === null || _a === void 0 ? void 0 : _a.fields;
        const toBeRemovedFieldJimuNames = fields ? Object.keys(fields).filter(jimuName => !selectedFieldJimuNames.includes(jimuName)) : [];
        return fields === null || fields === void 0 ? void 0 : fields.without(...toBeRemovedFieldJimuNames);
    }
    render() {
        if (!this.props.dataSources || this.props.dataSources.filter(ds => !!ds).length === 0) {
            console.warn('No data sources');
            return null;
        }
        const validFields = this.getValidFields(this.state.selectedDs);
        const selectedFieldsJimuName = this.getSelectedFieldsJimuName(this.state.selectedDs, this.props.dataSources, this.props.selectedFields, this.props.isMultiple);
        /**
         * If there is an item to indicate that no fields is selected (this.props.noSelectionItem) and there is really no selected fields,
         * make the item selected in UI.
         */
        const selectedFieldsForUI = this.props.noSelectionItem && selectedFieldsJimuName.length === 0 ? (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.Immutable)([this.getNoSelectionItem().jimuName]) : selectedFieldsJimuName;
        const dropdownProps = Object.assign(Object.assign({}, this.props.dropdownProps), { useKeyUpEvent: this.props.useKeyUpEvent, 'aria-label': this.props['aria-label'] });
        return ((0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { style: this.props.style, className: (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.classNames)('w-100 h-100', { [this.props.className]: !!this.props.className }) },
            (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'component-field-selector w-100 h-100' },
                this.props.isDataSourceDropDownHidden
                    ? null
                    : (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'ds-name p-4 d-flex justify-content-between align-items-center' },
                        (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(_main_data_and_view_selector__WEBPACK_IMPORTED_MODULE_4__.MainDataAndViewSelector, { widgetId: this.props.widgetId, useDataSources: this.getUseDataSources(this.props.dataSources), onChange: this.onSelectedUseDsChange, useSelectionDataView: this.props.useSelectionDataView, usePopulatedDataView: this.props.usePopulatedDataView, selectedUseDataSource: this.getSelectedUseDataSource(), isSelectedFromRepeatedDataSourceContext: this.state.isFromRepeatedDs })),
                // If use dropdown, do not show/hide search input here. Do it inside dropdown list.
                this.props.isSearchInputHidden || this.props.useDropdown
                    ? null
                    : (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'd-inline-block w-100 px-4 mb-2 item-selector-search' },
                        (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.TextInput, { placeholder: this.props.intl.formatMessage({ id: 'search', defaultMessage: jimu_core__WEBPACK_IMPORTED_MODULE_0__.defaultMessages.search }), onChange: this.onSearchChange, className: 'd-inline-block search-input', value: this.state.searchValue, prefix: (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_icons_outlined_editor_search__WEBPACK_IMPORTED_MODULE_7__.SearchOutlined, { color: this.props.theme.colors.dark }) })),
                !this.props.useDropdown
                    ? (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(_common_list__WEBPACK_IMPORTED_MODULE_2__["default"], { ds: this.state.selectedDs, fields: validFields, selectedFields: selectedFieldsForUI, intl: this.props.intl, isMultiple: this.props.isMultiple, onFieldClick: this.onSelectedFieldsChange, theme: this.props.theme })
                    : (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(_dropdown_list__WEBPACK_IMPORTED_MODULE_3__["default"], { placeholder: this.props.placeholder, ds: this.state.selectedDs, fields: validFields, selectedFields: selectedFieldsForUI, isMultiple: this.props.isMultiple, isSearchInputHidden: this.props.isSearchInputHidden, onFieldClick: this.onSelectedFieldsChange, theme: this.props.theme, dropdownProps: dropdownProps, useMultiDropdownBottomTools: this.props.useMultiDropdownBottomTools, intl: this.props.intl, toggle: this.props.toggle }))));
    }
}
const FieldSelectorInner = (0,jimu_theme__WEBPACK_IMPORTED_MODULE_6__.withStyles)((0,jimu_theme__WEBPACK_IMPORTED_MODULE_6__.withTheme)((0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.injectIntl)(_FieldSelectorInner)), 'FieldSelector');


/***/ }),

/***/ "./jimu-ui/advanced/lib/data-source-selector/components/field-selector/index.tsx":
/*!***************************************************************************************!*\
  !*** ./jimu-ui/advanced/lib/data-source-selector/components/field-selector/index.tsx ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   FieldSelector: () => (/* binding */ FieldSelector)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");
/* harmony import */ var _components_field_selector_inner__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./components/field-selector-inner */ "./jimu-ui/advanced/lib/data-source-selector/components/field-selector/components/field-selector-inner.tsx");
var __rest = (undefined && undefined.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};


/**
 * A component to select field from a data source.
 */
class FieldSelector extends jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.PureComponent {
    render() {
        const _a = this.props, { useDataSources, dataSources } = _a, otherProps = __rest(_a, ["useDataSources", "dataSources"]);
        if (dataSources) {
            return (jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement(_components_field_selector_inner__WEBPACK_IMPORTED_MODULE_1__.FieldSelectorInner, Object.assign({}, this.props)));
        }
        else {
            if ((useDataSources === null || useDataSources === void 0 ? void 0 : useDataSources.length) === 1) {
                return (jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement(jimu_core__WEBPACK_IMPORTED_MODULE_0__.DataSourceComponent, { useDataSource: useDataSources[0] }, (ds, info) => jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement(_components_field_selector_inner__WEBPACK_IMPORTED_MODULE_1__.FieldSelectorInner, Object.assign({}, otherProps, { dataSources: [ds] }))));
            }
            else {
                return (jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement(jimu_core__WEBPACK_IMPORTED_MODULE_0__.MultipleDataSourceComponent, { useDataSources: useDataSources }, (dss, infos) => jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement(_components_field_selector_inner__WEBPACK_IMPORTED_MODULE_1__.FieldSelectorInner, Object.assign({}, otherProps, { dataSources: dss && Object.values(dss) }))));
            }
        }
    }
}


/***/ }),

/***/ "./jimu-ui/advanced/lib/data-source-selector/components/field-selector/utils.ts":
/*!**************************************************************************************!*\
  !*** ./jimu-ui/advanced/lib/data-source-selector/components/field-selector/utils.ts ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   NO_SELECTION_ID: () => (/* binding */ NO_SELECTION_ID),
/* harmony export */   getIconFromFieldType: () => (/* binding */ getIconFromFieldType)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");
/* harmony import */ var jimu_ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! jimu-ui */ "jimu-ui");
/* harmony import */ var jimu_icons_svg_outlined_data_number_svg__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! jimu-icons/svg/outlined/data/number.svg */ "./jimu-icons/svg/outlined/data/number.svg");
/* harmony import */ var jimu_icons_svg_outlined_data_number_svg__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(jimu_icons_svg_outlined_data_number_svg__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var jimu_icons_svg_outlined_data_string_svg__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! jimu-icons/svg/outlined/data/string.svg */ "./jimu-icons/svg/outlined/data/string.svg");
/* harmony import */ var jimu_icons_svg_outlined_data_string_svg__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(jimu_icons_svg_outlined_data_string_svg__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var jimu_icons_svg_outlined_data_date_svg__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! jimu-icons/svg/outlined/data/date.svg */ "./jimu-icons/svg/outlined/data/date.svg");
/* harmony import */ var jimu_icons_svg_outlined_data_date_svg__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(jimu_icons_svg_outlined_data_date_svg__WEBPACK_IMPORTED_MODULE_4__);





const NO_SELECTION_ID = 'CLICK_ME_TO_CLEAR_SELECTION';
function getIconFromFieldType(type, theme, intl) {
    if (!type || !theme) {
        return null;
    }
    const fieldTypeToTitile = intl && {
        [jimu_core__WEBPACK_IMPORTED_MODULE_0__.JimuFieldType.Number]: intl.formatMessage({ id: 'numberField', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_1__.defaultMessages.numberField }),
        [jimu_core__WEBPACK_IMPORTED_MODULE_0__.JimuFieldType.String]: intl.formatMessage({ id: 'stringField', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_1__.defaultMessages.stringField }),
        [jimu_core__WEBPACK_IMPORTED_MODULE_0__.JimuFieldType.Date]: intl.formatMessage({ id: 'dateField', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_1__.defaultMessages.dateField })
    };
    const fieldTypeToIcon = {
        [jimu_core__WEBPACK_IMPORTED_MODULE_0__.JimuFieldType.Number]: (jimu_icons_svg_outlined_data_number_svg__WEBPACK_IMPORTED_MODULE_2___default()),
        [jimu_core__WEBPACK_IMPORTED_MODULE_0__.JimuFieldType.String]: (jimu_icons_svg_outlined_data_string_svg__WEBPACK_IMPORTED_MODULE_3___default()),
        [jimu_core__WEBPACK_IMPORTED_MODULE_0__.JimuFieldType.Date]: (jimu_icons_svg_outlined_data_date_svg__WEBPACK_IMPORTED_MODULE_4___default())
    };
    const fieldTypeToIconColor = {
        [jimu_core__WEBPACK_IMPORTED_MODULE_0__.JimuFieldType.Number]: theme.colors.info,
        [jimu_core__WEBPACK_IMPORTED_MODULE_0__.JimuFieldType.String]: theme.colors.success,
        [jimu_core__WEBPACK_IMPORTED_MODULE_0__.JimuFieldType.Date]: theme.colors.warning
    };
    return {
        icon: fieldTypeToIcon[type],
        color: fieldTypeToIconColor[type],
        title: fieldTypeToTitile === null || fieldTypeToTitile === void 0 ? void 0 : fieldTypeToTitile[type]
    };
}


/***/ }),

/***/ "./jimu-ui/advanced/lib/data-source-selector/components/main-data-and-view-selector.tsx":
/*!**********************************************************************************************!*\
  !*** ./jimu-ui/advanced/lib/data-source-selector/components/main-data-and-view-selector.tsx ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DataViewPriority: () => (/* binding */ DataViewPriority),
/* harmony export */   MainDataAndViewSelector: () => (/* binding */ MainDataAndViewSelector)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");
/* harmony import */ var jimu_ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! jimu-ui */ "jimu-ui");
/* harmony import */ var jimu_layouts_layout_runtime__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! jimu-layouts/layout-runtime */ "jimu-layouts/layout-runtime");
/* harmony import */ var jimu_theme__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! jimu-theme */ "jimu-theme");
/** @jsx jsx */




var DataViewPriority;
(function (DataViewPriority) {
    /**
     * populated data view > common data view (aka user added data view) > selection data view > default data view (aka main data source)
     */
    DataViewPriority["First"] = "POPULATED_VIEW_SELECTION_DEFAULT";
    /**
     * common data view > default data view > selection data view > populated data view
     */
    DataViewPriority["Second"] = "VIEW_DEFAULT_SELECTION_POPULATED";
})(DataViewPriority || (DataViewPriority = {}));
const DEFAULT_DATA_VIEW_ID = 'USE_MAIN_DATA_SOURCE';
class _MainDataAndViewSelector extends jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.PureComponent {
    constructor() {
        super(...arguments);
        this.getWhetherUseDsIsShallowEqual = (u1, u2) => {
            let isEqual = false;
            if (u1 && u2 && u1.length === u2.length) {
                isEqual = !u1.some((v, i) => v.dataSourceId !== u2[i].dataSourceId);
            }
            return isEqual;
        };
        this.isPopulatedView = (u) => {
            return (u === null || u === void 0 ? void 0 : u.dataViewId) === jimu_core__WEBPACK_IMPORTED_MODULE_0__.CONSTANTS.REPEAT_CONTEXT_DATA_VIEW_ID;
        };
        this.isSelectionView = (u) => {
            return (u === null || u === void 0 ? void 0 : u.dataViewId) === jimu_core__WEBPACK_IMPORTED_MODULE_0__.CONSTANTS.SELECTION_DATA_VIEW_ID;
        };
        this.isDefaultView = (u) => {
            return (u === null || u === void 0 ? void 0 : u.dataViewId) === DEFAULT_DATA_VIEW_ID || (u === null || u === void 0 ? void 0 : u.dataViewId) === jimu_core__WEBPACK_IMPORTED_MODULE_0__.CONSTANTS.OUTPUT_DATA_VIEW_ID;
        };
        this.isCommonView = (u) => {
            return (u === null || u === void 0 ? void 0 : u.dataViewId) && !this.isPopulatedView(u) && !this.isSelectionView(u) && !this.isDefaultView(u);
        };
        this.getOneDefaultUseDs = (widgetId, allUseDataSources, browserSizeMode) => {
            const groupedUseDss = this.groupUseDataSourcesByMainDsAndAddAutoViews(widgetId, allUseDataSources, browserSizeMode);
            let priority = [];
            if (this.props.defaultDataViewPriority === DataViewPriority.Second) {
                priority = [this.isCommonView, this.isDefaultView, this.isSelectionView, this.isPopulatedView];
            }
            else {
                priority = [this.isPopulatedView, this.isCommonView, this.isSelectionView, this.isDefaultView];
            }
            const useDssFromRandomMainDs = Object.values(groupedUseDss).find(useDss => useDss.some(u => priority[0](u))) ||
                Object.values(groupedUseDss).find(useDss => useDss.some(u => priority[1](u))) ||
                Object.values(groupedUseDss).find(useDss => useDss.some(u => priority[2](u))) ||
                Object.values(groupedUseDss).find(useDss => useDss.some(u => priority[3](u))) ||
                Object.values(groupedUseDss)[0];
            const defaultSelectedUseDs = useDssFromRandomMainDs
                ? (useDssFromRandomMainDs.find(u => priority[0](u)) ||
                    useDssFromRandomMainDs.find(u => priority[1](u)) ||
                    useDssFromRandomMainDs.find(u => priority[2](u)) ||
                    useDssFromRandomMainDs.find(u => priority[3](u)) ||
                    useDssFromRandomMainDs[0])
                : null;
            return defaultSelectedUseDs;
        };
        this.getSelectedUseDsFromProps = (widgetId, selectedUseDataSource, allUseDataSources, isSelectedFromRepeatedDataSourceContext, browserSizeMode) => {
            var _a, _b;
            const groupedUseDss = this.groupUseDataSourcesByMainDsAndAddAutoViews(widgetId, allUseDataSources, browserSizeMode);
            const defaultSelectedUseDs = this.getOneDefaultUseDs(widgetId, allUseDataSources, browserSizeMode);
            const tempSelectUseDs = selectedUseDataSource
                ? (isSelectedFromRepeatedDataSourceContext
                    ? (_a = groupedUseDss[selectedUseDataSource.mainDataSourceId]) === null || _a === void 0 ? void 0 : _a.find(u => u.dataViewId === jimu_core__WEBPACK_IMPORTED_MODULE_0__.CONSTANTS.REPEAT_CONTEXT_DATA_VIEW_ID)
                    : (selectedUseDataSource.dataViewId ? selectedUseDataSource : (_b = groupedUseDss[selectedUseDataSource.mainDataSourceId]) === null || _b === void 0 ? void 0 : _b.find(u => u.dataViewId === DEFAULT_DATA_VIEW_ID)))
                : defaultSelectedUseDs;
            return tempSelectUseDs;
        };
        /**
         * Whether is in repeated data source context.
         * Some widgets can provide repeated data source context, such as list widget.
         * If widgets are in such a widget, they will have a repeated data source context.
         */
        this.getWhetherUseRepeatedDataSourceContext = (widgetId, useDataSourcesWithSameMainDs, allUseDataSources, browserSizeMode) => {
            var _a, _b, _c, _d, _e;
            const config = ((_a = window === null || window === void 0 ? void 0 : window.jimuConfig) === null || _a === void 0 ? void 0 : _a.isBuilder) ? (_c = (_b = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().getState()) === null || _b === void 0 ? void 0 : _b.appStateInBuilder) === null || _c === void 0 ? void 0 : _c.appConfig : (_d = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().getState()) === null || _d === void 0 ? void 0 : _d.appConfig;
            if (!config || !widgetId || !useDataSourcesWithSameMainDs || useDataSourcesWithSameMainDs.length === 0 || !allUseDataSources || !browserSizeMode) {
                return false;
            }
            const parentWidgetId = jimu_layouts_layout_runtime__WEBPACK_IMPORTED_MODULE_2__.searchUtils.getParentWidgetIdOfContent(config, widgetId, jimu_core__WEBPACK_IMPORTED_MODULE_0__.LayoutItemType.Widget, browserSizeMode);
            const parentWidgetJson = config.widgets[parentWidgetId];
            const isInRepeatedDataSourceContext = parentWidgetJson && ((_e = parentWidgetJson.manifest.properties) === null || _e === void 0 ? void 0 : _e.canProvideRepeatDataSource);
            let haveSameUseDataSources = false;
            for (let i = 0; i < useDataSourcesWithSameMainDs.length; i++) {
                const realUseDataSource = this.getRealUseDataSources(useDataSourcesWithSameMainDs[i], allUseDataSources);
                haveSameUseDataSources = (parentWidgetJson === null || parentWidgetJson === void 0 ? void 0 : parentWidgetJson.useDataSources) && parentWidgetJson.useDataSources
                    .some(parentU => (realUseDataSource === null || realUseDataSource === void 0 ? void 0 : realUseDataSource.dataSourceId) === parentU.dataSourceId);
                if (haveSameUseDataSources) {
                    break;
                }
            }
            return isInRepeatedDataSourceContext && haveSameUseDataSources;
        };
        /**
         * Group use data sources by main data id and add auto added data views (such as selection data view and populated data view) for each main data source.
         */
        this.groupUseDataSourcesByMainDsAndAddAutoViews = (widgetId, allUseDataSources, browserSizeMode) => {
            if (!browserSizeMode || !allUseDataSources || allUseDataSources.length === 0) {
                return {};
            }
            const groupedUseDss = {};
            allUseDataSources.forEach(u => {
                if (!groupedUseDss[u.mainDataSourceId]) {
                    groupedUseDss[u.mainDataSourceId] = [];
                }
                if (!groupedUseDss[u.mainDataSourceId].some(v => v.dataSourceId === u.dataSourceId)) {
                    const isMainDs = !u.dataViewId && u.dataSourceId === u.mainDataSourceId;
                    if (isMainDs) { // add a temporary data view for main data source
                        const defalultDataView = u.set('dataSourceId', jimu_core__WEBPACK_IMPORTED_MODULE_0__.DataSourceManager.getInstance().getDataViewDataSourceId(u.mainDataSourceId, DEFAULT_DATA_VIEW_ID))
                            .set('dataViewId', DEFAULT_DATA_VIEW_ID);
                        groupedUseDss[u.mainDataSourceId] = groupedUseDss[u.mainDataSourceId].concat(defalultDataView);
                    }
                    else {
                        groupedUseDss[u.mainDataSourceId] = groupedUseDss[u.mainDataSourceId].concat(u);
                    }
                }
            });
            Object.keys(groupedUseDss).forEach(mainDataSourceId => {
                // add auto added data views
                groupedUseDss[mainDataSourceId] = groupedUseDss[mainDataSourceId]
                    .concat(this.getAutoAddedDataViews(widgetId, groupedUseDss[mainDataSourceId], allUseDataSources, browserSizeMode));
            });
            return groupedUseDss;
        };
        this.getAutoAddedDataViews = (widgetId, useDataSourcesWithSameMainDs, allUseDataSources, browserSizeMode) => {
            if (!useDataSourcesWithSameMainDs || useDataSourcesWithSameMainDs.length === 0 || !browserSizeMode) {
                return [];
            }
            const mainDs = jimu_core__WEBPACK_IMPORTED_MODULE_0__.DataSourceManager.getInstance().getDataSource(useDataSourcesWithSameMainDs[0].mainDataSourceId);
            /**
             * When selecting main data sources and data views, all data sources and selection views are created.
             * But set data source (such as webmap data source) does not support to create views, return an empty array.
             */
            const canCreateViews = mainDs && !mainDs.isDataSourceSet;
            if (!canCreateViews) {
                return [];
            }
            let defaultDataViews = [];
            if (this.props.useSelectionDataView) {
                if (!useDataSourcesWithSameMainDs.some(u => u.dataViewId === jimu_core__WEBPACK_IMPORTED_MODULE_0__.CONSTANTS.SELECTION_DATA_VIEW_ID)) { // If using selection data view, do not duplicate it.
                    const selectionView = useDataSourcesWithSameMainDs[0]
                        .set('dataSourceId', jimu_core__WEBPACK_IMPORTED_MODULE_0__.DataSourceManager.getInstance().getDataViewDataSourceId(useDataSourcesWithSameMainDs[0].mainDataSourceId, jimu_core__WEBPACK_IMPORTED_MODULE_0__.CONSTANTS.SELECTION_DATA_VIEW_ID))
                        .set('dataViewId', jimu_core__WEBPACK_IMPORTED_MODULE_0__.CONSTANTS.SELECTION_DATA_VIEW_ID);
                    defaultDataViews = defaultDataViews.concat(selectionView);
                }
            }
            if (this.props.usePopulatedDataView && this.getWhetherUseRepeatedDataSourceContext(widgetId, useDataSourcesWithSameMainDs, allUseDataSources, browserSizeMode)) {
                const repeatContextView = useDataSourcesWithSameMainDs[0]
                    .set('dataSourceId', jimu_core__WEBPACK_IMPORTED_MODULE_0__.DataSourceManager.getInstance().getDataViewDataSourceId(useDataSourcesWithSameMainDs[0].mainDataSourceId, jimu_core__WEBPACK_IMPORTED_MODULE_0__.CONSTANTS.REPEAT_CONTEXT_DATA_VIEW_ID))
                    .set('dataViewId', jimu_core__WEBPACK_IMPORTED_MODULE_0__.CONSTANTS.REPEAT_CONTEXT_DATA_VIEW_ID);
                defaultDataViews = defaultDataViews.concat(repeatContextView);
            }
            return defaultDataViews;
        };
        this.getDsLabel = (dataSourceId, dataViewId) => {
            if (dataViewId && dataViewId === jimu_core__WEBPACK_IMPORTED_MODULE_0__.CONSTANTS.SELECTION_DATA_VIEW_ID) {
                return this.props.intl.formatMessage({ id: 'selectionDataView', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_1__.defaultMessages.selectionDataView });
            }
            if (dataViewId && dataViewId === jimu_core__WEBPACK_IMPORTED_MODULE_0__.CONSTANTS.REPEAT_CONTEXT_DATA_VIEW_ID) {
                return this.props.intl.formatMessage({ id: 'populatedDataView', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_1__.defaultMessages.populatedDataView });
            }
            if (dataViewId && (dataViewId === DEFAULT_DATA_VIEW_ID || dataViewId === jimu_core__WEBPACK_IMPORTED_MODULE_0__.CONSTANTS.OUTPUT_DATA_VIEW_ID)) {
                return this.props.intl.formatMessage({ id: 'default', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_1__.defaultMessages.default });
            }
            const ds = jimu_core__WEBPACK_IMPORTED_MODULE_0__.DataSourceManager.getInstance().getDataSource(dataSourceId);
            if (ds) {
                return ds.getLabel() || ds.id;
            }
            return dataSourceId;
        };
        this.getRealUseDataSources = (tempSelectUseDs, allUseDataSources) => {
            if (!tempSelectUseDs) {
                return null;
            }
            if (tempSelectUseDs.dataViewId === DEFAULT_DATA_VIEW_ID) {
                return tempSelectUseDs
                    .set('dataSourceId', tempSelectUseDs.mainDataSourceId)
                    .without('dataViewId');
            }
            else if (tempSelectUseDs.dataViewId === jimu_core__WEBPACK_IMPORTED_MODULE_0__.CONSTANTS.REPEAT_CONTEXT_DATA_VIEW_ID) {
                const useDsHasSameMainDsAsSelectedUseDs = allUseDataSources.find(u => u.mainDataSourceId === tempSelectUseDs.mainDataSourceId);
                return useDsHasSameMainDsAsSelectedUseDs && (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.Immutable)(useDsHasSameMainDsAsSelectedUseDs);
            }
            else {
                return tempSelectUseDs;
            }
        };
        this.onMainDataChange = e => {
            const mainDataSourceId = e.target.value;
            if (mainDataSourceId !== this.props.selectedUseDataSource.mainDataSourceId) {
                const useDs = this.props.useDataSources.find(u => u.mainDataSourceId === mainDataSourceId) || { dataSourceId: mainDataSourceId, mainDataSourceId };
                const tempSelectUseDs = this.getOneDefaultUseDs(this.props.widgetId, (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.Immutable)([useDs]), this.props.browserSizeMode);
                this.props.onChange(this.getRealUseDataSources(tempSelectUseDs, this.props.useDataSources), (tempSelectUseDs === null || tempSelectUseDs === void 0 ? void 0 : tempSelectUseDs.dataViewId) === jimu_core__WEBPACK_IMPORTED_MODULE_0__.CONSTANTS.REPEAT_CONTEXT_DATA_VIEW_ID);
            }
        };
        this.onDataViewChange = e => {
            if (!this.props.selectedUseDataSource) {
                return;
            }
            const dataViewId = e.target.value;
            const tempSelectUseDs = this.props.selectedUseDataSource
                .set('dataSourceId', jimu_core__WEBPACK_IMPORTED_MODULE_0__.DataSourceManager.getInstance().getDataViewDataSourceId(this.props.selectedUseDataSource.mainDataSourceId, dataViewId))
                .set('dataViewId', dataViewId);
            this.props.onChange(this.getRealUseDataSources(tempSelectUseDs, this.props.useDataSources), (tempSelectUseDs === null || tempSelectUseDs === void 0 ? void 0 : tempSelectUseDs.dataViewId) === jimu_core__WEBPACK_IMPORTED_MODULE_0__.CONSTANTS.REPEAT_CONTEXT_DATA_VIEW_ID);
        };
    }
    componentDidMount() {
        if (!this.props.selectedUseDataSource) {
            const tempSelectUseDs = this.getOneDefaultUseDs(this.props.widgetId, this.props.useDataSources, this.props.browserSizeMode);
            this.props.onChange(this.getRealUseDataSources(tempSelectUseDs, this.props.useDataSources), (tempSelectUseDs === null || tempSelectUseDs === void 0 ? void 0 : tempSelectUseDs.dataViewId) === jimu_core__WEBPACK_IMPORTED_MODULE_0__.CONSTANTS.REPEAT_CONTEXT_DATA_VIEW_ID);
        }
    }
    componentDidUpdate(prevProps) {
        if ((prevProps.widgetId !== this.props.widgetId || !this.getWhetherUseDsIsShallowEqual(prevProps.useDataSources, this.props.useDataSources) ||
            prevProps.browserSizeMode !== this.props.browserSizeMode) ||
            // do not allow to have no selected data source
            !this.props.selectedUseDataSource) {
            const tempSelectUseDs = this.getOneDefaultUseDs(this.props.widgetId, this.props.useDataSources, this.props.browserSizeMode);
            this.props.onChange(this.getRealUseDataSources(tempSelectUseDs, this.props.useDataSources), (tempSelectUseDs === null || tempSelectUseDs === void 0 ? void 0 : tempSelectUseDs.dataViewId) === jimu_core__WEBPACK_IMPORTED_MODULE_0__.CONSTANTS.REPEAT_CONTEXT_DATA_VIEW_ID);
        }
    }
    render() {
        var _a;
        if (!this.props.useDataSources) {
            return null;
        }
        const groupedUseDss = this.groupUseDataSourcesByMainDsAndAddAutoViews(this.props.widgetId, this.props.useDataSources, this.props.browserSizeMode);
        const tempSelectUseDs = this.getSelectedUseDsFromProps(this.props.widgetId, this.props.selectedUseDataSource, this.props.useDataSources, this.props.isSelectedFromRepeatedDataSourceContext, this.props.browserSizeMode);
        return ((0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.classNames)('w-100', { [this.props.className]: !!this.props.className }) },
            (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'component-main-data-and-view', role: 'group', "aria-label": this.props.intl.formatMessage({ id: 'data', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_1__.defaultMessages.data }) },
                !this.props.hideMainDataSourceSelect &&
                    (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'w-100 text-truncate mb-3 option-label mb-2' }, this.props.intl.formatMessage({ id: 'data', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_1__.defaultMessages.data })),
                !this.props.hideMainDataSourceSelect &&
                    (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'flex-grow-1' },
                        (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.Select, { value: tempSelectUseDs === null || tempSelectUseDs === void 0 ? void 0 : tempSelectUseDs.mainDataSourceId, className: 'jimu-outline-inside', onChange: this.onMainDataChange, size: 'sm' }, Object.keys(groupedUseDss).sort((d1, d2) => d1 === null || d1 === void 0 ? void 0 : d1.localeCompare(d2))
                            .map((mainDataSourceId, i) => (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("option", { value: mainDataSourceId, key: i, title: this.getDsLabel(mainDataSourceId) },
                            (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'text-truncate' }, this.getDsLabel(mainDataSourceId)))))),
                (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.classNames)('flex-grow-1', { 'mt-2': !this.props.hideMainDataSourceSelect }) },
                    (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.Select, { value: tempSelectUseDs === null || tempSelectUseDs === void 0 ? void 0 : tempSelectUseDs.dataViewId, className: 'jimu-outline-inside', onChange: this.onDataViewChange, size: 'sm' }, (_a = groupedUseDss[tempSelectUseDs === null || tempSelectUseDs === void 0 ? void 0 : tempSelectUseDs.mainDataSourceId]) === null || _a === void 0 ? void 0 : _a.sort((u1, u2) => { var _a; return (_a = u1 === null || u1 === void 0 ? void 0 : u1.dataSourceId) === null || _a === void 0 ? void 0 : _a.localeCompare(u2 === null || u2 === void 0 ? void 0 : u2.dataSourceId); }).map((u, i) => (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("option", { value: u.dataViewId, key: i, title: this.getDsLabel(u.dataSourceId, u.dataViewId) },
                        (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'text-truncate' }, this.getDsLabel(u.dataSourceId, u.dataViewId)))))))));
    }
}
const mapStateToProps = (state, ownProps) => {
    var _a, _b;
    return {
        browserSizeMode: ((_a = state === null || state === void 0 ? void 0 : state.appContext) === null || _a === void 0 ? void 0 : _a.isBuilder) ? (_b = state === null || state === void 0 ? void 0 : state.appStateInBuilder) === null || _b === void 0 ? void 0 : _b.browserSizeMode : state === null || state === void 0 ? void 0 : state.browserSizeMode
    };
};
// eslint-disable-next-line
const __MainDataAndViewSelector = jimu_core__WEBPACK_IMPORTED_MODULE_0__.ReactRedux.connect(mapStateToProps)(_MainDataAndViewSelector);
const MainDataAndViewSelector = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.injectIntl)((0,jimu_theme__WEBPACK_IMPORTED_MODULE_3__.withStyles)(__MainDataAndViewSelector, 'MainDataAndViewSelector'));


/***/ }),

/***/ "./jimu-ui/advanced/lib/data-source-selector/index.tsx":
/*!*************************************************************!*\
  !*** ./jimu-ui/advanced/lib/data-source-selector/index.tsx ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AddDefinitionStatus: () => (/* reexport safe */ _components_field_selector_with_full_text_index__WEBPACK_IMPORTED_MODULE_10__.AddDefinitionStatus),
/* harmony export */   AllDataSourceTypes: () => (/* reexport safe */ jimu_core__WEBPACK_IMPORTED_MODULE_0__.AllDataSourceTypes),
/* harmony export */   DEFAULT_DATA_VIEW_ID: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_DATA_VIEW_ID),
/* harmony export */   DataSourceErrorItem: () => (/* reexport safe */ _components_data_source_error_item__WEBPACK_IMPORTED_MODULE_8__.DataSourceErrorItem),
/* harmony export */   DataSourceItem: () => (/* reexport safe */ _components_data_source_item__WEBPACK_IMPORTED_MODULE_6__.DataSourceItem),
/* harmony export */   DataSourceList: () => (/* reexport safe */ _components_data_source_list__WEBPACK_IMPORTED_MODULE_4__.DataSourceList),
/* harmony export */   DataSourceRemoveWaringReason: () => (/* reexport safe */ _components_data_source_remove_warning_popup__WEBPACK_IMPORTED_MODULE_13__.DataSourceRemoveWaringReason),
/* harmony export */   DataSourceRemoveWarningPopup: () => (/* reexport safe */ _components_data_source_remove_warning_popup__WEBPACK_IMPORTED_MODULE_13__.DataSourceRemoveWarningPopup),
/* harmony export */   DataSourceSelector: () => (/* reexport safe */ _components_data_source_selector__WEBPACK_IMPORTED_MODULE_3__.DataSourceSelector),
/* harmony export */   DataSourceTree: () => (/* reexport safe */ _components_data_source_tree__WEBPACK_IMPORTED_MODULE_7__.DataSourceTree),
/* harmony export */   DataViewPriority: () => (/* reexport safe */ _components_main_data_and_view_selector__WEBPACK_IMPORTED_MODULE_11__.DataViewPriority),
/* harmony export */   DataViewSettingPopup: () => (/* reexport safe */ _components_data_view_setting_popup__WEBPACK_IMPORTED_MODULE_12__.DataViewSettingPopup),
/* harmony export */   ExternalDataSourceSelector: () => (/* reexport safe */ _components_external_data_source_selector__WEBPACK_IMPORTED_MODULE_5__.ExternalDataSourceSelector),
/* harmony export */   FieldSelector: () => (/* reexport safe */ _components_field_selector__WEBPACK_IMPORTED_MODULE_9__.FieldSelector),
/* harmony export */   FieldSelectorWithFullTextIndex: () => (/* reexport safe */ _components_field_selector_with_full_text_index__WEBPACK_IMPORTED_MODULE_10__.FieldSelectorWithFullTextIndex),
/* harmony export */   MainDataAndViewSelector: () => (/* reexport safe */ _components_main_data_and_view_selector__WEBPACK_IMPORTED_MODULE_11__.MainDataAndViewSelector),
/* harmony export */   _DataSourceSelector: () => (/* reexport safe */ _components_data_source_selector__WEBPACK_IMPORTED_MODULE_3__._DataSourceSelector),
/* harmony export */   dataComponentsUtils: () => (/* reexport module object */ _utils__WEBPACK_IMPORTED_MODULE_2__)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./types */ "./jimu-ui/advanced/lib/data-source-selector/types.ts");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils */ "./jimu-ui/advanced/lib/data-source-selector/utils.ts");
/* harmony import */ var _components_data_source_selector__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./components/data-source-selector */ "./jimu-ui/advanced/lib/data-source-selector/components/data-source-selector/index.tsx");
/* harmony import */ var _components_data_source_list__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./components/data-source-list */ "./jimu-ui/advanced/lib/data-source-selector/components/data-source-list/index.tsx");
/* harmony import */ var _components_external_data_source_selector__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./components/external-data-source-selector */ "./jimu-ui/advanced/lib/data-source-selector/components/external-data-source-selector/index.tsx");
/* harmony import */ var _components_data_source_item__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./components/data-source-item */ "./jimu-ui/advanced/lib/data-source-selector/components/data-source-item.tsx");
/* harmony import */ var _components_data_source_tree__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./components/data-source-tree */ "./jimu-ui/advanced/lib/data-source-selector/components/data-source-tree.tsx");
/* harmony import */ var _components_data_source_error_item__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./components/data-source-error-item */ "./jimu-ui/advanced/lib/data-source-selector/components/data-source-error-item.tsx");
/* harmony import */ var _components_field_selector__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./components/field-selector */ "./jimu-ui/advanced/lib/data-source-selector/components/field-selector/index.tsx");
/* harmony import */ var _components_field_selector_with_full_text_index__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./components/field-selector-with-full-text-index */ "./jimu-ui/advanced/lib/data-source-selector/components/field-selector-with-full-text-index.tsx");
/* harmony import */ var _components_main_data_and_view_selector__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./components/main-data-and-view-selector */ "./jimu-ui/advanced/lib/data-source-selector/components/main-data-and-view-selector.tsx");
/* harmony import */ var _components_data_view_setting_popup__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./components/data-view-setting-popup */ "./jimu-ui/advanced/lib/data-source-selector/components/data-view-setting-popup.tsx");
/* harmony import */ var _components_data_source_remove_warning_popup__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./components/data-source-remove-warning-popup */ "./jimu-ui/advanced/lib/data-source-selector/components/data-source-remove-warning-popup.tsx");















/**
 * @ignore
 * @deprecated
 * All data source types, including types from jimu-core and jimu-arcgis.
 * Should be imported from jimu-core.
 */



/***/ }),

/***/ "./jimu-ui/advanced/lib/data-source-selector/styles/components/data-source-error-item.ts":
/*!***********************************************************************************************!*\
  !*** ./jimu-ui/advanced/lib/data-source-selector/styles/components/data-source-error-item.ts ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   dataSourceErrorItemStyles: () => (/* binding */ dataSourceErrorItemStyles)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");

function dataSourceErrorItemStyles(props) {
    const theme = props.theme;
    return (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.css) `
    .component-data-source-error-item{
      .component-data-source-item{
        background-color: ${theme.colors.palette.secondary[400]};
        *:not(.ds-badge svg, .ds-close-icon){
          color: ${theme.colors.palette.dark[400]} !important;
        }

        .ds-origin-label{
          max-width: 100%;
        }
        .ds-item-header{
          background-color: ${theme.colors.palette.secondary[500]};
        }
        .ds-thumbnail{
          background-color: ${theme.colors.palette.light[800]};
        }
        .ds-close-icon{
          color: ${theme.colors.palette.dark[600]} !important;
          width: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(14)};
          height: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(14)};
        }
      }

    }

  `;
}


/***/ }),

/***/ "./jimu-ui/advanced/lib/data-source-selector/styles/components/data-source-item.ts":
/*!*****************************************************************************************!*\
  !*** ./jimu-ui/advanced/lib/data-source-selector/styles/components/data-source-item.ts ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   dataSourceItemStyles: () => (/* binding */ dataSourceItemStyles)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");

function dataSourceItemStyles(props) {
    const theme = props.theme;
    return (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.css) `
    .component-data-source-item{
      background-color: ${theme.colors.palette.light[500]};
      font-size: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(12)};
      border-radius: 2px;
      padding: 0;
      position: relative;
      &:hover{
        background-color: ${theme.colors.palette.light[600]};
      }
      .font-dark-600{
        color: ${theme.colors.palette.dark[600]} !important;
      }
      .loading-container{
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
      }
      .ds-item-header{
        width: 100%;
        height: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(38)};
        padding: 0 10px;
        background-color: ${theme.colors.palette.light[700]};
      }
      .ds-item-body{
        width: 100%;
        height: 100%;
        padding: 14px 10px 6px 10px;
      }
      .two-line-truncate{
        overflow: hidden;
        text-overflow: ellipsis;
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        word-break: break-all;
        word-wrap: break-word;
      }
      .ds-more{
        margin-right: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(-8)};
      }
      .ds-label{
        font-size: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(14)};
        color: ${theme.colors.palette.dark[800]};
      }
      .ds-type{
        font-size: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(13)};
        color: ${theme.colors.palette.dark[800]};
        max-width: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(100)};
      }
      .ds-thumbnail{
        width:  ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(18)};
        height:  ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(18)};
        background-color: ${theme.colors.palette.info[400]};
      }
      .ds-related-widgets, .ds-child-dss{
        font-size: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(13)};
      }
      .warning-icon, .warning-icon>*{
        color: ${theme.colors.palette.danger[700]};
        fill: ${theme.colors.palette.danger[700]};
      }
    }

    .component-data-source-item.component-data-source-item-selected-item{
      border: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(2)} solid ${theme.colors.primary};
    }

    .cursor-pointer{
      cursor: pointer;
    }

  `;
}


/***/ }),

/***/ "./jimu-ui/advanced/lib/data-source-selector/styles/components/data-source-list.ts":
/*!*****************************************************************************************!*\
  !*** ./jimu-ui/advanced/lib/data-source-selector/styles/components/data-source-list.ts ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   dataSourceListStyles: () => (/* binding */ dataSourceListStyles)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");

function dataSourceListStyles(props) {
    const theme = props.theme;
    return (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.css) `
    .component-data-source-list{
      font-size: ${theme.typography.fontSizeBase};
      overflow: hidden;

      .data-tabs .tab-content .tab-pane {
        padding-top: 16px;
      }

      .search{
        position: relative;
      }
      .search-input{
        height: 26px;
        border-radius: 2px;
      }
      .search-icon{
        color: ${theme.colors.palette.dark[600]};
      }

      .empty-placeholder{
        position: absolute;
        left: 50%;
        top: 50%;
        transform: translate(-50%, -50%);
        .empty-placeholder-text, .empty-placeholder-icon{
          display: table;
          margin: 0 auto;
        }
        .empty-placeholder-text{
          color: ${theme.colors.palette.dark[400]};
          font-size: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(14)};
          margin-top: 16px;
          text-align: center;
        }
        .empty-placeholder-icon{
          color: ${theme.colors.palette.secondary[800]};
        }
      }

      .jimu-tab{
        height: 100%;
        .tab-content{
          height: calc(100% - 40px);
        }
        .tab-pane{
          width: 100%;
        }
        .jimu-nav.nav-pills{
            margin: 0 ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(16)} !important;
          }
      }

      .ds-list-container{
        height: calc(100% - 120px);
      }

      .ds-list{
        height: calc(100% - 20px);
        overflow: auto;
      }

      .ds-list-header{
        width: 100%;
      }

      .ds-add-data{
        position: absolute;
        bottom: 0;
        height: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(40)};
        width: 100%;
        color: ${theme.colors.palette.primary[700]};
        font-size: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(14)};
        border-top: 1px solid ${theme.colors.palette.secondary[800]};
        cursor: pointer;
        &:hover{
          .add-data-icon-container{
            background-color: ${theme.colors.palette.primary[800]};
          }
          color: ${theme.colors.palette.primary[800]};
        }
        .add-data-icon-container{
          width: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(20)};
          height: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(20)};
          background-color: ${theme.colors.palette.primary[700]};
          border-radius: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(10)};
        }
        .add-data-icon{
          color: ${theme.colors.palette.light[300]};
        }
      }

      .ds-list-close{
        width: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(30)};
        height: 100%;
        cursor: pointer;
      }

      .ds-widget-back{
        width: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(80)};
        height: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(30)};
        cursor: pointer;
      }

      .ds-types{
        color: ${theme.colors.black};
        font-size: ${theme.typography.fontSizeBase};
      }

      .ds-widget-outputs{
        padding: 0;
      }

      .ds-added-data{
        padding: 0;
      }

      .to-use-types{
        color: ${theme.colors.black};
        .types-selected{
          max-width: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(150)};
        }
        .to-use-dp{
          width: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(120)};
          height: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(26)};
        }
      }

      .ds-thumbnail{
        width:  ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(26)};
        height:  ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(26)};
        background-color: ${theme.colors.palette.info[400]};
      }
      .ds-type{
        font-size: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(14)};
        color: ${theme.colors.palette.dark[800]};
      }
      .ds-item.ds-error-item{
        background-color: ${theme.colors.palette.secondary[400]};
        *{
          color: ${theme.colors.palette.dark[400]} !important;
        }
        .ds-thumbnail{
          background-color: ${theme.colors.palette.secondary[800]};
        }
      }
      .ds-item{
        border: 1px solid transparent;
        border-radius: 0;
        position: relative;
        left: -2px;
        cursor: pointer;
        .item{
          height: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(26)};
          background-color: ${theme.colors.palette.secondary[500]};
          padding-left: 0;
          padding-right: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(10)};
        }
        .item-active-icon{
          position: absolute;
          top: -1px;
          right: -1px;
          .item-active-icon-container{
            width: 0;
            height: 0;
            border-top: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(12)} ${theme.colors.palette.primary[700]} solid;
            border-left: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(12)} transparent solid;
            background-color: transparent;
          }
        }
      }
      .ds-item.ds-item-selected{
        border: 1px solid ${theme.colors.palette.primary[700]};
      }
    }

  `;
}


/***/ }),

/***/ "./jimu-ui/advanced/lib/data-source-selector/styles/components/data-source-remove-warning-popup.ts":
/*!*********************************************************************************************************!*\
  !*** ./jimu-ui/advanced/lib/data-source-selector/styles/components/data-source-remove-warning-popup.ts ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   dataSourceRemoveWarningPopupStyles: () => (/* binding */ dataSourceRemoveWarningPopupStyles)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");

function dataSourceRemoveWarningPopupStyles(props) {
    const theme = props.theme;
    return (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.css) `
    &.modal-dialog{
      position: fixed !important;
      top: 50% !important;
      left: 50% !important;
      transform: translate(-50%, -50%) !important;
      width: 480px;
    }
    .modal-content{
      border: 0;
    }
    .modal-header, .modal-body{
      padding-left: 20px;
      padding-right: 20px;
    }
    .modal-footer{
      padding-top: 0;
      padding-bottom: 20px;
    }
    .font-16{
      font-size: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(16)};
    }
    .font-14{
      font-size: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(14)};
    }
    .font-13{
      font-size: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(13)};
    }
    .font-dark-800{
      color: ${theme.colors.palette.dark[800]};
    }
    .font-dark-600{
      color: ${theme.colors.palette.dark[600]};
    }
    .related-widgets{
      width: 100%;
      height: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(160)};
      overflow: auto;
      background-color: ${theme.colors.palette.light[200]};
    }
    .related-outputs{
      width: 100%;
      max-height: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(80)};
      overflow: auto;
      background-color: ${theme.colors.palette.light[200]};
      div.output-ds-label+div.output-ds-label{
        margin-top: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(8)};
      }
    }
  `;
}


/***/ }),

/***/ "./jimu-ui/advanced/lib/data-source-selector/styles/components/data-source-selector.ts":
/*!*********************************************************************************************!*\
  !*** ./jimu-ui/advanced/lib/data-source-selector/styles/components/data-source-selector.ts ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   dataSourceSelectorStyles: () => (/* binding */ dataSourceSelectorStyles)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");

function dataSourceSelectorStyles(props) {
    const theme = props.theme;
    return (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.css) `
    .component-data-source-selector{
      .font-dark-600{
        color: ${theme.colors.palette.dark[600]};
      }
      .font-weight-500{
        font-weight: 500;
      }
      .added-ds-item{
        position: relative;
        .loading-container{
          position: absolute;
          top: 0;
          left: 0;
          width: 100%;
        }
        .loading-placeholder{
          width: 100%;
          background-color: ${theme.colors.palette.light[500]};
          padding: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(10)};
          .first-line{
            .first-line-left{
              width: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(18)};
              height: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(18)};
              background-color: ${theme.colors.palette.light[600]};
            }
            .first-line-right{
              height: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(10)};
              background-color: ${theme.colors.palette.light[600]};
            }
          }
          .second-line{
            height: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(26)};
            background-color: ${theme.colors.palette.light[600]};
          }
        }
      }
      .data-view-dropdown-menu-button{
        background: ${theme.colors.palette.secondary[200]};
        text-align: left;
      }
      .dv-select-container{
        margin-top: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(12)};
        .jimu-dropdown-button{
          .settings-icon{
            display: none;
          }
        }
      }
      .create-view-button{
        position: relative;
        margin-top: 2px;
        padding-top: 8px;
        .create-view-button-border{
          width: 90%;
          border-top: 1px solid ${theme.colors.palette.light[800]};
          position: absolute;
          top: 0;
          left: 50%;
          transform: translate(-50%, 0);
        }
      }
      .ds-selector-button{
        height: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(40)};
        line-height: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(40)};
        padding: 0;
        border: 1px dashed ${theme.colors.palette.dark[100]};
        border-radius: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(2)};
        cursor: pointer;
        color: ${theme.colors.palette.primary[700]};
        font-size: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(14)};
        text-decoration: none;
        &:hover{
          border-color: ${theme.colors.palette.dark[400]};
          color: ${theme.colors.palette.primary[800]};
        }
      }
      .ds-item.ds-error-item{
        background-color: ${theme.colors.palette.secondary[400]};
        *{
          color: ${theme.colors.palette.dark[400]} !important;
        }
        .ds-thumbnail{
          background-color: ${theme.colors.palette.secondary[800]};
        }
      }
      .ds-item{
        &:not(:first-of-type) {
          margin-top: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(8)};
        }

        padding: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(8)} ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(10)} ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(10)} ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(10)};
        background-color: ${theme.colors.palette.secondary[500]};
        cursor: pointer;

        &:hover{
          background-color: ${theme.colors.palette.light[600]};
        }

        .mr-30{
          margin-right: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(30)};
        }

        &.disable-cursor{
          cursor: default;
        }

        .ds-item-close{
          height: 100%;
          cursor: pointer;
          margin-left: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(5)};
          margin-right: -5px;
        }

        .ds-item-filter{
          height: 100%;
          cursor: pointer;
        }

        .ds-item-sort{
          height: 100%;
          cursor: pointer;
          margin-left: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(5)};
        }

        .ds-thumbnail{
          width:  ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(18)};
          height:  ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(18)};
          background-color: ${theme.colors.palette.info[400]};
        }
        .ds-type{
          font-size: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(14)};
          color: ${theme.colors.palette.dark[800]};
        }
        .top-right-red-dot-container{
          position: relative;
        }
        .top-right-red-dot{
          position: absolute;
          top: 0;
          right: 0;
          display: inline-block;
          width: 8px;
          height: 8px;
          border-radius: 4px;
          background-color: ${theme.colors.palette.danger[700]};
        }
      }
    }

  `;
}


/***/ }),

/***/ "./jimu-ui/advanced/lib/data-source-selector/styles/components/data-source-tree.ts":
/*!*****************************************************************************************!*\
  !*** ./jimu-ui/advanced/lib/data-source-selector/styles/components/data-source-tree.ts ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   dataSourceTreeStyles: () => (/* binding */ dataSourceTreeStyles)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");

function dataSourceTreeStyles(props) {
    const theme = props.theme;
    return (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.css) `
    *{
      margin: 0;
      padding: 0;
    }
    .bg{
      padding: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(16)} ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(2)};
      background-color: ${theme.colors.palette.light[200]};
      border-top: 2px solid ${theme.colors.palette.primary[600]};
    }
    .tree-root{
      padding-left: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(20)};
      padding-right: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(5)};
    }
    .component-data-source-tree{
      position: relative;
      .collapse-button{
        position: absolute;
        left: 2px;
        z-index: 1;
      }
      .collapse-content{
        padding-left: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(20)};
        padding-top: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(16)};
        position: relative;
      }
      .collapse-button:not(.root):not(.leaf){
        left: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(-18)};
      }
      .collapse-button.leaf{
        left: 2px;
      }
      .z-index-1 {
        z-index: 1;
      }
      .collapse-button:not(.root):before{
        content: '';
        position: absolute;
        top: 50%;
        left: -2px;
        border-top: 1px solid ${theme.colors.palette.dark[400]};
        width: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(21)};
        transform: translateY(-50%);
      }
      .collapse-line{
        border-left: 1px solid ${theme.colors.palette.dark[400]};
        border-bottom: 1px solid ${theme.colors.palette.dark[400]};
        width: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(22)};
        position: absolute;
        top: -1px;
        left: 0;
        z-index: 0;
      }
      .collapse-line:not(.root){
        width: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(20)};
        top: -2px;
      }
    }

  `;
}


/***/ }),

/***/ "./jimu-ui/advanced/lib/data-source-selector/styles/components/data-view-setting-popup.ts":
/*!************************************************************************************************!*\
  !*** ./jimu-ui/advanced/lib/data-source-selector/styles/components/data-view-setting-popup.ts ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   dataViewSettingPopupStyles: () => (/* binding */ dataViewSettingPopupStyles)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");

function dataViewSettingPopupStyles(props) {
    const theme = props.theme;
    return (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.css) `
    .data-view-container{
      width: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(960)};
      height: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(600)};
      border: 0;
    }
    .cicle-button{
      width: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(32)};
      height: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(32)};
      border-radius: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(16)};
    }
    .domain-field-icon {
      color: ${theme.colors.palette.dark[600]};
      vertical-align: text-top;
    }
    .w-38{
      width: 38%;
    }
    .w-62{
      width: 62%;
    }
    .mr-10{
      margin-right: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(10)};
    }
    .pb-30{
      padding-bottom: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(30)};
    }
    .preview-table{
      position: relative;
      padding-left: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(30)};
    }
    .setting-table{
      padding-right: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(30)};
      border-right-width: 2px;
      border-right-style: solid;
      border-image: linear-gradient(180deg, transparent 0%, ${theme.colors.palette.light[500]} 52.08%, transparent 100%) 1;
      border-left: 0;
    }
    .table-container{
      height : 100%;
      overflow-x: auto;
      .table-body{
        overflow-y: auto;
        overflow-x: hidden;
        width: fit-content;
      }
      .table-header{
        position: sticky;
        top: 0;
      }
      tr{
        border-top: 1px solid ${theme.colors.palette.light[400]};
      }
      tr:last-child{
        border-bottom: 1px solid ${theme.colors.palette.light[400]};
      }
      td, th{
        width: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(86)};
        height: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(32)};
        display: inline-block !important;
        border-left: 1px solid ${theme.colors.palette.light[400]};
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
        padding: 6px 4px;
      }
      td{
        background-color: ${theme.colors.palette.light[200]};
      }
      th{
        background-color: ${theme.colors.palette.light[400]};
      }
      td:last-child, th:last-child{
        border-right: 1px solid ${theme.colors.palette.light[400]};
      }
    }
    .modal-body{
      height: calc(100% - ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(150)});
      padding: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(30)};
      padding-bottom: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(14)};
    }
    &.modal-dialog{
      max-width: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(960)};
    }
    .modal-header{
      .close{
        display: none;
      }
      .modal-title{
        width: 100%;
        display: flex !important;
        align-items: center !important;
      }
    }

    .jimu-nav{
      margin-bottom: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(20)};
    }

    .label{
      font-size: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(13)};
      color: ${theme.colors.palette.dark[400]};
    }

    .header{
      height: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(54)};
      padding-left: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(30)};
      padding-right: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(30)};
    }

    .modal-footer{
      padding-left: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(30)};
      padding-right: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(30)};
    }

    .tab-content{
      height: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(426)};
      overflow-y: auto;
    }

    .sql-exp-warning{
      color: ${theme.colors.palette.danger[700]};
      font-size: ${theme.sizes[4]};
      max-width: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(600)};
      .sql-exp-warning-icon{
        color: ${theme.colors.palette.danger[700]};
      }
    }

  `;
}


/***/ }),

/***/ "./jimu-ui/advanced/lib/data-source-selector/styles/components/external-data-source-selector.ts":
/*!******************************************************************************************************!*\
  !*** ./jimu-ui/advanced/lib/data-source-selector/styles/components/external-data-source-selector.ts ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   externalDataSourceSelectorStyles: () => (/* binding */ externalDataSourceSelectorStyles)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");

function externalDataSourceSelectorStyles(props) {
    const theme = props.theme;
    return (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.css) `
    .component-external-data-source-selector{
      height: 100%;
      overflow: hidden;
      position: relative;

      .selected-ds-loading {
        margin-left: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(-25)};
      }

      .added-ds-item{
        position: relative;
        cursor: pointer;
        margin: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(16)} ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(8)} ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(16)} ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(10)};
        .ds-thumbnail{
          width:  ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(26)};
          height:  ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(26)};
          background-color: ${theme.colors.palette.info[400]};
        }
        .ds-type{
          font-size: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(13)};
          color: ${theme.colors.dark};
        }
        .item{
          height: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(26)};
        }
      }

      .added-ds-container{
        width: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(300)};
        background-color: ${theme.colors.palette.light[600]};
        box-shadow: 0 0 10px 4px ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rgba(theme.colors.white, 0.3)};
        position: absolute;
        right: 30px;
        bottom: 30px;
        .added-ds-items{
          max-height: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(500)};
          overflow-y: auto;
          overflow-x: hidden;
        }
        .small-done-btn{
          max-width: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(100)};
        }
      }

      .selector-left{
        @media only screen and (max-width: 1100px){
          &{
            width: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(160)};
          }
        }
        @media only screen and (min-width: 1100px){
          &{
            width: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(200)};
          }
        }
        @media only screen and (min-width: 1300px){
          &{
            width: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(260)};
          }
        }
        background-color: ${theme.colors.palette.light[400]};
        border-right: 1px solid ${theme.colors.palette.light[800]};
        .selector-left-title{
          padding: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(20)} ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(20)} ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(27)} ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(20)};
          margin: 0;
          font-size: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(20)};
          color: ${theme.colors.palette.dark[600]};
        }
        .nav.nav-underline{
          border: 0;
          .nav-item{
            .nav-link{
              padding: 0;
              border: 0;
              .jimu-nav-link-wrapper{
                display: flex;
                justify-content: flex-start;
                align-items: center;
                padding: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(7)} ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(20)};
                font-size: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(16)};
                color: ${theme.colors.palette.dark[600]};
              }
            }
          }

          .nav-item:hover{
            .nav-link{
              .jimu-nav-link-wrapper{
                color: ${theme.colors.black};
              }
            }
          }

          .nav-item.active-tab{
            background-color: ${theme.colors.palette.light[500]};
            border-left: 4px solid ${theme.colors.palette.primary[600]};
            .nav-link{
              .jimu-nav-link-wrapper{
                color: ${theme.colors.black};
                font-weight: 500;
                padding-left: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(16)};
              }
            }
          }
        }
      }

      .selector-right{
        @media only screen and (max-width: 1100px){
          &{
            width: calc(100% - ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(160)});
          }
        }
        @media only screen and (min-width: 1100px){
          &{
            width: calc(100% - ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(200)});
          }
        }
        @media only screen and (min-width: 1300px){
          &{
            width: calc(100% - ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(260)});
          }
        }
        .selector-right-header{
          padding: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(23)} ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(20)} ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(12)} ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(20)};
        }
        .selector-right-body{
          height: calc(100% - 70px);
          @media only screen and (max-width: 1100px){
            &{
              padding: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(10)} ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(25)};
            }
          }
          @media only screen and (min-width: 1100px){
            &{
              padding: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(10)} ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(45)};
            }
          }
          @media only screen and (min-width: 1300px){
            &{
              padding: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(10)} ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(65)};
            }
          }
        }
        .external-data-source-url-input{
          .url-type-select{
            width: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(250)};
          }
          .url-input{
            width: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(500)};
          }
          .url-input-add-btn{
            height: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(30)};
          }
          .url-input-label{
            font-size: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(13)};
            color: ${theme.colors.palette.dark[400]};
            margin-bottom: 12px;
            font-weight: 500;
          }
        }

      }

    }

  `;
}


/***/ }),

/***/ "./jimu-ui/advanced/lib/data-source-selector/styles/components/field-selector.ts":
/*!***************************************************************************************!*\
  !*** ./jimu-ui/advanced/lib/data-source-selector/styles/components/field-selector.ts ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   fieldSelectorStyles: () => (/* binding */ fieldSelectorStyles)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");

function fieldSelectorStyles(props) {
    const theme = props.theme;
    return (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.css) `
    .component-field-selector{
      font-size: ${theme.typography.fontSizeBase};
      .ds-name{
        color: ${theme.colors.black};
      }
      .ds-name-label{
        font-size: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(14)};
        color: ${theme.colors.palette.dark[400]};
        font-weight: 400;
      }
      .field-data-selected{
        width: 70%;
      }

      .item-selector-search{
        height: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(26)};
        position: relative;
      }

      .field-list{
        height: calc(100% - 160px);
        overflow-y: auto;
        .field-item.field-item-selected{
          border: 2px solid ${theme.colors.palette.primary[600]};
        }
        .field-item{
          border: 1px solid transparent;
          cursor: pointer;
          background-color: ${theme.colors.palette.light[400]};
          user-select: none;
          text-align: left;
          border-radius: 0;
        }
        .field-item:hover{
          background-color: ${theme.colors.palette.light[500]};
        }
        .field-item:active.field-item:hover{
          background-color: ${theme.colors.white};
        }
      }

      .search-input{
        height: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(26)};
        width: 100%;
      }

    }

  `;
}


/***/ }),

/***/ "./jimu-ui/advanced/lib/data-source-selector/styles/components/main-data-and-view-selector.ts":
/*!****************************************************************************************************!*\
  !*** ./jimu-ui/advanced/lib/data-source-selector/styles/components/main-data-and-view-selector.ts ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   mainDataAndViewSelectorStyles: () => (/* binding */ mainDataAndViewSelectorStyles)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");

function mainDataAndViewSelectorStyles(props) {
    const theme = props.theme;
    return (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.css) `
    .component-main-data-and-view{
      .option-label{
        font-size: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(13)};
        font-weight: 500;
        color: ${theme.colors.palette.dark[400]};
      }
    }
  `;
}


/***/ }),

/***/ "./jimu-ui/advanced/lib/data-source-selector/styles/index.ts":
/*!*******************************************************************!*\
  !*** ./jimu-ui/advanced/lib/data-source-selector/styles/index.ts ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DataSourceErrorItem: () => (/* reexport safe */ _components_data_source_error_item__WEBPACK_IMPORTED_MODULE_5__.dataSourceErrorItemStyles),
/* harmony export */   DataSourceItem: () => (/* reexport safe */ _components_data_source_item__WEBPACK_IMPORTED_MODULE_4__.dataSourceItemStyles),
/* harmony export */   DataSourceList: () => (/* reexport safe */ _components_data_source_list__WEBPACK_IMPORTED_MODULE_1__.dataSourceListStyles),
/* harmony export */   DataSourceRemoveWarningPopup: () => (/* reexport safe */ _components_data_source_remove_warning_popup__WEBPACK_IMPORTED_MODULE_9__.dataSourceRemoveWarningPopupStyles),
/* harmony export */   DataSourceSelector: () => (/* reexport safe */ _components_data_source_selector__WEBPACK_IMPORTED_MODULE_0__.dataSourceSelectorStyles),
/* harmony export */   DataSourceTree: () => (/* reexport safe */ _components_data_source_tree__WEBPACK_IMPORTED_MODULE_2__.dataSourceTreeStyles),
/* harmony export */   DataViewSettingPopup: () => (/* reexport safe */ _components_data_view_setting_popup__WEBPACK_IMPORTED_MODULE_8__.dataViewSettingPopupStyles),
/* harmony export */   ExternalDataSourceSelector: () => (/* reexport safe */ _components_external_data_source_selector__WEBPACK_IMPORTED_MODULE_3__.externalDataSourceSelectorStyles),
/* harmony export */   FieldSelector: () => (/* reexport safe */ _components_field_selector__WEBPACK_IMPORTED_MODULE_6__.fieldSelectorStyles),
/* harmony export */   MainDataAndViewSelector: () => (/* reexport safe */ _components_main_data_and_view_selector__WEBPACK_IMPORTED_MODULE_7__.mainDataAndViewSelectorStyles)
/* harmony export */ });
/* harmony import */ var _components_data_source_selector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./components/data-source-selector */ "./jimu-ui/advanced/lib/data-source-selector/styles/components/data-source-selector.ts");
/* harmony import */ var _components_data_source_list__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./components/data-source-list */ "./jimu-ui/advanced/lib/data-source-selector/styles/components/data-source-list.ts");
/* harmony import */ var _components_data_source_tree__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./components/data-source-tree */ "./jimu-ui/advanced/lib/data-source-selector/styles/components/data-source-tree.ts");
/* harmony import */ var _components_external_data_source_selector__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./components/external-data-source-selector */ "./jimu-ui/advanced/lib/data-source-selector/styles/components/external-data-source-selector.ts");
/* harmony import */ var _components_data_source_item__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./components/data-source-item */ "./jimu-ui/advanced/lib/data-source-selector/styles/components/data-source-item.ts");
/* harmony import */ var _components_data_source_error_item__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./components/data-source-error-item */ "./jimu-ui/advanced/lib/data-source-selector/styles/components/data-source-error-item.ts");
/* harmony import */ var _components_field_selector__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./components/field-selector */ "./jimu-ui/advanced/lib/data-source-selector/styles/components/field-selector.ts");
/* harmony import */ var _components_main_data_and_view_selector__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./components/main-data-and-view-selector */ "./jimu-ui/advanced/lib/data-source-selector/styles/components/main-data-and-view-selector.ts");
/* harmony import */ var _components_data_view_setting_popup__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./components/data-view-setting-popup */ "./jimu-ui/advanced/lib/data-source-selector/styles/components/data-view-setting-popup.ts");
/* harmony import */ var _components_data_source_remove_warning_popup__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./components/data-source-remove-warning-popup */ "./jimu-ui/advanced/lib/data-source-selector/styles/components/data-source-remove-warning-popup.ts");












/***/ }),

/***/ "./jimu-ui/advanced/lib/data-source-selector/types.ts":
/*!************************************************************!*\
  !*** ./jimu-ui/advanced/lib/data-source-selector/types.ts ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DEFAULT_DATA_VIEW_ID: () => (/* binding */ DEFAULT_DATA_VIEW_ID)
/* harmony export */ });
const DEFAULT_DATA_VIEW_ID = 'USE_MAIN_DATA_SOURCE';


/***/ }),

/***/ "./jimu-ui/advanced/lib/data-source-selector/utils.ts":
/*!************************************************************!*\
  !*** ./jimu-ui/advanced/lib/data-source-selector/utils.ts ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   editDataSourceJson: () => (/* binding */ editDataSourceJson),
/* harmony export */   getAppConfig: () => (/* binding */ getAppConfig),
/* harmony export */   getDescendantDssAndViews: () => (/* binding */ getDescendantDssAndViews),
/* harmony export */   getIconFromFieldType: () => (/* reexport safe */ _components_field_selector_utils__WEBPACK_IMPORTED_MODULE_1__.getIconFromFieldType),
/* harmony export */   getOriginalDataUrl: () => (/* binding */ getOriginalDataUrl),
/* harmony export */   getOutputDssFromOriginDs: () => (/* binding */ getOutputDssFromOriginDs),
/* harmony export */   getWhetherDataSourceIsInited: () => (/* binding */ getWhetherDataSourceIsInited),
/* harmony export */   getWidgetsUsingDsOrItsDescendantDss: () => (/* binding */ getWidgetsUsingDsOrItsDescendantDss),
/* harmony export */   getWidgetsUsingDsOrItsViews: () => (/* binding */ getWidgetsUsingDsOrItsViews),
/* harmony export */   getWidgetsUsingOutputDsFromOneWidget: () => (/* binding */ getWidgetsUsingOutputDsFromOneWidget),
/* harmony export */   isFuzzyFromDsIds: () => (/* binding */ isFuzzyFromDsIds),
/* harmony export */   isFuzzySearch: () => (/* binding */ isFuzzySearch)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");
/* harmony import */ var _components_field_selector_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./components/field-selector/utils */ "./jimu-ui/advanced/lib/data-source-selector/components/field-selector/utils.ts");


/**
 * Get widgets which are using a specific data source or data views of the data source (if the data source is main data source).
 */
function getWidgetsUsingDsOrItsViews(dsId, allWidgets, considerOutputDs = true) {
    if (!dsId || !allWidgets) {
        return [];
    }
    const widgetsUsingMainDs = getWidgetsUsingOneDs(dsId, allWidgets, considerOutputDs);
    const ds = jimu_core__WEBPACK_IMPORTED_MODULE_0__.DataSourceManager.getInstance().getDataSource(dsId);
    if (!ds) {
        return widgetsUsingMainDs;
    }
    let widgetsUsingDataView = [];
    ds.getDataViews().forEach(dataView => {
        widgetsUsingDataView = widgetsUsingDataView.concat(getWidgetsUsingOneDs(dataView.id, allWidgets, considerOutputDs));
    });
    return Array.from(new Set(widgetsUsingMainDs.concat(widgetsUsingDataView)));
}
/**
 * Get widgets which are using:
 * 1. a specific data source, or,
 * 2. descendant data sources of the data source, or,
 * 3. data views of the data source (if the data source is main data source) or data views of the descendant data sources, or,
 * 4. output data sources from the data source or output data sources from the descendant data sources or output data sources from the data views
 */
function getWidgetsUsingDsOrItsDescendantDss(dsId, allWidgets) {
    if (!dsId || !allWidgets) {
        return [];
    }
    const widgetsUsingDsOrItsViewsOrItsOutputDss = getWidgetsUsingDsOrItsViews(dsId, allWidgets);
    const ds = jimu_core__WEBPACK_IMPORTED_MODULE_0__.DataSourceManager.getInstance().getDataSource(dsId);
    if (!ds) {
        return widgetsUsingDsOrItsViewsOrItsOutputDss;
    }
    let widgetsUsingChildDssOrTheirViews = [];
    if (ds.isDataSourceSet) {
        ds.getChildDataSources().forEach(childDs => {
            widgetsUsingChildDssOrTheirViews = widgetsUsingChildDssOrTheirViews.concat(getWidgetsUsingDsOrItsDescendantDss(childDs.id, allWidgets));
        });
    }
    return Array.from(new Set(widgetsUsingDsOrItsViewsOrItsOutputDss.concat(widgetsUsingChildDssOrTheirViews)));
}
/**
 * Get widgets which are using one specific main data source or one specific data view.
 * If `considerOutputDs` is true, should consider widgets using output data sources from the specific data source and data views of these output data sources.
 */
function getWidgetsUsingOneDs(dsId, allWidgets, considerOutputDs = false) {
    if (!dsId || !allWidgets) {
        return [];
    }
    const widgetsDirectlyUsingDs = getWidgetsDirectlyUsingOneDs(dsId, allWidgets);
    const widgetsUsingOutputDsOrItsViews = considerOutputDs ? getWidgetsUsingOutputDssFromOneDsAndWidgetsUsingViewsOfTheseOutputDss(dsId, allWidgets) : [];
    const allWidgetsUsingOneDs = Array.from(new Set(widgetsDirectlyUsingDs.concat(widgetsUsingOutputDsOrItsViews)));
    return allWidgetsUsingOneDs.map(wId => allWidgets[wId]);
}
/**
 * Get following data source id:
 * 1. the passed data source id, and,
 * 2. data views of the data source (if the data source is main data source), and,
 * 3. descendant data sources of the data source, and,
 * 4. data views of descendant data sources
 */
// TODO: handle output ds.
function getDescendantDssAndViews(dsId) {
    var _a, _b;
    if (!dsId) {
        return [];
    }
    const ds = jimu_core__WEBPACK_IMPORTED_MODULE_0__.DataSourceManager.getInstance().getDataSource(dsId);
    if (!ds) {
        return [dsId];
    }
    let ids = [dsId];
    (_a = ds.getDataViews()) === null || _a === void 0 ? void 0 : _a.forEach(dv => { ids = ids.concat(dv.id); });
    if (ds.isDataSourceSet) {
        (_b = ds.getChildDataSources()) === null || _b === void 0 ? void 0 : _b.forEach(childDs => {
            ids = ids.concat(getDescendantDssAndViews(childDs.id));
        });
    }
    return ids;
}
function isFuzzySearch(label, searchValue) {
    if (!label) {
        return false;
    }
    if (!searchValue) {
        return true;
    }
    return label.toLocaleLowerCase().includes(searchValue.toLocaleLowerCase());
}
function isFuzzyFromDsIds(dsJson, fromDsIds, hideDs) {
    if (!dsJson || !dsJson.id) {
        return false;
    }
    if (!fromDsIds && !hideDs) {
        return true;
    }
    else if (!fromDsIds) { // has hideDs
        return !hideDs(dsJson);
    }
    else if (!hideDs) { // has fromDsIds
        return fromDsIds.includes(dsJson.id);
    }
    else { // has fromDsIds and has hideDs
        return fromDsIds.includes(dsJson.id) && !hideDs(dsJson);
    }
}
function getWidgetsDirectlyUsingOneDs(dsId, allWidgets) {
    if (!dsId || !allWidgets) {
        return [];
    }
    return getAllWidgetsArray(allWidgets)
        // eslint-disable-next-line
        .filter((w) => w && w.useDataSourcesEnabled !== false && w.useDataSources && w.useDataSources.some(d => d.dataSourceId === dsId))
        .map(w => w.id);
}
/**
 * Get widgets using:
 * 1. output data sources from one specific data source, or,
 * 2. data views of these output data sources
 */
function getWidgetsUsingOutputDssFromOneDsAndWidgetsUsingViewsOfTheseOutputDss(dsId, allWidgets) {
    if (!dsId || !allWidgets) {
        return [];
    }
    const dsManager = jimu_core__WEBPACK_IMPORTED_MODULE_0__.DataSourceManager.getInstance();
    const ds = dsManager.getDataSource(dsId);
    const outputDss = getOutputDssFromOriginDs(ds);
    let widgetsUsingOutputDssOrTheirViews = [];
    let widgetsUsingOneOutputDsOrItsViews = [];
    outputDss.forEach(ds => {
        if (ds && ds.id) {
            widgetsUsingOneOutputDsOrItsViews = getWidgetsUsingDsOrItsViews(ds.id, allWidgets).map(w => w.id);
            widgetsUsingOutputDssOrTheirViews = widgetsUsingOutputDssOrTheirViews.concat(widgetsUsingOneOutputDsOrItsViews);
        }
    });
    return Array.from(new Set(widgetsUsingOutputDssOrTheirViews));
}
function getOutputDssFromOriginDs(ds) {
    if (!ds || !ds.id) {
        return [];
    }
    const appConfig = getAppConfig();
    const dataSources = appConfig && appConfig.dataSources;
    let outputDss = [];
    dataSources && Object.keys(dataSources).forEach(dsId => {
        if (dataSources[dsId] && dataSources[dsId].isOutputFromWidget && dataSources[dsId].originDataSources && dataSources[dsId].originDataSources.some(useDs => useDs.dataSourceId === ds.id)) {
            outputDss = outputDss.concat(jimu_core__WEBPACK_IMPORTED_MODULE_0__.DataSourceManager.getInstance().getDataSource(dsId));
        }
    });
    return outputDss;
}
function getAppConfig() {
    const appState = window && window.jimuConfig && window.jimuConfig.isBuilder ? (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().getState().appStateInBuilder : (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().getState();
    const appConfig = appState && appState.appConfig;
    return appConfig;
}
function getAllWidgetsArray(widgets) {
    if (!widgets) {
        return [];
    }
    const w = [];
    Object.keys(widgets).forEach(wId => {
        w.push(widgets[wId]);
    });
    return w;
}
function getWhetherDataSourceIsInited(dataSources, dataSourcesInfo) {
    if (!dataSources) { // no data source
        return !!jimu_core__WEBPACK_IMPORTED_MODULE_0__.DataSourceManager.getInstance();
    }
    if (dataSourcesInfo) {
        const appConfig = getAppConfig();
        const rootDsInfoIds = Object.keys(dataSourcesInfo).filter(dsId => dsId.split('-').length === 1).filter(dsId => { var _a; return (_a = appConfig === null || appConfig === void 0 ? void 0 : appConfig.dataSources) === null || _a === void 0 ? void 0 : _a[dsId]; });
        // Root data source is removed but data source info doesn't update.
        if (rootDsInfoIds.length > Object.keys(dataSources).length) {
            return false;
        }
    }
    return Object.keys(dataSources).every(dsId => {
        var _a, _b;
        if (((_a = dataSourcesInfo[dsId]) === null || _a === void 0 ? void 0 : _a.instanceStatus) === jimu_core__WEBPACK_IMPORTED_MODULE_0__.DataSourceStatus.CreateError) {
            return true;
        }
        else if (((_b = dataSourcesInfo[dsId]) === null || _b === void 0 ? void 0 : _b.instanceStatus) === jimu_core__WEBPACK_IMPORTED_MODULE_0__.DataSourceStatus.Created) {
            // If the data source is set, should wait util all child data sources are created.
            const ds = jimu_core__WEBPACK_IMPORTED_MODULE_0__.DataSourceManager.getInstance().getDataSource(dsId);
            return (ds === null || ds === void 0 ? void 0 : ds.isDataSourceSet) ? ds.areChildDataSourcesCreated() : true;
        }
        return false;
    });
}
// Return root data source json.
function editDataSourceJson(dsJson) {
    const ds = jimu_core__WEBPACK_IMPORTED_MODULE_0__.DataSourceManager.getInstance().getDataSource(dsJson === null || dsJson === void 0 ? void 0 : dsJson.id);
    if (!ds || !dsJson) {
        return null;
    }
    let rootDs = ds;
    let rootDsJson = dsJson;
    while (rootDs.parentDataSource) {
        rootDsJson = rootDs.parentDataSource.getDataSourceJson().setIn(['childDataSourceJsons', rootDs.jimuChildId], rootDsJson);
        rootDs = rootDs.parentDataSource;
    }
    return makeSureIsHiddenRight(rootDsJson, dsJson);
}
function makeSureIsHiddenRight(rootDsJson, editDsJson) {
    return makeSureChildDssOfHiddenDsAreHidden(makeSureParentDsOfUnhiddenDsIsUnhidden(rootDsJson, editDsJson));
}
// Return root data source json.
function makeSureParentDsOfUnhiddenDsIsUnhidden(rootDsJson, editDsJson) {
    // If the edited data source is hidden, no need to check parent data sources.
    if (editDsJson === null || editDsJson === void 0 ? void 0 : editDsJson.isHidden) {
        return rootDsJson;
    }
    const editDs = jimu_core__WEBPACK_IMPORTED_MODULE_0__.DataSourceManager.getInstance().getDataSource(editDsJson === null || editDsJson === void 0 ? void 0 : editDsJson.id);
    if (!editDs || !editDsJson) {
        return null;
    }
    let ds = editDs;
    let dsJson = editDsJson;
    while (ds.parentDataSource) {
        const isDsUnhidden = !dsJson.isHidden;
        ds = ds.parentDataSource;
        dsJson = findChildDsJson(rootDsJson, ds.id);
        // If ds is unhidden, the parent of the ds should also be unhidden.
        if (isDsUnhidden) {
            dsJson = dsJson.set('isHidden', false);
            rootDsJson = setChildDsJson(rootDsJson, dsJson);
        }
    }
    return rootDsJson;
}
// Return child data source json.
function findChildDsJson(rootDsJson, childDsId) {
    if (!rootDsJson) {
        return null;
    }
    if (rootDsJson.id === childDsId) {
        return rootDsJson;
    }
    const childDsJsons = Object.values(rootDsJson.childDataSourceJsons || {});
    let result = null;
    for (const dsJson of childDsJsons) {
        const res = findChildDsJson(dsJson, childDsId);
        if (res) {
            result = res;
            break;
        }
    }
    return result;
}
// Return root data source json.
function setChildDsJson(rootDsJson, childDsJson) {
    if (!rootDsJson) {
        return null;
    }
    if (rootDsJson.id === childDsJson.id) {
        return rootDsJson.merge(childDsJson);
    }
    let result = rootDsJson;
    Object.keys(rootDsJson.childDataSourceJsons || {}).forEach(childId => {
        result = result.setIn(['childDataSourceJsons', childId], setChildDsJson(rootDsJson.childDataSourceJsons[childId], childDsJson));
    });
    return result;
}
// Return root data source json.
function makeSureChildDssOfHiddenDsAreHidden(rootDsJson) {
    var _a;
    const rootDs = jimu_core__WEBPACK_IMPORTED_MODULE_0__.DataSourceManager.getInstance().getDataSource(rootDsJson === null || rootDsJson === void 0 ? void 0 : rootDsJson.id);
    if (!rootDs || !rootDsJson) {
        return null;
    }
    let rightRootDsJson = rootDsJson;
    const startToHide = !!rightRootDsJson.isHidden;
    if (rootDs.isDataSourceSet && ((_a = rootDs.getChildDataSources()) === null || _a === void 0 ? void 0 : _a.length) > 0) {
        rootDs.getChildDataSources().forEach(childDs => {
            var _a;
            let childDsJson = (_a = childDs.getDataSourceJson()) === null || _a === void 0 ? void 0 : _a.merge(rightRootDsJson.getIn(['childDataSourceJsons', childDs.jimuChildId]) || {});
            if (!childDsJson) {
                return;
            }
            if (startToHide) {
                childDsJson = childDsJson.set('isHidden', true);
            }
            rightRootDsJson = rightRootDsJson.setIn(['childDataSourceJsons', childDs.jimuChildId], makeSureChildDssOfHiddenDsAreHidden(childDsJson));
        });
    }
    return rightRootDsJson;
}
/**
 * Return original data's url.
 * 1. If data source is from an item, will return item detail url,
 * else will return service url.
 * 2. When need to return service url, if the service is a hosted service, will return service url with corresponding token,
 * else will return service url without token.
 * (When need to return item detail url, will never add token to url. Because user can login in item detail page.)
 */
function getOriginalDataUrl(dsJson) {
    var _a, _b;
    if (!dsJson) {
        return null;
    }
    if (dsJson.itemId && dsJson.portalUrl) {
        return `${dsJson.portalUrl.replace(/\/$/, '')}/home/item.html?id=${dsJson.itemId}`;
    }
    else if (dsJson.url) {
        const isHosted = !!((_a = jimu_core__WEBPACK_IMPORTED_MODULE_0__.ServiceManager.getInstance().getServerInfoByServiceUrl(dsJson.url)) === null || _a === void 0 ? void 0 : _a.owningSystemUrl);
        if (isHosted) {
            const token = (_b = jimu_core__WEBPACK_IMPORTED_MODULE_0__.SessionManager.getInstance().getSessionByUrl(dsJson.url)) === null || _b === void 0 ? void 0 : _b.token;
            return token ? `${dsJson.url}?token=${token}` : `${dsJson.url}`;
        }
        else {
            return `${dsJson.url}`;
        }
    }
    return null;
}
/**
 * Return all ids of the widgets which are using one specific widget's output data source.
 * E.g. ds 1 -> widget A -> output ds 1 -> widget B -> output ds 2 -> widget C -> output ds 3,
 * pass in id of widget A, will return ids of widget A, widget B and widget C.
 */
function getWidgetsUsingOutputDsFromOneWidget(widgetId) {
    var _a;
    let ids = [];
    const appConfig = getAppConfig();
    const widgets = appConfig === null || appConfig === void 0 ? void 0 : appConfig.widgets;
    if (widgets) {
        const outputDss = (_a = widgets[widgetId]) === null || _a === void 0 ? void 0 : _a.outputDataSources;
        if (outputDss && outputDss.length > 0) {
            // Add source widget id
            ids = ids.concat(widgetId);
            outputDss.forEach(outputDsId => {
                Object.keys(widgets).forEach(wId => {
                    var _a, _b;
                    if ((_b = (_a = widgets[wId]) === null || _a === void 0 ? void 0 : _a.useDataSources) === null || _b === void 0 ? void 0 : _b.some(u => u.mainDataSourceId === outputDsId)) {
                        // Add id of the widget which is using source widget's output data source
                        ids = ids.concat(getWidgetsUsingOutputDsFromOneWidget(wId));
                    }
                });
            });
        }
    }
    return ids;
}
// Get icon and color by FieldType.



/***/ }),

/***/ "jimu-core":
/*!****************************!*\
  !*** external "jimu-core" ***!
  \****************************/
/***/ ((module) => {

"use strict";
module.exports = __WEBPACK_EXTERNAL_MODULE_jimu_core__;

/***/ }),

/***/ "jimu-core/data-source":
/*!****************************************!*\
  !*** external "jimu-core/data-source" ***!
  \****************************************/
/***/ ((module) => {

"use strict";
module.exports = __WEBPACK_EXTERNAL_MODULE_jimu_core_data_source__;

/***/ }),

/***/ "jimu-layouts/layout-runtime":
/*!**********************************************!*\
  !*** external "jimu-layouts/layout-runtime" ***!
  \**********************************************/
/***/ ((module) => {

"use strict";
module.exports = __WEBPACK_EXTERNAL_MODULE_jimu_layouts_layout_runtime__;

/***/ }),

/***/ "jimu-theme":
/*!*****************************!*\
  !*** external "jimu-theme" ***!
  \*****************************/
/***/ ((module) => {

"use strict";
module.exports = __WEBPACK_EXTERNAL_MODULE_jimu_theme__;

/***/ }),

/***/ "jimu-ui":
/*!**************************!*\
  !*** external "jimu-ui" ***!
  \**************************/
/***/ ((module) => {

"use strict";
module.exports = __WEBPACK_EXTERNAL_MODULE_jimu_ui__;

/***/ }),

/***/ "jimu-ui/basic/item-selector":
/*!**********************************************!*\
  !*** external "jimu-ui/basic/item-selector" ***!
  \**********************************************/
/***/ ((module) => {

"use strict";
module.exports = __WEBPACK_EXTERNAL_MODULE_jimu_ui_basic_item_selector__;

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";
/*!***************************************************!*\
  !*** ./jimu-ui/advanced/data-source-selector.tsx ***!
  \***************************************************/
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AddDefinitionStatus: () => (/* reexport safe */ _lib_data_source_selector__WEBPACK_IMPORTED_MODULE_2__.AddDefinitionStatus),
/* harmony export */   AllDataSourceTypes: () => (/* reexport safe */ _lib_data_source_selector__WEBPACK_IMPORTED_MODULE_2__.AllDataSourceTypes),
/* harmony export */   DEFAULT_DATA_VIEW_ID: () => (/* reexport safe */ _lib_data_source_selector__WEBPACK_IMPORTED_MODULE_2__.DEFAULT_DATA_VIEW_ID),
/* harmony export */   DataSourceErrorItem: () => (/* reexport safe */ _lib_data_source_selector__WEBPACK_IMPORTED_MODULE_2__.DataSourceErrorItem),
/* harmony export */   DataSourceItem: () => (/* reexport safe */ _lib_data_source_selector__WEBPACK_IMPORTED_MODULE_2__.DataSourceItem),
/* harmony export */   DataSourceList: () => (/* reexport safe */ _lib_data_source_selector__WEBPACK_IMPORTED_MODULE_2__.DataSourceList),
/* harmony export */   DataSourceRemoveWaringReason: () => (/* reexport safe */ _lib_data_source_selector__WEBPACK_IMPORTED_MODULE_2__.DataSourceRemoveWaringReason),
/* harmony export */   DataSourceRemoveWarningPopup: () => (/* reexport safe */ _lib_data_source_selector__WEBPACK_IMPORTED_MODULE_2__.DataSourceRemoveWarningPopup),
/* harmony export */   DataSourceSelector: () => (/* reexport safe */ _lib_data_source_selector__WEBPACK_IMPORTED_MODULE_2__.DataSourceSelector),
/* harmony export */   DataSourceTree: () => (/* reexport safe */ _lib_data_source_selector__WEBPACK_IMPORTED_MODULE_2__.DataSourceTree),
/* harmony export */   DataViewPriority: () => (/* reexport safe */ _lib_data_source_selector__WEBPACK_IMPORTED_MODULE_2__.DataViewPriority),
/* harmony export */   DataViewSettingPopup: () => (/* reexport safe */ _lib_data_source_selector__WEBPACK_IMPORTED_MODULE_2__.DataViewSettingPopup),
/* harmony export */   ExternalDataSourceSelector: () => (/* reexport safe */ _lib_data_source_selector__WEBPACK_IMPORTED_MODULE_2__.ExternalDataSourceSelector),
/* harmony export */   FieldSelector: () => (/* reexport safe */ _lib_data_source_selector__WEBPACK_IMPORTED_MODULE_2__.FieldSelector),
/* harmony export */   FieldSelectorWithFullTextIndex: () => (/* reexport safe */ _lib_data_source_selector__WEBPACK_IMPORTED_MODULE_2__.FieldSelectorWithFullTextIndex),
/* harmony export */   MainDataAndViewSelector: () => (/* reexport safe */ _lib_data_source_selector__WEBPACK_IMPORTED_MODULE_2__.MainDataAndViewSelector),
/* harmony export */   _DataSourceSelector: () => (/* reexport safe */ _lib_data_source_selector__WEBPACK_IMPORTED_MODULE_2__._DataSourceSelector),
/* harmony export */   dataComponentsUtils: () => (/* reexport safe */ _lib_data_source_selector__WEBPACK_IMPORTED_MODULE_2__.dataComponentsUtils)
/* harmony export */ });
/* harmony import */ var _lib_data_source_selector_styles__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lib/data-source-selector/styles */ "./jimu-ui/advanced/lib/data-source-selector/styles/index.ts");
/* harmony import */ var jimu_theme__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! jimu-theme */ "jimu-theme");
/* harmony import */ var _lib_data_source_selector__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./lib/data-source-selector */ "./jimu-ui/advanced/lib/data-source-selector/index.tsx");


(0,jimu_theme__WEBPACK_IMPORTED_MODULE_1__.registerStyles)('jimu-ui/advanced/data-source-selector/', _lib_data_source_selector_styles__WEBPACK_IMPORTED_MODULE_0__);


})();

/******/ 	return __webpack_exports__;
/******/ })()

			);
		}
	};
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,