"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-node_modules_amcharts_amcharts5_locales_he_IL_js"],{

/***/ "./node_modules/@amcharts/amcharts5/locales/he_IL.js":
/*!***********************************************************!*\
  !*** ./node_modules/@amcharts/amcharts5/locales/he_IL.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * amCharts 5 locale
 *
 * Locale: he_IL
 * Language: Hebrew
 * Author: Bjorn Svensson
 *
 * Follow instructions in [on this page](https://www.amcharts.com/docs/v5/concepts/locales/creating-translations/) to make corrections or add new translations.
 *
 * ---
 * Edit but leave the header section above this line. You can remove any
 * subsequent comment sections.
 * ---
 *
 * Use this file as a template to create translations. Leave the key part in
 * English intact. Fill the value with a translation.
 *
 * Empty string means no translation, so default "International English"
 * will be used.
 *
 * If you need the translation to literally be an empty string, use `null`
 * instead.
 *
 * IMPORTANT:
 * When translating make good effort to keep the translation length
 * at least the same chartcount as the English, especially for short prompts.
 *
 * Having significantly longer prompts may distort the actual charts.
 *
 * NOTE:
 * Some prompts - like months or weekdays - come in two versions: full and
 * shortened.
 *
 * If there's no official shortened version of these in your language, and it
 * would not be possible to invent such short versions that don't seem weird
 * to native speakers of that language, fill those with the same as full
 * version.
 *
 * PLACEHOLDERS:
 * Some prompts have placeholders like "%1". Those will be replaced by actual
 * values during translation and should be retained in the translated prompts.
 *
 * Placeholder positions may be changed to better suit structure of the
 * sentence.
 *
 * For example "From %1 to %2", when actually used will replace "%1" with an
 * actual value representing range start, and "%2" will be replaced by end
 * value.
 *
 * E.g. in a Scrollbar for Value axis "From %1 to %2" will become
 * "From 100 to 200". You may translate "From" and "to", as well as re-arrange
 * the order of the prompt itself, but make sure the "%1" and "%2" remain, in
 * places where they will make sense.
 *
 * Save the file as language_LOCALE, i.e. `en_GB.ts`, `fr_FR.ts`, etc.
 */
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
    // Number formatting options.
    //
    // Please check with the local standards which separator is accepted to be
    // used for separating decimals, and which for thousands.
    "_decimalSeparator": ".",
    "_thousandSeparator": ",",
    // Position of the percent sign in numbers
    "_percentPrefix": null,
    "_percentSuffix": "%",
    // Suffixes for numbers
    // When formatting numbers, big or small numers might be reformatted to
    // shorter version, by applying a suffix.
    //
    // For example, 1000000 might become "1m".
    // Or 1024 might become "1KB" if we're formatting byte numbers.
    //
    // This section defines such suffixes for all such cases.
    "_big_number_suffix_3": "k",
    "_big_number_suffix_6": "M",
    "_big_number_suffix_9": "G",
    "_big_number_suffix_12": "T",
    "_big_number_suffix_15": "P",
    "_big_number_suffix_18": "E",
    "_big_number_suffix_21": "Z",
    "_big_number_suffix_24": "Y",
    "_small_number_suffix_3": "m",
    "_small_number_suffix_6": "μ",
    "_small_number_suffix_9": "n",
    "_small_number_suffix_12": "p",
    "_small_number_suffix_15": "f",
    "_small_number_suffix_18": "a",
    "_small_number_suffix_21": "z",
    "_small_number_suffix_24": "y",
    "_byte_suffix_B": "B",
    "_byte_suffix_KB": "KB",
    "_byte_suffix_MB": "MB",
    "_byte_suffix_GB": "GB",
    "_byte_suffix_TB": "TB",
    "_byte_suffix_PB": "PB",
    // Default date formats for various periods.
    //
    // This should reflect official or de facto formatting universally accepted
    // in the country translation is being made for
    // Available format codes here:
    // https://www.amcharts.com/docs/v5/concepts/formatters/formatting-dates/#Format_codes
    //
    // This will be used when formatting date/time for particular granularity,
    // e.g. "_date_hour" will be shown whenever we need to show time as hours.
    "_date_millisecond": "mm:ss SSS",
    "_date_millisecond_full": "HH:mm:ss SSS",
    "_date_second": "HH:mm:ss",
    "_date_second_full": "HH:mm:ss",
    "_date_minute": "HH:mm",
    "_date_minute_full": "HH:mm - MMM dd, yyyy",
    "_date_hour": "HH:mm",
    "_date_hour_full": "HH:mm - MMM dd, yyyy",
    "_date_day": "MMM dd",
    "_date_day_full": "MMM dd, yyyy",
    "_date_week": "ww",
    "_date_week_full": "MMM dd, yyyy",
    "_date_month": "MMM",
    "_date_month_full": "MMM, yyyy",
    "_date_year": "yyyy",
    // Default duration formats for various base units.
    //
    // This will be used by DurationFormatter to format numeric values into
    // duration.
    //
    // Notice how each duration unit comes in several versions. This is to ensure
    // that each base unit is shown correctly.
    //
    // For example, if we have baseUnit set to "second", meaning our duration is
    // in seconds.
    //
    // If we pass in `50` to formatter, it will know that we have just 50 seconds
    // (less than a minute) so it will use format in `"_duration_second"` ("ss"),
    // and the formatted result will be in like `"50"`.
    //
    // If we pass in `70`, which is more than a minute, the formatter will switch
    // to `"_duration_second_minute"` ("mm:ss"), resulting in "01:10" formatted
    // text.
    "_duration_millisecond": "SSS",
    "_duration_millisecond_second": "ss.SSS",
    "_duration_millisecond_minute": "mm:ss SSS",
    "_duration_millisecond_hour": "hh:mm:ss SSS",
    "_duration_millisecond_day": "d'd' mm:ss SSS",
    "_duration_millisecond_week": "d'd' mm:ss SSS",
    "_duration_millisecond_month": "M'm' dd'd' mm:ss SSS",
    "_duration_millisecond_year": "y'y' MM'm' dd'd' mm:ss SSS",
    "_duration_second": "ss",
    "_duration_second_minute": "mm:ss",
    "_duration_second_hour": "hh:mm:ss",
    "_duration_second_day": "d'd' hh:mm:ss",
    "_duration_second_week": "d'd' hh:mm:ss",
    "_duration_second_month": "M'm' dd'd' hh:mm:ss",
    "_duration_second_year": "y'y' MM'm' dd'd' hh:mm:ss",
    "_duration_minute": "mm",
    "_duration_minute_hour": "hh:mm",
    "_duration_minute_day": "d'd' hh:mm",
    "_duration_minute_week": "d'd' hh:mm",
    "_duration_minute_month": "M'm' dd'd' hh:mm",
    "_duration_minute_year": "y'y' MM'm' dd'd' hh:mm",
    "_duration_hour": "hh'h'",
    "_duration_hour_day": "d'd' hh'h'",
    "_duration_hour_week": "d'd' hh'h'",
    "_duration_hour_month": "M'm' dd'd' hh'h'",
    "_duration_hour_year": "y'y' MM'm' dd'd' hh'h'",
    "_duration_day": "d'd'",
    "_duration_day_week": "d'd'",
    "_duration_day_month": "M'm' dd'd'",
    "_duration_day_year": "y'y' MM'm' dd'd'",
    "_duration_week": "w'w'",
    "_duration_week_month": "w'w'",
    "_duration_week_year": "w'w'",
    "_duration_month": "M'm'",
    "_duration_month_year": "y'y' MM'm'",
    "_duration_year": "y'y'",
    // Era translations
    "_era_ad": "לספירה",
    "_era_bc": "לפנה״ס",
    // Day part, used in 12-hour formats, e.g. 5 P.M.
    // Please note that these come in 3 variants:
    // * one letter (e.g. "A")
    // * two letters (e.g. "AM")
    // * two letters with dots (e.g. "A.M.")
    //
    // All three need to to be translated even if they are all the same. Some
    // users might use one, some the other.
    "A": "לפנה״צ",
    "P": "אחה״צ",
    "AM": "לפנה״צ",
    "PM": "אחה״צ",
    "A.M.": "לפנה״צ",
    "P.M.": "אחה״צ",
    // Date-related stuff.
    //
    // When translating months, if there's a difference, use the form which is
    // best for a full date, e.g. as you would use it in "2018 January 1".
    //
    // Note that May is listed twice. This is because in English May is the same
    // in both long and short forms, while in other languages it may not be the
    // case. Translate "May" to full word, while "May(short)" to shortened
    // version.
    //
    // Should month names and weekdays be capitalized or not?
    //
    // Rule of thumb is this: if the names should always be capitalized,
    // regardless of name position within date ("January", "21st January 2018",
    // etc.) use capitalized names. Otherwise enter all lowercase.
    //
    // The date formatter will automatically capitalize names if they are the
    // first (or only) word in resulting date.
    "January": "ינואר",
    "February": "פברואר",
    "March": "מרץ",
    "April": "אפריל",
    "May": "מאי",
    "June": "יוני",
    "July": "יולי",
    "August": "אוגוסט",
    "September": "ספטמבר",
    "October": "אוקטובר",
    "November": "נובמבר",
    "December": "דצמבר",
    "Jan": "ינו׳",
    "Feb": "פבר׳",
    "Mar": "מרץ",
    "Apr": "אפר׳",
    "May(short)": "מאי",
    "Jun": "יוני",
    "Jul": "יולי",
    "Aug": "אוג׳",
    "Sep": "ספט׳",
    "Oct": "אוק׳",
    "Nov": "נוב׳",
    "Dec": "דצמ׳",
    // Weekdays.
    "Sunday": "יום ראשון",
    "Monday": "יום שני",
    "Tuesday": "יום שלישי",
    "Wednesday": "יום רביעי",
    "Thursday": "יום חמישי",
    "Friday": "יום שישי",
    "Saturday": "יום שבת",
    "Sun": "יום א׳",
    "Mon": "יום ב׳",
    "Tue": "יום ג׳",
    "Wed": "יום ד׳",
    "Thu": "יום ה׳",
    "Fri": "יום ו׳",
    "Sat": "שבת",
    // Date ordinal function.
    //
    // This is used when adding number ordinal when formatting days in dates.
    //
    // E.g. "January 1st", "February 2nd".
    //
    // The function accepts day number, and returns a string to be added to the
    // day, like in default English translation, if we pass in 2, we will receive
    // "nd" back.
    "_dateOrd": function (day) {
        let res = "th";
        if ((day < 11) || (day > 13)) {
            switch (day % 10) {
                case 1:
                    res = "st";
                    break;
                case 2:
                    res = "nd";
                    break;
                case 3:
                    res = "rd";
                    break;
            }
        }
        return res;
    },
    // Various chart controls.
    // Shown as a tooltip on zoom out button.
    "Zoom Out": "התמקד",
    // Timeline buttons
    "Play": "נגן",
    "Stop": "עצור",
    // Chart's Legend screen reader title.
    "Legend": "מקרא",
    // Legend's item screen reader indicator.
    "Press ENTER to toggle": "",
    // Shown when the chart is busy loading something.
    "Loading": "טעינה",
    // Shown as the first button in the breadcrumb navigation, e.g.:
    // Home > First level > ...
    "Home": "דף הבית",
    // Chart types.
    // Those are used as default screen reader titles for the main chart element
    // unless developer has set some more descriptive title.
    "Chart": "",
    "Serial chart": "",
    "X/Y chart": "",
    "Pie chart": "",
    "Gauge chart": "",
    "Radar chart": "",
    "Sankey diagram": "",
    "Flow diagram": "",
    "Chord diagram": "",
    "TreeMap chart": "",
    "Sliced chart": "",
    // Series types.
    // Used to name series by type for screen readers if they do not have their
    // name set.
    "Series": "",
    "Candlestick Series": "",
    "OHLC Series": "",
    "Column Series": "",
    "Line Series": "",
    "Pie Slice Series": "",
    "Funnel Series": "",
    "Pyramid Series": "",
    "X/Y Series": "",
    // Map-related stuff.
    "Map": "",
    "Press ENTER to zoom in": "",
    "Press ENTER to zoom out": "",
    "Use arrow keys to zoom in and out": "",
    "Use plus and minus keys on your keyboard to zoom in and out": "",
    // Export-related stuff.
    // These prompts are used in Export menu labels.
    //
    // "Export" is the top-level menu item.
    //
    // "Image", "Data", "Print" as second-level indicating type of export
    // operation.
    //
    // Leave actual format untranslated, unless you absolutely know that they
    // would convey more meaning in some other way.
    "Export": "הדפס",
    "Image": "תמונה",
    "Data": "נתונים",
    "Print": "הדפס",
    "Press ENTER to open": "",
    "Press ENTER to print.": "",
    "Press ENTER to export as %1.": "",
    "(Press ESC to close this message)": "",
    "Image Export Complete": "",
    "Export operation took longer than expected. Something might have gone wrong.": "",
    "Saved from": "",
    "PNG": "",
    "JPG": "",
    "GIF": "",
    "SVG": "",
    "PDF": "",
    "JSON": "",
    "CSV": "",
    "XLSX": "",
    "HTML": "",
    // Scrollbar-related stuff.
    //
    // Scrollbar is a control which can zoom and pan the axes on the chart.
    //
    // Each scrollbar has two grips: left or right (for horizontal scrollbar) or
    // upper and lower (for vertical one).
    //
    // Prompts change in relation to whether Scrollbar is vertical or horizontal.
    //
    // The final section is used to indicate the current range of selection.
    "Use TAB to select grip buttons or left and right arrows to change selection": "",
    "Use left and right arrows to move selection": "",
    "Use left and right arrows to move left selection": "",
    "Use left and right arrows to move right selection": "",
    "Use TAB select grip buttons or up and down arrows to change selection": "",
    "Use up and down arrows to move selection": "",
    "Use up and down arrows to move lower selection": "",
    "Use up and down arrows to move upper selection": "",
    "From %1 to %2": "מ %1 עד %2",
    "From %1": "מ %1",
    "To %1": "עד %1",
    // Data loader-related.
    "No parser available for file: %1": "",
    "Error parsing file: %1": "",
    "Unable to load file: %1": "",
    "Invalid date": "",
});
//# sourceMappingURL=he_IL.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiamltdS11aS9jaHVua3MvdmVuZG9ycy1ub2RlX21vZHVsZXNfYW1jaGFydHNfYW1jaGFydHM1X2xvY2FsZXNfaGVfSUxfanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpRUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsRUFBQztBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXhiLWNsaWVudC8uL25vZGVfbW9kdWxlcy9AYW1jaGFydHMvYW1jaGFydHM1L2xvY2FsZXMvaGVfSUwuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIGFtQ2hhcnRzIDUgbG9jYWxlXHJcbiAqXHJcbiAqIExvY2FsZTogaGVfSUxcclxuICogTGFuZ3VhZ2U6IEhlYnJld1xyXG4gKiBBdXRob3I6IEJqb3JuIFN2ZW5zc29uXHJcbiAqXHJcbiAqIEZvbGxvdyBpbnN0cnVjdGlvbnMgaW4gW29uIHRoaXMgcGFnZV0oaHR0cHM6Ly93d3cuYW1jaGFydHMuY29tL2RvY3MvdjUvY29uY2VwdHMvbG9jYWxlcy9jcmVhdGluZy10cmFuc2xhdGlvbnMvKSB0byBtYWtlIGNvcnJlY3Rpb25zIG9yIGFkZCBuZXcgdHJhbnNsYXRpb25zLlxyXG4gKlxyXG4gKiAtLS1cclxuICogRWRpdCBidXQgbGVhdmUgdGhlIGhlYWRlciBzZWN0aW9uIGFib3ZlIHRoaXMgbGluZS4gWW91IGNhbiByZW1vdmUgYW55XHJcbiAqIHN1YnNlcXVlbnQgY29tbWVudCBzZWN0aW9ucy5cclxuICogLS0tXHJcbiAqXHJcbiAqIFVzZSB0aGlzIGZpbGUgYXMgYSB0ZW1wbGF0ZSB0byBjcmVhdGUgdHJhbnNsYXRpb25zLiBMZWF2ZSB0aGUga2V5IHBhcnQgaW5cclxuICogRW5nbGlzaCBpbnRhY3QuIEZpbGwgdGhlIHZhbHVlIHdpdGggYSB0cmFuc2xhdGlvbi5cclxuICpcclxuICogRW1wdHkgc3RyaW5nIG1lYW5zIG5vIHRyYW5zbGF0aW9uLCBzbyBkZWZhdWx0IFwiSW50ZXJuYXRpb25hbCBFbmdsaXNoXCJcclxuICogd2lsbCBiZSB1c2VkLlxyXG4gKlxyXG4gKiBJZiB5b3UgbmVlZCB0aGUgdHJhbnNsYXRpb24gdG8gbGl0ZXJhbGx5IGJlIGFuIGVtcHR5IHN0cmluZywgdXNlIGBudWxsYFxyXG4gKiBpbnN0ZWFkLlxyXG4gKlxyXG4gKiBJTVBPUlRBTlQ6XHJcbiAqIFdoZW4gdHJhbnNsYXRpbmcgbWFrZSBnb29kIGVmZm9ydCB0byBrZWVwIHRoZSB0cmFuc2xhdGlvbiBsZW5ndGhcclxuICogYXQgbGVhc3QgdGhlIHNhbWUgY2hhcnRjb3VudCBhcyB0aGUgRW5nbGlzaCwgZXNwZWNpYWxseSBmb3Igc2hvcnQgcHJvbXB0cy5cclxuICpcclxuICogSGF2aW5nIHNpZ25pZmljYW50bHkgbG9uZ2VyIHByb21wdHMgbWF5IGRpc3RvcnQgdGhlIGFjdHVhbCBjaGFydHMuXHJcbiAqXHJcbiAqIE5PVEU6XHJcbiAqIFNvbWUgcHJvbXB0cyAtIGxpa2UgbW9udGhzIG9yIHdlZWtkYXlzIC0gY29tZSBpbiB0d28gdmVyc2lvbnM6IGZ1bGwgYW5kXHJcbiAqIHNob3J0ZW5lZC5cclxuICpcclxuICogSWYgdGhlcmUncyBubyBvZmZpY2lhbCBzaG9ydGVuZWQgdmVyc2lvbiBvZiB0aGVzZSBpbiB5b3VyIGxhbmd1YWdlLCBhbmQgaXRcclxuICogd291bGQgbm90IGJlIHBvc3NpYmxlIHRvIGludmVudCBzdWNoIHNob3J0IHZlcnNpb25zIHRoYXQgZG9uJ3Qgc2VlbSB3ZWlyZFxyXG4gKiB0byBuYXRpdmUgc3BlYWtlcnMgb2YgdGhhdCBsYW5ndWFnZSwgZmlsbCB0aG9zZSB3aXRoIHRoZSBzYW1lIGFzIGZ1bGxcclxuICogdmVyc2lvbi5cclxuICpcclxuICogUExBQ0VIT0xERVJTOlxyXG4gKiBTb21lIHByb21wdHMgaGF2ZSBwbGFjZWhvbGRlcnMgbGlrZSBcIiUxXCIuIFRob3NlIHdpbGwgYmUgcmVwbGFjZWQgYnkgYWN0dWFsXHJcbiAqIHZhbHVlcyBkdXJpbmcgdHJhbnNsYXRpb24gYW5kIHNob3VsZCBiZSByZXRhaW5lZCBpbiB0aGUgdHJhbnNsYXRlZCBwcm9tcHRzLlxyXG4gKlxyXG4gKiBQbGFjZWhvbGRlciBwb3NpdGlvbnMgbWF5IGJlIGNoYW5nZWQgdG8gYmV0dGVyIHN1aXQgc3RydWN0dXJlIG9mIHRoZVxyXG4gKiBzZW50ZW5jZS5cclxuICpcclxuICogRm9yIGV4YW1wbGUgXCJGcm9tICUxIHRvICUyXCIsIHdoZW4gYWN0dWFsbHkgdXNlZCB3aWxsIHJlcGxhY2UgXCIlMVwiIHdpdGggYW5cclxuICogYWN0dWFsIHZhbHVlIHJlcHJlc2VudGluZyByYW5nZSBzdGFydCwgYW5kIFwiJTJcIiB3aWxsIGJlIHJlcGxhY2VkIGJ5IGVuZFxyXG4gKiB2YWx1ZS5cclxuICpcclxuICogRS5nLiBpbiBhIFNjcm9sbGJhciBmb3IgVmFsdWUgYXhpcyBcIkZyb20gJTEgdG8gJTJcIiB3aWxsIGJlY29tZVxyXG4gKiBcIkZyb20gMTAwIHRvIDIwMFwiLiBZb3UgbWF5IHRyYW5zbGF0ZSBcIkZyb21cIiBhbmQgXCJ0b1wiLCBhcyB3ZWxsIGFzIHJlLWFycmFuZ2VcclxuICogdGhlIG9yZGVyIG9mIHRoZSBwcm9tcHQgaXRzZWxmLCBidXQgbWFrZSBzdXJlIHRoZSBcIiUxXCIgYW5kIFwiJTJcIiByZW1haW4sIGluXHJcbiAqIHBsYWNlcyB3aGVyZSB0aGV5IHdpbGwgbWFrZSBzZW5zZS5cclxuICpcclxuICogU2F2ZSB0aGUgZmlsZSBhcyBsYW5ndWFnZV9MT0NBTEUsIGkuZS4gYGVuX0dCLnRzYCwgYGZyX0ZSLnRzYCwgZXRjLlxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gICAgLy8gTnVtYmVyIGZvcm1hdHRpbmcgb3B0aW9ucy5cclxuICAgIC8vXHJcbiAgICAvLyBQbGVhc2UgY2hlY2sgd2l0aCB0aGUgbG9jYWwgc3RhbmRhcmRzIHdoaWNoIHNlcGFyYXRvciBpcyBhY2NlcHRlZCB0byBiZVxyXG4gICAgLy8gdXNlZCBmb3Igc2VwYXJhdGluZyBkZWNpbWFscywgYW5kIHdoaWNoIGZvciB0aG91c2FuZHMuXHJcbiAgICBcIl9kZWNpbWFsU2VwYXJhdG9yXCI6IFwiLlwiLFxyXG4gICAgXCJfdGhvdXNhbmRTZXBhcmF0b3JcIjogXCIsXCIsXHJcbiAgICAvLyBQb3NpdGlvbiBvZiB0aGUgcGVyY2VudCBzaWduIGluIG51bWJlcnNcclxuICAgIFwiX3BlcmNlbnRQcmVmaXhcIjogbnVsbCxcclxuICAgIFwiX3BlcmNlbnRTdWZmaXhcIjogXCIlXCIsXHJcbiAgICAvLyBTdWZmaXhlcyBmb3IgbnVtYmVyc1xyXG4gICAgLy8gV2hlbiBmb3JtYXR0aW5nIG51bWJlcnMsIGJpZyBvciBzbWFsbCBudW1lcnMgbWlnaHQgYmUgcmVmb3JtYXR0ZWQgdG9cclxuICAgIC8vIHNob3J0ZXIgdmVyc2lvbiwgYnkgYXBwbHlpbmcgYSBzdWZmaXguXHJcbiAgICAvL1xyXG4gICAgLy8gRm9yIGV4YW1wbGUsIDEwMDAwMDAgbWlnaHQgYmVjb21lIFwiMW1cIi5cclxuICAgIC8vIE9yIDEwMjQgbWlnaHQgYmVjb21lIFwiMUtCXCIgaWYgd2UncmUgZm9ybWF0dGluZyBieXRlIG51bWJlcnMuXHJcbiAgICAvL1xyXG4gICAgLy8gVGhpcyBzZWN0aW9uIGRlZmluZXMgc3VjaCBzdWZmaXhlcyBmb3IgYWxsIHN1Y2ggY2FzZXMuXHJcbiAgICBcIl9iaWdfbnVtYmVyX3N1ZmZpeF8zXCI6IFwia1wiLFxyXG4gICAgXCJfYmlnX251bWJlcl9zdWZmaXhfNlwiOiBcIk1cIixcclxuICAgIFwiX2JpZ19udW1iZXJfc3VmZml4XzlcIjogXCJHXCIsXHJcbiAgICBcIl9iaWdfbnVtYmVyX3N1ZmZpeF8xMlwiOiBcIlRcIixcclxuICAgIFwiX2JpZ19udW1iZXJfc3VmZml4XzE1XCI6IFwiUFwiLFxyXG4gICAgXCJfYmlnX251bWJlcl9zdWZmaXhfMThcIjogXCJFXCIsXHJcbiAgICBcIl9iaWdfbnVtYmVyX3N1ZmZpeF8yMVwiOiBcIlpcIixcclxuICAgIFwiX2JpZ19udW1iZXJfc3VmZml4XzI0XCI6IFwiWVwiLFxyXG4gICAgXCJfc21hbGxfbnVtYmVyX3N1ZmZpeF8zXCI6IFwibVwiLFxyXG4gICAgXCJfc21hbGxfbnVtYmVyX3N1ZmZpeF82XCI6IFwizrxcIixcclxuICAgIFwiX3NtYWxsX251bWJlcl9zdWZmaXhfOVwiOiBcIm5cIixcclxuICAgIFwiX3NtYWxsX251bWJlcl9zdWZmaXhfMTJcIjogXCJwXCIsXHJcbiAgICBcIl9zbWFsbF9udW1iZXJfc3VmZml4XzE1XCI6IFwiZlwiLFxyXG4gICAgXCJfc21hbGxfbnVtYmVyX3N1ZmZpeF8xOFwiOiBcImFcIixcclxuICAgIFwiX3NtYWxsX251bWJlcl9zdWZmaXhfMjFcIjogXCJ6XCIsXHJcbiAgICBcIl9zbWFsbF9udW1iZXJfc3VmZml4XzI0XCI6IFwieVwiLFxyXG4gICAgXCJfYnl0ZV9zdWZmaXhfQlwiOiBcIkJcIixcclxuICAgIFwiX2J5dGVfc3VmZml4X0tCXCI6IFwiS0JcIixcclxuICAgIFwiX2J5dGVfc3VmZml4X01CXCI6IFwiTUJcIixcclxuICAgIFwiX2J5dGVfc3VmZml4X0dCXCI6IFwiR0JcIixcclxuICAgIFwiX2J5dGVfc3VmZml4X1RCXCI6IFwiVEJcIixcclxuICAgIFwiX2J5dGVfc3VmZml4X1BCXCI6IFwiUEJcIixcclxuICAgIC8vIERlZmF1bHQgZGF0ZSBmb3JtYXRzIGZvciB2YXJpb3VzIHBlcmlvZHMuXHJcbiAgICAvL1xyXG4gICAgLy8gVGhpcyBzaG91bGQgcmVmbGVjdCBvZmZpY2lhbCBvciBkZSBmYWN0byBmb3JtYXR0aW5nIHVuaXZlcnNhbGx5IGFjY2VwdGVkXHJcbiAgICAvLyBpbiB0aGUgY291bnRyeSB0cmFuc2xhdGlvbiBpcyBiZWluZyBtYWRlIGZvclxyXG4gICAgLy8gQXZhaWxhYmxlIGZvcm1hdCBjb2RlcyBoZXJlOlxyXG4gICAgLy8gaHR0cHM6Ly93d3cuYW1jaGFydHMuY29tL2RvY3MvdjUvY29uY2VwdHMvZm9ybWF0dGVycy9mb3JtYXR0aW5nLWRhdGVzLyNGb3JtYXRfY29kZXNcclxuICAgIC8vXHJcbiAgICAvLyBUaGlzIHdpbGwgYmUgdXNlZCB3aGVuIGZvcm1hdHRpbmcgZGF0ZS90aW1lIGZvciBwYXJ0aWN1bGFyIGdyYW51bGFyaXR5LFxyXG4gICAgLy8gZS5nLiBcIl9kYXRlX2hvdXJcIiB3aWxsIGJlIHNob3duIHdoZW5ldmVyIHdlIG5lZWQgdG8gc2hvdyB0aW1lIGFzIGhvdXJzLlxyXG4gICAgXCJfZGF0ZV9taWxsaXNlY29uZFwiOiBcIm1tOnNzIFNTU1wiLFxyXG4gICAgXCJfZGF0ZV9taWxsaXNlY29uZF9mdWxsXCI6IFwiSEg6bW06c3MgU1NTXCIsXHJcbiAgICBcIl9kYXRlX3NlY29uZFwiOiBcIkhIOm1tOnNzXCIsXHJcbiAgICBcIl9kYXRlX3NlY29uZF9mdWxsXCI6IFwiSEg6bW06c3NcIixcclxuICAgIFwiX2RhdGVfbWludXRlXCI6IFwiSEg6bW1cIixcclxuICAgIFwiX2RhdGVfbWludXRlX2Z1bGxcIjogXCJISDptbSAtIE1NTSBkZCwgeXl5eVwiLFxyXG4gICAgXCJfZGF0ZV9ob3VyXCI6IFwiSEg6bW1cIixcclxuICAgIFwiX2RhdGVfaG91cl9mdWxsXCI6IFwiSEg6bW0gLSBNTU0gZGQsIHl5eXlcIixcclxuICAgIFwiX2RhdGVfZGF5XCI6IFwiTU1NIGRkXCIsXHJcbiAgICBcIl9kYXRlX2RheV9mdWxsXCI6IFwiTU1NIGRkLCB5eXl5XCIsXHJcbiAgICBcIl9kYXRlX3dlZWtcIjogXCJ3d1wiLFxyXG4gICAgXCJfZGF0ZV93ZWVrX2Z1bGxcIjogXCJNTU0gZGQsIHl5eXlcIixcclxuICAgIFwiX2RhdGVfbW9udGhcIjogXCJNTU1cIixcclxuICAgIFwiX2RhdGVfbW9udGhfZnVsbFwiOiBcIk1NTSwgeXl5eVwiLFxyXG4gICAgXCJfZGF0ZV95ZWFyXCI6IFwieXl5eVwiLFxyXG4gICAgLy8gRGVmYXVsdCBkdXJhdGlvbiBmb3JtYXRzIGZvciB2YXJpb3VzIGJhc2UgdW5pdHMuXHJcbiAgICAvL1xyXG4gICAgLy8gVGhpcyB3aWxsIGJlIHVzZWQgYnkgRHVyYXRpb25Gb3JtYXR0ZXIgdG8gZm9ybWF0IG51bWVyaWMgdmFsdWVzIGludG9cclxuICAgIC8vIGR1cmF0aW9uLlxyXG4gICAgLy9cclxuICAgIC8vIE5vdGljZSBob3cgZWFjaCBkdXJhdGlvbiB1bml0IGNvbWVzIGluIHNldmVyYWwgdmVyc2lvbnMuIFRoaXMgaXMgdG8gZW5zdXJlXHJcbiAgICAvLyB0aGF0IGVhY2ggYmFzZSB1bml0IGlzIHNob3duIGNvcnJlY3RseS5cclxuICAgIC8vXHJcbiAgICAvLyBGb3IgZXhhbXBsZSwgaWYgd2UgaGF2ZSBiYXNlVW5pdCBzZXQgdG8gXCJzZWNvbmRcIiwgbWVhbmluZyBvdXIgZHVyYXRpb24gaXNcclxuICAgIC8vIGluIHNlY29uZHMuXHJcbiAgICAvL1xyXG4gICAgLy8gSWYgd2UgcGFzcyBpbiBgNTBgIHRvIGZvcm1hdHRlciwgaXQgd2lsbCBrbm93IHRoYXQgd2UgaGF2ZSBqdXN0IDUwIHNlY29uZHNcclxuICAgIC8vIChsZXNzIHRoYW4gYSBtaW51dGUpIHNvIGl0IHdpbGwgdXNlIGZvcm1hdCBpbiBgXCJfZHVyYXRpb25fc2Vjb25kXCJgIChcInNzXCIpLFxyXG4gICAgLy8gYW5kIHRoZSBmb3JtYXR0ZWQgcmVzdWx0IHdpbGwgYmUgaW4gbGlrZSBgXCI1MFwiYC5cclxuICAgIC8vXHJcbiAgICAvLyBJZiB3ZSBwYXNzIGluIGA3MGAsIHdoaWNoIGlzIG1vcmUgdGhhbiBhIG1pbnV0ZSwgdGhlIGZvcm1hdHRlciB3aWxsIHN3aXRjaFxyXG4gICAgLy8gdG8gYFwiX2R1cmF0aW9uX3NlY29uZF9taW51dGVcImAgKFwibW06c3NcIiksIHJlc3VsdGluZyBpbiBcIjAxOjEwXCIgZm9ybWF0dGVkXHJcbiAgICAvLyB0ZXh0LlxyXG4gICAgXCJfZHVyYXRpb25fbWlsbGlzZWNvbmRcIjogXCJTU1NcIixcclxuICAgIFwiX2R1cmF0aW9uX21pbGxpc2Vjb25kX3NlY29uZFwiOiBcInNzLlNTU1wiLFxyXG4gICAgXCJfZHVyYXRpb25fbWlsbGlzZWNvbmRfbWludXRlXCI6IFwibW06c3MgU1NTXCIsXHJcbiAgICBcIl9kdXJhdGlvbl9taWxsaXNlY29uZF9ob3VyXCI6IFwiaGg6bW06c3MgU1NTXCIsXHJcbiAgICBcIl9kdXJhdGlvbl9taWxsaXNlY29uZF9kYXlcIjogXCJkJ2QnIG1tOnNzIFNTU1wiLFxyXG4gICAgXCJfZHVyYXRpb25fbWlsbGlzZWNvbmRfd2Vla1wiOiBcImQnZCcgbW06c3MgU1NTXCIsXHJcbiAgICBcIl9kdXJhdGlvbl9taWxsaXNlY29uZF9tb250aFwiOiBcIk0nbScgZGQnZCcgbW06c3MgU1NTXCIsXHJcbiAgICBcIl9kdXJhdGlvbl9taWxsaXNlY29uZF95ZWFyXCI6IFwieSd5JyBNTSdtJyBkZCdkJyBtbTpzcyBTU1NcIixcclxuICAgIFwiX2R1cmF0aW9uX3NlY29uZFwiOiBcInNzXCIsXHJcbiAgICBcIl9kdXJhdGlvbl9zZWNvbmRfbWludXRlXCI6IFwibW06c3NcIixcclxuICAgIFwiX2R1cmF0aW9uX3NlY29uZF9ob3VyXCI6IFwiaGg6bW06c3NcIixcclxuICAgIFwiX2R1cmF0aW9uX3NlY29uZF9kYXlcIjogXCJkJ2QnIGhoOm1tOnNzXCIsXHJcbiAgICBcIl9kdXJhdGlvbl9zZWNvbmRfd2Vla1wiOiBcImQnZCcgaGg6bW06c3NcIixcclxuICAgIFwiX2R1cmF0aW9uX3NlY29uZF9tb250aFwiOiBcIk0nbScgZGQnZCcgaGg6bW06c3NcIixcclxuICAgIFwiX2R1cmF0aW9uX3NlY29uZF95ZWFyXCI6IFwieSd5JyBNTSdtJyBkZCdkJyBoaDptbTpzc1wiLFxyXG4gICAgXCJfZHVyYXRpb25fbWludXRlXCI6IFwibW1cIixcclxuICAgIFwiX2R1cmF0aW9uX21pbnV0ZV9ob3VyXCI6IFwiaGg6bW1cIixcclxuICAgIFwiX2R1cmF0aW9uX21pbnV0ZV9kYXlcIjogXCJkJ2QnIGhoOm1tXCIsXHJcbiAgICBcIl9kdXJhdGlvbl9taW51dGVfd2Vla1wiOiBcImQnZCcgaGg6bW1cIixcclxuICAgIFwiX2R1cmF0aW9uX21pbnV0ZV9tb250aFwiOiBcIk0nbScgZGQnZCcgaGg6bW1cIixcclxuICAgIFwiX2R1cmF0aW9uX21pbnV0ZV95ZWFyXCI6IFwieSd5JyBNTSdtJyBkZCdkJyBoaDptbVwiLFxyXG4gICAgXCJfZHVyYXRpb25faG91clwiOiBcImhoJ2gnXCIsXHJcbiAgICBcIl9kdXJhdGlvbl9ob3VyX2RheVwiOiBcImQnZCcgaGgnaCdcIixcclxuICAgIFwiX2R1cmF0aW9uX2hvdXJfd2Vla1wiOiBcImQnZCcgaGgnaCdcIixcclxuICAgIFwiX2R1cmF0aW9uX2hvdXJfbW9udGhcIjogXCJNJ20nIGRkJ2QnIGhoJ2gnXCIsXHJcbiAgICBcIl9kdXJhdGlvbl9ob3VyX3llYXJcIjogXCJ5J3knIE1NJ20nIGRkJ2QnIGhoJ2gnXCIsXHJcbiAgICBcIl9kdXJhdGlvbl9kYXlcIjogXCJkJ2QnXCIsXHJcbiAgICBcIl9kdXJhdGlvbl9kYXlfd2Vla1wiOiBcImQnZCdcIixcclxuICAgIFwiX2R1cmF0aW9uX2RheV9tb250aFwiOiBcIk0nbScgZGQnZCdcIixcclxuICAgIFwiX2R1cmF0aW9uX2RheV95ZWFyXCI6IFwieSd5JyBNTSdtJyBkZCdkJ1wiLFxyXG4gICAgXCJfZHVyYXRpb25fd2Vla1wiOiBcIncndydcIixcclxuICAgIFwiX2R1cmF0aW9uX3dlZWtfbW9udGhcIjogXCJ3J3cnXCIsXHJcbiAgICBcIl9kdXJhdGlvbl93ZWVrX3llYXJcIjogXCJ3J3cnXCIsXHJcbiAgICBcIl9kdXJhdGlvbl9tb250aFwiOiBcIk0nbSdcIixcclxuICAgIFwiX2R1cmF0aW9uX21vbnRoX3llYXJcIjogXCJ5J3knIE1NJ20nXCIsXHJcbiAgICBcIl9kdXJhdGlvbl95ZWFyXCI6IFwieSd5J1wiLFxyXG4gICAgLy8gRXJhIHRyYW5zbGF0aW9uc1xyXG4gICAgXCJfZXJhX2FkXCI6IFwi15zXodek15nXqNeUXCIsXHJcbiAgICBcIl9lcmFfYmNcIjogXCLXnNek16DXlNe016FcIixcclxuICAgIC8vIERheSBwYXJ0LCB1c2VkIGluIDEyLWhvdXIgZm9ybWF0cywgZS5nLiA1IFAuTS5cclxuICAgIC8vIFBsZWFzZSBub3RlIHRoYXQgdGhlc2UgY29tZSBpbiAzIHZhcmlhbnRzOlxyXG4gICAgLy8gKiBvbmUgbGV0dGVyIChlLmcuIFwiQVwiKVxyXG4gICAgLy8gKiB0d28gbGV0dGVycyAoZS5nLiBcIkFNXCIpXHJcbiAgICAvLyAqIHR3byBsZXR0ZXJzIHdpdGggZG90cyAoZS5nLiBcIkEuTS5cIilcclxuICAgIC8vXHJcbiAgICAvLyBBbGwgdGhyZWUgbmVlZCB0byB0byBiZSB0cmFuc2xhdGVkIGV2ZW4gaWYgdGhleSBhcmUgYWxsIHRoZSBzYW1lLiBTb21lXHJcbiAgICAvLyB1c2VycyBtaWdodCB1c2Ugb25lLCBzb21lIHRoZSBvdGhlci5cclxuICAgIFwiQVwiOiBcItec16TXoNeU17TXplwiLFxyXG4gICAgXCJQXCI6IFwi15DXl9eU17TXplwiLFxyXG4gICAgXCJBTVwiOiBcItec16TXoNeU17TXplwiLFxyXG4gICAgXCJQTVwiOiBcIteQ15fXlNe016ZcIixcclxuICAgIFwiQS5NLlwiOiBcItec16TXoNeU17TXplwiLFxyXG4gICAgXCJQLk0uXCI6IFwi15DXl9eU17TXplwiLFxyXG4gICAgLy8gRGF0ZS1yZWxhdGVkIHN0dWZmLlxyXG4gICAgLy9cclxuICAgIC8vIFdoZW4gdHJhbnNsYXRpbmcgbW9udGhzLCBpZiB0aGVyZSdzIGEgZGlmZmVyZW5jZSwgdXNlIHRoZSBmb3JtIHdoaWNoIGlzXHJcbiAgICAvLyBiZXN0IGZvciBhIGZ1bGwgZGF0ZSwgZS5nLiBhcyB5b3Ugd291bGQgdXNlIGl0IGluIFwiMjAxOCBKYW51YXJ5IDFcIi5cclxuICAgIC8vXHJcbiAgICAvLyBOb3RlIHRoYXQgTWF5IGlzIGxpc3RlZCB0d2ljZS4gVGhpcyBpcyBiZWNhdXNlIGluIEVuZ2xpc2ggTWF5IGlzIHRoZSBzYW1lXHJcbiAgICAvLyBpbiBib3RoIGxvbmcgYW5kIHNob3J0IGZvcm1zLCB3aGlsZSBpbiBvdGhlciBsYW5ndWFnZXMgaXQgbWF5IG5vdCBiZSB0aGVcclxuICAgIC8vIGNhc2UuIFRyYW5zbGF0ZSBcIk1heVwiIHRvIGZ1bGwgd29yZCwgd2hpbGUgXCJNYXkoc2hvcnQpXCIgdG8gc2hvcnRlbmVkXHJcbiAgICAvLyB2ZXJzaW9uLlxyXG4gICAgLy9cclxuICAgIC8vIFNob3VsZCBtb250aCBuYW1lcyBhbmQgd2Vla2RheXMgYmUgY2FwaXRhbGl6ZWQgb3Igbm90P1xyXG4gICAgLy9cclxuICAgIC8vIFJ1bGUgb2YgdGh1bWIgaXMgdGhpczogaWYgdGhlIG5hbWVzIHNob3VsZCBhbHdheXMgYmUgY2FwaXRhbGl6ZWQsXHJcbiAgICAvLyByZWdhcmRsZXNzIG9mIG5hbWUgcG9zaXRpb24gd2l0aGluIGRhdGUgKFwiSmFudWFyeVwiLCBcIjIxc3QgSmFudWFyeSAyMDE4XCIsXHJcbiAgICAvLyBldGMuKSB1c2UgY2FwaXRhbGl6ZWQgbmFtZXMuIE90aGVyd2lzZSBlbnRlciBhbGwgbG93ZXJjYXNlLlxyXG4gICAgLy9cclxuICAgIC8vIFRoZSBkYXRlIGZvcm1hdHRlciB3aWxsIGF1dG9tYXRpY2FsbHkgY2FwaXRhbGl6ZSBuYW1lcyBpZiB0aGV5IGFyZSB0aGVcclxuICAgIC8vIGZpcnN0IChvciBvbmx5KSB3b3JkIGluIHJlc3VsdGluZyBkYXRlLlxyXG4gICAgXCJKYW51YXJ5XCI6IFwi15nXoNeV15DXqFwiLFxyXG4gICAgXCJGZWJydWFyeVwiOiBcItek15HXqNeV15DXqFwiLFxyXG4gICAgXCJNYXJjaFwiOiBcItee16jXpVwiLFxyXG4gICAgXCJBcHJpbFwiOiBcIteQ16TXqNeZ15xcIixcclxuICAgIFwiTWF5XCI6IFwi157XkNeZXCIsXHJcbiAgICBcIkp1bmVcIjogXCLXmdeV16DXmVwiLFxyXG4gICAgXCJKdWx5XCI6IFwi15nXldec15lcIixcclxuICAgIFwiQXVndXN0XCI6IFwi15DXldeS15XXodeYXCIsXHJcbiAgICBcIlNlcHRlbWJlclwiOiBcIteh16TXmNee15HXqFwiLFxyXG4gICAgXCJPY3RvYmVyXCI6IFwi15DXlden15jXldeR16hcIixcclxuICAgIFwiTm92ZW1iZXJcIjogXCLXoNeV15HXnteR16hcIixcclxuICAgIFwiRGVjZW1iZXJcIjogXCLXk9em157XkdeoXCIsXHJcbiAgICBcIkphblwiOiBcIteZ16DXldezXCIsXHJcbiAgICBcIkZlYlwiOiBcItek15HXqNezXCIsXHJcbiAgICBcIk1hclwiOiBcItee16jXpVwiLFxyXG4gICAgXCJBcHJcIjogXCLXkNek16jXs1wiLFxyXG4gICAgXCJNYXkoc2hvcnQpXCI6IFwi157XkNeZXCIsXHJcbiAgICBcIkp1blwiOiBcIteZ15XXoNeZXCIsXHJcbiAgICBcIkp1bFwiOiBcIteZ15XXnNeZXCIsXHJcbiAgICBcIkF1Z1wiOiBcIteQ15XXktezXCIsXHJcbiAgICBcIlNlcFwiOiBcIteh16TXmNezXCIsXHJcbiAgICBcIk9jdFwiOiBcIteQ15XXp9ezXCIsXHJcbiAgICBcIk5vdlwiOiBcIteg15XXkdezXCIsXHJcbiAgICBcIkRlY1wiOiBcIteT16bXntezXCIsXHJcbiAgICAvLyBXZWVrZGF5cy5cclxuICAgIFwiU3VuZGF5XCI6IFwi15nXldedINeo15DXqdeV159cIixcclxuICAgIFwiTW9uZGF5XCI6IFwi15nXldedINep16DXmVwiLFxyXG4gICAgXCJUdWVzZGF5XCI6IFwi15nXldedINep15zXmdep15lcIixcclxuICAgIFwiV2VkbmVzZGF5XCI6IFwi15nXldedINeo15HXmdei15lcIixcclxuICAgIFwiVGh1cnNkYXlcIjogXCLXmdeV150g15fXnteZ16nXmVwiLFxyXG4gICAgXCJGcmlkYXlcIjogXCLXmdeV150g16nXmdep15lcIixcclxuICAgIFwiU2F0dXJkYXlcIjogXCLXmdeV150g16nXkdeqXCIsXHJcbiAgICBcIlN1blwiOiBcIteZ15XXnSDXkNezXCIsXHJcbiAgICBcIk1vblwiOiBcIteZ15XXnSDXkdezXCIsXHJcbiAgICBcIlR1ZVwiOiBcIteZ15XXnSDXktezXCIsXHJcbiAgICBcIldlZFwiOiBcIteZ15XXnSDXk9ezXCIsXHJcbiAgICBcIlRodVwiOiBcIteZ15XXnSDXlNezXCIsXHJcbiAgICBcIkZyaVwiOiBcIteZ15XXnSDXldezXCIsXHJcbiAgICBcIlNhdFwiOiBcItep15HXqlwiLFxyXG4gICAgLy8gRGF0ZSBvcmRpbmFsIGZ1bmN0aW9uLlxyXG4gICAgLy9cclxuICAgIC8vIFRoaXMgaXMgdXNlZCB3aGVuIGFkZGluZyBudW1iZXIgb3JkaW5hbCB3aGVuIGZvcm1hdHRpbmcgZGF5cyBpbiBkYXRlcy5cclxuICAgIC8vXHJcbiAgICAvLyBFLmcuIFwiSmFudWFyeSAxc3RcIiwgXCJGZWJydWFyeSAybmRcIi5cclxuICAgIC8vXHJcbiAgICAvLyBUaGUgZnVuY3Rpb24gYWNjZXB0cyBkYXkgbnVtYmVyLCBhbmQgcmV0dXJucyBhIHN0cmluZyB0byBiZSBhZGRlZCB0byB0aGVcclxuICAgIC8vIGRheSwgbGlrZSBpbiBkZWZhdWx0IEVuZ2xpc2ggdHJhbnNsYXRpb24sIGlmIHdlIHBhc3MgaW4gMiwgd2Ugd2lsbCByZWNlaXZlXHJcbiAgICAvLyBcIm5kXCIgYmFjay5cclxuICAgIFwiX2RhdGVPcmRcIjogZnVuY3Rpb24gKGRheSkge1xyXG4gICAgICAgIGxldCByZXMgPSBcInRoXCI7XHJcbiAgICAgICAgaWYgKChkYXkgPCAxMSkgfHwgKGRheSA+IDEzKSkge1xyXG4gICAgICAgICAgICBzd2l0Y2ggKGRheSAlIDEwKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzID0gXCJzdFwiO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICAgICAgICAgIHJlcyA9IFwibmRcIjtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgMzpcclxuICAgICAgICAgICAgICAgICAgICByZXMgPSBcInJkXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlcztcclxuICAgIH0sXHJcbiAgICAvLyBWYXJpb3VzIGNoYXJ0IGNvbnRyb2xzLlxyXG4gICAgLy8gU2hvd24gYXMgYSB0b29sdGlwIG9uIHpvb20gb3V0IGJ1dHRvbi5cclxuICAgIFwiWm9vbSBPdXRcIjogXCLXlNeq157Xp9eTXCIsXHJcbiAgICAvLyBUaW1lbGluZSBidXR0b25zXHJcbiAgICBcIlBsYXlcIjogXCLXoNeS159cIixcclxuICAgIFwiU3RvcFwiOiBcItei16bXldeoXCIsXHJcbiAgICAvLyBDaGFydCdzIExlZ2VuZCBzY3JlZW4gcmVhZGVyIHRpdGxlLlxyXG4gICAgXCJMZWdlbmRcIjogXCLXnten16jXkFwiLFxyXG4gICAgLy8gTGVnZW5kJ3MgaXRlbSBzY3JlZW4gcmVhZGVyIGluZGljYXRvci5cclxuICAgIFwiUHJlc3MgRU5URVIgdG8gdG9nZ2xlXCI6IFwiXCIsXHJcbiAgICAvLyBTaG93biB3aGVuIHRoZSBjaGFydCBpcyBidXN5IGxvYWRpbmcgc29tZXRoaW5nLlxyXG4gICAgXCJMb2FkaW5nXCI6IFwi15jXoteZ16DXlFwiLFxyXG4gICAgLy8gU2hvd24gYXMgdGhlIGZpcnN0IGJ1dHRvbiBpbiB0aGUgYnJlYWRjcnVtYiBuYXZpZ2F0aW9uLCBlLmcuOlxyXG4gICAgLy8gSG9tZSA+IEZpcnN0IGxldmVsID4gLi4uXHJcbiAgICBcIkhvbWVcIjogXCLXk9ejINeU15HXmdeqXCIsXHJcbiAgICAvLyBDaGFydCB0eXBlcy5cclxuICAgIC8vIFRob3NlIGFyZSB1c2VkIGFzIGRlZmF1bHQgc2NyZWVuIHJlYWRlciB0aXRsZXMgZm9yIHRoZSBtYWluIGNoYXJ0IGVsZW1lbnRcclxuICAgIC8vIHVubGVzcyBkZXZlbG9wZXIgaGFzIHNldCBzb21lIG1vcmUgZGVzY3JpcHRpdmUgdGl0bGUuXHJcbiAgICBcIkNoYXJ0XCI6IFwiXCIsXHJcbiAgICBcIlNlcmlhbCBjaGFydFwiOiBcIlwiLFxyXG4gICAgXCJYL1kgY2hhcnRcIjogXCJcIixcclxuICAgIFwiUGllIGNoYXJ0XCI6IFwiXCIsXHJcbiAgICBcIkdhdWdlIGNoYXJ0XCI6IFwiXCIsXHJcbiAgICBcIlJhZGFyIGNoYXJ0XCI6IFwiXCIsXHJcbiAgICBcIlNhbmtleSBkaWFncmFtXCI6IFwiXCIsXHJcbiAgICBcIkZsb3cgZGlhZ3JhbVwiOiBcIlwiLFxyXG4gICAgXCJDaG9yZCBkaWFncmFtXCI6IFwiXCIsXHJcbiAgICBcIlRyZWVNYXAgY2hhcnRcIjogXCJcIixcclxuICAgIFwiU2xpY2VkIGNoYXJ0XCI6IFwiXCIsXHJcbiAgICAvLyBTZXJpZXMgdHlwZXMuXHJcbiAgICAvLyBVc2VkIHRvIG5hbWUgc2VyaWVzIGJ5IHR5cGUgZm9yIHNjcmVlbiByZWFkZXJzIGlmIHRoZXkgZG8gbm90IGhhdmUgdGhlaXJcclxuICAgIC8vIG5hbWUgc2V0LlxyXG4gICAgXCJTZXJpZXNcIjogXCJcIixcclxuICAgIFwiQ2FuZGxlc3RpY2sgU2VyaWVzXCI6IFwiXCIsXHJcbiAgICBcIk9ITEMgU2VyaWVzXCI6IFwiXCIsXHJcbiAgICBcIkNvbHVtbiBTZXJpZXNcIjogXCJcIixcclxuICAgIFwiTGluZSBTZXJpZXNcIjogXCJcIixcclxuICAgIFwiUGllIFNsaWNlIFNlcmllc1wiOiBcIlwiLFxyXG4gICAgXCJGdW5uZWwgU2VyaWVzXCI6IFwiXCIsXHJcbiAgICBcIlB5cmFtaWQgU2VyaWVzXCI6IFwiXCIsXHJcbiAgICBcIlgvWSBTZXJpZXNcIjogXCJcIixcclxuICAgIC8vIE1hcC1yZWxhdGVkIHN0dWZmLlxyXG4gICAgXCJNYXBcIjogXCJcIixcclxuICAgIFwiUHJlc3MgRU5URVIgdG8gem9vbSBpblwiOiBcIlwiLFxyXG4gICAgXCJQcmVzcyBFTlRFUiB0byB6b29tIG91dFwiOiBcIlwiLFxyXG4gICAgXCJVc2UgYXJyb3cga2V5cyB0byB6b29tIGluIGFuZCBvdXRcIjogXCJcIixcclxuICAgIFwiVXNlIHBsdXMgYW5kIG1pbnVzIGtleXMgb24geW91ciBrZXlib2FyZCB0byB6b29tIGluIGFuZCBvdXRcIjogXCJcIixcclxuICAgIC8vIEV4cG9ydC1yZWxhdGVkIHN0dWZmLlxyXG4gICAgLy8gVGhlc2UgcHJvbXB0cyBhcmUgdXNlZCBpbiBFeHBvcnQgbWVudSBsYWJlbHMuXHJcbiAgICAvL1xyXG4gICAgLy8gXCJFeHBvcnRcIiBpcyB0aGUgdG9wLWxldmVsIG1lbnUgaXRlbS5cclxuICAgIC8vXHJcbiAgICAvLyBcIkltYWdlXCIsIFwiRGF0YVwiLCBcIlByaW50XCIgYXMgc2Vjb25kLWxldmVsIGluZGljYXRpbmcgdHlwZSBvZiBleHBvcnRcclxuICAgIC8vIG9wZXJhdGlvbi5cclxuICAgIC8vXHJcbiAgICAvLyBMZWF2ZSBhY3R1YWwgZm9ybWF0IHVudHJhbnNsYXRlZCwgdW5sZXNzIHlvdSBhYnNvbHV0ZWx5IGtub3cgdGhhdCB0aGV5XHJcbiAgICAvLyB3b3VsZCBjb252ZXkgbW9yZSBtZWFuaW5nIGluIHNvbWUgb3RoZXIgd2F5LlxyXG4gICAgXCJFeHBvcnRcIjogXCLXlNeT16TXoVwiLFxyXG4gICAgXCJJbWFnZVwiOiBcIteq157Xldeg15RcIixcclxuICAgIFwiRGF0YVwiOiBcIteg16rXldeg15nXnVwiLFxyXG4gICAgXCJQcmludFwiOiBcIteU15PXpNehXCIsXHJcbiAgICBcIlByZXNzIEVOVEVSIHRvIG9wZW5cIjogXCJcIixcclxuICAgIFwiUHJlc3MgRU5URVIgdG8gcHJpbnQuXCI6IFwiXCIsXHJcbiAgICBcIlByZXNzIEVOVEVSIHRvIGV4cG9ydCBhcyAlMS5cIjogXCJcIixcclxuICAgIFwiKFByZXNzIEVTQyB0byBjbG9zZSB0aGlzIG1lc3NhZ2UpXCI6IFwiXCIsXHJcbiAgICBcIkltYWdlIEV4cG9ydCBDb21wbGV0ZVwiOiBcIlwiLFxyXG4gICAgXCJFeHBvcnQgb3BlcmF0aW9uIHRvb2sgbG9uZ2VyIHRoYW4gZXhwZWN0ZWQuIFNvbWV0aGluZyBtaWdodCBoYXZlIGdvbmUgd3JvbmcuXCI6IFwiXCIsXHJcbiAgICBcIlNhdmVkIGZyb21cIjogXCJcIixcclxuICAgIFwiUE5HXCI6IFwiXCIsXHJcbiAgICBcIkpQR1wiOiBcIlwiLFxyXG4gICAgXCJHSUZcIjogXCJcIixcclxuICAgIFwiU1ZHXCI6IFwiXCIsXHJcbiAgICBcIlBERlwiOiBcIlwiLFxyXG4gICAgXCJKU09OXCI6IFwiXCIsXHJcbiAgICBcIkNTVlwiOiBcIlwiLFxyXG4gICAgXCJYTFNYXCI6IFwiXCIsXHJcbiAgICBcIkhUTUxcIjogXCJcIixcclxuICAgIC8vIFNjcm9sbGJhci1yZWxhdGVkIHN0dWZmLlxyXG4gICAgLy9cclxuICAgIC8vIFNjcm9sbGJhciBpcyBhIGNvbnRyb2wgd2hpY2ggY2FuIHpvb20gYW5kIHBhbiB0aGUgYXhlcyBvbiB0aGUgY2hhcnQuXHJcbiAgICAvL1xyXG4gICAgLy8gRWFjaCBzY3JvbGxiYXIgaGFzIHR3byBncmlwczogbGVmdCBvciByaWdodCAoZm9yIGhvcml6b250YWwgc2Nyb2xsYmFyKSBvclxyXG4gICAgLy8gdXBwZXIgYW5kIGxvd2VyIChmb3IgdmVydGljYWwgb25lKS5cclxuICAgIC8vXHJcbiAgICAvLyBQcm9tcHRzIGNoYW5nZSBpbiByZWxhdGlvbiB0byB3aGV0aGVyIFNjcm9sbGJhciBpcyB2ZXJ0aWNhbCBvciBob3Jpem9udGFsLlxyXG4gICAgLy9cclxuICAgIC8vIFRoZSBmaW5hbCBzZWN0aW9uIGlzIHVzZWQgdG8gaW5kaWNhdGUgdGhlIGN1cnJlbnQgcmFuZ2Ugb2Ygc2VsZWN0aW9uLlxyXG4gICAgXCJVc2UgVEFCIHRvIHNlbGVjdCBncmlwIGJ1dHRvbnMgb3IgbGVmdCBhbmQgcmlnaHQgYXJyb3dzIHRvIGNoYW5nZSBzZWxlY3Rpb25cIjogXCJcIixcclxuICAgIFwiVXNlIGxlZnQgYW5kIHJpZ2h0IGFycm93cyB0byBtb3ZlIHNlbGVjdGlvblwiOiBcIlwiLFxyXG4gICAgXCJVc2UgbGVmdCBhbmQgcmlnaHQgYXJyb3dzIHRvIG1vdmUgbGVmdCBzZWxlY3Rpb25cIjogXCJcIixcclxuICAgIFwiVXNlIGxlZnQgYW5kIHJpZ2h0IGFycm93cyB0byBtb3ZlIHJpZ2h0IHNlbGVjdGlvblwiOiBcIlwiLFxyXG4gICAgXCJVc2UgVEFCIHNlbGVjdCBncmlwIGJ1dHRvbnMgb3IgdXAgYW5kIGRvd24gYXJyb3dzIHRvIGNoYW5nZSBzZWxlY3Rpb25cIjogXCJcIixcclxuICAgIFwiVXNlIHVwIGFuZCBkb3duIGFycm93cyB0byBtb3ZlIHNlbGVjdGlvblwiOiBcIlwiLFxyXG4gICAgXCJVc2UgdXAgYW5kIGRvd24gYXJyb3dzIHRvIG1vdmUgbG93ZXIgc2VsZWN0aW9uXCI6IFwiXCIsXHJcbiAgICBcIlVzZSB1cCBhbmQgZG93biBhcnJvd3MgdG8gbW92ZSB1cHBlciBzZWxlY3Rpb25cIjogXCJcIixcclxuICAgIFwiRnJvbSAlMSB0byAlMlwiOiBcIteeICUxINei15MgJTJcIixcclxuICAgIFwiRnJvbSAlMVwiOiBcIteeICUxXCIsXHJcbiAgICBcIlRvICUxXCI6IFwi16LXkyAlMVwiLFxyXG4gICAgLy8gRGF0YSBsb2FkZXItcmVsYXRlZC5cclxuICAgIFwiTm8gcGFyc2VyIGF2YWlsYWJsZSBmb3IgZmlsZTogJTFcIjogXCJcIixcclxuICAgIFwiRXJyb3IgcGFyc2luZyBmaWxlOiAlMVwiOiBcIlwiLFxyXG4gICAgXCJVbmFibGUgdG8gbG9hZCBmaWxlOiAlMVwiOiBcIlwiLFxyXG4gICAgXCJJbnZhbGlkIGRhdGVcIjogXCJcIixcclxufTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aGVfSUwuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9