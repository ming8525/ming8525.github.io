"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-node_modules_esri_calcite-components_dist_esm_calcite-meter_entry_js"],{

/***/ "./node_modules/@esri/calcite-components/dist/esm/calcite-meter.entry.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@esri/calcite-components/dist/esm/calcite-meter.entry.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   calcite_meter: () => (/* binding */ Meter)
/* harmony export */ });
/* harmony import */ var _index_86faef9c_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-86faef9c.js */ "./node_modules/@esri/calcite-components/dist/esm/index-86faef9c.js");
/* harmony import */ var _loadable_b17396e0_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./loadable-b17396e0.js */ "./node_modules/@esri/calcite-components/dist/esm/loadable-b17396e0.js");
/* harmony import */ var _form_4876c9e5_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./form-4876c9e5.js */ "./node_modules/@esri/calcite-components/dist/esm/form-4876c9e5.js");
/* harmony import */ var _locale_6e783cf0_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./locale-6e783cf0.js */ "./node_modules/@esri/calcite-components/dist/esm/locale-6e783cf0.js");
/* harmony import */ var _dom_ed00a585_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./dom-ed00a585.js */ "./node_modules/@esri/calcite-components/dist/esm/dom-ed00a585.js");
/* harmony import */ var _observers_71d332db_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./observers-71d332db.js */ "./node_modules/@esri/calcite-components/dist/esm/observers-71d332db.js");
/* harmony import */ var _key_61f82ddb_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./key-61f82ddb.js */ "./node_modules/@esri/calcite-components/dist/esm/key-61f82ddb.js");
/* harmony import */ var _guid_21fecfa4_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./guid-21fecfa4.js */ "./node_modules/@esri/calcite-components/dist/esm/guid-21fecfa4.js");
/* harmony import */ var _resources_cf82388c_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./resources-cf82388c.js */ "./node_modules/@esri/calcite-components/dist/esm/resources-cf82388c.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * See https://github.com/Esri/calcite-design-system/blob/main/LICENSE.md for details.
 * v2.0.0
 */










const CSS = {
  container: "container",
  fill: "fill",
  stepLine: "step-line",
  label: "label",
  labelHidden: "label-hidden",
  labelRange: "label-range",
  labelValue: "label-value",
  unitLabel: "unit-label",
  stepsVisible: "steps-visible",
  valueVisible: "value-visible",
  success: "fill-success",
  warning: "fill-warning",
  danger: "fill-danger",
};

const meterCss = ":host([disabled]){cursor:default;-webkit-user-select:none;user-select:none;opacity:var(--calcite-opacity-disabled)}:host([disabled]) *,:host([disabled]) ::slotted(*){pointer-events:none}:host([hidden]){display:none}[hidden]{display:none}:host([disabled]) ::slotted([calcite-hydrated][disabled]),:host([disabled]) [calcite-hydrated][disabled]{opacity:1}:host{display:flex;--calcite-meter-space-internal:0.125rem;--calcite-meter-height-internal:1rem;--calcite-meter-font-size-internal:var(--calcite-font-size--1)}:host([scale=s]){--calcite-meter-height-internal:0.75rem;--calcite-meter-font-size-internal:var(--calcite-font-size--2)}:host([scale=l]){--calcite-meter-height-internal:1.5rem;--calcite-meter-font-size-internal:var(--calcite-font-size-0)}.container{position:relative;margin:0px;display:flex;inline-size:100%;align-items:center;block-size:var(--calcite-meter-height-internal);background-color:var(--calcite-color-foreground-2);border:1px solid var(--calcite-color-border-3);border-radius:var(--calcite-meter-height-internal)}.solid{border:1px solid var(--calcite-color-foreground-3);background-color:var(--calcite-color-foreground-3)}.outline{background-color:transparent}.value-visible{margin-block-start:1.5rem}.steps-visible{margin-block-end:1.5rem}.step-line{position:absolute;inset-block:0px;display:block;inline-size:var(--calcite-meter-space-internal);background-color:var(--calcite-color-border-3)}.label{position:absolute;font-size:var(--calcite-meter-font-size-internal)}.label-hidden{visibility:hidden;opacity:0}.label-value{inset-block-end:calc(100% + 0.5em);font-weight:var(--calcite-font-weight-bold);color:var(--calcite-color-text-1)}.label-range{color:var(--calcite-color-text-3);inset-block-start:calc(100% + 0.5em)}.unit-label{font-weight:var(--calcite-font-weight-medium);color:var(--calcite-color-text-3)}.label-value .unit-label{font-weight:var(--calcite-font-weight-bold);color:var(--calcite-color-text-2)}.fill{position:absolute;z-index:var(--calcite-z-index);display:block;background-color:var(--calcite-color-brand);transition-duration:150ms;transition-timing-function:cubic-bezier(0.4, 0, 0.2, 1);inset-inline-start:var(--calcite-meter-space-internal);inset-block:var(--calcite-meter-space-internal);border-radius:var(--calcite-meter-height-internal);max-inline-size:calc(100% - var(--calcite-meter-space-internal) * 2);min-inline-size:calc(var(--calcite-meter-height-internal) - var(--calcite-meter-space-internal) * 2);transition-property:inline-size, background-color, box-shadow}.fill-danger{background-color:var(--calcite-color-status-danger)}.fill-success{background-color:var(--calcite-color-status-success)}.fill-warning{background-color:var(--calcite-color-status-warning)}.solid .fill{inset-block:0;inset-inline-start:0;max-inline-size:100%;min-inline-size:calc(var(--calcite-meter-height-internal));box-shadow:0 0 0 1px var(--calcite-color-brand)}.solid .fill-danger{box-shadow:0 0 0 1px var(--calcite-color-status-danger)}.solid .fill-success{box-shadow:0 0 0 1px var(--calcite-color-status-success)}.solid .fill-warning{box-shadow:0 0 0 1px var(--calcite-color-status-warning)}";

const Meter = class {
  constructor(hostRef) {
    (0,_index_86faef9c_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.labelFlipMax = 0.8;
    this.labelFlipProximity = 0.15;
    this.maxPercent = 100;
    this.minPercent = 0;
    this.resizeObserver = (0,_observers_71d332db_js__WEBPACK_IMPORTED_MODULE_5__.c)("resize", () => this.resizeHandler());
    this.formatLabel = (value, labelType) => {
      if (labelType === "percent") {
        if (!this.percentFormatting) {
          const locale = (0,_locale_6e783cf0_js__WEBPACK_IMPORTED_MODULE_3__.g)(this.effectiveLocale);
          const formatter = new Intl.NumberFormat(locale, {
            useGrouping: this.groupSeparator,
            style: "percent",
          });
          this.percentFormatting = { formatter, locale };
        }
        return this.percentFormatting.formatter.format(value);
      }
      else {
        _locale_6e783cf0_js__WEBPACK_IMPORTED_MODULE_3__.n.numberFormatOptions = {
          locale: this.effectiveLocale,
          numberingSystem: this.numberingSystem,
          useGrouping: this.groupSeparator,
        };
        return _locale_6e783cf0_js__WEBPACK_IMPORTED_MODULE_3__.n.localize(value.toString());
      }
    };
    this.appearance = "outline-fill";
    this.disabled = false;
    this.fillType = "range";
    this.form = undefined;
    this.groupSeparator = false;
    this.high = undefined;
    this.label = undefined;
    this.low = undefined;
    this.max = 100;
    this.min = 0;
    this.name = undefined;
    this.numberingSystem = undefined;
    this.rangeLabels = false;
    this.rangeLabelType = "percent";
    this.scale = "m";
    this.unitLabel = "";
    this.value = undefined;
    this.valueLabel = false;
    this.valueLabelType = "percent";
    this.currentPercent = undefined;
    this.effectiveLocale = undefined;
    this.highActive = undefined;
    this.highPercent = undefined;
    this.lowActive = undefined;
    this.lowPercent = undefined;
  }
  handleRangeChange() {
    this.calculateValues();
    this.updateLabels();
  }
  handleLabelChange() {
    this.updateLabels();
  }
  //--------------------------------------------------------------------------
  //
  //  Lifecycle
  //
  //--------------------------------------------------------------------------
  async componentWillLoad() {
    (0,_loadable_b17396e0_js__WEBPACK_IMPORTED_MODULE_1__.s)(this);
    this.calculateValues();
    (0,_form_4876c9e5_js__WEBPACK_IMPORTED_MODULE_2__.a)(this, this.value);
  }
  componentDidLoad() {
    (0,_loadable_b17396e0_js__WEBPACK_IMPORTED_MODULE_1__.a)(this);
    this.updateLabels();
  }
  connectedCallback() {
    (0,_locale_6e783cf0_js__WEBPACK_IMPORTED_MODULE_3__.c)(this);
    (0,_form_4876c9e5_js__WEBPACK_IMPORTED_MODULE_2__.c)(this);
    this.resizeObserver?.observe(this.el);
  }
  disconnectedCallback() {
    (0,_locale_6e783cf0_js__WEBPACK_IMPORTED_MODULE_3__.d)(this);
    (0,_form_4876c9e5_js__WEBPACK_IMPORTED_MODULE_2__.d)(this);
    this.resizeObserver?.disconnect();
  }
  //--------------------------------------------------------------------------
  //
  //  Private Methods
  //
  //--------------------------------------------------------------------------
  resizeHandler() {
    this.updateLabels();
  }
  updateLabels() {
    if (this.valueLabelEl) {
      this.determineValueLabelPosition();
    }
    if (this.rangeLabels) {
      this.determineVisibleLabels();
    }
  }
  calculateValues() {
    const { min, max, low, high, value } = this;
    const lowPercent = (100 * (low - min)) / (max - min);
    const highPercent = (100 * (high - min)) / (max - min);
    const currentPercent = (100 * (value - min)) / (max - min);
    if (!low || low < min || low > high || low > max) {
      this.low = min;
    }
    if (!high || high > max || high < low || high < min) {
      this.high = max;
    }
    if (!value) {
      this.value = min;
    }
    this.lowPercent = lowPercent;
    this.highPercent = highPercent;
    this.currentPercent = value ? currentPercent : 0;
    this.lowActive = !!low && low > min && (!value || low > value) && (!high || low < high);
    this.highActive =
      !!high && min <= high && high < max && (!value || high > value) && (!low || high > low);
  }
  getMeterKindCssClass() {
    const { low, high, min, max, value } = this;
    const lowest = low ? low : min;
    const highest = high ? high : max;
    const aboveLowest = value >= lowest;
    const belowLowest = value < lowest;
    const aboveHighest = value >= highest;
    const belowHighest = value < highest;
    if (!value || (!low && belowHighest) || belowLowest) {
      return CSS.success;
    }
    else if (aboveLowest && belowHighest) {
      return CSS.warning;
    }
    else if (aboveHighest) {
      return CSS.danger;
    }
    else {
      return CSS.success;
    }
  }
  intersects(el1, el2) {
    return el1 && el2 && (0,_dom_ed00a585_js__WEBPACK_IMPORTED_MODULE_4__.v)(el1.getBoundingClientRect(), el2.getBoundingClientRect());
  }
  determineVisibleLabels() {
    const { minLabelEl, lowLabelEl, highLabelEl, maxLabelEl } = this;
    const highMaxOverlap = this.intersects(highLabelEl, maxLabelEl);
    const lowHighOverlap = this.intersects(lowLabelEl, highLabelEl);
    const lowMaxOverlap = this.intersects(lowLabelEl, maxLabelEl);
    const minHighOverlap = this.intersects(minLabelEl, highLabelEl);
    const minLowOverlap = this.intersects(minLabelEl, lowLabelEl);
    const minMaxOverlap = this.intersects(minLabelEl, maxLabelEl);
    const hiddenClass = CSS.labelHidden;
    if (lowLabelEl) {
      if (minLowOverlap || lowMaxOverlap || lowHighOverlap) {
        lowLabelEl.classList.add(hiddenClass);
      }
      else {
        lowLabelEl.classList.remove(hiddenClass);
      }
    }
    if (highLabelEl) {
      if (minHighOverlap || lowMaxOverlap || highMaxOverlap) {
        highLabelEl.classList.add(hiddenClass);
      }
      else {
        highLabelEl.classList.remove(hiddenClass);
      }
    }
    if (minLabelEl && maxLabelEl) {
      if (minMaxOverlap) {
        maxLabelEl.classList.add(hiddenClass);
      }
      else {
        maxLabelEl.classList.remove(hiddenClass);
      }
    }
  }
  determineValueLabelPosition() {
    const { valueLabelEl, meterContainerEl, currentPercent } = this;
    const valuePosition = currentPercent > 100 ? 100 : currentPercent > 0 ? currentPercent : 0;
    const valueLabelWidth = valueLabelEl.getBoundingClientRect().width;
    const containerWidth = meterContainerEl.getBoundingClientRect().width;
    const labelWidthPercent = (100 * (valueLabelWidth - 0)) / (containerWidth - 0);
    if (valuePosition + labelWidthPercent >= 100) {
      valueLabelEl.style.insetInlineEnd = "0%";
      valueLabelEl.style.removeProperty("inset-inline-start");
    }
    else {
      valueLabelEl.style.insetInlineStart = `${valuePosition}% `;
      valueLabelEl.style.removeProperty("inset-inline-end");
    }
  }
  //--------------------------------------------------------------------------
  //
  //  Render Methods
  //
  //--------------------------------------------------------------------------
  renderMeterFill() {
    const { currentPercent, fillType } = this;
    const kindClass = this.getMeterKindCssClass();
    return ((0,_index_86faef9c_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: { [CSS.fill]: true, [kindClass]: fillType !== "single" }, style: { width: `${currentPercent}%` } }));
  }
  renderRangeLine(position) {
    const style = { insetInlineStart: `${position}%` };
    return (0,_index_86faef9c_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.stepLine, style: style });
  }
  renderValueLabel() {
    const { currentPercent, valueLabelType, unitLabel, value } = this;
    const label = this.formatLabel(valueLabelType === "percent" ? currentPercent / 100 : value || 0, valueLabelType);
    return ((0,_index_86faef9c_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: { [CSS.label]: true, [CSS.labelValue]: true }, key: "low-label-line",
      // eslint-disable-next-line react/jsx-sort-props
      ref: (el) => (this.valueLabelEl = el) }, label, unitLabel && valueLabelType !== "percent" && ((0,_index_86faef9c_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: CSS.unitLabel }, "\u00A0", unitLabel))));
  }
  renderMinLabel() {
    const { rangeLabelType, min, minPercent, unitLabel } = this;
    const style = { insetInlineStart: `${minPercent}%` };
    const labelMin = this.formatLabel(rangeLabelType === "percent" ? minPercent : min, rangeLabelType);
    return ((0,_index_86faef9c_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: { [CSS.label]: true, [CSS.labelRange]: true }, key: "min-label-line", style: style,
      // eslint-disable-next-line react/jsx-sort-props
      ref: (el) => (this.minLabelEl = el) }, labelMin, unitLabel && rangeLabelType !== "percent" && ((0,_index_86faef9c_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: CSS.unitLabel }, "\u00A0", unitLabel))));
  }
  renderLowLabel() {
    const { rangeLabelType, low, lowPercent, highPercent, labelFlipProximity } = this;
    const label = low
      ? this.formatLabel(rangeLabelType === "percent" ? lowPercent / 100 : low, rangeLabelType)
      : "";
    const styleDefault = { insetInlineStart: `${lowPercent}%` };
    const styleFlipped = { insetInlineEnd: `${100 - lowPercent}%` };
    const style = (highPercent - lowPercent) / 100 < labelFlipProximity ? styleFlipped : styleDefault;
    return ((0,_index_86faef9c_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: { [CSS.label]: true, [CSS.labelRange]: true }, key: "low-label-line", style: style,
      // eslint-disable-next-line react/jsx-sort-props
      ref: (el) => (this.lowLabelEl = el) }, label));
  }
  renderHighLabel() {
    const { rangeLabelType, high, highPercent, labelFlipMax } = this;
    const label = high
      ? this.formatLabel(rangeLabelType === "percent" ? highPercent / 100 : high, rangeLabelType)
      : "";
    const styleDefault = { insetInlineStart: `${highPercent}%` };
    const styleFlipped = { insetInlineEnd: `${100 - highPercent}%` };
    const style = highPercent / 100 >= labelFlipMax ? styleFlipped : styleDefault;
    return ((0,_index_86faef9c_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: { [CSS.label]: true, [CSS.labelRange]: true }, key: "high-label-line", style: style,
      // eslint-disable-next-line react/jsx-sort-props
      ref: (el) => (this.highLabelEl = el) }, label));
  }
  renderMaxLabel() {
    const { rangeLabelType, max, maxPercent } = this;
    const style = { insetInlineEnd: `${100 - maxPercent}%` };
    const labelMax = this.formatLabel(rangeLabelType === "percent" ? maxPercent / 100 : max, rangeLabelType);
    return ((0,_index_86faef9c_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: { [CSS.label]: true, [CSS.labelRange]: true }, key: "max-label-line", style: style,
      // eslint-disable-next-line react/jsx-sort-props
      ref: (el) => (this.maxLabelEl = el) }, labelMax));
  }
  render() {
    const { appearance, currentPercent, highActive, highPercent, label, lowActive, lowPercent, max, maxPercent, min, minPercent, rangeLabels, rangeLabelType, unitLabel, value, valueLabel, valueLabelType, } = this;
    const textPercentLabelWithPercent = this.formatLabel(currentPercent / 100, "percent");
    const textUnitLabel = `${value} ${unitLabel}`;
    const valueText = valueLabelType === "percent"
      ? textPercentLabelWithPercent
      : unitLabel
        ? textUnitLabel
        : undefined;
    return ((0,_index_86faef9c_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_86faef9c_js__WEBPACK_IMPORTED_MODULE_0__.H, null, (0,_index_86faef9c_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { "aria-label": label, "aria-valuemax": rangeLabelType === "percent" ? maxPercent : max, "aria-valuemin": rangeLabelType === "percent" ? minPercent : min, "aria-valuenow": valueLabelType === "percent" ? currentPercent : value, "aria-valuetext": valueText, class: {
        [CSS.container]: true,
        [CSS.stepsVisible]: rangeLabels,
        [CSS.valueVisible]: valueLabel,
        [appearance]: appearance !== "outline-fill",
      }, role: "meter",
      // eslint-disable-next-line react/jsx-sort-props
      ref: (el) => (this.meterContainerEl = el) }, this.renderMeterFill(), valueLabel && this.renderValueLabel(), lowActive && this.renderRangeLine(lowPercent), highActive && this.renderRangeLine(highPercent), rangeLabels && this.renderMinLabel(), rangeLabels && lowActive && this.renderLowLabel(), rangeLabels && highActive && this.renderHighLabel(), rangeLabels && this.renderMaxLabel())));
  }
  get el() { return (0,_index_86faef9c_js__WEBPACK_IMPORTED_MODULE_0__.g)(this); }
  static get watchers() { return {
    "min": ["handleRangeChange"],
    "max": ["handleRangeChange"],
    "low": ["handleRangeChange"],
    "high": ["handleRangeChange"],
    "value": ["handleRangeChange"],
    "rangeLabels": ["handleLabelChange"],
    "rangeLabelType": ["handleLabelChange"],
    "unitLabel": ["handleLabelChange"],
    "valueLabel": ["handleLabelChange"],
    "valueLabelType": ["handleLabelChange"]
  }; }
};
Meter.style = meterCss;



//# sourceMappingURL=calcite-meter.entry.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,