"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-node_modules_esri_calcite-components_dist_esm_calcite-combobox_3_entry_js"],{

/***/ "./node_modules/@esri/calcite-components/dist/esm/calcite-combobox_3.entry.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@esri/calcite-components/dist/esm/calcite-combobox_3.entry.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   calcite_combobox: () => (/* binding */ Combobox),
/* harmony export */   calcite_combobox_item: () => (/* binding */ ComboboxItem),
/* harmony export */   calcite_combobox_item_group: () => (/* binding */ ComboboxItemGroup)
/* harmony export */ });
/* harmony import */ var _index_86faef9c_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-86faef9c.js */ "./node_modules/@esri/calcite-components/dist/esm/index-86faef9c.js");
/* harmony import */ var _filter_1f2271b7_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./filter-1f2271b7.js */ "./node_modules/@esri/calcite-components/dist/esm/filter-1f2271b7.js");
/* harmony import */ var _dom_ed00a585_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./dom-ed00a585.js */ "./node_modules/@esri/calcite-components/dist/esm/dom-ed00a585.js");
/* harmony import */ var _floating_ui_e25cfa90_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./floating-ui-e25cfa90.js */ "./node_modules/@esri/calcite-components/dist/esm/floating-ui-e25cfa90.js");
/* harmony import */ var _form_4876c9e5_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./form-4876c9e5.js */ "./node_modules/@esri/calcite-components/dist/esm/form-4876c9e5.js");
/* harmony import */ var _guid_21fecfa4_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./guid-21fecfa4.js */ "./node_modules/@esri/calcite-components/dist/esm/guid-21fecfa4.js");
/* harmony import */ var _interactive_cbd8a6dc_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./interactive-cbd8a6dc.js */ "./node_modules/@esri/calcite-components/dist/esm/interactive-cbd8a6dc.js");
/* harmony import */ var _label_1c285d41_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./label-1c285d41.js */ "./node_modules/@esri/calcite-components/dist/esm/label-1c285d41.js");
/* harmony import */ var _loadable_b17396e0_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./loadable-b17396e0.js */ "./node_modules/@esri/calcite-components/dist/esm/loadable-b17396e0.js");
/* harmony import */ var _locale_6e783cf0_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./locale-6e783cf0.js */ "./node_modules/@esri/calcite-components/dist/esm/locale-6e783cf0.js");
/* harmony import */ var _observers_71d332db_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./observers-71d332db.js */ "./node_modules/@esri/calcite-components/dist/esm/observers-71d332db.js");
/* harmony import */ var _openCloseComponent_48db6daf_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./openCloseComponent-48db6daf.js */ "./node_modules/@esri/calcite-components/dist/esm/openCloseComponent-48db6daf.js");
/* harmony import */ var _t9n_0bcdca54_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./t9n-0bcdca54.js */ "./node_modules/@esri/calcite-components/dist/esm/t9n-0bcdca54.js");
/* harmony import */ var _component_f94cab72_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./component-f94cab72.js */ "./node_modules/@esri/calcite-components/dist/esm/component-f94cab72.js");
/* harmony import */ var _debounce_85958bb1_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./debounce-85958bb1.js */ "./node_modules/@esri/calcite-components/dist/esm/debounce-85958bb1.js");
/* harmony import */ var _conditionalSlot_f6710875_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./conditionalSlot-f6710875.js */ "./node_modules/@esri/calcite-components/dist/esm/conditionalSlot-f6710875.js");
/* harmony import */ var _resources_cf82388c_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./resources-cf82388c.js */ "./node_modules/@esri/calcite-components/dist/esm/resources-cf82388c.js");
/* harmony import */ var _browser_ece29da7_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./browser-ece29da7.js */ "./node_modules/@esri/calcite-components/dist/esm/browser-ece29da7.js");
/* harmony import */ var _key_61f82ddb_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./key-61f82ddb.js */ "./node_modules/@esri/calcite-components/dist/esm/key-61f82ddb.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * See https://github.com/Esri/calcite-design-system/blob/main/LICENSE.md for details.
 * v2.0.0
 */




















const ComboboxItem$1 = "CALCITE-COMBOBOX-ITEM";
const ComboboxItemGroup$1 = "CALCITE-COMBOBOX-ITEM-GROUP";
const ComboboxChildSelector = `${ComboboxItem$1}, ${ComboboxItemGroup$1}`;
const CSS$3 = {
  chipInvisible: "chip--invisible",
  selectionDisplayFit: "selection-display-fit",
  selectionDisplaySingle: "selection-display-single",
  listContainer: "list-container",
};

function getAncestors(element) {
  const parent = element.parentElement?.closest(ComboboxChildSelector);
  const grandparent = parent?.parentElement?.closest(ComboboxChildSelector);
  return [parent, grandparent].filter((el) => el);
}
function getItemAncestors(item) {
  return (item.ancestors?.filter((el) => el.nodeName === "CALCITE-COMBOBOX-ITEM") || []);
}
function getItemChildren(item) {
  return (0,_dom_ed00a585_js__WEBPACK_IMPORTED_MODULE_2__.z)(item.querySelectorAll("calcite-combobox-item"));
}
function hasActiveChildren(node) {
  const items = (0,_dom_ed00a585_js__WEBPACK_IMPORTED_MODULE_2__.z)(node.querySelectorAll("calcite-combobox-item"));
  return items.filter((item) => item.selected).length > 0;
}
function getDepth(element) {
  const result = document.evaluate("ancestor::calcite-combobox-item | ancestor::calcite-combobox-item-group", element, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
  return result.snapshotLength;
}
function isSingleLike(selectionMode) {
  return selectionMode.includes("single");
}

const CSS$2 = {
  button: "x-button",
};
function XButton({ disabled, key, label, onClick, ref, scale, }) {
  return ((0,_index_86faef9c_js__WEBPACK_IMPORTED_MODULE_0__.h)("button", { "aria-label": label, class: CSS$2.button, disabled: disabled, key: key, onClick: onClick, tabIndex: -1, type: "button", 
    // eslint-disable-next-line react/jsx-sort-props -- ref should be last so node attrs/props are in sync (see https://github.com/Esri/calcite-design-system/pull/6530)
    ref: ref },
    (0,_index_86faef9c_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { icon: "x", scale: (0,_component_f94cab72_js__WEBPACK_IMPORTED_MODULE_13__.g)(scale) })));
}

/**
 * Do not edit directly
 * Generated on Sat, 02 Dec 2023 04:05:27 GMT
 */
const calciteSize48 = "48px";

const comboboxCss = ":host([disabled]){cursor:default;-webkit-user-select:none;user-select:none;opacity:var(--calcite-opacity-disabled)}:host([disabled]) *,:host([disabled]) ::slotted(*){pointer-events:none}:host{position:relative;display:block}:host([disabled]) ::slotted([calcite-hydrated][disabled]),:host([disabled]) [calcite-hydrated][disabled]{opacity:1}:host([scale=s]) .x-button{inline-size:1rem;block-size:1rem}:host([scale=m]) .x-button{inline-size:1.5rem;block-size:1.5rem}:host([scale=l]) .x-button{inline-size:2rem;block-size:2rem}.x-button{margin:0px;display:flex;cursor:pointer;appearance:none;align-content:center;align-items:center;justify-content:center;align-self:center;border-width:2px;background-color:transparent;color:var(--calcite-color-text-3);outline-color:transparent;transition:all var(--calcite-animation-timing) ease-in-out 0s, outline 0s, outline-offset 0s;border-radius:50%;border-color:transparent;background-color:var(--calcite-color-foreground-2)}.x-button:active,.x-button:hover{color:var(--calcite-color-text-1);background-color:var(--calcite-color-foreground-3)}.x-button:active{border-style:solid;border-color:var(--calcite-color-brand)}.x-button calcite-icon{color:inherit}:host([scale=s]){font-size:var(--calcite-font-size--2);--calcite-combobox-item-spacing-unit-l:0.5rem;--calcite-combobox-item-spacing-unit-s:0.25rem;--calcite-combobox-input-height:1rem;--calcite-internal-combobox-input-margin-block:calc(0.25rem - 1px)}:host([scale=s]) .x-button{margin-inline:0.5rem}:host([scale=m]){font-size:var(--calcite-font-size--1);--calcite-combobox-item-spacing-unit-l:0.75rem;--calcite-combobox-item-spacing-unit-s:0.5rem;--calcite-combobox-input-height:1rem;--calcite-internal-combobox-input-margin-block:calc(0.5rem - 1px)}:host([scale=m]) .x-button{margin-inline-end:0.75rem}:host([scale=l]){font-size:var(--calcite-font-size-0);--calcite-combobox-item-spacing-unit-l:1rem;--calcite-combobox-item-spacing-unit-s:0.75rem;--calcite-combobox-input-height:1.5rem;--calcite-internal-combobox-input-margin-block:calc(0.625rem - 1px)}:host([scale=l]) .x-button{margin-inline-end:1rem}.wrapper{display:flex;border-width:1px;border-style:solid;border-color:var(--calcite-color-border-input);background-color:var(--calcite-color-foreground-1);color:var(--calcite-color-text-1);outline-color:transparent;padding-block:calc(var(--calcite-combobox-item-spacing-unit-s) / 4);padding-inline:var(--calcite-combobox-item-spacing-unit-l)}:host(:focus-within) .wrapper,.wrapper--active{outline:2px solid var(--calcite-color-brand);outline-offset:calc(\n            -2px *\n            calc(\n              1 -\n              2 * clamp(\n                0,\n                var(--calcite-offset-invert-focus),\n                1\n              )\n            )\n          )}:host([status=invalid]) .wrapper{border-color:var(--calcite-color-status-danger)}:host([status=invalid]:focus-within) .wrapper{outline:2px solid var(--calcite-color-status-danger);outline-offset:calc(\n            -2px *\n            calc(\n              1 -\n              2 * clamp(\n                0,\n                var(--calcite-offset-invert-focus),\n                1\n              )\n            )\n          )}.wrapper--single{padding-block:0;padding-inline:var(--calcite-combobox-item-spacing-unit-l);cursor:pointer;flex-wrap:nowrap}.grid-input{position:relative;display:flex;flex-grow:1;flex-wrap:wrap;align-items:center;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;padding:0px;gap:var(--calcite-combobox-item-spacing-unit-s)}.grid-input.selection-display-fit,.grid-input.selection-display-single{flex-wrap:nowrap;overflow:hidden}.input{flex-grow:1;appearance:none;text-overflow:ellipsis;border-style:none;background-color:transparent;padding:0px;font-family:inherit;color:var(--calcite-color-text-1);font-size:inherit;block-size:var(--calcite-combobox-input-height);line-height:var(--calcite-combobox-input-height);inline-size:100%;margin-block-end:var(--calcite-combobox-item-spacing-unit-s);min-inline-size:4.8125rem}.input:focus{outline:2px solid transparent;outline-offset:2px}.input:placeholder-shown{text-overflow:ellipsis}.input--transparent{opacity:0}.input--single{padding:0px;margin-block:var(--calcite-internal-combobox-input-margin-block)}.wrapper--active .input-single{cursor:text}.input--hidden{pointer-events:none;inline-size:0px;min-inline-size:0px;opacity:0}.input--icon{padding-block:0;padding-inline:var(--calcite-combobox-item-spacing-unit-s)}:host([scale=m]) .input--icon,:host([scale=l]) .input--icon{padding-inline:0.25rem}.input-wrap{display:flex;flex-grow:1;align-items:center}.input-wrap--single{flex:1 1 0%;overflow:hidden}.label{pointer-events:none;display:flex;max-inline-size:100%;flex:1 1 auto;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;padding:0px;font-weight:var(--calcite-font-weight-normal);block-size:var(--calcite-combobox-input-height);line-height:var(--calcite-combobox-input-height)}.label--icon{padding-inline:var(--calcite-combobox-item-spacing-unit-l)}.icon-end,.icon-start{display:flex;cursor:pointer;align-items:center}.icon-end{flex:none}.floating-ui-container{--calcite-floating-ui-z-index:var(--calcite-z-index-dropdown);display:block;position:absolute;z-index:var(--calcite-floating-ui-z-index);visibility:hidden}.floating-ui-container .calcite-floating-ui-anim{position:relative;transition:var(--calcite-floating-ui-transition);transition-property:transform, visibility, opacity;opacity:0;box-shadow:0 0 16px 0 rgba(0, 0, 0, 0.16);z-index:var(--calcite-z-index);border-radius:0.25rem}.floating-ui-container[data-placement^=bottom] .calcite-floating-ui-anim{transform:translateY(-5px)}.floating-ui-container[data-placement^=top] .calcite-floating-ui-anim{transform:translateY(5px)}.floating-ui-container[data-placement^=left] .calcite-floating-ui-anim{transform:translateX(5px)}.floating-ui-container[data-placement^=right] .calcite-floating-ui-anim{transform:translateX(-5px)}.floating-ui-container[data-placement] .calcite-floating-ui-anim--active{opacity:1;transform:translate(0)}.floating-ui-container--active{visibility:visible}@media (forced-colors: active){.wrapper,.floating-ui-container--active{border:1px solid canvasText}}.screen-readers-only{position:absolute;inline-size:1px;block-size:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0, 0, 0, 0);white-space:nowrap;border-width:0}.list-container{max-block-size:45vh;overflow-y:auto;background-color:var(--calcite-color-foreground-1);inline-size:var(--calcite-dropdown-width)}.list{margin:0px;display:block;padding:0px}.list--hide{block-size:0px;overflow:hidden}calcite-chip{--calcite-animation-timing:0}.chip{margin-block:calc(var(--calcite-combobox-item-spacing-unit-s) / 4);max-inline-size:100%}.chip--active{background-color:var(--calcite-color-foreground-3)}.chip--invisible{visibility:hidden;position:absolute}.item{display:block}::slotted(input[slot=hidden-form-input]){margin:0 !important;opacity:0 !important;outline:none !important;padding:0 !important;position:absolute !important;inset:0 !important;transform:none !important;-webkit-appearance:none !important;z-index:-1 !important}:host([hidden]){display:none}[hidden]{display:none}::slotted(calcite-combobox-item-group:not(:first-child)){padding-block-start:var(--calcite-combobox-item-spacing-unit-l)}";

const isGroup = (el) => el.tagName === ComboboxItemGroup$1;
const itemUidPrefix = "combobox-item-";
const chipUidPrefix = "combobox-chip-";
const labelUidPrefix = "combobox-label-";
const listboxUidPrefix = "combobox-listbox-";
const inputUidPrefix = "combobox-input-";
const Combobox = class {
  constructor(hostRef) {
    (0,_index_86faef9c_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.calciteComboboxChange = (0,_index_86faef9c_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "calciteComboboxChange", 6);
    this.calciteComboboxFilterChange = (0,_index_86faef9c_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "calciteComboboxFilterChange", 6);
    this.calciteComboboxChipClose = (0,_index_86faef9c_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "calciteComboboxChipClose", 6);
    this.calciteComboboxBeforeClose = (0,_index_86faef9c_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "calciteComboboxBeforeClose", 6);
    this.calciteComboboxClose = (0,_index_86faef9c_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "calciteComboboxClose", 6);
    this.calciteComboboxBeforeOpen = (0,_index_86faef9c_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "calciteComboboxBeforeOpen", 6);
    this.calciteComboboxOpen = (0,_index_86faef9c_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "calciteComboboxOpen", 6);
    this.placement = _floating_ui_e25cfa90_js__WEBPACK_IMPORTED_MODULE_3__.d;
    this.internalValueChangeFlag = false;
    this.textInput = null;
    this.mutationObserver = (0,_observers_71d332db_js__WEBPACK_IMPORTED_MODULE_10__.c)("mutation", () => this.updateItems());
    this.resizeObserver = (0,_observers_71d332db_js__WEBPACK_IMPORTED_MODULE_10__.c)("resize", () => {
      this.setMaxScrollerHeight();
      this.refreshSelectionDisplay();
    });
    this.guid = (0,_guid_21fecfa4_js__WEBPACK_IMPORTED_MODULE_5__.g)();
    this.inputHeight = 0;
    this.ignoreSelectedEventsFlag = false;
    this.openTransitionProp = "opacity";
    this.setFilteredPlacements = () => {
      const { el, flipPlacements } = this;
      this.filteredFlipPlacements = flipPlacements
        ? (0,_floating_ui_e25cfa90_js__WEBPACK_IMPORTED_MODULE_3__.f)(flipPlacements, el)
        : null;
    };
    this.getValue = () => {
      const items = this.selectedItems.map((item) => item?.value?.toString());
      return items?.length ? (items.length > 1 ? items : items[0]) : "";
    };
    this.onLabelClick = () => {
      this.setFocus();
    };
    this.keyDownHandler = (event) => {
      const { key } = event;
      switch (key) {
        case "Tab":
          this.activeChipIndex = -1;
          this.activeItemIndex = -1;
          if (this.allowCustomValues && this.text) {
            this.addCustomChip(this.text, true);
            event.preventDefault();
          }
          else if (this.open) {
            this.open = false;
            event.preventDefault();
          }
          else if (!this.allowCustomValues && this.text) {
            this.clearInputValue();
            this.filterItems("");
            this.updateActiveItemIndex(-1);
          }
          break;
        case "ArrowLeft":
          this.previousChip();
          event.preventDefault();
          break;
        case "ArrowRight":
          this.nextChip();
          event.preventDefault();
          break;
        case "ArrowUp":
          event.preventDefault();
          if (this.open) {
            this.shiftActiveItemIndex(-1);
          }
          if (!this.comboboxInViewport()) {
            this.el.scrollIntoView();
          }
          break;
        case "ArrowDown":
          event.preventDefault();
          if (this.open) {
            this.shiftActiveItemIndex(1);
          }
          else {
            this.open = true;
            this.ensureRecentSelectedItemIsActive();
          }
          if (!this.comboboxInViewport()) {
            this.el.scrollIntoView();
          }
          break;
        case " ":
          if (!this.textInput.value) {
            if (!this.open) {
              this.open = true;
              this.shiftActiveItemIndex(1);
            }
            event.preventDefault();
          }
          break;
        case "Home":
          if (!this.open) {
            return;
          }
          event.preventDefault();
          this.updateActiveItemIndex(0);
          this.scrollToActiveItem();
          if (!this.comboboxInViewport()) {
            this.el.scrollIntoView();
          }
          break;
        case "End":
          if (!this.open) {
            return;
          }
          event.preventDefault();
          this.updateActiveItemIndex(this.filteredItems.length - 1);
          this.scrollToActiveItem();
          if (!this.comboboxInViewport()) {
            this.el.scrollIntoView();
          }
          break;
        case "Escape":
          if (!this.clearDisabled && !this.open) {
            this.clearValue();
          }
          this.open = false;
          event.preventDefault();
          break;
        case "Enter":
          if (this.activeItemIndex > -1) {
            this.toggleSelection(this.filteredItems[this.activeItemIndex]);
            event.preventDefault();
          }
          else if (this.activeChipIndex > -1) {
            this.removeActiveChip();
            event.preventDefault();
          }
          else if (this.allowCustomValues && this.text) {
            this.addCustomChip(this.text, true);
            event.preventDefault();
          }
          else if (!event.defaultPrevented) {
            if ((0,_form_4876c9e5_js__WEBPACK_IMPORTED_MODULE_4__.s)(this)) {
              event.preventDefault();
            }
          }
          break;
        case "Delete":
        case "Backspace":
          if (this.activeChipIndex > -1) {
            event.preventDefault();
            this.removeActiveChip();
          }
          else if (!this.text && this.isMulti()) {
            event.preventDefault();
            this.removeLastChip();
          }
          break;
      }
    };
    this.toggleCloseEnd = () => {
      this.open = false;
      this.el.removeEventListener("calciteComboboxClose", this.toggleCloseEnd);
    };
    this.toggleOpenEnd = () => {
      this.open = false;
      this.el.removeEventListener("calciteComboboxOpen", this.toggleOpenEnd);
    };
    this.setMaxScrollerHeight = async () => {
      const { listContainerEl, open, referenceEl } = this;
      if (!listContainerEl || !open) {
        return;
      }
      await this.reposition(true);
      const maxScrollerHeight = this.getMaxScrollerHeight();
      listContainerEl.style.maxHeight = maxScrollerHeight > 0 ? `${maxScrollerHeight}px` : "";
      listContainerEl.style.minWidth = `${referenceEl.clientWidth}px`;
      await this.reposition(true);
    };
    this.calciteChipCloseHandler = (comboboxItem) => {
      this.open = false;
      const selection = this.items.find((item) => item === comboboxItem);
      if (selection) {
        this.toggleSelection(selection, false);
      }
      this.calciteComboboxChipClose.emit();
    };
    this.clickHandler = (event) => {
      const composedPath = event.composedPath();
      if (composedPath.some((node) => node.tagName === "CALCITE-CHIP")) {
        this.open = false;
        event.preventDefault();
        return;
      }
      if (composedPath.some((node) => node.classList?.contains(CSS$2.button))) {
        this.clearValue();
        event.preventDefault();
        return;
      }
      this.open = !this.open;
      this.ensureRecentSelectedItemIsActive();
    };
    this.refreshSelectionDisplay = async () => {
      await (0,_loadable_b17396e0_js__WEBPACK_IMPORTED_MODULE_8__.b)(this);
      if (isSingleLike(this.selectionMode)) {
        return;
      }
      if (!this.textInput) {
        return;
      }
      const { allSelectedIndicatorChipEl, chipContainerEl, selectionDisplay, placeholder, selectedIndicatorChipEl, textInput, } = this;
      const chipContainerElGap = parseInt(getComputedStyle(chipContainerEl).gap.replace("px", ""));
      const chipContainerElWidth = (0,_dom_ed00a585_js__WEBPACK_IMPORTED_MODULE_2__.B)(chipContainerEl);
      const { fontSize, fontFamily } = getComputedStyle(textInput);
      const inputTextWidth = (0,_dom_ed00a585_js__WEBPACK_IMPORTED_MODULE_2__.C)(placeholder, `${fontSize} ${fontFamily}`);
      const inputWidth = (inputTextWidth || parseInt(calciteSize48)) + chipContainerElGap;
      const allSelectedIndicatorChipElWidth = (0,_dom_ed00a585_js__WEBPACK_IMPORTED_MODULE_2__.B)(allSelectedIndicatorChipEl);
      const selectedIndicatorChipElWidth = (0,_dom_ed00a585_js__WEBPACK_IMPORTED_MODULE_2__.B)(selectedIndicatorChipEl);
      const largestSelectedIndicatorChipWidth = Math.max(allSelectedIndicatorChipElWidth, selectedIndicatorChipElWidth);
      this.setCompactSelectionDisplay({
        chipContainerElGap,
        chipContainerElWidth,
        inputWidth,
        largestSelectedIndicatorChipWidth,
      });
      if (selectionDisplay === "fit") {
        const chipEls = Array.from(this.el.shadowRoot.querySelectorAll("calcite-chip")).filter((chipEl) => chipEl.closable);
        const availableHorizontalChipElSpace = Math.round(chipContainerElWidth -
          ((this.selectedHiddenChipsCount > 0 ? selectedIndicatorChipElWidth : 0) +
            chipContainerElGap +
            inputWidth +
            chipContainerElGap));
        this.refreshChipDisplay({ availableHorizontalChipElSpace, chipContainerElGap, chipEls });
        this.setVisibleAndHiddenChips(chipEls);
      }
    };
    this.setFloatingEl = (el) => {
      this.floatingEl = el;
      (0,_floating_ui_e25cfa90_js__WEBPACK_IMPORTED_MODULE_3__.c)(this, this.referenceEl, this.floatingEl);
    };
    this.setContainerEl = (el) => {
      this.resizeObserver.observe(el);
      this.listContainerEl = el;
      this.transitionEl = el;
    };
    this.setChipContainerEl = (el) => {
      this.resizeObserver.observe(el);
      this.chipContainerEl = el;
    };
    this.setReferenceEl = (el) => {
      this.referenceEl = el;
      (0,_floating_ui_e25cfa90_js__WEBPACK_IMPORTED_MODULE_3__.c)(this, this.referenceEl, this.floatingEl);
    };
    this.setAllSelectedIndicatorChipEl = (el) => {
      this.allSelectedIndicatorChipEl = el;
    };
    this.setSelectedIndicatorChipEl = (el) => {
      this.selectedIndicatorChipEl = el;
    };
    this.inputHandler = (event) => {
      const value = event.target.value;
      this.text = value;
      this.filterItems(value);
      if (value) {
        this.activeChipIndex = -1;
      }
    };
    this.filterItems = (() => {
      const find = (item, filteredData) => item &&
        filteredData.some(({ label, value }) => isGroup(item) ? label === item.label : value === item.value && label === item.textLabel);
      return (0,_debounce_85958bb1_js__WEBPACK_IMPORTED_MODULE_14__.d)((text) => {
        const filteredData = (0,_filter_1f2271b7_js__WEBPACK_IMPORTED_MODULE_1__.f)(this.data, text);
        const itemsAndGroups = this.getItemsAndGroups();
        itemsAndGroups.forEach((item) => {
          const hidden = !find(item, filteredData);
          item.hidden = hidden;
          const [parent, grandparent] = item.ancestors;
          if (find(parent, filteredData) || find(grandparent, filteredData)) {
            item.hidden = false;
          }
          if (!hidden) {
            item.ancestors.forEach((ancestor) => (ancestor.hidden = false));
          }
        });
        this.filteredItems = this.getFilteredItems();
        this.calciteComboboxFilterChange.emit();
      }, 100);
    })();
    this.internalComboboxChangeEvent = () => {
      this.calciteComboboxChange.emit();
    };
    this.emitComboboxChange = (0,_debounce_85958bb1_js__WEBPACK_IMPORTED_MODULE_14__.d)(this.internalComboboxChangeEvent, 0);
    this.getSelectedItems = () => {
      if (!this.isMulti()) {
        const match = this.items.find(({ selected }) => selected);
        return match ? [match] : [];
      }
      return (this.items
        .filter((item) => item.selected && (this.selectionMode !== "ancestors" || !hasActiveChildren(item)))
        /** Preserve order of entered tags */
        .sort((a, b) => {
        const aIdx = this.selectedItems.indexOf(a);
        const bIdx = this.selectedItems.indexOf(b);
        if (aIdx > -1 && bIdx > -1) {
          return aIdx - bIdx;
        }
        return bIdx - aIdx;
      }));
    };
    this.updateItems = () => {
      this.items = this.getItems();
      this.groupItems = this.getGroupItems();
      this.data = this.getData();
      this.selectedItems = this.getSelectedItems();
      this.filteredItems = this.getFilteredItems();
      this.needsIcon = this.getNeedsIcon();
      this.items.forEach((item) => {
        item.selectionMode = this.selectionMode;
        item.scale = this.scale;
      });
      if (!this.allowCustomValues) {
        this.setMaxScrollerHeight();
      }
      this.groupItems.forEach((groupItem, index, items) => {
        if (index === 0) {
          groupItem.afterEmptyGroup = false;
        }
        const nextGroupItem = items[index + 1];
        if (nextGroupItem) {
          nextGroupItem.afterEmptyGroup = groupItem.children.length === 0;
        }
      });
    };
    this.scrollToActiveItem = () => {
      const activeItem = this.filteredItems[this.activeItemIndex];
      if (!activeItem) {
        return;
      }
      const height = this.calculateSingleItemHeight(activeItem);
      const { offsetHeight, scrollTop } = this.listContainerEl;
      if (offsetHeight + scrollTop < activeItem.offsetTop + height) {
        this.listContainerEl.scrollTop = activeItem.offsetTop - offsetHeight + height;
      }
      else if (activeItem.offsetTop < scrollTop) {
        this.listContainerEl.scrollTop = activeItem.offsetTop;
      }
    };
    this.comboboxFocusHandler = () => {
      if (this.disabled) {
        return;
      }
      this.textInput?.focus();
    };
    this.clearDisabled = false;
    this.selectionDisplay = "all";
    this.open = false;
    this.disabled = false;
    this.form = undefined;
    this.label = undefined;
    this.placeholder = undefined;
    this.placeholderIcon = undefined;
    this.placeholderIconFlipRtl = false;
    this.maxItems = 0;
    this.name = undefined;
    this.allowCustomValues = undefined;
    this.overlayPositioning = "absolute";
    this.required = false;
    this.selectionMode = "multiple";
    this.scale = "m";
    this.status = "idle";
    this.value = null;
    this.flipPlacements = undefined;
    this.messages = undefined;
    this.messageOverrides = undefined;
    this.selectedItems = [];
    this.filteredItems = [];
    this.items = [];
    this.groupItems = [];
    this.needsIcon = undefined;
    this.activeItemIndex = -1;
    this.activeChipIndex = -1;
    this.activeDescendant = "";
    this.compactSelectionDisplay = false;
    this.selectedHiddenChipsCount = 0;
    this.selectedVisibleChipsCount = 0;
    this.text = "";
    this.effectiveLocale = undefined;
    this.defaultMessages = undefined;
  }
  openHandler() {
    (0,_openCloseComponent_48db6daf_js__WEBPACK_IMPORTED_MODULE_11__.o)(this);
    if (this.disabled) {
      this.open = false;
      return;
    }
    this.setMaxScrollerHeight();
  }
  handleDisabledChange(value) {
    if (!value) {
      this.open = false;
    }
  }
  maxItemsHandler() {
    this.setMaxScrollerHeight();
  }
  overlayPositioningHandler() {
    this.reposition(true);
  }
  handlePropsChange() {
    this.updateItems();
  }
  valueHandler(value) {
    if (!this.internalValueChangeFlag) {
      const items = this.getItems();
      if (Array.isArray(value)) {
        items.forEach((item) => (item.selected = value.includes(item.value)));
      }
      else if (value) {
        items.forEach((item) => (item.selected = value === item.value));
      }
      else {
        items.forEach((item) => (item.selected = false));
      }
      this.updateItems();
    }
  }
  onMessagesChange() {
    /*  wired up by t9n util */
  }
  flipPlacementsHandler() {
    this.setFilteredPlacements();
    this.reposition(true);
  }
  selectedItemsHandler() {
    this.internalValueChangeFlag = true;
    this.value = this.getValue();
    this.internalValueChangeFlag = false;
  }
  //--------------------------------------------------------------------------
  //
  //  Event Listeners
  //
  //--------------------------------------------------------------------------
  documentClickHandler(event) {
    if (this.disabled || !(0,_dom_ed00a585_js__WEBPACK_IMPORTED_MODULE_2__.i)(event)) {
      return;
    }
    const composedPath = event.composedPath();
    if (composedPath.includes(this.el) || composedPath.includes(this.referenceEl)) {
      return;
    }
    if (!this.allowCustomValues && this.textInput.value) {
      this.clearInputValue();
      this.filterItems("");
      this.updateActiveItemIndex(-1);
    }
    if (this.allowCustomValues && this.text.trim().length) {
      this.addCustomChip(this.text);
    }
    this.open = false;
  }
  calciteComboboxItemChangeHandler(event) {
    if (this.ignoreSelectedEventsFlag) {
      return;
    }
    const target = event.target;
    const newIndex = this.filteredItems.indexOf(target);
    this.updateActiveItemIndex(newIndex);
    this.toggleSelection(target, target.selected);
  }
  //--------------------------------------------------------------------------
  //
  //  Public Methods
  //
  //--------------------------------------------------------------------------
  /**
   * Updates the position of the component.
   *
   * @param delayed Reposition the component after a delay
   * @returns Promise
   */
  async reposition(delayed = false) {
    const { floatingEl, referenceEl, placement, overlayPositioning, filteredFlipPlacements } = this;
    return (0,_floating_ui_e25cfa90_js__WEBPACK_IMPORTED_MODULE_3__.r)(this, {
      floatingEl,
      referenceEl,
      overlayPositioning,
      placement,
      flipPlacements: filteredFlipPlacements,
      type: "menu",
    }, delayed);
  }
  /** Sets focus on the component. */
  async setFocus() {
    await (0,_loadable_b17396e0_js__WEBPACK_IMPORTED_MODULE_8__.c)(this);
    this.textInput?.focus();
    this.activeChipIndex = -1;
    this.activeItemIndex = -1;
  }
  // --------------------------------------------------------------------------
  //
  //  Lifecycle
  //
  // --------------------------------------------------------------------------
  connectedCallback() {
    (0,_interactive_cbd8a6dc_js__WEBPACK_IMPORTED_MODULE_6__.c)(this);
    (0,_locale_6e783cf0_js__WEBPACK_IMPORTED_MODULE_9__.c)(this);
    (0,_t9n_0bcdca54_js__WEBPACK_IMPORTED_MODULE_12__.c)(this);
    (0,_label_1c285d41_js__WEBPACK_IMPORTED_MODULE_7__.c)(this);
    (0,_form_4876c9e5_js__WEBPACK_IMPORTED_MODULE_4__.c)(this);
    this.internalValueChangeFlag = true;
    this.value = this.getValue();
    this.internalValueChangeFlag = false;
    this.mutationObserver?.observe(this.el, { childList: true, subtree: true });
    this.updateItems();
    this.setFilteredPlacements();
    this.reposition(true);
    if (this.open) {
      this.openHandler();
      (0,_openCloseComponent_48db6daf_js__WEBPACK_IMPORTED_MODULE_11__.o)(this);
    }
    (0,_floating_ui_e25cfa90_js__WEBPACK_IMPORTED_MODULE_3__.c)(this, this.referenceEl, this.floatingEl);
  }
  async componentWillLoad() {
    (0,_loadable_b17396e0_js__WEBPACK_IMPORTED_MODULE_8__.s)(this);
    this.updateItems();
    await (0,_t9n_0bcdca54_js__WEBPACK_IMPORTED_MODULE_12__.s)(this);
  }
  componentDidLoad() {
    (0,_form_4876c9e5_js__WEBPACK_IMPORTED_MODULE_4__.a)(this, this.getValue());
    this.reposition(true);
    (0,_loadable_b17396e0_js__WEBPACK_IMPORTED_MODULE_8__.a)(this);
  }
  componentDidRender() {
    if (this.el.offsetHeight !== this.inputHeight) {
      this.reposition(true);
      this.inputHeight = this.el.offsetHeight;
    }
    (0,_interactive_cbd8a6dc_js__WEBPACK_IMPORTED_MODULE_6__.u)(this);
  }
  componentDidUpdate() {
    this.refreshSelectionDisplay();
  }
  disconnectedCallback() {
    this.mutationObserver?.disconnect();
    this.resizeObserver?.disconnect();
    (0,_interactive_cbd8a6dc_js__WEBPACK_IMPORTED_MODULE_6__.d)(this);
    (0,_label_1c285d41_js__WEBPACK_IMPORTED_MODULE_7__.d)(this);
    (0,_form_4876c9e5_js__WEBPACK_IMPORTED_MODULE_4__.d)(this);
    (0,_floating_ui_e25cfa90_js__WEBPACK_IMPORTED_MODULE_3__.a)(this, this.referenceEl, this.floatingEl);
    (0,_locale_6e783cf0_js__WEBPACK_IMPORTED_MODULE_9__.d)(this);
    (0,_t9n_0bcdca54_js__WEBPACK_IMPORTED_MODULE_12__.d)(this);
  }
  /** when search text is cleared, reset active to  */
  textHandler() {
    this.updateActiveItemIndex(-1);
  }
  effectiveLocaleChange() {
    (0,_t9n_0bcdca54_js__WEBPACK_IMPORTED_MODULE_12__.u)(this, this.effectiveLocale);
  }
  // --------------------------------------------------------------------------
  //
  //  Private Methods
  //
  // --------------------------------------------------------------------------
  clearValue() {
    this.ignoreSelectedEventsFlag = true;
    this.items.forEach((el) => (el.selected = false));
    this.ignoreSelectedEventsFlag = false;
    this.selectedItems = [];
    this.emitComboboxChange();
    this.open = false;
    this.updateActiveItemIndex(-1);
    this.resetText();
    this.filterItems("");
    this.setFocus();
  }
  clearInputValue() {
    this.textInput.value = "";
    this.text = "";
  }
  comboboxInViewport() {
    const bounding = this.el.getBoundingClientRect();
    return (bounding.top >= 0 &&
      bounding.left >= 0 &&
      bounding.right <= (window.innerWidth || document.documentElement.clientWidth) &&
      bounding.bottom <= (window.innerHeight || document.documentElement.clientHeight));
  }
  onBeforeOpen() {
    this.scrollToActiveItem();
    this.calciteComboboxBeforeOpen.emit();
  }
  onOpen() {
    this.calciteComboboxOpen.emit();
  }
  onBeforeClose() {
    this.calciteComboboxBeforeClose.emit();
  }
  onClose() {
    this.calciteComboboxClose.emit();
  }
  ensureRecentSelectedItemIsActive() {
    const { selectedItems } = this;
    const targetIndex = selectedItems.length === 0 ? 0 : this.items.indexOf(selectedItems[selectedItems.length - 1]);
    this.updateActiveItemIndex(targetIndex);
  }
  hideChip(chipEl) {
    chipEl.classList.add(CSS$3.chipInvisible);
  }
  showChip(chipEl) {
    chipEl.classList.remove(CSS$3.chipInvisible);
  }
  refreshChipDisplay({ chipEls, availableHorizontalChipElSpace, chipContainerElGap, }) {
    chipEls.forEach((chipEl) => {
      if (!chipEl.selected) {
        this.hideChip(chipEl);
      }
      else {
        const chipElWidth = (0,_dom_ed00a585_js__WEBPACK_IMPORTED_MODULE_2__.B)(chipEl);
        if (chipElWidth && chipElWidth < availableHorizontalChipElSpace) {
          availableHorizontalChipElSpace -= chipElWidth + chipContainerElGap;
          this.showChip(chipEl);
          return;
        }
      }
      this.hideChip(chipEl);
    });
  }
  setCompactSelectionDisplay({ chipContainerElGap, chipContainerElWidth, inputWidth, largestSelectedIndicatorChipWidth, }) {
    const newCompactBreakpoint = Math.round(largestSelectedIndicatorChipWidth + chipContainerElGap + inputWidth);
    if (!this.maxCompactBreakpoint || this.maxCompactBreakpoint < newCompactBreakpoint) {
      this.maxCompactBreakpoint = newCompactBreakpoint;
    }
    this.compactSelectionDisplay = chipContainerElWidth < this.maxCompactBreakpoint;
  }
  setVisibleAndHiddenChips(chipEls) {
    let newSelectedVisibleChipsCount = 0;
    chipEls.forEach((chipEl) => {
      if (chipEl.selected && !chipEl.classList.contains(CSS$3.chipInvisible)) {
        newSelectedVisibleChipsCount++;
      }
    });
    if (newSelectedVisibleChipsCount !== this.selectedVisibleChipsCount) {
      this.selectedVisibleChipsCount = newSelectedVisibleChipsCount;
    }
    const newSelectedHiddenChipsCount = this.getSelectedItems().length - newSelectedVisibleChipsCount;
    if (newSelectedHiddenChipsCount !== this.selectedHiddenChipsCount) {
      this.selectedHiddenChipsCount = newSelectedHiddenChipsCount;
    }
  }
  getMaxScrollerHeight() {
    const items = this.getItemsAndGroups().filter((item) => !item.hidden);
    const { maxItems } = this;
    let itemsToProcess = 0;
    let maxScrollerHeight = 0;
    if (items.length > maxItems) {
      items.forEach((item) => {
        if (itemsToProcess < maxItems && maxItems > 0) {
          const height = this.calculateSingleItemHeight(item);
          if (height > 0) {
            maxScrollerHeight += height;
            itemsToProcess++;
          }
        }
      });
    }
    return maxScrollerHeight;
  }
  calculateSingleItemHeight(item) {
    if (!item) {
      return;
    }
    let height = item.offsetHeight;
    // if item has children items, don't count their height twice
    const children = Array.from(item.querySelectorAll(ComboboxChildSelector));
    children
      .map((child) => child?.offsetHeight)
      .forEach((offsetHeight) => {
      height -= offsetHeight;
    });
    return height;
  }
  getItemsAndGroups() {
    return [...this.groupItems, ...this.items];
  }
  toggleSelection(item, value = !item.selected) {
    if (!item ||
      (this.selectionMode === "single-persist" && item.selected && item.value === this.value)) {
      return;
    }
    if (this.isMulti()) {
      item.selected = value;
      this.updateAncestors(item);
      this.selectedItems = this.getSelectedItems();
      this.emitComboboxChange();
      this.resetText();
      this.filterItems("");
    }
    else {
      this.ignoreSelectedEventsFlag = true;
      this.items.forEach((el) => (el.selected = el === item ? value : false));
      this.ignoreSelectedEventsFlag = false;
      this.selectedItems = this.getSelectedItems();
      this.emitComboboxChange();
      if (this.textInput) {
        this.textInput.value = item.textLabel;
      }
      this.open = false;
      this.updateActiveItemIndex(-1);
      this.resetText();
      this.filterItems("");
    }
  }
  updateAncestors(item) {
    if (this.selectionMode !== "ancestors") {
      return;
    }
    const ancestors = getItemAncestors(item);
    const children = getItemChildren(item);
    if (item.selected) {
      ancestors.forEach((el) => {
        el.selected = true;
      });
    }
    else {
      children.forEach((el) => (el.selected = false));
      [...ancestors].forEach((el) => {
        if (!hasActiveChildren(el)) {
          el.selected = false;
        }
      });
    }
  }
  getFilteredItems() {
    return this.items.filter((item) => !item.hidden);
  }
  getData() {
    return this.items.map((item) => ({
      filterDisabled: item.filterDisabled,
      value: item.value,
      label: item.textLabel,
    }));
  }
  getNeedsIcon() {
    return isSingleLike(this.selectionMode) && this.items.some((item) => item.icon);
  }
  resetText() {
    if (this.textInput) {
      this.textInput.value = "";
    }
    this.text = "";
  }
  getItems() {
    const items = Array.from(this.el.querySelectorAll(ComboboxItem$1));
    return items.filter((item) => !item.disabled);
  }
  getGroupItems() {
    return Array.from(this.el.querySelectorAll(ComboboxItemGroup$1));
  }
  addCustomChip(value, focus) {
    const existingItem = this.items.find((el) => el.textLabel === value);
    if (existingItem) {
      this.toggleSelection(existingItem, true);
    }
    else {
      if (!this.isMulti()) {
        this.toggleSelection(this.selectedItems[this.selectedItems.length - 1], false);
      }
      const item = document.createElement(ComboboxItem$1);
      item.value = value;
      item.textLabel = value;
      item.selected = true;
      this.el.appendChild(item);
      this.resetText();
      if (focus) {
        this.setFocus();
      }
      this.updateItems();
      this.filterItems("");
      this.emitComboboxChange();
    }
  }
  removeActiveChip() {
    this.toggleSelection(this.selectedItems[this.activeChipIndex], false);
    this.setFocus();
  }
  removeLastChip() {
    this.toggleSelection(this.selectedItems[this.selectedItems.length - 1], false);
    this.setFocus();
  }
  previousChip() {
    if (this.text) {
      return;
    }
    const length = this.selectedItems.length - 1;
    const active = this.activeChipIndex;
    this.activeChipIndex = active === -1 ? length : Math.max(active - 1, 0);
    this.updateActiveItemIndex(-1);
    this.focusChip();
  }
  nextChip() {
    if (this.text || this.activeChipIndex === -1) {
      return;
    }
    const last = this.selectedItems.length - 1;
    const newIndex = this.activeChipIndex + 1;
    if (newIndex > last) {
      this.activeChipIndex = -1;
      this.setFocus();
    }
    else {
      this.activeChipIndex = newIndex;
      this.focusChip();
    }
    this.updateActiveItemIndex(-1);
  }
  focusChip() {
    const guid = this.selectedItems[this.activeChipIndex]?.guid;
    const chip = guid
      ? this.referenceEl.querySelector(`#${chipUidPrefix}${guid}`)
      : null;
    chip?.setFocus();
  }
  shiftActiveItemIndex(delta) {
    const { length } = this.filteredItems;
    const newIndex = (this.activeItemIndex + length + delta) % length;
    this.updateActiveItemIndex(newIndex);
    this.scrollToActiveItem();
  }
  updateActiveItemIndex(index) {
    this.activeItemIndex = index;
    let activeDescendant = null;
    this.filteredItems.forEach((el, i) => {
      if (i === index) {
        el.active = true;
        activeDescendant = `${itemUidPrefix}${el.guid}`;
      }
      else {
        el.active = false;
      }
    });
    this.activeDescendant = activeDescendant;
    if (this.activeItemIndex > -1) {
      this.activeChipIndex = -1;
    }
  }
  isAllSelected() {
    return this.getItems().length === this.getSelectedItems().length;
  }
  isMulti() {
    return !isSingleLike(this.selectionMode);
  }
  //--------------------------------------------------------------------------
  //
  //  Render Methods
  //
  //--------------------------------------------------------------------------
  renderChips() {
    const { activeChipIndex, scale, selectionMode, messages } = this;
    return this.selectedItems.map((item, i) => {
      const chipClasses = {
        chip: true,
        "chip--active": activeChipIndex === i,
      };
      const ancestors = [...getItemAncestors(item)].reverse();
      const pathLabel = [...ancestors, item].map((el) => el.textLabel);
      const label = selectionMode !== "ancestors" ? item.textLabel : pathLabel.join(" / ");
      return ((0,_index_86faef9c_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-chip", { class: chipClasses, closable: true, icon: item.icon, iconFlipRtl: item.iconFlipRtl, id: item.guid ? `${chipUidPrefix}${item.guid}` : null, key: item.textLabel, messageOverrides: { dismissLabel: messages.removeTag }, onCalciteChipClose: () => this.calciteChipCloseHandler(item), scale: scale, selected: item.selected, title: label, value: item.value }, label));
    });
  }
  renderAllSelectedIndicatorChip() {
    const { compactSelectionDisplay, scale, selectedVisibleChipsCount, setAllSelectedIndicatorChipEl, } = this;
    const label = this.messages.allSelected;
    return ((0,_index_86faef9c_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-chip", { class: {
        chip: true,
        [CSS$3.chipInvisible]: !(this.isAllSelected() &&
          !selectedVisibleChipsCount &&
          !compactSelectionDisplay),
      }, scale: scale, title: label, value: "",
      // eslint-disable-next-line react/jsx-sort-props -- ref should be last so node attrs/props are in sync (see https://github.com/Esri/calcite-design-system/pull/6530)
      ref: setAllSelectedIndicatorChipEl }, label));
  }
  renderAllSelectedIndicatorChipCompact() {
    const { compactSelectionDisplay, scale, selectedVisibleChipsCount } = this;
    const label = this.messages.all || "All";
    return ((0,_index_86faef9c_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-chip", { class: {
        chip: true,
        [CSS$3.chipInvisible]: !(this.isAllSelected() &&
          !selectedVisibleChipsCount &&
          compactSelectionDisplay),
      }, scale: scale, title: label, value: "" }, label));
  }
  renderSelectedIndicatorChip() {
    const { compactSelectionDisplay, selectionDisplay, getSelectedItems, scale, selectedHiddenChipsCount, selectedVisibleChipsCount, setSelectedIndicatorChipEl, } = this;
    let chipInvisible;
    let label;
    if (compactSelectionDisplay) {
      chipInvisible = true;
    }
    else {
      if (selectionDisplay === "single") {
        const selectedItemsCount = getSelectedItems().length;
        if (this.isAllSelected()) {
          chipInvisible = true;
        }
        else if (selectedItemsCount > 0) {
          chipInvisible = false;
        }
        else {
          chipInvisible = true;
        }
        label = `${selectedItemsCount} ${this.messages.selected}`;
      }
      else if (selectionDisplay === "fit") {
        chipInvisible = !!((this.isAllSelected() && selectedVisibleChipsCount === 0) ||
          selectedHiddenChipsCount === 0);
        label =
          selectedVisibleChipsCount > 0
            ? `+${selectedHiddenChipsCount}`
            : `${selectedHiddenChipsCount} ${this.messages.selected}`;
      }
    }
    return ((0,_index_86faef9c_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-chip", { class: {
        chip: true,
        [CSS$3.chipInvisible]: chipInvisible,
      }, scale: scale, title: label, value: "",
      // eslint-disable-next-line react/jsx-sort-props -- ref should be last so node attrs/props are in sync (see https://github.com/Esri/calcite-design-system/pull/6530)
      ref: setSelectedIndicatorChipEl }, label));
  }
  renderSelectedIndicatorChipCompact() {
    const { compactSelectionDisplay, selectionDisplay, getSelectedItems, scale, selectedHiddenChipsCount, } = this;
    let chipInvisible;
    let label;
    if (compactSelectionDisplay) {
      const selectedItemsCount = getSelectedItems().length;
      if (this.isAllSelected()) {
        chipInvisible = true;
      }
      else if (selectionDisplay === "fit") {
        chipInvisible = !(selectedHiddenChipsCount > 0);
        label = `${selectedHiddenChipsCount || 0}`;
      }
      else if (selectionDisplay === "single") {
        chipInvisible = !(selectedItemsCount > 0);
        label = `${selectedItemsCount}`;
      }
    }
    else {
      chipInvisible = true;
    }
    return ((0,_index_86faef9c_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-chip", { class: {
        chip: true,
        [CSS$3.chipInvisible]: chipInvisible,
      }, scale: scale, title: label, value: "" }, label));
  }
  renderInput() {
    const { guid, disabled, placeholder, selectionMode, selectedItems, open } = this;
    const single = isSingleLike(selectionMode);
    const selectedItem = selectedItems[0];
    const showLabel = !open && single && !!selectedItem;
    return ((0,_index_86faef9c_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: {
        "input-wrap": true,
        "input-wrap--single": single,
      } }, showLabel && ((0,_index_86faef9c_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: {
        label: true,
        "label--icon": !!selectedItem?.icon,
      }, key: "label" }, selectedItem.textLabel)), (0,_index_86faef9c_js__WEBPACK_IMPORTED_MODULE_0__.h)("input", { "aria-activedescendant": this.activeDescendant, "aria-autocomplete": "list", "aria-controls": `${listboxUidPrefix}${guid}`, "aria-label": (0,_label_1c285d41_js__WEBPACK_IMPORTED_MODULE_7__.g)(this), class: {
        input: true,
        "input--single": true,
        "input--transparent": this.activeChipIndex > -1,
        "input--hidden": showLabel,
        "input--icon": !!this.placeholderIcon,
      }, disabled: disabled, id: `${inputUidPrefix}${guid}`, key: "input", onFocus: this.comboboxFocusHandler, onInput: this.inputHandler, placeholder: placeholder, type: "text",
      // eslint-disable-next-line react/jsx-sort-props -- ref should be last so node attrs/props are in sync (see https://github.com/Esri/calcite-design-system/pull/6530)
      ref: (el) => (this.textInput = el) })));
  }
  renderListBoxOptions() {
    return this.filteredItems.map((item) => ((0,_index_86faef9c_js__WEBPACK_IMPORTED_MODULE_0__.h)("li", { "aria-selected": (0,_dom_ed00a585_js__WEBPACK_IMPORTED_MODULE_2__.t)(item.selected), id: item.guid ? `${itemUidPrefix}${item.guid}` : null, role: "option", tabindex: "-1" }, item.textLabel)));
  }
  renderFloatingUIContainer() {
    const { setFloatingEl, setContainerEl, open } = this;
    const classes = {
      [CSS$3.listContainer]: true,
      [_floating_ui_e25cfa90_js__WEBPACK_IMPORTED_MODULE_3__.F.animation]: true,
      [_floating_ui_e25cfa90_js__WEBPACK_IMPORTED_MODULE_3__.F.animationActive]: open,
    };
    return ((0,_index_86faef9c_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { "aria-hidden": "true", class: {
        "floating-ui-container": true,
        "floating-ui-container--active": open,
      },
      // eslint-disable-next-line react/jsx-sort-props -- ref should be last so node attrs/props are in sync (see https://github.com/Esri/calcite-design-system/pull/6530)
      ref: setFloatingEl }, (0,_index_86faef9c_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: classes,
      // eslint-disable-next-line react/jsx-sort-props -- ref should be last so node attrs/props are in sync (see https://github.com/Esri/calcite-design-system/pull/6530)
      ref: setContainerEl }, (0,_index_86faef9c_js__WEBPACK_IMPORTED_MODULE_0__.h)("ul", { class: { list: true, "list--hide": !open } }, (0,_index_86faef9c_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", null)))));
  }
  renderIconStart() {
    const { selectedItems, placeholderIcon, selectionMode, placeholderIconFlipRtl } = this;
    const selectedItem = selectedItems[0];
    const selectedIcon = selectedItem?.icon;
    const singleSelectionMode = isSingleLike(selectionMode);
    const iconAtStart = !this.open && selectedItem
      ? !!selectedIcon && singleSelectionMode
      : !!this.placeholderIcon && (!selectedItem || singleSelectionMode);
    return (iconAtStart && ((0,_index_86faef9c_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: "icon-start" }, (0,_index_86faef9c_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { class: "selected-icon", flipRtl: this.open && selectedItem ? selectedItem.iconFlipRtl : placeholderIconFlipRtl, icon: !this.open && selectedItem ? selectedIcon : placeholderIcon, scale: (0,_component_f94cab72_js__WEBPACK_IMPORTED_MODULE_13__.g)(this.scale) }))));
  }
  renderIconEnd() {
    const { open } = this;
    return ((0,_index_86faef9c_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: "icon-end" }, (0,_index_86faef9c_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { icon: open ? "chevron-up" : "chevron-down", scale: (0,_component_f94cab72_js__WEBPACK_IMPORTED_MODULE_13__.g)(this.scale) })));
  }
  render() {
    const { selectionDisplay, guid, label, open } = this;
    const singleSelectionMode = isSingleLike(this.selectionMode);
    const allSelectionDisplay = selectionDisplay === "all";
    const singleSelectionDisplay = selectionDisplay === "single";
    const fitSelectionDisplay = !singleSelectionMode && selectionDisplay === "fit";
    const isClearable = !this.clearDisabled && this.value?.length > 0;
    return ((0,_index_86faef9c_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_86faef9c_js__WEBPACK_IMPORTED_MODULE_0__.H, { onClick: this.comboboxFocusHandler }, (0,_index_86faef9c_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { "aria-autocomplete": "list", "aria-controls": `${listboxUidPrefix}${guid}`, "aria-expanded": (0,_dom_ed00a585_js__WEBPACK_IMPORTED_MODULE_2__.t)(open), "aria-haspopup": "listbox", "aria-label": (0,_label_1c285d41_js__WEBPACK_IMPORTED_MODULE_7__.g)(this), "aria-live": "polite", "aria-owns": `${listboxUidPrefix}${guid}`, class: {
        wrapper: true,
        "wrapper--single": singleSelectionMode || !this.selectedItems.length,
        "wrapper--active": open,
      }, onClick: this.clickHandler, onKeyDown: this.keyDownHandler, role: "combobox",
      // eslint-disable-next-line react/jsx-sort-props -- ref should be last so node attrs/props are in sync (see https://github.com/Esri/calcite-design-system/pull/6530)
      ref: this.setReferenceEl }, (0,_index_86faef9c_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: {
        "grid-input": true,
        [CSS$3.selectionDisplayFit]: fitSelectionDisplay,
        [CSS$3.selectionDisplaySingle]: singleSelectionDisplay,
      }, ref: this.setChipContainerEl }, this.renderIconStart(), !singleSelectionMode && !singleSelectionDisplay && this.renderChips(), !singleSelectionMode &&
      !allSelectionDisplay && [
      this.renderSelectedIndicatorChip(),
      this.renderSelectedIndicatorChipCompact(),
      this.renderAllSelectedIndicatorChip(),
      this.renderAllSelectedIndicatorChipCompact(),
    ], (0,_index_86faef9c_js__WEBPACK_IMPORTED_MODULE_0__.h)("label", { class: "screen-readers-only", htmlFor: `${inputUidPrefix}${guid}`, id: `${labelUidPrefix}${guid}` }, label), this.renderInput()), isClearable ? ((0,_index_86faef9c_js__WEBPACK_IMPORTED_MODULE_0__.h)(XButton, { disabled: this.disabled, key: "close-button", label: this.messages.clear, scale: this.scale })) : null, this.renderIconEnd()), (0,_index_86faef9c_js__WEBPACK_IMPORTED_MODULE_0__.h)("ul", { "aria-labelledby": `${labelUidPrefix}${guid}`, "aria-multiselectable": "true", class: "screen-readers-only", id: `${listboxUidPrefix}${guid}`, role: "listbox", tabIndex: -1 }, this.renderListBoxOptions()), this.renderFloatingUIContainer(), (0,_index_86faef9c_js__WEBPACK_IMPORTED_MODULE_0__.h)(_form_4876c9e5_js__WEBPACK_IMPORTED_MODULE_4__.H, { component: this })));
  }
  static get assetsDirs() { return ["assets"]; }
  get el() { return (0,_index_86faef9c_js__WEBPACK_IMPORTED_MODULE_0__.g)(this); }
  static get watchers() { return {
    "open": ["openHandler"],
    "disabled": ["handleDisabledChange"],
    "maxItems": ["maxItemsHandler"],
    "overlayPositioning": ["overlayPositioningHandler"],
    "selectionMode": ["handlePropsChange"],
    "scale": ["handlePropsChange"],
    "value": ["valueHandler"],
    "messageOverrides": ["onMessagesChange"],
    "flipPlacements": ["flipPlacementsHandler"],
    "selectedItems": ["selectedItemsHandler"],
    "text": ["textHandler"],
    "effectiveLocale": ["effectiveLocaleChange"]
  }; }
};
Combobox.style = comboboxCss;

const CSS$1 = {
  icon: "icon",
  iconActive: "icon--active",
  iconIndent: "icon--indent",
  custom: "icon--custom",
  dot: "icon--dot",
  single: "label--single",
  label: "label",
  active: "label--active",
  selected: "label--selected",
  title: "title",
  textContainer: "text-container",
};

const comboboxItemCss = "@charset \"UTF-8\";:host([disabled]){cursor:default;-webkit-user-select:none;user-select:none;opacity:var(--calcite-opacity-disabled)}:host([disabled]) *,:host([disabled]) ::slotted(*){pointer-events:none}:host([hidden]){display:none}[hidden]{display:none}.scale--s{font-size:var(--calcite-font-size--2);line-height:1rem;--calcite-combobox-item-spacing-unit-l:0.5rem;--calcite-combobox-item-spacing-unit-s:0.25rem;--calcite-combobox-item-spacing-indent:0.5rem;--calcite-combobox-item-selector-icon-size:1rem}.scale--m{font-size:var(--calcite-font-size--1);line-height:1rem;--calcite-combobox-item-spacing-unit-l:0.75rem;--calcite-combobox-item-spacing-unit-s:0.5rem;--calcite-combobox-item-spacing-indent:0.75rem;--calcite-combobox-item-selector-icon-size:1rem}.scale--l{font-size:var(--calcite-font-size-0);line-height:1.25rem;--calcite-combobox-item-spacing-unit-l:1rem;--calcite-combobox-item-spacing-unit-s:0.625rem;--calcite-combobox-item-spacing-indent:1rem;--calcite-combobox-item-selector-icon-size:1.5rem}.container{--calcite-combobox-item-indent-value:calc(\n    var(--calcite-combobox-item-spacing-indent) * var(--calcite-combobox-item-spacing-indent-multiplier)\n  )}:host(:focus){--tw-shadow:0 0 #0000;--tw-shadow-colored:0 0 #0000;box-shadow:var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)}:host([disabled]) ::slotted([calcite-hydrated][disabled]),:host([disabled]) [calcite-hydrated][disabled]{opacity:1}:host,ul{margin:0px;display:flex;flex-direction:column;padding:0px}:host(:focus),ul:focus{outline:2px solid transparent;outline-offset:2px}.label{position:relative;box-sizing:border-box;display:flex;inline-size:100%;min-inline-size:100%;cursor:pointer;align-items:center;color:var(--calcite-color-text-3);text-decoration-line:none;transition-duration:150ms;transition-timing-function:cubic-bezier(0.4, 0, 0.2, 1);outline-color:transparent;word-wrap:break-word;word-break:break-word;padding-block:var(--calcite-combobox-item-spacing-unit-s);padding-inline:var(--calcite-combobox-item-spacing-unit-l)}:host([disabled]) .label{cursor:default}.label--selected{font-weight:var(--calcite-font-weight-medium);color:var(--calcite-color-text-1)}.label--active{outline:2px solid var(--calcite-color-brand);outline-offset:calc(\n            -2px *\n            calc(\n              1 -\n              2 * clamp(\n                0,\n                var(--calcite-offset-invert-focus),\n                1\n              )\n            )\n          )}.label:hover,.label:active{background-color:var(--calcite-color-foreground-2);color:var(--calcite-color-text-1);text-decoration-line:none;--tw-shadow:0 0 #0000;--tw-shadow-colored:0 0 #0000;box-shadow:var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)}.title{padding-block:0;padding-inline:var(--calcite-combobox-item-spacing-unit-l)}.icon{display:inline-flex;opacity:0;transition-duration:150ms;transition-timing-function:cubic-bezier(0.4, 0, 0.2, 1);color:var(--calcite-color-border-1)}.icon--indent{padding-inline-start:var(--calcite-combobox-item-indent-value)}.icon--custom{margin-block-start:-1px;padding-inline-start:var(--calcite-combobox-item-spacing-unit-l);color:var(--calcite-color-text-3)}.icon--active{color:var(--calcite-color-text-1)}.icon--dot{display:flex;justify-content:center;min-inline-size:var(--calcite-combobox-item-selector-icon-size)}.icon--dot:before{text-align:start;content:\"•\"}.label--active .icon{opacity:1}.label--selected .icon{opacity:1;color:var(--calcite-color-brand)}:host(:hover[disabled]) .icon{opacity:1}";

const ComboboxItem = class {
  constructor(hostRef) {
    (0,_index_86faef9c_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.calciteComboboxItemChange = (0,_index_86faef9c_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "calciteComboboxItemChange", 6);
    this.itemClickHandler = () => {
      this.toggleSelected();
    };
    this.disabled = false;
    this.selected = false;
    this.active = false;
    this.ancestors = undefined;
    this.guid = (0,_guid_21fecfa4_js__WEBPACK_IMPORTED_MODULE_5__.g)();
    this.icon = undefined;
    this.iconFlipRtl = false;
    this.textLabel = undefined;
    this.value = undefined;
    this.filterDisabled = undefined;
    this.selectionMode = "multiple";
    this.scale = "m";
  }
  selectedWatchHandler() {
    this.calciteComboboxItemChange.emit();
  }
  // --------------------------------------------------------------------------
  //
  //  Lifecycle
  //
  // --------------------------------------------------------------------------
  connectedCallback() {
    this.ancestors = getAncestors(this.el);
    (0,_conditionalSlot_f6710875_js__WEBPACK_IMPORTED_MODULE_15__.c)(this);
    (0,_interactive_cbd8a6dc_js__WEBPACK_IMPORTED_MODULE_6__.c)(this);
  }
  disconnectedCallback() {
    (0,_conditionalSlot_f6710875_js__WEBPACK_IMPORTED_MODULE_15__.d)(this);
    (0,_interactive_cbd8a6dc_js__WEBPACK_IMPORTED_MODULE_6__.d)(this);
  }
  componentDidRender() {
    (0,_interactive_cbd8a6dc_js__WEBPACK_IMPORTED_MODULE_6__.u)(this);
  }
  // --------------------------------------------------------------------------
  //
  //  Private Methods
  //
  // --------------------------------------------------------------------------
  toggleSelected() {
    const isSinglePersistSelect = this.selectionMode === "single-persist";
    if (this.disabled || (isSinglePersistSelect && this.selected)) {
      return;
    }
    this.selected = !this.selected;
  }
  // --------------------------------------------------------------------------
  //
  //  Render Methods
  //
  // --------------------------------------------------------------------------
  renderIcon(iconPath) {
    return this.icon ? ((0,_index_86faef9c_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { class: {
        [CSS$1.custom]: !!this.icon,
        [CSS$1.iconActive]: this.icon && this.selected,
        [CSS$1.iconIndent]: true,
      }, flipRtl: this.iconFlipRtl, icon: this.icon || iconPath, key: "icon", scale: (0,_component_f94cab72_js__WEBPACK_IMPORTED_MODULE_13__.g)(this.scale) })) : null;
  }
  renderSelectIndicator(showDot, iconPath) {
    return showDot ? ((0,_index_86faef9c_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: {
        [CSS$1.icon]: true,
        [CSS$1.dot]: true,
        [CSS$1.iconIndent]: true,
      } })) : ((0,_index_86faef9c_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { class: {
        [CSS$1.icon]: true,
        [CSS$1.iconActive]: this.selected,
        [CSS$1.iconIndent]: true,
      }, flipRtl: this.iconFlipRtl, icon: iconPath, key: "indicator", scale: (0,_component_f94cab72_js__WEBPACK_IMPORTED_MODULE_13__.g)(this.scale) }));
  }
  renderChildren() {
    if ((0,_dom_ed00a585_js__WEBPACK_IMPORTED_MODULE_2__.e)(this.el)) {
      return ((0,_index_86faef9c_js__WEBPACK_IMPORTED_MODULE_0__.h)("ul", { key: "default-slot-container" }, (0,_index_86faef9c_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", null)));
    }
    return null;
  }
  render() {
    const isSingleSelect = isSingleLike(this.selectionMode);
    const showDot = isSingleSelect && !this.disabled;
    const defaultIcon = isSingleSelect ? "dot" : "check";
    const iconPath = this.disabled ? "" : defaultIcon;
    const classes = {
      [CSS$1.label]: true,
      [CSS$1.selected]: this.selected,
      [CSS$1.active]: this.active,
      [CSS$1.single]: isSingleSelect,
    };
    const depth = getDepth(this.el);
    return ((0,_index_86faef9c_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_86faef9c_js__WEBPACK_IMPORTED_MODULE_0__.H, { "aria-hidden": "true" }, (0,_index_86faef9c_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: `container scale--${this.scale}`, style: { "--calcite-combobox-item-spacing-indent-multiplier": `${depth}` } }, (0,_index_86faef9c_js__WEBPACK_IMPORTED_MODULE_0__.h)("li", { class: classes, id: this.guid, onClick: this.itemClickHandler }, this.renderSelectIndicator(showDot, iconPath), this.renderIcon(iconPath), (0,_index_86faef9c_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: "title" }, this.textLabel)), this.renderChildren())));
  }
  get el() { return (0,_index_86faef9c_js__WEBPACK_IMPORTED_MODULE_0__.g)(this); }
  static get watchers() { return {
    "selected": ["selectedWatchHandler"]
  }; }
};
ComboboxItem.style = comboboxItemCss;

const CSS = {
  list: "list",
  label: "label",
  title: "title",
};

const comboboxItemGroupCss = ".scale--s{font-size:var(--calcite-font-size--2);line-height:1rem;--calcite-combobox-item-spacing-unit-l:0.5rem;--calcite-combobox-item-spacing-unit-s:0.25rem;--calcite-combobox-item-spacing-indent:0.5rem}.scale--m{font-size:var(--calcite-font-size--1);line-height:1rem;--calcite-combobox-item-spacing-unit-l:0.75rem;--calcite-combobox-item-spacing-unit-s:0.5rem;--calcite-combobox-item-spacing-indent:0.75rem}.scale--l{font-size:var(--calcite-font-size-0);line-height:1.25rem;--calcite-combobox-item-spacing-unit-l:1rem;--calcite-combobox-item-spacing-unit-s:0.75rem;--calcite-combobox-item-spacing-indent:1rem}:host,.list{margin:0px;display:flex;flex-direction:column;padding:0px}:host(:focus),.list:focus{outline:2px solid transparent;outline-offset:2px}.label{box-sizing:border-box;display:flex;inline-size:100%;min-inline-size:0px;max-inline-size:100%;color:var(--calcite-color-text-3)}.title{--calcite-combobox-item-indent-value:calc(\n    var(--calcite-combobox-item-spacing-indent) * var(--calcite-combobox-item-spacing-indent-multiplier)\n  );border:0 solid;display:block;flex:1 1 0%;border-block-end-width:1px;font-weight:var(--calcite-font-weight-bold);color:var(--calcite-color-text-2);word-wrap:break-word;word-break:break-word;border-block-end-color:var(--calcite-color-border-3);padding-block:var(--calcite-combobox-item-spacing-unit-l);padding-inline:var(--calcite-combobox-item-spacing-unit-s);margin-inline-start:var(--calcite-combobox-item-indent-value)}::slotted(calcite-combobox-item-group:not([after-empty-group])){padding-block-start:var(--calcite-combobox-item-spacing-unit-l)}:host([hidden]){display:none}[hidden]{display:none}";

const ComboboxItemGroup = class {
  constructor(hostRef) {
    (0,_index_86faef9c_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.guid = (0,_guid_21fecfa4_js__WEBPACK_IMPORTED_MODULE_5__.g)();
    this.afterEmptyGroup = false;
    this.ancestors = undefined;
    this.label = undefined;
    this.scale = "m";
  }
  // --------------------------------------------------------------------------
  //
  //  Lifecycle
  //
  // --------------------------------------------------------------------------
  connectedCallback() {
    this.ancestors = getAncestors(this.el);
  }
  // --------------------------------------------------------------------------
  //
  //  Render Methods
  //
  // --------------------------------------------------------------------------
  render() {
    const { el, scale } = this;
    const depth = getDepth(el);
    return ((0,_index_86faef9c_js__WEBPACK_IMPORTED_MODULE_0__.h)("ul", { "aria-labelledby": this.guid, class: { [CSS.list]: true, [`scale--${scale}`]: true }, role: "group" }, (0,_index_86faef9c_js__WEBPACK_IMPORTED_MODULE_0__.h)("li", { class: { [CSS.label]: true }, id: this.guid, role: "presentation", style: { "--calcite-combobox-item-spacing-indent-multiplier": `${depth}` } }, (0,_index_86faef9c_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: CSS.title }, this.label)), (0,_index_86faef9c_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", null)));
  }
  get el() { return (0,_index_86faef9c_js__WEBPACK_IMPORTED_MODULE_0__.g)(this); }
};
ComboboxItemGroup.style = comboboxItemGroupCss;



//# sourceMappingURL=calcite-combobox_3.entry.js.map

/***/ }),

/***/ "./node_modules/@esri/calcite-components/dist/esm/component-f94cab72.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@esri/calcite-components/dist/esm/component-f94cab72.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   c: () => (/* binding */ componentOnReady),
/* harmony export */   g: () => (/* binding */ getIconScale)
/* harmony export */ });
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * See https://github.com/Esri/calcite-design-system/blob/main/LICENSE.md for details.
 * v2.0.0
 */
function getIconScale(componentScale) {
  return componentScale === "l" ? "m" : "s";
}
/**
 * This util helps us wait for a component to be ready for both lazy-loading (`dist` output) and non-lazy-loading (`components` output) components.
 *
 * Based on https://github.com/ionic-team/ionic-framework/blob/1a8bd6d/core/src/utils/helpers.ts#L60C1-L79C3
 *
 * @param el - the host element to wait for
 */
async function componentOnReady(el) {
  await (isStencilEl(el)
    ? el.componentOnReady()
    : new Promise((resolve) => requestAnimationFrame(() => resolve())));
}
function isStencilEl(el) {
  return typeof el.componentOnReady === "function";
}



//# sourceMappingURL=component-f94cab72.js.map

/***/ }),

/***/ "./node_modules/@esri/calcite-components/dist/esm/conditionalSlot-f6710875.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@esri/calcite-components/dist/esm/conditionalSlot-f6710875.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   c: () => (/* binding */ connectConditionalSlotComponent),
/* harmony export */   d: () => (/* binding */ disconnectConditionalSlotComponent)
/* harmony export */ });
/* harmony import */ var _index_86faef9c_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-86faef9c.js */ "./node_modules/@esri/calcite-components/dist/esm/index-86faef9c.js");
/* harmony import */ var _observers_71d332db_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./observers-71d332db.js */ "./node_modules/@esri/calcite-components/dist/esm/observers-71d332db.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * See https://github.com/Esri/calcite-design-system/blob/main/LICENSE.md for details.
 * v2.0.0
 */



const observed = new Set();
let mutationObserver;
const observerOptions = { childList: true };
/**
 * Helper to set up a conditional slot component on connectedCallback.
 *
 * @param component
 * @deprecated Use `onSlotchange` event with `slotChangeHasAssignedElement` DOM utility instead.
 *
 * ```
 * <slot onSlotchange={(event) => this.mySlotHasElement = slotChangeHasAssignedElement(event)} />}
 * ```
 */
function connectConditionalSlotComponent(component) {
  if (!mutationObserver) {
    mutationObserver = (0,_observers_71d332db_js__WEBPACK_IMPORTED_MODULE_1__.c)("mutation", processMutations);
  }
  mutationObserver.observe(component.el, observerOptions);
}
/**
 * Helper to tear down a conditional slot component on disconnectedCallback.
 *
 * @param component
 * @deprecated Use `onSlotchange` event with `slotChangeHasAssignedElement` DOM utility instead.
 *
 * ```
 * <slot onSlotchange={(event) => this.mySlotHasElement = slotChangeHasAssignedElement(event)} />}
 * ```
 */
function disconnectConditionalSlotComponent(component) {
  observed.delete(component.el);
  // we explicitly process queued mutations and disconnect and reconnect
  // the observer until MutationObserver gets an `unobserve` method
  // see https://github.com/whatwg/dom/issues/126
  processMutations(mutationObserver.takeRecords());
  mutationObserver.disconnect();
  for (const [element] of observed.entries()) {
    mutationObserver.observe(element, observerOptions);
  }
}
function processMutations(mutations) {
  mutations.forEach(({ target }) => {
    (0,_index_86faef9c_js__WEBPACK_IMPORTED_MODULE_0__.f)(target);
  });
}



//# sourceMappingURL=conditionalSlot-f6710875.js.map

/***/ }),

/***/ "./node_modules/@esri/calcite-components/dist/esm/label-1c285d41.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@esri/calcite-components/dist/esm/label-1c285d41.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ associateExplicitLabelToUnlabeledComponent),
/* harmony export */   b: () => (/* binding */ labelDisconnectedEvent),
/* harmony export */   c: () => (/* binding */ connectLabel),
/* harmony export */   d: () => (/* binding */ disconnectLabel),
/* harmony export */   g: () => (/* binding */ getLabelText),
/* harmony export */   l: () => (/* binding */ labelConnectedEvent)
/* harmony export */ });
/* harmony import */ var _dom_ed00a585_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dom-ed00a585.js */ "./node_modules/@esri/calcite-components/dist/esm/dom-ed00a585.js");
/* harmony import */ var _component_f94cab72_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./component-f94cab72.js */ "./node_modules/@esri/calcite-components/dist/esm/component-f94cab72.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * See https://github.com/Esri/calcite-design-system/blob/main/LICENSE.md for details.
 * v2.0.0
 */



/**
 * Exported for testing purposes only
 *
 * @internal
 */
const labelClickEvent = "calciteInternalLabelClick";
const labelConnectedEvent = "calciteInternalLabelConnected";
const labelDisconnectedEvent = "calciteInternalLabelDisconnected";
const labelTagName = "calcite-label";
const labelToLabelables = new WeakMap();
const onLabelClickMap = new WeakMap();
const onLabelConnectedMap = new WeakMap();
const onLabelDisconnectedMap = new WeakMap();
const unlabeledComponents = new Set();
const findLabelForComponent = (componentEl) => {
  const { id } = componentEl;
  const forLabel = id && (0,_dom_ed00a585_js__WEBPACK_IMPORTED_MODULE_0__.q)(componentEl, { selector: `${labelTagName}[for="${id}"]` });
  if (forLabel) {
    return forLabel;
  }
  const parentLabel = (0,_dom_ed00a585_js__WEBPACK_IMPORTED_MODULE_0__.c)(componentEl, labelTagName);
  if (!parentLabel ||
    // labelable components within other custom elements are not considered labelable
    hasAncestorCustomElements(parentLabel, componentEl)) {
    return null;
  }
  return parentLabel;
};
function hasAncestorCustomElements(label, componentEl) {
  let traversedElements;
  const customElementAncestorCheckEventType = "custom-element-ancestor-check";
  const listener = (event) => {
    event.stopImmediatePropagation();
    const composedPath = event.composedPath();
    traversedElements = composedPath.slice(composedPath.indexOf(componentEl), composedPath.indexOf(label));
  };
  label.addEventListener(customElementAncestorCheckEventType, listener, { once: true });
  componentEl.dispatchEvent(new CustomEvent(customElementAncestorCheckEventType, { composed: true, bubbles: true }));
  label.removeEventListener(customElementAncestorCheckEventType, listener);
  const ancestorCustomElements = traversedElements
    .filter((el) => el !== componentEl && el !== label)
    .filter((el) => el.tagName?.includes("-"));
  return ancestorCustomElements.length > 0;
}
/**
 * Helper to set up label interactions on connectedCallback.
 *
 * @param component
 */
function connectLabel(component) {
  if (!component) {
    return;
  }
  const labelEl = findLabelForComponent(component.el);
  if ((onLabelClickMap.has(labelEl) && labelEl === component.labelEl) ||
    (!labelEl && unlabeledComponents.has(component))) {
    return;
  }
  const boundOnLabelDisconnected = onLabelDisconnected.bind(component);
  if (labelEl) {
    component.labelEl = labelEl;
    const labelables = labelToLabelables.get(labelEl) || [];
    labelables.push(component);
    labelToLabelables.set(labelEl, labelables.sort(sortByDOMOrder));
    if (!onLabelClickMap.has(component.labelEl)) {
      onLabelClickMap.set(component.labelEl, onLabelClick);
      component.labelEl.addEventListener(labelClickEvent, onLabelClick);
    }
    unlabeledComponents.delete(component);
    document.removeEventListener(labelConnectedEvent, onLabelConnectedMap.get(component));
    onLabelDisconnectedMap.set(component, boundOnLabelDisconnected);
    document.addEventListener(labelDisconnectedEvent, boundOnLabelDisconnected);
  }
  else if (!unlabeledComponents.has(component)) {
    boundOnLabelDisconnected();
    document.removeEventListener(labelDisconnectedEvent, onLabelDisconnectedMap.get(component));
  }
}
/**
 * Helper to tear down label interactions on disconnectedCallback on labelable components.
 *
 * @param component
 */
function disconnectLabel(component) {
  if (!component) {
    return;
  }
  unlabeledComponents.delete(component);
  document.removeEventListener(labelConnectedEvent, onLabelConnectedMap.get(component));
  document.removeEventListener(labelDisconnectedEvent, onLabelDisconnectedMap.get(component));
  onLabelConnectedMap.delete(component);
  onLabelDisconnectedMap.delete(component);
  if (!component.labelEl) {
    return;
  }
  const labelables = labelToLabelables.get(component.labelEl);
  if (labelables.length === 1) {
    component.labelEl.removeEventListener(labelClickEvent, onLabelClickMap.get(component.labelEl));
    onLabelClickMap.delete(component.labelEl);
  }
  labelToLabelables.set(component.labelEl, labelables.filter((labelable) => labelable !== component).sort(sortByDOMOrder));
  component.labelEl = null;
}
function sortByDOMOrder(a, b) {
  return (0,_dom_ed00a585_js__WEBPACK_IMPORTED_MODULE_0__.k)(a.el, b.el) ? -1 : 1;
}
/**
 * Helper to get the label text from a component.
 *
 * @param component
 */
function getLabelText(component) {
  return component.label || component.labelEl?.textContent?.trim() || "";
}
function onLabelClick(event) {
  const labelClickTarget = event.detail.sourceEvent.target;
  const labelables = labelToLabelables.get(this);
  const clickedLabelable = labelables.find((labelable) => labelable.el === labelClickTarget);
  const labelableChildClicked = labelables.includes(clickedLabelable);
  if (labelableChildClicked) {
    // no need to forward click as labelable will receive focus
    return;
  }
  const firstLabelable = labelables[0];
  if (firstLabelable.disabled) {
    return;
  }
  firstLabelable.onLabelClick(event);
}
function onLabelConnected() {
  if (unlabeledComponents.has(this)) {
    connectLabel(this);
  }
}
function onLabelDisconnected() {
  unlabeledComponents.add(this);
  const boundOnLabelConnected = onLabelConnectedMap.get(this) || onLabelConnected.bind(this);
  onLabelConnectedMap.set(this, boundOnLabelConnected);
  document.addEventListener(labelConnectedEvent, boundOnLabelConnected);
}
/**
 * Helper to associate an explicit label (i.e., using `for`) with a labelable component that does not have an associated label.
 *
 * @param label - the label element
 */
async function associateExplicitLabelToUnlabeledComponent(label) {
  await (0,_component_f94cab72_js__WEBPACK_IMPORTED_MODULE_1__.c)(label);
  const alreadyLabeled = labelToLabelables.has(label);
  if (alreadyLabeled) {
    return;
  }
  const forComponentEl = label.ownerDocument?.getElementById(label.for);
  if (!forComponentEl) {
    return;
  }
  requestAnimationFrame(() => {
    for (const labelable of unlabeledComponents) {
      if (labelable.el === forComponentEl) {
        connectLabel(labelable);
        break;
      }
    }
  });
}



//# sourceMappingURL=label-1c285d41.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FsY2l0ZS1jb21wb25lbnRzL2NodW5rcy92ZW5kb3JzLW5vZGVfbW9kdWxlc19lc3JpX2NhbGNpdGUtY29tcG9uZW50c19kaXN0X2VzbV9jYWxjaXRlLWNvbWJvYm94XzNfZW50cnlfanMuYnVuZGxlLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQzZHO0FBQzFEO0FBQ2lIO0FBQ3VCO0FBQ25DO0FBQ3pHO0FBQzZFO0FBQzNCO0FBQzRDO0FBQ3REO0FBQ3pCO0FBQ3FCO0FBQ3dDO0FBQy9EO0FBQ0w7QUFDdUU7QUFDN0Y7QUFDRjtBQUNKOztBQUUzQjtBQUNBO0FBQ0EsaUNBQWlDLGVBQWUsSUFBSSxvQkFBb0I7QUFDeEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVMsbURBQWU7QUFDeEI7QUFDQTtBQUNBLGdCQUFnQixtREFBZTtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLDRDQUE0QztBQUMvRCxVQUFVLHFEQUFDLGFBQWE7QUFDeEI7QUFDQSxjQUFjO0FBQ2QsSUFBSSxxREFBQyxtQkFBbUIsa0JBQWtCLDBEQUFZLFNBQVM7QUFDL0Q7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSx1Q0FBdUMsZUFBZSx5QkFBeUIsaUJBQWlCLHdDQUF3QyxtREFBbUQsb0JBQW9CLE1BQU0sa0JBQWtCLGNBQWMseUdBQXlHLFVBQVUsMkJBQTJCLGlCQUFpQixnQkFBZ0IsMkJBQTJCLG1CQUFtQixrQkFBa0IsMkJBQTJCLGlCQUFpQixnQkFBZ0IsVUFBVSxXQUFXLGFBQWEsZUFBZSxnQkFBZ0IscUJBQXFCLG1CQUFtQix1QkFBdUIsa0JBQWtCLGlCQUFpQiw2QkFBNkIsa0NBQWtDLDBC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QUFDQTtBQUNBLDRCQUE0QixtREFBZTtBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLCtCQUErQiwwRkFBMEY7QUFDekg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxXQUFXO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJDQUEyQyxjQUFjLEVBQUUsS0FBSztBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksU0FBUztBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixjQUFjLEVBQUUsUUFBUTtBQUN0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxrREFBa0Q7QUFDOUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMscURBQUMsbUJBQW1CLHVHQUF1RyxjQUFjLEVBQUUsVUFBVSxtREFBbUQsa0NBQWtDLHdJQUF3STtBQUNoWSxLQUFLO0FBQ0w7QUFDQTtBQUNBLFlBQVksNEZBQTRGO0FBQ3hHO0FBQ0EsWUFBWSxxREFBQyxtQkFBbUI7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQSwwQ0FBMEM7QUFDMUM7QUFDQTtBQUNBLFlBQVksNERBQTREO0FBQ3hFO0FBQ0EsWUFBWSxxREFBQyxtQkFBbUI7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPLHlDQUF5QztBQUNoRDtBQUNBO0FBQ0EsWUFBWSx1SkFBdUo7QUFDbks7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixvQkFBb0IsRUFBRSx1QkFBdUI7QUFDaEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLHlCQUF5QjtBQUMzQyxpQkFBaUIsMEJBQTBCLEVBQUUsdUJBQXVCO0FBQ3BFO0FBQ0E7QUFDQSxZQUFZLHFEQUFDLG1CQUFtQjtBQUNoQztBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EsdUNBQXVDO0FBQ3ZDO0FBQ0E7QUFDQSxZQUFZLGdHQUFnRztBQUM1RztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsOEJBQThCO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixtQkFBbUI7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVkscURBQUMsbUJBQW1CO0FBQ2hDO0FBQ0E7QUFDQSxPQUFPLHlDQUF5QztBQUNoRDtBQUNBO0FBQ0EsWUFBWSxrRUFBa0U7QUFDOUU7QUFDQTtBQUNBO0FBQ0EsWUFBWSxxREFBQyxXQUFXO0FBQ3hCO0FBQ0E7QUFDQSxTQUFTLGdCQUFnQixxREFBQyxXQUFXO0FBQ3JDO0FBQ0E7QUFDQSxPQUFPLGdCQUFnQiw0QkFBNEIscURBQUMsWUFBWSxpR0FBaUcsaUJBQWlCLEVBQUUsS0FBSyxpQkFBaUIscURBQVk7QUFDdE47QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU8sNkJBQTZCLGVBQWUsRUFBRSxLQUFLO0FBQzFEO0FBQ0EsMENBQTBDO0FBQzFDO0FBQ0E7QUFDQSw2Q0FBNkMscURBQUMsU0FBUyxpQkFBaUIsbURBQWEsb0NBQW9DLGNBQWMsRUFBRSxVQUFVLDBDQUEwQztBQUM3TDtBQUNBO0FBQ0EsWUFBWSxzQ0FBc0M7QUFDbEQ7QUFDQTtBQUNBLE9BQU8sdURBQVc7QUFDbEIsT0FBTyx1REFBVztBQUNsQjtBQUNBLFlBQVkscURBQUMsVUFBVTtBQUN2QjtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EsMEJBQTBCLEVBQUUscURBQUMsVUFBVTtBQUN2QztBQUNBLDJCQUEyQixFQUFFLHFEQUFDLFNBQVMsU0FBUyxtQ0FBbUMsRUFBRSxxREFBQztBQUN0RjtBQUNBO0FBQ0EsWUFBWSx3RUFBd0U7QUFDcEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLHFEQUFDLFdBQVcscUJBQXFCLEVBQUUscURBQUMsbUJBQW1CLDBMQUEwTCwwREFBWSxjQUFjO0FBQ3ZTO0FBQ0E7QUFDQSxZQUFZLE9BQU87QUFDbkIsWUFBWSxxREFBQyxXQUFXLG1CQUFtQixFQUFFLHFEQUFDLG1CQUFtQixtREFBbUQsMERBQVksY0FBYztBQUM5STtBQUNBO0FBQ0EsWUFBWSxzQ0FBc0M7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVkscURBQUMsQ0FBQyxpREFBSSxJQUFJLG9DQUFvQyxFQUFFLHFEQUFDLFVBQVUsaURBQWlELGlCQUFpQixFQUFFLEtBQUssb0JBQW9CLG1EQUFhLGtEQUFrRCxxREFBWSwrQ0FBK0MsaUJBQWlCLEVBQUUsS0FBSztBQUN0VDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQSxnQ0FBZ0MsRUFBRSxxREFBQyxVQUFVO0FBQzdDO0FBQ0E7QUFDQTtBQUNBLE9BQU8sZ0NBQWdDO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPLHFEQUFDLFlBQVksMENBQTBDLGVBQWUsRUFBRSxLQUFLLFVBQVUsZUFBZSxFQUFFLEtBQUssR0FBRyw4Q0FBOEMscURBQUMsWUFBWSw2RkFBNkYsa0NBQWtDLHFEQUFDLFNBQVMsc0JBQXNCLGVBQWUsRUFBRSxLQUFLLHdFQUF3RSxpQkFBaUIsRUFBRSxLQUFLLGtDQUFrQyxrRUFBa0UscURBQUMsQ0FBQyxnREFBbUIsSUFBSSxpQkFBaUI7QUFDcmxCO0FBQ0EsNEJBQTRCO0FBQzVCLGFBQWEsT0FBTyxxREFBVTtBQUM5QiwwQkFBMEI7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLDRDQUE0QyxrQkFBa0IsZUFBZSx5QkFBeUIsaUJBQWlCLHdDQUF3QyxtREFBbUQsb0JBQW9CLGdCQUFnQixhQUFhLFNBQVMsYUFBYSxVQUFVLHNDQUFzQyxpQkFBaUIsOENBQThDLCtDQUErQyw4Q0FBOEMsZ0RBQWdELFVBQVUsc0NBQXNDLGlCQUFpQiwrQ0FBK0MsOENBQThDLCtDQUErQyxnREFBZ0QsVUFBVSxxQ0FBcUMsb0JBQW9CLDRDQUE0QyxnREFBZ0QsNENBQTRDLGtEQUFrRCxXQUFXLDBKQUEwSixjQUFjLHNCQUFzQiw4QkFBOEIsdUdBQXVHLHlHQUF5RyxVQUFVLFNBQVMsV0FBVyxhQUFhLHNCQUFzQixZQUFZLHVCQUF1Qiw4QkFBOEIsbUJBQW1CLE9BQU8sa0JBQWtCLHNCQUFzQixhQUFhLGlCQUFpQixxQkFBcUIsZUFBZSxtQkFBbUIsa0NBQWtDLDBCQUEwQiwwQkFBMEIsd0RBQXdELDBCQUEwQixxQkFBcUIsc0JBQXNCLDBEQUEwRCwyREFBMkQseUJBQXlCLGVBQWUsaUJBQWlCLDhDQUE4QyxrQ0FBa0MsZUFBZSw2Q0FBNkMsa1BBQWtQLDJCQUEyQixtREFBbUQsa0NBQWtDLDBCQUEwQixzQkFBc0IsOEJBQThCLHVHQUF1RyxPQUFPLGdCQUFnQiwyREFBMkQsTUFBTSxvQkFBb0IsVUFBVSwwQkFBMEIsd0RBQXdELG9DQUFvQyxjQUFjLCtEQUErRCxjQUFjLHdCQUF3QixpRUFBaUUsa0NBQWtDLGNBQWMsa0NBQWtDLFdBQVcsYUFBYSx1QkFBdUIsZ0VBQWdFLGtCQUFrQixpQkFBaUIsY0FBYyxxQkFBcUIsVUFBVSx1QkFBdUIsVUFBVSxpQ0FBaUMsOEJBQThCLFVBQVU7O0FBRTloSDtBQUNBO0FBQ0EsSUFBSSxxREFBZ0I7QUFDcEIscUNBQXFDLHFEQUFXO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLG9EQUFJO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUksZ0VBQStCO0FBQ25DLElBQUksMkRBQWtCO0FBQ3RCO0FBQ0E7QUFDQSxJQUFJLGdFQUFrQztBQUN0QyxJQUFJLDJEQUFxQjtBQUN6QjtBQUNBO0FBQ0EsSUFBSSwyREFBcUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IscURBQUMsbUJBQW1CO0FBQzVDO0FBQ0E7QUFDQTtBQUNBLE9BQU8sOEVBQThFLDBEQUFZLGNBQWM7QUFDL0c7QUFDQTtBQUNBLHNCQUFzQixxREFBQyxXQUFXO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBLFNBQVMsTUFBTSxxREFBQyxtQkFBbUI7QUFDbkM7QUFDQTtBQUNBO0FBQ0EsT0FBTyxzRUFBc0UsMERBQVksY0FBYztBQUN2RztBQUNBO0FBQ0EsUUFBUSxtREFBVTtBQUNsQixjQUFjLHFEQUFDLFNBQVMsK0JBQStCLEVBQUUscURBQUM7QUFDMUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxxREFBQyxDQUFDLGlEQUFJLElBQUksdUJBQXVCLEVBQUUscURBQUMsVUFBVSwyQkFBMkIsV0FBVyxZQUFZLHdEQUF3RCxNQUFNLEtBQUssRUFBRSxxREFBQyxTQUFTLCtEQUErRCw0RUFBNEUscURBQUMsV0FBVyxnQkFBZ0I7QUFDbFc7QUFDQSxhQUFhLE9BQU8scURBQVU7QUFDOUIsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsd0NBQXdDLHNDQUFzQyxpQkFBaUIsOENBQThDLCtDQUErQyw4Q0FBOEMsVUFBVSxzQ0FBc0MsaUJBQWlCLCtDQUErQyw4Q0FBOEMsK0NBQStDLFVBQVUscUNBQXFDLG9CQUFvQiw0Q0FBNEMsK0NBQStDLDRDQUE0QyxZQUFZLFdBQVcsYUFBYSxzQkFBc0IsWUFBWSwwQkFBMEIsOEJBQThCLG1CQUFtQixPQUFPLHNCQUFzQixhQUFhLGlCQUFpQixvQkFBb0IscUJBQXFCLGtDQUFrQyxPQUFPLDBKQUEwSixlQUFlLGNBQWMsWUFBWSwyQkFBMkIsNENBQTRDLGtDQUFrQyxxQkFBcUIsc0JBQXNCLHFEQUFxRCwwREFBMEQsMkRBQTJELDhEQUE4RCxnRUFBZ0UsZ0VBQWdFLGdCQUFnQixhQUFhLFNBQVMsYUFBYTs7QUFFanBEO0FBQ0E7QUFDQSxJQUFJLHFEQUFnQjtBQUNwQixnQkFBZ0Isb0RBQUk7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLFlBQVk7QUFDeEI7QUFDQSxZQUFZLHFEQUFDLFNBQVMsdUNBQXVDLDZCQUE2QixNQUFNLFVBQVUsaUJBQWlCLEVBQUUscURBQUMsU0FBUyxTQUFTLG1CQUFtQixnREFBZ0Qsd0RBQXdELE1BQU0sS0FBSyxFQUFFLHFEQUFDLFdBQVcsa0JBQWtCLGdCQUFnQixxREFBQztBQUN2VTtBQUNBLGFBQWEsT0FBTyxxREFBVTtBQUM5QjtBQUNBOztBQUVpSTs7QUFFakk7Ozs7Ozs7Ozs7Ozs7OztBQ3p3Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFb0Q7O0FBRXBEOzs7Ozs7Ozs7Ozs7Ozs7OztBQzFCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ3VEO0FBQ087O0FBRTlEO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsd0VBQXdFO0FBQy9GO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLHlEQUFjO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLHdFQUF3RTtBQUMvRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLFFBQVE7QUFDL0IsSUFBSSxxREFBVztBQUNmLEdBQUc7QUFDSDs7QUFFeUY7O0FBRXpGOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUN4REE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNrSDtBQUNsRDs7QUFFaEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVSxLQUFLO0FBQ2YseUJBQXlCLG1EQUFpQixnQkFBZ0IsYUFBYSxhQUFhLFFBQVEsR0FBRyxLQUFLO0FBQ3BHO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixtREFBaUM7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEVBQTBFLFlBQVk7QUFDdEYsbUZBQW1GLCtCQUErQjtBQUNsSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLG1EQUFRO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLHlEQUFnQjtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRThLOztBQUU5SyIsInNvdXJjZXMiOlsid2VicGFjazovL2V4Yi1jbGllbnQvLi9ub2RlX21vZHVsZXMvQGVzcmkvY2FsY2l0ZS1jb21wb25lbnRzL2Rpc3QvZXNtL2NhbGNpdGUtY29tYm9ib3hfMy5lbnRyeS5qcyIsIndlYnBhY2s6Ly9leGItY2xpZW50Ly4vbm9kZV9tb2R1bGVzL0Blc3JpL2NhbGNpdGUtY29tcG9uZW50cy9kaXN0L2VzbS9jb21wb25lbnQtZjk0Y2FiNzIuanMiLCJ3ZWJwYWNrOi8vZXhiLWNsaWVudC8uL25vZGVfbW9kdWxlcy9AZXNyaS9jYWxjaXRlLWNvbXBvbmVudHMvZGlzdC9lc20vY29uZGl0aW9uYWxTbG90LWY2NzEwODc1LmpzIiwid2VicGFjazovL2V4Yi1jbGllbnQvLi9ub2RlX21vZHVsZXMvQGVzcmkvY2FsY2l0ZS1jb21wb25lbnRzL2Rpc3QvZXNtL2xhYmVsLTFjMjg1ZDQxLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQWxsIG1hdGVyaWFsIGNvcHlyaWdodCBFU1JJLCBBbGwgUmlnaHRzIFJlc2VydmVkLCB1bmxlc3Mgb3RoZXJ3aXNlIHNwZWNpZmllZC5cbiAqIFNlZSBodHRwczovL2dpdGh1Yi5jb20vRXNyaS9jYWxjaXRlLWRlc2lnbi1zeXN0ZW0vYmxvYi9tYWluL0xJQ0VOU0UubWQgZm9yIGRldGFpbHMuXG4gKiB2Mi4wLjBcbiAqL1xuaW1wb3J0IHsgaCwgciBhcyByZWdpc3Rlckluc3RhbmNlLCBjIGFzIGNyZWF0ZUV2ZW50LCBIIGFzIEhvc3QsIGcgYXMgZ2V0RWxlbWVudCB9IGZyb20gJy4vaW5kZXgtODZmYWVmOWMuanMnO1xuaW1wb3J0IHsgZiBhcyBmaWx0ZXIgfSBmcm9tICcuL2ZpbHRlci0xZjIyNzFiNy5qcyc7XG5pbXBvcnQgeyB6IGFzIG5vZGVMaXN0VG9BcnJheSwgQiBhcyBnZXRFbGVtZW50V2lkdGgsIEMgYXMgZ2V0VGV4dFdpZHRoLCBpIGFzIGlzUHJpbWFyeVBvaW50ZXJCdXR0b24sIHQgYXMgdG9BcmlhQm9vbGVhbiwgZSBhcyBnZXRTbG90dGVkIH0gZnJvbSAnLi9kb20tZWQwMGE1ODUuanMnO1xuaW1wb3J0IHsgZCBhcyBkZWZhdWx0TWVudVBsYWNlbWVudCwgZiBhcyBmaWx0ZXJDb21wdXRlZFBsYWNlbWVudHMsIGMgYXMgY29ubmVjdEZsb2F0aW5nVUksIHIgYXMgcmVwb3NpdGlvbiwgYSBhcyBkaXNjb25uZWN0RmxvYXRpbmdVSSwgRiBhcyBGbG9hdGluZ0NTUyB9IGZyb20gJy4vZmxvYXRpbmctdWktZTI1Y2ZhOTAuanMnO1xuaW1wb3J0IHsgcyBhcyBzdWJtaXRGb3JtLCBjIGFzIGNvbm5lY3RGb3JtLCBhIGFzIGFmdGVyQ29ubmVjdERlZmF1bHRWYWx1ZVNldCwgZCBhcyBkaXNjb25uZWN0Rm9ybSwgSCBhcyBIaWRkZW5Gb3JtSW5wdXRTbG90IH0gZnJvbSAnLi9mb3JtLTQ4NzZjOWU1LmpzJztcbmltcG9ydCB7IGcgYXMgZ3VpZCB9IGZyb20gJy4vZ3VpZC0yMWZlY2ZhNC5qcyc7XG5pbXBvcnQgeyBjIGFzIGNvbm5lY3RJbnRlcmFjdGl2ZSwgdSBhcyB1cGRhdGVIb3N0SW50ZXJhY3Rpb24sIGQgYXMgZGlzY29ubmVjdEludGVyYWN0aXZlIH0gZnJvbSAnLi9pbnRlcmFjdGl2ZS1jYmQ4YTZkYy5qcyc7XG5pbXBvcnQgeyBjIGFzIGNvbm5lY3RMYWJlbCwgZCBhcyBkaXNjb25uZWN0TGFiZWwsIGcgYXMgZ2V0TGFiZWxUZXh0IH0gZnJvbSAnLi9sYWJlbC0xYzI4NWQ0MS5qcyc7XG5pbXBvcnQgeyBiIGFzIGNvbXBvbmVudExvYWRlZCwgYyBhcyBjb21wb25lbnRGb2N1c2FibGUsIHMgYXMgc2V0VXBMb2FkYWJsZUNvbXBvbmVudCwgYSBhcyBzZXRDb21wb25lbnRMb2FkZWQgfSBmcm9tICcuL2xvYWRhYmxlLWIxNzM5NmUwLmpzJztcbmltcG9ydCB7IGMgYXMgY29ubmVjdExvY2FsaXplZCwgZCBhcyBkaXNjb25uZWN0TG9jYWxpemVkIH0gZnJvbSAnLi9sb2NhbGUtNmU3ODNjZjAuanMnO1xuaW1wb3J0IHsgYyBhcyBjcmVhdGVPYnNlcnZlciB9IGZyb20gJy4vb2JzZXJ2ZXJzLTcxZDMzMmRiLmpzJztcbmltcG9ydCB7IG8gYXMgb25Ub2dnbGVPcGVuQ2xvc2VDb21wb25lbnQgfSBmcm9tICcuL29wZW5DbG9zZUNvbXBvbmVudC00OGRiNmRhZi5qcyc7XG5pbXBvcnQgeyBjIGFzIGNvbm5lY3RNZXNzYWdlcywgcyBhcyBzZXRVcE1lc3NhZ2VzLCBkIGFzIGRpc2Nvbm5lY3RNZXNzYWdlcywgdSBhcyB1cGRhdGVNZXNzYWdlcyB9IGZyb20gJy4vdDluLTBiY2RjYTU0LmpzJztcbmltcG9ydCB7IGcgYXMgZ2V0SWNvblNjYWxlIH0gZnJvbSAnLi9jb21wb25lbnQtZjk0Y2FiNzIuanMnO1xuaW1wb3J0IHsgZCBhcyBkZWJvdW5jZSB9IGZyb20gJy4vZGVib3VuY2UtODU5NThiYjEuanMnO1xuaW1wb3J0IHsgYyBhcyBjb25uZWN0Q29uZGl0aW9uYWxTbG90Q29tcG9uZW50LCBkIGFzIGRpc2Nvbm5lY3RDb25kaXRpb25hbFNsb3RDb21wb25lbnQgfSBmcm9tICcuL2NvbmRpdGlvbmFsU2xvdC1mNjcxMDg3NS5qcyc7XG5pbXBvcnQgJy4vcmVzb3VyY2VzLWNmODIzODhjLmpzJztcbmltcG9ydCAnLi9icm93c2VyLWVjZTI5ZGE3LmpzJztcbmltcG9ydCAnLi9rZXktNjFmODJkZGIuanMnO1xuXG5jb25zdCBDb21ib2JveEl0ZW0kMSA9IFwiQ0FMQ0lURS1DT01CT0JPWC1JVEVNXCI7XG5jb25zdCBDb21ib2JveEl0ZW1Hcm91cCQxID0gXCJDQUxDSVRFLUNPTUJPQk9YLUlURU0tR1JPVVBcIjtcbmNvbnN0IENvbWJvYm94Q2hpbGRTZWxlY3RvciA9IGAke0NvbWJvYm94SXRlbSQxfSwgJHtDb21ib2JveEl0ZW1Hcm91cCQxfWA7XG5jb25zdCBDU1MkMyA9IHtcbiAgY2hpcEludmlzaWJsZTogXCJjaGlwLS1pbnZpc2libGVcIixcbiAgc2VsZWN0aW9uRGlzcGxheUZpdDogXCJzZWxlY3Rpb24tZGlzcGxheS1maXRcIixcbiAgc2VsZWN0aW9uRGlzcGxheVNpbmdsZTogXCJzZWxlY3Rpb24tZGlzcGxheS1zaW5nbGVcIixcbiAgbGlzdENvbnRhaW5lcjogXCJsaXN0LWNvbnRhaW5lclwiLFxufTtcblxuZnVuY3Rpb24gZ2V0QW5jZXN0b3JzKGVsZW1lbnQpIHtcbiAgY29uc3QgcGFyZW50ID0gZWxlbWVudC5wYXJlbnRFbGVtZW50Py5jbG9zZXN0KENvbWJvYm94Q2hpbGRTZWxlY3Rvcik7XG4gIGNvbnN0IGdyYW5kcGFyZW50ID0gcGFyZW50Py5wYXJlbnRFbGVtZW50Py5jbG9zZXN0KENvbWJvYm94Q2hpbGRTZWxlY3Rvcik7XG4gIHJldHVybiBbcGFyZW50LCBncmFuZHBhcmVudF0uZmlsdGVyKChlbCkgPT4gZWwpO1xufVxuZnVuY3Rpb24gZ2V0SXRlbUFuY2VzdG9ycyhpdGVtKSB7XG4gIHJldHVybiAoaXRlbS5hbmNlc3RvcnM/LmZpbHRlcigoZWwpID0+IGVsLm5vZGVOYW1lID09PSBcIkNBTENJVEUtQ09NQk9CT1gtSVRFTVwiKSB8fCBbXSk7XG59XG5mdW5jdGlvbiBnZXRJdGVtQ2hpbGRyZW4oaXRlbSkge1xuICByZXR1cm4gbm9kZUxpc3RUb0FycmF5KGl0ZW0ucXVlcnlTZWxlY3RvckFsbChcImNhbGNpdGUtY29tYm9ib3gtaXRlbVwiKSk7XG59XG5mdW5jdGlvbiBoYXNBY3RpdmVDaGlsZHJlbihub2RlKSB7XG4gIGNvbnN0IGl0ZW1zID0gbm9kZUxpc3RUb0FycmF5KG5vZGUucXVlcnlTZWxlY3RvckFsbChcImNhbGNpdGUtY29tYm9ib3gtaXRlbVwiKSk7XG4gIHJldHVybiBpdGVtcy5maWx0ZXIoKGl0ZW0pID0+IGl0ZW0uc2VsZWN0ZWQpLmxlbmd0aCA+IDA7XG59XG5mdW5jdGlvbiBnZXREZXB0aChlbGVtZW50KSB7XG4gIGNvbnN0IHJlc3VsdCA9IGRvY3VtZW50LmV2YWx1YXRlKFwiYW5jZXN0b3I6OmNhbGNpdGUtY29tYm9ib3gtaXRlbSB8IGFuY2VzdG9yOjpjYWxjaXRlLWNvbWJvYm94LWl0ZW0tZ3JvdXBcIiwgZWxlbWVudCwgbnVsbCwgWFBhdGhSZXN1bHQuVU5PUkRFUkVEX05PREVfU05BUFNIT1RfVFlQRSwgbnVsbCk7XG4gIHJldHVybiByZXN1bHQuc25hcHNob3RMZW5ndGg7XG59XG5mdW5jdGlvbiBpc1NpbmdsZUxpa2Uoc2VsZWN0aW9uTW9kZSkge1xuICByZXR1cm4gc2VsZWN0aW9uTW9kZS5pbmNsdWRlcyhcInNpbmdsZVwiKTtcbn1cblxuY29uc3QgQ1NTJDIgPSB7XG4gIGJ1dHRvbjogXCJ4LWJ1dHRvblwiLFxufTtcbmZ1bmN0aW9uIFhCdXR0b24oeyBkaXNhYmxlZCwga2V5LCBsYWJlbCwgb25DbGljaywgcmVmLCBzY2FsZSwgfSkge1xuICByZXR1cm4gKGgoXCJidXR0b25cIiwgeyBcImFyaWEtbGFiZWxcIjogbGFiZWwsIGNsYXNzOiBDU1MkMi5idXR0b24sIGRpc2FibGVkOiBkaXNhYmxlZCwga2V5OiBrZXksIG9uQ2xpY2s6IG9uQ2xpY2ssIHRhYkluZGV4OiAtMSwgdHlwZTogXCJidXR0b25cIiwgXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0L2pzeC1zb3J0LXByb3BzIC0tIHJlZiBzaG91bGQgYmUgbGFzdCBzbyBub2RlIGF0dHJzL3Byb3BzIGFyZSBpbiBzeW5jIChzZWUgaHR0cHM6Ly9naXRodWIuY29tL0VzcmkvY2FsY2l0ZS1kZXNpZ24tc3lzdGVtL3B1bGwvNjUzMClcbiAgICByZWY6IHJlZiB9LFxuICAgIGgoXCJjYWxjaXRlLWljb25cIiwgeyBpY29uOiBcInhcIiwgc2NhbGU6IGdldEljb25TY2FsZShzY2FsZSkgfSkpKTtcbn1cblxuLyoqXG4gKiBEbyBub3QgZWRpdCBkaXJlY3RseVxuICogR2VuZXJhdGVkIG9uIFNhdCwgMDIgRGVjIDIwMjMgMDQ6MDU6MjcgR01UXG4gKi9cbmNvbnN0IGNhbGNpdGVTaXplNDggPSBcIjQ4cHhcIjtcblxuY29uc3QgY29tYm9ib3hDc3MgPSBcIjpob3N0KFtkaXNhYmxlZF0pe2N1cnNvcjpkZWZhdWx0Oy13ZWJraXQtdXNlci1zZWxlY3Q6bm9uZTt1c2VyLXNlbGVjdDpub25lO29wYWNpdHk6dmFyKC0tY2FsY2l0ZS1vcGFjaXR5LWRpc2FibGVkKX06aG9zdChbZGlzYWJsZWRdKSAqLDpob3N0KFtkaXNhYmxlZF0pIDo6c2xvdHRlZCgqKXtwb2ludGVyLWV2ZW50czpub25lfTpob3N0e3Bvc2l0aW9uOnJlbGF0aXZlO2Rpc3BsYXk6YmxvY2t9Omhvc3QoW2Rpc2FibGVkXSkgOjpzbG90dGVkKFtjYWxjaXRlLWh5ZHJhdGVkXVtkaXNhYmxlZF0pLDpob3N0KFtkaXNhYmxlZF0pIFtjYWxjaXRlLWh5ZHJhdGVkXVtkaXNhYmxlZF17b3BhY2l0eToxfTpob3N0KFtzY2FsZT1zXSkgLngtYnV0dG9ue2lubGluZS1zaXplOjFyZW07YmxvY2stc2l6ZToxcmVtfTpob3N0KFtzY2FsZT1tXSkgLngtYnV0dG9ue2lubGluZS1zaXplOjEuNXJlbTtibG9jay1zaXplOjEuNXJlbX06aG9zdChbc2NhbGU9bF0pIC54LWJ1dHRvbntpbmxpbmUtc2l6ZToycmVtO2Jsb2NrLXNpemU6MnJlbX0ueC1idXR0b257bWFyZ2luOjBweDtkaXNwbGF5OmZsZXg7Y3Vyc29yOnBvaW50ZXI7YXBwZWFyYW5jZTpub25lO2FsaWduLWNvbnRlbnQ6Y2VudGVyO2FsaWduLWl0ZW1zOmNlbnRlcjtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyO2FsaWduLXNlbGY6Y2VudGVyO2JvcmRlci13aWR0aDoycHg7YmFja2dyb3VuZC1jb2xvcjp0cmFuc3BhcmVudDtjb2xvcjp2YXIoLS1jYWxjaXRlLWNvbG9yLXRleHQtMyk7b3V0bGluZS1jb2xvcjp0cmFuc3BhcmVudDt0cmFuc2l0aW9uOmFsbCB2YXIoLS1jYWxjaXRlLWFuaW1hdGlvbi10aW1pbmcpIGVhc2UtaW4tb3V0IDBzLCBvdXRsaW5lIDBzLCBvdXRsaW5lLW9mZnNldCAwcztib3JkZXItcmFkaXVzOjUwJTtib3JkZXItY29sb3I6dHJhbnNwYXJlbnQ7YmFja2dyb3VuZC1jb2xvcjp2YXIoLS1jYWxjaXRlLWNvbG9yLWZvcmVncm91bmQtMil9LngtYnV0dG9uOmFjdGl2ZSwueC1idXR0b246aG92ZXJ7Y29sb3I6dmFyKC0tY2FsY2l0ZS1jb2xvci10ZXh0LTEpO2JhY2tncm91bmQtY29sb3I6dmFyKC0tY2FsY2l0ZS1jb2xvci1mb3JlZ3JvdW5kLTMpfS54LWJ1dHRvbjphY3RpdmV7Ym9yZGVyLXN0eWxlOnNvbGlkO2JvcmRlci1jb2xvcjp2YXIoLS1jYWxjaXRlLWNvbG9yLWJyYW5kKX0ueC1idXR0b24gY2FsY2l0ZS1pY29ue2NvbG9yOmluaGVyaXR9Omhvc3QoW3NjYWxlPXNdKXtmb250LXNpemU6dmFyKC0tY2FsY2l0ZS1mb250LXNpemUtLTIpOy0tY2FsY2l0ZS1jb21ib2JveC1pdGVtLXNwYWNpbmctdW5pdC1sOjAuNXJlbTstLWNhbGNpdGUtY29tYm9ib3gtaXRlbS1zcGFjaW5nLXVuaXQtczowLjI1cmVtOy0tY2FsY2l0ZS1jb21ib2JveC1pbnB1dC1oZWlnaHQ6MXJlbTstLWNhbGNpdGUtaW50ZXJuYWwtY29tYm9ib3gtaW5wdXQtbWFyZ2luLWJsb2NrOmNhbGMoMC4yNXJlbSAtIDFweCl9Omhvc3QoW3NjYWxlPXNdKSAueC1idXR0b257bWFyZ2luLWlubGluZTowLjVyZW19Omhvc3QoW3NjYWxlPW1dKXtmb250LXNpemU6dmFyKC0tY2FsY2l0ZS1mb250LXNpemUtLTEpOy0tY2FsY2l0ZS1jb21ib2JveC1pdGVtLXNwYWNpbmctdW5pdC1sOjAuNzVyZW07LS1jYWxjaXRlLWNvbWJvYm94LWl0ZW0tc3BhY2luZy11bml0LXM6MC41cmVtOy0tY2FsY2l0ZS1jb21ib2JveC1pbnB1dC1oZWlnaHQ6MXJlbTstLWNhbGNpdGUtaW50ZXJuYWwtY29tYm9ib3gtaW5wdXQtbWFyZ2luLWJsb2NrOmNhbGMoMC41cmVtIC0gMXB4KX06aG9zdChbc2NhbGU9bV0pIC54LWJ1dHRvbnttYXJnaW4taW5saW5lLWVuZDowLjc1cmVtfTpob3N0KFtzY2FsZT1sXSl7Zm9udC1zaXplOnZhcigtLWNhbGNpdGUtZm9udC1zaXplLTApOy0tY2FsY2l0ZS1jb21ib2JveC1pdGVtLXNwYWNpbmctdW5pdC1sOjFyZW07LS1jYWxjaXRlLWNvbWJvYm94LWl0ZW0tc3BhY2luZy11bml0LXM6MC43NXJlbTstLWNhbGNpdGUtY29tYm9ib3gtaW5wdXQtaGVpZ2h0OjEuNXJlbTstLWNhbGNpdGUtaW50ZXJuYWwtY29tYm9ib3gtaW5wdXQtbWFyZ2luLWJsb2NrOmNhbGMoMC42MjVyZW0gLSAxcHgpfTpob3N0KFtzY2FsZT1sXSkgLngtYnV0dG9ue21hcmdpbi1pbmxpbmUtZW5kOjFyZW19LndyYXBwZXJ7ZGlzcGxheTpmbGV4O2JvcmRlci13aWR0aDoxcHg7Ym9yZGVyLXN0eWxlOnNvbGlkO2JvcmRlci1jb2xvcjp2YXIoLS1jYWxjaXRlLWNvbG9yLWJvcmRlci1pbnB1dCk7YmFja2dyb3VuZC1jb2xvcjp2YXIoLS1jYWxjaXRlLWNvbG9yLWZvcmVncm91bmQtMSk7Y29sb3I6dmFyKC0tY2FsY2l0ZS1jb2xvci10ZXh0LTEpO291dGxpbmUtY29sb3I6dHJhbnNwYXJlbnQ7cGFkZGluZy1ibG9jazpjYWxjKHZhcigtLWNhbGNpdGUtY29tYm9ib3gtaXRlbS1zcGFjaW5nLXVuaXQtcykgLyA0KTtwYWRkaW5nLWlubGluZTp2YXIoLS1jYWxjaXRlLWNvbWJvYm94LWl0ZW0tc3BhY2luZy11bml0LWwpfTpob3N0KDpmb2N1cy13aXRoaW4pIC53cmFwcGVyLC53cmFwcGVyLS1hY3RpdmV7b3V0bGluZToycHggc29saWQgdmFyKC0tY2FsY2l0ZS1jb2xvci1icmFuZCk7b3V0bGluZS1vZmZzZXQ6Y2FsYyhcXG4gICAgICAgICAgICAtMnB4ICpcXG4gICAgICAgICAgICBjYWxjKFxcbiAgICAgICAgICAgICAgMSAtXFxuICAgICAgICAgICAgICAyICogY2xhbXAoXFxuICAgICAgICAgICAgICAgIDAsXFxuICAgICAgICAgICAgICAgIHZhcigtLWNhbGNpdGUtb2Zmc2V0LWludmVydC1mb2N1cyksXFxuICAgICAgICAgICAgICAgIDFcXG4gICAgICAgICAgICAgIClcXG4gICAgICAgICAgICApXFxuICAgICAgICAgICl9Omhvc3QoW3N0YXR1cz1pbnZhbGlkXSkgLndyYXBwZXJ7Ym9yZGVyLWNvbG9yOnZhcigtLWNhbGNpdGUtY29sb3Itc3RhdHVzLWRhbmdlcil9Omhvc3QoW3N0YXR1cz1pbnZhbGlkXTpmb2N1cy13aXRoaW4pIC53cmFwcGVye291dGxpbmU6MnB4IHNvbGlkIHZhcigtLWNhbGNpdGUtY29sb3Itc3RhdHVzLWRhbmdlcik7b3V0bGluZS1vZmZzZXQ6Y2FsYyhcXG4gICAgICAgICAgICAtMnB4ICpcXG4gICAgICAgICAgICBjYWxjKFxcbiAgICAgICAgICAgICAgMSAtXFxuICAgICAgICAgICAgICAyICogY2xhbXAoXFxuICAgICAgICAgICAgICAgIDAsXFxuICAgICAgICAgICAgICAgIHZhcigtLWNhbGNpdGUtb2Zmc2V0LWludmVydC1mb2N1cyksXFxuICAgICAgICAgICAgICAgIDFcXG4gICAgICAgICAgICAgIClcXG4gICAgICAgICAgICApXFxuICAgICAgICAgICl9LndyYXBwZXItLXNpbmdsZXtwYWRkaW5nLWJsb2NrOjA7cGFkZGluZy1pbmxpbmU6dmFyKC0tY2FsY2l0ZS1jb21ib2JveC1pdGVtLXNwYWNpbmctdW5pdC1sKTtjdXJzb3I6cG9pbnRlcjtmbGV4LXdyYXA6bm93cmFwfS5ncmlkLWlucHV0e3Bvc2l0aW9uOnJlbGF0aXZlO2Rpc3BsYXk6ZmxleDtmbGV4LWdyb3c6MTtmbGV4LXdyYXA6d3JhcDthbGlnbi1pdGVtczpjZW50ZXI7b3ZlcmZsb3c6aGlkZGVuO3RleHQtb3ZlcmZsb3c6ZWxsaXBzaXM7d2hpdGUtc3BhY2U6bm93cmFwO3BhZGRpbmc6MHB4O2dhcDp2YXIoLS1jYWxjaXRlLWNvbWJvYm94LWl0ZW0tc3BhY2luZy11bml0LXMpfS5ncmlkLWlucHV0LnNlbGVjdGlvbi1kaXNwbGF5LWZpdCwuZ3JpZC1pbnB1dC5zZWxlY3Rpb24tZGlzcGxheS1zaW5nbGV7ZmxleC13cmFwOm5vd3JhcDtvdmVyZmxvdzpoaWRkZW59LmlucHV0e2ZsZXgtZ3JvdzoxO2FwcGVhcmFuY2U6bm9uZTt0ZXh0LW92ZXJmbG93OmVsbGlwc2lzO2JvcmRlci1zdHlsZTpub25lO2JhY2tncm91bmQtY29sb3I6dHJhbnNwYXJlbnQ7cGFkZGluZzowcHg7Zm9udC1mYW1pbHk6aW5oZXJpdDtjb2xvcjp2YXIoLS1jYWxjaXRlLWNvbG9yLXRleHQtMSk7Zm9udC1zaXplOmluaGVyaXQ7YmxvY2stc2l6ZTp2YXIoLS1jYWxjaXRlLWNvbWJvYm94LWlucHV0LWhlaWdodCk7bGluZS1oZWlnaHQ6dmFyKC0tY2FsY2l0ZS1jb21ib2JveC1pbnB1dC1oZWlnaHQpO2lubGluZS1zaXplOjEwMCU7bWFyZ2luLWJsb2NrLWVuZDp2YXIoLS1jYWxjaXRlLWNvbWJvYm94LWl0ZW0tc3BhY2luZy11bml0LXMpO21pbi1pbmxpbmUtc2l6ZTo0LjgxMjVyZW19LmlucHV0OmZvY3Vze291dGxpbmU6MnB4IHNvbGlkIHRyYW5zcGFyZW50O291dGxpbmUtb2Zmc2V0OjJweH0uaW5wdXQ6cGxhY2Vob2xkZXItc2hvd257dGV4dC1vdmVyZmxvdzplbGxpcHNpc30uaW5wdXQtLXRyYW5zcGFyZW50e29wYWNpdHk6MH0uaW5wdXQtLXNpbmdsZXtwYWRkaW5nOjBweDttYXJnaW4tYmxvY2s6dmFyKC0tY2FsY2l0ZS1pbnRlcm5hbC1jb21ib2JveC1pbnB1dC1tYXJnaW4tYmxvY2spfS53cmFwcGVyLS1hY3RpdmUgLmlucHV0LXNpbmdsZXtjdXJzb3I6dGV4dH0uaW5wdXQtLWhpZGRlbntwb2ludGVyLWV2ZW50czpub25lO2lubGluZS1zaXplOjBweDttaW4taW5saW5lLXNpemU6MHB4O29wYWNpdHk6MH0uaW5wdXQtLWljb257cGFkZGluZy1ibG9jazowO3BhZGRpbmctaW5saW5lOnZhcigtLWNhbGNpdGUtY29tYm9ib3gtaXRlbS1zcGFjaW5nLXVuaXQtcyl9Omhvc3QoW3NjYWxlPW1dKSAuaW5wdXQtLWljb24sOmhvc3QoW3NjYWxlPWxdKSAuaW5wdXQtLWljb257cGFkZGluZy1pbmxpbmU6MC4yNXJlbX0uaW5wdXQtd3JhcHtkaXNwbGF5OmZsZXg7ZmxleC1ncm93OjE7YWxpZ24taXRlbXM6Y2VudGVyfS5pbnB1dC13cmFwLS1zaW5nbGV7ZmxleDoxIDEgMCU7b3ZlcmZsb3c6aGlkZGVufS5sYWJlbHtwb2ludGVyLWV2ZW50czpub25lO2Rpc3BsYXk6ZmxleDttYXgtaW5saW5lLXNpemU6MTAwJTtmbGV4OjEgMSBhdXRvO292ZXJmbG93OmhpZGRlbjt0ZXh0LW92ZXJmbG93OmVsbGlwc2lzO3doaXRlLXNwYWNlOm5vd3JhcDtwYWRkaW5nOjBweDtmb250LXdlaWdodDp2YXIoLS1jYWxjaXRlLWZvbnQtd2VpZ2h0LW5vcm1hbCk7YmxvY2stc2l6ZTp2YXIoLS1jYWxjaXRlLWNvbWJvYm94LWlucHV0LWhlaWdodCk7bGluZS1oZWlnaHQ6dmFyKC0tY2FsY2l0ZS1jb21ib2JveC1pbnB1dC1oZWlnaHQpfS5sYWJlbC0taWNvbntwYWRkaW5nLWlubGluZTp2YXIoLS1jYWxjaXRlLWNvbWJvYm94LWl0ZW0tc3BhY2luZy11bml0LWwpfS5pY29uLWVuZCwuaWNvbi1zdGFydHtkaXNwbGF5OmZsZXg7Y3Vyc29yOnBvaW50ZXI7YWxpZ24taXRlbXM6Y2VudGVyfS5pY29uLWVuZHtmbGV4Om5vbmV9LmZsb2F0aW5nLXVpLWNvbnRhaW5lcnstLWNhbGNpdGUtZmxvYXRpbmctdWktei1pbmRleDp2YXIoLS1jYWxjaXRlLXotaW5kZXgtZHJvcGRvd24pO2Rpc3BsYXk6YmxvY2s7cG9zaXRpb246YWJzb2x1dGU7ei1pbmRleDp2YXIoLS1jYWxjaXRlLWZsb2F0aW5nLXVpLXotaW5kZXgpO3Zpc2liaWxpdHk6aGlkZGVufS5mbG9hdGluZy11aS1jb250YWluZXIgLmNhbGNpdGUtZmxvYXRpbmctdWktYW5pbXtwb3NpdGlvbjpyZWxhdGl2ZTt0cmFuc2l0aW9uOnZhcigtLWNhbGNpdGUtZmxvYXRpbmctdWktdHJhbnNpdGlvbik7dHJhbnNpdGlvbi1wcm9wZXJ0eTp0cmFuc2Zvcm0sIHZpc2liaWxpdHksIG9wYWNpdHk7b3BhY2l0eTowO2JveC1zaGFkb3c6MCAwIDE2cHggMCByZ2JhKDAsIDAsIDAsIDAuMTYpO3otaW5kZXg6dmFyKC0tY2FsY2l0ZS16LWluZGV4KTtib3JkZXItcmFkaXVzOjAuMjVyZW19LmZsb2F0aW5nLXVpLWNvbnRhaW5lcltkYXRhLXBsYWNlbWVudF49Ym90dG9tXSAuY2FsY2l0ZS1mbG9hdGluZy11aS1hbmlte3RyYW5zZm9ybTp0cmFuc2xhdGVZKC01cHgpfS5mbG9hdGluZy11aS1jb250YWluZXJbZGF0YS1wbGFjZW1lbnRePXRvcF0gLmNhbGNpdGUtZmxvYXRpbmctdWktYW5pbXt0cmFuc2Zvcm06dHJhbnNsYXRlWSg1cHgpfS5mbG9hdGluZy11aS1jb250YWluZXJbZGF0YS1wbGFjZW1lbnRePWxlZnRdIC5jYWxjaXRlLWZsb2F0aW5nLXVpLWFuaW17dHJhbnNmb3JtOnRyYW5zbGF0ZVgoNXB4KX0uZmxvYXRpbmctdWktY29udGFpbmVyW2RhdGEtcGxhY2VtZW50Xj1yaWdodF0gLmNhbGNpdGUtZmxvYXRpbmctdWktYW5pbXt0cmFuc2Zvcm06dHJhbnNsYXRlWCgtNXB4KX0uZmxvYXRpbmctdWktY29udGFpbmVyW2RhdGEtcGxhY2VtZW50XSAuY2FsY2l0ZS1mbG9hdGluZy11aS1hbmltLS1hY3RpdmV7b3BhY2l0eToxO3RyYW5zZm9ybTp0cmFuc2xhdGUoMCl9LmZsb2F0aW5nLXVpLWNvbnRhaW5lci0tYWN0aXZle3Zpc2liaWxpdHk6dmlzaWJsZX1AbWVkaWEgKGZvcmNlZC1jb2xvcnM6IGFjdGl2ZSl7LndyYXBwZXIsLmZsb2F0aW5nLXVpLWNvbnRhaW5lci0tYWN0aXZle2JvcmRlcjoxcHggc29saWQgY2FudmFzVGV4dH19LnNjcmVlbi1yZWFkZXJzLW9ubHl7cG9zaXRpb246YWJzb2x1dGU7aW5saW5lLXNpemU6MXB4O2Jsb2NrLXNpemU6MXB4O3BhZGRpbmc6MDttYXJnaW46LTFweDtvdmVyZmxvdzpoaWRkZW47Y2xpcDpyZWN0KDAsIDAsIDAsIDApO3doaXRlLXNwYWNlOm5vd3JhcDtib3JkZXItd2lkdGg6MH0ubGlzdC1jb250YWluZXJ7bWF4LWJsb2NrLXNpemU6NDV2aDtvdmVyZmxvdy15OmF1dG87YmFja2dyb3VuZC1jb2xvcjp2YXIoLS1jYWxjaXRlLWNvbG9yLWZvcmVncm91bmQtMSk7aW5saW5lLXNpemU6dmFyKC0tY2FsY2l0ZS1kcm9wZG93bi13aWR0aCl9Lmxpc3R7bWFyZ2luOjBweDtkaXNwbGF5OmJsb2NrO3BhZGRpbmc6MHB4fS5saXN0LS1oaWRle2Jsb2NrLXNpemU6MHB4O292ZXJmbG93OmhpZGRlbn1jYWxjaXRlLWNoaXB7LS1jYWxjaXRlLWFuaW1hdGlvbi10aW1pbmc6MH0uY2hpcHttYXJnaW4tYmxvY2s6Y2FsYyh2YXIoLS1jYWxjaXRlLWNvbWJvYm94LWl0ZW0tc3BhY2luZy11bml0LXMpIC8gNCk7bWF4LWlubGluZS1zaXplOjEwMCV9LmNoaXAtLWFjdGl2ZXtiYWNrZ3JvdW5kLWNvbG9yOnZhcigtLWNhbGNpdGUtY29sb3ItZm9yZWdyb3VuZC0zKX0uY2hpcC0taW52aXNpYmxle3Zpc2liaWxpdHk6aGlkZGVuO3Bvc2l0aW9uOmFic29sdXRlfS5pdGVte2Rpc3BsYXk6YmxvY2t9OjpzbG90dGVkKGlucHV0W3Nsb3Q9aGlkZGVuLWZvcm0taW5wdXRdKXttYXJnaW46MCAhaW1wb3J0YW50O29wYWNpdHk6MCAhaW1wb3J0YW50O291dGxpbmU6bm9uZSAhaW1wb3J0YW50O3BhZGRpbmc6MCAhaW1wb3J0YW50O3Bvc2l0aW9uOmFic29sdXRlICFpbXBvcnRhbnQ7aW5zZXQ6MCAhaW1wb3J0YW50O3RyYW5zZm9ybTpub25lICFpbXBvcnRhbnQ7LXdlYmtpdC1hcHBlYXJhbmNlOm5vbmUgIWltcG9ydGFudDt6LWluZGV4Oi0xICFpbXBvcnRhbnR9Omhvc3QoW2hpZGRlbl0pe2Rpc3BsYXk6bm9uZX1baGlkZGVuXXtkaXNwbGF5Om5vbmV9OjpzbG90dGVkKGNhbGNpdGUtY29tYm9ib3gtaXRlbS1ncm91cDpub3QoOmZpcnN0LWNoaWxkKSl7cGFkZGluZy1ibG9jay1zdGFydDp2YXIoLS1jYWxjaXRlLWNvbWJvYm94LWl0ZW0tc3BhY2luZy11bml0LWwpfVwiO1xuXG5jb25zdCBpc0dyb3VwID0gKGVsKSA9PiBlbC50YWdOYW1lID09PSBDb21ib2JveEl0ZW1Hcm91cCQxO1xuY29uc3QgaXRlbVVpZFByZWZpeCA9IFwiY29tYm9ib3gtaXRlbS1cIjtcbmNvbnN0IGNoaXBVaWRQcmVmaXggPSBcImNvbWJvYm94LWNoaXAtXCI7XG5jb25zdCBsYWJlbFVpZFByZWZpeCA9IFwiY29tYm9ib3gtbGFiZWwtXCI7XG5jb25zdCBsaXN0Ym94VWlkUHJlZml4ID0gXCJjb21ib2JveC1saXN0Ym94LVwiO1xuY29uc3QgaW5wdXRVaWRQcmVmaXggPSBcImNvbWJvYm94LWlucHV0LVwiO1xuY29uc3QgQ29tYm9ib3ggPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKGhvc3RSZWYpIHtcbiAgICByZWdpc3Rlckluc3RhbmNlKHRoaXMsIGhvc3RSZWYpO1xuICAgIHRoaXMuY2FsY2l0ZUNvbWJvYm94Q2hhbmdlID0gY3JlYXRlRXZlbnQodGhpcywgXCJjYWxjaXRlQ29tYm9ib3hDaGFuZ2VcIiwgNik7XG4gICAgdGhpcy5jYWxjaXRlQ29tYm9ib3hGaWx0ZXJDaGFuZ2UgPSBjcmVhdGVFdmVudCh0aGlzLCBcImNhbGNpdGVDb21ib2JveEZpbHRlckNoYW5nZVwiLCA2KTtcbiAgICB0aGlzLmNhbGNpdGVDb21ib2JveENoaXBDbG9zZSA9IGNyZWF0ZUV2ZW50KHRoaXMsIFwiY2FsY2l0ZUNvbWJvYm94Q2hpcENsb3NlXCIsIDYpO1xuICAgIHRoaXMuY2FsY2l0ZUNvbWJvYm94QmVmb3JlQ2xvc2UgPSBjcmVhdGVFdmVudCh0aGlzLCBcImNhbGNpdGVDb21ib2JveEJlZm9yZUNsb3NlXCIsIDYpO1xuICAgIHRoaXMuY2FsY2l0ZUNvbWJvYm94Q2xvc2UgPSBjcmVhdGVFdmVudCh0aGlzLCBcImNhbGNpdGVDb21ib2JveENsb3NlXCIsIDYpO1xuICAgIHRoaXMuY2FsY2l0ZUNvbWJvYm94QmVmb3JlT3BlbiA9IGNyZWF0ZUV2ZW50KHRoaXMsIFwiY2FsY2l0ZUNvbWJvYm94QmVmb3JlT3BlblwiLCA2KTtcbiAgICB0aGlzLmNhbGNpdGVDb21ib2JveE9wZW4gPSBjcmVhdGVFdmVudCh0aGlzLCBcImNhbGNpdGVDb21ib2JveE9wZW5cIiwgNik7XG4gICAgdGhpcy5wbGFjZW1lbnQgPSBkZWZhdWx0TWVudVBsYWNlbWVudDtcbiAgICB0aGlzLmludGVybmFsVmFsdWVDaGFuZ2VGbGFnID0gZmFsc2U7XG4gICAgdGhpcy50ZXh0SW5wdXQgPSBudWxsO1xuICAgIHRoaXMubXV0YXRpb25PYnNlcnZlciA9IGNyZWF0ZU9ic2VydmVyKFwibXV0YXRpb25cIiwgKCkgPT4gdGhpcy51cGRhdGVJdGVtcygpKTtcbiAgICB0aGlzLnJlc2l6ZU9ic2VydmVyID0gY3JlYXRlT2JzZXJ2ZXIoXCJyZXNpemVcIiwgKCkgPT4ge1xuICAgICAgdGhpcy5zZXRNYXhTY3JvbGxlckhlaWdodCgpO1xuICAgICAgdGhpcy5yZWZyZXNoU2VsZWN0aW9uRGlzcGxheSgpO1xuICAgIH0pO1xuICAgIHRoaXMuZ3VpZCA9IGd1aWQoKTtcbiAgICB0aGlzLmlucHV0SGVpZ2h0ID0gMDtcbiAgICB0aGlzLmlnbm9yZVNlbGVjdGVkRXZlbnRzRmxhZyA9IGZhbHNlO1xuICAgIHRoaXMub3BlblRyYW5zaXRpb25Qcm9wID0gXCJvcGFjaXR5XCI7XG4gICAgdGhpcy5zZXRGaWx0ZXJlZFBsYWNlbWVudHMgPSAoKSA9PiB7XG4gICAgICBjb25zdCB7IGVsLCBmbGlwUGxhY2VtZW50cyB9ID0gdGhpcztcbiAgICAgIHRoaXMuZmlsdGVyZWRGbGlwUGxhY2VtZW50cyA9IGZsaXBQbGFjZW1lbnRzXG4gICAgICAgID8gZmlsdGVyQ29tcHV0ZWRQbGFjZW1lbnRzKGZsaXBQbGFjZW1lbnRzLCBlbClcbiAgICAgICAgOiBudWxsO1xuICAgIH07XG4gICAgdGhpcy5nZXRWYWx1ZSA9ICgpID0+IHtcbiAgICAgIGNvbnN0IGl0ZW1zID0gdGhpcy5zZWxlY3RlZEl0ZW1zLm1hcCgoaXRlbSkgPT4gaXRlbT8udmFsdWU/LnRvU3RyaW5nKCkpO1xuICAgICAgcmV0dXJuIGl0ZW1zPy5sZW5ndGggPyAoaXRlbXMubGVuZ3RoID4gMSA/IGl0ZW1zIDogaXRlbXNbMF0pIDogXCJcIjtcbiAgICB9O1xuICAgIHRoaXMub25MYWJlbENsaWNrID0gKCkgPT4ge1xuICAgICAgdGhpcy5zZXRGb2N1cygpO1xuICAgIH07XG4gICAgdGhpcy5rZXlEb3duSGFuZGxlciA9IChldmVudCkgPT4ge1xuICAgICAgY29uc3QgeyBrZXkgfSA9IGV2ZW50O1xuICAgICAgc3dpdGNoIChrZXkpIHtcbiAgICAgICAgY2FzZSBcIlRhYlwiOlxuICAgICAgICAgIHRoaXMuYWN0aXZlQ2hpcEluZGV4ID0gLTE7XG4gICAgICAgICAgdGhpcy5hY3RpdmVJdGVtSW5kZXggPSAtMTtcbiAgICAgICAgICBpZiAodGhpcy5hbGxvd0N1c3RvbVZhbHVlcyAmJiB0aGlzLnRleHQpIHtcbiAgICAgICAgICAgIHRoaXMuYWRkQ3VzdG9tQ2hpcCh0aGlzLnRleHQsIHRydWUpO1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSBpZiAodGhpcy5vcGVuKSB7XG4gICAgICAgICAgICB0aGlzLm9wZW4gPSBmYWxzZTtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2UgaWYgKCF0aGlzLmFsbG93Q3VzdG9tVmFsdWVzICYmIHRoaXMudGV4dCkge1xuICAgICAgICAgICAgdGhpcy5jbGVhcklucHV0VmFsdWUoKTtcbiAgICAgICAgICAgIHRoaXMuZmlsdGVySXRlbXMoXCJcIik7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUFjdGl2ZUl0ZW1JbmRleCgtMSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwiQXJyb3dMZWZ0XCI6XG4gICAgICAgICAgdGhpcy5wcmV2aW91c0NoaXAoKTtcbiAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwiQXJyb3dSaWdodFwiOlxuICAgICAgICAgIHRoaXMubmV4dENoaXAoKTtcbiAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwiQXJyb3dVcFwiOlxuICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgaWYgKHRoaXMub3Blbikge1xuICAgICAgICAgICAgdGhpcy5zaGlmdEFjdGl2ZUl0ZW1JbmRleCgtMSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICghdGhpcy5jb21ib2JveEluVmlld3BvcnQoKSkge1xuICAgICAgICAgICAgdGhpcy5lbC5zY3JvbGxJbnRvVmlldygpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcIkFycm93RG93blwiOlxuICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgaWYgKHRoaXMub3Blbikge1xuICAgICAgICAgICAgdGhpcy5zaGlmdEFjdGl2ZUl0ZW1JbmRleCgxKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLm9wZW4gPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5lbnN1cmVSZWNlbnRTZWxlY3RlZEl0ZW1Jc0FjdGl2ZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoIXRoaXMuY29tYm9ib3hJblZpZXdwb3J0KCkpIHtcbiAgICAgICAgICAgIHRoaXMuZWwuc2Nyb2xsSW50b1ZpZXcoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCIgXCI6XG4gICAgICAgICAgaWYgKCF0aGlzLnRleHRJbnB1dC52YWx1ZSkge1xuICAgICAgICAgICAgaWYgKCF0aGlzLm9wZW4pIHtcbiAgICAgICAgICAgICAgdGhpcy5vcGVuID0gdHJ1ZTtcbiAgICAgICAgICAgICAgdGhpcy5zaGlmdEFjdGl2ZUl0ZW1JbmRleCgxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwiSG9tZVwiOlxuICAgICAgICAgIGlmICghdGhpcy5vcGVuKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgdGhpcy51cGRhdGVBY3RpdmVJdGVtSW5kZXgoMCk7XG4gICAgICAgICAgdGhpcy5zY3JvbGxUb0FjdGl2ZUl0ZW0oKTtcbiAgICAgICAgICBpZiAoIXRoaXMuY29tYm9ib3hJblZpZXdwb3J0KCkpIHtcbiAgICAgICAgICAgIHRoaXMuZWwuc2Nyb2xsSW50b1ZpZXcoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJFbmRcIjpcbiAgICAgICAgICBpZiAoIXRoaXMub3Blbikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIHRoaXMudXBkYXRlQWN0aXZlSXRlbUluZGV4KHRoaXMuZmlsdGVyZWRJdGVtcy5sZW5ndGggLSAxKTtcbiAgICAgICAgICB0aGlzLnNjcm9sbFRvQWN0aXZlSXRlbSgpO1xuICAgICAgICAgIGlmICghdGhpcy5jb21ib2JveEluVmlld3BvcnQoKSkge1xuICAgICAgICAgICAgdGhpcy5lbC5zY3JvbGxJbnRvVmlldygpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcIkVzY2FwZVwiOlxuICAgICAgICAgIGlmICghdGhpcy5jbGVhckRpc2FibGVkICYmICF0aGlzLm9wZW4pIHtcbiAgICAgICAgICAgIHRoaXMuY2xlYXJWYWx1ZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLm9wZW4gPSBmYWxzZTtcbiAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwiRW50ZXJcIjpcbiAgICAgICAgICBpZiAodGhpcy5hY3RpdmVJdGVtSW5kZXggPiAtMSkge1xuICAgICAgICAgICAgdGhpcy50b2dnbGVTZWxlY3Rpb24odGhpcy5maWx0ZXJlZEl0ZW1zW3RoaXMuYWN0aXZlSXRlbUluZGV4XSk7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIGlmICh0aGlzLmFjdGl2ZUNoaXBJbmRleCA+IC0xKSB7XG4gICAgICAgICAgICB0aGlzLnJlbW92ZUFjdGl2ZUNoaXAoKTtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2UgaWYgKHRoaXMuYWxsb3dDdXN0b21WYWx1ZXMgJiYgdGhpcy50ZXh0KSB7XG4gICAgICAgICAgICB0aGlzLmFkZEN1c3RvbUNoaXAodGhpcy50ZXh0LCB0cnVlKTtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2UgaWYgKCFldmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICAgICAgICBpZiAoc3VibWl0Rm9ybSh0aGlzKSkge1xuICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcIkRlbGV0ZVwiOlxuICAgICAgICBjYXNlIFwiQmFja3NwYWNlXCI6XG4gICAgICAgICAgaWYgKHRoaXMuYWN0aXZlQ2hpcEluZGV4ID4gLTEpIHtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICB0aGlzLnJlbW92ZUFjdGl2ZUNoaXAoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSBpZiAoIXRoaXMudGV4dCAmJiB0aGlzLmlzTXVsdGkoKSkge1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlTGFzdENoaXAoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfTtcbiAgICB0aGlzLnRvZ2dsZUNsb3NlRW5kID0gKCkgPT4ge1xuICAgICAgdGhpcy5vcGVuID0gZmFsc2U7XG4gICAgICB0aGlzLmVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJjYWxjaXRlQ29tYm9ib3hDbG9zZVwiLCB0aGlzLnRvZ2dsZUNsb3NlRW5kKTtcbiAgICB9O1xuICAgIHRoaXMudG9nZ2xlT3BlbkVuZCA9ICgpID0+IHtcbiAgICAgIHRoaXMub3BlbiA9IGZhbHNlO1xuICAgICAgdGhpcy5lbC5yZW1vdmVFdmVudExpc3RlbmVyKFwiY2FsY2l0ZUNvbWJvYm94T3BlblwiLCB0aGlzLnRvZ2dsZU9wZW5FbmQpO1xuICAgIH07XG4gICAgdGhpcy5zZXRNYXhTY3JvbGxlckhlaWdodCA9IGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHsgbGlzdENvbnRhaW5lckVsLCBvcGVuLCByZWZlcmVuY2VFbCB9ID0gdGhpcztcbiAgICAgIGlmICghbGlzdENvbnRhaW5lckVsIHx8ICFvcGVuKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGF3YWl0IHRoaXMucmVwb3NpdGlvbih0cnVlKTtcbiAgICAgIGNvbnN0IG1heFNjcm9sbGVySGVpZ2h0ID0gdGhpcy5nZXRNYXhTY3JvbGxlckhlaWdodCgpO1xuICAgICAgbGlzdENvbnRhaW5lckVsLnN0eWxlLm1heEhlaWdodCA9IG1heFNjcm9sbGVySGVpZ2h0ID4gMCA/IGAke21heFNjcm9sbGVySGVpZ2h0fXB4YCA6IFwiXCI7XG4gICAgICBsaXN0Q29udGFpbmVyRWwuc3R5bGUubWluV2lkdGggPSBgJHtyZWZlcmVuY2VFbC5jbGllbnRXaWR0aH1weGA7XG4gICAgICBhd2FpdCB0aGlzLnJlcG9zaXRpb24odHJ1ZSk7XG4gICAgfTtcbiAgICB0aGlzLmNhbGNpdGVDaGlwQ2xvc2VIYW5kbGVyID0gKGNvbWJvYm94SXRlbSkgPT4ge1xuICAgICAgdGhpcy5vcGVuID0gZmFsc2U7XG4gICAgICBjb25zdCBzZWxlY3Rpb24gPSB0aGlzLml0ZW1zLmZpbmQoKGl0ZW0pID0+IGl0ZW0gPT09IGNvbWJvYm94SXRlbSk7XG4gICAgICBpZiAoc2VsZWN0aW9uKSB7XG4gICAgICAgIHRoaXMudG9nZ2xlU2VsZWN0aW9uKHNlbGVjdGlvbiwgZmFsc2UpO1xuICAgICAgfVxuICAgICAgdGhpcy5jYWxjaXRlQ29tYm9ib3hDaGlwQ2xvc2UuZW1pdCgpO1xuICAgIH07XG4gICAgdGhpcy5jbGlja0hhbmRsZXIgPSAoZXZlbnQpID0+IHtcbiAgICAgIGNvbnN0IGNvbXBvc2VkUGF0aCA9IGV2ZW50LmNvbXBvc2VkUGF0aCgpO1xuICAgICAgaWYgKGNvbXBvc2VkUGF0aC5zb21lKChub2RlKSA9PiBub2RlLnRhZ05hbWUgPT09IFwiQ0FMQ0lURS1DSElQXCIpKSB7XG4gICAgICAgIHRoaXMub3BlbiA9IGZhbHNlO1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoY29tcG9zZWRQYXRoLnNvbWUoKG5vZGUpID0+IG5vZGUuY2xhc3NMaXN0Py5jb250YWlucyhDU1MkMi5idXR0b24pKSkge1xuICAgICAgICB0aGlzLmNsZWFyVmFsdWUoKTtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdGhpcy5vcGVuID0gIXRoaXMub3BlbjtcbiAgICAgIHRoaXMuZW5zdXJlUmVjZW50U2VsZWN0ZWRJdGVtSXNBY3RpdmUoKTtcbiAgICB9O1xuICAgIHRoaXMucmVmcmVzaFNlbGVjdGlvbkRpc3BsYXkgPSBhc3luYyAoKSA9PiB7XG4gICAgICBhd2FpdCBjb21wb25lbnRMb2FkZWQodGhpcyk7XG4gICAgICBpZiAoaXNTaW5nbGVMaWtlKHRoaXMuc2VsZWN0aW9uTW9kZSkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKCF0aGlzLnRleHRJbnB1dCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBjb25zdCB7IGFsbFNlbGVjdGVkSW5kaWNhdG9yQ2hpcEVsLCBjaGlwQ29udGFpbmVyRWwsIHNlbGVjdGlvbkRpc3BsYXksIHBsYWNlaG9sZGVyLCBzZWxlY3RlZEluZGljYXRvckNoaXBFbCwgdGV4dElucHV0LCB9ID0gdGhpcztcbiAgICAgIGNvbnN0IGNoaXBDb250YWluZXJFbEdhcCA9IHBhcnNlSW50KGdldENvbXB1dGVkU3R5bGUoY2hpcENvbnRhaW5lckVsKS5nYXAucmVwbGFjZShcInB4XCIsIFwiXCIpKTtcbiAgICAgIGNvbnN0IGNoaXBDb250YWluZXJFbFdpZHRoID0gZ2V0RWxlbWVudFdpZHRoKGNoaXBDb250YWluZXJFbCk7XG4gICAgICBjb25zdCB7IGZvbnRTaXplLCBmb250RmFtaWx5IH0gPSBnZXRDb21wdXRlZFN0eWxlKHRleHRJbnB1dCk7XG4gICAgICBjb25zdCBpbnB1dFRleHRXaWR0aCA9IGdldFRleHRXaWR0aChwbGFjZWhvbGRlciwgYCR7Zm9udFNpemV9ICR7Zm9udEZhbWlseX1gKTtcbiAgICAgIGNvbnN0IGlucHV0V2lkdGggPSAoaW5wdXRUZXh0V2lkdGggfHwgcGFyc2VJbnQoY2FsY2l0ZVNpemU0OCkpICsgY2hpcENvbnRhaW5lckVsR2FwO1xuICAgICAgY29uc3QgYWxsU2VsZWN0ZWRJbmRpY2F0b3JDaGlwRWxXaWR0aCA9IGdldEVsZW1lbnRXaWR0aChhbGxTZWxlY3RlZEluZGljYXRvckNoaXBFbCk7XG4gICAgICBjb25zdCBzZWxlY3RlZEluZGljYXRvckNoaXBFbFdpZHRoID0gZ2V0RWxlbWVudFdpZHRoKHNlbGVjdGVkSW5kaWNhdG9yQ2hpcEVsKTtcbiAgICAgIGNvbnN0IGxhcmdlc3RTZWxlY3RlZEluZGljYXRvckNoaXBXaWR0aCA9IE1hdGgubWF4KGFsbFNlbGVjdGVkSW5kaWNhdG9yQ2hpcEVsV2lkdGgsIHNlbGVjdGVkSW5kaWNhdG9yQ2hpcEVsV2lkdGgpO1xuICAgICAgdGhpcy5zZXRDb21wYWN0U2VsZWN0aW9uRGlzcGxheSh7XG4gICAgICAgIGNoaXBDb250YWluZXJFbEdhcCxcbiAgICAgICAgY2hpcENvbnRhaW5lckVsV2lkdGgsXG4gICAgICAgIGlucHV0V2lkdGgsXG4gICAgICAgIGxhcmdlc3RTZWxlY3RlZEluZGljYXRvckNoaXBXaWR0aCxcbiAgICAgIH0pO1xuICAgICAgaWYgKHNlbGVjdGlvbkRpc3BsYXkgPT09IFwiZml0XCIpIHtcbiAgICAgICAgY29uc3QgY2hpcEVscyA9IEFycmF5LmZyb20odGhpcy5lbC5zaGFkb3dSb290LnF1ZXJ5U2VsZWN0b3JBbGwoXCJjYWxjaXRlLWNoaXBcIikpLmZpbHRlcigoY2hpcEVsKSA9PiBjaGlwRWwuY2xvc2FibGUpO1xuICAgICAgICBjb25zdCBhdmFpbGFibGVIb3Jpem9udGFsQ2hpcEVsU3BhY2UgPSBNYXRoLnJvdW5kKGNoaXBDb250YWluZXJFbFdpZHRoIC1cbiAgICAgICAgICAoKHRoaXMuc2VsZWN0ZWRIaWRkZW5DaGlwc0NvdW50ID4gMCA/IHNlbGVjdGVkSW5kaWNhdG9yQ2hpcEVsV2lkdGggOiAwKSArXG4gICAgICAgICAgICBjaGlwQ29udGFpbmVyRWxHYXAgK1xuICAgICAgICAgICAgaW5wdXRXaWR0aCArXG4gICAgICAgICAgICBjaGlwQ29udGFpbmVyRWxHYXApKTtcbiAgICAgICAgdGhpcy5yZWZyZXNoQ2hpcERpc3BsYXkoeyBhdmFpbGFibGVIb3Jpem9udGFsQ2hpcEVsU3BhY2UsIGNoaXBDb250YWluZXJFbEdhcCwgY2hpcEVscyB9KTtcbiAgICAgICAgdGhpcy5zZXRWaXNpYmxlQW5kSGlkZGVuQ2hpcHMoY2hpcEVscyk7XG4gICAgICB9XG4gICAgfTtcbiAgICB0aGlzLnNldEZsb2F0aW5nRWwgPSAoZWwpID0+IHtcbiAgICAgIHRoaXMuZmxvYXRpbmdFbCA9IGVsO1xuICAgICAgY29ubmVjdEZsb2F0aW5nVUkodGhpcywgdGhpcy5yZWZlcmVuY2VFbCwgdGhpcy5mbG9hdGluZ0VsKTtcbiAgICB9O1xuICAgIHRoaXMuc2V0Q29udGFpbmVyRWwgPSAoZWwpID0+IHtcbiAgICAgIHRoaXMucmVzaXplT2JzZXJ2ZXIub2JzZXJ2ZShlbCk7XG4gICAgICB0aGlzLmxpc3RDb250YWluZXJFbCA9IGVsO1xuICAgICAgdGhpcy50cmFuc2l0aW9uRWwgPSBlbDtcbiAgICB9O1xuICAgIHRoaXMuc2V0Q2hpcENvbnRhaW5lckVsID0gKGVsKSA9PiB7XG4gICAgICB0aGlzLnJlc2l6ZU9ic2VydmVyLm9ic2VydmUoZWwpO1xuICAgICAgdGhpcy5jaGlwQ29udGFpbmVyRWwgPSBlbDtcbiAgICB9O1xuICAgIHRoaXMuc2V0UmVmZXJlbmNlRWwgPSAoZWwpID0+IHtcbiAgICAgIHRoaXMucmVmZXJlbmNlRWwgPSBlbDtcbiAgICAgIGNvbm5lY3RGbG9hdGluZ1VJKHRoaXMsIHRoaXMucmVmZXJlbmNlRWwsIHRoaXMuZmxvYXRpbmdFbCk7XG4gICAgfTtcbiAgICB0aGlzLnNldEFsbFNlbGVjdGVkSW5kaWNhdG9yQ2hpcEVsID0gKGVsKSA9PiB7XG4gICAgICB0aGlzLmFsbFNlbGVjdGVkSW5kaWNhdG9yQ2hpcEVsID0gZWw7XG4gICAgfTtcbiAgICB0aGlzLnNldFNlbGVjdGVkSW5kaWNhdG9yQ2hpcEVsID0gKGVsKSA9PiB7XG4gICAgICB0aGlzLnNlbGVjdGVkSW5kaWNhdG9yQ2hpcEVsID0gZWw7XG4gICAgfTtcbiAgICB0aGlzLmlucHV0SGFuZGxlciA9IChldmVudCkgPT4ge1xuICAgICAgY29uc3QgdmFsdWUgPSBldmVudC50YXJnZXQudmFsdWU7XG4gICAgICB0aGlzLnRleHQgPSB2YWx1ZTtcbiAgICAgIHRoaXMuZmlsdGVySXRlbXModmFsdWUpO1xuICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuYWN0aXZlQ2hpcEluZGV4ID0gLTE7XG4gICAgICB9XG4gICAgfTtcbiAgICB0aGlzLmZpbHRlckl0ZW1zID0gKCgpID0+IHtcbiAgICAgIGNvbnN0IGZpbmQgPSAoaXRlbSwgZmlsdGVyZWREYXRhKSA9PiBpdGVtICYmXG4gICAgICAgIGZpbHRlcmVkRGF0YS5zb21lKCh7IGxhYmVsLCB2YWx1ZSB9KSA9PiBpc0dyb3VwKGl0ZW0pID8gbGFiZWwgPT09IGl0ZW0ubGFiZWwgOiB2YWx1ZSA9PT0gaXRlbS52YWx1ZSAmJiBsYWJlbCA9PT0gaXRlbS50ZXh0TGFiZWwpO1xuICAgICAgcmV0dXJuIGRlYm91bmNlKCh0ZXh0KSA9PiB7XG4gICAgICAgIGNvbnN0IGZpbHRlcmVkRGF0YSA9IGZpbHRlcih0aGlzLmRhdGEsIHRleHQpO1xuICAgICAgICBjb25zdCBpdGVtc0FuZEdyb3VwcyA9IHRoaXMuZ2V0SXRlbXNBbmRHcm91cHMoKTtcbiAgICAgICAgaXRlbXNBbmRHcm91cHMuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgICAgIGNvbnN0IGhpZGRlbiA9ICFmaW5kKGl0ZW0sIGZpbHRlcmVkRGF0YSk7XG4gICAgICAgICAgaXRlbS5oaWRkZW4gPSBoaWRkZW47XG4gICAgICAgICAgY29uc3QgW3BhcmVudCwgZ3JhbmRwYXJlbnRdID0gaXRlbS5hbmNlc3RvcnM7XG4gICAgICAgICAgaWYgKGZpbmQocGFyZW50LCBmaWx0ZXJlZERhdGEpIHx8IGZpbmQoZ3JhbmRwYXJlbnQsIGZpbHRlcmVkRGF0YSkpIHtcbiAgICAgICAgICAgIGl0ZW0uaGlkZGVuID0gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICghaGlkZGVuKSB7XG4gICAgICAgICAgICBpdGVtLmFuY2VzdG9ycy5mb3JFYWNoKChhbmNlc3RvcikgPT4gKGFuY2VzdG9yLmhpZGRlbiA9IGZhbHNlKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5maWx0ZXJlZEl0ZW1zID0gdGhpcy5nZXRGaWx0ZXJlZEl0ZW1zKCk7XG4gICAgICAgIHRoaXMuY2FsY2l0ZUNvbWJvYm94RmlsdGVyQ2hhbmdlLmVtaXQoKTtcbiAgICAgIH0sIDEwMCk7XG4gICAgfSkoKTtcbiAgICB0aGlzLmludGVybmFsQ29tYm9ib3hDaGFuZ2VFdmVudCA9ICgpID0+IHtcbiAgICAgIHRoaXMuY2FsY2l0ZUNvbWJvYm94Q2hhbmdlLmVtaXQoKTtcbiAgICB9O1xuICAgIHRoaXMuZW1pdENvbWJvYm94Q2hhbmdlID0gZGVib3VuY2UodGhpcy5pbnRlcm5hbENvbWJvYm94Q2hhbmdlRXZlbnQsIDApO1xuICAgIHRoaXMuZ2V0U2VsZWN0ZWRJdGVtcyA9ICgpID0+IHtcbiAgICAgIGlmICghdGhpcy5pc011bHRpKCkpIHtcbiAgICAgICAgY29uc3QgbWF0Y2ggPSB0aGlzLml0ZW1zLmZpbmQoKHsgc2VsZWN0ZWQgfSkgPT4gc2VsZWN0ZWQpO1xuICAgICAgICByZXR1cm4gbWF0Y2ggPyBbbWF0Y2hdIDogW107XG4gICAgICB9XG4gICAgICByZXR1cm4gKHRoaXMuaXRlbXNcbiAgICAgICAgLmZpbHRlcigoaXRlbSkgPT4gaXRlbS5zZWxlY3RlZCAmJiAodGhpcy5zZWxlY3Rpb25Nb2RlICE9PSBcImFuY2VzdG9yc1wiIHx8ICFoYXNBY3RpdmVDaGlsZHJlbihpdGVtKSkpXG4gICAgICAgIC8qKiBQcmVzZXJ2ZSBvcmRlciBvZiBlbnRlcmVkIHRhZ3MgKi9cbiAgICAgICAgLnNvcnQoKGEsIGIpID0+IHtcbiAgICAgICAgY29uc3QgYUlkeCA9IHRoaXMuc2VsZWN0ZWRJdGVtcy5pbmRleE9mKGEpO1xuICAgICAgICBjb25zdCBiSWR4ID0gdGhpcy5zZWxlY3RlZEl0ZW1zLmluZGV4T2YoYik7XG4gICAgICAgIGlmIChhSWR4ID4gLTEgJiYgYklkeCA+IC0xKSB7XG4gICAgICAgICAgcmV0dXJuIGFJZHggLSBiSWR4O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBiSWR4IC0gYUlkeDtcbiAgICAgIH0pKTtcbiAgICB9O1xuICAgIHRoaXMudXBkYXRlSXRlbXMgPSAoKSA9PiB7XG4gICAgICB0aGlzLml0ZW1zID0gdGhpcy5nZXRJdGVtcygpO1xuICAgICAgdGhpcy5ncm91cEl0ZW1zID0gdGhpcy5nZXRHcm91cEl0ZW1zKCk7XG4gICAgICB0aGlzLmRhdGEgPSB0aGlzLmdldERhdGEoKTtcbiAgICAgIHRoaXMuc2VsZWN0ZWRJdGVtcyA9IHRoaXMuZ2V0U2VsZWN0ZWRJdGVtcygpO1xuICAgICAgdGhpcy5maWx0ZXJlZEl0ZW1zID0gdGhpcy5nZXRGaWx0ZXJlZEl0ZW1zKCk7XG4gICAgICB0aGlzLm5lZWRzSWNvbiA9IHRoaXMuZ2V0TmVlZHNJY29uKCk7XG4gICAgICB0aGlzLml0ZW1zLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICAgICAgaXRlbS5zZWxlY3Rpb25Nb2RlID0gdGhpcy5zZWxlY3Rpb25Nb2RlO1xuICAgICAgICBpdGVtLnNjYWxlID0gdGhpcy5zY2FsZTtcbiAgICAgIH0pO1xuICAgICAgaWYgKCF0aGlzLmFsbG93Q3VzdG9tVmFsdWVzKSB7XG4gICAgICAgIHRoaXMuc2V0TWF4U2Nyb2xsZXJIZWlnaHQoKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuZ3JvdXBJdGVtcy5mb3JFYWNoKChncm91cEl0ZW0sIGluZGV4LCBpdGVtcykgPT4ge1xuICAgICAgICBpZiAoaW5kZXggPT09IDApIHtcbiAgICAgICAgICBncm91cEl0ZW0uYWZ0ZXJFbXB0eUdyb3VwID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbmV4dEdyb3VwSXRlbSA9IGl0ZW1zW2luZGV4ICsgMV07XG4gICAgICAgIGlmIChuZXh0R3JvdXBJdGVtKSB7XG4gICAgICAgICAgbmV4dEdyb3VwSXRlbS5hZnRlckVtcHR5R3JvdXAgPSBncm91cEl0ZW0uY2hpbGRyZW4ubGVuZ3RoID09PSAwO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9O1xuICAgIHRoaXMuc2Nyb2xsVG9BY3RpdmVJdGVtID0gKCkgPT4ge1xuICAgICAgY29uc3QgYWN0aXZlSXRlbSA9IHRoaXMuZmlsdGVyZWRJdGVtc1t0aGlzLmFjdGl2ZUl0ZW1JbmRleF07XG4gICAgICBpZiAoIWFjdGl2ZUl0ZW0pIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY29uc3QgaGVpZ2h0ID0gdGhpcy5jYWxjdWxhdGVTaW5nbGVJdGVtSGVpZ2h0KGFjdGl2ZUl0ZW0pO1xuICAgICAgY29uc3QgeyBvZmZzZXRIZWlnaHQsIHNjcm9sbFRvcCB9ID0gdGhpcy5saXN0Q29udGFpbmVyRWw7XG4gICAgICBpZiAob2Zmc2V0SGVpZ2h0ICsgc2Nyb2xsVG9wIDwgYWN0aXZlSXRlbS5vZmZzZXRUb3AgKyBoZWlnaHQpIHtcbiAgICAgICAgdGhpcy5saXN0Q29udGFpbmVyRWwuc2Nyb2xsVG9wID0gYWN0aXZlSXRlbS5vZmZzZXRUb3AgLSBvZmZzZXRIZWlnaHQgKyBoZWlnaHQ7XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChhY3RpdmVJdGVtLm9mZnNldFRvcCA8IHNjcm9sbFRvcCkge1xuICAgICAgICB0aGlzLmxpc3RDb250YWluZXJFbC5zY3JvbGxUb3AgPSBhY3RpdmVJdGVtLm9mZnNldFRvcDtcbiAgICAgIH1cbiAgICB9O1xuICAgIHRoaXMuY29tYm9ib3hGb2N1c0hhbmRsZXIgPSAoKSA9PiB7XG4gICAgICBpZiAodGhpcy5kaXNhYmxlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB0aGlzLnRleHRJbnB1dD8uZm9jdXMoKTtcbiAgICB9O1xuICAgIHRoaXMuY2xlYXJEaXNhYmxlZCA9IGZhbHNlO1xuICAgIHRoaXMuc2VsZWN0aW9uRGlzcGxheSA9IFwiYWxsXCI7XG4gICAgdGhpcy5vcGVuID0gZmFsc2U7XG4gICAgdGhpcy5kaXNhYmxlZCA9IGZhbHNlO1xuICAgIHRoaXMuZm9ybSA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmxhYmVsID0gdW5kZWZpbmVkO1xuICAgIHRoaXMucGxhY2Vob2xkZXIgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5wbGFjZWhvbGRlckljb24gPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5wbGFjZWhvbGRlckljb25GbGlwUnRsID0gZmFsc2U7XG4gICAgdGhpcy5tYXhJdGVtcyA9IDA7XG4gICAgdGhpcy5uYW1lID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuYWxsb3dDdXN0b21WYWx1ZXMgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5vdmVybGF5UG9zaXRpb25pbmcgPSBcImFic29sdXRlXCI7XG4gICAgdGhpcy5yZXF1aXJlZCA9IGZhbHNlO1xuICAgIHRoaXMuc2VsZWN0aW9uTW9kZSA9IFwibXVsdGlwbGVcIjtcbiAgICB0aGlzLnNjYWxlID0gXCJtXCI7XG4gICAgdGhpcy5zdGF0dXMgPSBcImlkbGVcIjtcbiAgICB0aGlzLnZhbHVlID0gbnVsbDtcbiAgICB0aGlzLmZsaXBQbGFjZW1lbnRzID0gdW5kZWZpbmVkO1xuICAgIHRoaXMubWVzc2FnZXMgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5tZXNzYWdlT3ZlcnJpZGVzID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuc2VsZWN0ZWRJdGVtcyA9IFtdO1xuICAgIHRoaXMuZmlsdGVyZWRJdGVtcyA9IFtdO1xuICAgIHRoaXMuaXRlbXMgPSBbXTtcbiAgICB0aGlzLmdyb3VwSXRlbXMgPSBbXTtcbiAgICB0aGlzLm5lZWRzSWNvbiA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmFjdGl2ZUl0ZW1JbmRleCA9IC0xO1xuICAgIHRoaXMuYWN0aXZlQ2hpcEluZGV4ID0gLTE7XG4gICAgdGhpcy5hY3RpdmVEZXNjZW5kYW50ID0gXCJcIjtcbiAgICB0aGlzLmNvbXBhY3RTZWxlY3Rpb25EaXNwbGF5ID0gZmFsc2U7XG4gICAgdGhpcy5zZWxlY3RlZEhpZGRlbkNoaXBzQ291bnQgPSAwO1xuICAgIHRoaXMuc2VsZWN0ZWRWaXNpYmxlQ2hpcHNDb3VudCA9IDA7XG4gICAgdGhpcy50ZXh0ID0gXCJcIjtcbiAgICB0aGlzLmVmZmVjdGl2ZUxvY2FsZSA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmRlZmF1bHRNZXNzYWdlcyA9IHVuZGVmaW5lZDtcbiAgfVxuICBvcGVuSGFuZGxlcigpIHtcbiAgICBvblRvZ2dsZU9wZW5DbG9zZUNvbXBvbmVudCh0aGlzKTtcbiAgICBpZiAodGhpcy5kaXNhYmxlZCkge1xuICAgICAgdGhpcy5vcGVuID0gZmFsc2U7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuc2V0TWF4U2Nyb2xsZXJIZWlnaHQoKTtcbiAgfVxuICBoYW5kbGVEaXNhYmxlZENoYW5nZSh2YWx1ZSkge1xuICAgIGlmICghdmFsdWUpIHtcbiAgICAgIHRoaXMub3BlbiA9IGZhbHNlO1xuICAgIH1cbiAgfVxuICBtYXhJdGVtc0hhbmRsZXIoKSB7XG4gICAgdGhpcy5zZXRNYXhTY3JvbGxlckhlaWdodCgpO1xuICB9XG4gIG92ZXJsYXlQb3NpdGlvbmluZ0hhbmRsZXIoKSB7XG4gICAgdGhpcy5yZXBvc2l0aW9uKHRydWUpO1xuICB9XG4gIGhhbmRsZVByb3BzQ2hhbmdlKCkge1xuICAgIHRoaXMudXBkYXRlSXRlbXMoKTtcbiAgfVxuICB2YWx1ZUhhbmRsZXIodmFsdWUpIHtcbiAgICBpZiAoIXRoaXMuaW50ZXJuYWxWYWx1ZUNoYW5nZUZsYWcpIHtcbiAgICAgIGNvbnN0IGl0ZW1zID0gdGhpcy5nZXRJdGVtcygpO1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIGl0ZW1zLmZvckVhY2goKGl0ZW0pID0+IChpdGVtLnNlbGVjdGVkID0gdmFsdWUuaW5jbHVkZXMoaXRlbS52YWx1ZSkpKTtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKHZhbHVlKSB7XG4gICAgICAgIGl0ZW1zLmZvckVhY2goKGl0ZW0pID0+IChpdGVtLnNlbGVjdGVkID0gdmFsdWUgPT09IGl0ZW0udmFsdWUpKTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBpdGVtcy5mb3JFYWNoKChpdGVtKSA9PiAoaXRlbS5zZWxlY3RlZCA9IGZhbHNlKSk7XG4gICAgICB9XG4gICAgICB0aGlzLnVwZGF0ZUl0ZW1zKCk7XG4gICAgfVxuICB9XG4gIG9uTWVzc2FnZXNDaGFuZ2UoKSB7XG4gICAgLyogIHdpcmVkIHVwIGJ5IHQ5biB1dGlsICovXG4gIH1cbiAgZmxpcFBsYWNlbWVudHNIYW5kbGVyKCkge1xuICAgIHRoaXMuc2V0RmlsdGVyZWRQbGFjZW1lbnRzKCk7XG4gICAgdGhpcy5yZXBvc2l0aW9uKHRydWUpO1xuICB9XG4gIHNlbGVjdGVkSXRlbXNIYW5kbGVyKCkge1xuICAgIHRoaXMuaW50ZXJuYWxWYWx1ZUNoYW5nZUZsYWcgPSB0cnVlO1xuICAgIHRoaXMudmFsdWUgPSB0aGlzLmdldFZhbHVlKCk7XG4gICAgdGhpcy5pbnRlcm5hbFZhbHVlQ2hhbmdlRmxhZyA9IGZhbHNlO1xuICB9XG4gIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy9cbiAgLy8gIEV2ZW50IExpc3RlbmVyc1xuICAvL1xuICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIGRvY3VtZW50Q2xpY2tIYW5kbGVyKGV2ZW50KSB7XG4gICAgaWYgKHRoaXMuZGlzYWJsZWQgfHwgIWlzUHJpbWFyeVBvaW50ZXJCdXR0b24oZXZlbnQpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGNvbXBvc2VkUGF0aCA9IGV2ZW50LmNvbXBvc2VkUGF0aCgpO1xuICAgIGlmIChjb21wb3NlZFBhdGguaW5jbHVkZXModGhpcy5lbCkgfHwgY29tcG9zZWRQYXRoLmluY2x1ZGVzKHRoaXMucmVmZXJlbmNlRWwpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICghdGhpcy5hbGxvd0N1c3RvbVZhbHVlcyAmJiB0aGlzLnRleHRJbnB1dC52YWx1ZSkge1xuICAgICAgdGhpcy5jbGVhcklucHV0VmFsdWUoKTtcbiAgICAgIHRoaXMuZmlsdGVySXRlbXMoXCJcIik7XG4gICAgICB0aGlzLnVwZGF0ZUFjdGl2ZUl0ZW1JbmRleCgtMSk7XG4gICAgfVxuICAgIGlmICh0aGlzLmFsbG93Q3VzdG9tVmFsdWVzICYmIHRoaXMudGV4dC50cmltKCkubGVuZ3RoKSB7XG4gICAgICB0aGlzLmFkZEN1c3RvbUNoaXAodGhpcy50ZXh0KTtcbiAgICB9XG4gICAgdGhpcy5vcGVuID0gZmFsc2U7XG4gIH1cbiAgY2FsY2l0ZUNvbWJvYm94SXRlbUNoYW5nZUhhbmRsZXIoZXZlbnQpIHtcbiAgICBpZiAodGhpcy5pZ25vcmVTZWxlY3RlZEV2ZW50c0ZsYWcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgdGFyZ2V0ID0gZXZlbnQudGFyZ2V0O1xuICAgIGNvbnN0IG5ld0luZGV4ID0gdGhpcy5maWx0ZXJlZEl0ZW1zLmluZGV4T2YodGFyZ2V0KTtcbiAgICB0aGlzLnVwZGF0ZUFjdGl2ZUl0ZW1JbmRleChuZXdJbmRleCk7XG4gICAgdGhpcy50b2dnbGVTZWxlY3Rpb24odGFyZ2V0LCB0YXJnZXQuc2VsZWN0ZWQpO1xuICB9XG4gIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy9cbiAgLy8gIFB1YmxpYyBNZXRob2RzXG4gIC8vXG4gIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLyoqXG4gICAqIFVwZGF0ZXMgdGhlIHBvc2l0aW9uIG9mIHRoZSBjb21wb25lbnQuXG4gICAqXG4gICAqIEBwYXJhbSBkZWxheWVkIFJlcG9zaXRpb24gdGhlIGNvbXBvbmVudCBhZnRlciBhIGRlbGF5XG4gICAqIEByZXR1cm5zIFByb21pc2VcbiAgICovXG4gIGFzeW5jIHJlcG9zaXRpb24oZGVsYXllZCA9IGZhbHNlKSB7XG4gICAgY29uc3QgeyBmbG9hdGluZ0VsLCByZWZlcmVuY2VFbCwgcGxhY2VtZW50LCBvdmVybGF5UG9zaXRpb25pbmcsIGZpbHRlcmVkRmxpcFBsYWNlbWVudHMgfSA9IHRoaXM7XG4gICAgcmV0dXJuIHJlcG9zaXRpb24odGhpcywge1xuICAgICAgZmxvYXRpbmdFbCxcbiAgICAgIHJlZmVyZW5jZUVsLFxuICAgICAgb3ZlcmxheVBvc2l0aW9uaW5nLFxuICAgICAgcGxhY2VtZW50LFxuICAgICAgZmxpcFBsYWNlbWVudHM6IGZpbHRlcmVkRmxpcFBsYWNlbWVudHMsXG4gICAgICB0eXBlOiBcIm1lbnVcIixcbiAgICB9LCBkZWxheWVkKTtcbiAgfVxuICAvKiogU2V0cyBmb2N1cyBvbiB0aGUgY29tcG9uZW50LiAqL1xuICBhc3luYyBzZXRGb2N1cygpIHtcbiAgICBhd2FpdCBjb21wb25lbnRGb2N1c2FibGUodGhpcyk7XG4gICAgdGhpcy50ZXh0SW5wdXQ/LmZvY3VzKCk7XG4gICAgdGhpcy5hY3RpdmVDaGlwSW5kZXggPSAtMTtcbiAgICB0aGlzLmFjdGl2ZUl0ZW1JbmRleCA9IC0xO1xuICB9XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vXG4gIC8vICBMaWZlY3ljbGVcbiAgLy9cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgY29ubmVjdEludGVyYWN0aXZlKHRoaXMpO1xuICAgIGNvbm5lY3RMb2NhbGl6ZWQodGhpcyk7XG4gICAgY29ubmVjdE1lc3NhZ2VzKHRoaXMpO1xuICAgIGNvbm5lY3RMYWJlbCh0aGlzKTtcbiAgICBjb25uZWN0Rm9ybSh0aGlzKTtcbiAgICB0aGlzLmludGVybmFsVmFsdWVDaGFuZ2VGbGFnID0gdHJ1ZTtcbiAgICB0aGlzLnZhbHVlID0gdGhpcy5nZXRWYWx1ZSgpO1xuICAgIHRoaXMuaW50ZXJuYWxWYWx1ZUNoYW5nZUZsYWcgPSBmYWxzZTtcbiAgICB0aGlzLm11dGF0aW9uT2JzZXJ2ZXI/Lm9ic2VydmUodGhpcy5lbCwgeyBjaGlsZExpc3Q6IHRydWUsIHN1YnRyZWU6IHRydWUgfSk7XG4gICAgdGhpcy51cGRhdGVJdGVtcygpO1xuICAgIHRoaXMuc2V0RmlsdGVyZWRQbGFjZW1lbnRzKCk7XG4gICAgdGhpcy5yZXBvc2l0aW9uKHRydWUpO1xuICAgIGlmICh0aGlzLm9wZW4pIHtcbiAgICAgIHRoaXMub3BlbkhhbmRsZXIoKTtcbiAgICAgIG9uVG9nZ2xlT3BlbkNsb3NlQ29tcG9uZW50KHRoaXMpO1xuICAgIH1cbiAgICBjb25uZWN0RmxvYXRpbmdVSSh0aGlzLCB0aGlzLnJlZmVyZW5jZUVsLCB0aGlzLmZsb2F0aW5nRWwpO1xuICB9XG4gIGFzeW5jIGNvbXBvbmVudFdpbGxMb2FkKCkge1xuICAgIHNldFVwTG9hZGFibGVDb21wb25lbnQodGhpcyk7XG4gICAgdGhpcy51cGRhdGVJdGVtcygpO1xuICAgIGF3YWl0IHNldFVwTWVzc2FnZXModGhpcyk7XG4gIH1cbiAgY29tcG9uZW50RGlkTG9hZCgpIHtcbiAgICBhZnRlckNvbm5lY3REZWZhdWx0VmFsdWVTZXQodGhpcywgdGhpcy5nZXRWYWx1ZSgpKTtcbiAgICB0aGlzLnJlcG9zaXRpb24odHJ1ZSk7XG4gICAgc2V0Q29tcG9uZW50TG9hZGVkKHRoaXMpO1xuICB9XG4gIGNvbXBvbmVudERpZFJlbmRlcigpIHtcbiAgICBpZiAodGhpcy5lbC5vZmZzZXRIZWlnaHQgIT09IHRoaXMuaW5wdXRIZWlnaHQpIHtcbiAgICAgIHRoaXMucmVwb3NpdGlvbih0cnVlKTtcbiAgICAgIHRoaXMuaW5wdXRIZWlnaHQgPSB0aGlzLmVsLm9mZnNldEhlaWdodDtcbiAgICB9XG4gICAgdXBkYXRlSG9zdEludGVyYWN0aW9uKHRoaXMpO1xuICB9XG4gIGNvbXBvbmVudERpZFVwZGF0ZSgpIHtcbiAgICB0aGlzLnJlZnJlc2hTZWxlY3Rpb25EaXNwbGF5KCk7XG4gIH1cbiAgZGlzY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgdGhpcy5tdXRhdGlvbk9ic2VydmVyPy5kaXNjb25uZWN0KCk7XG4gICAgdGhpcy5yZXNpemVPYnNlcnZlcj8uZGlzY29ubmVjdCgpO1xuICAgIGRpc2Nvbm5lY3RJbnRlcmFjdGl2ZSh0aGlzKTtcbiAgICBkaXNjb25uZWN0TGFiZWwodGhpcyk7XG4gICAgZGlzY29ubmVjdEZvcm0odGhpcyk7XG4gICAgZGlzY29ubmVjdEZsb2F0aW5nVUkodGhpcywgdGhpcy5yZWZlcmVuY2VFbCwgdGhpcy5mbG9hdGluZ0VsKTtcbiAgICBkaXNjb25uZWN0TG9jYWxpemVkKHRoaXMpO1xuICAgIGRpc2Nvbm5lY3RNZXNzYWdlcyh0aGlzKTtcbiAgfVxuICAvKiogd2hlbiBzZWFyY2ggdGV4dCBpcyBjbGVhcmVkLCByZXNldCBhY3RpdmUgdG8gICovXG4gIHRleHRIYW5kbGVyKCkge1xuICAgIHRoaXMudXBkYXRlQWN0aXZlSXRlbUluZGV4KC0xKTtcbiAgfVxuICBlZmZlY3RpdmVMb2NhbGVDaGFuZ2UoKSB7XG4gICAgdXBkYXRlTWVzc2FnZXModGhpcywgdGhpcy5lZmZlY3RpdmVMb2NhbGUpO1xuICB9XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vXG4gIC8vICBQcml2YXRlIE1ldGhvZHNcbiAgLy9cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgY2xlYXJWYWx1ZSgpIHtcbiAgICB0aGlzLmlnbm9yZVNlbGVjdGVkRXZlbnRzRmxhZyA9IHRydWU7XG4gICAgdGhpcy5pdGVtcy5mb3JFYWNoKChlbCkgPT4gKGVsLnNlbGVjdGVkID0gZmFsc2UpKTtcbiAgICB0aGlzLmlnbm9yZVNlbGVjdGVkRXZlbnRzRmxhZyA9IGZhbHNlO1xuICAgIHRoaXMuc2VsZWN0ZWRJdGVtcyA9IFtdO1xuICAgIHRoaXMuZW1pdENvbWJvYm94Q2hhbmdlKCk7XG4gICAgdGhpcy5vcGVuID0gZmFsc2U7XG4gICAgdGhpcy51cGRhdGVBY3RpdmVJdGVtSW5kZXgoLTEpO1xuICAgIHRoaXMucmVzZXRUZXh0KCk7XG4gICAgdGhpcy5maWx0ZXJJdGVtcyhcIlwiKTtcbiAgICB0aGlzLnNldEZvY3VzKCk7XG4gIH1cbiAgY2xlYXJJbnB1dFZhbHVlKCkge1xuICAgIHRoaXMudGV4dElucHV0LnZhbHVlID0gXCJcIjtcbiAgICB0aGlzLnRleHQgPSBcIlwiO1xuICB9XG4gIGNvbWJvYm94SW5WaWV3cG9ydCgpIHtcbiAgICBjb25zdCBib3VuZGluZyA9IHRoaXMuZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgcmV0dXJuIChib3VuZGluZy50b3AgPj0gMCAmJlxuICAgICAgYm91bmRpbmcubGVmdCA+PSAwICYmXG4gICAgICBib3VuZGluZy5yaWdodCA8PSAod2luZG93LmlubmVyV2lkdGggfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoKSAmJlxuICAgICAgYm91bmRpbmcuYm90dG9tIDw9ICh3aW5kb3cuaW5uZXJIZWlnaHQgfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodCkpO1xuICB9XG4gIG9uQmVmb3JlT3BlbigpIHtcbiAgICB0aGlzLnNjcm9sbFRvQWN0aXZlSXRlbSgpO1xuICAgIHRoaXMuY2FsY2l0ZUNvbWJvYm94QmVmb3JlT3Blbi5lbWl0KCk7XG4gIH1cbiAgb25PcGVuKCkge1xuICAgIHRoaXMuY2FsY2l0ZUNvbWJvYm94T3Blbi5lbWl0KCk7XG4gIH1cbiAgb25CZWZvcmVDbG9zZSgpIHtcbiAgICB0aGlzLmNhbGNpdGVDb21ib2JveEJlZm9yZUNsb3NlLmVtaXQoKTtcbiAgfVxuICBvbkNsb3NlKCkge1xuICAgIHRoaXMuY2FsY2l0ZUNvbWJvYm94Q2xvc2UuZW1pdCgpO1xuICB9XG4gIGVuc3VyZVJlY2VudFNlbGVjdGVkSXRlbUlzQWN0aXZlKCkge1xuICAgIGNvbnN0IHsgc2VsZWN0ZWRJdGVtcyB9ID0gdGhpcztcbiAgICBjb25zdCB0YXJnZXRJbmRleCA9IHNlbGVjdGVkSXRlbXMubGVuZ3RoID09PSAwID8gMCA6IHRoaXMuaXRlbXMuaW5kZXhPZihzZWxlY3RlZEl0ZW1zW3NlbGVjdGVkSXRlbXMubGVuZ3RoIC0gMV0pO1xuICAgIHRoaXMudXBkYXRlQWN0aXZlSXRlbUluZGV4KHRhcmdldEluZGV4KTtcbiAgfVxuICBoaWRlQ2hpcChjaGlwRWwpIHtcbiAgICBjaGlwRWwuY2xhc3NMaXN0LmFkZChDU1MkMy5jaGlwSW52aXNpYmxlKTtcbiAgfVxuICBzaG93Q2hpcChjaGlwRWwpIHtcbiAgICBjaGlwRWwuY2xhc3NMaXN0LnJlbW92ZShDU1MkMy5jaGlwSW52aXNpYmxlKTtcbiAgfVxuICByZWZyZXNoQ2hpcERpc3BsYXkoeyBjaGlwRWxzLCBhdmFpbGFibGVIb3Jpem9udGFsQ2hpcEVsU3BhY2UsIGNoaXBDb250YWluZXJFbEdhcCwgfSkge1xuICAgIGNoaXBFbHMuZm9yRWFjaCgoY2hpcEVsKSA9PiB7XG4gICAgICBpZiAoIWNoaXBFbC5zZWxlY3RlZCkge1xuICAgICAgICB0aGlzLmhpZGVDaGlwKGNoaXBFbCk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgY29uc3QgY2hpcEVsV2lkdGggPSBnZXRFbGVtZW50V2lkdGgoY2hpcEVsKTtcbiAgICAgICAgaWYgKGNoaXBFbFdpZHRoICYmIGNoaXBFbFdpZHRoIDwgYXZhaWxhYmxlSG9yaXpvbnRhbENoaXBFbFNwYWNlKSB7XG4gICAgICAgICAgYXZhaWxhYmxlSG9yaXpvbnRhbENoaXBFbFNwYWNlIC09IGNoaXBFbFdpZHRoICsgY2hpcENvbnRhaW5lckVsR2FwO1xuICAgICAgICAgIHRoaXMuc2hvd0NoaXAoY2hpcEVsKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRoaXMuaGlkZUNoaXAoY2hpcEVsKTtcbiAgICB9KTtcbiAgfVxuICBzZXRDb21wYWN0U2VsZWN0aW9uRGlzcGxheSh7IGNoaXBDb250YWluZXJFbEdhcCwgY2hpcENvbnRhaW5lckVsV2lkdGgsIGlucHV0V2lkdGgsIGxhcmdlc3RTZWxlY3RlZEluZGljYXRvckNoaXBXaWR0aCwgfSkge1xuICAgIGNvbnN0IG5ld0NvbXBhY3RCcmVha3BvaW50ID0gTWF0aC5yb3VuZChsYXJnZXN0U2VsZWN0ZWRJbmRpY2F0b3JDaGlwV2lkdGggKyBjaGlwQ29udGFpbmVyRWxHYXAgKyBpbnB1dFdpZHRoKTtcbiAgICBpZiAoIXRoaXMubWF4Q29tcGFjdEJyZWFrcG9pbnQgfHwgdGhpcy5tYXhDb21wYWN0QnJlYWtwb2ludCA8IG5ld0NvbXBhY3RCcmVha3BvaW50KSB7XG4gICAgICB0aGlzLm1heENvbXBhY3RCcmVha3BvaW50ID0gbmV3Q29tcGFjdEJyZWFrcG9pbnQ7XG4gICAgfVxuICAgIHRoaXMuY29tcGFjdFNlbGVjdGlvbkRpc3BsYXkgPSBjaGlwQ29udGFpbmVyRWxXaWR0aCA8IHRoaXMubWF4Q29tcGFjdEJyZWFrcG9pbnQ7XG4gIH1cbiAgc2V0VmlzaWJsZUFuZEhpZGRlbkNoaXBzKGNoaXBFbHMpIHtcbiAgICBsZXQgbmV3U2VsZWN0ZWRWaXNpYmxlQ2hpcHNDb3VudCA9IDA7XG4gICAgY2hpcEVscy5mb3JFYWNoKChjaGlwRWwpID0+IHtcbiAgICAgIGlmIChjaGlwRWwuc2VsZWN0ZWQgJiYgIWNoaXBFbC5jbGFzc0xpc3QuY29udGFpbnMoQ1NTJDMuY2hpcEludmlzaWJsZSkpIHtcbiAgICAgICAgbmV3U2VsZWN0ZWRWaXNpYmxlQ2hpcHNDb3VudCsrO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGlmIChuZXdTZWxlY3RlZFZpc2libGVDaGlwc0NvdW50ICE9PSB0aGlzLnNlbGVjdGVkVmlzaWJsZUNoaXBzQ291bnQpIHtcbiAgICAgIHRoaXMuc2VsZWN0ZWRWaXNpYmxlQ2hpcHNDb3VudCA9IG5ld1NlbGVjdGVkVmlzaWJsZUNoaXBzQ291bnQ7XG4gICAgfVxuICAgIGNvbnN0IG5ld1NlbGVjdGVkSGlkZGVuQ2hpcHNDb3VudCA9IHRoaXMuZ2V0U2VsZWN0ZWRJdGVtcygpLmxlbmd0aCAtIG5ld1NlbGVjdGVkVmlzaWJsZUNoaXBzQ291bnQ7XG4gICAgaWYgKG5ld1NlbGVjdGVkSGlkZGVuQ2hpcHNDb3VudCAhPT0gdGhpcy5zZWxlY3RlZEhpZGRlbkNoaXBzQ291bnQpIHtcbiAgICAgIHRoaXMuc2VsZWN0ZWRIaWRkZW5DaGlwc0NvdW50ID0gbmV3U2VsZWN0ZWRIaWRkZW5DaGlwc0NvdW50O1xuICAgIH1cbiAgfVxuICBnZXRNYXhTY3JvbGxlckhlaWdodCgpIHtcbiAgICBjb25zdCBpdGVtcyA9IHRoaXMuZ2V0SXRlbXNBbmRHcm91cHMoKS5maWx0ZXIoKGl0ZW0pID0+ICFpdGVtLmhpZGRlbik7XG4gICAgY29uc3QgeyBtYXhJdGVtcyB9ID0gdGhpcztcbiAgICBsZXQgaXRlbXNUb1Byb2Nlc3MgPSAwO1xuICAgIGxldCBtYXhTY3JvbGxlckhlaWdodCA9IDA7XG4gICAgaWYgKGl0ZW1zLmxlbmd0aCA+IG1heEl0ZW1zKSB7XG4gICAgICBpdGVtcy5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgICAgIGlmIChpdGVtc1RvUHJvY2VzcyA8IG1heEl0ZW1zICYmIG1heEl0ZW1zID4gMCkge1xuICAgICAgICAgIGNvbnN0IGhlaWdodCA9IHRoaXMuY2FsY3VsYXRlU2luZ2xlSXRlbUhlaWdodChpdGVtKTtcbiAgICAgICAgICBpZiAoaGVpZ2h0ID4gMCkge1xuICAgICAgICAgICAgbWF4U2Nyb2xsZXJIZWlnaHQgKz0gaGVpZ2h0O1xuICAgICAgICAgICAgaXRlbXNUb1Byb2Nlc3MrKztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gbWF4U2Nyb2xsZXJIZWlnaHQ7XG4gIH1cbiAgY2FsY3VsYXRlU2luZ2xlSXRlbUhlaWdodChpdGVtKSB7XG4gICAgaWYgKCFpdGVtKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGxldCBoZWlnaHQgPSBpdGVtLm9mZnNldEhlaWdodDtcbiAgICAvLyBpZiBpdGVtIGhhcyBjaGlsZHJlbiBpdGVtcywgZG9uJ3QgY291bnQgdGhlaXIgaGVpZ2h0IHR3aWNlXG4gICAgY29uc3QgY2hpbGRyZW4gPSBBcnJheS5mcm9tKGl0ZW0ucXVlcnlTZWxlY3RvckFsbChDb21ib2JveENoaWxkU2VsZWN0b3IpKTtcbiAgICBjaGlsZHJlblxuICAgICAgLm1hcCgoY2hpbGQpID0+IGNoaWxkPy5vZmZzZXRIZWlnaHQpXG4gICAgICAuZm9yRWFjaCgob2Zmc2V0SGVpZ2h0KSA9PiB7XG4gICAgICBoZWlnaHQgLT0gb2Zmc2V0SGVpZ2h0O1xuICAgIH0pO1xuICAgIHJldHVybiBoZWlnaHQ7XG4gIH1cbiAgZ2V0SXRlbXNBbmRHcm91cHMoKSB7XG4gICAgcmV0dXJuIFsuLi50aGlzLmdyb3VwSXRlbXMsIC4uLnRoaXMuaXRlbXNdO1xuICB9XG4gIHRvZ2dsZVNlbGVjdGlvbihpdGVtLCB2YWx1ZSA9ICFpdGVtLnNlbGVjdGVkKSB7XG4gICAgaWYgKCFpdGVtIHx8XG4gICAgICAodGhpcy5zZWxlY3Rpb25Nb2RlID09PSBcInNpbmdsZS1wZXJzaXN0XCIgJiYgaXRlbS5zZWxlY3RlZCAmJiBpdGVtLnZhbHVlID09PSB0aGlzLnZhbHVlKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAodGhpcy5pc011bHRpKCkpIHtcbiAgICAgIGl0ZW0uc2VsZWN0ZWQgPSB2YWx1ZTtcbiAgICAgIHRoaXMudXBkYXRlQW5jZXN0b3JzKGl0ZW0pO1xuICAgICAgdGhpcy5zZWxlY3RlZEl0ZW1zID0gdGhpcy5nZXRTZWxlY3RlZEl0ZW1zKCk7XG4gICAgICB0aGlzLmVtaXRDb21ib2JveENoYW5nZSgpO1xuICAgICAgdGhpcy5yZXNldFRleHQoKTtcbiAgICAgIHRoaXMuZmlsdGVySXRlbXMoXCJcIik7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgdGhpcy5pZ25vcmVTZWxlY3RlZEV2ZW50c0ZsYWcgPSB0cnVlO1xuICAgICAgdGhpcy5pdGVtcy5mb3JFYWNoKChlbCkgPT4gKGVsLnNlbGVjdGVkID0gZWwgPT09IGl0ZW0gPyB2YWx1ZSA6IGZhbHNlKSk7XG4gICAgICB0aGlzLmlnbm9yZVNlbGVjdGVkRXZlbnRzRmxhZyA9IGZhbHNlO1xuICAgICAgdGhpcy5zZWxlY3RlZEl0ZW1zID0gdGhpcy5nZXRTZWxlY3RlZEl0ZW1zKCk7XG4gICAgICB0aGlzLmVtaXRDb21ib2JveENoYW5nZSgpO1xuICAgICAgaWYgKHRoaXMudGV4dElucHV0KSB7XG4gICAgICAgIHRoaXMudGV4dElucHV0LnZhbHVlID0gaXRlbS50ZXh0TGFiZWw7XG4gICAgICB9XG4gICAgICB0aGlzLm9wZW4gPSBmYWxzZTtcbiAgICAgIHRoaXMudXBkYXRlQWN0aXZlSXRlbUluZGV4KC0xKTtcbiAgICAgIHRoaXMucmVzZXRUZXh0KCk7XG4gICAgICB0aGlzLmZpbHRlckl0ZW1zKFwiXCIpO1xuICAgIH1cbiAgfVxuICB1cGRhdGVBbmNlc3RvcnMoaXRlbSkge1xuICAgIGlmICh0aGlzLnNlbGVjdGlvbk1vZGUgIT09IFwiYW5jZXN0b3JzXCIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgYW5jZXN0b3JzID0gZ2V0SXRlbUFuY2VzdG9ycyhpdGVtKTtcbiAgICBjb25zdCBjaGlsZHJlbiA9IGdldEl0ZW1DaGlsZHJlbihpdGVtKTtcbiAgICBpZiAoaXRlbS5zZWxlY3RlZCkge1xuICAgICAgYW5jZXN0b3JzLmZvckVhY2goKGVsKSA9PiB7XG4gICAgICAgIGVsLnNlbGVjdGVkID0gdHJ1ZTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIGNoaWxkcmVuLmZvckVhY2goKGVsKSA9PiAoZWwuc2VsZWN0ZWQgPSBmYWxzZSkpO1xuICAgICAgWy4uLmFuY2VzdG9yc10uZm9yRWFjaCgoZWwpID0+IHtcbiAgICAgICAgaWYgKCFoYXNBY3RpdmVDaGlsZHJlbihlbCkpIHtcbiAgICAgICAgICBlbC5zZWxlY3RlZCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgZ2V0RmlsdGVyZWRJdGVtcygpIHtcbiAgICByZXR1cm4gdGhpcy5pdGVtcy5maWx0ZXIoKGl0ZW0pID0+ICFpdGVtLmhpZGRlbik7XG4gIH1cbiAgZ2V0RGF0YSgpIHtcbiAgICByZXR1cm4gdGhpcy5pdGVtcy5tYXAoKGl0ZW0pID0+ICh7XG4gICAgICBmaWx0ZXJEaXNhYmxlZDogaXRlbS5maWx0ZXJEaXNhYmxlZCxcbiAgICAgIHZhbHVlOiBpdGVtLnZhbHVlLFxuICAgICAgbGFiZWw6IGl0ZW0udGV4dExhYmVsLFxuICAgIH0pKTtcbiAgfVxuICBnZXROZWVkc0ljb24oKSB7XG4gICAgcmV0dXJuIGlzU2luZ2xlTGlrZSh0aGlzLnNlbGVjdGlvbk1vZGUpICYmIHRoaXMuaXRlbXMuc29tZSgoaXRlbSkgPT4gaXRlbS5pY29uKTtcbiAgfVxuICByZXNldFRleHQoKSB7XG4gICAgaWYgKHRoaXMudGV4dElucHV0KSB7XG4gICAgICB0aGlzLnRleHRJbnB1dC52YWx1ZSA9IFwiXCI7XG4gICAgfVxuICAgIHRoaXMudGV4dCA9IFwiXCI7XG4gIH1cbiAgZ2V0SXRlbXMoKSB7XG4gICAgY29uc3QgaXRlbXMgPSBBcnJheS5mcm9tKHRoaXMuZWwucXVlcnlTZWxlY3RvckFsbChDb21ib2JveEl0ZW0kMSkpO1xuICAgIHJldHVybiBpdGVtcy5maWx0ZXIoKGl0ZW0pID0+ICFpdGVtLmRpc2FibGVkKTtcbiAgfVxuICBnZXRHcm91cEl0ZW1zKCkge1xuICAgIHJldHVybiBBcnJheS5mcm9tKHRoaXMuZWwucXVlcnlTZWxlY3RvckFsbChDb21ib2JveEl0ZW1Hcm91cCQxKSk7XG4gIH1cbiAgYWRkQ3VzdG9tQ2hpcCh2YWx1ZSwgZm9jdXMpIHtcbiAgICBjb25zdCBleGlzdGluZ0l0ZW0gPSB0aGlzLml0ZW1zLmZpbmQoKGVsKSA9PiBlbC50ZXh0TGFiZWwgPT09IHZhbHVlKTtcbiAgICBpZiAoZXhpc3RpbmdJdGVtKSB7XG4gICAgICB0aGlzLnRvZ2dsZVNlbGVjdGlvbihleGlzdGluZ0l0ZW0sIHRydWUpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIGlmICghdGhpcy5pc011bHRpKCkpIHtcbiAgICAgICAgdGhpcy50b2dnbGVTZWxlY3Rpb24odGhpcy5zZWxlY3RlZEl0ZW1zW3RoaXMuc2VsZWN0ZWRJdGVtcy5sZW5ndGggLSAxXSwgZmFsc2UpO1xuICAgICAgfVxuICAgICAgY29uc3QgaXRlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoQ29tYm9ib3hJdGVtJDEpO1xuICAgICAgaXRlbS52YWx1ZSA9IHZhbHVlO1xuICAgICAgaXRlbS50ZXh0TGFiZWwgPSB2YWx1ZTtcbiAgICAgIGl0ZW0uc2VsZWN0ZWQgPSB0cnVlO1xuICAgICAgdGhpcy5lbC5hcHBlbmRDaGlsZChpdGVtKTtcbiAgICAgIHRoaXMucmVzZXRUZXh0KCk7XG4gICAgICBpZiAoZm9jdXMpIHtcbiAgICAgICAgdGhpcy5zZXRGb2N1cygpO1xuICAgICAgfVxuICAgICAgdGhpcy51cGRhdGVJdGVtcygpO1xuICAgICAgdGhpcy5maWx0ZXJJdGVtcyhcIlwiKTtcbiAgICAgIHRoaXMuZW1pdENvbWJvYm94Q2hhbmdlKCk7XG4gICAgfVxuICB9XG4gIHJlbW92ZUFjdGl2ZUNoaXAoKSB7XG4gICAgdGhpcy50b2dnbGVTZWxlY3Rpb24odGhpcy5zZWxlY3RlZEl0ZW1zW3RoaXMuYWN0aXZlQ2hpcEluZGV4XSwgZmFsc2UpO1xuICAgIHRoaXMuc2V0Rm9jdXMoKTtcbiAgfVxuICByZW1vdmVMYXN0Q2hpcCgpIHtcbiAgICB0aGlzLnRvZ2dsZVNlbGVjdGlvbih0aGlzLnNlbGVjdGVkSXRlbXNbdGhpcy5zZWxlY3RlZEl0ZW1zLmxlbmd0aCAtIDFdLCBmYWxzZSk7XG4gICAgdGhpcy5zZXRGb2N1cygpO1xuICB9XG4gIHByZXZpb3VzQ2hpcCgpIHtcbiAgICBpZiAodGhpcy50ZXh0KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGxlbmd0aCA9IHRoaXMuc2VsZWN0ZWRJdGVtcy5sZW5ndGggLSAxO1xuICAgIGNvbnN0IGFjdGl2ZSA9IHRoaXMuYWN0aXZlQ2hpcEluZGV4O1xuICAgIHRoaXMuYWN0aXZlQ2hpcEluZGV4ID0gYWN0aXZlID09PSAtMSA/IGxlbmd0aCA6IE1hdGgubWF4KGFjdGl2ZSAtIDEsIDApO1xuICAgIHRoaXMudXBkYXRlQWN0aXZlSXRlbUluZGV4KC0xKTtcbiAgICB0aGlzLmZvY3VzQ2hpcCgpO1xuICB9XG4gIG5leHRDaGlwKCkge1xuICAgIGlmICh0aGlzLnRleHQgfHwgdGhpcy5hY3RpdmVDaGlwSW5kZXggPT09IC0xKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGxhc3QgPSB0aGlzLnNlbGVjdGVkSXRlbXMubGVuZ3RoIC0gMTtcbiAgICBjb25zdCBuZXdJbmRleCA9IHRoaXMuYWN0aXZlQ2hpcEluZGV4ICsgMTtcbiAgICBpZiAobmV3SW5kZXggPiBsYXN0KSB7XG4gICAgICB0aGlzLmFjdGl2ZUNoaXBJbmRleCA9IC0xO1xuICAgICAgdGhpcy5zZXRGb2N1cygpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHRoaXMuYWN0aXZlQ2hpcEluZGV4ID0gbmV3SW5kZXg7XG4gICAgICB0aGlzLmZvY3VzQ2hpcCgpO1xuICAgIH1cbiAgICB0aGlzLnVwZGF0ZUFjdGl2ZUl0ZW1JbmRleCgtMSk7XG4gIH1cbiAgZm9jdXNDaGlwKCkge1xuICAgIGNvbnN0IGd1aWQgPSB0aGlzLnNlbGVjdGVkSXRlbXNbdGhpcy5hY3RpdmVDaGlwSW5kZXhdPy5ndWlkO1xuICAgIGNvbnN0IGNoaXAgPSBndWlkXG4gICAgICA/IHRoaXMucmVmZXJlbmNlRWwucXVlcnlTZWxlY3RvcihgIyR7Y2hpcFVpZFByZWZpeH0ke2d1aWR9YClcbiAgICAgIDogbnVsbDtcbiAgICBjaGlwPy5zZXRGb2N1cygpO1xuICB9XG4gIHNoaWZ0QWN0aXZlSXRlbUluZGV4KGRlbHRhKSB7XG4gICAgY29uc3QgeyBsZW5ndGggfSA9IHRoaXMuZmlsdGVyZWRJdGVtcztcbiAgICBjb25zdCBuZXdJbmRleCA9ICh0aGlzLmFjdGl2ZUl0ZW1JbmRleCArIGxlbmd0aCArIGRlbHRhKSAlIGxlbmd0aDtcbiAgICB0aGlzLnVwZGF0ZUFjdGl2ZUl0ZW1JbmRleChuZXdJbmRleCk7XG4gICAgdGhpcy5zY3JvbGxUb0FjdGl2ZUl0ZW0oKTtcbiAgfVxuICB1cGRhdGVBY3RpdmVJdGVtSW5kZXgoaW5kZXgpIHtcbiAgICB0aGlzLmFjdGl2ZUl0ZW1JbmRleCA9IGluZGV4O1xuICAgIGxldCBhY3RpdmVEZXNjZW5kYW50ID0gbnVsbDtcbiAgICB0aGlzLmZpbHRlcmVkSXRlbXMuZm9yRWFjaCgoZWwsIGkpID0+IHtcbiAgICAgIGlmIChpID09PSBpbmRleCkge1xuICAgICAgICBlbC5hY3RpdmUgPSB0cnVlO1xuICAgICAgICBhY3RpdmVEZXNjZW5kYW50ID0gYCR7aXRlbVVpZFByZWZpeH0ke2VsLmd1aWR9YDtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBlbC5hY3RpdmUgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB0aGlzLmFjdGl2ZURlc2NlbmRhbnQgPSBhY3RpdmVEZXNjZW5kYW50O1xuICAgIGlmICh0aGlzLmFjdGl2ZUl0ZW1JbmRleCA+IC0xKSB7XG4gICAgICB0aGlzLmFjdGl2ZUNoaXBJbmRleCA9IC0xO1xuICAgIH1cbiAgfVxuICBpc0FsbFNlbGVjdGVkKCkge1xuICAgIHJldHVybiB0aGlzLmdldEl0ZW1zKCkubGVuZ3RoID09PSB0aGlzLmdldFNlbGVjdGVkSXRlbXMoKS5sZW5ndGg7XG4gIH1cbiAgaXNNdWx0aSgpIHtcbiAgICByZXR1cm4gIWlzU2luZ2xlTGlrZSh0aGlzLnNlbGVjdGlvbk1vZGUpO1xuICB9XG4gIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy9cbiAgLy8gIFJlbmRlciBNZXRob2RzXG4gIC8vXG4gIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgcmVuZGVyQ2hpcHMoKSB7XG4gICAgY29uc3QgeyBhY3RpdmVDaGlwSW5kZXgsIHNjYWxlLCBzZWxlY3Rpb25Nb2RlLCBtZXNzYWdlcyB9ID0gdGhpcztcbiAgICByZXR1cm4gdGhpcy5zZWxlY3RlZEl0ZW1zLm1hcCgoaXRlbSwgaSkgPT4ge1xuICAgICAgY29uc3QgY2hpcENsYXNzZXMgPSB7XG4gICAgICAgIGNoaXA6IHRydWUsXG4gICAgICAgIFwiY2hpcC0tYWN0aXZlXCI6IGFjdGl2ZUNoaXBJbmRleCA9PT0gaSxcbiAgICAgIH07XG4gICAgICBjb25zdCBhbmNlc3RvcnMgPSBbLi4uZ2V0SXRlbUFuY2VzdG9ycyhpdGVtKV0ucmV2ZXJzZSgpO1xuICAgICAgY29uc3QgcGF0aExhYmVsID0gWy4uLmFuY2VzdG9ycywgaXRlbV0ubWFwKChlbCkgPT4gZWwudGV4dExhYmVsKTtcbiAgICAgIGNvbnN0IGxhYmVsID0gc2VsZWN0aW9uTW9kZSAhPT0gXCJhbmNlc3RvcnNcIiA/IGl0ZW0udGV4dExhYmVsIDogcGF0aExhYmVsLmpvaW4oXCIgLyBcIik7XG4gICAgICByZXR1cm4gKGgoXCJjYWxjaXRlLWNoaXBcIiwgeyBjbGFzczogY2hpcENsYXNzZXMsIGNsb3NhYmxlOiB0cnVlLCBpY29uOiBpdGVtLmljb24sIGljb25GbGlwUnRsOiBpdGVtLmljb25GbGlwUnRsLCBpZDogaXRlbS5ndWlkID8gYCR7Y2hpcFVpZFByZWZpeH0ke2l0ZW0uZ3VpZH1gIDogbnVsbCwga2V5OiBpdGVtLnRleHRMYWJlbCwgbWVzc2FnZU92ZXJyaWRlczogeyBkaXNtaXNzTGFiZWw6IG1lc3NhZ2VzLnJlbW92ZVRhZyB9LCBvbkNhbGNpdGVDaGlwQ2xvc2U6ICgpID0+IHRoaXMuY2FsY2l0ZUNoaXBDbG9zZUhhbmRsZXIoaXRlbSksIHNjYWxlOiBzY2FsZSwgc2VsZWN0ZWQ6IGl0ZW0uc2VsZWN0ZWQsIHRpdGxlOiBsYWJlbCwgdmFsdWU6IGl0ZW0udmFsdWUgfSwgbGFiZWwpKTtcbiAgICB9KTtcbiAgfVxuICByZW5kZXJBbGxTZWxlY3RlZEluZGljYXRvckNoaXAoKSB7XG4gICAgY29uc3QgeyBjb21wYWN0U2VsZWN0aW9uRGlzcGxheSwgc2NhbGUsIHNlbGVjdGVkVmlzaWJsZUNoaXBzQ291bnQsIHNldEFsbFNlbGVjdGVkSW5kaWNhdG9yQ2hpcEVsLCB9ID0gdGhpcztcbiAgICBjb25zdCBsYWJlbCA9IHRoaXMubWVzc2FnZXMuYWxsU2VsZWN0ZWQ7XG4gICAgcmV0dXJuIChoKFwiY2FsY2l0ZS1jaGlwXCIsIHsgY2xhc3M6IHtcbiAgICAgICAgY2hpcDogdHJ1ZSxcbiAgICAgICAgW0NTUyQzLmNoaXBJbnZpc2libGVdOiAhKHRoaXMuaXNBbGxTZWxlY3RlZCgpICYmXG4gICAgICAgICAgIXNlbGVjdGVkVmlzaWJsZUNoaXBzQ291bnQgJiZcbiAgICAgICAgICAhY29tcGFjdFNlbGVjdGlvbkRpc3BsYXkpLFxuICAgICAgfSwgc2NhbGU6IHNjYWxlLCB0aXRsZTogbGFiZWwsIHZhbHVlOiBcIlwiLFxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0L2pzeC1zb3J0LXByb3BzIC0tIHJlZiBzaG91bGQgYmUgbGFzdCBzbyBub2RlIGF0dHJzL3Byb3BzIGFyZSBpbiBzeW5jIChzZWUgaHR0cHM6Ly9naXRodWIuY29tL0VzcmkvY2FsY2l0ZS1kZXNpZ24tc3lzdGVtL3B1bGwvNjUzMClcbiAgICAgIHJlZjogc2V0QWxsU2VsZWN0ZWRJbmRpY2F0b3JDaGlwRWwgfSwgbGFiZWwpKTtcbiAgfVxuICByZW5kZXJBbGxTZWxlY3RlZEluZGljYXRvckNoaXBDb21wYWN0KCkge1xuICAgIGNvbnN0IHsgY29tcGFjdFNlbGVjdGlvbkRpc3BsYXksIHNjYWxlLCBzZWxlY3RlZFZpc2libGVDaGlwc0NvdW50IH0gPSB0aGlzO1xuICAgIGNvbnN0IGxhYmVsID0gdGhpcy5tZXNzYWdlcy5hbGwgfHwgXCJBbGxcIjtcbiAgICByZXR1cm4gKGgoXCJjYWxjaXRlLWNoaXBcIiwgeyBjbGFzczoge1xuICAgICAgICBjaGlwOiB0cnVlLFxuICAgICAgICBbQ1NTJDMuY2hpcEludmlzaWJsZV06ICEodGhpcy5pc0FsbFNlbGVjdGVkKCkgJiZcbiAgICAgICAgICAhc2VsZWN0ZWRWaXNpYmxlQ2hpcHNDb3VudCAmJlxuICAgICAgICAgIGNvbXBhY3RTZWxlY3Rpb25EaXNwbGF5KSxcbiAgICAgIH0sIHNjYWxlOiBzY2FsZSwgdGl0bGU6IGxhYmVsLCB2YWx1ZTogXCJcIiB9LCBsYWJlbCkpO1xuICB9XG4gIHJlbmRlclNlbGVjdGVkSW5kaWNhdG9yQ2hpcCgpIHtcbiAgICBjb25zdCB7IGNvbXBhY3RTZWxlY3Rpb25EaXNwbGF5LCBzZWxlY3Rpb25EaXNwbGF5LCBnZXRTZWxlY3RlZEl0ZW1zLCBzY2FsZSwgc2VsZWN0ZWRIaWRkZW5DaGlwc0NvdW50LCBzZWxlY3RlZFZpc2libGVDaGlwc0NvdW50LCBzZXRTZWxlY3RlZEluZGljYXRvckNoaXBFbCwgfSA9IHRoaXM7XG4gICAgbGV0IGNoaXBJbnZpc2libGU7XG4gICAgbGV0IGxhYmVsO1xuICAgIGlmIChjb21wYWN0U2VsZWN0aW9uRGlzcGxheSkge1xuICAgICAgY2hpcEludmlzaWJsZSA9IHRydWU7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgaWYgKHNlbGVjdGlvbkRpc3BsYXkgPT09IFwic2luZ2xlXCIpIHtcbiAgICAgICAgY29uc3Qgc2VsZWN0ZWRJdGVtc0NvdW50ID0gZ2V0U2VsZWN0ZWRJdGVtcygpLmxlbmd0aDtcbiAgICAgICAgaWYgKHRoaXMuaXNBbGxTZWxlY3RlZCgpKSB7XG4gICAgICAgICAgY2hpcEludmlzaWJsZSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoc2VsZWN0ZWRJdGVtc0NvdW50ID4gMCkge1xuICAgICAgICAgIGNoaXBJbnZpc2libGUgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBjaGlwSW52aXNpYmxlID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBsYWJlbCA9IGAke3NlbGVjdGVkSXRlbXNDb3VudH0gJHt0aGlzLm1lc3NhZ2VzLnNlbGVjdGVkfWA7XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChzZWxlY3Rpb25EaXNwbGF5ID09PSBcImZpdFwiKSB7XG4gICAgICAgIGNoaXBJbnZpc2libGUgPSAhISgodGhpcy5pc0FsbFNlbGVjdGVkKCkgJiYgc2VsZWN0ZWRWaXNpYmxlQ2hpcHNDb3VudCA9PT0gMCkgfHxcbiAgICAgICAgICBzZWxlY3RlZEhpZGRlbkNoaXBzQ291bnQgPT09IDApO1xuICAgICAgICBsYWJlbCA9XG4gICAgICAgICAgc2VsZWN0ZWRWaXNpYmxlQ2hpcHNDb3VudCA+IDBcbiAgICAgICAgICAgID8gYCske3NlbGVjdGVkSGlkZGVuQ2hpcHNDb3VudH1gXG4gICAgICAgICAgICA6IGAke3NlbGVjdGVkSGlkZGVuQ2hpcHNDb3VudH0gJHt0aGlzLm1lc3NhZ2VzLnNlbGVjdGVkfWA7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiAoaChcImNhbGNpdGUtY2hpcFwiLCB7IGNsYXNzOiB7XG4gICAgICAgIGNoaXA6IHRydWUsXG4gICAgICAgIFtDU1MkMy5jaGlwSW52aXNpYmxlXTogY2hpcEludmlzaWJsZSxcbiAgICAgIH0sIHNjYWxlOiBzY2FsZSwgdGl0bGU6IGxhYmVsLCB2YWx1ZTogXCJcIixcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC9qc3gtc29ydC1wcm9wcyAtLSByZWYgc2hvdWxkIGJlIGxhc3Qgc28gbm9kZSBhdHRycy9wcm9wcyBhcmUgaW4gc3luYyAoc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9Fc3JpL2NhbGNpdGUtZGVzaWduLXN5c3RlbS9wdWxsLzY1MzApXG4gICAgICByZWY6IHNldFNlbGVjdGVkSW5kaWNhdG9yQ2hpcEVsIH0sIGxhYmVsKSk7XG4gIH1cbiAgcmVuZGVyU2VsZWN0ZWRJbmRpY2F0b3JDaGlwQ29tcGFjdCgpIHtcbiAgICBjb25zdCB7IGNvbXBhY3RTZWxlY3Rpb25EaXNwbGF5LCBzZWxlY3Rpb25EaXNwbGF5LCBnZXRTZWxlY3RlZEl0ZW1zLCBzY2FsZSwgc2VsZWN0ZWRIaWRkZW5DaGlwc0NvdW50LCB9ID0gdGhpcztcbiAgICBsZXQgY2hpcEludmlzaWJsZTtcbiAgICBsZXQgbGFiZWw7XG4gICAgaWYgKGNvbXBhY3RTZWxlY3Rpb25EaXNwbGF5KSB7XG4gICAgICBjb25zdCBzZWxlY3RlZEl0ZW1zQ291bnQgPSBnZXRTZWxlY3RlZEl0ZW1zKCkubGVuZ3RoO1xuICAgICAgaWYgKHRoaXMuaXNBbGxTZWxlY3RlZCgpKSB7XG4gICAgICAgIGNoaXBJbnZpc2libGUgPSB0cnVlO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAoc2VsZWN0aW9uRGlzcGxheSA9PT0gXCJmaXRcIikge1xuICAgICAgICBjaGlwSW52aXNpYmxlID0gIShzZWxlY3RlZEhpZGRlbkNoaXBzQ291bnQgPiAwKTtcbiAgICAgICAgbGFiZWwgPSBgJHtzZWxlY3RlZEhpZGRlbkNoaXBzQ291bnQgfHwgMH1gO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAoc2VsZWN0aW9uRGlzcGxheSA9PT0gXCJzaW5nbGVcIikge1xuICAgICAgICBjaGlwSW52aXNpYmxlID0gIShzZWxlY3RlZEl0ZW1zQ291bnQgPiAwKTtcbiAgICAgICAgbGFiZWwgPSBgJHtzZWxlY3RlZEl0ZW1zQ291bnR9YDtcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBjaGlwSW52aXNpYmxlID0gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIChoKFwiY2FsY2l0ZS1jaGlwXCIsIHsgY2xhc3M6IHtcbiAgICAgICAgY2hpcDogdHJ1ZSxcbiAgICAgICAgW0NTUyQzLmNoaXBJbnZpc2libGVdOiBjaGlwSW52aXNpYmxlLFxuICAgICAgfSwgc2NhbGU6IHNjYWxlLCB0aXRsZTogbGFiZWwsIHZhbHVlOiBcIlwiIH0sIGxhYmVsKSk7XG4gIH1cbiAgcmVuZGVySW5wdXQoKSB7XG4gICAgY29uc3QgeyBndWlkLCBkaXNhYmxlZCwgcGxhY2Vob2xkZXIsIHNlbGVjdGlvbk1vZGUsIHNlbGVjdGVkSXRlbXMsIG9wZW4gfSA9IHRoaXM7XG4gICAgY29uc3Qgc2luZ2xlID0gaXNTaW5nbGVMaWtlKHNlbGVjdGlvbk1vZGUpO1xuICAgIGNvbnN0IHNlbGVjdGVkSXRlbSA9IHNlbGVjdGVkSXRlbXNbMF07XG4gICAgY29uc3Qgc2hvd0xhYmVsID0gIW9wZW4gJiYgc2luZ2xlICYmICEhc2VsZWN0ZWRJdGVtO1xuICAgIHJldHVybiAoaChcInNwYW5cIiwgeyBjbGFzczoge1xuICAgICAgICBcImlucHV0LXdyYXBcIjogdHJ1ZSxcbiAgICAgICAgXCJpbnB1dC13cmFwLS1zaW5nbGVcIjogc2luZ2xlLFxuICAgICAgfSB9LCBzaG93TGFiZWwgJiYgKGgoXCJzcGFuXCIsIHsgY2xhc3M6IHtcbiAgICAgICAgbGFiZWw6IHRydWUsXG4gICAgICAgIFwibGFiZWwtLWljb25cIjogISFzZWxlY3RlZEl0ZW0/Lmljb24sXG4gICAgICB9LCBrZXk6IFwibGFiZWxcIiB9LCBzZWxlY3RlZEl0ZW0udGV4dExhYmVsKSksIGgoXCJpbnB1dFwiLCB7IFwiYXJpYS1hY3RpdmVkZXNjZW5kYW50XCI6IHRoaXMuYWN0aXZlRGVzY2VuZGFudCwgXCJhcmlhLWF1dG9jb21wbGV0ZVwiOiBcImxpc3RcIiwgXCJhcmlhLWNvbnRyb2xzXCI6IGAke2xpc3Rib3hVaWRQcmVmaXh9JHtndWlkfWAsIFwiYXJpYS1sYWJlbFwiOiBnZXRMYWJlbFRleHQodGhpcyksIGNsYXNzOiB7XG4gICAgICAgIGlucHV0OiB0cnVlLFxuICAgICAgICBcImlucHV0LS1zaW5nbGVcIjogdHJ1ZSxcbiAgICAgICAgXCJpbnB1dC0tdHJhbnNwYXJlbnRcIjogdGhpcy5hY3RpdmVDaGlwSW5kZXggPiAtMSxcbiAgICAgICAgXCJpbnB1dC0taGlkZGVuXCI6IHNob3dMYWJlbCxcbiAgICAgICAgXCJpbnB1dC0taWNvblwiOiAhIXRoaXMucGxhY2Vob2xkZXJJY29uLFxuICAgICAgfSwgZGlzYWJsZWQ6IGRpc2FibGVkLCBpZDogYCR7aW5wdXRVaWRQcmVmaXh9JHtndWlkfWAsIGtleTogXCJpbnB1dFwiLCBvbkZvY3VzOiB0aGlzLmNvbWJvYm94Rm9jdXNIYW5kbGVyLCBvbklucHV0OiB0aGlzLmlucHV0SGFuZGxlciwgcGxhY2Vob2xkZXI6IHBsYWNlaG9sZGVyLCB0eXBlOiBcInRleHRcIixcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC9qc3gtc29ydC1wcm9wcyAtLSByZWYgc2hvdWxkIGJlIGxhc3Qgc28gbm9kZSBhdHRycy9wcm9wcyBhcmUgaW4gc3luYyAoc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9Fc3JpL2NhbGNpdGUtZGVzaWduLXN5c3RlbS9wdWxsLzY1MzApXG4gICAgICByZWY6IChlbCkgPT4gKHRoaXMudGV4dElucHV0ID0gZWwpIH0pKSk7XG4gIH1cbiAgcmVuZGVyTGlzdEJveE9wdGlvbnMoKSB7XG4gICAgcmV0dXJuIHRoaXMuZmlsdGVyZWRJdGVtcy5tYXAoKGl0ZW0pID0+IChoKFwibGlcIiwgeyBcImFyaWEtc2VsZWN0ZWRcIjogdG9BcmlhQm9vbGVhbihpdGVtLnNlbGVjdGVkKSwgaWQ6IGl0ZW0uZ3VpZCA/IGAke2l0ZW1VaWRQcmVmaXh9JHtpdGVtLmd1aWR9YCA6IG51bGwsIHJvbGU6IFwib3B0aW9uXCIsIHRhYmluZGV4OiBcIi0xXCIgfSwgaXRlbS50ZXh0TGFiZWwpKSk7XG4gIH1cbiAgcmVuZGVyRmxvYXRpbmdVSUNvbnRhaW5lcigpIHtcbiAgICBjb25zdCB7IHNldEZsb2F0aW5nRWwsIHNldENvbnRhaW5lckVsLCBvcGVuIH0gPSB0aGlzO1xuICAgIGNvbnN0IGNsYXNzZXMgPSB7XG4gICAgICBbQ1NTJDMubGlzdENvbnRhaW5lcl06IHRydWUsXG4gICAgICBbRmxvYXRpbmdDU1MuYW5pbWF0aW9uXTogdHJ1ZSxcbiAgICAgIFtGbG9hdGluZ0NTUy5hbmltYXRpb25BY3RpdmVdOiBvcGVuLFxuICAgIH07XG4gICAgcmV0dXJuIChoKFwiZGl2XCIsIHsgXCJhcmlhLWhpZGRlblwiOiBcInRydWVcIiwgY2xhc3M6IHtcbiAgICAgICAgXCJmbG9hdGluZy11aS1jb250YWluZXJcIjogdHJ1ZSxcbiAgICAgICAgXCJmbG9hdGluZy11aS1jb250YWluZXItLWFjdGl2ZVwiOiBvcGVuLFxuICAgICAgfSxcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC9qc3gtc29ydC1wcm9wcyAtLSByZWYgc2hvdWxkIGJlIGxhc3Qgc28gbm9kZSBhdHRycy9wcm9wcyBhcmUgaW4gc3luYyAoc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9Fc3JpL2NhbGNpdGUtZGVzaWduLXN5c3RlbS9wdWxsLzY1MzApXG4gICAgICByZWY6IHNldEZsb2F0aW5nRWwgfSwgaChcImRpdlwiLCB7IGNsYXNzOiBjbGFzc2VzLFxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0L2pzeC1zb3J0LXByb3BzIC0tIHJlZiBzaG91bGQgYmUgbGFzdCBzbyBub2RlIGF0dHJzL3Byb3BzIGFyZSBpbiBzeW5jIChzZWUgaHR0cHM6Ly9naXRodWIuY29tL0VzcmkvY2FsY2l0ZS1kZXNpZ24tc3lzdGVtL3B1bGwvNjUzMClcbiAgICAgIHJlZjogc2V0Q29udGFpbmVyRWwgfSwgaChcInVsXCIsIHsgY2xhc3M6IHsgbGlzdDogdHJ1ZSwgXCJsaXN0LS1oaWRlXCI6ICFvcGVuIH0gfSwgaChcInNsb3RcIiwgbnVsbCkpKSkpO1xuICB9XG4gIHJlbmRlckljb25TdGFydCgpIHtcbiAgICBjb25zdCB7IHNlbGVjdGVkSXRlbXMsIHBsYWNlaG9sZGVySWNvbiwgc2VsZWN0aW9uTW9kZSwgcGxhY2Vob2xkZXJJY29uRmxpcFJ0bCB9ID0gdGhpcztcbiAgICBjb25zdCBzZWxlY3RlZEl0ZW0gPSBzZWxlY3RlZEl0ZW1zWzBdO1xuICAgIGNvbnN0IHNlbGVjdGVkSWNvbiA9IHNlbGVjdGVkSXRlbT8uaWNvbjtcbiAgICBjb25zdCBzaW5nbGVTZWxlY3Rpb25Nb2RlID0gaXNTaW5nbGVMaWtlKHNlbGVjdGlvbk1vZGUpO1xuICAgIGNvbnN0IGljb25BdFN0YXJ0ID0gIXRoaXMub3BlbiAmJiBzZWxlY3RlZEl0ZW1cbiAgICAgID8gISFzZWxlY3RlZEljb24gJiYgc2luZ2xlU2VsZWN0aW9uTW9kZVxuICAgICAgOiAhIXRoaXMucGxhY2Vob2xkZXJJY29uICYmICghc2VsZWN0ZWRJdGVtIHx8IHNpbmdsZVNlbGVjdGlvbk1vZGUpO1xuICAgIHJldHVybiAoaWNvbkF0U3RhcnQgJiYgKGgoXCJzcGFuXCIsIHsgY2xhc3M6IFwiaWNvbi1zdGFydFwiIH0sIGgoXCJjYWxjaXRlLWljb25cIiwgeyBjbGFzczogXCJzZWxlY3RlZC1pY29uXCIsIGZsaXBSdGw6IHRoaXMub3BlbiAmJiBzZWxlY3RlZEl0ZW0gPyBzZWxlY3RlZEl0ZW0uaWNvbkZsaXBSdGwgOiBwbGFjZWhvbGRlckljb25GbGlwUnRsLCBpY29uOiAhdGhpcy5vcGVuICYmIHNlbGVjdGVkSXRlbSA/IHNlbGVjdGVkSWNvbiA6IHBsYWNlaG9sZGVySWNvbiwgc2NhbGU6IGdldEljb25TY2FsZSh0aGlzLnNjYWxlKSB9KSkpKTtcbiAgfVxuICByZW5kZXJJY29uRW5kKCkge1xuICAgIGNvbnN0IHsgb3BlbiB9ID0gdGhpcztcbiAgICByZXR1cm4gKGgoXCJzcGFuXCIsIHsgY2xhc3M6IFwiaWNvbi1lbmRcIiB9LCBoKFwiY2FsY2l0ZS1pY29uXCIsIHsgaWNvbjogb3BlbiA/IFwiY2hldnJvbi11cFwiIDogXCJjaGV2cm9uLWRvd25cIiwgc2NhbGU6IGdldEljb25TY2FsZSh0aGlzLnNjYWxlKSB9KSkpO1xuICB9XG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IHNlbGVjdGlvbkRpc3BsYXksIGd1aWQsIGxhYmVsLCBvcGVuIH0gPSB0aGlzO1xuICAgIGNvbnN0IHNpbmdsZVNlbGVjdGlvbk1vZGUgPSBpc1NpbmdsZUxpa2UodGhpcy5zZWxlY3Rpb25Nb2RlKTtcbiAgICBjb25zdCBhbGxTZWxlY3Rpb25EaXNwbGF5ID0gc2VsZWN0aW9uRGlzcGxheSA9PT0gXCJhbGxcIjtcbiAgICBjb25zdCBzaW5nbGVTZWxlY3Rpb25EaXNwbGF5ID0gc2VsZWN0aW9uRGlzcGxheSA9PT0gXCJzaW5nbGVcIjtcbiAgICBjb25zdCBmaXRTZWxlY3Rpb25EaXNwbGF5ID0gIXNpbmdsZVNlbGVjdGlvbk1vZGUgJiYgc2VsZWN0aW9uRGlzcGxheSA9PT0gXCJmaXRcIjtcbiAgICBjb25zdCBpc0NsZWFyYWJsZSA9ICF0aGlzLmNsZWFyRGlzYWJsZWQgJiYgdGhpcy52YWx1ZT8ubGVuZ3RoID4gMDtcbiAgICByZXR1cm4gKGgoSG9zdCwgeyBvbkNsaWNrOiB0aGlzLmNvbWJvYm94Rm9jdXNIYW5kbGVyIH0sIGgoXCJkaXZcIiwgeyBcImFyaWEtYXV0b2NvbXBsZXRlXCI6IFwibGlzdFwiLCBcImFyaWEtY29udHJvbHNcIjogYCR7bGlzdGJveFVpZFByZWZpeH0ke2d1aWR9YCwgXCJhcmlhLWV4cGFuZGVkXCI6IHRvQXJpYUJvb2xlYW4ob3BlbiksIFwiYXJpYS1oYXNwb3B1cFwiOiBcImxpc3Rib3hcIiwgXCJhcmlhLWxhYmVsXCI6IGdldExhYmVsVGV4dCh0aGlzKSwgXCJhcmlhLWxpdmVcIjogXCJwb2xpdGVcIiwgXCJhcmlhLW93bnNcIjogYCR7bGlzdGJveFVpZFByZWZpeH0ke2d1aWR9YCwgY2xhc3M6IHtcbiAgICAgICAgd3JhcHBlcjogdHJ1ZSxcbiAgICAgICAgXCJ3cmFwcGVyLS1zaW5nbGVcIjogc2luZ2xlU2VsZWN0aW9uTW9kZSB8fCAhdGhpcy5zZWxlY3RlZEl0ZW1zLmxlbmd0aCxcbiAgICAgICAgXCJ3cmFwcGVyLS1hY3RpdmVcIjogb3BlbixcbiAgICAgIH0sIG9uQ2xpY2s6IHRoaXMuY2xpY2tIYW5kbGVyLCBvbktleURvd246IHRoaXMua2V5RG93bkhhbmRsZXIsIHJvbGU6IFwiY29tYm9ib3hcIixcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC9qc3gtc29ydC1wcm9wcyAtLSByZWYgc2hvdWxkIGJlIGxhc3Qgc28gbm9kZSBhdHRycy9wcm9wcyBhcmUgaW4gc3luYyAoc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9Fc3JpL2NhbGNpdGUtZGVzaWduLXN5c3RlbS9wdWxsLzY1MzApXG4gICAgICByZWY6IHRoaXMuc2V0UmVmZXJlbmNlRWwgfSwgaChcImRpdlwiLCB7IGNsYXNzOiB7XG4gICAgICAgIFwiZ3JpZC1pbnB1dFwiOiB0cnVlLFxuICAgICAgICBbQ1NTJDMuc2VsZWN0aW9uRGlzcGxheUZpdF06IGZpdFNlbGVjdGlvbkRpc3BsYXksXG4gICAgICAgIFtDU1MkMy5zZWxlY3Rpb25EaXNwbGF5U2luZ2xlXTogc2luZ2xlU2VsZWN0aW9uRGlzcGxheSxcbiAgICAgIH0sIHJlZjogdGhpcy5zZXRDaGlwQ29udGFpbmVyRWwgfSwgdGhpcy5yZW5kZXJJY29uU3RhcnQoKSwgIXNpbmdsZVNlbGVjdGlvbk1vZGUgJiYgIXNpbmdsZVNlbGVjdGlvbkRpc3BsYXkgJiYgdGhpcy5yZW5kZXJDaGlwcygpLCAhc2luZ2xlU2VsZWN0aW9uTW9kZSAmJlxuICAgICAgIWFsbFNlbGVjdGlvbkRpc3BsYXkgJiYgW1xuICAgICAgdGhpcy5yZW5kZXJTZWxlY3RlZEluZGljYXRvckNoaXAoKSxcbiAgICAgIHRoaXMucmVuZGVyU2VsZWN0ZWRJbmRpY2F0b3JDaGlwQ29tcGFjdCgpLFxuICAgICAgdGhpcy5yZW5kZXJBbGxTZWxlY3RlZEluZGljYXRvckNoaXAoKSxcbiAgICAgIHRoaXMucmVuZGVyQWxsU2VsZWN0ZWRJbmRpY2F0b3JDaGlwQ29tcGFjdCgpLFxuICAgIF0sIGgoXCJsYWJlbFwiLCB7IGNsYXNzOiBcInNjcmVlbi1yZWFkZXJzLW9ubHlcIiwgaHRtbEZvcjogYCR7aW5wdXRVaWRQcmVmaXh9JHtndWlkfWAsIGlkOiBgJHtsYWJlbFVpZFByZWZpeH0ke2d1aWR9YCB9LCBsYWJlbCksIHRoaXMucmVuZGVySW5wdXQoKSksIGlzQ2xlYXJhYmxlID8gKGgoWEJ1dHRvbiwgeyBkaXNhYmxlZDogdGhpcy5kaXNhYmxlZCwga2V5OiBcImNsb3NlLWJ1dHRvblwiLCBsYWJlbDogdGhpcy5tZXNzYWdlcy5jbGVhciwgc2NhbGU6IHRoaXMuc2NhbGUgfSkpIDogbnVsbCwgdGhpcy5yZW5kZXJJY29uRW5kKCkpLCBoKFwidWxcIiwgeyBcImFyaWEtbGFiZWxsZWRieVwiOiBgJHtsYWJlbFVpZFByZWZpeH0ke2d1aWR9YCwgXCJhcmlhLW11bHRpc2VsZWN0YWJsZVwiOiBcInRydWVcIiwgY2xhc3M6IFwic2NyZWVuLXJlYWRlcnMtb25seVwiLCBpZDogYCR7bGlzdGJveFVpZFByZWZpeH0ke2d1aWR9YCwgcm9sZTogXCJsaXN0Ym94XCIsIHRhYkluZGV4OiAtMSB9LCB0aGlzLnJlbmRlckxpc3RCb3hPcHRpb25zKCkpLCB0aGlzLnJlbmRlckZsb2F0aW5nVUlDb250YWluZXIoKSwgaChIaWRkZW5Gb3JtSW5wdXRTbG90LCB7IGNvbXBvbmVudDogdGhpcyB9KSkpO1xuICB9XG4gIHN0YXRpYyBnZXQgYXNzZXRzRGlycygpIHsgcmV0dXJuIFtcImFzc2V0c1wiXTsgfVxuICBnZXQgZWwoKSB7IHJldHVybiBnZXRFbGVtZW50KHRoaXMpOyB9XG4gIHN0YXRpYyBnZXQgd2F0Y2hlcnMoKSB7IHJldHVybiB7XG4gICAgXCJvcGVuXCI6IFtcIm9wZW5IYW5kbGVyXCJdLFxuICAgIFwiZGlzYWJsZWRcIjogW1wiaGFuZGxlRGlzYWJsZWRDaGFuZ2VcIl0sXG4gICAgXCJtYXhJdGVtc1wiOiBbXCJtYXhJdGVtc0hhbmRsZXJcIl0sXG4gICAgXCJvdmVybGF5UG9zaXRpb25pbmdcIjogW1wib3ZlcmxheVBvc2l0aW9uaW5nSGFuZGxlclwiXSxcbiAgICBcInNlbGVjdGlvbk1vZGVcIjogW1wiaGFuZGxlUHJvcHNDaGFuZ2VcIl0sXG4gICAgXCJzY2FsZVwiOiBbXCJoYW5kbGVQcm9wc0NoYW5nZVwiXSxcbiAgICBcInZhbHVlXCI6IFtcInZhbHVlSGFuZGxlclwiXSxcbiAgICBcIm1lc3NhZ2VPdmVycmlkZXNcIjogW1wib25NZXNzYWdlc0NoYW5nZVwiXSxcbiAgICBcImZsaXBQbGFjZW1lbnRzXCI6IFtcImZsaXBQbGFjZW1lbnRzSGFuZGxlclwiXSxcbiAgICBcInNlbGVjdGVkSXRlbXNcIjogW1wic2VsZWN0ZWRJdGVtc0hhbmRsZXJcIl0sXG4gICAgXCJ0ZXh0XCI6IFtcInRleHRIYW5kbGVyXCJdLFxuICAgIFwiZWZmZWN0aXZlTG9jYWxlXCI6IFtcImVmZmVjdGl2ZUxvY2FsZUNoYW5nZVwiXVxuICB9OyB9XG59O1xuQ29tYm9ib3guc3R5bGUgPSBjb21ib2JveENzcztcblxuY29uc3QgQ1NTJDEgPSB7XG4gIGljb246IFwiaWNvblwiLFxuICBpY29uQWN0aXZlOiBcImljb24tLWFjdGl2ZVwiLFxuICBpY29uSW5kZW50OiBcImljb24tLWluZGVudFwiLFxuICBjdXN0b206IFwiaWNvbi0tY3VzdG9tXCIsXG4gIGRvdDogXCJpY29uLS1kb3RcIixcbiAgc2luZ2xlOiBcImxhYmVsLS1zaW5nbGVcIixcbiAgbGFiZWw6IFwibGFiZWxcIixcbiAgYWN0aXZlOiBcImxhYmVsLS1hY3RpdmVcIixcbiAgc2VsZWN0ZWQ6IFwibGFiZWwtLXNlbGVjdGVkXCIsXG4gIHRpdGxlOiBcInRpdGxlXCIsXG4gIHRleHRDb250YWluZXI6IFwidGV4dC1jb250YWluZXJcIixcbn07XG5cbmNvbnN0IGNvbWJvYm94SXRlbUNzcyA9IFwiQGNoYXJzZXQgXFxcIlVURi04XFxcIjs6aG9zdChbZGlzYWJsZWRdKXtjdXJzb3I6ZGVmYXVsdDstd2Via2l0LXVzZXItc2VsZWN0Om5vbmU7dXNlci1zZWxlY3Q6bm9uZTtvcGFjaXR5OnZhcigtLWNhbGNpdGUtb3BhY2l0eS1kaXNhYmxlZCl9Omhvc3QoW2Rpc2FibGVkXSkgKiw6aG9zdChbZGlzYWJsZWRdKSA6OnNsb3R0ZWQoKil7cG9pbnRlci1ldmVudHM6bm9uZX06aG9zdChbaGlkZGVuXSl7ZGlzcGxheTpub25lfVtoaWRkZW5de2Rpc3BsYXk6bm9uZX0uc2NhbGUtLXN7Zm9udC1zaXplOnZhcigtLWNhbGNpdGUtZm9udC1zaXplLS0yKTtsaW5lLWhlaWdodDoxcmVtOy0tY2FsY2l0ZS1jb21ib2JveC1pdGVtLXNwYWNpbmctdW5pdC1sOjAuNXJlbTstLWNhbGNpdGUtY29tYm9ib3gtaXRlbS1zcGFjaW5nLXVuaXQtczowLjI1cmVtOy0tY2FsY2l0ZS1jb21ib2JveC1pdGVtLXNwYWNpbmctaW5kZW50OjAuNXJlbTstLWNhbGNpdGUtY29tYm9ib3gtaXRlbS1zZWxlY3Rvci1pY29uLXNpemU6MXJlbX0uc2NhbGUtLW17Zm9udC1zaXplOnZhcigtLWNhbGNpdGUtZm9udC1zaXplLS0xKTtsaW5lLWhlaWdodDoxcmVtOy0tY2FsY2l0ZS1jb21ib2JveC1pdGVtLXNwYWNpbmctdW5pdC1sOjAuNzVyZW07LS1jYWxjaXRlLWNvbWJvYm94LWl0ZW0tc3BhY2luZy11bml0LXM6MC41cmVtOy0tY2FsY2l0ZS1jb21ib2JveC1pdGVtLXNwYWNpbmctaW5kZW50OjAuNzVyZW07LS1jYWxjaXRlLWNvbWJvYm94LWl0ZW0tc2VsZWN0b3ItaWNvbi1zaXplOjFyZW19LnNjYWxlLS1se2ZvbnQtc2l6ZTp2YXIoLS1jYWxjaXRlLWZvbnQtc2l6ZS0wKTtsaW5lLWhlaWdodDoxLjI1cmVtOy0tY2FsY2l0ZS1jb21ib2JveC1pdGVtLXNwYWNpbmctdW5pdC1sOjFyZW07LS1jYWxjaXRlLWNvbWJvYm94LWl0ZW0tc3BhY2luZy11bml0LXM6MC42MjVyZW07LS1jYWxjaXRlLWNvbWJvYm94LWl0ZW0tc3BhY2luZy1pbmRlbnQ6MXJlbTstLWNhbGNpdGUtY29tYm9ib3gtaXRlbS1zZWxlY3Rvci1pY29uLXNpemU6MS41cmVtfS5jb250YWluZXJ7LS1jYWxjaXRlLWNvbWJvYm94LWl0ZW0taW5kZW50LXZhbHVlOmNhbGMoXFxuICAgIHZhcigtLWNhbGNpdGUtY29tYm9ib3gtaXRlbS1zcGFjaW5nLWluZGVudCkgKiB2YXIoLS1jYWxjaXRlLWNvbWJvYm94LWl0ZW0tc3BhY2luZy1pbmRlbnQtbXVsdGlwbGllcilcXG4gICl9Omhvc3QoOmZvY3VzKXstLXR3LXNoYWRvdzowIDAgIzAwMDA7LS10dy1zaGFkb3ctY29sb3JlZDowIDAgIzAwMDA7Ym94LXNoYWRvdzp2YXIoLS10dy1yaW5nLW9mZnNldC1zaGFkb3csIDAgMCAjMDAwMCksIHZhcigtLXR3LXJpbmctc2hhZG93LCAwIDAgIzAwMDApLCB2YXIoLS10dy1zaGFkb3cpfTpob3N0KFtkaXNhYmxlZF0pIDo6c2xvdHRlZChbY2FsY2l0ZS1oeWRyYXRlZF1bZGlzYWJsZWRdKSw6aG9zdChbZGlzYWJsZWRdKSBbY2FsY2l0ZS1oeWRyYXRlZF1bZGlzYWJsZWRde29wYWNpdHk6MX06aG9zdCx1bHttYXJnaW46MHB4O2Rpc3BsYXk6ZmxleDtmbGV4LWRpcmVjdGlvbjpjb2x1bW47cGFkZGluZzowcHh9Omhvc3QoOmZvY3VzKSx1bDpmb2N1c3tvdXRsaW5lOjJweCBzb2xpZCB0cmFuc3BhcmVudDtvdXRsaW5lLW9mZnNldDoycHh9LmxhYmVse3Bvc2l0aW9uOnJlbGF0aXZlO2JveC1zaXppbmc6Ym9yZGVyLWJveDtkaXNwbGF5OmZsZXg7aW5saW5lLXNpemU6MTAwJTttaW4taW5saW5lLXNpemU6MTAwJTtjdXJzb3I6cG9pbnRlcjthbGlnbi1pdGVtczpjZW50ZXI7Y29sb3I6dmFyKC0tY2FsY2l0ZS1jb2xvci10ZXh0LTMpO3RleHQtZGVjb3JhdGlvbi1saW5lOm5vbmU7dHJhbnNpdGlvbi1kdXJhdGlvbjoxNTBtczt0cmFuc2l0aW9uLXRpbWluZy1mdW5jdGlvbjpjdWJpYy1iZXppZXIoMC40LCAwLCAwLjIsIDEpO291dGxpbmUtY29sb3I6dHJhbnNwYXJlbnQ7d29yZC13cmFwOmJyZWFrLXdvcmQ7d29yZC1icmVhazpicmVhay13b3JkO3BhZGRpbmctYmxvY2s6dmFyKC0tY2FsY2l0ZS1jb21ib2JveC1pdGVtLXNwYWNpbmctdW5pdC1zKTtwYWRkaW5nLWlubGluZTp2YXIoLS1jYWxjaXRlLWNvbWJvYm94LWl0ZW0tc3BhY2luZy11bml0LWwpfTpob3N0KFtkaXNhYmxlZF0pIC5sYWJlbHtjdXJzb3I6ZGVmYXVsdH0ubGFiZWwtLXNlbGVjdGVke2ZvbnQtd2VpZ2h0OnZhcigtLWNhbGNpdGUtZm9udC13ZWlnaHQtbWVkaXVtKTtjb2xvcjp2YXIoLS1jYWxjaXRlLWNvbG9yLXRleHQtMSl9LmxhYmVsLS1hY3RpdmV7b3V0bGluZToycHggc29saWQgdmFyKC0tY2FsY2l0ZS1jb2xvci1icmFuZCk7b3V0bGluZS1vZmZzZXQ6Y2FsYyhcXG4gICAgICAgICAgICAtMnB4ICpcXG4gICAgICAgICAgICBjYWxjKFxcbiAgICAgICAgICAgICAgMSAtXFxuICAgICAgICAgICAgICAyICogY2xhbXAoXFxuICAgICAgICAgICAgICAgIDAsXFxuICAgICAgICAgICAgICAgIHZhcigtLWNhbGNpdGUtb2Zmc2V0LWludmVydC1mb2N1cyksXFxuICAgICAgICAgICAgICAgIDFcXG4gICAgICAgICAgICAgIClcXG4gICAgICAgICAgICApXFxuICAgICAgICAgICl9LmxhYmVsOmhvdmVyLC5sYWJlbDphY3RpdmV7YmFja2dyb3VuZC1jb2xvcjp2YXIoLS1jYWxjaXRlLWNvbG9yLWZvcmVncm91bmQtMik7Y29sb3I6dmFyKC0tY2FsY2l0ZS1jb2xvci10ZXh0LTEpO3RleHQtZGVjb3JhdGlvbi1saW5lOm5vbmU7LS10dy1zaGFkb3c6MCAwICMwMDAwOy0tdHctc2hhZG93LWNvbG9yZWQ6MCAwICMwMDAwO2JveC1zaGFkb3c6dmFyKC0tdHctcmluZy1vZmZzZXQtc2hhZG93LCAwIDAgIzAwMDApLCB2YXIoLS10dy1yaW5nLXNoYWRvdywgMCAwICMwMDAwKSwgdmFyKC0tdHctc2hhZG93KX0udGl0bGV7cGFkZGluZy1ibG9jazowO3BhZGRpbmctaW5saW5lOnZhcigtLWNhbGNpdGUtY29tYm9ib3gtaXRlbS1zcGFjaW5nLXVuaXQtbCl9Lmljb257ZGlzcGxheTppbmxpbmUtZmxleDtvcGFjaXR5OjA7dHJhbnNpdGlvbi1kdXJhdGlvbjoxNTBtczt0cmFuc2l0aW9uLXRpbWluZy1mdW5jdGlvbjpjdWJpYy1iZXppZXIoMC40LCAwLCAwLjIsIDEpO2NvbG9yOnZhcigtLWNhbGNpdGUtY29sb3ItYm9yZGVyLTEpfS5pY29uLS1pbmRlbnR7cGFkZGluZy1pbmxpbmUtc3RhcnQ6dmFyKC0tY2FsY2l0ZS1jb21ib2JveC1pdGVtLWluZGVudC12YWx1ZSl9Lmljb24tLWN1c3RvbXttYXJnaW4tYmxvY2stc3RhcnQ6LTFweDtwYWRkaW5nLWlubGluZS1zdGFydDp2YXIoLS1jYWxjaXRlLWNvbWJvYm94LWl0ZW0tc3BhY2luZy11bml0LWwpO2NvbG9yOnZhcigtLWNhbGNpdGUtY29sb3ItdGV4dC0zKX0uaWNvbi0tYWN0aXZle2NvbG9yOnZhcigtLWNhbGNpdGUtY29sb3ItdGV4dC0xKX0uaWNvbi0tZG90e2Rpc3BsYXk6ZmxleDtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyO21pbi1pbmxpbmUtc2l6ZTp2YXIoLS1jYWxjaXRlLWNvbWJvYm94LWl0ZW0tc2VsZWN0b3ItaWNvbi1zaXplKX0uaWNvbi0tZG90OmJlZm9yZXt0ZXh0LWFsaWduOnN0YXJ0O2NvbnRlbnQ6XFxcIuKAolxcXCJ9LmxhYmVsLS1hY3RpdmUgLmljb257b3BhY2l0eToxfS5sYWJlbC0tc2VsZWN0ZWQgLmljb257b3BhY2l0eToxO2NvbG9yOnZhcigtLWNhbGNpdGUtY29sb3ItYnJhbmQpfTpob3N0KDpob3ZlcltkaXNhYmxlZF0pIC5pY29ue29wYWNpdHk6MX1cIjtcblxuY29uc3QgQ29tYm9ib3hJdGVtID0gY2xhc3Mge1xuICBjb25zdHJ1Y3Rvcihob3N0UmVmKSB7XG4gICAgcmVnaXN0ZXJJbnN0YW5jZSh0aGlzLCBob3N0UmVmKTtcbiAgICB0aGlzLmNhbGNpdGVDb21ib2JveEl0ZW1DaGFuZ2UgPSBjcmVhdGVFdmVudCh0aGlzLCBcImNhbGNpdGVDb21ib2JveEl0ZW1DaGFuZ2VcIiwgNik7XG4gICAgdGhpcy5pdGVtQ2xpY2tIYW5kbGVyID0gKCkgPT4ge1xuICAgICAgdGhpcy50b2dnbGVTZWxlY3RlZCgpO1xuICAgIH07XG4gICAgdGhpcy5kaXNhYmxlZCA9IGZhbHNlO1xuICAgIHRoaXMuc2VsZWN0ZWQgPSBmYWxzZTtcbiAgICB0aGlzLmFjdGl2ZSA9IGZhbHNlO1xuICAgIHRoaXMuYW5jZXN0b3JzID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuZ3VpZCA9IGd1aWQoKTtcbiAgICB0aGlzLmljb24gPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5pY29uRmxpcFJ0bCA9IGZhbHNlO1xuICAgIHRoaXMudGV4dExhYmVsID0gdW5kZWZpbmVkO1xuICAgIHRoaXMudmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5maWx0ZXJEaXNhYmxlZCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLnNlbGVjdGlvbk1vZGUgPSBcIm11bHRpcGxlXCI7XG4gICAgdGhpcy5zY2FsZSA9IFwibVwiO1xuICB9XG4gIHNlbGVjdGVkV2F0Y2hIYW5kbGVyKCkge1xuICAgIHRoaXMuY2FsY2l0ZUNvbWJvYm94SXRlbUNoYW5nZS5lbWl0KCk7XG4gIH1cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy9cbiAgLy8gIExpZmVjeWNsZVxuICAvL1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICBjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICB0aGlzLmFuY2VzdG9ycyA9IGdldEFuY2VzdG9ycyh0aGlzLmVsKTtcbiAgICBjb25uZWN0Q29uZGl0aW9uYWxTbG90Q29tcG9uZW50KHRoaXMpO1xuICAgIGNvbm5lY3RJbnRlcmFjdGl2ZSh0aGlzKTtcbiAgfVxuICBkaXNjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICBkaXNjb25uZWN0Q29uZGl0aW9uYWxTbG90Q29tcG9uZW50KHRoaXMpO1xuICAgIGRpc2Nvbm5lY3RJbnRlcmFjdGl2ZSh0aGlzKTtcbiAgfVxuICBjb21wb25lbnREaWRSZW5kZXIoKSB7XG4gICAgdXBkYXRlSG9zdEludGVyYWN0aW9uKHRoaXMpO1xuICB9XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vXG4gIC8vICBQcml2YXRlIE1ldGhvZHNcbiAgLy9cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgdG9nZ2xlU2VsZWN0ZWQoKSB7XG4gICAgY29uc3QgaXNTaW5nbGVQZXJzaXN0U2VsZWN0ID0gdGhpcy5zZWxlY3Rpb25Nb2RlID09PSBcInNpbmdsZS1wZXJzaXN0XCI7XG4gICAgaWYgKHRoaXMuZGlzYWJsZWQgfHwgKGlzU2luZ2xlUGVyc2lzdFNlbGVjdCAmJiB0aGlzLnNlbGVjdGVkKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLnNlbGVjdGVkID0gIXRoaXMuc2VsZWN0ZWQ7XG4gIH1cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy9cbiAgLy8gIFJlbmRlciBNZXRob2RzXG4gIC8vXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIHJlbmRlckljb24oaWNvblBhdGgpIHtcbiAgICByZXR1cm4gdGhpcy5pY29uID8gKGgoXCJjYWxjaXRlLWljb25cIiwgeyBjbGFzczoge1xuICAgICAgICBbQ1NTJDEuY3VzdG9tXTogISF0aGlzLmljb24sXG4gICAgICAgIFtDU1MkMS5pY29uQWN0aXZlXTogdGhpcy5pY29uICYmIHRoaXMuc2VsZWN0ZWQsXG4gICAgICAgIFtDU1MkMS5pY29uSW5kZW50XTogdHJ1ZSxcbiAgICAgIH0sIGZsaXBSdGw6IHRoaXMuaWNvbkZsaXBSdGwsIGljb246IHRoaXMuaWNvbiB8fCBpY29uUGF0aCwga2V5OiBcImljb25cIiwgc2NhbGU6IGdldEljb25TY2FsZSh0aGlzLnNjYWxlKSB9KSkgOiBudWxsO1xuICB9XG4gIHJlbmRlclNlbGVjdEluZGljYXRvcihzaG93RG90LCBpY29uUGF0aCkge1xuICAgIHJldHVybiBzaG93RG90ID8gKGgoXCJzcGFuXCIsIHsgY2xhc3M6IHtcbiAgICAgICAgW0NTUyQxLmljb25dOiB0cnVlLFxuICAgICAgICBbQ1NTJDEuZG90XTogdHJ1ZSxcbiAgICAgICAgW0NTUyQxLmljb25JbmRlbnRdOiB0cnVlLFxuICAgICAgfSB9KSkgOiAoaChcImNhbGNpdGUtaWNvblwiLCB7IGNsYXNzOiB7XG4gICAgICAgIFtDU1MkMS5pY29uXTogdHJ1ZSxcbiAgICAgICAgW0NTUyQxLmljb25BY3RpdmVdOiB0aGlzLnNlbGVjdGVkLFxuICAgICAgICBbQ1NTJDEuaWNvbkluZGVudF06IHRydWUsXG4gICAgICB9LCBmbGlwUnRsOiB0aGlzLmljb25GbGlwUnRsLCBpY29uOiBpY29uUGF0aCwga2V5OiBcImluZGljYXRvclwiLCBzY2FsZTogZ2V0SWNvblNjYWxlKHRoaXMuc2NhbGUpIH0pKTtcbiAgfVxuICByZW5kZXJDaGlsZHJlbigpIHtcbiAgICBpZiAoZ2V0U2xvdHRlZCh0aGlzLmVsKSkge1xuICAgICAgcmV0dXJuIChoKFwidWxcIiwgeyBrZXk6IFwiZGVmYXVsdC1zbG90LWNvbnRhaW5lclwiIH0sIGgoXCJzbG90XCIsIG51bGwpKSk7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCBpc1NpbmdsZVNlbGVjdCA9IGlzU2luZ2xlTGlrZSh0aGlzLnNlbGVjdGlvbk1vZGUpO1xuICAgIGNvbnN0IHNob3dEb3QgPSBpc1NpbmdsZVNlbGVjdCAmJiAhdGhpcy5kaXNhYmxlZDtcbiAgICBjb25zdCBkZWZhdWx0SWNvbiA9IGlzU2luZ2xlU2VsZWN0ID8gXCJkb3RcIiA6IFwiY2hlY2tcIjtcbiAgICBjb25zdCBpY29uUGF0aCA9IHRoaXMuZGlzYWJsZWQgPyBcIlwiIDogZGVmYXVsdEljb247XG4gICAgY29uc3QgY2xhc3NlcyA9IHtcbiAgICAgIFtDU1MkMS5sYWJlbF06IHRydWUsXG4gICAgICBbQ1NTJDEuc2VsZWN0ZWRdOiB0aGlzLnNlbGVjdGVkLFxuICAgICAgW0NTUyQxLmFjdGl2ZV06IHRoaXMuYWN0aXZlLFxuICAgICAgW0NTUyQxLnNpbmdsZV06IGlzU2luZ2xlU2VsZWN0LFxuICAgIH07XG4gICAgY29uc3QgZGVwdGggPSBnZXREZXB0aCh0aGlzLmVsKTtcbiAgICByZXR1cm4gKGgoSG9zdCwgeyBcImFyaWEtaGlkZGVuXCI6IFwidHJ1ZVwiIH0sIGgoXCJkaXZcIiwgeyBjbGFzczogYGNvbnRhaW5lciBzY2FsZS0tJHt0aGlzLnNjYWxlfWAsIHN0eWxlOiB7IFwiLS1jYWxjaXRlLWNvbWJvYm94LWl0ZW0tc3BhY2luZy1pbmRlbnQtbXVsdGlwbGllclwiOiBgJHtkZXB0aH1gIH0gfSwgaChcImxpXCIsIHsgY2xhc3M6IGNsYXNzZXMsIGlkOiB0aGlzLmd1aWQsIG9uQ2xpY2s6IHRoaXMuaXRlbUNsaWNrSGFuZGxlciB9LCB0aGlzLnJlbmRlclNlbGVjdEluZGljYXRvcihzaG93RG90LCBpY29uUGF0aCksIHRoaXMucmVuZGVySWNvbihpY29uUGF0aCksIGgoXCJzcGFuXCIsIHsgY2xhc3M6IFwidGl0bGVcIiB9LCB0aGlzLnRleHRMYWJlbCkpLCB0aGlzLnJlbmRlckNoaWxkcmVuKCkpKSk7XG4gIH1cbiAgZ2V0IGVsKCkgeyByZXR1cm4gZ2V0RWxlbWVudCh0aGlzKTsgfVxuICBzdGF0aWMgZ2V0IHdhdGNoZXJzKCkgeyByZXR1cm4ge1xuICAgIFwic2VsZWN0ZWRcIjogW1wic2VsZWN0ZWRXYXRjaEhhbmRsZXJcIl1cbiAgfTsgfVxufTtcbkNvbWJvYm94SXRlbS5zdHlsZSA9IGNvbWJvYm94SXRlbUNzcztcblxuY29uc3QgQ1NTID0ge1xuICBsaXN0OiBcImxpc3RcIixcbiAgbGFiZWw6IFwibGFiZWxcIixcbiAgdGl0bGU6IFwidGl0bGVcIixcbn07XG5cbmNvbnN0IGNvbWJvYm94SXRlbUdyb3VwQ3NzID0gXCIuc2NhbGUtLXN7Zm9udC1zaXplOnZhcigtLWNhbGNpdGUtZm9udC1zaXplLS0yKTtsaW5lLWhlaWdodDoxcmVtOy0tY2FsY2l0ZS1jb21ib2JveC1pdGVtLXNwYWNpbmctdW5pdC1sOjAuNXJlbTstLWNhbGNpdGUtY29tYm9ib3gtaXRlbS1zcGFjaW5nLXVuaXQtczowLjI1cmVtOy0tY2FsY2l0ZS1jb21ib2JveC1pdGVtLXNwYWNpbmctaW5kZW50OjAuNXJlbX0uc2NhbGUtLW17Zm9udC1zaXplOnZhcigtLWNhbGNpdGUtZm9udC1zaXplLS0xKTtsaW5lLWhlaWdodDoxcmVtOy0tY2FsY2l0ZS1jb21ib2JveC1pdGVtLXNwYWNpbmctdW5pdC1sOjAuNzVyZW07LS1jYWxjaXRlLWNvbWJvYm94LWl0ZW0tc3BhY2luZy11bml0LXM6MC41cmVtOy0tY2FsY2l0ZS1jb21ib2JveC1pdGVtLXNwYWNpbmctaW5kZW50OjAuNzVyZW19LnNjYWxlLS1se2ZvbnQtc2l6ZTp2YXIoLS1jYWxjaXRlLWZvbnQtc2l6ZS0wKTtsaW5lLWhlaWdodDoxLjI1cmVtOy0tY2FsY2l0ZS1jb21ib2JveC1pdGVtLXNwYWNpbmctdW5pdC1sOjFyZW07LS1jYWxjaXRlLWNvbWJvYm94LWl0ZW0tc3BhY2luZy11bml0LXM6MC43NXJlbTstLWNhbGNpdGUtY29tYm9ib3gtaXRlbS1zcGFjaW5nLWluZGVudDoxcmVtfTpob3N0LC5saXN0e21hcmdpbjowcHg7ZGlzcGxheTpmbGV4O2ZsZXgtZGlyZWN0aW9uOmNvbHVtbjtwYWRkaW5nOjBweH06aG9zdCg6Zm9jdXMpLC5saXN0OmZvY3Vze291dGxpbmU6MnB4IHNvbGlkIHRyYW5zcGFyZW50O291dGxpbmUtb2Zmc2V0OjJweH0ubGFiZWx7Ym94LXNpemluZzpib3JkZXItYm94O2Rpc3BsYXk6ZmxleDtpbmxpbmUtc2l6ZToxMDAlO21pbi1pbmxpbmUtc2l6ZTowcHg7bWF4LWlubGluZS1zaXplOjEwMCU7Y29sb3I6dmFyKC0tY2FsY2l0ZS1jb2xvci10ZXh0LTMpfS50aXRsZXstLWNhbGNpdGUtY29tYm9ib3gtaXRlbS1pbmRlbnQtdmFsdWU6Y2FsYyhcXG4gICAgdmFyKC0tY2FsY2l0ZS1jb21ib2JveC1pdGVtLXNwYWNpbmctaW5kZW50KSAqIHZhcigtLWNhbGNpdGUtY29tYm9ib3gtaXRlbS1zcGFjaW5nLWluZGVudC1tdWx0aXBsaWVyKVxcbiAgKTtib3JkZXI6MCBzb2xpZDtkaXNwbGF5OmJsb2NrO2ZsZXg6MSAxIDAlO2JvcmRlci1ibG9jay1lbmQtd2lkdGg6MXB4O2ZvbnQtd2VpZ2h0OnZhcigtLWNhbGNpdGUtZm9udC13ZWlnaHQtYm9sZCk7Y29sb3I6dmFyKC0tY2FsY2l0ZS1jb2xvci10ZXh0LTIpO3dvcmQtd3JhcDpicmVhay13b3JkO3dvcmQtYnJlYWs6YnJlYWstd29yZDtib3JkZXItYmxvY2stZW5kLWNvbG9yOnZhcigtLWNhbGNpdGUtY29sb3ItYm9yZGVyLTMpO3BhZGRpbmctYmxvY2s6dmFyKC0tY2FsY2l0ZS1jb21ib2JveC1pdGVtLXNwYWNpbmctdW5pdC1sKTtwYWRkaW5nLWlubGluZTp2YXIoLS1jYWxjaXRlLWNvbWJvYm94LWl0ZW0tc3BhY2luZy11bml0LXMpO21hcmdpbi1pbmxpbmUtc3RhcnQ6dmFyKC0tY2FsY2l0ZS1jb21ib2JveC1pdGVtLWluZGVudC12YWx1ZSl9OjpzbG90dGVkKGNhbGNpdGUtY29tYm9ib3gtaXRlbS1ncm91cDpub3QoW2FmdGVyLWVtcHR5LWdyb3VwXSkpe3BhZGRpbmctYmxvY2stc3RhcnQ6dmFyKC0tY2FsY2l0ZS1jb21ib2JveC1pdGVtLXNwYWNpbmctdW5pdC1sKX06aG9zdChbaGlkZGVuXSl7ZGlzcGxheTpub25lfVtoaWRkZW5de2Rpc3BsYXk6bm9uZX1cIjtcblxuY29uc3QgQ29tYm9ib3hJdGVtR3JvdXAgPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKGhvc3RSZWYpIHtcbiAgICByZWdpc3Rlckluc3RhbmNlKHRoaXMsIGhvc3RSZWYpO1xuICAgIHRoaXMuZ3VpZCA9IGd1aWQoKTtcbiAgICB0aGlzLmFmdGVyRW1wdHlHcm91cCA9IGZhbHNlO1xuICAgIHRoaXMuYW5jZXN0b3JzID0gdW5kZWZpbmVkO1xuICAgIHRoaXMubGFiZWwgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5zY2FsZSA9IFwibVwiO1xuICB9XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vXG4gIC8vICBMaWZlY3ljbGVcbiAgLy9cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgdGhpcy5hbmNlc3RvcnMgPSBnZXRBbmNlc3RvcnModGhpcy5lbCk7XG4gIH1cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy9cbiAgLy8gIFJlbmRlciBNZXRob2RzXG4gIC8vXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IGVsLCBzY2FsZSB9ID0gdGhpcztcbiAgICBjb25zdCBkZXB0aCA9IGdldERlcHRoKGVsKTtcbiAgICByZXR1cm4gKGgoXCJ1bFwiLCB7IFwiYXJpYS1sYWJlbGxlZGJ5XCI6IHRoaXMuZ3VpZCwgY2xhc3M6IHsgW0NTUy5saXN0XTogdHJ1ZSwgW2BzY2FsZS0tJHtzY2FsZX1gXTogdHJ1ZSB9LCByb2xlOiBcImdyb3VwXCIgfSwgaChcImxpXCIsIHsgY2xhc3M6IHsgW0NTUy5sYWJlbF06IHRydWUgfSwgaWQ6IHRoaXMuZ3VpZCwgcm9sZTogXCJwcmVzZW50YXRpb25cIiwgc3R5bGU6IHsgXCItLWNhbGNpdGUtY29tYm9ib3gtaXRlbS1zcGFjaW5nLWluZGVudC1tdWx0aXBsaWVyXCI6IGAke2RlcHRofWAgfSB9LCBoKFwic3BhblwiLCB7IGNsYXNzOiBDU1MudGl0bGUgfSwgdGhpcy5sYWJlbCkpLCBoKFwic2xvdFwiLCBudWxsKSkpO1xuICB9XG4gIGdldCBlbCgpIHsgcmV0dXJuIGdldEVsZW1lbnQodGhpcyk7IH1cbn07XG5Db21ib2JveEl0ZW1Hcm91cC5zdHlsZSA9IGNvbWJvYm94SXRlbUdyb3VwQ3NzO1xuXG5leHBvcnQgeyBDb21ib2JveCBhcyBjYWxjaXRlX2NvbWJvYm94LCBDb21ib2JveEl0ZW0gYXMgY2FsY2l0ZV9jb21ib2JveF9pdGVtLCBDb21ib2JveEl0ZW1Hcm91cCBhcyBjYWxjaXRlX2NvbWJvYm94X2l0ZW1fZ3JvdXAgfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2FsY2l0ZS1jb21ib2JveF8zLmVudHJ5LmpzLm1hcCIsIi8qIVxuICogQWxsIG1hdGVyaWFsIGNvcHlyaWdodCBFU1JJLCBBbGwgUmlnaHRzIFJlc2VydmVkLCB1bmxlc3Mgb3RoZXJ3aXNlIHNwZWNpZmllZC5cbiAqIFNlZSBodHRwczovL2dpdGh1Yi5jb20vRXNyaS9jYWxjaXRlLWRlc2lnbi1zeXN0ZW0vYmxvYi9tYWluL0xJQ0VOU0UubWQgZm9yIGRldGFpbHMuXG4gKiB2Mi4wLjBcbiAqL1xuZnVuY3Rpb24gZ2V0SWNvblNjYWxlKGNvbXBvbmVudFNjYWxlKSB7XG4gIHJldHVybiBjb21wb25lbnRTY2FsZSA9PT0gXCJsXCIgPyBcIm1cIiA6IFwic1wiO1xufVxuLyoqXG4gKiBUaGlzIHV0aWwgaGVscHMgdXMgd2FpdCBmb3IgYSBjb21wb25lbnQgdG8gYmUgcmVhZHkgZm9yIGJvdGggbGF6eS1sb2FkaW5nIChgZGlzdGAgb3V0cHV0KSBhbmQgbm9uLWxhenktbG9hZGluZyAoYGNvbXBvbmVudHNgIG91dHB1dCkgY29tcG9uZW50cy5cbiAqXG4gKiBCYXNlZCBvbiBodHRwczovL2dpdGh1Yi5jb20vaW9uaWMtdGVhbS9pb25pYy1mcmFtZXdvcmsvYmxvYi8xYThiZDZkL2NvcmUvc3JjL3V0aWxzL2hlbHBlcnMudHMjTDYwQzEtTDc5QzNcbiAqXG4gKiBAcGFyYW0gZWwgLSB0aGUgaG9zdCBlbGVtZW50IHRvIHdhaXQgZm9yXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGNvbXBvbmVudE9uUmVhZHkoZWwpIHtcbiAgYXdhaXQgKGlzU3RlbmNpbEVsKGVsKVxuICAgID8gZWwuY29tcG9uZW50T25SZWFkeSgpXG4gICAgOiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHJlc29sdmUoKSkpKTtcbn1cbmZ1bmN0aW9uIGlzU3RlbmNpbEVsKGVsKSB7XG4gIHJldHVybiB0eXBlb2YgZWwuY29tcG9uZW50T25SZWFkeSA9PT0gXCJmdW5jdGlvblwiO1xufVxuXG5leHBvcnQgeyBjb21wb25lbnRPblJlYWR5IGFzIGMsIGdldEljb25TY2FsZSBhcyBnIH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbXBvbmVudC1mOTRjYWI3Mi5qcy5tYXAiLCIvKiFcbiAqIEFsbCBtYXRlcmlhbCBjb3B5cmlnaHQgRVNSSSwgQWxsIFJpZ2h0cyBSZXNlcnZlZCwgdW5sZXNzIG90aGVyd2lzZSBzcGVjaWZpZWQuXG4gKiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL0VzcmkvY2FsY2l0ZS1kZXNpZ24tc3lzdGVtL2Jsb2IvbWFpbi9MSUNFTlNFLm1kIGZvciBkZXRhaWxzLlxuICogdjIuMC4wXG4gKi9cbmltcG9ydCB7IGYgYXMgZm9yY2VVcGRhdGUgfSBmcm9tICcuL2luZGV4LTg2ZmFlZjljLmpzJztcbmltcG9ydCB7IGMgYXMgY3JlYXRlT2JzZXJ2ZXIgfSBmcm9tICcuL29ic2VydmVycy03MWQzMzJkYi5qcyc7XG5cbmNvbnN0IG9ic2VydmVkID0gbmV3IFNldCgpO1xubGV0IG11dGF0aW9uT2JzZXJ2ZXI7XG5jb25zdCBvYnNlcnZlck9wdGlvbnMgPSB7IGNoaWxkTGlzdDogdHJ1ZSB9O1xuLyoqXG4gKiBIZWxwZXIgdG8gc2V0IHVwIGEgY29uZGl0aW9uYWwgc2xvdCBjb21wb25lbnQgb24gY29ubmVjdGVkQ2FsbGJhY2suXG4gKlxuICogQHBhcmFtIGNvbXBvbmVudFxuICogQGRlcHJlY2F0ZWQgVXNlIGBvblNsb3RjaGFuZ2VgIGV2ZW50IHdpdGggYHNsb3RDaGFuZ2VIYXNBc3NpZ25lZEVsZW1lbnRgIERPTSB1dGlsaXR5IGluc3RlYWQuXG4gKlxuICogYGBgXG4gKiA8c2xvdCBvblNsb3RjaGFuZ2U9eyhldmVudCkgPT4gdGhpcy5teVNsb3RIYXNFbGVtZW50ID0gc2xvdENoYW5nZUhhc0Fzc2lnbmVkRWxlbWVudChldmVudCl9IC8+fVxuICogYGBgXG4gKi9cbmZ1bmN0aW9uIGNvbm5lY3RDb25kaXRpb25hbFNsb3RDb21wb25lbnQoY29tcG9uZW50KSB7XG4gIGlmICghbXV0YXRpb25PYnNlcnZlcikge1xuICAgIG11dGF0aW9uT2JzZXJ2ZXIgPSBjcmVhdGVPYnNlcnZlcihcIm11dGF0aW9uXCIsIHByb2Nlc3NNdXRhdGlvbnMpO1xuICB9XG4gIG11dGF0aW9uT2JzZXJ2ZXIub2JzZXJ2ZShjb21wb25lbnQuZWwsIG9ic2VydmVyT3B0aW9ucyk7XG59XG4vKipcbiAqIEhlbHBlciB0byB0ZWFyIGRvd24gYSBjb25kaXRpb25hbCBzbG90IGNvbXBvbmVudCBvbiBkaXNjb25uZWN0ZWRDYWxsYmFjay5cbiAqXG4gKiBAcGFyYW0gY29tcG9uZW50XG4gKiBAZGVwcmVjYXRlZCBVc2UgYG9uU2xvdGNoYW5nZWAgZXZlbnQgd2l0aCBgc2xvdENoYW5nZUhhc0Fzc2lnbmVkRWxlbWVudGAgRE9NIHV0aWxpdHkgaW5zdGVhZC5cbiAqXG4gKiBgYGBcbiAqIDxzbG90IG9uU2xvdGNoYW5nZT17KGV2ZW50KSA9PiB0aGlzLm15U2xvdEhhc0VsZW1lbnQgPSBzbG90Q2hhbmdlSGFzQXNzaWduZWRFbGVtZW50KGV2ZW50KX0gLz59XG4gKiBgYGBcbiAqL1xuZnVuY3Rpb24gZGlzY29ubmVjdENvbmRpdGlvbmFsU2xvdENvbXBvbmVudChjb21wb25lbnQpIHtcbiAgb2JzZXJ2ZWQuZGVsZXRlKGNvbXBvbmVudC5lbCk7XG4gIC8vIHdlIGV4cGxpY2l0bHkgcHJvY2VzcyBxdWV1ZWQgbXV0YXRpb25zIGFuZCBkaXNjb25uZWN0IGFuZCByZWNvbm5lY3RcbiAgLy8gdGhlIG9ic2VydmVyIHVudGlsIE11dGF0aW9uT2JzZXJ2ZXIgZ2V0cyBhbiBgdW5vYnNlcnZlYCBtZXRob2RcbiAgLy8gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS93aGF0d2cvZG9tL2lzc3Vlcy8xMjZcbiAgcHJvY2Vzc011dGF0aW9ucyhtdXRhdGlvbk9ic2VydmVyLnRha2VSZWNvcmRzKCkpO1xuICBtdXRhdGlvbk9ic2VydmVyLmRpc2Nvbm5lY3QoKTtcbiAgZm9yIChjb25zdCBbZWxlbWVudF0gb2Ygb2JzZXJ2ZWQuZW50cmllcygpKSB7XG4gICAgbXV0YXRpb25PYnNlcnZlci5vYnNlcnZlKGVsZW1lbnQsIG9ic2VydmVyT3B0aW9ucyk7XG4gIH1cbn1cbmZ1bmN0aW9uIHByb2Nlc3NNdXRhdGlvbnMobXV0YXRpb25zKSB7XG4gIG11dGF0aW9ucy5mb3JFYWNoKCh7IHRhcmdldCB9KSA9PiB7XG4gICAgZm9yY2VVcGRhdGUodGFyZ2V0KTtcbiAgfSk7XG59XG5cbmV4cG9ydCB7IGNvbm5lY3RDb25kaXRpb25hbFNsb3RDb21wb25lbnQgYXMgYywgZGlzY29ubmVjdENvbmRpdGlvbmFsU2xvdENvbXBvbmVudCBhcyBkIH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbmRpdGlvbmFsU2xvdC1mNjcxMDg3NS5qcy5tYXAiLCIvKiFcbiAqIEFsbCBtYXRlcmlhbCBjb3B5cmlnaHQgRVNSSSwgQWxsIFJpZ2h0cyBSZXNlcnZlZCwgdW5sZXNzIG90aGVyd2lzZSBzcGVjaWZpZWQuXG4gKiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL0VzcmkvY2FsY2l0ZS1kZXNpZ24tc3lzdGVtL2Jsb2IvbWFpbi9MSUNFTlNFLm1kIGZvciBkZXRhaWxzLlxuICogdjIuMC4wXG4gKi9cbmltcG9ydCB7IGsgYXMgaXNCZWZvcmUsIHEgYXMgcXVlcnlFbGVtZW50Um9vdHMsIGMgYXMgY2xvc2VzdEVsZW1lbnRDcm9zc1NoYWRvd0JvdW5kYXJ5IH0gZnJvbSAnLi9kb20tZWQwMGE1ODUuanMnO1xuaW1wb3J0IHsgYyBhcyBjb21wb25lbnRPblJlYWR5IH0gZnJvbSAnLi9jb21wb25lbnQtZjk0Y2FiNzIuanMnO1xuXG4vKipcbiAqIEV4cG9ydGVkIGZvciB0ZXN0aW5nIHB1cnBvc2VzIG9ubHlcbiAqXG4gKiBAaW50ZXJuYWxcbiAqL1xuY29uc3QgbGFiZWxDbGlja0V2ZW50ID0gXCJjYWxjaXRlSW50ZXJuYWxMYWJlbENsaWNrXCI7XG5jb25zdCBsYWJlbENvbm5lY3RlZEV2ZW50ID0gXCJjYWxjaXRlSW50ZXJuYWxMYWJlbENvbm5lY3RlZFwiO1xuY29uc3QgbGFiZWxEaXNjb25uZWN0ZWRFdmVudCA9IFwiY2FsY2l0ZUludGVybmFsTGFiZWxEaXNjb25uZWN0ZWRcIjtcbmNvbnN0IGxhYmVsVGFnTmFtZSA9IFwiY2FsY2l0ZS1sYWJlbFwiO1xuY29uc3QgbGFiZWxUb0xhYmVsYWJsZXMgPSBuZXcgV2Vha01hcCgpO1xuY29uc3Qgb25MYWJlbENsaWNrTWFwID0gbmV3IFdlYWtNYXAoKTtcbmNvbnN0IG9uTGFiZWxDb25uZWN0ZWRNYXAgPSBuZXcgV2Vha01hcCgpO1xuY29uc3Qgb25MYWJlbERpc2Nvbm5lY3RlZE1hcCA9IG5ldyBXZWFrTWFwKCk7XG5jb25zdCB1bmxhYmVsZWRDb21wb25lbnRzID0gbmV3IFNldCgpO1xuY29uc3QgZmluZExhYmVsRm9yQ29tcG9uZW50ID0gKGNvbXBvbmVudEVsKSA9PiB7XG4gIGNvbnN0IHsgaWQgfSA9IGNvbXBvbmVudEVsO1xuICBjb25zdCBmb3JMYWJlbCA9IGlkICYmIHF1ZXJ5RWxlbWVudFJvb3RzKGNvbXBvbmVudEVsLCB7IHNlbGVjdG9yOiBgJHtsYWJlbFRhZ05hbWV9W2Zvcj1cIiR7aWR9XCJdYCB9KTtcbiAgaWYgKGZvckxhYmVsKSB7XG4gICAgcmV0dXJuIGZvckxhYmVsO1xuICB9XG4gIGNvbnN0IHBhcmVudExhYmVsID0gY2xvc2VzdEVsZW1lbnRDcm9zc1NoYWRvd0JvdW5kYXJ5KGNvbXBvbmVudEVsLCBsYWJlbFRhZ05hbWUpO1xuICBpZiAoIXBhcmVudExhYmVsIHx8XG4gICAgLy8gbGFiZWxhYmxlIGNvbXBvbmVudHMgd2l0aGluIG90aGVyIGN1c3RvbSBlbGVtZW50cyBhcmUgbm90IGNvbnNpZGVyZWQgbGFiZWxhYmxlXG4gICAgaGFzQW5jZXN0b3JDdXN0b21FbGVtZW50cyhwYXJlbnRMYWJlbCwgY29tcG9uZW50RWwpKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgcmV0dXJuIHBhcmVudExhYmVsO1xufTtcbmZ1bmN0aW9uIGhhc0FuY2VzdG9yQ3VzdG9tRWxlbWVudHMobGFiZWwsIGNvbXBvbmVudEVsKSB7XG4gIGxldCB0cmF2ZXJzZWRFbGVtZW50cztcbiAgY29uc3QgY3VzdG9tRWxlbWVudEFuY2VzdG9yQ2hlY2tFdmVudFR5cGUgPSBcImN1c3RvbS1lbGVtZW50LWFuY2VzdG9yLWNoZWNrXCI7XG4gIGNvbnN0IGxpc3RlbmVyID0gKGV2ZW50KSA9PiB7XG4gICAgZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gICAgY29uc3QgY29tcG9zZWRQYXRoID0gZXZlbnQuY29tcG9zZWRQYXRoKCk7XG4gICAgdHJhdmVyc2VkRWxlbWVudHMgPSBjb21wb3NlZFBhdGguc2xpY2UoY29tcG9zZWRQYXRoLmluZGV4T2YoY29tcG9uZW50RWwpLCBjb21wb3NlZFBhdGguaW5kZXhPZihsYWJlbCkpO1xuICB9O1xuICBsYWJlbC5hZGRFdmVudExpc3RlbmVyKGN1c3RvbUVsZW1lbnRBbmNlc3RvckNoZWNrRXZlbnRUeXBlLCBsaXN0ZW5lciwgeyBvbmNlOiB0cnVlIH0pO1xuICBjb21wb25lbnRFbC5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudChjdXN0b21FbGVtZW50QW5jZXN0b3JDaGVja0V2ZW50VHlwZSwgeyBjb21wb3NlZDogdHJ1ZSwgYnViYmxlczogdHJ1ZSB9KSk7XG4gIGxhYmVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoY3VzdG9tRWxlbWVudEFuY2VzdG9yQ2hlY2tFdmVudFR5cGUsIGxpc3RlbmVyKTtcbiAgY29uc3QgYW5jZXN0b3JDdXN0b21FbGVtZW50cyA9IHRyYXZlcnNlZEVsZW1lbnRzXG4gICAgLmZpbHRlcigoZWwpID0+IGVsICE9PSBjb21wb25lbnRFbCAmJiBlbCAhPT0gbGFiZWwpXG4gICAgLmZpbHRlcigoZWwpID0+IGVsLnRhZ05hbWU/LmluY2x1ZGVzKFwiLVwiKSk7XG4gIHJldHVybiBhbmNlc3RvckN1c3RvbUVsZW1lbnRzLmxlbmd0aCA+IDA7XG59XG4vKipcbiAqIEhlbHBlciB0byBzZXQgdXAgbGFiZWwgaW50ZXJhY3Rpb25zIG9uIGNvbm5lY3RlZENhbGxiYWNrLlxuICpcbiAqIEBwYXJhbSBjb21wb25lbnRcbiAqL1xuZnVuY3Rpb24gY29ubmVjdExhYmVsKGNvbXBvbmVudCkge1xuICBpZiAoIWNvbXBvbmVudCkge1xuICAgIHJldHVybjtcbiAgfVxuICBjb25zdCBsYWJlbEVsID0gZmluZExhYmVsRm9yQ29tcG9uZW50KGNvbXBvbmVudC5lbCk7XG4gIGlmICgob25MYWJlbENsaWNrTWFwLmhhcyhsYWJlbEVsKSAmJiBsYWJlbEVsID09PSBjb21wb25lbnQubGFiZWxFbCkgfHxcbiAgICAoIWxhYmVsRWwgJiYgdW5sYWJlbGVkQ29tcG9uZW50cy5oYXMoY29tcG9uZW50KSkpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3QgYm91bmRPbkxhYmVsRGlzY29ubmVjdGVkID0gb25MYWJlbERpc2Nvbm5lY3RlZC5iaW5kKGNvbXBvbmVudCk7XG4gIGlmIChsYWJlbEVsKSB7XG4gICAgY29tcG9uZW50LmxhYmVsRWwgPSBsYWJlbEVsO1xuICAgIGNvbnN0IGxhYmVsYWJsZXMgPSBsYWJlbFRvTGFiZWxhYmxlcy5nZXQobGFiZWxFbCkgfHwgW107XG4gICAgbGFiZWxhYmxlcy5wdXNoKGNvbXBvbmVudCk7XG4gICAgbGFiZWxUb0xhYmVsYWJsZXMuc2V0KGxhYmVsRWwsIGxhYmVsYWJsZXMuc29ydChzb3J0QnlET01PcmRlcikpO1xuICAgIGlmICghb25MYWJlbENsaWNrTWFwLmhhcyhjb21wb25lbnQubGFiZWxFbCkpIHtcbiAgICAgIG9uTGFiZWxDbGlja01hcC5zZXQoY29tcG9uZW50LmxhYmVsRWwsIG9uTGFiZWxDbGljayk7XG4gICAgICBjb21wb25lbnQubGFiZWxFbC5hZGRFdmVudExpc3RlbmVyKGxhYmVsQ2xpY2tFdmVudCwgb25MYWJlbENsaWNrKTtcbiAgICB9XG4gICAgdW5sYWJlbGVkQ29tcG9uZW50cy5kZWxldGUoY29tcG9uZW50KTtcbiAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKGxhYmVsQ29ubmVjdGVkRXZlbnQsIG9uTGFiZWxDb25uZWN0ZWRNYXAuZ2V0KGNvbXBvbmVudCkpO1xuICAgIG9uTGFiZWxEaXNjb25uZWN0ZWRNYXAuc2V0KGNvbXBvbmVudCwgYm91bmRPbkxhYmVsRGlzY29ubmVjdGVkKTtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKGxhYmVsRGlzY29ubmVjdGVkRXZlbnQsIGJvdW5kT25MYWJlbERpc2Nvbm5lY3RlZCk7XG4gIH1cbiAgZWxzZSBpZiAoIXVubGFiZWxlZENvbXBvbmVudHMuaGFzKGNvbXBvbmVudCkpIHtcbiAgICBib3VuZE9uTGFiZWxEaXNjb25uZWN0ZWQoKTtcbiAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKGxhYmVsRGlzY29ubmVjdGVkRXZlbnQsIG9uTGFiZWxEaXNjb25uZWN0ZWRNYXAuZ2V0KGNvbXBvbmVudCkpO1xuICB9XG59XG4vKipcbiAqIEhlbHBlciB0byB0ZWFyIGRvd24gbGFiZWwgaW50ZXJhY3Rpb25zIG9uIGRpc2Nvbm5lY3RlZENhbGxiYWNrIG9uIGxhYmVsYWJsZSBjb21wb25lbnRzLlxuICpcbiAqIEBwYXJhbSBjb21wb25lbnRcbiAqL1xuZnVuY3Rpb24gZGlzY29ubmVjdExhYmVsKGNvbXBvbmVudCkge1xuICBpZiAoIWNvbXBvbmVudCkge1xuICAgIHJldHVybjtcbiAgfVxuICB1bmxhYmVsZWRDb21wb25lbnRzLmRlbGV0ZShjb21wb25lbnQpO1xuICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKGxhYmVsQ29ubmVjdGVkRXZlbnQsIG9uTGFiZWxDb25uZWN0ZWRNYXAuZ2V0KGNvbXBvbmVudCkpO1xuICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKGxhYmVsRGlzY29ubmVjdGVkRXZlbnQsIG9uTGFiZWxEaXNjb25uZWN0ZWRNYXAuZ2V0KGNvbXBvbmVudCkpO1xuICBvbkxhYmVsQ29ubmVjdGVkTWFwLmRlbGV0ZShjb21wb25lbnQpO1xuICBvbkxhYmVsRGlzY29ubmVjdGVkTWFwLmRlbGV0ZShjb21wb25lbnQpO1xuICBpZiAoIWNvbXBvbmVudC5sYWJlbEVsKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IGxhYmVsYWJsZXMgPSBsYWJlbFRvTGFiZWxhYmxlcy5nZXQoY29tcG9uZW50LmxhYmVsRWwpO1xuICBpZiAobGFiZWxhYmxlcy5sZW5ndGggPT09IDEpIHtcbiAgICBjb21wb25lbnQubGFiZWxFbC5yZW1vdmVFdmVudExpc3RlbmVyKGxhYmVsQ2xpY2tFdmVudCwgb25MYWJlbENsaWNrTWFwLmdldChjb21wb25lbnQubGFiZWxFbCkpO1xuICAgIG9uTGFiZWxDbGlja01hcC5kZWxldGUoY29tcG9uZW50LmxhYmVsRWwpO1xuICB9XG4gIGxhYmVsVG9MYWJlbGFibGVzLnNldChjb21wb25lbnQubGFiZWxFbCwgbGFiZWxhYmxlcy5maWx0ZXIoKGxhYmVsYWJsZSkgPT4gbGFiZWxhYmxlICE9PSBjb21wb25lbnQpLnNvcnQoc29ydEJ5RE9NT3JkZXIpKTtcbiAgY29tcG9uZW50LmxhYmVsRWwgPSBudWxsO1xufVxuZnVuY3Rpb24gc29ydEJ5RE9NT3JkZXIoYSwgYikge1xuICByZXR1cm4gaXNCZWZvcmUoYS5lbCwgYi5lbCkgPyAtMSA6IDE7XG59XG4vKipcbiAqIEhlbHBlciB0byBnZXQgdGhlIGxhYmVsIHRleHQgZnJvbSBhIGNvbXBvbmVudC5cbiAqXG4gKiBAcGFyYW0gY29tcG9uZW50XG4gKi9cbmZ1bmN0aW9uIGdldExhYmVsVGV4dChjb21wb25lbnQpIHtcbiAgcmV0dXJuIGNvbXBvbmVudC5sYWJlbCB8fCBjb21wb25lbnQubGFiZWxFbD8udGV4dENvbnRlbnQ/LnRyaW0oKSB8fCBcIlwiO1xufVxuZnVuY3Rpb24gb25MYWJlbENsaWNrKGV2ZW50KSB7XG4gIGNvbnN0IGxhYmVsQ2xpY2tUYXJnZXQgPSBldmVudC5kZXRhaWwuc291cmNlRXZlbnQudGFyZ2V0O1xuICBjb25zdCBsYWJlbGFibGVzID0gbGFiZWxUb0xhYmVsYWJsZXMuZ2V0KHRoaXMpO1xuICBjb25zdCBjbGlja2VkTGFiZWxhYmxlID0gbGFiZWxhYmxlcy5maW5kKChsYWJlbGFibGUpID0+IGxhYmVsYWJsZS5lbCA9PT0gbGFiZWxDbGlja1RhcmdldCk7XG4gIGNvbnN0IGxhYmVsYWJsZUNoaWxkQ2xpY2tlZCA9IGxhYmVsYWJsZXMuaW5jbHVkZXMoY2xpY2tlZExhYmVsYWJsZSk7XG4gIGlmIChsYWJlbGFibGVDaGlsZENsaWNrZWQpIHtcbiAgICAvLyBubyBuZWVkIHRvIGZvcndhcmQgY2xpY2sgYXMgbGFiZWxhYmxlIHdpbGwgcmVjZWl2ZSBmb2N1c1xuICAgIHJldHVybjtcbiAgfVxuICBjb25zdCBmaXJzdExhYmVsYWJsZSA9IGxhYmVsYWJsZXNbMF07XG4gIGlmIChmaXJzdExhYmVsYWJsZS5kaXNhYmxlZCkge1xuICAgIHJldHVybjtcbiAgfVxuICBmaXJzdExhYmVsYWJsZS5vbkxhYmVsQ2xpY2soZXZlbnQpO1xufVxuZnVuY3Rpb24gb25MYWJlbENvbm5lY3RlZCgpIHtcbiAgaWYgKHVubGFiZWxlZENvbXBvbmVudHMuaGFzKHRoaXMpKSB7XG4gICAgY29ubmVjdExhYmVsKHRoaXMpO1xuICB9XG59XG5mdW5jdGlvbiBvbkxhYmVsRGlzY29ubmVjdGVkKCkge1xuICB1bmxhYmVsZWRDb21wb25lbnRzLmFkZCh0aGlzKTtcbiAgY29uc3QgYm91bmRPbkxhYmVsQ29ubmVjdGVkID0gb25MYWJlbENvbm5lY3RlZE1hcC5nZXQodGhpcykgfHwgb25MYWJlbENvbm5lY3RlZC5iaW5kKHRoaXMpO1xuICBvbkxhYmVsQ29ubmVjdGVkTWFwLnNldCh0aGlzLCBib3VuZE9uTGFiZWxDb25uZWN0ZWQpO1xuICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKGxhYmVsQ29ubmVjdGVkRXZlbnQsIGJvdW5kT25MYWJlbENvbm5lY3RlZCk7XG59XG4vKipcbiAqIEhlbHBlciB0byBhc3NvY2lhdGUgYW4gZXhwbGljaXQgbGFiZWwgKGkuZS4sIHVzaW5nIGBmb3JgKSB3aXRoIGEgbGFiZWxhYmxlIGNvbXBvbmVudCB0aGF0IGRvZXMgbm90IGhhdmUgYW4gYXNzb2NpYXRlZCBsYWJlbC5cbiAqXG4gKiBAcGFyYW0gbGFiZWwgLSB0aGUgbGFiZWwgZWxlbWVudFxuICovXG5hc3luYyBmdW5jdGlvbiBhc3NvY2lhdGVFeHBsaWNpdExhYmVsVG9VbmxhYmVsZWRDb21wb25lbnQobGFiZWwpIHtcbiAgYXdhaXQgY29tcG9uZW50T25SZWFkeShsYWJlbCk7XG4gIGNvbnN0IGFscmVhZHlMYWJlbGVkID0gbGFiZWxUb0xhYmVsYWJsZXMuaGFzKGxhYmVsKTtcbiAgaWYgKGFscmVhZHlMYWJlbGVkKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IGZvckNvbXBvbmVudEVsID0gbGFiZWwub3duZXJEb2N1bWVudD8uZ2V0RWxlbWVudEJ5SWQobGFiZWwuZm9yKTtcbiAgaWYgKCFmb3JDb21wb25lbnRFbCkge1xuICAgIHJldHVybjtcbiAgfVxuICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgIGZvciAoY29uc3QgbGFiZWxhYmxlIG9mIHVubGFiZWxlZENvbXBvbmVudHMpIHtcbiAgICAgIGlmIChsYWJlbGFibGUuZWwgPT09IGZvckNvbXBvbmVudEVsKSB7XG4gICAgICAgIGNvbm5lY3RMYWJlbChsYWJlbGFibGUpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xufVxuXG5leHBvcnQgeyBhc3NvY2lhdGVFeHBsaWNpdExhYmVsVG9VbmxhYmVsZWRDb21wb25lbnQgYXMgYSwgbGFiZWxEaXNjb25uZWN0ZWRFdmVudCBhcyBiLCBjb25uZWN0TGFiZWwgYXMgYywgZGlzY29ubmVjdExhYmVsIGFzIGQsIGdldExhYmVsVGV4dCBhcyBnLCBsYWJlbENvbm5lY3RlZEV2ZW50IGFzIGwgfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bGFiZWwtMWMyODVkNDEuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9