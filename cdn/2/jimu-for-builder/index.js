System.register(["jimu-core","jimu-core/react","jimu-theme","jimu-layouts/layout-runtime","jimu-for-builder/templates","jimu-ui","jimu-for-builder"], function(__WEBPACK_DYNAMIC_EXPORT__, __system_context__) {
	var __WEBPACK_EXTERNAL_MODULE_jimu_core__ = {};
	var __WEBPACK_EXTERNAL_MODULE_react__ = {};
	var __WEBPACK_EXTERNAL_MODULE_jimu_theme__ = {};
	var __WEBPACK_EXTERNAL_MODULE_jimu_layouts_layout_runtime__ = {};
	var __WEBPACK_EXTERNAL_MODULE_jimu_for_builder_templates__ = {};
	var __WEBPACK_EXTERNAL_MODULE_jimu_ui__ = {};
	var __WEBPACK_EXTERNAL_MODULE_jimu_for_builder__ = {};
	Object.defineProperty(__WEBPACK_EXTERNAL_MODULE_jimu_core__, "__esModule", { value: true });
	Object.defineProperty(__WEBPACK_EXTERNAL_MODULE_react__, "__esModule", { value: true });
	Object.defineProperty(__WEBPACK_EXTERNAL_MODULE_jimu_theme__, "__esModule", { value: true });
	Object.defineProperty(__WEBPACK_EXTERNAL_MODULE_jimu_layouts_layout_runtime__, "__esModule", { value: true });
	Object.defineProperty(__WEBPACK_EXTERNAL_MODULE_jimu_for_builder_templates__, "__esModule", { value: true });
	Object.defineProperty(__WEBPACK_EXTERNAL_MODULE_jimu_ui__, "__esModule", { value: true });
	Object.defineProperty(__WEBPACK_EXTERNAL_MODULE_jimu_for_builder__, "__esModule", { value: true });
	return {
		setters: [
			function(module) {
				Object.keys(module).forEach(function(key) {
					__WEBPACK_EXTERNAL_MODULE_jimu_core__[key] = module[key];
				});
			},
			function(module) {
				Object.keys(module).forEach(function(key) {
					__WEBPACK_EXTERNAL_MODULE_react__[key] = module[key];
				});
			},
			function(module) {
				Object.keys(module).forEach(function(key) {
					__WEBPACK_EXTERNAL_MODULE_jimu_theme__[key] = module[key];
				});
			},
			function(module) {
				Object.keys(module).forEach(function(key) {
					__WEBPACK_EXTERNAL_MODULE_jimu_layouts_layout_runtime__[key] = module[key];
				});
			},
			function(module) {
				Object.keys(module).forEach(function(key) {
					__WEBPACK_EXTERNAL_MODULE_jimu_for_builder_templates__[key] = module[key];
				});
			},
			function(module) {
				Object.keys(module).forEach(function(key) {
					__WEBPACK_EXTERNAL_MODULE_jimu_ui__[key] = module[key];
				});
			},
			function(module) {
				Object.keys(module).forEach(function(key) {
					__WEBPACK_EXTERNAL_MODULE_jimu_for_builder__[key] = module[key];
				});
			}
		],
		execute: function() {
			__WEBPACK_DYNAMIC_EXPORT__(
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./jimu-icons/svg/outlined/application/dialog.svg":
/*!********************************************************!*\
  !*** ./jimu-icons/svg/outlined/application/dialog.svg ***!
  \********************************************************/
/***/ ((module) => {

module.exports = "<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 12 12\"><path fill=\"#000\" fill-rule=\"evenodd\" d=\"M.007.883A1 1 0 0 1 1 0h10l.117.007A1 1 0 0 1 12 1v7l-.007.117A1 1 0 0 1 11 9H4l-4 3V1zM11 1H1v9l2.667-2H11zM3 3.5a.5.5 0 0 1 .5-.5h5a.5.5 0 0 1 0 1h-5a.5.5 0 0 1-.5-.5M3.5 5a.5.5 0 0 0 0 1h5a.5.5 0 0 0 0-1z\" clip-rule=\"evenodd\"></path></svg>"

/***/ }),

/***/ "./jimu-icons/svg/outlined/application/folder.svg":
/*!********************************************************!*\
  !*** ./jimu-icons/svg/outlined/application/folder.svg ***!
  \********************************************************/
/***/ ((module) => {

module.exports = "<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 16 16\"><path fill=\"#000\" fill-rule=\"evenodd\" d=\"M1.333 0h4c.737 0 1.334.597 1.334 1.333v1.334h8C15.403 2.667 16 3.264 16 4v10.667c0 .736-.597 1.333-1.333 1.333H1.333A1.333 1.333 0 0 1 0 14.667V1.333C0 .597.597 0 1.333 0m0 7.333v7.334h13.334V7.333zm0-1.333h13.334V4H5.334V1.335h-4z\" clip-rule=\"evenodd\"></path></svg>"

/***/ }),

/***/ "./jimu-icons/svg/outlined/brand/screen-group.svg":
/*!********************************************************!*\
  !*** ./jimu-icons/svg/outlined/brand/screen-group.svg ***!
  \********************************************************/
/***/ ((module) => {

module.exports = "<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 16 16\"><path fill=\"#000\" fill-rule=\"evenodd\" d=\"M2 2h12v4H2zM1 7V1h14v6zm1 3h12v4H2zm-1 5V9h14v6z\" clip-rule=\"evenodd\"></path></svg>"

/***/ }),

/***/ "./jimu-icons/svg/outlined/brand/screen.svg":
/*!**************************************************!*\
  !*** ./jimu-icons/svg/outlined/brand/screen.svg ***!
  \**************************************************/
/***/ ((module) => {

module.exports = "<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 16 16\"><path fill=\"#000\" fill-rule=\"evenodd\" d=\"M2 2h12v12H2zM1 15V1h14v14zm4-9h6v4H5zm-1 5V5h8v6z\" clip-rule=\"evenodd\"></path></svg>"

/***/ }),

/***/ "./jimu-icons/svg/outlined/brand/widget-column.svg":
/*!*********************************************************!*\
  !*** ./jimu-icons/svg/outlined/brand/widget-column.svg ***!
  \*********************************************************/
/***/ ((module) => {

module.exports = "<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 20 20\"><path fill=\"#000\" fill-rule=\"evenodd\" d=\"M17 2a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2zM5 1h10a1 1 0 0 1 1 1v16a1 1 0 0 1-1 1H5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1m2 2h6v6H7zm0 8h1v2H7zm2 0h1v1H9zm4 2h-1v1h1zm-6 1h1v1H7zm4 2h-1v1h1zm1-1h1v2h-1zm-3 2v-1H7v1zm2-6h2v1h-2z\" clip-rule=\"evenodd\"></path></svg>"

/***/ }),

/***/ "./jimu-icons/svg/outlined/brand/widget-fixed-panel.svg":
/*!**************************************************************!*\
  !*** ./jimu-icons/svg/outlined/brand/widget-fixed-panel.svg ***!
  \**************************************************************/
/***/ ((module) => {

module.exports = "<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 20 20\"><path fill=\"#000\" d=\"M3 3h7v7H3zM11 11h1v2h-1zM13 11h1v1h-1zM17 13h-1v1h1zM11 14h1v1h-1zM15 16h-1v1h1zM16 15h1v2h-1zM13 17v-1h-2v1zM15 11h2v1h-2z\"></path><path fill=\"#000\" fill-rule=\"evenodd\" d=\"M20 2a2 2 0 0 0-2-2H2a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2zM2 1h16a1 1 0 0 1 1 1v16a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1\" clip-rule=\"evenodd\"></path></svg>"

/***/ }),

/***/ "./jimu-icons/svg/outlined/brand/widget-place-holder.svg":
/*!***************************************************************!*\
  !*** ./jimu-icons/svg/outlined/brand/widget-place-holder.svg ***!
  \***************************************************************/
/***/ ((module) => {

module.exports = "<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 20 20\"><path fill=\"#000\" d=\"M4 4h2v1H4zM8 4h2v1H8zM14 4h-2v1h2zM15 4h1v2h-1zM16 8h-1v2h1zM4 14h1v2H4zM5 6H4v2h1zM4 10h1v2H4zM16 12h-1v2h1zM16 15v1h-2v-1zM12 15h-2v1h2zM6 15h2v1H6z\"></path><path fill=\"#000\" fill-rule=\"evenodd\" d=\"M18 0a2 2 0 0 1 2 2v16a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V2a2 2 0 0 1 2-2zm0 1H2a1 1 0 0 0-1 1v16a1 1 0 0 0 1 1h16a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1\" clip-rule=\"evenodd\"></path></svg>"

/***/ }),

/***/ "./jimu-icons/svg/outlined/brand/widget-row.svg":
/*!******************************************************!*\
  !*** ./jimu-icons/svg/outlined/brand/widget-row.svg ***!
  \******************************************************/
/***/ ((module) => {

module.exports = "<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 20 20\"><path fill=\"#000\" d=\"M3 7h6v6H3zM11 7h1v2h-1zM13 7h1v1h-1zM17 9h-1v1h1zM11 10h1v1h-1zM15 12h-1v1h1zM16 11h1v2h-1zM13 13v-1h-2v1zM15 7h2v1h-2z\"></path><path fill=\"#000\" fill-rule=\"evenodd\" d=\"M20 5a2 2 0 0 0-2-2H2a2 2 0 0 0-2 2v10a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2zM2 4h16a1 1 0 0 1 1 1v10a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V5a1 1 0 0 1 1-1\" clip-rule=\"evenodd\"></path></svg>"

/***/ }),

/***/ "./jimu-icons/svg/outlined/brand/widget-section-view.svg":
/*!***************************************************************!*\
  !*** ./jimu-icons/svg/outlined/brand/widget-section-view.svg ***!
  \***************************************************************/
/***/ ((module) => {

module.exports = "<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 20 20\"><path fill=\"#000\" fill-rule=\"evenodd\" d=\"M1.25 2.5h17.5v11.25H1.25zM0 2.5c0-.69.56-1.25 1.25-1.25h17.5c.69 0 1.25.56 1.25 1.25v11.25c0 .69-.56 1.25-1.25 1.25H1.25C.56 15 0 14.44 0 13.75zm3.75 16.25h2.5V17.5h-2.5zm7.5 0h-2.5V17.5h2.5zm2.5 0h2.5V17.5h-2.5z\" clip-rule=\"evenodd\"></path></svg>"

/***/ }),

/***/ "./jimu-icons/svg/outlined/brand/widget-section.svg":
/*!**********************************************************!*\
  !*** ./jimu-icons/svg/outlined/brand/widget-section.svg ***!
  \**********************************************************/
/***/ ((module) => {

module.exports = "<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 20 20\"><path fill=\"#000\" fill-rule=\"evenodd\" d=\"M14 2a2 2 0 0 0-2-2H2a2 2 0 0 0-2 2v10a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2zM2 1h10a1 1 0 0 1 1 1v10a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1\" clip-rule=\"evenodd\"></path><path fill=\"#000\" fill-rule=\"evenodd\" d=\"M20 8a2 2 0 0 0-2-2H8a2 2 0 0 0-2 2v10a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2zM8 7h10a1 1 0 0 1 1 1v10a1 1 0 0 1-1 1H8a1 1 0 0 1-1-1V8a1 1 0 0 1 1-1\" clip-rule=\"evenodd\"></path></svg>"

/***/ }),

/***/ "./jimu-icons/svg/outlined/data/link-combined.svg":
/*!********************************************************!*\
  !*** ./jimu-icons/svg/outlined/data/link-combined.svg ***!
  \********************************************************/
/***/ ((module) => {

module.exports = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 12 40\"><path fill=\"#A8A8A8\" fill-rule=\"evenodd\" d=\"M6 30v10H0v-1h5v-9zM3.162 18.582a.5.5 0 0 1 0 .71l-1.416 1.421a2.497 2.497 0 0 0-.003 3.545c.983.983 2.56.98 3.544-.003l1.42-1.42a.504.504 0 0 1 .712.713L6 24.968a3.502 3.502 0 0 1-4.967 0 3.501 3.501 0 0 1 0-4.967l1.416-1.422a.504.504 0 0 1 .713.003m4.967-.71a.5.5 0 0 1 0 .71L4.58 22.129a.504.504 0 0 1-.713-.712l3.548-3.548a.504.504 0 0 1 .713.003m2.838-2.838a3.501 3.501 0 0 1 0 4.967l-1.42 1.419a.504.504 0 0 1-.713-.712l1.423-1.417a2.5 2.5 0 0 0 0-3.547 2.502 2.502 0 0 0-3.547 0l-1.42 1.419a.504.504 0 0 1-.713-.712l1.42-1.42a3.506 3.506 0 0 1 4.97.003M6 0v10H5V1H0V0z\"></path></svg>"

/***/ }),

/***/ "./jimu-icons/svg/outlined/data/link-tilted.svg":
/*!******************************************************!*\
  !*** ./jimu-icons/svg/outlined/data/link-tilted.svg ***!
  \******************************************************/
/***/ ((module) => {

module.exports = "<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 16 16\"><path fill=\"#000\" d=\"m1.373 8 2.07-2.071.83.828L2.2 8.828a3.515 3.515 0 0 0 4.97 4.971l2.072-2.071.828.828L8 14.627A4.686 4.686 0 1 1 1.373 8M13.799 7.172l-2.071 2.07.828.83L14.627 8A4.686 4.686 0 1 0 8 1.373l-2.071 2.07.828.83L8.828 2.2a3.515 3.515 0 0 1 4.971 4.97\"></path><path fill=\"#000\" d=\"M5.515 9.657a.586.586 0 0 0 .828.828l4.142-4.142a.586.586 0 0 0-.828-.828z\"></path></svg>"

/***/ }),

/***/ "./jimu-icons/svg/outlined/data/page.svg":
/*!***********************************************!*\
  !*** ./jimu-icons/svg/outlined/data/page.svg ***!
  \***********************************************/
/***/ ((module) => {

module.exports = "<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 12 12\"><path fill=\"#000\" fill-rule=\"evenodd\" d=\"M10.167 0H1.833A.845.845 0 0 0 1 .857v10.286c0 .473.373.857.833.857h8.334c.46 0 .833-.384.833-.857V.857A.845.845 0 0 0 10.167 0M2 11V1h8v10zm1.6-8h4.8c.331 0 .6.224.6.5s-.269.5-.6.5H3.6c-.331 0-.6-.224-.6-.5s.269-.5.6-.5m4.8 3H3.6c-.331 0-.6.224-.6.5s.269.5.6.5h4.8c.331 0 .6-.224.6-.5S8.731 6 8.4 6\" clip-rule=\"evenodd\"></path></svg>"

/***/ }),

/***/ "./jimu-for-builder/index.tsx":
/*!************************************!*\
  !*** ./jimu-for-builder/index.tsx ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AppConfigAction: () => (/* reexport safe */ _lib_app_config_actions__WEBPACK_IMPORTED_MODULE_18__.AppConfigAction),
/* harmony export */   AppDataActionManager: () => (/* reexport safe */ _lib_app_data_action_manager__WEBPACK_IMPORTED_MODULE_3__["default"]),
/* harmony export */   AppMessageManager: () => (/* reexport safe */ _lib_app_message_manager__WEBPACK_IMPORTED_MODULE_2__["default"]),
/* harmony export */   AppResourceFilePath: () => (/* reexport safe */ _lib_app_resource_manager__WEBPACK_IMPORTED_MODULE_21__.AppResourceFilePath),
/* harmony export */   AppResourceManager: () => (/* reexport safe */ _lib_app_resource_manager__WEBPACK_IMPORTED_MODULE_21__.AppResourceManager),
/* harmony export */   AppStateHistoryActionKeys: () => (/* reexport safe */ _lib_app_state_history_extension__WEBPACK_IMPORTED_MODULE_6__.AppStateHistoryActionKeys),
/* harmony export */   AppStateHistoryExtension: () => (/* reexport safe */ _lib_app_state_history_extension__WEBPACK_IMPORTED_MODULE_6__["default"]),
/* harmony export */   AppStateReduxStoreExtension: () => (/* reexport safe */ _lib_app_state_redux_store_extension__WEBPACK_IMPORTED_MODULE_5__["default"]),
/* harmony export */   AppWidgetManager: () => (/* reexport safe */ _lib_app_widget_manager__WEBPACK_IMPORTED_MODULE_4__["default"]),
/* harmony export */   BaseLayoutService: () => (/* reexport safe */ _lib_app_config_service__WEBPACK_IMPORTED_MODULE_23__.BaseLayoutService),
/* harmony export */   BaseWidgetSetting: () => (/* reexport safe */ _lib_base_widget_setting__WEBPACK_IMPORTED_MODULE_0__["default"]),
/* harmony export */   BuilderKeyboardComponent: () => (/* reexport safe */ _lib_builder_keyboard_component__WEBPACK_IMPORTED_MODULE_17__["default"]),
/* harmony export */   BuilderStateActionTypes: () => (/* reexport safe */ _lib_builder_state_store_extension__WEBPACK_IMPORTED_MODULE_7__.BuilderStateActionTypes),
/* harmony export */   BuilderStateReduxStoreExtension: () => (/* reexport safe */ _lib_builder_state_store_extension__WEBPACK_IMPORTED_MODULE_7__["default"]),
/* harmony export */   BuilderStateResourceActionKeys: () => (/* reexport safe */ _lib_builder_state_resource_extension__WEBPACK_IMPORTED_MODULE_8__.BuilderStateResourceActionKeys),
/* harmony export */   BuilderStateResourceExtension: () => (/* reexport safe */ _lib_builder_state_resource_extension__WEBPACK_IMPORTED_MODULE_8__["default"]),
/* harmony export */   ContentServiceWrapper: () => (/* reexport safe */ _lib_app_config_service__WEBPACK_IMPORTED_MODULE_23__.ContentServiceWrapper),
/* harmony export */   ExtActionKeys: () => (/* reexport safe */ _lib_app_state_redux_store_extension__WEBPACK_IMPORTED_MODULE_5__.ExtActionKeys),
/* harmony export */   LayoutServiceProvider: () => (/* reexport safe */ _lib_app_config_service__WEBPACK_IMPORTED_MODULE_23__.LayoutServiceProvider),
/* harmony export */   ToBuilderMessage: () => (/* reexport safe */ _lib_sync_type__WEBPACK_IMPORTED_MODULE_19__.ToBuilderMessage),
/* harmony export */   UrlConfigManager: () => (/* reexport safe */ _lib_url_config_manager__WEBPACK_IMPORTED_MODULE_9__["default"]),
/* harmony export */   WidgetSettingManager: () => (/* reexport safe */ _lib_widget_setting_manager__WEBPACK_IMPORTED_MODULE_1__["default"]),
/* harmony export */   appBuilderSync: () => (/* reexport module object */ _lib_app_builder_sync__WEBPACK_IMPORTED_MODULE_11__),
/* harmony export */   appConfigUtils: () => (/* reexport module object */ _lib_utils_app_config_utils__WEBPACK_IMPORTED_MODULE_15__),
/* harmony export */   appStateActions: () => (/* reexport safe */ _lib_app_state_redux_store_extension__WEBPACK_IMPORTED_MODULE_5__.appStateActions),
/* harmony export */   appStateHistoryActions: () => (/* reexport safe */ _lib_app_state_history_extension__WEBPACK_IMPORTED_MODULE_6__.appStateHistoryActions),
/* harmony export */   builderActionKeys: () => (/* reexport safe */ _lib_builder_state_store_extension__WEBPACK_IMPORTED_MODULE_7__.builderActionKeys),
/* harmony export */   builderActions: () => (/* reexport safe */ _lib_builder_state_store_extension__WEBPACK_IMPORTED_MODULE_7__.builderActions),
/* harmony export */   builderAppSync: () => (/* reexport module object */ _lib_builder_app_sync__WEBPACK_IMPORTED_MODULE_10__),
/* harmony export */   builderStateResourceActions: () => (/* reexport safe */ _lib_builder_state_resource_extension__WEBPACK_IMPORTED_MODULE_8__.builderStateResourceActions),
/* harmony export */   defaultMessages: () => (/* reexport safe */ _lib_translations_default__WEBPACK_IMPORTED_MODULE_12__["default"]),
/* harmony export */   emptyContentService: () => (/* reexport safe */ _lib_app_config_service__WEBPACK_IMPORTED_MODULE_23__.emptyContentService),
/* harmony export */   getAppConfigAction: () => (/* reexport safe */ _lib_app_config_actions__WEBPACK_IMPORTED_MODULE_18__.getAppConfigAction),
/* harmony export */   helpUtils: () => (/* reexport module object */ _lib_utils_help_utils__WEBPACK_IMPORTED_MODULE_14__),
/* harmony export */   init: () => (/* reexport safe */ _lib_init__WEBPACK_IMPORTED_MODULE_22__.init),
/* harmony export */   loadI18nMessage: () => (/* reexport safe */ _lib_builder_locale__WEBPACK_IMPORTED_MODULE_24__.loadI18nMessage),
/* harmony export */   makeSureTemplateConfig: () => (/* reexport safe */ _lib_app_config_service__WEBPACK_IMPORTED_MODULE_23__.makeSureTemplateConfig),
/* harmony export */   screenGroupService: () => (/* reexport safe */ _lib_app_config_service__WEBPACK_IMPORTED_MODULE_23__.screenGroupService),
/* harmony export */   sectionService: () => (/* reexport safe */ _lib_app_config_service__WEBPACK_IMPORTED_MODULE_23__.sectionService),
/* harmony export */   templateService: () => (/* reexport safe */ _lib_app_config_service__WEBPACK_IMPORTED_MODULE_23__.templateService),
/* harmony export */   templateUtils: () => (/* reexport module object */ _lib_utils_template_utils__WEBPACK_IMPORTED_MODULE_16__),
/* harmony export */   utils: () => (/* reexport module object */ _lib_utils_utils__WEBPACK_IMPORTED_MODULE_13__),
/* harmony export */   widgetService: () => (/* reexport safe */ _lib_app_config_service__WEBPACK_IMPORTED_MODULE_23__.widgetService)
/* harmony export */ });
/* harmony import */ var _lib_base_widget_setting__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lib/base-widget-setting */ "./jimu-for-builder/lib/base-widget-setting.tsx");
/* harmony import */ var _lib_widget_setting_manager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lib/widget-setting-manager */ "./jimu-for-builder/lib/widget-setting-manager.tsx");
/* harmony import */ var _lib_app_message_manager__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./lib/app-message-manager */ "./jimu-for-builder/lib/app-message-manager.tsx");
/* harmony import */ var _lib_app_data_action_manager__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./lib/app-data-action-manager */ "./jimu-for-builder/lib/app-data-action-manager.tsx");
/* harmony import */ var _lib_app_widget_manager__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./lib/app-widget-manager */ "./jimu-for-builder/lib/app-widget-manager.tsx");
/* harmony import */ var _lib_app_state_redux_store_extension__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./lib/app-state-redux-store-extension */ "./jimu-for-builder/lib/app-state-redux-store-extension.ts");
/* harmony import */ var _lib_app_state_history_extension__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./lib/app-state-history-extension */ "./jimu-for-builder/lib/app-state-history-extension.ts");
/* harmony import */ var _lib_builder_state_store_extension__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./lib/builder-state-store-extension */ "./jimu-for-builder/lib/builder-state-store-extension.ts");
/* harmony import */ var _lib_builder_state_resource_extension__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./lib/builder-state-resource-extension */ "./jimu-for-builder/lib/builder-state-resource-extension.ts");
/* harmony import */ var _lib_url_config_manager__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./lib/url-config-manager */ "./jimu-for-builder/lib/url-config-manager.tsx");
/* harmony import */ var _lib_builder_app_sync__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./lib/builder-app-sync */ "./jimu-for-builder/lib/builder-app-sync.ts");
/* harmony import */ var _lib_app_builder_sync__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./lib/app-builder-sync */ "./jimu-for-builder/lib/app-builder-sync.ts");
/* harmony import */ var _lib_translations_default__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./lib/translations/default */ "./jimu-for-builder/lib/translations/default.ts");
/* harmony import */ var _lib_utils_utils__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./lib/utils/utils */ "./jimu-for-builder/lib/utils/utils.ts");
/* harmony import */ var _lib_utils_help_utils__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./lib/utils/help-utils */ "./jimu-for-builder/lib/utils/help-utils.ts");
/* harmony import */ var _lib_utils_app_config_utils__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./lib/utils/app-config-utils */ "./jimu-for-builder/lib/utils/app-config-utils.ts");
/* harmony import */ var _lib_utils_template_utils__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./lib/utils/template-utils */ "./jimu-for-builder/lib/utils/template-utils.ts");
/* harmony import */ var _lib_builder_keyboard_component__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./lib/builder-keyboard-component */ "./jimu-for-builder/lib/builder-keyboard-component.tsx");
/* harmony import */ var _lib_app_config_actions__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./lib/app-config-actions */ "./jimu-for-builder/lib/app-config-actions.ts");
/* harmony import */ var _lib_sync_type__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./lib/sync-type */ "./jimu-for-builder/lib/sync-type.ts");
/* harmony import */ var _lib_props__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./lib/props */ "./jimu-for-builder/lib/props.ts");
/* harmony import */ var _lib_app_resource_manager__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./lib/app-resource-manager */ "./jimu-for-builder/lib/app-resource-manager.tsx");
/* harmony import */ var _lib_init__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./lib/init */ "./jimu-for-builder/lib/init.ts");
/* harmony import */ var _lib_app_config_service__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./lib/app-config-service */ "./jimu-for-builder/lib/app-config-service/index.ts");
/* harmony import */ var _lib_builder_locale__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./lib/builder-locale */ "./jimu-for-builder/lib/builder-locale.ts");

































/***/ }),

/***/ "./jimu-for-builder/lib/app-builder-sync.ts":
/*!**************************************************!*\
  !*** ./jimu-for-builder/lib/app-builder-sync.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   clearLastAppConfigFromHistory: () => (/* binding */ clearLastAppConfigFromHistory),
/* harmony export */   letBuilderAddResource: () => (/* binding */ letBuilderAddResource),
/* harmony export */   letBuilderClearResource: () => (/* binding */ letBuilderClearResource),
/* harmony export */   letBuilderPopupChooseWidget: () => (/* binding */ letBuilderPopupChooseWidget),
/* harmony export */   letBuilderResponseToKeyboard: () => (/* binding */ letBuilderResponseToKeyboard),
/* harmony export */   letBuilderShowLayoutToolbar: () => (/* binding */ letBuilderShowLayoutToolbar),
/* harmony export */   listenBuilderEvents: () => (/* binding */ listenBuilderEvents),
/* harmony export */   publishAppIsLoadedToBuilder: () => (/* binding */ publishAppIsLoadedToBuilder),
/* harmony export */   publishAppSessionChangeToBuilder: () => (/* binding */ publishAppSessionChangeToBuilder),
/* harmony export */   publishAppStateChangeToBuilder: () => (/* binding */ publishAppStateChangeToBuilder),
/* harmony export */   publishCheck498ErrorToBuilder: () => (/* binding */ publishCheck498ErrorToBuilder),
/* harmony export */   publishConfirmDeleteToApp: () => (/* binding */ publishConfirmDeleteToApp),
/* harmony export */   publishIsBusyToBuilder: () => (/* binding */ publishIsBusyToBuilder),
/* harmony export */   publishNoPermissionResourceInfoListChangeToBuilder: () => (/* binding */ publishNoPermissionResourceInfoListChangeToBuilder),
/* harmony export */   publishPortalUrlNeedToRegisterClientId: () => (/* binding */ publishPortalUrlNeedToRegisterClientId),
/* harmony export */   publishSidePanelToApp: () => (/* binding */ publishSidePanelToApp)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");
/* harmony import */ var _sync_type__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./sync-type */ "./jimu-for-builder/lib/sync-type.ts");


let pubsub;
try {
    pubsub = window.parent && window.parent._builderPubsub;
}
catch (e) {
    /**
     * In normal case, this file should not be loaded if app is out of builder,
     * but we catch this error to avoid this file is loaded accidentally when app is launched out of builder.
     */
    console.error('Can access parent.');
}
function listenBuilderEvents() {
    if (!pubsub) {
        return;
    }
    pubsub.unsubscribe('to_app');
    const store = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)();
    pubsub.subscribe('to_app', function (evt, data) {
        console.debug(evt, data);
    });
    pubsub.subscribe(`to_app.${_sync_type__WEBPACK_IMPORTED_MODULE_1__.ToAppMessage.AppConfigChanged}`, function (evt, appConfig) {
        const state = store.getState();
        if (state.appRuntimeInfo.currentPageId && !appConfig.pages[state.appRuntimeInfo.currentPageId]) {
            const defaultPageId = Object.keys(appConfig.pages).find(pId => appConfig.pages[pId].isDefault);
            jimu_core__WEBPACK_IMPORTED_MODULE_0__.jimuHistory.changePage(defaultPageId);
        }
        store.dispatch(jimu_core__WEBPACK_IMPORTED_MODULE_0__.appActions.appConfigChanged(appConfig));
    });
    pubsub.subscribe(`to_app.${_sync_type__WEBPACK_IMPORTED_MODULE_1__.ToAppMessage.AppInfoChanged}`, function (evt, appInfo) {
        store.dispatch(jimu_core__WEBPACK_IMPORTED_MODULE_0__.appActions.appInfoChanged(appInfo));
    });
    pubsub.subscribe(`to_app.${_sync_type__WEBPACK_IMPORTED_MODULE_1__.ToAppMessage.PortalSelfChanged}`, function (evt, portalSelf) {
        store.dispatch(jimu_core__WEBPACK_IMPORTED_MODULE_0__.appActions.setPortalSelf(portalSelf));
        if (portalSelf && !portalSelf.isPortal) {
            const newPortalUrl = `https://${portalSelf.urlKey}.${portalSelf.customBaseUrl}`;
            if (portalSelf.urlKey && !jimu_core__WEBPACK_IMPORTED_MODULE_0__.portalUrlUtils.isSamePortalUrl(store.getState().portalUrl, newPortalUrl)) {
                store.dispatch(jimu_core__WEBPACK_IMPORTED_MODULE_0__.appActions.setPortalInfo({
                    portalUrl: newPortalUrl
                }));
            }
        }
    });
    pubsub.subscribe(`to_app.${_sync_type__WEBPACK_IMPORTED_MODULE_1__.ToAppMessage.UserSignIn}`, function (evt, user) {
        store.dispatch(jimu_core__WEBPACK_IMPORTED_MODULE_0__.appActions.userSignIn(user));
    });
    pubsub.subscribe(`to_app.${_sync_type__WEBPACK_IMPORTED_MODULE_1__.ToAppMessage.SetMainPortal}`, function (evt, mainPortalInfo) {
        const portalInfo = Object.assign({
            portalUrl: store.getState().portalUrl,
            clientId: store.getState().clientId,
            isWebTier: store.getState().isWebTier
        }, mainPortalInfo);
        store.dispatch(jimu_core__WEBPACK_IMPORTED_MODULE_0__.appActions.setPortalInfo(portalInfo));
    });
    pubsub.subscribe(`to_app.${_sync_type__WEBPACK_IMPORTED_MODULE_1__.ToAppMessage.DialogInfosChanged}`, function (action, dialogIds) {
        store.dispatch(jimu_core__WEBPACK_IMPORTED_MODULE_0__.appActions.dialogInfosChanged(dialogIds));
    });
    pubsub.subscribe(`to_app.${_sync_type__WEBPACK_IMPORTED_MODULE_1__.ToAppMessage.ChangeAppMode}`, function (action, mode) {
        store.dispatch(jimu_core__WEBPACK_IMPORTED_MODULE_0__.appActions.appModeChanged(mode));
    });
    pubsub.subscribe(`to_app.${_sync_type__WEBPACK_IMPORTED_MODULE_1__.ToAppMessage.ChangeWidgetStateProp}`, function (action, alterState) {
        store.dispatch(jimu_core__WEBPACK_IMPORTED_MODULE_0__.appActions.widgetStatePropChange(alterState.widgetId, alterState.propKey, alterState.value));
    });
    pubsub.subscribe(`to_app.${_sync_type__WEBPACK_IMPORTED_MODULE_1__.ToAppMessage.ChangeWidgetMutableStateProp}`, function (action, alterState) {
        jimu_core__WEBPACK_IMPORTED_MODULE_0__.MutableStoreManager.getInstance().updateStateValue(alterState.widgetId, alterState.propKey, alterState.value);
    });
    pubsub.subscribe(`to_app.${_sync_type__WEBPACK_IMPORTED_MODULE_1__.ToAppMessage.ChangePage}`, function (action, pageId) {
        const pageJson = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().getState().appConfig.pages[pageId];
        if (pageJson.type === jimu_core__WEBPACK_IMPORTED_MODULE_0__.PageType.Link || pageJson.type === jimu_core__WEBPACK_IMPORTED_MODULE_0__.PageType.Folder || jimu_core__WEBPACK_IMPORTED_MODULE_0__.urlUtils.parseAppPath(location.pathname, (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().getState().appConfig).pageId === pageId) {
            (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().dispatch(jimu_core__WEBPACK_IMPORTED_MODULE_0__.appActions.currentPageChanged(pageId));
        }
        else {
            // currentPage will be updated after path change.
            jimu_core__WEBPACK_IMPORTED_MODULE_0__.jimuHistory.changePage(pageId);
        }
    });
    pubsub.subscribe(`to_app.${_sync_type__WEBPACK_IMPORTED_MODULE_1__.ToAppMessage.ChangeDialog}`, function (action, dialogId) {
        jimu_core__WEBPACK_IMPORTED_MODULE_0__.jimuHistory.changeDialog(dialogId);
        store.dispatch(jimu_core__WEBPACK_IMPORTED_MODULE_0__.appActions.currentDialogChanged(dialogId));
    });
    pubsub.subscribe(`to_app.${_sync_type__WEBPACK_IMPORTED_MODULE_1__.ToAppMessage.ChangeSelection}`, function (action, selection) {
        store.dispatch(jimu_core__WEBPACK_IMPORTED_MODULE_0__.appActions.selectionChanged(selection));
    });
    pubsub.subscribe(`to_app.${_sync_type__WEBPACK_IMPORTED_MODULE_1__.ToAppMessage.BuilderTriggerKeyboard}`, function (action, event) {
        jimu_core__WEBPACK_IMPORTED_MODULE_0__.keyboardUtils.triggerEvent(event);
    });
    pubsub.subscribe(`to_app.${_sync_type__WEBPACK_IMPORTED_MODULE_1__.ToAppMessage.ChangeBrowserSizeMode}`, function (action, mode) {
        store.dispatch(jimu_core__WEBPACK_IMPORTED_MODULE_0__.appActions.browserSizeModeChanged(mode));
    });
    pubsub.subscribe(`to_app.${_sync_type__WEBPACK_IMPORTED_MODULE_1__.ToAppMessage.BuilderSessionChanged}`, function (action, sessions) {
        // console.log(JSON.stringify(sessions));
        jimu_core__WEBPACK_IMPORTED_MODULE_0__.SessionManager.getInstance().syncSessionsFromOtherWindow(sessions);
    });
    pubsub.subscribe(`to_app.${_sync_type__WEBPACK_IMPORTED_MODULE_1__.ToAppMessage.BuilderNoPermissionResourceInfoListChanged}`, function (action, noPermissionResourceInfoList) {
        jimu_core__WEBPACK_IMPORTED_MODULE_0__.SessionManager.getInstance().syncNoPermissionResourceInfoListFromOtherWindow(noPermissionResourceInfoList);
    });
    pubsub.subscribe(`to_app.${_sync_type__WEBPACK_IMPORTED_MODULE_1__.ToAppMessage.ChangeZoomScale}`, function (action, zoomScale) {
        store.dispatch(jimu_core__WEBPACK_IMPORTED_MODULE_0__.appActions.zoomScaleChange(zoomScale));
    });
    pubsub.subscribe(`to_app.${_sync_type__WEBPACK_IMPORTED_MODULE_1__.ToAppMessage.ActivePagePartChanged}`, function (action, part) {
        store.dispatch(jimu_core__WEBPACK_IMPORTED_MODULE_0__.appActions.activePagePartChanged(part));
    });
    pubsub.subscribe(`to_app.${_sync_type__WEBPACK_IMPORTED_MODULE_1__.ToAppMessage.AnimationPreview}`, function (action, info) {
        store.dispatch(jimu_core__WEBPACK_IMPORTED_MODULE_0__.appActions.setupAnimationPreview(info));
    });
    pubsub.subscribe(`to_app.${_sync_type__WEBPACK_IMPORTED_MODULE_1__.ToAppMessage.HoverPreview}`, function (action, info) {
        store.dispatch(jimu_core__WEBPACK_IMPORTED_MODULE_0__.appActions.setupHoverPreview(info));
    });
    pubsub.subscribe(`to_app.${_sync_type__WEBPACK_IMPORTED_MODULE_1__.ToAppMessage.SectionNavInfoChanged}`, function (action, data) {
        store.dispatch(jimu_core__WEBPACK_IMPORTED_MODULE_0__.appActions.sectionNavInfoChanged(data.sectionId, data.navInfo));
        jimu_core__WEBPACK_IMPORTED_MODULE_0__.jimuHistory.changeViewBySectionNavInfo(data.sectionId, data.navInfo);
    });
    pubsub.subscribe(`to_app.${_sync_type__WEBPACK_IMPORTED_MODULE_1__.ToAppMessage.ScreenGroupNavInfoChanged}`, function (action, data) {
        store.dispatch(jimu_core__WEBPACK_IMPORTED_MODULE_0__.appActions.screenGroupNavInfoChanged(data.screenGroupId, data.activeIndex));
    });
    pubsub.subscribe(`to_app.${_sync_type__WEBPACK_IMPORTED_MODULE_1__.ToAppMessage.TocHoverInfoChanged}`, function (action, data) {
        const { layoutInfo, hovered } = data;
        const { layoutId, layoutItemId } = layoutInfo;
        const element = document.querySelector(`div.builder-layout-item[data-layoutid="${layoutId}"][data-layoutitemid="${layoutItemId}"]`);
        if (element) {
            hovered ? element.classList.add('hovered') : element.classList.remove('hovered');
        }
    });
    pubsub.subscribe(`to_app.${_sync_type__WEBPACK_IMPORTED_MODULE_1__.ToAppMessage.SetClientIdAlertIsCancelled}`, function (action, data) {
        jimu_core__WEBPACK_IMPORTED_MODULE_0__.SessionManager.getInstance().onClientIdDialogFinished(data === null || data === void 0 ? void 0 : data.portalUrl, null, new Error('setting clientId is cancelled.'));
    });
    pubsub.subscribe(`to_app.${_sync_type__WEBPACK_IMPORTED_MODULE_1__.ToAppMessage.UtilityStateChanged}`, function (action, data) {
        store.dispatch(jimu_core__WEBPACK_IMPORTED_MODULE_0__.appActions.utilityStateChange(data.utilityId, data.state));
    });
}
function publishAppSessionChangeToBuilder() {
    publishEventToBuilder(`to_builder.${_sync_type__WEBPACK_IMPORTED_MODULE_1__.ToBuilderMessage.AppSessionChanged}`, jimu_core__WEBPACK_IMPORTED_MODULE_0__.SessionManager.getInstance().getSessions());
}
function publishNoPermissionResourceInfoListChangeToBuilder() {
    publishEventToBuilder(`to_builder.${_sync_type__WEBPACK_IMPORTED_MODULE_1__.ToBuilderMessage.AppNoPermissionResourceInfoListChanged}`, jimu_core__WEBPACK_IMPORTED_MODULE_0__.SessionManager.getInstance().getNoPermissionResourceInfoList());
}
function publishCheck498ErrorToBuilder(url) {
    publishEventToBuilder(`to_builder.${_sync_type__WEBPACK_IMPORTED_MODULE_1__.ToBuilderMessage.NeedToCheck498Error}`, url);
}
function publishAppStateChangeToBuilder() {
    publishEventToBuilder(`to_builder.${_sync_type__WEBPACK_IMPORTED_MODULE_1__.ToBuilderMessage.AppStateChanged}`, (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().getState());
}
function publishAppIsLoadedToBuilder() {
    publishEventToBuilder(`to_builder.${_sync_type__WEBPACK_IMPORTED_MODULE_1__.ToBuilderMessage.AppIsLoaded}`);
}
function letBuilderPopupChooseWidget(layoutId, layoutItemId) {
    publishEventToBuilder(`to_builder.${_sync_type__WEBPACK_IMPORTED_MODULE_1__.ToBuilderMessage.PopupChooseWidget}`, {
        layoutId: layoutId,
        layoutItemId: layoutItemId
    });
}
function letBuilderAddResource(resourceItemInfo) {
    publishEventToBuilder(`to_builder.${_sync_type__WEBPACK_IMPORTED_MODULE_1__.ToBuilderMessage.AppAddResource}`, resourceItemInfo);
}
function letBuilderClearResource(appId) {
    publishEventToBuilder(`to_builder.${_sync_type__WEBPACK_IMPORTED_MODULE_1__.ToBuilderMessage.AppClearResources}`, appId);
}
function letBuilderResponseToKeyboard(event) {
    publishEventToBuilder(`to_builder.${_sync_type__WEBPACK_IMPORTED_MODULE_1__.ToBuilderMessage.AppTriggerKeyboard}`, event);
}
function letBuilderShowLayoutToolbar(tools) {
    publishEventToBuilder(`to_builder.${_sync_type__WEBPACK_IMPORTED_MODULE_1__.ToBuilderMessage.SetLayoutTools}`, tools);
}
function clearLastAppConfigFromHistory() {
    publishEventToBuilder(`to_builder.${_sync_type__WEBPACK_IMPORTED_MODULE_1__.ToBuilderMessage.ClearLastAppConfigFromHistory}`);
}
function publishIsBusyToBuilder(isBusy) {
    publishEventToBuilder(`to_builder.${_sync_type__WEBPACK_IMPORTED_MODULE_1__.ToBuilderMessage.SetIsBusy}`, isBusy);
}
function publishConfirmDeleteToApp(itemToDelete) {
    publishEventToBuilder(`to_builder.${_sync_type__WEBPACK_IMPORTED_MODULE_1__.ToBuilderMessage.ConfirmDelete}`, itemToDelete);
}
function publishPortalUrlNeedToRegisterClientId(portalUrl, needToSignIn, serviceUrl) {
    publishEventToBuilder(`to_builder.${_sync_type__WEBPACK_IMPORTED_MODULE_1__.ToBuilderMessage.NeedToRegisterClinetId}`, { portalUrl, needToSignIn, serviceUrl });
}
function publishSidePanelToApp(option) {
    publishEventToBuilder(`to_builder.${_sync_type__WEBPACK_IMPORTED_MODULE_1__.ToBuilderMessage.SetSidePanel}`, option);
}
function publishEventToBuilder(action, data) {
    if (!pubsub) {
        return;
    }
    pubsub.publishSync(action, data);
}


/***/ }),

/***/ "./jimu-for-builder/lib/app-config-actions.ts":
/*!****************************************************!*\
  !*** ./jimu-for-builder/lib/app-config-actions.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AppConfigAction: () => (/* binding */ AppConfigAction),
/* harmony export */   getAppConfigAction: () => (/* binding */ getAppConfigAction)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");
/* harmony import */ var jimu_layouts_layout_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! jimu-layouts/layout-runtime */ "jimu-layouts/layout-runtime");
/* harmony import */ var _utils_app_config_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/app-config-utils */ "./jimu-for-builder/lib/utils/app-config-utils.ts");
/* harmony import */ var _builder_app_sync__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./builder-app-sync */ "./jimu-for-builder/lib/builder-app-sync.ts");
/* harmony import */ var _app_builder_sync__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./app-builder-sync */ "./jimu-for-builder/lib/app-builder-sync.ts");
/* harmony import */ var _app_state_history_extension__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./app-state-history-extension */ "./jimu-for-builder/lib/app-state-history-extension.ts");
/* harmony import */ var _app_state_redux_store_extension__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./app-state-redux-store-extension */ "./jimu-for-builder/lib/app-state-redux-store-extension.ts");
/* harmony import */ var _builder_state_store_extension__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./builder-state-store-extension */ "./jimu-for-builder/lib/builder-state-store-extension.ts");
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../index */ "./jimu-for-builder/index.tsx");
/* harmony import */ var _app_widget_manager__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./app-widget-manager */ "./jimu-for-builder/lib/app-widget-manager.tsx");
/* harmony import */ var _app_config_service__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./app-config-service */ "./jimu-for-builder/lib/app-config-service/index.ts");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};











function getAppConfig() {
    const state = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().getState();
    if (window.jimuConfig.isBuilder) {
        return state && state.appStateInBuilder && state.appStateInBuilder.appConfig;
    }
    else {
        return state && state.appConfig;
    }
}
function getAppConfigAction(appConfig = undefined) {
    if (!appConfig) {
        appConfig = getAppConfig();
    }
    return new AppConfigAction(appConfig);
}
class AppConfigAction {
    /**
   * When duplicate a page or dialog, we'll duplicate all size mode layouts, but the shared contents should be duplicated only one time.
   * So, when duplicate the size mode layouts, we need to consider the contents that have been duplicated. If a content has been duplicated,
   * duplicate the same content will need to use the duplicated content id instead of create a new one.
   *
   * When start to duplicate a page or dialog, must clean this map and set it as `{}`, and restore to {} when duplication is done.
   */
    // private duplicatedContentMaps?: { [id: string]: string } = {}
    // private isDuplicatingPage?: boolean
    constructor(appConfig) {
        /**
         * After delete the widget, clear the message action of the widget
         * @oldAppConfig
         * @newAppConfig
         * */
        this.clearDeletedWidgetMessageAction = (oldAppConfig, newAppConfig) => {
            const deletedMessageConfigs = this.getDeletedWidgetsMessageConfigs(oldAppConfig, newAppConfig);
            deletedMessageConfigs.forEach(message => {
                this.removeMessageAction(message);
            });
        };
        /**
         * Get the message config of the deleted widget
         * @oldAppConfig
         * @newAppConfig
         * */
        this.getDeletedWidgetsMessageConfigs = (oldAppConfig, newAppConfig) => {
            const oldMessageConfigs = oldAppConfig.messageConfigs;
            const newMessageConfigs = newAppConfig.messageConfigs;
            const deletedMessageConfigs = [];
            if (!oldMessageConfigs) {
                return deletedMessageConfigs;
            }
            const oldMessageConfigsKeys = Object.keys(oldMessageConfigs);
            const newMessageConfigsKeys = Object.keys(newMessageConfigs);
            for (let i = 0; i < oldMessageConfigsKeys.length; i++) {
                if (!newMessageConfigsKeys.includes(oldMessageConfigsKeys[i])) {
                    deletedMessageConfigs.push(oldMessageConfigs[oldMessageConfigsKeys[i]]);
                }
            }
            return deletedMessageConfigs;
        };
        /**
         * Remove message action
         * @message
         * */
        this.removeMessageAction = (message) => {
            var _a;
            (_a = message === null || message === void 0 ? void 0 : message.actions) === null || _a === void 0 ? void 0 : _a.forEach(actionJson => {
                const actionObj = _index__WEBPACK_IMPORTED_MODULE_8__.AppMessageManager.getInstance().getAction(actionJson.widgetId, actionJson.actionName);
                if (actionObj) {
                    actionObj.onRemoveListen(message.messageType, message.widgetId);
                }
            });
        };
        this.appConfig = appConfig;
    }
    /**
     *
     * @param replace by default, the change is appended to the change list. If replace = true, the change will replace the last change
     */
    exec(replace = false) {
        // this.duplicatedContentMaps = {}
        // this.isDuplicatingPage = false
        if (window.jimuConfig.isBuilder) {
            (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().dispatch({ type: 'IN_BUILDER_APPCONFIG_REDOCLEAR' });
            if (replace) {
                (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().dispatch(_app_state_history_extension__WEBPACK_IMPORTED_MODULE_5__.appStateHistoryActions.InBuilderRemoveLastAppConfigFromHistory());
            }
            _builder_app_sync__WEBPACK_IMPORTED_MODULE_3__.publishAppConfigChangeToApp(this.appConfig);
            const oldAppConfig = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().getState().appStateInBuilder.appConfig;
            const newAppConfig = this.appConfig;
            const removedWidgets = Object.keys(oldAppConfig.widgets).filter(wId => !newAppConfig.widgets[wId]);
            (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().dispatch(_builder_state_store_extension__WEBPACK_IMPORTED_MODULE_7__.builderActions.widgetsRemoved(removedWidgets));
            //clear the message action of the deleted widget
            this.clearDeletedWidgetMessageAction(oldAppConfig, newAppConfig);
            const newWidgets = Object.keys(newAppConfig.widgets).filter(wId => !oldAppConfig.widgets[wId]).map(wId => ({
                widgetId: wId,
                widgetUri: newAppConfig.widgets[wId].uri
            }));
            (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().dispatch(_builder_state_store_extension__WEBPACK_IMPORTED_MODULE_7__.builderActions.widgetsAdded(newWidgets));
            const appInfo = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().getState().appStateInBuilder.appInfo;
            /**
             * After `publishAppConfigChangeToApp`, app will call `publishAppStateChangeToBuilder` to update the appConfig in builder's state.
             * However, the `publishAppStateChangeToBuilder` is async, so we update the appConfig in builder's state here.
             */
            (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().dispatch(_app_state_redux_store_extension__WEBPACK_IMPORTED_MODULE_6__.appStateActions.inBuilderAppConfigChanged(this.appConfig));
            (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().dispatch(_app_state_history_extension__WEBPACK_IMPORTED_MODULE_5__.appStateHistoryActions.InBuilderPutAppConfigIntoHistory({ appConfig: this.appConfig, appInfo: appInfo }));
        }
        else {
            if (replace) {
                _app_builder_sync__WEBPACK_IMPORTED_MODULE_4__.clearLastAppConfigFromHistory();
            }
            const oldAppConfig = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().getState().appConfig;
            const newAppConfig = this.appConfig;
            //clear the message action of the deleted widget
            this.clearDeletedWidgetMessageAction(oldAppConfig, newAppConfig);
            (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().dispatch(jimu_core__WEBPACK_IMPORTED_MODULE_0__.appActions.appConfigChanged(this.appConfig));
        }
        return this;
    }
    // #region Widget APIs
    editWidgetConfig(widgetId, widgetConfig) {
        if (!this.appConfig.widgets[widgetId]) {
            return this;
        }
        this.appConfig = this.appConfig.setIn(['widgets', widgetId, 'config'], widgetConfig);
        return this;
    }
    /**
     * Update the passed in properties only.
     * To delete a property, please set the property to null
     * @param partialWidgetJson
     * @param outputDataSourcesJsons
     *    To create a data source, you need to pass in all of the generated properties.
     *    To update a data source, you can pass in the change properties only. Pass null to delete a property.
     */
    editWidget(partialWidgetJson, outputDataSourcesJsons) {
        if (!this.appConfig.widgets[partialWidgetJson.id]) {
            return this;
        }
        const oldWidgetJson = this.appConfig.widgets[partialWidgetJson.id];
        let newWidgetJson = oldWidgetJson;
        if (outputDataSourcesJsons) {
            outputDataSourcesJsons.forEach(dsJson => {
                if (!dsJson.isOutputFromWidget) {
                    dsJson.isOutputFromWidget = true;
                }
            });
            newWidgetJson = newWidgetJson.set('outputDataSources', outputDataSourcesJsons.map(dsJson => dsJson.id));
        }
        Object.keys(partialWidgetJson).forEach(k => {
            if (partialWidgetJson[k] === null) {
                if (k === 'outputDataSourcesJson') {
                    if (partialWidgetJson.outputDataSources) {
                        partialWidgetJson.outputDataSources.forEach(dsId => this.removeDataSource(dsId));
                    }
                }
                newWidgetJson = newWidgetJson.without(k);
                delete partialWidgetJson[k];
            }
        });
        // remove old ds
        if (oldWidgetJson.outputDataSources) {
            oldWidgetJson.outputDataSources.forEach(dsId => {
                if (!newWidgetJson.outputDataSources || !newWidgetJson.outputDataSources.includes(dsId)) {
                    this.removeDataSource(dsId);
                }
            });
        }
        // add/update new ds
        if (newWidgetJson.outputDataSources) {
            newWidgetJson.outputDataSources.forEach(dsId => {
                const outputDataSourcesJson = outputDataSourcesJsons && outputDataSourcesJsons.find(newDsJson => newDsJson.id === dsId);
                if (outputDataSourcesJson) {
                    if (!oldWidgetJson.outputDataSources || !oldWidgetJson.outputDataSources.includes(dsId)) {
                        this.addDataSource((0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.Immutable)(outputDataSourcesJson));
                    }
                    else {
                        let oldDsJson = this.appConfig.dataSources[dsId];
                        if (!oldDsJson) {
                            console.error('Unknown error. Widget output data source is not in data source json.', dsId);
                            return;
                        }
                        Object.keys(outputDataSourcesJson).forEach(k => {
                            if (outputDataSourcesJson[k] === null) {
                                oldDsJson = oldDsJson.without(k);
                                delete outputDataSourcesJson[k];
                            }
                        });
                        this.editDataSource(oldDsJson.merge(outputDataSourcesJson));
                    }
                }
            });
        }
        newWidgetJson = newWidgetJson.merge(partialWidgetJson);
        if (partialWidgetJson.useDataSources && newWidgetJson.layouts && newWidgetJson.manifest.properties.passDataSourceToChildren) {
            this.copyUseDataSourceToAllChildWidgets(oldWidgetJson, newWidgetJson);
        }
        this.appConfig = this.appConfig.setIn(['widgets', partialWidgetJson.id], newWidgetJson);
        return this;
    }
    /**
     * Update a sigle widget property. Does not `outputDataSources` property
     * @param widgetId
     * @param prop
     * @param val
     */
    editWidgetProperty(widgetId, prop, val) {
        if (!this.appConfig.widgets || !this.appConfig.widgets[widgetId]) {
            return this;
        }
        if (prop === 'outputDataSources') {
            console.error('Please use editWidget to update outputDataSources.');
            return this;
        }
        const widgetJson = this.appConfig.widgets[widgetId];
        const newWidgetJson = this.editJsonProperty(widgetJson, prop, val);
        if (widgetJson === newWidgetJson) {
            return this;
        }
        this.appConfig = this.appConfig.setIn(['widgets', widgetId], newWidgetJson);
        if (prop.includes('.')) {
            return this;
        }
        return this.editWidget({ id: widgetId, [prop]: val });
    }
    /**
     *
     * @param widgetJson basic widget info, like uri. manifest and id will be set in this method.
     * @param createEmbedLayout
     */
    createWidget(widgetJson, createEmbedLayout = true) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const loadedJson = yield _app_widget_manager__WEBPACK_IMPORTED_MODULE_9__["default"].getInstance().handleNewWidgetJson(widgetJson);
                const result = _app_config_service__WEBPACK_IMPORTED_MODULE_10__.widgetService.createWidget(this.appConfig, loadedJson, [jimu_layouts_layout_runtime__WEBPACK_IMPORTED_MODULE_1__.utils.getCurrentSizeMode()], createEmbedLayout);
                this.appConfig = result[0];
                const widgetId = result[1];
                return this.appConfig.widgets[widgetId];
            }
            catch (e) {
                console.error(e);
            }
            return null;
        });
    }
    removeWidget(widgetId) {
        this.appConfig = _app_config_service__WEBPACK_IMPORTED_MODULE_10__.widgetService.remove(this.appConfig, widgetId);
        return this;
    }
    editControllerPanel(controllerWidgetId, value) {
        this.appConfig = this.appConfig.setIn(['controllerPanels', controllerWidgetId], value);
        return this;
    }
    removeControllerPanel(controllerWidgetId) {
        var _a;
        if ((_a = this.appConfig.controllerPanels) === null || _a === void 0 ? void 0 : _a[controllerWidgetId]) {
            this.appConfig = this.appConfig.set('controllerPanels', this.appConfig.controllerPanels.without(controllerWidgetId));
        }
        return this;
    }
    removeLayoutFromWidget(widgetId, layoutName) {
        var _a, _b, _c;
        if (!((_a = this.appConfig.widgets[widgetId]) === null || _a === void 0 ? void 0 : _a.layouts) || !((_b = this.appConfig.widgets[widgetId]) === null || _b === void 0 ? void 0 : _b.layouts[layoutName])) {
            return this;
        }
        Object.keys((_c = this.appConfig.widgets[widgetId]) === null || _c === void 0 ? void 0 : _c.layouts[layoutName]).forEach(sizeMode => {
            var _a;
            const layoutId = (_a = this.appConfig.widgets[widgetId]) === null || _a === void 0 ? void 0 : _a.layouts[layoutName][sizeMode];
            this.removeLayout(layoutId);
        });
        this.appConfig = this.appConfig.setIn(['widgets', widgetId, 'layouts'], this.appConfig.widgets[widgetId].layouts.without(layoutName));
        return this;
    }
    // #endregion
    // #region Section APIs, View APIs
    /**
     * create section only, does not add into layout
     */
    createSection() {
        const result = _app_config_service__WEBPACK_IMPORTED_MODULE_10__.sectionService.createSection(this.appConfig, [jimu_layouts_layout_runtime__WEBPACK_IMPORTED_MODULE_1__.utils.getCurrentSizeMode()]);
        this.appConfig = result[0];
        const sectionId = result[1];
        return this.appConfig.sections[sectionId];
    }
    editSectionProperty(sectionId, prop, val) {
        let sectionJson = this.appConfig.sections[sectionId];
        if (!sectionJson) {
            return this;
        }
        sectionJson = this.editJsonProperty(sectionJson, prop, val);
        this.appConfig = this.appConfig.setIn(['sections', sectionId], sectionJson);
        return this;
    }
    editViewProperty(viewId, prop, val) {
        let viewJson = this.appConfig.views[viewId];
        if (!viewJson) {
            return this;
        }
        viewJson = this.editJsonProperty(viewJson, prop, val);
        this.appConfig = this.appConfig.setIn(['views', viewId], viewJson);
        return this;
    }
    /**
     * Add a view into a section, will create layouts for the view. The layouts are created depends on the section.
     *
     * @param viewJson the viewJson has id and label only
     * @param sectionId the section that the view will be added in
     */
    addView(sectionId) {
        var _a;
        let sizeModeList;
        const sectionJson = this.appConfig.sections[sectionId];
        if (((_a = sectionJson.views) === null || _a === void 0 ? void 0 : _a.length) > 0) {
            const firseViewId = sectionJson.views[0];
            const viewJson = this.appConfig.views[firseViewId];
            sizeModeList = Object.keys(viewJson.layout);
        }
        else {
            const { type, id } = jimu_layouts_layout_runtime__WEBPACK_IMPORTED_MODULE_1__.searchUtils.getContentRootContainerInfo(this.appConfig, sectionId, jimu_core__WEBPACK_IMPORTED_MODULE_0__.LayoutItemType.Section, jimu_layouts_layout_runtime__WEBPACK_IMPORTED_MODULE_1__.utils.getCurrentSizeMode());
            if (type === jimu_core__WEBPACK_IMPORTED_MODULE_0__.ContainerType.Header || type === jimu_core__WEBPACK_IMPORTED_MODULE_0__.ContainerType.Footer) {
                sizeModeList = Object.keys(this.appConfig[id].layout);
            }
            else if (type === jimu_core__WEBPACK_IMPORTED_MODULE_0__.ContainerType.Page) {
                sizeModeList = Object.keys(this.appConfig.pages[id].layout);
            }
            else if (type === jimu_core__WEBPACK_IMPORTED_MODULE_0__.ContainerType.Dialog) {
                sizeModeList = Object.keys(this.appConfig.dialogs[id].layout);
            }
        }
        const result = _app_config_service__WEBPACK_IMPORTED_MODULE_10__.sectionService.addView(this.appConfig, sectionId, sizeModeList);
        this.appConfig = result[0];
        return result[1];
    }
    /**
     * Duplicate the view in the section, return the new view.
     * @param viewId
     * @param sectionId
     * @param addToSection
     */
    duplicateView(viewId, sectionId, addToSection) {
        const sectionJson = this.appConfig.sections[sectionId];
        const firstView = this.appConfig.views[sectionJson.views[0]];
        const sizeModeList = Object.keys(firstView.layout);
        const result = _app_config_service__WEBPACK_IMPORTED_MODULE_10__.sectionService.duplicateView(this.appConfig, sectionId, viewId, sizeModeList, addToSection, null);
        this.appConfig = result[0];
        const newId = result[1];
        return this.appConfig.views[newId];
    }
    /**
     * Remove the view from the section. The last view in the section is not allowed remove
     * @param viewId
     * @param sectionId
     */
    removeView(viewId, sectionId) {
        this.appConfig = _app_config_service__WEBPACK_IMPORTED_MODULE_10__.sectionService.removeView(this.appConfig, sectionId, viewId);
        return this;
    }
    /**
     * Move the view position in the section. Move the view to the targetView's above/below
     * @param sectionId
     * @param viewId
     * @param targetViewId
     * @param position
     */
    moveViewInSection(sectionId, viewId, targetViewId, position) {
        if (!this.appConfig.sections || !this.appConfig.sections[sectionId] ||
            !this.appConfig.views || !this.appConfig.views[viewId] || !this.appConfig.views[targetViewId]) {
            return this;
        }
        if (targetViewId === viewId) {
            console.error('viewId is same to targetViewId.');
            return this;
        }
        let views = this.appConfig.sections[sectionId].views.asMutable();
        views = views.filter(view => view !== viewId);
        let index = views.indexOf(targetViewId);
        if (position === 'below')
            index++;
        views = views.slice(0, index).concat(viewId).concat(views.slice(index));
        this.appConfig = this.appConfig.setIn(['sections', sectionId, 'views'], views);
        return this;
    }
    // #endregion
    // #region Screen Group APIs, Screen APIs
    /**
     * Create an empty screen group
     */
    createScreenGroup() {
        // Create a new screenGroupJson
        const screenGroupId = _utils_app_config_utils__WEBPACK_IMPORTED_MODULE_2__.getUniqueId(this.appConfig, 'screenGroup');
        const screenGroupLabel = _utils_app_config_utils__WEBPACK_IMPORTED_MODULE_2__.getUniqueLabel(this.appConfig, 'screenGroup', jimu_core__WEBPACK_IMPORTED_MODULE_0__.i18n.getIntl().formatMessage({ id: 'screenGroup' }));
        const screenGroupJson = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.Immutable)({
            id: screenGroupId,
            label: screenGroupLabel,
            screens: [],
            transitionType: jimu_core__WEBPACK_IMPORTED_MODULE_0__.ScreenTransitionType.Fade
        });
        this.appConfig = this.appConfig.setIn(['screenGroups', screenGroupJson.id], screenGroupJson);
        return screenGroupJson;
    }
    editScreenGroupProperty(screenGroupId, prop, val) {
        let sgJson = this.appConfig.screenGroups[screenGroupId];
        if (!sgJson) {
            return this;
        }
        sgJson = this.editJsonProperty(sgJson, prop, val);
        this.appConfig = this.appConfig.setIn(['screenGroups', screenGroupId], sgJson);
        return this;
    }
    editScreenProperty(screenId, prop, val) {
        let screenJson = this.appConfig.screens[screenId];
        if (!screenJson) {
            return this;
        }
        screenJson = this.editJsonProperty(screenJson, prop, val);
        this.appConfig = this.appConfig.setIn(['screens', screenId], screenJson);
        return this;
    }
    moveScreenInGroup(screenGroupId, index, targetIndex, position) {
        var _a;
        if (!((_a = this.appConfig.screenGroups) === null || _a === void 0 ? void 0 : _a[screenGroupId]) || index === targetIndex) {
            return this;
        }
        const screens = this.appConfig.screenGroups[screenGroupId].screens.asMutable();
        const dragId = screens[index];
        const targetId = screens[targetIndex];
        screens.splice(index, 1);
        const newTargetIndex = screens.indexOf(targetId);
        if (position === 'below') {
            screens.splice(newTargetIndex, 1, targetId, dragId);
        }
        else {
            screens.splice(newTargetIndex, 1, dragId, targetId);
        }
        this.appConfig = this.appConfig.setIn(['screenGroups', screenGroupId, 'screens'], screens);
        return this;
    }
    removeScreenByIndex(index, screenGroupId) {
        var _a, _b;
        const screens = (_b = (_a = this.appConfig.screenGroups) === null || _a === void 0 ? void 0 : _a[screenGroupId]) === null || _b === void 0 ? void 0 : _b.screens;
        const screenId = screens === null || screens === void 0 ? void 0 : screens[index];
        return this.removeScreen(screenId, screenGroupId);
    }
    /**
     * Remove the screen from the screen group. The last screen in the screen group is not allowed remove
     * @param screenId
     * @param screenGroupId
     */
    removeScreen(screenId, screenGroupId, force = false) {
        this.appConfig = _app_config_service__WEBPACK_IMPORTED_MODULE_10__.screenGroupService.removeScreen(this.appConfig, screenGroupId, screenId);
        return this;
    }
    duplicateScreenByIndex(index, screenGroupId, addToScreenGroup = true) {
        var _a, _b;
        const screens = (_b = (_a = this.appConfig.screenGroups) === null || _a === void 0 ? void 0 : _a[screenGroupId]) === null || _b === void 0 ? void 0 : _b.screens;
        const screenId = screens === null || screens === void 0 ? void 0 : screens[index];
        return this.duplicateScreen(screenId, screenGroupId, addToScreenGroup);
    }
    /**
     * Duplicate the screen in the screen group, return the new screen.
     * @param screenId
     * @param screenGroupId
     * @param addToScreenGroup
     */
    duplicateScreen(screenId, screenGroupId, addToScreenGroup = true) {
        const sgJson = this.appConfig.screenGroups[screenGroupId];
        const firstScreen = this.appConfig.screens[sgJson.screens[0]];
        const sizeModeList = Object.keys(firstScreen.main.layout);
        const result = _app_config_service__WEBPACK_IMPORTED_MODULE_10__.screenGroupService.duplicateScreen(this.appConfig, screenGroupId, screenId, sizeModeList, addToScreenGroup, null);
        this.appConfig = result[0];
        const newId = result[1];
        return this.appConfig.screens[newId];
    }
    // #endregion
    // #region Page APIs
    editPageProperty(pageId, prop, val) {
        if (!this.appConfig.pages || !this.appConfig.pages[pageId]) {
            return this;
        }
        let pageJson = this.appConfig.pages[pageId];
        pageJson = this.editJsonProperty(pageJson, prop, val);
        this.appConfig = this.appConfig.setIn(['pages', pageId], pageJson);
        return this;
    }
    /**
     *
     * @param pageJson
     *
     * Add a new page. Only the folder and link page is created here.
     * The other page (the page can put widgets) are created in `template-utils in jimu-for-builder`
     */
    addPage(pageJson) {
        if (this.appConfig.pages && this.appConfig.pages[pageJson.id]) {
            return this;
        }
        this.appConfig = this.appConfig.setIn(['pages', pageJson.id], pageJson);
        this.appConfig = this.appConfig.set('pageStructure', this.appConfig.pageStructure.concat([{ [pageJson.id]: [] }]));
        return this;
    }
    /**
     *
     * @param pageId
     * @param duplicatePageJsonOnly
     * if duplicatePageJsonOnly is true, the page won't be put into page structure.
     * It's used when one page(or folder, or link) need to duplicate its sub pages.
     *
     * This logic need to be refacted when page structure has more than two levels.
     */
    duplicatePage(pageId, duplicatePageJsonOnly = false) {
        if (!this.appConfig.pages || !this.appConfig.pages[pageId]) {
            return null;
        }
        // this.isDuplicatingPage = true
        let newPageJson = this.appConfig.pages[pageId].set('id', _utils_app_config_utils__WEBPACK_IMPORTED_MODULE_2__.getUniqueId(this.appConfig, 'page'));
        newPageJson = newPageJson.set('label', this.getDuplicateLabel('page', newPageJson.label));
        this.appConfig = this.appConfig.setIn(['pages', newPageJson.id], newPageJson);
        if (newPageJson.isDefault) {
            newPageJson = newPageJson.set('isDefault', false);
        }
        // duplicate the page self
        if (newPageJson.type !== jimu_core__WEBPACK_IMPORTED_MODULE_0__.PageType.Link && newPageJson.type !== jimu_core__WEBPACK_IMPORTED_MODULE_0__.PageType.Folder) {
            const duplicateContext = {};
            const service = _app_config_service__WEBPACK_IMPORTED_MODULE_10__.LayoutServiceProvider.getServiceFromSizeModeLayout(this.appConfig, newPageJson.layout);
            const result = service.duplicateSizeModeLayouts(this.appConfig, newPageJson.layout, jimu_core__WEBPACK_IMPORTED_MODULE_0__.LayoutParentType.Page, newPageJson.id, duplicateContext);
            this.appConfig = result[0];
            newPageJson = newPageJson.set('layout', result[1]);
            // this.isDuplicatingPage = false
            // handle internal config after copying the widget.
            this.appConfig = _app_config_service__WEBPACK_IMPORTED_MODULE_10__.widgetService.afterBatchCopied(this.appConfig, this.appConfig, duplicateContext);
        }
        const ps = this.appConfig.pageStructure.find(ps => !!ps[pageId]);
        // duplicate sub pages if it has
        const newSubPId = [];
        if (ps) {
            ps[pageId].forEach(subId => {
                // add sub page
                const newSubPageJson = this.duplicatePage(subId, true);
                newSubPId.push(newSubPageJson.id);
            });
        }
        // handle the structure
        if (!duplicatePageJsonOnly) {
            if (ps) { // first aspect  add ps
                // add parent ps
                this.appConfig = this.appConfig.set('pageStructure', this.appConfig.pageStructure.concat([{ [newPageJson.id]: [] }]));
                if (newSubPId.length > 0) { // add sub ps
                    const parentPId = newPageJson.id;
                    let psIndex = this.appConfig.pageStructure.length - 1;
                    if (psIndex < 0)
                        psIndex = 0;
                    this.appConfig = this.appConfig.setIn(['pageStructure', psIndex + '', parentPId], newSubPId);
                }
            }
            else {
                // eslint-disable-next-line
                this.appConfig.pageStructure.some((ps, i) => {
                    const pId = Object.keys(ps).find(pId => ps[pId].includes(pageId));
                    if (pId) {
                        this.appConfig = this.appConfig.setIn(['pageStructure', i + '', pId], this.appConfig.pageStructure[i][pId].concat(newPageJson.id));
                        return true;
                    }
                });
            }
        }
        this.appConfig = this.appConfig.setIn(['pages', newPageJson.id], newPageJson);
        return newPageJson;
    }
    movePageIntoPage(subPageId, parentPageId) {
        if (!this.appConfig.pages || !this.appConfig.pages[subPageId] || !this.appConfig.pages[parentPageId]) {
            return this;
        }
        if (subPageId === parentPageId) {
            console.error('SubPage is same to ParentPage.');
            return this;
        }
        if (!_utils_app_config_utils__WEBPACK_IMPORTED_MODULE_2__.isFirstLevelPage(this.appConfig, parentPageId)) {
            console.error('ParentPage is not on the first aspect.');
            return this;
        }
        if (_utils_app_config_utils__WEBPACK_IMPORTED_MODULE_2__.isPageHasSubPage(this.appConfig, subPageId)) {
            console.error('SubPage has sub page(s).');
            return this;
        }
        this.removePageFromPageStructure(subPageId);
        this.movePageIntoPageForPageStructure(subPageId, parentPageId);
        return this;
    }
    orderPageToPage(pageId, targetPageId, type) {
        if (!this.appConfig.pages || !this.appConfig.pages[targetPageId] || !this.appConfig.pages[pageId]) {
            return this;
        }
        if (targetPageId === pageId) {
            console.error('pageId is same to targetPageId.');
            return this;
        }
        const isTopPageSub = !_utils_app_config_utils__WEBPACK_IMPORTED_MODULE_2__.isFirstLevelPage(this.appConfig, targetPageId);
        if ((_utils_app_config_utils__WEBPACK_IMPORTED_MODULE_2__.isPageHasSubPage(this.appConfig, pageId) || this.appConfig.pages[pageId].type === jimu_core__WEBPACK_IMPORTED_MODULE_0__.PageType.Folder) && isTopPageSub) {
            console.error('page structure allow two aspects only');
            return this;
        }
        // get pageId's page structure
        const ps = this.appConfig.pageStructure.find(ps => !!ps[pageId]);
        this.removePageFromPageStructure(pageId);
        if (isTopPageSub) {
            // eslint-disable-next-line
            this.appConfig.pageStructure.some((p, i) => {
                const pId = Object.keys(p)[0];
                let index = p[pId].indexOf(targetPageId);
                if (index > -1) {
                    let subPS = this.appConfig.pageStructure[i][pId];
                    if (type === 'bottom') {
                        index = index + 1;
                    }
                    subPS = subPS.slice(0, index).concat([pageId]).concat(subPS.slice(index));
                    this.appConfig = this.appConfig.setIn(['pageStructure', i + '', pId], subPS);
                    return true;
                }
            });
        }
        else {
            // eslint-disable-next-line
            this.appConfig.pageStructure.some((p, i) => {
                const pId = Object.keys(p)[0];
                if (pId === targetPageId) {
                    if (type === 'bottom') {
                        i = i + 1;
                    }
                    const pageStructure = this.appConfig.pageStructure.slice(0, i).concat([ps || { [pageId]: [] }]).concat(this.appConfig.pageStructure.slice(i));
                    this.appConfig = this.appConfig.set('pageStructure', pageStructure);
                    return true;
                }
            });
        }
        return this;
    }
    removePage(pageId, newHomePageId) {
        if (!this.appConfig.pages || !this.appConfig.pages[pageId]) {
            return this;
        }
        // TODO handle header/footer
        const pageJson = this.appConfig.pages[pageId];
        if (pageJson.type !== jimu_core__WEBPACK_IMPORTED_MODULE_0__.PageType.Folder && pageJson.type !== jimu_core__WEBPACK_IMPORTED_MODULE_0__.PageType.Link) {
            const service = _app_config_service__WEBPACK_IMPORTED_MODULE_10__.LayoutServiceProvider.getServiceFromSizeModeLayout(this.appConfig, pageJson.layout);
            this.appConfig = service.removeSizeModeLayouts(this.appConfig, pageJson.layout);
        }
        const { pageStructure } = this.appConfig;
        const ps = pageStructure && pageStructure.find(ps => !!ps[pageId]);
        if (ps && ps[pageId].length > 0) {
            ps[pageId].forEach(subPId => {
                this.removePage(subPId);
                // this.orderPageToPage(subPId, Object.keys(pageStructure[pageStructure.length - 1])[0], 'bottom');
            });
        }
        this.removePageFromPageStructure(pageId);
        this.appConfig = this.appConfig.set('pages', this.appConfig.pages.without(pageId));
        // set new home page if current page is default
        if (newHomePageId) {
            this.setHomePage(newHomePageId);
        }
        return this;
    }
    setHomePage(pageId) {
        return this.editPageProperty(pageId, 'isDefault', true);
    }
    setUseAutoSortInFixedLayout(value) {
        this.appConfig = this.appConfig.set('useAutoSortInFixedLayout', value);
        return this;
    }
    replaceHomePage(pageId) {
        // eslint-disable-next-line
        Object.keys(this.appConfig.pages).some((key, i) => {
            const pageJson = this.appConfig.pages[key];
            if (pageJson.isDefault) {
                this.editPageProperty(pageJson.id, 'isDefault', false);
                return true;
            }
        });
        return this.editPageProperty(pageId, 'isDefault', true);
    }
    // #endregion
    // #region Dialog APIs
    editDialog(dialogJson) {
        // update dialogs' index and config order when mode is changed.
        const prevDilgMode = this.appConfig.dialogs[dialogJson.id].mode;
        if (prevDilgMode !== dialogJson.mode) {
            const dialogs = this.appConfig.dialogs.asMutable({ deep: true });
            Object.keys(dialogs).forEach(dlgId => {
                const dlg = dialogs[dlgId];
                if (dlg.id === dialogJson.id) {
                    dialogs[dlgId] = Object.assign({}, dialogJson.asMutable({ deep: true }), {
                        index: Object.keys(dialogs).filter(dlgId => dialogs[dlgId].mode !== prevDilgMode).length
                    });
                }
                else if (dlg.mode === prevDilgMode) {
                    if (dlg.index > dialogJson.index) {
                        dlg.index = dlg.index - 1;
                    }
                }
            });
            this.appConfig = this.appConfig.set('dialogs', (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.Immutable)(dialogs));
        }
        else {
            this.appConfig = this.appConfig.setIn(['dialogs', dialogJson.id], dialogJson);
        }
        return this;
    }
    editDialogProperty(dlgId, prop, val) {
        if (!this.appConfig.dialogs || !this.appConfig.dialogs[dlgId]) {
            return this;
        }
        let dlgJson = this.appConfig.dialogs[dlgId];
        dlgJson = this.editJsonProperty(dlgJson, prop, val);
        return this.editDialog(dlgJson);
    }
    removeDialog(dialogId) {
        var _a;
        const dialogJson = (_a = this.appConfig.dialogs) === null || _a === void 0 ? void 0 : _a[dialogId];
        if (!dialogJson) {
            return this;
        }
        const service = _app_config_service__WEBPACK_IMPORTED_MODULE_10__.LayoutServiceProvider.getServiceFromSizeModeLayout(this.appConfig, dialogJson.layout);
        this.appConfig = service.removeSizeModeLayouts(this.appConfig, dialogJson.layout);
        // update dialogs' order
        const currentDlgMode = dialogJson.mode;
        const currentDlgIndex = dialogJson.index;
        const dialogs = this.appConfig.dialogs.without(dialogId).asMutable({ deep: true });
        Object.keys(dialogs).forEach(dlgId => {
            const dlg = dialogs[dlgId];
            if (dlg.mode === currentDlgMode && dlg.index > currentDlgIndex) {
                dlg.index = dlg.index - 1;
            }
        });
        this.appConfig = this.appConfig.set('dialogs', (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.Immutable)(dialogs));
        return this;
    }
    duplicateDialog(dialogId) {
        const dialogs = this.appConfig.dialogs;
        let newDlgJson = dialogs[dialogId];
        if (!dialogs || !newDlgJson) {
            return null;
        }
        const newDlgId = _utils_app_config_utils__WEBPACK_IMPORTED_MODULE_2__.getUniqueId(this.appConfig, 'dialog');
        const duplicateContext = {};
        const service = _app_config_service__WEBPACK_IMPORTED_MODULE_10__.LayoutServiceProvider.getServiceFromSizeModeLayout(this.appConfig, newDlgJson.layout);
        const result = service.duplicateSizeModeLayouts(this.appConfig, newDlgJson.layout, jimu_core__WEBPACK_IMPORTED_MODULE_0__.LayoutParentType.Dialog, newDlgId, duplicateContext);
        this.appConfig = result[0];
        const sizeModeLayout = result[1];
        this.appConfig = _app_config_service__WEBPACK_IMPORTED_MODULE_10__.widgetService.afterBatchCopied(this.appConfig, this.appConfig, duplicateContext);
        // get max index for current dialog mode.
        const dlgMaxIndex = Object.keys(Object.keys(dialogs).filter(dlgId => dialogs[dlgId].mode === newDlgJson.mode)).length;
        // duplicate the dialog with unique id and label, index,  and layout copy
        newDlgJson = newDlgJson.set('id', newDlgId)
            .set('index', dlgMaxIndex)
            .set('isSplash', false)
            .set('label', this.getDuplicateLabel('dialog', newDlgJson.label))
            .set('layout', sizeModeLayout);
        this.appConfig = this.appConfig.setIn(['dialogs', newDlgJson.id], newDlgJson);
        return newDlgJson;
    }
    /**
     * Only support reordering dialogs for same mode.
     */
    orderDialogToDialog(dialogId, targetDialogId, type) {
        const dialogs = this.appConfig.dialogs.asMutable({ deep: true });
        const currentDlg = dialogs[dialogId];
        const targetDlg = dialogs[targetDialogId];
        if (!dialogs || !currentDlg || !targetDlg) {
            return this;
        }
        if (targetDialogId === dialogId) {
            console.error('dialogId is same to targetDialogId.');
            return this;
        }
        let newIndex;
        if (targetDlg.index > currentDlg.index) {
            newIndex = type === 'top' ? targetDlg.index - 1 : targetDlg.index;
            Object.keys(dialogs).forEach(dlgId => {
                const dlg = dialogs[dlgId];
                if (dlg.mode === targetDlg.mode && dlg.id !== dialogId && dlg.index > currentDlg.index && dlg.index <= newIndex) {
                    dlg.index = dlg.index - 1;
                }
            });
        }
        else {
            newIndex = type === 'top' ? targetDlg.index : targetDlg.index + 1;
            Object.keys(dialogs).forEach(dlgId => {
                const dlg = dialogs[dlgId];
                if (dlg.mode === targetDlg.mode && dlg.id !== dialogId && dlg.index >= newIndex && dlg.index < currentDlg.index) {
                    dlg.index = dlg.index + 1;
                }
            });
        }
        // update current dialog
        dialogs[dialogId] = Object.assign({}, currentDlg, {
            index: newIndex,
            mode: targetDlg.mode
        });
        this.appConfig = this.appConfig.set('dialogs', (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.Immutable)(dialogs));
        return this;
    }
    replaceSplashDialog(dialogId, splashDialogId) {
        if (splashDialogId) {
            this.editDialogProperty(splashDialogId, 'isSplash', false);
        }
        if (dialogId !== splashDialogId) {
            return this.editDialogProperty(dialogId, 'isSplash', true);
        }
        else {
            return this;
        }
    }
    // #endregion
    // #region Layout APIs
    createLayoutForSizeMode(sizeMode, fromSizeMode, layouts, parentType, parentId, layoutName) {
        var _a;
        if (!layouts || !layouts[fromSizeMode] || layouts[sizeMode]) {
            return null;
        }
        const layoutId = layouts[fromSizeMode];
        const service = _app_config_service__WEBPACK_IMPORTED_MODULE_10__.LayoutServiceProvider.getService(this.appConfig, layoutId);
        const result = service.duplicateLayout(this.appConfig, layouts[fromSizeMode], fromSizeMode, sizeMode, null, false);
        if (result[1]) {
            this.appConfig = result[0];
            const newLayoutId = result[1];
            this.appConfig = this.appConfig.setIn(['layouts', newLayoutId, 'parent'], { id: parentId, type: parentType });
            const newLayouts = layouts.set(sizeMode, newLayoutId);
            switch (parentType) {
                case jimu_core__WEBPACK_IMPORTED_MODULE_0__.LayoutParentType.Dialog:
                    this.appConfig = this.appConfig.setIn(['dialogs', parentId, 'layout'], newLayouts);
                    break;
                case jimu_core__WEBPACK_IMPORTED_MODULE_0__.LayoutParentType.Page:
                    this.appConfig = this.appConfig.setIn(['pages', parentId, 'layout'], newLayouts);
                    break;
                case jimu_core__WEBPACK_IMPORTED_MODULE_0__.LayoutParentType.Header:
                    this.appConfig = this.appConfig.setIn(['header', 'layout'], newLayouts);
                    break;
                case jimu_core__WEBPACK_IMPORTED_MODULE_0__.LayoutParentType.Footer:
                    this.appConfig = this.appConfig.setIn(['footer', 'layout'], newLayouts);
                    break;
                case jimu_core__WEBPACK_IMPORTED_MODULE_0__.LayoutParentType.Screen:
                    this.appConfig = this.appConfig.setIn(['screens', parentId, 'layout'], newLayouts);
                    break;
                case jimu_core__WEBPACK_IMPORTED_MODULE_0__.LayoutParentType.View:
                    this.appConfig = this.appConfig.setIn(['views', parentId, 'layout'], newLayouts);
                    break;
                case jimu_core__WEBPACK_IMPORTED_MODULE_0__.LayoutParentType.Widget:
                    {
                        const widgetJson = this.appConfig.widgets[parentId];
                        if ((_a = widgetJson === null || widgetJson === void 0 ? void 0 : widgetJson.layouts) === null || _a === void 0 ? void 0 : _a[layoutName]) {
                            this.appConfig = this.appConfig.setIn(['widgets', parentId, 'layouts', layoutName], newLayouts);
                        }
                        break;
                    }
            }
            return newLayouts;
        }
        return null;
    }
    /**
     * Remove the layout and all the embedde layout for the size mode
     * If a widget is only used in current size mode, it should be removed
     * @param layoutId
     * @param sizeMode
     */
    removeSizeModeLayout(layoutId, sizeMode) {
        const service = _app_config_service__WEBPACK_IMPORTED_MODULE_10__.LayoutServiceProvider.getService(this.appConfig, layoutId);
        this.appConfig = service.removeLayout(this.appConfig, layoutId, sizeMode);
        return this;
    }
    addNewSectionToLayout(targetLayoutId) {
        const sectionJson = this.createSection();
        const service = _app_config_service__WEBPACK_IMPORTED_MODULE_10__.LayoutServiceProvider.getService(this.appConfig, targetLayoutId);
        const result = service.createBlankItem(this.appConfig, targetLayoutId);
        this.appConfig = result[0];
        const newItemId = result[1];
        const newLayoutInfo = { layoutId: targetLayoutId, layoutItemId: newItemId };
        this.editLayoutItemProperty(newLayoutInfo, 'type', jimu_core__WEBPACK_IMPORTED_MODULE_0__.LayoutItemType.Section)
            .editLayoutItemProperty(newLayoutInfo, 'sectionId', sectionJson.id);
        this.appConfig = _app_config_service__WEBPACK_IMPORTED_MODULE_10__.sectionService.addParent(this.appConfig, sectionJson.id, newLayoutInfo, jimu_layouts_layout_runtime__WEBPACK_IMPORTED_MODULE_1__.utils.getCurrentSizeMode());
        return newItemId;
    }
    addPlaceholderToLayout(targetLayoutId) {
        const service = _app_config_service__WEBPACK_IMPORTED_MODULE_10__.LayoutServiceProvider.getService(this.appConfig, targetLayoutId);
        const result = service.createBlankItem(this.appConfig, targetLayoutId);
        this.appConfig = result[0];
        const newItemId = result[1];
        const newLayoutInfo = { layoutId: targetLayoutId, layoutItemId: newItemId };
        this.editLayoutItemProperty(newLayoutInfo, 'type', jimu_core__WEBPACK_IMPORTED_MODULE_0__.LayoutItemType.Widget);
        return newItemId;
    }
    addNewWidgetToLayout(targetLayoutId, widgetJson) {
        return __awaiter(this, void 0, void 0, function* () {
            const newWidgetJson = yield this.createWidget(widgetJson, true);
            if (newWidgetJson) {
                const service = _app_config_service__WEBPACK_IMPORTED_MODULE_10__.LayoutServiceProvider.getService(this.appConfig, targetLayoutId);
                const result = service.createBlankItem(this.appConfig, targetLayoutId);
                this.appConfig = result[0];
                const newItemId = result[1];
                const newLayoutInfo = { layoutId: targetLayoutId, layoutItemId: newItemId };
                this.editLayoutItemProperty(newLayoutInfo, 'type', jimu_core__WEBPACK_IMPORTED_MODULE_0__.LayoutItemType.Widget)
                    .editLayoutItemProperty(newLayoutInfo, 'widgetId', newWidgetJson.id);
                const sizeMode = jimu_layouts_layout_runtime__WEBPACK_IMPORTED_MODULE_1__.utils.getCurrentSizeMode();
                this.appConfig = _app_config_service__WEBPACK_IMPORTED_MODULE_10__.widgetService.addParent(this.appConfig, newWidgetJson.id, newLayoutInfo, sizeMode);
                this.appConfig = _app_config_service__WEBPACK_IMPORTED_MODULE_10__.widgetService.afterAdded(this.appConfig, newWidgetJson.id, targetLayoutId, sizeMode, sizeMode);
                return newItemId;
            }
            return null;
        });
    }
    /**
     * Content has been created from template, add it to the layout using this method.
     * @param targetLayoutId
     * @param type
     * @param templateContentId
     * @returns
     */
    addTemplateContentToLayout(targetLayoutId, type, templateContentId) {
        const service = _app_config_service__WEBPACK_IMPORTED_MODULE_10__.LayoutServiceProvider.getService(this.appConfig, targetLayoutId);
        const result = service.addContent(this.appConfig, targetLayoutId, templateContentId, type, jimu_layouts_layout_runtime__WEBPACK_IMPORTED_MODULE_1__.utils.getCurrentSizeMode());
        this.appConfig = result[0];
        return { layoutId: targetLayoutId, layoutItemId: result[1] };
    }
    addContentToPlaceholder(placeholderLayoutInfo, type, contentId) {
        const { layoutId } = placeholderLayoutInfo;
        const sizeMode = jimu_layouts_layout_runtime__WEBPACK_IMPORTED_MODULE_1__.utils.getCurrentSizeMode();
        this.editLayoutItemProperty(placeholderLayoutInfo, 'type', type);
        this.appConfig = _app_config_service__WEBPACK_IMPORTED_MODULE_10__.emptyContentService.setContentId(this.appConfig, placeholderLayoutInfo, contentId, sizeMode);
        const layoutItem = jimu_layouts_layout_runtime__WEBPACK_IMPORTED_MODULE_1__.searchUtils.findLayoutItem(this.appConfig, placeholderLayoutInfo);
        const service = new _app_config_service__WEBPACK_IMPORTED_MODULE_10__.ContentServiceWrapper(this.appConfig, layoutItem);
        this.appConfig = service.afterAdded(layoutId, sizeMode, sizeMode);
        return this;
    }
    duplicateLayoutItemInSameLayout(layoutInfo) {
        const { layoutId } = layoutInfo;
        const service = _app_config_service__WEBPACK_IMPORTED_MODULE_10__.LayoutServiceProvider.getService(this.appConfig, layoutId);
        const context = {};
        const currentSizeMode = jimu_layouts_layout_runtime__WEBPACK_IMPORTED_MODULE_1__.utils.getCurrentSizeMode();
        const result = service.duplicateItemInSameLayout(this.appConfig, layoutInfo, currentSizeMode, context);
        this.appConfig = result[0];
        const layoutItemId = result[1];
        this.appConfig = _app_config_service__WEBPACK_IMPORTED_MODULE_10__.widgetService.afterBatchCopied(this.appConfig, this.appConfig, context);
        // remove the parent of the new content in other size mode
        const layoutItem = jimu_layouts_layout_runtime__WEBPACK_IMPORTED_MODULE_1__.searchUtils.findLayoutItem(this.appConfig, { layoutId, layoutItemId });
        const contentService = new _app_config_service__WEBPACK_IMPORTED_MODULE_10__.ContentServiceWrapper(this.appConfig, layoutItem);
        const allSizeModes = [jimu_core__WEBPACK_IMPORTED_MODULE_0__.BrowserSizeMode.Large, jimu_core__WEBPACK_IMPORTED_MODULE_0__.BrowserSizeMode.Medium, jimu_core__WEBPACK_IMPORTED_MODULE_0__.BrowserSizeMode.Small];
        allSizeModes.forEach((sizeMode) => {
            if (sizeMode !== currentSizeMode) {
                contentService.removeSizeModeParent(sizeMode);
            }
        });
        return result[1];
    }
    duplicateLayoutItemToOtherLayout(layoutInfo, targetLayoutId) {
        const layoutItem = jimu_layouts_layout_runtime__WEBPACK_IMPORTED_MODULE_1__.searchUtils.findLayoutItem(this.appConfig, layoutInfo);
        const contentService = new _app_config_service__WEBPACK_IMPORTED_MODULE_10__.ContentServiceWrapper(this.appConfig, layoutItem);
        const context = {};
        const currentSizeMode = jimu_layouts_layout_runtime__WEBPACK_IMPORTED_MODULE_1__.utils.getCurrentSizeMode();
        const dupResult = contentService.duplicate(currentSizeMode, context);
        this.appConfig = dupResult[0];
        const newContentId = dupResult[1];
        this.appConfig = _app_config_service__WEBPACK_IMPORTED_MODULE_10__.widgetService.afterBatchCopied(this.appConfig, this.appConfig, context);
        // the layoutInfo may not from the same size mode
        this.appConfig = _app_config_service__WEBPACK_IMPORTED_MODULE_10__.widgetService.removeParent(this.appConfig, newContentId, layoutInfo);
        const service = _app_config_service__WEBPACK_IMPORTED_MODULE_10__.LayoutServiceProvider.getService(this.appConfig, targetLayoutId);
        const cResult = service.createBlankItem(this.appConfig, targetLayoutId);
        this.appConfig = cResult[0];
        const newItemId = cResult[1];
        const newLayoutInfo = { layoutId: targetLayoutId, layoutItemId: newItemId };
        this.editLayoutItemProperty(newLayoutInfo, 'type', layoutItem.type);
        switch (layoutItem.type) {
            case jimu_core__WEBPACK_IMPORTED_MODULE_0__.LayoutItemType.Widget:
                this.editLayoutItemProperty(newLayoutInfo, 'widgetId', newContentId);
                break;
            case jimu_core__WEBPACK_IMPORTED_MODULE_0__.LayoutItemType.Section:
                this.editLayoutItemProperty(newLayoutInfo, 'sectionId', newContentId);
                break;
            case jimu_core__WEBPACK_IMPORTED_MODULE_0__.LayoutItemType.ScreenGroup:
                this.editLayoutItemProperty(newLayoutInfo, 'screenGroupId', newContentId);
                break;
        }
        const newLayoutItem = jimu_layouts_layout_runtime__WEBPACK_IMPORTED_MODULE_1__.searchUtils.findLayoutItem(this.appConfig, newLayoutInfo);
        const newContentService = new _app_config_service__WEBPACK_IMPORTED_MODULE_10__.ContentServiceWrapper(this.appConfig, newLayoutItem);
        newContentService.addParent(newLayoutInfo, currentSizeMode);
        // remove the parent of the new content in other size mode
        const allSizeModes = [jimu_core__WEBPACK_IMPORTED_MODULE_0__.BrowserSizeMode.Large, jimu_core__WEBPACK_IMPORTED_MODULE_0__.BrowserSizeMode.Medium, jimu_core__WEBPACK_IMPORTED_MODULE_0__.BrowserSizeMode.Small];
        allSizeModes.forEach((sizeMode) => {
            if (sizeMode !== currentSizeMode) {
                newContentService.removeSizeModeParent(sizeMode);
            }
        });
        this.appConfig = newContentService.getConfig();
        return newItemId;
    }
    /**
     * move a layout item to another layout
     * @param fromLayoutInfo
     * @param toLayoutInfo
     */
    moveLayoutItem(fromLayoutInfo, toLayoutId, fromSizeMode, toSizeMode) {
        const service = _app_config_service__WEBPACK_IMPORTED_MODULE_10__.LayoutServiceProvider.getService(this.appConfig, toLayoutId);
        const result = service.moveLayoutItem(this.appConfig, fromLayoutInfo, toLayoutId, fromSizeMode, toSizeMode);
        this.appConfig = result[0];
        return result[1];
    }
    setLayoutItemToPending(layoutInfo, value) {
        const layoutItem = jimu_layouts_layout_runtime__WEBPACK_IMPORTED_MODULE_1__.searchUtils.findLayoutItem(this.appConfig, layoutInfo);
        if (!layoutItem) {
            return this;
        }
        if (value) {
            const service = _app_config_service__WEBPACK_IMPORTED_MODULE_10__.LayoutServiceProvider.getService(this.appConfig, layoutInfo.layoutId);
            this.appConfig = service.pendItem(this.appConfig, layoutInfo);
        }
        else {
            this.appConfig = this.appConfig.setIn(['layouts', layoutInfo.layoutId, 'content', layoutInfo.layoutItemId, 'isPending'], value);
        }
        return this;
    }
    /**
     *
     * @param layoutInfo
     * @param removeContent false, remove layout item only. true, remove the widget/section in the layout item
     */
    removeLayoutItem(layoutInfo, removeContent, force) {
        const service = _app_config_service__WEBPACK_IMPORTED_MODULE_10__.LayoutServiceProvider.getService(this.appConfig, layoutInfo.layoutId);
        this.appConfig = service.removeItem(this.appConfig, layoutInfo, jimu_layouts_layout_runtime__WEBPACK_IMPORTED_MODULE_1__.utils.getCurrentSizeMode(), removeContent, force);
        return this;
    }
    removeLayout(layoutId) {
        return this.removeSizeModeLayout(layoutId, jimu_layouts_layout_runtime__WEBPACK_IMPORTED_MODULE_1__.utils.getCurrentSizeMode());
    }
    clearLayoutContent(layoutId) {
        var _a;
        const layoutJson = this.appConfig.layouts[layoutId];
        if (!layoutJson) {
            return this;
        }
        Object.keys((_a = layoutJson.content) !== null && _a !== void 0 ? _a : {}).forEach(itemId => {
            this.removeLayoutItem({ layoutId, layoutItemId: itemId }, true, false);
        });
        return this;
    }
    /**
     * Duplicate layout and return new layout json.
     * @param layoutId
     * @param duplicateContent
     */
    duplicateLayout(layoutId, duplicateContent) {
        const layoutJson = this.appConfig.layouts[layoutId];
        if (!layoutJson) {
            return null;
        }
        const service = _app_config_service__WEBPACK_IMPORTED_MODULE_10__.LayoutServiceProvider.getService(this.appConfig, layoutId);
        const sizeMode = jimu_layouts_layout_runtime__WEBPACK_IMPORTED_MODULE_1__.utils.getCurrentSizeMode();
        const result = service.duplicateLayout(this.appConfig, layoutId, sizeMode, sizeMode, null, duplicateContent);
        this.appConfig = result[0];
        const newLayoutId = result[1];
        return this.appConfig.layouts[newLayoutId];
    }
    editLayoutProperty(layoutId, prop, val) {
        let layoutJson = this.appConfig.layouts[layoutId];
        if (!layoutJson) {
            return this;
        }
        layoutJson = this.editJsonProperty(layoutJson, prop, val);
        this.appConfig = this.appConfig.setIn(['layouts', layoutId], layoutJson);
        return this;
    }
    editLayoutItemProperty(layoutInfo, prop, val) {
        const { layoutId, layoutItemId } = layoutInfo;
        let layoutItem = jimu_layouts_layout_runtime__WEBPACK_IMPORTED_MODULE_1__.searchUtils.findLayoutItem(this.appConfig, layoutInfo);
        if (!layoutItem) {
            return this;
        }
        layoutItem = this.editJsonProperty(layoutItem, prop, val);
        this.appConfig = this.appConfig.setIn(['layouts', layoutId, 'content', layoutItemId], layoutItem);
        return this;
    }
    editLabelOfTocNode(node, label) {
        switch (node.type) {
            case 'view':
                return this.editViewProperty(node.id, 'label', label);
            case 'screen':
                return this.editScreenProperty(node.id, 'label', label);
            case 'widget':
                return this.editWidgetProperty(node.id, 'label', label);
            case 'section':
                return this.editSectionProperty(node.id, 'label', label);
            case 'screenGroup':
                return this.editScreenGroupProperty(node.id, 'label', label);
            case 'layoutItem':
                return this.editLayoutItemProperty({ layoutId: node.layoutId, layoutItemId: node.layoutItemId }, 'label', label);
            default:
                return this;
        }
    }
    editLayoutItemSize(layoutInfo, width, height) {
        var _a;
        if (width === 0 || height === 0) {
            return this;
        }
        const { layoutId, layoutItemId } = layoutInfo;
        const layout = this.appConfig.layouts[layoutId];
        const layoutItem = (_a = layout === null || layout === void 0 ? void 0 : layout.content) === null || _a === void 0 ? void 0 : _a[layoutItemId];
        if (!layout || !layoutItem) {
            return this;
        }
        let setting = layoutItem.setting || (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.Immutable)({});
        if (layout.type === jimu_core__WEBPACK_IMPORTED_MODULE_0__.LayoutType.FixedLayout) {
            const bbox = layoutItem.bbox.set('width', `${width}px`).set('height', `${height}px`);
            setting = setting.setIn(['autoProps', 'width'], false).setIn(['autoProps', 'height'], false);
            return this
                .editLayoutItemProperty(layoutInfo, 'bbox', bbox)
                .editLayoutItemProperty(layoutInfo, 'setting', setting);
        }
        else {
            // keep aspect ratio
            setting = setting
                .setIn(['autoProps', 'width'], false)
                .setIn(['autoProps', 'height'], false)
                .set('heightMode', 'ratio')
                .set('aspectRatio', Number((height / width).toFixed(2)));
            return this.editLayoutItemProperty(layoutInfo, 'setting', setting);
        }
    }
    /**
     * This operation only works in fixed layout.
     */
    exchangeWidthAndHeight() {
        var _a, _b, _c, _d, _e;
        // get the selected layout item
        let layoutInfo;
        const state = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().getState();
        if (window.jimuConfig.isBuilder) {
            layoutInfo = (_b = (_a = state === null || state === void 0 ? void 0 : state.appStateInBuilder) === null || _a === void 0 ? void 0 : _a.appRuntimeInfo) === null || _b === void 0 ? void 0 : _b.selection;
        }
        else {
            layoutInfo = (_c = state === null || state === void 0 ? void 0 : state.appRuntimeInfo) === null || _c === void 0 ? void 0 : _c.selection;
        }
        if (!layoutInfo) {
            return this;
        }
        const { layoutId } = layoutInfo;
        const layout = this.appConfig.layouts[layoutId];
        if ((layout === null || layout === void 0 ? void 0 : layout.type) === jimu_core__WEBPACK_IMPORTED_MODULE_0__.LayoutType.FixedLayout) {
            const layoutItem = jimu_layouts_layout_runtime__WEBPACK_IMPORTED_MODULE_1__.searchUtils.findLayoutItem(this.appConfig, layoutInfo);
            if (layoutItem) {
                // exchange width and height
                let bbox = layoutItem.bbox;
                let settingChanged = false;
                let setting = (_d = layoutItem.setting) !== null && _d !== void 0 ? _d : (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.Immutable)({});
                const autoProps = (_e = setting.autoProps) !== null && _e !== void 0 ? _e : { right: true, bottom: true };
                bbox = bbox.set('width', bbox.height).set('height', bbox.width);
                ['left', 'right', 'top', 'bottom'].forEach(prop => {
                    if (autoProps[prop]) {
                        bbox = bbox.without(prop);
                    }
                });
                this.editLayoutItemProperty(layoutInfo, 'bbox', bbox);
                // exchange autoProps of width and height
                if (autoProps.width != null || autoProps.height != null) {
                    setting = setting.setIn(['autoProps', 'width'], autoProps.height)
                        .setIn(['autoProps', 'height'], autoProps.width);
                    settingChanged = true;
                }
                // set keep aspect ratio to false
                if (setting.heightMode === 'ratio') {
                    setting = setting.set('heightMode', 'fixed');
                    settingChanged = true;
                }
                if (settingChanged) {
                    this.editLayoutItemProperty(layoutInfo, 'setting', setting);
                }
            }
        }
        return this;
    }
    adjustOrderOfItem(layoutInfo, insertIndex) {
        const { layoutId, layoutItemId } = layoutInfo;
        const layout = this.appConfig.layouts[layoutId];
        let order = [].concat(layout.order || []);
        if (order.includes(layoutItemId)) {
            order = order.filter(item => item !== layoutItemId);
        }
        if (insertIndex != null && insertIndex >= 0 && insertIndex <= order.length) {
            order.splice(insertIndex, 0, layoutItemId);
        }
        else {
            order.push(layoutItemId);
        }
        this.appConfig = this.appConfig.setIn(['layouts', layoutId, 'order'], order);
        return this;
    }
    createLayout(type) {
        const service = _app_config_service__WEBPACK_IMPORTED_MODULE_10__.LayoutServiceProvider.getInstance().getServiceByType(type);
        const result = service.createBlankLayout(this.appConfig, type);
        this.appConfig = result[0];
        return result[1];
    }
    // #endregion
    // #region Template APIs
    createPageFromTemplate(templateJson) {
        return __awaiter(this, void 0, void 0, function* () {
            const context = {};
            const result = yield _app_config_service__WEBPACK_IMPORTED_MODULE_10__.templateService.createPageFromTemplate(this.appConfig, templateJson, context);
            this.appConfig = result[0];
            const pageId = result[1];
            this.appConfig = _app_config_service__WEBPACK_IMPORTED_MODULE_10__.widgetService.afterBatchCopied(this.appConfig, templateJson.config, context);
            return pageId;
        });
    }
    createDialogFromTemplate(templateJson) {
        return __awaiter(this, void 0, void 0, function* () {
            const context = {};
            const result = yield _app_config_service__WEBPACK_IMPORTED_MODULE_10__.templateService.createDialogFromTemplate(this.appConfig, templateJson, context);
            this.appConfig = result[0];
            const dialogId = result[1];
            this.appConfig = _app_config_service__WEBPACK_IMPORTED_MODULE_10__.widgetService.afterBatchCopied(this.appConfig, templateJson.config, context);
            return dialogId;
        });
    }
    applyHeaderTemplate(templateJson) {
        return __awaiter(this, void 0, void 0, function* () {
            const context = {};
            this.appConfig = yield _app_config_service__WEBPACK_IMPORTED_MODULE_10__.templateService.applyTemplateToHeader(this.appConfig, templateJson, jimu_layouts_layout_runtime__WEBPACK_IMPORTED_MODULE_1__.utils.getCurrentSizeMode(), context);
            this.appConfig = _app_config_service__WEBPACK_IMPORTED_MODULE_10__.widgetService.afterBatchCopied(this.appConfig, templateJson.config, context);
        });
    }
    applyFooterTemplate(templateJson) {
        return __awaiter(this, void 0, void 0, function* () {
            const context = {};
            this.appConfig = yield _app_config_service__WEBPACK_IMPORTED_MODULE_10__.templateService.applyTemplateToFooter(this.appConfig, templateJson, jimu_layouts_layout_runtime__WEBPACK_IMPORTED_MODULE_1__.utils.getCurrentSizeMode(), context);
            this.appConfig = _app_config_service__WEBPACK_IMPORTED_MODULE_10__.widgetService.afterBatchCopied(this.appConfig, templateJson.config, context);
        });
    }
    applyPageBodyTemplate(pageId, templateJson) {
        return __awaiter(this, void 0, void 0, function* () {
            const context = {};
            this.appConfig = yield _app_config_service__WEBPACK_IMPORTED_MODULE_10__.templateService.applyTemplateToBody(this.appConfig, pageId, templateJson, jimu_layouts_layout_runtime__WEBPACK_IMPORTED_MODULE_1__.utils.getCurrentSizeMode(), context);
            this.appConfig = _app_config_service__WEBPACK_IMPORTED_MODULE_10__.widgetService.afterBatchCopied(this.appConfig, templateJson.config, context);
        });
    }
    applyDialogTemplate(dialogId, templateJson) {
        return __awaiter(this, void 0, void 0, function* () {
            const context = {};
            this.appConfig = yield _app_config_service__WEBPACK_IMPORTED_MODULE_10__.templateService.applyTemplateToDialog(this.appConfig, dialogId, templateJson, jimu_layouts_layout_runtime__WEBPACK_IMPORTED_MODULE_1__.utils.getCurrentSizeMode(), context);
            this.appConfig = _app_config_service__WEBPACK_IMPORTED_MODULE_10__.widgetService.afterBatchCopied(this.appConfig, templateJson.config, context);
        });
    }
    applyGridTemplate(widgetId, templateJson) {
        return __awaiter(this, void 0, void 0, function* () {
            const context = {};
            this.appConfig = yield _app_config_service__WEBPACK_IMPORTED_MODULE_10__.templateService.applyGridTemplate(this.appConfig, widgetId, templateJson, jimu_layouts_layout_runtime__WEBPACK_IMPORTED_MODULE_1__.utils.getCurrentSizeMode(), context);
            this.appConfig = _app_config_service__WEBPACK_IMPORTED_MODULE_10__.widgetService.afterBatchCopied(this.appConfig, templateJson.config, context);
        });
    }
    createScreenFromTemplate(screenId, templateJson) {
        return __awaiter(this, void 0, void 0, function* () {
            const context = {};
            const result = yield _app_config_service__WEBPACK_IMPORTED_MODULE_10__.screenGroupService.createScreenFromTemplate(this.appConfig, templateJson, screenId, [jimu_layouts_layout_runtime__WEBPACK_IMPORTED_MODULE_1__.utils.getCurrentSizeMode()], context);
            this.appConfig = result[0];
            this.appConfig = _app_config_service__WEBPACK_IMPORTED_MODULE_10__.widgetService.afterBatchCopied(this.appConfig, templateJson.config, context);
            // TODO
            // if screens in this screenGroup has multiple size mode, we should sync all size mode of the new screen with others
            return result[1];
        });
    }
    // #endregion
    /**
     * Copy the parent use datasource to children widgets
     * @param parentWidgetId
     */
    copyUseDataSourceToAllChildWidgets(oldParentWidgetJson, newParentWidgetJson) {
        const allChildrenWidgets = jimu_layouts_layout_runtime__WEBPACK_IMPORTED_MODULE_1__.searchUtils.getChildrenContents(this.appConfig, newParentWidgetJson.id, jimu_core__WEBPACK_IMPORTED_MODULE_0__.LayoutItemType.Widget, true);
        // TODO parent widget support one ds only for now!
        const newUseDs = newParentWidgetJson.useDataSources && newParentWidgetJson.useDataSources.map(useDs => {
            return useDs.set('fields', []);
        })[0];
        const oldUseDs = oldParentWidgetJson.useDataSources && oldParentWidgetJson.useDataSources.map(useDs => {
            return useDs.set('fields', []);
        })[0];
        if (newUseDs && oldUseDs && newUseDs.dataSourceId === oldUseDs.dataSourceId) {
            return this;
        }
        allChildrenWidgets.forEach(widgetId => {
            let widgetJson = this.appConfig.widgets[widgetId];
            // remove old
            if (widgetJson.useDataSources && oldUseDs && widgetJson.useDataSources.find(useDs => useDs.dataSourceId === oldUseDs.dataSourceId)) {
                widgetJson = widgetJson.set('useDataSources', widgetJson.useDataSources.filter(useDs => useDs.dataSourceId !== oldUseDs.dataSourceId));
            }
            if (newUseDs) {
                widgetJson = widgetJson.set('useDataSources', widgetJson.useDataSources ? widgetJson.useDataSources.concat(newUseDs) : [newUseDs])
                    .set('useDataSourcesEnabled', true);
            }
            this.appConfig = this.appConfig.setIn(['widgets', widgetId], widgetJson);
        });
        return this;
    }
    // #endregion
    // #region Datasource APIs
    addDataSource(dataSourceJson) {
        if (this.appConfig.dataSources && this.appConfig.dataSources[dataSourceJson.id]) {
            return this;
        }
        this.appConfig = this.appConfig.setIn(['dataSources', dataSourceJson.id], dataSourceJson);
        return this;
    }
    addDataSources(dataSourceJsons) {
        dataSourceJsons.forEach(dataSourceJson => {
            if (!this.appConfig.dataSources || !this.appConfig.dataSources[dataSourceJson.id]) {
                this.appConfig = this.appConfig.setIn(['dataSources', dataSourceJson.id], dataSourceJson);
            }
        });
        return this;
    }
    addUtility(utility) {
        var _a;
        let utilities = (_a = this.appConfig.utilities) !== null && _a !== void 0 ? _a : (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.Immutable)({});
        utilities = utilities.set(utility.id, utility);
        this.appConfig = this.appConfig.set('utilities', utilities);
        return this;
    }
    removeUtility(utilityId) {
        var _a;
        let utilities = (_a = this.appConfig.utilities) !== null && _a !== void 0 ? _a : (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.Immutable)({});
        utilities = utilities.without(utilityId);
        this.appConfig = this.appConfig.set('utilities', utilities);
        return this;
    }
    updateUtilities(utilities) {
        this.appConfig = this.appConfig.set('utilities', utilities);
        return this;
    }
    removeUseMapWidgetId(mapWidgetId) {
        Object.keys(this.appConfig.widgets).forEach((widgetId) => {
            var _a;
            const widgetJson = this.appConfig.widgets[widgetId];
            if ((_a = widgetJson.useMapWidgetIds) === null || _a === void 0 ? void 0 : _a.includes(mapWidgetId)) {
                const useMapWidgetIds = widgetJson.useMapWidgetIds.filter((id) => id !== mapWidgetId);
                this.appConfig = this.appConfig.setIn(['widgets', widgetId, 'useMapWidgetIds'], useMapWidgetIds);
            }
        });
        return this.appConfig;
    }
    removeDataSource(dataSourceId) {
        if (!this.appConfig.dataSources || !this.appConfig.dataSources[dataSourceId]) {
            return this;
        }
        this.appConfig = this.appConfig.set('dataSources', this.appConfig.dataSources.without(dataSourceId));
        // update widget use data source
        this.appConfig.widgets && Object.entries(this.appConfig.widgets).forEach(([wId, wJson]) => {
            if (wJson.useDataSources && wJson.useDataSources.find(useDs => this.isUseDataSourceShouldBeRemoved(useDs, dataSourceId))) {
                this.appConfig = this.appConfig.setIn(['widgets', wId, 'useDataSources'], wJson.useDataSources.filter(useDs => !this.isUseDataSourceShouldBeRemoved(useDs, dataSourceId)));
            }
        });
        // update widget output data source
        this.appConfig.widgets && Object.entries(this.appConfig.widgets).forEach(([wId, wJson]) => {
            if (wJson.outputDataSources && wJson.outputDataSources.find(outDsId => outDsId === dataSourceId)) {
                this.appConfig = this.appConfig.setIn(['widgets', wId, 'outputDataSources'], wJson.outputDataSources.filter(outDsId => outDsId !== dataSourceId));
            }
        });
        // update message use data source
        this.appConfig.messageConfigs && Object.keys(this.appConfig.messageConfigs).forEach(mcId => {
            var _a;
            const mJson = this.appConfig.messageConfigs[mcId];
            const actions = (_a = mJson.actions) === null || _a === void 0 ? void 0 : _a.asMutable({ deep: true });
            actions === null || actions === void 0 ? void 0 : actions.forEach((action, index) => {
                var _a;
                if ((_a = action === null || action === void 0 ? void 0 : action.useDataSources) === null || _a === void 0 ? void 0 : _a.find(useDs => this.isUseDataSourceShouldBeRemoved(useDs, dataSourceId))) {
                    actions[index].useDataSources = action.useDataSources.filter(useDs => !this.isUseDataSourceShouldBeRemoved(useDs, dataSourceId));
                    this.appConfig = this.appConfig.setIn(['messageConfigs', mcId, 'actions'], actions);
                }
            });
        });
        // remove output data source
        Object.entries(this.appConfig.dataSources).forEach(([dsId, dsJson]) => {
            if (dsJson.originDataSources && !!dsJson.originDataSources.find(useDs => this.isUseDataSourceShouldBeRemoved(useDs, dataSourceId))) {
                this.removeDataSource(dsId);
            }
        });
        return this;
    }
    isUseDataSourceShouldBeRemoved(useDs, realToBeRemovedDsId) {
        /**
         * Remove data source which is:
         *  1. the data source to be removed, or,
         *  2. derived from the data source to be removed (data views and local data sources), or,
         *  3. descendant data source of the data source to be removed (e.g. child data source and grandchild data source), or,
         *  4. derived from the descendant data source of the data source to be removed (e.g. data views of child data source).
         */
        return !useDs || (useDs.dataSourceId === realToBeRemovedDsId || useDs.mainDataSourceId === realToBeRemovedDsId || useDs.rootDataSourceId === realToBeRemovedDsId);
    }
    editDataSource(dataSourceJson) {
        this.appConfig = this.appConfig.setIn(['dataSources', dataSourceJson.id], dataSourceJson);
        return this;
    }
    /**
     * Duplicate the datasourcen and return the new datasource. The new datasource has been added to app config
     * @param dataSourceId
     */
    duplicateDataSource(dataSourceId) {
        if (!this.appConfig.dataSources || !this.appConfig.dataSources[dataSourceId]) {
            return null;
        }
        const dsJson = this.appConfig.dataSources[dataSourceId];
        const newDsJson = dsJson.set('id', _utils_app_config_utils__WEBPACK_IMPORTED_MODULE_2__.getUniqueId(this.appConfig, 'dataSource'))
            .set('label', this.getDuplicateLabel('dataSource', dsJson.label));
        this.addDataSource(newDsJson);
        return newDsJson;
    }
    // #endregion
    // #region App proxy APIs
    addAppProxy(proxyJson) {
        if (this.appConfig.appProxies && this.appConfig.appProxies[proxyJson.id]) {
            return this;
        }
        this.appConfig = this.appConfig.setIn(['appProxies', proxyJson.id], proxyJson);
        return this;
    }
    editAppProxy(proxyJson) {
        this.appConfig = this.appConfig.setIn(['appProxies', proxyJson.id], proxyJson);
        return this;
    }
    removeAppProxy(appProxyId) {
        if (!this.appConfig.appProxies || !this.appConfig.appProxies[appProxyId]) {
            return this;
        }
        this.appConfig = this.appConfig.set('appProxies', this.appConfig.appProxies.without(appProxyId));
        return this;
    }
    // #endregion
    // #region Message action APIs
    addMessage(messageJson) {
        this.appConfig = this.appConfig.setIn(['messageConfigs', messageJson.id], messageJson);
        return this;
    }
    editMessage(messageJson) {
        this.appConfig = this.appConfig.setIn(['messageConfigs', messageJson.id], messageJson);
        return this;
    }
    removeMessage(messageJson) {
        if (!this.appConfig.messageConfigs || !this.appConfig.messageConfigs[messageJson.id]) {
            return this;
        }
        this.appConfig = this.appConfig.set('messageConfigs', this.appConfig.messageConfigs.without(messageJson.id));
        return this;
    }
    // #endregion
    // #region Theme APIs
    editTheme(themeName) {
        this.appConfig = this.appConfig.set('theme', themeName);
        return this;
    }
    editCustomTheme(customTheme) {
        this.appConfig = this.appConfig.set('customTheme', customTheme);
        return this;
    }
    editCustomThemeOption(themeOption) {
        this.appConfig = this.appConfig.set('customThemeOptions', themeOption);
        return this;
    }
    // #endregion
    // #region Header APIs, Footer APIs
    initHeaderLayout() {
        const layoutId = this.createLayout(jimu_core__WEBPACK_IMPORTED_MODULE_0__.LayoutType.FixedLayout);
        this.editLayoutProperty(layoutId, 'setting.lockDescendants', true);
        this.appConfig = this.appConfig
            .setIn(['layouts', layoutId, 'parent'], { id: '', type: jimu_core__WEBPACK_IMPORTED_MODULE_0__.LayoutParentType.Header })
            .setIn(['header', 'layout', this.appConfig.mainSizeMode], layoutId);
        return this;
    }
    editHeaderProperty(prop, val) {
        let header = this.appConfig.header;
        if (!header) {
            return this;
        }
        header = this.editJsonProperty(header, prop, val);
        this.appConfig = this.appConfig.set('header', header);
        return this;
    }
    initFooterLayout() {
        const layoutId = this.createLayout(jimu_core__WEBPACK_IMPORTED_MODULE_0__.LayoutType.FixedLayout);
        this.editLayoutProperty(layoutId, 'setting.lockDescendants', true);
        this.appConfig = this.appConfig
            .setIn(['layouts', layoutId, 'parent'], { id: '', type: jimu_core__WEBPACK_IMPORTED_MODULE_0__.LayoutParentType.Footer })
            .setIn(['footer', 'layout', this.appConfig.mainSizeMode], layoutId);
        return this;
    }
    editFooterProperty(prop, val) {
        let footer = this.appConfig.footer;
        if (!footer) {
            return this;
        }
        footer = this.editJsonProperty(footer, prop, val);
        this.appConfig = this.appConfig.set('footer', footer);
        return this;
    }
    // #endregion
    // #region Other APIs
    setViewportSize(browserSizeMode, size) {
        this.appConfig = this.appConfig.setIn(['forBuilderAttributes', 'viewPortSize', browserSizeMode], size);
        return this;
    }
    setLockLayout(lockLayout) {
        this.appConfig = this.appConfig.setIn(['forBuilderAttributes', 'lockLayout'], lockLayout);
        return this;
    }
    editAttributes(attributesJson) {
        this.appConfig = this.appConfig.setIn(['attributes'], attributesJson);
        return this;
    }
    // #endregion
    // #region UrlParameters
    updateUrlParamsConfig(urlParams) {
        if (!this.appConfig.urlParams) {
            this.appConfig = this.appConfig.set('urlParams', ({})); // default value is empty object
        }
        const urlParamsConfigs = this.appConfig.urlParams.merge((urlParams));
        this.appConfig = this.appConfig.set('urlParams', urlParamsConfigs);
        return this;
    }
    // #endregion UrlParameters
    // #region Private methods
    getDuplicateLabel(type, label) {
        const [prefix] = _utils_app_config_utils__WEBPACK_IMPORTED_MODULE_2__.parseUniqueLabel(label);
        let newLabel = _utils_app_config_utils__WEBPACK_IMPORTED_MODULE_2__.getUniqueLabel(this.appConfig, type, prefix);
        if (newLabel === prefix) {
            newLabel = `${prefix} 1`;
        }
        return newLabel;
    }
    removePageFromPageStructure(pageId) {
        if (!this.appConfig.pageStructure) {
            return this;
        }
        const ps = this.appConfig.pageStructure.find(ps => !!ps[pageId]);
        if (ps) {
            this.appConfig = this.appConfig.set('pageStructure', this.appConfig.pageStructure.flatMap(item => item[pageId] ? [] : [item]));
        }
        else {
            this.appConfig.pageStructure.forEach((ps, i) => {
                const pId = Object.keys(ps).find(pId => ps[pId].includes(pageId));
                if (pId) {
                    this.appConfig = this.appConfig.setIn(['pageStructure', i + '', pId], ps[pId].flatMap(subPid => subPid === pageId ? [] : [subPid]));
                    return true;
                }
            });
        }
        return this;
    }
    movePageIntoPageForPageStructure(subPageId, parentPageId) {
        if (!this.appConfig.pageStructure) {
            return this;
        }
        // eslint-disable-next-line
        this.appConfig.pageStructure.some((ps, i) => {
            const pId = Object.keys(ps).find(pId => pId === parentPageId);
            if (pId) {
                this.appConfig = this.appConfig.setIn(['pageStructure', i + '', pId], this.appConfig.pageStructure[i][pId].concat([subPageId]));
                return true;
            }
        });
        return this;
    }
    editJsonProperty(json, prop, value) {
        if (!json) {
            return json;
        }
        const props = prop.split('.').filter(item => item !== '');
        if (props.length > 0) {
            if (json.getIn(props) === value) {
                return json;
            }
            if (value == null) {
                // remove the property
                if (props.length === 1) {
                    return json.without(props[0]);
                }
                const lastProp = props.pop();
                const remainValue = json.getIn(props);
                return json.setIn(props, remainValue.without(lastProp));
            }
            return json.setIn(props, value);
        }
        return json;
    }
}


/***/ }),

/***/ "./jimu-for-builder/lib/app-config-service/base-content-service.ts":
/*!*************************************************************************!*\
  !*** ./jimu-for-builder/lib/app-config-service/base-content-service.ts ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BaseContentService: () => (/* binding */ BaseContentService)
/* harmony export */ });
class BaseContentService {
    addParentToList(appConfig, existingParents, parent) {
        if (!existingParents || existingParents.length === 0) {
            return [parent];
        }
        const exists = existingParents.some((info) => info.layoutId === parent.layoutId && info.layoutItemId === parent.layoutItemId);
        if (!exists) {
            // if a content has multiple parents, their layout must have a same parent
            const existingParentLayoutId = existingParents[0].layoutId;
            const existingParentLayout = appConfig.layouts[existingParentLayoutId];
            const addingParentLayout = appConfig.layouts[parent.layoutId];
            if (existingParentLayoutId === parent.layoutId || addingParentLayout.parent.id !== existingParentLayout.parent.id || addingParentLayout.parent.type !== existingParentLayout.parent.type) {
                // replace the existing parents with the new parent
                return [parent];
            }
            const list = [].concat(existingParents, parent);
            return list;
        }
        return existingParents;
    }
    removeParentFromList(existingParents, parent) {
        if (!existingParents || existingParents.length === 0) {
            return [];
        }
        return existingParents.filter((item) => item.layoutId !== parent.layoutId || item.layoutItemId !== parent.layoutItemId);
    }
}


/***/ }),

/***/ "./jimu-for-builder/lib/app-config-service/base-layout-service.ts":
/*!************************************************************************!*\
  !*** ./jimu-for-builder/lib/app-config-service/base-layout-service.ts ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BaseLayoutService: () => (/* binding */ BaseLayoutService)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");
/* harmony import */ var _empty_content_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./empty-content-service */ "./jimu-for-builder/lib/app-config-service/empty-content-service.ts");
/* harmony import */ var _content_service_wrapper__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./content-service-wrapper */ "./jimu-for-builder/lib/app-config-service/content-service-wrapper.ts");
/* harmony import */ var _utils_app_config_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/app-config-utils */ "./jimu-for-builder/lib/utils/app-config-utils.ts");
/* harmony import */ var jimu_layouts_layout_runtime__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! jimu-layouts/layout-runtime */ "jimu-layouts/layout-runtime");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./util */ "./jimu-for-builder/lib/app-config-service/util.ts");
/* harmony import */ var _layout_service_provider__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./layout-service-provider */ "./jimu-for-builder/lib/app-config-service/layout-service-provider.ts");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};







class BaseLayoutService {
    /**
     * Create a blank layout.
     * @param appConfig
     * @param type
     * @returns
     */
    createBlankLayout(appConfig, type) {
        const layoutId = _utils_app_config_utils__WEBPACK_IMPORTED_MODULE_3__.getUniqueId(appConfig, 'layout');
        const layoutJson = {
            id: layoutId,
            content: {},
            type
        };
        console.debug('create a blank layout with type', type);
        const updatedConfig = appConfig.setIn(['layouts', layoutId], layoutJson);
        return [updatedConfig, layoutId];
    }
    /**
     * Duplicate a layout.
     * If duplicateContent is true, the content of the layout will be duplicated.
     * If duplicateContent is false, a new parent will be added to the content.
     *   - If the content is a layout widget, a new layout widget will be created under the toSizeMode.
     *   - If the content has embedded layout, the embedded layout will be duplicated.
     * @param appConfig
     * @param layoutId
     * @param fromSizeMode
     * @param toSizeMode
     * @param context
     * @param duplicateContent
     * @returns
     */
    duplicateLayout(appConfig, layoutId, fromSizeMode, toSizeMode, context, duplicateContent) {
        var _a;
        const layoutJson = appConfig.layouts[layoutId];
        if (!layoutJson) {
            return [appConfig, null];
        }
        const newLayoutJson = layoutJson.set('id', _utils_app_config_utils__WEBPACK_IMPORTED_MODULE_3__.getUniqueId(appConfig, 'layout'));
        let updatedAppConfig = appConfig.setIn(['layouts', newLayoutJson.id], newLayoutJson);
        console.debug('duplicate layout', layoutId, ', from size mode', fromSizeMode, ', to size mode', toSizeMode);
        // duplicate content
        Object.keys((_a = newLayoutJson.content) !== null && _a !== void 0 ? _a : {}).forEach(itemId => {
            var _a;
            const layoutItem = newLayoutJson.content[itemId];
            if (layoutItem.isPending) {
                // no need to duplicate pending item
                const layout = updatedAppConfig.layouts[newLayoutJson.id];
                updatedAppConfig = updatedAppConfig.setIn(['layouts', layout.id, 'content'], layout.content.without(itemId));
                if ((_a = layout.order) === null || _a === void 0 ? void 0 : _a.includes(itemId)) {
                    const order = layout.order.filter(id => id !== itemId);
                    updatedAppConfig = updatedAppConfig.setIn(['layouts', layout.id, 'order'], order);
                }
            }
            else {
                if (duplicateContent) {
                    updatedAppConfig = this.duplicateAndReplaceContent(updatedAppConfig, { layoutId, layoutItemId: itemId }, { layoutId: newLayoutJson.id, layoutItemId: itemId }, fromSizeMode, toSizeMode, context);
                }
                else {
                    const service = new _content_service_wrapper__WEBPACK_IMPORTED_MODULE_2__.ContentServiceWrapper(updatedAppConfig, layoutItem);
                    // duplicate embed layout content if any
                    const result = service.duplicateEmbedLayout(fromSizeMode, toSizeMode);
                    updatedAppConfig = result[0];
                    if (result[1]) { // new layout widget id
                        const newLayoutItem = layoutItem.set('widgetId', result[1]);
                        updatedAppConfig = updatedAppConfig.setIn(['layouts', newLayoutJson.id, 'content', itemId], newLayoutItem);
                        const service2 = new _content_service_wrapper__WEBPACK_IMPORTED_MODULE_2__.ContentServiceWrapper(updatedAppConfig, newLayoutItem);
                        // update parentInfo, each content adds a parent layoutInfo
                        updatedAppConfig = service2.addParent({ layoutId: newLayoutJson.id, layoutItemId: itemId }, toSizeMode);
                    }
                    else {
                        // update parentInfo, each content adds a parent layoutInfo
                        updatedAppConfig = service.addParent({ layoutId: newLayoutJson.id, layoutItemId: itemId }, toSizeMode);
                    }
                }
            }
        });
        if (fromSizeMode !== toSizeMode) {
            // TODO transform the layout?
            const layoutJson = this.transformLayout(updatedAppConfig, updatedAppConfig.layouts[newLayoutJson.id], fromSizeMode, toSizeMode);
            updatedAppConfig = updatedAppConfig.setIn(['layouts', newLayoutJson.id], layoutJson);
        }
        return [updatedAppConfig, newLayoutJson.id];
    }
    duplicateSizeModeLayouts(appConfig, layouts, parentType, parentId, context) {
        let updatedAppConfig = appConfig;
        const outputLayouts = {};
        Object.keys(layouts !== null && layouts !== void 0 ? layouts : {}).forEach((mode) => {
            const layoutId = layouts[mode];
            const result = this.duplicateLayout(updatedAppConfig, layoutId, mode, mode, context, true);
            updatedAppConfig = result[0];
            outputLayouts[mode] = result[1];
            if (result[1] != null) {
                updatedAppConfig = updatedAppConfig.setIn(['layouts', result[1], 'parent'], { type: parentType, id: parentId });
            }
        });
        return [updatedAppConfig, outputLayouts];
    }
    /**
     * Duplicate the content in origin layoutItem and replace the content in des layoutItem.
     * @param appConfig
     * @param originLayoutId
     * @param desLayoutId
     * @param originItemId
     * @param desItemId
     * @param fromSizeMode
     * @param toSizeMode
     * @param context
     * @returns
     */
    duplicateAndReplaceContent(appConfig, originLayoutInfo, desLayoutInfo, fromSizeMode, toSizeMode, context) {
        const { layoutId: originLayoutId, layoutItemId: originItemId } = originLayoutInfo;
        const { layoutId: desLayoutId, layoutItemId: desItemId } = desLayoutInfo;
        if (!appConfig.layouts || !appConfig.layouts[originLayoutId] || !appConfig.layouts[desLayoutId]) {
            return appConfig;
        }
        const oriLayoutItem = jimu_layouts_layout_runtime__WEBPACK_IMPORTED_MODULE_4__.searchUtils.findLayoutItem(appConfig, {
            layoutId: originLayoutId,
            layoutItemId: originItemId
        });
        // 1. duplicate content
        const service = new _content_service_wrapper__WEBPACK_IMPORTED_MODULE_2__.ContentServiceWrapper(appConfig, oriLayoutItem);
        const result = service.duplicate(toSizeMode, context);
        let updatedAppConfig = result[0];
        const contentId = result[1];
        // 2. set content to layout item
        updatedAppConfig = updatedAppConfig.setIn(['layouts', desLayoutId, 'content', desItemId, 'type'], oriLayoutItem.type);
        updatedAppConfig = _empty_content_service__WEBPACK_IMPORTED_MODULE_1__["default"].setContentId(updatedAppConfig, { layoutId: desLayoutId, layoutItemId: desItemId }, contentId, toSizeMode);
        // 3. update the parent info of the duplicated content
        const desLayoutItem = jimu_layouts_layout_runtime__WEBPACK_IMPORTED_MODULE_4__.searchUtils.findLayoutItem(updatedAppConfig, desLayoutInfo);
        const service2 = new _content_service_wrapper__WEBPACK_IMPORTED_MODULE_2__.ContentServiceWrapper(updatedAppConfig, desLayoutItem);
        service2.removeParent({
            layoutId: originLayoutId,
            layoutItemId: originItemId
        }, fromSizeMode);
        return service2.getConfig();
    }
    addContent(appConfig, layoutId, contentId, type, sizeMode) {
        const result = this.createBlankItem(appConfig, layoutId);
        let updatedAppConfig = result[0];
        const newItemId = result[1];
        console.debug(`add ${contentId} to ${layoutId}`);
        updatedAppConfig = updatedAppConfig
            .setIn(['layouts', layoutId, 'content', newItemId, 'type'], type);
        const layoutInfo = { layoutId, layoutItemId: newItemId };
        updatedAppConfig = _empty_content_service__WEBPACK_IMPORTED_MODULE_1__["default"].setContentId(updatedAppConfig, layoutInfo, contentId, sizeMode);
        updatedAppConfig = this.afterItemAdded(updatedAppConfig, layoutInfo, sizeMode, sizeMode);
        return [updatedAppConfig, newItemId];
    }
    removeLayout(appConfig, layoutId, sizeMode) {
        var _a;
        const layoutJson = appConfig.layouts[layoutId];
        if (!layoutJson) {
            return appConfig;
        }
        let updatedAppConfig = appConfig;
        console.debug('remove layout', layoutId, 'in size mode', sizeMode);
        Object.keys((_a = layoutJson.content) !== null && _a !== void 0 ? _a : {}).forEach(itemId => {
            updatedAppConfig = this.removeItem(updatedAppConfig, { layoutId: layoutId, layoutItemId: itemId }, sizeMode, true, false);
        });
        updatedAppConfig = this.removeLayoutIdFromParent(updatedAppConfig, layoutId, sizeMode);
        updatedAppConfig = updatedAppConfig.setIn(['layouts'], updatedAppConfig.layouts.without(layoutId));
        return updatedAppConfig;
    }
    removeSizeModeLayouts(appConfig, layouts) {
        let updatedAppConfig = appConfig;
        Object.keys(layouts).forEach((mode) => {
            const layoutId = layouts[mode];
            updatedAppConfig = this.removeLayout(updatedAppConfig, layoutId, mode);
        });
        return updatedAppConfig;
    }
    removeLayoutIdFromParent(appConfig, layoutId, sizeMode) {
        var _a, _b, _c;
        const layoutJson = appConfig.layouts[layoutId];
        if (!layoutJson) {
            return appConfig;
        }
        let updatedAppConfig = appConfig;
        // remove it from its parent
        const parentId = (_a = layoutJson.parent) === null || _a === void 0 ? void 0 : _a.id;
        switch ((_b = layoutJson.parent) === null || _b === void 0 ? void 0 : _b.type) {
            case jimu_core__WEBPACK_IMPORTED_MODULE_0__.LayoutParentType.Header:
                if (updatedAppConfig.header.layout[sizeMode] === layoutId) {
                    console.debug('remove layout', layoutId, 'from header, in size mode', sizeMode);
                    updatedAppConfig = updatedAppConfig.setIn(['header', 'layout'], updatedAppConfig.header.layout.without(sizeMode));
                }
                break;
            case jimu_core__WEBPACK_IMPORTED_MODULE_0__.LayoutParentType.Footer:
                if (updatedAppConfig.footer.layout[sizeMode] === layoutId) {
                    console.debug('remove layout', layoutId, 'from footer, in size mode', sizeMode);
                    updatedAppConfig = updatedAppConfig.setIn(['footer', 'layout'], updatedAppConfig.footer.layout.without(sizeMode));
                }
                break;
            case jimu_core__WEBPACK_IMPORTED_MODULE_0__.LayoutParentType.Dialog:
                if (updatedAppConfig.dialogs[parentId].layout[sizeMode] === layoutId) {
                    console.debug('remove layout', layoutId, 'from dialog', parentId, ', in size mode', sizeMode);
                    updatedAppConfig = updatedAppConfig.setIn(['dialogs', parentId, 'layout'], updatedAppConfig.dialogs[parentId].layout.without(sizeMode));
                }
                break;
            case jimu_core__WEBPACK_IMPORTED_MODULE_0__.LayoutParentType.Page:
                if (updatedAppConfig.pages[parentId].layout[sizeMode] === layoutId) {
                    console.debug('remove layout', layoutId, 'from page', parentId, ', in size mode', sizeMode);
                    updatedAppConfig = updatedAppConfig.setIn(['pages', parentId, 'layout'], updatedAppConfig.pages[parentId].layout.without(sizeMode));
                }
                break;
            case jimu_core__WEBPACK_IMPORTED_MODULE_0__.LayoutParentType.View:
                if (updatedAppConfig.views[parentId].layout[sizeMode] === layoutId) {
                    console.debug('remove layout', layoutId, 'from view', parentId, ', in size mode', sizeMode);
                    updatedAppConfig = updatedAppConfig.setIn(['views', parentId, 'layout'], updatedAppConfig.views[parentId].layout.without(sizeMode));
                }
                break;
            case jimu_core__WEBPACK_IMPORTED_MODULE_0__.LayoutParentType.Screen:
                if (updatedAppConfig.screens[parentId].main.layout[sizeMode] === layoutId) {
                    console.debug('remove layout', layoutId, 'from screen main', parentId, ', in size mode', sizeMode);
                    updatedAppConfig = updatedAppConfig.setIn(['screens', parentId, 'main', 'layout'], updatedAppConfig.screens[parentId].main.layout.without(sizeMode));
                }
                if ((_c = updatedAppConfig.screens[parentId].panel) === null || _c === void 0 ? void 0 : _c.layout) {
                    if (updatedAppConfig.screens[parentId].panel.layout[sizeMode] === layoutId) {
                        console.debug('remove layout', layoutId, 'from screen panel', parentId, ', in size mode', sizeMode);
                        updatedAppConfig = updatedAppConfig.setIn(['screens', parentId, 'panel', 'layout'], updatedAppConfig.screens[parentId].panel.layout.without(sizeMode));
                    }
                }
                break;
            case jimu_core__WEBPACK_IMPORTED_MODULE_0__.LayoutParentType.Widget:
                const widgetJson = updatedAppConfig.widgets[parentId];
                Object.keys(widgetJson.layouts).forEach(name => {
                    const layouts = widgetJson.layouts[name];
                    if (layouts[sizeMode] === layoutId) {
                        console.debug('remove layout', layoutId, 'from widget', parentId, ', in size mode', sizeMode);
                        updatedAppConfig = updatedAppConfig.setIn(['widgets', parentId, 'layouts', name], layouts.without(sizeMode));
                    }
                });
                break;
        }
        return updatedAppConfig;
    }
    replaceLayoutIdInParent(appConfig, parentInfo, oldLayoutId, newLayoutId, sizeMode) {
        let updatedAppConfig = appConfig;
        // update parent, only some of the type can choose template
        console.debug('replace layout', oldLayoutId, 'with new one', newLayoutId, 'in parent', parentInfo.id, sizeMode);
        switch (parentInfo.type) {
            case jimu_core__WEBPACK_IMPORTED_MODULE_0__.LayoutParentType.Header:
                if (updatedAppConfig.header.layout[sizeMode] === oldLayoutId) {
                    updatedAppConfig = updatedAppConfig.setIn(['header', 'layout', sizeMode], newLayoutId);
                }
                break;
            case jimu_core__WEBPACK_IMPORTED_MODULE_0__.LayoutParentType.Footer:
                if (updatedAppConfig.footer.layout[sizeMode] === oldLayoutId) {
                    updatedAppConfig = updatedAppConfig.setIn(['footer', 'layout', sizeMode], newLayoutId);
                }
                break;
            case jimu_core__WEBPACK_IMPORTED_MODULE_0__.LayoutParentType.Dialog:
                if (updatedAppConfig.dialogs[parentInfo.id].layout[sizeMode] === oldLayoutId) {
                    updatedAppConfig = updatedAppConfig.setIn(['dialogs', parentInfo.id, 'layout', sizeMode], newLayoutId);
                }
                break;
            case jimu_core__WEBPACK_IMPORTED_MODULE_0__.LayoutParentType.Page:
                if (updatedAppConfig.pages[parentInfo.id].layout[sizeMode] === oldLayoutId) {
                    updatedAppConfig = updatedAppConfig.setIn(['pages', parentInfo.id, 'layout', sizeMode], newLayoutId);
                }
                break;
            case jimu_core__WEBPACK_IMPORTED_MODULE_0__.LayoutParentType.Widget:
                const widgetJson = updatedAppConfig.widgets[parentInfo.id];
                if (widgetJson) {
                    Object.keys(widgetJson.layouts).some(name => {
                        const sizeModeLayouts = widgetJson.layouts[name];
                        if (sizeModeLayouts[sizeMode] === oldLayoutId) {
                            updatedAppConfig = updatedAppConfig.setIn(['widgets', parentInfo.id, 'layouts', name, sizeMode], newLayoutId);
                            return true;
                        }
                        return false;
                    });
                }
                break;
        }
        return updatedAppConfig;
    }
    transformLayout(appConfig, layoutJson, fromSizeMode, toSizeMode) {
        let extManager;
        if (window.jimuConfig.isBuilder) {
            // because widget's extensions are registered in app only, so we need to get the extension manager from app
            extManager = window._appWindow && window._appWindow._extensionManager;
        }
        else {
            extManager = jimu_core__WEBPACK_IMPORTED_MODULE_0__.ExtensionManager.getInstance();
        }
        const exts = extManager.getExtensions(jimu_core__WEBPACK_IMPORTED_MODULE_0__.extensionSpec.ExtensionPoints.LayoutTransformer);
        if (exts.length > 0) {
            const ext = exts.find((ext) => ext.layoutType === layoutJson.type);
            if (ext && ext.transformLayout) {
                layoutJson = ext.transformLayout(layoutJson, fromSizeMode, toSizeMode, appConfig);
            }
        }
        return layoutJson;
    }
    /**
     * Create a new blank layout item in the given layout. Only id is set in the new layout item.
     * @param appConfig
     * @param layoutId
     * @returns
     */
    createBlankItem(appConfig, layoutId) {
        const nextLayoutItemId = `${jimu_layouts_layout_runtime__WEBPACK_IMPORTED_MODULE_4__.utils.getMaximumId(appConfig.layouts[layoutId]) + 1}`;
        const newLayoutItem = {
            id: nextLayoutItemId
        };
        const updatedConfig = appConfig.setIn(['layouts', layoutId, 'content', nextLayoutItemId], newLayoutItem);
        return [updatedConfig, nextLayoutItemId];
    }
    duplicateItemInSameLayout(appConfig, layoutInfo, sizeMode, context) {
        const { layoutId, layoutItemId } = layoutInfo;
        if (!appConfig.layouts || !appConfig.layouts[layoutId]) {
            return [appConfig, null];
        }
        console.debug('duplicate layout item', layoutId, layoutItemId, 'in size mode', sizeMode);
        const oriLayoutItem = jimu_layouts_layout_runtime__WEBPACK_IMPORTED_MODULE_4__.searchUtils.findLayoutItem(appConfig, {
            layoutId: layoutId,
            layoutItemId: layoutItemId
        });
        const newItemId = `${jimu_layouts_layout_runtime__WEBPACK_IMPORTED_MODULE_4__.utils.getMaximumId(appConfig.layouts[layoutId]) + 1}`;
        const newItem = oriLayoutItem.set('id', newItemId);
        let updatedAppConfig = appConfig
            .setIn(['layouts', layoutId, 'content', newItem.id], newItem);
        updatedAppConfig = this.duplicateAndReplaceContent(updatedAppConfig, { layoutId, layoutItemId }, { layoutId, layoutItemId: newItem.id }, sizeMode, sizeMode, context);
        return [updatedAppConfig, newItem.id];
    }
    pendItem(appConfig, layoutInfo) {
        const layoutItem = jimu_layouts_layout_runtime__WEBPACK_IMPORTED_MODULE_4__.searchUtils.findLayoutItem(appConfig, layoutInfo);
        const { layoutId, layoutItemId } = layoutInfo;
        let updatedConfig = appConfig;
        if (layoutItem) {
            updatedConfig = appConfig.setIn(['layouts', layoutId, 'content', layoutItemId, 'isPending'], true);
        }
        return updatedConfig;
    }
    /**
     * Remove a layout item. It has multiple use cases:
     * - do not remove content. Only remove the layout item from the layout and remove if from its content parent.
     *   - when a widget will be removed, its parent layout items should be removed ahead of it.
     * - remove content.
     *   - force is false. Try to remove the content. If the content is used by other layout items, do not remove it.
     *   - force is true. Remove the content directly.
     * @param appConfig
     * @param layoutInfo
     * @param sizeMode
     * @param removeContent
     * @param force
     */
    removeItem(appConfig, layoutInfo, sizeMode, removeContent, force) {
        var _a, _b;
        const { layoutId, layoutItemId } = layoutInfo;
        const layoutItem = jimu_layouts_layout_runtime__WEBPACK_IMPORTED_MODULE_4__.searchUtils.findLayoutItem(appConfig, layoutInfo);
        if (!layoutItem) {
            return appConfig;
        }
        console.debug(`remove layout item, ${layoutId} ${layoutItemId}, removeContent=${removeContent}, force=${force}`);
        // 0. call beforeItemRemoved if any
        let updatedAppConfig = this.beforeItemRemoved(appConfig, layoutInfo);
        // 1. remove content if needed
        const service = new _content_service_wrapper__WEBPACK_IMPORTED_MODULE_2__.ContentServiceWrapper(updatedAppConfig, layoutItem);
        if (removeContent) {
            if (force) {
                service.remove();
            }
            else {
                service.tryRemove(layoutInfo, sizeMode);
            }
        }
        else {
            service.removeParent(layoutInfo, sizeMode);
        }
        updatedAppConfig = service.getConfig();
        // 2. remove layout item
        const lockLayout = (_b = (_a = appConfig.forBuilderAttributes) === null || _a === void 0 ? void 0 : _a.lockLayout) !== null && _b !== void 0 ? _b : false;
        if (lockLayout) {
            if (layoutItem.type === jimu_core__WEBPACK_IMPORTED_MODULE_0__.LayoutItemType.Widget && layoutItem.widgetId) {
                updatedAppConfig = updatedAppConfig.setIn(['layouts', layoutId, 'content', layoutItemId], layoutItem.without('widgetId'));
            }
        }
        else {
            const layoutJson = updatedAppConfig.layouts[layoutId];
            if (layoutJson) { // layout may be removed if it's a blank block in flow layout
                updatedAppConfig = updatedAppConfig.setIn(['layouts', layoutId, 'content'], layoutJson.content.without(layoutItemId));
            }
            // 3. after removed
            updatedAppConfig = this.afterItemRemoved(updatedAppConfig, layoutInfo);
        }
        return updatedAppConfig;
    }
    /**
     * Choose a template to replace the layout.
     * 1. if current size mode is main size mode, replace other size mode layout if it is not set.
     * 2. if current size mode is not main size mode, only replace current size mode layout.
     * @param appConfig
     * @param targetSizeModeLayout
     * @param templatePageJson
     * @param sourceSizeModeLayout
     * @param currentSizeMode
     * @returns
     */
    replaceSizeModeLayout(appConfig, targetSizeModeLayout, templatePageJson, sourceSizeModeLayout, currentSizeMode, parentType, parentId, context) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!sourceSizeModeLayout) {
                return [appConfig, targetSizeModeLayout];
            }
            const isMainSizeMode = currentSizeMode === appConfig.mainSizeMode;
            let updatedAppConfig = appConfig;
            let updatedSizeModeLayout = targetSizeModeLayout;
            let sizemodeKeys;
            if (isMainSizeMode) {
                sizemodeKeys = Object.keys(sourceSizeModeLayout).filter(key => key === currentSizeMode || targetSizeModeLayout[key] == null);
            }
            else {
                sizemodeKeys = [currentSizeMode];
            }
            for (let i = 0; i < sizemodeKeys.length; i += 1) {
                const sizeMode = sizemodeKeys[i];
                const layoutResult = yield this.replaceLayout(updatedAppConfig, updatedSizeModeLayout[sizeMode], templatePageJson, sourceSizeModeLayout[sizeMode], sizeMode, parentType, parentId, context);
                if (layoutResult[1]) {
                    updatedAppConfig = layoutResult[0];
                    updatedSizeModeLayout = updatedSizeModeLayout.set(sizeMode, layoutResult[1]);
                }
            }
            // replace current size mode layout using main size mode if it is not set
            if (sourceSizeModeLayout[currentSizeMode] == null) {
                // no template defined for current size mode
                const layoutResult = yield this.replaceLayout(updatedAppConfig, updatedSizeModeLayout[currentSizeMode], templatePageJson, sourceSizeModeLayout[updatedAppConfig.mainSizeMode], currentSizeMode, parentType, parentId, context);
                updatedAppConfig = layoutResult[0];
                updatedSizeModeLayout = updatedSizeModeLayout.set(currentSizeMode, layoutResult[1]);
            }
            return [updatedAppConfig, updatedSizeModeLayout];
        });
    }
    /**
     * Use the layout in sourceLayout to replace the targetLayout
     * @param appConfig
     * @param targetLayoutId
     * @param templatePageJson
     * @param sourceLayoutId
     * @param browserSizeMode
     */
    replaceLayout(appConfig, targetLayoutId, templatePageJson, sourceLayoutId, sizeMode, parentType, parentId, context) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            if (((_b = (_a = templatePageJson.config) === null || _a === void 0 ? void 0 : _a.layouts) === null || _b === void 0 ? void 0 : _b[sourceLayoutId]) == null) {
                return [appConfig, null];
            }
            console.debug(`replace ${targetLayoutId} with template ${sourceLayoutId} in ${sizeMode}`);
            let updatedAppConfig = appConfig;
            if ((_c = appConfig.layouts) === null || _c === void 0 ? void 0 : _c[targetLayoutId]) {
                const targetLayout = appConfig.layouts[targetLayoutId];
                if ((targetLayout === null || targetLayout === void 0 ? void 0 : targetLayout.content) && Object.keys(targetLayout.content).length > 0) {
                    // Do not replace non-empty layout
                    return [appConfig, null];
                }
                updatedAppConfig = updatedAppConfig.set('layouts', updatedAppConfig.layouts.without(targetLayoutId));
            }
            // target layout does not exist, create one for it
            const result = yield this.createLayoutFromTemplate(updatedAppConfig, templatePageJson, sourceLayoutId, sizeMode, parentType, parentId, context);
            updatedAppConfig = result[0];
            const newLayoutId = result[1];
            updatedAppConfig = this.replaceLayoutIdInParent(updatedAppConfig, { type: parentType, id: parentId }, targetLayoutId, newLayoutId, sizeMode);
            return [updatedAppConfig, newLayoutId];
        });
    }
    createLayoutFromTemplate(appConfig, templateJson, layoutId, sizeMode, parentType, parentId, context) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            let updatedAppConfig = appConfig;
            yield (0,_util__WEBPACK_IMPORTED_MODULE_5__.makeSureTemplateConfig)(templateJson);
            console.debug('create layout', layoutId, 'from template');
            const templateConfig = templateJson.config;
            const templateLayout = templateConfig.layouts[layoutId];
            const nextLayoutId = _utils_app_config_utils__WEBPACK_IMPORTED_MODULE_3__.getUniqueId(appConfig, 'layout');
            updatedAppConfig = updatedAppConfig.setIn(['layouts', nextLayoutId], templateLayout)
                .setIn(['layouts', nextLayoutId, 'id'], nextLayoutId)
                .setIn(['layouts', nextLayoutId, 'parent'], { type: parentType, id: parentId });
            const items = templateLayout.type === jimu_core__WEBPACK_IMPORTED_MODULE_0__.LayoutType.GridLayout
                ? Object.keys(templateLayout.content || {})
                : ((_a = templateLayout.order) !== null && _a !== void 0 ? _a : []);
            for (let i = 0; i < items.length; i++) {
                const itemId = items[i];
                const layoutItem = templateLayout.content[itemId];
                const service = new _content_service_wrapper__WEBPACK_IMPORTED_MODULE_2__.ContentServiceWrapper(updatedAppConfig, layoutItem);
                const result = yield service.createFromTemplate(templateJson, [sizeMode], context, { isBlock: templateLayout.type === jimu_core__WEBPACK_IMPORTED_MODULE_0__.LayoutType.FlowLayout });
                updatedAppConfig = result[0];
                const newContentId = result[1];
                updatedAppConfig = _empty_content_service__WEBPACK_IMPORTED_MODULE_1__["default"].setContentId(updatedAppConfig, { layoutId: nextLayoutId, layoutItemId: itemId }, newContentId, sizeMode);
            }
            return [updatedAppConfig, nextLayoutId];
        });
    }
    // provided by subclass
    getTocStructure(appConfig, layoutId) {
        return null;
    }
    // should be invoked by the layout service of the toLayoutId
    moveLayoutItem(appConfig, fromLayoutInfo, toLayoutId, fromSizeMode, toSizeMode) {
        var _a, _b, _c, _d;
        const movingLayoutItem = jimu_layouts_layout_runtime__WEBPACK_IMPORTED_MODULE_4__.searchUtils.findLayoutItem(appConfig, fromLayoutInfo);
        if (!movingLayoutItem) {
            return [appConfig, null];
        }
        let updatedAppConfig = appConfig;
        const fromLayout = appConfig.layouts[fromLayoutInfo.layoutId];
        const fromLayoutItem = jimu_layouts_layout_runtime__WEBPACK_IMPORTED_MODULE_4__.searchUtils.findLayoutItem(updatedAppConfig, fromLayoutInfo);
        // 1. pended item has been detached from the grid
        // 2. move to different size mode does not change the fromSizeMode layout. e.g., add from the pending list
        if (fromLayout.type === jimu_core__WEBPACK_IMPORTED_MODULE_0__.LayoutType.GridLayout && !fromLayoutItem.isPending && fromSizeMode === toSizeMode) {
            // grid layout is a special one, it has some non-content layout items, such as row, column, etc.
            const gridService = _layout_service_provider__WEBPACK_IMPORTED_MODULE_6__.LayoutServiceProvider.getInstance().getServiceByType(jimu_core__WEBPACK_IMPORTED_MODULE_0__.LayoutType.GridLayout);
            updatedAppConfig = gridService.beforeItemRemoved(updatedAppConfig, fromLayoutInfo);
        }
        console.debug('move layout item from', fromLayoutInfo.layoutId, fromLayoutInfo.layoutItemId, 'to', toLayoutId, toSizeMode);
        if (fromLayoutItem.isPending && fromSizeMode === toSizeMode) {
            // make sure it can be added back to its original layout
            updatedAppConfig = updatedAppConfig.setIn(['layouts', fromLayoutInfo.layoutId, 'content', fromLayoutInfo.layoutItemId], fromLayoutItem.without('isPending'));
        }
        if (fromLayoutInfo.layoutId !== toLayoutId) {
            const fromLayoutService = _layout_service_provider__WEBPACK_IMPORTED_MODULE_6__.LayoutServiceProvider.getService(updatedAppConfig, fromLayoutInfo.layoutId);
            // only remove target from its parent if it is from the same size mode
            if (fromSizeMode === toSizeMode) {
                let parentLayoutInfos = [fromLayoutInfo];
                if (fromLayoutItem.type === jimu_core__WEBPACK_IMPORTED_MODULE_0__.LayoutItemType.Widget) {
                    const widgetJson = updatedAppConfig.widgets[fromLayoutItem.widgetId];
                    if (widgetJson && ((_b = (_a = widgetJson.parent) === null || _a === void 0 ? void 0 : _a[fromSizeMode]) === null || _b === void 0 ? void 0 : _b.length) > 1) {
                        parentLayoutInfos = widgetJson.parent[fromSizeMode];
                    }
                }
                else if (fromLayoutItem.type === jimu_core__WEBPACK_IMPORTED_MODULE_0__.LayoutItemType.Section) {
                    const sectionJson = updatedAppConfig.sections[fromLayoutItem.sectionId];
                    if (((_d = (_c = sectionJson.parent) === null || _c === void 0 ? void 0 : _c[fromSizeMode]) === null || _d === void 0 ? void 0 : _d.length) > 1) {
                        parentLayoutInfos = sectionJson.parent[fromSizeMode];
                    }
                }
                parentLayoutInfos.forEach(parentLayoutInfo => {
                    updatedAppConfig = fromLayoutService.removeItem(updatedAppConfig, parentLayoutInfo, fromSizeMode, false);
                });
            }
            // create an empty layout
            const result = this.createBlankItem(updatedAppConfig, toLayoutId);
            updatedAppConfig = result[0];
            const newItemId = result[1];
            updatedAppConfig = updatedAppConfig.setIn(['layouts', toLayoutId, 'content', newItemId, 'type'], movingLayoutItem.type);
            // update widgetId or sectionId
            if (movingLayoutItem.type === jimu_core__WEBPACK_IMPORTED_MODULE_0__.LayoutItemType.Widget) {
                updatedAppConfig = updatedAppConfig.setIn(['layouts', toLayoutId, 'content', newItemId, 'widgetId'], movingLayoutItem.widgetId);
            }
            else if (movingLayoutItem.type === jimu_core__WEBPACK_IMPORTED_MODULE_0__.LayoutItemType.Section) {
                updatedAppConfig = updatedAppConfig.setIn(['layouts', toLayoutId, 'content', newItemId, 'sectionId'], movingLayoutItem.sectionId);
            }
            // add parent for the content
            const newLayoutInfo = { layoutId: toLayoutId, layoutItemId: newItemId };
            const toLayoutItem = jimu_layouts_layout_runtime__WEBPACK_IMPORTED_MODULE_4__.searchUtils.findLayoutItem(updatedAppConfig, newLayoutInfo);
            const service = new _content_service_wrapper__WEBPACK_IMPORTED_MODULE_2__.ContentServiceWrapper(updatedAppConfig, toLayoutItem);
            service.addParent(newLayoutInfo, toSizeMode);
            // update content after move
            if (fromSizeMode === toSizeMode) {
                service.afterMoved(fromLayoutInfo.layoutId, toLayoutId);
            }
            else {
                service.afterAdded(toLayoutId, fromSizeMode, toSizeMode);
            }
            updatedAppConfig = service.getConfig();
            return [updatedAppConfig, newLayoutInfo];
        }
        return [updatedAppConfig, fromLayoutInfo];
    }
    afterItemAdded(appConfig, layoutInfo, fromSizeMode, currentSizeMode, options) {
        const layoutItem = jimu_layouts_layout_runtime__WEBPACK_IMPORTED_MODULE_4__.searchUtils.findLayoutItem(appConfig, layoutInfo);
        const service = new _content_service_wrapper__WEBPACK_IMPORTED_MODULE_2__.ContentServiceWrapper(appConfig, layoutItem);
        service.afterAdded(layoutInfo.layoutId, fromSizeMode, currentSizeMode);
        return service.getConfig();
    }
    // no need to add beforeItemMoved, the logic can be executed in beforeItemRemoved
    afterItemMoved(appConfig, layoutInfo, toLayoutId) {
        return appConfig;
    }
    beforeItemRemoved(appConfig, layoutInfo) {
        return appConfig;
    }
    afterItemRemoved(appConfig, layoutInfo) {
        return appConfig;
    }
}


/***/ }),

/***/ "./jimu-for-builder/lib/app-config-service/content-service-wrapper.ts":
/*!****************************************************************************!*\
  !*** ./jimu-for-builder/lib/app-config-service/content-service-wrapper.ts ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ContentServiceWrapper: () => (/* binding */ ContentServiceWrapper)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");
/* harmony import */ var _widget_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./widget-service */ "./jimu-for-builder/lib/app-config-service/widget-service.ts");
/* harmony import */ var _section_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./section-service */ "./jimu-for-builder/lib/app-config-service/section-service.ts");
/* harmony import */ var _screen_group_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./screen-group-service */ "./jimu-for-builder/lib/app-config-service/screen-group-service.ts");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};




class ContentServiceWrapper {
    constructor(appConfig, layoutItem) {
        this.appConfig = appConfig;
        this.layoutItem = layoutItem;
        switch (layoutItem.type) {
            case jimu_core__WEBPACK_IMPORTED_MODULE_0__.LayoutItemType.Widget:
                this.service = _widget_service__WEBPACK_IMPORTED_MODULE_1__["default"];
                this.contentId = layoutItem.widgetId;
                break;
            case jimu_core__WEBPACK_IMPORTED_MODULE_0__.LayoutItemType.Section:
                this.service = _section_service__WEBPACK_IMPORTED_MODULE_2__["default"];
                this.contentId = layoutItem.sectionId;
                break;
            case jimu_core__WEBPACK_IMPORTED_MODULE_0__.LayoutItemType.ScreenGroup:
                this.service = _screen_group_service__WEBPACK_IMPORTED_MODULE_3__["default"];
                this.contentId = layoutItem.screenGroupId;
                break;
        }
    }
    getConfig() {
        return this.appConfig;
    }
    getContentId() {
        return this.contentId;
    }
    createFromTemplate(templateJson, sizeModeList, context, options) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.contentId && this.service) {
                const result = yield this.service.createFromTemplate(this.appConfig, templateJson, this.contentId, sizeModeList, context, options);
                this.appConfig = result[0];
                return result;
            }
            return [this.appConfig, null];
        });
    }
    duplicateEmbedLayout(fromSizeMode, toSizeMdoe) {
        if (this.service) {
            const result = this.service.duplicateEmbedLayout(this.appConfig, this.contentId, fromSizeMode, toSizeMdoe);
            this.appConfig = result[0];
            return result;
        }
        return [this.appConfig, null];
    }
    duplicate(targetBrowserSize, context) {
        if (this.service) {
            const result = this.service.duplicate(this.appConfig, this.contentId, targetBrowserSize, context);
            this.appConfig = result[0];
            return result;
        }
        return [this.appConfig, null];
    }
    tryRemove(layoutInfo, browserSizeMode) {
        if (this.service) {
            this.appConfig = this.service.tryRemove(this.appConfig, this.contentId, layoutInfo, browserSizeMode);
        }
        return this.appConfig;
    }
    remove() {
        if (this.service) {
            this.appConfig = this.service.remove(this.appConfig, this.contentId);
        }
        return this.appConfig;
    }
    toTocNode(parent, browserSizeMode) {
        if (this.service) {
            return this.service.toTocNode(this.appConfig, this.contentId, parent, browserSizeMode);
        }
        return null;
    }
    afterMoved(fromLayoutId, toLayoutId) {
        if (this.service) {
            this.appConfig = this.service.afterMoved(this.appConfig, this.contentId, fromLayoutId, toLayoutId);
        }
        return this.appConfig;
    }
    afterAdded(layoutId, fromSizeMode, toSizeMode) {
        if (this.service) {
            this.appConfig = this.service.afterAdded(this.appConfig, this.contentId, layoutId, fromSizeMode, toSizeMode);
        }
        return this.appConfig;
    }
    addParent(layoutInfo, browserSizeMode) {
        if (this.service) {
            this.appConfig = this.service.addParent(this.appConfig, this.contentId, layoutInfo, browserSizeMode);
        }
        return this.appConfig;
    }
    removeParent(layoutInfo, browserSizeMode) {
        if (this.service) {
            this.appConfig = this.service.removeParent(this.appConfig, this.contentId, layoutInfo, browserSizeMode);
        }
        return this.appConfig;
    }
    clearParent() {
        if (this.service) {
            this.appConfig = this.service.clearParent(this.appConfig, this.contentId);
        }
        return this.appConfig;
    }
    removeSizeModeParent(browserSizeMode) {
        if (this.service) {
            this.appConfig = this.service.removeSizeModeParent(this.appConfig, this.contentId, browserSizeMode);
        }
        return this.appConfig;
    }
    findParent(browserSizeMode) {
        var _a;
        return (_a = this.service) === null || _a === void 0 ? void 0 : _a.findParent(this.appConfig, this.contentId, browserSizeMode);
    }
}


/***/ }),

/***/ "./jimu-for-builder/lib/app-config-service/empty-content-service.ts":
/*!**************************************************************************!*\
  !*** ./jimu-for-builder/lib/app-config-service/empty-content-service.ts ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   EmptyContentService: () => (/* binding */ EmptyContentService),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");
/* harmony import */ var jimu_layouts_layout_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! jimu-layouts/layout-runtime */ "jimu-layouts/layout-runtime");
/* harmony import */ var _widget_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./widget-service */ "./jimu-for-builder/lib/app-config-service/widget-service.ts");
/* harmony import */ var _section_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./section-service */ "./jimu-for-builder/lib/app-config-service/section-service.ts");
/* harmony import */ var _screen_group_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./screen-group-service */ "./jimu-for-builder/lib/app-config-service/screen-group-service.ts");





// represent an empty layout item
class EmptyContentService {
    /**
     * Set content id of the layout item, the type of the layout item should have been set.
     * @param appConfig
     * @param layoutInfo
     * @param contentId
     * @param sizeMode
     * @returns
     */
    setContentId(appConfig, layoutInfo, contentId, sizeMode) {
        if (!contentId) {
            return appConfig;
        }
        const { layoutId, layoutItemId } = layoutInfo;
        const layoutItem = jimu_layouts_layout_runtime__WEBPACK_IMPORTED_MODULE_1__.searchUtils.findLayoutItem(appConfig, layoutInfo);
        if (layoutItem) {
            let updatedAppConfig = appConfig;
            switch (layoutItem.type) {
                case jimu_core__WEBPACK_IMPORTED_MODULE_0__.LayoutItemType.Widget:
                    updatedAppConfig = updatedAppConfig.setIn(['layouts', layoutId, 'content', layoutItemId, 'widgetId'], contentId);
                    updatedAppConfig = _widget_service__WEBPACK_IMPORTED_MODULE_2__["default"].addParent(updatedAppConfig, contentId, layoutInfo, sizeMode);
                    break;
                case jimu_core__WEBPACK_IMPORTED_MODULE_0__.LayoutItemType.Section:
                    updatedAppConfig = updatedAppConfig.setIn(['layouts', layoutId, 'content', layoutItemId, 'sectionId'], contentId);
                    updatedAppConfig = _section_service__WEBPACK_IMPORTED_MODULE_3__["default"].addParent(updatedAppConfig, contentId, layoutInfo, sizeMode);
                    break;
                case jimu_core__WEBPACK_IMPORTED_MODULE_0__.LayoutItemType.ScreenGroup:
                    updatedAppConfig = updatedAppConfig.setIn(['layouts', layoutId, 'content', layoutItemId, 'screenGroupId'], contentId);
                    updatedAppConfig = _screen_group_service__WEBPACK_IMPORTED_MODULE_4__["default"].addParent(updatedAppConfig, contentId, layoutInfo, sizeMode);
                    break;
            }
            return updatedAppConfig;
        }
        return appConfig;
    }
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (new EmptyContentService());


/***/ }),

/***/ "./jimu-for-builder/lib/app-config-service/index.ts":
/*!**********************************************************!*\
  !*** ./jimu-for-builder/lib/app-config-service/index.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BaseLayoutService: () => (/* reexport safe */ _base_layout_service__WEBPACK_IMPORTED_MODULE_5__.BaseLayoutService),
/* harmony export */   ContentServiceWrapper: () => (/* reexport safe */ _content_service_wrapper__WEBPACK_IMPORTED_MODULE_8__.ContentServiceWrapper),
/* harmony export */   LayoutServiceProvider: () => (/* reexport safe */ _layout_service_provider__WEBPACK_IMPORTED_MODULE_6__.LayoutServiceProvider),
/* harmony export */   emptyContentService: () => (/* reexport safe */ _empty_content_service__WEBPACK_IMPORTED_MODULE_3__["default"]),
/* harmony export */   makeSureTemplateConfig: () => (/* reexport safe */ _util__WEBPACK_IMPORTED_MODULE_7__.makeSureTemplateConfig),
/* harmony export */   screenGroupService: () => (/* reexport safe */ _screen_group_service__WEBPACK_IMPORTED_MODULE_2__["default"]),
/* harmony export */   sectionService: () => (/* reexport safe */ _section_service__WEBPACK_IMPORTED_MODULE_1__["default"]),
/* harmony export */   templateService: () => (/* reexport safe */ _template_service__WEBPACK_IMPORTED_MODULE_4__["default"]),
/* harmony export */   widgetService: () => (/* reexport safe */ _widget_service__WEBPACK_IMPORTED_MODULE_0__["default"])
/* harmony export */ });
/* harmony import */ var _widget_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./widget-service */ "./jimu-for-builder/lib/app-config-service/widget-service.ts");
/* harmony import */ var _section_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./section-service */ "./jimu-for-builder/lib/app-config-service/section-service.ts");
/* harmony import */ var _screen_group_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./screen-group-service */ "./jimu-for-builder/lib/app-config-service/screen-group-service.ts");
/* harmony import */ var _empty_content_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./empty-content-service */ "./jimu-for-builder/lib/app-config-service/empty-content-service.ts");
/* harmony import */ var _template_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./template-service */ "./jimu-for-builder/lib/app-config-service/template-service.ts");
/* harmony import */ var _base_layout_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./base-layout-service */ "./jimu-for-builder/lib/app-config-service/base-layout-service.ts");
/* harmony import */ var _layout_service_provider__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./layout-service-provider */ "./jimu-for-builder/lib/app-config-service/layout-service-provider.ts");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./util */ "./jimu-for-builder/lib/app-config-service/util.ts");
/* harmony import */ var _content_service_wrapper__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./content-service-wrapper */ "./jimu-for-builder/lib/app-config-service/content-service-wrapper.ts");












/***/ }),

/***/ "./jimu-for-builder/lib/app-config-service/layout-service-provider.ts":
/*!****************************************************************************!*\
  !*** ./jimu-for-builder/lib/app-config-service/layout-service-provider.ts ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   LayoutServiceProvider: () => (/* binding */ LayoutServiceProvider)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");

const DEFAULT_LAYOUT_TYPE = jimu_core__WEBPACK_IMPORTED_MODULE_0__.LayoutType.FixedLayout;
class LayoutServiceProvider {
    static getInstance() {
        if (!LayoutServiceProvider.instance) {
            LayoutServiceProvider.instance = new LayoutServiceProvider();
        }
        return LayoutServiceProvider.instance;
    }
    static getService(appConfig, layoutId) {
        var _a;
        const layoutJson = appConfig.layouts[layoutId];
        return LayoutServiceProvider.getInstance().getServiceByType((_a = layoutJson === null || layoutJson === void 0 ? void 0 : layoutJson.type) !== null && _a !== void 0 ? _a : DEFAULT_LAYOUT_TYPE);
    }
    static getServiceFromSizeModeLayout(appConfig, layouts) {
        var _a;
        const firstLayoutId = Object.values(layouts)[0];
        const defaultLayoutId = layouts[appConfig.mainSizeMode];
        return (_a = LayoutServiceProvider.getService(appConfig, firstLayoutId)) !== null && _a !== void 0 ? _a : LayoutServiceProvider.getService(appConfig, defaultLayoutId);
    }
    constructor() {
        this.serviceMap = new Map();
    }
    registerService(type, service) {
        this.serviceMap.set(type, service);
    }
    getServiceByType(type) {
        return this.serviceMap.get(type !== null && type !== void 0 ? type : DEFAULT_LAYOUT_TYPE);
    }
}


/***/ }),

/***/ "./jimu-for-builder/lib/app-config-service/screen-group-service.ts":
/*!*************************************************************************!*\
  !*** ./jimu-for-builder/lib/app-config-service/screen-group-service.ts ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ScreenGroupService: () => (/* binding */ ScreenGroupService),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");
/* harmony import */ var _base_content_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./base-content-service */ "./jimu-for-builder/lib/app-config-service/base-content-service.ts");
/* harmony import */ var _utils_app_config_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/app-config-utils */ "./jimu-for-builder/lib/utils/app-config-utils.ts");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./util */ "./jimu-for-builder/lib/app-config-service/util.ts");
/* harmony import */ var _layout_service_provider__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./layout-service-provider */ "./jimu-for-builder/lib/app-config-service/layout-service-provider.ts");
/* harmony import */ var jimu_icons_svg_outlined_brand_screen_svg__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! jimu-icons/svg/outlined/brand/screen.svg */ "./jimu-icons/svg/outlined/brand/screen.svg");
/* harmony import */ var jimu_icons_svg_outlined_brand_screen_svg__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(jimu_icons_svg_outlined_brand_screen_svg__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var jimu_icons_svg_outlined_brand_screen_group_svg__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! jimu-icons/svg/outlined/brand/screen-group.svg */ "./jimu-icons/svg/outlined/brand/screen-group.svg");
/* harmony import */ var jimu_icons_svg_outlined_brand_screen_group_svg__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(jimu_icons_svg_outlined_brand_screen_group_svg__WEBPACK_IMPORTED_MODULE_6__);
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};







class ScreenGroupService extends _base_content_service__WEBPACK_IMPORTED_MODULE_1__.BaseContentService {
    createFromTemplate(appConfig, templateJson, screenGroupId, sizeModeList, contentMapping) {
        return __awaiter(this, void 0, void 0, function* () {
            if (contentMapping[screenGroupId]) {
                return [appConfig, contentMapping[screenGroupId]];
            }
            let updatedAppConfig = appConfig;
            console.debug('create screen group', screenGroupId, 'from template in', sizeModeList);
            yield (0,_util__WEBPACK_IMPORTED_MODULE_3__.makeSureTemplateConfig)(templateJson);
            const templateConfig = templateJson.config;
            screenGroupId = screenGroupId !== null && screenGroupId !== void 0 ? screenGroupId : Object.keys(templateConfig.screenGroups)[0];
            const templateScreenGroup = templateConfig.screenGroups[screenGroupId];
            const nextGroupId = _utils_app_config_utils__WEBPACK_IMPORTED_MODULE_2__.getUniqueId(appConfig, 'screenGroup');
            updatedAppConfig = updatedAppConfig
                .setIn(['screenGroups', nextGroupId], templateScreenGroup)
                .setIn(['screenGroups', nextGroupId, 'id'], nextGroupId)
                .setIn(['screenGroups', nextGroupId, 'label'], _utils_app_config_utils__WEBPACK_IMPORTED_MODULE_2__.getUniqueLabel(appConfig, 'screenGroup', jimu_core__WEBPACK_IMPORTED_MODULE_0__.i18n.getIntl().formatMessage({ id: 'screenGroup' })));
            const newScreenIds = [];
            for (let i = 0; i < templateScreenGroup.screens.length; i += 1) { // awaits in a for-loop should get executed in series
                const screenId = templateScreenGroup.screens[i];
                const result = yield this.createScreenFromTemplate(updatedAppConfig, templateJson, screenId, sizeModeList, contentMapping);
                updatedAppConfig = result[0];
                newScreenIds.push(result[1]);
                updatedAppConfig = updatedAppConfig.setIn(['screens', result[1], 'parent'], nextGroupId);
            }
            updatedAppConfig = updatedAppConfig.setIn(['screenGroups', nextGroupId, 'screens'], newScreenIds);
            contentMapping[screenGroupId] = nextGroupId;
            return [updatedAppConfig, nextGroupId];
        });
    }
    createScreenFromTemplate(appConfig, templateJson, screenId, sizeModeList, contentMapping) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            let updatedAppConfig = appConfig;
            console.debug('create screen', screenId, 'from template in', sizeModeList);
            yield (0,_util__WEBPACK_IMPORTED_MODULE_3__.makeSureTemplateConfig)(templateJson);
            const templateConfig = templateJson.config;
            screenId = screenId !== null && screenId !== void 0 ? screenId : Object.keys(templateConfig.screens)[0];
            const templateScreen = templateConfig.screens[screenId];
            const nextScreenId = _utils_app_config_utils__WEBPACK_IMPORTED_MODULE_2__.getUniqueId(appConfig, 'screen');
            updatedAppConfig = updatedAppConfig.setIn(['screens', nextScreenId], templateScreen)
                .setIn(['screens', nextScreenId, 'id'], nextScreenId)
                .setIn(['screens', nextScreenId, 'label'], _utils_app_config_utils__WEBPACK_IMPORTED_MODULE_2__.getUniqueLabel(appConfig, 'screen', jimu_core__WEBPACK_IMPORTED_MODULE_0__.i18n.getIntl().formatMessage({ id: 'screen' })));
            const layoutIds = [];
            Object.keys((_b = (_a = templateScreen.panel) === null || _a === void 0 ? void 0 : _a.layout) !== null && _b !== void 0 ? _b : {}).forEach((sizeMode) => {
                layoutIds.push({
                    sizeMode,
                    isSide: true,
                    layoutId: templateScreen.panel.layout[sizeMode]
                });
            });
            Object.keys((_c = templateScreen.main.layout) !== null && _c !== void 0 ? _c : {}).forEach((sizeMode) => {
                layoutIds.push({
                    sizeMode,
                    isSide: false,
                    layoutId: templateScreen.main.layout[sizeMode]
                });
            });
            for (let i = 0; i < layoutIds.length; i += 1) { // awaits in a for-loop should get executed in series
                const { sizeMode, layoutId, isSide } = layoutIds[i];
                const service = _layout_service_provider__WEBPACK_IMPORTED_MODULE_4__.LayoutServiceProvider.getService(templateConfig, layoutId);
                const result = yield service.createLayoutFromTemplate(updatedAppConfig, templateJson, layoutId, sizeMode, jimu_core__WEBPACK_IMPORTED_MODULE_0__.LayoutParentType.Screen, nextScreenId, contentMapping);
                updatedAppConfig = result[0];
                const newLayoutId = result[1];
                updatedAppConfig = updatedAppConfig.setIn(['layouts', newLayoutId, 'parent'], { type: jimu_core__WEBPACK_IMPORTED_MODULE_0__.LayoutParentType.Screen, id: nextScreenId });
                if (isSide) {
                    updatedAppConfig = updatedAppConfig.setIn(['screens', nextScreenId, 'panel', 'layout', sizeMode], newLayoutId);
                }
                else {
                    updatedAppConfig = updatedAppConfig.setIn(['screens', nextScreenId, 'main', 'layout', sizeMode], newLayoutId);
                }
            }
            return [updatedAppConfig, nextScreenId];
        });
    }
    duplicateEmbedLayout(appConfig, contentId, fromSizeMode, toSizeMode) {
        var _a;
        const sgJson = (_a = appConfig.screenGroups) === null || _a === void 0 ? void 0 : _a[contentId];
        if (!sgJson) {
            return [appConfig, null];
        }
        let updatedAppConfig = appConfig;
        sgJson.screens.forEach(screenId => {
            var _a;
            const screenJson = updatedAppConfig.screens[screenId];
            const mainLayouts = screenJson.main.layout;
            if (mainLayouts[fromSizeMode] && !mainLayouts[toSizeMode]) {
                const service = _layout_service_provider__WEBPACK_IMPORTED_MODULE_4__.LayoutServiceProvider.getService(updatedAppConfig, mainLayouts[fromSizeMode]);
                const result = service.duplicateLayout(updatedAppConfig, mainLayouts[fromSizeMode], fromSizeMode, toSizeMode, null, false);
                updatedAppConfig = result[0];
                const newLayoutId = result[1];
                if (result[1] != null) {
                    updatedAppConfig = updatedAppConfig
                        .setIn(['layouts', newLayoutId, 'parent'], { type: jimu_core__WEBPACK_IMPORTED_MODULE_0__.LayoutParentType.Screen, id: screenId })
                        .setIn(['screens', screenId, 'main', 'layout', toSizeMode], newLayoutId);
                }
            }
            const panelLayouts = (_a = screenJson.panel) === null || _a === void 0 ? void 0 : _a.layout;
            if (panelLayouts && panelLayouts[fromSizeMode] && !panelLayouts[toSizeMode]) {
                const service = _layout_service_provider__WEBPACK_IMPORTED_MODULE_4__.LayoutServiceProvider.getService(updatedAppConfig, panelLayouts[fromSizeMode]);
                const result = service.duplicateLayout(updatedAppConfig, panelLayouts[fromSizeMode], fromSizeMode, toSizeMode, null, false);
                updatedAppConfig = result[0];
                const newLayoutId = result[1];
                if (result[1] != null) {
                    updatedAppConfig = updatedAppConfig
                        .setIn(['layouts', newLayoutId, 'parent'], { type: jimu_core__WEBPACK_IMPORTED_MODULE_0__.LayoutParentType.Screen, id: screenId })
                        .setIn(['screens', screenId, 'panel', 'layout', toSizeMode], newLayoutId);
                }
            }
        });
        return [updatedAppConfig, null];
    }
    duplicate(appConfig, contentId, targetBrowserSize, context) {
        var _a;
        const sgJson = (_a = appConfig.screenGroups) === null || _a === void 0 ? void 0 : _a[contentId];
        if (!sgJson) {
            return [appConfig, null];
        }
        if (context === null || context === void 0 ? void 0 : context[contentId]) {
            // already duplicatd in a stack of function invokations.
            // Use case: same as section
            // check the duplicated section has the target browser size mode layout
            const sgJson = appConfig.screenGroups[context[contentId]];
            const firstScreen = appConfig.screens[sgJson.screens[0]];
            if (firstScreen.main.layout[targetBrowserSize]) {
                return [appConfig, context[contentId]];
            }
            else {
                // duplicate embed layout in target browser size mode from original sg to duplicated sg
                const originSg = appConfig.screenGroups[contentId];
                let updatedAppConfig = appConfig;
                originSg.screens.forEach(screenId => {
                    var _a;
                    const screenJson = updatedAppConfig.screens[screenId];
                    const mLayoutId = screenJson.main.layout[targetBrowserSize];
                    const service = _layout_service_provider__WEBPACK_IMPORTED_MODULE_4__.LayoutServiceProvider.getService(updatedAppConfig, mLayoutId);
                    const dupResult = service.duplicateLayout(updatedAppConfig, mLayoutId, targetBrowserSize, targetBrowserSize, context, true);
                    updatedAppConfig = dupResult[0];
                    const newLayoutId = dupResult[1];
                    if (newLayoutId != null) {
                        updatedAppConfig = updatedAppConfig
                            .setIn(['screens', context[screenId], 'main', 'layout', targetBrowserSize], newLayoutId)
                            .setIn(['layouts', newLayoutId, 'parent'], { type: jimu_core__WEBPACK_IMPORTED_MODULE_0__.LayoutParentType.Screen, id: context[screenId] });
                    }
                    if ((_a = screenJson.panel) === null || _a === void 0 ? void 0 : _a.layout) {
                        const pLayoutId = screenJson.panel.layout[targetBrowserSize];
                        const service = _layout_service_provider__WEBPACK_IMPORTED_MODULE_4__.LayoutServiceProvider.getService(updatedAppConfig, pLayoutId);
                        const dupResult = service.duplicateLayout(updatedAppConfig, pLayoutId, targetBrowserSize, targetBrowserSize, context, true);
                        updatedAppConfig = dupResult[0];
                        const newLayoutId = dupResult[1];
                        if (newLayoutId != null) {
                            updatedAppConfig = updatedAppConfig
                                .setIn(['screens', context[screenId], 'panel', 'layout', targetBrowserSize], newLayoutId)
                                .setIn(['layouts', newLayoutId, 'parent'], { type: jimu_core__WEBPACK_IMPORTED_MODULE_0__.LayoutParentType.Screen, id: context[screenId] });
                        }
                    }
                });
                return [updatedAppConfig, context[contentId]];
            }
        }
        console.debug('duplicate screen group', contentId, 'to', targetBrowserSize);
        let newSgJson = sgJson
            .set('id', _utils_app_config_utils__WEBPACK_IMPORTED_MODULE_2__.getUniqueId(appConfig, 'screenGroup'))
            .set('label', (0,_util__WEBPACK_IMPORTED_MODULE_3__.getDuplicateLabel)(appConfig, 'screenGroup', sgJson.label));
        let updatedAppConfig = appConfig.setIn(['screenGroups', newSgJson.id], newSgJson);
        const screenIds = sgJson.screens.map((screenId) => {
            const result = this.duplicateScreen(updatedAppConfig, sgJson.id, screenId, [targetBrowserSize], false, context);
            updatedAppConfig = result[0];
            const newScreenId = result[1];
            updatedAppConfig = updatedAppConfig.setIn(['screens', newScreenId, 'parent'], newSgJson.id);
            return newScreenId;
        });
        newSgJson = newSgJson.set('screens', screenIds);
        updatedAppConfig = updatedAppConfig.setIn(['screenGroups', newSgJson.id], newSgJson);
        if (context) {
            context[contentId] = newSgJson.id;
        }
        return [updatedAppConfig, newSgJson.id];
    }
    tryRemove(appConfig, contentId, layoutInfo, sizeMode) {
        var _a;
        const sgJson = (_a = appConfig.screenGroups) === null || _a === void 0 ? void 0 : _a[contentId];
        if (!sgJson) {
            return appConfig;
        }
        console.debug(`try remove screenGroup ${contentId} from ${layoutInfo.layoutId} ${layoutInfo.layoutItemId}`, sizeMode);
        // 1. current size mode passed, check other size mode
        const hasOtherModes = [jimu_core__WEBPACK_IMPORTED_MODULE_0__.BrowserSizeMode.Large, jimu_core__WEBPACK_IMPORTED_MODULE_0__.BrowserSizeMode.Medium, jimu_core__WEBPACK_IMPORTED_MODULE_0__.BrowserSizeMode.Small]
            .filter(mode => mode !== sizeMode)
            .some(mode => { var _a; return ((_a = sgJson.parent) === null || _a === void 0 ? void 0 : _a[mode]) != null; });
        if (!hasOtherModes) { // can be removed
            return this.remove(appConfig, contentId);
        }
        else {
            // 1. remove parent for this size mode
            let updatedAppConfig = this.removeParent(appConfig, contentId, layoutInfo, sizeMode);
            // 2. remove embed layout of this size mode if any
            sgJson.screens.forEach((screenId) => {
                var _a;
                const screenJson = updatedAppConfig.screens[screenId];
                if (screenJson.main.layout[sizeMode]) {
                    const service = _layout_service_provider__WEBPACK_IMPORTED_MODULE_4__.LayoutServiceProvider.getServiceFromSizeModeLayout(updatedAppConfig, screenJson.main.layout);
                    updatedAppConfig = service.removeSizeModeLayouts(updatedAppConfig, { [sizeMode]: screenJson.main.layout[sizeMode] });
                    updatedAppConfig = updatedAppConfig.setIn(['screens', screenId, 'main', 'layout'], screenJson.main.layout.without(sizeMode));
                }
                if ((_a = screenJson.panel) === null || _a === void 0 ? void 0 : _a.layout[sizeMode]) {
                    const service = _layout_service_provider__WEBPACK_IMPORTED_MODULE_4__.LayoutServiceProvider.getServiceFromSizeModeLayout(updatedAppConfig, screenJson.panel.layout);
                    updatedAppConfig = service.removeSizeModeLayouts(updatedAppConfig, { [sizeMode]: screenJson.panel.layout[sizeMode] });
                    updatedAppConfig = updatedAppConfig.setIn(['screens', screenId, 'panel', 'layout'], screenJson.panel.layout.without(sizeMode));
                }
            });
            return updatedAppConfig;
        }
    }
    remove(appConfig, contentId) {
        var _a, _b;
        const sgJson = (_a = appConfig.screenGroups) === null || _a === void 0 ? void 0 : _a[contentId];
        if (!sgJson) {
            return appConfig;
        }
        let updatedAppConfig = appConfig;
        console.debug('remove screen group', contentId);
        // remove all parent layout infos
        Object.keys((_b = sgJson.parent) !== null && _b !== void 0 ? _b : {}).forEach((sizeMode) => {
            const { layoutId } = sgJson.parent[sizeMode];
            const layoutJson = updatedAppConfig.layouts[layoutId];
            if (layoutJson) {
                const service = _layout_service_provider__WEBPACK_IMPORTED_MODULE_4__.LayoutServiceProvider.getService(updatedAppConfig, layoutId);
                updatedAppConfig = service.removeItem(updatedAppConfig, sgJson.parent[sizeMode], sizeMode, false);
            }
        });
        // remove screens
        sgJson.screens.forEach((screenId) => {
            var _a;
            const screenJson = updatedAppConfig.screens[screenId];
            const service = _layout_service_provider__WEBPACK_IMPORTED_MODULE_4__.LayoutServiceProvider.getServiceFromSizeModeLayout(updatedAppConfig, screenJson.main.layout);
            updatedAppConfig = service.removeSizeModeLayouts(updatedAppConfig, screenJson.main.layout);
            if ((_a = screenJson.panel) === null || _a === void 0 ? void 0 : _a.layout) {
                const service = _layout_service_provider__WEBPACK_IMPORTED_MODULE_4__.LayoutServiceProvider.getServiceFromSizeModeLayout(updatedAppConfig, screenJson.panel.layout);
                updatedAppConfig = service.removeSizeModeLayouts(updatedAppConfig, screenJson.panel.layout);
            }
            updatedAppConfig = updatedAppConfig.set('screens', updatedAppConfig.screens.without(screenId));
        });
        // remove screen group
        updatedAppConfig = updatedAppConfig.set('screenGroups', updatedAppConfig.screenGroups.without(contentId));
        return updatedAppConfig;
    }
    toTocNode(appConfig, contentId, parent, browserSizeMode) {
        var _a, _b;
        const { layoutId, layoutItemId } = parent;
        const result = {
            label: '',
            layoutId,
            layoutItemId,
            type: 'screenGroup',
            id: contentId,
            children: []
        };
        const sgJson = (_a = appConfig.screenGroups) === null || _a === void 0 ? void 0 : _a[contentId];
        if (!sgJson) {
            return result;
        }
        result.label = sgJson.label;
        result.icon = (_b = sgJson.icon) !== null && _b !== void 0 ? _b : (jimu_icons_svg_outlined_brand_screen_group_svg__WEBPACK_IMPORTED_MODULE_6___default());
        result.flipIcon = false;
        sgJson.screens.forEach((screenId) => {
            var _a, _b, _c;
            const screenJson = appConfig.screens[screenId];
            const screenNode = {
                label: screenJson.label,
                icon: (jimu_icons_svg_outlined_brand_screen_svg__WEBPACK_IMPORTED_MODULE_5___default()),
                flipIcon: false,
                type: 'screen',
                id: screenId,
                children: []
            };
            const mainLayoutId = (_a = screenJson.main.layout[browserSizeMode]) !== null && _a !== void 0 ? _a : screenJson.main.layout[appConfig.mainSizeMode];
            const service = _layout_service_provider__WEBPACK_IMPORTED_MODULE_4__.LayoutServiceProvider.getService(appConfig, mainLayoutId);
            const mainChildren = service.getTocStructure(appConfig, mainLayoutId);
            screenNode.children.push({
                label: jimu_core__WEBPACK_IMPORTED_MODULE_0__.i18n.getIntl().formatMessage({ id: 'mainStage' }),
                isLabelReadOnly: true,
                type: 'layout',
                id: mainLayoutId,
                children: mainChildren
            });
            if ((_b = screenJson.panel) === null || _b === void 0 ? void 0 : _b.layout) {
                const panelLayoutId = (_c = screenJson.panel.layout[browserSizeMode]) !== null && _c !== void 0 ? _c : screenJson.panel.layout[appConfig.mainSizeMode];
                const service = _layout_service_provider__WEBPACK_IMPORTED_MODULE_4__.LayoutServiceProvider.getService(appConfig, panelLayoutId);
                const panelChildren = service.getTocStructure(appConfig, panelLayoutId);
                screenNode.children.push({
                    label: jimu_core__WEBPACK_IMPORTED_MODULE_0__.i18n.getIntl().formatMessage({ id: 'scrollingPanel' }),
                    isLabelReadOnly: true,
                    type: 'layout',
                    id: panelLayoutId,
                    children: panelChildren
                });
            }
            result.children.push(screenNode);
        });
        return result;
    }
    afterMoved(appConfig, contentId, fromLayout, toLayout) {
        // no extra logic to process
        return appConfig;
    }
    afterAdded(appConfig, contentId, toLayout, fromSizeMode, toSizeMode) {
        var _a;
        const sgJson = (_a = appConfig.screenGroups) === null || _a === void 0 ? void 0 : _a[contentId];
        if (!sgJson) {
            return appConfig;
        }
        let updatedAppConfig = appConfig;
        // If the view layout does not exist in the current sizeMode, we'll create a new one for them.
        sgJson.screens.forEach(screenId => {
            var _a, _b;
            const screenJson = updatedAppConfig.screens[screenId];
            if (screenJson.main.layout[fromSizeMode] && !screenJson.main.layout[toSizeMode]) {
                const layoutJson = updatedAppConfig.layouts[screenJson.main.layout[fromSizeMode]];
                const service = _layout_service_provider__WEBPACK_IMPORTED_MODULE_4__.LayoutServiceProvider.getService(updatedAppConfig, screenJson.main.layout[fromSizeMode]);
                const result = service.duplicateLayout(updatedAppConfig, layoutJson.id, fromSizeMode, toSizeMode, null);
                updatedAppConfig = result[0];
                const layoutId = result[1];
                if (layoutId != null) {
                    updatedAppConfig = updatedAppConfig
                        .setIn(['layouts', layoutId, 'parent'], { type: jimu_core__WEBPACK_IMPORTED_MODULE_0__.LayoutParentType.Screen, id: screenId })
                        .setIn(['screens', screenId, 'main', 'layout', toSizeMode], layoutId);
                }
            }
            if (((_b = (_a = screenJson.panel) === null || _a === void 0 ? void 0 : _a.layout) === null || _b === void 0 ? void 0 : _b[fromSizeMode]) && !screenJson.panel.layout[toSizeMode]) {
                const layoutJson = updatedAppConfig.layouts[screenJson.panel.layout[fromSizeMode]];
                const service = _layout_service_provider__WEBPACK_IMPORTED_MODULE_4__.LayoutServiceProvider.getService(updatedAppConfig, screenJson.panel.layout[fromSizeMode]);
                const result = service.duplicateLayout(updatedAppConfig, layoutJson.id, fromSizeMode, toSizeMode, null);
                updatedAppConfig = result[0];
                const layoutId = result[1];
                if (layoutId != null) {
                    updatedAppConfig = updatedAppConfig
                        .setIn(['layouts', layoutId, 'parent'], { type: jimu_core__WEBPACK_IMPORTED_MODULE_0__.LayoutParentType.Screen, id: screenId })
                        .setIn(['screens', screenId, 'panel', 'layout', toSizeMode], layoutId);
                }
            }
        });
        return updatedAppConfig;
    }
    addParent(appConfig, contentId, layoutInfo, sizeMode) {
        const sgJson = appConfig.screenGroups[contentId];
        if (!sgJson) {
            return appConfig;
        }
        console.debug('add parent', layoutInfo.layoutId, layoutInfo.layoutItemId, 'to', contentId, 'in', sizeMode);
        return appConfig.setIn(['screenGroups', contentId, 'parent', sizeMode], layoutInfo);
    }
    removeParent(appConfig, contentId, layoutInfo, sizeMode) {
        const sgJson = appConfig.screenGroups[contentId];
        if (!sgJson || !sgJson.parent) {
            return appConfig;
        }
        console.debug('remove parent', layoutInfo.layoutId, layoutInfo.layoutItemId, 'from', contentId);
        if (sizeMode) {
            const parent = sgJson.parent[sizeMode];
            if ((parent === null || parent === void 0 ? void 0 : parent.layoutId) === layoutInfo.layoutId && (parent === null || parent === void 0 ? void 0 : parent.layoutItemId) === layoutInfo.layoutItemId) {
                return appConfig.setIn(['screenGroups', contentId, 'parent'], sgJson.parent.without(sizeMode));
            }
            return appConfig;
        }
        let updatedAppConfig = appConfig;
        Object.keys(sgJson.parent).forEach((s) => {
            const parent = sgJson.parent[s];
            if (parent.layoutId === layoutInfo.layoutId && parent.layoutItemId === layoutInfo.layoutItemId) {
                updatedAppConfig = appConfig.setIn(['screenGroups', contentId, 'parent'], sgJson.parent.without(s));
            }
        });
        return updatedAppConfig;
    }
    clearParent(appConfig, contentId) {
        const sgJson = appConfig.screenGroups[contentId];
        if (!sgJson) {
            return appConfig;
        }
        return appConfig.setIn(['screenGroups', contentId], sgJson.without('parent'));
    }
    removeSizeModeParent(appConfig, contentId, browserSizeMode) {
        var _a;
        const sgJson = appConfig.screenGroups[contentId];
        if (!sgJson || !((_a = sgJson.parent) === null || _a === void 0 ? void 0 : _a[browserSizeMode])) {
            return appConfig;
        }
        return appConfig.setIn(['screenGroups', contentId, 'parent'], sgJson.parent.without(browserSizeMode));
    }
    findParent(appConfig, contentId, sizeMode) {
        var _a;
        const sgJson = appConfig.screenGroups[contentId];
        if (!sgJson || !sgJson.parent) {
            return null;
        }
        // browserSizeMode may be not a custom layout, it is transformed from mainSizeMode
        const sgParent = (_a = sgJson.parent[sizeMode]) !== null && _a !== void 0 ? _a : sgJson.parent[appConfig.mainSizeMode];
        return sgParent;
    }
    duplicateScreen(appConfig, sgId, screenId, sizeModeList, addToScreenGroup, context) {
        var _a, _b, _c;
        const sgJson = (_a = appConfig.screenGroups) === null || _a === void 0 ? void 0 : _a[sgId];
        const sJson = (_b = appConfig.screens) === null || _b === void 0 ? void 0 : _b[screenId];
        // screen group should contain at least one screen
        if (!sJson || !sgJson || !sgJson.screens.includes(screenId)) {
            return [appConfig, null];
        }
        console.debug('duplicate screen', screenId, 'in', sizeModeList, 'to', sgId);
        let screenJson = sJson
            .set('id', _utils_app_config_utils__WEBPACK_IMPORTED_MODULE_2__.getUniqueId(appConfig, 'screen'))
            .set('label', (0,_util__WEBPACK_IMPORTED_MODULE_3__.getDuplicateLabel)(appConfig, 'screen', sJson.label));
        if (!addToScreenGroup) {
            screenJson = screenJson.without('parent');
        }
        // must save into appconfig before duplicate iteration, or it's content section will get same section id to itself by getUniqueId.
        let updatedAppConfig = appConfig.setIn(['screens', screenJson.id], screenJson);
        // duplicate screen layout
        const mainSizeModeLayouts = {};
        sizeModeList.forEach(mode => { mainSizeModeLayouts[mode] = screenJson.main.layout[mode]; });
        const duplicateContext = context !== null && context !== void 0 ? context : {};
        const service = _layout_service_provider__WEBPACK_IMPORTED_MODULE_4__.LayoutServiceProvider.getServiceFromSizeModeLayout(updatedAppConfig, mainSizeModeLayouts);
        const duplicateResult = service.duplicateSizeModeLayouts(updatedAppConfig, mainSizeModeLayouts, jimu_core__WEBPACK_IMPORTED_MODULE_0__.LayoutParentType.Screen, screenJson.id, duplicateContext);
        updatedAppConfig = duplicateResult[0];
        screenJson = screenJson.setIn(['main', 'layout'], duplicateResult[1]);
        if ((_c = screenJson.panel) === null || _c === void 0 ? void 0 : _c.layout) {
            const panelSizeModeLayouts = {};
            sizeModeList.forEach(mode => { panelSizeModeLayouts[mode] = screenJson.panel.layout[mode]; });
            const service = _layout_service_provider__WEBPACK_IMPORTED_MODULE_4__.LayoutServiceProvider.getServiceFromSizeModeLayout(updatedAppConfig, panelSizeModeLayouts);
            const duplicateResult = service.duplicateSizeModeLayouts(updatedAppConfig, panelSizeModeLayouts, jimu_core__WEBPACK_IMPORTED_MODULE_0__.LayoutParentType.Screen, screenJson.id, duplicateContext);
            updatedAppConfig = duplicateResult[0];
            screenJson = screenJson.setIn(['panel', 'layout'], duplicateResult[1]);
        }
        updatedAppConfig = updatedAppConfig.setIn(['screens', screenJson.id], screenJson);
        if (addToScreenGroup) {
            const screens = sgJson.screens.asMutable();
            const index = screens.indexOf(screenId);
            screens.splice(index, 1, screenId, screenJson.id);
            updatedAppConfig = updatedAppConfig.setIn(['screenGroups', sgId, 'screens'], screens);
        }
        if (context) {
            context[screenId] = screenJson.id;
        }
        return [updatedAppConfig, screenJson.id];
    }
    removeScreen(appConfig, contentId, screenId) {
        var _a, _b;
        const sgJson = (_a = appConfig.screenGroups) === null || _a === void 0 ? void 0 : _a[contentId];
        const sJson = (_b = appConfig.screens) === null || _b === void 0 ? void 0 : _b[screenId];
        // screen group should contain at least one screen
        if (!sJson || !sgJson || sgJson.screens.length === 1 || !sgJson.screens.includes(screenId)) {
            return appConfig;
        }
        console.debug('remove screen', screenId, 'in', contentId);
        // remove from screenGroup.screens
        const screens = sgJson.screens.filter((sId) => sId !== screenId);
        let updatedAppConfig = appConfig.setIn(['screenGroups', contentId, 'screens'], screens);
        // remove screen layout
        const service = _layout_service_provider__WEBPACK_IMPORTED_MODULE_4__.LayoutServiceProvider.getServiceFromSizeModeLayout(updatedAppConfig, sJson.main.layout);
        updatedAppConfig = service.removeSizeModeLayouts(updatedAppConfig, sJson.main.layout);
        if (sJson.panel) {
            const service = _layout_service_provider__WEBPACK_IMPORTED_MODULE_4__.LayoutServiceProvider.getServiceFromSizeModeLayout(updatedAppConfig, sJson.panel.layout);
            updatedAppConfig = service.removeSizeModeLayouts(updatedAppConfig, sJson.panel.layout);
        }
        // remove from screen list
        updatedAppConfig = updatedAppConfig.set('screens', updatedAppConfig.screens.without(screenId));
        return updatedAppConfig;
    }
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (new ScreenGroupService());


/***/ }),

/***/ "./jimu-for-builder/lib/app-config-service/section-service.ts":
/*!********************************************************************!*\
  !*** ./jimu-for-builder/lib/app-config-service/section-service.ts ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SectionService: () => (/* binding */ SectionService),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");
/* harmony import */ var _base_content_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./base-content-service */ "./jimu-for-builder/lib/app-config-service/base-content-service.ts");
/* harmony import */ var _utils_app_config_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/app-config-utils */ "./jimu-for-builder/lib/utils/app-config-utils.ts");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./util */ "./jimu-for-builder/lib/app-config-service/util.ts");
/* harmony import */ var _widget_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./widget-service */ "./jimu-for-builder/lib/app-config-service/widget-service.ts");
/* harmony import */ var _layout_service_provider__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./layout-service-provider */ "./jimu-for-builder/lib/app-config-service/layout-service-provider.ts");
/* harmony import */ var jimu_icons_svg_outlined_brand_widget_section_svg__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! jimu-icons/svg/outlined/brand/widget-section.svg */ "./jimu-icons/svg/outlined/brand/widget-section.svg");
/* harmony import */ var jimu_icons_svg_outlined_brand_widget_section_svg__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(jimu_icons_svg_outlined_brand_widget_section_svg__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var jimu_icons_svg_outlined_brand_widget_section_view_svg__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! jimu-icons/svg/outlined/brand/widget-section-view.svg */ "./jimu-icons/svg/outlined/brand/widget-section-view.svg");
/* harmony import */ var jimu_icons_svg_outlined_brand_widget_section_view_svg__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(jimu_icons_svg_outlined_brand_widget_section_view_svg__WEBPACK_IMPORTED_MODULE_7__);
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};








class SectionService extends _base_content_service__WEBPACK_IMPORTED_MODULE_1__.BaseContentService {
    createFromTemplate(appConfig, templateJson, sectionId, sizeModeList, context) {
        return __awaiter(this, void 0, void 0, function* () {
            if (context[sectionId]) {
                // already duplicatd in a stack of function invokations.
                // Use case: A section is shared in a page's Large and Small size mode, and the page is duplicated.
                // 1. section is duplicated in Large size mode, view layout is duplicated in Large size mode too.
                // 2. when duplicate the small size mode, the section does not need to be duplicated again, but the view layout needs to be duplicated.
                // check the duplicated section has the target browser size mode layout
                const sectionJson = appConfig.sections[context[sectionId]];
                const firstView = appConfig.views[sectionJson.views[0]];
                // duplicate embed layout in target browser size mode from original section to duplicated section
                const originSection = templateJson.config.sections[sectionId];
                let updatedAppConfig = appConfig;
                for (let i = 0; i < sizeModeList.length; i++) {
                    const sizeMode = sizeModeList[i];
                    if (firstView.layout[sizeMode]) {
                        continue;
                    }
                    for (let j = 0; j < originSection.views.length; j++) {
                        const viewId = originSection.views[j];
                        const viewJson = templateJson.config.views[viewId];
                        const layoutId = viewJson.layout[sizeMode];
                        const service = _layout_service_provider__WEBPACK_IMPORTED_MODULE_5__.LayoutServiceProvider.getService(templateJson.config, layoutId);
                        const dupResult = yield service.createLayoutFromTemplate(updatedAppConfig, templateJson, layoutId, sizeMode, jimu_core__WEBPACK_IMPORTED_MODULE_0__.LayoutParentType.View, context[viewId], context);
                        updatedAppConfig = dupResult[0];
                        const newLayoutId = dupResult[1];
                        if (newLayoutId != null) {
                            updatedAppConfig = updatedAppConfig.setIn(['views', context[viewId], 'layout', sizeMode], newLayoutId);
                        }
                    }
                }
                return [updatedAppConfig, context[sectionId]];
            }
            yield (0,_util__WEBPACK_IMPORTED_MODULE_3__.makeSureTemplateConfig)(templateJson);
            let updatedAppConfig = appConfig;
            const templateConfig = templateJson.config;
            const templateSection = templateConfig.sections[sectionId];
            const nextSectionId = _utils_app_config_utils__WEBPACK_IMPORTED_MODULE_2__.getUniqueId(appConfig, 'section');
            updatedAppConfig = updatedAppConfig.setIn(['sections', nextSectionId], templateSection)
                .setIn(['sections', nextSectionId, 'id'], nextSectionId)
                .setIn(['sections', nextSectionId, 'label'], _utils_app_config_utils__WEBPACK_IMPORTED_MODULE_2__.getUniqueLabel(appConfig, 'section', jimu_core__WEBPACK_IMPORTED_MODULE_0__.i18n.getIntl().formatMessage({ id: 'section' })));
            const newViewIds = [];
            for (let i = 0; i < templateSection.views.length; i += 1) { // awaits in a for-loop should get executed in series
                const viewId = templateSection.views[i];
                const result = yield this.createViewFromTemplate(updatedAppConfig, templateJson, viewId, sizeModeList, context);
                updatedAppConfig = result[0];
                newViewIds.push(result[1]);
                updatedAppConfig = updatedAppConfig.setIn(['views', result[1], 'parent'], nextSectionId);
            }
            updatedAppConfig = updatedAppConfig.setIn(['sections', nextSectionId, 'views'], newViewIds);
            context[sectionId] = nextSectionId;
            return [updatedAppConfig, nextSectionId];
        });
    }
    createViewFromTemplate(appConfig, templateJson, viewId, sizeModeList, context) {
        return __awaiter(this, void 0, void 0, function* () {
            let updatedAppConfig = appConfig;
            yield (0,_util__WEBPACK_IMPORTED_MODULE_3__.makeSureTemplateConfig)(templateJson);
            const templateConfig = templateJson.config;
            const templateView = templateConfig.views[viewId];
            const nextViewId = _utils_app_config_utils__WEBPACK_IMPORTED_MODULE_2__.getUniqueId(appConfig, 'view');
            updatedAppConfig = updatedAppConfig
                .setIn(['views', nextViewId], templateView)
                .setIn(['views', nextViewId, 'id'], nextViewId)
                .setIn(['views', nextViewId, 'label'], _utils_app_config_utils__WEBPACK_IMPORTED_MODULE_2__.getUniqueLabel(appConfig, 'view', jimu_core__WEBPACK_IMPORTED_MODULE_0__.i18n.getIntl().formatMessage({ id: 'view' })));
            const layoutIds = [];
            Object.keys(templateView.layout || {}).forEach((sizeMode) => {
                layoutIds.push({
                    sizeMode,
                    layoutId: templateView.layout[sizeMode]
                });
            });
            for (let i = 0; i < layoutIds.length; i += 1) { // awaits in a for-loop should get executed in series
                const { sizeMode, layoutId } = layoutIds[i];
                const service = _layout_service_provider__WEBPACK_IMPORTED_MODULE_5__.LayoutServiceProvider.getService(templateConfig, layoutId);
                const result = yield service.createLayoutFromTemplate(updatedAppConfig, templateJson, layoutId, sizeMode, jimu_core__WEBPACK_IMPORTED_MODULE_0__.LayoutParentType.View, nextViewId, context);
                updatedAppConfig = result[0];
                const newLayoutId = result[1];
                updatedAppConfig = updatedAppConfig.setIn(['views', nextViewId, 'layout', sizeMode], newLayoutId);
            }
            if (context) {
                context[viewId] = nextViewId;
            }
            return [updatedAppConfig, nextViewId];
        });
    }
    duplicateEmbedLayout(appConfig, contentId, fromSizeMode, toSizeMode) {
        var _a;
        const sectionJson = (_a = appConfig.sections) === null || _a === void 0 ? void 0 : _a[contentId];
        if (!sectionJson) {
            return [appConfig, null];
        }
        let updatedAppConfig = appConfig;
        console.debug(`duplicate section ${contentId} from ${fromSizeMode} to ${toSizeMode}`);
        sectionJson.views.forEach(viewId => {
            const viewJson = updatedAppConfig.views[viewId];
            const layouts = viewJson.layout;
            if (layouts[fromSizeMode] && !layouts[toSizeMode]) {
                const service = _layout_service_provider__WEBPACK_IMPORTED_MODULE_5__.LayoutServiceProvider.getService(updatedAppConfig, layouts[fromSizeMode]);
                const result = service.duplicateLayout(updatedAppConfig, layouts[fromSizeMode], fromSizeMode, toSizeMode, null, false);
                updatedAppConfig = result[0];
                const newLayoutId = result[1];
                if (newLayoutId != null) {
                    updatedAppConfig = updatedAppConfig
                        .setIn(['layouts', newLayoutId, 'parent'], { type: jimu_core__WEBPACK_IMPORTED_MODULE_0__.LayoutParentType.View, id: viewId })
                        .setIn(['views', viewId, 'layout', toSizeMode], newLayoutId);
                }
            }
        });
        return [updatedAppConfig, null];
    }
    /**
     * Duplicate a section, only duplicate the content in target browser size mode.
     * @param appConfig
     * @param contentId id of the section
     * @param context duplicating context, keeps the relation between original id and duplicated id
     * @returns updatd app config and the id of the duplicated section
     */
    duplicate(appConfig, contentId, targetBrowserSize, context) {
        var _a;
        console.debug('dplicate section', contentId, 'in', targetBrowserSize);
        const sectionJson = (_a = appConfig.sections) === null || _a === void 0 ? void 0 : _a[contentId];
        if (!sectionJson) {
            return [appConfig, null];
        }
        if (context === null || context === void 0 ? void 0 : context[contentId]) {
            // already duplicatd in a stack of function invokations.
            // Use case: A section is shared in a page's Large and Small size mode, and the page is duplicated.
            // 1. section is duplicated in Large size mode, view layout is duplicated in Large size mode too.
            // 2. when duplicate the small size mode, the section does not need to be duplicated again, but the view layout needs to be duplicated.
            // check the duplicated section has the target browser size mode layout
            const sectionJson = appConfig.sections[context[contentId]];
            const firstView = appConfig.views[sectionJson.views[0]];
            if (firstView.layout[targetBrowserSize]) {
                return [appConfig, context[contentId]];
            }
            // duplicate embed layout in target browser size mode from original section to duplicated section
            const originSection = appConfig.sections[contentId];
            let updatedAppConfig = appConfig;
            originSection.views.forEach(viewId => {
                const viewJson = updatedAppConfig.views[viewId];
                const layoutId = viewJson.layout[targetBrowserSize];
                const service = _layout_service_provider__WEBPACK_IMPORTED_MODULE_5__.LayoutServiceProvider.getService(updatedAppConfig, layoutId);
                const dupResult = service.duplicateLayout(updatedAppConfig, layoutId, targetBrowserSize, targetBrowserSize, context, true);
                updatedAppConfig = dupResult[0];
                const newLayoutId = dupResult[1];
                if (newLayoutId != null) {
                    updatedAppConfig = updatedAppConfig
                        .setIn(['views', context[viewId], 'layout', targetBrowserSize], newLayoutId)
                        .setIn(['layouts', newLayoutId, 'parent'], { type: jimu_core__WEBPACK_IMPORTED_MODULE_0__.LayoutParentType.View, id: context[viewId] });
                }
            });
            return [updatedAppConfig, context[contentId]];
        }
        let newSectionJson = sectionJson
            .set('id', _utils_app_config_utils__WEBPACK_IMPORTED_MODULE_2__.getUniqueId(appConfig, 'section'))
            .set('label', (0,_util__WEBPACK_IMPORTED_MODULE_3__.getDuplicateLabel)(appConfig, 'section', sectionJson.label));
        let updatedAppConfig = appConfig.setIn(['sections', newSectionJson.id], newSectionJson);
        const viewIds = sectionJson.views.map((viewId) => {
            const result = this.duplicateView(updatedAppConfig, sectionJson.id, viewId, [targetBrowserSize], false, context);
            updatedAppConfig = result[0];
            const newViewId = result[1];
            updatedAppConfig = updatedAppConfig.setIn(['views', newViewId, 'parent'], newSectionJson.id);
            return newViewId;
        });
        newSectionJson = newSectionJson.set('views', viewIds);
        updatedAppConfig = updatedAppConfig.setIn(['sections', newSectionJson.id], newSectionJson);
        if (context) {
            context[contentId] = newSectionJson.id;
        }
        return [updatedAppConfig, newSectionJson.id];
    }
    removeDirectly(appConfig, contentId) {
        var _a;
        const sectionJson = (_a = appConfig.sections) === null || _a === void 0 ? void 0 : _a[contentId];
        let updatedAppConfig = appConfig;
        // remove views
        sectionJson.views.forEach((viewId) => {
            const viewJson = updatedAppConfig.views[viewId];
            const service = _layout_service_provider__WEBPACK_IMPORTED_MODULE_5__.LayoutServiceProvider.getServiceFromSizeModeLayout(updatedAppConfig, viewJson.layout);
            updatedAppConfig = service.removeSizeModeLayouts(updatedAppConfig, viewJson.layout);
            updatedAppConfig = updatedAppConfig.set('views', updatedAppConfig.views.without(viewId));
        });
        updatedAppConfig = updatedAppConfig.set('sections', updatedAppConfig.sections.without(contentId));
        return updatedAppConfig;
    }
    tryRemove(appConfig, contentId, layoutInfo, sizeMode) {
        var _a;
        const sectionJson = (_a = appConfig.sections) === null || _a === void 0 ? void 0 : _a[contentId];
        if (!sectionJson) {
            return appConfig;
        }
        console.debug(`remove section ${contentId} from ${layoutInfo.layoutId} ${layoutInfo.layoutItemId}`, sizeMode);
        // 1. current size mode passed, check other size mode
        const hasOtherModes = [jimu_core__WEBPACK_IMPORTED_MODULE_0__.BrowserSizeMode.Large, jimu_core__WEBPACK_IMPORTED_MODULE_0__.BrowserSizeMode.Medium, jimu_core__WEBPACK_IMPORTED_MODULE_0__.BrowserSizeMode.Small]
            .filter(mode => mode !== sizeMode)
            .some(mode => { var _a, _b; return ((_b = (_a = sectionJson.parent) === null || _a === void 0 ? void 0 : _a[mode]) === null || _b === void 0 ? void 0 : _b.length) > 0; });
        if (!hasOtherModes) { // can be removed
            return this.remove(appConfig, contentId);
        }
        else {
            // 1. remove parent for this size mode
            let updatedAppConfig = this.removeParent(appConfig, contentId, layoutInfo, sizeMode);
            // 2. remove embed layout of this size mode if any
            sectionJson.views.forEach((viewId) => {
                const viewJson = updatedAppConfig.views[viewId];
                if (viewJson.layout[sizeMode]) {
                    const service = _layout_service_provider__WEBPACK_IMPORTED_MODULE_5__.LayoutServiceProvider.getServiceFromSizeModeLayout(updatedAppConfig, viewJson.layout);
                    updatedAppConfig = service.removeSizeModeLayouts(updatedAppConfig, { [sizeMode]: viewJson.layout[sizeMode] });
                    updatedAppConfig = updatedAppConfig.setIn(['views', viewId, 'layout'], viewJson.layout.without(sizeMode));
                }
            });
            return updatedAppConfig;
        }
    }
    /**
     * Remove a section
     * @param appConfig
     * @param contentId id of the section
     * @returns updatd app config
     */
    remove(appConfig, contentId) {
        var _a, _b;
        const sectionJson = (_a = appConfig.sections) === null || _a === void 0 ? void 0 : _a[contentId];
        if (!sectionJson) {
            return appConfig;
        }
        console.debug('remove section', contentId);
        // remove all parent layout infos
        let updatedAppConfig = appConfig;
        Object.keys((_b = sectionJson.parent) !== null && _b !== void 0 ? _b : {}).forEach((sizeMode) => {
            if (sectionJson.parent[sizeMode].length > 0) {
                sectionJson.parent[sizeMode].forEach(item => {
                    const layoutJson = updatedAppConfig.layouts[item.layoutId];
                    if (layoutJson) {
                        const service = _layout_service_provider__WEBPACK_IMPORTED_MODULE_5__.LayoutServiceProvider.getService(updatedAppConfig, item.layoutId);
                        updatedAppConfig = service.removeItem(updatedAppConfig, item, sizeMode, false);
                    }
                });
            }
        });
        return this.removeDirectly(updatedAppConfig, contentId);
    }
    toTocNode(appConfig, contentId, parent, browserSizeMode) {
        var _a, _b;
        const { layoutId, layoutItemId } = parent;
        const result = {
            label: '',
            layoutId,
            layoutItemId,
            type: 'section',
            id: contentId,
            children: []
        };
        const sectionJson = (_a = appConfig.sections) === null || _a === void 0 ? void 0 : _a[contentId];
        if (!sectionJson) {
            return result;
        }
        result.label = sectionJson.label;
        result.icon = (_b = sectionJson.icon) !== null && _b !== void 0 ? _b : (jimu_icons_svg_outlined_brand_widget_section_svg__WEBPACK_IMPORTED_MODULE_6___default());
        result.flipIcon = true;
        sectionJson.views.forEach((viewId) => {
            var _a, _b;
            const viewJson = appConfig.views[viewId];
            const viewLayoutId = (_a = viewJson.layout[browserSizeMode]) !== null && _a !== void 0 ? _a : viewJson.layout[appConfig.mainSizeMode];
            const service = _layout_service_provider__WEBPACK_IMPORTED_MODULE_5__.LayoutServiceProvider.getService(appConfig, viewLayoutId);
            const viewChildren = service.getTocStructure(appConfig, viewLayoutId);
            result.children.push({
                label: viewJson.label,
                icon: (_b = viewJson.icon) !== null && _b !== void 0 ? _b : (jimu_icons_svg_outlined_brand_widget_section_view_svg__WEBPACK_IMPORTED_MODULE_7___default()),
                flipIcon: false,
                type: 'view',
                id: viewId,
                children: viewChildren
            });
        });
        return result;
    }
    afterMoved(appConfig, contentId, fromLayout, toLayout) {
        // no extra logic to process
        return appConfig;
    }
    afterAdded(appConfig, contentId, toLayout, fromSizeMode, toSizeMode) {
        var _a;
        const sectionJson = (_a = appConfig.sections) === null || _a === void 0 ? void 0 : _a[contentId];
        if (!sectionJson) {
            return appConfig;
        }
        let updatedAppConfig = appConfig;
        // If the view layout does not exist in the current sizeMode, we'll create a new one for them.
        sectionJson.views.forEach(vId => {
            const viewJson = updatedAppConfig.views[vId];
            if (viewJson.layout[fromSizeMode] && !viewJson.layout[toSizeMode]) {
                const layoutJson = updatedAppConfig.layouts[viewJson.layout[fromSizeMode]];
                const service = _layout_service_provider__WEBPACK_IMPORTED_MODULE_5__.LayoutServiceProvider.getService(updatedAppConfig, viewJson.layout[fromSizeMode]);
                const result = service.duplicateLayout(updatedAppConfig, layoutJson.id, fromSizeMode, toSizeMode, null);
                updatedAppConfig = result[0];
                const layoutId = result[1];
                if (layoutId != null) {
                    updatedAppConfig = updatedAppConfig
                        .setIn(['layouts', layoutId, 'parent'], { type: jimu_core__WEBPACK_IMPORTED_MODULE_0__.LayoutParentType.View, id: vId })
                        .setIn(['views', vId, 'layout', toSizeMode], layoutId);
                }
            }
        });
        return updatedAppConfig;
    }
    /**
     * Add a parent layoutInfo to this section. Occurs when this section is added to a layout item.
     * @param appConfig
     * @param contentId
     * @param layoutInfo
     * @param sizeMode
     * @returns
     */
    addParent(appConfig, contentId, layoutInfo, sizeMode) {
        var _a;
        const sectionJson = appConfig.sections[contentId];
        if (!sectionJson) {
            return appConfig;
        }
        console.debug('add parent', layoutInfo.layoutId, layoutInfo.layoutItemId, 'to section', contentId, 'in', sizeMode);
        const list = this.addParentToList(appConfig, (_a = sectionJson.parent) === null || _a === void 0 ? void 0 : _a[sizeMode], layoutInfo);
        return appConfig.setIn(['sections', contentId, 'parent', sizeMode], list);
    }
    /**
     * Remove a parent layoutInfo from this section. Occurs when this section is removed from a layout item.
     * @param appConfig
     * @param contentId id of the section
     * @param layoutInfo refer to a layout item
     * @param sizeMode the environment of this operation
     * @returns
     */
    removeParent(appConfig, contentId, layoutInfo, sizeMode) {
        const sectionJson = appConfig.sections[contentId];
        if (!sectionJson || sectionJson.parent == null) {
            return appConfig;
        }
        console.debug('remove parent', layoutInfo.layoutId, layoutInfo.layoutItemId, 'from section', contentId, 'in', sizeMode);
        if (sizeMode) {
            const parents = sectionJson.parent[sizeMode];
            const newParents = this.removeParentFromList(parents, layoutInfo);
            if (newParents.length === 0) {
                return appConfig.setIn(['sections', contentId, 'parent'], sectionJson.parent.without(sizeMode));
            }
            return appConfig.setIn(['sections', contentId, 'parent', sizeMode], newParents);
        }
        let updatedAppConfig = appConfig;
        Object.keys(sectionJson.parent).forEach((s) => {
            const parents = sectionJson.parent[s];
            const newParents = this.removeParentFromList(parents, layoutInfo);
            if (newParents.length === 0) {
                updatedAppConfig = updatedAppConfig.setIn(['sections', contentId, 'parent'], sectionJson.parent.without(s));
            }
            else {
                updatedAppConfig = updatedAppConfig.setIn(['sections', contentId, 'parent', s], newParents);
            }
        });
        return updatedAppConfig;
    }
    clearParent(appConfig, contentId) {
        const sectionJson = appConfig.sections[contentId];
        if (!sectionJson || sectionJson.parent == null) {
            return appConfig;
        }
        return appConfig.setIn(['sections', contentId], sectionJson.without('parent'));
    }
    removeSizeModeParent(appConfig, contentId, browserSizeMode) {
        var _a;
        const sectionJson = appConfig.sections[contentId];
        if (!sectionJson || ((_a = sectionJson.parent) === null || _a === void 0 ? void 0 : _a[browserSizeMode]) == null) {
            return appConfig;
        }
        return appConfig.setIn(['sections', contentId, 'parent'], sectionJson.parent.without(browserSizeMode));
    }
    /**
     * Find the parent of a section in the size mode
     * @param appConfig
     * @param contentId
     * @param sizeMode
     * @returns
     */
    findParent(appConfig, contentId, sizeMode) {
        var _a, _b;
        const sectionJson = appConfig.sections[contentId];
        if (!sectionJson.parent) {
            return null;
        }
        // browserSizeMode may be not a custom layout, it is transformed from mainSizeMode
        const sectionParent = (_a = sectionJson.parent[sizeMode]) !== null && _a !== void 0 ? _a : sectionJson.parent[appConfig.mainSizeMode];
        if (!sectionParent) {
            return null;
        }
        if (sectionParent.length === 1) {
            return sectionParent[0];
        }
        // multiple parent, go to the their common parent.
        const layoutId = sectionParent[0].layoutId;
        const layout = appConfig.layouts[layoutId];
        // the parent of the layout must be a widget, i.e. List or Card
        return _widget_service__WEBPACK_IMPORTED_MODULE_4__["default"].findParent(appConfig, (_b = layout.parent) === null || _b === void 0 ? void 0 : _b.id, sizeMode);
    }
    /**
     * Create a new section. The size mode list is used to generate the layout of the view.
     * @param appConfig
     * @param sizeModeList
     * @returns
     */
    createSection(appConfig, sizeModeList) {
        console.debug('create a blank section', sizeModeList);
        // Create a new sectionJson
        const sectionId = _utils_app_config_utils__WEBPACK_IMPORTED_MODULE_2__.getUniqueId(appConfig, 'section');
        const sectionLabel = _utils_app_config_utils__WEBPACK_IMPORTED_MODULE_2__.getUniqueLabel(appConfig, 'section', jimu_core__WEBPACK_IMPORTED_MODULE_0__.i18n.getIntl().formatMessage({ id: 'section' }));
        const sectionJson = {
            id: sectionId,
            label: sectionLabel,
            views: []
        };
        let updatedAppConfig = appConfig.setIn(['sections', sectionJson.id], sectionJson);
        const result = this.addView(updatedAppConfig, sectionId, sizeModeList);
        updatedAppConfig = result[0];
        return [updatedAppConfig, sectionId];
    }
    /**
     * Create a blank view. Only unique id and parent set.
     * @param appConfig
     * @param sectionId
     * @returns
     */
    createBlankView(appConfig, sectionId) {
        return {
            id: _utils_app_config_utils__WEBPACK_IMPORTED_MODULE_2__.getUniqueId(appConfig, 'view'),
            parent: sectionId,
            label: _utils_app_config_utils__WEBPACK_IMPORTED_MODULE_2__.getUniqueLabel(appConfig, 'view', jimu_core__WEBPACK_IMPORTED_MODULE_0__.i18n.getIntl().formatMessage({ id: 'view' }))
        };
    }
    /**
     * Generate and add a new view to the section.
     * @param appConfig
     * @param sectionId
     * @param sizeModeList
     * @returns
     */
    addView(appConfig, sectionId, sizeModeList) {
        var _a;
        const sectionJson = (_a = appConfig.sections) === null || _a === void 0 ? void 0 : _a[sectionId];
        if (!sectionJson) {
            return [appConfig, null];
        }
        // create view json
        let views;
        const viewJson = this.createBlankView(appConfig, sectionId);
        if (sectionJson.views) {
            views = sectionJson.views.asMutable();
            views.push(viewJson.id);
        }
        else {
            views = [viewJson.id];
        }
        let updatedAppConfig = appConfig
            .setIn(['views', viewJson.id], viewJson)
            .setIn(['sections', sectionId, 'views'], views);
        sizeModeList.forEach((mode) => {
            const layoutJson = {
                id: _utils_app_config_utils__WEBPACK_IMPORTED_MODULE_2__.getUniqueId(updatedAppConfig, 'layout'),
                type: jimu_core__WEBPACK_IMPORTED_MODULE_0__.LayoutType.FixedLayout,
                content: {},
                parent: { id: viewJson.id, type: jimu_core__WEBPACK_IMPORTED_MODULE_0__.LayoutParentType.View }
            };
            updatedAppConfig = updatedAppConfig
                .setIn(['layouts', layoutJson.id], layoutJson)
                .setIn(['views', viewJson.id, 'layout', mode], layoutJson.id);
        });
        return [updatedAppConfig, viewJson.id];
    }
    /**
     * Duplicate an existing view. Only duplicate the content in specified browser size modes.
     * @param appConfig
     * @param sectionId
     * @param viewId
     * @param sizeModeList
     * @param targetBrowserSize
     * @param addToSection
     * @param context
     * @returns
     */
    duplicateView(appConfig, sectionId, viewId, sizeModeList, addToSection, context) {
        if (!appConfig.views || !appConfig.views[viewId]) {
            return [appConfig, null];
        }
        console.debug('duplicate a view', viewId, 'in', sizeModeList);
        let viewJson = appConfig.views[viewId].set('id', _utils_app_config_utils__WEBPACK_IMPORTED_MODULE_2__.getUniqueId(appConfig, 'view'));
        viewJson = viewJson.set('label', (0,_util__WEBPACK_IMPORTED_MODULE_3__.getDuplicateLabel)(appConfig, 'view', viewJson.label));
        if (!addToSection) {
            viewJson = viewJson.without('parent');
        }
        // must save into appconfig before duplicate iteration, or it's content section will get same section id to itself by getUniqueId.
        let updatedAppConfig = appConfig.setIn(['views', viewJson.id], viewJson);
        const sizeModeLayouts = {};
        sizeModeList.forEach(mode => { sizeModeLayouts[mode] = viewJson.layout[mode]; });
        // duplicate view layout
        const duplicateContext = context !== null && context !== void 0 ? context : {};
        const service = _layout_service_provider__WEBPACK_IMPORTED_MODULE_5__.LayoutServiceProvider.getServiceFromSizeModeLayout(updatedAppConfig, sizeModeLayouts);
        const duplicateResult = service.duplicateSizeModeLayouts(updatedAppConfig, sizeModeLayouts, jimu_core__WEBPACK_IMPORTED_MODULE_0__.LayoutParentType.View, viewJson.id, duplicateContext);
        updatedAppConfig = duplicateResult[0];
        viewJson = viewJson.set('layout', duplicateResult[1]);
        updatedAppConfig = updatedAppConfig.setIn(['views', viewJson.id], viewJson);
        if (addToSection) {
            const views = updatedAppConfig.sections[sectionId].views.asMutable();
            const index = views.indexOf(viewId);
            views.splice(index, 1, viewId, viewJson.id);
            updatedAppConfig = updatedAppConfig.setIn(['sections', sectionId, 'views'], views);
        }
        if (context) {
            context[viewId] = viewJson.id;
        }
        return [updatedAppConfig, viewJson.id];
    }
    /**
     * Remove a view.
     * @param appConfig
     * @param sectionId
     * @param viewId
     * @returns
     */
    removeView(appConfig, sectionId, viewId) {
        var _a, _b;
        const sectionJson = (_a = appConfig.sections) === null || _a === void 0 ? void 0 : _a[sectionId];
        const viewJson = (_b = appConfig.views) === null || _b === void 0 ? void 0 : _b[viewId];
        // section should contain at least one view
        if (!viewJson || !sectionJson || sectionJson.views.length === 1 || !sectionJson.views.includes(viewId)) {
            return appConfig;
        }
        console.debug('remove a view', viewId, 'from', sectionId);
        // remove from section.views
        const views = sectionJson.views.filter((vId) => vId !== viewId);
        let updatedAppConfig = appConfig.setIn(['sections', sectionId, 'views'], views);
        // remove view layout
        const service = _layout_service_provider__WEBPACK_IMPORTED_MODULE_5__.LayoutServiceProvider.getServiceFromSizeModeLayout(updatedAppConfig, viewJson.layout);
        updatedAppConfig = service.removeSizeModeLayouts(updatedAppConfig, viewJson.layout);
        // remove from view list
        updatedAppConfig = updatedAppConfig.set('views', updatedAppConfig.views.without(viewId));
        return updatedAppConfig;
    }
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (new SectionService());


/***/ }),

/***/ "./jimu-for-builder/lib/app-config-service/template-service.ts":
/*!*********************************************************************!*\
  !*** ./jimu-for-builder/lib/app-config-service/template-service.ts ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TemplateService: () => (/* binding */ TemplateService),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");
/* harmony import */ var jimu_for_builder_templates__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! jimu-for-builder/templates */ "jimu-for-builder/templates");
/* harmony import */ var _translations_default__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../translations/default */ "./jimu-for-builder/lib/translations/default.ts");
/* harmony import */ var _layout_service_provider__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./layout-service-provider */ "./jimu-for-builder/lib/app-config-service/layout-service-provider.ts");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./util */ "./jimu-for-builder/lib/app-config-service/util.ts");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};





class TemplateService {
    createPageFromTemplate(appConfig, templateJson, contentMapping) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            let updatedAppConfig = appConfig;
            yield (0,_util__WEBPACK_IMPORTED_MODULE_4__.makeSureTemplateConfig)(templateJson);
            const templateConfig = templateJson.config;
            const pageId = Object.keys(templateConfig.pages)[0];
            const templatePage = templateConfig.pages[pageId];
            const nextPageId = jimu_core__WEBPACK_IMPORTED_MODULE_0__.appConfigUtils.getUniqueId(appConfig, 'page');
            const label = jimu_core__WEBPACK_IMPORTED_MODULE_0__.appConfigUtils.getUniqueLabel(appConfig, 'page', jimu_core__WEBPACK_IMPORTED_MODULE_0__.i18n.getIntl().formatMessage({ id: 'page' }));
            const sizeModeList = Object.keys((_a = templatePage.layout) !== null && _a !== void 0 ? _a : {});
            updatedAppConfig = updatedAppConfig.setIn(['pages', nextPageId], templatePage)
                .setIn(['pages', nextPageId, 'id'], nextPageId)
                .setIn(['pages', nextPageId, 'isVisible'], true)
                .setIn(['pages', nextPageId, 'isDefault'], false)
                .setIn(['pages', nextPageId, 'label'], label)
                .setIn(['pages', nextPageId, 'header'], false)
                .setIn(['pages', nextPageId, 'footer'], false);
            for (let i = 0; i < sizeModeList.length; i += 1) { // awaits in a for-loop should get executed in series
                const sizeMode = sizeModeList[i];
                const layoutId = templatePage.layout[sizeMode];
                const service = _layout_service_provider__WEBPACK_IMPORTED_MODULE_3__.LayoutServiceProvider.getService(templateConfig, layoutId);
                const result = yield service.createLayoutFromTemplate(updatedAppConfig, templateJson, layoutId, sizeMode, jimu_core__WEBPACK_IMPORTED_MODULE_0__.LayoutParentType.Page, nextPageId, contentMapping);
                updatedAppConfig = result[0];
                const newLayoutId = result[1];
                updatedAppConfig = updatedAppConfig
                    .setIn(['pages', nextPageId, 'layout', sizeMode], newLayoutId)
                    .setIn(['layouts', newLayoutId, 'parent'], { id: nextPageId, type: jimu_core__WEBPACK_IMPORTED_MODULE_0__.LayoutParentType.Page });
            }
            return [updatedAppConfig, nextPageId];
        });
    }
    createDialogFromTemplate(appConfig, templateJson, contentMapping) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            let updatedAppConfig = appConfig;
            yield (0,_util__WEBPACK_IMPORTED_MODULE_4__.makeSureTemplateConfig)(templateJson);
            const templateConfig = templateJson.config;
            const dlgId = Object.keys(templateConfig.dialogs)[0];
            const templateDlg = templateConfig.dialogs[dlgId];
            const nextDlgId = jimu_core__WEBPACK_IMPORTED_MODULE_0__.appConfigUtils.getUniqueId(appConfig, 'dialog');
            const label = jimu_core__WEBPACK_IMPORTED_MODULE_0__.appConfigUtils.getUniqueLabel(appConfig, 'dialog', jimu_core__WEBPACK_IMPORTED_MODULE_0__.i18n.getIntl().formatMessage({ id: 'dialog' }));
            const sizeModeList = Object.keys((_a = templateDlg.layout) !== null && _a !== void 0 ? _a : {});
            const dlgIndex = Object.keys(Object.keys(updatedAppConfig.dialogs).filter(dlgId => updatedAppConfig.dialogs[dlgId].mode === templateDlg.mode)).length;
            updatedAppConfig = updatedAppConfig.setIn(['dialogs', nextDlgId], templateDlg)
                .setIn(['dialogs', nextDlgId, 'id'], nextDlgId)
                .setIn(['dialogs', nextDlgId, 'label'], label)
                .setIn(['dialogs', nextDlgId, 'index'], dlgIndex)
                .setIn(['dialogs', nextDlgId, 'isSplash'], false)
                .setIn(['dialogs', nextDlgId, 'closeWhenClickOverlay'], templateDlg.closeWhenClickOverlay)
                .setIn(['dialogs', nextDlgId, 'sizeMode'], templateDlg.sizeMode);
            for (let i = 0; i < sizeModeList.length; i += 1) { // awaits in a for-loop should get executed in series
                const sizeMode = sizeModeList[i];
                const layoutId = templateDlg.layout[sizeMode];
                const service = _layout_service_provider__WEBPACK_IMPORTED_MODULE_3__.LayoutServiceProvider.getService(templateConfig, layoutId);
                const result = yield service.createLayoutFromTemplate(updatedAppConfig, templateJson, layoutId, sizeMode, jimu_core__WEBPACK_IMPORTED_MODULE_0__.LayoutParentType.Dialog, nextDlgId, contentMapping);
                updatedAppConfig = result[0];
                const newLayoutId = result[1];
                updatedAppConfig = updatedAppConfig
                    .setIn(['dialogs', nextDlgId, 'layout', sizeMode], newLayoutId)
                    .setIn(['layouts', newLayoutId, 'parent'], { id: nextDlgId, type: jimu_core__WEBPACK_IMPORTED_MODULE_0__.LayoutParentType.Dialog });
            }
            return [updatedAppConfig, nextDlgId];
        });
    }
    applyTemplateToHeader(appConfig, templateJson, currentSizeMode, context) {
        var _a, _b, _c, _d;
        return __awaiter(this, void 0, void 0, function* () {
            yield (0,_util__WEBPACK_IMPORTED_MODULE_4__.makeSureTemplateConfig)(templateJson);
            if (!((_a = templateJson === null || templateJson === void 0 ? void 0 : templateJson.config) === null || _a === void 0 ? void 0 : _a.header)) {
                return appConfig;
            }
            const templateHeaderLayout = templateJson.config.header.layout;
            const templateHeaderLayoutId = Object.values(templateHeaderLayout)[0];
            const headerLayout = (_b = appConfig === null || appConfig === void 0 ? void 0 : appConfig.header) === null || _b === void 0 ? void 0 : _b.layout;
            if (headerLayout) {
                const service = _layout_service_provider__WEBPACK_IMPORTED_MODULE_3__.LayoutServiceProvider.getService(templateJson.config, templateHeaderLayoutId);
                const result = yield service.replaceSizeModeLayout(appConfig, headerLayout, templateJson, (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.Immutable)((_d = (_c = templateJson === null || templateJson === void 0 ? void 0 : templateJson.config) === null || _c === void 0 ? void 0 : _c.header) === null || _d === void 0 ? void 0 : _d.layout), currentSizeMode, jimu_core__WEBPACK_IMPORTED_MODULE_0__.LayoutParentType.Header, 'header', context);
                let updatedAppConfig = result[0];
                Object.keys(result[1]).forEach(mode => {
                    const layoutId = result[1][mode];
                    updatedAppConfig = updatedAppConfig
                        .setIn(['header', 'layout', mode], layoutId)
                        .setIn(['layouts', layoutId, 'parent'], { id: 'header', type: jimu_core__WEBPACK_IMPORTED_MODULE_0__.LayoutParentType.Header });
                });
                // update other props in header template
                Object.keys(templateJson.config.header).forEach((key) => {
                    if (key !== 'layout' && templateJson.config.header[key] != null) {
                        updatedAppConfig = updatedAppConfig.setIn(['header', key], templateJson.config.header[key]);
                    }
                });
                return updatedAppConfig;
            }
            return appConfig;
        });
    }
    applyTemplateToFooter(appConfig, templateJson, currentSizeMode, context) {
        var _a, _b, _c, _d;
        return __awaiter(this, void 0, void 0, function* () {
            yield (0,_util__WEBPACK_IMPORTED_MODULE_4__.makeSureTemplateConfig)(templateJson);
            if (!((_a = templateJson === null || templateJson === void 0 ? void 0 : templateJson.config) === null || _a === void 0 ? void 0 : _a.footer)) {
                return appConfig;
            }
            const templateFooterLayout = templateJson.config.footer.layout;
            const templateFooterLayoutId = Object.values(templateFooterLayout)[0];
            const footerLayout = (_b = appConfig === null || appConfig === void 0 ? void 0 : appConfig.footer) === null || _b === void 0 ? void 0 : _b.layout;
            if (footerLayout) {
                const service = _layout_service_provider__WEBPACK_IMPORTED_MODULE_3__.LayoutServiceProvider.getService(templateJson.config, templateFooterLayoutId);
                const result = yield service.replaceSizeModeLayout(appConfig, footerLayout, templateJson, (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.Immutable)((_d = (_c = templateJson === null || templateJson === void 0 ? void 0 : templateJson.config) === null || _c === void 0 ? void 0 : _c.footer) === null || _d === void 0 ? void 0 : _d.layout), currentSizeMode, jimu_core__WEBPACK_IMPORTED_MODULE_0__.LayoutParentType.Footer, 'footer', context);
                let updatedAppConfig = result[0];
                Object.keys(result[1]).forEach(mode => {
                    const layoutId = result[1][mode];
                    updatedAppConfig = updatedAppConfig
                        .setIn(['footer', 'layout', mode], layoutId)
                        .setIn(['layouts', layoutId, 'parent'], { id: 'footer', type: jimu_core__WEBPACK_IMPORTED_MODULE_0__.LayoutParentType.Footer });
                });
                // update other props in footer template
                Object.keys(templateJson.config.footer).forEach((key) => {
                    if (key !== 'layout' && templateJson.config.footer[key] != null) {
                        updatedAppConfig = updatedAppConfig.setIn(['footer', key], templateJson.config.footer[key]);
                    }
                });
                return updatedAppConfig;
            }
            return appConfig;
        });
    }
    applyTemplateToBody(appConfig, pageId, templateJson, currentSizeMode, context) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            yield (0,_util__WEBPACK_IMPORTED_MODULE_4__.makeSureTemplateConfig)(templateJson);
            if (!templateJson.config) {
                const templateContent = yield (0,jimu_for_builder_templates__WEBPACK_IMPORTED_MODULE_1__.getTemplateConfig)(templateJson.type, templateJson.name);
                templateJson.config = templateContent;
                if (!templateJson.config) {
                    return appConfig;
                }
                else {
                    jimu_core__WEBPACK_IMPORTED_MODULE_0__.appConfigUtils.fixLayoutIds(templateJson.config);
                    jimu_core__WEBPACK_IMPORTED_MODULE_0__.utils.replaceI18nPlaceholdersInObject(templateJson.config, jimu_core__WEBPACK_IMPORTED_MODULE_0__.i18n.getIntl(), _translations_default__WEBPACK_IMPORTED_MODULE_2__["default"]);
                }
            }
            const templatePageId = Object.keys(templateJson.config.pages)[0];
            const templatePageLayout = templateJson.config.pages[templatePageId].layout;
            const templatePageLayoutId = Object.values(templatePageLayout)[0];
            const pageLayout = (_b = (_a = appConfig === null || appConfig === void 0 ? void 0 : appConfig.pages) === null || _a === void 0 ? void 0 : _a[pageId]) === null || _b === void 0 ? void 0 : _b.layout;
            if (pageLayout) {
                const service = _layout_service_provider__WEBPACK_IMPORTED_MODULE_3__.LayoutServiceProvider.getService(templateJson.config, templatePageLayoutId);
                const result = yield service.replaceSizeModeLayout(appConfig, pageLayout, templateJson, (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.Immutable)(templatePageLayout), currentSizeMode, jimu_core__WEBPACK_IMPORTED_MODULE_0__.LayoutParentType.Page, pageId, context);
                let updatedAppConfig = result[0];
                Object.keys(result[1]).forEach(mode => {
                    const layoutId = result[1][mode];
                    updatedAppConfig = updatedAppConfig
                        .setIn(['pages', pageId, 'layout', mode], layoutId)
                        .setIn(['layouts', layoutId, 'parent'], { id: pageId, type: jimu_core__WEBPACK_IMPORTED_MODULE_0__.LayoutParentType.Page });
                });
                // update other props in page template
                const props = ['mode', 'maxWidth', 'bodyBackgroundColor', 'bodyBackgroundIMage', 'bodyBackgroundPosition'];
                props.forEach((key) => {
                    const value = templateJson.config.pages[templatePageId][key];
                    if (key !== 'layout' && value != null) {
                        updatedAppConfig = updatedAppConfig.setIn(['pages', pageId, key], value);
                    }
                });
                return updatedAppConfig;
            }
            return appConfig;
        });
    }
    applyTemplateToDialog(appConfig, dialogId, templateJson, currentSizeMode, context) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            yield (0,_util__WEBPACK_IMPORTED_MODULE_4__.makeSureTemplateConfig)(templateJson);
            const templateDlgId = Object.keys(templateJson.config.dialogs)[0];
            const dialog = (_a = appConfig === null || appConfig === void 0 ? void 0 : appConfig.dialogs) === null || _a === void 0 ? void 0 : _a[dialogId];
            const dialogLayout = dialog === null || dialog === void 0 ? void 0 : dialog.layout;
            const templateDlg = (_c = (_b = templateJson === null || templateJson === void 0 ? void 0 : templateJson.config) === null || _b === void 0 ? void 0 : _b.dialogs) === null || _c === void 0 ? void 0 : _c[templateDlgId];
            if (dialogLayout && (templateDlg === null || templateDlg === void 0 ? void 0 : templateDlg.layout)) {
                const templateDlgLayout = templateDlg.layout;
                const templateDlgLayoutId = Object.values(templateDlgLayout)[0];
                const service = _layout_service_provider__WEBPACK_IMPORTED_MODULE_3__.LayoutServiceProvider.getService(templateJson.config, templateDlgLayoutId);
                const result = yield service.replaceSizeModeLayout(appConfig, dialogLayout, templateJson, (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.Immutable)(templateDlgLayout), currentSizeMode, jimu_core__WEBPACK_IMPORTED_MODULE_0__.LayoutParentType.Dialog, dialogId, context);
                let updatedAppConfig = result[0];
                const isSameMode = dialog.mode === templateDlg.mode;
                const dlgIndex = isSameMode
                    ? dialog.index
                    : Object.keys(Object.keys(updatedAppConfig.dialogs).filter(dlgId => updatedAppConfig.dialogs[dlgId].mode === templateDlg.mode)).length;
                updatedAppConfig = updatedAppConfig.setIn(['dialogs', dialogId, 'index'], dlgIndex);
                Object.keys(result[1]).forEach(mode => {
                    const layoutId = result[1][mode];
                    updatedAppConfig = updatedAppConfig
                        .setIn(['dialogs', dialogId, 'layout', mode], layoutId)
                        .setIn(['layouts', layoutId, 'parent'], { id: dialogId, type: jimu_core__WEBPACK_IMPORTED_MODULE_0__.LayoutParentType.Dialog });
                });
                // update other props in dialog template
                const props = [
                    'sizeMode', 'mode', 'overlayColor', 'dialogBackground',
                    'interactionType', 'interactionStyles', 'confirmBeforeClose', 'alwaysShowConfirmation', 'closeWhenClickOverlay'
                ];
                props.forEach((key) => {
                    updatedAppConfig = updatedAppConfig.setIn(['dialogs', dialogId, key], templateDlg[key]);
                });
                // update index for other dialogs which has same mode when current dialog's mode is changed.
                if (!isSameMode) {
                    Object.keys(updatedAppConfig.dialogs).forEach(dlgId => {
                        const dlg = updatedAppConfig.dialogs[dlgId];
                        if (dlg.mode === dialog.mode && dlg.index > dialog.index) {
                            updatedAppConfig = updatedAppConfig.setIn(['dialogs', dlg.id, 'index'], dlg.index - 1);
                        }
                    });
                }
                return updatedAppConfig;
            }
            return appConfig;
        });
    }
    applyGridTemplate(appConfig, widgetId, templateJson, currentSizeMode, context) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            yield (0,_util__WEBPACK_IMPORTED_MODULE_4__.makeSureTemplateConfig)(templateJson);
            const widgetLayout = (_b = (_a = appConfig === null || appConfig === void 0 ? void 0 : appConfig.widgets) === null || _a === void 0 ? void 0 : _a[widgetId]) === null || _b === void 0 ? void 0 : _b.layouts;
            const templateGridWidget = Object.values(templateJson.config.widgets).find(widgetJson => widgetJson.uri === 'widgets/layout/grid/');
            const name = 'DEFAULT';
            const sizeModeLayouts = widgetLayout[name];
            const service = _layout_service_provider__WEBPACK_IMPORTED_MODULE_3__.LayoutServiceProvider.getInstance().getServiceByType(jimu_core__WEBPACK_IMPORTED_MODULE_0__.LayoutType.GridLayout);
            const result = yield service.replaceSizeModeLayout(appConfig, sizeModeLayouts, templateJson, (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.Immutable)(templateGridWidget.layouts[name]), currentSizeMode, jimu_core__WEBPACK_IMPORTED_MODULE_0__.LayoutParentType.Widget, widgetId, context);
            let updatedAppConfig = result[0];
            Object.keys(result[1]).forEach(mode => {
                const layoutId = result[1][mode];
                updatedAppConfig = updatedAppConfig
                    .setIn(['widgets', widgetId, 'layouts', name, mode], layoutId)
                    .setIn(['layouts', layoutId, 'parent'], { id: widgetId, type: jimu_core__WEBPACK_IMPORTED_MODULE_0__.LayoutParentType.Widget });
            });
            return updatedAppConfig;
        });
    }
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (new TemplateService());


/***/ }),

/***/ "./jimu-for-builder/lib/app-config-service/util.ts":
/*!*********************************************************!*\
  !*** ./jimu-for-builder/lib/app-config-service/util.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getDuplicateLabel: () => (/* binding */ getDuplicateLabel),
/* harmony export */   makeSureTemplateConfig: () => (/* binding */ makeSureTemplateConfig)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");
/* harmony import */ var jimu_for_builder_templates__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! jimu-for-builder/templates */ "jimu-for-builder/templates");
/* harmony import */ var _translations_default__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../translations/default */ "./jimu-for-builder/lib/translations/default.ts");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};



function getDuplicateLabel(appConfig, type, label) {
    const [prefix] = jimu_core__WEBPACK_IMPORTED_MODULE_0__.appConfigUtils.parseUniqueLabel(label);
    let newLabel = jimu_core__WEBPACK_IMPORTED_MODULE_0__.appConfigUtils.getUniqueLabel(appConfig, type, prefix);
    if (newLabel === prefix) {
        newLabel = `${prefix} 1`;
    }
    return newLabel;
}
function makeSureTemplateConfig(templateJson) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!templateJson.config) {
            const templateContent = yield (0,jimu_for_builder_templates__WEBPACK_IMPORTED_MODULE_1__.getTemplateConfig)(templateJson.type, templateJson.name);
            jimu_core__WEBPACK_IMPORTED_MODULE_0__.appConfigUtils.fixLayoutIds(templateContent);
            jimu_core__WEBPACK_IMPORTED_MODULE_0__.utils.replaceI18nPlaceholdersInObject(templateContent, jimu_core__WEBPACK_IMPORTED_MODULE_0__.i18n.getIntl(), _translations_default__WEBPACK_IMPORTED_MODULE_2__["default"]);
            templateJson.config = templateContent;
        }
    });
}


/***/ }),

/***/ "./jimu-for-builder/lib/app-config-service/widget-resource/data-action-service.ts":
/*!****************************************************************************************!*\
  !*** ./jimu-for-builder/lib/app-config-service/widget-resource/data-action-service.ts ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DataActionService: () => (/* binding */ DataActionService),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
class DataActionService {
    removeFromWidget(appConfig, widgetId) {
        var _a;
        const widget = appConfig.widgets[widgetId];
        if (!((_a = widget.manifest) === null || _a === void 0 ? void 0 : _a.dataActions) || widget.manifest.dataActions.length === 0) {
            return appConfig;
        }
        console.debug('remove data action in', widgetId);
        const actionNames = widget.manifest.dataActions.map(dataAction => dataAction.name);
        let updatedAppConfig = appConfig;
        Object.keys(appConfig.widgets).forEach(id => {
            let widgetItem = appConfig.widgets[id];
            if (widgetItem.dataActions) {
                actionNames.forEach(actionName => {
                    var _a, _b;
                    const dataActionConfig = (_a = widgetItem.dataActions) === null || _a === void 0 ? void 0 : _a[actionName];
                    if (dataActionConfig) {
                        const newActions = (_b = dataActionConfig.actions) === null || _b === void 0 ? void 0 : _b.without(widgetId);
                        if (Object.keys(newActions || {}).length === 0) {
                            // remove this type of data action
                            widgetItem = widgetItem.set('dataActions', widgetItem.dataActions.without(actionName));
                            if (Object.keys(widgetItem.dataActions).length === 0) { // no action left in dataActions
                                widgetItem = widgetItem.without('dataActions');
                            }
                        }
                        else {
                            widgetItem = widgetItem.setIn(['dataActions', actionName, 'actions'], newActions);
                        }
                        updatedAppConfig = updatedAppConfig.setIn(['widgets', id], widgetItem);
                    }
                });
            }
        });
        return updatedAppConfig;
    }
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (new DataActionService());


/***/ }),

/***/ "./jimu-for-builder/lib/app-config-service/widget-resource/data-source-service.ts":
/*!****************************************************************************************!*\
  !*** ./jimu-for-builder/lib/app-config-service/widget-resource/data-source-service.ts ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DataSourceService: () => (/* binding */ DataSourceService),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var jimu_layouts_layout_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-layouts/layout-runtime */ "jimu-layouts/layout-runtime");
/* harmony import */ var _utils_app_config_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/app-config-utils */ "./jimu-for-builder/lib/utils/app-config-utils.ts");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util */ "./jimu-for-builder/lib/app-config-service/util.ts");



class DataSourceService {
    removeDataSource(appConfig, dataSourceId) {
        var _a, _b;
        if (!appConfig.dataSources || !appConfig.dataSources[dataSourceId]) {
            return appConfig;
        }
        console.debug('removeDataSource', dataSourceId);
        let updatedAppConfig = appConfig.set('dataSources', appConfig.dataSources.without(dataSourceId));
        Object.entries((_a = updatedAppConfig.widgets) !== null && _a !== void 0 ? _a : {}).forEach(([wId, wJson]) => {
            // update widget use data source
            if (wJson.useDataSources &&
                wJson.useDataSources.find((useDs) => this.shouldBeRemoved(useDs, dataSourceId))) {
                updatedAppConfig = updatedAppConfig.setIn(['widgets', wId, 'useDataSources'], wJson.useDataSources.filter((useDs) => !this.shouldBeRemoved(useDs, dataSourceId)));
            }
            // update widget output data source
            if (wJson.outputDataSources && wJson.outputDataSources.find((outDsId) => outDsId === dataSourceId)) {
                updatedAppConfig = updatedAppConfig.setIn(['widgets', wId, 'outputDataSources'], wJson.outputDataSources.filter((outDsId) => outDsId !== dataSourceId));
            }
        });
        // update message use data source
        Object.keys((_b = updatedAppConfig.messageConfigs) !== null && _b !== void 0 ? _b : {}).forEach((mcId) => {
            var _a;
            const mJson = updatedAppConfig.messageConfigs[mcId];
            const actions = (_a = mJson.actions) === null || _a === void 0 ? void 0 : _a.asMutable({ deep: true });
            actions === null || actions === void 0 ? void 0 : actions.forEach((action, index) => {
                var _a;
                if ((_a = action === null || action === void 0 ? void 0 : action.useDataSources) === null || _a === void 0 ? void 0 : _a.find((useDs) => this.shouldBeRemoved(useDs, dataSourceId))) {
                    actions[index].useDataSources = action.useDataSources.filter((useDs) => !this.shouldBeRemoved(useDs, dataSourceId));
                    updatedAppConfig = updatedAppConfig.setIn(['messageConfigs', mcId, 'actions'], actions);
                }
            });
        });
        // remove output data source
        Object.entries(updatedAppConfig.dataSources).forEach(([dsId, dsJson]) => {
            if (dsJson.originDataSources &&
                !!dsJson.originDataSources.find((useDs) => this.shouldBeRemoved(useDs, dataSourceId))) {
                updatedAppConfig = this.removeDataSource(updatedAppConfig, dsId);
            }
        });
        return updatedAppConfig;
    }
    duplicateDataSource(appConfig, dataSourceId) {
        if (!appConfig.dataSources || !appConfig.dataSources[dataSourceId]) {
            return null;
        }
        console.debug('duplicate data source', dataSourceId);
        const dsJson = appConfig.dataSources[dataSourceId];
        const newDsJson = dsJson.set('id', _utils_app_config_utils__WEBPACK_IMPORTED_MODULE_1__.getUniqueId(appConfig, 'dataSource'))
            .set('label', (0,_util__WEBPACK_IMPORTED_MODULE_2__.getDuplicateLabel)(appConfig, 'dataSource', dsJson.label));
        const updatedAppConfig = this.addDataSource(appConfig, newDsJson);
        return [updatedAppConfig, newDsJson];
    }
    addDataSource(appConfig, dataSourceJson) {
        if (appConfig.dataSources && appConfig.dataSources[dataSourceJson.id]) {
            return appConfig;
        }
        return appConfig.setIn(['dataSources', dataSourceJson.id], dataSourceJson);
    }
    updateAfterChangingLayout(appConfig, widgetId, toLayoutId) {
        if (!appConfig.widgets[widgetId]) {
            return appConfig;
        }
        console.debug(widgetId, 'update data source after move to', toLayoutId);
        let widgetJson = appConfig.widgets[widgetId];
        let updatedAppConfig = appConfig;
        const parentWidgetId = jimu_layouts_layout_runtime__WEBPACK_IMPORTED_MODULE_0__.searchUtils.getWidgetIdThatUseTheLayoutId(updatedAppConfig, toLayoutId);
        if (parentWidgetId) {
            const parentWidgetJson = updatedAppConfig.widgets[parentWidgetId];
            if (parentWidgetJson.manifest.properties.passDataSourceToChildren) {
                widgetJson = this.mergeUseDataSource(parentWidgetJson, widgetJson);
                updatedAppConfig = updatedAppConfig.setIn(['widgets', widgetJson.id], widgetJson);
            }
        }
        return updatedAppConfig;
    }
    mergeUseDataSource(fromWidgetJson, toWidgetJson) {
        if (!fromWidgetJson.useDataSources) {
            return toWidgetJson;
        }
        const fromUseDs = fromWidgetJson.useDataSources.map(useDs => {
            return useDs.without('fields');
        });
        if (!toWidgetJson.useDataSources) {
            return toWidgetJson.set('useDataSources', fromUseDs).set('useDataSourcesEnabled', true);
        }
        fromUseDs.forEach(useDs => {
            if (useDs.dataViewId) {
                if (!toWidgetJson.useDataSources.find(ds => ds.dataSourceId === useDs.dataSourceId && ds.dataViewId === useDs.dataViewId)) {
                    toWidgetJson = toWidgetJson.set('useDataSources', toWidgetJson.useDataSources.concat([useDs]));
                }
            }
            else {
                if (!toWidgetJson.useDataSources.find(ds => ds.dataSourceId === useDs.dataSourceId)) {
                    toWidgetJson = toWidgetJson.set('useDataSources', toWidgetJson.useDataSources.concat([useDs]));
                }
            }
        });
        return toWidgetJson.set('useDataSourcesEnabled', true);
    }
    /**
     * Remove data source which is:
     *  1. the data source to be removed, or,
     *  2. derived from the data source to be removed (data views and local data sources), or,
     *  3. descendant data source of the data source to be removed (e.g. child data source and grandchild data source), or,
     *  4. derived from the descendant data source of the data source to be removed (e.g. data views of child data source).
     */
    shouldBeRemoved(useDs, realToBeRemovedDsId) {
        return (!useDs ||
            useDs.dataSourceId === realToBeRemovedDsId ||
            useDs.mainDataSourceId === realToBeRemovedDsId ||
            useDs.rootDataSourceId === realToBeRemovedDsId);
    }
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (new DataSourceService());


/***/ }),

/***/ "./jimu-for-builder/lib/app-config-service/widget-resource/message-action-service.ts":
/*!*******************************************************************************************!*\
  !*** ./jimu-for-builder/lib/app-config-service/widget-resource/message-action-service.ts ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   MessageActionService: () => (/* binding */ MessageActionService),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");
/* harmony import */ var _utils_app_config_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/app-config-utils */ "./jimu-for-builder/lib/utils/app-config-utils.ts");


class MessageActionService {
    /**
     * Duplicate a widget's message action config. Including:
     * 1. duplicate the item that matches widgetId
     * 2. duplicate actions that matches widgetId
     * @param appConfig
     * @param widgetId
     * @param newWidgetId
     * @returns
     */
    duplicate(appConfig, widgetId, newWidgetId) {
        const messageConfigs = appConfig.messageConfigs;
        if (!messageConfigs) {
            return [appConfig, null];
        }
        console.debug('duplicate message configs from', widgetId, 'to', newWidgetId);
        let updatedAppConfig = appConfig;
        let newMcId = null;
        Object.keys(messageConfigs).forEach(mcId => {
            if (messageConfigs[mcId].widgetId === widgetId) {
                const newMJson = messageConfigs[mcId]
                    .set('id', _utils_app_config_utils__WEBPACK_IMPORTED_MODULE_1__.getUniqueId(appConfig, 'messageConfig'))
                    .set('widgetId', newWidgetId);
                newMcId = newMJson.id;
                updatedAppConfig = updatedAppConfig.setIn(['messageConfigs', newMJson.id], newMJson);
            }
            if (messageConfigs[mcId].actions) {
                const toAdd = [];
                messageConfigs[mcId].actions.forEach(actionJson => {
                    if (actionJson.widgetId === widgetId) {
                        const newActionJson = actionJson.set('widgetId', newWidgetId);
                        toAdd.push(newActionJson);
                    }
                });
                if (toAdd.length > 0) {
                    updatedAppConfig = updatedAppConfig.setIn(['messageConfigs', messageConfigs[mcId].id, 'actions'], messageConfigs[mcId].actions.concat(toAdd));
                }
            }
        });
        return [updatedAppConfig, newMcId];
    }
    /**
     * Clean the messageConfigs, remove anything that related to the widgetId
     * @param appConfig
     * @param widgetId
     * @returns
     */
    removeFromWidget(appConfig, widgetId) {
        const messageConfigs = appConfig.messageConfigs;
        if (!messageConfigs) {
            return appConfig;
        }
        console.debug('remove message and action in', widgetId);
        const messageConfigsKeys = Object.keys(messageConfigs);
        let messageConfigsWithoutWidgetId = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.Immutable)({});
        for (let i = 0; i < messageConfigsKeys.length; i++) {
            if (messageConfigs[messageConfigsKeys[i]].widgetId !== widgetId) {
                messageConfigsWithoutWidgetId = messageConfigsWithoutWidgetId.setIn([messageConfigs[messageConfigsKeys[i]].id], messageConfigs[messageConfigsKeys[i]]);
            }
        }
        const newMessageConfigsKeys = Object.keys(messageConfigsWithoutWidgetId);
        for (let i = 0; i < newMessageConfigsKeys.length; i++) {
            const newMessageConfig = messageConfigsWithoutWidgetId[newMessageConfigsKeys[i]];
            const actions = newMessageConfig.actions;
            if (actions.length === 0) {
                continue;
            }
            const actionsWithoutWidgetId = actions.filter((action) => action.widgetId !== widgetId);
            const tempActions = Object.assign([], actionsWithoutWidgetId);
            messageConfigsWithoutWidgetId = messageConfigsWithoutWidgetId.setIn([messageConfigs[newMessageConfigsKeys[i]].id, 'actions'], tempActions);
        }
        return appConfig.set('messageConfigs', messageConfigsWithoutWidgetId);
    }
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (new MessageActionService());


/***/ }),

/***/ "./jimu-for-builder/lib/app-config-service/widget-resource/usemap-service.ts":
/*!***********************************************************************************!*\
  !*** ./jimu-for-builder/lib/app-config-service/widget-resource/usemap-service.ts ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   UseMapService: () => (/* binding */ UseMapService),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
class UseMapService {
    remove(appConfig, mapWidgetId) {
        let updatedAppConfig = appConfig;
        console.debug('remove used map widgets', mapWidgetId);
        Object.keys(updatedAppConfig.widgets).forEach((widgetId) => {
            var _a;
            const widgetJson = updatedAppConfig.widgets[widgetId];
            if ((_a = widgetJson.useMapWidgetIds) === null || _a === void 0 ? void 0 : _a.includes(mapWidgetId)) {
                const useMapWidgetIds = widgetJson.useMapWidgetIds.filter((id) => id !== mapWidgetId);
                updatedAppConfig = updatedAppConfig.setIn(['widgets', widgetId, 'useMapWidgetIds'], useMapWidgetIds);
            }
        });
        return updatedAppConfig;
    }
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (new UseMapService());


/***/ }),

/***/ "./jimu-for-builder/lib/app-config-service/widget-service.ts":
/*!*******************************************************************!*\
  !*** ./jimu-for-builder/lib/app-config-service/widget-service.ts ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   WidgetService: () => (/* binding */ WidgetService),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");
/* harmony import */ var _base_content_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./base-content-service */ "./jimu-for-builder/lib/app-config-service/base-content-service.ts");
/* harmony import */ var _utils_app_config_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/app-config-utils */ "./jimu-for-builder/lib/utils/app-config-utils.ts");
/* harmony import */ var _layout_service_provider__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./layout-service-provider */ "./jimu-for-builder/lib/app-config-service/layout-service-provider.ts");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./util */ "./jimu-for-builder/lib/app-config-service/util.ts");
/* harmony import */ var _widget_resource_data_source_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./widget-resource/data-source-service */ "./jimu-for-builder/lib/app-config-service/widget-resource/data-source-service.ts");
/* harmony import */ var _widget_resource_message_action_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./widget-resource/message-action-service */ "./jimu-for-builder/lib/app-config-service/widget-resource/message-action-service.ts");
/* harmony import */ var _widget_resource_data_action_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./widget-resource/data-action-service */ "./jimu-for-builder/lib/app-config-service/widget-resource/data-action-service.ts");
/* harmony import */ var _widget_resource_usemap_service__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./widget-resource/usemap-service */ "./jimu-for-builder/lib/app-config-service/widget-resource/usemap-service.ts");
/* harmony import */ var _app_widget_manager__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../app-widget-manager */ "./jimu-for-builder/lib/app-widget-manager.tsx");
/* harmony import */ var jimu_icons_svg_outlined_brand_widget_place_holder_svg__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! jimu-icons/svg/outlined/brand/widget-place-holder.svg */ "./jimu-icons/svg/outlined/brand/widget-place-holder.svg");
/* harmony import */ var jimu_icons_svg_outlined_brand_widget_place_holder_svg__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(jimu_icons_svg_outlined_brand_widget_place_holder_svg__WEBPACK_IMPORTED_MODULE_10__);
/* harmony import */ var jimu_icons_svg_outlined_brand_widget_fixed_panel_svg__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! jimu-icons/svg/outlined/brand/widget-fixed-panel.svg */ "./jimu-icons/svg/outlined/brand/widget-fixed-panel.svg");
/* harmony import */ var jimu_icons_svg_outlined_brand_widget_fixed_panel_svg__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(jimu_icons_svg_outlined_brand_widget_fixed_panel_svg__WEBPACK_IMPORTED_MODULE_11__);
/* harmony import */ var jimu_icons_svg_outlined_brand_widget_row_svg__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! jimu-icons/svg/outlined/brand/widget-row.svg */ "./jimu-icons/svg/outlined/brand/widget-row.svg");
/* harmony import */ var jimu_icons_svg_outlined_brand_widget_row_svg__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(jimu_icons_svg_outlined_brand_widget_row_svg__WEBPACK_IMPORTED_MODULE_12__);
/* harmony import */ var jimu_icons_svg_outlined_brand_widget_column_svg__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! jimu-icons/svg/outlined/brand/widget-column.svg */ "./jimu-icons/svg/outlined/brand/widget-column.svg");
/* harmony import */ var jimu_icons_svg_outlined_brand_widget_column_svg__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(jimu_icons_svg_outlined_brand_widget_column_svg__WEBPACK_IMPORTED_MODULE_13__);
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};














function hasEmbeddedLayoutInWidget(manifest) {
    var _a, _b;
    return (manifest === null || manifest === void 0 ? void 0 : manifest.widgetType) === jimu_core__WEBPACK_IMPORTED_MODULE_0__.WidgetType.Layout || ((_b = (_a = manifest === null || manifest === void 0 ? void 0 : manifest.properties) === null || _a === void 0 ? void 0 : _a.hasEmbeddedLayout) !== null && _b !== void 0 ? _b : false);
}
function getLayoutIcon(layoutType) {
    switch (layoutType) {
        case jimu_core__WEBPACK_IMPORTED_MODULE_0__.LayoutType.FixedLayout:
            return (jimu_icons_svg_outlined_brand_widget_fixed_panel_svg__WEBPACK_IMPORTED_MODULE_11___default());
        case jimu_core__WEBPACK_IMPORTED_MODULE_0__.LayoutType.RowLayout:
            return (jimu_icons_svg_outlined_brand_widget_row_svg__WEBPACK_IMPORTED_MODULE_12___default());
        case jimu_core__WEBPACK_IMPORTED_MODULE_0__.LayoutType.ColumnLayout:
            return (jimu_icons_svg_outlined_brand_widget_column_svg__WEBPACK_IMPORTED_MODULE_13___default());
        default:
            return null;
    }
}
/**
 * Widget manages some resources, e.g. layout, data source, data action, etc.
 * Will handle all properties listed in the WidgetJson except the config
 */
class WidgetService extends _base_content_service__WEBPACK_IMPORTED_MODULE_1__.BaseContentService {
    constructor() {
        super();
        this.dsService = _widget_resource_data_source_service__WEBPACK_IMPORTED_MODULE_5__["default"];
        this.messageActionService = _widget_resource_message_action_service__WEBPACK_IMPORTED_MODULE_6__["default"];
        this.dataActionService = _widget_resource_data_action_service__WEBPACK_IMPORTED_MODULE_7__["default"];
        this.useMapService = _widget_resource_usemap_service__WEBPACK_IMPORTED_MODULE_8__["default"];
    }
    createFromTemplate(appConfig, templateJson, widgetId, sizeModeList, context, options) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            if (context[widgetId]) {
                // already duplicatd in a stack of function invokations.
                // Use case: A Card widget is shared in a page's Large and Small size mode, and the page is duplicated.
                // 1. card is duplicated in Large size mode, its embed layouts is duplicated in Large size mode too.
                // 2. when duplicate the small size mode, the card does not need to be duplicated again, but the embed layouts needs to be duplicated.
                // check the duplicated widget has the target browser size mode layout
                const widgetJson = appConfig.widgets[context[widgetId]];
                if (!widgetJson.layouts) {
                    return [appConfig, context[widgetId]];
                }
                let updatedAppConfig = appConfig;
                const originWidget = templateJson.config.widgets[widgetId];
                for (let i = 0; i < sizeModeList.length; i++) {
                    const sizeMode = sizeModeList[i];
                    // create embed layout in target browser size mode from template, only select non-empty layoutName
                    const layoutNames = Object.keys(originWidget.layouts).filter(layoutName => { var _a; return Object.keys((_a = originWidget.layouts[layoutName]) !== null && _a !== void 0 ? _a : {}).length > 0; });
                    for (let j = 0; j < layoutNames.length; j++) {
                        const name = layoutNames[j];
                        if (widgetJson.layouts[name][sizeMode]) {
                            continue;
                        }
                        const layoutId = originWidget.layouts[name][sizeMode];
                        const service = _layout_service_provider__WEBPACK_IMPORTED_MODULE_3__.LayoutServiceProvider.getService(templateJson.config, layoutId);
                        const dupResult = yield service.createLayoutFromTemplate(updatedAppConfig, templateJson, layoutId, sizeMode, jimu_core__WEBPACK_IMPORTED_MODULE_0__.LayoutParentType.Widget, context[widgetId], context);
                        updatedAppConfig = dupResult[0];
                        const newLayoutId = dupResult[1];
                        if (newLayoutId != null) {
                            updatedAppConfig = updatedAppConfig.setIn(['widgets', context[widgetId], 'layouts', name, sizeMode], newLayoutId);
                        }
                    }
                }
                return [updatedAppConfig, context[widgetId]];
            }
            const isBlock = (_a = options === null || options === void 0 ? void 0 : options.isBlock) !== null && _a !== void 0 ? _a : false;
            yield (0,_util__WEBPACK_IMPORTED_MODULE_4__.makeSureTemplateConfig)(templateJson);
            const templateConfig = templateJson.config;
            const blockWidgetId = Object.keys(templateConfig.widgets).find(wId => templateConfig.widgets[wId].uri === 'widgets/layout/row/');
            widgetId = widgetId !== null && widgetId !== void 0 ? widgetId : blockWidgetId;
            const templateWidget = templateConfig.widgets[widgetId];
            const useMapWidgetIds = [];
            const loadedJson = yield _app_widget_manager__WEBPACK_IMPORTED_MODULE_9__["default"].getInstance().handleNewWidgetJson({
                uri: templateWidget.uri
            });
            // update label, since the appConfig doesnot updated, the label will always be the same
            loadedJson.label = _utils_app_config_utils__WEBPACK_IMPORTED_MODULE_2__.getUniqueLabel(appConfig, 'widget', loadedJson.manifest ? loadedJson.manifest.i18nMessages._widgetLabel || loadedJson.manifest.label || loadedJson.manifest.name : '');
            const result = this.createWidget(appConfig, loadedJson, sizeModeList, false); // embed layout will be updated later
            let updatedAppConfig = result[0];
            const newWidgetId = result[1];
            // register extensions
            yield _app_widget_manager__WEBPACK_IMPORTED_MODULE_9__["default"].getInstance().registerManifestProps(updatedAppConfig.widgets[newWidgetId]);
            if (isBlock) {
                // update the widget label using block
                const blockLabel = jimu_core__WEBPACK_IMPORTED_MODULE_0__.i18n.getIntl().formatMessage({ id: 'block' });
                const newLabel = _utils_app_config_utils__WEBPACK_IMPORTED_MODULE_2__.getUniqueLabel(updatedAppConfig, 'widget', blockLabel);
                updatedAppConfig = updatedAppConfig.setIn(['widgets', newWidgetId, 'label'], newLabel);
            }
            context[widgetId] = newWidgetId;
            // TODO move this logic after creating page/dialog/header/footer from template
            // create map widgets that this widget depend on
            if (((_b = templateWidget.useMapWidgetIds) === null || _b === void 0 ? void 0 : _b.length) > 0) {
                for (let i = 0; i < templateWidget.useMapWidgetIds.length; i++) {
                    // contentMapping is used to avoid creating multiple instances of a widget
                    const result = yield this.createFromTemplate(updatedAppConfig, templateJson, templateWidget.useMapWidgetIds[i], sizeModeList, context, options);
                    updatedAppConfig = result[0];
                    useMapWidgetIds.push(result[1]);
                }
            }
            if (useMapWidgetIds.length > 0) {
                updatedAppConfig = updatedAppConfig.setIn(['widgets', newWidgetId, 'useMapWidgetIds'], useMapWidgetIds);
            }
            updatedAppConfig = yield this.updateWidgetByTemplate(updatedAppConfig, templateJson, newWidgetId, widgetId, sizeModeList, context);
            return [updatedAppConfig, newWidgetId];
        });
    }
    /**
     * Apply widget configs and other resources from template.
     * Used in card, bookmark which have template layout.
     * @param appConfig
     * @param templateJson
     * @param widgetId
     * @param templateWidgetId
     * @param context
     * @param settingDefaultMessages
     * @returns
     */
    updateWidgetByTemplate(appConfig, templateJson, widgetId, templateWidgetId, sizeModeList, context) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            const oldWidgetJson = (_a = appConfig === null || appConfig === void 0 ? void 0 : appConfig.widgets) === null || _a === void 0 ? void 0 : _a[widgetId];
            if (!oldWidgetJson) {
                return appConfig;
            }
            yield (0,_util__WEBPACK_IMPORTED_MODULE_4__.makeSureTemplateConfig)(templateJson);
            let updatedAppConfig = appConfig;
            // remove layouts of the old widget if any
            oldWidgetJson.layouts && Object.keys(oldWidgetJson.layouts).forEach(key => {
                const devices = oldWidgetJson.layouts[key];
                Object.keys(devices).forEach(device => {
                    const layoutId = devices[device];
                    const service = _layout_service_provider__WEBPACK_IMPORTED_MODULE_3__.LayoutServiceProvider.getService(updatedAppConfig, layoutId);
                    updatedAppConfig = service.removeLayout(updatedAppConfig, layoutId, device);
                });
            });
            updatedAppConfig = updatedAppConfig.setIn(['widgets', widgetId], oldWidgetJson.without('layouts'));
            const templateConfig = templateJson === null || templateJson === void 0 ? void 0 : templateJson.config;
            const templateWidget = (_b = templateConfig === null || templateConfig === void 0 ? void 0 : templateConfig.widgets) === null || _b === void 0 ? void 0 : _b[templateWidgetId];
            const newLayoutIds = [];
            if (templateWidget) { // It's not a empty template
                if (templateWidget.config) {
                    updatedAppConfig = updatedAppConfig.setIn(['widgets', widgetId, 'config'], templateWidget.config);
                }
                if (templateWidget.style) {
                    updatedAppConfig = updatedAppConfig.setIn(['widgets', widgetId, 'style'], templateWidget.style);
                }
                if (templateWidget.layouts) {
                    const layouts = templateWidget.layouts;
                    const layoutIds = []; // widget layouts need to be assigned
                    Object.keys(layouts).forEach((layoutName) => {
                        var _a, _b;
                        const sizeModeLayouts = layouts[layoutName] || {};
                        const layoutInManifest = ((_b = (_a = oldWidgetJson.manifest) === null || _a === void 0 ? void 0 : _a.layouts) !== null && _b !== void 0 ? _b : []).find(item => item.name === layoutName);
                        sizeModeList.forEach(sizeMode => {
                            var _a;
                            const layoutId = (_a = sizeModeLayouts[sizeMode]) !== null && _a !== void 0 ? _a : sizeModeLayouts[appConfig.mainSizeMode];
                            if (layoutId) {
                                layoutIds.push({
                                    layoutName,
                                    sizeMode,
                                    layoutId,
                                    layoutLabel: layoutInManifest === null || layoutInManifest === void 0 ? void 0 : layoutInManifest.label
                                });
                            }
                        });
                    });
                    for (let i = 0; i < layoutIds.length; i += 1) { // awaits in a for-loop should get executed in series
                        const { layoutName, sizeMode, layoutId, layoutLabel } = layoutIds[i];
                        const service = _layout_service_provider__WEBPACK_IMPORTED_MODULE_3__.LayoutServiceProvider.getService(templateConfig, layoutId);
                        const result = yield service.createLayoutFromTemplate(updatedAppConfig, templateJson, layoutId, sizeMode, jimu_core__WEBPACK_IMPORTED_MODULE_0__.LayoutParentType.Widget, oldWidgetJson.id, context);
                        updatedAppConfig = result[0];
                        const newLayoutId = result[1];
                        newLayoutIds.push(newLayoutId);
                        updatedAppConfig = updatedAppConfig
                            .setIn(['widgets', oldWidgetJson.id, 'layouts', layoutName, sizeMode], newLayoutId)
                            .setIn(['layouts', newLayoutId, 'label'], ((_c = oldWidgetJson === null || oldWidgetJson === void 0 ? void 0 : oldWidgetJson.manifest) === null || _c === void 0 ? void 0 : _c.i18nMessages[`_layout_${layoutName}_label`]) || layoutLabel || layoutName);
                    }
                }
            }
            return updatedAppConfig;
        });
    }
    /**
     * The widgetJson should have been processed by AppWidgetManager.getInstance().handleNewWidgetJson(widgetJson)
     * and it's ready to be added into appConfig
     * @param appConfig
     * @param widgetJson
     * @param sizeModeList
     * @param createEmbedLayout
     * @returns
     */
    createWidget(appConfig, widgetJson, sizeModeList, createEmbedLayout = true) {
        let updatedAppConfig = appConfig;
        const widgetId = _utils_app_config_utils__WEBPACK_IMPORTED_MODULE_2__.getUniqueId(appConfig, 'widget');
        console.debug('createWidget', widgetJson);
        updatedAppConfig = updatedAppConfig
            .setIn(['widgets', widgetId], widgetJson)
            .setIn(['widgets', widgetId, 'id'], widgetId);
        if (createEmbedLayout && hasEmbeddedLayoutInWidget(widgetJson.manifest)) {
            const layouts = widgetJson.manifest.layouts || [];
            layouts.forEach((layout) => {
                sizeModeList.forEach(sizeMode => {
                    const service = _layout_service_provider__WEBPACK_IMPORTED_MODULE_3__.LayoutServiceProvider.getInstance().getServiceByType(layout.type);
                    const result = service.createBlankLayout(updatedAppConfig, layout.type);
                    updatedAppConfig = result[0];
                    const layoutId = result[1];
                    console.debug('embed layout', layout.name, layoutId, layout.type, 'created in', sizeMode);
                    updatedAppConfig = updatedAppConfig
                        .setIn(['layouts', layoutId, 'label'], widgetJson.manifest.i18nMessages[`_layout_${layout.name}_label`] || layout.label)
                        .setIn(['layouts', layoutId, 'parent'], { id: widgetId, type: jimu_core__WEBPACK_IMPORTED_MODULE_0__.LayoutParentType.Widget })
                        .setIn(['widgets', widgetId, 'layouts', layout.name, sizeMode], layoutId);
                });
            });
        }
        return [updatedAppConfig, widgetId];
    }
    duplicateEmbedLayout(appConfig, contentId, fromSizeMode, toSizeMode) {
        var _a;
        const widgetJson = appConfig.widgets[contentId];
        if (!widgetJson || !widgetJson.layouts) {
            return [appConfig, null];
        }
        let updatedAppConfig = appConfig;
        console.debug('duplicate layout of widget', contentId);
        if (((_a = widgetJson.manifest) === null || _a === void 0 ? void 0 : _a.widgetType) === jimu_core__WEBPACK_IMPORTED_MODULE_0__.WidgetType.Layout && fromSizeMode !== toSizeMode) {
            console.debug('deuplicate layout widget and its layout from', fromSizeMode, 'to', toSizeMode);
            // a layout widget should duplicate itself instead of duplicate its layout content
            const newWidgetJson = widgetJson.set('id', _utils_app_config_utils__WEBPACK_IMPORTED_MODULE_2__.getUniqueId(appConfig, 'widget')).without('layouts').without('parent');
            updatedAppConfig = updatedAppConfig.setIn(['widgets', newWidgetJson.id], newWidgetJson);
            Object.keys(widgetJson.layouts).forEach(name => {
                const layouts = widgetJson.layouts[name];
                if (layouts[fromSizeMode]) {
                    const service = _layout_service_provider__WEBPACK_IMPORTED_MODULE_3__.LayoutServiceProvider.getService(updatedAppConfig, layouts[fromSizeMode]);
                    const result = service.duplicateLayout(updatedAppConfig, layouts[fromSizeMode], fromSizeMode, toSizeMode, null, false);
                    updatedAppConfig = result[0];
                    const newLayoutId = result[1];
                    if (newLayoutId != null) {
                        updatedAppConfig = updatedAppConfig
                            .setIn(['layouts', newLayoutId, 'parent'], { type: jimu_core__WEBPACK_IMPORTED_MODULE_0__.LayoutParentType.Widget, id: newWidgetJson.id })
                            .setIn(['widgets', newWidgetJson.id, 'layouts', name, toSizeMode], newLayoutId);
                    }
                }
            });
            return [updatedAppConfig, newWidgetJson.id];
        }
        console.debug('duplicate widget layout only from', fromSizeMode, 'to', toSizeMode);
        // a functional widget like card or list should only duplicate a size mode layout. The widget itself remains the same.
        Object.keys(widgetJson.layouts).forEach(name => {
            const layouts = widgetJson.layouts[name];
            if (layouts[fromSizeMode]) {
                const service = _layout_service_provider__WEBPACK_IMPORTED_MODULE_3__.LayoutServiceProvider.getService(updatedAppConfig, layouts[fromSizeMode]);
                if (layouts[toSizeMode]) { // remove the existing layout in target size mode
                    updatedAppConfig = service.removeLayout(updatedAppConfig, layouts[toSizeMode], toSizeMode);
                }
                const result = service.duplicateLayout(updatedAppConfig, layouts[fromSizeMode], fromSizeMode, toSizeMode, null, false);
                updatedAppConfig = result[0];
                const newLayoutId = result[1];
                if (newLayoutId != null) {
                    updatedAppConfig = updatedAppConfig
                        .setIn(['layouts', newLayoutId, 'parent'], { type: jimu_core__WEBPACK_IMPORTED_MODULE_0__.LayoutParentType.Widget, id: contentId })
                        .setIn(['widgets', contentId, 'layouts', name, toSizeMode], newLayoutId);
                }
            }
        });
        return [updatedAppConfig, null];
    }
    duplicate(appConfig, contentId, targetBrowserSize, context) {
        console.debug('duplicate a widget', contentId);
        const widgetJson = appConfig.widgets[contentId];
        if (!widgetJson) {
            return [appConfig, null];
        }
        if (context === null || context === void 0 ? void 0 : context[contentId]) {
            // already duplicatd in a stack of function invokations.
            // Use case: A Card widget is shared in a page's Large and Small size mode, and the page is duplicated.
            // 1. card is duplicated in Large size mode, its embed layouts is duplicated in Large size mode too.
            // 2. when duplicate the small size mode, the card does not need to be duplicated again, but the embed layouts needs to be duplicated.
            // check the duplicated widget has the target browser size mode layout
            const widgetJson = appConfig.widgets[context[contentId]];
            if (!widgetJson.layouts) {
                return [appConfig, context[contentId]];
            }
            const firstName = Object.keys(widgetJson.layouts)[0];
            const sizemodeLayouts = widgetJson.layouts[firstName];
            if (sizemodeLayouts[targetBrowserSize]) {
                return [appConfig, context[contentId]];
            }
            // duplicate embed layout in target browser size mode from original widget to duplicated widget
            const originWidget = appConfig.widgets[contentId];
            let updatedAppConfig = appConfig;
            Object.keys(originWidget.layouts).forEach(name => {
                const layoutId = originWidget.layouts[name][targetBrowserSize];
                const service = _layout_service_provider__WEBPACK_IMPORTED_MODULE_3__.LayoutServiceProvider.getService(updatedAppConfig, layoutId);
                const dupResult = service.duplicateLayout(updatedAppConfig, layoutId, targetBrowserSize, targetBrowserSize, context, true);
                updatedAppConfig = dupResult[0];
                const newLayoutId = dupResult[1];
                if (newLayoutId != null) {
                    updatedAppConfig = updatedAppConfig
                        .setIn(['widgets', context[contentId], 'layouts', name, targetBrowserSize], newLayoutId)
                        .setIn(['layouts', newLayoutId, 'parent'], { type: jimu_core__WEBPACK_IMPORTED_MODULE_0__.LayoutParentType.Widget, id: context[contentId] });
                }
            });
            return [updatedAppConfig, context[contentId]];
        }
        const newWJson = widgetJson.set('id', _utils_app_config_utils__WEBPACK_IMPORTED_MODULE_2__.getUniqueId(appConfig, 'widget'))
            .set('label', (0,_util__WEBPACK_IMPORTED_MODULE_4__.getDuplicateLabel)(appConfig, 'widget', widgetJson.label));
        const updatedAppConfig = this.beforeDuplicated(appConfig, contentId, newWJson, targetBrowserSize, context);
        if (context) {
            context[contentId] = newWJson.id;
        }
        return [updatedAppConfig, newWJson.id];
    }
    tryRemove(appConfig, contentId, layoutInfo, sizeMode) {
        var _a, _b, _c;
        const widgetJson = (_a = appConfig.widgets) === null || _a === void 0 ? void 0 : _a[contentId];
        if (!widgetJson) {
            return appConfig;
        }
        // 1. current size mode passed, check other size mode
        const hasOtherModes = [jimu_core__WEBPACK_IMPORTED_MODULE_0__.BrowserSizeMode.Large, jimu_core__WEBPACK_IMPORTED_MODULE_0__.BrowserSizeMode.Medium, jimu_core__WEBPACK_IMPORTED_MODULE_0__.BrowserSizeMode.Small]
            .filter(mode => mode !== sizeMode)
            .some(mode => { var _a, _b; return ((_b = (_a = widgetJson.parent) === null || _a === void 0 ? void 0 : _a[mode]) === null || _b === void 0 ? void 0 : _b.length) > 0; });
        const isMultipleParents = ((_c = (_b = widgetJson.parent) === null || _b === void 0 ? void 0 : _b[sizeMode]) === null || _c === void 0 ? void 0 : _c.length) > 1;
        if (!hasOtherModes && !isMultipleParents) { // can be removed
            return this.remove(appConfig, contentId);
        }
        else {
            // 1. remove parent for this size mode
            let updatedAppConfig = this.removeParent(appConfig, contentId, layoutInfo, sizeMode);
            // 2. remove embed layout of this size mode if any
            if (widgetJson.layouts) {
                Object.keys(widgetJson.layouts).forEach((name) => {
                    const sizeModeLayout = widgetJson.layouts[name];
                    if (sizeModeLayout[sizeMode]) {
                        const service = _layout_service_provider__WEBPACK_IMPORTED_MODULE_3__.LayoutServiceProvider.getServiceFromSizeModeLayout(updatedAppConfig, sizeModeLayout);
                        updatedAppConfig = service.removeSizeModeLayouts(updatedAppConfig, { [sizeMode]: sizeModeLayout[sizeMode] });
                        updatedAppConfig = updatedAppConfig.setIn(['widgets', contentId, 'layouts', name], sizeModeLayout.without(sizeMode));
                    }
                });
            }
            return updatedAppConfig;
        }
    }
    remove(appConfig, contentId) {
        var _a;
        const widgetJson = (_a = appConfig.widgets) === null || _a === void 0 ? void 0 : _a[contentId];
        if (!widgetJson) {
            return appConfig;
        }
        console.debug('remove a widget', contentId);
        const updatedAppConfig = this.beforeRemoved(appConfig, contentId);
        // remove the widget
        return updatedAppConfig.set('widgets', updatedAppConfig.widgets.without(contentId));
    }
    toTocNode(appConfig, contentId, parent, browserSizeMode) {
        var _a, _b, _c, _d;
        const { layoutId, layoutItemId } = parent;
        const result = {
            label: '',
            layoutId,
            layoutItemId,
            type: 'widget',
            id: contentId
        };
        const widgetJson = (_a = appConfig.widgets) === null || _a === void 0 ? void 0 : _a[contentId];
        if (!widgetJson) {
            if (contentId == null) {
                result.label = jimu_core__WEBPACK_IMPORTED_MODULE_0__.i18n.getIntl().formatMessage({ id: 'placeholder' });
                result.icon = (jimu_icons_svg_outlined_brand_widget_place_holder_svg__WEBPACK_IMPORTED_MODULE_10___default());
                result.flipIcon = false;
                result.isLabelReadOnly = true;
            }
            return result;
        }
        result.label = widgetJson.label;
        result.icon = widgetJson.icon;
        result.flipIcon = (_d = (_c = (_b = widgetJson.manifest) === null || _b === void 0 ? void 0 : _b.properties) === null || _c === void 0 ? void 0 : _c.flipIcon) !== null && _d !== void 0 ? _d : false;
        if (!(widgetJson === null || widgetJson === void 0 ? void 0 : widgetJson.layouts)) {
            return result;
        }
        const children = [];
        const isSolo = Object.keys(widgetJson.layouts).length === 1;
        Object.keys(widgetJson.layouts).forEach((name) => {
            var _a, _b, _c, _d;
            const layoutId = (_a = widgetJson.layouts[name][browserSizeMode]) !== null && _a !== void 0 ? _a : widgetJson.layouts[name][appConfig.mainSizeMode];
            const service = _layout_service_provider__WEBPACK_IMPORTED_MODULE_3__.LayoutServiceProvider.getService(appConfig, layoutId);
            const embedChildren = service.getTocStructure(appConfig, layoutId);
            if (embedChildren.length > 0) {
                const layoutType = appConfig.layouts[layoutId].type;
                const manifestLayout = (_c = (_b = widgetJson.manifest) === null || _b === void 0 ? void 0 : _b.layouts) === null || _c === void 0 ? void 0 : _c.find(item => item.name === name);
                children.push({
                    label: isSolo ? '' : (manifestLayout != null ? ((_d = widgetJson.manifest.i18nMessages[`_layout_${name}_label`]) !== null && _d !== void 0 ? _d : manifestLayout.label) : name),
                    icon: getLayoutIcon(layoutType),
                    type: 'layout',
                    id: layoutId,
                    isLabelReadOnly: true,
                    children: embedChildren
                });
            }
        });
        if (children.length === 1) {
            result.children = children[0].children;
        }
        else if (children.length > 1) {
            result.children = children;
        }
        return result;
    }
    afterMoved(appConfig, contentId, fromLayout, toLayout) {
        const widgetJson = appConfig.widgets[contentId];
        if (!widgetJson) {
            return appConfig;
        }
        console.debug('update widget', contentId, 'ds after moved to a new layout', toLayout);
        return this.dsService.updateAfterChangingLayout(appConfig, contentId, toLayout);
    }
    /**
     * 1. add new widget
     * 2. add pending item back to the layout, may be from different size mode
     * @param appConfig
     * @param contentId
     * @param toLayout
     * @param fromSizeMode
     * @param toSizeMode
     * @returns
     */
    afterAdded(appConfig, contentId, toLayout, fromSizeMode, toSizeMode) {
        var _a;
        const widgetJson = appConfig.widgets[contentId];
        if (!widgetJson) {
            return appConfig;
        }
        console.debug('after added, update widget', contentId, 'added to a new layout', toLayout, 'from', fromSizeMode, 'to', toSizeMode);
        let updatedAppConfig = this.dsService.updateAfterChangingLayout(appConfig, contentId, toLayout);
        // If the widget has embed layout, and the layout does not exist in the current sizeMode, we'll create a new one for them.
        Object.keys((_a = widgetJson.layouts) !== null && _a !== void 0 ? _a : {}).forEach(layoutName => {
            const sizeModeLayouts = widgetJson.layouts[layoutName];
            if (sizeModeLayouts[fromSizeMode] && !sizeModeLayouts[toSizeMode]) {
                const layoutJson = updatedAppConfig.layouts[sizeModeLayouts[fromSizeMode]];
                const service = _layout_service_provider__WEBPACK_IMPORTED_MODULE_3__.LayoutServiceProvider.getService(updatedAppConfig, sizeModeLayouts[fromSizeMode]);
                const result = service.duplicateLayout(updatedAppConfig, layoutJson.id, fromSizeMode, toSizeMode, null);
                updatedAppConfig = result[0];
                const layoutId = result[1];
                if (layoutId != null) {
                    updatedAppConfig = updatedAppConfig
                        .setIn(['layouts', layoutId, 'parent'], { type: jimu_core__WEBPACK_IMPORTED_MODULE_0__.LayoutParentType.Widget, id: contentId })
                        .setIn(['widgets', contentId, 'layouts', layoutName, toSizeMode], layoutId);
                }
            }
        });
        return updatedAppConfig;
    }
    /**
     * Clear resource related to this widget
     * @param appConfig
     * @param contentId
     */
    beforeRemoved(appConfig, contentId) {
        var _a, _b, _c;
        const widgetJson = appConfig.widgets[contentId];
        let updatedAppConfig = appConfig;
        console.debug('clear widget resource before removing', contentId);
        // remove all parent layout infos
        Object.keys((_a = widgetJson.parent) !== null && _a !== void 0 ? _a : {}).forEach((sizeMode) => {
            if (widgetJson.parent[sizeMode].length > 0) {
                widgetJson.parent[sizeMode].forEach(item => {
                    const layoutJson = updatedAppConfig.layouts[item.layoutId];
                    if (layoutJson) {
                        const service = _layout_service_provider__WEBPACK_IMPORTED_MODULE_3__.LayoutServiceProvider.getService(updatedAppConfig, item.layoutId);
                        updatedAppConfig = service.removeItem(updatedAppConfig, item, sizeMode, false);
                    }
                });
            }
        });
        // data source
        if (widgetJson.outputDataSources) {
            widgetJson.outputDataSources.forEach((odsId) => {
                updatedAppConfig = this.dsService.removeDataSource(updatedAppConfig, odsId);
            });
        }
        // message/action
        updatedAppConfig = this.messageActionService.removeFromWidget(updatedAppConfig, contentId);
        // remove data action of this widget if any
        updatedAppConfig = this.dataActionService.removeFromWidget(updatedAppConfig, contentId);
        // remvoe layout if any
        if (widgetJson.layouts) {
            Object.keys(widgetJson.layouts).forEach((name) => {
                const sizeModeLayout = widgetJson.layouts[name];
                const service = _layout_service_provider__WEBPACK_IMPORTED_MODULE_3__.LayoutServiceProvider.getServiceFromSizeModeLayout(updatedAppConfig, sizeModeLayout);
                updatedAppConfig = service.removeSizeModeLayouts(updatedAppConfig, sizeModeLayout);
            });
        }
        // TODO should be handled before remove operation starts
        // remove useMapWidgetIds if the removed widget is map
        if ((_c = (_b = widgetJson.manifest) === null || _b === void 0 ? void 0 : _b.properties) === null || _c === void 0 ? void 0 : _c.canCreateMapView) {
            updatedAppConfig = this.useMapService.remove(updatedAppConfig, widgetJson.id);
        }
        // Do other clean actions before removing the widget
        const ext = this.findAppConfigOperationExtension(contentId);
        if (ext) {
            updatedAppConfig = ext.widgetWillRemove(updatedAppConfig);
        }
        return updatedAppConfig;
    }
    beforeDuplicated(appConfig, contentId, newWidgetJson, toSizeMode, context) {
        var _a, _b, _c;
        let updatedAppConfig = appConfig;
        console.debug('process before duplicate widget', contentId);
        // duplicate layouts in the widget
        if (hasEmbeddedLayoutInWidget(newWidgetJson.manifest)) {
            // add into appconfig first for generate a different unique id of it's sub widgets
            updatedAppConfig = updatedAppConfig.setIn(['widgets', newWidgetJson.id], newWidgetJson);
            Object.keys((_a = newWidgetJson.layouts) !== null && _a !== void 0 ? _a : {}).forEach(key => {
                var _a;
                const layouts = newWidgetJson.layouts[key];
                // should have duplicate context in duplicating size mode layout
                const duplicateContext = context !== null && context !== void 0 ? context : {};
                const service = _layout_service_provider__WEBPACK_IMPORTED_MODULE_3__.LayoutServiceProvider.getServiceFromSizeModeLayout(updatedAppConfig, layouts);
                const duplicateResult = service.duplicateSizeModeLayouts(updatedAppConfig, { [toSizeMode]: (_a = layouts[toSizeMode]) !== null && _a !== void 0 ? _a : layouts[appConfig.mainSizeMode] }, // only duplicate the target size mode
                jimu_core__WEBPACK_IMPORTED_MODULE_0__.LayoutParentType.Widget, newWidgetJson.id, duplicateContext);
                updatedAppConfig = duplicateResult[0];
                newWidgetJson = newWidgetJson.setIn(['layouts', key], duplicateResult[1]);
            });
        }
        // duplicate message/actions
        updatedAppConfig = this.messageActionService.duplicate(updatedAppConfig, contentId, newWidgetJson.id)[0];
        // duplicate output ds
        if (((_b = newWidgetJson.outputDataSources) === null || _b === void 0 ? void 0 : _b.length) > 0) {
            const newDsIds = newWidgetJson.outputDataSources.map(dsId => {
                const result = this.dsService.duplicateDataSource(updatedAppConfig, dsId);
                updatedAppConfig = result[0];
                const newDsJson = result[1];
                return newDsJson.id;
            });
            newWidgetJson = newWidgetJson.set('outputDataSources', newDsIds);
            // update datasource id used in the widget config
            // TODO improve this logic, move into widget that has lifecycle operations
            let strWConfig = JSON.stringify(newWidgetJson.config);
            newDsIds.forEach((id, index) => {
                const oldId = newWidgetJson.outputDataSources[index];
                const re = new RegExp(oldId, 'g');
                strWConfig = strWConfig.replace(re, id);
            });
            try {
                const newWConfig = JSON.parse(strWConfig);
                newWidgetJson = newWidgetJson.set('config', newWConfig);
            }
            catch (e) {
                console.error('JSON format error', newWidgetJson);
            }
        }
        // TODO should be handled after duplication operation finished
        // handle useMapWidgetIds
        if (((_c = newWidgetJson.useMapWidgetIds) === null || _c === void 0 ? void 0 : _c.length) > 0) {
            newWidgetJson.useMapWidgetIds.forEach((mapWidgetId, i) => {
                if (context === null || context === void 0 ? void 0 : context[mapWidgetId]) {
                    newWidgetJson = newWidgetJson.setIn(['useMapWidgetIds', i], context[mapWidgetId]);
                }
            });
        }
        updatedAppConfig = updatedAppConfig.setIn(['widgets', newWidgetJson.id], newWidgetJson);
        return updatedAppConfig;
    }
    /**
     * Invoke the afterWidgetCopied when a size mode layouts is duplicate.
     * @param destAppConfig
     * @param context
     */
    afterBatchCopied(destAppConfig, sourceAppConfig, context) {
        let updatedAppConfig = destAppConfig;
        Object.keys(context !== null && context !== void 0 ? context : {}).forEach(contentId => {
            const destWidgetId = context[contentId];
            if (sourceAppConfig.widgets[contentId] && updatedAppConfig.widgets[destWidgetId]) { // the content is a widget
                let ext;
                if (destAppConfig === sourceAppConfig) {
                    // operation in the same environment, extension should have been registered by the contentId
                    ext = this.findAppConfigOperationExtension(contentId);
                    if (ext) {
                        updatedAppConfig = ext.afterWidgetCopied(contentId, sourceAppConfig, destWidgetId, updatedAppConfig, context);
                    }
                }
                else {
                    ext = this.findAppConfigOperationExtension(destWidgetId); // the copied widget is registered in the extension
                    if (ext) {
                        updatedAppConfig = ext.afterWidgetCopied(contentId, sourceAppConfig, destWidgetId, updatedAppConfig, context);
                    }
                }
            }
        });
        return updatedAppConfig;
    }
    addParent(appConfig, contentId, layoutInfo, sizeMode) {
        var _a;
        const widgetJson = appConfig.widgets[contentId];
        if (!widgetJson) {
            return appConfig;
        }
        console.debug('add parent', layoutInfo.layoutId, layoutInfo.layoutItemId, 'to widget', contentId, 'in', sizeMode);
        const list = this.addParentToList(appConfig, (_a = widgetJson.parent) === null || _a === void 0 ? void 0 : _a[sizeMode], layoutInfo);
        return appConfig.setIn(['widgets', contentId, 'parent', sizeMode], list);
    }
    removeParent(appConfig, contentId, layoutInfo, sizeMode) {
        const widgetJson = appConfig.widgets[contentId];
        if (!widgetJson || widgetJson.parent == null) {
            return appConfig;
        }
        console.debug('remove parent', layoutInfo.layoutId, layoutInfo.layoutItemId, 'from widget', contentId, 'in', sizeMode);
        if (sizeMode) {
            const parents = widgetJson.parent[sizeMode];
            const newParents = this.removeParentFromList(parents, layoutInfo);
            if (newParents.length === 0) {
                return appConfig.setIn(['widgets', contentId, 'parent'], widgetJson.parent.without(sizeMode));
            }
            return appConfig.setIn(['widgets', contentId, 'parent', sizeMode], newParents);
        }
        let updatedAppConfig = appConfig;
        Object.keys(widgetJson.parent).forEach((s) => {
            const parents = widgetJson.parent[s];
            const newParents = this.removeParentFromList(parents, layoutInfo);
            if (newParents.length === 0) {
                updatedAppConfig = updatedAppConfig.setIn(['widgets', contentId, 'parent'], widgetJson.parent.without(s));
            }
            else {
                updatedAppConfig = updatedAppConfig.setIn(['widgets', contentId, 'parent', s], newParents);
            }
        });
        return updatedAppConfig;
    }
    clearParent(appConfig, contentId) {
        const widgetJson = appConfig.widgets[contentId];
        if (!widgetJson || widgetJson.parent == null) {
            return appConfig;
        }
        return appConfig.setIn(['widgets', contentId], widgetJson.without('parent'));
    }
    removeSizeModeParent(appConfig, contentId, browserSizeMode) {
        var _a;
        const widgetJson = appConfig.widgets[contentId];
        if (!widgetJson || ((_a = widgetJson.parent) === null || _a === void 0 ? void 0 : _a[browserSizeMode]) == null) {
            return appConfig;
        }
        return appConfig.setIn(['widgets', contentId, 'parent'], widgetJson.parent.without(browserSizeMode));
    }
    findParent(appConfig, contentId, browserSizeMode) {
        var _a, _b;
        const widgetJson = appConfig.widgets[contentId];
        if (!widgetJson || !widgetJson.parent) {
            return null;
        }
        // browserSizeMode may be not a custom layout, it is transformed from mainSizeMode
        const widgetParent = (_a = widgetJson.parent[browserSizeMode]) !== null && _a !== void 0 ? _a : widgetJson.parent[appConfig.mainSizeMode];
        if (!widgetParent) {
            return null;
        }
        if (widgetParent.length === 1) {
            return widgetParent[0];
        }
        // multiple parent, go to the their common parent.
        const layoutId = widgetParent[0].layoutId;
        const layout = appConfig.layouts[layoutId];
        // the parent of the layout must be a widget, i.e. List or Card
        return this.findParent(appConfig, (_b = layout.parent) === null || _b === void 0 ? void 0 : _b.id, browserSizeMode);
    }
    findAppConfigOperationExtension(widgetId) {
        // should use the extensionManager of the app
        let extensionManager;
        if (window.jimuConfig.isBuilder) {
            extensionManager = window._appWindow._extensionManager;
        }
        else {
            extensionManager = window._extensionManager;
        }
        const exts = extensionManager === null || extensionManager === void 0 ? void 0 : extensionManager.getExtensions(`${jimu_core__WEBPACK_IMPORTED_MODULE_0__.extensionSpec.ExtensionPoints.AppConfigOperations}`);
        return exts === null || exts === void 0 ? void 0 : exts.find((item) => item.widgetId === widgetId);
    }
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (new WidgetService());


/***/ }),

/***/ "./jimu-for-builder/lib/app-data-action-manager.tsx":
/*!**********************************************************!*\
  !*** ./jimu-for-builder/lib/app-data-action-manager.tsx ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ AppDataActionManager)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");
/* harmony import */ var _app_config_actions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./app-config-actions */ "./jimu-for-builder/lib/app-config-actions.ts");
/* harmony import */ var _widget_setting_manager__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./widget-setting-manager */ "./jimu-for-builder/lib/widget-setting-manager.tsx");



const { getTranslatedLocale: getSupportedLocale } = jimu_core__WEBPACK_IMPORTED_MODULE_0__.i18n;
class AppDataActionManager {
    constructor() {
        this.actionSettings = {};
    }
    static getInstance() {
        if (!AppDataActionManager.instance) {
            AppDataActionManager.instance = new AppDataActionManager();
        }
        return AppDataActionManager.instance;
    }
    /**
     * Update this.actionSettings if there is new widget with data action is added.
     */
    loadAllActionSettingClasses() {
        var _a;
        const appConfigAction = (0,_app_config_actions__WEBPACK_IMPORTED_MODULE_1__.getAppConfigAction)();
        Object.keys(((_a = appConfigAction.appConfig) === null || _a === void 0 ? void 0 : _a.widgets) || {}).forEach(widgetId => {
            var _a;
            const widget = appConfigAction.appConfig.widgets[widgetId];
            const actionJsons = [].concat((_a = widget.manifest) === null || _a === void 0 ? void 0 : _a.dataActions).filter(action => action);
            if (actionJsons.length > 0) {
                actionJsons.forEach(action => {
                    if (action.settingUri) {
                        const uri = `${widget.uri}dist/${action.settingUri}`;
                        if (!this.actionSettings[uri]) {
                            this.actionSettings[uri] = jimu_core__WEBPACK_IMPORTED_MODULE_0__.moduleLoader
                                .loadModule(uri, ['default'])
                                .then(ActionClass => {
                                const rawClazz = ActionClass.default;
                                return _widget_setting_manager__WEBPACK_IMPORTED_MODULE_2__["default"].getInstance().loadI18nMessagesForSetting(widget.uri).then(i18nMessages => {
                                    return this.injectActionSettingProps(rawClazz, i18nMessages, widget.id);
                                });
                            });
                        }
                    }
                });
            }
        });
        return this.actionSettings;
    }
    injectActionSettingProps(WrappedComponent, i18nMessages, actionWidgetId) {
        const IntlInjectedComponent = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.injectIntl)(WrappedComponent);
        const actionWidgetJson = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().getState().appStateInBuilder.appConfig.widgets[actionWidgetId];
        let widgetName = null;
        if (actionWidgetId && actionWidgetJson) {
            widgetName = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().getState().appStateInBuilder.appConfig.widgets[actionWidgetId].manifest.name;
        }
        else {
            widgetName = 'Framework';
        }
        class WidgetWrapper extends jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.PureComponent {
            render() {
                const injectProps = {
                    messages: i18nMessages
                };
                // merge in the app's messages before creating the context so that
                // any jimu-ui components in this component can have access to their own messages
                // NOTE: messages with the same key will be overridden, so please make sure widget do not use the same key with jimu.
                const appI18nMessages = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().getState().appI18nMessages;
                let locale = null;
                if (actionWidgetId && actionWidgetJson) {
                    locale = getSupportedLocale((0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().getState().appContext.locale, actionWidgetJson.manifest.translatedLocales.asMutable());
                    if (!locale) {
                        // widget does not support user's locale, use the default locale
                        locale = actionWidgetJson.manifest.translatedLocales && actionWidgetJson.manifest.translatedLocales[0];
                    }
                    if (!locale) {
                        locale = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().getState().appContext.locale;
                    }
                }
                else {
                    locale = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().getState().appContext.locale;
                }
                const allMessages = Object.assign({}, i18nMessages, appI18nMessages);
                return (jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement(jimu_core__WEBPACK_IMPORTED_MODULE_0__.IntlProvider, { locale: locale, messages: allMessages },
                    jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement(IntlInjectedComponent, Object.assign({}, this.props, injectProps))));
            }
        }
        WidgetWrapper.displayName = `ActionSettingWrapper(${widgetName})`;
        // copy static properites
        for (const p in WrappedComponent) {
            if (!WidgetWrapper[p]) {
                WidgetWrapper[p] = WrappedComponent[p];
            }
        }
        return WidgetWrapper;
    }
}


/***/ }),

/***/ "./jimu-for-builder/lib/app-message-manager.tsx":
/*!******************************************************!*\
  !*** ./jimu-for-builder/lib/app-message-manager.tsx ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ AppMessageManager)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");
/* harmony import */ var _widget_setting_manager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./widget-setting-manager */ "./jimu-for-builder/lib/widget-setting-manager.tsx");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};


const { getTranslatedLocale: getSupportedLocale } = jimu_core__WEBPACK_IMPORTED_MODULE_0__.i18n;
class AppMessageManager {
    constructor() {
        this.actionSettings = {};
    }
    static getInstance() {
        if (!AppMessageManager.instance) {
            AppMessageManager.instance = new AppMessageManager();
        }
        return AppMessageManager.instance;
    }
    getAllActions() {
        const appMM = this.getAppMessageManager();
        if (appMM) {
            return appMM.getActions();
        }
        else {
            return [];
        }
    }
    getAction(widgetId, actionName) {
        const appMM = this.getAppMessageManager();
        if (appMM) {
            return appMM.getAction(widgetId, actionName);
        }
        else {
            return null;
        }
    }
    getAppMessageManager() {
        if (window.jimuConfig.isBuilder) {
            if (window._appWindow._messageManager) {
                return window._appWindow._messageManager;
            }
        }
        else if (window._messageManager) {
            return window._messageManager;
        }
        return null;
    }
    /**
     * Return the action setting component uri, null means no setting.
     */
    getActionSettingComponentUri(action, messageType, messageWidgetId) {
        if (action.getSettingComponentUri) {
            return action.getSettingComponentUri(messageType, messageWidgetId);
        }
        else {
            if (action.widgetId) {
                const widgetJson = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().getState().appStateInBuilder.appConfig.widgets[action.widgetId];
                const actionInManifest = widgetJson.manifest.messageActions.find(a => a.name === action.name);
                if (!actionInManifest) {
                    return null;
                }
                else {
                    return actionInManifest.settingUri;
                }
            }
            else {
                return null;
            }
        }
    }
    getFilteredActions(messageType, messageWidgetId) {
        if (window._appWindow._messageManager) {
            const actions = window._appWindow._messageManager.getActions();
            const filteredActions = [];
            const messageDescription = {
                messageType,
                widgetId: messageWidgetId
            };
            const state = window.jimuConfig.isBuilder ? (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().getState().appStateInBuilder : (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().getState();
            const widgetJson = state.appConfig.widgets[messageWidgetId];
            const pm = widgetJson.manifest.publishMessages.find(pm => {
                if (typeof pm === 'string') {
                    return pm === messageType;
                }
                else {
                    return pm.messageType === messageType;
                }
            });
            if (pm && typeof pm !== 'string') {
                messageDescription.messageCarryData = pm.messageCarryData;
            }
            for (let i = 0; i < actions.length; i++) {
                if (actions[i].filterMessageDescription(messageDescription)) {
                    filteredActions.push(actions[i]);
                }
            }
            return filteredActions;
        }
        else {
            return [];
        }
    }
    getConvertedSettingUri(actionId, settingUri) {
        const allActions = this.getAllActions();
        let resultUri = null;
        for (let i = 0; i < allActions.length; i++) {
            if (actionId.includes(allActions[i].id)) {
                const actionWidgetId = allActions[i].widgetId;
                if (actionWidgetId) {
                    // the action target is widget
                    const widgetJson = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().getState().appStateInBuilder.appConfig.widgets[actionWidgetId];
                    const messageActions = widgetJson.manifest.messageActions;
                    let actionProperty = null;
                    if (messageActions) {
                        for (let k = 0; k < messageActions.length; k++) {
                            if (messageActions[k].name === allActions[i].name) {
                                actionProperty = messageActions[k];
                            }
                        }
                    }
                    if (actionProperty && settingUri) {
                        resultUri = widgetJson.uri + 'dist/' + settingUri;
                        return resultUri;
                    }
                    else {
                        return null;
                    }
                }
                else {
                    // the action target is framework
                    return settingUri;
                }
            }
        }
        return resultUri;
    }
    loadActionSettingClass(actionJson, actionSettingUri) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const uri = actionSettingUri ? this.getConvertedSettingUri(actionJson.actionId, actionSettingUri) : null;
            if (!uri) {
                Promise.resolve(null);
            }
            if (!this.actionSettings[uri]) {
                this.actionSettings[uri] = {};
            }
            if ((_a = this.actionSettings[uri]) === null || _a === void 0 ? void 0 : _a.clazzPromise) {
                return yield this.actionSettings[uri].clazzPromise;
            }
            const actionWidgetId = actionJson.widgetId;
            const actionWidgetJson = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().getState().appStateInBuilder.appConfig.widgets[actionWidgetId];
            this.actionSettings[uri].clazzPromise = this.loadRawSettingClass(uri).then((rawClazz) => __awaiter(this, void 0, void 0, function* () {
                return _widget_setting_manager__WEBPACK_IMPORTED_MODULE_1__["default"].getInstance().loadI18nMessagesForSetting(actionWidgetJson && actionWidgetJson.uri).then(i18nMessages => {
                    return this.injectActionSettingProps(rawClazz, i18nMessages, actionWidgetJson && actionWidgetJson.id);
                });
            })).then((wrapedClass) => {
                this.actionSettings[uri].clazz = wrapedClass;
                return wrapedClass;
            });
            return this.actionSettings[uri].clazzPromise;
        });
    }
    loadRawSettingClass(uri) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.actionSettings[uri].rawClazzPromise) {
                return yield this.actionSettings[uri].rawClazzPromise;
            }
            this.actionSettings[uri].rawClazzPromise = jimu_core__WEBPACK_IMPORTED_MODULE_0__.moduleLoader.loadModule(uri).then(rawClazz => {
                rawClazz = rawClazz.default ? rawClazz.default : rawClazz;
                this.actionSettings[uri].rawClazz = rawClazz;
                return this.actionSettings[uri].rawClazz;
            });
            return this.actionSettings[uri].rawClazzPromise;
        });
    }
    injectActionSettingProps(WrappedComponent, i18nMessages, actionWidgetId) {
        const IntlInjectedComponent = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.injectIntl)(WrappedComponent);
        const actionWidgetJson = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().getState().appStateInBuilder.appConfig.widgets[actionWidgetId];
        let widgetName = null;
        if (actionWidgetId && actionWidgetJson) {
            widgetName = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().getState().appStateInBuilder.appConfig.widgets[actionWidgetId].manifest.name;
        }
        else {
            widgetName = 'Framework';
        }
        class WidgetWrapper extends jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.PureComponent {
            render() {
                const injectProps = {
                    messages: i18nMessages
                };
                // merge in the app's messages before creating the context so that
                // any jimu-ui components in this component can have access to their own messages
                // NOTE: messages with the same key will be overridden, so please make sure widget do not use the same key with jimu.
                const appI18nMessages = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().getState().appI18nMessages;
                let locale = null;
                if (actionWidgetId && actionWidgetJson) {
                    locale = getSupportedLocale((0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().getState().appContext.locale, actionWidgetJson.manifest.translatedLocales.asMutable());
                    if (!locale) {
                        // widget does not support user's locale, use the default locale
                        locale = actionWidgetJson.manifest.translatedLocales && actionWidgetJson.manifest.translatedLocales[0];
                    }
                    if (!locale) {
                        locale = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().getState().appContext.locale;
                    }
                }
                else {
                    locale = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().getState().appContext.locale;
                }
                const allMessages = Object.assign({}, i18nMessages, appI18nMessages);
                return (jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement(jimu_core__WEBPACK_IMPORTED_MODULE_0__.IntlProvider, { locale: locale, messages: allMessages },
                    jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement(IntlInjectedComponent, Object.assign({}, this.props, injectProps))));
            }
        }
        WidgetWrapper.displayName = `ActionSettingWrapper(${widgetName})`;
        // copy static properites
        for (const p in WrappedComponent) {
            if (!WidgetWrapper[p]) {
                WidgetWrapper[p] = WrappedComponent[p];
            }
        }
        return WidgetWrapper;
    }
    registerActionRawSettingClass(uri, rawSettingClass) {
        if (!this.actionSettings[uri]) {
            this.actionSettings[uri] = {};
        }
        this.actionSettings[uri].rawClazz = rawSettingClass;
        this.actionSettings[uri].rawClazzPromise = Promise.resolve(rawSettingClass);
        this.actionSettings[uri].settingI18nMessages = {};
        this.actionSettings[uri].settingI18nMessagesPromise = Promise.resolve({});
    }
    getActionRawSettingClass(uri) {
        return this.actionSettings[uri].rawClazz;
    }
}


/***/ }),

/***/ "./jimu-for-builder/lib/app-resource-manager.tsx":
/*!*******************************************************!*\
  !*** ./jimu-for-builder/lib/app-resource-manager.tsx ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AppResourceFilePath: () => (/* binding */ AppResourceFilePath),
/* harmony export */   AppResourceManager: () => (/* binding */ AppResourceManager)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");
/* harmony import */ var _builder_state_resource_extension__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./builder-state-resource-extension */ "./jimu-for-builder/lib/builder-state-resource-extension.ts");
/* harmony import */ var _service_app_service_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./service/app-service/util */ "./jimu-for-builder/lib/service/app-service/util.ts");
/* harmony import */ var _service_rest_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./service/rest-service */ "./jimu-for-builder/lib/service/rest-service.tsx");
/* harmony import */ var _utils_app_config_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils/app-config-utils */ "./jimu-for-builder/lib/utils/app-config-utils.ts");
/* harmony import */ var jimu_ui__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! jimu-ui */ "jimu-ui");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};






var AppResourceFilePath;
(function (AppResourceFilePath) {
    AppResourceFilePath["Config"] = "config/config.json";
    AppResourceFilePath["Image"] = "images/image-resources-list.json";
    AppResourceFilePath["Icon"] = "images/icon-resources-list.json";
})(AppResourceFilePath || (AppResourceFilePath = {}));
/**
 * The resource manager is used to process the resources in the app. It can be used to upload resources to the server, update the config, and to fetch resources from the server.
 *
 * App resources refer to files used by the app, such as images, icons, and config.json. They are stored on the ArcGIS rest server associated with the app item.
 * The storage structure of the resources are as follows:
 * {
 *    resources: [
 *        { resource: 'config/config.json' , ...}, // This file is the draft version appConfig
 *        { resource: 'images/image-resources-list.json' , ...}, // This file is stored imageResources.
 *        { resource: 'images/icon-resources-list.json' , ...}, // This file is stored iconResources.
 *        { resource: 'images/widget_1/123456.jpg' , ...}, // This file is stored image item.
 *        ...
 *    ]
 * }
 *
 * These first 3 app resources are special. The config.json is the draft version appConfig.
 * The image-resources-list.json and icon-resources-list.json are used to manage other resources, we call them management resources, they don't have `ResourceItemInfo` but their content have `ResourceItemInfo` to manage the item resources.
 * All other resources are called resource items, they have `ResourceItemInfo`.
 *
 * The manager handles mapping app resource URLs to the underlying storage location. So code can refer to a normalized URL like ${appResourceUrl}/images/widget1/image.png. And the manager will handle uploading resources to the proper /images/widget1/location.
 *
 * Here is how the resources are processed:
 *  * When uploading resources, it converts files to blobs and generates blob URLs.
 *  * When saving and updating the app config, it replaces blob URLs with the corresponding resource URLs.
 *  * When fetching resources from server, it replaces `${appResourceUrl}` with portalUrl and add token to the end of the url.
 *
 */
class AppResourceManager {
    constructor() {
        // Cache app resources data in local web app by uploaded.
        this.resourceMap = {};
        this.blobToResourceMap = {};
        // All app resources, includes the resources that are uploaded but have not been saved yet.
        this.resources = {};
        this.getResourcesInDraft = () => this.resources;
        this.setResourcesInDraft = (resources) => {
            this.resources = Object.assign(Object.assign({}, this.getResourcesInDraft()), resources);
        };
        /**
         * Get the image resource list from the draft. The draft resources contains the resources that have been uploaded or fetched from the server.
         * If the resource is already cached in the draft, return the image resources in the draft.
         * If not, will fetch the image resources from the server and replace `${appResourceUrl}` with portalUrl and add token.
         */
        this.getImageResourceListFromDraft = (appId) => __awaiter(this, void 0, void 0, function* () {
            const resourcesInDraft = this.getResourcesInDraft();
            if (resourcesInDraft.imageResources) {
                return yield Promise.resolve(resourcesInDraft.imageResources);
            }
            else {
                const session = this.getSession();
                const portalUrlWithFull = this.getPortalUrlWithFull(appId);
                const { resources } = yield this.fetchAppResourceInfoList(appId);
                const isExistImageResourcesListFile = (resources === null || resources === void 0 ? void 0 : resources.some(({ resource }) => resource === AppResourceFilePath.Image)) || false;
                if (isExistImageResourcesListFile) {
                    const imageResourceList = (yield this.fetchAppResource(appId, { fileName: AppResourceFilePath.Image, readAs: 'json' })) || {};
                    Object.values(imageResourceList).forEach(resource => {
                        if (resource.url.includes('?token=')) {
                            resource.url = resource.url.slice(0, resource.url.indexOf('?token='));
                        }
                        resource.url = resource.url.replace('${appResourceUrl}', portalUrlWithFull) + '?token=' + (session === null || session === void 0 ? void 0 : session.token);
                    });
                    return yield Promise.resolve(imageResourceList);
                }
                return yield this.upLoadImageResourceList({});
            }
        });
        this.getIconResourceListFromDraft = () => __awaiter(this, void 0, void 0, function* () {
            const { iconResources } = this.getResourcesInDraft();
            if (iconResources) {
                return yield Promise.resolve(iconResources);
            }
            const appId = this.getAppId();
            const session = this.getSession();
            const portalUrlWithFull = this.getPortalUrlWithFull(appId);
            const { resources } = yield this.fetchAppResourceInfoList(appId);
            const isExistIconResourceListFile = (resources === null || resources === void 0 ? void 0 : resources.some(({ resource }) => resource === AppResourceFilePath.Icon)) || false;
            if (isExistIconResourceListFile) {
                const iconResourceList = yield this.fetchAppResource(appId, { fileName: AppResourceFilePath.Icon, readAs: 'json' });
                if (iconResourceList) {
                    Object.values(iconResourceList).forEach(resource => {
                        resource.svg = resource.svg.replace('${appResourceUrl}', portalUrlWithFull) + '?token=' + (session === null || session === void 0 ? void 0 : session.token);
                        if (typeof resource.properties.path === 'string') {
                            resource.properties.path = resource.properties.path.replace('${appResourceUrl}', portalUrlWithFull) + '?token=' + (session === null || session === void 0 ? void 0 : session.token);
                        }
                    });
                    return yield Promise.resolve(iconResourceList);
                }
            }
            return yield this.upLoadIconResourceList({});
        });
        /**
         * Filter out the image resources being used by widgets or components in the app from the image resource list.
         * It checks the app config for matches. And it will replace the local image blob url or portal url to `${appResourceUrl}` so that it can be matched. The result will be cached into configSourceMap.
         */
        this.getInUseImageResources = (imageResourceList) => {
            var _a;
            const appConfig = (_a = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().getState().appStateInBuilder) === null || _a === void 0 ? void 0 : _a.appConfig;
            // Modify the url in appConfig to ${appResourceUrl}/...
            let cleanAppConfig = (0,_utils_app_config_utils__WEBPACK_IMPORTED_MODULE_4__.getCleanAppConfig)(appConfig);
            // Replace local image blob url to ${appResourceUrl}/... in appConfig.
            cleanAppConfig = jimu_core__WEBPACK_IMPORTED_MODULE_0__.utils.replaceStringInObject(Object.assign({}, cleanAppConfig), {
                matcher: (value) => /^blob:\http(s?):\/\/(.)/.test(value),
                handler: (value) => { var _a; return ((_a = this.blobToResourceMap[value]) === null || _a === void 0 ? void 0 : _a.resourceUrl) || value; }
            });
            // Matcher ${appResourceUrl}/... from appConfig, and cache into configSourceMap.
            const configSourceMap = {};
            jimu_core__WEBPACK_IMPORTED_MODULE_0__.utils.replaceStringInObject(Object.assign({}, cleanAppConfig), {
                matcher: (value) => /^\$\{appResourceUrl\}+(.)/.test(value),
                handler: (value) => (configSourceMap[value] = value)
            });
            // Filter related image resources in draft.
            const relatedImageResources = [];
            Object.values(imageResourceList).forEach((imageResource) => {
                const resourceUrl = `\${appResourceUrl}/${imageResource.resourcesPrefix}/${imageResource.fileName}`;
                configSourceMap[resourceUrl] && relatedImageResources.push(imageResource);
            });
            const imageResourcesInUse = this.formatRelatedImageResources(imageResourceList, relatedImageResources);
            return imageResourcesInUse;
        };
        this.getInUseIconResources = (iconResourceList) => {
            var _a;
            const appConfig = (_a = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().getState().appStateInBuilder) === null || _a === void 0 ? void 0 : _a.appConfig;
            // Modify the url in appConfig to ${appResourceUrl}/...
            let cleanAppConfig = (0,_utils_app_config_utils__WEBPACK_IMPORTED_MODULE_4__.getCleanAppConfig)(appConfig);
            // Replace local image blob url to ${appResourceUrl}/... in appConfig.
            cleanAppConfig = jimu_core__WEBPACK_IMPORTED_MODULE_0__.utils.replaceStringInObject(Object.assign({}, cleanAppConfig), {
                matcher: (value) => /^blob:\http(s?):\/\/(.)/.test(value),
                handler: (value) => { var _a; return ((_a = this.blobToResourceMap[value]) === null || _a === void 0 ? void 0 : _a.resourceUrl) || value; }
            });
            // Matcher ${appResourceUrl}/... from appConfig, and cache into configSourceMap.
            const configSourceMap = {};
            jimu_core__WEBPACK_IMPORTED_MODULE_0__.utils.replaceStringInObject(Object.assign({}, cleanAppConfig), {
                matcher: (value) => /^\$\{appResourceUrl\}+(.)/.test(value),
                handler: (value) => (configSourceMap[value] = value)
            });
            // Filter related icon resources in draft.
            const inUseIconResources = [];
            Object.values(iconResourceList).forEach((iconResource) => {
                const resourceUrl = `\${appResourceUrl}/images/icon_picker_in_setting/${iconResource.properties.filename}`;
                configSourceMap[resourceUrl] && inUseIconResources.push(iconResource);
            });
            return inUseIconResources;
        };
        /**
         * Upload config.json (AppConfig) to the app resources, this function is called when the save app button is clicked.
         */
        this.upLoadAppConfig = (appId, config, owner) => __awaiter(this, void 0, void 0, function* () {
            const noLocalFileConfig = yield this.upLoadLocalResource(config);
            const file = new Blob([JSON.stringify(noLocalFileConfig)], { type: 'application/json' });
            const resourceItemInfo = {
                appId,
                file,
                fileName: 'config.json',
                type: jimu_core__WEBPACK_IMPORTED_MODULE_0__.ResourceType.Config,
                owner
            };
            return yield this.upLoadAppResource(resourceItemInfo)
                .then(() => __awaiter(this, void 0, void 0, function* () { return yield Promise.resolve(config); }))
                .catch((err) => __awaiter(this, void 0, void 0, function* () { return yield Promise.reject(err); }));
        });
        /**
         * Upload the image-resources-list.json to app resources list.
         */
        this.upLoadImageResourceList = (resourceList, newAppId) => __awaiter(this, void 0, void 0, function* () {
            const resourceListToUpload = Object.assign({}, resourceList);
            return yield this.upLoadResourceList(AppResourceFilePath.Image, resourceListToUpload, newAppId);
        });
        this.upLoadIconResourceList = (resourceList, newAppId) => __awaiter(this, void 0, void 0, function* () {
            return yield this.upLoadResourceList(AppResourceFilePath.Icon, resourceList, newAppId);
        });
        /**
         * Upload a resource file to the server via rest api.
         * It will check if the resource already exists on the server. If it does, will update the resource. If not, will add the resource.
         *
         * The resource file can be a config/config.json, images/image-resources-list.json, images/icon-resources-list.json, and the image items like images/widget_1/1689818129651.png
         */
        this.upLoadAppResource = (resourceItemInfo) => __awaiter(this, void 0, void 0, function* () {
            resourceItemInfo.resourcesPrefix = AppResourceManager.getResourcePrefix(resourceItemInfo);
            const { appId = this.getAppId(), fileName, originalName, resourcesPrefix } = resourceItemInfo;
            const resourcePath = (resourcesPrefix ? resourcesPrefix + '/' : '') + fileName;
            const resourceUrl = '${appResourceUrl}/' + resourcePath;
            const resourceKey = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.uuidv1)();
            const resourceInfoInBuilder = {
                id: resourceKey,
                appId: appId,
                fileName: fileName,
                originalName: originalName,
                resourcesPrefix: resourcesPrefix,
                url: resourceItemInfo.url,
                blobUrl: resourceItemInfo.blobUrl,
                resourceUrl: resourceUrl,
                type: resourceItemInfo.type,
                status: jimu_core__WEBPACK_IMPORTED_MODULE_0__.AjaxState.Fetching,
                widgetId: resourceItemInfo.widgetId,
                owner: resourceItemInfo.owner
            };
            const tempResourceInfoForUpload = Object.assign({}, resourceInfoInBuilder);
            tempResourceInfoForUpload.file = resourceItemInfo.file;
            const resourcePromise = this.fetchAppResourceInfoList(appId)
                .then(({ resources }) => __awaiter(this, void 0, void 0, function* () {
                if ((resources === null || resources === void 0 ? void 0 : resources.length) === 0) {
                    return yield this.addAppResource(tempResourceInfoForUpload);
                }
                else if ((resources === null || resources === void 0 ? void 0 : resources.length) > 0) {
                    return resources.some(({ resource }) => resource === resourcePath)
                        ? yield this.updateAppResource(tempResourceInfoForUpload)
                        : yield this.addAppResource(tempResourceInfoForUpload);
                }
                else {
                    throw new Error('return value from fetchAppResourceInfoList is not right');
                }
            }))
                .catch((error) => __awaiter(this, void 0, void 0, function* () {
                console.error(error);
                this.setResourceItemInfoStatus(tempResourceInfoForUpload, jimu_core__WEBPACK_IMPORTED_MODULE_0__.AjaxState.Error);
                return yield Promise.reject(error);
            }));
            tempResourceInfoForUpload.promise = resourcePromise;
            this.setResourceMap(resourceKey, resourceInfoInBuilder);
            return yield resourcePromise;
        });
        /**
         * Upload the local blob resources. It will replaces the blobUrl with resource url '${appResource}/...' in the config.
         * This helps persist local draft resources to the server.
         */
        this.upLoadLocalResource = (config) => __awaiter(this, void 0, void 0, function* () {
            const blobToResourceMap = this.blobToResourceMap;
            // eslint-disable-next-line
            const isBlobCacheResourceExp = new RegExp('^blob:\http(s?)://(.)');
            // the localResourcesInConfig variable is used for check resource status in config
            const localResourcesInConfig = [];
            function isNeedUpdateResource(value) {
                return isBlobCacheResourceExp.test(value);
            }
            function updateResourceUrl(value) {
                let newValue = value;
                newValue = blobToResourceMap[value];
                !localResourcesInConfig.includes(newValue.id) && localResourcesInConfig.push(newValue.id);
                return newValue.resourceUrl;
            }
            const replaceOperator = {
                matcher: isNeedUpdateResource,
                handler: updateResourceUrl
            };
            const appConfig = jimu_core__WEBPACK_IMPORTED_MODULE_0__.utils.replaceStringInObject(config, replaceOperator);
            return yield this.checkResourcesUploadStatus(localResourcesInConfig).then((resourceUploadStatus) => __awaiter(this, void 0, void 0, function* () {
                if (resourceUploadStatus === jimu_core__WEBPACK_IMPORTED_MODULE_0__.AjaxState.Success) {
                    return yield Promise.resolve(appConfig);
                }
                else {
                    return yield Promise.reject();
                }
            }));
        });
        /**
         * Fetch app resource list data from arcgis rest api.
         * The list includes the files of config.json, image-resources-list.json, icon-resources-list.json, and image items including the images that just uploaded without saved.
         */
        this.fetchAppResourceInfoList = (appId, option) => __awaiter(this, void 0, void 0, function* () {
            const session = this.getSession();
            return yield (0,_service_rest_service__WEBPACK_IMPORTED_MODULE_3__.getItemResources)({ id: appId, isLocalApp: window.jimuConfig.isDevEdition }, Object.assign({ authentication: session }, option))
                .catch((err) => __awaiter(this, void 0, void 0, function* () {
                console.log(err);
                return yield Promise.reject(err);
            }));
        });
        /**
         * Fetch app resource item data from arcgis rest api. Like image-resources-list.json.
         *
         * Note: image-resources-list.json only includes the images that have been saved. Because only call appResourceManagerInstance.upLoadImageResourceList(cloneObj(imageResources)) after upLoadAppConfig Promise in saveApp() function in jimu-for-builder\lib\service\app-service\index.ts.
         */
        this.fetchAppResource = (appId, option) => __awaiter(this, void 0, void 0, function* () {
            const session = this.getSession();
            return yield (0,_service_rest_service__WEBPACK_IMPORTED_MODULE_3__.getItemResource)({ id: appId, isLocalApp: window.jimuConfig.isDevEdition }, Object.assign({ authentication: session }, option))
                .catch((err) => __awaiter(this, void 0, void 0, function* () {
                console.log(err);
                return yield Promise.reject(null);
            }));
        });
        /**
         * Clear out unused resources from the app.
         * It will clean resourceMap and blobToResourceMap and release the blob url cached in memory.
         * It will also remove the unsaved resources.
         * @param appId
         */
        this.clearResources = (appId) => {
            // Clear resourceMap and blobToResourceMap.
            this.clearResourceMap();
            // Clear resources without saved.
            this.clearResourcesWithoutSaved(appId);
            // Dispatch clearResources action.
            (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().dispatch(_builder_state_resource_extension__WEBPACK_IMPORTED_MODULE_1__.builderStateResourceActions.ClearResources());
        };
        /**
         * Update the image resource item info.
         * This function will be called when the image resource item is updated, like after cropping image.
         */
        this.updateImageResourceItemInfo = (imageResourceItemInfo) => {
            const appId = this.getAppId();
            this.getImageResourceListFromDraft(appId).then((imageResourceList) => {
                const tempImageResourceItemInfo = Object.assign({}, imageResourceItemInfo);
                delete tempImageResourceItemInfo.blobUrl;
                delete tempImageResourceItemInfo.type;
                imageResourceList[tempImageResourceItemInfo.fileName.split('.')[0]] = tempImageResourceItemInfo;
                this.setResourcesInDraft({ imageResources: imageResourceList });
            });
        };
    }
    static getInstance() {
        if (!AppResourceManager._instance) {
            AppResourceManager._instance = new AppResourceManager();
            window._appResourceManager = AppResourceManager._instance;
        }
        return window._appResourceManager;
    }
    // Change the file to blobUrl. Calculate width and height from blobUrl. Finally assign these variables to resourceItemInfo.
    static assignBlobUrlToResourceItem(resourceItemInfo) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const blobUrl = window.URL.createObjectURL(resourceItemInfo.file);
                const { width, height } = yield jimu_ui__WEBPACK_IMPORTED_MODULE_5__.imageUtils.getImageOriginalSizeByUrl(blobUrl).catch(() => ({ width: 0, height: 0 }));
                resourceItemInfo.url = blobUrl;
                resourceItemInfo.blobUrl = blobUrl;
                resourceItemInfo.originalWidth = width;
                resourceItemInfo.originalHeight = height;
                return yield Promise.resolve(resourceItemInfo);
            }
            catch (error) {
                return yield Promise.reject(error);
            }
        });
    }
    static getBlobByBlobUrl(blobUrl) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield new Promise((resolve, reject) => {
                const xhr = new XMLHttpRequest();
                xhr.responseType = 'blob';
                xhr.open('GET', blobUrl, true);
                xhr.onerror = reject;
                xhr.onload = () => {
                    if (xhr.status === 200) {
                        resolve(xhr.response);
                    }
                    else {
                        reject();
                    }
                };
                xhr.send();
            });
        });
    }
    static getResourcePrefix({ resourcesPrefix, widgetId, type }) {
        if (resourcesPrefix)
            return resourcesPrefix;
        const resourcesPrefixMap = new Map([
            [jimu_core__WEBPACK_IMPORTED_MODULE_0__.ResourceType.Config, 'config'],
            [jimu_core__WEBPACK_IMPORTED_MODULE_0__.ResourceType.Image, widgetId ? `images/${widgetId}` : 'images/templates']
        ]);
        return resourcesPrefixMap.get(type) || 'templates';
    }
    // Add resource item data by arcgis rest api.
    addAppResource(resourceItemInfo) {
        return __awaiter(this, void 0, void 0, function* () {
            const session = this.getSession();
            return yield this.getAppInfo({ id: resourceItemInfo.appId, isLocalApp: window.jimuConfig.isDevEdition }).then((res) => __awaiter(this, void 0, void 0, function* () {
                return yield (0,_service_rest_service__WEBPACK_IMPORTED_MODULE_3__.addItemResource)({
                    id: resourceItemInfo.appId,
                    resource: resourceItemInfo.file,
                    name: resourceItemInfo.fileName,
                    owner: res.owner,
                    params: {
                        resourcesPrefix: resourceItemInfo.resourcesPrefix
                    },
                    authentication: session
                }).then((result) => __awaiter(this, void 0, void 0, function* () {
                    this.setResourceItemInfoStatus(resourceItemInfo, jimu_core__WEBPACK_IMPORTED_MODULE_0__.AjaxState.Success);
                    return yield Promise.resolve(result);
                }), (error) => __awaiter(this, void 0, void 0, function* () {
                    this.setResourceItemInfoStatus(resourceItemInfo, jimu_core__WEBPACK_IMPORTED_MODULE_0__.AjaxState.Error);
                    return yield Promise.reject(error);
                }));
            }));
        });
    }
    // Update resource item data by arcgis rest api.
    updateAppResource(resourceItemInfo) {
        return __awaiter(this, void 0, void 0, function* () {
            const session = this.getSession();
            return yield this.getAppInfo({ id: resourceItemInfo.appId, isLocalApp: window.jimuConfig.isDevEdition }).then((res) => __awaiter(this, void 0, void 0, function* () {
                return yield (0,_service_rest_service__WEBPACK_IMPORTED_MODULE_3__.updateItemResource)({
                    id: resourceItemInfo.appId,
                    resource: resourceItemInfo.file,
                    name: resourceItemInfo.fileName,
                    owner: res.owner,
                    params: {
                        resourcesPrefix: resourceItemInfo.resourcesPrefix
                    },
                    authentication: session
                }).then((result) => __awaiter(this, void 0, void 0, function* () {
                    this.setResourceItemInfoStatus(resourceItemInfo, jimu_core__WEBPACK_IMPORTED_MODULE_0__.AjaxState.Success);
                    return yield Promise.resolve(result);
                }), (error) => __awaiter(this, void 0, void 0, function* () {
                    this.setResourceItemInfoStatus(resourceItemInfo, jimu_core__WEBPACK_IMPORTED_MODULE_0__.AjaxState.Error);
                    return yield Promise.reject(error);
                }));
            }));
        });
    }
    // Remove resource item data by arcgis rest api.
    removeAppResource(resourceItemInfo) {
        return __awaiter(this, void 0, void 0, function* () {
            const session = this.getSession();
            const appId = resourceItemInfo.appId ? resourceItemInfo.appId : this.getAppId();
            return yield this.getAppInfo({ id: appId, isLocalApp: window.jimuConfig.isDevEdition }).then((res) => __awaiter(this, void 0, void 0, function* () {
                return yield (0,_service_rest_service__WEBPACK_IMPORTED_MODULE_3__.removeItemResource)({
                    id: appId,
                    owner: res.owner,
                    resource: resourceItemInfo.fileName,
                    authentication: session
                }).then((result) => __awaiter(this, void 0, void 0, function* () {
                    return yield Promise.resolve(result);
                }), (error) => __awaiter(this, void 0, void 0, function* () {
                    return yield Promise.reject(error);
                }));
            }));
        });
    }
    getAppId() {
        var _a;
        return (_a = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().getState().appStateInBuilder) === null || _a === void 0 ? void 0 : _a.appId;
    }
    getSession() {
        return jimu_core__WEBPACK_IMPORTED_MODULE_0__.SessionManager.getInstance().getMainSession();
    }
    getPortalUrlWithTemplate() {
        return '${appResourceUrl}/';
    }
    getPortalUrlWithFull(appId) {
        return (0,_service_rest_service__WEBPACK_IMPORTED_MODULE_3__.getResourceOrigin)({ isLocalApp: window.jimuConfig.isDevEdition }) + appId + '/resources';
    }
    setResourceMap(resourceKey, resourceItemInfo) {
        const { id, resourceUrl } = resourceItemInfo;
        this.resourceMap[resourceKey] = Object.assign(Object.assign({}, this.resourceMap[resourceKey]), resourceItemInfo);
        this.blobToResourceMap[resourceItemInfo.blobUrl] = { id, resourceUrl };
        // Dispatch addResource action.
        (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().dispatch(_builder_state_resource_extension__WEBPACK_IMPORTED_MODULE_1__.builderStateResourceActions.AddResource(resourceKey, this.resourceMap[resourceKey]));
    }
    setResourceItemInfoStatus(resourceItemInfo, status) {
        if (this.resourceMap && this.resourceMap[resourceItemInfo.id]) {
            resourceItemInfo.status = status;
            delete resourceItemInfo.file;
            this.setResourceMap(resourceItemInfo.id, resourceItemInfo);
        }
    }
    clearResourceMap() {
        // Release the blobUrl which was previously created by window.URL.createObjectURL(), to let the browser know not to keep the reference to the file any longer.
        for (const resourceKey in this.resourceMap) {
            this.resourceMap[resourceKey] && window.URL.revokeObjectURL(this.resourceMap[resourceKey].blobUrl);
        }
        // Clean resourceMap and blobToResourceMap.
        this.resourceMap = {};
        this.blobToResourceMap = {};
    }
    /**
     * Filter out the resources that have been uploaded without saved from the 'resourceUrlList'. Return the remaining resource items.
     * The resourceUrlList is the 'shouldClearResources' list which contains all the resource list (upload + saved) and not in the config being used.
     * @param appId May be not equal with current app id.
     * @param resourceUrlList For example: [images/widget_1/123456.jpg, ...]. Include resource url such as images or icons.
     * @returns
     */
    clearValueWithoutInResourcesInDraft(appId, resourceUrlList) {
        return __awaiter(this, void 0, void 0, function* () {
            const currentAppId = this.getAppId();
            if (currentAppId !== appId) {
                Object.keys(this.resources).forEach(key => {
                    this.resources[key] = null;
                });
            }
            if (resourceUrlList.length > 0) {
                const imageResourceList = yield this.getImageResourceListFromDraft(appId);
                const iconResourceList = yield this.getIconResourceListFromDraft();
                const imageResourcesUrlList = Object.values(imageResourceList)
                    .map(({ resourcesPrefix, fileName }) => `${resourcesPrefix}/${fileName}`);
                const iconResourcesUrlList = Object.values(iconResourceList)
                    .map(({ properties: { filename } }) => `images/icon_picker_in_setting/${filename}`);
                const resourceUrlListInDraft = [...imageResourcesUrlList, ...iconResourcesUrlList];
                const shouldCleanResourceUrlList = resourceUrlList.filter(resource => {
                    return !resourceUrlListInDraft.includes(resource);
                });
                return yield Promise.resolve(shouldCleanResourceUrlList);
            }
            else {
                return yield Promise.resolve(resourceUrlList);
            }
        });
    }
    /**
     * Clear resources that have not been saved as well as not in the config.
     * Any resources on the draft not referenced on server resource list will be deleted.
     * @param appId
     */
    clearResourcesWithoutSaved(appId) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!appId) {
                return;
            }
            try {
                const portalUrlWithFull = this.getPortalUrlWithFull(appId);
                const portalUrlWithTemplate = this.getPortalUrlWithTemplate();
                const { resources: portalResources } = yield this.fetchAppResourceInfoList(appId, { httpMethod: 'GET' });
                const isExistConfig = (portalResources === null || portalResources === void 0 ? void 0 : portalResources.some(({ resource }) => resource === AppResourceFilePath.Config)) || false;
                const appConfig = isExistConfig
                    ? yield this.fetchAppResource(appId, { fileName: AppResourceFilePath.Config, readAs: 'json' })
                    : {};
                // eslint-disable-next-line
                const isPortalUrlWithTemplateExp = new RegExp('^\\$\\{appResourceUrl\\}+(.)');
                const isPortalUrlWithFullExp = new RegExp('^' + portalUrlWithFull);
                const resourcesMap = {};
                jimu_core__WEBPACK_IMPORTED_MODULE_0__.utils.replaceStringInObject(appConfig, {
                    matcher: (value) => (isPortalUrlWithTemplateExp.test(value) || isPortalUrlWithFullExp.test(value)),
                    handler: (value) => (resourcesMap[value] = value)
                });
                const shouldClearResources = [];
                portalResources === null || portalResources === void 0 ? void 0 : portalResources.forEach(({ resource }) => {
                    //Not config.json, image-resources-list.json, icon-resources-list.json nor the resource item that is in app config.
                    if (!(resource === AppResourceFilePath.Config) &&
                        !(resource === AppResourceFilePath.Image) &&
                        !(resource === AppResourceFilePath.Icon) &&
                        !resourcesMap[portalUrlWithTemplate + resource.replace('_compress', '')] &&
                        !resourcesMap[portalUrlWithFull + resource.replace('_compress', '')]) {
                        shouldClearResources.push(resource);
                    }
                });
                const newShouldClearResources = yield this.clearValueWithoutInResourcesInDraft(appId, shouldClearResources);
                const promiseList = newShouldClearResources.map(fileName => this.removeAppResource({ appId, fileName }));
                Promise.all(promiseList);
            }
            catch (error) {
                console.error(error);
            }
        });
    }
    // Filter out the image Resources being used.
    formatRelatedImageResources(imageResourceList, relatedImageResourceList) {
        const tempMap = {};
        const relatedImageResourcesConfig = {};
        const resourceIdsInAppConfig = [];
        for (let i = 0; i < relatedImageResourceList.length; i++) {
            const resourceId = relatedImageResourceList[i].fileName.split('.')[0];
            resourceIdsInAppConfig.push(resourceId);
        }
        Object.keys(imageResourceList).forEach(id => {
            imageResourceList[id].referedIds = [];
            const originId = imageResourceList[id].originId;
            if (resourceIdsInAppConfig.includes(originId) || resourceIdsInAppConfig.includes(id)) {
                relatedImageResourcesConfig[id] = imageResourceList[id];
                relatedImageResourcesConfig[originId] = imageResourceList[originId];
            }
        });
        Object.keys(relatedImageResourcesConfig).forEach(id => {
            relatedImageResourcesConfig[id].referedIds = [];
            const originId = relatedImageResourcesConfig[id].originId;
            if (originId !== id) {
                if (!tempMap[originId]) {
                    tempMap[originId] = Object.assign({}, relatedImageResourcesConfig[originId]);
                    tempMap[originId].referedIds = [id];
                }
                else {
                    tempMap[originId].referedIds.push(id);
                }
            }
        });
        Object.keys(tempMap).forEach(id => {
            if (relatedImageResourcesConfig[id]) {
                relatedImageResourcesConfig[id].referedIds = tempMap[id].referedIds;
            }
        });
        return relatedImageResourcesConfig;
    }
    checkResourcesUploadStatus(checkResources) {
        return __awaiter(this, void 0, void 0, function* () {
            if (checkResources.length > 0) {
                const checkResourcesPromiseArr = checkResources.map(checkResource => {
                    return this.resourceMap[checkResource].promise;
                });
                return yield Promise.all(checkResourcesPromiseArr).then(() => __awaiter(this, void 0, void 0, function* () {
                    return yield Promise.resolve(jimu_core__WEBPACK_IMPORTED_MODULE_0__.AjaxState.Success);
                }), () => __awaiter(this, void 0, void 0, function* () {
                    return yield Promise.resolve(jimu_core__WEBPACK_IMPORTED_MODULE_0__.AjaxState.Error);
                })).catch((error) => __awaiter(this, void 0, void 0, function* () {
                    console.error(error);
                    return yield Promise.reject();
                }));
            }
            else {
                return yield Promise.resolve(jimu_core__WEBPACK_IMPORTED_MODULE_0__.AjaxState.Success);
            }
        });
    }
    /**
     * Upload image resources list (images/image-resources-list.json) or icon resources list (images/icon-resources-list.json).
     */
    upLoadResourceList(appResourceFilePath, resourceList = {}, newAppId) {
        return __awaiter(this, void 0, void 0, function* () {
            const appId = newAppId || this.getAppId();
            const noLocalFileIconResourceList = yield this.upLoadLocalResource(resourceList);
            const cleanedPortalResourceList = jimu_core__WEBPACK_IMPORTED_MODULE_0__.appConfigUtils.cleanPortalInfoFromResource(noLocalFileIconResourceList);
            const file = new Blob([JSON.stringify(cleanedPortalResourceList)], { type: 'application/json' });
            const [resourcesPrefix, fileName] = appResourceFilePath.split('/');
            const resourceItemInfo = {
                appId,
                file,
                resourcesPrefix,
                fileName,
                type: jimu_core__WEBPACK_IMPORTED_MODULE_0__.ResourceType.Image
            };
            return yield this.upLoadAppResource(resourceItemInfo)
                .then(() => __awaiter(this, void 0, void 0, function* () { return yield Promise.resolve(cleanedPortalResourceList); }))
                .catch((err) => __awaiter(this, void 0, void 0, function* () { return yield Promise.reject(err); }));
        });
    }
    getAppInfo(appInfo) {
        return __awaiter(this, void 0, void 0, function* () {
            const session = (0,_service_app_service_util__WEBPACK_IMPORTED_MODULE_2__.getSession)(appInfo);
            return yield (0,_service_rest_service__WEBPACK_IMPORTED_MODULE_3__.getItem)(appInfo, {
                authentication: session
            }).then((result) => __awaiter(this, void 0, void 0, function* () {
                return yield Promise.resolve(result);
            }));
        });
    }
}


/***/ }),

/***/ "./jimu-for-builder/lib/app-state-history-extension.ts":
/*!*************************************************************!*\
  !*** ./jimu-for-builder/lib/app-state-history-extension.ts ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AppStateHistoryActionKeys: () => (/* binding */ ActionKeys),
/* harmony export */   appStateHistoryActions: () => (/* binding */ actions),
/* harmony export */   "default": () => (/* binding */ AppStateHistoryExtension)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");
/* harmony import */ var _builder_app_sync__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./builder-app-sync */ "./jimu-for-builder/lib/builder-app-sync.ts");


var ActionKeys;
(function (ActionKeys) {
    ActionKeys["InBuilderPutAppConfigIntoHistory"] = "IN_BUILDER_PUT_APPCONFIG_INTO_HISTORY";
    ActionKeys["InBuilderRemoveLastAppConfigFromHistory"] = "IN_BUILDER_REMOVE_LAST_APPCONFIG_FROM_HISTORY";
    ActionKeys["InBuilderAppConfigUndo"] = "IN_BUILDER_APPCONFIG_UNDO";
    ActionKeys["InBuilderAppConfigRedo"] = "IN_BUILDER_APPCONFIG_REDO";
    ActionKeys["InBuilderAppConfigRedoClear"] = "IN_BUILDER_APPCONFIG_REDOCLEAR";
    ActionKeys["InBuilderAppConfigClear"] = "IN_BUILDER_APPCONFIG_CLEAR";
})(ActionKeys || (ActionKeys = {}));
const actions = {
    InBuilderAppConfigUndo: () => {
        return {
            type: ActionKeys.InBuilderAppConfigUndo
        };
    },
    InBuilderAppConfigRedo: () => {
        return {
            type: ActionKeys.InBuilderAppConfigRedo
        };
    },
    InBuilderPutAppConfigIntoHistory: (appState) => {
        return {
            type: ActionKeys.InBuilderPutAppConfigIntoHistory,
            appState: appState
        };
    },
    InBuilderRemoveLastAppConfigFromHistory: () => {
        return {
            type: ActionKeys.InBuilderRemoveLastAppConfigFromHistory
        };
    },
    InBuilderAppConfigRedoClear: () => {
        return {
            type: ActionKeys.InBuilderAppConfigRedoClear
        };
    },
    InBuilderAppConfigClear: () => {
        return {
            type: ActionKeys.InBuilderAppConfigClear
        };
    }
};

class AppStateHistoryExtension {
    constructor() {
        this.id = 'app-state-history-extension';
    }
    getActions() {
        return [
            ActionKeys.InBuilderPutAppConfigIntoHistory,
            ActionKeys.InBuilderRemoveLastAppConfigFromHistory,
            ActionKeys.InBuilderAppConfigUndo,
            ActionKeys.InBuilderAppConfigRedo,
            ActionKeys.InBuilderAppConfigRedoClear,
            ActionKeys.InBuilderAppConfigClear
        ];
    }
    getInitLocalState() {
        return {
            past: [],
            future: []
        };
    }
    getReducer() {
        return (historyState, action, builderState) => {
            switch (action.type) {
                case ActionKeys.InBuilderAppConfigUndo:
                    return this.handleAppStateUndo(historyState);
                case ActionKeys.InBuilderAppConfigRedo:
                    return this.handleAppStateRedo(historyState);
                case ActionKeys.InBuilderPutAppConfigIntoHistory:
                    return this.handleAppStateAdd(historyState, action.appState);
                case ActionKeys.InBuilderRemoveLastAppConfigFromHistory:
                    return this.handleAppStateRemoveLast(historyState);
                case ActionKeys.InBuilderAppConfigRedoClear:
                    return this.handleAppStateRedoClear(historyState);
                case ActionKeys.InBuilderAppConfigClear:
                    return this.handleAppStateClear(historyState);
                default:
                    return historyState;
            }
        };
    }
    handleAppStateUndo(state) {
        // last member in `past` array is the current appState
        if (state.past.length < 2) {
            console.warn('Can not undo since no history there');
            return state;
        }
        const previous = state.past[state.past.length - 2];
        const current = state.past[state.past.length - 1];
        const past = state.past.slice(0, state.past.length - 1);
        const future = [current].concat(state.future);
        jimu_core__WEBPACK_IMPORTED_MODULE_0__.lodash.defer(() => {
            (0,_builder_app_sync__WEBPACK_IMPORTED_MODULE_1__.publishAppConfigChangeToApp)(previous.appConfig);
            (0,_builder_app_sync__WEBPACK_IMPORTED_MODULE_1__.publishAppInfoChangeToApp)(previous.appInfo);
        });
        return state.merge({
            past: past,
            future: future
        });
    }
    handleAppStateRedo(state) {
        // last member in `past` array is the current appState
        if (state.future.length < 1) {
            console.warn('Can not redo since no history there');
            return state;
        }
        const next = state.future[0];
        const future = state.future.slice(1);
        const past = state.past.concat([next]);
        jimu_core__WEBPACK_IMPORTED_MODULE_0__.lodash.defer(() => {
            (0,_builder_app_sync__WEBPACK_IMPORTED_MODULE_1__.publishAppConfigChangeToApp)(next.appConfig);
            (0,_builder_app_sync__WEBPACK_IMPORTED_MODULE_1__.publishAppInfoChangeToApp)(next.appInfo);
        });
        return state.merge({
            past: past,
            future: future
        });
    }
    handleAppStateAdd(state, appState) {
        // if appState is not generated by redo or undo or `past` is emperty
        const lastStateInPast = state.past[state.past.length - 1];
        if (appState !== null && ((state.past.length > 0 && (lastStateInPast.appConfig !== appState.appConfig || lastStateInPast.appInfo !== appState.appInfo)) || state.past.length === 0)) {
            const past = state.past.concat([appState]);
            return state.set('past', past).set('future', []);
        }
        return state;
    }
    handleAppStateRemoveLast(state) {
        // if appState is not generated by redo or undo or `past` is emperty
        if (state.past.length > 0) {
            const past = state.past.slice(0, state.past.length - 1);
            return state.set('past', past);
        }
        return state;
    }
    handleAppStateRedoClear(state) {
        return state.set('future', []);
    }
    handleAppStateClear(state) {
        return state.set('future', []).set('past', []);
    }
    getStoreKey() {
        return 'appStateHistory';
    }
}


/***/ }),

/***/ "./jimu-for-builder/lib/app-state-redux-store-extension.ts":
/*!*****************************************************************!*\
  !*** ./jimu-for-builder/lib/app-state-redux-store-extension.ts ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ExtActionKeys: () => (/* binding */ ExtActionKeys),
/* harmony export */   appStateActions: () => (/* binding */ actions),
/* harmony export */   "default": () => (/* binding */ BuilderAppStateReduxStoreExtension)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");

var ExtActionKeys;
(function (ExtActionKeys) {
    // actions from app
    ExtActionKeys["InAppAppStateChanged"] = "IN_APP_APP_STATE_CHANGED";
    ExtActionKeys["InBuilderAppConfigChanged"] = "IN_BUILDER_APP_CONFIG_CHANGED";
})(ExtActionKeys || (ExtActionKeys = {}));
const actions = {
    inAppAppStateChanged: (appState) => {
        return {
            type: ExtActionKeys.InAppAppStateChanged,
            appState: appState
        };
    },
    inBuilderAppConfigChanged: (appConfig) => {
        return {
            type: ExtActionKeys.InBuilderAppConfigChanged,
            appConfig
        };
    }
};

class BuilderAppStateReduxStoreExtension {
    constructor() {
        this.id = 'builder-app-state-redux-store-extension';
    }
    getActions() {
        return Object.keys(ExtActionKeys).map(k => ExtActionKeys[k]);
    }
    getInitLocalState() {
        return null;
    }
    getReducer() {
        return (appState, action, builderState) => {
            switch (action.type) {
                case ExtActionKeys.InAppAppStateChanged:
                    return action.appState;
                case ExtActionKeys.InBuilderAppConfigChanged:
                    return jimu_core__WEBPACK_IMPORTED_MODULE_0__.appConfigUtils.updateStateWhenAppConfigChange(appState, action.appConfig);
                default:
                    return appState;
            }
        };
    }
    getStoreKey() {
        return 'appStateInBuilder';
    }
}


/***/ }),

/***/ "./jimu-for-builder/lib/app-widget-manager.tsx":
/*!*****************************************************!*\
  !*** ./jimu-for-builder/lib/app-widget-manager.tsx ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ AppWidgetManager)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");

class AppWidgetManager extends jimu_core__WEBPACK_IMPORTED_MODULE_0__.WidgetManager {
    static getInstance() {
        if (window.jimuConfig.isBuilder) {
            return window._appWindow && window._appWindow._widgetManager;
        }
        else {
            return jimu_core__WEBPACK_IMPORTED_MODULE_0__.WidgetManager.getInstance();
        }
    }
}


/***/ }),

/***/ "./jimu-for-builder/lib/base-widget-setting.tsx":
/*!******************************************************!*\
  !*** ./jimu-for-builder/lib/base-widget-setting.tsx ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");

class BaseWidgetSetting extends jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.PureComponent {
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (BaseWidgetSetting);


/***/ }),

/***/ "./jimu-for-builder/lib/builder-app-sync.ts":
/*!**************************************************!*\
  !*** ./jimu-for-builder/lib/builder-app-sync.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   listenAppEvents: () => (/* binding */ listenAppEvents),
/* harmony export */   publichActivePagePartChangeToApp: () => (/* binding */ publichActivePagePartChangeToApp),
/* harmony export */   publichChangeZoomScaleToApp: () => (/* binding */ publichChangeZoomScaleToApp),
/* harmony export */   publichUtilityStateChangeToApp: () => (/* binding */ publichUtilityStateChangeToApp),
/* harmony export */   publishAnimationPreviewToApp: () => (/* binding */ publishAnimationPreviewToApp),
/* harmony export */   publishAppConfigChangeToApp: () => (/* binding */ publishAppConfigChangeToApp),
/* harmony export */   publishAppInfoChangeToApp: () => (/* binding */ publishAppInfoChangeToApp),
/* harmony export */   publishAppModeChangeToApp: () => (/* binding */ publishAppModeChangeToApp),
/* harmony export */   publishChangeBrowserSizeModeToApp: () => (/* binding */ publishChangeBrowserSizeModeToApp),
/* harmony export */   publishChangeSelectionToApp: () => (/* binding */ publishChangeSelectionToApp),
/* harmony export */   publishChangeSessionToApp: () => (/* binding */ publishChangeSessionToApp),
/* harmony export */   publishChangeWidgetMutableStatePropToApp: () => (/* binding */ publishChangeWidgetMutableStatePropToApp),
/* harmony export */   publishChangeWidgetStatePropToApp: () => (/* binding */ publishChangeWidgetStatePropToApp),
/* harmony export */   publishDialogChangeToApp: () => (/* binding */ publishDialogChangeToApp),
/* harmony export */   publishDialogInfosChangeToApp: () => (/* binding */ publishDialogInfosChangeToApp),
/* harmony export */   publishHoverPreviewToApp: () => (/* binding */ publishHoverPreviewToApp),
/* harmony export */   publishKeyboardToApp: () => (/* binding */ publishKeyboardToApp),
/* harmony export */   publishNoPermissionResourceInfoListChangeToApp: () => (/* binding */ publishNoPermissionResourceInfoListChangeToApp),
/* harmony export */   publishPageChangeToApp: () => (/* binding */ publishPageChangeToApp),
/* harmony export */   publishScreenGroupNavInfoToApp: () => (/* binding */ publishScreenGroupNavInfoToApp),
/* harmony export */   publishSectionNavInfoToApp: () => (/* binding */ publishSectionNavInfoToApp),
/* harmony export */   publishSetClientIdAlertIsCancelled: () => (/* binding */ publishSetClientIdAlertIsCancelled),
/* harmony export */   publishTocHoverInfoToApp: () => (/* binding */ publishTocHoverInfoToApp)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");
/* harmony import */ var _app_state_redux_store_extension__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./app-state-redux-store-extension */ "./jimu-for-builder/lib/app-state-redux-store-extension.ts");
/* harmony import */ var _app_state_history_extension__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./app-state-history-extension */ "./jimu-for-builder/lib/app-state-history-extension.ts");
/* harmony import */ var _builder_state_store_extension__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./builder-state-store-extension */ "./jimu-for-builder/lib/builder-state-store-extension.ts");
/* harmony import */ var _sync_type__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./sync-type */ "./jimu-for-builder/lib/sync-type.ts");
/* harmony import */ var _app_resource_manager__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./app-resource-manager */ "./jimu-for-builder/lib/app-resource-manager.tsx");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};






function publishAppConfigChangeToApp(appConfig) {
    publishEventToApp(`to_app.${_sync_type__WEBPACK_IMPORTED_MODULE_4__.ToAppMessage.AppConfigChanged}`, appConfig);
}
function publishAppInfoChangeToApp(appInfo) {
    publishEventToApp(`to_app.${_sync_type__WEBPACK_IMPORTED_MODULE_4__.ToAppMessage.AppInfoChanged}`, appInfo);
}
function publishDialogInfosChangeToApp(dialogInfos) {
    publishEventToApp(`to_app.${_sync_type__WEBPACK_IMPORTED_MODULE_4__.ToAppMessage.DialogInfosChanged}`, dialogInfos);
}
function publishAppModeChangeToApp(appMode) {
    publishEventToApp(`to_app.${_sync_type__WEBPACK_IMPORTED_MODULE_4__.ToAppMessage.ChangeAppMode}`, appMode);
}
function publishPageChangeToApp(pageId) {
    publishEventToApp(`to_app.${_sync_type__WEBPACK_IMPORTED_MODULE_4__.ToAppMessage.ChangePage}`, pageId);
}
function publishDialogChangeToApp(dialogId) {
    publishEventToApp(`to_app.${_sync_type__WEBPACK_IMPORTED_MODULE_4__.ToAppMessage.ChangeDialog}`, dialogId);
}
function publishChangeSelectionToApp(selection) {
    publishEventToApp(`to_app.${_sync_type__WEBPACK_IMPORTED_MODULE_4__.ToAppMessage.ChangeSelection}`, selection);
}
function publishChangeWidgetStatePropToApp(alterState) {
    publishEventToApp(`to_app.${_sync_type__WEBPACK_IMPORTED_MODULE_4__.ToAppMessage.ChangeWidgetStateProp}`, alterState);
}
function publichUtilityStateChangeToApp(utilityId, state) {
    publishEventToApp(`to_app.${_sync_type__WEBPACK_IMPORTED_MODULE_4__.ToAppMessage.UtilityStateChanged}`, { utilityId, state });
}
function publishChangeWidgetMutableStatePropToApp(alterState) {
    publishEventToApp(`to_app.${_sync_type__WEBPACK_IMPORTED_MODULE_4__.ToAppMessage.ChangeWidgetMutableStateProp}`, alterState);
}
function publishKeyboardToApp(event) {
    publishEventToApp(`to_app.${_sync_type__WEBPACK_IMPORTED_MODULE_4__.ToAppMessage.BuilderTriggerKeyboard}`, event);
}
function publishChangeBrowserSizeModeToApp(mode) {
    publishEventToApp(`to_app.${_sync_type__WEBPACK_IMPORTED_MODULE_4__.ToAppMessage.ChangeBrowserSizeMode}`, mode);
}
function publishChangeSessionToApp() {
    publishEventToApp(`to_app.${_sync_type__WEBPACK_IMPORTED_MODULE_4__.ToAppMessage.BuilderSessionChanged}`, jimu_core__WEBPACK_IMPORTED_MODULE_0__.SessionManager.getInstance().getSessions());
}
function publishNoPermissionResourceInfoListChangeToApp() {
    publishEventToApp(`to_app.${_sync_type__WEBPACK_IMPORTED_MODULE_4__.ToAppMessage.BuilderNoPermissionResourceInfoListChanged}`, jimu_core__WEBPACK_IMPORTED_MODULE_0__.SessionManager.getInstance().getNoPermissionResourceInfoList());
}
function publichChangeZoomScaleToApp(zoomScale) {
    publishEventToApp(`to_app.${_sync_type__WEBPACK_IMPORTED_MODULE_4__.ToAppMessage.ChangeZoomScale}`, zoomScale);
}
function publichActivePagePartChangeToApp(pagePart) {
    publishEventToApp(`to_app.${_sync_type__WEBPACK_IMPORTED_MODULE_4__.ToAppMessage.ActivePagePartChanged}`, pagePart);
}
function publishAnimationPreviewToApp(data) {
    publishEventToApp(`to_app.${_sync_type__WEBPACK_IMPORTED_MODULE_4__.ToAppMessage.AnimationPreview}`, data);
}
function publishHoverPreviewToApp(data) {
    publishEventToApp(`to_app.${_sync_type__WEBPACK_IMPORTED_MODULE_4__.ToAppMessage.HoverPreview}`, data);
}
function publishSectionNavInfoToApp(sectionId, navInfo) {
    publishEventToApp(`to_app.${_sync_type__WEBPACK_IMPORTED_MODULE_4__.ToAppMessage.SectionNavInfoChanged}`, { sectionId, navInfo });
}
function publishScreenGroupNavInfoToApp(screenGroupId, activeIndex) {
    publishEventToApp(`to_app.${_sync_type__WEBPACK_IMPORTED_MODULE_4__.ToAppMessage.ScreenGroupNavInfoChanged}`, { screenGroupId, activeIndex });
}
function publishTocHoverInfoToApp(layoutInfo, hovered) {
    publishEventToApp(`to_app.${_sync_type__WEBPACK_IMPORTED_MODULE_4__.ToAppMessage.TocHoverInfoChanged}`, { layoutInfo, hovered });
}
function publishSetClientIdAlertIsCancelled(portalUrl) {
    publishEventToApp(`to_app.${_sync_type__WEBPACK_IMPORTED_MODULE_4__.ToAppMessage.SetClientIdAlertIsCancelled}`, { portalUrl });
}
function publishEventToApp(action, data) {
    window._builderPubsub.publishSync(action, data);
}
function listenAppEvents() {
    window._builderPubsub.subscribe(`to_builder.${_sync_type__WEBPACK_IMPORTED_MODULE_4__.ToBuilderMessage.AppSessionChanged}`, (evt, sessions) => {
        // console.log('to_builder' + JSON.stringify(sessions));
        jimu_core__WEBPACK_IMPORTED_MODULE_0__.SessionManager.getInstance().syncSessionsFromOtherWindow(sessions);
    });
    window._builderPubsub.subscribe(`to_builder.${_sync_type__WEBPACK_IMPORTED_MODULE_4__.ToBuilderMessage.AppNoPermissionResourceInfoListChanged}`, (evt, noPermissionResourceInfoList) => {
        jimu_core__WEBPACK_IMPORTED_MODULE_0__.SessionManager.getInstance().syncNoPermissionResourceInfoListFromOtherWindow(noPermissionResourceInfoList);
    });
    window._builderPubsub.subscribe(`to_builder.${_sync_type__WEBPACK_IMPORTED_MODULE_4__.ToBuilderMessage.NeedToCheck498Error}`, (evt, url) => {
        jimu_core__WEBPACK_IMPORTED_MODULE_0__.SessionManager.getInstance().handleInvalidToken(url);
    });
    window._builderPubsub.subscribe('to_builder', function (evt, data) {
        console.debug(evt, data);
    });
    window._builderPubsub.subscribe(`to_builder.${_sync_type__WEBPACK_IMPORTED_MODULE_4__.ToBuilderMessage.AppStateChanged}`, (evt, appState) => {
        var _a;
        if ((0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().getState().builder.currentAppId !== appState.appId) {
            (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().dispatch(_builder_state_store_extension__WEBPACK_IMPORTED_MODULE_3__.builderActions.changeCurrentApp(appState.appId));
            (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().dispatch(_app_state_history_extension__WEBPACK_IMPORTED_MODULE_2__.appStateHistoryActions.InBuilderAppConfigClear());
            /**
             * Because of the history API, when user click the browser back button, the appId in URL may is not the same as the internal appId, we need to sync them here.
             *
             * Note: Changing the iframe.src will update the host parent window's history (tested in chrome.)
             */
            if ((0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().getState().queryObject.id !== appState.appId) {
                jimu_core__WEBPACK_IMPORTED_MODULE_0__.jimuHistory.changeQueryObject({ id: appState.appId });
            }
        }
        if (!(0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().getState().appStateInBuilder ||
            (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().getState().appStateInBuilder.appConfig !== appState.appConfig) {
            const newAppConfig = appState.appConfig;
            const oldAppConfig = (_a = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().getState().appStateInBuilder) === null || _a === void 0 ? void 0 : _a.appConfig;
            if (newAppConfig && oldAppConfig) {
                const isWidgetVersionChange = Object.keys(newAppConfig.widgets || {})
                    .find(wId => newAppConfig.widgets[wId] && oldAppConfig.widgets[wId] && newAppConfig.widgets[wId].version !== oldAppConfig.widgets[wId].version);
                // the appConfig change is caused by widget version change, which means load an old app and do upgrade
                // for this case, we don't trigger save button.
                if (isWidgetVersionChange) {
                    (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().dispatch(_app_state_redux_store_extension__WEBPACK_IMPORTED_MODULE_1__.appStateActions.inAppAppStateChanged(appState));
                    return;
                }
                const removedWidgets = Object.keys(oldAppConfig.widgets).filter(wId => !newAppConfig.widgets[wId]);
                (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().dispatch(_builder_state_store_extension__WEBPACK_IMPORTED_MODULE_3__.builderActions.widgetsRemoved(removedWidgets));
                const newWidgets = Object.keys(newAppConfig.widgets).filter(wId => !oldAppConfig.widgets[wId]).map(wId => ({
                    widgetId: wId,
                    widgetUri: newAppConfig.widgets[wId].uri
                }));
                (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().dispatch(_builder_state_store_extension__WEBPACK_IMPORTED_MODULE_3__.builderActions.widgetsAdded(newWidgets));
            }
            appState.appConfig && (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().dispatch(_app_state_history_extension__WEBPACK_IMPORTED_MODULE_2__.appStateHistoryActions.InBuilderPutAppConfigIntoHistory({ appConfig: appState.appConfig, appInfo: appState.appInfo }));
        }
        (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().dispatch(_app_state_redux_store_extension__WEBPACK_IMPORTED_MODULE_1__.appStateActions.inAppAppStateChanged(appState));
    });
    window._builderPubsub.subscribe(`to_builder.${_sync_type__WEBPACK_IMPORTED_MODULE_4__.ToBuilderMessage.PopupChooseWidget}`, (evt, layout) => {
        (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().dispatch(_builder_state_store_extension__WEBPACK_IMPORTED_MODULE_3__.builderActions.openChooseWidgetPopup(layout.layoutId, layout.layoutItemId));
    });
    window._builderPubsub.subscribe(`to_builder.${_sync_type__WEBPACK_IMPORTED_MODULE_4__.ToBuilderMessage.AppAddResource}`, (evt, resource) => {
        const appResourceManager = _app_resource_manager__WEBPACK_IMPORTED_MODULE_5__.AppResourceManager.getInstance();
        _app_resource_manager__WEBPACK_IMPORTED_MODULE_5__.AppResourceManager.getBlobByBlobUrl(resource.file).then((blob) => __awaiter(this, void 0, void 0, function* () {
            resource.file = blob;
            appResourceManager.upLoadAppResource(resource);
            if (resource.type === jimu_core__WEBPACK_IMPORTED_MODULE_0__.ResourceType.Image && resource.originId) {
                _app_resource_manager__WEBPACK_IMPORTED_MODULE_5__.AppResourceManager.getInstance().updateImageResourceItemInfo(resource);
            }
        }));
    });
    window._builderPubsub.subscribe(`to_builder.${_sync_type__WEBPACK_IMPORTED_MODULE_4__.ToBuilderMessage.AppClearResources}`, (evt, appId) => {
        const appResourceManager = _app_resource_manager__WEBPACK_IMPORTED_MODULE_5__.AppResourceManager.getInstance();
        appResourceManager.clearResources(appId);
    });
    window._builderPubsub.subscribe(`to_builder.${_sync_type__WEBPACK_IMPORTED_MODULE_4__.ToBuilderMessage.AppTriggerKeyboard}`, (evt, event) => {
        jimu_core__WEBPACK_IMPORTED_MODULE_0__.keyboardUtils.triggerEvent(event);
    });
    window._builderPubsub.subscribe(`to_builder.${_sync_type__WEBPACK_IMPORTED_MODULE_4__.ToBuilderMessage.SetLayoutTools}`, (evt, tools) => {
        (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().dispatch(_builder_state_store_extension__WEBPACK_IMPORTED_MODULE_3__.builderActions.setLayoutTools(tools));
    });
    window._builderPubsub.subscribe(`to_builder.${_sync_type__WEBPACK_IMPORTED_MODULE_4__.ToBuilderMessage.ClearLastAppConfigFromHistory}`, evt => {
        (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().dispatch(_app_state_history_extension__WEBPACK_IMPORTED_MODULE_2__.appStateHistoryActions.InBuilderRemoveLastAppConfigFromHistory());
    });
    window._builderPubsub.subscribe(`to_builder.${_sync_type__WEBPACK_IMPORTED_MODULE_4__.ToBuilderMessage.SetIsBusy}`, (evt, isBusy) => {
        (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().dispatch(jimu_core__WEBPACK_IMPORTED_MODULE_0__.appActions.setIsBusy(isBusy));
    });
    window._builderPubsub.subscribe(`to_builder.${_sync_type__WEBPACK_IMPORTED_MODULE_4__.ToBuilderMessage.ConfirmDelete}`, (evt, itemToDelete) => {
        (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().dispatch(_builder_state_store_extension__WEBPACK_IMPORTED_MODULE_3__.builderActions.confirmDeleteContentChanged(itemToDelete));
    });
    window._builderPubsub.subscribe(`to_builder.${_sync_type__WEBPACK_IMPORTED_MODULE_4__.ToBuilderMessage.NeedToRegisterClinetId}`, (evt, portalInfo) => {
        (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().dispatch(jimu_core__WEBPACK_IMPORTED_MODULE_0__.appActions.addToRegisterClientIdList(portalInfo.portalUrl, portalInfo.needToSignIn, portalInfo.serviceUrl));
    });
    window._builderPubsub.subscribe(`to_builder.${_sync_type__WEBPACK_IMPORTED_MODULE_4__.ToBuilderMessage.AppIsLoaded}`, (evt, isBusy) => {
        var _a;
        // sync mainPortalInfo
        const state = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().getState();
        const mainPortalInfo = {
            portalUrl: state.portalUrl,
            clientId: state.clientId,
            isWebTier: state.isWebTier
        };
        publishEventToApp(`to_app.${_sync_type__WEBPACK_IMPORTED_MODULE_4__.ToAppMessage.SetMainPortal}`, mainPortalInfo);
        /*
        * After app loaded, the portalUrl and portalSelf may still change, because if we use platform url in builder,
        * the url will be changed to org url later if app loads fast. So, listen to change here.
        */
        (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.observeStore)((prePortalUrl, portalUrl) => {
            publishEventToApp(`to_app.${_sync_type__WEBPACK_IMPORTED_MODULE_4__.ToAppMessage.SetMainPortal}`, { portalUrl });
        }, ['portalUrl']);
        if ((0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().getState().portalSelf) {
            publishEventToApp(`to_app.${_sync_type__WEBPACK_IMPORTED_MODULE_4__.ToAppMessage.PortalSelfChanged}`, (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().getState().portalSelf);
        }
        (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.observeStore)((prePortalSelf, portalSelf) => {
            publishEventToApp(`to_app.${_sync_type__WEBPACK_IMPORTED_MODULE_4__.ToAppMessage.PortalSelfChanged}`, portalSelf);
        }, ['portalSelf']);
        // sync appInfo.
        jimu_core__WEBPACK_IMPORTED_MODULE_0__.portalUtils.getAppInfo((_a = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().getState().queryObject) === null || _a === void 0 ? void 0 : _a.id).then(appInfo => {
            publishEventToApp(`to_app.${_sync_type__WEBPACK_IMPORTED_MODULE_4__.ToAppMessage.AppInfoChanged}`, appInfo);
        });
        // sync user info
        if ((0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().getState().user) {
            publishEventToApp(`to_app.${_sync_type__WEBPACK_IMPORTED_MODULE_4__.ToAppMessage.UserSignIn}`, (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().getState().user);
        }
        // sync sessions
        publishChangeSessionToApp();
    });
}


/***/ }),

/***/ "./jimu-for-builder/lib/builder-keyboard-component.tsx":
/*!*************************************************************!*\
  !*** ./jimu-for-builder/lib/builder-keyboard-component.tsx ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");
/* harmony import */ var _lib_builder_app_sync__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../lib/builder-app-sync */ "./jimu-for-builder/lib/builder-app-sync.ts");
/* harmony import */ var _lib_app_state_history_extension__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../lib/app-state-history-extension */ "./jimu-for-builder/lib/app-state-history-extension.ts");



class BuilderKeyboardComponentInner extends jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.PureComponent {
    constructor() {
        super(...arguments);
        this.isSupportKeyboard = () => {
            let isSupportKeyboard = false;
            // for builder except home, template page
            if (window.jimuConfig.isBuilder && this.props.currentPageId !== 'home' && this.props.currentPageId !== 'template') {
                isSupportKeyboard = true;
                return isSupportKeyboard;
            }
            return isSupportKeyboard;
        };
        this.switchAppMode = () => {
            var _a, _b;
            // when event is triggered in builder
            const appMode = (_b = (_a = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().getState().appStateInBuilder) === null || _a === void 0 ? void 0 : _a.appRuntimeInfo) === null || _b === void 0 ? void 0 : _b.appMode;
            if (appMode === jimu_core__WEBPACK_IMPORTED_MODULE_0__.AppMode.Run) {
                _lib_builder_app_sync__WEBPACK_IMPORTED_MODULE_1__.publishAppModeChangeToApp(jimu_core__WEBPACK_IMPORTED_MODULE_0__.AppMode.Design);
            }
            else {
                _lib_builder_app_sync__WEBPACK_IMPORTED_MODULE_1__.publishAppModeChangeToApp(jimu_core__WEBPACK_IMPORTED_MODULE_0__.AppMode.Run);
            }
        };
        this.undo = () => {
            if (this.props.stateHistory.past.length <= 1) {
                return;
            }
            (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().dispatch(_lib_app_state_history_extension__WEBPACK_IMPORTED_MODULE_2__.appStateHistoryActions.InBuilderAppConfigUndo());
        };
        this.redo = () => {
            if (this.props.stateHistory.future.length <= 0) {
                return;
            }
            (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().dispatch(_lib_app_state_history_extension__WEBPACK_IMPORTED_MODULE_2__.appStateHistoryActions.InBuilderAppConfigRedo());
        };
        this.onKeyboardTrigger = (event) => {
            if (!event.key.includes('-manual')) {
                _lib_builder_app_sync__WEBPACK_IMPORTED_MODULE_1__.publishKeyboardToApp(event);
            }
        };
        this.isMac = () => {
            var _a, _b;
            return ((_b = (_a = window.jimuUA) === null || _a === void 0 ? void 0 : _a.os) === null || _b === void 0 ? void 0 : _b.name) === 'macOS';
        };
    }
    render() {
        if (this.isMac()) {
            return this.isSupportKeyboard()
                ? jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement(jimu_core__WEBPACK_IMPORTED_MODULE_0__.Keyboard, { onKeyboardTrigger: this.onKeyboardTrigger, bindings: {
                        'shift+alt+keyx': () => { this.switchAppMode(); },
                        'command+keyz': () => { this.undo(); },
                        'command+shift+keyz': () => { this.redo(); }
                    } })
                : null;
        }
        else {
            return this.isSupportKeyboard()
                ? jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement(jimu_core__WEBPACK_IMPORTED_MODULE_0__.Keyboard, { onKeyboardTrigger: this.onKeyboardTrigger, bindings: {
                        'shift+alt+keyx': () => { this.switchAppMode(); },
                        'ctrl+keyz': () => { this.undo(); },
                        'ctrl+shift+keyz': () => { this.redo(); }
                    } })
                : null;
        }
    }
}
const mapStateToProps = (state) => {
    return {
        currentPageId: state.appRuntimeInfo.currentPageId,
        stateHistory: state.appStateHistory
    };
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (jimu_core__WEBPACK_IMPORTED_MODULE_0__.ReactRedux.connect(mapStateToProps)(BuilderKeyboardComponentInner));


/***/ }),

/***/ "./jimu-for-builder/lib/builder-locale.ts":
/*!************************************************!*\
  !*** ./jimu-for-builder/lib/builder-locale.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   loadI18nMessage: () => (/* binding */ loadI18nMessage)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");
/* harmony import */ var _translations_default__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./translations/default */ "./jimu-for-builder/lib/translations/default.ts");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};


function loadLocaleMessagesForJimuBuilder(locale, supportedLocales) {
    return __awaiter(this, void 0, void 0, function* () {
        locale = jimu_core__WEBPACK_IMPORTED_MODULE_0__.i18n.getLocaleToLoad(locale, supportedLocales);
        if (locale) {
            return yield jimu_core__WEBPACK_IMPORTED_MODULE_0__.i18n.loadLocaleMessages('jimu-for-builder/lib/translations', locale).then(messages => {
                return messages;
            });
        }
        else {
            return Promise.resolve(_translations_default__WEBPACK_IMPORTED_MODULE_1__["default"]);
        }
    });
}
function loadI18nMessage() {
    return __awaiter(this, void 0, void 0, function* () {
        const locale = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().getState().appContext.locale;
        return yield loadLocaleMessagesForJimuBuilder(locale, jimu_core__WEBPACK_IMPORTED_MODULE_0__.translatedLocales).then((messages) => {
            messages && (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().dispatch(jimu_core__WEBPACK_IMPORTED_MODULE_0__.appActions.i18nMessagesLoaded('jimu-for-builder', messages));
            jimu_core__WEBPACK_IMPORTED_MODULE_0__.i18n.resetIntls();
            return messages;
        });
    });
}


/***/ }),

/***/ "./jimu-for-builder/lib/builder-state-resource-extension.ts":
/*!******************************************************************!*\
  !*** ./jimu-for-builder/lib/builder-state-resource-extension.ts ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BuilderStateResourceActionKeys: () => (/* binding */ ActionKeys),
/* harmony export */   builderStateResourceActions: () => (/* binding */ actions),
/* harmony export */   "default": () => (/* binding */ BuilderStateResourceExtension)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");

var ActionKeys;
(function (ActionKeys) {
    ActionKeys["AddResource"] = "ADD_RESOURCE";
    ActionKeys["UpdateResource"] = "UPDATE_RESOURCE";
    ActionKeys["ClearResources"] = "CLEAR_RESOURCES";
})(ActionKeys || (ActionKeys = {}));
const actions = {
    AddResource: (resourceKey, resourceItemInfo) => {
        return {
            type: ActionKeys.AddResource,
            resourceKey: resourceKey,
            resourceItemInfo: resourceItemInfo
        };
    },
    UpdateResource: (resourceKey, resourceItemInfo) => {
        return {
            type: ActionKeys.UpdateResource,
            resourceKey: resourceKey,
            resourceItemInfo: resourceItemInfo
        };
    },
    ClearResources: () => {
        return {
            type: ActionKeys.ClearResources
        };
    }
};

class BuilderStateResourceExtension {
    constructor() {
        this.id = 'builder-state-resource-extension';
    }
    getActions() {
        return Object.keys(ActionKeys).map(k => ActionKeys[k]);
    }
    getInitLocalState() {
        return (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.Immutable)({});
    }
    getReducer() {
        return (resourcesInfo, action, builderFullState) => {
            switch (action.type) {
                case ActionKeys.AddResource:
                    return resourcesInfo.set(action.resourceKey, action.resourceItemInfo);
                case ActionKeys.UpdateResource:
                    return resourcesInfo.set(action.resourceKey, action.resourceItemInfo);
                case ActionKeys.ClearResources:
                    const tempResourceInfo = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.Immutable)({});
                    return tempResourceInfo;
                default:
                    return resourcesInfo;
            }
        };
    }
    getStoreKey() {
        return 'resourcesInfo';
    }
}


/***/ }),

/***/ "./jimu-for-builder/lib/builder-state-store-extension.ts":
/*!***************************************************************!*\
  !*** ./jimu-for-builder/lib/builder-state-store-extension.ts ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BuilderStateActionTypes: () => (/* binding */ ActionKeys),
/* harmony export */   builderActionKeys: () => (/* binding */ ActionKeys),
/* harmony export */   builderActions: () => (/* binding */ actions),
/* harmony export */   "default": () => (/* binding */ BuilderStateReduxStoreExtension)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");

var ActionKeys;
(function (ActionKeys) {
    ActionKeys["SelectTemplate"] = "SELECT_TEMPLATE";
    ActionKeys["OpenChooseWidgetPopup"] = "OPEN_CHOOSE_WIDGET_POPUP";
    ActionKeys["CloseChooseWidgetPopup"] = "CLOSE_CHOOSE_WIDGET_POPUP";
    ActionKeys["WidgetSettingClassLoaded"] = "WIDGET_SETTING_CLASS_LOADED";
    ActionKeys["WidgetsRemoved"] = "WIDGETS_REMOVED";
    ActionKeys["WidgetsAdded"] = "WIDGETS_ADDED";
    ActionKeys["ChangeCurrentApp"] = "CHANGE_CURRENT_APP";
    ActionKeys["RefreshAppList"] = "REFRSH_APPLIST";
    ActionKeys["SetLayoutTools"] = "SET_LAYOUT_TOOLS";
    ActionKeys["StartGuide"] = "START_GUIDE";
    ActionKeys["StopGuide"] = "STOP_GUIDE";
    ActionKeys["WidgetSettingI18nMessageLoaded"] = "WIDGET_SETTING_I18N_MESSAGE_LOADED";
    ActionKeys["ConfirmDeleteContentChanged"] = "CONFIRM_DELETE_CONTENT_CHANGED";
})(ActionKeys || (ActionKeys = {}));

const actions = {
    selectTemplate: (templateName) => {
        return {
            type: ActionKeys.SelectTemplate,
            templateName: templateName
        };
    },
    refreshAppListAction: (isRefresh) => {
        return {
            type: ActionKeys.RefreshAppList,
            isRefresh: isRefresh
        };
    },
    openChooseWidgetPopup: (layoutId, layoutItemId) => {
        return {
            type: ActionKeys.OpenChooseWidgetPopup,
            layoutId: layoutId,
            layoutItemId: layoutItemId
        };
    },
    closeChooseWidgetPopup: () => {
        return {
            type: ActionKeys.CloseChooseWidgetPopup
        };
    },
    widgetSettingClassLoaded: (wigetUri) => {
        return {
            type: ActionKeys.WidgetSettingClassLoaded,
            wigetUri
        };
    },
    widgetsAdded: (widgets) => {
        return {
            type: ActionKeys.WidgetsAdded,
            widgets
        };
    },
    widgetsRemoved: (widgetIds) => {
        return {
            type: ActionKeys.WidgetsRemoved,
            widgetIds
        };
    },
    changeCurrentApp: (appId) => {
        return {
            type: ActionKeys.ChangeCurrentApp,
            appId: appId
        };
    },
    setLayoutTools: (tools) => {
        return {
            type: ActionKeys.SetLayoutTools,
            tools: tools
        };
    },
    startGuide: (guideId) => {
        return {
            type: ActionKeys.StartGuide,
            guideId: guideId
        };
    },
    stopGuide: () => {
        return {
            type: ActionKeys.StopGuide
        };
    },
    widgetSettingI18nMessageLoaded: (widgetName, i18nMessages) => {
        return {
            type: ActionKeys.WidgetSettingI18nMessageLoaded,
            widgetName,
            i18nMessages
        };
    },
    confirmDeleteContentChanged: (itemToDelete) => {
        return {
            type: ActionKeys.ConfirmDeleteContentChanged,
            itemToDelete
        };
    }
};

class BuilderStateReduxStoreExtension {
    constructor() {
        this.id = 'builder-state-redux-store-extension';
    }
    getActions() {
        return Object.keys(ActionKeys).map(k => ActionKeys[k]);
    }
    getInitLocalState() {
        return (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.Immutable)({
            templateName: null,
            showChooseWidgetPopup: false,
            currentAppId: null,
            refreshAppList: false,
            isMobile: false,
            currentGuideId: null,
            widgetSettingI18nMessages: (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.Immutable)({}),
            widgetsSettingClassStatus: (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.Immutable)({})
        });
    }
    getReducer() {
        return (builderState, action, builderFullState) => {
            // let s;
            switch (action.type) {
                case ActionKeys.SelectTemplate:
                    return builderState.set('templateName', action.templateName);
                case ActionKeys.OpenChooseWidgetPopup:
                    return builderState.set('showChooseWidgetPopup', true)
                        .set('currentLayout', (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.Immutable)({
                        layoutId: action.layoutId,
                        layoutItemId: action.layoutItemId
                    }));
                case ActionKeys.CloseChooseWidgetPopup:
                    return builderState.set('showChooseWidgetPopup', false);
                case ActionKeys.WidgetSettingClassLoaded:
                    builderState = builderState.setIn(['widgetsSettingClassStatus', action.wigetUri], true);
                    getWidgetIdsByUri(builderFullState, action.wigetUri).forEach(wId => {
                        builderState = builderState.setIn(['widgetsSettingRuntimeInfo', wId, 'isClassLoaded'], true);
                    });
                    return builderState;
                case ActionKeys.WidgetsAdded:
                    action.widgets.forEach(w => {
                        if (builderState.widgetsSettingClassStatus[w.widgetUri]) {
                            builderState = builderState.setIn(['widgetsSettingRuntimeInfo', w.widgetId, 'isClassLoaded'], true);
                        }
                    });
                    return builderState;
                case ActionKeys.WidgetsRemoved:
                    return builderState.set('widgetsSettingRuntimeInfo', builderState.widgetsSettingRuntimeInfo.without(...action.widgetIds));
                case ActionKeys.ChangeCurrentApp:
                    builderState = this.getInitLocalState();
                    return builderState.set('currentAppId', action.appId).set('widgetsSettingRuntimeInfo', {});
                case ActionKeys.RefreshAppList:
                    return builderState.set('refreshAppList', action.isRefresh);
                case ActionKeys.SetLayoutTools:
                    return builderState.set('toolbarConfig', action.tools);
                case ActionKeys.StartGuide:
                    return builderState.set('currentGuideId', action.guideId);
                case ActionKeys.StopGuide:
                    return builderState.set('currentGuideId', null);
                case ActionKeys.WidgetSettingI18nMessageLoaded:
                    return builderState.setIn(['widgetSettingI18nMessages', action.widgetName], action.i18nMessages);
                case ActionKeys.ConfirmDeleteContentChanged: {
                    const { itemToDelete } = action;
                    return builderState.set('contentToDelete', itemToDelete);
                }
                default:
                    return builderState;
            }
        };
    }
    getStoreKey() {
        return 'builder';
    }
}
function getWidgetIdsByUri(builderFullState, wigetUri) {
    var _a, _b;
    const widgets = ((_b = (_a = builderFullState.appStateInBuilder) === null || _a === void 0 ? void 0 : _a.appConfig) === null || _b === void 0 ? void 0 : _b.widgets) || {};
    const widgetIds = Object.keys(widgets).filter(wId => widgets[wId].uri === wigetUri);
    return widgetIds;
}


/***/ }),

/***/ "./jimu-for-builder/lib/init.ts":
/*!**************************************!*\
  !*** ./jimu-for-builder/lib/init.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   init: () => (/* binding */ init)
/* harmony export */ });
/* harmony import */ var _lib_app_message_manager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/app-message-manager */ "./jimu-for-builder/lib/app-message-manager.tsx");
/* harmony import */ var _lib_message_actions_filter_data_record_action_setting__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../lib/message-actions/filter-data-record-action-setting */ "./jimu-for-builder/lib/message-actions/filter-data-record-action-setting.tsx");
/* harmony import */ var _lib_message_actions_select_data_record_action_setting__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../lib/message-actions/select-data-record-action-setting */ "./jimu-for-builder/lib/message-actions/select-data-record-action-setting.tsx");
/* harmony import */ var _builder_locale__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./builder-locale */ "./jimu-for-builder/lib/builder-locale.ts");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};




function init() {
    return __awaiter(this, void 0, void 0, function* () {
        registerActionSettingClassInfoForBuilder();
        yield (0,_builder_locale__WEBPACK_IMPORTED_MODULE_3__.loadI18nMessage)();
        return yield Promise.resolve({});
    });
}
function registerActionSettingClassInfoForBuilder() {
    _lib_app_message_manager__WEBPACK_IMPORTED_MODULE_0__["default"].getInstance().registerActionRawSettingClass('filter-data-record-action', _lib_message_actions_filter_data_record_action_setting__WEBPACK_IMPORTED_MODULE_1__["default"]);
    _lib_app_message_manager__WEBPACK_IMPORTED_MODULE_0__["default"].getInstance().registerActionRawSettingClass('select-data-record-action', _lib_message_actions_select_data_record_action_setting__WEBPACK_IMPORTED_MODULE_2__["default"]);
}


/***/ }),

/***/ "./jimu-for-builder/lib/message-actions/filter-data-record-action-setting.tsx":
/*!************************************************************************************!*\
  !*** ./jimu-for-builder/lib/message-actions/filter-data-record-action-setting.tsx ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");
/* harmony import */ var jimu_theme__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! jimu-theme */ "jimu-theme");
/* harmony import */ var _translations_default__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../translations/default */ "./jimu-for-builder/lib/translations/default.ts");
/* harmony import */ var _init__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./init */ "./jimu-for-builder/lib/message-actions/init.ts");
/* harmony import */ var jimu_icons_outlined_data_link_combined__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! jimu-icons/outlined/data/link-combined */ "./jimu-icons/outlined/data/link-combined.tsx");
/** @jsx jsx */





class _FilterDataRecordActionSetting extends jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.PureComponent {
    constructor(props) {
        super(props);
        this.modalStyle = {
            position: 'absolute',
            top: '0',
            bottom: '0',
            width: '259px',
            height: 'auto',
            borderRight: '',
            borderBottom: '',
            paddingBottom: '1px'
        };
        this.getInitConfig = () => {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
            const { messageWidgetId, messageType } = this.props;
            const dsM = jimu_core__WEBPACK_IMPORTED_MODULE_0__.DataSourceManager.getInstance();
            let messageUseDataSource = null;
            let actionUseDataSource = null;
            let enableQueryWithCurrentExtent = true;
            if (!this.props.config.messageUseDataSource) {
                const ds = (0,_init__WEBPACK_IMPORTED_MODULE_3__.getDsByWidgetId)(messageWidgetId, messageType);
                if ((ds === null || ds === void 0 ? void 0 : ds[0]) && (ds === null || ds === void 0 ? void 0 : ds.length) === 1) {
                    const dsJson = (_a = dsM.getDataSource(ds === null || ds === void 0 ? void 0 : ds[0].dataSourceId)) === null || _a === void 0 ? void 0 : _a.getDataSourceJson();
                    if (dsJson && ((dsJson.type === this.state.ArcGISDataSourceTypes.WebMap) || (dsJson.type === this.state.ArcGISDataSourceTypes.WebScene))) {
                        messageUseDataSource = null;
                    }
                    else {
                        messageUseDataSource = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.Immutable)({
                            dataSourceId: (_b = ds === null || ds === void 0 ? void 0 : ds[0]) === null || _b === void 0 ? void 0 : _b.dataSourceId,
                            mainDataSourceId: (_c = ds === null || ds === void 0 ? void 0 : ds[0]) === null || _c === void 0 ? void 0 : _c.mainDataSourceId,
                            dataViewId: (_d = ds === null || ds === void 0 ? void 0 : ds[0]) === null || _d === void 0 ? void 0 : _d.dataViewId,
                            rootDataSourceId: (_e = ds === null || ds === void 0 ? void 0 : ds[0]) === null || _e === void 0 ? void 0 : _e.rootDataSourceId
                        });
                    }
                }
            }
            else {
                messageUseDataSource = (0,_init__WEBPACK_IMPORTED_MODULE_3__.checkAndGetInitUseDataSource)({
                    widgetId: messageWidgetId,
                    oldUseDataSource: this.props.config.messageUseDataSource,
                    messageType: messageType,
                    arcGISDataSourceTypes: this.state.ArcGISDataSourceTypes
                });
            }
            if (this.props.config.enableQueryWithCurrentExtent !== undefined) {
                enableQueryWithCurrentExtent = this.props.config.enableQueryWithCurrentExtent;
            }
            if (!this.props.config.actionUseDataSource) {
                actionUseDataSource = null;
            }
            else {
                const actionDataSourceId = (_g = (_f = this.props.config) === null || _f === void 0 ? void 0 : _f.actionUseDataSource) === null || _g === void 0 ? void 0 : _g.dataSourceId;
                const actionRootDataSourceId = (_j = (_h = this.props.config) === null || _h === void 0 ? void 0 : _h.actionUseDataSource) === null || _j === void 0 ? void 0 : _j.rootDataSourceId;
                const dsJson = ((_k = dsM.getDataSource(actionDataSourceId)) === null || _k === void 0 ? void 0 : _k.getDataSourceJson()) ||
                    ((_l = dsM.getDataSource(actionRootDataSourceId)) === null || _l === void 0 ? void 0 : _l.getDataSourceJson());
                if (dsJson) {
                    actionUseDataSource = this.props.config.actionUseDataSource;
                }
                else {
                    actionUseDataSource = null;
                }
            }
            if (actionUseDataSource && actionUseDataSource.dataSourceId) {
                return {
                    messageUseDataSource: messageUseDataSource,
                    actionUseDataSource: actionUseDataSource,
                    sqlExprObj: this.props.config.sqlExprObj,
                    enableQueryWithCurrentExtent: enableQueryWithCurrentExtent
                };
            }
            else {
                return {
                    messageUseDataSource: messageUseDataSource,
                    actionUseDataSource: actionUseDataSource,
                    sqlExprObj: null,
                    enableQueryWithCurrentExtent: enableQueryWithCurrentExtent
                };
            }
        };
        this.handleTriggerLayerChange = (useDataSources) => {
            if (useDataSources && useDataSources.length > 0) {
                this.handleTriggerLayerSelected(useDataSources[0]);
            }
            else {
                this.handleRemoveLayerForTriggerLayer();
            }
        };
        this.handleActionLayerChange = (useDataSources) => {
            if (useDataSources && useDataSources.length > 0) {
                this.handleActionLayerSelected(useDataSources[0]);
            }
            else {
                this.handleRemoveLayerForActionLayer();
            }
        };
        this.handleTriggerLayerSelected = (currentSelectedDs) => {
            this.props.onSettingChange({
                actionId: this.props.actionId,
                config: this.props.config.set('messageUseDataSource', currentSelectedDs)
            });
        };
        this.handleActionLayerSelected = (currentSelectedDs) => {
            this.props.onSettingChange({
                actionId: this.props.actionId,
                config: this.props.config.set('actionUseDataSource', currentSelectedDs).set('sqlExprObj', null)
            });
        };
        this.handleRemoveLayerForTriggerLayer = () => {
            this.props.onSettingChange({
                actionId: this.props.actionId,
                config: this.props.config.set('messageUseDataSource', null)
            });
        };
        this.handleRemoveLayerForActionLayer = () => {
            this.props.onSettingChange({
                actionId: this.props.actionId,
                config: this.props.config.set('actionUseDataSource', null).set('sqlExprObj', null)
            });
        };
        this.showSqlExprPopup = () => {
            this.setState({ isSqlExprShow: true });
        };
        this.toggleSqlExprPopup = () => {
            this.setState({ isSqlExprShow: !this.state.isSqlExprShow });
        };
        this.onSqlExprBuilderChange = (sqlExprObj) => {
            this.props.onSettingChange({
                actionId: this.props.actionId,
                config: this.props.config.set('sqlExprObj', sqlExprObj)
            });
        };
        this.onMessageFieldSelected = (allSelectedFields, ds) => {
            this.props.onSettingChange({
                actionId: this.props.actionId,
                config: this.props.config.set('messageUseDataSource', {
                    dataSourceId: this.props.config.messageUseDataSource.dataSourceId,
                    mainDataSourceId: this.props.config.messageUseDataSource.mainDataSourceId,
                    dataViewId: this.props.config.messageUseDataSource.dataViewId,
                    rootDataSourceId: this.props.config.messageUseDataSource.rootDataSourceId,
                    fields: allSelectedFields.map(f => f.jimuName)
                })
            });
        };
        this.onActionFieldSelected = (allSelectedFields, ds) => {
            this.props.onSettingChange({
                actionId: this.props.actionId,
                config: this.props.config.set('actionUseDataSource', {
                    dataSourceId: this.props.config.actionUseDataSource.dataSourceId,
                    mainDataSourceId: this.props.config.actionUseDataSource.mainDataSourceId,
                    dataViewId: this.props.config.actionUseDataSource.dataViewId,
                    rootDataSourceId: this.props.config.actionUseDataSource.rootDataSourceId,
                    fields: allSelectedFields.map(f => f.jimuName)
                })
            });
        };
        this.swicthEnabledDataRelationShip = (checked) => {
            this.props.onSettingChange({
                actionId: this.props.actionId,
                config: this.props.config.set('enabledDataRelationShip', checked)
            });
        };
        this.swicthEnabledQueryWithCurrentExtent = (checked) => {
            this.props.onSettingChange({
                actionId: this.props.actionId,
                config: this.props.config.set('enableQueryWithCurrentExtent', checked)
            });
        };
        this.checkIsDisableDataView = (widgetId) => {
            var _a, _b, _c, _d;
            if (this.props.messageType === jimu_core__WEBPACK_IMPORTED_MODULE_0__.MessageType.DataRecordsSelectionChange) {
                return true;
            }
            const appConfig = (_b = (_a = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().getState()) === null || _a === void 0 ? void 0 : _a.appStateInBuilder) === null || _b === void 0 ? void 0 : _b.appConfig;
            const widgetJson = (_c = appConfig === null || appConfig === void 0 ? void 0 : appConfig.widgets) === null || _c === void 0 ? void 0 : _c[widgetId];
            if (widgetJson) {
                const widgetLabel = (_d = widgetJson === null || widgetJson === void 0 ? void 0 : widgetJson.manifest) === null || _d === void 0 ? void 0 : _d.label;
                if (widgetLabel === 'Map') {
                    return true;
                }
                else {
                    return false;
                }
            }
            else {
                return false;
            }
        };
        this.modalStyle.borderRight = '1px solid black';
        this.modalStyle.borderBottom = '1px solid black';
        this.state = {
            isShowLayerList: false,
            currentLayerType: null,
            isSqlExprShow: false
        };
    }
    componentDidMount() {
        jimu_core__WEBPACK_IMPORTED_MODULE_0__.moduleLoader.loadModules([
            'jimu-ui',
            'jimu-ui/advanced/setting-components',
            'jimu-ui/advanced/data-source-selector',
            'jimu-arcgis',
            'jimu-ui/advanced/sql-expression-builder'
        ]).then(modules => {
            this.setState({
                Button: modules[0].Button,
                Icon: modules[0].Icon,
                Switch: modules[0].Switch,
                Collapse: modules[0].Collapse,
                SettingSection: modules[1].SettingSection,
                SettingRow: modules[1].SettingRow,
                FieldSelector: modules[2].FieldSelector,
                DataSourceSelector: modules[2].DataSourceSelector,
                ArcGISDataSourceTypes: modules[3].ArcGISDataSourceTypes,
                SqlExpressionBuilderPopup: modules[4].SqlExpressionBuilderPopup,
                DSSelectorTypes: (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.Immutable)([jimu_core__WEBPACK_IMPORTED_MODULE_0__.AllDataSourceTypes.FeatureLayer, jimu_core__WEBPACK_IMPORTED_MODULE_0__.AllDataSourceTypes.SceneLayer])
            }, () => {
                const initConfig = this.getInitConfig();
                this.props.onSettingChange({
                    actionId: this.props.actionId,
                    config: this.props.config.set('messageUseDataSource', initConfig.messageUseDataSource)
                        .set('actionUseDataSource', initConfig.actionUseDataSource).set('sqlExprObj', initConfig.sqlExprObj)
                });
            });
        });
    }
    getStyle(theme) {
        return (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.css) `
      .setting-header {
        padding: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(10)} ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(16)} ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(0)} ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(16)}
      }

      .deleteIcon {
        cursor: pointer;
        opacity: .8;
      }

      .deleteIcon:hover {
        opacity: 1;
      }

      .sql-expr-display {
        width: 100%;
        height: auto;
        min-height: 60px;
        line-height: 25px;
        padding: 3px 5px;
        color: ${theme.colors.palette.dark[300]};
        border: 1px solid ${theme.colors.palette.light[500]};
      }

      .relate-panel-left {
        flex: auto;
        overflow: hidden;
        .action-select-chooser {
          margin-top: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(12)};
        }
      }
    `;
    }
    render() {
        var _a, _b;
        const { Button, Icon, Switch, Collapse, SettingSection, SettingRow, FieldSelector, DataSourceSelector, ArcGISDataSourceTypes, SqlExpressionBuilderPopup } = this.state;
        const { messageWidgetId, messageType, config, theme } = this.props;
        if (!Button || !Icon || !Switch || !Collapse || !SettingSection || !SettingRow || !FieldSelector ||
            !DataSourceSelector || !ArcGISDataSourceTypes || !SqlExpressionBuilderPopup) {
            return null;
        }
        const triggerDsSelectorSourceData = (0,_init__WEBPACK_IMPORTED_MODULE_3__.getDsSelectorSourceData)({
            widgetId: messageWidgetId,
            useDataSource: config.messageUseDataSource,
            messageType: messageType,
            arcGISDataSourceTypes: ArcGISDataSourceTypes
        });
        const actionUseDataSourceInstance = config.actionUseDataSource &&
            jimu_core__WEBPACK_IMPORTED_MODULE_0__.DataSourceManager.getInstance().getDataSource(config.actionUseDataSource.dataSourceId);
        if (this.props.messageType === jimu_core__WEBPACK_IMPORTED_MODULE_0__.MessageType.ExtentChange) {
            return ((0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { css: this.getStyle(this.props.theme) },
                (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(SettingSection, { title: this.props.intl.formatMessage({ id: 'frameworkAction_ActionLayer', defaultMessage: _translations_default__WEBPACK_IMPORTED_MODULE_2__["default"].frameworkAction_ActionLayer }) },
                    (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(DataSourceSelector, { types: this.state.DSSelectorTypes, useDataSources: this.props.config.actionUseDataSource ? (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.Immutable)([this.props.config.actionUseDataSource]) : (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.Immutable)([]), closeDataSourceListOnChange: true, hideAddDataButton: true, hideTypeDropdown: true, mustUseDataSource: true, onChange: this.handleActionLayerChange, widgetId: this.props.widgetId, enableToSelectOutputDsFromSelf: true })),
                (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(SettingSection, { title: this.props.intl.formatMessage({ id: 'frameworkAction_Conditions', defaultMessage: _translations_default__WEBPACK_IMPORTED_MODULE_2__["default"].frameworkAction_Conditions }) },
                    (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(SettingRow, { label: this.props.intl.formatMessage({ id: 'frameworkAction_QueryByExtent', defaultMessage: _translations_default__WEBPACK_IMPORTED_MODULE_2__["default"].frameworkAction_QueryByExtent }) },
                        (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(Switch, { checked: this.props.config.enableQueryWithCurrentExtent, onChange: evt => { this.swicthEnabledQueryWithCurrentExtent(evt.target.checked); } })),
                    (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(SettingRow, null,
                        (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(Button, { className: 'p-0 text-left', type: 'link', disabled: !this.props.config.actionUseDataSource, onClick: this.showSqlExprPopup, title: this.props.intl.formatMessage({ id: 'frameworkAction_MoreConditions', defaultMessage: _translations_default__WEBPACK_IMPORTED_MODULE_2__["default"].frameworkAction_MoreConditions }) }, this.props.intl.formatMessage({ id: 'frameworkAction_MoreConditions', defaultMessage: _translations_default__WEBPACK_IMPORTED_MODULE_2__["default"].frameworkAction_MoreConditions }))),
                    (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(SettingRow, null,
                        this.props.config.actionUseDataSource && (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_core__WEBPACK_IMPORTED_MODULE_0__.DataSourceComponent, { useDataSource: this.props.config.actionUseDataSource }, (ds) => {
                            return ((0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(SqlExpressionBuilderPopup, { dataSource: ds, mode: jimu_core__WEBPACK_IMPORTED_MODULE_0__.SqlExpressionMode.Simple, isOpen: this.state.isSqlExprShow, toggle: this.toggleSqlExprPopup, expression: this.props.config.sqlExprObj, onChange: (sqlExprObj) => { this.onSqlExprBuilderChange(sqlExprObj); }, id: 'filter-widget-sql-expression-builder-popup' }));
                        }),
                        (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'sql-expr-display body-1' }, this.props.config.sqlExprObj && actionUseDataSourceInstance
                            ? jimu_core__WEBPACK_IMPORTED_MODULE_0__.dataSourceUtils.getArcGISSQL(this.props.config.sqlExprObj, actionUseDataSourceInstance).displaySQL
                            : this.props.intl.formatMessage({ id: 'frameworkAction_SetExpression', defaultMessage: _translations_default__WEBPACK_IMPORTED_MODULE_2__["default"].frameworkAction_SetExpression }))))));
        }
        else {
            return ((0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { css: this.getStyle(this.props.theme) },
                (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(SettingSection, { title: this.props.intl.formatMessage({ id: 'frameworkAction_TriggerLayer', defaultMessage: _translations_default__WEBPACK_IMPORTED_MODULE_2__["default"].frameworkAction_TriggerLayer }) },
                    (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(DataSourceSelector, { types: this.state.DSSelectorTypes, useDataSources: triggerDsSelectorSourceData.useDataSources, fromRootDsIds: triggerDsSelectorSourceData.fromRootDsIds, fromDsIds: triggerDsSelectorSourceData.fromDsIds, closeDataSourceListOnChange: true, disableRemove: () => triggerDsSelectorSourceData.isReadOnly, disableDataSourceList: triggerDsSelectorSourceData.isReadOnly, hideAddDataButton: true, hideTypeDropdown: true, mustUseDataSource: true, onChange: this.handleTriggerLayerChange, widgetId: this.props.messageWidgetId, disableDataView: true, hideDataView: this.checkIsDisableDataView(this.props.messageWidgetId), enableToSelectOutputDsFromSelf: true })),
                (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(SettingSection, { title: this.props.intl.formatMessage({ id: 'frameworkAction_ActionLayer', defaultMessage: _translations_default__WEBPACK_IMPORTED_MODULE_2__["default"].frameworkAction_ActionLayer }) },
                    (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(DataSourceSelector, { types: this.state.DSSelectorTypes, useDataSources: this.props.config.actionUseDataSource ? (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.Immutable)([this.props.config.actionUseDataSource]) : (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.Immutable)([]), closeDataSourceListOnChange: true, hideAddDataButton: true, hideTypeDropdown: true, mustUseDataSource: true, onChange: this.handleActionLayerChange, widgetId: this.props.widgetId, enableToSelectOutputDsFromSelf: true })),
                this.props.config && this.props.config.actionUseDataSource && this.props.config.messageUseDataSource &&
                    (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(SettingSection, { title: this.props.intl.formatMessage({ id: 'frameworkAction_Conditions', defaultMessage: _translations_default__WEBPACK_IMPORTED_MODULE_2__["default"].frameworkAction_Conditions }) },
                        (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(SettingRow, { label: this.props.intl.formatMessage({ id: 'frameworkAction_RelateMessage', defaultMessage: _translations_default__WEBPACK_IMPORTED_MODULE_2__["default"].frameworkAction_RelateMessage }) },
                            (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(Switch, { checked: this.props.config.enabledDataRelationShip, onChange: evt => { this.swicthEnabledDataRelationShip(evt.target.checked); } })),
                        (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(SettingRow, null,
                            (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(Collapse, { isOpen: this.props.config.enabledDataRelationShip, className: 'w-100' },
                                (0,_init__WEBPACK_IMPORTED_MODULE_3__.checkTrigerLayerIsSameToActionLayer)(config) &&
                                    (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'w-100 border p-1 mr-2' }, this.props.intl.formatMessage({ id: 'frameworkAction_AutoBind', defaultMessage: _translations_default__WEBPACK_IMPORTED_MODULE_2__["default"].frameworkAction_AutoBind })),
                                !(0,_init__WEBPACK_IMPORTED_MODULE_3__.checkTrigerLayerIsSameToActionLayer)(config) && (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'w-100 d-flex align-items-center' },
                                    (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'd-flex flex-column relate-panel-left' },
                                        (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(FieldSelector, { className: 'w-100', useDataSources: (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.Immutable)([(_a = this.props.config.messageUseDataSource) === null || _a === void 0 ? void 0 : _a.asMutable({ deep: true })]), isDataSourceDropDownHidden: true, placeholder: this.props.intl.formatMessage({ id: 'frameworkAction_TriggerLayerField', defaultMessage: _translations_default__WEBPACK_IMPORTED_MODULE_2__["default"].frameworkAction_TriggerLayerField }), onChange: this.onMessageFieldSelected, useDropdown: true, isSearchInputHidden: true, selectedFields: this.props.config.messageUseDataSource && this.props.config.messageUseDataSource.fields
                                                ? this.props.config.messageUseDataSource.fields
                                                : (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.Immutable)([]) }),
                                        (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(FieldSelector, { className: 'w-100 action-select-chooser', placeholder: this.props.intl.formatMessage({ id: 'frameworkAction_ActionLayerField', defaultMessage: _translations_default__WEBPACK_IMPORTED_MODULE_2__["default"].frameworkAction_ActionLayerField }), useDataSources: (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.Immutable)([(_b = this.props.config.actionUseDataSource) === null || _b === void 0 ? void 0 : _b.asMutable({ deep: true })]), isDataSourceDropDownHidden: true, onChange: this.onActionFieldSelected, useDropdown: true, isSearchInputHidden: true, selectedFields: this.props.config.actionUseDataSource && this.props.config.actionUseDataSource.fields
                                                ? this.props.config.actionUseDataSource.fields
                                                : (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.Immutable)([]) })),
                                    (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_icons_outlined_data_link_combined__WEBPACK_IMPORTED_MODULE_4__.LinkCombinedOutlined, { autoFlip: true, className: 'flex-none', width: 12, height: 40, color: theme.colors.dark[400] })))),
                        (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(SettingRow, null,
                            (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(Button, { type: 'link', disabled: !this.props.config.actionUseDataSource, className: 'w-100 d-flex justify-content-start', onClick: this.showSqlExprPopup },
                                (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'w-100 text-truncate', style: { textAlign: 'start' } }, this.props.intl.formatMessage({ id: 'frameworkAction_MoreConditions', defaultMessage: _translations_default__WEBPACK_IMPORTED_MODULE_2__["default"].frameworkAction_MoreConditions }))),
                            this.props.config.actionUseDataSource && (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_core__WEBPACK_IMPORTED_MODULE_0__.DataSourceComponent, { useDataSource: this.props.config.actionUseDataSource }, (ds) => {
                                return ((0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(SqlExpressionBuilderPopup, { dataSource: ds, mode: jimu_core__WEBPACK_IMPORTED_MODULE_0__.SqlExpressionMode.Simple, isOpen: this.state.isSqlExprShow, toggle: this.toggleSqlExprPopup, expression: this.props.config.sqlExprObj, onChange: (sqlExprObj) => { this.onSqlExprBuilderChange(sqlExprObj); }, id: 'filter-widget-sql-expression-builder-popup' }));
                            })),
                        (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(SettingRow, null,
                            (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'sql-expr-display' }, this.props.config.sqlExprObj && actionUseDataSourceInstance
                                ? jimu_core__WEBPACK_IMPORTED_MODULE_0__.dataSourceUtils.getArcGISSQL(this.props.config.sqlExprObj, actionUseDataSourceInstance).displaySQL
                                : this.props.intl.formatMessage({ id: 'frameworkAction_SetExpression', defaultMessage: _translations_default__WEBPACK_IMPORTED_MODULE_2__["default"].frameworkAction_SetExpression }))))));
        }
    }
}
_FilterDataRecordActionSetting.defaultProps = {
    config: (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.Immutable)({
        messageUseDataSource: null,
        actionUseDataSource: null,
        sqlExprObj: null,
        enabledDataRelationShip: true,
        enableQueryWithCurrentExtent: true
    })
};
const mapStateToProps = (state) => {
    return {
        dataSources: state.appStateInBuilder && state.appStateInBuilder.appConfig && state.appStateInBuilder.appConfig.dataSources,
        dataSourcesInfo: state.appStateInBuilder && state.appStateInBuilder.dataSourcesInfo
    };
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (jimu_core__WEBPACK_IMPORTED_MODULE_0__.ReactRedux.connect(mapStateToProps)((0,jimu_theme__WEBPACK_IMPORTED_MODULE_1__.withTheme)(_FilterDataRecordActionSetting)));


/***/ }),

/***/ "./jimu-for-builder/lib/message-actions/init.ts":
/*!******************************************************!*\
  !*** ./jimu-for-builder/lib/message-actions/init.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   checkAndGetInitUseDataSource: () => (/* binding */ checkAndGetInitUseDataSource),
/* harmony export */   checkIsOnlyOneDs: () => (/* binding */ checkIsOnlyOneDs),
/* harmony export */   checkIsSameRootDataSourceId: () => (/* binding */ checkIsSameRootDataSourceId),
/* harmony export */   checkTrigerLayerIsSameToActionLayer: () => (/* binding */ checkTrigerLayerIsSameToActionLayer),
/* harmony export */   getDsByWidgetId: () => (/* binding */ getDsByWidgetId),
/* harmony export */   getDsIdsByWidgetId: () => (/* binding */ getDsIdsByWidgetId),
/* harmony export */   getDsRootIdsByWidgetId: () => (/* binding */ getDsRootIdsByWidgetId),
/* harmony export */   getDsSelectorSourceData: () => (/* binding */ getDsSelectorSourceData),
/* harmony export */   getMessageCarryData: () => (/* binding */ getMessageCarryData),
/* harmony export */   getMessageCarryDataByWidgetId: () => (/* binding */ getMessageCarryDataByWidgetId),
/* harmony export */   initOutputDataSources: () => (/* binding */ initOutputDataSources),
/* harmony export */   isUseOutputDs: () => (/* binding */ isUseOutputDs)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");
/** @jsx jsx */

function getDsSelectorSourceData(props) {
    var _a, _b, _c;
    const { widgetId, useDataSource, messageType, arcGISDataSourceTypes } = props;
    const appConfig = (_b = (_a = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().getState()) === null || _a === void 0 ? void 0 : _a.appStateInBuilder) === null || _b === void 0 ? void 0 : _b.appConfig;
    const widgetJson = (_c = appConfig === null || appConfig === void 0 ? void 0 : appConfig.widgets) === null || _c === void 0 ? void 0 : _c[widgetId];
    const dsRootIds = getDsRootIdsByWidgetId(widgetId, arcGISDataSourceTypes);
    const messageCarryData = getMessageCarryData(widgetId, messageType);
    const isReadOnly = checkIsOnlyOneDs(widgetJson, messageCarryData, dsRootIds);
    const useDataSources = (useDataSource && useDataSource.dataSourceId)
        ? (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.Immutable)([useDataSource.asMutable({ deep: true })])
        : null;
    const fromDsIds = dsRootIds ? null : getDsIdsByWidgetId(widgetId, messageType);
    const dsSelectorSource = {
        isReadOnly: isReadOnly,
        useDataSources: useDataSources,
        fromRootDsIds: dsRootIds,
        fromDsIds: fromDsIds
    };
    return dsSelectorSource;
}
function checkIsOnlyOneDs(widgetJson, messageCarryData, dsRootIds) {
    const outputDs = (widgetJson === null || widgetJson === void 0 ? void 0 : widgetJson.outputDataSources) || [];
    const useDs = (widgetJson === null || widgetJson === void 0 ? void 0 : widgetJson.useDataSources) || [];
    if (dsRootIds) {
        return false;
    }
    switch (messageCarryData) {
        case jimu_core__WEBPACK_IMPORTED_MODULE_0__.MessageCarryData.OutputDataSource:
            return (outputDs === null || outputDs === void 0 ? void 0 : outputDs.length) === 1;
        case jimu_core__WEBPACK_IMPORTED_MODULE_0__.MessageCarryData.UseDataSource:
            return (useDs === null || useDs === void 0 ? void 0 : useDs.length) === 1;
        case jimu_core__WEBPACK_IMPORTED_MODULE_0__.MessageCarryData.BothDataSource:
            const dsLength = outputDs.length + useDs.length;
            return dsLength === 1;
    }
}
function getDsRootIdsByWidgetId(wId, arcGISDataSourceTypes) {
    var _a, _b, _c, _d;
    const appConfig = (_b = (_a = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().getState()) === null || _a === void 0 ? void 0 : _a.appStateInBuilder) === null || _b === void 0 ? void 0 : _b.appConfig;
    const widgetJson = (_c = appConfig === null || appConfig === void 0 ? void 0 : appConfig.widgets) === null || _c === void 0 ? void 0 : _c[wId];
    const rootIds = [];
    const dsM = jimu_core__WEBPACK_IMPORTED_MODULE_0__.DataSourceManager.getInstance();
    (_d = widgetJson === null || widgetJson === void 0 ? void 0 : widgetJson.useDataSources) === null || _d === void 0 ? void 0 : _d.forEach((useDS) => {
        const ds = dsM.getDataSource(useDS.dataSourceId);
        if ((ds === null || ds === void 0 ? void 0 : ds.type) === arcGISDataSourceTypes.WebMap || (ds === null || ds === void 0 ? void 0 : ds.type) === arcGISDataSourceTypes.WebScene) { // is root ds
            rootIds.push(useDS.dataSourceId);
        }
    });
    return rootIds.length > 0 ? (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.Immutable)(rootIds) : null;
}
function getDsIdsByWidgetId(wId, messageType) {
    var _a;
    const ds = getDsByWidgetId(wId, messageType);
    return (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.Immutable)((_a = ds === null || ds === void 0 ? void 0 : ds.map((useDS) => useDS === null || useDS === void 0 ? void 0 : useDS.mainDataSourceId)) !== null && _a !== void 0 ? _a : []);
}
function getDsByWidgetId(wId, messageType) {
    var _a, _b, _c;
    const messageCarryData = getMessageCarryData(wId, messageType);
    const appConfig = (_b = (_a = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().getState()) === null || _a === void 0 ? void 0 : _a.appStateInBuilder) === null || _b === void 0 ? void 0 : _b.appConfig;
    const widgetJson = (_c = appConfig === null || appConfig === void 0 ? void 0 : appConfig.widgets) === null || _c === void 0 ? void 0 : _c[wId];
    const useDataSources = (widgetJson === null || widgetJson === void 0 ? void 0 : widgetJson.useDataSources) || (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.Immutable)([]);
    const outputDataSources = initOutputDataSources(widgetJson === null || widgetJson === void 0 ? void 0 : widgetJson.outputDataSources) || (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.Immutable)([]);
    const bothDatasource = useDataSources === null || useDataSources === void 0 ? void 0 : useDataSources.asMutable({ deep: true }).concat(outputDataSources === null || outputDataSources === void 0 ? void 0 : outputDataSources.asMutable({ deep: true }));
    switch (messageCarryData) {
        case jimu_core__WEBPACK_IMPORTED_MODULE_0__.MessageCarryData.OutputDataSource:
            return outputDataSources;
        case jimu_core__WEBPACK_IMPORTED_MODULE_0__.MessageCarryData.UseDataSource:
            return useDataSources;
        case jimu_core__WEBPACK_IMPORTED_MODULE_0__.MessageCarryData.BothDataSource:
            return (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.Immutable)(bothDatasource);
    }
}
function isUseOutputDs(wId, messageType) {
    const messageCarryData = getMessageCarryDataByWidgetId(wId, messageType);
    return messageCarryData === jimu_core__WEBPACK_IMPORTED_MODULE_0__.MessageCarryData.OutputDataSource;
}
/**
 * Get MessageCarryData by widget id and messageType
*/
function getMessageCarryData(wId, messageType) {
    const messageCarryData = getMessageCarryDataByWidgetId(wId, messageType);
    if (!messageCarryData) {
        return jimu_core__WEBPACK_IMPORTED_MODULE_0__.MessageCarryData.UseDataSource;
    }
    else {
        return messageCarryData;
    }
}
function initOutputDataSources(outputDataSources) {
    var _a;
    const ds = (_a = outputDataSources === null || outputDataSources === void 0 ? void 0 : outputDataSources.map(dsId => {
        return {
            dataSourceId: dsId,
            mainDataSourceId: dsId,
            rootDataSourceId: null
        };
    })) !== null && _a !== void 0 ? _a : [];
    return (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.Immutable)(ds);
}
function getMessageCarryDataByWidgetId(wId, messageType) {
    var _a, _b, _c, _d;
    const appConfig = (_b = (_a = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().getState()) === null || _a === void 0 ? void 0 : _a.appStateInBuilder) === null || _b === void 0 ? void 0 : _b.appConfig;
    const widgetJson = (_c = appConfig === null || appConfig === void 0 ? void 0 : appConfig.widgets) === null || _c === void 0 ? void 0 : _c[wId];
    const publishMessages = (_d = widgetJson === null || widgetJson === void 0 ? void 0 : widgetJson.manifest) === null || _d === void 0 ? void 0 : _d.publishMessages;
    let messageCarryData = null;
    publishMessages.forEach(el => {
        const publishMessageProperty = el;
        if ((publishMessageProperty === null || publishMessageProperty === void 0 ? void 0 : publishMessageProperty.messageCarryData) && (publishMessageProperty === null || publishMessageProperty === void 0 ? void 0 : publishMessageProperty.messageType) === messageType) {
            messageCarryData = publishMessageProperty === null || publishMessageProperty === void 0 ? void 0 : publishMessageProperty.messageCarryData;
        }
    });
    return messageCarryData;
}
/**
 * Initialize the useDataSource by comparing the current useDatasources and oldUseDatasources of the widget,
 * if they are the same, use oldDatasources, otherwise update to null
*/
function checkAndGetInitUseDataSource(props) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;
    const { widgetId, oldUseDataSource, messageType, arcGISDataSourceTypes } = props;
    const config = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().getState().appStateInBuilder.appConfig;
    const dsM = jimu_core__WEBPACK_IMPORTED_MODULE_0__.DataSourceManager.getInstance();
    const widgetJson = config.widgets[widgetId];
    let initUseDataSource = null;
    let isMapDs = false;
    const isoldUseDataSourceIsOutputDs = (_b = (_a = dsM.getDataSource(oldUseDataSource.dataSourceId)) === null || _a === void 0 ? void 0 : _a.getDataSourceJson()) === null || _b === void 0 ? void 0 : _b.isOutputFromWidget;
    const ds = getDsByWidgetId(widgetId, messageType);
    const dsId = (ds === null || ds === void 0 ? void 0 : ds[0]) && ((_c = ds === null || ds === void 0 ? void 0 : ds[0]) === null || _c === void 0 ? void 0 : _c.dataSourceId);
    if (!dsId) {
        return null;
    }
    const dsJson = (_d = dsM.getDataSource(dsId)) === null || _d === void 0 ? void 0 : _d.getDataSourceJson();
    if (dsJson && ((dsJson.type === arcGISDataSourceTypes.WebMap) || (dsJson.type === arcGISDataSourceTypes.WebScene))) {
        isMapDs = true;
    }
    if (isMapDs) {
        // webmap or webscene ds
        let isUseOldDs = false;
        if (widgetJson && widgetJson.useDataSources) {
            for (let i = 0; i < widgetJson.useDataSources.length; i++) {
                if (widgetJson.useDataSources[i].dataSourceId === oldUseDataSource.rootDataSourceId) {
                    isUseOldDs = true;
                    break;
                }
            }
        }
        if (isUseOldDs) {
            initUseDataSource = oldUseDataSource;
        }
        else {
            initUseDataSource = null;
        }
    }
    else {
        // featurelayer ds
        let isUseOldDs = false;
        if (ds) {
            for (let i = 0; i < (ds === null || ds === void 0 ? void 0 : ds.length); i++) {
                const oldUseDataSourceId = isoldUseDataSourceIsOutputDs ? (_f = (_e = dsM.getDataSource(oldUseDataSource.dataSourceId)) === null || _e === void 0 ? void 0 : _e.getMainDataSource()) === null || _f === void 0 ? void 0 : _f.id : oldUseDataSource.dataSourceId;
                const widgetDsId = isoldUseDataSourceIsOutputDs ? (_j = (_h = dsM.getDataSource((_g = ds === null || ds === void 0 ? void 0 : ds[i]) === null || _g === void 0 ? void 0 : _g.dataSourceId)) === null || _h === void 0 ? void 0 : _h.getMainDataSource()) === null || _j === void 0 ? void 0 : _j.id : (_k = ds === null || ds === void 0 ? void 0 : ds[i]) === null || _k === void 0 ? void 0 : _k.dataSourceId;
                if (widgetDsId === oldUseDataSourceId) {
                    isUseOldDs = true;
                    break;
                }
            }
        }
        if (isUseOldDs) {
            initUseDataSource = oldUseDataSource;
        }
        else {
            if ((ds === null || ds === void 0 ? void 0 : ds.length) === 1) {
                initUseDataSource = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.Immutable)({
                    dataSourceId: (_l = ds === null || ds === void 0 ? void 0 : ds[0]) === null || _l === void 0 ? void 0 : _l.dataSourceId,
                    mainDataSourceId: (_m = ds === null || ds === void 0 ? void 0 : ds[0]) === null || _m === void 0 ? void 0 : _m.mainDataSourceId,
                    dataViewId: (_o = ds === null || ds === void 0 ? void 0 : ds[0]) === null || _o === void 0 ? void 0 : _o.dataViewId,
                    rootDataSourceId: (_p = ds === null || ds === void 0 ? void 0 : ds[0]) === null || _p === void 0 ? void 0 : _p.rootDataSourceId
                });
            }
            else {
                initUseDataSource = null;
            }
        }
    }
    return initUseDataSource;
}
function checkTrigerLayerIsSameToActionLayer(config) {
    if (config.messageUseDataSource && config.actionUseDataSource) {
        if (config.messageUseDataSource.mainDataSourceId === config.actionUseDataSource.mainDataSourceId && checkIsSameRootDataSourceId(config)) {
            return true;
        }
        else {
            return false;
        }
    }
    else {
        return false;
    }
}
function checkIsSameRootDataSourceId(config) {
    if (config.messageUseDataSource.rootDataSourceId || config.actionUseDataSource.rootDataSourceId) {
        return config.messageUseDataSource.rootDataSourceId === config.actionUseDataSource.rootDataSourceId;
    }
    else {
        return true;
    }
}


/***/ }),

/***/ "./jimu-for-builder/lib/message-actions/select-data-record-action-setting.tsx":
/*!************************************************************************************!*\
  !*** ./jimu-for-builder/lib/message-actions/select-data-record-action-setting.tsx ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");
/* harmony import */ var jimu_theme__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! jimu-theme */ "jimu-theme");
/* harmony import */ var _translations_default__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../translations/default */ "./jimu-for-builder/lib/translations/default.ts");
/* harmony import */ var _init__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./init */ "./jimu-for-builder/lib/message-actions/init.ts");
/* harmony import */ var jimu_icons_outlined_data_link_combined__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! jimu-icons/outlined/data/link-combined */ "./jimu-icons/outlined/data/link-combined.tsx");
/** @jsx jsx */





class _SelectDataRecordActionSetting extends jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.PureComponent {
    constructor(props) {
        super(props);
        this.modalStyle = {
            position: 'absolute',
            top: '0',
            bottom: '0',
            width: '259px',
            height: 'auto',
            borderRight: '',
            borderBottom: '',
            paddingBottom: '1px'
        };
        this.getInitConfig = () => {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
            const { messageWidgetId, messageType } = this.props;
            const dsM = jimu_core__WEBPACK_IMPORTED_MODULE_0__.DataSourceManager.getInstance();
            let messageUseDataSource = null;
            let actionUseDataSource = null;
            if (!this.props.config.messageUseDataSource) {
                const ds = (0,_init__WEBPACK_IMPORTED_MODULE_3__.getDsByWidgetId)(messageWidgetId, messageType);
                if ((ds === null || ds === void 0 ? void 0 : ds[0]) && (ds === null || ds === void 0 ? void 0 : ds.length) === 1) {
                    const dsJson = (_a = dsM.getDataSource(ds === null || ds === void 0 ? void 0 : ds[0].dataSourceId)) === null || _a === void 0 ? void 0 : _a.getDataSourceJson();
                    if (dsJson && ((dsJson.type === this.state.ArcGISDataSourceTypes.WebMap) || (dsJson.type === this.state.ArcGISDataSourceTypes.WebScene))) {
                        messageUseDataSource = null;
                    }
                    else {
                        messageUseDataSource = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.Immutable)({
                            dataSourceId: (_b = ds === null || ds === void 0 ? void 0 : ds[0]) === null || _b === void 0 ? void 0 : _b.dataSourceId,
                            mainDataSourceId: (_c = ds === null || ds === void 0 ? void 0 : ds[0]) === null || _c === void 0 ? void 0 : _c.mainDataSourceId,
                            dataViewId: (_d = ds === null || ds === void 0 ? void 0 : ds[0]) === null || _d === void 0 ? void 0 : _d.dataViewId,
                            rootDataSourceId: (_e = ds === null || ds === void 0 ? void 0 : ds[0]) === null || _e === void 0 ? void 0 : _e.rootDataSourceId
                        });
                    }
                }
            }
            else {
                messageUseDataSource = (0,_init__WEBPACK_IMPORTED_MODULE_3__.checkAndGetInitUseDataSource)({
                    widgetId: messageWidgetId,
                    oldUseDataSource: this.props.config.messageUseDataSource,
                    messageType: messageType,
                    arcGISDataSourceTypes: this.state.ArcGISDataSourceTypes
                });
            }
            if (!this.props.config.actionUseDataSource) {
                actionUseDataSource = null;
            }
            else {
                const actionDataSourceId = (_g = (_f = this.props.config) === null || _f === void 0 ? void 0 : _f.actionUseDataSource) === null || _g === void 0 ? void 0 : _g.dataSourceId;
                const actionRootDataSourceId = (_j = (_h = this.props.config) === null || _h === void 0 ? void 0 : _h.actionUseDataSource) === null || _j === void 0 ? void 0 : _j.rootDataSourceId;
                const dsJson = ((_k = dsM.getDataSource(actionDataSourceId)) === null || _k === void 0 ? void 0 : _k.getDataSourceJson()) ||
                    ((_l = dsM.getDataSource(actionRootDataSourceId)) === null || _l === void 0 ? void 0 : _l.getDataSourceJson());
                if (dsJson) {
                    actionUseDataSource = this.props.config.actionUseDataSource;
                }
                else {
                    actionUseDataSource = null;
                }
            }
            if (actionUseDataSource && actionUseDataSource.dataSourceId) {
                return {
                    messageUseDataSource: messageUseDataSource,
                    actionUseDataSource: actionUseDataSource,
                    sqlExprObj: this.props.config.sqlExprObj
                };
            }
            else {
                return {
                    messageUseDataSource: messageUseDataSource,
                    actionUseDataSource: actionUseDataSource,
                    sqlExprObj: null
                };
            }
        };
        this.handleTriggerLayerChange = (useDataSources) => {
            if (useDataSources && useDataSources.length > 0) {
                this.handleTriggerLayerSelected(useDataSources[0]);
            }
            else {
                this.handleRemoveLayerForTriggerLayer();
            }
        };
        this.handleActionLayerChange = (useDataSources) => {
            if (useDataSources && useDataSources.length > 0) {
                this.handleActionLayerSelected(useDataSources[0]);
            }
            else {
                this.handleRemoveLayerForActionLayer();
            }
        };
        this.handleTriggerLayerSelected = (currentSelectedDs) => {
            this.props.onSettingChange({
                actionId: this.props.actionId,
                config: this.props.config.set('messageUseDataSource', currentSelectedDs)
            });
        };
        this.handleActionLayerSelected = (currentSelectedDs) => {
            this.props.onSettingChange({
                actionId: this.props.actionId,
                config: this.props.config.set('actionUseDataSource', currentSelectedDs).set('sqlExprObj', null)
            });
        };
        this.handleRemoveLayerForTriggerLayer = () => {
            this.props.onSettingChange({
                actionId: this.props.actionId,
                config: this.props.config.set('messageUseDataSource', null)
            });
        };
        this.handleRemoveLayerForActionLayer = () => {
            this.props.onSettingChange({
                actionId: this.props.actionId,
                config: this.props.config.set('actionUseDataSource', null).set('sqlExprObj', null)
            });
        };
        this.showSqlExprPopup = () => {
            this.setState({ isSqlExprShow: true });
        };
        this.toggleSqlExprPopup = () => {
            this.setState({ isSqlExprShow: !this.state.isSqlExprShow });
        };
        this.onSqlExprBuilderChange = (sqlExprObj) => {
            this.props.onSettingChange({
                actionId: this.props.actionId,
                config: this.props.config.set('sqlExprObj', sqlExprObj)
            });
        };
        this.onMessageFieldSelected = (allSelectedFields, ds) => {
            this.props.onSettingChange({
                actionId: this.props.actionId,
                config: this.props.config.set('messageUseDataSource', {
                    dataSourceId: this.props.config.messageUseDataSource.dataSourceId,
                    mainDataSourceId: this.props.config.messageUseDataSource.mainDataSourceId,
                    dataViewId: this.props.config.messageUseDataSource.dataViewId,
                    rootDataSourceId: this.props.config.messageUseDataSource.rootDataSourceId,
                    fields: allSelectedFields.map(f => f.jimuName)
                })
            });
        };
        this.onActionFieldSelected = (allSelectedFields, ds) => {
            this.props.onSettingChange({
                actionId: this.props.actionId,
                config: this.props.config.set('actionUseDataSource', {
                    dataSourceId: this.props.config.actionUseDataSource.dataSourceId,
                    mainDataSourceId: this.props.config.actionUseDataSource.mainDataSourceId,
                    dataViewId: this.props.config.actionUseDataSource.dataViewId,
                    rootDataSourceId: this.props.config.actionUseDataSource.rootDataSourceId,
                    fields: allSelectedFields.map(f => f.jimuName)
                })
            });
        };
        this.swicthEnabledDataRelationShip = (checked) => {
            this.props.onSettingChange({
                actionId: this.props.actionId,
                config: this.props.config.set('enabledDataRelationShip', checked)
            });
        };
        this.modalStyle.borderRight = '1px solid black';
        this.modalStyle.borderBottom = '1px solid black';
        this.state = {
            isShowLayerList: false,
            currentLayerType: null,
            isSqlExprShow: false
        };
    }
    componentDidMount() {
        jimu_core__WEBPACK_IMPORTED_MODULE_0__.moduleLoader.loadModules([
            'jimu-ui',
            'jimu-ui/advanced/setting-components',
            'jimu-ui/advanced/data-source-selector',
            'jimu-arcgis',
            'jimu-ui/advanced/sql-expression-builder'
        ]).then(modules => {
            this.setState({
                Button: modules[0].Button,
                Icon: modules[0].Icon,
                Switch: modules[0].Switch,
                Collapse: modules[0].Collapse,
                SettingSection: modules[1].SettingSection,
                SettingRow: modules[1].SettingRow,
                FieldSelector: modules[2].FieldSelector,
                DataSourceSelector: modules[2].DataSourceSelector,
                ArcGISDataSourceTypes: modules[3].ArcGISDataSourceTypes,
                SqlExpressionBuilderPopup: modules[4].SqlExpressionBuilderPopup,
                DSSelectorTypes: (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.Immutable)([jimu_core__WEBPACK_IMPORTED_MODULE_0__.AllDataSourceTypes.FeatureLayer, jimu_core__WEBPACK_IMPORTED_MODULE_0__.AllDataSourceTypes.SceneLayer])
            }, () => {
                const initConfig = this.getInitConfig();
                this.props.onSettingChange({
                    actionId: this.props.actionId,
                    config: this.props.config.set('messageUseDataSource', initConfig.messageUseDataSource)
                        .set('actionUseDataSource', initConfig.actionUseDataSource).set('sqlExprObj', initConfig.sqlExprObj)
                });
            });
        });
    }
    getStyle(theme) {
        return (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.css) `
      .setting-header {
        padding: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(10)} ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(16)} ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(0)} ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(16)}
      }

      .deleteIcon {
        cursor: pointer;
        opacity: .8;
      }

      .deleteIcon:hover {
        opacity: 1;
      }

      .sql-expr-display {
        width: 100%;
        height: auto;
        min-height: 60px;
        line-height: 25px;
        padding: 3px 5px;
        color: ${theme.colors.palette.dark[300]};
        border: 1px solid ${theme.colors.palette.light[500]};
      }

      .relate-panel-left {
        flex: auto;
        overflow: hidden;
        .action-select-chooser {
          margin-top: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(12)};
        }
      }
    `;
    }
    render() {
        var _a, _b;
        const { Button, Icon, Switch, Collapse, SettingSection, SettingRow, FieldSelector, DataSourceSelector, ArcGISDataSourceTypes, SqlExpressionBuilderPopup } = this.state;
        const { messageWidgetId, messageType, config, theme } = this.props;
        if (!Button || !Icon || !Switch || !Collapse || !SettingSection || !SettingRow || !FieldSelector ||
            !DataSourceSelector || !ArcGISDataSourceTypes || !SqlExpressionBuilderPopup) {
            return null;
        }
        const triggerDsSelectorSourceData = (0,_init__WEBPACK_IMPORTED_MODULE_3__.getDsSelectorSourceData)({
            widgetId: messageWidgetId,
            useDataSource: config.messageUseDataSource,
            messageType: messageType,
            arcGISDataSourceTypes: ArcGISDataSourceTypes
        });
        const actionUseDataSourceInstance = this.props.config.actionUseDataSource &&
            jimu_core__WEBPACK_IMPORTED_MODULE_0__.DataSourceManager.getInstance().getDataSource(this.props.config.actionUseDataSource.dataSourceId);
        return ((0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { css: this.getStyle(this.props.theme) },
            (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(SettingSection, { title: this.props.intl.formatMessage({ id: 'frameworkAction_TriggerLayer', defaultMessage: _translations_default__WEBPACK_IMPORTED_MODULE_2__["default"].frameworkAction_TriggerLayer }) },
                (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(DataSourceSelector, { types: this.state.DSSelectorTypes, useDataSources: triggerDsSelectorSourceData.useDataSources, fromRootDsIds: triggerDsSelectorSourceData.fromRootDsIds, fromDsIds: triggerDsSelectorSourceData.fromDsIds, closeDataSourceListOnChange: true, disableRemove: () => triggerDsSelectorSourceData.isReadOnly, disableDataSourceList: triggerDsSelectorSourceData.isReadOnly, hideAddDataButton: true, hideTypeDropdown: true, mustUseDataSource: true, onChange: this.handleTriggerLayerChange, widgetId: this.props.messageWidgetId, hideDataView: true, enableToSelectOutputDsFromSelf: true })),
            (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(SettingSection, { title: this.props.intl.formatMessage({ id: 'frameworkAction_ActionLayer', defaultMessage: _translations_default__WEBPACK_IMPORTED_MODULE_2__["default"].frameworkAction_ActionLayer }) },
                (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(DataSourceSelector, { types: this.state.DSSelectorTypes, useDataSources: this.props.config.actionUseDataSource ? (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.Immutable)([this.props.config.actionUseDataSource]) : (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.Immutable)([]), closeDataSourceListOnChange: true, hideAddDataButton: true, hideTypeDropdown: true, mustUseDataSource: true, onChange: this.handleActionLayerChange, widgetId: this.props.widgetId, hideDataView: true, enableToSelectOutputDsFromSelf: true })),
            this.props.config && this.props.config.actionUseDataSource && this.props.config.messageUseDataSource &&
                (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(SettingSection, { title: this.props.intl.formatMessage({ id: 'frameworkAction_Conditions', defaultMessage: _translations_default__WEBPACK_IMPORTED_MODULE_2__["default"].frameworkAction_Conditions }) },
                    (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(SettingRow, { label: this.props.intl.formatMessage({ id: 'frameworkAction_RelateMessage', defaultMessage: _translations_default__WEBPACK_IMPORTED_MODULE_2__["default"].frameworkAction_RelateMessage }) },
                        (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(Switch, { checked: this.props.config.enabledDataRelationShip, onChange: evt => { this.swicthEnabledDataRelationShip(evt.target.checked); } })),
                    (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(SettingRow, null,
                        (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(Collapse, { isOpen: this.props.config.enabledDataRelationShip, className: 'w-100' },
                            (0,_init__WEBPACK_IMPORTED_MODULE_3__.checkTrigerLayerIsSameToActionLayer)(config) &&
                                (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'w-100 border p-1 mr-2' }, this.props.intl.formatMessage({ id: 'frameworkAction_AutoBind', defaultMessage: _translations_default__WEBPACK_IMPORTED_MODULE_2__["default"].frameworkAction_AutoBind })),
                            !(0,_init__WEBPACK_IMPORTED_MODULE_3__.checkTrigerLayerIsSameToActionLayer)(config) && (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'w-100 d-flex align-items-center' },
                                (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'd-flex flex-column relate-panel-left' },
                                    (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(FieldSelector, { className: 'w-100', useDataSources: (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.Immutable)([(_a = this.props.config.messageUseDataSource) === null || _a === void 0 ? void 0 : _a.asMutable({ deep: true })]), isDataSourceDropDownHidden: true, placeholder: this.props.intl.formatMessage({ id: 'frameworkAction_TriggerLayerField', defaultMessage: _translations_default__WEBPACK_IMPORTED_MODULE_2__["default"].frameworkAction_TriggerLayerField }), onChange: this.onMessageFieldSelected, useDropdown: true, isSearchInputHidden: true, selectedFields: this.props.config.messageUseDataSource && this.props.config.messageUseDataSource.fields
                                            ? this.props.config.messageUseDataSource.fields
                                            : (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.Immutable)([]) }),
                                    (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(FieldSelector, { className: 'w-100 action-select-chooser', placeholder: this.props.intl.formatMessage({ id: 'frameworkAction_ActionLayerField', defaultMessage: _translations_default__WEBPACK_IMPORTED_MODULE_2__["default"].frameworkAction_ActionLayerField }), useDataSources: (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.Immutable)([(_b = this.props.config.actionUseDataSource) === null || _b === void 0 ? void 0 : _b.asMutable({ deep: true })]), isDataSourceDropDownHidden: true, onChange: this.onActionFieldSelected, useDropdown: true, isSearchInputHidden: true, selectedFields: this.props.config.actionUseDataSource && this.props.config.actionUseDataSource.fields
                                            ? this.props.config.actionUseDataSource.fields
                                            : (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.Immutable)([]) })),
                                (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_icons_outlined_data_link_combined__WEBPACK_IMPORTED_MODULE_4__.LinkCombinedOutlined, { autoFlip: true, className: 'flex-none', width: 12, height: 40, color: theme.colors.dark[400] })))),
                    (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(SettingRow, null,
                        (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(Button, { type: 'link', disabled: !this.props.config.actionUseDataSource, className: 'w-100 d-flex justify-content-start', onClick: this.showSqlExprPopup },
                            (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'w-100 text-truncate', style: { textAlign: 'start' } }, this.props.intl.formatMessage({ id: 'frameworkAction_MoreConditions', defaultMessage: _translations_default__WEBPACK_IMPORTED_MODULE_2__["default"].frameworkAction_MoreConditions }))),
                        this.props.config.actionUseDataSource && (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_core__WEBPACK_IMPORTED_MODULE_0__.DataSourceComponent, { useDataSource: this.props.config.actionUseDataSource }, (ds) => {
                            return ((0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(SqlExpressionBuilderPopup, { dataSource: ds, mode: jimu_core__WEBPACK_IMPORTED_MODULE_0__.SqlExpressionMode.Simple, isOpen: this.state.isSqlExprShow, toggle: this.toggleSqlExprPopup, expression: this.props.config.sqlExprObj, onChange: (sqlExprObj) => { this.onSqlExprBuilderChange(sqlExprObj); }, id: 'filter-widget-sql-expression-builder-popup' }));
                        })),
                    (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(SettingRow, null,
                        (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'sql-expr-display' }, this.props.config.sqlExprObj && actionUseDataSourceInstance
                            ? jimu_core__WEBPACK_IMPORTED_MODULE_0__.dataSourceUtils.getArcGISSQL(this.props.config.sqlExprObj, actionUseDataSourceInstance).displaySQL
                            : this.props.intl.formatMessage({ id: 'frameworkAction_SetExpression', defaultMessage: _translations_default__WEBPACK_IMPORTED_MODULE_2__["default"].frameworkAction_SetExpression }))))));
    }
}
_SelectDataRecordActionSetting.defaultProps = {
    config: (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.Immutable)({
        messageUseDataSource: null,
        actionUseDataSource: null,
        sqlExprObj: null,
        enabledDataRelationShip: true
    })
};
const mapStateToProps = (state) => {
    return {
        dataSources: state.appStateInBuilder && state.appStateInBuilder.appConfig && state.appStateInBuilder.appConfig.dataSources,
        dataSourcesInfo: state.appStateInBuilder && state.appStateInBuilder.dataSourcesInfo
    };
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (jimu_core__WEBPACK_IMPORTED_MODULE_0__.ReactRedux.connect(mapStateToProps)((0,jimu_theme__WEBPACK_IMPORTED_MODULE_1__.withTheme)(_SelectDataRecordActionSetting)));


/***/ }),

/***/ "./jimu-for-builder/lib/props.ts":
/*!***************************************!*\
  !*** ./jimu-for-builder/lib/props.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "./jimu-for-builder/lib/service/app-service/index.ts":
/*!***********************************************************!*\
  !*** ./jimu-for-builder/lib/service/app-service/index.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   addToFavorites: () => (/* binding */ addToFavorites),
/* harmony export */   changeAppFolder: () => (/* binding */ changeAppFolder),
/* harmony export */   checkImportAppVersion: () => (/* binding */ checkImportAppVersion),
/* harmony export */   createAppByDefaultTemplate: () => (/* binding */ createAppByDefaultTemplate),
/* harmony export */   createAppByItemTemplate: () => (/* binding */ createAppByItemTemplate),
/* harmony export */   createAppByTemplateId: () => (/* binding */ createAppByTemplateId),
/* harmony export */   createTemplateByApp: () => (/* binding */ createTemplateByApp),
/* harmony export */   deleteApp: () => (/* binding */ deleteApp),
/* harmony export */   duplicateApp: () => (/* binding */ duplicateApp),
/* harmony export */   getAppConfig: () => (/* binding */ getAppConfig),
/* harmony export */   getAppGroups: () => (/* binding */ getAppGroups),
/* harmony export */   getAppInfo: () => (/* binding */ getAppInfo),
/* harmony export */   getDefaultTemplateConfig: () => (/* binding */ getDefaultTemplateConfig),
/* harmony export */   getFolders: () => (/* binding */ getFolders),
/* harmony export */   getGroupCategorySchema: () => (/* binding */ getGroupCategorySchema),
/* harmony export */   getGroupContent: () => (/* binding */ getGroupContent),
/* harmony export */   getOrgCategorySchema: () => (/* binding */ getOrgCategorySchema),
/* harmony export */   getUserTags: () => (/* binding */ getUserTags),
/* harmony export */   importAppFromPortal: () => (/* binding */ importAppFromPortal),
/* harmony export */   importItem: () => (/* binding */ importItem),
/* harmony export */   publishApp: () => (/* binding */ publishApp),
/* harmony export */   removeFromFavorites: () => (/* binding */ removeFromFavorites),
/* harmony export */   saveApp: () => (/* binding */ saveApp),
/* harmony export */   saveAsApp: () => (/* binding */ saveAsApp),
/* harmony export */   searchApp: () => (/* binding */ searchApp),
/* harmony export */   searchAppByPortalUrl: () => (/* binding */ searchAppByPortalUrl),
/* harmony export */   searchGroups: () => (/* binding */ searchGroups),
/* harmony export */   updateAppInfo: () => (/* binding */ updateAppInfo),
/* harmony export */   updateAppInfoWhenSaveApp: () => (/* binding */ updateAppInfoWhenSaveApp),
/* harmony export */   updateAppThumbnail: () => (/* binding */ updateAppThumbnail)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");
/* harmony import */ var _rest_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../rest-service */ "./jimu-for-builder/lib/service/rest-service.tsx");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./util */ "./jimu-for-builder/lib/service/app-service/util.ts");
/* harmony import */ var _type__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../type */ "./jimu-for-builder/lib/service/type/index.ts");
/* harmony import */ var jimu_for_builder_templates__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! jimu-for-builder/templates */ "jimu-for-builder/templates");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};





/**
 * Create app by portal template/AGOL template/local template
 * folderId: If the folderId has a value, the app will be created in the folder corresponding to the folderId
*/
function createAppByItemTemplate(appInfo, folderId) {
    return __awaiter(this, void 0, void 0, function* () {
        return yield (0,_util__WEBPACK_IMPORTED_MODULE_2__.crateAppByApp)(appInfo, false, folderId);
    });
}
/**
 * Create app with template id, such as: xxx.com/builder/?template=id
*/
function createAppByTemplateId(templateId) {
    return __awaiter(this, void 0, void 0, function* () {
        return yield (0,_util__WEBPACK_IMPORTED_MODULE_2__.getCreateAppParamsByAppId)(templateId).then((appInfo) => __awaiter(this, void 0, void 0, function* () {
            return yield createAppByItemTemplate(appInfo);
        }));
    });
}
/**
 *Create app by default template defined in the code
 *title: The translated string of 'Untitled experience'
 *lable: The default template's name
 *folderId: If the folderId has a value, the app will be created in the folder corresponding to the folderId
 */
function createAppByDefaultTemplate(title, templateName, folderId, webmapId, websceneId) {
    return __awaiter(this, void 0, void 0, function* () {
        return yield (0,_util__WEBPACK_IMPORTED_MODULE_2__.getNewAppTitleWithIndex)(title).then((newTitle) => __awaiter(this, void 0, void 0, function* () {
            if (newTitle) {
                const appInfo = {
                    template: templateName,
                    name: newTitle,
                    description: '',
                    type: _type__WEBPACK_IMPORTED_MODULE_3__.AppType.ExperienceType
                };
                return yield Promise.all([getDefaultTemplateConfig(appInfo)])
                    .then(function (results) {
                    return __awaiter(this, void 0, void 0, function* () {
                        let defaultAppConfig = results[0];
                        defaultAppConfig.template = appInfo.template;
                        defaultAppConfig = (0,_util__WEBPACK_IMPORTED_MODULE_2__.initAppConfigOfNewApp)(defaultAppConfig);
                        return yield (0,_util__WEBPACK_IMPORTED_MODULE_2__.toCreateAppByDefaultTemplate)(appInfo, folderId).then((item) => __awaiter(this, void 0, void 0, function* () {
                            return yield (0,_util__WEBPACK_IMPORTED_MODULE_2__.createAppCallBack)(defaultAppConfig, item, webmapId, websceneId);
                        }));
                    });
                })
                    .catch((error) => __awaiter(this, void 0, void 0, function* () {
                    console.error(error);
                    return yield Promise.reject(error);
                }));
            }
            else {
                return yield Promise.reject(null);
            }
        }));
    });
}
/**
 * folderId: If the folderId has a value, the template will be created in the folder corresponding to the folderId
*/
function createTemplateByApp(appInfo, folderId) {
    return __awaiter(this, void 0, void 0, function* () {
        return yield (0,_util__WEBPACK_IMPORTED_MODULE_2__.crateAppByApp)(appInfo, true, folderId);
    });
}
function importItem(importAppOption) {
    return __awaiter(this, void 0, void 0, function* () {
        const session = jimu_core__WEBPACK_IMPORTED_MODULE_0__.SessionManager.getInstance().getMainSession();
        return yield (0,_rest_service__WEBPACK_IMPORTED_MODULE_1__.importApp)(importAppOption, { authentication: session });
    });
}
function checkImportAppVersion(importAppOption) {
    return __awaiter(this, void 0, void 0, function* () {
        const session = jimu_core__WEBPACK_IMPORTED_MODULE_0__.SessionManager.getInstance().getMainSession();
        return yield (0,_rest_service__WEBPACK_IMPORTED_MODULE_1__.checkAppVersion)(importAppOption, { authentication: session });
    });
}
function importAppFromPortal(portalAppInfo) {
    return __awaiter(this, void 0, void 0, function* () {
        return duplicateApp(portalAppInfo, null, true);
    });
}
/**
 * folderId: If the folderId has a value, the app will be created in the folder corresponding to the folderId
*/
function duplicateApp(appInfo, folderId, isNotUpdateNewAppTitle) {
    return __awaiter(this, void 0, void 0, function* () {
        return yield getAppInfo(appInfo).then((appItem) => __awaiter(this, void 0, void 0, function* () {
            if (appItem) {
                const copy = jimu_core__WEBPACK_IMPORTED_MODULE_0__.i18n.getIntl().formatMessage({ id: 'copy' }) || 'copy';
                const title = isNotUpdateNewAppTitle ? appItem.title : `${appItem.title} ${copy}`;
                return yield (0,_util__WEBPACK_IMPORTED_MODULE_2__.getNewAppTitleWithIndex)(title, true, appInfo.type).then((newTitle) => __awaiter(this, void 0, void 0, function* () {
                    if (newTitle) {
                        const duplicateAppInfo = {
                            name: newTitle,
                            description: (appItem === null || appItem === void 0 ? void 0 : appItem.description) || '',
                            snippet: (appItem === null || appItem === void 0 ? void 0 : appItem.snippet) || '',
                            typeKeywords: (appItem === null || appItem === void 0 ? void 0 : appItem.typeKeywords) || [],
                            tags: appItem.tags,
                            thumbnail: appItem.thumbnail,
                            type: appInfo.type || appItem.type
                        };
                        return yield (0,_util__WEBPACK_IMPORTED_MODULE_2__.createAppForDuplicate)(duplicateAppInfo, folderId).then((newAppItem) => __awaiter(this, void 0, void 0, function* () {
                            if (newAppItem) {
                                return yield (0,_util__WEBPACK_IMPORTED_MODULE_2__.updateThumbnail)(newAppItem.id, appInfo, appItem.thumbnail).then(() => __awaiter(this, void 0, void 0, function* () {
                                    return yield (0,_util__WEBPACK_IMPORTED_MODULE_2__.duplicateRelatedDataInApp)(newAppItem.id, appInfo, false).then(() => __awaiter(this, void 0, void 0, function* () {
                                        return yield Promise.resolve(newAppItem.id);
                                    }), (error) => __awaiter(this, void 0, void 0, function* () {
                                        console.error(error);
                                        deleteApp(newAppItem.id);
                                        return yield Promise.reject(error);
                                    }));
                                }));
                            }
                            else {
                                return yield Promise.reject(null);
                            }
                        }));
                    }
                    else {
                        return yield Promise.reject(null);
                    }
                }));
            }
            else {
                return yield Promise.reject(null);
            }
        }));
    });
}
/**
 * folderId: If the folderId has a value, the app will be created in the folder corresponding to the folderId
*/
function saveAsApp(originAppInfo, newAppUpdateInfo, folderId, thumbnailFiles) {
    return __awaiter(this, void 0, void 0, function* () {
        return yield (0,_util__WEBPACK_IMPORTED_MODULE_2__.getNewAppTitleWithIndex)(`${newAppUpdateInfo.title}`, true, newAppUpdateInfo.type).then((newTitle) => __awaiter(this, void 0, void 0, function* () {
            if (newTitle) {
                const duplicateAppInfo = {
                    name: newAppUpdateInfo.title,
                    description: (newAppUpdateInfo === null || newAppUpdateInfo === void 0 ? void 0 : newAppUpdateInfo.description) || '',
                    snippet: (newAppUpdateInfo === null || newAppUpdateInfo === void 0 ? void 0 : newAppUpdateInfo.snippet) || '',
                    typeKeywords: (newAppUpdateInfo === null || newAppUpdateInfo === void 0 ? void 0 : newAppUpdateInfo.typeKeywords) || [],
                    tags: newAppUpdateInfo.tags,
                    thumbnail: newAppUpdateInfo.thumbnail,
                    type: originAppInfo.type || originAppInfo.type
                };
                //Create new app
                return yield (0,_util__WEBPACK_IMPORTED_MODULE_2__.createAppForDuplicate)(duplicateAppInfo, folderId).then((newAppItem) => __awaiter(this, void 0, void 0, function* () {
                    if (newAppItem) {
                        newAppUpdateInfo.id = newAppItem.id;
                        //Update thumbnail of new item
                        return yield (0,_util__WEBPACK_IMPORTED_MODULE_2__.updateThumbnailForSaveAsApp)(originAppInfo, newAppUpdateInfo, thumbnailFiles).then(() => __awaiter(this, void 0, void 0, function* () {
                            return yield (0,_util__WEBPACK_IMPORTED_MODULE_2__.updateItemDataInApp)(newAppItem.id).then((result) => __awaiter(this, void 0, void 0, function* () {
                                if (!result) {
                                    return yield Promise.reject(null);
                                }
                                //Update resources of new item
                                return yield (0,_util__WEBPACK_IMPORTED_MODULE_2__.duplicateResourcesForDuplicate)(newAppItem.id, originAppInfo, true).then(() => __awaiter(this, void 0, void 0, function* () {
                                    //Save current new config
                                    let newAppConfig = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().getState().appStateInBuilder.appConfig;
                                    newAppConfig = (0,_util__WEBPACK_IMPORTED_MODULE_2__.replaceExbVersionInAppConfig)(newAppConfig);
                                    const config = newAppConfig === null || newAppConfig === void 0 ? void 0 : newAppConfig.asMutable({ deep: true });
                                    /**
                                     * Proxy is connected to item id, proxy created in item A cannot be used in item B.
                                     * So delete app proxies when duplicate items.
                                     */
                                    delete config.appProxies;
                                    delete config.historyLabels;
                                    return saveApp(newAppUpdateInfo, (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.Immutable)(config), newAppItem.id).then(() => __awaiter(this, void 0, void 0, function* () {
                                        //return id and config of new item
                                        return (0,_util__WEBPACK_IMPORTED_MODULE_2__.getAppConfigInResources)(newAppItem.id).then((config) => __awaiter(this, void 0, void 0, function* () {
                                            return Promise.resolve({
                                                id: newAppItem.id,
                                                appConfig: config
                                            });
                                        }));
                                    }));
                                }), (error) => __awaiter(this, void 0, void 0, function* () {
                                    //Delete new app when save as error
                                    console.error(error);
                                    deleteApp(newAppItem.id);
                                    return yield Promise.reject(error);
                                }));
                            }), (err) => __awaiter(this, void 0, void 0, function* () {
                                //Delete new app when save as error
                                console.error(err);
                                deleteApp(newAppItem.id);
                                return yield Promise.reject(err);
                            }));
                        }));
                    }
                    else {
                        return yield Promise.reject(null);
                    }
                }));
            }
            else {
                return yield Promise.reject(null);
            }
        }), err => {
            return Promise.reject(err);
        });
    });
}
function getAppConfig(appInfo) {
    return __awaiter(this, void 0, void 0, function* () {
        const session = (0,_util__WEBPACK_IMPORTED_MODULE_2__.getSession)(appInfo);
        return yield (0,_rest_service__WEBPACK_IMPORTED_MODULE_1__.getItemData)(appInfo, { authentication: session }).then((result) => __awaiter(this, void 0, void 0, function* () {
            return yield Promise.resolve(result);
        }), (error) => __awaiter(this, void 0, void 0, function* () {
            return yield Promise.reject(error);
        }));
    });
}
function searchApp(searchOption, searchType) {
    return __awaiter(this, void 0, void 0, function* () {
        const session = (0,_util__WEBPACK_IMPORTED_MODULE_2__.getSessionBySearchType)(searchType);
        return yield (0,_rest_service__WEBPACK_IMPORTED_MODULE_1__.searchItems)(Object.assign(Object.assign({}, searchOption), { authentication: session }), searchType).then((result) => __awaiter(this, void 0, void 0, function* () {
            return yield Promise.resolve(result);
        }));
    });
}
function searchAppByPortalUrl(searchOption, portalUrl) {
    return __awaiter(this, void 0, void 0, function* () {
        const currentPortalUrl = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().getState().portalUrl;
        const isUseCurrentPortal = portalUrl === currentPortalUrl;
        if (isUseCurrentPortal) {
            const session = (0,_util__WEBPACK_IMPORTED_MODULE_2__.getSessionBySearchType)(_type__WEBPACK_IMPORTED_MODULE_3__.SearchType.Portal);
            searchOption.authentication = session;
        }
        return yield (0,_rest_service__WEBPACK_IMPORTED_MODULE_1__.searchItemsByPortalUrl)(searchOption, portalUrl).then((result) => __awaiter(this, void 0, void 0, function* () {
            return yield Promise.resolve(result);
        }));
    });
}
function getAppInfo(appInfo) {
    return __awaiter(this, void 0, void 0, function* () {
        const session = (0,_util__WEBPACK_IMPORTED_MODULE_2__.getSession)(appInfo);
        return yield (0,_rest_service__WEBPACK_IMPORTED_MODULE_1__.getItem)(appInfo, {
            authentication: session
        }).then((result) => __awaiter(this, void 0, void 0, function* () {
            return yield Promise.resolve(result);
        }));
    });
}
function getGroupCategorySchema(groupId, isGetAGOLCategorySchema) {
    return __awaiter(this, void 0, void 0, function* () {
        const session = jimu_core__WEBPACK_IMPORTED_MODULE_0__.SessionManager.getInstance().getMainSession();
        return yield (0,_rest_service__WEBPACK_IMPORTED_MODULE_1__.getGroupCategorySchema)(groupId, {
            authentication: session
        }, isGetAGOLCategorySchema).then((result) => __awaiter(this, void 0, void 0, function* () {
            return yield Promise.resolve(result);
        }));
    });
}
function getOrgCategorySchema(isGetAGOLCategorySchema) {
    return __awaiter(this, void 0, void 0, function* () {
        const session = jimu_core__WEBPACK_IMPORTED_MODULE_0__.SessionManager.getInstance().getMainSession();
        return yield (0,_rest_service__WEBPACK_IMPORTED_MODULE_1__.getOrgCategorySchema)({
            authentication: session
        }, isGetAGOLCategorySchema).then((result) => __awaiter(this, void 0, void 0, function* () {
            return yield Promise.resolve(result);
        }));
    });
}
function getGroupContent(groupId, params, isGetAGOLGroupContent) {
    return __awaiter(this, void 0, void 0, function* () {
        const session = jimu_core__WEBPACK_IMPORTED_MODULE_0__.SessionManager.getInstance().getMainSession();
        return yield (0,_rest_service__WEBPACK_IMPORTED_MODULE_1__.getGroupContents)(groupId, {
            params,
            authentication: session
        }, isGetAGOLGroupContent).then((result) => __awaiter(this, void 0, void 0, function* () {
            return yield Promise.resolve(result);
        }));
    });
}
function updateAppInfo(itemParam) {
    return __awaiter(this, void 0, void 0, function* () {
        const session = jimu_core__WEBPACK_IMPORTED_MODULE_0__.SessionManager.getInstance().getMainSession();
        const portalUrl = window.jimuConfig.isDevEdition ? 'localhost:' : (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().getState().portalUrl;
        const getAppInfoParams = {
            id: itemParam.id,
            portalUrl: portalUrl
        };
        return yield (0,_rest_service__WEBPACK_IMPORTED_MODULE_1__.getItem)(getAppInfoParams, {
            authentication: session
        }).then((res) => __awaiter(this, void 0, void 0, function* () {
            return yield (0,_rest_service__WEBPACK_IMPORTED_MODULE_1__.updateItem)({
                item: itemParam,
                owner: res.owner,
                authentication: session
            }).then(() => {
                return null;
            });
        }));
    });
}
function updateAppInfoWhenSaveApp(appInfo) {
    return __awaiter(this, void 0, void 0, function* () {
        return updateAppInfo(Object.assign(Object.assign({}, appInfo), { thumbnailurl: undefined })).then(res => {
            var _a;
            const thumbnailurl = appInfo === null || appInfo === void 0 ? void 0 : appInfo.thumbnailurl;
            const saveThumbnailUrl = (_a = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().getState().appRuntimeInfo) === null || _a === void 0 ? void 0 : _a.saveThumbnailUrl;
            if (thumbnailurl && thumbnailurl !== saveThumbnailUrl) {
                (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().dispatch(jimu_core__WEBPACK_IMPORTED_MODULE_0__.appActions.saveThumbnailUrl(thumbnailurl));
                return (0,_util__WEBPACK_IMPORTED_MODULE_2__.updateThumbnail)(appInfo.id, appInfo, thumbnailurl);
            }
            else {
                return Promise.resolve(true);
            }
        }).catch(err => {
            return Promise.reject('Update appInfo error');
        });
    });
}
function updateAppThumbnail(itemParam, owner = '') {
    return __awaiter(this, void 0, void 0, function* () {
        const session = jimu_core__WEBPACK_IMPORTED_MODULE_0__.SessionManager.getInstance().getMainSession();
        return yield (0,_rest_service__WEBPACK_IMPORTED_MODULE_1__.updateAppsThumbnail)({
            item: itemParam,
            authentication: session,
            owner
        }).then(() => {
            return null;
        });
    });
}
function deleteApp(appId) {
    return __awaiter(this, void 0, void 0, function* () {
        const session = jimu_core__WEBPACK_IMPORTED_MODULE_0__.SessionManager.getInstance().getMainSession();
        return yield (0,_rest_service__WEBPACK_IMPORTED_MODULE_1__.getItem)({ id: appId }, {
            authentication: session
        }).then((res) => __awaiter(this, void 0, void 0, function* () {
            return yield (0,_rest_service__WEBPACK_IMPORTED_MODULE_1__.removeItem)({
                id: appId,
                owner: res.owner,
                authentication: jimu_core__WEBPACK_IMPORTED_MODULE_0__.SessionManager.getInstance().getMainSession()
            });
        }));
    });
}
function saveApp(appInfo, appConfig, newAppId) {
    return __awaiter(this, void 0, void 0, function* () {
        const session = jimu_core__WEBPACK_IMPORTED_MODULE_0__.SessionManager.getInstance().getMainSession();
        const AppResourceManager = jimu_core__WEBPACK_IMPORTED_MODULE_0__.moduleLoader.getModuleSync('jimu-for-builder').AppResourceManager;
        const appConfigUtilsForBuilder = jimu_core__WEBPACK_IMPORTED_MODULE_0__.moduleLoader.getModuleSync('jimu-for-builder').appConfigUtils;
        const owners = (appInfo === null || appInfo === void 0 ? void 0 : appInfo.owner) || session.username;
        const config = Object.assign({}, appConfigUtilsForBuilder.getCleanAppConfig(appConfig));
        const appResourceManagerInstance = AppResourceManager.getInstance();
        if (!config) {
            yield Promise.reject();
            return;
        }
        try {
            yield appResourceManagerInstance.upLoadAppConfig(appInfo.id, config, owners);
            const promises = [];
            const { imageResources, iconResources } = appResourceManagerInstance.getResourcesInDraft();
            imageResources && promises.push(appResourceManagerInstance.upLoadImageResourceList((0,_util__WEBPACK_IMPORTED_MODULE_2__.cloneObj)(imageResources), newAppId));
            iconResources && promises.push(appResourceManagerInstance.upLoadIconResourceList((0,_util__WEBPACK_IMPORTED_MODULE_2__.cloneObj)(iconResources), newAppId));
            promises.push(updateAppInfoWhenSaveApp(appInfo));
            yield Promise.all(promises);
        }
        catch (error) {
            yield Promise.reject(error);
        }
    });
}
function publishApp(appInfo) {
    return __awaiter(this, void 0, void 0, function* () {
        const draftAppConfig = yield (0,_util__WEBPACK_IMPORTED_MODULE_2__.getAppConfigInResources)(appInfo.id);
        const publishedAppConfig = yield getAppConfig(appInfo);
        const session = jimu_core__WEBPACK_IMPORTED_MODULE_0__.SessionManager.getInstance().getMainSession();
        if (draftAppConfig && publishedAppConfig) {
            const newTypeKeywords = (0,_util__WEBPACK_IMPORTED_MODULE_2__.updateTypeKeywords)(appInfo === null || appInfo === void 0 ? void 0 : appInfo.typeKeywords, publishedAppConfig === null || publishedAppConfig === void 0 ? void 0 : publishedAppConfig.exbVersion);
            const AppResourceManager = jimu_core__WEBPACK_IMPORTED_MODULE_0__.moduleLoader.getModuleSync('jimu-for-builder')
                .AppResourceManager;
            const appResourceManagerInstance = AppResourceManager.getInstance();
            return appResourceManagerInstance
                .upLoadLocalResource(draftAppConfig)
                .then((draftAppConfig) => __awaiter(this, void 0, void 0, function* () {
                if (!draftAppConfig) {
                    return yield Promise.reject();
                }
                draftAppConfig = (0,_util__WEBPACK_IMPORTED_MODULE_2__.optimizeWidgetsConfig)(draftAppConfig, appInfo);
                draftAppConfig = (0,_util__WEBPACK_IMPORTED_MODULE_2__.updateHistoryLabels)(draftAppConfig, publishedAppConfig);
                const previewUrl = (0,_util__WEBPACK_IMPORTED_MODULE_2__.getPreviewUrl)(appInfo);
                yield (0,_rest_service__WEBPACK_IMPORTED_MODULE_1__.updateItem)({
                    item: {
                        id: appInfo.id,
                        owner: appInfo.owner || (session === null || session === void 0 ? void 0 : session.username),
                        data: draftAppConfig,
                        typeKeywords: newTypeKeywords,
                        url: previewUrl
                    },
                    authentication: jimu_core__WEBPACK_IMPORTED_MODULE_0__.SessionManager.getInstance().getMainSession()
                }).then(() => __awaiter(this, void 0, void 0, function* () {
                    yield Promise.resolve();
                }), () => __awaiter(this, void 0, void 0, function* () {
                    return yield Promise.reject();
                }));
            }), () => __awaiter(this, void 0, void 0, function* () {
                return yield Promise.reject();
            }))
                .catch((error) => __awaiter(this, void 0, void 0, function* () {
                return yield Promise.reject(error);
            }));
        }
        else {
            yield Promise.reject();
        }
    });
}
function getFolders(requestOption) {
    return __awaiter(this, void 0, void 0, function* () {
        return (0,_rest_service__WEBPACK_IMPORTED_MODULE_1__.getUserContent)(requestOption).then((result) => __awaiter(this, void 0, void 0, function* () {
            const folders = (result === null || result === void 0 ? void 0 : result.folders) || [];
            return yield Promise.resolve(folders);
        }), (error) => __awaiter(this, void 0, void 0, function* () {
            return yield Promise.reject(error);
        }));
    });
}
function addToFavorites(params) {
    return __awaiter(this, void 0, void 0, function* () {
        return yield (0,_rest_service__WEBPACK_IMPORTED_MODULE_1__.shareItemWithGroup)(params).then((result) => __awaiter(this, void 0, void 0, function* () {
            return yield Promise.resolve(result);
        }));
    });
}
function removeFromFavorites(params) {
    return __awaiter(this, void 0, void 0, function* () {
        return yield (0,_rest_service__WEBPACK_IMPORTED_MODULE_1__.unshareItemWithGroup)(params).then((result) => __awaiter(this, void 0, void 0, function* () {
            return yield Promise.resolve(result);
        }));
    });
}
function getAppGroups(params) {
    return __awaiter(this, void 0, void 0, function* () {
        return yield (0,_rest_service__WEBPACK_IMPORTED_MODULE_1__.getItemsGroups)(params).then((result) => __awaiter(this, void 0, void 0, function* () {
            return yield Promise.resolve(result);
        }));
    });
}
function changeAppFolder(params) {
    return __awaiter(this, void 0, void 0, function* () {
        return yield (0,_rest_service__WEBPACK_IMPORTED_MODULE_1__.moveItem)(Object.assign(Object.assign({}, params), { authentication: jimu_core__WEBPACK_IMPORTED_MODULE_0__.SessionManager.getInstance().getMainSession() }));
    });
}
function getUserTags(username) {
    return __awaiter(this, void 0, void 0, function* () {
        return yield (0,_rest_service__WEBPACK_IMPORTED_MODULE_1__.getUsersTags)({
            username: username,
            authentication: jimu_core__WEBPACK_IMPORTED_MODULE_0__.SessionManager.getInstance().getMainSession()
        });
    });
}
function searchGroups(requestOptions) {
    return __awaiter(this, void 0, void 0, function* () {
        return yield (0,_rest_service__WEBPACK_IMPORTED_MODULE_1__.searchGroup)(requestOptions);
    });
}
function getDefaultTemplateConfig(appInfo) {
    return __awaiter(this, void 0, void 0, function* () {
        return (0,jimu_for_builder_templates__WEBPACK_IMPORTED_MODULE_4__.getTemplateConfig)(jimu_for_builder_templates__WEBPACK_IMPORTED_MODULE_4__.TemplateType.App, appInfo.template);
    });
}


/***/ }),

/***/ "./jimu-for-builder/lib/service/app-service/util.ts":
/*!**********************************************************!*\
  !*** ./jimu-for-builder/lib/service/app-service/util.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   cloneObj: () => (/* binding */ cloneObj),
/* harmony export */   crateAppByApp: () => (/* binding */ crateAppByApp),
/* harmony export */   createApp: () => (/* binding */ createApp),
/* harmony export */   createAppCallBack: () => (/* binding */ createAppCallBack),
/* harmony export */   createAppForDuplicate: () => (/* binding */ createAppForDuplicate),
/* harmony export */   duplicatePublishedAppsConfig: () => (/* binding */ duplicatePublishedAppsConfig),
/* harmony export */   duplicateRelatedDataInApp: () => (/* binding */ duplicateRelatedDataInApp),
/* harmony export */   duplicateResourcesForCreateNew: () => (/* binding */ duplicateResourcesForCreateNew),
/* harmony export */   duplicateResourcesForDuplicate: () => (/* binding */ duplicateResourcesForDuplicate),
/* harmony export */   duplicateResourcesInApp: () => (/* binding */ duplicateResourcesInApp),
/* harmony export */   getAppConfigInResources: () => (/* binding */ getAppConfigInResources),
/* harmony export */   getAppName: () => (/* binding */ getAppName),
/* harmony export */   getConfigFromPortalItemResource: () => (/* binding */ getConfigFromPortalItemResource),
/* harmony export */   getCreateAppParamsByAppId: () => (/* binding */ getCreateAppParamsByAppId),
/* harmony export */   getMaxIndex: () => (/* binding */ getMaxIndex),
/* harmony export */   getNewAppTitleWithIndex: () => (/* binding */ getNewAppTitleWithIndex),
/* harmony export */   getPreviewUrl: () => (/* binding */ getPreviewUrl),
/* harmony export */   getResourceOrigin: () => (/* binding */ getResourceOrigin),
/* harmony export */   getSession: () => (/* binding */ getSession),
/* harmony export */   getSessionBySearchType: () => (/* binding */ getSessionBySearchType),
/* harmony export */   initAppConfigOfNewApp: () => (/* binding */ initAppConfigOfNewApp),
/* harmony export */   initAppConfigPortalUrl: () => (/* binding */ initAppConfigPortalUrl),
/* harmony export */   initDuplicatedTypeKeywords: () => (/* binding */ initDuplicatedTypeKeywords),
/* harmony export */   isAGOLApp: () => (/* binding */ isAGOLApp),
/* harmony export */   isAppNameRepeat: () => (/* binding */ isAppNameRepeat),
/* harmony export */   isLocalApp: () => (/* binding */ isLocalApp),
/* harmony export */   isPortalApp: () => (/* binding */ isPortalApp),
/* harmony export */   isUpdateDataSourcesPortalUrl: () => (/* binding */ isUpdateDataSourcesPortalUrl),
/* harmony export */   optimizeTextWidgetConfig: () => (/* binding */ optimizeTextWidgetConfig),
/* harmony export */   optimizeWidgetsConfig: () => (/* binding */ optimizeWidgetsConfig),
/* harmony export */   replaceExbVersionInAppConfig: () => (/* binding */ replaceExbVersionInAppConfig),
/* harmony export */   toCreateAppByDefaultTemplate: () => (/* binding */ toCreateAppByDefaultTemplate),
/* harmony export */   updateHistoryLabels: () => (/* binding */ updateHistoryLabels),
/* harmony export */   updateItemDataInApp: () => (/* binding */ updateItemDataInApp),
/* harmony export */   updateThumbnail: () => (/* binding */ updateThumbnail),
/* harmony export */   updateThumbnailForSaveAsApp: () => (/* binding */ updateThumbnailForSaveAsApp),
/* harmony export */   updateTypeKeywords: () => (/* binding */ updateTypeKeywords),
/* harmony export */   uploadResource: () => (/* binding */ uploadResource)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");
/* harmony import */ var _rest_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../rest-service */ "./jimu-for-builder/lib/service/rest-service.tsx");
/* harmony import */ var _translations_default__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../translations/default */ "./jimu-for-builder/lib/translations/default.ts");
/* harmony import */ var _type__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../type */ "./jimu-for-builder/lib/service/type/index.ts");
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./index */ "./jimu-for-builder/lib/service/app-service/index.ts");
/* harmony import */ var _local_rest_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../local-rest-service */ "./jimu-for-builder/lib/service/local-rest-service/index.ts");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
/* eslint-disable camelcase */






const request = jimu_core__WEBPACK_IMPORTED_MODULE_0__.esri.restRequest.request;
function isPortalApp(appInfo) {
    var _a, _b;
    if (!(appInfo === null || appInfo === void 0 ? void 0 : appInfo.portalUrl)) {
        return !window.jimuConfig.isDevEdition;
    }
    const appPortalUrl = (appInfo === null || appInfo === void 0 ? void 0 : appInfo.portalUrl) || '';
    const portalUrl = ((_b = (_a = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)()) === null || _a === void 0 ? void 0 : _a.getState()) === null || _b === void 0 ? void 0 : _b.portalUrl) || '';
    const isSamePortal = (portalUrl === null || portalUrl === void 0 ? void 0 : portalUrl.includes(appPortalUrl)) || (appPortalUrl === null || appPortalUrl === void 0 ? void 0 : appPortalUrl.includes(portalUrl));
    if (jimu_core__WEBPACK_IMPORTED_MODULE_0__.portalUrlUtils.isAGOLDomain(appPortalUrl) && jimu_core__WEBPACK_IMPORTED_MODULE_0__.portalUrlUtils.isAGOLDomain(portalUrl)) {
        return !isLocalApp(appInfo);
    }
    else {
        return isSamePortal && !isLocalApp(appInfo);
    }
}
function isAGOLApp(appInfo) {
    if (!(appInfo === null || appInfo === void 0 ? void 0 : appInfo.portalUrl)) {
        return false;
    }
    const appPortalUrl = (appInfo === null || appInfo === void 0 ? void 0 : appInfo.portalUrl) || '';
    const isPortalAGOL = jimu_core__WEBPACK_IMPORTED_MODULE_0__.portalUrlUtils.isAGOLDomain(appPortalUrl);
    const isNotPortalApp = !isPortalApp(appInfo);
    const isNotLocalApp = !isLocalApp(appInfo);
    return isNotPortalApp && isNotLocalApp && isPortalAGOL;
}
function isLocalApp(appInfo) {
    const appPortalUrl = (appInfo === null || appInfo === void 0 ? void 0 : appInfo.portalUrl) || '';
    if (appPortalUrl.endsWith('localhost:')) {
        return true;
    }
    return appInfo.isLocalApp;
}
function getSession(appInfo) {
    if (isLocalApp(appInfo)) {
        return {};
    }
    const portalSession = jimu_core__WEBPACK_IMPORTED_MODULE_0__.SessionManager.getInstance().getMainSession();
    const session = isPortalApp(appInfo) ? portalSession : {};
    return session;
}
function getSessionBySearchType(searchType) {
    let session;
    const portalUrl = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().getState().portalUrl;
    const portalSession = jimu_core__WEBPACK_IMPORTED_MODULE_0__.SessionManager.getInstance().getMainSession();
    const isAGOLDomain = jimu_core__WEBPACK_IMPORTED_MODULE_0__.portalUrlUtils.isAGOLDomain(portalUrl);
    switch (searchType) {
        case _type__WEBPACK_IMPORTED_MODULE_3__.SearchType.Portal:
            session = portalSession;
            break;
        case _type__WEBPACK_IMPORTED_MODULE_3__.SearchType.AGOL:
            session = isAGOLDomain ? portalSession : {};
            break;
        case _type__WEBPACK_IMPORTED_MODULE_3__.SearchType.Other:
            session = window.jimuConfig.isDevEdition ? {} : portalSession;
            break;
    }
    return session;
}
function getNewAppTitleWithIndex(title, isCopy = false, type = '') {
    return __awaiter(this, void 0, void 0, function* () {
        const session = jimu_core__WEBPACK_IMPORTED_MODULE_0__.SessionManager.getInstance().getMainSession();
        let newTitle = null;
        const appType = !(type === null || type === void 0 ? void 0 : type.includes('Template'))
            ? _type__WEBPACK_IMPORTED_MODULE_3__.AppType.ExperienceType
            : _type__WEBPACK_IMPORTED_MODULE_3__.AppType.TemplateType;
        return yield (0,_index__WEBPACK_IMPORTED_MODULE_4__.searchApp)({
            q: `type: "${appType}" AND owner:${session === null || session === void 0 ? void 0 : session.username} AND  title:"${title}"`,
            sortField: 'modified',
            sortOrder: 'desc'
        }, _type__WEBPACK_IMPORTED_MODULE_3__.SearchType.Other)
            .then((result) => __awaiter(this, void 0, void 0, function* () {
            const apps = result.results;
            if (apps && apps.length > 0) {
                const index = getMaxIndex(apps, title);
                newTitle = getAppName(title, apps, index, isCopy);
                return yield Promise.resolve(newTitle);
            }
            else {
                newTitle = isCopy ? title : `${title} 1`;
                return yield Promise.resolve(newTitle);
            }
        }))
            .catch((err) => __awaiter(this, void 0, void 0, function* () {
            console.error(err);
            return yield Promise.reject(err);
        }));
    });
}
function duplicateRelatedDataInApp(newAppId, originalAppInfo, isCreateNew = false) {
    return __awaiter(this, void 0, void 0, function* () {
        return yield updateItemDataInApp(newAppId).then((result) => __awaiter(this, void 0, void 0, function* () {
            if (!result) {
                return yield Promise.reject(null);
            }
            if (isCreateNew) {
                return yield duplicateResourcesForCreateNew(newAppId, originalAppInfo);
            }
            else {
                return yield duplicateResourcesForDuplicate(newAppId, originalAppInfo);
            }
        }), (err) => __awaiter(this, void 0, void 0, function* () {
            return yield Promise.reject(err);
        }));
    });
}
function updateTypeKeywords(typeKeywords, appConfigVersion) {
    let isHavePublishStatus = false;
    let haveUpdatePublishVersion = false;
    const newTypeKeywords = typeKeywords.map(el => {
        if (el.includes('status:')) {
            isHavePublishStatus = true;
            return `status: ${_type__WEBPACK_IMPORTED_MODULE_3__.PublishStatus.Published}`;
        }
        if (el.includes('publishVersion:') && appConfigVersion) {
            haveUpdatePublishVersion = true;
            return `publishVersion:${appConfigVersion}`;
        }
        return el;
    });
    if (!isHavePublishStatus) {
        const keyworlds = `status: ${_type__WEBPACK_IMPORTED_MODULE_3__.PublishStatus.Published}`;
        newTypeKeywords.push(keyworlds);
    }
    if (!haveUpdatePublishVersion && appConfigVersion) {
        newTypeKeywords.push(`publishVersion:${appConfigVersion}`);
    }
    return newTypeKeywords;
}
function toCreateAppByDefaultTemplate(appInfo, folderId) {
    return __awaiter(this, void 0, void 0, function* () {
        const itemInfo = {
            title: appInfo === null || appInfo === void 0 ? void 0 : appInfo.name,
            type: (appInfo === null || appInfo === void 0 ? void 0 : appInfo.type) || 'Web Experience',
            typeKeywords: [
                'EXB Experience',
                'Ready To Use',
                'JavaScript',
                'status: Draft',
                `version:${jimu_core__WEBPACK_IMPORTED_MODULE_0__.version}`
            ],
            snippet: (appInfo === null || appInfo === void 0 ? void 0 : appInfo.snippet) || '',
            description: (appInfo === null || appInfo === void 0 ? void 0 : appInfo.description) || '',
            tags: (appInfo === null || appInfo === void 0 ? void 0 : appInfo.tags) || [],
            data: { __not_publish: true }
            // thumbnailUrl:appInfo.thumbnailUrl
        };
        const checkExist = () => __awaiter(this, void 0, void 0, function* () {
            return yield Promise.resolve(false);
        });
        return yield checkExist().then(function (exist) {
            return __awaiter(this, void 0, void 0, function* () {
                if (exist) {
                    return yield Promise.reject('app existed.');
                }
                return yield createApp(itemInfo, folderId);
            });
        });
    });
}
function updateItemDataInApp(newAppId) {
    return __awaiter(this, void 0, void 0, function* () {
        const session = jimu_core__WEBPACK_IMPORTED_MODULE_0__.SessionManager.getInstance().getMainSession();
        return yield (0,_rest_service__WEBPACK_IMPORTED_MODULE_1__.updateItem)({
            item: {
                id: newAppId,
                owner: session === null || session === void 0 ? void 0 : session.username,
                text: '',
                data: { __not_publish: true }
                // data: newData
            },
            authentication: jimu_core__WEBPACK_IMPORTED_MODULE_0__.SessionManager.getInstance().getMainSession()
        }).then(() => __awaiter(this, void 0, void 0, function* () {
            return yield Promise.resolve(true);
        }), (error) => __awaiter(this, void 0, void 0, function* () {
            console.error(error);
            return yield Promise.reject(error);
        }));
    });
}
function duplicateResourcesInApp(newAppId, originalAppInfo, isCreateNew = false, updateAppConfigVersion = false) {
    return __awaiter(this, void 0, void 0, function* () {
        const session = getSession(originalAppInfo);
        return yield (0,_rest_service__WEBPACK_IMPORTED_MODULE_1__.getItemResources)(originalAppInfo, {
            authentication: session
        }).then((resourceResults) => __awaiter(this, void 0, void 0, function* () {
            const resourcePromises = [];
            const portalResources = resourceResults && resourceResults.resources;
            let isAppHasConfig = false;
            if (portalResources) {
                for (let i = 0; i < portalResources.length; i++) {
                    const isConfig = portalResources[i].resource === 'config/config.json';
                    // Use published version of a template when create an app from a template
                    if (isCreateNew && isConfig) {
                        continue;
                    }
                    // If an app has no config, it cannot be duplicate
                    if (isConfig) {
                        isAppHasConfig = true;
                    }
                    resourcePromises.push(uploadResource(newAppId, originalAppInfo, portalResources[i], updateAppConfigVersion));
                }
            }
            if (isAppHasConfig || isCreateNew) {
                return yield Promise.all(resourcePromises);
            }
            else {
                return yield Promise.resolve(null);
            }
        }), 
        // eslint-disable-next-line
        (err) => __awaiter(this, void 0, void 0, function* () {
            return yield Promise.resolve(null);
        }));
    });
}
function duplicateResourcesForCreateNew(newAppId, originalAppInfo) {
    return __awaiter(this, void 0, void 0, function* () {
        return yield duplicatePublishedAppsConfig(newAppId, originalAppInfo).then((res) => __awaiter(this, void 0, void 0, function* () {
            return yield duplicateResourcesInApp(newAppId, originalAppInfo, true).then((resourceResult) => __awaiter(this, void 0, void 0, function* () {
                if (resourceResult) {
                    return yield Promise.resolve(true);
                }
                else {
                    return yield Promise.reject('Resource does not exist or is inaccessible');
                }
            }), (err) => __awaiter(this, void 0, void 0, function* () {
                return yield Promise.reject(err);
            }));
        }));
    });
}
function duplicateResourcesForDuplicate(newAppId, originalAppInfo, updateAppConfigVersion = false) {
    return __awaiter(this, void 0, void 0, function* () {
        return yield duplicateResourcesInApp(newAppId, originalAppInfo, false, updateAppConfigVersion).then((resourceResult) => __awaiter(this, void 0, void 0, function* () {
            if (resourceResult) {
                return yield Promise.resolve(true);
            }
            else {
                return yield Promise.reject('Resource does not exist or is inaccessible');
            }
        }), (err) => __awaiter(this, void 0, void 0, function* () {
            return yield Promise.reject(err);
        }));
    });
}
function duplicatePublishedAppsConfig(newAppId, originalAppInfo) {
    return __awaiter(this, void 0, void 0, function* () {
        return yield (0,_index__WEBPACK_IMPORTED_MODULE_4__.getAppConfig)(originalAppInfo).then((data) => __awaiter(this, void 0, void 0, function* () {
            const newConfigData = initAppConfigPortalUrl(data, originalAppInfo);
            newConfigData.template = originalAppInfo === null || originalAppInfo === void 0 ? void 0 : originalAppInfo.id;
            /**
             * Proxy is connected to item id, proxy created in item A cannot be used in item B.
             * So delete app proxies when duplicate items.
             */
            delete newConfigData.appProxies;
            delete newConfigData.historyLabels;
            const portalUrl = window.jimuConfig.isDevEdition ? 'localhost:' : (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().getState().portalUrl;
            const session = getSession({ portalUrl: portalUrl });
            if (data === null || data === void 0 ? void 0 : data.__not_publish) {
                return yield Promise.reject('This item is not published');
            }
            const file = new Blob([JSON.stringify(newConfigData)], {
                type: 'application/json'
            });
            return yield (0,_rest_service__WEBPACK_IMPORTED_MODULE_1__.addItemResource)({
                id: newAppId,
                resource: file,
                name: 'config.json',
                params: {
                    resourcesPrefix: 'config'
                },
                authentication: session
            }).then(() => __awaiter(this, void 0, void 0, function* () {
                return yield Promise.resolve(true);
            }), (error) => __awaiter(this, void 0, void 0, function* () {
                console.error(error);
                return yield Promise.reject(error);
            }));
        }), 
        // eslint-disable-next-line
        (err) => __awaiter(this, void 0, void 0, function* () {
            return yield Promise.reject('Resource does not exist or is inaccessible');
        }));
    });
}
function updateThumbnail(newAppId, originalAppInfo, thumbnail) {
    return __awaiter(this, void 0, void 0, function* () {
        const portalUrl = window.jimuConfig.isDevEdition ? 'localhost:' : (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().getState().portalUrl;
        const session = getSession({ portalUrl: portalUrl });
        const originalAppSession = getSession(originalAppInfo);
        if (thumbnail) {
            const portalThumbnailUrl = `${getResourceOrigin(originalAppInfo)}${originalAppInfo.id}/info/${thumbnail}?token=${originalAppSession === null || originalAppSession === void 0 ? void 0 : originalAppSession.token}`;
            const devThumbnailUrl = `${getResourceOrigin(originalAppInfo)}${originalAppInfo.id}/${thumbnail}`;
            let thumbnailUrl;
            if (thumbnail === null || thumbnail === void 0 ? void 0 : thumbnail.startsWith('blob:')) {
                thumbnailUrl = thumbnail;
            }
            else if (thumbnail === null || thumbnail === void 0 ? void 0 : thumbnail.includes('http')) {
                thumbnailUrl = `${thumbnail}?token=${originalAppSession === null || originalAppSession === void 0 ? void 0 : originalAppSession.token}`;
            }
            else {
                thumbnailUrl = isPortalApp(originalAppInfo) ? portalThumbnailUrl : devThumbnailUrl;
            }
            return yield new Promise(function (resolve, reject) {
                const xhr = new XMLHttpRequest();
                xhr.open('GET', thumbnailUrl, true);
                xhr.responseType = 'blob';
                xhr.onload = function (e) {
                    if (this.status === 200) {
                        const blob = this.response;
                        return (0,_index__WEBPACK_IMPORTED_MODULE_4__.updateAppThumbnail)({
                            id: newAppId,
                            thumbnail: blob,
                            f: 'json',
                            token: session === null || session === void 0 ? void 0 : session.token
                        }).then(() => {
                            resolve(true);
                        }, () => {
                            reject(false);
                        });
                    }
                    else {
                        reject(false);
                    }
                };
                xhr.onerror = function (e) {
                    reject();
                };
                xhr.send();
            });
        }
        else {
            return Promise.resolve(true);
        }
    });
}
function uploadResource(newAppId, originalAppInfo, resourceInfo, updateAppConfigVersion = false) {
    return __awaiter(this, void 0, void 0, function* () {
        const originalAppSession = getSession(originalAppInfo);
        const token = isPortalApp(originalAppInfo) ? `?token=${originalAppSession === null || originalAppSession === void 0 ? void 0 : originalAppSession.token}` : '';
        const portalUrlPrefix = `${getResourceOrigin(originalAppInfo)}${originalAppInfo.id}/resources/`;
        const portalUrl = window.jimuConfig.isDevEdition ? 'localhost:' : (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().getState().portalUrl;
        const session = getSession({ portalUrl: portalUrl });
        if (resourceInfo.resource === 'config/config.json' ||
            resourceInfo.resource === 'images/image-resources-list.json') {
            const resourceUrl = portalUrlPrefix + resourceInfo.resource + token;
            return yield fetch(resourceUrl, { cache: 'no-cache' })
                .then((res) => __awaiter(this, void 0, void 0, function* () { return yield res.json(); }))
                .then((data) => __awaiter(this, void 0, void 0, function* () {
                // If an app's config.json or image-resources-list.json is not obtained successfully, it cannot be duplicate
                const isConfig = resourceInfo.resource === 'config/config.json';
                const newAppData = isConfig ? initAppConfigPortalUrl(data, originalAppInfo) : data;
                return yield replaceConfigWithNewAppID(newAppId, originalAppInfo.id, newAppData).then((newData) => __awaiter(this, void 0, void 0, function* () {
                    var _a;
                    /**
                     * Proxy is connected to item id, proxy created in item A cannot be used in item B.
                     * So delete app proxies when duplicate items.
                     */
                    delete newData.appProxies;
                    delete newData.historyLabels;
                    if (isConfig) {
                        if (updateAppConfigVersion) {
                            //Update app version and widget version to current ExbVersion
                            newData = (_a = replaceExbVersionInAppConfig((0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.Immutable)(newData))) === null || _a === void 0 ? void 0 : _a.asMutable({ deep: true });
                        }
                        const date = new Date();
                        const utcTimeStamp = date.getTime();
                        newData.timestamp = `${utcTimeStamp}`;
                    }
                    const file = new Blob([JSON.stringify(newData)], {
                        type: 'application/json'
                    });
                    return yield (0,_rest_service__WEBPACK_IMPORTED_MODULE_1__.addItemResource)({
                        id: newAppId,
                        resource: file,
                        name: resourceInfo.resource.split('/')[resourceInfo.resource.split('/').length - 1],
                        params: {
                            resourcesPrefix: resourceInfo.resource
                                .split('/')
                                .slice(0, resourceInfo.resource.split('/').length - 1)
                                .join('/')
                        },
                        authentication: session
                    }).then(() => __awaiter(this, void 0, void 0, function* () {
                        return yield Promise.resolve(true);
                    }), (error) => __awaiter(this, void 0, void 0, function* () {
                        console.error(error);
                        return yield Promise.reject(error);
                    }));
                }));
            }))
                .catch((error) => __awaiter(this, void 0, void 0, function* () {
                console.error(error);
                return yield Promise.reject(error);
            }));
        }
        else {
            const resourceUrl = portalUrlPrefix + resourceInfo.resource + token;
            return yield new Promise(function (resolve, reject) {
                const xhr = new XMLHttpRequest();
                xhr.open('GET', resourceUrl, true);
                xhr.responseType = 'blob';
                xhr.onload = function (e) {
                    if (this.status === 200) {
                        const blob = this.response;
                        return (0,_rest_service__WEBPACK_IMPORTED_MODULE_1__.addItemResource)({
                            id: newAppId,
                            resource: blob,
                            name: resourceInfo.resource.split('/')[resourceInfo.resource.split('/').length - 1],
                            params: {
                                resourcesPrefix: resourceInfo.resource
                                    .split('/')
                                    .slice(0, resourceInfo.resource.split('/').length - 1)
                                    .join('/')
                            },
                            authentication: session
                        }).then(() => {
                            resolve(true);
                        }, () => {
                            resolve(false);
                        });
                    }
                    else {
                        resolve(false);
                    }
                };
                xhr.onerror = function (e) {
                    resolve(false);
                };
                xhr.send();
            });
        }
    });
}
function initAppConfigPortalUrl(appConfig, originalAppInfo) {
    var _a;
    const portalUrl = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().getState().portalUrl;
    appConfig.attributes && (appConfig.attributes.portalUrl = portalUrl);
    const dataSources = appConfig === null || appConfig === void 0 ? void 0 : appConfig.dataSources;
    if (dataSources && isAGOLApp(originalAppInfo)) {
        for (const key in dataSources) {
            const dataSourcesPortalUrl = (_a = dataSources[key]) === null || _a === void 0 ? void 0 : _a.portalUrl;
            if (isUpdateDataSourcesPortalUrl(dataSourcesPortalUrl)) {
                dataSources[key].portalUrl = portalUrl;
            }
        }
    }
    return appConfig;
}
function isUpdateDataSourcesPortalUrl(dataSourcesPortalUrl) {
    let isCanUpdate = false;
    const portalUrl = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().getState().portalUrl;
    if (isSamePortal(portalUrl, dataSourcesPortalUrl, 'mapsdevext.arcgis.com') ||
        isSamePortal(portalUrl, dataSourcesPortalUrl, 'mapsqa.arcgis.com') ||
        isSamePortal(portalUrl, dataSourcesPortalUrl, 'maps.arcgis.com')) {
        isCanUpdate = true;
    }
    return isCanUpdate;
}
function isSamePortal(portalUrl, dataSourcesPortalUrl, urlEndString) {
    const isSamePortal = ((portalUrl === null || portalUrl === void 0 ? void 0 : portalUrl.endsWith(urlEndString)) ||
        (portalUrl === null || portalUrl === void 0 ? void 0 : portalUrl.endsWith(`${urlEndString}/`))) &&
        ((dataSourcesPortalUrl === null || dataSourcesPortalUrl === void 0 ? void 0 : dataSourcesPortalUrl.endsWith(urlEndString)) ||
            (dataSourcesPortalUrl === null || dataSourcesPortalUrl === void 0 ? void 0 : dataSourcesPortalUrl.endsWith(`${urlEndString}/`)));
    return isSamePortal;
}
function crateAppByApp(appInfo, isCreateTemplate, folderId) {
    return __awaiter(this, void 0, void 0, function* () {
        return yield (0,_index__WEBPACK_IMPORTED_MODULE_4__.getAppInfo)(appInfo).then((appItem) => __awaiter(this, void 0, void 0, function* () {
            if (appItem) {
                const type = isCreateTemplate
                    ? _type__WEBPACK_IMPORTED_MODULE_3__.AppType.TemplateType
                    : _type__WEBPACK_IMPORTED_MODULE_3__.AppType.ExperienceType;
                return yield getNewAppTitleWithIndex(appItem.title).then((newTitle) => __awaiter(this, void 0, void 0, function* () {
                    if (newTitle) {
                        const duplicateAppInfo = {
                            name: newTitle,
                            tags: appItem.tags,
                            thumbnail: appItem.thumbnail,
                            type: type,
                            typeKeywords: appInfo === null || appInfo === void 0 ? void 0 : appInfo.typeKeywords
                        };
                        return yield createAppForDuplicate(duplicateAppInfo, folderId).then((newAppItem) => __awaiter(this, void 0, void 0, function* () {
                            if (newAppItem) {
                                return yield duplicateRelatedDataInApp(newAppItem.id, appInfo, !isCreateTemplate).then(() => __awaiter(this, void 0, void 0, function* () {
                                    return yield Promise.resolve(newAppItem.id);
                                }), (error) => __awaiter(this, void 0, void 0, function* () {
                                    console.error(error);
                                    (0,_index__WEBPACK_IMPORTED_MODULE_4__.deleteApp)(newAppItem.id);
                                    return yield Promise.reject(error);
                                }));
                            }
                            else {
                                return yield Promise.reject(null);
                            }
                        }));
                    }
                    else {
                        return yield Promise.reject(null);
                    }
                }));
            }
            else {
                return yield Promise.reject(null);
            }
        }));
    });
}
function initDuplicatedTypeKeywords(typeKeywords) {
    const itemVersion = `version:${jimu_core__WEBPACK_IMPORTED_MODULE_0__.version}`;
    if (!typeKeywords || typeKeywords.length === 0) {
        return [
            'EXB Experience',
            'Ready To Use',
            'JavaScript',
            'status: Draft',
            itemVersion
        ];
    }
    let isHasStatus = false;
    let isHasVersion = false;
    const newTypeKeywords = typeKeywords.map(el => {
        if (el.includes('version:')) {
            isHasVersion = true;
        }
        if (!el.includes('status:')) {
            return el;
        }
        else {
            isHasStatus = true;
            return 'status: Draft';
        }
    });
    !isHasStatus && newTypeKeywords.push('status: Draft');
    !isHasVersion && newTypeKeywords.push(itemVersion);
    return newTypeKeywords;
}
function getMaxIndex(appList, name) {
    const indexData = [];
    const reg = /^[\d]+$/;
    appList.forEach(el => {
        var _a, _b;
        const index = (_b = (_a = el.title) === null || _a === void 0 ? void 0 : _a.split(`${name} `)[1]) === null || _b === void 0 ? void 0 : _b.split(' ')[0];
        if (reg.test(index)) {
            indexData.push(Number(index));
        }
    });
    indexData.sort(function (a, b) {
        return a < b ? 1 : -1;
    });
    return indexData[0] || 1;
}
function getAppName(name, appList, index = 1, isCopy = false) {
    const appName = index === 1 && isCopy ? name : `${name} ${index}`;
    if (!isAppNameRepeat(appName, appList)) {
        return appName;
    }
    const _index = index + 1;
    return getAppName(name, appList, _index);
}
function isAppNameRepeat(name, appList) {
    let isHasName = false;
    appList.forEach(el => {
        if (name === el.title) {
            isHasName = true;
        }
    });
    return isHasName;
}
function replaceConfigWithNewAppID(newAppId, originalAppId, config) {
    return __awaiter(this, void 0, void 0, function* () {
        const portalUrlPrefix = getResourceOrigin(originalAppId) + originalAppId + '/resources/';
        const isPortalResourceExp = new RegExp('^' + portalUrlPrefix);
        function isPortalResources(value) {
            return isPortalResourceExp.test(value);
        }
        function matchHandle(value) {
            const newValue = value.replace('/' + originalAppId + '/', '/' + newAppId + '/');
            return newValue;
        }
        const replaceOperator = {
            matcher: isPortalResources,
            handler: matchHandle
        };
        return Promise.resolve(jimu_core__WEBPACK_IMPORTED_MODULE_0__.utils.replaceStringInObject(config, replaceOperator));
    });
}
function createAppCallBack(defaultAppConfigs, item, webmapId, websceneId) {
    return __awaiter(this, void 0, void 0, function* () {
        const AppResourceManager = jimu_core__WEBPACK_IMPORTED_MODULE_0__.moduleLoader.getModuleSync('jimu-for-builder')
            .AppResourceManager;
        const appResourceManagerInstance = AppResourceManager.getInstance();
        const itemId = item.id;
        let defaultAppConfig = jimu_core__WEBPACK_IMPORTED_MODULE_0__.utils.replaceI18nPlaceholdersInObject(defaultAppConfigs, jimu_core__WEBPACK_IMPORTED_MODULE_0__.i18n.getIntl(), _translations_default__WEBPACK_IMPORTED_MODULE_2__["default"]);
        defaultAppConfig = initAppConfig(defaultAppConfig);
        jimu_core__WEBPACK_IMPORTED_MODULE_0__.appConfigUtils.addWebmapOrWebsceneToAppConfig(defaultAppConfig, webmapId, websceneId);
        return appResourceManagerInstance
            .upLoadAppConfig(itemId.toString(), defaultAppConfig)
            .then(() => __awaiter(this, void 0, void 0, function* () {
            return yield Promise.resolve(item);
        }));
    });
}
function createAppForDuplicate(appInfo, folderId) {
    return __awaiter(this, void 0, void 0, function* () {
        const itemInfo = {
            title: appInfo.name,
            type: appInfo.type || 'Web Experience',
            typeKeywords: initDuplicatedTypeKeywords(appInfo === null || appInfo === void 0 ? void 0 : appInfo.typeKeywords),
            snippet: (appInfo === null || appInfo === void 0 ? void 0 : appInfo.snippet) || '',
            description: (appInfo === null || appInfo === void 0 ? void 0 : appInfo.description) || '',
            tags: appInfo.tags,
            thumbnail: appInfo.thumbnail
            // thumbnailUrl:appInfo.thumbnailUrl
        };
        return yield createApp(itemInfo, folderId);
    });
}
function getPreviewUrl(appInfo) {
    const { type, id } = appInfo;
    const { isDevEdition, isInPortal, hostEnv } = window.jimuConfig;
    const isTemplate = type === _type__WEBPACK_IMPORTED_MODULE_3__.AppType.TemplateType;
    const isArcGisOnlineApp = !isDevEdition && !isInPortal;
    if (isDevEdition) {
        return null;
    }
    let previewUrl = jimu_core__WEBPACK_IMPORTED_MODULE_0__.urlUtils.getAppUrl({ appId: id, isTemplate: isTemplate });
    if (isArcGisOnlineApp) {
        switch (hostEnv) {
            case 'prod':
                previewUrl = `https://experience.arcgis.com${previewUrl}`;
                break;
            case 'dev':
                previewUrl = `https://experiencedev.arcgis.com${previewUrl}`;
                break;
            case 'qa':
                previewUrl = `https://experienceqa.arcgis.com${previewUrl}`;
                break;
        }
    }
    if (isInPortal) {
        previewUrl = `${window.location.origin}${previewUrl}`;
    }
    return previewUrl;
}
function getAppConfigInResources(appId) {
    return __awaiter(this, void 0, void 0, function* () {
        const sessionManager = jimu_core__WEBPACK_IMPORTED_MODULE_0__.SessionManager.getInstance();
        const timestamp = new Date().getTime();
        if (window.jimuConfig.isDevEdition) {
            return yield window.fetch(`/apps/${appId}/resources/config/config.json`).then((res) => __awaiter(this, void 0, void 0, function* () { return yield res.json(); }));
        }
        else {
            return yield request(`${jimu_core__WEBPACK_IMPORTED_MODULE_0__.portalUrlUtils.getPortalRestUrl((0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().getState().portalUrl)}/content/items/${appId}/resources/config/config.json`, {
                authentication: sessionManager.getSessionByUrl((0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().getState().portalUrl),
                httpMethod: 'GET',
                params: {
                    timestamp: timestamp
                }
            }).catch((err) => __awaiter(this, void 0, void 0, function* () {
                return Promise.reject(err);
            }));
        }
    });
}
function getCreateAppParamsByAppId(templateId) {
    return __awaiter(this, void 0, void 0, function* () {
        return yield checkIsPortalApp(templateId).then((portalAppInfo) => __awaiter(this, void 0, void 0, function* () {
            // Check is portal app
            return yield Promise.resolve(portalAppInfo);
            // eslint-disable-next-line
        })).catch((err) => __awaiter(this, void 0, void 0, function* () {
            // Check is AGOL app
            return yield checkIsAGOLApp(templateId).then((AGOLAppInfo) => __awaiter(this, void 0, void 0, function* () {
                return yield Promise.resolve(AGOLAppInfo);
                // eslint-disable-next-line
            })).catch((err) => __awaiter(this, void 0, void 0, function* () {
                // Check is local app
                return yield checkIsLocalApp(templateId);
            }));
        }));
    });
}
function checkIsPortalApp(templateId) {
    return __awaiter(this, void 0, void 0, function* () {
        const portalUrl = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().getState().portalUrl;
        const getAppInfoParams = {
            id: templateId,
            portalUrl: portalUrl,
            isLocalApp: false
        };
        return yield (0,_index__WEBPACK_IMPORTED_MODULE_4__.getAppInfo)(getAppInfoParams).then((appInfo) => __awaiter(this, void 0, void 0, function* () {
            return yield Promise.resolve(getAppInfoParams);
            // eslint-disable-next-line
        })).catch((err) => __awaiter(this, void 0, void 0, function* () {
            return yield Promise.reject('Item does not exist or is inaccessible.');
        }));
    });
}
function checkIsLocalApp(templateId) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!window.jimuConfig.isDevEdition) {
            return yield Promise.reject('Item does not exist or is inaccessible.');
        }
        else {
            const portalUrl = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().getState().portalUrl;
            const getAppInfoParams = {
                id: templateId,
                portalUrl: portalUrl,
                isLocalApp: true
            };
            return yield (0,_index__WEBPACK_IMPORTED_MODULE_4__.getAppInfo)(getAppInfoParams).then((localAppInfo) => __awaiter(this, void 0, void 0, function* () {
                if (!(localAppInfo === null || localAppInfo === void 0 ? void 0 : localAppInfo.success)) {
                    return yield Promise.reject('Item does not exist or is inaccessible.');
                }
                else {
                    return yield Promise.resolve(getAppInfoParams);
                }
                // eslint-disable-next-line
            })).catch((err) => __awaiter(this, void 0, void 0, function* () {
                return yield Promise.reject('Item does not exist or is inaccessible.');
            }));
        }
    });
}
function checkIsAGOLApp(templateId) {
    return __awaiter(this, void 0, void 0, function* () {
        const portalUrl = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().getState().portalUrl;
        if (jimu_core__WEBPACK_IMPORTED_MODULE_0__.portalUrlUtils.isAGOLDomain(portalUrl)) {
            return yield Promise.reject(false);
        }
        const getAppInfoParams = {
            id: templateId,
            portalUrl: 'https://maps.arcgis.com',
            isLocalApp: false
        };
        return yield (0,_index__WEBPACK_IMPORTED_MODULE_4__.getAppInfo)(getAppInfoParams).then((localAppInfo) => __awaiter(this, void 0, void 0, function* () {
            return yield Promise.resolve(getAppInfoParams);
            // eslint-disable-next-line
        })).catch((err) => __awaiter(this, void 0, void 0, function* () {
            return yield Promise.reject('Item does not exist or is inaccessible.');
        }));
    });
}
function getConfigFromPortalItemResource(appID) {
    return __awaiter(this, void 0, void 0, function* () {
        const sessionManager = jimu_core__WEBPACK_IMPORTED_MODULE_0__.SessionManager.getInstance();
        const timestamp = new Date().getTime();
        return yield request(`${jimu_core__WEBPACK_IMPORTED_MODULE_0__.portalUrlUtils.getPortalRestUrl((0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().getState().portalUrl)}/content/items/${appID}/resources/config/config.json`, {
            authentication: sessionManager.getSessionByUrl((0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().getState().portalUrl),
            httpMethod: 'GET',
            params: {
                timestamp: timestamp
            }
        }).catch((err) => __awaiter(this, void 0, void 0, function* () {
            return yield Promise.reject(null);
        }));
    });
}
function getResourceOrigin(originalAppInfo) {
    const portalUrl = isAGOLApp(originalAppInfo) ? jimu_core__WEBPACK_IMPORTED_MODULE_0__.urlUtils.getArcgisOnlineUrl() : (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().getState().portalUrl;
    const isLocalAppResourceOrigin = originalAppInfo === null || originalAppInfo === void 0 ? void 0 : originalAppInfo.isLocalApp;
    if (isLocalAppResourceOrigin) {
        // local app`s resource origin in devEdtion
        return _local_rest_service__WEBPACK_IMPORTED_MODULE_5__.getOriginUrl() + '/apps/';
    }
    else {
        return (jimu_core__WEBPACK_IMPORTED_MODULE_0__.portalUrlUtils.getPlatformUrlByOrgUrl(portalUrl) +
            '/sharing/rest/content/items/');
    }
}
function createApp(appInfo, folderId) {
    return __awaiter(this, void 0, void 0, function* () {
        if (folderId) {
            return yield (0,_rest_service__WEBPACK_IMPORTED_MODULE_1__.createAppInFolder)({
                item: appInfo,
                folderId: folderId,
                authentication: jimu_core__WEBPACK_IMPORTED_MODULE_0__.SessionManager.getInstance().getMainSession()
            });
        }
        else {
            return yield (0,_rest_service__WEBPACK_IMPORTED_MODULE_1__.createItem)({
                item: appInfo,
                authentication: jimu_core__WEBPACK_IMPORTED_MODULE_0__.SessionManager.getInstance().getMainSession()
            });
        }
    });
}
function initAppConfig(appConfig) {
    if (!appConfig.attributes) {
        appConfig.attributes = {};
    }
    if (!appConfig.widgets) {
        appConfig.widgets = {};
    }
    if (!appConfig.widgetsManifest) {
        appConfig.widgetsManifest = {};
    }
    if (!appConfig.views) {
        appConfig.views = {};
    }
    if (!appConfig.sections) {
        appConfig.sections = {};
    }
    if (!appConfig.dialogs) {
        appConfig.dialogs = {};
    }
    if (!appConfig.pages) {
        appConfig.pages = {};
    }
    if (!appConfig.layouts) {
        appConfig.layouts = {};
    }
    if (!appConfig.dataSources) {
        appConfig.dataSources = {};
    }
    if (!appConfig.messageConfigs) {
        appConfig.messageConfigs = {};
    }
    return appConfig;
}
function optimizeWidgetsConfig(appConfig, appInfo) {
    Object.values(appConfig.widgets).forEach((json) => {
        if (json.uri === 'widgets/common/text/') {
            optimizeTextWidgetConfig(json.config, appInfo);
        }
    });
    return appConfig;
}
function optimizeTextWidgetConfig(config, appInfo) {
    const isTemplate = appInfo.type === _type__WEBPACK_IMPORTED_MODULE_3__.AppType.TemplateType;
    //Do not remove placeholder for template type app
    if (isTemplate)
        return config;
    //Placeholder are useless at run time if display text is configured.
    if (!isBlankRichText(config === null || config === void 0 ? void 0 : config.text)) {
        delete config.placeholder;
    }
    return config;
}
/**
 * Update the history labels in draft app config, then return the draft app config
 * @param draftAppConfig
 * @param publishedAppConfig
 */
function updateHistoryLabels(draftAppConfig, publishedAppConfig) {
    if (publishedAppConfig.__not_publish) {
        return draftAppConfig;
    }
    // remove ids that are not existed
    if (draftAppConfig.historyLabels) {
        removeNonExistIds(draftAppConfig, 'pages');
        removeNonExistIds(draftAppConfig, 'views');
        removeNonExistIds(draftAppConfig, 'dialogs');
    }
    addHisLabels(draftAppConfig, publishedAppConfig, 'pages');
    addHisLabels(draftAppConfig, publishedAppConfig, 'views');
    addHisLabels(draftAppConfig, publishedAppConfig, 'dialogs');
    return draftAppConfig;
}
function updateThumbnailForSaveAsApp(originAppInfo, newAppInfo, thumbnailFiles) {
    return __awaiter(this, void 0, void 0, function* () {
        if (thumbnailFiles) {
            const session = jimu_core__WEBPACK_IMPORTED_MODULE_0__.SessionManager.getInstance().getMainSession();
            const localAppItem = {
                id: newAppInfo.id,
                f: 'json',
                token: session === null || session === void 0 ? void 0 : session.token,
                thumbnail: thumbnailFiles
            };
            yield (0,_index__WEBPACK_IMPORTED_MODULE_4__.updateAppThumbnail)(localAppItem, newAppInfo.owner);
        }
        else {
            return yield updateThumbnail(newAppInfo.id, originAppInfo, (originAppInfo === null || originAppInfo === void 0 ? void 0 : originAppInfo.thumbnailurl) || originAppInfo.thumbnail);
        }
    });
}
/**
 * Deep clone. But only clone two levels.
 * And param must be Object.
 */
function cloneObj(obj) {
    const result = {};
    Object.keys(obj).forEach(id => {
        result[id] = Object.assign({}, obj[id]);
    });
    return result;
}
function removeNonExistIds(appConfig, type) {
    const his = appConfig.historyLabels;
    Object.keys(his[type] || {}).forEach(hisId => {
        var _a;
        if (!((_a = appConfig[type]) === null || _a === void 0 ? void 0 : _a[hisId])) {
            delete his[type][hisId];
        }
    });
}
function addHisLabels(draftAppConfig, publishedAppConfig, type) {
    const draftObj = draftAppConfig[type];
    const publishedObj = publishedAppConfig[type];
    if (!draftObj || !publishedObj) {
        return;
    }
    Object.keys(draftObj).forEach(id => {
        var _a, _b;
        const hisLabels = ((_b = (_a = publishedAppConfig.historyLabels) === null || _a === void 0 ? void 0 : _a[type]) === null || _b === void 0 ? void 0 : _b[id]) || [];
        if (publishedObj[id] && draftObj[id].label !== publishedObj[id].label) {
            if (!hisLabels.includes(publishedObj[id].label)) {
                hisLabels.push(publishedObj[id].label);
            }
        }
        if (hisLabels.length > 0) {
            if (!draftAppConfig.historyLabels) {
                draftAppConfig.historyLabels = {
                    [type]: {
                        [id]: hisLabels
                    }
                };
            }
            else if (!draftAppConfig.historyLabels[type]) {
                draftAppConfig.historyLabels[type] = {
                    [id]: hisLabels
                };
            }
            else {
                draftAppConfig.historyLabels[type][id] = hisLabels;
            }
        }
    });
}
const HTML_TAG_REGEXP = /<[^>]*>/mg;
/**
 * Check whether is rich text with empty content.
 */
const isBlankRichText = (html) => {
    if (!html)
        return true;
    if (html === '<p></p>' || html === '<p><br></p>')
        return true;
    let plainText = '';
    if (!html.includes('<')) {
        plainText = html;
    }
    else {
        plainText = html.replace(HTML_TAG_REGEXP, '');
    }
    plainText = plainText === null || plainText === void 0 ? void 0 : plainText.trim();
    return !plainText;
};
function replaceExbVersionInAppConfig(appConfig) {
    var _a;
    if (!appConfig)
        return null;
    const isHigherVersionApp = jimu_core__WEBPACK_IMPORTED_MODULE_0__.semver.lt(jimu_core__WEBPACK_IMPORTED_MODULE_0__.version, appConfig === null || appConfig === void 0 ? void 0 : appConfig.exbVersion);
    if (isHigherVersionApp) {
        //downgrade app version
        appConfig = appConfig.set('exbVersion', jimu_core__WEBPACK_IMPORTED_MODULE_0__.version);
    }
    const config = (_a = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().getState().appStateInBuilder) === null || _a === void 0 ? void 0 : _a.appConfig;
    const widgets = config.widgets || {};
    Object.keys(widgets).forEach(widgetId => {
        var _a, _b, _c, _d, _e;
        //Manifest.version is the version of the current widget code,
        //When the version of the widget is higher than the current code version, it needs to be downgraded to be consistent with the manifest.version
        //For custom widgets, if the version they use is not consistent with ExbBuilder, it needs further discussion on how to deal with it
        const isHigherVersionWidget = jimu_core__WEBPACK_IMPORTED_MODULE_0__.semver.lt((_b = (_a = widgets[widgetId]) === null || _a === void 0 ? void 0 : _a.manifest) === null || _b === void 0 ? void 0 : _b.version, (_c = widgets[widgetId]) === null || _c === void 0 ? void 0 : _c.version);
        if (isHigherVersionWidget) {
            appConfig = appConfig.setIn(['widgets', widgetId, 'version'], (_e = (_d = widgets[widgetId]) === null || _d === void 0 ? void 0 : _d.manifest) === null || _e === void 0 ? void 0 : _e.version);
        }
    });
    return appConfig;
}
function initAppConfigOfNewApp(appConfig) {
    var _a, _b;
    if (appConfig.attributes) {
        appConfig.attributes.portalUrl = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().getState().portalUrl;
    }
    else {
        appConfig.attributes = {
            portalUrl: (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().getState().portalUrl
        };
    }
    const sharedThemeJson = (_b = (_a = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().getState().portalSelf) === null || _a === void 0 ? void 0 : _a.portalProperties) === null || _b === void 0 ? void 0 : _b.sharedTheme;
    appConfig.sharedThemeVariables = jimu_core__WEBPACK_IMPORTED_MODULE_0__.sharedThemeUtils.createSharedThemeVariables(sharedThemeJson);
    return appConfig;
}


/***/ }),

/***/ "./jimu-for-builder/lib/service/jimu-request/index.ts":
/*!************************************************************!*\
  !*** ./jimu-for-builder/lib/service/jimu-request/index.ts ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getGroupCategorySchema: () => (/* reexport safe */ _items_get_category_schema__WEBPACK_IMPORTED_MODULE_5__.getGroupCategorySchema),
/* harmony export */   getGroupContent: () => (/* reexport safe */ _items_get_user_content__WEBPACK_IMPORTED_MODULE_1__.getGroupContent),
/* harmony export */   getOrgCategorySchema: () => (/* reexport safe */ _items_get_category_schema__WEBPACK_IMPORTED_MODULE_5__.getOrgCategorySchema),
/* harmony export */   getUserContent: () => (/* reexport safe */ _items_get_user_content__WEBPACK_IMPORTED_MODULE_1__.getUserContent),
/* harmony export */   itemsgroups: () => (/* reexport safe */ _items_itemsgroups__WEBPACK_IMPORTED_MODULE_4__.itemsgroups),
/* harmony export */   shareItems: () => (/* reexport safe */ _items_share_items__WEBPACK_IMPORTED_MODULE_2__.shareItems),
/* harmony export */   unShareItems: () => (/* reexport safe */ _items_unshare_items__WEBPACK_IMPORTED_MODULE_3__.unShareItems),
/* harmony export */   updateItem: () => (/* reexport safe */ _items_update_thumbnail__WEBPACK_IMPORTED_MODULE_0__.updateItem)
/* harmony export */ });
/* harmony import */ var _items_update_thumbnail__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./items/update-thumbnail */ "./jimu-for-builder/lib/service/jimu-request/items/update-thumbnail.ts");
/* harmony import */ var _items_get_user_content__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./items/get-user-content */ "./jimu-for-builder/lib/service/jimu-request/items/get-user-content.ts");
/* harmony import */ var _items_share_items__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./items/share-items */ "./jimu-for-builder/lib/service/jimu-request/items/share-items.ts");
/* harmony import */ var _items_unshare_items__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./items/unshare-items */ "./jimu-for-builder/lib/service/jimu-request/items/unshare-items.ts");
/* harmony import */ var _items_itemsgroups__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./items/itemsgroups */ "./jimu-for-builder/lib/service/jimu-request/items/itemsgroups.ts");
/* harmony import */ var _items_get_category_schema__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./items/get-category-schema */ "./jimu-for-builder/lib/service/jimu-request/items/get-category-schema.ts");








/***/ }),

/***/ "./jimu-for-builder/lib/service/jimu-request/items/get-category-schema.ts":
/*!********************************************************************************!*\
  !*** ./jimu-for-builder/lib/service/jimu-request/items/get-category-schema.ts ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getGroupCategorySchema: () => (/* binding */ getGroupCategorySchema),
/* harmony export */   getOrgCategorySchema: () => (/* binding */ getOrgCategorySchema)
/* harmony export */ });
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util */ "./jimu-for-builder/lib/service/jimu-request/util.ts");
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! jimu-core */ "jimu-core");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};


function getGroupCategorySchema(groupId, requestOptions, isArcGisOnlineRequest = false) {
    return __awaiter(this, void 0, void 0, function* () {
        const url = `${(0,_util__WEBPACK_IMPORTED_MODULE_0__.getOriginUrl)(isArcGisOnlineRequest)}/sharing/rest/community/groups/${groupId}/categorySchema`;
        if (isArcGisOnlineRequest && !isPortalAGOL()) {
            delete requestOptions.authentication;
        }
        const options = Object.assign(Object.assign({}, requestOptions), { params: {
                id: groupId
            }, httpMethod: 'GET' });
        const request = jimu_core__WEBPACK_IMPORTED_MODULE_1__.esri.restRequest.request;
        return yield request(url, options);
    });
}
function getOrgCategorySchema(requestOptions, isArcGisOnlineRequest = false) {
    return __awaiter(this, void 0, void 0, function* () {
        const orgId = (0,_util__WEBPACK_IMPORTED_MODULE_0__.getOriginId)(isArcGisOnlineRequest);
        const url = `${(0,_util__WEBPACK_IMPORTED_MODULE_0__.getOriginUrl)(isArcGisOnlineRequest)}/sharing/rest/portals/${orgId}/categorySchema`;
        if (isArcGisOnlineRequest && !isPortalAGOL()) {
            delete requestOptions.authentication;
        }
        const options = Object.assign(Object.assign({}, requestOptions), { httpMethod: 'GET' });
        const request = jimu_core__WEBPACK_IMPORTED_MODULE_1__.esri.restRequest.request;
        return yield request(url, options);
    });
}
function isPortalAGOL() {
    const portalUrl = (0,jimu_core__WEBPACK_IMPORTED_MODULE_1__.getAppStore)().getState().portalUrl;
    return jimu_core__WEBPACK_IMPORTED_MODULE_1__.portalUrlUtils.isAGOLDomain(portalUrl);
}


/***/ }),

/***/ "./jimu-for-builder/lib/service/jimu-request/items/get-user-content.ts":
/*!*****************************************************************************!*\
  !*** ./jimu-for-builder/lib/service/jimu-request/items/get-user-content.ts ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getGroupContent: () => (/* binding */ getGroupContent),
/* harmony export */   getUserContent: () => (/* binding */ getUserContent)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");
/* harmony import */ var _request__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../request */ "./jimu-for-builder/lib/service/jimu-request/request.ts");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util */ "./jimu-for-builder/lib/service/jimu-request/util.ts");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};



function getUserContent(requestOptions) {
    return __awaiter(this, void 0, void 0, function* () {
        const session = jimu_core__WEBPACK_IMPORTED_MODULE_0__.SessionManager.getInstance().getMainSession();
        const url = `${(0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().getState().portalUrl}/sharing/rest/content/users/${session === null || session === void 0 ? void 0 : session.username}`;
        const requestOption = Object.assign(Object.assign({}, requestOptions.params), { f: 'json', token: session === null || session === void 0 ? void 0 : session.token });
        return yield (0,_request__WEBPACK_IMPORTED_MODULE_1__.request)(url, requestOption, 'GET');
    });
}
function getGroupContent(groupId, requestOptions, isGetAGOLContent = false) {
    return __awaiter(this, void 0, void 0, function* () {
        const url = `${(0,_util__WEBPACK_IMPORTED_MODULE_2__.getOriginUrl)(isGetAGOLContent)}/sharing/rest/content/groups/${groupId}/search`;
        if (isGetAGOLContent && !(0,_util__WEBPACK_IMPORTED_MODULE_2__.isPortalAGOL)()) {
            delete requestOptions.authentication;
        }
        const options = Object.assign(Object.assign({}, requestOptions), { httpMethod: 'GET' });
        const request = jimu_core__WEBPACK_IMPORTED_MODULE_0__.esri.restRequest.request;
        return yield request(url, options);
    });
}


/***/ }),

/***/ "./jimu-for-builder/lib/service/jimu-request/items/itemsgroups.ts":
/*!************************************************************************!*\
  !*** ./jimu-for-builder/lib/service/jimu-request/items/itemsgroups.ts ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   itemsgroups: () => (/* binding */ itemsgroups)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};

function itemsgroups(requestOptions) {
    return __awaiter(this, void 0, void 0, function* () {
        const session = jimu_core__WEBPACK_IMPORTED_MODULE_0__.SessionManager.getInstance().getMainSession();
        const url = `${(0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().getState().portalUrl}/sharing/rest/content/itemsgroups`;
        const options = {
            params: requestOptions,
            httpMethod: 'GET',
            authentication: session
        };
        return yield jimu_core__WEBPACK_IMPORTED_MODULE_0__.esri.restRequest.request(url, options);
    });
}


/***/ }),

/***/ "./jimu-for-builder/lib/service/jimu-request/items/share-items.ts":
/*!************************************************************************!*\
  !*** ./jimu-for-builder/lib/service/jimu-request/items/share-items.ts ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   shareItems: () => (/* binding */ shareItems)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");
/* harmony import */ var _request__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../request */ "./jimu-for-builder/lib/service/jimu-request/request.ts");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};


function shareItems(requestOptions) {
    return __awaiter(this, void 0, void 0, function* () {
        const session = jimu_core__WEBPACK_IMPORTED_MODULE_0__.SessionManager.getInstance().getMainSession();
        const url = `${(0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().getState().portalUrl}/sharing/rest/content/items/${requestOptions.items}/share`;
        requestOptions = Object.assign(Object.assign({}, requestOptions), { f: 'json', token: session === null || session === void 0 ? void 0 : session.token });
        const keys = Object.keys(requestOptions);
        const data = new FormData();
        for (let i = 0; i < keys.length; i++) {
            data.append(keys[i], requestOptions[keys[i]]);
        }
        requestOptions = data;
        return yield (0,_request__WEBPACK_IMPORTED_MODULE_1__.request)(url, requestOptions);
    });
}


/***/ }),

/***/ "./jimu-for-builder/lib/service/jimu-request/items/unshare-items.ts":
/*!**************************************************************************!*\
  !*** ./jimu-for-builder/lib/service/jimu-request/items/unshare-items.ts ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   unShareItems: () => (/* binding */ unShareItems)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");
/* harmony import */ var _request__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../request */ "./jimu-for-builder/lib/service/jimu-request/request.ts");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};


function unShareItems(requestOptions) {
    return __awaiter(this, void 0, void 0, function* () {
        const session = jimu_core__WEBPACK_IMPORTED_MODULE_0__.SessionManager.getInstance().getMainSession();
        const url = `${(0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().getState().portalUrl}/sharing/rest/content/items/${requestOptions.items}/unshare`;
        requestOptions = Object.assign(Object.assign({}, requestOptions), { f: 'json', token: session === null || session === void 0 ? void 0 : session.token });
        const keys = Object.keys(requestOptions);
        const data = new FormData();
        for (let i = 0; i < keys.length; i++) {
            data.append(keys[i], requestOptions[keys[i]]);
        }
        requestOptions = data;
        return yield (0,_request__WEBPACK_IMPORTED_MODULE_1__.request)(url, requestOptions);
    });
}


/***/ }),

/***/ "./jimu-for-builder/lib/service/jimu-request/items/update-thumbnail.ts":
/*!*****************************************************************************!*\
  !*** ./jimu-for-builder/lib/service/jimu-request/items/update-thumbnail.ts ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   updateItem: () => (/* binding */ updateItem)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");
/* harmony import */ var _request__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../request */ "./jimu-for-builder/lib/service/jimu-request/request.ts");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};


function updateItem(requestOptions) {
    return __awaiter(this, void 0, void 0, function* () {
        const session = jimu_core__WEBPACK_IMPORTED_MODULE_0__.SessionManager.getInstance().getMainSession();
        const owner = requestOptions.owner ? requestOptions.owner : session === null || session === void 0 ? void 0 : session.username;
        const url = `${(0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().getState().portalUrl}/sharing/rest/content/users/${owner}/items/${requestOptions.item.id}/update`;
        requestOptions.params = Object.assign(Object.assign({}, requestOptions.params), requestOptions.item);
        const keys = Object.keys(requestOptions.params);
        const data = new FormData();
        for (let i = 0; i < keys.length; i++) {
            data.append(keys[i], requestOptions.params[keys[i]]);
        }
        requestOptions.params = data;
        return yield (0,_request__WEBPACK_IMPORTED_MODULE_1__.request)(url, data);
    });
}


/***/ }),

/***/ "./jimu-for-builder/lib/service/jimu-request/request.ts":
/*!**************************************************************!*\
  !*** ./jimu-for-builder/lib/service/jimu-request/request.ts ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   request: () => (/* binding */ request)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};

const isWebTier = jimu_core__WEBPACK_IMPORTED_MODULE_0__.SessionManager.getInstance().isTrustedServer((0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().getState().portalUrl);
function request(url, requestOptions = { f: 'json' }, requestType = 'POST') {
    return __awaiter(this, void 0, void 0, function* () {
        if (requestType === 'GET') {
            const requestUrl = url + encodeQueryString(requestOptions);
            return yield fetch(requestUrl, {
                credentials: isWebTier ? 'include' : 'same-origin',
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json'
                }
            }).then((response) => __awaiter(this, void 0, void 0, function* () {
                return yield response.json();
            })).then((data) => __awaiter(this, void 0, void 0, function* () {
                return yield Promise.resolve(data);
            }));
        }
        if (requestType === 'POST') {
            if (requestOptions && requestOptions.constructor.name === 'FormData') {
                return yield fetch(url, {
                    credentials: isWebTier ? 'include' : 'same-origin',
                    method: 'POST',
                    body: requestOptions
                }).then((response) => __awaiter(this, void 0, void 0, function* () {
                    return yield response.json();
                })).then((data) => __awaiter(this, void 0, void 0, function* () {
                    return yield Promise.resolve(data);
                }));
            }
            else {
                return yield fetch(url, {
                    credentials: isWebTier ? 'include' : 'same-origin',
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(requestOptions)
                }).then((response) => __awaiter(this, void 0, void 0, function* () {
                    return yield response.json();
                })).then((data) => __awaiter(this, void 0, void 0, function* () {
                    return yield Promise.resolve(data);
                }));
            }
        }
        return yield Promise.reject(null);
    });
}
function encodeQueryString(params) {
    if (!params) {
        return '';
    }
    const keys = Object.keys(params);
    return keys.length
        ? '?' + keys
            .map(key => encodeURIComponent(key) +
            '=' + encodeURIComponent(params[key]))
            .join('&')
        : '';
}


/***/ }),

/***/ "./jimu-for-builder/lib/service/jimu-request/util.ts":
/*!***********************************************************!*\
  !*** ./jimu-for-builder/lib/service/jimu-request/util.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getOriginId: () => (/* binding */ getOriginId),
/* harmony export */   getOriginUrl: () => (/* binding */ getOriginUrl),
/* harmony export */   getUserContentUrl: () => (/* binding */ getUserContentUrl),
/* harmony export */   getUserName: () => (/* binding */ getUserName),
/* harmony export */   isPortalAGOL: () => (/* binding */ isPortalAGOL)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");

function getOriginUrl(isArcGisOnlineRequest = false) {
    if (isArcGisOnlineRequest) {
        return jimu_core__WEBPACK_IMPORTED_MODULE_0__.urlUtils.getArcgisOnlineUrl();
    }
    else {
        return window.location.origin;
    }
}
function getUserContentUrl(isNotContainUsers = false) {
    if (isNotContainUsers) {
        return '/sharing/rest/content/';
    }
    else {
        return '/sharing/rest/content/users/';
    }
}
function getUserName() {
    var _a;
    return (_a = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().getState().user) === null || _a === void 0 ? void 0 : _a.username;
}
function getOriginId(isArcGisOnlineRequest = false) {
    var _a;
    if (isArcGisOnlineRequest) {
        return jimu_core__WEBPACK_IMPORTED_MODULE_0__.urlUtils.getArcgisOnlineOrgId();
    }
    else {
        return (_a = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().getState().user) === null || _a === void 0 ? void 0 : _a.orgId;
    }
}
function isPortalAGOL() {
    const portalUrl = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().getState().portalUrl;
    return jimu_core__WEBPACK_IMPORTED_MODULE_0__.portalUrlUtils.isAGOLDomain(portalUrl);
}


/***/ }),

/***/ "./jimu-for-builder/lib/service/local-rest-service/index.ts":
/*!******************************************************************!*\
  !*** ./jimu-for-builder/lib/service/local-rest-service/index.ts ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   addItemResource: () => (/* reexport safe */ _items_add__WEBPACK_IMPORTED_MODULE_5__.addItemResource),
/* harmony export */   checkItemVersion: () => (/* reexport safe */ _items_create__WEBPACK_IMPORTED_MODULE_1__.checkItemVersion),
/* harmony export */   createItem: () => (/* reexport safe */ _items_create__WEBPACK_IMPORTED_MODULE_1__.createItem),
/* harmony export */   getItem: () => (/* reexport safe */ _items_get__WEBPACK_IMPORTED_MODULE_2__.getItem),
/* harmony export */   getItemData: () => (/* reexport safe */ _items_get__WEBPACK_IMPORTED_MODULE_2__.getItemData),
/* harmony export */   getItemResource: () => (/* reexport safe */ _items_get__WEBPACK_IMPORTED_MODULE_2__.getItemResource),
/* harmony export */   getItemResources: () => (/* reexport safe */ _items_get__WEBPACK_IMPORTED_MODULE_2__.getItemResources),
/* harmony export */   getOriginUrl: () => (/* reexport safe */ _util__WEBPACK_IMPORTED_MODULE_7__.getOriginUrl),
/* harmony export */   getRequestMethod: () => (/* reexport safe */ _util__WEBPACK_IMPORTED_MODULE_7__.getRequestMethod),
/* harmony export */   getUserContentUrl: () => (/* reexport safe */ _util__WEBPACK_IMPORTED_MODULE_7__.getUserContentUrl),
/* harmony export */   getUserName: () => (/* reexport safe */ _util__WEBPACK_IMPORTED_MODULE_7__.getUserName),
/* harmony export */   importItem: () => (/* reexport safe */ _items_create__WEBPACK_IMPORTED_MODULE_1__.importItem),
/* harmony export */   removeItem: () => (/* reexport safe */ _items_remove__WEBPACK_IMPORTED_MODULE_3__.removeItem),
/* harmony export */   removeItemResource: () => (/* reexport safe */ _items_remove__WEBPACK_IMPORTED_MODULE_3__.removeItemResource),
/* harmony export */   request: () => (/* reexport safe */ _request__WEBPACK_IMPORTED_MODULE_6__.request),
/* harmony export */   searchItems: () => (/* reexport safe */ _items_search__WEBPACK_IMPORTED_MODULE_0__.searchItems),
/* harmony export */   searchItemsByPortalUrl: () => (/* reexport safe */ _items_search__WEBPACK_IMPORTED_MODULE_0__.searchItemsByPortalUrl),
/* harmony export */   updateItem: () => (/* reexport safe */ _items_update__WEBPACK_IMPORTED_MODULE_4__.updateItem),
/* harmony export */   updateItemResource: () => (/* reexport safe */ _items_update__WEBPACK_IMPORTED_MODULE_4__.updateItemResource)
/* harmony export */ });
/* harmony import */ var _items_search__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./items/search */ "./jimu-for-builder/lib/service/local-rest-service/items/search.ts");
/* harmony import */ var _items_create__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./items/create */ "./jimu-for-builder/lib/service/local-rest-service/items/create.ts");
/* harmony import */ var _items_get__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./items/get */ "./jimu-for-builder/lib/service/local-rest-service/items/get.ts");
/* harmony import */ var _items_remove__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./items/remove */ "./jimu-for-builder/lib/service/local-rest-service/items/remove.ts");
/* harmony import */ var _items_update__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./items/update */ "./jimu-for-builder/lib/service/local-rest-service/items/update.ts");
/* harmony import */ var _items_add__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./items/add */ "./jimu-for-builder/lib/service/local-rest-service/items/add.ts");
/* harmony import */ var _request__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./request */ "./jimu-for-builder/lib/service/local-rest-service/request.ts");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./util */ "./jimu-for-builder/lib/service/local-rest-service/util.ts");










/***/ }),

/***/ "./jimu-for-builder/lib/service/local-rest-service/items/add.ts":
/*!**********************************************************************!*\
  !*** ./jimu-for-builder/lib/service/local-rest-service/items/add.ts ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   addItemResource: () => (/* binding */ addItemResource)
/* harmony export */ });
/* harmony import */ var _request__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../request */ "./jimu-for-builder/lib/service/local-rest-service/request.ts");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util */ "./jimu-for-builder/lib/service/local-rest-service/util.ts");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};


function addItemResource(requestOptions) {
    return __awaiter(this, void 0, void 0, function* () {
        const url = `${(0,_util__WEBPACK_IMPORTED_MODULE_1__.getOriginUrl)()}${(0,_util__WEBPACK_IMPORTED_MODULE_1__.getUserContentUrl)()}items/${requestOptions.id}/addResources`;
        requestOptions.params = Object.assign(Object.assign({ fileName: requestOptions.name, text: requestOptions.content, access: requestOptions.private ? 'private' : 'inherit' }, requestOptions.params), { file: requestOptions.resource });
        delete requestOptions.params.file;
        requestOptions.params.file = requestOptions.resource;
        const keys = Object.keys(requestOptions.params);
        const data = new FormData();
        for (let i = 0; i < keys.length; i++) {
            data.append(keys[i], requestOptions.params[keys[i]]);
        }
        requestOptions.params = data;
        return yield (0,_request__WEBPACK_IMPORTED_MODULE_0__.request)(url, requestOptions);
    });
}


/***/ }),

/***/ "./jimu-for-builder/lib/service/local-rest-service/items/create.ts":
/*!*************************************************************************!*\
  !*** ./jimu-for-builder/lib/service/local-rest-service/items/create.ts ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   checkItemVersion: () => (/* binding */ checkItemVersion),
/* harmony export */   createItem: () => (/* binding */ createItem),
/* harmony export */   importItem: () => (/* binding */ importItem)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");
/* harmony import */ var _request__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../request */ "./jimu-for-builder/lib/service/local-rest-service/request.ts");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util */ "./jimu-for-builder/lib/service/local-rest-service/util.ts");
/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./helpers */ "./jimu-for-builder/lib/service/local-rest-service/items/helpers.ts");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};




function createItem(requestOptions) {
    return __awaiter(this, void 0, void 0, function* () {
        // delegate to createItemInFolder placing in the root of the filestore
        const options = Object.assign({ folderId: null }, requestOptions);
        return yield createItemInFolder(options);
    });
}
function createItemInFolder(requestOptions) {
    var _a, _b;
    return __awaiter(this, void 0, void 0, function* () {
        if (requestOptions.file && !requestOptions.multipart) {
            return yield Promise.reject(new Error('The request must be a multipart request for file uploading.'));
        }
        if (requestOptions.multipart && !requestOptions.filename) {
            return yield Promise.reject(new Error('The file name is required for a multipart request.'));
        }
        const userName = (0,_util__WEBPACK_IMPORTED_MODULE_2__.getUserName)();
        const owner = userName;
        const baseUrl = (0,_util__WEBPACK_IMPORTED_MODULE_2__.getOriginUrl)();
        const url = `${baseUrl}${(0,_util__WEBPACK_IMPORTED_MODULE_2__.getUserContentUrl)()}addItem`;
        requestOptions.params = Object.assign(Object.assign(Object.assign({}, requestOptions.params), (0,_helpers__WEBPACK_IMPORTED_MODULE_3__.serializeItem)(requestOptions.item)), { portalUrl: (_b = (_a = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)()) === null || _a === void 0 ? void 0 : _a.getState()) === null || _b === void 0 ? void 0 : _b.portalUrl });
        // serialize the item into something Portal will accept
        const options = jimu_core__WEBPACK_IMPORTED_MODULE_0__.esri.restRequest.appendCustomParams(requestOptions, [
            'owner',
            'folderId',
            'file',
            'dataUrl',
            'text',
            'async',
            'multipart',
            'filename',
            'overwrite'
        ], {
            params: Object.assign({}, requestOptions.params)
        });
        options.params.username = owner;
        return yield (0,_request__WEBPACK_IMPORTED_MODULE_1__.request)(url, options);
    });
}
function importItem(item, requestOptions) {
    return __awaiter(this, void 0, void 0, function* () {
        const baseUrl = (0,_util__WEBPACK_IMPORTED_MODULE_2__.getOriginUrl)();
        const url = `${baseUrl}${(0,_util__WEBPACK_IMPORTED_MODULE_2__.getUserContentUrl)()}importItem`;
        if (!(item === null || item === void 0 ? void 0 : item.appZip)) {
            return Promise.reject('No app files');
        }
        requestOptions.params = Object.assign(Object.assign({}, requestOptions.params), item);
        const keys = Object.keys(requestOptions.params);
        const data = new FormData();
        for (let i = 0; i < keys.length; i++) {
            data.append(keys[i], requestOptions.params[keys[i]]);
        }
        requestOptions.params = data;
        return yield (0,_request__WEBPACK_IMPORTED_MODULE_1__.request)(url, requestOptions);
    });
}
function checkItemVersion(item, requestOptions) {
    return __awaiter(this, void 0, void 0, function* () {
        const baseUrl = (0,_util__WEBPACK_IMPORTED_MODULE_2__.getOriginUrl)();
        const url = `${baseUrl}${(0,_util__WEBPACK_IMPORTED_MODULE_2__.getUserContentUrl)()}checkItemVersion`;
        if (!(item === null || item === void 0 ? void 0 : item.appZip)) {
            return Promise.reject('No app files');
        }
        requestOptions.params = Object.assign(Object.assign({}, requestOptions.params), item);
        const keys = Object.keys(requestOptions.params);
        const data = new FormData();
        for (let i = 0; i < keys.length; i++) {
            data.append(keys[i], requestOptions.params[keys[i]]);
        }
        requestOptions.params = data;
        return yield (0,_request__WEBPACK_IMPORTED_MODULE_1__.request)(url, requestOptions);
    });
}


/***/ }),

/***/ "./jimu-for-builder/lib/service/local-rest-service/items/get.ts":
/*!**********************************************************************!*\
  !*** ./jimu-for-builder/lib/service/local-rest-service/items/get.ts ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getItem: () => (/* binding */ getItem),
/* harmony export */   getItemData: () => (/* binding */ getItemData),
/* harmony export */   getItemResource: () => (/* binding */ getItemResource),
/* harmony export */   getItemResources: () => (/* binding */ getItemResources)
/* harmony export */ });
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util */ "./jimu-for-builder/lib/service/local-rest-service/util.ts");
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! jimu-core */ "jimu-core");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};


function getItemData(id, requestOptions, isArcGisOnlineRequest = false) {
    return __awaiter(this, void 0, void 0, function* () {
        const baseUrl = (0,_util__WEBPACK_IMPORTED_MODULE_0__.getOriginUrl)(isArcGisOnlineRequest);
        const url = `${baseUrl}${(0,_util__WEBPACK_IMPORTED_MODULE_0__.getUserContentUrl)(isArcGisOnlineRequest)}items/${id}/data`;
        // default to a GET request
        const options = Object.assign({ params: {} }, requestOptions);
        if (options.file) {
            options.params.f = null;
        }
        if (isArcGisOnlineRequest && !isPortalAGOL()) {
            delete options.authentication;
        }
        const request = (0,_util__WEBPACK_IMPORTED_MODULE_0__.getRequestMethod)(isArcGisOnlineRequest);
        return yield request(url, options).catch(err => {
            /* if the item doesn't include data, the response will be empty
               and the internal call to response.json() will fail */
            const emptyResponseErr = /Unexpected end of (JSON input|data at line 1 column 1)/i;
            /* istanbul ignore else */
            if (!emptyResponseErr.test(err.message)) {
                throw err;
            }
        });
    });
}
function getItem(id, requestOptions, isArcGisOnlineRequest = false) {
    return __awaiter(this, void 0, void 0, function* () {
        const baseUrl = (0,_util__WEBPACK_IMPORTED_MODULE_0__.getOriginUrl)(isArcGisOnlineRequest);
        // const users = isArcGisOnlineRequest ? '' : 'users/'
        const url = `${baseUrl}${(0,_util__WEBPACK_IMPORTED_MODULE_0__.getUserContentUrl)(isArcGisOnlineRequest)}items/${id}`;
        // default to a GET request
        const options = Object.assign({}, requestOptions);
        if (isArcGisOnlineRequest && !isPortalAGOL()) {
            delete options.authentication;
        }
        const request = (0,_util__WEBPACK_IMPORTED_MODULE_0__.getRequestMethod)(isArcGisOnlineRequest);
        return yield request(url, options);
    });
}
function getItemResources(id, requestOptions, isArcGisOnlineRequest = false) {
    return __awaiter(this, void 0, void 0, function* () {
        const url = `${(0,_util__WEBPACK_IMPORTED_MODULE_0__.getOriginUrl)(isArcGisOnlineRequest)}${(0,_util__WEBPACK_IMPORTED_MODULE_0__.getUserContentUrl)(isArcGisOnlineRequest)}items/${id}/resources`;
        // mix in user supplied params
        requestOptions.params = Object.assign(Object.assign({}, requestOptions.params), { num: 1000 });
        if (isArcGisOnlineRequest && !isPortalAGOL()) {
            delete requestOptions.authentication;
        }
        const request = (0,_util__WEBPACK_IMPORTED_MODULE_0__.getRequestMethod)(isArcGisOnlineRequest);
        return yield request(url, requestOptions, 'GET');
    });
}
function getItemResource(id, requestOptions, isArcGisOnlineRequest = false) {
    return __awaiter(this, void 0, void 0, function* () {
        const resourceName = requestOptions.fileName;
        const url = `${(0,_util__WEBPACK_IMPORTED_MODULE_0__.getOriginUrl)(isArcGisOnlineRequest)}${(0,_util__WEBPACK_IMPORTED_MODULE_0__.getUserContentUrl)(isArcGisOnlineRequest)}items/${id}/resources/${resourceName}`;
        if (isArcGisOnlineRequest && !isPortalAGOL()) {
            delete requestOptions.authentication;
        }
        const request = (0,_util__WEBPACK_IMPORTED_MODULE_0__.getRequestMethod)(isArcGisOnlineRequest);
        return yield request(url, requestOptions, 'GET');
    });
}
function isPortalAGOL() {
    const portalUrl = (0,jimu_core__WEBPACK_IMPORTED_MODULE_1__.getAppStore)().getState().portalUrl;
    return jimu_core__WEBPACK_IMPORTED_MODULE_1__.portalUrlUtils.isAGOLDomain(portalUrl);
}


/***/ }),

/***/ "./jimu-for-builder/lib/service/local-rest-service/items/helpers.ts":
/*!**************************************************************************!*\
  !*** ./jimu-for-builder/lib/service/local-rest-service/items/helpers.ts ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   determineOwner: () => (/* binding */ determineOwner),
/* harmony export */   serializeItem: () => (/* binding */ serializeItem)
/* harmony export */ });
/* Copyright (c) 2017-2018 Environmental Systems Research Institute, Inc.
 * Apache-2.0 */
/**
 * Serialize an item and its data into a json format accepted by the Portal API for create and update operations
 *
 * @param item Item to be serialized
 * @returns a formatted json object to be sent to Portal
 */
function serializeItem(item) {
    // create a clone so we're not messing with the original
    const clone = JSON.parse(JSON.stringify(item));
    // binary data needs POSTed as a `file`
    // JSON object literals should be passed as `text`.
    if (clone.data) {
        (typeof Blob !== 'undefined' && item.data instanceof Blob) ||
            // Node.js doesn't implement Blob
            item.data.constructor.name === 'ReadStream'
            ? (clone.file = item.data)
            : (clone.text = item.data);
        delete clone.data;
    }
    return clone;
}
/**
 * requestOptions.owner is given priority, requestOptions.item.owner will be checked next. If neither are present, authentication.username will be assumed.
 */
function determineOwner(requestOptions) {
    if (requestOptions.owner) {
        return requestOptions.owner;
    }
    if (requestOptions.item && requestOptions.item.owner) {
        return requestOptions.item.owner;
    }
    else {
        return requestOptions.authentication.username;
    }
}


/***/ }),

/***/ "./jimu-for-builder/lib/service/local-rest-service/items/remove.ts":
/*!*************************************************************************!*\
  !*** ./jimu-for-builder/lib/service/local-rest-service/items/remove.ts ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   removeItem: () => (/* binding */ removeItem),
/* harmony export */   removeItemResource: () => (/* binding */ removeItemResource)
/* harmony export */ });
/* harmony import */ var _request__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../request */ "./jimu-for-builder/lib/service/local-rest-service/request.ts");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util */ "./jimu-for-builder/lib/service/local-rest-service/util.ts");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};


function removeItem(requestOptions) {
    return __awaiter(this, void 0, void 0, function* () {
        const userName = (0,_util__WEBPACK_IMPORTED_MODULE_1__.getUserName)();
        const baseUrl = (0,_util__WEBPACK_IMPORTED_MODULE_1__.getOriginUrl)();
        requestOptions.userName = userName;
        const url = `${baseUrl}${(0,_util__WEBPACK_IMPORTED_MODULE_1__.getUserContentUrl)()}items/${requestOptions.id}/delete`;
        return yield (0,_request__WEBPACK_IMPORTED_MODULE_0__.request)(url, requestOptions);
    });
}
function removeItemResource(requestOptions) {
    return __awaiter(this, void 0, void 0, function* () {
        const url = `${(0,_util__WEBPACK_IMPORTED_MODULE_1__.getOriginUrl)()}${(0,_util__WEBPACK_IMPORTED_MODULE_1__.getUserContentUrl)()}items/${requestOptions.id}/removeResources`;
        // mix in user supplied params
        requestOptions.params = Object.assign(Object.assign({}, requestOptions.params), { resource: requestOptions.resource });
        return yield (0,_request__WEBPACK_IMPORTED_MODULE_0__.request)(url, requestOptions);
    });
}


/***/ }),

/***/ "./jimu-for-builder/lib/service/local-rest-service/items/search.ts":
/*!*************************************************************************!*\
  !*** ./jimu-for-builder/lib/service/local-rest-service/items/search.ts ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   searchItems: () => (/* binding */ searchItems),
/* harmony export */   searchItemsByPortalUrl: () => (/* binding */ searchItemsByPortalUrl)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");
/* harmony import */ var _type__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../type */ "./jimu-for-builder/lib/service/type/index.ts");
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../index */ "./jimu-for-builder/lib/service/local-rest-service/index.ts");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
/* eslint-disable prefer-const */



function searchItems(search, searchType = _type__WEBPACK_IMPORTED_MODULE_1__.SearchType.Other) {
    return __awaiter(this, void 0, void 0, function* () {
        return yield genericSearch(search, 'item', searchType);
    });
}
function genericSearch(search, searchRequestType, searchType = _type__WEBPACK_IMPORTED_MODULE_1__.SearchType.Other) {
    return __awaiter(this, void 0, void 0, function* () {
        let url;
        let options;
        const originUrl = searchType === _type__WEBPACK_IMPORTED_MODULE_1__.SearchType.AGOL ? 'https://www.arcgis.com' : window.location.origin;
        url = `${originUrl}/sharing/rest/search`;
        if (typeof search === 'string' || search instanceof jimu_core__WEBPACK_IMPORTED_MODULE_0__.esri.restPortal.SearchQueryBuilder) {
            options = {
                params: {
                    q: search
                }
            };
        }
        else {
            options = jimu_core__WEBPACK_IMPORTED_MODULE_0__.esri.restRequest.appendCustomParams(Object.assign(Object.assign({}, search), { f: 'json' }), ['q', 'num', 'start', 'sortField', 'sortOrder', 'portalUrl', 'f']);
        }
        // send the request
        return (0,_index__WEBPACK_IMPORTED_MODULE_2__.request)(url, options, 'GET').then(r => {
            if (r.nextStart && r.nextStart !== -1) {
                r.nextPage = function () {
                    return __awaiter(this, void 0, void 0, function* () {
                        let newOptions;
                        if (typeof search === 'string' ||
                            search instanceof jimu_core__WEBPACK_IMPORTED_MODULE_0__.esri.restPortal.SearchQueryBuilder) {
                            newOptions = {
                                q: search,
                                start: r.nextStart
                            };
                        }
                        else {
                            newOptions = search;
                            newOptions.start = r.nextStart;
                        }
                        return yield genericSearch(newOptions, searchRequestType);
                    });
                };
            }
            return r;
        });
    });
}
function searchItemsByPortalUrl(search, portalUrl) {
    return __awaiter(this, void 0, void 0, function* () {
        return yield genericSearchByPortalUrl(search, portalUrl);
    });
}
function genericSearchByPortalUrl(search, portalUrl) {
    return __awaiter(this, void 0, void 0, function* () {
        let url;
        let options;
        if (!url)
            Promise.resolve(null);
        url = `${portalUrl}/sharing/rest/search`;
        if (typeof search === 'string' || search instanceof jimu_core__WEBPACK_IMPORTED_MODULE_0__.esri.restPortal.SearchQueryBuilder) {
            options = {
                params: {
                    q: search
                }
            };
        }
        else {
            options = jimu_core__WEBPACK_IMPORTED_MODULE_0__.esri.restRequest.appendCustomParams(Object.assign(Object.assign({}, search), { f: 'json' }), ['q', 'num', 'start', 'sortField', 'sortOrder', 'portalUrl', 'f']);
        }
        // send the request
        return (0,_index__WEBPACK_IMPORTED_MODULE_2__.request)(url, options, 'GET').then(r => {
            if (r.nextStart && r.nextStart !== -1) {
                r.nextPage = function () {
                    return __awaiter(this, void 0, void 0, function* () {
                        let newOptions;
                        if (typeof search === 'string' ||
                            search instanceof jimu_core__WEBPACK_IMPORTED_MODULE_0__.esri.restPortal.SearchQueryBuilder) {
                            newOptions = {
                                q: search,
                                start: r.nextStart
                            };
                        }
                        else {
                            newOptions = search;
                            newOptions.start = r.nextStart;
                        }
                        return yield genericSearchByPortalUrl(newOptions, 'item');
                    });
                };
            }
            return r;
        });
    });
}


/***/ }),

/***/ "./jimu-for-builder/lib/service/local-rest-service/items/update.ts":
/*!*************************************************************************!*\
  !*** ./jimu-for-builder/lib/service/local-rest-service/items/update.ts ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   updateItem: () => (/* binding */ updateItem),
/* harmony export */   updateItemResource: () => (/* binding */ updateItemResource)
/* harmony export */ });
/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./helpers */ "./jimu-for-builder/lib/service/local-rest-service/items/helpers.ts");
/* harmony import */ var _request__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../request */ "./jimu-for-builder/lib/service/local-rest-service/request.ts");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util */ "./jimu-for-builder/lib/service/local-rest-service/util.ts");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};



function updateItem(requestOptions) {
    return __awaiter(this, void 0, void 0, function* () {
        const userName = (0,_util__WEBPACK_IMPORTED_MODULE_2__.getUserName)();
        const baseUrl = (0,_util__WEBPACK_IMPORTED_MODULE_2__.getOriginUrl)();
        requestOptions.userName = userName;
        const url = `${baseUrl}${(0,_util__WEBPACK_IMPORTED_MODULE_2__.getUserContentUrl)()}items/${requestOptions.item.id}/update`;
        // serialize the item into something Portal will accept
        requestOptions.params = Object.assign(Object.assign({}, requestOptions.params), (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.serializeItem)(requestOptions.item));
        if (requestOptions.item.thumbnail && typeof (requestOptions.item.thumbnail) !== 'string') {
            requestOptions.params = Object.assign(Object.assign({}, requestOptions.params), requestOptions.item);
            const keys = Object.keys(requestOptions.params);
            const data = new FormData();
            for (let i = 0; i < keys.length; i++) {
                data.append(keys[i], requestOptions.params[keys[i]]);
            }
            requestOptions.params = data;
        }
        return yield (0,_request__WEBPACK_IMPORTED_MODULE_1__.request)(url, requestOptions);
    });
}
function updateItemResource(requestOptions) {
    return __awaiter(this, void 0, void 0, function* () {
        const url = `${(0,_util__WEBPACK_IMPORTED_MODULE_2__.getOriginUrl)()}${(0,_util__WEBPACK_IMPORTED_MODULE_2__.getUserContentUrl)()}items/${requestOptions.id}/updateResources`;
        // mix in user supplied params
        requestOptions.params = Object.assign(Object.assign({ fileName: requestOptions.name, text: requestOptions.content }, requestOptions.params), { file: requestOptions.resource });
        delete requestOptions.params.file;
        requestOptions.params.file = requestOptions.resource;
        // only override the access specified previously if 'private' is passed explicitly
        if (typeof requestOptions.private !== 'undefined') {
            requestOptions.params.access = requestOptions.private
                ? 'private'
                : 'inherit';
        }
        const keys = Object.keys(requestOptions.params);
        const data = new FormData();
        for (let i = 0; i < keys.length; i++) {
            data.append(keys[i], requestOptions.params[keys[i]]);
        }
        requestOptions.params = data;
        return yield (0,_request__WEBPACK_IMPORTED_MODULE_1__.request)(url, requestOptions);
    });
}


/***/ }),

/***/ "./jimu-for-builder/lib/service/local-rest-service/request.ts":
/*!********************************************************************!*\
  !*** ./jimu-for-builder/lib/service/local-rest-service/request.ts ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   request: () => (/* binding */ request)
/* harmony export */ });
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
function request(url, requestOptions = { params: { f: 'json' } }, requestType = 'POST') {
    return __awaiter(this, void 0, void 0, function* () {
        if (requestType === 'GET') {
            const requestUrl = url + encodeQueryString(requestOptions.params);
            return yield fetch(requestUrl, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json'
                }
            }).then((response) => __awaiter(this, void 0, void 0, function* () {
                return yield response.json();
            })).then((data) => __awaiter(this, void 0, void 0, function* () {
                return yield Promise.resolve(data);
            }));
        }
        if (requestType === 'POST') {
            if (requestOptions.params && requestOptions.params.constructor.name === 'FormData') {
                return yield fetch(url, {
                    method: 'POST',
                    body: requestOptions.params
                }).then((response) => __awaiter(this, void 0, void 0, function* () {
                    return yield response.json();
                })).then((data) => __awaiter(this, void 0, void 0, function* () {
                    return yield Promise.resolve(data);
                }));
            }
            else {
                return yield fetch(url, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(requestOptions.params)
                }).then((response) => __awaiter(this, void 0, void 0, function* () {
                    return yield response.json();
                })).then((data) => __awaiter(this, void 0, void 0, function* () {
                    return yield Promise.resolve(data);
                }));
            }
        }
        return yield Promise.reject(null);
    });
}
function encodeQueryString(params) {
    if (!params) {
        return '';
    }
    const keys = Object.keys(params);
    return keys.length
        ? '?' + keys
            .map(key => encodeURIComponent(key) +
            '=' + encodeURIComponent(params[key]))
            .join('&')
        : '';
}


/***/ }),

/***/ "./jimu-for-builder/lib/service/local-rest-service/util.ts":
/*!*****************************************************************!*\
  !*** ./jimu-for-builder/lib/service/local-rest-service/util.ts ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getOriginUrl: () => (/* binding */ getOriginUrl),
/* harmony export */   getRequestMethod: () => (/* binding */ getRequestMethod),
/* harmony export */   getUserContentUrl: () => (/* binding */ getUserContentUrl),
/* harmony export */   getUserName: () => (/* binding */ getUserName)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index */ "./jimu-for-builder/lib/service/local-rest-service/index.ts");


const restRequest = jimu_core__WEBPACK_IMPORTED_MODULE_0__.esri.restRequest.request;
function getOriginUrl(isArcGisOnlineRequest = false) {
    if (isArcGisOnlineRequest) {
        return jimu_core__WEBPACK_IMPORTED_MODULE_0__.urlUtils.getArcgisOnlineUrl();
    }
    else {
        return window.location.origin;
    }
}
function getUserContentUrl(isNotContainUsers = false) {
    if (isNotContainUsers) {
        return '/sharing/rest/content/';
    }
    else {
        return '/sharing/rest/content/users/';
    }
}
function getUserName() {
    var _a;
    return (_a = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().getState().user) === null || _a === void 0 ? void 0 : _a.username;
}
function getRequestMethod(isArcGisOnlineRequest = false) {
    return isArcGisOnlineRequest ? restRequest : _index__WEBPACK_IMPORTED_MODULE_1__.request;
}


/***/ }),

/***/ "./jimu-for-builder/lib/service/rest-service.tsx":
/*!*******************************************************!*\
  !*** ./jimu-for-builder/lib/service/rest-service.tsx ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   addItemResource: () => (/* binding */ addItemResource),
/* harmony export */   checkAppVersion: () => (/* binding */ checkAppVersion),
/* harmony export */   createAppInFolder: () => (/* binding */ createAppInFolder),
/* harmony export */   createItem: () => (/* binding */ createItem),
/* harmony export */   getGroupCategorySchema: () => (/* binding */ getGroupCategorySchema),
/* harmony export */   getGroupContents: () => (/* binding */ getGroupContents),
/* harmony export */   getItem: () => (/* binding */ getItem),
/* harmony export */   getItemData: () => (/* binding */ getItemData),
/* harmony export */   getItemResource: () => (/* binding */ getItemResource),
/* harmony export */   getItemResources: () => (/* binding */ getItemResources),
/* harmony export */   getItemsGroups: () => (/* binding */ getItemsGroups),
/* harmony export */   getOrgCategorySchema: () => (/* binding */ getOrgCategorySchema),
/* harmony export */   getResourceOrigin: () => (/* binding */ getResourceOrigin),
/* harmony export */   getUserContent: () => (/* binding */ getUserContent),
/* harmony export */   getUsersTags: () => (/* binding */ getUsersTags),
/* harmony export */   importApp: () => (/* binding */ importApp),
/* harmony export */   itemsgroups: () => (/* binding */ itemsgroups),
/* harmony export */   moveItem: () => (/* binding */ moveItem),
/* harmony export */   removeItem: () => (/* binding */ removeItem),
/* harmony export */   removeItemResource: () => (/* binding */ removeItemResource),
/* harmony export */   searchGroup: () => (/* binding */ searchGroup),
/* harmony export */   searchItems: () => (/* binding */ searchItems),
/* harmony export */   searchItemsByPortalUrl: () => (/* binding */ searchItemsByPortalUrl),
/* harmony export */   shareItemWithGroup: () => (/* binding */ shareItemWithGroup),
/* harmony export */   unshareItemWithGroup: () => (/* binding */ unshareItemWithGroup),
/* harmony export */   updateAppsThumbnail: () => (/* binding */ updateAppsThumbnail),
/* harmony export */   updateItem: () => (/* binding */ updateItem),
/* harmony export */   updateItemResource: () => (/* binding */ updateItemResource)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");
/* harmony import */ var _local_rest_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./local-rest-service */ "./jimu-for-builder/lib/service/local-rest-service/index.ts");
/* harmony import */ var _jimu_request__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./jimu-request */ "./jimu-for-builder/lib/service/jimu-request/index.ts");
/* harmony import */ var _app_service_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app-service/util */ "./jimu-for-builder/lib/service/app-service/util.ts");
/* harmony import */ var _type__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./type */ "./jimu-for-builder/lib/service/type/index.ts");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};





const { importItem, checkItemVersion } = _local_rest_service__WEBPACK_IMPORTED_MODULE_1__;
function requestMethodProvider(restPortalRequestName, appInfo, localRequestName) {
    const localRequestMethod = localRequestName ? _local_rest_service__WEBPACK_IMPORTED_MODULE_1__[localRequestName] : _local_rest_service__WEBPACK_IMPORTED_MODULE_1__[restPortalRequestName];
    const restPortalRequestMethod = jimu_core__WEBPACK_IMPORTED_MODULE_0__.esri.restPortal[restPortalRequestName];
    if (!appInfo) {
        if (window.jimuConfig.isDevEdition) {
            return localRequestMethod;
        }
        else {
            return restPortalRequestMethod;
        }
    }
    else {
        if ((0,_app_service_util__WEBPACK_IMPORTED_MODULE_3__.isPortalApp)(appInfo)) {
            return restPortalRequestMethod;
        }
        else {
            return localRequestMethod;
        }
    }
}
function searchMethodProvider(searchType) {
    let method;
    const portalUrl = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().getState().portalUrl;
    const isAGOLDomain = jimu_core__WEBPACK_IMPORTED_MODULE_0__.portalUrlUtils.isAGOLDomain(portalUrl);
    switch (searchType) {
        case _type__WEBPACK_IMPORTED_MODULE_4__.SearchType.Portal:
            method = jimu_core__WEBPACK_IMPORTED_MODULE_0__.esri.restPortal.searchItems;
            break;
        case _type__WEBPACK_IMPORTED_MODULE_4__.SearchType.AGOL:
            method = isAGOLDomain ? jimu_core__WEBPACK_IMPORTED_MODULE_0__.esri.restPortal.searchItems : _local_rest_service__WEBPACK_IMPORTED_MODULE_1__.searchItems;
            break;
        case _type__WEBPACK_IMPORTED_MODULE_4__.SearchType.Other:
            method = window.jimuConfig.isDevEdition ? _local_rest_service__WEBPACK_IMPORTED_MODULE_1__.searchItems : jimu_core__WEBPACK_IMPORTED_MODULE_0__.esri.restPortal.searchItems;
            break;
    }
    return method;
}
function searchItems(search, searchType) {
    return __awaiter(this, void 0, void 0, function* () {
        return searchMethodProvider(searchType)(search, searchType);
    });
}
function searchItemsByPortalUrl(search, portalUrl) {
    return __awaiter(this, void 0, void 0, function* () {
        return _local_rest_service__WEBPACK_IMPORTED_MODULE_1__.searchItemsByPortalUrl(search, portalUrl);
    });
}
function removeItem(requestOptions) {
    return __awaiter(this, void 0, void 0, function* () {
        return requestMethodProvider('removeItem')(requestOptions);
    });
}
function updateItem(requestOptions) {
    return __awaiter(this, void 0, void 0, function* () {
        return requestMethodProvider('updateItem')(requestOptions);
    });
}
function importApp(item, requestOptions) {
    return __awaiter(this, void 0, void 0, function* () {
        return importItem(item, requestOptions);
    });
}
function checkAppVersion(item, requestOptions) {
    return __awaiter(this, void 0, void 0, function* () {
        return checkItemVersion(item, requestOptions);
    });
}
function updateAppsThumbnail(requestOptions) {
    return __awaiter(this, void 0, void 0, function* () {
        if (window.jimuConfig.isDevEdition) {
            return yield _local_rest_service__WEBPACK_IMPORTED_MODULE_1__.updateItem(requestOptions);
        }
        else {
            return yield _jimu_request__WEBPACK_IMPORTED_MODULE_2__.updateItem(requestOptions);
        }
    });
}
function createItem(requestOptions) {
    return __awaiter(this, void 0, void 0, function* () {
        return requestMethodProvider('createItem')(requestOptions);
    });
}
function getItem(appInfo, requestOptions) {
    return __awaiter(this, void 0, void 0, function* () {
        return requestMethodProvider('getItem', appInfo)(appInfo.id, requestOptions, (0,_app_service_util__WEBPACK_IMPORTED_MODULE_3__.isAGOLApp)(appInfo));
    });
}
function getItemData(appInfo, requestOptions) {
    return __awaiter(this, void 0, void 0, function* () {
        return requestMethodProvider('getItemData', appInfo)(appInfo.id, requestOptions, (0,_app_service_util__WEBPACK_IMPORTED_MODULE_3__.isAGOLApp)(appInfo));
    });
}
function getItemResources(appInfo, requestOptions) {
    return __awaiter(this, void 0, void 0, function* () {
        return requestMethodProvider('getItemResources', appInfo)(appInfo.id, requestOptions, (0,_app_service_util__WEBPACK_IMPORTED_MODULE_3__.isAGOLApp)(appInfo));
    });
}
function getOrgCategorySchema(requestOptions, isGetAGOLCategorySchema) {
    return __awaiter(this, void 0, void 0, function* () {
        return yield _jimu_request__WEBPACK_IMPORTED_MODULE_2__.getOrgCategorySchema(requestOptions, isGetAGOLCategorySchema);
    });
}
function getGroupCategorySchema(groupId, requestOptions, isGetAGOLCategorySchema) {
    return __awaiter(this, void 0, void 0, function* () {
        return yield _jimu_request__WEBPACK_IMPORTED_MODULE_2__.getGroupCategorySchema(groupId, requestOptions, isGetAGOLCategorySchema);
    });
}
function getGroupContents(groupId, requestOptions, isGetAGOLGroupContent) {
    return __awaiter(this, void 0, void 0, function* () {
        return yield _jimu_request__WEBPACK_IMPORTED_MODULE_2__.getGroupContent(groupId, requestOptions, isGetAGOLGroupContent);
    });
}
function getItemResource(appInfo, requestOptions) {
    return __awaiter(this, void 0, void 0, function* () {
        return requestMethodProvider('getItemResource', appInfo)(appInfo.id, requestOptions, (0,_app_service_util__WEBPACK_IMPORTED_MODULE_3__.isAGOLApp)(appInfo));
    });
}
function addItemResource(requestOptions) {
    return __awaiter(this, void 0, void 0, function* () {
        return requestMethodProvider('addItemResource')(requestOptions);
    });
}
function updateItemResource(requestOptions) {
    return __awaiter(this, void 0, void 0, function* () {
        return requestMethodProvider('updateItemResource')(requestOptions);
    });
}
function shareItemWithGroup(requestOptions) {
    return __awaiter(this, void 0, void 0, function* () {
        // return esri.restPortal.shareItemWithGroup(requestOptions)
        return yield _jimu_request__WEBPACK_IMPORTED_MODULE_2__.shareItems(requestOptions);
    });
}
function unshareItemWithGroup(requestOptions) {
    return __awaiter(this, void 0, void 0, function* () {
        // return esri.restPortal.unshareItemWithGroup(requestOptions)
        return yield _jimu_request__WEBPACK_IMPORTED_MODULE_2__.unShareItems(requestOptions);
    });
}
function itemsgroups(requestOptions) {
    return __awaiter(this, void 0, void 0, function* () {
        // return esri.restPortal.unshareItemWithGroup(requestOptions)
        return yield _jimu_request__WEBPACK_IMPORTED_MODULE_2__.itemsgroups(requestOptions);
    });
}
function removeItemResource(requestOptions) {
    return __awaiter(this, void 0, void 0, function* () {
        return requestMethodProvider('removeItemResource')(requestOptions);
    });
}
function getItemsGroups(requestOptions) {
    return __awaiter(this, void 0, void 0, function* () {
        return yield _jimu_request__WEBPACK_IMPORTED_MODULE_2__.itemsgroups(requestOptions);
    });
}
function moveItem(requestOptions) {
    return __awaiter(this, void 0, void 0, function* () {
        return yield jimu_core__WEBPACK_IMPORTED_MODULE_0__.esri.restPortal.moveItem(requestOptions);
    });
}
function getUsersTags(requestOptions) {
    return __awaiter(this, void 0, void 0, function* () {
        return yield jimu_core__WEBPACK_IMPORTED_MODULE_0__.esri.restPortal.getUserTags(requestOptions);
    });
}
function searchGroup(requestOptions) {
    return __awaiter(this, void 0, void 0, function* () {
        return yield jimu_core__WEBPACK_IMPORTED_MODULE_0__.esri.restPortal.searchGroups(requestOptions);
    });
}
function getUserContent(requestOptions) {
    return _jimu_request__WEBPACK_IMPORTED_MODULE_2__.getUserContent(requestOptions);
}
function createAppInFolder(requestOptions) {
    return jimu_core__WEBPACK_IMPORTED_MODULE_0__.esri.restPortal.createItemInFolder(requestOptions);
}
function getResourceOrigin(originalAppInfo) {
    const portalUrl = (0,_app_service_util__WEBPACK_IMPORTED_MODULE_3__.isAGOLApp)(originalAppInfo) ? jimu_core__WEBPACK_IMPORTED_MODULE_0__.urlUtils.getArcgisOnlineUrl() : (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().getState().portalUrl;
    const isLocalAppResourceOrigin = originalAppInfo === null || originalAppInfo === void 0 ? void 0 : originalAppInfo.isLocalApp;
    if (isLocalAppResourceOrigin) {
        // local app`s resource origin in devEdtion
        return _local_rest_service__WEBPACK_IMPORTED_MODULE_1__.getOriginUrl() + '/apps/';
    }
    else {
        return (jimu_core__WEBPACK_IMPORTED_MODULE_0__.portalUrlUtils.getPlatformUrlByOrgUrl(portalUrl) +
            '/sharing/rest/content/items/');
    }
}


/***/ }),

/***/ "./jimu-for-builder/lib/service/type/index.ts":
/*!****************************************************!*\
  !*** ./jimu-for-builder/lib/service/type/index.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AppType: () => (/* binding */ AppType),
/* harmony export */   PublishStatus: () => (/* binding */ PublishStatus),
/* harmony export */   SearchType: () => (/* binding */ SearchType)
/* harmony export */ });
var SearchType;
(function (SearchType) {
    SearchType["AGOL"] = "AGOL";
    SearchType["Portal"] = "Portal";
    SearchType["Other"] = "Other";
})(SearchType || (SearchType = {}));
var AppType;
(function (AppType) {
    AppType["TemplateType"] = "Web Experience Template";
    AppType["ExperienceType"] = "Web Experience";
})(AppType || (AppType = {}));
var PublishStatus;
(function (PublishStatus) {
    PublishStatus["Published"] = "Published";
    PublishStatus["Draft"] = "Draft";
    PublishStatus["Changed"] = "Changed"; // There are unpublished changes since last publishing.
})(PublishStatus || (PublishStatus = {}));


/***/ }),

/***/ "./jimu-for-builder/lib/sync-type.ts":
/*!*******************************************!*\
  !*** ./jimu-for-builder/lib/sync-type.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ToAppMessage: () => (/* binding */ ToAppMessage),
/* harmony export */   ToBuilderMessage: () => (/* binding */ ToBuilderMessage)
/* harmony export */ });
var ToAppMessage;
(function (ToAppMessage) {
    ToAppMessage["AppConfigChanged"] = "app_config_changed";
    ToAppMessage["AppInfoChanged"] = "app_info_changed";
    ToAppMessage["PortalSelfChanged"] = "portal_self_changed";
    ToAppMessage["DialogInfosChanged"] = "dialog_infos_changed";
    ToAppMessage["UserSignIn"] = "user_sign_in";
    ToAppMessage["SetMainPortal"] = "set_main_portal";
    ToAppMessage["ChangeAppMode"] = "change_app_mode";
    ToAppMessage["ChangePage"] = "change_page";
    ToAppMessage["ChangeDialog"] = "change_dialog";
    ToAppMessage["ChangeSelection"] = "change_selection";
    ToAppMessage["ChangeWidgetStateProp"] = "change_widget_state_prop";
    ToAppMessage["ChangeWidgetMutableStateProp"] = "change_widget_mutable_state_prop";
    ToAppMessage["ChangeZoomScale"] = "change_zoom_scale";
    ToAppMessage["BuilderTriggerKeyboard"] = "builder_trigger_keyboard";
    ToAppMessage["ChangeBrowserSizeMode"] = "change_browser_size_mode";
    ToAppMessage["BuilderSessionChanged"] = "builder_session_changed";
    ToAppMessage["BuilderNoPermissionResourceInfoListChanged"] = "builder_no_permission_resource_info_list_changed";
    ToAppMessage["ActivePagePartChanged"] = "active_page_part_changed";
    ToAppMessage["AnimationPreview"] = "animation_preview";
    ToAppMessage["HoverPreview"] = "hover_preview";
    ToAppMessage["SectionNavInfoChanged"] = "section_navinfo_changed";
    ToAppMessage["ScreenGroupNavInfoChanged"] = "screengroup_navinfo_changed";
    ToAppMessage["TocHoverInfoChanged"] = "toc_hover_info_changed";
    ToAppMessage["SetClientIdAlertIsCancelled"] = "set_client_id_alert_is_cancelled";
    ToAppMessage["UtilityStateChanged"] = "utility_state_changed";
})(ToAppMessage || (ToAppMessage = {}));
var ToBuilderMessage;
(function (ToBuilderMessage) {
    ToBuilderMessage["AppStateChanged"] = "app_state_changed";
    ToBuilderMessage["AppSessionChanged"] = "app_session_changed";
    ToBuilderMessage["AppNoPermissionResourceInfoListChanged"] = "app_no_permission_resource_info_list_changed";
    ToBuilderMessage["NeedToCheck498Error"] = "need_to_check_498_error";
    ToBuilderMessage["PopupChooseWidget"] = "popup_choose_widget";
    ToBuilderMessage["AppAddResource"] = "app_add_resource";
    ToBuilderMessage["AppClearResources"] = "app_clear_resources";
    ToBuilderMessage["AppTriggerKeyboard"] = "app_trigger_keyboard";
    ToBuilderMessage["SetLayoutTools"] = "app_set_layout_tools";
    ToBuilderMessage["ClearLastAppConfigFromHistory"] = "clear_last_app_config_from_history";
    ToBuilderMessage["SetIsBusy"] = "app_set_isbusy";
    ToBuilderMessage["AppIsLoaded"] = "app_is_loaded";
    ToBuilderMessage["ConfirmDelete"] = "confirm_delete";
    ToBuilderMessage["NeedToRegisterClinetId"] = "need_to_register_client_id";
    ToBuilderMessage["SetSidePanel"] = "app_side_panel";
})(ToBuilderMessage || (ToBuilderMessage = {}));


/***/ }),

/***/ "./jimu-for-builder/lib/translations/default.ts":
/*!******************************************************!*\
  !*** ./jimu-for-builder/lib/translations/default.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
    frameworkAction_TriggerLayer: 'Trigger data',
    frameworkAction_SetData: 'Select data',
    frameworkAction_ActionLayer: 'Action data',
    frameworkAction_Conditions: 'Conditions',
    frameworkAction_RelateMessage: 'Trigger / action connection',
    frameworkAction_TriggerLayerField: 'Select a trigger field',
    frameworkAction_None: 'none',
    frameworkAction_Equals: 'equals',
    frameworkAction_ActionLayerField: 'Select an action field',
    frameworkAction_MoreConditions: 'More conditions',
    frameworkAction_SetExpression: 'Please set your expression first.',
    frameworkAction_ChooseLayer: 'Select data',
    frameworkAction_AutoBind: 'Auto bound.',
    frameworkAction_NoLayer: 'No data.',
    frameworkAction_QueryByExtent: 'Query by current extent',
    // common template strings
    defaultTextPlaceholder: 'Double click to edit text',
    titlePlaceholder: 'Here is the title',
    subTitlePlaceholder: 'Here is the subtitle',
    shortTitlePlaceholder: 'Title',
    shortSubTitlePlaceholder: 'Subtitle',
    copyrightPlaceholder: 'Copyright info',
    cardTitle: 'Card title',
    bookmark: 'Bookmark',
    number: 'Number',
    templateSearchResult: 'Search result',
    logo: 'Logo',
    appItemCopy: 'Copy'
});


/***/ }),

/***/ "./jimu-for-builder/lib/url-config-manager.tsx":
/*!*****************************************************!*\
  !*** ./jimu-for-builder/lib/url-config-manager.tsx ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");
/* harmony import */ var jimu_for_builder__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! jimu-for-builder */ "jimu-for-builder");
/* harmony import */ var jimu_layouts_layout_runtime__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! jimu-layouts/layout-runtime */ "jimu-layouts/layout-runtime");



class UrlConfigManager {
    constructor() {
        // general settings
        this.isGeneralUrlConfigEnable = (generalConfig) => {
            var _a;
            const appConfig = jimu_core__WEBPACK_IMPORTED_MODULE_0__.urlManagerUtils.getAppConfig();
            const urlConfig = (_a = appConfig === null || appConfig === void 0 ? void 0 : appConfig.urlParams) === null || _a === void 0 ? void 0 : _a.getIn(['general', generalConfig]);
            let isEnable = urlConfig === null || urlConfig === void 0 ? void 0 : urlConfig.isEnable;
            if (typeof isEnable === 'undefined') {
                isEnable = true; // default is open
            }
            return isEnable;
        };
    }
    static getInstance() {
        if (!UrlConfigManager.instance) {
            UrlConfigManager.instance = new UrlConfigManager();
        }
        return UrlConfigManager.instance;
    }
    // Manifest
    getWidgetsUseUrlParamsInManifest() {
        const appConfig = jimu_core__WEBPACK_IMPORTED_MODULE_0__.urlManagerUtils.getAppConfig();
        let widgetsWithUrlParameters = null;
        if (appConfig === null || appConfig === void 0 ? void 0 : appConfig.widgets) {
            widgetsWithUrlParameters = jimu_core__WEBPACK_IMPORTED_MODULE_0__.Immutable.from({});
            for (const widgetId of Object.keys(appConfig.widgets)) {
                const widget = appConfig.widgets[widgetId];
                const urlParametersInManifest = widget.manifest.urlParameters;
                // set urlParameters data
                if ((urlParametersInManifest === null || urlParametersInManifest === void 0 ? void 0 : urlParametersInManifest.length) > 0) {
                    widgetsWithUrlParameters = widgetsWithUrlParameters.set(widgetId, widget);
                    // use i18n label, key: _url_params_{}_label
                    const urlParametersWithI18nLabel = urlParametersInManifest.map(urlParameter => {
                        var _a;
                        const label = (_a = widget.manifest.i18nMessages[`_url_params_${urlParameter.name}_label`]) !== null && _a !== void 0 ? _a : urlParameter.label;
                        return urlParameter.set('label', label);
                    });
                    widgetsWithUrlParameters = widgetsWithUrlParameters.setIn([widgetId, 'manifest', 'urlParameters'], urlParametersWithI18nLabel);
                }
            }
        }
        return widgetsWithUrlParameters;
    }
    updateGeneralUrlConfigEnable(generalUrlConfig, isEnable) {
        var _a, _b;
        let appConfig = jimu_core__WEBPACK_IMPORTED_MODULE_0__.urlManagerUtils.getAppConfig();
        let generalUrlConfigs /*: UrlParamsConfig */ = (_a = appConfig.urlParams) === null || _a === void 0 ? void 0 : _a.getIn(['general', generalUrlConfig]);
        if (!generalUrlConfigs) {
            generalUrlConfigs = jimu_core__WEBPACK_IMPORTED_MODULE_0__.Immutable.from({ isEnable: false });
        }
        generalUrlConfigs = generalUrlConfigs === null || generalUrlConfigs === void 0 ? void 0 : generalUrlConfigs.merge({ isEnable: isEnable });
        if (!appConfig.urlParams) {
            appConfig = appConfig.setIn(['urlParams'], jimu_core__WEBPACK_IMPORTED_MODULE_0__.Immutable.from({ general: {} }));
        }
        const urlParams = (_b = appConfig.urlParams) === null || _b === void 0 ? void 0 : _b.setIn(['general', generalUrlConfig], generalUrlConfigs);
        // update
        this.updateUrlParamsConfig(urlParams);
    }
    // widgets
    isWidgetParamEnable(widgetId, paramName) {
        var _a;
        const appConfig = jimu_core__WEBPACK_IMPORTED_MODULE_0__.urlManagerUtils.getAppConfig();
        let isChecked = true;
        const widget = (_a = appConfig.urlParams) === null || _a === void 0 ? void 0 : _a.getIn(['widgets', widgetId]);
        isChecked = widget === null || widget === void 0 ? void 0 : widget.getIn(['params', paramName]);
        if (typeof isChecked === 'undefined') {
            isChecked = true; // default is open
        }
        return isChecked;
    }
    updateWidgetEnable(widgetId, isEnable) {
        let { appConfig, widgetUrlConfig } = this.getWidgetsUrlParamsConfig(widgetId);
        widgetUrlConfig = widgetUrlConfig === null || widgetUrlConfig === void 0 ? void 0 : widgetUrlConfig.merge({ isEnable: isEnable });
        this._setWidgetUrlConfig(widgetId, widgetUrlConfig, appConfig, (0,jimu_for_builder__WEBPACK_IMPORTED_MODULE_1__.getAppConfigAction)());
    }
    updateWidgetParamEnable(widgetId, paramName, isEnable) {
        let { appConfig, widgetUrlConfig } = this.getWidgetsUrlParamsConfig(widgetId);
        widgetUrlConfig = widgetUrlConfig.setIn(['params', paramName], isEnable);
        // enable widget, when once itme become enable
        if (isEnable) {
            widgetUrlConfig = widgetUrlConfig === null || widgetUrlConfig === void 0 ? void 0 : widgetUrlConfig.merge({ isEnable: true });
        }
        this._setWidgetUrlConfig(widgetId, widgetUrlConfig, appConfig, (0,jimu_for_builder__WEBPACK_IMPORTED_MODULE_1__.getAppConfigAction)());
    }
    // widgets filter for pages
    getWidgetsInPages(currentBrowserSizeMode, filterString) {
        const appConfig = jimu_core__WEBPACK_IMPORTED_MODULE_0__.urlManagerUtils.getAppConfig();
        const infos = [];
        for (const pageId of Object.keys(appConfig.pages)) {
            const containerInfo = {
                type: jimu_core__WEBPACK_IMPORTED_MODULE_0__.ContainerType.Page,
                id: pageId
            };
            const widgetIdsInPage = jimu_layouts_layout_runtime__WEBPACK_IMPORTED_MODULE_2__.searchUtils.getContentsInContainerRecursive(appConfig, containerInfo, jimu_core__WEBPACK_IMPORTED_MODULE_0__.LayoutItemType.Widget, currentBrowserSizeMode);
            const widgetIds = this._findCommonWidgetsInManifest(widgetIdsInPage);
            // 1.pageInfo
            const pageInfo = {
                id: pageId,
                label: this._getPageLabel(pageId)
            };
            // 2.widgetsInfo
            let widgetsInfo = [];
            widgetIds.forEach((widgetId) => {
                widgetsInfo.push({
                    id: widgetId,
                    label: this._getWidgetLabel(widgetId)
                });
            });
            // 3.filter
            if (filterString) {
                widgetsInfo = widgetsInfo.filter((widgetInfo) => {
                    var _a;
                    return (_a = widgetInfo.label) === null || _a === void 0 ? void 0 : _a.toLowerCase().includes(filterString.toLowerCase()); // ignore case
                });
            }
            // 1+2+3 result
            infos.push({
                pageInfo: pageInfo,
                widgetsInfo: widgetsInfo
            });
        }
        return infos;
    }
    _findCommonWidgetsInManifest(widgetIdsInPage) {
        const urlParamsWidgetsInManifest = this.getWidgetsUseUrlParamsInManifest();
        const widgetsInManifest = Object.keys(urlParamsWidgetsInManifest);
        const commonElements = [];
        widgetIdsInPage.forEach((widgetId) => {
            if (widgetsInManifest.includes(widgetId)) {
                commonElements.push(widgetId);
            }
        });
        return commonElements;
    }
    _getWidgetLabel(widgetId) {
        const appConfig = jimu_core__WEBPACK_IMPORTED_MODULE_0__.urlManagerUtils.getAppConfig();
        const widgetInfo = appConfig.widgets.getIn([widgetId]);
        return (widgetInfo === null || widgetInfo === void 0 ? void 0 : widgetInfo.label) || widgetId;
    }
    _getPageLabel(pageId) {
        const appConfig = jimu_core__WEBPACK_IMPORTED_MODULE_0__.urlManagerUtils.getAppConfig();
        const pageInfo = appConfig.pages.getIn([pageId]);
        return (pageInfo === null || pageInfo === void 0 ? void 0 : pageInfo.label) || pageId;
    }
    // setting & getter
    getWidgetsUrlParamsConfig(widgetId) {
        var _a;
        const appConfig = jimu_core__WEBPACK_IMPORTED_MODULE_0__.urlManagerUtils.getAppConfig();
        let widgetUrlConfig = (_a = appConfig.urlParams) === null || _a === void 0 ? void 0 : _a.getIn(['widgets', widgetId]);
        if (!widgetUrlConfig) {
            widgetUrlConfig = jimu_core__WEBPACK_IMPORTED_MODULE_0__.Immutable.from({ isEnable: true });
        }
        return { appConfig, widgetUrlConfig };
    }
    _setWidgetUrlConfig(widgetId, widgetUrlConfig, appConfig, appConfigAction) {
        var _a;
        if (!appConfig.urlParams) {
            appConfig = appConfig.setIn(['urlParams'], jimu_core__WEBPACK_IMPORTED_MODULE_0__.Immutable.from({ widgets: {} }));
        }
        const widgetUrlParams = (_a = appConfig.urlParams) === null || _a === void 0 ? void 0 : _a.setIn(['widgets', widgetId], widgetUrlConfig);
        // update
        this.updateUrlParamsConfig(widgetUrlParams);
    }
    updateUrlParamsConfig(urlParams) {
        (0,jimu_for_builder__WEBPACK_IMPORTED_MODULE_1__.getAppConfigAction)().updateUrlParamsConfig(urlParams).exec();
    }
}
/**
 * The `UrlConfigManager` is used to manage url params config, in app-setting.
 */
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (UrlConfigManager);


/***/ }),

/***/ "./jimu-for-builder/lib/utils/app-config-utils.ts":
/*!********************************************************!*\
  !*** ./jimu-for-builder/lib/utils/app-config-utils.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   cleanAppStructure: () => (/* binding */ cleanAppStructure),
/* harmony export */   getCleanAppConfig: () => (/* binding */ getCleanAppConfig),
/* harmony export */   getRealPageCount: () => (/* binding */ getRealPageCount),
/* harmony export */   getRealPageCountExcludeOnePage: () => (/* binding */ getRealPageCountExcludeOnePage),
/* harmony export */   getSizeModeOfALayout: () => (/* binding */ getSizeModeOfALayout),
/* harmony export */   getSubRealPageCount: () => (/* binding */ getSubRealPageCount),
/* harmony export */   getUniqueId: () => (/* binding */ getUniqueId),
/* harmony export */   getUniqueLabel: () => (/* binding */ getUniqueLabel),
/* harmony export */   isFirstLevelPage: () => (/* binding */ isFirstLevelPage),
/* harmony export */   isLabelDuplicated: () => (/* binding */ isLabelDuplicated),
/* harmony export */   isPageHasSubPage: () => (/* binding */ isPageHasSubPage),
/* harmony export */   isRealPage: () => (/* binding */ isRealPage),
/* harmony export */   parseUniqueLabel: () => (/* binding */ parseUniqueLabel)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");
/* harmony import */ var _layout_write_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./layout-write-utils */ "./jimu-for-builder/lib/utils/layout-write-utils.ts");


const { getUniqueId, getUniqueLabel, parseUniqueLabel, getSizeModeOfALayout } = jimu_core__WEBPACK_IMPORTED_MODULE_0__.appConfigUtils;

function isFirstLevelPage(appConfig, pageId) {
    return !!appConfig.pageStructure.find(ps => !!ps[pageId]);
}
function isPageHasSubPage(appConfig, pageId) {
    const ps = appConfig.pageStructure.find(ps => !!ps[pageId]);
    return ps && ps[pageId].length > 0;
}
function getRealPageCount(appConfig) {
    let count = 0;
    Object.keys(appConfig.pages).forEach((pId, i) => {
        if (isRealPage(appConfig, pId)) {
            count++;
        }
    });
    return count;
}
function getSubRealPageCount(appConfig, parentPageId) {
    if (!isFirstLevelPage(appConfig, parentPageId))
        return 0;
    let count = 0;
    appConfig.pageStructure.forEach((ps, i) => {
        const pId = Object.keys(ps)[0];
        if (pId === parentPageId) {
            ps[pId].forEach((subPId) => {
                if (isRealPage(appConfig, subPId)) {
                    count++;
                }
            });
        }
    });
    return count;
}
/**
 * Exclude the passed in page and it's sub pages.
 * @param appConfig
 * @param pageId the page that is excluded
 */
function getRealPageCountExcludeOnePage(appConfig, pageId) {
    let count = 0;
    if (isRealPage(appConfig, pageId))
        count = 1;
    return getRealPageCount(appConfig) - getSubRealPageCount(appConfig, pageId) - count;
}
function isRealPage(appConfig, pageId) {
    const pageJson = appConfig.pages[pageId];
    if (!pageJson)
        return false;
    if (pageJson.type === jimu_core__WEBPACK_IMPORTED_MODULE_0__.PageType.Normal) {
        return true;
    }
    return false;
}
function cleanAppStructure(config) {
    var _a, _b, _c, _d;
    Object.values((_a = config.pages) !== null && _a !== void 0 ? _a : {}).forEach(pageJson => {
        config = _layout_write_utils__WEBPACK_IMPORTED_MODULE_1__.cleanupSizemodeLayoutStructure(config, pageJson.layout);
    });
    Object.values((_b = config.dialogs) !== null && _b !== void 0 ? _b : {}).forEach(dialogJson => {
        config = _layout_write_utils__WEBPACK_IMPORTED_MODULE_1__.cleanupSizemodeLayoutStructure(config, dialogJson.layout);
    });
    if ((_c = config.header) === null || _c === void 0 ? void 0 : _c.layout) {
        config = _layout_write_utils__WEBPACK_IMPORTED_MODULE_1__.cleanupSizemodeLayoutStructure(config, config.header.layout);
    }
    if ((_d = config.footer) === null || _d === void 0 ? void 0 : _d.layout) {
        config = _layout_write_utils__WEBPACK_IMPORTED_MODULE_1__.cleanupSizemodeLayoutStructure(config, config.footer.layout);
    }
    return config;
}
function getCleanAppConfig(appConfig) {
    let config = appConfig.asMutable({ deep: true });
    // config = removeOrphanItems(config, true)
    Object.keys(config.widgets).forEach(wid => {
        var _a, _b, _c;
        const w = config.widgets[wid];
        if (w.label === ((_a = w.manifest) === null || _a === void 0 ? void 0 : _a.name)) {
            delete w.label;
        }
        if (w.icon === w.context.folderUrl + 'icon.svg') {
            delete w.icon;
        }
        if (typeof w.icon === 'object') {
            if ((w.icon).svg === w.context.folderUrl + 'icon.svg' &&
                (((_b = (w.icon).properties) === null || _b === void 0 ? void 0 : _b.color) === '#fff' || !((_c = (w.icon).properties) === null || _c === void 0 ? void 0 : _c.color))) {
                delete w.icon;
            }
        }
        delete w.context;
        delete w.manifest;
        delete w._originManifest;
    });
    config.layouts = _layout_write_utils__WEBPACK_IMPORTED_MODULE_1__.cleanupRuntimeLayouts(config.layouts);
    config = jimu_core__WEBPACK_IMPORTED_MODULE_0__.appConfigUtils.cleanPortalInfoFromResource(config);
    config = cleanAppStructure(config);
    return config;
}
// check if the label is duplicated with its siblings
function isLabelDuplicated(appConfig, type, id, label) {
    let contents;
    if (type === 'page') {
        contents = appConfig.pages;
    }
    else if (type === 'view') {
        contents = appConfig.views;
    }
    else if (type === 'dialog') {
        contents = appConfig.dialogs;
    }
    if (!contents) {
        return false;
    }
    return Object.keys(contents).some(contentId => {
        if (contentId === id) {
            return false;
        }
        return contents[contentId].label === label;
    });
}
window._getCleanAppConfig = getCleanAppConfig;


/***/ }),

/***/ "./jimu-for-builder/lib/utils/help-utils.ts":
/*!**************************************************!*\
  !*** ./jimu-for-builder/lib/utils/help-utils.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getBuildAppsHelpLink: () => (/* binding */ getBuildAppsHelpLink),
/* harmony export */   getHomeHelpLink: () => (/* binding */ getHomeHelpLink),
/* harmony export */   getWhatsNewLink: () => (/* binding */ getWhatsNewLink),
/* harmony export */   getWidgetHelpLink: () => (/* binding */ getWidgetHelpLink),
/* harmony export */   isSupportLanguage: () => (/* binding */ isSupportLanguage)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};

const helpDocJson = __webpack_require__(/*! builder/help-doc.json */ "./builder/help-doc.json");
const supportLanguages = ['en', 'de', 'es', 'fr', 'ja', 'ru',
    'zh-cn']; // TODO: add `bg` once it's supported in online 9.4.
function isSupportLanguage() {
    const locale = window.locale.toLowerCase();
    let support = false;
    if (supportLanguages.includes(locale)) {
        support = true;
    }
    else {
        const splitLocale = locale.split('-')[0];
        for (let i = 0; i < supportLanguages.length; i++) {
            if (splitLocale === supportLanguages[i].split('-')[0]) {
                support = true;
                break;
            }
        }
    }
    return support;
}
/**
 *
 * @param helpKey reference helop-doc build-apps part
 */
function getBuildAppsHelpLink(helpKey) {
    return __awaiter(this, void 0, void 0, function* () {
        return yield _getHelpLinkUrl('build-apps', helpKey);
    });
}
function getHomeHelpLink() {
    return __awaiter(this, void 0, void 0, function* () {
        if (window.jimuConfig.isDevEdition) {
            return yield _getHelpLinkUrl(undefined, 'home', true);
        }
        return yield _getHelpLinkUrl('get-started', 'what-is-arcgis-experience-builder', true);
        // return _getHelpLinkUrl(undefined, 'home')
    });
}
function getWhatsNewLink() {
    return __awaiter(this, void 0, void 0, function* () {
        return yield _getHelpLinkUrl('get-started', 'whats-new', true);
    });
}
/**
 *
 * @param helpKey the name prop in the widget manifest
 * include section and layout widget
 */
function getWidgetHelpLink(helpKey) {
    return __awaiter(this, void 0, void 0, function* () {
        return yield _getHelpLinkUrl('widgets', helpKey);
    });
}
function _getHelpLinkUrl(type, helpKey, isHome) {
    return __awaiter(this, void 0, void 0, function* () {
        let helpId = null;
        helpKey = helpKey.toLowerCase();
        let baseUrl;
        if (window.jimuConfig.isDevEdition) { // master-dev.
            baseUrl = 'https://developers.arcgis.com/experience-builder/';
            const helpDoc = helpDocJson.dev;
            if (type) {
                helpId = `${helpDoc[type].prefix}${helpDoc[type][helpKey]}`;
            }
            else {
                helpId = `${helpDoc[helpKey]}`;
            }
            let onlineHelp = baseUrl + '#';
            if (!helpId) {
                return yield Promise.resolve(onlineHelp);
            }
            onlineHelp = baseUrl + helpId;
            return yield Promise.resolve(onlineHelp);
        }
        else {
            const portalUrl = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().getState().portalUrl;
            if (!window.jimuConfig.isInPortal) {
                const helpDoc = helpDocJson.online;
                if (type) {
                    helpId = `${helpDoc[type].prefix}${helpDoc[type][helpKey]}`;
                }
                else {
                    helpId = `${helpDoc[helpKey]}`;
                }
                const isProd = portalUrl.includes('maps.arcgis.com') || portalUrl.includes('www.arcgis.com');
                const lead = isProd ? 'doc' : 'docdev';
                baseUrl = 'https://' + lead + '.arcgis.com/en' + '/experience-builder/';
                let onlineHelp = baseUrl + '#';
                if (!helpId) {
                    return yield Promise.resolve(onlineHelp);
                }
                onlineHelp = baseUrl + helpId;
                if (!isSupportLanguage()) {
                    return yield Promise.resolve(onlineHelp);
                }
                else {
                    const selfUrl = jimu_core__WEBPACK_IMPORTED_MODULE_0__.portalUrlUtils.getPortalSelfInfoUrl(portalUrl);
                    const helpUrl = _getHelpLinkForAGOL(selfUrl, helpId, onlineHelp);
                    return yield Promise.resolve(helpUrl);
                }
            }
            else { // for portal
                const portalLocale = window.locale || 'en';
                const helpDoc = helpDocJson.portal;
                if (type) {
                    helpId = `${helpDoc[type][helpKey]}`;
                }
                else {
                    helpId = `${helpDoc[helpKey]}`;
                }
                const headers = {
                    'Content-Type': 'text/json'
                };
                const helpBase = _getHelpBaseForPortal(portalUrl, portalLocale);
                const helpHome = helpBase.includes('https:') ? helpBase + '/experience-builder' : helpBase;
                return yield fetch(portalUrl + '/sharing/rest/portals/helpmap?f=json', {
                    method: 'get',
                    headers: headers
                })
                    .then((res) => __awaiter(this, void 0, void 0, function* () { return yield res.json(); }))
                    .then((help) => __awaiter(this, void 0, void 0, function* () {
                    if (help && help.helpMap && help.helpMap.m && helpId && help.helpMap.m[helpId]) {
                        // Portal will redirect en help doc, if portalLocale help doc doesn't be installed.
                        const portalHelp = helpBase + '/' + help.helpMap.m[helpId];
                        return yield Promise.resolve(portalHelp);
                    }
                    else {
                        return isHome ? yield Promise.resolve(helpHome) : yield getHomeHelpLink();
                    }
                })).catch((err) => __awaiter(this, void 0, void 0, function* () {
                    console.warn(err);
                    return isHome ? yield Promise.resolve(helpHome) : yield getHomeHelpLink();
                }));
            }
        }
    });
}
function _getHelpBaseForPortal(portalUrl, portalLocale) {
    let baseUrl = '';
    const portalSelf = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().getState().portalSelf;
    const parts = portalSelf === null || portalSelf === void 0 ? void 0 : portalSelf.helpBase.split('/');
    if (parts === null || parts === void 0 ? void 0 : parts.includes('https:')) { // online: 'https://enterprise.arcgis.com/en/', 'https://enterprise-k8s.arcgis.com/en/'
        const locale = isSupportLanguage() ? jimu_core__WEBPACK_IMPORTED_MODULE_0__.i18n.findLocale(window.locale, supportLanguages) : 'en';
        baseUrl = parts.slice(0, 3).join('/') + '/' + locale;
    }
    else { // local: '/gis/portalhelp/en' (Windows & Linux: 'portalhelp', Kubernetes: 'help')
        baseUrl = portalUrl + '/' + (parts === null || parts === void 0 ? void 0 : parts[2]) + '/' + portalLocale;
    }
    return baseUrl;
}
function _getHelpLinkForAGOL(selfUrl, helpId, defaultHelpLink) {
    let baseUrl;
    const portalSelf = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().getState().portalSelf;
    if (portalSelf && portalSelf.helpBase) {
        try {
            // The returned locale of helpBase is already in the supportLanguages by request with window.lcoale. So no need to extra check.
            const parts = portalSelf.helpBase.split('/').slice(0, 4);
            baseUrl = parts.join('/') +
                '/experience-builder/';
        }
        catch (err) {
            return defaultHelpLink;
        }
        return baseUrl ? (baseUrl + helpId) : defaultHelpLink;
    }
    else {
        return defaultHelpLink;
    }
}


/***/ }),

/***/ "./jimu-for-builder/lib/utils/layout-write-utils.ts":
/*!**********************************************************!*\
  !*** ./jimu-for-builder/lib/utils/layout-write-utils.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   cleanupLayoutStructure: () => (/* binding */ cleanupLayoutStructure),
/* harmony export */   cleanupRuntimeLayouts: () => (/* binding */ cleanupRuntimeLayouts),
/* harmony export */   cleanupSizemodeLayoutStructure: () => (/* binding */ cleanupSizemodeLayoutStructure),
/* harmony export */   createEmptyLayoutItem: () => (/* binding */ createEmptyLayoutItem),
/* harmony export */   removeItemFromParent: () => (/* binding */ removeItemFromParent)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");
/* harmony import */ var jimu_layouts_layout_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! jimu-layouts/layout-runtime */ "jimu-layouts/layout-runtime");


/**
 * Remove the item id from its parent's content
 * @param layoutInfo
 * @param deleteFromLayout
 * @param layouts
 */
function removeItemFromParent(layoutInfo, deleteFromLayout, layouts) {
    const { layoutId, layoutItemId } = layoutInfo;
    if (!layouts[layoutId]) {
        return layouts;
    }
    const layoutItem = layouts[layoutId].content[layoutItemId];
    if (!layoutItem) {
        return layouts;
    }
    const layout = layouts[layoutId];
    let updatedLayouts = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.Immutable)(layouts);
    if (layout.order && layout.order.includes(layoutItemId)) {
        const filterContent = [];
        layout.order.forEach(id => {
            if (id !== layoutItemId) {
                filterContent.push(id);
            }
        });
        updatedLayouts = updatedLayouts.setIn([layoutId, 'order'], filterContent);
    }
    if (deleteFromLayout) {
        updatedLayouts = updatedLayouts.setIn([layoutId, 'content'], updatedLayouts[layoutId].content.without(layoutItemId));
    }
    return updatedLayouts;
}
function createEmptyLayoutItem(layoutId, layouts) {
    const nextId = jimu_layouts_layout_runtime__WEBPACK_IMPORTED_MODULE_1__.utils.getMaximumId(layouts[layoutId]) + 1;
    let updatedLayouts = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.Immutable)(layouts);
    const newItem = {
        id: `${nextId}`
    };
    updatedLayouts = updatedLayouts.setIn([layoutId, 'content', newItem.id], newItem);
    return {
        layoutInfo: {
            layoutId: layoutId,
            layoutItemId: newItem.id
        },
        layouts: updatedLayouts
    };
}
function cleanupRuntimeLayouts(layouts) {
    Object.keys(layouts).forEach(layoutId => {
        const layout = layouts[layoutId];
        delete layout.id;
        if (layout.content) {
            Object.keys(layout.content).forEach(id => {
                const layoutItem = layout.content[id];
                delete layoutItem.id;
            });
        }
    });
    return layouts;
}
function cleanupLayoutStructure(appConfig, layoutId) {
    var _a;
    const layout = appConfig.layouts[layoutId];
    if (!layout) {
        return appConfig;
    }
    delete layout.parent;
    Object.keys((_a = layout.content) !== null && _a !== void 0 ? _a : {}).forEach((itemId) => {
        const layoutItem = layout.content[itemId];
        switch (layoutItem.type) {
            case jimu_core__WEBPACK_IMPORTED_MODULE_0__.LayoutItemType.Widget:
                {
                    const widgetJson = appConfig.widgets[layoutItem.widgetId];
                    if (widgetJson) {
                        delete widgetJson.parent;
                        if (widgetJson.layouts) {
                            Object.values(widgetJson.layouts).forEach((layouts) => {
                                appConfig = cleanupSizemodeLayoutStructure(appConfig, layouts);
                            });
                        }
                    }
                    break;
                }
            case jimu_core__WEBPACK_IMPORTED_MODULE_0__.LayoutItemType.Section:
                {
                    const sectionJson = appConfig.sections[layoutItem.sectionId];
                    delete sectionJson.parent;
                    sectionJson.views.forEach(viewId => {
                        const viewJson = appConfig.views[viewId];
                        delete viewJson.parent;
                        appConfig = cleanupSizemodeLayoutStructure(appConfig, viewJson.layout);
                    });
                    break;
                }
            case jimu_core__WEBPACK_IMPORTED_MODULE_0__.LayoutItemType.ScreenGroup:
                {
                    const sgJson = appConfig.screenGroups[layoutItem.screenGroupId];
                    delete sgJson.parent;
                    sgJson.screens.forEach(screenId => {
                        var _a;
                        const screenJson = appConfig.screens[screenId];
                        delete screenJson.parent;
                        appConfig = cleanupSizemodeLayoutStructure(appConfig, screenJson.main.layout);
                        if ((_a = screenJson.panel) === null || _a === void 0 ? void 0 : _a.layout) {
                            appConfig = cleanupSizemodeLayoutStructure(appConfig, screenJson.panel.layout);
                        }
                    });
                    break;
                }
        }
    });
    return appConfig;
}
function cleanupSizemodeLayoutStructure(appConfig, sizeModeLayout) {
    Object.values(sizeModeLayout !== null && sizeModeLayout !== void 0 ? sizeModeLayout : {}).forEach(layoutId => {
        appConfig = cleanupLayoutStructure(appConfig, layoutId);
    });
    return appConfig;
}


/***/ }),

/***/ "./jimu-for-builder/lib/utils/template-utils.ts":
/*!******************************************************!*\
  !*** ./jimu-for-builder/lib/utils/template-utils.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   processForTemplate: () => (/* binding */ processForTemplate)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");

/**
 *
 * @param templateJson
 * @param widgetId widget name is used to get translation. This is for the case that widget has internal templates such as list, card, etc.
 *    for other templates, pass null
 * @param defaultMessages
 */
function processForTemplate(templateJson, widgetId, defaultMessages) {
    (templateJson === null || templateJson === void 0 ? void 0 : templateJson.config) && jimu_core__WEBPACK_IMPORTED_MODULE_0__.appConfigUtils.fixLayoutIds(templateJson.config);
    const intl = widgetId ? jimu_core__WEBPACK_IMPORTED_MODULE_0__.i18n.getIntl(widgetId, 'setting') : jimu_core__WEBPACK_IMPORTED_MODULE_0__.i18n.getIntl();
    templateJson = jimu_core__WEBPACK_IMPORTED_MODULE_0__.utils.replaceI18nPlaceholdersInObject(templateJson, intl, defaultMessages);
    return templateJson;
}


/***/ }),

/***/ "./jimu-for-builder/lib/utils/utils.ts":
/*!*********************************************!*\
  !*** ./jimu-for-builder/lib/utils/utils.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CUSTOM_GROUP: () => (/* binding */ CUSTOM_GROUP),
/* harmony export */   fetchCommonWidgetList: () => (/* binding */ fetchCommonWidgetList),
/* harmony export */   fetchRemoteCustomWidgetList: () => (/* binding */ fetchRemoteCustomWidgetList),
/* harmony export */   getDefaultSectionIcon: () => (/* binding */ getDefaultSectionIcon),
/* harmony export */   getDefaultTocDialogIcon: () => (/* binding */ getDefaultTocDialogIcon),
/* harmony export */   getDefaultTocPageIcon: () => (/* binding */ getDefaultTocPageIcon),
/* harmony export */   getPageListByDialogId: () => (/* binding */ getPageListByDialogId),
/* harmony export */   showCustomWidgets: () => (/* binding */ showCustomWidgets),
/* harmony export */   showRemoteCustomWidgets: () => (/* binding */ showRemoteCustomWidgets)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");
/* harmony import */ var jimu_icons_svg_outlined_data_page_svg__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! jimu-icons/svg/outlined/data/page.svg */ "./jimu-icons/svg/outlined/data/page.svg");
/* harmony import */ var jimu_icons_svg_outlined_data_page_svg__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(jimu_icons_svg_outlined_data_page_svg__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var jimu_icons_svg_outlined_data_link_tilted_svg__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! jimu-icons/svg/outlined/data/link-tilted.svg */ "./jimu-icons/svg/outlined/data/link-tilted.svg");
/* harmony import */ var jimu_icons_svg_outlined_data_link_tilted_svg__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(jimu_icons_svg_outlined_data_link_tilted_svg__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var jimu_icons_svg_outlined_application_folder_svg__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! jimu-icons/svg/outlined/application/folder.svg */ "./jimu-icons/svg/outlined/application/folder.svg");
/* harmony import */ var jimu_icons_svg_outlined_application_folder_svg__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(jimu_icons_svg_outlined_application_folder_svg__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var jimu_icons_svg_outlined_application_dialog_svg__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! jimu-icons/svg/outlined/application/dialog.svg */ "./jimu-icons/svg/outlined/application/dialog.svg");
/* harmony import */ var jimu_icons_svg_outlined_application_dialog_svg__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(jimu_icons_svg_outlined_application_dialog_svg__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var jimu_icons_svg_outlined_brand_widget_section_svg__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! jimu-icons/svg/outlined/brand/widget-section.svg */ "./jimu-icons/svg/outlined/brand/widget-section.svg");
/* harmony import */ var jimu_icons_svg_outlined_brand_widget_section_svg__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(jimu_icons_svg_outlined_brand_widget_section_svg__WEBPACK_IMPORTED_MODULE_5__);
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};






function getDefaultTocPageIcon(pageJson, formatMessage, pagelabel) {
    let icon;
    if (pageJson.type === jimu_core__WEBPACK_IMPORTED_MODULE_0__.PageType.Folder) {
        icon = {
            svg: (jimu_icons_svg_outlined_application_folder_svg__WEBPACK_IMPORTED_MODULE_3___default()),
            properties: {
                filename: 'folder',
                originalName: 'outlined/application/folder.svg',
                path: ['general', 'folder'],
                color: 'var(--dark-800)',
                inlineSvg: true
            }
        };
    }
    else if (pageJson.type === jimu_core__WEBPACK_IMPORTED_MODULE_0__.PageType.Link) {
        icon = {
            svg: (jimu_icons_svg_outlined_data_link_tilted_svg__WEBPACK_IMPORTED_MODULE_2___default()),
            properties: {
                filename: 'link',
                originalName: 'outlined/data/link-tilted.svg',
                path: ['general', 'link'],
                color: 'var(--dark-800)',
                inlineSvg: true
            }
        };
    }
    else {
        icon = {
            svg: (jimu_icons_svg_outlined_data_page_svg__WEBPACK_IMPORTED_MODULE_1___default()),
            properties: {
                filename: pagelabel || (formatMessage === null || formatMessage === void 0 ? void 0 : formatMessage('page')) || '',
                originalName: 'outlined/data/page.svg',
                color: 'var(--dark-800)',
                inlineSvg: true
            }
        };
    }
    return icon;
}
function getDefaultTocDialogIcon() {
    return (jimu_icons_svg_outlined_application_dialog_svg__WEBPACK_IMPORTED_MODULE_4___default());
}
function getDefaultSectionIcon() {
    return (jimu_icons_svg_outlined_brand_widget_section_svg__WEBPACK_IMPORTED_MODULE_5___default());
}
/**
 * Get related page id by dialog's id.
 */
function getPageListByDialogId(pages, dialogId) {
    if (!pages) {
        return [];
    }
    const pageList = [];
    // eslint-disable-next-line
    Object.keys(pages).some(id => {
        if (pages[id].autoOpenDialogId === dialogId) {
            pageList.push({ id: id, label: pages[id].label });
        }
    });
    return pageList;
}
let fetchCommonWidgetListPromise = null;
function fetchCommonWidgetList() {
    if (!fetchCommonWidgetListPromise) {
        fetchCommonWidgetListPromise = fetch(`${jimu_core__WEBPACK_IMPORTED_MODULE_0__.moduleLoader.resolveModuleFullPath('widgets/')}/widgets-info.json`).then((res) => __awaiter(this, void 0, void 0, function* () { return yield res.json(); })).then((widgetInfo) => {
            const list = widgetInfo.map(w => {
                var _a, _b;
                w.manifest = jimu_core__WEBPACK_IMPORTED_MODULE_0__.appConfigUtils.addWidgetManifestProperties(w.manifest);
                const locale = jimu_core__WEBPACK_IMPORTED_MODULE_0__.i18n.findLocale((0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().getState().appContext.locale, w.manifest.translatedLocales);
                const listItemTemplate = {
                    itemType: jimu_core__WEBPACK_IMPORTED_MODULE_0__.LayoutItemType.Widget,
                    name: w.name,
                    label: ((_a = w.i18nLabel) === null || _a === void 0 ? void 0 : _a[locale]) || w.manifest.label || w.name,
                    desription: ((_b = w.i18nDescription) === null || _b === void 0 ? void 0 : _b[locale]) || w.manifest.desription || w.name,
                    uri: w.uri,
                    manifest: w.manifest,
                    icon: '../' + w.icon,
                    group: w.group,
                    order: w.order
                };
                return listItemTemplate;
            });
            return list;
        }).catch(err => {
            console.error('Failed to fetch common widget list. ', err);
            return [];
        });
    }
    return fetchCommonWidgetListPromise;
}
let fetchRemoteCustomWidgetListPromise = null;
/**
 * Fetch remote custom widgets from AGOL or portal.
 */
function fetchRemoteCustomWidgetList() {
    if (!showRemoteCustomWidgets()) {
        return Promise.resolve([]);
    }
    if (!fetchRemoteCustomWidgetListPromise) {
        // const isPortal = getAppStore().getState().portalSelf?.isPortal
        const q = 'type:"Experience Builder Widget" AND typekeywords:"Widget"'; // 'type:"Experience Builder Widget" AND typekeywords:"Hosted Widget"'
        fetchRemoteCustomWidgetListPromise = jimu_core__WEBPACK_IMPORTED_MODULE_0__.esri.restPortal.searchItems({ q, num: 100, start: 0, authentication: jimu_core__WEBPACK_IMPORTED_MODULE_0__.SessionManager.getInstance().getSessionByUrl((0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().getState().portalUrl) }).then(res => res.results).then(items => {
            let list = [];
            items.forEach((item, index) => {
                if (!item.url) {
                    return;
                }
                const uri = getCustomUriByItemUrl(item.url);
                const widgetContext = jimu_core__WEBPACK_IMPORTED_MODULE_0__.appConfigUtils.getWidgetContext(uri);
                const listItemTemplate = {
                    itemType: jimu_core__WEBPACK_IMPORTED_MODULE_0__.LayoutItemType.Widget,
                    name: item.url, // TODO parse url
                    label: item.title,
                    itemId: item.id,
                    manifest: {},
                    icon: `${widgetContext.folderUrl}icon.svg`,
                    uri: widgetContext.folderUrl,
                    group: CUSTOM_GROUP,
                    order: index
                };
                list = list.concat(listItemTemplate);
            });
            return Promise.allSettled(list.map(l => fetch(`${l.uri}manifest.json`).then(res => res.json()))).then(res => res.map(r => r.status === 'fulfilled' ? r.value : null)).then(manifests => {
                return list.map((l, i) => (Object.assign(Object.assign({}, l), { manifest: manifests[i] || { defaultSize: { width: 400, height: 400 } } })));
            });
        }).catch(err => {
            console.error('Failed to fetch custom widget list. ', err);
            return [];
        });
    }
    return fetchRemoteCustomWidgetListPromise;
}
function getCustomUriByItemUrl(itemUrl) {
    let uri;
    if (/manifest\.json$/.test(itemUrl)) {
        uri = itemUrl.substring(0, itemUrl.length - 'manifest.json'.length);
    }
    else if (/\/$/.test(itemUrl)) {
        uri = itemUrl;
    }
    else {
        uri = itemUrl + '/';
    }
    uri = uri.replace(/^http:\/\//, 'https://');
    return uri;
}
function showRemoteCustomWidgets() {
    var _a, _b;
    return (_b = (_a = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().getState().appContext) === null || _a === void 0 ? void 0 : _a.jimuConfig) === null || _b === void 0 ? void 0 : _b.isInPortal;
}
function showCustomWidgets(commonWidgetList) {
    return showRemoteCustomWidgets() || (commonWidgetList === null || commonWidgetList === void 0 ? void 0 : commonWidgetList.some(w => w.group === CUSTOM_GROUP));
}
const CUSTOM_GROUP = 7;


/***/ }),

/***/ "./jimu-for-builder/lib/widget-setting-manager.tsx":
/*!*********************************************************!*\
  !*** ./jimu-for-builder/lib/widget-setting-manager.tsx ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   WidgetSettingManager: () => (/* binding */ WidgetSettingManager),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var jimu_theme__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! jimu-theme */ "jimu-theme");
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! jimu-core */ "jimu-core");
/* harmony import */ var _builder_state_store_extension__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./builder-state-store-extension */ "./jimu-for-builder/lib/builder-state-store-extension.ts");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};




const { getLocaleToLoad, loadLocaleMessages } = jimu_core__WEBPACK_IMPORTED_MODULE_2__.i18n;
class WidgetSettingManager {
    /** Return the singleton `WidgetSettingManager` instance. */
    static getInstance() {
        if (!WidgetSettingManager.instance) {
            WidgetSettingManager.instance = new WidgetSettingManager();
            window._widgetSettingManager = WidgetSettingManager.instance;
        }
        return WidgetSettingManager.instance;
    }
    constructor() {
        this.settings = {};
        (0,jimu_core__WEBPACK_IMPORTED_MODULE_2__.observeStore)(this.onStoreChange.bind(this), ['appStateInBuilder', 'appConfig', 'widgets']);
    }
    getWidgetUri(widgetId) {
        var _a, _b, _c;
        const appConfig = (_a = (0,jimu_core__WEBPACK_IMPORTED_MODULE_2__.getAppStore)().getState().appStateInBuilder) === null || _a === void 0 ? void 0 : _a.appConfig;
        return (_c = (_b = appConfig === null || appConfig === void 0 ? void 0 : appConfig.widgets) === null || _b === void 0 ? void 0 : _b[widgetId]) === null || _c === void 0 ? void 0 : _c.uri;
    }
    getWidgetManifestByUri(uri) {
        var _a, _b, _c;
        const widgets = (_b = (_a = (0,jimu_core__WEBPACK_IMPORTED_MODULE_2__.getAppStore)().getState().appStateInBuilder) === null || _a === void 0 ? void 0 : _a.appConfig) === null || _b === void 0 ? void 0 : _b.widgets;
        const widgetId = Object.keys(widgets || {}).find(wId => widgets[wId].uri === uri);
        return (_c = widgets[widgetId]) === null || _c === void 0 ? void 0 : _c.manifest;
    }
    // for easy test
    updateWidgetCache(uri, obj) {
        if (!this.settings[uri]) {
            this.settings[uri] = {};
        }
        for (const k in obj) {
            this.settings[uri][k] = obj[k];
        }
    }
    getWidgetSettingClass(widgetId) {
        var _a;
        return (_a = this.settings[this.getWidgetUri(widgetId)]) === null || _a === void 0 ? void 0 : _a.settingClazz;
    }
    destroyWidgetSettingClass(widgetId) {
        const uri = this.getWidgetUri(widgetId);
        if (uri) {
            delete this.settings[uri];
        }
    }
    destroyWidgetSettingClassByUri(uri) {
        if (this.checkWidgetUriInConfig(uri)) {
            return;
        }
        delete this.settings[uri];
    }
    getItemSettingClass(widgetId) {
        var _a;
        return (_a = this.settings[this.getWidgetUri(widgetId)]) === null || _a === void 0 ? void 0 : _a.itemSettingClazz;
    }
    getSettingI18nMessagesByUri(widgetUri) {
        var _a;
        return (_a = this.settings[widgetUri]) === null || _a === void 0 ? void 0 : _a.settingI18nMessage;
    }
    destoryAllWidgetSettingClasses() {
        this.settings = {};
    }
    /** Load the widget setting class by widget id. A widget setting class is loaded only one time. */
    loadWidgetSettingClass(widgetId) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            const widgetJson = (_c = (_b = (_a = (0,jimu_core__WEBPACK_IMPORTED_MODULE_2__.getAppStore)().getState().appStateInBuilder) === null || _a === void 0 ? void 0 : _a.appConfig) === null || _b === void 0 ? void 0 : _b.widgets) === null || _c === void 0 ? void 0 : _c[widgetId];
            if (!widgetJson) {
                return yield Promise.resolve(null);
            }
            if (!widgetJson.manifest) {
                return yield Promise.resolve(null);
            }
            const widgetUri = this.getWidgetUri(widgetId);
            return this.loadWidgetSettingClassByUri(widgetUri);
        });
    }
    checkWidgetUriInConfig(widgetUri) {
        var _a, _b;
        const widgets = ((_b = (_a = (0,jimu_core__WEBPACK_IMPORTED_MODULE_2__.getAppStore)().getState().appStateInBuilder) === null || _a === void 0 ? void 0 : _a.appConfig) === null || _b === void 0 ? void 0 : _b.widgets) || {};
        return !!Object.keys(widgets).find(wId => widgets[wId].uri === widgetUri);
    }
    loadWidgetSettingClassByUri(uri) {
        if (!this.settings[uri]) {
            this.settings[uri] = {};
        }
        if (this.settings[uri].settingClazzPromise) {
            return this.settings[uri].settingClazzPromise;
        }
        this.settings[uri].settingClazzPromise = this.loadRawSettingClass(uri).then(() => __awaiter(this, void 0, void 0, function* () {
            return yield this.loadI18nMessagesForSetting(uri);
        })).then(() => {
            const wrappedSetting = this.injectWidgetSettingProps(uri);
            if (!wrappedSetting) {
                delete this.settings[uri];
                return null;
            }
            this.settings[uri].settingClazz = wrappedSetting;
            (0,jimu_core__WEBPACK_IMPORTED_MODULE_2__.getAppStore)().dispatch(_builder_state_store_extension__WEBPACK_IMPORTED_MODULE_3__.builderActions.widgetSettingClassLoaded(uri));
            return wrappedSetting;
        });
        return this.settings[uri].settingClazzPromise;
    }
    loadRawSettingClass(uri) {
        return __awaiter(this, void 0, void 0, function* () {
            const manifest = this.getWidgetManifestByUri(uri);
            let settingUri = `${uri}dist/setting/setting`;
            if (!manifest.properties.hasSettingPage) {
                settingUri = 'jimu-for-builder/json-editor-setting';
            }
            return yield this.loadWidgetSettingDependency(uri).then(() => __awaiter(this, void 0, void 0, function* () {
                return yield jimu_core__WEBPACK_IMPORTED_MODULE_2__.moduleLoader.loadModule(settingUri);
            })).then(clazz => {
                const rawSettingClass = clazz.default ? clazz.default : clazz;
                this.settings[uri].rawSettingClazz = rawSettingClass;
                return rawSettingClass;
            });
        });
    }
    loadI18nMessagesForSetting(uri) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.settings[uri]) {
                this.settings[uri] = {};
            }
            if (this.settings[uri].settingI18nMessagePromise) {
                return yield this.settings[uri].settingI18nMessagePromise;
            }
            const manifest = this.getWidgetManifestByUri(uri);
            if (!manifest) {
                return yield Promise.resolve({});
            }
            if (manifest.translatedLocales) {
                let locale = (0,jimu_core__WEBPACK_IMPORTED_MODULE_2__.getAppStore)().getState().appContext.locale;
                locale = getLocaleToLoad(locale, manifest.translatedLocales);
                if (locale) {
                    this.settings[uri].settingI18nMessagePromise = loadLocaleMessages(`${uri}dist/setting/translations`, locale);
                }
                else {
                    this.settings[uri].settingI18nMessagePromise = Promise.resolve({});
                }
            }
            else {
                this.settings[uri].settingI18nMessagePromise = Promise.resolve({});
            }
            return yield this.settings[uri].settingI18nMessagePromise.then((i18nMessages = {}) => {
                (0,jimu_core__WEBPACK_IMPORTED_MODULE_2__.getAppStore)().dispatch(_builder_state_store_extension__WEBPACK_IMPORTED_MODULE_3__.builderActions.widgetSettingI18nMessageLoaded(manifest.name, i18nMessages));
                this.settings[uri].settingI18nMessage = i18nMessages;
                return i18nMessages;
            });
        });
    }
    loadWidgetSettingDependency(uri) {
        return __awaiter(this, void 0, void 0, function* () {
            const manifest = this.getWidgetManifestByUri(uri);
            if (!manifest.settingDependency) {
                yield Promise.resolve();
                return;
            }
            const widgetDependencies = (typeof manifest.settingDependency === 'string' ? [manifest.settingDependency] : manifest.settingDependency);
            yield (0,jimu_core__WEBPACK_IMPORTED_MODULE_2__.loadDependencies)(widgetDependencies);
        });
    }
    loadItemSettingClass(widgetId) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            const widgetJson = (_c = (_b = (_a = (0,jimu_core__WEBPACK_IMPORTED_MODULE_2__.getAppStore)().getState().appStateInBuilder) === null || _a === void 0 ? void 0 : _a.appConfig) === null || _b === void 0 ? void 0 : _b.widgets) === null || _c === void 0 ? void 0 : _c[widgetId];
            if (!widgetJson) {
                return yield Promise.resolve(null);
            }
            if (!widgetJson.manifest) {
                return yield Promise.resolve(null);
            }
            return yield this.loadItemSettingClassByUri(this.getWidgetUri(widgetId));
        });
    }
    loadItemSettingClassByUri(uri) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.settings[uri]) {
                this.settings[uri] = {};
            }
            if (this.settings[uri].itemSettingClazzPromise) {
                return this.settings[uri].itemSettingClazzPromise;
            }
            this.settings[uri].itemSettingClazzPromise = this.loadRawItemSettingClass(uri).then((itemClazz) => {
                this.settings[uri].itemSettingClazz = itemClazz;
                return itemClazz;
            });
            return this.settings[uri].itemSettingClazzPromise;
        });
    }
    loadRawItemSettingClass(uri) {
        return __awaiter(this, void 0, void 0, function* () {
            const itemUri = `${uri}dist/setting/item-setting`;
            return yield jimu_core__WEBPACK_IMPORTED_MODULE_2__.moduleLoader.loadModule(itemUri).then(clazz => {
                return clazz.default ? clazz.default : clazz;
            });
        });
    }
    injectWidgetSettingProps(uri) {
        if (!this.checkWidgetUriInConfig(uri)) {
            return null;
        }
        const rawSettingClazz = this.settings[uri].rawSettingClazz;
        const IntlInjectedComponent = (0,jimu_core__WEBPACK_IMPORTED_MODULE_2__.injectIntl)(rawSettingClazz);
        const ThemedWidgetWrapper = (0,jimu_theme__WEBPACK_IMPORTED_MODULE_1__.withTheme)(IntlInjectedComponent, true);
        const manifest = this.getWidgetManifestByUri(uri);
        const widgetName = manifest.name;
        const i18nMessages = this.settings[uri].settingI18nMessage;
        class WidgetSettingWrapper extends react__WEBPACK_IMPORTED_MODULE_0__.PureComponent {
            render() {
                if (manifest.version !== this.props.version) {
                    return null;
                }
                const injectProps = {
                    messages: i18nMessages
                };
                // merge in the app's messages before creating the context so that
                // any jimu-ui components in this component can have access to their own messages
                // NOTE: messages with the same key will be overridden, so please make sure widget do not use the same key with jimu.
                if (true) {
                    const k = i18nMessages && Object.keys(i18nMessages).find(k => !!this.props.appI18nMessages[k]);
                    if (k) {
                        console.error('Widget translation key conflict.', `Widget: ${widgetName}, key: ${k}`);
                    }
                }
                const allMessages = Object.assign({}, i18nMessages, this.props.appI18nMessages);
                return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(jimu_core__WEBPACK_IMPORTED_MODULE_2__.IntlProvider, { locale: this.props.locale, defaultLocale: this.props.locale, messages: allMessages },
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement(ThemedWidgetWrapper, Object.assign({}, this.props, injectProps))));
            }
        }
        WidgetSettingWrapper.displayName = `WidgetSettingWrapper(${widgetName})`;
        const mapStateToProps = (state, ownProps) => {
            const props = {
                queryObject: state.queryObject,
                user: state.user,
                token: state.token,
                portalUrl: state.portalUrl,
                portalSelf: state.portalSelf,
                locale: state.appContext.locale,
                appI18nMessages: state.appI18nMessages
            };
            const widgetId = ownProps.widgetId;
            const widgetJson = state.appStateInBuilder.appConfig.widgets[widgetId];
            if (!widgetJson) {
                return {};
            }
            const allOwnProps = Object.assign(props, widgetJson, ownProps);
            return Object.assign(allOwnProps, rawSettingClazz.mapExtraStateProps ? rawSettingClazz.mapExtraStateProps(state, allOwnProps) : {});
        };
        return jimu_core__WEBPACK_IMPORTED_MODULE_2__.ReactRedux.connect(mapStateToProps)(WidgetSettingWrapper);
    }
    onStoreChange(preWidgets, widgets) {
        preWidgets && widgets && Object.keys(preWidgets).forEach(preWId => {
            if (!widgets[preWId]) { // widget is removed
                // this.destroyWidgetSettingClassByUri(preWidgets[preWId].uri) // Do not remove for performance reason.
            }
        });
    }
}
/**
 * The `WidgetSettingManager` is used to manage the widget setting.
 */
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (WidgetSettingManager);


/***/ }),

/***/ "./jimu-icons/outlined/data/link-combined.tsx":
/*!****************************************************!*\
  !*** ./jimu-icons/outlined/data/link-combined.tsx ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   LinkCombinedOutlined: () => (/* binding */ LinkCombinedOutlined)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");
/* harmony import */ var _svg_outlined_data_link_combined_svg__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../svg/outlined/data/link-combined.svg */ "./jimu-icons/svg/outlined/data/link-combined.svg");
/* harmony import */ var _svg_outlined_data_link_combined_svg__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_svg_outlined_data_link_combined_svg__WEBPACK_IMPORTED_MODULE_1__);
var __rest = (undefined && undefined.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};


const LinkCombinedOutlined = (props) => {
    const SVG = window.SVG;
    const { className } = props, others = __rest(props, ["className"]);
    const classes = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.classNames)('jimu-icon jimu-icon-component', className);
    if (!SVG)
        return jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement("svg", Object.assign({ className: classes }, others));
    return jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement(SVG, Object.assign({ className: classes, src: (_svg_outlined_data_link_combined_svg__WEBPACK_IMPORTED_MODULE_1___default()) }, others));
};


/***/ }),

/***/ "jimu-core":
/*!****************************!*\
  !*** external "jimu-core" ***!
  \****************************/
/***/ ((module) => {

"use strict";
module.exports = __WEBPACK_EXTERNAL_MODULE_jimu_core__;

/***/ }),

/***/ "react":
/*!**********************************!*\
  !*** external "jimu-core/react" ***!
  \**********************************/
/***/ ((module) => {

"use strict";
module.exports = __WEBPACK_EXTERNAL_MODULE_react__;

/***/ }),

/***/ "jimu-for-builder":
/*!***********************************!*\
  !*** external "jimu-for-builder" ***!
  \***********************************/
/***/ ((module) => {

"use strict";
module.exports = __WEBPACK_EXTERNAL_MODULE_jimu_for_builder__;

/***/ }),

/***/ "jimu-for-builder/templates":
/*!*********************************************!*\
  !*** external "jimu-for-builder/templates" ***!
  \*********************************************/
/***/ ((module) => {

"use strict";
module.exports = __WEBPACK_EXTERNAL_MODULE_jimu_for_builder_templates__;

/***/ }),

/***/ "jimu-layouts/layout-runtime":
/*!**********************************************!*\
  !*** external "jimu-layouts/layout-runtime" ***!
  \**********************************************/
/***/ ((module) => {

"use strict";
module.exports = __WEBPACK_EXTERNAL_MODULE_jimu_layouts_layout_runtime__;

/***/ }),

/***/ "jimu-theme":
/*!*****************************!*\
  !*** external "jimu-theme" ***!
  \*****************************/
/***/ ((module) => {

"use strict";
module.exports = __WEBPACK_EXTERNAL_MODULE_jimu_theme__;

/***/ }),

/***/ "jimu-ui":
/*!**************************!*\
  !*** external "jimu-ui" ***!
  \**************************/
/***/ ((module) => {

"use strict";
module.exports = __WEBPACK_EXTERNAL_MODULE_jimu_ui__;

/***/ }),

/***/ "./builder/help-doc.json":
/*!*******************************!*\
  !*** ./builder/help-doc.json ***!
  \*******************************/
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('{"online":{"home":"#","get-started":{"prefix":"get-started/","what-is-arcgis-experience-builder":"what-is-arcgis-experience-builder.htm","whats-new":"whats-new.htm"},"build-apps":{"prefix":"build-apps/","add-a-page":"add-a-page.htm","add-a-dialog":"add-windows.htm","add-utility-services":"add-utility-services.htm","add-custom-widgets":"getting-started-widget.htm","add-screen-groups":"add-screen-groups.htm","select-data":"select-data.htm","change-app-theme":"change-app-theme.htm","app-settings":"app-settings.htm"},"widgets":{"prefix":"configure-widgets/","overview":"widgets-overview.htm","3d-toolbox":"3d-toolbox-widget.htm","add-data":"add-data-widget.htm","analysis":"analysis-widget.htm","arcgis-map":"map-widget.htm","basemap-gallery":"basemap-gallery-widget.htm","ba-infographic":"business-analyst-infographic-widget.htm","bookmark":"bookmark-widget.htm","branch-version-management":"branch-version-management-widget.htm","button":"button-widget.htm","card":"card-widget.htm","chart":"chart-widget.htm","column":"column-widget.htm","controller":"widget-controller-widget.htm","coordinates":"coordinates-widget.htm","coordinate-conversion":"coordinate-conversion-widget.htm","divider":"divider-widget.htm","draw":"draw-widget.htm","directions":"directions-widget.htm","edit":"edit-widget.htm","elevation-profile":"elevation-profile-widget.htm","embed":"embed-widget.htm","feature-info":"feature-info-widget.htm","filter":"filter-widget.htm","fixed":"fixed-panel-widget.htm","floor-filter":"floor-filter-widget.htm","fly-controller":"fly-controller-widget.htm","grid":"grid-widget.htm","image":"image-widget.htm","legend":"legend-widget.htm","list":"list-widget.htm","map-layers":"map-layers-widget.htm","menu":"menu-widget.htm","navigator":"view-navigation-widget.htm","near-me":"near-me-widget.htm","oriented-imagery":"oriented-imagery-widget.htm","placeholder":"placeholder-widget.htm","print":"print-widget.htm","query":"query-widget.htm","row":"row-widget.htm","search":"search-widget.htm","section":"section-widget.htm","select":"select-widget.htm","share":"share-widget.htm","sidebar":"sidebar-widget.htm","suitability-modeler":"suitability-modeler-widget.htm","survey123":"survey-widget.htm","swipe":"swipe-widget.htm","table":"table-widget.htm","text":"text-widget.htm","timeline":"timeline-widget.htm","utility-network-trace":"utility-network-trace-widget.htm"}},"portal":{"home":"120001864","get-started":{"what-is-arcgis-experience-builder":"120001877","whats-new":"120002535"},"build-apps":{"add-a-page":"120001863","add-a-dialog":"120002539","add-utility-services":"120003733","add-custom-widgets":"120003728","add-screen-groups":"120002592","select-data":"120002590","change-app-theme":"120004139"},"widgets":{"overview":"#","3d-toolbox":"120003734","add-data":"120004128","analysis":"120004647","arcgis-map":"120001851","basemap-gallery":"120004168","bookmark":"120002536","button":"120001841","branch-version-management":"120002654","ba-infographic":"120003631","card":"120002537","chart":"120002727","column":"120001842","controller":"120001862","coordinates":"120003879","coordinate-conversion":"120002728","divider":"120002538","draw":"120003632","directions":"120003635","edit":"120002844","elevation-profile":"120002905","embed":"120001843","feature-info":"120001844","filter":"120001845","fixed":"120001846","floor-filter":"120003634","fly-controller":"120001847","grid":"120003880","image":"120001848","legend":"120001849","list":"120001850","map-layers":"120001852","menu":"120001853","navigator":"120001861","near-me":"120004170","oriented-imagery":"120002843","placeholder":"120001854","print":"120003716","query":"120002729","row":"120001855","search":"120002845","section":"120001856","select":"120004732","share":"120001857","sidebar":"120001858","suitability-modeler":"120002906","survey123":"120001859","swipe":"120004169","table":"120002591","text":"120001860","timeline":"120003717","utility-network-trace":"120003633"}},"dev":{"home":"#","get-started":{"prefix":"guide/","what-is-arcgis-experience-builder":"getting-started-widget","whats-new":"whats-new"},"build-apps":{"prefix":"guide/","add-a-page":"add-a-page","add-a-dialog":"add-windows","add-utility-services":"add-utility-services","add-custom-widgets":"getting-started-widget","add-screen-groups":"add-screen-groups","select-data":"select-data","change-app-theme":"change-app-theme"},"widgets":{"prefix":"guide/","overview":"widgets-overview","3d-toolbox":"3d-toolbox-widget","add-data":"add-data-widget","analysis":"analysis-widget","arcgis-map":"map-widget","basemap-gallery":"basemap-gallery-widget","ba-infographic":"business-analyst-infographic-widget","bookmark":"bookmark-widget","branch-version-management":"branch-version-management-widget","button":"button-widget","card":"card-widget","chart":"chart-widget","column":"column-widget","controller":"widget-controller-widget","coordinates":"coordinates-widget","coordinate-conversion":"coordinate-conversion-widget","divider":"divider-widget","draw":"draw-widget","directions":"directions-widget","edit":"edit-widget","elevation-profile":"elevation-profile-widget","embed":"embed-widget","feature-info":"feature-info-widget","filter":"filter-widget","fixed":"fixed-panel-widget","floor-filter":"floor-filter-widget","fly-controller":"fly-controller-widget","grid":"grid-widget","image":"image-widget","legend":"legend-widget","list":"list-widget","map-layers":"map-layers-widget","menu":"menu-widget","navigator":"view-navigation-widget","near-me":"near-me-widget","oriented-imagery":"oriented-imagery-widget","placeholder":"placeholder-widget","print":"print-widget","query":"query-widget","row":"row-widget","search":"search-widget","section":"section-widget","select":"select-widget","share":"share-widget","sidebar":"sidebar-widget","suitability-modeler":"suitability-modeler-widget","survey123":"survey-widget","swipe":"swipe-widget","table":"table-widget","text":"text-widget","timeline":"timeline-widget","utility-network-trace":"utility-network-trace-widget"}}}');

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./jimu-for-builder/index.tsx");
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()

			);
		}
	};
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,