"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_arcgis-b06de6"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-simple-color-picker.entry.js":
/*!*****************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-simple-color-picker.entry.js ***!
  \*****************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   arcgis_simple_color_picker: () => (/* binding */ ArcgisSimpleColorPicker)
/* harmony export */ });
/* harmony import */ var _index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-e3bf7da7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-e3bf7da7.js");
/* harmony import */ var _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./languageUtil-ef0e54b2.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-ef0e54b2.js");
/* harmony import */ var _loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./loadModules-b4ac1247.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-b4ac1247.js");
/* harmony import */ var _dom_4d367677_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./dom-4d367677.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-4d367677.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */





const CSS = {
    colorHolder: "color-holder",
    colorInputDisplayDiv: "color-input-display-div",
    colorItem: "color-item",
    colorItemSelected: "color-item--selected",
    colorPicker: "color-picker",
    colorPickerHexInput: "color-picker-hex-input"
};

const arcgisSimpleColorPickerCss = ".color-input-display-div{align-items:stretch;display:flex;justify-content:space-between;width:100%;position:relative}.color-picker-hex-input{font:var(--arcgis-app-font-size-0) var(--arcgis-app-font-family);box-shadow:none;border:1px solid var(--arcgis-app-border);border-radius:var(--arcgis-app-border-radius) 0 0 var(--arcgis-app-border-radius);min-width:85%;margin:0;flex:0 1 85%;height:2rem}.color-holder{flex:1 0 auto;border-radius:0 var(--arcgis-app-border-radius) var(--arcgis-app-border-radius) 0;border:1px solid var(--arcgis-app-border);border-left:none;cursor:pointer}.color-picker{display:flex;flex-flow:row wrap;width:11.2rem;background:var(--arcgis-app-background);padding:var(--arcgis-app-cap-spacing-quarter) var(--arcgis-app-side-spacing-quarter);margin-bottom:var(--arcgis-app-cap-spacing);border:1px solid var(--arcgis-app-border-subtle);box-shadow:var(--arcgis-app-shadow-0);position:absolute;margin-top:2rem;right:0;z-index:1000}.arcgis--rtl .color-picker-hex-input{border-radius:0 var(--arcgis-app-border-radius) var(--arcgis-app-border-radius) 0}.arcgis--rtl .color-holder{border-radius:var(--arcgis-app-border-radius) 0 0 var(--arcgis-app-border-radius);border-right:none;border-left:unset}.arcgis--rtl .color-picker{right:unset;left:0}.color-picker .color-item{box-shadow:0 0 0 1px var(--arcgis-app-border);flex:0 0 1rem;cursor:pointer;width:1rem;height:1rem;list-style-type:none;margin:0.2rem}.color-picker .color-item--selected{box-shadow:0 0 0 2px var(--arcgis-app-foreground), 0 0 0 2px var(--arcgis-app-background) inset;border-radius:50%}.color-picker .color-item:hover{box-shadow:0 0 0 2px var(--arcgis-app-border-hover)}";

const ArcgisSimpleColorPicker = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.colorChanged = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "colorChanged", 7);
        this.textColorList = [
            "#ff4040",
            "#ff8202",
            "#faa83e",
            "#ffd159",
            "#73b566",
            "#008977",
            "#33e3c8",
            "#43abeb",
            "#4b64c9",
            "#9868ed",
            "#b055e6",
            "#db5181",
            "#e03b99",
            "#2b2b2b",
            "#bdbdbd",
            "#ffffff"
        ];
        this.haloColorList = [
            "#ffffff",
            "#bdbdbd",
            "#2b2b2b",
            "#e03b99",
            "#db5181",
            "#b055e6",
            "#9868ed",
            "#4b64c9",
            "#43abeb",
            "#33e3c8",
            "#008977",
            "#73b566",
            "#ffd159",
            "#faa83e",
            "#ff8202",
            "#ff4040"
        ];
        this.colorList = [];
        this.guid = undefined;
        this.inputColorHex = undefined;
        this.colorType = undefined;
        this.intlColor = undefined;
    }
    componentWillLoad() {
        if (this.colorType === "textColor") {
            this.colorList = this.textColorList;
        }
        else if (this.colorType === "haloColor") {
            this.colorList = this.haloColorList;
        }
        else {
            this.colorList = this.textColorList;
        }
    }
    // Public Methods
    async updateColor(updateColor) {
        if (updateColor === null || updateColor === void 0 ? void 0 : updateColor.toHex()) {
            this.setColor(updateColor.toHex());
        }
    }
    showHideColors(show) {
        const colorPicker = this.hostElement.shadowRoot.getElementById("color-picker");
        colorPicker.style.display = show ? "flex" : "none";
        if (show) {
            colorPicker.style.display = "flex";
        }
        else {
            colorPicker.style.display = "none";
            // https://stackoverflow.com/questions/8027423/how-to-check-if-a-string-is-a-valid-hex-color-representation/8027444
            if (/^#([0-9A-F]{3}){1,2}$/i.test(this.hexInputElement.value)) {
                this.setColor(this.hexInputElement.value);
            }
            else {
                this.setColor("#000000");
            }
        }
    }
    setColor(color) {
        this.inputColorHex = color;
        this.hostElement.shadowRoot.getElementById("colorHolder_Id").style.background = color;
        this.hexInputElement.value = color;
        this.colorChanged.emit([this.guid, this.colorType, color]);
    }
    render() {
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.H, null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { dir: (0,_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.g)(this.hostElement), class: (0,_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.g)(this.hostElement) === "rtl" && _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.C.rtl }, this.intlColor, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.colorInputDisplayDiv }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("input", { type: "text", autoComplete: "Off", name: "custom_color", placeholder: "#Hex", class: CSS.colorPickerHexInput, value: this.inputColorHex, ref: (element) => {
                this.hexInputElement = element;
            }, onClick: (event) => {
                event.stopPropagation();
                this.showHideColors(true);
            }, onBlur: (event) => {
                event.stopPropagation();
                this.showHideColors(false);
            } }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.colorHolder, id: "colorHolder_Id", style: { background: this.inputColorHex }, onClick: (event) => {
                event.stopPropagation();
                this.showHideColors(true);
            }, onBlur: (event) => {
                event.stopPropagation();
                this.showHideColors(false);
            } }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.colorPicker, id: "color-picker", style: { display: "none" } }, this.colorList.map((color) => {
            const colorItemClasses = this.inputColorHex !== color
                ? CSS.colorItem
                : `${CSS.colorItemSelected} ${CSS.colorItem}`;
            return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("li", { class: colorItemClasses, "data-hex": color, style: { backgroundColor: color }, onMouseDown: (event) => {
                    event.preventDefault();
                    this.setColor(color);
                    this.showHideColors(false);
                } }));
        }))))));
    }
    get hostElement() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisSimpleColorPicker.style = arcgisSimpleColorPickerCss;



//# sourceMappingURL=arcgis-simple-color-picker.entry.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-ef0e54b2.js":
/*!******************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-ef0e54b2.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   C: () => (/* binding */ CSS_UTILITY),
/* harmony export */   a: () => (/* binding */ formatDate),
/* harmony export */   b: () => (/* binding */ formatPlural),
/* harmony export */   f: () => (/* binding */ formatNumber),
/* harmony export */   g: () => (/* binding */ getElementDir),
/* harmony export */   l: () => (/* binding */ languageMap)
/* harmony export */ });
/* harmony import */ var _loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./loadModules-b4ac1247.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-b4ac1247.js");
/* harmony import */ var _dom_4d367677_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dom-4d367677.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-4d367677.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */



const languageMap = new Map([
    ["ar", "ar"],
    ["bg", "bg"],
    ["bs", "bs"],
    ["ca", "ca"],
    ["cs", "cs"],
    ["da", "da"],
    ["de", "de"],
    ["el", "el"],
    ["en", "en"],
    ["es", "es"],
    ["et", "et"],
    ["fi", "fi"],
    ["fr", "fr"],
    ["he", "he"],
    ["hr", "hr"],
    ["hu", "hu"],
    ["id", "id"],
    ["it", "it"],
    ["ja", "ja"],
    ["ko", "ko"],
    ["lt", "lt"],
    ["lv", "lv"],
    ["nb", "nb"],
    ["nl", "nl"],
    ["pl", "pl"],
    ["pt-br", "pt-BR"],
    ["pt-pt", "pt-PT"],
    ["ro", "ro"],
    ["ru", "ru"],
    ["sk", "sk"],
    ["sl", "sl"],
    ["sr", "sr"],
    ["sv", "sv"],
    ["th", "th"],
    ["tr", "tr"],
    ["uk", "uk"],
    ["vi", "vi"],
    ["zh-cn", "zh-CN"],
    ["zh-hk", "zh-HK"],
    ["zh-tw", "zh-TW"]
]);
// rtl
function getElementDir(el) {
    return getElementProp(el, "dir", "ltr");
}
function getElementProp(el, prop, value) {
    const closestWithProp = (0,_dom_4d367677_js__WEBPACK_IMPORTED_MODULE_1__.c)(el, `[${prop}]`);
    return closestWithProp ? closestWithProp.getAttribute(prop) : value;
}
// css
const CSS_UTILITY = {
    rtl: "arcgis--rtl"
};
async function formatNumber(number, options) {
    const { api, type, places } = options || {};
    if (api === 4) {
        const [intl] = await (0,_loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_0__.l)(["esri/intl"]);
        const numberFormatIntlOptions = intl.convertNumberFormatToIntlOptions({
            places,
            style: type,
            digitSeparator: true
        });
        return intl.formatNumber(number, Object.assign(Object.assign({}, numberFormatIntlOptions), { style: type }));
    }
    const [dojoNumber] = await (0,_loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_0__.l)(["dojo/number"]);
    return dojoNumber.format(number, {
        type,
        places,
        pattern: options === null || options === void 0 ? void 0 : options.pattern
    });
}
const cache = {};
function formatDate(date) {
    const lang = document.documentElement.lang;
    const dayShortMonthYear = {
        year: "numeric",
        month: "short",
        day: "numeric"
    };
    if (!cache[lang]) {
        cache[lang] = new Intl.DateTimeFormat(document.documentElement.lang, dayShortMonthYear);
    }
    return cache[lang].format(date);
}
function formatPlural(lang, stringObj, number) {
    const singles = ["id", "ja", "ko", "th", "vi", "zh-cn", "zh-hk", "zh-tw"];
    const likeEnglish = [
        "en",
        "ca",
        "da",
        "de",
        "el",
        "es",
        "et",
        "fi",
        "hi",
        "hu",
        "it",
        "nb",
        "nl",
        "pt-pt",
        "sv",
        "tr"
    ];
    const locale = lang !== null && lang !== void 0 ? lang : "en";
    // if the number is one, or it is a "simple" language, return the 1 string
    if (number === 1 || singles.includes(locale)) {
        return stringObj.single.replace("${number}", "1");
    }
    // if the number is not 1 and the language uses the same pluralization strategy as english,
    // return the multiple string
    if (number !== 1 && likeEnglish.includes(locale)) {
        return stringObj.multiple.replace("${number}", `${number}`);
    }
    // if none of the above worked, return the "unknown" string
    return stringObj.unknown.replace("${number}", `${number}`);
}



//# sourceMappingURL=languageUtil-ef0e54b2.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,