"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_arcgis-d5954a"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-smart-mapping-panels-chart.entry.js":
/*!************************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-smart-mapping-panels-chart.entry.js ***!
  \************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   arcgis_smart_mapping_panels_chart: () => (/* binding */ ArcgisSmartMappingPanelsChart)
/* harmony export */ });
/* harmony import */ var _index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-e3bf7da7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-e3bf7da7.js");
/* harmony import */ var _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./raster-unique-value-0976ec7f.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/raster-unique-value-0976ec7f.js");
/* harmony import */ var _loading_69139907_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./loading-69139907.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loading-69139907.js");
/* harmony import */ var _loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./loadModules-b4ac1247.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-b4ac1247.js");
/* harmony import */ var _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./commonEnums-fcf13661.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/commonEnums-fcf13661.js");
/* harmony import */ var _symbolStyler_04635b2b_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./symbolStyler-04635b2b.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/symbolStyler-04635b2b.js");
/* harmony import */ var _chart_097ec280_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./chart-097ec280.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/chart-097ec280.js");
/* harmony import */ var _functional_44de8fcf_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./functional-44de8fcf.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-44de8fcf.js");
/* harmony import */ var _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./languageUtil-ef0e54b2.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-ef0e54b2.js");
/* harmony import */ var _locale_050b6db9_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./locale-050b6db9.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-050b6db9.js");
/* harmony import */ var _dom_4d367677_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./dom-4d367677.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-4d367677.js");
/* harmony import */ var _index_05956cab_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./index-05956cab.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-05956cab.js");
/* harmony import */ var _commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./commonFunctions-b0830e9e.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/commonFunctions-b0830e9e.js");
/* harmony import */ var _location_e26b539f_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./location-e26b539f.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/location-e26b539f.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */















const arcgisSmartMappingPanelsChartCss = ":host{width:100%}.flow-item{height:100%}.chart-block{overflow-x:hidden}.checkbox{margin:6px}.hidden{display:none}.top-grey-border{border-top:1.5px solid #e0e0e0}.top-padding{margin-top:12px}.label{font-size:var(--calcite-font-size--1);padding-top:5px;padding-bottom:5px}.label:focus,.symbol-icon:focus{outline:2px solid var(--calcite-color-brand)}.selected{outline:1px solid var(--calcite-color-brand)}.other-null-list-item{min-height:45px}.other-symbol{margin-left:27px}.null-value-actions{display:contents}.shape-slider{background-color:transparent;position:relative;width:100%;padding:0 4px}.slider-labels{margin-top:10px}.space-between{display:flex;justify-content:space-between}.symbol-icon{width:19px;height:19px;margin:2px}.symbol-is-white{background-color:#f3f3f3}.text-wrap{overflow-wrap:anywhere}";

const ArcgisSmartMappingPanelsChart = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisSmartMappingPanelsChartBackClick = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingPanelsChartBackClick", 7);
        this.arcgisSmartMappingPanelsChartClose = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingPanelsChartClose", 7);
        this.arcgisSmartMappingPanelsChartError = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingPanelsChartError", 7);
        //maps from index to HTMLCalciteInputElement
        this.inputNodes = {};
        //maps from index to HTMLDivElement
        this.labelNodes = {};
        this.popoverSettings = {
            index: null,
            popoverNode: null
        };
        //maps from index to HTMLDivElement
        this.valueSymbolNodes = {};
        this.menuOpen = undefined;
        this.showBackButton = undefined;
        this.beforeBack = undefined;
    }
    //--------------------------------------------------------------------------
    //
    //  Public Methods
    //
    //--------------------------------------------------------------------------
    async setFocus() {
        var _a;
        (_a = this.flowItemNode) === null || _a === void 0 ? void 0 : _a.setFocus();
    }
    //-------------------------------------------------------------------
    //
    //  Lifecycle Methods
    //
    //-------------------------------------------------------------------
    componentDidLoad() {
        const { config } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        this.hostElement.shadowRoot.firstElementChild.insertAdjacentHTML("beforebegin", `<link rel="stylesheet" href="${config.jsapiUrl}/themes/light/main.css" />`);
        requestAnimationFrame(() => { var _a; return (_a = this.flowItemNode) === null || _a === void 0 ? void 0 : _a.setFocus(); });
    }
    componentWillLoad() {
        var _a, _b, _c;
        const { layer, modules, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        this.originalRendererJSON = renderer.toJSON();
        this.originalFeatureReduction =
            "featureReduction" in layer && layer.featureReduction
                ? modules.esriLang.clone(layer.featureReduction)
                : undefined;
        if (!renderer.defaultLabel) {
            renderer.defaultLabel = strings.panels.chart.noData;
        }
        _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s.lastDefault = {
            otherColor: (_a = renderer.othersCategory) === null || _a === void 0 ? void 0 : _a.color,
            otherLabel: ((_b = renderer.othersCategory) === null || _b === void 0 ? void 0 : _b.label) || strings.panels.chart.other,
            threshold: (_c = renderer.othersCategory) === null || _c === void 0 ? void 0 : _c.threshold,
            defaultColor: renderer.defaultColor,
            defaultLabel: renderer.defaultLabel
        };
    }
    disconnectedCallback() {
        var _a;
        (_a = this.sizeSliderWatchHandle) === null || _a === void 0 ? void 0 : _a.remove();
        _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s.lastDefault = undefined;
        _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s.selectedAttribute = undefined;
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ae)();
    }
    //-------------------------------------------------------------------
    //
    //  Render Methods
    //
    //-------------------------------------------------------------------
    render() {
        var _a;
        const { hideLayerTitle, isRTL, layer, mapImageSublayer, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const title = hideLayerTitle ? undefined : (_a = mapImageSublayer === null || mapImageSublayer === void 0 ? void 0 : mapImageSublayer.title) !== null && _a !== void 0 ? _a : layer.title;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.H, { class: "calcite-match-height" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-flow-item", { class: {
                "flow-item": true,
                [_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_8__.C.rtl]: isRTL
            }, closable: (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.aa)(this.hostElement), heading: strings.panels.styleOptions, description: title, menuOpen: this.menuOpen, beforeBack: this.beforeBack,
            // @ts-ignore
            showBackButton: this.showBackButton, onCalciteFlowItemBack: () => this.arcgisSmartMappingPanelsChartBackClick.emit(), ref: (node) => (this.flowItemNode = node) }, this.renderVisualization(), this.renderDoneButton(), this.renderCancelButton())));
    }
    renderVisualization() {
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const rendererType = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.g)();
        const isSizeChart = rendererType === "chart-size";
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-block", { class: "chart-block", heading: isSizeChart ? strings.panels.chart.chartStyleColor : strings.panels.chart.chartStyle, open: true, collapsible: false }, this.renderChartSymbol(), this.renderValues(), this.renderChartSize(), this.renderShape(), this.renderMinSlice(), this.renderBackgroundStyle()));
    }
    renderChartSymbol() {
        const { layer, mapView, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const attributes = renderer.attributes;
        const schemes = modules.pieChartSchemes.getSchemes({
            basemap: mapView.map.basemap,
            geometryType: (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.D)(layer),
            numColors: attributes.length
        });
        const colorRampsAndSchemes = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a9)(schemes, Math.min(attributes.length, 10));
        const defaultColors = colorRampsAndSchemes[0].colors;
        let colors = (attributes === null || attributes === void 0 ? void 0 : attributes.length)
            ? attributes
                .slice(0, 10)
                .map((attribute, idx) => attribute.color
                ? new modules.esriColor(attribute.color)
                : new modules.esriColor(defaultColors[idx % defaultColors.length]))
            : [];
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-symbol-button", { type: "chart-ramp", colors: colors, rampType: "discrete", onArcgisSmartMappingSymbolButtonSymbolChange: () => (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement) }));
    }
    renderValues() {
        const { layer, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { class: "top-padding" }, strings.panels.chart.fieldName, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-list", { class: "top-grey-border" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-list", { "drag-enabled": true, onCalciteListOrderChange: (event) => {
                let items = Array.from(event.target.children);
                this.handleSortLegend(items);
            } }, renderer.attributes.map((attribute, idx) => this.renderValue(attribute, idx))), this.renderOtherValue(), this.renderNullValue())));
    }
    renderValue(attribute, index) {
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-list-item", { key: attribute.field, value: attribute.field }, this.renderSymbolNode(attribute, index), this.renderTextNode(attribute, index)));
    }
    renderSymbolNode(attribute, index) {
        const { layer, mapView, modules, selectedAttribute, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const symbol = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.S)(layer, mapView);
        symbol.color = new modules.esriColor(attribute.color);
        symbol.outline = undefined;
        const symbolNodeClasses = {
            "value-symbol": true,
            "symbol-is-white": (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.aq)(symbol)
        };
        const symbolClasses = {
            "symbol-icon": true,
            "selected": selectedAttribute === index
        };
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: symbolNodeClasses, slot: "content-start", role: "button", "aria-label": strings.panels.chart.accessibility.editSymbolFor.replace("${value}", attribute.label), "aria-haspopup": "true", "aria-expanded": selectedAttribute === index, onClick: () => this.handleValueSymbolClick(index), onKeyDown: (event) => {
                if (event.key === " " || event.key === "Enter") {
                    this.handleValueSymbolClick(index);
                }
            } }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: symbolClasses, tabIndex: 0, "aria-hidden": "true", ref: (node) => {
                var _a, _b, _c, _d;
                if (node) {
                    this.valueSymbolNodes[index] = node;
                    if (!(0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.aE)(symbol)) {
                        node.style.backgroundColor = (_b = (_a = symbol.color) === null || _a === void 0 ? void 0 : _a.toHex()) !== null && _b !== void 0 ? _b : "#ffffff";
                        node.style.opacity = (_d = (_c = symbol.color) === null || _c === void 0 ? void 0 : _c.a) !== null && _d !== void 0 ? _d : 0;
                    }
                    else {
                        node.style.backgroundColor = null;
                        node.style.opacity = null;
                    }
                }
            } })));
    }
    renderOtherValue() {
        var _a, _b;
        const { lastDefault, layer, mapView, modules, selectedAttribute, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const defaultColor = ((_a = renderer.othersCategory) === null || _a === void 0 ? void 0 : _a.color) || lastDefault.otherColor;
        const defaultSymbol = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.S)(layer, mapView);
        defaultSymbol.color = new modules.esriColor(defaultColor);
        defaultSymbol.outline = undefined;
        const defaultLabel = ((_b = renderer.othersCategory) === null || _b === void 0 ? void 0 : _b.label) || lastDefault.otherLabel;
        const symbolNodeClasses = {
            "other-symbol": true,
            "symbol-is-white": (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.aq)(defaultSymbol)
        };
        const symbolClasses = {
            "symbol-icon": true,
            "selected": selectedAttribute === -1
        };
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-list-item", { class: "top-grey-border other-null-list-item" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: symbolNodeClasses, slot: "content-start", role: "button", tabIndex: 0, "aria-haspopup": "true", "aria-expanded": selectedAttribute === -1, "aria-label": strings.panels.chart.accessibility.editSymbolFor.replace("${fieldName}", defaultLabel), onClick: () => this.handleValueSymbolClick(-1), onKeyDown: (event) => {
                if (event.key === " " || event.key === "Enter") {
                    this.handleValueSymbolClick(-1);
                }
            } }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: symbolClasses, tabIndex: 0, "aria-hidden": "true", ref: (node) => {
                var _a, _b, _c, _d;
                if (node) {
                    this.valueSymbolNodes[-1] = node;
                    if (!(0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.aE)(defaultSymbol)) {
                        node.style.backgroundColor = (_b = (_a = defaultSymbol.color) === null || _a === void 0 ? void 0 : _a.toHex()) !== null && _b !== void 0 ? _b : "#ffffff";
                        node.style.opacity = (_d = (_c = defaultSymbol.color) === null || _c === void 0 ? void 0 : _c.a) !== null && _d !== void 0 ? _d : 0;
                    }
                    else {
                        node.style.backgroundColor = null;
                        node.style.opacity = null;
                    }
                }
            } })), this.renderTextNode({
            symbol: defaultSymbol,
            label: defaultLabel
        }, -1)));
    }
    renderTextNode(attribute, index) {
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.F, null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { "aria-label": strings.panels.chart.accessibility.editLabelFor.replace("${fieldName}", attribute.label), class: "label text-wrap", slot: "content", tabIndex: 0, onClick: (event) => {
                (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.E)();
                event.target.classList.add("hidden");
                this.inputNodes[index].classList.remove("hidden");
                this.inputNodes[index].setFocus();
            }, onKeyDown: (event) => {
                (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.E)();
                if (event.key === " " || event.key === "Enter") {
                    event.preventDefault();
                    event.stopPropagation();
                    event.target.classList.add("hidden");
                    this.inputNodes[index].classList.remove("hidden");
                    this.inputNodes[index].setFocus();
                }
            }, ref: (node) => {
                this.labelNodes[index] = node;
            } }, attribute.label), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-input", { class: "hidden", slot: "content", tabIndex: 0, value: attribute.label, onFocusout: (event) => {
                const node = event.target;
                this.handleValueTextChange(index, node.value);
            }, onKeyDown: (event) => {
                event.stopPropagation();
                if (event.key === "Escape" || event.key === "Enter") {
                    event.preventDefault();
                    const node = event.currentTarget;
                    this.handleValueTextChange(index, node.value);
                }
            }, ref: (node) => {
                this.inputNodes[index] = node;
            } })));
    }
    renderNullValue() {
        const { lastDefault, layer, mapView, modules, selectedAttribute, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const defaultColor = renderer.defaultColor || lastDefault.defaultColor;
        const defaultSymbol = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.S)(layer, mapView);
        defaultSymbol.color = new modules.esriColor(defaultColor);
        defaultSymbol.outline = undefined;
        const defaultLabel = renderer.defaultLabel || lastDefault.defaultLabel;
        const symbolIsTransparent = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.aE)(defaultSymbol);
        const symbolNodeClasses = {
            "symbol": true,
            "symbol-is-white": (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.aq)(defaultSymbol)
        };
        const symbolClasses = {
            "symbol-icon": true,
            "selected": selectedAttribute === -2
        };
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-list-item", { class: "other-null-list-item" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-checkbox", { disabled: symbolIsTransparent, slot: "actions-start", class: "checkbox", tabIndex: 0, checked: !!renderer.defaultColor && !symbolIsTransparent, onClick: () => this.handleNullValueCheckChange() }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: symbolNodeClasses, slot: "content-start", role: "button", tabIndex: 0, "aria-haspopup": "true", "aria-expanded": selectedAttribute === -2, "aria-label": strings.panels.chart.accessibility.editSymbolFor.replace("${fieldName}", defaultLabel), onClick: () => this.handleValueSymbolClick(-2), onKeyDown: (event) => {
                if (event.key === " " || event.key === "Enter") {
                    this.handleValueSymbolClick(2);
                }
            } }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: symbolClasses, tabIndex: 0, "aria-hidden": "true", ref: (node) => {
                var _a, _b, _c, _d;
                if (node) {
                    this.valueSymbolNodes[-2] = node;
                    if (!symbolIsTransparent) {
                        node.style.backgroundColor = (_b = (_a = defaultSymbol.color) === null || _a === void 0 ? void 0 : _a.toHex()) !== null && _b !== void 0 ? _b : "#ffffff";
                        node.style.opacity = (_d = (_c = defaultSymbol.color) === null || _c === void 0 ? void 0 : _c.a) !== null && _d !== void 0 ? _d : 0;
                    }
                    // need to reset for the transparent symbol css class to apply
                    else {
                        node.style.backgroundColor = null;
                        node.style.opacity = null;
                    }
                }
            } })), this.renderTextNode({
            symbol: defaultSymbol,
            label: defaultLabel
        }, -2)));
    }
    renderChartSize() {
        const { layer, mapView, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const sizeVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)(renderer, "size");
        if (sizeVisVar) {
            return null;
        }
        const autoSizeVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)(renderer, "size", "auto"); //value depends on scale of map
        const size = this.getSizeValue();
        // prevent showing rounding issues
        const pxWidth = Math.round(size / 0.75);
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.F, null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, strings.panels.chart.chartSize), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-slider-input", { min: 10, max: 120, values: [pxWidth], precision: 0, suffixText: strings.panels.chart.px, onArcgisSmartMappingSliderInputChange: (event) => this.handleChartSizeChange(event.detail) }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { scale: "s", layout: "inline" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-checkbox", { scale: "s", checked: !!autoSizeVisVar, onCalciteCheckboxChange: (event) => {
                this.handleAutoSizeChange(event.target.checked ? "automatic" : "fixed");
            }, ref: (node) => {
                this.adjustSizeNode = node;
                this.sizeSliderWatchHandle = mapView.watch("scale", (0,_functional_44de8fcf_js__WEBPACK_IMPORTED_MODULE_7__.d)(() => (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement), 100));
            } }), strings.panels.chart.adjustChartSizeAutomatically)));
    }
    renderShape() {
        var _a, _b;
        const { layer, modules, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        if (!this.shapeSlider) {
            const max = Math.max(0.9, renderer.holePercentage);
            const config = {
                min: 0,
                max,
                values: [(_a = renderer.holePercentage) !== null && _a !== void 0 ? _a : 0.5],
                precision: 1
            };
            this.shapeSlider = new modules.Slider(config);
            this.shapeSlider.on("thumb-drag", (event) => {
                const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
                renderer.holePercentage = event.value;
                (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
            });
            this.shapeSlider.on("thumb-change", (event) => {
                const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
                renderer.holePercentage = event.value;
                (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
            });
        }
        else {
            let config = {
                values: [(_b = renderer.holePercentage) !== null && _b !== void 0 ? _b : 0.5]
            };
            this.shapeSlider.set(config);
        }
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "top-padding" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, strings.panels.chart.shape), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "shape-slider slider-bottom-label", ref: (node) => {
                node.style.width = "100%";
                if (this.shapeSlider) {
                    this.shapeSlider.container = node;
                }
            } }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "slider-labels space-between", "aria-hidden": "true" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, strings.panels.chart.pie), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, strings.panels.chart.donut))));
    }
    renderMinSlice() {
        const { isRTL, layer, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const { threshold = 0.04 } = renderer.othersCategory;
        let isPercentAfter = strings.panels.chart.percentValue.endsWith("%");
        if (isRTL) {
            // it flips it with RTL
            isPercentAfter = !isPercentAfter;
        }
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "top-padding" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "space-between" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { layout: "inline" }, strings.panels.chart.grouping), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { scale: "s", icon: "information", role: "button", ref: (node) => {
                var _a;
                (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.af)(node, `<div>${strings.panels.chart.groupingInfo.replace("${other}", ((_a = renderer.othersCategory) === null || _a === void 0 ? void 0 : _a.label) || strings.panels.chart.other)}</div>`, false);
            } })), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-slider-input", { disabled: !renderer.othersCategory, min: 0, max: 50, values: [Math.round(threshold * 100)], precision: 0, prefixText: !isPercentAfter ? "%" : undefined, suffixText: isPercentAfter ? "%" : undefined, onArcgisSmartMappingSliderInputChange: (event) => {
                const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
                renderer.othersCategory.threshold = event.detail / 100;
                (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
            } })));
    }
    renderBackgroundStyle() {
        return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-background-symbol", null);
    }
    renderDoneButton() {
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { slot: "footer", label: strings.done, onClick: () => this.arcgisSmartMappingPanelsChartClose.emit("save"), appearance: "solid", width: "half" }, strings.done));
    }
    renderCancelButton() {
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { slot: "footer", label: strings.cancel, onClick: () => {
                const { originalRendererJSON, originalFeatureReduction } = this;
                (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.E)();
                (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.j)(originalRendererJSON, originalFeatureReduction);
                this.arcgisSmartMappingPanelsChartClose.emit("cancel");
            }, appearance: "outline-fill", width: "half" }, strings.cancel));
    }
    //-------------------------------------------------------------------
    //
    //  Private Methods
    //
    //-------------------------------------------------------------------
    getSizeByScale(sizeAutoVisVar, scale) {
        const sizeStops = sizeAutoVisVar.stops;
        const stopsCount = sizeStops.length;
        const finalIndex = stopsCount - 1;
        const scaleMin = sizeStops[0].value;
        const scaleMax = sizeStops[finalIndex].value;
        if (scale <= scaleMin) {
            return sizeStops[0].size;
        }
        if (scale >= scaleMax) {
            return sizeStops[finalIndex].size;
        }
        for (let i = 0; i <= finalIndex; i++) {
            const currentStop = sizeStops[i];
            const nextStop = sizeStops[i + 1];
            if (scale >= currentStop.value && scale < nextStop.value) {
                const scaleRange = nextStop.value - currentStop.value;
                const sizeRange = currentStop.size - nextStop.size;
                const relativePosition = (scale - currentStop.value) / scaleRange;
                const effectiveSize = currentStop.size - sizeRange * relativePosition;
                return Math.round(effectiveSize * 100) / 100;
            }
        }
        return 1; // we really don't come here
    }
    /**
     * Get size value of size in current map scale (if applicable)
     */
    getSizeValue() {
        const { mapView, layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const sizeAutoVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)(renderer, "size", "auto");
        if (sizeAutoVisVar) {
            const mapScale = mapView.scale;
            const stops = sizeAutoVisVar.stops;
            let value = 0;
            let found = false;
            for (let i = 0; i < stops.length; i++) {
                const stop = stops[i];
                if (mapScale <= stop.value) {
                    found = true;
                    if (i > 0) {
                        // interpolate to get correct sizes
                        let lastStop = stops[i - 1];
                        const factor = (mapScale - lastStop.value) / (stop.value - lastStop.value);
                        value = lastStop.size + (stop.size - lastStop.size) * factor;
                    }
                    else {
                        // don't interpolate; use lowest sizes
                        value = stops[0].size;
                    }
                    break;
                }
            }
            if (!found) {
                // take lowest value
                value = stops[stops.length - 1].size;
            }
            return value;
        }
        else {
            return renderer.size;
        }
    }
    handleAutoSizeChange(type) {
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        if (type === "fixed") {
            // automatic -> fixed
            // remove visualVariable
            const visVars = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.n)(renderer, "size", "auto");
            if (visVars === null || visVars === void 0 ? void 0 : visVars.length) {
                renderer.visualVariables = visVars;
            }
            else {
                renderer.visualVariables = undefined;
            }
            (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
        }
        else {
            // fixed -> automatic
            // need to create a new renderer
            (0,_loading_69139907_js__WEBPACK_IMPORTED_MODULE_2__.r)((0,_chart_097ec280_js__WEBPACK_IMPORTED_MODULE_6__.a)({
                sizeOptimizationEnabled: true
            }), this.flowItemNode).then((result) => {
                (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.e)(result.renderer, layer);
                (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
            }, (error) => {
                // handles keeping the "adjust size automatically" button unchecked when renderer re-creation occurs
                this.adjustSizeNode.checked = false;
                this.arcgisSmartMappingPanelsChartError.emit(error);
            });
        }
    }
    handleChartSizeChange(value) {
        const { layer, mapView } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        let newSize = Math.max(value, 0.1);
        const sizeAutoVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)(renderer, "size", "auto");
        if (!sizeAutoVisVar) {
            renderer.size = newSize;
        }
        else {
            const oldSize = this.getSizeByScale(sizeAutoVisVar, mapView.scale);
            const factor = newSize / oldSize;
            this.updateAutoSizeStops(sizeAutoVisVar, factor);
        }
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
    }
    handleNullValueCheckChange() {
        const { layer, lastDefault } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        if (renderer.defaultColor) {
            lastDefault.defaultColor = renderer.defaultColor;
            renderer.defaultColor = undefined;
        }
        else {
            renderer.defaultColor = lastDefault.defaultColor;
        }
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
    }
    handleSortLegend(items) {
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const attributes = renderer.attributes.map((attribute) => {
            return attribute.clone();
        });
        const itemValues = items.map((item) => item.value);
        attributes.sort((a, b) => itemValues.indexOf(a.field) - itemValues.indexOf(b.field));
        renderer.attributes = attributes;
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
    }
    handleValueSymbolClick(index) {
        var _a;
        if ((_a = this.popoverSettings) === null || _a === void 0 ? void 0 : _a.popoverNode) {
            this.valueSymbolNodes[index].classList.remove("selected");
            if (this.popoverSettings.index === index) {
                (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.E)();
                this.popoverSettings.popoverNode = null;
                this.popoverSettings.index = null;
                this.valueSymbolNodes[index].focus();
            }
            else {
                this.popoverSettings.index = index;
                this.openSymbolStylerForValue(index);
            }
        }
        else {
            this.popoverSettings.index = index;
            this.openSymbolStylerForValue(index);
        }
    }
    handleValueTextChange(index, label) {
        var _a, _b;
        const { lastDefault, layer, modules, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const originalRenderer = modules.rendererJsonUtils.fromJSON(this.originalRendererJSON);
        this.inputNodes[index].classList.add("hidden");
        if (!label.length) {
            if (index === -1) {
                label = ((_a = originalRenderer.othersCategory) === null || _a === void 0 ? void 0 : _a.label) || strings.panels.chart.other;
            }
            else if (index === -2) {
                label = strings.panels.chart.noData;
            }
            else {
                let matchingInfo = originalRenderer.attributes.find((info) => info.field === renderer.attributes[index].field);
                label = matchingInfo.label;
            }
        }
        if (index === -1) {
            renderer.othersCategory = renderer.othersCategory || {
                color: lastDefault === null || lastDefault === void 0 ? void 0 : lastDefault.otherColor,
                threshold: (_b = lastDefault === null || lastDefault === void 0 ? void 0 : lastDefault.threshold) !== null && _b !== void 0 ? _b : 0
            };
            renderer.othersCategory.label = label;
            lastDefault.otherLabel = label;
        }
        else if (index === -2) {
            renderer.defaultLabel = label;
            lastDefault.defaultLabel = label;
        }
        else {
            renderer.attributes = renderer.attributes.map((attribute, idx2) => {
                if (idx2 === index) {
                    attribute.label = label;
                }
                return attribute;
            });
        }
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
        this.labelNodes[index].classList.remove("hidden");
        this.labelNodes[index].innerHTML = label;
        this.inputNodes[index].value = label;
        setTimeout(() => {
            this.labelNodes[index].focus();
        }, 100);
    }
    openSymbolStylerForValue(index) {
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.E)();
        this.popoverSettings.popoverNode = (0,_symbolStyler_04635b2b_js__WEBPACK_IMPORTED_MODULE_5__.c)({
            referenceElement: this.flowItemNode,
            heading: _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s.strings.styler.symbolStyle
        });
        this.popoverSettings.popoverNode.addEventListener("arcgisSmartMappingStylerPopoverClose", () => {
            (0,_symbolStyler_04635b2b_js__WEBPACK_IMPORTED_MODULE_5__.r)(this.popoverSettings.popoverNode);
            this.popoverSettings.popoverNode = null;
            this.valueSymbolNodes[index].classList.remove("selected");
            setTimeout(() => {
                this.valueSymbolNodes[index].focus();
            }, 100);
        });
        this.popoverSettings.popoverNode.addEventListener("arcgisSmartMappingStylerPopoverDisconnected", () => {
            (0,_symbolStyler_04635b2b_js__WEBPACK_IMPORTED_MODULE_5__.r)(this.popoverSettings.popoverNode);
            this.popoverSettings.popoverNode = null;
            this.valueSymbolNodes[index].classList.remove("selected");
        });
        _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s.selectedAttribute = index;
        (0,_symbolStyler_04635b2b_js__WEBPACK_IMPORTED_MODULE_5__.a)({
            popoverNode: this.popoverSettings.popoverNode,
            onChange: () => {
                (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
                (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
            }
        });
        this.valueSymbolNodes[index].classList.add("selected");
    }
    updateAutoSizeStops(sizeAutoVisVar, factor) {
        sizeAutoVisVar.stops.forEach((stop) => {
            stop.size *= factor;
        });
    }
    get hostElement() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisSmartMappingPanelsChart.style = arcgisSmartMappingPanelsChartCss;



//# sourceMappingURL=arcgis-smart-mapping-panels-chart.entry.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-44de8fcf.js":
/*!****************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-44de8fcf.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ arrayToLookupMap),
/* harmony export */   b: () => (/* binding */ unique),
/* harmony export */   c: () => (/* binding */ throttle),
/* harmony export */   d: () => (/* binding */ debounce),
/* harmony export */   e: () => (/* binding */ escapeRegExp),
/* harmony export */   f: () => (/* binding */ arraysAreEquivalent),
/* harmony export */   g: () => (/* binding */ chunk),
/* harmony export */   i: () => (/* binding */ isDefined),
/* harmony export */   m: () => (/* binding */ minDelay),
/* harmony export */   t: () => (/* binding */ timeout),
/* harmony export */   u: () => (/* binding */ uniqueBy)
/* harmony export */ });
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */
/**
 * Call a function only after it has not been called for n milliseconds
 * @param fn    - function to call
 * @param delay - delay in milliseconds
 */
const debounce = (fn, delay) => {
    let timeout;
    let status = "idle";
    function flush(...args) {
        status = "flushed";
        return debounced(...args);
    }
    function invoke(...args) {
        status = "invoked";
        return debounced(...args);
    }
    function cancel(...args) {
        status = "cancelled";
        return debounced(...args);
    }
    function getStatus() {
        return status;
    }
    const debounced = (...args) => new Promise((resolve) => {
        switch (status) {
            case "flushed":
                status = "idle";
                if (timeout) {
                    clearTimeout(timeout);
                    resolve(fn(...args));
                }
                else {
                    resolve(null);
                }
                break;
            case "invoked":
                clearTimeout(timeout);
                status = "idle";
                resolve(fn(...args));
                break;
            case "cancelled":
                clearTimeout(timeout);
                status = "idle";
                resolve(null);
                break;
            default:
                if (timeout) {
                    clearTimeout(timeout);
                }
                status = "pending";
                timeout = setTimeout(() => {
                    status = "idle";
                    return resolve(fn(...args));
                }, delay);
                break;
        }
    });
    debounced.flush = flush;
    debounced.invoke = invoke;
    debounced.cancel = cancel;
    debounced.getStatus = getStatus;
    return debounced;
};
/**
 * Call a function only after n milliseconds have elapsed
 * @param fn    - function to call
 * @param delay - delay in milliseconds
 */
const throttle = (fn, delay) => {
    let timeout;
    return (...args) => new Promise((resolve) => {
        if (timeout) {
            return;
        }
        timeout = setTimeout(() => {
            clearTimeout(timeout);
            timeout = undefined;
            resolve(fn(...args));
        }, delay);
    });
};
function escapeRegExp(str) {
    return str.replace(/[.*+?^${}()|[\]\\]/g, "\\$&"); // $& means the whole matched string
}
function isDefined(value) {
    return value !== undefined && value !== null;
}
/**
 * Set a minimum time for a promise to resolve (useful for preventing flash of loaders)
 */
async function minDelay(promise, minDelay) {
    await Promise.all([promise, timeout(minDelay)]);
    return promise;
}
/**
 * Helper method to inline setTimeout as an await in async functions
 */
function timeout(ms) {
    return new Promise((resolve) => setTimeout(resolve, ms));
}
const arrayToLookupMap = (dataArr, getKeyAndItem) => Object.fromEntries((dataArr || []).map((item) => {
    const { key, data } = getKeyAndItem(item);
    return [key, data];
}));
/**
 * Check whether two arrays have the same number of elements
 * and whether they contain the same elements
 * regardless of order
 */
const arraysAreEquivalent = (arr1, arr2) => arr1.length === arr2.length && arr1.reduce((memo, str) => memo && arr2.indexOf(str) > -1, true);
function uniqueBy(myArr, getItemId) {
    const resultArr = [];
    const lookupMap = {};
    myArr.forEach((item) => {
        const id = getItemId(item);
        if (lookupMap[id] == null) {
            lookupMap[id] = item;
            resultArr.push(item);
        }
    });
    return resultArr;
}
function unique(myArr) {
    const primitives = { boolean: {}, number: {}, string: {} };
    const objs = [];
    return myArr.filter((item) => {
        let type = typeof item;
        if (type in primitives) {
            return primitives[type].hasOwnProperty(item) ? false : (primitives[type][item] = true);
        }
        else {
            return objs.indexOf(item) >= 0 ? false : objs.push(item);
        }
    });
}
const chunk = (arr, size) => [...Array(Math.ceil(arr.length / size))].map((_, i) => arr.slice(size * i, size + size * i));



//# sourceMappingURL=functional-44de8fcf.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loading-69139907.js":
/*!*************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loading-69139907.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   r: () => (/* binding */ requestWrapper)
/* harmony export */ });
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */
let _loadingTimer;
let _requestCancelled;
function startLoading(node) {
    node.loading = true;
    _requestCancelled = false;
    if (_loadingTimer) {
        clearTimeout(_loadingTimer);
    }
    _loadingTimer = setTimeout(() => {
        // took too long
        endLoading(node);
        _requestCancelled = true;
    }, 60000);
}
function endLoading(node) {
    node.loading = false;
}
function requestWrapper(request, node) {
    startLoading(node);
    return request
        .then((result) => {
        endLoading(node);
        if (!_requestCancelled) {
            return Promise.resolve(result);
        }
        else {
            return Promise.reject(new Error("timeout"));
        }
    })
        .catch((error) => {
        endLoading(node);
        return Promise.reject(error);
    });
}



//# sourceMappingURL=loading-69139907.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,