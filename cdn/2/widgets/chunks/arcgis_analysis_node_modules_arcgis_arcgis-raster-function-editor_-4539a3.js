"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_arcgis-raster-function-editor_-4539a3"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/common-strings.tr-6f17e009.js":
/*!**************************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/common-strings.tr-6f17e009.js ***!
  \**************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   addRaster: () => (/* binding */ addRaster),
/* harmony export */   addScalar: () => (/* binding */ addScalar),
/* harmony export */   breadcrumb: () => (/* binding */ breadcrumb),
/* harmony export */   breadcrumbEditor: () => (/* binding */ breadcrumbEditor),
/* harmony export */   cancel: () => (/* binding */ cancel),
/* harmony export */   category: () => (/* binding */ category),
/* harmony export */   categoryNames: () => (/* binding */ categoryNames),
/* harmony export */   close: () => (/* binding */ close),
/* harmony export */   copy: () => (/* binding */ copy),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   defaultModelName: () => (/* binding */ defaultModelName),
/* harmony export */   definitionQuery: () => (/* binding */ definitionQuery),
/* harmony export */   description: () => (/* binding */ description),
/* harmony export */   deselectFunction: () => (/* binding */ deselectFunction),
/* harmony export */   details: () => (/* binding */ details),
/* harmony export */   dialogTitle: () => (/* binding */ dialogTitle),
/* harmony export */   dontSave: () => (/* binding */ dontSave),
/* harmony export */   enterFURL: () => (/* binding */ enterFURL),
/* harmony export */   enterURL: () => (/* binding */ enterURL),
/* harmony export */   error: () => (/* binding */ error),
/* harmony export */   errorTitle: () => (/* binding */ errorTitle),
/* harmony export */   everyone: () => (/* binding */ everyone),
/* harmony export */   f32PixelType: () => (/* binding */ f32PixelType),
/* harmony export */   f64PixelType: () => (/* binding */ f64PixelType),
/* harmony export */   failedToLoadLayer: () => (/* binding */ failedToLoadLayer),
/* harmony export */   folder: () => (/* binding */ folder),
/* harmony export */   general: () => (/* binding */ general),
/* harmony export */   groupFieldName: () => (/* binding */ groupFieldName),
/* harmony export */   groupItemsBy: () => (/* binding */ groupItemsBy),
/* harmony export */   groups: () => (/* binding */ groups),
/* harmony export */   invalidRFTMessage: () => (/* binding */ invalidRFTMessage),
/* harmony export */   isDataset: () => (/* binding */ isDataset),
/* harmony export */   isPublic: () => (/* binding */ isPublic),
/* harmony export */   item: () => (/* binding */ item),
/* harmony export */   itemGroup: () => (/* binding */ itemGroup),
/* harmony export */   loadingLayer: () => (/* binding */ loadingLayer),
/* harmony export */   matchVariables: () => (/* binding */ matchVariables),
/* harmony export */   mosaic: () => (/* binding */ mosaic),
/* harmony export */   multidimensionalRules: () => (/* binding */ multidimensionalRules),
/* harmony export */   name: () => (/* binding */ name),
/* harmony export */   noTagErrorMsg: () => (/* binding */ noTagErrorMsg),
/* harmony export */   noTitleErrorMsg: () => (/* binding */ noTitleErrorMsg),
/* harmony export */   noTitleTagErrorMsg: () => (/* binding */ noTitleTagErrorMsg),
/* harmony export */   ok: () => (/* binding */ ok),
/* harmony export */   organization: () => (/* binding */ organization),
/* harmony export */   outputPixelType: () => (/* binding */ outputPixelType),
/* harmony export */   owner: () => (/* binding */ owner),
/* harmony export */   parameter: () => (/* binding */ parameter),
/* harmony export */   parameters: () => (/* binding */ parameters),
/* harmony export */   properties: () => (/* binding */ properties),
/* harmony export */   raster: () => (/* binding */ raster),
/* harmony export */   rasterFunctionEditor: () => (/* binding */ rasterFunctionEditor),
/* harmony export */   rasterFunctions: () => (/* binding */ rasterFunctions),
/* harmony export */   rfxLicenseInfo: () => (/* binding */ rfxLicenseInfo),
/* harmony export */   s16PixelType: () => (/* binding */ s16PixelType),
/* harmony export */   s32PixelType: () => (/* binding */ s32PixelType),
/* harmony export */   s8PixelType: () => (/* binding */ s8PixelType),
/* harmony export */   save: () => (/* binding */ save),
/* harmony export */   saveAs: () => (/* binding */ saveAs),
/* harmony export */   saveUtils: () => (/* binding */ saveUtils),
/* harmony export */   savingMessage: () => (/* binding */ savingMessage),
/* harmony export */   scalar: () => (/* binding */ scalar),
/* harmony export */   search: () => (/* binding */ search),
/* harmony export */   selectFeature: () => (/* binding */ selectFeature),
/* harmony export */   selectFunction: () => (/* binding */ selectFunction),
/* harmony export */   selectRaster: () => (/* binding */ selectRaster),
/* harmony export */   serviceURL: () => (/* binding */ serviceURL),
/* harmony export */   setGroupSharing: () => (/* binding */ setGroupSharing),
/* harmony export */   setSharingLevel: () => (/* binding */ setSharingLevel),
/* harmony export */   share: () => (/* binding */ share),
/* harmony export */   shareWith: () => (/* binding */ shareWith),
/* harmony export */   success: () => (/* binding */ success),
/* harmony export */   tagFieldName: () => (/* binding */ tagFieldName),
/* harmony export */   tags: () => (/* binding */ tags),
/* harmony export */   title: () => (/* binding */ title),
/* harmony export */   toolDetailsEditor: () => (/* binding */ toolDetailsEditor),
/* harmony export */   toolEditor: () => (/* binding */ toolEditor),
/* harmony export */   toolModeler: () => (/* binding */ toolModeler),
/* harmony export */   tryAgain: () => (/* binding */ tryAgain),
/* harmony export */   type: () => (/* binding */ type),
/* harmony export */   u16PixelType: () => (/* binding */ u16PixelType),
/* harmony export */   u32PixelType: () => (/* binding */ u32PixelType),
/* harmony export */   u8PixelType: () => (/* binding */ u8PixelType),
/* harmony export */   unionDimensions: () => (/* binding */ unionDimensions),
/* harmony export */   unknownPixelType: () => (/* binding */ unknownPixelType),
/* harmony export */   unsavedTitle: () => (/* binding */ unsavedTitle),
/* harmony export */   unsavedWarningExisting: () => (/* binding */ unsavedWarningExisting),
/* harmony export */   unsavedWarningNew: () => (/* binding */ unsavedWarningNew),
/* harmony export */   userStartDirection: () => (/* binding */ userStartDirection),
/* harmony export */   variables: () => (/* binding */ variables),
/* harmony export */   viewerModeMessage: () => (/* binding */ viewerModeMessage),
/* harmony export */   viewerModeTitle: () => (/* binding */ viewerModeTitle),
/* harmony export */   warning: () => (/* binding */ warning)
/* harmony export */ });
const ok = "Tamam";
const cancel = "İptal Et";
const enterURL = "Görüntü Servisi URL’sini Gir";
const serviceURL = "Servis URL'si";
const selectRaster = "Raster Seç";
const failedToLoadLayer = "Katman yüklenemedi";
const loadingLayer = "Katman yükleniyor";
const selectFeature = "Detay Katmanı Seç";
const enterFURL = "Detay Servisi Url'sini Gir";
const addRaster = "Raster Değişkeni Ekle";
const addScalar = "Sabit Ekle";
const raster = "Raster";
const scalar = "Skalar";
const defaultModelName = "Raster Fonksiyonu Şablonu";
const general = "Genel";
const parameters = "Parametreler";
const variables = "Değişkenler";
const name = "Adı";
const description = "Tanım";
const parameter = "Parametre";
const isPublic = "Halka Açıktır";
const isDataset = "Veri Kümesidir";
const unknownPixelType = "Bilinmeyen";
const outputPixelType = "Çıktı Piksel Türü";
const u8PixelType = "8 Bit Unsigned";
const s8PixelType = "8 Bit Signed";
const u16PixelType = "16 Bit Unsigned";
const s16PixelType = "16 Bit Signed";
const u32PixelType = "32 Bit Unsigned";
const s32PixelType = "32 Bit Signed";
const f32PixelType = "32 Bit Float";
const f64PixelType = "64 Bit Double";
const properties = "Özellikler";
const multidimensionalRules = "Çok Boyutlu Kurallar";
const matchVariables = "Değişkenleri Eşleştir";
const unionDimensions = "Birleşim Boyutları";
const rasterFunctionEditor = {
	invalidRFTMessage: "Raster Fonksiyon Şablonu geçerli değil.",
	rfxArgsEditor: {
		outputRaster: "ÇıktıRasterı",
		raster: "Raster",
		unsupportedDataTypeWarning: "Şu anda desteklenmediğinden aşağıdaki bağımsız değişkenler görüntülenmez.",
		unsupportedFunction: "Şu anda desteklenmeyen raster fonksiyonları içeriyor."
	},
	rfxRasterInput: {
		selectLayer: "Katman seç",
		browseLayers: "Katmanlara Gözat",
		rfxVariable: "RasterFonksiyonuDeğişkeni"
	},
	rfxBandCombinationEditor: {
		methodLabel: "Yöntem",
		bandLabel: "Bant",
		combinationLabel: "Kombinasyon"
	},
	rfxRemapGrid: {
		minimum: "Minimum",
		maximum: "Maksimum",
		output: "Çıktı",
		noData: "NoData",
		remapValuesLabel: "Değerleri Yeniden Haritalandır"
	},
	rfxNamedRasterEditor: {
		rasterVariables: "Raster Değişkenleri",
		deleteSelectedVars: "Seçili değişkenleri kaldır"
	},
	rfxClippingGeometry: {
		clippingLayer: "Kırpma Katmanı",
		clippingRaster: "Kesme Rasterı",
		clippingGeometry: "Geometri Kırpma",
		customExtent: "Özel Yayılım",
		outputExtent: "Çıktı Yayılımı",
		currentExtent: "Mevcut Harita Yayılımı",
		drawLabel: "Çiz"
	},
	rfxCustomExtent: {
		top: "En Üst",
		right: "Sağ",
		bottom: "En Alt",
		left: "Sol"
	},
	rfxRasterArrayEditor: {
		moveUp: "Yukarı taşı",
		moveDown: "Aşağı taşı",
		remove: "Kaldır"
	},
	rfxStatisticsGrid: {
		stdDev: "Std. Dev",
		min: "Min",
		max: "Maks",
		mean: "Ortalama"
	},
	rfxWeightedSumTableEditor: {
		weightedSumTable: "Ağırlıklı Toplam Tablosu",
		id: "Kimlik",
		layer: "Katman",
		field: "Alan",
		weight: "Ağırlık",
		value: "Değer",
		selectLayer: "Katman seç"
	},
	rfxWeightedOverlayTableEditor: {
		weightedOverlayTable: "Ağırlıklı Çakıştırma Tablosu",
		id: "Kimlik",
		layer: "Katman",
		field: "Alan",
		influence: "Etki",
		sumOfInfluence: "Etki Toplamı",
		value: "Değer",
		remapTable: "Yeniden Haritalama Tablosu",
		scale: "Ölçeklendir",
		scales: "Ölçekler",
		selectRaster: "Raster Seç"
	},
	rfxFeatureSelect: {
		addFeatureLayer: "Detay katmanına göz at",
		addPointLayer: "Nokta katmanına göz at"
	},
	rfxFieldSelect: {
		value: "Değer",
		count: "Sayım"
	},
	rfxAttributeTable: {
		tableType: "Tablo Tipi",
		manual: "El İle",
		external: "Harici",
		minVal: "Minimum Değer",
		maxVal: "Maksimum Değer",
		baseClassName: "Sınıf Taban Adı",
		colorScheme: "Renk Düzeni",
		defaultClassName: "Etiket_",
		generateTable: "Tablo Oluştur",
		browseTable: "Tabloya Gözat",
		value: "Değer",
		classname: "SınıfAdı",
		color: "Renkli"
	},
	rfxFieldNumberSwitchable: {
		number: "Sayısal",
		field: "Alan",
		string: "Dizi",
		linearUnit: "Doğrusal Birim"
	},
	rfxPropertySet: {
		name: "Adı",
		value: "Değer"
	},
	rfxConversionGrid: {
		size: "Boyut"
	},
	rfxTransposeBit: {
		bitPattern: "Bit Deseni",
		outputBit: "Çıktı Biti",
		inputBit: "Girdi Biti"
	},
	rfxSpatialReference: {
		placeHolder: "Anahtar Sözcük ile Netleştir",
		coordinateSystem: "Koordinat Sistemi",
		gcs: "Coğrafi Koordinat Sistemi",
		pcs: "İzdüşümlü Koordinat Sistemi",
		vcs: "Dikey Koordinat Sistemi"
	}
};
const rfxLicenseInfo = "Bu fonkisyonu şablonu, görüntülerinizi ArcGIS Image Server ile işlemek için kullanılabilir.";
const rasterFunctions = {
	rfx: {
		aCosHName: "ACosH",
		aCosHSnip: "Rasterdaki hücrelerin ters hiperbolik kosünüsünü hesaplar.",
		aCosHDesc: "Fonksiyon, bir rasterdaki piksellerin ters hiperbolik kosinüsünü hesaplar.",
		aCosName: "ACos",
		aCosSnip: "Bir raster’daki piksellerin ters kosinüsünü hesaplar.",
		aCosDesc: "Bu raster fonksiyonu, bir raster’daki hücrelerin ters kosinüsünü hesaplar. Matematikte tüm trigonometrik fonksiyonlar, tanım kümesi denilen, tanımlanmış bir geçerli girdi değerleri aralığına sahiptir. Her fonksiyonun çıktı değerleri de tanımlanmış bir aralığa sahiptir. Bu araç için tanım kümesi [[-1, 1] ve aralık [[0, pi]’dir.",
		aSinHName: "ASinH",
		aSinHSnip: "Rasterdaki hücrelerin ters hiperbolik sinüsünü hesaplar.",
		aSinHDesc: "Fonksiyon, bir rasterdaki piksellerin ters hiperbolik sinüsünü hesaplar.",
		aSinName: "ASin",
		aSinSnip: "Rasterdaki hücrelerin ters sinüsünü hesaplar.",
		aSinDesc: "Fonksiyon, bir rasterdaki piksellerin ters sinüsünü hesaplar.",
		aTan2Name: "ATan2",
		aTan2Snip: "Rasterdaki hücrelerin ters tanjantını (x,y ye dayanan) hesaplar.",
		aTan2Desc: "Fonksiyon, bir rasterdaki piksellerin ters tanjantını (x, y tabanlı) hesaplar.",
		aTanHName: "ATanH",
		aTanHSnip: "Rasterdaki hücrelerin ters hiperbolik tanjantını hesaplar.",
		aTanHDesc: "Fonksiyon, bir rasterdaki piksellerin ters hiperbolik tanjantını hesaplar.",
		aTanName: "ATan",
		aTanSnip: "Rasterdaki hücrelerin ters tanjantını hesaplar.",
		aTanDesc: "Fonksiyon, bir rasterdaki piksellerin ters tanjantını hesaplar.",
		absName: "Abs",
		absSnip: "Rasterda hücrelerin mutlak değerini hesaplar.",
		absDesc: "Abs fonksiyonu, bir rasterdaki piksellerin mutlak değerini hesaplar.",
		reflectanceName: "Belirgin Yansıma",
		reflectanceSnip: "Sensör karakteristiklerini, güneşin pozisyonunu ve alış zamanını hesaba katarak ham görüntüyü Atmosferin Üstü değerlerine dönüştürür.",
		reflectanceDesc: "Bu fonksiyon, bazı uydu sensörleri için görüntü parlaklığı dijital sayı (DN) değerlerini ayarlar. Her bir bandın kazancı ve sapmasını ayarlamak için ayarlar, güneşin yüksekliği, satın alma tarihi ve sensör özelliklerini temel alır. Bu fonksiyon, sahne aydınlatması ve sensör kazancı ayarlarına bağlı olarak bazı uydu görüntülerinin yansıma veya parlaklığını ayarlamak için kullanılır. Görüntüler teorik olarak yaygın bir aydınlatma durumuna göre ayarlanmış olduğundan, farklı tarihler ve farklı sensörlerden sahneler arasında daha az değişiklik olması beklenir. Bu, görüntü sınıflandırma, renk dengeleme ve mozaikleme için faydalı olabilir. Bu fonksiyon, sadece belirli görüntülerle kullanılabilir. Uygulanabilir sensörler Landsat MSS, Landsat TM, Landsat ETM+, Landsat 8, IKONOS, QuickBird, GeoEye-1, RapidEye, DMCii, WorldView-1, WorldView-2, SPOT 6, ve Pleiades’dir.<div><br/>Fonksiyon iki düzeltme uygular. İlki kazanç ayarlarını temel alır. Orijinal parlaklık değerleri, kazanç denklemlerini tersine çevrilerek görüntü değerlerinden yeniden oluşturulur. İkinci düzeltme, güneş açısı ve parlaklıktaki farklılıklar ile ilgilidir. Orijinal aydınlatma değerleri, değişken aydınlatma koşullarında yakalanan sahneler normalleştirilerek genel aydınlatma durumuna ayarlanır. Genel olarak, çıktı görüntüsü veri tipi girdi görüntüsü veri tipiyle aynı olsa da çıkış değerleri girdi değerlerinden düşüktür ve geçerli veri aralığına kırpılır.</div>",
		argStatisticsName: "ArgStatistics",
		argStatisticsSnip: "Arg Maks, Arg Min, Arg Medyan ve Süre gibi arg istatistiklerini hesaplar.",
		argStatisticsDesc: "Fonksiyon arg istatistiklerini hesaplar. ArgStatistics fonksiyonunda dört yöntem bulunur: ArgMax, ArgMin, ArgMedian, ve Süre.",
		arithmeticName: "Aritmetik",
		arithmeticSnip: "İki raster arasında ya da bir raster ile bir sayı arasında aritmetik bir işlem yapar.",
		arithmeticDesc: "Aritmetik fonksiyonu, iki raster veya bir raster ve bir skaler arasında ya da tam tersi bir aritmetik işlemi gerçekleştirir.",
		aspectSlopeName: "Bakı-Eğim",
		aspectSlopeSnip: "Sayısal bir yükselti modelinde gösterildiği haliyle sürekli bir yüzeyin aynı anda bakısını (yön) ve eğimini (diklik) görüntüleyen bir raster oluşturur.",
		aspectSlopeDesc: "Bakı-Eğim fonksiyonu, bir yüzeyin bakı ve eğimini aynı anda gösteren bir raster katmanı oluşturur. Bakı, her pikselin komşularına göre maksimum değer değişikliği oranındaki azalma hızını tanımlar. Bakı, eğim yönü olarak düşünülebilir. Çıktı rasterının değerleri bir tonla (renk) temsil edilen bakının pusula yönünü gösterir. Eğim her dijital yükselti modeli (DEM) pikseli için yükselti değişim hızını gösterir. Eğim, yüzeyin dikliğini temsil eder ve renk doygunluğu (parlaklık) kullanılarak gösterilen üç sınıfa sembolize edilir.<div><br/>Çıktı bakı-eğim rasterındaki piksel değerleri, bakı ve eğim kombinasyonunu yansıtır. 20’nin altında değerleri olan pikseller düz olarak kabul edilir ve gri renkte gösterilir. 21 ve üzeri bakı-eğim değerleri aşağıdaki gibi değişen doygunluklarla gösterilir: 21 - 30 —Düşük eğim doygunluğu, 31 - 40 —Orta eğim doygunluğu, 41 ve üzeri —Yüksek eğim doygunluğu</div>",
		aspectName: "Bakı",
		aspectSnip: "Bir pikselin dönük olacağı yönü gösterir, burada 0 kuzeyi gösterir ve açılar saat yönünde 360 dereceye kadar artar.",
		aspectDesc: "Bakı fonksiyonu, her pikselin komşularına göre maksimum değer değişikliği oranındaki azalma hızını tanımlar. Bakı, eğim yönü olarak düşünülebilir. Çıktı rasterının değerleri bakının pusula yönünü gösterir.<div><br/>Bu fonksiyon için girdi, Girdi Rasterıdır. Bakı fonksiyonu genellikle dijital yükselti modeline (DEM) uygulanır. Varsayılan olarak bakı, gri tonlamalı görüntü olarak görünür. Belirli bir renk düzeni belirtmek için Renk Haritası fonksiyonu ekleyebilir veya mozaiği görüntüleyen kişinin sembolojiyi kendi renk düzeniyle değiştirmesine izin verebilirsiniz.</div>",
		tableName: "Öznitelik Tablosu",
		tableSnip: "Bir veri kümesindeki değerleri adlandırmak ve sembolize etmek için bir tablo kullanır. Tablo için sütunlar virgülle sınırlandırılmıştır: PixelValue, AttributeName, RedValue, GreenValue, BlueValue.",
		tableDesc: "Öznitelik Tablosu fonksiyonu, tek bantlı bir mozaik veri kümesini veya raster veri kümesini sembolize etmek için bir öznitelik tablosu tanımlamanıza olanak tanır. <div><br/>Orman arazisi, sulak alanlar, ekili alan ve kentsel alan gibi alanların kullanımında sınıflandırılan görüntüleri göstermek istediğinizde kullanışlıdır. Buna ek olarak, tablonuzda kırmızı, yeşil ve mavi adlı alanlar varsa, görüntüyü oluşturulurken bu alanlardaki değerler renkli harita gibi kullanılır.</div>",
		bandArithmeticName: "Bant Aritmetik",
		bandArithmeticSnip: "Ön tanımlı formülleri ya da kullanıcı tanımlı bir ifadeyi kullanarak dizinleri hesaplar.",
		bandArithmeticDesc: "Bant Aritmetiği fonksiyonu, raster veri kümesinin bantlarında aritmetik işlem gerçekleştirir. Önceden tanımlanmış algoritmalar seçebilir veya kendi tek satırlı formülünüzü girebilirsiniz. Desteklenen işlemler: -, +, /, * ve tekil -.",
		thresholdName: "İkili Eşik",
		thresholdSnip: "İki sınıf arasındaki kovaryansı en aza indirerek sürekli veriyi ön plan ve arka plan halinde düzenler.",
		thresholdDesc: "Bir raster veri kümesinde ikili modal dağılım olduğunda bu fonksiyon, verileri iki ayrı sınıfa ayıran yeni bir raster oluşturur. Siyah piksellerle gösterilen bir düşük değer sınıfı ve beyaz piksellerle gösterilen bir yüksek değer sınıfı oluşturur.",
		bitwiseAndName: "Bitwise And",
		bitwiseAndSnip: "İki girdi rasterının ikincil değerleri üzerindeki bir Bitwise And işlemini uygular.",
		bitwiseAndDesc: "Bitwise And, iki girdi rasterının ikili değerleri üzerinde bir Bitwise And işlemi yapar",
		bitwiseLeftShiftName: "Bitwise Left Shift",
		bitwiseLeftShiftSnip: "İki girdi rasterının ikincil değerleri üzerinde Bitwise Left Shift işlemi uygular.",
		bitwiseLeftShiftDesc: "Bitwise Left Shift, iki girdi rasterının ikili değerleri üzerinde bir Bitwise Sola Kaydırma işlemi yapar",
		bitwiseNotName: "Bitwise Not",
		bitwiseNotSnip: "İki girdi rasterının ikili değerlerinde bir Bitwise Not (tamamlayıcı) işlemi yapar.",
		bitwiseNotDesc: "Fonksiyon, bir girdi rasterının ikili değerinde bir Bitwise Not (tamamlayıcı) işlemi yapar.",
		bitwiseOrName: "Bitwise Or",
		bitwiseOrSnip: "İki girdi rasterinin ikili değerleri üzerindeki Bitwise Or işlemi uygular.",
		bitwiseOrDesc: "Fonksiyon, iki girdi rasterının ikili değerleri üzerinde bir Bitwise Or işlemi yapar. ",
		bitwiseRightShiftName: "Bitwise Right Shift",
		bitwiseRightShiftSnip: "İki girdi rasterının ikincil değerleri üzerine Bitwise Right Shift işlemi uygular.",
		bitwiseRightShiftDesc: "Fonksiyon, iki girdi rasterının ikili değerleri üzerinde bir Bitwise Right Shift işlemi yapar.",
		bitwiseXorName: "Bitwise Xor",
		bitwiseXorSnip: "İki girdi rasterin ikili değerleri üzerine Bitwise eXclusive Or işlemi uygular.",
		bitwiseXorDesc: "Fonksiyon, iki girdi rasterının ikili değerleri üzerinde bir Bitwise eXclusive Or işlemi yapar",
		booleanAndName: "Boolean And",
		booleanAndSnip: "İki girdi rasterının hücre değerlerinde bir Boolean And işlemi yapar. Her iki girdi değeri de doğruysa (sıfır dışı), çıktı değeri 1 olur. Bir veya her iki girdi de yanlışsa (sıfır), çıktı 0 olur.",
		booleanAndDesc: "Fonksiyon, iki girdi rasterının piksel değerleri üzerinde bir Boolean And işlemi yapar. Her iki girdi değeri de doğruysa (sıfır dışı), çıktı değeri 1 olur. Bir veya her iki girdi değeri de yanlışsa (sıfır), çıktı değeri 0 olur. ",
		booleanNotName: "Boolean Not",
		booleanNotSnip: "Bir girdi rasterının hücre değerlerinde bir Boolean Not (tamamlayıcı) işlemi yapar. Girdi değerleri doğruysa (sıfır dışı), çıktı değeri 0 olur. Girdi değerleri yanlışsa (sıfır), çıktı 1 olur.",
		booleanNotDesc: "Fonksiyon bir girdi rasterının piksel değerlerinde bir Boolean Not (tamamlayıcı) işlemi yapar. Girdi değerleri doğruysa (sıfır dışı), çıktı değeri 0 olur. Girdi değerleri yanlışsa (sıfır), çıktı değeri 1 olur.",
		booleanOrName: "Boolean Or",
		booleanOrSnip: "İki girdi rasterının hücre değerleri üzerinde bir Boolean Or işlemi yapar. Bir veya her iki girdi değeri de doğruysa (sıfır dışı), çıktı değeri 1 olur. Her iki girdi değeri de yanlışsa (sıfır), çıktı 0 olur.",
		booleanOrDesc: "Fonksiyon, iki girdi rasterının hücre değerleri üzerinde bir Boolean Or işlemi yapar. Bir veya her iki girdi değeri de doğruysa (sıfır dışı), çıktı değeri 1 olur. Her iki girdi değeri de yanlışsa (sıfır), çıktı değeri 0 olur.",
		booleanXorName: "Boolean Xor",
		booleanXorSnip: "İki girdi rasterının hücre değerleri üzerinde bir Boolean eXclusive Or işlemi yapar. Bir girdi değeri doğruysa (sıfır dışı) ve diğeri yanlışsa (sıfır), çıktı 1 olur. Her iki girdi değeri de doğru ya da yanlışsa, çıktı 0 olur.",
		booleanXorDesc: "Fonksiyon, iki girdi rasterının hücre değerleri üzerinde bir Boolean eXclusive Or işlemi yapar. Bir girdi değeri doğruysa (sıfır dışı) ve diğer değer yanlışsa (sıfır), çıktı değeri 1 olur. Her iki girdi değeri de doğru ya da yanlışsa, çıktı değeri 0 olur.",
		bufferedRasterName: "Tamponlu",
		bufferedRasterSnip: "En son erişilen piksel bloklarına tampon atar.",
		bufferedRasterDesc: "Tamponlu fonksiyonu, karmaşık fonksiyon zincirlerinin performansını optimum hale getirmek için kullanılır. Çıktıyı, kendisinden önce gelen fonksiyon zincirinin bir bölümüne kaydeder. <div><br/>Bu fonksiyonu, çıktıyı kaydetmek istediğiniz Fonksiyon Düzenleyici’ye ekleyin.</div>",
		rasterCalculatorName: "Hesaplayıcı",
		rasterCalculatorSnip: "Matematiksel ifadelere bağlı olarak bir rasterden başka bir raster hesaplar.",
		rasterCalculatorDesc: "Hesaplayıcı fonksiyonu, ifadeler oluşturmanıza, yürütmenize ve bunları fonksiyon zincirlerine dahil etmenize olanak sağlar.",
		cellStatisticsName: "Hücre İstatistikleri",
		cellStatisticsSnip: "Birden çok rasterdan hücre başına istatistikleri hesaplar. Mevcut istatistikler Çoğunluk, Maksimum, Ortalama, Medyan, Minimum, Azınlık, Yüzde, Aralık, Standart Sapma, Toplam ve Çeşitliliktir.",
		cellStatisticsDesc: "Bu fonksiyon, bir piksel-piksel tabanında birden fazla rasterdan istatistikleri hesaplar. Mevcut istatistikler çoğunluk, maksimum, ortalama, medyan, minimum, azınlık, aralık, standart sapma, toplam ve çeşitliliktir.",
		classifyName: "Sınıflandır",
		classifySnip: "Her pikseli bir sınıfa atar. Bölünmüş bir görüntü gibi ikincil verileri birleştirir.",
		classifyDesc: "Bu raster fonksiyonu bir raster veri kümesini Esri Sınıflandırma Tanımı (.ecd) dosyası ve raster veri kümesi girdilerini temel alarak sınıflandırır. Sınıflandırma fonksiyonunda kullanılan .ecd dosyası, belirli bir veri kümesi ve sınıflandırıcı için gerekli tüm bilgileri içerir ve Destek Vektörü Makinesi Sınıflandırıcısını Eğit veya Rastgele Ağaç Sınıflandırıcısını Eğit araçları gibi sınıflandırma eğitim araçları tarafından oluşturulur.",
		clipName: "Kırp",
		clipSnip: "Koordinatları ya da başka bir veri kümesini kullanarak bir rasterin yayılımını belirler.",
		clipDesc: "Bu fonksiyon, bir rasterı tanımlanan yayılıma göre dikdörtgen bir şekil kullanarak veya bir girdi çokgen detay sınıfının şekline uygun olarak kırpar. Kırpmayı tanımlayan şekil, rasterın yayılımını veya rasterın içindeki bir alanı kırpabilir.",
		colorspaceConversionName: "Renk Modeli Çevirme",
		colorspaceConversionSnip: "Bir rasterı RGB'den HSV'ye ve tersine dönüştürür.",
		colorspaceConversionDesc: "Renk Modeli Dönüştürme fonksiyonu, görüntünün renk modelini renk tonu, doygunluk ve değer (HSV) renk alanından kırmızı, yeşil ve maviye (RGB) dönüştürür ve tam tersi de geçerlidir.<div><br/>Bu fonksiyon, mozaik veri kümesinde kullanılabilir.</div>",
		colormapToRGBName: "RGB den Renkli Haritaya",
		colormapToRGBSnip: "Bir renk haritası olan tek bantlı bir rasterı, üç bantlı (kırmızı, yeşil ve mavi) bir rastera dönüştürür.",
		colormapToRGBDesc: "Bu fonksiyon, tek bantlı rasterları renk eşlemeli, üç bantlı (kırmızı, yeşil ve mavi) rasterlara dönüştürür.<div><br/>Bu fonksiyon, ilişkili bir renk haritasına sahip tek bantlı bir rasterdan üç bantlı bir raster oluşturmanız gerektiğinde kullanışlıdır. Her kırmızı, yeşil ve mavi bandı oluşturmak için renk haritasındaki değerler kullanılır. Bu fonksiyon mozaik veri kümesinde kullanılabilir.</div>",
		colormapName: "Renk Haritası",
		colormapSnip: "Piksel değerlerini, raster verilerini bir renk haritasına veya bir renk tayfına göre gri tonlamalı veya kırmızı, yeşil, mavi (RGB) bir görüntü olarak gösterecek şekilde değiştirir.",
		colormapDesc: "Renk Haritası fonksiyonu raster veri işleyicinin bir türüdür. Raster verilerini bir gri tonlama veya renkli bir şema veya bir renk haritası dosyasındaki belirli renkleri temel alan bir RGB renkli görüntü olarak görüntülemek için piksel değerlerini dönüştürür. Sınıflandırılmış görüntü gibi analiz edilmiş verileri göstermek için veya bir topografik haritayı (veya indeks renkli taranmış bir görüntüyü) görüntülerken bir renk haritası kullanabilirsiniz.<div><br/>Renk haritaları, tek bantlı bir rasterı aynı renklerle tutarlı bir şekilde görüntülemek için kullanılan renklerle ilişkili bir dizi değer içerir. Her piksel değeri, bir RGB değerler kümesi olarak tanımlanan bir renkle ilişkilendirilir. Renk haritaları, kayan nokta hariç herhangi bir bit derinliğini destekleyebilir. Ayrıca pozitif ve negatif değerleri destekler ve eksik renk eşlemeli değerler içerebilirler. Eksik değerleri içeren bir renk haritasına sahip bir veri kümesini görüntülerken, bu eksik değerleri içeren pikseller gösterilmez.</div>",
		complexName: "Karmaşık",
		complexSnip: "Karmaşık sayılardan genliği çıkarır.",
		complexDesc: "Bu fonksiyon karmaşık değerlerden büyüklüğü hesaplar.<div><br/>Bu fonksiyon tipik olarak karmaşık bir RADAR görüntüsü ile kullanılır. Bu fonksiyon mozaik veri kümesinde kullanılabilir.</div>",
		compositeBandName: "Bileşik Bantlar",
		compositeBandSnip: "Birden çok veri kümesini çok bantlı rasterda bir araya getirir.",
		compositeBandDesc: "Kompozit Bantlar fonksiyonu bir çoklu bant görüntüsü oluşturmak için rasterları birleştirmenize izin verir.",
		conName: "Con",
		conSnip: "Önce koşullu Eğer, Ardından, Ayrıca işlemi yapar. Bir Con operatörü kullanıldığında genellikle, bir fonksiyonun kriterleri belirttiği ve ikinci fonksiyonun kriterleri kullanan ve doğru ve yanlış çıktıların ne olacağını belirleyen Con operatörü olduğu iki veya daha fazla fonksiyonun birbirine bağlanması gerekir.",
		conDesc: "Con fonksiyonu, her girdi pikselinin bir if\\else (eğer\\değilse) değerlendirmesine dayanarak çıktı rasterının piksellerini ayarlar. Koşullu değerlendirme doğru ise (1) Gerçek Rasterdan piksel değerleri döndürür veya koşullu değerlendirme yanlış (0) ise, Yanlış Rasterdan piksel değerleri döndürür. Bu kriterler, girdi Rasterı olacak mantıksal matematik fonksiyonunun çıktısı ile belirlenir.",
		constantName: "Sabit",
		constantSnip: "Tek bir piksel değeri ile sanal bir raster oluşturur.",
		constantDesc: "Bu fonksiyon, raster fonksiyon şablonlarında bir mozaik veri kümesini işlemek için kullanılabilecek tek bir piksel değerine sahip sanal bir raster oluşturur.<div><br/>Sabit değer, rasterdaki her piksel değeri için kullanılır.</div>",
		contourName: "Kontur",
		contourSnip: "Kontur çizgisi oluşturur.",
		contourDesc: "Kontur fonksiyonu, raster yükseklik veri kümesinde aynı yükseklikteki noktaları birleştirerek kontur çizgileri oluşturur. Konturlar, görselleştirme için raster olarak oluşturulan eşdeğer çizgilerdir. Aşağıdaki temel özellikler bu fonksiyonu güçlendirir: konturlar, Dünya Yüksekliği gibi çok büyük veri kümelerinde hızlı ve dinamik bir şekilde oluşturulur; konturların doğruluklarını korurken, kartografik olarak göze daha hoş görünecek bir görünüm sağlayacak şekilde düzeltilebilir; kontur aralığı üzerinde dinamik kontrol sağlanır; çıktı seçenekleri arasında kontur çizgileri, indeks konturları ve doldurulmuş konturlar bulunur.<div><br/>Kontur katmanının bir raster ürünü olarak oluşturulması, konturlar bir harita üzerine yerleştirilebildiği ve altta yatan verileri gizlemeden arazi ile ilgili bilgi sağlayabildiği için çok sayıda uygulamada kullanışlıdır. Mühendislik, tarım ve su yönetimi gibi uygulamalarda kullanışlıdırlar.</div>",
		contrastBrightnessName: "Kontrast ve Parlaklık",
		contrastBrightnessSnip: "Bir rasterin kontrastını ve parlaklığını ayarlar.",
		contrastBrightnessDesc: "Kontrast ve Parlaklık fonksiyonu, görüntüdeki parlaklığı ve kontrastı değiştirerek raster verilerinin görünümünü iyileştirir. Parlaklık, örneğin koyu renkleri daha açık ve açık renkleri—daha beyaz hale getirerek görüntünün genel parlaklığını artırır;—zıtlık ise en koyu ve en açık renkler arasındaki farkı ayarlar.<div><br/>Bu fonksiyonu kullanmak, piksel değerlerini değiştirir; bu nedenle bu fonksiyon, verilerin görünümünü geliştirmek istediğinizde kullanılmalı ve verileri ham piksel değerlerini gerektiren bir analizin parçası olarak kullanmayı düşünüyorsanız kullanılmalıdır. Bu fonksiyon, verileri görüntülerin kontrast ve parlaklığını değiştirme becerisi olmadan uygulamalarda kullanılabilecek bir görüntü servisi olarak yayınlarken veya tercih ettiğiniz ayarları kullanarak görüntülemesini sağlamak için kullanışlıdır.</div>",
		convolutionName: "Konvelüsyon",
		convolutionSnip: "Bir raster boyunca kenarları keskinleştirmek, bulanıklaştırmak, pürüzsüz ya da dereceli hale getirmek için bir filtre uygular.",
		convolutionDesc: "Konvolüsyon fonksiyonu, görüntüyü netleştirmek, görüntüyü bulanıklaştırmak, görüntü içindeki kenarları algılamak veya diğer çekirdek tabanlı geliştirmeler için kullanılabilecek bir görüntüdeki piksel değerlerine filtre uygular. Filtreler, sahte verileri ortadan kaldırarak veya verilerdeki detayları geliştirerek raster görüntüsünün kalitesini iyileştirmek için kullanılır. Bu konvolüsyon filtreleri, 3’e 3 gibi hareketli, üst üste binen bir çekirdeğe (pencere veya komşuluk) uygulanır. Konvolüsyon filtreleri, komşularının ağırlıklarını temel alan piksel değerini hesaplayarak çalışır.",
		corridorName: "Koridor",
		corridorSnip: "İki girdi birikimli rasterın birikimli maliyetleri toplamını hesaplar.",
		corridorDesc: "Koridor fonksiyonu, iki girdi birikimli maliyet rasterlarının birikimli maliyetleri toplamını hesaplar. Girdi için herhangi bir iki raster kullanılabilirken, anlamlı bir sonuç elde etmek için bunların toplam maliyet çıktı rasterları değiştirilmemelidir. İki girdinin sırası ilgisizdir.",
		cosHName: "CosH",
		cosHSnip: "Rasterdaki hücrelerin hiperbolik kosünüsünü hesaplar.",
		cosHDesc: "Fonksiyon, bir rasterdaki piksellerin hiperbolik kosinüsünü hesaplar.",
		cosName: "Kos",
		cosSnip: "Bir rasterdaki hücrenin kosinüsünü hesaplar.",
		cosDesc: "Fonksiyon, bir rasterdaki piksellerin kosinüsünü hesaplar.",
		costAllocationName: "Maliyet Atama",
		costAllocationSnip: "Maliyet yüzeyi üzerindeki en düşük birikimli maliyete göre her hücre için en düşük maliyetli kaynağı hesaplar.",
		costAllocationDesc: "Maliyet Atama fonksiyonu bir maliyet yüzeyindeki en düşük kümülatif maliyeti temel alarak her hücrenin en düşük maliyetli kaynağını hesaplar.",
		costBackLinkName: "Düşük Maliyetli Hat",
		costBackLinkSnip: "En düşük maliyetli kaynağa giden en az birikimli maliyet yolundaki bir sonraki hücre olan komşuyu tanımlar.",
		costBackLinkDesc: "Düşük Maliyetli Hat fonksiyonu, en düşük maliyetli kaynağa giden en düşük kümülatif maliyet yolundaki bir sonraki hücre olan komşuyu tanımlar.<div><br/>Geri bağlantı rasterı, bir hücreden en düşük maliyetli kaynağa ulaşmak için en az birikimli maliyet yolu boyunca yönü veya bir sonraki komşu hücreyi (takip eden hücre) tanımlayan sıfır ila sekiz değerlerini içerir. Yol sağ komşuya geçiyorsa, hücreye sağ alt köşegen hücre için 1, 2 değeri atanır ve bu atama saat yönünde devam eder. Kaynak hücreleri için 0 değeri ayrılmıştır.</div>",
		costDistanceName: "Maliyet Mesafesi",
		costDistanceSnip: "Maliyet yüzeyindeki her bir hücre için en düşük maliyetli kaynaktan ya da kaynağa olan en düşük birikimli maliyet mesafesini hesaplar.",
		costDistanceDesc: "Maliyet Mesafesi fonksiyonu, bir maliyet yüzeyi genelinde her hücrenin kaynaktan veya kaynağa olan en düşük kümülatif maliyet mesafesini hesaplar.",
		costPathName: "Maliyet Yolu",
		costPathSnip: "Kaynaktan hedefe en az maliyet yolunu hesaplar.",
		costPathDesc: "Global Maliyet Yolu fonksiyonu, kaynaktan hedefe olan en düşük maliyetli yolu hesaplar.<div><br/>Bu fonksiyon, seçili konumlardan birikimli maliyet yüzeyinde tanımlanan en yakın kaynak hücresine en düşük maliyet yolu veya yollarını maliyet mesafesi açısından kaydeden bir çıktı rasterı üretir.</div>",
		curvatureName: "Eğrilik",
		curvatureSnip: "Bir raster yüzeyinin eğriliğini hesaplar ve isteğe bağlı olarak profili ve plan eğriliğini dahil eder.",
		curvatureDesc: "Eğrilik fonksiyonu eğimin şeklini veya eğriliğini gösterir. Bir yüzeyin bir kısmı içbükey veya dışbükey olabilir; bunu eğrilik değerine bakarak söyleyebilirsiniz. Eğrilik, yüzeyin ikinci türevi hesaplanarak bulunabilir.<div><br/>Eğrilik fonksiyonunun çıktısı, erozyon ve akış süreçlerini anlamak amacıyla bir drenaj havzasının fiziksel özelliklerini tanımlamak için kullanılabilir. Eğrilik değeri, toprak erozyon düzenlerinin yanı sıra suyun karadaki dağılımını bulmak için de kullanılabilir. Profil eğriliği, akışın hızlanmasını ve yavaşlamasını ve dolayısıyla erozyonu ve birikmeyi etkiler. Platform eğriliği akışın yakınlaşmasını ve uzaklaşmasını etkiler.</div>",
		divideName: "Bölme",
		divideSnip: "Hücre-hücre temeli üzerinde iki rasterın değerlerini böler.",
		divideDesc: "Bölme fonksiyonu iki rasterın değerlerini piksel-piksel tabanında böler.",
		elevationVoidFillName: "Yükseklik Boşluk Dolgusu",
		elevationVoidFillSnip: "Yükselti verinizde delik olan yerlerde pikseller oluşturur.",
		elevationVoidFillDesc: "Yükseklik Boşluk Dolgusu fonksiyonu yükseltide deliklerin bulunduğu yerlerde pikseller üretmek için kullanılır.<div><br/>Sonuç rasterında bir pikselle gösterilen alan içinde nokta toplanmazsa boşluk oluşur. Boşluklar genel olarak su kütleleri, sınıf türü seçimi veya dışarıda bırakma neden olur. Boşluk doldurma genellikle bir zemin yüzeyi oluşturulurken kullanılır.</div>",
		equalToName: "Eşittir",
		equalToSnip: "Hücre-hücre tabanında iki girdiye İlişkisel bir eşittir işlemi uygular. Birinci rasterın ikinci rastera eşit olduğu hücreler için 1 ve eşit olmadığı hücreler için 0 döndürür.",
		equalToDesc: "Fonksiyon, piksel-piksel tabanında iki raster üzerinde bir eşittir işlemi yapar. Birinci rasterın ikinci rastera eşit olduğu pikseller için 1 değerini ve eşit olmadıkları pikseller için 0 değerini döndürür.",
		eucAllocationName: "Öklid Dağıtımı",
		eucAllocationSnip: "Her hücre için Öklid uzaklığına göre en yakın kaynağı hesaplar.",
		eucAllocationDesc: "Öklid Dağıtımı fonksiyonu her hücre için Öklid mesafesine göre en yakın kaynağı hesaplar.",
		eucDirectionName: "Öklid Doğrultusu",
		eucDirectionSnip: "Her hücre için en yakın kaynağa olan yönü derece olarak hesaplar.",
		eucDirectionDesc: "Öklid Doğrultusu fonksiyonu her hücre için en yakın kaynağa olan derece cinsinden yönü hesaplar. <div><br/>Doğrultu, her hücre merkezinden kendisine en yakın kaynağın merkezine doğru hesaplanır. Değer aralığı 0 derece 360 derece arasıdır ve kaynak hücreler için 0 ayrılmıştır. Doğu (sağ) 90’dır ve değerler saat yönünde artar (180 güney, 270 batı ve 360 kuzey).</div>",
		eucDistanceName: "Öklid Mesafesi",
		eucDistanceSnip: "Her hücre için en yakın kaynağa olan Öklid mesafesini hesaplar.",
		eucDistanceDesc: "Öklid Mesafesi fonksiyonu her hücre için en yakın kaynağa Öklid mesafesini hesaplar.",
		exp10Name: "Üs 10",
		exp10Snip: "Rasterdaki hücrenin temel 10 üssünü hesaplar.",
		exp10Desc: "Exp 10 fonksiyonu, bir rasterdaki piksellerin temel 10 üssünü hesaplar.",
		exp2Name: "Üs 2",
		exp2Snip: "Rasterdaki hücrenin temel 2 üssünü hesaplar.",
		exp2Desc: "Bu fonksiyon, bir rasterdaki piksellerin temel 2 üssünü hesaplar.",
		expName: "Üs",
		expSnip: "Rasterdaki hücrenin temel e üssünü hesaplar.",
		expDesc: "Bu fonksiyon, bir rasterdaki piksellerin temel e üssünü hesaplar.",
		extractBandName: "Bantları Çıkar",
		extractBandSnip: "Çok bantlı veri kümeleri kullanılırken hangi bantların çalışacağını belirler.",
		extractBandDesc: " Bantları Çıkar fonksiyonu çok bantlı raster veri kümesinden bir veya daha fazla bant çıkarmaya ve küme içindeki bantları yeniden sıralamaya olanak tanır.<div><br/>Bir sonraki fonksiyonda hangi bantların girdi olarak kullanılacağını kontrol etmek için Aritmetik fonksiyon gibi fonksiyonlardan önce Bantları Çıkar fonksiyonunu kullanabilirsiniz.</div>",
		fillName: "Dolgu",
		fillSnip: "Verideki küçük eksikleri kaldırmak için yüzey rasterındaki çukurları doldurur.",
		fillDesc: "Global Dolgu fonksiyonu, verilerdeki küçük kusurları ortadan kaldırmak için bir yükselti yüzeyi rasterındaki çukurları ve çıkıntıları bulur ve doldurur. Fonksiyon, belirtilen Z Sınırı içindeki tüm çukurlar doldurulana kadar yinelemeli bir süreç içinde dolgu yapar.<div><br/>Orto Harita Oluşturma araçları veya diğer araçlarla bir yükselti yüzeyi oluşturulduğunda, verilerde çukur ve çıkıntı gibi küçük ancak önemli hatalar meydana gelir. Fotogrametride, çukurlar ve çıkıntılar genellikle delikler ve tepeler olarak adlandırılır. Yüzey verileri genellikle hidrolojik modelleme gibi modelleme işlemlerinde kullanıldığından, bu çukur ve çıkıntıları çevresindeki verilerle tutarlı olacak şekilde düzeltmek önemlidir.</div>",
		floatName: "Float",
		floatSnip: "Bir rasterın her bir hücre değerini bir kayan nokta sunumuna dönüştürür.",
		floatDesc: "Float fonksiyonu bir rasterın her bir piksel değerini bir kayan nokta sunumuna dönüştürür.",
		flowAccumulationName: "Akış Toplanması",
		flowAccumulationSnip: "Her hücre içinde bir birikimli akış rasterı oluşturur. İsteğe bağlı olarak bir ağırlık faktörü de uygulanabilir.",
		flowAccumulationDesc: "Akış Biriktirme global fonksiyonu her pikselin içinde, eğim aşağı pikselin içine akan tüm piksellerin ağırlıkları toplanarak belirlenen bir birikimli akış rasterı oluşturur. Ağırlık rasterı verilmezse, her piksele 1 ağırlığı uygulanır ve çıktı rasterındaki piksellerin değeri her pikselin içine akan piksel sayısı olur.<div><br/>Yüksek akış birikimli çıktı pikselleri yoğun akış alanlarıdır ve akım kanallarını belirlemede kullanılır. Sıfır akış birikimli çıktı pikselleri yerel topografik yüksekliklerdir ve tepeleri belirlemek için kullanılabilirler.</div>",
		flowDirectionName: "Akış Doğrultusu",
		flowDirectionSnip: "En dik inen azalan eğim komşusu için her hücreden akış doğrultusunun rasterını oluşturur.",
		flowDirectionDesc: "Bir yüzeyin hidrolojik özelliklerini elde etmenin anahtarlarından biri, rasterdaki her pikselden akış yönünü belirleme becerisidir. Akış Doğrultusu raster fonksiyonu girdi olarak bir yüzey alır ve her pikselden en dik aşağı eğim komşusuna kadar akış doğrultusu rasterı oluşturur. Akış Doğrultusu fonksiyonu, üç akış modelleme yöntemini destekler: D8 (sekiz doğrultu), Çok Akış Doğrultusu (MFD) ve D-Infinity (DINF). ",
		flowDistanceName: "Akış Mesafesi",
		flowDistanceSnip: "Her hücre için hücrelerin aktıkları bir akarsu veya nehir üzerindeki hücreye/hücrelere minimum eğimli yatay veya dikey mesafeyi hesaplar.",
		flowDistanceDesc: "Her piksel için fonksiyon, içinde aktıkları nehir veya akarsu üzerindeki pikselin (piksellerin) minimum aşağı eğim doğru yatay veya dikey mesafesini hesaplar. İsteğe bağlı bir akış doğrultusu rasterı verilirse, aşağı eğim doğrultusu girdi akış doğrultusu rasterı tarafından tanımlananla sınırlandırılır. Çıktı, akış mesafesi rasterıdır.",
		focalName: "Odak İstatistikleri",
		focalSnip: "Tanımlı bir odaksal komşuya dayanan görüntünün her bir pikseli için odak istatistiklerini hesaplar.",
		focalDesc: "Odak İstatistikleri fonksiyonu, tanımlı bir odaksal komşuya dayanan görüntünün her bir pikseli için odak istatistiklerini hesaplar.",
		geometricName: "Geometrik",
		geometricSnip: "Bir veri kümesinin konumsal doğruluğunu yükselti için hesaplama yaparak artırır.",
		geometricDesc: "Geometri fonksiyonu, bir sensör tanımına ve bir arazi modeline dayanarak ortorektifiye işlemi tamamlanmış bir görüntü üretir. Yüksekliği hesaba katarak veri kümesinin konumsal doğruluğunu arttırır.",
		grayscaleName: "Gri Tonlamalı",
		grayscaleSnip: "Bir çok bantlı görüntüyü tek bantlı gri ölçekli görüntüye dönüştürür.",
		grayscaleDesc: "Bu fonksiyon bir çok bantlı görüntüyü tek bantlı gri ölçekli görüntüye dönüştürür.<div><br/>Bu fonksiyon, girdi bantlarının her birine belirtilen ağırlıkları uygular ve çıktı görüntüsünü normalleştirir. Bazı bantlar uygulamaya bağlı olarak değişken öneme sahip olduğundan ağırlıklar sıklıkla uygulanır. Örneğin, mavi bant genellikle diğer bantlardan daha fazla parazit içerir.</div>",
		greaterThanEqualName: "Büyük Eşit",
		greaterThanEqualSnip: "Hücre-hücre tabanında iki girdiye İlişkisel bir büyük-eşittir işlemi uygular. Birinci rasterın ikinci rastera büyük-eşit olduğu yerde hücreler için 1 ve eşit olmadığı hücreler için 0 döndürür.",
		greaterThanEqualDesc: "Fonksiyon, piksel-piksel tabanında iki raster üzerinde bir İlişkisel büyük-eşittir işlemi yapar. Birinci rasterın ikinci rasterdan daha büyük veya ona eşit olduğu pikseller için 1 değerini ve birinci rasterın ikinci rasterdan büyük veya ona eşit olmadığı pikseller için 0 değerini döndürür.",
		greaterThanName: "Büyüktür",
		greaterThanSnip: "Hücre-hücre tabanında iki girdiye İlişkisel bir büyüktür işlemi uygular. Birinci rasterın ikinci rasterdan büyük olduğu hücreler için 1 ve eşit olmadığı hücreler için 0 döndürür.",
		greaterThanDesc: "Fonksiyon, piksel-piksel tabanında iki girdi üzerinde bir İlişkisel büyüktür işlemi yapar. Birinci rasterın ikinci rasterdan daha büyük olduğu pikseller için 1 değerini ve birinci rasterın ikinci rasterdan büyük olmadığı pikseller için 0 değerini döndürür.",
		heatIndexName: "Isı İndeksi",
		heatIndexSnip: "Ortam hava sıcaklığını ve bağıl nemi birleştirerek görünen sıcaklık değerini verir.",
		heatIndexDesc: "Bu fonksiyon, ortam sıcaklığı ve bağıl neme bağlı olarak görünen sıcaklığı hesaplar. Görünen sıcaklık genellikle insan vücuduna ne kadar sıcak geldiğini ifade eder.<div><br/>Bu indeks, kas krampları, dehidrasyon, sıcak yorgunluğu veya sıcak ve nemli günlerde sıcak çarpması gibi tıbbi konularla ilgili tehlikelerin hesaplanmasında faydalı olabilir. Bağıl nem yüksek olduğunda vücut terinin buharlaşması giderek zorlaşır ve insanların doğal yoldan serinleyememesine neden olur. Isı tavsiye veya uyarı haritaları genellikle ısı endeksi sonucunun yeniden sınıflandırılmasının bir ürünüdür; burada indeks değeri ne kadar yüksek olursa, tavsiyenin uyarıya dönüşme olasılığı da o kadar yüksek olur.</div>",
		hillshadeName: "Kabartma",
		hillshadeSnip: "Kabartma fonksiyonu, görüntünün gölgelendirilmesinde güneşin göreceli konumunu dikkate alarak yüzeyin 3B gösterimini oluşturur",
		hillshadeDesc: "Kabartma fonksiyonu, görüntünün gölgelendirilmesinde güneşin göreceli konumunu dikkate alarak arazi yüzeyinin gri tonlamalı 3B gösterimini oluşturur. <div><br/>Kabartma, bir ışık kaynağı tarafından belirlenen araziyi ve yükselti yüzeyinin eğimi ve bakısını görselleştirmek için kullanılan bir tekniktir. Topografyayı görselleştirmek için niteliksel bir yöntemdir ve mutlak yükseklik değerleri vermez. </div>",
		intName: "Tamsayı",
		intSnip: "Bir rasterdan gelen her hücre değerini kısaltarak bir tam sayıya dönüştürür.",
		intDesc: "Tamsayı fonksiyonu bir rasterdan gelen her piksel değerini kısaltarak bir tam sayıya dönüştürür.",
		interpolateIrregularDataName: "Düzensiz Verileri Hesapla",
		interpolateIrregularDataSnip: "Nokta bulutlarından veya düzensiz kılavuzlardan enterpolasyon yapar.",
		interpolateIrregularDataDesc: "Bazı netCDF veya HDF veri kümeleri coğrafi konumlarını düzensiz aralıklı piksel veya nokta verileri dizisi olarak saklar. Bu veri kümelerini bir mozaik veri kümesine eklerken düzensiz verileri hesapla fonksiyonu düzensiz gridli verileri alır ve her pikselin tek biçimli ve kare olacağı şekilde yeniden örnekler.<div><br/>netCDF veya HDF’den mozaik veri kümesine değişkenler eklerken, verilerin düzenli olarak dizilip dizilmediğini otomatik olarak doğrular. Değilse, düzensiz verileri hesapla fonksiyonu düzensiz verileri düzenli gridli bir rastera dönüştürmek için kullanılabilir. Hesaplama yöntemini ve düzensiz verileri hesapla raster fonksiyonunda kullanılan hücre boyutunu değiştirebilirsiniz. Düzenli aralıklı raster verileri için hesaplama uygulanmayacak ve veriler olduğu gibi okunacaktır.</div>",
		isNullName: "Is Null",
		isNullSnip: "Girdi rasterlarından hangi değerlerin hücre-hücre tabanında NoData olduğunu belirler. Girdi değeri NoData ise 1 değeri ve NoData olmayan hücreler için 0 değeri döndürür.",
		isNullDesc: "Null fonksiyonu, girdi rasterından piksel-piksel tabanında hangi değerlerin NoData olduğunu belirler. Girdi değeri NoData ise 1 değeri ve NoData olmayan pikseller için 0 değeri döndürür.",
		kernelDensityName: "Kernel Yoğunluğu",
		kernelDensitySnip: "Düzgün biçimde değiştirilmiş bir yüzeyi her nokta veya çoklu çizgiye sığdırmak için bir Kernel fonksiyonu kullanarak nokta veya çoklu çizgi detaylarından birim başına alan büyüklüğünü hesaplar.",
		kernelDensityDesc: "Bu fonksiyon, düzgün biçimde değiştirilmiş bir yüzeyi her nokta veya çoklu çizgiye sığdırmak için bir çekirdek fonksiyonu kullanarak nokta veya çoklu çizgi detaylarından birim başına alan büyüklüğünü hesaplar.",
		keyMetadataName: "Önemli Meta Veriler",
		keyMetadataSnip: "Bir fonksiyon zincirine rasterın ana meta verilerini ekler veya bunları geçersiz kılar.",
		keyMetadataDesc: "Bu fonksiyon bir rasterın anahtar meta verilerini girmenize veya üzerine yazmanıza olanak verir.<div><br/>Anahtar meta verilerindeki bilgiler, sensör adı, bant adları veya görüntülerle ilişkilendirilmiş bulut örtüsü gibi bazı kullanışlı bilgiler de dahil olmak üzere, uygulamaya bazı işleme ve görüntü oluşturma işlemlerinde yardımcı olmak için kullanılır.</div>",
		shortestPathName: "En Düşük Maliyetli Yol",
		shortestPathSnip: "Kaynak ve hedef girdilerini kullanarak bir maliyet mesafesi analizi gerçekleştirir; bu, daha sonra bir kaynaktan hedefe en düşük maliyetli yolu belirlemek için kullanılır.",
		shortestPathDesc: "En Düşük Maliyet Yolu fonksiyonu, kaynaktan hedefe olan en düşük maliyetli yolu hesaplar. En düşük birikimli maliyet mesafesi, her bir piksel için maliyet yüzeyindeki en yakın kaynağa kadar hesaplanır. Seçili konumlardan birikimli maliyet yüzeyinde tanımlanan en yakın kaynak pikseline en düşük maliyet yolu veya yollarını maliyet mesafesi açısından kaydeden bir çıktı rasterı üretir.<div><br/>Tarama işleminde karşılaşıldığında her bir en düşük maliyet yoluna bir değer atanır. Maliyet yolunun Kaynak Rasterı üzerindeki son piksel 1 değerini alır. İlk yol 3, ikinci 4 değerini alır ve böyle devam eder. Birden fazla yol birleşip kalan mesafeyi aynı rota üzerinde kaynağına kadar izlediğinde, iki yolun birlikte hareket ettiği bölüme 2 değeri atanır. Birleştirilmiş kısım her iki yola da ait olduğundan yolun birleştirilmiş kısmı yollardan birinin değerine atanamaz.</div>",
		lessThanEqualName: "Küçük Eşit",
		lessThanEqualSnip: "Hücre-hücre tabanında iki girdiye İlişkisel bir küçük-eşittir işlemi uygular. Birinci rasterın ikinci rastera küçük-eşit olduğu yerde hücreler için 1 ve eşit olmadığı hücreler için 0 döndürür.",
		lessThanEqualDesc: "Fonksiyon, piksel-piksel tabanında iki raster üzerinde bir İlişkisel küçük-eşittir işlemi yapar. Birinci rasterın ikinci rasterdan daha küçük veya ona eşit olduğu pikseller için 1 değerini ve ikinci rasterdan küçük veya ona eşit olmadığı pikseller için 0 değerini döndürür.",
		lessThanName: "Küçüktür",
		lessThanSnip: "Hücre-hücre tabanında iki girdiye İlişkisel bir küçüktür işlemi uygular. Birinci raster ikinci rasterdan daha azsa hücreler için 1 e ve değilse 0 a döner.",
		lessThanDesc: "Fonksiyon, piksel-piksel tabanında iki raster üzerinde bir İlişkisel küçüktür işlemi yapar. Birinci rasterın ikinci rasterdan daha küçük olduğu pikseller için 1 değerini ve ikinci rasterdan küçük olmadığı pikseller için 0 değerini döndürür.",
		lnName: "Ln",
		lnSnip: "Rasterdaki hücrelerin doğal logaritmasını (e tabanlı) hesaplar.",
		lnDesc: "Ln fonksiyonu, bir rasterdaki her pikselin doğal logaritmasını (e tabanlı) hesaplar.",
		log10Name: "Log10",
		log10Snip: "Rasterdaki hücrelerin taban 10 logaritmasını hesaplar.",
		log10Desc: "Log10 fonksiyonu, bir rasterdaki her pikselin temel 10 logaritmasını hesaplar.",
		log2Name: "Log2",
		log2Snip: "Rasterdaki hücrelerin taban 2 logaritmasını hesaplar.",
		log2Desc: "Log2 fonksiyonu, bir rasterdaki her pikselin temel 2 logaritmasını Hesaplar.",
		lookupName: "Arama",
		lookupSnip: "Girdi raster tablosundaki başka alanda bulunan değerleri arayarak yeni bir raster yaratır.",
		lookupDesc: "Fonksiyon, girdi raster tablosundaki başka alanda bulunan değerleri arayarak yeni bir raster yaratır.",
		mlClassifyName: "ML Sınıflandır",
		mlClassifySnip: "Piksel başına yaklaşımı kullanarak görüntüyü sınıflandırır. Karışık pikseller detaya piksel içindeki en yüksek yüzde ile atanır.",
		mlClassifyDesc: "ML Sınıflandır fonksiyonu, bir raster veri kümesi veya mozaik veri kümesinde maksimum benzerlik sınıflandırma algoritmasını kullanarak denetimli bir sınıflandırma yapmanıza olanak sağlar. Bu fonksiyon bir sınıflandırma imza dosyası gerektirir.",
		maskName: "Maske",
		maskSnip: "Görüntülemek istemediğiniz değerleri belirler.",
		maskDesc: "Bu raster fonksiyonu rasterda görüntülemek istemediğiniz değerleri ayarlar. Maske fonksiyonunu kullanarak bir veya daha fazla NoData değeri veya geçerli piksel değerleri aralığı belirtirsiniz. ",
		minusName: "Çıkar",
		minusSnip: "İkinci girdi rasterinin değerini birinci girdi rasterinin değerinden bir hücre-hücre temelinde çıkarır.",
		minusDesc: "Çıkar fonksiyonu, piksel-piksel tabanında ikinci girdi rasterının değerini birinci girdi rasterının değerinden çıkarır.",
		modName: "Mod",
		modSnip: "Bir hücre-hücre temelinde ikinci raster ile bölündüğünde birinci rasterin kalanını (modulo) bulur.",
		modDesc: "Mod fonksiyonu, piksel-piksel tabanında ikinci raster ile bölündüğünde birinci rasterın kalanını (modulo) bulur. Girdilerin sırası önemlidir ve çıktı sonucunu etkiler.",
		mosaicRastersName: "Mozaik Rasterları",
		mosaicRastersSnip: "Bir veri kümesi oluşturmak için bir raster veri kümesi setini birleştirir.",
		mosaicRastersDesc: "Mozaik Rasterları fonksiyonu birden fazla görüntüden bir mozaik görüntüsü oluşturur. Görüntüler arasında çakışma olduğunda, hangi resimlerin görüntüleneceğini belirlemek için seçebileceğiniz birkaç yöntem vardır.",
		ndviColorizedName: "NDVI Renklendirilmiş",
		ndviColorizedSnip: "Kırmızı ve kızıl ötesine yakın bantlar arasındaki farka dayanarak bitki örtüsünün sağlığını temsil eden bir çok bantlı veri kümesi oluşturur.",
		ndviColorizedDesc: "NDVI Renklendirilmiş fonksiyonu, NDVI fonksiyonunu girdi görüntüsüne uygular ve ardından bir renk haritası veya renk rampası kullanarak sonucu görüntüler.",
		ndviName: "NDVI",
		ndviSnip: "Normalleştirilmiş Fark Bitki Örtüsü İndeksini (NDVI) hesaplar.",
		ndviDesc: "NDVI fonksiyonu, kırmızı ve yakın kızılötesi bantlar arasındaki farka dayanarak bitki sağlığını temsil eden tek bir bant veri kümesi oluşturur.<div><br/>NDVI, standartlaştırılmış bir indekstir ve relatif biyokütle olarak da bilinen yeşilliği gösteren bir görüntü oluşturmanıza olanak tanır. Bu indeks, çoklu spektral raster veri kümesinden gelen iki bant arasındaki kontrast özelliklerinin avantajını kullanır; kırmızı banttaki klorofil pigmenti emilimleri ve kızılötesine yakın (NIR) bandındaki bitki malzemelerinin yüksek yansıma özelliği. Son derece düşük veya negatif NDVI değerleri, bulut, su veya kar gibi bitki örtüsü olmayan alanları temsil eder. Çok düşük değerler, beton, kaya veya çıplak toprak gibi bitki örtüsü az ya da hiç olmayan alanları temsil eder. Orta değerler fundalık ve çayır alanlarını temsil eder. Yüksek değerler orman alanlarını ve gür bitki örtüsünü temsil eder.</div>",
		negateName: "Negatif Yap",
		negateSnip: "Girdi rasterinin hücre değerlerinin işaretini (-1 ile çarpılır) hücre-hücre temelinde değiştirir.",
		negateDesc: "Negatif Yap fonksiyonu, bir pikseldeki girdi rasterının piksel değerlerinin işaretini (-1 ile çarpılır) değiştirir ",
		nibbleName: "Küçük Parça",
		nibbleSnip: "En yakın komşularının değeri ile maskeye uyumlu alan raster hücrelerini tekrar yer değiştirir.",
		nibbleDesc: "Küçük Parça global fonksiyonu seçilen raster alanlarının en yakın komşu değerine atanmasına olanak tanır. Bu, verilerin hatalı olabileceği raster alanlarını düzenlerken kullanışlıdır.",
		notEqualName: "Eşit Değil",
		notEqualSnip: "Hücre-hücre tabanında iki girişe İlişkisel bir eşit değildir işlemi uygular. Birinci raster ikinci rastera eşit olmadığı yerdeki hücreler için 1 e ve eşit olduğunda 0 a döner.",
		notEqualDesc: "Fonksiyon, piksel-piksel tabanında iki raster üzerinde bir İlişkisel eşit değildir işlemi yapar. Birinci rasterın ikinci rastera eşit olmadığı pikseller için 1 değerini ve ikinci rastera eşit olduğu pikseller için 0 değerini döndürür.",
		pansharpeningName: "Düzbelirginleştir",
		pansharpeningSnip: "Daha yüksek çözünürlüklü bir pankromatik görüntü ile kaynaştırma ile çok bantlı bir görüntünün mekansal çözünürlüğünü yapay olarak geliştirir.",
		pansharpeningDesc: "Düzbelirginleştir fonksiyonu, daha düşük çözünürlükle kaynaştırmak için daha yüksek çözünürlüklü bir pankromatik görüntü veya raster bant, çok bantlı görüntünün mekansal çözünürlüğünü artırmak için çok bantlı raster veri kümesi kullanır.<div><br/>Düz belirginleştirmenin amacı yüksek kaliteli bir görsel oluşturmaktır. Teknikler çok bantlı görüntüsünün radyometrisi ve spektral özelliklerini değiştirdiğinden, düz belirginleştirilmiş görüntüler analitik uzaktan algılama için dikkatli kullanılmalıdır.</div>",
		pathAllocationName: "Yol Mesafesi Dağıtımı",
		pathAllocationSnip: "Yüzey mesafesini ve yatay ve dikey maliyet faktörlerini hesaba katarken her hücre için bir maliyet yüzeyi genelinde en düşük kümülatif maliyete göre en düşük maliyetli kaynağı hesaplar.",
		pathAllocationDesc: "Yol Mesafesi Dağıtımı fonksiyonu yüzey mesafesini ve yatay ve dikey maliyet faktörlerini hesaba katarken, her hücre için bir maliyet yüzeyinde en düşük kümülatif maliyete göre en yakın kaynağı hesaplar.",
		pathBackLinkName: "Yol Mesafesi Geri Bağlantısı",
		pathBackLinkSnip: "Yüzey mesafesiyle birlikte yatay ve dikey maliyet faktörlerini hesaba katarken en düşük maliyetli kaynağa en düşük kümülatif maliyetli yol üzerinde bir sonraki hücre olan komşuyu tanımlar.",
		pathBackLinkDesc: "Yol Mesafesi Geri Bağlantısı fonksiyonu yüzey mesafesini ve yatay ve dikey maliyet faktörlerini dikkate alarak, en yakın kaynağa giden en düşük birikimli maliyete sahip yoldaki bir sonraki hücre olan komşunun yönlü olma durumunu tanımlar.",
		pathDistanceName: "Yol Mesafesi",
		pathDistanceSnip: "Yüzey mesafesiyle birlikte, yatay ve dikey maliyet faktörlerini hesaba katarken her hücre için en düşük maliyetli kaynağa ya da kaynaktan en düşük kümülatif maliyetli mesafeyi hesaplar.",
		pathDistanceDesc: "Yol Mesafesi fonksiyonunu yüzey mesafesini ve yatay ve dikey maliyet faktörlerini hesaba katarken her hücre için en yakın kaynağa en düşük kümülatif maliyetli mesafeyi hesaplar.",
		plusName: "Plus",
		plusSnip: "Hücre-hücre temeli üzerinde iki rasterin değerlerini ekler (toplar).",
		plusDesc: "Artı fonksiyonu iki rasterın değerlerini (toplamlarını) piksel-piksel tabanında ekler.",
		powerName: "Güç",
		powerSnip: "Diğer rasterde bulunan değerlerin üsteli için raster içindeki hücre değerlerini arttırır.",
		powerDesc: "Güç fonksiyonu bir rasterdaki hücre değerlerini başka bir rasterda bulunan değerlerin kuvvetine yükseltir.",
		radarCalibrationName: "Radar Kalibrasyonu",
		radarCalibrationSnip: "RADARSAT-2 geri saçılmayı dönüştürür.",
		radarCalibrationDesc: "Bu fonksiyon mozaik veri kümesinde veya bir raster ürün olarak RADARSAT-2 görüntülerini kalibre etmek için kullanılabilir. Kalibrasyon radar görüntülerinde, piksel değerleri radar geri göndericisinin gerçek bir temsili olacak şekilde gerçekleştirilir.",
		rasterInfoName: "Raster Bilgi",
		rasterInfoSnip: "Bit derinliği, NoData değeri, hücre boyutu vb. gibi raster özelliklerini değiştirir.",
		rasterInfoDesc: "Raster Bilgisi, sütun ve satır sayısı, bant sayısı, piksel türü, kapsam ve mekansal referans gibi raster veri kümesi özelliklerini içeren bir iletişim kutusu açar. Şablon olarak kullanmak üzere bir raster veri kümesi seçerek bu özellikleri düzenleyebilirsiniz. ",
		rasterizeAttributesName: "Öznitelikleri Raster Haline Getir",
		rasterizeAttributesSnip: "Bir rasterı harici tablonun veya bir özellik servisinin belirtilen niteliklerinin değerlerinden türetilmiş ek bantlar yoluyla zenginleştirir.",
		rasterizeAttributesDesc: "Öznitelikleri Raster Haline Getir fonksiyonu bir rasterı harici tablodan veya bir özellik servisinin belirtilen niteliklerinin değerlerinden türetilmiş bantlar ekleyerek zenginleştirir. İsteğe bağlı olarak bölge tabanlı bir aramayı etkinleştirmek için bir bölge rasterını ve ilişkili bölge kimliği özniteliğini belirleyebilirsiniz.",
		rasterizeFeatureClassName: "Detayları Raster Haline Getir",
		rasterizeFeatureClassSnip: "Detayları rastera dönüştürür.",
		rasterizeFeatureClassDesc: "Bu fonksiyon çokgen, çoklu çizgi ve nokta detay sınıfı verilerini bir raster katmanına dönüştürür.<div><br/>Detaylar, detayların OBJECTID’sini (varsayılan) temel alan atanmış piksel değerleridir. İsteğe bağlı olarak piksel değerleri girdi detayının öznitelik tablosunda tanımlanan değer alanını temel alabilir.</div>",
		recastName: "Yeniden Biçimlendir",
		recastSnip: "Bir mozaik veri kümesindeki veya görüntü servisindeki bir fonksiyon zincirinin parametrelerini değiştirir. Bu, arazinin farklı gösterimleri için ayrı bir mozaik veri kümesi oluşturmak zorunda kalmamak için LAS veri kümeleriyle birlikte kullanılır.",
		recastDesc: "Yeniden Biçimlendir fonksiyonu, mozaik veri kümesinde veya görüntü servisinde kullanılan fonksiyon parametresini değişiklikleri fiziksel olarak sürdürmeden dinamik olarak değiştirmek için kullanılır.",
		regionGroupName: "Bölge Grubu",
		regionGroupSnip: "Hücrenin ait olduğu bağlı bölgenin kimliğini çıktı kayıtlarındaki her hücre için saklar. Her bölgeye benzersiz bir sayı atanır.",
		regionGroupDesc: "Bölge Grubu global fonksiyonu çıktıdaki her hücre için söz konusu hücrenin ait olduğu bağlı bölgenin kimliğini kaydeder. Her bölgeye benzersiz bir sayı atanır.<div><br/>Taranan ilk bölge bir, ikinci iki değerini alır ve tüm bölgelere bir değer atanana kadar bu şekilde devam eder. Tarama soldan sağa devam ve yukarıdan aşağıya hareket eder. Çıktı bölgelerine atanan değerler, tarama işleminde görüldükleri zamanı temel alır.</div>",
		regionGrowName: "Bölge Büyütme",
		regionGrowSnip: "Çekirdek noktalardan bölge büyütür.",
		regionGrowDesc: "Bölge Büyütme fonksiyonu, çekirdek noktasından belirtilen yarıçapa bağlı olarak komşu pikselleri gruplar halinde gruplandırır. Piksel veya nesne grubu belirli bir doldurma değerine atanır.",
		remapName: "Yeniden haritalama",
		remapSnip: "Piksel değerlerini piksel değeri aralıklarına yeni değerler atayarak ya da harici bir tablo kullanarak değiştirir.",
		remapDesc: "Yeniden haritalama fonksiyonu, raster verilerinin piksel değerlerini değiştirmenize veya yeniden sınıflandırmanıza olanak tanır. Bu, çıktı piksel değerine eşlenecek bir piksel değeri aralığı belirtilerek veya piksel değerlerini çıktı piksel değerine eşlemek için bir tablo kullanılarak yapılabilir.",
		reprojectName: "Yeniden Projelendir",
		reprojectSnip: "Bir raster veri kümesi, mozaik veri kümesi veya mozaik veri kümesindeki raster ögesinin izdüşümünü değiştirir. Ayrıca verileri yeni hücre boyutuna yeniden örneklendirir ve bir başlangıç tanımlar.",
		reprojectDesc: "Yeniden Projelendir fonksiyonu, bir raster veri kümesi, mozaik veri kümesi veya mozaik veri kümesindeki raster ögesinin izdüşümünü değiştirir. Ayrıca verileri yeni hücre boyutuna yeniden örneklendirir ve bir başlangıç tanımlar.<div><br/>Yeniden Projelendir fonksiyonu, gerekli izdüşümde olmayan bir raster veya mozaik veri kümesinden bir önbellek oluştururken kullanılabilir. Örneğin, diğer önbelleğe alınmış servisler ile uygulamalar tarafından entegre edilebilecek önbelleğe alınmış bir görüntü servisi oluştururken hepsinin aynı izdüşümde olması önemlidir. Bu genellikle bir Web Mercator izdüşümüdür. Mozaik veri kümesi yeniden projelendirilemediğinden şu ikisini yapabilirsiniz—gerekli izdüşümdeki mozaik veri kümenizden referanslı bir mozaik veri kümesi oluşturabilir veya gereken izdüşümüne Yeniden Projelendir fonksiyonunu ekleyebilirsiniz. Bir diğer örnekte bu fonksiyon, mozaik veri kümesindeki raster ögesinde kullanılmıştır. Önbellekli Raster fonksiyonunu kullanırken, önbellek yeni izdüşümde oluşturulacak şekilde Yeniden Projelendir fonksiyonunu eklemek isteyebilirsiniz. Görüntü servisinin tamamını önbelleğe almadan hızlı bir resim servisi yayınlamaya çalışıyorsunuzdur ve işlem yoğun olduğunda mozaik veri kümesindeki raster ögeler önbelleğe alınabilir.</div>",
		resampleName: "Yeniden Örneklendir",
		resampleSnip: "Bir rasterin hücre boyutunu değiştirir.",
		resampleDesc: "Yeniden Örneklendir fonksiyonu hücre boyutunu, yeniden örneklendirme türünü veya her ikisini birden değiştirir.<div><br/>Yeniden Örneklendir fonksiyonu, sadece belirli hesaplama gereksinimleriyle kullanılmalıdır; örneğin, çözünürlüğünden yeniden örnekleme gerektiren rüzgar veya akım büyüklüğü-yönünü hesaplarken.</div>",
		roundDownName: "Aşağı Yuvarla",
		roundDownSnip: "Bir rasterdeki her hücre için bir kayan nokta olarak temsil edildiğinden sonraki düşük tamsayı değerini döndürür.",
		roundDownDesc: "Aşağı Yuvarla fonksiyonu, rasterdaki her piksel için kayan nokta değeri olarak bir sonraki alt tam sayıyı döndürür.",
		roundUpName: "Yukarı Yuvarla",
		roundUpSnip: "Rasterdaki her hücre için kayan nokta olarak gösterilen bir sonraki yüksek tamsayı değerini döndürür.",
		roundUpDesc: "Yukarı Yuvarla fonksiyonu, rasterdaki her piksel için kayan nokta değeri olarak bir sonraki üst tam sayıyı döndürür.",
		segmentMeanShiftName: "Parçaları Ortalamaya Göre Dönüştür",
		segmentMeanShiftSnip: "Komşu pikselleri benzer spektral karakteristiklerle segmentler halinde birleştirir.",
		segmentMeanShiftDesc: "Bu fonksiyon görselinizdeki nesneleri ya da segmentleri, benzer spektral ve mekansal karakteristikleri olan yakın pikselleri birlikte gruplandırarak tanımlar. İlginç detaylar elde edilmesini sağlamak için mekansal ve spektral düzeltme miktarını kontrol edebilirsiniz.",
		s1RadiometricCalibrationName: "Sentinel-1 Radyometrik Kalibrasyonu",
		s1RadiometricCalibrationSnip: "Sentinel-1 verilerinde farklı türde radyometrik kalibrasyonlar gerçekleştirir.",
		s1RadiometricCalibrationDesc: "Bu raster fonksiyonu, beta sıfır ve gama dahil olmak üzere Sentinel 1 veri kümeleri için üç farklı kalibrasyon gerçekleştirir ve kalibre edilmiş veri kümesini çıkarır. SAR kalibrasyonunun amacı, piksel değerlerinin sahnedeki radar geri göndericisi ile doğrudan ilişkili olabileceği görüntüleri sağlamaktır. Kalibre edilmemiş SAR görüntüleri niteliksel kullanım için yeterli olsa da SAR verilerinin nicel kullanımı için kalibre edilmiş SAR görüntüleri gereklidir.<div><br/>Seviye 1 görüntüleri üreten tipik SAR veri işleme, radyometrik düzeltmeler içermez ve önemli radyometrik sapmalar devam eder. Bu nedenle, görüntülerin piksel değerlerinin tam olarak yansıtan yüzeyin radar geri göndericisini temsil etmesi için SAR görüntülerine radyometrik düzeltme uygulanmalıdır. Radyometrik düzeltme ayrıca farklı sensörlerle elde edilen veya farklı zamanlar, farklı modlar veya farklı işlemciler tarafından aynı sensörden elde edilen SAR görüntülerinin karşılaştırılması için de gereklidir.</div>",
		s1ThermalNoiseRemovalName: "Sentinel-1 Termik Parazit Kaldırma",
		s1ThermalNoiseRemovalSnip: "Sentinel 1 verilerinden termik paraziti kaldırır.",
		s1ThermalNoiseRemovalDesc: "Sentinel-1 Seviye-1 Single Look Complex (SLC) ürünlerine ve daha önce düzeltilmemiş olan Seviye-1 Ground Range Detection (GRD) ürünlerine termal gürültü düzeltme uygulanabilir. Operatör ayrıca, orijinal ürünü üretmek için kaldırılan parazit sinyalini tekrar tanıtmak için ürün ek açıklamalarına dayanarak bu düzeltmeyi kaldırabilir. Ürün açıklamaları, düzeltmenin yeniden uygulanmasına izin verecek şekilde güncellenir. ",
		setNullName: "Null Olarak Ayarla",
		setNullSnip: "Null Olarak Ayarla, belirtilen kriterleri temel alarak belirtilen hücre konumlarını NoData olarak ayarlar. Koşullu bir değerlendirme doğru ise NoData döndürür ve yanlış ise başka bir rasterın belirttiği değeri döndürür.",
		setNullDesc: "Null Olarak Ayarla fonksiyonu, belirlenen kriterleri temel alarak belirlenen pikselleri NoData olarak ayarlar. Koşullu değerlendirme doğru ise (1) NoData döndürür veya koşullu değerlendirme yanlış (0) ise Yanlış Rasterda belirtilen değeri döndürür. Bu kriterler, girdi Rasterı olacak mantıksal matematik fonksiyonunun çıktısı ile belirlenir.",
		shadedReliefName: "Gölgeli Kabartma",
		shadedReliefSnip: "Görüntünün gölgesini hesaba katarak güneşin bağıl pozisyonu ile yüzeyin, 3B renk kodlu bir gösterimini oluşturur.",
		shadedReliefDesc: "Gölgeli Kabartma fonksiyonu, görüntülerin yükseklik kodu ve kabartma yöntemleriyle birleştirilmesiyle oluşturulan arazinin renkli bir 3B gösterimini oluşturur. Bu fonksiyon güneşin konumunu belirlemek için rakım ve azimut özelliklerini kullanır.<div><br/></div>",
		sinHName: "SinH",
		sinHSnip: "Rasterdeki hücrelerin hiperbolik sinüsünü hesaplar.",
		sinHDesc: "Fonksiyon, bir rasterdaki piksellerin hiperbolik sinüsünü hesaplar.",
		sinName: "Sin",
		sinSnip: "Rasterdeki hücrelerin sinüsünü hesaplar.",
		sinDesc: "Fonksiyon, bir rasterdaki piksellerin sinüsünü hesaplar.",
		slopeName: "Eğim",
		slopeSnip: "Bir piksel değerinden komşularına değişim hızını hesaplar.",
		slopeDesc: "Bu raster fonksiyonu her dijital yükselti modeli (DEM) hücresi için yükselti değişim hızı olan eğimi hesaplar. DEM’nin ilk türevidir.<div><br/>Bu fonksiyon, hızlandırılmış atan() fonksiyonu kullanır. Altı kat hızlıdır ve her zaman 0,3 dereceden azdır.</div>",
		speckleName: "Speckle (Benek)",
		speckleSnip: "Sentetik açıklık radar veri kümelerinin gürültüsünü azaltmak için filtreler sunar.",
		speckleDesc: "Benek, radar verilerindeki yüksek frekans parazitidir. Sentetik açıklık radar (SAR) sistemleri tarafından oluşturulan görüntüler, dağınık sinyallerin işlenmesi ve yüzeylerden veya nesnelerden yayılan elektromanyetik dalgaların parazitleri nedeniyle benekleneme etkisine üst düzeyde maruz kalır. Bu Benek fonksiyon benekli radar veri kümesini filtreler ve görüntüdeki kenarları ve keskin özellikleri koruyarak paraziti azaltır.",
		spectralConversionName: "Hayali Dönüştürme",
		spectralConversionSnip: "Çok bantlı bir görüntüye matris uygular.",
		spectralConversionDesc: "Hayali Dönüştürme fonksiyonu, çıktının renk değerlerini etkilemek için çok bantlı bir görüntüye matris uygular.<div><br/>Bazı sensörler düşük sinyal/parazit oranı nedeniyle mavi bantları toplamaz. Bu, örneğin, sahte renkli kızılötesi görüntüyü sahte doğal renkli görüntüye dönüştürmek için kullanılabilir.</div>",
		squareRootName: "Kare Kök",
		squareRootSnip: "Rasterdeki hücre değerlerinin kare kökünü hesaplar.",
		squareRootDesc: "Kare Kök fonksiyonu bir raster içindeki piksel değerlerinin karekökünü hesaplar.",
		squareName: "Kare",
		squareSnip: "Rasterdeki hücre değerlerinin karesini hesaplar.",
		squareDesc: "Kare, bir raster içindeki piksel değerlerinin karesini hesaplar.",
		statisticsHistogramName: "İstatistikler ve Histogram",
		statisticsHistogramSnip: "İstatistikleri ve histogramı tanımlayın veya ilişkilendirin.",
		statisticsHistogramDesc: "İstatistikler ve Histogram fonksiyonu, bir rasterın istatistiklerini ve histogramını tanımlamak için kullanılır. Bu fonksiyonu, bir raster fonksiyon şablonunun (RFT) istatistiklerini ve histogramını tanımlamak için fonksiyon zincirinin sonuna ekleyebilirsiniz. Bu, özellikle birçok fonksiyon içeren bir fonksiyon zinciri tanımlarken, işlem sonucunun varsayılan görünümünü kontrol etmek için gerekli olabilir.<div><br/>Değerleri yazarak veya bir raster veri kümesi veya bir XML dosyasından içe aktararak istatistikleri tanımlayabilirsiniz. Histogramlar sadece bir dosyayı içe aktararak tanımlanabilirler.</div>",
		statisticsName: "İstatistik",
		statisticsSnip: "Tanımlı bir odaksal komşuya dayanan görüntünün her bir pikseli için odak istatistiklerini hesaplar.",
		statisticsDesc: "İstatistikler fonsksiyonu, tanımlı bir odaksal komşuya dayanan görüntünün her bir pikseli için odak istatistiklerini hesaplar.<div><br/>İstatistikler fonksiyonu, bir görüntüde düşürülen çizgileri doldurmak için kullanılabilir. Düşürülen çizgiler, genellikle verilerin toplanmadığı sensördeki sorunlardan kaynaklanır. Bu, Landsat 7’nin Enhanced Thematic Mapper Plus (ETM +) gibi sensörlerde meydana gelir. Bu eksik veriler analizlerde ve görüntülere bakarken sorunlara neden olur. Analiz için görüntüleri kullanırken yapılabilecek çok az şey vardır; bununla birlikte, çakışan bir görüntü varsa, eksik içeriğin yerine kullanılabilir. Aynısı, görüntü görselleştirme için kullanılırken de yapılabilir. Bununla birlikte eksik içeriği doldurmak için her zaman fazladan bir resim olmayacağından bu, mevcut verilerden türetilmelidir.</div>",
		streamLinkName: "Akış Bağlantısı",
		streamLinkSnip: "Kesişimler arasındaki raster çizgisel ağın kısımları için tek değerleri belirler.",
		streamLinkDesc: "Global Akış Bağlantısı fonksiyonu kesişimler arasındaki bir raster doğrusal ağının kesimlerine benzersiz değerler atar.<div><br/>Bağlantılar, iki ardışık kavşağı, bir kavşak ve çıkışı veya bir kavşak ve drenaj bölmesini bağlayan bir akış kanalının bölümleridir. Hidrolojide bu akış segmentleri erişim olarak adlandırılır. Kavşak bir dökülme noktasıyla ilgilidir ve bir havza veya drenaj alt havzası sınırının çizilmesine yardımcı olur.</div>",
		stretchName: "Uzat",
		stretchSnip: "Görüntülenen değer aralığını ayarlayarak görüntüyü iyileştirir. Bu, altta yatan piksel değerlerini değiştirmez. Bir piksel belirtilen aralığın dışında bir değere sahipse minimum veya maksimum değer olarak görünür.",
		stretchDesc: "Uzat fonksiyonu, çoklu uzatma türlerinde parlaklık, kontrast ve gama gibi özellikleri değiştirerek görüntüyü iyileştirir. Bu fonksiyon, mozaik veri kümesindeki rasterların istatistiklerini kullanır; bu nedenle, bu fonksiyonu kullanırken istatistiklerin hesaplandığından emin olmalısınız.<div><br/>Uzatma türü, görüntülerini geliştirmek için rasterlara uygulanacak histogram genişliğini tanımlar. Uzatma, histogram boyunca bit derinliği tarafından tanımlanan minimum ve maksimum değerlerden piksel değerlerini yayarak verilerin görünümünü iyileştirir. </div>",
		swathName: "Şerit",
		swathSnip: "Düzensiz kılavuz veya şerit verilerinden enterpolasyon yapar",
		swathDesc: "Bazı netCDF veya HDF veri kümeleri coğrafi konumlarını düzensiz aralıklı dizi olarak saklar. Bu veri kümelerini bir mozaik veri kümesine eklerken şerit fonksiyonu düzensiz gridli verileri alır ve her pikselin tek biçimli ve kare olacağı şekilde yeniden örnekler.<div><br/>netCDF veya HDF’den mozaik veri kümesine değişkenler eklerken, verilerin düzenli olarak dizilip dizilmediğini otomatik olarak doğrular. Değilse şerit fonksiyonu, düzensiz rasterları noktalara ve ardından düzenli gridli rasterlara dönüştürmek için otomatik olarak uygulanır. Hesaplama yöntemini ve şerit raster fonksiyonunda kullanılan hücre boyutunu değiştirebilirsiniz. Düzenli aralıklı raster verileri için hesaplama uygulanmayacak, veriler olduğu gibi okunacaktır.</div>",
		tanHName: "TanH",
		tanHSnip: "Rasterdaki hücrelerin hiperbolik tanjantını hesaplar.",
		tanHDesc: "Fonksiyon, bir rasterdaki piksellerin hiperbolik tanjantını hesaplar.",
		tanName: "Tan",
		tanSnip: "Rasterdaki hücrelerin tanjantını hesaplar.",
		tanDesc: "Fonksiyon, bir rasterdaki piksellerin tanjantını hesaplar. ",
		tasseledCapName: "Püsküllü Kapak (Kauth-Thomas) Dönüşümü",
		tasseledCapSnip: "Bitki örtüsü, nemlilik ve parlaklık seviyelerini hesaplar. Bu teknik, özellikle bir sensörde hesaplanması gereken katsayıları temel alır.",
		tasseledCapDesc: "Püsküllü Kapak (Kauth-Thomas) dönüşümü, bitki örtüsü fenomenolojisi ve çeşitli uydu sensör sistemleri tarafından tespit edilen kentsel gelişim değişikliklerini analiz etmek ve haritalandırmak için tasarlanmıştır. Verilerin grafiksel dağılımının şeklinden dolayı Püsküllü Kapak dönüşümü olarak bilinir. Dönüşüm, tarımsal alanların Landsat MSS verilerinde mahsulün yaşam döngüsünün bir fonksiyonu olarak bulunan kalıplar için bir gerekçe sağlamıştır. Aslında ürünler tohumdan olgunluğa geçtikçe yakın kızılötesinde net bir artış ve toprak rengini temel alan kırmızı yansımada azalma görülür<div><br/>Bu dönüşümün faydası, ormancılık, endüstriyel bitki örtüsü yönetimi, ekosistem haritalama ve yönetimi, karbon tutulması ve kredileri stoku ve izlemesi, kentsel gelişim ve daha fazlası için çeşitli uygulamaları desteklemek amacıyla mahsulü izlemekten, bitki örtüsünü analiz etme ve haritalamaya kadar genişlemiştir. Ayrıca, Landsat MSS’yi desteklemekten Landsat TM, Landsat ETM +, Landsat 8, IKONOS, QuickBird, WorldView-2 ve RapidEye çok spektrumlu sensörler gibi diğer popüler uydu sistemlerini içerecek şekilde genişletilmiştir.</div>",
		timesName: "Çarpma",
		timesSnip: "Hücre-hücre temeli üzerinde iki rasterin değerlerini çarpar.",
		timesDesc: "Çarpma fonksiyonu iki rasterın değerlerini piksel-piksel tabanında çarpar.",
		transposeBitsName: "Bit Sırasını Değiştirme",
		transposeBitsSnip: "Girdi pikselinin bitlerini açar ve bunları çıktı pikselinde belirtilen bitlerle eşleştirir. Bu fonksiyonun amacı, Landsat 8 kaliteli bant ürünleri gibi birkaç girdinin bitlerini yönlendirmektir.",
		transposeBitsDesc: "Bit Sırasını Değiştirme fonksiyonu, girdi pikselinin bitlerini açar ve bunları çıktı pikselinde belirtilen bitlerle eşleştirir. Bu fonksiyonun amacı, Landsat 8 kaliteli bant ürünleri gibi birkaç girdinin bitlerini yönlendirmektir.",
		unitConversionName: "Birim Dönüştürme",
		unitConversionSnip: "Değerleri bir ölçüm değerinden diğerine değiştirir.",
		unitConversionDesc: "Bu fonksiyon bir birimden diğerine pikselleri dönüştürür. Mesafe, hız ve sıcaklık dönüştürmeyi destekler.",
		vectorFieldName: "Vektör Alanı",
		vectorFieldSnip: "Veri kümelerini hem genlik (u) hem de yön (v) ile oklar olarak görüntüler; burada genlik okun boyutu ve yön ise okun açısı ile temsil edilir.",
		vectorFieldDesc: "Vektör Alanı fonksiyonu, iki rasterı Büyüklük-Yön veri türü veya U-V veri türü olan iki bantlı bir raster içinde birleştirilmesi ve dönüştürülmesi için kullanılır.<div><br/>U değeri bazen bölgesel hız olarak ve V değeri bazen meridyen hızı olarak da adlandırılır.</div>",
		viewshed2Name: "Görüş Alanı",
		viewshed2Snip: "Bir dizi gözlemci detayına görünen raster yüzeyi konumlarını jeodezik yöntemler kullanarak belirler.",
		viewshed2Desc: "Görüş Alanı fonksiyonu, bir dizi gözlemci detayına görünen raster yüzeyi konumlarını jeodezik yöntemler kullanarak belirler<div><br/>Her piksel merkezinin görünürlüğü, hedef ve her bir gözlemci arasındaki görüş hattı testi ile belirlenir. Bir gözlemci hedefi piksel merkezinde görebiliyorsa, piksel görünür olarak kabul edilir. Bu araç, görünürlük belirlendiğinde her zaman dünyanın eğriliğini dikkate alır.</div>",
		watershedName: "Boşaltma Havzası",
		watershedSnip: "Rasterdaki hücrelerin kümesi üzerinde eklenen alanları belirler",
		watershedDesc: "Global Boşaltma Havzası fonksiyonu rasterdaki piksel kümesinin üzerindeki katkı alanını belirler. Boşaltma Havzalarının sınırları, her pikselden akış yönünü tanımlayan bir akış yönü rasterı ile çizilir.",
		weightedOverlayName: "Ağırlıklı Bindirme",
		weightedOverlaySnip: "Birkaç rasteri ortak bir ölçü skalası kullanarak üst üste bindirir ve her birini önemine göre ağırlıklandırır.",
		weightedOverlayDesc: "Bu fonksiyon ortak bir ölçüm sistemi çerçevesinde her birini önemine göre ağırlıklandırarak, çeşitli rasterları çakıştırmanıza olanak tanır.",
		weightedSumName: "Ağırlıklı Toplam",
		weightedSumSnip: "Tek tek hücre temelinde raster dizisini ağırlıklandırır ve ekler.",
		weightedSumDesc: "Ağırlıklı Toplam fonksiyonu, verilen ağırlıklara göre her birini çarparak ve toplayarak çeşitli rasterları çakıştırmanıza olanak tanır.",
		windchillName: "Rüzgar Soğutma Etkisi",
		windchillSnip: "Ortam hava sıcaklığını ve rüzgar hızını birleştirerek rüzgar soğutma faktörünü hesaplar.",
		windchillDesc: "Rüzgar Soğutma Etkisi fonksiyonu, unsurlara maruz kalma süresine bağlı olarak donma ve hatta hipotermiye neden olabilecek tehlikeli kış koşullarını belirlemek için kullanışlıdır. Rüzgar soğutma etkisi, soğuk havalarda rüzgar dikkate alındığında bir kişinin ne kadar soğuk hissettiğini ölçmenin bir yoludur. Rüzgar hızı ne kadar yüksek olursa, vücut o kadar hızlı ısı kaybeder ve o kadar soğuk hisseder.",
		zonalRemapName: "Bölgesel Yeniden Haritalama",
		zonalRemapSnip: "Başka bir rasterda tanımlanan bölgelere ve bir tabloda tanımlanan bölgeye bağlı değer eşleştirmesine dayanan bir rasterdaki pikselleri yeniden haritalayın.",
		zonalRemapDesc: "Bu fonksiyon başka bir rasterda tanımlanan bölgelere ve bir tabloda tanımlanan bölgeye bağlı değer eşleştirmesine dayanan bir rasterdaki pikselleri yeniden haritalamanıza olanak tanır.",
		zonalStatisticsName: "Bölgesel İstatistikler",
		zonalStatisticsSnip: "Diğer veri kümesinin bölgelerindeki rasterın değerleri üzerindeki istatistikleri hesaplar.",
		zonalStatisticsDesc: "Bu fonksiyon, başka bir veri kümesinin bölgeleri içindeki raster değerleri hakkındaki istatistikleri hesaplar. Bir bölge, girdi içinde aynı değere sahip olan tüm konumlar tarafından tanımlanır. Bu alanların sürekli olması gerekmez. Bölge ve değer girdileri aynı çözünürlükteki rasterlar olduğunda, doğrudan kullanılır. Çözünürlüklerin farklı olması durumunda, bölgesel işlem yapılmadan önce çözünürlüklerin eşleşmesini sağlamak için bir dahili örnekleme uygulanır.",
		flowLengthName: "Akış Uzunluğu",
		flowLengthSnip: "Her hücreden akış yolu boyunca yukarı akış veya aşağı akış mesafesini veya ağırlıklı mesafeyi hesaplar.",
		flowLengthDesc: "Bu global bir raster fonsksiyonudur. Bu fonksiyon, her hücre için akış yolu boyunca yukarı veya aşağı akış mesafesinden veya ağırlıklı mesafeden bir raster katmanı oluşturur.<div><br/>Akış Uzunluğu fonksiyonunun birincil kullanımı, belirlenen bir havzada en uzun akış yolunun uzunluğunu hesaplamaktır. Bu ölçüm genellikle bir havzanın konsantrasyon zamanını hesaplamak için kullanılır. Bu, Yukarı Akış seçeneği kullanılarak yapılır. Bu fonksiyon, aşağı eğim hareketine bir empedans olarak ağırlık rasterını kullanarak varsayımsal yağış ve akış olaylarının mesafe-alan diyagramlarını oluşturmak için de kullanılabilir.</div>",
		streamOrderName: "Akış Sırası",
		streamOrderSnip: "Doğrusal bir ağın dallarını gösteren rasterin segmentlerine sayısal bir sıra atar.",
		streamOrderDesc: "Bu global bir raster fonsksiyonudur. Bu fonksiyon, doğrusal bir ağın dallarını gösteren rasterın segmentlerine sayısal bir sıra atayan raster katmanıdır.<div><br/>Girdi akış rasterı katmanı ve girdi akış yönü rasterı katmanı aynı yüzeyden türetilirse, Akış Sırası fonksiyonunun çıktısı daha yüksek kalitede olur. Akış rasterı, rasterlaştırılmış bir akış veri kümesinden türetilmişse, çıkış, hücreden hücreye olacak şekilde, yön akış hücrelerinin konumuna karşılık gelmeyeceği için kullanılamayabilir. Akış Birikimi fonksiyonunun sonuçları, yüksek birikimli bir akışa sahip hücreleri seçmek için bir eşik değer uygulayarak raster akış ağı oluşturmak için kullanılabilir. Örnek olarak, akış ağını tanımlamak için kullanılan hücrelere akan 100'den fazla hücreye sahip hücreler. 100 veya daha yüksek akış birikim değerlerinin birine gittiği ve kalanının arka plana (NoData) getirildiği bir akış ağı rasterı oluşturmak için Con veya Null olarak Ayarla fonksiyonunu kullanın. Elde edilen akış ağı, Akış Sırası fonksiyonunda kullanılabilir. Bu fonksiyon, sadece bir D8 girdi akış yönü raster katmanını destekler. D8 akış yönleri, Akış Yönü fonksiyonu kullanılarak oluşturulabilir ve varsayılan akış yönü tipi D8 ile çalıştırılabilir.</div>",
		snapPourPointName: "Dökülme Noktası Yakala",
		snapPourPointSnip: "Belirli mesafede en yüksek toplam akışının hücresi için dökülme noktası yakalar",
		snapPourPointDesc: "Bu global bir raster fonsksiyonudur. Bu fonksiyon belirli mesafede en yüksek akış birikiminin hücresi için dökülme noktaları yakalar.<div><br/>Dökülme Noktası Yakala fonksiyonu, Su Toplama fonksiyonunu kullanarak drenaj havzalarının sınırını belirlediğinde yüksek birikimli akış noktalarının seçimini sağlamak için kullanılır. Dökülme Noktası Yakala, en yüksek birikimli akış hücresi için belirtilen dökülme noktaları etrafındaki bir yakalama mesafesi içerisinde arama yapar ve dökülme noktasını bu konuma taşır. Orijinal dökülme noktası konumları en yüksek birikimli akışın konumlarına yakalandığında, çıktı bir tam sayı raster katmanıdır.</div>",
		sinkName: "Çöküntü",
		sinkSnip: "Tüm çöküntü veya iç drenaj alanlarını tanımlayan bir raster oluşturur",
		sinkDesc: "Bu global bir raster fonsksiyonudur. Bu fonksiyon, tüm çöküntü veya iç drenaj alanlarını tanımlayan bir raster oluşturur. Bir çöküntü, bir akış yönü rasterindeki sekiz geçerli değerden birine atanamayan akış yönüne sahip, mekansal olarak bağlı hücrelerin bir hücresi veya kümesidir. Bu, tüm komşu hücreler işleme hücresinden daha yüksek olduğunda veya iki hücre, iki hücreli bir döngü oluşturarak birbirine aktığında oluşabilir.<div><br/>Çöküntü fonksiyonu, sadece bir D8 girdi akış yönü rasterı katmanını destekler. D8 akış yönleri, Akış Yönü fonksiyonu kullanılarak oluşturulabilir ve varsayılan akış yönü tipi D8 ile çalıştırılabilir. Çöküntü fonksiyonunun çıktısı, her çöküntüye benzersiz değer atanmış bir tam sayı rasteridir. Bu benzersiz değerler, bir ve toplam çöküntü sayısı arasında bir aralığa sahiptir. Örneğin, toplam çöküntü sayısı 1000 ise, benzersiz değerler aralığı 1 ila 1000 arasındadır.</div>",
		aggregateName: "Kümele",
		aggregateSnip: "Rasterin düşük çözünürlüklü bir versiyonunu oluşturur.",
		aggregateDesc: "Kümeleme fonksiyonu bir girdi rasterını belirtilen kümeleme stratejisine dayalı olarak daha kaba bir çözünürlüğe yeniden örnekler. Her çıktı hücresi, o hücrenin yayılımında kapsanan girdi hücrelerinin Toplam, Minimum, Maksimum, Ortalama veya Ortanca değerlerini içerir.<div><br/>Girdi rasterının hücre boyutunun çarpılacağı faktörü belirtebilirsiniz. Örneğin, 3 hücre katsayısı değeri, girdi rasterı değerinden üç kat daha büyük bir hücre boyutuna sahip bir çıktı ile sonuçlanır. Girdideki satır veya sütun sayısı hücre katsayısının tam katı değilse, çıktı yayılımının nasıl ele alınacağını tanımlayabilirsiniz. Varsayılan olarak, tüm girdi hücrelerinin işlenmesini sağlamak için üst ve sağ sınırlar girdi rasterından daha büyük bir mekansal yayılımı kapsayacak şekilde genişletilir. Alternatif olarak, üst ve sağ sınırlar daha küçük bir yayılımı kapsayacak şekilde azaltılabilir; böylece işlenen satır ve sütun sayısı hücre katsayısının tam katı olur. NoData hücrelerinin kümeleme hesaplaması tarafından nasıl ele alınacağını tanımlayabilirsiniz. Varsayılan mekanizmada, çıktı rasterındaki daha büyük bir hücrenin mekansal yayılımına düşen girdi NoData hücreleri, bu çıktı hücresinin değeri belirlenirken dikkate alınmaz. Alternatif olarak, bir çıktı hücresinin mekansal yayılımı içinde tek bir girdi NoData hücresi bile olsa, bu hücrenin, çıktı rasterında NoData olacağını belirtebilirsiniz.</div>",
		ccdcName: "CCDC Analizi",
		ccdcSnip: "Sürekli Değişiklik Algılama ve Sınıflandırma (CCDC) algoritmasını kullanarak piksel değerlerinin zaman içindeki değişikliklerini değerlendirir ve model sonuçları oluşturur.",
		ccdcDesc: "CCDC Analizi fonksiyonu, Sürekli Değişiklik Algılama ve Sınıflandırma (CCDC) algoritmasını kullanarak piksel değerlerinin zaman içindeki değişikliklerini değerlendirir ve model sonuçlarını içeren bir çok boyutlu raster oluşturur. Yalnızca raster fonksiyon şablonundaki Değişiklik Analizini Kullanarak Değişikliği Algıla fonksiyonuyla birlikte desteklenir. Bir raster çıktısı üretmek için CCDC Analizi fonksiyonunu Değişiklik Analizini Kullanarak Değişikliği Algıla fonksiyonuna bağlayın, raster fonksiyon şablonu olarak kaydedin ve Raster Analizini fonksiyon şablonuyla çalıştırın.<div><br/>Bu fonksiyon, bir görüntü yığınında piksel değerlerinin zaman içindeki değişikliklerini değerlendirmek için Sürekli Değişiklik Algılama ve Sınıflandırma (CCDC) algoritmasını kullanır. Bir dizi optik görüntü veya görüntü türevinde (örneğin, NDVI), piksel değerleri çeşitli nedenlerden dolayı dalgalanabilir: 1. Mevsimsel değişim - Piksel değer değişiklikleri mevsimsel sıcaklık ve yağış değişkenliği nedeniyle bitki örtüsünde meydana gelen değişiklikleri yansıtır. Örneğin, Kuzey Yarımkürede yaz aylarında, kış aylarında olduğundan daha yoğun yeşil bitki örtüsü görmeyi bekleriz; 2. Kademeli değişim - Piksel değeri değişiklikleri, bitki örtüsü veya yüzey sularındaki iklim değişikliği veya uzun vadeli arazi yönetimi uygulamaları kaynaklı trendleri yansıtır. Örneğin, yağıştaki uzun süreli düşüş nedeniyle alandaki çıplak toprak giderek artabilir; ve 3. Ani değişiklik - Piksel değeri değişiklikleri, ormansızlaşma, kentsel gelişim, doğal afet vb. nedeniyle aniden meydana gelen arazi örtüsü değişikliklerini yansıtır. CCDC algoritması, ani değişikliği tanımlamak amacıyla üç değişiklik türünü de tanımlar. Mevsimsel ve kademeli değişimi tahmin etmek için verilere harmonik regresyon ve trend modelleri eklenmiştir ve trend modellerinden ani sapmalar ani değişim göstergeleridir.<div><br/>CCDC algoritması esas olarak Landsat TM, Landsat ETM + ve Landsat OLI verileri Yüzey Yansıtma veya Parlaklık Sıcaklığı verileri için tasarlanmıştır. Bununla birlikte, bu fonksiyonla birlikte Değişiklik Analizi Kullanarak Değişikliği Algıla fonksiyonu, desteklenen herhangi bir sensörden çok bantlı görüntülerin yanı sıra bant indeksleri gibi tek bantlı görüntü türevlerindeki değişiklikleri algılar. Örneğin, Normalleştirilmiş Bitki Örtüsü Fark İndeksi (NDVI) rasterında sürekli değişiklik algılama gerçekleştirebilirsiniz; çünkü NDVI'daki ani değişiklikler ormansızlaşmanın göstergesi olabilir.</div>",
		computeChangeName: "Değişiklik Hesapla",
		computeChangeSnip: "İki kategorik veya sürekli raster veri kümesi arasındaki farkı hesaplar.",
		computeChangeDesc: "Değişiklik Hesapla fonksiyonu, arazi örtüsü değişiklik analizi için iki sınıflandırılmış raster arasındaki farkları numaralandırmak için veya yükseklik, sıcaklık, kanopi örtüsü vb. iki tek bantlı sürekli raster arasındaki değişiklikleri incelemek için kullanılabilir.",
		detectChangeName: "Değişiklik Analizi Kullanarak Değişikliği Algıla",
		detectChangeSnip: "Çıktı değişikliği analiz rasterını kullanarak piksel değişikliği bilgilerini içeren bir raster katmanı oluşturur.",
		detectChangeDesc: "<div>Değişiklik Analizi Kullanarak Değişikliği Algıla fonksiyonu, değişiklik analizi rasterını kullanarak piksel değişiklik tarihi bilgilerini içeren bir raster katmanı oluşturur. Değişiklik analizi rasterı, CCDC Kullanarak Değişiklik Analizi aracı veya LandTrendr Kullanarak Değişiklikler Analizi aracı veya CCDC Analizi raster fonksiyonu veya LandTrendr Analizi raster fonksiyonu tarafından oluşturulmalıdır.</div><br><div>Bu raster fonksiyonu, bir raster fonksiyonu şablonunda CCDC Analizi raster fonksiyonu veya LandTrendr Analizi raster fonksiyonu ile birleştirilebilir. Kalıcı bir raster çıktısı oluşturmak için CCDC Analizi veya LandTrendr Analizi fonksiyonu çıktısını Değişiklik Analizi Kullanarak Değişikliği Algıla fonksiyonuna bağlayın, bir raster fonksiyonu şablonu olarak kaydedin ve Raster Analizini şablonla çalıştırın.</div><br><div><strong>Değişiklik Türü</strong> parametresi, oluşturulan bilgileri gösterir. Bilgi, değişiklik analizi rasterından çıkarılır. Bu fonksiyonu CCDC fonksiyonu/aracının çıktısında çalıştırırken, aşağıdaki seçeneklerden birini seçebilirsiniz:</div><ul><li><strong>Son değişikliğin tarihi</strong>--Bir pikselin değiştiriliyor olarak işaretlendiği son tarih ve saat.</li><li><strong>İlk değişikliğin tarihi</strong>--Bir pikselin değiştiriliyor olarak işaretlendiği ilk tarih ve saat.</li><li><strong>En büyük değişikliğin tarihi</strong>--Hesaplanan değişikliğin bir piksel için en önemli olduğu tarih ve saat.</li><li> <strong>Değişiklik sayısı</strong>--Pikselin toplam değiştirilme sayısı.</li></ul><div>Bu fonksiyonu LandTrendr fonksiyonu/aracının çıktısı üzerinde çalıştırırken aşağıdaki ek seçenekler kullanılabilir:</div><ul><li><strong>En uzun değişikliğin tarihi</strong>--En uzun değişim döneminin başında veya sonunda, bir pikselin değiştiriliyor olarak işaretlendiği tarih.</li><li><strong>En kısa değişikliğin tarihi</strong>--En kısa değişim döneminin başında veya sonunda, bir pikselin değiştiriliyor olarak işaretlendiği tarih.</li><li><strong>En hızlı değişikliğin tarihi</strong>--En hızlı değişim döneminin başında veya sonunda, bir pikselin değiştiriliyor olarak işaretlendiği tarih.</li><li><strong>En yavaş değişikliğin tarihi</strong>--En yavaş değişim döneminin başında veya sonunda, bir pikselin değiştiriliyor olarak işaretlendiği tarih.</li></ul><div>Çıktı rasterı, içindeki her bir bandın seçilen değişiklik türüne ve belirtilen maksimum değişiklik sayısına bağlı olarak değişiklik bilgilerini içerdiği çok bantlı bir rasterdır. Örneğin, <strong>Değişiklik Türü</strong> <strong>İlk Değişiklik Tarihi</strong> olarak ve <strong>Maksimum Değişiklik Sayısı</strong> 2 olarak ayarlanırsa fonksiyon, her piksel için zaman serisi boyunca değişikliğin meydana geldiği en erken iki tarihi hesaplar. Sonuç, birinci bandın piksel başına en erken değişikliğin tarihlerini içerdiği ve ikinci bandın piksel başına ikinci en erken değişikliğin tarihlerini içerdiği bir raster olur.</div><br><div>Bu fonksiyonu LandTrendr araçlarından çıktıya uygularken, <strong>Segment Tarihi</strong> parametresini kullanarak bir değişikliğin başlangıcını veya sonunu işaretleyen tarihi ayıklayıp ayıklamayacağınızı seçebilirsiniz. Örneğin, zaman serisindeki en son değişikliğin nasıl başladığını anlamak için <strong>Değişiklik Türü</strong>'nü <strong>Son Değişiklik Tarihi</strong> ve <strong>Segment Tarihi</strong>'ni <strong>Segmentin Başlangıcı</strong> olarak ayarlayın.</div><br><div>Değişiklik analizi rasterınızdan daha belirli değişiklik tarihleri ayıklamak için aşağıdaki filtreleme parametrelerini kullanın:</div><ul><li><strong>Yıla göre filtreleme</strong>-Belirli bir zaman aralığında meydana gelen değişiklikleri tanımlayın; örneğin, beş yıllık bir kuraklık boyunca bir tabiat parçasında meydana gelen değişiklikleri arıyorsanız.</li><li><strong>Süreye göre filtrele</strong>-Belirli bir yıl aralığında meydana gelen değişiklikleri tanımlayın; örneğin, yalnızca 1 veya 2 yıl içinde meydana gelen ani değişiklikleri arıyorsanız. <strong>bitiş yılı - başlangıç yılı +1</strong> formülünü kullanarak ilgilendiğiniz süreyi hesaplayabilirsiniz. Zaman serisindeki boşluklar da dahil edilecektir.</li><li><strong>Büyüklüğe göre filtrele</strong>--Örneğin, sadece bitki örtüsü indeksi NDVI'daki büyük değişiklikleri arıyorsanız, belirli bir büyüklükteki değişiklikleri tanımlayın. Büyüklük mutlak bir değer olduğundan minimum ve maksimum değerler negatif olamaz. Yön değişikliğini belirtmek için <strong>Yönü Değiştir</strong> parametresini kullanın.</li></ul>",
		distanceAccumulationName: "Mesafe Birikimi",
		distanceAccumulationSnip: "Doğrusal mesafe, maliyet mesafesi, gerçek yüzey mesafesi ve dikey ve yatay maliyet faktörlerine izin vererek her hücreden kaynaklara biriken mesafeyi hesaplar.",
		distanceAccumulationDesc: "Mesafe Birikimi, çalışma alanındaki her bir konumdan kaynağa en yakın veya en düşük maliyetli mesafeyi hesaplar. Girdi için sadece kaynaklar sağlanmışsa, çalışma alanındaki her konuma doğrusal mesafe hesaplanır. Hem kaynak hem de engeller girdi olarak kullanılırsa, Mesafe Birikimi engeller etrafındaki doğrusal mesafeyi hesaplar. Hem kaynak rasterı hem de engel rasterı için arka plan değeri NoData olmalı, kaynaklar ve engeller geçerli hücre değerleriyle temsil edilmelidir. Geçerli değerler sıfırı içerir. <div><br/>Bir yüzey rasterı girdi olarak verildiğinde, hücreler arasındaki gerçek yüzey mesafesi hesaplanır. Mesafe Birikimi kullanarak maliyet analizi gerçekleştirmek için bir maliyet yüzeyi gereklidir. Maliyet yüzeyi verilmemişse, sonuç birikimli maliyet mesafesi rasterı olur. Yatay ve dikey faktörler verildiğinde yönlülük, maliyet birikiyor olarak kabul edilir. Kullanılabilecek dört kaynak özelliği vardır. Bu özellikler -- kaynağın veya kaynaktan hareket edenlerin olabilir -- belirli parametrelerle kontrol edilir: 1. İlk birikim: hareket başlamadan önce ilk maliyeti ayarlar. 2. Maksimum birikim: sınırına ulaşmadan önce bir kaynağın ne kadar maliyet biriktirebileceğini belirtir. 3. Maliyetlere uygulanacak çarpan: kaynakta seyahat modunu veya büyüklüğünü belirtir. 4. Hareket yönü: hareket edenin bir kaynaktan başlayıp kaynak olmayan konumlara mı yoksa kaynak olmayan konumlardan başlayıp kaynağa mı gittiğini tanımlar.<div><br/>Varsayılan olarak Mesafe Birikimi sonucu, mesafe birikimi rasterı olan tek bir banttır. Bununla birlikte geri yönü bandı olan ikinci bir bant da oluşturulabilir. Bu bant, en az maliyet kaynağına ulaşmak için çalışma alanındaki her konumdan hangi yönde gidileceğini gösterir. Çalışma alanındaki optimum yolları belirlemek için her iki bant da gerekli olacaktır. Bir yol oluşturmak amacıyla mesafe birikim rasterını ve geri yönü rasterını çıkarmak için önce Bandı Çıkar fonksiyonunu kullanın. Maliyet Yolu fonksiyonuna girdi olarak bu katmanları kullanın. Fonksiyonda, Maliyet Mesafesi Raster girdisi olarak mesafe birikim rasterını ve Maliyet Geri Bağlantısı Raster girdisi olarak geri yönü rasterını kullanın.</div>",
		distanceAllocationName: "Mesafe Dağıtımı",
		distanceAllocationSnip: "Doğrusal mesafe, maliyet mesafesi, gerçek yüzey mesafesi ve dikey ve yatay maliyet faktörlerini temel alarak her hücreden verilen kaynaklara mesafe dağıtımını hesaplar.",
		distanceAllocationDesc: "Mesafe Dağıtımı, çalışma alanındaki her bir konumun hangi kaynağa dağıtıldığını hesaplar. Girdi için yalnızca kaynaklar verilmişse, konumlar doğrusal mesafe kullanılarak en yakın kaynağa dağıtılır. Hem kaynak hem de engeller girdi olarak kullanılırsa Mesafe Dağıtımı, bir konumun hangi kaynağa dağıtıldığını belirlemek için engeller etrafındaki doğrusal mesafeyi hesaplar. Hem kaynak rasterı hem de engel rasterı için arka plan değeri NoData olmalı, kaynaklar ve engeller geçerli hücre değerleriyle temsil edilmelidir. Geçerli değerler sıfırı içerir.<div><br/>Mesafe Dağıtımını kullanarak maliyet analizi gerçekleştirmek için bir maliyet yüzeyi gereklidir. Bir maliyet yüzeyi verilmişse sonuç, doğrusal mesafe değil, birikimli maliyeti temel alan bir dağıtım rasterı olur. Yatay ve dikey faktörler verildiğinde yönlülük, maliyet birikiyor olarak kabul edilir. Bir yüzey rasterı girdi olarak verilmişse, dağıtım belirlendiğinde hücreler arasındaki geçişte kapsanan yüzey mesafesi hesaplanır. Kullanılabilecek dört kaynak özelliği vardır. Bu özellikler -- kaynağın veya kaynaktan hareket edenlerin olabilir -- belirli parametrelerle kontrol edilir: 1. İlk Birikim: hareket başlamadan önce ilk maliyeti ayarlar. 2. Maksimum Birikim: sınırına ulaşmadan önce bir kaynağın ne kadar maliyet biriktirebileceğini belirtir. 3. Maliyetlere uygulanacak çarpan: kaynakta seyahat modunu veya büyüklüğünü belirtir. 4. Hareket yönü: hareket edenin bir kaynaktan başlayıp kaynak olmayan konumlara mı yoksa kaynak olmayan konumlardan başlayıp kaynağa mı gittiğini tanımlar.<div><br/>Varsayılan olarak Mesafe Dağıtım sonucu, mesafe dağıtımı rasterı olan tek bir banttır. Çıktıda ek bantlar olarak kaynak satırı ve sütunu oluştur Boolean seçeneğinin belirlenmesi, üç bant içeren çok bantlı bir raster ile sonuçlanır. İlk bant mesafe dağıtım bandı, ikinci bant bir sıra indeksi ve üçüncü bant bir sütun indeksi içerir. Bu indeksler, kaynak hücresinin en az birikmiş maliyet mesafesi olan konumunu belirler. Kaynak satır indeksi ve kaynak sütun indeksi yoğunluk haritalama için birlikte kullanılabilir. Çalışma alanınızdaki herhangi bir konumu ikinci ve üçüncü bant arasında sorgularsanız, o konumun en az maliyet kaynağının satırını ve sütununu öğrenirsiniz.</div>",
		eucBackDirectionName: "Öklid Geri Doğrultusu",
		eucBackDirectionSnip: "Engellerden kaçınırken en yakın kaynağa geri giden en kısa yol boyunca komşu hücreye doğru yönü derece cinsinden hesaplar.",
		eucBackDirectionDesc: "Öklid Geri Doğrultusu fonksiyonu, engeller verilmişse bunlardan kaçınırken en yakın kaynağa geri yönü derece cinsinden temsil eden sürekli bir kayan nokta rasterı ile sonuçlanır.<div><br/>Öklid Geri Doğrultusu girdileri yönün hesaplanacağı kaynaklardır. İsteğe bağlı bir girdi, çalışma alanındaki engelleri temsil eden bir rasterdır. Hem kaynak rasterı hem de engel rasterı için arka plan değeri NoData olmalı, kaynaklar ve engeller geçerli değerlerle temsil edilmelidir. Geçerli değerler sıfırı içerir. Varsayılan olarak hesaplama, kaynakların ve engellerin yanı sıra 2 satır ve sütunun birleşik yayılımını işler. Ancak kaynaklardan belirli bir mesafe içinde analize ihtiyaç duyulursa, Maksimum Mesafe parametresi kullanılabilir. Öklid Geri Doğrultusu hesaplamada hem Düzlem yöntemini hem de Jeodezik yöntemini destekler. Düzlem yöntem hesaplaması, 2B Kartezyen koordinat sistemi kullanılarak izdüşümlendirilen düz bir düzlemde gerçekleştirilir. Jeodezik yöntem hesaplaması elipsoid üzerinde yapılır, yani, girdi veya çıktı izdüşümünden bağımsız olarak sonuçların değişmediği anlamına gelir.<div><br/>Öklid Geri Doğrultusu fonksiyonunun sonucu, çalışma alanı içindeki konumlardan kaynağa geri giden en kısa yolları belirlemek için Öklid Mesafesi fonksiyonunun sonucu ile birlikte kullanılabilir. Hem Öklid Geri Doğrultusu sonucu hem de Öklid Mesafesi sonucu, Maliyet Yolu fonksiyonunda hedeflerle birlikte en kısa yolları oluşturmak için kullanılır.</div>",
		expandName: "Genişletme",
		expandSnip: "Rasterın seçilen bölgelerini belirtilen sayıda hücre ile bölgelere göre genişletir.",
		expandDesc: "Genişletme küresel fonksiyonu ile belirli bölgeleri büyüterek rasterları genelleştirebilir veya basitleştirebilirsiniz. Ayrıca gerçekleştirilecek genelleştirme miktarını da kontrol edebilirsiniz.<div><br/>Seçtiğiniz bölgelerin boyutu, diğer bölgelere doğru genişleyerek artar. Kavramsal olarak, seçilen Bölge Değerleri ön plan bölgeleri olarak görülebilir, diğer değerler ise arka plan bölgeleri olarak kalır. Ön plan bölgeleri arka plan bölgelerine doğru genişletilebilir.<div><br/>Genelleştirme miktarı Hücre Sayısı parametresi ile kontrol edilebilir. Varsayılan olarak bu değer 1'dir; yani seçilen bölgeler bir hücrenin boyutuna karşılık gelen miktarda genişler. Genelleme derecesini artırmak amacıyla bu parametre için daha büyük bir değer belirleyebilirsiniz. Kavramsal olarak bu, önceki çalışmanın sonuçları sonraki yinelemeye girdi olacak şekilde, aracı belirtilen sayı kadar fazla çalıştırmak gibi bir şeydir.</div>",
		trendAnalysisName: "Trend Oluştur",
		trendAnalysisSnip: "Çok boyutlu bir rasterda bir veya daha fazla değişken için bir boyut boyunca her pikselin trendini tahmin eder.",
		trendAnalysisDesc: "<div>Bu fonksiyon, verileri lineer, harmonik veya polinom trend çizgisi boyunca sığdırmak için veya Mann-Kendall veya Mevsimsel-Kendall testi kullanılarak trend tespiti yapmak için kullanılabilir.</div><br><div>Bu fonksiyonla oluşturulan çıktı trendi rasterı, <strong>Trend Kullanarak Tahmin</strong> fonksiyonunun girdisi olarak kullanılır.</div><br><div>Verilerde tekdüze bir trend olup olmadığını belirlemek için Mann-Kendall ve Mevsimsel-Kendall testleri kullanılır. Bunlar parametrik değildir; yani belirli bir veri dağılımını varsaymazlar. Mann-Kendall testi seri korelasyonu veya mevsimsel etkileri dikkate almaz. Veriler mevsimselse, Mevsimsel-Kendall testi daha uygundur.</div><br><div>Araç, Mann-Kendall veya Mevsimsel-Kendall testini gerçekleştirmek için kullanılıyorsa, çıktı aşağıdaki gibi beş bantlı bir raster olur:</div><ul><li>Bant 1 = Sen'in eğimi</li><li>Bant 2 = p-değeri</li><li>Bant 3 = Mann-Kendall puanı (S)</li><li>Bant 4 = S Varyansı</li><li>Bant 4 = S Varyansı</li><li>Bant 5 = Z-puanı</li></ul><div>Mann-Kendall veya Mevsimsel-Kendall testinin çıktıları, çok boyutlu zaman serilerinizdeki hangi piksellerin istatistiksel olarak anlamlı bir trende sahip olduğunu belirlemek için kullanılabilir. Zaman serilerinizdeki önemli trendleri çıkarmak için bu bilgileri lineer, harmonik veya polinom trend analiziyle birlikte kullanabilirsiniz. Önemli p değerlerine sahip pikseller içeren bir maske oluşturabilir, maskeyi çok boyutlu rasterlara uygulayabilir ve bu maskelenmiş çok boyutlu rasterı, lineer, harmonik veya polinom trend analizi yapmak için araca girdi olarak kullanabilirsiniz.</div><br><div>Bir boyut boyunca değişken değerlere bir trend sığdırmak için üç trend çizgisi seçeneği bulunur: lineer, polinom ve harmonik.</div><br><div>Lineer trend analizi için çıktı, üç bantlı rasterdır:</div><ul><li>Bant 1 = Eğim</li><li>Bant 2 = Kesme Noktası</li><li>Bant 3 = Ortalama Karekök Hatası (RMSE) veya en uygun çizginin etrafındaki hata</li></ul><div>Polinom trend analizi için çıktıdaki bant sayısı polinom sırasına bağlıdır. İkinci sıra polinom sığdırma dört bantlı bir raster üretir:</div><ul><li>Bant 1 = Polinom_2</li><li>Bant 2 = Polinom_1</li><li>Bant 3 = Polinom_0</li><li>Bant 4 = RMSE</li></ul><div>Üçüncü sıra polinom sığdırma beş bantlı bir raster üretir:</div><ul><li>Bant 1 = Polinom_3</li><li>Bant 2 = Polinom_2</li><li>Bant 3 = Polinom_1</li><li>Bant 4 = Polinom_0</li><li>Bant 5 = RMSE</li></ul><div>Harmonik trend analizi için çıktıdaki bant sayısı harmonik sıklığı temel alır. Sıklık 1 olarak ayarlandığında, çıktı beş bantlı bir raster olur:</div><ul><li>Bant 1 = Eğim</li><li>Bant 2 = Kesme Noktası</li><li>Bant 3 = Harmonik_sin1</li><li>Bant 4 = Harmonik_cos1</li><li>Bant 5 = RMSE</li></ul><div>Sıklık 2 olarak ayarlandığında çıktı yedi bantlı bir raster olur:</div><ul><li>Bant 1 = Eğim</li><li>Bant 2 = Kesme Noktası</li><li>Bant 3 = Harmonik_sin1</li><li>Bant 4 = Harmonik_cos1</li><li>Bant 5 = Harmonik_sin2</li><li>Bant 6 = Harmonik_cos2</li><li>Bant 7 = RMSE</li></ul><div>Harmonik trend analizinin <strong>Döngü uzunluğu</strong> parametresi bir gün veya yıl boyunca verilerinizde görmeyi beklediğiniz döngülerin sayısını ve uzunluğunu belirtmek için kullanılır. Örneğin, verilerinizin bir yılda iki döngüden geçmesini bekliyorsanız, döngü uzunluğu 182,5 gün veya 0,5 yıl olacaktır. Her üç saatte bir toplanan sıcaklık verileriniz varsa ve varyasyon döngüsü günde birse, döngü uzunluğu bir gündür.</div><br><div>Harmonik trend analizi için <strong>Sıklık</strong> parametresi, verilere sığdırılacak harmonik modeli tanımlamak için kullanılır. Sıklık 1 olarak ayarlanırsa, modele uyması için lineer ve birinci dereceden harmonik eğrinin bir kombinasyonu kullanılır. Sıklık 2 ise veriyi sığdırmak için lineer, birinci derece harmonik eğri ve ikinci derece harmonik eğrinin bir kombinasyonu kullanılır. Sıklık 3 ise, verileri modellemek için ek bir üçüncü dereceden harmonik eğri kullanılır ve bu böyle devam eder.</div><br><div>Model uygunluk istatistikleri, isteğe bağlı çıktılar olarak oluşturulabilir. Ortalama karekök hatası (RMSE), R-kare ve trend eğimi p-değeri hesaplanabilir ve sembolize edilebilir. <strong>RGB</strong> sembolojisini kullanarak çıktı trend raster katmanını sembolize edin ve istatistikleri kırmızı, yeşil ve mavi bantlar olarak belirtin.</div><br>",
		spectralUnmixingName: "Lineer Spektral Ayrışımı",
		spectralUnmixingSnip: "Alt piksel sınıflandırmasını gerçekleştirir ve ayrı pikseller için farklı arazi örtüsü türlerinin kesirli çokluğunu hesaplar.",
		spectralUnmixingDesc: "Lineer Spektral Ayrışımı fonksiyonu, birden çok arazi örtüsü türü içeren ayrı pikseller için kesirli kapsamı hesaplar. Her bandın, her arazi örtüsü sınıfının kesirli çokluğuna karşılık geldiği çok bantlı bir katman oluşturur. Bunu, örneğin, fotosentetik bitki örtüsü, çıplak toprak ve ölü ya da fotosentetik olmayan bitki örtüsünü tanımlamak amacıyla çoklu spektral görüntüde arazi örtüsü sınıflandırması yapmak için kullanabilirsiniz.<div><br/>Çıktı çok bantlı raster sırası girdi spektral profilinin sırasını izler. Sınıf sayısı girdi rasterdaki bant sayısını aşamaz. Örneğin, 8 bantlı bir rasterdan 8’den fazla sınıf hakkında bilgi alamazsınız.</div>",
		multidimensionalFilterName: "Çok Boyutlu Filtre",
		interpolateRasterByDimensionFunctionName: "Boyuta Göre Raster Ara Değerini Hesapla",
		interpolateRasterByDimensionFunctionSnip: "Bitişik dilimleri kullanarak çok boyutlu bir rasterı belirtilen boyut değerlerinde enterpole eder.",
		interpolateRasterByDimensionFunctionDesc: "<p>Bu işlev, çok boyutlu bir rasterda tanımlanmamış bir boyut diliminin piksel değerlerini tahmin etmenize olanak tanır. Örneğin, yüzey seviyesinde ve deniz seviyesinin 100 metre altında okyanus sıcaklığını içeren bir veri kümeniz varsa ve deniz seviyesinin 50 metre altındaki sıcaklığı tahmin etmek istiyorsanız, Değerlere göre boyut tanımını ile o derinlikte bir tahmin almak için bu işlevi kullanabilirsiniz.</p><p>Aralığa Göre boyut tanımını kullanarak ve Adım parametre değerini 1 ve Birim parametre değerini Gün olarak belirterek aylık veri kümesini günlük veri kümesine örnekleyebilirsiniz.</p><p>Hedef Raster değerini tahmin etmek için Hedef Rastera Göre boyut tanımını kullanın.</p>",
		multidimensionalFilterSnip: "Verileri tanımlanan değişkenler ve boyutlar boyunca dilimleyerek çok boyutlu bir raster veri kümesinden veya çok boyutlu raster katmanından bir raster katmanı oluşturur.",
		multidimensionalFilterDesc: "Çok Boyutlu Filtre, çok boyutlu bir rasterdan değişkenlerin bir alt kümesini filtreleyerek ve çıkararak çok boyutlu bir raster katmanı oluşturur. Örneğin, 30 yıllık aylık yağış verileri içeren çok boyutlu bir veri kümeniz var ve yağışın Ocak ayında nasıl değiştiğini görmek için yalnızca her Ocak ayının verilerini çıkarmak istiyorsunuz.<div><br/>Bir aralık, değer veya bir değer aralığı kullanarak boyutları dilimlemek için Boyut Tanımı parametresini kullanın. Örneğin, aylık olarak ve 500 metreye kadar her 2 metre derinlikte toplanan 10 yıllık okyanus tuzluluk verileriniz varsa, aşağıdaki senaryolar için farklı boyut tanımlama seçeneklerini kullanabilirsiniz. Senaryo 1: 10 yıllık bir dönem boyunca Ocak ayı için tuzluluk verilerini çıkarın. Değerlere Göre seçin, Boyutu StdTime olarak ayarlayın ve Ocak Ayının Değerleri olarak ayarlayın. Senaryo 2: 0 - 150 metre derinlik aralığında tuzluluk verilerini dilimleyin. Aralığa Göre seçin, Boyutu StdZ olarak ayarlayın ve Minimum Değeri -150 ve Maksimum Değeri 0 olarak ayarlayın. Senaryo 3: 10 yıllık bir dönem boyunca her Ocak ayının ilk 10 günü için tuzluluk verilerini çıkarın. Yinelemeye Göre seçin, Boyutu StdTime olarak ayarlayın, İlk yineleme başlangıcı ve İlk yineleme bitişini karşılık gelen yineleme döneminin başlangıç ve bitişine ayarlayın, Adımı 1 olarak ayarlayın ve Birimi Yıllar olarak ayarlayın.</div>",
		multidimensionalRasterName: "Çok Boyutlu Raster",
		multidimensionalRasterSnip: "Çok boyutlu verileri bir haritaya çok boyutlu raster katmanı olarak ekler.",
		multidimensionalRasterDesc: "Çok Boyutlu Raster fonksiyonu, çok boyutlu verileri bir haritaya çok boyutlu raster katmanı olarak ekler. Bu fonksiyon, bir fonksiyon zinciri kullanarak raster analizi iş akışları gerçekleştirirken kullanışlıdır.<div><br/>Desteklenen çok boyutlu raster veri kümeleri netCDF, GRIB, HDF ve Esri CRF’yi içerir. Çok boyutlu mozaik veri kümeleri de desteklenir.</div>",
		optimalPathAsRasterName: "Raster Olarak En Uygun Yol",
		optimalPathAsRasterSnip: "Kaynaktan hedefe en az maliyet yolunu hesaplar.",
		optimalPathAsRasterDesc: "Bu küresel fonksiyon, seçili konumlardan birikimli maliyet yüzeyinde tanımlanan en yakın kaynak hücresine en uygun yolu veya yolları maliyet mesafesi açısından kaydeden bir çıktı rasterı üretir.<div><br/>Bir veya daha fazla ağırlıklı maliyet fonksiyonunun (Mesafe Birikimi veya Mesafe Dağıtımı), girdi mesafesi birikimini ve geri yönü rasterlarını oluşturmak için genellikle Raster Olarak En Uygun Yol çalıştırılmadan önce çalıştırılması gerekir. Bunlar En Uygun Yol fonksiyonu için zorunlu girdi raster katmanlarıdır. Çıktı en uygun yol değerleri belirli bir konumdaki yolların sayısını temsil eder. Birçok durumda yollar, bir kaynaktan ayrılıp farklı hedeflere yönelerek aynı rotayı izler. Örneğin bir değeri, belirli bir konumda yalnızca bir en uygun yol olduğunu gösterirken beş değeri, bu konumda çalışma alanındaki o hücreden geçen beş en uygun yol olduğunu gösterir.<div><br/>Girdi hedef verileri bir raster katmanı olmalıdır. Hedef hücreler kümesi, değerleri geçerli olan girdi rasterındaki tüm hücreleri içerir. NoData değerleri olan hücreler kümeye dahil edilmez. Sıfır değeri meşru hedef sayılır. Çıkarma araçları kullanılarak bir hedef raster oluşturulabilir. Hedef veya kaynak detaylarınız varsa bunları, Detayları Rasterlaştır fonksiyonunu kullanarak rasterlara dönüştürebilirsiniz. Rasterlaştırma fonksiyonuna Raster girdisi olarak mesafe birikimini veya geri yönü rasterını kullanın. Bu, detayın, Raster Olarak En Uygun Yol fonksiyonuna giren diğer rasterlar ile aynı hücre boyutu, yayılımı ve mekansal referansı kullanılarak rasterlaştırılmasını sağlar. Raster Olarak En Uygun Yol fonksiyonu, bir sayısal yükselti modelinde (DEM) en az dirençli yolu türetmek için de kullanılabilir. Bu durumda, girdi mesafe birikim rasterları için DEM'i ve geri yönü Rasterı için Akış Yönü fonksiyonundan çıktıyı kullanın.</div>",
		trendName: "Trend Kullanarak Tahmin Et",
		trendSnip: "Trend Oluştur fonksiyonundan veya Trend Rasterı Oluştur coğrafi işlem aracından çıktı trendi rasterını kullanarak, tahmini bir çok boyutlu raster katmanı hesaplar.",
		trendDesc: "Trend Kullanarak Tahmin Et fonksiyonu, Trend Oluştur fonksiyonundan veya Trend Rasterı Oluştur coğrafi işlem aracından çıktı trendi rasterını kullanarak, tahmini bir çok boyutlu raster katmanı hesaplar.",
		rasterCollectionName: "Raster Koleksiyonu işle",
		rasterCollectionSnip: "Çok boyutlu bir rasterda her dilimi veya mozaik rasterda her ögeyi işler. Bu fonksiyon ayrıca birden fazla dilimi tek bir dilimde de kümeleyebilir.",
		rasterCollectionDesc: "Raster Koleksiyonu İşle fonksiyonu, çok boyutlu bir rasterda her dilimi veya mozaik rasterda her ögeyi işler. Bu fonksiyon ayrıca birden fazla dilimi tek bir dilimde de kümeleyebilir.<div><br/>Bu fonksiyon, bir raster fonksiyon şablonu kullanarak çok boyutlu raster veya mozaik rasterdaki her dilimi işler. Bu fonksiyon aşağıdaki seçenekleri destekler: 1. Öge Fonksiyonu için bir raster fonksiyon şablonu belirtin. Örneğin, 20 yıllık Landsat görüntülerini içeren bir mozaik veri kümeniz var ve zaman serisindeki her sahne için NDVI'yı hesaplamak istiyorsunuz. Öge Fonksiyonu için NDVI raster fonksiyonunu içeren bir raster fonksiyon şablonu belirtin. 2. Kümeleme Fonksiyonu için bir raster fonksiyon şablonu belirtin. Örneğin, 10 yıllık günlük sıcaklık verileri içeren çok boyutlu bir rasterınız var ve her yıl için maksimum sıcaklığı hesaplamak istiyorsunuz. Kümeleme Fonksiyonunda, işlem Maksimuma ayarlanmış olarak Hücre İstatistikleri fonksiyonunu içeren raster fonksiyonu şablonunu belirtin. Kümeleme Tanımının altında Boyutu StdTime olarak ayarlayın, Türü Anahtar Sözcük Aralığı olarak ayarlayın ve Anahtar Sözcük Aralığını Yıllık olarak ayarlayın. Girdi mozaik veri kümesi çok boyutlu değilse, kümeleme fonksiyonunun kümeleme tanımına uymayacağını lütfen unutmayın. Kümeleme fonksiyonu, kümeleme fonksiyonu şablonunda tanımlanmışsa tüm ögeleri veya her grubu kümeler. Mozaik veri kümesinde grupların kullanımı hakkında daha fazla bilgi için bkz. Raster Fonksiyonu Şablonlarında Mozaik Veri Kümesi Ögelerini Kullanma. 3. İşleme Fonksiyonu için bir raster fonksiyon şablonu belirtin. Bu şablondaki fonksiyon veya fonksiyon zinciri, yeni işlenmiş rasterları görüntülemek için kullanılır. Örneğin, işlenen raster katmanının görüntülenme şeklini değiştirmek için Renk Haritası fonksiyonunu içeren bir raster fonksiyon şablonu belirtin. Girdi çok boyutlu bir raster ise, işleme fonksiyonunun mevcut görüntü dilimine uygulanacağını lütfen unutmayın. Girdi bir mozaik katmanı veya mozaik veri kümesi ise, çakışmaları gidermek için işleme fonksiyonu İlk yöntem kullanılarak mozaik rasterına uygulanır. 3. Bu üç fonksiyonun herhangi bir kombinasyonu için şablonları belirtin. Örneğin, zaman serisi Landsat görüntülerini içeren bir mozaik veri kümeniz var ve maksimum NDVI'nın bileşik bir görüntüsünü oluşturmak istiyorsunuz. Öge Fonksiyonu için NDVI raster fonksiyonunu içeren bir raster fonksiyon şablonu belirtin. Kümeleme Fonksiyonu için işlem Maksimuma ayarlanmış olarak Hücre İstatistikleri fonksiyonunu içeren raster fonksiyon şablonunu belirtin. İşleme Fonksiyonu için Renk Haritası fonksiyonunu içeren bir raster fonksiyon şablonu belirtin. Fonksiyon işleme sırasının girdi parametreleri sırasını izlediğini lütfen unutmayın. Örneğin Öge Fonksiyonu önce işlenir.</div>",
		randomName: "Rastgele",
		randomSnip: "Bir yalancı rastgele dağıtımdan çizilen rastgele piksel değerleriyle bir raster oluşturur. Çeşitli dağıtımlar ve rastgele sayı oluşturucular desteklenir.",
		randomDesc: "Rasgele fonksiyonu, raster fonksiyon şablonlarında veya mozaik veri kümelerinde kullanılabilen rastgele piksel değerlerine sahip bir raster oluşturur.<div><br/>Birçok fonksiyon bir veya daha fazla girdi rasterında çalışırken Rastgele fonksiyonu bir girdi rasterı gerektirmez. Bu, bir fonksiyondan ziyade bir raster veri kümesi gibi davrandığı anlamına gelir; bu nedenle fonksiyon zincirine eklenirken veya fonksiyon zincirinden çıkarılırken özellikle dikkat edilmelidir.</div>",
		shrinkName: "Küçült",
		shrinkSnip: "Seçilen alanları, çevresinde en sık olan hücrenin değeriyle değiştirerek belirtilen hücre sayısı kadar küçültür.",
		shrinkDesc: "Küçültme küresel fonksiyonu ile belirli bölgeleri küçülterek rasterları genelleştirebilir veya basitleştirebilirsiniz. Ayrıca gerçekleştirilecek genelleştirme miktarını da kontrol edebilirsiniz.<div><br/>Çevrelerindeki bölgelerden hücreler seçtiğiniz bölgelerin içlerine doğru genişlerken, bölgeler küçülür veya boyutları azalır. Kavramsal olarak, seçilen Bölge Değerleri ön plan bölgeleri olarak görülebilir, diğer değerler ise arka plan bölgeleri olarak kalır. Ön plan bölgelerindeki hücreler, arka plan bölgelerindeki hücrelerle değiştirilebilir. Bir bölgedeki, sınırını bölge ile paylaşıyor olarak görülen ince adalar da değiştirilebilir.<div><br/>Genelleştirme miktarı Hücre Sayısı parametresi ile kontrol edilebilir. Varsayılan olarak bu değer 1'dir; yani seçilen bölgeler bir hücrenin boyutuna karşılık gelen miktarda küçülür. Genelleme derecesini artırmak amacıyla bu parametre için daha büyük bir değer belirleyebilirsiniz. Kavramsal olarak bu, önceki çalışmanın sonuçları sonraki yinelemeye girdi olacak şekilde, aracı belirtilen sayı kadar fazla çalıştırmak gibi bir şeydir.</div>",
		trendToRGBName: "Trendden RGB’ye",
		trendToRGBSnip: "Bir trend rasterını üç bantlı (kırmızı, yeşil ve mavi) bir rastera dönüştürür.",
		trendToRGBDesc: "Trendden RGB’ye fonksiyonu bir trend rasterını üç bantlı (kırmızı, yeşil ve mavi) bir rastera dönüştürür. Trend rasterı, Trend Oluştur raster fonksiyonundan veya CCDC Analizi raster fonksiyonundan üretilir.<div><br/>Bu fonksiyon, Trend Oluştur fonksiyonu veya CCDC Analizi fonksiyonundan model katsayısı verilerini görselleştirmek için kullanışlıdır. Her iki fonksiyon da değişen piksel değerlerindeki trendleri tahmin eder ancak fonksiyonların sonuçlarını doğrudan yorumlamak zordur.<div><br/>Çoğu raster fonksiyonunda olduğu gibi bu fonksiyonun sonuçlarını daha iyi görüntülemek için Dinamik Aralık Ayarını (DRA) kullanmanız gerekebilir.</div>",
		landTrendrName: "LandTrendr Analizi",
		landTrendrSnip: "Bozulma ve kurtarma trendlerinin Landsat tabanlı tespiti (LandTrendr) yöntemini kullanarak piksel değerlerinin zaman içindeki değişikliklerini değerlendirir ve model sonuçlarını içeren bir değişiklik analizi rasterı oluşturur.",
		landTrendrDesc: "Bu raster fonksiyonu, yalnızca Değişiklik Analizini Kullanarak Değişikliği Algıla raster fonksiyonu için girdi olarak kullanılabilir. Raster çıktısı üretmek için LandTrendr Analizi fonksiyonunu bir raster fonksiyonu şablonunda Değişiklik Analizini Kullanarak Değişikliği Algıla fonksiyonuna bağlayın ve şablonu Raster Fonksiyonundan Raster Oluştur coğrafi işlem aracında girdi olarak kullanın. Sonuç olarak piksel değerlerinin değiştiği zaman ile ilgili bilgiler içeren bir raster elde edilir.<div><br>Bu raster fonksiyonunun amacı gözlemlenen detaydaki değişiklikleri elde etmektir, bu nedenle ideal girdi çok boyutlu görüntüsü zaman içinde tutarlı bir gözlem sağlamalı ve atmosferik veya sensör bozulması, bulut veya bulut gölgesi içermemelidir. En iyi uygulama, normalize edilmiş ve bulut maskeli Landsat Toplama 1 Yüzey Yansıtma ürünleri gibi bir QA bandı ile maskelenebilen verileri kullanmaktır.<div><br>Fonksiyon her bir yıl için bir görüntü analizi yapar ve yıl dilim sayısı <strong>Minimum Gözlem Sayısı</strong> parametresinde belirtilen değere eşit veya daha fazla olmalıdır. En az altı yıllık veriye sahip olmanız tavsiye edilir.<div><br>Aylık, haftalık veya günlük verileriniz varsa her bir yıl için birden fazla görüntü seçmeniz (tercihen aynı mevsimden), bulutları ve bulut gölgesini kaldırmanız ve gözlemi iyi yansıtan tek bir görüntü oluşturmak için görüntüleri birleştirmeniz tavsiye edilir. Çok boyutlu raster girdisi olarak aylık, haftalık veya günlük veriler sağlanıyorsa fonksiyon, <strong>Alma Tarihi</strong> parametresinde belirtilen tarihe en yakın tarihi temel alarak analiz için bir dilimi belirleyecektir.<div><br>Bir arazideki detayın orman yangını veya böcek istilası gibi kalıcı olmayan bir değişikliği kaldırması zaman alacaktır. Modelin tanıdığı kurtarma hızını kontrol etmek için Kurtarma Eşiği parametresini ayarlayın. Herhangi bir segmentte kurtarma hızı 1/kurtarma eşiği değerinden daha yüksek olamaz.<div><br>Arazideki değişiklikten kurtarma pozitif veya negatif yönde olabilir. Örneğin bir arazide orman kaybı yaşandığında bitki endeksi zaman serisi değerleri endeks değerlerinde düşer ve kurtarmada bitki endeksi değerlerinde kademeli bir artış veya pozitif kurtarma trendi gösterilir. Kurtarma trendi yönünü <strong>Kurtarmada Artış Trendi Var</strong> parametresi ile belirleyin.",
		aggregateMultidimensionalName: "Çok Boyutlu Kümele",
		aggregateMultidimensionalSnip: "Bir boyuttaki mevcut çok boyutlu raster değişken verilerini birleştirir.",
		aggregateMultidimensionalDesc: "Çok Boyutlu Kümele fonksiyonu, bir boyuttaki mevcut çok boyutlu raster değişken verilerini birleştirerek bir çok boyutlu raster katmanı oluşturur.<div><br> <strong>Boyut Tanımı</strong> parametresini kullanarak kümelemek istediğiniz girdi verilerini filtreleyin. Örneğin 30 yıllık aylık veriniz varsa ancak yalnızca ilk 15 yıl için bir kümelenmiş katman oluşturmak istiyorsanız <strong>Boyut Tanımı</strong> parametresini kullanarak analize dahil edilecek yılları belirleyebilirsiniz.<div><br><ul><li>10 yıllık dönemde Ocak ayı için tuzluluk verilerini çıkarın. <strong>Değerlere Göre</strong> ögesini seçin, <strong>Boyut</strong> ögesini <strong>StdTime</strong> olarak ve <strong>Değerler</strong> ögesini <strong>Ocak</strong> olarak ayarlayın.</li><li>Tuzluluk verilerini 0 ila 150 metre derinlik aralığında dilimleyin. <strong>Aralıklara Göre</strong> ögesini seçin, <strong>Boyut</strong> ögesini <strong>StdZ</strong> olarak ve <strong>Minimum Değer</strong> ögesini <strong>-150</strong> ve <strong>Maksimum Değer</strong> ögesini <strong>0</strong> olarak ayarlayın.</li><li>10 yıllık bir dönem boyunca her Ocak ayının ilk 10 günü için tuzluluk verilerini çıkarın. <strong>Yinelemeye Göre</strong> ögesini seçin, <strong>Boyut</strong> ögesini <strong>StdTime</strong> olarak ayarlayın, <strong>İlk yineleme başlangıcı</strong> ve <strong>İlk yineleme sonu</strong> ögelerini ilgili yineleme zamanının başlangıç ve bitişine göre ayarlayın, <strong>Adım</strong> ögesini <strong>1</strong> olarak ve <strong>Birim</strong> ögesini <strong>Yıl</strong> olarak ayarlayın.</li></ul><div><br> <strong>Kümeleme Tanımı</strong> parametrelerini kullanarak değerlendirilecek boyutu ve anahtar kelime, değer veya değer aralığı kullanarak kümeleme aralığını seçin. Örneğin, günlük olarak ve 100 metre derinliğe kadar 5 metrede bir toplanmış 30 yıllık deniz yüzey sıcaklığı verileri bulunuyorsa şu senaryolar için farklı aralık seçeneklerini kullanabilirsiniz:<div><br><ul><li>Toplam günlük sıcaklık verilerinin aylık verilere aktarıldığı durumlarda 12 zaman diliminin bulunduğu bir çok boyutlu raster bulunur ve her bir dilim yıl içinde her bir ayın toplamıdır.  <strong>Aralık Anahtar Kelimesi</strong> ögesini seçin ve anahtar kelimeyi <strong>Aylık Tekrarlanan</strong> olarak ayarlayın.</li><li>Toplam günlük sıcaklık verilerinin aylık verilere aktarıldığı durumlarda 360 dilimin ve yıl başına 12 zaman diliminin bulunduğu bir çok boyutlu raster bulunur (30 yıl x 12 ay = 360 dilim). <strong>Aralık Anahtar Kelimesi</strong> ögesini seçin ve anahtar kelimeyi <strong>Aylık</strong> olarak ayarlayın.</li><li>Aylık sıcaklık verilerini 4 aylık aralıklarla toplayın. <strong>Aralık Değeri</strong> ögesini seçin, <strong>Değer Aralığı</strong> ögesini 4 olarak ve <strong>Birim</strong> ögesini <strong>Ay</strong> olarak ayarlayın.</li><li>Sıcaklık verilerini 0 ila 25 metre, ardından 25 ila 50 metre, sonra 50 ila 100 metre arasında toplayın. <strong>Aralık Dilimleri</strong> ögesini seçin ve minimum ve maksimum derinlikleri <strong>0 25; 25 50; 50 100</strong> olarak ayarlayın.</li></ul>",
		mergeRastersName: "Rasterleri Birleştir",
		mergeRastersSnip: "Birden çok raster veri kümesini mekansal olarak veya değişken ya da boyut çapında birleştirir.",
		mergeRastersDesc: "Bu fonksiyon bir dizi rasterden birleştirilmiş bir raster oluşturur. Örneğin, 30 yıllık aylık yağış verileri içeren bir mozaik veri kümeniz ve 10 yıllık aylık sıcaklık verilerini içeren başka bir veri kümeniz varsa, bunları her iki değişkenle birlikte çok boyutlu bir raster olarak birleştirebilirsiniz. <div><br>Girdi çok boyutlu rasterlarında farklı değişkenler varsa çıktı çok boyutlu rasterında tüm değişkenler bulunacaktır. <div><br>Girdi çok boyutlu rasterlarında farklı boyutlar veya boyut değerleri varsa çıktı çok boyutlu rasterında tüm boyutlar ve boyut değerleri bulunacaktır. <div><br>Girdi çok boyutlu rasterlarında aynı boyutlar ve değişkenler ancak farklı mekansal kapsamlar bulunuyorsa, çıktı çok boyutlu rasterında birleştirilmiş mekansal kapsamlarındaki değişkenler ve boyutlar bulunacaktır.<div><br>Bu fonksiyon aynı zamanda tümü için aynı istatistiklerin hesaplanması veya ayrı ayrı renk dengelemesi yapmamak için tek renk dengeleme gibi birden fazla rasterın birlikte işlenmesini istediğiniz durumlarda kullanılabilir. Bu, dosya boyutu kısıtlamaları nedeniyle ayrı kutucuklar olarak saklanmış görüntülerle çalışırken özellikle faydalıdır. Böylece kutucuklar aynı görüntünün ögeleri olarak işlenecektir.",
		boundaryCleanName: "Sınır Temizleme",
		boundaryCleanSnip: "Bölgeler arasındaki sınırı düzleştirir.",
		boundaryCleanDesc: "<p>Bu fonksiyon, bölgeler arasındaki sınırları yumuşatarak rasterleri genelleştirir veya basitleştirir. Fonksiyon, girdideki bölgelerin hücrelerinin düzleştirmeyi ve uygulanacak düzleştirme miktarını nasıl etkilediğini kontrol etmek için seçenekler sunar. Her girdi sekiz yakın komşu kullanılarak değerlendirilir.</p><p>Düzleştirme işlemi, önce komşu hücreleri belirli bir öncelik sırasına göre sıralar. Öncelik, komşu hücrelerden hangi bölgenin çıktıdaki işlem hücresinin değerini değiştirebileceğini belirler.</p><p>Öncelik, bölgelerin değerine veya boyutuna bağlı olabilir. <strong>Sıralama türü</strong> parametresi, kullanılacak sıralama türünü belirler. </p><p>Varsayılan <strong>Sıralama</strong> ayarı, önceliği bölge değerini temel alarak değerlendirir. Daha büyük değerlere sahip bölgelerden alınan hücrelerin, daha küçük değerleri olan bölgelere genişleme önceliği daha yüksek olacaktır.</p><p>Bölgelerin boyutu, toplam alanı, önceliği sıralamak için kullanılabilir. <strong>Azalan</strong> ayar ile bölgeler, azalan sırada sıralanır. Daha büyük toplam alanlara sahip bölgeler, daha küçük alanları bulunan bölgelere genişleme önceliğine sahip olacaktır. <strong>Artan</strong> ayarıyla bunun tersi doğrudur: Daha küçük toplam alanlara sahip bölgeler, toplam alanları daha büyük olan bölgelere genişleme önceliğine sahip olacaktır.</p><p>Düzeltme miktarı, genişletme ve daraltma işleminin kaç kez gerçekleştirileceğini belirleyen <strong>Genişletme ve daraltmayı iki kez çalıştır</strong> parametresi tarafından kontrol edilir.</p><p>Ayar işaretlenmediğinde, genişletme ve daraltma işlemi bir kez yapılır. Ayar işaretlendiğinde genişletme ve daraltma işlemi iki kez yapılır ve bu, bölge sınırlarının üst düzeyde yumuşatılmasıyla sonuçlanır.</p><p>Sekiz komşu hücrenin tamamının değerleri işlem hücresiyle aynıysa, çıktı hücresi girdi hücresinin değerini korur.</p>",
		predictUsingRegressionName: "Regresyon Kullanarak Tahmin Et",
		predictUsingRegressionSnip: "Raster veri girdileri ve bir regresyon modelini temel alan bir tahmini raster hesaplar. Regresyon modeli, <strong>Rastgele Ağaç Regresyon Modelini Eğit</strong> raster coğrafi işlem aracından bir çıktıdır.",
		predictUsingRegressionDesc: "<p>Regresyon modeli, bir Esri regresyon tanımı (.ecd) dosyasında tanımlanır. Belirli bir veri kümesi veya bir dizi veri kümesi ve regresyon modeli için tüm bilgileri içerir ve <strong>Rastgele Ağaç Regresyon Modelini Eğit</strong> raster coğrafi işlem aracı tarafından oluşturulur.</p><p>Girdi, tek bir bant, çok bantlı veya çok boyutlu bir raster veya bu türlerin bir listesi olabilir. Girdi rasterlerı türleri, regresyon modeli tarafından eğitilen aynı raster türünde olmalıdır.</p><ul><li>Girdi bir çok bantlı raster olduğunda, her bant bir tahmin değişkeni olarak kabul edilir. Bantlar, regresyon modeli eğitim aracı için çok bantlı girdiyle aynı sırada olmalıdır.</li><li>Girdi çok boyutlu bir raster olduğunda, her değişken bir tahmin değişkeni olarak ele alınır ve değişken tek bantlı ve bir zaman boyutuna sahip olmalıdır. Regresyon modeli eğitildiğinde, değişken sırası ve adları girdiyle aynı olmalıdır. Çıktı bir çok boyutlu rasterdır.</li><li>Girdi, bir ögeler listesi olabilir. Regresyon modeli eğitildiğinde, öge sayısı ve sırası girdiyle eşleşiyor olmalıdır.</li></ul>",
		dimensionalMovingStatisticsName: "Boyutsal Hareket İstatistikleri",
		dimensionalMovingStatisticsSnip: "Belirtilen bir boyut boyunca çok boyutlu bir veri üzerinde hareketli bir pencere üzerinden istatistikleri hesaplar.",
		dimensionalMovingStatisticsDesc: "<p>Boyutsal Hareketli İstatistikler işlevi, bir boyut boyunca tüm boyut değerleri için önceden tanımlanmış bir pencere içindeki çeşitli istatistikleri hesaplar. Bu işlev, girdi olarak bir çok boyutlu raster katmanı alır ve çıktı olarak girdi katmanıyla aynı boyutta bir çok boyutlu raster katmanı oluşturur.</p><p>Hesaplama sırasında boyut değerlerinin dikkate alınacağı bir boyut belirtebilirsiniz. Varsayılan olarak, ilk mekansal olmayan boyut boyunca hesaplar. Ayrıca, Geri Pencere ve İleri Pencere parametrelerini belirterek bir pencere boyutu belirleyebilirsiniz.</p><p>İstatistik Türü Yüzde olarak ayarlandığında, Yüzdelik Değer ve Yüzdelik Enterpolasyon Türü parametreler kullanılabilir hale gelir. Sırasıyla, hesaplanacak yüzdelik dilimini belirtmek ve kullanılacak enterpolasyon türünü seçmek için bu parametreleri kullanabilirsiniz. İstatistik Türü Dairesel Ortalama olarak ayarlandığında, Dairesel Sarma Değeri parametresi kullanılabilir hale gelir. Dairesel sarma değeri, lineer bir değeri belirli bir dairesel ortalama aralığına dönüştürmek için kullanılır.</p>",
		terrainFlattenFunctionName: "Arazi Düzleştirme",
		terrainFlattenFunctionSnip: "Topografi nedeniyle oluşan radyometrik bozulmalara karşı girdi sentetik açıklıklı radar (SAR) verilerini düzeltir.",
		terrainFlattenFunctionDesc: "<p>Arazi Düzleştirme raster fonksiyonu, topografi nedeniyle oluşan radyometrik bozulmalara karşı girdi sentetik açıklıklı radar (SAR) verilerini düzeltir..</p><p>Girdi radar verilerinin önce beta sıfır ayarına göre kalibre edilmesi gerekir. Radar verilerini beta sıfır ayarına göre kalibre etmek için Radyometrik Kalibrasyonu Uygula aracını kullanın.</p><p>Girdi DEM, tüm SAR veri kümesini kapsamıyorsa araç, gamma sıfır ayarı, sigma sıfır ayarı, dağılım alanı ve geometrik bozulma çıktıları için DEM yayılımı dışındaki pikseller için çıktı olarak NoData değerleri verecektir. Geometrik bozulma maskesi çıktısı için araç, DEM yayılımı dışındaki pikseller için çıktı olarak belirsiz değerler verecektir.</p><p>Girdi DEM, WGS 1984 (EPSG:4326) coğrafi koordinat sisteminde olmalıdır.</p>",
		createColorCompositeFunctionName: "Renk Bileşimi Oluştur",
		createColorCompositeFunctionSnip: "Her bir bandın bant cebrine dayanan bir cebirsel hesaplama kullanabildiği çok bantlı bir raster veri kümesinden üç bantlı bir raster oluşturur.",
		createColorCompositeFunctionDesc: "<p>Renk Bileşimi Oluştur raster fonksiyonu, her bir bandın bant cebrine dayanan bir cebirsel hesaplama kullanabildiği çok bantlı bir raster veri kümesinden üç bantlı bir raster oluşturur.</p><p>Bir bant aritmetik algoritması tanımlarken çok bantlı bir çıktı oluşturmak için her ifade için tek hatlı bir cebirsel formül girebilirsiniz. Desteklenen operatörler tek bileşenli, artı (+), eksi (-), çarpma (*) ve bölmedir (/).</p><p>Bir ifadede bir Bant Kimliği kullanırken bandı, bant numarasına B veya b öneki ekleyerek tanımlayın.</p><p>Lineer birimlerde sentetik açıklık radarı (SAR) için kullanılan yaygın bir bant bileşimi, kırmızı için VV, yeşil için VH ve mavi için VV/VH şeklindedir. Girdi verileri desibel cinsindense bant bileşimi kırmızı için VV, yeşil için VH ve mavi için VV-VH olmalıdır.</p>",
		surfaceParametersName: "Yüzey Parametreleri",
		surfaceParametersSnip: "Jeodezik yöntemleri kullanarak bir yüzey rasterının bakı, eğim ve çeşitli türlerde eğrilikler gibi parametrelerini belirler.",
		surfaceParametersDesc: "<p>Yüzey Parametreleri işlevi, jeodezik yöntemleri kullanarak bakı, eğim ve çeşitli türlerde eğrilikler gibi yüzey raster parametrelerini belirler.</p><p>Bu işlev aşağıdaki uygulamalar için kullanılabilir:</p><ul><li>Jeodezik yöntemleri kullanarak bakı ve eğimi hesaplama.</li><li>Girdi yüzey rasterından örneğin, yüzey boyunca akışın topografik yakınsamasını ve ıraksamasını karakterize eden <strong>Tanjant (normal kontur) eğrilik</strong> gibi farklı türlerde eğrilikleri hesaplama.</li></ul>",
		leastCostCorridorName: "En Az Maliyetli Koridor",
		leastCostCorridorSnip: "Yüzde veya birikimli maliyete dayalı bir eşik uygulama seçeneği ile iki adet birikimli maliyet mesafesi rasterının toplamını hesaplar.",
		leastCostCorridorDesc: "<p>Girdi rasterlar, <strong>Mesafe Birikimi</strong> veya <strong>Mesafe Tahsisi</strong> işlevinden mesafe birikimi ve geri yönde raster çıktısı olmalıdır. Bunlar maliyet mesafesini temel almalı ve her kaynak için katmanlar oluşturulurken aynı parametre ayarları kullanılmalıdır. Bu rasterların oluşturulmasında yönlülüğe (yatay faktör, dikey faktör ve hareket yönü) bağlı hiçbir parametre kullanılmamış olmalıdır.</p><p>Çıktı koridor rasterındaki değerler, girdi birikimli maliyet mesafesi rasterlarıyla aynı birimlerle belirli bir konuma ulaşmak için birikimli maliyetin toplamıdır.</p><p>İki mesafe birikim rasterı toplandığında, belirtilen bir <strong>Eşik</strong> değeri maksimum biriktirme maliyetinden büyükse, çıktı koridor rasterı girdi biriktirme rasterlarıyla aynı alanı kaplar.</p><p>Belirtilen bir eşik değeri koridor rasterındaki minimum değerden küçükse, bir uyarı mesajı döndürülür ve çıktı rasterı boş olur.</p><p>Çıktı koridor rasterı, eşik değerinden biraz daha yüksek birikimli maliyetlere sahip hücreler içeriyor olabilir. Bu, bağlantısı kesilmiş hücreleri koridora bağlamak için eşikten biraz daha yüksek maliyetler atanan hücreleri kullanan geri yön rasterlarından kaynaklanmaktadır.</p>",
		geometricMedianName: "Geometrik Ortanca",
		geometricMedianSnip: "Geometrik Ortanca işlevi, çok bantlı görüntülerden oluşan bir zaman serisindeki pikseller arasında geometrik ortancayı hesaplar.",
		geometricMedianDesc: "<p>Bu işlev, görüntü yığını boyunca her piksel dizisi için geometrik bir ortanca piksel hesaplayarak zaman serisi görüntülerindeki gürültüyü ve aykırı değerleri azaltır. Algoritma, piksel spektrumlarındaki bantlar arasındaki spektral ilişkileri korur ve böylece çıktı, bitki örtüsü endeksleri gibi analizlerde kullanılabilir.</p><p>Bu işlev uygulanmadan önce, bulutlar ve gölgeler veri seti QA bandı kullanılarak maskelenmelidir.</p><p>Girdi görüntü 0 ile 1 arasında değerlerle yüzey yansıtıcılığı gibi kayan noktalı ise, 0,001'lik bir epsilon değeri kaliteli sonuçlar üretmelidir.</p>"
	},
	rfxArgs: {
		rasterName: "Raster",
		colorSchemeTypeName: "Renk Şeması Türü",
		colormapName: "Renk Haritası",
		colormapNameName: "Renk Haritası Adı",
		colorRampName: "Renk Tayfı",
		contrastOffsetName: "Kontrast Ofseti",
		brightnessOffsetName: "Parlaklık Ofseti",
		methodName: "Yöntem",
		bandNamesName: "Bant Adları",
		bandWavelengthsName: "Bant Dalga Boyları",
		bandIdsName: "Bant Kimlikleri",
		missingBandActionName: "Kayıp Bant İşlemi",
		conversionParametersName: "Dönüşüm Parametreleri",
		hillshadeTypeName: "Kabartma Türü",
		azimuthName: "Azimut",
		altitudeName: "Yükseklik",
		slopeTypeName: "Ölçeklendirme",
		zFactorName: "Z Faktörü",
		PSPowerName: "Piksel Boyut Gücü",
		PSZFactorName: "Piksel Boyut Faktörü",
		removeEdgeEffectName: "Varsayılan kenar piksel enterpolasyonunu devre dışı bırak",
		fromUnitName: "Birimden",
		toUnitName: "Birime",
		rasterTypeName: "Tür",
		minName: "Çıktı Minimumu",
		maxName: "Çıktı Maksimumu",
		minPercentName: "Minimum Kesme Yüzdesi",
		maxPercentName: "Maksimum Kesme Yüzdesi",
		numberOfStandardDeviationName: "Standart sapma sayısı",
		sigmoidStrengthLevelName: "Sigmoid Gücü Düzeyi",
		estimateStatsHistogramName: "Tahmini İstatistikler",
		DRAName: "Dinamik Aralık Ayarlama",
		statisticsName: "İstatistik",
		histogramsName: "Histogramlar",
		statisticsHistogramName: "İstatistikleri ve Histogramı Tanımla",
		computeGammaName: "Otomatik Gamma",
		useGammaName: "Gamma Kullan",
		gammaName: "Gama",
		inputNamesName: "Adlar",
		expressionName: "İfade",
		cellsizeTypeName: "Hücre Boyutu Türü",
		extentTypeName: "Uzantı Türü",
		classifierDefinitionFileName: "Girdi Tanım Dosyası",
		raster1Name: "Raster1",
		raster2Name: "Raster2",
		raster3Name: "Raster3",
		trueRasterName: "Doğru Raster",
		falseRasterName: "Yanlış Raster",
		noDataInterpretationName: "NoData Yorumlaması",
		noDataValuesName: "NoData Değerleri",
		includedRangesName: "Eklenen Aralıklar",
		curvatureTypeName: "Eğrilik Türü",
		rastersName: "Rasterlar",
		attributeTableName: "Tablo",
		attributeTableTypeName: "Tablo Tipi",
		rowsName: "Satır Sayısı",
		columnsName: "Sütun Sayısı",
		kernelName: "Kernel",
		mirrorEdgesName: "Ayna Kenarları",
		influencesName: "Etkiler",
		fieldsName: "Alanlar",
		remapsName: "Yeniden Haritalama Tablosu",
		evalFromName: "Değerlendirme Ölçek Kaynağı",
		evalToName: "Değerlendirme Ölçek Hedefi",
		weightsName: "Ağırlıklar",
		DEMName: "DEM",
		shortRangeIDWRadiusName: "Kısa Menzil IDW Yarıçapı",
		maxVoidWidthName: "Maks Boşluk Genişliği",
		sigmaGaussianName: "Adaptif Yumuşatma",
		contourTypeName: "Kontur Türü",
		zBaseName: "Z Tabanı",
		numberOfContoursName: "Kontur Sayısı",
		contourIntervalName: "Kontur Aralığı",
		nthContourLineInBoldName: "Kalın N. Kontur Çizgisi",
		featureClassName: "Girdi Detaylar",
		classIndexFieldName: "Alan",
		resolveOverlapMethodName: "Örtüşme Çözme Yöntemi",
		resamplingTypeName: "Örnekleme Türü",
		inputCellsizeName: "Girdi Hücre Boyutu",
		outputCellsizeName: "Çıktı Hücre Boyutu",
		pointFeatureClassName: "Çekirdek Noktalar",
		maxGrowthRadiusFieldName: "Maks Büyüme Yarıçapı Alanı",
		similarityThresholdFieldName: "Benzerlik Eşiği Alanı",
		fillValueFieldName: "Değer Alanını Doldur",
		spectralDetailName: "Spektral Ayrıntı [1..20]",
		spatialDetailName: "Mekansal Ayrıntı [1..20]",
		minNumPixelsPerSegmentName: "Piksel Cinsinden Minimum Kesim Boyutu",
		boundariesOnlyName: "Yalnızca segment sınırları",
		statisticsTypeName: "İstatistik Türü",
		fillNoDataOnlyName: "Yalnızca NoData piksellerini doldur",
		inputDataTypeName: "Girdi Verisi Türü",
		angleReferenceSystemName: "Açı Referans Sistemi",
		outputDataTypeName: "Çıktı Veri Türü",
		inputSamplePointFeatureClassName: "Girdi Örnekleri",
		valueFieldName: "Değer Alanı",
		rasterInfoName: "Raster Bilgisi",
		interpolationMethodName: "Enterpolasyon Yöntemi",
		radiusName: "Yarıçap",
		radianceGainValuesName: "Radyans Kazanımı",
		radianceBiasValuesName: "Sapma Değeri",
		reflectedGainValuesName: "Yansıtma Kazanımı",
		reflectedBiasValuesName: "Yansıtma Sapması",
		sunElevationName: "Güneş Yükseltisi (derece)",
		albedoName: "Albedo",
		scaleFactorName: "Ölçek Faktörü",
		offsetName: "Öteleme",
		thresholdTypeName: "Eşik Türü",
		thresholdsName: "Eşikler",
		undefinedClassName: "Tanımsız Sınıf",
		minValueName: "Min",
		maxValueName: "Maks",
		operationName: "İşlem",
		clippingTypeName: "Kesme Türü",
		clippingGeometryName: "Geometri Kırpma / Raster",
		extentName: "Çıktı Yayılımı",
		useInputFeatureGeometryName: "Kesilen geometri için girdi detaylarını kullan",
		remapDefinitionTypeName: "Yeniden Haritalama Tanım Türü",
		inputRangeName: "Girdi Aralıkları",
		outputValuesName: "Çıktı Değerleri",
		noDataRangeName: "NoData Aralıkları",
		inputFieldName: "Girdi Alanı",
		outputFieldName: "Çıktı Alanı",
		inputMaxFieldName: "Girdi Maks Alanı (isteğe bağlı)",
		remapTableTypeName: "Yeniden Haritalama Tablo Türü",
		allowUnmatchedName: "Eşleşmeyen Piksel Değerlerine İzin Ver",
		changeMissingValuesToNoDataName: "Eksik değerleri NoData olarak değiştir",
		visibleBandIDName: "Görünür Bant ID",
		infraredBandIDName: "Kızıl Ötesi Bant ID'si",
		scientificOutputName: "Özel Çıktı",
		bandIndexesName: "Bant Dizinleri",
		constantName: "Sabit",
		weightName: "Ağırlık",
		minimumName: "Minimum",
		maximumName: "Maksimum",
		sourceDataName: "Kaynak Raster",
		sourceFieldName: "Kaynak Alanı",
		costRasterName: "Maliyet Rasterı",
		maxDistanceName: "Maksimum Mesafe",
		valueRasterName: "Değer Rasterı",
		costMultiplierName: "Maliyetlere Uygulanacak Çarpan",
		startCostName: "Başlangıç Maliyeti",
		accumCostResistanceRateName: "Birikimli Maliyet Direnç Oranı",
		capacityName: "Kapasite",
		travelDirectionName: "Gezinti Yönü",
		cellSizeName: "Hücre Boyutu",
		populationFieldName: "Nüfus Alanı",
		areaUnitsName: "Alan Birimleri:",
		outputValueTypeName: "Çıktı Hücresi Değerleri",
		barriersName: "Girdi Bariyerleri",
		destinationDataName: "Hedef Raster",
		destinationFieldName: "Hedef Alanı",
		pathTypeName: "Yol Türü",
		observerFeaturesName: "Gözlemci Detayları",
		analysisMethodName: "Analiz Yöntemi",
		analysisTypeName: "Analiz Türü",
		verticalErrorName: "Dikey Hata",
		refractivityCoefficientName: "Kırılma Katsayısı",
		surfaceOffsetName: "Yüzey Ötelemesi",
		observerElevationName: "Gözlemci Yükseltisi",
		observerOffsetName: "Gözlemci Ötelemesi",
		innerRadiusName: "İç Yarıçap",
		innerRadiusIs3DDistanceName: "İç Yarıçap 3B Mesafedir",
		outerRadiusName: "Dış Yarıçap",
		outerRadiusIs3DDistanceName: "Dış Yarıçap 3B Mesafedir",
		horizontalStartAngleName: "Yatay Başlangıç Açısı",
		horizontalEndAngleName: "Yatay Bitiş Açısı",
		verticalUpperAngleName: "Dikey Yukarı Açı",
		verticalLowerAngleName: "Dikey Aşağı Açı",
		zoneDataName: "Bölge Rasterı",
		zoneFieldName: "Bölge Alanı",
		ignoreNoDataName: "Hesaplamalarda NoData’yı yoksay",
		temperatureRasterName: "Sıcaklık Rasterı",
		inTemperatureUnitsName: "Sıcaklık Birimleri",
		outHeatIndexTemperatureUnitsName: "Isı İndeks Birimleri",
		relativeHumidityRasterName: "Bağıl Nem Rasterı",
		outWindChillTemperatureUnitsName: "Rüzgar Soğutma Birimleri",
		windSpeedRasterName: "Rüzgar Hızı Rasterı",
		inWindSpeedUnitsName: "Rüzgar Hızı Birimleri",
		valueName: "Değer",
		propertyName: "Özellik Adı",
		jsonName: "Meta Veri JSON",
		zoneTableName: "Bölgeye Ait Öznitelik Tablosu",
		attributeFieldNames: "Öznitelik Alan Adları",
		backgroundName: "Arka Plan Değeri",
		whereClauseName: "Where Cümleciği",
		minimumValueFieldName: "Minimum Değer Alan Adı",
		maximumValueFieldName: "Maksimum Değer Alan Adı",
		outValueFieldName: "Çıktı Değeri Alan Adı",
		defaultValueName: "Varsayılan Çıktı Değeri",
		conversionMatrixName: "Dönüşüm Matriksi",
		IsPseudoColorOutputName: "Gerçek olmayan renk çıktısıdır",
		unmappedAsRandomColorName: "Eşleşmeyen Piksellere Rastgele Renk Atar",
		distanceMethodName: "Uzaklık Yöntemi",
		flowDirRasterName: "Akış Yönü Rasterı",
		pourPointName: "Dökme Noktası (Noktaları) Rasterı",
		pourPointFieldName: "Dökme Noktası Alanı",
		constantZName: "Sabit Z",
		zOffsetName: "Z Öteleme",
		geoIdName: "Geoit",
		calibrationTypeName: "Kalibrasyon Türü",
		filterTypeName: "Filtre Türü",
		filterSizeName: "Filtre Boyutu",
		noiseModelName: "Gürültü Modeli",
		noiseVarianceName: "Gürültü Varyansı",
		additiveNoiseMeanName: "İlave Gürültü Ortalaması",
		multiplicativeNoiseMeanName: "Çarpımsal Gürültü Ortalaması",
		numberofLooksName: "Bakış Sayısı",
		dampingFactorName: "Sönümleme Faktörü",
		maskRasterName: "Maske Rasterı",
		nibbleValuesName: "Eğer en yakın komşuluk ise NoData değerlerini kullan",
		nibbleNoDataName: "Küçük Parça NoData hücreleri",
		zLimitName: "Z Sınırı",
		flowDirectionTypeName: "Akış Yönü Tipi",
		weightRasterName: "Ağırlık Rasterı",
		forceEdgeName: "Tüm kenar hücrelerini dışa doğru akış için zorla",
		streamRasterName: "Akış Rasterı",
		surfaceRasterName: "Yüzey Rasteri",
		conversionType: "Dönüştürme Türü",
		distanceRaster1: "Mesafe Rasterı 1",
		distanceRaster2: "Mesafe Rasterı 2",
		costDistanceRaster: "Maliyet Mesafe Rasteri",
		costBacklinkRaster: "Düşük Maliyetli Hat Rasteri",
		overridesName: "Geçersiz Kılma",
		fieldName: "Alan",
		signatureFileOrUrl: "İmza Dosyası veya URL",
		redName: "Kırmızı",
		greenName: "Yeşil",
		blueName: "Mavi",
		infraredName: "Kızıl Ötesi",
		panchromaticName: "Pankromatik",
		multispectralName: "Çoklu tayf",
		pansharpeningType: "Düz-belirginleştirme Türü",
		sensorName: "Sensör",
		spatialReferenceName: "Mekansal Referans",
		xCellsizeName: "X Hücre Boyutu",
		yCellsizeName: "Y Hücre Boyutu",
		xOriginName: "X Kayıt Noktası",
		yOriginName: "Y Kayıt Noktası",
		percentileName: "Yüzde Değeri",
		neighborhoodType: "Komşuluk Türü",
		widthName: "Genişlik",
		heightName: "Yükseklik",
		startAngleName: "Başlangıç Açısı",
		endAngleName: "Bitiş Açısı",
		neighborhoodValues: "Komşuluk Değerleri",
		horizontalRaster: "Yatay Raster",
		horizontalFactor: "Yatay Faktör",
		verticalRaster: "Dikey Raster",
		verticalFactor: "Dikey Faktör",
		streamRaster: "Akış Rasterı",
		flowDirRaster: "Akış Yönü Rasterı",
		numberNeighborCells: "Komşu Hücre Sayısı",
		zoneConnectivity: "Dilim Bağlantısı",
		addLinkBehavior: "Bağlantı Ekle",
		excludedValue: "Hariç Tutulan Değer",
		constantFillCheck: "Sabitten Dolgu Rasteri Üret",
		fillRaster: "Dolgu Rasteri",
		constantFillValue: "Sabit Değer",
		inputBitPositions: "Girdi Biti",
		outputBitPositions: "Çıktı Biti",
		distanceTypeName: "Mesafe Tipi",
		barrierDataName: "Raster Bariyerleri",
		pourPointDataName: "Dökme Noktası Rasterı",
		accumulationRasterName: "Akış Birikimi Rasterı",
		snapDistanceName: "Yakalama Mesafesi",
		orderMethodName: "Sıralama Yöntemi",
		directionMeasurementName: "Ölçüm Yönü",
		processAsMultiband: "Çok Bantlı Olarak İşle",
		processMultidimensional: "Çok boyutlu olarak işle",
		forceFlowDirectionConvention: "Geri bağlantı rasterı için akış yönü kuralını zorla",
		initialAccumulation: "İlk Birikim",
		maximumAccumulation: "Maksimum Birikim",
		sourceLocationBands: "Çıktıda ek bantlar olarak kaynak satırı ve sütunu oluştur",
		backDirectionBand: "Çıktıda ek bant olarak geri yönü oluştur",
		numberOfCells: "Hücre Sayısı",
		zoneValues: "Bölge Değerleri",
		shrinkMethod: "Küçültme Yöntemi",
		expandMethod: "Genişletme Yöntemi",
		inputSpectralProfileType: "Spektral Profil Türü",
		spectralProfileFileName: "Spektral Profil",
		trainingFeatureFileName: "Eğitim Detayı",
		nonNegative: "Negatif değil",
		sumToOne: "Bire Toplama",
		randomDistribution: "Dağılım",
		meanName: "Ortalama",
		probabilityName: "Olasılık",
		alphaName: "Alfa",
		betaName: "Beta",
		rName: "r",
		nName: "N",
		seed: "Kaynak",
		randomNumberGenerator: "Rastgele Numara Oluşturucu",
		cellFactor: "Hücre Katsayısı",
		aggregationType: "Kümeleme teknikleri",
		extentHandling: "Gerekirse yayılımı genişlet",
		trendAnalysisDimensionName: "Boyut Adı",
		trendAnalysisType: "Trend Tipi",
		harmonicFrequency: "Harmonik Sıklık",
		polynomialOrder: "Polinomiyal Derece",
		cycleLengthName: "Döngü Uzunluğu",
		trendAnalysisRMSE: "RMSE",
		trendAnalysisR2: "R-Kare",
		trendAnalysisSlopePValue: "Eğim Katsayısının P-Değeri",
		trendAnalysisSeasonalPeriod: "Mevsimsel Dönem",
		cycleUnitName: "Döngü Birimi",
		predictDimensionValues: "Değerler",
		dimensionDefinitionType: "Boyut Tanımı",
		predictDimensionStart: "Başlangıç",
		predictDimensionEnd: "Son",
		predictDimensionInterval: "Değer Aralığı",
		dimensionUnit: "Birim",
		interpolationCellsizeName: "Enterpolasyon Hücre Boyutu",
		variableName: "Değişkenler",
		dimensionlessName: "Boyutsuzluk",
		mdimDefinition: "Boyut Tanımı",
		dimensionName: "Boyut",
		iterationStart: "İlk yinelemenin başlangıcı",
		iterationEnd: "İlk yinelemenin sonu",
		intervalStart: "Aralık başlangıcı",
		intervalEnd: "Aralık bitişi",
		stepName: "Adım",
		rangesName: "Aralıklar",
		minValue: "Minimum Değer",
		maxValue: "Maksimum Değer",
		changeAnalysisRasterName: "Değişiklik Analizi Rasterı",
		changeTypeName: "Türü Değiştir",
		segmentDate: "Segment Tarihi",
		changeDirectionName: "Yön Değiştir",
		maxNumChangesName: "Maksimum Değişiklik Sayısı",
		filterByYear: "Yıla Göre Filtrele",
		minimumYear: "Minimum Değer",
		maximumYear: "Maksimum Değer",
		filterByDuration: "Süreye Göre Filtrele",
		minimumDuration: "Minimum Süre",
		maximumDuration: "Maksimum Süre",
		filterByMagnitude: "Büyüklüğe Göre Filtrele",
		minimumMagnitude: "Minimum Büyüklük",
		maximumMagnitude: "Maksimum Büyüklük",
		filterByStartValue: "Başlangıç Değeriyle Filtrele",
		minimumStartValue: "Minimum Başlangıç Değeri",
		maximumStartValue: "Maksimum Başlangıç Değeri",
		filterByEndValue: "Bitiş Değeriyle Filtrele",
		minimumEndValue: "Minimum Bitiş Değeri",
		maximumEndValue: "Maksimum Bitiş Değeri",
		modelTypeName: "Model Türü",
		fromRasterName: "Rasterdan",
		toRasterName: "Raster'a",
		computeChangeMethod: "Değişiklik Hesaplama Yöntemi",
		fromClassValues: "Sınıf Değerlerinden (Örnek: 2 5)",
		toClassValues: "Sınıf Değerlerine (Örnek: 2 5)",
		keepMethod: "Filtre Yöntemi",
		useColorMethod: "Geçiş Renklerini Tanımla",
		detectChangeBands: "Değişikliği Algılama için Bantlar (0'dan başlar)",
		tmaskBands: "Zamansal Maskeleme için Bantlar (0'dan başlar)",
		chiSquaredThreshold: "Değişikliği Algılamak için Ki-kare Eşiği",
		minAnomaly: "Minimum Ardışık Anomali Gözlemleri",
		updatingFrequency: "Sığdırma Sıklığını Güncelleme (yıl olarak)",
		distanceAccumulationRasterName: "Mesafe Birikim Rasterı",
		costBackdirectionRasterName: "Geri Yönü veya Akış Yönü Rasterı",
		rasterCollectionName: "Raster Koleksiyonu",
		itemFunctionName: "Öge İşlevi",
		aggregationFunctionName: "Kümeleme İşlevi",
		processingFunctionName: "İşleme İşlevi",
		aggregationDefinitionName: "Kümeleme Tanımı",
		queryGeometryName: "Sorgu Geometrisi",
		factorFunctionZeroFactor: "Sıfır Faktörü",
		factorFunctionCutAngle: "Kesme Açısı",
		factorFunctionSideFactor: "Yan Faktör",
		factorFunctionSlope: "Eğim",
		factorFunctionLowCutAngle: "Düşük Kesme Açısı",
		factorFunctionHighCutAngle: "Yüksek Kesme Açısı",
		factorFunctionCosPower: "Kosinüs Gücü",
		factorFunctionSecPower: "Sekant Gücü",
		factorFunctionTablePath: "Tablo Yolu",
		processingBand: "İşleme Bandı",
		processingBandName: "İşleme Bandının Adı",
		snappingDate: "Yakalama Tarihi",
		maxNumSegments: "Maksimum Segment Sayısı",
		vertexCountOvershoot: "Verteks Sayısı Aşıldı",
		spikeThreshold: "Spike Eşiği",
		recoveryThreshold: "Kurtarma Eşiği",
		minNumObs: "Minimum Gözlem Sayısı",
		pValueThreshold: "P-Değeri Eşiği",
		bestModelProportion: "En İyi Model Oranı",
		preventOneYearRecovery: "Bir Yıl Kurtarmayı Önle",
		recoveryIncreaseTrend: "Kurtarmada Artan Trend Var",
		outputOtherBands: "Çıktı Diğer Bantlar",
		sortType: "Sıralama Türü",
		numberOfRuns: "Yayılımı çalıştır ve iki kez büz",
		percentileValue: "Yüzde Değeri",
		percentileInterpolationType: "Yüzde enterpolasyon türü",
		rasterInfoProperty: "Özellik",
		rasterInfoValue: "Değer",
		rasterInfoColumns: "Sütunlar",
		rasterInfoRows: "Satırlar",
		rasterInfoBandCount: "Bant Sayısı",
		rasterInfoPixelSizeX: "Hücre Boyutu X",
		rasterInfoPixelSizeY: "Hücre Boyutu Y",
		rasterInfoPixelType: "Piksel Tipi",
		rasterExtentTop: "En Üst",
		rasterExtentBottom: "Alt",
		rasterExtentLeft: "Sol",
		rasterExtentRight: "Sağ",
		rasterStatisticsNotCalculated: "İstatistikler hesaplanmadı.",
		spatialReferenceProjection: "İzdüşüm",
		spatialReferenceWkid: "WKID",
		spatialReferenceLatestWkid: "Önceki WKID",
		spatialReferenceWkt: "WKT",
		spatialReferenceVcsWkid: "VCSWKID",
		spatialReferenceLatestVcsWkid: "Önceki VCSWKID",
		spatialReferenceAuthority: "Yetki",
		spatialReferenceLinearUnit: "Doğrusal Birim",
		spatialReferenceAngularUnit: "Açısal Birim",
		spatialReferenceFalseEasting: "Yanlış doğu yönelimi",
		spatialReferenceFalseNorthing: "Yanlış Kuzey Yönelimi",
		spatialReferenceCentralMeridian: "Merkezi Meridyen",
		spatialReferencePrimeMeridian: "Başlangıç Meridyeni",
		spatialReferenceStandardParallel1: "Standart Paralel 1",
		spatialReferenceStandardParallel2: "Standart Paralel 2",
		spatialReferenceLatitudeOfOrigin: "Başlangıç Enlemi",
		spatialReferenceAuxiliarySphereType: "Yardımcı Küre Türü",
		spatialReferenceDatum: "Referans",
		spatialReferenceSpheroid: "Küresel",
		spatialReferenceSemimajorAxis: "Yarı Büyük Eksen",
		spatialReferenceSemiminorAxis: "Yarı Küçük Eksen",
		spatialReferenceInverseFlattening: "Ters Düzleştirme",
		inputDefinitionFileName: "Girdi Tanım Dosyası",
		deleteName: "Sil",
		addVariableName: "Değişken ekle",
		maxNumPixelsPerSegment: "Piksel Cinsinden Maksimum Segment Boyutu",
		forwardWindowName: "Pencere İleri",
		backwardWindowName: "Pencere Geri",
		noDataHandlingName: "NoData Yürütme",
		circularWrapValueName: "Dairesel Sarım Değeri",
		fromClassNameFieldName: "Kaynak Rasterda Sınıf Adları için Alan Adı",
		toClassNameFieldName: "Hedef Rasterda Sınıf Adları için Alan Adı",
		targetRasterName: "Hedef Raster",
		circularWrapValue: "Dairesel Sarım Değeri",
		bandIndexesR: "Kırmızı İfade",
		bandIndexesG: "Yeşil İfade",
		bandIndexesB: "Mavi İfade",
		exampleName: "Örnek",
		inputName: "Girdi",
		outputName: "Çıktı",
		optionalName: "İsteğe bağlı",
		browseDefinitionFile: "Tanım Dosyasına Gözat",
		selectDefinitionFile: "Girdi Tanım Dosyasını Seç",
		inputDefinitionURL: "Girdi Tanım Dosyası URL'si",
		enterDefinitionFileURL: "Tanım Dosyası URL'sini Gir",
		browseXMLFile: "XML Dosyasına Gözat",
		selectStatsFile: "İstatistikler ve Histogramlar Dosyasını Seç",
		enterXMLFileURL: "XML Dosyası URL'sini Gir",
		xmlFileURL: "XML Dosyası URL'si",
		circularCalculation: "Dairesel İstatistikleri Hesapla",
		localSurfaceType: "Yerel Yüzey Türü",
		surfaceParameterType: "Parametre Türü",
		neighborhoodDistance: "Komşuluk Mesafesi",
		useAdaptiveNeighborhood: "Uyarlanabilir Komşuluk Kullan",
		outputSlopeType: "Çıktı Eğim Ölçümü",
		projectAzimuths: "Jeodezik Azimutları İzdüşümlendir",
		useEquatorialAspect: "Ekvatoral Bakı Kullan",
		zUnit: "Z Birim",
		analysisMask: "Analiz Maskesi",
		stdDeviation: "Standart Sapma",
		"true": "True",
		"false": "False",
		costDistanceRaster1: "Girdi Birikimli Maliyet Mesafesi Rasterı 1",
		costDistanceRaster2: "Girdi Birikimli Maliyet Mesafesi Rasterı 2",
		threshold: "Eşik",
		thresholdMethod: "Eşik Yöntemi",
		directionRaster1: "Girdi Geri Yönü Rasterı 1",
		directionRaster2: "Girdi Geri Yönü Rasterı 2",
		maxIterations: "Maksimum Yineleme Sayısı",
		epsilon: "Epsilon"
	},
	enumLabels: {
		attributeTableTypeManual: "El İle",
		attributeTableTypeExternal: "Harici",
		clrSchemeTypeColormap: "Renk Haritası",
		clrSchemeTypeColorRamp: "Renk Paleti",
		colormapTypeElevation: "Yükselti",
		colormapTypeGray: "Gri",
		colormapTypeNDVI: "NDVI",
		colormapTypeNDVI2: "NDVI2",
		colormapTypeNDVI3: "NDVI3",
		colormapTypeRandom: "Rastgele",
		none: "Yok",
		slopeTypeAdjusted: "Ayarlanmış",
		slopeTypeDegree: "Derece",
		slopeTypePercentRise: "PercentRise",
		slopeTypeScaled: "Ölçekli",
		stretchTypeMinMax: "MinMaks",
		stretchTypePercentMinMax: "YüzdeMinMaks",
		stretchTypeSigmoid: "Sigmoid",
		stretchTypeStdDev: "Standart Sapma",
		hillshadeTypeSimple: "Geleneksel",
		hillshadeTypeMultidirectional: "Çok Yönlü",
		bandComboByNames: "Bant Adları",
		bandComboByWavelength: "Bant Dalga Boyları",
		bandComboByIDs: "Bant Kimlikleri",
		missingBandActionBestMatch: "En İyi Eşleşme",
		missingBandActionFail: "Başarısız",
		unitTypeCelsius: "Santigrat",
		unitTypeCentimeters: "Santimetre",
		unitTypeDecimeters: "Desimetre",
		unitTypeFahrenheit: "Fahrenhayt",
		unitTypeFeet: "Feet",
		unitTypeFeetPerSec: "Fit / Saniye (fit/sn)",
		unitTypeInches: "İnç",
		unitTypeKelvin: "Kelvin",
		unitTypeKilometers: "Kilometre",
		unitTypeKmsPerHour: "Kilometre / Saat (km/sa)",
		unitTypeKnots: "Knot (kn)",
		unitTypeMeters: "Metre",
		unitTypeMetersPerSec: "Metre / Saniye (m/sn)",
		unitTypeMiles: "Mil",
		unitTypeMilesPerHour: "Mil / Saat (m/sa)",
		unitTypeMillimeters: "Milimetre",
		unitTypeNauticalMiles: "Deniz Mili",
		unitTypeYards: "Yarda",
		unitTypeDecimalDegrees: "Ondalık derece",
		unitTypePoints: "Noktalar",
		unitTypeUnknown: "Bilinmeyen",
		unitTypeSqMapUnits: "Metrekare Birim",
		unitTypeSqMiles: "Milkare",
		unitTypeSqKms: "Kilometrekare",
		unitTypeAcres: "Akre",
		unitTypeHectares: "Hektar",
		unitTypeSqYards: "Yardakare",
		unitTypeSqFt: "Fitkare",
		unitTypeSqInches: "İnçkare",
		unitTypeSqMts: "Metrekare",
		unitTypeSqCms: "Santimetre Kare",
		unitTypeSqMms: "Milimetre Kare",
		cellsizeTypeFirst: "İlki",
		cellsizeTypeMin: "Minimumu",
		cellsizeTypeMax: "Maksimumu",
		cellsizeTypeMean: "Ortalaması",
		cellsizeTypeLast: "Sonuncusu",
		extentTypeFirst: "İlki",
		extentTypeIntersection: "Kesişimi",
		extentTypeUnion: "Birleşimi",
		extentTypeLast: "Sonuncusu",
		noDataInterpretAny: "Herhangi Birini Eşleştir",
		noDataInterpretAll: "Tümünü Eşleştir",
		curvatureTypeStandard: "Standart",
		curvatureTypeProfile: "Profil",
		curvatureTypePlanform: "Planform",
		filterTypeLineDetectionHorizontal: "Yatayda Çizgi Algılama",
		filterTypeLineDetectionVertical: "Dikeyde Çizgi Algılama",
		filterTypeLineDetectionLeftDiagonal: "Sol Çaprazda Çizgi Algılama",
		filterTypeLineDetectionRightDiagonal: "Sağ Çaprazda Çizgi Algılama",
		filterTypeGradientNorth: "Dereceli Kuzey",
		filterTypeGradientWest: "Dereceli Batı",
		filterTypeGradientEast: "Dereceli Doğu",
		filterTypeGradientSouth: "Dereceli Güney",
		filterTypeGradientNorthEast: "Dereceli Kuzey Doğu",
		filterTypeGradientNorthWest: "Dereceli Kuzey Batı",
		filterTypeSmoothArithmeticMean: "Yumuşak Aritmetik Ortalama",
		filterTypeSmoothing3x3: "Yumuşatma 3x3",
		filterTypeSmoothing5x5: "Yumuşatma 5x5",
		filterTypeSharpening3x3: "Keskinleştirme 3x3",
		filterTypeSharpening5x5: "Keskinleştirme 5x5",
		filterTypeLaplacian3x3: "Laplas işleci 3x3",
		filterTypeLaplacian5x5: "Laplas işleci 5x5",
		filterTypeSobelHorizontal: "Yatay Sobel",
		filterTypeSobelVertical: "Dikey Sobel",
		filterTypeSharpen: "Keskinleştir",
		filterTypeSharpen2: "Daha Fazla Keskinleştir",
		filterTypePointSpread: "Nokta Yayılımı",
		userDefined: "Kullanıcı Tanımlı",
		ContourTypeLines: "Kontur Çizgileri",
		ContourTypeFill: "Kontur Dolgusu",
		ContourTypeSmoothOnly: "Yalnızca Yüzeyi Düzelt",
		rasterizeFirst: "Birinci",
		rasterizeLast: "Sonuncu",
		rasterizeSmallest: "En Küçük",
		rasterizeLargest: "En Büyük",
		resamplingTypeNearest: "En Yakın Komşuluk",
		resamplingTypeBilinear: "İkili Enterpolasyon",
		resamplingTypeCubic: "Kubik Konvolüsyon",
		resamplingTypeMajority: "Çoğunluk",
		resamplingTypeBilinearPlus: "İkili Enterpolasyon+",
		resamplingTypeGauss: "Gauss Bulanıklığı",
		resamplingTypeGaussPlus: "Gauss Bulanıklığı+",
		resamplingTypeAverage: "Ortalama",
		resamplingTypeMinimum: "Minimum",
		resamplingTypeMaximum: "Maksimum",
		resamplingTypeVectorAvg: "Vektör Ortalaması",
		minimum: "Minimum",
		maximum: "Maksimum",
		mean: "Ortalama",
		stdDeviation: "Standart Sapma",
		uvMagDirTypeUV: "U-V",
		uvMagDirTypeMagDir: "Genlik-Yön",
		unknown: "Bilinmeyen",
		angleRefSysGeographic: "Coğrafi",
		angleRefSysArithmetic: "Aritmetik",
		interpolateIrregularDataNearest: "En Yakın Komşuluk",
		interpolateIrregularDataBilinear: "İkili",
		interpolateIrregularDataTinningLinear: "Lineer Kutulama",
		interpolateIrregularDataTinningNaturalNeighbor: "Doğal Komşuluk",
		interpolateIrregularDataTinningIDW: "Ters Mesafe Ağırlıklı",
		esriRasterThresholdTypeConstant: "Sabit",
		esriRasterThresholdTypeOtsu: "Otsu",
		esriRasterThresholdTypeTsai: "Tsai",
		esriRasterThresholdTypeKapur: "Kapur",
		esriRasterThresholdTypeKittler: "Kittler",
		esriRasterThresholdTypeRosin: "Rosin",
		argStatsTypeMax: "Arg Maks",
		argStatsTypeMin: "Arg Min",
		argStatsTypeMedian: "Arg Median",
		argStatsTypeDuration: "Süre",
		arithmeticOpPlus: "Artı",
		arithmeticOpMinus: "Çıkar",
		arithmeticOpMultiply: "Çarp",
		arithmeticOpDivide: "Bölme",
		arithmeticOpPower: "Güç",
		arithmeticOpMode: "Mod",
		clipTypeOutside: "Dışarı Kırp",
		clipTypeInside: "İçeri Kırp",
		yes: "Evet",
		no: "Hayır",
		densities: "Yoğunluklar",
		expectedCounts: "Beklenen Sayılar",
		planar: "Düzlemsel",
		geodesic: "Jeodezik",
		eachCell: "Her Hücre",
		eachZone: "Her Bölge",
		bestSingle: "En İyi Tek",
		allSightlines: "Tüm Görüş Çizgileri",
		perimeterSightlines: "Çevre Görüş Çizgileri",
		frequency: "Frekans",
		observers: "Gözlemciler",
		majority: "Çoğunluk",
		median: "Ortanca",
		minority: "Azınlık",
		percentile: "Yüzdeli",
		range: "Aralık",
		sum: "Toplam",
		variety: "Çeşitli",
		ndvi: "NDVI",
		savi: "SAVI",
		bandArithmeticMethodTSAVI: "Dönüştürülmüş SAVI",
		bandArithmeticMethodMSAVI: "Değiştirilmiş SAVI",
		bandArithmeticMethodSultan: "Sultan'ın Formülü",
		gemi: "GEMI",
		pvi: "PVI",
		gvi: "GVI (Landsat TM)",
		vari: "VARI",
		sr: "SR",
		gndvi: "GNDVI",
		ndvire: "NDVIre",
		srre: "SRre",
		mtvi2: "MTVI2",
		rtviCore: "RTVICore",
		cire: "CIre",
		cig: "CIg",
		ndwi: "NDWI (Normalize edilmiş fark su indeksi)",
		evi: "EVI (Geliştirilmiş bitki örtüsü indeksi)",
		ironOxide: "Demir Oksit",
		ferrousMinerals: "Demir İçeren Madenler",
		clayMinerals: "Kil İçeren Madenler",
		wndwi: "WNDWI (Ağırlıklı normalize edilmiş fark su indeksi)",
		bai: "BAI",
		mndwi: "MNDWI",
		nbr: "NBR",
		ndbi: "NDBI",
		ndmi: "NDMI",
		ndsi: "NDSI",
		localSquareRoot: "Kare Kök",
		localACos: "ACos",
		localASin: "ASin",
		localATan: "ATan",
		localATanH: "ATanH",
		localAbs: "Abs",
		localBitwiseNot: "Bitwise Not",
		localBooleanNot: "Boolean Not",
		localCos: "Cos",
		localCosH: "CosH",
		localExp: "Üs",
		localExp10: "Üs 10",
		localExp2: "Üs 2",
		localInt: "Tamsayı",
		localIsNull: "Is Null",
		localFloat: "Float",
		localLn: "Ln",
		localLog10: "Log10",
		localLog2: "Log2",
		localNegate: "Negatif Yap",
		localRoundDown: "Aşağı Yuvarla",
		localRoundUp: "Yukarı Yuvarla",
		localSin: "Sin",
		localSinH: "SinH",
		localTan: "Tan",
		localTanH: "TanH",
		localACosH: "ACosH",
		localASinH: "ASinH",
		localPlus: "Artı",
		localMinus: "Çıkar",
		localTimes: "Çarpma",
		localPower: "Güç",
		localBitwiseAnd: "Bitwise And",
		localBitwiseLeftShift: "Bitwise Left Shift",
		localBitwiseOr: "Bitwise Or",
		localBitwiseRightShift: "Bitwise Right Shift",
		localBitwiseXor: "Bitwise Xor",
		localBooleanAnd: "Boolean And",
		localBooleanOr: "Boolean Or",
		localBooleanXor: "Boolean Xor",
		localDivide: "Bölme",
		localEqualTo: "Eşittir",
		localGreaterThan: "Büyüktür",
		localGreaterThanEqual: "Büyük Eşit",
		localLessThan: "Küçüktür",
		localLessThanEqual: "Küçük Eşit",
		localMod: "Mod",
		localNotEqual: "Eşit Değil",
		localATan2: "ATan2",
		localSquare: "Kare",
		localSetNull: "Null Olarak Ayarla",
		remapDefTypeList: "Liste",
		remapDefTypeTable: "Tablo",
		remapTableTypeSimple: "Basit",
		remapTableTypeDynamic: "Dinamik",
		remapTableTypeReassignment: "Yeniden Atama",
		geomCorrectionByConstZ: "Sabit Z Kullan",
		geomCorrectionByDEM: "DEM Kullan",
		radarCalibBetaNought: "Beta sıfır ayarı",
		radarCalibSigmaNought: "Sigma sıfır ayarı",
		radarCalibGammaNought: "Gama sıfır ayarı",
		speckleFilterTypeLee: "Lee Süzgeci",
		speckleFilterTypeEnhancedLee: "Gelişmiş Lee Süzgeci",
		speckleFilterTypeFrost: "Frost Süzgeçi",
		speckleFilterTypeKuan: "Kuan Süzgeçi",
		speckleNoiseModelMul: "Artan Gürültü",
		speckleNoiseModelAdd: "Bağımlı Gürültü",
		speckleNoiseModelAddnMul: "Bağımlı ve Artan Gürültü",
		mosaicOpTypeFirst: "Birinci",
		mosaicOpTypeLast: "En Son",
		mosaicOpTypeMin: "Min",
		mosaicOpTypeMax: "Maks",
		mosaicOpTypeMean: "Ortalama",
		mosaicOpTypeBlend: "Karıştır",
		mosaicOpTypeSum: "Toplam",
		integer: "Tamsayı",
		rfxD8: "D8",
		rfxMFD: "MFD",
		dinf: "Dinf",
		vertical: "Dikey",
		horizontal: "Yatay",
		localCellStatisticsMajority: "Çoğunluk",
		localCellStatisticsMax: "Maksimum",
		localCellStatisticsMean: "Ortalama",
		localCellStatisticsMedian: "Ortanca",
		localCellStatisticsMin: "Minimum",
		localCellStatisticsMinority: "Azınlık",
		localCellStatisticsRange: "Aralık",
		localCellStatisticsStdDev: "Standart Sapma",
		localCellStatisticsSum: "Toplam",
		localCellStatisticsVariety: "Çeşitli",
		localCellStatisticsMajorityIgnoreND: "Çoğunluk (NoData'yı Yoksay)",
		localCellStatisticsMaxIgnoreND: "Maksimum (NoData'yı Yoksay)",
		localCellStatisticsMeanIgnoreND: "Ortalama (NoData'yı Yoksay)",
		localCellStatisticsMedianIgnoreND: "Medyan (NoData'yı Yoksay)",
		localCellStatisticsMinIgnoreND: "Minimum (NoData'yı Yoksay)",
		localCellStatisticsMinorityIgnoreND: "Azınlık (NoData'yı Yoksay)",
		localCellStatisticsRangeIgnoreND: "Aralık (NoData'yı Yoksay)",
		localCellStatisticsStdDevIgnoreND: "Standart Sapma (NoData'yı Yoksay)",
		localCellStatisticsSumIgnoreND: "Toplam (NoData'yı Yoksay)",
		localCellStatisticsVarietyIgnoreND: "Çeşitlilik (NoData'yı Yoksay)",
		localCellStatisticsTypePercentileIgnoreND: "Yüzdelik (NoData'yı Yoksay)",
		fromSource: "Kaynaktan",
		toSource: "Kaynağa",
		colorspaceConversionRgbToHsv: "RGB > HSV",
		colorspaceConversionHsvToRgb: "HSV > RGB",
		pansharpenTypeIHS: "IHS",
		pansharpenTypeBrovey: "Brovey",
		pansharpenTypeEsri: "Esri",
		pansharpenTypeMean: "Ortalama",
		pansharpenTypeGramSchmidt: "Gram-Schmidt",
		rectangleNeighborhood: "Dikdörtgen",
		circleNeighborhood: "Daire",
		annulusNeighborhood: "Anülus",
		wedgeNeighborhood: "Kama",
		irregularNeighborhood: "Düzensiz",
		weightNeighborhood: "Ağırlık",
		four: "Dört",
		eight: "Sekiz",
		within: "İçinde",
		cross: "Çapraz",
		addLink: "Bağlantı Ekle",
		noLink: "Bağlantı Yok",
		weightedMean: "Ağırlıklı Ortalama",
		ls8QCBitPatternCirrus: "Landsat 8 Sirrus",
		ls8QCBitPatternCloud: "Landsat 8 Bulut",
		ls8QCBitPatternCloudShadow: "Landsat 8 Bulut Gölgesi",
		ls8QCBitPatternDesignatedFill: "Landsat 8 Atanmış Dolgu",
		ls8QCBitPatternDroppedFrame: "Landsat 8 Düşürülmüş Kare",
		ls8QCBitPatternSnowIce: "Landsat 8 Kar/Buz",
		ls8QCBitPatternTerrainOcclusion: "Landsat 8 Arazi Oklüzyonu",
		ls8QCBitPatternVegetation: "Landsat 8 Bitki Örtüsü",
		ls8QCBitPatternWater: "Landsat 8 Su",
		downStream: "Aşağı akım",
		upStream: "Yukarı akım",
		strahler: "STRAHLER",
		shreve: "SHREVE",
		currentSlice: "Geçerli Dilim",
		allSlices: "Tüm Dilimler",
		expandDistance: "MESAFE",
		expandMorphological: "MORFOLOJİK",
		spectralProfileFile: "Spektral Profil",
		trainingFeatureFile: "Eğitim Detayı",
		randomDistributionTypeUniform: "Birörnek",
		randomDistributionTypeUniformInteger: "Tamsayı",
		randomDistributionTypeNormal: "Normal",
		randomDistributionTypeExponential: "Üstel",
		randomDistributionTypePoisson: "Poisson",
		randomDistributionTypeGamma: "Gama",
		randomDistributionTypeBinomial: "Binom",
		randomDistributionTypeGeometric: "Geometrik",
		randomDistributionTypeNegativeBinomial: "Negatif Binom",
		randomGeneratorTypeStandardCRand: "Standard C Rand",
		randomGeneratorTypeAlgorithmACM599: "ACM toplamalı algoritm 599",
		randomGeneratorTypeMersenneTwister: "Mersenne Twister",
		sumName: "Toplam",
		medainName: "Ortanca",
		trendLinear: "Lineer",
		trendHarmonic: "Harmonik",
		trendPolynomial: "Polinom",
		trendMannKendall: "Mann-Kendall",
		trendSeasonalKendall: "Mevsimsel Kendall",
		dimensionByValue: "Değere Göre",
		dimensionByInterval: "Aralığa göre",
		mdimDefTypeAll: "Tümü",
		mdimDefTypeByValues: "Değerlere göre",
		mdimDefTypeByRanges: "Aralıklara göre",
		mdimDefTypeByIteration: "Yinelemeye göre",
		mdimDefTypeByInterval: "Aralığa göre",
		mdimDefTypeByTargetRaster: "Hedef Rastere Göre",
		esriTimeUnitsHours: "Saat",
		esriTimeUnitsDays: "Gün",
		esriTimeUnitsWeeks: "Haftalar",
		esriTimeUnitsMonths: "Ay",
		esriTimeUnitsYears: "Yıl",
		esriTimeIntervalKeywordHourly: "Saatlik",
		esriTimeIntervalKeywordDaily: "Günlük",
		esriTimeIntervalKeywordWeekly: "Haftalık",
		esriTimeIntervalKeywordDekadly: "On günlük",
		esriTimeIntervalKeywordPentadly: "Beş günlük",
		esriTimeIntervalKeywordMonthly: "Aylık",
		esriTimeIntervalKeywordQuarterly: "Çeyreklik",
		esriTimeIntervalKeywordYearly: "Yıllık",
		esriTimeIntervalKeywordRecurringDaily: "Günlük olarak tekrarlanır",
		esriTimeIntervalKeywordRecurringWeekly: "Haftalık tekrarlanır",
		esriTimeIntervalKeywordRecurringMonthly: "Aylık tekrarlanır",
		esriTimeIntervalKeywordRecurringQuarterly: "Üç ayda bir tekrarlanır",
		aggDefTypeAll: "Tümü",
		aggDefTypeIntervalKeyword: "Aralık Anahtar Sözcüğü",
		aggDefTypeIntervalValue: "Aralık Değeri",
		aggDefTypeIntervalRanges: "Aralık Değer Grubu Aralıkları",
		latestChange: "Son Değişikliğin Zamanı",
		earliestChange: "İlk Değişikliğin Zamanı",
		largestChange: "En Büyük Değişikliğin Zamanı",
		numberOfChanges: "Değişiklik Sayısı",
		longestChange: "En Uzun Değişikliğin Zamanı",
		shortestChange: "En Kısa Değişikliğin Zamanı",
		fastestChange: "En Hızlı Değişikliğin Zamanı",
		slowestChange: "En Yavaş Değişikliğin Zamanı",
		allChanges: "Tümü",
		increaseChanges: "Artış",
		decreaseChanges: "Azalış",
		segmentBeginning: "Segmentin başlangıcı",
		segmentEnd: "Segmentin sonu",
		esriComputeChangeMethodDifference: "Fark",
		esriComputeChangeMethodRelativeDifference: "Göreli Fark",
		esriComputeChangeMethodCategorical: "Kategorik Fark",
		esriComputeChangeMethodMultispectralEuclideanDistance: "Spektral Öklid Uzaklığı",
		esriComputeChangeMethodMultispectralAngularDifference: "Spektral Açı Farkı",
		esriComputeChangeMethodMultispectralAxisWithBiggestChange: "En Fazla Değişiklik Yapılan Bant",
		esriComputeChangeKeepAll: "Tümünü Tut",
		esriComputeChangeKeepChangedOnly: "Sadece Değiştirilen Pikselleri Tut",
		esriComputeChangeKeepUnchangedOnly: "Sadece Değiştirilmeyen Pikselleri Tut",
		esriComputeChangeUseColorAverage: "Renklerden Ve Renklere Ortalama",
		esriComputeChangeUseColorFrom: "Renklerden Seçeneğini Kullan",
		esriComputeChangeUseColorTo: "Renklere Seçeneğini Kullan",
		factorFunctionBinary: "İkili",
		factorFunctionForward: "İleri",
		factorFunctionLinear: "Çizgisel",
		factorFunctionInvLinear: "Ters Lineer",
		factorFunctionTable: "Tablo",
		factorFunctionSymLinear: "Simetrik Doğrusal",
		factorFunctionSymInvLinear: "Simetrik Ters Doğrusal",
		factorFunctionCos: "Kosinüs",
		factorFunctionSec: "Sekant",
		factorFunctionCosSec: "Kosinüs Sekant",
		factorFunctionSecCos: "Sekant Kosinüs",
		noSort: "Sıralamayın",
		ascend: "Artan",
		descend: "Azalan",
		autoDetect: "Otomatik algıla",
		nearest: "En Yakın",
		linear: "Doğrusal",
		esriMonthJanuary: "Ocak",
		esriMonthFebruary: "Şubat",
		esriMonthMarch: "Mart",
		esriMonthApril: "Nisan",
		esriMonthMay: "Mayıs",
		esriMonthJune: "Haziran",
		esriMonthJuly: "Temmuz",
		esriMonthAugust: "Ağustos",
		esriMonthSeptember: "Eylül",
		esriMonthOctober: "Ekim",
		esriMonthNovember: "Kasım",
		esriMonthDecember: "Aralık",
		dimensionalMovingIgnoreNoData: "Veri",
		dimensionalMovingPropagateNoData: "NoData",
		dimensionalMovingFillOnlyNoData: "NoData Doldur",
		circularMean: "Dairesel Ortalama",
		circularName: "Dairesel",
		arithmeticName: "Aritmetik",
		slopeName: "Eğim",
		aspectName: "Bakı",
		meanCurvature: "Ortalama eğrilik",
		profileCurvature: "Profil (normal eğim çizgisi) eğriliği",
		tangentialCurvature: "Teğet (normal kontur) eğriliği",
		planCurvature: "Plan (izdüşümlendirilen kontur) eğriliği",
		contourGeodesicTorsion: "Kontur jeodezik bükme",
		gaussianCurvature: "Gaussian eğriliği",
		casoratiCurvature: "Casorati eğriliği",
		localSurfaceTypeQuadratic: "İkinci Derece",
		localSurfaceTypeBiquadratic: "Dördüncü Derece",
		thresholdNoThreshold: "Eşik Yok",
		thresholdPercentLeastCost: "En Az Maliyet Yüzdesi",
		thresholdAccumulativeCost: "Birikimli Maliyet",
		clrmapTypeHillshade: "Kabartma"
	},
	categoryLabels: {
		sourceCharacteristics: "Kaynak Karakteristikleri",
		neighborhoodSettings: "Komşuluk Ayarları",
		statistics: "İstatistik",
		gamma: "Gama",
		viewshedParameters: "Görüş Alanı Parametreleri",
		observerParameters: "Gözlemci Parametreleri",
		irregularDataInterpolation: "Düzensiz Veri Enterpolasyonu",
		modelStatistics: "Model İstatistikleri",
		aggregationDef: "Kümeleme Tanımı",
		filterByAttributes: "Özniteliklere Göre Filtrele",
		percentileName: "Yüzdeli",
		rasterInfo: "Raster Bilgisi",
		extent: "Yayılım",
		spatialReference: "Mekansal Kaynak"
	},
	outputRasterHelpTexts: {
		outputName: "<p>Oluşturulacak ve haritaya eklenecek katmanın adı.</p>",
		resultType: "<p>Oluşturulacak çıktının türü. Çıktılar Döşemeli görüntü katmanları veya Dinamik görüntü katmanları olabilir.</p>",
		saveResultIn: "<p><b>İçeriğim</b> içinde sonucun kaydedileceği klasörün adı.</p>"
	},
	analysisEnvironmentsHelpTexts: {
		description: "<p>Map Viewer içinde analiz için ortam ayarları. </p>",
		outSR: "<p>Analiz ve sonuç katmanı için koordinat sistemini belirtir.</p>",
		extent: "<p>Analiz için kullanılacak alanı belirtir.</p>",
		snapRaster: "<p>Belirtilen rastera uydurma katmanının hücre hizalamasıyla eşleşecek şekilde çıktının yayılımını ayarlar.</p>",
		cellSize: "<p>Analiz ve çıktı raster katmanını oluşturmak için kullanılacak olan hücre boyutunu veya çözünürlüğü belirtir.</p>",
		mask: "<p>Analiz için yalnızca maske alanına giren hücrelerin kullanılacağı bir maske katmanını belirtir.</p>",
		resamplingMethod: "<p>Girdi ve çıktı rasterları hizalanmadığında piksel değerlerinin ara değerlerinin nasıl hesaplanacağını belirtir.</p>"
	},
	mainGenStrings: {
		unsupportedDataType: "Desteklenmeyen tür",
		currentlyUnsupported: " ${missingType} için varsayılan bir düzenleyici beklemededir ancak yakında kullanıma sunulacaktır. Dizi tabanlı girdileri belirtmek için geçici yer tutucu metin kutusu.",
		unsupportedOverrideWarning: "Aşağıdaki parametrelerle çalışırken daha iyi bir kullanıcı deneyimi sağlayan bir geçersiz kılma düzenleyici bileşeni beklemededir ancak yakında kullanıma sunulacaktır:",
		overrideWidgetMissing: "Geçersiz kılma düzenleyici bileşeni eksik!",
		uiIncomplete: "İş gönderimi başarısız oldu. Gerekli alanlardan bazıları eksik veya kullanıcı arayüzünde eksik olduğundan işlev çalıştırılamıyor.",
		count: "Sayım",
		selectVariables: "Değişken seç",
		selectFeature: "Bir detay katmanı seç",
		greaterThanErrorMessage: "Girdi sayısı ${min}'den büyük olmalıdır",
		lesserThanErrorMessage: "Girdi sayısı ${max}'den küçük olmalıdır",
		greaterThanOrEqualErrorMessage: "Girdi sayısı, ${min}'den büyük veya eşit olmalıdır",
		lesserThanOrEqualErrorMessage: "Girdi sayısı, ${max}'den küçük veya eşit olmalıdır",
		allowScalar: "Bir katman seçin veya bir sabit girin",
		selectField: "Alan seç",
		parameterRequired: "Bu parametre gerekli.",
		enterAValue: "Bir değer gir...",
		invalidInput: "Girilen değer geçerli değil.",
		itemNotFound: "Öge mevcut değil veya erişilemez durumda.",
		itemPermissionDenied: "Bu ögeye erişim izinlerine sahip değilsiniz.",
		layerNotAvailable: "${layerName} katmanı yüklenemedi.",
		multipleLayersNotAvailable: "${layerName} katmanı ve diğerleri yüklenemedi.",
		learnMoreLabel: "Daha Fazla Bilgi",
		fieldNotAvailable: "Alan yüklenemedi.",
		allowAnalysis: "Görüntü servisinde analize izin verilmez.",
		allowAnalysisReason: "Analize izin vermediklerinden haritadaki bir veya daha fazla katman burada listelenmiyor.",
		learnMoreText: "Daha fazla bilgi",
		atLeastOneRasterInput: "En az bir girdi katmanı bir raster katmanı olmalıdır.",
		browseAnalysisLayers: "Katmanlara gözat",
		activeMapViewExtent: "Geçerli Harita Yayılımını Kullan",
		chooseRaster: "Kesme Rasterını Seç",
		chooseGeometry: "Kesme Geometrisini Seç",
		resultType: "Sonuç türü",
		saveInFolder: "Klasöre kaydet",
		outputName: "Çıktı adı",
		outputLayerType: "Çıktı katmanı türü",
		dynamicImageryLayer: "Dinamik görüntü katmanı",
		tiledImageryLayer: "Döşenmiş görüntü katmanı",
		custom: "Özel",
		loading: "Yükleniyor...",
		layerMissing: "Analize izin vermediklerinden haritadaki bir veya daha fazla katman burada listelenmiyor. Daha fazla bilgi edinin.",
		browseCoordinateSystems: "Koordinat sistemlerine gözat",
		unableToRepopulateOutSR: "Çıktı koordinat sistemi doldurulamadı.",
		defaultTitle: "Daha fazlası",
		"ARC (equal arc-second)": "YAY (eşit yay-saniye)",
		Africa: "Afrika",
		Antarctica: "Antarktika",
		Argentina: "Arjantin",
		Asia: "Asya",
		"Asteroid Belt": "Asteroid Kuşağı",
		"Atlantic Ocean": "Atlantik Okyanusu",
		Australia: "Avustralya",
		"Australia and New Zealand": "Avustralya ve Yeni Zelanda",
		Austria: "Avusturya",
		"BLM (US Feet)": "BLM (ABD Fit)",
		Bangladesh: "Bangladeş",
		"Beijing 1954": "Pekin 1954",
		Bhutan: "Butan",
		CGCS2000: "CGCS2000",
		Canada: "Kanada",
		Caribbean: "Karayipler",
		"Caribbean Sea": "Karayip Denizi",
		"Central America": "Orta Amerika",
		"Central and North America": "Orta ve Kuzey Amerika",
		Colombia: "Kolombiya",
		Continental: "Kıtasal",
		"County Systems": "İdari Bölge Sistemleri",
		"Democratic Republic of the Congo": "Demokratik Kongo Cumhuriyeti",
		"EPSG Arctic": "EPSG Arktik",
		Earth: "Dünya",
		"Ellipsoidal-based": "Elipsoidal tabanlı",
		Europe: "Avrupa",
		Finland: "Finlandiya",
		France: "Fransa",
		"GSK 2011": "GSK 2011",
		"Gauss Kruger": "Gauss Kruger",
		"Geographic Coordinate Systems": "Coğrafi Koordinat Sistemleri",
		Germany: "Almanya",
		"Gravity-related": "Yer çekimiyle ilgili",
		"Greenwich-based": "Greenwich tabanlı",
		"Highways England": "Karayolları İngiltere",
		Illinois: "Illinois",
		"Indian Ocean": "Hint Okyanusu",
		"Indian Subcontinent": "Hindistan Alt Kıtası",
		Indiana: "Indiana",
		Indonesia: "Endonezya",
		Iowa: "Iowa",
		"Ireland and United Kingdom": "İrlanda ve Birleşik Krallık",
		Italy: "İtalya",
		Japan: "Japonya",
		Jupiter: "Jüpiter",
		Kansas: "Kansas",
		"Las Vegas": "Las Vegas",
		Libya: "Libya",
		Malaysia: "Malezya",
		"Malaysia and Singapore": "Malezya ve Singapur",
		Mars: "Mars",
		Mercury: "Merkür",
		Minnesota: "Minnesota",
		Montana: "Montana",
		"NAD 1927": "NAD 1927",
		"NAD 1927 (US Feet)": "NAD 1927 (ABD Fit)",
		"NAD 1983": "NAD 1983",
		"NAD 1983 (2011)": "NAD 1983 (2011)",
		"NAD 1983 (2011) (Intl Feet)": "NAD 1983 (2011) (Uluslararası Fit)",
		"NAD 1983 (2011) (Meters)": "NAD 1983 (2011) (Metre)",
		"NAD 1983 (2011) (US Feet)": "NAD 1983 (2011) (ABD Fit)",
		"NAD 1983 (CORS96) (Intl Feet)": "NAD 1983 (CORS96) (Uluslararası Fit)",
		"NAD 1983 (CORS96) (Meters)": "NAD 1983 (CORS96) (Metre)",
		"NAD 1983 (CORS96) (US Feet)": "NAD 1983 (CORS96) (ABD Fit)",
		"NAD 1983 (Intl Feet)": "NAD 1983 (Uluslararası Fit)",
		"NAD 1983 (Meters)": "NAD 1983 (Metre)",
		"NAD 1983 (PA11) (Meters)": "NAD 1983 (PA11) (Metre)",
		"NAD 1983 (PA11) (US Feet)": "NAD 1983 (PA11) (ABD Fit)",
		"NAD 1983 (US Feet)": "NAD 1983 (ABD Fit)",
		"NAD 1983 HARN (Intl Feet)": "NAD 1983 HARN (Uluslararası Fit)",
		"NAD 1983 HARN (Meters)": "NAD 1983 HARN (Metre)",
		"NAD 1983 HARN (US Feet)": "NAD 1983 HARN (ABD Fit)",
		"NAD 1983 NSRS2007 (Intl Feet)": "NAD 1983 NSRS2007 (Uluslararası Fit)",
		"NAD 1983 NSRS2007 (Meters)": "NAD 1983 NSRS2007 (Metre)",
		"NAD 1983 NSRS2007 (US Feet)": "NAD 1983 NSRS2007 (ABD Fit)",
		"National Grids": "Ulusal Gridler",
		Navajo: "Navaho",
		Neptune: "Neptün",
		"New Beijing": "Yeni Pekin",
		"New Zealand": "Yeni Zelanda",
		"North America": "Kuzey Amerika",
		"Northern Hemisphere": "Kuzey Yarı Küre",
		Norway: "Norveç",
		Oceans: "Okyanuslar",
		Oregon: "Oregon",
		"Other GCS": "Diğer GCS",
		"Pacific Ocean": "Pasifik Okyanusu",
		Pluto: "Plüton",
		Polar: "Kutup",
		Portugal: "Portekiz",
		"Projected Coordinate Systems": "İzdüşümlendirilen Koordinat Sistemleri",
		"Pulkovo 1942": "Pulkovo 1942",
		"Pulkovo 1995": "Pulkovo 1995",
		Replaced: "Yeri Değiştirilmiş",
		"SAD 1969": "SAD 1969",
		SIRGAS: "SIRGAS",
		"SIRGAS 2000": "SIRGAS 2000",
		Saturn: "Satürn",
		"Solar System": "Güneş Sistemi",
		"South Africa": "Güney Afrika",
		"South America": "Güney Amerika",
		"South Korea": "Güney Kore",
		"Southern Hemisphere": "Güney Yarı Küre",
		"Spheroid-based": "Küresel tabanlı",
		"State Plane": "Eyalet Düzlemi",
		"State Systems": "Eyalet Sistemleri",
		Sweden: "İsveç",
		"Switzerland and Liechtenstein": "İsviçre ve Lihtenştayn",
		Texas: "Teksas",
		Tribal: "Kabile",
		Turkey: "Türkiye",
		"US Feet": "ABD Fit",
		"USA and territories": "ABD ve bölgeleri",
		UTM: "UTM",
		Ukraine: "Ukrayna",
		"Unknown Height Systems": "Bilinmeyen Yükseklik Sistemleri",
		Uranus: "Uranüs",
		Venus: "Venüs",
		"Vertical Coordinate Systems": "Dikey Koordinat Sistemleri",
		Vietnam: "Vietnam",
		"WGS 1972": "WGS 1972",
		"WGS 1984": "WGS 1984",
		Wisconsin: "Wisconsin",
		"Wisconsin CRS": "Wisconsin CRS",
		World: "Dünya",
		"World (Sphere-based)": "Dünya (Küre tabanlı)",
		Wyoming: "Wyoming",
		"Xian 1980": "Xian 1980",
		done: "Bitti",
		noResults: "Herhangi bir sonuç bulunamadı",
		searchPlaceholder: "Ad veya WKID",
		browseTemplate: "Raster fonksiyonu şablonlarına gözat",
		saveTemplate: "Raster işlevi şablonunu kaydet",
		preview: "Önizleme",
		previewDescription: "Analizi çalıştırmadan sonucu ön izleyin.",
		showPreview: "Ön izlemeyi göster",
		previewLayer: "Ön izleme katmanı ${number}",
		newPreview: "Yeni ön izleme",
		previewPopup: "Girdi parametrelerine dayalı olarak analiz sonuçlarının ön izlemesini etkinleştirin.",
		updatePreviewLayer: "Seçili ön izleme katmanını güncelle",
		createPreviewLayer: "Yeni ön izleme katmanı oluştur",
		maximumPreviewAllowed: "Maksimum sayıda ön izleme katmanına izin verildi: ${maxCount}",
		previewFailure: "Bu ön izleme katmanı kullanılamıyor. Girdi parametrelerini kontrol edin ve bu ön izleme katmanını yeniden güncelleyin.",
		header: "Öge seç",
		content: "${rftTitle}'de kaydedilmemiş değişiklikleriniz var. Yeni bir şablonla baştan başlarsanız, bu değişiklikler kaybolacaktır.",
		dontSave: "Kaydetmeyin",
		"continue": "Devam",
		stretch: "Pencereye sığdır",
		pan: "Kaydır",
		newTemplate: "Yeni şablon oluştur",
		openTemplate: "Şablonu aç",
		addFunction: "Raster işlevleri ekle",
		addConstant: "Sabit ekle",
		addRaster: "Raster değişkeni ekle",
		move: "Taşı",
		zoom: "Yakınlaştır",
		saveAs: "Farklı kaydet",
		clear: "Temizle",
		addRasterFunctionTitle: "Raster işlevleri ekle",
		templatePropertiesTitle: "Şablon özellikleri",
		browseRFT: "Raster fonksiyonu şablonlarına gözat",
		defaultToolDescription: "${toolTitle} analiz aracı.",
		openToolText: "Aracı Aç",
		toolDropdownText: "Aşağı Açılır Araç",
		addToMap: "Onaylayın ve haritaya ekleyin",
		confirm: "Onayla",
		select: "Seç",
		selectTask: "Görev seçin",
		unsupportedLayer: "Bu parametre aşağıdaki katmanları desteklememektedir: ${layerName}.",
		viewDetails: "Tam öge ayrıntılarını görüntüle",
		rename: "Yeniden Adlandır",
		duplicate: "Çoğalt",
		launch: "Çalıştırmak için aç",
		templateEditor: "Şablon Düzenleyici",
		createItem: "Raster İşlev Şablonunu Kaydet",
		actionLabel: "Filtrele",
		filterPopoverHeading: "İşlevleri filtrele",
		defaultSearchPlaceholder: "Ada göre ara",
		settings: "Ayarlar",
		summary: "Özet",
		definitionQuery: "Tanım sorgusu",
		matchVariables: "Değişkenleri eşleştir",
		unionDimension: "Birleşim boyutu",
		nameEditorPlaceholder: "Başlık girin",
		summaryEditorPlaceholder: "Kısa bir açıklama girin.",
		definitionQueryPlaceholder: "Gir...",
		upload: "Yükle",
		chooseImage: "Bir dosya seçmek için tıklayın",
		update: "Güncelle",
		thumbnailErrors: {
			wrongImageType: "Yanlış görüntü türü seçildi",
			notAvailable: "Küçük resim kullanılamıyor",
			loadError: "Görüntü yüklenemedi",
			chooseFile: "Dosyayı seçmek için tıklayın"
		}
	}
};
const copy = "Kopyala";
const save = "Kaydet";
const title = "Unvan";
const folder = "Klasör";
const tags = "Etiketler";
const savingMessage = "Öge şuraya kaydediliyor";
const shareWith = "Şununla Paylaş";
const share = "Paylaş";
const setSharingLevel = "Paylaşım Seviyesini Ayarla";
const setGroupSharing = "Grup Paylaşımını Ayarla";
const owner = "Sahip";
const organization = "Kuruluş";
const everyone = "Herkes (genel)";
const groups = "Gruplar:";
const type = "Tür";
const mosaic = "Mozaik";
const itemGroup = "Öğe Grubu";
const item = "Öge";
const definitionQuery = "Tanım Sorgusu";
const groupItemsBy = "Öge Gruplandırma Ölçütü";
const groupFieldName = "Grup Alan Adı";
const tagFieldName = "Etiket Alanı Adı";
const noTitleTagErrorMsg = "Ögeniz için bir başlık ve haritanızın aramalarda bulunabilmesi için etiketler girmelisiniz.";
const noTitleErrorMsg = "Ögeniz için bir başlık girmelisiniz.";
const noTagErrorMsg = "Arama yoluyla insanların ögenizi bulmasına yardımcı olmak için en az bir etiket girmelisiniz.";
const error = "Hata";
const warning = "Uyarı";
const success = "Başarılı";
const details = "Detaylar:";
const tryAgain = "Yeniden Dene";
const toolModeler = {
	save: "Kaydet",
	editProperties: "Özellikleri Düzenle",
	saveAs: "Farklı Kaydet",
	savingNotification: "Değişiklikler ögeye kaydediliyor...",
	savingTitle: "Kaydediliyor",
	saveFailedMessage: "Değişiklikler kaydedilemedi.",
	saveWithErrorsMessage: "Değişiklikler aşağıdaki hatalarla kaydedildi.",
	viewItemMessage: "Kayıtlı ögeyi",
	here: "buradan görüntüleyebilirsiniz.",
	itemCreatedMessage: "Yeni öge oluşturuldu.",
	clickToViewItemMessage: "Öge ayrıntıları sayfasını görüntülemek için Tamam'a tıklayın; devam etmek için İptal'e tıklayın.",
	readingFailed: "Seçilen raster fonksiyon şablonu yüklenemedi.",
	failedToLoadXML: "Seçilen raster fonksiyon şablonu XML biçiminde yüklenemedi.",
	learnMore: "Daha fazla bilgi",
	overwriteTitle: "Üzerine yazmayı onayla",
	overwriteMessage: "Var olan ögenin üzerine yazmak istiyor musunuz?",
	overwriteSuccessMessage: "Öge güncellendi."
};
const toolEditor = {
	run: "Çalıştır",
	save: "Kaydet",
	deleteSelected: "Seçili ögeleri sil",
	addRaster: "Raster Ekle",
	addScalar: "Skalar Ekle",
	layout: "Otomatik Çıktı Düzeni",
	errorTitle: "Hata",
	invalidToolMessage: "Raster fonksiyon şablonu geçerli değil.",
	out: "Dışarıda",
	zoomIn: "Büyüt",
	zoomOut: "Küçült",
	zoomToFit: "Pencereye Sığdır",
	panOn: "Kaydırma moduna geç",
	panOff: "Kaydırma modunu kapat",
	defaultModelName: "Araç Modeli",
	defaultRasterName: "Raster"
};
const toolDetailsEditor = {
	defaultToolName: "Raster Fonksiyonu Şablonu",
	defaultToolDescription: "Raster fonksiyonu hakkında kısa bir özet ekleyin.",
	defaultHelpText: "Yardım metnini düzenlemek için yardım simgesine tıklayın",
	editHelpTitle: "Yardım Düzenle",
	saveLabel: "Kaydet",
	cancelLabel: "İptal Et",
	thumbnail: {
		wrongImageType: "Yanlış görüntü türü seçildi",
		notAvailable: "Küçük resim yok",
		loadError: "Görüntü yüklenemedi",
		chooseFile: "Dosyayı seçmek için tıklayın"
	}
};
const saveUtils = {
	thumbnail: "Küçük Resim",
	sharing: "Paylaşım"
};
const close = "Kapat";
const unsavedWarningExisting = "Değişiklikleri <b>${itemTitle}</b> ögesine kaydetmek ister misiniz?";
const unsavedWarningNew = "Değişikliklerinizi korumak istiyor musunuz?";
const saveAs = "Farklı Kaydet";
const dontSave = "Kaydetme";
const unsavedTitle = "Kaydedilmemiş Değişiklikler";
const invalidRFTMessage = "Oluşturulan raster fonksiyon şablonu geçerli değil.";
const errorTitle = "Hata";
const breadcrumb = "Raster İşlevi Düzenleyici";
const breadcrumbEditor = "İçerik > Raster İşlevi Düzenleyici";
const viewerModeTitle = "Salt Okunur";
const viewerModeMessage = "Raster fonksiyon şablonu ögesi salt okunur. Değişiklikler kaydedilemedi.";
const userStartDirection = "Bir raster işlev şablonu oluşturmak için bir işlev seçin.";
const selectFunction = "İşlem Ekle";
const deselectFunction = "Fonksiyonu Kaldır";
const dialogTitle = "Sistem";
const category = "Kategoriler";
const search = "Raster Fonksiyonlarını Ara";
const categoryNames = {
	analysis: "Analiz",
	appearance: "Görünüm",
	classification: "Sınıflandırma",
	conversion: "Dönüşüm",
	correction: "Düzeltme",
	dataManagement: "Veri Yönetimi",
	distance: "Mesafe",
	distanceLegacy: "Mesafe (Eski)",
	hydrology: "Hidroloji",
	math: "Matematik",
	mathConditional: "Matematik: Koşullu",
	mathLogical: "Matematik: Mantıksal",
	mathTrigonometric: "Matematik: Trigonometrik",
	reclass: "Yeniden Sınıflandır",
	statistical: "İstatistiksel",
	surface: "Yüzey"
};
const commonStrings_tr = {
	ok: ok,
	cancel: cancel,
	enterURL: enterURL,
	serviceURL: serviceURL,
	selectRaster: selectRaster,
	failedToLoadLayer: failedToLoadLayer,
	loadingLayer: loadingLayer,
	selectFeature: selectFeature,
	enterFURL: enterFURL,
	addRaster: addRaster,
	addScalar: addScalar,
	raster: raster,
	scalar: scalar,
	defaultModelName: defaultModelName,
	general: general,
	parameters: parameters,
	variables: variables,
	name: name,
	description: description,
	parameter: parameter,
	isPublic: isPublic,
	isDataset: isDataset,
	unknownPixelType: unknownPixelType,
	outputPixelType: outputPixelType,
	u8PixelType: u8PixelType,
	s8PixelType: s8PixelType,
	u16PixelType: u16PixelType,
	s16PixelType: s16PixelType,
	u32PixelType: u32PixelType,
	s32PixelType: s32PixelType,
	f32PixelType: f32PixelType,
	f64PixelType: f64PixelType,
	properties: properties,
	multidimensionalRules: multidimensionalRules,
	matchVariables: matchVariables,
	unionDimensions: unionDimensions,
	rasterFunctionEditor: rasterFunctionEditor,
	rfxLicenseInfo: rfxLicenseInfo,
	rasterFunctions: rasterFunctions,
	copy: copy,
	save: save,
	title: title,
	folder: folder,
	tags: tags,
	savingMessage: savingMessage,
	shareWith: shareWith,
	share: share,
	setSharingLevel: setSharingLevel,
	setGroupSharing: setGroupSharing,
	owner: owner,
	organization: organization,
	everyone: everyone,
	groups: groups,
	type: type,
	mosaic: mosaic,
	itemGroup: itemGroup,
	item: item,
	definitionQuery: definitionQuery,
	groupItemsBy: groupItemsBy,
	groupFieldName: groupFieldName,
	tagFieldName: tagFieldName,
	noTitleTagErrorMsg: noTitleTagErrorMsg,
	noTitleErrorMsg: noTitleErrorMsg,
	noTagErrorMsg: noTagErrorMsg,
	error: error,
	warning: warning,
	success: success,
	details: details,
	tryAgain: tryAgain,
	toolModeler: toolModeler,
	toolEditor: toolEditor,
	toolDetailsEditor: toolDetailsEditor,
	saveUtils: saveUtils,
	close: close,
	unsavedWarningExisting: unsavedWarningExisting,
	unsavedWarningNew: unsavedWarningNew,
	saveAs: saveAs,
	dontSave: dontSave,
	unsavedTitle: unsavedTitle,
	invalidRFTMessage: invalidRFTMessage,
	errorTitle: errorTitle,
	breadcrumb: breadcrumb,
	breadcrumbEditor: breadcrumbEditor,
	viewerModeTitle: viewerModeTitle,
	viewerModeMessage: viewerModeMessage,
	userStartDirection: userStartDirection,
	selectFunction: selectFunction,
	deselectFunction: deselectFunction,
	dialogTitle: dialogTitle,
	category: category,
	search: search,
	categoryNames: categoryNames
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (commonStrings_tr);


//# sourceMappingURL=common-strings.tr-6f17e009.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,