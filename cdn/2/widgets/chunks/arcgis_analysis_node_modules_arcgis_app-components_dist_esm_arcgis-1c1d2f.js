"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_arcgis-1c1d2f"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-group-badges_2.entry.js":
/*!************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-group-badges_2.entry.js ***!
  \************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   arcgis_group_badges: () => (/* binding */ ArcgisItemBadges),
/* harmony export */   arcgis_group_card: () => (/* binding */ ArcgisGroupCard)
/* harmony export */ });
/* harmony import */ var _index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-e3bf7da7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-e3bf7da7.js");
/* harmony import */ var _config_75adf962_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./config-75adf962.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/config-75adf962.js");
/* harmony import */ var _functional_44de8fcf_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./functional-44de8fcf.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-44de8fcf.js");
/* harmony import */ var _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./languageUtil-ef0e54b2.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-ef0e54b2.js");
/* harmony import */ var _locale_050b6db9_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./locale-050b6db9.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-050b6db9.js");
/* harmony import */ var _store_da3fccd5_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./store-da3fccd5.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/store-da3fccd5.js");
/* harmony import */ var _index_05956cab_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./index-05956cab.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-05956cab.js");
/* harmony import */ var _resize_a17b7292_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./resize-a17b7292.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/resize-a17b7292.js");
/* harmony import */ var _loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./loadModules-b4ac1247.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-b4ac1247.js");
/* harmony import */ var _dom_4d367677_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./dom-4d367677.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-4d367677.js");
/* harmony import */ var _store_8b1b0846_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./store-8b1b0846.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/store-8b1b0846.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */












function getBadges(group, portal) {
    const badges = [];
    if (portal.id) {
        if (group.capabilities && group.capabilities.includes("updateitemcontrol")) {
            badges.push("SharedUpdate");
        }
        if (group.isOpenData && group.orgId === portal.id) {
            badges.push("OpenData");
        }
        if (portal.featuredItemsGroupQuery && portal.featuredItemsGroupQuery === `id:${group.id}`) {
            badges.push("Gallery");
        }
    }
    if ((group.collaborationInfo && group.collaborationInfo.collaborationId) ||
        (group.capabilities && group.capabilities.includes("distributed"))) {
        badges.push("Collaboration");
    }
    if (!group.membershipAccess && !portal.isPortal && group.orgId !== "none") {
        badges.push("AnyOrg");
    }
    if (group.membershipAccess === "collaboration") {
        badges.push("Partnered");
    }
    // if shared update with no collaboration OR distributed collaboration, only show when group is in the user's org
    if (badges.includes("SharedUpdate") && !badges.includes("Partnered") && group.orgId !== portal.id) {
        badges.splice(badges.indexOf("SharedUpdate"), 1);
    }
    return badges;
}

const arcgisGroupBadgesCss = ":host{display:flex}.badge{display:inline-block;margin-inline-end:0.25rem}";

const ArcgisItemBadges = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.group = undefined;
        this.portal = undefined;
        this.width = "full";
        this.appearance = undefined;
        this.empty = false;
        this.showTooltips = false;
        this.scale = "m";
        this.badges = [];
    }
    componentWillLoad() {
        if (this.group) {
            this.updateBadges(this.group);
        }
    }
    updateBadges(group) {
        var _a;
        this.badges = getBadges(group, this.portal);
        if (!((_a = this.badges) === null || _a === void 0 ? void 0 : _a.length)) {
            this.empty = true;
        }
    }
    render() {
        const { width, scale, badges, showTooltips, appearance } = this;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.H, null, badges.map((badge) => ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-group-badge", { appearance: appearance, key: badge, class: "badge", badgeType: badge, width: width, scale: scale, showTooltip: showTooltips })))));
    }
    get el() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
    static get watchers() { return {
        "group": ["updateBadges"]
    }; }
};
ArcgisItemBadges.style = arcgisGroupBadgesCss;

const arcgisGroupCardCss = ":host{display:block;min-width:0px}.group-card{position:relative;display:flex;height:100%;flex-direction:column;color:var(--calcite-color-text-1);opacity:0;--tw-shadow:0 0 #0000;--tw-shadow-colored:0 0 #0000;box-shadow:var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);transition-duration:150ms;outline-color:transparent;background-color:var(--calcite-color-foreground-1);transition-property:background-color, outline, outline-offset, opacity;border:1px solid var(--calcite-color-border-3)}.group-card:focus{z-index:10;outline:2px solid var(--calcite-color-brand);outline-offset:-2px}.group-card--loaded{opacity:1}.group-card--selected{border-color:var(--calcite-color-brand)}.group-card--hoverable{cursor:pointer}.group-card__top{padding:1rem}.group-card__hover-text{position:absolute;inset:0px;display:flex;align-items:center;justify-content:center;text-align:center;font-size:1rem;font-weight:500;opacity:0;transition:all var(--calcite-animation-timing) ease-in-out 0s, outline 0s, outline-offset 0s;background-color:rgba(21, 21, 21, 0.7);color:white}.group-card__upper{flex:1 1 0%;background-color:var(--calcite-color-foreground-1);transition:all var(--calcite-animation-timing) ease-in-out 0s, outline 0s, outline-offset 0s}.group-card__upper:hover{background-color:var(--calcite-color-background)}.group-card__upper:hover .group-card__hover-text,.group-card:focus .group-card__hover-text{opacity:1}.group-card__upper--compact{display:flex;align-items:center;padding-top:0.5rem;padding-bottom:0.5rem;padding-left:0.75rem;padding-right:0.75rem}.group-card__upper--link{color:var(--calcite-color-text-1);text-decoration-line:none;outline-color:transparent}.group-card__upper--link:focus{z-index:10;outline:2px solid var(--calcite-color-brand);outline-offset:2px}.group-card__title__span{position:relative;display:inline;border-style:none;background-color:transparent;padding:0px;transition:all var(--calcite-animation-timing) ease-in-out 0s, outline 0s, outline-offset 0s;background-image:linear-gradient(transparent, transparent);background-position-x:0%, 100%;background-position-y:min(1.25em, 100%);background-repeat:no-repeat, no-repeat;background-size:100% 1px, 100% 1px}.group-card--previewed .group-card__title__span{background-image:linear-gradient(var(--calcite-color-text-3), var(--calcite-color-text-3))}.group-card__content{display:flex;min-width:0px;flex:1 1 0%;flex-direction:column}.group-card__details{display:flex;flex-direction:row;flex-wrap:wrap}.group-card__details--stacked{flex-direction:column}.group-card__detail{font-size:0.875rem;color:var(--calcite-color-text-2)}.group-card__detail__icon{margin-inline-end:0.5rem}.group-card__calendar-icon{color:var(--calcite-color-text-3);margin-inline-end:0.5rem}.group-card__footer{margin-top:auto;display:flex;align-items:center;background-color:var(--calcite-color-foreground-1);padding-left:1rem;padding-right:1rem;padding-top:0.5rem;padding-bottom:0.5rem;border-top:1px solid var(--calcite-color-border-3)}.group-card__footer__start{display:flex;min-width:0px;flex:1 1 0%;flex-direction:row;align-items:center;overflow:hidden;margin-inline-end:0.75rem}.group-card__footer__start--selectable{margin-inline-start:1.5rem}.group-card__profile-wrap{max-width:100%;padding:0.25rem}.group-card__updated{font-size:0.875rem;color:var(--calcite-color-text-2)}.group-card__updated--xs{margin-top:0.5rem}.group-card__divider{display:flex;align-items:center;flex:0 0 auto}.group-card__divider:not([empty]):before{content:\"\";height:1.25rem;width:1px;background-color:var(--calcite-color-border-1);margin-inline:0.75rem}.group-card__details--stacked .group-card__divider:before{display:none}.group-card__divider:first-child:before{display:none}.group-card-flex{display:flex}.group-card-flex-1{min-width:0px;flex:1 1 0%}.screen-readers-only{position:absolute;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0, 0, 0, 0);white-space:nowrap;border-width:0}.group-card__input{margin-inline-end:1rem;margin-top:0.125rem}.group-card__title{margin-top:0px;margin-bottom:0px;overflow-wrap:break-word;padding-top:0px;padding-bottom:0px;font-size:1rem;font-weight:500;line-height:1.375}.group-card__title--compact{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;margin-inline-end:1rem}.group-card__summary{margin:0px;margin-top:0.25rem;margin-bottom:0.25rem;flex:1 1 0%;padding:0px;font-size:0.875rem;line-height:1.25}.group-card__thumbnail{margin-inline-end:1rem}.group-card__thumbnail--compact{width:2.75rem;height:2.75rem}.group-card__badges{margin-top:0.25rem}.group-card__owner{min-width:0px}.group-card--panel{margin-bottom:0px;cursor:pointer;border-bottom:1px solid var(--calcite-color-border-1);outline:1px solid rgba(0, 0, 0, 0)}.group-card--panel:hover{background-color:var(--calcite-color-foreground-2)}.group-card--border-top{border-top:1px solid var(--calcite-color-border-1)}.group-card--border-top:hover{--tw-shadow:0 0 #0000;--tw-shadow-colored:0 0 #0000;box-shadow:var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)}.group-card--xs .group-card__top,.group-card--xxs .group-card__top{padding:0.75rem}.group-card--xs .group-card__title--padded,.group-card--xxs .group-card__title--padded{margin-bottom:0.25rem}.group-card--xs .group-card__footer,.group-card--xxs .group-card__footer{padding-top:0.25rem;padding-bottom:0.25rem;padding-left:0.75rem;padding-right:0.75rem}.group-card--xs .group-card__detail,.group-card--xxs .group-card__detail{margin-top:0.25rem;margin-bottom:0.25rem;font-size:0.75rem;line-height:1.35}.group-card--xs .group-card__title,.group-card--xxs .group-card__title{font-size:0.875rem}.group-card--xxs .group-card__thumbnail{padding-inline-start:0.75rem;width:4.25rem}.group-card--xs .group-card__thumbnail{padding-inline-start:0.5rem;width:5rem}";

const ArcgisGroupCard = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisGroupCardSelect = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisGroupCardSelect", 7);
        this.arcgisGroupBrowserCardPreview = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisGroupBrowserCardPreview", 7);
        this.arcgisGroupBrowserInternalUIAction = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisGroupBrowserInternalUIAction", 7);
        var _a;
        this.handleResizeEvent = ({ detail }) => {
            this.resize(detail.width);
        };
        this.handleCardClick = () => {
            const { group, preview } = this;
            if (this.link) {
                return;
            }
            if (preview === "top") {
                this.arcgisGroupBrowserCardPreview.emit(group);
                return;
            }
            if (this.radioButton) {
                this.radioButton.checked = true;
                this.arcgisGroupCardSelect.emit({ group, selected: true });
            }
            else if (this.checkbox) {
                this.selected = !this.selected;
                this.arcgisGroupCardSelect.emit({ group, selected: this.selected });
            }
        };
        this.group = undefined;
        this.user = undefined;
        this.portal = undefined;
        this.api = 4;
        this.baseUrl = (_a = _config_75adf962_js__WEBPACK_IMPORTED_MODULE_1__.c === null || _config_75adf962_js__WEBPACK_IMPORTED_MODULE_1__.c === void 0 ? void 0 : _config_75adf962_js__WEBPACK_IMPORTED_MODULE_1__.c.config) === null || _a === void 0 ? void 0 : _a.baseUrl;
        this.selected = undefined;
        this.indeterminate = undefined;
        this.view = "list";
        this.selection = "none";
        this.preview = undefined;
        this.name = undefined;
        this.showOwner = true;
        this.showDateUpdated = true;
        this.showDateCreated = false;
        this.showViewableBy = true;
        this.showSummary = false;
        this.showBadges = true;
        this.link = undefined;
        this.newTab = undefined;
        this.hover = undefined;
        this.formFactor = undefined;
        this.updatedText = "";
        this.createdText = "";
        this.loaded = undefined;
        this.width = undefined;
    }
    /* Calling this setFocus causes calcite to focus here when the user popup is closed... */
    async restoreFocus() {
        if (this.link && this.linkEl) {
            this.linkEl.focus();
            return;
        }
        if (this.preview === "top" && this.sectionEl) {
            this.sectionEl.focus();
            return;
        }
    }
    async componentWillLoad() {
        var _a, _b;
        const { el } = this;
        const locale = await (0,_locale_050b6db9_js__WEBPACK_IMPORTED_MODULE_4__.g)(el);
        this.i18n = locale[0];
        // if we're inside a group browser, use that store, otherwise create one just for this card
        this.store = (0,_store_da3fccd5_js__WEBPACK_IMPORTED_MODULE_5__.g)(this.el) || (0,_index_05956cab_js__WEBPACK_IMPORTED_MODULE_6__.c)({ filters: {} });
        (_a = this.formFactor) !== null && _a !== void 0 ? _a : (this.formFactor = ((_b = this.store) === null || _b === void 0 ? void 0 : _b.state.panel) ? "xs" : "lg");
        (0,_resize_a17b7292_js__WEBPACK_IMPORTED_MODULE_7__.s)(this.store).observe(this.el);
        this.el.addEventListener("arcgisBrowserResize", this.handleResizeEvent);
        this.updatedText = this.i18n.lastUpdated.replace("${date}", (0,_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_3__.a)(this.group.modified));
        this.createdText = this.i18n.created.replace("${date}", (0,_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_3__.a)(this.group.created));
    }
    async componentDidLoad() {
        await (0,_functional_44de8fcf_js__WEBPACK_IMPORTED_MODULE_2__.t)(100);
        this.loaded = true;
    }
    disconnectedCallback() {
        var _a, _b, _c, _d;
        (_c = (_b = (_a = this.store) === null || _a === void 0 ? void 0 : _a.state) === null || _b === void 0 ? void 0 : _b.resizeObserver) === null || _c === void 0 ? void 0 : _c.unobserve(this.el);
        (_d = this.el) === null || _d === void 0 ? void 0 : _d.removeEventListener("arcgisBrowserResize", this.handleResizeEvent);
    }
    resize(width) {
        switch (true) {
            case width > _resize_a17b7292_js__WEBPACK_IMPORTED_MODULE_7__.b.md:
                this.formFactor = "lg";
                break;
            case width > _resize_a17b7292_js__WEBPACK_IMPORTED_MODULE_7__.b.sm:
                this.formFactor = "md";
                break;
            case width > _resize_a17b7292_js__WEBPACK_IMPORTED_MODULE_7__.b.xs:
                this.formFactor = "sm";
                break;
            case width > _resize_a17b7292_js__WEBPACK_IMPORTED_MODULE_7__.b.xxs:
                this.formFactor = "xs";
                break;
            default:
                this.formFactor = "xxs";
                break;
        }
        this.width = width;
    }
    getAccessInfo(access) {
        const info = {
            public: {
                text: this.i18n.everyone,
                icon: "globe"
            },
            private: {
                text: this.i18n.groupMembers,
                icon: "lock"
            },
            org: {
                text: this.i18n.organization,
                icon: "organization"
            }
        };
        return info[access] || info.private;
    }
    renderCompactView() {
        const { group, portal, selection, selected, formFactor, i18n, link, loaded, newTab, showBadges } = this;
        const CardTag = this.link ? "a" : "div";
        const linkAttributes = Object.assign({ href: link }, (newTab ? { target: "_blank", rel: "noopener noreferrer" } : {}));
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("section", Object.assign({ class: {
                "group-card": true,
                "group-card--hoverable": selection !== "none",
                [`group-card--${formFactor}`]: true,
                "group-card--loaded": loaded
            }, onMouseOver: () => (this.hover = true), onMouseOut: () => (this.hover = false) }, (link ? {} : { onClick: this.handleCardClick }), { ref: (el) => (this.sectionEl = el) }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(CardTag, Object.assign({ class: {
                "group-card__upper": true,
                "group-card__upper--link": !!link,
                "group-card__upper--compact": true
            } }, (link ? linkAttributes : {}), { ref: (el) => (this.linkEl = el) }), selection === "single" && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-radio-button", { class: "group-card__input", checked: selected, value: group.title, name: this.name, ref: (el) => (this.radioButton = el), onClick: (e) => {
                e.stopPropagation();
            }, onCalciteRadioButtonChange: () => {
                this.arcgisGroupCardSelect.emit({ group, selected: !selected });
            } }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: "screen-readers-only" }, i18n.select.replace("${title}", group.title)))), selection === "multiple" && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-checkbox", { class: "group-card__input", checked: selected, indeterminate: this.indeterminate, onClick: (e) => {
                e.stopPropagation();
            }, onCalciteCheckboxChange: () => {
                this.arcgisGroupCardSelect.emit({ group, selected: !this.selected });
            }, value: group.id, ref: (el) => (this.checkbox = el) }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: "screen-readers-only" }, group.title))), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "flex-0 group-card__thumbnail group-card__thumbnail--compact" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-group-thumbnail", { group: group, portal: portal, scale: "l" })), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "group-card-flex-1" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("h3", { class: "group-card__title group-card__title--compact" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: "group-card__title__span" }, group.title))), showBadges && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-group-badges", { group: group, portal: portal, class: "group-card__badges--compact", scale: "s", showTooltips: true, width: "narrow" })), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", { name: "content-end" }))));
    }
    render() {
        var _a, _b;
        const { group, portal, selection, selected, formFactor, api, i18n, link, loaded, newTab, showDateCreated, showDateUpdated, showOwner, showBadges, showSummary } = this;
        const baseUrl = (_a = this.baseUrl) !== null && _a !== void 0 ? _a : (_b = _config_75adf962_js__WEBPACK_IMPORTED_MODULE_1__.c.config) === null || _b === void 0 ? void 0 : _b.baseUrl;
        const current = _store_da3fccd5_js__WEBPACK_IMPORTED_MODULE_5__.a.preview === this.group.id;
        const topPreview = this.preview === "top";
        const CardTag = this.link ? "a" : "div";
        const linkAttributes = Object.assign({ href: link }, (newTab ? { target: "_blank", rel: "noopener noreferrer" } : {}));
        const topPreviewAttributes = {
            tabIndex: 0,
            role: "button",
            "aria-haspopup": "dialog",
            "aria-labelledby": "open-details",
            onKeyPress: (e) => {
                if (e.key === "Enter" || e.key == " ") {
                    e.preventDefault();
                    this.handleCardClick();
                }
            }
        };
        const accessInfo = this.getAccessInfo(group.access);
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.H, null, this.view === "compact" ? (this.renderCompactView()) : ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("section", Object.assign({ class: {
                "group-card": true,
                "group-card--hoverable": selection !== "none",
                [`group-card--${formFactor}`]: true,
                "group-card--loaded": loaded
            } }, (link ? {} : { onClick: this.handleCardClick }), (topPreview && !link ? topPreviewAttributes : {}), { ref: (el) => (this.sectionEl = el) }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", { name: "content-top" }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(CardTag, Object.assign({ class: { "group-card__upper": true, "group-card__upper--link": !!link } }, (link ? linkAttributes : {}), { onMouseOver: () => (this.hover = true), onMouseOut: () => (this.hover = false) }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "group-card-flex group-card__top" }, selection === "single" && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-radio-button", { class: "group-card__input", checked: selected, value: group.title, name: this.name, ref: (el) => (this.radioButton = el), onClick: (e) => {
                e.stopPropagation();
            }, onCalciteRadioButtonChange: () => {
                this.arcgisGroupCardSelect.emit({ group, selected: !selected });
            } }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: "screen-readers-only" }, i18n.select.replace("${title}", group.title)))), selection === "multiple" && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-checkbox", { class: "group-card__input", checked: selected, indeterminate: this.indeterminate, onClick: (e) => {
                e.stopPropagation();
            }, onCalciteCheckboxChange: () => {
                this.arcgisGroupCardSelect.emit({ group, selected: !this.selected });
            }, value: group.id, ref: (el) => (this.checkbox = el) }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: "screen-readers-only" }, group.title))), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "flex-0 group-card__thumbnail" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-group-thumbnail", { group: group, portal: portal, scale: "xl" })), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "group-card-flex-1" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "group-card-flex" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "group-card__content" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("h3", { class: {
                "group-card__title": true,
                "group-card__title--padded": showSummary && !!group.snippet
            } }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: "group-card__title__span" }, group.title)), showSummary && group.snippet && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("p", { class: "group-card__summary" }, group.snippet.length > 250
            ? `${group.snippet.substring(0, 250)}…`
            : group.snippet)), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: {
                "group-card__details": true,
                "group-card__details--stacked": this.width < 580
            } }, showDateCreated && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: "group-card__detail group-card__divider" }, this.createdText)), showDateUpdated && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: "group-card__detail group-card__divider" }, this.updatedText)), this.showViewableBy && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: "group-card__detail group-card__divider" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { icon: accessInfo.icon, scale: "s", class: "group-card__detail__icon" }), " ", i18n.viewableBy.replace("${level}", accessInfo.text))), showBadges && this.width >= _resize_a17b7292_js__WEBPACK_IMPORTED_MODULE_7__.b.sm && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-group-badges", { appearance: this.hover ? "outline-fill" : "solid", group: group, portal: portal, width: this.width < 840 ? "narrow" : "full", class: "group-card__badges group-card__detail group-card__divider", scale: "s", showTooltips: true }))), showBadges && this.width < _resize_a17b7292_js__WEBPACK_IMPORTED_MODULE_7__.b.sm && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-group-badges", { appearance: this.hover ? "outline-fill" : "solid", group: group, portal: portal, width: this.width < _resize_a17b7292_js__WEBPACK_IMPORTED_MODULE_7__.b.xxs ? "narrow" : "full", class: "group-card__badges", scale: "s", showTooltips: true })))), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", { name: "content-end" })))), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "group-card__footer", onClick: (e) => {
                e.stopPropagation();
            } }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "group-card__footer__start" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", { name: "actions-start" }), showOwner && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "group-card__profile-wrap", onClick: (e) => {
                e.preventDefault();
                e.stopPropagation();
            } }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-user-popup", { underline: true, username: group.owner, api: api, portal: portal, baseUrl: baseUrl, class: "group-card__owner", onArcgisUserPopupInternalUIAction: (e) => {
                e.stopPropagation();
                this.arcgisGroupBrowserInternalUIAction.emit(e.detail);
            } })))), this.preview === "action" && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { scale: "s", appearance: current ? "solid" : "outline-fill", kind: "neutral", onClick: (e) => {
                e.preventDefault();
                e.stopPropagation();
                this.arcgisGroupBrowserCardPreview.emit(this.group);
            } }, current ? i18n.hidePreview : i18n.preview)), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", { name: "actions-end" }))))));
    }
    get el() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisGroupCard.style = arcgisGroupCardCss;



//# sourceMappingURL=arcgis-group-badges_2.entry.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/config-75adf962.js":
/*!************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/config-75adf962.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   c: () => (/* binding */ configState),
/* harmony export */   o: () => (/* binding */ onConfigChange)
/* harmony export */ });
/* harmony import */ var _index_05956cab_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-05956cab.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-05956cab.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */


const configStore = (0,_index_05956cab_js__WEBPACK_IMPORTED_MODULE_0__.c)({
    portal: null,
    user: null,
    api: 4,
    scale: "m"
});
const configState = configStore.state;
const onConfigChange = configStore.onChange;



//# sourceMappingURL=config-75adf962.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-44de8fcf.js":
/*!****************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-44de8fcf.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ arrayToLookupMap),
/* harmony export */   b: () => (/* binding */ unique),
/* harmony export */   c: () => (/* binding */ throttle),
/* harmony export */   d: () => (/* binding */ debounce),
/* harmony export */   e: () => (/* binding */ escapeRegExp),
/* harmony export */   f: () => (/* binding */ arraysAreEquivalent),
/* harmony export */   g: () => (/* binding */ chunk),
/* harmony export */   i: () => (/* binding */ isDefined),
/* harmony export */   m: () => (/* binding */ minDelay),
/* harmony export */   t: () => (/* binding */ timeout),
/* harmony export */   u: () => (/* binding */ uniqueBy)
/* harmony export */ });
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */
/**
 * Call a function only after it has not been called for n milliseconds
 * @param fn    - function to call
 * @param delay - delay in milliseconds
 */
const debounce = (fn, delay) => {
    let timeout;
    let status = "idle";
    function flush(...args) {
        status = "flushed";
        return debounced(...args);
    }
    function invoke(...args) {
        status = "invoked";
        return debounced(...args);
    }
    function cancel(...args) {
        status = "cancelled";
        return debounced(...args);
    }
    function getStatus() {
        return status;
    }
    const debounced = (...args) => new Promise((resolve) => {
        switch (status) {
            case "flushed":
                status = "idle";
                if (timeout) {
                    clearTimeout(timeout);
                    resolve(fn(...args));
                }
                else {
                    resolve(null);
                }
                break;
            case "invoked":
                clearTimeout(timeout);
                status = "idle";
                resolve(fn(...args));
                break;
            case "cancelled":
                clearTimeout(timeout);
                status = "idle";
                resolve(null);
                break;
            default:
                if (timeout) {
                    clearTimeout(timeout);
                }
                status = "pending";
                timeout = setTimeout(() => {
                    status = "idle";
                    return resolve(fn(...args));
                }, delay);
                break;
        }
    });
    debounced.flush = flush;
    debounced.invoke = invoke;
    debounced.cancel = cancel;
    debounced.getStatus = getStatus;
    return debounced;
};
/**
 * Call a function only after n milliseconds have elapsed
 * @param fn    - function to call
 * @param delay - delay in milliseconds
 */
const throttle = (fn, delay) => {
    let timeout;
    return (...args) => new Promise((resolve) => {
        if (timeout) {
            return;
        }
        timeout = setTimeout(() => {
            clearTimeout(timeout);
            timeout = undefined;
            resolve(fn(...args));
        }, delay);
    });
};
function escapeRegExp(str) {
    return str.replace(/[.*+?^${}()|[\]\\]/g, "\\$&"); // $& means the whole matched string
}
function isDefined(value) {
    return value !== undefined && value !== null;
}
/**
 * Set a minimum time for a promise to resolve (useful for preventing flash of loaders)
 */
async function minDelay(promise, minDelay) {
    await Promise.all([promise, timeout(minDelay)]);
    return promise;
}
/**
 * Helper method to inline setTimeout as an await in async functions
 */
function timeout(ms) {
    return new Promise((resolve) => setTimeout(resolve, ms));
}
const arrayToLookupMap = (dataArr, getKeyAndItem) => Object.fromEntries((dataArr || []).map((item) => {
    const { key, data } = getKeyAndItem(item);
    return [key, data];
}));
/**
 * Check whether two arrays have the same number of elements
 * and whether they contain the same elements
 * regardless of order
 */
const arraysAreEquivalent = (arr1, arr2) => arr1.length === arr2.length && arr1.reduce((memo, str) => memo && arr2.indexOf(str) > -1, true);
function uniqueBy(myArr, getItemId) {
    const resultArr = [];
    const lookupMap = {};
    myArr.forEach((item) => {
        const id = getItemId(item);
        if (lookupMap[id] == null) {
            lookupMap[id] = item;
            resultArr.push(item);
        }
    });
    return resultArr;
}
function unique(myArr) {
    const primitives = { boolean: {}, number: {}, string: {} };
    const objs = [];
    return myArr.filter((item) => {
        let type = typeof item;
        if (type in primitives) {
            return primitives[type].hasOwnProperty(item) ? false : (primitives[type][item] = true);
        }
        else {
            return objs.indexOf(item) >= 0 ? false : objs.push(item);
        }
    });
}
const chunk = (arr, size) => [...Array(Math.ceil(arr.length / size))].map((_, i) => arr.slice(size * i, size + size * i));



//# sourceMappingURL=functional-44de8fcf.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-05956cab.js":
/*!***********************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-05956cab.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   c: () => (/* binding */ createStore)
/* harmony export */ });
/* harmony import */ var _index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-e3bf7da7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-e3bf7da7.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */


const appendToMap = (map, propName, value) => {
    const items = map.get(propName);
    if (!items) {
        map.set(propName, [value]);
    }
    else if (!items.includes(value)) {
        items.push(value);
    }
};
const debounce = (fn, ms) => {
    let timeoutId;
    return (...args) => {
        if (timeoutId) {
            clearTimeout(timeoutId);
        }
        timeoutId = setTimeout(() => {
            timeoutId = 0;
            fn(...args);
        }, ms);
    };
};

/**
 * Check if a possible element isConnected.
 * The property might not be there, so we check for it.
 *
 * We want it to return true if isConnected is not a property,
 * otherwise we would remove these elements and would not update.
 *
 * Better leak in Edge than to be useless.
 */
const isConnected = (maybeElement) => !('isConnected' in maybeElement) || maybeElement.isConnected;
const cleanupElements = debounce((map) => {
    for (let key of map.keys()) {
        map.set(key, map.get(key).filter(isConnected));
    }
}, 2000);
const stencilSubscription = () => {
    if (typeof _index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.g !== 'function') {
        // If we are not in a stencil project, we do nothing.
        // This function is not really exported by @stencil/core.
        return {};
    }
    const elmsToUpdate = new Map();
    return {
        dispose: () => elmsToUpdate.clear(),
        get: (propName) => {
            const elm = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.g)();
            if (elm) {
                appendToMap(elmsToUpdate, propName, elm);
            }
        },
        set: (propName) => {
            const elements = elmsToUpdate.get(propName);
            if (elements) {
                elmsToUpdate.set(propName, elements.filter(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f));
            }
            cleanupElements(elmsToUpdate);
        },
        reset: () => {
            elmsToUpdate.forEach((elms) => elms.forEach(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f));
            cleanupElements(elmsToUpdate);
        },
    };
};

const unwrap = (val) => (typeof val === 'function' ? val() : val);
const createObservableMap = (defaultState, shouldUpdate = (a, b) => a !== b) => {
    const unwrappedState = unwrap(defaultState);
    let states = new Map(Object.entries(unwrappedState !== null && unwrappedState !== void 0 ? unwrappedState : {}));
    const handlers = {
        dispose: [],
        get: [],
        set: [],
        reset: [],
    };
    const reset = () => {
        var _a;
        // When resetting the state, the default state may be a function - unwrap it to invoke it.
        // otherwise, the state won't be properly reset
        states = new Map(Object.entries((_a = unwrap(defaultState)) !== null && _a !== void 0 ? _a : {}));
        handlers.reset.forEach((cb) => cb());
    };
    const dispose = () => {
        // Call first dispose as resetting the state would
        // cause less updates ;)
        handlers.dispose.forEach((cb) => cb());
        reset();
    };
    const get = (propName) => {
        handlers.get.forEach((cb) => cb(propName));
        return states.get(propName);
    };
    const set = (propName, value) => {
        const oldValue = states.get(propName);
        if (shouldUpdate(value, oldValue, propName)) {
            states.set(propName, value);
            handlers.set.forEach((cb) => cb(propName, value, oldValue));
        }
    };
    const state = (typeof Proxy === 'undefined'
        ? {}
        : new Proxy(unwrappedState, {
            get(_, propName) {
                return get(propName);
            },
            ownKeys(_) {
                return Array.from(states.keys());
            },
            getOwnPropertyDescriptor() {
                return {
                    enumerable: true,
                    configurable: true,
                };
            },
            has(_, propName) {
                return states.has(propName);
            },
            set(_, propName, value) {
                set(propName, value);
                return true;
            },
        }));
    const on = (eventName, callback) => {
        handlers[eventName].push(callback);
        return () => {
            removeFromArray(handlers[eventName], callback);
        };
    };
    const onChange = (propName, cb) => {
        const unSet = on('set', (key, newValue) => {
            if (key === propName) {
                cb(newValue);
            }
        });
        // We need to unwrap the defaultState because it might be a function.
        // Otherwise we might not be sending the right reset value.
        const unReset = on('reset', () => cb(unwrap(defaultState)[propName]));
        return () => {
            unSet();
            unReset();
        };
    };
    const use = (...subscriptions) => {
        const unsubs = subscriptions.reduce((unsubs, subscription) => {
            if (subscription.set) {
                unsubs.push(on('set', subscription.set));
            }
            if (subscription.get) {
                unsubs.push(on('get', subscription.get));
            }
            if (subscription.reset) {
                unsubs.push(on('reset', subscription.reset));
            }
            if (subscription.dispose) {
                unsubs.push(on('dispose', subscription.dispose));
            }
            return unsubs;
        }, []);
        return () => unsubs.forEach((unsub) => unsub());
    };
    const forceUpdate = (key) => {
        const oldValue = states.get(key);
        handlers.set.forEach((cb) => cb(key, oldValue, oldValue));
    };
    return {
        state,
        get,
        set,
        on,
        onChange,
        use,
        dispose,
        reset,
        forceUpdate,
    };
};
const removeFromArray = (array, item) => {
    const index = array.indexOf(item);
    if (index >= 0) {
        array[index] = array[array.length - 1];
        array.length--;
    }
};

const createStore = (defaultState, shouldUpdate) => {
    const map = createObservableMap(defaultState, shouldUpdate);
    map.use(stencilSubscription());
    return map;
};



//# sourceMappingURL=index-05956cab.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-ef0e54b2.js":
/*!******************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-ef0e54b2.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   C: () => (/* binding */ CSS_UTILITY),
/* harmony export */   a: () => (/* binding */ formatDate),
/* harmony export */   b: () => (/* binding */ formatPlural),
/* harmony export */   f: () => (/* binding */ formatNumber),
/* harmony export */   g: () => (/* binding */ getElementDir),
/* harmony export */   l: () => (/* binding */ languageMap)
/* harmony export */ });
/* harmony import */ var _loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./loadModules-b4ac1247.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-b4ac1247.js");
/* harmony import */ var _dom_4d367677_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dom-4d367677.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-4d367677.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */



const languageMap = new Map([
    ["ar", "ar"],
    ["bg", "bg"],
    ["bs", "bs"],
    ["ca", "ca"],
    ["cs", "cs"],
    ["da", "da"],
    ["de", "de"],
    ["el", "el"],
    ["en", "en"],
    ["es", "es"],
    ["et", "et"],
    ["fi", "fi"],
    ["fr", "fr"],
    ["he", "he"],
    ["hr", "hr"],
    ["hu", "hu"],
    ["id", "id"],
    ["it", "it"],
    ["ja", "ja"],
    ["ko", "ko"],
    ["lt", "lt"],
    ["lv", "lv"],
    ["nb", "nb"],
    ["nl", "nl"],
    ["pl", "pl"],
    ["pt-br", "pt-BR"],
    ["pt-pt", "pt-PT"],
    ["ro", "ro"],
    ["ru", "ru"],
    ["sk", "sk"],
    ["sl", "sl"],
    ["sr", "sr"],
    ["sv", "sv"],
    ["th", "th"],
    ["tr", "tr"],
    ["uk", "uk"],
    ["vi", "vi"],
    ["zh-cn", "zh-CN"],
    ["zh-hk", "zh-HK"],
    ["zh-tw", "zh-TW"]
]);
// rtl
function getElementDir(el) {
    return getElementProp(el, "dir", "ltr");
}
function getElementProp(el, prop, value) {
    const closestWithProp = (0,_dom_4d367677_js__WEBPACK_IMPORTED_MODULE_1__.c)(el, `[${prop}]`);
    return closestWithProp ? closestWithProp.getAttribute(prop) : value;
}
// css
const CSS_UTILITY = {
    rtl: "arcgis--rtl"
};
async function formatNumber(number, options) {
    const { api, type, places } = options || {};
    if (api === 4) {
        const [intl] = await (0,_loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_0__.l)(["esri/intl"]);
        const numberFormatIntlOptions = intl.convertNumberFormatToIntlOptions({
            places,
            style: type,
            digitSeparator: true
        });
        return intl.formatNumber(number, Object.assign(Object.assign({}, numberFormatIntlOptions), { style: type }));
    }
    const [dojoNumber] = await (0,_loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_0__.l)(["dojo/number"]);
    return dojoNumber.format(number, {
        type,
        places,
        pattern: options === null || options === void 0 ? void 0 : options.pattern
    });
}
const cache = {};
function formatDate(date) {
    const lang = document.documentElement.lang;
    const dayShortMonthYear = {
        year: "numeric",
        month: "short",
        day: "numeric"
    };
    if (!cache[lang]) {
        cache[lang] = new Intl.DateTimeFormat(document.documentElement.lang, dayShortMonthYear);
    }
    return cache[lang].format(date);
}
function formatPlural(lang, stringObj, number) {
    const singles = ["id", "ja", "ko", "th", "vi", "zh-cn", "zh-hk", "zh-tw"];
    const likeEnglish = [
        "en",
        "ca",
        "da",
        "de",
        "el",
        "es",
        "et",
        "fi",
        "hi",
        "hu",
        "it",
        "nb",
        "nl",
        "pt-pt",
        "sv",
        "tr"
    ];
    const locale = lang !== null && lang !== void 0 ? lang : "en";
    // if the number is one, or it is a "simple" language, return the 1 string
    if (number === 1 || singles.includes(locale)) {
        return stringObj.single.replace("${number}", "1");
    }
    // if the number is not 1 and the language uses the same pluralization strategy as english,
    // return the multiple string
    if (number !== 1 && likeEnglish.includes(locale)) {
        return stringObj.multiple.replace("${number}", `${number}`);
    }
    // if none of the above worked, return the "unknown" string
    return stringObj.unknown.replace("${number}", `${number}`);
}



//# sourceMappingURL=languageUtil-ef0e54b2.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-050b6db9.js":
/*!************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-050b6db9.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ getComponentClosestLanguage),
/* harmony export */   g: () => (/* binding */ getLocaleComponentStrings)
/* harmony export */ });
/* harmony import */ var _dom_4d367677_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dom-4d367677.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-4d367677.js");
/* harmony import */ var _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./languageUtil-ef0e54b2.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-ef0e54b2.js");
/* harmony import */ var _index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./index-e3bf7da7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-e3bf7da7.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */




// https://medium.com/stencil-tricks/implementing-internationalisation-i18n-with-stencil-5e6559554117
function getComponentClosestLanguage(element) {
    var _a, _b, _c;
    const closestElement = (_a = (0,_dom_4d367677_js__WEBPACK_IMPORTED_MODULE_0__.c)(element, "[lang]")) !== null && _a !== void 0 ? _a : (_c = (_b = element.shadowRoot) === null || _b === void 0 ? void 0 : _b.ownerDocument) === null || _c === void 0 ? void 0 : _c.documentElement;
    // language set by the calling application or browser. defaults to english.
    const lang = ((closestElement === null || closestElement === void 0 ? void 0 : closestElement.lang) || (navigator === null || navigator === void 0 ? void 0 : navigator.language) || "en").toLowerCase();
    if (_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang)) {
        return _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang);
    }
    else {
        // "ru-RU" maps to "ru" use case
        if (_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang.slice(0, 2))) {
            return _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang.slice(0, 2));
        }
        else {
            return "en";
        }
    }
}
function getComponentClosestLanguageIntl(element) {
    var _a, _b, _c;
    // it's OK if we don't have the 4 letter language file for it
    // 4 letter language code needed for formatting numbers
    const closestElement = (_a = (0,_dom_4d367677_js__WEBPACK_IMPORTED_MODULE_0__.c)(element, "[lang]")) !== null && _a !== void 0 ? _a : (_c = (_b = element.shadowRoot) === null || _b === void 0 ? void 0 : _b.ownerDocument) === null || _c === void 0 ? void 0 : _c.documentElement;
    // language set by the calling application or browser. defaults to english.
    const lang = ((closestElement === null || closestElement === void 0 ? void 0 : closestElement.lang) || (navigator === null || navigator === void 0 ? void 0 : navigator.language) || "en").toLowerCase();
    if (_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang)) {
        return _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang);
    }
    else {
        if (_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang.slice(0, 2))) {
            // we support the 2 letter coded language
            // e.g. it-CH vs it
            return lang;
        }
        else {
            return "en";
        }
    }
}
function fetchLocaleStringsForComponent(componentName, locale) {
    return new Promise((resolve, reject) => {
        fetch((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_2__.a)(`../arcgis-app-assets/i18n/${componentName}.i18n.${locale}.json`)).then((result) => {
            if (result.ok)
                resolve(result.json());
            else
                reject();
        }, () => reject());
    });
}
const stringCache = {};
function fetchLocaleStringsFromCache(componentName, locale) {
    const id = `${componentName}${locale}`;
    if (!stringCache[id]) {
        stringCache[id] = fetchLocaleStringsForComponent(componentName, locale);
    }
    return stringCache[id];
}
/**
 * Get strings and language codes.
 * This method returns 2 language codes.
 * The first one returns a code that's also supported as a language file.
 * The second one returns a code where there is support for the first 2 letters of the code as part of a language file,
 * but will return the original 4 letter code from the page.
 * E.g. For "it-ch" it will return "it" as the first language code and "it-ch" as the second.
 * The second one is required for esri.intl.setLocale() to get the correct formatting.
 *
 * If a tagName is provided it will overwite the element's tagName
 *
 *  @return [ strings, first language code, second language code]
 */
async function getLocaleComponentStrings(element, tagName) {
    const componentName = tagName || element.tagName.toLowerCase();
    const componentLanguage = getComponentClosestLanguage(element);
    const componentLanguageIntl = getComponentClosestLanguageIntl(element);
    let strings;
    try {
        strings = await fetchLocaleStringsFromCache(componentName, componentLanguage);
    }
    catch (e) {
        console.warn(`no locale for ${componentName} (${componentLanguage}) loading default locale en.`);
        strings = await fetchLocaleStringsFromCache(componentName, "en");
    }
    return [strings, componentLanguage, componentLanguageIntl];
}



//# sourceMappingURL=locale-050b6db9.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/resize-a17b7292.js":
/*!************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/resize-a17b7292.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   D: () => (/* binding */ DROPDOWN_ICON_DISPLAY_CUTOFF_SIZE),
/* harmony export */   b: () => (/* binding */ breakpoints),
/* harmony export */   s: () => (/* binding */ setupResizeObserver)
/* harmony export */ });
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */
const breakpoints = {
    xxs: 320,
    xs: 480,
    sm: 640,
    md: 768,
    lg: 1024,
    xl: 1280
};
const DROPDOWN_ICON_DISPLAY_CUTOFF_SIZE = 960;
function setupResizeObserver(store) {
    var _a;
    var _b;
    (_a = (_b = store.state).resizeObserver) !== null && _a !== void 0 ? _a : (_b.resizeObserver = new ResizeObserver(resizeHandler));
    return store.state.resizeObserver;
}
/**
 * resize handler will be called when items get resized
 * an event is dispatched on each element, passing the new width and height
 */
function resizeHandler(entries) {
    entries.forEach((entry) => {
        if (entry.contentRect.width > 0) {
            const event = new CustomEvent("arcgisBrowserResize", {
                detail: { width: entry.contentRect.width, height: entry.contentRect.height }
            });
            entry.target.dispatchEvent(event);
        }
    });
}



//# sourceMappingURL=resize-a17b7292.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/store-8b1b0846.js":
/*!***********************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/store-8b1b0846.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ onBrowserFilterRemove),
/* harmony export */   b: () => (/* binding */ onGroupIdChange),
/* harmony export */   g: () => (/* binding */ getStore),
/* harmony export */   o: () => (/* binding */ onPreviewChange)
/* harmony export */ });
/* harmony import */ var _dom_4d367677_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dom-4d367677.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-4d367677.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */


const onBrowserFilterRemove = (id, store, callback) => {
    // @ts-ignore
    store.onChange("filters", (filters) => {
        if (!filters[id] || !filters[id].value) {
            callback();
        }
    });
};
const onPreviewChange = (store, callback) => {
    // @ts-ignore
    store.onChange("preview", (preview) => {
        callback();
    });
};
const onGroupIdChange = (store, callback) => {
    // @ts-ignore
    store.onChange("groupId", (preview) => {
        callback();
    });
};
const STORE_LOOKUP = new Map();
function getStore(el, browserTag) {
    const existingStore = STORE_LOOKUP.get(el);
    if (existingStore) {
        return existingStore;
    }
    const browser = (0,_dom_4d367677_js__WEBPACK_IMPORTED_MODULE_0__.c)(el, browserTag);
    if (browser) {
        STORE_LOOKUP.set(el, browser.store);
        return browser.store;
    }
    return null;
}



//# sourceMappingURL=store-8b1b0846.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/store-da3fccd5.js":
/*!***********************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/store-da3fccd5.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ groupBrowserState),
/* harmony export */   g: () => (/* binding */ getGroupBrowserStore)
/* harmony export */ });
/* harmony import */ var _index_05956cab_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-05956cab.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-05956cab.js");
/* harmony import */ var _store_8b1b0846_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./store-8b1b0846.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/store-8b1b0846.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */



function getGroupBrowserStore(el) {
    return (0,_store_8b1b0846_js__WEBPACK_IMPORTED_MODULE_1__.g)(el, "arcgis-group-browser");
}
const GroupBrowserStore = (0,_index_05956cab_js__WEBPACK_IMPORTED_MODULE_0__.c)({ filters: {} });
const groupBrowserState = GroupBrowserStore.state;



//# sourceMappingURL=store-da3fccd5.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,