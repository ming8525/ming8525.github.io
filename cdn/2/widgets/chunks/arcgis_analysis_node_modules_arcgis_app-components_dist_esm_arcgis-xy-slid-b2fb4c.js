"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_arcgis-xy-slid-b2fb4c"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-xy-slider.entry.js":
/*!*******************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-xy-slider.entry.js ***!
  \*******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   arcgis_xy_slider: () => (/* binding */ ArcgisXySlider)
/* harmony export */ });
/* harmony import */ var _index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-e3bf7da7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-e3bf7da7.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */


const arcgisXySliderCss = ":host{display:inline-flex}.container{position:relative;width:100px;height:100px}.grid{width:100px;height:100px}.thumb{position:absolute;background-color:var(--calcite-color-brand);width:12px;height:12px;display:inline-block;border-radius:50%;margin-left:-6px;margin-top:-6px;pointer-events:none}";

const ArcgisXySlider = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisXYSliderChange = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisXYSliderChange", 7);
        this.arcgisXYSliderInput = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisXYSliderInput", 7);
        this.snapKeyDown = false;
        this.dragging = false;
        this.width = 100;
        this.height = 100;
        this.gridMouseDownHandler = (event) => {
            const { offsetX, offsetY } = event;
            this.dragging = true;
            this.captureValue(offsetX, offsetY);
            // prevent text selection outside of color field & slider area
            event.preventDefault();
            document.addEventListener("pointermove", this.globalMouseMoveHandler);
            document.addEventListener("pointerup", this.globalMouseUpHandler, { once: true });
            this.activeGridRect = this.context.canvas.getBoundingClientRect();
            this.setFocus();
            this.drawGrid();
        };
        this.globalMouseMoveHandler = (event) => {
            const { el, activeGridRect } = this;
            if (!el.isConnected) {
                return;
            }
            let samplingX;
            let samplingY;
            const gridRect = activeGridRect;
            const { clientX, clientY } = event;
            if (this.gridHovered) {
                samplingX = clientX - gridRect.x;
                samplingY = clientY - gridRect.y;
            }
            else {
                const gridWidth = gridRect.width;
                const gridHeight = gridRect.height;
                if (clientX < gridRect.x + gridWidth && clientX > gridRect.x) {
                    samplingX = clientX - gridRect.x;
                }
                else if (clientX < gridRect.x) {
                    samplingX = 0;
                }
                else {
                    samplingX = gridWidth;
                }
                if (clientY < gridRect.y + gridHeight && clientY > gridRect.y) {
                    samplingY = clientY - gridRect.y;
                }
                else if (clientY < gridRect.y) {
                    samplingY = 0;
                }
                else {
                    samplingY = gridHeight;
                }
            }
            this.captureValue(samplingX, samplingY);
            this.drawGrid();
        };
        this.globalMouseUpHandler = () => {
            this.dragging = false;
            // TODO: need to compare w/ onclick x/y values before emitting
            this.arcgisXYSliderChange.emit();
            document.removeEventListener("mousemove", this.globalMouseMoveHandler);
            document.removeEventListener("pointermove", this.globalMouseMoveHandler);
        };
        this.gridMouseEnter = () => {
            this.gridHovered = true;
        };
        this.gridMouseLeave = () => {
            this.gridHovered = false;
        };
        this.handleThumbKeyDown = (event) => {
            let x;
            let y;
            const { key } = event;
            if (["ArrowDown", "ArrowUp", "ArrowLeft", "ArrowRight"].indexOf(key) > -1) {
                event.preventDefault();
                event.stopPropagation();
            }
            if (key === "ArrowDown") {
                y = this.clamp(this.y + this.step, this.maxY, this.minY);
            }
            else if (key === "ArrowUp") {
                y = this.clamp(this.y - this.step, this.maxY, this.minY);
            }
            else {
                y = this.y;
            }
            if (key === "ArrowLeft") {
                x = this.clamp(this.x - this.step, this.maxX, this.minX);
            }
            else if (key === "ArrowRight") {
                x = this.clamp(this.x + this.step, this.maxX, this.minX);
            }
            else {
                x = this.x;
            }
            this.userSetXY(x, y);
            this.drawGrid();
        };
        this.handleKeyUp = ({ shiftKey }) => {
            this.snapKeyDown = shiftKey;
        };
        this.handleKeyDown = ({ shiftKey }) => {
            this.snapKeyDown = shiftKey;
        };
        this.initGrid = (canvas) => {
            this.context = canvas.getContext("2d");
            this.setCanvasContextSize(canvas, {
                width: this.width,
                height: this.height
            });
            this.drawGrid();
        };
        this.maxX = 10;
        this.minX = -10;
        this.maxY = 10;
        this.minY = -10;
        this.snappable = false;
        this.step = 1;
        this.x = 0;
        this.y = 0;
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    disconnectedCallback() {
        document.removeEventListener("pointermove", this.globalMouseMoveHandler);
        document.removeEventListener("pointerup", this.globalMouseUpHandler);
    }
    handleXChange(x) {
        this.x = this.clampX(x);
        this.drawGrid();
    }
    handleYChange(y) {
        this.y = this.clampY(y);
        this.drawGrid();
    }
    //--------------------------------------------------------------------------
    //
    //  Private Methods
    //
    //--------------------------------------------------------------------------
    clamp(value, max, min) {
        return Math.min(max, Math.max(min, value));
    }
    clampX(x) {
        return this.clamp(x, this.maxX, this.minX);
    }
    clampY(y) {
        return this.clamp(y, this.maxY, this.minY);
    }
    userSetXY(x, y) {
        x = this.normalize(x);
        y = this.normalize(y);
        if (this.x === x && this.y === y) {
            return;
        }
        this.x = x;
        this.y = y;
        this.arcgisXYSliderInput.emit();
        if (!this.dragging) {
            this.arcgisXYSliderChange.emit();
        }
    }
    mapToRange(valueA, rangeAMin, rangeAMax, rangeBMin, rangeBMax) {
        return rangeBMin + ((valueA - rangeAMin) * (rangeBMax - rangeBMin)) / (rangeAMax - rangeAMin);
    }
    setCanvasContextSize(canvas, { height, width }) {
        const devicePixelRatio = window.devicePixelRatio || 1;
        canvas.width = width * devicePixelRatio;
        canvas.height = height * devicePixelRatio;
        canvas.style.height = `${height}px`;
        canvas.style.width = `${width}px`;
        const context = canvas.getContext("2d");
        context.scale(devicePixelRatio, devicePixelRatio);
    }
    normalize(value) {
        return this.snappable || this.snapKeyDown ? Math.floor(value / this.step) : value;
    }
    captureValue(x, y) {
        this.userSetXY(this.mapToRange(x, 0, this.width, this.minX, this.maxX), this.mapToRange(y, 0, this.height, this.minY, this.maxY));
    }
    drawGrid() {
        const { context, height, width } = this;
        // border and background
        context.fillStyle = "#ffffff";
        context.strokeStyle = "#d4d4d4";
        context.lineWidth = 2;
        context.setLineDash([2]);
        context.fillRect(0, 0, width, height);
        context.strokeRect(0, 0, width, height);
        // horizontal grid line
        context.beginPath();
        context.moveTo(0, height / 2);
        context.lineTo(width, height / 2);
        context.stroke();
        // vertical grid line
        context.beginPath();
        context.moveTo(width / 2, 0);
        context.lineTo(width / 2, height);
        context.stroke();
        // value-connecting line
        context.setLineDash([]);
        const x = this.mapToRange(this.x, this.minX, this.maxX, 0, this.width);
        const y = this.mapToRange(this.y, this.minY, this.maxY, 0, this.height);
        context.strokeStyle = "rgba(0, 97, 155, 0.4)";
        context.lineWidth = 2;
        context.beginPath();
        context.moveTo(width / 2, height / 2);
        context.lineTo(x, y);
        context.stroke();
    }
    //--------------------------------------------------------------------------
    //
    //  Public Methods
    //
    //--------------------------------------------------------------------------
    /**
     * Sets focus on the component.
     */
    async setFocus() {
        this.thumbEl.focus();
    }
    //--------------------------------------------------------------------------
    //
    //  Render
    //
    //--------------------------------------------------------------------------
    render() {
        const left = `${this.mapToRange(this.x, this.minX, this.maxX, 0, this.width)}%`;
        const top = `${this.mapToRange(this.y, this.minY, this.maxY, 0, this.height)}%`;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.H, { onKeyUp: this.handleKeyUp, onKeyDown: this.handleKeyDown }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "container" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("canvas", { class: "grid", onPointerDown: this.gridMouseDownHandler, onPointerEnter: this.gridMouseEnter, onPointerLeave: this.gridMouseLeave, ref: this.initGrid }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "thumb", ref: (el) => (this.thumbEl = el), style: {
                left,
                top
            }, tabIndex: 0, onKeyDown: this.handleThumbKeyDown }))));
    }
    get el() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
    static get watchers() { return {
        "x": ["handleXChange"],
        "y": ["handleYChange"]
    }; }
};
ArcgisXySlider.style = arcgisXySliderCss;



//# sourceMappingURL=arcgis-xy-slider.entry.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,