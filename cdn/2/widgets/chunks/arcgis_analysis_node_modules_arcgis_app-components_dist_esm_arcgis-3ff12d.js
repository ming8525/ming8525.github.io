"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_arcgis-3ff12d"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-item-browser-filter-content-type.entry.js":
/*!******************************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-item-browser-filter-content-type.entry.js ***!
  \******************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   arcgis_item_browser_filter_content_type: () => (/* binding */ ArcgisItemBrowserFilterContentType)
/* harmony export */ });
/* harmony import */ var _index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-e3bf7da7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-e3bf7da7.js");
/* harmony import */ var _config_75adf962_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./config-75adf962.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/config-75adf962.js");
/* harmony import */ var _privileges_5c382f61_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./privileges-5c382f61.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/privileges-5c382f61.js");
/* harmony import */ var _store_7fa26472_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./store-7fa26472.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/store-7fa26472.js");
/* harmony import */ var _index_05956cab_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./index-05956cab.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-05956cab.js");
/* harmony import */ var _item_3535552d_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./item-3535552d.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/item-3535552d.js");
/* harmony import */ var _url_4c3ae54c_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./url-4c3ae54c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/url-4c3ae54c.js");
/* harmony import */ var _store_8b1b0846_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./store-8b1b0846.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/store-8b1b0846.js");
/* harmony import */ var _dom_4d367677_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./dom-4d367677.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-4d367677.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */










const arcgisItemBrowserFilterContentTypeCss = ".hide.sc-arcgis-item-browser-filter-content-type{display:none}calcite-list-item.sc-arcgis-item-browser-filter-content-type:not([selected]){--calcite-color-foreground-1:var(--calcite-color-background)}";

const ArcgisItemBrowserFilterContentType = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisItemBrowserFilter = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisItemBrowserFilter", 7);
        this.contentType = "allOrgContent";
        this.expanded = undefined;
        this.contentTypes = ["allOrgContent", "recycle"];
    }
    componentWillLoad() {
        this.store = (0,_store_7fa26472_js__WEBPACK_IMPORTED_MODULE_3__.g)(this.el);
        this.i18n = this.store.state.i18n.filterContentType;
    }
    componentDidLoad() {
        if (this.expanded && this.accordionItem) {
            this.accordionItem.expanded = true;
        }
    }
    getEventDetail() {
        return {
            id: "contentType",
            param: "q",
            value: "",
            label: this.i18n.allOrgContent,
            contentType: this.contentType
        };
    }
    render() {
        const { user, portal } = _config_75adf962_js__WEBPACK_IMPORTED_MODULE_1__.c;
        const bucket = this.store.state.bucket;
        const { i18n, contentType, contentTypes } = this;
        const hide = !user ||
            !contentType ||
            (bucket && bucket !== "org") ||
            (0,_privileges_5c382f61_js__WEBPACK_IMPORTED_MODULE_2__.a)(user) ||
            (portal === null || portal === void 0 ? void 0 : portal.isPortal);
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.H, null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-browser-filter", { heading: i18n.contentType, expanded: this.expanded, noPadding: true, class: { hide } }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-list", { selectionAppearance: "border", selectionMode: "single", loading: !contentType, class: "content-types" }, contentTypes.map((type) => {
            return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-list-item", { class: "content-type", label: i18n[type], value: type, key: type, onCalciteListItemSelect: () => {
                    this.contentType = type;
                    this.arcgisItemBrowserFilter.emit(this.getEventDetail());
                }, selected: this.contentType === type }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { icon: type === "allOrgContent" ? "organization" : "recycle-bin", slot: "content-start", scale: "s" })));
        })))));
    }
    get el() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisItemBrowserFilterContentType.style = arcgisItemBrowserFilterContentTypeCss;



//# sourceMappingURL=arcgis-item-browser-filter-content-type.entry.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/config-75adf962.js":
/*!************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/config-75adf962.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   c: () => (/* binding */ configState),
/* harmony export */   o: () => (/* binding */ onConfigChange)
/* harmony export */ });
/* harmony import */ var _index_05956cab_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-05956cab.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-05956cab.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */


const configStore = (0,_index_05956cab_js__WEBPACK_IMPORTED_MODULE_0__.c)({
    portal: null,
    user: null,
    api: 4,
    scale: "m"
});
const configState = configStore.state;
const onConfigChange = configStore.onChange;



//# sourceMappingURL=config-75adf962.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-05956cab.js":
/*!***********************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-05956cab.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   c: () => (/* binding */ createStore)
/* harmony export */ });
/* harmony import */ var _index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-e3bf7da7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-e3bf7da7.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */


const appendToMap = (map, propName, value) => {
    const items = map.get(propName);
    if (!items) {
        map.set(propName, [value]);
    }
    else if (!items.includes(value)) {
        items.push(value);
    }
};
const debounce = (fn, ms) => {
    let timeoutId;
    return (...args) => {
        if (timeoutId) {
            clearTimeout(timeoutId);
        }
        timeoutId = setTimeout(() => {
            timeoutId = 0;
            fn(...args);
        }, ms);
    };
};

/**
 * Check if a possible element isConnected.
 * The property might not be there, so we check for it.
 *
 * We want it to return true if isConnected is not a property,
 * otherwise we would remove these elements and would not update.
 *
 * Better leak in Edge than to be useless.
 */
const isConnected = (maybeElement) => !('isConnected' in maybeElement) || maybeElement.isConnected;
const cleanupElements = debounce((map) => {
    for (let key of map.keys()) {
        map.set(key, map.get(key).filter(isConnected));
    }
}, 2000);
const stencilSubscription = () => {
    if (typeof _index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.g !== 'function') {
        // If we are not in a stencil project, we do nothing.
        // This function is not really exported by @stencil/core.
        return {};
    }
    const elmsToUpdate = new Map();
    return {
        dispose: () => elmsToUpdate.clear(),
        get: (propName) => {
            const elm = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.g)();
            if (elm) {
                appendToMap(elmsToUpdate, propName, elm);
            }
        },
        set: (propName) => {
            const elements = elmsToUpdate.get(propName);
            if (elements) {
                elmsToUpdate.set(propName, elements.filter(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f));
            }
            cleanupElements(elmsToUpdate);
        },
        reset: () => {
            elmsToUpdate.forEach((elms) => elms.forEach(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f));
            cleanupElements(elmsToUpdate);
        },
    };
};

const unwrap = (val) => (typeof val === 'function' ? val() : val);
const createObservableMap = (defaultState, shouldUpdate = (a, b) => a !== b) => {
    const unwrappedState = unwrap(defaultState);
    let states = new Map(Object.entries(unwrappedState !== null && unwrappedState !== void 0 ? unwrappedState : {}));
    const handlers = {
        dispose: [],
        get: [],
        set: [],
        reset: [],
    };
    const reset = () => {
        var _a;
        // When resetting the state, the default state may be a function - unwrap it to invoke it.
        // otherwise, the state won't be properly reset
        states = new Map(Object.entries((_a = unwrap(defaultState)) !== null && _a !== void 0 ? _a : {}));
        handlers.reset.forEach((cb) => cb());
    };
    const dispose = () => {
        // Call first dispose as resetting the state would
        // cause less updates ;)
        handlers.dispose.forEach((cb) => cb());
        reset();
    };
    const get = (propName) => {
        handlers.get.forEach((cb) => cb(propName));
        return states.get(propName);
    };
    const set = (propName, value) => {
        const oldValue = states.get(propName);
        if (shouldUpdate(value, oldValue, propName)) {
            states.set(propName, value);
            handlers.set.forEach((cb) => cb(propName, value, oldValue));
        }
    };
    const state = (typeof Proxy === 'undefined'
        ? {}
        : new Proxy(unwrappedState, {
            get(_, propName) {
                return get(propName);
            },
            ownKeys(_) {
                return Array.from(states.keys());
            },
            getOwnPropertyDescriptor() {
                return {
                    enumerable: true,
                    configurable: true,
                };
            },
            has(_, propName) {
                return states.has(propName);
            },
            set(_, propName, value) {
                set(propName, value);
                return true;
            },
        }));
    const on = (eventName, callback) => {
        handlers[eventName].push(callback);
        return () => {
            removeFromArray(handlers[eventName], callback);
        };
    };
    const onChange = (propName, cb) => {
        const unSet = on('set', (key, newValue) => {
            if (key === propName) {
                cb(newValue);
            }
        });
        // We need to unwrap the defaultState because it might be a function.
        // Otherwise we might not be sending the right reset value.
        const unReset = on('reset', () => cb(unwrap(defaultState)[propName]));
        return () => {
            unSet();
            unReset();
        };
    };
    const use = (...subscriptions) => {
        const unsubs = subscriptions.reduce((unsubs, subscription) => {
            if (subscription.set) {
                unsubs.push(on('set', subscription.set));
            }
            if (subscription.get) {
                unsubs.push(on('get', subscription.get));
            }
            if (subscription.reset) {
                unsubs.push(on('reset', subscription.reset));
            }
            if (subscription.dispose) {
                unsubs.push(on('dispose', subscription.dispose));
            }
            return unsubs;
        }, []);
        return () => unsubs.forEach((unsub) => unsub());
    };
    const forceUpdate = (key) => {
        const oldValue = states.get(key);
        handlers.set.forEach((cb) => cb(key, oldValue, oldValue));
    };
    return {
        state,
        get,
        set,
        on,
        onChange,
        use,
        dispose,
        reset,
        forceUpdate,
    };
};
const removeFromArray = (array, item) => {
    const index = array.indexOf(item);
    if (index >= 0) {
        array[index] = array[array.length - 1];
        array.length--;
    }
};

const createStore = (defaultState, shouldUpdate) => {
    const map = createObservableMap(defaultState, shouldUpdate);
    map.use(stencilSubscription());
    return map;
};



//# sourceMappingURL=index-05956cab.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/item-3535552d.js":
/*!**********************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/item-3535552d.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ isSubscriber),
/* harmony export */   b: () => (/* binding */ isPremium),
/* harmony export */   c: () => (/* binding */ canUpdateItem),
/* harmony export */   d: () => (/* binding */ itemsBelongToUserOrg),
/* harmony export */   g: () => (/* binding */ getItemHomeAppUrl),
/* harmony export */   i: () => (/* binding */ isOwner),
/* harmony export */   u: () => (/* binding */ userIsItemAdmin)
/* harmony export */ });
/* harmony import */ var _url_4c3ae54c_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./url-4c3ae54c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/url-4c3ae54c.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */


function isEsri(item) {
    var _a;
    return !!((_a = item.owner) === null || _a === void 0 ? void 0 : _a.toLowerCase().includes("esri"));
}
function isPremium(item) {
    var _a;
    return isEsri(item) && !!((_a = item.typeKeywords) === null || _a === void 0 ? void 0 : _a.includes("Requires Credits"));
}
function isSubscriber(item) {
    var _a;
    return isEsri(item) && !!((_a = item.typeKeywords) === null || _a === void 0 ? void 0 : _a.includes("Requires Subscription"));
}
function isOwner(item, user) {
    return item.owner === user.username;
}
/**
 * Can the user update the item
 */
function canUpdateItem(item, user) {
    return userIsItemAdmin(item, user) || item.itemControl === "update";
}
/**
 * Is the user either an owner or admin of the item
 */
function userIsItemAdmin(item, user) {
    return isOwner(item, user) || isItemAdmin(item, user);
}
/**
 * Does the user have admin capabilities on this item
 */
function isItemAdmin(item, user) {
    var _a;
    // if this flag is already set (probably home app), use it
    if (item.isAdmin != null) {
        return !!item.isAdmin;
    }
    const itemOwner = item.owner;
    const itemControlAdmin = item.itemControl === "admin";
    const esriUsers = ["esri_livingatlas", "esri_demographics", "esri_boundaries"];
    if (((_a = item.portal) === null || _a === void 0 ? void 0 : _a.isPortal) &&
        !isOwner(item, user) &&
        itemControlAdmin &&
        itemOwner.includes("esri_") &&
        // portal incorrectly returns "itemControl="admin" for esri owned items
        !esriUsers.includes(itemOwner)) {
        return false;
    }
    return itemControlAdmin;
}
const itemsBelongToUserOrg = (items, user) => {
    return !!user.orgId && items.every((item) => item.isOrgItem);
};
const getItemHomeAppUrl = (itemId, baseUrl) => `${(0,_url_4c3ae54c_js__WEBPACK_IMPORTED_MODULE_0__.a)(baseUrl)}item.html?id=${itemId}`;



//# sourceMappingURL=item-3535552d.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/privileges-5c382f61.js":
/*!****************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/privileges-5c382f61.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ isPublicUser),
/* harmony export */   b: () => (/* binding */ isOrgAdmin),
/* harmony export */   c: () => (/* binding */ isHostedPortal),
/* harmony export */   d: () => (/* binding */ isCustomRole),
/* harmony export */   e: () => (/* binding */ canUpdateOrgGroups),
/* harmony export */   f: () => (/* binding */ canUpdateItemCategories),
/* harmony export */   g: () => (/* binding */ canManageCollaborations),
/* harmony export */   h: () => (/* binding */ isOrgUser),
/* harmony export */   i: () => (/* binding */ isDeveloper),
/* harmony export */   j: () => (/* binding */ canShareItemToGroup),
/* harmony export */   k: () => (/* binding */ canShareItemToOrg),
/* harmony export */   l: () => (/* binding */ adminCanShareOthersItemToGroup),
/* harmony export */   m: () => (/* binding */ canShareOthersItemsToOrg),
/* harmony export */   n: () => (/* binding */ canShareItemToPublic),
/* harmony export */   o: () => (/* binding */ canShareOthersItemsToPublic),
/* harmony export */   p: () => (/* binding */ hasAdminSharePrivilege),
/* harmony export */   q: () => (/* binding */ canViewOthersOrgItems)
/* harmony export */ });
/* harmony import */ var _item_3535552d_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./item-3535552d.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/item-3535552d.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */


const getUserRole = (user) => {
    var _a, _b, _c;
    return typeof (user === null || user === void 0 ? void 0 : user.role) === "string" && !!(user === null || user === void 0 ? void 0 : user.role)
        ? user === null || user === void 0 ? void 0 : user.role
        : (_b = (_a = user === null || user === void 0 ? void 0 : user.roleId) !== null && _a !== void 0 ? _a : user === null || user === void 0 ? void 0 : user.id) !== null && _b !== void 0 ? _b : (_c = user === null || user === void 0 ? void 0 : user.sourceJSON) === null || _c === void 0 ? void 0 : _c.id;
};
function isPublicUser(user) {
    return user && !user.orgId;
}
function isHostedPortal(portal) {
    return !portal.isPortal || !!portal.isBackedBySDS;
}
function isDeveloper(subscriptionInfo) {
    const devSubscriptionTypes = ["Trial Developer", "Developer", "Developer Subscription"];
    return devSubscriptionTypes.includes(subscriptionInfo === null || subscriptionInfo === void 0 ? void 0 : subscriptionInfo.type);
}
function isOrgAdmin(user) {
    return getUserRole(user) === "org_admin" || getUserRole(user) === "account_admin";
}
function isOrgUser(user) {
    return getUserRole(user) === "org_user" || getUserRole(user) === "account_user";
}
function isCustomRole(user) {
    // The Home App collapse the `roleId` and `role` into a single `id` property, that's why
    //  https://devtopia.esri.com/WebGIS/arcgis-portal-app/blob/master/src/js/arcgisonline/sharing/dijit/Role.ts#L469 works
    // In practice, we only need to check if `roleId` exist
    //  https://devtopia.esri.com/WebGIS/arcgis-portal-app/issues/44682#issuecomment-4146866
    return !!(user === null || user === void 0 ? void 0 : user.roleId) && user.roleId.length > 0;
}
/**
 * Checks whether the privilege "portal:admin:updateItemCategorySchema" is granted.
 */
function canUpdateItemCategories(user) {
    var _a;
    return !!((_a = user === null || user === void 0 ? void 0 : user.privileges) === null || _a === void 0 ? void 0 : _a.includes("portal:admin:updateItemCategorySchema"));
}
/**
 * Checks whether the privilege "portal:admin:updateGroups" is granted.
 */
function canUpdateOrgGroups(user) {
    var _a;
    return !!((_a = user === null || user === void 0 ? void 0 : user.privileges) === null || _a === void 0 ? void 0 : _a.includes("portal:admin:updateGroups"));
}
/**
 * Checks whether the user is allowed to update other user's items in their organization.
 */
function canUpdateOrgItems(user) {
    return ((user === null || user === void 0 ? void 0 : user.privileges) || []).includes("portal:admin:updateItems");
}
/**
 * Checks to ensure the portal is an organization portal
 */
function isOrgPortal(portal) {
    return !!(portal.urlKey && portal.customBaseUrl) || !!portal.isPortal;
}
/**
 * Checks whether the user is allowed to share their item to groups
 */
function canShareItemToGroup(user) {
    return ((user === null || user === void 0 ? void 0 : user.privileges) || []).includes("portal:user:shareToGroup");
}
/**
 * Checks whether the user can share an item on a given portal
 */
function canShare(user, portal) {
    return (!isOrgPortal(portal) ||
        canShareItemToGroup(user) ||
        canShareItemToOrg(user) ||
        (!!portal.canSharePublic && canShareItemToPublic(user)));
}
/**
 * Checks whether the user is allowed to share their item ot the organization.
 */
function canShareItemToOrg(user) {
    return ((user === null || user === void 0 ? void 0 : user.privileges) || []).includes("portal:user:shareToOrg");
}
/**
 * Checks whether the user is allowed to share their item to public
 */
function canShareItemToPublic(user) {
    return ((user === null || user === void 0 ? void 0 : user.privileges) || []).includes("portal:user:shareToPublic");
}
/**
 * Checks whether the user can share other user's items
 */
function canShareOthersItemsToOrg(user) {
    return ((user === null || user === void 0 ? void 0 : user.privileges) || []).includes("portal:admin:shareToOrg");
}
/**
 * Checks whether the user can share other user's items
 */
function canShareOthersItemsToPublic(user) {
    return ((user === null || user === void 0 ? void 0 : user.privileges) || []).includes("portal:admin:shareToPublic");
}
/**
 * Checks whether the user can share other user's items
 */
function adminCanShareOthersItemToGroup(user) {
    return ((user === null || user === void 0 ? void 0 : user.privileges) || []).includes("portal:admin:shareToGroup");
}
/**
 * Checks whether the user is in an allowed organization and has the power to manage collaborations
 */
function canManageCollaborations(config, user, portal, subscriptionInfo) {
    const excludedOrgTypes = ["Trial", "Trial Press", "Trial Developer", "Developer Subscription", "Evaluation"];
    const isValidOrgType = subscriptionInfo && !excludedOrgTypes.includes(subscriptionInfo.type);
    const hasPrivilege = ((user === null || user === void 0 ? void 0 : user.privileges) || []).includes("portal:admin:manageCollaborations");
    return !!((config === null || config === void 0 ? void 0 : config.collaborationsEnabled) &&
        user &&
        (isOrgAdmin(user) || hasPrivilege) &&
        ((portal === null || portal === void 0 ? void 0 : portal.isPortal) || isValidOrgType));
}
/**
 * Checks whether the user can view other organization users' items
 */
function canViewOrgItems(user) {
    return ((user === null || user === void 0 ? void 0 : user.privileges) || []).includes("portal:admin:viewItems");
}
/**
 * Checks whether the user can view other organization users' items
 */
function canViewOthersOrgItems(user) {
    return !!user && (!isCustomRole(user) || (isCustomRole(user) && canViewOrgItems(user)));
}
// TODO: add unit tests
const hasAdminSharePrivilege = ({ items, user, portal }) => {
    const item = items[0];
    // enterprise incorrectly returns items owned by "esri_" as item control admin (WebGIS/arcgis-portal-app#38695)
    const owner = item.owner;
    const whitelistOwner = ["esri_livingatlas"];
    if (portal.isPortal && owner !== user.username && owner.includes("esri_") && !whitelistOwner.includes(owner)) {
        return false;
    }
    const isOwnerOrAdmin = (0,_item_3535552d_js__WEBPACK_IMPORTED_MODULE_0__.u)(item, user);
    const isCustom = isCustomRole(user);
    const canShareOrgItems = canShareOthersItems(user);
    const canUpdateAndShare = (0,_item_3535552d_js__WEBPACK_IMPORTED_MODULE_0__.c)(item, user) &&
        canUpdateOrgItems(user) &&
        !isCustom &&
        (canShare(user, portal) || canShareOthersItems(user));
    // if it's the item owner or admin, or custom admin who can share
    return isOwnerOrAdmin || canUpdateAndShare || ((0,_item_3535552d_js__WEBPACK_IMPORTED_MODULE_0__.d)(items, user) && canShareOrgItems);
};
/**
 * Checks whether the user can share other user's items
 */
function canShareOthersItems(user) {
    return adminCanShareOthersItemToGroup(user) || canShareOthersItemsToOrg(user) || canShareOthersItemsToPublic(user);
}



//# sourceMappingURL=privileges-5c382f61.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/store-7fa26472.js":
/*!***********************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/store-7fa26472.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ onItemBrowserSortChange),
/* harmony export */   b: () => (/* binding */ onItemBrowserPreviewChange),
/* harmony export */   c: () => (/* binding */ onItemBrowserViewChange),
/* harmony export */   g: () => (/* binding */ getItemBrowserStore),
/* harmony export */   o: () => (/* binding */ onItemBrowserBucketChange)
/* harmony export */ });
/* harmony import */ var _store_8b1b0846_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./store-8b1b0846.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/store-8b1b0846.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */


function getItemBrowserStore(el) {
    return (0,_store_8b1b0846_js__WEBPACK_IMPORTED_MODULE_0__.g)(el, "arcgis-item-browser");
}
const onItemBrowserViewChange = (store, callback) => {
    store.onChange("view", (newView) => {
        callback(newView);
    });
};
const onItemBrowserBucketChange = (store, callback) => {
    store.onChange("bucket", (newBucket) => {
        callback(newBucket);
    });
};
const onItemBrowserPreviewChange = (store, callback) => {
    store.onChange("preview", (preview) => {
        callback(preview);
    });
};
const onItemBrowserSortChange = (store, callback) => {
    store.onChange("sort", (sort) => {
        callback(sort);
    });
};



//# sourceMappingURL=store-7fa26472.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/store-8b1b0846.js":
/*!***********************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/store-8b1b0846.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ onBrowserFilterRemove),
/* harmony export */   b: () => (/* binding */ onGroupIdChange),
/* harmony export */   g: () => (/* binding */ getStore),
/* harmony export */   o: () => (/* binding */ onPreviewChange)
/* harmony export */ });
/* harmony import */ var _dom_4d367677_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dom-4d367677.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-4d367677.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */


const onBrowserFilterRemove = (id, store, callback) => {
    // @ts-ignore
    store.onChange("filters", (filters) => {
        if (!filters[id] || !filters[id].value) {
            callback();
        }
    });
};
const onPreviewChange = (store, callback) => {
    // @ts-ignore
    store.onChange("preview", (preview) => {
        callback();
    });
};
const onGroupIdChange = (store, callback) => {
    // @ts-ignore
    store.onChange("groupId", (preview) => {
        callback();
    });
};
const STORE_LOOKUP = new Map();
function getStore(el, browserTag) {
    const existingStore = STORE_LOOKUP.get(el);
    if (existingStore) {
        return existingStore;
    }
    const browser = (0,_dom_4d367677_js__WEBPACK_IMPORTED_MODULE_0__.c)(el, browserTag);
    if (browser) {
        STORE_LOOKUP.set(el, browser.store);
        return browser.store;
    }
    return null;
}



//# sourceMappingURL=store-8b1b0846.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/url-4c3ae54c.js":
/*!*********************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/url-4c3ae54c.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ addTrailingSlashIfMissing),
/* harmony export */   b: () => (/* binding */ geoJsonRegExp),
/* harmony export */   c: () => (/* binding */ agsRegExp),
/* harmony export */   g: () => (/* binding */ getRestUrlFromUrl),
/* harmony export */   p: () => (/* binding */ parseAGSServerInfo),
/* harmony export */   r: () => (/* binding */ regexServerType),
/* harmony export */   s: () => (/* binding */ specialCharactersRegExp),
/* harmony export */   v: () => (/* binding */ validArcgisRestServicePath)
/* harmony export */ });
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */
const specialCharactersRegExp = /\+|\?|\/|\(|\)|\\|\!|\#|\"|\||\*|\:|<|>|\%|\$|\@|\'|\^|\[|\]|\,|\=|\;/gi;
const geoJsonRegExp = /(\.|outputFormat=)json|geojson$/i;
const agsRegExp = /\/ags\//gi;

const serverTypes = "MapServer|GeocodeServer|GPServer|GeometryServer|ImageServer|NAServer|FeatureServer|GeoDataServer|GlobeServer|MobileServer|WMServer|SceneServer|VectorTileServer|StreamServer|WorkspaceServer|GeoenrichmentServer|VideoServer";
const regexServerType = new RegExp(`http.+\/(${serverTypes})`);
const validArcgisRestServicePath = `\/arcgis\/rest\/services|\/rest\/services|\/arcgis\/services|\/arcgis\/rest`;
const serverInfoExp = `(?<server>http.+(?:${validArcgisRestServicePath})(?:\/?.*\/(?<name>.*)\/(?<type>${serverTypes})))(?!.*\/${serverTypes})\/?(?<soe>\\d+)?.*`;
/** Returns an array containing the input url, base server url, server name, server type, and layer index (if entered).
 * Example: [
 * "https://sampleserver6.arcgisonline.com/arcgis/rest/services/FeatureServer/500",
 * "https://sampleserver6.arcgisonline.com/arcgis/rest/services/TestService/FeatureServer",
 * "TestService",
 * "FeatureServer",
 * "500"
 * ]  */
const regexServerInfo = new RegExp(serverInfoExp, "i");

const parseAGSServerInfo = (url) => {
    const extractedInfo = url.match(regexServerInfo);
    if (!extractedInfo) {
        const containsAGS = url.match(agsRegExp);
        // Type is always MapServer for /ags/ services
        return containsAGS ? { baseServerUrl: url, serverName: null, serverType: "MapServer", index: null } : null;
    }
    const [, baseServerUrl, serverName, serverType, indexStr] = extractedInfo;
    const index = parseInt(indexStr);
    return { baseServerUrl, serverName, serverType, index: isNaN(index) ? null : index };
};
const getRestUrlFromUrl = (url) => {
    if (!url) {
        return null;
    }
    const extractedInfo = url.match(validArcgisRestServicePath);
    if (!extractedInfo) {
        return null;
    }
    const urlParts = url.split("/rest");
    return urlParts.length < 2 ? null : `${urlParts[0]}/rest/`;
};
const addTrailingSlashIfMissing = (url) => url && url.charAt(url.length - 1) !== "/" ? `${url}/` : url;



//# sourceMappingURL=url-4c3ae54c.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,