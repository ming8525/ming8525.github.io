"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_arcgis-raster-function-editor_-0ad10c"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/help-texts.hu-73a1ac5a.js":
/*!**********************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/help-texts.hu-73a1ac5a.js ***!
  \**********************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   rfxArgsHelpTexts: () => (/* binding */ rfxArgsHelpTexts)
/* harmony export */ });
const rfxArgsHelpTexts = {
	"@@Abs_Cellsize-Type_tag0@@": "Válassza ki, hogy melyik cellaméretet szeretné használni a kimeneti raszterben. Ha mindegyik bemeneti cellaméret azonos, mindegyik lehetőség ugyanarra az eredményre vezet.",
	"@@Abs_Cellsize-Type_tag1@@": "Első--a bemeneti raszterek első cellaméretének használata.",
	"@@Abs_Cellsize-Type_tag2@@": "Utolsó--a bemeneti raszterek utolsó cellaméretének használata.",
	"@@Abs_Cellsize-Type_tag3@@": "Maximum--az összes bemeneti raszter legnagyobb cellaméretének használata. Ez az alapértelmezés.",
	"@@Abs_Cellsize-Type_tag4@@": "Átlag--az összes bemeneti raszter átlagos cellaméretének használata.",
	"@@Abs_Cellsize-Type_tag5@@": "Minimum--az összes bemeneti raszter legkisebb cellaméretének használata.",
	"@@Abs_Extent-Type_tag0@@": "Válassza ki, hogy melyik kiterjedést szeretné használni a kimeneti raszterben:",
	"@@Abs_Extent-Type_tag1@@": "Első--az első bemeneti raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Abs_Extent-Type_tag2@@": "Metszet--az átfedésben lévő pixelek kiterjedésének használata a feldolgozási kiterjedés meghatározásához. Ez az alapértelmezés.",
	"@@Abs_Extent-Type_tag3@@": "Utolsó--az utolsó bemeneti raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Abs_Extent-Type_tag4@@": "Unió--az összes raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Abs_Raster_tag0@@": "Az a bemeneti raszter, amelyhez az abszolút értékeket ki kell számítani.",
	"@@ACos_Cellsize-Type_tag0@@": "Válassza ki, hogy melyik cellaméretet szeretné használni a kimeneti raszterben. Ha mindegyik bemeneti cellaméret azonos, mindegyik lehetőség ugyanarra az eredményre vezet.",
	"@@ACos_Cellsize-Type_tag1@@": "Első--a bemeneti raszterek első cellaméretének használata.",
	"@@ACos_Cellsize-Type_tag2@@": "Utolsó--a bemeneti raszterek utolsó cellaméretének használata.",
	"@@ACos_Cellsize-Type_tag3@@": "Maximum--az összes bemeneti raszter legnagyobb cellaméretének használata. Ez az alapértelmezés.",
	"@@ACos_Cellsize-Type_tag4@@": "Átlag--az összes bemeneti raszter átlagos cellaméretének használata.",
	"@@ACos_Cellsize-Type_tag5@@": "Minimum--az összes bemeneti raszter legkisebb cellaméretének használata.",
	"@@ACos_Extent-Type_tag0@@": "Válassza ki, hogy melyik kiterjedést szeretné használni a kimeneti raszterben:",
	"@@ACos_Extent-Type_tag1@@": "Első--az első bemeneti raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@ACos_Extent-Type_tag2@@": "Metszet--az átfedésben lévő pixelek kiterjedésének használata a feldolgozási kiterjedés meghatározásához. Ez az alapértelmezés.",
	"@@ACos_Extent-Type_tag3@@": "Utolsó--az utolsó bemeneti raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@ACos_Extent-Type_tag4@@": "Unió--az összes raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@ACos_Raster_tag0@@": "Az a bemenet, amelyhez az inverz koszinusz értékeket ki kell számítani.",
	"@@ACosH_Cellsize-Type_tag0@@": "Válassza ki, hogy melyik cellaméretet szeretné használni a kimeneti raszterben. Ha mindegyik bemeneti cellaméret azonos, mindegyik lehetőség ugyanarra az eredményre vezet.",
	"@@ACosH_Cellsize-Type_tag1@@": "Első--a bemeneti raszterek első cellaméretének használata.",
	"@@ACosH_Cellsize-Type_tag2@@": "Utolsó--a bemeneti raszterek utolsó cellaméretének használata.",
	"@@ACosH_Cellsize-Type_tag3@@": "Maximum--az összes bemeneti raszter legnagyobb cellaméretének használata. Ez az alapértelmezés.",
	"@@ACosH_Cellsize-Type_tag4@@": "Átlag--az összes bemeneti raszter átlagos cellaméretének használata.",
	"@@ACosH_Cellsize-Type_tag5@@": "Minimum--az összes bemeneti raszter legkisebb cellaméretének használata.",
	"@@ACosH_Extent-Type_tag0@@": "Válassza ki, hogy melyik kiterjedést szeretné használni a kimeneti raszterben:",
	"@@ACosH_Extent-Type_tag1@@": "Első--az első bemeneti raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@ACosH_Extent-Type_tag2@@": "Metszet--az átfedésben lévő pixelek kiterjedésének használata a feldolgozási kiterjedés meghatározásához. Ez az alapértelmezés.",
	"@@ACosH_Extent-Type_tag3@@": "Utolsó--az utolsó bemeneti raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@ACosH_Extent-Type_tag4@@": "Unió--az összes raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@ACosH_Raster_tag0@@": "Az a bemenet, amelyhez az inverz hiperbolikus koszinusz értékeket ki kell számítani.",
	"@@Apparent-Reflectance_Albedo_tag0@@": "A Látható visszaverődési együttható függvény eredményei kifejezhetők albedó értékben is, vagyis a bolygó felszíne által visszavert, rendelkezésre álló energia százalékában. Az albedóra vonatkozó adatokat a tudományos felhasználók használják összetett modellezéshez és műszaki távérzékelési alkalmazásokhoz.",
	"@@Apparent-Reflectance_Albedo_tag1@@": "Nincs bejelölve--a függvény eredményként a látható visszaverődési együttható értékét adja vissza. Ez az alapértelmezés.",
	"@@Apparent-Reflectance_Albedo_tag2@@": "Bejelölve--a függvény 32 bites lebegőpontos értékeket ad vissza eredményként, általában a 0,0 és az 1,0 közötti tartományban. Nincs adatkivágás, ha ez a lehetőséget be van jelölve.",
	"@@Apparent-Reflectance_Albedo_tag3@@": "Mivel az albedó esetén a kimeneti adattípus lebegőpontos érték, külön meg kell adnia az előnyben részesített <strong>Kimeneti pixel típusa</strong> paraméter értékét: 32 bites lebegőpontos vagy 64 bites double. A <strong>Kimeneti pixel típusa</strong> paraméter a <strong>Látható visszaverődési együttható</strong> raszterfunkció <strong>Általános</strong> lapján található. Ha a <strong>Kimeneti pixel típusa</strong> nincs megfelelően megadva az <strong>Albedó</strong> beállításnál, akkor az eredményként kapott értékek érvénytelenek lesznek, és 0 értéket kapnak.",
	"@@Apparent-Reflectance_Offset_tag0@@": "Az albedó lépték egy eltolási értékkel is rendelkezhet:",
	"@@Apparent-Reflectance_Offset_tag1@@": "16 bites, előjel nélküli adattípusok esetén a lépték alapértelmezett eltolása 5000.",
	"@@Apparent-Reflectance_Offset_tag2@@": "8 bites, előjel nélküli adattípusok esetén a lépték alapértelmezett eltolása 0.",
	"@@Apparent-Reflectance_Offset_tag3@@": "Nincs átméretezés, ha a kimenet albedó.",
	"@@Apparent-Reflectance_Radiance-Gains-and-Bias-Values-per-Band_tag0@@": "Ez az érték mindegyik sávban kézzel beállítható vagy szerkeszthető. A megfelelő információ a bemeneti raszteres termék metaadataiból olvasható ki.",
	"@@Apparent-Reflectance_Raster_tag0@@": "Az a raszteres termék, amelyikre a látható visszaverődési együtthatót alkalmazni fogja.",
	"@@Apparent-Reflectance_Scale-Factor_tag0@@": "A látható visszaverődési együttható kimeneti értéke kifejezhető egész számként. A léptéket meg kell szorozni az albedóval ahhoz, hogy a lebegőpontos értékeket átváltsuk egész értékekké.",
	"@@Apparent-Reflectance_Scale-Factor_tag1@@": "Ha a lépték ${0} vagy nincs megadva, az alkalmazás az alapértelmezett léptéket használja a bemeneti adat pixeltípusától függően:",
	"@@Apparent-Reflectance_Scale-Factor_tag2@@": "16 bites, előjel nélküli adattípusok esetén az alapértelmezett lépték 50000.",
	"@@Apparent-Reflectance_Scale-Factor_tag3@@": "8 bites, előjel nélküli adattípusok esetén az alapértelmezett lépték 255.",
	"@@Apparent-Reflectance_Scale-Factor_tag4@@": "Az alkalmazás mindig használja a léptéket, amikor a kimenet a látható visszaverődési együttható. Nincs átméretezés, ha a kimenet albedó.",
	"@@Apparent-Reflectance_Sun-Elevation_tag0@@": "Ez napmagasság érték fokban kifejezve. Akkor tölti ki adatokkal a rendszer, ha a megfelelő információ kiolvasható a metaadatokból. Ez az érték kézzel beállítható vagy szerkeszthető.",
	"@@ArgStatistics_Max_tag0@@": "Az Ön által beállított legnagyobb érték az a legnagyobb érték, amely nem nagyobb az időtartam végénél.",
	"@@ArgStatistics_Max_tag1@@": "Ez a bemenet csak akkor érvényes, amikor a módszer Időtartam.",
	"@@ArgStatistics_Method_tag0@@": "Válassza ki a statisztikai módszert a számításhoz:",
	"@@ArgStatistics_Method_tag1@@": "Arg. max--a maximum argumentuma, amely azt a(z) ${Band index} értéket adja vissza, amely mellett az adott pixel a legnagyobb értékét veszi fel az összes hullámhossztartományból. Mindegyik bemeneti raszter összes raszter-hullámhossztartománya egy 0-val kezdődő, emelkedő sávtartomány-indexet kap, amely elsődlegesen a bemeneti raszter indexe szerint, másodlagosan pedig az egyes bemeneti rasztereken belüli relatív hullámhossztartomány-sorrend szerint van rendezve.",
	"@@ArgStatistics_Method_tag2@@": "Arg. közép--a medián argumentuma, amely azt a(z) ${Band index} értéket adja vissza, amely mellett az adott pixel a medián értékét veszi fel az összes sáv értékei közül.",
	"@@ArgStatistics_Method_tag3@@": "Arg. min--a minimum argumentuma, amely azt a(z) ${Band index} értéket adja vissza, amely mellett az adott pixel a legkisebb értékét veszi fel az összes sávból.",
	"@@ArgStatistics_Method_tag4@@": "Időtartam--az Időtartam módszer a leghosszabb olyan egymást követő elemek sorozatát keresi a tömbben, ahol az egyes elemek értéke nagyobb mint vagy egyenlő a <strong>Min</strong> értéke, és kisebb mint vagy egyenlő a <strong>Max</strong> értékével, majd visszaadja annak hosszát.",
	"@@ArgStatistics_Min_tag0@@": "Az Ön által beállított legkisebb érték az a legkisebb érték, amely nem kisebb az időtartam kezdeténél.",
	"@@ArgStatistics_Min_tag1@@": "Ez a bemenet csak akkor érvényes, amikor a módszer Időtartam.",
	"@@ArgStatistics_Rasters_tag0@@": "A bemeneti raszter, amelyen elvégzi a különböző statisztikai módszereket.",
	"@@ArgStatistics_Undefined-Class_tag0@@": "Egy konstans bemenet, amelyet az alkalmazás akkor ad vissza eredményként, amikor nem határozható meg egyértelműen a maximum, a minimum vagy a medián. A leggyakoribb eset, amikor a maximum vagy a minimum értéke egynél többször fordul elő az összes sávból származó értékek között. A nem definiált konstans alapértelmezett értéke 100.",
	"@@ArgStatistics_Undefined-Class_tag1@@": "A nem definiált osztály csak akkor érvényes, amikor a metódus <strong>ArgMax</strong>, <strong>ArgMin</strong> vagy <strong>ArgMedian</strong>.",
	"@@ArgStatistics_ignorenodata_tag0@@": "Azt jelöli, hogy a rendszer a NoData értékeket figyelmen kívül hagyja-e a statisztikai számítás során.",
	"@@ArgStatistics_ignorenodata_tag1@@": "Ha be van jelölve: az elemzés a bemeneti raszterek összes érvényes képpontját figyelembe veszi, és figyelmen kívül hagyja a NoData képpontokat.",
	"@@ArgStatistics_ignorenodata_tag2@@": "ha nincs bejelölve: az elemzés nem fog adatot eredményezni, ha a bemeneti raszterekben lévő képpontokra nincsenek adatértékek. Ez az alapértelmezés.",
	"@@Arithmetic_Cellsize-Type_tag0@@": "Válassza ki, hogy melyik cellaméretet szeretné használni a kimeneti raszterben. Ha mindegyik bemeneti cellaméret azonos, mindegyik lehetőség ugyanarra az eredményre vezet.",
	"@@Arithmetic_Cellsize-Type_tag1@@": "Első--a bemeneti raszterek első cellaméretének használata.",
	"@@Arithmetic_Cellsize-Type_tag2@@": "Utolsó--a bemeneti raszterek utolsó cellaméretének használata.",
	"@@Arithmetic_Cellsize-Type_tag3@@": "Maximum--az összes bemeneti raszter legnagyobb cellaméretének használata. Ez az alapértelmezés.",
	"@@Arithmetic_Cellsize-Type_tag4@@": "Átlag--az összes bemeneti raszter átlagos cellaméretének használata.",
	"@@Arithmetic_Cellsize-Type_tag5@@": "Minimum--az összes bemeneti raszter legkisebb cellaméretének használata.",
	"@@Arithmetic_Extent-Type_tag0@@": "Válassza ki, hogy melyik kiterjedést szeretné használni a kimeneti raszterben:",
	"@@Arithmetic_Extent-Type_tag1@@": "Első--az első bemeneti raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Arithmetic_Extent-Type_tag2@@": "Metszet--az átfedésben lévő pixelek kiterjedésének használata a feldolgozási kiterjedés meghatározásához. Ez az alapértelmezés.",
	"@@Arithmetic_Extent-Type_tag3@@": "Utolsó--az utolsó bemeneti raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Arithmetic_Extent-Type_tag4@@": "Unió--az összes raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Arithmetic_Operation_tag0@@": "A két bemeneti raszter között elvégzendő aritmetikai művelet.",
	"@@Arithmetic_Operation_tag1@@": "A következő beállítások lehetségesek:",
	"@@Arithmetic_Operation_tag2@@": "<strong>Osztás</strong>--Az egyes raszterekhez tartozó pixelértékek osztásának eredményét adja vissza kimenetként.",
	"@@Arithmetic_Operation_tag4@@": "<strong>Mínusz</strong>--Az egyes raszterekhez tartozó pixelértékek közötti különbséget adja vissza kimenetként. Ez a változásészlelés kiszámításához használható.",
	"@@Arithmetic_Operation_tag6@@": "<strong>Mód</strong>--Az összes átfedő pixel közül a leggyakrabban előfordulónak a pixelértékét adja vissza kimenetként. Ha például hat sáv van egy raszterben, akkor hat átfedő pixel lesz. Ha az értékek 4, 5, 6, 4, 7, 9, a módusz értéke 4.",
	"@@Arithmetic_Operation_tag8@@": "<strong>Szorzás</strong>--Az egyes raszterekhez tartozó pixelértékek szorzatát adja vissza kimenetként. Ez néhány költségművelet elvégzésére használható.",
	"@@Arithmetic_Operation_tag10@@": "<strong>Összeadás</strong>--Az egyes raszterekhez tartozó pixelértékek összegét adja vissza kimenetként.",
	"@@Arithmetic_Operation_tag12@@": "<strong>Hatványozás</strong>--A megfelelő pixelértékek szorzatát adja vissza kimenetként a bemeneti raszternek vagy skalárnak megfelelő hatványon.",
	"@@Arithmetic_Raster_tag0@@": "Az első bemeneti raszteres adathalmaz.",
	"@@Arithmetic_Raster2_tag0@@": "A második bemeneti raszteres adathalmaz.",
	"@@ASin_Cellsize-Type_tag0@@": "Válassza ki, hogy melyik cellaméretet szeretné használni a kimeneti raszterben. Ha mindegyik bemeneti cellaméret azonos, mindegyik lehetőség ugyanarra az eredményre vezet.",
	"@@ASin_Cellsize-Type_tag1@@": "Első--a bemeneti raszterek első cellaméretének használata.",
	"@@ASin_Cellsize-Type_tag2@@": "Utolsó--a bemeneti raszterek utolsó cellaméretének használata.",
	"@@ASin_Cellsize-Type_tag3@@": "Maximum--az összes bemeneti raszter legnagyobb cellaméretének használata. Ez az alapértelmezés.",
	"@@ASin_Cellsize-Type_tag4@@": "Átlag--az összes bemeneti raszter átlagos cellaméretének használata.",
	"@@ASin_Cellsize-Type_tag5@@": "Minimum--az összes bemeneti raszter legkisebb cellaméretének használata.",
	"@@ASin_Extent-Type_tag0@@": "Válassza ki, hogy melyik kiterjedést szeretné használni a kimeneti raszterben:",
	"@@ASin_Extent-Type_tag1@@": "Első--az első bemeneti raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@ASin_Extent-Type_tag2@@": "Metszet--az átfedésben lévő pixelek kiterjedésének használata a feldolgozási kiterjedés meghatározásához. Ez az alapértelmezés.",
	"@@ASin_Extent-Type_tag3@@": "Utolsó--az utolsó bemeneti raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@ASin_Extent-Type_tag4@@": "Unió--az összes raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@ASin_Raster_tag0@@": "Az a bemenet, amelyhez az inverz szinusz értékeket ki kell számítani.",
	"@@ASinH_Cellsize-Type_tag0@@": "Válassza ki, hogy melyik cellaméretet szeretné használni a kimeneti raszterben. Ha mindegyik bemeneti cellaméret azonos, mindegyik lehetőség ugyanarra az eredményre vezet.",
	"@@ASinH_Cellsize-Type_tag1@@": "Első--a bemeneti raszterek első cellaméretének használata.",
	"@@ASinH_Cellsize-Type_tag2@@": "Utolsó--a bemeneti raszterek utolsó cellaméretének használata.",
	"@@ASinH_Cellsize-Type_tag3@@": "Maximum--az összes bemeneti raszter legnagyobb cellaméretének használata. Ez az alapértelmezés.",
	"@@ASinH_Cellsize-Type_tag4@@": "Átlag--az összes bemeneti raszter átlagos cellaméretének használata.",
	"@@ASinH_Cellsize-Type_tag5@@": "Minimum--az összes bemeneti raszter legkisebb cellaméretének használata.",
	"@@ASinH_Extent-Type_tag0@@": "Válassza ki, hogy melyik kiterjedést szeretné használni a kimeneti raszterben:",
	"@@ASinH_Extent-Type_tag1@@": "Első--az első bemeneti raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@ASinH_Extent-Type_tag2@@": "Metszet--az átfedésben lévő pixelek kiterjedésének használata a feldolgozási kiterjedés meghatározásához. Ez az alapértelmezés.",
	"@@ASinH_Extent-Type_tag3@@": "Utolsó--az utolsó bemeneti raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@ASinH_Extent-Type_tag4@@": "Unió--az összes raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@ASinH_Raster_tag0@@": "Az a bemenet, amelyhez az inverz hiperbolikus szinusz értékeket ki kell számítani.",
	"@@Aspect_Raster_tag0@@": "A kitettség-adathalmaz származtatásához használt bemeneti DMM.",
	"@@Aspect-Slope_Raster_tag0@@": "A bemeneti DMM.",
	"@@Aspect-Slope_Z-Factor_tag0@@": "Egy arányszám, amelyet a magasságértékek átváltásához használunk a következő két célból:",
	"@@Aspect-Slope_Z-Factor_tag1@@": "A magasság mértékegységének (pl. méter vagy láb) átváltása az adathalmaz vízszintes koordinátáinak mértékegységére, amely lehet láb, méter vagy fok.",
	"@@Aspect-Slope_Z-Factor_tag2@@": "Függőleges torzítás elérése a vizuális hatás érdekében.",
	"@@ATan_Cellsize-Type_tag0@@": "Válassza ki, hogy melyik cellaméretet szeretné használni a kimeneti raszterben. Ha mindegyik bemeneti cellaméret azonos, mindegyik lehetőség ugyanarra az eredményre vezet.",
	"@@ATan_Cellsize-Type_tag1@@": "Első--a bemeneti raszterek első cellaméretének használata.",
	"@@ATan_Cellsize-Type_tag2@@": "Utolsó--a bemeneti raszterek utolsó cellaméretének használata.",
	"@@ATan_Cellsize-Type_tag3@@": "Maximum--az összes bemeneti raszter legnagyobb cellaméretének használata. Ez az alapértelmezés.",
	"@@ATan_Cellsize-Type_tag4@@": "Átlag--az összes bemeneti raszter átlagos cellaméretének használata.",
	"@@ATan_Cellsize-Type_tag5@@": "Minimum--az összes bemeneti raszter legkisebb cellaméretének használata.",
	"@@ATan_Extent-Type_tag0@@": "Válassza ki, hogy melyik kiterjedést szeretné használni a kimeneti raszterben:",
	"@@ATan_Extent-Type_tag1@@": "Első--az első bemeneti raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@ATan_Extent-Type_tag2@@": "Metszet--az átfedésben lévő pixelek kiterjedésének használata a feldolgozási kiterjedés meghatározásához. Ez az alapértelmezés.",
	"@@ATan_Extent-Type_tag3@@": "Utolsó--az utolsó bemeneti raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@ATan_Extent-Type_tag4@@": "Unió--az összes raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@ATan_Raster_tag0@@": "Az a bemenet, amelyhez az inverz tangens értékeket ki kell számítani.",
	"@@ATan2_Cellsize-Type_tag0@@": "Válassza ki, hogy melyik cellaméretet szeretné használni a kimeneti raszterben. Ha mindegyik bemeneti cellaméret azonos, mindegyik lehetőség ugyanarra az eredményre vezet.",
	"@@ATan2_Cellsize-Type_tag1@@": "Első--a bemeneti raszterek első cellaméretének használata.",
	"@@ATan2_Cellsize-Type_tag2@@": "Utolsó--a bemeneti raszterek utolsó cellaméretének használata.",
	"@@ATan2_Cellsize-Type_tag3@@": "Maximum--az összes bemeneti raszter legnagyobb cellaméretének használata. Ez az alapértelmezés.",
	"@@ATan2_Cellsize-Type_tag4@@": "Átlag--az összes bemeneti raszter átlagos cellaméretének használata.",
	"@@ATan2_Cellsize-Type_tag5@@": "Minimum--az összes bemeneti raszter legkisebb cellaméretének használata.",
	"@@ATan2_Extent-Type_tag0@@": "Válassza ki, hogy melyik kiterjedést szeretné használni a kimeneti raszterben:",
	"@@ATan2_Extent-Type_tag1@@": "Első--az első bemeneti raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@ATan2_Extent-Type_tag2@@": "Metszet--az átfedésben lévő pixelek kiterjedésének használata a feldolgozási kiterjedés meghatározásához. Ez az alapértelmezés.",
	"@@ATan2_Extent-Type_tag3@@": "Utolsó--az utolsó bemeneti raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@ATan2_Extent-Type_tag4@@": "Unió--az összes raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@ATan2_Raster_tag0@@": "Az inverz tangens számítása során használandó számlálót – vagy y értéket – meghatározó bemenet.",
	"@@ATan2_Raster2_tag0@@": "Az inverz tangens számítása során használandó nevezőt – vagy x értéket – meghatározó bemenet.",
	"@@ATanH_Cellsize-Type_tag0@@": "Válassza ki, hogy melyik cellaméretet szeretné használni a kimeneti raszterben. Ha mindegyik bemeneti cellaméret azonos, mindegyik lehetőség ugyanarra az eredményre vezet.",
	"@@ATanH_Cellsize-Type_tag1@@": "Első--a bemeneti raszterek első cellaméretének használata.",
	"@@ATanH_Cellsize-Type_tag2@@": "Utolsó--a bemeneti raszterek utolsó cellaméretének használata.",
	"@@ATanH_Cellsize-Type_tag3@@": "Maximum--az összes bemeneti raszter legnagyobb cellaméretének használata. Ez az alapértelmezés.",
	"@@ATanH_Cellsize-Type_tag4@@": "Átlag--az összes bemeneti raszter átlagos cellaméretének használata.",
	"@@ATanH_Cellsize-Type_tag5@@": "Minimum--az összes bemeneti raszter legkisebb cellaméretének használata.",
	"@@ATanH_Extent-Type_tag0@@": "Válassza ki, hogy melyik kiterjedést szeretné használni a kimeneti raszterben:",
	"@@ATanH_Extent-Type_tag1@@": "Első--az első bemeneti raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@ATanH_Extent-Type_tag2@@": "Metszet--az átfedésben lévő pixelek kiterjedésének használata a feldolgozási kiterjedés meghatározásához. Ez az alapértelmezés.",
	"@@ATanH_Extent-Type_tag3@@": "Utolsó--az utolsó bemeneti raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@ATanH_Extent-Type_tag4@@": "Unió--az összes raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@ATanH_Raster_tag0@@": "Az a bemenet, amelyhez az inverz hiperbolikus tangens értékeket ki kell számítani.",
	"@@Attribute-Table_Raster_tag0@@": "A bemeneti raszter.",
	"@@Attribute-Table_Table-Type_tag0@@": "A bemeneti attribútumtábla a <strong>Manuális</strong> típust használva adható meg, ahol mindegyik értékhez egy osztálynevet és egy színt kell rendelnie, vagy hivatkozhat egy létező táblára is egy ${.dbf} fájlból.",
	"@@Band-Arithmetic_Band-Indexes_tag0@@": "Meghatározhatja a hullámhossztartomány-aritmetika képletét, ha a <strong>Metódus</strong> beállításaként a <strong>felhasználó által meghatározott</strong> lehetőséget választja.",
	"@@Band-Arithmetic_Band-Indexes_tag5@@": "Ha a <strong>Metódus</strong> paramétereként előre meghatározott indexet választ, akkor adja meg a bemeneti raszteres adathalmaz indexnek megfelelő hullámhossztartományait.",
	"@@Band-Arithmetic_Method_tag0@@": "Az alkalmazni kívánt sáv aritmetikai algoritmus típusa. Megadhatja a saját egyéni algoritmusát, vagy választhat egy előre meghatározott indexet.",
	"@@Band-Arithmetic_Method_tag1@@": "<strong>BAI</strong> – Leégett terület index",
	"@@Band-Arithmetic_Method_tag2@@": "<strong>Clg</strong> – Klorofillindex – zöld",
	"@@Band-Arithmetic_Method_tag3@@": "<strong>Clre</strong> – Korofillindex – vörös él",
	"@@Band-Arithmetic_Method_tag4@@": "<strong>Agyagásványok</strong> – Agyagásványok aránya",
	"@@Band-Arithmetic_Method_tag5@@": "<strong>EVI</strong> – Továbbfejlesztett vegetációs index",
	"@@Band-Arithmetic_Method_tag6@@": "<strong>Vastartalmú ásványok</strong> – Vastartalmú ásványok aránya",
	"@@Band-Arithmetic_Method_tag7@@": "<strong>GEMI</strong> – Globális környezetmonitoring-index",
	"@@Band-Arithmetic_Method_tag8@@": "<strong>GNDVI</strong> – Zöld normalizált különbség szerinti vegetációs index",
	"@@Band-Arithmetic_Method_tag9@@": "<strong>GVI (Landsat TM)</strong> – Zöld vegetációs index, Landsat TM",
	"@@Band-Arithmetic_Method_tag10@@": "<strong>Vas-oxid</strong> – Vas-oxid aránya",
	"@@Band-Arithmetic_Method_tag11@@": "<strong>MNDWI</strong> – Módosított normalizált különbség szerinti vízindex",
	"@@Band-Arithmetic_Method_tag12@@": "<strong>MTVI2</strong> – Módosított háromszögletű vegetációs index (második iteráció)",
	"@@Band-Arithmetic_Method_tag13@@": "<strong>Modified SAVI</strong> – Módosított talajhoz igazított vegetációs index",
	"@@Band-Arithmetic_Method_tag14@@": "<strong>NBR</strong> – Normalizált leégett terület index",
	"@@Band-Arithmetic_Method_tag15@@": "<strong>NDBI</strong> – Normalizált különbség szerint létrehozott index",
	"@@Band-Arithmetic_Method_tag16@@": "<strong>NDMI</strong> – Normalizált különbség szerinti nedvességtartalom index",
	"@@Band-Arithmetic_Method_tag17@@": "<strong>NDSI</strong> – Normalizált különbség szerinti hó index",
	"@@Band-Arithmetic_Method_tag18@@": "<strong>NDVI</strong> – Normalizált különbség szerinti vegetációs index",
	"@@Band-Arithmetic_Method_tag19@@": "<strong>NDVIre</strong> – Vörös él tartományú normalizált különbség szerinti vegetációs index",
	"@@Band-Arithmetic_Method_tag20@@": "<strong>NDWI</strong> – Normalizált különbség szerinti vízindex",
	"@@Band-Arithmetic_Method_tag21@@": "<strong>PVI</strong> – Merőleges vegetációs index",
	"@@Band-Arithmetic_Method_tag22@@": "<strong>RTVICore</strong> – Vörös él tartományú háromszögletű vegetációs index",
	"@@Band-Arithmetic_Method_tag23@@": "<strong>SAVI</strong> – Talajhoz igazított vegetációs index",
	"@@Band-Arithmetic_Method_tag24@@": "<strong>SR</strong> – Egyszerű arány",
	"@@Band-Arithmetic_Method_tag25@@": "<strong>SRre</strong> – Vörös él tartományú egyszerű arány",
	"@@Band-Arithmetic_Method_tag26@@": "<strong>Sultan-képlet</strong> – Sultan-képlet",
	"@@Band-Arithmetic_Method_tag27@@": "<strong>Transformed SAVI</strong> – Transzformált, talajhoz igazított vegetációs index",
	"@@Band-Arithmetic_Method_tag28@@": "<strong>Felhasználó által meghatározott</strong> – Lehetőséget ad egyéni hullámhossztartomány-aritmetikai kifejezés megadására.",
	"@@Band-Arithmetic_Method_tag29@@": "<strong>VARI</strong> – Látható légköri ellenállási index",
	"@@Band-Arithmetic_Method_tag30@@": "<strong>WNDWI</strong> – Súlyozott normalizált különbség szerinti vízindex",
	"@@Band-Arithmetic_Raster_tag0@@": "A bemeneti raszter.",
	"@@Binary-Thresholding_Raster_tag0@@": "A bemeneti raszter.",
	"@@Bitwise-And_Cellsize-Type_tag0@@": "Válassza ki, hogy melyik cellaméretet szeretné használni a kimeneti raszterben. Ha mindegyik bemeneti cellaméret azonos, mindegyik lehetőség ugyanarra az eredményre vezet.",
	"@@Bitwise-And_Cellsize-Type_tag1@@": "Első--a bemeneti raszterek első cellaméretének használata.",
	"@@Bitwise-And_Cellsize-Type_tag2@@": "Utolsó--a bemeneti raszterek utolsó cellaméretének használata.",
	"@@Bitwise-And_Cellsize-Type_tag3@@": "Maximum--az összes bemeneti raszter legnagyobb cellaméretének használata. Ez az alapértelmezés.",
	"@@Bitwise-And_Cellsize-Type_tag4@@": "Átlag--az összes bemeneti raszter átlagos cellaméretének használata.",
	"@@Bitwise-And_Cellsize-Type_tag5@@": "Minimum--az összes bemeneti raszter legkisebb cellaméretének használata.",
	"@@Bitwise-And_Extent-Type_tag0@@": "Válassza ki, hogy melyik kiterjedést szeretné használni a kimeneti raszterben:",
	"@@Bitwise-And_Extent-Type_tag1@@": "Első--az első bemeneti raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Bitwise-And_Extent-Type_tag2@@": "Metszet--az átfedésben lévő pixelek kiterjedésének használata a feldolgozási kiterjedés meghatározásához. Ez az alapértelmezés.",
	"@@Bitwise-And_Extent-Type_tag3@@": "Utolsó--az utolsó bemeneti raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Bitwise-And_Extent-Type_tag4@@": "Unió--az összes raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Bitwise-And_Raster_tag0@@": "Az első használandó bemenet ebben a bitenkénti műveletben.",
	"@@Bitwise-And_Raster_tag1@@": "Ennél a paraméternél használható konstans érték bemenetként, amennyiben megadja a rasztert a másik paraméternél.",
	"@@Bitwise-And_Raster2_tag0@@": "A második használandó bemenet ebben a bitenkénti műveletben.",
	"@@Bitwise-And_Raster2_tag1@@": "Ennél a paraméternél használható konstans érték bemenetként, amennyiben megadja a rasztert a másik paraméternél.",
	"@@Bitwise-Left-Shift_Cellsize-Type_tag0@@": "Válassza ki, hogy melyik cellaméretet szeretné használni a kimeneti raszterben. Ha mindegyik bemeneti cellaméret azonos, mindegyik lehetőség ugyanarra az eredményre vezet.",
	"@@Bitwise-Left-Shift_Cellsize-Type_tag1@@": "Első--a bemeneti raszterek első cellaméretének használata.",
	"@@Bitwise-Left-Shift_Cellsize-Type_tag2@@": "Utolsó--a bemeneti raszterek utolsó cellaméretének használata.",
	"@@Bitwise-Left-Shift_Cellsize-Type_tag3@@": "Maximum--az összes bemeneti raszter legnagyobb cellaméretének használata. Ez az alapértelmezés.",
	"@@Bitwise-Left-Shift_Cellsize-Type_tag4@@": "Átlag--az összes bemeneti raszter átlagos cellaméretének használata.",
	"@@Bitwise-Left-Shift_Cellsize-Type_tag5@@": "Minimum--az összes bemeneti raszter legkisebb cellaméretének használata.",
	"@@Bitwise-Left-Shift_Extent-Type_tag0@@": "Válassza ki, hogy melyik kiterjedést szeretné használni a kimeneti raszterben:",
	"@@Bitwise-Left-Shift_Extent-Type_tag1@@": "Első--az első bemeneti raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Bitwise-Left-Shift_Extent-Type_tag2@@": "Metszet--az átfedésben lévő pixelek kiterjedésének használata a feldolgozási kiterjedés meghatározásához. Ez az alapértelmezés.",
	"@@Bitwise-Left-Shift_Extent-Type_tag3@@": "Utolsó--az utolsó bemeneti raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Bitwise-Left-Shift_Extent-Type_tag4@@": "Unió--az összes raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Bitwise-Left-Shift_Raster_tag0@@": "A bemenet, amelyen az eltolást végre kell hajtani.",
	"@@Bitwise-Left-Shift_Raster_tag1@@": "Ennél a paraméternél használható konstans érték bemenetként, amennyiben megadja a rasztert a másik paraméternél.",
	"@@Bitwise-Left-Shift_Raster2_tag0@@": "A bemenet, amely meghatározza, hogy hány hellyel kell eltolni a biteket.",
	"@@Bitwise-Left-Shift_Raster2_tag1@@": "Ennél a paraméternél használható konstans érték bemenetként, amennyiben megadja a rasztert a másik paraméternél.",
	"@@Bitwise-Not_Cellsize-Type_tag0@@": "Válassza ki, hogy melyik cellaméretet szeretné használni a kimeneti raszterben. Ha mindegyik bemeneti cellaméret azonos, mindegyik lehetőség ugyanarra az eredményre vezet.",
	"@@Bitwise-Not_Cellsize-Type_tag1@@": "Első--a bemeneti raszterek első cellaméretének használata.",
	"@@Bitwise-Not_Cellsize-Type_tag2@@": "Utolsó--a bemeneti raszterek utolsó cellaméretének használata.",
	"@@Bitwise-Not_Cellsize-Type_tag3@@": "Maximum--az összes bemeneti raszter legnagyobb cellaméretének használata. Ez az alapértelmezés.",
	"@@Bitwise-Not_Cellsize-Type_tag4@@": "Átlag--az összes bemeneti raszter átlagos cellaméretének használata.",
	"@@Bitwise-Not_Cellsize-Type_tag5@@": "Minimum--az összes bemeneti raszter legkisebb cellaméretének használata.",
	"@@Bitwise-Not_Extent-Type_tag0@@": "Válassza ki, hogy melyik kiterjedést szeretné használni a kimeneti raszterben:",
	"@@Bitwise-Not_Extent-Type_tag1@@": "Első--az első bemeneti raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Bitwise-Not_Extent-Type_tag2@@": "Metszet--az átfedésben lévő pixelek kiterjedésének használata a feldolgozási kiterjedés meghatározásához. Ez az alapértelmezés.",
	"@@Bitwise-Not_Extent-Type_tag3@@": "Utolsó--az utolsó bemeneti raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Bitwise-Not_Extent-Type_tag4@@": "Unió--az összes raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Bitwise-Not_Raster_tag0@@": "A bemeneti raszter, amelyen a bitenkénti Negálás (komplementer) műveletet végre kell hajtani.",
	"@@Bitwise-Or_Cellsize-Type_tag0@@": "Válassza ki, hogy melyik cellaméretet szeretné használni a kimeneti raszterben. Ha mindegyik bemeneti cellaméret azonos, mindegyik lehetőség ugyanarra az eredményre vezet.",
	"@@Bitwise-Or_Cellsize-Type_tag1@@": "Első--a bemeneti raszterek első cellaméretének használata.",
	"@@Bitwise-Or_Cellsize-Type_tag2@@": "Utolsó--a bemeneti raszterek utolsó cellaméretének használata.",
	"@@Bitwise-Or_Cellsize-Type_tag3@@": "Maximum--az összes bemeneti raszter legnagyobb cellaméretének használata. Ez az alapértelmezés.",
	"@@Bitwise-Or_Cellsize-Type_tag4@@": "Átlag--az összes bemeneti raszter átlagos cellaméretének használata.",
	"@@Bitwise-Or_Cellsize-Type_tag5@@": "Minimum--az összes bemeneti raszter legkisebb cellaméretének használata.",
	"@@Bitwise-Or_Extent-Type_tag0@@": "Válassza ki, hogy melyik kiterjedést szeretné használni a kimeneti raszterben:",
	"@@Bitwise-Or_Extent-Type_tag1@@": "Első--az első bemeneti raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Bitwise-Or_Extent-Type_tag2@@": "Metszet--az átfedésben lévő pixelek kiterjedésének használata a feldolgozási kiterjedés meghatározásához. Ez az alapértelmezés.",
	"@@Bitwise-Or_Extent-Type_tag3@@": "Utolsó--az utolsó bemeneti raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Bitwise-Or_Extent-Type_tag4@@": "Unió--az összes raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Bitwise-Or_Raster_tag0@@": "Az első használandó bemenet ebben a bitenkénti műveletben.",
	"@@Bitwise-Or_Raster_tag1@@": "Ennél a paraméternél használható konstans érték bemenetként, amennyiben megadja a rasztert a másik paraméternél.",
	"@@Bitwise-Or_Raster2_tag0@@": "A második használandó bemenet ebben a bitenkénti műveletben.",
	"@@Bitwise-Or_Raster2_tag1@@": "Ennél a paraméternél használható konstans érték bemenetként, amennyiben megadja a rasztert a másik paraméternél.",
	"@@Bitwise-Right-Shift_Cellsize-Type_tag0@@": "Válassza ki, hogy melyik cellaméretet szeretné használni a kimeneti raszterben. Ha mindegyik bemeneti cellaméret azonos, mindegyik lehetőség ugyanarra az eredményre vezet.",
	"@@Bitwise-Right-Shift_Cellsize-Type_tag1@@": "Első--a bemeneti raszterek első cellaméretének használata.",
	"@@Bitwise-Right-Shift_Cellsize-Type_tag2@@": "Utolsó--a bemeneti raszterek utolsó cellaméretének használata.",
	"@@Bitwise-Right-Shift_Cellsize-Type_tag3@@": "Maximum--az összes bemeneti raszter legnagyobb cellaméretének használata. Ez az alapértelmezés.",
	"@@Bitwise-Right-Shift_Cellsize-Type_tag4@@": "Átlag--az összes bemeneti raszter átlagos cellaméretének használata.",
	"@@Bitwise-Right-Shift_Cellsize-Type_tag5@@": "Minimum--az összes bemeneti raszter legkisebb cellaméretének használata.",
	"@@Bitwise-Right-Shift_Extent-Type_tag0@@": "Válassza ki, hogy melyik kiterjedést szeretné használni a kimeneti raszterben:",
	"@@Bitwise-Right-Shift_Extent-Type_tag1@@": "Első--az első bemeneti raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Bitwise-Right-Shift_Extent-Type_tag2@@": "Metszet--az átfedésben lévő pixelek kiterjedésének használata a feldolgozási kiterjedés meghatározásához. Ez az alapértelmezés.",
	"@@Bitwise-Right-Shift_Extent-Type_tag3@@": "Utolsó--az utolsó bemeneti raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Bitwise-Right-Shift_Extent-Type_tag4@@": "Unió--az összes raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Bitwise-Right-Shift_Raster_tag0@@": "A bemenet, amelyen az eltolást végre kell hajtani.",
	"@@Bitwise-Right-Shift_Raster_tag1@@": "Ennél a paraméternél használható konstans érték bemenetként, amennyiben megadja a rasztert a másik paraméternél.",
	"@@Bitwise-Right-Shift_Raster2_tag0@@": "A bemenet, amely meghatározza, hogy hány hellyel kell eltolni a biteket.",
	"@@Bitwise-Right-Shift_Raster2_tag1@@": "Ennél a paraméternél használható konstans érték bemenetként, amennyiben megadja a rasztert a másik paraméternél.",
	"@@Bitwise-Xor_Cellsize-Type_tag0@@": "Válassza ki, hogy melyik cellaméretet szeretné használni a kimeneti raszterben. Ha mindegyik bemeneti cellaméret azonos, mindegyik lehetőség ugyanarra az eredményre vezet.",
	"@@Bitwise-Xor_Cellsize-Type_tag1@@": "Első--a bemeneti raszterek első cellaméretének használata.",
	"@@Bitwise-Xor_Cellsize-Type_tag2@@": "Utolsó--a bemeneti raszterek utolsó cellaméretének használata.",
	"@@Bitwise-Xor_Cellsize-Type_tag3@@": "Maximum--az összes bemeneti raszter legnagyobb cellaméretének használata. Ez az alapértelmezés.",
	"@@Bitwise-Xor_Cellsize-Type_tag4@@": "Átlag--az összes bemeneti raszter átlagos cellaméretének használata.",
	"@@Bitwise-Xor_Cellsize-Type_tag5@@": "Minimum--az összes bemeneti raszter legkisebb cellaméretének használata.",
	"@@Bitwise-Xor_Extent-Type_tag0@@": "Válassza ki, hogy melyik kiterjedést szeretné használni a kimeneti raszterben:",
	"@@Bitwise-Xor_Extent-Type_tag1@@": "Első--az első bemeneti raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Bitwise-Xor_Extent-Type_tag2@@": "Metszet--az átfedésben lévő pixelek kiterjedésének használata a feldolgozási kiterjedés meghatározásához. Ez az alapértelmezés.",
	"@@Bitwise-Xor_Extent-Type_tag3@@": "Utolsó--az utolsó bemeneti raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Bitwise-Xor_Extent-Type_tag4@@": "Unió--az összes raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Bitwise-Xor_Raster_tag0@@": "Az első használandó bemenet ebben a bitenkénti műveletben.",
	"@@Bitwise-Xor_Raster_tag1@@": "Ennél a paraméternél használható konstans érték bemenetként, amennyiben megadja a rasztert a másik paraméternél.",
	"@@Bitwise-Xor_Raster2_tag0@@": "A második használandó bemenet ebben a bitenkénti műveletben.",
	"@@Bitwise-Xor_Raster2_tag1@@": "Ennél a paraméternél használható konstans érték bemenetként, amennyiben megadja a rasztert a másik paraméternél.",
	"@@Boolean-and_Cellsize-Type_tag0@@": "Válassza ki, hogy melyik cellaméretet szeretné használni a kimeneti raszterben. Ha mindegyik bemeneti cellaméret azonos, mindegyik lehetőség ugyanarra az eredményre vezet.",
	"@@Boolean-and_Cellsize-Type_tag1@@": "Első--a bemeneti raszterek első cellaméretének használata.",
	"@@Boolean-and_Cellsize-Type_tag2@@": "Utolsó--a bemeneti raszterek utolsó cellaméretének használata.",
	"@@Boolean-and_Cellsize-Type_tag3@@": "Maximum--az összes bemeneti raszter legnagyobb cellaméretének használata. Ez az alapértelmezés.",
	"@@Boolean-and_Cellsize-Type_tag4@@": "Átlag--az összes bemeneti raszter átlagos cellaméretének használata.",
	"@@Boolean-and_Cellsize-Type_tag5@@": "Minimum--az összes bemeneti raszter legkisebb cellaméretének használata.",
	"@@Boolean-and_Extent-Type_tag0@@": "Válassza ki, hogy melyik kiterjedést szeretné használni a kimeneti raszterben:",
	"@@Boolean-and_Extent-Type_tag1@@": "Első--az első bemeneti raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Boolean-and_Extent-Type_tag2@@": "Metszet--az átfedésben lévő pixelek kiterjedésének használata a feldolgozási kiterjedés meghatározásához. Ez az alapértelmezés.",
	"@@Boolean-and_Extent-Type_tag3@@": "Utolsó--az utolsó bemeneti raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Boolean-and_Extent-Type_tag4@@": "Unió--az összes raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Boolean-and_Raster_tag0@@": "Az első használandó bemenet ebben a logikai műveletben.",
	"@@Boolean-and_Raster_tag1@@": "Ennél a paraméternél használható konstans érték bemenetként, amennyiben megadja a rasztert a másik paraméternél.",
	"@@Boolean-and_Raster2_tag0@@": "A második használandó bemenet ebben a logikai műveletben.",
	"@@Boolean-and_Raster2_tag1@@": "Ennél a paraméternél használható konstans érték bemenetként, amennyiben megadja a rasztert a másik paraméternél.",
	"@@Boolean-Not_Cellsize-Type_tag0@@": "Válassza ki, hogy melyik cellaméretet szeretné használni a kimeneti raszterben. Ha mindegyik bemeneti cellaméret azonos, mindegyik lehetőség ugyanarra az eredményre vezet.",
	"@@Boolean-Not_Cellsize-Type_tag1@@": "Első--a bemeneti raszterek első cellaméretének használata.",
	"@@Boolean-Not_Cellsize-Type_tag2@@": "Utolsó--a bemeneti raszterek utolsó cellaméretének használata.",
	"@@Boolean-Not_Cellsize-Type_tag3@@": "Maximum--az összes bemeneti raszter legnagyobb cellaméretének használata. Ez az alapértelmezés.",
	"@@Boolean-Not_Cellsize-Type_tag4@@": "Átlag--az összes bemeneti raszter átlagos cellaméretének használata.",
	"@@Boolean-Not_Cellsize-Type_tag5@@": "Minimum--az összes bemeneti raszter legkisebb cellaméretének használata.",
	"@@Boolean-Not_Extent-Type_tag0@@": "Válassza ki, hogy melyik kiterjedést szeretné használni a kimeneti raszterben:",
	"@@Boolean-Not_Extent-Type_tag1@@": "Első--az első bemeneti raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Boolean-Not_Extent-Type_tag2@@": "Metszet--az átfedésben lévő pixelek kiterjedésének használata a feldolgozási kiterjedés meghatározásához. Ez az alapértelmezés.",
	"@@Boolean-Not_Extent-Type_tag3@@": "Utolsó--az utolsó bemeneti raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Boolean-Not_Extent-Type_tag4@@": "Unió--az összes raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Boolean-Not_Raster_tag0@@": "Az első használandó bemenet ebben a logikai műveletben.",
	"@@Boolean-Or_Cellsize-Type_tag0@@": "Válassza ki, hogy melyik cellaméretet szeretné használni a kimeneti raszterben. Ha mindegyik bemeneti cellaméret azonos, mindegyik lehetőség ugyanarra az eredményre vezet.",
	"@@Boolean-Or_Cellsize-Type_tag1@@": "Első--a bemeneti raszterek első cellaméretének használata.",
	"@@Boolean-Or_Cellsize-Type_tag2@@": "Utolsó--a bemeneti raszterek utolsó cellaméretének használata.",
	"@@Boolean-Or_Cellsize-Type_tag3@@": "Maximum--az összes bemeneti raszter legnagyobb cellaméretének használata. Ez az alapértelmezés.",
	"@@Boolean-Or_Cellsize-Type_tag4@@": "Átlag--az összes bemeneti raszter átlagos cellaméretének használata.",
	"@@Boolean-Or_Cellsize-Type_tag5@@": "Minimum--az összes bemeneti raszter legkisebb cellaméretének használata.",
	"@@Boolean-Or_Extent-Type_tag0@@": "Válassza ki, hogy melyik kiterjedést szeretné használni a kimeneti raszterben:",
	"@@Boolean-Or_Extent-Type_tag1@@": "Első--az első bemeneti raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Boolean-Or_Extent-Type_tag2@@": "Metszet--az átfedésben lévő pixelek kiterjedésének használata a feldolgozási kiterjedés meghatározásához. Ez az alapértelmezés.",
	"@@Boolean-Or_Extent-Type_tag3@@": "Utolsó--az utolsó bemeneti raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Boolean-Or_Extent-Type_tag4@@": "Unió--az összes raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Boolean-Or_Raster_tag0@@": "Az első használandó bemenet ebben a logikai műveletben.",
	"@@Boolean-Or_Raster_tag1@@": "Ennél a paraméternél használható konstans érték bemenetként, amennyiben megadja a rasztert a másik paraméternél.",
	"@@Boolean-Or_Raster2_tag0@@": "A második használandó bemenet ebben a logikai műveletben.",
	"@@Boolean-Or_Raster2_tag1@@": "Ennél a paraméternél használható konstans érték bemenetként, amennyiben megadja a rasztert a másik paraméternél.",
	"@@Boolean-Xor_Cellsize-Type_tag0@@": "Válassza ki, hogy melyik cellaméretet szeretné használni a kimeneti raszterben. Ha mindegyik bemeneti cellaméret azonos, mindegyik lehetőség ugyanarra az eredményre vezet.",
	"@@Boolean-Xor_Cellsize-Type_tag1@@": "Első--a bemeneti raszterek első cellaméretének használata.",
	"@@Boolean-Xor_Cellsize-Type_tag2@@": "Utolsó--a bemeneti raszterek utolsó cellaméretének használata.",
	"@@Boolean-Xor_Cellsize-Type_tag3@@": "Maximum--az összes bemeneti raszter legnagyobb cellaméretének használata. Ez az alapértelmezés.",
	"@@Boolean-Xor_Cellsize-Type_tag4@@": "Átlag--az összes bemeneti raszter átlagos cellaméretének használata.",
	"@@Boolean-Xor_Cellsize-Type_tag5@@": "Minimum--az összes bemeneti raszter legkisebb cellaméretének használata.",
	"@@Boolean-Xor_Extent-Type_tag0@@": "Válassza ki, hogy melyik kiterjedést szeretné használni a kimeneti raszterben:",
	"@@Boolean-Xor_Extent-Type_tag1@@": "Első--az első bemeneti raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Boolean-Xor_Extent-Type_tag2@@": "Metszet--az átfedésben lévő pixelek kiterjedésének használata a feldolgozási kiterjedés meghatározásához. Ez az alapértelmezés.",
	"@@Boolean-Xor_Extent-Type_tag3@@": "Utolsó--az utolsó bemeneti raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Boolean-Xor_Extent-Type_tag4@@": "Unió--az összes raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Boolean-Xor_Raster_tag0@@": "Az első használandó bemenet ebben a logikai műveletben.",
	"@@Boolean-Xor_Raster_tag1@@": "Ennél a paraméternél használható konstans érték bemenetként, amennyiben megadja a rasztert a másik paraméternél.",
	"@@Boolean-Xor_Raster2_tag0@@": "A második használandó bemenet ebben a logikai műveletben.",
	"@@Boolean-Xor_Raster2_tag1@@": "Ennél a paraméternél használható konstans érték bemenetként, amennyiben megadja a rasztert a másik paraméternél.",
	"@@Buffered_Raster_tag0@@": "A memóriában tárolandó bemeneti raszter.",
	"@@Calculator_Cellsize-Type_tag0@@": "A kimeneti raszter létrehozáshoz használt cellaméret.",
	"@@Calculator_Cellsize-Type_tag1@@": "A legördülő listában a következő lehetőségek közül választhat a kimeneti cellaméretet illetően:",
	"@@Calculator_Cellsize-Type_tag2@@": "<strong>Első</strong>--Az első raszteres változó cellamérete.",
	"@@Calculator_Cellsize-Type_tag4@@": "<strong>Minimum</strong>--A bemeneti raszterek legkisebb cellamérete.",
	"@@Calculator_Cellsize-Type_tag6@@": "<strong>Maximum</strong>--A bemeneti raszterek legnagyobb cellamérete.",
	"@@Calculator_Cellsize-Type_tag8@@": "<strong>Átlag</strong>--A bemeneti raszterek átlagos cellamérete.",
	"@@Calculator_Cellsize-Type_tag10@@": "<strong>Utolsó</strong>--A bemeneti raszterek átlagos cellamérete.",
	"@@Calculator_Cellsize-Type_tag12@@": "Az alapértelmezett beállítás a <strong>Maximum</strong>.",
	"@@Calculator_Expression_tag0@@": "Egy algebrai kifejezést készíthet a térbeli elemzés elvégzéséhez a bemeneti raszteren.",
	"@@Calculator_Expression_tag1@@": "A kifejezés elkészítéséhez az összes matematikai függvény meghívható. A rendelkezésre álló operátorokat az alábbi lista tartalmazza.",
	"@@Calculator_Expression_tag2@@": "Aritmetikai műveletek",
	"@@Calculator_Expression_tag3@@": "Összeadás: +",
	"@@Calculator_Expression_tag4@@": "Osztás: /",
	"@@Calculator_Expression_tag5@@": "Maradékos osztás: %",
	"@@Calculator_Expression_tag6@@": "Szorzás: *",
	"@@Calculator_Expression_tag7@@": "Hatványra emelés: **",
	"@@Calculator_Expression_tag8@@": "Kivonás: −",
	"@@Calculator_Expression_tag9@@": "Logikai műveletek",
	"@@Calculator_Expression_tag10@@": "Logikai és: &&",
	"@@Calculator_Expression_tag11@@": "Logikai vagy: ||",
	"@@Calculator_Expression_tag12@@": "Relációs műveletek",
	"@@Calculator_Expression_tag13@@": "Egyenlő: ==",
	"@@Calculator_Expression_tag14@@": "Nagyobb, mint: >",
	"@@Calculator_Expression_tag15@@": "Nagyobb vagy egyenlő: >=",
	"@@Calculator_Expression_tag16@@": "Kisebb, mint: <",
	"@@Calculator_Expression_tag17@@": "Kisebb vagy egyenlő: <=",
	"@@Calculator_Expression_tag18@@": "Nem egyenlő: !=",
	"@@Calculator_Expression_tag19@@": "További operátorok",
	"@@Calculator_Expression_tag20@@": "Két raszter minimuma pixelenkénti alapon: min(a,b)",
	"@@Calculator_Expression_tag21@@": "Két raszter maximuma pixelenkénti alapon: max(a,b)",
	"@@Calculator_Expression_tag22@@": "Az alábbiakban néhány példát mutatunk be a kifejezésekre:",
	"@@Calculator_Expression_tag23@@": "Egyszerű feltételes utasítás: egy (T-vel jelölt) raszterben keresse meg a 4000 láb feletti magasságértékeket, majd rendelje ezekhez a területekhez az 1, a többi területhez a 0 értéket.",
	"@@Calculator_Expression_tag24@@": "Con(T > 4000, 1, 0)",
	"@@Calculator_Expression_tag25@@": "Beágyazott feltételes utasítás: keresse meg azokat a területeket, ahol a (b1-gyel jelölt) lejtés 10 fok alatt van és a (b2-vel jelölt) NDVI 0,5 felett van, majd rendelje ezekhez a területekhez az 1 értéket. A többi területhez rendelje a 2 értéket, ha a lejtés 10 foknál nagyobb és a (b3-mal jelölt) magasság 2500 lábnál nagyobb. Minden egyéb területhez rendelje a 3 értéket.",
	"@@Calculator_Expression_tag26@@": "Con((b1 < 10 && b2 > .5, 1, Con(b1 > 10 && b3 > 2500, 2, 3)))",
	"@@Calculator_extenttype_tag0@@": "<p>Válassza ki a kimeneti raszterben használandó kiterjedést:</p><ul><li><p>Első: az első bemeneti raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.</p></li><li>Metszet: az átfedésben lévő pixelek kiterjedésének használata a feldolgozási kiterjedés meghatározásához. Ez az alapértelmezés.</li><li>Unió - Az összes raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.</li><li>Utolsó - Az utolsó bemeneti raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.</li></ul>",
	"@@Calculator_Raster-Variables_tag0@@": "A felhasználó által meghatározott változónév és a bemeneti raszter.",
	"@@Classify_Input-Definition-File_tag0@@": "A bemeneti Esri osztályozásdefiníciós (${.ecd}) fájl, amely tartalmazza a statisztikákat és más osztályozási információkat az adott adathalmazhoz, osztályozóhoz és a kiválasztott attribútumokhoz.",
	"@@Classify_Raster_tag0@@": "Az osztályozandó raszteres adathalmaz.",
	"@@Classify_Raster2_tag0@@": "Egy, az osztályozóhoz adható opcionális kiegészítő raszteres adathalmaz, például szegmentált kép, multispektrális kép vagy magasságadat, amelynek segítségével robusztusabb osztályozásdefiníció készíthető az adathalmazhoz. Az ehhez a paraméterhez megadott raszteres adathalmaznak egyeznie kell a bemeneti Esri osztályozásdefiníciós fájl létrehozásához használttal.",
	"@@Clip_Clipping-Geometry-or-Raster_tag0@@": "A kivágás kiterjedésének megadásához a következők használhatók:",
	"@@Clip_Clipping-Geometry-or-Raster_tag1@@": "<strong>Kivágási raszter</strong>--A kivágási raszter kiterjedése",
	"@@Clip_Clipping-Geometry-or-Raster_tag3@@": "<strong>Egyéni kiterjedés</strong>--X és Y minimum és maximum koordináták",
	"@@Clip_Clipping-Geometry-or-Raster_tag5@@": "<strong>Aktuális térképkiterjedés</strong>--az aktuális térkép-megjelenítés kiterjedése",
	"@@Clip_Clipping-Raster_tag0@@": "A kivágáshoz használt raszteres réteg.",
	"@@Clip_Clipping-Type_tag0@@": "Megadhatja, hogy a kivágási geometrián belül vagy azon kívül lévő területet szeretné megtartani.",
	"@@Clip_Clipping-Type_tag1@@": "<strong>Vágás belül</strong>--A kivágás kiterjedésén belül található távérzékelt felvételek lesznek eltávolítva.",
	"@@Clip_Clipping-Type_tag3@@": "<strong>Vágás kívül</strong>--A kivágás kiterjedésén kívül található távérzékelt felvételek lesznek eltávolítva.",
	"@@Clip_Custom-Extent_tag0@@": "Megadhatja a raszter kivágásához használt határoló téglalap kiterjedését meghatározó négy koordinátát.",
	"@@Clip_Output-Extent_tag0@@": "Az aktuális kivágási kiterjedés x és y koordinátái.",
	"@@Clip_Output-Extent_tag1@@": "Az <strong>Aktuális térképkiterjedés rögzítése</strong> gomb a kijelző kiterjedését használja az aktív térképhez.",
	"@@Clip_Raster_tag0@@": "A bemeneti raszteres réteg.",
	"@@Clip_Use-Input-Features-for-Clipping-Geometry_tag0@@": "Ennek bejelölésekor az alkalmazás az adatokat a meghatározott vektoroselem-osztály geometriájának megfelelő vágja ki.",
	"@@Clip_Use-Input-Features-for-Clipping-Geometry_tag1@@": "Nincs bejelölve--A funkció a <strong>Téglalapt</strong> beállítással meghatározott kivágási geometriát használja. Ez az alapértelmezés.",
	"@@Clip_Use-Input-Features-for-Clipping-Geometry_tag4@@": "Bejelölve--a funkció egy vektoroselem-osztály által meghatározott kivágási geometriát használ.",
	"@@Color-Model-Conversion_Conversion-Type_tag0@@": "A végrehajtandó színkonverzió típusa:",
	"@@Color-Model-Conversion_Conversion-Type_tag1@@": "HSV-ről RGB-re",
	"@@Color-Model-Conversion_Conversion-Type_tag2@@": "RGB-ről HSV-re",
	"@@Color-Model-Conversion_Raster_tag0@@": "A bemeneti raszter.",
	"@@Colormap_Color-Ramp_tag0@@": "Már létező színskála kiválasztása.",
	"@@Colormap_Color-Scheme-Type_tag0@@": "A színséma típusának kiválasztása a bemeneti raszter rendereléséhez.",
	"@@Colormap_Color-Scheme-Type_tag1@@": "Színskála--színskála használata.",
	"@@Colormap_Color-Scheme-Type_tag2@@": "Színtérkép--már létező színtérkép használata.",
	"@@Colormap_Colormap_tag0@@": "A legördülő listából a következő alapértelmezett színtérképek elérhetők:",
	"@@Colormap_Colormap_tag1@@": "Magasság--a ciánkék, a lila és a fekete között fokozatosan változó színtérkép.",
	"@@Colormap_Colormap_tag2@@": "Szürke--a fekete és a fehér között fokozatosan változó színtérkép.",
	"@@Colormap_Colormap_tag7@@": "Domborzatárnyékolás: a terepfelszín 3D-s ábrázolásának megjelenítésére szolgáló szürkeárnyalatos színtérkép, amely a nap relatív helyzetét veszi figyelembe a kép árnyékolásához.",
	"@@Colormap_Colormap_tag3@@": "NDVI--színtérkép a vegetáció ábrázolásához. A nullához közeli értékek kékek. Az alacsony értékek barnák. Ezután a színek fokozatosan változnak pirosról, narancssárgára, sárgára, zöldre, majd feketére a vegetációs index növekedésével.",
	"@@Colormap_Colormap_tag4@@": "NDVI2--színtérkép a vegetáció ábrázolásához. Az alacsony értékek a fehértől a zöldig terjednek. Ezután a színek fokozatosan változnak szürkéről, lilára, ibolyára, sötétkékre, majd feketére a vegetációs index növekedésével.",
	"@@Colormap_Colormap_tag5@@": "NDVI3--színtérkép a vegetáció ábrázolásához. A nullához közeli értékek kékek. Ezután a színek fokozatosan változnak pirosról, narancssárgára, majd zöldre a vegetációs index növekedésével.",
	"@@Colormap_Colormap_tag6@@": "Véletlen--véletlenszerű színtérkép.",
	"@@Colormap_Raster_tag0@@": "A bemeneti raszter.",
	"@@Colormap-To-RGB_Raster_tag0@@": "A bemeneti színtérképraszter.",
	"@@Complex_Raster_tag0@@": "A bemeneti raszter.",
	"@@Composite-Bands_Rasters_tag0@@": "A bemeneti raszterek kiválasztásához használja a legördülő listát vagy a <strong>Tallózás</strong> gombot.",
	"@@Composite-Bands_cellsizetype_tag0@@": "<p>Válassza ki, hogy milyen cellaméretet kíván használni a kimeneti raszteren. Ha mindegyik bemeneti cellaméret azonos, mindegyik lehetőség ugyanarra az eredményre vezet.</p><ul><li>Első – A bemeneti raszterek első cellaméretének használata.</li><li>Minimum – Az összes bemeneti raszter legkisebb cellaméretének használata.</li><li>Maximum – Az összes bemeneti raszter legnagyobb cellaméretének használata. Ez az alapértelmezés.</li><li>Átlag - Az összes bemeneti raszter átlagos cellaméretének használata.</li><li>Utolsó - A bemeneti raszterek utolsó cellaméretének használata.</li></ul>",
	"@@Con-function_Cellsize-Type_tag0@@": "Válassza ki, hogy melyik cellaméretet szeretné használni a kimeneti raszterben. Ha mindegyik bemeneti cellaméret azonos, mindegyik lehetőség ugyanarra az eredményre vezet.",
	"@@Con-function_Cellsize-Type_tag1@@": "Első--a bemeneti raszterek első cellaméretének használata.",
	"@@Con-function_Cellsize-Type_tag2@@": "Utolsó--a bemeneti raszterek utolsó cellaméretének használata.",
	"@@Con-function_Cellsize-Type_tag3@@": "Maximum--az összes bemeneti raszter legnagyobb cellaméretének használata. Ez az alapértelmezés.",
	"@@Con-function_Cellsize-Type_tag4@@": "Átlag--az összes bemeneti raszter átlagos cellaméretének használata.",
	"@@Con-function_Cellsize-Type_tag5@@": "Minimum--az összes bemeneti raszter legkisebb cellaméretének használata.",
	"@@Con_Extent-Type_tag0@@": "Válassza ki, hogy melyik kiterjedést szeretné használni a kimeneti raszterben:",
	"@@Con_Extent-Type_tag1@@": "Első--az első bemeneti raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Con_Extent-Type_tag2@@": "Metszet--az átfedésben lévő pixelek kiterjedésének használata a feldolgozási kiterjedés meghatározásához. Ez az alapértelmezés.",
	"@@Con_Extent-Type_tag3@@": "Utolsó--az utolsó bemeneti raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Con_Extent-Type_tag4@@": "Unió--az összes raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Con_False-Raster_tag0@@": "Az a bemenet, amelynek az értékeit kimeneti pixelértékekként használni kell, ha a feltétel hamis. Lehet integer- vagy lebegőpontos raszter vagy konstans érték.",
	"@@Con_Raster_tag0@@": "Egy logikai matematikai raszterfüggvény logikai eredményét reprezentáló bemeneti raszter. Az értékei 1 (ha igaz) vagy 0 (ha hamis). Lehet integer- vagy lebegőpontos raszter.",
	"@@Con_True-Raster_tag0@@": "Az a bemenet, amelynek az értékeit kimeneti pixelértékekként használni kell, ha a feltétel igaz. Lehet integer- vagy lebegőpontos raszter vagy konstans érték.",
	"@@Constant_Constant_tag0@@": "A virtuális raszterhez hozzáadandó konstans értéke.",
	"@@Constant_Raster-Info_tag0@@": "Ha könyvtárból vagy portálról kíván sablont betölteni, használja a <strong>Sablonraszter betöltése raster</strong> gombot.",
	"@@Contour_Adaptive-Smoothing_tag0@@": "A szintvonalra alkalmazandó simítás mennyisége. Az alapértelmezett érték 2,5.",
	"@@Contour_Adaptive-Smoothing_tag1@@": "Az alacsonyabb érték részletesebb és kevesebb simítással rendelkező szintvonalat eredményez, a nagyobb érték pedig több simítással rendelkező, kevésbé recésnek tűnő szintvonalat eredményez.",
	"@@Contour_Contour-Interval_tag0@@": "A szintvonalak közötti magasságkülönbség.",
	"@@Contour_Contour-Interval_tag1@@": "Kis szintközt használunk viszonylag lapos területeken, és nagyobb szintközt használunk változatos vagy hegyvidékes felszín esetén.",
	"@@Contour_Contour-Type_tag0@@": "A létrehozni kívánt szinttípus:",
	"@@Contour_Contour-Type_tag1@@": "<strong>Szintkitöltés</strong>--A szintvonalak között lévő területek kitöltése a kvantált magasságértékkel.",
	"@@Contour_Contour-Type_tag3@@": "<strong>Szintvonalak</strong>--Az azonos magassággal rendelkező pontok összekötése állandó magasságot jelző vonalak létrehozásához.",
	"@@Contour_Contour-Type_tag5@@": "<strong>Csak felszínsimítás</strong>--kisimítja a bemeneti magasságréteget, de nem hoz létre szinteket.",
	"@@Contour_Nth-Contour-Line-In-Bold_tag0@@": "A vastag vonallal jelzett indexszint.",
	"@@Contour_Nth-Contour-Line-In-Bold_tag1@@": "Az alapértelmezett érték az 5; azaz minden 5. szintvonal félkövér.",
	"@@Contour_Number-Of-Contours_tag0@@": "A kijelzőn generálandó szintek száma. Ez dinamikusan hozzáigazítja a szintközt a kijelzőn látható felszínhez, miközben megőrzi a szabványos közöket, mint az 1, 5, 10 stb.",
	"@@Contour_Raster_tag0@@": "Egy egysávos raszteres magasság-adathalmaz.",
	"@@Contour_Z-Base_tag0@@": "A szint alapértéke. Ez alatt és e fölött az érték fölött szükség szerint jönnek létre szintek a bemeneti raszter teljes értéktartományának lefedéséhez. Az alapértelmezett érték 0.",
	"@@Contour_Z-Base_tag1@@": "A 0 érték gyakran az átlagos tengerszintet jelöli a forrás magasság-adathalmaztól függően.",
	"@@Contour_Z-Factor_tag0@@": "A szintek létrehozásakor használt egységnyi átváltási tényező. Az alapértelmezett érték 1.",
	"@@Contour_Z-Factor_tag1@@": "A szintvonalak a bemeneti raszter z értékei alapján jönnek létre, amelyek mértékegysége gyakran méter vagy láb. Az 1 alapértelmezett értéket használva a szintek mértékegysége meg fog egyezni a bemeneti raszter z értékeinek mértékegységével. Ha a z értékekétől eltérő mértékegységgel szeretne szinteket létrehozni, állítsa be a z tényező megfelelő értékét. Vegye figyelembe, hogy ehhez az eszközhöz a talaj x, y és a felszín z egységeinek nem kell következeteseknek lenniük.",
	"@@Contour_Z-Factor_tag2@@": "Ha például a bemeneti raszteren a magasságértékek lábban vannak megadva, de azt szeretné, hogy a szintek a méter mértékegység alapján jöjjenek létre, akkor a z tényezőt állítsa 0,3048-ra (mert 1 láb = 0,3048 méter).",
	"@@Contrast-and-Brightness_Brightness-Offset_tag0@@": "A raszteres réteg fényerejének beállítása.",
	"@@Contrast-and-Brightness_Brightness-Offset_tag1@@": "A csúszka segítségével módosíthatja a fényerő eltolását, vagy begépelheti az értéket.",
	"@@Contrast-and-Brightness_Contrast-Offset_tag0@@": "A raszteres réteg kontrasztjának beállítása.",
	"@@Contrast-and-Brightness_Contrast-Offset_tag1@@": "A csúszka segítségével módosíthatja a kontraszt eltolását, vagy begépelheti az értéket.",
	"@@Contrast-and-Brightness_Raster_tag0@@": "A bemeneti raszter, amelyen módosítani kell a fényerőt és a kontrasztot.",
	"@@Convolution_kernel_tag0@@": "<p>Ez a tábla mutatja az egyes pixelek súlyozását a szűrési folyamat során. A tábla szerkeszthető, ha a <strong>Típus</strong> esetében a <strong>Felhasználó által meghatározott</strong> lehetőséget választja.</p>",
	"@@Convolution_Raster_tag0@@": "A bemeneti raszteres adathalmaz.",
	"@@Convolution_Type_tag0@@": "Az elvégezni kívánt szűrés típusának kiválasztása. Beállítható az élesítés, az elmosás és az élek érzékelése, de megadhatja a saját kernelalapú szűrőjét is.",
	"@@Corridor_Distance-Raster-1_tag0@@": "Az első bemeneti távolságraszter. Ennek kumulatív költségtávolság-kimenetnek kell lennie a Költségtávolság vagy az Útvonaltávolság funkcióból.",
	"@@Corridor_Distance-Raster-2_tag0@@": "A második bemeneti távolságraszter. Ennek kumulatív költségtávolság-kimenetnek kell lennie a Költségtávolság vagy az Útvonaltávolság funkcióból.",
	"@@Cos_Cellsize-Type_tag0@@": "Válassza ki, hogy melyik cellaméretet szeretné használni a kimeneti raszterben. Ha mindegyik bemeneti cellaméret azonos, mindegyik lehetőség ugyanarra az eredményre vezet.",
	"@@Cos_Cellsize-Type_tag1@@": "Első--a bemeneti raszterek első cellaméretének használata.",
	"@@Cos_Cellsize-Type_tag2@@": "Utolsó--a bemeneti raszterek utolsó cellaméretének használata.",
	"@@Cos_Cellsize-Type_tag3@@": "Maximum--az összes bemeneti raszter legnagyobb cellaméretének használata. Ez az alapértelmezés.",
	"@@Cos_Cellsize-Type_tag4@@": "Átlag--az összes bemeneti raszter átlagos cellaméretének használata.",
	"@@Cos_Cellsize-Type_tag5@@": "Minimum--az összes bemeneti raszter legkisebb cellaméretének használata.",
	"@@Cos_Extent-Type_tag0@@": "Válassza ki, hogy melyik kiterjedést szeretné használni a kimeneti raszterben:",
	"@@Cos_Extent-Type_tag1@@": "Első--az első bemeneti raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Cos_Extent-Type_tag2@@": "Metszet--az átfedésben lévő pixelek kiterjedésének használata a feldolgozási kiterjedés meghatározásához. Ez az alapértelmezés.",
	"@@Cos_Extent-Type_tag3@@": "Utolsó--az utolsó bemeneti raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Cos_Extent-Type_tag4@@": "Unió--az összes raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Cos_Raster_tag0@@": "Az a bemenet, amelyhez a koszinusz értékeket ki kell számítani.",
	"@@CosH_Cellsize-Type_tag0@@": "Válassza ki, hogy melyik cellaméretet szeretné használni a kimeneti raszterben. Ha mindegyik bemeneti cellaméret azonos, mindegyik lehetőség ugyanarra az eredményre vezet.",
	"@@CosH_Cellsize-Type_tag1@@": "Első--a bemeneti raszterek első cellaméretének használata.",
	"@@CosH_Cellsize-Type_tag2@@": "Utolsó--a bemeneti raszterek utolsó cellaméretének használata.",
	"@@CosH_Cellsize-Type_tag3@@": "Maximum--az összes bemeneti raszter legnagyobb cellaméretének használata. Ez az alapértelmezés.",
	"@@CosH_Cellsize-Type_tag4@@": "Átlag--az összes bemeneti raszter átlagos cellaméretének használata.",
	"@@CosH_Cellsize-Type_tag5@@": "Minimum--az összes bemeneti raszter legkisebb cellaméretének használata.",
	"@@CosH_Extent-Type_tag0@@": "Válassza ki, hogy melyik kiterjedést szeretné használni a kimeneti raszterben:",
	"@@CosH_Extent-Type_tag1@@": "Első--az első bemeneti raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@CosH_Extent-Type_tag2@@": "Metszet--az átfedésben lévő pixelek kiterjedésének használata a feldolgozási kiterjedés meghatározásához. Ez az alapértelmezés.",
	"@@CosH_Extent-Type_tag3@@": "Utolsó--az utolsó bemeneti raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@CosH_Extent-Type_tag4@@": "Unió--az összes raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@CosH_Raster_tag0@@": "Az a bemenet, amelyhez a hiperbolikus koszinusz értékeket ki kell számítani.",
	"@@Cost-Allocation_Accumulative-Cost-Resistance-Rate_tag0@@": "Ez a paraméter a költségek csökkentésére irányuló erőfeszítések növekedését szimulálja a kumulatív költségek növekedésével. Az utazó fáradását modellezi. Egy cella elérésének növekvő kumulatív költségét szorozza meg a rezisztenciarátával, és adja hozzá a következő cellába való mozgás költségéhez.",
	"@@Cost-Allocation_Accumulative-Cost-Resistance-Rate_tag1@@": "Ez egy kamatoskamat-számítási képlet módosított változata, amelyet egy cellán való áthaladás látható költségének kiszámítására használunk. A rezisztenciaráta értékének növekedésével nő a később meglátogatott cellák költsége. Minél nagyobb a rezisztenciaráta, annál nagyobb a következő cella elérésének költsége, amely minden egyes következő mozgással összeadódik. Mivel a rezisztenciaráta egy kamatos kamathoz hasonló, és a kumulatív költségértékek nagyon nagyok, a kumulatív költségértékektől függően kis rezisztenciaráta használata javasolt (pl. 0,005 vagy még kisebb).",
	"@@Cost-Allocation_Accumulative-Cost-Resistance-Rate_tag2@@": "Az értéknek nagyobbnak kell lennie nullánál. Az alapértelmezett kapacitás a kimeneti raszter élénél van.",
	"@@Cost-Allocation_Accumulative-Cost-Resistance-Rate_tag3@@": "Numerikus (double) érték vagy a <strong>Forrásraszter</strong> valamelyik mezője is használható e paraméter esetében.",
	"@@Cost-Allocation_Capacity_tag0@@": "Az utazó költségkapacitását határozza meg egy forrásnál. A költségszámítás minden egyes forrásnál addig folytatódik, amíg el nem éri a meghatározott kapacitást.",
	"@@Cost-Allocation_Capacity_tag1@@": "Az értéknek nagyobbnak kell lennie nullánál. Az alapértelmezett kapacitás a kimeneti raszter élénél van.",
	"@@Cost-Allocation_Capacity_tag2@@": "Numerikus (double) érték vagy a <strong>Forrásraszter</strong> valamelyik mezője is használható e paraméter esetében.",
	"@@Cost-Allocation_Cost-Raster_tag0@@": "Az egyes cellákon történő, síkrajzi értelemben vett áthaladás költségét vagy impedanciáját meghatározó, kötelező bemeneti raszter. Az egyes cellahelyeken szereplő értékek az azon történő áthaladás egységnyi távolságra eső költségét jelentik. Az eszköz a cellán történő áthaladás teljes költségének kiszámításához megszorozza az egyes cellahelyek értékét a cellafelbontással, és átlós mozgás esetén kompenzálja is az értéket.",
	"@@Cost-Allocation_Cost-Raster_tag1@@": "A <strong>Költségraszter</strong> értékei lehetnek integer- vagy lebegőpontos értékek, de nem lehetnek negatívak vagy nullák.",
	"@@Cost-Allocation_Maximum-Distance_tag0@@": "A küszöbérték, amelyet a kumulatív költségértékek nem haladhatnak meg. Ha egy kumulatív költségtávolság meghaladja ezt az értéket, a cellahely kimeneti értéke ${NoData} lesz. A legnagyobb távolság határozza meg azt a kiterjedést, amelyre az eszköz kiszámítja a kumulatív költségtávolságokat. Az alapértelmezett távolság a kimeneti raszter kiterjedésénél van.",
	"@@Cost-Allocation_Multiplier-to-Apply-to-Costs_tag0@@": "A költségértékekre alkalmazandó szorzótényező.",
	"@@Cost-Allocation_Multiplier-to-Apply-to-Costs_tag1@@": "Ez a paraméter lehetővé teszi az utazás módjának vagy a nagyságnak a szabályozását egy forrásnál. Minél nagyobb a szorzó, annál nagyobb az egyes cellákon való áthaladás költsége.",
	"@@Cost-Allocation_Multiplier-to-Apply-to-Costs_tag2@@": "Az értékeknek nullánál nagyobbaknak kell lenniük. Az alapértelmezett érték 1.",
	"@@Cost-Allocation_Multiplier-to-Apply-to-Costs_tag3@@": "Numerikus (double) érték vagy a <strong>Forrásraszter</strong> valamelyik mezője is használható e paraméter esetében.",
	"@@Cost-Allocation_Source-Field_tag0@@": "Az a mező, amelyet az értékek forráshelyekhez rendeléséhez használunk. Egész számnak kell lennie. Ha az <strong>Értékraszter</strong> be van állítva, a bemenetben szereplő értékek elsődlegességet élveznek a következő beállításban megadott értékekkel szemben:",
	"@@Cost-Allocation_Source-Raster_tag0@@": "A forráshelyek kötelező bemeneti rasztere.",
	"@@Cost-Allocation_Source-Raster_tag1@@": "Ez a raszter azokat a cellákat vagy helyeket határozza meg, amelyekből az eszköz kiszámítja a legkisebb kumulatív költségtávolságot az egyes kimeneti cellahelyekhez.",
	"@@Cost-Allocation_Source-Raster_tag2@@": "Ha a <strong>Forrásraszter</strong> lebegőpontos érték, akkor be kell állítani az <strong>Értékraszter</strong> értékét is, és egész számnak kell lennie. Az <strong>Értékraszter</strong> elsődlegességet élvez a <strong>Forrásmező</strong> bármely beállításával szemben.",
	"@@Cost-Allocation_Start-Cost_tag0@@": "A kiinduló költség, ahonnan kezdeni kell a költségszámítást. Ez a paraméter lehetővé teszi a forráshoz kapcsolódó fix költség megadását. A költségszámítási algoritmus ekkor nem 0-tól, hanem a megadott értéktől kezdi a számítást.",
	"@@Cost-Allocation_Start-Cost_tag1@@": "Az érték nem lehet kisebb nullánál. Az alapértelmezett érték 0.",
	"@@Cost-Allocation_Travel-Direction_tag0@@": "Az utazó irányát határozza meg a forrás rezisztenciaráta és a forrás kiinduló költség alkalmazásakor.",
	"@@Cost-Allocation_Travel-Direction_tag1@@": "<strong>Forrástól</strong>--A forrás rezisztenciarátát és a forrás kiinduló költséget a bemeneti forrástól indulva és a nem forráscellák felé haladva alkalmazza. Ez az alapértelmezés.",
	"@@Cost-Allocation_Travel-Direction_tag3@@": "<strong>Forráshoz</strong>--A forrás rezisztenciarátát és a forrás kiinduló költséget az egyes nem forráscelláktól indulva és a bemeneti forrás felé haladva alkalmazza.",
	"@@Cost-Allocation_Travel-Direction_tag5@@": "Adja meg vagy a <strong>Forrástól</strong> vagy pedig a <strong>Forráshoz</strong> kulcsszavát, amelyeket a rendszer valamennyi forrásra alkalmazni fog, vagy pedig adjon meg olyan mezőt a <strong>Forrástaszter</strong> beállításban, amely az egyes forrásokhoz tartozó utazási irányokat jelölő kulcsszavakat tartalmazza. A mezőnek tartalmaznia kell a következő karakterláncok egyikét: ${FROM_SOURCE} vagy ${TO_SOURCE}.",
	"@@Cost-Allocation_Value-Raster_tag0@@": "Az egyes bemeneti forráshelyekhez használni kívánt zónaértékeket jelölő bemeneti integerraszter. Az egyes forráshelycelláknál az <strong>Értékraszter</strong> által meghatározott érték lesz a forráshelyhez a számítás érdekében kiosztott összes cellához rendelve. Az <strong>Értékraszter</strong> elsődlegességet élvez a <strong>Forrásmező</strong> bármely beállításával szemben.",
	"@@Cost-Back-Link_Accumulative-Cost-Resistance-Rate_tag0@@": "Ez a paraméter a költségek csökkentésére irányuló erőfeszítések növekedését szimulálja a kumulatív költségek növekedésével. Az utazó fáradását modellezi. Egy cella elérésének növekvő kumulatív költségét szorozza meg a rezisztenciarátával, és adja hozzá a következő cellába való mozgás költségéhez.",
	"@@Cost-Back-Link_Accumulative-Cost-Resistance-Rate_tag1@@": "Ez egy kamatoskamat-számítási képlet módosított változata, amelyet egy cellán való áthaladás látható költségének kiszámítására használunk. A rezisztenciaráta értékének növekedésével nő a később meglátogatott cellák költsége. Minél nagyobb a rezisztenciaráta, annál nagyobb a következő cella elérésének költsége, amely minden egyes következő mozgással összeadódik. Mivel a rezisztenciaráta egy kamatos kamathoz hasonló, és a kumulatív költségértékek nagyon nagyok, a kumulatív költségértékektől függően kis rezisztenciaráta használata javasolt (pl. 0,005 vagy még kisebb).",
	"@@Cost-Back-Link_Accumulative-Cost-Resistance-Rate_tag2@@": "Az értéknek nagyobbnak kell lennie nullánál. Az alapértelmezett kapacitás a kimeneti raszter élénél van.",
	"@@Cost-Back-Link_Accumulative-Cost-Resistance-Rate_tag3@@": "Numerikus (double) érték vagy a <strong>Forrásraszter</strong> valamelyik mezője is használható e paraméter esetében.",
	"@@Cost-Back-Link_Capacity_tag0@@": "Az utazó költségkapacitását határozza meg egy forrásnál. A költségszámítás minden egyes forrásnál addig folytatódik, amíg el nem éri a meghatározott kapacitást.",
	"@@Cost-Back-Link_Capacity_tag1@@": "Az értéknek nagyobbnak kell lennie nullánál. Az alapértelmezett kapacitás a kimeneti raszter élénél van.",
	"@@Cost-Back-Link_Capacity_tag2@@": "Numerikus (double) érték vagy a <strong>Forrásraszter</strong> valamelyik mezője is használható e paraméter esetében.",
	"@@Cost-Back-Link_Cost-Raster_tag0@@": "Az egyes cellákon történő, síkrajzi értelemben vett áthaladás költségét vagy impedanciáját meghatározó, kötelező bemeneti raszter. Az egyes cellahelyeken szereplő értékek az azon történő áthaladás egységnyi távolságra eső költségét jelentik. Az eszköz a cellán történő áthaladás teljes költségének kiszámításához megszorozza az egyes cellahelyek értékét a cellafelbontással, és átlós mozgás esetén kompenzálja is az értéket.",
	"@@Cost-Back-Link_Cost-Raster_tag1@@": "A <strong>Költségraszter</strong> értékei lehetnek integer- vagy lebegőpontos értékek, de nem lehetnek negatívak vagy nullák.",
	"@@Cost-Back-Link_Maximum-Distance_tag0@@": "A küszöbérték, amelyet a kumulatív költségértékek nem haladhatnak meg. Ha egy kumulatív költségtávolság meghaladja ezt az értéket, a cellahely kimeneti értéke NoData lesz. A legnagyobb távolság határozza meg azt a kiterjedést, amelyre az eszköz kiszámítja a kumulatív költségtávolságokat. Az alapértelmezett távolság a kimeneti raszter kiterjedésénél van.",
	"@@Cost-Back-Link_Multiplier-to-Apply-to-Costs_tag0@@": "A költségértékekre alkalmazandó szorzótényező.",
	"@@Cost-Back-Link_Multiplier-to-Apply-to-Costs_tag1@@": "Ez a paraméter lehetővé teszi az utazás módjának vagy a nagyságnak a szabályozását egy forrásnál. Minél nagyobb a szorzó, annál nagyobb az egyes cellákon való áthaladás költsége.",
	"@@Cost-Back-Link_Multiplier-to-Apply-to-Costs_tag2@@": "Az értékeknek nullánál nagyobbaknak kell lenniük. Az alapértelmezett érték 1.",
	"@@Cost-Back-Link_Multiplier-to-Apply-to-Costs_tag3@@": "Numerikus (double) érték vagy a <strong>Forrásraszter</strong> valamelyik mezője is használható e paraméter esetében.",
	"@@Cost-Back-Link_Source-Raster_tag0@@": "A forráshelyek kötelező bemeneti rasztere.",
	"@@Cost-Back-Link_Source-Raster_tag1@@": "Ez a raszter azokat a cellákat vagy helyeket határozza meg, amelyekből az eszköz kiszámítja a legkisebb kumulatív költségtávolságot az egyes kimeneti cellahelyekhez.",
	"@@Cost-Back-Link_Start-Cost_tag0@@": "A kiinduló költség, ahonnan kezdeni kell a költségszámítást. Ez a paraméter lehetővé teszi a forráshoz kapcsolódó fix költség megadását. A költségszámítási algoritmus ekkor nem 0-tól, hanem a megadott értéktől kezdi a számítást.",
	"@@Cost-Back-Link_Start-Cost_tag1@@": "Az érték nem lehet kisebb nullánál. Az alapértelmezett érték 0.",
	"@@Cost-Back-Link_Travel-Direction_tag0@@": "Az utazó irányát határozza meg a forrás rezisztenciaráta és a forrás kiinduló költség alkalmazásakor.",
	"@@Cost-Back-Link_Travel-Direction_tag1@@": "<strong>Forrástól</strong>--A forrás rezisztenciarátát és a forrás kiinduló költséget a bemeneti forrástól indulva és a nem forráscellák felé haladva alkalmazza. Ez az alapértelmezés.",
	"@@Cost-Back-Link_Travel-Direction_tag3@@": "<strong>Forráshoz</strong>--A forrás rezisztenciarátát és a forrás kiinduló költséget az egyes nem forráscelláktól indulva és a bemeneti forrás felé haladva alkalmazza.",
	"@@Cost-Back-Link_Travel-Direction_tag5@@": "Adja meg vagy a <strong>Forrástól</strong> vagy pedig a <strong>Forráshoz</strong> kulcsszavát, amelyeket a rendszer valamennyi forrásra alkalmazni fog, vagy pedig adjon meg olyan mezőt a <strong>Forrástaszter</strong> beállításban, amely az egyes forrásokhoz tartozó utazási irányokat jelölő kulcsszavakat tartalmazza. A mezőnek tartalmaznia kell a következő karakterláncok egyikét: ${FROM_SOURCE} vagy ${TO_SOURCE}.",
	"@@Cost-Distance_Accumulative-Cost-Resistance-Rate_tag0@@": "Ez a paraméter a költségek csökkentésére irányuló erőfeszítések növekedését szimulálja a kumulatív költségek növekedésével. Az utazó fáradását modellezi. Egy cella elérésének növekvő kumulatív költségét szorozza meg a rezisztenciarátával, és adja hozzá a következő cellába való mozgás költségéhez.",
	"@@Cost-Distance_Accumulative-Cost-Resistance-Rate_tag1@@": "Ez egy kamatoskamat-számítási képlet módosított változata, amelyet egy cellán való áthaladás látható költségének kiszámítására használunk. A rezisztenciaráta értékének növekedésével nő a később meglátogatott cellák költsége. Minél nagyobb a rezisztenciaráta, annál nagyobb a következő cella elérésének költsége, amely minden egyes következő mozgással összeadódik. Mivel a rezisztenciaráta egy kamatos kamathoz hasonló, és a kumulatív költségértékek nagyon nagyok, a kumulatív költségértékektől függően kis rezisztenciaráta használata javasolt (pl. 0,005 vagy még kisebb).",
	"@@Cost-Distance_Accumulative-Cost-Resistance-Rate_tag2@@": "Az értéknek nagyobbnak kell lennie nullánál. Az alapértelmezett kapacitás a kimeneti raszter élénél van.",
	"@@Cost-Distance_Accumulative-Cost-Resistance-Rate_tag3@@": "Numerikus (double) érték vagy a <strong>Forrásraszter</strong> valamelyik mezője is használható e paraméter esetében.",
	"@@Cost-Distance_Capacity_tag0@@": "Az utazó költségkapacitását határozza meg egy forrásnál. A költségszámítás minden egyes forrásnál addig folytatódik, amíg el nem éri a meghatározott kapacitást.",
	"@@Cost-Distance_Capacity_tag1@@": "Az értéknek nagyobbnak kell lennie nullánál. Az alapértelmezett kapacitás a kimeneti raszter élénél van.",
	"@@Cost-Distance_Capacity_tag2@@": "Numerikus (double) érték vagy a <strong>Forrásraszter</strong> valamelyik mezője is használható e paraméter esetében.",
	"@@Cost-Distance_Cost-Raster_tag0@@": "Az egyes cellákon történő, síkrajzi értelemben vett áthaladás költségét vagy impedanciáját meghatározó, kötelező bemeneti raszter. Az egyes cellahelyeken szereplő értékek az azon történő áthaladás egységnyi távolságra eső költségét jelentik. Az eszköz a cellán történő áthaladás teljes költségének kiszámításához megszorozza az egyes cellahelyek értékét a cellafelbontással, és átlós mozgás esetén kompenzálja is az értéket.",
	"@@Cost-Distance_Cost-Raster_tag1@@": "A <strong>Költségraszter</strong> értékei lehetnek integer- vagy lebegőpontos értékek, de nem lehetnek negatívak vagy nullák.",
	"@@Cost-Distance_Maximum-Distance_tag0@@": "A küszöbérték, amelyet a kumulatív költségértékek nem haladhatnak meg. Ha egy kumulatív költségtávolság meghaladja ezt az értéket, a cellahely kimeneti értéke NoData lesz. A legnagyobb távolság határozza meg azt a kiterjedést, amelyre az eszköz kiszámítja a kumulatív költségtávolságokat. Az alapértelmezett távolság a kimeneti raszter kiterjedésénél van.",
	"@@Cost-Distance_Multiplier-to-Apply-to-Costs_tag0@@": "A költségértékekre alkalmazandó szorzótényező.",
	"@@Cost-Distance_Multiplier-to-Apply-to-Costs_tag1@@": "Ez a paraméter lehetővé teszi az utazás módjának vagy a nagyságnak a szabályozását egy forrásnál. Minél nagyobb a szorzó, annál nagyobb az egyes cellákon való áthaladás költsége.",
	"@@Cost-Distance_Multiplier-to-Apply-to-Costs_tag2@@": "Az értékeknek nullánál nagyobbaknak kell lenniük. Az alapértelmezett érték 1.",
	"@@Cost-Distance_Multiplier-to-Apply-to-Costs_tag3@@": "Numerikus (double) érték vagy a <strong>Forrásraszter</strong> valamelyik mezője is használható e paraméter esetében.",
	"@@Cost-Distance_Source-Raster_tag0@@": "A forráshelyek kötelező bemeneti rasztere.",
	"@@Cost-Distance_Source-Raster_tag1@@": "Ez a raszter azokat a cellákat vagy helyeket határozza meg, amelyekből az eszköz kiszámítja a legkisebb kumulatív költségtávolságot az egyes kimeneti cellahelyekhez.",
	"@@Cost-Distance_Start-Cost_tag0@@": "A kiinduló költség, ahonnan kezdeni kell a költségszámítást. Ez a paraméter lehetővé teszi a forráshoz kapcsolódó fix költség megadását. A költségszámítási algoritmus ekkor nem 0-tól, hanem a megadott értéktől kezdi a számítást.",
	"@@Cost-Distance_Start-Cost_tag1@@": "Az érték nem lehet kisebb nullánál. Az alapértelmezett érték 0.",
	"@@Cost-Distance_Travel-Direction_tag0@@": "Az utazó irányát határozza meg a forrás rezisztenciaráta és a forrás kiinduló költség alkalmazásakor.",
	"@@Cost-Distance_Travel-Direction_tag1@@": "<strong>Forrástól</strong>--A forrás rezisztenciarátát és a forrás kiinduló költséget a bemeneti forrástól indulva és a nem forráscellák felé haladva alkalmazza. Ez az alapértelmezés.",
	"@@Cost-Distance_Travel-Direction_tag3@@": "<strong>Forráshoz</strong>--A forrás rezisztenciarátát és a forrás kiinduló költséget az egyes nem forráscelláktól indulva és a bemeneti forrás felé haladva alkalmazza.",
	"@@Cost-Distance_Travel-Direction_tag5@@": "Adja meg vagy a <strong>Forrástól</strong> vagy pedig a <strong>Forráshoz</strong> kulcsszavát, amelyeket a rendszer valamennyi forrásra alkalmazni fog, vagy pedig adjon meg olyan mezőt a <strong>Forrástaszter</strong> beállításban, amely az egyes forrásokhoz tartozó utazási irányokat jelölő kulcsszavakat tartalmazza. A mezőnek tartalmaznia kell a következő karakterláncok egyikét: ${FROM_SOURCE} vagy ${TO_SOURCE}.",
	"@@Curvature_Curvature-Type_tag0@@": "A görbülettípus a lejtő különböző jellemzőit emeli ki. Háromféle görbületbeállítás választható:",
	"@@Curvature_Curvature-Type_tag1@@": "Vízszintes (sík)--a legnagyobb lejtés irányára merőleges. A felszínen áthaladó áramlás konvergenciáját és divergenciáját befolyásolja.",
	"@@Curvature_Curvature-Type_tag2@@": "Lejtőirányú--a lejtéssel párhuzamos, és a legnagyobb lejtés irányát mutatja. A felszínen áthaladó áramlás gyorsulását és lassulását befolyásolja.",
	"@@Curvature_Curvature-Type_tag3@@": "Szabványos--A <strong>Profil</strong> és a <strong>Planform</strong> görbületeket egyesíti.",
	"@@Curvature_DEM_tag0@@": "Egy digitális magasságmodell (DMM) raszter.",
	"@@Curvature_Z-Factor_tag0@@": "A z tényező a z egységek mértékegységeit módosítja, amikor azok eltérnek a bemeneti felszín x, y egységeitől. Ha az x, y egységek és a z egységek mértékegysége megegyezik, a z tényezőt 1-re kell állítani. A bemeneti felszín z értékeit meg kell szorozni a z tényezővel a végső kimeneti felszín számításakor. Ha például a z egységek lábban és az x, y egységek méterben vannak megadva, akkor a z tényezőnek 0,3048 értéket kell adni a z egységek átváltásához lábról méterre, mivel 1 láb = 0,3048 méter.",
	"@@Divide_Cellsize-Type_tag0@@": "Válassza ki, hogy melyik cellaméretet szeretné használni a kimeneti raszterben. Ha mindegyik bemeneti cellaméret azonos, mindegyik lehetőség ugyanarra az eredményre vezet.",
	"@@Divide_Cellsize-Type_tag1@@": "Első--a bemeneti raszterek első cellaméretének használata.",
	"@@Divide_Cellsize-Type_tag2@@": "Utolsó--a bemeneti raszterek utolsó cellaméretének használata.",
	"@@Divide_Cellsize-Type_tag3@@": "Maximum--az összes bemeneti raszter legnagyobb cellaméretének használata. Ez az alapértelmezés.",
	"@@Divide_Cellsize-Type_tag4@@": "Átlag--az összes bemeneti raszter átlagos cellaméretének használata.",
	"@@Divide_Cellsize-Type_tag5@@": "Minimum--az összes bemeneti raszter legkisebb cellaméretének használata.",
	"@@Divide_Extent-Type_tag0@@": "Válassza ki, hogy melyik kiterjedést szeretné használni a kimeneti raszterben:",
	"@@Divide_Extent-Type_tag1@@": "Első--az első bemeneti raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Divide_Extent-Type_tag2@@": "Metszet--az átfedésben lévő pixelek kiterjedésének használata a feldolgozási kiterjedés meghatározásához. Ez az alapértelmezés.",
	"@@Divide_Extent-Type_tag3@@": "Utolsó--az utolsó bemeneti raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Divide_Extent-Type_tag4@@": "Unió--az összes raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Divide_Raster_tag0@@": "A bemenet, amelynek értékét osztjuk a második bemenettel.",
	"@@Divide_Raster_tag1@@": "Ennél a paraméternél használható szám bemenetként, amennyiben megadja a rasztert a(z) ${Raster2} paraméternél.",
	"@@Divide_Raster2_tag0@@": "A bemenet, amelynek értékével osztjuk az első bemenetet.",
	"@@Divide_Raster2_tag1@@": "Ennél a paraméternél használható szám bemenetként, amennyiben megadja a rasztert a(z) ${Raster} paraméternél.",
	"@@Elevation-Void-Fill_DEM_tag0@@": "A bemeneti DMM.",
	"@@Elevation-Void-Fill_Max-Void-Width_tag0@@": "A legnagyobb üres szélesség értékét egy kitölteni kívánt kitöltetlen terület legnagyobb méretének meghatározásához használjuk. Ha a kitöltetlen területet körülölelő határoló téglalap szélessége vagy magassága nagyobb, mint a legnagyobb üres szélesség értéke, akkor a kitöltetlen terület nem lesz kitöltve. A paraméter mértékegységei megegyeznek az adatok térreferencia-rendszerében használt mértékegységekkel.",
	"@@Elevation-Void-Fill_Max-Void-Width_tag1@@": "Ha a paraméter üres vagy az értéke ${0}, akkor az alkalmazás nem használ maximum értéket, és minden kitöltetlen területet kitölt. A ${-1} érték azt jelenti, hogy a kitöltetlen területek nem lesznek kitöltve.",
	"@@Elevation-Void-Fill_Short-Range-IDW-Radius_tag0@@": "A kitöltetlen területek kitöltéséhez használt legnagyobb keresési sugár. Az ennél a küszöbértéknél – bármely érvényes pixeltől mérve – messzebb található kitöltetlen terület kitöltetlen marad. A paraméter mértékegységei megegyeznek az adatok térreferencia-rendszerében használt mértékegységekkel.",
	"@@Elevation-Void-Fill_Short-Range-IDW-Radius_tag1@@": "Ha a paraméter értéke üres, ${0} vagy ${-1}, az alkalmazás nem használja ezt a paramétert.",
	"@@Equal-to_Cellsize-Type_tag0@@": "Válassza ki, hogy melyik cellaméretet szeretné használni a kimeneti raszterben. Ha mindegyik bemeneti cellaméret azonos, mindegyik lehetőség ugyanarra az eredményre vezet.",
	"@@Equal-to_Cellsize-Type_tag1@@": "Első--a bemeneti raszterek első cellaméretének használata.",
	"@@Equal-to_Cellsize-Type_tag2@@": "Utolsó--a bemeneti raszterek utolsó cellaméretének használata.",
	"@@Equal-to_Cellsize-Type_tag3@@": "Maximum--az összes bemeneti raszter legnagyobb cellaméretének használata. Ez az alapértelmezés.",
	"@@Equal-to_Cellsize-Type_tag4@@": "Átlag--az összes bemeneti raszter átlagos cellaméretének használata.",
	"@@Equal-to_Cellsize-Type_tag5@@": "Minimum--az összes bemeneti raszter legkisebb cellaméretének használata.",
	"@@Equal-to_Extent-Type_tag0@@": "Válassza ki, hogy melyik kiterjedést szeretné használni a kimeneti raszterben:",
	"@@Equal-to_Extent-Type_tag1@@": "Első--az első bemeneti raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Equal-to_Extent-Type_tag2@@": "Metszet--az átfedésben lévő pixelek kiterjedésének használata a feldolgozási kiterjedés meghatározásához. Ez az alapértelmezés.",
	"@@Equal-to_Extent-Type_tag3@@": "Utolsó--az utolsó bemeneti raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Equal-to_Extent-Type_tag4@@": "Unió--az összes raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Equal-to_Raster_tag0@@": "A bemenet, amelynek az egyenlőségét a második bemenettel meg kell állapítani.",
	"@@Equal-to_Raster_tag1@@": "Ennél a paraméternél használható konstans érték bemenetként, amennyiben megadja a rasztert a másik paraméternél.",
	"@@Equal-to_Raster2_tag0@@": "A bemenet, amelynek az egyenlőségét az első bemenettel meg kell állapítani.",
	"@@Equal-to_Raster2_tag1@@": "Ennél a paraméternél használható konstans érték bemenetként, amennyiben megadja a rasztert a másik paraméternél.",
	"@@Euclidean-Allocation_Cellsize_tag0@@": "A cellaméret, amelyen a kimeneti raszter létrejön.",
	"@@Euclidean-Allocation_Cellsize_tag1@@": "Ha a cellaméretet kifejezetten megadta az <strong>Elemzési környezetek</strong> beállításban, akkor az lesz az alapértelmezett cellaméret. Ha nincs beállítva, a kimeneti cellaméret ugyanaz lesz, mint a <strong>Forrásraszter</strong>.",
	"@@Euclidean-Allocation_Distance-Method_tag0@@": "Meghatározza, hogy a távolság számítása síkbeli (lapos föld) vagy geodéziai (ellipszoid) módszerrel történjen.",
	"@@Euclidean-Allocation_Distance-Method_tag1@@": "Geodéziai--a legrövidebb szakasz két pont között a föld felszínén egy szferoidon (ellipszoid). Az eredmények nem változnak, függetlenül a bemeneti vagy kimeneti vetülettől. A geodéziai vonal használható, ha meg szeretné határozni a legrövidebb távolságot két város között egy repülőgép útvonala esetén. Ez orthodromaként is ismert, ha az alapja gömb, nem pedig ellipszoid.",
	"@@Euclidean-Allocation_Distance-Method_tag2@@": "Síkbeli--a síkbeli mérések 2D euklideszi geometriát használnak a hossz és a terület kiszámítására. Ez a beállítás csak vetületi koordináta-rendszerben történő mérés esetén elérhető, és a mérések alapját a koordináta-rendszer 2D síkja fogja képezni.",
	"@@Euclidean-Allocation_Maximum-Distance_tag0@@": "Azt a küszöbtávolságot határozza meg, amelyen belül a legközelebbi forrás meg lesz határozva. Ha a legközelebbi forrástól mért távolság ennél nagyobb, akkor annak a cellának a kimenete ${NoData} lesz.",
	"@@Euclidean-Allocation_Maximum-Distance_tag1@@": "Az alapértelmezett távolság a kimeneti raszter kiterjedésénél van.",
	"@@Euclidean-Allocation_Raster-Barriers_tag0@@": "Az akadályokat meghatározó raszter.",
	"@@Euclidean-Allocation_Raster-Barriers_tag1@@": "Az adathalmaznak ${NoData} értéket kell tartalmaznia, ahol nincs akadály. Az akadályokat érvényes értékek jelölik, a nullát is ideértve.",
	"@@Euclidean-Allocation_Raster-Barriers_tag2@@": "Az akadályok meghatározhatók integer- vagy lebegőpontos raszterrel.",
	"@@Euclidean-Allocation_Source-Field_tag0@@": "Az a mező, amelyet az értékek forráshelyekhez rendeléséhez használunk. Egész számnak kell lennie. Ha az <strong>Értékraszter</strong> be van állítva, a bemenetben szereplő értékek elsődlegességet élveznek a következő beállításban megadott értékekkel szemben:",
	"@@Euclidean-Allocation_Source-Raster_tag0@@": "A forráshelyeket jelölő kötelező bemeneti raszter. A kimenetben lévő minden cellához meghatározza a legközelebbi forrást az euklideszi távolság alapján.",
	"@@Euclidean-Allocation_Source-Raster_tag1@@": "A bemenet típusa lehet egész szám vagy lebegőpontos érték.",
	"@@Euclidean-Allocation_Value-Raster_tag0@@": "Az egyes bemeneti forráshelyekhez használni kívánt zónaértékeket jelölő bemeneti integerraszter. Az egyes forráshelycelláknál az <strong>Értékraszter</strong> által meghatározott érték lesz a forráshelyhez a számítás érdekében kiosztott összes cellához rendelve. Az <strong>Értékraszter</strong> elsődlegességet élvez a <strong>Forrásmező</strong> bármely beállításával szemben.",
	"@@Euclidean-Direction_Cellsize_tag0@@": "A cellaméret, amelyen a kimeneti raszter létrejön.",
	"@@Euclidean-Direction_Cellsize_tag1@@": "Ha a cellaméretet kifejezetten megadta az <strong>Elemzési környezetek</strong> beállításban, akkor az lesz az alapértelmezett cellaméret. Ha nincs beállítva, a kimeneti cellaméret ugyanaz lesz, mint a <strong>Forrásraszter</strong>.",
	"@@Euclidean-Direction_Distance-Method_tag0@@": "Meghatározza, hogy a távolság számítása síkbeli (lapos föld) vagy geodéziai (ellipszoid) módszerrel történjen.",
	"@@Euclidean-Direction_Distance-Method_tag1@@": "Geodéziai--a legrövidebb szakasz két pont között a föld felszínén egy szferoidon (ellipszoid). Az eredmények nem változnak, függetlenül a bemeneti vagy kimeneti vetülettől. A geodéziai vonal használható, ha meg szeretné határozni a legrövidebb távolságot két város között egy repülőgép útvonala esetén. Ez orthodromaként is ismert, ha az alapja gömb, nem pedig ellipszoid.",
	"@@Euclidean-Direction_Distance-Method_tag2@@": "Síkbeli--a síkbeli mérések 2D euklideszi geometriát használnak a hossz és a terület kiszámítására. Ez a beállítás csak vetületi koordináta-rendszerben történő mérés esetén elérhető, és a mérések alapját a koordináta-rendszer 2D síkja fogja képezni.",
	"@@Euclidean-Direction_Maximum-Distance_tag0@@": "Azt a küszöbtávolságot határozza meg, amelyen belül a legközelebbi forrás iránya ki lesz számítva. Ha a legközelebbi forrástól mért távolság ennél nagyobb, akkor annak a cellának a kimenete ${NoData} lesz.",
	"@@Euclidean-Direction_Maximum-Distance_tag1@@": "Az alapértelmezett távolság a kimeneti raszter kiterjedésénél van.",
	"@@Euclidean-Direction_Raster-Barriers_tag0@@": "Az akadályokat meghatározó raszter.",
	"@@Euclidean-Direction_Raster-Barriers_tag1@@": "Az adathalmaznak NoData értéket kell tartalmaznia, ahol nincs akadály. Az akadályokat érvényes értékek jelölik, a nullát is ideértve.",
	"@@Euclidean-Direction_Raster-Barriers_tag2@@": "Az akadályok meghatározhatók integer- vagy lebegőpontos raszterrel.",
	"@@Euclidean-Direction_Source-Raster_tag0@@": "Azokat a cellákat vagy helyeket meghatározó, kötelező bemeneti raszter, amelyekhez az euklideszi irány ki van számítva mindegyik kimeneti cellahelynél.",
	"@@Euclidean-Direction_Source-Raster_tag1@@": "A bemenet típusa lehet egész szám vagy lebegőpontos érték.",
	"@@Euclidean-Distance_Cellsize_tag0@@": "A cellaméret, amelyen a kimeneti raszter létrejön.",
	"@@Euclidean-Distance_Cellsize_tag1@@": "Ha a cellaméretet kifejezetten megadta az <strong>Elemzési környezetek</strong> beállításban, akkor az lesz az alapértelmezett cellaméret. Ha nincs beállítva, a kimeneti cellaméret ugyanaz lesz, mint a <strong>Forrásraszter</strong>.",
	"@@Euclidean-Distance_Distance-Method_tag0@@": "Meghatározza, hogy a távolság számítása síkbeli (lapos föld) vagy geodéziai (ellipszoid) módszerrel történjen.",
	"@@Euclidean-Distance_Distance-Method_tag1@@": "Geodéziai--a legrövidebb szakasz két pont között a föld felszínén egy szferoidon (ellipszoid). Az eredmények nem változnak, függetlenül a bemeneti vagy kimeneti vetülettől. A geodéziai vonal használható, ha meg szeretné határozni a legrövidebb távolságot két város között egy repülőgép útvonala esetén. Ez orthodromaként is ismert, ha az alapja gömb, nem pedig ellipszoid.",
	"@@Euclidean-Distance_Distance-Method_tag2@@": "Síkbeli--a síkbeli mérések 2D euklideszi geometriát használnak a hossz és a terület kiszámítására. Ez a beállítás csak vetületi koordináta-rendszerben történő mérés esetén elérhető, és a mérések alapját a koordináta-rendszer 2D síkja fogja képezni.",
	"@@Euclidean-Distance_Maximum-Distance_tag0@@": "A küszöbérték, amelyet a kumulatív távolságértékek nem haladhatnak meg. Ha egy kumulatív euklideszi távolság meghaladja ezt az értéket, a cellahely kimeneti értéke NoData lesz.",
	"@@Euclidean-Distance_Maximum-Distance_tag1@@": "Az alapértelmezett távolság a kimeneti raszter kiterjedésénél van.",
	"@@Euclidean-Distance_Raster-Barriers_tag0@@": "Az akadályokat meghatározó raszter.",
	"@@Euclidean-Distance_Raster-Barriers_tag1@@": "Az adathalmaznak ${NoData} értéket kell tartalmaznia, ahol nincs akadály. Az akadályokat érvényes értékek jelölik, a nullát is ideértve.",
	"@@Euclidean-Distance_Raster-Barriers_tag2@@": "Az akadályok meghatározhatók integer- vagy lebegőpontos raszterrel.",
	"@@Euclidean-Distance_Source-Raster_tag0@@": "Azokat a cellákat vagy helyeket meghatározó, kötelező bemeneti raszter, amelyekhez az euklideszi távolság ki van számítva mindegyik kimeneti cellahelynél.",
	"@@Euclidean-Distance_Source-Raster_tag1@@": "A bemenet típusa lehet egész szám vagy lebegőpontos érték.",
	"@@Exp_Cellsize-Type_tag0@@": "Válassza ki, hogy melyik cellaméretet szeretné használni a kimeneti raszterben. Ha mindegyik bemeneti cellaméret azonos, mindegyik lehetőség ugyanarra az eredményre vezet.",
	"@@Exp_Cellsize-Type_tag1@@": "Első--a bemeneti raszterek első cellaméretének használata.",
	"@@Exp_Cellsize-Type_tag2@@": "Utolsó--a bemeneti raszterek utolsó cellaméretének használata.",
	"@@Exp_Cellsize-Type_tag3@@": "Maximum--az összes bemeneti raszter legnagyobb cellaméretének használata. Ez az alapértelmezés.",
	"@@Exp_Cellsize-Type_tag4@@": "Átlag--az összes bemeneti raszter átlagos cellaméretének használata.",
	"@@Exp_Cellsize-Type_tag5@@": "Minimum--az összes bemeneti raszter legkisebb cellaméretének használata.",
	"@@Exp_Extent-Type_tag0@@": "Válassza ki, hogy melyik kiterjedést szeretné használni a kimeneti raszterben:",
	"@@Exp_Extent-Type_tag1@@": "Első--az első bemeneti raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Exp_Extent-Type_tag2@@": "Metszet--az átfedésben lévő pixelek kiterjedésének használata a feldolgozási kiterjedés meghatározásához. Ez az alapértelmezés.",
	"@@Exp_Extent-Type_tag3@@": "Utolsó--az utolsó bemeneti raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Exp_Extent-Type_tag4@@": "Unió--az összes raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Exp_Raster_tag0@@": "A bemeneti értékek, amelyekhez meg kell keresni az e alapú hatványt.",
	"@@Exp10_Cellsize-Type_tag0@@": "Válassza ki, hogy melyik cellaméretet szeretné használni a kimeneti raszterben. Ha mindegyik bemeneti cellaméret azonos, mindegyik lehetőség ugyanarra az eredményre vezet.",
	"@@Exp10_Cellsize-Type_tag1@@": "Első--a bemeneti raszterek első cellaméretének használata.",
	"@@Exp10_Cellsize-Type_tag2@@": "Utolsó--a bemeneti raszterek utolsó cellaméretének használata.",
	"@@Exp10_Cellsize-Type_tag3@@": "Maximum--az összes bemeneti raszter legnagyobb cellaméretének használata. Ez az alapértelmezés.",
	"@@Exp10_Cellsize-Type_tag4@@": "Átlag--az összes bemeneti raszter átlagos cellaméretének használata.",
	"@@Exp10_Cellsize-Type_tag5@@": "Minimum--az összes bemeneti raszter legkisebb cellaméretének használata.",
	"@@Exp10_Extent-Type_tag0@@": "Válassza ki, hogy melyik kiterjedést szeretné használni a kimeneti raszterben:",
	"@@Exp10_Extent-Type_tag1@@": "Első--az első bemeneti raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Exp10_Extent-Type_tag2@@": "Metszet--az átfedésben lévő pixelek kiterjedésének használata a feldolgozási kiterjedés meghatározásához. Ez az alapértelmezés.",
	"@@Exp10_Extent-Type_tag3@@": "Utolsó--az utolsó bemeneti raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Exp10_Extent-Type_tag4@@": "Unió--az összes raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Exp10_Raster_tag0@@": "A bemeneti értékek, amelyekhez meg kell keresni a 10-es alapú hatványt.",
	"@@Exp2_Cellsize-Type_tag0@@": "Válassza ki, hogy melyik cellaméretet szeretné használni a kimeneti raszterben. Ha mindegyik bemeneti cellaméret azonos, mindegyik lehetőség ugyanarra az eredményre vezet.",
	"@@Exp2_Cellsize-Type_tag1@@": "Első--a bemeneti raszterek első cellaméretének használata.",
	"@@Exp2_Cellsize-Type_tag2@@": "Utolsó--a bemeneti raszterek utolsó cellaméretének használata.",
	"@@Exp2_Cellsize-Type_tag3@@": "Maximum--az összes bemeneti raszter legnagyobb cellaméretének használata. Ez az alapértelmezés.",
	"@@Exp2_Cellsize-Type_tag4@@": "Átlag--az összes bemeneti raszter átlagos cellaméretének használata.",
	"@@Exp2_Cellsize-Type_tag5@@": "Minimum--az összes bemeneti raszter legkisebb cellaméretének használata.",
	"@@Exp2_Extent-Type_tag0@@": "Válassza ki, hogy melyik kiterjedést szeretné használni a kimeneti raszterben:",
	"@@Exp2_Extent-Type_tag1@@": "Első--az első bemeneti raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Exp2_Extent-Type_tag2@@": "Metszet--az átfedésben lévő pixelek kiterjedésének használata a feldolgozási kiterjedés meghatározásához. Ez az alapértelmezés.",
	"@@Exp2_Extent-Type_tag3@@": "Utolsó--az utolsó bemeneti raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Exp2_Extent-Type_tag4@@": "Unió--az összes raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Exp2_Raster_tag0@@": "A bemeneti értékek, amelyekhez meg kell keresni a 2-es alapú hatványt.",
	"@@Extract-Bands_Band_tag0@@": "Válassza ki listáról a kinyerni kívánt hullámhossztartományokat az alkalmazott <strong>Metódus</strong> paraméter beállítása alapján.",
	"@@Extract-Bands_Combination_tag0@@": "A sávkombináció vagy a sávtartományok sorrendje. A lehetőségek listája a megadott <strong>Method</strong> paramétertől beállításától függ. Például ha a <strong>Metódus</strong> beállítása a <strong>Hullámhossztartomány-nevek</strong>, akkor választhatja a kék, a zöld és a piros kombinációját természetes színkép kinyeréséhez.",
	"@@Extract-Bands_Method_tag0@@": "A sávok kinyeréséhez a következő módszerek közül választhat:",
	"@@Extract-Bands_Method_tag1@@": "<strong>Hullámhossztartomány-azonosítók</strong>--A hullámhossztartomány megnevezése vagy száma, amely minden szenzor esetén egyedi. Megegyezhetnek a <strong>Hullámhossztartomány-nevek</strong> értékeivel.",
	"@@Extract-Bands_Method_tag4@@": "<strong>Hullámhossztartomány-nevek</strong>--A hullámhossz elektromágneses spektrumon elfoglalt helyét jelző hullámhossztartomány-név alkalmazása (például piros, közeli infravörös, termikus infravörös). Ez sávtartománynév-azonosítóval is megnevezhető.",
	"@@Extract-Bands_Method_tag6@@": "<strong>Hullámhossztartomány hullámhosszai</strong>--Hullámhossz az elektromágneses spektrumon.",
	"@@Extract-Bands_Missing-Band-Action_tag0@@": "Megadható, hogy mi történjen, amikor egy sáv nem elérhető a kinyerési hullámhossztartományon belül.",
	"@@Extract-Bands_Missing-Band-Action_tag1@@": "<strong>Legjobb egyezés</strong>--A hullámhossz alapján megkeresi a legjobb rendelkezésre álló hullámhossztartományt, amely a hiányzó hullámhossztartomány helyett használható, hogy a függvény ne legyen sikertelen.",
	"@@Extract-Bands_Missing-Band-Action_tag3@@": "strong>Sikertelen</strong>--Ha a bemeneti adathalmazból hiányzik a <strong>Hullámhossztartomány</strong> paraméterben megadott bármelyik hullámhossztartomány, a függvény sikertelen lesz.",
	"@@Extract-Bands_Raster_tag0@@": "A raszteres termék, amelyből a sáv vagy sávok ki lesznek nyerve.",
	"@@Fill_Raster_tag0@@": "Egy egysávos magasságraszter.",
	"@@Fill_Z-Limit_tag0@@": "A legnagyobb magasságkülönbség egy helyi erózióbázis és a kitöltendő kifolyási pontja között.",
	"@@Fill_Z-Limit_tag1@@": "Ha nem ad értéket ennek a paraméternek, minden helyi erózióbázis ki lesz töltve a mélységtől függetlenül.",
	"@@Fill_Z-Limit_tag2@@": "A <strong>Z határérték</strong>z értékének nagyobbnak kell lennie nullánál.",
	"@@Float_Cellsize-Type_tag0@@": "Válassza ki, hogy melyik cellaméretet szeretné használni a kimeneti raszterben. Ha mindegyik bemeneti cellaméret azonos, mindegyik lehetőség ugyanarra az eredményre vezet.",
	"@@Float_Cellsize-Type_tag1@@": "Első--a bemeneti raszterek első cellaméretének használata.",
	"@@Float_Cellsize-Type_tag2@@": "Utolsó--a bemeneti raszterek utolsó cellaméretének használata.",
	"@@Float_Cellsize-Type_tag3@@": "Maximum--az összes bemeneti raszter legnagyobb cellaméretének használata. Ez az alapértelmezés.",
	"@@Float_Cellsize-Type_tag4@@": "Átlag--az összes bemeneti raszter átlagos cellaméretének használata.",
	"@@Float_Cellsize-Type_tag5@@": "Minimum--az összes bemeneti raszter legkisebb cellaméretének használata.",
	"@@Float_Extent-Type_tag0@@": "Válassza ki, hogy melyik kiterjedést szeretné használni a kimeneti raszterben:",
	"@@Float_Extent-Type_tag1@@": "Első--az első bemeneti raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Float_Extent-Type_tag2@@": "Metszet--az átfedésben lévő pixelek kiterjedésének használata a feldolgozási kiterjedés meghatározásához. Ez az alapértelmezés.",
	"@@Float_Extent-Type_tag3@@": "Utolsó--az utolsó bemeneti raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Float_Extent-Type_tag4@@": "Unió--az összes raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Float_Raster_tag0@@": "A lebegőpontossá alakítandó bemeneti raszter.",
	"@@Flow-Accumulation_Flow-Direction-Raster_tag0@@": "A bemeneti raszter, amely a kiáramlás irányát mutatja az egyes cellákból.",
	"@@Flow-Accumulation_Flow-Direction-Raster_tag1@@": "Az áramlásiirány-raszter az <strong>Áramlási irány</strong> függvény futtatásával hozható létre.",
	"@@Flow-Accumulation_Flow-Direction-Type_tag0@@": "A bemeneti áramlásiirány-raszter típusát határozza meg.",
	"@@Flow-Accumulation_Flow-Direction-Type_tag1@@": "<strong>D8</strong>--A bemeneti áramlásiirány-raszter típusa D8. Ez az alapértelmezés.",
	"@@Flow-Accumulation_Flow-Direction-Type_tag3@@": "<strong>DINF</strong>--A bemeneti áramlásiirány-raszter típusa D-Infinity (DINF).",
	"@@Flow-Accumulation_Flow-Direction-Type_tag5@@": "<strong>MFD</strong>--a bemeneti áramlásiirány-raszter típusa többszörös áramlási irány (MFD).",
	"@@Flow-Accumulation_Output-Data-Type_tag0@@": "A kimeneti akkumulációraszter lehet egész szám vagy lebegőpontos típus.",
	"@@Flow-Accumulation_Output-Data-Type_tag1@@": "<strong>Lebegőpontos</strong>--A kimeneti raszter lebegőpontos típusú lesz. Ez az alapértelmezés.",
	"@@Flow-Accumulation_Output-Data-Type_tag3@@": "<strong>Integer</strong>--A kimeneti raszter egész szám típusú lesz.",
	"@@Flow-Accumulation_Weight-Raster_tag0@@": "Opcionális bemeneti raszter az egyes pixelek súlyozásához.",
	"@@Flow-Accumulation_Weight-Raster_tag1@@": "Ha nincs megadva súlyraszter, mindegyik pixel az alapértelmezett 1 súlyt kapja.",
	"@@Flow-Direction_Flow-Direction-Type_tag0@@": "A bemeneti áramlásiirány-raszter típusát határozza meg.",
	"@@Flow-Direction_Flow-Direction-Type_tag1@@": "<strong>D8</strong>--A bemeneti áramlásiirány-raszter típusa D8. Ez az alapértelmezés.",
	"@@Flow-Direction_Flow-Direction-Type_tag3@@": "<strong>DINF</strong>--A bemeneti áramlásiirány-raszter típusa D-Infinity (DINF).",
	"@@Flow-Direction_Flow-Direction-Type_tag5@@": "<strong>MFD</strong>--a bemeneti áramlásiirány-raszter típusa többszörös áramlási irány (MFD).",
	"@@Flow-Direction_Force-all-edge-cells-to-flow-outward_tag0@@": "Meghatározza, hogy az élpixelek mindig kifelé áramlanak vagy a normál áramlási szabályokat követik.",
	"@@Flow-Direction_Force-all-edge-cells-to-flow-outward_tag1@@": "<strong>Nem</strong>--Ha a legnagyobb esés egy élpixel belsején nullánál nagyobb, az áramlási irány meghatározása a szokásos módon történik; máskülönben az áramlási irány az él felé lesz. Azok a pixelek, amelyeknek a felszínraszter élétől befelé kell áramolniuk, arra is fognak áramolni. Ez az alapértelmezés.",
	"@@Flow-Direction_Force-all-edge-cells-to-flow-outward_tag3@@": "<strong>Igen</strong>--A felszínraszter élén lévő összes pixel a felszínrasztertől kifelé fog áramolni.",
	"@@Flow-Direction_Raster_tag0@@": "Egy folyamatos magasságfelületet meghatározó bemeneti raszter.",
	"@@Flow-Distance_Distance-Type_tag0@@": "Meghatározza, hogy az áramlási távolság függőleges vagy vízszintes komponense lesz-e kiszámítva.",
	"@@Flow-Distance_Distance-Type_tag1@@": "<strong>Vízszintes</strong>--Az áramlási távolság kiszámított értékei a tartomány egyes pixeljeitől annak a vízfolyásnak a pixeljeiig vett áramlási távolság vízszintes komponensét jelentik, amelybe folynak.",
	"@@Flow-Distance_Distance-Type_tag3@@": "<strong>Függőleges</strong>--Az áramlási távolság kiszámított értékei a tartomány egyes pixeljeitől annak a vízfolyásnak a pixeljeiig vett áramlási távolság függőleges komponensét jelentik, amelybe folynak. Ez az alapértelmezés.",
	"@@Flow-Distance_Flow-Direction-Raster_tag0@@": "A bemeneti raszter, amely a kiáramlás irányát mutatja az egyes pixelekből.",
	"@@Flow-Distance_Flow-Direction-Raster_tag1@@": "Áramlásiirány-raszter megadásakor a lejtők irányai a bemeneti áramlási irányok által meghatározottakra korlátozódnak.",
	"@@Flow-Distance_Flow-Direction-Raster_tag2@@": "Az áramlásiirány-raszter az Áramlási irány funkcióval hozható létre.",
	"@@Flow-Distance_Flow-Direction-Type_tag0@@": "A bemeneti áramlásiirány-raszter típusát határozza meg.",
	"@@Flow-Distance_Flow-Direction-Type_tag1@@": "<strong>D8</strong>--A bemeneti áramlásiirány-raszter típusa D8. Ez az alapértelmezés.",
	"@@Flow-Distance_Flow-Direction-Type_tag3@@": "<strong>DINF</strong>--A bemeneti áramlásiirány-raszter típusa D-Infinity (DINF).",
	"@@Flow-Distance_Flow-Direction-Type_tag5@@": "<strong>MFD</strong>--A bemeneti áramlásiirány-raszter típusa többszörös áramlási irány (MFD).",
	"@@Flow-Distance_Statistics-Type_tag0@@": "Az áramlási távolság több áramlási útvonalon történő kiszámításához használt statisztika típusát határozza meg. Ha minden egyes cellától csak egyetlen áramlási útvonal van egy, a vízfolyáson lévő cellához, mindegyik statisztikatípus ugyanarra az eredményre vezet.",
	"@@Flow-Distance_Statistics-Type_tag1@@": "<strong>Minimum</strong>--Ha több áramlási útvonal létezik, a legkisebb áramlási távolságot számítja ki. Ez az alapértelmezés.",
	"@@Flow-Distance_Statistics-Type_tag3@@": "<strong>Súlyozott átlag</strong>--Ha több áramlási útvonal létezik, az áramlási távolság súlyozott átlagát számítja ki. A súlyozott átlag számításához súlyként az egy cellától az áramlás irányában szomszédos cellák felé történő áramlás arányát használja.",
	"@@Flow-Distance_Statistics-Type_tag5@@": "<strong>Maximum</strong>--Ha több áramlási útvonal létezik, a legnagyobb áramlási távolságot számítja ki.",
	"@@Flow-Distance_Stream-Raster_tag0@@": "Egy lineáris vízfolyáshálózatot meghatározó bemeneti vízfolyásraszter.",
	"@@Flow-Distance_Surface-Raster_tag0@@": "Egy folyamatos magasságfelületet meghatározó bemeneti raszter.",
	"@@Flow-Length_Direction-of-Measurement_tag0@@": "A mérés iránya az áramlás útvonala mentén.",
	"@@Flow-Length_Direction-of-Measurement_tag1@@": "<strong>Folyásirány</strong>--A lejtési távolságot számítja ki az áramlás útvonala mentén mindegyik cellától egy helyi erózióbázisig vagy a raszter élén lévő kifolyási pontig.",
	"@@Flow-Length_Direction-of-Measurement_tag3@@": "<strong>Folyásiránnyal ellentétes irány</strong>--A leghosszabb emelkedési távolságot számítja ki az áramlás útvonala mentén mindegyik cellától a vízelvezető választóvonal tetejéig.",
	"@@Flow-Length_Flow-Direction-Raster_tag0@@": "A bemeneti raszter, amely a kiáramlás irányát mutatja az egyes cellákból.",
	"@@Flow-Length_Flow-Direction-Raster_tag1@@": "Az áramlásiirány-raszter az <strong>Áramlási irány</strong> függvény futtatásával hozható létre.",
	"@@Flow-Length_Weight-Raster_tag0@@": "Opcionális bemeneti raszter az egyes cellák súlyozásához.",
	"@@Flow-Length_Weight-Raster_tag1@@": "Ha nincs megadva súlyraszter, mindegyik cella az alapértelmezett 1 súlyt kapja.",
	"@@Focal-Statistics_Ignore-NoData-in-calculations_tag0@@": "Azt jelzi, hogy a ${NoData} értékek figyelmen kívül lesznek-e hagyva a statisztikai számítás során.",
	"@@Focal-Statistics_Ignore-NoData-in-calculations_tag1@@": "<strong>Bejelölve</strong>--Ha a szomszédságban van ${NoData} érték, a ${NoData} érték figyelmen kívül lesz hagyva. A kimeneti érték meghatározásához csak azokat a szomszédos cellákat használja, amelyek adatértékekkel rendelkeznek. Ez az alapértelmezés.",
	"@@Focal-Statistics_Ignore-NoData-in-calculations_tag3@@": "<strong>Nincs bejelölve</strong>--Ha a szomszédos cellák közül bármelyik értéke ${NoData}, a feldolgozó cella kimenete ${NoData} lesz.",
	"@@Focal-Statistics_Neighborhood_tag0@@": "A statisztika számításához használt cellák körüli terület alakja.",
	"@@Focal-Statistics_Neighborhood_tag1@@": "Mindegyik szomszédság további paraméterekkel rendelkezik az alak meghatározására.",
	"@@Focal-Statistics_Neighborhood_tag2@@": "Körgyűrű, belső sugár, külső sugár",
	"@@Focal-Statistics_Neighborhood_tag3@@": "Kör, sugár",
	"@@Focal-Statistics_Neighborhood_tag4@@": "Szabálytalan, szélesség, magasság, környék értékei",
	"@@Focal-Statistics_Neighborhood_tag5@@": "Téglalap, szélesség, magasság",
	"@@Focal-Statistics_Neighborhood_tag6@@": "Ék, sugár, kiindulási szög, beérkezési szög",
	"@@Focal-Statistics_Neighborhood_tag7@@": "Súly, szélesség, magasság, környék értékei",
	"@@Focal-Statistics_Neighborhood_tag8@@": "A szabálytalan szomszédság lehetővé teszi szabálytalan alakú szomszédság megadását a feldolgozó cella körül. A Környék értékei tábla a szomszédságkernel alakjának megadására használható. Ha egy cella pozíciójának értéke 0, az azt jelzi, hogy a cella nem része a szomszédságnak, és az alkalmazás nem használja a feldolgozáshoz. Az 1 érték azt jelzi, hogy a hozzá tartozó cella (és érték) tagja a szomszédságnak.",
	"@@Focal-Statistics_Neighborhood_tag9@@": "A Súly szomszédságtípus a szabálytalan szomszédságtípushoz hasonló annyiban, hogy lehetővé teszi szabálytalan szomszédság meghatározását a feldolgozó cella körül, ezenfelül azonban lehetőséget ad a bemeneti értékek súlyozására is. A súlykernel értékei határozzák meg, hogy melyik cellapozíciók kerülnek be a szomszédságba, és milyen súlyokkal lesznek megszorozva. A 0 értéket használva zárhat ki egy cellát a feldolgozásból. Súlyként pozitív, negatív és tizedes számok is használhatók. A Súly szomszédságtípus csak az Átlag, a Szórás és az Összeg statisztikákat támogatja.",
	"@@Focal-Statistics_Percentile-Value_tag0@@": "Azt jelzi, hogy melyik percentilist kell kiszámítani, amikor a statisztika típusaként a <strong>Percentilis</strong> van bejelölve. Az alapértelmezett érték 90, vagyis a 90. percentilis.",
	"@@Focal-Statistics_Percentile-Value_tag3@@": "Az értékek 0 és 100 közé eshetnek. A 0. percentilis lényegében a Minimum statisztikával, míg a 100. percentilis a Maximum statisztikával egyezik meg, azzal a kivétellel, hogy az eredmény lebegőpontos érték lesz. Az 50-es érték lényegében ugyanazt az eredményt adja, mint a Medián statisztika.",
	"@@Focal-Statistics_Raster_tag0@@": "A kötelező bemeneti raszter.",
	"@@Focal-Statistics_Statistics-Type_tag0@@": "A kiszámítandó statisztikatípus.",
	"@@Focal-Statistics_Statistics-Type_tag1@@": "<strong>Többség</strong>--A szomszédságban lévő cellák többségét számítja ki (a leggyakrabban előforduló értéket).",
	"@@Focal-Statistics_Statistics-Type_tag3@@": "<strong>Maximum</strong>--A szomszédságban lévő cellák maximumát számítja ki (a legnagyobb értéket).",
	"@@Focal-Statistics_Statistics-Type_tag5@@": "<strong>Átlag</strong>--A szomszédságban lévő cellák átlagát számítja ki (az átlagértéket).",
	"@@Focal-Statistics_Statistics-Type_tag7@@": "<strong>Medián</strong>--A szomszédságban lévő cellák mediánját számítja ki.",
	"@@Focal-Statistics_Statistics-Type_tag9@@": "<strong>Minimum</strong>--A szomszédságban lévő cellák minimumát számítja ki (a legkisebb értéket).",
	"@@Focal-Statistics_Statistics-Type_tag11@@": "<strong>Kisebbség</strong>--A szomszédságban lévő cellák kisebbségét számítja ki (a legritkábban előforduló értéket).",
	"@@Focal-Statistics_Statistics-Type_tag13@@": "<strong>Percentilis</strong>--A szomszédságban lévő cellák percentilisét számítja ki. A kiszámítandó percentilis megadásához használja a <strong>Percentilis érték</strong> paramétert.",
	"@@Focal-Statistics_Statistics-Type_tag17@@": "<strong>Tartomány</strong>--A szomszédságban lévő cellák terjedelmét számítja ki (a legnagyobb és a legkisebb érték közötti különbséget).",
	"@@Focal-Statistics_Statistics-Type_tag19@@": "<strong>Szórás</strong>--A szomszédságban lévő cellák szórását számítja ki.",
	"@@Focal-Statistics_Statistics-Type_tag21@@": "<strong>Összeg</strong>--A szomszédságban lévő cellák összegét számítja ki (az összes érték összegét).",
	"@@Focal-Statistics_Statistics-Type_tag23@@": "<strong>Sokféleség</strong>--A szomszédságban lévő cellák sokféleségét számítja ki (az egyedi értékek számát).",
	"@@Focal-Statistics_Statistics-Type_tag25@@": "Ha a bemeneti raszter lebegőpontos, csak az Átlag, Maximum, Medián, Minimum, Percentilis, Terjedelem, Szórás és Összeg statisztikatípusok érhetők el.",
	"@@Focal-Statistics_Statistics-Type_tag26@@": "Az Átlag, Medián, Percentilis és Szórás statisztikák kimenete mindig lebegőpontos érték.",
	"@@Focal-Statistics_Statistics-Type_tag27@@": "Az alapértelmezett statisztikatípus az Átlag.",
	"@@Geometric_Constant-Z_tag0@@": "Egy állandó magasságot adhat meg a segítségével a Geometriai függvényhez.",
	"@@Geometric_DEM_tag0@@": "A DMM-et adhatja meg a segítségével a Geometriai függvényhez. Használhat mozaik-adathalmazban raszteres adathalmazként vagy DMM kimenettel rendelkező mozaik-adathalmazként tárolt DMM-et.",
	"@@Geometric_Geoid_tag0@@": "A legtöbb magasság-adathalmaz – így például az USGS NED vagy az ArcGIS Online World Elevation – ortometrikus magasságokat tartalmaz, ezért ki kell választani a geoid korrekciót, hogy kompatibilis legyen az ellipszoid magasságot igénylő műholdas RPC-kkel. Jelölje be a <strong>Geoid</strong> négyzetet, ha alkalmazni szeretné a geoid (EGM96) korrekciót a z értékekre, amennyiben a DMM-je nem ellipszoid magasságokat alkalmaz.",
	"@@Geometric_Method_tag0@@": "A magasságszámítási módszer kiválasztása a Geometriai függvényhez:",
	"@@Geometric_Method_tag1@@": "Állandó Z használata--állandó magasságot adhat meg a Geometriai függvény végrehajtásához.",
	"@@Geometric_Method_tag2@@": "DMM használata--DMM-et adhat meg a Geometriai függvény végrehajtásához.",
	"@@Geometric_Raster_tag0@@": "A bemeneti raszter.",
	"@@Geometric_Z-Factor_tag0@@": "A műholdas racionális polinomiális együtthatók (RPC-k) méretaránya azokhoz a magasság-adathalmazokhoz igazodik, amelyek függőleges mértékegysége méter. Ha Ön más függőleges mértékegységet használ a magassághoz, a <strong>Z tényező</strong> megadásával módosíthatja a méretarányt méterre. Ha például a magasságegységek lábban vannak megadva, akkor a 0,3048 értéket kell használni a magasságegységek átváltásához lábról méterre.",
	"@@Geometric_Z-Offset_tag0@@": "A DMM-ben lévő magasságértékhez adandó alapérték. Ezzel eltolhatók a nem tengerszinten kezdődő magasságértékek.",
	"@@Geometric_Tolerance_tag0@@": "Adja meg a geometriai függvény maximálisan tolerálható hibáját, pixelszámban megadva. A NITF (NCDRD) rasztertípus alapértelmezett értéke kettő.",
	"@@Grayscale_Raster_tag0@@": "A bemeneti raszter.",
	"@@Grayscale_Conversion-Parameters_tag0@@": "A bemeneti rasztert alkotó sávok súlyai.",
	"@@Greater-Than_Cellsize-Type_tag0@@": "Válassza ki, hogy melyik cellaméretet szeretné használni a kimeneti raszterben. Ha mindegyik bemeneti cellaméret azonos, mindegyik lehetőség ugyanarra az eredményre vezet.",
	"@@Greater-Than_Cellsize-Type_tag1@@": "Első--a bemeneti raszterek első cellaméretének használata.",
	"@@Greater-Than_Cellsize-Type_tag2@@": "Utolsó--a bemeneti raszterek utolsó cellaméretének használata.",
	"@@Greater-Than_Cellsize-Type_tag3@@": "Maximum--az összes bemeneti raszter legnagyobb cellaméretének használata. Ez az alapértelmezés.",
	"@@Greater-Than_Cellsize-Type_tag4@@": "Átlag--az összes bemeneti raszter átlagos cellaméretének használata.",
	"@@Greater-Than_Cellsize-Type_tag5@@": "Minimum--az összes bemeneti raszter legkisebb cellaméretének használata.",
	"@@Greater-Than_Extent-Type_tag0@@": "Válassza ki, hogy melyik kiterjedést szeretné használni a kimeneti raszterben:",
	"@@Greater-Than_Extent-Type_tag1@@": "Első--az első bemeneti raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Greater-Than_Extent-Type_tag2@@": "Metszet--az átfedésben lévő pixelek kiterjedésének használata a feldolgozási kiterjedés meghatározásához. Ez az alapértelmezés.",
	"@@Greater-Than_Extent-Type_tag3@@": "Utolsó--az utolsó bemeneti raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Greater-Than_Extent-Type_tag4@@": "Unió--az összes raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Greater-Than_Raster_tag0@@": "A vizsgálandó bemenet, amelyről meg kell állapítani, hogy nagyobb-e, mint a második bemenet.",
	"@@Greater-Than_Raster_tag1@@": "Ennél a paraméternél használható konstans érték bemenetként, amennyiben megadja a rasztert a másik paraméternél.",
	"@@Greater-Than_Raster2_tag0@@": "A bemenet, amelyhez képest meg kell állapítani, hogy az első bemenet nagyobb-e.",
	"@@Greater-Than_Raster2_tag1@@": "Ennél a paraméternél használható konstans érték bemenetként, amennyiben megadja a rasztert a másik paraméternél.",
	"@@Greater-Than-Equal_Cellsize-Type_tag0@@": "Válassza ki, hogy melyik cellaméretet szeretné használni a kimeneti raszterben. Ha mindegyik bemeneti cellaméret azonos, mindegyik lehetőség ugyanarra az eredményre vezet.",
	"@@Greater-Than-Equal_Cellsize-Type_tag1@@": "Első--a bemeneti raszterek első cellaméretének használata.",
	"@@Greater-Than-Equal_Cellsize-Type_tag2@@": "Utolsó--a bemeneti raszterek utolsó cellaméretének használata.",
	"@@Greater-Than-Equal_Cellsize-Type_tag3@@": "Maximum--az összes bemeneti raszter legnagyobb cellaméretének használata. Ez az alapértelmezés.",
	"@@Greater-Than-Equal_Cellsize-Type_tag4@@": "Átlag--az összes bemeneti raszter átlagos cellaméretének használata.",
	"@@Greater-Than-Equal_Cellsize-Type_tag5@@": "Minimum--az összes bemeneti raszter legkisebb cellaméretének használata.",
	"@@Greater-Than-Equal_Extent-Type_tag0@@": "Válassza ki, hogy melyik kiterjedést szeretné használni a kimeneti raszterben:",
	"@@Greater-Than-Equal_Extent-Type_tag1@@": "Első--az első bemeneti raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Greater-Than-Equal_Extent-Type_tag2@@": "Metszet--az átfedésben lévő pixelek kiterjedésének használata a feldolgozási kiterjedés meghatározásához. Ez az alapértelmezés.",
	"@@Greater-Than-Equal_Extent-Type_tag3@@": "Utolsó--az utolsó bemeneti raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Greater-Than-Equal_Extent-Type_tag4@@": "Unió--az összes raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Greater-Than-Equal_Raster_tag0@@": "A vizsgálandó bemenet, amelyről meg kell állapítani, hogy nagyobb-e vagy egyenlő, mint a második bemenet.",
	"@@Greater-Than-Equal_Raster_tag1@@": "Ennél a paraméternél használható konstans érték bemenetként, amennyiben megadja a rasztert a másik paraméternél.",
	"@@Greater-Than-Equal_Raster2_tag0@@": "A bemenet, amelyhez képest meg kell állapítani, hogy az első bemenet nagyobb-e vagy egyenlő.",
	"@@Greater-Than-Equal_Raster2_tag1@@": "Ennél a paraméternél használható konstans érték bemenetként, amennyiben megadja a rasztert a másik paraméternél.",
	"@@Heat-Index_Heat-Index-Units_tag0@@": "A kimeneti raszterhez társított mértékegység. A rendelkezésre álló kimeneti mértékegységek: Celsius, Fahrenheit és Kelvin.",
	"@@Heat-Index_Relative-Humidity-Raster_tag0@@": "Egysávos raszter, amelyben a pixelértékek a relatív páratartalmat jelölik 0 és 100 közötti százalékos értékként.",
	"@@Heat-Index_Temperature-Raster_tag0@@": "Egysávos raszter, amelyben a pixelértékek a környezeti levegő-hőmérsékletet jelölik.",
	"@@Heat-Index_Temperature-Units_tag0@@": "A bemeneti hőmérsékletraszterhez társított mértékegység. A rendelkezésre álló bemeneti mértékegységek: Celsius, Fahrenheit és Kelvin.",
	"@@Hillshade_Altitude_tag0@@": "A magasság a nap tengerszint feletti magasságának megfelelő szög a horizont felett, amelynek értéke 0 és 90 fok között lehet. A 0 fok azt jelzi, hogy a nap a horizonton van, vagyis ugyanazon a vízszintes síkon, mint a vonatkoztatási rendszer. A 90 fok azt jelzi, hogy a nap közvetlenül a fejünk fölött van.",
	"@@Hillshade_Altitude_tag1@@": "Ez a paraméter csak akkor érvényes, amikor a <strong>Domborzatárnyékolás típusa</strong> a <strong>Hagyományos</strong>. Az alapértelmezett érték 45 fok a horizont felett.",
	"@@Hillshade_Azimuth_tag0@@": "Az azimut a nap relatív helyzete a horizont mentén (fokokban megadva). Ezt a pozíciót a nap szöge jelzi az óra járásával egyező irányban mérve, észak felől. A 0 fokos azimut északot jelez, kelet 90 fok, dél 180 fok, nyugat pedig 270 fok.",
	"@@Hillshade_Azimuth_tag1@@": "Ez a paraméter csak akkor érvényes, amikor a <strong>Domborzatárnyékolás típusa</strong> a <strong>Hagyományos</strong>. Az alapértelmezett érték 315 fok, ami északnyugatnak felel meg.",
	"@@Hillshade_Disable-default-edge-pixel-interpolation_tag0@@": "Ezt a beállítást használva elkerülhetők az újra-mintavételezésből adódóan előforduló műtárgyak egy raszter élei mentén. A raszter éle mentén vagy a NoData pixelek mellett található kimeneti pixelek NoData értékkel lesznek feltöltve, ezért ajánlott ezt a paramétert csak átfedésben lévő magassági mozaik-adathalmazokkal használni. Amikor az átfedésben lévő pixelek rendelkezésre állnak, a NoData értékkel rendelkező területeken az üres pixelek helyett megjelennek az átfedésben lévő pixelértékek.",
	"@@Hillshade_Disable-default-edge-pixel-interpolation_tag1@@": "Nincs bejelölve--az alkalmazás egységesen bilineáris újra-mintavételezést alkalmaz a domborzatárnyékolás újra-mintavételezéséhez. Akkor használja ezt a lehetőséget, amikor a magasságraszter adatait tartalmazó mozaik-adathalmaz tökéletesen illeszkedő végekkel rendelkezik. Ez az alapértelmezés.",
	"@@Hillshade_Disable-default-edge-pixel-interpolation_tag2@@": "Bejelölve--az alkalmazás bilineáris újra-mintavételezést használ a domborzatárnyékoláson belül, kivéve a raszterek élei mentén és a NoData pixelek mellett. Ezeket a pixeleket NoData értékkel tölti fel, és az átfedő pixelértékeket jeleníti meg, ezzel csökkenti azt az egyébként előforduló hatást, amely miatt az élek élesek. Akkor használja ezt a lehetőséget, amikor a magasságraszter adatait tartalmazó mozaik-adathalmaz átfedésben lévő elemekből vagy csempékből áll.",
	"@@Hillshade_Disable-default-edge-pixel-interpolation_tag3@@": "A függvény által visszaadott eredmény az adatoktól függő lehet. Ha megfigyeli a csempe határán lévő hibákat a kimenetben, válassza a jelölőnégyzet alternatív állapotát.",
	"@@Hillshade_Hillshade-Type_tag0@@": "A domborzatárnyékolás megvilágítási forrását szabályozza:",
	"@@Hillshade_Hillshade-Type_tag1@@": "Hagyományos--egyetlen megvilágítási irányból számítja a domborzatárnyékolást. Ez az alapértelmezés. Beállíthatja az <strong>Azimut</strong> és a <strong>Magasság</strong> értékét a fényforrás helyének szabályozásához.",
	"@@Hillshade_Hillshade-Type_tag6@@": "Többirányú--több forrásból egyesíti a fényt a felszín szebb megjelenítéséhez.",
	"@@Hillshade_Pixel-Size-Factor_tag0@@": "A pixelméret-tényező a méretarány változásait veszi figyelembe, miközben a megtekintő nagyítja és kicsinyíti a térkép-megjelenítést. A <strong>Z tényező</strong> változásának ütemét módosítja.",
	"@@Hillshade_Pixel-Size-Factor_tag3@@": "Ez a paraméter csak akkor érvényes amikor az <strong>Átméretezés</strong> típusa az <strong>Igazított</strong>. Az alapértelmezett érték 0,024.",
	"@@Hillshade_Pixel-Size-Power_tag0@@": "A pixelméret-erősség a magasság változásait (vagy a méretarányt) veszi figyelembe, miközben a megtekintő nagyítja és kicsinyíti a térkép-megjelenítést. Ez nem más, mint a pixelméret kifejezésen alkalmazott hatványkitevő abban az egyenletben, amely szabályozza a <strong>Z tényező</strong> változásának ütemét a domborzat jelentős veszteségének elkerülése érdekében.",
	"@@Hillshade_Pixel-Size-Power_tag3@@": "Ez a paraméter csak akkor érvényes amikor az <strong>Átméretezés</strong> típusa az <strong>Igazított</strong>. Az alapértelmezett érték 0,664.",
	"@@Hillshade_Raster_tag0@@": "A bemeneti magasság-adathalmaz.",
	"@@Hillshade_Scaling_tag0@@": "Az árnyékolt eredmény méretarányának dinamikus módosítása a z tényező kétféle módosításával történhet:",
	"@@Hillshade_Scaling_tag1@@": "Igazított--Nemlineáris kiigazítást alkalmaz az alapértelmezett <strong>Pixelméret-erősség</strong> és <strong>Pixelméret-tényeyző</strong> értékek felhasználásával, ami a magasságváltozás (méretarány) széles választékához megfelelő, amikor a megtekintő nagyít és kicsinyít. Az egész világot tartalmazó adathalmaz használatakor az <strong>Igazított</strong> paraméterbeállítás használata javasolt.",
	"@@Hillshade_Scaling_tag8@@": "Nincs--nincs átméretezés. Ez a helyi területet lefedő, szimpla raszteres adathalmazoknál ideális. Az egész világot lefedő adathalmazoknál, ahol a magasságváltozás jelentős és több méretaránnyal rendelkező térképek vannak, nem ajánlott a használata, mert kis méretaránynál alig változó felszíni domborzatot eredményez.",
	"@@Hillshade_Z-Factor_tag0@@": "A z tényező egy arányszám, amelyet a magasságértékek átváltásához használunk két célból:",
	"@@Hillshade_Z-Factor_tag1@@": "A magasság mértékegységének (pl. méter vagy láb) átváltása az adathalmaz vízszintes koordinátáinak mértékegységére, amely lehet láb, méter vagy fok.",
	"@@Hillshade_Z-Factor_tag2@@": "Függőleges torzítás elérése a vizuális hatás érdekében.",
	"@@Int_Cellsize-Type_tag0@@": "Válassza ki, hogy melyik cellaméretet szeretné használni a kimeneti raszterben. Ha mindegyik bemeneti cellaméret azonos, mindegyik lehetőség ugyanarra az eredményre vezet.",
	"@@Int_Cellsize-Type_tag1@@": "Első--a bemeneti raszterek első cellaméretének használata.",
	"@@Int_Cellsize-Type_tag2@@": "Utolsó--a bemeneti raszterek utolsó cellaméretének használata.",
	"@@Int_Cellsize-Type_tag3@@": "Maximum--az összes bemeneti raszter legnagyobb cellaméretének használata. Ez az alapértelmezés.",
	"@@Int_Cellsize-Type_tag4@@": "Átlag--az összes bemeneti raszter átlagos cellaméretének használata.",
	"@@Int_Cellsize-Type_tag5@@": "Minimum--az összes bemeneti raszter legkisebb cellaméretének használata.",
	"@@Int_Extent-Type_tag0@@": "Válassza ki, hogy melyik kiterjedést szeretné használni a kimeneti raszterben:",
	"@@Int_Extent-Type_tag1@@": "Első--az első bemeneti raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Int_Extent-Type_tag2@@": "Metszet--az átfedésben lévő pixelek kiterjedésének használata a feldolgozási kiterjedés meghatározásához. Ez az alapértelmezés.",
	"@@Int_Extent-Type_tag3@@": "Utolsó--az utolsó bemeneti raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Int_Extent-Type_tag4@@": "Unió--az összes raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Int_Raster_tag0@@": "Az integerré alakítandó bemeneti raszter.",
	"@@Interpolate-Irregular-Data_Cellsize_tag0@@": "A kimeneti raszter cellaméretét automatikusan észleli, de módosítható. Habár a cellaméret módosítható, a raszteres adathalmaz kiterjedése nem változik.",
	"@@Interpolate-Irregular-Data_Input-Samples_tag0@@": "A bemeneti pontadatok.",
	"@@Interpolate-Irregular-Data_Interpolation-Method_tag0@@": "Ehhez a függvényhez négyfajta újra-mintavételezési módszer létezik:",
	"@@Interpolate-Irregular-Data_Interpolation-Method_tag1@@": "<strong>Súlyozott inverz távolság</strong>--Mintapontok vagy -cellák halmazának lineárisan súlyozott kombinációját használva határozza meg a cellaértékeket. A súly az ismert pontoktól vagy celláktól mért távolság inverzének függvénye.",
	"@@Interpolate-Irregular-Data_Interpolation-Method_tag3@@": "<strong>Lineáris Tinning</strong>--Háromszögű, szabálytalan hálózatot használ a szabálytalan raszter egyes celláinak középpontjából kiindulva egy olyan felszín interpolálással történő meghatározásához, amelyet aztán szabályos raszterré alakít.",
	"@@Interpolate-Irregular-Data_Interpolation-Method_tag5@@": "<strong>Természetes szomszéd</strong>--Megkeresi adott bemeneti minták egy lekérdezési ponthoz legközelebb eső részhalmazát, és ezekhez arányos területek alapján súlyokat rendel az érték interpolálással történő meghatározásához.",
	"@@Interpolate-Irregular-Data_Interpolation-Method_tag7@@": "<strong>Legközelebbi szomszéd</strong>--A legközelebbi pixelt használva számítja ki a pixel értékét. Ha nem létezik forráspixel, nem hozható létre új pixel a kimenetben. Ez az alapértelmezés.",
	"@@Interpolate-Irregular-Data_Search-Radius_tag0@@": "A kiválasztott újra-mintavételezési módszerben használandó pixelek számát adja meg. Az alapértelmezett érték ${3} pixel.",
	"@@Interpolate-Irregular-Data_Value-Field_tag0@@": "Ha pontszerű vektoroselem-osztályt választ bemenetként, akkor az attribútumtáblában a mezőt a pontok értékével kell azonosítania.",
	"@@Is-Null_Cellsize-Type_tag0@@": "Válassza ki, hogy melyik cellaméretet szeretné használni a kimeneti raszterben. Ha mindegyik bemeneti cellaméret azonos, mindegyik lehetőség ugyanarra az eredményre vezet.",
	"@@Is-Null_Cellsize-Type_tag1@@": "Első--a bemeneti raszterek első cellaméretének használata.",
	"@@Is-Null_Cellsize-Type_tag2@@": "Utolsó--a bemeneti raszterek utolsó cellaméretének használata.",
	"@@Is-Null_Cellsize-Type_tag3@@": "Maximum--az összes bemeneti raszter legnagyobb cellaméretének használata. Ez az alapértelmezés.",
	"@@Is-Null_Cellsize-Type_tag4@@": "Átlag--az összes bemeneti raszter átlagos cellaméretének használata.",
	"@@Is-Null_Cellsize-Type_tag5@@": "Minimum--az összes bemeneti raszter legkisebb cellaméretének használata.",
	"@@Is-Null_Extent-Type_tag0@@": "Válassza ki, hogy melyik kiterjedést szeretné használni a kimeneti raszterben:",
	"@@Is-Null_Extent-Type_tag1@@": "Első--az első bemeneti raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Is-Null_Extent-Type_tag2@@": "Metszet--az átfedésben lévő pixelek kiterjedésének használata a feldolgozási kiterjedés meghatározásához. Ez az alapértelmezés.",
	"@@Is-Null_Extent-Type_tag3@@": "Utolsó--az utolsó bemeneti raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Is-Null_Extent-Type_tag4@@": "Unió--az összes raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Is-Null_Raster_tag0@@": "A ${NoData} (null) értékkel rendelkező cellák azonosításához vizsgálandó bemeneti raszter.",
	"@@Is-Null_Raster_tag1@@": "A bemenet lehet integer vagy lebegőpontos típusú.",
	"@@Key-Metadata_Band-Names_tag0@@": "Ez egy raszter sávjaink felülbírálására használható. A frissített sávneveket tartalmazó, vesszővel tagolt karakterlánc.",
	"@@Key-Metadata_Band-Names_tag1@@": "Ez a paraméter opcionális.",
	"@@Key-Metadata_Metadata-JSON_tag0@@": "A kimenő raszterbe illesztendő fő metaadatok, kulcs–érték párok gyűjteményét jelentő JSON-karakterláncként leírva. A következőkben példát mutatunk arra, hogy milyen JSON-karakterlánc használható bemenetként a függvényhez. A paraméter összes bemenetének ugyanazt a formátumot kell követnie.",
	"@@Key-Metadata_Metadata-JSON_tag1@@": "A fő metaadatokat tartalmazó JSON-karakterlánc",
	"@@Key-Metadata_Metadata-JSON_tag2@@": "{ \"CloudCover\": 4, \"BandProperties\":[ { \"BandName\": \"Blue\", \"WavelengthMin\": 445, \"WavelengthMax\": 516 }, { \"BandName\": \"Green\", \"WavelengthMin\": 506, \"WavelengthMax\": 595 }, ]}",
	"@@Key-Metadata_Property-Name_tag0@@": "A felülbírálandó, adathalmazszintű fő tulajdonság neve.",
	"@@Key-Metadata_Raster_tag0@@": "A beszúrni vagy felülírni kívánt fő metaadatokat tartalmazó raszteres vagy mozaik-adathalmaz.",
	"@@Key-Metadata_Value_tag0@@": "A beállítani kívánt adathalmazszintű fő tulajdonság felülbíráló értéke.",
	"@@Least-Cost-Path_Accumulative-Cost-Resistance-Rate_tag0@@": "Ez a paraméter a költségek csökkentésére irányuló erőfeszítések növekedését szimulálja a kumulatív költségek növekedésével. Az utazó fáradását modellezi. Egy cella elérésének növekvő kumulatív költségét szorozza meg a rezisztenciarátával, és adja hozzá a következő cellába való mozgás költségéhez.",
	"@@Least-Cost-Path_Accumulative-Cost-Resistance-Rate_tag1@@": "Ez egy kamatoskamat-számítási képlet módosított változata, amelyet egy cellán való áthaladás látható költségének kiszámítására használunk. A rezisztenciaráta értékének növekedésével nő a később meglátogatott cellák költsége. Minél nagyobb a rezisztenciaráta, annál nagyobb a következő cella elérésének költsége, amely minden egyes következő mozgással összeadódik. Mivel a rezisztenciaráta egy kamatos kamathoz hasonló, és a kumulatív költségértékek nagyon nagyok, a kumulatív költségértékektől függően kis rezisztenciaráta használata javasolt (pl. 0,005 vagy még kisebb).",
	"@@Least-Cost-Path_Accumulative-Cost-Resistance-Rate_tag2@@": "Az értéknek nagyobbnak kell lennie nullánál. Az alapértelmezett kapacitás a kimeneti raszter élénél van.",
	"@@Least-Cost-Path_Capacity_tag0@@": "Az utazó költségkapacitását határozza meg egy forrásnál. A költségszámítás minden egyes forrásnál addig folytatódik, amíg el nem éri a meghatározott kapacitást.",
	"@@Least-Cost-Path_Capacity_tag1@@": "Az értéknek nagyobbnak kell lennie nullánál. Az alapértelmezett kapacitás a kimeneti raszter élénél van.",
	"@@Least-Cost-Path_Cost-Raster_tag0@@": "Az egyes cellákon történő, síkrajzi értelemben vett áthaladás költségét vagy impedanciáját meghatározó, kötelező bemeneti raszter. Az egyes cellahelyeken szereplő értékek az azon történő áthaladás egységnyi távolságra eső költségét jelentik. Az eszköz a cellán történő áthaladás teljes költségének kiszámításához megszorozza az egyes cellahelyek értékét a cellafelbontással, és átlós mozgás esetén kompenzálja is az értéket.",
	"@@Least-Cost-Path_Cost-Raster_tag1@@": "A <strong>Költségraszter</strong> értékei lehetnek integer- vagy lebegőpontos értékek, de nem lehetnek negatívak vagy nullák.",
	"@@Least-Cost-Path_Destination-Field_tag0@@": "A célhelyszínek értékeinek beolvasásához használt mező.",
	"@@Least-Cost-Path_Destination-Raster_tag0@@": "Egy kötelező bemeneti raszter, amely azonosítja a pixeleket, amelyekből meghatározásra kerül a legkevésbé költséges útvonal a legkisebb költséggel járó forrásig. Ez a bemenet érvényes értékekkel rendelkező pixelekből áll, míg a többi pixelhez a ${NoData} értéket kell rendelni. A 0 értékek érvényesek.",
	"@@Least-Cost-Path_Maximum-Distance_tag0@@": "A küszöbérték, amelyet a kumulatív költségértékek nem haladhatnak meg. Ha egy kumulatív költségtávolság meghaladja ezt az értéket, a cellahely kimeneti értéke ${NoData} lesz. A legnagyobb távolság határozza meg azt a kiterjedést, amelyre az eszköz kiszámítja a kumulatív költségtávolságokat. Az alapértelmezett távolság a kimeneti raszter kiterjedésénél van.",
	"@@Least-Cost-Path_Multiplier-to-Apply-to-Costs_tag0@@": "Ez a paraméter lehetővé teszi az utazás módjának vagy a nagyságnak a szabályozását egy forrásnál. Minél nagyobb a szorzó, annál nagyobb az egyes cellákon való áthaladás költsége.",
	"@@Least-Cost-Path_Multiplier-to-Apply-to-Costs_tag1@@": "Az értékeknek nullánál nagyobbaknak kell lenniük. Az alapértelmezett érték 1.",
	"@@Least-Cost-Path_Path-Type_tag0@@": "Kulcsszó, amely meghatározza a bemeneti célállomásadatok között szereplő értékek és zónák értelmezésének módját a költségútvonal számításakor:",
	"@@Least-Cost-Path_Path-Type_tag1@@": "<strong>Legjobb egyedülálló</strong>--A bemeneti célállomásadatok között szereplő összes pixel esetén a legolcsóbb útvonalat a forráscellákba tartó legolcsóbb útvonalak minimumával rendelkező pixelből származtatja.",
	"@@Least-Cost-Path_Path-Type_tag3@@": "<strong>Minden cella</strong>--A bemeneti célállomásadatok között szereplő, érvényes értékekkel rendelkező összes pixel esetén meghatározza a legolcsóbb útvonalat, és menti a kimeneti raszterre. A bemeneti célállomásadatok között szereplő cellák mindegyikét külön kezeli, és mindegyik kiindulócellához meghatározza a legolcsóbb útvonalat.",
	"@@Least-Cost-Path_Path-Type_tag5@@": "<strong>Minden zóna</strong>--A bemeneti célállomásadatok között szereplő összes zóna esetén meghatározza a legolcsóbb útvonalat, és menti a kimeneti raszterre. Az egyes zónák legolcsóbb útvonala a zónában a legkisebb költségtávolság-súlyozással rendelkező pixelnél kezdődik.",
	"@@Least-Cost-Path_Source-Raster_tag0@@": "Ez a kötelező bemeneti raszter azokat a cellákat vagy helyeket határozza meg, amelyekből az eszköz kiszámítja a legkisebb kumulatív költségtávolságot az egyes kimeneti cellahelyekhez.",
	"@@Least-Cost-Path_Start-Cost_tag0@@": "A kiinduló költség, ahonnan kezdeni kell a költségszámítást. Ez a paraméter lehetővé teszi a forráshoz kapcsolódó fix költség megadását. A költségszámítási algoritmus ekkor nem 0-tól, hanem a megadott értéktől kezdi a számítást.",
	"@@Least-Cost-Path_Start-Cost_tag1@@": "Az érték nem lehet kisebb nullánál. Az alapértelmezett érték 0.",
	"@@Least-Cost-Path_Travel-Direction_tag0@@": "Az utazó irányát határozza meg a forrás rezisztenciaráta és a forrás kiinduló költség alkalmazásakor.",
	"@@Least-Cost-Path_Travel-Direction_tag1@@": "<strong>Forrástól</strong>--A forrás rezisztenciarátát és a forrás kiinduló költséget a bemeneti forrástól indulva és a nem forráscellák felé haladva alkalmazza. Ez az alapértelmezés.",
	"@@Least-Cost-Path_Travel-Direction_tag3@@": "<strong>Forráshoz</strong>--A forrás rezisztenciarátát és a forrás kiinduló költséget az egyes nem forráscelláktól indulva és a bemeneti forrás felé haladva alkalmazza.",
	"@@Least-Cost-Path_Travel-Direction_tag5@@": "Adja meg vagy a <strong>Forrástól</strong> vagy pedig a <strong>Forráshoz</strong> kulcsszavát, amelyeket a rendszer valamennyi forrásra alkalmazni fog, vagy pedig adjon meg olyan mezőt a <strong>Forrástaszter</strong> beállításban, amely az egyes forrásokhoz tartozó utazási irányokat jelölő kulcsszavakat tartalmazza. A mezőnek tartalmaznia kell a következő karakterláncok egyikét: ${FROM_SOURCE} vagy ${TO_SOURCE}.",
	"@@Less-Than_Cellsize-Type_tag0@@": "Válassza ki, hogy melyik cellaméretet szeretné használni a kimeneti raszterben. Ha mindegyik bemeneti cellaméret azonos, mindegyik lehetőség ugyanarra az eredményre vezet.",
	"@@Less-Than_Cellsize-Type_tag1@@": "Első--a bemeneti raszterek első cellaméretének használata.",
	"@@Less-Than_Cellsize-Type_tag2@@": "Utolsó--a bemeneti raszterek utolsó cellaméretének használata.",
	"@@Less-Than_Cellsize-Type_tag3@@": "Maximum--az összes bemeneti raszter legnagyobb cellaméretének használata. Ez az alapértelmezés.",
	"@@Less-Than_Cellsize-Type_tag4@@": "Átlag--az összes bemeneti raszter átlagos cellaméretének használata.",
	"@@Less-Than_Cellsize-Type_tag5@@": "Minimum--az összes bemeneti raszter legkisebb cellaméretének használata.",
	"@@Less-Than_Extent-Type_tag0@@": "Válassza ki, hogy melyik kiterjedést szeretné használni a kimeneti raszterben:",
	"@@Less-Than_Extent-Type_tag1@@": "Első--az első bemeneti raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Less-Than_Extent-Type_tag2@@": "Metszet--az átfedésben lévő pixelek kiterjedésének használata a feldolgozási kiterjedés meghatározásához. Ez az alapértelmezés.",
	"@@Less-Than_Extent-Type_tag3@@": "Utolsó--az utolsó bemeneti raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Less-Than_Extent-Type_tag4@@": "Unió--az összes raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Less-Than_Raster_tag0@@": "A vizsgálandó bemenet, amelyről meg kell állapítani, hogy kisebb-e, mint a második bemenet.",
	"@@Less-Than_Raster_tag1@@": "Ennél a paraméternél használható konstans érték bemenetként, amennyiben megadja a rasztert a másik paraméternél.",
	"@@Less-Than_Raster2_tag0@@": "A bemenet, amelyhez képest meg kell állapítani, hogy az első bemenet kisebb-e.",
	"@@Less-Than_Raster2_tag1@@": "Ennél a paraméternél használható konstans érték bemenetként, amennyiben megadja a rasztert a másik paraméternél.",
	"@@Less-Than-Equal_Cellsize-Type_tag0@@": "Válassza ki, hogy melyik cellaméretet szeretné használni a kimeneti raszterben. Ha mindegyik bemeneti cellaméret azonos, mindegyik lehetőség ugyanarra az eredményre vezet.",
	"@@Less-Than-Equal_Cellsize-Type_tag1@@": "Első--a bemeneti raszterek első cellaméretének használata.",
	"@@Less-Than-Equal_Cellsize-Type_tag2@@": "Utolsó--a bemeneti raszterek utolsó cellaméretének használata.",
	"@@Less-Than-Equal_Cellsize-Type_tag3@@": "Maximum--az összes bemeneti raszter legnagyobb cellaméretének használata. Ez az alapértelmezés.",
	"@@Less-Than-Equal_Cellsize-Type_tag4@@": "Átlag--az összes bemeneti raszter átlagos cellaméretének használata.",
	"@@Less-Than-Equal_Cellsize-Type_tag5@@": "Minimum--az összes bemeneti raszter legkisebb cellaméretének használata.",
	"@@Less-Than-Equal_Extent-Type_tag0@@": "Válassza ki, hogy melyik kiterjedést szeretné használni a kimeneti raszterben:",
	"@@Less-Than-Equal_Extent-Type_tag1@@": "Első--az első bemeneti raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Less-Than-Equal_Extent-Type_tag2@@": "Metszet--az átfedésben lévő pixelek kiterjedésének használata a feldolgozási kiterjedés meghatározásához. Ez az alapértelmezés.",
	"@@Less-Than-Equal_Extent-Type_tag3@@": "Utolsó--az utolsó bemeneti raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Less-Than-Equal_Extent-Type_tag4@@": "Unió--az összes raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Less-Than-Equal_Raster_tag0@@": "A vizsgálandó bemenet, amelyről meg kell állapítani, hogy kisebb-e vagy egyenlő, mint a második bemenet.",
	"@@Less-Than-Equal_Raster_tag1@@": "Ennél a paraméternél használható konstans érték bemenetként, amennyiben megadja a rasztert a másik paraméternél.",
	"@@Less-Than-Equal_Raster2_tag0@@": "A bemenet, amelyhez képest meg kell állapítani, hogy az első bemenet kisebb-e vagy egyenlő.",
	"@@Less-Than-Equal_Raster2_tag1@@": "Ennél a paraméternél használható konstans érték bemenetként, amennyiben megadja a rasztert a másik paraméternél.",
	"@@Ln_Cellsize-Type_tag0@@": "Válassza ki, hogy melyik cellaméretet szeretné használni a kimeneti raszterben. Ha mindegyik bemeneti cellaméret azonos, mindegyik lehetőség ugyanarra az eredményre vezet.",
	"@@Ln_Cellsize-Type_tag1@@": "Első--a bemeneti raszterek első cellaméretének használata.",
	"@@Ln_Cellsize-Type_tag2@@": "Utolsó--a bemeneti raszterek utolsó cellaméretének használata.",
	"@@Ln_Cellsize-Type_tag3@@": "Maximum--az összes bemeneti raszter legnagyobb cellaméretének használata. Ez az alapértelmezés.",
	"@@Ln_Cellsize-Type_tag4@@": "Átlag--az összes bemeneti raszter átlagos cellaméretének használata.",
	"@@Ln_Cellsize-Type_tag5@@": "Minimum--az összes bemeneti raszter legkisebb cellaméretének használata.",
	"@@Ln_Extent-Type_tag0@@": "Válassza ki, hogy melyik kiterjedést szeretné használni a kimeneti raszterben:",
	"@@Ln_Extent-Type_tag1@@": "Első--az első bemeneti raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Ln_Extent-Type_tag2@@": "Metszet--az átfedésben lévő pixelek kiterjedésének használata a feldolgozási kiterjedés meghatározásához. Ez az alapértelmezés.",
	"@@Ln_Extent-Type_tag3@@": "Utolsó--az utolsó bemeneti raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Ln_Extent-Type_tag4@@": "Unió--az összes raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Ln_Raster_tag0@@": "A bemeneti értékek, amelyekhez meg kell keresni a természetes alapú logaritmust (Ln).",
	"@@Log10_Cellsize-Type_tag0@@": "Válassza ki, hogy melyik cellaméretet szeretné használni a kimeneti raszterben. Ha mindegyik bemeneti cellaméret azonos, mindegyik lehetőség ugyanarra az eredményre vezet.",
	"@@Log10_Cellsize-Type_tag1@@": "Első--a bemeneti raszterek első cellaméretének használata.",
	"@@Log10_Cellsize-Type_tag2@@": "Utolsó--a bemeneti raszterek utolsó cellaméretének használata.",
	"@@Log10_Cellsize-Type_tag3@@": "Maximum--az összes bemeneti raszter legnagyobb cellaméretének használata. Ez az alapértelmezés.",
	"@@Log10_Cellsize-Type_tag4@@": "Átlag--az összes bemeneti raszter átlagos cellaméretének használata.",
	"@@Log10_Cellsize-Type_tag5@@": "Minimum--az összes bemeneti raszter legkisebb cellaméretének használata.",
	"@@Log10_Extent-Type_tag0@@": "Válassza ki, hogy melyik kiterjedést szeretné használni a kimeneti raszterben:",
	"@@Log10_Extent-Type_tag1@@": "Első--az első bemeneti raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Log10_Extent-Type_tag2@@": "Metszet--az átfedésben lévő pixelek kiterjedésének használata a feldolgozási kiterjedés meghatározásához. Ez az alapértelmezés.",
	"@@Log10_Extent-Type_tag3@@": "Utolsó--az utolsó bemeneti raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Log10_Extent-Type_tag4@@": "Unió--az összes raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Log10_Raster_tag0@@": "A bemeneti értékek, amelyekhez meg kell keresni a 10-es alapú logaritmust.",
	"@@Log2_Cellsize-Type_tag0@@": "Válassza ki, hogy melyik cellaméretet szeretné használni a kimeneti raszterben. Ha mindegyik bemeneti cellaméret azonos, mindegyik lehetőség ugyanarra az eredményre vezet.",
	"@@Log2_Cellsize-Type_tag1@@": "Első--a bemeneti raszterek első cellaméretének használata.",
	"@@Log2_Cellsize-Type_tag2@@": "Utolsó--a bemeneti raszterek utolsó cellaméretének használata.",
	"@@Log2_Cellsize-Type_tag3@@": "Maximum--az összes bemeneti raszter legnagyobb cellaméretének használata. Ez az alapértelmezés.",
	"@@Log2_Cellsize-Type_tag4@@": "Átlag--az összes bemeneti raszter átlagos cellaméretének használata.",
	"@@Log2_Cellsize-Type_tag5@@": "Minimum--az összes bemeneti raszter legkisebb cellaméretének használata.",
	"@@Log2_Extent-Type_tag0@@": "Válassza ki, hogy melyik kiterjedést szeretné használni a kimeneti raszterben:",
	"@@Log2_Extent-Type_tag1@@": "Első--az első bemeneti raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Log2_Extent-Type_tag2@@": "Metszet--az átfedésben lévő pixelek kiterjedésének használata a feldolgozási kiterjedés meghatározásához. Ez az alapértelmezés.",
	"@@Log2_Extent-Type_tag3@@": "Utolsó--az utolsó bemeneti raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Log2_Extent-Type_tag4@@": "Unió--az összes raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Log2_Raster_tag0@@": "A bemeneti értékek, amelyekhez meg kell keresni a 2-es alapú logaritmust.",
	"@@Lookup_Field_tag0@@": "Az új raszter kívánt értékeit tartalmazó mező.",
	"@@Lookup_Field_tag1@@": "Numerikus típusnak kell lennie.",
	"@@Lookup_Raster_tag0@@": "Azt a mezőt tartalmazó bemeneti raszter, amelyből létre kell hozni egy új rasztert.",
	"@@Lookup_Raster_tag1@@": "Lehet integer vagy lebegőpontos típusú.",
	"@@Mask_Included-Ranges_tag0@@": "A benne szereplő terjedelmek minden egyes sávnál meghatározhatók a minimum és maximum értékek megadásával. A terjedelmen kívül eső értékeknél ${NoData} értéket ad vissza. Akkor szerepel benne egy pixel, ha a pixel értéke a megadott terjedelmek bármelyikébe beleesik. Vagyis, ha az 1. sáv terjedelme 5–10 és a 2. sáv terjedelme 15–20, és az 1. sáv pixelértéke 8, akkor a pixel nem lesz maszkolva.",
	"@@Mask_NoData-Interpretation_tag0@@": "Azt jelzi, hogy a <strong>${NoData} értékek</strong> milyen hatással lesznek a kimeneti képre.",
	"@@Mask_NoData-Interpretation_tag3@@": "A következő két lehetőség közül választhat:",
	"@@Mask_NoData-Interpretation_tag4@@": "<strong>Összes egyezés</strong>--Az egyes hullámhossztartományokhoz megadott ${NoData} értékeknek ugyanabban a pixelben kell előfordulniuk ahhoz, hogy a kimeneti kép tartalmazza a ${NoData} pixelt.",
	"@@Mask_NoData-Interpretation_tag6@@": "<strong>Bármely egyezés</strong>--Ha a megadott ${NoData} érték egy meghatározott hullámhossztartományban található pixelnél fordul elő, akkor az a pixel a kimeneti képen ${NoData} értékű lesz. Ez az alapértelmezés.",
	"@@Mask_NoData-Values_tag0@@": "A NoData értékek mindegyik sávhoz megadhatók. Egynél több értéket is megadhat szóközzel tagolt lista beírásával.",
	"@@Mask_Raster_tag0@@": "A bemeneti raszter.",
	"@@Minus_Cellsize-Type_tag0@@": "Válassza ki, hogy melyik cellaméretet szeretné használni a kimeneti raszterben. Ha mindegyik bemeneti cellaméret azonos, mindegyik lehetőség ugyanarra az eredményre vezet.",
	"@@Minus_Cellsize-Type_tag1@@": "Első--a bemeneti raszterek első cellaméretének használata.",
	"@@Minus_Cellsize-Type_tag2@@": "Utolsó--a bemeneti raszterek utolsó cellaméretének használata.",
	"@@Minus_Cellsize-Type_tag3@@": "Maximum--az összes bemeneti raszter legnagyobb cellaméretének használata. Ez az alapértelmezés.",
	"@@Minus_Cellsize-Type_tag4@@": "Átlag--az összes bemeneti raszter átlagos cellaméretének használata.",
	"@@Minus_Cellsize-Type_tag5@@": "Minimum--az összes bemeneti raszter legkisebb cellaméretének használata.",
	"@@Minus_Extent-Type_tag0@@": "Válassza ki, hogy melyik kiterjedést szeretné használni a kimeneti raszterben:",
	"@@Minus_Extent-Type_tag1@@": "Első--az első bemeneti raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Minus_Extent-Type_tag2@@": "Metszet--az átfedésben lévő pixelek kiterjedésének használata a feldolgozási kiterjedés meghatározásához. Ez az alapértelmezés.",
	"@@Minus_Extent-Type_tag3@@": "Utolsó--az utolsó bemeneti raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Minus_Extent-Type_tag4@@": "Unió--az összes raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Minus_Raster_tag0@@": "A bemenet, amelyből ki kell vonni a második bemenet értékeit.",
	"@@Minus_Raster_tag1@@": "Ennél a paraméternél használható konstans érték bemenetként, amennyiben megadja a rasztert a másik paraméternél.",
	"@@Minus_Raster2_tag0@@": "Az első bemenet értékeiből kivonandó bemeneti értékek.",
	"@@Minus_Raster2_tag1@@": "Ennél a paraméternél használható konstans érték bemenetként, amennyiben megadja a rasztert a másik paraméternél.",
	"@@ML-Classify_Raster_tag0@@": "A maximum likelihood algoritmus segítségével osztályozandó bemeneti raszter.",
	"@@ML-Classify_Signature-File-or-URL_tag0@@": "A ${.gsg} aláírásfájl.",
	"@@Mod_Cellsize-Type_tag0@@": "Válassza ki, hogy melyik cellaméretet szeretné használni a kimeneti raszterben. Ha mindegyik bemeneti cellaméret azonos, mindegyik lehetőség ugyanarra az eredményre vezet.",
	"@@Mod_Cellsize-Type_tag1@@": "Első--a bemeneti raszterek első cellaméretének használata.",
	"@@Mod_Cellsize-Type_tag2@@": "Utolsó--a bemeneti raszterek utolsó cellaméretének használata.",
	"@@Mod_Cellsize-Type_tag3@@": "Maximum--az összes bemeneti raszter legnagyobb cellaméretének használata. Ez az alapértelmezés.",
	"@@Mod_Cellsize-Type_tag4@@": "Átlag--az összes bemeneti raszter átlagos cellaméretének használata.",
	"@@Mod_Cellsize-Type_tag5@@": "Minimum--az összes bemeneti raszter legkisebb cellaméretének használata.",
	"@@Mod_Extent-Type_tag0@@": "Válassza ki, hogy melyik kiterjedést szeretné használni a kimeneti raszterben:",
	"@@Mod_Extent-Type_tag1@@": "Első--az első bemeneti raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Mod_Extent-Type_tag2@@": "Metszet--az átfedésben lévő pixelek kiterjedésének használata a feldolgozási kiterjedés meghatározásához. Ez az alapértelmezés.",
	"@@Mod_Extent-Type_tag3@@": "Utolsó--az utolsó bemeneti raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Mod_Extent-Type_tag4@@": "Unió--az összes raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Mod_Raster_tag0@@": "A számláló bemenet.",
	"@@Mod_Raster_tag1@@": "Ennél a paraméternél használható konstans érték bemenetként, amennyiben megadja a rasztert a másik paraméternél.",
	"@@Mod_Raster2_tag0@@": "A nevező bemenet.",
	"@@Mod_Raster2_tag1@@": "Ennél a paraméternél használható konstans érték bemenetként, amennyiben megadja a rasztert a másik paraméternél.",
	"@@Mosaic-Rasters_Operation_tag0@@": "Ellentmondások feloldása, amikor kettő vagy több kép részei átfedésben vannak. Az alábbi beállítások állnak rendelkezésre:",
	"@@Mosaic-Rasters_Operation_tag1@@": "<strong>Összemoság</strong>--Az átfedésben lévő pixelek átlagának kiszámítása és megjelenítése úgy, hogy a szomszédos képekhez közelebb lévő pixelek nagyobb súlyt kapnak, így az eredmény egy simább kép. Ez az alapértelmezés.",
	"@@Mosaic-Rasters_Operation_tag3@@": "<strong>Első</strong>--Egy adott területet átfedő képek listájában lévő első kép pixeleinek megjelenítése.",
	"@@Mosaic-Rasters_Operation_tag5@@": "<strong>Utolsó</strong>--Egy adott területet átfedő képek listájában lévő utolsó kép pixeleinek megjelenítése.",
	"@@Mosaic-Rasters_Operation_tag7@@": "<strong>Max.</strong>--Az összes átfedésben lévő réteg közül a legnagyobb értékkel rendelkező pixel megjelenítése. Ennél a beállításnál nincsen garancia arra, hogy az átfedésben lévő területen lévő képek közül csak egynek a pixelei jelennek meg, nem az összes lehetséges réteg egy kombinációja.",
	"@@Mosaic-Rasters_Operation_tag9@@": "<strong>átlag</strong>--Az átfedésben lévő pixelek átlagának kiszámítása és megjelenítése.",
	"@@Mosaic-Rasters_Operation_tag11@@": "<strong>Min</strong>--Az összes átfedésben lévő réteg közül a legalacsonyabb értékkel rendelkező pixel megjelenítése. Ennél a beállításnál nincsen garancia arra, hogy az átfedésben lévő területen lévő képek közül csak egynek a pixelei jelennek meg, nem az összes lehetséges réteg egy kombinációja.",
	"@@Mosaic-Rasters_Rasters_tag0@@": "Az egy kép megalkotásához mozaikként összefűzni kívánt raszterek kiválasztása.",
	"@@NDVI_Infrared-Band-ID_tag0@@": "Az elektromágneses spektrum közeli infravörös részét jelképező hullámhossztartomány-azonosítót adja meg.",
	"@@NDVI_Raster_tag0@@": "A bemeneti multispektrális raszter.",
	"@@NDVI_Scientific-Output_tag0@@": "A kimeneti értékek tartománya −1,0 és 1,0 között van, amit számos tudományos alkalmazásban használnak.",
	"@@NDVI_Visible-Band-ID_tag0@@": "Az elektromágneses spektrum vörös részét jelképező hullámhossztartomány-azonosítót adja meg.",
	"@@NDVI-Colorized_Color-Ramp_tag0@@": "Egy előre definiált színséma választható a legördülő listából.",
	"@@NDVI-Colorized_Color-Scheme-Type_tag0@@": "Itt választható ki, hogy melyik színsémával szeretné színessé tenni az NDVI-kimenetet:",
	"@@NDVI-Colorized_Color-Scheme-Type_tag1@@": "Színtérkép--előre definiált színtérkép választása a legördülő listából. Vagy tallózással megkereshet egy létező állandó színtérképfájlt.",
	"@@NDVI-Colorized_Color-Scheme-Type_tag2@@": "Színskála--előre definiált színséma választható a legördülő listából.",
	"@@NDVI-Colorized_Colormap_tag0@@": "Egy előre definiált színtérkép választása a legördülő listából. Vagy tallózással megkereshet egy létező színtérképfájlt.",
	"@@NDVI-Colorized_Infrared-Band-ID_tag0@@": "Az elektromágneses spektrum közeli infravörös részét jelképező hullámhossztartomány-azonosítót adja meg.",
	"@@NDVI-Colorized_Raster_tag0@@": "A bemeneti multispektrális raszter.",
	"@@NDVI-Colorized_Scientific-Output_tag0@@": "A kimeneti értékek tartománya −1,0 és 1,0 között van, amit számos tudományos alkalmazásban használnak.",
	"@@NDVI-Colorized_Visible-Band-ID_tag0@@": "Az elektromágneses spektrum vörös részét jelképező hullámhossztartomány-azonosítót adja meg.",
	"@@Negate_Cellsize-Type_tag0@@": "Válassza ki, hogy melyik cellaméretet szeretné használni a kimeneti raszterben. Ha mindegyik bemeneti cellaméret azonos, mindegyik lehetőség ugyanarra az eredményre vezet.",
	"@@Negate_Cellsize-Type_tag1@@": "Első--a bemeneti raszterek első cellaméretének használata.",
	"@@Negate_Cellsize-Type_tag2@@": "Utolsó--a bemeneti raszterek utolsó cellaméretének használata.",
	"@@Negate_Cellsize-Type_tag3@@": "Maximum--az összes bemeneti raszter legnagyobb cellaméretének használata. Ez az alapértelmezés.",
	"@@Negate_Cellsize-Type_tag4@@": "Átlag--az összes bemeneti raszter átlagos cellaméretének használata.",
	"@@Negate_Cellsize-Type_tag5@@": "Minimum--az összes bemeneti raszter legkisebb cellaméretének használata.",
	"@@Negate_Extent-Type_tag0@@": "Válassza ki, hogy melyik kiterjedést szeretné használni a kimeneti raszterben:",
	"@@Negate_Extent-Type_tag1@@": "Első--az első bemeneti raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Negate_Extent-Type_tag2@@": "Metszet--az átfedésben lévő pixelek kiterjedésének használata a feldolgozási kiterjedés meghatározásához. Ez az alapértelmezés.",
	"@@Negate_Extent-Type_tag3@@": "Utolsó--az utolsó bemeneti raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Negate_Extent-Type_tag4@@": "Unió--az összes raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Negate_Raster_tag0@@": "A negatívvá alakítandó (−1-gyel szorzandó) bemeneti raszter.",
	"@@Nibble_Mask-Raster_tag0@@": "A maszkként használt, kötelező bemeneti raszter.",
	"@@Nibble_Mask-Raster_tag1@@": "A NoData értékkel rendelkező cellák ki lesznek cserélve a bemeneti <strong>Raszter</strong> értékével.",
	"@@Nibble_Mask-Raster_tag4@@": "A maszkraszter lehet integer vagy lebegőpontos típusú.",
	"@@Nibble_Nibble-NoData-cells_tag0@@": "Itt adható meg, hogy a bemeneti raszterben lévő NoData cellák NoData cellák maradjanak a kimeneti raszterben is.",
	"@@Nibble_Nibble-NoData-cells_tag1@@": "<strong>Nem</strong>--A bemeneti raszterben lévő NoData cellák NoData cellák maradnak a kimenetiben is. Ez az alapértelmezés.",
	"@@Nibble_Nibble-NoData-cells_tag3@@": "<strong>Igen</strong>--A bemeneti raszterben és a maszkon belül lévő NoData cellák érvényes kimeneti cellaértékekké alakíthatók.",
	"@@Nibble_Raster_tag0@@": "A kötelező bemeneti raszter, amelyben ki kell cserélni a cellákat.",
	"@@Nibble_Raster_tag1@@": "A bemeneti raszter lehet integer vagy lebegőpontos típusú.",
	"@@Nibble_Use-NoData-values-if-they-are-the-nearest-neighbor_tag0@@": "Itt adható meg, hogy a bemeneti raszterben lévő ${NoData} értékeknél megengedett-e a cellák cseréje a maszkraszter által meghatározott területen.",
	"@@Nibble_Use-NoData-values-if-they-are-the-nearest-neighbor_tag1@@": "<strong>Igen</strong>--A legközelebbi szomszéd értékét használja a bemeneti raszterben, legyen az ${NoData} vagy más adatérték. A bemeneti raszterben lévő ${NoData} értékeknél szabadon megengedett a cellák cseréje a maszkban meghatározott területen, ha azok a legközelebbi szomszédok. Ez az alapértelmezés.",
	"@@Nibble_Use-NoData-values-if-they-are-the-nearest-neighbor_tag3@@": "<strong>Nem</strong>--Csak az adatértékeknél szabadon megengedett a cellák cseréje a maszkraszterben meghatározott területen. A bemeneti raszterben lévő ${NoData} értékeknél nem megengedett a cellák cseréje a maszkraszterben meghatározott területen, akkor sem, ha azok a legközelebbi szomszédok.",
	"@@Nibble_Zone-Raster_tag0@@": "A bemeneti zónaraszter.",
	"@@Nibble_Zone-Raster_tag1@@": "Egy zóna egy raszter összes azonos értékkel rendelkező celláját jelenti, függetlenül attól, hogy szomszédosak-e. A bemeneti zónaréteg határozza meg a zónák alakját, értékeit és helyeit. A zónaraszter lehet integer vagy lebegőpontos típus.",
	"@@Not-Equal_Cellsize-Type_tag0@@": "Válassza ki, hogy melyik cellaméretet szeretné használni a kimeneti raszterben. Ha mindegyik bemeneti cellaméret azonos, mindegyik lehetőség ugyanarra az eredményre vezet.",
	"@@Not-Equal_Cellsize-Type_tag1@@": "Első--a bemeneti raszterek első cellaméretének használata.",
	"@@Not-Equal_Cellsize-Type_tag2@@": "Utolsó--a bemeneti raszterek utolsó cellaméretének használata.",
	"@@Not-Equal_Cellsize-Type_tag3@@": "Maximum--az összes bemeneti raszter legnagyobb cellaméretének használata. Ez az alapértelmezés.",
	"@@Not-Equal_Cellsize-Type_tag4@@": "Átlag--az összes bemeneti raszter átlagos cellaméretének használata.",
	"@@Not-Equal_Cellsize-Type_tag5@@": "Minimum--az összes bemeneti raszter legkisebb cellaméretének használata.",
	"@@Not-Equal_Extent-Type_tag0@@": "Válassza ki, hogy melyik kiterjedést szeretné használni a kimeneti raszterben:",
	"@@Not-Equal_Extent-Type_tag1@@": "Első--az első bemeneti raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Not-Equal_Extent-Type_tag2@@": "Metszet--az átfedésben lévő pixelek kiterjedésének használata a feldolgozási kiterjedés meghatározásához. Ez az alapértelmezés.",
	"@@Not-Equal_Extent-Type_tag3@@": "Utolsó--az utolsó bemeneti raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Not-Equal_Extent-Type_tag4@@": "Unió--az összes raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Not-Equal_Raster_tag0@@": "A bemenet, amellyel össze kell hasonlítani a második bemenetet az egyenlőtlenség megállapítása érdekében.",
	"@@Not-Equal_Raster_tag1@@": "Ennél a paraméternél használható konstans érték bemenetként, amennyiben megadja a rasztert a másik paraméternél.",
	"@@Not-Equal_Raster2_tag0@@": "A bemenet, amely össze lesz hasonlítva az első bemenettel az egyenlőtlenség megállapítása érdekében.",
	"@@Not-Equal_Raster2_tag1@@": "Ennél a paraméternél használható konstans érték bemenetként, amennyiben megadja a rasztert a másik paraméternél.",
	"@@Pansharpening_Multispectral_tag0@@": "A pánkromatikus hullámhossztartomány segítségével élesíteni kívánt multispektrális raszter.",
	"@@Pansharpening_Panchromatic_tag0@@": "Az alacsony felbontású multispektrális raszter pánkromatikus élesítéséhez használt, magas felbontású, egy hullámhossztartománnyal rendelkező raszter.",
	"@@Pansharpening_Pansharpening-Type_tag0@@": "Válassza ki a használni kívánt pánkromatikus élesítési algoritmust.",
	"@@Pansharpening_Pansharpening-Type_tag1@@": "Brovey--a spektrális modellezésen alapuló Brovey-algoritmust használja az adatok egyesítéséhez.",
	"@@Pansharpening_Pansharpening-Type_tag2@@": "Esri--a spektrális modellezésen alapuló Esri algoritmust használja az adatok egyesítéséhez.",
	"@@Pansharpening_Pansharpening-Type_tag3@@": "Gram–Schmidt--a Gram–Schmidt-féle spektrális élesítési algoritmust használja a multispektrális adatok élesítéséhez.",
	"@@Pansharpening_Pansharpening-Type_tag4@@": "IHS--az intenzitás, színárnyalat, telítettség színteret használja az adatok egyesítéséhez.",
	"@@Pansharpening_Pansharpening-Type_tag5@@": "Átlag--a piros, zöld és kék értékek közötti átlagos értéket, valamint a pánkromatikus pixelértéket használja.",
	"@@Pansharpening_Weights_tag0@@": "A piros, zöld, kék és infravörös hullámhossztartományok súlyának megadása. Mindegyik értéknek a 0–1 tartományban kell lennie.",
	"@@Path-Distance_Accumulative-Cost-Resistance-Rate_tag0@@": "Ez a paraméter a költségek csökkentésére irányuló erőfeszítések növekedését szimulálja a kumulatív költségek növekedésével. Az utazó fáradását modellezi. Egy cella elérésének növekvő kumulatív költségét szorozza meg a rezisztenciarátával, és adja hozzá a következő cellába való mozgás költségéhez.",
	"@@Path-Distance_Accumulative-Cost-Resistance-Rate_tag1@@": "Ez egy kamatoskamat-számítási képlet módosított változata, amelyet egy cellán való áthaladás látható költségének kiszámítására használunk. A rezisztenciaráta értékének növekedésével nő a később meglátogatott cellák költsége. Minél nagyobb a rezisztenciaráta, annál nagyobb a következő cella elérésének költsége, amely minden egyes következő mozgással összeadódik. Mivel a rezisztenciaráta egy kamatos kamathoz hasonló, és a kumulatív költségértékek nagyon nagyok, a kumulatív költségértékektől függően kis rezisztenciaráta használata javasolt (pl. 0,005 vagy még kisebb).",
	"@@Path-Distance_Accumulative-Cost-Resistance-Rate_tag2@@": "Az értéknek nagyobbnak kell lennie nullánál. Az alapértelmezett kapacitás a kimeneti raszter élénél van.",
	"@@Path-Distance_Capacity_tag0@@": "Az utazó költségkapacitását határozza meg egy forrásnál. A költségszámítás minden egyes forrásnál addig folytatódik, amíg el nem éri a meghatározott kapacitást.",
	"@@Path-Distance_Capacity_tag1@@": "Az értéknek nagyobbnak kell lennie nullánál. Az alapértelmezett kapacitás a kimeneti raszter élénél van.",
	"@@Path-Distance_Cost-Raster_tag0@@": "Az egyes cellákon történő, síkrajzi értelemben vett áthaladás költségét vagy impedanciáját meghatározó, kötelező bemeneti raszter. Az egyes cellahelyeken szereplő értékek az azon történő áthaladás egységnyi távolságra eső költségét jelentik. Az eszköz a cellán történő áthaladás teljes költségének kiszámításához megszorozza az egyes cellahelyek értékét a cellafelbontással, és átlós mozgás esetén kompenzálja is az értéket.",
	"@@Path-Distance_Cost-Raster_tag1@@": "A <strong>Költségraszter</strong> értékei lehetnek integer- vagy lebegőpontos értékek, de nem lehetnek negatívak vagy nullák.",
	"@@Path-Distance_horizontalfactor_tag0@@": "<p>A vízszintes költségtényező és a vízszintes relatív mozgási szög (HRMA) közötti kapcsolatot határozza meg.</p><p>Számos olyan, módosítóval rendelkező tényező van, amely meghatározott függőlegestényező-grafikont határoz meg. Ezenkívül egyéni grafikon is létrehozható egy tábla segítségével. A grafikonok szerepe a szomszédos cellába mozgás teljes költségének kiszámításához használt függőleges tényező azonosítása.</p><p>Az alábbi magyarázatokban két betűszót használunk: HF és HRMA. A HF jelentése vízszintes tényező (horizontal factor), amely a két cella közötti mozgás vízszintes nehézségét határozza meg. A HRMA jelentése vízszintes relatív mozgási szög (horizontal relative moving angle), amely a cellától vett vízszintes irány és a mozgás iránya által bezárt szöget jelenti.</p><p>A <strong>vízszintes tényező</strong> típusai a következők:</p><ul><li><strong>Bináris</strong>: azt jelzi, hogy ha a HRMA kisebb, mint a levágási szög, a HF a nulltényezőhöz társított értékre lesz állítva; ellenkező esetben végtelenre.</li><li><strong>Előre</strong>: Csak az előrefelé mozgás megengedett. A HRMA értékének legalább 0 foknak és 90 foknál kisebbnek kell lennie (0 &lt;= HRMA &lt; 90). Ha a HRMA nagyobb, mint 0 és kisebb, mint 45 fok, a cella HF tényezője a nulltényezőhöz társított értékre lesz állítva. Ha a HRMA nagyobb vagy egyenlő, mint 45 fok, a függvény az oldalérték módosító értéket használja. 90 fokkal egyenlő vagy annál nagyobb HRMA érték esetén a HF végtelenre lesz állítva.</li><li><strong>Lineáris</strong>: azt jelenti, hogy a HF a HRMA lineáris függvénye.</li><li><strong>Inverz lineáris</strong>: azt jelenti, hogy a HF a HRMA inverz lineáris függvénye.</li><li><strong>Táblázat</strong>: azt jelenti, hogy a HF-ek megadásához használt vízszintestényező-grafikon meghatározásához táblázatfájlt használ.</li></ul><p>A vízszintes tényezők a következő módosítókkal rendelkeznek:</p><ul><li><strong>Nulltényező</strong>: azt a vízszintes tényezőt adja meg, amelyet akkor kell használni, amikor a HRMA nulla. Ez a tényező az y tengelymetszet helyzetét határozza meg a vízszintestényező-függvények esetén.</li><li><strong>Levágási szög</strong>: -a HRMA azon szögét határozza meg, amelyen túl a HF végtelenre lesz állítva.</li><li><strong>Lejtés</strong>: annak az egyenes vonalnak a lejtését határozza meg, amelyet a<strong>Lineáris</strong>és az<strong>inverz lineáris</strong> vízszintestényező-kulcsszavakkal használ. A lejtés az adott távolságon mért emelkedés és a távolság hányadosaként van megadva (például a 45 százalékos lejtés 1/45, amely a 0,02222 értékkel adható meg).</li><li><strong>Oldalérték</strong>: a HF-et adja meg, amikor a HRMA nagyobb vagy egyenlő, mint 45 fok és kisebb, mint 90 fok, ha az<strong>Előre</strong>vízszintestényező-kulcsszó van megadva.</li><li><strong>Táblázatnév</strong>: a HF megadására használt táblázat neve.</li></ul>",
	"@@Path-Distance_Horizontal-Raster_tag0@@": "Az egyes cellákban a vízszintes irányt meghatározó raszter.",
	"@@Path-Distance_Horizontal-Raster_tag1@@": "A raszteren lévő értékeknek 0 és 360 között lévő egész számoknak kell lenniük, ahol a 0 jelenti az északot vagy a képernyő tetejét, és az értékek az óra járásával megegyező irányban nőnek. A lapos területek értéke −1. Az egyes helyeken található értékek a <strong>Vízszintes tényező</strong> paraméterrel együtt lesznek használva az egyik cellából egy szomszédos cellába történő mozgás során felmerülő vízszintes költség megállapításához.",
	"@@Path-Distance_Maximum-Distance_tag0@@": "A küszöbérték, amelyet a kumulatív költségértékek nem haladhatnak meg. Ha egy kumulatív költségtávolság meghaladja ezt az értéket, a cellahely kimeneti értéke NoData lesz. A legnagyobb távolság határozza meg azt a kiterjedést, amelyre az eszköz kiszámítja a kumulatív költségtávolságokat. Az alapértelmezett távolság a kimeneti raszter kiterjedésénél van.",
	"@@Path-Distance_Multiplier-to-Apply-to-Costs_tag0@@": "A költségértékekre alkalmazandó szorzótényező.",
	"@@Path-Distance_Multiplier-to-Apply-to-Costs_tag1@@": "Ez a paraméter lehetővé teszi az utazás módjának vagy a nagyságnak a szabályozását egy forrásnál. Minél nagyobb a szorzó, annál nagyobb az egyes cellákon való áthaladás költsége.",
	"@@Path-Distance_Multiplier-to-Apply-to-Costs_tag2@@": "Az értékeknek nullánál nagyobbaknak kell lenniük. Az alapértelmezett érték 1.",
	"@@Path-Distance_Multiplier-to-Apply-to-Costs_tag3@@": "Numerikus (double) érték vagy a <strong>Forrásraszter</strong> valamelyik mezője is használható e paraméter esetében.",
	"@@Path-Distance_Source-Raster_tag0@@": "A forráshelyek kötelező bemeneti rasztere.",
	"@@Path-Distance_Source-Raster_tag1@@": "Ez a raszter azokat a cellákat vagy helyeket határozza meg, amelyekből az eszköz kiszámítja a legkisebb kumulatív költségtávolságot az egyes kimeneti cellahelyekhez.",
	"@@Path-Distance_Source-Raster_tag2@@": "Lehet integer vagy lebegőpontos típusú.",
	"@@Path-Distance_Start-Cost_tag0@@": "A kiinduló költség, ahonnan kezdeni kell a költségszámítást. Ez a paraméter lehetővé teszi a forráshoz kapcsolódó fix költség megadását. A költségszámítási algoritmus ekkor nem 0-tól, hanem a megadott értéktől kezdi a számítást.",
	"@@Path-Distance_Start-Cost_tag1@@": "Az érték nem lehet kisebb nullánál. Az alapértelmezett érték 0.",
	"@@Path-Distance_Surface-Raster_tag0@@": "Az egyes cellahelyeken a magasságértékeket meghatározó raszter.",
	"@@Path-Distance_Surface-Raster_tag1@@": "Az értékek a cellák közötti mozgások során ténylegesen megtett felszíni távolság kiszámításához lesznek felhasználva.",
	"@@Path-Distance_Travel-Direction_tag0@@": "Az utazó irányát határozza meg a forrás rezisztenciaráta és a forrás kiinduló költség alkalmazásakor.",
	"@@Path-Distance_Travel-Direction_tag1@@": "<strong>Forrástól</strong>--A forrás rezisztenciarátát és a forrás kiinduló költséget a bemeneti forrástól indulva és a nem forráscellák felé haladva alkalmazza. Ez az alapértelmezés.",
	"@@Path-Distance_Travel-Direction_tag3@@": "<strong>Forráshoz</strong>--A forrás rezisztenciarátát és a forrás kiinduló költséget az egyes nem forráscelláktól indulva és a bemeneti forrás felé haladva alkalmazza.",
	"@@Path-Distance_Travel-Direction_tag5@@": "Adja meg vagy a <strong>Forrástól</strong> vagy pedig a <strong>Forráshoz</strong> kulcsszavát, amelyeket a rendszer valamennyi forrásra alkalmazni fog, vagy pedig adjon meg olyan mezőt a <strong>Forrástaszter</strong> beállításban, amely az egyes forrásokhoz tartozó utazási irányokat jelölő kulcsszavakat tartalmazza. A mezőnek tartalmaznia kell a következő karakterláncok egyikét: ${FROM_SOURCE} vagy ${TO_SOURCE}.",
	"@@Path-Distance_verticalfactor_tag0@@": "<p>A függőleges költségtényező és a függőleges relatív mozgási szög (VRMA) közötti kapcsolatot határozza meg.</p><p>Számos olyan módosítóval rendelkező tényező van, amely meghatározott függőlegestényező-grafikont azonosít. Ezenkívül egyéni grafikon is létrehozható egy tábla segítségével. A grafikonok szerepe a szomszédos cellába mozgás teljes költségének kiszámításához használt függőleges tényező azonosítása.</p><p>Az alábbi magyarázatokban két betűszót használunk: VF és VRMA. A VF jelentése függőleges tényező (vertical factor), amely a két cella közötti mozgás függőleges nehézségét határozza meg. A VRMA jelentése függőleges relatív mozgási szög (vertical relative moving angle), amely a KIINDULÓ vagy feldolgozó cella és a CÉL cella közötti lejtőszöget jelenti..</p><p>A <strong>vertikális tényező</strong>típusai a következők:</p><ul><li><strong>Bináris</strong>: azt jelzi, hogy ha a VRMA nagyobb, mint az alsó levágási szög, és kisebb, mint a felső levágási szög, a VF a nulltényezőhöz társított értékre lesz állítva; ellenkező esetben végtelenre.</li><li><strong>Lineáris</strong>: azt jelzi, hogy a VF a VRMA lineáris függvénye.</li><li><strong>Szimmetrikus lineáris</strong>: azt jelzi, hogy a VF a VRMA lineáris függvénye a VRMA negatív vagy pozitív oldalán, és a két lineáris függvény a VF (y) tengelyre nézve szimmetrikus.</li><li><strong>Inverz lineáris</strong>: azt jelzi, hogy a VF a VRMA inverz lineáris függvénye.</li><li><strong>Szimmetrikus inverz lineáris</strong>: azt jelzi, hogy a VF a VRMA inverz lineáris függvénye a VRMA negatív vagy pozitív oldalán, és a két lineáris függvény a VF (y) tengelyre nézve szimmetrikus.</li><li><strong>Cos</strong>--azt jelzi, hogy a VF a VRMA koszinuszalapú függvénye.</li><li><strong>Sec</strong>: azt jelzi, hogy a VF a VRMA szekánsalapú függvénye.</li><li><strong>Cos-Sec</strong>: azt jelzi, hogy a VF a VRMA szekánsalapú függvénye, amikor a VRMA negatív, és a VRMA koszinuszalapú függvénye, amikor a VRMA nem negatív.</li><li><strong>Sec-Cos</strong>--azt jelzi, hogy a VF a VRMA szekánsalapú függvénye, amikor a VRMA negatív, és a VRMA koszinuszalapú függvénye, amikor a VRMA nem negatív.</li><li><strong>Tablázat</strong>: azt jelenti, hogy a VF-ek megadásához használt függőlegestényező-grafikon meghatározásához táblázatfájlt használ.</li></ul><p>A függőleges kulcsszavak a következő módosítókkal rendelkeznek:</p><ul><li><strong>Nulltényező</strong>: azt a függőleges tényezőt adja meg, amelyet akkor kell használni, amikor a VRMA nulla. Ez a tényező a megadott függvény y tengelymetszetének helyzetét határozza meg. Definíció szerint a nulltényező nem alkalmazható a trigonometrikus függőleges függvényekre (COS, SEC, COS-SEC vagy SEC-COS). Az y tengelymetszetet ezek a függvények határozzák meg.</li><li><strong>Alsó levágási szög</strong>: a VRMA azon szögét határozza meg, amely alatt a VF végtelenre lesz állítva.</li><li><strong>Felső levágási szög</strong>: a VRMA azon szögét határozza meg, amely felett a VF végtelenre lesz állítva.</li><li><strong>Lejtés</strong>: annak az egyenes vonalnak a lejtését határozza meg, amelyet a<strong>Lineáris</strong>és az<strong>Inverz lineáris</strong>függőlegestényező-kulcsszavakkal használ. A lejtés az adott távolságon mért emelkedés és a távolság hányadosaként van megadva (például a 45 százalékos lejtés 1/45, amely a 0,02222 értékkel adható meg).</li><li><strong>Tablázatnév</strong>: a VF megadására használt táblázat neve.</li></ul>",
	"@@Path-Distance_Vertical-Raster_tag0@@": "A függőleges költségtényező és a függőleges relatív mozgási szög (VRMA) közötti kapcsolatot határozza meg.",
	"@@Path-Distance_Vertical-Raster_tag1@@": "A függvény az értékeket az egyik cellából egy másikba történő mozgás során felmerült függőleges tényező azonosítására használt lejtés kiszámításához használja.",
	"@@Path-Distance-Allocation_Accumulative-Cost-Resistance-Rate_tag0@@": "Ez a paraméter a költségek csökkentésére irányuló erőfeszítések növekedését szimulálja a kumulatív költségek növekedésével. Az utazó fáradását modellezi. Egy cella elérésének növekvő kumulatív költségét szorozza meg a rezisztenciarátával, és adja hozzá a következő cellába való mozgás költségéhez.",
	"@@Path-Distance-Allocation_Accumulative-Cost-Resistance-Rate_tag1@@": "Ez egy kamatoskamat-számítási képlet módosított változata, amelyet egy cellán való áthaladás látható költségének kiszámítására használunk. A rezisztenciaráta értékének növekedésével nő a később meglátogatott cellák költsége. Minél nagyobb a rezisztenciaráta, annál nagyobb a következő cella elérésének költsége, amely minden egyes következő mozgással összeadódik. Mivel a rezisztenciaráta egy kamatos kamathoz hasonló, és a kumulatív költségértékek nagyon nagyok, a kumulatív költségértékektől függően kis rezisztenciaráta használata javasolt (pl. 0,005 vagy még kisebb).",
	"@@Path-Distance-Allocation_Accumulative-Cost-Resistance-Rate_tag2@@": "Az értéknek nagyobbnak kell lennie nullánál. Az alapértelmezett kapacitás a kimeneti raszter élénél van.",
	"@@Path-Distance-Allocation_Capacity_tag0@@": "Az utazó költségkapacitását határozza meg egy forrásnál. A költségszámítás minden egyes forrásnál addig folytatódik, amíg el nem éri a meghatározott kapacitást.",
	"@@Path-Distance-Allocation_Capacity_tag1@@": "Az értéknek nagyobbnak kell lennie nullánál. Az alapértelmezett kapacitás a kimeneti raszter élénél van.",
	"@@Path-Distance-Allocation_Cost-Raster_tag0@@": "Az egyes cellákon történő, síkrajzi értelemben vett áthaladás költségét vagy impedanciáját meghatározó, kötelező bemeneti raszter. Az egyes cellahelyeken szereplő értékek az azon történő áthaladás egységnyi távolságra eső költségét jelentik. Az eszköz a cellán történő áthaladás teljes költségének kiszámításához megszorozza az egyes cellahelyek értékét a cellafelbontással, és átlós mozgás esetén kompenzálja is az értéket.",
	"@@Path-Distance-Allocation_Cost-Raster_tag1@@": "A <strong>Költségraszter</strong> értékei lehetnek integer- vagy lebegőpontos értékek, de nem lehetnek negatívak vagy nullák.",
	"@@Path-Distance-Allocation_horizontalfactor_tag0@@": "<p>A vízszintes költségtényező és a vízszintes relatív mozgási szög (HRMA) közötti kapcsolatot határozza meg.</p><p>Számos olyan, módosítóval rendelkező tényező van, amely meghatározott függőlegestényező-grafikont határoz meg. Ezenkívül egyéni grafikon is létrehozható egy tábla segítségével. A grafikonok szerepe a szomszédos cellába mozgás teljes költségének kiszámításához használt függőleges tényező azonosítása.</p><p>Az alábbi magyarázatokban két betűszót használunk: HF és HRMA. A HF jelentése vízszintes tényező (horizontal factor), amely a két cella közötti mozgás vízszintes nehézségét határozza meg. A HRMA jelentése vízszintes relatív mozgási szög (horizontal relative moving angle), amely a cellától vett vízszintes irány és a mozgás iránya által bezárt szöget jelenti.</p><p>A <strong>vízszintes tényező</strong> típusai a következők:</p><ul><li><strong>Bináris</strong>: azt jelzi, hogy ha a HRMA kisebb, mint a levágási szög, a HF a nulltényezőhöz társított értékre lesz állítva; ellenkező esetben végtelenre.</li><li><strong>Előre</strong>: Csak az előrefelé mozgás megengedett. A HRMA értékének legalább 0 foknak és 90 foknál kisebbnek kell lennie (0 &lt;= HRMA &lt; 90). Ha a HRMA nagyobb, mint 0 és kisebb, mint 45 fok, a cella HF tényezője a nulltényezőhöz társított értékre lesz állítva. Ha a HRMA nagyobb vagy egyenlő, mint 45 fok, a függvény az oldalérték módosító értéket használja. 90 fokkal egyenlő vagy annál nagyobb HRMA érték esetén a HF végtelenre lesz állítva.</li><li><strong>Lineáris</strong>: azt jelenti, hogy a HF a HRMA lineáris függvénye.</li><li><strong>Inverz lineáris</strong>: azt jelenti, hogy a HF a HRMA inverz lineáris függvénye.</li><li><strong>Táblázat</strong>: azt jelenti, hogy a HF-ek megadásához használt vízszintestényező-grafikon meghatározásához táblázatfájlt használ.</li></ul><p>A vízszintes tényezők a következő módosítókkal rendelkeznek:</p><ul><li><strong>Nulltényező</strong>: azt a vízszintes tényezőt adja meg, amelyet akkor kell használni, amikor a HRMA nulla. Ez a tényező az y tengelymetszet helyzetét határozza meg a vízszintestényező-függvények esetén.</li><li><strong>Levágási szög</strong>: -a HRMA azon szögét határozza meg, amelyen túl a HF végtelenre lesz állítva.</li><li><strong>Lejtés</strong>: annak az egyenes vonalnak a lejtését határozza meg, amelyet a<strong>Lineáris</strong>és az<strong>inverz lineáris</strong> vízszintestényező-kulcsszavakkal használ. A lejtés az adott távolságon mért emelkedés és a távolság hányadosaként van megadva (például a 45 százalékos lejtés 1/45, amely a 0,02222 értékkel adható meg).</li><li><strong>Oldalérték</strong>: a HF-et adja meg, amikor a HRMA nagyobb vagy egyenlő, mint 45 fok és kisebb, mint 90 fok, ha az<strong>Előre</strong>vízszintestényező-kulcsszó van megadva.</li><li><strong>Táblázatnév</strong>: a HF megadására használt táblázat neve.</li></ul>",
	"@@Path-Distance-Allocation_Horizontal-Raster_tag0@@": "Az egyes cellákban a vízszintes irányt meghatározó raszter.",
	"@@Path-Distance-Allocation_Horizontal-Raster_tag1@@": "A raszteren lévő értékeknek 0 és 360 között lévő egész számoknak kell lenniük, ahol a 0 jelenti az északot vagy a képernyő tetejét, és az értékek az óra járásával megegyező irányban nőnek. A lapos területek értéke −1. Az egyes helyeken található értékek a <strong>Vízszintes tényező</strong> paraméterrel együtt lesznek használva az egyik cellából egy szomszédos cellába történő mozgás során felmerülő vízszintes költség megállapításához.",
	"@@Path-Distance-Allocation_Maximum-Distance_tag0@@": "A küszöbérték, amelyet a kumulatív költségértékek nem haladhatnak meg. Ha egy kumulatív költségtávolság meghaladja ezt az értéket, a cellahely kimeneti értéke NoData lesz. A legnagyobb távolság határozza meg azt a kiterjedést, amelyre az eszköz kiszámítja a kumulatív költségtávolságokat. Az alapértelmezett távolság a kimeneti raszter kiterjedésénél van.",
	"@@Path-Distance-Allocation_Multiplier-to-Apply-to-Costs_tag0@@": "A költségértékekre alkalmazandó szorzótényező.",
	"@@Path-Distance-Allocation_Multiplier-to-Apply-to-Costs_tag1@@": "Ez a paraméter lehetővé teszi az utazás módjának vagy a nagyságnak a szabályozását egy forrásnál. Minél nagyobb a szorzó, annál nagyobb az egyes cellákon való áthaladás költsége.",
	"@@Path-Distance-Allocation_Multiplier-to-Apply-to-Costs_tag2@@": "Az értékeknek nullánál nagyobbaknak kell lenniük. Az alapértelmezett érték 1.",
	"@@Path-Distance-Allocation_Multiplier-to-Apply-to-Costs_tag3@@": "Numerikus (double) érték vagy a <strong>Forrásraszter</strong> valamelyik mezője is használható e paraméter esetében.",
	"@@Path-Distance-Allocation_Source-Field_tag0@@": "Az a mező, amelyet az értékek forráshelyekhez rendeléséhez használunk. Egész számnak kell lennie. Ha az <strong>Értékraszter</strong> be van állítva, a bemenetben szereplő értékek elsődlegességet élveznek a következő beállításban megadott értékekkel szemben:",
	"@@Path-Distance-Allocation_Source-Raster_tag0@@": "A forráshelyek kötelező bemeneti rasztere.",
	"@@Path-Distance-Allocation_Source-Raster_tag1@@": "Ez a raszter azokat a cellákat vagy helyeket határozza meg, amelyekből az eszköz kiszámítja a legkisebb kumulatív költségtávolságot az egyes kimeneti cellahelyekhez.",
	"@@Path-Distance-Allocation_Source-Raster_tag2@@": "Lehet integer vagy lebegőpontos típusú.",
	"@@Path-Distance-Allocation_Start-Cost_tag0@@": "A kiinduló költség, ahonnan kezdeni kell a költségszámítást. Ez a paraméter lehetővé teszi a forráshoz kapcsolódó fix költség megadását. A költségszámítási algoritmus ekkor nem 0-tól, hanem a megadott értéktől kezdi a számítást.",
	"@@Path-Distance-Allocation_Start-Cost_tag1@@": "Az érték nem lehet kisebb nullánál. Az alapértelmezett érték 0.",
	"@@Path-Distance-Allocation_Surface-Raster_tag0@@": "Az egyes cellahelyeken a magasságértékeket meghatározó raszter.",
	"@@Path-Distance-Allocation_Surface-Raster_tag1@@": "Az értékek a cellák közötti mozgások során ténylegesen megtett felszíni távolság kiszámításához lesznek felhasználva.",
	"@@Path-Distance-Allocation_Travel-Direction_tag0@@": "Az utazó irányát határozza meg a forrás rezisztenciaráta és a forrás kiinduló költség alkalmazásakor.",
	"@@Path-Distance-Allocation_Travel-Direction_tag1@@": "<strong>Forrástól</strong>--A forrás rezisztenciarátát és a forrás kiinduló költséget a bemeneti forrástól indulva és a nem forráscellák felé haladva alkalmazza. Ez az alapértelmezés.",
	"@@Path-Distance-Allocation_Travel-Direction_tag3@@": "<strong>Forráshoz</strong>--A forrás rezisztenciarátát és a forrás kiinduló költséget az egyes nem forráscelláktól indulva és a bemeneti forrás felé haladva alkalmazza.",
	"@@Path-Distance-Allocation_Travel-Direction_tag5@@": "Adja meg vagy a <strong>Forrástól</strong> vagy pedig a <strong>Forráshoz</strong> kulcsszavát, amelyeket a rendszer valamennyi forrásra alkalmazni fog, vagy pedig adjon meg olyan mezőt a <strong>Forrástaszter</strong> beállításban, amely az egyes forrásokhoz tartozó utazási irányokat jelölő kulcsszavakat tartalmazza. A mezőnek tartalmaznia kell a következő karakterláncok egyikét: ${FROM_SOURCE} vagy ${TO_SOURCE}.",
	"@@Path-Distance-Allocation_Value-Raster_tag0@@": "Az egyes bemeneti forráshelyekhez használni kívánt zónaértékeket jelölő bemeneti integerraszter. Az egyes forráshelycelláknál az <strong>Értékraszter</strong> által meghatározott érték lesz a forráshelyhez a számítás érdekében kiosztott összes cellához rendelve. Az <strong>Értékraszter</strong> elsődlegességet élvez a <strong>Forrásmező</strong> bármely beállításával szemben.",
	"@@Path-Distance-Allocation_verticalfactor_tag0@@": "<p>A függőleges költségtényező és a függőleges relatív mozgási szög (VRMA) közötti kapcsolatot határozza meg.</p><p>Számos olyan módosítóval rendelkező tényező van, amely meghatározott függőlegestényező-grafikont azonosít. Ezenkívül egyéni grafikon is létrehozható egy tábla segítségével. A grafikonok szerepe a szomszédos cellába mozgás teljes költségének kiszámításához használt függőleges tényező azonosítása.</p><p>Az alábbi magyarázatokban két betűszót használunk: VF és VRMA. A VF jelentése függőleges tényező (vertical factor), amely a két cella közötti mozgás függőleges nehézségét határozza meg. A VRMA jelentése függőleges relatív mozgási szög (vertical relative moving angle), amely a KIINDULÓ vagy feldolgozó cella és a CÉL cella közötti lejtőszöget jelenti..</p><p>A <strong>vertikális tényező</strong>típusai a következők:</p><ul><li><strong>Bináris</strong>: azt jelzi, hogy ha a VRMA nagyobb, mint az alsó levágási szög, és kisebb, mint a felső levágási szög, a VF a nulltényezőhöz társított értékre lesz állítva; ellenkező esetben végtelenre.</li><li><strong>Lineáris</strong>: azt jelzi, hogy a VF a VRMA lineáris függvénye.</li><li><strong>Szimmetrikus lineáris</strong>: azt jelzi, hogy a VF a VRMA lineáris függvénye a VRMA negatív vagy pozitív oldalán, és a két lineáris függvény a VF (y) tengelyre nézve szimmetrikus.</li><li><strong>Inverz lineáris</strong>: azt jelzi, hogy a VF a VRMA inverz lineáris függvénye.</li><li><strong>Szimmetrikus inverz lineáris</strong>: azt jelzi, hogy a VF a VRMA inverz lineáris függvénye a VRMA negatív vagy pozitív oldalán, és a két lineáris függvény a VF (y) tengelyre nézve szimmetrikus.</li><li><strong>Cos</strong>--azt jelzi, hogy a VF a VRMA koszinuszalapú függvénye.</li><li><strong>Sec</strong>: azt jelzi, hogy a VF a VRMA szekánsalapú függvénye.</li><li><strong>Cos-Sec</strong>: azt jelzi, hogy a VF a VRMA szekánsalapú függvénye, amikor a VRMA negatív, és a VRMA koszinuszalapú függvénye, amikor a VRMA nem negatív.</li><li><strong>Sec-Cos</strong>--azt jelzi, hogy a VF a VRMA szekánsalapú függvénye, amikor a VRMA negatív, és a VRMA koszinuszalapú függvénye, amikor a VRMA nem negatív.</li><li><strong>Tablázat</strong>: azt jelenti, hogy a VF-ek megadásához használt függőlegestényező-grafikon meghatározásához táblázatfájlt használ.</li></ul><p>A függőleges kulcsszavak a következő módosítókkal rendelkeznek:</p><ul><li><strong>Nulltényező</strong>: azt a függőleges tényezőt adja meg, amelyet akkor kell használni, amikor a VRMA nulla. Ez a tényező a megadott függvény y tengelymetszetének helyzetét határozza meg. Definíció szerint a nulltényező nem alkalmazható a trigonometrikus függőleges függvényekre (COS, SEC, COS-SEC vagy SEC-COS). Az y tengelymetszetet ezek a függvények határozzák meg.</li><li><strong>Alsó levágási szög</strong>: a VRMA azon szögét határozza meg, amely alatt a VF végtelenre lesz állítva.</li><li><strong>Felső levágási szög</strong>: a VRMA azon szögét határozza meg, amely felett a VF végtelenre lesz állítva.</li><li><strong>Lejtés</strong>: annak az egyenes vonalnak a lejtését határozza meg, amelyet a<strong>Lineáris</strong>és az<strong>Inverz lineáris</strong>függőlegestényező-kulcsszavakkal használ. A lejtés az adott távolságon mért emelkedés és a távolság hányadosaként van megadva (például a 45 százalékos lejtés 1/45, amely a 0,02222 értékkel adható meg).</li><li><strong>Tablázatnév</strong>: a VF megadására használt táblázat neve.</li></ul>",
	"@@Path-Distance-Allocation_Vertical-Raster_tag0@@": "A függőleges költségtényező és a függőleges relatív mozgási szög (VRMA) közötti kapcsolatot határozza meg.",
	"@@Path-Distance-Allocation_Vertical-Raster_tag1@@": "A függvény az értékeket az egyik cellából egy másikba történő mozgás során felmerült függőleges tényező azonosítására használt lejtés kiszámításához használja.",
	"@@Path-Distance-Back-Link_Accumulative-Cost-Resistance-Rate_tag0@@": "Ez a paraméter a költségek csökkentésére irányuló erőfeszítések növekedését szimulálja a kumulatív költségek növekedésével. Az utazó fáradását modellezi. Egy cella elérésének növekvő kumulatív költségét szorozza meg a rezisztenciarátával, és adja hozzá a következő cellába való mozgás költségéhez.",
	"@@Path-Distance-Back-Link_Accumulative-Cost-Resistance-Rate_tag1@@": "Ez egy kamatoskamat-számítási képlet módosított változata, amelyet egy cellán való áthaladás látható költségének kiszámítására használunk. A rezisztenciaráta értékének növekedésével nő a később meglátogatott cellák költsége. Minél nagyobb a rezisztenciaráta, annál nagyobb a következő cella elérésének költsége, amely minden egyes következő mozgással összeadódik. Mivel a rezisztenciaráta egy kamatos kamathoz hasonló, és a kumulatív költségértékek nagyon nagyok, a kumulatív költségértékektől függően kis rezisztenciaráta használata javasolt (pl. 0,005 vagy még kisebb).",
	"@@Path-Distance-Back-Link_Accumulative-Cost-Resistance-Rate_tag2@@": "Az értéknek nagyobbnak kell lennie nullánál. Az alapértelmezett kapacitás a kimeneti raszter élénél van.",
	"@@Path-Distance-Back-Link_Capacity_tag0@@": "Az utazó költségkapacitását határozza meg egy forrásnál. A költségszámítás minden egyes forrásnál addig folytatódik, amíg el nem éri a meghatározott kapacitást.",
	"@@Path-Distance-Back-Link_Capacity_tag1@@": "Az értéknek nagyobbnak kell lennie nullánál. Az alapértelmezett kapacitás a kimeneti raszter élénél van.",
	"@@Path-Distance-Back-Link_Cost-Raster_tag0@@": "Az egyes cellákon történő, síkrajzi értelemben vett áthaladás költségét vagy impedanciáját meghatározó, kötelező bemeneti raszter. Az egyes cellahelyeken szereplő értékek az azon történő áthaladás egységnyi távolságra eső költségét jelentik. Az eszköz a cellán történő áthaladás teljes költségének kiszámításához megszorozza az egyes cellahelyek értékét a cellafelbontással, és átlós mozgás esetén kompenzálja is az értéket.",
	"@@Path-Distance-Back-Link_Cost-Raster_tag1@@": "A <strong>Költségraszter</strong> értékei lehetnek integer- vagy lebegőpontos értékek, de nem lehetnek negatívak vagy nullák.",
	"@@Path-Distance-Back-Link_horizontalfactor_tag0@@": "<p>A vízszintes költségtényező és a vízszintes relatív mozgási szög (HRMA) közötti kapcsolatot határozza meg.</p><p>Számos olyan, módosítóval rendelkező tényező van, amely meghatározott függőlegestényező-grafikont határoz meg. Ezenkívül egyéni grafikon is létrehozható egy tábla segítségével. A grafikonok szerepe a szomszédos cellába mozgás teljes költségének kiszámításához használt függőleges tényező azonosítása.</p><p>Az alábbi magyarázatokban két betűszót használunk: HF és HRMA. A HF jelentése vízszintes tényező (horizontal factor), amely a két cella közötti mozgás vízszintes nehézségét határozza meg. A HRMA jelentése vízszintes relatív mozgási szög (horizontal relative moving angle), amely a cellától vett vízszintes irány és a mozgás iránya által bezárt szöget jelenti.</p><p>A <strong>vízszintes tényező</strong> típusai a következők:</p><ul><li><strong>Bináris</strong>: azt jelzi, hogy ha a HRMA kisebb, mint a levágási szög, a HF a nulltényezőhöz társított értékre lesz állítva; ellenkező esetben végtelenre.</li><li><strong>Előre</strong>: Csak az előrefelé mozgás megengedett. A HRMA értékének legalább 0 foknak és 90 foknál kisebbnek kell lennie (0 &lt;= HRMA &lt; 90). Ha a HRMA nagyobb, mint 0 és kisebb, mint 45 fok, a cella HF tényezője a nulltényezőhöz társított értékre lesz állítva. Ha a HRMA nagyobb vagy egyenlő, mint 45 fok, a függvény az oldalérték módosító értéket használja. 90 fokkal egyenlő vagy annál nagyobb HRMA érték esetén a HF végtelenre lesz állítva.</li><li><strong>Lineáris</strong>: azt jelenti, hogy a HF a HRMA lineáris függvénye.</li><li><strong>Inverz lineáris</strong>: azt jelenti, hogy a HF a HRMA inverz lineáris függvénye.</li><li><strong>Táblázat</strong>: azt jelenti, hogy a HF-ek megadásához használt vízszintestényező-grafikon meghatározásához táblázatfájlt használ.</li></ul><p>A vízszintes tényezők a következő módosítókkal rendelkeznek:</p><ul><li><strong>Nulltényező</strong>: azt a vízszintes tényezőt adja meg, amelyet akkor kell használni, amikor a HRMA nulla. Ez a tényező az y tengelymetszet helyzetét határozza meg a vízszintestényező-függvények esetén.</li><li><strong>Levágási szög</strong>: -a HRMA azon szögét határozza meg, amelyen túl a HF végtelenre lesz állítva.</li><li><strong>Lejtés</strong>: annak az egyenes vonalnak a lejtését határozza meg, amelyet a<strong>Lineáris</strong>és az<strong>inverz lineáris</strong> vízszintestényező-kulcsszavakkal használ. A lejtés az adott távolságon mért emelkedés és a távolság hányadosaként van megadva (például a 45 százalékos lejtés 1/45, amely a 0,02222 értékkel adható meg).</li><li><strong>Oldalérték</strong>: a HF-et adja meg, amikor a HRMA nagyobb vagy egyenlő, mint 45 fok és kisebb, mint 90 fok, ha az<strong>Előre</strong>vízszintestényező-kulcsszó van megadva.</li><li><strong>Táblázatnév</strong>: a HF megadására használt táblázat neve.</li></ul>",
	"@@Path-Distance-Back-Link_Horizontal-Raster_tag0@@": "Az egyes cellákban a vízszintes irányt meghatározó raszter.",
	"@@Path-Distance-Back-Link_Horizontal-Raster_tag1@@": "A raszteren lévő értékeknek 0 és 360 között lévő egész számoknak kell lenniük, ahol a 0 jelenti az északot vagy a képernyő tetejét, és az értékek az óra járásával megegyező irányban nőnek. A lapos területek értéke −1. Az egyes helyeken található értékek a <strong>Vízszintes tényező</strong> paraméterrel együtt lesznek használva az egyik cellából egy szomszédos cellába történő mozgás során felmerülő vízszintes költség megállapításához.",
	"@@Path-Distance-Back-Link_Maximum-Distance_tag0@@": "A küszöbérték, amelyet a kumulatív költségértékek nem haladhatnak meg. Ha egy kumulatív költségtávolság meghaladja ezt az értéket, a cellahely kimeneti értéke NoData lesz. A legnagyobb távolság határozza meg azt a kiterjedést, amelyre az eszköz kiszámítja a kumulatív költségtávolságokat. Az alapértelmezett távolság a kimeneti raszter kiterjedésénél van.",
	"@@Path-Distance-Back-Link_Multiplier-to-Apply-to-Costs_tag0@@": "A költségértékekre alkalmazandó szorzótényező.",
	"@@Path-Distance-Back-Link_Multiplier-to-Apply-to-Costs_tag1@@": "Ez a paraméter lehetővé teszi az utazás módjának vagy a nagyságnak a szabályozását egy forrásnál. Minél nagyobb a szorzó, annál nagyobb az egyes cellákon való áthaladás költsége.",
	"@@Path-Distance-Back-Link_Multiplier-to-Apply-to-Costs_tag2@@": "Az értékeknek nullánál nagyobbaknak kell lenniük. Az alapértelmezett érték 1.",
	"@@Path-Distance-Back-Link_Multiplier-to-Apply-to-Costs_tag3@@": "Numerikus (double) érték vagy a <strong>Forrásraszter</strong> valamelyik mezője is használható e paraméter esetében.",
	"@@Path-Distance-Back-Link_Source-Raster_tag0@@": "A forráshelyek kötelező bemeneti rasztere.",
	"@@Path-Distance-Back-Link_Source-Raster_tag1@@": "Ez a raszter azokat a cellákat vagy helyeket határozza meg, amelyekből az eszköz kiszámítja a legkisebb kumulatív költségtávolságot az egyes kimeneti cellahelyekhez.",
	"@@Path-Distance-Back-Link_Source-Raster_tag2@@": "Lehet integer vagy lebegőpontos típusú.",
	"@@Path-Distance-Back-Link_Start-Cost_tag0@@": "A kiinduló költség, ahonnan kezdeni kell a költségszámítást. Ez a paraméter lehetővé teszi a forráshoz kapcsolódó fix költség megadását. A költségszámítási algoritmus ekkor nem 0-tól, hanem a megadott értéktől kezdi a számítást.",
	"@@Path-Distance-Back-Link_Start-Cost_tag1@@": "Az érték nem lehet kisebb nullánál. Az alapértelmezett érték 0.",
	"@@Path-Distance-Back-Link_Surface-Raster_tag0@@": "Az egyes cellahelyeken a magasságértékeket meghatározó raszter.",
	"@@Path-Distance-Back-Link_Surface-Raster_tag1@@": "Az értékek a cellák közötti mozgások során ténylegesen megtett felszíni távolság kiszámításához lesznek felhasználva.",
	"@@Path-Distance-Back-Link_Travel-Direction_tag0@@": "Az utazó irányát határozza meg a forrás rezisztenciaráta és a forrás kiinduló költség alkalmazásakor.",
	"@@Path-Distance-Back-Link_Travel-Direction_tag1@@": "<strong>Forrástól</strong>--A forrás rezisztenciarátát és a forrás kiinduló költséget a bemeneti forrástól indulva és a nem forráscellák felé haladva alkalmazza. Ez az alapértelmezés.",
	"@@Path-Distance-Back-Link_Travel-Direction_tag3@@": "<strong>Forráshoz</strong>--A forrás rezisztenciarátát és a forrás kiinduló költséget az egyes nem forráscelláktól indulva és a bemeneti forrás felé haladva alkalmazza.",
	"@@Path-Distance-Back-Link_Travel-Direction_tag5@@": "Adja meg vagy a <strong>Forrástól</strong> vagy pedig a <strong>Forráshoz</strong> kulcsszavát, amelyeket a rendszer valamennyi forrásra alkalmazni fog, vagy pedig adjon meg olyan mezőt a <strong>Forrástaszter</strong> beállításban, amely az egyes forrásokhoz tartozó utazási irányokat jelölő kulcsszavakat tartalmazza. A mezőnek tartalmaznia kell a következő karakterláncok egyikét: ${FROM_SOURCE} vagy ${TO_SOURCE}.",
	"@@Path-Distance-Back-Link_verticalfactor_tag0@@": "<p>A függőleges költségtényező és a függőleges relatív mozgási szög (VRMA) közötti kapcsolatot határozza meg.</p><p>Számos olyan módosítóval rendelkező tényező van, amely meghatározott függőlegestényező-grafikont azonosít. Ezenkívül egyéni grafikon is létrehozható egy tábla segítségével. A grafikonok szerepe a szomszédos cellába mozgás teljes költségének kiszámításához használt függőleges tényező azonosítása.</p><p>Az alábbi magyarázatokban két betűszót használunk: VF és VRMA. A VF jelentése függőleges tényező (vertical factor), amely a két cella közötti mozgás függőleges nehézségét határozza meg. A VRMA jelentése függőleges relatív mozgási szög (vertical relative moving angle), amely a KIINDULÓ vagy feldolgozó cella és a CÉL cella közötti lejtőszöget jelenti..</p><p>A <strong>vertikális tényező</strong>típusai a következők:</p><ul><li><strong>Bináris</strong>: azt jelzi, hogy ha a VRMA nagyobb, mint az alsó levágási szög, és kisebb, mint a felső levágási szög, a VF a nulltényezőhöz társított értékre lesz állítva; ellenkező esetben végtelenre.</li><li><strong>Lineáris</strong>: azt jelzi, hogy a VF a VRMA lineáris függvénye.</li><li><strong>Szimmetrikus lineáris</strong>: azt jelzi, hogy a VF a VRMA lineáris függvénye a VRMA negatív vagy pozitív oldalán, és a két lineáris függvény a VF (y) tengelyre nézve szimmetrikus.</li><li><strong>Inverz lineáris</strong>: azt jelzi, hogy a VF a VRMA inverz lineáris függvénye.</li><li><strong>Szimmetrikus inverz lineáris</strong>: azt jelzi, hogy a VF a VRMA inverz lineáris függvénye a VRMA negatív vagy pozitív oldalán, és a két lineáris függvény a VF (y) tengelyre nézve szimmetrikus.</li><li><strong>Cos</strong>--azt jelzi, hogy a VF a VRMA koszinuszalapú függvénye.</li><li><strong>Sec</strong>: azt jelzi, hogy a VF a VRMA szekánsalapú függvénye.</li><li><strong>Cos-Sec</strong>: azt jelzi, hogy a VF a VRMA szekánsalapú függvénye, amikor a VRMA negatív, és a VRMA koszinuszalapú függvénye, amikor a VRMA nem negatív.</li><li><strong>Sec-Cos</strong>--azt jelzi, hogy a VF a VRMA szekánsalapú függvénye, amikor a VRMA negatív, és a VRMA koszinuszalapú függvénye, amikor a VRMA nem negatív.</li><li><strong>Tablázat</strong>: azt jelenti, hogy a VF-ek megadásához használt függőlegestényező-grafikon meghatározásához táblázatfájlt használ.</li></ul><p>A függőleges kulcsszavak a következő módosítókkal rendelkeznek:</p><ul><li><strong>Nulltényező</strong>: azt a függőleges tényezőt adja meg, amelyet akkor kell használni, amikor a VRMA nulla. Ez a tényező a megadott függvény y tengelymetszetének helyzetét határozza meg. Definíció szerint a nulltényező nem alkalmazható a trigonometrikus függőleges függvényekre (COS, SEC, COS-SEC vagy SEC-COS). Az y tengelymetszetet ezek a függvények határozzák meg.</li><li><strong>Alsó levágási szög</strong>: a VRMA azon szögét határozza meg, amely alatt a VF végtelenre lesz állítva.</li><li><strong>Felső levágási szög</strong>: a VRMA azon szögét határozza meg, amely felett a VF végtelenre lesz állítva.</li><li><strong>Lejtés</strong>: annak az egyenes vonalnak a lejtését határozza meg, amelyet a<strong>Lineáris</strong>és az<strong>Inverz lineáris</strong>függőlegestényező-kulcsszavakkal használ. A lejtés az adott távolságon mért emelkedés és a távolság hányadosaként van megadva (például a 45 százalékos lejtés 1/45, amely a 0,02222 értékkel adható meg).</li><li><strong>Tablázatnév</strong>: a VF megadására használt táblázat neve.</li></ul>",
	"@@Path-Distance-Back-Link_Vertical-Raster_tag0@@": "A függőleges költségtényező és a függőleges relatív mozgási szög (VRMA) közötti kapcsolatot határozza meg.",
	"@@Path-Distance-Back-Link_Vertical-Raster_tag1@@": "A függvény az értékeket az egyik cellából egy másikba történő mozgás során felmerült függőleges tényező azonosítására használt lejtés kiszámításához használja.",
	"@@Plus_Cellsize-Type_tag0@@": "Válassza ki, hogy melyik cellaméretet szeretné használni a kimeneti raszterben. Ha mindegyik bemeneti cellaméret azonos, mindegyik lehetőség ugyanarra az eredményre vezet.",
	"@@Plus_Cellsize-Type_tag1@@": "Első--a bemeneti raszterek első cellaméretének használata.",
	"@@Plus_Cellsize-Type_tag2@@": "Utolsó--a bemeneti raszterek utolsó cellaméretének használata.",
	"@@Plus_Cellsize-Type_tag3@@": "Maximum--az összes bemeneti raszter legnagyobb cellaméretének használata. Ez az alapértelmezés.",
	"@@Plus_Cellsize-Type_tag4@@": "Átlag--az összes bemeneti raszter átlagos cellaméretének használata.",
	"@@Plus_Cellsize-Type_tag5@@": "Minimum--az összes bemeneti raszter legkisebb cellaméretének használata.",
	"@@Plus_Extent-Type_tag0@@": "Válassza ki, hogy melyik kiterjedést szeretné használni a kimeneti raszterben:",
	"@@Plus_Extent-Type_tag1@@": "Első--az első bemeneti raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Plus_Extent-Type_tag2@@": "Metszet--az átfedésben lévő pixelek kiterjedésének használata a feldolgozási kiterjedés meghatározásához. Ez az alapértelmezés.",
	"@@Plus_Extent-Type_tag3@@": "Utolsó--az utolsó bemeneti raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Plus_Extent-Type_tag4@@": "Unió--az összes raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Plus_Raster_tag0@@": "A bemenet, amelynek az értékeihez hozzáadunk.",
	"@@Plus_Raster_tag1@@": "Ennél a paraméternél használható konstans érték bemenetként, amennyiben megadja a rasztert a másik paraméternél.",
	"@@Plus_Raster2_tag0@@": "A bemenet, amelynek értékeit az első bemenet értékeihez adjuk.",
	"@@Plus_Raster2_tag1@@": "Ennél a paraméternél használható konstans érték bemenetként, amennyiben megadja a rasztert a másik paraméternél.",
	"@@Local_Cellsize-Type_tag0@@": "Válassza ki, hogy melyik cellaméretet szeretné használni a kimeneti raszterben. Ha mindegyik bemeneti cellaméret azonos, mindegyik lehetőség ugyanarra az eredményre vezet.",
	"@@Local_Cellsize-Type_tag1@@": "Első--a bemeneti raszterek első cellaméretének használata.",
	"@@Local_Cellsize-Type_tag2@@": "Utolsó--a bemeneti raszterek utolsó cellaméretének használata.",
	"@@Local_Cellsize-Type_tag3@@": "Maximum--az összes bemeneti raszter legnagyobb cellaméretének használata. Ez az alapértelmezés.",
	"@@Local_Cellsize-Type_tag4@@": "Átlag--az összes bemeneti raszter átlagos cellaméretének használata.",
	"@@Local_Cellsize-Type_tag5@@": "Minimum--az összes bemeneti raszter legkisebb cellaméretének használata.",
	"@@Local_Extent-Type_tag0@@": "Válassza ki, hogy melyik kiterjedést szeretné használni a kimeneti raszterben:",
	"@@Local_Extent-Type_tag1@@": "Első--az első bemeneti raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Local_Extent-Type_tag2@@": "Metszet--az átfedésben lévő pixelek kiterjedésének használata a feldolgozási kiterjedés meghatározásához. Ez az alapértelmezés.",
	"@@Local_Extent-Type_tag3@@": "Utolsó--az utolsó bemeneti raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Local_Extent-Type_tag4@@": "Unió--az összes raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Local_Raster_tag0@@": "A bemenet, amelynek az értékeihez hozzáadunk.",
	"@@Local_Raster_tag1@@": "Ennél a paraméternél használható konstans érték bemenetként, amennyiben megadja a rasztert a másik paraméternél.",
	"@@Local_Raster2_tag0@@": "A bemenet, amelynek értékeit az első bemenet értékeihez adjuk.",
	"@@Local_Raster2_tag1@@": "Ennél a paraméternél használható konstans érték bemenetként, amennyiben megadja a rasztert a másik paraméternél.",
	"@@Local_False-Raster_tag0@@": "Az a bemenet, amelynek az értékeit kimeneti pixelértékekként használni kell, ha a feltétel hamis. Lehet integer- vagy lebegőpontos raszter vagy konstans érték.",
	"@@Local_True-Raster_tag0@@": "Az a bemenet, amelynek az értékeit kimeneti pixelértékekként használni kell, ha a feltétel igaz. Lehet integer- vagy lebegőpontos raszter vagy konstans érték.",
	"@@Power_Cellsize-Type_tag0@@": "Válassza ki, hogy melyik cellaméretet szeretné használni a kimeneti raszterben. Ha mindegyik bemeneti cellaméret azonos, mindegyik lehetőség ugyanarra az eredményre vezet.",
	"@@Power_Cellsize-Type_tag1@@": "Első--a bemeneti raszterek első cellaméretének használata.",
	"@@Power_Cellsize-Type_tag2@@": "Utolsó--a bemeneti raszterek utolsó cellaméretének használata.",
	"@@Power_Cellsize-Type_tag3@@": "Maximum--az összes bemeneti raszter legnagyobb cellaméretének használata. Ez az alapértelmezés.",
	"@@Power_Cellsize-Type_tag4@@": "Átlag--az összes bemeneti raszter átlagos cellaméretének használata.",
	"@@Power_Cellsize-Type_tag5@@": "Minimum--az összes bemeneti raszter legkisebb cellaméretének használata.",
	"@@Power_Extent-Type_tag0@@": "Válassza ki, hogy melyik kiterjedést szeretné használni a kimeneti raszterben:",
	"@@Power_Extent-Type_tag1@@": "Első--az első bemeneti raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Power_Extent-Type_tag2@@": "Metszet--az átfedésben lévő pixelek kiterjedésének használata a feldolgozási kiterjedés meghatározásához. Ez az alapértelmezés.",
	"@@Power_Extent-Type_tag3@@": "Utolsó--az utolsó bemeneti raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Power_Extent-Type_tag4@@": "Unió--az összes raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Power_Raster_tag0@@": "Azok a bemeneti értékek, amelyeket a <strong>Raszter2</strong> paraméter által meghatározott hatványra kell emelni.",
	"@@Power_Raster_tag3@@": "Ennél a paraméternél használható konstans érték bemenetként, amennyiben megadja a rasztert a másik paraméternél.",
	"@@Power_Raster2_tag0@@": "Az azt meghatározó bemenet, hogy melyik hatványra kell emelni a <strong>Raszter</strong> értékeit.",
	"@@Power_Raster2_tag3@@": "Ennél a paraméternél használható konstans érték bemenetként, amennyiben megadja a rasztert a másik paraméternél.",
	"@@Radar-Calibration_Calibration-Type_tag0@@": "Az elvégzendő kalibráció típusa.",
	"@@Radar-Calibration_Calibration-Type_tag1@@": "Béta-nulla--a függvény a radar látóirányú távolságban mért egységnyi területre eső fényvisszaverő képességét adja vissza eredményként. Ez az alapértelmezett kalibrálási típus.",
	"@@Radar-Calibration_Calibration-Type_tag2@@": "Szigma-nulla--a függvény a radar földrajzi távolságban mért egységnyi területre eső fényvisszaverő képességét adja vissza eredményként. Az eredmények 32 bites lebegőpontos értékek, általában a 0,0 és az 1,0 közötti tartományban. Nincs adatkivágás, ha ez a lehetőséget be van jelölve.",
	"@@Radar-Calibration_Calibration-Type_tag3@@": "Gamma--A függvény a radarnak a mérés irányára merőleges síkban mért egységnyi területre eső fényvisszaverő képességét adja vissza eredményként.",
	"@@Radar-Calibration_Calibration-Type_tag4@@": "Egyik sem",
	"@@Radar-Calibration_Raster_tag0@@": "A bemeneti raszter.",
	"@@RasterInfo_Raster-Info_tag0@@": "Kiválasztható egy sablonként használni kívánt raszteres adathalmaz.",
	"@@RasterInfo_Raster_tag0@@": "A bemeneti raszter.",
	"@@Rasterize-Attributes_Attribute-Field-Names_tag0@@": "Mezők listája a <strong>Zónára vonatkozó attribútumtáblában</strong>, ahol az egyes mezők vesszővel vannak elválasztva. Az egyes mezőkben lévő értékeket egy-egy sávban képviseli a kimeneti raszterben.",
	"@@Rasterize-Attributes_Background-Value_tag0@@": "Egy raszterben lévő kimeneti sávok kezdeti pixelértéke az újraleképezés előtt.",
	"@@Rasterize-Attributes_Background-Value_tag1@@": "Ha egy pixel nem esik egy zónába, akkor háttérérték marad.",
	"@@Rasterize-Attributes_Value-Raster_tag0@@": "A kötelező bemeneti raszter.",
	"@@Rasterize-Attributes_Value-Raster_tag1@@": "A bemenetnek egysávos raszternek kell lennie. Több sávval rendelkező raszter használata esetén a függvény csak az első sávot használja.",
	"@@Rasterize-Attributes_Where-Clause_tag0@@": "Nem kötelező kiegészítő lekérdezés, amelynek célpontja a <strong>Zónára vonatkozó attribútumtábla</strong>.",
	"@@Rasterize-Attributes_Where-Clause_tag3@@": "Ha példaként a fenti táblát használná, a lekérdezés a következő lenne: ${Variable1 = 'bare earth'}.",
	"@@Rasterize-Attributes_Zonal-Attributes-Table_tag0@@": "Az egy helyi vektoroselem-osztályra mutató útvonalként meghatározott, zónára vonatkozó attribútumok, egy táblára mutató útvonal, egy vektorosszolgáltatás-rétegre mutató URL vagy egy JSON-karakterlánc.",
	"@@Rasterize-Attributes_Zonal-Attributes-Table_tag1@@": "A JSON-ban a zónaazonosítók és egész számok egy tömbje közötti leképezés gyűjteményeként kell leírni. ${{ zoneId:[f1,f2,...,fn], ... } }",
	"@@Rasterize-Attributes_Zone-Field_tag0@@": "A zónaazonosító értékeket tartalmazó mezőnév.",
	"@@Rasterize-Attributes_Zone-Raster_tag0@@": "Egy nem kötelező, egy sávval rendelkező raszter, amelyben mindegyik pixel a helyhez társított zónaazonosítót tartalmazza. A zónaazonosító szerepe sorok keresése a zónára vonatkozó attribútumtáblában zónaspecifikus betöltéshez.",
	"@@Rasterize-Attributes_Zone-Raster_tag1@@": "Hagyja üresen a paramétert, ha csak az attribútumot szeretné importálni.",
	"@@Rasterize-Features_Field_tag0@@": "Az egyes elemek azonosítására használt mezők kiválasztása.",
	"@@Rasterize-Features_Input-Features_tag0@@": "A raszteres formátumúvá alakítandó vektoroselem-osztály kiválasztása.",
	"@@Rasterize-Features_Raster_tag0@@": "Raszter kiválasztása a vektoros elem átalakításához használt cellaméret és kiterjedés megadásához.",
	"@@Rasterize-Features_Resolve-Overlap-Method_tag0@@": "Az átfedésben lévő vektoros elemek kezelésének módja:",
	"@@Rasterize-Features_Resolve-Overlap-Method_tag1@@": "<strong>Első</strong>--Az átfedésben lévő területek a listában szereplő első adathalmazból kapnak értéket.",
	"@@Rasterize-Features_Resolve-Overlap-Method_tag3@@": "<strong>Utolsó</strong>--Az átfedésben lévő területek a listában szereplő utolsó adathalmazból kapnak értéket.",
	"@@Rasterize-Features_Resolve-Overlap-Method_tag5@@": "<strong>Legkisebb</strong>--Az átfedésben lévő területek a legkisebb vektoros elemből kapnak értéket.",
	"@@Rasterize-Features_Resolve-Overlap-Method_tag7@@": "<strong>Legnagyobb</strong>--Az átfedésben lévő területek a legnagyobb vektoros elemből kapnak értéket.",
	"@@Recast_Overrides_tag0@@": "Mozaik-adathalmaz módosításához használt változónevek és felhasználó által definiált értékek táblázata.",
	"@@Recast_Raster_tag0@@": "Az a raszteres termék, amelyikre az Átdolgozás függvényt alkalmazni szeretné.",
	"@@Region-Group_Add-Link_tag0@@": "Ezzel adható meg, hogy lesz-e hivatkozásmező adva a kimenet táblájához.",
	"@@Region-Group_Add-Link_tag1@@": "<strong>Hivatkozás hozzáadása</strong>--A rendszer ${LINK} elemet ad hozzá a kimeneti raszter táblájához.",
	"@@Region-Group_Add-Link_tag3@@": "<strong>Nincs hivatkozás</strong>--A kimeneti raszter attribútumtáblája csak az ${Value} és a ${Count} elemeket fogja tartalmazni.",
	"@@Region-Group_Excluded-Value_tag0@@": "Úgy azonosít egy értéket, hogy ha egy cellahely tartalmazza az értéket, akkor nem lesz kiértékelve a térbeli összekapcsolhatóság, függetlenül attól, hogy mi van megadva a szomszédok számának (NÉGY vagy NYOLC).",
	"@@Region-Group_Excluded-Value_tag1@@": "A kizárt értéket tartalmazó cellákat NoData értékként kezeli, és kizárja a számításokból. A kizárt értéket tartalmazó cellahelyek 0 értéket kapnak a kimeneti raszteren.",
	"@@Region-Group_Excluded-Value_tag2@@": "A kizárt érték a háttérérték fogalmához vagy egy maszk alkalmazásához hasonló. Akkor kell értéket adni a paraméternek, ha a <strong>${CROSS}</strong> paraméter meg van adva.",
	"@@Region-Group_Number-of-Neighbor-Cells_tag0@@": "A cellák közötti összekapcsolhatóság kiértékeléséhez használt szomszédos cellák száma.",
	"@@Region-Group_Number-of-Neighbor-Cells_tag1@@": "<strong>NÉGY</strong>--Csak akkor határozza meg az azonos értékű cellák közötti összekapcsolhatóságot, ha a cellák közvetlenül a négy legközelebbi szomszédtól balra vagy jobbra, vagy azok felett vagy alatt található. Ez az alapértelmezés.",
	"@@Region-Group_Number-of-Neighbor-Cells_tag3@@": "<strong>NYOLC</strong>A-akkor határozza meg az azonos értékű cellák közötti összekapcsolhatóságot, ha azok közvetlenül egymás nyolccellás szomszédságában vannak. Ez azt jelenti, hogy egymástól jobbra, balra, felfelé vagy átlósan.",
	"@@Region-Group_Zone-Connectivity_tag0@@": "Azt határozza meg, hogy melyik cellákat kell számításba venni az összekapcsolhatóság vizsgálatakor.",
	"@@Region-Group_Zone-Connectivity_tag1@@": "<strong>BELÜL</strong>--Az ugyanazon a zónán belül azonos bemeneti értékek között vizsgálja az összekapcsolhatóságot. Ez az alapértelmezés.",
	"@@Region-Group_Zone-Connectivity_tag3@@": "Csak azok a cellák csoportosíthatók, amelyek ugyanabból a zónából (érték) származnak, mint amely megfelel az összekapcsolhatóság <strong>Szomszédok száma</strong> paraméter (négy- vagy nyolcirányú) által meghatározott térbeli követelményeinek.",
	"@@Region-Group_Zone-Connectivity_tag6@@": "<strong>KERESZT</strong>--Az összekapcsolhatóságot a szomszédok száma paraméter által meghatározott térbeli követelmények alapján vizsgálja bármilyen értékkel rendelkező cellák között, a kizárt érték paraméter által kizárt érték kivételével.",
	"@@Region-Group_Zone-Connectivity_tag8@@": "Ennek a beállításnak a használatakor meg kell adni a <strong>Kizárt érték</strong> paraméter értékét.",
	"@@Region-Group_Zone-Raster_tag0@@": "A kötelező bemeneti raszter, amelynek azonosítani kell az egyedi csatlakozó régióit.",
	"@@Region-Group_Zone-Raster_tag1@@": "Integer típusúnak kell lennie.",
	"@@Region-Grow_Fill-Value-Field_tag0@@": "Az attribútumtábla azon mezője, amely meghatározza a kitöltési értéket a pixelcsoporthoz. Egy több sávval rendelkező képen minden sáv ezt az értéket kapja.",
	"@@Region-Grow_Max-Growth-Radius-Field_tag0@@": "Az attribútumtábla azon mezője, amely meghatározza a maximális növekedési sugarat a kép térbeli referenciájának mértékegységében.",
	"@@Region-Grow_Raster_tag0@@": "A raszter, amelyen végre kívánja hajtani ezt a függvényt.",
	"@@Region-Grow_Seed-Points_tag0@@": "Az algoritmus kezdőértékeként szolgáló, pontszerű vektoros elemek osztálya. Mindegyik kezdőpont az attribútumtábla egy bejegyzésének felel meg, amely tartalmazza a maximális növekedési sugárra, a hasonlósági küszöbre és a kitöltési értékre vonatkozó információkat.",
	"@@Region-Grow_Similarity-Threshold-Field_tag0@@": "Az attribútumtábla azon mezője, amely meghatározza a hasonlósági küszöböt euklideszi távolságként a spektrális térben.",
	"@@Remap_Allow-Unmatched-Pixel-Values_tag0@@": "Az újraosztályozási táblából hiányzó értékek megtarthatják az értéküket vagy NoData értéket kaphatnak.",
	"@@Remap_Allow-Unmatched-Pixel-Values_tag1@@": "Nincs bejelölve: a bemeneti raszter bármely pixele, amely nincs újraosztályozva egy újraleképezési táblában, megtartja az értékét, és a saját helyére lesz beírva a kimeneti raszterben. Ez az alapértelmezés.",
	"@@Remap_Allow-Unmatched-Pixel-Values_tag2@@": "Be van jelölve:: a bemeneti raszter bármely pixele, amely nincs újraosztályozva egy újraleképezési táblában, a NoData értéket kapja a saját helyén a kimeneti raszterben.",
	"@@Remap_Input-Field_tag0@@": "Ezzel választható ki az újraleképezendő bemeneti pixelértéket meghatározó mező.",
	"@@Remap_Input-Field_tag1@@": "Ha a tábla értéktartománnyal rendelkezik, ez lesz a minimális mezőérték, és a <strong>bemeneti maximális mező</strong> paramétert is meg kell adni.",
	"@@Remap_Input-Max-Field_tag0@@": "Ezzel választható ki a maximális mezőérték, ha a táblánál meg van adva értéktartomány.",
	"@@Remap_List_tag0@@": "Ezzel adhatók meg a térképértékek, az értéktartomány minimuma és maximuma és az új újraleképezési értékek. Ezenkívül az értéktartomány beállítható NoData pixelekként.",
	"@@Remap_Output-Field_tag0@@": "Ezzel választható ki a kimeneti újraleképezett értékként használt mező.",
	"@@Remap_Raster_tag0@@": "A bemeneti raszter.",
	"@@Remap_Remap-Definition-Type_tag0@@": "Ezzel választható ki az újraleképezési értékek beállításához használni kívánt lehetőség:",
	"@@Remap_Remap-Definition-Type_tag1@@": "Lista--a kimeneti pixelértékké leképezni kívánt pixelértékek egy tartományának meghatározása.",
	"@@Remap_Remap-Table-Type_tag0@@": "A bemeneti raszter újraleképezéséhez használt tábla típusának kiválasztása:",
	"@@Remap_Remap-Table-Type_tag1@@": "Egyszerű--A <strong>Tábla újbóli leképezése</strong> bemenetet használja a <strong>Bemeneti mezőpixel</strong> pixelértékeinek újraleképezéséhez a <strong>Kimeneti mező</strong> paraméter megfelelő értékéhez. Ez a módszer gyorsítótárazza az újraleképezési táblát, hogy az gyorsabb legyen.",
	"@@Remap_Remap-Table-Type_tag8@@": "Dinamikus--ez a módszer nem gyorsítótárazza az újraleképezési táblát, és minden kérés (mozgatás, nagyítás vagy frissítés) esetén egy újabb lekérdezést végez. Ha a tábla megváltozik, a következő kérés annak megfelelően dinamikusan újraleképezheti az értékeket.",
	"@@Remap_Remap-Table-Type_tag9@@": "Újbóli hozzárendelés--az újraosztályozási folyamathoz egy egyedi táblát használ, amelyben minden sor újraleképezése csak az egyes vektoros elemek határától függően megy végbe.",
	"@@Remap_Remap-Table_tag0@@": "Az újraleképezési értékeket beállító tábla megkeresése tallózással.",
	"@@Reproject_Raster_tag0@@": "A raszteres adathalmaz, amelyen újravetítést vagy újra-mintavételezést kell elvégezni.",
	"@@Reproject_Spatial-Reference_tag0@@": "Az adatok újravetítéséhez használt koordináta-rendszer.",
	"@@Reproject_X-Cellsize_tag0@@": "Az x dimenzió, amelyre nézve az adatok újra-mintavételezését el kell végezni. Nem kötelező megadni. Ha az érték 0 vagy kisebb, a kimeneti befoglaló téglalap (kiterjedés és cellaméret) számítása a bemeneti raszterből történik.",
	"@@Reproject_X-Registration-Point_tag0@@": "Az adathalmaz bal felső sarkának meghatározásához használt x koordináta. Ezt a koordinátát az új térbeli referencia mértékegységében kell megadni. Ha az <strong>X cellaméret</strong> és az <strong>Y cellaméret</strong> paraméter is nagyobb 0-nál, akkor az <strong>X regisztrációs pont</strong> és az <strong>Y regisztrációs pont</strong> paraméterekkel együtt kell használni őket a kimeneti befoglaló téglalap meghatározásához.",
	"@@Reproject_Y-Cellsize_tag0@@": "Az y dimenzió, amelyre nézve az adatok újra-mintavételezését el kell végezni. Nem kötelező megadni. Ha az érték 0 vagy kisebb, a kimeneti befoglaló téglalap (kiterjedés és cellaméret) számítása a bemeneti raszterből történik.",
	"@@Reproject_Y-Registration-Point_tag0@@": "Az adathalmaz bal felső sarkának meghatározásához használt y koordináta. Ezt a koordinátát az új térbeli referencia mértékegységében kell megadni. Ha az <strong>X cellaméret</strong> és az <strong>Y cellaméret</strong> paraméter is nagyobb 0-nál, akkor az <strong>X regisztrációs pont</strong> és az <strong>Y regisztrációs pont</strong> paraméterekkel együtt kell használni őket a kimeneti befoglaló téglalap meghatározásához.",
	"@@Resample_Input-Cellsize_tag0@@": "A bemeneti raszter pixelcellamérete.",
	"@@Resample_Output-Cellsize_tag0@@": "A kimeneti raszter pixelcellamérete. A cellaméret módosítható, de a raszteres adathalmaz kiterjedése nem változik. Egy felhasználó által definiált cellaméretből való újra-mintavételezés sokkal lassabb lehet, mint a rendszer alapértelmezett beállítása, mivel a rendszer alapértelmezett újra-mintavételezése a lehető legkevesebb adatot dolgozza fel a lehető legközelebbi felbontásból.",
	"@@Resample_Raster_tag0@@": "A bemeneti raszter, amelyen újra-mintavételezést kell elvégezni.",
	"@@Resample_Resampling-Type_tag0@@": "<strong>legközelebbi szomszéd</strong>--A legközelebbi bemeneti pixelt használva számítja ki a kimeneti pixel értékét. A NoData pixelek változatlanok maradnak a kimeneti raszteres adathalmazban. Ez az alapértelmezés.",
	"@@Resample_Resampling-Type_tag2@@": "<strong>Bilineáris interpoláció</strong>--A négy legközelebbi pixel távolsággal súlyozott értékét használva számítja ki a pixel értékét. Ez a módszer kevésbé számításigényes.",
	"@@Resample_Resampling-Type_tag4@@": "<strong>Köbös konvolúció</strong>--Az adott pixel új értékét a 16 legközelebbi bemeneti pixel középpontján áthaladó sima görbe illesztésével határozza meg.",
	"@@Resample_Resampling-Type_tag6@@": "<strong>Többség</strong>--A 16 legközelebbi pixelben többségben lévő pixelértéket használva számítja ki a pixel értékét. A NoData pixelek változatlanok maradnak a kimeneti raszteres adathalmazban.",
	"@@Resample_Resampling-Type_tag8@@": "<strong>Bilineáris interpoláció plusz</strong>--A <strong>Bilineáris interpoláció</strong>segítségével számol, azzal a kivétellel, hogy az élek mentén található pixeleket NoData értékként definiálja, és nem replikálja vagy veszi figyelembe a számításnál. A <strong>Bilineáris interpoláció plusz</strong> metódust használja csempézett adatok esetén, mert azzal az élek jobban egyeznek.",
	"@@Resample_Resampling-Type_tag14@@": "<strong>Gauss-elmosás</strong>--Gauss-konvolúciót alkalmaz a forrásraszterre, és az elmosott raszterhez legközelebb eső négy pixel távolsággal súlyozott értékét használva számítja ki a pixel értékét. Alkalmas zaj eltávolítására újra-mintavételezett adatból, és nagyobb pixelméretre történő átméretezéshez.",
	"@@Resample_Resampling-Type_tag16@@": "<strong>Gauss-elmosás plusz</strong>--Ugyanazt a metódust használja, mint a <strong>Gauss-elmosás</strong>, azzal a kivétellel, hogy az élek mentén található pixeleket NoData értékként definiálja, és nem replikálja vagy veszi figyelembe a számításnál. A <strong>Gauss-elmosás plusz</strong> metódust alkalmazza csempézett adatok esetén, mert azzal az élek jobban egyeznek.",
	"@@Resample_Resampling-Type_tag22@@": "<strong>Átlag</strong>--Mindegyik célpixelnél az átfedésben lévő pixelek átlagos értékét használva számítja ki a pixelértékeket.",
	"@@Resample_Resampling-Type_tag24@@": "<strong>Minimum</strong>--Az átfedésben lévő pixelek minimumát használva számítja ki a pixel értékét. A NoData pixelek változatlanok maradnak a kimeneti raszteres adathalmazban.",
	"@@Resample_Resampling-Type_tag26@@": "<strong>Maximum</strong>--A folytonos adatokhoz megfelelő, simább kimeneti képet eredményez, mint a Legközelebbi szomszéd újra-mintavételezési módszer.",
	"@@Resample_Resampling-Type_tag28@@": "<strong>Vektoros átlag</strong>--A nagyság–irány vektoros átlagát számítja ki az összes érintett pixelt felhasználva. Ez a módszer csak két, a nagyságot és az irányt képviselő sávval rendelkező rasztereknél alkalmazható. Először U-V-vé alakítja a nagyság–irányt, majd a célpixel U-V értékének kiszámításához veszi az összes érintett pixel számtani átlagát, és visszaalakítja nagyság–iránnyá.",
	"@@Round-Down_Cellsize-Type_tag0@@": "Válassza ki, hogy melyik cellaméretet szeretné használni a kimeneti raszterben. Ha mindegyik bemeneti cellaméret azonos, mindegyik lehetőség ugyanarra az eredményre vezet.",
	"@@Round-Down_Cellsize-Type_tag1@@": "Első--a bemeneti raszterek első cellaméretének használata.",
	"@@Round-Down_Cellsize-Type_tag2@@": "Utolsó--a bemeneti raszterek utolsó cellaméretének használata.",
	"@@Round-Down_Cellsize-Type_tag3@@": "Maximum--az összes bemeneti raszter legnagyobb cellaméretének használata. Ez az alapértelmezés.",
	"@@Round-Down_Cellsize-Type_tag4@@": "Átlag--az összes bemeneti raszter átlagos cellaméretének használata.",
	"@@Round-Down_Cellsize-Type_tag5@@": "Minimum--az összes bemeneti raszter legkisebb cellaméretének használata.",
	"@@Round-Down_Extent-Type_tag0@@": "Válassza ki, hogy melyik kiterjedést szeretné használni a kimeneti raszterben:",
	"@@Round-Down_Extent-Type_tag1@@": "Első--az első bemeneti raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Round-Down_Extent-Type_tag2@@": "Metszet--az átfedésben lévő pixelek kiterjedésének használata a feldolgozási kiterjedés meghatározásához. Ez az alapértelmezés.",
	"@@Round-Down_Extent-Type_tag3@@": "Utolsó--az utolsó bemeneti raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Round-Down_Extent-Type_tag4@@": "Unió--az összes raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Round-Down_Raster_tag0@@": "A lefelé kerekítendő bemeneti értékek.",
	"@@Round-Up_Cellsize-Type_tag0@@": "Válassza ki, hogy melyik cellaméretet szeretné használni a kimeneti raszterben. Ha mindegyik bemeneti cellaméret azonos, mindegyik lehetőség ugyanarra az eredményre vezet.",
	"@@Round-Up_Cellsize-Type_tag1@@": "Első--a bemeneti raszterek első cellaméretének használata.",
	"@@Round-Up_Cellsize-Type_tag2@@": "Utolsó--a bemeneti raszterek utolsó cellaméretének használata.",
	"@@Round-Up_Cellsize-Type_tag3@@": "Maximum--az összes bemeneti raszter legnagyobb cellaméretének használata. Ez az alapértelmezés.",
	"@@Round-Up_Cellsize-Type_tag4@@": "Átlag--az összes bemeneti raszter átlagos cellaméretének használata.",
	"@@Round-Up_Cellsize-Type_tag5@@": "Minimum--az összes bemeneti raszter legkisebb cellaméretének használata.",
	"@@Round-Up_Extent-Type_tag0@@": "Válassza ki, hogy melyik kiterjedést szeretné használni a kimeneti raszterben:",
	"@@Round-Up_Extent-Type_tag1@@": "Első--az első bemeneti raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Round-Up_Extent-Type_tag2@@": "Metszet--az átfedésben lévő pixelek kiterjedésének használata a feldolgozási kiterjedés meghatározásához. Ez az alapértelmezés.",
	"@@Round-Up_Extent-Type_tag3@@": "Utolsó--az utolsó bemeneti raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Round-Up_Extent-Type_tag4@@": "Unió--az összes raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Round-Up_Raster_tag0@@": "A felfelé kerekítendő bemeneti értékek.",
	"@@Segment-Mean-Shift_Minimum-Segment-Size-in-Pixels_tag0@@": "A minimális szegmensméret pixelben mérve. Ez az érték a minimális leképezési mértékegységhez kapcsolódik, és kiszűri a kisebb pixelblokkokat. A megadott értéknél kisebb szegmensek összeolvadnak a legjobban illeszkedő szomszédos szegmensükkel.",
	"@@Segment-Mean-Shift_Raster_tag0@@": "A szegmentálni kívánt bemeneti raszter.",
	"@@Segment-Mean-Shift_Segment-boundaries-only_tag0@@": "A szegmens határvonala fekete szintvonalként jelenik meg az egyes szegmensek körül. Ez hasznos, hogy meg tudja különböztetni az azonos színű szomszédos szegmenseket.",
	"@@Segment-Mean-Shift_Segment-boundaries-only_tag1@@": "Nincs bejelölve--a szegmensek határai nem jelennek meg. Ez az alapértelmezés.",
	"@@Segment-Mean-Shift_Segment-boundaries-only_tag2@@": "Bejelölve--a szegmensek határai fekete szintvonalként jelennek meg az egyes szegmensek körül.",
	"@@Segment-Mean-Shift_Spatial-Detail_tag0@@": "Az objektumok térbeli jellemzők alapján történő elkülönítésének relatív fontossága.",
	"@@Segment-Mean-Shift_Spatial-Detail_tag1@@": "Az érvényes egész számok tartománya 1 és 20 között van. A kisebb értékek széles osztályokat és nagyobb simítást eredményeznek. A nagyobb értékek a térben kis méretű és klasztereket alkotó elemek megkülönböztetésére alkalmasak. Például egy várostérkép esetén osztályozhat szokásos vízhatlan felszíni elemeket alacsonyabb térbeli részletességi érték használatával, vagy osztályozhat külön osztályokként épületeket és utakat magasabb térbeli részletességi érték használatával.",
	"@@Segment-Mean-Shift_Spectral-Detail_tag0@@": "Az objektumok színjellemzők alapján történő elkülönítésének relatív fontossága.",
	"@@Segment-Mean-Shift_Spectral-Detail_tag1@@": "Az érvényes lebegőpontos értékek tartománya 1,0 és 20,0 között van. A kisebb értékek széles osztályokat és nagyobb simítást eredményeznek. Magasabb érték akkor megfelelő, amikor nagyjából hasonló spektrális jellemzőkkel rendelkező elemeket szeretne megkülönböztetni. Ha például magasabb spektrális részletességi értéket használ egy erdős térképen, jobban meg fogja tudni különböztetni a különböző fafajtákat.",
	"@@Segment-Mean-Shift_maximumsegmentsizeinpixels_tag0@@": "<p>A szegmens maximális mérete. A megadott méretnél nagyobb szegmenseket a rendszer elosztja. E paramétert használva kiküszöbölhetők a nagy szegmensekből eredő inkonzisztenciák előfordulása a kimeneti rétegben. Az alapértelmezett érték -1.</p>",
	"@@Sentinel-1-Radiometric-Calibration_Calibration-Type_tag0@@": "Négy kalibrálási típus közül választhat:",
	"@@Sentinel-1-Radiometric-Calibration_Calibration-Type_tag1@@": "<strong>Béta-nulla</strong>--A radar fényerő-együtthatóját tartalmazó kimenetet eredményez.",
	"@@Sentinel-1-Radiometric-Calibration_Calibration-Type_tag3@@": "<strong>Szigma-nulla</strong>--A talaj egységnyi területéről az antennába visszatérő visszaszórás, a földrajzi távolsághoz viszonyítva.",
	"@@Sentinel-1-Radiometric-Calibration_Calibration-Type_tag5@@": "<strong>Gamma</strong>--Az antennaminták meghatározásához hasznos kibocsátott és visszatérő energia mérése.",
	"@@Sentinel-1-Radiometric-Calibration_Calibration-Type_tag7@@": "<strong>Nincs</strong>--Nem alkalmaz korrekciót. Ez az alapértelmezés.",
	"@@Sentinel-1-Radiometric-Calibration_Raster_tag0@@": "A feldolgozni kívánt Sentinel-1 Level-1 GRD vagy SLC bemeneti raszter.",
	"@@Sentinel-1-Radiometric-Calibration_Raster_tag1@@": "A függvény a LUT-fájlt használja a termikus korrekció alkalmazásához vagy a korrekció megszüntetéséhez, a LUT tartalmától függően.",
	"@@Sentinel-1-Thermal-Noise-Removal_Raster_tag0@@": "A feldolgozni kívánt Sentinel-1 bemeneti raszter.",
	"@@Sentinel-1-Thermal-Noise-Removal_Raster_tag1@@": "A függvény a LUT-fájlt használja a termikus korrekció alkalmazásához vagy a korrekció megszüntetéséhez, a LUT tartalmától függően.",
	"@@Set-Null_Cellsize-Type_tag0@@": "Válassza ki, hogy melyik cellaméretet szeretné használni a kimeneti raszterben. Ha mindegyik bemeneti cellaméret azonos, mindegyik lehetőség ugyanarra az eredményre vezet.",
	"@@Set-Null_Cellsize-Type_tag1@@": "Első--a bemeneti raszterek első cellaméretének használata.",
	"@@Set-Null_Cellsize-Type_tag2@@": "Utolsó--a bemeneti raszterek utolsó cellaméretének használata.",
	"@@Set-Null_Cellsize-Type_tag3@@": "Maximum--az összes bemeneti raszter legnagyobb cellaméretének használata. Ez az alapértelmezés.",
	"@@Set-Null_Cellsize-Type_tag4@@": "Átlag--az összes bemeneti raszter átlagos cellaméretének használata.",
	"@@Set-Null_Cellsize-Type_tag5@@": "Minimum--az összes bemeneti raszter legkisebb cellaméretének használata.",
	"@@Set-Null_Extent-Type_tag0@@": "Válassza ki, hogy melyik kiterjedést szeretné használni a kimeneti raszterben:",
	"@@Set-Null_Extent-Type_tag1@@": "Első--az első bemeneti raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Set-Null_Extent-Type_tag2@@": "Metszet--az átfedésben lévő pixelek kiterjedésének használata a feldolgozási kiterjedés meghatározásához. Ez az alapértelmezés.",
	"@@Set-Null_Extent-Type_tag3@@": "Utolsó--az utolsó bemeneti raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Set-Null_Extent-Type_tag4@@": "Unió--az összes raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Set-Null_False-Raster_tag0@@": "Az a bemenet, amelynek az értékeit kimeneti pixelértékekként használni kell, ha a feltétel hamis. Lehet integer- vagy lebegőpontos raszter vagy konstans érték.",
	"@@Set-Null_Raster_tag0@@": "Egy logikai matematikai raszterfüggvény logikai eredményét reprezentáló bemeneti raszter. Az értékei 1 (ha igaz) vagy 0 (ha hamis). Lehet integer- vagy lebegőpontos raszter.",
	"@@Shaded-Relief_Altitude_tag0@@": "A magasság a nap tengerszint feletti magasságának megfelelő szög a horizont felett, amelynek értéke 0 és 90 fok között lehet. A 0 fok azt jelzi, hogy a nap a horizonton van, vagyis ugyanazon a vízszintes síkon, mint a vonatkoztatási rendszer. A 90 fok azt jelzi, hogy a nap közvetlenül a fejünk fölött van. Az alapértelmezett érték 45 fok a horizont felett.",
	"@@Shaded-Relief_Azimuth_tag0@@": "Az azimut a nap relatív helyzete a horizont mentén (fokokban megadva). Ezt a pozíciót a nap szöge jelzi az óra járásával egyező irányban mérve, észak felől. A 0 fokos azimut északot jelez, kelet 90 fok, dél 180 fok, nyugat pedig 270 fok.",
	"@@Shaded-Relief_Color-Scheme-Type_tag0@@": "Ezzel adható meg, hogy az árnyékolt domborzat megjelenítéséhez színskálát vagy színtérképet használjon a függvény.",
	"@@Shaded-Relief_Color-Scheme-Type_tag1@@": "<strong>Színskála</strong>--Ha a <strong>Színskála</strong>lehetőséget választja, ki kell választania a megfelelő színskálát.",
	"@@Shaded-Relief_Color-Scheme-Type_tag5@@": "<strong>Színtrkép</strong>--Ha a <strong>Színtérkép</strong> lehetőséget választja, az alkalmazás kérni fogja a használni kívánt színtérképfájlt.",
	"@@Shaded-Relief_Disable-default-edge-pixel-interpolation_tag0@@": "Ezzel adható meg, hogy az élek alapértelmezett pixelinterpolációja le legyen-e tiltva.",
	"@@Shaded-Relief_Disable-default-edge-pixel-interpolation_tag1@@": "Nincs bejelölve--az alkalmazás egységesen bilineáris újra-mintavételezést alkalmaz az árnyékolt domborzat újra-mintavételezéséhez. Ez az alapértelmezés.",
	"@@Shaded-Relief_Disable-default-edge-pixel-interpolation_tag2@@": "Bejelölve--az alkalmazás bilineáris újra-mintavételezést használ az árnyékolt domborzaton belül, kivéve a raszterek élei mentén és a NoData pixelek mellett. Ezeket a pixeleket NoData értékkel tölti fel, mert ezzel csökkenti azt az előforduló hatást, amely miatt az élek élesek.",
	"@@Shaded-Relief_Disable-default-edge-pixel-interpolation_tag3@@": "Ezt a beállítást használva elkerülhetők az újra-mintavételezésből adódóan előforduló műtárgyak egy raszter élei mentén. A raszter éle mentén vagy a pixelek mellett található kimeneti pixelek NoData értékkel lesznek feltöltve, ezért ajánlott ezt a beállítást csak akkor használni, amikor más, átfedésben lévő pixeleket tartalmazó raszterek is előfordulnak. Amikor az átfedésben lévő pixelek rendelkezésre állnak, ezeken a NoData értékkel rendelkező területeken megjelennek az átfedésben lévő pixelértékek, ahelyett, hogy üresek maradnának.",
	"@@Shaded-Relief_Raster_tag0@@": "A bemeneti magasságraszter.",
	"@@Shaded-Relief_Scaling_tag0@@": "Az árnyékolt eredmény méretarányának dinamikus módosítása a z tényező kétféle módosításával történhet:",
	"@@Shaded-Relief_Scaling_tag1@@": "<strong>Nincs</strong>--Nincs átméretezés. Ez a helyi területet lefedő, szimpla raszteres adathalmazoknál ideális. Az egész világot lefedő adathalmazoknál, ahol a magasságváltozás jelentős és több méretaránnyal rendelkező térképek vannak, nem ajánlott a használata, mert kis méretaránynál alig változó felszíni domborzatot eredményez.",
	"@@Shaded-Relief_Scaling_tag3@@": "<strong>Igazított</strong>--Nemlineáris kiigazítást alkalmaz az alapértelmezett <strong>Pixelméret-erősség</strong> és <strong>Pixelméret-tényeyző</strong> értékek felhasználásával, ami a magasságváltozás (méretarány) széles választékához megfelelő, amikor a megtekintő nagyít és kicsinyít. Az egész világot tartalmazó adathalmaz használatakor az <strong>Igazított</strong> beállítás használata javasolt.",
	"@@Shaded-Relief_Z-Factor_tag0@@": "A z tényező egy arányszám, amelyet a magasságértékek átváltásához használunk két célból:",
	"@@Shaded-Relief_Z-Factor_tag1@@": "A magasság mértékegységének (pl. méter vagy láb) átváltásához a réteg vízszintes koordinátáinak mértékegységére, amely lehet láb, méter vagy fok.",
	"@@Shaded-Relief_Z-Factor_tag2@@": "Függőleges felnagyítás eléréséhez a vizuális hatás érdekében.",
	"@@Shaded-Relief_Z-Factor_tag3@@": "Az árnyékolt eredmény méretarányának dinamikus módosítása a z tényező kétféle módosításával történhet:",
	"@@Shaded-Relief_Z-Factor_tag4@@": "<strong>Nincs</strong>--Nincs átméretezés. Ez a helyi területet lefedő, szimpla raszteres adathalmazoknál ideális. Az egész világot lefedő adathalmazoknál, ahol a magasságváltozás jelentős és több méretaránnyal rendelkező térképek vannak, nem ajánlott a használata, mert kis méretaránynál alig változó felszíni domborzatot eredményez.",
	"@@Shaded-Relief_Z-Factor_tag6@@": "<strong>Igazított</strong>--Nemlineáris kiigazítást alkalmaz az alapértelmezett <strong>Pixelméret-erősség</strong> és <strong>Pixelméret-tényeyző</strong> értékek felhasználásával, ami a magasságváltozás (méretarány) széles választékához megfelelő, amikor a megtekintő nagyít és kicsinyít. Az egész világot tartalmazó adathalmaz használatakor az <strong>Igazított</strong> beállítás használata javasolt.",
	"@@Shaded-Relief_hillshadetype_tag0@@": "A domborzatárnyékolás megvilágítási forrását szabályozza.",
	"@@Shaded-Relief_hillshadetype_tag1@@": "<strong>Hagyományos</strong> – egyetlen megvilágítási irányból számítja a domborzatárnyékolást. Beállíthatja az <strong>Azimut</strong> és a <strong>Magasság</strong> beállítás értékét a fényforrás helyének szabályozásához. Ez az alapértelmezés.",
	"@@Shaded-Relief_hillshadetype_tag2@@": "<strong>Többirányú</strong> – több forrásból egyesíti a fényt a felszín szebb megjelenítéséhez.",
	"@@Shaded-Relief_PSPower_tag0@@": "A <strong>pixelméret-erősség</strong> a magasság változásait (vagy a méretarányt) veszi figyelembe, miközben a megtekintő nagyítja és kicsinyíti a térkép-megjelenítést. Ez nem más, mint a pixelméret kifejezésen alkalmazott hatványkitevő abban az egyenletben, amely szabályozza a <strong>Z tényező</strong> változásának ütemét a domborzat jelentős veszteségének elkerülése érdekében.",
	"@@Shaded-Relief_PSPower_tag1@@": "Ez a paraméter csak akkor érvényes, ha a <strong>méretezés</strong> típusa <strong>Beállított</strong>. Az alapértelmezett érték 0,664.",
	"@@Shaded-Relief_PSZFactor_tag0@@": "A <strong>pixelméret-tényező</strong> a méretarány változásait veszi figyelembe, miközben a megtekintő nagyítja és kicsinyíti a térkép-megjelenítést. A <strong>Z tényező</strong> változásának ütemét módosítja.",
	"@@Shaded-Relief_PSZFactor_tag1@@": "Ez a paraméter csak akkor érvényes, ha a <strong>méretezés</strong> típusa <strong>Beállított</strong>. Az alapértelmezett érték 0,024.",
	"@@Sin_Cellsize-Type_tag0@@": "Válassza ki, hogy melyik cellaméretet szeretné használni a kimeneti raszterben. Ha mindegyik bemeneti cellaméret azonos, mindegyik lehetőség ugyanarra az eredményre vezet.",
	"@@Sin_Cellsize-Type_tag1@@": "Első--a bemeneti raszterek első cellaméretének használata.",
	"@@Sin_Cellsize-Type_tag2@@": "Utolsó--a bemeneti raszterek utolsó cellaméretének használata.",
	"@@Sin_Cellsize-Type_tag3@@": "Maximum--az összes bemeneti raszter legnagyobb cellaméretének használata. Ez az alapértelmezés.",
	"@@Sin_Cellsize-Type_tag4@@": "Átlag--az összes bemeneti raszter átlagos cellaméretének használata.",
	"@@Sin_Cellsize-Type_tag5@@": "Minimum--az összes bemeneti raszter legkisebb cellaméretének használata.",
	"@@Sin_Extent-Type_tag0@@": "Válassza ki, hogy melyik kiterjedést szeretné használni a kimeneti raszterben:",
	"@@Sin_Extent-Type_tag1@@": "Első--az első bemeneti raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Sin_Extent-Type_tag2@@": "Metszet--az átfedésben lévő pixelek kiterjedésének használata a feldolgozási kiterjedés meghatározásához. Ez az alapértelmezés.",
	"@@Sin_Extent-Type_tag3@@": "Utolsó--az utolsó bemeneti raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Sin_Extent-Type_tag4@@": "Unió--az összes raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Sin_Raster_tag0@@": "Az a bemenet, amelyhez a szinusz értékeket ki kell számítani.",
	"@@SinH_Cellsize-Type_tag0@@": "Válassza ki, hogy melyik cellaméretet szeretné használni a kimeneti raszterben. Ha mindegyik bemeneti cellaméret azonos, mindegyik lehetőség ugyanarra az eredményre vezet.",
	"@@SinH_Cellsize-Type_tag1@@": "Első--a bemeneti raszterek első cellaméretének használata.",
	"@@SinH_Cellsize-Type_tag2@@": "Utolsó--a bemeneti raszterek utolsó cellaméretének használata.",
	"@@SinH_Cellsize-Type_tag3@@": "Maximum--az összes bemeneti raszter legnagyobb cellaméretének használata. Ez az alapértelmezés.",
	"@@SinH_Cellsize-Type_tag4@@": "Átlag--az összes bemeneti raszter átlagos cellaméretének használata.",
	"@@SinH_Cellsize-Type_tag5@@": "Minimum--az összes bemeneti raszter legkisebb cellaméretének használata.",
	"@@SinH_Extent-Type_tag0@@": "Válassza ki, hogy melyik kiterjedést szeretné használni a kimeneti raszterben:",
	"@@SinH_Extent-Type_tag1@@": "Első--az első bemeneti raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@SinH_Extent-Type_tag2@@": "Metszet--az átfedésben lévő pixelek kiterjedésének használata a feldolgozási kiterjedés meghatározásához. Ez az alapértelmezés.",
	"@@SinH_Extent-Type_tag3@@": "Utolsó--az utolsó bemeneti raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@SinH_Extent-Type_tag4@@": "Unió--az összes raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@SinH_Raster_tag0@@": "Az a bemenet, amelyhez a hiperbolikus szinusz értékeket ki kell számítani.",
	"@@Sink_Flow-Direction-Raster_tag0@@": "A bemeneti raszter, amely a kiáramlás irányát mutatja az egyes cellákból.",
	"@@Sink_Flow-Direction-Raster_tag1@@": "Az áramlásiirány-raszter az <strong>Áramlási irány</strong> függvény futtatásával hozható létre.",
	"@@Slope_DEM_tag0@@": "A bemeneti magasságraszter.",
	"@@Slope_Disable-default-edge-pixel-interpolation_tag0@@": "Ezt a beállítást használva elkerülhetők az újra-mintavételezésből adódóan előforduló műtárgyak egy raszter élei mentén. A raszter éle mentén vagy a pixelek mellett található kimeneti pixelek NoData értékkel lesznek feltöltve, ezért ajánlott ezt a beállítást csak akkor használni, amikor más, átfedésben lévő pixeleket tartalmazó raszterek is előfordulnak. Amikor az átfedésben lévő pixelek rendelkezésre állnak, ezeken a NoData értékkel rendelkező területeken megjelennek az átfedésben lévő pixelértékek, ahelyett, hogy üresek maradnának.",
	"@@Slope_Disable-default-edge-pixel-interpolation_tag1@@": "Nincs bejelölve--az alkalmazás egységesen bilineáris újra-mintavételezést alkalmaz a lejtés újra-mintavételezéséhez. Ez az alapértelmezés.",
	"@@Slope_Disable-default-edge-pixel-interpolation_tag2@@": "Bejelölve--az alkalmazás bilineáris újra-mintavételezést használ a lejtésen belül, kivéve a raszterek élei mentén és a NoData pixelek mellett. Ezeket a pixeleket NoData értékkel tölti fel, mert ezzel csökkenti azt az előforduló hatást, amely miatt az élek élesek.",
	"@@Slope_Scaling_tag0@@": "A lejtés mértéke kimenetként megadható fokban vagy százalékként. A <strong>Skálázás</strong> esetében háromféle beállítás választható:",
	"@@Slope_Scaling_tag3@@": "<strong>Fok</strong>--A lejtés mértékét fokban számítja. Az értékek 0-tól 90-ig terjednek.",
	"@@Slope_Scaling_tag5@@": "<strong>Százalékos_emelkedés</strong>--A lejtés mértékét százalékos értékben számítja. Az értékek 0-tól végtelenig terjednek. A lapos felszín 0 fokos emelkedésnek, a 45 fokos felszín 100 százalékos emelkedésnek felel meg. A százalékos emelkedés egyre jobban nő, ahogy a felszín közelít a függőlegeshez.",
	"@@Slope_Scaling_tag7@@": "<strong>Skálázott</strong>--A lejtés mértékét a FOK beállítással azonosan számítja, de a z tényezőt a méretaránytól függően kiigazítja. A <strong>Pixelméret-erősség</strong> és a <strong>Pixelméret-tényező</strong> értékeket használja, amelyek figyelembe veszik a felbontás változását (méretarány), amikor a megtekintő nagyít és kicsinyít. Ez az egész világot lefedő adathalmazok használatakor ajánlott, különösen akkor, amikor a megjelenítéshez lejtést használunk felszínként.",
	"@@Slope_Scaling_tag13@@": "A z tényező kiigazítása a következő egyenlettel történik:",
	"@@Slope_Scaling_tag14@@": "Kiigazított Z tényező = (Z tényező) + (pixelméret)",
	"@@Slope_Scaling_tag15@@": "× (Pixelméret-tényező)",
	"@@Slope_Scaling_tag16@@": "Pixelméret-erősség",
	"@@Slope_Z-Factor_tag0@@": "A <strong>Z tényező</strong> egy arányszám, amelyet a magasságértékek átváltásához használunk két célból:",
	"@@Slope_Z-Factor_tag3@@": "A magasság mértékegységének (pl. méter vagy láb) átváltásához a réteg vízszintes koordinátáinak mértékegységére, amely lehet láb, méter vagy fok.",
	"@@Slope_Z-Factor_tag4@@": "Függőleges felnagyítás eléréséhez a vizuális hatás érdekében.",
	"@@Slope_PSPower_tag0@@": "A <strong>pixelméret-erősség</strong> a magasság változásait (vagy a méretarányt) veszi figyelembe, miközben a megtekintő nagyítja és kicsinyíti a térkép-megjelenítést. Ez nem más, mint a pixelméret kifejezésen alkalmazott hatványkitevő abban az egyenletben, amely szabályozza a <strong>Z tényező</strong> változásának ütemét a domborzat jelentős módosításának elkerülése érdekében.",
	"@@Slope_PSPower_tag1@@": "Ez a paraméter csak akkor érvényes, ha a <strong>méretezés</strong> típusa <strong>Méretezett</strong>. Az alapértelmezett érték 0,664.",
	"@@Slope_PSZFactor_tag0@@": "A <strong>pixelméret-tényező</strong> a méretarány változásait veszi figyelembe, miközben a megtekintő nagyítja és kicsinyíti a térkép-megjelenítést. A <strong>Z tényező</strong> változásának ütemét módosítja.",
	"@@Slope_PSZFactor_tag1@@": "Ez a paraméter csak akkor érvényes, ha a <strong>méretezés</strong> típusa <strong>Méretezett</strong>. Az alapértelmezett érték 0,024.",
	"@@Snap-Pour-Point_Flow-Accumulation-Raster_tag0@@": "Az áramlási akkumuláció bemeneti raszteres rétege.",
	"@@Snap-Pour-Point_Flow-Accumulation-Raster_tag1@@": "Az <strong>Áramlási akkumuláció</strong> funkcióval hozható létre.",
	"@@Snap-Pour-Point_Pour-Point-Field_tag0@@": "Az értékek kifolyásipont-helyekhez rendeléséhez használt mező.",
	"@@Snap-Pour-Point_Pour-Point-Raster_tag0@@": "A csatolandó bemeneti kifolyásipont-helyek.",
	"@@Snap-Pour-Point_Pour-Point-Raster_tag1@@": "Egy bemeneti raszteres réteg minden nem NoData értékű (vagyis értékkel rendelkező) celláját kifolyási pontnak tekinti, és csatolja.",
	"@@Snap-Pour-Point_Snap-Distance_tag0@@": "A maximális távolság, a térkép mértékegységében megadva, amelyen belül magasabb kumulált áramlást tartalmazó cellákat kell keresni.",
	"@@Speckle_Additive-Noise-Mean_tag0@@": "Az additív zaj átlagértékét adja meg. A nagyobb zajátlagérték kisebb simítást eredményez, a kisebb érték pedig nagyobb simítást.",
	"@@Speckle_Additive-Noise-Mean_tag1@@": "Ez a paraméter csak akkor érvényes, amikor a <strong>Szűrőtípus</strong> beállítása <strong>Lee-szűrő</strong>, a <strong>Zajmodell</strong> pedig <strong>Additív zaj</strong> vagy <strong>Additív és multiplikatív zaj</strong>. Az alapértelmezett érték 0.",
	"@@Speckle_Damping-Factor_tag0@@": "Az exponenciális csillapítás szűrésre gyakorolt hatásának mértékét határozza meg. A nagyobb csillapítási érték jobban megőrzi az éleket, de a simítás kisebb lesz, míg a kisebb érték jobb simítást eredményez. A 0 érték ugyanazt a kimenetet eredményezi, mint egy aluláteresztő szűrő.",
	"@@Speckle_Damping-Factor_tag1@@": "Ez a paraméter csak akkor érvényes, amikor a <strong>Szűrőtípus</strong> beállítása <strong>Speciális Lee-szűrő</strong> vagy <strong>Frost-szűrő</strong>. Az alapértelmezett érték 1.",
	"@@Speckle_Filter-Size_tag0@@": "A zaj szűréséhez használt pixelablak méretét határozza meg:",
	"@@Speckle_Filter-Size_tag1@@": "3x3",
	"@@Speckle_Filter-Size_tag2@@": "5x5",
	"@@Speckle_Filter-Size_tag3@@": "7x7",
	"@@Speckle_Filter-Size_tag4@@": "9x9",
	"@@Speckle_Filter-Size_tag5@@": "11x11",
	"@@Speckle_Filter-Type_tag0@@": "A pontszerű zaj eltávolításához használt simítási algoritmusban alkalmazott szűrő típusát határozza meg:",
	"@@Speckle_Filter-Type_tag1@@": "<strong>Lee-szűrő</strong>--A pontszerű zajt a kép minden egyes pixelére alkalmazott térbeli szűrővel csökkenti, amely egy négyszögletű ablakban kiszámított helyi statisztikák alapján szűri az adatokat. Ez a szűrő akkor hasznos, amikor additív vagy multiplikatív komponenssel rendelkező, pontszerű zajt tartalmazó adatokon szeretne simítást elvégezni. Ez az alapértelmezés.",
	"@@Speckle_Filter-Type_tag3@@": "<strong>Bővített Lee-szűrő</strong>--A Lee szűrő kiigazított változata, amely a következőket tartalmazza: <strong>Csillapítási tényező</strong> és <strong>Nézetek száma</strong> Ez a szűrő akkor hasznos, amikor úgy szeretné csökkenteni a pontszerű zajt, hogy közben megőrzi a textúrával kapcsolatos információt.",
	"@@Speckle_Filter-Type_tag9@@": "<strong>Frost-szűrő</strong>--Egy exponenciálisan csillapított, körkörösen szimmetrikus, önálló szűrőablakokban számolt helyi statisztikákat alkalmazó szűrővel csökkenti a pontszerű zajt. Ez a szűrő akkor hasznos, amikor úgy szeretné csökkenteni a pontszerű zajt, hogy közben megőrzi az éleket a radarképeken.",
	"@@Speckle_Filter-Type_tag11@@": "<strong>Kuan-szűrő</strong>--A Lee szűrőhöz hasonlóan ez a szűrő egy térbeli szűrőt alkalmaz a kép minden egyes pixelére, és egy négyszögletű ablakban kiszámított helyi statisztikák alapján szűri az adatokat. Ez a szűrő akkor hasznos, amikor úgy szeretné csökkenteni a pontszerű zajt, hogy közben megőrzi az éleket a radarképeken.",
	"@@Speckle_Multiplicative-Noise-Mean_tag0@@": "A multiplikatív zaj átlagértékét adja meg. A nagyobb zajátlagérték kisebb simítást eredményez, a kisebb érték pedig nagyobb simítást.",
	"@@Speckle_Multiplicative-Noise-Mean_tag1@@": "Ez a paraméter csak akkor érvényes, amikor a <strong>Szűrőtípus</strong> beállítása <strong>Lee-szűrő</strong>, a <strong>Zajmodell</strong> pedig <strong>Additív zaj</strong> vagy <strong>Additív és multiplikatív zaj</strong>. Az alapértelmezett érték 1.",
	"@@Speckle_Noise-Model_tag0@@": "A radarkép minőségét csökkentő zaj típusát határozza meg:",
	"@@Speckle_Noise-Model_tag1@@": "<strong>Multiplikatív zaj</strong>--Véletlenszerű jelzaj, amely rögzítés vagy átvitel közben szorzódik az eredeti jellel.",
	"@@Speckle_Noise-Model_tag3@@": "<strong>Additív zaj</strong>--Véletlenszerű jelzaj, amely rögzítés vagy átvitel közben hozzáadódik az eredeti jelhez.",
	"@@Speckle_Noise-Model_tag5@@": "<strong>Additív és multiplikatív zaj</strong>--Mindkét zajmodell",
	"@@Speckle_Noise-Variance_tag0@@": "A radarkép zajának varianciáját adja meg.",
	"@@Speckle_Noise-Variance_tag1@@": "Ez a paraméter csak akkor érvényes, amikor a <strong>Szűrőtípus</strong> beállítása <strong>Lee-szűrő</strong>, a <strong>Zajmodell</strong> pedig <strong>Additív zaj</strong> vagy <strong>Additív és multiplikatív zaj</strong>. Az alapértelmezett érték 0,25.",
	"@@Speckle_Number-of-Looks_tag0@@": "A kép nézeteinek számát adja meg, amely szabályozza a képsimítást és becsli a zaj varianciáját. A kisebb érték nagyobb simítást eredményez, a nagyobb érték pedig a kép több elemét megtartja.",
	"@@Speckle_Number-of-Looks_tag1@@": "Ez a paraméter csak akkor érvényes, amikor a <strong>Szűrőtípus</strong> beállítása <strong>Lee-szűrő</strong>, a <strong>Zajmodell</strong> pedig <strong>Multiplikatív zaj</strong>, vagy ha a <strong>Szűrőtípus</strong> beállítása <strong>Kuan-szűrő</strong>. Az alapértelmezett érték 1.",
	"@@Speckle_Raster_tag0@@": "A bemeneti raszter.",
	"@@Spectral-Conversion_Conversion-Matrix_tag0@@": "A bemeneti raszter konvertálásához használt mátrix.",
	"@@Spectral-Conversion_Conversion-Matrix_tag1@@": "A konverzió végrehajtásához használt egyenlet a következő:",
	"@@Spectral-Conversion_Conversion-Matrix_tag2@@": "Kimeneti sáv_R = súly_P * sáv_C",
	"@@Spectral-Conversion_Conversion-Matrix_tag3@@": "ahol:",
	"@@Spectral-Conversion_Conversion-Matrix_tag4@@": "A sáv_R egy kimeneti sáv, ahol R egy szám 1 és a kimeneti sávok darabszáma között.",
	"@@Spectral-Conversion_Conversion-Matrix_tag5@@": "A súly_P a súlyok vesszővel tagolt listája; mindegyik bemeneti hullámhossztartományhoz 1 súly tartozik. Az összes sávot tekintve a súlyok összegének 1-et kell kiadnia.",
	"@@Spectral-Conversion_Conversion-Matrix_tag6@@": "A sáv_C a bemeneti kép, ahol C egy szám 1 és a bemeneti kép sávjainak darabszáma között.",
	"@@Spectral-Conversion_Raster_tag0@@": "A bemeneti raszter.",
	"@@Spectral-Conversion_Raster_tag1@@": "Ez lehet raszteres adathalmaz, mozaik-adathalmaz vagy képszolgáltatás.",
	"@@Spectral-Conversion_Size_tag0@@": "Az <strong>Átváltási mátrix</strong> sorainak és oszlopainak száma.",
	"@@Square_Cellsize-Type_tag0@@": "Válassza ki, hogy melyik cellaméretet szeretné használni a kimeneti raszterben. Ha mindegyik bemeneti cellaméret azonos, mindegyik lehetőség ugyanarra az eredményre vezet.",
	"@@Square_Cellsize-Type_tag1@@": "Első--a bemeneti raszterek első cellaméretének használata.",
	"@@Square_Cellsize-Type_tag2@@": "Utolsó--a bemeneti raszterek utolsó cellaméretének használata.",
	"@@Square_Cellsize-Type_tag3@@": "Maximum--az összes bemeneti raszter legnagyobb cellaméretének használata. Ez az alapértelmezés.",
	"@@Square_Cellsize-Type_tag4@@": "Átlag--az összes bemeneti raszter átlagos cellaméretének használata.",
	"@@Square_Cellsize-Type_tag5@@": "Minimum--az összes bemeneti raszter legkisebb cellaméretének használata.",
	"@@Square_Extent-Type_tag0@@": "Válassza ki, hogy melyik kiterjedést szeretné használni a kimeneti raszterben:",
	"@@Square_Extent-Type_tag1@@": "Első--az első bemeneti raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Square_Extent-Type_tag2@@": "Metszet--az átfedésben lévő pixelek kiterjedésének használata a feldolgozási kiterjedés meghatározásához. Ez az alapértelmezés.",
	"@@Square_Extent-Type_tag3@@": "Utolsó--az utolsó bemeneti raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Square_Extent-Type_tag4@@": "Unió--az összes raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Square_Raster_tag0@@": "A bemeneti értékek, amelyeket négyzetre kell emelni.",
	"@@Square-Root_Cellsize-Type_tag0@@": "Válassza ki, hogy melyik cellaméretet szeretné használni a kimeneti raszterben. Ha mindegyik bemeneti cellaméret azonos, mindegyik lehetőség ugyanarra az eredményre vezet.",
	"@@Square-Root_Cellsize-Type_tag1@@": "Első--a bemeneti raszterek első cellaméretének használata.",
	"@@Square-Root_Cellsize-Type_tag2@@": "Utolsó--a bemeneti raszterek utolsó cellaméretének használata.",
	"@@Square-Root_Cellsize-Type_tag3@@": "Maximum--az összes bemeneti raszter legnagyobb cellaméretének használata. Ez az alapértelmezés.",
	"@@Square-Root_Cellsize-Type_tag4@@": "Átlag--az összes bemeneti raszter átlagos cellaméretének használata.",
	"@@Square-Root_Cellsize-Type_tag5@@": "Minimum--az összes bemeneti raszter legkisebb cellaméretének használata.",
	"@@Square-Root_Extent-Type_tag0@@": "Válassza ki, hogy melyik kiterjedést szeretné használni a kimeneti raszterben:",
	"@@Square-Root_Extent-Type_tag1@@": "Első--az első bemeneti raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Square-Root_Extent-Type_tag2@@": "Metszet--az átfedésben lévő pixelek kiterjedésének használata a feldolgozási kiterjedés meghatározásához. Ez az alapértelmezés.",
	"@@Square-Root_Extent-Type_tag3@@": "Utolsó--az utolsó bemeneti raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Square-Root_Extent-Type_tag4@@": "Unió--az összes raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Square-Root_Raster_tag0@@": "A bemeneti értékek, amelyeknek meg kell keresni a négyzetgyökét.",
	"@@Statistics-and-Histogram_Define-Statistics-and-Histogram_tag0@@": "A statisztikai értékek beállítása az egyes sávoknál.",
	"@@Statistics-and-Histogram_Define-Statistics-and-Histogram_tag1@@": "A ${Histogram} oszlop írásvédett mező, amely az <strong>Importálás</strong> paraméter használatával tölthető fel. Hisztogramfájl importálása esetén a ${Histogram} oszlop megjelölése <strong>Meghatározott</strong> lesz.",
	"@@Statistics-and-Histogram_Import_tag0@@": "Statisztikai és hisztograminformációk importálása létező raszter- vagy XML-fájlból.",
	"@@Statistics-and-Histogram_Raster_tag0@@": "A bemeneti raszter, amelyen be kell állítani a statisztikát és hisztogramot.",
	"@@Statistics-and-Histogram_Statistics_tag0@@": "A statisztikai értékek beállítása az egyes sávoknál.",
	"@@Stream-Link_Flow-Direction-Raster_tag0@@": "A bemeneti raszter, amely a kiáramlás irányát mutatja az egyes cellákból.",
	"@@Stream-Link_Flow-Direction-Raster_tag1@@": "Az áramlásiirány-raszter az <strong>Áramlási irány</strong> függvény futtatásával hozható létre.",
	"@@Stream-Link_Stream-Raster_tag0@@": "Egy lineáris áramlási hálózatot meghatározó bemeneti raszter.",
	"@@Stream-Order_Flow-Direction-Raster_tag0@@": "A bemeneti raszter, amely a kiáramlás irányát mutatja az egyes cellákból.",
	"@@Stream-Order_Flow-Direction-Raster_tag1@@": "Az áramlásiirány-raszter az <strong>Áramlási irány</strong> függvény futtatásával hozható létre.",
	"@@Stream-Order_Order-Method_tag0@@": "A vízfolyások rendiségének hozzárendeléséhez használt módszer.",
	"@@Stream-Order_Order-Method_tag1@@": "<strong>STRAHLER</strong>--A Strahler által 1952-ben a vízfolyások rendiségének meghatározására javasolt módszer. A vízfolyások rendje csak akkor nő, amikor azonos rendű vízfolyások találkoznak. Egy első- és egy másodrendű vízfolyás találkozása másodrendű vízfolyás marad, nem jön létre harmadrendű vízfolyás. Ez az alapértelmezés.",
	"@@Stream-Order_Order-Method_tag3@@": "<strong>SHREVE</strong>--A Shreve által 1967-ben a vízfolyások rendiségének a nagyság alapján történő meghatározására javasolt módszer. A mellékkel nem rendelkező vízfolyások nagysága (rendje) egy. A nagyságok lefelé haladva összeadódnak. Két vízfolyás találkozásakor a nagyságuk összeadódik, és a lefelé folyó vízfolyáshoz lesz hozzárendelve.",
	"@@Stream-Order_Stream-Raster_tag0@@": "Egy lineáris vízfolyáshálózatot meghatározó bemeneti vízfolyásraszter.",
	"@@Stretch_Auto-Gamma_tag0@@": "Használj az <strong>Automatikus ghamma</strong> beállítást, ha a gammát az adathalmaz statisztikáiból és hisztogramjából szeretné számítani. A statisztika lehet a függvény által becsült statisztika, de réteg választásakor a szoftverrel is becsültethető.",
	"@@Stretch_Dynamic-Range-Adjustment_tag0@@": "Jelölje be a <strong>Dinamikus tartománybeállítás</strong> négyzetet, ha csak a képernyőn megjelenő pixelekből szeretné számítani a statisztikát. Ezt a beállítást általában akkor kell használni, amikor a képet közzéteszi és olyan webes alkalmazásban használja, amely ilyen típusú kontrasztnyújtás végrehajtására nem képes.",
	"@@Stretch_Estimate-Statistics_tag0@@": "Jelölje be a <strong>Közelítő statisztika</strong> négyzetet, ha becsülni szeretné a statisztikát. A függvény egy, a raszter középpontjától mért 1000 x 1000 méretű mintából számítja ki a becsült statisztikát, amelyet a kontrasztnyújtáshoz használ.",
	"@@Stretch_Estimate-Statistics_tag3@@": "Ha be van jelölve, és a raszter rendelkezik statisztikával, vagy pedig Ön adott meg értékeket a <strong>Statisztika</strong> táblában, akkor a függvény a becslés helyett ezeket az értékeket használja, amennyiben a kontrasztnyújtáshoz nem szükséges hisztogram. Ha a kontrasztnyújtáshoz nem létező hisztogram szükséges, a függvény becsléssel elkészíti.",
	"@@Stretch_Gamma_tag0@@": "A beállítósáv segítségével manuálisan beállítható a <strong>Gamma</strong> értéke.",
	"@@Stretch_Number-Of-Standard-Deviations_tag0@@": "Az n érték adható meg a használni kívánt számú szóráshoz. Ez a módszer annak hangsúlyozására használható, hogy mennyire térnek el az elemek értékei az átlagértéktől. Normális eloszlású adatokon használható a legjobban.",
	"@@Stretch_Output-Maximum_tag0@@": "A hisztogram legmagasabb pixelértékének beállítása.",
	"@@Stretch_Output-Maximum_tag1@@": "A <strong>Kimenet minimuma</strong> és a <strong>Kimenet maximuma</strong> az értéktartományt határozza meg, amelyen aztán a függvény elvégzi a lineáris kontrasztnyújtást.",
	"@@Stretch_Output-Minimum_tag0@@": "A hisztogram legalacsonyabb pixelértékének beállítása.",
	"@@Stretch_Output-Minimum_tag1@@": "A <strong>Kimenet minimuma</strong> és a <strong>Kimenet maximuma</strong> az értéktartományt határozza meg, amelyen aztán a függvény elvégzi a lineáris kontrasztnyújtást.",
	"@@Stretch_Percent-Clip-Maximum_tag0@@": "A kontrasztnyújtásból kizárni kívánt magas értékek százaléka adható meg ezzel.",
	"@@Stretch_Percent-Clip-Maximum_tag1@@": "Érvényes értéktartomány: 0 és 99 között.",
	"@@Stretch_Percent-Clip-Minimum_tag0@@": "A kontrasztnyújtásból kizárni kívánt alacsony értékek százaléka adható meg ezzel.",
	"@@Stretch_Percent-Clip-Minimum_tag1@@": "Érvényes értéktartomány: 0 és 99 között.",
	"@@Stretch_Raster_tag0@@": "A bemeneti raszter, amelyen a kontrasztnyújtást el kívánja végezni.",
	"@@Stretch_Sigmoid-Strength-Level_tag0@@": "Az <strong>Erősség szintje</strong> határozza meg, hogy milyen mértékben kell használni a szigmoid függvényt a kontrasztnyújtáskor. Alacsony érték, például 1 esetén a függvény csak a görbe középső részét használja, ami általában halvány és fakó színeket eredményez. Magas érték, például 6 esetén a függvény a teljes görbét használja, ami általában szembetűnő és éles színeket eredményez.",
	"@@Stretch_Statistics_tag0@@": "Megadhatja a saját statisztikáját a párbeszédpanelben. A függvény alapértelmezés szerint az adatokból nyeri a statisztikát, ehelyett azonban az ebben a paraméterben megadott értékeket fogja használni.",
	"@@Stretch_Type_tag0@@": "A kontrasztnyújtás típusa ezzel választható ki:",
	"@@Stretch_Type_tag1@@": "Nincs--nincs kontrasztnyújtás",
	"@@Stretch_Type_tag2@@": "Szórás--szórás szerinti kontrasztnyújtás",
	"@@Stretch_Type_tag3@@": "MinMax--Minimum–maximum kontrasztnyújtás",
	"@@Stretch_Type_tag4@@": "Százalékos MinMax--százalékos levágás szerinti kontrasztnyújtás",
	"@@Stretch_Type_tag5@@": "Szigmoid--szigmoid kontrasztnyújtás",
	"@@Stretch_Use-Gamma_tag0@@": "jelölje be a <strong>Gamma használata</strong> négyzetet, ha gammanyújtást szeretne használni.",
	"@@Swath_Cellsize_tag0@@": "A kimeneti raszter cellaméretét automatikusan észleli, ez azonban módosítható, ha szeretné. A cellaméret módosítható, de a raszteres adathalmaz kiterjedése nem változik.",
	"@@Swath_Interpolation-Method_tag0@@": "Ehhez a függvényhez négyfajta újra-mintavételezési módszer létezik:",
	"@@Swath_Interpolation-Method_tag1@@": "<strong>Legközelebbi szomszéd</strong>--A legközelebbi pixelt használva számítja ki a pixel értékét. Ha nem létezik forráspixel, nem hozható létre új pixel a kimenetben.",
	"@@Swath_Interpolation-Method_tag3@@": "<strong>Bilineáris</strong>--A négy legközelebbi pixel távolsággal súlyozott értékét használva számítja ki a pixel értékét.",
	"@@Swath_Interpolation-Method_tag5@@": "<strong>Lineáris Tinning</strong>--Háromszögelt, szabálytalan hálózatot használ a szabálytalan raszter egyes celláinak középpontjából kiindulva egy olyan felszín interpolálással történő meghatározásához, amelyet aztán szabályos raszterré alakít.",
	"@@Swath_Interpolation-Method_tag7@@": "<strong>Természetes szomszéd</strong>--Végrehajtja a legközelebbi szomszédok hozzárendelését; az interpolációs módszerek közül a leggyorsabb. Elsősorban diszkrét adatokon használjuk, például földhasználat-osztályozásnál, mivel nem módosítja a cellák értékeit. A legnagyobb térbeli hiba a cellaméret fele.",
	"@@Swath_Raster_tag0@@": "A szabálytalan rácshálóval ellátott raszter, amelyen újra-mintavételezést kell elvégezni.",
	"@@Tan_Cellsize-Type_tag0@@": "Válassza ki, hogy melyik cellaméretet szeretné használni a kimeneti raszterben. Ha mindegyik bemeneti cellaméret azonos, mindegyik lehetőség ugyanarra az eredményre vezet.",
	"@@Tan_Cellsize-Type_tag1@@": "Első--a bemeneti raszterek első cellaméretének használata.",
	"@@Tan_Cellsize-Type_tag2@@": "Utolsó--a bemeneti raszterek utolsó cellaméretének használata.",
	"@@Tan_Cellsize-Type_tag3@@": "Maximum--az összes bemeneti raszter legnagyobb cellaméretének használata. Ez az alapértelmezés.",
	"@@Tan_Cellsize-Type_tag4@@": "Átlag--az összes bemeneti raszter átlagos cellaméretének használata.",
	"@@Tan_Cellsize-Type_tag5@@": "Minimum--az összes bemeneti raszter legkisebb cellaméretének használata.",
	"@@Tan_Extent-Type_tag0@@": "Válassza ki, hogy melyik kiterjedést szeretné használni a kimeneti raszterben:",
	"@@Tan_Extent-Type_tag1@@": "Első--az első bemeneti raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Tan_Extent-Type_tag2@@": "Metszet--az átfedésben lévő pixelek kiterjedésének használata a feldolgozási kiterjedés meghatározásához. Ez az alapértelmezés.",
	"@@Tan_Extent-Type_tag3@@": "Utolsó--az utolsó bemeneti raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Tan_Extent-Type_tag4@@": "Unió--az összes raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Tan_Raster_tag0@@": "Az a bemenet, amelyhez a tangens értékeket ki kell számítani.",
	"@@TanH_Cellsize-Type_tag0@@": "Válassza ki, hogy melyik cellaméretet szeretné használni a kimeneti raszterben. Ha mindegyik bemeneti cellaméret azonos, mindegyik lehetőség ugyanarra az eredményre vezet.",
	"@@TanH_Cellsize-Type_tag1@@": "Első--a bemeneti raszterek első cellaméretének használata.",
	"@@TanH_Cellsize-Type_tag2@@": "Utolsó--a bemeneti raszterek utolsó cellaméretének használata.",
	"@@TanH_Cellsize-Type_tag3@@": "Maximum--az összes bemeneti raszter legnagyobb cellaméretének használata. Ez az alapértelmezés.",
	"@@TanH_Cellsize-Type_tag4@@": "Átlag--az összes bemeneti raszter átlagos cellaméretének használata.",
	"@@TanH_Cellsize-Type_tag5@@": "Minimum--az összes bemeneti raszter legkisebb cellaméretének használata.",
	"@@TanH_Extent-Type_tag0@@": "Válassza ki, hogy melyik kiterjedést szeretné használni a kimeneti raszterben:",
	"@@TanH_Extent-Type_tag1@@": "Első--az első bemeneti raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@TanH_Extent-Type_tag2@@": "Metszet--az átfedésben lévő pixelek kiterjedésének használata a feldolgozási kiterjedés meghatározásához. Ez az alapértelmezés.",
	"@@TanH_Extent-Type_tag3@@": "Utolsó--az utolsó bemeneti raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@TanH_Extent-Type_tag4@@": "Unió--az összes raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@TanH_Raster_tag0@@": "Az a bemenet, amelyhez a hiperbolikus tangens értékeket ki kell számítani.",
	"@@Tasseled-Cap_Raster_tag0@@": "A bemeneti raszter, amelyen el szeretné végezni a Tasseled Cap transzformációt.",
	"@@Times_Cellsize-Type_tag0@@": "Válassza ki, hogy melyik cellaméretet szeretné használni a kimeneti raszterben. Ha mindegyik bemeneti cellaméret azonos, mindegyik lehetőség ugyanarra az eredményre vezet.",
	"@@Times_Cellsize-Type_tag1@@": "Első--a bemeneti raszterek első cellaméretének használata.",
	"@@Times_Cellsize-Type_tag2@@": "Utolsó--a bemeneti raszterek utolsó cellaméretének használata.",
	"@@Times_Cellsize-Type_tag3@@": "Maximum--az összes bemeneti raszter legnagyobb cellaméretének használata. Ez az alapértelmezés.",
	"@@Times_Cellsize-Type_tag4@@": "Átlag--az összes bemeneti raszter átlagos cellaméretének használata.",
	"@@Times_Cellsize-Type_tag5@@": "Minimum--az összes bemeneti raszter legkisebb cellaméretének használata.",
	"@@Times_Extent-Type_tag0@@": "Válassza ki, hogy melyik kiterjedést szeretné használni a kimeneti raszterben:",
	"@@Times_Extent-Type_tag1@@": "Első--az első bemeneti raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Times_Extent-Type_tag2@@": "Metszet--az átfedésben lévő pixelek kiterjedésének használata a feldolgozási kiterjedés meghatározásához. Ez az alapértelmezés.",
	"@@Times_Extent-Type_tag3@@": "Utolsó--az utolsó bemeneti raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Times_Extent-Type_tag4@@": "Unió--az összes raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Times_Raster_tag0@@": "A szorzandó értékeket tartalmazó bemenet.",
	"@@Times_Raster_tag1@@": "Ennél a paraméternél használható konstans érték bemenetként, amennyiben megadja a rasztert a másik paraméternél.",
	"@@Times_Raster2_tag0@@": "Azokat az értékeket tartalmazó bemenet, amelyekkel az első bemenet értékeit szorozni kell.",
	"@@Times_Raster2_tag1@@": "Ennél a paraméternél használható konstans érték bemenetként, amennyiben megadja a rasztert a másik paraméternél.",
	"@@Transpose-Bits_Bit-Pattern_tag0@@": "Válassza ki a végrehajtani kívánt transzponálás típusát, vagy adjon meg egy egyéni típust:",
	"@@Transpose-Bits_Bit-Pattern_tag1@@": "Landsat 8 cirrus",
	"@@Transpose-Bits_Bit-Pattern_tag2@@": "Landsat 8 felhő",
	"@@Transpose-Bits_Bit-Pattern_tag3@@": "Landsat 8 felhőárnyék",
	"@@Transpose-Bits_Bit-Pattern_tag4@@": "Landsat 8 kijelölt kitöltés",
	"@@Transpose-Bits_Bit-Pattern_tag5@@": "Landsat 8 kihagyott képkocka",
	"@@Transpose-Bits_Bit-Pattern_tag6@@": "Landsat 8 hó/jég",
	"@@Transpose-Bits_Bit-Pattern_tag7@@": "Landsat 8 domborzati takarás",
	"@@Transpose-Bits_Bit-Pattern_tag8@@": "Landsat 8 vegetáció",
	"@@Transpose-Bits_Bit-Pattern_tag9@@": "Landsat 8 víz",
	"@@Transpose-Bits_Bit-Pattern_tag10@@": "Felhasználó által meghatározott",
	"@@Transpose-Bits_Constant-Value_tag0@@": "Opcionális érték, amelynek segítségével kitölthető az összes olyan bit, amely nem vesz részt a transzponálásban. Ez a paraméter akkor jelenik meg, amikor a <strong>Kitöltési raszter létrehozása állandóból</strong> paraméter beállítása <strong>Igen</strong>.",
	"@@Transpose-Bits_Fill-Raster_tag0@@": "Egy raszteres adathalmaz adható meg, amelynek segítségével kitölthető az összes olyan bit, amely nem vesz részt a transzponálásban. Ez a paraméter akkor jelenik meg, amikor a <strong>Kitöltési raszter létrehozása állandóból</strong> paraméter beállítása <strong>Nem</strong>.",
	"@@Transpose-Bits_Generate-Fill-Raster-from-Constant_tag0@@": "Kitöltési raszter létrehozása állandó segítségével:",
	"@@Transpose-Bits_Generate-Fill-Raster-from-Constant_tag1@@": "<strong>Igen</strong>--A rendszer rasztert hoz létre egy állandó segítségével azoknak a biteknek a kitöltéséhez, amelyek nem vesznek részt a transzponálásban. Ez az alapértelmezés.",
	"@@Transpose-Bits_Generate-Fill-Raster-from-Constant_tag3@@": "<strong>Nem</strong>--A rendszer rasztert hoz létre meglévő raszteres adathalmazból származó pixelértékek segítségével azoknak a biteknek a kitöltéséhez, amelyek nem vesznek részt a transzponálásban.",
	"@@Transpose-Bits_Output-Bit-and-Input-Bit_tag0@@": "A kimeneti biteket és a helyükre kerülő bemeneteket mutató, írásvédett tábla.",
	"@@Transpose-Bits_Raster_tag0@@": "A kicsomagolandó és újból leképezendő bemeneti raszter.",
	"@@Unit-Conversion_From-Unit_tag0@@": "A pixelek eredeti mértékegységének típusa.",
	"@@Unit-Conversion_Raster_tag0@@": "A bemeneti raszter, amely az átváltott értékeket fogja tartalmazni.",
	"@@Unit-Conversion_To-Unit_tag0@@": "A pixelek átváltott mértékegységének típusa.",
	"@@Vector-Field_Angle-Reference-System_tag0@@": "Az iránykomponens mérésének módját határozza meg.",
	"@@Vector-Field_Angle-Reference-System_tag1@@": "Földrajzi--a 0° észak felé mutat, a 90° kelet felé mutat.",
	"@@Vector-Field_Angle-Reference-System_tag2@@": "Aritmetikai--a 0° kelet felé mutat, a 90° észak felé mutat.",
	"@@Vector-Field_Input-Data-Type_tag0@@": "A bemenetek által képviselt vektormezőtípus.",
	"@@Vector-Field_Input-Data-Type_tag1@@": "Ismeretlen--nem tudni, hogy a bemenetek U-V vagy Nagyság–irány típusúak.",
	"@@Vector-Field_Input-Data-Type_tag2@@": "U-V--a bemeneti adatok az U és V komponenseket jelentik.",
	"@@Vector-Field_Input-Data-Type_tag3@@": "Nagyság–irány--a bemeneti adatok a nagyságot és irányt jelentik.",
	"@@Vector-Field_Output-Data-Type_tag0@@": "A kimenet által képviselt vektormezőtípus.",
	"@@Vector-Field_Output-Data-Type_tag1@@": "Nagyság–irány--a kimeneti adatok a nagyságot és irányt jelentik.",
	"@@Vector-Field_Output-Data-Type_tag2@@": "U-V--a kimeneti adatok az U és V komponenseket jelentik.",
	"@@Vector-Field_Raster1_tag0@@": "Az első bemeneti raszter.",
	"@@Vector-Field_Raster1_tag1@@": "Ez az U érték vagy a nagyság lesz.",
	"@@Vector-Field_Raster2_tag0@@": "A második bemeneti raszter.",
	"@@Vector-Field_Raster2_tag1@@": "Ez a V érték vagy az irány lesz.",
	"@@Viewshed_Analysis-Method_tag0@@": "Ezzel a láthatóság kiszámításának módszere választható ki. A beállítás lehetőséget ad arra, hogy a pontosság egy részét feláldozza a nagyobb teljesítményért.",
	"@@Viewshed_Analysis-Method_tag1@@": "Minden rálátási vonal--a raszterben mindegyik pixelen megvizsgálja a rálátási vonalat a látható területek megállapításához. Ez az alapértelmezett módszer.",
	"@@Viewshed_Analysis-Method_tag2@@": "Kerületi rálátási vonalak--csak a látható területek kerületén lévő pixeleken vizsgálja meg a rálátási vonalakat a látható területek megállapításához. Ez a metódus gyorsabb, mint a <strong>Minden rálátási vonal</strong>, mivel a számítás kevesebb rálátási vonalat tartalmaz.",
	"@@Viewshed_Analysis-Type_tag0@@": "Az elvégezni kívánt láthatóságelemzés típusa választható ki kétféle lehetőségből: megadható, hogy az egyes cellák mennyire láthatóak a megfigyelők számára, vagy megállapítható mindegyik felszíni helyen, hogy mely megfigyelők láthatóak.",
	"@@Viewshed_Analysis-Type_tag1@@": "Gyakoriság--azoknak az eseteknek a száma, amikor a bemeneti felszínt tartalmazó raszteren lévő pixelhelyek láthatóak a bemeneti megfigyelési helyekről (pontként vagy csomópontként, ha a megfigyelési vektoros elemek polyline elemek). Ez az alapértelmezés.",
	"@@Viewshed_Analysis-Type_tag2@@": "Megfigyelők--a kimenet pontosan azonosítja, hogy mely megfigyelési pontok láthatóak a raszter egyes felszíni helyeiről. A bemeneti megfigyelők legnagyobb megengedett száma 32 ennél az elemzéstípusnál.",
	"@@Viewshed_Horizontal-End-Angle_tag0@@": "Ez az érték határozza meg a vízszintes pásztázási tartomány végszögét. Az értéket fokban kell megadni 0 és 360,0 között, ahol 0 az északi irány. Az alapértelmezett érték 360,0.",
	"@@Viewshed_Horizontal-End-Angle_tag1@@": "Lehet mező a bemeneti <strong>Megfigyelői vektoros elemek</strong> adathalmazán vagy numerikus érték. Ha ennek a paraméternek értéket ad, az az érték az összes megfigyelőre érvényes lesz. Ha minden egyes megfigyelőhöz más értéket szeretne rendelni, akkor állítsa a paramétert a<strong>Megfigyelői vektoros elemek</strong> adathalmaz valamelyik mezőjére.",
	"@@Viewshed_Horizontal-Start-Angle_tag0@@": "Ez az érték határozza meg a vízszintes pásztázási tartomány kezdőszögét. Az értéket fokban kell megadni 0 és 360,0 között, ahol 0 az északi irány. Az alapértelmezett érték 0.",
	"@@Viewshed_Horizontal-Start-Angle_tag1@@": "Lehet mező a bemeneti <strong>Megfigyelői vektoros elemek</strong> adathalmazán vagy numerikus érték. Ha ennek a paraméternek értéket ad, az az érték az összes megfigyelőre érvényes lesz. Ha minden egyes megfigyelőhöz más értéket szeretne rendelni, akkor állítsa a paramétert a<strong>Megfigyelői vektoros elemek</strong> adathalmaz valamelyik mezőjére.",
	"@@Viewshed_Inner-Radius-is-3D-Distance_tag0@@": "A belső sugár paraméterhez használt távolságtípus.",
	"@@Viewshed_Inner-Radius-is-3D-Distance_tag1@@": "Nincs bejelölve--A <strong>Belső sugár</strong> értéke 2D távolságként lesz értelmezve. Ez az alapértelmezés.",
	"@@Viewshed_Inner-Radius-is-3D-Distance_tag4@@": "Bejelölve--A <strong>Belső sugár</strong> 3D távolságként lesz értelmezve.",
	"@@Viewshed_Inner-Radius_tag0@@": "Ez az érték határozza meg a kezdő (minimum) távolságot, amelytől indulva a láthatóságot meg kell határozni. Az ennél a távolságnál közelebbi pixelek nem láthatónak minősülnek a kimenetben, azonban akadályozhatják a <strong>Belső sugár</strong> és a <strong>Külső sugár</strong> közötti pixelek láthatóságát. Az alapértelmezett érték 0.",
	"@@Viewshed_Inner-Radius_tag5@@": "Lehet mező a bemeneti <strong>Megfigyelői vektoros elemek</strong> adathalmazán vagy numerikus érték. Ha ennek a paraméternek értéket ad, az az érték az összes megfigyelőre érvényes lesz. Ha minden egyes megfigyelőhöz más értéket szeretne rendelni, akkor állítsa a paramétert a<strong>Megfigyelői vektoros elemek</strong> adathalmaz valamelyik mezőjére.",
	"@@Viewshed_Observer-Elevation_tag0@@": "Ez az érték szolgál a megfigyelési pontok vagy csomópontok felszíni magasságának megadására.",
	"@@Viewshed_Observer-Elevation_tag1@@": "Lehet mező a bemeneti <strong>Megfigyelői vektoros elemek</strong> adathalmazán vagy numerikus érték. Ha ez a paraméter nincs megadva, a függvény a megfigyelő magasságát bilineáris interpolációval számítja a felszínraszterből. Ha ennek a paraméternek értéket ad, akkor az az érték az összes megfigyelőre érvényes lesz. Ha minden egyes megfigyelőhöz más értéket szeretne rendelni, akkor állítsa a paramétert a<strong>Megfigyelői vektoros elemek</strong> adathalmaz valamelyik mezőjére.",
	"@@Viewshed_Observer-Features_tag0@@": "A megfigyelési helyeket azonosító, kötelező bemeneti vektoroselem-osztály. Lehetnek pont, multipoint vagy vonallánc típusú vektoros elemek.",
	"@@Viewshed_Observer-Features_tag1@@": "A függvény a bemeneti vektoroselem-osztályt 3D geocentrikus koordináta-rendszerré alakítja a láthatóság számítása során. A felszínraszter kiterjedésén kívülre vagy NoData cellákba eső megfigyelőket a függvény nem veszi figyelembe a számítás során.",
	"@@Viewshed_Observer-Offset_tag0@@": "Ez az érték egy, a megfigyelési magassághoz adandó (a felszín mértékegységében mért) függőleges távolság. Pozitív egész szám vagy lebegőpontos érték lehet.",
	"@@Viewshed_Observer-Offset_tag1@@": "Lehet mező a bemeneti <strong>Megfigyelői vektoros elemek</strong> adathalmazán vagy numerikus érték. Ha ennek a paraméternek értéket ad, az az érték az összes megfigyelőre érvényes lesz. Ha minden egyes megfigyelőhöz más értéket szeretne rendelni, akkor állítsa a paramétert a<strong>Megfigyelői vektoros elemek</strong> adathalmaz valamelyik mezőjére.",
	"@@Viewshed_Outer-Radius-is-3D-Distance_tag0@@": "A külső sugár paraméterhez használt távolságtípus.",
	"@@Viewshed_Outer-Radius-is-3D-Distance_tag1@@": "Nincs bejelölve--A <strong>Külső sugár</strong> értéke 2D távolságként lesz értelmezve. Ez az alapértelmezés.",
	"@@Viewshed_Outer-Radius-is-3D-Distance_tag4@@": "Bejelölve--A <strong>Külső sugár</strong> 3D távolságként lesz értelmezve.",
	"@@Viewshed_Outer-Radius_tag0@@": "Ez az érték határozza meg a legnagyobb (maximum) távolságot, amelytől indulva a láthatóságot meg kell határozni. Az ezen a távolságon túl található pixelek ki lesznek zárva az elemzésből.",
	"@@Viewshed_Outer-Radius_tag1@@": "Lehet mező a bemeneti <strong>Megfigyelői vektoros elemek</strong> adathalmazán vagy numerikus érték. Ha ennek a paraméternek értéket ad, az az érték az összes megfigyelőre érvényes lesz. Ha minden egyes megfigyelőhöz más értéket szeretne rendelni, akkor állítsa a paramétert a <strong>Megfigyelői vektoros elemek</strong> adathalmaz valamelyik mezőjére.",
	"@@Viewshed_Raster_tag0@@": "A kötelező bemeneti felszínraszter. Lehet integer- vagy lebegőpontos raszter.",
	"@@Viewshed_Raster_tag1@@": "A függvény a bemenetet 3D geocentrikus koordináta-rendszerré alakítja a láthatóság számítása során. A bemeneti raszteren lévő NoData cellák nem akadályozzák a láthatóság megállapítását.",
	"@@Viewshed_Refractive-Coefficient_tag0@@": "A látható fény fénytörési együtthatója a levegőben.",
	"@@Viewshed_Refractive-Coefficient_tag1@@": "Az alapértelmezett érték 0,13.",
	"@@Viewshed_Surface-Offset_tag0@@": "Ez az érték egy, az egyes célpixeleknek a láthatóság számítása során való figyelembevételekor azok z értékéhez adandó (a felszín mértékegységében mért) függőleges távolság. Pozitív egész szám vagy lebegőpontos érték lehet.",
	"@@Viewshed_Surface-Offset_tag1@@": "Lehet mező a bemeneti <strong>Megfigyelői vektoros elemek</strong> adathalmazán vagy numerikus érték. Ha ennek a paraméternek értéket ad, az az érték az összes megfigyelőre érvényes lesz. Ha minden egyes megfigyelőhöz más értéket szeretne rendelni, akkor állítsa a paramétert a <strong>Megfigyelői vektoros elemek</strong> adathalmaz valamelyik mezőjére.",
	"@@Viewshed_Vertical-Error_tag0@@": "A bizonytalanság mértéke a felszíni magasságértékekben az átlagos négyzetes hiba gyökével (RMSE) mérve. Lebegőpontos érték, amely a bemeneti magasságértékek várható hibáját mutatja. Amikor ennek a paraméternek 0-nál nagyobb értéket ad, a kimeneti láthatósági raszter lebegőpontos raszter lesz. Ebben az esetben a kimeneti láthatósági raszter pixelértékei azoknak a valószínűségeknek az összegét jelentik, amellyel a cella látható a megfigyelők bármelyike számára.",
	"@@Viewshed_Vertical-Error_tag1@@": "Ha az <strong>Elemzés típusa</strong> <strong>Megfigyelők</strong> vagy az <strong>Elemzési módszer</strong> <strong>Kerületi rálátási vonalak</strong>, akkor ez a ez a paraméter le van tiltva.",
	"@@Viewshed_Vertical-Lower-Angle_tag0@@": "Ez az érték a pásztázás alsó függőleges szögkorlátját határozza meg egy vízszintes sík alatt. Az értéket fokokban kell megadni −90,0 és 0 között, és lehet egész szám vagy lebegőpontos érték. Az alapértelmezett érték -90,0.",
	"@@Viewshed_Vertical-Lower-Angle_tag1@@": "Lehet mező a bemeneti <strong>Megfigyelői vektoros elemek</strong> adathalmazán vagy numerikus érték. Ha ennek a paraméternek értéket ad, az az érték az összes megfigyelőre érvényes lesz. Ha minden egyes megfigyelőhöz más értéket szeretne rendelni, akkor állítsa a paramétert a <strong>Megfigyelői vektoros elemek</strong> adathalmaz valamelyik mezőjére.",
	"@@Viewshed_Vertical-Upper-Angle_tag0@@": "Ez az érték a pásztázás felső függőleges szögkorlátját határozza meg egy vízszintes sík felett. Az értéket fokokban kell megadni 0 és 90,0 között, és lehet egész szám vagy lebegőpontos érték. Az alapértelmezett érték 90,0.",
	"@@Viewshed_Vertical-Upper-Angle_tag1@@": "Lehet mező a bemeneti <strong>Megfigyelői vektoros elemek</strong> adathalmazán vagy numerikus érték. Ha ennek a paraméternek értéket ad, az az érték az összes megfigyelőre érvényes lesz. Ha minden egyes megfigyelőhöz más értéket szeretne rendelni, akkor állítsa a paramétert a <strong>Megfigyelői vektoros elemek</strong> adathalmaz valamelyik mezőjére.",
	"@@Watershed_Flow-Direction-Raster_tag0@@": "A bemeneti raszter, amely a kiáramlás irányát mutatja az egyes cellákból.",
	"@@Watershed_Flow-Direction-Raster_tag1@@": "Az áramlásiirány-raszter az <strong>Áramlási irány</strong> függvény futtatásával hozható létre.",
	"@@Watershed_Pour-Point(s)-Raster_tag0@@": "A bemeneti kifolyásipont-helyek.",
	"@@Watershed_Pour-Point(s)-Raster_tag1@@": "Ez a raszter azokat a cellákat jelenti, amelyek alapján az összefolyási terület vagy vízgyűjtő terület meghatározása történik. Minden olyan cellát forrásként használ, amelynek az értéke nem NoData.",
	"@@Watershed_Pour-Point-Field_tag0@@": "Az értékek kifolyásipont-helyekhez rendeléséhez használt mező.",
	"@@Watershed_Pour-Point-Field_tag1@@": "Raszteres kifolyásipont-adathalmaz esetén az alapértelmezés a(z) ${Value} használata.",
	"@@Weighted-Overlay_Cellsize-Type_tag0@@": "Válassza ki, hogy melyik cellaméretet szeretné használni a kimeneti raszterben. Ha mindegyik bemeneti cellaméret azonos, mindegyik lehetőség ugyanarra az eredményre vezet.",
	"@@Weighted-Overlay_Cellsize-Type_tag1@@": "Első--a bemeneti raszterek első cellaméretének használata.",
	"@@Weighted-Overlay_Cellsize-Type_tag2@@": "Minimum--az összes bemeneti raszter legkisebb cellaméretének használata.",
	"@@Weighted-Overlay_Cellsize-Type_tag3@@": "Maximum--az összes bemeneti raszter legnagyobb cellaméretének használata. Ez az alapértelmezés.",
	"@@Weighted-Overlay_Cellsize-Type_tag4@@": "Átlag--az összes bemeneti raszter átlagos cellaméretének használata.",
	"@@Weighted-Overlay_Cellsize-Type_tag5@@": "Utolsó--a bemeneti raszterek utolsó cellaméretének használata.",
	"@@Weighted-Overlay_Extent-Type_tag0@@": "Válassza ki, hogy melyik kiterjedést szeretné használni a kimeneti raszterben:",
	"@@Weighted-Overlay_Extent-Type_tag1@@": "Első--az első bemeneti raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Weighted-Overlay_Extent-Type_tag2@@": "Metszet--az átfedésben lévő pixelek kiterjedésének használata a feldolgozási kiterjedés meghatározásához. Ez az alapértelmezés.",
	"@@Weighted-Overlay_Extent-Type_tag3@@": "Unió--az összes raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Weighted-Overlay_Extent-Type_tag4@@": "Utolsó--az utolsó bemeneti raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Weighted-Overlay_Scales_tag0@@": "Az új értékek tartománya, amelyek alapján újra le kell képezni a régi értékeket.",
	"@@Weighted-Overlay_Weighted-Overlay-Table_tag0@@": "A súlyozott átfedési táblázat négy részből áll:",
	"@@Weighted-Overlay_Weighted-Overlay-Table_tag1@@": "Réteg--mindegyik bemeneti raszternek integer típusúnak kell lennie.",
	"@@Weighted-Overlay_Weighted-Overlay-Table_tag2@@": "Hatás--mindegyik bemeneti raszter a fontossága vagy a hatása alapján kap súlyt, százalékos arányban. A százalékos hatássúlyok összegének 100-at kell kiadnia, és mindegyik súlyt egész számmal kell megadni.",
	"@@Weighted-Overlay_Weighted-Overlay-Table_tag3@@": "Mező--a súlyozáshoz használt integer- vagy karakterláncmező a bemeneti raszteren.",
	"@@Weighted-Overlay_Weighted-Overlay-Table_tag4@@": "Újraleképezési tábla--a bemeneti raszterben lévő értékek mind új skálaértéket kapnak az újraleképezési tábla alapján. A skálaérték lehet érvényes érték vagy NoData érték.",
	"@@Weighted-Sum_Cellsize-Type_tag0@@": "Válassza ki, hogy melyik cellaméretet szeretné használni a kimeneti raszterben. Ha mindegyik bemeneti cellaméret azonos, mindegyik lehetőség ugyanarra az eredményre vezet.",
	"@@Weighted-Sum_Cellsize-Type_tag1@@": "Első--a bemeneti raszterek első cellaméretének használata.",
	"@@Weighted-Sum_Cellsize-Type_tag2@@": "Utolsó--a bemeneti raszterek utolsó cellaméretének használata.",
	"@@Weighted-Sum_Cellsize-Type_tag3@@": "Maximum--az összes bemeneti raszter legnagyobb cellaméretének használata. Ez az alapértelmezés.",
	"@@Weighted-Sum_Cellsize-Type_tag4@@": "Átlag--az összes bemeneti raszter átlagos cellaméretének használata.",
	"@@Weighted-Sum_Cellsize-Type_tag5@@": "Minimum--az összes bemeneti raszter legkisebb cellaméretének használata.",
	"@@Weighted-Sum_Extent-Type_tag0@@": "Válassza ki, hogy melyik kiterjedést szeretné használni a kimeneti raszterben:",
	"@@Weighted-Sum_Extent-Type_tag1@@": "Első--az első bemeneti raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Weighted-Sum_Extent-Type_tag2@@": "Metszet--az átfedésben lévő pixelek kiterjedésének használata a feldolgozási kiterjedés meghatározásához. Ez az alapértelmezés.",
	"@@Weighted-Sum_Extent-Type_tag3@@": "Utolsó--az utolsó bemeneti raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Weighted-Sum_Extent-Type_tag4@@": "Unió--az összes raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Weighted-Sum_Weighted-Sum-Table_tag0@@": "A súlyozott összegtáblázatot három jellemző határozza meg:",
	"@@Weighted-Sum_Weighted-Sum-Table_tag1@@": "Réteg--a súlyozott raszter.",
	"@@Weighted-Sum_Weighted-Sum-Table_tag2@@": "Mező--a raszter súlyozáshoz használt mezője.",
	"@@Weighted-Sum_Weighted-Sum-Table_tag3@@": "Súly--a súlyérték, amellyel szorozni kell a rasztert. Bármilyen pozitív vagy negatív decimális érték lehet.",
	"@@Wind-Chill_Temperature-Raster_tag0@@": "Egy sávval rendelkező raszter, amelyben a pixelértékek a környezeti levegő-hőmérsékletet jelölik.",
	"@@Wind-Chill_Temperature-Units_tag0@@": "A bemeneti hőmérsékletraszterhez társított mértékegység. A rendelkezésre álló bemeneti mértékegységek: Celsius, Fahrenheit és Kelvin.",
	"@@Wind-Chill_Wind-Chill-Units_tag0@@": "A kimeneti raszterhez társított mértékegység. A rendelkezésre álló kimeneti mértékegységek: Celsius, Fahrenheit és Kelvin.",
	"@@Wind-Chill_Wind-Speed-Raster_tag0@@": "Egy sávval rendelkező raszter, amelyben a pixelértékek a szél sebességét jelölik.",
	"@@Wind-Chill_Wind-Speed-Units_tag0@@": "A szélsebességraszter mértékegységét adja meg:",
	"@@Wind-Chill_Wind-Speed-Units_tag1@@": "Mérföld per óra (mph)",
	"@@Wind-Chill_Wind-Speed-Units_tag2@@": "Kilométer per óra (km/h)",
	"@@Wind-Chill_Wind-Speed-Units_tag3@@": "Méter per másodperc (m/s)",
	"@@Wind-Chill_Wind-Speed-Units_tag4@@": "Láb per másodperc (ft/s)",
	"@@Wind-Chill_Wind-Speed-Units_tag5@@": "Csomó (kn)",
	"@@Zonal-Remap_Background-Value_tag0@@": "A kimeneti raszter kezdeti pixelértéke a bemeneti pixelek újraleképezése előtt.",
	"@@Zonal-Remap_Default-Output-Value_tag0@@": "Az ahhoz a pixelhez rendelt érték, amely a strong>Zónára vonatkozó attribútumtáblában</strong> meghatározott feltételek egyikét sem elégíti ki.",
	"@@Zonal-Remap_Default-Output-Value_tag3@@": "Ugyanez lesz a kimeneti pixel értéke, ha vagy a <strong>Kimeneti érték mezőneve</strong> paraméter nincs megadva, vagy a hozzá tartozó, zónára vonatkozó küszöbérték kimeneti értéke nincs megadva a <strong>Zónára vonatkozó attribútumtáblában</strong>.",
	"@@Zonal-Remap_Maximum-Value-Field-Name_tag0@@": "Annak a maximum értéket tartalmazó mezőnek a neve, amely alatt egy bemeneti pixel újra le lesz képezve.",
	"@@Zonal-Remap_Maximum-Value-Field-Name_tag1@@": "Ha nincs megadva, vagy ha a mező null értékű, a függvény nem ellenőrzi a maximum érték feltételt a pixelértékeknél.",
	"@@Zonal-Remap_Minimum-Value-Field-Name_tag0@@": "Annak a minimum értéket tartalmazó mezőnek a neve, amely felett egy bemeneti pixel újra le lesz képezve.",
	"@@Zonal-Remap_Minimum-Value-Field-Name_tag1@@": "Ha nincs megadva, vagy ha a mező null értékű, a függvény nem ellenőrzi a minimum érték feltételt a pixelértékeknél.",
	"@@Zonal-Remap_Output-Value-Field-Name_tag0@@": "Annak a célértéket tartalmazó mezőnek a neve, amelyre egy bemeneti pixel újra le lesz képezve.",
	"@@Zonal-Remap_Output-Value-Field-Name_tag1@@": "Ha nincs megadva, vagy ha a mező null értékű, a rendszer az újból leképezett pixelértékeket az <strong>Alapértelmezett kimeneti érték</strong> szerint állítja be.",
	"@@Zonal-Remap_Value-Raster_tag0@@": "Az újraleképezendő pixelértékeket tartalmazó, egy sávval rendelkező bemeneti raszter.",
	"@@Zonal-Remap_Where-Clause_tag0@@": "Nem kötelező lekérdezés, amelynek célpontja a <strong>Zónára vonatkozó attribútumtábla</strong>.",
	"@@Zonal-Remap_Where-Clause_tag3@@": "Ha példaként a fenti táblát használná, a lekérdezés a következő lenne: ${Variable1 = 'bare earth' AND Variable2 = 'California'}.",
	"@@Zonal-Remap_Zonal-Attributes-Table_tag0@@": "Legalább három táblát tartalmazó, kötelező bemeneti tábla. Legalább a következőket tartalmaznia kell: minimális küszöbérték, maximális küszöbérték és célérték. A célérték az a mező, amely az újraleképezett értéket tartalmazni fogja.",
	"@@Zonal-Remap_Zonal-Attributes-Table_tag1@@": "A fájl formátuma lehet vektoroselem-osztály, vektoros szolgáltatás vagy az ArcGIS által támogatott bármely táblatípus.",
	"@@Zonal-Remap_Zone-Field_tag0@@": "A <strong>Zónára vonatkozó attribútumtáblában</strong> szereplő, a zónaazonosító értékeket tartalmazó mezőnév.",
	"@@Zonal-Remap_Zone-Field_tag3@@": "A zónaazonosító értékek közvetlenül kapcsolódnak a zónára vonatkozó raszterben lévő zónaazonosítókhoz. Újraleképezés közben egy újabb szűrési szintet biztosítanak. Ha a táblában egy megadott rekordhoz nincs zónaazonosító társítva, az nem fog részt venni az újraleképezésben.",
	"@@Zonal-Remap_Zone-Raster_tag0@@": "Egy sávval rendelkező raszter, amelyben mindegyik pixel egy megadott helyhez társított zónákat határoz meg. Egy zóna a bemenet minden olyan területe, amely azonos értékkel rendelkezik. Ezeknek a területeknek nem kell folytonosnak lenniük.",
	"@@Predict-Using-Trend_dimensiondefinition_tag0@@": "Az előrejelzés dimenzióértékeinek biztosítására szolgáló módszert határozza meg.",
	"@@Predict-Using-Trend_dimensiondefinition_tag1@@": "<strong>Érték szerint</strong>--Az előrejelzés számítása egyetlen dimenzióértékre történik majd. Például ha az éves csapadékmennyiséget kívánja előre jelezni 2050-re, 2100-ra és 2150-re. Ez az alapértelmezés.",
	"@@Predict-Using-Trend_dimensiondefinition_tag2@@": "<strong>Időköz szerint</strong>--Az előrejelzést a rendszer a dimenzió kezdő és záró dátum által meghatározott időközére számítja ki. Például ha minden évre szeretné előre jelezni az éves csapadékmennyiséget 2050 és 2150 között.",
	"@@Predict-Using-Trend_end_tag0@@": "A dimenzió időközének az előrejelzésben használni kívánt záró dátuma, magassága vagy mélysége.",
	"@@Predict-Using-Trend_end_tag1@@": "Ennek a paraméternek a megadása kötelező, amikor a <strong>Dimenziódefiníció</strong> paraméter beállítása <strong>Időköz szerint</strong>.",
	"@@Predict-Using-Trend_raster_tag0@@": "A <strong>Trandraszter létrehozása</strong> függvény által visszaadott bemeneti többdimenziós trendraszter.",
	"@@Predict-Using-Trend_start_tag0@@": "A dimenzió időközének az előrejelzésben használni kívánt kezdő dátuma, magassága vagy mélysége.",
	"@@Predict-Using-Trend_start_tag1@@": "Ennek a paraméternek a megadása kötelező, amikor a <strong>Dimenziódefiníció</strong> paraméter beállítása <strong>Időköz szerint</strong>.",
	"@@Predict-Using-Trend_unit_tag0@@": "Az értékintervallumhoz használt mértékegység. Ez a paraméter csak akkor alkalmazandó, ha az elemzés dimenziója idődimenzió.",
	"@@Predict-Using-Trend_unit_tag1@@": "<strong>Óra</strong>--A rendszer a <strong>Kezdés</strong>, a <strong>Befejezés</strong> és az <strong>Értékintervallum</strong> paraméterekkel leírt időtartam mindegyik órájára kiszámítja az előrejelzést",
	"@@Predict-Using-Trend_unit_tag2@@": "<strong>Nap</strong>--A rendszer a <strong>Kezdés</strong>, a <strong>Befejezés</strong> és az <strong>Értékintervallum</strong> paraméterekkel leírt időtartam mindegyik napjára kiszámítja az előrejelzést",
	"@@Predict-Using-Trend_unit_tag3@@": "<strong>Hét</strong>--A rendszer a <strong>Kezdés</strong>, a <strong>Befejezés</strong> és az <strong>Értékintervallum</strong> paraméterekkel leírt időtartam mindegyik hetére kiszámítja az előrejelzést",
	"@@Predict-Using-Trend_unit_tag4@@": "<strong>Hónap</strong>--A rendszer a <strong>Kezdés</strong>, a <strong>Befejezés</strong> és az <strong>Értékintervallum</strong> paraméterekkel leírt időtartam mindegyik hónapjára kiszámítja az előrejelzést",
	"@@Predict-Using-Trend_unit_tag5@@": "<strong>Év</strong>--A rendszer a <strong>Kezdés</strong>, a <strong>Befejezés</strong> és az <strong>Értékintervallum</strong> paraméterekkel leírt időtartam mindegyik évére kiszámítja az előrejelzést",
	"@@Predict-Using-Trend_valueinterval_tag0@@": "Az előrejelzésbe belefoglalandó két dimenzióérték közötti lépések száma. Az alapértelmezett érték 1.",
	"@@Predict-Using-Trend_valueinterval_tag1@@": "Ennek a paraméternek a megadása kötelező, amikor a <strong>Dimenziódefiníció</strong> paraméter beállítása <strong>Időköz szerint</strong>.",
	"@@Predict-Using-Trend_values_tag0@@": "Az előrejelzésben használandó dimenzióérték vagy dimenzióértékek.",
	"@@Predict-Using-Trend_values_tag1@@": "Az idő-, mélység- és magasságértékek formátumának egyeznie kell a trendraszter létrehozásához használt dimenzióértékek formátumával. Ha a trendraszter az StdTime dimenzió számára készült, akkor a formátum ÉÉÉÉ-HH-NNTÓÓ:PP:MM kell legyen, azaz – például – 2050-01-01T00:00:00. Ha több érték van, pontosvesszővel kel elválasztani őket.",
	"@@Process-Raster-Collection_aggregationfunction_tag0@@": "Határozza meg a több szelet kevesebb szeletbe vagy egyetlen szeletbe való összesítésére szolgáló raszterfüggvénysablont.",
	"@@Process-Raster-Collection_dimension_tag0@@": "Az összevonás dimenziója. Ez az a dimenzió, amely mentén a változók össze lesznek vonva.",
	"@@Process-Raster-Collection_itemfunction_tag0@@": "Határozza meg a a bemeneti rasztergyűjtenényben lévő egyes szeletek vagy elemek feldolgozásához használt raszterfüggvénysablont.",
	"@@Process-Raster-Collection_keywordinterval_tag0@@": "Ezzel adható meg a dimenzió mentén történő összevonás során használt kulcsszóintervallum. Kötelező a paraméter megadása, ha a <strong>Típus</strong> beállítása <strong>Intervallumkulcsszó</strong>, és az összevonásnak időben kell történnie.",
	"@@Process-Raster-Collection_keywordinterval_tag1@@": "<strong>Óránkénti</strong>--Az adatértékek óránkénti időlépésekbe lesznek összevonva, és az eredmény minden órát tartalmazni fog az idősorban.",
	"@@Process-Raster-Collection_keywordinterval_tag2@@": "<strong>Napi</strong>--Az adatértékek napi időlépésekbe lesznek összevonva, és az eredmény minden napot tartalmazni fog az idősorban.",
	"@@Process-Raster-Collection_keywordinterval_tag3@@": "<strong>Heti</strong>--Az adatértékek heti időlépésekbe lesznek összevonva, és az eredmény minden hetet tartalmazni fog az idősorban.",
	"@@Process-Raster-Collection_keywordinterval_tag4@@": "<strong>Tíznapos</strong>--Az adatértékek 3 darab 10 napos periódusba lesznek összevonva. Az utolsó periódus 10 napnál többet és kevesebbet is tartalmazhat. A kimenet 3 időszeletet fog tartalmazni mindegyik hónaphoz.",
	"@@Process-Raster-Collection_keywordinterval_tag5@@": "<strong>Ötnapos</strong>--Az adatértékek 6 darab 5 napos periódusba lesznek összevonva. Az utolsó periódus 5 napnál többet és kevesebbet is tartalmazhat. A kimenet 6 időszeletet fog tartalmazni mindegyik hónaphoz.",
	"@@Process-Raster-Collection_keywordinterval_tag6@@": "<strong>Havi</strong>--Az adatértékek havi időlépésekbe lesznek összevonva, és az eredmény minden hónapot tartalmazni fog az idősorban.",
	"@@Process-Raster-Collection_keywordinterval_tag7@@": "<strong>Negyedéves</strong>--Az adatértékek negyedéves időlépésekbe lesznek összevonva, és az eredmény minden negyedévet tartalmazni fog az idősorban.",
	"@@Process-Raster-Collection_keywordinterval_tag8@@": "<strong>Éves</strong>--Az adatértékek éves időlépésekbe lesznek összevonva, és az eredmény minden évet tartalmazni fog az idősorban.",
	"@@Process-Raster-Collection_keywordinterval_tag9@@": "<strong>Ismétlődő napi</strong>--Az adatértékek napi időlépésekbe lesznek összevonva, és az eredmény egy-egy összevont értéket fog tartalmazni a julián naptár egy-egy napján. A kimenet legfeljebb 366 napi időszeletet fog tartalmazni.",
	"@@Process-Raster-Collection_keywordinterval_tag10@@": "<strong>Ismétlődő heti</strong>--Az adatértékek heti időlépésekbe lesznek összevonva, és az eredmény hetente egy összevont értéket fog tartalmazni. A kimenet legfeljebb 53 heti időszeletet fog tartalmazni.",
	"@@Process-Raster-Collection_keywordinterval_tag11@@": "<strong>Ismétlődő havi</strong>--Az adatértékek heti időlépésekbe lesznek összevonva, és az eredmény havonta egy összevont értéket fog tartalmazni. A kimenet legfeljebb 12 havi időszeletet fog tartalmazni.",
	"@@Process-Raster-Collection_keywordinterval_tag12@@": "<strong>Ismétlődő negyedéves</strong>--Az adatértékek heti időlépésekbe lesznek összevonva, és az eredmény negyedévente egy összevont értéket fog tartalmazni. A kimenet legfeljebb 4 negyedéves időszeletet fog tartalmazni.",
	"@@Process-Raster-Collection_maximumvalue_tag0@@": "A tartomány legnagyobb értéke.",
	"@@Process-Raster-Collection_maximumvalue_tag1@@": "Kötelező a paraméter megadása, ha a <strong>Típus</strong> paraméter beállítása <strong>Intervallumtartományok</strong>.",
	"@@Process-Raster-Collection_minimumvalue_tag0@@": "A tartomány legkisebb értéke.",
	"@@Process-Raster-Collection_minimumvalue_tag1@@": "Kötelező a paraméter megadása, ha a <strong>Típus</strong> paraméter beállítása <strong>Intervallumtartományok</strong>.",
	"@@Process-Raster-Collection_processingfunction_tag0@@": "Adja meg a feldolgozott raszteres réteg megjelenítésére szolgáló raszterfüggvényt.",
	"@@Process-Raster-Collection_rastercollection_tag0@@": "A bemeneti többdimenziós raszter-, mozaikréteg- vagy mozaik-adathalmaz.",
	"@@Process-Raster-Collection_type_tag0@@": "Az adatok összevonásához használt dimenzióintervallum választható ki.",
	"@@Process-Raster-Collection_type_tag1@@": "<strong>Mind</strong>--Az adatértékek össze lesznek vonva az összes szeleten. Ez az alapértelmezés.",
	"@@Process-Raster-Collection_type_tag2@@": "<strong>Intervallumkulcsszó</strong>--A változóadatok köztudott intervallumot használva lesznek összevonva.",
	"@@Process-Raster-Collection_type_tag3@@": "<strong>Intervallumtartományok</strong>--A változóadatok megadott értékpárok vagy dátumok között lesznek összevonva.",
	"@@Process-Raster-Collection_type_tag4@@": "<strong>Intervallumértékek</strong>--A változóadatok felhasználó által megadott intervallumot és mértékegységet használva lesznek összevonva.",
	"@@Process-Raster-Collection_unit_tag0@@": "Az intervallumértékhez használt mértékegység. Kötelező a paraméter megadása, ha a <strong>Dimenzió</strong> valamilyen időmező, a <strong>Típus</strong>paraméter beállítása pedig <strong>Intervallumérték</strong>.",
	"@@Process-Raster-Collection_unit_tag1@@": "Ha az időtől eltérő dimenzió mentén von össze adatokat, ez a beállítás nem lesz elérhető, és az intervallumérték mértékegysége meg fog egyezni a bemeneti többdimenziós raszteres adat változójának mértékegységével.",
	"@@Process-Raster-Collection_unit_tag2@@": "<strong>Óra</strong>--Az adatértékek óránkénti időszeletekbe lesznek összevonva a megadott intervallumon.",
	"@@Process-Raster-Collection_unit_tag3@@": "<strong>Nap</strong>--Az adatértékek napi időszeletekbe lesznek összevonva a megadott intervallumon.",
	"@@Process-Raster-Collection_unit_tag4@@": "<strong>Hét</strong>--Az adatértékek heti időszeletekbe lesznek összevonva a megadott intervallumon.",
	"@@Process-Raster-Collection_unit_tag5@@": "<strong>Hónap</strong>--Az adatértékek havi időszeletekbe lesznek összevonva a megadott intervallumon.",
	"@@Process-Raster-Collection_unit_tag6@@": "<strong>Év</strong>--Az adatértékek éves időszeletekbe lesznek összevonva a megadott intervallumon.",
	"@@Process-Raster-Collection_valueinterval_tag0@@": "Az összevonáshoz használt intervallum mérete. Kötelező a paraméter megadása, ha a <strong>Típus</strong> paraméter beállítása <strong>Intervallumérték</strong>.",
	"@@Process-Raster-Collection_valueinterval_tag1@@": "Ha például 30 évnyi havi hőmérsékleti adatot szeretne összevonni 5 éves lépésekben, adjon meg 5-öt az <strong>Értékintervallum</strong> paraméter értékeként, és a <strong>Mértékegység</strong> paramétert állítsa az <strong>Év</strong> lehetőségre.",
	"@@Linear-Spectral-Unmixing_non-negative_tag0@@": "A kimeneti pixelértékeket meghatározó beállításokat adja meg.",
	"@@Linear-Spectral-Unmixing_non-negative_tag1@@": "Bejelölve--Nem lesznek negatív kimeneti értékek.",
	"@@Linear-Spectral-Unmixing_non-negative_tag2@@": "Nincs bejelölve--A töredékes felszínborításnak lehetnek negatív értékei.",
	"@@Linear-Spectral-Unmixing_raster_tag0@@": "A bemeneti raszter.",
	"@@Linear-Spectral-Unmixing_spectralprofile_tag0@@": "A kimeneti spektrálisprofilfájl.",
	"@@Linear-Spectral-Unmixing_spectralprofiletype_tag0@@": "A különböző felszínborítás osztályokra vonatkozó spektrális információ.",
	"@@Linear-Spectral-Unmixing_spectralprofiletype_tag1@@": "<strong>Spektrális profil</strong>--A <strong><strong>Maximális valószínűség osztályozás tanítása</strong></strong> eszközzel létrehozott osztályozásdefiníciós fájl (${.ecd}), vagy pedig az osztály spektrális profilját tartalmazó JavaScript objektumjelölő fájl (${.json}).",
	"@@Linear-Spectral-Unmixing_spectralprofiletype_tag2@@": "<strong>Tanítási funkció</strong>--A <strong>Tanítási mintakezelőben</strong> létrehozott polygon típusú vektoros elem vagy tanítási minta vektoroselem-osztály.",
	"@@Linear-Spectral-Unmixing_sumtoone_tag0@@": "A kimeneti pixelértékeket meghatározó beállításokat adja meg.",
	"@@Linear-Spectral-Unmixing_sumtoone_tag1@@": "Bejelölve--Az egyes pixelekre vonatkozó osztályértékek tizedesjegy formátumban vannak megadva, és az összes osztály összege egyenlő 1-gyel. Például: Osztálys1 = 0,16; Osztály2 = 0,24; Osztály3 = 0,60.",
	"@@Linear-Spectral-Unmixing_sumtoone_tag2@@": "Nincs bejelölve--A pixelen belüli összes osztály összege meghaladhatja az 1-et.",
	"@@Linear-Spectral-Unmixing_trainingfeature_tag0@@": "A bemeneti tanítási vektoros elem fájl.",
	"@@Aggregate_aggregationtechnique_tag0@@": "Az összevonáshoz használt módszer. A pontatlanabb kimeneti cellákban lévő bemeneti cellák értékeit a következő statisztikák egyike összesíti:",
	"@@Aggregate_aggregationtechnique_tag1@@": "<strong>Összeg</strong>--A bemeneti cellák összege. Ez az alapértelmezés.",
	"@@Aggregate_aggregationtechnique_tag2@@": "<strong>Maximum</strong>--A bemeneti cellák legnagyobb értéke.",
	"@@Aggregate_aggregationtechnique_tag3@@": "<strong>Átlag</strong>--A bemeneti cellák átlagértéke.",
	"@@Aggregate_aggregationtechnique_tag4@@": "<strong>Medián</strong>--A bemeneti cellák mediánértéke.",
	"@@Aggregate_aggregationtechnique_tag5@@": "<strong>Minimum</strong>--A bemeneti cellák legkisebb értéke.",
	"@@Aggregate_cellfactor_tag0@@": "Az a tényező, amellyel a bemeneti raszter cellaméretét meg kell szorozni.",
	"@@Aggregate_cellfactor_tag1@@": "Például ha a cellatényező értéke három, az azt eredményezi, hogy a kimeneti cellaméret háromszor nagyobb, mint a bemeneti raszteré.",
	"@@Aggregate_expandextentifneeded_tag0@@": "Azt határozza meg, hogy hogyan kell kezelni a bemeneti raszter határait, ha a bemeneti raszter sorai vagy oszlopai nem a cellatényező többszörösei.",
	"@@Aggregate_expandextentifneeded_tag1@@": "Bejelölve--Úgy bővíti ki a bemeneti raszter felső vagy jobb oldali határait, hogy az egy sorban vagy oszlopban lévő cellák teljes száma a cellatényező többszöröse legyen. Ezzel a beállítással a kimeneti raszter a kimeneti raszternél nagyobb térbeli kiterjedést tud lefedni. Ez az alapértelmezés.",
	"@@Aggregate_expandextentifneeded_tag2@@": "Nincs bejelölve--Csökkenti a sorok és oszlopok számát a kimeneti raszterben. Csonkolja a bemeneti raszter felső vagy jobb oldali határain lévő, fennmaradó cellákat, a cellatényező többszörösévé alakítva a bemeneti raszterben lévő sorok vagy oszlopok számát. Ezzel a beállítással a kimeneti raszter a kimeneti raszternél kisebb térbeli kiterjedést tud lefedni.",
	"@@Aggregate_ignorenodataincalculations_tag0@@": "Azt jelzi, hogy a ${NoData} értékek figyelmen kívül lesznek-e hagyva az összevonásszámítás során.",
	"@@Aggregate_ignorenodataincalculations_tag1@@": "Bejelölve--Azt adja meg, hogy ha léteznek ${NoData} értékek bármely olyan cellára, amely a kimeneti raszteren lévő nagyobb cella térbeli kiterjedésén belül esik, akkor a rendszer a ${NoData} értékeket figyelmen kívül hagyja a kimeneti cellapozíciók értékének meghatározásakor. A rendszer a kimeneti cella értékének meghatározásakor csak a kimeneti cella kiterjedésén belüli azon bemeneti cellákat használja, amelyek rendelkeznek adatértékkel. Ez az alapértelmezés.",
	"@@Aggregate_ignorenodataincalculations_tag2@@": "Nincs bejelölve--Azt adja meg, hogy ha a kimeneti raszteren lévő nagyobb cella térbeli kiterjedésén belüli valamelyik cella értéke ${NoData}, akkor az ahhoz a kimeneti cellához tartozó pozíciónak az értéke ${NoData} lesz. E beállítás használata esetén a rendszer adottnak veszi, hogy amikor a valamely összevonáson belüli cellák a ${NoData} értéket tartalmazzák, akkor nem áll rendelkezésre elegendő információ a megadott, a kimeneti érték meghatározásához szükséges számítások elvégzéséhez.",
	"@@Aggregate_raster_tag0@@": "Az összevonandó bemeneti raszter.",
	"@@Expand_numberofcells_tag0@@": "Az a cellaszám, amellyel bővíteni szükséges.",
	"@@Expand_numberofcells_tag1@@": "Az értéknek egész számnak kell lennie, és nem lehet kisebb nullánál.",
	"@@Expand_raster_tag0@@": "Az a bemeneti raszter, amelyre az azonosított zónákat ki szeretné bővíteni.",
	"@@Expand_raster_tag1@@": "Integer típusúnak kell lennie.",
	"@@Expand_zonevalues_tag0@@": "A kibővítendő zónák listája.",
	"@@Expand_zonevalues_tag1@@": "A zónaértékeknek egész számnak kell lenniük, és tetszőleges sorrendűek lehetnek.",
	"@@Expand_zonevalues_tag2@@": "Ha több zónát kíván megadni, válassza el szóközzel a zónaértékeket.",
	"@@Multidimensional-Filter_dimension_tag0@@": "A változók kinyerésének forrásául szolgáló dimenzió.",
	"@@Multidimensional-Filter_dimensiondefinition_tag0@@": "Ezzel adható meg a dimenzió szeleteléséhez használt módszer.",
	"@@Multidimensional-Filter_dimensiondefinition_tag1@@": "<strong>Mind</strong>--A rendszer mindegyik dimenzió összes tartományát használni fogja. Ez az alapértelmezés.",
	"@@Multidimensional-Filter_dimensiondefinition_tag2@@": "<strong>Értékek szerint</strong>--A rendszer a dimenziót dimenzióérték vagy értéklista használatával szeleteli fel.",
	"@@Multidimensional-Filter_dimensiondefinition_tag3@@": "<strong>Tartományok szerint</strong>--A rendszer a dimenziót tartomány  vagy tartománylista használatával szeleteli fel.",
	"@@Multidimensional-Filter_dimensiondefinition_tag4@@": "<strong>Iteráció szerint</strong>--A rendszer a dimenziót meghatározott intervallumméret felett szeleteli fel.",
	"@@Multidimensional-Filter_endoffirstiteration_tag0@@": "Az első intervallum vége. Ez az intervallum a az adathalmazon keresztül történő iterációra szolgál. Ennek a paraméternek a megadása kötelező, amikor a <strong>Dimenziódefiníció</strong> paraméter beállítása <strong>Iteráció szerint</strong>.",
	"@@Multidimensional-Filter_maximumvalue_tag0@@": "A tartomány maximális értéke. Ennek a paraméternek a megadása kötelező, amikor a <strong>Dimenziódefiníció</strong> paraméter beállítása <strong>Tartomány szerint</strong>.",
	"@@Multidimensional-Filter_minimumvalue_tag0@@": "A tartomány minimális értéke. Ennek a paraméternek a megadása kötelező, amikor a <strong>Dimenziódefiníció</strong> paraméter beállítása <strong>Tartomány szerint</strong>.",
	"@@Multidimensional-Filter_raster_tag0@@": "A bemeneti többdimenziós raszter.",
	"@@Multidimensional-Filter_ranges_tag0@@": "<p>A táblázatban meghatározott intervallumtartományok értékek csoportjainak összevonására szolgálnak. A minimum- és maximumértékek határozzák meg a belefoglalni kívánt tartományt.</p><p>E paraméter megadása kötelező, ha a <strong>Típus</strong>paraméter beállítása<strong>Intervallumtartományok</strong>.</p>",
	"@@Multidimensional-Filter_startoffirstiteration_tag0@@": "Az első időköz kezdete. Ez az intervallum a az adathalmazon keresztül történő iterációra szolgál. Ennek a paraméternek a megadása kötelező, amikor a <strong>Dimenziódefiníció</strong> paraméter beállítása <strong>Iteráció szerint</strong>.",
	"@@Multidimensional-Filter_step_tag0@@": "Az adatok szeletelésének gyakorisága. Kötlező a paraméter megadása, ha a <strong>Dimenziódefiníció</strong> paraméter beállítása <strong>Iteráció szerint</strong>. Az alapértelmezett érték 3.",
	"@@Multidimensional-Filter_unit_tag0@@": "Az iteráció mértékegységét adja meg. Kötelező a paraméter megadása, ha a <strong>Dimenziódefiníció</strong> paraméter beállítása <strong>Iteráció szerint</strong>, a <strong>Dimenzió</strong> paraméter beállítása pedig <strong>StdTime</strong>.",
	"@@Multidimensional-Filter_value_tag0@@": "A megadott dimenzió értéke. Ennek a paraméternek a megadása kötelező, amikor a <strong>Dimenziódefiníció</strong> paraméter beállítása <strong>Értékek szerint</strong>.",
	"@@Multidimensional-Filter_variables_tag0@@": "Azok a változók, amelyek majd a kimeneti többdimenziós raszteres rétegbe kerülnek. Ha nincs megadva változó, a rendszer az első változót fogja használni.",
	"@@Multidimensional-Filter_dimensionless_tag0@@": "Megadható, hogy a réteg rendelkezzen-e dimenzióértékekkel. Ez a beállítás csak akkor érhető el, ha egy réteg létrehozásához egyetlen szeletet választunk ki.",
	"@@Multidimensional-Filter_dimensionless_tag1@@": "Bejelölve – a réteg nem rendelkezik dimenzióértékekkel.",
	"@@Multidimensional-Filter_dimensionless_tag2@@": "Nincs bejelölve – a réteg rendelkezik dimenzióértékkel. Ez az alapértelmezés.",
	"@@Multidimensional-Raster_interpolationcellsize_tag0@@": "Au interpolált raszter cellamérete. Az alapértelmezett érték ${1}.",
	"@@Multidimensional-Raster_interpolationmethod_tag0@@": "A szabálytalan adatok interpolálására szolgáló újra-mintavételezési metódus.",
	"@@Multidimensional-Raster_interpolationmethod_tag1@@": "<strong>legközelebbi szomszéd</strong>--A legközelebbi bemeneti pixelt használva számítja ki a kimeneti pixel értékét. Ha nem létezik forráspixel, nem hozható létre új pixel a kimenetben. Ez az alapértelmezés.",
	"@@Multidimensional-Raster_interpolationmethod_tag2@@": "<strong>Lineáris Tinning</strong>--Háromszögelt, szabálytalan hálózatot használ a szabálytalan raszter egyes pixeleinek középpontjából kiindulva egy olyan felszín interpolálással történő meghatározásához, amelyet aztán szabályos raszterré alakít.",
	"@@Multidimensional-Raster_interpolationmethod_tag3@@": "<strong>Természetes szomszéd</strong>--Megkeresi adott bemeneti minták egy lekérdezési ponthoz legközelebb eső részhalmazát, és ezekhez arányos területek alapján súlyokat rendel az érték interpolálással történő meghatározásához.",
	"@@Multidimensional-Raster_interpolationmethod_tag4@@": "<strong>Inverz távolságsúlyozás</strong>--Mintapontok vagy -pixelek halmazának lineárisan súlyozott kombinációját használva határozza meg a pixelértékeket. A súly az ismert pontoktól vagy pixelektől mért távolság inverzének függvénye.",
	"@@Multidimensional-Raster_raster_tag0@@": "A bemeneti többdimenziós raszter.",
	"@@Multidimensional-Raster_variables_tag0@@": "Az a változó vagy azok a változók, amely vagy amelyek majd a többdimenziós raszteres rétegbe kerülnek.",
	"@@Random_distribution_tag0@@": "Adja meg a használni kívánt véletlen értékelosztási metódust.",
	"@@Random_distribution_tag1@@": "<strong>Egységes</strong> (Minimum, Maximum)--Megadott tartományú egységes eloszlás. Az alapértelmezett érték 0 a Minimum, és 1 a Maximum esetén. Ez az alapértelmezés.",
	"@@Random_distribution_tag2@@": "<strong>Integer</strong> (Minimum, Maximum)--Megadott tartományú integereloszlás. Az alapértelmezett érték 1 a Minimum, és 10 a Maximum esetén.",
	"@@Random_distribution_tag3@@": "<strong>Normál</strong> (Átlag, Szórás)--Normális eloszlás, meghatározott átlaggal és szórással. Az alapértelmezett érték 0 az Átlag, és 1 a Szórás esetén.",
	"@@Random_distribution_tag4@@": "<strong>Exponenciális</strong> (Átlag)--Exponencilis eloszlás, meghatározott átlaggal. Az alapértelmezett érték 1.",
	"@@Random_distribution_tag5@@": "<strong>Poisson</strong> (Mean)--Meghatározott átlagú Poisson-eloszlás. Az alapértelmezett érték 1.",
	"@@Random_distribution_tag6@@": "<strong>Gamma</strong> (Alfa, Béta)--Meghatározott alfa és béta paramtétekkel rendelkező Gamma-eloszlás. Az alapértelmezett érték 1 az alfa, és 1 a béta esetén.",
	"@@Random_distribution_tag7@@": "<strong>Binomiális</strong> (N, Valószínűség)--Meghatározott N-nel és valószínűséggel rendelkező binomiális eloszlás. The alapértelmezett érték 10 az N és 0,5 a valószínűség esetén.",
	"@@Random_distribution_tag8@@": "<strong>Geometriai</strong> (Valószínűség)--Meghatározott valószínűségú geometriai eloszlás. Az alapértelmezett érték 0,5.",
	"@@Random_distribution_tag9@@": "<strong>Negatív binomiális</strong> (r, valószínűség)--Meghatározott r paraméterű és valószínűségű Pascal-eloszlás. The alapértelmezett érték 10,0 az r, és 0,5 a valószínűség esetén.",
	"@@Random_randomnumbergenerator_tag0@@": "Adja meg azt a véletlenszám-generáló algoritmust, amely a mágnest és az eloszlást használja véletlen számok sorának előállításához. A rendelkezésre álló beállítások a következők:",
	"@@Random_randomnumbergenerator_tag1@@": "Standard C Rand",
	"@@Random_randomnumbergenerator_tag2@@": "ACM-gyűjtött algoritmus 599",
	"@@Random_randomnumbergenerator_tag3@@": "Mersenne Twister",
	"@@Random_randomnumbergenerator_tag4@@": "Az alapértelmezett érték a Mersenne Twister.",
	"@@Random_rasterinfo_tag0@@": "Ha könyvtárból vagy portálról kíván sablont betölteni, használja a <strong>Sablonraszter betöltése raster</strong> gombot.",
	"@@Random_seed_tag0@@": "A mágnes integer érték, és a véletlenszám-generátor indítására szolgál. Az alapértelmezett érték 1.",
	"@@Shrink_numberofcells_tag0@@": "A cellák azon értéke, amellyel az egyes megadott zónákat zsugorítani kell.",
	"@@Shrink_numberofcells_tag1@@": "Az értéknek egész számnak kell lennie, és nem lehet kisebb nullánál.",
	"@@Shrink_raster_tag0@@": "Az a bemeneti raszter, amelyre az azonosított zónákat zsugorítani szeretné.",
	"@@Shrink_raster_tag1@@": "Integer típusúnak kell lennie.",
	"@@Shrink_zonevalues_tag0@@": "A zsugorítani kívánt zónák listája.",
	"@@Shrink_zonevalues_tag1@@": "A zónaértékeknek egész számnak kell lenniük, és tetszőleges sorrendűek lehetnek.",
	"@@Shrink_zonevalues_tag2@@": "Ha több zónát kíván megadni, válassza el szóközzel a zónaértékeket.",
	"@@Distance-Accumulation_costraster_tag0@@": "Az egyes cellákon történő, síkrajzi értelemben vett áthaladás költségét vagy impedanciáját meghatározó raszter. Az egyes cellahelyeken szereplő értékek az azon történő áthaladás egységnyi távolságra eső költségét jelentik. Az eszköz a cellán történő áthaladás teljes költségének kiszámításához megszorozza az egyes cellahelyek értékét a cellafelbontással, és átlós mozgás esetén kompenzálja is az értéket.",
	"@@Distance-Accumulation_costraster_tag1@@": "A <strong>Költségraszter</strong> értékei lehetnek integer- vagy lebegőpontos értékek, de nem lehetnek negatívak vagy nullák.",
	"@@Distance-Accumulation_distancemethod_tag0@@": "Meghatározza, hogy a távolság számítása síkbeli (lapos föld) vagy geodéziai (ellipszoid) módszerrel történjen.",
	"@@Distance-Accumulation_distancemethod_tag1@@": "Síkbeli--a síkbeli mérések 2D euklideszi geometriát használnak a hossz és a terület kiszámítására. Ez a beállítás csak vetületi koordináta-rendszerben történő mérés esetén elérhető, és a mérések alapját a koordináta-rendszer 2D síkja fogja képezni.",
	"@@Distance-Accumulation_distancemethod_tag2@@": "Geodéziai--a legrövidebb szakasz két pont között a föld felszínén egy szferoidon (ellipszoid). Az eredmények nem változnak, függetlenül a bemeneti vagy kimeneti vetülettől.",
	"@@Distance-Accumulation_distancemethod_tag3@@": "<strong>Megjegyzés:</strong> A geodéziai vonallal határozhatja meg például a legrövidebb távolságot két város között egy repülőgép útvonala esetén. Ez orthodromaként is ismert, ha az alapja gömb, nem pedig ellipszoid.",
	"@@Distance-Accumulation_generatebackdirectionbandasadditionalbandinoutput_tag0@@": "Azt határozza meg, hogy csak a távolságakkumulációs raszter jöjjön létre, vagy a távolságakkumulációs rasztert a visszirányrasztert is tartalmazó, többsávos raszter jöjjön létre.",
	"@@Distance-Accumulation_generatebackdirectionbandasadditionalbandinoutput_tag1@@": "Nincs bejelölve--Az eredmény a távolságakkumulációs raszter. Ez egy egyetlen hullámhossztartományt tartalmazó eredmény. Ez az alapértelmezés.",
	"@@Distance-Accumulation_generatebackdirectionbandasadditionalbandinoutput_tag2@@": "Bejelölve--Többsávos eredmény jön létre. Az első hullámhossz-tartomány a távolságakkumulációs raszter, a második pedig a visszirányraszter.",
	"@@Distance-Accumulation_generatebackdirectionbandasadditionalbandinoutput_tag3@@": "A visszirányraszter mindegyik cellára kiszámítja a szomszédos celláig az irányt legrövidebb útvonal mentén, vissza a legközelebbi forrásig, elkerülve az akadályokat.",
	"@@Distance-Accumulation_horizontalfactor_tag0@@": "<p>A vízszintes költségtényező és a vízszintes relatív mozgási szög (HRMA) közötti kapcsolatot határozza meg.</p><p>Számos olyan, módosítóval rendelkező tényező van, amely meghatározott függőlegestényező-grafikont határoz meg. Ezenkívül egyéni grafikon is létrehozható egy tábla segítségével. A grafikonok szerepe a szomszédos cellába mozgás teljes költségének kiszámításához használt függőleges tényező azonosítása.</p><p>Az alábbi magyarázatokban két betűszót használunk: HF és HRMA. A HF jelentése vízszintes tényező (horizontal factor), amely a két cella közötti mozgás vízszintes nehézségét határozza meg. A HRMA jelentése vízszintes relatív mozgási szög (horizontal relative moving angle), amely a cellától vett vízszintes irány és a mozgás iránya által bezárt szöget jelenti.</p><p>A <strong>vízszintes tényező</strong> típusai a következők:</p><ul><li><strong>Bináris</strong>: azt jelzi, hogy ha a HRMA kisebb, mint a levágási szög, a HF a nulltényezőhöz társított értékre lesz állítva; ellenkező esetben végtelenre.</li><li><strong>Előre</strong>: Csak az előrefelé mozgás megengedett. A HRMA értékének legalább 0 foknak és 90 foknál kisebbnek kell lennie (0 &lt;= HRMA &lt; 90). Ha a HRMA nagyobb, mint 0 és kisebb, mint 45 fok, a cella HF tényezője a nulltényezőhöz társított értékre lesz állítva. Ha a HRMA nagyobb vagy egyenlő, mint 45 fok, a függvény az oldalérték módosító értéket használja. 90 fokkal egyenlő vagy annál nagyobb HRMA érték esetén a HF végtelenre lesz állítva.</li><li><strong>Lineáris</strong>: azt jelenti, hogy a HF a HRMA lineáris függvénye.</li><li><strong>Inverz lineáris</strong>: azt jelenti, hogy a HF a HRMA inverz lineáris függvénye.</li><li><strong>Táblázat</strong>: azt jelenti, hogy a HF-ek megadásához használt vízszintestényező-grafikon meghatározásához táblázatfájlt használ.</li></ul><p>A vízszintes tényezők a következő módosítókkal rendelkeznek:</p><ul><li><strong>Nulltényező</strong>: azt a vízszintes tényezőt adja meg, amelyet akkor kell használni, amikor a HRMA nulla. Ez a tényező az y tengelymetszet helyzetét határozza meg a vízszintestényező-függvények esetén.</li><li><strong>Levágási szög</strong>: -a HRMA azon szögét határozza meg, amelyen túl a HF végtelenre lesz állítva.</li><li><strong>Lejtés</strong>: annak az egyenes vonalnak a lejtését határozza meg, amelyet a<strong>Lineáris</strong>és az<strong>inverz lineáris</strong> vízszintestényező-kulcsszavakkal használ. A lejtés az adott távolságon mért emelkedés és a távolság hányadosaként van megadva (például a 45 százalékos lejtés 1/45, amely a 0,02222 értékkel adható meg).</li><li><strong>Oldalérték</strong>: a HF-et adja meg, amikor a HRMA nagyobb vagy egyenlő, mint 45 fok és kisebb, mint 90 fok, ha az<strong>Előre</strong>vízszintestényező-kulcsszó van megadva.</li><li><strong>Táblázatnév</strong>: a HF megadására használt táblázat neve.</li></ul>",
	"@@Distance-Accumulation_horizontalraster_tag0@@": "Az egyes cellákban a vízszintes irányt meghatározó raszter.",
	"@@Distance-Accumulation_horizontalraster_tag1@@": "A raszteren lévő értékeknek 0 és 360 között lévő egész számoknak kell lenniük, ahol a 0 jelenti az északot vagy a képernyő tetejét, és az értékek az óra járásával megegyező irányban nőnek. A lapos területek értéke −1. Az egyes helyeken található értékek a <strong>Vízszintes tényező</strong> paraméterrel együtt lesznek használva az egyik cellából egy szomszédos cellába történő mozgás során felmerülő vízszintes költség megállapításához.",
	"@@Distance-Accumulation_initialaccumulation_tag0@@": "A kiinduló kumulatív költség, ahonnan kezdeni kell a költségszámítást. Ez a paraméter lehetővé teszi a forráshoz kapcsolódó fix költség megadását. A költségszámítási algoritmus ekkor nem 0-tól, hanem a megadott értéktől kezdi a számítást.",
	"@@Distance-Accumulation_initialaccumulation_tag1@@": "Numerikus (double) érték vagy a <strong>Forrásraszter</strong> valamelyik mezője is használható e paraméter esetében.",
	"@@Distance-Accumulation_initialaccumulation_tag2@@": "Az érték nem lehet kisebb nullánál. Az alapértelmezett érték 0.",
	"@@Distance-Accumulation_maximumaccumulation_tag0@@": "Az utazó maximális kumulatív költségét határozza meg egy forrásnál. A költségszámítás minden egyes forrásnál addig folytatódik, amíg el nem éri a meghatározott kapacitást.",
	"@@Distance-Accumulation_maximumaccumulation_tag1@@": "Numerikus (double) érték vagy a <strong>Forrásraszter</strong> valamelyik mezője is használható e paraméter esetében.",
	"@@Distance-Accumulation_maximumaccumulation_tag2@@": "Az értéknek nagyobbnak kell lennie nullánál. Az alapértelmezett kapacitás a kimeneti raszter élénél van.",
	"@@Distance-Accumulation_multipliertoapplytocosts_tag0@@": "A költségértékekre alkalmazandó szorzótényező.",
	"@@Distance-Accumulation_multipliertoapplytocosts_tag1@@": "Ez a paraméter lehetővé teszi az utazás módjának vagy a nagyságnak a szabályozását egy forrásnál. Minél nagyobb a szorzó, annál nagyobb az egyes cellákon való áthaladás költsége.",
	"@@Distance-Accumulation_multipliertoapplytocosts_tag2@@": "Numerikus (double) érték vagy a <strong>Forrásraszter</strong> valamelyik mezője is használható e paraméter esetében.",
	"@@Distance-Accumulation_multipliertoapplytocosts_tag3@@": "Az értékeknek nullánál nagyobbaknak kell lenniük. Az alapértelmezett érték 1.",
	"@@Distance-Accumulation_rasterbarriers_tag0@@": "Az akadályokat meghatározó raszter.",
	"@@Distance-Accumulation_rasterbarriers_tag1@@": "Az adathalmaznak NoData értéket kell tartalmaznia, ahol nincs akadály. Az akadályokat érvényes értékek jelölik, a nullát is ideértve.",
	"@@Distance-Accumulation_rasterbarriers_tag2@@": "Az akadályok meghatározhatók integer- vagy lebegőpontos raszterrel.",
	"@@Distance-Accumulation_sourceraster_tag0@@": "A bemeneti forráshelyek.",
	"@@Distance-Accumulation_sourceraster_tag1@@": "Ez a raszteres adathalmaz azokat a cellákat vagy helyeket határozza meg, amelyekből az eszköz kiszámítja a legkisebb kumulatív költségtávolságot az egyes kimeneti cellahelyekhez.",
	"@@Distance-Accumulation_sourceraster_tag2@@": "Lehet integer vagy lebegőpontos típusú.",
	"@@Distance-Accumulation_surfaceraster_tag0@@": "Az egyes cellahelyeken a magasságértékeket meghatározó raszter.",
	"@@Distance-Accumulation_surfaceraster_tag1@@": "Az értékek a cellák közötti mozgások során ténylegesen megtett felszíni távolság kiszámításához lesznek felhasználva.",
	"@@Distance-Accumulation_traveldirection_tag0@@": "Az utazó irányát határozza meg a függőleges tényező, a vízszintes tényező és a forrás rezisztenciaráta alkalmazásakor.",
	"@@Distance-Accumulation_traveldirection_tag1@@": "<strong>Forrástól</strong>--A függőleges tényezőt, a vízszintes tényezőt és a forrás rezisztenciarátát a bemeneti forrástól indulva és a nem forráscellák felé haladva alkalmazza. Ez az alapértelmezés.",
	"@@Distance-Accumulation_traveldirection_tag2@@": "<strong>Forráshoz</strong>--A függőleges tényezőt, a vízszintes tényezőt és a forrás rezisztenciarátát az egyes nem forráscelláktól indulva és a bemeneti forrás felé haladva alkalmazza.",
	"@@Distance-Accumulation_traveldirection_tag3@@": "Adja meg vagy a <strong>Forrástól</strong> vagy pedig a <strong>Forráshoz</strong> kulcsszavát, amelyeket a rendszer valamennyi forrásra alkalmazni fog, vagy pedig adjon meg olyan mezőt a <strong>Forrástaszter</strong> beállításban, amely az egyes forrásokhoz tartozó utazási irányokat jelölő kulcsszavakat tartalmazza. A mezőnek tartalmaznia kell a következő karakterláncok egyikét: ${FROM_SOURCE} vagy ${TO_SOURCE}.",
	"@@Distance-Accumulation_verticalfactor_tag0@@": "<p>A függőleges költségtényező és a függőleges relatív mozgási szög (VRMA) közötti kapcsolatot határozza meg.</p><p>Számos olyan módosítóval rendelkező tényező van, amely meghatározott függőlegestényező-grafikont azonosít. Ezenkívül egyéni grafikon is létrehozható egy tábla segítségével. A grafikonok szerepe a szomszédos cellába mozgás teljes költségének kiszámításához használt függőleges tényező azonosítása.</p><p>Az alábbi magyarázatokban két betűszót használunk: VF és VRMA. A VF jelentése függőleges tényező (vertical factor), amely a két cella közötti mozgás függőleges nehézségét határozza meg. A VRMA jelentése függőleges relatív mozgási szög (vertical relative moving angle), amely a KIINDULÓ vagy feldolgozó cella és a CÉL cella közötti lejtőszöget jelenti..</p><p>A <strong>vertikális tényező</strong>típusai a következők:</p><ul><li><strong>Bináris</strong>: azt jelzi, hogy ha a VRMA nagyobb, mint az alsó levágási szög, és kisebb, mint a felső levágási szög, a VF a nulltényezőhöz társított értékre lesz állítva; ellenkező esetben végtelenre.</li><li><strong>Lineáris</strong>: azt jelzi, hogy a VF a VRMA lineáris függvénye.</li><li><strong>Szimmetrikus lineáris</strong>: azt jelzi, hogy a VF a VRMA lineáris függvénye a VRMA negatív vagy pozitív oldalán, és a két lineáris függvény a VF (y) tengelyre nézve szimmetrikus.</li><li><strong>Inverz lineáris</strong>: azt jelzi, hogy a VF a VRMA inverz lineáris függvénye.</li><li><strong>Szimmetrikus inverz lineáris</strong>: azt jelzi, hogy a VF a VRMA inverz lineáris függvénye a VRMA negatív vagy pozitív oldalán, és a két lineáris függvény a VF (y) tengelyre nézve szimmetrikus.</li><li><strong>Cos</strong>--azt jelzi, hogy a VF a VRMA koszinuszalapú függvénye.</li><li><strong>Sec</strong>: azt jelzi, hogy a VF a VRMA szekánsalapú függvénye.</li><li><strong>Cos-Sec</strong>: azt jelzi, hogy a VF a VRMA szekánsalapú függvénye, amikor a VRMA negatív, és a VRMA koszinuszalapú függvénye, amikor a VRMA nem negatív.</li><li><strong>Sec-Cos</strong>--azt jelzi, hogy a VF a VRMA szekánsalapú függvénye, amikor a VRMA negatív, és a VRMA koszinuszalapú függvénye, amikor a VRMA nem negatív.</li><li><strong>Tablázat</strong>: azt jelenti, hogy a VF-ek megadásához használt függőlegestényező-grafikon meghatározásához táblázatfájlt használ.</li></ul><p>A függőleges kulcsszavak a következő módosítókkal rendelkeznek:</p><ul><li><strong>Nulltényező</strong>: azt a függőleges tényezőt adja meg, amelyet akkor kell használni, amikor a VRMA nulla. Ez a tényező a megadott függvény y tengelymetszetének helyzetét határozza meg. Definíció szerint a nulltényező nem alkalmazható a trigonometrikus függőleges függvényekre (COS, SEC, COS-SEC vagy SEC-COS). Az y tengelymetszetet ezek a függvények határozzák meg.</li><li><strong>Alsó levágási szög</strong>: a VRMA azon szögét határozza meg, amely alatt a VF végtelenre lesz állítva.</li><li><strong>Felső levágási szög</strong>: a VRMA azon szögét határozza meg, amely felett a VF végtelenre lesz állítva.</li><li><strong>Lejtés</strong>: annak az egyenes vonalnak a lejtését határozza meg, amelyet a<strong>Lineáris</strong>és az<strong>Inverz lineáris</strong>függőlegestényező-kulcsszavakkal használ. A lejtés az adott távolságon mért emelkedés és a távolság hányadosaként van megadva (például a 45 százalékos lejtés 1/45, amely a 0,02222 értékkel adható meg).</li><li><strong>Tablázatnév</strong>: a VF megadására használt táblázat neve.</li></ul>",
	"@@Distance-Accumulation_verticalraster_tag0@@": "A függőleges költségtényező és a függőleges relatív mozgási szög (VRMA) közötti kapcsolatot határozza meg.",
	"@@Distance-Accumulation_verticalraster_tag1@@": "A függvény az értékeket az egyik cellából egy másikba történő mozgás során felmerült függőleges tényező azonosítására használt lejtés kiszámításához használja.",
	"@@Distance-Allocation_costraster_tag0@@": "Az egyes cellákon történő, síkrajzi értelemben vett áthaladás költségét vagy impedanciáját meghatározó raszter. Az egyes cellahelyeken szereplő értékek az azon történő áthaladás egységnyi távolságra eső költségét jelentik. Az eszköz a cellán történő áthaladás teljes költségének kiszámításához megszorozza az egyes cellahelyek értékét a cellafelbontással, és átlós mozgás esetén kompenzálja is az értéket.",
	"@@Distance-Allocation_costraster_tag1@@": "A <strong>Költségraszter</strong> értékei lehetnek integer- vagy lebegőpontos értékek, de nem lehetnek negatívak vagy nullák.",
	"@@Distance-Allocation_distancemethod_tag0@@": "Meghatározza, hogy a távolság számítása síkbeli (lapos föld) vagy geodéziai (ellipszoid) módszerrel történjen.",
	"@@Distance-Allocation_distancemethod_tag1@@": "Síkbeli--a síkbeli mérések 2D euklideszi geometriát használnak a hossz és a terület kiszámítására. Ez a beállítás csak vetületi koordináta-rendszerben történő mérés esetén elérhető, és a mérések alapját a koordináta-rendszer 2D síkja fogja képezni.",
	"@@Distance-Allocation_distancemethod_tag2@@": "Geodéziai--a legrövidebb szakasz két pont között a föld felszínén egy szferoidon (ellipszoid). Az eredmények nem változnak, függetlenül a bemeneti vagy kimeneti vetülettől.",
	"@@Distance-Allocation_distancemethod_tag3@@": "<strong>Megjegyzés:</strong> A geodéziai vonallal határozhatja meg például a legrövidebb távolságot két város között egy repülőgép útvonala esetén. Ez orthodromaként is ismert, ha az alapja gömb, nem pedig ellipszoid.",
	"@@Distance-Allocation_horizontalfactor_tag0@@": "<p>A vízszintes költségtényező és a vízszintes relatív mozgási szög (HRMA) közötti kapcsolatot határozza meg.</p><p>Számos olyan, módosítóval rendelkező tényező van, amely meghatározott függőlegestényező-grafikont határoz meg. Ezenkívül egyéni grafikon is létrehozható egy tábla segítségével. A grafikonok szerepe a szomszédos cellába mozgás teljes költségének kiszámításához használt függőleges tényező azonosítása.</p><p>Az alábbi magyarázatokban két betűszót használunk: HF és HRMA. A HF jelentése vízszintes tényező (horizontal factor), amely a két cella közötti mozgás vízszintes nehézségét határozza meg. A HRMA jelentése vízszintes relatív mozgási szög (horizontal relative moving angle), amely a cellától vett vízszintes irány és a mozgás iránya által bezárt szöget jelenti.</p><p>A <strong>vízszintes tényező</strong> típusai a következők:</p><ul><li><strong>Bináris</strong>: azt jelzi, hogy ha a HRMA kisebb, mint a levágási szög, a HF a nulltényezőhöz társított értékre lesz állítva; ellenkező esetben végtelenre.</li><li><strong>Előre</strong>: Csak az előrefelé mozgás megengedett. A HRMA értékének legalább 0 foknak és 90 foknál kisebbnek kell lennie (0 &lt;= HRMA &lt; 90). Ha a HRMA nagyobb, mint 0 és kisebb, mint 45 fok, a cella HF tényezője a nulltényezőhöz társított értékre lesz állítva. Ha a HRMA nagyobb vagy egyenlő, mint 45 fok, a függvény az oldalérték módosító értéket használja. 90 fokkal egyenlő vagy annál nagyobb HRMA érték esetén a HF végtelenre lesz állítva.</li><li><strong>Lineáris</strong>: azt jelenti, hogy a HF a HRMA lineáris függvénye.</li><li><strong>Inverz lineáris</strong>: azt jelenti, hogy a HF a HRMA inverz lineáris függvénye.</li><li><strong>Táblázat</strong>: azt jelenti, hogy a HF-ek megadásához használt vízszintestényező-grafikon meghatározásához táblázatfájlt használ.</li></ul><p>A vízszintes tényezők a következő módosítókkal rendelkeznek:</p><ul><li><strong>Nulltényező</strong>: azt a vízszintes tényezőt adja meg, amelyet akkor kell használni, amikor a HRMA nulla. Ez a tényező az y tengelymetszet helyzetét határozza meg a vízszintestényező-függvények esetén.</li><li><strong>Levágási szög</strong>: -a HRMA azon szögét határozza meg, amelyen túl a HF végtelenre lesz állítva.</li><li><strong>Lejtés</strong>: annak az egyenes vonalnak a lejtését határozza meg, amelyet a<strong>Lineáris</strong>és az<strong>inverz lineáris</strong> vízszintestényező-kulcsszavakkal használ. A lejtés az adott távolságon mért emelkedés és a távolság hányadosaként van megadva (például a 45 százalékos lejtés 1/45, amely a 0,02222 értékkel adható meg).</li><li><strong>Oldalérték</strong>: a HF-et adja meg, amikor a HRMA nagyobb vagy egyenlő, mint 45 fok és kisebb, mint 90 fok, ha az<strong>Előre</strong>vízszintestényező-kulcsszó van megadva.</li><li><strong>Táblázatnév</strong>: a HF megadására használt táblázat neve.</li></ul>",
	"@@Distance-Allocation_horizontalraster_tag0@@": "Az egyes cellákban a vízszintes irányt meghatározó raszter.",
	"@@Distance-Allocation_horizontalraster_tag1@@": "A raszteren lévő értékeknek 0 és 360 között lévő egész számoknak kell lenniük, ahol a 0 jelenti az északot vagy a képernyő tetejét, és az értékek az óra járásával megegyező irányban nőnek. A lapos területek értéke −1. Az egyes helyeken található értékek a <strong>Vízszintes tényező</strong> paraméterrel együtt lesznek használva az egyik cellából egy szomszédos cellába történő mozgás során felmerülő vízszintes költség megállapításához.",
	"@@Distance-Allocation_initialaccumulation_tag0@@": "A kiinduló kumulatív költség, ahonnan kezdeni kell a költségszámítást. Ez a paraméter lehetővé teszi a forráshoz kapcsolódó fix költség megadását. A költségszámítási algoritmus ekkor nem 0-tól, hanem a megadott értéktől kezdi a számítást.",
	"@@Distance-Allocation_initialaccumulation_tag1@@": "Numerikus (double) érték vagy a <strong>Forrásraszter</strong> valamelyik mezője is használható e paraméter esetében.",
	"@@Distance-Allocation_initialaccumulation_tag2@@": "Az érték nem lehet kisebb nullánál. Az alapértelmezett érték 0.",
	"@@Distance-Allocation_maximumaccumulation_tag0@@": "Az utazó maximális kumulatív költségét határozza meg egy forrásnál. A költségszámítás minden egyes forrásnál addig folytatódik, amíg el nem éri a meghatározott kapacitást.",
	"@@Distance-Allocation_maximumaccumulation_tag1@@": "Numerikus (double) érték vagy a <strong>Forrásraszter</strong> valamelyik mezője is használható e paraméter esetében.",
	"@@Distance-Allocation_maximumaccumulation_tag2@@": "Az értéknek nagyobbnak kell lennie nullánál. Az alapértelmezett kapacitás a kimeneti raszter élénél van.",
	"@@Distance-Allocation_multipliertoapplytocosts_tag0@@": "A költségértékekre alkalmazandó szorzótényező.",
	"@@Distance-Allocation_multipliertoapplytocosts_tag1@@": "Ez a paraméter lehetővé teszi az utazás módjának vagy a nagyságnak a szabályozását egy forrásnál. Minél nagyobb a szorzó, annál nagyobb az egyes cellákon való áthaladás költsége.",
	"@@Distance-Allocation_multipliertoapplytocosts_tag2@@": "Az értékeknek nullánál nagyobbaknak kell lenniük. Az alapértelmezett érték 1.",
	"@@Distance-Allocation_multipliertoapplytocosts_tag3@@": "Numerikus (double) érték vagy a <strong>Forrásraszter</strong> valamelyik mezője is használható e paraméter esetében.",
	"@@Distance-Allocation_rasterbarriers_tag0@@": "Az akadályokat meghatározó raszter.",
	"@@Distance-Allocation_rasterbarriers_tag1@@": "Az adathalmaznak NoData értéket kell tartalmaznia, ahol nincs akadály. Az akadályokat érvényes értékek jelölik, a nullát is ideértve.",
	"@@Distance-Allocation_rasterbarriers_tag2@@": "Az akadályok meghatározhatók integer- vagy lebegőpontos raszterrel.",
	"@@Distance-Allocation_sourcefield_tag0@@": "Az a mező, amelyet az értékek forráshelyekhez rendeléséhez használunk. Egész számnak kell lennie.",
	"@@Distance-Allocation_sourceraster_tag0@@": "A bemeneti forráshelyek.",
	"@@Distance-Allocation_sourceraster_tag1@@": "Ez a raszteres adathalmaz azokat a cellákat vagy helyeket határozza meg, amelyekből az eszköz kiszámítja a legkisebb kumulatív költségtávolságot az egyes kimeneti cellahelyekhez.",
	"@@Distance-Allocation_sourcerowandcolumnbands_tag0@@": "Meghatározza, hogy csak a kiosztási raszter jöjjön létre, vagy pedig többsávos legyen az eredmény.",
	"@@Distance-Allocation_sourcerowandcolumnbands_tag1@@": "Nincs bejelölve--Az eredmény a távolságkiosztási raszter. Ez egy egyetlen hullámhossztartományt tartalmazó eredmény. Ez az alapértelmezés.",
	"@@Distance-Allocation_sourcerowandcolumnbands_tag2@@": "Bejelölve--Többsávos raszter jön létre. Az első sáv a távolságkiosztási raszter, a második sáv tartalmazza a sorindexet, a harmadik pedig az oszlopindexet. Ezek az indexek azonosítják annak a forráscellának a helyét, amely a legkisebb kumulált költségtávolságnyira van.",
	"@@Distance-Allocation_surfaceraster_tag0@@": "Az egyes cellahelyeken a magasságértékeket meghatározó raszter.",
	"@@Distance-Allocation_surfaceraster_tag1@@": "Az értékek a cellák közötti mozgások során ténylegesen megtett felszíni távolság kiszámításához lesznek felhasználva.",
	"@@Distance-Allocation_traveldirection_tag0@@": "Az utazó irányát határozza meg a függőleges tényező, a vízszintes tényező és a forrás rezisztenciaráta alkalmazásakor.",
	"@@Distance-Allocation_traveldirection_tag1@@": "<strong>Forrástól</strong>--A függőleges tényezőt, a vízszintes tényezőt és a forrás rezisztenciarátát a bemeneti forrástól indulva és a nem forráscellák felé haladva alkalmazza. Ez az alapértelmezés.",
	"@@Distance-Allocation_traveldirection_tag2@@": "<strong>Forráshoz</strong>--A függőleges tényezőt, a vízszintes tényezőt és a forrás rezisztenciarátát az egyes nem forráscelláktól indulva és a bemeneti forrás felé haladva alkalmazza.",
	"@@Distance-Allocation_traveldirection_tag3@@": "Adja meg vagy a <strong>Forrástól</strong> vagy pedig a <strong>Forráshoz</strong> kulcsszavát, amelyeket a rendszer valamennyi forrásra alkalmazni fog, vagy pedig adjon meg olyan mezőt a <strong>Forrástaszter</strong> beállításban, amely az egyes forrásokhoz tartozó utazási irányokat jelölő kulcsszavakat tartalmazza. A mezőnek tartalmaznia kell a következő karakterláncok egyikét: ${FROM_SOURCE} vagy ${TO_SOURCE}.",
	"@@Distance-Allocation_verticalfactor_tag0@@": "<p>A függőleges költségtényező és a függőleges relatív mozgási szög (VRMA) közötti kapcsolatot határozza meg.</p><p>Számos olyan módosítóval rendelkező tényező van, amely meghatározott függőlegestényező-grafikont azonosít. Ezenkívül egyéni grafikon is létrehozható egy tábla segítségével. A grafikonok szerepe a szomszédos cellába mozgás teljes költségének kiszámításához használt függőleges tényező azonosítása.</p><p>Az alábbi magyarázatokban két betűszót használunk: VF és VRMA. A VF jelentése függőleges tényező (vertical factor), amely a két cella közötti mozgás függőleges nehézségét határozza meg. A VRMA jelentése függőleges relatív mozgási szög (vertical relative moving angle), amely a KIINDULÓ vagy feldolgozó cella és a CÉL cella közötti lejtőszöget jelenti..</p><p>A <strong>vertikális tényező</strong>típusai a következők:</p><ul><li><strong>Bináris</strong>: azt jelzi, hogy ha a VRMA nagyobb, mint az alsó levágási szög, és kisebb, mint a felső levágási szög, a VF a nulltényezőhöz társított értékre lesz állítva; ellenkező esetben végtelenre.</li><li><strong>Lineáris</strong>: azt jelzi, hogy a VF a VRMA lineáris függvénye.</li><li><strong>Szimmetrikus lineáris</strong>: azt jelzi, hogy a VF a VRMA lineáris függvénye a VRMA negatív vagy pozitív oldalán, és a két lineáris függvény a VF (y) tengelyre nézve szimmetrikus.</li><li><strong>Inverz lineáris</strong>: azt jelzi, hogy a VF a VRMA inverz lineáris függvénye.</li><li><strong>Szimmetrikus inverz lineáris</strong>: azt jelzi, hogy a VF a VRMA inverz lineáris függvénye a VRMA negatív vagy pozitív oldalán, és a két lineáris függvény a VF (y) tengelyre nézve szimmetrikus.</li><li><strong>Cos</strong>--azt jelzi, hogy a VF a VRMA koszinuszalapú függvénye.</li><li><strong>Sec</strong>: azt jelzi, hogy a VF a VRMA szekánsalapú függvénye.</li><li><strong>Cos-Sec</strong>: azt jelzi, hogy a VF a VRMA szekánsalapú függvénye, amikor a VRMA negatív, és a VRMA koszinuszalapú függvénye, amikor a VRMA nem negatív.</li><li><strong>Sec-Cos</strong>--azt jelzi, hogy a VF a VRMA szekánsalapú függvénye, amikor a VRMA negatív, és a VRMA koszinuszalapú függvénye, amikor a VRMA nem negatív.</li><li><strong>Tablázat</strong>: azt jelenti, hogy a VF-ek megadásához használt függőlegestényező-grafikon meghatározásához táblázatfájlt használ.</li></ul><p>A függőleges kulcsszavak a következő módosítókkal rendelkeznek:</p><ul><li><strong>Nulltényező</strong>: azt a függőleges tényezőt adja meg, amelyet akkor kell használni, amikor a VRMA nulla. Ez a tényező a megadott függvény y tengelymetszetének helyzetét határozza meg. Definíció szerint a nulltényező nem alkalmazható a trigonometrikus függőleges függvényekre (COS, SEC, COS-SEC vagy SEC-COS). Az y tengelymetszetet ezek a függvények határozzák meg.</li><li><strong>Alsó levágási szög</strong>: a VRMA azon szögét határozza meg, amely alatt a VF végtelenre lesz állítva.</li><li><strong>Felső levágási szög</strong>: a VRMA azon szögét határozza meg, amely felett a VF végtelenre lesz állítva.</li><li><strong>Lejtés</strong>: annak az egyenes vonalnak a lejtését határozza meg, amelyet a<strong>Lineáris</strong>és az<strong>Inverz lineáris</strong>függőlegestényező-kulcsszavakkal használ. A lejtés az adott távolságon mért emelkedés és a távolság hányadosaként van megadva (például a 45 százalékos lejtés 1/45, amely a 0,02222 értékkel adható meg).</li><li><strong>Tablázatnév</strong>: a VF megadására használt táblázat neve.</li></ul>",
	"@@Distance-Allocation_verticalraster_tag0@@": "A függőleges költségtényező és a függőleges relatív mozgási szög (VRMA) közötti kapcsolatot határozza meg.",
	"@@Distance-Allocation_verticalraster_tag1@@": "A függvény az értékeket az egyik cellából egy másikba történő mozgás során felmerült függőleges tényező azonosítására használt lejtés kiszámításához használja.",
	"@@Euclidean-Back-Direction_cellsize_tag0@@": "A cellaméret, amelyen a kimeneti raszter létrejön.",
	"@@Euclidean-Back-Direction_cellsize_tag1@@": "Ha a cellaméretet kifejezetten megadta a <strong>Környezetek</strong> beállításban, akkor az lesz az alapértelmezett cellaméret. Ha nincs beállítva, a kimeneti cellaméret ugyanaz lesz, mint a <strong>Forrásraszter</strong>.",
	"@@Euclidean-Back-Direction_distancemethod_tag0@@": "Meghatározza, hogy a távolság számítása síkbeli (lapos föld) vagy geodéziai (ellipszoid) módszerrel történjen.",
	"@@Euclidean-Back-Direction_distancemethod_tag1@@": "Síkbeli--a síkbeli mérések 2D euklideszi geometriát használnak a hossz és a terület kiszámítására. Ez a beállítás csak vetületi koordináta-rendszerben történő mérés esetén elérhető, és a mérések alapját a koordináta-rendszer 2D síkja fogja képezni.",
	"@@Euclidean-Back-Direction_distancemethod_tag2@@": "Geodéziai--a legrövidebb szakasz két pont között a föld felszínén egy szferoidon (ellipszoid). Az eredmények nem változnak, függetlenül a bemeneti vagy kimeneti vetülettől.",
	"@@Euclidean-Back-Direction_distancemethod_tag3@@": "<strong>Megjegyzés:</strong> A geodéziai vonallal határozhatja meg például a legrövidebb távolságot két város között egy repülőgép útvonala esetén. Ez orthodromaként is ismert, ha az alapja gömb, nem pedig ellipszoid.",
	"@@Euclidean-Back-Direction_maximumdistance_tag0@@": "Azt a küszöbtávolságot határozza meg, amelyen belül a legközelebbi forrás iránya ki lesz számítva. Ha a legközelebbi forrástól mért távolság ennél nagyobb, akkor annak a cellának a kimenete NoData lesz.",
	"@@Euclidean-Back-Direction_maximumdistance_tag1@@": "Az alapértelmezett távolság a kimeneti raszter kiterjedésénél van.",
	"@@Euclidean-Back-Direction_rasterbarriers_tag0@@": "Az akadályokat meghatározó raszter.",
	"@@Euclidean-Back-Direction_rasterbarriers_tag1@@": "Az adathalmaznak NoData értéket kell tartalmaznia, ahol nincs akadály. Az akadályokat érvényes értékek jelölik, a nullát is ideértve.",
	"@@Euclidean-Back-Direction_rasterbarriers_tag2@@": "Az akadályok meghatározhatók integer- vagy lebegőpontos raszterrel.",
	"@@Euclidean-Back-Direction_sourceraster_tag0@@": "Azokat a cellákat vagy helyeket meghatározó raszteres adathalmaz, amelyekhez az euklideszi irány ki van számítva mindegyik kimeneti cellahelynél.",
	"@@Euclidean-Back-Direction_sourceraster_tag1@@": "A bemenet típusa lehet egész szám vagy lebegőpontos érték.",
	"@@Cost-Path_costbacklinkraster_tag0@@": "a forráshoz a legolcsóbb útvonalon keresztül való visszajutáshoz használandó útvonal meghatározásához használt költség-visszahivatkozási raszteres réteg neve.",
	"@@Cost-Path_costbacklinkraster_tag1@@": "A visszahivatkozási raszter mindegyik cellája esetén egy érték azonosítja azt a szomszédot, amelyik a következő cella a legkisebb kumulatív költségútvonalon a cellától egyetlen forráscella vagy forráscellák egy halmaza felé.",
	"@@Cost-Path_costdistanceraster_tag0@@": "A célállomáshelyek és egy forrás közötti legolcsóbb útvonal meghatározásához használt költségtávolság-raszter neve.",
	"@@Cost-Path_costdistanceraster_tag1@@": "A költségtávolság-raszter létrehozása általában a Költségtávolság, a Költségallokáció vagy a Költség-visszahivatkozás funkcióval történik. A költségtávolság raszteres réteg tárolja mindegyik cella esetén a legkisebb kumulatív költségtávolságot egy adott költségfelszínen az egyes cellák és forráscellák egy halmaza között.",
	"@@Cost-Path_destinationfield_tag0@@": "A célhelyszínek értékeinek beolvasásához használt mező. A bemeneti vektoroselem-adatok között legalább egy érvényes mezőnek lennie kell.",
	"@@Cost-Path_destinationraster_tag0@@": "Az azokat a cellákat azonosító raszteres adathalmaz réteg, amelyekből meghatározásra kerül a legkevésbé költséges útvonal a legkisebb költséggel járó forrásig.",
	"@@Cost-Path_destinationraster_tag1@@": "A bemeneti raszteres réteg érvényes értékekkel rendelkező cellákból áll (a nulla érvényes érték), míg a többi cellához a NoData értéket kell rendelni.",
	"@@Cost-Path_forceflowdirectionconventionforbacklinkraster_tag0@@": "Arra kényszeríti a függvényt, hogy a bemeneti visszahivatkozási rasztert áramlásiirány-raszterként kezelje. Az áramlásiirány-raszterek esetében az integer értéke 0–255 lehet.",
	"@@Cost-Path_forceflowdirectionconventionforbacklinkraster_tag1@@": "Nincs bejelölve--Ha a megadott visszahivatkozási raszter értékei a 0–8 tartományba eső egész számok, akkor az adathalmazt a rendszer költség-visszahivatkozási raszterként kezeli. Ha az értékek a 0–255 tartományból származnak, a bemenetet a rendszer áramlásiirány-raszterként kezeli. Ha az értékek a 0–360 tartományból származnak, és lebegőpontos értékek, a bemenetet a rendszer visszairányítási raszterként kezeli.",
	"@@Cost-Path_forceflowdirectionconventionforbacklinkraster_tag2@@": "Bejelölve--A visszahivatkozási raszterhez biztosított rasztert a rendszer áramlásiirány-raszterként kezeli. Az áramlásiirány-raszter e beállítása olyan esetben használható, amikor a maximális érték a 8.",
	"@@Cost-Path_pathtype_tag0@@": "Kulcsszó, amely meghatározza a bemeneti célállomásadatok között szereplő értékek és zónák értelmezésének módját a költségútvonal számításakor. A következő beállítások lehetségesek:",
	"@@Cost-Path_pathtype_tag1@@": "<strong>Minden cella</strong>--A bemeneti célállomásadatok között szereplő, érvényes értékekkel rendelkező összes cella esetén meghatározza a legolcsóbb útvonalat, és menti a kimeneti raszterre. Ezt a lehetőséget választva a bemeneti célállomásadatok között szereplő cellák mindegyikét külön kezeli, és mindegyik cellához meghatározza a legolcsóbb útvonalat.",
	"@@Cost-Path_pathtype_tag2@@": "<strong>Minden zóna</strong>--A bemeneti célállomásadatok között szereplő összes zóna esetén meghatározza a legolcsóbb útvonalat, és menti a kimeneti raszterre. Ezt a lehetőséget választva az egyes zónák legolcsóbb útvonala a zónában a legkisebb költségtávolság-súlyozással rendelkező cellánál kezdődik.",
	"@@Cost-Path_pathtype_tag3@@": "<strong>Legjobb egyedülálló</strong>--A bemeneti célállomásadatok között szereplő összes cella esetén a legolcsóbb útvonalat a forráscellákba tartó legolcsóbb útvonalak minimumával rendelkező cellából származtatja.",
	"@@Cell-Statistics_cellsizetype_tag0@@": "Válassza ki, hogy melyik cellaméretet szeretné használni a kimeneti raszterben. Ha mindegyik bemeneti cellaméret azonos, mindegyik lehetőség ugyanarra az eredményre vezet.",
	"@@Cell-Statistics_cellsizetype_tag1@@": "Első--a bemeneti raszterek első cellaméretének használata.",
	"@@Cell-Statistics_cellsizetype_tag2@@": "Minimum--az összes bemeneti raszter legkisebb cellaméretének használata.",
	"@@Cell-Statistics_cellsizetype_tag3@@": "Maximum--az összes bemeneti raszter legnagyobb cellaméretének használata. Ez az alapértelmezés.",
	"@@Cell-Statistics_cellsizetype_tag4@@": "Átlag--az összes bemeneti raszter átlagos cellaméretének használata.",
	"@@Cell-Statistics_cellsizetype_tag5@@": "Utolsó--a bemeneti raszterek utolsó cellaméretének használata.",
	"@@Cell-Statistics_extenttype_tag0@@": "Válassza ki, hogy melyik kiterjedést szeretné használni a kimeneti raszterben:",
	"@@Cell-Statistics_extenttype_tag1@@": "Első--az első bemeneti raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Cell-Statistics_extenttype_tag2@@": "Metszet--az átfedésben lévő pixelek kiterjedésének használata a feldolgozási kiterjedés meghatározásához. Ez az alapértelmezés.",
	"@@Cell-Statistics_extenttype_tag3@@": "Unió--az összes raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Cell-Statistics_extenttype_tag4@@": "Utolsó--az utolsó bemeneti raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.",
	"@@Cell-Statistics_processasmultiband_tag0@@": "A bemeneti raszterek sávjai feldolgozásának módját határozza meg.",
	"@@Cell-Statistics_processasmultiband_tag1@@": "Nincs bejelölve--Valamennyi többsávos bemenet feldolgozása önálló sávként történik. Ez az alapértelmezés.",
	"@@Cell-Statistics_processasmultiband_tag2@@": "Bejelölve--Valamennyi többsávos bemenet feldolgozása többsávosként történik.",
	"@@Cell-Statistics_rasters_tag0@@": "Azoknak a rasztereknek a listája, amelyekből a statisztika számítandó, pixelenkénti alapon.",
	"@@Cell-Statistics_percentileinterpolationtype_tag0@@": "<p>Meghatározza, hogy az interpoláció melyik metódusát kell használni, ha a megadott percentilisérték két bemenetivella-érték közé esik.</p><ul><li><strong>Automatikus észlelés</strong>: ha a bemeneti raszterek integer pixel típusúak, a<strong>Legközelebbi</strong>módszert kell használni. Ha a bemeneti raszter lebegőpontos pixeltípusú, akkor a <strong>Lineáris</strong> módszer lesz használva. Ez az alapértelmezés.</li><li><strong>Legközelebbi</strong> - A kívánt percentilishez legközelebb eső elérhető érték lesz használva. Ebben az esetben a kimenet pixeltípusa megegyezik a bemeneti értékraszterével.</li><li><strong>Lineáris</strong>: a kívánt percentilis két szomszédos értékének súlyozott átlaga lesz használva. Ebben az esetben a kimenet pixeltípusa lebegőpontos.</li></ul><p>Ez a beállítás csak akkor áll rendelkezésre, ha a<strong>Művelet</strong>típusparaméter beállítása<strong>Medián</strong>vagy<strong>Percentilis</strong>.</p>",
	"@@Cell-Statistics_percentilevalue_tag0@@": "<p>A kiszámítandó percentilis. Az alapértelmezett érték 90, vagyis a 90. percentilis.</p><p>Az értékek 0 és 100 közé eshetnek. A 0. percentilis lényegében a Minimum statisztikával, míg a 100. percentilis a Maximum statisztikával egyezik meg. Az 50-es érték lényegében ugyanazt az eredményt adja, mint a Medián statisztika.</p><p>Ez a beállítás csak akkor áll rendelkezésre, ha a <strong>Művelet</strong>paraméter beállítása<strong>Percentilis</strong>.</p>",
	"@@Optimal-Path-As-Raster_backdirectionrasterorflowdirectionraster_tag0@@": "A visszirányraszter fokokban tartalmazza a számított irányokat. Az irány azonosítja a következő cellát a legkisebb kumulatív költséggel elérhető forrás felé vezető, akadályokat elkerülő, optimális útvonal mentén.",
	"@@Optimal-Path-As-Raster_backdirectionrasterorflowdirectionraster_tag1@@": "Az értéktartomány 0 foktól 360 fokig terjed, a 0 a forráscellák számára van fenntartva. Egyenesen kelet felé (jobbra) 90, és az értékek az óramutató járásával megegyező irányban emelkednek (180 dél, 270 nyugat, 360 pedig észak).",
	"@@Optimal-Path-As-Raster_destinationfield_tag0@@": "A célhelyszínek értékeinek beolvasásához használt mező.",
	"@@Optimal-Path-As-Raster_destinationraster_tag0@@": "Az azokat a cellákat azonosító raszteresadathalmaz-réteg, amelyekből meghatározásra kerül az optimális útvonal a legkisebb költséggel elérhető forrásig. Ezt a bemenetet kötelező megadni.",
	"@@Optimal-Path-As-Raster_destinationraster_tag1@@": "A bemeneti raszteres réteg érvényes értékekkel rendelkező cellákból áll (a nulla érvényes érték), míg a többi cellához a NoData értéket kell rendelni.",
	"@@Optimal-Path-As-Raster_distanceaccumulationraster_tag0@@": "A távolságakkumuláció-rasztert használja a célállomások és a források közötti optimális útvonal meghatározására. A távolságakkumuláció-rasztert általában a <strong>Távolságakkumuláció</strong> funkcióval hozza létre. A távolságakkumuláció-raszteren lévő cellák a legkisebb kumulatív költségtávolságnak felelnek meg egy felületen az egyes cellák és forráscellák egy halmaza között.",
	"@@Optimal-Path-As-Raster_pathtype_tag0@@": "Megadható egy kulcsszó, amely meghatározza a bemeneti célállomásadatok között szereplő értékek és zónák értelmezésének módját a költségútvonal számításakor.",
	"@@Optimal-Path-As-Raster_pathtype_tag1@@": "<strong>Minden zóna</strong> – a bemeneti célállomásadatok között szereplő összes zóna esetén meghatározza a legolcsóbb útvonalat, és menti a kimeneti raszterre. Ezt a lehetőséget választva az egyes zónák optimális útvonala a zónában a legkisebb költségtávolság-súlyozással rendelkező cellánál kezdődik.",
	"@@Optimal-Path-As-Raster_pathtype_tag2@@": "<strong>Legjobb egyedülálló</strong> – a bemeneti célállomásadatok között szereplő összes cella esetén az optimális útvonalat a forráscellákba tartó legolcsóbb útvonalak minimumával rendelkező cellából származtatja.",
	"@@Optimal-Path-As-Raster_pathtype_tag3@@": "<strong>Minden cella</strong> – a bemeneti célállomásadatok között szereplő, érvényes értékekkel rendelkező összes cella esetén meghatározza az optimális útvonalat. Ezt a lehetőséget választva a bemeneti célállomásadatok között szereplő cellák mindegyikét külön kezeli, és mindegyik cellához meghatározza az optimális útvonalat.",
	"@@CCDC-Analysis_bandsfordetectingchange_tag0@@": "A változásészleléshez használandó sávazonosítók. Ha nincs megadva sávazonosító, a bemeneti raszteres adathalmaz összes sávját használni fogja.",
	"@@CCDC-Analysis_bandsfordetectingchange_tag1@@": "Az azonosító értékeinek szóközökkel elválasztott egész számoknak kell lenniük.",
	"@@CCDC-Analysis_bandsfortemporalmasking_tag0@@": "A zöld hullámhossz-tartomány és az SWIR hullámhossz-tartomány sávazonosítója használható a felhő, felhőárnyék és hó maszkolásához. Ha nincs megadva sávazonosító, nincs maszkolás.",
	"@@CCDC-Analysis_bandsfortemporalmasking_tag1@@": "Az azonosító értékeinek szóközökkel elválasztott egész számoknak kell lenniük.",
	"@@CCDC-Analysis_bandsfortemporalmasking_tag2@@": "Ez a paraméter határozza meg a felhő, felhőárnyék és hó maszkolásához használt sávokat. Mivel a felhőárnyék és a hó nagyon sötét a rövidhullámú infravörös (SWIR) hullámhossz-tartományban, míg a felhő és a hó nagyon világos a zöld hullámhossz-tartományban, az SWIR és zöld hullámhossz-tartomány sávindexeinek maszkolása ajánlott.",
	"@@CCDC-Analysis_chi-squaredthresholdfordetectchange_tag0@@": "A khí-négyzet változási valószínűség küszöbértéke. Ha egy megfigyelés kiszámított változási valószínűsége magasabb, mint a ez a küszöbérték, akkor olyan anomáliaként jelöli meg, amely valószínűleg változási esemény. Az alapértelmezett érték 0,99.",
	"@@CCDC-Analysis_minimumconsecutiveanomalyobservations_tag0@@": "Legalább ennyi egymást követő megfigyelési anomáliának kell előfordulnia ahhoz, hogy egy eseményt változásnak tekintsen. Egy pixelt a megadott számú egymást követő időszeleten anomáliának kell jelölnie ahhoz, hogy valódi változásnak tekintse. Az alapértelmezett érték 6.",
	"@@CCDC-Analysis_raster_tag0@@": "A bemeneti többdimenziós raszteres réteg.",
	"@@CCDC-Analysis_updatingfittingfrequency(inyears)_tag0@@": "Ilyen gyakorisággal kell frissíteni az idősoros modellt új megfigyelésekkel. Az alapértelmezett érték, hogy 1 évente kell frissíteni a modellt.",
	"@@CCDC-Analysis_updatingfittingfrequency(inyears)_tag1@@": "Ez a paraméter határozza meg, hogy milyen gyakran lesz frissítve az idősoros modell új megfigyelésekkel. Egy modell gyakori frissítése számításigényes lehet, és előfordulhat, hogy csak minimális előnyökkel jár. Ha például évente 365 szelet vagy egyértelmű megfigyelés van a többdimenziós raszteren, és a frissítési gyakoriság megfigyelésenkénti, a feldolgozás 365-ször számításigényesebb lesz, mint az évente egyszeri frissítés, de a pontossága nem feltétlenül lesz nagyobb.",
	"@@Trend-To-RGB_modeltype_tag0@@": "Az RGB-re konvertálni kívánt modellinformáció típusa.",
	"@@Trend-To-RGB_modeltype_tag1@@": "Lineáris – lineáris trendinformáció lesz RGB-re konvertálva. Ez az alapértelmezés.",
	"@@Trend-To-RGB_modeltype_tag2@@": "Harmonikus – harmonikus trendinformáció lesz RGB-re konvertálva.",
	"@@Trend-To-RGB_raster_tag0@@": "A bemeneti trendraszter.",
	"@@LandTrendr-Analysis_bestmodelproportion_tag0@@": "<p>A legjobb modell méretaránya. A modellválasztási folyamat során az eszköz kiszámítja a p értéket minden modellnél, és kiválasztja azt a modellt, amelyben a legtöbb csúcspont található, miközben megtartja a legkisebb (legszignifikánsabb) p értéket ezen méretarány alapján. Az 1 érték azt jelenti, hogy a modellnek van a legkisebb p értéke, de lehet, hogy nincs nagy mennyiségű csúcspontja. Az alapértelmezett érték 1,25.</p>",
	"@@LandTrendr-Analysis_maximumnumberofsegments_tag0@@": "<p>A szegmensek maximális száma, amelyeket az idősorhoz kell illeszteni az egyes pixeleknél. Az alapértelmezett érték 5.</p>",
	"@@LandTrendr-Analysis_minimumnumberofobservations_tag0@@": "<p>Az érvényes megfigyelések minimális száma, amely az illesztés végrehajtásához szükséges. A bemeneti többdimenziós adatkészletben található évek számának nagyobbnak kell lennie ennél az értéknél, vagy meg kell egyeznie vele. Az alapértelmezett érték 6.</p>",
	"@@LandTrendr-Analysis_outputotherbands_tag0@@": "<p>Megadja, hogy a többi sáv bele lesz-e foglalva az eredményekbe.</p><ul><li>Bejelölve - A többi sáv bele lesz foglalva az eredményekbe. A <strong>Feldolgozási sáv</strong> paraméterben megadott kezdeti szegmentációs sávban található, a szegmentációra és a csúcspontokra vonatkozó információszintén illesztve lesz a többi sávhoz a többsávos képekben. A modell eredményei először a szegmentációs sávot fogják tartalmazni, majd a többi sávot.</li><li>Nincs bejelölve - A többi sáv nem lesz belefoglalva. Ez az alapértelmezés.</li></ul>",
	"@@LandTrendr-Analysis_preventoneyearrecovery_tag0@@": "<p>Megadja, hogy az egyéves helyreállítást mutató szegmensek ki legyenek-e zárva.</p><ul><li>Bejelölve - Az egyéves helyreállítást mutató szegmensek ki lesznek zárva. Ez az alapértelmezés.</li><li>Nincs bejelölve - Az egyéves helyreállítást mutató szegmensek nem lesznek kizárva.</li></ul>",
	"@@LandTrendr-Analysis_processingband_tag0@@": "<p>A pixelértékpályák időszakra vonatkozó szegmentálásához használandó sáv. Válassza ki azt a sávot, amely a legjobban fogja rögzíteni a megfigyelni kívánt vektoros elem változásait.</p>",
	"@@LandTrendr-Analysis_p-valuethreshold_tag0@@": "<p>A kiválasztandó modell p értékének küszöbértéke. Miután megtörtént a csúcspontok észlelése a modellillesztés kezdeti szakaszában, az eszköz illeszteni fogja mindegyik szegmenst, és kiszámítja a p értéket a modell szignifikanciájának meghatározásához. A következő iteráció alkalmával az eszköz eggyel csökkenti a szegmensek számát a modellben, és ismét kiszámítja a p értéket. A művelet így folytatódik tovább, és ha a p érték kisebb, mint az ebben a paraméterben megadott érték, akkor a modell ki lesz választva, és az eszköz abbahagyja a jobb modellek keresését. Ha nem észlel ilyen modellt, akkor az eszköz a következők szerint választ modellt: Legkisebb p érték <strong>— Legjobb modell méretaránya</strong>. Az alapértelmezett érték 0,01.</p>",
	"@@LandTrendr-Analysis_raster_tag0@@": "<p>A bemeneti Landsat többdimenziós raszterréteg.</p>",
	"@@LandTrendr-Analysis_recoveryhasincreasetrend_tag0@@": "<p>Megadja, hogy a helyreállítás trendje növekvő-e (pozitív).</p><ul><li>Bejelölve - A helyreállításnak növekvő trendje van. Ez az alapértelmezés.</li><li>Nincs bejelölve - A helyreállításnak csökkenő trendje van.</li></ul>",
	"@@LandTrendr-Analysis_recoverythreshold_tag0@@": "<p>A helyreállítás küszöbértéke években. Ha egy szegmensnek olyan helyreállítási üteme van, amely gyorsabb, mint <strong>1/helyreállítási küszöbérték</strong>, akkor a szegmens figyelmen kívül lesz hagyva, és nem lesz belefoglalva az idősormodellbe. Az értéknek 0 és 1 között kell lennie. Az alapértelmezett érték 0,25.</p>",
	"@@LandTrendr-Analysis_snappingdate_tag0@@": "<p>Az egyes évekhez tartozó szeletek kiválasztásához használt dátum a bemeneti többdimenziós adatkészletben. Az illesztés dátumához legközelebbi dátumú szelet lesz kiválasztva. Ez a paraméter kötelező, ha a bemeneti adatkészlet az éveknél alacsonyabb bontású adatokat tartalmaz.</p>",
	"@@LandTrendr-Analysis_spikethreshold_tag0@@": "<p>A pixelérték pályáján található kiugró pontok vagy anomáliák simításához használt küszöbérték. Az értéknek 0 és 1 között kell lennie, ahol az 1 azt jelenti, hogy nincs simítás. Az alapértelmezett érték 0,9.</p>",
	"@@LandTrendr-Analysis_vertexcountovershoot_tag0@@": "<p>A további csúcspontok száma a <strong>szegmensek_max_száma + 1</strong> értéken túl, amelyek felhasználhatók a modell illesztéséhez a csúcspontok azonosításának kezdeti szakaszában. A modellezési folyamat későbbi részében a további csúcspontok száma csökkentve lesz a <strong>szegmensek_max_száma + 1</strong> értékre. Az alapértelmezett érték 2.</p>",
	"@@Merge-Rasters_rasters_tag0@@": "<p>A bemeneti raszter egyesítendő adatkészletei vagy a többdimenziós raszter egyesítendő adatkészletei.</p>",
	"@@Merge-Rasters_resolveoverlapmethod_tag0@@": "<p>Megadja a módszert az átfedő pixelek megoldásához az egyesített adatkészletekben.</p><ul><li><strong>Első</strong> - Az átfedő területeken lévő pixelérték a bemeneti raszterek listáján lévő első raszterből származik. Ez az alapértelmezés.</li><li><strong>Utolsó</strong> - Az átfedő területeken lévő pixelérték a bemeneti raszterek listáján lévő utolsó raszterből származik.</li><li><strong>Minimum</strong> - Az átfedő területeken lévő pixelérték az átfedő pixelek minimális értéke.</li><li><strong>Maximum</strong> - Az átfedő területeken lévő pixelérték az átfedő pixelek maximális értéke.</li><li><strong>Átlag</strong> - Az átfedő területeken lévő pixelérték az átfedő pixelek átlagértéke.</li><li><strong>Összeg</strong> - Az átfedő területeken lévő pixelérték az átfedő pixelek összege.</li></ul>",
	"@@Generate-Trend_cycleunit_tag0@@": "<p>Megadja a harmonikus periódus hosszához használandó időegységet.</p><ul><li><strong>Nap</strong> - A harmonikus periódus hosszához használandó időegység a nap.</li><li><strong>Év</strong> - A harmonikus periódus hosszához használandó időegység az év. Ez az alapértelmezés.</li></ul>",
	"@@Generate-Trend_dimensionname_tag0@@": "<p>Az a dimenzió, amelynek mentén a trendek kiolvasása történik majd, az elemzésben kiválasztott változó vagy változók esetén.</p>",
	"@@Generate-Trend_harmonicfrequency_tag0@@": "<p>A trendillesztésben használandó gyakoriságszám. Ez a paraméter határozza meg az egy éven belüli ciklusok gyakoriságát. Az alapértelmezett érték 1, vagy egy harmonikus periódus évenként.</p><p>Ezt a paramétert az eszköz csak a harmonikus regresszióra vonatkozó trendelemzésbe foglalja bele.</p>",
	"@@Generate-Trend_ignorenodata_tag0@@": "<p>Megadja, hogy az eszköz figyelmen kívül hagyja-e a NoData értékeket az elemzésben.</p><ul><li>Bejelölve - Az elemzés tartalmazni fogja az összes érvényes pixelt egy adott dimenzió mentén, és figyelmen kívül fogja hagyni a NoData pixeleket. Ez az alapértelmezés.</li><li>Nincs bejelölve - Az elemzés eredménye NoData lesz, ha a pixelek bármelyik értéke NoData a megadott dimenzió mentén.</li></ul>",
	"@@Generate-Trend_lengthofcycle_tag0@@": "<p>A modellezni kívánt periodikus változás hossza. Az egység a nap, függetlenül a bemeneti adatok időegységétől. Például a levelek zöldessége egyetlen év alatt nagyon határozott változási ciklust mutat, így a ciklus hossza ebben az esetben 365,25, annak ellenére, hogy a bemeneti adatokban havi zöldesség szerepel. Az óránkénti hőmérsékleti adatok egyetlen nap alatt nagyon határozott változási ciklust mutatnak, így a ciklus hossza ebben az esetben 1.</p><p>Az alapértelmezett hossz 365,25 nap az éves periódusban változó adatok esetén.</p>",
	"@@Generate-Trend_p-valueofslopecoefficient_tag0@@": "<p>Megadja, hogy az eszköz kiszámítsa-e a p érték statisztikát a trendvonalban lévő lejtési koefficienshez.</p><ul><li>Bejelölve - A p érték ki lesz számítva a részletes adatokban a funkció befejeződésekor.</li><li>Nincs bejelölve - A p érték nem lesz kiszámítva. Ez az alapértelmezés.</li></ul>",
	"@@Generate-Trend_polynomialorder_tag0@@": "<p>A trendillesztésben használandó polinomiális fokszám. Ez a paraméter határozza meg a polinomiális fokszámot. Az alapértelmezett érték 2, vagyis a másodfokú polinomiális.</p><p>Ez a paraméter csak a polinomiális regresszió trendelemzésében szerepel.</p>",
	"@@Generate-Trend_r-squared_tag0@@": "<p>Megadja, hogy az eszköz kiszámítsa-e az R négyzetes illeszkedésvizsgálati statisztikát a trendillesztési vonalhoz.</p><ul><li>Bejelölve - Az R négyzetes statisztika ki lesz számítva, és meg lesz jelenítve a részletekben, amikor a funkció befejeződik.</li><li>Nincs bejelölve - Az R négyzet nem lesz kiszámítva. Ez az alapértelmezés.</li></ul>",
	"@@Generate-Trend_raster_tag0@@": "<p>A bemeneti többdimenziós raszter.</p>",
	"@@Generate-Trend_rmse_tag0@@": "<p>Megadja, hogy az eszköz kiszámítsa-e az átlagos négyzetes hiba gyökét (RMSE) a trendillesztési vonalhoz.</p><ul><li>Bejelölve - Az RMSE ki lesz számítva, és meg lesz jelenítve a részletekben, amikor a funkció befejeződik. Ez az alapértelmezés.</li><li>Nincs bejelölve - Az RMSE nem lesz kiszámítva.</li></ul>",
	"@@Generate-Trend_seasonalperiod_tag0@@": "<p>Megadja a szezonális időszak hosszához használandó időegységet a Seasonal-Kendall teszt végrehajtásakor.</p><ul><li>Nap - A szezonális időszak hosszának egysége a nap. Ez az alapértelmezés.</li><li>Hónap - A szezonális időszak hosszának egysége a hónap.</li></ul>",
	"@@Generate-Trend_trendtype_tag0@@": "<p>Megadja annak a vonalnak a típusát, amelyet a pixelértékekre kell illeszteni egy dimenzió mentén.</p><ul><li><strong>Lineáris</strong> - Lineáris trendvonal mentén hajtja végre egy változó pixelértékeinek illesztését. Ez az alapértelmezés.</li><li><strong>Harmonikus</strong> - Harmonikus trendvonal mentén hajtja végre a pixelértékek illesztését.</li><li><strong>Polinomiális</strong> - Másodfokú polinomiális trendvonal mentén hajtja végre a pixelértékek illesztését.</li><li><strong>Mann-Kendall</strong> - A változó pixelértékek kiértékelése a Mann-Kendall trendteszt használatával fog történni.</li><li><strong>Seasonal Kendall</strong> - A változó pixelértékek kiértékelése a Seasonal-Kendall trendteszt használatával fog történni.</li></ul>",
	"@@Compute-Change_cellsizetype_tag0@@": "<p>Válassza ki, hogy melyik cellaméretet szeretné használni a kimeneti raszterben. Ha mindegyik bemeneti cellaméret azonos, mindegyik lehetőség ugyanarra az eredményre vezet.</p><ul><li>Első - A bemeneti raszterek első cellaméretének használata.</li><li>Minimum - Az összes bemeneti raszter legkisebb cellaméretének használata.</li><li>Maximum - Az összes bemeneti raszter legnagyobb cellaméretének használata. Ez az alapértelmezés.</li><li>Átlag - Az összes bemeneti raszter átlagos cellaméretének használata.</li><li>Utolsó - A bemeneti raszterek utolsó cellaméretének használata.</li></ul>",
	"@@Compute-Change_computechangemethod_tag0@@": "<p>A számításhoz használt módszer.</p><ul><li><strong>Különbség</strong> - A bemeneti raszterben lévő pixelértékek közötti matematikai különbség lesz kiszámítva, vagyis kivonás. Ez az alapértelmezett.</li><li><strong>Relatív különbség</strong>- A pixelértékek különbsége kerül kiszámításra, figyelembe véve az összehasonlított értékek nagyságát.</li><li><strong>Kategorikus különbség</strong>- Két kategorikus vagy tematikus raszter közötti különbség kerül kiszámításra, ahol a kimenet tartalmazza a két raszter között előforduló átmeneteket az osztályozottságban.</li><li><strong>Spektrális euklideszi távolság</strong>- A két többsávos raszter pixelértékei közötti euklideszi távolság kerül kiszámításra.</li><li><strong>Spektrális szög különbség</strong>- A két többsávos raszter pixelértékei közötti spektrális szög kerül kiszámításra. A kimenet radiánban van megadva.</li><li><strong>A legtöbb változással rendelkező hullámhossz-tartomány</strong>- Az a sáv kerül kiszámításra, amely a legtöbb változást okozza az egyes pixelekben két többsávos raszter között.</li></ul><p>Ha a<strong>Változtatási mód számítása</strong><strong>Kategóriakülönbség</strong> értékre van állítva, és az egyik bemenet nem kategorikus, akkor egy egyszerű különbség kerül kiszámításra.</p>",
	"@@Compute-Change_definetransitioncolors_tag0@@": "<p>Adja meg a megváltozott osztállyal rendelkező pixelek jelölési módszerét.</p><ul><li><strong>Átlagos kezdő és befejező színek</strong> - A pixel színe az eredeti osztály színének és a végső osztály színének átlaga lesz.</li><li><strong>Kezdő színek használata</strong> - A pixel színe az eredeti osztály színe lesz.</li><li><strong>Befejező színek használata</strong> - A pixel színe a végső osztály színe lesz.</li></ul>",
	"@@Compute-Change_extenttype_tag0@@": "<p>Válassza ki a kimeneti raszterben használandó kiterjedést:</p><ul><li>Első - Az első bemeneti raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.</li><li>Metszet - Az átfedésben lévő pixelek kiterjedésének használata a feldolgozási kiterjedés meghatározásához. Ez az alapértelmezés.</li><li>Unió - Az összes raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.</li><li>Utolsó - Az utolsó bemeneti raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.</li></ul>",
	"@@Compute-Change_filtermethod_tag0@@": "<p>Válassza ki a szűrési módszert a kategória változásának kiszámításához.</p><ul><li><strong>Összes megőrzése</strong> - Az összes osztály bele lesz foglalva a kimenetbe, és nem lesz szűrés. Válassza ezt a lehetőséget, ha egy adatkészlet változását és állandóságát szeretné látni.</li><li><strong>Csak a megváltozott pixelek megőrzése</strong> - Csak azok az osztályok lesznek belefoglalva a kimenetbe, amelyek osztálytípusa megváltozott. Válassza ezt a lehetőséget, ha csak a változás érdekli.</li><li><strong>Csak a változatlan pixelek megőrzése</strong> - Csak azok az osztályok lesznek belefoglalva a kimenetbe, amelyek nem változtak. Válassza ezt a lehetőséget, ha csak az állandóság érdekli.</li></ul>",
	"@@Compute-Change_fromclassvalues_tag0@@": "<p>A <strong>From Raszterből</strong> származó osztályértékek, amelyeket bele kell foglalni a számításba két kategorikus raszter összehasonlításakor. Ez az egész értékek szóközzel elválasztott listája, amelyek megfelelnek a <strong>ClassValue</strong> mezőnek a bemeneti raszter adatkészletében.</p>",
	"@@Compute-Change_fromraster_tag0@@": "<p>A számításban használandó első raszter. Ha az 1-es időpontról (korábbi) a 2-es időpontra (későbbi) történő változást szeretné értékelni, adja meg az 1-es idő raszterét.</p>",
	"@@Compute-Change_toclassvalues_tag0@@": "<p>A <strong>To Raszterből</strong> származó osztályértékek, amelyeket bele kell foglalni a számításba két kategorikus raszter összehasonlításakor. Ez az egész értékek szóközzel elválasztott listája, amelyek megfelelnek a <strong>ClassValue</strong> mezőnek a bemeneti raszter adatkészletében.</p>",
	"@@Compute-Change_toraster_tag0@@": "<p>A számításban használandó második raszter. Ha az 1-es időpontról (korábbi) a 2-es időpontra (későbbi) történő változást szeretné értékelni, adja meg a 2-es idő raszterét.</p>",
	"@@Compute-Change_usecolormethod_tag0@@": "<p>Adja meg a megváltozott osztállyal rendelkező pixelek jelölési módszerét.</p><ul><li><strong>Átlagos kezdő és befejező színek</strong> - A pixel színe az eredeti osztály színének és a végső osztály színének átlaga lesz.</li><li><strong>Kezdő színek használata</strong> - A pixel színe az eredeti osztály színe lesz.</li><li><strong>Befejező színek használata</strong> - A pixel színe a végső osztály színe lesz.</li></ul>",
	"@@Compute-Change_fieldnameforclassnamesinfromraster_tag0@@": "<p>Az osztályneveket a <strong>Kezdő raszter</strong>inputban tároló mező. Az eszköz automatikusan használható<strong>ClassName</strong>mezőt vagy<strong>Class_Name</strong>mezőt keres.</p><p>Akkor használja ezt a beállítást, ha a bemenet nem tartalmazza ezeket a standard mezőneveket.</p>",
	"@@Compute-Change_fieldnameforclassnamesintoraster_tag0@@": "<p>Az osztályneveket a<strong>Záró raszter</strong>inputban tároló mező. Az eszköz automatikusan használható<strong>ClassName</strong>mezőt vagy<strong>Class_Name</strong>mezőt keres.</p><p>Akkor használja ezt a beállítást, ha a bemenet nem tartalmazza ezeket a standard mezőneveket.</p>",
	"@@Statistics_numberofcolumns_tag0@@": "<p>A fokális szomszéd dimenzióban használni kívánt pixeloszlopok száma.</p>",
	"@@Statistics_numberofrows_tag0@@": "<p>A fokáis szomszéd dimenzióban használni kívánt pixelsorok száma.</p>",
	"@@Statistics_onlyfillnodatapixels_tag0@@": "<p>Kitölti a NoData réseket a kimenetben. Ez akkor hasznos, amikor kihagyott sorok lehetnek a távérzékelt felvételeken.</p>",
	"@@Statistics_raster_tag0@@": "<p>A bemeneti raszter, amelyen használni szeretné a fokális statisztika eszközt.</p>",
	"@@Statistics_statisticstype_tag0@@": "<p>A következőkben a fokális statisztikai függvények hét típusa szerepel:</p><ul><li>Minimum - A szomszédságon belüli pixelek minimumát számítja ki.</li><li>Maximum - A szomszédságon belüli pixelek maximumát számítja ki.</li><li>Átlag - A szomszédságon belüli pixelek átlagértékét számítja ki. Ez az alapértelmezés.</li><li>Szórás - A szomszédságon belüli pixelek szórásának értékét számítja ki.</li><li>Medián - A szomszédságon belüli pixelek mediánjának értékét számítja ki.</li><li>Többség - A szomszédságban lévő pixelek többségét számítja ki (a leggyakrabban előforduló értéket).</li><li>Kisebbség - A szomszédságban lévő pixelek kisebbségét számítja ki (a legritkábban előforduló értéket).</li></ul>",
	"@@Detect-Change-Using-Change-Analysis_changedirection_tag0@@": "<p>Meghatározza az elemzésbe belefoglalandó változás irányát.</p><p>Ez a paraméter csak akkor érhető el, ha a bemeneti változáselemzési raszter a LandTrendr eszközök kimenete.</p><ul><li><strong>Összes irány</strong> - Az összes irány bele lesz foglalva a kimenetbe. Ez az alapértelmezés.</li><li><strong>Növekvő</strong> - Csak a pozitív vagy növekvő irányú változás lesz belefoglalva a kimenetbe.</li><li><strong>Csökkenő</strong> - Csak a negatív vagy csökkenő irányú változás lesz belefoglalva a kimenetbe.</li></ul>",
	"@@Detect-Change-Using-Change-Analysis_changetype_tag0@@": "<p>Meghatározza a kiszámítandó változásinformációt.</p><ul><li><strong>Utolsó változás időpontja</strong> - Mindegyik pixel tartalmazza az utolsó változás dátumát az adott pixelre vonatkozóan az idősorban. Ez az alapértelmezés.</li><li><strong>Legkorábbi változás időpontja</strong> - Mindegyik pixel tartalmazza a legkorábbi változás dátumát az adott pixelre vonatkozóan az idősorban.</li><li><strong>Legnagyobb változás időpontja</strong> - Mindegyik pixel tartalmazza a legszignifikánsabb változás dátumát az adott pixelre vonatkozóan az idősorban.</li><li><strong>Változások száma</strong> - Mindegyik pixel tartalmazza azt a számot, hogy a pixel hányszor változott az idősorban.</li><li><strong>Leghosszabb változás ideje</strong> - Mindegyik pixel tartalmazza a leghosszabb átmeneti szegmens végén lévő változás dátumát az idősorban.</li><li><strong>Legrövidebb változás ideje</strong> - Mindegyik pixel tartalmazza a legrövidebb átmeneti szegmens végén lévő változás dátumát az idősorban.</li><li><strong>Leggyorsabb változás ideje</strong> - Mindegyik pixel tartalmazza a leggyorsabban történt átmenet végén lévő változás dátumát az idősorban.</li><li><strong>Leglassabb változás ideje</strong> - Mindegyik pixel tartalmazza a leglassabban történt átmenet végén lévő változás dátumát az idősorban.</li></ul>",
	"@@Detect-Change-Using-Change-Analysis_filterbyduration_tag0@@": "<p>Meghatározza, hogy történjen-e szűrés a változás időtartama alapján.</p><p></p><ul><li>Bejelölve - Az eredmények szűrése, hogy csak a meghatározott ideig tartó változások legyenek belefoglalva a kimenetbe.</li><li>Nincs bejelölve - Az eredmények nem lesznek szűrve időtartam alapján. Ez az alapértelmezés.</li></ul><p>Ez a paraméter csak akkor érhető el, ha a bemeneti változáselemzési raszter a LandTrendr eszközök kimenete.</p><p>Ha ez a paraméter be van jelölve, be kell állítania a <strong>Minimum időtartam</strong> és a <strong>Maximum időtartam</strong> paramétert a szűréshez.</p>",
	"@@Detect-Change-Using-Change-Analysis_filterbymagnitude_tag0@@": "<p>Meghatározza, hogy történjen-e szűrés a változás nagyság alapján.</p><ul><li>Bejelölve - Az eredmények szűrése, hogy csak a meghatározott nagyságú változások legyenek belefoglalva a kimenetbe.</li><li>Nincs bejelölve - Az eredmények nem lesznek szűrve nagyság alapján. Ez az alapértelmezés.</li></ul><p>Ez a paraméter csak akkor érhető el, ha a bemeneti változáselemzési raszter a LandTrendr eszközök kimenete.</p><p>Ha ez a paraméter be van jelölve, be kell állítania a <strong>Minimum nagyság</strong> és a <strong>Maximum nagyság</strong> paramétert a szűréshez.</p>",
	"@@Detect-Change-Using-Change-Analysis_filterbyyear_tag0@@": "<p>Meghatározza, hogy korlátozva legyen-e a kimenet az évek tartományával.</p><ul><li>Bejelölve - Az eredmények szűrése, hogy csak a meghatározott évtartományban történt változások legyenek belefoglalva a kimenetbe.</li><li>Nincs bejelölve - Az eredmények nem lesznek szűrve év alapján. Ez az alapértelmezés.</li></ul><p>Ha ez a paraméter be van jelölve, be kell állítania a <strong>Minimum érték</strong> és a <strong>Maximum érték</strong> paramétert a szűréshez.</p>",
	"@@Detect-Change-Using-Change-Analysis_filterbystartvalue_tag0@@": "<p>Szűrje az értékeket kezdőérték szerint, hogy csak az adott kezdőérték változásai kerüljenek a kimenetbe.</p>",
	"@@Detect-Change-Using-Change-Analysis_filterbyendvalue_tag0@@": "<p>Szűrje az értékeket záróérték szerint, hogy csak az adott záróérték változásai kerüljenek a kimenetbe.</p>",
	"@@Detect-Change-Using-Change-Analysis_maximumnumberofchanges_tag0@@": "<p>A változások maximális száma pixelenként, amelyeket használni kell a számításhoz. A megadott szám megfelel a kimeneti raszterben lévő sávoknak. Az alapértelmezett érték 1, ami azt jelenti, hogy csak egy változási dátum van kiszámítva, és a kimeneti raszter csak egy sávot tartalmaz.</p><p>Ez a paraméter nem érhető el, ha a <strong>Változás típusa</strong> paraméter beállítása <strong>Változások száma</strong>.</p>",
	"@@Detect-Change-Using-Change-Analysis_raster_tag0@@": "<p>A bemeneti változáselemzési raszter.</p>",
	"@@Detect-Change-Using-Change-Analysis_segmentdate_tag0@@": "<p>Meghatározza, hogy a változási szegmens elején vagy végén lévő dátum legyen-e kiolvasva.</p><p>Ez a paraméter csak akkor érhető el, ha a bemeneti változáselemzési raszter a LandTrendr eszközök kimenete.</p><ul><li><strong>Szegmens eleje</strong> - A változási szegmens elején lévő dátum kiolvasása. Ez az alapértelmezés.</li><li><strong>Szegmens vége</strong> - A változási szegmens végén lévő dátum kiolvasása.</li></ul>",
	"@@Kernel-Density_areaunits_tag0@@": "<p>A kimeneti sűrűségértékek területi mértékegységei.</p><ul><li>Négyzet-térképegység - A kimeneti térbeli referencia lineáris egységeinek négyzete.</li><li>Négyzetmérföld - amerikai mérföld.</li><li>Négyzetkilométer - kilométer.</li><li>Acre - amerikai acre.</li><li>Hektár - hektár.</li><li>Négyzetméter - méter.</li><li>Négyzetyard - amerikai yard.</li><li>Négyzetláb - amerikai láb.</li><li>Négyzethüvelyk - amerikai hüvelyk.</li><li>Négyzetcentiméter - centiméter.</li><li>Négyzetmilliméter - milliméter.</li></ul>",
	"@@Kernel-Density_cellsize_tag0@@": "<p>A kimeneti raszter adatkészletének pixelmérete. Ha a <strong>Cellaméret</strong> be van állítva a téradat-feldolgozási környezetekben, az lesz az alapértelmezett érték.</p>",
	"@@Kernel-Density_inputbarriers_tag0@@": "<p>Az akadályokat meghatározó adatkészlet.</p><p>Az akadályok lehetnek polyline vagy polygon típusú vektoros elemek rétegei.</p>",
	"@@Kernel-Density_inputfeatures_tag0@@": "<p>Az a bemeneti pontszerű vagy vonalas vektoros elem, amelyhez a sűrűséget ki kell számítani.</p>",
	"@@Kernel-Density_method_tag0@@": "<p>Meghatározza, hogy szferoid (geodéziai) vagy lapos föld (síkbeli) módszerrel számítandó-e a legrövidebb útvonal.</p><ul><li><strong>Síkbeli</strong> - Síkbeli távolságokat használ a vektoros elemek között. Ez az alapértelmezés.</li><li><strong>Geodéziai</strong> - Geodéziai távolságokat használ a vektoros elemek között. Ez a módszer figyelembe veszi a szferoid görbületét, és helyesen kezeli a pólusok és a nemzetközi dátumválasztó vonal közelében található adatokat.</li></ul><p>Javasolt a <strong>Geodéziai</strong> módszer használata az olyan koordináta-rendszerben tárolt adatokhoz, amely nem alkalmas a nagy földrajzi területekre kiterjedő távolságmérésekhez és elemzésekhez. Például a Web Mercator vagy bármelyik földrajzi koordináta-rendszer esetén használja a <strong>Geodéziai</strong> módszert.</p>",
	"@@Kernel-Density_outputcellvalues_tag0@@": "<p>Meghatározza, hogy mit jelentenek az értékek a kimeneti raszterben.</p><ul><li><strong>Sűrűség</strong> - A kimeneti értékek az előrejelzett sűrűségi értéket jelentik. Ez az alapértelmezés.</li><li><strong>Várható számok</strong> - A kimeneti értékek a jelenség előrejelzett mennyiségét jelentik az egyes pixeleken belül. Mivel a pixel értéke a <strong>Cellaméret</strong> meghatározott értékéhez kapcsolódik, az eredményként kapott raszteren nem végezhető el újra a mintavételezés másik pixelméreten úgy, hogy továbbra is a jelenség mennyiségét jelentse.</li></ul>",
	"@@Kernel-Density_populationfield_tag0@@": "<p>Az egyes vektoros elemek népességértékeit jelző mező. A <strong>Népesség</strong> mező értéke a tájon a folyamatos felszín létrehozása érdekében szétosztandó darabszám vagy mennyiség. A <strong>Population</strong> mezőben lévő értékek lehetnek egész szám vagy lebegőpontos értékek.</p><p>A mező beállítási lehetőségei és alapértelmezett viselkedései prioritás sorrendjében szerepelnek az alábbi listában.</p><ul><li>Használja a <strong>Nincs</strong> lehetőséget, ha nem használ egyetlen elemet vagy egyedi értéket sem, és mindegyik vektoros elemet egyszer veszi számba.</li><li>Használja az <strong>Shape</strong> lehetőséget, ha a bemeneti vektoros elemek tartalmaznak Z-t.</li><li>Ellenkező esetben az alapértelmezett mező a <strong>POPULATION</strong> vagy a népesség bármely elfogadható származéka:<ul><li><strong>POPULATIONxxxx</strong> ahol <strong>xxxx</strong> bármilyen érvényes karakter lehet, például <strong>POPULATION6</strong>,<strong>POPULATION1974</strong> vagy <strong>POPULATIONROADTYPE</strong>.</li><li><strong>POP</strong>.</li><li><strong>POPxxxx</strong>.</li><li>Ha a fentiek egyike sem érvényes, az alapértelmezett érték <strong>Nincs</strong>.</li></ul></li></ul>",
	"@@Kernel-Density_searchradius_tag0@@": "<p>A keresési sugár, amelyen belül a sűrűséget számítani kell. A mértékegységek a vetület lineáris egységén alapulnak.</p><p>Ha például a mértékegység méter, és minden vektoros elemet szerepeltetni szeretne egy mérföldön belül, állítsa a keresési sugarat 1609,344-re (mivel 1 mérföld = 1609,344 méter).</p>",
	"@@Zonal-Statistics_ignorenodataincalculations_tag0@@": "<p>Azt jelzi, hogy a <strong>NoData</strong> értékek az <strong>Értékraszterben</strong> befolyásolják-e annak a zónának az eredményeit, amelyikbe esnek.</p><ul><li><strong>Igen</strong> - Mindegyik zónán belül csak az <strong>Értékraszter</strong> azon pixeleit használja az adott zóna kimeneti értékének meghatározásához, amelyek értékkel rendelkeznek. A<strong>NoData</strong> pixeleket az <strong>Értékraszterben</strong> figyelmen kívül lesznek hagyva a statisztikai számítás során. Ez az alapértelmezés.</li><li><strong>Nem</strong> - Bármely zóna esetében, ha bármilyen <strong>NoData</strong> pixel található az <strong>Értékraszterben</strong>, akkor az úgy lesz kezelve, mintha az adott zónában nem lenne elegendő információ a statisztikai számítások elvégzéséhez az összes pixelnél, ezért az egész zóna <strong>NoData</strong> értéket kap a kimeneti raszteren.</li></ul>",
	"@@Zonal-Statistics_percentileinterpolationtype_tag0@@": "<p>Meghatározza, hogy a percentilis melyik interpolációtípusát kell használni, amikor a bemeneti raszterből származó számítandó értékek párosak.</p><ul><li><strong>Automatikus észlelés</strong> - Ha a bemeneti értékraszter egész szám pixeltípusú, akkor a <strong>Legközelebbi</strong> módszer lesz használva. Ha a bemeneti értékraszter lebegőpontos pixeltípusú, akkor a <strong>Lineáris</strong> módszer lesz használva. Ez az alapértelmezés.</li><li><strong>Legközelebbi</strong> - A kívánt percentilishez legközelebb eső elérhető érték lesz használva. Ebben az esetben a kimenet pixeltípusa megegyezik a bemeneti értékraszterével.</li><li><strong>Lineáris</strong> - A kívánt percentilis két szomszédos értékének súlyozott átlaga lesz használva. Ebben az esetben a kimenet pixeltípusa lebegőpontos.</li></ul>",
	"@@Zonal-Statistics_percentilevalue_tag0@@": "<p>A kiszámítandó percentilis. Az alapértelmezett érték 90, vagyis a 90. percentilis.</p><p>Az értékek 0 és 100 közé eshetnek. A 0. percentilis lényegében a Minimum statisztikával, míg a 100. percentilis a Maximum statisztikával egyezik meg. Az 50-es érték lényegében ugyanazt az eredményt adja, mint a Medián statisztika.</p>",
	"@@Zonal-Statistics_processasmultidimensional_tag0@@": "<p>Meghatározza, hogyan történjen a bemeneti többdimenziós értékraszter feldolgozása.</p><ul><li><strong>Aktuális szelet</strong> - A statisztika az adathalmaz aktuális szeletéből lesz kiszámítva. Ez az alapértelmezés.</li><li><strong>Minden szelet</strong> - A statisztika a többdimenziós adathalmaz valamennyi dimenziójára (például az időre és a mélységre) vonatkozóan lesz kiszámítva.</li></ul>",
	"@@Zonal-Statistics_statisticstype_tag0@@": "<p>A kiszámítandó statisztikatípus.</p><ul><li><strong>Átlag</strong> - Az <strong>Értékraszter</strong> azon pixeleinek átlagát számítja ki, amelyek a kimeneti pixellel azonos zónába tartoznak.</li><li><strong>Többség</strong> - Azt állapítja meg, hogy melyik érték fordul elő a leggyakrabban azoknál a pixeleknél az <strong>Értékraszterben</strong>, amelyek a kimeneti pixellel azonos zónába tartoznak.</li><li><strong>Maximum</strong> - Azt állapítja meg, hogy melyik a legnagyobb érték azoknál a pixeleknél az <strong>Értékraszterben</strong>, amelyek a kimeneti pixellel azonos zónába tartoznak.</li><li><strong>Medián</strong> - Azt állapítja meg, hogy melyik a medián érték azoknál a pixeleknél az <strong>Értékraszterben</strong>, amelyek a kimeneti pixellel azonos zónába tartoznak.</li><li><strong>Minimum</strong> - Azt állapítja meg, hogy melyik a legkisebb érték azoknál a pixeleknél az <strong>Értékraszterben</strong>, amelyek a kimeneti pixellel azonos zónába tartoznak.</li><li><strong>Kisebbség</strong> - Azt állapítja meg, hogy melyik érték fordul elő a legritkábban azoknál a pixeleknél az <strong>Értékraszterben</strong>, amelyek a kimeneti pixellel azonos zónába tartoznak.</li><li><strong>Percentilis</strong> - A percentilist számítja ki azoknál a pixeleknél az <strong>Értékraszterben</strong>, amelyek a kimeneti pixellel azonos zónába tartoznak. Alapértelmezés szerint a 90. percentilis van kiszámítva. A kiszámítandó percentilis megadásához használja a <strong>Percentilis érték</strong>paramétert.</li><li><strong>Tartomány</strong> - A legnagyobb és a legkisebb érték közötti különbséget számítja ki azoknál a pixeleknél az <strong>Értékraszterben</strong>, amelyek a kimeneti pixellel azonos zónába tartoznak.</li><li><strong>Szórás</strong> - A szórást számítja ki azoknál a pixeleknél az <strong>Értékraszterben</strong>, amelyek a kimeneti pixellel azonos zónába tartoznak.</li><li><strong>Összeg</strong> - Az összeget számítja ki azoknál a pixeleknél az <strong>Értékraszterben</strong>, amelyek a kimeneti pixellel azonos zónába tartoznak.</li><li><strong>Sokféleség</strong> - Az egyedi értékek számát számítja ki azoknál a pixeleknél az <strong>Értékraszterben</strong>, amelyek a kimeneti pixellel azonos zónába tartoznak.</li></ul>",
	"@@Zonal-Statistics_valueraster_tag0@@": "<p>Azokat az értékeket tartalmazó raszter, amelyekből a statisztikát számítani kell.</p>",
	"@@Zonal-Statistics_zonefield_tag0@@": "<p>Az egyes zónákat meghatározó értékeket tartalmazó mező. Lehet a zónaraszter egészszám- vagy karakterláncmezője.</p>",
	"@@Zonal-Statistics_zoneraster_tag0@@": "<p>A zónákat meghatározó adathalmaz. A zónák egész szám raszterrel határozhatók meg.</p>",
	"@@Zonal-Statistics_calculatecircularstatistics_tag0@@": "<p>A statisztikatípus számításának módját határozza meg.</p><ul><li><strong>Aritmetikai</strong> – aritmetikai statisztikákat számít. Ez az alapértelmezett.</li><li><strong>Körkörös</strong> – körkörös statisztikákat számít, amelyek megfelelnek a ciklikus mennyiségeknek, mint az iránytű szerinti irány fokokban, a nappalok és a valós számok törtrészei.</li></ul>",
	"@@Zonal-Statistics_circularwrapvalue_tag0@@": "<p>A lehetséges legmagasabb érték (felső korlát) a ciklikus adatban. Pozitív szám, alapértelmezett értéke 360. Ez az érték ugyanazt a mennyiséget képviseli, mint a lehetséges legalacsonyabb érték (alsó korlát).</p><p>Ez a paraméter csak körkörös statisztikai számításakor használható.</p>",
	"@@Boundary-Clean-function_inputraster_tag0@@": "<p>Az a bemeneti raszter, amelynél simítva lesz a zónák közötti határ.</p><p>Egész szám típusúnak kell lennie.</p>",
	"@@Boundary-Clean-function_runexpansionandshrinkingtwice_tag0@@": "<p>Megadja, hogy hányszor lesz végrehajtva a simítási folyamat: kétszer vagy egyszer.</p><ul><li><p><strong>Bejelölve</strong> - A kiterjesztési és a zsugorítási művelet kétszer lesz végrehajtva. Az első alkalommal a művelet a megadott rendezési típusnak megfelelően lesz végrehajtva. Ezután még egy kiterjesztés és zsugorítás lesz végrehajtva fordított prioritással. Ez az alapértelmezés.</p></li><li><p><strong>Nincs bejelölve</strong> - A kiterjesztési és a zsugorítási műveletet egyszer hajtja végre a rendezési típusnak megfelelően.</p></li></ul>",
	"@@Boundary-Clean-function_sorttype_tag0@@": "<p>Megadja a simítási folyamatban használandó rendezési típust. A rendezés határozza meg a prioritást, amellyel a cellák kiterjeszthetők a szomszédaikra.</p><p>A rendezés végrehajtható a zóna értéke vagy a zóna területe alapján.</p><ul><li><p><strong>Nincs rendezés</strong> - A zónák nem lesznek rendezve méret szerint. A nagyobb értékű zónák prioritást kapnak a kisebb értékű zónákba való kiterjesztésre a simított kimenetben. Ez az alapértelmezés.</p></li><li><p><strong>Csökkenő</strong> - Csökkenő sorrendben rendezi a zónákat méret szerint. A nagyobb teljes területű zónák nagyobb prioritást kapnak a kisebb területű zónákba való kiterjesztésre. Ez a beállítás kiküszöböli vagy csökkenti a kisebb zónákból származó cellák elterjedtségét a simított kimenetben.</p></li><li><p><strong>Növekvő</strong> - Növekvő sorrendben rendezi a zónákat méret szerint. A kisebb teljes területű zónák prioritást kapnak a nagyobb területű zónákba való kiterjesztésre. Ez a beállítás megőrzi vagy növeli a kisebb zónákból származó cellák elterjedtségét a simított kimenetben.</p></li></ul>",
	"@@Aggregate-Multidimensional_dimension_tag0@@": "<p>Az összevonás dimenziója. Ez az a dimenzió, amely mentén a változók össze lesznek vonva.</p>",
	"@@Aggregate-Multidimensional_dimensiondefinition_tag0@@": "<p>A bemeneti többdimenziós adatoknak az összevonás elvégzése előtti szűrésére szolgáló módszert határozza meg.</p><ul><li><strong>Mind</strong>: A rendszer mindegyik dimenzió összes tartományát használni fogja. Ez az alapértelmezett.</li><li><strong>Értékek szerint</strong>: A rendszer a dimenziót dimenzióérték vagy értéklista használatával szeleteli fel.</li><li><strong>Tartományok szerint</strong>: A rendszer a dimenziót tartomány vagy tartománylista használatával szeleteli fel.</li><li><strong>Iteráció szerint</strong>: A rendszer a dimenziót meghatározott intervallumméret felett szeleteli fel.</li></ul>",
	"@@Aggregate-Multidimensional_iterationdefinitionparameters_tag0@@": "<p>Az Iterációdefiníció paraméterek lehetővé teszik a bemeneti többdimenziós adatok elemzéshez való szűrésére szolgáló dimenzióértékek meghatározását olyankor, amikor a<strong>Dimenziódefiníció</strong>paraméter beállítása<strong>Iteráció szerint</strong>.</p><ul><li><strong>Dimenzió</strong>: A szűrésre használható dimenzió.</li><li><strong>Első iteráció kezdete</strong>: Az első intervallum kezdete. Ez az intervallum a az adathalmazon keresztül történő iterációra szolgál.</li><li><strong>Első iteráció vége</strong>: Az első intervallum vége. Ez az intervallum a az adathalmazon keresztül történő iterációra szolgál.</li><li><strong>Lépés</strong>: Az adatok szeletelésének gyakorisága.</li><li><strong>Mértékegység</strong>: Az iteráció mértékegysége.</li></ul>",
	"@@Aggregate-Multidimensional_keywordinterval_tag0@@": "<p>Ezzel adható meg a dimenzió mentén történő összevonás során használt kulcsszóintervallum.</p><p>E paraméter megadása kötelező, ha <strong>Típus</strong>paraméter beállítása<strong>Intervallumkulcsszó</strong>.</p><ul><li><strong>Óránkénti</strong>: Az adatértékek óránkénti időlépésekbe lesznek összevonva, és az eredmény minden órát tartalmazni fog az idősorban. Ez az alapértelmezett.</li><li><strong>Napi</strong>: Az adatértékek napi időlépésekbe lesznek összevonva, és az eredmény minden napot tartalmazni fog az idősorban.</li><li><strong>Heti</strong>: Az adatértékek heti időlépésekbe lesznek összevonva, és az eredmény minden hetet tartalmazni fog az idősorban.</li><li><strong>Tíznapos</strong>: Az adatértékek 3 darab 10 napos periódusba lesznek összevonva. Az utolsó periódus 10 napnál többet és kevesebbet is tartalmazhat. A kimenet 3 időszeletet fog tartalmazni mindegyik hónaphoz.</li><li><strong>Ötnapos</strong>: Az adatértékek 6 darab 5 napos periódusba lesznek összevonva. Az utolsó periódus 5 napnál többet és kevesebbet is tartalmazhat. A kimenet 6 időszeletet fog tartalmazni mindegyik hónaphoz.</li><li><strong>Havi</strong>: Az adatértékek havi időlépésekbe vannak összevonva, és az eredmény minden hónapot tartalmazni fog az idősorban.</li><li><strong>Negyedéves</strong>: Az adatértékek negyedéves időlépésekbe vannak összevonva, és az eredmény minden negyedévet tartalmazni fog az idősorban.</li><li><strong>Éves</strong>: Az adatértékek éves időlépésekbe vannak összevonva, és az eredmény minden évet tartalmazni fog az idősorban.</li><li><strong>Naponta ismétlődve</strong>: Az adatértékek napi időlépésekbe vannak összevonva, és az eredmény egy-egy összevont értéket fog tartalmazni a julián naptár egy-egy napján. A kimenet legfeljebb 366 napi időszeletet tartalmaz.</li><li><strong>Ismétlődő heti</strong>: Az adatértékek heti időlépésekbe lesznek összevonva, és az eredmény hetente egy összevont értéket fog tartalmazni. A kimenet legfeljebb 53 heti időszeletet tartalmaz.</li><li><strong>Havonta ismétlődve</strong>: Az adatértékek heti időlépésekbe vannak összevonva, és az eredmény hetente egy összevont értéket fog tartalmazni. A kimenet legfeljebb 12 havi időszeletet tartalmaz.</li><li><strong>Negyedévente ismétlődve</strong>: Az adatértékek negyedévenkénti időlépésekbe vannak összevonva, és az eredmény negyedévente egy összevont értéket fog tartalmazni. A kimenet legfeljebb 4 negyedéves időszeletet tartalmaz.</li></ul>",
	"@@Aggregate-Multidimensional_operation_tag0@@": "<p>Ezzel adható meg egy intervallumban az összevont szeletek egyesítéséhez használt matematikai módszer.</p><ul><li><strong>Többség</strong>: Egy pixel leggyakrabban előforduló értékét számítja ki az összes szeleten egy intervallumban.</li><li><strong>Maximum</strong>: Egy pixel legnagyobb értékét számítja ki az összes szeleten az intervallumon belül.</li><li><strong>Átlag</strong>: Egy pixel értékeinek átlagát számítja ki az összes szeleten az intervallumon belül. Ez az alapértelmezett.</li><li><strong>Medián</strong>: Egy pixel medián értékét számítja ki az összes szeleten az intervallumon belül.</li><li><strong>Minimum</strong>: Egy pixel legkisebb értékét számítja ki az összes szeleten egy intervallumban.</li><li><strong>Kisebbség</strong>: Egy pixel legritkábban előforduló értékét számítja ki az összes szeleten egy intervallumban.</li><li><strong>Tartomány</strong>: Egy pixel értékeinek terjedelmét számítja ki az összes szeleten az intervallumon belül.</li><li><strong>Szórás</strong>: Egy pixel értékeinek szórását számítja ki az összes szeleten az intervallumon belül.</li><li><strong>Összeg</strong>: Egy pixel értékeinek összegét számítja ki az összes szeleten az intervallumon belül.</li><li><strong>Sokféleség</strong>: Egy pixel egyedi értékeinek számát számítja ki az összes szeleten az intervallumon belül.</li></ul><p>Mindegyik lehetőségnek megvan a NoData érték figyelmen kívül hagyása beállítás alkalmazásával használható ekvivalense. Az elemzés elvégzi a matematikai műveletet az összes érvényes képponton egy adott dimenzió mentén, és figyelmen kívül fogja hagyni a NoData pixeleket.</p>",
	"@@Aggregate-Multidimensional_ranges_tag0@@": "<p>A táblázatban meghatározott intervallumtartományok értékek csoportjainak összevonására szolgálnak. A minimum- és maximumértékek határozzák meg a belefoglalni kívánt tartományt.</p><p>E paraméter megadása kötelező, ha a <strong>Típus</strong>paraméter beállítása<strong>Intervallumtartományok</strong>.</p>",
	"@@Aggregate-Multidimensional_raster_tag0@@": "<p>A bemeneti többdimenziós raszter.</p>",
	"@@Aggregate-Multidimensional_type_tag0@@": "<p>Az adatok összevonásához használt dimenzióintervallum választható ki.</p><ul><li><strong>Mind</strong>: A változóadatok össze lesznek vonva az összes szeleten. Ez az alapértelmezett.</li><li><strong>Intervallumkulcsszó</strong>: A változóadatok köztudott intervallumot használva lesznek összevonva.</li><li><strong>Intervallumérték</strong>: A változóadatok felhasználó által megadott intervallumot és mértékegységet használva lesznek összevonva.</li><li><strong>Intervallumtartományok</strong>: A változóadatok felhasználó által megadott értéket és dátumot használva lesznek összevonva.</li></ul>",
	"@@Aggregate-Multidimensional_valueinterval_tag0@@": "<p>Az összevonáshoz használt intervallum mérete.</p><p>E paraméter megadása kötelező,ha a<strong>Típus</strong>paraméter beállítása<strong>Intervallumérték</strong>.</p>",
	"@@Aggregate-Multidimensional_values_tag0@@": "<p>A bemeneti többdimenziós adatok elemzéshez való szűrésére szolgáló dimenzióértékek. Ennek a paraméternek a megadása kötelező, amikor a <strong>Dimenziódefiníció</strong> paraméter beállítása <strong>Értékek szerint</strong>.</p>",
	"@@Aggregate-Multidimensional_variables_tag0@@": "<p>A változó vagy változók, amelyek össze lesznek vonva az adott dimenzió mentén.</p>",
	"@@Predict-Using-Regression_inputdefinitionfile_tag0@@": "<p>A bemeneti Esri regressziós definíció (<strong>.ecd</strong>) fájl, amely tartalmazza az adott adatkészletre, regressziós modellre és kiválasztott attribútumokra vonatkozó statisztikákat és információkat.</p>",
	"@@Predict-Using-Regression_rasters_tag0@@": "<p>Az előrejelző változókat reprezentáló raszteres adatkészlet vagy adatkészletek. Ez lehet egysávos raszter, többsávos raszter, többdimenziós raszter, mozaikos adatkészlet vagy rasztergyűjtemény.</p>",
	"@@Cell-Statistics_operation_tag0@@": "<p>Az elvégezni kívánt statisztikai számítás típusa.</p><p>A rendelkezésre álló statisztikák a következők:<strong>Többség</strong>,<strong>Maximum</strong>,<strong>Átlag</strong>,<strong>Medián</strong>,<strong>Minimum</strong>,<strong>Kisebbség</strong>,<strong>Percentilis</strong>,<strong>Terjedelem</strong>,<strong>Szórás</strong>,<strong>Összeg</strong> és a<strong>Változatosság</strong>.</p><p>Az alapértelmezett statisztika az<strong>Átlag</strong>.</p>",
	"@@Colormap-To-RGB_randomlyassigncolortounmappedpixels_tag0@@": "<p>A színek véletlenszerűen vannak hozzárendelve azokhoz a pixelekhez, ameyleket a színtérkép nem tartalmaz.</p><ul><li>Nem jelölt: a nem leképezett pixelekhez nincs hozzárendelve szín. Ez az alapértelmezett beállítás.</li><li>Jelölt: a nem leképezett pixelekhez van hozzárendelve szín.</li></ul>",
	"@@Pansharpen_sensor_tag0@@": "<p>A Gram–Schmidt-algoritmus használata esetén a több hullámhossztartománnyal rendelkező raszterbemenetet összegyűjtő szenzor is megadható. A szenzortípus kiválasztásával beállítja a megfelelő hullámhossztartomány-súlyokat is.</p>",
	"@@Dimensional-Moving-Statistics_backwardwindow_tag0@@": "<p>A megadott ablakba az előtte vagy felette belefoglalandó szeletek száma. Az értéknek pozitív egész számnak kell lennie, 1-től 100-ig. Az alapértelmezett érték az 1.</p><p>A paraméter mértékegysége a szelet.</p>",
	"@@Dimensional-Moving-Statistics_circularwrapvalue_tag0@@": "<p>A lineáris érték adott körkörös átlag tartományára való kerekítésére szolgáló érték.</p><p>Értéke pozitív kell legyen. Az alapértelmezett érték a 360 fok.</p>",
	"@@Dimensional-Moving-Statistics_dimension_tag0@@": "<p>Annak a tartománynak a neve, amely mentén az ablak mozog.</p><p>Az alapértelmezett érték a kiindulási többdimenziós raszterben található x,y értéktől eltérő első dimenzió.</p>",
	"@@Dimensional-Moving-Statistics_forwardwindow_tag0@@": "<p>A megadott ablakba az utána vagy alatta belefoglalandó szeletek számának értéke. Az értéknek pozitív egész számnak kell lennie, 1-től 100-ig. Az alapértelmezett érték az 1.</p><p>A paraméter mértékegysége a szelet.</p>",
	"@@Dimensional-Moving-Statistics_inputraster_tag0@@": "<p>A kiindulási raszter csak CRF (Cloud Raster Format) formátumú (<strong>.crf</strong>fájl) lehet.</p>",
	"@@Dimensional-Moving-Statistics_nodatahandling_tag0@@": "<p>megadja, hogy a szatisztikaszámítás hogyan kezeli majd a NoData értékeket.</p><ul><li><strong>Adat</strong>: a kiindulási értékben szereplő NoData értékeket az alkalmazás figyelmen kívül hagyja annak a meghatározott ablaknak az eredményei között, amelybe beleesnek. Ez az alapértelmezett beállítás.</li><li>A <strong>NoData</strong>: Az eredményértékek NoData értéket kapnak, ha a megadott ablakon belüli bemenetben nincs NoData érték.</li><li> <strong>NoData kitöltése</strong>: a NoData cellaértékeket a megadott ablakon belüli kiválasztott statisztika felhasználásával helyettesíti az alkalmazás.</li></ul>",
	"@@Dimensional-Moving-Statistics_percentileinterpolationtype_tag0@@": "<p>Meghatározza, hogy az interpoláció melyik metódusát kell használni, ha a percentilisérték két cellaérték közé esik.</p><ul><li><strong>Automatikus észlelés</strong>: ha a bemeneti raszterek integer pixel típusúak, a <strong>Legközelebbi</strong> módszert kell használni. Ha a bemeneti raszter lebegő pixel típusú, akkor a <strong>Lineáris</strong> módszer lesz használva. Ez az alapértelmezés.</li><li><strong>Legközelebbi</strong>: a kívánt percentilishez legközelebb eső elérhető érték lesz használva. Ebben az esetben a kimenet pixeltípusa megegyezik a bemeneti értékraszterével.</li><li><strong>Lineáris</strong>: a percentilis két szomszédos értékének súlyozott átlaga lesz használva. In this case, the output pixel type will be floating point.</li></ul>",
	"@@Dimensional-Moving-Statistics_percentilevalue_tag0@@": "<p>Az a percentilis, amelyet a <strong>Percentilis</strong>statisztikatípus kiválasztása esetén számít ki a rendszer. Az alapértelmezett érték 90, vagyis a 90. percentilis.</p><p>Az értékek 0 és 100 közé eshetnek. A 0. percentilis lényegében a Minimum statisztikával, míg a 100. percentilis a Maximum statisztikával egyezik meg, azzal a különbséggel, hogy az eredmény lebegőpontos érték lesz. Az 50-es érték ugyanazt az eredményt adja, mint a Medián statisztika.</p>",
	"@@Dimensional-Moving-Statistics_statisticstype_tag0@@": "<p>A kiszámítandó statisztikatípust határozza meg.</p><p></p><ul><li><strong>Átlag</strong>: a meghatározott ablakon belüli cellák átlagát (átlagértékét) számítja ki. Ez az alapértelmezett.</li><li><strong>Körív átlag</strong>: a meghatározott ablakban lévő cellák körív átlagát számítja ki. E statisztikatípus kiválasztása esetén hozzáférhetővé válik a<strong>Körkörös csomagolás értéke</strong>paraméter.</li><li><strong>Többség</strong>: a meghatározott ablakban lévő cellák többségét (a leggyakrabban megjelenő értéket) határozza meg.</li><li><strong>Maximum</strong>: a meghatározott ablakban lévő cellák maximumát (a legnagyobb értéket) határozza meg.</li><li><strong>Medián</strong>: a szomszédos cellák mediánját határozza meg.</li><li><strong>Minimum</strong>: a szomszédos cellák minimumát (a legkisebb értéket) határozza meg.</li><li><strong>Percentilis:</strong>: a szomszédos cellák percentilisét határozza meg. Ha ez statisztikatípus van kiválasztva, hozzáférhetővé válik a <strong>Percentilis érték</strong>és a<strong>Percentilis interpolációtípusa</strong>paraméter. Ezekkel az új paraméterekkel megadhatja (rendre) a számítási percentilist és kiválaszthatja a használni kívánt interpolációtípust.</li></ul>",
	"@@Interpolate-Raster-By-Dimension_dimension_tag0@@": "<p>Az interpolációhoz használni kívánt dimenzió.</p><p>Ennek a paraméternek a megadása kötelező, amikor a <strong>Dimenziódefiníció</strong> paraméter beállítása <strong>Intervallum szerint</strong>.</p>",
	"@@Interpolate-Raster-By-Dimension_dimensiondefinition_tag0@@": "<p>Az interpoláció elvégzése előtt a kiindulási többdimenziós adatok szűrésére felhasználandó metódust határozza meg.</p><ul><li><strong>Értékek szerint</strong>: a rendszer a dimenziót tartomány vagy tartománylista használatával szeleteli fel.</li><li><strong>Intervallum szerint</strong>: a rendszer a dimenziót tartomány vagy tartománylista használatával szeleteli fel.</li><li><strong>Cél raszter szerint</strong>: a rendszer a dimenziót adott cél többdimenziós raszter használatával szeleteli fel.</li></ul>",
	"@@Interpolate-Raster-By-Dimension_endofinterval_tag0@@": "<p>Annak az intervallumnak a vége, amely az adathalmazon keresztül történő iterációra szolgál.</p><p>Ennek a paraméternek a megadása kötelező, amikor a <strong>Dimenziódefiníció</strong> paraméter beállítása <strong>Intervallum szerint</strong>.</p>",
	"@@Interpolate-Raster-By-Dimension_ignorenodata_tag0@@": "<p>Megadható, hogy az elemzés figyelmen kívül hagyja-e a NoData értékeket.</p><ul><li>Nincs bejelölve: az elemzés NoData eredményt ad, ha a szomszédos szeletek között nincs NoData érték. Ez az alapértelmezett.</li><li>Bejelölve: az elemzés csak olyan szeleteket használ, amelyek érvényes pixelekkel rendelkeznek, és figyelmen kívül hagyja a NoData szeleteket.</li></ul>",
	"@@Interpolate-Raster-By-Dimension_interpolationmethod_tag0@@": "<p>Ezzel adható meg a raszter interpolálásához használtmódszer.</p><ul><li><strong>Lineáris</strong>: a kimenet interpolálása lineárisan, a szomszádos szeletekkel történik. Ez az alapértelmezés.</li><li><strong>Legközelebbi szomszéd</strong>: az eredmény a legközelebb eső szeletet használja.</li></ul>",
	"@@Interpolate-Raster-By-Dimension_raster_tag0@@": "<p>A bemeneti többdimenziós raszter.</p>",
	"@@Interpolate-Raster-By-Dimension_startofinterval_tag0@@": "<p>Annak az intervallumnak a kezdete, amely az adathalmazon keresztül történő iterációra szolgál.</p><p>Ennek a paraméternek a megadása kötelező, amikor a <strong>Dimenziódefiníció</strong> paraméter beállítása <strong>Intervallum szerint</strong>.</p>",
	"@@Interpolate-Raster-By-Dimension_step_tag0@@": "<p>Az adatok interpolálásához használni kívánt gyakoriság.</p><p>Ennek a paraméternek a megadása kötelező, amikor a<strong>Dimenziódefiníció</strong> paraméter beállítása<strong>Intervallum szerint</strong>.</p>",
	"@@Interpolate-Raster-By-Dimension_targetraster_tag0@@": "<p>A dimenziódefiníció által megadott cél raszter.</p><p>Ennek a paraméternek a megadása kötelező, amikor a<strong>Dimenziódefiníció</strong>paraméter beállítása<strong>Cél raszter szerint</strong>.</p>",
	"@@Interpolate-Raster-By-Dimension_unit_tag0@@": "<p>Az intervallum mértékegysége.</p><p>Ennek a paraméternek a megadása kötelező, amikor a<strong>Dimenziódefiníció</strong>paraméter beállítása<strong>Intervallum szerint</strong>.</p>",
	"@@Interpolate-Raster-By-Dimension_values_tag0@@": "<p>Az elemezni kívánt kiindulási többdimenziós adatok szűrésére szolgáló többdimenziós értékek.</p><p>Ennek a paraméternek a megadása kötelező, amikor a<strong>Dimenziódefiníció</strong>paraméter beállítása<strong>Értékek szerint</strong>.</p>",
	"@@Interpolate-Raster-By-Dimension_variables_tag0@@": "<p>A dimenziódefiníció által interplolált változó vagy változók.</p>",
	"@@Terrain-Flatten_calibrationtype_tag0@@": "<p>Meghatározza, hogy a kimenetet a <strong>Sigma nought</strong> vagy a <strong>Gamma nought</strong> módszerrel simítják-e.</p><ul><li><strong>Gamma nought</strong>- A béta nought visszaszórás normalizálása a DEM-et lokálisan érintő sík egységnyi területével történik, ami általában a helyi beesési szögként ismert. Ez az alapértelmezett.</li><li><strong>Sigma nought</strong>- A béta nought visszaszórást egy DEM segítségével normalizáljuk a terület kiszámításához.</li></ul>",
	"@@Terrain-Flatten_dem_tag0@@": "<p>A bemeneti DEM.</p><p>A DEM-et a helyi megvilágított terület becslésére használják.</p>",
	"@@Terrain-Flatten_geoid_tag0@@": "<p>Meghatározza, hogy a bemeneti DEM függőleges vonatkoztatási rendszere ellipszoid magasságúvá alakuljon-e át. A legtöbb magassági adatkészletet a tengerszint ortometrikus magasságára vonatkoztatják, így ezekben az esetekben korrekcióra van szükség az ellipszoidos magasságra való átváltáshoz.</p><ul><li>Bejelölve - Az ortometrikus magasság ellipszoidos magasságra való átváltásához geoidkorrekciót kell végrehajtani (az EGM96 geoid alapján). Ez az alapértelmezett.</li><li>Nincs bejelölve--Nem történik geoidkorrekció. Ezt az opciót csak akkor használja, ha a DEM ellipszoid magasságban van kifejezve.</li></ul>",
	"@@Terrain-Flatten_raster_tag0@@": "<p>A bemeneti radaradatok.</p><p>Ezt a rasztert először radiometrikusan kalibrálni kell béta nullára.</p>",
	"@@Create-Color-Composite_blueexpression_tag0@@": "<p>A harmadik sávhoz rendelt számítás.</p><p>A sáv neve, a sáv azonosítója vagy a sávokat használó algebrai kifejezés.</p><p>A támogatott operátorok unárisak: plusz (+), mínusz (-), szorzat (*) és osztás (/).</p>",
	"@@Create-Color-Composite_greenexpression_tag0@@": "<p>A második sávhoz rendelt számítás.</p><p>A sáv neve, a sáv azonosítója vagy a sávokat használó algebrai kifejezés.</p><p>A támogatott operátorok unárisak: plusz (+), mínusz (-), szorzat (*) és osztás (/).</p>",
	"@@Create-Color-Composite_inputraster_tag0@@": "<p>A bemeneti többsávos raszteres adatok.</p>",
	"@@Create-Color-Composite_method_tag0@@": "<p>Megadja a sávok kinyerésére használt módszert.</p><ul><li>Sávnevek - Az elektromágneses spektrum hullámhosszintervallumát (például vörös, közeli infravörös vagy termikus infravörös) vagy a polarizációt (például VH, VV, HH vagy HV) jelölő sávnevet kell használni. Ez az alapértelmezett.</li><li>Sáv azonosító - A sáv számát (például B1, B2 vagy B3) fogja használni.</li></ul>",
	"@@Create-Color-Composite_redexpression_tag0@@": "<p>Az első sávhoz rendelt számítás.</p><p>A sáv neve, a sáv azonosítója vagy a sávokat használó algebrai kifejezés.</p><p>A támogatott operátorok unárisak: plusz (+), mínusz (-), szorzat (*) és osztás (/).</p>",
	"@@Surface-Parameters_localsurfacetype_tag0@@": "<p>Válassza ki a célcella köré illeszteni kívánt felszínfüggvény típusát.</p><ul><li>Kvadratikus – kvadratikus felszínfüggvény lesz a környező cellákra illesztve. Ez az alapértelmezett típus.</li><li>Bikvadratikus – bikvadratikus felszínfüggvény lesz a környező cellákra illesztve.</li></ul>",
	"@@Surface-Parameters_neighborhooddistance_tag0@@": "<p>A kimenet számítása a célcella középpontjától mért ezen távolságon történik. Meghatározza a szomszédság méretét. Az alapértelmezett érték a bemeneti raszter cellamérete, ami 3x3-as szomszédságot eredményez.</p>",
	"@@Surface-Parameters_outputslopemeasurement_tag0@@": "<p>A kimeneti lejtőraszterhez használt mértékegység (fok vagy százalék). Ez a paraméter csak akkor aktív, amikor a<strong>paraméter típusa</strong>a<strong>lejtő</strong>.</p><ul><li>Fok – a lejtés számítása fokokban történik. Ez az alapértelmezett.</li><li>Százalékos emelkedés – a lejtés számítása százalékos emelkedésként vagy százalékos lejtésként történik.</li></ul>",
	"@@Surface-Parameters_parametertype_tag0@@": "<p>A kimeneti felszín számított paramétertípusát határozza meg.</p><ul><li>Lejtés – a magasságban bekövetkező változás mértékét számítja. Ez az alapértelmezett.</li><li>Kitettség – a változás maximális mértékének lejtő felőli irányát számítja minden egyes cellánál.</li><li>Átlagos görbület – a felszín teljes görbületét méri. A számítása a minimális és maximális görbület átlagaként történik. Ez a görbület a felszín belső konvexitását vagy konkavitását írja le a gravitációs hatás irányától függetlenül.</li><li>Tangenciális (normál kontúrú) görbület – a lejtés vonalára merőleges, a szintvonal érintőirányú geometriai normál görbületét méri. Ezt a görbületet jellemzően az áramlás topográfiai konvergenciájának vagy divergenciájának jellemzésére használják a felszín mentén.</li><li>Profilgörbület (normál lejtésvonal) – a geometriai normál görbületet méri a lejtésvonal mentén. Ezt a görbületet jellemzően a felszínen lefolyó áramlás gyorsulásának vagy lassulásának jellemzésére használják.</li><li>Tervgörbület (előre jelzett kontúr) – a szintvonalak mentén méri a görbületet.</li><li>Kontúr geodéziai torziója – a lejtőszög szintvonalak mentén történő változásának a mértékét méri.</li><li>Gauss-görbület – a felszín teljes görbületét méri. Számítása a minimális és maximális görbület szorzataként történik.</li><li>Casorati-görbület – a felszín általános görbületét méri. Nulla vagy bármilyen pozitív szám lehet.</li></ul>",
	"@@Surface-Parameters_projectgeodesicazimuths_tag0@@": "<p>Meghatározza, hogy szükséges-e geodéziai azimutok előrejelzése a kimeneti térbeli referencia által okozott szögtorzulás korrigálásához. Ez a paraméter csak akkor aktív, amikor a<strong>paraméter típusa</strong>a<strong>kitettség</strong>.</p><ul><li>Nincs bejelölve – nem lesznek előre jelezve geodéziai azimutok. Ez az alapértelmezett.</li><li>Bejelölve – a geodéziai azimutok előre lesznek jelezve.</li></ul>",
	"@@Surface-Parameters_raster_tag0@@": "<p>A bemeneti felszínraszter. Lehet integer- vagy lebegőpontos raszter.</p>",
	"@@Surface-Parameters_useadaptiveneighborhood_tag0@@": "<p>Megadható, hogy a szomszédság távolsága változzon-e a táj változásával (adaptív). A maximális távolságot a szomszédság távolsága határozza meg. A minimális távolság a bemeneti raszter cellamérete.</p><ul><li>Nincs bejelölve – minden helyszínen egyetlen (rögzített) szomszédságtávolság lesz használva. Ez az alapértelmezett.</li><li>Bejelölve – minden helyszínen adaptív szomszédságtávolság lesz használva.</li></ul>",
	"@@Surface-Parameters_useequatorialaspect_tag0@@": "<p>Megadható, hogy a kitettség mérése az egyenlítőn elhelyezkedő ponttól vagy az északi sarktól legyen-e mérve. Ez a paraméter csak akkor aktív, amikor a<strong>paraméter típusa</strong>a<strong>kitettség</strong>.</p><ul><li>Nincs bejelölve – a kitettséget az északi sarktól méri. Ez az alapértelmezett.</li><li>Bejelölve – a kitettséget az egyenlítőn elhelyezkedő ponttól méri.</li></ul>",
	"@@Surface-Parameters_zunit_tag0@@": "<p>A függőleges z-értékek lineáris egysége.</p><p>Egy függőleges vonatkoztatási rendszer határozza meg, ha létezik ilyen. Ha nem létezik függőleges vonatkoztatási rendszer, a z-egységet a mértékegységek listájáról kell meghatározni a helyes geodéziai mérés biztosításához.</p><ul><li>Hüvelyk – a lineáris egység a hüvelyk lesz.</li><li>Láb – a lineáris egység a láb lesz.</li><li>Yard – a lineáris egység a yard lesz.</li><li>Amerikai mérföld – a lineáris egység az amerikai mérföld lesz.</li><li>Tengeri mérföld – a lineáris egység a tengeri mérföld lesz.</li><li>Milliméter – a lineáris egység a milliméter lesz.</li><li>Centiméter – a lineáris egység a centiméter lesz.</li><li>Méter – a lineáris egység a méter lesz. Ez az alapértelmezett.</li><li>Kilométer – a lineáris egység a kilométer lesz.</li><li>Deciméter – a lineáris egység a deciméter lesz.</li></ul>",
	"@@Surface-Parameters_analysismask_tag0@@": "<p>Az azokat a helyeket meghatározó raszter, ahol az elemzésre sor kerül.</p><p>A raszter lehet egész vagy lebegőpontos típusú.</p><p>A maszkot minden érvényes értékkel rendelkező cella, beleértve a nullát is, alkotja. Azok a cellák, amelyek a maszk bemenetén NoData értékűek, a kimeneten is NoData értékűek lesznek.</p>",
	"@@Geometric-Median_cellsizetype_tag0@@": "<p>Válassza ki, hogy melyik cellaméretet szeretné használni a kimeneti raszterben. Ha mindegyik bemeneti cellaméret azonos, mindegyik lehetőség ugyanarra az eredményre vezet.</p><ul><li>Első - A bemeneti raszterek első cellaméretének használata.</li><li>Minimum - Az összes bemeneti raszter legkisebb cellaméretének használata.</li><li>Maximum - Az összes bemeneti raszter legnagyobb cellaméretének használata. Ez az alapértelmezés.</li><li>Átlag - Az összes bemeneti raszter átlagos cellaméretének használata.</li><li>Utolsó - A bemeneti raszterek utolsó cellaméretének használata.</li></ul>",
	"@@Geometric-Median_epsilon_tag0@@": "<p>A két egymást követő iteráció közötti konvergenciaértéket adja meg. Ha az epszilon kisebb vagy egyenlő a megadott értékkel, az iteráció leáll, és az utolsó iteráció eredménye kerül felhasználásra.</p>",
	"@@Geometric-Median_extenttype_tag0@@": "<p>Válassza ki a kimeneti raszterben használandó kiterjedést:</p><ul><li><p>Első: az első bemeneti raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.</p></li><li>Metszet: az átfedésben lévő pixelek kiterjedésének használata a feldolgozási kiterjedés meghatározásához. Ez az alapértelmezés.</li><li>Unió - Az összes raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.</li><li>Utolsó - Az utolsó bemeneti raszter kiterjedésének használata a feldolgozási kiterjedés meghatározásához.</li></ul>",
	"@@Geometric-Median_maximumnumberofiterations_tag0@@": "<p>Az elvégzendő iterációk maximális számát adja meg. A számítás ezen érték elérésekor ér véget, az <strong>Epszilon</strong> beállításától függetlenül.</p>",
	"@@Geometric-Median_rasters_tag0@@": "<p>A bemeneti többsávos raszter.</p>",
	"@@Least-Cost-Corridor_inputaccumulativecostdistanceraster1_tag0@@": "<p>Az első forrástól való kumulatív költségtávolságot megjelenítő bemeneti raszter.</p><p>Ennek a <strong>Távolságakkumuláció</strong> vagy a <strong>Távolság-hozzárendelés</strong> függvényből kimenő kumulatív költségtávolságnak kell lennie.</p>",
	"@@Least-Cost-Corridor_inputaccumulativecostdistanceraster2_tag0@@": "<p>A második forrástól való kumulatív költségtávolságot megjelenítő bemeneti raszter.</p><p>Ennek a <strong>Távolságakkumuláció</strong> vagy a <strong>Távolság-hozzárendelés</strong> függvényből kimenő kumulatív költségtávolságnak kell lennie.</p>",
	"@@Least-Cost-Corridor_inputbackdirectionraster1_tag0@@": "<p>A bemeneti visszirányú raszter az első forrásból.</p><p>Ez egy raszteres adatkészlet, amely a legkevesebb költséggel járó útvonal mentén azonosítja a következő cella irányát, visszafelé az első forráshoz. A <strong>Távolságakkumuláció</strong>vagy a <strong>Távolság-hozzárendelés</strong>függvényből származó kimenet.</p>",
	"@@Least-Cost-Corridor_inputbackdirectionraster2_tag0@@": "<p>A bemeneti visszirányú raszter a második forrásból.</p><p>Ez egy raszteres adatkészlet, amely a legkevesebb költséggel járó útvonal mentén azonosítja a következő cella irányát, visszafelé az első forráshoz. A <strong>Távolságakkumuláció</strong>vagy a <strong>Távolság-hozzárendelés</strong>függvényből származó kimenet.</p>",
	"@@Least-Cost-Corridor_threshold_tag0@@": "<p>Százalékos vagy kumulatív költségküszöb, amely meghatározza, hogy egy adott cella szerepel-e a kimeneti vonalmenti raszterben.</p><p>Ha a<strong>Küszöbérték módsze</strong> paraméter a<strong>Legolcsóbb százalékos értéke</strong> értékre van állítva, a megadott érték azt a százalékos növekedést jelzi, amelyet az összesített halmozott költségű távolsági raszterek minimális értékétől kell alkalmazni. Ha a<strong>Küszöbérték módszer</strong>paraméter a<strong>Kumulatív költség</strong>értékre van állítva, az érték azokat a cellákat jelöli, amelyek összesített kumulatív költsége megegyezik a vonalmenti bufferebe bevont értékkel vagy az alatt van.</p><p>Ez a paraméter csak akkor aktív, ha a<strong>Küszöbérték módszer</strong>paraméter a<strong>Legolcsóbb százalékos értéke</strong>vagy a<strong>Kumulatív költség</strong>értékre van állítva.</p>",
	"@@Least-Cost-Corridor_thresholdmethod_tag0@@": "<p>A küszöbérték meghatározásának módját adja meg.</p><p></p><ul><li><strong>Nincs küszöbérték</strong>: a rendszer nem alkalmaz küszöbértéket, és az így kapott vonalmenti buffer a bemeneti raszterek teljes kiterjedését lefedi. Ez az alapértelmezett.</li><li><strong>Legolcsóbb százalékos értéke</strong>: a küszöbérték az összesített kumulatív költségtávolság raszterek minimális értékének százalékában van meghatározva.</li><li><strong>Kumulatív költség</strong>: a küszöbérték a kumulatív költségtávolság mértékegységeiben van meghatározva.</li></ul>"
};
const helpTexts_hu = {
	rfxArgsHelpTexts: rfxArgsHelpTexts
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (helpTexts_hu);


//# sourceMappingURL=help-texts.hu-73a1ac5a.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,