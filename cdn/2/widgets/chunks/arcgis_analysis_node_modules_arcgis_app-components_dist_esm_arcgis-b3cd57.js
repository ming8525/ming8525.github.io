"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_arcgis-b3cd57"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-smart-mapping-age_8.entry.js":
/*!*****************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-smart-mapping-age_8.entry.js ***!
  \*****************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   arcgis_smart_mapping_age: () => (/* binding */ ArcgisSmartMappingAge),
/* harmony export */   arcgis_smart_mapping_classify: () => (/* binding */ ArcgisSmartMappingClassify),
/* harmony export */   arcgis_smart_mapping_divided_by: () => (/* binding */ ArcgisSmartMappingDividedBy),
/* harmony export */   arcgis_smart_mapping_info_popover: () => (/* binding */ ArcgisSmartMappingInfoPopover),
/* harmony export */   arcgis_smart_mapping_panels_size: () => (/* binding */ ArcgisSmartMappingPanelsSize),
/* harmony export */   arcgis_smart_mapping_size_range_slider: () => (/* binding */ ArcgisSmartMappingSizeRangeSlider),
/* harmony export */   arcgis_smart_mapping_size_slider: () => (/* binding */ ArcgisSmartMappingSizeSlider),
/* harmony export */   arcgis_smart_mapping_tile: () => (/* binding */ ArcgisSmartMappingTile)
/* harmony export */ });
/* harmony import */ var _index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-e3bf7da7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-e3bf7da7.js");
/* harmony import */ var _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./raster-unique-value-0976ec7f.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/raster-unique-value-0976ec7f.js");
/* harmony import */ var _date_79c7d93c_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./date-79c7d93c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/date-79c7d93c.js");
/* harmony import */ var _loading_69139907_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./loading-69139907.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loading-69139907.js");
/* harmony import */ var _loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./loadModules-b4ac1247.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-b4ac1247.js");
/* harmony import */ var _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./commonEnums-fcf13661.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/commonEnums-fcf13661.js");
/* harmony import */ var _color_d6da0a9a_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./color-d6da0a9a.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/color-d6da0a9a.js");
/* harmony import */ var _colorSize_ce0ccdeb_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./colorSize-ce0ccdeb.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/colorSize-ce0ccdeb.js");
/* harmony import */ var _typeSize_9d4c5d28_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./typeSize-9d4c5d28.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/typeSize-9d4c5d28.js");
/* harmony import */ var _functional_44de8fcf_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./functional-44de8fcf.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-44de8fcf.js");
/* harmony import */ var _precision_06a73672_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./precision-06a73672.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/precision-06a73672.js");
/* harmony import */ var _symbolStyler_04635b2b_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./symbolStyler-04635b2b.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/symbolStyler-04635b2b.js");
/* harmony import */ var _relationship_b72d7d97_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./relationship-b72d7d97.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/relationship-b72d7d97.js");
/* harmony import */ var _colorSizeUnivariant_d266ac7c_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./colorSizeUnivariant-d266ac7c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/colorSizeUnivariant-d266ac7c.js");
/* harmony import */ var _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./languageUtil-ef0e54b2.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-ef0e54b2.js");
/* harmony import */ var _predominance_a1a2d74d_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./predominance-a1a2d74d.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/predominance-a1a2d74d.js");
/* harmony import */ var _chart_097ec280_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./chart-097ec280.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/chart-097ec280.js");
/* harmony import */ var _popover_721f7ba2_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./popover-721f7ba2.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/popover-721f7ba2.js");
/* harmony import */ var _raster_renderer_a62f152c_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./raster-renderer-a62f152c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/raster-renderer-a62f152c.js");
/* harmony import */ var _locale_050b6db9_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./locale-050b6db9.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-050b6db9.js");
/* harmony import */ var _dom_4d367677_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./dom-4d367677.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-4d367677.js");
/* harmony import */ var _index_05956cab_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./index-05956cab.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-05956cab.js");
/* harmony import */ var _commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./commonFunctions-b0830e9e.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/commonFunctions-b0830e9e.js");
/* harmony import */ var _type_0ace5d2e_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./type-0ace5d2e.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/type-0ace5d2e.js");
/* harmony import */ var _location_e26b539f_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./location-e26b539f.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/location-e26b539f.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */


























const arcgisSmartMappingAgeCss = ".field-select-fixed{background-color:#f6f6f6;padding:6px 6px;justify-content:space-between;align-items:center;color:#333333;margin:0;transition:box-shadow 250ms ease-in-out;box-shadow:0 0 0 1px #e0e0e0;height:auto;line-height:1.25;overflow-wrap:anywhere}.variable-date-date{width:100%}.variable-date-time{width:100%;margin-top:5px}.variable-field-radio{display:flex;justify-content:space-between}.to-flip-wrapper{display:flex;justify-content:space-between}.to-label{display:flex;align-items:center;margin-top:10px}.units-label{margin-top:6px}.to-field{margin-top:-10px}.from-field{margin-top:-8px;margin-bottom:6px}.units-select{margin-bottom:10px}";

const ArcgisSmartMappingAge = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisSmartMappingAgeChange = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingAgeChange", 7);
        this.arcgisSmartMappingAgeError = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingAgeError", 7);
        this.rendererSubtype = undefined;
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    componentWillLoad() {
        const { layer, fields } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const authVisVar = this.rendererSubtype === "color"
            ? (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.p)(renderer, "color")
            : (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.p)(renderer, "size");
        const selectedDateField = fields.filter((field) => field.simpleFieldType === _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.w.DATE &&
            field.layerField.name === authVisVar.field);
        this.restDateFields = fields.filter((field) => field.simpleFieldType === _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.w.DATE && field !== selectedDateField[0]);
        this.flowItemNode = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.F)(this.hostElement, "calcite-flow-item");
    }
    //--------------------------------------------------------------------------
    //
    // Render Methods
    //
    //--------------------------------------------------------------------------
    render() {
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.H, null, this.renderFrom(), this.renderTo(), this.renderUnits()));
    }
    renderFrom() {
        const { layer, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const authVisVar = this.rendererSubtype === "color"
            ? (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.p)(renderer, "color")
            : (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.p)(renderer, "size");
        const { field, startTime } = authVisVar;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.F, null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, strings.age.from), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "from-field" }, field === startTime ? this.rendererStaticField() : this.rendererAgeField())));
    }
    renderTo() {
        const { layer, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const authVisVar = this.rendererSubtype === "color"
            ? (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.p)(renderer, "color")
            : (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.p)(renderer, "size");
        const { field, endTime } = authVisVar;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.F, null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "to-flip-wrapper" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "to-label" }, strings.age.to), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-action", { hasOutline: false, text: strings.age.flip, icon: "arrowUpDown", onClick: () => this.handleFlip() }))), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "to-field" }, field === endTime ? this.rendererStaticField() : this.rendererAgeField())));
    }
    rendererStaticField() {
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const authVisVar = this.rendererSubtype === "color"
            ? (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.p)(renderer, "color")
            : (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.p)(renderer, "size");
        const fieldInfo = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.u)(authVisVar.field);
        return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "field-select-fixed" }, fieldInfo === null || fieldInfo === void 0 ? void 0 : fieldInfo.label);
    }
    rendererAgeField() {
        var _a, _b;
        const { strings, layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const authVisVar = this.rendererSubtype === "color"
            ? (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.p)(renderer, "color")
            : (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.p)(renderer, "size");
        const { field, startTime, endTime } = authVisVar;
        const value = startTime === field ? endTime : startTime;
        const isField = typeof value === "string";
        const alias = ((_a = this.restDateFields[0]) === null || _a === void 0 ? void 0 : _a.layerField.alias) || ((_b = this.restDateFields[0]) === null || _b === void 0 ? void 0 : _b.layerField.name);
        let fieldInfo;
        if (isField) {
            fieldInfo = {
                field: value,
                simpleFieldType: _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.w.DATE
            };
        }
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, this.restDateFields.length ? ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-radio-button-group", { class: "variable-field-radio", name: "variableType", onCalciteRadioButtonGroupChange: (event) => {
                this.handleTypeChange(event.target.selectedItem.value);
            } }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { layout: "inline" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-radio-button", { key: isField ? `age-variable-radio-field-${Math.random()}` : undefined, checked: isField, value: "field" }), strings.age.field), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { layout: "inline" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-radio-button", { key: !isField ? `age-variable-radio-date-${Math.random()}` : undefined, checked: !isField, value: "date" }), strings.age.customDate))) : null, isField ? (this.restDateFields.length > 1 ? ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-attribute-input", { fieldList: this.restDateFields, selectedField: fieldInfo, mode: "simple", hideLabel: true, popoverReferenceElement: this.flowItemNode, onArcgisSmartMappingAttributeInputChange: (event) => {
                if (event.detail) {
                    const newFieldName = event.detail.field;
                    this.createRendererUpdateCall(field === startTime ? { endTime: newFieldName } : { startTime: newFieldName });
                }
            }, ref: (node) => {
                if (node) {
                    this.rendererAgeFieldNode = node;
                }
            } })) : ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "field-select-fixed" }, alias))) : (this.rendererAgeFieldDate())));
    }
    renderUnits() {
        const { layer, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const authVisVar = this.rendererSubtype === "color"
            ? (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.p)(renderer, "color")
            : (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.p)(renderer, "size");
        const { units } = authVisVar;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { class: "units-label" }, strings.age.units, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-select", { class: "units-select", width: "full", label: strings.age.units, onCalciteSelectChange: (event) => this.handleUnitChange(event), value: units, ref: (node) => (this.unitsNode = node) }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-option", { value: "seconds", label: strings.age.seconds, selected: units === "seconds" }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-option", { value: "minutes", label: strings.age.minutes, selected: units === "minutes" }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-option", { value: "hours", label: strings.age.hours, selected: units === "hours" }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-option", { value: "days", label: strings.age.days, selected: units === "days" }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-option", { value: "months", label: strings.age.months, selected: units === "months" }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-option", { value: "years", label: strings.age.years, selected: units === "years" }))));
    }
    rendererAgeFieldDate() {
        const { layer, mapView } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const authVisVar = this.rendererSubtype === "color"
            ? (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.p)(renderer, "color")
            : (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.p)(renderer, "size");
        const { units, field, startTime, endTime } = authVisVar;
        const value = startTime === field ? endTime : startTime;
        const isField = typeof value === "string";
        const dateString = !isField ? (0,_date_79c7d93c_js__WEBPACK_IMPORTED_MODULE_2__.u)(value, mapView.timeZone) : undefined;
        const showTime = ["seconds", "minutes", "hours"].indexOf(units) > -1;
        const timeString = !isField && showTime
            ? (0,_date_79c7d93c_js__WEBPACK_IMPORTED_MODULE_2__.b)(value, mapView.timeZone, units === "seconds")
            : undefined;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.F, null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-input-date-picker", { scale: "s",
            // TODO: use "valueAsDate" instead of "value" once we determine why "onCalciteInputDatePickerChange"
            //       fires too early, causing a panel re-render that does not actually change anything
            // valueAsDate={date}
            value: dateString, class: "variable-date-date", ref: (node) => {
                if (node) {
                    this.datePickerNode = node;
                }
            }, onCalciteInputDatePickerChange: () => this.handleDateChange() }), showTime ? ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-input-time-picker", { key: `${units}-${value}`, step: units === "seconds" ? 1 : 60, scale: "s", value: timeString, class: "variable-date-time", ref: (node) => {
                if (node) {
                    this.timePickerNode = node;
                }
            }, onCalciteInputTimePickerChange: (0,_functional_44de8fcf_js__WEBPACK_IMPORTED_MODULE_9__.d)(() => this.handleTimeChange(), 750) })) : null));
    }
    createRendererUpdateCall(options) {
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const rendererType = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.g)();
        let updateCall;
        if (rendererType === "color-age") {
            updateCall = _color_d6da0a9a_js__WEBPACK_IMPORTED_MODULE_6__.d;
        }
        else if (rendererType === "size-age") {
            updateCall = _colorSize_ce0ccdeb_js__WEBPACK_IMPORTED_MODULE_7__.g;
        }
        else if (rendererType === "color-age-size") {
            updateCall = _colorSize_ce0ccdeb_js__WEBPACK_IMPORTED_MODULE_7__.h;
        }
        else if (rendererType === "color-size-age") {
            updateCall = _colorSize_ce0ccdeb_js__WEBPACK_IMPORTED_MODULE_7__.i;
        }
        else {
            updateCall = _typeSize_9d4c5d28_js__WEBPACK_IMPORTED_MODULE_8__.b;
        }
        (0,_loading_69139907_js__WEBPACK_IMPORTED_MODULE_3__.r)(updateCall(options, this.rendererSubtype), this.flowItemNode).then((result) => {
            (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.e)(result.renderer, layer);
            (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
            (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
            this.arcgisSmartMappingAgeChange.emit();
        }, (error) => {
            // handles resetting Calcite components to their pre-error values
            this.rendererAgeFieldNode && (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.rendererAgeFieldNode);
            const { layer, mapView } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
            const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
            const authVisVar = this.rendererSubtype === "color"
                ? (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.p)(renderer, "color")
                : (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.p)(renderer, "size");
            const { units, field, startTime, endTime } = authVisVar;
            const value = startTime === field ? endTime : startTime;
            const isField = typeof value === "string";
            const showTime = ["seconds", "minutes", "hours"].indexOf(units) > -1;
            const dateString = !isField
                ? (0,_date_79c7d93c_js__WEBPACK_IMPORTED_MODULE_2__.u)(value, mapView.timeZone)
                : undefined;
            const timeString = !isField && showTime
                ? (0,_date_79c7d93c_js__WEBPACK_IMPORTED_MODULE_2__.b)(value, mapView.timeZone, units === "seconds")
                : undefined;
            if (this.datePickerNode) {
                this.datePickerNode.value = dateString;
            }
            if (this.timePickerNode) {
                this.timePickerNode.value = timeString;
            }
            this.unitsNode.value = units;
            (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
            this.arcgisSmartMappingAgeError.emit(error);
        });
    }
    //--------------------------------------------------------------------------
    //
    // Private Methods
    //
    //--------------------------------------------------------------------------
    handleUnitChange(event) {
        const updatedUnits = event.target.selectedOption.value;
        const options = { units: updatedUnits };
        this.createRendererUpdateCall(options);
    }
    handleTypeChange(type) {
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const authVisVar = this.rendererSubtype === "color"
            ? (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.p)(renderer, "color")
            : (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.p)(renderer, "size");
        const { field, startTime } = authVisVar;
        const newType = type === "field" ? this.restDateFields[0].layerField.name : new Date().getTime();
        this.createRendererUpdateCall(field === startTime ? { endTime: newType } : { startTime: newType });
    }
    handleDateChange() {
        var _a;
        const { layer, mapView } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const authVisVar = this.rendererSubtype === "color"
            ? (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.p)(renderer, "color")
            : (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.p)(renderer, "size");
        const dateString = this.datePickerNode.value;
        if (!dateString) {
            return;
        }
        const timeString = ((_a = this.timePickerNode) === null || _a === void 0 ? void 0 : _a.value) || "00:00:00";
        const utcTimestamp = (0,_date_79c7d93c_js__WEBPACK_IMPORTED_MODULE_2__.d)(`${dateString}T${timeString}`, mapView.timeZone);
        const { field, startTime } = authVisVar;
        const options = {};
        if (field === startTime) {
            options.endTime = utcTimestamp;
        }
        else {
            options.startTime = utcTimestamp;
        }
        this.createRendererUpdateCall(options);
    }
    handleTimeChange() {
        const { layer, mapView } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const authVisVar = this.rendererSubtype === "color"
            ? (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.p)(renderer, "color")
            : (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.p)(renderer, "size");
        const { field, startTime } = authVisVar;
        let timeString = this.timePickerNode.value;
        // startTime and endTime are in UTC
        // timeString is in map time
        // date-picker is in map time
        const dateString = this.datePickerNode.value;
        const utcTimestamp = (0,_date_79c7d93c_js__WEBPACK_IMPORTED_MODULE_2__.d)(`${dateString}T${timeString}`, mapView.timeZone);
        const options = {};
        if (field === startTime) {
            options.endTime = utcTimestamp;
        }
        else {
            options.startTime = utcTimestamp;
        }
        this.createRendererUpdateCall(options);
    }
    handleFlip() {
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const authVisVar = this.rendererSubtype === "color"
            ? (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.p)(renderer, "color")
            : (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.p)(renderer, "size");
        const { startTime, endTime } = authVisVar;
        const options = {
            startTime: endTime,
            endTime: startTime
        };
        this.createRendererUpdateCall(options);
        // Workaround for neither button being checked after flip
        this.createRendererUpdateCall(options);
    }
    get hostElement() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisSmartMappingAge.style = arcgisSmartMappingAgeCss;

const arcgisSmartMappingClassifyCss = ".classify-block-section{border-top:1px solid #e0e0e0;overflow-wrap:anywhere}.block-section-padding{padding-top:6px}.symbol-is-white{background-color:#f0f0f0}.hidden{display:none}.label:focus,.symbol:focus{outline:2px solid var(--calcite-color-brand)}.label,.symbol-container{padding-top:5px;padding-bottom:5px}.selected{outline:1px solid var(--calcite-color-brand)}.method-button-content{padding-top:8px}";

const ArcgisSmartMappingClassify = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisSmartMappingClassifyChange = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingClassifyChange", 7);
        this.arcgisSmartMappingClassifyError = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingClassifyError", 7);
        this.inputNodes = [];
        this.labelNodes = [];
        this.symbolNodes = [];
        this.popoversOpen = false;
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    componentWillLoad() {
        this.flowItemNode = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.F)(this.hostElement, "calcite-flow-item");
    }
    //--------------------------------------------------------------------------
    //
    //  Render Methods
    //
    //--------------------------------------------------------------------------
    render() {
        const { strings, layer, mapImageSublayer, supportsArcade } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const colorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)(renderer, "color");
        const sizeVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)(renderer, "size");
        const hasVisVar = colorVisVar || sizeVisVar;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-block-section", { class: "classify-block-section", text: strings.classify.classifyData, open: !hasVisVar, toggleDisplay: mapImageSublayer && !supportsArcade ? "button" : "switch", ref: (node) => {
                this.classifyBlockSectionNode = node;
                if (!mapImageSublayer || supportsArcade) {
                    node.addEventListener("calciteBlockSectionToggle", (event) => {
                        event.stopImmediatePropagation();
                        this.handleClassifyToggle(event);
                    });
                }
            } }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "block-section-padding" }, !hasVisVar && this.renderMethod(), !hasVisVar && this.renderClasses(), !hasVisVar && this.renderStdDev(), !hasVisVar && this.renderRoundClasses(), !hasVisVar && this.renderValues())));
    }
    renderMethod() {
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const rendererType = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.g)();
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-method-button", { key: renderer.authoringInfo.classificationMethod, showStdDev: true, onArcgisSmartMappingMethodButtonBeforeOpen: () => (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.E)(), onArcgisSmartMappingMethodButtonChange: (event) => {
                const node = event.target;
                this.precisionValue = null;
                const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
                if (event.detail === "manual") {
                    const authInfo = renderer.authoringInfo;
                    if (authInfo.classificationMethod === "standard-deviation") {
                        renderer.classBreakInfos.forEach((classBreakInfo, idx) => {
                            const prefix = idx > 0 ? "> " : "";
                            classBreakInfo.label = `${prefix} ${classBreakInfo.minValue.toLocaleString()} - ${classBreakInfo.maxValue.toLocaleString()}`;
                        });
                    }
                    authInfo.classificationMethod = "manual";
                    (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
                    (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
                    setTimeout(() => this.methodButtonNode.setFocus(), 300);
                }
                else {
                    const updateCall = rendererType === "color"
                        ? _color_d6da0a9a_js__WEBPACK_IMPORTED_MODULE_6__.e
                        : _colorSize_ce0ccdeb_js__WEBPACK_IMPORTED_MODULE_7__.k;
                    (0,_loading_69139907_js__WEBPACK_IMPORTED_MODULE_3__.r)(updateCall({ classificationMethod: event.detail }), this.flowItemNode).then((result) => {
                        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.e)(result.renderer, layer);
                        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
                        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
                        this.arcgisSmartMappingClassifyChange.emit();
                        setTimeout(() => this.methodButtonNode.setFocus(), 300);
                    }, (error) => {
                        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(node);
                        this.arcgisSmartMappingClassifyError.emit(error);
                    });
                }
            }, ref: (node) => {
                if (node) {
                    this.methodButtonNode = node;
                }
            } }));
    }
    renderClasses() {
        const { strings, layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const numClasses = renderer.classBreakInfos.length;
        const authInfo = renderer.authoringInfo;
        if (authInfo.classificationMethod === "standard-deviation") {
            return null;
        }
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, strings.classify.classifyClasses, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-input-number", { tabindex: "0", value: `${numClasses}`, min: 1, max: 10, step: 1, scale: "s", onCalciteInputNumberInput: (0,_functional_44de8fcf_js__WEBPACK_IMPORTED_MODULE_9__.d)(() => {
                const value = parseInt(this.classesNode.value);
                if (value === numClasses) {
                    return;
                }
                if (!value || value < this.classesNode.min || value > this.classesNode.max) {
                    this.classesChangeHandle = setTimeout(() => this.handleClassesChange(), 3000);
                }
                else {
                    clearTimeout(this.classesChangeHandle);
                    this.handleClassesChange();
                }
            }, 300), ref: (node) => {
                if (node) {
                    this.classesNode = node;
                }
            } })));
    }
    renderStdDev() {
        const { strings, layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const authInfo = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer).authoringInfo;
        const stddev = authInfo.standardDeviationInterval || 1;
        if (authInfo.classificationMethod !== "standard-deviation") {
            return null;
        }
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, strings.classify.classifyStdDevIntervals, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-select", { width: "full", tabindex: "0", role: "button", label: strings.classify.classifyStdDevIntervals, onCalciteSelectChange: (event) => this.handleStdDevChange(event), value: `${stddev}`, ref: (node) => (this.stdDevSelectNode = node) }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-option", { value: "0.5", label: "0.5", selected: stddev === 0.5 }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-option", { value: "1", label: "1", selected: stddev === 1 }))));
    }
    renderRoundClasses() {
        var _a;
        const { strings, layer, locale } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const authInfo = renderer.authoringInfo;
        if (authInfo.classificationMethod === "standard-deviation") {
            return null;
        }
        const lastPrecision = (0,_precision_06a73672_js__WEBPACK_IMPORTED_MODULE_10__.a)();
        const firstOption = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-option", { value: "select", label: strings.classify.selectAnOption });
        if (!this.precisionValue) {
            this.precisionValue = (_a = lastPrecision.toString().split(".")[1]) === null || _a === void 0 ? void 0 : _a.length;
        }
        const precisionValues = (0,_precision_06a73672_js__WEBPACK_IMPORTED_MODULE_10__.b)(this.precisionValue);
        const options = precisionValues.map((value) => {
            return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-option", { value: `${value}`, label: `${value.toLocaleString(locale, {
                    maximumSignificantDigits: 15
                })}`, disabled: lastPrecision >= value, selected: lastPrecision === value }));
        });
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, strings.classify.classifyRoundClasses, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-select", { width: "full", label: strings.classify.classifyRoundClasses, onCalciteSelectChange: (event) => this.handleRoundClassesChange(event) }, [firstOption, ...options])));
    }
    renderValues() {
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        this.labelNodes = [];
        this.inputNodes = [];
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-list", null, renderer.classBreakInfos
            .map((classBreakInfo, idx) => {
            return this.renderValue(classBreakInfo, idx);
        })
            .reverse()));
    }
    renderValue(classBreakInfo, idx) {
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-list-item", null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "symbol-container", slot: "actions-start" }, this.renderSymbolNode(classBreakInfo, idx)), this.renderTextNode(classBreakInfo, idx)));
    }
    renderSymbolNode(classBreakInfo, idx) {
        const { strings, layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        let symbol = renderer.classBreakInfos[idx].symbol.clone();
        const symbolNodeClasses = {
            "symbol-is-white": (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.aq)(symbol),
            symbol: true
        };
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: symbolNodeClasses, tabindex: "0", "aria-label": strings.classify.accessibility.editSymbolFor.replace("${value}", classBreakInfo.label), "aria-haspopup": "true", ref: (node) => {
                if (node) {
                    this.symbolNodes.unshift(node);
                }
            }, onClick: () => {
                if (this.popoverNode) {
                    this.symbolNodes[this.selectedPopoverIdx].classList.remove("selected");
                    if (this.selectedPopoverIdx === idx) {
                        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.E)();
                        this.popoverNode = null;
                        this.selectedPopoverIdx = null;
                    }
                    else {
                        this.selectedPopoverIdx = idx;
                        this.handleValueSymbolClick(idx);
                    }
                }
                else {
                    this.selectedPopoverIdx = idx;
                    this.handleValueSymbolClick(idx);
                }
            }, onKeyDown: (event) => {
                if (event.key === " " || event.key === "Enter") {
                    event.preventDefault();
                    event.stopPropagation();
                    this.handleValueSymbolClick(idx);
                }
            } }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { ref: (node) => {
                if (node) {
                    this.afterCreateValueSymbol(node, idx);
                }
            } })));
    }
    renderTextNode(classBreakInfo, idx) {
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.F, null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "label", slot: "content", tabindex: "0", ref: (node) => {
                if (node) {
                    this.labelNodes.unshift(node);
                }
            }, "aria-label": strings.classify.accessibility.editLabelFor.replace("${value}", classBreakInfo.label), onClick: (event) => this.handleLabelEdit(idx, event), onKeyDown: (event) => {
                if (event.key === " " || event.key === "Enter") {
                    this.handleLabelEdit(idx, event);
                }
            } }, classBreakInfo.label), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-input", { slot: "content", class: "hidden", scale: "s", tabindex: "0", ref: (node) => {
                if (node) {
                    this.inputNodes.unshift(node);
                }
            }, value: classBreakInfo.label, onCalciteInputChange: (event) => {
                this.inputNodes[idx].classList.add("hidden");
                this.labelNodes[idx].classList.remove("hidden");
                this.handleValueTextChange(idx, event);
            }, onFocusout: (event) => {
                this.inputNodes[idx].classList.add("hidden");
                this.labelNodes[idx].classList.remove("hidden");
                this.handleValueTextChange(idx, event);
            }, onKeyDown: (event) => {
                event.stopPropagation();
                if (event.key === "Escape" || event.key === "Enter") {
                    this.inputNodes[idx].classList.add("hidden");
                    const input = event.currentTarget;
                    input.value = classBreakInfo.label || "";
                    input.disabled = true;
                    this.handleValueTextChange(idx, event);
                    this.labelNodes[idx].classList.remove("hidden");
                    input.disabled = false;
                    setTimeout(() => this.labelNodes[idx].focus(), 300);
                }
            } })));
    }
    //--------------------------------------------------------------------------
    //
    //  Private Methods
    //
    //--------------------------------------------------------------------------
    afterCreateValueSymbol(node, idx) {
        var _a;
        const { layer, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        let symbol = renderer.classBreakInfos[idx].symbol.clone();
        while ((_a = node === null || node === void 0 ? void 0 : node.childNodes) === null || _a === void 0 ? void 0 : _a.length) {
            node.removeChild(node.childNodes[0]);
        }
        const { symbolUtils } = modules;
        if (symbol) {
            symbolUtils
                .renderPreviewHTML(symbol, {
                size: (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ar)(symbol),
                symbolConfig: symbol.type === "cim" && symbol.data.symbol.type === "CIMPolygonSymbol"
                    ? { isSquareFill: true }
                    : undefined
            })
                .then((element) => node === null || node === void 0 ? void 0 : node.appendChild(element));
        }
    }
    handleClassifyToggle(event) {
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const rendererType = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.g)();
        const updateCall = event.currentTarget.open
            ? rendererType === "color"
                ? _color_d6da0a9a_js__WEBPACK_IMPORTED_MODULE_6__.e
                : _colorSize_ce0ccdeb_js__WEBPACK_IMPORTED_MODULE_7__.k
            : rendererType === "color"
                ? _color_d6da0a9a_js__WEBPACK_IMPORTED_MODULE_6__.b
                : _colorSize_ce0ccdeb_js__WEBPACK_IMPORTED_MODULE_7__.f;
        (0,_loading_69139907_js__WEBPACK_IMPORTED_MODULE_3__.r)(updateCall({}), this.flowItemNode).then((result) => {
            (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.e)(result.renderer, layer);
            (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
            (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
            this.arcgisSmartMappingClassifyChange.emit({ closePopovers: true, toggle: true });
        }, (error) => {
            this.classifyBlockSectionNode.open = !this.classifyBlockSectionNode.open;
            this.arcgisSmartMappingClassifyError.emit(error);
        });
    }
    handleClassesChange() {
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const rendererType = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.g)();
        const value = Math.min(Math.max(parseInt(this.classesNode.value), 1), 10) || 5;
        if (`${value}` !== this.classesNode.value) {
            this.classesNode.value = `${value}`;
        }
        const updateCall = rendererType === "color"
            ? _color_d6da0a9a_js__WEBPACK_IMPORTED_MODULE_6__.e
            : _colorSize_ce0ccdeb_js__WEBPACK_IMPORTED_MODULE_7__.k;
        (0,_loading_69139907_js__WEBPACK_IMPORTED_MODULE_3__.r)(updateCall({ numClasses: value }), this.flowItemNode).then((result) => {
            (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.e)(result.renderer, layer);
            (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
            this.arcgisSmartMappingClassifyChange.emit({ classesChange: true });
        }, (error) => {
            const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
            this.classesNode.value = `${renderer.classBreakInfos.length}`;
            this.arcgisSmartMappingClassifyError.emit(error);
        });
    }
    handleStdDevChange(event) {
        const node = event.currentTarget;
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const rendererType = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.g)();
        const updateCall = rendererType === "color"
            ? _color_d6da0a9a_js__WEBPACK_IMPORTED_MODULE_6__.e
            : _colorSize_ce0ccdeb_js__WEBPACK_IMPORTED_MODULE_7__.k;
        (0,_loading_69139907_js__WEBPACK_IMPORTED_MODULE_3__.r)(updateCall({ standardDeviationInterval: parseFloat(node.value) }), this.flowItemNode).then((result) => {
            (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.e)(result.renderer, layer);
            (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
            (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
            this.arcgisSmartMappingClassifyChange.emit();
        }, (error) => {
            const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
            const authInfo = renderer.authoringInfo;
            const stddev = authInfo.standardDeviationInterval || 1;
            this.stdDevSelectNode.value = `${stddev}`;
            (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
            this.arcgisSmartMappingClassifyError.emit(error);
        });
    }
    handleRoundClassesChange(event) {
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const authInfo = renderer.authoringInfo;
        const node = event.currentTarget;
        if (node.value === "select") {
            return;
        }
        (0,_precision_06a73672_js__WEBPACK_IMPORTED_MODULE_10__.u)(parseFloat(node.value));
        authInfo.classificationMethod = "manual";
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
        this.arcgisSmartMappingClassifyChange.emit({ closePopovers: true });
    }
    handleLabelEdit(idx, event) {
        let inputNode = this.inputNodes[idx];
        inputNode.classList.remove("hidden");
        inputNode.setFocus();
        event.target.classList.add("hidden");
    }
    handleValueSymbolClick(idx) {
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.E)();
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const popoverNode = (0,_symbolStyler_04635b2b_js__WEBPACK_IMPORTED_MODULE_11__.c)({
            referenceElement: this.flowItemNode,
            heading: strings.styler.symbolStyle
        });
        popoverNode.addEventListener("arcgisSmartMappingStylerPopoverClose", () => {
            (0,_symbolStyler_04635b2b_js__WEBPACK_IMPORTED_MODULE_11__.r)(popoverNode);
            setTimeout(() => {
                this.symbolNodes[idx].focus();
                this.popoverNode = null;
                this.symbolNodes[idx].classList.remove("selected");
            }, 300);
        });
        popoverNode.addEventListener("arcgisSmartMappingStylerPopoverDisconnected", () => {
            (0,_symbolStyler_04635b2b_js__WEBPACK_IMPORTED_MODULE_11__.r)(popoverNode);
            setTimeout(() => {
                this.popoverNode = null;
                this.symbolNodes[idx].classList.remove("selected");
            }, 300);
        });
        _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s.classedSymbolSelectedIdx = idx;
        (0,_symbolStyler_04635b2b_js__WEBPACK_IMPORTED_MODULE_11__.g)({
            popoverNode: popoverNode,
            onChange: () => {
                (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
                (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
                this.arcgisSmartMappingClassifyChange.emit({ symbolChange: true });
            }
        });
        this.popoverNode = popoverNode;
        this.symbolNodes[idx].classList.add("selected");
    }
    handleValueTextChange(idx, event) {
        const node = event.currentTarget;
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        renderer.classBreakInfos[idx].label = node.value;
        this.labelNodes[idx].textContent = node.value;
        this.inputNodes[idx].value = node.value;
        /* workaround to allow "empty" labels (otherwise, the classify label
        will stay empty but the legend label will assume its default value) */
        if (node.value === "") {
            const classBreak = renderer.classBreakInfos[idx];
            const prefix = idx > 0 ? "> " : "";
            classBreak.label = `${prefix} ${classBreak.minValue.toLocaleString()} - ${classBreak.maxValue.toLocaleString()}`;
            this.labelNodes[idx].textContent = classBreak.label;
            this.inputNodes[idx].value = classBreak.label;
        }
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
    }
    get hostElement() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisSmartMappingClassify.style = arcgisSmartMappingClassifyCss;

const ArcgisSmartMappingDividedBy = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisSmartMappingDividedByChange = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingDividedByChange", 7);
        this.arcgisSmartMappingDividedByError = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingDividedByError", 7);
        this.rendererSubtype = undefined;
        this.normalizationField = undefined;
        this.fieldPos = undefined;
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    componentWillLoad() {
        this.flowItemNode = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.F)(this.hostElement, "calcite-flow-item");
    }
    // --------------------------------------------------------------------------
    //
    //  Render Methods
    //
    //--------------------------------------------------------------------------
    render() {
        const { layer, fields, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const rendererType = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.g)();
        const authInfo = renderer.authoringInfo;
        const fieldInfo = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)(renderer, this.rendererSubtype);
        const isRelationshipPanel = rendererType === "relationship" || this.rendererSubtype === "relationship";
        const currentField = isRelationshipPanel
            ? this.fieldPos === 0
                ? authInfo.field1.field
                : authInfo.field2.field
            : fieldInfo
                ? fieldInfo.field
                : renderer.field;
        const normalizationField = isRelationshipPanel
            ? this.fieldPos === 0
                ? authInfo.field1.normalizationField
                : authInfo.field2.normalizationField
            : fieldInfo
                ? fieldInfo.normalizationField
                : renderer.normalizationField;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-attribute-input", { fieldList: fields.filter((field) => field.layerField.name !== currentField &&
                field.simpleFieldType === _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.w.NUMBER), popoverReferenceElement: this.flowItemNode, label: strings.transparency.dividedBy, mode: "remove", selectedField: normalizationField
                ? {
                    field: normalizationField,
                    simpleFieldType: _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.w.NUMBER
                }
                : null, onArcgisSmartMappingAttributeInputChange: (event) => {
                if (event.detail) {
                    const fieldInfo = event.detail;
                    this.normalize(fieldInfo.field);
                }
                else {
                    this.normalize(null);
                }
            } }));
    }
    // --------------------------------------------------------------------------
    //
    //  Private methods
    //
    // --------------------------------------------------------------------------
    normalize(normalizationField) {
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const rendererType = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.g)();
        const authInfo = renderer.authoringInfo;
        const isUnivariate = (authInfo === null || authInfo === void 0 ? void 0 : authInfo.type) === "univariate-color-size";
        const isClassBreaksColor = (authInfo === null || authInfo === void 0 ? void 0 : authInfo.type) === "class-breaks-color";
        const isClassBreaksSize = (authInfo === null || authInfo === void 0 ? void 0 : authInfo.type) === "class-breaks-size";
        const isRelationshipPanel = rendererType === "relationship" || this.rendererSubtype === "relationship";
        let updateCall;
        if (isClassBreaksColor) {
            updateCall = _color_d6da0a9a_js__WEBPACK_IMPORTED_MODULE_6__.e;
        }
        else if (isClassBreaksSize) {
            updateCall = _colorSize_ce0ccdeb_js__WEBPACK_IMPORTED_MODULE_7__.k;
        }
        else if (isUnivariate) {
            updateCall = _colorSizeUnivariant_d266ac7c_js__WEBPACK_IMPORTED_MODULE_13__.a;
        }
        else if (this.rendererSubtype === "color") {
            updateCall = _color_d6da0a9a_js__WEBPACK_IMPORTED_MODULE_6__.b;
            if (["color-age", "color-age-size"].indexOf(rendererType) > -1) {
                updateCall = _color_d6da0a9a_js__WEBPACK_IMPORTED_MODULE_6__.d;
            }
        }
        else if (this.rendererSubtype === "size") {
            updateCall = _colorSize_ce0ccdeb_js__WEBPACK_IMPORTED_MODULE_7__.f;
            if (["size-age", "color-size-age", "type-size-age"].indexOf(rendererType) > -1) {
                updateCall = _colorSize_ce0ccdeb_js__WEBPACK_IMPORTED_MODULE_7__.g;
            }
        }
        else if (isRelationshipPanel) {
            updateCall = _relationship_b72d7d97_js__WEBPACK_IMPORTED_MODULE_12__.a;
        }
        const options = {};
        if (isRelationshipPanel) {
            this.fieldPos === 0
                ? (options.normalizationField1 = normalizationField)
                : (options.normalizationField2 = normalizationField);
        }
        else {
            options.normalizationField = normalizationField;
        }
        (0,_loading_69139907_js__WEBPACK_IMPORTED_MODULE_3__.r)(updateCall(options, this.rendererSubtype), this.flowItemNode).then((result) => {
            if (isUnivariate || isClassBreaksColor || isClassBreaksSize || isRelationshipPanel) {
                if (rendererType === "relationship-size") {
                    // keep background style
                    result.renderer.backgroundFillSymbol = renderer.backgroundFillSymbol;
                    // keep size variable
                    const sizeVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)(renderer, "size");
                    const sizeAuthVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.p)(renderer, "size");
                    result.renderer.visualVariables = result.renderer.visualVariables || [];
                    result.renderer.visualVariables.push(sizeVisVar);
                    result.renderer.authoringInfo = result.renderer.authoringInfo || {};
                    result.renderer.authoringInfo.visualVariables =
                        result.renderer.authoringInfo.visualVariables || [];
                    result.renderer.authoringInfo.visualVariables.push(sizeAuthVisVar);
                }
                (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.e)(result.renderer, layer);
            }
            else if (this.rendererSubtype === "color") {
                if (["color-size", "color-age-size", "color-size-age"].indexOf(rendererType) > -1) {
                    this.switchOutVisualVariable(result);
                }
                else {
                    (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.e)(result.renderer, layer);
                }
            }
            else if (this.rendererSubtype === "size") {
                if ([
                    "color-size",
                    "color-age-size",
                    "color-size-age",
                    "type-size",
                    "type-size-age",
                    "relationship-size"
                ].indexOf(rendererType) > -1) {
                    this.switchOutVisualVariable(result);
                }
                else {
                    (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.e)(result.renderer, layer);
                }
            }
            (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
            (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
            this.arcgisSmartMappingDividedByChange.emit();
        }, (error) => this.arcgisSmartMappingDividedByError.emit(error));
    }
    switchOutVisualVariable(result) {
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        renderer.visualVariables = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.n)(renderer, this.rendererSubtype) || [];
        const visVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)(result.renderer, this.rendererSubtype);
        renderer.visualVariables.push(visVar);
        renderer.authoringInfo.visualVariables =
            (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.o)(renderer, this.rendererSubtype) || [];
        const authVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.p)(result.renderer, this.rendererSubtype);
        authVisVar && renderer.authoringInfo.visualVariables.push(authVisVar);
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.Q)(renderer);
    }
    get hostElement() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};

const arcgisSmartMappingInfoPopoverCss = ".info{padding:10px;background-color:white}.info-popover{max-width:320px}.info-help{padding-top:10px;justify-content:flex-end;display:flex}.info-help-button{display:flex;flex-flow:row-reverse}";

const ArcgisSmartMappingInfoPopover = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisSmartMappingInfoPopoverClose = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingInfoPopoverClose", 7);
        this.arcgisSmartMappingInfoPopoverDisconnected = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingInfoPopoverDisconnected", 7);
        //--------------------------------------------------------------------------
        //
        //  Private Properties
        //
        //--------------------------------------------------------------------------
        this.documentTabHandler = undefined;
        this.documentClickHandler = undefined;
        this.panelScrollHandler = undefined;
        // --------------------------------------------------------------------------
        //
        //  Private methods
        //
        // --------------------------------------------------------------------------
        this.onOpen = () => { requestAnimationFrame(() => { var _a; return (_a = this.panelNode) === null || _a === void 0 ? void 0 : _a.setFocus(); }); };
        this.props = undefined;
        this.referenceElement = undefined;
        this.open = false;
    }
    //--------------------------------------------------------------------------
    //
    //  public calls
    //
    //--------------------------------------------------------------------------
    async reposition() {
        var _a;
        (_a = this.popoverNode) === null || _a === void 0 ? void 0 : _a.reposition();
    }
    async setFocus() {
        var _a;
        (_a = this.panelNode) === null || _a === void 0 ? void 0 : _a.setFocus();
    }
    async setOpen(open) {
        var _a;
        if (this.popoverNode) {
            this.popoverNode.open = open;
            if (open) {
                (_a = this.panelNode) === null || _a === void 0 ? void 0 : _a.setFocus();
                this.popoverNode.reposition();
            }
        }
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    disconnectedCallback() {
        // in case popover got removed by just removing node from DOM
        this.arcgisSmartMappingInfoPopoverDisconnected.emit();
    }
    // --------------------------------------------------------------------------
    //
    //  Render Methods
    //
    //--------------------------------------------------------------------------
    render() {
        const { props, referenceElement, open } = this;
        const { title, moreInfo, helpId } = props;
        const { config, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const { helpBase, helpMap } = config;
        const header = strings.tile.info.title.replace("${title}", title);
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.H, { class: "js-app-flyout arcgis-smart-mapping-popover" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-popover", { open: open, placement: "auto", offsetSkidding: 5, label: "", referenceElement: referenceElement, class: "info-popover", onCalcitePopoverOpen: this.onOpen, ref: (node) => (this.popoverNode = node) }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-panel", { heading: header, closable: true, ref: (node) => (this.panelNode = node), onCalcitePanelClose: () => {
                this.arcgisSmartMappingInfoPopoverClose.emit();
                // focus on info icon; wait so enter key doesn't re-open it
                setTimeout(() => referenceElement.parentElement.focus(), 300);
            } }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "info" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, moreInfo), helpId && helpMap ? ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "info-help" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { appearance: "solid", label: strings.tile.info.learnMore, class: "info-help-button", slot: "footer", onClick: () => {
                window.open(`${helpBase}${helpMap[helpId]}`, "_blank");
            } }, strings.tile.info.learnMore))) : null)))));
    }
    get hostElement() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisSmartMappingInfoPopover.style = arcgisSmartMappingInfoPopoverCss;

const arcgisSmartMappingPanelsSizeCss = ":host{width:100%}.flow-item{height:100%}.size-block{overflow-x:hidden}.attribute-name{word-break:break-all}.legend-toggle-padding{padding-top:12px;padding-bottom:12px}";

const ArcgisSmartMappingPanelsSize = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisSmartMappingPanelsSizeClose = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingPanelsSizeClose", 7);
        this.arcgisSmartMappingPanelsSizeBackClick = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingPanelsSizeBackClick", 7);
        this.arcgisSmartMappingPanelsSizeError = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingPanelsSizeError", 7);
        this.rangeSliderWatchHandles = [];
        //--------------------------------------------------------------------------
        //
        //  Private methods
        //
        //--------------------------------------------------------------------------
        this.handleDone = () => {
            // keep the current settings on the layer
            this.arcgisSmartMappingPanelsSizeClose.emit("save");
        };
        this.handleCancel = () => {
            const { originalRenderer, originalFeatureReduction } = this;
            (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.j)(originalRenderer, originalFeatureReduction);
            this.arcgisSmartMappingPanelsSizeClose.emit("cancel");
        };
        this.hideTransparency = false;
        this.hideRotation = false;
        this.menuOpen = undefined;
        this.showBackButton = undefined;
        this.beforeBack = undefined;
        this.visualizationOpen = false;
    }
    //--------------------------------------------------------------------------
    //
    //  Public Methods
    //
    //--------------------------------------------------------------------------
    async setFocus() {
        var _a;
        (_a = this.flowItemNode) === null || _a === void 0 ? void 0 : _a.setFocus();
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    async componentWillLoad() {
        this.visualizationOpen = true;
        const { layer, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        // save original renderer
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        this.originalRenderer = renderer.toJSON();
        this.originalFeatureReduction =
            "featureReduction" in layer && layer.featureReduction
                ? modules.esriLang.clone(layer.featureReduction)
                : undefined;
        /* window.onresize = () => {
            // for transparency inputs
            forceUpdate(this.hostElement);
          }; */
    }
    componentDidLoad() {
        requestAnimationFrame(() => { var _a; return (_a = this.flowItemNode) === null || _a === void 0 ? void 0 : _a.setFocus(); });
    }
    //--------------------------------------------------------------------------
    //
    //  Render Methods
    //
    //--------------------------------------------------------------------------
    render() {
        const { layer, hideLayerTitle, isRTL, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.H, { class: "calcite-match-height" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-flow-item", { heading: strings.panels.styleOptions, description: !hideLayerTitle ? layer.title : undefined, class: {
                "flow-item": true,
                [_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_14__.C.rtl]: isRTL
            }, closable: (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.aa)(this.hostElement), menuOpen: this.menuOpen, beforeBack: this.beforeBack,
            // @ts-ignore
            showBackButton: this.showBackButton, onCalciteFlowItemClose: this.handleDone, onCalciteFlowItemBack: () => {
                this.arcgisSmartMappingPanelsSizeBackClick.emit();
            }, ref: (node) => (this.flowItemNode = node) }, this.renderDoneButton(), this.renderCancelButton(), this.renderVisualization(), this.renderTransparency(), this.renderRotation())));
    }
    renderDoneButton() {
        const { layer, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        if (!layer) {
            // loading state of panel doesn't position buttons correctly
            return null;
        }
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { slot: "footer", label: strings.done, onClick: this.handleDone, appearance: "solid", width: "half" }, strings.done));
    }
    renderCancelButton() {
        const { layer, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        if (!layer) {
            // loading state of panel doesn't position buttons correctly
            return null;
        }
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { slot: "footer", label: strings.cancel, onClick: this.handleCancel, appearance: "outline-fill", width: "half" }, strings.cancel));
    }
    renderVisualization() {
        var _a, _b;
        const { visualizationOpen, hideTransparency, hideRotation } = this;
        const { layer, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const rendererType = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.g)();
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const isAgeRenderer = ["size-age", "color-size-age", "type-size-age"].indexOf(rendererType) > -1;
        const isExpressionRenderer = ["chart-size", "predominance-size"].indexOf(rendererType) > -1;
        const sizeVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)(renderer, "size");
        const fieldName = sizeVisVar
            ? sizeVisVar.field
                ? (_a = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.u)(sizeVisVar.field)) === null || _a === void 0 ? void 0 : _a.label
                : sizeVisVar.valueExpressionTitle || strings.expression
            : renderer.field
                ? (_b = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.u)(renderer.field)) === null || _b === void 0 ? void 0 : _b.label
                : renderer.valueExpressionTitle || strings.expression;
        const field = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.u)((sizeVisVar === null || sizeVisVar === void 0 ? void 0 : sizeVisVar.field) || renderer.field);
        const isDate = (field === null || field === void 0 ? void 0 : field.simpleFieldType) === _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.w.DATE;
        const isChart = rendererType === "chart-size";
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-block", { class: "size-block", key: "size-visualization", heading: isAgeRenderer
                ? strings.panels.size.sizeAgeStyle
                : isDate
                    ? strings.panels.size.sizeStyleDate
                    : isChart
                        ? strings.panels.size.sizeStyleChart
                        : strings.panels.size.sizeStyle, collapsible: !hideTransparency || !hideRotation, open: visualizationOpen, onCalciteBlockOpen: () => (this.visualizationOpen = true), onCalciteBlockClose: () => (this.visualizationOpen = false) }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, !isAgeRenderer && !isExpressionRenderer ? ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { class: "attribute-name" }, fieldName)) : null, this.renderAge(), this.renderTheme(), this.renderDividedBy(), this.renderSymbol(), this.renderSizeSlider(), this.renderSizeRange(), this.renderBackgroundStyle(), this.renderDefaultSymbol(), this.renderShowInLegend(), this.renderClassify())));
    }
    renderAge() {
        const rendererType = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.g)();
        const isAgeRenderer = ["size-age", "color-size-age"].indexOf(rendererType) > -1;
        if (!isAgeRenderer) {
            return null;
        }
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-age", { rendererSubtype: "size", onArcgisSmartMappingAgeChange: () => this.sliderNode.updateStatistics(), onArcgisSmartMappingAgeError: (event) => this.arcgisSmartMappingPanelsSizeError.emit(event.detail) }));
    }
    renderTheme() {
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const sizeVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)(renderer, "size");
        if (!sizeVisVar) {
            return null;
        }
        const rendererType = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.g)();
        if (["chart-size", "predominance-size"].indexOf(rendererType) > -1) {
            return null;
        }
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-theme-button", { ref: (node) => (this.themeButtonNode = node), rendererSubtype: "size", onArcgisSmartMappingThemeButtonBeforeOpen: () => (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.E)(), onArcgisSmartMappingThemeButtonChange: (event) => {
                const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
                let updateCall = _colorSize_ce0ccdeb_js__WEBPACK_IMPORTED_MODULE_7__.f;
                if (["size-age", "color-size-age"].indexOf(rendererType) > -1) {
                    updateCall = _colorSize_ce0ccdeb_js__WEBPACK_IMPORTED_MODULE_7__.g;
                }
                (0,_loading_69139907_js__WEBPACK_IMPORTED_MODULE_3__.r)(updateCall({
                    theme: event.detail,
                    discardMinMax: true
                }), this.flowItemNode).then((result) => {
                    renderer.visualVariables = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.n)(renderer, "size") || [];
                    renderer.visualVariables.push((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)(result.renderer, "size"));
                    renderer.authoringInfo.visualVariables = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.o)(renderer, "size") || [];
                    renderer.authoringInfo.visualVariables.push((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.p)(result.renderer, "size"));
                    (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
                    (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
                    this.themeButtonNode && (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.themeButtonNode);
                    if (this.sliderNode) {
                        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.sliderNode);
                        this.sliderNode.updateStatistics();
                    }
                }, (error) => {
                    (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.themeButtonNode);
                    this.arcgisSmartMappingPanelsSizeError.emit(error);
                });
            } }));
    }
    renderDividedBy() {
        const { layer, fields } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const rendererType = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.g)();
        const isAgeRenderer = ["size-age", "color-size-age"].indexOf(rendererType) > -1;
        if (isAgeRenderer) {
            return null;
        }
        const counts = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.I)(fields);
        if (counts.number < 2) {
            return null;
        }
        const sizeVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)(renderer, "size");
        if (sizeVisVar) {
            const field = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.u)(sizeVisVar.field);
            const fieldInfo = {
                field: sizeVisVar.field,
                expression: sizeVisVar.valueExpression,
                expressionTitle: sizeVisVar.valueExpressionTitle,
                simpleFieldType: field ? field.simpleFieldType : _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.w.NUMBER
            };
            if (fieldInfo.expression || fieldInfo.simpleFieldType !== _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.w.NUMBER) {
                return null;
            }
        }
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-divided-by", { rendererSubtype: "size", normalizationField: sizeVisVar ? sizeVisVar.normalizationField : renderer.normalizationField, onArcgisSmartMappingDividedByChange: () => {
                (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
                this.sliderNode.updateStatistics();
                this.classifyNode && (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.classifyNode);
            }, onArcgisSmartMappingDividedByError: (event) => this.arcgisSmartMappingPanelsSizeError.emit(event.detail) }));
    }
    renderSymbol() {
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        if (renderer.type === "pie-chart") {
            return null;
        }
        const symbol = this.getSymbol();
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-symbol-button", { symbol: symbol, type: "size", ref: (node) => {
                if (node) {
                    this.symbolButtonNode = node;
                }
            }, onArcgisSmartMappingSymbolButtonSymbolChange: () => {
                (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
                this.sliderNode && (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.sliderNode);
                this.classifyNode && (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.classifyNode);
                this.rotationNode && (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.rotationNode);
            } }));
    }
    renderSizeSlider() {
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-size-slider", { ref: (node) => {
                if (node) {
                    this.sliderNode = node;
                }
            }, onArcgisSmartMappingSizeSliderChange: () => {
                (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
                this.sliderNode && (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.sliderNode);
                this.classifyNode && (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.classifyNode);
            }, onArcgisSmartMappingSizeSliderError: (event) => this.arcgisSmartMappingPanelsSizeError.emit(event.detail) }));
    }
    renderSizeRange() {
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-size-range-slider", { onArcgisSmartMappingSizeRangeSliderError: (event) => this.arcgisSmartMappingPanelsSizeError.emit(event.detail) }));
    }
    renderBackgroundStyle() {
        const { mapImageSublayer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const rendererType = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.g)();
        if (mapImageSublayer &&
            ["predominance-size", "type-size", "relationship-size"].indexOf(rendererType) > -1) {
            return null;
        }
        return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-background-symbol", null);
    }
    renderDefaultSymbol() {
        const rendererType = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.g)();
        if (["chart", "chart-size"].indexOf(rendererType) > -1) {
            return null;
        }
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-default-symbol", { ref: (node) => {
                if (node) {
                    this.defaultSymbolNode = node;
                }
            }, onArcgisSmartMappingDefaultSymbolBeforeToggle: () => (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.E)(), onArcgisSmartMappingDefaultSymbolChange: () => (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.symbolButtonNode) }));
    }
    renderShowInLegend() {
        const { layer, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const sizeVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)(renderer, "size");
        if (!sizeVisVar) {
            return null;
        }
        const legendOptions = sizeVisVar.legendOptions;
        const isChecked = !legendOptions || legendOptions.showLegend !== false;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { layout: "inline-space-between", class: "legend-toggle-padding" }, strings.panels.size.includeInLegend, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-switch", { scale: "s", checked: isChecked, onCalciteSwitchChange: () => this.handleIncludeInLegendToggle() })));
    }
    renderClassify() {
        const rendererType = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.g)();
        const fieldInfo = this.getFieldInfo();
        const isDateField = fieldInfo.simpleFieldType === _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.w.DATE;
        const isAgeRenderer = ["size-age", "color-size-age", "type-size-age"].indexOf(rendererType) > -1;
        if (rendererType !== "size" || isDateField || isAgeRenderer) {
            return null;
        }
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-classify", { ref: (node) => (this.classifyNode = node), onArcgisSmartMappingClassifyChange: (event) => {
                const instructions = event.detail;
                ((instructions === null || instructions === void 0 ? void 0 : instructions.closePopovers) || (instructions === null || instructions === void 0 ? void 0 : instructions.classesChange)) && (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.E)();
                (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
                this.sliderNode && (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.sliderNode);
                if ((instructions === null || instructions === void 0 ? void 0 : instructions.toggle) ||
                    (!(instructions === null || instructions === void 0 ? void 0 : instructions.symbolChange) && !(instructions === null || instructions === void 0 ? void 0 : instructions.closePopovers))) {
                    this.sliderNode.updateStatistics();
                }
                this.classifyNode && (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.classifyNode);
                this.symbolButtonNode && (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.symbolButtonNode);
                this.defaultSymbolNode && (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.defaultSymbolNode);
            }, onArcgisSmartMappingClassifyError: (event) => this.arcgisSmartMappingPanelsSizeError.emit(event.detail) }));
    }
    renderTransparency() {
        const { hideTransparency } = this;
        if (hideTransparency) {
            return;
        }
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const opacityVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)(renderer, "opacity");
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-transparency", { open: !!opacityVisVar, onArcgisSmartMappingSymbolTransparencyError: ({ detail }) => this.arcgisSmartMappingPanelsSizeError.emit(detail) }));
    }
    renderRotation() {
        const { hideRotation } = this;
        if (hideRotation) {
            return;
        }
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const opacityVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)(renderer, "opacity");
        const rotationVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)(renderer, "rotation");
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-rotation", { open: !opacityVisVar && !!rotationVisVar, ref: (node) => (this.rotationNode = node), onArcgisSmartMappingRotationError: ({ detail }) => this.arcgisSmartMappingPanelsSizeError.emit(detail) }));
    }
    getSymbol() {
        const { layer, mapView, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer).type === "class-breaks"
            ? (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer)
            : (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const infos = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer).type === "class-breaks"
            ? renderer.classBreakInfos
            : renderer.uniqueValueInfos;
        const rendererType = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.g)();
        let symbol;
        if ([
            "color-size",
            "color-age-size",
            "color-size-age",
            "type-size",
            "type-size-age",
            "predominance-size",
            "relationship-size"
        ].indexOf(rendererType) > -1) {
            symbol = infos.length
                ? infos[0].symbol.clone()
                : (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.S)(layer, mapView, rendererType);
            // make the symbol grey like in the legend
            (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.r)(symbol, new modules.esriColor({ r: 149, g: 149, b: 149, a: 1 }));
        }
        else {
            symbol = infos.length
                ? infos[infos.length - 1].symbol.clone()
                : (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.S)(layer, mapView, rendererType);
        }
        return symbol;
    }
    handleIncludeInLegendToggle() {
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const sizeVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)(renderer, "size");
        const legendOptions = sizeVisVar.legendOptions;
        if (legendOptions && legendOptions.showLegend === false) {
            if (legendOptions.title) {
                legendOptions.showLegend = true;
            }
            else {
                sizeVisVar.legendOptions = undefined;
            }
        }
        else {
            sizeVisVar.legendOptions = legendOptions || {};
            sizeVisVar.legendOptions.showLegend = false;
        }
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
    }
    getFieldInfo() {
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const rendererType = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.g)();
        const fieldInfos = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.f)(layer);
        const fieldInfo = ["color-size", "color-age-size", "color-size-age", "type-size", "type-size-age"].indexOf(rendererType) > -1 && fieldInfos.length > 1
            ? fieldInfos[1]
            : rendererType === "relationship-size"
                ? fieldInfos[2]
                : fieldInfos[0];
        return fieldInfo;
    }
    get hostElement() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisSmartMappingPanelsSize.style = arcgisSmartMappingPanelsSizeCss;

const arcgisSmartMappingSizeRangeSliderCss = ".size-range-block{border-bottom:1px solid #e0e0e0}.range-slider{height:40px;background-color:transparent;position:relative;width:95%;margin:15px auto 0 auto}.size-range{display:flex;justify-content:space-between;margin-bottom:15px}.size-range-item{width:48%;display:flex;flex-flow:column;justify-content:space-between}.esri-slider__label{text-decoration:underline}.esri-slider__label:hover{border:1px solid #bbb;background-color:#f3f3f3;text-decoration:none;z-index:1}";

const ArcgisSmartMappingSizeRangeSlider = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisSmartMappingSizeRangeSliderError = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingSizeRangeSliderError", 7);
        this.rangeSliderWatchHandles = [];
    }
    // -------------------------------------------------------------------
    //
    // Lifecycle
    //
    // -------------------------------------------------------------------
    componentDidLoad() {
        const { config } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        this.hostElement.shadowRoot.firstElementChild.insertAdjacentHTML("beforebegin", `<link rel="stylesheet" href="${config.jsapiUrl}/themes/light/main.css" />`);
        this.flowItemNode = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.F)(this.hostElement, "calcite-flow-item");
    }
    // -------------------------------------------------------------------
    //
    //  Render Methods
    //
    // -------------------------------------------------------------------
    render() {
        const { layer, mapImageSublayer, modules, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const authInfo = renderer.authoringInfo;
        const sizeVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)(renderer, "size");
        const isAboveAndBelow = (authInfo === null || authInfo === void 0 ? void 0 : authInfo.univariateTheme) === "above-and-below";
        const isNull = sizeVisVar ? !(0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ac)(sizeVisVar.minSize) : false;
        const isNumber = sizeVisVar ? typeof sizeVisVar.minSize === "number" : false;
        const isAutomatic = !isNull && !isNumber;
        let [lowValue, highValue] = (0,_symbolStyler_04635b2b_js__WEBPACK_IMPORTED_MODULE_11__.h)();
        [lowValue, highValue] = [Math.round(lowValue / 0.75), Math.round(highValue / 0.75)];
        if (lowValue > highValue) {
            [lowValue, highValue] = [highValue, lowValue];
        }
        if (!this.rangeSliderNode) {
            const config = {
                min: Math.max(1, Math.min(1, lowValue - 10)),
                max: Math.min(highValue + 10, 100),
                values: [lowValue, highValue],
                visibleElements: {
                    labels: true
                },
                precision: 0,
                labelInputsEnabled: true,
                labelFormatFunction: (value) => {
                    return value.toFixed(0);
                }
            };
            this.rangeSliderNode = new modules.Slider(config);
        }
        else {
            if (lowValue !== this.rangeSliderNode.values[0] ||
                highValue !== this.rangeSliderNode.values[1] ||
                !(0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ac)(this.rangeSliderNode.values[1])) {
                const config = {
                    min: Math.max(1, Math.min(1, lowValue - 10)),
                    max: Math.min(highValue + 10, 100),
                    values: [lowValue, highValue]
                };
                this.rangeSliderNode.set(config);
            }
        }
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.H, null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "size-range-block" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, strings.sizeRangeSlider.sizeRange), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "range-slider range-slider-bottom-label", ref: (node) => {
                if (node) {
                    this.afterSizeRangeCreate(node);
                }
            } }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { dir: "ltr", class: "size-range" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "size-range-item" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-input-number", { value: `${lowValue}`, min: 1, max: 100, step: 1, scale: "s", suffixText: strings.sizeRangeSlider.px, ref: (node) => {
                if (node) {
                    this.minRangeNode = node;
                }
            }, onCalciteInputNumberInput: () => {
                var _a;
                const values = (_a = this.rangeSliderNode) === null || _a === void 0 ? void 0 : _a.values;
                const newMinimumSize = parseInt(this.minRangeNode.value);
                if (this.minRangeNode.value && newMinimumSize > 0 && newMinimumSize < values[1]) {
                    clearTimeout(this.minWatchHandle);
                    const value = Math.min(newMinimumSize, 100);
                    this.minRangeNode.value = `${value}`;
                    const ptValues = [value * 0.75, values[1] * 0.75];
                    this.rangeSliderNode.values = [parseInt(this.minRangeNode.value), values[1]];
                    this.handleSizeRangeValuesChange(ptValues);
                }
                else {
                    this.minWatchHandle = setTimeout(() => {
                        var _a;
                        const updatedValues = (_a = this.rangeSliderNode) === null || _a === void 0 ? void 0 : _a.values;
                        this.minRangeNode.value = `${updatedValues[0]}`;
                        const ptValues = [updatedValues[0] * 0.75, updatedValues[1] * 0.75];
                        this.handleSizeRangeValuesChange(ptValues);
                    }, 3000);
                }
            }, label: strings.sizeRangeSlider.min })), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "size-range-item" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-input-number", { value: `${highValue}`, min: 1, max: 100, step: 1, scale: "s", suffixText: strings.sizeRangeSlider.px, ref: (node) => {
                if (node) {
                    this.maxRangeNode = node;
                }
            }, onCalciteInputNumberInput: () => {
                var _a;
                const values = (_a = this.rangeSliderNode) === null || _a === void 0 ? void 0 : _a.values;
                const newMaximumSize = parseInt(this.maxRangeNode.value);
                if (this.maxRangeNode.value &&
                    newMaximumSize > values[0] &&
                    newMaximumSize < 101) {
                    clearTimeout(this.maxWatchHandle);
                    const value = Math.min(newMaximumSize, 100);
                    this.maxRangeNode.value = `${value}`;
                    const ptValues = [values[0] * 0.75, value * 0.75];
                    this.rangeSliderNode.values = [values[0], parseInt(this.maxRangeNode.value)];
                    this.handleSizeRangeValuesChange(ptValues);
                }
                else {
                    this.maxWatchHandle = setTimeout(() => {
                        var _a;
                        const updatedValues = (_a = this.rangeSliderNode) === null || _a === void 0 ? void 0 : _a.values;
                        this.maxRangeNode.value = `${updatedValues[1]}`;
                        const ptValues = [updatedValues[0] * 0.75, updatedValues[1] * 0.75];
                        this.handleSizeRangeValuesChange(ptValues);
                    }, 3000);
                }
            }, label: strings.sizeRangeSlider.min }))), sizeVisVar && !isAboveAndBelow && !mapImageSublayer && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { scale: "s", layout: "inline", class: "size-range-bottom-border" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-checkbox", { scale: "s", checked: isAutomatic, onCalciteCheckboxChange: (event) => this.handleSizeRangeChange(event.target.checked ? "automatic" : "fixed"), ref: (node) => (this.adjustSizeNode = node) }), strings.sizeRangeSlider.adjustSizeAutomatically)))));
    }
    // -------------------------------------------------------------------
    //
    //  Private methods
    //
    // -------------------------------------------------------------------
    handleSizeRangeValuesChange(ptValues) {
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const sizeVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)(renderer, "size");
        const classBreakInfos = renderer.classBreakInfos;
        const currentMinSize = sizeVisVar
            ? sizeVisVar.minSize / 0.75
            : classBreakInfos[0].symbol.size / 0.75;
        const currentMaxSize = sizeVisVar
            ? sizeVisVar.maxSize / 0.75
            : classBreakInfos[classBreakInfos.length - 1].symbol.size / 0.75;
        const lowerBound = ptValues[0] / 0.75;
        const upperBound = ptValues[1] / 0.75;
        if (currentMinSize === lowerBound && currentMaxSize === upperBound) {
            return;
        }
        (0,_symbolStyler_04635b2b_js__WEBPACK_IMPORTED_MODULE_11__.s)(ptValues);
        this.maxRangeNode.min = lowerBound + this.maxRangeNode.step;
        this.minRangeNode.max = upperBound - this.minRangeNode.step;
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
    }
    afterSizeRangeCreate(node) {
        if (!this.rangeSliderNode.container) {
            const divNode = document.createElement("div");
            node.append(divNode);
            this.rangeSliderNode.container = divNode;
            this.createRangeSliderChangeEvents();
        }
    }
    createRangeSliderChangeEvents() {
        const { mapView } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        if (!this.rangeSliderNode) {
            return;
        }
        this.rangeSliderNode.on("thumb-change", (sliderNodeInfo) => {
            var _a;
            const values = (_a = this.rangeSliderNode) === null || _a === void 0 ? void 0 : _a.values;
            if (sliderNodeInfo.index === 0) {
                if (values[0] >= values[1]) {
                    values[0] = sliderNodeInfo.oldValue;
                }
            }
            else if (sliderNodeInfo.index === 1) {
                if (values[1] <= values[0]) {
                    values[1] = sliderNodeInfo.oldValue;
                }
            }
            this.minRangeNode.value = `${values[0]}`;
            this.maxRangeNode.value = `${values[1]}`;
            const ptValues = [values[0] * 0.75, values[1] * 0.75];
            this.handleSizeRangeValuesChange(ptValues);
        });
        this.rangeSliderNode.on("thumb-drag", (sliderNodeInfo) => {
            var _a;
            const values = (_a = this.rangeSliderNode) === null || _a === void 0 ? void 0 : _a.values;
            if (sliderNodeInfo.index === 0) {
                if (values[0] >= values[1]) {
                    values[0] = values[0] - 1;
                    return;
                }
            }
            else if (sliderNodeInfo.index === 1) {
                if (values[1] <= values[0]) {
                    values[1] = values[1] + 1;
                    return;
                }
            }
            this.minRangeNode.value = `${values[0]}`;
            this.maxRangeNode.value = `${values[1]}`;
            const ptValues = [values[0] * 0.75, values[1] * 0.75];
            this.handleSizeRangeValuesChange(ptValues);
        });
        this.rangeSliderNode.on("segment-drag", () => {
            var _a;
            const values = (_a = this.rangeSliderNode) === null || _a === void 0 ? void 0 : _a.values;
            this.minRangeNode.value = `${values[0]}`;
            this.maxRangeNode.value = `${values[1]}`;
            const ptValues = [values[0] * 0.75, values[1] * 0.75];
            this.handleSizeRangeValuesChange(ptValues);
        });
        this.rangeSliderWatchHandles.push(mapView.watch("scale", () => {
            var _a;
            let [lowValue, highValue] = (0,_symbolStyler_04635b2b_js__WEBPACK_IMPORTED_MODULE_11__.h)();
            [lowValue, highValue] = [Math.round(lowValue / 0.75), Math.round(highValue / 0.75)];
            (_a = this.rangeSliderNode) === null || _a === void 0 ? void 0 : _a.set({
                values: [lowValue, highValue],
                min: Math.max(1, Math.min(1, lowValue - 10)),
                max: Math.min(highValue + 10, 100)
            });
            this.minRangeNode.value = this.rangeSliderNode.values[0].toString();
            this.maxRangeNode.value = this.rangeSliderNode.values[1].toString();
        }));
    }
    handleSizeRangeChange(type) {
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const sizeVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)(renderer, "size");
        if (type === "fixed") {
            let stops = sizeVisVar.minSize.stops;
            if (!stops) {
                return;
            }
            [sizeVisVar.minSize, sizeVisVar.maxSize] = (0,_symbolStyler_04635b2b_js__WEBPACK_IMPORTED_MODULE_11__.h)();
            (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
            (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
        }
        else {
            const rendererType = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.g)();
            let updateCall = _colorSize_ce0ccdeb_js__WEBPACK_IMPORTED_MODULE_7__.f;
            if (rendererType === "predominance-size") {
                updateCall = _predominance_a1a2d74d_js__WEBPACK_IMPORTED_MODULE_15__.a;
            }
            else if (rendererType === "chart-size") {
                updateCall = _chart_097ec280_js__WEBPACK_IMPORTED_MODULE_16__.a;
            }
            else if (["size-age", "color-size-age", "type-size-age"].indexOf(rendererType) > -1) {
                updateCall = _colorSize_ce0ccdeb_js__WEBPACK_IMPORTED_MODULE_7__.g;
            }
            (0,_loading_69139907_js__WEBPACK_IMPORTED_MODULE_3__.r)(updateCall({ sizeOptimizationEnabled: true }), this.flowItemNode).then((result) => {
                (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.e)(result.renderer, layer);
                (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
                (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
            }, (error) => {
                // handles keeping the "adjust size automatically" button unchecked when renderer re-creation occurs
                this.adjustSizeNode.checked = false;
                this.arcgisSmartMappingSizeRangeSliderError.emit(error);
            });
        }
    }
    get hostElement() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisSmartMappingSizeRangeSlider.style = arcgisSmartMappingSizeRangeSliderCss;

const arcgisSmartMappingSizeSliderCss = ".slider-box{height:320px}.slider-box .esri-size-slider,.slider-box .esri-classed-size-slider{min-width:200px}.slider-box .esri-size-slider .esri-slider .esri-slider__content,.slider-box .esri-classed-size-slider .esri-slider .esri-slider__content{height:175px}.slider-box .esri-size-slider__histogram-container,.slider-box .esri-classed-size-slider__histogram-container{width:85px}.slider-box .esri-size-slider .esri-slider .esri-slider__label,.slider-box .esri-size-slider .esri-slider .esri-slider__min,.slider-box .esri-size-slider .esri-slider .esri-slider__max,.slider-box .esri-classed-size-slider .esri-slider .esri-slider__label,.slider-box .esri-classed-size-slider .esri-slider .esri-slider__min,.slider-box .esri-classed-size-slider .esri-slider .esri-slider__max{text-decoration:underline}.slider-box .esri-size-slider .esri-slider .esri-slider__label:hover,.slider-box .esri-size-slider .esri-slider .esri-slider__min:hover,.slider-box .esri-size-slider .esri-slider .esri-slider__max:hover,.slider-box .esri-classed-size-slider .esri-slider .esri-slider__label:hover,.slider-box .esri-classed-size-slider .esri-slider .esri-slider__min:hover,.slider-box .esri-classed-size-slider .esri-slider .esri-slider__max:hover{border:1px solid #bbb;background-color:#f3f3f3;text-decoration:none;z-index:1}.slider-box-buttons-front{display:flex}";

const ArcgisSmartMappingSizeSlider = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisSmartMappingSizeSliderChange = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingSizeSliderChange", 7);
        this.arcgisSmartMappingSizeSliderError = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingSizeSliderError", 7);
        /**
         * Necessary for tracking stops for non-classed sliders,
         * whose values are updated immediately even given incorrect inputs.
         * Classed sliders do not have this issue, but we handle them
         * identically for logical parity.
         */
        this.currentStopValues = [];
        this.currentBreakValues = [];
        this.zigzagClick = false;
        this.styleSheetStatus = "not-loaded";
        this.histogramStatus = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.b.MISSING;
        this.statisticsStatus = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.b.MISSING;
        this.sliderZoomed = false;
    }
    //--------------------------------------------------------------------------
    //
    //  Public Calls
    //
    //--------------------------------------------------------------------------
    async updateStatistics() {
        var _a;
        this.statisticsStatus = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.b.MISSING;
        this.statistics = null;
        this.histogramStatus = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.b.MISSING;
        this.histogram = null;
        (_a = this.sizeSlider) === null || _a === void 0 ? void 0 : _a.destroy();
        this.sizeSlider = undefined;
        this.sliderZoomed = false;
        this.getStatistics();
    }
    // -------------------------------------------------------------------
    //
    // Lifecycle
    //
    // -------------------------------------------------------------------
    componentWillLoad() {
        this.getStatistics();
    }
    componentDidLoad() {
        this.flowItemNode = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.F)(this.hostElement, "calcite-flow-item");
    }
    // -------------------------------------------------------------------
    //
    //  Render Methods
    //
    // -------------------------------------------------------------------
    render() {
        const { config } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.H, null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("link", { rel: "stylesheet", href: `${config.jsapiUrl}/themes/light/main.css`, onLoad: () => {
                this.styleSheetStatus = "loaded";
                (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
            }, onError: () => {
                this.styleSheetStatus = "failed";
                (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
            } }), this.styleSheetStatus === "loaded"
            ? this.renderSizeSlider()
            : this.styleSheetStatus === "not-loaded"
                ? this.renderSizeSliderLoading()
                : null));
    }
    renderSizeSlider() {
        const { statisticsStatus, histogramStatus, sliderZoomed } = this;
        const { layer, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const sizeVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)(renderer, "size");
        if (statisticsStatus === _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.b.FAILED ||
            statisticsStatus === _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.b.MISSING ||
            (sizeVisVar && sizeVisVar.stops && sizeVisVar.stops.length === 1) ||
            (!sizeVisVar && renderer.classBreakInfos.length === 1)) {
            if (this.sizeSlider) {
                this.sizeSlider.destroy();
                this.sizeSlider = undefined;
            }
        }
        else if (statisticsStatus === _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.b.IN_PROGRESS ||
            (histogramStatus === _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.b.IN_PROGRESS && !this.sizeSlider)) {
            return this.renderSizeSliderLoading();
        }
        else {
            const ok = this.prepareSizeSlider();
            let disableZoomButton = false;
            if (sizeVisVar && !sliderZoomed) {
                const sizeVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)(renderer, "size");
                const authSizeVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.p)(renderer, "size");
                const zoomOptions = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.aC)([{ value: sizeVisVar.minDataValue }, { value: sizeVisVar.maxDataValue }], authSizeVisVar === null || authSizeVisVar === void 0 ? void 0 : authSizeVisVar.minSliderValue, authSizeVisVar === null || authSizeVisVar === void 0 ? void 0 : authSizeVisVar.maxSliderValue);
                if ((zoomOptions === null || zoomOptions === void 0 ? void 0 : zoomOptions.minMaxSame) ||
                    (!(0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ac)(zoomOptions === null || zoomOptions === void 0 ? void 0 : zoomOptions.min) && !(0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ac)(zoomOptions === null || zoomOptions === void 0 ? void 0 : zoomOptions.max))) {
                    disableZoomButton = true;
                    if (this.zoomButtonNode) {
                        this.zoomButtonNode.disabled = true;
                    }
                }
            }
            if (sizeVisVar) {
                this.currentStopValues = [sizeVisVar.minDataValue, sizeVisVar.maxDataValue];
            }
            else {
                this.currentBreakValues = renderer.classBreakInfos.map((classBreakInfo) => ({
                    min: classBreakInfo.minValue,
                    max: classBreakInfo.maxValue
                }));
            }
            if (ok || this.sizeSlider) {
                return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "slider-box" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, strings.panels.size.dataRange), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "slider-box-buttons-front" }, this.renderInvertButton(), sizeVisVar && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.F, null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, "\u00A0"), this.renderZoomButton(disableZoomButton), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, "\u00A0"), this.renderResetButton()))), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { ref: (node) => {
                        if (node) {
                            this.afterSizeSliderCreate(node);
                        }
                    } })));
            }
            else {
                return this.renderSizeSliderLoading();
            }
        }
    }
    renderSizeSliderLoading() {
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "slider-box" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-loader", { label: strings.loading })));
    }
    renderInvertButton() {
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-action", { text: strings.panels.size.invertSlider, icon: "arrowUpDown", onClick: () => this.handleInvertSlider() }));
    }
    renderZoomButton(disableZoomButton) {
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const { sliderZoomed } = this;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-action", { text: strings.panels.size.zoomSlider, icon: sliderZoomed ? "magnifyingGlassMinus" : "magnifyingGlassPlus", disabled: disableZoomButton, onClick: () => this.handleZoomSlider(), ref: (node) => (this.zoomButtonNode = node) }));
    }
    renderResetButton() {
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-action", { text: strings.panels.size.resetSlider, icon: "undo", onClick: () => this.handleResetSlider() }));
    }
    // -------------------------------------------------------------------
    //
    //  Private methods
    //
    // -------------------------------------------------------------------
    prepareSizeSlider() {
        var _a, _b;
        const { statistics, histogram, histogramStatus, sliderZoomed } = this;
        const { layer, mapView, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const rendererType = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.g)();
        const isAgeRenderer = ["size-age", "color-size-age", "type-size-age"].indexOf(rendererType) > -1;
        const infos = renderer.type === "class-breaks" ? renderer.classBreakInfos : renderer.uniqueValueInfos;
        const fieldInfo = this.getFieldInfo();
        const isDateField = fieldInfo.simpleFieldType === _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.w.DATE;
        const sizeVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)(renderer, "size");
        const authSizeVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.p)(renderer, "size");
        const fillColor = [
            "color-size",
            "color-age-size",
            "color-size-age",
            "type-size",
            "type-size-age",
            "predominance-size",
            "chart-size",
            "relationship-size"
        ].indexOf(rendererType) === -1
            ? (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.t)(infos[infos.length - 1].symbol)
            : null;
        let min, max;
        if (authSizeVisVar) {
            min = authSizeVisVar === null || authSizeVisVar === void 0 ? void 0 : authSizeVisVar.minSliderValue;
            max = authSizeVisVar === null || authSizeVisVar === void 0 ? void 0 : authSizeVisVar.maxSliderValue;
        }
        else {
            min = infos[0].minValue;
            max = infos[infos.length - 1].maxValue;
        }
        ({ min, max } = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ad)({ min, max }));
        if (histogramStatus === _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.b.IN_PROGRESS) {
            return false;
        }
        if (!this.sizeSlider ||
            (sizeVisVar && this.sizeSlider.breaks) ||
            (!sizeVisVar && this.sizeSlider.stops)) {
            (_a = this.sizeSlider) === null || _a === void 0 ? void 0 : _a.destroy();
            const config = {
                histogramConfig: {
                    bins: histogram === null || histogram === void 0 ? void 0 : histogram.bins,
                    average: Math.round(statistics.avg * 10) / 10,
                    standardDeviation: statistics.stddev,
                    standardDeviationCount: 1
                },
                min: min !== null && min !== void 0 ? min : statistics.min,
                max: max !== null && max !== void 0 ? max : statistics.max,
                style: fillColor
                    ? {
                        trackFillColor: fillColor ? fillColor : null
                    }
                    : null
            };
            if (sizeVisVar) {
                if (isDateField && !isAgeRenderer) {
                    config.hasTimeData = true;
                    (0,_date_79c7d93c_js__WEBPACK_IMPORTED_MODULE_2__.a)(config, mapView.timeZone);
                }
                config.stops = (0,_colorSize_ce0ccdeb_js__WEBPACK_IMPORTED_MODULE_7__.l)();
                config.precision = (0,_precision_06a73672_js__WEBPACK_IMPORTED_MODULE_10__.g)(config.stops);
                this.sizeSlider = new modules.SizeSlider(config);
            }
            else {
                const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
                config.histogramConfig.min = renderer.classBreakInfos[0].minValue;
                config.histogramConfig.max =
                    renderer.classBreakInfos[renderer.classBreakInfos.length - 1].maxValue;
                this.sliderZoomed = false;
                config.breaks = (0,_colorSize_ce0ccdeb_js__WEBPACK_IMPORTED_MODULE_7__.m)();
                config.precision = (0,_precision_06a73672_js__WEBPACK_IMPORTED_MODULE_10__.g)(config.breaks);
                this.sizeSlider = new modules.ClassedSizeSlider(config);
            }
            this.createSizeSliderChangeEvents();
        }
        else {
            const slider = this.sizeSlider;
            if (((_b = slider.slider) === null || _b === void 0 ? void 0 : _b.state) === "dragging") {
                return true;
            }
            const config = {
                histogramConfig: {
                    bins: histogram === null || histogram === void 0 ? void 0 : histogram.bins,
                    average: Math.round(statistics.avg * 10) / 10,
                    standardDeviation: statistics.stddev,
                    standardDeviationCount: 1
                },
                min: min !== null && min !== void 0 ? min : statistics.min,
                max: max !== null && max !== void 0 ? max : statistics.max,
                style: fillColor
                    ? {
                        trackFillColor: fillColor ? fillColor : null
                    }
                    : null
            };
            if (sizeVisVar) {
                config.stops = (0,_colorSize_ce0ccdeb_js__WEBPACK_IMPORTED_MODULE_7__.l)();
                config.precision = (0,_precision_06a73672_js__WEBPACK_IMPORTED_MODULE_10__.g)(config.stops);
                config.hasTimeData = isDateField && !isAgeRenderer;
                if (isDateField && !isAgeRenderer) {
                    (0,_date_79c7d93c_js__WEBPACK_IMPORTED_MODULE_2__.a)(config, mapView.timeZone);
                }
                if (sliderZoomed) {
                    /**
                     * clicking a zigzag already updates the internal slider zoomOptions;
                     * setting them here again would incorrectly override a user's decision
                     * to manually zoom out one side of the slider.
                     */
                    if (!this.zigzagClick) {
                        config.zoomOptions = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.aC)([{ value: sizeVisVar.minDataValue }, { value: sizeVisVar.maxDataValue }], authSizeVisVar === null || authSizeVisVar === void 0 ? void 0 : authSizeVisVar.minSliderValue, authSizeVisVar === null || authSizeVisVar === void 0 ? void 0 : authSizeVisVar.maxSliderValue);
                    }
                }
                else {
                    config.zoomOptions = null;
                }
            }
            else {
                config.breaks = (0,_colorSize_ce0ccdeb_js__WEBPACK_IMPORTED_MODULE_7__.m)();
                config.precision = (0,_precision_06a73672_js__WEBPACK_IMPORTED_MODULE_10__.g)(config.breaks);
            }
            if (this.sliderZoomed && this.adjustedZoomOptions && !this.zigzagClick) {
                config.zoomOptions = this.adjustedZoomOptions;
                /**
                 * handles edge cases where the slider is zoomed, handles have been manually modified,
                 * and a user executes a label change. This prevents zoom options from changing and preserves
                 * the histogram display.
                 */
                if (this.zoomAdjustment === "min") {
                    this.sizeSlider.slider.min = config.zoomOptions.min;
                    config.zoomOptions.min = null;
                }
                else {
                    this.sizeSlider.slider.max = config.zoomOptions.max;
                    config.zoomOptions.max = null;
                }
            }
            this.adjustedZoomOptions = null;
            this.zoomAdjustment = null;
            this.sizeSlider.set(config);
            this.zigzagClick = false;
        }
        return (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ac)(this.sizeSlider);
    }
    handleInvertSlider() {
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const sizeVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)(renderer, "size");
        if (sizeVisVar) {
            [sizeVisVar.minSize, sizeVisVar.maxSize] = [sizeVisVar.maxSize, sizeVisVar.minSize];
        }
        else {
            const sizes = renderer.classBreakInfos.map((info) => (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.T)(info.symbol));
            sizes.reverse();
            renderer.classBreakInfos.forEach((info, idx) => {
                const sym = info.symbol;
                (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.U)(sym, sizes[idx]);
            });
        }
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
        this.arcgisSmartMappingSizeSliderChange.emit();
    }
    handleZoomSlider(zoomed) {
        var _a, _b, _c, _d;
        if (this.histogramStatus === _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.b.IN_PROGRESS) {
            return;
        }
        const { statistics } = this;
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        this.sliderZoomed = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ac)(zoomed) ? zoomed : !this.sliderZoomed;
        const sizeVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)(renderer, "size");
        if (!sizeVisVar) {
            this.sliderZoomed = false;
        }
        const normalizationField = sizeVisVar
            ? sizeVisVar.normalizationField
            : renderer.normalizationField;
        const fieldInfo = this.getFieldInfo();
        const authSizeVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.p)(renderer, "size");
        const zoomOptions = this.sliderZoomed
            ? (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.aC)([{ value: sizeVisVar.minDataValue }, { value: sizeVisVar.maxDataValue }], (_a = authSizeVisVar === null || authSizeVisVar === void 0 ? void 0 : authSizeVisVar.minSliderValue) !== null && _a !== void 0 ? _a : statistics.min, (_b = authSizeVisVar === null || authSizeVisVar === void 0 ? void 0 : authSizeVisVar.maxSliderValue) !== null && _b !== void 0 ? _b : statistics.max)
            : null;
        this.getHistogram(fieldInfo, normalizationField, statistics, (zoomOptions && zoomOptions.min) || ((_c = authSizeVisVar === null || authSizeVisVar === void 0 ? void 0 : authSizeVisVar.minSliderValue) !== null && _c !== void 0 ? _c : statistics.min), (zoomOptions && zoomOptions.max) || ((_d = authSizeVisVar === null || authSizeVisVar === void 0 ? void 0 : authSizeVisVar.maxSliderValue) !== null && _d !== void 0 ? _d : statistics.max));
    }
    handleResetSlider() {
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const rendererType = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.g)();
        this.sliderZoomed = false;
        let sizeVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)(renderer, "size");
        const authSizeVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.p)(renderer, "size");
        const theme = authSizeVisVar === null || authSizeVisVar === void 0 ? void 0 : authSizeVisVar.theme;
        const fieldInfo = this.getFieldInfo();
        const normalizationField = sizeVisVar
            ? sizeVisVar.normalizationField
            : renderer.normalizationField;
        let updateCall;
        if (["size", "predominance-size", "relationship-size", "chart-size"].indexOf(rendererType) > -1) {
            updateCall = _colorSize_ce0ccdeb_js__WEBPACK_IMPORTED_MODULE_7__.f;
        }
        else if (rendererType === "size-age") {
            fieldInfo.field = authSizeVisVar.field;
            updateCall = _colorSize_ce0ccdeb_js__WEBPACK_IMPORTED_MODULE_7__.g;
        }
        else if (rendererType === "color-size-age") {
            fieldInfo.field = authSizeVisVar.field;
            updateCall = _colorSize_ce0ccdeb_js__WEBPACK_IMPORTED_MODULE_7__.i;
        }
        else if (rendererType === "color-age-size") {
            updateCall = _colorSize_ce0ccdeb_js__WEBPACK_IMPORTED_MODULE_7__.h;
        }
        else if (rendererType === "color-size") {
            updateCall = _colorSize_ce0ccdeb_js__WEBPACK_IMPORTED_MODULE_7__.j;
        }
        else if (rendererType === "type-size") {
            updateCall = _typeSize_9d4c5d28_js__WEBPACK_IMPORTED_MODULE_8__.d;
        }
        else if (rendererType === "type-size-age") {
            fieldInfo.field = authSizeVisVar.field;
            updateCall = _typeSize_9d4c5d28_js__WEBPACK_IMPORTED_MODULE_8__.b;
        }
        (0,_loading_69139907_js__WEBPACK_IMPORTED_MODULE_3__.r)(updateCall({
            fieldInfos: (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.f)(layer),
            normalizationField: normalizationField,
            sizeOptimizationEnabled: typeof sizeVisVar.minSize === "object",
            noReuse: true,
            theme,
            discardMinMax: true
        }, "size"), this.flowItemNode).then((result) => {
            var _a;
            if (((_a = result.statistics) === null || _a === void 0 ? void 0 : _a.count) === 0) {
                const [defaultMin, defaultMax] = this.getDefaultDataRange(fieldInfo);
                const min = (authSizeVisVar === null || authSizeVisVar === void 0 ? void 0 : authSizeVisVar.minSliderValue) || defaultMin;
                const max = (authSizeVisVar === null || authSizeVisVar === void 0 ? void 0 : authSizeVisVar.maxSliderValue) || defaultMax;
                result.statistics.min = min;
                result.statistics.max = max;
                result.statistics.avg = (max + min) / 2;
                this.statistics = result.statistics;
                this.statisticsStatus = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.b.SUCCESS;
            }
            else if (result.statistics &&
                (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ac)(result.statistics.min) &&
                (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ac)(result.statistics.max) &&
                result.statistics.min <= result.statistics.max) {
                this.statistics = result.statistics;
                this.statisticsStatus = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.b.SUCCESS;
                this.getHistogram(fieldInfo, normalizationField, result.statistics, result.statistics.min, result.statistics.max);
            }
            else {
                this.statisticsStatus = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.b.FAILED;
            }
            authSizeVisVar.minSliderValue = this.statistics.min;
            authSizeVisVar.maxSliderValue = this.statistics.max;
            (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
        }, (error) => this.arcgisSmartMappingSizeSliderError.emit(error));
    }
    afterSizeSliderCreate(node) {
        if (!this.sizeSlider.container) {
            const divNode = document.createElement("div");
            node.append(divNode);
            this.sizeSlider.container = divNode;
        }
    }
    getStatistics() {
        /**
         * Handles the following:
         *  1.) Retrieving statistics on slider load
         *  2.) Retrieving updated statistics after changing age, normalization field, theme, or classify method/number of classes
         */
        var _a;
        const { layer: smLayer, mapView, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        let min;
        let max;
        const sizeVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)(renderer, "size");
        const fieldInfo = this.getFieldInfo();
        const normalizationField = sizeVisVar
            ? sizeVisVar.normalizationField
            : renderer.normalizationField;
        const authSizeVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.p)(renderer, "size");
        min = authSizeVisVar === null || authSizeVisVar === void 0 ? void 0 : authSizeVisVar.minSliderValue;
        max = authSizeVisVar === null || authSizeVisVar === void 0 ? void 0 : authSizeVisVar.maxSliderValue;
        // handles equal interval behavior
        const authInfo = renderer.authoringInfo;
        if ((authInfo === null || authInfo === void 0 ? void 0 : authInfo.classificationMethod) === "equal-interval") {
            const classBreaks = renderer.classBreakInfos;
            min = classBreaks[0].minValue;
            max = classBreaks[classBreaks.length - 1].maxValue;
        }
        this.statisticsStatus = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.b.IN_PROGRESS;
        if (!this.statistics) {
            modules
                .summaryStatistics({
                layer,
                view: mapView,
                field: fieldInfo.field,
                valueExpression: fieldInfo.expression,
                normalizationField,
                forBinning: "featureReduction" in layer && ((_a = layer.featureReduction) === null || _a === void 0 ? void 0 : _a.type) === "binning"
            })
                .then((statistics) => {
                if (statistics.count === 0) {
                    // field has no values
                    // make up some basic statistics so we can show a slider
                    const [defaultMin, defaultMax] = this.getDefaultDataRange(fieldInfo);
                    const min = (authSizeVisVar === null || authSizeVisVar === void 0 ? void 0 : authSizeVisVar.minSliderValue) || defaultMin;
                    const max = (authSizeVisVar === null || authSizeVisVar === void 0 ? void 0 : authSizeVisVar.maxSliderValue) || defaultMax;
                    statistics.min = min;
                    statistics.max = max;
                    statistics.avg = (max + min) / 2;
                    if (!(0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ac)(authSizeVisVar.minSliderValue)) {
                        authSizeVisVar.minSliderValue = min;
                        authSizeVisVar.maxSliderValue = max;
                    }
                }
                else if (!(0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ac)(statistics.avg) ||
                    !(0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ac)(statistics.min) ||
                    !(0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ac)(statistics.max)) {
                    // statistics unusable
                    this.statisticsStatus = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.b.FAILED;
                    return;
                }
                statistics = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ad)(statistics);
                min = min !== null && min !== void 0 ? min : statistics.min;
                max = max !== null && max !== void 0 ? max : statistics.max;
                this.statistics = statistics;
                this.statisticsStatus = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.b.SUCCESS;
                this.getHistogram(fieldInfo, normalizationField, statistics, min, max);
            }, (error) => {
                console.log(error);
                this.statisticsStatus = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.b.FAILED;
            });
        }
    }
    getHistogram(fieldInfo, normalizationField, statistics, min, max) {
        var _a;
        const { layer: smLayer, mapView, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        statistics = statistics || this.statistics;
        if (!statistics || statistics.count === 0) {
            return;
        }
        this.histogramStatus = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.b.IN_PROGRESS;
        modules
            .histogram({
            layer: layer,
            view: mapView,
            field: fieldInfo.field,
            valueExpression: fieldInfo.expression,
            numBins: 50,
            minValue: (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ac)(min) ? min : statistics.min,
            maxValue: (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ac)(max) ? max : statistics.max,
            normalizationField,
            forBinning: "featureReduction" in layer && ((_a = layer.featureReduction) === null || _a === void 0 ? void 0 : _a.type) === "binning"
        })
            .then((histogram) => {
            this.histogram = histogram;
            this.histogramStatus = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.b.SUCCESS;
        }, () => {
            this.histogramStatus = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.b.FAILED;
        });
    }
    onMinMaxChange(min, max, changing) {
        const { statistics } = this;
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const sizeVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)(renderer, "size");
        const authSizeVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.p)(renderer, "size") || {};
        if (!sizeVisVar) {
            let minClassBreak = renderer.classBreakInfos[0];
            let maxClassBreak = renderer.classBreakInfos[renderer.classBreakInfos.length - 1];
            minClassBreak.minValue = min;
            minClassBreak.label = `${minClassBreak.minValue.toLocaleString({
                maximumSignificantDigits: 15
            })} - ${minClassBreak.maxValue.toLocaleString({ maximumSignificantDigits: 15 })}`;
            maxClassBreak.maxValue = max;
            maxClassBreak.label = `${maxClassBreak.minValue.toLocaleString({
                maximumSignificantDigits: 15
            })} - ${maxClassBreak.maxValue.toLocaleString({ maximumSignificantDigits: 15 })}`;
        }
        // update only the label that the user is changing
        changing === "min"
            ? (authSizeVisVar.minSliderValue = min)
            : (authSizeVisVar.maxSliderValue = max);
        // determine if label updates merit zooming or not
        const zoomOptions = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.aC)([{ value: sizeVisVar === null || sizeVisVar === void 0 ? void 0 : sizeVisVar.minDataValue }, { value: sizeVisVar === null || sizeVisVar === void 0 ? void 0 : sizeVisVar.maxDataValue }], authSizeVisVar === null || authSizeVisVar === void 0 ? void 0 : authSizeVisVar.minSliderValue, authSizeVisVar === null || authSizeVisVar === void 0 ? void 0 : authSizeVisVar.maxSliderValue);
        // handles zoom button display for non-classed color sliders
        if (this.zoomButtonNode) {
            if (this.sliderZoomed) {
                this.zoomButtonNode.disabled = false;
            }
            else if (!zoomOptions ||
                zoomOptions.minMaxSame ||
                (!(0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ac)(zoomOptions.min) && !(0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ac)(zoomOptions.max))) {
                this.zoomButtonNode.disabled = true;
            }
            else {
                this.zoomButtonNode.disabled = false;
            }
        }
        // zoom adjustment
        if (this.sliderZoomed) {
            this.adjustedZoomOptions = this.sizeSlider.zoomOptions;
            if (changing === "min") {
                this.adjustedZoomOptions.min = min;
                this.zoomAdjustment = "min";
            }
            else {
                this.adjustedZoomOptions.max = max;
                this.zoomAdjustment = "max";
            }
        }
        const fieldInfo = this.getFieldInfo();
        const normalizationField = sizeVisVar
            ? sizeVisVar.normalizationField
            : renderer.normalizationField;
        this.getHistogram(fieldInfo, normalizationField, statistics, min, max);
        if (min === authSizeVisVar.minSliderValue && max === authSizeVisVar.maxSliderValue) {
            this.sliderZoomed = false;
        }
        renderer.authoringInfo.classificationMethod = "manual";
        this.arcgisSmartMappingSizeSliderChange.emit();
    }
    createSizeSliderChangeEvents() {
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const rendererType = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.g)();
        const sizeVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)(renderer, "size");
        const isAgeRenderer = ["size-age", "color-size-age", "type-size-age"].indexOf(rendererType) > -1;
        const fieldInfo = this.getFieldInfo();
        const isDateField = fieldInfo.simpleFieldType === _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.w.DATE;
        if (!this.sizeSlider) {
            return;
        }
        // handles zigzag click
        this.sizeSlider.watch("zoomOptions", (newValue, oldValue) => {
            if (this.sliderZoomed &&
                (((oldValue === null || oldValue === void 0 ? void 0 : oldValue.min) && !(newValue === null || newValue === void 0 ? void 0 : newValue.min)) || ((oldValue === null || oldValue === void 0 ? void 0 : oldValue.max) && !(newValue === null || newValue === void 0 ? void 0 : newValue.max)))) {
                this.zigzagClick = true;
                this.handleZigzagClick(newValue);
            }
        });
        this.sizeSlider.on("min-change", (info) => {
            if (sizeVisVar) {
                if (info.value > this.currentStopValues[0]) {
                    this.sizeSlider.stops.forEach((stop, idx) => {
                        stop.value = this.currentStopValues[idx];
                    });
                    this.onMinMaxChange(this.currentStopValues[0], this.sizeSlider.slider.max, "min");
                }
                else {
                    this.onMinMaxChange(info.value, this.sizeSlider.slider.max, "min");
                }
            }
            else {
                if (info.value > this.currentBreakValues[0].max) {
                    this.onMinMaxChange(this.currentBreakValues[0].max, this.sizeSlider.slider.max, "min");
                }
                else {
                    this.onMinMaxChange(info.value, this.sizeSlider.slider.max, "min");
                }
            }
        });
        this.sizeSlider.on("max-change", (info) => {
            if (sizeVisVar) {
                if (info.value < this.currentStopValues[this.currentStopValues.length - 1]) {
                    this.sizeSlider.stops.forEach((stop, idx) => {
                        stop.value = this.currentStopValues[idx];
                    });
                    this.onMinMaxChange(this.sizeSlider.slider.min, this.currentStopValues[this.currentStopValues.length - 1], "max");
                }
                else {
                    this.onMinMaxChange(this.sizeSlider.slider.min, info.value, "max");
                }
            }
            else {
                if (info.value < this.currentBreakValues[this.currentBreakValues.length - 1].min) {
                    this.onMinMaxChange(this.sizeSlider.slider.min, this.currentBreakValues[this.currentBreakValues.length - 1].min, "max");
                }
                else {
                    this.onMinMaxChange(this.sizeSlider.slider.min, info.value, "max");
                }
            }
        });
        this.sizeSlider.on("thumb-change", (info) => {
            if (sizeVisVar) {
                const slider = this.sizeSlider;
                const stops = slider.stops;
                if (isDateField && !isAgeRenderer && info.value === 0) {
                    (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
                    return;
                }
                this.updateRendererStops(stops);
            }
            else {
                this.updateRendererBreaks(this.sizeSlider.breaks);
            }
        });
        this.sizeSlider.on("thumb-drag", () => {
            if (sizeVisVar) {
                const stops = this.sizeSlider.stops;
                this.updateRendererStops(stops);
            }
            else {
                this.updateRendererBreaks(this.sizeSlider.breaks);
            }
        });
        this.sizeSlider.on("segment-drag", () => {
            const sizeVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)(renderer, "size");
            if (sizeVisVar) {
                const slider = this.sizeSlider;
                const stops = slider.stops;
                this.updateRendererStops(stops);
            }
        });
    }
    updateRendererStops(stops) {
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const sizeVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)(renderer, "size");
        const authSizeVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.p)(renderer, "size");
        if (sizeVisVar.stops) {
            // TODO JSAPI bug #21896
            if (stops.length === 5) {
                stops[0].label = `< ${stops[0].value}`;
                stops[1].label = `${stops[1].value}`;
                stops[2].label = `${stops[2].value}`;
                stops[3].label = `${stops[3].value}`;
                stops[4].label = `> ${stops[4].value}`;
            }
            sizeVisVar.stops = stops;
        }
        else {
            sizeVisVar.minDataValue = stops[0].value;
            sizeVisVar.maxDataValue = stops[1].value;
        }
        this.currentStopValues = stops.map((stop) => stop.value);
        const zoomOptions = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.aC)([{ value: sizeVisVar.minDataValue }, { value: sizeVisVar.maxDataValue }], authSizeVisVar === null || authSizeVisVar === void 0 ? void 0 : authSizeVisVar.minSliderValue, authSizeVisVar === null || authSizeVisVar === void 0 ? void 0 : authSizeVisVar.maxSliderValue);
        if (this.sliderZoomed) {
            this.zoomButtonNode.disabled = false;
        }
        else if (!zoomOptions ||
            zoomOptions.minMaxSame ||
            (!(0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ac)(zoomOptions.min) && !(0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ac)(zoomOptions.max))) {
            this.zoomButtonNode.disabled = true;
        }
        else {
            this.zoomButtonNode.disabled = false;
        }
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
    }
    updateRendererBreaks(breaks) {
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        renderer.authoringInfo.classificationMethod = "manual";
        renderer.classBreakInfos.forEach((classBreakInfo, idx) => {
            if (classBreakInfo.minValue !== breaks[idx].min ||
                classBreakInfo.maxValue !== breaks[idx].max) {
                classBreakInfo.minValue = breaks[idx].min;
                classBreakInfo.maxValue = breaks[idx].max;
                const prefix = idx > 0 ? "> " : "";
                classBreakInfo.label = `${prefix} ${classBreakInfo.minValue.toLocaleString()} - ${classBreakInfo.maxValue.toLocaleString()}`;
                this.currentBreakValues[idx].min = breaks[idx].min;
                this.currentBreakValues[idx].max = breaks[idx].max;
            }
        });
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
        this.arcgisSmartMappingSizeSliderChange.emit();
    }
    getDefaultDataRange(fieldInfo) {
        if (fieldInfo.simpleFieldType === _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.w.DATE) {
            const year = new Date().getFullYear();
            return [new Date(`1/1/${year}`).getTime(), new Date(`12/31/${year}`).getTime()];
        }
        else {
            return [0, 100];
        }
    }
    getFieldInfo() {
        var _a, _b;
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const rendererType = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.g)();
        const sizeVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)(renderer, "size");
        const fieldInfos = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.f)(layer);
        const fieldInfo = ["color-size", "color-age-size", "color-size-age", "type-size", "type-size-age"].indexOf(rendererType) > -1 && fieldInfos.length > 1
            ? fieldInfos[1]
            : rendererType === "relationship-size"
                ? fieldInfos[2]
                : fieldInfos[0];
        fieldInfo.expression = (_a = sizeVisVar === null || sizeVisVar === void 0 ? void 0 : sizeVisVar.valueExpression) !== null && _a !== void 0 ? _a : null;
        fieldInfo.expressionTitle = (_b = sizeVisVar === null || sizeVisVar === void 0 ? void 0 : sizeVisVar.valueExpressionTitle) !== null && _b !== void 0 ? _b : null;
        return fieldInfo;
    }
    handleZigzagClick(newValue) {
        var _a, _b;
        const { statistics } = this;
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const sizeVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)(renderer, "size");
        const authSizeVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.p)(renderer, "size");
        const fieldInfo = this.getFieldInfo();
        const normalizationField = sizeVisVar
            ? sizeVisVar.normalizationField
            : renderer.normalizationField;
        this.getHistogram(fieldInfo, normalizationField, statistics, (_a = newValue === null || newValue === void 0 ? void 0 : newValue.min) !== null && _a !== void 0 ? _a : authSizeVisVar.minSliderValue, (_b = newValue === null || newValue === void 0 ? void 0 : newValue.max) !== null && _b !== void 0 ? _b : authSizeVisVar.maxSliderValue);
        if (!newValue) {
            this.sliderZoomed = false;
        }
    }
    get hostElement() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisSmartMappingSizeSlider.style = arcgisSmartMappingSizeSliderCss;

function getTileInfo(type, tileType) {
    var _a;
    const { layer, selectedFields, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
    let styleTileType = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.i)(layer) ? "raster" : (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.D)(layer);
    if (styleTileType === "multipoint") {
        styleTileType = "point";
    }
    let fieldCount = selectedFields.length;
    if (!(0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ac)(fieldCount)) {
        // the tiles for combination renderers
        fieldCount = 1;
    }
    const rendererType = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.i)(layer) ? (0,_raster_renderer_a62f152c_js__WEBPACK_IMPORTED_MODULE_18__.g)() : (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.g)();
    let isFirstFieldDate = false;
    let isSecondFieldDate = false;
    if (selectedFields.length) {
        isFirstFieldDate =
            selectedFields[0].simpleFieldType === _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.w.DATE ||
                ((_a = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.u)(selectedFields[0].field)) === null || _a === void 0 ? void 0 : _a.layerField).type === "date-only";
        isSecondFieldDate = isFirstFieldDate;
        if (selectedFields.length > 1) {
            isSecondFieldDate = selectedFields[1].simpleFieldType === _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.w.DATE;
        }
    }
    /*
    colorAge,sizeAge,type_SizeAge
    color_SizeAge,colorDate_SizeAge,colorAge_Size,colorAge_SizeDate
    heatMap
    */
    switch (type) {
        case "simple":
            return {
                title: strings.tile.simpleStyle,
                //css: CSS.simpleTile,
                moreInfo: strings.tile.tooltips.location,
                helpId: "120003675",
                imageFile: `${styleTileType}/Simple.png`
            };
        case "color":
            return {
                title: isFirstFieldDate ? strings.tile.colorStyleDate : strings.tile.colorStyle,
                subText: tileType !== "gallery" ? selectedFields[0].expressionTitle || (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.u)(selectedFields[0].field).label : "",
                //css: CSS.colorTile,
                moreInfo: isFirstFieldDate ? strings.tile.tooltips.colorDate : strings.tile.tooltips.color,
                helpId: isFirstFieldDate ? "120003262" : "120003251",
                imageFile: `${styleTileType}/Color.png`
            };
        case "size":
            // for color-size the size tile only has the one size field
            return {
                title: rendererType === "chart-size" && tileType != "gallery"
                    ? strings.tile.sizeStyleChart
                    : (fieldCount === 1 && isFirstFieldDate) || (fieldCount === 2 && isSecondFieldDate)
                        ? strings.tile.sizeStyleDate
                        : strings.tile.sizeStyle,
                subText: tileType !== "gallery"
                    ? rendererType === "chart-size" || rendererType === "predominance-size"
                        ? strings.sumOfCategories
                        : selectedFields[1].expressionTitle || (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.u)(selectedFields[1].field).label
                    : "",
                //css: rendererType === "chart-size" ? CSS.chartSizeSizeTile : CSS.sizeTile,
                moreInfo: rendererType === "predominance-size"
                    ? strings.tile.tooltips.sizeForPredominance
                    : //: rendererType === "chart-size"
                        //? strings.tile.tooltips.sizeForChart
                        (fieldCount === 1 && isFirstFieldDate) || (fieldCount === 2 && isSecondFieldDate)
                            ? strings.tile.tooltips.sizeDate
                            : strings.tile.tooltips.size,
                helpId: (fieldCount === 1 && isFirstFieldDate) || (fieldCount === 2 && isSecondFieldDate) ? "120003263" : "120003252",
                imageFile: rendererType === "chart-size" && tileType != "gallery"
                    ? `${styleTileType}/ChartSizeSize.jpg`
                    : `${styleTileType}/Size.png`
            };
        case "type":
            return {
                title: isFirstFieldDate ? strings.tile.typeStyleDate : strings.tile.typeStyle,
                subText: tileType !== "gallery" && ["type-size", "type-size-age"].indexOf(rendererType) > -1
                    ? (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.u)(selectedFields[0].field).label
                    : "",
                moreInfo: isFirstFieldDate ? strings.tile.tooltips.typeDate : strings.tile.tooltips.type,
                helpId: isFirstFieldDate ? "120003266" : "120003260",
                imageFile: `${styleTileType}/Type.png`
            };
        case "color-age":
            return {
                title: strings.tile.colorAgeStyle,
                subText: tileType !== "gallery" ? selectedFields[0].expressionTitle || (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.u)(selectedFields[0].field).label : "",
                //css: CSS.colorAgeTile,
                moreInfo: strings.tile.tooltips.colorAge,
                helpId: "120003264",
                imageFile: `${styleTileType}/Color_Age.png`
            };
        case "size-age":
            return {
                title: strings.tile.sizeAgeStyle,
                subText: tileType !== "gallery" ? selectedFields[1].expressionTitle || (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.u)(selectedFields[1].field).label : "",
                //css: CSS.sizeAgeTile,
                moreInfo: strings.tile.tooltips.sizeAge,
                helpId: "120003265",
                imageFile: `${styleTileType}/Size_Age.png`
            };
        case "color-size":
            return {
                title: strings.tile.colorSizeStyle,
                //css: CSS.colorSizeTile,
                moreInfo: isFirstFieldDate
                    ? isSecondFieldDate
                        ? strings.tile.tooltips.colorDate_SizeDate
                        : strings.tile.tooltips.colorDate_Size
                    : isSecondFieldDate
                        ? strings.tile.tooltips.color_SizeDate
                        : strings.tile.tooltips.color_Size,
                helpId: "120003254",
                imageFile: `${styleTileType}/ColorSize.png`
            };
        case "color-age-size":
            return {
                title: strings.tile.colorAgeSizeStyle,
                //css: CSS.colorAgeSizeTile,
                moreInfo: strings.tile.tooltips.colorAge_Size,
                helpId: "120003267",
                imageFile: `${styleTileType}/ColorSize_Age.png`
            };
        case "color-size-age":
            return {
                title: strings.tile.colorSizeAgeStyle,
                //css: CSS.colorSizeAgeTile,
                moreInfo: strings.tile.tooltips.color_SizeAge,
                helpId: "120003267",
                imageFile: `${styleTileType}/ColorSize_Age.png`
            };
        /* case "color-age-size-age":
          return {
            title: strings.tile.colorAgeSizeAgeStyle,
            //css: CSS.colorAgeSizeAgeTile,
            moreInfo: strings.tile.tooltips.colorAge_SizeAge,
            helpId: "120003267",
            imageFile:`${styleTileType}/ColorSize_Age.png`
          }; */
        case "type-size":
            return {
                title: strings.tile.typeSizeStyle,
                //css: CSS.typeSizeTile,
                moreInfo: isFirstFieldDate
                    ? strings.tile.tooltips.typeDate_Size
                    : isSecondFieldDate
                        ? strings.tile.tooltips.type_SizeDate
                        : strings.tile.tooltips.type_Size,
                helpId: "120003261",
                imageFile: `${styleTileType}/TypeSize.png`
            };
        case "type-size-age":
            return {
                title: strings.tile.typeSizeAgeStyle,
                //css: CSS.typeSizeAgeTile,
                moreInfo: strings.tile.tooltips.type_SizeAge,
                helpId: "120003268",
                imageFile: `${styleTileType}/TypeSize_Age.png`
            };
        case "dot-density":
            return {
                title: strings.tile.dotDensityStyle,
                //css: CSS.dotDensityTile,
                moreInfo: strings.tile.tooltips.dotDensity,
                helpId: "120003253",
                imageFile: `${styleTileType}/DotDensity.png`
            };
        case "heatmap":
            return {
                title: strings.tile.heatmapStyle,
                //css: CSS.heatmapTile,
                moreInfo: strings.tile.tooltips.heatMap,
                helpId: "120003250",
                imageFile: `${styleTileType}/HeatMap.png`
            };
        case "relationship":
            return {
                title: strings.tile.relationshipStyle,
                subText: tileType !== "gallery" && rendererType === "relationship-size"
                    ? [(0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.u)(selectedFields[0].field).label, (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.u)(selectedFields[1].field).label]
                    : "",
                moreInfo: strings.tile.tooltips.relationship,
                helpId: "120003258",
                imageFile: `${styleTileType}/Relationship.png`
            };
        case "relationship-size":
            return {
                title: strings.tile.relationshipSizeStyle,
                //css: CSS.relationshipSizeTile,
                moreInfo: strings.tile.tooltips.relationshipSize,
                helpId: "120003259",
                imageFile: `${styleTileType}/RelationshipSize.png`
            };
        case "predominance":
            return {
                title: strings.tile.predominanceStyle,
                //css: CSS.predominanceTile,
                moreInfo: strings.tile.tooltips.predominance,
                helpId: "120003256",
                imageFile: `${styleTileType}/Predominance.png`
            };
        case "predominance-size":
            return {
                title: strings.tile.predominanceSizeStyle,
                //css: CSS.predominanceSizeTile,
                moreInfo: strings.tile.tooltips.predominanceSize,
                helpId: "120003257",
                imageFile: `${styleTileType}/PredominanceSize.png`
            };
        case "chart":
            return {
                title: rendererType === "chart-size" && tileType !== "gallery"
                    ? strings.tile.chartStyleColor
                    : strings.tile.chartStyle,
                //css: CSS.chartTile,
                moreInfo: strings.tile.tooltips.chart,
                helpId: "120003729",
                imageFile: `${styleTileType}/Chart.jpg`
            };
        case "chart-size":
            return {
                title: strings.tile.chartSizeStyle,
                //css: CSS.chartSizeTile,
                moreInfo: strings.tile.tooltips.chartSize,
                helpId: "120003730",
                imageFile: `${styleTileType}/ChartSize.jpg`
            };
        case "compare":
            return {
                title: strings.tile.compareStyle,
                //css: CSS.compareTile,
                moreInfo: strings.tile.tooltips.compare,
                helpId: "120003255",
                imageFile: `${styleTileType}/Ratio.png`
            };
        case "raster-stretch":
            return {
                title: strings.tile.symbologyStretchStyle,
                //css: CSS.stretchTile,
                moreInfo: strings.tile.tooltips.stretch,
                helpId: "120003269",
                imageFile: `${styleTileType}/stretch.png`
            };
        case "raster-rgb":
            return {
                title: strings.tile.symbologyRGBStyle,
                //css: CSS.rgbTile,
                moreInfo: strings.tile.tooltips.rgb,
                helpId: "120003270",
                imageFile: `${styleTileType}/rgb.png`
            };
        case "raster-unique-value":
            return {
                title: strings.tile.symbologyUniqueValuesStyle,
                //css: CSS.uniqueValuesTile,
                moreInfo: strings.tile.tooltips.uniqueValues,
                helpId: "120003271",
                imageFile: `${styleTileType}/uniqueValues.png`
            };
        case "raster-shaded-relief":
            return {
                title: strings.tile.symbologyShadedReliefStyle,
                //css: CSS.shadedReliefTile,
                moreInfo: strings.tile.tooltips.shadedRelief,
                helpId: "120003273",
                imageFile: `${styleTileType}/shadedRelief.png`
            };
        case "raster-vector-field":
            return {
                title: strings.tile.symbologyVectorFieldStyle,
                //css: CSS.vectorFieldTile,
                moreInfo: strings.tile.tooltips.vectorField,
                helpId: "120003275",
                imageFile: `${styleTileType}/vectorField.png`
            };
        case "raster-colormap":
            return {
                title: strings.tile.symbologyColormapStyle,
                //css: CSS.colormapTile,
                moreInfo: strings.tile.tooltips.colormap,
                helpId: "120003274",
                imageFile: `${styleTileType}/colormap.png`
            };
        case "raster-class-breaks":
            return {
                title: strings.tile.symbologyClassBreaksStyle,
                //css: CSS.classBreaksTile,
                moreInfo: strings.tile.tooltips.classify,
                helpId: "120003272",
                imageFile: `${styleTileType}/classBreaks.png`
            };
        case "raster-flow":
            return {
                title: strings.tile.rasterFlowStyle,
                //css: CSS.flowTile,
                moreInfo: strings.tile.tooltips.flow,
                helpId: "120003676",
                imageFile: `${styleTileType}/flow.png`
            };
    }
}

const arcgisSmartMappingTileCss = ".tile{background-color:white;position:relative;margin:6px;cursor:pointer;box-shadow:0 1px 10px 2px rgba(0, 0, 0, 0.05), 0 0 0 1px #e0e0e0;transition:box-shadow 125ms ease-in-out}.tile:hover{z-index:5;box-shadow:0 1px 0 2px rgba(0, 0, 0, 0.05), 0 0 0 1px #e0e0e0}.tile:focus{outline:2px solid var(--calcite-color-brand)}.tile-selected{box-shadow:0 1px 10px 2px rgba(0, 0, 0, 0.05), 0 0 0 1px var(--calcite-color-brand)}.tile-selected:focus{box-shadow:0 1px 10px 2px rgba(0, 0, 0, 0.05), 0 0 0 2px var(--calcite-color-brand)}.tile-selected:hover{z-index:5;box-shadow:0 1px 0 2px rgba(0, 0, 0, 0.05), 0 0 0 1px var(--calcite-color-brand)}.tile-check{position:absolute;top:10px;right:10px}.tile-check.rtl{right:auto;left:10px}.style-link{padding:9px 9px}.style-link-icon{margin-top:-1px}.style-link-text{margin-right:10px}.style-link-text.rtl{margin-right:0;margin-left:10px}.style-link-title{font-weight:bold;padding-bottom:5px}.style-link-title.info{display:flex}.style-link-sub-text{font-size:80%;padding:0 0 6px 0;font-weight:normal}.style-link-options{color:#0079c1;display:flex;flex-direction:row nowrap}.style-link-options svg{fill:#0079c1}.tile-image{height:100px;width:100%;background-size:cover;display:flex;align-items:center;justify-content:center}.tile-image-selected{height:68px;background-size:auto 100px}.style-sub-text{font-size:80%;padding:0 0 6px 0}.style-link-info{height:18px}";

const ArcgisSmartMappingTile = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisSmartMappingTileSelect = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingTileSelect", 7);
        this.arcgisSmartMappingTileOptions = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingTileOptions", 7);
        this.arcgisSmartMappingTileError = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingTileError", 7);
        //--------------------------------------------------------------------------
        //
        //  Private Properties
        //
        //--------------------------------------------------------------------------
        this.documentClickHandler = undefined;
        this.panelScrollHandler = undefined;
        this.keyupEventHandler = (event) => {
            const { selected } = this;
            if (event.key === " " || event.key === "Enter") {
                event.stopPropagation();
                this.removeInfoPopover();
                // use latest handler on props
                selected
                    ? this.arcgisSmartMappingTileOptions.emit()
                    : this.arcgisSmartMappingTileSelect.emit();
                event.preventDefault();
            }
        };
        this.keydownEventHandler = (event) => {
            if (event.key === " ") {
                // don't scroll panel
                event.stopPropagation();
                event.preventDefault();
            }
        };
        this.clickEventHandler = (event) => {
            var _a, _b;
            const { selected } = this;
            if (((_a = event === null || event === void 0 ? void 0 : event.target) === null || _a === void 0 ? void 0 : _a.nodeName) === "CALCITE-CHECKBOX") {
                // user clicked on checkbox; we handled this below
                return;
            }
            if (((_b = event === null || event === void 0 ? void 0 : event.target) === null || _b === void 0 ? void 0 : _b.nodeName) === "ARCGIS-SMART-MAPPING-THEME-BUTTON") {
                return;
            }
            event.stopPropagation();
            this.removeInfoPopover();
            // use latest handler on props
            selected ? this.arcgisSmartMappingTileOptions.emit() : this.arcgisSmartMappingTileSelect.emit();
            event.preventDefault();
        };
        this.checkboxChangeHandler = (event) => {
            const { selected } = this;
            event.preventDefault();
            const node = event.target;
            if (!node.checked) {
                // we don't allow users to uncheck the box
                node.checked = true;
            }
            else {
                this.removeInfoPopover();
                // use latest handler on props
                selected
                    ? this.arcgisSmartMappingTileOptions.emit()
                    : this.arcgisSmartMappingTileSelect.emit();
            }
        };
        this.tileType = undefined;
        this.type = undefined;
        this.selected = undefined;
    }
    //--------------------------------------------------------------------------
    //
    //  Public Methods
    //
    //--------------------------------------------------------------------------
    /**
     * Set focus on tile
     */
    async setFocus() {
        requestAnimationFrame(() => { var _a; return (_a = this.tileNode) === null || _a === void 0 ? void 0 : _a.focus(); });
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    componentWillLoad() {
        this.tileInfo = getTileInfo(this.type, this.tileType);
    }
    componentDidLoad() {
        this.flowItemNode = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.F)(this.hostElement, "calcite-flow-item");
    }
    disconnectedCallback() {
        this.removeInfoPopover();
    }
    // --------------------------------------------------------------------------
    //
    //  Render Methods
    //
    //--------------------------------------------------------------------------
    render() {
        const { selected, tileInfo, tileType } = this;
        const { title, imageFile } = tileInfo;
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const rtl = (0,_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_14__.g)(this.hostElement) === "rtl";
        const styleTileClasses = {
            tile: true,
            "tile-selected": selected
        };
        const styleTileImageClasses = {
            "tile-image": true,
            "tile-image-selected": tileType === "gallery" && selected
        };
        const styleTileCheckClasses = {
            "tile-check": true,
            rtl: rtl
        };
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.H, { "aria-label": `${title} ${selected ? strings.tile.styleOptions : strings.tile.selectStyle}`, "aria-selected": selected, role: "button", tabindex: "0" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: styleTileClasses, tabindex: "0", ref: (element) => {
                this.tileNode = element;
                this.addTileListeners(element);
            } }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: styleTileImageClasses, style: {
                backgroundImage: `url(${(0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.a)(`./assets/arcgis-smart-mapping-thumbnails/`)}${imageFile})`
            }, "aria-hidden": "true" }), tileType === "gallery" && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: styleTileCheckClasses, "aria-label": "", "aria-hidden": "true" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-checkbox", { name: "style-tile-check-name", checked: selected, tabindex: "-1", ref: (element) => this.addCheckboxListener(element) }))), this.renderTileLink())));
    }
    renderTheme() {
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const { tileType, type } = this;
        if (layer.type === "imagery" || layer.type === "imagery-tile") {
            return null;
        }
        const rendererType = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.g)();
        if (rendererType === "chart-size") {
            return null;
        }
        if (["color", "size", "color-age", "size-age", "color-size"].indexOf(type) === -1) {
            return null;
        }
        if ([
            "color",
            "size",
            "color-age",
            "size-age",
            "color-size",
            "color-age-size",
            "color-size-age",
            "type-size",
            "type-size-age",
            "relationship-size"
        ].indexOf(rendererType) === -1) {
            return null;
        }
        if (tileType === "gallery" &&
            [
                "type-size",
                "relationship-size",
                "color-age-size",
                "color-size-age",
                "type-size-age"
            ].indexOf(rendererType) > -1) {
            return null;
        }
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const authInfo = renderer.authoringInfo;
        const isUnivariate = (authInfo === null || authInfo === void 0 ? void 0 : authInfo.type) === "univariate-color-size";
        if (tileType === "gallery" && rendererType === "color-size" && !isUnivariate) {
            // bivariate Color+Size
            return null;
        }
        const colorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)(renderer, "color");
        if (tileType === "gallery" && rendererType === "color" && !colorVisVar) {
            // classed color
            return null;
        }
        const sizeVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)(renderer, "size");
        if (tileType === "gallery" && rendererType === "size" && !sizeVisVar) {
            // classed size
            return null;
        }
        const rendererSubtype = type === "color-age"
            ? "color"
            : type === "size-age"
                ? "size"
                : type === "color-size"
                    ? "colorSize"
                    : type;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-theme-button", { ref: (node) => (this.themeButtonNode = node), rendererSubtype: rendererSubtype, buttonVersion: "minimal", onArcgisSmartMappingThemeButtonChange: (event) => this.changeTheme(event) }));
    }
    changeTheme(event) {
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const rendererType = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.g)();
        const { type } = this;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const authInfo = renderer.authoringInfo;
        const isUnivariate = (authInfo === null || authInfo === void 0 ? void 0 : authInfo.type) === "univariate-color-size";
        if ((type === "color" || type === "color-age") &&
            ["color", "color-age", "color-size", "color-age-size", "color-size-age"].indexOf(rendererType) > -1) {
            let updateCall = _color_d6da0a9a_js__WEBPACK_IMPORTED_MODULE_6__.b;
            if (["color-age", "color-age-size"].indexOf(rendererType) > -1) {
                updateCall = _color_d6da0a9a_js__WEBPACK_IMPORTED_MODULE_6__.d;
            }
            (0,_loading_69139907_js__WEBPACK_IMPORTED_MODULE_3__.r)(updateCall({ theme: event.detail }), this.flowItemNode).then((result) => {
                if (["color-size", "color-age-size", "color-size-age"].indexOf(rendererType) > -1) {
                    const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
                    renderer.visualVariables = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.n)(renderer, "color") || [];
                    renderer.visualVariables.push((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)(result.renderer, "color"));
                    renderer.authoringInfo.visualVariables = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.o)(renderer, "color") || [];
                    renderer.authoringInfo.visualVariables.push((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.p)(result.renderer, "color"));
                }
                else {
                    (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.e)(result.renderer, layer);
                }
                (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
                (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
                (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.themeButtonNode);
            }, (error) => this.arcgisSmartMappingTileError.emit(error));
        }
        else if ((type === "size" || type === "size-age") &&
            [
                "size",
                "size-age",
                "color-size",
                "color-age-size",
                "color-size-age",
                "type-size",
                "type-size-age",
                "relationship-size"
            ].indexOf(rendererType) > -1) {
            let updateCall = _colorSize_ce0ccdeb_js__WEBPACK_IMPORTED_MODULE_7__.f;
            if (["size-age", "color-size-age", "type-size-age"].indexOf(rendererType) > -1) {
                updateCall = _colorSize_ce0ccdeb_js__WEBPACK_IMPORTED_MODULE_7__.g;
            }
            (0,_loading_69139907_js__WEBPACK_IMPORTED_MODULE_3__.r)(updateCall({ theme: event.detail }), this.flowItemNode).then((result) => {
                if (["size", "size-age"].indexOf(rendererType) === -1) {
                    const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
                    renderer.visualVariables = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.n)(renderer, "size") || [];
                    renderer.visualVariables.push((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)(result.renderer, "size"));
                    renderer.authoringInfo.visualVariables = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.o)(renderer, "size") || [];
                    renderer.authoringInfo.visualVariables.push((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.p)(result.renderer, "size"));
                }
                else {
                    (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.e)(result.renderer, layer);
                }
                (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
                (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
                (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.themeButtonNode);
            }, (error) => this.arcgisSmartMappingTileError.emit(error));
        }
        else if (type === "color-size" && isUnivariate) {
            (0,_loading_69139907_js__WEBPACK_IMPORTED_MODULE_3__.r)((0,_colorSizeUnivariant_d266ac7c_js__WEBPACK_IMPORTED_MODULE_13__.a)({ theme: event.detail }), this.flowItemNode).then((result) => {
                (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.e)(result.renderer, layer);
                (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
                (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
                (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.themeButtonNode);
            }, (error) => this.arcgisSmartMappingTileError.emit(error));
        }
    }
    renderTileLink() {
        const { selected, tileInfo, tileType } = this;
        const { title, subText } = tileInfo;
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const rtl = (0,_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_14__.g)(this.hostElement) === "rtl";
        const styleLinkTextClasses = {
            "style-link-text": true,
            rtl: rtl
        };
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "style-link", "aria-label": title }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: `style-link-title ${tileType === "gallery" ? "info" : ""}` }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: styleLinkTextClasses, "aria-hidden": "true" }, title), tileType === "gallery" && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { class: "style-link-info", tabindex: "0", scale: "s", icon: "information", compact: true, onClick: (event) => this.handleInfoClick(event), text: strings.tile.moreInfo, ref: (element) => {
                this.infoIconNode = element;
                element.addEventListener("keyup", (event) => {
                    event.stopPropagation();
                    if (event.key === " " || (!this.infoPopoverNode && event.key === "Enter")) {
                        this.handleInfoClick(event);
                    }
                });
                element.addEventListener("keydown", (event) => {
                    if (event.key === " ") {
                        // prevent panel from scrolling
                        event.stopPropagation();
                        event.preventDefault();
                    }
                });
            } })), tileType !== "gallery" && subText && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "style-link-sub-text" }, typeof subText === "string" ? subText : subText.map((t) => (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, t))))), (selected || tileType !== "gallery") && this.renderTheme(), (selected || tileType !== "gallery") && this.renderStyleOptions()));
    }
    renderStyleOptions() {
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        // event handling for button click is handled as tile click
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { appearance: "outline-fill", width: "full", scale: "s", label: strings.tile.styleOptions }, strings.tile.styleOptions));
    }
    // --------------------------------------------------------------------------
    //
    //  Private Methods
    //
    // --------------------------------------------------------------------------
    handleInfoClick(event) {
        // don't execute the event on the entire tile
        event.stopPropagation();
        const { tileInfo, flowItemNode } = this;
        const { title, moreInfo, helpId } = tileInfo;
        const { config, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        this.removeInfoPopover();
        this.infoPopoverNode = document.createElement("arcgis-smart-mapping-info-popover");
        this.infoPopoverNode.props = {
            title,
            moreInfo,
            helpId,
            config,
            flowItemNode,
            strings
        };
        this.infoPopoverNode.referenceElement = this.infoIconNode;
        this.infoPopoverNode.addEventListener("arcgisSmartMappingInfoPopoverClose", (event) => {
            event.stopPropagation();
            this.removeInfoPopover();
            setTimeout(() => this.infoIconNode.setFocus(), 200);
        });
        this.infoPopoverNode.addEventListener("arcgisSmartMappingInfoPopoverDisconnected", (event) => {
            event.stopPropagation();
            this.removeInfoPopover();
        });
        document.body.appendChild(this.infoPopoverNode);
        this.infoPopoverNode.setOpen(true);
        // need to wait until it's all visible
        setTimeout(() => this.infoPopoverNode.setFocus(), 100);
        setTimeout(() => {
            // close popover when clicking outside
            this.documentClickHandler = (event) => {
                if (!(0,_popover_721f7ba2_js__WEBPACK_IMPORTED_MODULE_17__.i)(event.target)) {
                    this.removeInfoPopover();
                    setTimeout(() => this.infoIconNode.setFocus(), 200);
                }
            };
            document.addEventListener("click", this.documentClickHandler);
            // click handler is not called when clicking or scrolling panel scrollbars
            this.panelScrollHandler = () => {
                this.removeInfoPopover();
            };
            flowItemNode === null || flowItemNode === void 0 ? void 0 : flowItemNode.addEventListener("calciteFlowItemScroll", this.panelScrollHandler);
        }, 100);
    }
    removeInfoPopover() {
        const { flowItemNode } = this;
        // close popovers
        document.body
            .querySelectorAll(".arcgis-smart-mapping-popover")
            .forEach((node) => document.body.removeChild(node));
        this.infoPopoverNode = null;
        if (this.documentClickHandler) {
            document.removeEventListener("click", this.documentClickHandler);
            this.documentClickHandler = undefined;
        }
        if (this.panelScrollHandler) {
            flowItemNode === null || flowItemNode === void 0 ? void 0 : flowItemNode.removeEventListener("calciteFlowItemScroll", this.panelScrollHandler);
            this.panelScrollHandler = undefined;
        }
    }
    addTileListeners(element) {
        element.addEventListener("keyup", this.keyupEventHandler);
        element.addEventListener("keydown", this.keydownEventHandler);
        element.addEventListener("click", this.clickEventHandler);
    }
    addCheckboxListener(element) {
        element.addEventListener("calciteCheckboxChange", this.checkboxChangeHandler);
    }
    get hostElement() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisSmartMappingTile.style = arcgisSmartMappingTileCss;



//# sourceMappingURL=arcgis-smart-mapping-age_8.entry.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/date-79c7d93c.js":
/*!**********************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/date-79c7d93c.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ addDateFormatFunctions),
/* harmony export */   b: () => (/* binding */ utcToTimePicker),
/* harmony export */   d: () => (/* binding */ datePickerToUTC),
/* harmony export */   u: () => (/* binding */ utcToDatePicker)
/* harmony export */ });
/* harmony import */ var _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./raster-unique-value-0976ec7f.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/raster-unique-value-0976ec7f.js");
/* harmony import */ var _loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./loadModules-b4ac1247.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-b4ac1247.js");
/* harmony import */ var _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./commonEnums-fcf13661.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/commonEnums-fcf13661.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */




function addDateFormatFunctions(config, timeZone) {
    config.labelFormatFunction = (value) => {
        return getDateDisplayString(value, timeZone, "short-date");
    };
    config.inputFormatFunction = (value) => {
        return getDateDisplayString(value, timeZone, "short-date");
    };
    config.inputParseFunction = (value) => {
        return mapTZToUTC(Date.parse(value), timeZone);
    };
}
function utcToDatePicker(value, timeZone) {
    // date is in UTC
    // we need a map timezone
    let str;
    if (!timeZone || timeZone === "system") {
        const diff = new Date().getTimezoneOffset();
        str = new Date(value - diff * 60000).toISOString();
    }
    else if (timeZone === "unknown") {
        str = new Date(value).toISOString();
    }
    else {
        const diff = new Date().getTimezoneOffset();
        const mapDateStr = new Date(value).toLocaleString("en-US", { timeZone });
        str = new Date(new Date(mapDateStr).getTime() - diff * 60000).toISOString();
    }
    // console.log("utcToDatePicker", value, " - ", new Date(value).toISOString(), " -> ", str);
    return str;
}
function utcToTimePicker(value, timeZone, addSeconds) {
    // date is in UTC
    // we need a map timezone
    let str;
    if (!timeZone || timeZone === "system") {
        const diff = new Date().getTimezoneOffset();
        str = new Date(value - diff * 60000).toISOString();
    }
    else if (timeZone === "unknown") {
        str = new Date(value).toISOString();
    }
    else {
        const diff = new Date().getTimezoneOffset();
        const mapDateStr = new Date(value).toLocaleString("en-US", { timeZone });
        str = new Date(new Date(mapDateStr).getTime() - diff * 60000).toISOString();
    }
    // str = "2023-09-20T13:06:00.000Z"
    str = addSeconds ? str.substring(11, 19) : str.substring(11, 16);
    // console.log("utcToTimePicker", value, " - ", new Date(value).toISOString(), " -> ", str);
    return str;
}
function datePickerToUTC(dateString, timeZone) {
    // date is in map timezone
    // we need a UTC UNIX timestamp
    let date = new Date(dateString);
    // this is read as current time; toISOString() would reaturn UTC time (e.g. +7 hours from pacific)
    // fix the offset
    date = new Date(date.getTime() - date.getTimezoneOffset() * 60000);
    // date now contains the user's entered time
    let value;
    if (!timeZone || timeZone === "system") {
        // add difference between local time and UTC
        value = date.getTime() + date.getTimezoneOffset() * 60000;
    }
    else if (timeZone === "unknown") {
        // take what you get
        value = date.getTime();
    }
    else {
        // add difference between map time and UTC
        const diff = new Date(date.toLocaleString("en-US", { timeZone: "utc" })).getTime() -
            new Date(date.toLocaleString("en-US", { timeZone })).getTime();
        value = date.getTime() + diff;
    }
    // console.log("datePickerToUTC", date.toISOString(), " -> ", new Date(value).toISOString());
    return value;
}
function mapTZToUTC(value, timeZone) {
    if (!value) {
        return value;
    }
    // value is in map timezone
    // we need a UTC timestamp
    let newValue;
    if (!timeZone || timeZone === "system") {
        // add difference between local time and UTC
        const date = new Date();
        newValue = value + date.getTimezoneOffset() * 60000;
    }
    else if (timeZone === "unknown") {
        // take what you get
        newValue = value;
    }
    else {
        // add difference between map time and UTC
        const date = new Date();
        const diff = new Date(date.toLocaleString("en-US", { timeZone: "utc" })).getTime() -
            new Date(date.toLocaleString("en-US", { timeZone })).getTime();
        newValue = value + diff;
    }
    console.log("mapTZToUTC", value, " - ", new Date(value).toISOString(), " - ", new Date(newValue).toISOString());
    return newValue;
}
function getDateDisplayString(value, timeZone, dateFormat) {
    const { modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    let str;
    if (timeZone === "unknown") {
        str = modules.intl.formatDate(value, Object.assign(Object.assign({}, modules.intl.convertDateFormatToIntlOptions(dateFormat || "short-date-short-time")), { timeZone: "utc", timeZoneName: "shortOffset" }));
    }
    else {
        // known issues with formatting it-CH
        str = modules.intl.formatDate(value, Object.assign(Object.assign({}, modules.intl.convertDateFormatToIntlOptions(dateFormat || "short-date-short-time")), { timeZone }));
    }
    // console.log("getDateDisplayString", value, " - ", new Date(value).toISOString(), " -> ", str);
    return str;
}



//# sourceMappingURL=date-79c7d93c.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-44de8fcf.js":
/*!****************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-44de8fcf.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ arrayToLookupMap),
/* harmony export */   b: () => (/* binding */ unique),
/* harmony export */   c: () => (/* binding */ throttle),
/* harmony export */   d: () => (/* binding */ debounce),
/* harmony export */   e: () => (/* binding */ escapeRegExp),
/* harmony export */   f: () => (/* binding */ arraysAreEquivalent),
/* harmony export */   g: () => (/* binding */ chunk),
/* harmony export */   i: () => (/* binding */ isDefined),
/* harmony export */   m: () => (/* binding */ minDelay),
/* harmony export */   t: () => (/* binding */ timeout),
/* harmony export */   u: () => (/* binding */ uniqueBy)
/* harmony export */ });
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */
/**
 * Call a function only after it has not been called for n milliseconds
 * @param fn    - function to call
 * @param delay - delay in milliseconds
 */
const debounce = (fn, delay) => {
    let timeout;
    let status = "idle";
    function flush(...args) {
        status = "flushed";
        return debounced(...args);
    }
    function invoke(...args) {
        status = "invoked";
        return debounced(...args);
    }
    function cancel(...args) {
        status = "cancelled";
        return debounced(...args);
    }
    function getStatus() {
        return status;
    }
    const debounced = (...args) => new Promise((resolve) => {
        switch (status) {
            case "flushed":
                status = "idle";
                if (timeout) {
                    clearTimeout(timeout);
                    resolve(fn(...args));
                }
                else {
                    resolve(null);
                }
                break;
            case "invoked":
                clearTimeout(timeout);
                status = "idle";
                resolve(fn(...args));
                break;
            case "cancelled":
                clearTimeout(timeout);
                status = "idle";
                resolve(null);
                break;
            default:
                if (timeout) {
                    clearTimeout(timeout);
                }
                status = "pending";
                timeout = setTimeout(() => {
                    status = "idle";
                    return resolve(fn(...args));
                }, delay);
                break;
        }
    });
    debounced.flush = flush;
    debounced.invoke = invoke;
    debounced.cancel = cancel;
    debounced.getStatus = getStatus;
    return debounced;
};
/**
 * Call a function only after n milliseconds have elapsed
 * @param fn    - function to call
 * @param delay - delay in milliseconds
 */
const throttle = (fn, delay) => {
    let timeout;
    return (...args) => new Promise((resolve) => {
        if (timeout) {
            return;
        }
        timeout = setTimeout(() => {
            clearTimeout(timeout);
            timeout = undefined;
            resolve(fn(...args));
        }, delay);
    });
};
function escapeRegExp(str) {
    return str.replace(/[.*+?^${}()|[\]\\]/g, "\\$&"); // $& means the whole matched string
}
function isDefined(value) {
    return value !== undefined && value !== null;
}
/**
 * Set a minimum time for a promise to resolve (useful for preventing flash of loaders)
 */
async function minDelay(promise, minDelay) {
    await Promise.all([promise, timeout(minDelay)]);
    return promise;
}
/**
 * Helper method to inline setTimeout as an await in async functions
 */
function timeout(ms) {
    return new Promise((resolve) => setTimeout(resolve, ms));
}
const arrayToLookupMap = (dataArr, getKeyAndItem) => Object.fromEntries((dataArr || []).map((item) => {
    const { key, data } = getKeyAndItem(item);
    return [key, data];
}));
/**
 * Check whether two arrays have the same number of elements
 * and whether they contain the same elements
 * regardless of order
 */
const arraysAreEquivalent = (arr1, arr2) => arr1.length === arr2.length && arr1.reduce((memo, str) => memo && arr2.indexOf(str) > -1, true);
function uniqueBy(myArr, getItemId) {
    const resultArr = [];
    const lookupMap = {};
    myArr.forEach((item) => {
        const id = getItemId(item);
        if (lookupMap[id] == null) {
            lookupMap[id] = item;
            resultArr.push(item);
        }
    });
    return resultArr;
}
function unique(myArr) {
    const primitives = { boolean: {}, number: {}, string: {} };
    const objs = [];
    return myArr.filter((item) => {
        let type = typeof item;
        if (type in primitives) {
            return primitives[type].hasOwnProperty(item) ? false : (primitives[type][item] = true);
        }
        else {
            return objs.indexOf(item) >= 0 ? false : objs.push(item);
        }
    });
}
const chunk = (arr, size) => [...Array(Math.ceil(arr.length / size))].map((_, i) => arr.slice(size * i, size + size * i));



//# sourceMappingURL=functional-44de8fcf.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/popover-721f7ba2.js":
/*!*************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/popover-721f7ba2.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   i: () => (/* binding */ isInsideInfoPopoverNode)
/* harmony export */ });
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */
function isInsideInfoPopoverNode(node) {
    if ((node === null || node === void 0 ? void 0 : node.tagName) === "ARCGIS-SMART-MAPPING-INFO-POPOVER") {
        return true;
    }
    else {
        let parentNode = node === null || node === void 0 ? void 0 : node.parentElement;
        while (parentNode) {
            if (parentNode.tagName === "ARCGIS-SMART-MAPPING-INFO-POPOVER") {
                return true;
            }
            else {
                parentNode = parentNode.parentElement;
            }
        }
    }
    return false;
}



//# sourceMappingURL=popover-721f7ba2.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/raster-renderer-a62f152c.js":
/*!*********************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/raster-renderer-a62f152c.js ***!
  \*********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ applyRasterRenderer),
/* harmony export */   g: () => (/* binding */ getRasterRendererType),
/* harmony export */   n: () => (/* binding */ normalizeColorRamp)
/* harmony export */ });
/* harmony import */ var _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./raster-unique-value-0976ec7f.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/raster-unique-value-0976ec7f.js");
/* harmony import */ var _loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./loadModules-b4ac1247.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-b4ac1247.js");
/* harmony import */ var _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./commonEnums-fcf13661.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/commonEnums-fcf13661.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */




function getRasterRendererType() {
    var _a, _b;
    const { layer: smLayer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    const layer = smLayer;
    switch ((_a = layer === null || layer === void 0 ? void 0 : layer.renderer) === null || _a === void 0 ? void 0 : _a.type) {
        case "flow":
            return "raster-flow";
        case "vector-field":
            return "raster-vector-field";
        case "class-breaks":
            return "raster-class-breaks";
        case "unique-value":
            return "raster-unique-value";
        case "raster-stretch":
            return (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.k)(layer) ? "raster-rgb" : "raster-stretch";
        case "raster-shaded-relief":
            return "raster-shaded-relief";
        default:
            return (_b = layer.renderer) === null || _b === void 0 ? void 0 : _b.type;
    }
}
// TODO: add other raster renderer types
function applyRasterRenderer(renderer, layer) {
    if ("renderer" in layer) {
        layer.renderer = renderer;
    }
}
function normalizeColorRamp(colorRamp) {
    const { modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    if (!colorRamp) {
        return [
            new modules.esriColor([0, 0, 0, 1]),
            new modules.esriColor([50, 50, 50, 1]),
            new modules.esriColor([73, 73, 73, 1]),
            new modules.esriColor([140, 140, 140, 1]),
            new modules.esriColor([255, 255, 255, 1])
        ];
    }
    if ((colorRamp === null || colorRamp === void 0 ? void 0 : colorRamp.type) !== "multipart") {
        return [colorRamp.fromColor, colorRamp.toColor];
    }
    const colorRamps = colorRamp.colorRamps;
    const colors = colorRamps.map((colorRamp) => colorRamp.fromColor);
    colors.push(colorRamps[colorRamps.length - 1].toColor);
    return colors;
}



//# sourceMappingURL=raster-renderer-a62f152c.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,