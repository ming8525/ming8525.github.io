"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_arcgis-arcade_-22d01a"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-arcade.entry.js":
/*!****************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-arcade.entry.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   arcgis_arcade: () => (/* binding */ ArcgisArcade)
/* harmony export */ });
/* harmony import */ var _index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-e3bf7da7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-e3bf7da7.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */


const CSS = {
    arcadeDiv: "arcade-div",
    arcadeIframe: "arcade-iframe"
};

const arcgisArcadeCss = ".arcade-div{position:fixed;top:0px;right:0px;bottom:0px;left:0px;display:flex;justify-content:center;align-items:center;overflow-y:hidden;z-index:1001;transition:visibility 0ms linear 0.3s, opacity 0.3s cubic-bezier(0.215, 0.44, 0.42, 0.88) 0s}.arcade-iframe{border:none;width:100%;height:100%}";

const ArcgisArcade = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcadeClosed = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcadeClosed", 7);
        this.sendPostMessage = (jsonObj) => {
            var _a, _b;
            (_b = (_a = this.arcadeEditorInfo.arcadeEditor) === null || _a === void 0 ? void 0 : _a.contentWindow) === null || _b === void 0 ? void 0 : _b.postMessage(JSON.stringify(jsonObj), this.arcadeEditorInfo.editorUrl);
        };
        this.receiveMessage = (event) => {
            event.stopPropagation();
            // for some reason the viewer is sending {request: "getUri"} to the editor
            // and the editor is returning {request: "postUri", uri: "http://may.arcgis.com/editor/editarcade.html?locale=en"}
            // This causes an error in editor when doing JSON.parse(event.data) because event.data is an object and not a string.
            // console.log("event received", event.data, event.origin);
            if (this.arcadeEditorInfo.editorUrl.indexOf(event.origin) === -1) {
                return;
            }
            const jsonObj = typeof event.data === "string" ? JSON.parse(event.data) : event.data;
            switch (jsonObj.type) {
                case "loaded":
                    // Setup the embedded editor
                    this.arcadeEditorInfo.editorFrameLoaded = jsonObj.value;
                    if (this.arcadeEditorInfo.editorFrameLoaded) {
                        this.sendPostMessage(this.objectForArcadeIFrame);
                    }
                    break;
                case "initFinished":
                    if (this.arcadeEditorInfo.editorFrameLoaded) ;
                    else {
                        console.log("editor app not loaded yet");
                    }
                    break;
                case "scriptSaveAndClose":
                    // The script has finished being edited.
                    if (!jsonObj.script) {
                        this.doneArcade();
                        break;
                    }
                    this.doneArcade(jsonObj);
                    break;
                case "scriptClose":
                    this.doneArcade();
                    break;
            }
        };
        this.arcadeEditorUrl = undefined;
        this.currentLanguage = undefined;
        this.objectForArcadeIFrame = undefined;
        this.currentArcadeFieldName = undefined;
    }
    // lifecycle methods
    componentWillLoad() {
        console.warn("arcgis-arcade component is deprecated. Instead use arcgis-modal-arcade");
    }
    componentDidLoad() {
        this.arcadeEditorInfo = {
            arcadeEditor: this.hostElement.shadowRoot.getElementById("arcadeFrame_Id"),
            editorFrameLoaded: false,
            editorUrl: `${this.arcadeEditorUrl}?locale=${this.currentLanguage.toLowerCase()}`
        };
        this.arcadeEditorInfo.arcadeEditor.onload = () => {
            this.arcadeEditorInfo.arcadeEditor.style.visibility = "visible";
        };
        this.arcadeEditorInfo.arcadeEditor.src = this.arcadeEditorInfo.editorUrl;
        window.addEventListener("message", this.receiveMessage, false);
        let timeoutCounter = 0;
        // Use a timer, to check when the iframe is ready
        this.arcadeEditorInfo.editorFrameListener = window.setInterval(() => {
            if (!this.arcadeEditorInfo.editorFrameLoaded) {
                this.sendPostMessage({ type: "isLoaded" });
            }
            else {
                window.clearInterval(this.arcadeEditorInfo.editorFrameListener);
                this.arcadeEditorInfo.editorFrameListener = null;
            }
            timeoutCounter++;
            if (timeoutCounter > 60) {
                console.log("reject");
            }
        }, 500);
    }
    // private methods and properties
    doneArcade(jsonObj) {
        var _a;
        window.clearInterval(this.arcadeEditorInfo.editorFrameListener);
        window.removeEventListener("message", this.receiveMessage);
        if ((_a = this.hostElement) === null || _a === void 0 ? void 0 : _a.parentNode) {
            if (jsonObj) {
                this.arcadeClosed.emit({
                    arcadeExp: jsonObj,
                    currentArcadeFieldName: this.currentArcadeFieldName
                });
            }
            else {
                this.arcadeClosed.emit();
            }
        }
    }
    // rendor methods
    render() {
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.H, null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.arcadeDiv }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("iframe", { id: "arcadeFrame_Id", class: CSS.arcadeIframe }))));
    }
    get hostElement() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisArcade.style = arcgisArcadeCss;



//# sourceMappingURL=arcgis-arcade.entry.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2lkZ2V0cy9jaHVua3MvYXJjZ2lzX2FuYWx5c2lzX25vZGVfbW9kdWxlc19hcmNnaXNfYXBwLWNvbXBvbmVudHNfZGlzdF9lc21fYXJjZ2lzLWFyY2FkZV8tMjJkMDFhLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDNkc7O0FBRTdHO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHFDQUFxQyxlQUFlLFFBQVEsVUFBVSxXQUFXLFNBQVMsYUFBYSx1QkFBdUIsbUJBQW1CLGtCQUFrQixhQUFhLDZGQUE2RixlQUFlLFlBQVksV0FBVyxZQUFZOztBQUUvVDtBQUNBO0FBQ0EsUUFBUSxxREFBZ0I7QUFDeEIsNEJBQTRCLHFEQUFXO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNEQUFzRCxtQkFBbUI7QUFDekUsNENBQTRDO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLHFCQUFxQixVQUFVLG1DQUFtQztBQUM1RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVDQUF1QyxrQkFBa0I7QUFDekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixxREFBQyxDQUFDLGlEQUFJLFFBQVEscURBQUMsVUFBVSxzQkFBc0IsRUFBRSxxREFBQyxhQUFhLCtDQUErQztBQUM5SDtBQUNBLHdCQUF3QixPQUFPLHFEQUFVO0FBQ3pDO0FBQ0E7O0FBRXlDOztBQUV6QyIsInNvdXJjZXMiOlsid2VicGFjazovL2V4Yi1jbGllbnQvLi9leHRlbnNpb25zL3dpZGdldHMvYXJjZ2lzL2FuYWx5c2lzL25vZGVfbW9kdWxlcy9AYXJjZ2lzL2FwcC1jb21wb25lbnRzL2Rpc3QvZXNtL2FyY2dpcy1hcmNhZGUuZW50cnkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBBbGwgbWF0ZXJpYWwgY29weXJpZ2h0IEVTUkksIEFsbCBSaWdodHMgUmVzZXJ2ZWQsIHVubGVzcyBvdGhlcndpc2Ugc3BlY2lmaWVkLlxuICogdjQuMC41OFxuICovXG5pbXBvcnQgeyByIGFzIHJlZ2lzdGVySW5zdGFuY2UsIGMgYXMgY3JlYXRlRXZlbnQsIGgsIEggYXMgSG9zdCwgZCBhcyBnZXRFbGVtZW50IH0gZnJvbSAnLi9pbmRleC1lM2JmN2RhNy5qcyc7XG5cbmNvbnN0IENTUyA9IHtcbiAgICBhcmNhZGVEaXY6IFwiYXJjYWRlLWRpdlwiLFxuICAgIGFyY2FkZUlmcmFtZTogXCJhcmNhZGUtaWZyYW1lXCJcbn07XG5cbmNvbnN0IGFyY2dpc0FyY2FkZUNzcyA9IFwiLmFyY2FkZS1kaXZ7cG9zaXRpb246Zml4ZWQ7dG9wOjBweDtyaWdodDowcHg7Ym90dG9tOjBweDtsZWZ0OjBweDtkaXNwbGF5OmZsZXg7anVzdGlmeS1jb250ZW50OmNlbnRlcjthbGlnbi1pdGVtczpjZW50ZXI7b3ZlcmZsb3cteTpoaWRkZW47ei1pbmRleDoxMDAxO3RyYW5zaXRpb246dmlzaWJpbGl0eSAwbXMgbGluZWFyIDAuM3MsIG9wYWNpdHkgMC4zcyBjdWJpYy1iZXppZXIoMC4yMTUsIDAuNDQsIDAuNDIsIDAuODgpIDBzfS5hcmNhZGUtaWZyYW1le2JvcmRlcjpub25lO3dpZHRoOjEwMCU7aGVpZ2h0OjEwMCV9XCI7XG5cbmNvbnN0IEFyY2dpc0FyY2FkZSA9IGNsYXNzIHtcbiAgICBjb25zdHJ1Y3Rvcihob3N0UmVmKSB7XG4gICAgICAgIHJlZ2lzdGVySW5zdGFuY2UodGhpcywgaG9zdFJlZik7XG4gICAgICAgIHRoaXMuYXJjYWRlQ2xvc2VkID0gY3JlYXRlRXZlbnQodGhpcywgXCJhcmNhZGVDbG9zZWRcIiwgNyk7XG4gICAgICAgIHRoaXMuc2VuZFBvc3RNZXNzYWdlID0gKGpzb25PYmopID0+IHtcbiAgICAgICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgICAgICAoX2IgPSAoX2EgPSB0aGlzLmFyY2FkZUVkaXRvckluZm8uYXJjYWRlRWRpdG9yKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY29udGVudFdpbmRvdykgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLnBvc3RNZXNzYWdlKEpTT04uc3RyaW5naWZ5KGpzb25PYmopLCB0aGlzLmFyY2FkZUVkaXRvckluZm8uZWRpdG9yVXJsKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5yZWNlaXZlTWVzc2FnZSA9IChldmVudCkgPT4ge1xuICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICAvLyBmb3Igc29tZSByZWFzb24gdGhlIHZpZXdlciBpcyBzZW5kaW5nIHtyZXF1ZXN0OiBcImdldFVyaVwifSB0byB0aGUgZWRpdG9yXG4gICAgICAgICAgICAvLyBhbmQgdGhlIGVkaXRvciBpcyByZXR1cm5pbmcge3JlcXVlc3Q6IFwicG9zdFVyaVwiLCB1cmk6IFwiaHR0cDovL21heS5hcmNnaXMuY29tL2VkaXRvci9lZGl0YXJjYWRlLmh0bWw/bG9jYWxlPWVuXCJ9XG4gICAgICAgICAgICAvLyBUaGlzIGNhdXNlcyBhbiBlcnJvciBpbiBlZGl0b3Igd2hlbiBkb2luZyBKU09OLnBhcnNlKGV2ZW50LmRhdGEpIGJlY2F1c2UgZXZlbnQuZGF0YSBpcyBhbiBvYmplY3QgYW5kIG5vdCBhIHN0cmluZy5cbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwiZXZlbnQgcmVjZWl2ZWRcIiwgZXZlbnQuZGF0YSwgZXZlbnQub3JpZ2luKTtcbiAgICAgICAgICAgIGlmICh0aGlzLmFyY2FkZUVkaXRvckluZm8uZWRpdG9yVXJsLmluZGV4T2YoZXZlbnQub3JpZ2luKSA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBqc29uT2JqID0gdHlwZW9mIGV2ZW50LmRhdGEgPT09IFwic3RyaW5nXCIgPyBKU09OLnBhcnNlKGV2ZW50LmRhdGEpIDogZXZlbnQuZGF0YTtcbiAgICAgICAgICAgIHN3aXRjaCAoanNvbk9iai50eXBlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBcImxvYWRlZFwiOlxuICAgICAgICAgICAgICAgICAgICAvLyBTZXR1cCB0aGUgZW1iZWRkZWQgZWRpdG9yXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYXJjYWRlRWRpdG9ySW5mby5lZGl0b3JGcmFtZUxvYWRlZCA9IGpzb25PYmoudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmFyY2FkZUVkaXRvckluZm8uZWRpdG9yRnJhbWVMb2FkZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2VuZFBvc3RNZXNzYWdlKHRoaXMub2JqZWN0Rm9yQXJjYWRlSUZyYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwiaW5pdEZpbmlzaGVkXCI6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmFyY2FkZUVkaXRvckluZm8uZWRpdG9yRnJhbWVMb2FkZWQpIDtcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcImVkaXRvciBhcHAgbm90IGxvYWRlZCB5ZXRcIik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcInNjcmlwdFNhdmVBbmRDbG9zZVwiOlxuICAgICAgICAgICAgICAgICAgICAvLyBUaGUgc2NyaXB0IGhhcyBmaW5pc2hlZCBiZWluZyBlZGl0ZWQuXG4gICAgICAgICAgICAgICAgICAgIGlmICghanNvbk9iai5zY3JpcHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZG9uZUFyY2FkZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kb25lQXJjYWRlKGpzb25PYmopO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwic2NyaXB0Q2xvc2VcIjpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kb25lQXJjYWRlKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLmFyY2FkZUVkaXRvclVybCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5jdXJyZW50TGFuZ3VhZ2UgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMub2JqZWN0Rm9yQXJjYWRlSUZyYW1lID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmN1cnJlbnRBcmNhZGVGaWVsZE5hbWUgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIC8vIGxpZmVjeWNsZSBtZXRob2RzXG4gICAgY29tcG9uZW50V2lsbExvYWQoKSB7XG4gICAgICAgIGNvbnNvbGUud2FybihcImFyY2dpcy1hcmNhZGUgY29tcG9uZW50IGlzIGRlcHJlY2F0ZWQuIEluc3RlYWQgdXNlIGFyY2dpcy1tb2RhbC1hcmNhZGVcIik7XG4gICAgfVxuICAgIGNvbXBvbmVudERpZExvYWQoKSB7XG4gICAgICAgIHRoaXMuYXJjYWRlRWRpdG9ySW5mbyA9IHtcbiAgICAgICAgICAgIGFyY2FkZUVkaXRvcjogdGhpcy5ob3N0RWxlbWVudC5zaGFkb3dSb290LmdldEVsZW1lbnRCeUlkKFwiYXJjYWRlRnJhbWVfSWRcIiksXG4gICAgICAgICAgICBlZGl0b3JGcmFtZUxvYWRlZDogZmFsc2UsXG4gICAgICAgICAgICBlZGl0b3JVcmw6IGAke3RoaXMuYXJjYWRlRWRpdG9yVXJsfT9sb2NhbGU9JHt0aGlzLmN1cnJlbnRMYW5ndWFnZS50b0xvd2VyQ2FzZSgpfWBcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5hcmNhZGVFZGl0b3JJbmZvLmFyY2FkZUVkaXRvci5vbmxvYWQgPSAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmFyY2FkZUVkaXRvckluZm8uYXJjYWRlRWRpdG9yLnN0eWxlLnZpc2liaWxpdHkgPSBcInZpc2libGVcIjtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5hcmNhZGVFZGl0b3JJbmZvLmFyY2FkZUVkaXRvci5zcmMgPSB0aGlzLmFyY2FkZUVkaXRvckluZm8uZWRpdG9yVXJsO1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcIm1lc3NhZ2VcIiwgdGhpcy5yZWNlaXZlTWVzc2FnZSwgZmFsc2UpO1xuICAgICAgICBsZXQgdGltZW91dENvdW50ZXIgPSAwO1xuICAgICAgICAvLyBVc2UgYSB0aW1lciwgdG8gY2hlY2sgd2hlbiB0aGUgaWZyYW1lIGlzIHJlYWR5XG4gICAgICAgIHRoaXMuYXJjYWRlRWRpdG9ySW5mby5lZGl0b3JGcmFtZUxpc3RlbmVyID0gd2luZG93LnNldEludGVydmFsKCgpID0+IHtcbiAgICAgICAgICAgIGlmICghdGhpcy5hcmNhZGVFZGl0b3JJbmZvLmVkaXRvckZyYW1lTG9hZGVkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZW5kUG9zdE1lc3NhZ2UoeyB0eXBlOiBcImlzTG9hZGVkXCIgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB3aW5kb3cuY2xlYXJJbnRlcnZhbCh0aGlzLmFyY2FkZUVkaXRvckluZm8uZWRpdG9yRnJhbWVMaXN0ZW5lcik7XG4gICAgICAgICAgICAgICAgdGhpcy5hcmNhZGVFZGl0b3JJbmZvLmVkaXRvckZyYW1lTGlzdGVuZXIgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGltZW91dENvdW50ZXIrKztcbiAgICAgICAgICAgIGlmICh0aW1lb3V0Q291bnRlciA+IDYwKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJyZWplY3RcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIDUwMCk7XG4gICAgfVxuICAgIC8vIHByaXZhdGUgbWV0aG9kcyBhbmQgcHJvcGVydGllc1xuICAgIGRvbmVBcmNhZGUoanNvbk9iaikge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHdpbmRvdy5jbGVhckludGVydmFsKHRoaXMuYXJjYWRlRWRpdG9ySW5mby5lZGl0b3JGcmFtZUxpc3RlbmVyKTtcbiAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsIHRoaXMucmVjZWl2ZU1lc3NhZ2UpO1xuICAgICAgICBpZiAoKF9hID0gdGhpcy5ob3N0RWxlbWVudCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnBhcmVudE5vZGUpIHtcbiAgICAgICAgICAgIGlmIChqc29uT2JqKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hcmNhZGVDbG9zZWQuZW1pdCh7XG4gICAgICAgICAgICAgICAgICAgIGFyY2FkZUV4cDoganNvbk9iaixcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudEFyY2FkZUZpZWxkTmFtZTogdGhpcy5jdXJyZW50QXJjYWRlRmllbGROYW1lXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmFyY2FkZUNsb3NlZC5lbWl0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gcmVuZG9yIG1ldGhvZHNcbiAgICByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiAoaChIb3N0LCBudWxsLCBoKFwiZGl2XCIsIHsgY2xhc3M6IENTUy5hcmNhZGVEaXYgfSwgaChcImlmcmFtZVwiLCB7IGlkOiBcImFyY2FkZUZyYW1lX0lkXCIsIGNsYXNzOiBDU1MuYXJjYWRlSWZyYW1lIH0pKSkpO1xuICAgIH1cbiAgICBnZXQgaG9zdEVsZW1lbnQoKSB7IHJldHVybiBnZXRFbGVtZW50KHRoaXMpOyB9XG59O1xuQXJjZ2lzQXJjYWRlLnN0eWxlID0gYXJjZ2lzQXJjYWRlQ3NzO1xuXG5leHBvcnQgeyBBcmNnaXNBcmNhZGUgYXMgYXJjZ2lzX2FyY2FkZSB9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcmNnaXMtYXJjYWRlLmVudHJ5LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==