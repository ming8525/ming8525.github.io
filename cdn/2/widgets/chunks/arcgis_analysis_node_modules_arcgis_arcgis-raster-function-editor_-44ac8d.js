"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_arcgis-raster-function-editor_-44ac8d"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/localization-helper-4819b67d.js":
/*!****************************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/localization-helper-4819b67d.js ***!
  \****************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   D: () => (/* binding */ DefaultLocale),
/* harmony export */   S: () => (/* binding */ SupportedLocales),
/* harmony export */   a: () => (/* binding */ getDirectionBasedOnRTL),
/* harmony export */   b: () => (/* binding */ fetchComponentLocaleStrings),
/* harmony export */   f: () => (/* binding */ formatLocalizedHelpUrl),
/* harmony export */   g: () => (/* binding */ getLocaleInfo)
/* harmony export */ });
/**
 * Locale list reference [JSAPI](https://devtopia.esri.com/WebGIS/arcgis-js-api/tree/master/esri/nls)
 * also has Hindi: "hi"
 */
const SupportedLocales = {
    Arabic: "ar",
    Bosnian: "bs",
    Bulgarian: "bg",
    Catalan: "ca",
    Czech: "cs",
    Danish: "da",
    German: "de",
    Greek: "el",
    English: "en",
    EnglishUSA: "en-US",
    Spanish: "es",
    Estonian: "et",
    Finnish: "fi",
    French: "fr",
    Hebrew: "he",
    Hindi: "hi",
    Croatian: "hr",
    Hungarian: "hu",
    Indonesian: "id",
    Italian: "it",
    Japanese: "ja",
    Korean: "ko",
    Lithuanian: "lt",
    Latvian: "lv",
    NorwegianBokml: "nb",
    Dutch: "nl",
    Polish: "pl",
    PortugueseBrazil: "pt-BR",
    PortuguesePortugal: "pt-PT",
    Romanian: "ro",
    Russian: "ru",
    Serbian: "sr",
    Slovenian: "sl",
    Slovak: "sk",
    Swedish: "sv",
    Thai: "th",
    Turkish: "tr",
    Ukrainian: "uk",
    Vietnamese: "vi",
    ChineseChina: "zh-CN",
    ChineseHongKong: "zh-HK",
    ChineseTaiwan: "zh-TW"
};
const SupportedOnlineHelpLocales = ["ar", "de", "es", "fr", "it", "ja", "ko", "ru", "pl", "pt-br", "zh-cn"];
const LocaleMap = {
    "en-AU": "en",
    "en-CA": "en",
    "en-GB": "en",
    "en-US": "en",
    "es-ES": "es",
    "es-MX": "es",
    "de-CH": "de",
    "de-AT": "de",
    "de-DE": "de",
    "fr-CH": "fr",
    "fr-FR": "fr",
    "it-CH": "it",
    "it-IT": "it",
    ind: "id",
    ukr: "uk"
};
/**
 * List of supported locales that are RTL
 * reference: https://devtopia.esri.com/WebGIS/arcgis-js-api/blob/4master/esri/intl/locale.ts
 */
const RTLLocales = [SupportedLocales.Arabic, SupportedLocales.Hebrew];
const DefaultLocale = SupportedLocales.English;
/**
 * Utility to centralize logic, and return "rtl" or "rtl" depending on rtl boolean
 * @param {boolean} rtl whether locale is in Right to Left direction
 * @returns {"ltr" | "rtl"} codes that can be passed to "dir" prop of a component.
 */
function getDirectionBasedOnRTL(rtl) {
    return rtl === true ? "rtl" : "ltr";
}
/**
 * Helper function to find the closest element crossing multiple (parent) shadowDOM boundaries.
 * The implementation is based on [this](https://stackoverflow.com/questions/54520554/custom-element-getrootnode-closest-function-crossing-multiple-parent-shadowd) solution.
 *
 * @param {string} selector
 * @param {Element} base
 */
function getClosestElement(selector, base) {
    function closestFrom(el) {
        let element;
        if (el === undefined || el === document || el === window)
            element = null;
        else {
            const found = el.closest(selector);
            element = found || closestFrom(el.getRootNode().host);
        }
        return element;
    }
    return closestFrom(base);
}
/**
 * Converts the given locale to a supported locale using the provided locale map.
 *
 * @param {string | undefined} locale - The locale to be converted.
 * @param {object} localeMap - A map of locales to supported locales.
 * @returns {string} - The supported locale.
 */
function convertToSupportedLocale(locale, localeMap) {
    const defaultLocale = DefaultLocale;
    let localeSanitized = locale?.toLowerCase();
    if (localeSanitized !== undefined && localeSanitized.indexOf("-") !== -1) {
        const [lang, region] = localeSanitized.split("-");
        localeSanitized = `${lang}-${region.toUpperCase()}`;
    }
    if (!localeSanitized) {
        return defaultLocale;
    }
    const localeMapKeys = Object.keys(LocaleMap);
    if (localeMapKeys.includes(localeSanitized) === true) {
        return localeMap[localeSanitized];
    }
    return localeSanitized;
}
/**
 * Retrieves locale information; In the case of Regional codes (en-au) it is converted to a supported locale (en).
 *
 * @param {Element} [element=document.documentElement] - The element to search for locale information.
 * @returns {Object} An object containing the locale information.
 * @property {string} locale - The locale code.
 * @property {boolean} rtl - A flag indicating whether the locale is right-to-left.
 */
function getLocaleInfo(element = document.documentElement) {
    // Gets the closest element with a lang attribute and falls back to navigator.language if not found
    const closestElement = getClosestElement("[lang]", element);
    const locale = closestElement?.lang ?? window.navigator.language;
    const supportedLocales = Object.values(SupportedLocales);
    const defaultLocale = DefaultLocale;
    const convertedLocale = convertToSupportedLocale(locale, LocaleMap);
    const isSupportedLocale = supportedLocales.includes(convertedLocale);
    return {
        locale: isSupportedLocale ? convertedLocale : defaultLocale,
        rtl: RTLLocales.includes(locale)
    };
}
/**
 * Fetches the locale file of the given component; defaults to `"en"` locale
 * @param componentName
 * @param props
 * @param locale
 * @param resourcesUrl
 * @param props.path
 * @param props.locale
 * @param props.baseURL
 */
async function fetchLocaleStrings(props) {
    const { path, locale, baseURL } = props;
    // Using the getPublicPath method that leverages `data-resources-url` currently this is not working.
    // const rUrl = getPublicPath(componentName) || resourcesUrl;
    let localeData = {};
    try {
        const response = await fetch(`${baseURL}t9n/${path}.t9n.${locale}.json`);
        localeData = await response.json();
    }
    catch (e) {
        const defaultResponse = await fetch(`${baseURL}t9n/${path}.t9n.${DefaultLocale}.json`);
        localeData = await defaultResponse.json();
    }
    return localeData;
}
async function fetchComponentLocaleStrings(element, baseURL) {
    const componentName = element.tagName.toLowerCase();
    const { locale, rtl } = getLocaleInfo(element);
    const strings = await fetchLocaleStrings({ path: componentName, locale, baseURL });
    return { strings, dir: getDirectionBasedOnRTL(rtl), locale: locale };
}
/**
 * Formats a URL to link to
 * @param {string} url the url string from after the locale
 * @param {string} basePath the base path from the signed in portal object.
 * @param {string} locale the locale abbreviation for the browser.
 * @returns {string} the formatted url.
 */
function formatLocalizedHelpUrl(url, basePath, locale = "en") {
    let localeSanitized = locale;
    const localeMapKeys = Object.keys(LocaleMap);
    if (localeMapKeys.includes(locale) === true) {
        localeSanitized = LocaleMap[locale];
    }
    const localeInLowerCase = localeSanitized.toLocaleLowerCase();
    if (SupportedOnlineHelpLocales.includes(localeInLowerCase) === true) {
        // following regex tests /en/ is present in url and replaces it with the locale
        // https://docdev.arcgis.com/en/arcgis-online/analyze/aggregate-points-mv.htm
        // self Response only provides with `en` locale not as per the user locale or current app locale
        // so we need this replace call.
        basePath = basePath.replace(/^https?:\/\/[^/]+\/en/, (match) => match.replace("en", localeInLowerCase));
    }
    const learnMoreUrl = `${basePath}analyze/${url}`;
    return learnMoreUrl;
}



//# sourceMappingURL=localization-helper-4819b67d.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/rfx-continue-without-saving-modal.entry.js":
/*!***************************************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/rfx-continue-without-saving-modal.entry.js ***!
  \***************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   rfx_continue_without_saving_modal: () => (/* binding */ RFxContinueWithoutSavingModal)
/* harmony export */ });
/* harmony import */ var _index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-da1b7138.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/index-da1b7138.js");
/* harmony import */ var _localization_helper_4819b67d_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./localization-helper-4819b67d.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/localization-helper-4819b67d.js");
/* harmony import */ var _arcgis_core_core_lang_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @arcgis/core/core/lang.js */ "@arcgis/core/core/lang.js");
/* harmony import */ var _ui_utils_928a4096_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ui-utils-928a4096.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/ui-utils-928a4096.js");
/* harmony import */ var _arcgis_core_identity_IdentityManager_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @arcgis/core/identity/IdentityManager.js */ "@arcgis/core/identity/IdentityManager.js");
/* harmony import */ var _arcgis_core_core_urlUtils_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @arcgis/core/core/urlUtils.js */ "@arcgis/core/core/urlUtils.js");
/* harmony import */ var _arcgis_core_layers_Layer_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @arcgis/core/layers/Layer.js */ "@arcgis/core/layers/Layer.js");
/* harmony import */ var _arcgis_core_layers_ImageryLayer_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @arcgis/core/layers/ImageryLayer.js */ "@arcgis/core/layers/ImageryLayer.js");
/* harmony import */ var _arcgis_core_smartMapping_raster_renderers_stretch_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @arcgis/core/smartMapping/raster/renderers/stretch.js */ "@arcgis/core/smartMapping/raster/renderers/stretch.js");
/* harmony import */ var _common_fda1462e_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./common-fda1462e.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/common-fda1462e.js");
/* harmony import */ var _arcgis_core_rest_support_AlgorithmicColorRamp_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @arcgis/core/rest/support/AlgorithmicColorRamp.js */ "@arcgis/core/rest/support/AlgorithmicColorRamp.js");
/* harmony import */ var _arcgis_core_rest_support_MultipartColorRamp_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @arcgis/core/rest/support/MultipartColorRamp.js */ "@arcgis/core/rest/support/MultipartColorRamp.js");
/* harmony import */ var _arcgis_core_Color_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @arcgis/core/Color.js */ "@arcgis/core/Color.js");
/* harmony import */ var _colorRampUtils_8bdd46c5_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./colorRampUtils-8bdd46c5.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/colorRampUtils-8bdd46c5.js");
/* harmony import */ var _arcgis_core_rest_geoprocessor_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @arcgis/core/rest/geoprocessor.js */ "@arcgis/core/rest/geoprocessor.js");
/* harmony import */ var _arcgis_core_request_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @arcgis/core/request.js */ "@arcgis/core/request.js");
/* harmony import */ var _arcgis_core_portal_PortalItem_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @arcgis/core/portal/PortalItem.js */ "@arcgis/core/portal/PortalItem.js");
/* harmony import */ var _Uint8Array_68e1e3f9_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./_Uint8Array-68e1e3f9.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/_Uint8Array-68e1e3f9.js");
/* harmony import */ var _getTag_96af029d_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./_getTag-96af029d.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/_getTag-96af029d.js");




















const rfxContinueWithoutSavingModalCss = "";

const RFxContinueWithoutSavingModal = class {
    constructor(hostRef) {
        (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.rftTitle = "Raster Function Template 1";
        this.handleContinue = undefined;
        this.handleCancel = undefined;
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    async componentWillLoad() {
        ({ strings: this.strings, dir: this.direction } = await (0,_localization_helper_4819b67d_js__WEBPACK_IMPORTED_MODULE_1__.b)(this.hostElement, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.g)(".")));
        this.setupInitialState();
    }
    //--------------------------------------------------------------------------
    //
    //  Private Methods
    //
    //--------------------------------------------------------------------------
    setupInitialState() { }
    render() {
        const content = (0,_common_fda1462e_js__WEBPACK_IMPORTED_MODULE_9__.f)(this.strings.content, { rftTitle: this.rftTitle });
        return ((0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-modal", { "aria-labelledby": "modal-title", id: "continue-without-saving", kind: "danger", open: true, "outside-close-disabled": true, scale: _ui_utils_928a4096_js__WEBPACK_IMPORTED_MODULE_3__.C.m, widthScale: _ui_utils_928a4096_js__WEBPACK_IMPORTED_MODULE_3__.C.s }, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "header", id: "modal-title" }, this.strings.header), (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "content" }, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, content)), (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { slot: "secondary", width: "full", appearance: "outline", onClick: this.handleCancel }, this.strings.cancel), (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { slot: "primary", width: "full", kind: "danger", onClick: this.handleContinue }, this.strings.continue)));
    }
    static get assetsDirs() { return ["t9n"]; }
    get hostElement() { return (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.a)(this); }
};
RFxContinueWithoutSavingModal.style = rfxContinueWithoutSavingModalCss;



//# sourceMappingURL=rfx-continue-without-saving-modal.entry.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/ui-utils-928a4096.js":
/*!*****************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/ui-utils-928a4096.js ***!
  \*****************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   C: () => (/* binding */ CalciteScale),
/* harmony export */   U: () => (/* binding */ UIDefaults),
/* harmony export */   a: () => (/* binding */ CalciteOverlayPositioning)
/* harmony export */ });
const UIDefaults = {
    Scale: "s",
    PopoverTimer: 60
};
const CalciteScale = {
    s: "s",
    m: "m"
};
const CalciteOverlayPositioning = {
    absolute: "absolute",
    fixed: "fixed"
};



//# sourceMappingURL=ui-utils-928a4096.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,