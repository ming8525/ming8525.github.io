"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_colorS-c942ae"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/colorSizeUnivariant-d266ac7c.js":
/*!*************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/colorSizeUnivariant-d266ac7c.js ***!
  \*************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ createColorSizeUnivariateRendererFromExisting),
/* harmony export */   c: () => (/* binding */ createColorSizeUnivariateRenderer),
/* harmony export */   g: () => (/* binding */ getColorSizeSliderStops)
/* harmony export */ });
/* harmony import */ var _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./raster-unique-value-0976ec7f.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/raster-unique-value-0976ec7f.js");
/* harmony import */ var _loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./loadModules-b4ac1247.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-b4ac1247.js");
/* harmony import */ var _commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./commonFunctions-b0830e9e.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/commonFunctions-b0830e9e.js");
/* harmony import */ var _color_d6da0a9a_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./color-d6da0a9a.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/color-d6da0a9a.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */





/**
 * Creates a ColorSizeUnivariate renderer with default settings
 * @param options: options
 */
function createColorSizeUnivariateRenderer(options) {
    var _a;
    const { layer: smLayer, mapImageSublayer, mapView, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    const layer = smLayer;
    options = options || {};
    const rendererType = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.g)();
    const extras = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.m)((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer));
    const fieldInfo = options.fieldInfos ? options.fieldInfos[0] : null;
    const theme = options.theme ? options.theme : "high-to-low";
    const config = {
        layer,
        view: mapView,
        field: fieldInfo.field,
        valueExpression: fieldInfo.expression,
        valueExpressionTitle: fieldInfo.expressionTitle,
        normalizationField: options.normalizationField,
        theme,
        legendOptions: options.legendOptions,
        colorOptions: {
            colorScheme: options.colorScheme || (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.P)(theme),
            isContinuous: (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_2__.i)(options.isContinuous) ? options.isContinuous : false
        },
        symbolOptions: !(0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.B)(layer)
            ? {
                symbolStyle: options.symbolOptions || "caret"
            }
            : undefined,
        symbols: options.symbols || undefined,
        minValue: options.min,
        maxValue: options.max,
        /* outlineOptimizationEnabled: mapImageSublayer
          ? false
          : isDefined(options.outlineOptimizationEnabled)
          ? options.outlineOptimizationEnabled
          : isPolygon(layer)
          ? true
          : false, */
        sizeOptimizationEnabled: mapImageSublayer || theme === "above-and-below"
            ? false
            : (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_2__.i)(options.sizeOptimizationEnabled)
                ? options.sizeOptimizationEnabled
                : true,
        defaultSymbolEnabled: false,
        forBinning: ((_a = layer.featureReduction) === null || _a === void 0 ? void 0 : _a.type) === "binning"
    };
    // console.log("createColorSizeUnivariateRenderer-config", config);
    return modules.UnivariateColorSizeCreator.createContinuousRenderer(config).then((result) => {
        // console.log("createColorSizeUnivariateRenderer-success", result.renderer.toJSON());
        if (!options.noReuse &&
            ["color", "color-size", "color-size-age"].indexOf(rendererType) > -1 &&
            (0,_color_d6da0a9a_js__WEBPACK_IMPORTED_MODULE_3__.s)(options)) {
            // re-use color renderer
            const colorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a)((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer), "color");
            const authColorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.p)((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer), "color");
            if (colorVisVar && authColorVisVar) {
                if (theme === authColorVisVar.univariateTheme) {
                    result.renderer.visualVariables = [colorVisVar];
                    if (extras.sizeOutlineVisVar) {
                        result.renderer.visualVariables.push(extras.sizeOutlineVisVar);
                    }
                    result.renderer.authoringInfo.visualVariables = [authColorVisVar];
                    (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.Q)(result.renderer);
                }
            }
        }
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.l)(extras, result.renderer);
        return Promise.resolve(result);
    }, (error) => Promise.reject(error));
}
/**
 * Creates a Color renderer with settings from current renderer
 */
function createColorSizeUnivariateRendererFromExisting(options) {
    var _a, _b, _c, _d, _e, _f, _g, _h;
    const { layer: smLayer, mapImageSublayer, mapView, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    const layer = smLayer;
    options = options || {};
    const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer);
    const colorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a)(renderer, "color");
    if (colorVisVar &&
        options.fieldInfos &&
        options.fieldInfos[0] &&
        options.fieldInfos[0].field == colorVisVar.field &&
        options.fieldInfos[0].expression == colorVisVar.valueExpression &&
        options.normalizationField === colorVisVar.normalizationField) {
        // no changes to fields
        delete options.fieldInfos;
        if ((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.R)(options)) {
            // nothing really changes
            return Promise.resolve({ renderer: renderer.clone() });
        }
    }
    const extras = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.m)(renderer);
    const sizeVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a)(renderer, "size");
    const authInfo = renderer.authoringInfo;
    const authSizeVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.p)(renderer, "size");
    let fieldInfo = options.fieldInfos
        ? options.fieldInfos[0]
        : colorVisVar
            ? {
                field: colorVisVar.field,
                expression: colorVisVar.valueExpression,
                expressionTitle: colorVisVar.valueExpressionTitle,
                simpleFieldType: ((_a = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.u)(colorVisVar.field)) === null || _a === void 0 ? void 0 : _a.simpleFieldType) || _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.w.NUMBER
            }
            : {
                field: renderer.field,
                expression: renderer.valueExpression,
                expressionTitle: renderer.valueExpressionTitle,
                simpleFieldType: ((_b = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.u)(renderer.field)) === null || _b === void 0 ? void 0 : _b.simpleFieldType) || _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.w.NUMBER
            };
    const normalizationField = options.normalizationField === null
        ? undefined
        : options.normalizationField
            ? options.normalizationField
            : colorVisVar
                ? colorVisVar.normalizationField
                : renderer.normalizationField;
    const theme = options.theme ? options.theme : authInfo ? authInfo.univariateTheme : "high-to-low";
    const wasAboveAndBelow = authInfo.univariateTheme === "above-and-below";
    const isAboveAndBelow = theme === "above-and-below";
    const wasCustom = authInfo.univariateSymbolStyle === "custom";
    if (options.symbolStyle === "custom" && !options.symbols) {
        // use current symbols
        if (renderer.classBreakInfos.length === 1) {
            options.symbols = [
                modules.esriLang.clone(renderer.classBreakInfos[0].symbol),
                modules.esriLang.clone(renderer.classBreakInfos[0].symbol)
            ];
        }
        else {
            options.symbols = [
                modules.esriLang.clone(renderer.classBreakInfos[0].symbol),
                modules.esriLang.clone(renderer.classBreakInfos[1].symbol)
            ];
        }
    }
    const isContinuous = (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_2__.i)(options.isContinuous)
        ? options.isContinuous
        : !wasAboveAndBelow && isAboveAndBelow
            ? false // default to binary for above-and-below
            : !!colorVisVar;
    const hasPMS = ((_c = renderer.classBreakInfos[0].symbol) === null || _c === void 0 ? void 0 : _c.type) === "picture-marker" ||
        ((_d = renderer.classBreakInfos[renderer.classBreakInfos.length === 2 ? 1 : 0].symbol) === null || _d === void 0 ? void 0 : _d.type) === "picture-marker";
    const symbolStyle = (!wasAboveAndBelow && isAboveAndBelow) || (hasPMS && isContinuous)
        ? "caret"
        : isAboveAndBelow
            ? options.symbolStyle
                ? ["single", "custom"].indexOf(options.symbolStyle) > -1
                    ? undefined
                    : options.symbolStyle
                : !options.symbols
                    ? authInfo.univariateSymbolStyle !== "custom"
                        ? authInfo.univariateSymbolStyle
                        : undefined
                    : undefined
            : undefined;
    const reuseSymbols = !(hasPMS && isContinuous) && (options.symbolStyle === "custom" || (!options.symbolStyle && wasCustom));
    let symbolOptions = isAboveAndBelow && !(0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.B)(layer)
        ? {
            symbolStyle,
            symbols: symbolStyle
                ? undefined
                : ((_e = options.symbols) === null || _e === void 0 ? void 0 : _e.length) === 2 // custom; use new symbols
                    ? {
                        below: options.symbols[0],
                        above: options.symbols[1]
                    }
                    : ((_f = options.symbols) === null || _f === void 0 ? void 0 : _f.length) === 1 // single; we replace later
                        ? undefined
                        : reuseSymbols
                            ? {
                                below: renderer.classBreakInfos[0].symbol,
                                above: renderer.classBreakInfos[renderer.classBreakInfos.length === 2 ? 1 : 0].symbol
                            }
                            : undefined
        }
        : undefined;
    if (!(symbolOptions === null || symbolOptions === void 0 ? void 0 : symbolOptions.symbolStyle) && !(symbolOptions === null || symbolOptions === void 0 ? void 0 : symbolOptions.symbols)) {
        symbolOptions = undefined;
    }
    if (isContinuous && (symbolOptions === null || symbolOptions === void 0 ? void 0 : symbolOptions.symbols)) {
        // we want the symbols to be grey
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.r)(symbolOptions === null || symbolOptions === void 0 ? void 0 : symbolOptions.symbols.below, new modules.esriColor([0, 0, 0, 0.5]));
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.r)(symbolOptions === null || symbolOptions === void 0 ? void 0 : symbolOptions.symbols.above, new modules.esriColor([0, 0, 0, 0.5]));
    }
    const defaultSymbol = renderer.defaultSymbol;
    const defaultLabel = renderer.defaultLabel;
    const backgroundFillSymbol = renderer.backgroundFillSymbol;
    let isInverted = false;
    if (theme === (authInfo === null || authInfo === void 0 ? void 0 : authInfo.univariateTheme)) {
        // only if theme stays the same
        if ((0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_2__.i)(sizeVisVar.minSize)) {
            if (sizeVisVar.minSize.stops) {
                isInverted = sizeVisVar.minSize.stops[0].size > sizeVisVar.maxSize.stops[0].size;
            }
            else {
                isInverted = sizeVisVar.minSize > sizeVisVar.maxSize;
            }
        }
    }
    let needNewStatistics = false;
    if (options.normalizationField === null ||
        options.normalizationField ||
        (options.fieldInfos && options.fieldInfos[0])) {
        needNewStatistics = true;
    }
    const aboveAndBelowSwitch = (isAboveAndBelow && !wasAboveAndBelow) || (!isAboveAndBelow && wasAboveAndBelow);
    const minValue = options.discardMinMax
        ? undefined
        : (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_2__.i)(options.min)
            ? options.min
            : needNewStatistics
                ? undefined
                : authSizeVisVar
                    ? authSizeVisVar.minSliderValue
                    : undefined;
    const maxValue = options.discardMinMax
        ? undefined
        : (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_2__.i)(options.max)
            ? options.max
            : needNewStatistics
                ? undefined
                : authSizeVisVar
                    ? authSizeVisVar.maxSliderValue
                    : undefined;
    const wasBelow = authInfo.univariateTheme === "below";
    const isBelow = theme === "below";
    const belowSwitch = (isBelow && !wasBelow) || (!isBelow && wasBelow);
    const colorScheme = options.colorScheme || (!aboveAndBelowSwitch && (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.P)(theme));
    const config = {
        layer,
        view: mapView,
        field: fieldInfo.field,
        valueExpression: fieldInfo.expression,
        valueExpressionTitle: fieldInfo.expressionTitle,
        theme,
        legendOptions: options.legendOptions || sizeVisVar.legendOptions,
        colorOptions: {
            colorScheme,
            isContinuous
        },
        symbolOptions,
        normalizationField,
        minValue,
        maxValue,
        /* outlineOptimizationEnabled: mapImageSublayer
          ? false
          : isDefined(options.outlineOptimizationEnabled)
          ? options.outlineOptimizationEnabled
          : !!extras.sizeOutlineVisVar, */
        sizeOptimizationEnabled: mapImageSublayer || theme === "above-and-below"
            ? false
            : (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_2__.i)(options.sizeOptimizationEnabled)
                ? options.sizeOptimizationEnabled
                : !!(0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_2__.i)((_g = sizeVisVar.minSize) === null || _g === void 0 ? void 0 : _g.stops),
        defaultSymbolEnabled: (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_2__.i)(options.defaultSymbolEnabled)
            ? options.defaultSymbolEnabled
            : !!renderer.defaultSymbol,
        forBinning: ((_h = layer.featureReduction) === null || _h === void 0 ? void 0 : _h.type) === "binning"
    };
    // console.log("createColorSizeUnivariateRendererFromExisting-config", config);
    return modules.UnivariateColorSizeCreator.createContinuousRenderer(config).then((result) => {
        var _a, _b, _c, _d, _e;
        // console.log("createColorSizeUnivariateRendererFromExisting-success", result.renderer.toJSON());
        // reset handles and data values if necessary
        if (options.discardMinMax) {
            const colorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a)(renderer, "color");
            const newColorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a)(result.renderer, "color");
            colorVisVar === null || colorVisVar === void 0 ? void 0 : colorVisVar.stops.forEach((stop, idx) => (stop.value = newColorVisVar === null || newColorVisVar === void 0 ? void 0 : newColorVisVar.stops[idx].value));
            const sizeVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a)(renderer, "size");
            const newSizeVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a)(result.renderer, "size");
            const isAboveAndBelow = authInfo.univariateTheme === "above-and-below";
            if (isAboveAndBelow) {
                (_a = sizeVisVar.stops) === null || _a === void 0 ? void 0 : _a.forEach((stop, idx) => {
                    if (newSizeVisVar.stops) {
                        stop.value = newSizeVisVar.stops[idx].value;
                    }
                });
            }
            else {
                sizeVisVar.minDataValue = newSizeVisVar.minDataValue;
                sizeVisVar.maxDataValue = newSizeVisVar.maxDataValue;
            }
        }
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.l)(extras, result.renderer);
        if (isAboveAndBelow) {
            // save new colors
            const colorAt0 = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.t)(result.renderer.classBreakInfos[0].symbol);
            const colorAt1 = result.renderer.classBreakInfos[1]
                ? (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.t)(result.renderer.classBreakInfos[1].symbol)
                : colorAt0;
            if (!symbolStyle) {
                // single symbol; apply correct symbol
                if (((_b = options.symbols) === null || _b === void 0 ? void 0 : _b.length) === 1 && result.renderer.classBreakInfos.length === 1) {
                    // use new one; continuous scheme
                    result.renderer.classBreakInfos[0].symbol = options.symbols[0];
                }
                else if (((_c = options.symbols) === null || _c === void 0 ? void 0 : _c.length) === 2 && result.renderer.classBreakInfos.length === 1) {
                    // use new ones; binary scheme
                    const sym = modules.esriLang.clone(renderer.classBreakInfos[0].symbol);
                    result.renderer.classBreakInfos[0].symbol = sym;
                }
                else if (options.symbolStyle === "single" && result.renderer.classBreakInfos.length === 2) {
                    // use first symbol for both
                    let sym = modules.esriLang.clone(renderer.classBreakInfos[0].symbol);
                    result.renderer.classBreakInfos[0].symbol = sym.clone();
                    (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.r)(sym, (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.t)(result.renderer.classBreakInfos[1].symbol));
                    result.renderer.classBreakInfos[1].symbol = sym;
                    result.renderer.authoringInfo.univariateSymbolStyle = undefined;
                }
                else {
                    // keep old symbol(s)
                    let sym = modules.esriLang.clone(renderer.classBreakInfos[0].symbol);
                    result.renderer.classBreakInfos[0].symbol = sym;
                    if (result.renderer.classBreakInfos[1]) {
                        if (renderer.classBreakInfos[1]) {
                            sym = modules.esriLang.clone(renderer.classBreakInfos[1].symbol);
                        }
                        else {
                            // lines
                            sym = modules.esriLang.clone(renderer.classBreakInfos[0].symbol);
                        }
                        result.renderer.classBreakInfos[1].symbol = sym;
                    }
                }
            }
            const newColorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a)(result.renderer, "color");
            if (!newColorVisVar) {
                // was binary and is still binary
                if (!colorVisVar && !newColorVisVar) {
                    (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.r)(result.renderer.classBreakInfos[0].symbol, (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.t)(renderer.classBreakInfos[0].symbol));
                    (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.r)(result.renderer.classBreakInfos[1].symbol, (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.t)(renderer.classBreakInfos[1].symbol));
                }
                else {
                    // was continuous and is now binary
                    (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.r)(result.renderer.classBreakInfos[0].symbol, colorAt0);
                    if (result.renderer.classBreakInfos[1]) {
                        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.r)(result.renderer.classBreakInfos[1].symbol, colorAt1);
                    }
                }
            }
            else {
                // continuous; make symbols grey
                const grey = new modules.esriColor([0, 0, 0, 0.5]);
                (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.r)(result.renderer.classBreakInfos[0].symbol, grey);
                if (result.renderer.classBreakInfos[1]) {
                    (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.r)(result.renderer.classBreakInfos[1].symbol, grey);
                }
            }
        }
        else if (!isAboveAndBelow) {
            // high-to-low, above, below
            if (((_d = options.symbols) === null || _d === void 0 ? void 0 : _d.length) === 1) {
                // use new one
                result.renderer.classBreakInfos[0].symbol = options.symbols[0];
            }
            else if (((_e = renderer.classBreakInfos) === null || _e === void 0 ? void 0 : _e.length) === 1) {
                // keep previous one
                result.renderer.classBreakInfos[0].symbol = renderer.classBreakInfos[0].symbol;
            }
        }
        if (wasAboveAndBelow && isAboveAndBelow && !needNewStatistics) {
            // keep old stops
            const newSizeVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a)(result.renderer, "size");
            const newColorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a)(result.renderer, "color");
            newSizeVisVar.stops = modules.esriLang.clone(sizeVisVar.stops);
            if (newColorVisVar) {
                newColorVisVar.stops.forEach((colorStop, idx) => {
                    colorStop.value = sizeVisVar.stops[idx].value;
                });
            }
            if (result.renderer.classBreakInfos.length == 2) {
                result.renderer.classBreakInfos[0].maxValue = sizeVisVar.stops[2].value;
                result.renderer.classBreakInfos[1].minValue = sizeVisVar.stops[2].value;
            }
        }
        if (belowSwitch && colorScheme && colorVisVar) {
            // need to reverse color order
            const newColorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a)(result.renderer, "color");
            const len = colorVisVar.stops.length - 1;
            newColorVisVar.stops.forEach((colorStop, idx) => {
                colorStop.color = colorVisVar.stops[len - idx].color;
            });
        }
        if (defaultSymbol) {
            result.renderer.defaultSymbol = defaultSymbol;
            result.renderer.defaultLabel = defaultLabel;
        }
        if (backgroundFillSymbol) {
            result.renderer.backgroundFillSymbol = backgroundFillSymbol;
        }
        else {
            result.renderer.backgroundFillSymbol = undefined;
        }
        if (isInverted) {
            const sizeVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a)(result.renderer, "size");
            const tmp = sizeVisVar.minSize;
            sizeVisVar.minSize = sizeVisVar.maxSize;
            sizeVisVar.maxSize = tmp;
        }
        return Promise.resolve(result);
    }, (error) => Promise.reject(error));
}
function getColorSizeSliderStops() {
    const { layer, mapView } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer);
    const colorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a)(renderer, "color");
    const sizeVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a)(renderer, "size");
    const scale = mapView.scale;
    const { minSize, maxSize } = sizeVisVar;
    let stops;
    if (sizeVisVar.stops) {
        // above-and-below
        stops = colorVisVar.stops.map((colorStop, idx) => {
            const sizeStop = sizeVisVar.stops[idx];
            return {
                color: colorStop.color,
                size: sizeStop.size,
                value: sizeStop.value
            };
        });
    }
    else {
        const lastColorIdx = colorVisVar.stops.length - 1;
        if (typeof minSize === "number") {
            // high-to-low fixed
            stops = colorVisVar.stops.map((colorStop, idx) => {
                return {
                    color: colorStop.color,
                    value: colorStop.value,
                    size: idx === 0 ? minSize : idx === lastColorIdx ? maxSize : null
                };
            });
        }
        else {
            // hight-to-low automatic
            // find the minSize/maxSize for current scale
            let min, max;
            const lastSizeIdx = minSize.stops.length - 1;
            if (scale > minSize.stops[lastSizeIdx].value) {
                min = minSize.stops[lastSizeIdx].size;
                max = maxSize.stops[lastSizeIdx].size;
            }
            else {
                minSize.stops.forEach((sizeStop, idx) => {
                    if (scale <= sizeStop.value) {
                        min = sizeStop.size;
                        max = maxSize.stops[idx].size;
                    }
                });
            }
            const minData = sizeVisVar.minDataValue;
            const maxData = sizeVisVar.maxDataValue;
            const step = (maxData - minData) / 4;
            stops = colorVisVar.stops.map((colorStop, idx) => {
                return {
                    color: colorStop.color,
                    value: idx === 0 ? minData : idx === lastColorIdx ? maxData : minData + idx * step,
                    size: idx === 0 ? min : idx === lastColorIdx ? max : undefined
                };
            });
        }
    }
    return stops;
}



//# sourceMappingURL=colorSizeUnivariant-d266ac7c.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loading-69139907.js":
/*!*************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loading-69139907.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   r: () => (/* binding */ requestWrapper)
/* harmony export */ });
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */
let _loadingTimer;
let _requestCancelled;
function startLoading(node) {
    node.loading = true;
    _requestCancelled = false;
    if (_loadingTimer) {
        clearTimeout(_loadingTimer);
    }
    _loadingTimer = setTimeout(() => {
        // took too long
        endLoading(node);
        _requestCancelled = true;
    }, 60000);
}
function endLoading(node) {
    node.loading = false;
}
function requestWrapper(request, node) {
    startLoading(node);
    return request
        .then((result) => {
        endLoading(node);
        if (!_requestCancelled) {
            return Promise.resolve(result);
        }
        else {
            return Promise.reject(new Error("timeout"));
        }
    })
        .catch((error) => {
        endLoading(node);
        return Promise.reject(error);
    });
}



//# sourceMappingURL=loading-69139907.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,