"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_arcgis-categor-c041ab"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-category-tree.entry.js":
/*!***********************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-category-tree.entry.js ***!
  \***********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   arcgis_category_tree: () => (/* binding */ ArcgisCategoryTree)
/* harmony export */ });
/* harmony import */ var _index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-e3bf7da7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-e3bf7da7.js");
/* harmony import */ var _categories_ca134005_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./categories-ca134005.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/categories-ca134005.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */



const arcgisCategoryTreeCss = ".category-container{background-color:var(--calcite-color-foreground-1);width:-moz-fit-content;width:fit-content;padding:1rem}.category-row{list-style-type:none}.category-row:not(:last-child){margin-bottom:0.25rem}.subcategory-container{list-style-type:none;padding-inline-start:1rem;padding-top:0.5rem;margin-top:0px;margin-bottom:0px;margin-inline-start:0.375rem;border-left:1px solid var(--calcite-color-border-2)}.subcategory-container--root{margin-left:0px;margin-right:0px;padding-left:0px;padding-right:0px;padding-top:0px;border-width:0px}.category{display:flex;align-items:center;--calcite-label-margin-bottom:0}";

const ArcgisCategoryTree = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisCategorizeCategorySelected = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisCategorizeCategorySelected", 7);
        this.renderCategory = (category, parentPath) => {
            const { categorySelectionState, rootCategoryPath } = this;
            const { title, categories } = category;
            const isRoot = parentPath === rootCategoryPath;
            const fullPath = (0,_categories_ca134005_js__WEBPACK_IMPORTED_MODULE_1__.a)(parentPath, category, false);
            const selectionState = categorySelectionState[fullPath] || "none";
            return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("li", { class: "category-row", key: fullPath }, !isRoot && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { class: "category", layout: "inline" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-checkbox", { checked: selectionState !== "none", indeterminate: selectionState === "some", scale: "m", onCalciteCheckboxChange: () => this.arcgisCategorizeCategorySelected.emit(selectionState === "none"
                    ? { paths: [fullPath], selected: true }
                    : {
                        // This means we'll deselect the current path and also the children paths
                        paths: Object.keys(categorySelectionState).filter((path) => path.startsWith(fullPath)),
                        selected: false
                    }) }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-chip", { value: title }, title))), (categories === null || categories === void 0 ? void 0 : categories.length) > 0 && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("ul", { class: {
                    "subcategory-container": true,
                    "subcategory-container--root": isRoot
                } }, categories.map((curCategory) => this.renderCategory(curCategory, fullPath))))));
        };
        this.categorySchema = undefined;
        this.categorySelectionCountMap = undefined;
        this.total = undefined;
        this.rootCategoryPath = _categories_ca134005_js__WEBPACK_IMPORTED_MODULE_1__.U;
        this.categorySelectionState = {};
    }
    handleCountMapChange() {
        const { categorySelectionCountMap } = this;
        const categorySelectionState = {};
        Object.keys(categorySelectionCountMap)
            .filter((path) => categorySelectionCountMap[path].length)
            .forEach((path) => {
            var _a;
            const numSelected = ((_a = categorySelectionCountMap[path]) === null || _a === void 0 ? void 0 : _a.length) || 0;
            const newSelectionState = !numSelected
                ? "none"
                : numSelected === this.total
                    ? "all"
                    : "some";
            categorySelectionState[path] = newSelectionState;
            // Also traverse up the path and set the parent to "some" if any of the children are selected
            let curPath = "";
            path
                // Split by part will leave the first element as an empty string, so filter it out
                .split("/")
                .filter(Boolean)
                .forEach((part) => {
                curPath = `${curPath}/${part}`;
                if (newSelectionState === "none") {
                    return;
                }
                const curState = categorySelectionState[curPath];
                categorySelectionState[curPath] = curState === "all" ? "all" : newSelectionState;
            });
        });
        this.categorySelectionState = categorySelectionState;
    }
    componentWillLoad() {
        this.handleCountMapChange();
    }
    render() {
        const { renderCategory, categorySchema, rootCategoryPath } = this;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "category-container", slot: "filters" }, renderCategory({ title: "", categories: categorySchema }, rootCategoryPath)));
    }
    get el() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
    static get watchers() { return {
        "categorySelectionCountMap": ["handleCountMapChange"]
    }; }
};
ArcgisCategoryTree.style = arcgisCategoryTreeCss;



//# sourceMappingURL=arcgis-category-tree.entry.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/categories-ca134005.js":
/*!****************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/categories-ca134005.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   C: () => (/* binding */ CATEGORY_BASE_PATH),
/* harmony export */   U: () => (/* binding */ UPPER_CATEGORY_BASE_PATH),
/* harmony export */   a: () => (/* binding */ getCategoryUIPath),
/* harmony export */   g: () => (/* binding */ getRootCategoryPath)
/* harmony export */ });
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */
const CATEGORY_BASE_PATH = "/categories";
const UPPER_CATEGORY_BASE_PATH = "/Categories";

// TODO: add unit tests
/**
 * Construct the path of the category based on the parent path and the category title
 */
const getCategoryUIPath = (parentPath, category, lowerCase = true) => {
    const basePath = parentPath !== null && parentPath !== void 0 ? parentPath : "";
    return `${basePath}${basePath.endsWith("/") ? "" : "/"}${lowerCase ? category.title.toLocaleLowerCase() : category.title}`;
};
/**
 * Find the root node title to use for categories
 */
function getRootCategoryPath(categories) {
    var _a;
    let categoryTitle = (_a = categories === null || categories === void 0 ? void 0 : categories[0]) === null || _a === void 0 ? void 0 : _a.title;
    if (categoryTitle && categoryTitle.charAt(0) !== "/") {
        categoryTitle = `/${categoryTitle}`;
    }
    return categoryTitle || UPPER_CATEGORY_BASE_PATH;
}



//# sourceMappingURL=categories-ca134005.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,