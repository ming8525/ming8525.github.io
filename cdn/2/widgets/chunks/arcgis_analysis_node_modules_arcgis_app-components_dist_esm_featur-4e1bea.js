"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_featur-4e1bea"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/feature-layer-17b64946.js":
/*!*******************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/feature-layer-17b64946.js ***!
  \*******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ esriGeometryTypes),
/* harmony export */   b: () => (/* binding */ featureLayerPreferences),
/* harmony export */   e: () => (/* binding */ esriDataTypes),
/* harmony export */   f: () => (/* binding */ featureLayerTypes),
/* harmony export */   g: () => (/* binding */ geometryTypes),
/* harmony export */   r: () => (/* binding */ renderers)
/* harmony export */ });
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */
const featureLayerPreferences = ["captureGPS", "enableZDefaults", "enableMDefaults"];
const featureLayerTypes = ["point", "line", "polygon", "multipatch", "multipoint", "table"];
const esriGeometryTypes = {
    esriGeometryPoint: "point",
    esriGeometryPolyline: "line",
    esriGeometryPolygon: "polygon",
    esriGeometryMultiPatch: "multipatch",
    esriGeometryMultipoint: "multipoint"
};
const esriDataTypes = {
    esriFieldTypeOID: "oid",
    esriFieldTypeBoolean: "boolean",
    esriFieldTypeString: "string",
    esriFieldTypeDouble: "number",
    esriFieldTypeInteger: "number",
    esriFieldTypeSmallInteger: "number",
    esriFieldTypeSingle: "number",
    esriFieldTypeGlobalID: "string",
    esriFieldTypeDate: "date",
    esriFieldTypeBigInteger: "number",
    esriFieldTypeDateOnly: "date",
    esriFieldTypeTimeOnly: "date",
    esriFieldTypeTimestampOffset: "date"
};
const geometryTypes = {
    point: "esriGeometryPoint",
    line: "esriGeometryPolyline",
    polygon: "esriGeometryPolygon",
    multipatch: "esriGeometryMultiPatch",
    multipoint: "esriGeometryMultipoint"
};
// TODO: strictly type this
const renderers = {
    line: {
        type: "simple",
        symbol: {
            type: "esriSLS",
            style: "esriSLSSolid",
            color: [165, 83, 183, 255],
            width: 1
        }
    },
    point: {
        type: "simple",
        symbol: {
            type: "esriPMS",
            url: "RedSphere.png",
            imageData: "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",
            contentType: "image/png",
            width: 15,
            height: 15
        }
    },
    multipoint: {
        type: "simple",
        symbol: {
            type: "esriPMS",
            url: "RedSphere.png",
            imageData: "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",
            contentType: "image/png",
            width: 15,
            height: 15
        }
    },
    polygon: {
        type: "simple",
        symbol: {
            type: "esriSFS",
            style: "esriSFSSolid",
            color: [76, 129, 205, 191],
            outline: {
                type: "esriSLS",
                style: "esriSLSSolid",
                color: [0, 0, 0, 255],
                width: 0.75
            }
        }
    },
    // We don't allow adding multipatch layers in from-scratch flow, so no need for this
    multipatch: {}
};



//# sourceMappingURL=feature-layer-17b64946.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/feature-layer-79fb302c.js":
/*!*******************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/feature-layer-79fb302c.js ***!
  \*******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ getNewInfoFromStore),
/* harmony export */   b: () => (/* binding */ saveNewInfoToStore),
/* harmony export */   c: () => (/* binding */ combineFeatureLayerInfos),
/* harmony export */   d: () => (/* binding */ layerUseZValues),
/* harmony export */   e: () => (/* binding */ layerUseMValues),
/* harmony export */   g: () => (/* binding */ getFeatureLayerIndexFromUrl),
/* harmony export */   l: () => (/* binding */ layerCaptureGPS),
/* harmony export */   m: () => (/* binding */ mergeLayerPreference),
/* harmony export */   s: () => (/* binding */ saveFeatureLayerSearchResult)
/* harmony export */ });
/* harmony import */ var _config_75adf962_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./config-75adf962.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/config-75adf962.js");
/* harmony import */ var _functional_44de8fcf_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./functional-44de8fcf.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-44de8fcf.js");
/* harmony import */ var _guid_aeaed84d_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./guid-aeaed84d.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/guid-aeaed84d.js");
/* harmony import */ var _url_4c3ae54c_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./url-4c3ae54c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/url-4c3ae54c.js");
/* harmony import */ var _thumbnail_bcb89e69_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./thumbnail-bcb89e69.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/thumbnail-bcb89e69.js");
/* harmony import */ var _item_properties_10491b2e_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./item-properties-10491b2e.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/item-properties-10491b2e.js");
/* harmony import */ var _add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./add-item-dbbe2f57.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/add-item-dbbe2f57.js");
/* harmony import */ var _feature_layer_17b64946_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./feature-layer-17b64946.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/feature-layer-17b64946.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */









const lineAndPolygonLayerCaptureGPSFields = [
    {
        name: "esrignss_avg_h_rms",
        type: "esriFieldTypeDouble",
        alias: "Average horizontal accuracy (m)",
        sqlType: "sqlTypeOther",
        nullable: true,
        editable: true,
        domain: null,
        defaultValue: null
    },
    {
        name: "esrignss_avg_v_rms",
        type: "esriFieldTypeDouble",
        alias: "Average vertical accuracy (m)",
        sqlType: "sqlTypeOther",
        nullable: true,
        editable: true,
        domain: null,
        defaultValue: null
    },
    {
        name: "esrignss_worst_h_rms",
        type: "esriFieldTypeDouble",
        alias: "Worst horizontal accuracy (m)",
        sqlType: "sqlTypeOther",
        nullable: true,
        editable: true,
        domain: null,
        defaultValue: null
    },
    {
        name: "esrignss_worst_v_rms",
        type: "esriFieldTypeDouble",
        alias: "Worst vertical accuracy (m)",
        sqlType: "sqlTypeOther",
        nullable: true,
        editable: true,
        domain: null,
        defaultValue: null
    },
    {
        name: "esrignss_worst_fixtype",
        type: "esriFieldTypeSmallInteger",
        alias: "Worst fix type",
        sqlType: "sqlTypeOther",
        nullable: true,
        editable: true,
        domain: {
            type: "codedValue",
            name: "ESRI_FIX_TYPE_DOMAIN",
            codedValues: [
                { name: "NoFix", code: 0 },
                { name: "GPS", code: 1 },
                { name: "DifferentialGPS", code: 2 },
                { name: "PrecisePositioningService", code: 3 },
                { name: "RTKFixed", code: 4 },
                { name: "RTKFloat", code: 5 }
            ]
        },
        defaultValue: null
    },
    {
        name: "esrignss_manual_locations",
        type: "esriFieldTypeInteger",
        alias: "Number of manual locations",
        sqlType: "sqlTypeOther",
        nullable: true,
        editable: true,
        domain: null,
        defaultValue: null
    }
];
const pointLayerCaptureGPSFields = [
    {
        name: "esrignss_speed",
        type: "esriFieldTypeDouble",
        alias: "Speed (km/h)",
        sqlType: "sqlTypeOther",
        nullable: true,
        editable: true,
        domain: null,
        defaultValue: null
    },
    {
        name: "esrignss_direction",
        type: "esriFieldTypeDouble",
        alias: "Direction of travel (°)",
        sqlType: "sqlTypeOther",
        nullable: true,
        editable: true,
        domain: null,
        defaultValue: null
    },
    {
        name: "esrisnsr_azimuth",
        type: "esriFieldTypeDouble",
        alias: "Compass reading (°)",
        sqlType: "sqlTypeOther",
        nullable: true,
        editable: true,
        domain: null,
        defaultValue: null
    },
    {
        name: "esrignss_positionsourcetype",
        type: "esriFieldTypeInteger",
        alias: "Position source type",
        sqlType: "sqlTypeOther",
        nullable: true,
        editable: true,
        domain: {
            type: "codedValue",
            name: "ESRI_POSITIONSOURCETYPE_DOMAIN",
            codedValues: [
                { name: "Unknown", code: 0 },
                { name: "User defined", code: 1 },
                { name: "Integrated (System) Location Provider", code: 2 },
                { name: "External GNSS Receiver", code: 3 },
                { name: "Network Location Provider", code: 4 },
                { name: "Snapped", code: 5 }
            ]
        },
        defaultValue: null
    },
    {
        name: "esrignss_receiver",
        type: "esriFieldTypeString",
        alias: "Receiver Name",
        sqlType: "sqlTypeOther",
        length: 50,
        nullable: true,
        editable: true,
        domain: null,
        defaultValue: null
    },
    {
        name: "esrignss_h_rms",
        type: "esriFieldTypeDouble",
        alias: "Horizontal Accuracy (m)",
        sqlType: "sqlTypeOther",
        nullable: true,
        editable: true,
        domain: null,
        defaultValue: null
    },
    {
        name: "esrignss_v_rms",
        type: "esriFieldTypeDouble",
        alias: "Vertical Accuracy (m)",
        sqlType: "sqlTypeOther",
        nullable: true,
        editable: true,
        domain: null,
        defaultValue: null
    },
    {
        name: "esrignss_latitude",
        type: "esriFieldTypeDouble",
        alias: "Latitude",
        sqlType: "sqlTypeOther",
        nullable: true,
        editable: true,
        domain: null,
        defaultValue: null
    },
    {
        name: "esrignss_longitude",
        type: "esriFieldTypeDouble",
        alias: "Longitude",
        sqlType: "sqlTypeOther",
        nullable: true,
        editable: true,
        domain: null,
        defaultValue: null
    },
    {
        name: "esrignss_altitude",
        type: "esriFieldTypeDouble",
        alias: "Altitude",
        sqlType: "sqlTypeOther",
        nullable: true,
        editable: true,
        domain: null,
        defaultValue: null
    },
    {
        name: "esrignss_pdop",
        type: "esriFieldTypeDouble",
        alias: "PDOP",
        sqlType: "sqlTypeOther",
        nullable: true,
        editable: true,
        domain: null,
        defaultValue: null
    },
    {
        name: "esrignss_hdop",
        type: "esriFieldTypeDouble",
        alias: "HDOP",
        sqlType: "sqlTypeOther",
        nullable: true,
        editable: true,
        domain: null,
        defaultValue: null
    },
    {
        name: "esrignss_vdop",
        type: "esriFieldTypeDouble",
        alias: "VDOP",
        sqlType: "sqlTypeOther",
        nullable: true,
        editable: true,
        domain: null,
        defaultValue: null
    },
    {
        name: "esrignss_fixtype",
        type: "esriFieldTypeSmallInteger",
        alias: "Fix Type",
        sqlType: "sqlTypeOther",
        nullable: true,
        editable: true,
        domain: {
            type: "codedValue",
            name: "ESRI_FIX_TYPE_DOMAIN",
            codedValues: [
                { name: "NoFix", code: 0 },
                { name: "GPS", code: 1 },
                { name: "DifferentialGPS", code: 2 },
                { name: "PrecisePositioningService", code: 3 },
                { name: "RTKFixed", code: 4 },
                { name: "RTKFloat", code: 5 }
            ]
        },
        defaultValue: null
    },
    {
        name: "esrignss_correctionage",
        type: "esriFieldTypeDouble",
        alias: "Correction Age",
        sqlType: "sqlTypeOther",
        nullable: true,
        editable: true,
        domain: null,
        defaultValue: null
    },
    {
        name: "esrignss_stationid",
        type: "esriFieldTypeSmallInteger",
        alias: "Station ID",
        sqlType: "sqlTypeOther",
        nullable: true,
        editable: true,
        domain: null,
        defaultValue: null
    },
    {
        name: "esrignss_numsats",
        type: "esriFieldTypeSmallInteger",
        alias: "Number of Satellites",
        sqlType: "sqlTypeOther",
        nullable: true,
        editable: true,
        domain: {
            type: "range",
            name: "ESRI_NUM_SATS_DOMAIN",
            range: [0, 99]
        },
        defaultValue: null
    },
    {
        name: "esrignss_fixdatetime",
        type: "esriFieldTypeDate",
        alias: "Fix Time",
        sqlType: "sqlTypeOther",
        length: 8,
        nullable: true,
        editable: true,
        domain: null,
        defaultValue: null
    },
    {
        name: "esrignss_avg_h_rms",
        type: "esriFieldTypeDouble",
        alias: "Average Horizontal Accuracy (m)",
        sqlType: "sqlTypeOther",
        nullable: true,
        editable: true,
        domain: null,
        defaultValue: null
    },
    {
        name: "esrignss_avg_v_rms",
        type: "esriFieldTypeDouble",
        alias: "Average Vertical Accuracy (m)",
        sqlType: "sqlTypeOther",
        nullable: true,
        editable: true,
        domain: null,
        defaultValue: null
    },
    {
        name: "esrignss_avg_positions",
        type: "esriFieldTypeInteger",
        alias: "Averaged Positions",
        sqlType: "sqlTypeOther",
        nullable: true,
        editable: true,
        domain: null,
        defaultValue: null
    },
    {
        name: "esrignss_h_stddev",
        type: "esriFieldTypeDouble",
        alias: "Standard Deviation (m)",
        sqlType: "sqlTypeOther",
        nullable: true,
        editable: true,
        domain: null,
        defaultValue: null
    }
];
const getTemplateFromType = (type) => {
    switch (type) {
        case "point":
        case "multipoint":
            return [
                {
                    name: "New Feature",
                    description: "",
                    drawingTool: "esriFeatureEditToolPoint",
                    prototype: {
                        attributes: {}
                    }
                }
            ];
        case "line":
            return [
                {
                    name: "New Feature",
                    description: "",
                    drawingTool: "esriFeatureEditToolLine",
                    prototype: {
                        attributes: {}
                    }
                }
            ];
        case "polygon":
            return [
                {
                    name: "New Feature",
                    description: "",
                    drawingTool: "esriFeatureEditToolPolygon",
                    prototype: {
                        attributes: {}
                    }
                }
            ];
        default:
            return [];
    }
};
const getCaptureGPSFieldForGeometryType = (type) => {
    switch (type) {
        case "line":
        case "polygon":
            return [...lineAndPolygonLayerCaptureGPSFields];
        case "point":
            return [...pointLayerCaptureGPSFields];
        default:
            return [];
    }
};
const getCaptureGPSFieldForEsriGeometryType = (type) => {
    switch (type) {
        case "esriGeometryPolyline":
        case "esriGeometryPolygon":
            return [...lineAndPolygonLayerCaptureGPSFields];
        case "esriGeometryPoint":
            return [...pointLayerCaptureGPSFields];
        default:
            return [];
    }
};
const getSharedLayerProperties = ({ id, name, type, layerPreference: { captureGPS, enableZDefaults, enableMDefaults }, portal }) => (Object.assign(Object.assign({ currentVersion: 10.51, id,
    name, geometryType: _feature_layer_17b64946_js__WEBPACK_IMPORTED_MODULE_7__.g[type], type: "Feature Layer", displayField: "", description: "", copyrightText: "", defaultVisibility: true, editingInfo: { lastEditDate: null }, relationships: [], isDataVersioned: false, supportsAppend: true, supportsCalculate: true, supportsTruncate: true, supportsAttachmentsByUploadId: true, supportsAttachmentsResizing: true, supportsRollbackOnFailureParameter: true, supportsStatistics: true, supportsAdvancedQueries: true, supportsValidateSql: true, supportsCoordinatesQuantization: true, supportsApplyEditsWithGlobalIds: false, supportsMultiScaleGeometry: !portal.isPortal, hasGeometryProperties: true, geometryProperties: {
        shapeLengthFieldName: "Shape__Length",
        units: "esriMeters"
    }, advancedQueryCapabilities: {
        supportsPagination: true,
        supportsPaginationOnAggregatedQueries: true,
        supportsQueryRelatedPagination: true,
        supportsQueryWithDistance: true,
        supportsReturningQueryExtent: true,
        supportsStatistics: true,
        supportsOrderBy: true,
        supportsDistinct: true,
        supportsQueryWithResultType: true,
        supportsSqlExpression: true,
        supportsAdvancedQueryRelated: true,
        supportsCountDistinct: true,
        supportsLod: true,
        supportsReturningGeometryCentroid: false,
        supportsReturningGeometryProperties: true,
        supportsQueryWithDatumTransformation: true,
        supportsHavingClause: true,
        supportsOutFieldSQLExpression: true
    }, useStandardizedQueries: true, minScale: 0, maxScale: 0, extent: {
        xmin: -17811118.526923772,
        ymin: -15538711.096309224,
        xmax: 17811118.526923772,
        ymax: 15538711.096309224,
        spatialReference: { wkid: 102100, latestWkid: 3857 }
    }, drawingInfo: Object.assign({ renderer: _feature_layer_17b64946_js__WEBPACK_IMPORTED_MODULE_7__.r[type] }, (type === "point" ? {} : { transparency: 0, labelingInfo: null })), allowGeometryUpdates: true, hasAttachments: true, htmlPopupType: "esriServerHTMLPopupTypeNone", hasMetadata: true, hasM: enableMDefaults, hasZ: enableZDefaults, objectIdField: "OBJECTID", uniqueIdField: {
        name: "OBJECTID",
        isSystemMaintained: true
    }, fields: [
        {
            name: "OBJECTID",
            type: "esriFieldTypeOID",
            alias: "OBJECTID",
            sqlType: "sqlTypeOther",
            nullable: false,
            editable: false,
            domain: null,
            defaultValue: null
        },
        ...(captureGPS ? getCaptureGPSFieldForGeometryType(type) : [])
    ], capabilities: "Query,Editing,Create,Update,Delete,Sync", maxRecordCount: 2000, supportedQueryFormats: "JSON, geoJSON, PBF", indexes: [], types: [], templates: getTemplateFromType(type), globalIdField: "", hasStaticData: false }, (enableZDefaults ? { enableZDefaults: true } : {})), (enableMDefaults ? { enableMDefaults: true } : {})));
const getTableProperties = ({ name, id }) => ({
    currentVersion: 10.7,
    id,
    name,
    type: "Table",
    displayField: "",
    description: "",
    copyrightText: "",
    defaultVisibility: true,
    editingInfo: {
        lastEditDate: null
    },
    relationships: [],
    isDataVersioned: false,
    supportsAppend: true,
    supportsCalculate: true,
    supportsASyncCalculate: true,
    supportsTruncate: true,
    supportsAttachmentsByUploadId: true,
    supportsAttachmentsResizing: true,
    supportsRollbackOnFailureParameter: true,
    supportsStatistics: true,
    supportsExceedsLimitStatistics: true,
    supportsAdvancedQueries: true,
    supportsValidateSql: true,
    supportsCoordinatesQuantization: true,
    supportsFieldDescriptionProperty: true,
    supportsQuantizationEditMode: true,
    supportsApplyEditsWithGlobalIds: false,
    advancedQueryCapabilities: {
        supportsPagination: true,
        supportsPaginationOnAggregatedQueries: true,
        supportsQueryRelatedPagination: true,
        supportsQueryWithDistance: true,
        supportsReturningQueryExtent: true,
        supportsStatistics: true,
        supportsOrderBy: true,
        supportsDistinct: true,
        supportsQueryWithResultType: true,
        supportsSqlExpression: true,
        supportsAdvancedQueryRelated: true,
        supportsCountDistinct: true,
        supportsPercentileStatistics: true,
        supportsLod: true,
        supportsQueryWithLodSR: false,
        supportedLodTypes: ["geohash"],
        supportsReturningGeometryCentroid: false,
        supportsQueryWithDatumTransformation: true,
        supportsHavingClause: true,
        supportsOutFieldSQLExpression: true,
        supportsMaxRecordCountFactor: true,
        supportsTopFeaturesQuery: true,
        supportsQueryWithCacheHint: true
    },
    useStandardizedQueries: true,
    allowGeometryUpdates: true,
    hasAttachments: false,
    htmlPopupType: "esriServerHTMLPopupTypeNone",
    hasM: false,
    hasZ: false,
    objectIdField: "OBJECTID",
    uniqueIdField: {
        name: "OBJECTID",
        isSystemMaintained: true
    },
    globalIdField: "",
    typeIdField: "",
    fields: [
        {
            name: "OBJECTID",
            type: "esriFieldTypeOID",
            alias: "OBJECTID",
            sqlType: "sqlTypeOther",
            nullable: false,
            editable: false,
            domain: null,
            defaultValue: null
        }
    ],
    indexes: [],
    types: [],
    templates: [],
    supportedQueryFormats: "JSON, geoJSON, PBF",
    hasStaticData: false,
    maxRecordCount: 2000,
    standardMaxRecordCount: 32000,
    tileMaxRecordCount: 8000,
    maxRecordCountFactor: 1,
    capabilities: "Query,Editing,Create,Update,Delete,Sync",
    syncEnabled: true
});
function getFullLayerInfo(id, name, type, layerPreference, portal) {
    if (type === "table") {
        // TODO: figure this out
        return getTableProperties({ id, name });
    }
    return getSharedLayerProperties({
        id,
        name,
        type: type,
        layerPreference,
        portal
    });
}
const saveNewInfoToStore = (newLayerInfos, layerPreference, portal) => {
    var _a, _b;
    const featureLayerInfo = newLayerInfos.map(({ name, type }, index) => getFullLayerInfo(index, name, type, layerPreference, portal));
    const layers = [];
    const tables = [];
    featureLayerInfo.forEach((info, index) => {
        const newInfo = Object.assign(Object.assign({}, info), { id: index });
        if (newInfo.type === "Table") {
            tables.push(newInfo);
        }
        else {
            layers.push(newInfo);
        }
    });
    _add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_6__.a.serviceInfo = Object.assign(Object.assign(Object.assign({}, _add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_6__.a.serviceInfo), layerPreference), { name: (_b = (_a = _add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_6__.a.serviceInfo) === null || _a === void 0 ? void 0 : _a.name) !== null && _b !== void 0 ? _b : "", layers,
        tables });
};
const getNewInfoFromStore = () => {
    const { layers = [], tables = [], enableZDefaults = false, enableMDefaults = false, captureGPS = false } = _add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_6__.a.serviceInfo || {};
    const revertEsriGeometryLookup = {};
    Object.keys(_feature_layer_17b64946_js__WEBPACK_IMPORTED_MODULE_7__.g).forEach((geometryType) => {
        revertEsriGeometryLookup[_feature_layer_17b64946_js__WEBPACK_IMPORTED_MODULE_7__.g[geometryType]] = geometryType;
    });
    const allLayersAndTables = combineFeatureLayerInfos(layers, tables);
    const newLayerInfos = allLayersAndTables.map((item) => ({
        id: (0,_guid_aeaed84d_js__WEBPACK_IMPORTED_MODULE_2__.g)(),
        name: item.name,
        type: item.type === "Feature Layer" ? revertEsriGeometryLookup[item.geometryType] : "table"
    }));
    return { newLayerInfos, layerPreference: { captureGPS, enableZDefaults, enableMDefaults } };
};
const combineFeatureLayerInfos = (layers, tables) => [...layers, ...tables].sort((itemA, itemB) => itemA.id - itemB.id);
const saveFeatureLayerSearchResult = (searchResult) => {
    _add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_6__.a.typeKeywords = searchResult.typeKeywords;
    _add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_6__.a.thumbnailURL = (0,_thumbnail_bcb89e69_js__WEBPACK_IMPORTED_MODULE_4__.g)(_config_75adf962_js__WEBPACK_IMPORTED_MODULE_0__.c.portal, searchResult);
    _item_properties_10491b2e_js__WEBPACK_IMPORTED_MODULE_5__.i.tags = searchResult.tags;
    _item_properties_10491b2e_js__WEBPACK_IMPORTED_MODULE_5__.i.snippet = searchResult.snippet || "";
};
const layerCaptureGPS = (layerInfo) => layerInfo.type === "Feature Layer" &&
    getCaptureGPSFieldForEsriGeometryType(layerInfo.geometryType).every((field) => (layerInfo.fields || []).find((layerField) => layerField.alias === field.alias) != null);
const layerUseZValues = (layerInfo) => !!layerInfo.enableZDefaults || !!layerInfo.hasZ;
const layerUseMValues = (layerInfo) => !!layerInfo.enableMDefaults || !!layerInfo.hasM;
const mergeLayerPreference = (layerInfos, layerPreference) => {
    const layers = layerInfos.map((layerInfo) => {
        const newLayer = Object.assign({}, layerInfo);
        if (layerPreference.enableZDefaults) {
            newLayer.enableZDefaults = true;
            newLayer.hasZ = true;
            if (!layerUseZValues(layerInfo)) {
                newLayer.zDefault = 0;
            }
        }
        else {
            newLayer.enableZDefaults = false;
            newLayer.hasZ = false;
            delete newLayer.zDefault;
        }
        if (layerPreference.enableMDefaults) {
            newLayer.enableMDefaults = true;
            newLayer.hasM = true;
        }
        else {
            newLayer.enableMDefaults = false;
            newLayer.hasM = false;
        }
        if (layerInfo.type === "Feature Layer") {
            const fieldList = getCaptureGPSFieldForEsriGeometryType(layerInfo.geometryType);
            if (layerPreference.captureGPS) {
                if (layerInfo.geometryType !== "esriGeometryPoint") {
                    newLayer.hasAttachments = true;
                }
                if (!layerCaptureGPS(layerInfo)) {
                    newLayer.fields = (0,_functional_44de8fcf_js__WEBPACK_IMPORTED_MODULE_1__.u)([...newLayer.fields, ...fieldList], (layerInfo) => layerInfo.name);
                }
            }
            else {
                newLayer.fields = newLayer.fields.filter((layerField) => !fieldList.some((field) => field.name === layerField.name));
            }
        }
        return newLayer;
    });
    return layers;
};
const getFeatureLayerIndexFromUrl = (url) => {
    var _a;
    const { index, serverType } = (_a = (0,_url_4c3ae54c_js__WEBPACK_IMPORTED_MODULE_3__.p)(url)) !== null && _a !== void 0 ? _a : {};
    if (serverType !== "FeatureServer") {
        return { error: { code: "invalidFeatureLayerUrl" } };
    }
    return { result: index };
};



//# sourceMappingURL=feature-layer-79fb302c.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2lkZ2V0cy9jaHVua3MvYXJjZ2lzX2FuYWx5c2lzX25vZGVfbW9kdWxlc19hcmNnaXNfYXBwLWNvbXBvbmVudHNfZGlzdF9lc21fZmVhdHVyLTRlMWJlYS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBOztBQUVnSjs7QUFFaEo7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ3hGQTtBQUNBO0FBQ0E7QUFDQTtBQUN3RDtBQUNDO0FBQ1Y7QUFDYTtBQUNJO0FBQ1M7QUFDZDtBQUNzQjs7QUFFakY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFD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QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNDQUFzQywwREFBUTtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksb0JBQW9CLFFBQVEsbURBQWtCO0FBQzFEO0FBQ0EsaUJBQWlCLFNBQVM7QUFDMUI7QUFDQSxhQUFhO0FBQ2I7O0FBRThQOztBQUU5UCIsInNvdXJjZXMiOlsid2VicGFjazovL2V4Yi1jbGllbnQvLi9leHRlbnNpb25zL3dpZGdldHMvYXJjZ2lzL2FuYWx5c2lzL25vZGVfbW9kdWxlcy9AYXJjZ2lzL2FwcC1jb21wb25lbnRzL2Rpc3QvZXNtL2ZlYXR1cmUtbGF5ZXItMTdiNjQ5NDYuanMiLCJ3ZWJwYWNrOi8vZXhiLWNsaWVudC8uL2V4dGVuc2lvbnMvd2lkZ2V0cy9hcmNnaXMvYW5hbHlzaXMvbm9kZV9tb2R1bGVzL0BhcmNnaXMvYXBwLWNvbXBvbmVudHMvZGlzdC9lc20vZmVhdHVyZS1sYXllci03OWZiMzAyYy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEFsbCBtYXRlcmlhbCBjb3B5cmlnaHQgRVNSSSwgQWxsIFJpZ2h0cyBSZXNlcnZlZCwgdW5sZXNzIG90aGVyd2lzZSBzcGVjaWZpZWQuXG4gKiB2NC4wLjU4XG4gKi9cbmNvbnN0IGZlYXR1cmVMYXllclByZWZlcmVuY2VzID0gW1wiY2FwdHVyZUdQU1wiLCBcImVuYWJsZVpEZWZhdWx0c1wiLCBcImVuYWJsZU1EZWZhdWx0c1wiXTtcbmNvbnN0IGZlYXR1cmVMYXllclR5cGVzID0gW1wicG9pbnRcIiwgXCJsaW5lXCIsIFwicG9seWdvblwiLCBcIm11bHRpcGF0Y2hcIiwgXCJtdWx0aXBvaW50XCIsIFwidGFibGVcIl07XG5jb25zdCBlc3JpR2VvbWV0cnlUeXBlcyA9IHtcbiAgICBlc3JpR2VvbWV0cnlQb2ludDogXCJwb2ludFwiLFxuICAgIGVzcmlHZW9tZXRyeVBvbHlsaW5lOiBcImxpbmVcIixcbiAgICBlc3JpR2VvbWV0cnlQb2x5Z29uOiBcInBvbHlnb25cIixcbiAgICBlc3JpR2VvbWV0cnlNdWx0aVBhdGNoOiBcIm11bHRpcGF0Y2hcIixcbiAgICBlc3JpR2VvbWV0cnlNdWx0aXBvaW50OiBcIm11bHRpcG9pbnRcIlxufTtcbmNvbnN0IGVzcmlEYXRhVHlwZXMgPSB7XG4gICAgZXNyaUZpZWxkVHlwZU9JRDogXCJvaWRcIixcbiAgICBlc3JpRmllbGRUeXBlQm9vbGVhbjogXCJib29sZWFuXCIsXG4gICAgZXNyaUZpZWxkVHlwZVN0cmluZzogXCJzdHJpbmdcIixcbiAgICBlc3JpRmllbGRUeXBlRG91YmxlOiBcIm51bWJlclwiLFxuICAgIGVzcmlGaWVsZFR5cGVJbnRlZ2VyOiBcIm51bWJlclwiLFxuICAgIGVzcmlGaWVsZFR5cGVTbWFsbEludGVnZXI6IFwibnVtYmVyXCIsXG4gICAgZXNyaUZpZWxkVHlwZVNpbmdsZTogXCJudW1iZXJcIixcbiAgICBlc3JpRmllbGRUeXBlR2xvYmFsSUQ6IFwic3RyaW5nXCIsXG4gICAgZXNyaUZpZWxkVHlwZURhdGU6IFwiZGF0ZVwiLFxuICAgIGVzcmlGaWVsZFR5cGVCaWdJbnRlZ2VyOiBcIm51bWJlclwiLFxuICAgIGVzcmlGaWVsZFR5cGVEYXRlT25seTogXCJkYXRlXCIsXG4gICAgZXNyaUZpZWxkVHlwZVRpbWVPbmx5OiBcImRhdGVcIixcbiAgICBlc3JpRmllbGRUeXBlVGltZXN0YW1wT2Zmc2V0OiBcImRhdGVcIlxufTtcbmNvbnN0IGdlb21ldHJ5VHlwZXMgPSB7XG4gICAgcG9pbnQ6IFwiZXNyaUdlb21ldHJ5UG9pbnRcIixcbiAgICBsaW5lOiBcImVzcmlHZW9tZXRyeVBvbHlsaW5lXCIsXG4gICAgcG9seWdvbjogXCJlc3JpR2VvbWV0cnlQb2x5Z29uXCIsXG4gICAgbXVsdGlwYXRjaDogXCJlc3JpR2VvbWV0cnlNdWx0aVBhdGNoXCIsXG4gICAgbXVsdGlwb2ludDogXCJlc3JpR2VvbWV0cnlNdWx0aXBvaW50XCJcbn07XG4vLyBUT0RPOiBzdHJpY3RseSB0eXBlIHRoaXNcbmNvbnN0IHJlbmRlcmVycyA9IHtcbiAgICBsaW5lOiB7XG4gICAgICAgIHR5cGU6IFwic2ltcGxlXCIsXG4gICAgICAgIHN5bWJvbDoge1xuICAgICAgICAgICAgdHlwZTogXCJlc3JpU0xTXCIsXG4gICAgICAgICAgICBzdHlsZTogXCJlc3JpU0xTU29saWRcIixcbiAgICAgICAgICAgIGNvbG9yOiBbMTY1LCA4MywgMTgzLCAyNTVdLFxuICAgICAgICAgICAgd2lkdGg6IDFcbiAgICAgICAgfVxuICAgIH0sXG4gICAgcG9pbnQ6IHtcbiAgICAgICAgdHlwZTogXCJzaW1wbGVcIixcbiAgICAgICAgc3ltYm9sOiB7XG4gICAgICAgICAgICB0eXBlOiBcImVzcmlQTVNcIixcbiAgICAgICAgICAgIHVybDogXCJSZWRTcGhlcmUucG5nXCIsXG4gICAgICAgICAgICBpbWFnZURhdGE6IFwiaVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUVBQUFBQkFDQVlBQUFDcWFYSGVBQUFBQkdkQlRVRUFBTEdQQy94aEJRQUFBQ0JqU0ZKTkFBQjZKZ0FBZ0lRQUFQb0FBQUNBNkFBQWRUQUFBT3BnQUFBNm1BQUFGM0NjdWxFOEFBQUFDWEJJV1hNQUFBN0RBQUFPd3dISGI2aGtBQUFBR1hSRldIUlRiMlowZDJGeVpRQlFZV2x1ZEM1T1JWUWdkak11TlM0eFR1YzQrUUFBQjNWSlJFRlVlRjd0bVBsVGxFY2V4bnZlOTRVNW1BTlFiZ1FTYmdpSFhISU5seHBSSUJwUkk2d0hvckxFUlVtSWlzS0NRV004Y3FpZ0VTVlFTMUt4MXBpTmk0bVcyWXBiY1pPTnJpbEUxNDBSQ1RjeTNEREFjTC96YkpQOENZUERMKzlVZmF1N3VxYjdlWjdQKy9hOFBTOGh3a2NnSUJBUUNBZ0VCQUlDQVlHQVFFQWdJQkFRQ0FnRUJBSUNBWUdBUUVBZ0lCQVFDRHgvQW9vd0tYRk1VaEQzbFFyaW9aYVFSVlJTK2Z4bDUxZUJUWlVUZFo0MVUxUm94MTMvMEpGOWNzR0owNVF2NGpTei9ZUFdvaHR2TG1TS041aVRHR3FUbTErcmM2d2VJQ09CUmJaczFVVm5ydjg3VDFQVWVvdnh5TnNVUDlQNm41Y3BIdEN4dTI0Y2JybXdLTGRqK29zV2lxclZLaEkweHpibVo3bTFTcEorMXBGcHZFMkRQdkdUb21PeEFvTkxMS0dMc2NaWXZCMTBjYllZanJKQ2I3QTVtcnhsZU9CcWltK2NXSlJha1pZMEpmbkQvTGllSTlWMU1yS3R3b2tickF0VTRWbTBBM1RKbnBoSkQ0QitSeEQwdTBMQTd3N0ZURTRvcHJPQ01ia2xFR05yZmRHZjRJcW5RVGI0d2MwTUZUWWliWnFNN0pnak84WmRKa3BNbG4vc0t1MTZwSFpHYjdJZnB0SVdnMzg5RFBwOWtjQ2hXT0RvTXVEZEJPaEwxSmdwaXNiVXZnaE03QXFGYnROaWFGUDgwUkxuaGJ1QmRxaTBOKzFkYlVwV0dkZTlnV3B1aEZpOTV5TDdzUzdCQTkzSkFiK0ZuOG1oNFF1amdQZVRnYjlrQVpmM0FwZDJBK2ZYUTM4eUhqT0hvekIxSUFKak9TRVkyUlNJd1ZVdjRkZDRYOXdKY2NHSE5ySjdDWVE0R0dqTGVOTmZNK2R5dmdwelFzdEtmM3BiQjJBNm05N3VCUkUwL0VyZ2N4cjhoeXFnN2hyd24wdkF0UklLSVJYNlkycE1sMFJoSWo4Y285bkJHRnJ2aDU1bDNuZ1U3WU9ibmc3SVZuRnZHUytCWVVwbUh6aVkvTHMyemdQOVNYNTBieS9HOU41dzZJK29nWXZwd0sxU29PbEhRTnNHZldjZDlQZXFvZjg4Qi9yVHl6RjloQUlvcEFCeVF6QzBKUUI5U1Q1b1ZudmhudCtMT0dzcHJ2VWh4Tkl3YTBhWTdjR1I2Q3A3dHI4K3doa2phd0l4a1JXQzZZSkk2TitsQUtxM1FmL1R4K0I3N29HZmFRYy84aEI4dzJYd3R3OUJmM2t6WnNwWFkvSklERWJmcEFCMkJLTHZWVjkwSnZqZ29hYzl2cFJ4RThrY2lUVkNCTU1rTmlySjdrL3RSSHlqdHh3aktWNFlwM3QvNnMrUjRFKy9ESDNONitCclM4RTMxNER2dmcyKy9TYjRoeGZCZjVzUC91cDJURjNaaG9uSzF6RDZkaHdHZHdhaWwyNkR6cWdYOE1SS2lxOVpCcGtTa21lWU95UE0zbTlKamwrMVo5RDhBZ050bEFxNmJaNzBxc1ppK3ErYndWLzdJL2hiQjhEL2RBcjhBeHE4OWl6NDc0cC9HNSsra29ISnkxc3gvbGtHZEJjMllqQTNIRjBySE5IdWJvb211UWovNURnY2xJdk9HQ0dDWVJLRkZ1VE1WN1lVQUQzVkRRYUxNZnlxQmNaT1JHUHkwMVFLWVNObS9yWVYvTmQvQXY5Tkh2Z2J1ZUJyc2pEelJRYW1LS0R4VDlLZ3ExaUxrYklVRE9TSG9pTmNnbllIZ25ZWmkrOVpFeFNiaVNvTWMyZUUyZmxLY3VKTGE0S0dSUXo2L1Uwd2xHYVAwZmVpTUg0dUZwTVhFakJWbFlqcDZsV1krU1NadGltMGt1bFlNaVl1SkVKWHVoVERKOVVZUEJ5T3ZvSXdkQ3hmZ0U0YkFvMEpoMzl4TEFvVnBNd0lFUXlUeUZDUXZHcExvbjlzSjBLM0o0T0JERGNNSDFkajlGUXN4a3JqTVBGUlBDYk94Mkd5ZkxhbDlWRWN4c3Rpb1R1bHhqQUZOZlJPSlBxTGw2Qm5meWc2Vjd1Z3o1eUJodUh3clpqQmRpVTVZSmc3STh3T3BpZkFLb1ZJVzd1UTNycE9CSDJiM2VrVmpZVDJXQ1JHM28rbUlHS2dPME9ybElhZWJVL0hZT1FETmJRbm9qQjROSnlHRDBOUGZqQTBid1RSRTZRN2hzVWNXaGtXTjh5WnFTUWxXV0dFQ0FaTG1KZkptYnJ2VlNJOHRhSzM3eHBiZEIvd1FXOHhQZWUvOHhJR2p2bGo4SVEvaGs0RzBKYldjWDhNSFBWRFg0a3Zlb3E4b2NuM3hMTTMzTkNaUmNQSE9HSllaSUtmcFF5cTdKakhTNnlKamNIdWpMSEFEZ2twdUM3aDhGOHpFVnFYU05DMmF3RTY5bHFoczhBYW1rTzI2SHJiRHQySDdkQlZRb3YyTmNXMjZDaXdRdHUrQldqZFk0bjJuWmJvVGJmQ21LY0NuUnlETy9ZbXlMUG5EbEh2akRIOEc2emhTOS93bEVuWVI3WDAwZldyRll1V2RWSTBacHVoY2JjY3pXL1IycWRBY3o2dC9iUm92NG1PTmVhYW9ZbCtwMjJySEYwYlZOQW1LdEJ2d2VJWEd4TmNmRkg4ZU5sQzRtNndNV011c0VuS3BuNWh5bzQ4cGo5Z0xlNFNORzlRb0dHTEFrOHo1WGlhSlVkOTl1ODEyMi9JcEJBMks5QkdnMnZXV0tBdlJZVmVMekVhN0UxUjQyMm0yK01zU1RlbTk3blNZbmZLeU42L216QVR2N0FVZ3FjTXJVbm1hRmxMWDN5c00wZmordC9iNWxRTHRLMjJRRWZ5QW1pU0xLRlpwVUo3a0JSUFhLVzRIcUNZeW5XVkhLU0cyTGt5WmV4MXVPMW1aTTlsS2VtOVR4OWpqWTVpTkVZbzBiS01objdaQXUwcjZINVBwTFhDQXEwcktKQ2xTalNHeW5FL1FJa3JRWXFCUGU2UzJYK0FKc1kyUGVkNmlXWms2UmxMMGMycjVzem9mUnNPOVI1UzFJZlFMUkNwUUwxYWlmb1lGZXJwc2JrdVRJbWFVSlh1WElEaUg2L1lzOHZtM01nOEwyaTIwWXFzTzdmSXRLTGNTWHluMGtYY2NjbFZxdjNNUzZhdDlKVS9PeCtvdW5zK1NGNlo0Y1N1cHo3bDgrejF1Y3M3TEYxQVFqT2R4Zkdaem14OEl1MVRSY2ZucmlvSUNBUUVBZ0lCZ1lCQVFDQWdFQkFJQ0FRRUFnSUJnWUJBUUNBZ0VCQUlDQVFFQXY4SDQ0Yi82WmlHdkdBQUFBQUFTVVZPUks1Q1lJST1cIixcbiAgICAgICAgICAgIGNvbnRlbnRUeXBlOiBcImltYWdlL3BuZ1wiLFxuICAgICAgICAgICAgd2lkdGg6IDE1LFxuICAgICAgICAgICAgaGVpZ2h0OiAxNVxuICAgICAgICB9XG4gICAgfSxcbiAgICBtdWx0aXBvaW50OiB7XG4gICAgICAgIHR5cGU6IFwic2ltcGxlXCIsXG4gICAgICAgIHN5bWJvbDoge1xuICAgICAgICAgICAgdHlwZTogXCJlc3JpUE1TXCIsXG4gICAgICAgICAgICB1cmw6IFwiUmVkU3BoZXJlLnBuZ1wiLFxuICAgICAgICAgICAgaW1hZ2VEYXRhOiBcImlWQk9SdzBLR2dvQUFBQU5TVWhFVWdBQUFFQUFBQUJBQ0FZQUFBQ3FhWEhlQUFBQUJHZEJUVUVBQUxHUEMveGhCUUFBQUNCalNGSk5BQUI2SmdBQWdJUUFBUG9BQUFDQTZBQUFkVEFBQU9wZ0FBQTZtQUFBRjNDY3VsRThBQUFBQ1hCSVdYTUFBQTdEQUFBT3d3SEhiNmhrQUFBQUdYUkZXSFJUYjJaMGQyRnlaUUJRWVdsdWRDNU9SVlFnZGpNdU5TNHhUdWM0K1FBQUIzVkpSRUZVZUY3dG1QbFRsRWNleG52ZTk0VTVtQU5RYmdRU2JnaUhYSElObHhwUklCcFJJNndIb3JMRVJVbUlpc0tDUVdNOGNxaWdFU1ZRUzFLeDFwaU5pNG1XMllwYmNaT05yaWxFMTQwUkNUY3kzRERBY0wvemJKUDhDWVBETCs5VWZhdTd1cWI3ZVo3UCsvYThQUzhod2tjZ0lCQVFDQWdFQkFJQ0FZR0FRRUFnSUJBUUNBZ0VCQUlDQVlHQVFFQWdJQkFRQ0R4L0Fvb3dLWEZNVWhEM2xRcmlvWmFRUlZSUytmeGw1MWVCVFpVVGRaNDFVMVJveDEzLzBKRjljc0dKMDVRdjRqU3ovWVBXb2h0dkxtU0tONWlUR0dxVG0xK3JjNndlSUNPQlJiWnMxVVZucnY4N1QxUFVlb3Z4eU5zVVA5UDZuNWNwSHRDeHUyNGNicm13S0xkaitvc1dpcXJWS2hJMHh6Ym1aN20xU3BKKzFwRnB2RTJEUHZHVG9tT3hBb05MTEtHTHNjWll2QjEwY2JZWWpySkNiN0E1bXJ4bGVPQnFpbStjV0pSYWtaWTBKZm5EL0xpZUk5VjFNckt0d29rYnJBdFU0Vm0wQTNUSm5waEpENEIrUnhEMHUwTEE3dzdGVEU0b3ByT0NNYmtsRUdOcmZkR2Y0SXFuUVRiNHdjME1GVFlpYlpxTTdKZ2pPOFpkSmtwTWxuL3NLdTE2cEhaR2I3SWZwdElXZzM4OURQcDlrY0NoV09Eb011RGRCT2hMMUpncGlzYlV2Z2hNN0FxRmJ0TmlhRlA4MFJMbmhidUJkcWkwTisxZGJVcFdHZGU5Z1dwdWhGaTk1eUw3c1M3QkE5M0pBYitGbjhtaDRRdWpnUGVUZ2I5a0FaZjNBcGQyQStmWFEzOHlIak9Ib3pCMUlBSmpPU0VZMlJTSXdWVXY0ZGQ0WDl3SmNjR0hOcko3Q1lRNEdHakxlTk5mTStkeXZncHpRc3RLZjNwYkIyQTZtOTd1QlJFMC9FcmdjeHI4aHlxZzdocnduMHZBdFJJS0lSWDZZMnBNbDBSaElqOGNvOW5CR0Zydmg1NWwzbmdVN1lPYm5nN0lWbkZ2R1MrQllVcG1IemlZL0xzMnpnUDlTWDUwYnkvRzlONXc2SStvZ1l2cHdLMVNvT2xIUU5zR2ZXY2Q5UGVxb2Y4OEIvclR5ekY5aEFJb3BBQnlRekMwSlFCOVNUNW9WbnZobnQrTE9Hc3BydlVoeE5Jd2EwYVk3Y0dSNkNwN3RyOCt3aGtqYXdJeGtSV0M2WUpJNk4rbEFLcTNRZi9UeCtCNzdvR2ZhUWMvOGhCOHcyWHd0dzlCZjNrelpzcFhZL0pJREViZnBBQjJCS0x2VlY5MEp2amdvYWM5dnBSeEU4a2NpVFZDQk1Na05pcko3ay90Ukh5anR4d2pLVjRZcDN0LzZzK1I0RSsvREgzTjYrQnJTOEUzMTREdnZnMisvU2I0aHhmQmY1c1AvdXAyVEYzWmhvbksxekQ2ZGh3R2R3YWlsMjZEenFnWDhNUktpcTlaQnBrU2ttZVlPeVBNM205SmpsKzFaOUQ4QWdOdGxBcTZiWjcwcXNaaStxK2J3Vi83SS9oYkI4RC9kQXI4QXhxODlpejQ3NHAvRzUrK2tvSEp5MXN4L2xrR2RCYzJZakEzSEYwckhOSHVib29tdVFqLzVEZ2NsSXZPR0NHQ1lSS0ZGdVRNVjdZVUFEM1ZEUWFMTWZ5cUJjWk9SR1B5MDFRS1lTTm0vcllWL05kL0F2OU5IdmdidWVCcnNqRHpSUWFtS0tEeFQ5S2dxMWlMa2JJVURPU0hvaU5jZ25ZSGduWVppKzlaRXhTYmlTb01jMmVFMmZsS2N1SkxhNEtHUlF6Ni9VMHdsR2FQMGZlaU1INHVGcE1YRWpCVmxZanA2bFdZK1NTWnRpbTBrdWxZTWlZdUpFSlh1aFRESjlVWVBCeU92b0l3ZEN4ZmdFNGJBbzBKaDM5eExBb1ZwTXdJRVF5VHlGQ1F2R3BMb245c0owSzNKNE9CRERjTUgxZGo5RlFzeGtyak1QRlJQQ2JPeDJHeWZMYWw5VkVjeHN0aW9UdWx4akFGTmZST0pQcUxsNkJuZnlnNlY3dWd6NXlCaHVId3JaakJkaVU1WUpnN0k4d09waWZBS29WSVc3dVEzcnBPQkgyYjNla1ZqWVQyV0NSRzNvK21JR0tnTzBPcmxJYWViVS9IWU9RRE5iUW5vakI0Tkp5R0QwTlBmakEwYndUUkU2UTdoc1VjV2hrV044eVpxU1FsV1dHRUNBWkxtSmZKbWJydlZTSTh0YUszN3hwYmRCL3dRVzh4UGVlLzh4SUdqdmxqOElRL2hrNEcwSmJXY1g4TUhQVkRYNGt2ZW9xOG9jbjN4TE0zM05DWlJjUEhPR0pZWklLZnBReXE3SmpIUzZ5SmpjSHVqTEhBRGdrcHVDN2g4Rjh6RVZxWFNOQzJhd0U2OWxxaHM4QWFta08yNkhyYkR0Mkg3ZEJWUW92Mk5jVzI2Q2l3UXR1K0JXamRZNG4yblpib1RiZkNtS2NDblJ5RE8vWW15TFBuRGxIdmpESDhHNnpoUzkvd2xFbllSN1gwMGZXckZZdVdkVkkwWnB1aGNiY2N6Vy9SMnFkQWN6NnQvYlJvdjRtT05lYWFvWWwrcDIyckhGMGJWTkFtS3RCdndlSVhHeE5jZkZIOGVObEM0bTZ3TVdNdXNFbktwbjVoeW80OHBqOWdMZTRTTkc5UW9HR0xBazh6NVhpYUpVZDk5dTgxMjIvSXBCQTJLOUJHZzJ2V1dLQXZSWVZlTHpFYTdFMVI0MjJtMitNc1NUZW05N25TWW5mS3lONi9tekFUdjdBVWdxY01yVW5tYUZsTFgzeXNNMGZqK3QvYjVsUUx0SzIyUUVmeUFtaVNMS0ZacFVKN2tCUlBYS1c0SHFDWXluV1ZIS1NHMkxreVpleDF1TzFtWk05bEtlbTlUeDlqalk1aU5FWW8wYktNaG43WkF1MHI2SDVQcExYQ0FxMHJLSkNsU2pTR3luRS9RSWtyUVlxQlBlNlMyWCtBSnNZMlBlZDZpV1prNlJsTDBjMnI1c3pvZlJzTzlSNVMxSWZRTFJDcFFMMWFpZm9ZRmVycHNia3VUSW1hVUpYdVhJRGlINi9Zczh2bTNNZzhMMmkyMFlxc083Zkl0S0xjU1h5bjBrWGNjY2xWcXYzTVM2YXQ5SlUvT3grb3VucytTRjZaNGNTdXB6N2w4K3oxdWNzN0xGMUFRak9keGZHWnpteDhJdTFUUmNmbnJpb0lDQVFFQWdJQmdZQkFRQ0FnRUJBSUNBUUVBZ0lCZ1lCQVFDQWdFQkFJQ0FRRUF2OEg0NGIvNlppR3ZHQUFBQUFBU1VWT1JLNUNZSUk9XCIsXG4gICAgICAgICAgICBjb250ZW50VHlwZTogXCJpbWFnZS9wbmdcIixcbiAgICAgICAgICAgIHdpZHRoOiAxNSxcbiAgICAgICAgICAgIGhlaWdodDogMTVcbiAgICAgICAgfVxuICAgIH0sXG4gICAgcG9seWdvbjoge1xuICAgICAgICB0eXBlOiBcInNpbXBsZVwiLFxuICAgICAgICBzeW1ib2w6IHtcbiAgICAgICAgICAgIHR5cGU6IFwiZXNyaVNGU1wiLFxuICAgICAgICAgICAgc3R5bGU6IFwiZXNyaVNGU1NvbGlkXCIsXG4gICAgICAgICAgICBjb2xvcjogWzc2LCAxMjksIDIwNSwgMTkxXSxcbiAgICAgICAgICAgIG91dGxpbmU6IHtcbiAgICAgICAgICAgICAgICB0eXBlOiBcImVzcmlTTFNcIixcbiAgICAgICAgICAgICAgICBzdHlsZTogXCJlc3JpU0xTU29saWRcIixcbiAgICAgICAgICAgICAgICBjb2xvcjogWzAsIDAsIDAsIDI1NV0sXG4gICAgICAgICAgICAgICAgd2lkdGg6IDAuNzVcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG4gICAgLy8gV2UgZG9uJ3QgYWxsb3cgYWRkaW5nIG11bHRpcGF0Y2ggbGF5ZXJzIGluIGZyb20tc2NyYXRjaCBmbG93LCBzbyBubyBuZWVkIGZvciB0aGlzXG4gICAgbXVsdGlwYXRjaDoge31cbn07XG5cbmV4cG9ydCB7IGVzcmlHZW9tZXRyeVR5cGVzIGFzIGEsIGZlYXR1cmVMYXllclByZWZlcmVuY2VzIGFzIGIsIGVzcmlEYXRhVHlwZXMgYXMgZSwgZmVhdHVyZUxheWVyVHlwZXMgYXMgZiwgZ2VvbWV0cnlUeXBlcyBhcyBnLCByZW5kZXJlcnMgYXMgciB9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1mZWF0dXJlLWxheWVyLTE3YjY0OTQ2LmpzLm1hcCIsIi8qIVxuICogQWxsIG1hdGVyaWFsIGNvcHlyaWdodCBFU1JJLCBBbGwgUmlnaHRzIFJlc2VydmVkLCB1bmxlc3Mgb3RoZXJ3aXNlIHNwZWNpZmllZC5cbiAqIHY0LjAuNThcbiAqL1xuaW1wb3J0IHsgYyBhcyBjb25maWdTdGF0ZSB9IGZyb20gJy4vY29uZmlnLTc1YWRmOTYyLmpzJztcbmltcG9ydCB7IHUgYXMgdW5pcXVlQnkgfSBmcm9tICcuL2Z1bmN0aW9uYWwtNDRkZThmY2YuanMnO1xuaW1wb3J0IHsgZyBhcyBndWlkIH0gZnJvbSAnLi9ndWlkLWFlYWVkODRkLmpzJztcbmltcG9ydCB7IHAgYXMgcGFyc2VBR1NTZXJ2ZXJJbmZvIH0gZnJvbSAnLi91cmwtNGMzYWU1NGMuanMnO1xuaW1wb3J0IHsgZyBhcyBnZXRJdGVtVGh1bWJuYWlsIH0gZnJvbSAnLi90aHVtYm5haWwtYmNiODllNjkuanMnO1xuaW1wb3J0IHsgaSBhcyBpdGVtUHJvcGVydGllc1N0YXRlIH0gZnJvbSAnLi9pdGVtLXByb3BlcnRpZXMtMTA0OTFiMmUuanMnO1xuaW1wb3J0IHsgYSBhcyBhZGRJdGVtU3RhdGUgfSBmcm9tICcuL2FkZC1pdGVtLWRiYmUyZjU3LmpzJztcbmltcG9ydCB7IGcgYXMgZ2VvbWV0cnlUeXBlcywgciBhcyByZW5kZXJlcnMgfSBmcm9tICcuL2ZlYXR1cmUtbGF5ZXItMTdiNjQ5NDYuanMnO1xuXG5jb25zdCBsaW5lQW5kUG9seWdvbkxheWVyQ2FwdHVyZUdQU0ZpZWxkcyA9IFtcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiZXNyaWduc3NfYXZnX2hfcm1zXCIsXG4gICAgICAgIHR5cGU6IFwiZXNyaUZpZWxkVHlwZURvdWJsZVwiLFxuICAgICAgICBhbGlhczogXCJBdmVyYWdlIGhvcml6b250YWwgYWNjdXJhY3kgKG0pXCIsXG4gICAgICAgIHNxbFR5cGU6IFwic3FsVHlwZU90aGVyXCIsXG4gICAgICAgIG51bGxhYmxlOiB0cnVlLFxuICAgICAgICBlZGl0YWJsZTogdHJ1ZSxcbiAgICAgICAgZG9tYWluOiBudWxsLFxuICAgICAgICBkZWZhdWx0VmFsdWU6IG51bGxcbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJlc3JpZ25zc19hdmdfdl9ybXNcIixcbiAgICAgICAgdHlwZTogXCJlc3JpRmllbGRUeXBlRG91YmxlXCIsXG4gICAgICAgIGFsaWFzOiBcIkF2ZXJhZ2UgdmVydGljYWwgYWNjdXJhY3kgKG0pXCIsXG4gICAgICAgIHNxbFR5cGU6IFwic3FsVHlwZU90aGVyXCIsXG4gICAgICAgIG51bGxhYmxlOiB0cnVlLFxuICAgICAgICBlZGl0YWJsZTogdHJ1ZSxcbiAgICAgICAgZG9tYWluOiBudWxsLFxuICAgICAgICBkZWZhdWx0VmFsdWU6IG51bGxcbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJlc3JpZ25zc193b3JzdF9oX3Jtc1wiLFxuICAgICAgICB0eXBlOiBcImVzcmlGaWVsZFR5cGVEb3VibGVcIixcbiAgICAgICAgYWxpYXM6IFwiV29yc3QgaG9yaXpvbnRhbCBhY2N1cmFjeSAobSlcIixcbiAgICAgICAgc3FsVHlwZTogXCJzcWxUeXBlT3RoZXJcIixcbiAgICAgICAgbnVsbGFibGU6IHRydWUsXG4gICAgICAgIGVkaXRhYmxlOiB0cnVlLFxuICAgICAgICBkb21haW46IG51bGwsXG4gICAgICAgIGRlZmF1bHRWYWx1ZTogbnVsbFxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcImVzcmlnbnNzX3dvcnN0X3Zfcm1zXCIsXG4gICAgICAgIHR5cGU6IFwiZXNyaUZpZWxkVHlwZURvdWJsZVwiLFxuICAgICAgICBhbGlhczogXCJXb3JzdCB2ZXJ0aWNhbCBhY2N1cmFjeSAobSlcIixcbiAgICAgICAgc3FsVHlwZTogXCJzcWxUeXBlT3RoZXJcIixcbiAgICAgICAgbnVsbGFibGU6IHRydWUsXG4gICAgICAgIGVkaXRhYmxlOiB0cnVlLFxuICAgICAgICBkb21haW46IG51bGwsXG4gICAgICAgIGRlZmF1bHRWYWx1ZTogbnVsbFxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcImVzcmlnbnNzX3dvcnN0X2ZpeHR5cGVcIixcbiAgICAgICAgdHlwZTogXCJlc3JpRmllbGRUeXBlU21hbGxJbnRlZ2VyXCIsXG4gICAgICAgIGFsaWFzOiBcIldvcnN0IGZpeCB0eXBlXCIsXG4gICAgICAgIHNxbFR5cGU6IFwic3FsVHlwZU90aGVyXCIsXG4gICAgICAgIG51bGxhYmxlOiB0cnVlLFxuICAgICAgICBlZGl0YWJsZTogdHJ1ZSxcbiAgICAgICAgZG9tYWluOiB7XG4gICAgICAgICAgICB0eXBlOiBcImNvZGVkVmFsdWVcIixcbiAgICAgICAgICAgIG5hbWU6IFwiRVNSSV9GSVhfVFlQRV9ET01BSU5cIixcbiAgICAgICAgICAgIGNvZGVkVmFsdWVzOiBbXG4gICAgICAgICAgICAgICAgeyBuYW1lOiBcIk5vRml4XCIsIGNvZGU6IDAgfSxcbiAgICAgICAgICAgICAgICB7IG5hbWU6IFwiR1BTXCIsIGNvZGU6IDEgfSxcbiAgICAgICAgICAgICAgICB7IG5hbWU6IFwiRGlmZmVyZW50aWFsR1BTXCIsIGNvZGU6IDIgfSxcbiAgICAgICAgICAgICAgICB7IG5hbWU6IFwiUHJlY2lzZVBvc2l0aW9uaW5nU2VydmljZVwiLCBjb2RlOiAzIH0sXG4gICAgICAgICAgICAgICAgeyBuYW1lOiBcIlJUS0ZpeGVkXCIsIGNvZGU6IDQgfSxcbiAgICAgICAgICAgICAgICB7IG5hbWU6IFwiUlRLRmxvYXRcIiwgY29kZTogNSB9XG4gICAgICAgICAgICBdXG4gICAgICAgIH0sXG4gICAgICAgIGRlZmF1bHRWYWx1ZTogbnVsbFxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcImVzcmlnbnNzX21hbnVhbF9sb2NhdGlvbnNcIixcbiAgICAgICAgdHlwZTogXCJlc3JpRmllbGRUeXBlSW50ZWdlclwiLFxuICAgICAgICBhbGlhczogXCJOdW1iZXIgb2YgbWFudWFsIGxvY2F0aW9uc1wiLFxuICAgICAgICBzcWxUeXBlOiBcInNxbFR5cGVPdGhlclwiLFxuICAgICAgICBudWxsYWJsZTogdHJ1ZSxcbiAgICAgICAgZWRpdGFibGU6IHRydWUsXG4gICAgICAgIGRvbWFpbjogbnVsbCxcbiAgICAgICAgZGVmYXVsdFZhbHVlOiBudWxsXG4gICAgfVxuXTtcbmNvbnN0IHBvaW50TGF5ZXJDYXB0dXJlR1BTRmllbGRzID0gW1xuICAgIHtcbiAgICAgICAgbmFtZTogXCJlc3JpZ25zc19zcGVlZFwiLFxuICAgICAgICB0eXBlOiBcImVzcmlGaWVsZFR5cGVEb3VibGVcIixcbiAgICAgICAgYWxpYXM6IFwiU3BlZWQgKGttL2gpXCIsXG4gICAgICAgIHNxbFR5cGU6IFwic3FsVHlwZU90aGVyXCIsXG4gICAgICAgIG51bGxhYmxlOiB0cnVlLFxuICAgICAgICBlZGl0YWJsZTogdHJ1ZSxcbiAgICAgICAgZG9tYWluOiBudWxsLFxuICAgICAgICBkZWZhdWx0VmFsdWU6IG51bGxcbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJlc3JpZ25zc19kaXJlY3Rpb25cIixcbiAgICAgICAgdHlwZTogXCJlc3JpRmllbGRUeXBlRG91YmxlXCIsXG4gICAgICAgIGFsaWFzOiBcIkRpcmVjdGlvbiBvZiB0cmF2ZWwgKMKwKVwiLFxuICAgICAgICBzcWxUeXBlOiBcInNxbFR5cGVPdGhlclwiLFxuICAgICAgICBudWxsYWJsZTogdHJ1ZSxcbiAgICAgICAgZWRpdGFibGU6IHRydWUsXG4gICAgICAgIGRvbWFpbjogbnVsbCxcbiAgICAgICAgZGVmYXVsdFZhbHVlOiBudWxsXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiZXNyaXNuc3JfYXppbXV0aFwiLFxuICAgICAgICB0eXBlOiBcImVzcmlGaWVsZFR5cGVEb3VibGVcIixcbiAgICAgICAgYWxpYXM6IFwiQ29tcGFzcyByZWFkaW5nICjCsClcIixcbiAgICAgICAgc3FsVHlwZTogXCJzcWxUeXBlT3RoZXJcIixcbiAgICAgICAgbnVsbGFibGU6IHRydWUsXG4gICAgICAgIGVkaXRhYmxlOiB0cnVlLFxuICAgICAgICBkb21haW46IG51bGwsXG4gICAgICAgIGRlZmF1bHRWYWx1ZTogbnVsbFxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcImVzcmlnbnNzX3Bvc2l0aW9uc291cmNldHlwZVwiLFxuICAgICAgICB0eXBlOiBcImVzcmlGaWVsZFR5cGVJbnRlZ2VyXCIsXG4gICAgICAgIGFsaWFzOiBcIlBvc2l0aW9uIHNvdXJjZSB0eXBlXCIsXG4gICAgICAgIHNxbFR5cGU6IFwic3FsVHlwZU90aGVyXCIsXG4gICAgICAgIG51bGxhYmxlOiB0cnVlLFxuICAgICAgICBlZGl0YWJsZTogdHJ1ZSxcbiAgICAgICAgZG9tYWluOiB7XG4gICAgICAgICAgICB0eXBlOiBcImNvZGVkVmFsdWVcIixcbiAgICAgICAgICAgIG5hbWU6IFwiRVNSSV9QT1NJVElPTlNPVVJDRVRZUEVfRE9NQUlOXCIsXG4gICAgICAgICAgICBjb2RlZFZhbHVlczogW1xuICAgICAgICAgICAgICAgIHsgbmFtZTogXCJVbmtub3duXCIsIGNvZGU6IDAgfSxcbiAgICAgICAgICAgICAgICB7IG5hbWU6IFwiVXNlciBkZWZpbmVkXCIsIGNvZGU6IDEgfSxcbiAgICAgICAgICAgICAgICB7IG5hbWU6IFwiSW50ZWdyYXRlZCAoU3lzdGVtKSBMb2NhdGlvbiBQcm92aWRlclwiLCBjb2RlOiAyIH0sXG4gICAgICAgICAgICAgICAgeyBuYW1lOiBcIkV4dGVybmFsIEdOU1MgUmVjZWl2ZXJcIiwgY29kZTogMyB9LFxuICAgICAgICAgICAgICAgIHsgbmFtZTogXCJOZXR3b3JrIExvY2F0aW9uIFByb3ZpZGVyXCIsIGNvZGU6IDQgfSxcbiAgICAgICAgICAgICAgICB7IG5hbWU6IFwiU25hcHBlZFwiLCBjb2RlOiA1IH1cbiAgICAgICAgICAgIF1cbiAgICAgICAgfSxcbiAgICAgICAgZGVmYXVsdFZhbHVlOiBudWxsXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiZXNyaWduc3NfcmVjZWl2ZXJcIixcbiAgICAgICAgdHlwZTogXCJlc3JpRmllbGRUeXBlU3RyaW5nXCIsXG4gICAgICAgIGFsaWFzOiBcIlJlY2VpdmVyIE5hbWVcIixcbiAgICAgICAgc3FsVHlwZTogXCJzcWxUeXBlT3RoZXJcIixcbiAgICAgICAgbGVuZ3RoOiA1MCxcbiAgICAgICAgbnVsbGFibGU6IHRydWUsXG4gICAgICAgIGVkaXRhYmxlOiB0cnVlLFxuICAgICAgICBkb21haW46IG51bGwsXG4gICAgICAgIGRlZmF1bHRWYWx1ZTogbnVsbFxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcImVzcmlnbnNzX2hfcm1zXCIsXG4gICAgICAgIHR5cGU6IFwiZXNyaUZpZWxkVHlwZURvdWJsZVwiLFxuICAgICAgICBhbGlhczogXCJIb3Jpem9udGFsIEFjY3VyYWN5IChtKVwiLFxuICAgICAgICBzcWxUeXBlOiBcInNxbFR5cGVPdGhlclwiLFxuICAgICAgICBudWxsYWJsZTogdHJ1ZSxcbiAgICAgICAgZWRpdGFibGU6IHRydWUsXG4gICAgICAgIGRvbWFpbjogbnVsbCxcbiAgICAgICAgZGVmYXVsdFZhbHVlOiBudWxsXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiZXNyaWduc3Nfdl9ybXNcIixcbiAgICAgICAgdHlwZTogXCJlc3JpRmllbGRUeXBlRG91YmxlXCIsXG4gICAgICAgIGFsaWFzOiBcIlZlcnRpY2FsIEFjY3VyYWN5IChtKVwiLFxuICAgICAgICBzcWxUeXBlOiBcInNxbFR5cGVPdGhlclwiLFxuICAgICAgICBudWxsYWJsZTogdHJ1ZSxcbiAgICAgICAgZWRpdGFibGU6IHRydWUsXG4gICAgICAgIGRvbWFpbjogbnVsbCxcbiAgICAgICAgZGVmYXVsdFZhbHVlOiBudWxsXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiZXNyaWduc3NfbGF0aXR1ZGVcIixcbiAgICAgICAgdHlwZTogXCJlc3JpRmllbGRUeXBlRG91YmxlXCIsXG4gICAgICAgIGFsaWFzOiBcIkxhdGl0dWRlXCIsXG4gICAgICAgIHNxbFR5cGU6IFwic3FsVHlwZU90aGVyXCIsXG4gICAgICAgIG51bGxhYmxlOiB0cnVlLFxuICAgICAgICBlZGl0YWJsZTogdHJ1ZSxcbiAgICAgICAgZG9tYWluOiBudWxsLFxuICAgICAgICBkZWZhdWx0VmFsdWU6IG51bGxcbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJlc3JpZ25zc19sb25naXR1ZGVcIixcbiAgICAgICAgdHlwZTogXCJlc3JpRmllbGRUeXBlRG91YmxlXCIsXG4gICAgICAgIGFsaWFzOiBcIkxvbmdpdHVkZVwiLFxuICAgICAgICBzcWxUeXBlOiBcInNxbFR5cGVPdGhlclwiLFxuICAgICAgICBudWxsYWJsZTogdHJ1ZSxcbiAgICAgICAgZWRpdGFibGU6IHRydWUsXG4gICAgICAgIGRvbWFpbjogbnVsbCxcbiAgICAgICAgZGVmYXVsdFZhbHVlOiBudWxsXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiZXNyaWduc3NfYWx0aXR1ZGVcIixcbiAgICAgICAgdHlwZTogXCJlc3JpRmllbGRUeXBlRG91YmxlXCIsXG4gICAgICAgIGFsaWFzOiBcIkFsdGl0dWRlXCIsXG4gICAgICAgIHNxbFR5cGU6IFwic3FsVHlwZU90aGVyXCIsXG4gICAgICAgIG51bGxhYmxlOiB0cnVlLFxuICAgICAgICBlZGl0YWJsZTogdHJ1ZSxcbiAgICAgICAgZG9tYWluOiBudWxsLFxuICAgICAgICBkZWZhdWx0VmFsdWU6IG51bGxcbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJlc3JpZ25zc19wZG9wXCIsXG4gICAgICAgIHR5cGU6IFwiZXNyaUZpZWxkVHlwZURvdWJsZVwiLFxuICAgICAgICBhbGlhczogXCJQRE9QXCIsXG4gICAgICAgIHNxbFR5cGU6IFwic3FsVHlwZU90aGVyXCIsXG4gICAgICAgIG51bGxhYmxlOiB0cnVlLFxuICAgICAgICBlZGl0YWJsZTogdHJ1ZSxcbiAgICAgICAgZG9tYWluOiBudWxsLFxuICAgICAgICBkZWZhdWx0VmFsdWU6IG51bGxcbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJlc3JpZ25zc19oZG9wXCIsXG4gICAgICAgIHR5cGU6IFwiZXNyaUZpZWxkVHlwZURvdWJsZVwiLFxuICAgICAgICBhbGlhczogXCJIRE9QXCIsXG4gICAgICAgIHNxbFR5cGU6IFwic3FsVHlwZU90aGVyXCIsXG4gICAgICAgIG51bGxhYmxlOiB0cnVlLFxuICAgICAgICBlZGl0YWJsZTogdHJ1ZSxcbiAgICAgICAgZG9tYWluOiBudWxsLFxuICAgICAgICBkZWZhdWx0VmFsdWU6IG51bGxcbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJlc3JpZ25zc192ZG9wXCIsXG4gICAgICAgIHR5cGU6IFwiZXNyaUZpZWxkVHlwZURvdWJsZVwiLFxuICAgICAgICBhbGlhczogXCJWRE9QXCIsXG4gICAgICAgIHNxbFR5cGU6IFwic3FsVHlwZU90aGVyXCIsXG4gICAgICAgIG51bGxhYmxlOiB0cnVlLFxuICAgICAgICBlZGl0YWJsZTogdHJ1ZSxcbiAgICAgICAgZG9tYWluOiBudWxsLFxuICAgICAgICBkZWZhdWx0VmFsdWU6IG51bGxcbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJlc3JpZ25zc19maXh0eXBlXCIsXG4gICAgICAgIHR5cGU6IFwiZXNyaUZpZWxkVHlwZVNtYWxsSW50ZWdlclwiLFxuICAgICAgICBhbGlhczogXCJGaXggVHlwZVwiLFxuICAgICAgICBzcWxUeXBlOiBcInNxbFR5cGVPdGhlclwiLFxuICAgICAgICBudWxsYWJsZTogdHJ1ZSxcbiAgICAgICAgZWRpdGFibGU6IHRydWUsXG4gICAgICAgIGRvbWFpbjoge1xuICAgICAgICAgICAgdHlwZTogXCJjb2RlZFZhbHVlXCIsXG4gICAgICAgICAgICBuYW1lOiBcIkVTUklfRklYX1RZUEVfRE9NQUlOXCIsXG4gICAgICAgICAgICBjb2RlZFZhbHVlczogW1xuICAgICAgICAgICAgICAgIHsgbmFtZTogXCJOb0ZpeFwiLCBjb2RlOiAwIH0sXG4gICAgICAgICAgICAgICAgeyBuYW1lOiBcIkdQU1wiLCBjb2RlOiAxIH0sXG4gICAgICAgICAgICAgICAgeyBuYW1lOiBcIkRpZmZlcmVudGlhbEdQU1wiLCBjb2RlOiAyIH0sXG4gICAgICAgICAgICAgICAgeyBuYW1lOiBcIlByZWNpc2VQb3NpdGlvbmluZ1NlcnZpY2VcIiwgY29kZTogMyB9LFxuICAgICAgICAgICAgICAgIHsgbmFtZTogXCJSVEtGaXhlZFwiLCBjb2RlOiA0IH0sXG4gICAgICAgICAgICAgICAgeyBuYW1lOiBcIlJUS0Zsb2F0XCIsIGNvZGU6IDUgfVxuICAgICAgICAgICAgXVxuICAgICAgICB9LFxuICAgICAgICBkZWZhdWx0VmFsdWU6IG51bGxcbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJlc3JpZ25zc19jb3JyZWN0aW9uYWdlXCIsXG4gICAgICAgIHR5cGU6IFwiZXNyaUZpZWxkVHlwZURvdWJsZVwiLFxuICAgICAgICBhbGlhczogXCJDb3JyZWN0aW9uIEFnZVwiLFxuICAgICAgICBzcWxUeXBlOiBcInNxbFR5cGVPdGhlclwiLFxuICAgICAgICBudWxsYWJsZTogdHJ1ZSxcbiAgICAgICAgZWRpdGFibGU6IHRydWUsXG4gICAgICAgIGRvbWFpbjogbnVsbCxcbiAgICAgICAgZGVmYXVsdFZhbHVlOiBudWxsXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiZXNyaWduc3Nfc3RhdGlvbmlkXCIsXG4gICAgICAgIHR5cGU6IFwiZXNyaUZpZWxkVHlwZVNtYWxsSW50ZWdlclwiLFxuICAgICAgICBhbGlhczogXCJTdGF0aW9uIElEXCIsXG4gICAgICAgIHNxbFR5cGU6IFwic3FsVHlwZU90aGVyXCIsXG4gICAgICAgIG51bGxhYmxlOiB0cnVlLFxuICAgICAgICBlZGl0YWJsZTogdHJ1ZSxcbiAgICAgICAgZG9tYWluOiBudWxsLFxuICAgICAgICBkZWZhdWx0VmFsdWU6IG51bGxcbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJlc3JpZ25zc19udW1zYXRzXCIsXG4gICAgICAgIHR5cGU6IFwiZXNyaUZpZWxkVHlwZVNtYWxsSW50ZWdlclwiLFxuICAgICAgICBhbGlhczogXCJOdW1iZXIgb2YgU2F0ZWxsaXRlc1wiLFxuICAgICAgICBzcWxUeXBlOiBcInNxbFR5cGVPdGhlclwiLFxuICAgICAgICBudWxsYWJsZTogdHJ1ZSxcbiAgICAgICAgZWRpdGFibGU6IHRydWUsXG4gICAgICAgIGRvbWFpbjoge1xuICAgICAgICAgICAgdHlwZTogXCJyYW5nZVwiLFxuICAgICAgICAgICAgbmFtZTogXCJFU1JJX05VTV9TQVRTX0RPTUFJTlwiLFxuICAgICAgICAgICAgcmFuZ2U6IFswLCA5OV1cbiAgICAgICAgfSxcbiAgICAgICAgZGVmYXVsdFZhbHVlOiBudWxsXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiZXNyaWduc3NfZml4ZGF0ZXRpbWVcIixcbiAgICAgICAgdHlwZTogXCJlc3JpRmllbGRUeXBlRGF0ZVwiLFxuICAgICAgICBhbGlhczogXCJGaXggVGltZVwiLFxuICAgICAgICBzcWxUeXBlOiBcInNxbFR5cGVPdGhlclwiLFxuICAgICAgICBsZW5ndGg6IDgsXG4gICAgICAgIG51bGxhYmxlOiB0cnVlLFxuICAgICAgICBlZGl0YWJsZTogdHJ1ZSxcbiAgICAgICAgZG9tYWluOiBudWxsLFxuICAgICAgICBkZWZhdWx0VmFsdWU6IG51bGxcbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJlc3JpZ25zc19hdmdfaF9ybXNcIixcbiAgICAgICAgdHlwZTogXCJlc3JpRmllbGRUeXBlRG91YmxlXCIsXG4gICAgICAgIGFsaWFzOiBcIkF2ZXJhZ2UgSG9yaXpvbnRhbCBBY2N1cmFjeSAobSlcIixcbiAgICAgICAgc3FsVHlwZTogXCJzcWxUeXBlT3RoZXJcIixcbiAgICAgICAgbnVsbGFibGU6IHRydWUsXG4gICAgICAgIGVkaXRhYmxlOiB0cnVlLFxuICAgICAgICBkb21haW46IG51bGwsXG4gICAgICAgIGRlZmF1bHRWYWx1ZTogbnVsbFxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcImVzcmlnbnNzX2F2Z192X3Jtc1wiLFxuICAgICAgICB0eXBlOiBcImVzcmlGaWVsZFR5cGVEb3VibGVcIixcbiAgICAgICAgYWxpYXM6IFwiQXZlcmFnZSBWZXJ0aWNhbCBBY2N1cmFjeSAobSlcIixcbiAgICAgICAgc3FsVHlwZTogXCJzcWxUeXBlT3RoZXJcIixcbiAgICAgICAgbnVsbGFibGU6IHRydWUsXG4gICAgICAgIGVkaXRhYmxlOiB0cnVlLFxuICAgICAgICBkb21haW46IG51bGwsXG4gICAgICAgIGRlZmF1bHRWYWx1ZTogbnVsbFxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcImVzcmlnbnNzX2F2Z19wb3NpdGlvbnNcIixcbiAgICAgICAgdHlwZTogXCJlc3JpRmllbGRUeXBlSW50ZWdlclwiLFxuICAgICAgICBhbGlhczogXCJBdmVyYWdlZCBQb3NpdGlvbnNcIixcbiAgICAgICAgc3FsVHlwZTogXCJzcWxUeXBlT3RoZXJcIixcbiAgICAgICAgbnVsbGFibGU6IHRydWUsXG4gICAgICAgIGVkaXRhYmxlOiB0cnVlLFxuICAgICAgICBkb21haW46IG51bGwsXG4gICAgICAgIGRlZmF1bHRWYWx1ZTogbnVsbFxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcImVzcmlnbnNzX2hfc3RkZGV2XCIsXG4gICAgICAgIHR5cGU6IFwiZXNyaUZpZWxkVHlwZURvdWJsZVwiLFxuICAgICAgICBhbGlhczogXCJTdGFuZGFyZCBEZXZpYXRpb24gKG0pXCIsXG4gICAgICAgIHNxbFR5cGU6IFwic3FsVHlwZU90aGVyXCIsXG4gICAgICAgIG51bGxhYmxlOiB0cnVlLFxuICAgICAgICBlZGl0YWJsZTogdHJ1ZSxcbiAgICAgICAgZG9tYWluOiBudWxsLFxuICAgICAgICBkZWZhdWx0VmFsdWU6IG51bGxcbiAgICB9XG5dO1xuY29uc3QgZ2V0VGVtcGxhdGVGcm9tVHlwZSA9ICh0eXBlKSA9PiB7XG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgIGNhc2UgXCJwb2ludFwiOlxuICAgICAgICBjYXNlIFwibXVsdGlwb2ludFwiOlxuICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiTmV3IEZlYXR1cmVcIixcbiAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiXCIsXG4gICAgICAgICAgICAgICAgICAgIGRyYXdpbmdUb29sOiBcImVzcmlGZWF0dXJlRWRpdFRvb2xQb2ludFwiLFxuICAgICAgICAgICAgICAgICAgICBwcm90b3R5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXM6IHt9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdO1xuICAgICAgICBjYXNlIFwibGluZVwiOlxuICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiTmV3IEZlYXR1cmVcIixcbiAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiXCIsXG4gICAgICAgICAgICAgICAgICAgIGRyYXdpbmdUb29sOiBcImVzcmlGZWF0dXJlRWRpdFRvb2xMaW5lXCIsXG4gICAgICAgICAgICAgICAgICAgIHByb3RvdHlwZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlczoge31cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF07XG4gICAgICAgIGNhc2UgXCJwb2x5Z29uXCI6XG4gICAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJOZXcgRmVhdHVyZVwiLFxuICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJcIixcbiAgICAgICAgICAgICAgICAgICAgZHJhd2luZ1Rvb2w6IFwiZXNyaUZlYXR1cmVFZGl0VG9vbFBvbHlnb25cIixcbiAgICAgICAgICAgICAgICAgICAgcHJvdG90eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzOiB7fVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICB9XG59O1xuY29uc3QgZ2V0Q2FwdHVyZUdQU0ZpZWxkRm9yR2VvbWV0cnlUeXBlID0gKHR5cGUpID0+IHtcbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgY2FzZSBcImxpbmVcIjpcbiAgICAgICAgY2FzZSBcInBvbHlnb25cIjpcbiAgICAgICAgICAgIHJldHVybiBbLi4ubGluZUFuZFBvbHlnb25MYXllckNhcHR1cmVHUFNGaWVsZHNdO1xuICAgICAgICBjYXNlIFwicG9pbnRcIjpcbiAgICAgICAgICAgIHJldHVybiBbLi4ucG9pbnRMYXllckNhcHR1cmVHUFNGaWVsZHNdO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbn07XG5jb25zdCBnZXRDYXB0dXJlR1BTRmllbGRGb3JFc3JpR2VvbWV0cnlUeXBlID0gKHR5cGUpID0+IHtcbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgY2FzZSBcImVzcmlHZW9tZXRyeVBvbHlsaW5lXCI6XG4gICAgICAgIGNhc2UgXCJlc3JpR2VvbWV0cnlQb2x5Z29uXCI6XG4gICAgICAgICAgICByZXR1cm4gWy4uLmxpbmVBbmRQb2x5Z29uTGF5ZXJDYXB0dXJlR1BTRmllbGRzXTtcbiAgICAgICAgY2FzZSBcImVzcmlHZW9tZXRyeVBvaW50XCI6XG4gICAgICAgICAgICByZXR1cm4gWy4uLnBvaW50TGF5ZXJDYXB0dXJlR1BTRmllbGRzXTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICB9XG59O1xuY29uc3QgZ2V0U2hhcmVkTGF5ZXJQcm9wZXJ0aWVzID0gKHsgaWQsIG5hbWUsIHR5cGUsIGxheWVyUHJlZmVyZW5jZTogeyBjYXB0dXJlR1BTLCBlbmFibGVaRGVmYXVsdHMsIGVuYWJsZU1EZWZhdWx0cyB9LCBwb3J0YWwgfSkgPT4gKE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7IGN1cnJlbnRWZXJzaW9uOiAxMC41MSwgaWQsXG4gICAgbmFtZSwgZ2VvbWV0cnlUeXBlOiBnZW9tZXRyeVR5cGVzW3R5cGVdLCB0eXBlOiBcIkZlYXR1cmUgTGF5ZXJcIiwgZGlzcGxheUZpZWxkOiBcIlwiLCBkZXNjcmlwdGlvbjogXCJcIiwgY29weXJpZ2h0VGV4dDogXCJcIiwgZGVmYXVsdFZpc2liaWxpdHk6IHRydWUsIGVkaXRpbmdJbmZvOiB7IGxhc3RFZGl0RGF0ZTogbnVsbCB9LCByZWxhdGlvbnNoaXBzOiBbXSwgaXNEYXRhVmVyc2lvbmVkOiBmYWxzZSwgc3VwcG9ydHNBcHBlbmQ6IHRydWUsIHN1cHBvcnRzQ2FsY3VsYXRlOiB0cnVlLCBzdXBwb3J0c1RydW5jYXRlOiB0cnVlLCBzdXBwb3J0c0F0dGFjaG1lbnRzQnlVcGxvYWRJZDogdHJ1ZSwgc3VwcG9ydHNBdHRhY2htZW50c1Jlc2l6aW5nOiB0cnVlLCBzdXBwb3J0c1JvbGxiYWNrT25GYWlsdXJlUGFyYW1ldGVyOiB0cnVlLCBzdXBwb3J0c1N0YXRpc3RpY3M6IHRydWUsIHN1cHBvcnRzQWR2YW5jZWRRdWVyaWVzOiB0cnVlLCBzdXBwb3J0c1ZhbGlkYXRlU3FsOiB0cnVlLCBzdXBwb3J0c0Nvb3JkaW5hdGVzUXVhbnRpemF0aW9uOiB0cnVlLCBzdXBwb3J0c0FwcGx5RWRpdHNXaXRoR2xvYmFsSWRzOiBmYWxzZSwgc3VwcG9ydHNNdWx0aVNjYWxlR2VvbWV0cnk6ICFwb3J0YWwuaXNQb3J0YWwsIGhhc0dlb21ldHJ5UHJvcGVydGllczogdHJ1ZSwgZ2VvbWV0cnlQcm9wZXJ0aWVzOiB7XG4gICAgICAgIHNoYXBlTGVuZ3RoRmllbGROYW1lOiBcIlNoYXBlX19MZW5ndGhcIixcbiAgICAgICAgdW5pdHM6IFwiZXNyaU1ldGVyc1wiXG4gICAgfSwgYWR2YW5jZWRRdWVyeUNhcGFiaWxpdGllczoge1xuICAgICAgICBzdXBwb3J0c1BhZ2luYXRpb246IHRydWUsXG4gICAgICAgIHN1cHBvcnRzUGFnaW5hdGlvbk9uQWdncmVnYXRlZFF1ZXJpZXM6IHRydWUsXG4gICAgICAgIHN1cHBvcnRzUXVlcnlSZWxhdGVkUGFnaW5hdGlvbjogdHJ1ZSxcbiAgICAgICAgc3VwcG9ydHNRdWVyeVdpdGhEaXN0YW5jZTogdHJ1ZSxcbiAgICAgICAgc3VwcG9ydHNSZXR1cm5pbmdRdWVyeUV4dGVudDogdHJ1ZSxcbiAgICAgICAgc3VwcG9ydHNTdGF0aXN0aWNzOiB0cnVlLFxuICAgICAgICBzdXBwb3J0c09yZGVyQnk6IHRydWUsXG4gICAgICAgIHN1cHBvcnRzRGlzdGluY3Q6IHRydWUsXG4gICAgICAgIHN1cHBvcnRzUXVlcnlXaXRoUmVzdWx0VHlwZTogdHJ1ZSxcbiAgICAgICAgc3VwcG9ydHNTcWxFeHByZXNzaW9uOiB0cnVlLFxuICAgICAgICBzdXBwb3J0c0FkdmFuY2VkUXVlcnlSZWxhdGVkOiB0cnVlLFxuICAgICAgICBzdXBwb3J0c0NvdW50RGlzdGluY3Q6IHRydWUsXG4gICAgICAgIHN1cHBvcnRzTG9kOiB0cnVlLFxuICAgICAgICBzdXBwb3J0c1JldHVybmluZ0dlb21ldHJ5Q2VudHJvaWQ6IGZhbHNlLFxuICAgICAgICBzdXBwb3J0c1JldHVybmluZ0dlb21ldHJ5UHJvcGVydGllczogdHJ1ZSxcbiAgICAgICAgc3VwcG9ydHNRdWVyeVdpdGhEYXR1bVRyYW5zZm9ybWF0aW9uOiB0cnVlLFxuICAgICAgICBzdXBwb3J0c0hhdmluZ0NsYXVzZTogdHJ1ZSxcbiAgICAgICAgc3VwcG9ydHNPdXRGaWVsZFNRTEV4cHJlc3Npb246IHRydWVcbiAgICB9LCB1c2VTdGFuZGFyZGl6ZWRRdWVyaWVzOiB0cnVlLCBtaW5TY2FsZTogMCwgbWF4U2NhbGU6IDAsIGV4dGVudDoge1xuICAgICAgICB4bWluOiAtMTc4MTExMTguNTI2OTIzNzcyLFxuICAgICAgICB5bWluOiAtMTU1Mzg3MTEuMDk2MzA5MjI0LFxuICAgICAgICB4bWF4OiAxNzgxMTExOC41MjY5MjM3NzIsXG4gICAgICAgIHltYXg6IDE1NTM4NzExLjA5NjMwOTIyNCxcbiAgICAgICAgc3BhdGlhbFJlZmVyZW5jZTogeyB3a2lkOiAxMDIxMDAsIGxhdGVzdFdraWQ6IDM4NTcgfVxuICAgIH0sIGRyYXdpbmdJbmZvOiBPYmplY3QuYXNzaWduKHsgcmVuZGVyZXI6IHJlbmRlcmVyc1t0eXBlXSB9LCAodHlwZSA9PT0gXCJwb2ludFwiID8ge30gOiB7IHRyYW5zcGFyZW5jeTogMCwgbGFiZWxpbmdJbmZvOiBudWxsIH0pKSwgYWxsb3dHZW9tZXRyeVVwZGF0ZXM6IHRydWUsIGhhc0F0dGFjaG1lbnRzOiB0cnVlLCBodG1sUG9wdXBUeXBlOiBcImVzcmlTZXJ2ZXJIVE1MUG9wdXBUeXBlTm9uZVwiLCBoYXNNZXRhZGF0YTogdHJ1ZSwgaGFzTTogZW5hYmxlTURlZmF1bHRzLCBoYXNaOiBlbmFibGVaRGVmYXVsdHMsIG9iamVjdElkRmllbGQ6IFwiT0JKRUNUSURcIiwgdW5pcXVlSWRGaWVsZDoge1xuICAgICAgICBuYW1lOiBcIk9CSkVDVElEXCIsXG4gICAgICAgIGlzU3lzdGVtTWFpbnRhaW5lZDogdHJ1ZVxuICAgIH0sIGZpZWxkczogW1xuICAgICAgICB7XG4gICAgICAgICAgICBuYW1lOiBcIk9CSkVDVElEXCIsXG4gICAgICAgICAgICB0eXBlOiBcImVzcmlGaWVsZFR5cGVPSURcIixcbiAgICAgICAgICAgIGFsaWFzOiBcIk9CSkVDVElEXCIsXG4gICAgICAgICAgICBzcWxUeXBlOiBcInNxbFR5cGVPdGhlclwiLFxuICAgICAgICAgICAgbnVsbGFibGU6IGZhbHNlLFxuICAgICAgICAgICAgZWRpdGFibGU6IGZhbHNlLFxuICAgICAgICAgICAgZG9tYWluOiBudWxsLFxuICAgICAgICAgICAgZGVmYXVsdFZhbHVlOiBudWxsXG4gICAgICAgIH0sXG4gICAgICAgIC4uLihjYXB0dXJlR1BTID8gZ2V0Q2FwdHVyZUdQU0ZpZWxkRm9yR2VvbWV0cnlUeXBlKHR5cGUpIDogW10pXG4gICAgXSwgY2FwYWJpbGl0aWVzOiBcIlF1ZXJ5LEVkaXRpbmcsQ3JlYXRlLFVwZGF0ZSxEZWxldGUsU3luY1wiLCBtYXhSZWNvcmRDb3VudDogMjAwMCwgc3VwcG9ydGVkUXVlcnlGb3JtYXRzOiBcIkpTT04sIGdlb0pTT04sIFBCRlwiLCBpbmRleGVzOiBbXSwgdHlwZXM6IFtdLCB0ZW1wbGF0ZXM6IGdldFRlbXBsYXRlRnJvbVR5cGUodHlwZSksIGdsb2JhbElkRmllbGQ6IFwiXCIsIGhhc1N0YXRpY0RhdGE6IGZhbHNlIH0sIChlbmFibGVaRGVmYXVsdHMgPyB7IGVuYWJsZVpEZWZhdWx0czogdHJ1ZSB9IDoge30pKSwgKGVuYWJsZU1EZWZhdWx0cyA/IHsgZW5hYmxlTURlZmF1bHRzOiB0cnVlIH0gOiB7fSkpKTtcbmNvbnN0IGdldFRhYmxlUHJvcGVydGllcyA9ICh7IG5hbWUsIGlkIH0pID0+ICh7XG4gICAgY3VycmVudFZlcnNpb246IDEwLjcsXG4gICAgaWQsXG4gICAgbmFtZSxcbiAgICB0eXBlOiBcIlRhYmxlXCIsXG4gICAgZGlzcGxheUZpZWxkOiBcIlwiLFxuICAgIGRlc2NyaXB0aW9uOiBcIlwiLFxuICAgIGNvcHlyaWdodFRleHQ6IFwiXCIsXG4gICAgZGVmYXVsdFZpc2liaWxpdHk6IHRydWUsXG4gICAgZWRpdGluZ0luZm86IHtcbiAgICAgICAgbGFzdEVkaXREYXRlOiBudWxsXG4gICAgfSxcbiAgICByZWxhdGlvbnNoaXBzOiBbXSxcbiAgICBpc0RhdGFWZXJzaW9uZWQ6IGZhbHNlLFxuICAgIHN1cHBvcnRzQXBwZW5kOiB0cnVlLFxuICAgIHN1cHBvcnRzQ2FsY3VsYXRlOiB0cnVlLFxuICAgIHN1cHBvcnRzQVN5bmNDYWxjdWxhdGU6IHRydWUsXG4gICAgc3VwcG9ydHNUcnVuY2F0ZTogdHJ1ZSxcbiAgICBzdXBwb3J0c0F0dGFjaG1lbnRzQnlVcGxvYWRJZDogdHJ1ZSxcbiAgICBzdXBwb3J0c0F0dGFjaG1lbnRzUmVzaXppbmc6IHRydWUsXG4gICAgc3VwcG9ydHNSb2xsYmFja09uRmFpbHVyZVBhcmFtZXRlcjogdHJ1ZSxcbiAgICBzdXBwb3J0c1N0YXRpc3RpY3M6IHRydWUsXG4gICAgc3VwcG9ydHNFeGNlZWRzTGltaXRTdGF0aXN0aWNzOiB0cnVlLFxuICAgIHN1cHBvcnRzQWR2YW5jZWRRdWVyaWVzOiB0cnVlLFxuICAgIHN1cHBvcnRzVmFsaWRhdGVTcWw6IHRydWUsXG4gICAgc3VwcG9ydHNDb29yZGluYXRlc1F1YW50aXphdGlvbjogdHJ1ZSxcbiAgICBzdXBwb3J0c0ZpZWxkRGVzY3JpcHRpb25Qcm9wZXJ0eTogdHJ1ZSxcbiAgICBzdXBwb3J0c1F1YW50aXphdGlvbkVkaXRNb2RlOiB0cnVlLFxuICAgIHN1cHBvcnRzQXBwbHlFZGl0c1dpdGhHbG9iYWxJZHM6IGZhbHNlLFxuICAgIGFkdmFuY2VkUXVlcnlDYXBhYmlsaXRpZXM6IHtcbiAgICAgICAgc3VwcG9ydHNQYWdpbmF0aW9uOiB0cnVlLFxuICAgICAgICBzdXBwb3J0c1BhZ2luYXRpb25PbkFnZ3JlZ2F0ZWRRdWVyaWVzOiB0cnVlLFxuICAgICAgICBzdXBwb3J0c1F1ZXJ5UmVsYXRlZFBhZ2luYXRpb246IHRydWUsXG4gICAgICAgIHN1cHBvcnRzUXVlcnlXaXRoRGlzdGFuY2U6IHRydWUsXG4gICAgICAgIHN1cHBvcnRzUmV0dXJuaW5nUXVlcnlFeHRlbnQ6IHRydWUsXG4gICAgICAgIHN1cHBvcnRzU3RhdGlzdGljczogdHJ1ZSxcbiAgICAgICAgc3VwcG9ydHNPcmRlckJ5OiB0cnVlLFxuICAgICAgICBzdXBwb3J0c0Rpc3RpbmN0OiB0cnVlLFxuICAgICAgICBzdXBwb3J0c1F1ZXJ5V2l0aFJlc3VsdFR5cGU6IHRydWUsXG4gICAgICAgIHN1cHBvcnRzU3FsRXhwcmVzc2lvbjogdHJ1ZSxcbiAgICAgICAgc3VwcG9ydHNBZHZhbmNlZFF1ZXJ5UmVsYXRlZDogdHJ1ZSxcbiAgICAgICAgc3VwcG9ydHNDb3VudERpc3RpbmN0OiB0cnVlLFxuICAgICAgICBzdXBwb3J0c1BlcmNlbnRpbGVTdGF0aXN0aWNzOiB0cnVlLFxuICAgICAgICBzdXBwb3J0c0xvZDogdHJ1ZSxcbiAgICAgICAgc3VwcG9ydHNRdWVyeVdpdGhMb2RTUjogZmFsc2UsXG4gICAgICAgIHN1cHBvcnRlZExvZFR5cGVzOiBbXCJnZW9oYXNoXCJdLFxuICAgICAgICBzdXBwb3J0c1JldHVybmluZ0dlb21ldHJ5Q2VudHJvaWQ6IGZhbHNlLFxuICAgICAgICBzdXBwb3J0c1F1ZXJ5V2l0aERhdHVtVHJhbnNmb3JtYXRpb246IHRydWUsXG4gICAgICAgIHN1cHBvcnRzSGF2aW5nQ2xhdXNlOiB0cnVlLFxuICAgICAgICBzdXBwb3J0c091dEZpZWxkU1FMRXhwcmVzc2lvbjogdHJ1ZSxcbiAgICAgICAgc3VwcG9ydHNNYXhSZWNvcmRDb3VudEZhY3RvcjogdHJ1ZSxcbiAgICAgICAgc3VwcG9ydHNUb3BGZWF0dXJlc1F1ZXJ5OiB0cnVlLFxuICAgICAgICBzdXBwb3J0c1F1ZXJ5V2l0aENhY2hlSGludDogdHJ1ZVxuICAgIH0sXG4gICAgdXNlU3RhbmRhcmRpemVkUXVlcmllczogdHJ1ZSxcbiAgICBhbGxvd0dlb21ldHJ5VXBkYXRlczogdHJ1ZSxcbiAgICBoYXNBdHRhY2htZW50czogZmFsc2UsXG4gICAgaHRtbFBvcHVwVHlwZTogXCJlc3JpU2VydmVySFRNTFBvcHVwVHlwZU5vbmVcIixcbiAgICBoYXNNOiBmYWxzZSxcbiAgICBoYXNaOiBmYWxzZSxcbiAgICBvYmplY3RJZEZpZWxkOiBcIk9CSkVDVElEXCIsXG4gICAgdW5pcXVlSWRGaWVsZDoge1xuICAgICAgICBuYW1lOiBcIk9CSkVDVElEXCIsXG4gICAgICAgIGlzU3lzdGVtTWFpbnRhaW5lZDogdHJ1ZVxuICAgIH0sXG4gICAgZ2xvYmFsSWRGaWVsZDogXCJcIixcbiAgICB0eXBlSWRGaWVsZDogXCJcIixcbiAgICBmaWVsZHM6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgbmFtZTogXCJPQkpFQ1RJRFwiLFxuICAgICAgICAgICAgdHlwZTogXCJlc3JpRmllbGRUeXBlT0lEXCIsXG4gICAgICAgICAgICBhbGlhczogXCJPQkpFQ1RJRFwiLFxuICAgICAgICAgICAgc3FsVHlwZTogXCJzcWxUeXBlT3RoZXJcIixcbiAgICAgICAgICAgIG51bGxhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgIGVkaXRhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgIGRvbWFpbjogbnVsbCxcbiAgICAgICAgICAgIGRlZmF1bHRWYWx1ZTogbnVsbFxuICAgICAgICB9XG4gICAgXSxcbiAgICBpbmRleGVzOiBbXSxcbiAgICB0eXBlczogW10sXG4gICAgdGVtcGxhdGVzOiBbXSxcbiAgICBzdXBwb3J0ZWRRdWVyeUZvcm1hdHM6IFwiSlNPTiwgZ2VvSlNPTiwgUEJGXCIsXG4gICAgaGFzU3RhdGljRGF0YTogZmFsc2UsXG4gICAgbWF4UmVjb3JkQ291bnQ6IDIwMDAsXG4gICAgc3RhbmRhcmRNYXhSZWNvcmRDb3VudDogMzIwMDAsXG4gICAgdGlsZU1heFJlY29yZENvdW50OiA4MDAwLFxuICAgIG1heFJlY29yZENvdW50RmFjdG9yOiAxLFxuICAgIGNhcGFiaWxpdGllczogXCJRdWVyeSxFZGl0aW5nLENyZWF0ZSxVcGRhdGUsRGVsZXRlLFN5bmNcIixcbiAgICBzeW5jRW5hYmxlZDogdHJ1ZVxufSk7XG5mdW5jdGlvbiBnZXRGdWxsTGF5ZXJJbmZvKGlkLCBuYW1lLCB0eXBlLCBsYXllclByZWZlcmVuY2UsIHBvcnRhbCkge1xuICAgIGlmICh0eXBlID09PSBcInRhYmxlXCIpIHtcbiAgICAgICAgLy8gVE9ETzogZmlndXJlIHRoaXMgb3V0XG4gICAgICAgIHJldHVybiBnZXRUYWJsZVByb3BlcnRpZXMoeyBpZCwgbmFtZSB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGdldFNoYXJlZExheWVyUHJvcGVydGllcyh7XG4gICAgICAgIGlkLFxuICAgICAgICBuYW1lLFxuICAgICAgICB0eXBlOiB0eXBlLFxuICAgICAgICBsYXllclByZWZlcmVuY2UsXG4gICAgICAgIHBvcnRhbFxuICAgIH0pO1xufVxuY29uc3Qgc2F2ZU5ld0luZm9Ub1N0b3JlID0gKG5ld0xheWVySW5mb3MsIGxheWVyUHJlZmVyZW5jZSwgcG9ydGFsKSA9PiB7XG4gICAgdmFyIF9hLCBfYjtcbiAgICBjb25zdCBmZWF0dXJlTGF5ZXJJbmZvID0gbmV3TGF5ZXJJbmZvcy5tYXAoKHsgbmFtZSwgdHlwZSB9LCBpbmRleCkgPT4gZ2V0RnVsbExheWVySW5mbyhpbmRleCwgbmFtZSwgdHlwZSwgbGF5ZXJQcmVmZXJlbmNlLCBwb3J0YWwpKTtcbiAgICBjb25zdCBsYXllcnMgPSBbXTtcbiAgICBjb25zdCB0YWJsZXMgPSBbXTtcbiAgICBmZWF0dXJlTGF5ZXJJbmZvLmZvckVhY2goKGluZm8sIGluZGV4KSA9PiB7XG4gICAgICAgIGNvbnN0IG5ld0luZm8gPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGluZm8pLCB7IGlkOiBpbmRleCB9KTtcbiAgICAgICAgaWYgKG5ld0luZm8udHlwZSA9PT0gXCJUYWJsZVwiKSB7XG4gICAgICAgICAgICB0YWJsZXMucHVzaChuZXdJbmZvKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGxheWVycy5wdXNoKG5ld0luZm8pO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgYWRkSXRlbVN0YXRlLnNlcnZpY2VJbmZvID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGFkZEl0ZW1TdGF0ZS5zZXJ2aWNlSW5mbyksIGxheWVyUHJlZmVyZW5jZSksIHsgbmFtZTogKF9iID0gKF9hID0gYWRkSXRlbVN0YXRlLnNlcnZpY2VJbmZvKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EubmFtZSkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogXCJcIiwgbGF5ZXJzLFxuICAgICAgICB0YWJsZXMgfSk7XG59O1xuY29uc3QgZ2V0TmV3SW5mb0Zyb21TdG9yZSA9ICgpID0+IHtcbiAgICBjb25zdCB7IGxheWVycyA9IFtdLCB0YWJsZXMgPSBbXSwgZW5hYmxlWkRlZmF1bHRzID0gZmFsc2UsIGVuYWJsZU1EZWZhdWx0cyA9IGZhbHNlLCBjYXB0dXJlR1BTID0gZmFsc2UgfSA9IGFkZEl0ZW1TdGF0ZS5zZXJ2aWNlSW5mbyB8fCB7fTtcbiAgICBjb25zdCByZXZlcnRFc3JpR2VvbWV0cnlMb29rdXAgPSB7fTtcbiAgICBPYmplY3Qua2V5cyhnZW9tZXRyeVR5cGVzKS5mb3JFYWNoKChnZW9tZXRyeVR5cGUpID0+IHtcbiAgICAgICAgcmV2ZXJ0RXNyaUdlb21ldHJ5TG9va3VwW2dlb21ldHJ5VHlwZXNbZ2VvbWV0cnlUeXBlXV0gPSBnZW9tZXRyeVR5cGU7XG4gICAgfSk7XG4gICAgY29uc3QgYWxsTGF5ZXJzQW5kVGFibGVzID0gY29tYmluZUZlYXR1cmVMYXllckluZm9zKGxheWVycywgdGFibGVzKTtcbiAgICBjb25zdCBuZXdMYXllckluZm9zID0gYWxsTGF5ZXJzQW5kVGFibGVzLm1hcCgoaXRlbSkgPT4gKHtcbiAgICAgICAgaWQ6IGd1aWQoKSxcbiAgICAgICAgbmFtZTogaXRlbS5uYW1lLFxuICAgICAgICB0eXBlOiBpdGVtLnR5cGUgPT09IFwiRmVhdHVyZSBMYXllclwiID8gcmV2ZXJ0RXNyaUdlb21ldHJ5TG9va3VwW2l0ZW0uZ2VvbWV0cnlUeXBlXSA6IFwidGFibGVcIlxuICAgIH0pKTtcbiAgICByZXR1cm4geyBuZXdMYXllckluZm9zLCBsYXllclByZWZlcmVuY2U6IHsgY2FwdHVyZUdQUywgZW5hYmxlWkRlZmF1bHRzLCBlbmFibGVNRGVmYXVsdHMgfSB9O1xufTtcbmNvbnN0IGNvbWJpbmVGZWF0dXJlTGF5ZXJJbmZvcyA9IChsYXllcnMsIHRhYmxlcykgPT4gWy4uLmxheWVycywgLi4udGFibGVzXS5zb3J0KChpdGVtQSwgaXRlbUIpID0+IGl0ZW1BLmlkIC0gaXRlbUIuaWQpO1xuY29uc3Qgc2F2ZUZlYXR1cmVMYXllclNlYXJjaFJlc3VsdCA9IChzZWFyY2hSZXN1bHQpID0+IHtcbiAgICBhZGRJdGVtU3RhdGUudHlwZUtleXdvcmRzID0gc2VhcmNoUmVzdWx0LnR5cGVLZXl3b3JkcztcbiAgICBhZGRJdGVtU3RhdGUudGh1bWJuYWlsVVJMID0gZ2V0SXRlbVRodW1ibmFpbChjb25maWdTdGF0ZS5wb3J0YWwsIHNlYXJjaFJlc3VsdCk7XG4gICAgaXRlbVByb3BlcnRpZXNTdGF0ZS50YWdzID0gc2VhcmNoUmVzdWx0LnRhZ3M7XG4gICAgaXRlbVByb3BlcnRpZXNTdGF0ZS5zbmlwcGV0ID0gc2VhcmNoUmVzdWx0LnNuaXBwZXQgfHwgXCJcIjtcbn07XG5jb25zdCBsYXllckNhcHR1cmVHUFMgPSAobGF5ZXJJbmZvKSA9PiBsYXllckluZm8udHlwZSA9PT0gXCJGZWF0dXJlIExheWVyXCIgJiZcbiAgICBnZXRDYXB0dXJlR1BTRmllbGRGb3JFc3JpR2VvbWV0cnlUeXBlKGxheWVySW5mby5nZW9tZXRyeVR5cGUpLmV2ZXJ5KChmaWVsZCkgPT4gKGxheWVySW5mby5maWVsZHMgfHwgW10pLmZpbmQoKGxheWVyRmllbGQpID0+IGxheWVyRmllbGQuYWxpYXMgPT09IGZpZWxkLmFsaWFzKSAhPSBudWxsKTtcbmNvbnN0IGxheWVyVXNlWlZhbHVlcyA9IChsYXllckluZm8pID0+ICEhbGF5ZXJJbmZvLmVuYWJsZVpEZWZhdWx0cyB8fCAhIWxheWVySW5mby5oYXNaO1xuY29uc3QgbGF5ZXJVc2VNVmFsdWVzID0gKGxheWVySW5mbykgPT4gISFsYXllckluZm8uZW5hYmxlTURlZmF1bHRzIHx8ICEhbGF5ZXJJbmZvLmhhc007XG5jb25zdCBtZXJnZUxheWVyUHJlZmVyZW5jZSA9IChsYXllckluZm9zLCBsYXllclByZWZlcmVuY2UpID0+IHtcbiAgICBjb25zdCBsYXllcnMgPSBsYXllckluZm9zLm1hcCgobGF5ZXJJbmZvKSA9PiB7XG4gICAgICAgIGNvbnN0IG5ld0xheWVyID0gT2JqZWN0LmFzc2lnbih7fSwgbGF5ZXJJbmZvKTtcbiAgICAgICAgaWYgKGxheWVyUHJlZmVyZW5jZS5lbmFibGVaRGVmYXVsdHMpIHtcbiAgICAgICAgICAgIG5ld0xheWVyLmVuYWJsZVpEZWZhdWx0cyA9IHRydWU7XG4gICAgICAgICAgICBuZXdMYXllci5oYXNaID0gdHJ1ZTtcbiAgICAgICAgICAgIGlmICghbGF5ZXJVc2VaVmFsdWVzKGxheWVySW5mbykpIHtcbiAgICAgICAgICAgICAgICBuZXdMYXllci56RGVmYXVsdCA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBuZXdMYXllci5lbmFibGVaRGVmYXVsdHMgPSBmYWxzZTtcbiAgICAgICAgICAgIG5ld0xheWVyLmhhc1ogPSBmYWxzZTtcbiAgICAgICAgICAgIGRlbGV0ZSBuZXdMYXllci56RGVmYXVsdDtcbiAgICAgICAgfVxuICAgICAgICBpZiAobGF5ZXJQcmVmZXJlbmNlLmVuYWJsZU1EZWZhdWx0cykge1xuICAgICAgICAgICAgbmV3TGF5ZXIuZW5hYmxlTURlZmF1bHRzID0gdHJ1ZTtcbiAgICAgICAgICAgIG5ld0xheWVyLmhhc00gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbmV3TGF5ZXIuZW5hYmxlTURlZmF1bHRzID0gZmFsc2U7XG4gICAgICAgICAgICBuZXdMYXllci5oYXNNID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxheWVySW5mby50eXBlID09PSBcIkZlYXR1cmUgTGF5ZXJcIikge1xuICAgICAgICAgICAgY29uc3QgZmllbGRMaXN0ID0gZ2V0Q2FwdHVyZUdQU0ZpZWxkRm9yRXNyaUdlb21ldHJ5VHlwZShsYXllckluZm8uZ2VvbWV0cnlUeXBlKTtcbiAgICAgICAgICAgIGlmIChsYXllclByZWZlcmVuY2UuY2FwdHVyZUdQUykge1xuICAgICAgICAgICAgICAgIGlmIChsYXllckluZm8uZ2VvbWV0cnlUeXBlICE9PSBcImVzcmlHZW9tZXRyeVBvaW50XCIpIHtcbiAgICAgICAgICAgICAgICAgICAgbmV3TGF5ZXIuaGFzQXR0YWNobWVudHMgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoIWxheWVyQ2FwdHVyZUdQUyhsYXllckluZm8pKSB7XG4gICAgICAgICAgICAgICAgICAgIG5ld0xheWVyLmZpZWxkcyA9IHVuaXF1ZUJ5KFsuLi5uZXdMYXllci5maWVsZHMsIC4uLmZpZWxkTGlzdF0sIChsYXllckluZm8pID0+IGxheWVySW5mby5uYW1lKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBuZXdMYXllci5maWVsZHMgPSBuZXdMYXllci5maWVsZHMuZmlsdGVyKChsYXllckZpZWxkKSA9PiAhZmllbGRMaXN0LnNvbWUoKGZpZWxkKSA9PiBmaWVsZC5uYW1lID09PSBsYXllckZpZWxkLm5hbWUpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3TGF5ZXI7XG4gICAgfSk7XG4gICAgcmV0dXJuIGxheWVycztcbn07XG5jb25zdCBnZXRGZWF0dXJlTGF5ZXJJbmRleEZyb21VcmwgPSAodXJsKSA9PiB7XG4gICAgdmFyIF9hO1xuICAgIGNvbnN0IHsgaW5kZXgsIHNlcnZlclR5cGUgfSA9IChfYSA9IHBhcnNlQUdTU2VydmVySW5mbyh1cmwpKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiB7fTtcbiAgICBpZiAoc2VydmVyVHlwZSAhPT0gXCJGZWF0dXJlU2VydmVyXCIpIHtcbiAgICAgICAgcmV0dXJuIHsgZXJyb3I6IHsgY29kZTogXCJpbnZhbGlkRmVhdHVyZUxheWVyVXJsXCIgfSB9O1xuICAgIH1cbiAgICByZXR1cm4geyByZXN1bHQ6IGluZGV4IH07XG59O1xuXG5leHBvcnQgeyBnZXROZXdJbmZvRnJvbVN0b3JlIGFzIGEsIHNhdmVOZXdJbmZvVG9TdG9yZSBhcyBiLCBjb21iaW5lRmVhdHVyZUxheWVySW5mb3MgYXMgYywgbGF5ZXJVc2VaVmFsdWVzIGFzIGQsIGxheWVyVXNlTVZhbHVlcyBhcyBlLCBnZXRGZWF0dXJlTGF5ZXJJbmRleEZyb21VcmwgYXMgZywgbGF5ZXJDYXB0dXJlR1BTIGFzIGwsIG1lcmdlTGF5ZXJQcmVmZXJlbmNlIGFzIG0sIHNhdmVGZWF0dXJlTGF5ZXJTZWFyY2hSZXN1bHQgYXMgcyB9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1mZWF0dXJlLWxheWVyLTc5ZmIzMDJjLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==