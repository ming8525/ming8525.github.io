"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_arcgis-7b7029"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-browser_10.entry.js":
/*!********************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-browser_10.entry.js ***!
  \********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   arcgis_browser: () => (/* binding */ ArcgisBrowser),
/* harmony export */   arcgis_browser_actions: () => (/* binding */ ArcgisBrowserActions),
/* harmony export */   arcgis_browser_filter: () => (/* binding */ ArcgisBrowserFilter),
/* harmony export */   arcgis_browser_filter_date: () => (/* binding */ ArcgisBrowserFilterDate),
/* harmony export */   arcgis_browser_filter_status: () => (/* binding */ ArcgisBrowserFilterStatus),
/* harmony export */   arcgis_browser_filters: () => (/* binding */ ArcgisItemBrowserFilters),
/* harmony export */   arcgis_browser_pagination: () => (/* binding */ ArcgisBrowserPagination),
/* harmony export */   arcgis_browser_search: () => (/* binding */ ArcgisBrowserSearch),
/* harmony export */   arcgis_browser_sort: () => (/* binding */ ArcgisBrowserSort),
/* harmony export */   arcgis_browser_top_bar: () => (/* binding */ ArcgisBrowserTopBar)
/* harmony export */ });
/* harmony import */ var _index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-e3bf7da7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-e3bf7da7.js");
/* harmony import */ var _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./languageUtil-ef0e54b2.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-ef0e54b2.js");
/* harmony import */ var _locale_050b6db9_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./locale-050b6db9.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-050b6db9.js");
/* harmony import */ var _types_a031c1da_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./types-a031c1da.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/types-a031c1da.js");
/* harmony import */ var _resize_a17b7292_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./resize-a17b7292.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/resize-a17b7292.js");
/* harmony import */ var _store_8b1b0846_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./store-8b1b0846.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/store-8b1b0846.js");
/* harmony import */ var _functional_44de8fcf_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./functional-44de8fcf.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-44de8fcf.js");
/* harmony import */ var _utils_2f459d6d_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./utils-2f459d6d.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/utils-2f459d6d.js");
/* harmony import */ var _loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./loadModules-b4ac1247.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-b4ac1247.js");
/* harmony import */ var _dom_4d367677_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./dom-4d367677.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-4d367677.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */











/** Get the human readable number values for a given search pagination result */
function calculatePageBoundaries({ start, num, total }) {
    start = Math.min(start, total);
    total = Math.min(total, 10000);
    const end = Math.min(total, Math.max(start + num - 1, 0));
    return {
        start,
        end,
        total
    };
}

const arcgisBrowserCss = ":host{position:relative;display:flex;height:100%;flex-direction:column;overflow-y:auto;overflow-x:hidden;background-color:var(--calcite-color-background);--arcgis-browser-max-width:100%;--arcgis-browser-pane-width:18.75rem;--arcgis-browser-pane-z-index:11}:host([height=auto]){height:auto;min-height:100%;flex:1 1 100%}.wrapper{display:flex;height:100%;flex-direction:column;overflow:hidden}.wrapper--fixed{overflow:hidden}.wrapper--auto{flex:1 1 100%}.wrapper--full{transform:translate(0, 0)}.panel{display:flex;height:100%;flex-direction:column;overflow:hidden}.top-bar{position:sticky;top:0px;right:0px;left:0px;z-index:20;flex-shrink:0;flex-grow:0;border-bottom:1px solid var(--calcite-color-border-3)}.scrolling{position:relative;display:flex;min-height:0px;width:100%;flex:1 1 0%;flex-direction:column}.scrolling--full{overflow-y:scroll}.preview-position{position:absolute;inset:0px;margin-left:auto;margin-right:auto;width:100%;max-width:var(--arcgis-browser-max-width)}.preview-position--with-top-bar{top:3rem}.two-up{margin-left:auto;margin-right:auto;display:flex;width:100%;flex:1 1 auto;flex-direction:row;max-width:var(--arcgis-browser-max-width)}.two-up.small{margin-top:-1px}.content{position:relative;display:flex;min-width:0px;flex:1 1 0%;overflow:hidden}.content__top{position:relative;display:flex;height:1.5rem;flex-grow:0;align-items:center;justify-content:space-between;padding-top:1.25rem;padding-bottom:0.75rem;font-size:0.875rem;color:var(--calcite-color-text-1);z-index:2}.content__top__end{margin-inline-start:auto;display:grid;gap:0.5rem;grid-template-columns:auto auto}.actions{flex:1 1 0%}.filter-status{flex:1 1 0%}.content__view{min-width:0px;flex:1 1 0%;margin-inline-end:0.25rem;padding-inline-end:1rem;padding-inline-start:1rem}.content__view--padded-bottom{padding-bottom:1rem}.content__view--no-filters{margin-inline-start:0.25rem;padding-inline-start:1rem}.pane{pointer-events:none;visibility:hidden;display:flex;height:100%;background-color:var(--calcite-color-background);opacity:0;transition-duration:var(--calcite-internal-animation-timing-medium);transition-property:transform, visibility, opacity;border-left:1px solid var(--calcite-color-border-3);border-right:1px solid var(--calcite-color-border-3)}.pane--open{pointer-events:auto;visibility:visible;opacity:1;transform:translate(0);box-shadow:4px 0px 16px 0px rgba(0, 0, 0, 0.06)}.preview{width:0px;flex-shrink:0;flex-grow:0;position:absolute;top:0px;bottom:0px;inset-inline-start:0;transition-duration:var(--calcite-internal-animation-timing-medium);transition-property:width;z-index:var(--arcgis-browser-pane-z-index)}.preview--fixed{position:fixed}.preview--active{overflow:auto;width:var(--arcgis-browser-pane-width);box-shadow:rgba(0, 0, 0, 0.06) 4px 0px 16px 0px}.filter-panel,.preview-panel{position:relative;height:100%;background-color:var(--calcite-color-background)}.filter-panel__content{padding-left:1rem;padding-right:1rem;padding-top:0.75rem;padding-bottom:0px}.filter-status--mobile{width:100%}.filter-status--active{display:block}.sheet{pointer-events:none;position:fixed;inset:0px;z-index:110}.sheet__background{position:absolute;inset:0px;opacity:0;transition:all var(--calcite-animation-timing) ease-in-out 0s, outline 0s, outline-offset 0s;background-color:rgba(0, 0, 0, 0.2)}.sheet--active .sheet__background{opacity:1}.sheet--active{pointer-events:auto;opacity:1}.sheet__contents{position:absolute;inset:0px;opacity:0;transition:all var(--calcite-animation-timing) ease-in-out 0s, outline 0s, outline-offset 0s;top:3rem;transform:translate3d(0, 24px, 0)}.sheet--active .sheet__contents{opacity:1;transform:translate3d(0, 0, 0)}.hide{display:none}.aria-hidden{height:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0, 0, 0, 0);white-space:nowrap;border-width:0;position:absolute;top:0px;bottom:0px;width:0px;inset-inline-end:0}.content__view--flex{display:flex;flex-direction:column}.cover{display:flex;flex:1 1 0%;align-items:flex-start;justify-content:center;overflow:auto;padding-bottom:1rem;padding-top:0.25rem}.no-results{margin-left:auto;margin-right:auto;max-width:28rem;padding-left:1.5rem;padding-right:1.5rem;font-size:0.875rem;color:var(--calcite-color-text-2)}.results-wrapper{flex:1 1 0%}.results-wrapper--spaced{padding-top:1.5rem}.loader{--calcite-loader-padding:0}.filters{box-sizing:border-box;width:16rem;flex-grow:0;padding-inline-start:1.5rem;padding-inline-end:0px;width:var(--arcgis-browser-pane-width)}.filters--sticky{position:sticky;top:0px;height:100%}.filters__content{overflow-y:auto;height:100%;padding-top:1.5rem;box-sizing:border-box;scrollbar-gutter:stable}.filters--empty{display:none}.filters--active{opacity:1;transform:translate3d(0, 0, 0)}.filters__title{margin-left:0px;margin-right:0px;margin-bottom:1rem;margin-top:0px;padding-bottom:1rem;padding-top:0px;font-size:0.875rem;font-weight:500;color:var(--calcite-color-text-1);padding-inline-start:0.75rem;border-bottom:1px solid var(--calcite-color-border-3)}.range{font-size:0.875rem;color:var(--calcite-color-text-1)}.container{display:flex;height:100%;width:100%;flex-direction:column;background-color:var(--calcite-color-background)}.container__header{display:flex;flex:0 1 auto;flex-direction:row;background-color:var(--calcite-color-foreground-1)}.container__header__text{margin:0px;flex:1 1 0%;padding-left:0.75rem;padding-right:0.75rem;padding-top:.875rem;padding-bottom:.875rem;font-size:1rem;font-weight:500;color:var(--calcite-color-text-2)}.container__content{flex:1 1 0%;overflow:auto}.container__footer{box-sizing:border-box;width:100%;flex:0 1 auto;background-color:var(--calcite-color-foreground-1);padding:0.5rem}.small .filters{padding:0px}.small .filters__content{padding-left:1rem;padding-right:1rem}.small .content__view{padding-inline:0.5rem;margin-inline:0}.small .content__view--panel{padding-inline:0}@media screen and (max-width: 640px){:host{--arcgis-browser-pane-width:100%}}";

const ArcgisBrowser = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.ariaUpdate = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "ariaUpdate", 7);
        this.handleResize = () => requestAnimationFrame(this.updatePreviewPosition);
        this.updatePreviewPosition = () => {
            if (this.formFactor === "small" || this.height !== "auto" || !this.previewContainer) {
                return;
            }
            const rect = this.previewContainer.getBoundingClientRect();
            const { x, y, height } = rect;
            const maxY = height + y;
            this.previewBoundingBox = {
                top: Math.max(y, 0),
                left: x,
                bottom: maxY > window.innerHeight ? 0 : window.innerHeight - maxY
            };
        };
        this.panel = undefined;
        this.preview = undefined;
        this.loading = undefined;
        this.hideContentTop = undefined;
        this.selected = undefined;
        this.alwaysShowSelection = undefined;
        this.alwaysShowContent = undefined;
        this.response = undefined;
        this.store = undefined;
        this.api = 4;
        this.formFactor = undefined;
        this.searchTerm = undefined;
        this.height = "full";
        this.pageRangeText = undefined;
        this.noResults = undefined;
        this.previewBoundingBox = undefined;
        this.initialHide = true;
    }
    async componentWillLoad() {
        const locale = await (0,_locale_050b6db9_js__WEBPACK_IMPORTED_MODULE_2__.g)(this.el);
        this.i18n = locale[0];
        (0,_store_8b1b0846_js__WEBPACK_IMPORTED_MODULE_5__.o)(this.store, this.updatePreviewPosition);
        window.addEventListener("scroll", this.handleResize);
        window.addEventListener("resize", this.handleResize);
    }
    disconnectedCallback() {
        window.removeEventListener("resize", this.handleResize);
        window.removeEventListener("scroll", this.handleResize);
    }
    async updatePage(searchResponse) {
        const ranges = await this.updatePageRange(searchResponse);
        this.pageRangeText = ranges[0];
        this.ariaUpdate.emit(ranges[1]);
        this.noResults = (searchResponse === null || searchResponse === void 0 ? void 0 : searchResponse.total) === 0;
        this.initialHide = false;
    }
    renderPopoverContents(showFilters, showPreview, isSheet) {
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { style: {
                width: isSheet ? "100%" : `${this.store.state.width || 0}px`,
                height: isSheet ? "100%" : `${this.store.state.height || 0}px`
            } }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: { hide: !showPreview, "preview-panel": true } }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", { name: "preview" })), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: { hide: !showFilters, "filter-panel": true } }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("article", { class: "container" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("header", { class: "container__header" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("h2", { class: "container__header__text" }, this.i18n.browser.filters), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { text: this.i18n.browser.close, appearance: "solid", scale: "m", icon: "x", onClick: () => {
                this.store.state.filtersExpanded = false;
            } })), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "container__content" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "container__content__scroll" }, (this.store.state.panel || isSheet) && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "filter-container__content", key: "filter-container-content" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", { name: "sort" }))), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", { name: "filters" }))), this.formFactor === "small" && this.hasActiveFilter(this.store) && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "filter-status--mobile container__footer" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-browser-filter-status", { class: "filter-status", filters: this.store.state.filters })))))));
    }
    async updatePageRange(page) {
        const { start, end, total } = calculatePageBoundaries(page);
        const options = { api: this.api, places: 0, type: "decimal" };
        const startString = await (0,_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.f)(start, options);
        const endString = await (0,_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.f)(end, options);
        const totalString = (await (0,_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.f)(total, options)) + (total >= 10000 ? "+" : "");
        if (this.store.state.lang === "en") {
            return [
                `${startString}-${endString} of ${totalString}`,
                `${startString}-${endString} of ${totalString} item${total === 1 ? "" : "s"}`
            ];
        }
        return [
            this.i18n.browser.pageRange
                .replace("${start}", startString)
                .replace("${end}", endString)
                .replace("${total}", totalString),
            this.i18n.browser.pageRangeAria
                .replace("${start}", startString)
                .replace("${end}", endString)
                .replace("${total}", totalString)
        ];
    }
    renderFlow() {
        const { formFactor, loading, noResults, panel } = this;
        const autoHeight = this.height === "auto";
        const showSortInFilters = this.store.state.panel || this.store.state.width < _resize_a17b7292_js__WEBPACK_IMPORTED_MODULE_4__.b.sm;
        const showFilters = this.store.state.filtersExpanded &&
            (!this.store.state.filtersEmpty || (!this.store.state.sortEmpty && showSortInFilters));
        const showPreview = !!this.store.state.preview;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "panel" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: { "top-bar": true, "top-bar--small": formFactor === "small" } }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", { name: "top-bar" })), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: {
                scrolling: true,
                "scrolling--full": !autoHeight || panel
            } }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: {
                "two-up": true,
                [formFactor]: true
            } }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "content" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", { name: "content-start" }), loading && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "content__view content__view--flex" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "cover" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-loader", { class: "loader", label: "" })))), noResults && !loading && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "content__view content__view--flex" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "cover" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "no-results" }, this.renderNoResults())))), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: {
                hide: loading || noResults,
                content__view: true,
                "content__view--panel": !!this.store.state.panel,
                "content__view--flex": !loading && !noResults
            } }, !this.store.state.panel && !this.hideContentTop && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "content__top" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: { selection: true, hide: !this.alwaysShowSelection } }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", { name: "selection" })), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: "range" }, this.pageRangeText), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: "actions" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", { name: "actions" })), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "content__top__end" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", { name: "view" }), !showSortInFilters && (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", { name: "sort" })))), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "flow-content" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", { name: "content" })), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", { name: "pagination" }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", { name: "content-end" })))), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", { name: "scroll-end" })), !this.store.state.panel || window.innerWidth < this.store.state.width * 2 ? ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: {
                sheet: true,
                "sheet--active": showFilters || showPreview
            } }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "sheet__background" }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "sheet__contents" }, this.renderPopoverContents(showFilters, showPreview, true)))) : ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-popover", { overlayPositioning: "fixed", open: showPreview || showFilters, label: "filters", referenceElement: this.el, offsetSkidding: 0, offsetDistance: 0, triggerDisabled: true, pointerDisabled: true, placement: this.store.state.panel ? "trailing" : "auto", onCalcitePopoverOpen: (event) => {
                if (!this.store.state.panel || window.innerWidth < this.store.state.width * 2) {
                    event.target.style.transform = "none";
                }
            } }, this.renderPopoverContents(showFilters, showPreview)))));
    }
    hasActiveFilter(store) {
        // certain filters should still show empty state, not no results state
        return Object.values((store === null || store === void 0 ? void 0 : store.state.filters) || {})
            .filter(({ id }) => !_types_a031c1da_js__WEBPACK_IMPORTED_MODULE_3__.I.includes(id))
            .some((filter) => filter.value);
    }
    renderNoResults() {
        const showMessage = this.noResults && !this.loading;
        const hasFilters = this.hasActiveFilter(this.store) || !!this.searchTerm;
        if (!showMessage) {
            return null;
        }
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: { cover: true } }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "no-results" }, hasFilters ? (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", { name: "no-results" }) : (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", { name: "no-content" }))));
    }
    render() {
        const { loading, noResults, formFactor, hideContentTop, alwaysShowContent, panel, initialHide } = this;
        const autoHeight = this.height === "auto";
        const maxHeight = `${(this.store.state.height || window.innerHeight) - 48}px`;
        const maxHeightStyle = this.height === "auto" ? {} : { maxHeight };
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.H, null, formFactor === "small" ? (this.renderFlow()) : ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: {
                wrapper: true,
                "wrapper--fixed": this.store.state.filtersExpanded,
                "wrapper--auto": autoHeight,
                "wrapper--full": this.height === "full"
            } }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "top-bar" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", { name: "top-bar" })), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: {
                "preview-position": true,
                "preview-position--with-top-bar": !this.store.state.topbarEmpty
            }, ref: (el) => (this.previewContainer = el) }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: {
                preview: true,
                "preview--active": !!this.store.state.preview,
                "preview--fixed": autoHeight
            }, style: autoHeight && this.previewBoundingBox
                ? {
                    top: `${this.previewBoundingBox.top || 0}px`,
                    insetInlineStart: `${this.previewBoundingBox.left || 0}px`,
                    bottom: `${this.previewBoundingBox.bottom || 0}px`
                }
                : {} }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: {
                pane: true,
                "pane--open": !!this.store.state.preview
            } }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", { name: "preview" })))), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: {
                scrolling: true,
                "scrolling--full": !autoHeight || panel
            } }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: {
                "two-up": true,
                [formFactor]: true
            } }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: {
                filters: true,
                "filters--sticky": !autoHeight,
                "filters--empty": this.store.state.filtersEmpty && !this.store.state.preview,
                "filters--active": this.store.state.filtersExpanded
            }, style: maxHeightStyle }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "filters__content", style: maxHeightStyle }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", { name: "filters" }))), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "content" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", { name: "content-start" }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: {
                content__view: true,
                "content__view--no-filters": this.store.state.filtersEmpty && !this.store.state.preview,
                "content__view--flex": true
            } }, !hideContentTop && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "content__top" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: { selection: true, hide: !this.alwaysShowSelection } }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", { name: "selection" })), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: "range" }, this.pageRangeText), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: "actions" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", { name: "actions" })), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "content__top__end" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", { name: "view" }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", { name: "sort" })))), loading && !alwaysShowContent && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "cover" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-loader", { class: "loader", label: this.i18n.browser.loading }))), this.renderNoResults(), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: {
                hide: (loading && !alwaysShowContent) || noResults || initialHide,
                "results-wrapper--spaced": hideContentTop,
                "results-wrapper": true
            } }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", { name: "content" })), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: {
                hide: loading || noResults
            } }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", { name: "pagination" }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", { name: "content-end" }))))), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", { name: "scroll-end" }))))));
    }
    get el() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
    static get watchers() { return {
        "response": ["updatePage"]
    }; }
};
ArcgisBrowser.style = arcgisBrowserCss;

const arcgisBrowserActionsCss = ":host{position:relative;margin-left:1rem;margin-right:1rem;display:flex;justify-content:flex-end}.wrapper{display:flex;padding-inline-start:0.25rem;border-inline-start:1px solid var(--calcite-color-border-1);border-inline-end:1px solid var(--calcite-color-border-1)}.button{margin-inline-end:0.25rem}.measure-container{position:absolute;height:0px;width:100%;overflow:hidden}.measure-text{visibility:hidden;height:0px;width:auto;overflow:hidden;font-size:0.875rem}";

const ArcgisBrowserActions = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.actionWidths = [];
        // icon + internal padding + button padding + margin
        this.buttonPadding = 16 + 16 + 16 + 24 + 16;
        this.handleResizeEvent = (e) => {
            e.stopPropagation();
            this.resize(e.detail.width);
        };
        this.actions = [];
        this.store = undefined;
        this.selection = undefined;
        this.visibleActions = [];
        this.overflowActions = [];
    }
    async componentWillLoad() {
        const locale = await (0,_locale_050b6db9_js__WEBPACK_IMPORTED_MODULE_2__.g)(this.el, "arcgis-browser");
        this.i18n = locale[0].actions;
        (0,_resize_a17b7292_js__WEBPACK_IMPORTED_MODULE_4__.s)(this.store).observe(this.el);
        this.el.addEventListener("arcgisBrowserResize", this.handleResizeEvent);
    }
    disconnectedCallback() {
        var _a, _b, _c, _d;
        (_c = (_b = (_a = this.store) === null || _a === void 0 ? void 0 : _a.state) === null || _b === void 0 ? void 0 : _b.resizeObserver) === null || _c === void 0 ? void 0 : _c.unobserve(this.el);
        (_d = this.el) === null || _d === void 0 ? void 0 : _d.removeEventListener("arcgisBrowserResize", this.handleResizeEvent);
    }
    resize(width) {
        this.elementWidth = width;
        this.calculateOverflow();
    }
    actionUpdateHandler(newActions) {
        this.actionWidths = newActions === null || newActions === void 0 ? void 0 : newActions.map((action) => {
            // add width of action to the width
            this.measureText.textContent = action.text;
            return {
                action,
                width: this.measureText.offsetWidth + this.buttonPadding
            };
        });
        this.calculateOverflow();
    }
    async calculateOverflow() {
        var _a;
        this.measureText.textContent = this.i18n.more;
        const result = (_a = this.actionWidths) === null || _a === void 0 ? void 0 : _a.reduce(({ width, visible, overflow }, { action, width: actionWidth }) => {
            width += actionWidth;
            if (width >= this.elementWidth) {
                return { width, visible, overflow: [...overflow, action] };
            }
            return { width, visible: [...visible, action], overflow };
        }, { visible: [], overflow: [], width: this.moreWidth });
        this.visibleActions = result.visible;
        this.overflowActions = result.overflow;
    }
    render() {
        const { visibleActions, overflowActions, selection, i18n } = this;
        const hasOverflow = (overflowActions === null || overflowActions === void 0 ? void 0 : overflowActions.length) > 0;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.H, null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: "measure-container" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: "measure-text", "aria-hidden": true, ref: (el) => {
                this.measureText = el;
                // the first time we have access to this node and i18n, calculate how wide the more button will be
                if (!this.moreWidth && i18n) {
                    el.textContent = i18n.more;
                    this.moreWidth = el.scrollWidth + this.buttonPadding;
                }
            } })), (selection === null || selection === void 0 ? void 0 : selection.length) > 0 && ((visibleActions === null || visibleActions === void 0 ? void 0 : visibleActions.length) > 0 || hasOverflow) && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("nav", { class: "wrapper" }, visibleActions.map(({ text, icon, onClick, id }) => ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { key: id !== null && id !== void 0 ? id : `${text}-${icon}`, class: "button", "icon-start": icon, onClick: () => onClick(), appearance: "transparent", kind: "neutral" }, text))), hasOverflow && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-dropdown", { widthScale: "m", placement: "bottom-end" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { slot: "trigger", kind: "neutral", iconEnd: "chevron-down", appearance: "transparent" }, i18n.more), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-dropdown-group", { selectionMode: "none" }, overflowActions.map((action) => ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-dropdown-item", { iconStart: action.icon, onCalciteDropdownItemSelect: () => {
                action.onClick();
            } }, action.text))))))))));
    }
    get el() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
    static get watchers() { return {
        "actions": ["actionUpdateHandler"]
    }; }
};
ArcgisBrowserActions.style = arcgisBrowserActionsCss;

const ArcgisBrowserFilter = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisBrowserFilterRemove = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisBrowserFilterRemove", 7);
        this.expanded = undefined;
        this.heading = undefined;
        this.active = undefined;
        this.noPadding = undefined;
        this.clearDisabled = undefined;
        this.filterID = undefined;
    }
    async componentWillLoad() {
        const locale = await (0,_locale_050b6db9_js__WEBPACK_IMPORTED_MODULE_2__.g)(this.el, "arcgis-browser");
        this.i18n = locale[0].filter;
    }
    componentDidLoad() {
        if (this.accordionItem) {
            if (this.expanded) {
                this.accordionItem.expanded = true;
            }
            const content = this.accordionItem.shadowRoot.querySelector(".content");
            if (content && this.noPadding) {
                content.style.padding = "0";
            }
        }
    }
    componentDidRender() {
        var _a, _b;
        const icon = (_b = (_a = this.accordionItem) === null || _a === void 0 ? void 0 : _a.shadowRoot) === null || _b === void 0 ? void 0 : _b.querySelector(".icon-position--end");
        if (icon) {
            icon.classList.remove("icon-position--end");
            icon.classList.add("icon-position--start");
        }
    }
    render() {
        const { active, clearDisabled, heading, i18n } = this;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { style: { position: "relative" } }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-accordion-item", { heading: heading, ref: (el) => {
                this.accordionItem = el;
                el.iconPosition = "start";
                el.iconType = "chevron";
            }, expanded: this.expanded,
            // @ts-ignore
            onCalciteInternalAccordionItemSelect: (e) => {
                this.expanded = !this.expanded;
            }, style: {
                "--calcite-accordion-item-background": "var(--calcite-color-background)",
                "--calcite-accordion-item-icon-spacing-start": "0",
                "--calcite-accordion-item-icon-spacing-end": ".5rem",
                "--calcite-accordion-item-padding": ".75rem .5rem",
                "--calcite-accordion-icon-margin": ".5rem",
                borderTop: "1px solid var(--calcite-color-border-1)"
            } }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "actions-end" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", { name: "action" }), active && !clearDisabled && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { kind: "neutral", appearance: "transparent", onClick: () => {
                this.arcgisBrowserFilterRemove.emit(this.filterID);
            } }, i18n.clear))), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { style: { margin: this.noPadding ? "0" : "0 .75rem" } }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", null)))));
    }
    get el() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};

const DAY = 1000 * 60 * 60 * 24;
function getStartOfDay(date) {
    const ts = (date || new Date()).valueOf();
    const start = new Date(ts);
    start.setHours(0, 0, 0, 0);
    return start.valueOf();
}

const ArcgisBrowserFilterDate = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisBrowserFilter = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisBrowserFilter", 7);
        this.today = new Date();
        this.resetDatePicker = () => {
            this.range = null;
            this.start = null;
            this.end = null;
        };
        this.renderRange = (key) => {
            const { i18n, range } = this;
            return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-tree-item", { "data-range": key, selected: key === range }, i18n[key]));
        };
        this.property = undefined;
        this.serverProperty = undefined;
        this.range = undefined;
        this.start = undefined;
        this.end = undefined;
        this.store = undefined;
        this.expanded = undefined;
    }
    async componentWillLoad() {
        const locale = await (0,_locale_050b6db9_js__WEBPACK_IMPORTED_MODULE_2__.g)(this.el, "arcgis-browser");
        this.i18n = locale[0].filterDate;
    }
    componentDidLoad() {
        if (this.range && (this.range !== "custom" || (this.start && this.end))) {
            this.arcgisBrowserFilter.emit(this.getEventDetail());
        }
        (0,_store_8b1b0846_js__WEBPACK_IMPORTED_MODULE_5__.a)(this.property, this.store, () => this.resetDatePicker());
    }
    getValue() {
        const { range, start, end } = this;
        const startOfDay = getStartOfDay();
        const endOfDay = startOfDay + DAY - 1;
        switch (range) {
            case "yesterday":
                return [startOfDay - DAY, startOfDay - 1];
            case "today":
                return [startOfDay, endOfDay];
            case "last7":
                return [startOfDay - DAY * 7, endOfDay];
            case "last30":
                return [startOfDay - DAY * 30, endOfDay];
            case "custom":
                const customStart = getStartOfDay(start);
                const customEnd = getStartOfDay(end);
                return [customStart, customEnd + DAY - 1];
            default:
                return null;
        }
    }
    getEventDetail() {
        const { property, range, i18n, serverProperty } = this;
        const value = this.getValue();
        const serverProp = serverProperty !== null && serverProperty !== void 0 ? serverProperty : (property === "modified" ? property : "uploaded");
        return {
            id: property,
            value: value ? `(${serverProp}:[${value[0]} TO ${value[1]}])` : "",
            range,
            start: (value === null || value === void 0 ? void 0 : value[0]) && new Date(value === null || value === void 0 ? void 0 : value[0]),
            end: (value === null || value === void 0 ? void 0 : value[1]) && new Date(value === null || value === void 0 ? void 0 : value[1]),
            label: this.i18n[property].replace("${date}", i18n[range])
        };
    }
    isActive() {
        return !!this.range && (this.range !== "custom" || !!(this.start && this.end));
    }
    render() {
        const { i18n, property, range, start, end } = this;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-browser-filter", { heading: i18n.title[property], expanded: this.expanded, active: this.isActive(), filterID: this.property, onArcgisBrowserFilterRemove: () => {
                this.resetDatePicker();
            } }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-tree", { selectionMode: "children", scale: "m", onCalciteTreeSelect: (event) => {
                var _a, _b;
                const node = event.target;
                const range = (_b = (_a = node.selectedItems) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.dataset.range;
                this.range = this.range === range ? null : range;
                if (this.range === "custom" && !(this.start && this.end)) {
                    return;
                }
                this.arcgisBrowserFilter.emit(this.getEventDetail());
            } }, ["today", "yesterday", "last7", "last30", "custom"].map(this.renderRange)), range === "custom" && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-date-picker", { onCalciteDatePickerRangeChange: (event) => {
                const node = event.target;
                const startDate = node.valueAsDate[0];
                const endDate = node.valueAsDate[1];
                if (startDate && endDate) {
                    this.start = startDate;
                    this.end = endDate;
                    this.arcgisBrowserFilter.emit(this.getEventDetail());
                }
            }, scale: "s", valueAsDate: [start, end], maxAsDate: this.today, range: true, style: {
                marginTop: ".5rem",
                marginBottom: ".5rem",
                marginInlineStart: "2rem",
                width: "12.75rem"
            } })))));
    }
    get el() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};

const arcgisBrowserFilterStatusCss = ":host{display:flex;align-items:center}calcite-chip{max-width:100%;--calcite-color-foreground-2:var(--calcite-color-foreground-1)}.filters{margin-inline-end:0.25rem;margin-inline-start:1rem}.link{--calcite-font-size--2:var(--calcite-font-size--1);--calcite-color-brand:var(--calcite-color-text-link)}.popover-content{max-width:28rem;padding:0.75rem}.clear-button{margin-inline-start:0.25rem}";

const ArcgisBrowserFilterStatus = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisBrowserFilterClear = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisBrowserFilterClear", 7);
        this.arcgisBrowserFilterRemove = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisBrowserFilterRemove", 7);
        this.renderChip = (filter) => {
            return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-chip", { scale: "s", value: filter.id, key: filter.id, closable: true, appearance: "outline", onCalciteChipClose: () => {
                    this.arcgisBrowserFilterRemove.emit(filter.id);
                } }, filter.label));
        };
        this.filters = {};
        this.hiddenFilterIds = undefined;
        this.componentWidth = undefined;
        this.browserWidth = undefined;
        this.popoverOpen = false;
    }
    async componentWillLoad() {
        const locale = await (0,_locale_050b6db9_js__WEBPACK_IMPORTED_MODULE_2__.g)(this.el, "arcgis-browser");
        this.i18n = locale[0].filterStatus;
    }
    getValidFilters() {
        const validFilters = Object.values(this.filters).filter((filter) => {
            // certain filters should not appear in the list of filter chips
            if (_types_a031c1da_js__WEBPACK_IMPORTED_MODULE_3__.I.includes(filter.id)) {
                return false;
            }
            return (filter === null || filter === void 0 ? void 0 : filter.value) && (filter === null || filter === void 0 ? void 0 : filter.label);
        });
        const { componentWidth, browserWidth } = this;
        return validFilters.reduce((acc, filter) => {
            var _a;
            // this is just a heuristic to determine chip width without having to use getClientRect() which would be very slow
            // number of chars * average char width plus chip padding
            const width = (((_a = filter.label) === null || _a === void 0 ? void 0 : _a.length) || 0) * 8 + 32;
            acc.length += width;
            if (!componentWidth || browserWidth < _resize_a17b7292_js__WEBPACK_IMPORTED_MODULE_4__.b.sm || componentWidth - acc.length > 180) {
                acc.inBounds.push(filter);
            }
            else {
                acc.outOfBounds.push(filter);
            }
            return acc;
        }, { length: 0, inBounds: [], outOfBounds: [] });
    }
    render() {
        const { inBounds, outOfBounds } = this.getValidFilters();
        const hasOverflow = !!(outOfBounds === null || outOfBounds === void 0 ? void 0 : outOfBounds.length);
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.H, null, (inBounds.length > 0 || hasOverflow) && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-chip-group", { label: this.i18n.filters, scale: "s" }, inBounds.map(this.renderChip), hasOverflow && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { id: "popover-button", round: true, kind: "neutral", appearance: "outline", scale: "s" }, "+ ", outOfBounds.length)))), hasOverflow && [
            (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-popover", { label: this.i18n.additional, referenceElement: "popover-button", placement: "bottom-end" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "popover-content" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-chip-group", { label: this.i18n.additional, scale: "s" }, outOfBounds.map(this.renderChip))))
        ], outOfBounds.length + inBounds.length > 1 && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { class: "clear-button", scale: "s", appearance: "transparent", kind: "brand", onClick: () => {
                this.arcgisBrowserFilterClear.emit();
            } }, this.i18n.clearAllFilters))));
    }
    get el() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisBrowserFilterStatus.style = arcgisBrowserFilterStatusCss;

const ArcgisItemBrowserFilters = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.store = undefined;
    }
    render() {
        var _a, _b;
        const addPadding = ((_a = this.store) === null || _a === void 0 ? void 0 : _a.state.panel) || ((_b = this.store) === null || _b === void 0 ? void 0 : _b.state.width) < _resize_a17b7292_js__WEBPACK_IMPORTED_MODULE_4__.b.sm;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { style: { padding: addPadding ? "0 1rem 1rem" : "0" } }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", { name: "top" })), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-accordion", { appearance: "transparent", iconType: "chevron", scale: "m", "icon-position": "start", ref: (el) => {
                this.store.state.filterElement = el;
            } }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", null)), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", { name: "bottom" })));
    }
    get el() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};

const arcgisBrowserPaginationCss = ".wrapper{display:flex;justify-content:center;padding-left:0.5rem;padding-right:0.5rem;padding-top:2rem;padding-bottom:2rem}.hide{display:none}";

const ArcgisBrowserPagination = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisBrowserPage = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisBrowserPage", 7);
        this.total = undefined;
        this.start = undefined;
        this.num = 60;
        this.store = undefined;
    }
    async componentWillLoad() {
        const locale = await (0,_locale_050b6db9_js__WEBPACK_IMPORTED_MODULE_2__.g)(this.el, "arcgis-browser");
        this.i18n = locale[0].pagination;
        const { start, total, num } = this;
        this.arcgisBrowserPage.emit({ start, total, num });
    }
    render() {
        const { start, total, num, i18n } = this;
        const scale = this.store.state.width > _resize_a17b7292_js__WEBPACK_IMPORTED_MODULE_4__.b.sm ? "m" : "s";
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "wrapper" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-pagination", { onCalcitePaginationChange: (event) => {
                const node = event.target;
                this.arcgisBrowserPage.emit({
                    start: node.startItem,
                    total: node.totalItems,
                    num: node.pageSize
                });
            }, startItem: start, totalItems: Math.min(total, 10000 - num), pageSize: num, scale: scale, messageOverrides: { next: i18n.next, previous: i18n.prev }, class: {
                hide: !total || total < num
            } })));
    }
    get el() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisBrowserPagination.style = arcgisBrowserPaginationCss;

const arcgisBrowserSearchCss = ":host{position:relative;display:block}.search{pointer-events:none;position:absolute;z-index:10;margin-top:1rem;font-size:0.875rem;color:var(--calcite-color-text-1);inset-inline-start:1.5rem}.x{position:absolute;top:0px;z-index:10;margin-top:0.25rem;cursor:pointer;border-style:none;padding:0.5rem;color:var(--calcite-color-text-1);outline:2px solid transparent;outline-offset:2px;inset-inline-end:0.25rem;background:transparent}.input{position:relative;z-index:0;box-sizing:border-box;display:block;height:3rem;width:100%;border-style:none;padding-top:1rem;padding-bottom:1rem;padding-left:3rem;padding-right:3rem;font-size:0.875rem;color:var(--calcite-color-text-1);--tw-shadow:0 0 #0000;--tw-shadow-colored:0 0 #0000;box-shadow:var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);transition-property:color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, -webkit-backdrop-filter;transition-property:color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter;transition-property:color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter, -webkit-backdrop-filter;transition-duration:150ms;background-color:transparent;border-bottom:2px solid transparent;font-family:inherit}.input::-webkit-search-cancel-button{display:none}.input::-ms-clear{display:none}.input:focus{--tw-shadow:0 0 #0000;--tw-shadow-colored:0 0 #0000;box-shadow:var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);outline:2px solid transparent;outline-offset:2px;border-bottom-color:var(--calcite-color-brand)}";

const ArcgisBrowserSearch = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisBrowserSearch = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisBrowserSearch", 7);
        this.arcgisBrowserSearchInput = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisBrowserSearchInput", 7);
        this.debouncedInput = (0,_functional_44de8fcf_js__WEBPACK_IMPORTED_MODULE_6__.d)((term) => {
            const containsWildcard = term.includes("*");
            this.showClear = !!term;
            if (containsWildcard) {
                this.containsWildcard = true;
            }
            else {
                this.containsWildcard = false;
                this.arcgisBrowserSearch.emit(term);
            }
        }, 400);
        this.term = undefined;
        this.placeholder = undefined;
        this.showClear = false;
        this.containsWildcard = false;
    }
    async componentWillLoad() {
        var _a;
        const locale = await (0,_locale_050b6db9_js__WEBPACK_IMPORTED_MODULE_2__.g)(this.el, "arcgis-browser");
        this.i18n = locale[0].search;
        if (this.term) {
            this.showClear = true;
        }
        this.containsWildcard = (_a = this.term) === null || _a === void 0 ? void 0 : _a.includes("*");
    }
    async componentDidLoad() {
        this.arcgisBrowserSearch.emit(this.term);
    }
    termChanged(newTerm) {
        if (this.searchInput.value !== newTerm) {
            this.showClear = !!newTerm;
            this.arcgisBrowserSearch.emit(newTerm);
        }
    }
    render() {
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.H, null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { icon: "search", scale: "s", class: "search" }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("input", { class: "input", value: this.term, placeholder: this.placeholder || this.i18n.search, ref: (el) => (this.searchInput = el), "aria-label": this.placeholder || this.i18n.search, onInput: (e) => {
                const term = e.currentTarget.value;
                if (!(term === null || term === void 0 ? void 0 : term.includes("*"))) {
                    this.containsWildcard = false;
                }
                this.arcgisBrowserSearchInput.emit(term);
                this.debouncedInput(term);
            } }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-alert", { open: this.containsWildcard, scale: "m", kind: "danger", icon: "exclamation-mark-triangle", label: this.i18n.wildcard, onCalciteAlertClose: () => {
                this.containsWildcard = false;
            } }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "message" }, this.i18n.wildcard)), this.showClear && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("button", { class: "x", "aria-label": this.i18n.clear, onClick: () => {
                this.arcgisBrowserSearchInput.emit("");
                this.arcgisBrowserSearch.emit("");
                this.showClear = false;
                if (this.searchInput) {
                    this.searchInput.value = "";
                    this.searchInput.focus();
                }
            } }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { icon: "x", scale: "m", class: "x--icon" })))));
    }
    get el() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
    static get watchers() { return {
        "term": ["termChanged"]
    }; }
};
ArcgisBrowserSearch.style = arcgisBrowserSearchCss;

const arcgisBrowserSortCss = ".dropdown-wrap{display:flex;align-items:center}.radio-wrapper{padding:1rem}.medium{font-weight:500}";

const ArcgisBrowserSort = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisBrowserSortFieldChange = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisBrowserSortFieldChange", 7);
        this.arcgisBrowserSortOrderChange = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisBrowserSortOrderChange", 7);
        this.sortOrders = ["asc", "desc"];
        this.options = undefined;
        this.field = undefined;
        this.order = undefined;
        this.store = undefined;
    }
    async componentWillLoad() {
        const locale = await (0,_locale_050b6db9_js__WEBPACK_IMPORTED_MODULE_2__.g)(this.el, "arcgis-browser");
        this.i18n = locale[0].sort;
    }
    renderFieldOption(option, selectedField, i18n) {
        const { store } = this;
        const info = (0,_utils_2f459d6d_js__WEBPACK_IMPORTED_MODULE_7__.g)(option, i18n, store);
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-dropdown-item", { selected: selectedField === option, onCalciteDropdownItemSelect: () => this.arcgisBrowserSortFieldChange.emit(option), key: option }, info.label));
    }
    renderButton(info) {
        var _a, _b;
        const { i18n } = this;
        const baseAttrs = {
            class: "button",
            slot: "trigger",
            scale: "m",
            appearance: "outline-fill",
            kind: "neutral",
            iconStart: "sort-descending",
            iconFlipRtl: "start",
            ariaLabel: `${i18n.sortBy} ${info.label}`
        };
        return ((_b = (_a = this.store) === null || _a === void 0 ? void 0 : _a.state) === null || _b === void 0 ? void 0 : _b.width) > _resize_a17b7292_js__WEBPACK_IMPORTED_MODULE_4__.D ? ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", Object.assign({}, baseAttrs), info.label)) : ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", Object.assign({}, baseAttrs)));
    }
    renderDropdown() {
        const { field, order, options, i18n, store } = this;
        const selectedField = options.includes(field) ? field : options[0];
        const info = (0,_utils_2f459d6d_js__WEBPACK_IMPORTED_MODULE_7__.g)(selectedField, i18n, store);
        const selectedOrder = order || info.defaultSortOrder;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-dropdown", { placement: "bottom-end", scale: "m", overlayPositioning: "fixed", widthScale: "m" }, this.renderButton(info), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-dropdown-group", { selectionMode: "single", "group-title": i18n.sortBy }, this.options.map((option) => this.renderFieldOption(option, selectedField, i18n))), info.showSortOrder && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-dropdown-group", { selectionMode: "single", "group-title": i18n.sortDirection }, this.sortOrders.map((order) => ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-dropdown-item", { key: order, selected: selectedOrder === order, onCalciteDropdownItemSelect: () => this.arcgisBrowserSortOrderChange.emit(order) }, info.sortOrderLabels[order])))))));
    }
    renderFieldRadio(option, selectedField, i18n) {
        const info = (0,_utils_2f459d6d_js__WEBPACK_IMPORTED_MODULE_7__.g)(option, i18n);
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { layout: "inline", alignment: "start" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-radio-button", { value: option, name: "sort_field", checked: selectedField === option }), info.label));
    }
    renderRadioButtons() {
        const { field, order, options, i18n, store } = this;
        const selectedField = options.includes(field) ? field : options[0];
        const info = (0,_utils_2f459d6d_js__WEBPACK_IMPORTED_MODULE_7__.g)(selectedField, i18n, store);
        const selectedOrder = order || info.defaultSortOrder;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "radio-wrapper" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { scale: "m" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: "medium" }, i18n.sortBy), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-radio-button-group", { name: "sort_field", layout: "vertical", role: "radiogroup", onCalciteRadioButtonGroupChange: (event) => this.arcgisBrowserSortFieldChange.emit(event.target.selectedItem.value) }, this.options.map((option) => this.renderFieldRadio(option, selectedField, i18n)))), info.showSortOrder && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { scale: "m" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: "medium" }, i18n.sortDirection), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-radio-button-group", { name: "sort_order", layout: "vertical", role: "radiogroup", onCalciteRadioButtonGroupChange: (event) => this.arcgisBrowserSortOrderChange.emit(event.target.selectedItem.value) }, this.sortOrders.map((order) => ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { layout: "inline", alignment: "start" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-radio-button", { value: order, name: "sort_order", checked: selectedOrder === order }), info.sortOrderLabels[order]))))))));
    }
    render() {
        return this.store.state.panel ||
            (this.store.state.width && this.store.state.width < _resize_a17b7292_js__WEBPACK_IMPORTED_MODULE_4__.b.sm)
            ? this.renderRadioButtons()
            : this.renderDropdown();
    }
    get el() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisBrowserSort.style = arcgisBrowserSortCss;

const arcgisBrowserTopBarCss = ":host{position:relative;display:block;background-color:var(--arcgis-browser-top-bar-background)}.wrapper{margin-left:auto;margin-right:auto;display:flex;max-width:var(--arcgis-browser-max-width)}.search-and-sort{display:flex;flex:1 1 0%;align-items:center;padding-inline-end:1.5rem}.search{flex:1 1 0%}.sort{display:flex;align-items:center}.filter{margin-top:0.25rem;margin-bottom:0.25rem;display:flex;align-items:center;justify-content:center;padding-left:0.5rem;padding-right:0.5rem}.filter--left{border-inline-end:1px solid var(--calcite-color-border-3)}.large .filter{display:none}.rel{position:relative}.bucket--small{text-align:center;border-bottom:1px solid var(--calcite-color-border-3)}.indicator{pointer-events:none;position:absolute;top:0px;z-index:20;height:0.5rem;width:0.5rem;border-radius:50%;background-color:var(--calcite-color-brand);inset-inline-start:0}.small .search-and-sort{padding-inline-end:1rem}";

const ArcgisBrowserTopBar = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.store = undefined;
        this.filtersDisabled = undefined;
        this.width = undefined;
    }
    async componentWillLoad() {
        const locale = await (0,_locale_050b6db9_js__WEBPACK_IMPORTED_MODULE_2__.g)(this.el, "arcgis-browser");
        this.i18n = locale[0].topBar;
        // @ts-ignore
        this.store.onChange("width", (width) => {
            var _a;
            this.width = (_a = this.searchWrapper) === null || _a === void 0 ? void 0 : _a.offsetWidth;
        });
    }
    getFormFactor() {
        const width = this.store.state.width;
        switch (true) {
            case width <= _resize_a17b7292_js__WEBPACK_IMPORTED_MODULE_4__.b.sm:
                return "small";
            case width <= _resize_a17b7292_js__WEBPACK_IMPORTED_MODULE_4__.b.md:
                return "medium";
            default:
                return "large";
        }
    }
    handleClick() {
        this.store.state.preview = null;
        this.store.state.filtersExpanded = !this.store.state.filtersExpanded;
    }
    render() {
        const formFactor = this.getFormFactor();
        const showFilterButton = formFactor === "small" &&
            (!this.store.state.filtersEmpty || !this.store.state.sortEmpty) &&
            !this.filtersDisabled;
        const hasActiveFilter = Object.values(this.store.state.filters || {}).some((filter) => filter.value);
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.H, null, formFactor === "small" && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "bucket bucket--small" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", { name: "bucket" }))), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: { [formFactor]: true, wrapper: true } }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", { name: "content-start" }), showFilterButton && !this.store.state.panel && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "filter filter--left" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "rel" }, hasActiveFilter && (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: "indicator" }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { class: "filter-toggle", scale: "s", appearance: "transparent", kind: "neutral", iconStart: "sliders", "aria-label": "toggle-filters", onClick: () => this.handleClick(), "aria-expanded": this.store.state.filtersExpanded }, this.i18n.filter)))), formFactor !== "small" && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "bucket" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", { name: "bucket" }))), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "search-and-sort", ref: (el) => {
                this.searchWrapper = el;
                if (!this.width) {
                    requestAnimationFrame(() => (this.width = el === null || el === void 0 ? void 0 : el.offsetWidth));
                }
            } }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "search" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", { name: "search" })), !showFilterButton && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-browser-filter-status", { componentWidth: this.width, browserWidth: this.store.state.width, class: "filter-status", filters: this.store.state.filters }))), showFilterButton && this.store.state.panel && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "filter" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "rel" }, hasActiveFilter && (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: "indicator" }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { class: "filter-toggle", scale: "s", appearance: "transparent", kind: "neutral", iconStart: "sliders", "aria-label": this.i18n.filter, onClick: () => this.handleClick(), "aria-expanded": this.store.state.filtersExpanded })))), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", { name: "content-end" }))));
    }
    get el() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisBrowserTopBar.style = arcgisBrowserTopBarCss;



//# sourceMappingURL=arcgis-browser_10.entry.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-44de8fcf.js":
/*!****************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-44de8fcf.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ arrayToLookupMap),
/* harmony export */   b: () => (/* binding */ unique),
/* harmony export */   c: () => (/* binding */ throttle),
/* harmony export */   d: () => (/* binding */ debounce),
/* harmony export */   e: () => (/* binding */ escapeRegExp),
/* harmony export */   f: () => (/* binding */ arraysAreEquivalent),
/* harmony export */   g: () => (/* binding */ chunk),
/* harmony export */   i: () => (/* binding */ isDefined),
/* harmony export */   m: () => (/* binding */ minDelay),
/* harmony export */   t: () => (/* binding */ timeout),
/* harmony export */   u: () => (/* binding */ uniqueBy)
/* harmony export */ });
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */
/**
 * Call a function only after it has not been called for n milliseconds
 * @param fn    - function to call
 * @param delay - delay in milliseconds
 */
const debounce = (fn, delay) => {
    let timeout;
    let status = "idle";
    function flush(...args) {
        status = "flushed";
        return debounced(...args);
    }
    function invoke(...args) {
        status = "invoked";
        return debounced(...args);
    }
    function cancel(...args) {
        status = "cancelled";
        return debounced(...args);
    }
    function getStatus() {
        return status;
    }
    const debounced = (...args) => new Promise((resolve) => {
        switch (status) {
            case "flushed":
                status = "idle";
                if (timeout) {
                    clearTimeout(timeout);
                    resolve(fn(...args));
                }
                else {
                    resolve(null);
                }
                break;
            case "invoked":
                clearTimeout(timeout);
                status = "idle";
                resolve(fn(...args));
                break;
            case "cancelled":
                clearTimeout(timeout);
                status = "idle";
                resolve(null);
                break;
            default:
                if (timeout) {
                    clearTimeout(timeout);
                }
                status = "pending";
                timeout = setTimeout(() => {
                    status = "idle";
                    return resolve(fn(...args));
                }, delay);
                break;
        }
    });
    debounced.flush = flush;
    debounced.invoke = invoke;
    debounced.cancel = cancel;
    debounced.getStatus = getStatus;
    return debounced;
};
/**
 * Call a function only after n milliseconds have elapsed
 * @param fn    - function to call
 * @param delay - delay in milliseconds
 */
const throttle = (fn, delay) => {
    let timeout;
    return (...args) => new Promise((resolve) => {
        if (timeout) {
            return;
        }
        timeout = setTimeout(() => {
            clearTimeout(timeout);
            timeout = undefined;
            resolve(fn(...args));
        }, delay);
    });
};
function escapeRegExp(str) {
    return str.replace(/[.*+?^${}()|[\]\\]/g, "\\$&"); // $& means the whole matched string
}
function isDefined(value) {
    return value !== undefined && value !== null;
}
/**
 * Set a minimum time for a promise to resolve (useful for preventing flash of loaders)
 */
async function minDelay(promise, minDelay) {
    await Promise.all([promise, timeout(minDelay)]);
    return promise;
}
/**
 * Helper method to inline setTimeout as an await in async functions
 */
function timeout(ms) {
    return new Promise((resolve) => setTimeout(resolve, ms));
}
const arrayToLookupMap = (dataArr, getKeyAndItem) => Object.fromEntries((dataArr || []).map((item) => {
    const { key, data } = getKeyAndItem(item);
    return [key, data];
}));
/**
 * Check whether two arrays have the same number of elements
 * and whether they contain the same elements
 * regardless of order
 */
const arraysAreEquivalent = (arr1, arr2) => arr1.length === arr2.length && arr1.reduce((memo, str) => memo && arr2.indexOf(str) > -1, true);
function uniqueBy(myArr, getItemId) {
    const resultArr = [];
    const lookupMap = {};
    myArr.forEach((item) => {
        const id = getItemId(item);
        if (lookupMap[id] == null) {
            lookupMap[id] = item;
            resultArr.push(item);
        }
    });
    return resultArr;
}
function unique(myArr) {
    const primitives = { boolean: {}, number: {}, string: {} };
    const objs = [];
    return myArr.filter((item) => {
        let type = typeof item;
        if (type in primitives) {
            return primitives[type].hasOwnProperty(item) ? false : (primitives[type][item] = true);
        }
        else {
            return objs.indexOf(item) >= 0 ? false : objs.push(item);
        }
    });
}
const chunk = (arr, size) => [...Array(Math.ceil(arr.length / size))].map((_, i) => arr.slice(size * i, size + size * i));



//# sourceMappingURL=functional-44de8fcf.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-ef0e54b2.js":
/*!******************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-ef0e54b2.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   C: () => (/* binding */ CSS_UTILITY),
/* harmony export */   a: () => (/* binding */ formatDate),
/* harmony export */   b: () => (/* binding */ formatPlural),
/* harmony export */   f: () => (/* binding */ formatNumber),
/* harmony export */   g: () => (/* binding */ getElementDir),
/* harmony export */   l: () => (/* binding */ languageMap)
/* harmony export */ });
/* harmony import */ var _loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./loadModules-b4ac1247.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-b4ac1247.js");
/* harmony import */ var _dom_4d367677_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dom-4d367677.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-4d367677.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */



const languageMap = new Map([
    ["ar", "ar"],
    ["bg", "bg"],
    ["bs", "bs"],
    ["ca", "ca"],
    ["cs", "cs"],
    ["da", "da"],
    ["de", "de"],
    ["el", "el"],
    ["en", "en"],
    ["es", "es"],
    ["et", "et"],
    ["fi", "fi"],
    ["fr", "fr"],
    ["he", "he"],
    ["hr", "hr"],
    ["hu", "hu"],
    ["id", "id"],
    ["it", "it"],
    ["ja", "ja"],
    ["ko", "ko"],
    ["lt", "lt"],
    ["lv", "lv"],
    ["nb", "nb"],
    ["nl", "nl"],
    ["pl", "pl"],
    ["pt-br", "pt-BR"],
    ["pt-pt", "pt-PT"],
    ["ro", "ro"],
    ["ru", "ru"],
    ["sk", "sk"],
    ["sl", "sl"],
    ["sr", "sr"],
    ["sv", "sv"],
    ["th", "th"],
    ["tr", "tr"],
    ["uk", "uk"],
    ["vi", "vi"],
    ["zh-cn", "zh-CN"],
    ["zh-hk", "zh-HK"],
    ["zh-tw", "zh-TW"]
]);
// rtl
function getElementDir(el) {
    return getElementProp(el, "dir", "ltr");
}
function getElementProp(el, prop, value) {
    const closestWithProp = (0,_dom_4d367677_js__WEBPACK_IMPORTED_MODULE_1__.c)(el, `[${prop}]`);
    return closestWithProp ? closestWithProp.getAttribute(prop) : value;
}
// css
const CSS_UTILITY = {
    rtl: "arcgis--rtl"
};
async function formatNumber(number, options) {
    const { api, type, places } = options || {};
    if (api === 4) {
        const [intl] = await (0,_loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_0__.l)(["esri/intl"]);
        const numberFormatIntlOptions = intl.convertNumberFormatToIntlOptions({
            places,
            style: type,
            digitSeparator: true
        });
        return intl.formatNumber(number, Object.assign(Object.assign({}, numberFormatIntlOptions), { style: type }));
    }
    const [dojoNumber] = await (0,_loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_0__.l)(["dojo/number"]);
    return dojoNumber.format(number, {
        type,
        places,
        pattern: options === null || options === void 0 ? void 0 : options.pattern
    });
}
const cache = {};
function formatDate(date) {
    const lang = document.documentElement.lang;
    const dayShortMonthYear = {
        year: "numeric",
        month: "short",
        day: "numeric"
    };
    if (!cache[lang]) {
        cache[lang] = new Intl.DateTimeFormat(document.documentElement.lang, dayShortMonthYear);
    }
    return cache[lang].format(date);
}
function formatPlural(lang, stringObj, number) {
    const singles = ["id", "ja", "ko", "th", "vi", "zh-cn", "zh-hk", "zh-tw"];
    const likeEnglish = [
        "en",
        "ca",
        "da",
        "de",
        "el",
        "es",
        "et",
        "fi",
        "hi",
        "hu",
        "it",
        "nb",
        "nl",
        "pt-pt",
        "sv",
        "tr"
    ];
    const locale = lang !== null && lang !== void 0 ? lang : "en";
    // if the number is one, or it is a "simple" language, return the 1 string
    if (number === 1 || singles.includes(locale)) {
        return stringObj.single.replace("${number}", "1");
    }
    // if the number is not 1 and the language uses the same pluralization strategy as english,
    // return the multiple string
    if (number !== 1 && likeEnglish.includes(locale)) {
        return stringObj.multiple.replace("${number}", `${number}`);
    }
    // if none of the above worked, return the "unknown" string
    return stringObj.unknown.replace("${number}", `${number}`);
}



//# sourceMappingURL=languageUtil-ef0e54b2.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-050b6db9.js":
/*!************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-050b6db9.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ getComponentClosestLanguage),
/* harmony export */   g: () => (/* binding */ getLocaleComponentStrings)
/* harmony export */ });
/* harmony import */ var _dom_4d367677_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dom-4d367677.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-4d367677.js");
/* harmony import */ var _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./languageUtil-ef0e54b2.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-ef0e54b2.js");
/* harmony import */ var _index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./index-e3bf7da7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-e3bf7da7.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */




// https://medium.com/stencil-tricks/implementing-internationalisation-i18n-with-stencil-5e6559554117
function getComponentClosestLanguage(element) {
    var _a, _b, _c;
    const closestElement = (_a = (0,_dom_4d367677_js__WEBPACK_IMPORTED_MODULE_0__.c)(element, "[lang]")) !== null && _a !== void 0 ? _a : (_c = (_b = element.shadowRoot) === null || _b === void 0 ? void 0 : _b.ownerDocument) === null || _c === void 0 ? void 0 : _c.documentElement;
    // language set by the calling application or browser. defaults to english.
    const lang = ((closestElement === null || closestElement === void 0 ? void 0 : closestElement.lang) || (navigator === null || navigator === void 0 ? void 0 : navigator.language) || "en").toLowerCase();
    if (_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang)) {
        return _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang);
    }
    else {
        // "ru-RU" maps to "ru" use case
        if (_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang.slice(0, 2))) {
            return _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang.slice(0, 2));
        }
        else {
            return "en";
        }
    }
}
function getComponentClosestLanguageIntl(element) {
    var _a, _b, _c;
    // it's OK if we don't have the 4 letter language file for it
    // 4 letter language code needed for formatting numbers
    const closestElement = (_a = (0,_dom_4d367677_js__WEBPACK_IMPORTED_MODULE_0__.c)(element, "[lang]")) !== null && _a !== void 0 ? _a : (_c = (_b = element.shadowRoot) === null || _b === void 0 ? void 0 : _b.ownerDocument) === null || _c === void 0 ? void 0 : _c.documentElement;
    // language set by the calling application or browser. defaults to english.
    const lang = ((closestElement === null || closestElement === void 0 ? void 0 : closestElement.lang) || (navigator === null || navigator === void 0 ? void 0 : navigator.language) || "en").toLowerCase();
    if (_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang)) {
        return _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang);
    }
    else {
        if (_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang.slice(0, 2))) {
            // we support the 2 letter coded language
            // e.g. it-CH vs it
            return lang;
        }
        else {
            return "en";
        }
    }
}
function fetchLocaleStringsForComponent(componentName, locale) {
    return new Promise((resolve, reject) => {
        fetch((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_2__.a)(`../arcgis-app-assets/i18n/${componentName}.i18n.${locale}.json`)).then((result) => {
            if (result.ok)
                resolve(result.json());
            else
                reject();
        }, () => reject());
    });
}
const stringCache = {};
function fetchLocaleStringsFromCache(componentName, locale) {
    const id = `${componentName}${locale}`;
    if (!stringCache[id]) {
        stringCache[id] = fetchLocaleStringsForComponent(componentName, locale);
    }
    return stringCache[id];
}
/**
 * Get strings and language codes.
 * This method returns 2 language codes.
 * The first one returns a code that's also supported as a language file.
 * The second one returns a code where there is support for the first 2 letters of the code as part of a language file,
 * but will return the original 4 letter code from the page.
 * E.g. For "it-ch" it will return "it" as the first language code and "it-ch" as the second.
 * The second one is required for esri.intl.setLocale() to get the correct formatting.
 *
 * If a tagName is provided it will overwite the element's tagName
 *
 *  @return [ strings, first language code, second language code]
 */
async function getLocaleComponentStrings(element, tagName) {
    const componentName = tagName || element.tagName.toLowerCase();
    const componentLanguage = getComponentClosestLanguage(element);
    const componentLanguageIntl = getComponentClosestLanguageIntl(element);
    let strings;
    try {
        strings = await fetchLocaleStringsFromCache(componentName, componentLanguage);
    }
    catch (e) {
        console.warn(`no locale for ${componentName} (${componentLanguage}) loading default locale en.`);
        strings = await fetchLocaleStringsFromCache(componentName, "en");
    }
    return [strings, componentLanguage, componentLanguageIntl];
}



//# sourceMappingURL=locale-050b6db9.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/resize-a17b7292.js":
/*!************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/resize-a17b7292.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   D: () => (/* binding */ DROPDOWN_ICON_DISPLAY_CUTOFF_SIZE),
/* harmony export */   b: () => (/* binding */ breakpoints),
/* harmony export */   s: () => (/* binding */ setupResizeObserver)
/* harmony export */ });
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */
const breakpoints = {
    xxs: 320,
    xs: 480,
    sm: 640,
    md: 768,
    lg: 1024,
    xl: 1280
};
const DROPDOWN_ICON_DISPLAY_CUTOFF_SIZE = 960;
function setupResizeObserver(store) {
    var _a;
    var _b;
    (_a = (_b = store.state).resizeObserver) !== null && _a !== void 0 ? _a : (_b.resizeObserver = new ResizeObserver(resizeHandler));
    return store.state.resizeObserver;
}
/**
 * resize handler will be called when items get resized
 * an event is dispatched on each element, passing the new width and height
 */
function resizeHandler(entries) {
    entries.forEach((entry) => {
        if (entry.contentRect.width > 0) {
            const event = new CustomEvent("arcgisBrowserResize", {
                detail: { width: entry.contentRect.width, height: entry.contentRect.height }
            });
            entry.target.dispatchEvent(event);
        }
    });
}



//# sourceMappingURL=resize-a17b7292.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/store-8b1b0846.js":
/*!***********************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/store-8b1b0846.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ onBrowserFilterRemove),
/* harmony export */   b: () => (/* binding */ onGroupIdChange),
/* harmony export */   g: () => (/* binding */ getStore),
/* harmony export */   o: () => (/* binding */ onPreviewChange)
/* harmony export */ });
/* harmony import */ var _dom_4d367677_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dom-4d367677.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-4d367677.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */


const onBrowserFilterRemove = (id, store, callback) => {
    // @ts-ignore
    store.onChange("filters", (filters) => {
        if (!filters[id] || !filters[id].value) {
            callback();
        }
    });
};
const onPreviewChange = (store, callback) => {
    // @ts-ignore
    store.onChange("preview", (preview) => {
        callback();
    });
};
const onGroupIdChange = (store, callback) => {
    // @ts-ignore
    store.onChange("groupId", (preview) => {
        callback();
    });
};
const STORE_LOOKUP = new Map();
function getStore(el, browserTag) {
    const existingStore = STORE_LOOKUP.get(el);
    if (existingStore) {
        return existingStore;
    }
    const browser = (0,_dom_4d367677_js__WEBPACK_IMPORTED_MODULE_0__.c)(el, browserTag);
    if (browser) {
        STORE_LOOKUP.set(el, browser.store);
        return browser.store;
    }
    return null;
}



//# sourceMappingURL=store-8b1b0846.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/types-a031c1da.js":
/*!***********************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/types-a031c1da.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   I: () => (/* binding */ ITEM_BROWSER_BUILT_IN_FILTERS),
/* harmony export */   a: () => (/* binding */ ITEM_BROWSER_MAX_ITEMS)
/* harmony export */ });
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */
const ITEM_BROWSER_BUILT_IN_FILTERS = ["folder", "group", "contentType"];
const ITEM_BROWSER_MAX_ITEMS = 99999; // arbitrary large number so it show all items



//# sourceMappingURL=types-a031c1da.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/utils-2f459d6d.js":
/*!***********************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/utils-2f459d6d.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ getDefaultSortOrder),
/* harmony export */   g: () => (/* binding */ getSortFieldInfo)
/* harmony export */ });
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */
const sortLookup = {
    title: ["asc", "alphabetical"],
    owner: ["asc", "alphabetical"],
    numviews: ["desc", "num"],
    relevance: ["desc"],
    modified: ["desc", "recent"],
    created: ["desc", "recent"],
    size: ["desc", "size"]
};
function getSortFieldInfo(field, i18n, store) {
    var _a;
    const [defaultSortOrder, labelType] = sortLookup[field];
    const label = field === "modified" && ((_a = store === null || store === void 0 ? void 0 : store.state) === null || _a === void 0 ? void 0 : _a.recycleBin) ? i18n.deleted : i18n[field];
    const sortOrderLabels = {
        asc: i18n[`${labelType}Asc`],
        desc: i18n[`${labelType}Desc`]
    };
    return {
        label,
        showSortOrder: !!labelType,
        defaultSortOrder,
        sortOrderLabels
    };
}
function getDefaultSortOrder(field) {
    const [defaultSortOrder] = sortLookup[field];
    return defaultSortOrder;
}



//# sourceMappingURL=utils-2f459d6d.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,