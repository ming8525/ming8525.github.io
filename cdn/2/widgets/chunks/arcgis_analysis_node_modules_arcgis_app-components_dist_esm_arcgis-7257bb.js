"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_arcgis-7257bb"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-smart-mapping-panels-gallery.entry.js":
/*!**************************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-smart-mapping-panels-gallery.entry.js ***!
  \**************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   arcgis_smart_mapping_panels_gallery: () => (/* binding */ ArcgisSmartMappingPanelsGallery)
/* harmony export */ });
/* harmony import */ var _index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-e3bf7da7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-e3bf7da7.js");
/* harmony import */ var _feature_1ce1b984_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./feature-1ce1b984.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/feature-1ce1b984.js");
/* harmony import */ var _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./raster-unique-value-0976ec7f.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/raster-unique-value-0976ec7f.js");
/* harmony import */ var _loading_69139907_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./loading-69139907.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loading-69139907.js");
/* harmony import */ var _loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./loadModules-b4ac1247.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-b4ac1247.js");
/* harmony import */ var _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./commonEnums-fcf13661.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/commonEnums-fcf13661.js");
/* harmony import */ var _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./languageUtil-ef0e54b2.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-ef0e54b2.js");
/* harmony import */ var _commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./commonFunctions-b0830e9e.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/commonFunctions-b0830e9e.js");
/* harmony import */ var _location_e26b539f_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./location-e26b539f.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/location-e26b539f.js");
/* harmony import */ var _color_d6da0a9a_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./color-d6da0a9a.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/color-d6da0a9a.js");
/* harmony import */ var _colorSize_ce0ccdeb_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./colorSize-ce0ccdeb.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/colorSize-ce0ccdeb.js");
/* harmony import */ var _heatmap_75ffd452_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./heatmap-75ffd452.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/heatmap-75ffd452.js");
/* harmony import */ var _predominance_a1a2d74d_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./predominance-a1a2d74d.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/predominance-a1a2d74d.js");
/* harmony import */ var _chart_097ec280_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./chart-097ec280.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/chart-097ec280.js");
/* harmony import */ var _compare_ba1292fe_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./compare-ba1292fe.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/compare-ba1292fe.js");
/* harmony import */ var _type_0ace5d2e_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./type-0ace5d2e.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/type-0ace5d2e.js");
/* harmony import */ var _relationship_b72d7d97_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./relationship-b72d7d97.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/relationship-b72d7d97.js");
/* harmony import */ var _colorSizeUnivariant_d266ac7c_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./colorSizeUnivariant-d266ac7c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/colorSizeUnivariant-d266ac7c.js");
/* harmony import */ var _typeSize_9d4c5d28_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./typeSize-9d4c5d28.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/typeSize-9d4c5d28.js");
/* harmony import */ var _locale_050b6db9_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./locale-050b6db9.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-050b6db9.js");
/* harmony import */ var _dom_4d367677_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./dom-4d367677.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-4d367677.js");
/* harmony import */ var _index_05956cab_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./index-05956cab.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-05956cab.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */























/**
 * Updates the layer with a DotDensity renderer with default settings
 * @param options: options
 */
function createDotDensityRenderer(options) {
    var _a;
    const { layer: smLayer, mapView, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
    const layer = smLayer;
    options = options || {};
    return modules.DotDensityCreator.createRenderer({
        layer,
        view: mapView,
        attributes: (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_7__.i)(options.attributes) ? options.attributes : getAttributes(options.fieldInfos),
        dotBlendingEnabled: (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_7__.i)(options.dotBlendingEnabled) ? options.dotBlendingEnabled : true,
        dotValueOptimizationEnabled: (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_7__.i)(options.dotValueOptimizationEnabled)
            ? options.dotValueOptimizationEnabled
            : true,
        outlineOptimizationEnabled: (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_7__.i)(options.outlineOptimizationEnabled)
            ? options.outlineOptimizationEnabled
            : true,
        legendOptions: options.legendOptions,
        forBinning: ((_a = layer.featureReduction) === null || _a === void 0 ? void 0 : _a.type) === "binning"
    });
}
function getAttributes(fieldInfos) {
    return fieldInfos.map((fieldInfo) => {
        return {
            //valueExpression: `$feature.${option.value}`,
            field: fieldInfo.field,
            label: getFieldLabel(fieldInfo.field)
        };
    });
}
function getFieldLabel(fieldName) {
    const galleryFields = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s.fields.filter((field) => field.layerField.name === fieldName);
    if (galleryFields.length) {
        return galleryFields[0].label;
    }
    return "";
}

/**
 * Updates the layer with a Predominance renderer with default settings
 * @param options: options
 */
function createRelationshipSizeRenderer(options) {
    const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
    options = options || {};
    const relationshipFieldInfos = [];
    const sizeFieldInfos = [];
    relationshipFieldInfos.push(options.fieldInfos[0]);
    relationshipFieldInfos.push(options.fieldInfos[1]);
    sizeFieldInfos.push(options.fieldInfos[2]);
    if (sameRelationshipFields(options)) {
        return createSizePartForRenderer((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.h)(layer), sizeFieldInfos, options).then((rendererResult) => {
            return Promise.resolve({ renderer: rendererResult });
        }, (error) => Promise.reject(error));
    }
    return (0,_relationship_b72d7d97_js__WEBPACK_IMPORTED_MODULE_16__.c)(Object.assign(Object.assign({}, options), { fieldInfos: relationshipFieldInfos })).then((relationshipRendererResult) => {
        return createSizePartForRenderer(relationshipRendererResult.renderer, sizeFieldInfos, options).then((rendererResult) => {
            relationshipRendererResult.renderer = rendererResult;
            return Promise.resolve(relationshipRendererResult);
        }, (error) => Promise.reject(error));
    }, (error) => Promise.reject(error));
}
function createSizePartForRenderer(relRenderer, sizeFieldInfos, options) {
    const { layer, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
    return (0,_colorSize_ce0ccdeb_js__WEBPACK_IMPORTED_MODULE_10__.c)(Object.assign(Object.assign({}, options), { fieldInfos: sizeFieldInfos })).then((sizeRendererResult) => {
        const sizeRenderer = sizeRendererResult.renderer;
        relRenderer.visualVariables = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.n)(relRenderer, "size") || [];
        relRenderer.visualVariables = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.n)(relRenderer, "size", "auto") || [];
        const sizeVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.a)(sizeRenderer, "size");
        relRenderer.visualVariables.push(sizeVisVar);
        relRenderer.authoringInfo.visualVariables = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.o)(relRenderer, "size") || [];
        const sizeAuthVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.p)(sizeRenderer, "size");
        relRenderer.authoringInfo.visualVariables.push(sizeAuthVisVar);
        if ((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.q)(layer)) {
            // we need to switch the fill symbols to marker symbols
            let markerSymbol = sizeRenderer.classBreakInfos[0].symbol;
            const rendererValueInfos = [];
            relRenderer.uniqueValueInfos.forEach((valueInfo) => {
                rendererValueInfos.push(modules.esriLang.clone(valueInfo));
            });
            rendererValueInfos.forEach((valueInfo) => {
                relRenderer.removeUniqueValueInfo(valueInfo.value);
            });
            rendererValueInfos.forEach((valueInfo) => {
                const sym = markerSymbol.clone();
                (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.r)(sym, (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.t)(valueInfo.symbol));
                relRenderer.addUniqueValueInfo({
                    value: valueInfo.value,
                    symbol: sym,
                    label: valueInfo.label
                });
            });
            relRenderer.backgroundFillSymbol = sizeRenderer.backgroundFillSymbol;
            const sizeOutlineVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.a)(sizeRenderer, "size", "outline");
            if (sizeOutlineVisVar) {
                relRenderer.visualVariables.push(sizeOutlineVisVar);
            }
        }
        return Promise.resolve(relRenderer);
    }, (error) => Promise.reject(error));
}
function sameRelationshipFields(options) {
    // not checking for normalizationField
    // we keep it if the renderer has it and it does not get overwritten
    const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
    if ((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.g)() === "relationship" &&
        options.normalizationField1 === undefined &&
        options.normalizationField2 === undefined) {
        const authInfo = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.h)(layer).authoringInfo;
        if (options.fieldInfos &&
            options.fieldInfos.length > 1 &&
            options.fieldInfos[0].field == authInfo.field1.field &&
            options.fieldInfos[1].field == authInfo.field2.field) {
            return true;
        }
    }
    return false;
}

let _delayHandler;
function createNewRendererWithDelay(galleryRequestWrapper) {
    // wait a little before executing the request
    // in case the user deletes a bunch of attributes
    if (_delayHandler) {
        clearTimeout(_delayHandler);
    }
    _delayHandler = setTimeout(() => {
        _delayHandler = null;
        createNewRenderer(galleryRequestWrapper);
    }, 1000);
}
function createNewRenderer(galleryRequestWrapper) {
    var _a, _b;
    const { selectedFields, layer, mapImageSublayer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
    const isOGC = layer.type === "ogc-feature";
    const isWFS = layer.type === "wfs";
    const supportsSqlExpression = (_b = (_a = layer.capabilities) === null || _a === void 0 ? void 0 : _a.query) === null || _b === void 0 ? void 0 : _b.supportsSqlExpression;
    const advanced = isOGC || isWFS || supportsSqlExpression; // predom, age, dotDensity, field-heatmap
    const fields = selectedFields.map((fieldInfo) => (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.u)(fieldInfo.field));
    const rendererFields = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.f)(layer);
    const rendererType = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.g)();
    if (!(0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.v)(selectedFields, rendererFields)) {
        if (selectedFields.length === 0) {
            if (rendererType === "heatmap") {
                galleryRequestWrapper((0,_heatmap_75ffd452_js__WEBPACK_IMPORTED_MODULE_11__.c)());
            }
            else {
                galleryRequestWrapper((0,_location_e26b539f_js__WEBPACK_IMPORTED_MODULE_8__.c)());
            }
        }
        else if (selectedFields.length === 1) {
            const field = fields[0];
            if (rendererType === "heatmap" &&
                advanced &&
                !selectedFields[0].expression &&
                selectedFields[0].simpleFieldType === _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.w.NUMBER) {
                galleryRequestWrapper((0,_heatmap_75ffd452_js__WEBPACK_IMPORTED_MODULE_11__.c)({
                    fieldInfos: selectedFields
                }));
            }
            else if (rendererType === "color-size" && (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.x)(selectedFields[0], rendererFields[0])) {
                // keep color
                galleryRequestWrapper((0,_color_d6da0a9a_js__WEBPACK_IMPORTED_MODULE_9__.c)({
                    fieldInfos: selectedFields
                }));
            }
            else if (rendererType === "type-size" && (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.x)(selectedFields[0], rendererFields[0])) {
                // keep type
                galleryRequestWrapper((0,_type_0ace5d2e_js__WEBPACK_IMPORTED_MODULE_15__.c)({
                    fieldInfos: selectedFields
                }));
            }
            else if (["color-size", "type-size"].indexOf(rendererType) > -1 &&
                (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.x)(selectedFields[0], rendererFields[rendererFields.length > 1 ? 1 : 0])) {
                // keep size
                galleryRequestWrapper((0,_colorSize_ce0ccdeb_js__WEBPACK_IMPORTED_MODULE_10__.c)({
                    fieldInfos: selectedFields
                }));
            }
            else if (selectedFields[0].expression) {
                if (selectedFields[0].simpleFieldType === _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.w.NUMBER) {
                    galleryRequestWrapper((0,_colorSize_ce0ccdeb_js__WEBPACK_IMPORTED_MODULE_10__.c)({ fieldInfos: selectedFields }));
                }
                else if (selectedFields[0].simpleFieldType === _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.w.DATE) {
                    galleryRequestWrapper((0,_color_d6da0a9a_js__WEBPACK_IMPORTED_MODULE_9__.c)({
                        fieldInfos: selectedFields
                    }));
                }
                else {
                    galleryRequestWrapper((0,_type_0ace5d2e_js__WEBPACK_IMPORTED_MODULE_15__.c)({ fieldInfos: selectedFields }));
                }
            }
            else if (field.simpleFieldType === _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.w.STRING ||
                (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.y)(field) === "string" ||
                ("domain" in field.layerField && field.layerField.domain)) {
                galleryRequestWrapper((0,_type_0ace5d2e_js__WEBPACK_IMPORTED_MODULE_15__.c)({ fieldInfos: selectedFields }));
            }
            else if (["integer", "double", "single", "small-integer", "big-integer"].indexOf((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.z)(field.layerField)) > -1 &&
                "objectIdField" in layer &&
                layer.objectIdField !== field.layerField.name) {
                if ((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.A)(layer)) {
                    if ("featureReduction" in layer && layer.featureReduction) {
                        galleryRequestWrapper((0,_color_d6da0a9a_js__WEBPACK_IMPORTED_MODULE_9__.c)({
                            fieldInfos: selectedFields
                        }));
                    }
                    else {
                        galleryRequestWrapper((0,_colorSize_ce0ccdeb_js__WEBPACK_IMPORTED_MODULE_10__.c)({
                            fieldInfos: selectedFields
                        }));
                    }
                }
                else if ((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.B)(layer)) {
                    galleryRequestWrapper((0,_colorSize_ce0ccdeb_js__WEBPACK_IMPORTED_MODULE_10__.c)({ fieldInfos: selectedFields }));
                }
                else {
                    // "polygon"
                    const valueType = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.y)(field);
                    if (["integer", "small-integer", "big-integer"].indexOf((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.z)(field.layerField)) > -1 ||
                        ((0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_7__.i)(valueType) && valueType === "integer")) {
                        galleryRequestWrapper((0,_colorSize_ce0ccdeb_js__WEBPACK_IMPORTED_MODULE_10__.c)({
                            fieldInfos: selectedFields
                        }));
                    }
                    else {
                        galleryRequestWrapper((0,_color_d6da0a9a_js__WEBPACK_IMPORTED_MODULE_9__.c)({
                            fieldInfos: selectedFields
                        }));
                    }
                }
            }
            else if ((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.z)(field.layerField) === "date") {
                if (rendererType === "color-age-size" && (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.x)(selectedFields[0], rendererFields[0])) {
                    galleryRequestWrapper((0,_color_d6da0a9a_js__WEBPACK_IMPORTED_MODULE_9__.a)({ fieldInfos: selectedFields }));
                }
                else if (["color-size-age", "type-size-age"].indexOf(rendererType) > -1 &&
                    (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.x)(selectedFields[0], rendererFields[1])) {
                    galleryRequestWrapper((0,_colorSize_ce0ccdeb_js__WEBPACK_IMPORTED_MODULE_10__.a)({ fieldInfos: selectedFields }));
                }
                else if (mapImageSublayer) {
                    // doesn't support color renderer
                    galleryRequestWrapper((0,_color_d6da0a9a_js__WEBPACK_IMPORTED_MODULE_9__.a)({ fieldInfos: selectedFields }));
                }
                else {
                    galleryRequestWrapper((0,_color_d6da0a9a_js__WEBPACK_IMPORTED_MODULE_9__.c)({ fieldInfos: selectedFields }));
                }
            }
        }
        else if (selectedFields.length === 2) {
            const field1 = fields[0];
            //const field2 = fields[1]!;
            if ((rendererType === "type" || rendererType === "type-size") &&
                (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.x)(selectedFields[0], rendererFields[0])) {
                // keep type
                galleryRequestWrapper((0,_typeSize_9d4c5d28_js__WEBPACK_IMPORTED_MODULE_18__.c)({
                    fieldInfos: selectedFields
                }));
            }
            else if (selectedFields[0].expression) {
                if (selectedFields[0].simpleFieldType === _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.w.NUMBER &&
                    selectedFields[1].simpleFieldType === _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.w.NUMBER) {
                    galleryRequestWrapper((0,_colorSize_ce0ccdeb_js__WEBPACK_IMPORTED_MODULE_10__.b)({
                        fieldInfos: selectedFields
                    }));
                }
                else {
                    galleryRequestWrapper((0,_typeSize_9d4c5d28_js__WEBPACK_IMPORTED_MODULE_18__.c)({ fieldInfos: selectedFields }));
                }
            }
            else if (selectedFields[0].simpleFieldType === _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.w.STRING ||
                (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.y)(field1) === "string" ||
                ("domain" in field1.layerField && field1.layerField.domain)) {
                if (selectedFields[1].simpleFieldType === _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.w.DATE &&
                    (["color-size-age", "type-size-age"].indexOf(rendererType) > -1 || mapImageSublayer)) {
                    // MS doesn't support color or size renderer on date field
                    galleryRequestWrapper((0,_typeSize_9d4c5d28_js__WEBPACK_IMPORTED_MODULE_18__.a)({ fieldInfos: selectedFields }));
                }
                else {
                    galleryRequestWrapper((0,_typeSize_9d4c5d28_js__WEBPACK_IMPORTED_MODULE_18__.c)({ fieldInfos: selectedFields }));
                }
            }
            else if (selectedFields[0].simpleFieldType === _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.w.DATE ||
                selectedFields[1].simpleFieldType === _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.w.DATE) {
                if (selectedFields[0].simpleFieldType === _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.w.DATE &&
                    (["color-age", "color-age-size"].indexOf(rendererType) > -1 || mapImageSublayer)) {
                    // MS doesn't support color or size renderer on date field
                    galleryRequestWrapper((0,_colorSize_ce0ccdeb_js__WEBPACK_IMPORTED_MODULE_10__.d)({ fieldInfos: selectedFields }));
                }
                else if (selectedFields[1].simpleFieldType === _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.w.DATE &&
                    (["color-size-age", "type-size-age"].indexOf(rendererType) > -1 || mapImageSublayer)) {
                    // MS doesn't support color or size renderer on date field
                    galleryRequestWrapper((0,_colorSize_ce0ccdeb_js__WEBPACK_IMPORTED_MODULE_10__.e)({ fieldInfos: selectedFields }));
                }
                else {
                    galleryRequestWrapper((0,_colorSize_ce0ccdeb_js__WEBPACK_IMPORTED_MODULE_10__.b)({ fieldInfos: selectedFields }));
                }
            }
            else {
                // both numbers
                // stay with the style we're at, if possible
                if (selectedFields[0].expression || selectedFields[1].expression) {
                    galleryRequestWrapper((0,_colorSize_ce0ccdeb_js__WEBPACK_IMPORTED_MODULE_10__.b)({ fieldInfos: selectedFields }));
                }
                else if (rendererType === "dot-density") {
                    galleryRequestWrapper(createDotDensityRenderer({
                        fieldInfos: selectedFields
                    }));
                }
                else if (rendererType === "predominance") {
                    galleryRequestWrapper((0,_predominance_a1a2d74d_js__WEBPACK_IMPORTED_MODULE_12__.c)({
                        fieldInfos: selectedFields
                    }));
                }
                else if (rendererType === "predominance-size") {
                    galleryRequestWrapper((0,_predominance_a1a2d74d_js__WEBPACK_IMPORTED_MODULE_12__.c)({
                        fieldInfos: selectedFields,
                        includeSizeVariable: true
                    }));
                }
                else if (rendererType === "chart") {
                    galleryRequestWrapper((0,_chart_097ec280_js__WEBPACK_IMPORTED_MODULE_13__.c)({
                        fieldInfos: selectedFields
                    }));
                }
                else if (rendererType === "chart-size") {
                    galleryRequestWrapper((0,_chart_097ec280_js__WEBPACK_IMPORTED_MODULE_13__.c)({
                        fieldInfos: selectedFields,
                        includeSizeVariable: true
                    }));
                }
                else if (rendererType === "compare") {
                    galleryRequestWrapper((0,_compare_ba1292fe_js__WEBPACK_IMPORTED_MODULE_14__.c)({
                        fieldInfos: selectedFields
                    }));
                }
                else if (["relationship", "relationship-size"].indexOf(rendererType) > -1) {
                    galleryRequestWrapper((0,_relationship_b72d7d97_js__WEBPACK_IMPORTED_MODULE_16__.c)({
                        fieldInfos: selectedFields
                    }));
                }
                else {
                    galleryRequestWrapper((0,_colorSize_ce0ccdeb_js__WEBPACK_IMPORTED_MODULE_10__.b)({ fieldInfos: selectedFields }));
                }
            }
        }
        else {
            // more than two attributes
            if (selectedFields.length === 3 &&
                (["relationship", "relationship-size"].indexOf(rendererType) > -1 || selectedFields[2].expression || !advanced) //||
            ) {
                galleryRequestWrapper(createRelationshipSizeRenderer({
                    fieldInfos: selectedFields
                }));
            }
            else if (rendererType === "dot-density" && selectedFields.length <= 8) {
                galleryRequestWrapper(createDotDensityRenderer({
                    fieldInfos: selectedFields
                }));
            }
            else if (rendererType === "predominance-size") {
                galleryRequestWrapper((0,_predominance_a1a2d74d_js__WEBPACK_IMPORTED_MODULE_12__.c)({
                    fieldInfos: selectedFields,
                    includeSizeVariable: true
                }));
            }
            else if (rendererType === "chart") {
                galleryRequestWrapper((0,_chart_097ec280_js__WEBPACK_IMPORTED_MODULE_13__.c)({
                    fieldInfos: selectedFields,
                    includeSizeVariable: false
                }));
            }
            else if (rendererType === "chart-size") {
                galleryRequestWrapper((0,_chart_097ec280_js__WEBPACK_IMPORTED_MODULE_13__.c)({
                    fieldInfos: selectedFields,
                    includeSizeVariable: true
                }));
            }
            else {
                if (mapImageSublayer && !advanced) {
                    galleryRequestWrapper(createRelationshipSizeRenderer({
                        fieldInfos: selectedFields
                    }));
                }
                else if (selectedFields[2].simpleFieldType === _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.w.DATE) {
                    galleryRequestWrapper(createRelationshipSizeRenderer({
                        fieldInfos: selectedFields
                    }));
                }
                else {
                    galleryRequestWrapper((0,_predominance_a1a2d74d_js__WEBPACK_IMPORTED_MODULE_12__.c)({
                        fieldInfos: selectedFields
                    }));
                }
            }
        }
    }
}
function createCertainRenderer(type, galleryRequestWrapper) {
    const { selectedFields } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
    switch (type) {
        case "simple":
            // remove selected attributes
            _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s.selectedFields = [];
            galleryRequestWrapper((0,_location_e26b539f_js__WEBPACK_IMPORTED_MODULE_8__.c)());
            break;
        case "type":
            galleryRequestWrapper((0,_type_0ace5d2e_js__WEBPACK_IMPORTED_MODULE_15__.c)({ fieldInfos: selectedFields }));
            break;
        case "color":
            galleryRequestWrapper((0,_color_d6da0a9a_js__WEBPACK_IMPORTED_MODULE_9__.c)({ fieldInfos: selectedFields }));
            break;
        case "size":
            galleryRequestWrapper((0,_colorSize_ce0ccdeb_js__WEBPACK_IMPORTED_MODULE_10__.c)({ fieldInfos: selectedFields }));
            break;
        case "color-age":
            galleryRequestWrapper((0,_color_d6da0a9a_js__WEBPACK_IMPORTED_MODULE_9__.a)({ fieldInfos: selectedFields }));
            break;
        case "size-age":
            galleryRequestWrapper((0,_colorSize_ce0ccdeb_js__WEBPACK_IMPORTED_MODULE_10__.a)({ fieldInfos: selectedFields }));
            break;
        case "dot-density":
            galleryRequestWrapper(createDotDensityRenderer({ fieldInfos: selectedFields }));
            break;
        case "heatmap":
            galleryRequestWrapper((0,_heatmap_75ffd452_js__WEBPACK_IMPORTED_MODULE_11__.c)({ fieldInfos: selectedFields }));
            break;
        case "compare":
            galleryRequestWrapper((0,_compare_ba1292fe_js__WEBPACK_IMPORTED_MODULE_14__.c)({ fieldInfos: selectedFields }));
            break;
        case "relationship":
            galleryRequestWrapper((0,_relationship_b72d7d97_js__WEBPACK_IMPORTED_MODULE_16__.c)({ fieldInfos: selectedFields }));
            break;
        case "relationship-size":
            galleryRequestWrapper(createRelationshipSizeRenderer({
                fieldInfos: selectedFields
            }));
            break;
        case "predominance":
            galleryRequestWrapper((0,_predominance_a1a2d74d_js__WEBPACK_IMPORTED_MODULE_12__.c)({ fieldInfos: selectedFields }));
            break;
        case "predominance-size":
            galleryRequestWrapper((0,_predominance_a1a2d74d_js__WEBPACK_IMPORTED_MODULE_12__.c)({
                fieldInfos: selectedFields,
                includeSizeVariable: true
            }));
            break;
        case "chart":
            galleryRequestWrapper((0,_chart_097ec280_js__WEBPACK_IMPORTED_MODULE_13__.c)({ fieldInfos: selectedFields }));
            break;
        case "chart-size":
            galleryRequestWrapper((0,_chart_097ec280_js__WEBPACK_IMPORTED_MODULE_13__.c)({
                fieldInfos: selectedFields,
                includeSizeVariable: true
            }));
            break;
        case "type-size":
            galleryRequestWrapper((0,_typeSize_9d4c5d28_js__WEBPACK_IMPORTED_MODULE_18__.c)({ fieldInfos: selectedFields }));
            break;
        case "type-size-age":
            galleryRequestWrapper((0,_typeSize_9d4c5d28_js__WEBPACK_IMPORTED_MODULE_18__.a)({ fieldInfos: selectedFields }));
            break;
        case "color-size":
            if (selectedFields.length === 1) {
                galleryRequestWrapper((0,_colorSizeUnivariant_d266ac7c_js__WEBPACK_IMPORTED_MODULE_17__.c)({
                    fieldInfos: selectedFields
                }));
            }
            else {
                galleryRequestWrapper((0,_colorSize_ce0ccdeb_js__WEBPACK_IMPORTED_MODULE_10__.b)({ fieldInfos: selectedFields }));
            }
            break;
        case "color-age-size":
            galleryRequestWrapper((0,_colorSize_ce0ccdeb_js__WEBPACK_IMPORTED_MODULE_10__.d)({ fieldInfos: selectedFields }));
            break;
        case "color-size-age":
            galleryRequestWrapper((0,_colorSize_ce0ccdeb_js__WEBPACK_IMPORTED_MODULE_10__.e)({ fieldInfos: selectedFields }));
            break;
    }
}

function getAllowedStyles() {
    var _a, _b;
    const { layer, mapImageSublayer, selectedFields, supportsArcade } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
    const isOGC = layer.type === "ogc-feature";
    const isWFS = layer.type === "wfs";
    const isStream = layer.type === "stream";
    const featureReduction = "featureReduction" in layer && layer.featureReduction;
    const fieldCount = selectedFields.length;
    const counts = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.C)();
    const hasStringField = counts.string > 0;
    const hasDateField = counts.date > 0;
    const hasExpression = counts.expression > 0;
    //const hasUnknownType = counts.unknown > 0;
    const supportsSqlExpression = (_b = (_a = layer.capabilities) === null || _a === void 0 ? void 0 : _a.query) === null || _b === void 0 ? void 0 : _b.supportsSqlExpression;
    const advanced = isOGC || isWFS || isStream || supportsSqlExpression; // predom, chart, age, dotDensity, field-heatmap
    const list = [];
    list.push("simple");
    if (fieldCount === 1 && !hasStringField && !(mapImageSublayer && hasDateField)) {
        list.push("color");
    }
    if (fieldCount === 1 && !hasStringField && !(mapImageSublayer && hasDateField)) {
        list.push("size");
    }
    if ((!mapImageSublayer || supportsArcade) && fieldCount === 1 && hasDateField && !hasExpression && advanced) {
        list.push("color-age");
    }
    if ((!mapImageSublayer || supportsArcade) && fieldCount === 1 && hasDateField && !hasExpression && advanced) {
        list.push("size-age");
    }
    if ((!mapImageSublayer || supportsArcade) &&
        (fieldCount === 1 || fieldCount === 2) &&
        !hasStringField &&
        !(mapImageSublayer && hasDateField)) {
        list.push("color-size");
    }
    if ((!mapImageSublayer || supportsArcade) &&
        fieldCount === 2 &&
        !hasStringField &&
        hasDateField &&
        selectedFields[0].simpleFieldType === _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.w.DATE &&
        !selectedFields[0].expression &&
        advanced &&
        !(mapImageSublayer && counts.date > 1)) {
        list.push("color-age-size");
    }
    if ((!mapImageSublayer || supportsArcade) &&
        fieldCount === 2 &&
        !hasStringField &&
        hasDateField &&
        selectedFields[1].simpleFieldType === _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.w.DATE &&
        !selectedFields[1].expression &&
        advanced &&
        !(mapImageSublayer && counts.date > 1)) {
        list.push("color-size-age");
    }
    if ((!mapImageSublayer || supportsArcade) &&
        fieldCount > 0 &&
        fieldCount <= 8 &&
        !hasExpression &&
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.q)(layer) &&
        !hasStringField &&
        !hasDateField &&
        advanced) {
        list.push("dot-density");
    }
    if ((!mapImageSublayer || supportsArcade) &&
        fieldCount > 1 &&
        fieldCount <= 10 &&
        !hasExpression &&
        !hasStringField &&
        !hasDateField &&
        advanced) {
        list.push("predominance");
    }
    if ((!mapImageSublayer || supportsArcade) &&
        fieldCount > 1 &&
        !hasExpression &&
        !hasStringField &&
        !hasDateField &&
        advanced) {
        list.push("predominance-size");
    }
    if (!mapImageSublayer &&
        !featureReduction &&
        fieldCount > 1 &&
        fieldCount <= 10 &&
        !hasExpression &&
        ["polygon", "point", "multipoint"].indexOf((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.D)(layer)) > -1 &&
        !hasStringField &&
        !hasDateField &&
        advanced) {
        list.push("chart");
    }
    if (!mapImageSublayer &&
        !featureReduction &&
        fieldCount > 1 &&
        !hasExpression &&
        ["polygon", "point", "multipoint"].indexOf((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.D)(layer)) > -1 &&
        !hasStringField &&
        !hasDateField &&
        advanced) {
        list.push("chart-size");
    }
    if ((!mapImageSublayer || supportsArcade) && fieldCount === 2 && !hasExpression && !hasStringField && !hasDateField) {
        list.push("relationship");
    }
    if ((!mapImageSublayer || supportsArcade) &&
        fieldCount === 3 &&
        (!hasExpression || (counts.expression === 1 && selectedFields[2].expression)) &&
        !(mapImageSublayer && hasDateField)) {
        list.push("relationship-size");
    }
    if ((!mapImageSublayer || supportsArcade) && fieldCount === 2 && !hasExpression && !hasStringField && !hasDateField) {
        list.push("compare");
    }
    if (fieldCount === 1 && !(mapImageSublayer && hasDateField)) {
        list.push("type");
    }
    if ((!mapImageSublayer || supportsArcade) &&
        fieldCount === 2 &&
        counts.date < 2 &&
        !(mapImageSublayer && hasDateField)) {
        list.push("type-size");
    }
    if ((!mapImageSublayer || supportsArcade) &&
        fieldCount === 2 &&
        hasDateField &&
        counts.date < 2 &&
        selectedFields[1].simpleFieldType === _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.w.DATE &&
        selectedFields[1].field &&
        advanced) {
        // age renderer has expression and field set
        list.push("type-size-age");
    }
    if ((!mapImageSublayer || supportsArcade) &&
        ["point", "multipoint"].indexOf((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.D)(layer)) > -1 &&
        !featureReduction &&
        ((advanced && fieldCount <= 1) || (!advanced && fieldCount === 0)) &&
        !hasStringField &&
        !hasDateField &&
        counts.expression === 0) {
        list.push("heatmap");
    }
    return list;
}
function getOrderForRendererType() {
    const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
    const rendererType = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.g)();
    const fieldInfos = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.f)(layer);
    const fieldType1 = fieldInfos.length > 0 ? fieldInfos[0].simpleFieldType : null;
    //const fieldType2 =
    //  fieldInfos.length > 1 ? fieldInfos[1].simpleFieldType : null;
    let list = [];
    switch (rendererType) {
        case "simple":
            list = [
                "simple",
                "color",
                "size",
                "color-age",
                "size-age",
                "color-size",
                "type",
                "heatmap",
                "dot-density",
                "predominance",
                "predominance-size",
                "chart",
                "chart-size",
                "color-age-size",
                "color-size-age",
                "type-size",
                "type-size-age",
                "compare",
                "relationship",
                "relationship-size"
            ];
            break;
        case "type":
            list = [
                "type",
                "color",
                "size",
                "color-age",
                "size-age",
                "color-size",
                "dot-density",
                "heatmap",
                "simple",
                "type-size",
                "type-size-age",
                "predominance",
                "predominance-size",
                "chart",
                "chart-size",
                "color-age-size",
                "color-size-age",
                "compare",
                "relationship",
                "relationship-size"
            ];
            break;
        case "color":
            list = ["color", "size", "color-age", "size-age", "color-size", "dot-density"];
            if (fieldType1 === "string" || fieldType1 === "date") {
                list = list.concat(["type", "heatmap", "simple"]);
            }
            else {
                list = list.concat(["heatmap", "simple", "type"]);
            }
            list = list.concat([
                "predominance",
                "predominance-size",
                "chart",
                "chart-size",
                "color-age-size",
                "color-size-age",
                "type-size",
                "type-size-age",
                "compare",
                "relationship",
                "relationship-size"
            ]);
            break;
        case "color-age":
            list = ["color-age", "color", "size", "size-age", "color-size", "dot-density"];
            if (fieldType1 === "string" || fieldType1 === "date") {
                list = list.concat(["type", "heatmap", "simple"]);
            }
            else {
                list = list.concat(["heatmap", "simple", "type"]);
            }
            list = list.concat([
                "predominance",
                "predominance-size",
                "chart",
                "chart-size",
                "color-age-size",
                "color-size-age",
                "type-size",
                "type-size-age",
                "compare",
                "relationship",
                "relationship-size"
            ]);
            break;
        case "size":
            list = ["size", "size-age", "color", "color-age", "color-size", "dot-density"];
            if (fieldType1 === "string" || fieldType1 === "date") {
                list = list.concat(["type", "heatmap", "simple"]);
            }
            else {
                list = list.concat(["heatmap", "simple", "type"]);
            }
            list = list.concat([
                "predominance",
                "predominance-size",
                "chart",
                "chart-size",
                "color-age-size",
                "color-size-age",
                "type-size",
                "type-size-age",
                "compare",
                "relationship",
                "relationship-size"
            ]);
            break;
        case "size-age":
            list = ["size-age", "size", "color-age", "color", "color-size", "dot-density"];
            if (fieldType1 === "string" || fieldType1 === "date") {
                list = list.concat(["type", "heatmap", "simple"]);
            }
            else {
                list = list.concat(["heatmap", "simple", "type"]);
            }
            list = list.concat([
                "predominance",
                "predominance-size",
                "chart",
                "chart-size",
                "color-age-size",
                "color-size-age",
                "type-size",
                "type-size-age",
                "compare",
                "relationship",
                "relationship-size"
            ]);
            break;
        case "heatmap":
            list = ["heatmap", "color", "size", "color-age", "size-age", "color-size", "dot-density"];
            if (fieldType1 === "string") {
                list = list.concat(["type", "simple"]);
            }
            else {
                list = list.concat(["simple", "type"]);
            }
            list = list.concat([
                "predominance",
                "predominance-size",
                "chart",
                "chart-size",
                "color-age-size",
                "color-size-age",
                "type-size",
                "type-size-age",
                "compare",
                "relationship",
                "relationship-size"
            ]);
            break;
        case "predominance":
            list = [
                "predominance",
                "predominance-size",
                "chart",
                "chart-size",
                "color-size",
                "color-age-size",
                "color-size-age",
                "dot-density",
                "compare",
                "relationship",
                "relationship-size",
                "type-size",
                "type-size-age",
                "heatmap",
                "color",
                "size",
                "color-age",
                "size-age"
            ];
            if (fieldType1 === "string") {
                list = list.concat(["type", "simple"]);
            }
            else {
                list = list.concat(["simple", "type"]);
            }
            break;
        case "chart":
            list = [
                "chart",
                "chart-size",
                "predominance",
                "predominance-size",
                "color-size",
                "color-age-size",
                "color-size-age",
                "dot-density",
                "compare",
                "relationship",
                "relationship-size",
                "type-size",
                "type-size-age",
                "heatmap",
                "color",
                "size",
                "color-age",
                "size-age"
            ];
            if (fieldType1 === "string") {
                list = list.concat(["type", "simple"]);
            }
            else {
                list = list.concat(["simple", "type"]);
            }
            break;
        case "dot-density":
            list = [
                "dot-density",
                "color-size",
                "color-age-size",
                "color-size-age",
                "predominance",
                "predominance-size",
                "chart",
                "chart-size",
                "compare",
                "relationship",
                "relationship-size",
                "type-size",
                "type-size-age",
                "heatmap",
                "color",
                "size",
                "color-age",
                "size-age"
            ];
            if (fieldType1 === "string") {
                list = list.concat(["type", "simple"]);
            }
            else {
                list = list.concat(["simple", "type"]);
            }
            break;
        case "compare":
            list = [
                "compare",
                "color-size",
                "color-age-size",
                "color-size-age",
                "dot-density",
                "predominance",
                "predominance-size",
                "chart",
                "chart-size",
                "relationship",
                "relationship-size",
                "type-size",
                "type-size-age",
                "heatmap",
                "color",
                "size",
                "color-age",
                "size-age"
            ];
            if (fieldType1 === "string") {
                list = list.concat(["type"]);
            }
            list = list.concat(["simple"]);
            if (!fieldType1 || fieldType1 !== "string") {
                list = list.concat(["type"]);
            }
            break;
        case "relationship":
            list = [
                "relationship",
                "relationship-size",
                "compare",
                "color-size",
                "color-age-size",
                "color-size-age",
                "dot-density",
                "predominance",
                "predominance-size",
                "chart",
                "chart-size",
                "type-size",
                "type-size-age",
                "heatmap",
                "color",
                "size",
                "color-age",
                "size-age"
            ];
            if (fieldType1 === "string") {
                list = list.concat(["type"]);
            }
            list = list.concat(["simple"]);
            if (!fieldType1 || fieldType1 !== "string") {
                list = list.concat(["type"]);
            }
            break;
        case "color-size":
            list = [
                "color-size",
                "color-age-size",
                "color-size-age",
                "color",
                "size",
                "color-age",
                "size-age",
                "compare",
                "dot-density",
                "predominance",
                "predominance-size",
                "chart",
                "chart-size",
                "relationship",
                "relationship-size",
                "type-size",
                "type-size-age",
                "type",
                "heatmap",
                "simple"
            ];
            break;
        case "color-age-size":
            list = [
                "color-age-size",
                "color-size-age",
                "color-size",
                "compare",
                "dot-density",
                "predominance",
                "predominance-size",
                "chart",
                "chart-size",
                "relationship",
                "relationship-size",
                "type-size",
                "type-size-age",
                "color",
                "color-age",
                "size",
                "size-age",
                "simple",
                "type",
                "heatmap"
            ];
            break;
        case "color-size-age":
            list = [
                "color-size-age",
                "color-age-size",
                "color-size",
                "compare",
                "dot-density",
                "predominance",
                "predominance-size",
                "chart",
                "chart-size",
                "relationship",
                "relationship-size",
                "type-size",
                "type-size-age",
                "color",
                "color-age",
                "size",
                "size-age",
                "simple",
                "type",
                "heatmap"
            ];
            break;
        case "type-size":
            list = [
                "type-size",
                "type-size-age",
                "color-size",
                "color-age-size",
                "color-size-age",
                "dot-density",
                "predominance",
                "predominance-size",
                "chart",
                "chart-size",
                "type",
                "size",
                "simple",
                "color",
                "color-age",
                "size-age",
                "heatmap",
                "compare",
                "relationship",
                "relationship-size"
            ];
            break;
        case "type-size-age":
            list = [
                "type-size-age",
                "type-size",
                "color-age-size",
                "color-size-age",
                "color-size",
                "dot-density",
                "predominance",
                "predominance-size",
                "chart",
                "chart-size",
                "type",
                "size",
                "size-age",
                "simple",
                "color",
                "color-age",
                "heatmap",
                "compare",
                "relationship",
                "relationship-size"
            ];
            break;
        case "predominance-size":
            list = [
                "predominance-size",
                "predominance",
                "chart-size",
                "chart",
                "dot-density",
                "color-size",
                "color-age-size",
                "color-size-age",
                "compare",
                "relationship",
                "relationship-size",
                "type-size",
                "type-size-age",
                "heatmap",
                "color",
                "size",
                "color-age",
                "size-age"
            ];
            if (fieldType1 === "string") {
                list = list.concat(["type", "simple"]);
            }
            else {
                list = list.concat(["simple", "type"]);
            }
            break;
        case "chart-size":
            list = [
                "chart-size",
                "chart",
                "predominance-size",
                "predominance",
                "dot-density",
                "color-size",
                "color-age-size",
                "color-size-age",
                "compare",
                "relationship",
                "relationship-size",
                "type-size",
                "type-size-age",
                "heatmap",
                "color",
                "size",
                "color-age",
                "size-age"
            ];
            if (fieldType1 === "string") {
                list = list.concat(["type", "simple"]);
            }
            else {
                list = list.concat(["simple", "type"]);
            }
            break;
        case "relationship-size":
            list = [
                "relationship-size",
                "relationship",
                "compare",
                "color-size",
                "color-age-size",
                "color-size-age",
                "dot-density",
                "predominance",
                "predominance-size",
                "chart",
                "chart-size",
                "type-size",
                "type-size-age",
                "heatmap",
                "color",
                "size",
                "color-age",
                "size-age"
            ];
            if (fieldType1 === "string") {
                list = list.concat(["type"]);
            }
            list = list.concat(["simple"]);
            if (fieldType1 !== "string") {
                list = list.concat(["type"]);
            }
            break;
        default:
            list = ["color", "size", "color-age", "size-age", "color-size"];
            if (fieldType1 === "string") {
                list = list.concat(["type"]);
            }
            list = list.concat(["heatmap", "simple"]);
            if (fieldType1 !== "string") {
                list = list.concat(["type"]);
            }
            list = list.concat([
                "dot-density",
                "predominance",
                "predominance-size",
                "chart",
                "chart-size",
                "color-age-size",
                "color-size-age",
                "type-size",
                "type-size-age",
                "compare",
                "relationship",
                "relationship-size"
            ]);
    }
    return list;
}

const arcgisSmartMappingPanelsGalleryCss = ".add-button-div{margin:0 3px}.add-buttons{display:flex;flex-direction:row;justify-content:space-between;background-color:#ffffff}.attributes{padding:6px 6px 0 6px;background-color:#ffffff}.attributes-header-text{font-weight:bold;font-size:16px;padding:10px 0}.attributes-msg{font-size:var(--calcite-font-size--2)}.attributes-add-new{margin-top:10px}.tip{margin-top:15px;display:flex;justify-content:space-between}.tip-message{justify-content:center}.tip-text{color:#3d5f1d}.tip-close{margin-top:4px}.field-type{display:flex;align-items:center;height:100%;color:var(--calcite-color-text-1)}.attribute-list{border-bottom:1px solid #e0e0e0}.gallery-block{padding:12px 3px;margin-bottom:12px;background-color:#ffffff;box-shadow:0 1px 10px 2px rgba(0, 0, 0, 0.05), 0 0 0 1px #e0e0e0}.center{display:flex;align-items:center;justify-content:center;text-align:center}.number-icon{color:var(--calcite-color-brand)}.styles-msg-title{padding:6px;font-weight:bold;font-size:16px;display:flex;justify-content:center}.styles-msg{font-size:var(--calcite-font-size--2)}";

const ArcgisSmartMappingPanelsGallery = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisSmartMappingPanelsGalleryClose = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingPanelsGalleryClose", 7);
        this.arcgisSmartMappingPanelsGalleryError = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingPanelsGalleryError", 7);
        this.arcgisSmartMappingPanelsGalleryClusterRequiresUpdate = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingPanelsGalleryClusterRequiresUpdate", 7);
        this.tileNodes = [];
        this.lastSortBy = _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_5__.L.default;
        this.addExpression = async () => {
            (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.E)();
            try {
                // open Arcade editor
                const fieldInfo = await (0,_feature_1ce1b984_js__WEBPACK_IMPORTED_MODULE_1__.u)();
                if (fieldInfo.simpleFieldType === _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.w.UNKNOWN) {
                    // let's just assume it's a number; maybe it didn't have good test data
                    fieldInfo.simpleFieldType = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.w.NUMBER;
                }
                const { selectedFields, modules, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
                if (selectedFields.length === 2 && (fieldInfo === null || fieldInfo === void 0 ? void 0 : fieldInfo.simpleFieldType) === _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.w.STRING) {
                    // can't use a string field for size component of relationship+size
                    this.arcgisSmartMappingPanelsGalleryError.emit({
                        message: strings.panels.gallery.errors.expressionMustBeNumber,
                        type: "warning"
                    });
                    return;
                }
                else if (selectedFields.length === 1 &&
                    selectedFields[0].simpleFieldType === _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.w.STRING &&
                    (fieldInfo === null || fieldInfo === void 0 ? void 0 : fieldInfo.simpleFieldType) === _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.w.STRING) {
                    // can't use 2 string fields
                    this.arcgisSmartMappingPanelsGalleryError.emit({
                        message: strings.panels.gallery.errors.expressionMustBeNumber,
                        type: "warning"
                    });
                    return;
                }
                const newSelectedFields = modules.esriLang.clone(selectedFields);
                newSelectedFields.push(fieldInfo);
                if (newSelectedFields.length === 3) {
                    for (let i = 0; i < 3; i++) {
                        const fieldInfo = newSelectedFields[i];
                        if (fieldInfo.simpleFieldType === _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.w.DATE && i !== 2) {
                            // move to end for 'Relationship & Size'
                            newSelectedFields.splice(i, 1);
                            newSelectedFields.splice(2, 0, fieldInfo);
                            break;
                        }
                    }
                }
                if (newSelectedFields.length > 1 &&
                    newSelectedFields[1].simpleFieldType === _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.w.STRING) {
                    newSelectedFields.reverse();
                }
                _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s.selectedFields = newSelectedFields;
                createNewRendererWithDelay(this.galleryRequestWrapper);
            }
            catch (e) {
                this.addExpressionButtonNode.setFocus();
            }
        };
        this.handleArcadeEdit = async (editIdx) => {
            (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.E)();
            try {
                const { selectedFields, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
                // open Arcade editor
                const fieldInfo = await (0,_feature_1ce1b984_js__WEBPACK_IMPORTED_MODULE_1__.u)(selectedFields[editIdx]);
                if (fieldInfo.simpleFieldType === _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.w.UNKNOWN) {
                    // let's just assume it's a number; maybe it didn't have good test data
                    fieldInfo.simpleFieldType = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.w.NUMBER;
                }
                if (editIdx !== 0 && (fieldInfo === null || fieldInfo === void 0 ? void 0 : fieldInfo.simpleFieldType) === _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.w.STRING) {
                    // editing an expression
                    if (selectedFields[0].simpleFieldType === _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.w.STRING) {
                        // can't do 2 string fields
                        this.arcgisSmartMappingPanelsGalleryError.emit({
                            message: strings.panels.gallery.errors.expressionMustBeNumber,
                            type: "warning"
                        });
                        return;
                    }
                }
                if (fieldInfo.simpleFieldType === "string") {
                    // add in front
                    selectedFields.splice(editIdx, 1);
                    selectedFields.unshift(fieldInfo);
                    (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
                }
                else {
                    selectedFields[editIdx] = fieldInfo;
                }
                _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s.selectedFields = selectedFields;
                createNewRendererWithDelay(this.galleryRequestWrapper);
            }
            catch (e) {
                this.addExpressionButtonNode.setFocus();
            }
        };
        this.handleListOrderChange = (event) => {
            const { selectedFields, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
            const newSelectedFields = [];
            event.target
                .querySelectorAll("calcite-list-item")
                .forEach((item) => {
                newSelectedFields.push(modules.esriLang.clone(selectedFields[parseInt(item.value)]));
            });
            _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s.selectedFields = newSelectedFields;
            createNewRendererWithDelay(this.galleryRequestWrapper);
        };
        this.handleListChange = (value) => {
            const { selectedFields } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
            const isExpression = !!selectedFields[value].expression;
            isExpression ? this.handleArcadeEdit(value) : this.openFieldPickList(true, value);
        };
        this.handleRemoveAttribute = (idx) => {
            this.modifyFieldPickList = true;
            const { selectedFields } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
            _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s.selectedFields = selectedFields === null || selectedFields === void 0 ? void 0 : selectedFields.filter((_, idx2) => idx2 !== idx);
            createNewRendererWithDelay(this.galleryRequestWrapper);
        };
        this.handleSelectClick = (type) => {
            createCertainRenderer(type, this.galleryRequestWrapper);
        };
        this.handleOptionsClick = (type) => {
            const { flowNode } = this;
            const { selectedFields } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
            switch (type) {
                case "simple": {
                    const flowItem = document.createElement("arcgis-smart-mapping-panels-simple");
                    flowItem.addEventListener("arcgisSmartMappingPanelsSimpleClose", () => {
                        flowNode.removeChild(flowItem);
                        this.focusSelectedTile();
                    });
                    flowItem.addEventListener("arcgisSmartMappingPanelsSimpleBackClick", () => this.focusSelectedTile());
                    flowItem.addEventListener("arcgisSmartMappingPanelsSimpleError", ({ detail }) => this.arcgisSmartMappingPanelsGalleryError.emit(detail));
                    flowNode.appendChild(flowItem);
                    break;
                }
                case "color":
                case "color-age": {
                    const flowItem = document.createElement("arcgis-smart-mapping-panels-color");
                    flowItem.addEventListener("arcgisSmartMappingPanelsColorClose", () => {
                        flowNode.removeChild(flowItem);
                        this.focusSelectedTile();
                    });
                    flowItem.addEventListener("arcgisSmartMappingPanelsColorBackClick", () => {
                        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
                        this.focusSelectedTile();
                    });
                    flowItem.addEventListener("arcgisSmartMappingPanelsColorError", ({ detail }) => this.arcgisSmartMappingPanelsGalleryError.emit(detail));
                    flowNode.appendChild(flowItem);
                    break;
                }
                case "size":
                case "size-age": {
                    const flowItem = document.createElement("arcgis-smart-mapping-panels-size");
                    flowItem.addEventListener("arcgisSmartMappingPanelsSizeClose", () => {
                        flowNode.removeChild(flowItem);
                        this.focusSelectedTile();
                    });
                    flowItem.addEventListener("arcgisSmartMappingPanelsSizeBackClick", () => {
                        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
                        this.focusSelectedTile();
                    });
                    flowItem.addEventListener("arcgisSmartMappingPanelsSizeError", ({ detail }) => this.arcgisSmartMappingPanelsGalleryError.emit(detail));
                    flowNode.appendChild(flowItem);
                    break;
                }
                case "type": {
                    const flowItem = document.createElement("arcgis-smart-mapping-panels-type");
                    flowItem.addEventListener("arcgisSmartMappingPanelsTypeClose", () => {
                        flowNode.removeChild(flowItem);
                        this.focusSelectedTile();
                    });
                    flowItem.addEventListener("arcgisSmartMappingPanelsTypeBackClick", () => this.focusSelectedTile());
                    flowItem.addEventListener("arcgisSmartMappingPanelsTypeClusterRequiresUpdate", () => {
                        this.arcgisSmartMappingPanelsGalleryClusterRequiresUpdate.emit();
                    });
                    flowItem.addEventListener("onArcgisSmartMappingPanelsTypeError", ({ detail }) => this.arcgisSmartMappingPanelsGalleryError.emit(detail));
                    flowNode.appendChild(flowItem);
                    break;
                }
                case "compare": {
                    const flowItem = document.createElement("arcgis-smart-mapping-panels-compare");
                    flowItem.addEventListener("arcgisSmartMappingPanelsCompareClose", () => {
                        flowNode.removeChild(flowItem);
                        this.focusSelectedTile();
                    });
                    flowItem.addEventListener("arcgisSmartMappingPanelsCompareBackClick", () => this.focusSelectedTile());
                    flowItem.addEventListener("arcgisSmartMappingPanelsCompareError", ({ detail }) => this.arcgisSmartMappingPanelsGalleryError.emit(detail));
                    flowNode.appendChild(flowItem);
                    break;
                }
                case "heatmap": {
                    const flowItem = document.createElement("arcgis-smart-mapping-panels-heatmap");
                    flowItem.addEventListener("arcgisSmartMappingPanelsHeatmapClose", () => {
                        flowNode.removeChild(flowItem);
                        this.focusSelectedTile();
                    });
                    flowItem.addEventListener("arcgisSmartMappingPanelsHeatmapBackClick", () => this.focusSelectedTile());
                    flowItem.addEventListener("arcgisSmartMappingPanelsHeatmapError", ({ detail }) => this.arcgisSmartMappingPanelsGalleryError.emit(detail));
                    flowNode.appendChild(flowItem);
                    break;
                }
                case "predominance": {
                    const flowItem = document.createElement("arcgis-smart-mapping-panels-predominance");
                    flowItem.addEventListener("arcgisSmartMappingPanelsPredominanceClose", () => {
                        flowNode.removeChild(flowItem);
                        this.focusSelectedTile();
                    });
                    flowItem.addEventListener("arcgisSmartMappingPanelsPredominanceBackClick", () => this.focusSelectedTile());
                    flowItem.addEventListener("arcgisSmartMappingPanelsPredominanceError", ({ detail }) => this.arcgisSmartMappingPanelsGalleryError.emit(detail));
                    flowNode.appendChild(flowItem);
                    break;
                }
                case "chart": {
                    const flowItem = document.createElement("arcgis-smart-mapping-panels-chart");
                    flowItem.addEventListener("arcgisSmartMappingPanelsChartClose", () => {
                        flowNode.removeChild(flowItem);
                        this.focusSelectedTile();
                    });
                    flowItem.addEventListener("arcgisSmartMappingPanelsChartBackClick", () => this.focusSelectedTile());
                    flowItem.addEventListener("arcgisSmartMappingPanelsChartError", ({ detail }) => this.arcgisSmartMappingPanelsGalleryError.emit(detail));
                    flowNode.appendChild(flowItem);
                    break;
                }
                case "relationship": {
                    const flowItem = document.createElement("arcgis-smart-mapping-panels-relationship");
                    flowItem.addEventListener("arcgisSmartMappingPanelsRelationshipClose", () => {
                        flowNode.removeChild(flowItem);
                        this.focusSelectedTile();
                    });
                    flowItem.addEventListener("arcgisSmartMappingPanelsRelationshipBackClick", () => this.focusSelectedTile());
                    flowItem.addEventListener("arcgisSmartMappingPanelsRelationshipError", ({ detail }) => this.arcgisSmartMappingPanelsGalleryError.emit(detail));
                    flowNode.appendChild(flowItem);
                    break;
                }
                case "dot-density": {
                    const flowItem = document.createElement("arcgis-smart-mapping-panels-dot-density");
                    flowItem.addEventListener("arcgisSmartMappingPanelsDotDensityClose", () => {
                        flowNode.removeChild(flowItem);
                        this.focusSelectedTile();
                    });
                    flowItem.addEventListener("arcgisSmartMappingPanelsDotDensityBackClick", () => this.focusSelectedTile());
                    flowItem.addEventListener("arcgisSmartMappingPanelsDotDensityError", ({ detail }) => this.arcgisSmartMappingPanelsGalleryError.emit(detail));
                    flowNode.appendChild(flowItem);
                    break;
                }
                case "color-size":
                case "color-age-size":
                case "color-size-age": {
                    if (selectedFields.length > 1) {
                        const flowItem = document.createElement("arcgis-smart-mapping-panels-color-size");
                        flowItem.addEventListener("arcgisSmartMappingPanelsColorSizeClose", () => {
                            flowNode.removeChild(flowItem);
                            this.focusSelectedTile();
                        });
                        flowItem.addEventListener("arcgisSmartMappingPanelsColorSizeBackClick", () => this.focusSelectedTile());
                        flowItem.addEventListener("arcgisSmartMappingPanelsColorSizeError", ({ detail }) => this.arcgisSmartMappingPanelsGalleryError.emit(detail));
                        flowNode.appendChild(flowItem);
                    }
                    else {
                        //selectedFields.length === 1
                        const flowItem = document.createElement("arcgis-smart-mapping-panels-color-size-univariate");
                        flowItem.addEventListener("arcgisSmartMappingPanelsColorSizeUnivariateClose", () => {
                            flowNode.removeChild(flowItem);
                            this.focusSelectedTile();
                        });
                        flowItem.addEventListener("arcgisSmartMappingPanelsColorSizeUnivariateBackClick", () => {
                            (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
                            this.focusSelectedTile();
                        });
                        flowItem.addEventListener("arcgisSmartMappingPanelsColorSizeUnivariateError", ({ detail }) => this.arcgisSmartMappingPanelsGalleryError.emit(detail));
                        flowNode.appendChild(flowItem);
                    }
                    break;
                }
                case "type-size":
                case "type-size-age": {
                    const flowItem = document.createElement("arcgis-smart-mapping-panels-type-size");
                    flowItem.addEventListener("arcgisSmartMappingPanelsTypeSizeClose", () => {
                        flowNode.removeChild(flowItem);
                        this.focusSelectedTile();
                    });
                    flowItem.addEventListener("arcgisSmartMappingPanelsTypeSizeBackClick", () => this.focusSelectedTile());
                    flowItem.addEventListener("arcgisSmartMappingPanelsTypeSizeError", ({ detail }) => this.arcgisSmartMappingPanelsGalleryError.emit(detail));
                    flowNode.appendChild(flowItem);
                    break;
                }
                case "predominance-size": {
                    const flowItem = document.createElement("arcgis-smart-mapping-panels-predominance-size");
                    flowItem.addEventListener("arcgisSmartMappingPanelsPredominanceSizeClose", () => {
                        flowNode.removeChild(flowItem);
                        this.focusSelectedTile();
                    });
                    flowItem.addEventListener("arcgisSmartMappingPanelsPredominanceSizeBackClick", () => this.focusSelectedTile());
                    flowItem.addEventListener("arcgisSmartMappingPanelsPredominanceSizeError", ({ detail }) => this.arcgisSmartMappingPanelsGalleryError.emit(detail));
                    flowNode.appendChild(flowItem);
                    break;
                }
                case "chart-size": {
                    const flowItem = document.createElement("arcgis-smart-mapping-panels-chart-size");
                    flowItem.addEventListener("arcgisSmartMappingPanelsChartSizeClose", () => {
                        flowNode.removeChild(flowItem);
                        this.focusSelectedTile();
                    });
                    flowItem.addEventListener("arcgisSmartMappingPanelsChartSizeBackClick", () => this.focusSelectedTile());
                    flowItem.addEventListener("arcgisSmartMappingPanelsChartSizeError", ({ detail }) => this.arcgisSmartMappingPanelsGalleryError.emit(detail));
                    flowNode.appendChild(flowItem);
                    break;
                }
                case "relationship-size": {
                    const flowItem = document.createElement("arcgis-smart-mapping-panels-relationship-size");
                    flowItem.addEventListener("arcgisSmartMappingPanelsRelationshipSizeClose", () => {
                        flowNode.removeChild(flowItem);
                        this.focusSelectedTile();
                    });
                    flowItem.addEventListener("arcgisSmartMappingPanelsRelationshipSizeBackClick", () => this.focusSelectedTile());
                    flowItem.addEventListener("arcgisSmartMappingPanelsRelationshipSizeError", ({ detail }) => this.arcgisSmartMappingPanelsGalleryError.emit(detail));
                    flowNode.appendChild(flowItem);
                    break;
                }
            }
        };
        this.handleDone = () => {
            // keep the current settings on the layer
            this.arcgisSmartMappingPanelsGalleryClose.emit("save");
        };
        this.handleCancel = () => {
            const { originalRendererJSON, originalFeatureReduction } = this;
            (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.j)(originalRendererJSON, originalFeatureReduction);
            this.arcgisSmartMappingPanelsGalleryClose.emit("cancel");
        };
        /*
         * Place panel in loading mode during renderer creation.
         */
        this.galleryRequestWrapper = (request) => {
            const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
            (0,_loading_69139907_js__WEBPACK_IMPORTED_MODULE_3__.r)(request, this.flowItemNode).then((result) => {
                const { layer, mapImageSublayer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
                (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.e)(result.renderer.clone(), layer);
                if (mapImageSublayer) {
                    mapImageSublayer.renderer = result.renderer;
                }
                (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
                this.checkCluster();
                this.checkClusterRenderer();
                this.focusSelectedTile();
            }, () => {
                this.arcgisSmartMappingPanelsGalleryError.emit({
                    message: strings.panels.gallery.errors.changeRendererErrorMsg,
                    type: "warning"
                });
            });
        };
        this.menuOpen = undefined;
        this.showBackButton = undefined;
        this.beforeBack = undefined;
    }
    //--------------------------------------------------------------------------
    //
    //  Public Methods
    //
    //--------------------------------------------------------------------------
    async setFocus() {
        var _a;
        (_a = this.flowItemNode) === null || _a === void 0 ? void 0 : _a.setFocus();
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    async componentWillLoad() {
        const { layer, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
        // save original renderer
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.h)(layer);
        this.originalRendererJSON = renderer.toJSON();
        this.originalFeatureReduction =
            "featureReduction" in layer && layer.featureReduction
                ? modules.esriLang.clone(layer.featureReduction)
                : undefined;
        this.flowNode = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.F)(this.hostElement, "calcite-flow");
    }
    componentDidLoad() {
        requestAnimationFrame(() => { var _a; return (_a = this.flowItemNode) === null || _a === void 0 ? void 0 : _a.setFocus(); });
    }
    //--------------------------------------------------------------------------
    //
    //  Render Methods
    //
    //--------------------------------------------------------------------------
    render() {
        var _a, _b, _c;
        const { layer, hideLayerTitle, isRTL, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
        let displayWarning = false;
        if ("featureReduction" in layer && ((_a = layer.featureReduction) === null || _a === void 0 ? void 0 : _a.type) === "cluster") {
            const featureReduction = layer.featureReduction;
            if (((_b = featureReduction.renderer) === null || _b === void 0 ? void 0 : _b.type) === "pie-chart" &&
                !((_c = featureReduction.renderer.authoringInfo) === null || _c === void 0 ? void 0 : _c.isAutoGenerated)) {
                displayWarning = true;
            }
        }
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.H, { class: "calcite-match-height" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-flow-item", { heading: strings.panels.gallery.styles, description: !hideLayerTitle ? layer.title : undefined, class: {
                "flow-item": true,
                [_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_6__.C.rtl]: isRTL
            }, closable: true, menuOpen: this.menuOpen, beforeBack: this.beforeBack,
            // @ts-ignore
            showBackButton: this.showBackButton, onCalciteFlowItemClose: this.handleDone, ref: (node) => (this.flowItemNode = node) }, displayWarning ? this.renderClusteringWarning() : this.renderGalleryContent())));
    }
    renderGalleryContent() {
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.F, null, this.renderDoneButton(), this.renderCancelButton(), this.renderStepOne(), this.renderStepTwo()));
    }
    renderClusteringWarning() {
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.F, null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-tip", { closeDisabled: true }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, strings.panels.gallery.chartClusterMsg))), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { slot: "footer", label: strings.done, onClick: this.handleCancel, appearance: "outline-fill", width: "full" }, strings.done)));
    }
    renderDoneButton() {
        const { layer, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
        if (!layer) {
            // loading state of panel doesn't position buttons correctly
            return null;
        }
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { slot: "footer", label: strings.done, onClick: this.handleDone, appearance: "solid", width: "half" }, strings.done));
    }
    renderCancelButton() {
        const { layer, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
        if (!layer) {
            // loading state of panel doesn't position buttons correctly
            return null;
        }
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { slot: "footer", label: strings.cancel, onClick: this.handleCancel, appearance: "outline-fill", width: "half" }, strings.cancel));
    }
    renderStepOne() {
        const { layer, selectedFields, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
        const fieldCount = selectedFields.length;
        const counts = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.C)();
        const hasStringField = counts.string > 0;
        const thirdIsExpr = fieldCount === 3 && selectedFields[2].expression;
        const thirdIsDate = fieldCount === 3 && selectedFields[2].simpleFieldType === _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.w.DATE;
        let fieldsSelection = selectedFields.map((__, idx) => this.renderAttribute(idx));
        const dragEnabled = fieldCount > 1 && !hasStringField && !thirdIsExpr && !thirdIsDate;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "attributes gallery-block" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "center" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { class: "number-icon", scale: "m", icon: "number-circle-1" })), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "attributes-header-text center" }, strings.panels.gallery.chooseAttributes)), !fieldCount && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "attributes-msg center" }, strings.panels.gallery.chooseAttributesMsg)), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-list", { class: fieldsSelection.length > 0 ? "attribute-list" : "", key: `gallery-attributes-selects-${selectedFields}`, dragEnabled: dragEnabled, onCalciteListOrderChange: this.handleListOrderChange }, fieldsSelection), layer && this.renderAddButtons(), layer && this.renderTip()));
    }
    renderAttribute(idx) {
        const { selectedFields, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
        const fieldID = selectedFields[idx].field || selectedFields[idx].expressionTitle;
        const isExpression = !!selectedFields[idx].expression;
        const field = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.u)(selectedFields[idx].field);
        const fieldLabel = field ? field.label : selectedFields[idx].expressionTitle;
        const fieldType = selectedFields[idx].simpleFieldType;
        const icon = !isExpression &&
            (fieldType === _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.w.NUMBER
                ? "number"
                : fieldType === _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.w.STRING
                    ? (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.z)(field === null || field === void 0 ? void 0 : field.layerField) === "date-only"
                        ? "calendar"
                        : "string"
                    : fieldType === _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.w.DATE
                        ? "date-time"
                        : null);
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-list-item", { key: `gallery-attribute-${idx}-${fieldID}`, label: fieldLabel, value: idx, onClick: (event) => event.target && this.handleListChange(idx), onKeyDown: (event) => {
                if (event.key === " ") {
                    event.preventDefault();
                    this.handleListChange(idx);
                }
            } }, icon && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "actions-end" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { scale: "s", icon: icon, class: "field-type" }))), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { key: `gallery-attribute-${idx}-${fieldID}-remove`, slot: "actions-end", text: isExpression
                ? strings.panels.gallery.removeExpression
                : strings.panels.gallery.removeField, label: isExpression
                ? strings.panels.gallery.removeExpression
                : strings.panels.gallery.removeField, onClick: (event) => {
                event.stopPropagation();
                this.handleRemoveAttribute(idx);
            }, onKeyDown: (event) => {
                if (event.key === "Enter" || event.key === " ") {
                    event.stopPropagation();
                    this.handleRemoveAttribute(idx);
                }
            } }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { scale: "s", icon: "x" }))));
    }
    renderTip() {
        var _a;
        const { selectedFields, portal, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
        if (selectedFields.length > 1) {
            return;
        }
        if ((!selectedFields.length &&
            (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.G)(_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.N.ARCGIS_COMPONENT_NOTIFICATIONS, _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.M.SMART_MAPPING_TIP1_DISMISSED)) ||
            (selectedFields.length === 1 &&
                (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.G)(_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.N.ARCGIS_COMPONENT_NOTIFICATIONS, _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.M.SMART_MAPPING_TIP2_DISMISSED))) {
            return null;
        }
        const pos = strings.panels.gallery.tip1.indexOf("${smartMappingLink}");
        const helpMap = ((_a = portal.helpMap) === null || _a === void 0 ? void 0 : _a.m) || portal.helpMap;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { key: "gallery-tip", class: "tip" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-input-message", { key: "gallery-tip-message", icon: "lightbulb", class: "tip-message" }, selectedFields.length === 0 && portal.helpBase && helpMap ? ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { key: "gallery-tip-text" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: "tip-text" }, strings.panels.gallery.tip1.substring(0, pos)), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-link", { target: "_blank", href: `${portal.helpBase}${helpMap["120003249"]}` }, strings.panels.gallery.tip1Link), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: "tip-text" }, strings.panels.gallery.tip1.substring(pos + 19)))) : selectedFields.length === 0 ? ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { key: "gallery-tip-text", class: "tip-text" }, strings.panels.gallery.tip1.replace("${smartMappingLink}", strings.panels.gallery.tip1Link), " ")) : ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { key: "gallery-tip-text", class: "tip-text" }, strings.panels.gallery.tip2))), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { scale: "s", label: strings.close, text: strings.close, onClick: () => {
                const { selectedFields } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
                if (!selectedFields.length) {
                    (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.H)(_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.N.ARCGIS_COMPONENT_NOTIFICATIONS, {
                        key: _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.M.SMART_MAPPING_TIP1_DISMISSED,
                        value: "true"
                    });
                }
                else {
                    (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.H)(_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.N.ARCGIS_COMPONENT_NOTIFICATIONS, {
                        key: _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.M.SMART_MAPPING_TIP2_DISMISSED,
                        value: "true"
                    });
                }
                (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
            } }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { scale: "s", icon: "x" }))));
    }
    renderAddButtons() {
        var _a, _b;
        const { layer, mapImageSublayer, selectedFields, strings, supportsArcade } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
        const fieldCount = selectedFields.length;
        const layerCounts = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.I)();
        const counts = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.C)();
        const hasStringField = counts.string > 0;
        const hasDateField = counts.date > 0;
        const hasExpression = counts.expression > 0;
        const supportsSqlExpression = (_b = (_a = layer.capabilities) === null || _a === void 0 ? void 0 : _a.query) === null || _b === void 0 ? void 0 : _b.supportsSqlExpression;
        // do we have renderer styles for more fields?
        let enableAddField = !(mapImageSublayer && !supportsArcade && fieldCount === 1) &&
            fieldCount < 10 &&
            !(fieldCount === 2 && (hasStringField || hasExpression)) &&
            !(mapImageSublayer && fieldCount === 2 && hasDateField) &&
            !(fieldCount === 3 &&
                (hasDateField || selectedFields[2].expression || !supportsSqlExpression));
        // do we have more layer fields?
        enableAddField =
            enableAddField &&
                ((counts.string === 1 &&
                    counts.number + counts.date === 0 &&
                    layerCounts.number + layerCounts.date > 0) ||
                    (counts.string === 0 &&
                        counts.date < 2 &&
                        counts.number + counts.date < 3 &&
                        counts.string + counts.number + counts.date <
                            layerCounts.string + layerCounts.number + layerCounts.date) ||
                    (counts.number >= 2 && counts.number < layerCounts.number));
        const enableAddExpression = (!mapImageSublayer || supportsArcade) &&
            (fieldCount < 2 ||
                (fieldCount === 2 &&
                    !hasExpression &&
                    selectedFields[0].simpleFieldType === _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.w.NUMBER &&
                    selectedFields[1].simpleFieldType === _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.w.NUMBER));
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "add-button-div" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "add-buttons" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { disabled: !enableAddField, onClick: () => this.openFieldPickList(), appearance: "outline-fill", kind: "neutral", width: "full", label: strings.panels.gallery.addField, iconStart: "plus", class: "attributes-add-new", ref: (node) => (this.addFieldButtonNode = node) }, strings.panels.gallery.field), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", null, "\u00A0\u00A0"), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { disabled: !enableAddExpression, onClick: this.addExpression, appearance: "outline-fill", kind: "neutral", width: "full", label: strings.panels.gallery.addExpression, iconStart: "plus", class: "attributes-add-new", ref: (node) => (this.addExpressionButtonNode = node) }, strings.expression))));
    }
    renderStepTwo() {
        const { selectedFields, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
        const allowedList = getAllowedStyles();
        const orderedList = getOrderForRendererType();
        const msg = !(selectedFields === null || selectedFields === void 0 ? void 0 : selectedFields.length)
            ? strings.panels.gallery.styleMsg.empty
            : selectedFields.length === 1 &&
                selectedFields[0].field &&
                selectedFields[0].simpleFieldType === _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.w.NUMBER
                ? strings.panels.gallery.styleMsg.oneNumber
                : selectedFields.length === 2 &&
                    selectedFields[0].field &&
                    selectedFields[1].field &&
                    selectedFields[0].simpleFieldType === _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.w.NUMBER &&
                    selectedFields[1].simpleFieldType === _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.w.NUMBER
                    ? strings.panels.gallery.styleMsg.multipleNumber
                    : strings.panels.gallery.styleMsg.any;
        //console.log(getRendererType(), allowedList, orderedList);
        allowedList.sort((a, b) => {
            return orderedList.indexOf(a) - orderedList.indexOf(b);
        });
        const styleTiles = allowedList.map((style, idx) => this.renderStyleTile(style, idx));
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "gallery-block" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "attributes-header" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "center" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { class: "number-icon", scale: "m", icon: "number-circle-2" })), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "styles-msg-title center" }, strings.panels.gallery.pickStyle), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "styles-msg center" }, msg)), styleTiles));
    }
    renderStyleTile(type, idx) {
        const rendererType = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.g)();
        const theme = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.J)();
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-tile", { key: `tile-${type}-${theme}`, tileType: "gallery", type: type, selected: type === rendererType, ref: (node) => {
                /* Workaround for null-related ref issue: https://github.com/ionic-team/stencil/issues/3253
                All "if (node)" checks in arcgis-smart-mapping are workarounds for this same issue! */
                if (node) {
                    this.tileNodes[idx] = node;
                }
            }, onArcgisSmartMappingTileSelect: () => this.handleSelectClick(type), onArcgisSmartMappingTileOptions: () => this.handleOptionsClick(type), onArcgisSmartMappingTileError: (event) => this.arcgisSmartMappingPanelsGalleryError.emit(event.detail) }));
    }
    //--------------------------------------------------------------------------
    //
    //  Private methods
    //
    //--------------------------------------------------------------------------
    addField(fieldNames) {
        const { selectedFields, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.K)(fieldNames);
        const newSelectedFields = modules.esriLang.clone(selectedFields);
        fieldNames.forEach((fieldName) => {
            const fieldInfo = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.u)(fieldName);
            if (fieldInfo.simpleFieldType === _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.w.STRING) {
                // add in front for 'Type & Size'
                newSelectedFields.unshift({
                    field: fieldName,
                    simpleFieldType: _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.w.STRING
                });
            }
            else {
                newSelectedFields.push({
                    field: fieldName,
                    simpleFieldType: fieldInfo.simpleFieldType
                });
            }
        });
        if (newSelectedFields.length === 3) {
            for (let i = 0; i < 3; i++) {
                const fieldInfo = newSelectedFields[i];
                if (fieldInfo.simpleFieldType === _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.w.DATE && i !== 2) {
                    // move to end for 'Relationship & Size'
                    newSelectedFields.splice(i, 1);
                    newSelectedFields.splice(2, 0, fieldInfo);
                    break;
                }
            }
        }
        if (!(0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.v)(selectedFields, newSelectedFields)) {
            _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s.selectedFields = newSelectedFields;
            createNewRendererWithDelay(this.galleryRequestWrapper);
        }
    }
    editAttribute(fieldNames, editIdx) {
        const { selectedFields, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.K)(fieldNames);
        const oldSelectedFields = modules.esriLang.clone(selectedFields);
        fieldNames.forEach((fieldName) => {
            const fieldInfo = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.u)(fieldName);
            if (fieldInfo.simpleFieldType === "string") {
                // add in front
                selectedFields.splice(editIdx, 1);
                selectedFields.unshift({
                    field: fieldName,
                    simpleFieldType: _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.w.STRING
                });
            }
            else {
                selectedFields[editIdx] = {
                    field: fieldName,
                    simpleFieldType: fieldInfo.simpleFieldType
                };
            }
        });
        if (!(0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.v)(selectedFields, oldSelectedFields)) {
            _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s.selectedFields = selectedFields;
            createNewRendererWithDelay(this.galleryRequestWrapper);
        }
    }
    checkCluster() {
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
        "featureReduction" in layer &&
            layer.featureReduction &&
            this.arcgisSmartMappingPanelsGalleryClusterRequiresUpdate.emit();
    }
    checkClusterRenderer() {
        var _a;
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
        if ("featureReduction" in layer && ((_a = layer.featureReduction) === null || _a === void 0 ? void 0 : _a.type) === "cluster") {
            const cluster = layer.featureReduction;
            // recreate default renderer
            cluster.renderer = null;
            layer.featureReduction = cluster.clone();
        }
    }
    openFieldPickList(singleEditMode = false, editIndex = null) {
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.E)();
        const { fields, selectedFields } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
        let selectedFieldNames = selectedFields.map((field) => field.field);
        let fieldsForPickList;
        fieldsForPickList = fields.filter((field) => {
            // remove currently selected fields and if single edit mode
            let include = !selectedFieldNames.includes(field.layerField.name);
            if (singleEditMode) {
                include = include || field.layerField.name === selectedFieldNames[editIndex];
            }
            return include;
        });
        const fieldPickList = document.createElement("arcgis-smart-mapping-field-pick-list");
        fieldPickList.fields = fieldsForPickList;
        fieldPickList.popoverProps = {
            refElement: this.flowItemNode,
            placement: "leading",
            offsetDistance: 0,
            popoverWidth: this.flowItemNode.getBoundingClientRect().width * 1.05,
            overlayPositioning: "absolute",
            flipDisabled: false,
            triggerDisabled: true
        };
        fieldPickList.singleEditMode = singleEditMode;
        fieldPickList.fieldToReplace = singleEditMode ? selectedFields[editIndex] : null;
        fieldPickList.lastSortBy = this.lastSortBy;
        document.body.appendChild(fieldPickList);
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.L)(this.flowItemNode, true);
        fieldPickList.addEventListener("arcgisSmartMappingFieldPickListClose", (event) => {
            var _a;
            this.modifyFieldPickList = true;
            document.body.removeChild(fieldPickList);
            (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.L)(this.flowItemNode, false);
            if ((_a = event.detail) === null || _a === void 0 ? void 0 : _a.selectedFields) {
                if (singleEditMode) {
                    this.editAttribute(event.detail.selectedFields, editIndex);
                }
                else {
                    this.addField(event.detail.selectedFields);
                }
            }
            this.addFieldButtonNode.setFocus();
        });
        fieldPickList.addEventListener("arcgisSmartMappingFieldPickListSortByChange", (event) => {
            this.lastSortBy = event.detail;
        });
    }
    focusSelectedTile() {
        setTimeout(() => requestAnimationFrame(() => { var _a; return (_a = this.tileNodes[0]) === null || _a === void 0 ? void 0 : _a.setFocus(); }), 300);
    }
    get hostElement() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisSmartMappingPanelsGallery.style = arcgisSmartMappingPanelsGalleryCss;



//# sourceMappingURL=arcgis-smart-mapping-panels-gallery.entry.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/compare-ba1292fe.js":
/*!*************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/compare-ba1292fe.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ createCompareRendererFromExisting),
/* harmony export */   c: () => (/* binding */ createCompareRenderer)
/* harmony export */ });
/* harmony import */ var _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./raster-unique-value-0976ec7f.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/raster-unique-value-0976ec7f.js");
/* harmony import */ var _loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./loadModules-b4ac1247.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-b4ac1247.js");
/* harmony import */ var _commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./commonFunctions-b0830e9e.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/commonFunctions-b0830e9e.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */




/**
 * Updates the layer with a Compare renderer with default settings
 * @param props: must contain layer, mapView, field
 * @param options: options
 */
function createCompareRenderer(options) {
    var _a;
    const { layer: smLayer, mapImageSublayer, mapView, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    const layer = smLayer;
    options = options || {};
    const extras = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.m)((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer));
    return modules.ColorCreator.createContinuousRenderer({
        layer,
        view: mapView,
        field: options.fieldInfos[0].field,
        theme: "above-and-below",
        colorScheme: (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.P)("above-and-below"),
        normalizationField: options.fieldInfos[1].field,
        outlineOptimizationEnabled: mapImageSublayer
            ? false
            : (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_2__.i)(options.outlineOptimizationEnabled)
                ? options.outlineOptimizationEnabled
                : (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.q)(layer),
        sizeOptimizationEnabled: mapImageSublayer
            ? false
            : (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_2__.i)(options.sizeOptimizationEnabled)
                ? options.sizeOptimizationEnabled
                : true,
        legendOptions: options.legendOptions,
        defaultSymbolEnabled: false,
        forBinning: ((_a = layer.featureReduction) === null || _a === void 0 ? void 0 : _a.type) === "binning"
    }).then((result) => {
        const colorAuthVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.p)(result.renderer, "color") || {};
        colorAuthVisVar.style = "ratio"; // "ratio", "percent", "percent-of-total"
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.l)(extras, result.renderer);
        return Promise.resolve(result);
    }, (error) => Promise.reject(error));
}
/**
 * Creates a Compare renderer with settings from current renderer
 * @param props: only contains properties that need to be overwritten
 */
function createCompareRendererFromExisting(options) {
    var _a, _b, _c, _d;
    const { layer: smLayer, mapImageSublayer, mapView, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    const layer = smLayer;
    options = options || {};
    const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer);
    const colorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a)(renderer, "color");
    if (colorVisVar &&
        options.fieldInfo &&
        options.fieldInfo.field == colorVisVar.field &&
        options.normalizationField === colorVisVar.normalizationField) {
        // no changes to fields
        delete options.fieldInfos;
        if ((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.R)(options)) {
            // nothing really changes
            return Promise.resolve({ renderer: renderer.clone() });
        }
    }
    const authColorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.p)(renderer, "color");
    const extras = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.m)(renderer);
    let fieldInfo = options.fieldInfos
        ? options.fieldInfos[0]
        : colorVisVar
            ? {
                field: colorVisVar.field,
                expression: colorVisVar.valueExpression,
                expressionTitle: colorVisVar.valueExpressionTitle,
                simpleFieldType: _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.w.NUMBER
            }
            : {
                field: renderer.field,
                expression: renderer.valueExpression,
                expressionTitle: renderer.valueExpressionTitle,
                simpleFieldType: _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.w.NUMBER
            };
    const normalizationField = options.normalizationField
        ? options.normalizationField
        : colorVisVar
            ? colorVisVar.normalizationField
            : renderer.normalizationField;
    const symbol = renderer.classBreakInfos && renderer.classBreakInfos.length ? renderer.classBreakInfos[0].symbol : null;
    const defaultSymbol = renderer.defaultSymbol;
    const defaultLabel = renderer.defaultLabel;
    let needNewStatistics = false;
    if (options.normalizationField === null || options.normalizationField || options.fieldInfo) {
        needNewStatistics = true;
    }
    const minValue = options.discardMinMax
        ? undefined
        : (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_2__.i)(options.min)
            ? options.min
            : needNewStatistics
                ? undefined
                : authColorVisVar
                    ? authColorVisVar.minSliderValue
                    : renderer.classBreakInfos[0].minValue;
    const maxValue = options.discardMinMax
        ? undefined
        : (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_2__.i)(options.max)
            ? options.max
            : needNewStatistics
                ? undefined
                : authColorVisVar
                    ? authColorVisVar.maxSliderValue
                    : renderer.classBreakInfos[renderer.classBreakInfos.length - 1].maxValue;
    return modules.ColorCreator.createContinuousRenderer({
        layer,
        view: mapView,
        field: fieldInfo ? fieldInfo.field : renderer.field,
        theme: "above-and-below",
        colorScheme: (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.P)("above-and-below"),
        normalizationField,
        minValue,
        maxValue,
        outlineOptimizationEnabled: mapImageSublayer
            ? false
            : (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_2__.i)(options.outlineOptimizationEnabled)
                ? options.outlineOptimizationEnabled
                : !!extras.sizeOutlineVisVar,
        sizeOptimizationEnabled: mapImageSublayer
            ? false
            : (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_2__.i)(options.sizeOptimizationEnabled)
                ? options.sizeOptimizationEnabled
                : !!extras.sizeAutoVisVar,
        legendOptions: ((_a = options.legendOptions) === null || _a === void 0 ? void 0 : _a.toJSON()) ||
            ((_b = colorVisVar === null || colorVisVar === void 0 ? void 0 : colorVisVar.legendOptions) === null || _b === void 0 ? void 0 : _b.toJSON()) ||
            ((_c = renderer.legendOptions) === null || _c === void 0 ? void 0 : _c.toJSON()),
        defaultSymbolEnabled: (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_2__.i)(options.defaultSymbolEnabled)
            ? options.defaultSymbolEnabled
            : !!renderer.defaultSymbol,
        forBinning: ((_d = layer.featureReduction) === null || _d === void 0 ? void 0 : _d.type) === "binning"
    }).then((result) => {
        // reset handles if necessary
        if (options.discardMinMax) {
            const colorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a)(renderer, "color");
            const newColorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a)(result.renderer, "color");
            colorVisVar.stops.forEach((stop, idx) => (stop.value = newColorVisVar.stops[idx].value));
        }
        const colorAuthVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.p)(result.renderer, "color") || {};
        colorAuthVisVar.style = "ratio";
        //console.log("createContinuousRenderer", result);
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.l)(extras, result.renderer);
        if (symbol && result.renderer.classBreakInfos && result.renderer.classBreakInfos.length) {
            result.renderer.classBreakInfos[0].symbol = symbol;
        }
        if (defaultSymbol) {
            result.renderer.defaultSymbol = defaultSymbol;
            result.renderer.defaultLabel = defaultLabel;
        }
        return Promise.resolve(result);
    }, (error) => Promise.reject(error));
}



//# sourceMappingURL=compare-ba1292fe.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/heatmap-75ffd452.js":
/*!*************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/heatmap-75ffd452.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ updateWithHeatmapStatistics),
/* harmony export */   c: () => (/* binding */ createHeatmapRenderer),
/* harmony export */   u: () => (/* binding */ updateHeatmapRendererwithFade)
/* harmony export */ });
/* harmony import */ var _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./raster-unique-value-0976ec7f.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/raster-unique-value-0976ec7f.js");
/* harmony import */ var _loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./loadModules-b4ac1247.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-b4ac1247.js");
/* harmony import */ var _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./commonEnums-fcf13661.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/commonEnums-fcf13661.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */




/**
 * Updates the layer with a Heatmap renderer with default settings
 * @param props: must contain layer, mapView, GalleryFields[]
 * @param options: options
 */
function createHeatmapRenderer(options) {
    var _a;
    const { layer: smLayer, mapView, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    const layer = smLayer;
    const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer);
    const rendererType = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.g)();
    options = options || {};
    if (rendererType === "heatmap") {
        options.radius = options.radius || renderer.radius;
        options.heatmapScheme = options.heatmapScheme || (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.V)();
    }
    if ((_a = options.fieldInfos) === null || _a === void 0 ? void 0 : _a.length) {
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.O)([options.fieldInfos[0].field]);
    }
    return modules.HeatmapCreator.createRenderer({
        layer,
        view: mapView,
        field: options.fieldInfos && options.fieldInfos.length ? options.fieldInfos[0].field : null,
        radius: options.radius || 10,
        heatmapScheme: options.heatmapScheme || undefined
    });
}
/**
 * Updates the Heatmap renderer with a new fadeRatio
 * @param props: must contain layer, mapView, GalleryFields[]
 * @param fadeRatio: new value
 */
function updateHeatmapRendererwithFade(fadeRatio) {
    const { layer, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer);
    return modules.HeatmapCreator.updateRenderer({
        renderer,
        fadeRatio
    });
}
/**
 * Updates the layer with a new radius
 * @param props: must contain layer, mapView, GalleryFields[]
 * @param options: options
 */
function updateWithHeatmapStatistics(options) {
    const { layer: smLayer, mapView, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    const layer = smLayer;
    const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer);
    options = options || {};
    // workaround for: This expression is not callable. Type 'heatmapStatistics' has no call signatures.ts(2349)
    //const _heatmapStatistics: any = modules.heatmapStatistics;
    return modules
        .heatmapStatistics({
        layer,
        view: mapView,
        field: renderer.field,
        radius: options.radius || renderer.radius || 10
    })
        .then((statistics) => {
        renderer.minDensity = statistics.min;
        renderer.maxDensity = statistics.max;
        return Promise.resolve(statistics);
    }, (error) => Promise.reject(error));
}



//# sourceMappingURL=heatmap-75ffd452.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/location-e26b539f.js":
/*!**************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/location-e26b539f.js ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ buildOutlineVisVar),
/* harmony export */   b: () => (/* binding */ buildSizeAutoVisVar),
/* harmony export */   c: () => (/* binding */ createSimpleRenderer)
/* harmony export */ });
/* harmony import */ var _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./raster-unique-value-0976ec7f.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/raster-unique-value-0976ec7f.js");
/* harmony import */ var _loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./loadModules-b4ac1247.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-b4ac1247.js");
/* harmony import */ var _commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./commonFunctions-b0830e9e.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/commonFunctions-b0830e9e.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */




/**
 * Updates the layer with a Simple renderer with default settings
 * @param options: options
 */
function createSimpleRenderer(options) {
    var _a;
    const { layer: smLayer, mapImageSublayer, mapView, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    const layer = smLayer;
    options = options || {};
    const extras = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.m)((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer));
    return modules.LocationCreator.createRenderer({
        layer,
        view: mapView,
        outlineOptimizationEnabled: mapImageSublayer
            ? false
            : (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_2__.i)(options.outlineOptimizationEnabled)
                ? options.outlineOptimizationEnabled
                : true,
        sizeOptimizationEnabled: mapImageSublayer
            ? false
            : (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_2__.i)(options.sizeOptimizationEnabled)
                ? options.sizeOptimizationEnabled
                : true,
        forBinning: ((_a = layer.featureReduction) === null || _a === void 0 ? void 0 : _a.type) === "binning"
    }).then((result) => {
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.l)(extras, result.renderer);
        return Promise.resolve(result);
    }, (error) => Promise.reject(error));
}
function buildOutlineVisVar() {
    var _a;
    // TODO - can we just get the visualVariable without a full renderer?
    const { layer: smLayer, mapView, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    const layer = smLayer;
    return modules.LocationCreator.createRenderer({
        layer,
        view: mapView,
        outlineOptimizationEnabled: true,
        forBinning: ((_a = layer.featureReduction) === null || _a === void 0 ? void 0 : _a.type) === "binning"
    }).then((result) => {
        const sizeOutlineVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a)(result.renderer, "size", "outline");
        return Promise.resolve(sizeOutlineVisVar);
    });
}
function buildSizeAutoVisVar() {
    var _a;
    const { layer: smLayer, mapView, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    const layer = smLayer;
    return modules.LocationCreator.createRenderer({
        layer,
        view: mapView,
        outlineOptimizationEnabled: false,
        sizeOptimizationEnabled: true,
        forBinning: ((_a = layer.featureReduction) === null || _a === void 0 ? void 0 : _a.type) === "binning"
    }).then((result) => {
        const sizeAutoVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a)(result.renderer, "size", "auto");
        return Promise.resolve(sizeAutoVisVar);
    });
}



//# sourceMappingURL=location-e26b539f.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,