"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_featur-c46c25"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/feature-1ce1b984.js":
/*!*************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/feature-1ce1b984.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   u: () => (/* binding */ useArcadeEditor)
/* harmony export */ });
/* harmony import */ var _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./raster-unique-value-0976ec7f.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/raster-unique-value-0976ec7f.js");
/* harmony import */ var _loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./loadModules-b4ac1247.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-b4ac1247.js");
/* harmony import */ var _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./commonEnums-fcf13661.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/commonEnums-fcf13661.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */




/**
 * Creates Arcade Editor
 */
async function useArcadeEditor(fieldInfo) {
    const { layer: smLayer, strings, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    const layer = smLayer;
    const defaultExpressionScript = "// " +
        strings.arcade.defaultExpressionScript_line1 +
        "\r\n// " +
        strings.arcade.defaultExpressionScript_line2 +
        "\r\n// Round(($feature.oak_count / $feature.all_trees_count) * 100, 2)\r\n\r\n";
    const arcadeEditor = document.createElement("arcgis-modal-arcade");
    arcadeEditor.arcadeScript = (fieldInfo === null || fieldInfo === void 0 ? void 0 : fieldInfo.expression) || defaultExpressionScript;
    arcadeEditor.arcadeProfile = getArcadeProfile();
    arcadeEditor.testData = await getArcadeTestData();
    arcadeEditor.addExistingExpressions = true;
    arcadeEditor.layer = layer; // StreamLayer is missing
    arcadeEditor.arcadeTitle = (fieldInfo === null || fieldInfo === void 0 ? void 0 : fieldInfo.expressionTitle) || strings.arcade.newExpression;
    arcadeEditor.arcadeTitleEditable = true;
    arcadeEditor.arcadeTitleEditingEnabled = !(fieldInfo === null || fieldInfo === void 0 ? void 0 : fieldInfo.expressionTitle);
    document.body.appendChild(arcadeEditor);
    return new Promise((resolve, reject) => {
        arcadeEditor.addEventListener("arcgisModalArcadeClose", (event) => {
            //console.log("arcgisModalArcadeClose", event.detail);
            document.body.removeChild(arcadeEditor);
            if (!event.detail) {
                reject();
                return;
            }
            const { script, title, predictOutputType } = event.detail;
            if (!script || script === defaultExpressionScript) {
                reject();
                return;
            }
            // make sure layer gets needed fields; WFSLayer is missing
            return modules.fieldUtils.getExpressionFields(layer, [script]).then((outFields) => {
                (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.O)(outFields);
                resolve({
                    expression: script,
                    expressionTitle: title,
                    simpleFieldType: predictOutputType === "number"
                        ? _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.w.NUMBER
                        : predictOutputType === "string"
                            ? _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.w.STRING
                            : predictOutputType === "date"
                                ? _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.w.NUMBER // DATE - not supported
                                : _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.w.UNKNOWN
                });
            });
        });
    });
}
function getArcadeProfile() {
    const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    return {
        id: "visualization",
        definitions: {
            /**
             * Note: there are no current official plans to support Arcade
             * for Oriented Imagery layers, even though this button is
             * shown and functions properly
             */
            $feature: layer
        }
    };
}
async function getArcadeTestData() {
    const { mapView } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    return {
        profileVariableInstances: {
            $feature: await getOneArcadeFeature(),
            $view: {
                scale: mapView.scale
            }
        },
        spatialReference: mapView.spatialReference
    };
}
async function getOneArcadeFeature() {
    var _a;
    const { layer, mapView, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    let feature;
    if (!("fields" in layer)) {
        return null;
    }
    else {
        await getOneFeature();
        const { oneFeatureResponse } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
        if ((_a = oneFeatureResponse === null || oneFeatureResponse === void 0 ? void 0 : oneFeatureResponse.features) === null || _a === void 0 ? void 0 : _a.length) {
            feature = modules.esriLang.clone(oneFeatureResponse.features[0]);
        }
        else {
            // we need to create a feature
            const attributes = {};
            layer.fields.forEach((field) => {
                if ([
                    "small-integer",
                    "big-integer",
                    "integer",
                    "single",
                    "double",
                    "string",
                    "date",
                    "date-only",
                    "oid",
                    "guid"
                ].indexOf(field.type) > -1) {
                    if (field.nullable === false) {
                        if (field.defaultValue) {
                            attributes[field.name] = field.defaultValue;
                        }
                        else if (field.type === "string") {
                            attributes[field.name] = "";
                        }
                        else {
                            attributes[field.name] = 0;
                        }
                    }
                    else {
                        attributes[field.name] = null;
                    }
                }
                else {
                    attributes[field.name] = null;
                }
            });
            // make up some geometry using the map extent
            const ext = mapView.extent;
            let geometry, symbol;
            if ((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.q)(layer) /* || layer.getCustomRasterFields */) {
                geometry = new modules.Polygon({
                    spatialReference: new modules.SpatialReference(mapView.spatialReference.toJSON())
                });
                geometry.addRing([
                    [ext.xmin, ext.ymin],
                    [ext.xmax, ext.ymin],
                    [ext.xmax, ext.ymax],
                    [ext.xmin, ext.ymax],
                    [ext.xmin, ext.ymin]
                ]);
                symbol = new modules.SimpleLineSymbol();
            }
            else if ((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.A)(layer)) {
                geometry = new modules.Point(ext.center.toJSON());
                symbol = new modules.SimpleMarkerSymbol();
            }
            else if ((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.B)(layer)) {
                geometry = new modules.Polyline({
                    spatialReference: new modules.SpatialReference(mapView.spatialReference.toJSON())
                });
                geometry.addPath([
                    [ext.xmin, ext.ymin],
                    [ext.xmax, ext.ymax]
                ]);
                symbol = new modules.SimpleFillSymbol();
            }
            feature = new modules.Graphic({
                geometry,
                symbol: symbol,
                attributes
            });
        }
    }
    return feature;
}

async function getOneFeature() {
    const { oneFeatureResponse, oneFeatureResponseStatus } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    if (!oneFeatureResponse || oneFeatureResponseStatus === _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.b.MISSING) {
        const result = await _getOneFeature();
        _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s.oneFeatureResponse = (result === null || result === void 0 ? void 0 : result.features.length) && result;
        _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s.oneFeatureResponseStatus = (result === null || result === void 0 ? void 0 : result.features.length) ? _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.b.SUCCESS : _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.b.FAILED;
        return result;
    }
    else {
        return _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s.oneFeatureResponse;
    }
}
function _getOneFeature() {
    const { mapView, layer, mapImageSublayer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    if (!("fields" in layer)) {
        return Promise.reject("getOneFeature: wrong layer type");
    }
    if (mapImageSublayer) {
        // layer is not in the map, get feature from service
        return queryOneFeature();
    }
    return mapView.whenLayerView(layer).then((layerView) => {
        if ((layer.type === "feature" && !layer.url) || layer.type === "wfs") {
            // feature collection or wfs
            const query = layer.createQuery();
            query.start = 0;
            query.num = 5;
            query.outFields = ["*"];
            return layer.queryFeatures(query).then((result) => {
                if (result.features && result.features.length) {
                    return Promise.resolve(result);
                }
                else {
                    return Promise.resolve(createOneFeature());
                }
            });
        }
        else {
            // service
            const hasM = "hasM" in layer && layer.hasM;
            const hasZ = "hasZ" in layer && layer.hasZ;
            const hasAllFields = layerView.availableFields.length === layer.fields.length && !hasM && !hasZ;
            if ("createQuery" in layer && hasAllFields) {
                // || (["stream", "ogc-feature"].indexOf(layer.type) > -1 && layerView.availableFields.length > 0)
                // features on client have all fields
                const query = layer.createQuery();
                query.start = 0;
                query.num = 5;
                query.outFields = ["*"];
                return layerView.queryFeatures(query).then((result) => {
                    if (result.features && result.features.length) {
                        // client side features
                        return Promise.resolve(result);
                    }
                    else {
                        // get feature from service
                        return queryOneFeature();
                    }
                });
            }
            else {
                // get feature from service
                return queryOneFeature();
            }
        }
    });
}
function queryOneFeature() {
    var _a, _b;
    const { layer, mapView, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    /*
    // could maybe use layer.queryFeatures(query) instead???
    const queryTask = new QueryTask({ url: layer.url + "/" + layer.layerId });
    const query = new Query();
    query.where = "1=1";
    if (layer.sourceJSON?.advancedQueryCapabilities?.supportsPagination) {
      query.num = 1;
    }
    query.outFields = ["*"];
    query.outSpatialReference = mapView.spatialReference;
    query.returnGeometry = true;
    return queryTask.execute(query).then(
      (result: FeatureSet) => Promise.resolve(result),
      (error: Error) => {
        return Promise.resolve(createOneFeature());
      }
    );
    */
    if (!("queryFeatures" in layer)) {
        return Promise.resolve(createOneFeature());
    }
    const query = new modules.Query({
        outFields: ["*"],
        where: "1=1",
        outSpatialReference: mapView.spatialReference,
        returnGeometry: true,
        returnM: "hasM" in layer && layer.hasM,
        returnZ: "hasZ" in layer && layer.hasZ
    });
    if ("sourceJSON" in layer && ((_b = (_a = layer.sourceJSON) === null || _a === void 0 ? void 0 : _a.advancedQueryCapabilities) === null || _b === void 0 ? void 0 : _b.supportsPagination)) {
        query.num = 1;
    }
    return layer.queryFeatures(query).then((result) => Promise.resolve(result), () => {
        return Promise.resolve(createOneFeature());
    });
}
function createOneFeature() {
    const { layer, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    const attributes = {};
    if ("fields" in layer) {
        layer.fields.forEach((field) => {
            if (field.defaultValue) {
                attributes[field.name] = field.defaultValue;
            }
            else {
                if (["small-integer", "big-integer", "integer", "single", "double", "long", "date", "oid"].indexOf(field.type) > -1) {
                    attributes[field.name] = 0;
                }
                else if (field.type === "date-only") {
                    attributes[field.name] = null;
                }
                else {
                    attributes[field.name] = "";
                }
            }
        });
    }
    const graphic = new modules.Graphic({
        geometry: undefined,
        symbol: undefined,
        attributes: attributes
    });
    const featureSet = new modules.FeatureSet({
        features: [graphic],
        fields: [],
        geometryType: (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.D)(layer),
        spatialReference: "spatialReference" in layer && layer.spatialReference.clone()
    });
    return featureSet;
}



//# sourceMappingURL=feature-1ce1b984.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,