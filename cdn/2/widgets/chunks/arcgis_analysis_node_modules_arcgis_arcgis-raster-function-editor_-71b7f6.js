"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_arcgis-raster-function-editor_-71b7f6"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/common-strings.it-efba6f9b.js":
/*!**************************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/common-strings.it-efba6f9b.js ***!
  \**************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   addRaster: () => (/* binding */ addRaster),
/* harmony export */   addScalar: () => (/* binding */ addScalar),
/* harmony export */   breadcrumb: () => (/* binding */ breadcrumb),
/* harmony export */   breadcrumbEditor: () => (/* binding */ breadcrumbEditor),
/* harmony export */   cancel: () => (/* binding */ cancel),
/* harmony export */   category: () => (/* binding */ category),
/* harmony export */   categoryNames: () => (/* binding */ categoryNames),
/* harmony export */   close: () => (/* binding */ close),
/* harmony export */   copy: () => (/* binding */ copy),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   defaultModelName: () => (/* binding */ defaultModelName),
/* harmony export */   definitionQuery: () => (/* binding */ definitionQuery),
/* harmony export */   description: () => (/* binding */ description),
/* harmony export */   deselectFunction: () => (/* binding */ deselectFunction),
/* harmony export */   details: () => (/* binding */ details),
/* harmony export */   dialogTitle: () => (/* binding */ dialogTitle),
/* harmony export */   dontSave: () => (/* binding */ dontSave),
/* harmony export */   enterFURL: () => (/* binding */ enterFURL),
/* harmony export */   enterURL: () => (/* binding */ enterURL),
/* harmony export */   error: () => (/* binding */ error),
/* harmony export */   errorTitle: () => (/* binding */ errorTitle),
/* harmony export */   everyone: () => (/* binding */ everyone),
/* harmony export */   f32PixelType: () => (/* binding */ f32PixelType),
/* harmony export */   f64PixelType: () => (/* binding */ f64PixelType),
/* harmony export */   failedToLoadLayer: () => (/* binding */ failedToLoadLayer),
/* harmony export */   folder: () => (/* binding */ folder),
/* harmony export */   general: () => (/* binding */ general),
/* harmony export */   groupFieldName: () => (/* binding */ groupFieldName),
/* harmony export */   groupItemsBy: () => (/* binding */ groupItemsBy),
/* harmony export */   groups: () => (/* binding */ groups),
/* harmony export */   invalidRFTMessage: () => (/* binding */ invalidRFTMessage),
/* harmony export */   isDataset: () => (/* binding */ isDataset),
/* harmony export */   isPublic: () => (/* binding */ isPublic),
/* harmony export */   item: () => (/* binding */ item),
/* harmony export */   itemGroup: () => (/* binding */ itemGroup),
/* harmony export */   loadingLayer: () => (/* binding */ loadingLayer),
/* harmony export */   matchVariables: () => (/* binding */ matchVariables),
/* harmony export */   mosaic: () => (/* binding */ mosaic),
/* harmony export */   multidimensionalRules: () => (/* binding */ multidimensionalRules),
/* harmony export */   name: () => (/* binding */ name),
/* harmony export */   noTagErrorMsg: () => (/* binding */ noTagErrorMsg),
/* harmony export */   noTitleErrorMsg: () => (/* binding */ noTitleErrorMsg),
/* harmony export */   noTitleTagErrorMsg: () => (/* binding */ noTitleTagErrorMsg),
/* harmony export */   ok: () => (/* binding */ ok),
/* harmony export */   organization: () => (/* binding */ organization),
/* harmony export */   outputPixelType: () => (/* binding */ outputPixelType),
/* harmony export */   owner: () => (/* binding */ owner),
/* harmony export */   parameter: () => (/* binding */ parameter),
/* harmony export */   parameters: () => (/* binding */ parameters),
/* harmony export */   properties: () => (/* binding */ properties),
/* harmony export */   raster: () => (/* binding */ raster),
/* harmony export */   rasterFunctionEditor: () => (/* binding */ rasterFunctionEditor),
/* harmony export */   rasterFunctions: () => (/* binding */ rasterFunctions),
/* harmony export */   rfxLicenseInfo: () => (/* binding */ rfxLicenseInfo),
/* harmony export */   s16PixelType: () => (/* binding */ s16PixelType),
/* harmony export */   s32PixelType: () => (/* binding */ s32PixelType),
/* harmony export */   s8PixelType: () => (/* binding */ s8PixelType),
/* harmony export */   save: () => (/* binding */ save),
/* harmony export */   saveAs: () => (/* binding */ saveAs),
/* harmony export */   saveUtils: () => (/* binding */ saveUtils),
/* harmony export */   savingMessage: () => (/* binding */ savingMessage),
/* harmony export */   scalar: () => (/* binding */ scalar),
/* harmony export */   search: () => (/* binding */ search),
/* harmony export */   selectFeature: () => (/* binding */ selectFeature),
/* harmony export */   selectFunction: () => (/* binding */ selectFunction),
/* harmony export */   selectRaster: () => (/* binding */ selectRaster),
/* harmony export */   serviceURL: () => (/* binding */ serviceURL),
/* harmony export */   setGroupSharing: () => (/* binding */ setGroupSharing),
/* harmony export */   setSharingLevel: () => (/* binding */ setSharingLevel),
/* harmony export */   share: () => (/* binding */ share),
/* harmony export */   shareWith: () => (/* binding */ shareWith),
/* harmony export */   success: () => (/* binding */ success),
/* harmony export */   tagFieldName: () => (/* binding */ tagFieldName),
/* harmony export */   tags: () => (/* binding */ tags),
/* harmony export */   title: () => (/* binding */ title),
/* harmony export */   toolDetailsEditor: () => (/* binding */ toolDetailsEditor),
/* harmony export */   toolEditor: () => (/* binding */ toolEditor),
/* harmony export */   toolModeler: () => (/* binding */ toolModeler),
/* harmony export */   tryAgain: () => (/* binding */ tryAgain),
/* harmony export */   type: () => (/* binding */ type),
/* harmony export */   u16PixelType: () => (/* binding */ u16PixelType),
/* harmony export */   u32PixelType: () => (/* binding */ u32PixelType),
/* harmony export */   u8PixelType: () => (/* binding */ u8PixelType),
/* harmony export */   unionDimensions: () => (/* binding */ unionDimensions),
/* harmony export */   unknownPixelType: () => (/* binding */ unknownPixelType),
/* harmony export */   unsavedTitle: () => (/* binding */ unsavedTitle),
/* harmony export */   unsavedWarningExisting: () => (/* binding */ unsavedWarningExisting),
/* harmony export */   unsavedWarningNew: () => (/* binding */ unsavedWarningNew),
/* harmony export */   userStartDirection: () => (/* binding */ userStartDirection),
/* harmony export */   variables: () => (/* binding */ variables),
/* harmony export */   viewerModeMessage: () => (/* binding */ viewerModeMessage),
/* harmony export */   viewerModeTitle: () => (/* binding */ viewerModeTitle),
/* harmony export */   warning: () => (/* binding */ warning)
/* harmony export */ });
const ok = "OK";
const cancel = "Cancella";
const enterURL = "Inserire l’URL dell’image service";
const serviceURL = "URL di Servizio";
const selectRaster = "Seleziona raster";
const failedToLoadLayer = "Impossibile caricare il layer";
const loadingLayer = "Caricamento layer";
const selectFeature = "Seleziona feature layer";
const enterFURL = "Immetti URL feature service";
const addRaster = "Aggiungi variabile raster";
const addScalar = "Aggiungi costante";
const raster = "Raster";
const scalar = "Scalare";
const defaultModelName = "Modello funzione raster";
const general = "Generale";
const parameters = "Parametri";
const variables = "Variabili";
const name = "Nome";
const description = "Descrizione";
const parameter = "Parametro";
const isPublic = "IsPublic";
const isDataset = "IsDataset";
const unknownPixelType = "Sconosciuto";
const outputPixelType = "Tipo di pixel di output";
const u8PixelType = "8 bit senza segno";
const s8PixelType = "8 bit con segno";
const u16PixelType = "16 bit senza segno";
const s16PixelType = "16 bit con segno";
const u32PixelType = "32 bit senza segno";
const s32PixelType = "32 bit con segno";
const f32PixelType = "32 bit a virgola mobile";
const f64PixelType = "64 bit doppio";
const properties = "Proprietà";
const multidimensionalRules = "Regole multidimensionali";
const matchVariables = "Far corrispondere variabili.";
const unionDimensions = "Dimensioni unione";
const rasterFunctionEditor = {
	invalidRFTMessage: "Modello di funzione raster non valido.",
	rfxArgsEditor: {
		outputRaster: "Raster di Output",
		raster: "Raster",
		unsupportedDataTypeWarning: "Gli argomenti seguenti non vengono visualizzati perché non sono supportati.",
		unsupportedFunction: "Contiene le funzioni raster attualmente non supportate."
	},
	rfxRasterInput: {
		selectLayer: "Seleziona layer",
		browseLayers: "Sfoglia layer",
		rfxVariable: "RasterFunctionVariable"
	},
	rfxBandCombinationEditor: {
		methodLabel: "Metodo",
		bandLabel: "Banda",
		combinationLabel: "Combinazione"
	},
	rfxRemapGrid: {
		minimum: "Minimo",
		maximum: "Massimo",
		output: "Output",
		noData: "NoData",
		remapValuesLabel: "Rimappa valori"
	},
	rfxNamedRasterEditor: {
		rasterVariables: "Variabili raster",
		deleteSelectedVars: "Rimuovi le variabili selezionate"
	},
	rfxClippingGeometry: {
		clippingLayer: "Layer di ritaglio",
		clippingRaster: "Raster Clipping",
		clippingGeometry: "Geometria di ritaglio",
		customExtent: "Estensione personalizzata",
		outputExtent: "Estensione di output",
		currentExtent: "Estensione mappa corrente",
		drawLabel: "Disegna"
	},
	rfxCustomExtent: {
		top: "In alto",
		right: "Destra",
		bottom: "In basso",
		left: "Sinistra"
	},
	rfxRasterArrayEditor: {
		moveUp: "Sposta su",
		moveDown: "Sposta giù",
		remove: "Rimuovi"
	},
	rfxStatisticsGrid: {
		stdDev: "Deviazione Standard",
		min: "Minima",
		max: "Massima",
		mean: "Medio"
	},
	rfxWeightedSumTableEditor: {
		weightedSumTable: "Tabella di somma pesata",
		id: "ID",
		layer: "Layer",
		field: "Campo",
		weight: "Peso",
		value: "Valore",
		selectLayer: "Seleziona layer"
	},
	rfxWeightedOverlayTableEditor: {
		weightedOverlayTable: "Tabella di sovrapposizione pesata",
		id: "ID",
		layer: "Layer",
		field: "Campo",
		influence: "Influenza",
		sumOfInfluence: "Somma di influenza",
		value: "Valore",
		remapTable: "Rimappa tabella",
		scale: "Scala",
		scales: "Scale",
		selectRaster: "Seleziona raster"
	},
	rfxFeatureSelect: {
		addFeatureLayer: "Cerca un feature layer",
		addPointLayer: "Cerca un layer puntuale"
	},
	rfxFieldSelect: {
		value: "Valore",
		count: "Conteggio"
	},
	rfxAttributeTable: {
		tableType: "Tipo di tabella",
		manual: "Manuale",
		external: "Esterno",
		minVal: "Valore minimo",
		maxVal: "Valore massimo",
		baseClassName: "Nome base classe",
		colorScheme: "Schema colori",
		defaultClassName: "Etichetta_",
		generateTable: "Genera tabella",
		browseTable: "Esamina tabella",
		value: "Valore",
		classname: "ClassName",
		color: "Colore"
	},
	rfxFieldNumberSwitchable: {
		number: "Numerico",
		field: "Campo",
		string: "Stringa",
		linearUnit: "Unità lineare"
	},
	rfxPropertySet: {
		name: "Nome",
		value: "Valore"
	},
	rfxConversionGrid: {
		size: "Dimensione"
	},
	rfxTransposeBit: {
		bitPattern: "Schema bit",
		outputBit: "Bit di output",
		inputBit: "Bit di input"
	},
	rfxSpatialReference: {
		placeHolder: "Perfeziona per parola chiave",
		coordinateSystem: "Sistema di coordinate",
		gcs: "Sistema di coordinate geografiche",
		pcs: "Sistema di coordinate proiettato",
		vcs: "Sistema di coordinate verticali"
	}
};
const rfxLicenseInfo = "Questo modello di funzione raster può essere usato per elaborare le immagini utilizzando ArcGIS Image Server.";
const rasterFunctions = {
	rfx: {
		aCosHName: "ACosH",
		aCosHSnip: "Calcola il coseno iperbolico inverso di celle in un raster",
		aCosHDesc: "La funzione calcola il coseno iperbolico inverso dei pixel in un raster.",
		aCosName: "ACos",
		aCosSnip: "Calcola il coseno inverso dei pixel in un raster.",
		aCosDesc: "Questa funzione raster calcola il coseno inverso delle celle in un raster. In matematica, tutte le funzioni trigonometriche hanno una gamma definita di valori di input validi, chiamata il dominio. Anche i valori di output di ciascuna funzione hanno una gamma definita. Per questo strumento, il dominio è [-1, 1] e l’intervallo è [0, pi].",
		aSinHName: "ASinH",
		aSinHSnip: "Calcola il seno iperbolico inverso di celle in un raster.",
		aSinHDesc: "La funzione calcola il seno iperbolico inverso dei pixel in un raster.",
		aSinName: "ASin",
		aSinSnip: "Calcola il seno inverso di celle in un raster.",
		aSinDesc: "La funzione calcola il seno inverso dei pixel in un raster.",
		aTan2Name: "ATan2",
		aTan2Snip: "Calcola la tangente inversa (basata su x,y) delle celle in un raster.",
		aTan2Desc: "La funzione calcola la tangente inversa (basata su x,y) dei pixel in un raster.",
		aTanHName: "ATanH",
		aTanHSnip: "Calcola la tangente iperbolica inversa di celle in un raster.",
		aTanHDesc: "La funzione calcola la tangente iperbolica inversa dei pixel in un raster.",
		aTanName: "ATan",
		aTanSnip: "Calcola la tangente inversa di celle in un raster.",
		aTanDesc: "La funzione calcola la tangente inversa dei pixel in un raster.",
		absName: "Abs",
		absSnip: "Calcola il valore assoluto delle celle in un raster.",
		absDesc: "La funzione Abs calcola il valore assoluto dei pixel in un raster.",
		reflectanceName: "Riflettanza apparente",
		reflectanceSnip: "Converte immagini originali in valori Massimo dell'atmosfera prendendo in considerazione le caratteristiche del sensore, la posizione del sole e il tempo di acquisizione.",
		reflectanceDesc: "Questa funzione regola i valori di numero digitale (DN) della luminosità di immagine per alcuni sensori di satelliti. Le regolazioni si basano sull'elevazione del sole, la data di acquisizione e le proprietà del sensore per impostare il guadagno e il fattore di disturbo per ogni banda. Questa funzione viene usata per regolare i valori di riflettanza, o luminosità, di alcune immagini di satelliti in base alle impostazioni di illuminazione della scena e di guadagno del sensore. Le immagini vengono regolate su una condizione di illuminazione teoricamente comune, il che comporta presumibilmente una minore variazione tra scene da date diverse e sensori diversi. Ciò può essere utile per la classificazione delle immagini, il bilanciamento del colore e la creazione di un mosaico. Questa funzione può essere usata solo con immagini specifiche. I sensori applicabili sono Landsat MSS, Landsat TM, Landsat ETM+, Landsat 8, IKONOS, QuickBird, GeoEye-1, RapidEye, DMCii, WorldView-1, WorldView-2, SPOT 6 e Pleiades.<div><br/>La funzione esegue due correzioni. La prima si basa sulle impostazioni del fattore di guadagno. I valori originali di luminosità sono ricreati dai valori dell'immagine invertendo le equazioni del fattore di guadagno. La seconda correzione riguarda le differenze di angolazione del sole e luminosità. I valori originali di luminosità sono regolati su una condizione comune di illuminazione normalizzando scene acquisite in condizioni variabili di illuminazione. In generale, mentre il tipo di dati dell'immagine di output è lo stesso di quello dell'immagine di input, i valori di output sono inferiori ai valori di input e sono ritagliati nell'intervallo di dati validi.</div>",
		argStatisticsName: "ArgStatistics",
		argStatisticsSnip: "Calcola le statistiche degli argomenti, inclusi Arg Max, Arg Min, Arg Median e Duration.",
		argStatisticsDesc: "La funzione calcola le statistiche degli argomenti. Esistono quattro metodi nella funzione ArgStatistics: ArgMax, ArgMin, ArgMedian e Durata.",
		arithmeticName: "Aritmetico",
		arithmeticSnip: "Esegue un'operazione aritmetica tra due raster o un raster e uno scalare.",
		arithmeticDesc: "La funzione Aritmetica esegue un’operazione aritmetica tra due raster o tra un raster e uno scalare e viceversa.",
		aspectSlopeName: "Aspetto-Sezione",
		aspectSlopeSnip: "Crea un raster che visualizza simultaneamente l'aspetto (direzione) e la sezione (ripidezza) di una superficie continua, come rappresentata in un modello di elevazione digitale.",
		aspectSlopeDesc: "La funzione Aspetto-Pendenza crea un layer raster che visualizza simultaneamente l’aspetto e la pendenza di una superficie. L'aspetto identifica la direzione con la massima percentuale di variazione in discesa da un pixel a quelli vicini. L'aspetto può essere considerato come la direzione della pendenza. I valori del raster di output saranno la direzione della bussola dell’aspetto, rappresentata da una tonalità (colore). La pendenza rappresenta la percentuale di variazione dell'elevazione per ogni pixel del modello di elevazione digitale (DEM). La pendenza rappresenta la ripidezza della superficie ed è simboleggiata da tre classi mostrate mediante la saturazione del colore (luminosità).<div><br/>I valori dei pixel nel raster di output aspetto-pendenza rispecchiano la combinazione di aspetto e pendenza. I pixel con valori inferiori a 20 sono considerati piatti e visualizzati in grigio. I valori di aspetto-pendenza pari o superiori a 21 saranno visualizzati con diverse saturazioni, come segue: da 21 a 30 —saturazione di pendenza bassa; da 31 a 40—saturazione di pendenza moderata; da 41 in su—saturazione di pendenza elevata.</div>",
		aspectName: "Esposizione",
		aspectSnip: "Mostra la direzione verso la quale è rivolto un pixel, in cui 0 è verso nord e gli angoli aumentano in senso antiorario fino a 360.",
		aspectDesc: "La funzione Aspetto identifica la direzione con la massima percentuale di variazione in discesa da una cella a quelle vicine. L'aspetto può essere considerato come la direzione della pendenza. I valori del raster di output saranno la direzione della bussola dell'Aspect.<div><br/>L'input per questa funzione è Raster di input. La funzione Aspetto si applica spesso a un modello digitale di elevazione (DEM). Per impostazione predefinita, l'Aspetto appare come un'immagine in scala di grigi. È possibile aggiungere la funzione Colormap per specificare uno schema di colori particolare o per consentire alla persona che visualizza il mosaico di modificare la simbologia con il proprio schema di colori.</div>",
		tableName: "Tabella attributi",
		tableSnip: "Questa funzione utilizza una tabella per denominare e simboleggiare i valori in un dataset. Le colonne della tabella sono separate da virgole: PixelValue, AttributeName, RedValue, GreenValue, BlueValue.",
		tableDesc: "La funzione Tabella attributi consente di definire una tabella di attributi per simboleggiare un mosaic dataset a banda singola o un raster dataset. <div><br/>È utile quando si desidera presentare immagini sottoposte a classificazione per l'uso del suolo, come terreni forestali, zone umide, terreni coltivati e aree urbane. Inoltre, se la tabella contiene campi denominati rosso, verde e blu, i valori all'interno di tali campi verranno utilizzati come colormap durante il rendering dell'immagine.</div>",
		bandArithmeticName: "Aritmetica banda",
		bandArithmeticSnip: "Calcola gli indici utilizzando formule predefinite o un'espressione definita dall'utente.",
		bandArithmeticDesc: "La funzione Aritmetica Banda esegue un'operazione aritmetica sulle bande di un dataset raster. È possibile scegliere algoritmi predefiniti selezionabili oppure si può immettere la propria formula a riga singola. Gli operatori supportati sono -, +, /, * e - unario.",
		thresholdName: "Impostazione soglia binaria",
		thresholdSnip: "Organizza dati continui in primo piano e sullo sfondo minimizzando la covarianza tra le due classi.",
		thresholdDesc: "Quando un dataset raster ha una distribuzione bimodale, questa funzione crea un nuovo raster che divide i dati in due classi distinte. Viene creata una classe di valori bassi visualizzata con pixel neri e una classe di valori elevati visualizzata con pixel bianchi.",
		bitwiseAndName: "And Bitwise",
		bitwiseAndSnip: "Effettua una operazione bitwise And sui valori binari di due raster di input.",
		bitwiseAndDesc: "Bitwise And esegue un’operazione And a livello bit sui valori binari di due raster di input.",
		bitwiseLeftShiftName: "Spostamento a sinistra Bitwise",
		bitwiseLeftShiftSnip: "Esegue un'operazione bitwise Shift a sinistra sui valori binari di due raster di input.",
		bitwiseLeftShiftDesc: "Bitwise Left Shift esegue un'operazione di spostamento a sinistra a livello bit sui valori binari dei due raster di input.",
		bitwiseNotName: "Not Bitwise",
		bitwiseNotSnip: "Esegue un'operazione Not a livello bit (complemento) sul valore binario di un raster di input.",
		bitwiseNotDesc: "La funzione esegue un'operazione Not a livello bit (complemento) sul valore binario di un raster di input.",
		bitwiseOrName: "Or Bitwise",
		bitwiseOrSnip: "Esegue un'operazione bitwise Or sui valori binari dei due raster di input.",
		bitwiseOrDesc: "La funzione esegue un'operazione Or a livello bit sui valori binari dei due raster di input. ",
		bitwiseRightShiftName: "Spostamento a destra Bitwise",
		bitwiseRightShiftSnip: "Esegue un'operazione bitwise di di shift a destra sui valori binari dei due raster di input.",
		bitwiseRightShiftDesc: "La funzione esegue un'operazione di spostamento a destra a livello bit sui valori binari dei due raster di input.",
		bitwiseXorName: "Bitwise Xor",
		bitwiseXorSnip: "Esegue un'operazione bitwise Or esclusivo sui valori binari di due raster di input.",
		bitwiseXorDesc: "La funzione esegue un'operazione Or esclusivo a livello bit sui valori binari di due raster di input.",
		booleanAndName: "Boolean And",
		booleanAndSnip: "Esegue un'operazione And booleano sui valori delle celle di due raster di input. Se entrambi i valori di input sono true (non-zero), l’output è 1. Se uno o entrambi i valori di input sono false (zero), l'output è 0.",
		booleanAndDesc: "La funzione esegue un'operazione And booleano sui valori dei pixel di due raster di input. Se entrambi i valori di input sono true (non-zero), il valore di output è 1. Se uno o entrambi i valori di input sono false (zero), l'output è 0. ",
		booleanNotName: "No booleano",
		booleanNotSnip: "Esegue un'operazione Not booleano (complemento) sui valori delle celle del raster di input. Se i valori di input sono true (non-zero), il valore di output è 0. Se i valori di input sono false (zero), l’output è 1.",
		booleanNotDesc: "La funzione esegue un'operazione Not booleano (complemento) sui valori dei pixel del raster di input. Se i valori di input sono true (non-zero), il valore di output è 0. Se i valori di input sono false (zero), il valore di output è 1.",
		booleanOrName: "Boolean Or",
		booleanOrSnip: "Esegue un'operazione Or booleano sui valori delle celle di due raster di input. Se uno o entrambi i valori di input sono true (non-zero), il valore di output è 1. Se entrambi i valori di input sono false (zero), l’output è 0.",
		booleanOrDesc: "La funzione esegue un'operazione Or booleano sui valori delle celle di due raster di input. Se uno o entrambi i valori di input sono true (non-zero), il valore di output è 1. Se entrambi i valori di input sono false (zero), il valore di output è 0.",
		booleanXorName: "Boolean Xor",
		booleanXorSnip: "Esegue un'operazione eXclusive Or booleano sui valori delle celle di due raster di input. Se un valore di input è true (non-zero) e l'altro è false (zero), l’output è 1. Se i valori di input sono entrambi true o entrambi false, l’output è 0.",
		booleanXorDesc: "La funzione esegue un'operazione eXclusive Or booleano sui valori delle celle di due raster di input. Se un valore di input è true (non-zero) e l'altro valore è false (zero), il valore di output è 1. Se entrambi i valori di input sono true o entrambi sono false, il valore di output è 0.",
		bufferedRasterName: "Memorizzato nel buffer",
		bufferedRasterSnip: "Memorizza nel buffer gli ultimi blocchi di pixel aperti.",
		bufferedRasterDesc: "La funzione di buffer si usa per ottimizzare le prestazioni di catene complesse di funzioni. Archivia l'output in memoria della parte della catena di funzioni che la precede. <div><br/>Inserire questa funzione nell'Editor di funzioni in cui si desidera memorizzare l'output.</div>",
		rasterCalculatorName: "Calcolatore",
		rasterCalculatorSnip: "Calcola un raster da un'espressione matematica basata su raster.",
		rasterCalculatorDesc: "La funzione Calcolatore consente di creare ed eseguire espressioni e includerle in catene di funzioni.",
		cellStatisticsName: "Statistiche delle Celle",
		cellStatisticsSnip: "Calcola una statistica per cella da più raster. Le statistiche disponibili sono Maggioranza, Massimo, Media, Mediana, Minimo, Minoranza, Percentile, Intervallo, Deviazione standard, Somma e Varietà.",
		cellStatisticsDesc: "Questa funzione calcola statistiche da più raster in base ai singoli pixel. Le statistiche disponibili sono maggioranza, massimo, media, mediana, minimo, minoranza, intervallo, deviazione standard, somma e varietà.",
		classifyName: "Classifica",
		classifySnip: "Assegna ciascun pixel a una classe. Incorpora dati secondari come un'immagine segmentata.",
		classifyDesc: "Questa funzione raster classifica un dataset raster sulla base di un file di definizione del metodo di classificazione di Esri (.ecd) e dei dati immessi per il dataset raster. Il file .ecd usato nella funzione Classifica contiene tutte le informazioni relative a un dataset e a un classificatore specifici ed è generato dagli strumenti di addestramento alla classificazione, come il Computer Vettore di Supporto all'Addestramento o l’Addestramento Strutture Casuali.",
		clipName: "Clip",
		clipSnip: "Imposta l'estensione di un raster utilizzando coordinate o un altro dataset.",
		clipDesc: "Questa funzione ritaglia un raster usando una forma rettangolare in base alle estensioni definite oppure lo ritaglia in base alla forma di una feature class poligonale di input. La forma che definita dal ritaglio può essere il ritaglio dell'estensione del raster o l'estrazione di un'area all'interno raster.",
		colorspaceConversionName: "Conversione modello colore",
		colorspaceConversionSnip: "Converte un raster da RGB a HSV e viceversa.",
		colorspaceConversionDesc: "La funzione Conversione modello colore converte il modello del colore di un'immagine da uno spazio colore tonalità, saturazione e valore (HSV) a rosso, verde e blu (RGB), o viceversa.<div><br/>Questa funzione può essere usata solo in un Mosaic Dataset.</div>",
		colormapToRGBName: "Da mappa colori a RGB",
		colormapToRGBSnip: "Converte un raster a banda singola con una mappa colori in un raster a tre bande (rosso, verde e blu).",
		colormapToRGBDesc: "Questa funzione converte un raster a banda singola con una colormap in un raster a tre bande (rosso, verde e blu).<div><br/>Questa funzione è utile quando è necessario creare un raster a tre bande da un raster a banda singola con una colormap associata. I valori della colormap vengono utilizzati per creare ogni banda del rosso, verde e blu. Questa funzione può essere usata solo in un Mosaic Dataset.</div>",
		colormapName: "Colormap",
		colormapSnip: "Cambia i valori dei pixel per visualizzare i dati raster come scala di grigi o come immagine RGB (Rosso, Verde, Blu), in base a una mappa colori o una scala cromatica.",
		colormapDesc: "La funzione Colormap è un tipo di renderer dei dati raster. Trasforma i valori dei pixel per visualizzare i dati raster come una scala di grigi o come un'immagine a colori RGB basata su uno schema di colori o su specifici colori contenuti in un file colormap. È possibile usare una colormap per rappresentare i dati analizzati, come un’immagine classificata, o quando si visualizza una mappa topografica (o l’immagine di un indice digitalizzata a colori).<div><br/>Le colormap contengono un insieme di valori associati ai colori, usati per visualizzare un raster a banda singola in modo coerente con gli stessi colori. Il valore di ciascun pixel è associato a un colore, definito come un insieme di valori RGB. Le colormap sono in grado di supportare qualsiasi profondità bit a eccezione di quelle a virgola mobile. Inoltre, sono compatibili con valori positivi e negativi e possono contenere valori mappati mancanti. Quando si visualizza un dataset con una colormap contenente valori mancanti, i pixel con i valori mancanti non saranno visualizzati.</div>",
		complexName: "Complesso",
		complexSnip: "Estrae la grandezza da numeri complessi.",
		complexDesc: "Questa funzione calcola la grandezza da valori complessi.<div><br/>Questa funzione viene in genere utilizzata con immagini RADAR con un tipo di dati complessi. Può essere usata in un mosaic dataset.</div>",
		compositeBandName: "Bande Composite",
		compositeBandSnip: "Combina più dataset in un unico raster multibanda.",
		compositeBandDesc: "La funzione Bande composite consente di combinare raster per formare un’immagine multibanda.",
		conName: "Con",
		conSnip: "Esegue un’operazione If, Then, Else condizionale. Quando si utilizza un operatore Con, occorrono in genere due o più funzioni concatenate, in cui una funzione afferma i criteri e la seconda funzione è l’operatore Con che utilizza i criteri e indica quali devono essere le uscite true e false.",
		conDesc: "La funzione Con imposta i pixel del raster di output sulla base di una valutazione if\\else di ciascun pixel di input. Restituisce i valori dei pixel dal True Raster se la valutazione condizionale è true (1); restituisce i valori dei pixel dal False Raster se la valutazione condizionale è false (0). Questo criterio è specificato dall'output di una funzione matematica logica, che sarà il raster di input.",
		constantName: "Costante",
		constantSnip: "Crea un raster virtuale con un valore in pixel singolo.",
		constantDesc: "Questa funzione crea un raster virtuale con un valore pixel singolo utilizzabile in modelli di funzione raster e per elaborare un mosaic dataset.<div><br/>Il valore costante si usa per ogni valore pixel nel raster.</div>",
		contourName: "Contour",
		contourSnip: "Crea linee di contorno.",
		contourDesc: "La funzione Contour genera linee di contorno unendo punti con la stessa elevazione da un dataset di elevazione raster. I Contour sono isolinee create come raster per la visualizzazione. Questa funzione è resa potente dalle seguenti feature chiave: i Contour sono generati rapidamente e dinamicamente su dataset molto grandi, come Elevazione mondiale; i Contour possono essere smussati per fornire un aspetto cartografico più gradevole mantenendone al contempo la precisione; si dispone del controllo dinamico dell'intervallo dei Contour; le opzioni di output includono linee di Contour, Contour di indice e Contour riempiti.<div><br/>La creazione di un Contour Layer come prodotto raster è importante per un ampio spettro di applicazioni perché i contorni possono essere sovrapposti su una mappa e fornire informazioni sul suolo senza oscurare i dati sottostanti. Sono utili in applicazioni come applicazioni di ingegneria, agricoltura e gestione idrica.</div>",
		contrastBrightnessName: "Contrasto e luminosità",
		contrastBrightnessSnip: "Regola il contrasto e la luminosità di un raster.",
		contrastBrightnessDesc: "La funzione Contrasto e luminosità migliora l’aspetto dei dati raster modificando la luminosità o il contrasto nell’immagine. La luminosità aumenta la chiarezza complessiva dell'immagine—ad esempio, rendendo i colori scuri più chiari e i colori chiari più bianchi—mentre il contrasto regola la differenza tra i colori più scuri e quelli più chiari.<div><br/>L'uso di questa funzione altera i valori dei pixel; per questo motivo, la funzione deve essere utilizzata quando si desidera migliorare l'aspetto dei dati, ma non se si intende utilizzare i dati come parte di un'analisi che richiederebbe valori dei pixel non elaborati. Questa funzione è utile quando i dati vengono pubblicati come image service utilizzabili nelle applicazioni senza la possibilità di alterare il contrasto e la luminosità delle immagini, o per garantire che le immagini vengano visualizzate utilizzando le impostazioni predefinite.</div>",
		convolutionName: "Convoluzione",
		convolutionSnip: "Applica un filtro per rendere più nitido, sfocare, rilevare bordi, smussare o un gradiente su un raster.",
		convolutionDesc: "La funzione Convoluzione applica un filtro basato sui valori dei pixel in un’immagine, che può essere utilizzato per eseguire lo sharpening o la sfocatura di un’immagine, rilevare gli edge all'interno di un’immagine o apportare altri miglioramenti basati sul kernel. I filtri vengono utilizzati per migliorare la qualità dell'immagine raster eliminando i dati spuri o migliorando le feature nei dati. I filtri di convoluzione vengono applicati su un kernel mobile sovrapposto (finestra o vicinanza), ad esempio 3 per 3. I filtri di convoluzione funzionano calcolando il valore del pixel in base ai pesi di quelli vicini.",
		corridorName: "Corridor",
		corridorSnip: "Calcola la somma dei costi cumulativi per due raster di costo cumulativo di input.",
		corridorDesc: "La funzione Corridor calcola la somma dei costi cumulativi per due raster di costo cumulativo di input. Sebbene sia possibile usare due raster qualsiasi per l’input, per ottenere un risultato significativo si dovrebbero usare raster di costo cumulativo di output inalterati. L’ordine dei due raster di input non è rilevante.",
		cosHName: "CosH",
		cosHSnip: "Calcola il coseno iperbolico di celle in un raster.",
		cosHDesc: "La funzione calcola il coseno iperbolico dei pixel in un raster.",
		cosName: "Cos",
		cosSnip: "Calcola il coseno di una cella in un raster.",
		cosDesc: "La funzione calcola il coseno dei pixel in un raster.",
		costAllocationName: "Assegnazione costi",
		costAllocationSnip: "Calcola per ogni cella l'origine più economica in base al minor costo cumulativo su una superficie di costo.",
		costAllocationDesc: "La funzione Assegnazione costi calcola, per ogni cella, l'origine più economica in base al minor costo cumulativo su una superficie di costo.",
		costBackLinkName: "Back Link Costi",
		costBackLinkSnip: "Definisce l'elemento vicino che corrisponde alla cella successiva nel percorso di costo cumulativo minore per l'origine dal costo minimo.",
		costBackLinkDesc: "La funzione Backlink di costo definisce l'elemento vicino che è la cella successiva nel percorso di costo cumulativo minore per l'origine più economica.<div><br/>Il raster backlink contiene valori compresi tra zero e otto, che definiscono la direzione o identificano la successiva cella adiacente (la cella successiva) lungo il percorso di costo cumulativo minore da una cella per raggiungere l'origine più economica. Se il percorso deve passare nell'adiacente destra, alla cella verrà assegnato il valore 1, 2 per la cella diagonale in basso a destra e proseguendo in senso orario. Il valore 0 è riservato alle celle di origine.</div>",
		costDistanceName: "Distanza costi",
		costDistanceSnip: "Calcola la distanza di costo cumulativo minore per ogni cella da o verso l'origine più economica su una superficie di costo.",
		costDistanceDesc: "La funzione Distanza di costo calcola la distanza di costo cumulativo minore per ogni cella da o verso l'origine più economica su una superficie di costo.",
		costPathName: "Percorso costi",
		costPathSnip: "Calcola il percorso di costo minimo da un'origine a una destinazione.",
		costPathDesc: "La funzione globale Percorso di costo calcola il percorso di costo inferiore da un'origine a una destinazione.<div><br/>Questa funzione produce un raster di output che registra il percorso o i percorsi meno costosi, dalle posizioni selezionate alla cella di origine più vicina definita nella superficie di costo cumulativo, in termini di distanza di costo.</div>",
		curvatureName: "Curvatura",
		curvatureSnip: "Calcola la curvatura di una superficie raster, includendo facoltativamente profilo e curvatura piano.",
		curvatureDesc: "La funzione Curvatura visualizza la forma o la curvatura della pendenza. Una superficie può avere una parte concava o convessa; ciò è riconoscibile osservando il valore di curvatura. La curvatura viene calcolata computando la seconda derivata della superficie.<div><br/>L'output della funzione Curvatura può essere usato per descrivere le caratteristiche fisiche di un bacino di drenaggio nel tentativo di comprendere i processi di erosione e ruscellamento. Il valore di curvatura può essere usato per individuare modelli di erosione del suolo nonché la distribuzione dell'acqua nel terreno. La curvatura del profilo influenza l'accelerazione e la decelerazione dei flussi e, quindi, anche l'erosione e la deposizione. La curvatura della superficie alare influenza la convergenza e la divergenza dei flussi.</div>",
		divideName: "Divide",
		divideSnip: "Divide i valori di due raster in base alle singole celle.",
		divideDesc: "La funzione Dividi divide i valori di due raster in base ai singoli pixel.",
		elevationVoidFillName: "Riempimento vuoti di elevazione",
		elevationVoidFillSnip: "Crea pixel dove esistono buchi nei dati di elevazione.",
		elevationVoidFillDesc: "La funzione Riempimento vuoti di elevazione viene usata per creare pixel dove esistono spazi vuoti nell'elevazione.<div><br/>I vuoti si verificano quando non ci sono punti raccolti entro l'area rappresentata da un pixel nel raster risultante. I vuoti sono spesso causati da corpi idrici, selezione di tipi di classe o esclusione. Il riempimento del vuoto è generalmente usato quando si genera una superficie di terra.</div>",
		equalToName: "Equal To",
		equalToSnip: "Esegue un'operazione relazionale uguale-a su due input in base alle singole celle. Restituisce 1 per le celle in cui il primo raster è uguale al secondo raster e 0 per le celle in cui è diverso.",
		equalToDesc: "La funzione esegue un'operazione uguale-a su due raster in base ai singoli pixel. Restituisce il valore 1 per i pixel in cui il primo raster è uguale al secondo raster e il valore 0 per i pixel in cui sono diversi.",
		eucAllocationName: "Assegnazione euclidea",
		eucAllocationSnip: "Calcola per ogni cella l'origine più vicina in base alla distanza euclidea.",
		eucAllocationDesc: "La funzione Assegnazione euclidea calcola per ogni cella l'origine più vicina in base alla distanza euclidea.",
		eucDirectionName: "Direzione euclidea",
		eucDirectionSnip: "Calcola per ogni cella la direzione in gradi rispetto all'origine più vicina.",
		eucDirectionDesc: "La funzione Direzione euclidea calcola per ogni cella la direzione in gradi rispetto all'origine più vicina. <div><br/>Il calcolo della direzione viene eseguito dal centro di ciascuna cella al centro della cella di origine più vicina. L'intervallo di valori è compreso tra 0 gradi e 360 gradi, con 0 riservato per le celle di origine. Verso est (destra) è di 90 e i valori aumentano in senso orario (180 è sud, 270 è ovest e 360 è nord).</div>",
		eucDistanceName: "Distanza euclidea",
		eucDistanceSnip: "Calcola per ogni cella la distanza euclidea dall'origine più vicina.",
		eucDistanceDesc: "La funzione Distanza euclidea calcola per ogni cella la distanza euclidea dall'origine più vicina.",
		exp10Name: "Exp10",
		exp10Snip: "Calcola l'esponente in base 10 delle celle in un raster.",
		exp10Desc: "La funzione Exp 10 calcola l'esponente in base 10 dei pixel in un raster.",
		exp2Name: "Exp2",
		exp2Snip: "Calcola l'esponente in base 2 delle celle in un raster.",
		exp2Desc: "La funzione calcola l'esponente in base 2 dei pixel in un raster.",
		expName: "Exp",
		expSnip: "Calcola l'esponente in base e delle celle in un raster.",
		expDesc: "Questa funzione calcola l'esponente in base e dei pixel in un raster.",
		extractBandName: "Estrai bande",
		extractBandSnip: "Specifica quali bande utilizzare durante l'uso di dataset multibanda.",
		extractBandDesc: " La funzione Estrai bande consente di estrarre una o più bande, o di riordinarle, da un dataset raster multibanda.<div><br/>La funzione Estrai bande può essere usata prima di altre funzioni, come Aritmetica, per verificare quali bande vengono usate come input nella funzione successiva.</div>",
		fillName: "Compila",
		fillSnip: "Riempie i sink in un raster superficie per rimuovere piccole imperfezioni nei dati.",
		fillDesc: "La funzione globale Riempi individua e riempie i sink e le vette in un raster di elevazione per rimuovere piccole imperfezioni nei dati. La funzione eseguirà un processo iterativo di riempimento fino a quando tutti i sink saranno stati riempiti entro il limite Z specificato.<div><br/>Quando viene creata una superficie di elevazione con strumenti come Ortho Mapping o con altri mezzi, i dati contengono spesso errori piccoli ma significativi nella forma dei sink e delle vette. In fotogrammetria, sink e vette sono spesso indicati come spazi vuoti e picchi. I dati di superficie sono spesso usati in modellazione, come nella modellazione idrologica, pertanto è importante correggere questo tipo di errori a livello di sink e vette in modo coerente con i dati circostanti.</div>",
		floatName: "Float",
		floatSnip: "Converte tutti i valori delle celle di un raster in una rappresentazione a virgola mobile.",
		floatDesc: "La funzione Float converte tutti i valori dei pixel di un raster in una rappresentazione a virgola mobile.",
		flowAccumulationName: "Accumulo del Flusso",
		flowAccumulationSnip: "Crea un raster del flusso accumulato in ogni cella. È possibile applicare un fattore di peso.",
		flowAccumulationDesc: "La funzione globale Accumulo del flusso crea un raster di flusso accumulato in ciascun pixel, determinato dall’accumulo del peso di tutti i pixel che fluiscono in ciascun pixel in pendenza. Se non viene fornito alcun raster di peso, viene applicato un peso pari a 1 a ciascun pixel e il valore dei pixel nel raster di output corrisponderà al numero di pixel che fluiscono in ciascun pixel.<div><br/>I pixel di output con un elevato accumulo di flusso sono aree di flusso concentrato e possono essere usati per individuare canali di flusso. I pixel di output con un accumulo di flusso pari a zero sono rilievi topografici locali e possono essere utilizzati per identificare le creste.</div>",
		flowDirectionName: "Direzione del Flusso",
		flowDirectionSnip: "Crea un raster della direzione del flusso da ogni cella al relativo vicino in maggior pendenza.",
		flowDirectionDesc: "Una delle chiavi per derivare le caratteristiche idrologiche di una superficie è la capacità di determinare la direzione del flusso da ciascun pixel nel raster. La funzione raster Direzione del flusso prende una superficie come input e crea un raster di direzione del flusso da ciascun pixel al relativo vicino in maggior pendenza. La funzione Direzione flusso supporta tre metodi di modellazione del flusso: D8 (otto direzioni), Direzione multi-flusso (MFD) e D-Infinity (DINF). ",
		flowDistanceName: "Distanza di Flusso",
		flowDistanceSnip: "Calcola, per ogni cella, la distanza minima orizzontale o verticale dalle celle lungo la linea di scorrimento di un ruscello o di un fiume.",
		flowDistanceDesc: "Per ciascun pixel, la funzione calcolerà la distanza minima orizzontale o verticale dai pixel lungo la linea di scorrimento di un ruscello o di un fiume. Se viene fornito un raster di direzione del flusso opzionale, le direzioni saranno limitate a quelle definite dalla direzione del flusso del raster di input. L’output è un raster di distanza di flusso.",
		focalName: "Statistiche focali",
		focalSnip: "Calcola le statistiche della focale per ogni pixel di un'immagine in base agli elementi vicini con focale definita.",
		focalDesc: "La funzione Statistiche focali calcola le statistiche della focale per ogni pixel di un'immagine in base agli elementi vicini con focale definita.",
		geometricName: "Geometrica",
		geometricSnip: "Incrementa la precisione di posizionamento di un dataset tenendo conto dell'elevazione.",
		geometricDesc: "La funzione Geometrica genera un’immagine ortorettificata in base alla definizione di un sensore e a un modello di terreno. Incrementa la precisione di posizionamento di un dataset tenendo conto dell'elevazione.",
		grayscaleName: "Scala di grigi",
		grayscaleSnip: "Converte un’immagine multibanda in un’immagine in scala di grigi a banda singola.",
		grayscaleDesc: "La funzione converte un’immagine multibanda in un’immagine in scala di grigi a banda singola.<div><br/>Questa funzione applica i pesi specificati a ciascuna delle bande di input e normalizza l'immagine di output. Spesso pesi vengono applicati perché alcune bande hanno un'importanza variabile a seconda dell'applicazione. Ad esempio, la banda blu spesso contiene più rumore delle altre bande.</div>",
		greaterThanEqualName: "Greater Than Equal",
		greaterThanEqualSnip: "Esegue un'operazione relazionale maggiore-di-o-uguale-a su due input in base alle singole celle. Restituisce 1 per le celle in cui il primo raster è maggiore o uguale al secondo e 0 in caso contrario.",
		greaterThanEqualDesc: "La funzione esegue un'operazione relazionale maggiore-di-o-uguale-a su due input in base ai singoli pixel. Restituisce un valore 1 per i pixel in cui il primo raster è maggiore o uguale al secondo raster e un valore 0 per i pixel in cui il primo raster non è maggiore o uguale al secondo raster.",
		greaterThanName: "Maggiore Di",
		greaterThanSnip: "Esegue un'operazione relazionale maggiore-di su due input in base alle singole celle. Restituisce 1 per le celle in cui il primo raster è maggiore del secondo e 0 in caso contrario.",
		greaterThanDesc: "La funzione esegue un'operazione relazionale maggiore-di su due input in base ai singoli pixel. Restituisce un valore 1 per i pixel in cui il primo raster è maggiore del secondo raster e un valore 0 per i pixel in cui il primo raster non è maggiore del secondo raster.",
		heatIndexName: "Indice di calore",
		heatIndexSnip: "Combina la temperatura dell'aria e l'umidità relativa dell'ambiente per restituire la temperatura apparente.",
		heatIndexDesc: "La funzione calcola la temperatura apparente in base alla temperatura ambiente e all’umidità relativa. La temperatura apparente è spesso descritta come il calore percepito dal corpo umano.<div><br/>Questo indice può essere utile per calcolare i rischi legati a problemi medici come crampi muscolari, disidratazione, esaurimento da calore o, ancora più grave, il colpo di calore nei giorni caldi e umidi. Un'umidità relativa elevata rende più difficoltosa l’evaporazione del sudore e il corpo viene privato di un efficace metodo naturale di raffreddamento. Le mappe dei bollettini e degli alarmi meteo sono spesso il prodotto di una riclassificazione del risultato dell’indice di calore in classi, in cui quanto più alto è il valore dell’indice, più probabile sarà che venga trasformato in un allarme piuttosto che in un semplice bollettino.</div>",
		hillshadeName: "Hillshade",
		hillshadeSnip: "Crea una rappresentazione 3D della superficie, tenendo conto della posizione relativa del sole per l'ombreggiatura dell'immagine.",
		hillshadeDesc: "La funzione Hillshade produce una rappresentazione 3D in scala di grigi della superficie del suolo che tiene in considerazione la posizione relativa del sole per ombreggiare l’immagine. <div><br/>Il rilievo ombreggiato è una tecnica di visualizzazione del terreno determinata da una fonte di illuminazione e dalla pendenza e aspetto della superficie di elevazione. È un metodo qualitativo di visualizzazione della topografia e non fornisce valori di elevazione assoluti. </div>",
		intName: "Int",
		intSnip: "Converte ogni valore di cella di un raster in un numero intero mediante troncamento.",
		intDesc: "La funzione Int converte ogni valore di pixel di un raster in un numero intero mediante troncamento.",
		interpolateIrregularDataName: "Interpola dati irregolari",
		interpolateIrregularDataSnip: "Consente di interpolare da cloud di punti o griglie irregolari.",
		interpolateIrregularDataDesc: "Alcuni dataset netCDF o HDF archiviano la loro geoposizione come array di pixel o dati di punti irregolarmente spaziati. Quando si aggiungono questi dataset a un mosaic dataset, la funzione Interpolazione dati irregolari prende i dati reticolati irregolarmente e li ricampiona in modo che ogni pixel sia di dimensione uniforme e quadrato.<div><br/>Quando si aggiungono variabili da netCDF o HDF a un mosaic dataset, si verificherà automaticamente se i dati sono disposti regolarmente nell'array. In caso contrario, la funzione Interpolazione dati irregolari può essere usata per convertire i dati irregolari in raster reticolati in modo regolare. È possibile cambiare il metodo di interpolazione e la dimensione delle celle usati nella funzione raster Interpolazione dati irregolari. Per dati raster spaziati in modo regolare, non si applicherà nessuna interpolazione e i dati saranno letti così come sono.</div>",
		isNullName: "È null",
		isNullSnip: "Determina quali valori del raster di input sono NoData in base alle singole celle. Restituisce un valore 1 se il valore di input è NoData e 0 in caso contrario.",
		isNullDesc: "La funzione È null determina quali valori del raster di input sono NoData in base ai singoli pixel. Restituisce un valore 1 se il valore di input è NoData e un valore 0 per i pixel che non sono NoData.",
		kernelDensityName: "Densità Kernel",
		kernelDensitySnip: "Calcola un'area grandezza per unità a partire dalle feature punto o polilinea utilizzando una funzione kernel per adattare una superficie rastremata uniforme a ciascun punto o polilinea.",
		kernelDensityDesc: "Questa funzione calcola un'area grandezza per unità a partire dalle feature punto o polilinea utilizzando una funzione kernel per adattare una superficie rastremata uniforme a ciascun punto o polilinea.",
		keyMetadataName: "Metadati chiave",
		keyMetadataSnip: "Esclude o inserisce i metadati chiave di un raster in una catena di funzioni.",
		keyMetadataDesc: "Questa funzione consente di inserire o sostituire i metadati chiave di un raster.<div><br/>Le informazioni contenute nei metadati chiave vengono utilizzate per assistere l'applicazione in determinate elaborazioni e rendering, fornendo informazioni utili come il nome del sensore, i nomi delle bande o la copertura delle nubi associata alle immagini.</div>",
		shortestPathName: "Percorso di costo minimo",
		shortestPathSnip: "Utilizza input di origine e destinazione per eseguire un'analisi costo-distanza che viene quindi usata per stabilire il percorso dal costo minimo da un'origine a una destinazione.",
		shortestPathDesc: "La funzione Percorso di costo minimo calcola il percorso di costo minore da un'origine a una destinazione. La distanza di costo cumulativo minore viene calcolata per ogni pixel su una superficie di costo, rispetto all'origine più vicina. In questo modo, si produce un raster di output che registra il percorso o i percorsi meno costosi, dalle posizioni selezionate ai pixel di origine più vicini definiti nella superficie di costo cumulativo, in termini di distanza di costo.<div><br/>Ad ogni percorso di costo minimo rilevato nel processo di scansione viene assegnato un valore. Il pixel finale sul raster di origine di un percorso di costo riceve un valore 1. Il primo percorso riceve un valore 3, il secondo 4, e così via. Quando più percorsi si uniscono e percorrono la distanza rimanente verso un’origine sullo stesso itinerario, al segmento in cui i due percorsi viaggiano insieme viene assegnato un valore 2. Alla porzione di percorso unita non può essere assegnato il valore di uno dei percorsi, in quanto la porzione unita appartiene a entrambi.</div>",
		lessThanEqualName: "Less Than Equal",
		lessThanEqualSnip: "Esegue un'operazione relazionale minore-di-o-uguale-a su due input in base alle singole celle. Restituisce 1 per le celle in cui il primo raster è minore o uguale al secondo e 0 in caso contrario.",
		lessThanEqualDesc: "La funzione esegue un'operazione relazionale minore-di-o-uguale-a su due input in base ai singoli pixel. Restituisce un valore 1 per i pixel in cui il primo raster è minore o uguale al secondo raster e un valore 0 se il primo raster non è minore o uguale al secondo raster.",
		lessThanName: "Less Than",
		lessThanSnip: "Esegue un'operazione relazionale minore-di su due input in base alle singole celle. Restituisce 1 per le celle in cui il primo raster è minore del secondo e 0 in caso contrario.",
		lessThanDesc: "La funzione esegue un'operazione relazionale minore-di su due input in base ai singoli pixel. Restituisce un valore 1 per i pixel in cui il primo raster è minore del secondo raster e un valore 0 se il primo raster non è minore del secondo raster.",
		lnName: "Ln",
		lnSnip: "Calcola il logaritmo naturale (in base e) di celle in un raster.",
		lnDesc: "La funzione Ln calcola il logaritmo naturale (in base e) di ogni pixel in un raster.",
		log10Name: "Log10",
		log10Snip: "Calcola il logaritmo in base 10 di celle in un raster.",
		log10Desc: "La funzione Log10 calcola il logaritmo in base 10 di ogni pixel in un raster.",
		log2Name: "Log2",
		log2Snip: "Calcola il logaritmo in base 2 di celle in un raster.",
		log2Desc: "La funzione Log2 calcola il logaritmo in base 2 di ogni pixel in un raster.",
		lookupName: "Ricerca",
		lookupSnip: "Crea un nuovo raster cercando valori presenti in un altro campo nella tabella del raster di input.",
		lookupDesc: "La funzione crea un nuovo raster cercando i valori presenti in un altro campo nella tabella del raster di input.",
		mlClassifyName: "Classifica ML",
		mlClassifySnip: "Classifica le immagini utilizzando un approccio per pixel. I pixel misti vengono assegnati alla feature con la percentuale più alta in tale pixel.",
		mlClassifyDesc: "La funzione Classifica ML consente di eseguire una classificazione supervisionata, utilizzando l’algoritmo di classificazione per massima probabilità, su un dataset raster o su un mosaic dataset. Questa funzione richiede un file di firma della classificazione.",
		maskName: "Maschera",
		maskSnip: "Consente di impostare i valori che non si desidera visualizzare.",
		maskDesc: "Questa funzione raster consente di impostare i valori che non si desidera visualizzare nel raster. Usando la funzione Maschera, è possibile specificare uno o più valori NoData o un intervallo di Pixel value validi. ",
		minusName: "Minus",
		minusSnip: "Sottrae il valore del secondo raster di input dal valore del primo raster di input in base alle singole celle.",
		minusDesc: "La funzione Meno sottrae il valore del secondo raster di input dal valore del primo raster di input in base ai singoli pixel.",
		modName: "Mod",
		modSnip: "Trova il resto (modulo) del primo raster quando è diviso per il secondo raster in base alle singole celle.",
		modDesc: "La funzione Mod trova il resto (modulo) del primo raster quando è diviso per il secondo raster in base ai singoli pixel. L'ordine degli input è importante e influenza il risultato di output.",
		mosaicRastersName: "Raster mosaico",
		mosaicRastersSnip: "Unisce un insieme di dataset raster per creare un dataset.",
		mosaicRastersDesc: "La funzione Mosaic raster crea un’immagine a mosaico da varie immagini. In caso di sovrapposizione delle immagini, è possibile scegliere tra vari metodi per stabilire quali immagini visualizzare.",
		ndviColorizedName: "NDVI colorato",
		ndviColorizedSnip: "Crea un dataset multibanda che rappresenta lo stato della vegetazione, in base alla differenza tra le bande rosso e quasi infrarosso.",
		ndviColorizedDesc: "La funzione NDVI Colorized applica la funzione NDVI sull’immagine di input, quindi utilizza una colormap o una scala cromatica per visualizzare il risultato.",
		ndviName: "NDVI",
		ndviSnip: "Calcola il NDVI (Normalized Difference Vegetation Index).",
		ndviDesc: "La funzione NDVI crea un dataset a banda singola che rappresenta lo stato della vegetazione, in base alla differenza tra le bande del rosso e dell’infrarosso vicino.<div><br/>NDVI è un indice standardizzato che consente di generare un'immagine raffigurante aree verdi, anche nota come biomassa relativa. Questo indice sfrutta le caratteristiche contrastanti tra due bande di un dataset raster multispettrale: l'assorbimento dei pigmenti di clorofilla nella banda del rosso e l'elevata riflettanza del materiale vegetale nella banda dell'infrarosso vicino (NIR). Valori di NDVI estremamente bassi o negativi rappresentano aree del tutto prive di vegetazione, come nuvole, acqua o neve. Valori molto bassi rappresentano aree di vegetazione scarsa o assente, come cemento, roccia o terreno nudo. Valori moderati rappresentano aree con presenza di arbusti e prati. Valori elevati rappresentano aree forestali e ricche di vegetazione.</div>",
		negateName: "Negate",
		negateSnip: "Cambia il segno (moltiplica per -1) dei valori di cella del raster di input in base a singole celle.",
		negateDesc: "La funzione Negativo cambia il segno (moltiplica per -1) dei valori dei pixel del raster di input in base ai singoli pixel. ",
		nibbleName: "Nibble",
		nibbleSnip: "Sostituisce le celle di un raster corrispondenti a una maschera con i valori dei vicini più prossimi.",
		nibbleDesc: "La funzione globale Nibble consente di assegnare alle aree selezionate di un raster il valore del rispettivo vicino più prossimo. È utile per modificare le aree di un raster in cui i dati potrebbero essere errati.",
		notEqualName: "Not Equal",
		notEqualSnip: "Esegue un'operazione relazionale diverso-da su due input in base alle singole celle. Restituisce 1 per le celle in cui il primo raster non è uguale al secondo e 0 quando è uguale.",
		notEqualDesc: "La funzione esegue un'operazione relazionale diverso-da su due input in base ai singoli pixel. Restituisce un valore 1 per i pixel in cui il primo raster è diverso dal secondo raster e un valore 0 per i pixel in cui il primo raster è uguale al secondo raster.",
		pansharpeningName: "Fondi dati (Pansharpen)",
		pansharpeningSnip: "Migliora artificialmente la risoluzione spaziale di un'immagine multibanda fondendola con un'immagine pancromatica con risoluzione superiore.",
		pansharpeningDesc: "La funzione Pan-sharpening utilizza un’immagine pancromatica ad alta risoluzione o una banda raster per un set di dati raster multibanda a risoluzione inferiore per aumentare la risoluzione spaziale dell’immagine multibanda.<div><br/>Lo scopo del pan-sharpening è creare un'immagine visiva di qualità superiore. Dal momento che le tecniche modificano la radiometria e le caratteristiche spettrali delle immagini multibanda, le immagini con pan-sharpening devono essere utilizzate con cautela per scopi di telerilevamento analitico.</div>",
		pathAllocationName: "Assegnazioni della Distanza del Percorso",
		pathAllocationSnip: "Calcola l'origine più economica per ogni cella in base al minor costo cumulativo su una superficie di costo, tenendo comunque in considerazione i fattori relativi alla distanza della superficie insieme ai costi orizzontale e verticale.",
		pathAllocationDesc: "La funzione Assegnazione distanza di percorso calcola l'origine più vicina per ogni cella in base al costo cumulativo minore su una superficie di costo, tenendo conto dei fattori relativi alla distanza della superficie e al costo orizzontale e verticale.",
		pathBackLinkName: "Back Link Distanza Percorso",
		pathBackLinkSnip: "Definisce l'elemento vicino che corrisponde alla cella successiva nel percorso di costo cumulativo minore per l'origine più economica, tenendo comunque in considerazione i fattori relativi alla distanza della superficie insieme ai costi orizzontale e verticale.",
		pathBackLinkDesc: "La funzione Backlink distanza di percorso definisce la direzionalità del vicino corrispondente alla cella successiva nel percorso di costo cumulativo minore verso l'origine più vicina, tenendo conto dei fattori relativi alla distanza della superficie e al costo orizzontale e verticale.",
		pathDistanceName: "Distanza Percorso",
		pathDistanceSnip: "Calcola per ogni cella la distanza di costo cumulativo minore da o verso l'origine più economica, tenendo conto dei fattori relativi alla distanza della superficie e al costo orizzontale e verticale.",
		pathDistanceDesc: "La funzione Distanza di percorso calcola per ogni cella la distanza di costo cumulativo minore verso l'origine più vicina, tenendo conto dei fattori relativi alla distanza della superficie e al costo orizzontale e verticale.",
		plusName: "Plus",
		plusSnip: "Aggiunge (somma) i valori di due raster in base alle singole celle.",
		plusDesc: "La funzione Più aggiunge (somma) i valori di due raster in base ai singoli pixel.",
		powerName: "Potenza",
		powerSnip: "Eleva i valori di cella in un raster alla potenza dei valori trovati in un altro raster.",
		powerDesc: "La funzione Potenza eleva i valori di pixel in un raster alla potenza dei valori trovati in un altro raster.",
		radarCalibrationName: "Calibrazione radar",
		radarCalibrationSnip: "Converte retrodiffusione RADARSAT-2.",
		radarCalibrationDesc: "Questa funzione può essere usata per calibrare le immagini RADARSAT-2 in un mosaic dataset o come prodotto di un raster. La calibrazione viene eseguita su immagini radar in modo che i valori dei pixel siano una rappresentazione fedele del retrodiffusione radar.",
		rasterInfoName: "RasterInfo",
		rasterInfoSnip: "Modifica le proprietà del raster, ad esempio la profondità in bit, il valore NoData, le dimensioni cella e così via.",
		rasterInfoDesc: "Info raster apre una finestra di dialogo contenente le proprietà dei dataset raster, come il numero di colonne e righe, il numero di bande, il tipo di pixel, l'estensione e il riferimento spaziale. È possibile modificare queste proprietà selezionando un dataset raster da usare come modello. ",
		rasterizeAttributesName: "Rasterizza attributi",
		rasterizeAttributesSnip: "Arricchisce un raster con bande aggiuntive derivate da valori di attributi specificati provenienti da una tabella esterna o da un feature service.",
		rasterizeAttributesDesc: "La funzione Rasterizza attributi arricchisce un raster aggiungendo bande derivate da valori di attributi specificati da una tabella esterna o un feature service. È possibile specificare un raster zona e l'attributo ID zona associato per abilitare le ricerche per regione.",
		rasterizeFeatureClassName: "Rasterizza feature",
		rasterizeFeatureClassSnip: "Converte le feature in raster.",
		rasterizeFeatureClassDesc: "La funzione converte i dati di feature class poligono, polilinea e punto in un layer raster.<div><br/>Alle feature vengono assegnati valori dei pixel in base all'OBJECTID delle feature (impostazione predefinita). Facoltativamente, i valori dei pixel possono essere basati su un campo di valore definito dall'utente nella tabella degli attributi della feature di input.</div>",
		recastName: "Recast",
		recastSnip: "Modifica i parametri di una catena di funzioni in un mosaic dataset o in un image service. Viene spesso usata con dataset LAS per evitare di dover creare un mosaic dataset separato per diverse rappresentazioni del terreno.",
		recastDesc: "La funzione Recast consente di modificare dinamicamente il parametro della funzione usata in un mosaic dataset o in un image service senza conservare fisicamente le modifiche.",
		regionGroupName: "Gruppo Regione",
		regionGroupSnip: "Per ogni cella dell'output viene registrata l'identità della regione connessa cui appartiene la cella. A ogni regione viene assegnato un numero univoco.",
		regionGroupDesc: "La funzione globale Gruppo regione registra per ogni cella dell'output l'identità della regione connessa cui appartiene la cella. A ogni regione viene assegnato un numero univoco.<div><br/>La prima regione scansionata riceve il valore uno, la seconda il due e così via finché non viene assegnato un valore a tutte le regioni. Il processo di scansione si sposta da sinistra a destra, da sopra a sotto. I valori assegnati alle zone di output si basano sull’ordine di rilevamento delle stesse durante il processo di scansione.</div>",
		regionGrowName: "Aumento regione",
		regionGrowSnip: "Aumenta le regioni da punti di seed.",
		regionGrowDesc: "La funzione di aumento regione raggruppa i pixel vicini in gruppi in base al raggio specificato dal punto di seed. Al gruppo di pixel o oggetto viene assegnato un valore di riempimento specificato.",
		remapName: "Rimappa",
		remapSnip: "Cambia i valori in pixel assegnando nuovi valori a intervalli di valori in pixel o utilizzando una tabella esterna.",
		remapDesc: "La funzione Rimappa consente di modificare o riclassificare i valori dei pixel dei dati raster. Questa operazione può essere eseguita specificando un intervallo di valori dei pixel da mappare in un valore di pixel di output o utilizzando una tabella per mappare i valori dei pixel in un valore pixel di output.",
		reprojectName: "Riproietta",
		reprojectSnip: "Modifica la proiezione di un dataset raster, di un mosaic dataset o di un elemento raster in un mosaic dataset. Può anche ricampionare i dati in una nuova dimensione cella e definire un'origine.",
		reprojectDesc: "La funzione Riproietta modifica la proiezione di un raster dataset, un mosaic dataset o un elemento raster in un mosaic dataset. Può anche ricampionare i dati in una nuova dimensione cella e definire un'origine.<div><br/>La funzione Riproietta può essere usata quando si crea una cache da un raster o mosaic dataset che non si trova nella proiezione richiesta. Ad esempio, quando si crea un image service memorizzato nella cache che potrebbe essere integrato da applicazioni con altri servizi memorizzati nella cache, è importante che si trovino tutti nella stessa proiezione. Questa è spesso una proiezione Web Mercator. Dal momento che non è possibile riproiettare il mosaic dataset, è possibile realizzare una delle due operazioni seguenti:—creare un mosaic dataset proiettato a partire dal mosaic dataset nella proiezione necessaria o aggiungere la funzione Riproietta alla lista di funzioni del mosaic dataset. Un altro esempio di utilizzo di questa funzione è sull'elemento raster in un mosaic dataset. Quando si usa la funzione Raster memorizzato nella cache, si può scegliere di inserire la funzione Riproietta in modo da creare la cache nella nuova proiezione. Gli elementi raster in un mosaic dataset possono essere memorizzati nella cache quando l'elaborazione è intensa e si sta cercando di pubblicare un image service veloce, senza memorizzare l'intero image service nella cache.</div>",
		resampleName: "Ricampiona",
		resampleSnip: "Cambia la dimensione cella di un raster.",
		resampleDesc: "La funzione Ricampiona modifica la dimensione della cella, il tipo di ricampionamento o entrambi.<div><br/>La funzione Ricampiona deve essere usata esclusivamente con requisiti di calcolo specifici, ad esempio, in caso di calcolo della grandezza-direzione del vento o della corrente che richiede il ricampionamento dalla risoluzione dell'origine.</div>",
		roundDownName: "Round Down",
		roundDownSnip: "Restituisce il numero intero successivo più basso, rappresentato come un valore a virgola mobile, per ogni cella in un raster.",
		roundDownDesc: "La funzione Round Down restituisce il numero intero successivo più basso, come un valore a virgola mobile, per ogni pixel in un raster.",
		roundUpName: "Round Up",
		roundUpSnip: "Restituisce il numero intero successivo più alto, rappresentato come un valore a virgola mobile, per ogni cella in un raster.",
		roundUpDesc: "La funzione Round Up restituisce il numero intero successivo più alto, come un valore a virgola mobile, per ogni pixel in un raster.",
		segmentMeanShiftName: "Segmenta Spostamento Medio",
		segmentMeanShiftSnip: "Raggruppa pixel vicini con caratteristiche spettrali simili in segmenti.",
		segmentMeanShiftDesc: "Questa funzione identifica oggetti, feature o segmenti nelle immagini raggruppando pixel adiacenti con caratteristiche spettrali e spaziali simili. È possibile controllare la quantità di smussamento spaziale e spettrale per derivare più facilmente le feature di interesse.",
		s1RadiometricCalibrationName: "Sentinel-1 Calibrazione radiometrica",
		s1RadiometricCalibrationSnip: "Esegue vari tipi di calibrazione radiometrica sui dati Sentinel-1.",
		s1RadiometricCalibrationDesc: "Questa funzione raster esegue tre diverse calibrazioni per i dataset Sentinel 1, tra cui la calibrazione beta nought e gamma, e restituisce il dataset calibrato. L'obiettivo della calibrazione SAR è quello di fornire immagini in cui i valori dei pixel possono essere correlati direttamente alla retrodiffusione radar della scena. Sebbene per l’uso qualitativo siano sufficienti immagini SAR non calibrate, l'uso quantitativo dei dati SAR richiede immagini SAR calibrate.<div><br/>L'elaborazione tipica dei dati SAR, che produce immagini di livello 1, non include le correzioni radiometriche e i resti di bias radiometrici significativi. Pertanto, è necessario applicare la correzione radiometrica alle immagini SAR in modo che i valori dei pixel delle immagini rappresentino realmente ila retrodiffusione radar della superficie riflettente. La correzione radiometrica è necessaria, inoltre, per eseguire il confronto di immagini SAR acquisite con sensori diversi, acquisite dallo stesso sensore ma in momenti diversi o in modalità diverse, oppure elaborate da processori diversi.</div>",
		s1ThermalNoiseRemovalName: "Sentinel-1 Rimozione del rumore termico",
		s1ThermalNoiseRemovalSnip: "Rimuove il rumore termico dai dati Sentinel-1.",
		s1ThermalNoiseRemovalDesc: "La correzione del rumore termico può essere applicata ai prodotti Sentinel-1 Level-1 Single Look Complex (SLC) e ai prodotti Level-1 Ground Range Detection (GRD) non ancora corretti. Inoltre, l’operatore può rimuovere questa correzione in base alle annotazioni del prodotto al fine di reintrodurre il segnale di rumore rimosso e riprodurre il prodotto originale. Le annotazioni del prodotto saranno aggiornate di conseguenza per consentire la riapplicazione della correzione. ",
		setNullName: "Imposta Null",
		setNullSnip: "Imposta Null consente di impostare le posizioni delle celle identificate su NoData in base a un criterio specificato. Restituisce NoData se una valutazione condizionale è True; restituisce il valore specificato da un altro raster se è False.",
		setNullDesc: "La funzione Imposta Null consente di impostare i pixel identificati come NoData in base a un criterio specifico. Restituisce NoData se una valutazione condizionale è true (1); restituisce il valore specificato nel False Raster se una valutazione condizionale è false (0). Questo criterio è specificato dall'output di una funzione matematica logica, che sarà il raster di input.",
		shadedReliefName: "Rilievo ombreggiato",
		shadedReliefSnip: "Crea una rappresentazione 3D, multibanda, codificata a colori della superficie, tenendo conto della posizione relativa del sole per l'ombreggiatura dell'immagine.",
		shadedReliefDesc: "La funzione Rilievo ombreggiato è una rappresentazione 3D a colori del terreno, creata unendo le immagini dei metodi codificati per elevazione e rilievo ombreggiato. Questa funzione usa le proprietà dell'altitudine e dell'azimut per specificare la posizione del sole.<div><br/></div>",
		sinHName: "SinH",
		sinHSnip: "Calcola il seno iperbolico di celle in un raster.",
		sinHDesc: "La funzione calcola il seno iperbolico dei pixel in un raster.",
		sinName: "Sin",
		sinSnip: "Calcola il seno di celle in un raster.",
		sinDesc: "La funzione calcola il seno dei pixel in un raster.",
		slopeName: "Pendenza",
		slopeSnip: "Calcola la percentuale di variazione da un valore in pixel rispetto ai suoi vicini.",
		slopeDesc: "Questa funzione raster calcola la pendenza, che equivale alla percentuale di variazione dell'elevazione per ogni cella del modello digitale di elevazione (DEM). È la prima derivata di un DEM.<div><br/>Questa funzione usa una funzione atan() accelerata. È sei volte più veloce e l'errore di approssimazione è sempre minore di 0,3 gradi.</div>",
		speckleName: "Rumore moltiplicativo",
		speckleSnip: "Fornisce filtri per ridurre il rumore in dataset di radar ad apertura sintetica.",
		speckleDesc: "Il rumore moltiplicativo è il rumore ad alta frequenza nei dati del radar. Le immagini generate dai sistemi radar ad apertura sintetica (SAR) sono fortemente soggette a effetti di rumore moltiplicativo dovuti all'elaborazione di segnali sparsi e all'interferenza di onde elettromagnetiche diffuse da superfici od oggetti. La funzione Rumore moltiplicativo filtra il dataset del radar soggetto a rumore moltiplicativo per attenuare il rumore mantenendo gli edge o le feature nitide nell’immagine.",
		spectralConversionName: "Conversione spettrale",
		spectralConversionSnip: "Applica una matrice a un’immagine multibanda.",
		spectralConversionDesc: "La funzione Conversione spettrale applica una matrice a un'immagine multibanda per influenzare i valori di colore dell'output.<div><br/>Alcuni sensori non rilevano le bande blu a causa del basso rapporto segnale-disturbo. Questa tecnica può essere utilizzata per convertire un'immagine a infrarossi con colori falsi in un'immagine a colori pseudonaturale.</div>",
		squareRootName: "Square Root",
		squareRootSnip: "Calcola la radice quadrata dei valori di cella in un raster.",
		squareRootDesc: "La funzione Radice quadrata calcola la radice quadrata dei valori dei pixel in un raster.",
		squareName: "Square",
		squareSnip: "Calcola il quadrato dei valori di cella in un raster.",
		squareDesc: "La funzione Quadrato calcola il quadrato dei valori dei pixel in un raster.",
		statisticsHistogramName: "Statistiche e Istogramma",
		statisticsHistogramSnip: "Definire o associare statistiche e istogramma.",
		statisticsHistogramDesc: "La funzione Statistiche e Istogrammi viene utilizzata per definire le statistiche e l’istogramma di un raster. È possibile inserire questa funzione alla fine della catena di funzioni per descrivere le statistiche e l’istogramma di un modello di Raster Function (RFT). Ciò può essere necessario per controllare la visualizzazione predefinita del risultato dell’elaborazione, specialmente quando si definisce una catena di funzioni che contiene molte funzioni.<div><br/>È possibile definire statistiche digitando i valori o importando da un dataset raster o un file XML. Gli istogrammi possono essere definiti solo importando un file.</div>",
		statisticsName: "Statistiche",
		statisticsSnip: "Calcola le statistiche della focale per ogni pixel di un'immagine in base agli elementi vicini con focale definita.",
		statisticsDesc: "La funzione Statistiche calcola le statistiche della focale per ogni pixel di un'immagine in base agli elementi vicini con focale definita.<div><br/>La funzione Statistics può essere usata per riempire delle linee rimosse in un'immagine. Le linee rimosse sono spesso causate da problemi al sensore laddove non si raccolgono dati. Ciò si è verificato in sensori come Enhanced Thematic Mapper Plus (ETM+) di Landsat 7.  I dati mancanti causano problemi per l'analisi, nonché quando si guardano le immagini. Quando si usano le immagini per un'analisi non esistono interventi risolutori; tuttavia, nel caso in cui esista un'immagine sovrapposta, è possibile usarla al posto del contenuto mancante. È possibile eseguire la stessa operazione se si usa l'immagine per la visualizzazione. Tuttavia, non esiste sempre un'immagine aggiuntiva per riempire il contenuto mancante, pertanto deve essere derivata dai dati esistenti.</div>",
		streamLinkName: "Collegamento flusso",
		streamLinkSnip: "Assegna valori univoci alle sezioni di una rete lineare raster tra le intersezioni.",
		streamLinkDesc: "La funzione globale Collegamento flusso assegna valori univoci alle sezioni di una rete lineare raster tra le intersezioni.<div><br/>I collegamenti sono le sezioni di un canale di flusso che collega due nodi che si susseguono, un nodo e lo sbocco, o un nodo e lo spartiacque di drenaggio. In idrologia, questi segmenti di flusso sono chiamati tratti. Un nodo fa riferimento a un punto di versamento e aiuta a delineare uno spartiacque o un limite del sottobacino di drenaggio.</div>",
		stretchName: "Estende",
		stretchSnip: "Migliora un’immagine regolando l’intervallo dei valori visualizzati. I valori dei pixel sottostanti non vengono alterati. Se un pixel ha un valore al di fuori dell'intervallo specificato, verrà visualizzato come valore minimo o massimo.",
		stretchDesc: "La funzione Stretch migliora un'immagine modificando proprietà come luminosità, contrasto e gamma tramite vari tipi di estensione. Questa funzione usa le statistiche dei raster contenuti nel mosaic dataset; pertanto, prima di usare questa funzione, è necessario assicurarsi che le statistiche siano state calcolate.<div><br/>Il tipo di estensione definisce un'estensione di istogramma che sarà applicata ai raster per migliorarne l'aspetto. L’applicazione dell’estensione migliora l’aspetto dei dati distribuendo i valori dei pixel lungo un istogramma dai valori minimi a quelli massimi, in base alla profondità in bit. </div>",
		swathName: "Contrassegna",
		swathSnip: "Interpola da griglie irregolari o dati contrassegnati.",
		swathDesc: "Alcuni dataset netCDF o HDF archiviano la loro geoposizione come array irregolarmente spaziati. Quando si aggiungo questi dataset a un dataset di mosaico, la funzione Swath prende i dati reticolati irregolarmente e li ricampiona in modo che ogni pixel sia di dimensione uniforme e quadrato.<div><br/>Quando si aggiungono variabili da netCDF o HDF a un mosaic dataset, si verificherà automaticamente se i dati sono disposti regolarmente nell'array. In caso contrario, si applica automaticamente la funzione Swath per convertire il raster irregolare in punti e, quindi, in un raster regolarmente reticolato. È possibile cambiare il metodo di interpolazione e la dimensione delle celle usati nella funzione raster Swath. Per dati raster spaziati in modo regolare, non si applicherà nessuna interpolazione, i dati saranno letti così come sono.</div>",
		tanHName: "TanH",
		tanHSnip: "Calcola la tangente iperbolica di celle in un raster.",
		tanHDesc: "La funzione calcola la tangente iperbolica dei pixel in un raster.",
		tanName: "Tan",
		tanSnip: "Calcola la tangente di celle in un raster.",
		tanDesc: "La funzione calcola la tangente dei pixel in un raster. ",
		tasseledCapName: "Tasseled Cap (Kauth-Thomas)",
		tasseledCapSnip: "Calcola i livelli di vegetazione, umidità e luminosità. Questa tecnica si basa su coefficienti che devono essere calcolati specificatamente per un sensore.",
		tasseledCapDesc: "La trasformazione Tasseled Cap (Kauth-Thomas) è progettata per analizzare e mappare le variazioni di fenomenologia di vegetazione e sviluppo urbano rilevate da vari sistemi di sensori satellitari. È noto come trasformazione Tasseled Cap, a seguito della forma della distribuzione grafica dei dati. La trasformazione ha fornito una logica per i modelli trovati nei dati Landsat MSS dei campi agricoli in funzione del ciclo di vita del raccolto. Essenzialmente, mentre i raccolti crescono dal seme alla maturità, vi è un aumento netto nell'infrarosso vicino e una diminuzione della riflettanza rossa basata sul colore del suolo<div><br/>L'utilità di questa trasformazione si è ampliata dal monitoraggio del raccolto all'analisi e al Mapping della vegetazione per supportare una varietà di applicazioni quali silvicoltura, gestione della vegetazione industriale, mappatura e gestione dell'ecosistema, inventario e monitoraggio della cattura e dei crediti di carbonio, sviluppo urbano e altro. Inoltre, è stata ampliata la compatibilità di Landsat MSS in modo da includere altri popolari sistemi satellitari, tra cui i sensori multispettrali Landsat TM, Landsat ETM+, Landsat 8, IKONOS, QuickBird, WorldView-2 e RapidEye.</div>",
		timesName: "Volte",
		timesSnip: "Moltiplica i valori di due raster in base alle singole celle.",
		timesDesc: "La funzione Volte moltiplica i valori di due raster in base ai singoli pixel.",
		transposeBitsName: "Trasponi bit",
		transposeBitsSnip: "Decomprime i bit del pixel di input e li associa a bit specificati nel pixel di output. Lo scopo di questa funzione è manipolare i bit da un paio di input, come i prodotti banda di qualità Landsat 8.",
		transposeBitsDesc: "La funzione Trasponi bit decomprime i bit del pixel di input e li associa a bit specificati nel pixel di output. Lo scopo di questa funzione è manipolare i bit da un paio di input, ad esempio i prodotti banda di qualità Landsat 8.",
		unitConversionName: "Conversione unità",
		unitConversionSnip: "Cambia i valori da un'unità di misura a un'altra.",
		unitConversionDesc: "Questa funzione converte i pixel da un’unità a un’altra. Supporta la conversione di distanza, velocità e temperatura.",
		vectorFieldName: "Campo vettoriale",
		vectorFieldSnip: "Visualizza i dataset con grandezza (u) e direzione (v) come frecce dove la grandezza è rappresentata dalla dimensione e la direzione è rappresentata dall'angolo della freccia.",
		vectorFieldDesc: "La funzione Campo vettoriale viene usata per combinare e convertire due raster in un raster a due bande con dati di tipo Grandezza-Direzione o di tipo U-V.<div><br/>Il valore U viene talvolta indicato come velocità zonale, mentre il valore V come velocità meridionale.</div>",
		viewshed2Name: "Campo di Visibilità",
		viewshed2Snip: "Determina le posizioni della superficie raster visibile a un insieme di feature osservatori, utilizzando metodi geodetici.",
		viewshed2Desc: "La funzione Campo di visibilità determina le posizioni della superficie raster visibili a un insieme di feature osservatore, utilizzando metodi geodetici<div><br/>La visibilità del centro di ciascun pixel è determinata da un test di analisi della linea di vista tra l'obiettivo e ciascun osservatore. Se un osservatore è in grado di vedere l’obiettivo al centro del pixel, il pixel è considerato visibile. Questo strumento determina la visibilità tenendo sempre conto della curvatura della terra.</div>",
		watershedName: "Spartiacque",
		watershedSnip: "Determina l'area contribuente su una serie di celle in un raster.",
		watershedDesc: "La funzione globale Spartiacque determina l'area contribuente su una serie di pixel in un raster. Gli spartiacque sono delineati da un raster di direzione del flusso che individua la direzione del flusso in ciascun pixel.",
		weightedOverlayName: "Sovrapposizione Verificata",
		weightedOverlaySnip: "Sovrappone più raster utilizzando una scala di misurazione e pesi comuni ciascuno in base alla sua importanza.",
		weightedOverlayDesc: "Questa funzione consente di sovrapporre più raster utilizzando una scala di misurazione e un peso comune, ciascuno in base alla relativa importanza.",
		weightedSumName: "Somma Verificata",
		weightedSumSnip: "Pesa e aggiunge un array di raster in base alle singole celle.",
		weightedSumDesc: "La funzione Somma verificata consente di sovrapporre più raster moltiplicando ciascuno per il relativo peso e sommandoli insieme.",
		windchillName: "Wind Chill",
		windchillSnip: "Combina la temperatura dell'aria circostante e la velocità del vento per calcolare il fattore windchill.",
		windchillDesc: "La funzione Wind Chill è utile per identificare condizioni invernali pericolose che, a seconda dei tempi di esposizione agli elementi, possono provocare congelamento o addirittura ipotermia. Il wind chill è un metodo di misurazione della sensazione di freddo di un individuo che prende in considerazione il vento con temperature già fredde. Maggiore è la velocità del vento, più rapidamente il corpo perderà calore e maggiore sarà il freddo percepito.",
		zonalRemapName: "Rimappatura zonale",
		zonalRemapSnip: "Ricalcola i pixel in un raster in base alle zone definite da un altro raster e a una mappatura di valori dipendente dalla zona definita da una tabella.",
		zonalRemapDesc: "Questa è una funzione che ricalcola i pixel in un raster, in base alle zone definite da un altro raster e a una mappatura di valori dipendente dalla zona definita da una tabella.",
		zonalStatisticsName: "Statistiche zonali",
		zonalStatisticsSnip: "Calcola statistiche sui valori di un raster all'interno delle zone di un altro dataset.",
		zonalStatisticsDesc: "La funzione calcola statistiche sui valori di un raster all'interno delle zone di un altro dataset. Una zona viene definita come tutte le aree nell'input che hanno lo stesso valore. Tali aree non devono essere contigue. Quando gli input di zona e di valore sono entrambi dei raster della stessa risoluzione, saranno usati direttamente. Se le risoluzioni sono diverse, verrà applicato un ricampionamento interno per far corrispondere le risoluzioni prima che venga eseguita l'operazione zonale.",
		flowLengthName: "Lunghezza Flusso",
		flowLengthSnip: "Calcola la distanza a monte o a valle, o distanza ponderata, lungo il percorso di flusso per ciascuna cella.",
		flowLengthDesc: "Questa è una funzione raster globale. Questa funzione crea un layer raster della distanza a monte o a valle, o distanza ponderata, lungo il percorso di flusso per ogni cella.<div><br/>Un utilizzo primario della funzione lunghezza di flusso è quello di calcolare la lunghezza del percorso di flusso più lungo all'interno di un bacino determinato. Questa misurazione viene spesso utilizzata per calcolare il tempo di concentrazione di un bacino. Questa operazione viene effettuata utilizzando l'opzione A monte. La funzione può inoltre essere utilizzata per creare diagrammi aree di distanza di piogge e straripamenti ipotetici utilizzando il raster ponderato come impedimento per il movimento verso il basso.</div>",
		streamOrderName: "Ordine di Flusso",
		streamOrderSnip: "Assegna un ordine numerico ai segmenti di un raster che rappresentano le diramazioni di una rete lineare",
		streamOrderDesc: "Questa è una funzione raster globale. Questa funzione crea un layer raster che assegna un ordine numerico ai segmenti di un raster che rappresentano le diramazioni di una rete lineare.<div><br/>L'output della funzione dell'ordine di flusso sarà di qualità maggiore se il layer raster di flusso di input e il layer raster di direzione di flusso di input derivano dalla stessa superficie. Se il raster di flusso deriva da un dataset di flusso rasterizzato, l'output potrebbe non essere utilizzabile poiché, su una base di cella-per-cella, la direzione non corrisponderà alla posizione delle celle di flusso. I risultati della funzione Accumulo di flusso possono essere utilizzati per creare una rete di flusso raster applicando un valore di soglia per la selezione delle celle con un flusso di accumulo alto. Ad esempio, le celle che hanno più di 100 celle che fluiscono al loro interno vengono utilizzate per definire la rete di flusso. Utilizzare la funzione Con o Set Null per creare un raster di rete di flusso nel quale i valori di accumulo del flusso di 100 o più vanno in un'unica cella, e il resto vengono posti in background (NoData). La rete di flusso risultante può essere utilizzata nella funzione dell'ordine di flusso. Questa funzione supporta solo un layer raster di direzione di flusso di input D8. Le direzioni di flusso D8 possono essere create utilizzando la funzione di direzione di flusso ed eseguite tramite il tipo di direzione di flusso predefinito D8.</div>",
		snapPourPointName: "Aggancia Punto di Versamento",
		snapPourPointSnip: "Aggancia i punti di versamento alle celle di maggior accumulo del flusso entro una determinata distanza",
		snapPourPointDesc: "Questa è una funzione raster globale. Questa funzione aggancia i punti di versamento alle celle di maggior accumulo del flusso entro una distanza specificata.<div><br/>La funzione aggancia punto di versamento viene utilizzata per assicurare la selezione di punti di flusso di accumulo alto quando vengono delineati i bacini di drenaggio utilizzando la funzione Spartiacque. Aggancia punto di versamento ricercherà all'interno di una distanza di aggancio intorno ai punti di versamento specificati, fino a quando non troverà una cella con il flusso di accumulo massimo e sposterà il punto di versamento in quella posizione. L'output è un layer raster intero quando le posizioni dei punti di versamento originali sono state aggiunte alle posizioni del flusso di accumulo più alto.</div>",
		sinkName: "Pozzo",
		sinkSnip: "Crea un raster che identifica tutti i sink o le aree di drenaggio interno",
		sinkDesc: "Questa è una funzione raster globale. Questa funzione crea un layer raster che identifica tutti i sink o aree di drenaggio interno. Un sink è una cella o un set di celle connesse spazialmente con una direzione di flusso alla quale non può essere assegnato uno degli otto valori validi in un raster di direzione di flusso. Questo può verificarsi se tutte le celle vicine sono più alte della cella di elaborazione o se due celle fluiscono una nell'altra creando un loop a di due celle.<div><br/>La funzione sink supporta solo un layer raster di direzione di flusso D8. Le direzioni di flusso D8 possono essere create utilizzando la funzione di direzione di flusso ed eseguite tramite il tipo di direzione di flusso predefinito D8. L'output della funzione sink è un raster intero, con ogni sink assegnato a un valore univoco. Questi valori univoci hanno un intervallo che va da uno al numero totale di sink. Ad esempio, se il numero totale di sink fosse 1000, l'intervallo di valori univoci andrebbe da 1 a 1000.</div>",
		aggregateName: "Aggrega",
		aggregateSnip: "Genera una versione di risoluzione ridotta di un raster.",
		aggregateDesc: "La funzione Aggrega ricampiona un raster di input su una risoluzione più approssimativa in base a una strategia di aggregazione specificata. Ogni cella di output contiene Sum, Minimum, Maximum, Mean o Median delle cellule di input racchiuse dall’estensione di quella cella.<div><br/>È possibile specificare il fattore per il quale moltiplicare la dimensione cella del raster di input. Ad esempio, un valore fattore cella di 3 risulterebbe in un output in cui la dimensione cella è tre volte superiore rispetto a quella del raster di input. È possibile definire come gestire l'estensione dell'output se il numero di righe o colonne nell'output non è un multiplo esatto del fattore di cella. Per impostazione predefinita, i confini superiore e destro saranno ampliati per coprire un'estensione spaziale più ampia rispetto a quella del raster di input, per garantire l'elaborazione di tutte le celle di input. In alternativa, i confini superiore e destro possono essere ridotti per coprire un'estensione più piccola, in modo che il numero di righe e colonne elaborato sia un multiplo esatto del fattore di cella. È possibile definire come dovranno essere gestite le celle NoData dal calcolo di aggregazione.​Il meccanismo predefinito prevede che le celle NoData di input che rientrano nell'estensione spaziale di una cella più grande nel raster di output saranno ignorate quando si determina il valore di quella cella di output. In alternativa, è possibile specificare che se all'interno dell'estensione spaziale di una cella di output esiste anche solo una cella NoData di input, tale cella sarà NoData nel raster di output.</div>",
		ccdcName: "Analisi CCDC",
		ccdcSnip: "Valuta le variazioni dei valori dei pixel nel tempo utilizzando l'algoritmo Continuous Change Detection and Classification (CCDC) e genera i risultati del modello.",
		ccdcDesc: "La funzione Analisi CCDC valuta le variazioni dei valori dei pixel nel tempo utilizzando l'algoritmo Continuous Change Detection and Classification (CCDC) e genera un raster multidimensionale contenente i risultati del modello. È supportata solo in combinazione con la funzione di analisi Detect Change Using Change in un modello di funzione raster. Per produrre un output raster, collegare la funzione di analisi CCDC alla funzione di analisi Detect Change Using Change, salvare come modello di funzione raster ed eseguire l'analisi raster con il modello di funzione.<div><br/>Questa funzione utilizza l'algoritmo Continuous Change Detection and Classification (CCDC) per valutare le variazioni dei valori dei pixel nel tempo per una pila di immagini. In una serie temporale di immagini ottiche o derivati di immagine (ad esempio, NDVI), i valori dei pixel possono fluttuare per varie ragioni: 1. Variazione stagionale: le variazioni dei valori dei pixel riflettono le variazioni della vegetazione a causa della variabilità stagionale di temperature e precipitazioni. Nell'emisfero settentrionale, ad esempio, ci aspettiamo di trovare una densità più alta di vegetazione verde in estate rispetto all'inverno; 2. Variazione graduale: le variazioni dei valori dei pixel rispecchiano le tendenze nella vegetazione o nelle acque di superficie a causa della variabilità climatica o delle pratiche di gestione del suolo a lungo termine. Ad esempio, il suolo nudo potrebbe estendersi gradualmente a causa della riduzione delle precipitazioni a lungo termine; e 3. Variazione brusca: le variazioni dei valori dei pixel rispecchiano le variazioni della copertura del suolo che accadono improvvisamente a causa di deforestazione, sviluppo urbano, calamità naturali, e così via. L'algoritmo CCDC identifica tutti e tre i tipi di variazione con lo scopo primario di identificare la variazione brusca. I modelli di tendenza e regressione armonica sono adattati ai dati per stimare la variazione stagionale e graduale, e le deviazioni improvvise dai modelli di tendenza sono indicatori di una variazione brusca.<div><br/>L'algoritmo CCDC è stato originariamente concepito per dati Landsat TM, Landsat ETM+ e Landsat OLI, dati di riflettanza della superficie e temperatura di luminosità. Tuttavia, la funzione di analisi Detect Change Using Change in combinazione con questa funzione rileverà la variazione per le immagini multibanda da qualunque sensore supportato, nonché derivati di immagini a singola banda come gli indici di banda. Ad esempio, è possibile eseguire un rilevamento continuo delle modifiche su un raster Normalize Difference Vegetation Index (NDVI), perché le variazioni brusche nell'NDVI possono essere indicative di deforestazione.</div>",
		computeChangeName: "Calcola variazione",
		computeChangeSnip: "Calcola la differenza tra due dataset raster categorici o continui.",
		computeChangeDesc: "La funzione Calcola variazione può essere utilizzata per elencare le differenze tra due raster classificati per l'analisi della variazione della copertura del suolo oppure per esaminare le variazioni tra due raster continui a singola banda, come l'elevazione, la temperatura, la copertura da cime di alberi, e così via.",
		detectChangeName: "Analisi Detect Change Using Change",
		detectChangeSnip: "Genera un layer raster contenente informazioni sulle variazioni di pixel utilizzando il raster di analisi delle variazioni di output.",
		detectChangeDesc: "<div>La funzione Analisi Detect Change Using Change genera un layer raster contenente informazioni sulle variazioni di pixel utilizzando il raster di analisi delle variazioni di output del raster di analisi. Il raster di variazione analisi deve essere generato da Analyse Change utilizzando lo strumento CCDC o lo strumento Analyse Changes utilizzando LandTrendr, o la funzione di raster analisi CCDC o la funzione raster analisi LandTrendr.</div><br><div>Questa funzione raster può essere combinata con la funzione raster analisi CCDC o la funzione raster LandTrendr in un modello funzione raster. Per produrre un output raster permanente, collegare l'output della funzione di analisi CCDC o LandTrendr alla funzione Detect Change Using Change, salvarlo come modello funzione raster ed eseguire l'analisi raster come modello.</div><br><div>Il parametro <strong>Tipo di variazione</strong> indica l'informazione che è stata generata. Le informazioni vengono estratte dal raster di analisi di modifica. Quando si esegue questa funzione su un output della funzione/strumento CCDC, è possibile scegliere tra le seguenti opzioni:</div><ul><li><strong>Ora di ultima variazione</strong>--La data più recente e l'ora in cui un pixel è stato contrassegnato come variazione.</li><li><strong>Ora di variazione più recente</strong>--La data e l'ora più recenti alle quali un pixel è stato contrassegnato come variazione.</li><li><strong>Ora di maggiore variazione</strong>--La data e l'ora alle quali è stata calcolata la variazione più significativa per un pixel.</li><li><strong>Numero di variazioni</strong>--Il numero totale di variazioni di un pixel.</li></ul><div>Quando si esegue questa funzione sull'output dalla funzione/attrezzo LandTrendr, sono disponibili le seguenti opzioni aggiuntive:</div><ul><li><strong>Ora della modifica più lunga</strong>--La data in cui un pixel è stato segnalato come variazione, all'inizio o alla fine del periodo di variazione più lungo.</li><li><strong>Ora della variazione più breve</strong>--La data in cui un pixel è stato segnalato come variazione, all'inizio o alla fine del periodo di modifica più breve.</li><li><strong>Ora di variazione più veloce</strong>--La data in cui un pixel è stato segnalato come variazione, all'inizio o alla fine del periodo di modifica più breve.</li><li><strong>Ora della variazione più lenta</strong>--La data in cui un pixel è stato segnalato come variazione, all'inizio o alla fine del periodo di variazione più lenta. </li></ul><div>Il raster di output è un raster multibanda nel quale ogni banda contiene informazioni di variazione dipendenti dal tipo di variazione selezionata e il numero massimo di variazioni specificate. Per esempio, se <strong>Tipo di variazione</strong> è impostato su <strong>Ora di variazione più recente</strong> e <strong>Numero massimo di variazioni</strong> è impostato su 2, la funzione calcola le due date più recenti quando la variazione è avvenuta tramite la serie di orari per ogni pixel. Il risultato è un raster nel quale la prima banda contiene le date della variazione più recente per pixel, e la seconda banda contiene le date della penultima variazione più recente per pixel.</div><br><div>Quando si applica questa funzione su un output dagli strumenti LandTrendr, è possibile scegliere se estrarre la data che contrassegni l'inizio di una variazione o la fine di una variazione utilizzando il parametro <strong>Data segmento</strong>. Per esempio, per comprendere come la variazione più recente in una serie di orari cominciati, impostare <strong>Cambia tipologia</strong> su <strong>Ora dell'ultima variazione</strong> e <strong>Data segmento</strong> su <strong>Inizio di un segmento</strong></div><br><div>Utilizzare i filtri parametri seguenti per estrarre dati più specifiche di variazione dal raster di variazione analisi:</div><ul><li><strong>Filtro per anno</strong>--Identificare le variazioni che avvengono all'interno di un periodo specifico, per esempio, se si sta cercando variazioni avvenute in un periodo di cinque anni di siccità.</li><li><strong>Filtro per durata</strong>--Identificare le variazioni che avvengono su un periodo di anni, per esempio, se si sta cercando variazioni brusche che siano avvenute in 1 o 2 anni. È possibile calcolare la durata a cui si è interessati per l'utilizzo della formula <strong>concludere anno - iniziare anno +1</strong>. Intervalli nella serie di orari possono essere inclusi.</li><li><strong>Filtro per rilevanza</strong>--Identificare le variazioni di una rilevanza data, per esempio, se si sta cercando solamente per variazioni grandi nell'indice NDVI della vegetazione. La rilevanza è un valore assoluto, in modo che i valori minimi e massimi non possano essere negativi. Per specificare la variazione direzionale, utilizzare il parametro <strong>Varia direzione</strong>.</li></ul>",
		distanceAccumulationName: "Accumulo distanza",
		distanceAccumulationSnip: "Calcola la distanza accumulata per ciascuna cella dalle origini, consentendo di ottenere la distanza in linea retta, la distanza di costo, la distanza della superficie reale, nonché i fattori di costo verticale e orizzontale.",
		distanceAccumulationDesc: "Accumulo distanza calcola la distanza da ciascuna posizione nell'area di studio all'origine più vicina o di costo minimo. Se vengono specificate solo le origini per l'input, allora si calcola una distanza in linea retta da ciascuna posizione nell'area di studio. Se come input vengono utilizzate sia le origini sia le barriere, allora Accumulo distanza calcola la distanza in linea retta intorno alle barriere.​Sia per il raster di origine sia per quello di barriera, il valore di sfondo deve essere NoData, mentre le origini e le barriere sono rappresentate con valori di cella validi. I valori validi includono lo zero. <div><br/>Quando un raster di superficie viene fornito come input, allora si calcola la distanza di superficie reale tra le celle. Per eseguire l'analisi di costo adoperando Accumulo distanza, è necessaria una superficie di costo. Se si fornisce una superficie di costo, allora il risultato è un raster della distanza di costo accumulata. Quando sono specificati fattori orizzontali e verticali, allora si considera la direzionalità mentre si accumula il costo. Esistono quattro caratteristiche di origine utilizzabili. Queste caratteristiche, che possono essere dell'origine o movimenti dall'origine, sono controllate da parametri specifici:​1. Accumulo iniziale: imposta il costo iniziale prima dell'avvio del movimento. 2. Accumulo massimo: specifica il costo che un'origine può accumulare prima di raggiungere il proprio limite. 3. Moltiplicatore da applicare ai costi: specifica la modalità di viaggio o la grandezza all'origine. 4. Direzione di viaggio: identifica se il movimento parte da un'origine e si sposta su posizioni non di origine, oppure se parte da posizioni non di origine e torna a un'origine.<div><br/>Per impostazione predefinita, il risultato di Accumulo distanza è una banda singola, che costituisce il raster di accumulo distanza. Tuttavia, è anche possibile creare una seconda banda, la banda di direzione contraria.​Questa banda indica in quale direzione andare per arrivare all'origine di costo minimo a partire da ciascuna posizione nell'area di studio. Entrambe le bande saranno necessarie per stabilire i percorsi ottimali all'interno dell'area di studio. Per generare un percorso, utilizzare prima la funzione Estrai banda per estrarre il raster di accumulo della distanza e il raster di direzione contraria. Utilizzare questi layer come input per la funzione Percorso di costo. Nella funzione, utilizzare il raster di accumulo della distanza come input del raster della distanza di costo e il raster di direzione contraria come input del raster backlink dei costi.</div>",
		distanceAllocationName: "Assegnazione della distanza",
		distanceAllocationSnip: "Calcola l'assegnazione della distanza per ciascuna cella dalle origini fornite in base a distanza in linea retta, distanza di costo, distanza della superficie reale e fattori di costo verticale e orizzontale.",
		distanceAllocationDesc: "Assegnazione della distanza calcola a quale origine è assegnata ciascuna posizione nell'area di studio. Se per l'input sono specificate solo le origini, allora le posizioni vengono assegnate utilizzando una distanza in linea retta rispetto all'origine più vicina. Se come input vengono utilizzate sia le origini sia le barriere, allora Assegnazione della distanza calcola la distanza in linea retta intorno alle barriere per stabilire a quale origine è assegnata una posizione.​Sia per il raster di origine sia per quello di barriera, il valore di sfondo deve essere NoData, mentre le origini e le barriere sono rappresentate con valori di cella validi. I valori validi includono lo zero.<div><br/>Per eseguire l'analisi di costo adoperando Assegnazione della distanza, è necessaria una superficie di costo. Se è specificata una superficie di costo, allora il risultato è un raster di assegnazione basato sul costo cumulativo, non sulla distanza in linea retta. Quando sono specificati fattori orizzontali e verticali, allora si considera la direzionalità mentre si accumula il costo. Quando un raster di superficie viene fornito come input, allora quando si stabilisce l'assegnazione si calcola la distanza di superficie reale percorsa nel passaggio tra le celle. Esistono quattro caratteristiche di origine utilizzabili. Queste caratteristiche, che possono essere dell'origine o movimenti dall'origine, sono controllate da parametri specifici:​1. Accumulo iniziale: imposta il costo iniziale prima dell'avvio del movimento. 2. Accumulo massimo: specifica il costo che un'origine può accumulare prima di raggiungere il proprio limite. 3. Moltiplicatore da applicare ai costi: specifica la modalità di viaggio o la grandezza all'origine. 4. Direzione di viaggio: identifica se il movimento parte da un'origine e si sposta su posizioni non di origine, oppure se parte da posizioni non di origine e torna a un'origine.<div><br/>Per impostazione predefinita, il risultato di Assegnazione della distanza è una banda singola, che costituisce il raster di assegnazione della distanza. Selezionando l'opzione booleana Genera riga e colonna di origine come bande aggiuntive nell'output si otterrà un raster multibanda costituito da tre bande. La prima banda è la banda di allocazione della distanza, la seconda banda contiene un indice di riga e la terza banda contiene un indice di colonna. Questi indici identificano la posizione della cella di origine che si trova alla minore distanza di costo cumulativa. L'indice della riga di origine e l'indice della colonna di origine possono essere utilizzati insieme per eseguire il mapping di intensità. Se si interroga una qualunque posizione nell'area di studio tra le bande due e tre, si conoscerà la riga e la colonna dell'origine di costo minimo per quella posizione.</div>",
		eucBackDirectionName: "Back Direction euclidea",
		eucBackDirectionSnip: "Calcola, per ogni cella, la direzione in gradi fino alla cella vicina seguendo il percorso più breve fino alla fonte più vicina evitando barriere.",
		eucBackDirectionDesc: "La funzione Back Direction euclidea crea un raster a virgola mobile continuo che rappresenta la direzione di ritorno all'origine più vicina in gradi evitando le barriere, nel caso in cui vi fossero barriere.<div><br/>Gli input della Back Direction euclidea sono l'origine in base alla quale sarà calcolata quella direzione. Un input opzionale è un raster che rappresenta le barriere all'interno dell'area di studio.​Sia per il raster di origine sia per quello di barriera, il valore di sfondo deve essere NoData, mentre le origini e le barriere sono rappresentate con valori validi. I valori validi includono lo zero. Per impostazione predefinita, il calcolo verrà eseguito fino all'estensione combinata di origini e barriere, più 2 righe e colonne. Se l'analisi serve solo all'interno di una distanza specifica dalle origini, allora è possibile utilizzare il parametro Distanza massima. Back Direction euclidea supporta nel calcolo sia un metodo Planare sia un metodo Geodetico. Il calcolo del metodo Planare verrà eseguito su un piano piatto proiettato utilizzando un sistema di coordinate cartesiane 2D. Il calcolo del metodo Geodetico verrà eseguito sull'ellissoide, il che significa che a prescindere dalla proiezione di input o di output i risultati non cambiano.<div><br/>Il risultato della funzione Back Direction euclidea può essere utilizzato in combinazione con il risultato della funzione Distanza euclidea per stabilire i percorsi più brevi dalle posizioni all'interno dell'area di studio all'origine. Sia il risultato di Back Direction euclidea sia quello di Distanza euclidea vengono utilizzati nella funzione Percorso di costo insieme alle destinazioni per generare i percorsi più brevi.</div>",
		expandName: "Espandi",
		expandSnip: "Espande le zone selezionate di un raster per zone del numero specificato di celle.",
		expandDesc: "Con la funzione globale Espandi, è possibile generalizzare o semplificare i raster ampliando zone specifiche. È anche possibile controllare la quantità di generalizzazione che avverrà.<div><br/>Le zone selezionate aumenteranno di dimensione espandendosi in altre zone. Concettualmente, è possibile visualizzare i valori di zona selezionati come zone in primo piano, mentre gli altri valori rimangono zone sullo sfondo. Le zone in primo piano possono espandersi nelle zone sullo sfondo.<div><br/>La quantità di generalizzazione può essere controllata con il parametro Numero di celle. Per impostazione predefinita, questo valore è 1, il che significa che le zone selezionate si espanderanno della quantità corrispondente alla dimensione di una sola cella. Per aumentare il grado di generalizzazione, è possibile specificare un valore più grande per questo parametro. Concettualmente, ciò equivale ad eseguire lo strumento tante volte quante il numero specificato e con i risultati dell'esecuzione precedente come input dell'iterazione successiva.</div>",
		trendAnalysisName: "Generare tendenza",
		trendAnalysisSnip: "Stima la tendenza per ciascun pixel lungo una dimensione per una o più variabili in un raster multidimensionale.",
		trendAnalysisDesc: "<div>Questa funzione può essere utilizzata per adattare dati lungo una linea di trend lineare, armonica o polinomica o può essere utilizzata per effettuare rilevamento del trend utilizzando il test Mann-Kendall o Seasonal-Kendall.</div><br><div>Il raster trend di output generato con questa funzione è utilizzato come input alla funzione <strong>Predici utilizzando trend</strong>.</div><br><div>I test Mann-Kendall o Seasonal-Kendall sono utilizzati per determinare se c'è un trend monotonico nei dati. Essi non sono parametrici, significa che non assumono una distribuzione specifica dei dati. Il test Mann-Kendall non considera la correlazione seriale o gli effetti stagionali. Se i dati sono stagionali, il testo Seasonal-Kendall è più appropriato.</div><br><div>Se lo strumento è utilizzato per eseguire sia il testo Mann-Kendall che il Seasonal-Kendall, l'output è un raster a cinque bande come segue:</div><ul><li>Banda 1 = Pendenza di Sen</li><li>Banda 2 = valore p</li><li>Banda 3 = Punteggio Mann-Kendall (S)</li><li>Banda 4 = Varianza S</li><li>Banda 4 = Varianza S</li><li>Banda 5 = Punteggio Z</li></ul><div>Gli output dal test Mann-Kendall o Seasonal-Kendall possono essere usare per determinare quali pixel nella serie di orari multidimensionale abbia trend staticamente significativi. È possibile utilizzare questa informazione nella congiunzione con l'analisi di trend lineare, armonico e polinomiale per estrarre i trend significativi nella serie di orari. È possibile generare una maschera inclusi pixel con valori p significativi, eseguire la maschera al raster multidimensionale, e utilizzare questo raster multidimensionale mascherato come input allo strumento per eseguire un'analisi di trend lineare, armonico o polinominale.</div><br><div>Ci sono tre opzioni di linea di trend per adattare un trend a valori variabili lungo una dimensione: lineare, polinomiale e armonico.</div><br><div>Per un'analisi di trend lineare, l'output è un raster a tre bande come segue:</div><ul><li>Banda 1 = Pendenza</li><li>Banda 2 = Intercettare</li><li>Banda 3 = Radice dell'errore quadrico medio (RMSD) o l'errore attorno alla linea che si adatta meglio</li></ul><div>Per l'analisi di trend polinominale, il numero di bande nell'output dipende dall'ordine polinominale. L'adattamento polinominale di secondo ordine produce un raster a quattro bande come segue:</div><ul><li>Banda 1 = Polinominale_2</li><li>Banda 2 = Polinominale_1</li><li>Banda 3 = Polinominale_0</li><li>Banda 4 = RMSE</li></ul><div>Questo adattamento polinominale di terzo ordine produce un raster a cinque bande come segue:</div><ul><li>Banda 1 = Polinominale_3</li><li>Banda 2 = Polinominale_2</li><li>Banda 3 = Polinominale_1</li><li>Banda 4 = Polinominale_0</li><li>Banda 5 = RMSE</li></ul><div>Per analisi di trend armonico, il numero di bande nell'output dipende sulla frequenza armonica. Quando la frequenza è impostata su 1, l'output è un raster a cinque bande come segue:</div><ul><li>Banda 1 = Pendenza</li><li>Banda 2 = Intercezione</li><li>Banda 3 = Harmonic_sin1</li><li>Banda 4 = Harmonic_cos1</li><li>Banda 5 = RMSE</li></ul><div>Quando la frequenza è impostata su 2, l'output è un raster a cinque bande come segue:</div><ul><li>Banda 1 = Pendenza</li><li>Banda 2 = Intercettazione</li><li>Banda 3 = Harmonic_in1</li><li>Banda 4 = Harmonic_cos1</li><li>Banda 5 = Harmonic_sin2</li><li>Banda 6 = Harmonic_cos2</li><li>Banda 7 = RMSE</li></ul><div>Il parametro <strong>Lunghezza di ciclo</strong> di un'analisi di trend armonico è utilizzata per indicare il numero e la lunghezza di cicli che ci si aspetta di vedere nei dati in un giorno o un anno. Per esempio, se si prevede che i dati subiscano due cicli di variazione in un anno, la lunghezza del ciclo sarà di 182,5 giorni o 0,5 anni. Se si dispone di dati di temperatura raccolti ogni tre ore, e c'è un ciclo di variazione al giorno, la lunghezza del ciclo è un giorno.</div><br><div>Il parametro <strong>Frequenza</strong> per analisi di trend armonico è utilizzato per descrivere il modello armonico per adattarlo ai dati. Se la frequenza è impostata su 1, una combinazione di curva lineare e armonica di primo ordine sarà utilizzare per adattarla al modello. Se la frequenza è 2, una combinazione di curva lineare, di primo ordine, armmonica e una curva di secondo ordine armonica verrà utilizzata per adattare i dati. Se la frequenza è 3, una curva armonica aggiuntiva di terzo ordine sarà utilizzata per formare i dati e così via.</div><br><div>La bontà di adattamento di un modello statistico può essere generata come output opzionale. La radice dell'errore quadratico medio (RMSE), il coefficiente di determinazione e il valore p della pendenza di trend può essere calcolato e rappresentato da simboli. Simboleggiare il layer raster trend di output utilizzando la simbologia <strong>RGB</strong> e specificare le statistiche come bande rosse, verdi e blu.</div><br>",
		spectralUnmixingName: "Separazione spettrale lineare",
		spectralUnmixingSnip: "Esegue la classificazione dei sottopixel e calcola l'abbondanza frazionaria di diversi tipi di copertura del suolo per i singoli pixel.",
		spectralUnmixingDesc: "La funzione Separazione spettrale lineare calcola la copertura frazionaria per i singoli pixel che contengono più tipi di copertura del suolo. Genera un layer multibanda, in cui ciascuna banda corrisponde all'abbondanza frazionaria di ciascuna classe di copertura del suolo. Ad esempio, è possibile utilizzarla per eseguire una classificazione della copertura del suolo su un'immagine multispettrale per identificare la vegetazione fotosintetica, il suolo nudo e la vegetazione morta o non fotosintetica.<div><br/>L'ordine del raster multibanda di output segue l'ordine del profilo spettrale di input. Il numero di classi non può superare il numero di bande nel raster di input. Ad esempio, non è possibile estrarre informazioni su più di 8 classi da un raster a 8 bande.</div>",
		multidimensionalFilterName: "Filtro multidimensionale",
		interpolateRasterByDimensionFunctionName: "Interpolare il raster per dimensione",
		interpolateRasterByDimensionFunctionSnip: "Interpola un raster multidimensionale a valori di dimensione specificati utilizzando sezioni adiacenti.",
		interpolateRasterByDimensionFunctionDesc: "<p>Questa funzione consente di stimare i valori dei pixel per una porzione di dimensione non definita in un raster multidimensionale. Ad esempio, se si dispone di un set di dati contenente la temperatura dell'oceano a livello della superficie e a 100 metri sotto il livello del mare e si desidera stimare la temperatura a 50 metri sotto il livello del mare, è possibile utilizzare questa funzione per ottenere una stima a quella profondità utilizzando il Definizione della dimensione dei valori.</p><p>Puoi anche eseguire il downsampling di un set di dati mensile in un set di dati giornaliero utilizzando la definizione della dimensione Per intervallo e specificando il valore del parametro Passo come 1 e il valore del parametro Unità come Giorni.</p><p>Utilizzare la definizione della dimensione Per raster di destinazione per stimare il valore per il raster di destinazione.</p>",
		multidimensionalFilterSnip: "Crea un layer raster da un dataset raster multidimensionale o da un layer raster multidimensionale sezionando i dati lungo le variabili e le dimensioni definite.",
		multidimensionalFilterDesc: "Il Filtro multidimensionale crea un layer raster multidimensionale filtrando ed estraendo un sottoinsieme di variabili da un raster multidimensionale. Ad esempio, si possiede un dataset multidimensionale che contiene 30 anni di dati mensili sulle precipitazioni e si desiderano estrarre solo i dati di tutti i mesi di gennaio per osservare le variazioni delle precipitazioni in quel mese.<div><br/>Utilizzare il parametro Definizione dimensione per sezionare le dimensioni utilizzando un intervallo, un valore o un intervallo di valori.​ Ad esempio, se si hanno a disposizione 10 anni di dati sulla salinità degli oceani, raccolti mensilmente e a intervalli di 2 metri di profondità fino ai 500 metri, è possibile utilizzare le diverse opzioni di definizione della dimensione per i seguenti scenari.​Scenario 1: estrarre i dati sulla salinità per il mese di gennaio nell'arco di un periodo di 10 anni. Scegliere Per valori, impostare Dimensione su StdTime e impostare Valori su Gennaio. Scenario 2: sezionare i dati sulla salinità in un intervallo di profondità da 0 a 150 m. Scegliere Per intervalli, impostare Dimensione su StdZ e impostare Valore minimo su -150 e Valore massimo su 0. Scenario 3: estrarre i dati sulla salinità per i primi 10 giorni di ogni mese di gennaio nell'arco di un periodo di 10 anni. Scegliere Per iterazione, impostare Dimensione su StdTime, impostare Inizio della prima iterazione e Fine della prima iterazione sull'inizio e sulla fine corrispondenti del periodo di iterazione, impostare Passaggio su 1 e impostare Unità su Anni.</div>",
		multidimensionalRasterName: "Raster multidimensionale",
		multidimensionalRasterSnip: "Aggiunge dati multidimensionali a una mappa come layer raster multidimensionale.",
		multidimensionalRasterDesc: "La funzione Raster multidimensionale aggiunge dati multidimensionali a una mappa come layer raster multidimensionale. Questa funzione è utile quando si eseguono flussi di lavoro di analisi raster utilizzando una catena di funzioni.<div><br/>I dataset raster multidimensionali supportati includono netCDF, GRIB, HDF e CRF di Esri. Sono supportati anche i dataset di mosaico multidimensionali.</div>",
		optimalPathAsRasterName: "Percorso ottimale come raster",
		optimalPathAsRasterSnip: "Calcola il percorso di costo minimo da un'origine a una destinazione.",
		optimalPathAsRasterDesc: "Questa funzione globale produce un raster di output che registra il percorso o i percorsi ottimali, dalle posizioni selezionate alla cella di origine più vicina definita nella superficie di costo cumulativo, in termini di distanza di costo.<div><br/>È generalmente richiesta l'esecuzione di una o più funzioni di costo ponderato (Accumulo distanza o Assegnazione della distanza) prima di eseguire la funzione Percorso ottimale come raster per creare i raster di direzione contraria e accumulo distanza di input.​Questi sono layer raster di input obbligatori per la funzione Percorso ottimale. I valori sul percorso ottimale di output rappresentano il numero di percorsi in una posizione data.​In molti casi, i percorsi seguono lo stesso itinerario, lasciando un'origine e poi divergendo per dirigersi verso destinazioni diverse. Ad esempio, un valore uno indica che c'è un solo percorso ottimale in una posizione data, mentre un valore cinque significa che in quella posizione ci sono cinque percorsi ottimali che attraversano quella cella nell'area di studio.<div><br/>I dati della destinazione di input devono essere un layer raster. L'insieme delle celle di destinazione è costituito da tutte le celle nel raster di input che contengono valori validi. Le celle con valori NoData non sono inclusi nell'insieme. Il valore zero è considerato una destinazione legittima. È possibile creare un raster di destinazione utilizzando gli strumenti di estrazione. Se si dispone di feature di destinazione o origine, è possibile convertirle in raster utilizzando la funzione Rasterizza feature. Utilizzare il raster di accumulo distanza o di direzione contraria come input del raster per la funzione di rasterizzazione. Questo garantirà che la feature viene rasterizzata utilizzando la stessa dimensione cella, estensione e riferimento spaziale degli altri raster nella funzione Percorso ottimale come raster.​La funzione Percorso ottimale come raster può anche essere utilizzata per derivare il percorso di minore resistenza da un modello di elevazione digitale (DEM). In questo caso, utilizzare il DEM per il raster di accumulo distanza di input e l'output della funzione Direzione flusso per il raster di direzione contraria.</div>",
		trendName: "Predire utilizzando una tendenza",
		trendSnip: "Calcola un layer raster multidimensionale previsto utilizzando il raster di tendenza di output dalla funzione Genera tendenza o dallo strumento di geoprocessing Genera raster tendenza.",
		trendDesc: "La funzione Predire utilizzando una tendenza calcola un layer raster multidimensionale previsto utilizzando il raster di tendenza di output dalla funzione Genera tendenza o dallo strumento di geoprocessing Genera raster tendenza.",
		rasterCollectionName: "Elaborare raccolta di raster",
		rasterCollectionSnip: "Elabora ciascuna sezione in un raster multidimensionale o ciascun elemento in un raster di mosaico.​Questa funzione può anche aggregare più sezioni in un'unica sezione.",
		rasterCollectionDesc: "La funzione Elaborare raccolta di raster elabora ciascuna sezione in un raster multidimensionale o ciascun elemento in un raster di mosaico.​Questa funzione può anche aggregare più sezioni in un'unica sezione.<div><br/>Questa funzione elabora ciascuna sezione in un raster multidimensionale o raster mosaico utilizzando un modello di funzione raster.​Questa funzione supporta le seguenti opzioni: 1. Specificare un modello di funzione raster per Funzione elemento. Ad esempio, si possiede un dataset di mosaico che contiene 20 anni di immagini Landsat e si desidera calcolare l'NDVI per ciascuna scena nella serie temporale. Per Funzione elemento, specificare un modello di funzione raster che contiene la funzione raster​NDVI. 2. Specificare un modello di funzione raster per la funzione Aggregazione. Ad esempio, si possiede un raster multidimensionale che contiene 10 anni di dati sulla temperatura giornaliera e si desidera calcolare la temperatura massima per ciascun anno. Nella funzione Aggregazione, specificare un modello di funzione raster che contenga la funzione Statistiche cella, con l'operazione impostata su Massimo. In Definizione aggregazione, impostare Dimensione su StdTime, impostare Tipo su Parola chiave intervallo e Intervallo parola chiave su Ogni anno. Si noti che se il dataset di mosaico di input non è multidimensionale, la funzione di aggregazione non rispetterà la definizione di aggregazione.​La funzione di aggregazione aggregherà tutti gli elementi o ciascun gruppo in uno solo, se sono definiti nel modello della funzione di aggregazione.​Per maggiori informazioni sull'uso dei gruppi in un dataset di mosaico, consultare Utilizzo elementi del dataset di mosaico in Modelli di funzione raster. 3. Specificare un modello di funzione raster per Funzione di elaborazione. La funzione o la catena di funzioni in questo modello viene utilizzata per visualizzare il nuovo raster elaborato.​Ad esempio, specificare un modello di funzione raster che contenga la funzione Colormap per cambiare la modalità di visualizzazione del layer raster elaborato. Si prega di notare che se l'input è un raster multidimensionale, la funzione di elaborazione viene applicata alla sezione di visualizzazione corrente.​Se l'input è un layer mosaico o un dataset di mosaico, la funzione di elaborazione viene applicata al raster di mosaico utilizzando il primo metodo per risolvere le sovrapposizioni. 3. Specificare i modelli per qualunque combinazione delle tre funzioni. Ad esempio, si possiede un dataset di mosaico contenente immagini Landsat di serie temporali e si desidera generare un'immagine composita dell'NDVI massimo. Per Funzione elemento, specificare un modello di funzione raster che contiene la funzione raster​NDVI. Per la funzione Aggregazione, specificare un modello di funzione raster che contenga la funzione Statistiche cella, con l'operazione impostata su Massimo. Per la funzione di elaborazione, specificare un modello di funzione raster che contiene la funzione Colormap. Si prega di notare che l'ordine di elaborazione della funzione segue l'ordine dei parametri di input. Ad esempio, la funzione Elemento sarà elaborata per prima.</div>",
		randomName: "Casuali",
		randomSnip: "Crea un raster con valori pixel casuali provenienti da una distribuzione pseudo casuale. Sono supportate varie distribuzioni e vari generatori di numeri casuali.",
		randomDesc: "La funzione Casuale crea un raster con valori pixel casuali che possono essere utilizzati nei modelli di funzione raster o nei dataset di mosaico.<div><br/>Molte funzioni hanno bisogno di uno o più raster di input; la funzione Casuale, invece, non richiede nessun raster di input. Ciò significa che si comporta in modo più simile a un dataset raster che a una funzione, quindi è necessario prestare particolare attenzione quando viene aggiunta o rimossa da una catena di funzioni.</div>",
		shrinkName: "Riduci",
		shrinkSnip: "Riduce le zone selezionate di un numero specificato di celle sostituendole con il valore della cella più frequente nelle vicinanze.",
		shrinkDesc: "Con la funzione globale Riduci, è possibile generalizzare o semplificare i raster rimpicciolendo zone specifiche. È anche possibile controllare la quantità di generalizzazione che avverrà.<div><br/>Le zone selezionate si ridurranno, o diminuiranno di dimensioni, e le celle delle zone circostanti si espanderanno all'interno di esse. Concettualmente, è possibile visualizzare i valori di zona selezionati come zone in primo piano, mentre gli altri valori rimangono zone sullo sfondo. Le celle nelle zone in primo piano possono essere sostituite dalle celle nelle zone di sfondo. È anche possibile sostituire le isole sottili all'interno di una zona, che possono essere visualizzate come confini condivisi con la zona.<div><br/>La quantità di generalizzazione può essere controllata con il parametro Numero di celle. Per impostazione predefinita, questo valore è 1, il che significa che le zone selezionate si ridurranno della quantità corrispondente alla dimensione di una sola cella. Per aumentare il grado di generalizzazione, è possibile specificare un valore più grande per questo parametro. Concettualmente, ciò equivale ad eseguire lo strumento tante volte quante il numero specificato e con i risultati dell'esecuzione precedente come input dell'iterazione successiva.</div>",
		trendToRGBName: "Da Tendenza a RGB",
		trendToRGBSnip: "Converte un raster di tendenza in un raster a tre bande (rosso, verde e blu).",
		trendToRGBDesc: "La funzione Da Tendenza a RGB converte un raster di tendenza in un raster a tre bande (rosso, verde e blu) Il raster di tendenza è generato dalla funzione raster Genera tendenza o dalla funzioni raster Analisi CCDC.<div><br/>Questa funzione è utile per visualizzare i dati dei coefficienti dei modelli della funzione Genera tendenza o dalla funzione Analisi CCDC. Entrambe le funzioni stimano le tendenze nei valori dei pixel mutevoli, ma i risultati delle funzioni sono difficili da interpretare direttamente.<div><br/>Come per molte funzioni raster, potrebbe essere necessario utilizzare la Regolazione gamma dinamica (DRA) per visualizzare meglio i risultati di questa funzione.</div>",
		landTrendrName: "Analisi LandTrendr",
		landTrendrSnip: "Valuta le variazioni dei valori dei pixel nel corso del tempo utilizzando il metodo di rilevamento delle tendenze di disturbo e di recupero basato su Landsat (LandTrendr) e genera un raster di analisi delle variazioni contenente i risultati del modello.",
		landTrendrDesc: "Questa funzione raster può essere utilizzata solo come input alla funzione raster 'Individuare variazione utilizzando l'analisi delle variazioni'. Per generare un output raster, collegare la funzione di analisi LandTrendr alla funzione 'Individuare variazione utilizzando l'analisi delle variazioni' in un modello di funzione raster e usare tale modello come input nello strumento di geoprocessing 'Generare raster da funzione raster'. Il risultato è un raster contenente informazioni relative all'ora in cui i valori dei pixel sono variati.<div><br>Lo scopo di questa funzione raster è estrarre le variazioni in una feature osservata, quindi le immagini multidimensionali ideali di input dovrebbero catturare un'osservazione coerente nel tempo e non dovrebbero includere interferenze atmosferiche o sensoriali, nuvole o ombre di nuvole. La buona prassi è utilizzare dati normalizzati e che possono essere mascherati utilizzando una banda di QA, ad esempio i prodotti di riflettanza superficiale di Landsat Collection 1 con una maschera a nuvola.<div><br>La funzione esegue l'analisi su un'immagine all'anno e il numero di sezioni annuali deve essere uguale o superiore al valore specificato nel parametro <strong>Numero minimo di osservazioni</strong>. Si raccomanda di disporre di almeno sei anni di dati.<div><br>Se si dispone di dati mensili, settimanali o giornalieri, si consiglia di selezionare più immagini di ogni anno (preferibilmente della stessa stagione), rimuovere le nuvole e l'ombra delle nuvole, quindi combinare le immagini per generare un'unica immagine che catturi bene l'osservazione. Se come raster multidimensionale di input vengono forniti dati mensili, settimanali o giornalieri, la funzione identificherà una sezione da analizzare in base alla data più vicina a quella fornita nel parametro <strong>Data gestione delle tolleranze</strong>.<div><br>Una feature in un paesaggio spesso richiede tempo per riprendersi da una variazione non permanente come un incendio boschivo o un'infestazione di insetti. Per controllare la velocità di recupero riconosciuta dal modello, impostare il parametro Soglia di recupero. Un segmento distinto non può avere un tasso di recupero più veloce di 1/soglia di recupero.<div><br>Il recupero da un cambiamento del paesaggio può avvenire in senso positivo o negativo. Ad esempio, quando un paesaggio subisce una deforestazione, una serie temporale di valori dell'indice di vegetazione mostra un calo dei valori dell'indice e il recupero mostra un graduale aumento dei valori dell'indice di vegetazione o una tendenza di recupero positiva. Specificare la direzione della tendenza di recupero con il parametro <strong>Il recupero ha aumentato la tendenza</strong>.",
		aggregateMultidimensionalName: "Aggregare multidimensionale",
		aggregateMultidimensionalSnip: "Combina i dati della variabile raster multidimensionale esistente lungo una dimensione.",
		aggregateMultidimensionalDesc: "La funzione Aggregata Multidimensionale crea un layer raster multidimensionale combinando i dati variabili del raster multidimensionale con una dimensione.<div><br>Usa il parametro di Definizione della Dimensione <strong></strong> per filtrare previamente i dati di input che vuoi aggregare. Ad esempio, se hai 30 anni di dati mensili, ma vuoi solamente creare un layer aggregato per i primi 15 anni, puoi usare il parametro <strong>di Definizione della Dimensione</strong> per specificare gli anni da includere nell'analisi.<div><br><ul><li>Estrai i dati di salinità per il mese di gennaio durante un periodo di 10 anni. Scegli <strong>In base ai Valori</strong>, adatta <strong>la Dimensione</strong> al <strong>Fuso Orario</strong>, ed imposta <strong>i Valori</strong> al <strong>gennaio</strong>.</li><li>Ritaglia i dati di salinità all'interno di un intervallo di profondità che va da 0 a 150 metri. Scegli <strong>In base agli Intervalli</strong>, adatta <strong>la Dimensione</strong> al <strong>Fuso Orario</strong>, ed imposta <strong>il Valore Minimo</strong> a <strong>-150</strong> e <strong>il Valore Massimo</strong> a <strong>0</strong>.</li><li>Estrai i dati di salinità per i primi 10 giorni di ogni gennaio durante un periodo di 10 anni. Scegli <strong>Per Iterazione</strong>, imposta <strong>la Dimensione</strong> al <strong>FusoOrario</strong>, imposta <strong>Inizio della prima iterazione</strong> e <strong>Fine della prima iterazione</strong> all'inizio e alla fine corrispondenti al periodo dell'iterazione, imposta <strong>Passaggio</strong> a <strong>1</strong>, e imposta <strong>Unità</strong> a <strong>Anni</strong>.</li></ul><div><br>Usa i parametri <strong>di Definizione dell'Aggregazione</strong> per scegliere la dimensione da stabilire e l'intervallo dell'aggregazione usando una parola chiave, un valore o un intervallo di valori. Ad esempio, se si dispone di 30 anni di dati sulla temperatura della superficie del mare, raccolti quotidianamente e ogni 5 metri di profondità fino a 100 metri, è possibile utilizzare le diverse opzioni di intervallo per i seguenti scenari:<div><br><ul><li>aggregare i dati di temperatura giornalieri in dati mensili, dove il risultato è un raster multidimensionale con 12 sezioni di tempo, ognuna delle quali è l'aggregato di ogni mese attraverso tutti gli anni. Scegli <strong>la Parola Chiave dell'Intervallo</strong> ed imposta la parola chiave a <strong>Ricorrente a cadenza Mensile</strong>.</li><li>Aggrega i dati sulla temperatura giornalieri in dati mensili, da cui il risultato è un raster multidimensionale con 360 fette, o 12 fette temporali per anno (30 anni x 12 mesi = 360 fette). Scegli <strong>la Parola Chiave dell'Intervallo</strong> ed imposta la parola chiave <strong>a cadenza Mensile</strong>.</li><li>Aggrega i dati mensili sulla temperatura ad intervalli di 4 mesi. Scegli <strong>il Valore dell'Intervallo</strong>, imposta <strong>l'Intervallo del Valore</strong> a 4, ed imposta <strong>l'Unità</strong> a <strong>Mesi</strong>.</li><li>Aggrega i dati sulla temperatura da 0 a 25 metri, poi da 25 a 50 metri, poi da 50 a 100 metri. Scegli <strong>le Serie di Intervalli</strong> e specifica le profondità minime e massime come <strong>0 25; 25 50; 50 100</strong>.</li></ul>",
		mergeRastersName: "Unisci raster",
		mergeRastersSnip: "Consente di combinare più dataset raster spazialmente o attraverso variabili e dimensioni.",
		mergeRastersDesc: "Questa funzione consente di creare un raster unito da una lista di raster. Ad esempio, se si dispone di un dataset a mosaico che contiene 30 anni di dati mensili sulle precipitazioni e un altro dataset con 10 anni di dati mensili sulla temperatura, è possibile combinarli in un raster multidimensionale con entrambe le variabili. <div><br>Se i raster multidimensionali di input contengono variabili diverse, il raster multidimensionale di output conterrà tutte le variabili. <div><br>Se i raster multidimensionali di input contengono dimensioni o valori di dimensione diversi, il raster multidimensionale di output includerà tutte le dimensioni e i valori di dimensione. <div><br>Se i raster multidimensionali di input contengono le stesse dimensioni e variabili ma estensioni spaziali diverse, il raster multidimensionale di output includerà le variabili e le dimensioni attraverso le estensioni spaziali unite.<div><br>Questa funzione può essere utilizzata anche quando si dispone di più raster che si desidera trattare come un singolo elemento, ad esempio quando si calcolano le stesse statistiche per tutti o durante il bilanciamento dei colori in modo da non dover bilanciare ogni immagine separatamente. Ciò è utile quando si lavora con immagini memorizzate come tile separati a causa di vincoli di dimensione del file. In tal modo, i tile saranno trattati come parte della stessa immagine.",
		boundaryCleanName: "Pulizia Boundary",
		boundaryCleanSnip: "Smussa il confine tra le zone.",
		boundaryCleanDesc: "<p>La funziona generalizza o semplifica i raster smussando i confini tra le zone. La funzione fornisce opzioni per controllare come le celle o le zone nell'input influenzino lo smussamento e la quantità che verrà applicata. Ogni cella di ingresso viene valutata utilizzando i suoi otto vicini immediati.</p><p>Il processo di smussamento prima ordina le celle vicine secondo una particolare priorità. La priorità determina quale zona dalle celle vicine possono sostituire il valore delle celle in elaborazione nell'output.</p><p>La priorità può essere basata o su il valore nelle zone o sulla grandezza nelle zone. Il parametro <strong>Tipo di ordinamento</strong> determina il tipo di ordinamento da utilizzare. </p><p>L'impostazione di default<strong>Non ordinare</strong> valuta la priorità basata sul valore delle zone. Le celle dalle zone con grandi valori avranno una priorità più alta per espandersi nelle zone con valori più bassi.</p><p>La grandezza o area totale delle zone può essere utilizzata per ordinare la priorità. Con l'impostazione <strong>Decrescente</strong>, le zone sono ordinate per grandezza in ordine decrescente. Le zone con area totale maggiore avranno la priorità di espandersi in zone con aree minori. Tramite l'impostazione <strong>Crescente</strong>, è vero il contrario: le zone con aree totali minori avranno la priorità di espandersi in zone con aree totali maggiori. </p><p>La quantità di smussamento è controllata dal parametro <strong>Esegui due volte espansione e contrazione</strong>, che determina il numero di volte che il processo di espansione e contrazione verrà eseguito.</p><p>Con l'impostazione non selezionata, il processo di espansione e contrazione viene eseguito una volta sola. Con l'impostazione selezionata, il processo di espansione e contrazione viene eseguito due volte, risultando in un grado aggiuntivo di smussamento dei confini delle zone.</p><p>Se i valori di tutte le otto celle vicine sono le stesse delle celle in elaborazione, la cella di output manterrà il valore delle celle di input.</p>",
		predictUsingRegressionName: "Predici utilizzando regressione",
		predictUsingRegressionSnip: "Calcola un rasted predetto in base ai dati raster di input e a un modello di regressione. Il modello di regressione è l'output proveniente dallo strumento di geoprocessing raster <strong> Modello di Regressione Alberi Casuali</strong>.",
		predictUsingRegressionDesc: "<p>Il modello di regressione è definito in un file definizione di regressione Esri (.ecd). Contiene tutte le informazioni di un dataset o set di dataset specifici e del modello di regressione, e viene generato dallo strumento di geoprocessing raster <strong> Modello di Regressione Alberi Casuali</strong>.</p><p>L'input può essere a banda singola, multibanda o raster multidimensionale, o tutti i tipi precedenti. I tipi di raster di input devono essere dello stesso tipo di raster addestrato dal modello di regressione.</p><ul><li>Quando l'input è un raster multibanda ogni banda viene considerata come una variabile di predizione. Le bande devono essere nello stesso ordine dell'input delle multibande usato nello strumento di addestramento del modello di regressione.</li><li>Quando l'input è un raster multidimensionale, ognivariabile è considerata una variabile di predizione, e deve essere a banda singola e avere una dimensione temporale. L'ordine e i nomi della variabile devono essere uguali all'input di quando il modello di regressione è stato addestrato. L'output è un raster multidimensionale.</li><li>L'input può essere un elenco di elementi. Il numero e l'ordine degli elementi deve corrispondere all'input di quando il modello di regressione è stato addestrato.</li></ul>",
		dimensionalMovingStatisticsName: "Statistiche del movimento dimensionale",
		dimensionalMovingStatisticsSnip: "Calcola le statistiche su una finestra mobile su dati multidimensionali lungo una dimensione specificata.",
		dimensionalMovingStatisticsDesc: "<p>La funzione Statistiche mobili dimensionali calcola varie statistiche all'interno di una finestra predefinita per tutti i valori di dimensione lungo una dimensione. Questa funzione accetta un livello raster multidimensionale come input e crea un livello raster multidimensionale come output con la stessa dimensione dimensionale del livello di input.</p><p>È possibile specificare una dimensione per la quale vengono presi in considerazione i valori di dimensione durante il calcolo. Per impostazione predefinita, calcola lungo la prima dimensione non spaziale. È inoltre possibile specificare una dimensione della finestra specificando i parametri Finestra indietro e Finestra avanti.</p><p>Quando il Tipo di statistica è impostato su Percentile, i parametri Valore percentile e Tipo di interpolazione percentile diventano disponibili. È possibile utilizzare questi parametri per specificare il percentile da calcolare e scegliere rispettivamente il tipo di interpolazione da utilizzare. Quando il Tipo di statistica è impostato su Media circolare, il parametro Valore di avvolgimento circolare diventa disponibile. Il valore di avvolgimento circolare viene utilizzato per convertire un valore lineare nell'intervallo di una data media circolare.</p>",
		terrainFlattenFunctionName: "Livellamento terreno",
		terrainFlattenFunctionSnip: "Corregge i dati radar ad apertura sintetica (SAR) in ingresso per le distorsioni radiometriche dovute alla topografia.",
		terrainFlattenFunctionDesc: "<p>La funzione raster Livellamento terreno corregge i dati radar ad apertura sintetica (SAR) in ingresso per le distorsioni radiometriche dovute alla topografia.</p><p>I dati radar in ingresso devono prima ricevere la calibrazione beta nought. Usa lo strumento Applica calibrazione radiometrica per calibrare i dati radar a beta zero.</p><p>Se il DEM di input non copre l'intero dataset SAR, lo strumento emette valori NoData per i pixel al di fuori dell'estensione del DEM per gli output gamma nought, sigma nought, area di dispersione e distorsione geometrica. Per l'output della maschera di distorsione geometrica, lo strumento emette valori indeterminati per i pixel al di fuori dell'estensione del DEM.</p><p>Il DEM di input deve essere nel sistema di coordinate geografico WGS 1984 (EPSG:4326).</p>",
		createColorCompositeFunctionName: "Crea colore composito",
		createColorCompositeFunctionSnip: "Crea un raster a tre bande da un dataset raster multibanda in cui ogni banda può utilizzare un calcolo algebrico basato sull'algebra delle bande.",
		createColorCompositeFunctionDesc: "<p>La funzione raster Crea colore composito crea un raster a tre bande da un dataset raster multibanda in cui ogni banda può utilizzare un calcolo algebrico basato sull'algebra delle bande.</p><p>Quando si definisce un algoritmo aritmetico a bande, è possibile inserire una formula algebrica a riga singola per ogni espressione per creare un output multibanda. Gli operatori supportati sono unari: più (+), meno (-), volte (*) e dividi (/).</p><p>Quando si utilizza un ID banda in un'espressione, identificare la banda anteponendo B o b al numero di banda.</p><p>Una combinazione di bande comunemente utilizzata per i radar ad apertura sintetica (SAR) in unità lineari è VV per il rosso, VH per il verde e VV/VH per il blu. Se i dati di input sono in decibel, la combinazione di bande deve essere VV per il rosso, VH per il verde e VV-VH per il blu.</p>",
		surfaceParametersName: "Parametri superficie",
		surfaceParametersSnip: "Determina i parametri di un raster superficie, ad esempio aspetto, pendenza e vari tipi di curvature tramite metodi geodetici.",
		surfaceParametersDesc: "<p>La funzione Parametri superficie determina i parametri di un raster superficie, ad esempio aspetto, pendenza e vari tipi di curvature tramite metodi geodetici.</p><p>Questa funzione può essere utilizzata per le seguenti applicazioni:</p><ul><li>Calcolo dell'aspetto e della pendenza tramite metodi geodetici.</li><li>Calcolo di vari tipi di curvature da un raster superficie di input, ad esempio <strong>Curvatura tangenziale (contorno normale)</strong>, che caratterizza la convergenza e la divergenza topografica di un flusso nella superficie.</li></ul>",
		leastCostCorridorName: "Corridoio costo minimo",
		leastCostCorridorSnip: "Calcola la somma di due raster di distanza di costo cumulativo con l'opzione che consente di applicare una soglia in base al costo cumulativo o percentuale.",
		leastCostCorridorDesc: "<p>I raster di input devono essere raster di accumulo distanza e di direzione inversa prodotti dalla funzione <strong>Accumulo distanza</strong> o <strong>Allocazione distanza</strong>. Devono essere utilizzati in base alla distanza di costo, e durante la creazione dei layer per ogni origine devono essere utilizzate le stesse impostazioni dei parametri. Per creare questi raster, non deve essere utilizzato alcun parametro dipendente dalla direzionalità (fattore orizzontale, fattore verticale e direzione di viaggio).</p><p>I valori del raster corridoio di output sono la somma del costo cumulativo per raggiungere una posizione fornita con le stesse unità dei raster di distanza di costo cumulativo di input.</p><p>Se un valore di <strong>Soglia</strong> specificato è maggiore del costo cumulativo massimo quando i due raster di accumulo vengono sommati, il raster corridoio di output coprirà la stessa area dei raster cumulativi di input.</p><p>Se un valore di soglia specificato è minore del valore minimo del raster corridoio, viene restituito un messaggio di avviso e il raster di output sarà vuoto.</p><p>Il raster corridoio di output potrebbe contenere celle con costi cumulativi leggermente maggiori del valore di soglia. Tale risultato deriva dai raster di direzione inversa che utilizzano celle assegnate con costi lievemente più alti della soglia per collegare le celle scollegate al corridoio.</p>",
		geometricMedianName: "Mediana geometrica",
		geometricMedianSnip: "La funzione Mediana geometrica calcola la mediana geometrica tra i pixel in una serie temporale di immagini multibanda.",
		geometricMedianDesc: "<p>Questa funzione riduce il rumore e le anomalie in immagini di serie temporali calcolando un pixel mediano geometrico per ogni pixel nella pila di immagini. L'algoritmo mantiene le relazioni spettrali tra bande negli spettri di pixel per cui l'output può essere utilizzato nell'analisi, ad esempio per gli indici di vegetazione.</p><p>Nuvole e ombre devono essere mascherate utilizzando la banda QA del dataset prima di applicare questa funzione.</p><p>Se l'immagine di input è in virgola mobile, ad esempio la riflettanza di superficie con valori compresi tra 0 e 1, un valore epsilon di 0,001 deve produrre risultati di qualità.</p>"
	},
	rfxArgs: {
		rasterName: "Raster",
		colorSchemeTypeName: "Tipo di schema colori",
		colormapName: "Colormap",
		colormapNameName: "Nome Colormap",
		colorRampName: "Scala cromatica",
		contrastOffsetName: "Offset contrasto",
		brightnessOffsetName: "Offset luminosità",
		methodName: "Metodo",
		bandNamesName: "Nomi bande",
		bandWavelengthsName: "Lunghezze d'onda bande",
		bandIdsName: "ID bande",
		missingBandActionName: "Azione per banda mancante",
		conversionParametersName: "Parametri conversione",
		hillshadeTypeName: "Tipo rilievo ombreggiato",
		azimuthName: "Azimut",
		altitudeName: "Altitudine",
		slopeTypeName: "Scala",
		zFactorName: "Fattore Z",
		PSPowerName: "Potenza dimensione pixel",
		PSZFactorName: "Fattore dimensione pixel",
		removeEdgeEffectName: "Disabilita interpolazione pixel bordo predefinita",
		fromUnitName: "Unità di origine",
		toUnitName: "Unità di destinazione",
		rasterTypeName: "Tipo",
		minName: "Output minimo",
		maxName: "Output massimo",
		minPercentName: "Ritaglio percentuale minimo",
		maxPercentName: "Ritaglio percentuale massimo",
		numberOfStandardDeviationName: "Numero di deviazioni standard",
		sigmoidStrengthLevelName: "Livello di forza sigmoidea",
		estimateStatsHistogramName: "Valuta statistiche",
		DRAName: "Regolazione gamma dinamica",
		statisticsName: "Statistiche",
		histogramsName: "Istogrammi",
		statisticsHistogramName: "Definisci statistiche e istogramma",
		computeGammaName: "Gamma automatica",
		useGammaName: "Usa gamma",
		gammaName: "Gamma",
		inputNamesName: "Nomi",
		expressionName: "Espressione",
		cellsizeTypeName: "Tipo di dimensione cella",
		extentTypeName: "Tipo di estensione",
		classifierDefinitionFileName: "File di definizione di input",
		raster1Name: "Raster1",
		raster2Name: "Raster2",
		raster3Name: "Raster3",
		trueRasterName: "Raster vero",
		falseRasterName: "Raster falso",
		noDataInterpretationName: "Interpretazione NoData",
		noDataValuesName: "Valori NoData",
		includedRangesName: "Intervalli inclusi",
		curvatureTypeName: "Tipo di curvatura",
		rastersName: "Raster",
		attributeTableName: "Tabella",
		attributeTableTypeName: "Tipo di tabella",
		rowsName: "Numero di righe",
		columnsName: "Numero di colonne",
		kernelName: "Kernel",
		mirrorEdgesName: "Rifletti bordi",
		influencesName: "Influenze",
		fieldsName: "Campi",
		remapsName: "Rimappa tabella",
		evalFromName: "Scala di valutazione Da",
		evalToName: "Scala di valutazione A",
		weightsName: "Pesi",
		DEMName: "DEM",
		shortRangeIDWRadiusName: "Raggio IDW a breve distanza",
		maxVoidWidthName: "Larghezza massima del Void",
		sigmaGaussianName: "Spianatura adattiva",
		contourTypeName: "Tipo di contorno",
		zBaseName: "Base Z",
		numberOfContoursName: "Number Of Contours",
		contourIntervalName: "Intervallo Contour",
		nthContourLineInBoldName: "Nª linea di contorno in grassetto",
		featureClassName: "Feature di input",
		classIndexFieldName: "Campo",
		resolveOverlapMethodName: "Risolvi sovrapposizione",
		resamplingTypeName: "Tipo ricampionamento",
		inputCellsizeName: "Dimensioni cella input",
		outputCellsizeName: "Dimensioni cella output",
		pointFeatureClassName: "Punti di seed",
		maxGrowthRadiusFieldName: "Campo raggio di crescita massima",
		similarityThresholdFieldName: "Campo Similarity Threshold",
		fillValueFieldName: "Campo di riempimento valore",
		spectralDetailName: "Dettaglio spettrale [1..20]",
		spatialDetailName: "Dettaglio spaziale [1..20]",
		minNumPixelsPerSegmentName: "Dimensione segmento minima in pixel",
		boundariesOnlyName: "Solo confini segmento",
		statisticsTypeName: "Tipo statistiche",
		fillNoDataOnlyName: "Riempire solo pixel NoData",
		inputDataTypeName: "Tipo di dati di input",
		angleReferenceSystemName: "Sistema di riferimento angolare",
		outputDataTypeName: "Tipo di dati di output",
		inputSamplePointFeatureClassName: "Campioni di input",
		valueFieldName: "Campo valore",
		rasterInfoName: "Informazioni raster",
		interpolationMethodName: "Metodo di interpolazione",
		radiusName: "Raggio",
		radianceGainValuesName: "Guadagno radianza",
		radianceBiasValuesName: "Radiance Bias",
		reflectedGainValuesName: "Guadagno riflessione",
		reflectedBiasValuesName: "Compensazione riflessione",
		sunElevationName: "Elevazione sole (gradi)",
		albedoName: "Albedo",
		scaleFactorName: "Fattore di scala",
		offsetName: "Offset",
		thresholdTypeName: "Tipo di soglia",
		thresholdsName: "Soglie",
		undefinedClassName: "Classe non definita",
		minValueName: "Minima",
		maxValueName: "Massima",
		operationName: "Operazione",
		clippingTypeName: "Tipo di ritaglio",
		clippingGeometryName: "Geometria di ritaglio/Raster",
		extentName: "Estensione di output",
		useInputFeatureGeometryName: "Utilizzare feature di input per la geometria di ritaglio",
		remapDefinitionTypeName: "Rimappa tipo definizione",
		inputRangeName: "Intervalli di input",
		outputValuesName: "Valori di output",
		noDataRangeName: "Intervalli NoData",
		inputFieldName: "Campo di input",
		outputFieldName: "Campo di output",
		inputMaxFieldName: "Campo max di input (facoltativo)",
		remapTableTypeName: "Rimappa tipo tabella",
		allowUnmatchedName: "Consenti valori di pixel non corrispondenti",
		changeMissingValuesToNoDataName: "Cambia valori mancanti in NoData",
		visibleBandIDName: "ID banda visibile",
		infraredBandIDName: "ID banda infrarosso",
		scientificOutputName: "Output scientifico",
		bandIndexesName: "Indici bande",
		constantName: "Costante",
		weightName: "Peso",
		minimumName: "Minimo",
		maximumName: "Massimo",
		sourceDataName: "Raster di origine",
		sourceFieldName: "Campo di origine",
		costRasterName: "Raster di costo",
		maxDistanceName: "Distanza massima",
		valueRasterName: "Raster valore",
		costMultiplierName: "Moltiplicatore da applicare ai costi",
		startCostName: "Costo iniziale",
		accumCostResistanceRateName: "Velocità resistenza costo cumulativa",
		capacityName: "Capacità",
		travelDirectionName: "Direzione di viaggio",
		cellSizeName: "Dimensione cella",
		populationFieldName: "Campo popolazione",
		areaUnitsName: "Unità area",
		outputValueTypeName: "Valori cella di output",
		barriersName: "Barriere di input",
		destinationDataName: "Raster di destinazione",
		destinationFieldName: "Campo di destinazione",
		pathTypeName: "Tipo di percorso",
		observerFeaturesName: "Feature osservatori",
		analysisMethodName: "Metodo di analisi",
		analysisTypeName: "Tipo di analisi",
		verticalErrorName: "Errore verticale",
		refractivityCoefficientName: "Coefficiente di rifrattività",
		surfaceOffsetName: "Offset superficie",
		observerElevationName: "Elevazione osservatore",
		observerOffsetName: "Offset osservatore",
		innerRadiusName: "Raggio interno",
		innerRadiusIs3DDistanceName: "Il raggio interno è una distanza 3D",
		outerRadiusName: "Raggio esterno",
		outerRadiusIs3DDistanceName: "Il raggio esterno è una distanza 3D",
		horizontalStartAngleName: "Angolo iniziale orizzontale",
		horizontalEndAngleName: "Angolo finale orizzontale",
		verticalUpperAngleName: "Angolo superiore verticale",
		verticalLowerAngleName: "Angolo inferiore verticale",
		zoneDataName: "Raster zona",
		zoneFieldName: "Campo zona",
		ignoreNoDataName: "Ignora NoData nei calcoli",
		temperatureRasterName: "Raster temperatura",
		inTemperatureUnitsName: "Unità di temperatura",
		outHeatIndexTemperatureUnitsName: "Unità indice di calore",
		relativeHumidityRasterName: "Raster umidità relativa",
		outWindChillTemperatureUnitsName: "Unità Wind Chill",
		windSpeedRasterName: "Raster velocità del vento",
		inWindSpeedUnitsName: "Unità di velocità del vento",
		valueName: "Valore",
		propertyName: "Nome proprietà",
		jsonName: "Metadati JSON",
		zoneTableName: "Tabella attributi zonali",
		attributeFieldNames: "Nomi campo attributo",
		backgroundName: "Valore sfondo",
		whereClauseName: "Clausola Where",
		minimumValueFieldName: "Nome campo valore minimo",
		maximumValueFieldName: "Nome campo valore massimo",
		outValueFieldName: "Nome campo valore di output",
		defaultValueName: "Valore di output predefinito",
		conversionMatrixName: "Matrice di conversione",
		IsPseudoColorOutputName: "È un output di pseudocolore",
		unmappedAsRandomColorName: "Assegna colori in modo casuale ai pixel non mappati",
		distanceMethodName: "Metodo Distanza",
		flowDirRasterName: "Raster di direzione del flusso",
		pourPointName: "Raster Pour Point",
		pourPointFieldName: "Campo Pour Point",
		constantZName: "Constante Z",
		zOffsetName: "Offset Z",
		geoIdName: "Geoide",
		calibrationTypeName: "Tipo calibrazione",
		filterTypeName: "Tipo di filtro",
		filterSizeName: "Dimensione filtro",
		noiseModelName: "Modello rumore",
		noiseVarianceName: "Varianza rumore",
		additiveNoiseMeanName: "Media rumore additivo",
		multiplicativeNoiseMeanName: "Media rumore moltiplicativo",
		numberofLooksName: "Numero di ricerche",
		dampingFactorName: "Fattore di smorzamento",
		maskRasterName: "Maschera di Raster",
		nibbleValuesName: "Usa valori NoData se sono di vicinanza più prossima",
		nibbleNoDataName: "Ridurre celle NoData",
		zLimitName: "Limite Z",
		flowDirectionTypeName: "Tipo di direzione di flusso",
		weightRasterName: "Raster di pesi",
		forceEdgeName: "Forza tutti i bordi della cella per fluire all'esterno",
		streamRasterName: "Raster di flusso",
		surfaceRasterName: "Superficie raster",
		conversionType: "Tipo di conversione",
		distanceRaster1: "Raster di distanza 1",
		distanceRaster2: "Raster di distanza 2",
		costDistanceRaster: "Raster distanza di costo",
		costBacklinkRaster: "Raster backlink di costo",
		overridesName: "Esclusioni",
		fieldName: "Campo",
		signatureFileOrUrl: "File di firma o URL",
		redName: "Rosso",
		greenName: "Verde",
		blueName: "Blu",
		infraredName: "Infrarosso",
		panchromaticName: "Pancromatico",
		multispectralName: "Multispettrale",
		pansharpeningType: "Tipo pansharpening",
		sensorName: "Sensore",
		spatialReferenceName: "Riferimento spaziale",
		xCellsizeName: "Dimensione cella X",
		yCellsizeName: "Dimensione cella Y",
		xOriginName: "Punto di registrazione X",
		yOriginName: "Punto di registrazione Y",
		percentileName: "Valore percentile",
		neighborhoodType: "Tipo di vicinanza",
		widthName: "Larghezza",
		heightName: "Altezza",
		startAngleName: "Angolo iniziale",
		endAngleName: "Angolo finale",
		neighborhoodValues: "Valori di quartiere",
		horizontalRaster: "Raster orizzontale",
		horizontalFactor: "Fattore orizzontale",
		verticalRaster: "Raster verticale",
		verticalFactor: "Fattore verticale",
		streamRaster: "Raster di flusso",
		flowDirRaster: "Raster di direzione del flusso",
		numberNeighborCells: "Numero di celle vicine",
		zoneConnectivity: "Zona di connettività",
		addLinkBehavior: "Aggiungi collegamento",
		excludedValue: "Valore escluso",
		constantFillCheck: "Genera raster riempimento da costante",
		fillRaster: "Raster riempimento",
		constantFillValue: "Valore costante",
		inputBitPositions: "Bit di input",
		outputBitPositions: "Bit di output",
		distanceTypeName: "Tipo di distanza",
		barrierDataName: "Barriere raster",
		pourPointDataName: "Raster Pour Point",
		accumulationRasterName: "Raster di accumulo flusso",
		snapDistanceName: "Distanza snap",
		orderMethodName: "Metodo di ordinamento",
		directionMeasurementName: "Direzione di misura",
		processAsMultiband: "Elabora come multibanda",
		processMultidimensional: "Elabora come multidimensionale",
		forceFlowDirectionConvention: "Forzare la convenzione della direzione del flusso per il raster backlink",
		initialAccumulation: "Accumulo iniziale",
		maximumAccumulation: "Accumulo massimo",
		sourceLocationBands: "Generare righe e colonne di origine come bande aggiuntive nell'output",
		backDirectionBand: "Generare la direzione inversa come banda aggiuntiva nell'output",
		numberOfCells: "Numero di celle",
		zoneValues: "Valori zona",
		shrinkMethod: "Metodo di riduzione",
		expandMethod: "Metodo di espansione",
		inputSpectralProfileType: "Tipo di profilo spettrale",
		spectralProfileFileName: "Profilo spettrale",
		trainingFeatureFileName: "Feature di formazione",
		nonNegative: "Non negativo",
		sumToOne: "Somma a uno",
		randomDistribution: "Distribuzione",
		meanName: "Medio",
		probabilityName: "Probabilità",
		alphaName: "Alfa",
		betaName: "Beta",
		rName: "r",
		nName: "N",
		seed: "Seme",
		randomNumberGenerator: "Generatore di Numero Random",
		cellFactor: "Fattore cella",
		aggregationType: "Tecnica di aggregazione",
		extentHandling: "Espandi extent se necessario",
		trendAnalysisDimensionName: "Nome dimensione",
		trendAnalysisType: "Tipo di tendenza",
		harmonicFrequency: "Frequenza armonica",
		polynomialOrder: "Ordine polinomiale",
		cycleLengthName: "Lunghezza del ciclo",
		trendAnalysisRMSE: "RMSE",
		trendAnalysisR2: "R-Squared",
		trendAnalysisSlopePValue: "Valore P del coefficiente di pendenza",
		trendAnalysisSeasonalPeriod: "Periodo stagionale",
		cycleUnitName: "Unità ciclo",
		predictDimensionValues: "Valori",
		dimensionDefinitionType: "Definizione dimensione",
		predictDimensionStart: "Partenza",
		predictDimensionEnd: "Fine",
		predictDimensionInterval: "Intervallo del valore",
		dimensionUnit: "Unità",
		interpolationCellsizeName: "Dimensione della cella di interpolazione",
		variableName: "Variabili",
		dimensionlessName: "Senza dimensioni",
		mdimDefinition: "Definizione dimensione",
		dimensionName: "Dimensione",
		iterationStart: "Inizio della prima iterazione",
		iterationEnd: "Fine della prima iterazione",
		intervalStart: "Inizio dell'intervallo",
		intervalEnd: "Fine dell'intervallo",
		stepName: "Fase",
		rangesName: "Intervalli",
		minValue: "Valore minimo",
		maxValue: "Valore massimo",
		changeAnalysisRasterName: "Raster di analisi modifica",
		changeTypeName: "Modificare tipo",
		segmentDate: "Data segmento",
		changeDirectionName: "Modifica direzione",
		maxNumChangesName: "Numero massimo di modifiche",
		filterByYear: "Filtra per anno",
		minimumYear: "Valore minimo",
		maximumYear: "Valore Massimo",
		filterByDuration: "Filtra per durata",
		minimumDuration: "Durata minima",
		maximumDuration: "Durata massima",
		filterByMagnitude: "Filtra per grandezza",
		minimumMagnitude: "Grandezza minima",
		maximumMagnitude: "Grandezza massima",
		filterByStartValue: "Filtra da valore iniziale",
		minimumStartValue: "Minimo valore iniziale",
		maximumStartValue: "Massimo valore iniziale",
		filterByEndValue: "Filtra da valore finale",
		minimumEndValue: "Minimo valore finale",
		maximumEndValue: "Massimo valore finale",
		modelTypeName: "Tipo di modello",
		fromRasterName: "Da raster",
		toRasterName: "A Raster",
		computeChangeMethod: "Calcola metodo variazione",
		fromClassValues: "Valori Da classe (Esempi: 2 5)",
		toClassValues: "Valori A classe (Esempi: 2 5)",
		keepMethod: "Metodo di filtro",
		useColorMethod: "Definisci colori di transizione",
		detectChangeBands: "Bande per rilevare il cambiamento (inizia a 0)",
		tmaskBands: "Bande per il mascheramento temporaneo (inizia a 0)",
		chiSquaredThreshold: "Soglia chi-quadrato per rilevare modifiche",
		minAnomaly: "Osservazioni di anomalie consecutive minime",
		updatingFrequency: "Aggiornamento della frequenza di adattamento (in anni)",
		distanceAccumulationRasterName: "Raster di accumulo della distanza",
		costBackdirectionRasterName: "Direzione back o raster di direzione del flusso",
		rasterCollectionName: "Raccolta di raster",
		itemFunctionName: "Funzione elemento",
		aggregationFunctionName: "Funzione di aggregazione",
		processingFunctionName: "Funzione di elaborazione",
		aggregationDefinitionName: "Definizione aggregazione",
		queryGeometryName: "Interroga geometria",
		factorFunctionZeroFactor: "Fattore Zero",
		factorFunctionCutAngle: "Angolo di taglio",
		factorFunctionSideFactor: "Fattore laterale",
		factorFunctionSlope: "Acclività",
		factorFunctionLowCutAngle: "Angolo di taglio basso",
		factorFunctionHighCutAngle: "Angolo di taglio alto",
		factorFunctionCosPower: "Potenza coseno",
		factorFunctionSecPower: "Potenza secante",
		factorFunctionTablePath: "Percorso tabella",
		processingBand: "Banda di elaborazione",
		processingBandName: "Nome della Banda in Elaborazione",
		snappingDate: "Data gestione delle tolleranze",
		maxNumSegments: "Numero massimo di segmenti",
		vertexCountOvershoot: "Conteggio vertici in eccesso",
		spikeThreshold: "Soglia Spike",
		recoveryThreshold: "Soglia Recupero",
		minNumObs: "Numero minimo di osservazioni",
		pValueThreshold: "Soglia di valore P",
		bestModelProportion: "Migliore proporzione del modello",
		preventOneYearRecovery: "Previeni recupero di un anno",
		recoveryIncreaseTrend: "Il recupero ha aumentato la tendenza",
		outputOtherBands: "Emetti altre bande",
		sortType: "Tipo di ordinamento",
		numberOfRuns: "Esegui due volte espansione e contrazione",
		percentileValue: "Valore percentile",
		percentileInterpolationType: "Tipo di interpolazione percentile",
		rasterInfoProperty: "Proprietà",
		rasterInfoValue: "Valore",
		rasterInfoColumns: "Colonne",
		rasterInfoRows: "Righe",
		rasterInfoBandCount: "Numero di bande",
		rasterInfoPixelSizeX: "Dimensione cella X",
		rasterInfoPixelSizeY: "Dimensione cella Y",
		rasterInfoPixelType: "Tipo pixel",
		rasterExtentTop: "In alto",
		rasterExtentBottom: "In basso",
		rasterExtentLeft: "Sinistra",
		rasterExtentRight: "Destra",
		rasterStatisticsNotCalculated: "Le statistiche non sono state calcolate.",
		spatialReferenceProjection: "Proiezione",
		spatialReferenceWkid: "WKID",
		spatialReferenceLatestWkid: "WKID precedente",
		spatialReferenceWkt: "WKT",
		spatialReferenceVcsWkid: "VCSWKID",
		spatialReferenceLatestVcsWkid: "VCSWKID precedente",
		spatialReferenceAuthority: "Autorità",
		spatialReferenceLinearUnit: "Unità Lineare",
		spatialReferenceAngularUnit: "Unità angolare",
		spatialReferenceFalseEasting: "Direzione est falsa",
		spatialReferenceFalseNorthing: "Direzione nord falsa",
		spatialReferenceCentralMeridian: "Meridiano di riferimento",
		spatialReferencePrimeMeridian: "Primo meridiano",
		spatialReferenceStandardParallel1: "Parallelo standard 1",
		spatialReferenceStandardParallel2: "Parallelo standard 2",
		spatialReferenceLatitudeOfOrigin: "Latitudine di origine",
		spatialReferenceAuxiliarySphereType: "Tipo di sfera ausiliare",
		spatialReferenceDatum: "Riferimento",
		spatialReferenceSpheroid: "Sferoide",
		spatialReferenceSemimajorAxis: "Semiasse principale",
		spatialReferenceSemiminorAxis: "Semiasse secondario",
		spatialReferenceInverseFlattening: "Livellamento inverso",
		inputDefinitionFileName: "File di definizione di input",
		deleteName: "Elimina",
		addVariableName: "Aggiungi variabile",
		maxNumPixelsPerSegment: "Dimensione massima segmenti in pixel",
		forwardWindowName: "Finestra avanti",
		backwardWindowName: "Finestra indietro",
		noDataHandlingName: "Gestione NoData",
		circularWrapValueName: "Valore wrap circolare",
		fromClassNameFieldName: "Nome del campo per i nomi delle classi in da raster",
		toClassNameFieldName: "Nome del campo per i nomi delle classi in Raster",
		targetRasterName: "Raster di destinazione",
		circularWrapValue: "Valore wrap circolare",
		bandIndexesR: "Espressione rosso",
		bandIndexesG: "Espressione verde",
		bandIndexesB: "Espressione blu",
		exampleName: "Esempio",
		inputName: "Input",
		outputName: "Output",
		optionalName: "Opzionale",
		browseDefinitionFile: "Cerca file definizione",
		selectDefinitionFile: "Seleziona file definizione input",
		inputDefinitionURL: "Inserisci URL file definizione",
		enterDefinitionFileURL: "Inserisci URL file definizione",
		browseXMLFile: "Cerca file XML",
		selectStatsFile: "Seleziona file di statistiche e istogrammi",
		enterXMLFileURL: "Inserisci URL file XML",
		xmlFileURL: "URL file XML",
		circularCalculation: "Calcola statistiche circolari",
		localSurfaceType: "Individua tipo di superficie",
		surfaceParameterType: "Tipo di parametro",
		neighborhoodDistance: "Distanza quartiere",
		useAdaptiveNeighborhood: "Usa quartiere adattivo",
		outputSlopeType: "Output misurazione pendenza",
		projectAzimuths: "Proietta azimut geodetici",
		useEquatorialAspect: "Usa aspetto equatoriale",
		zUnit: "Unità Z",
		analysisMask: "Maschera analisi",
		stdDeviation: "Deviazione standard",
		"true": "True",
		"false": "False",
		costDistanceRaster1: "Immetti raster distanza di costo cumulativo 1",
		costDistanceRaster2: "Immetti raster distanza di costo cumulativo 2",
		threshold: "Soglia",
		thresholdMethod: "Metodo di soglia",
		directionRaster1: "Immetti raster di direzione inversa 1",
		directionRaster2: "Immetti raster di direzione inversa 2",
		maxIterations: "Numero massimo di iterazioni",
		epsilon: "Epsilon"
	},
	enumLabels: {
		attributeTableTypeManual: "Manuale",
		attributeTableTypeExternal: "Esterno",
		clrSchemeTypeColormap: "Colormap",
		clrSchemeTypeColorRamp: "Scala cromatica",
		colormapTypeElevation: "Elevazione",
		colormapTypeGray: "Grigio",
		colormapTypeNDVI: "NDVI",
		colormapTypeNDVI2: "NDVI2",
		colormapTypeNDVI3: "NDVI3",
		colormapTypeRandom: "Casuali",
		none: "Nessuna",
		slopeTypeAdjusted: "Regolato",
		slopeTypeDegree: "Gradi",
		slopeTypePercentRise: "Incremento percentuale",
		slopeTypeScaled: "Scalato",
		stretchTypeMinMax: "MinMax",
		stretchTypePercentMinMax: "PercentMinMax",
		stretchTypeSigmoid: "Sigmoide",
		stretchTypeStdDev: "StdDev",
		hillshadeTypeSimple: "Tradizionale",
		hillshadeTypeMultidirectional: "Multidirezionale",
		bandComboByNames: "Nomi bande",
		bandComboByWavelength: "Lunghezze d'onda bande",
		bandComboByIDs: "ID bande",
		missingBandActionBestMatch: "Corrispondenza migliore",
		missingBandActionFail: "Errore",
		unitTypeCelsius: "Celsius",
		unitTypeCentimeters: "Centimetri",
		unitTypeDecimeters: "Decimetri",
		unitTypeFahrenheit: "Fahrenheit",
		unitTypeFeet: "Piedi",
		unitTypeFeetPerSec: "Piedi al secondo (ft/s)",
		unitTypeInches: "Pollici",
		unitTypeKelvin: "Kelvin",
		unitTypeKilometers: "Chilometri",
		unitTypeKmsPerHour: "Chilometri all'ora (km/h)",
		unitTypeKnots: "Nodi (kn)",
		unitTypeMeters: "Metri",
		unitTypeMetersPerSec: "Metri al secondo (m/s)",
		unitTypeMiles: "Miglia",
		unitTypeMilesPerHour: "Miglia all'ora (mph)",
		unitTypeMillimeters: "Millimetri",
		unitTypeNauticalMiles: "Miglia nautiche",
		unitTypeYards: "Iarde",
		unitTypeDecimalDegrees: "Gradi decimali",
		unitTypePoints: "Punti",
		unitTypeUnknown: "Sconosciuto",
		unitTypeSqMapUnits: "Unità di mappa quadrate",
		unitTypeSqMiles: "Miglia quadrate",
		unitTypeSqKms: "Chilometri quadrati",
		unitTypeAcres: "Acri",
		unitTypeHectares: "Ettari",
		unitTypeSqYards: "Square Yards",
		unitTypeSqFt: "Piedi quadrati",
		unitTypeSqInches: "Pollici quadrati",
		unitTypeSqMts: "Metri quadrati",
		unitTypeSqCms: "Centimetri quadrati",
		unitTypeSqMms: "Millimetri quadrati",
		cellsizeTypeFirst: "Primo di",
		cellsizeTypeMin: "Min di",
		cellsizeTypeMax: "Max di",
		cellsizeTypeMean: "Media di",
		cellsizeTypeLast: "Ultimo di",
		extentTypeFirst: "Primo di",
		extentTypeIntersection: "Intersezione di",
		extentTypeUnion: "Unione di",
		extentTypeLast: "Ultimo di",
		noDataInterpretAny: "Qualsiasi corrispondenza",
		noDataInterpretAll: "Tutte le corrispondenze",
		curvatureTypeStandard: "Standard",
		curvatureTypeProfile: "Profilo",
		curvatureTypePlanform: "Planform",
		filterTypeLineDetectionHorizontal: "Rilevamento riga - Orizzontale",
		filterTypeLineDetectionVertical: "Rilevamento riga - Verticale",
		filterTypeLineDetectionLeftDiagonal: "Rilevamento riga - Diagonale sinistra",
		filterTypeLineDetectionRightDiagonal: "Rilevamento riga - Diagonale destra",
		filterTypeGradientNorth: "Gradiente nord",
		filterTypeGradientWest: "Gradiente ovest",
		filterTypeGradientEast: "Gradiente est",
		filterTypeGradientSouth: "Gradiente sud",
		filterTypeGradientNorthEast: "Gradiente nord-est",
		filterTypeGradientNorthWest: "Gradiente nord-ovest",
		filterTypeSmoothArithmeticMean: "Smooth Arithmetic Mean",
		filterTypeSmoothing3x3: "Smoothing 3x3",
		filterTypeSmoothing5x5: "Smoothing 5x5",
		filterTypeSharpening3x3: "Sharpening 3x3",
		filterTypeSharpening5x5: "Sharpening 5x5",
		filterTypeLaplacian3x3: "Operatore laplaciano 3x3",
		filterTypeLaplacian5x5: "Operatore laplaciano 5x5",
		filterTypeSobelHorizontal: "Sobel orizzontale",
		filterTypeSobelVertical: "Sobel verticale",
		filterTypeSharpen: "Aumenta nitidezza",
		filterTypeSharpen2: "Aumenta ulteriormente nitidezza",
		filterTypePointSpread: "Distribuzione punti",
		userDefined: "Definito dall'utente",
		ContourTypeLines: "Linee di contorno",
		ContourTypeFill: "Riempimento contorno",
		ContourTypeSmoothOnly: "Solo superfici lisce",
		rasterizeFirst: "Primo",
		rasterizeLast: "Ultimo",
		rasterizeSmallest: "Più piccolo",
		rasterizeLargest: "Più grande",
		resamplingTypeNearest: "Vicino più vicino",
		resamplingTypeBilinear: "Interpolazione bilineare",
		resamplingTypeCubic: "Convoluzione cubica",
		resamplingTypeMajority: "Maggioranza",
		resamplingTypeBilinearPlus: "Interpolazione bilineare avanzata",
		resamplingTypeGauss: "Sfocatura gaussiana",
		resamplingTypeGaussPlus: "Sfocatura gaussiana avanzata",
		resamplingTypeAverage: "Media",
		resamplingTypeMinimum: "Minimo",
		resamplingTypeMaximum: "Massimo",
		resamplingTypeVectorAvg: "Media vettoriale",
		minimum: "Minimo",
		maximum: "Massimo",
		mean: "Medio",
		stdDeviation: "Deviazione standard",
		uvMagDirTypeUV: "U-V",
		uvMagDirTypeMagDir: "Grandezza-Direzione",
		unknown: "Sconosciuto",
		angleRefSysGeographic: "Geografico",
		angleRefSysArithmetic: "Aritmetico",
		interpolateIrregularDataNearest: "Vicino più vicino",
		interpolateIrregularDataBilinear: "Bilineare",
		interpolateIrregularDataTinningLinear: "Rivestimento lineare",
		interpolateIrregularDataTinningNaturalNeighbor: "Vicino Naturale",
		interpolateIrregularDataTinningIDW: "Inverso della distanza pesata",
		esriRasterThresholdTypeConstant: "Costante",
		esriRasterThresholdTypeOtsu: "Otsu",
		esriRasterThresholdTypeTsai: "Tsai",
		esriRasterThresholdTypeKapur: "Kapur",
		esriRasterThresholdTypeKittler: "Kittler",
		esriRasterThresholdTypeRosin: "Rosin",
		argStatsTypeMax: "ArgMax",
		argStatsTypeMin: "ArgMin",
		argStatsTypeMedian: "ArgMedian",
		argStatsTypeDuration: "Durata",
		arithmeticOpPlus: "Plus",
		arithmeticOpMinus: "Minus",
		arithmeticOpMultiply: "Moltiplicazione",
		arithmeticOpDivide: "Divide",
		arithmeticOpPower: "Potenza",
		arithmeticOpMode: "Modalità",
		clipTypeOutside: "Taglia all'esterno",
		clipTypeInside: "Taglia all'interno",
		yes: "Yes",
		no: "No",
		densities: "Densità",
		expectedCounts: "Conteggi previsti",
		planar: "Planare",
		geodesic: "Geodetico",
		eachCell: "Ogni cella",
		eachZone: "Ogni zona",
		bestSingle: "Singolo migliore",
		allSightlines: "Tutte le linee di vista",
		perimeterSightlines: "Linee di vista perimetrali",
		frequency: "Frequenza",
		observers: "Osservatori",
		majority: "Maggioranza",
		median: "Mediana",
		minority: "Minoranza",
		percentile: "Percentile",
		range: "Intervallo",
		sum: "Somma",
		variety: "Varietà",
		ndvi: "NDVI",
		savi: "SAVI",
		bandArithmeticMethodTSAVI: "SAVI trasformato",
		bandArithmeticMethodMSAVI: "SAVI modificato",
		bandArithmeticMethodSultan: "Formula di Sultan",
		gemi: "GEMI",
		pvi: "PVI",
		gvi: "GVI (Landsat TM)",
		vari: "VARI",
		sr: "SR",
		gndvi: "GNDVI",
		ndvire: "NDVIre",
		srre: "SRre",
		mtvi2: "MTVI2",
		rtviCore: "RTVICore",
		cire: "CIre",
		cig: "CIg",
		ndwi: "NDWI",
		evi: "EVI",
		ironOxide: "Ossido di ferro",
		ferrousMinerals: "Minerali ferrosi",
		clayMinerals: "Minerali di argilla",
		wndwi: "WNDWI",
		bai: "BAI",
		mndwi: "MNDWI",
		nbr: "NBR",
		ndbi: "NDBI",
		ndmi: "NDMI",
		ndsi: "NDSI",
		localSquareRoot: "Square Root",
		localACos: "ACos",
		localASin: "ASin",
		localATan: "ATan",
		localATanH: "ATanH",
		localAbs: "Abs",
		localBitwiseNot: "Not Bitwise",
		localBooleanNot: "No booleano",
		localCos: "Cos",
		localCosH: "CosH",
		localExp: "Exp",
		localExp10: "Exp10",
		localExp2: "Exp2",
		localInt: "Int",
		localIsNull: "È null",
		localFloat: "Float",
		localLn: "Ln",
		localLog10: "Log10",
		localLog2: "Log2",
		localNegate: "Negate",
		localRoundDown: "Round Down",
		localRoundUp: "Round Up",
		localSin: "Sin",
		localSinH: "SinH",
		localTan: "Tan",
		localTanH: "TanH",
		localACosH: "ACosH",
		localASinH: "ASinH",
		localPlus: "Plus",
		localMinus: "Minus",
		localTimes: "Volte",
		localPower: "Potenza",
		localBitwiseAnd: "And Bitwise",
		localBitwiseLeftShift: "Spostamento a sinistra Bitwise",
		localBitwiseOr: "Or Bitwise",
		localBitwiseRightShift: "Spostamento a destra Bitwise",
		localBitwiseXor: "Bitwise Xor",
		localBooleanAnd: "Boolean And",
		localBooleanOr: "Boolean Or",
		localBooleanXor: "Boolean Xor",
		localDivide: "Divide",
		localEqualTo: "Equal To",
		localGreaterThan: "Maggiore Di",
		localGreaterThanEqual: "Greater Than Equal",
		localLessThan: "Less Than",
		localLessThanEqual: "Less Than Equal",
		localMod: "Mod",
		localNotEqual: "Not Equal",
		localATan2: "ATan2",
		localSquare: "Square",
		localSetNull: "Imposta Null",
		remapDefTypeList: "Elenco",
		remapDefTypeTable: "Tabella",
		remapTableTypeSimple: "Semplice",
		remapTableTypeDynamic: "Dinamico",
		remapTableTypeReassignment: "Riassegnazione",
		geomCorrectionByConstZ: "Usa costante Z",
		geomCorrectionByDEM: "Usa DEM",
		radarCalibBetaNought: "Beta nought",
		radarCalibSigmaNought: "Sigma nought",
		radarCalibGammaNought: "Gamma nought",
		speckleFilterTypeLee: "Filtro Lee",
		speckleFilterTypeEnhancedLee: "Filtro Lee migliorato",
		speckleFilterTypeFrost: "Filtro Frost",
		speckleFilterTypeKuan: "Filtro Kuan",
		speckleNoiseModelMul: "Rumore moltiplicativo",
		speckleNoiseModelAdd: "Rumore additivo",
		speckleNoiseModelAddnMul: "Rumore additivo e moltiplicativo",
		mosaicOpTypeFirst: "Primo",
		mosaicOpTypeLast: "Ultimo",
		mosaicOpTypeMin: "Minima",
		mosaicOpTypeMax: "Massima",
		mosaicOpTypeMean: "Medio",
		mosaicOpTypeBlend: "Fusione",
		mosaicOpTypeSum: "Somma",
		integer: "Intero",
		rfxD8: "D8",
		rfxMFD: "MFD",
		dinf: "Dinf",
		vertical: "Verticale",
		horizontal: "Orizzontale",
		localCellStatisticsMajority: "Maggioranza",
		localCellStatisticsMax: "Massimo",
		localCellStatisticsMean: "Medio",
		localCellStatisticsMedian: "Mediana",
		localCellStatisticsMin: "Minimo",
		localCellStatisticsMinority: "Minoranza",
		localCellStatisticsRange: "Intervallo",
		localCellStatisticsStdDev: "Deviazione standard",
		localCellStatisticsSum: "Somma",
		localCellStatisticsVariety: "Varietà",
		localCellStatisticsMajorityIgnoreND: "Maggioranza (ignora NoData)",
		localCellStatisticsMaxIgnoreND: "Valore massimo (ignora NoData)",
		localCellStatisticsMeanIgnoreND: "Valore medio (ignora NoData)",
		localCellStatisticsMedianIgnoreND: "Valore mediano (ignora NoData)",
		localCellStatisticsMinIgnoreND: "Valore minimo (ignora NoData)",
		localCellStatisticsMinorityIgnoreND: "Minoranza (ignora NoData)",
		localCellStatisticsRangeIgnoreND: "Intervallo (ignora NoData)",
		localCellStatisticsStdDevIgnoreND: "Deviazione standard (ignora NoData)",
		localCellStatisticsSumIgnoreND: "Somma (ignora NoData)",
		localCellStatisticsVarietyIgnoreND: "Varietà (ignora NoData)",
		localCellStatisticsTypePercentileIgnoreND: "Percentile (Ignora NoData)",
		fromSource: "Da origine",
		toSource: "A origine",
		colorspaceConversionRgbToHsv: "Da RGB a HSV",
		colorspaceConversionHsvToRgb: "Da HSV a RGB",
		pansharpenTypeIHS: "IHS",
		pansharpenTypeBrovey: "Brovey",
		pansharpenTypeEsri: "Esri",
		pansharpenTypeMean: "Medio",
		pansharpenTypeGramSchmidt: "Gram-Schmidt",
		rectangleNeighborhood: "Rettangolo",
		circleNeighborhood: "Cerchio",
		annulusNeighborhood: "Corona circolare",
		wedgeNeighborhood: "Spicchio",
		irregularNeighborhood: "Irregolare",
		weightNeighborhood: "Peso",
		four: "Quattro",
		eight: "Otto",
		within: "All'interno",
		cross: "Croce",
		addLink: "Aggiungi collegamento",
		noLink: "Nessun collegamento",
		weightedMean: "Media verificata",
		ls8QCBitPatternCirrus: "Landsat 8 - Cirro",
		ls8QCBitPatternCloud: "Landsat 8 - Nuvola",
		ls8QCBitPatternCloudShadow: "Landsat 8 - Ombra nuvola",
		ls8QCBitPatternDesignatedFill: "Landsat 8 - Riempimento designato",
		ls8QCBitPatternDroppedFrame: "Landsat 8 - Fotogramma eliminato",
		ls8QCBitPatternSnowIce: "Landsat 8 - Neve/Ghiaccio",
		ls8QCBitPatternTerrainOcclusion: "Landsat 8 - Occlusione terreno",
		ls8QCBitPatternVegetation: "Landsat 8 - Vegetazione",
		ls8QCBitPatternWater: "Landsat 8 - Acqua",
		downStream: "Downstream",
		upStream: "Upstream",
		strahler: "STRAHLER",
		shreve: "SHREVE",
		currentSlice: "Sezione corrente",
		allSlices: "Tutte le sezioni",
		expandDistance: "DISTANZA",
		expandMorphological: "MORFOLOGICA",
		spectralProfileFile: "Profilo spettrale",
		trainingFeatureFile: "Feature di formazione",
		randomDistributionTypeUniform: "Uniforme",
		randomDistributionTypeUniformInteger: "Intero",
		randomDistributionTypeNormal: "Normale",
		randomDistributionTypeExponential: "Esponenziale",
		randomDistributionTypePoisson: "Poisson",
		randomDistributionTypeGamma: "Gamma",
		randomDistributionTypeBinomial: "Binomiale",
		randomDistributionTypeGeometric: "Geometrica",
		randomDistributionTypeNegativeBinomial: "Binomiale negativo",
		randomGeneratorTypeStandardCRand: "C Rand standard",
		randomGeneratorTypeAlgorithmACM599: "Algoritmo 599 raccolto da ACM",
		randomGeneratorTypeMersenneTwister: "Mersenne Twister",
		sumName: "Somma",
		medainName: "Mediana",
		trendLinear: "Lineare",
		trendHarmonic: "Armonica",
		trendPolynomial: "Polinomiale",
		trendMannKendall: "Mann-Kendall",
		trendSeasonalKendall: "Kendall stagionale",
		dimensionByValue: "Per Valore",
		dimensionByInterval: "Per intervallo",
		mdimDefTypeAll: "Tutto",
		mdimDefTypeByValues: "Per valori",
		mdimDefTypeByRanges: "Per intervallo",
		mdimDefTypeByIteration: "Per iterazione",
		mdimDefTypeByInterval: "Per intervallo",
		mdimDefTypeByTargetRaster: "Per raster di destinazione",
		esriTimeUnitsHours: "Ore",
		esriTimeUnitsDays: "Giorni",
		esriTimeUnitsWeeks: "Settimane",
		esriTimeUnitsMonths: "Mesi",
		esriTimeUnitsYears: "Anni",
		esriTimeIntervalKeywordHourly: "Ogni ora",
		esriTimeIntervalKeywordDaily: "Ogni giorno",
		esriTimeIntervalKeywordWeekly: "Ogni settimana",
		esriTimeIntervalKeywordDekadly: "Ogni dieci giorni",
		esriTimeIntervalKeywordPentadly: "Ogni cinque giorni",
		esriTimeIntervalKeywordMonthly: "Ogni mese",
		esriTimeIntervalKeywordQuarterly: "Trimestrale",
		esriTimeIntervalKeywordYearly: "Annuale",
		esriTimeIntervalKeywordRecurringDaily: "Ricorrenza giornaliera",
		esriTimeIntervalKeywordRecurringWeekly: "Ricorrenza settimanale",
		esriTimeIntervalKeywordRecurringMonthly: "Ricorrenza mensile",
		esriTimeIntervalKeywordRecurringQuarterly: "Ricorrenza trimestrale",
		aggDefTypeAll: "Tutte",
		aggDefTypeIntervalKeyword: "Parola chiave di intervallo",
		aggDefTypeIntervalValue: "Valore di intervallo",
		aggDefTypeIntervalRanges: "Ampiezze intervallo",
		latestChange: "Ora dell'ultima modifica",
		earliestChange: "Ora della prima modifica",
		largestChange: "Ora della modifica più grande",
		numberOfChanges: "Numero di modifiche",
		longestChange: "Ora della modifica più lunga",
		shortestChange: "Ora della modifica più breve",
		fastestChange: "Ora della modifica più veloce",
		slowestChange: "Ora della modifica più lenta",
		allChanges: "Tutte",
		increaseChanges: "Aumenta",
		decreaseChanges: "Diminuisci",
		segmentBeginning: "Inizio del segmento",
		segmentEnd: "Fine del segmento",
		esriComputeChangeMethodDifference: "Differenza",
		esriComputeChangeMethodRelativeDifference: "Differenza relativa",
		esriComputeChangeMethodCategorical: "Differenza categorica",
		esriComputeChangeMethodMultispectralEuclideanDistance: "Distanza spettrale euclidea",
		esriComputeChangeMethodMultispectralAngularDifference: "Differenza angolo spettrale",
		esriComputeChangeMethodMultispectralAxisWithBiggestChange: "Banda con il maggior numero di cambiamenti",
		esriComputeChangeKeepAll: "Mantieni tutto",
		esriComputeChangeKeepChangedOnly: "Mantieni solo Pixel cambiati",
		esriComputeChangeKeepUnchangedOnly: "Mantieni solo Pixel non cambiati",
		esriComputeChangeUseColorAverage: "Colori medi Da e A",
		esriComputeChangeUseColorFrom: "Usa Da colori",
		esriComputeChangeUseColorTo: "Usa A colori",
		factorFunctionBinary: "Binario",
		factorFunctionForward: "Avanti",
		factorFunctionLinear: "Lineare",
		factorFunctionInvLinear: "Lineare inverso",
		factorFunctionTable: "Tabella",
		factorFunctionSymLinear: "Lineare simmetrico",
		factorFunctionSymInvLinear: "Lineare inverso simmetrico",
		factorFunctionCos: "Coseno",
		factorFunctionSec: "Secante",
		factorFunctionCosSec: "Secante coseno",
		factorFunctionSecCos: "Coseno secante",
		noSort: "Non ordinare",
		ascend: "Crescente",
		descend: "Decrescente",
		autoDetect: "Rilevamento automatico",
		nearest: "Più vicino",
		linear: "Lineare",
		esriMonthJanuary: "Gennaio",
		esriMonthFebruary: "Febbraio",
		esriMonthMarch: "Marzo",
		esriMonthApril: "Aprile",
		esriMonthMay: "Maggio",
		esriMonthJune: "Giugno",
		esriMonthJuly: "Luglio",
		esriMonthAugust: "Agosto",
		esriMonthSeptember: "Settembre",
		esriMonthOctober: "Ottobre",
		esriMonthNovember: "Novembre",
		esriMonthDecember: "Dicembre",
		dimensionalMovingIgnoreNoData: "Dati",
		dimensionalMovingPropagateNoData: "Nessun dato",
		dimensionalMovingFillOnlyNoData: "Riempi NoData",
		circularMean: "Media circolare",
		circularName: "Circolare",
		arithmeticName: "Aritmetico",
		slopeName: "Pendenza",
		aspectName: "Aspetto",
		meanCurvature: "Curvatura media",
		profileCurvature: "Profilo (linea di pendenza normale) curvatura",
		tangentialCurvature: "Curvatura tangenziale (contorno normale)",
		planCurvature: "Curvatura del piano (contorno proiettato)",
		contourGeodesicTorsion: "Torsione geodetica di contorno",
		gaussianCurvature: "Curvatura gaussiana",
		casoratiCurvature: "Curvatura Casorati",
		localSurfaceTypeQuadratic: "Quadratico",
		localSurfaceTypeBiquadratic: "Biquadratico",
		thresholdNoThreshold: "Nessuna soglia",
		thresholdPercentLeastCost: "Percentuale di costo minimo",
		thresholdAccumulativeCost: "Costo cumulativo",
		clrmapTypeHillshade: "Rilievo ombreggiato"
	},
	categoryLabels: {
		sourceCharacteristics: "Caratteristiche origine",
		neighborhoodSettings: "Impostazioni di vicinanza",
		statistics: "Statistiche",
		gamma: "Gamma",
		viewshedParameters: "Parametri campo di vista",
		observerParameters: "Parametri osservatore",
		irregularDataInterpolation: "Interpolazione irregolare dei dati",
		modelStatistics: "Statistiche modello",
		aggregationDef: "Definizione aggregazione",
		filterByAttributes: "Filtra per attributi",
		percentileName: "Percentile",
		rasterInfo: "Informazione raster",
		extent: "Estensione",
		spatialReference: "Riferimento spaziale"
	},
	outputRasterHelpTexts: {
		outputName: "<p>Il nome del layer che sarà creato e aggiunto alla mappa.</p>",
		resultType: "<p>Il tipo di output che sarà creato. Gli output possono essere layer immagini di tile o layer immagini dinamici.</p>",
		saveResultIn: "<p>Il nome della cartella in <b>I miei contenuti</b> in cui sarà salvato il risultato.</p>"
	},
	analysisEnvironmentsHelpTexts: {
		description: "<p>Impostazioni ambiente per l'analisi in Map Viewer. </p>",
		outSR: "<p>Specifica il sistema di coordinate per l'analisi e il layer dei risultati.</p>",
		extent: "<p>Specifica l'area da utilizzare per l'analisi.</p>",
		snapRaster: "<p>Regola l'estensione dell'output in modo che corrisponda all'allineamento delle celle del layer snap raster specificato.</p>",
		cellSize: "<p>Specifica la dimensione o la risoluzione delle celle che verrà utilizzata per l'analisi e per creare il layer raster di output.</p>",
		mask: "<p>Specifica un layer maschera in cui solo le celle che rientrano nell'area della maschera verranno utilizzate per l'analisi.</p>",
		resamplingMethod: "<p>Specifica come interpolare i valori dei pixel quando i raster di input e di output non sono allineati.</p>"
	},
	mainGenStrings: {
		unsupportedDataType: "Tipo non supportato",
		currentlyUnsupported: " Un editor predefinito per ${missingType} è in sospeso ma disponibile a breve. Casella di testo segnaposto temporaneo per specificare input basati su stringhe.",
		unsupportedOverrideWarning: "Un componente dell'editor di override che fornisce una migliore UX per lavorare con i seguenti parametri è in sospeso ma sarà presto disponibile:",
		overrideWidgetMissing: "Componente editor di ovverride mancante!",
		uiIncomplete: "Invio del processo non riuscito. Impossibile eseguire la funzione. Alcuni dei campi richiesti sono incompleti o mancanti dalla IU.",
		count: "Conteggio",
		selectVariables: "Seleziona variabili",
		selectFeature: "Seleziona feature layer",
		greaterThanErrorMessage: "Il numero di input deve essere maggiore di ${min}",
		lesserThanErrorMessage: "Il numero di input deve essere minore di ${max}",
		greaterThanOrEqualErrorMessage: "Il numero di input deve essere maggiore o uguale a ${min}",
		lesserThanOrEqualErrorMessage: "Il numero di input deve essere minore o uguale a ${max}",
		allowScalar: "Selezionare un layer o inserire una costante",
		selectField: "Seleziona campo",
		parameterRequired: "Questo parametro è obbligatorio.",
		enterAValue: "Inserisci un valore ...",
		invalidInput: "Il valore inserito non è valido.",
		itemNotFound: "Elemento non esistente o inaccessibile.",
		itemPermissionDenied: "Non disponi delle autorizzazioni per accedere a questo elemento.",
		layerNotAvailable: "Impossibile caricare il layer ${layerName}.",
		multipleLayersNotAvailable: "Impossibile caricare il layer ${layerName} e altri",
		learnMoreLabel: "Ulteriori informazioni",
		fieldNotAvailable: "Impossibile caricare il campo.",
		allowAnalysis: "L'analisi non è consentita sull'image service.",
		allowAnalysisReason: "Uno o più layer della mappa non sono elencati qui perché non consentono l'analisi.",
		learnMoreText: "Ulteriori informazioni",
		atLeastOneRasterInput: "Almeno un layer di input deve essere un layer raster.",
		browseAnalysisLayers: "Sfoglia layer",
		activeMapViewExtent: "Utilizzare l'estensione mappa corrente",
		chooseRaster: "Scegliere il raster di ritaglio",
		chooseGeometry: "Scegliere la geometria di ritaglio",
		resultType: "Tipo di risultato",
		saveInFolder: "Salva nella cartella",
		outputName: "Nome di output",
		outputLayerType: "Tipo layer di output",
		dynamicImageryLayer: "Layer immagini dinamico",
		tiledImageryLayer: "Layer immagini con tile",
		custom: "Personalizza",
		loading: "Caricamento in corso...",
		layerMissing: "Uno o più layer della mappa non sono elencati qui perché non consentono l'analisi. Ulteriori informazioni.",
		browseCoordinateSystems: "Sfoglia sistemi di coordinate",
		unableToRepopulateOutSR: "Impossibile popolare il sistema di coordinate di output.",
		defaultTitle: "Maggiori informazioni",
		"ARC (equal arc-second)": "ARC (secondo d'arco uguale)",
		Africa: "Africa",
		Antarctica: "Antartide",
		Argentina: "Argentina",
		Asia: "Asia",
		"Asteroid Belt": "Fascia principale degli asteroidi",
		"Atlantic Ocean": "Oceano Atlantico",
		Australia: "Australia",
		"Australia and New Zealand": "Australia e Nuova Zelanda",
		Austria: "Austria",
		"BLM (US Feet)": "BLM (piedi statunitensi)",
		Bangladesh: "Bangladesh",
		"Beijing 1954": "Pechino 1954",
		Bhutan: "Bhutan",
		CGCS2000: "CGCS2000",
		Canada: "Canada",
		Caribbean: "Caraibi",
		"Caribbean Sea": "Mar dei Caraibi",
		"Central America": "America centrale",
		"Central and North America": "America centrale e settentrionale",
		Colombia: "Colombia",
		Continental: "Continentale",
		"County Systems": "Sistemi di contea",
		"Democratic Republic of the Congo": "Repubblica democratica del Congo",
		"EPSG Arctic": "EPSG Artico",
		Earth: "Terra",
		"Ellipsoidal-based": "Basato su ellissoidale",
		Europe: "Europa",
		Finland: "Finlandia",
		France: "Francia",
		"GSK 2011": "GSK 2011",
		"Gauss Kruger": "Gauss-Krüger",
		"Geographic Coordinate Systems": "Sistemi di coordinate geografiche",
		Germany: "Germania",
		"Gravity-related": "Correlato alla gravità",
		"Greenwich-based": "Basato su Greenwich",
		"Highways England": "Highways England",
		Illinois: "Illinois",
		"Indian Ocean": "Oceano Indiano",
		"Indian Subcontinent": "Subcontinente indiano",
		Indiana: "Indiana",
		Indonesia: "Indonesia",
		Iowa: "Iowa",
		"Ireland and United Kingdom": "Irlanda e Regno Unito",
		Italy: "Italia",
		Japan: "Giappone",
		Jupiter: "Giove",
		Kansas: "Kansas",
		"Las Vegas": "Las Vegas",
		Libya: "Libia",
		Malaysia: "Malaysia",
		"Malaysia and Singapore": "Malaysia e Singapore",
		Mars: "Marte",
		Mercury: "Mercurio",
		Minnesota: "Minnesota",
		Montana: "Montana",
		"NAD 1927": "NAD 1927",
		"NAD 1927 (US Feet)": "NAD 1927 (piedi statunitensi)",
		"NAD 1983": "NAD 1983",
		"NAD 1983 (2011)": "NAD 1983 (2011)",
		"NAD 1983 (2011) (Intl Feet)": "NAD 1983 (2011) (piedi internazionali)",
		"NAD 1983 (2011) (Meters)": "NAD 1983 (2011) (metri)",
		"NAD 1983 (2011) (US Feet)": "NAD 1983 (2011) (piedi statunitensi)",
		"NAD 1983 (CORS96) (Intl Feet)": "NAD 1983 (CORS96) (piedi internazionali)",
		"NAD 1983 (CORS96) (Meters)": "NAD 1983 (CORS96) (metri)",
		"NAD 1983 (CORS96) (US Feet)": "NAD 1983 (CORS96) (piedi statunitensi)",
		"NAD 1983 (Intl Feet)": "NAD 1983 (piedi internazionali)",
		"NAD 1983 (Meters)": "NAD 1983 (metri)",
		"NAD 1983 (PA11) (Meters)": "NAD 1983 (PA11) (metri)",
		"NAD 1983 (PA11) (US Feet)": "NAD 1983 (PA11) (piedi statunitensi)",
		"NAD 1983 (US Feet)": "NAD 1983 (piedi statunitensi)",
		"NAD 1983 HARN (Intl Feet)": "NAD 1983 HARN (piedi internazionali)",
		"NAD 1983 HARN (Meters)": "NAD 1983 HARN (metri)",
		"NAD 1983 HARN (US Feet)": "NAD 1983 HARN (piedi statunitensi)",
		"NAD 1983 NSRS2007 (Intl Feet)": "NAD 1983 NSRS2007 (piedi internazionali)",
		"NAD 1983 NSRS2007 (Meters)": "NAD 1983 NSRS2007 (metri)",
		"NAD 1983 NSRS2007 (US Feet)": "NAD 1983 NSRS2007 (piedi statunitensi)",
		"National Grids": "Griglie nazionali",
		Navajo: "Navajo",
		Neptune: "Nettuno",
		"New Beijing": "Nuova Pechino",
		"New Zealand": "Nuova Zelanda",
		"North America": "Nord America",
		"Northern Hemisphere": "Emisfero settentrionale",
		Norway: "Norvegia",
		Oceans: "Oceani",
		Oregon: "Oregon",
		"Other GCS": "Altro GCS",
		"Pacific Ocean": "Oceano Pacifico",
		Pluto: "Plutone",
		Polar: "Polare",
		Portugal: "Portogallo",
		"Projected Coordinate Systems": "Sistemi di coordinate proiettati",
		"Pulkovo 1942": "Pulkovo 1942",
		"Pulkovo 1995": "Pulkovo 1995",
		Replaced: "Sostituito",
		"SAD 1969": "SAD 1969",
		SIRGAS: "SIRGAS",
		"SIRGAS 2000": "SIRGAS 2000",
		Saturn: "Saturno",
		"Solar System": "Sistema solare",
		"South Africa": "Sudafrica",
		"South America": "Sud America",
		"South Korea": "Corea del Sud",
		"Southern Hemisphere": "Emisfero meridionale",
		"Spheroid-based": "Basato su sferoidi",
		"State Plane": "Piano statale",
		"State Systems": "Sistemi statali",
		Sweden: "Svezia",
		"Switzerland and Liechtenstein": "Svizzera e Liechtenstein",
		Texas: "Texas",
		Tribal: "Tribale",
		Turkey: "Turchia",
		"US Feet": "Piedi internazionali",
		"USA and territories": "Stati Uniti e territori",
		UTM: "UTM",
		Ukraine: "Ucraina",
		"Unknown Height Systems": "Sistemi di altezza sconosciuti",
		Uranus: "Uranio",
		Venus: "Venere",
		"Vertical Coordinate Systems": "Sistemi di coordinate verticali",
		Vietnam: "Vietnam",
		"WGS 1972": "WGS 1972",
		"WGS 1984": "WGS 1984",
		Wisconsin: "Wisconsin",
		"Wisconsin CRS": "Wisconsin CRS",
		World: "Mondo",
		"World (Sphere-based)": "Mondo (basato su sfera)",
		Wyoming: "Wyoming",
		"Xian 1980": "Xian 1980",
		done: "Completato",
		noResults: "Nessun risultato trovato",
		searchPlaceholder: "Nome o WKID",
		browseTemplate: "Cercare modelli di funzione raster",
		saveTemplate: "Salva modello funzioni raster",
		preview: "Anteprima",
		previewDescription: "Visualizzare in anteprima il risultato prima di eseguire l'analisi.",
		showPreview: "Mostra anteprima",
		previewLayer: "Layer di anteprima ${number}",
		newPreview: "Nuova anteprima",
		previewPopup: "Attivare l'anteprima dei risultati dell'analisi in base ai parametri di input.",
		updatePreviewLayer: "Aggiorna layer di anteprima selezionato",
		createPreviewLayer: "Crea nuovo layer di anteprima",
		maximumPreviewAllowed: "Numero massimo di layer di anteprima consentiti: ${maxCount}",
		previewFailure: "Questo layer di anteprima non è disponibile. Controllare i parametri di input e aggiornare nuovamente questo layer di anteprima.",
		header: "Seleziona elemento",
		content: "Sono presenti modifiche non salvate in ${rftTitle}. Se si ricomincia con un nuovo modello, queste modifiche andranno perse.",
		dontSave: "Non salvare",
		"continue": "Continua",
		stretch: "Adatta a finestra",
		pan: "Pan",
		newTemplate: "Crea nuovo modello",
		openTemplate: "Apri modello",
		addFunction: "Aggiungi funzioni raster",
		addConstant: "Aggiungi costante",
		addRaster: "Aggiungi variabile raster",
		move: "Sposta",
		zoom: "Zoom",
		saveAs: "Salvare come",
		clear: "Azzera",
		addRasterFunctionTitle: "Aggiungi funzioni raster",
		templatePropertiesTitle: "Proprietà modello",
		browseRFT: "Cercare modelli di funzione raster",
		defaultToolDescription: "Strumento di analisi ${toolTitle}.",
		openToolText: "Apri strumento",
		toolDropdownText: "Elenco a discesa degli strumenti",
		addToMap: "Confermare e aggiungere alla mappa",
		confirm: "Conferma",
		select: "Seleziona",
		selectTask: "Seleziona attività",
		unsupportedLayer: "Questo parametro non supporta i seguenti layer: ${layerName}.",
		viewDetails: "Visualizza i dettagli completi dell’elemento",
		rename: "Rinomina",
		duplicate: "Duplica",
		launch: "Apri per eseguire",
		templateEditor: "Editor modello",
		createItem: "Salva modello funzioni raster",
		actionLabel: "Filtro",
		filterPopoverHeading: "Filtra funzioni",
		defaultSearchPlaceholder: "Cercare per nome",
		settings: "Impostazioni",
		summary: "Riepilogo",
		definitionQuery: "Interrogazione di definizione",
		matchVariables: "Abbina variabili",
		unionDimension: "Dimensione unione",
		nameEditorPlaceholder: "Inserisci titolo",
		summaryEditorPlaceholder: "Inserisci una breve descrizione.",
		definitionQueryPlaceholder: "Inserisci...",
		upload: "Carica",
		chooseImage: "Clicca per scegliere un file",
		update: "Aggiorna",
		thumbnailErrors: {
			wrongImageType: "Tipo di immagine errato selezionato",
			notAvailable: "Thumbnail non disponibile",
			loadError: "Impossibile caricare l'immagine",
			chooseFile: "Clicca per scegliere il file"
		}
	}
};
const copy = "Copia";
const save = "Salva";
const title = "Titolo";
const folder = "Cartella";
const tags = "Tag";
const savingMessage = "Salvataggio dell’elemento in";
const shareWith = "Condividi con";
const share = "Condividi";
const setSharingLevel = "Imposta il livello di condivisione";
const setGroupSharing = "Imposta la condivisione del gruppo";
const owner = "Proprietario";
const organization = "Organizzazione";
const everyone = "Tutti (pubblica)";
const groups = "Gruppi:";
const type = "Tipo";
const mosaic = "Mosaic";
const itemGroup = "Gruppo di elementi";
const item = "Elemento";
const definitionQuery = "Definition Query";
const groupItemsBy = "Raggruppa elementi per";
const groupFieldName = "Nome campo gruppo";
const tagFieldName = "Nome campo tag";
const noTitleTagErrorMsg = "Specificare un titolo per l’elemento e i tag per consentire di individuare la mappa nelle ricerche.";
const noTitleErrorMsg = "Specificare un titolo per l'elemento.";
const noTagErrorMsg = "Specificare almeno un tag per consentire di individuare l’elemento corrente nelle ricerche.";
const error = "Errore";
const warning = "Avviso";
const success = "Operazione riuscita";
const details = "Dettagli:";
const tryAgain = "Riprova";
const toolModeler = {
	save: "Salva",
	editProperties: "Modifica proprietà",
	saveAs: "Salva con nome",
	savingNotification: "Salvataggio delle modifiche apportate all’elemento in corso...",
	savingTitle: "Salvataggio in corso",
	saveFailedMessage: "Impossibile salvare le modifiche.",
	saveWithErrorsMessage: "Le modifiche sono state salvate con i seguenti errori.",
	viewItemMessage: "Visualizza elemento salvato",
	here: "qui.",
	itemCreatedMessage: "È stato creato un nuovo elemento.",
	clickToViewItemMessage: "Fare clic su OK per visualizzare la pagina dei dettagli dell'elemento; fare clic su Annulla per continuare.",
	readingFailed: "Impossibile caricare il modello di funzione raster selezionato.",
	failedToLoadXML: "Impossibile caricare il modello di funzione raster selezionato in formato XML.",
	learnMore: "Ulteriori informazioni",
	overwriteTitle: "Conferma sovrascrittura",
	overwriteMessage: "Sovrascrivere l'elemento esistente?",
	overwriteSuccessMessage: "L'elemento è stato aggiornato."
};
const toolEditor = {
	run: "Esegui",
	save: "Salva",
	deleteSelected: "Elimina elementi selezionati",
	addRaster: "Aggiungi raster",
	addScalar: "Aggiungi scalare",
	layout: "Layout automatico",
	errorTitle: "Errore",
	invalidToolMessage: "Modello di funzione raster non valido.",
	out: "Uscita",
	zoomIn: "Zoom avanti",
	zoomOut: "Zoom indietro",
	zoomToFit: "Adatta a finestra",
	panOn: "Passa alla modalità pan",
	panOff: "Disattiva modalità pan",
	defaultModelName: "Modello strumento",
	defaultRasterName: "Raster"
};
const toolDetailsEditor = {
	defaultToolName: "Modello funzione raster",
	defaultToolDescription: "Aggiungere un breve riepilogo della funzione raster.",
	defaultHelpText: "Fare clic sull'icona Guida per modificare il testo della guida",
	editHelpTitle: "Aiuto modifica",
	saveLabel: "Salva",
	cancelLabel: "Cancella",
	thumbnail: {
		wrongImageType: "Tipo di immagine errato selezionato",
		notAvailable: "Miniatura non disponibile",
		loadError: "Caricamento dell’immagine non riuscito",
		chooseFile: "Fare clic per scegliere il file"
	}
};
const saveUtils = {
	thumbnail: "Anteprima",
	sharing: "Condivisione"
};
const close = "Chiudi";
const unsavedWarningExisting = "Salvare le modifiche all’elemento <b>${itemTitle}</b>?";
const unsavedWarningNew = "Salvare le modifiche?";
const saveAs = "Salva con nome";
const dontSave = "Non salvare";
const unsavedTitle = "Modifiche non salvate";
const invalidRFTMessage = "Il modello di funzione raster creato non è valido.";
const errorTitle = "Errore";
const breadcrumb = "Editor funzioni raster";
const breadcrumbEditor = "Contenuti > Editor funzioni raster";
const viewerModeTitle = "Solo lettura";
const viewerModeMessage = "La voce del modello di funzione raster è di sola lettura. Le modifiche non possono essere salvate.";
const userStartDirection = "Selezionare una funzione per cominciare a costruire un modello di funzione raster.";
const selectFunction = "Aggiungi funzione";
const deselectFunction = "Rimuovi funzione";
const dialogTitle = "Sistema";
const category = "Categorie";
const search = "Cercare funzioni raster";
const categoryNames = {
	analysis: "Analisi",
	appearance: "Aspetto",
	classification: "Classificazione",
	conversion: "Conversione",
	correction: "Correzione",
	dataManagement: "Gestione dati",
	distance: "Distanza",
	distanceLegacy: "Distanza (precedenti)",
	hydrology: "Idrologia",
	math: "Matematica",
	mathConditional: "Matematica: Condizionale",
	mathLogical: "Matematica: Logica",
	mathTrigonometric: "Matematica: Trigonometria",
	reclass: "Riclassifica",
	statistical: "Statistico",
	surface: "Superficie"
};
const commonStrings_it = {
	ok: ok,
	cancel: cancel,
	enterURL: enterURL,
	serviceURL: serviceURL,
	selectRaster: selectRaster,
	failedToLoadLayer: failedToLoadLayer,
	loadingLayer: loadingLayer,
	selectFeature: selectFeature,
	enterFURL: enterFURL,
	addRaster: addRaster,
	addScalar: addScalar,
	raster: raster,
	scalar: scalar,
	defaultModelName: defaultModelName,
	general: general,
	parameters: parameters,
	variables: variables,
	name: name,
	description: description,
	parameter: parameter,
	isPublic: isPublic,
	isDataset: isDataset,
	unknownPixelType: unknownPixelType,
	outputPixelType: outputPixelType,
	u8PixelType: u8PixelType,
	s8PixelType: s8PixelType,
	u16PixelType: u16PixelType,
	s16PixelType: s16PixelType,
	u32PixelType: u32PixelType,
	s32PixelType: s32PixelType,
	f32PixelType: f32PixelType,
	f64PixelType: f64PixelType,
	properties: properties,
	multidimensionalRules: multidimensionalRules,
	matchVariables: matchVariables,
	unionDimensions: unionDimensions,
	rasterFunctionEditor: rasterFunctionEditor,
	rfxLicenseInfo: rfxLicenseInfo,
	rasterFunctions: rasterFunctions,
	copy: copy,
	save: save,
	title: title,
	folder: folder,
	tags: tags,
	savingMessage: savingMessage,
	shareWith: shareWith,
	share: share,
	setSharingLevel: setSharingLevel,
	setGroupSharing: setGroupSharing,
	owner: owner,
	organization: organization,
	everyone: everyone,
	groups: groups,
	type: type,
	mosaic: mosaic,
	itemGroup: itemGroup,
	item: item,
	definitionQuery: definitionQuery,
	groupItemsBy: groupItemsBy,
	groupFieldName: groupFieldName,
	tagFieldName: tagFieldName,
	noTitleTagErrorMsg: noTitleTagErrorMsg,
	noTitleErrorMsg: noTitleErrorMsg,
	noTagErrorMsg: noTagErrorMsg,
	error: error,
	warning: warning,
	success: success,
	details: details,
	tryAgain: tryAgain,
	toolModeler: toolModeler,
	toolEditor: toolEditor,
	toolDetailsEditor: toolDetailsEditor,
	saveUtils: saveUtils,
	close: close,
	unsavedWarningExisting: unsavedWarningExisting,
	unsavedWarningNew: unsavedWarningNew,
	saveAs: saveAs,
	dontSave: dontSave,
	unsavedTitle: unsavedTitle,
	invalidRFTMessage: invalidRFTMessage,
	errorTitle: errorTitle,
	breadcrumb: breadcrumb,
	breadcrumbEditor: breadcrumbEditor,
	viewerModeTitle: viewerModeTitle,
	viewerModeMessage: viewerModeMessage,
	userStartDirection: userStartDirection,
	selectFunction: selectFunction,
	deselectFunction: deselectFunction,
	dialogTitle: dialogTitle,
	category: category,
	search: search,
	categoryNames: categoryNames
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (commonStrings_it);


//# sourceMappingURL=common-strings.it-efba6f9b.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,