"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_locale-6385c5"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-ef0e54b2.js":
/*!******************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-ef0e54b2.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   C: () => (/* binding */ CSS_UTILITY),
/* harmony export */   a: () => (/* binding */ formatDate),
/* harmony export */   b: () => (/* binding */ formatPlural),
/* harmony export */   f: () => (/* binding */ formatNumber),
/* harmony export */   g: () => (/* binding */ getElementDir),
/* harmony export */   l: () => (/* binding */ languageMap)
/* harmony export */ });
/* harmony import */ var _loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./loadModules-b4ac1247.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-b4ac1247.js");
/* harmony import */ var _dom_4d367677_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dom-4d367677.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-4d367677.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */



const languageMap = new Map([
    ["ar", "ar"],
    ["bg", "bg"],
    ["bs", "bs"],
    ["ca", "ca"],
    ["cs", "cs"],
    ["da", "da"],
    ["de", "de"],
    ["el", "el"],
    ["en", "en"],
    ["es", "es"],
    ["et", "et"],
    ["fi", "fi"],
    ["fr", "fr"],
    ["he", "he"],
    ["hr", "hr"],
    ["hu", "hu"],
    ["id", "id"],
    ["it", "it"],
    ["ja", "ja"],
    ["ko", "ko"],
    ["lt", "lt"],
    ["lv", "lv"],
    ["nb", "nb"],
    ["nl", "nl"],
    ["pl", "pl"],
    ["pt-br", "pt-BR"],
    ["pt-pt", "pt-PT"],
    ["ro", "ro"],
    ["ru", "ru"],
    ["sk", "sk"],
    ["sl", "sl"],
    ["sr", "sr"],
    ["sv", "sv"],
    ["th", "th"],
    ["tr", "tr"],
    ["uk", "uk"],
    ["vi", "vi"],
    ["zh-cn", "zh-CN"],
    ["zh-hk", "zh-HK"],
    ["zh-tw", "zh-TW"]
]);
// rtl
function getElementDir(el) {
    return getElementProp(el, "dir", "ltr");
}
function getElementProp(el, prop, value) {
    const closestWithProp = (0,_dom_4d367677_js__WEBPACK_IMPORTED_MODULE_1__.c)(el, `[${prop}]`);
    return closestWithProp ? closestWithProp.getAttribute(prop) : value;
}
// css
const CSS_UTILITY = {
    rtl: "arcgis--rtl"
};
async function formatNumber(number, options) {
    const { api, type, places } = options || {};
    if (api === 4) {
        const [intl] = await (0,_loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_0__.l)(["esri/intl"]);
        const numberFormatIntlOptions = intl.convertNumberFormatToIntlOptions({
            places,
            style: type,
            digitSeparator: true
        });
        return intl.formatNumber(number, Object.assign(Object.assign({}, numberFormatIntlOptions), { style: type }));
    }
    const [dojoNumber] = await (0,_loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_0__.l)(["dojo/number"]);
    return dojoNumber.format(number, {
        type,
        places,
        pattern: options === null || options === void 0 ? void 0 : options.pattern
    });
}
const cache = {};
function formatDate(date) {
    const lang = document.documentElement.lang;
    const dayShortMonthYear = {
        year: "numeric",
        month: "short",
        day: "numeric"
    };
    if (!cache[lang]) {
        cache[lang] = new Intl.DateTimeFormat(document.documentElement.lang, dayShortMonthYear);
    }
    return cache[lang].format(date);
}
function formatPlural(lang, stringObj, number) {
    const singles = ["id", "ja", "ko", "th", "vi", "zh-cn", "zh-hk", "zh-tw"];
    const likeEnglish = [
        "en",
        "ca",
        "da",
        "de",
        "el",
        "es",
        "et",
        "fi",
        "hi",
        "hu",
        "it",
        "nb",
        "nl",
        "pt-pt",
        "sv",
        "tr"
    ];
    const locale = lang !== null && lang !== void 0 ? lang : "en";
    // if the number is one, or it is a "simple" language, return the 1 string
    if (number === 1 || singles.includes(locale)) {
        return stringObj.single.replace("${number}", "1");
    }
    // if the number is not 1 and the language uses the same pluralization strategy as english,
    // return the multiple string
    if (number !== 1 && likeEnglish.includes(locale)) {
        return stringObj.multiple.replace("${number}", `${number}`);
    }
    // if none of the above worked, return the "unknown" string
    return stringObj.unknown.replace("${number}", `${number}`);
}



//# sourceMappingURL=languageUtil-ef0e54b2.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-050b6db9.js":
/*!************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-050b6db9.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ getComponentClosestLanguage),
/* harmony export */   g: () => (/* binding */ getLocaleComponentStrings)
/* harmony export */ });
/* harmony import */ var _dom_4d367677_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dom-4d367677.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-4d367677.js");
/* harmony import */ var _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./languageUtil-ef0e54b2.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-ef0e54b2.js");
/* harmony import */ var _index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./index-e3bf7da7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-e3bf7da7.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */




// https://medium.com/stencil-tricks/implementing-internationalisation-i18n-with-stencil-5e6559554117
function getComponentClosestLanguage(element) {
    var _a, _b, _c;
    const closestElement = (_a = (0,_dom_4d367677_js__WEBPACK_IMPORTED_MODULE_0__.c)(element, "[lang]")) !== null && _a !== void 0 ? _a : (_c = (_b = element.shadowRoot) === null || _b === void 0 ? void 0 : _b.ownerDocument) === null || _c === void 0 ? void 0 : _c.documentElement;
    // language set by the calling application or browser. defaults to english.
    const lang = ((closestElement === null || closestElement === void 0 ? void 0 : closestElement.lang) || (navigator === null || navigator === void 0 ? void 0 : navigator.language) || "en").toLowerCase();
    if (_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang)) {
        return _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang);
    }
    else {
        // "ru-RU" maps to "ru" use case
        if (_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang.slice(0, 2))) {
            return _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang.slice(0, 2));
        }
        else {
            return "en";
        }
    }
}
function getComponentClosestLanguageIntl(element) {
    var _a, _b, _c;
    // it's OK if we don't have the 4 letter language file for it
    // 4 letter language code needed for formatting numbers
    const closestElement = (_a = (0,_dom_4d367677_js__WEBPACK_IMPORTED_MODULE_0__.c)(element, "[lang]")) !== null && _a !== void 0 ? _a : (_c = (_b = element.shadowRoot) === null || _b === void 0 ? void 0 : _b.ownerDocument) === null || _c === void 0 ? void 0 : _c.documentElement;
    // language set by the calling application or browser. defaults to english.
    const lang = ((closestElement === null || closestElement === void 0 ? void 0 : closestElement.lang) || (navigator === null || navigator === void 0 ? void 0 : navigator.language) || "en").toLowerCase();
    if (_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang)) {
        return _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang);
    }
    else {
        if (_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang.slice(0, 2))) {
            // we support the 2 letter coded language
            // e.g. it-CH vs it
            return lang;
        }
        else {
            return "en";
        }
    }
}
function fetchLocaleStringsForComponent(componentName, locale) {
    return new Promise((resolve, reject) => {
        fetch((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_2__.a)(`../arcgis-app-assets/i18n/${componentName}.i18n.${locale}.json`)).then((result) => {
            if (result.ok)
                resolve(result.json());
            else
                reject();
        }, () => reject());
    });
}
const stringCache = {};
function fetchLocaleStringsFromCache(componentName, locale) {
    const id = `${componentName}${locale}`;
    if (!stringCache[id]) {
        stringCache[id] = fetchLocaleStringsForComponent(componentName, locale);
    }
    return stringCache[id];
}
/**
 * Get strings and language codes.
 * This method returns 2 language codes.
 * The first one returns a code that's also supported as a language file.
 * The second one returns a code where there is support for the first 2 letters of the code as part of a language file,
 * but will return the original 4 letter code from the page.
 * E.g. For "it-ch" it will return "it" as the first language code and "it-ch" as the second.
 * The second one is required for esri.intl.setLocale() to get the correct formatting.
 *
 * If a tagName is provided it will overwite the element's tagName
 *
 *  @return [ strings, first language code, second language code]
 */
async function getLocaleComponentStrings(element, tagName) {
    const componentName = tagName || element.tagName.toLowerCase();
    const componentLanguage = getComponentClosestLanguage(element);
    const componentLanguageIntl = getComponentClosestLanguageIntl(element);
    let strings;
    try {
        strings = await fetchLocaleStringsFromCache(componentName, componentLanguage);
    }
    catch (e) {
        console.warn(`no locale for ${componentName} (${componentLanguage}) loading default locale en.`);
        strings = await fetchLocaleStringsFromCache(componentName, "en");
    }
    return [strings, componentLanguage, componentLanguageIntl];
}



//# sourceMappingURL=locale-050b6db9.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/user-0fa9ff5a.js":
/*!**********************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/user-0fa9ff5a.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ fetchItemUserInfo),
/* harmony export */   b: () => (/* binding */ fetchVerified),
/* harmony export */   c: () => (/* binding */ getUserThumbnailURI),
/* harmony export */   d: () => (/* binding */ fetchUserGroups),
/* harmony export */   e: () => (/* binding */ fetchUserItemsTotal),
/* harmony export */   f: () => (/* binding */ fetchUser),
/* harmony export */   g: () => (/* binding */ getFullName)
/* harmony export */ });
/* harmony import */ var _portal_d518b571_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./portal-d518b571.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/portal-d518b571.js");
/* harmony import */ var _query_d62660d4_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./query-d62660d4.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/query-d62660d4.js");
/* harmony import */ var _dom_4d367677_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./dom-4d367677.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-4d367677.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */




async function getOrgProperties(item, orgId, locale, portal, checkOnline) {
    var _a, _b;
    const hostName = ((_a = item.portal) === null || _a === void 0 ? void 0 : _a.portalHostname) || (portal === null || portal === void 0 ? void 0 : portal.portalHostname) || ((_b = portal === null || portal === void 0 ? void 0 : portal.restUrl) === null || _b === void 0 ? void 0 : _b.replace("/sharing/rest", ""));
    const portalUrl = checkOnline
        ? `https://www.arcgis.com/sharing/rest/portals/${orgId}`
        : `https://${hostName}/sharing/rest/portals/${orgId}`;
    if (!hostName && !checkOnline) {
        return null;
    }
    const options = checkOnline ? { disableIdentityLookup: true, addTokenManually: false } : {};
    const self = await (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_0__.r)(portalUrl, {}, options);
    const { urlKey, thumbnail, customBaseUrl } = self;
    const url = `https://${urlKey}.${customBaseUrl}/`;
    const thumbnailUrl = thumbnail ? `${url}sharing/rest/portals/self/resources/${thumbnail}` : null;
    let name, description;
    try {
        const properties = await (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_0__.r)(`${portalUrl}/resources/localizedOrgProperties`, { start: 1, num: 100 }, options);
        if (properties) {
            const localizedOrgProperties = properties[locale] || properties.default;
            name = localizedOrgProperties.name;
            description = localizedOrgProperties.description || properties.description;
        }
    }
    catch (_c) {
        // org doesn't have localized org properties
    }
    return {
        name: name || self.name,
        description: (0,_dom_4d367677_js__WEBPACK_IMPORTED_MODULE_2__.a)(description || self.description),
        url: `${url}home/`,
        thumbnail: thumbnailUrl
    };
}
async function fetchVerified(item, locale, portal, checkOnline) {
    var _a, _b, _c;
    const orgId = (_c = (_a = item.orgId) !== null && _a !== void 0 ? _a : (_b = item.portal) === null || _b === void 0 ? void 0 : _b.id) !== null && _c !== void 0 ? _c : portal === null || portal === void 0 ? void 0 : portal.id;
    return (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_0__.f)(() => getOrgProperties(item, orgId, locale, portal, checkOnline), "verified", orgId);
}

async function fetchUser(username, portal, checkOnline) {
    const restBase = checkOnline ? "https://www.arcgis.com/sharing/rest/" : (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_0__.g)(portal);
    const url = `${restBase !== null && restBase !== void 0 ? restBase : (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_0__.g)(portal)}community/users/${username}`;
    const onlineFromPortal = (url === null || url === void 0 ? void 0 : url.includes("www.arcgis.com")) && portal.isPortal;
    const options = onlineFromPortal ? { disableIdentityLookup: true, addTokenManually: false } : {};
    return (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_0__.f)(async () => {
        try {
            const result = await (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_0__.r)(url, {}, options);
            return result;
        }
        catch (error) {
            // an error fetching the user likely means the user is private
            // return a user-shaped object with just the username
            return { username };
        }
    }, "user", url);
}
async function fetchItemUserInfo(item, portal, lang, checkOnline) {
    var _a, _b;
    if ((item === null || item === void 0 ? void 0 : item.contentStatus) === "public_authoritative" ||
        ((_a = item.sourceJSON) === null || _a === void 0 ? void 0 : _a.contentStatus) === "public_authoritative") {
        const verifiedInfo = await fetchVerified(item, lang, portal, checkOnline);
        if (!verifiedInfo) {
            return fetchUser(item.owner, portal, checkOnline);
        }
        const { description, name, thumbnail, url } = verifiedInfo;
        return {
            description: description ? (0,_dom_4d367677_js__WEBPACK_IMPORTED_MODULE_2__.s)(description) : "",
            fullName: name,
            username: item.owner,
            thumbnail,
            id: item.orgId || ((_b = item.portal) === null || _b === void 0 ? void 0 : _b.id),
            url
        };
    }
    return fetchUser(item.owner, portal, checkOnline);
}
async function fetchUserGroups(username, portal, checkOnline) {
    const restBase = checkOnline ? "https://www.arcgis.com/sharing/rest/" : (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_0__.g)(portal);
    const options = checkOnline ? { disableIdentityLookup: true, addTokenManually: false } : {};
    const searchGroups = async () => (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_0__.r)(`${restBase}community/groups`, {
        q: `(owner:"${username}")`,
        num: 100
    }, options);
    return (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_0__.f)(searchGroups, "userGroups", username);
}
async function fetchUserItemsTotal(user, portal, checkOnline) {
    const { username } = user;
    const restBase = checkOnline ? "https://www.arcgis.com/sharing/rest/" : (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_0__.g)(portal);
    const options = checkOnline ? { disableIdentityLookup: true, addTokenManually: false } : {};
    const searchUserItemTotal = async () => {
        const response = await (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_0__.r)(`${restBase}search`, {
            q: `(owner:"${username}") ${_query_d62660d4_js__WEBPACK_IMPORTED_MODULE_1__.H}`,
            num: 1
        }, options);
        return response.total;
    };
    return (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_0__.f)(searchUserItemTotal, "userItemsTotal", username);
}
function getUserThumbnailURI(user, portal, noToken = false) {
    // 4.x portal user has a property for this
    if (user.thumbnailUrl) {
        return user.thumbnailUrl;
    }
    if (!user.thumbnail) {
        return null;
    }
    // if user begins with a protocol, assume it's already fully qualified
    if (user.thumbnail.startsWith("http")) {
        return user.thumbnail;
    }
    const token = (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_0__.e)(portal);
    return `${(0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_0__.g)(portal)}community/users/${user.username}/info/${user.thumbnail}${token && !noToken ? `?token=${token}` : ""}`;
}
function getFullName(user, lang) {
    const { fullName, firstName, lastName, username } = user;
    if (!fullName) {
        if (firstName && lastName) {
            return lang === "ja" ? `${lastName} ${firstName}` : `${firstName} ${lastName}`;
        }
        return username;
    }
    return fullName;
}



//# sourceMappingURL=user-0fa9ff5a.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,