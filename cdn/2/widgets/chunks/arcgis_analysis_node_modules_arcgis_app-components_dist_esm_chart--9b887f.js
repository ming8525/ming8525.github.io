"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_chart--9b887f"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/chart-097ec280.js":
/*!***********************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/chart-097ec280.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ createChartRendererFromExisting),
/* harmony export */   c: () => (/* binding */ createChartRenderer)
/* harmony export */ });
/* harmony import */ var _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./raster-unique-value-0976ec7f.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/raster-unique-value-0976ec7f.js");
/* harmony import */ var _loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./loadModules-b4ac1247.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-b4ac1247.js");
/* harmony import */ var _commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./commonFunctions-b0830e9e.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/commonFunctions-b0830e9e.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */




/**
 * Updates the layer with a Chart renderer with default settings
 * @param options: options
 */
function createChartRenderer(options) {
    var _a;
    const { layer: smLayer, mapView, selectedFields, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    const layer = smLayer;
    options = options || {};
    const extras = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.m)((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer));
    const includeSizeVariable = (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_2__.i)(options.includeSizeVariable) ? options.includeSizeVariable : false;
    return modules.PieChartCreator.createRenderer({
        layer,
        view: mapView,
        attributes: getChartAttributes(options.fieldInfos),
        pieChartScheme: options.pieChartScheme || (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.Z)(),
        includeSizeVariable,
        outlineOptimizationEnabled: (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_2__.i)(options.outlineOptimizationEnabled)
            ? options.outlineOptimizationEnabled
            : (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.q)(layer) && includeSizeVariable
                ? true
                : false,
        sizeOptimizationEnabled: (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_2__.i)(options.sizeOptimizationEnabled) ? options.sizeOptimizationEnabled : true,
        legendOptions: options.legendOptions,
        forBinning: ((_a = layer.featureReduction) === null || _a === void 0 ? void 0 : _a.type) === "binning"
    }).then((result) => {
        //console.log("createChartRenderer result", result.renderer.toJSON());
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.l)(extras, result.renderer, { notOpacity: true });
        const rendererType = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.g)();
        if (["chart", "chart-size"].indexOf(rendererType) > -1) {
            // current renderer was chart too
            const rendererFields = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.f)(layer);
            const selNames = selectedFields.map((selField) => selField.field);
            const renNames = rendererFields.map((renField) => renField.field);
            const sameFields = selNames.toString() === renNames.toString();
            const selNamesSorted = modules.esriLang.clone(selNames);
            const renNamesSorted = modules.esriLang.clone(renNames);
            selNamesSorted.sort();
            renNamesSorted.sort();
            const sameFieldsSorted = selNamesSorted.toString() === renNamesSorted.toString();
            if (sameFieldsSorted) {
                // keep colors and labels
                result.renderer.attributes = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer).attributes;
                if (!sameFields) {
                    // order of fields is not the same, re-order
                    result.renderer.attributes.sort((a, b) => {
                        return selNames.indexOf(a.field) - selNames.indexOf(b.field);
                    });
                }
                result.renderer.othersCategory = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer).othersCategory;
                // keep donut
                result.renderer.holePercentage = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer).holePercentage;
            }
        }
        return Promise.resolve(result);
    }, (error) => Promise.reject(error));
}
/**
 * Creates a Chart renderer with settings from current renderer
 * @param options: only contains properties that need to be overwritten
 */
function createChartRendererFromExisting(options) {
    var _a, _b;
    const { layer: smLayer, mapView, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    const layer = smLayer;
    options = options || {};
    const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer);
    const sizeVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a)(renderer, "size");
    const authSizeVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.p)(renderer, "size");
    const extras = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.m)(renderer);
    let fieldInfos = options.fieldInfos
        ? options.fieldInfos
        : renderer.attributes.map((attribute) => {
            return {
                field: attribute.field,
                simpleFieldType: _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.w.NUMBER
            };
        });
    let isSameFields = true;
    let lastFieldsOrder;
    if (options.fieldInfos) {
        // compare
        renderer.attributes.forEach((attribute, idx) => {
            if (attribute.field !== options.fieldInfos[idx].field) {
                isSameFields = false;
            }
        });
        if (isSameFields) {
            // no changes to fields
            delete options.fieldInfos;
            if ((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.R)(options)) {
                // nothing really changes
                const newRender = renderer.clone();
                return Promise.resolve({ renderer: newRender });
            }
        }
    }
    if (isSameFields) {
        // keep the order of fields
        lastFieldsOrder = renderer.attributes.map((attribute) => attribute.field);
    }
    const pcRenderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer);
    const color = ((_a = pcRenderer.attributes) === null || _a === void 0 ? void 0 : _a.length) ? pcRenderer.attributes[0].color : null;
    const backgroundFillSymbol = renderer.backgroundFillSymbol;
    let isInverted = false;
    if (sizeVisVar) {
        if (sizeVisVar.minSize.stops) {
            isInverted = sizeVisVar.minSize.stops[0].size > sizeVisVar.maxSize.stops[0].size;
        }
        else {
            isInverted = sizeVisVar.minSize > sizeVisVar.maxSize;
        }
    }
    const temp = fieldInfos[0];
    fieldInfos[0] = fieldInfos[1];
    fieldInfos[1] = temp;
    return modules.PieChartCreator.createRenderer({
        layer,
        view: mapView,
        attributes: getChartAttributes(fieldInfos),
        pieChartScheme: options.pieChartScheme || (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.Z)(),
        includeSizeVariable: (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_2__.i)(options.includeSizeVariable) ? options.includeSizeVariable : !!sizeVisVar,
        outlineOptimizationEnabled: (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_2__.i)(options.outlineOptimizationEnabled)
            ? options.outlineOptimizationEnabled
            : !!extras.sizeOutlineVisVar,
        sizeOptimizationEnabled: (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_2__.i)(options.sizeOptimizationEnabled)
            ? options.sizeOptimizationEnabled
            : !!extras.sizeAutoVisVar,
        legendOptions: undefined,
        forBinning: ((_b = layer.featureReduction) === null || _b === void 0 ? void 0 : _b.type) === "binning"
    }).then((result) => {
        //console.log("createRenderer", result);
        var _a;
        // keep slider values
        if (!options.fieldInfos && sizeVisVar) {
            const newSizeVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a)(result.renderer, "size");
            newSizeVisVar.minDataValue = sizeVisVar.minDataValue;
            newSizeVisVar.maxDataValue = sizeVisVar.maxDataValue;
            if (authSizeVisVar) {
                const newAuthSizeVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.p)(result.renderer, "size");
                newAuthSizeVisVar.minSliderValue = authSizeVisVar.minSliderValue;
                newAuthSizeVisVar.maxSliderValue = authSizeVisVar.maxSliderValue;
            }
        }
        if (isSameFields && extras.opacityVisVar && extras.authOpacityVisVar) {
            // keep the one we had
            result.renderer.visualVariables = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.n)(result.renderer, "opacity");
            result.renderer.authoringInfo.visualVariables = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.o)(result.renderer, "opacity");
            result.renderer.visualVariables.push(extras.opacityVisVar);
            result.renderer.authoringInfo.visualVariables = result.renderer.authoringInfo.visualVariables || [];
            result.renderer.authoringInfo.visualVariables.push(extras.authOpacityVisVar);
        }
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.l)(extras, result.renderer, { notOpacity: true });
        if (lastFieldsOrder) {
            // keep order of fields
            result.renderer.attributes.sort((attributeA, attributeB) => {
                const indexA = lastFieldsOrder.indexOf(attributeA.field);
                const indexB = lastFieldsOrder.indexOf(attributeB.field);
                return indexA > -1 && indexB > -1 && indexA < indexB
                    ? -1
                    : indexA > -1 && indexB > -1 && indexA > indexB
                        ? 1
                        : indexA > -1
                            ? -1
                            : indexB > -1
                                ? 1
                                : 0;
            });
        }
        if (isSameFields) {
            // keep labels
            result.renderer.attributes.forEach((attribute, idx) => {
                attribute.label = renderer.attributes[idx].label;
            });
        }
        // holePercentage, size, othersCategory
        result.renderer.size = renderer.size;
        result.renderer.holePercentage = renderer.holePercentage;
        result.renderer.othersCategory = renderer.othersCategory;
        if (color && ((_a = result.renderer.attributes) === null || _a === void 0 ? void 0 : _a.length)) {
            result.renderer.attributes.map((attribute, idx) => {
                if (isSameFields) {
                    // keep the color from previous renderer
                    attribute.color = renderer.attributes[idx].color;
                }
            });
        }
        if (backgroundFillSymbol) {
            result.renderer.backgroundFillSymbol = backgroundFillSymbol;
        }
        if (isInverted) {
            const sizeVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a)(result.renderer, "size");
            const tmp = sizeVisVar.minSize;
            sizeVisVar.minSize = sizeVisVar.maxSize;
            sizeVisVar.maxSize = tmp;
        }
        return Promise.resolve(result);
    }, (error) => Promise.reject(error));
}
function getChartAttributes(fieldInfos) {
    return fieldInfos.map((fieldInfo) => {
        return {
            field: fieldInfo.field,
            label: getFieldLabel(fieldInfo.field)
        };
    });
}
function getFieldLabel(fieldName) {
    const galleryFields = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s.fields.filter((field) => field.layerField.name === fieldName);
    if (galleryFields.length) {
        return galleryFields[0].label;
    }
    return "";
}



//# sourceMappingURL=chart-097ec280.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,