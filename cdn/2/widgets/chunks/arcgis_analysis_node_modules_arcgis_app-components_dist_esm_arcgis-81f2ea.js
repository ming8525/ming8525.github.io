"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_arcgis-81f2ea"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-smart-mapping-panels-raster-class-breaks_8.entry.js":
/*!****************************************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-smart-mapping-panels-raster-class-breaks_8.entry.js ***!
  \****************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   arcgis_smart_mapping_panels_raster_class_breaks: () => (/* binding */ ArcgisSmartMappingPanelsRasterClassBreaks),
/* harmony export */   arcgis_smart_mapping_panels_raster_colormap: () => (/* binding */ ArcgisSmartMappingPanelsRasterColormap),
/* harmony export */   arcgis_smart_mapping_panels_raster_flow: () => (/* binding */ ArcgisSmartMappingPanelsRasterFlow),
/* harmony export */   arcgis_smart_mapping_panels_raster_rgb: () => (/* binding */ ArcgisSmartMappingPanelsRasterRgb),
/* harmony export */   arcgis_smart_mapping_panels_raster_shaded_relief: () => (/* binding */ ArcgisSmartMappingPanelsRasterShadedRelief),
/* harmony export */   arcgis_smart_mapping_panels_raster_stretch: () => (/* binding */ ArcgisSmartMappingPanelsRasterStretch),
/* harmony export */   arcgis_smart_mapping_panels_raster_unique_value: () => (/* binding */ ArcgisSmartMappingPanelsRasterUniqueValue),
/* harmony export */   arcgis_smart_mapping_panels_raster_vector_field: () => (/* binding */ ArcgisSmartMappingPanelsRasterVectorField)
/* harmony export */ });
/* harmony import */ var _index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-e3bf7da7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-e3bf7da7.js");
/* harmony import */ var _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./raster-unique-value-0976ec7f.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/raster-unique-value-0976ec7f.js");
/* harmony import */ var _loading_69139907_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./loading-69139907.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loading-69139907.js");
/* harmony import */ var _loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./loadModules-b4ac1247.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-b4ac1247.js");
/* harmony import */ var _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./commonEnums-fcf13661.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/commonEnums-fcf13661.js");
/* harmony import */ var _raster_renderer_a62f152c_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./raster-renderer-a62f152c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/raster-renderer-a62f152c.js");
/* harmony import */ var _raster_symbolStyler_9b32ef48_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./raster-symbolStyler-9b32ef48.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/raster-symbolStyler-9b32ef48.js");
/* harmony import */ var _symbolStyler_04635b2b_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./symbolStyler-04635b2b.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/symbolStyler-04635b2b.js");
/* harmony import */ var _raster_class_breaks_50c446bd_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./raster-class-breaks-50c446bd.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/raster-class-breaks-50c446bd.js");
/* harmony import */ var _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./languageUtil-ef0e54b2.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-ef0e54b2.js");
/* harmony import */ var _functional_44de8fcf_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./functional-44de8fcf.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-44de8fcf.js");
/* harmony import */ var _raster_flow_761a3470_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./raster-flow-761a3470.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/raster-flow-761a3470.js");
/* harmony import */ var _popover_721f7ba2_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./popover-721f7ba2.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/popover-721f7ba2.js");
/* harmony import */ var _locale_050b6db9_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./locale-050b6db9.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-050b6db9.js");
/* harmony import */ var _dom_4d367677_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./dom-4d367677.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-4d367677.js");
/* harmony import */ var _index_05956cab_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./index-05956cab.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-05956cab.js");
/* harmony import */ var _commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./commonFunctions-b0830e9e.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/commonFunctions-b0830e9e.js");
/* harmony import */ var _location_e26b539f_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./location-e26b539f.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/location-e26b539f.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */



















const arcgisSmartMappingPanelsRasterClassBreaksCss = ":host{width:100%}.flow-item{height:100%}.class-breaks-block{overflow-x:hidden;overflow-wrap:anywhere}.hidden{display:none}.label:focus,.symbol:focus{outline:2px solid var(--calcite-color-brand)}.label,.symbol-container{padding-top:5px;padding-bottom:5px}.selected{outline:1px solid var(--calcite-color-brand)}";

const ArcgisSmartMappingPanelsRasterClassBreaks = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisSmartMappingPanelsRasterClassBreaksClose = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingPanelsRasterClassBreaksClose", 7);
        this.arcgisSmartMappingPanelsRasterClassBreaksBackClick = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingPanelsRasterClassBreaksBackClick", 7);
        this.arcgisSmartMappingPanelsRasterClassBreaksError = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingPanelsRasterClassBreaksError", 7);
        this.symbolNodes = [];
        this.labelNodes = [];
        this.inputNodes = [];
        //--------------------------------------------------------------------------
        //
        //  Private methods
        //
        //--------------------------------------------------------------------------
        this.handleDone = () => {
            // keep the current settings on the layer
            this.arcgisSmartMappingPanelsRasterClassBreaksClose.emit("save");
        };
        this.handleCancel = () => {
            const { originalRendererObj } = this;
            const { layer: smLayer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
            const layer = smLayer;
            (0,_raster_renderer_a62f152c_js__WEBPACK_IMPORTED_MODULE_5__.a)(originalRendererObj, layer);
            this.arcgisSmartMappingPanelsRasterClassBreaksClose.emit("cancel");
        };
        this.menuOpen = undefined;
        this.showBackButton = undefined;
        this.beforeBack = undefined;
    }
    //--------------------------------------------------------------------------
    //
    //  Public Methods
    //
    //--------------------------------------------------------------------------
    async setFocus() {
        var _a;
        (_a = this.flowItemNode) === null || _a === void 0 ? void 0 : _a.setFocus();
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    componentWillLoad() {
        const { layer: smLayer, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        const renderer = layer.renderer;
        // save original renderer
        this.originalRendererObj = modules.esriLang.clone(layer.renderer);
        this.defaultColorRamp = renderer.classBreakInfos.map((classBreakInfo) => classBreakInfo.symbol.color);
    }
    componentDidLoad() {
        requestAnimationFrame(() => { var _a; return (_a = this.flowItemNode) === null || _a === void 0 ? void 0 : _a.setFocus(); });
    }
    //--------------------------------------------------------------------------
    //
    //  Render Methods
    //
    //--------------------------------------------------------------------------
    render() {
        const { hideLayerTitle, layer, strings, isRTL } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const title = layer.title;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.H, { class: "calcite-match-height" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-flow-item", { heading: strings.panels.classBreaks.styleOptions, description: !hideLayerTitle ? title : undefined, class: {
                "flow-item": true,
                [_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_9__.C.rtl]: isRTL
            }, closable: (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.aa)(this.hostElement), menuOpen: this.menuOpen, beforeBack: this.beforeBack,
            // @ts-ignore
            showBackButton: this.showBackButton, onCalciteFlowItemClose: this.handleDone, onCalciteFlowItemBack: () => this.arcgisSmartMappingPanelsRasterClassBreaksBackClick.emit(), ref: (node) => (this.flowItemNode = node) }, this.renderVisualization(), this.renderDoneButton(), this.renderCancelButton())));
    }
    renderVisualization() {
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-block", { class: "class-breaks-block", heading: strings.panels.classBreaks.classBreaks, open: true }, this.renderFieldSelector(), this.renderMethod(), this.renderClasses(), this.renderDefinedInterval(), this.renderColorScheme(), this.renderColorSlider(), this.renderValues()));
    }
    renderFieldSelector() {
        var _a;
        const { layer: smLayer, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        const renderer = layer.renderer;
        const rendererField = renderer.field || strings.panels.classBreaks.value;
        const fields = (0,_raster_class_breaks_50c446bd_js__WEBPACK_IMPORTED_MODULE_8__.g)();
        const fieldList = fields.map((field) => {
            return {
                label: field.alias,
                layerField: field,
                // raster layer displays are not dependent on field type, so we use "string" as a placeholder
                simpleFieldType: _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.w.STRING
            };
        });
        const selectedField = fields.find((field) => {
            return field.name === rendererField;
        });
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-attribute-input", { label: strings.panels.classBreaks.field, fieldList: fieldList, selectedField: {
                field: (_a = selectedField === null || selectedField === void 0 ? void 0 : selectedField.name) !== null && _a !== void 0 ? _a : strings.panels.classBreaks.value,
                // raster layer displays are not dependent on field type, so we use "string" as a placeholder
                simpleFieldType: _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.w.STRING
            }, mode: "simple", popoverReferenceElement: this.flowItemNode, onArcgisSmartMappingAttributeInputChange: (event) => {
                if (event.detail) {
                    const newField = event.detail.field;
                    this.handleFieldChange(newField);
                }
            } }));
    }
    renderMethod() {
        const { layer: smLayer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        const renderer = layer.renderer;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-method-button", { key: renderer.authoringInfo.classificationMethod, showDefinedInterval: true, onArcgisSmartMappingMethodButtonBeforeOpen: () => (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.E)(), onArcgisSmartMappingMethodButtonChange: (event) => {
                var _a, _b;
                const renderer = layer.renderer;
                if (event.detail === "manual") {
                    const authInfo = renderer.authoringInfo;
                    authInfo.classificationMethod = "manual";
                    (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
                    (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
                    setTimeout(() => this.methodButtonNode.setFocus(), 300);
                }
                else {
                    let numClasses = ((_a = renderer === null || renderer === void 0 ? void 0 : renderer.authoringInfo) === null || _a === void 0 ? void 0 : _a.numClasses) || ((_b = renderer.classBreakInfos) === null || _b === void 0 ? void 0 : _b.length);
                    let definedInterval;
                    if (event.detail === "defined-interval") {
                        const classBreaks = renderer.classBreakInfos;
                        definedInterval =
                            (classBreaks[classBreaks.length - 1].maxValue - classBreaks[0].minValue) / 5;
                        numClasses = Math.ceil((renderer.classBreakInfos[numClasses - 1].maxValue -
                            renderer.classBreakInfos[0].minValue) /
                            definedInterval);
                    }
                    (0,_loading_69139907_js__WEBPACK_IMPORTED_MODULE_2__.r)((0,_raster_class_breaks_50c446bd_js__WEBPACK_IMPORTED_MODULE_8__.b)({
                        classificationMethod: event.detail,
                        numClasses,
                        definedInterval
                    }), this.flowItemNode).then((result) => {
                        this.updateRenderer(result.renderer);
                        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
                        setTimeout(() => this.methodButtonNode.setFocus(), 300);
                    }, (error) => {
                        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.methodButtonNode);
                        this.arcgisSmartMappingPanelsRasterClassBreaksError.emit(error);
                    });
                }
            }, ref: (node) => {
                if (node) {
                    this.methodButtonNode = node;
                }
            } }));
    }
    renderClasses() {
        const { layer: smLayer, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        const renderer = layer.renderer;
        const numClasses = renderer.classBreakInfos.length;
        const authInfo = renderer.authoringInfo;
        const classificationMethod = authInfo.classificationMethod;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, strings.panels.classBreaks.classifyClasses, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-input-number", { tabindex: "0", value: `${numClasses}`, disabled: classificationMethod === "defined-interval", min: 1, max: 10, step: 1, scale: "s", onCalciteInputNumberInput: (0,_functional_44de8fcf_js__WEBPACK_IMPORTED_MODULE_10__.d)(() => {
                const value = parseInt(this.classesNode.value);
                if (value === numClasses) {
                    return;
                }
                if (!value || value < this.classesNode.min || value > this.classesNode.max) {
                    this.classesChangeHandle = setTimeout(() => this.handleClassesChange(), 3000);
                }
                else {
                    clearTimeout(this.classesChangeHandle);
                    this.handleClassesChange();
                }
            }, 300), ref: (node) => {
                if (node) {
                    this.classesNode = node;
                }
            } })));
    }
    renderDefinedInterval() {
        const { layer: smLayer, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        const renderer = layer.renderer;
        const authInfo = renderer.authoringInfo;
        const classificationMethod = authInfo.classificationMethod;
        if (classificationMethod !== "defined-interval") {
            return null;
        }
        const breakInterval = renderer.classBreakInfos[0].maxValue - renderer.classBreakInfos[0].minValue;
        // set min and max based on a maximum of 10 classes
        const min = Math.floor((renderer.classBreakInfos[renderer.classBreakInfos.length - 1].maxValue -
            renderer.classBreakInfos[0].minValue) /
            9.1);
        const max = renderer.classBreakInfos[renderer.classBreakInfos.length - 1].maxValue -
            renderer.classBreakInfos[0].minValue;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, strings.panels.classBreaks.definedInterval, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-input-number", { tabIndex: 0, value: `${Math.round(breakInterval * 100) / 100}`, min: min, max: max, step: 0.1, scale: "s", onCalciteInputNumberInput: (event) => {
                const node = event.target;
                const newValue = parseFloat(node.value);
                if (!node.value || newValue < node.min || newValue > node.max) {
                    this.definedIntervalChangeHandle = setTimeout(() => this.handleDefinedIntervalChange(), 3000);
                }
                else {
                    clearTimeout(this.definedIntervalChangeHandle);
                    this.handleDefinedIntervalChange();
                }
            }, ref: (node) => (this.definedIntervalNode = node) })));
    }
    renderColorScheme() {
        const { layer: smLayer, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        const renderer = layer.renderer;
        const colors = renderer.classBreakInfos.map((classBreakInfo) => (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.t)(classBreakInfo.symbol));
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-symbol-button", { label: strings.panels.classBreaks.colorScheme, type: "raster-class-breaks", rampType: "discrete", colors: colors, onArcgisSmartMappingSymbolButtonSymbolChange: (event) => {
                const node = event.target;
                const renderer = layer.renderer;
                this.defaultColorRamp = renderer.classBreakInfos.map((classBreakInfo) => classBreakInfo.symbol.color);
                (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
                (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
                (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.sliderNode);
                (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(node);
            }, ref: (node) => (this.symbolButtonNode = node) }));
    }
    renderColorSlider() {
        const { layer: smLayer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-class-breaks-color-slider", { onArcgisSmartMappingClassBreaksColorSliderChange: (event) => {
                const renderer = layer.renderer;
                const instructions = event.detail;
                if (instructions === null || instructions === void 0 ? void 0 : instructions.updateValues) {
                    renderer.authoringInfo.classificationMethod = "manual";
                }
                if (instructions === null || instructions === void 0 ? void 0 : instructions.invertColors) {
                    (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.symbolButtonNode);
                }
                (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
                (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.sliderNode);
                this.defaultColorRamp = renderer.classBreakInfos.map((classBreakInfo) => classBreakInfo.symbol.color);
            }, ref: (node) => (this.sliderNode = node) }));
    }
    renderValues() {
        const { layer: smLayer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        const renderer = layer.renderer;
        this.labelNodes = [];
        this.inputNodes = [];
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-list", null, renderer.classBreakInfos
            .map((classBreakInfo, idx) => {
            return this.renderValue(classBreakInfo, idx);
        })
            .reverse()));
    }
    renderValue(classBreakInfo, idx) {
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-list-item", null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "symbol-container", slot: "actions-start" }, this.renderSymbolNode(classBreakInfo, idx)), this.renderTextNode(classBreakInfo, idx)));
    }
    renderSymbolNode(classBreakInfo, idx) {
        const { layer: smLayer, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        const renderer = layer.renderer;
        let symbol = renderer.classBreakInfos[idx].symbol.clone();
        const symbolNodeClasses = {
            "symbol-is-white": (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.aq)(symbol),
            symbol: true
        };
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: symbolNodeClasses, tabindex: "0", "aria-label": strings.panels.classBreaks.accessibility.editColorFor.replace("${value}", classBreakInfo.label), "aria-haspopup": "true", ref: (node) => {
                if (node) {
                    this.symbolNodes.unshift(node);
                }
            }, onClick: () => {
                if (this.popoverNode) {
                    this.symbolNodes[this.selectedPopoverIdx].classList.remove("selected");
                    if (this.selectedPopoverIdx === idx) {
                        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.E)();
                        this.popoverNode = null;
                        this.selectedPopoverIdx = null;
                    }
                    else {
                        this.selectedPopoverIdx = idx;
                        this.handleValueSymbolClick(idx);
                    }
                }
                else {
                    this.selectedPopoverIdx = idx;
                    this.handleValueSymbolClick(idx);
                }
            }, onKeyDown: (event) => {
                if (event.key === " " || event.key === "Enter") {
                    event.preventDefault();
                    event.stopPropagation();
                    this.handleValueSymbolClick(idx);
                }
            } }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { ref: (node) => {
                if (node) {
                    this.afterCreateValueSymbol(node, idx);
                }
            } })));
    }
    renderTextNode(classBreakInfo, idx) {
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.F, null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "label", slot: "content", tabindex: "0", ref: (node) => {
                if (node) {
                    this.labelNodes.unshift(node);
                }
            }, "aria-label": strings.panels.classBreaks.accessibility.editLabelFor.replace("${value}", classBreakInfo.label), onClick: (event) => {
                let inputNode = this.inputNodes[idx];
                inputNode.classList.remove("hidden");
                inputNode.setFocus();
                event.target.classList.add("hidden");
            }, onKeyDown: (event) => {
                if (event.key === " " || event.key === "Enter") {
                    let inputNode = this.inputNodes[idx];
                    inputNode.classList.remove("hidden");
                    inputNode.setFocus();
                    event.target.classList.add("hidden");
                }
            } }, classBreakInfo.label), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-input", { slot: "content", class: "hidden", scale: "s", tabindex: "0", ref: (node) => {
                if (node) {
                    this.inputNodes.unshift(node);
                }
            }, value: classBreakInfo.label, onCalciteInputChange: (event) => {
                this.inputNodes[idx].classList.add("hidden");
                this.labelNodes[idx].classList.remove("hidden");
                this.handleValueTextChange(idx, event);
            }, onFocusout: (event) => {
                this.inputNodes[idx].classList.add("hidden");
                this.labelNodes[idx].classList.remove("hidden");
                this.handleValueTextChange(idx, event);
            }, onKeyDown: (event) => {
                if (event.key === "Escape" || event.key === "Enter") {
                    this.inputNodes[idx].classList.add("hidden");
                    const input = event.currentTarget;
                    input.value = classBreakInfo.label || "";
                    input.disabled = true;
                    this.handleValueTextChange(idx, event);
                    this.labelNodes[idx].classList.remove("hidden");
                    input.disabled = false;
                    setTimeout(() => this.labelNodes[idx].focus(), 300);
                }
            } })));
    }
    renderDoneButton() {
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { slot: "footer", label: strings.done, onClick: this.handleDone, appearance: "solid", width: "half" }, strings.done));
    }
    renderCancelButton() {
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { slot: "footer", label: strings.cancel, onClick: this.handleCancel, appearance: "outline-fill", width: "half" }, strings.cancel));
    }
    handleFieldChange(newField) {
        const { layer: smLayer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        const renderer = layer.renderer;
        (0,_loading_69139907_js__WEBPACK_IMPORTED_MODULE_2__.r)((0,_raster_class_breaks_50c446bd_js__WEBPACK_IMPORTED_MODULE_8__.b)({ field: newField }), this.flowItemNode).then((result) => this.updateRenderer(result.renderer), (error) => {
            this.fieldNode.value = renderer.field;
            this.arcgisSmartMappingPanelsRasterClassBreaksError.emit(error);
        });
    }
    handleDefinedIntervalChange() {
        const { layer: smLayer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        const renderer = layer.renderer;
        const currentInterval = renderer.classBreakInfos[0].maxValue - renderer.classBreakInfos[0].minValue;
        let newInterval = parseFloat(this.definedIntervalNode.value);
        if (newInterval === currentInterval) {
            return;
        }
        if (isNaN(newInterval) || newInterval < this.definedIntervalNode.min) {
            newInterval = this.definedIntervalNode.min;
        }
        else if (newInterval > this.definedIntervalNode.max) {
            newInterval = this.definedIntervalNode.max;
        }
        newInterval = parseFloat(newInterval.toFixed(2));
        this.definedIntervalNode.value = `${newInterval}`;
        (0,_loading_69139907_js__WEBPACK_IMPORTED_MODULE_2__.r)((0,_raster_class_breaks_50c446bd_js__WEBPACK_IMPORTED_MODULE_8__.b)({ definedInterval: newInterval }), this.flowItemNode).then((result) => this.updateRenderer(result.renderer), (error) => {
            this.definedIntervalNode.value = `${currentInterval}`;
            this.arcgisSmartMappingPanelsRasterClassBreaksError.emit(error);
        });
    }
    handleClassesChange() {
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.E)();
        const { layer: smLayer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        const renderer = layer.renderer;
        const currentNumClasses = renderer.classBreakInfos.length;
        const { authoringInfo } = renderer || {};
        authoringInfo.numClasses = this.classesNode.value
            ? Number.parseInt(this.classesNode.value, 10)
            : 0;
        if (authoringInfo.classificationMethod === "manual") {
            authoringInfo.classificationMethod = "equal-interval";
        }
        const value = Math.min(Math.max(parseInt(this.classesNode.value), 1), 10) || 5;
        if (`${value}` !== this.classesNode.value) {
            this.classesNode.value = `${value}`;
        }
        (0,_loading_69139907_js__WEBPACK_IMPORTED_MODULE_2__.r)((0,_raster_class_breaks_50c446bd_js__WEBPACK_IMPORTED_MODULE_8__.b)({ numClasses: value }), this.flowItemNode).then((result) => this.updateRenderer(result.renderer), (error) => {
            this.classesNode.value = `${currentNumClasses}`;
            this.arcgisSmartMappingPanelsRasterClassBreaksError.emit(error);
        });
    }
    afterCreateValueSymbol(node, idx) {
        var _a;
        const { layer: smLayer, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        const renderer = layer.renderer;
        let symbol = renderer.classBreakInfos[idx].symbol.clone();
        // reset default outline
        if (idx === -1) {
            if (symbol.outline) {
                symbol.outline.width = 0;
            }
        }
        // add outlines only to symbols that are almost white
        if ((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.aq)(symbol)) {
            symbol.outline = new modules.SimpleLineSymbol({
                color: "#bdc3c7",
                width: 0.75
            });
        }
        while ((_a = node === null || node === void 0 ? void 0 : node.childNodes) === null || _a === void 0 ? void 0 : _a.length) {
            node.removeChild(node.childNodes[0]);
        }
        const { symbolUtils } = modules;
        if (symbol) {
            symbolUtils
                .renderPreviewHTML(symbol, {
                size: (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ar)(symbol),
                // @ts-ignore
                ignoreWhiteSymbols: true,
                symbolConfig: {
                    isSquareFill: true
                }
            })
                .then((element) => node === null || node === void 0 ? void 0 : node.appendChild(element));
        }
    }
    handleValueSymbolClick(idx) {
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.E)();
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const popoverNode = (0,_symbolStyler_04635b2b_js__WEBPACK_IMPORTED_MODULE_7__.c)({
            referenceElement: this.flowItemNode,
            heading: strings.panels.classBreaks.colorScheme
        });
        popoverNode.addEventListener("arcgisSmartMappingStylerPopoverClose", () => {
            (0,_symbolStyler_04635b2b_js__WEBPACK_IMPORTED_MODULE_7__.r)(popoverNode);
            setTimeout(() => {
                this.symbolNodes[idx].focus();
                this.popoverNode = null;
                this.symbolNodes[idx].classList.remove("selected");
            }, 300);
        });
        popoverNode.addEventListener("arcgisSmartMappingStylerPopoverDisconnected", () => {
            (0,_symbolStyler_04635b2b_js__WEBPACK_IMPORTED_MODULE_7__.r)(popoverNode);
            setTimeout(() => {
                this.popoverNode = null;
                this.symbolNodes[idx].classList.remove("selected");
            }, 300);
        });
        _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s.classedSymbolSelectedIdx = idx;
        (0,_raster_symbolStyler_9b32ef48_js__WEBPACK_IMPORTED_MODULE_6__.b)({
            popoverNode: popoverNode,
            onChange: () => {
                (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
                (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
                (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.sliderNode);
            }
        });
        this.popoverNode = popoverNode;
        this.symbolNodes[idx].classList.add("selected");
    }
    handleValueTextChange(idx, event) {
        const { layer: smLayer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        const renderer = layer.renderer;
        const node = event.currentTarget;
        renderer.classBreakInfos[idx].label = node.value;
        /* workaround to allow "empty" labels (otherwise, the classify label
        will stay empty but the legend label will assume its default value) */
        if (node.value === "") {
            const classBreak = renderer.classBreakInfos[idx];
            classBreak.label = `${classBreak.minValue.toLocaleString()} - ${classBreak.maxValue.toLocaleString()}`;
            this.inputNodes[idx].value = this.labelNodes[idx].textContent;
        }
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
    }
    handleInversionStatus(resultRenderer) {
        const { modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const oldFirstColor = JSON.stringify(this.defaultColorRamp[0]);
        const newFirstColor = JSON.stringify(resultRenderer.classBreakInfos[0].symbol.color);
        if (oldFirstColor !== newFirstColor) {
            let colors = resultRenderer.classBreakInfos.map((classBreakInfo) => {
                return ((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.t)(classBreakInfo.symbol) ||
                    new modules.esriColor({ r: 64, g: 64, b: 64, a: 1 }));
            });
            colors = colors.reverse();
            resultRenderer.classBreakInfos.map((classBreakInfo, idx) => {
                if ((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.t)(classBreakInfo.symbol)) {
                    (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.r)(classBreakInfo.symbol, colors[idx]);
                }
            });
        }
        else {
            this.defaultColorRamp = resultRenderer.classBreakInfos.map((classBreakInfo) => classBreakInfo.symbol.color);
        }
    }
    updateRenderer(resultRenderer) {
        const { layer: smLayer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        this.handleInversionStatus(resultRenderer);
        (0,_raster_renderer_a62f152c_js__WEBPACK_IMPORTED_MODULE_5__.a)(resultRenderer, layer);
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.sliderNode);
    }
    get hostElement() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisSmartMappingPanelsRasterClassBreaks.style = arcgisSmartMappingPanelsRasterClassBreaksCss;

const arcgisSmartMappingPanelsRasterColormapCss = ":host{width:100%}.flow-item{height:100%}.colormap-block{overflow-x:hidden}.table{width:100%;overflow-wrap:anywhere}.color{display:flex;justify-content:center}.colorblock{border:1px solid #000}.hidden{display:none}.label{padding-top:5px;padding-bottom:5px}.label:focus{outline:2px solid var(--calcite-color-brand)}";

const ArcgisSmartMappingPanelsRasterColormap = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisSmartMappingPanelsRasterColormapClose = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingPanelsRasterColormapClose", 7);
        this.arcgisSmartMappingPanelsRasterColormapBackClick = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingPanelsRasterColormapBackClick", 7);
        this.inputNodes = [];
        this.labelNodes = [];
        //--------------------------------------------------------------------------
        //
        //  Private methods
        //
        //--------------------------------------------------------------------------
        this.handleDone = () => {
            // keep the current settings on the layer
            this.arcgisSmartMappingPanelsRasterColormapClose.emit("save");
        };
        this.handleCancel = () => {
            const { originalRendererObj } = this;
            const { layer: smLayer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
            const layer = smLayer;
            (0,_raster_renderer_a62f152c_js__WEBPACK_IMPORTED_MODULE_5__.a)(originalRendererObj, layer);
            this.arcgisSmartMappingPanelsRasterColormapClose.emit("cancel");
        };
        this.menuOpen = undefined;
        this.showBackButton = undefined;
        this.beforeBack = undefined;
    }
    //--------------------------------------------------------------------------
    //
    //  Public Methods
    //
    //--------------------------------------------------------------------------
    async setFocus() {
        var _a;
        (_a = this.flowItemNode) === null || _a === void 0 ? void 0 : _a.setFocus();
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    componentWillLoad() {
        const { layer: smLayer, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        const renderer = layer.renderer;
        // save original renderer
        this.originalRendererObj = modules.esriLang.clone(layer.renderer);
        renderer.colormapInfos.forEach((colormapInfo, idx) => {
            if (!colormapInfo.label) {
                // workaround for allowing empty labels. We keep values with no labels in our table for parity with Pro.
                renderer.colormapInfos[idx].label = " ";
            }
        });
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
    }
    componentDidLoad() {
        requestAnimationFrame(() => { var _a; return (_a = this.flowItemNode) === null || _a === void 0 ? void 0 : _a.setFocus(); });
    }
    //--------------------------------------------------------------------------
    //
    //  Render Methods
    //
    //--------------------------------------------------------------------------
    render() {
        const { hideLayerTitle, layer, strings, isRTL } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const title = layer.title;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.H, { class: "calcite-match-height" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-flow-item", { heading: strings.panels.colormap.styleOptions, description: !hideLayerTitle ? title : undefined, class: {
                "flow-item": true,
                [_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_9__.C.rtl]: isRTL
            }, closable: (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.aa)(this.hostElement), menuOpen: this.menuOpen, beforeBack: this.beforeBack,
            // @ts-ignore
            showBackButton: this.showBackButton, onCalciteFlowItemClose: this.handleDone, onCalciteFlowItemBack: () => this.arcgisSmartMappingPanelsRasterColormapBackClick.emit(), ref: (node) => (this.flowItemNode = node) }, this.renderVisualization(), this.renderDoneButton(), this.renderCancelButton())));
    }
    renderVisualization() {
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-block", { class: "colormap-block", heading: strings.panels.colormap.colormap, open: true }, this.renderColormapTable()));
    }
    renderColormapTable() {
        const { layer: smLayer, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        const renderer = layer.renderer;
        this.labelNodes = [];
        this.inputNodes = [];
        const colormaps = renderer.colormapInfos.map((colormapInfo, idx) => this.renderColormapRow(colormapInfo, idx));
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-table", { class: "table", caption: strings.panels.colormap.colormapTable }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-table-row", { slot: "table-header" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-table-header", { heading: strings.panels.colormap.color, alignment: "center" }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-table-header", { heading: strings.panels.colormap.value, alignment: "center" }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-table-header", { heading: strings.panels.colormap.label, alignment: "center" })), colormaps));
    }
    renderColormapRow(colormapInfo, idx) {
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-table-row", null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-table-cell", { alignment: "center" }, this.renderColorNode(colormapInfo)), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-table-cell", { alignment: "center" }, colormapInfo.value), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-table-cell", { alignment: "center" }, this.renderLabelNode(colormapInfo, idx))));
    }
    renderColorNode(colormapInfo) {
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "color", ref: (node) => {
                if (node) {
                    this.afterCreateColor(node, colormapInfo);
                }
            } }));
    }
    renderLabelNode(colormapInfo, idx) {
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.F, null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "label", tabindex: "0", ref: (node) => {
                if (node) {
                    this.labelNodes[idx] = node;
                }
            }, "aria-label": strings.panels.classBreaks.accessibility.editLabelFor.replace("${value}", colormapInfo.label), onClick: (event) => {
                let inputNode = this.inputNodes[idx];
                inputNode.classList.remove("hidden");
                inputNode.setFocus();
                event.target.classList.add("hidden");
            }, onKeyDown: (event) => {
                if (event.key === " " || event.key === "Enter") {
                    let inputNode = this.inputNodes[idx];
                    inputNode.classList.remove("hidden");
                    inputNode.setFocus();
                    event.target.classList.add("hidden");
                }
            } }, colormapInfo.label), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-input", { class: "hidden", tabindex: "0", ref: (node) => {
                if (node) {
                    this.inputNodes[idx] = node;
                }
            }, value: colormapInfo.label, onCalciteInputChange: (event) => {
                this.inputNodes[idx].classList.add("hidden");
                this.labelNodes[idx].classList.remove("hidden");
                this.handleValueTextChange(idx, event);
            }, onFocusout: (event) => {
                this.inputNodes[idx].classList.add("hidden");
                this.labelNodes[idx].classList.remove("hidden");
                this.handleValueTextChange(idx, event);
            }, onKeyDown: (event) => {
                if (event.key === "Escape" || event.key === "Enter") {
                    this.inputNodes[idx].classList.add("hidden");
                    const input = event.currentTarget;
                    input.value = colormapInfo.label || "";
                    input.disabled = true;
                    this.handleValueTextChange(idx, event);
                    this.labelNodes[idx].classList.remove("hidden");
                    input.disabled = false;
                    setTimeout(() => this.labelNodes[idx].focus(), 300);
                }
            } })));
    }
    renderDoneButton() {
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { slot: "footer", label: strings.done, onClick: this.handleDone, appearance: "solid", width: "half" }, strings.done));
    }
    renderCancelButton() {
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { slot: "footer", label: strings.cancel, onClick: this.handleCancel, appearance: "outline-fill", width: "half" }, strings.cancel));
    }
    afterCreateColor(node, colormapInfo) {
        var _a;
        const { modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        while ((_a = node === null || node === void 0 ? void 0 : node.childNodes) === null || _a === void 0 ? void 0 : _a.length) {
            node.removeChild(node.childNodes[0]);
        }
        const { symbolUtils } = modules;
        const colorblock = symbolUtils.renderColorRampPreviewHTML([colormapInfo.color.clone()], {
            gradient: false,
            width: 20,
            height: 20
        });
        colorblock.classList.add("colorblock");
        node.appendChild(colorblock);
    }
    handleValueTextChange(idx, event) {
        const { layer: smLayer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        const renderer = layer.renderer;
        const node = event.currentTarget;
        node.value === ""
            ? (this.inputNodes[idx].value = this.labelNodes[idx].textContent)
            : (renderer.colormapInfos[idx].label = node.value);
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
    }
    get hostElement() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisSmartMappingPanelsRasterColormap.style = arcgisSmartMappingPanelsRasterColormapCss;

const arcgisSmartMappingPanelsRasterFlowCss = ":host{width:100%}.flow-item{height:100%}.flow-block{overflow-x:hidden}.block-content-padding{padding-bottom:10px}.block-content-padding-large{padding-bottom:20px}.symbol-button-padding{padding-bottom:12px}.mode-hover{cursor:pointer}.toggles{padding-top:10px}.toggle-text{width:100%}.hint-text{font-size:smaller;margin-top:-8px}.hint-text.disabled{opacity:0.5}";

const ArcgisSmartMappingPanelsRasterFlow = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisSmartMappingPanelsRasterFlowClose = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingPanelsRasterFlowClose", 7);
        this.arcgisSmartMappingPanelsRasterFlowBackClick = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingPanelsRasterFlowBackClick", 7);
        this.arcgisSmartMappingPanelsRasterFlowError = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingPanelsRasterFlowError", 7);
        //--------------------------------------------------------------------------
        //
        //  Private methods
        //
        //--------------------------------------------------------------------------
        this.handleDone = () => {
            // keep the current settings on the layer
            this.arcgisSmartMappingPanelsRasterFlowClose.emit("save");
        };
        this.handleCancel = () => {
            const { originalRendererObj, originalEffect } = this;
            const { layer: smLayer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
            const layer = smLayer;
            layer.effect = originalEffect;
            (0,_raster_renderer_a62f152c_js__WEBPACK_IMPORTED_MODULE_5__.a)(originalRendererObj, layer);
            this.arcgisSmartMappingPanelsRasterFlowClose.emit("cancel");
        };
        this.menuOpen = undefined;
        this.showBackButton = undefined;
        this.beforeBack = undefined;
    }
    //--------------------------------------------------------------------------
    //
    //  Public Methods
    //
    //--------------------------------------------------------------------------
    async setFocus() {
        var _a;
        (_a = this.flowItemNode) === null || _a === void 0 ? void 0 : _a.setFocus();
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    componentWillLoad() {
        const { layer: smLayer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        // save original renderer and effect
        this.originalRendererObj = layer.renderer;
        this.originalEffect = layer.effect;
    }
    componentDidLoad() {
        requestAnimationFrame(() => { var _a; return (_a = this.flowItemNode) === null || _a === void 0 ? void 0 : _a.setFocus(); });
    }
    //--------------------------------------------------------------------------
    //
    //  Render Methods
    //
    //--------------------------------------------------------------------------
    render() {
        const { hideLayerTitle, layer, strings, isRTL } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const title = layer.title;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.H, { class: "calcite-match-height" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-flow-item", { heading: strings.panels.flow.styleOptions, description: !hideLayerTitle ? title : undefined, class: {
                "flow-item": true,
                [_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_9__.C.rtl]: isRTL
            }, closable: (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.aa)(this.hostElement), menuOpen: this.menuOpen, beforeBack: this.beforeBack,
            // @ts-ignore
            showBackButton: this.showBackButton, onCalciteFlowItemClose: this.handleDone, onCalciteFlowItemBack: () => this.arcgisSmartMappingPanelsRasterFlowBackClick.emit(), ref: (node) => (this.flowItemNode = node) }, this.renderVisualization(), this.renderDoneButton(), this.renderCancelButton())));
    }
    renderVisualization() {
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-block", { class: "flow-block", heading: strings.panels.flow.flowStyle, open: true }, this.renderMode(), this.renderSpeed(), this.renderDensity(), this.renderLength(), this.renderWidth(), this.renderColor(), this.renderColorSlider(), this.renderDirection(), this.renderRoundCaps(), this.renderShowInLegend(), this.renderEffects()));
    }
    renderMode() {
        const { layer: smLayer, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        const renderer = layer.renderer;
        const authInfo = renderer.authoringInfo;
        const isWave = (authInfo === null || authInfo === void 0 ? void 0 : authInfo.flowTheme)
            ? (authInfo === null || authInfo === void 0 ? void 0 : authInfo.flowTheme) === "wave-front"
            : renderer.trailLength < 1;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "block-content-padding-large" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-chip", { value: "flowline", appearance: isWave ? "outline-fill" : "solid", kind: isWave ? "neutral" : "brand", class: isWave ? "mode-hover" : "", scale: "s", onClick: () => this.handleModeChange("flowline") }, strings.panels.flow.flowline), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", null, "\u00A0"), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-chip", { value: "wavefront", appearance: isWave ? "solid" : "outline-fill", kind: isWave ? "brand" : "neutral", class: isWave ? "" : "mode-hover", scale: "s", onClick: () => this.handleModeChange("wavefront") }, strings.panels.flow.wavefront)));
    }
    renderSpeed() {
        const { layer: smLayer, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        const renderer = layer.renderer;
        const authInfo = renderer.authoringInfo;
        const isWave = authInfo.flowTheme === "wave-front";
        const { flowSpeed } = renderer;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, strings.panels.flow.speed, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-raster-slider", { rendererType: "flow", type: "speed", min: 0, max: isWave ? 20 : 40, values: [flowSpeed], precision: 1, minLabel: strings.panels.flow.slow, maxLabel: strings.panels.flow.fast })));
    }
    renderDensity() {
        const { layer: smLayer, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        const renderer = layer.renderer;
        const { density } = renderer;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, strings.panels.flow.density, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-raster-slider", { rendererType: "flow", type: "density", min: 0.1, max: 1, values: [density], precision: 1, minLabel: strings.panels.flow.low, maxLabel: strings.panels.flow.high })));
    }
    renderLength() {
        const { layer: smLayer, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        const renderer = layer.renderer;
        const authInfo = renderer.authoringInfo;
        const isWave = authInfo.flowTheme === "wave-front";
        const { trailLength } = renderer;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, strings.panels.flow.length, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-raster-slider", { rendererType: "flow", type: "trail-length", min: isWave ? 0.1 : 1, max: isWave ? 50 : 200, values: [trailLength / 0.75], precision: isWave ? 1 : 0, minLabel: strings.panels.flow.short, maxLabel: strings.panels.flow.long })));
    }
    renderWidth() {
        const { layer: smLayer, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        const renderer = layer.renderer;
        const authInfo = renderer.authoringInfo;
        const isWave = authInfo.flowTheme === "wave-front";
        const { trailWidth } = renderer;
        const pxWidth = Math.round((trailWidth / 0.75) * 10) / 10;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "block-content-padding-large" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, strings.panels.flow.width), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-slider-input", { min: isWave ? Math.min(5, Math.floor(pxWidth)) : 0.1, max: isWave ? Math.max(12, Math.ceil(pxWidth)) : Math.max(5, Math.ceil(pxWidth)), values: [pxWidth], precision: 1, suffixText: strings.panels.flow.px, onArcgisSmartMappingSliderInputChange: (event) => {
                const renderer = layer.renderer;
                const newTrailWidth = event.detail;
                const { trailWidth } = renderer;
                const currentTrailWidth = Math.round((trailWidth / 0.75) * 10) / 10;
                if (newTrailWidth === currentTrailWidth) {
                    return;
                }
                renderer.trailWidth = newTrailWidth * 0.75;
                (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
            } })));
    }
    renderColor() {
        const { layer: smLayer, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        const renderer = layer.renderer;
        const colorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)(renderer, "color");
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-radio-button-group", { class: "block-content-padding", name: "colorType", layout: "vertical", onCalciteRadioButtonGroupChange: (event) => this.handleColorTypeChange(event.target.selectedItem.value) }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { layout: "inline" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-radio-button", { checked: !colorVisVar, value: "singleColor", ref: (node) => (this.singleColorNode = node) }), strings.panels.flow.singleColor), !colorVisVar && this.renderSingleColor()), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { layout: "inline" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-radio-button", { checked: !!colorVisVar, value: "colorRamp", ref: (node) => (this.colorRampNode = node) }), strings.panels.flow.colorRamp), colorVisVar && this.renderColorRamp())));
    }
    renderSingleColor() {
        const { layer: smLayer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        const renderer = layer.renderer;
        const { color } = renderer;
        const symbol = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.aj)();
        symbol.color = color;
        symbol.outline.color = color;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "symbol-button-padding" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-symbol-button", { symbol: symbol, hideLabel: true, type: "raster-flow", rampType: "continuous", onArcgisSmartMappingSymbolButtonSymbolChange: () => {
                (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
                (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
            } })));
    }
    renderColorRamp() {
        const { layer: smLayer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        const renderer = layer.renderer;
        const colorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)(renderer, "color");
        if (!colorVisVar) {
            return;
        }
        const colors = colorVisVar.stops.map((stop) => {
            const color = stop.color.clone();
            color.a = 1;
            return color;
        });
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "symbol-button-padding" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-symbol-button", { colors: colors, hideLabel: true, type: "raster-flow", rampType: "continuous", ref: (node) => {
                if (node) {
                    this.symbolButtonNode = node;
                }
            }, onArcgisSmartMappingSymbolButtonSymbolChange: () => {
                (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
                (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
                this.flowColorSliderNode && (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.flowColorSliderNode);
            } })));
    }
    renderColorSlider() {
        const { layer: smLayer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        const renderer = layer.renderer;
        const colorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)(renderer, "color");
        if (!colorVisVar) {
            return null;
        }
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-flow-color-slider", { ref: (node) => {
                if (node) {
                    this.flowColorSliderNode = node;
                }
            }, onArcgisSmartMappingFlowColorSliderChange: () => {
                (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
                this.symbolButtonNode && (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.symbolButtonNode);
            }, onArcgisSmartMappingFlowColorSliderError: (event) => this.arcgisSmartMappingPanelsRasterFlowError.emit(event.detail) }));
    }
    renderDirection() {
        const { layer: smLayer, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        const renderer = layer.renderer;
        const { flowRepresentation } = renderer;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { layout: "inline-space-between", class: "block-content-padding" }, strings.panels.flow.flowDirection, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-segmented-control", { layout: "horizontal", appearance: "solid", onCalciteSegmentedControlChange: (event) => this.handleDirectionChange(event.target.selectedItem.value) }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-segmented-control-item", { value: "to", checked: flowRepresentation !== "flow-from" }, strings.panels.flow.to), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-segmented-control-item", { value: "from", checked: flowRepresentation === "flow-from" }, strings.panels.flow.from))));
    }
    renderRoundCaps() {
        const { layer: smLayer, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        const renderer = layer.renderer;
        const { trailWidth, authoringInfo } = renderer;
        const isFlowline = authoringInfo.flowTheme === "flow-line";
        const isChecked = renderer.trailCap === "round";
        // trailWidth is in pts; bypass rounding issues
        const isEnabled = Math.round(trailWidth * 1000) / 1000 > 3;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "toggles block-content-padding" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { class: "toggle-text", layout: "inline-space-between" }, strings.panels.flow.roundEndCaps, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-switch", { ref: (node) => {
                if (node) {
                    this.roundCapToggleNode = node;
                }
            }, disabled: !isEnabled, scale: "s", checked: isChecked, onCalciteSwitchChange: () => this.handleRoundCapsToggle() })), isFlowline ? ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: `hint-text ${!isEnabled ? "disabled" : ""}` }, strings.panels.flow.forWideLines)) : null));
    }
    renderShowInLegend() {
        const { layer: smLayer, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        const renderer = layer.renderer;
        const colorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)(renderer, "color");
        if (!colorVisVar) {
            return null;
        }
        const legendOptions = colorVisVar.legendOptions;
        const isChecked = !legendOptions || legendOptions.showLegend !== false;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { layout: "inline-space-between", class: "toggle-text toggles block-content-padding" }, strings.panels.flow.includeInLegend, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-switch", { scale: "s", checked: isChecked, onCalciteSwitchChange: () => this.handleIncludeInLegendToggle() })));
    }
    renderEffects() {
        const { layer: smLayer, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "toggles block-content-padding" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { class: "toggle-text", layout: "inline-space-between" }, strings.panels.flow.layerEffects, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-switch", { scale: "s", checked: !!layer.effect, onCalciteSwitchChange: () => this.handleEffectToggle() })), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "hint-text" }, strings.panels.flow.adjustEffects)));
    }
    renderDoneButton() {
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { slot: "footer", label: strings.done, onClick: this.handleDone, appearance: "solid", width: "half" }, strings.done));
    }
    renderCancelButton() {
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { slot: "footer", label: strings.cancel, onClick: this.handleCancel, appearance: "outline-fill", width: "half" }, strings.cancel));
    }
    handleModeChange(type) {
        const { layer: smLayer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        const renderer = layer.renderer;
        const authInfo = renderer.authoringInfo;
        const isWave = authInfo.flowTheme === "wave-front";
        const newFlowTheme = authInfo.flowTheme === "wave-front" ? "flow-line" : "wave-front";
        if ((!isWave && type === "wavefront") || (isWave && type === "flowline")) {
            (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.E)();
            (0,_loading_69139907_js__WEBPACK_IMPORTED_MODULE_2__.r)((0,_raster_flow_761a3470_js__WEBPACK_IMPORTED_MODULE_11__.a)({ flowTheme: newFlowTheme }), this.flowItemNode).then((result) => {
                layer.renderer = result.renderer.clone();
                this.roundCapToggleNode.checked = false;
                // TODO: determine if updateRenderer() is needed to update other components appropriately
                // updateRenderer();
                (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
            }, (error) => this.arcgisSmartMappingPanelsRasterFlowError.emit(error));
        }
    }
    handleColorTypeChange(type) {
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.E)();
        const { layer: smLayer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        const config = {
            includeColorVariable: type === "colorRamp"
        };
        if (type !== "colorRamp") {
            this.lastFlowTheme = (0,_raster_flow_761a3470_js__WEBPACK_IMPORTED_MODULE_11__.f)();
        }
        else if (this.lastFlowTheme) {
            config.flowScheme = this.lastFlowTheme;
        }
        (0,_loading_69139907_js__WEBPACK_IMPORTED_MODULE_2__.r)((0,_raster_flow_761a3470_js__WEBPACK_IMPORTED_MODULE_11__.a)(config), this.flowItemNode).then((result) => {
            layer.renderer = result.renderer.clone();
            (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
            (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
        }, (error) => {
            // handles checking the previously checked color option; order matters when setting these!
            if (this.singleColorNode.checked) {
                this.singleColorNode.checked = false;
                this.colorRampNode.checked = true;
            }
            else {
                this.colorRampNode.checked = false;
                this.singleColorNode.checked = true;
            }
            this.arcgisSmartMappingPanelsRasterFlowError.emit(error);
        });
    }
    handleDirectionChange(type) {
        const { layer: smLayer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        const renderer = layer.renderer;
        renderer.flowRepresentation = type === "from" ? "flow-from" : "flow-to";
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
    }
    handleRoundCapsToggle() {
        const { layer: smLayer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        const renderer = layer.renderer;
        renderer.trailCap = renderer.trailCap === "round" ? "butt" : "round";
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
    }
    handleIncludeInLegendToggle() {
        const { layer: smLayer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        const renderer = layer.renderer;
        const colorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)(renderer, "color");
        const legendOptions = colorVisVar.legendOptions;
        if (legendOptions && legendOptions.showLegend === false) {
            if (legendOptions.title) {
                legendOptions.showLegend = true;
            }
            else {
                colorVisVar.legendOptions = undefined;
            }
        }
        else {
            colorVisVar.legendOptions = legendOptions || {};
            colorVisVar.legendOptions.showLegend = false;
        }
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
    }
    handleEffectToggle() {
        const { layer: smLayer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        const renderer = layer.renderer;
        if (layer.effect) {
            layer.effect = undefined;
        }
        else {
            const authInfo = renderer.authoringInfo;
            (0,_raster_flow_761a3470_js__WEBPACK_IMPORTED_MODULE_11__.c)({ flowTheme: authInfo.flowTheme }).then((result) => {
                layer.effect = result.layerEffect;
                (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
            }, (error) => this.arcgisSmartMappingPanelsRasterFlowError.emit(error));
        }
    }
    get hostElement() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisSmartMappingPanelsRasterFlow.style = arcgisSmartMappingPanelsRasterFlowCss;

var colorBands;
(function (colorBands) {
    colorBands[colorBands["ALL"] = -1] = "ALL";
    colorBands[colorBands["RED"] = 0] = "RED";
    colorBands[colorBands["GREEN"] = 1] = "GREEN";
    colorBands[colorBands["BLUE"] = 2] = "BLUE";
})(colorBands || (colorBands = {}));
const defaultStatistics = {
    min: 0,
    max: 65535,
    avg: 0,
    stddev: 0
};

const arcgisSmartMappingPanelsRasterRgbCss = ":host{width:100%}.flow-item{height:100%}.rgb-block{overflow-x:hidden}.percent-clip-section{display:flex;justify-content:space-between}.percent-clip-section-input{width:48%;display:flex;flex-flow:column;justify-content:space-between}.individual-gamma-label,.range-adjustment-label{font-weight:var(--calcite-font-weight-medium)}.individual-gamma-selection{display:flex;justify-content:space-between}.individual-gamma-selection-value{display:flex;flex-flow:column;justify-content:space-between;width:30%}";

const ArcgisSmartMappingPanelsRasterRgb = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisSmartMappingPanelsRasterRgbClose = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingPanelsRasterRgbClose", 7);
        this.arcgisSmartMappingPanelsRasterRgbBackClick = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingPanelsRasterRgbBackClick", 7);
        this.arcgisSmartMappingPanelsRasterRgbError = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingPanelsRasterRgbError", 7);
        //--------------------------------------------------------------------------
        //
        //  Private methods
        //
        //--------------------------------------------------------------------------
        this.handleDone = () => {
            // keep the current settings on the layer
            this.arcgisSmartMappingPanelsRasterRgbClose.emit("save");
        };
        this.handleCancel = () => {
            const { originalRendererObj, originalEffect, originalBandCombination, originalStatistics } = this;
            const { layer: smLayer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
            const layer = smLayer;
            layer.effect = originalEffect;
            layer.bandIds = originalBandCombination;
            layer.rasterInfo.statistics = originalStatistics;
            (0,_raster_renderer_a62f152c_js__WEBPACK_IMPORTED_MODULE_5__.a)(originalRendererObj, layer);
            this.arcgisSmartMappingPanelsRasterRgbClose.emit("cancel");
        };
        this.menuOpen = undefined;
        this.showBackButton = undefined;
        this.beforeBack = undefined;
    }
    //--------------------------------------------------------------------------
    //
    //  Public Methods
    //
    //--------------------------------------------------------------------------
    async setFocus() {
        var _a;
        (_a = this.flowItemNode) === null || _a === void 0 ? void 0 : _a.setFocus();
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    async componentWillLoad() {
        var _a, _b;
        const { layer: smLayer, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        const { statistics } = layer.rasterInfo;
        if (!layer.bandIds) {
            layer.bandIds = await (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.as)(layer);
        }
        // save original renderer, effect, and band combination
        this.originalRendererObj = modules.esriLang.clone(layer.renderer);
        this.originalEffect = layer.effect;
        this.originalBandCombination = layer.bandIds;
        // save original statistics
        this.originalStatistics = (_a = modules.esriLang.clone(statistics)) !== null && _a !== void 0 ? _a : [];
        this.currentStatistics = (_b = modules.esriLang.clone(statistics)) !== null && _b !== void 0 ? _b : [];
        // handles when no renderer statistics are initialized on load
        const renderer = layer.renderer;
        if (!(0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ac)(statistics) && !(0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ac)(renderer.statistics[0])) {
            renderer.statistics = new Array(3).fill(defaultStatistics);
            this.currentStatistics = modules.esriLang.clone(renderer.statistics);
        }
        if (Array.isArray(renderer.statistics) &&
            !renderer.statistics.length &&
            !renderer.dynamicRangeAdjustment) {
            renderer.statistics = layer.bandIds.map((bandId) => this.originalStatistics[bandId]);
        }
        this.rendererStatisticsSelection = layer.bandIds[0];
        this.changeIndividualGamma = false;
        this.percentLabelFlip = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.at)(this.hostElement);
    }
    componentDidLoad() {
        const { layer: smLayer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        const renderer = layer.renderer;
        // if statistics are displayed on load, we always display statistics for the red band
        if (!renderer.dynamicRangeAdjustment) {
            this.updateStatisticsDisplay(renderer.statistics[0]);
        }
        requestAnimationFrame(() => { var _a; return (_a = this.flowItemNode) === null || _a === void 0 ? void 0 : _a.setFocus(); });
    }
    //--------------------------------------------------------------------------
    //
    //  Render Methods
    //
    //--------------------------------------------------------------------------
    render() {
        const { hideLayerTitle, layer, strings, isRTL } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const title = layer.title;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.H, { class: "calcite-match-height" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-flow-item", { heading: strings.panels.rgb.styleOptions, description: !hideLayerTitle ? title : undefined, class: {
                "flow-item": true,
                [_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_9__.C.rtl]: isRTL
            }, closable: (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.aa)(this.hostElement), menuOpen: this.menuOpen, beforeBack: this.beforeBack,
            // @ts-ignore
            showBackButton: this.showBackButton, onCalciteFlowItemClose: this.handleDone, onCalciteFlowItemBack: () => this.arcgisSmartMappingPanelsRasterRgbBackClick.emit(), ref: (node) => (this.flowItemNode = node) }, this.renderVisualization(), this.renderDoneButton(), this.renderCancelButton())));
    }
    renderVisualization() {
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-block", { class: "rgb-block", heading: strings.panels.rgb.rgb, open: true }, this.renderRgbBandSelectors(), this.renderStretchTypeSelector(), this.renderStandardDeviationSection(), this.renderPercentClipSection(), this.renderGammaBlock(), this.renderIndividualGammaToggle(), this.renderRangeAdjustmentToggle(), this.renderStatistics()));
    }
    renderRgbBandSelectors() {
        const { layer: smLayer, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        const { rasterInfo } = layer;
        const { bandInfos } = rasterInfo;
        const bandNames = bandInfos.map((bandInfo) => bandInfo.name);
        const { red, green, blue } = strings.panels.rgb;
        const colorBands = [red, green, blue];
        const bandSelectors = colorBands.map((color, colorIdx) => {
            return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, color, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-combobox", { label: color, clearDisabled: true, selectionMode: "single-persist", onCalciteComboboxChange: (event) => {
                    const node = event.target;
                    const renderer = layer.renderer;
                    // update layer.bandIds with new band's index
                    layer.bandIds[colorIdx] = bandNames.indexOf(node.value);
                    const newBandNameId = layer.bandIds[colorIdx];
                    // for the current renderer statistics, replace the appropriate band with the new band's values
                    renderer.statistics[colorIdx] = this.currentStatistics[newBandNameId];
                    // update the statistics table only if the checked segmented control item matches the band color whose statistics were actually switched
                    if (this.statisticsControlNode && color === this.statisticsControlNode.value) {
                        this.rendererStatisticsSelection = newBandNameId;
                        this.updateStatisticsDisplay(renderer.statistics[colorIdx]);
                    }
                    (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
                } }, bandNames.map((bandName, idx) => this.renderBandOptions(bandName, idx, colorIdx)))));
        });
        return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.F, null, bandSelectors);
    }
    renderBandOptions(bandName, idx, colorIdx) {
        const { layer: smLayer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        const bandNameIdx = layer.bandIds[colorIdx];
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-combobox-item", { textLabel: bandName, value: bandName, selected: bandNameIdx === idx }));
    }
    renderStretchTypeSelector() {
        const { layer: smLayer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-stretch-type-button", { onArcgisSmartMappingStretchTypeButtonBeforeOpen: () => (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.E)(), onArcgisSmartMappingStretchTypeButtonChange: (event) => {
                const node = event.target;
                (0,_loading_69139907_js__WEBPACK_IMPORTED_MODULE_2__.r)((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.au)({ stretchType: event.detail }), this.flowItemNode).then((result) => {
                    if (event.detail === "none") {
                        result.renderer.dynamicRangeAdjustment = false;
                    }
                    this.rendererStatisticsSelection = layer.bandIds[0];
                    (0,_raster_renderer_a62f152c_js__WEBPACK_IMPORTED_MODULE_5__.a)(result.renderer, layer);
                    (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
                    (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
                    (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(node);
                }, (error) => this.arcgisSmartMappingPanelsRasterRgbError.emit(error));
            } }));
    }
    renderStandardDeviationSection() {
        const { layer: smLayer, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        const renderer = layer.renderer;
        const { stretchType = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.aw.STRETCH_TYPE } = renderer || {};
        const isStretchTypeStandardDeviation = stretchType === _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.av.STANDARD_DEVIATION;
        if (!isStretchTypeStandardDeviation) {
            return null;
        }
        let { numberOfStandardDeviations } = renderer || {};
        if (!(0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ac)(numberOfStandardDeviations) || numberOfStandardDeviations === 0) {
            numberOfStandardDeviations = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.aw.STD_DEV;
        }
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, strings.panels.rgb.stddev, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-input-number", { label: strings.panels.rgb.stddev, scale: "s", tabindex: "0", min: 1, max: 100, step: 0.1, value: `${numberOfStandardDeviations}`, onCalciteInputNumberInput: (event) => {
                const node = event.target;
                const newStddev = parseFloat(node.value);
                if (node.value && newStddev >= node.min && newStddev <= node.max) {
                    this.handlePercentOrStddevChange(node, "stddev");
                }
                else {
                    setTimeout(() => this.handlePercentOrStddevChange(node, "stddev"), 3000);
                }
            } })));
    }
    renderPercentClipSection() {
        const { layer: smLayer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        const renderer = layer.renderer;
        const { stretchType = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.aw.STRETCH_TYPE } = renderer || {};
        const isStretchTypePercentClip = stretchType === _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.av.PERCENT_CLIP;
        if (!isStretchTypePercentClip) {
            return null;
        }
        let { minPercent, maxPercent } = renderer || {};
        if (!(0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ac)(minPercent) || minPercent <= 0 || minPercent >= 100) {
            minPercent = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.aw.MIN_PERCENT;
        }
        if (!(0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ac)(maxPercent) || maxPercent <= 0 || maxPercent >= 100) {
            maxPercent = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.aw.MAX_PERCENT;
        }
        minPercent = parseFloat(minPercent.toFixed(1));
        maxPercent = parseFloat(maxPercent.toFixed(1));
        renderer.minPercent = minPercent;
        renderer.maxPercent = maxPercent;
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "percent-clip-section" }, this.renderPercentClipSectionInput("min", minPercent), this.renderPercentClipSectionInput("max", maxPercent)));
    }
    renderPercentClipSectionInput(selection, value) {
        const { percentLabelFlip } = this;
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "percent-clip-section-input" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, strings.panels.rgb[selection], (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-input-number", { label: strings.panels.rgb[selection], scale: "s", min: 0.1, max: 99.9, step: 0.1, prefixText: percentLabelFlip ? "%" : undefined, suffixText: !percentLabelFlip ? "%" : undefined, value: `${value}`, onCalciteInputNumberInput: (event) => {
                const node = event.target;
                const newPercent = parseFloat(node.value);
                if (node.value && newPercent >= node.min && newPercent <= node.max) {
                    this.handlePercentOrStddevChange(node, selection);
                }
                else {
                    setTimeout(() => this.handlePercentOrStddevChange(node, selection), 3000);
                }
            } }))));
    }
    renderIndividualGammaToggle() {
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { layout: "inline-space-between", class: "individual-gamma-label" }, strings.panels.rgb.individualGamma, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-switch", { scale: "s", checked: this.changeIndividualGamma, onCalciteSwitchChange: () => {
                this.changeIndividualGamma = !this.changeIndividualGamma;
                (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
            } })));
    }
    renderGammaBlock() {
        const { layer: smLayer, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        const renderer = layer.renderer;
        const { gamma = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.aw.GAMMA } = renderer || {};
        const rendererGamma = Array.isArray(renderer.gamma) ? renderer.gamma[0] : renderer.gamma;
        const redGamma = gamma[colorBands.RED] || rendererGamma;
        const greenGamma = gamma[colorBands.GREEN] || rendererGamma;
        const blueGamma = gamma[colorBands.BLUE] || rendererGamma;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, strings.panels.rgb.gamma, this.changeIndividualGamma ? ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "individual-gamma-selection" }, this.renderIndividualGamma(redGamma, "red"), this.renderIndividualGamma(greenGamma, "green"), this.renderIndividualGamma(blueGamma, "blue"))) : ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-gamma-slider", { gamma: Array.isArray(gamma) ? gamma[0] : gamma, rendererType: "raster-rgb" }))));
    }
    renderIndividualGamma(individualGammaValue, selection) {
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "individual-gamma-selection-value" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, strings.panels.rgb[selection], (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-input-number", { label: strings.panels.rgb[selection], numberButtonType: "none", tabindex: "0", scale: "s", value: `${individualGammaValue}`, min: 0.1, max: 10, step: 0.1, onCalciteInputNumberInput: (event) => {
                const node = event.target;
                const newGamma = parseFloat(node.value);
                if (node.value && newGamma >= node.min && newGamma <= node.max) {
                    this.handleIndividualGammaChange(node, selection);
                }
                else {
                    setTimeout(() => this.handleIndividualGammaChange(node, selection), 3000);
                }
            } }))));
    }
    renderRangeAdjustmentToggle() {
        const { layer: smLayer, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        const renderer = layer.renderer;
        const { dynamicRangeAdjustment } = renderer;
        const { stretchType = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.aw.STRETCH_TYPE } = renderer || {};
        const isStretchTypeNone = stretchType === _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.av.NONE;
        if (isStretchTypeNone) {
            return null;
        }
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { layout: "inline-space-between", class: "range-adjustment-label" }, strings.panels.rgb.dynamicRangeAdjustment, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-switch", { scale: "s", checked: dynamicRangeAdjustment, onCalciteSwitchChange: (event) => {
                const node = event.target;
                const isToggled = node.checked;
                this.handleDRAToggle(isToggled);
                (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
            } })));
    }
    renderStatistics() {
        const { layer: smLayer, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        const renderer = layer.renderer;
        const { stretchType = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.aw.STRETCH_TYPE } = renderer || {};
        const isStretchTypePercentClip = stretchType === _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.av.PERCENT_CLIP;
        const isStretchTypeNone = stretchType === _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.av.NONE;
        const { dynamicRangeAdjustment } = renderer;
        const showStatsTable = !dynamicRangeAdjustment && !(isStretchTypeNone || isStretchTypePercentClip);
        if (!showStatsTable) {
            return null;
        }
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.F, null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, strings.panels.rgb.statistics, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-segmented-control", { scale: "s", width: "full", onCalciteSegmentedControlChange: (event) => {
                const renderer = layer.renderer;
                const node = event.target;
                const value = node.value;
                const currentBandId = value === strings.panels.rgb.red
                    ? layer.bandIds[0]
                    : value === strings.panels.rgb.green
                        ? layer.bandIds[1]
                        : layer.bandIds[2];
                const statisticsToDisplay = value === strings.panels.rgb.red
                    ? renderer.statistics[0]
                    : value === strings.panels.rgb.green
                        ? renderer.statistics[1]
                        : renderer.statistics[2];
                this.rendererStatisticsSelection = currentBandId;
                this.updateStatisticsDisplay(statisticsToDisplay);
            }, ref: (node) => (this.statisticsControlNode = node) }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-segmented-control-item", { value: strings.panels.rgb.red, checked: this.rendererStatisticsSelection === layer.bandIds[0] }, strings.panels.rgb.red), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-segmented-control-item", { value: strings.panels.rgb.green, checked: this.rendererStatisticsSelection === layer.bandIds[1] &&
                this.rendererStatisticsSelection !== layer.bandIds[0] }, strings.panels.rgb.green), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-segmented-control-item", { value: strings.panels.rgb.blue, checked: this.rendererStatisticsSelection === layer.bandIds[2] &&
                this.rendererStatisticsSelection !== layer.bandIds[0] &&
                this.rendererStatisticsSelection !== layer.bandIds[1] }, strings.panels.rgb.blue))), this.renderStatisticsDisplay()));
    }
    renderStatisticsDisplay() {
        var _a, _b;
        const { originalStatistics } = this;
        const { layer: smLayer, modules, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        const renderer = layer.renderer;
        const { stretchType = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.aw.STRETCH_TYPE } = renderer || {};
        const isStretchTypePercentClip = stretchType === _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.av.PERCENT_CLIP;
        const isStretchTypeStandardDeviation = stretchType === _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.av.STANDARD_DEVIATION;
        const hasStatistics = layer.rasterInfo.statistics !== null;
        let { statistics } = renderer || {};
        if (!statistics || (Array.isArray(statistics) && statistics.length < 1)) {
            statistics = modules.esriLang.clone(originalStatistics);
        }
        const initialBandSelection = (_a = this.rendererStatisticsSelection) !== null && _a !== void 0 ? _a : 0;
        const disableMeanAndStdDev = (!hasStatistics || isStretchTypePercentClip) && !isStretchTypeStandardDeviation;
        const { min = 0, max = 255, avg: mean = 0, stddev = 0 } = ((_b = this.currentStatistics) === null || _b === void 0 ? void 0 : _b[initialBandSelection !== null && initialBandSelection !== void 0 ? initialBandSelection : 0]) || {};
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.F, null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, strings.panels.rgb.min, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-input-number", { label: strings.panels.rgb.min, scale: "s", step: 0.1, numberButtonType: "none", value: `${(0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ac)(min) ? this.round(min) : ""}`, onCalciteInputNumberInput: (0,_functional_44de8fcf_js__WEBPACK_IMPORTED_MODULE_10__.d)(() => {
                var _a;
                const value = parseFloat(this.minNode.value);
                const currentBandSelection = (_a = this.rendererStatisticsSelection) !== null && _a !== void 0 ? _a : 0;
                if (!isNaN(value) && value <= this.currentStatistics[currentBandSelection]["max"]) {
                    this.minNode.value = `${value}`;
                    this.handleStatisticsChange(value, currentBandSelection, "min");
                }
                else {
                    setTimeout(() => {
                        const currentMin = this.currentStatistics[currentBandSelection]["min"];
                        this.minNode.value = `${this.round(currentMin)}`;
                    }, 3000);
                }
            }, 300), ref: (node) => (this.minNode = node) })), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, strings.panels.rgb.max, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-input-number", { label: strings.panels.rgb.max, scale: "s", step: 0.1, numberButtonType: "none", value: `${(0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ac)(max) ? this.round(max) : ""}`, onCalciteInputNumberInput: (0,_functional_44de8fcf_js__WEBPACK_IMPORTED_MODULE_10__.d)(() => {
                var _a;
                const value = parseFloat(this.maxNode.value);
                const currentBandSelection = (_a = this.rendererStatisticsSelection) !== null && _a !== void 0 ? _a : 0;
                if (!isNaN(value) && value >= this.currentStatistics[currentBandSelection]["min"]) {
                    this.maxNode.value = `${value}`;
                    this.handleStatisticsChange(value, currentBandSelection, "max");
                }
                else {
                    setTimeout(() => {
                        const currentMax = this.currentStatistics[currentBandSelection]["max"];
                        this.maxNode.value = `${this.round(currentMax)}`;
                    }, 3000);
                }
            }, 300), ref: (node) => (this.maxNode = node) })), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, strings.panels.rgb.mean, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-input-number", { label: strings.panels.rgb.mean, scale: "s", step: 0.1, disabled: disableMeanAndStdDev, numberButtonType: "none", value: `${(0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ac)(mean) ? this.round(mean) : ""}`, onCalciteInputNumberInput: (0,_functional_44de8fcf_js__WEBPACK_IMPORTED_MODULE_10__.d)(() => {
                var _a;
                const value = parseFloat(this.avgNode.value);
                const currentBandSelection = (_a = this.rendererStatisticsSelection) !== null && _a !== void 0 ? _a : 0;
                if (!isNaN(value)) {
                    this.avgNode.value = `${value}`;
                    this.handleStatisticsChange(value, currentBandSelection, "avg");
                }
                else {
                    setTimeout(() => {
                        const currentMean = this.currentStatistics[currentBandSelection]["avg"];
                        this.avgNode.value = `${this.round(currentMean)}`;
                    }, 3000);
                }
            }, 300), ref: (node) => (this.avgNode = node) })), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, strings.panels.rgb.stddev, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-input-number", { label: strings.panels.rgb.stddev, scale: "s", step: 0.1, disabled: disableMeanAndStdDev, numberButtonType: "none", value: `${(0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ac)(stddev) ? this.round(stddev) : ""}`, onCalciteInputNumberInput: (0,_functional_44de8fcf_js__WEBPACK_IMPORTED_MODULE_10__.d)(() => {
                var _a;
                const value = parseFloat(this.stddevNode.value);
                const currentBandSelection = (_a = this.rendererStatisticsSelection) !== null && _a !== void 0 ? _a : 0;
                if (!isNaN(value)) {
                    this.stddevNode.value = `${value}`;
                    this.handleStatisticsChange(value, currentBandSelection, "stddev");
                }
                else {
                    setTimeout(() => {
                        const currentStddev = this.currentStatistics[currentBandSelection]["stddev"];
                        this.stddevNode.value = `${this.round(currentStddev)}`;
                    }, 3000);
                }
            }, 300), ref: (node) => (this.stddevNode = node) }))));
    }
    renderDoneButton() {
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { slot: "footer", label: strings.done, onClick: this.handleDone, appearance: "solid", width: "half" }, strings.done));
    }
    renderCancelButton() {
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { slot: "footer", label: strings.cancel, onClick: this.handleCancel, appearance: "outline-fill", width: "half" }, strings.cancel));
    }
    handlePercentOrStddevChange(node, changing) {
        const { layer: smLayer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        const renderer = layer.renderer;
        let value = parseFloat(node.value);
        if (isNaN(value) || value < node.min) {
            value = node.min;
        }
        else if (value > node.max) {
            value = node.max;
        }
        value = parseFloat(value.toFixed(1));
        node.value = `${value}`;
        changing === "min"
            ? (renderer.minPercent = value)
            : changing === "max"
                ? (renderer.maxPercent = value)
                : (renderer.numberOfStandardDeviations = value);
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
    }
    handleIndividualGammaChange(node, changing) {
        const { layer: smLayer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        const renderer = layer.renderer;
        let value = parseFloat(node.value);
        if (isNaN(value) || value < node.min) {
            value = node.min;
        }
        else if (value > node.max) {
            value = node.max;
        }
        value = parseFloat(value.toFixed(1));
        node.value = `${value}`;
        changing === "red"
            ? (renderer.gamma[colorBands.RED] = value)
            : changing === "green"
                ? (renderer.gamma[colorBands.GREEN] = value)
                : (renderer.gamma[colorBands.BLUE] = value);
        renderer.useGamma = true;
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
    }
    handleDRAToggle(applyDRA) {
        const { layer: smLayer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        const renderer = layer.renderer;
        renderer.dynamicRangeAdjustment = applyDRA;
        if (applyDRA) {
            renderer.statistics = [];
        }
        else {
            const updatedRendererStatistics = layer.bandIds.map((bandId) => this.currentStatistics[bandId]);
            renderer.statistics = updatedRendererStatistics;
        }
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
    }
    handleStatisticsChange(value, statisticIDToUpdate, type) {
        const { layer: smLayer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        const renderer = layer.renderer;
        this.currentStatistics[statisticIDToUpdate][type] = value;
        const rendererBandsToUpdate = [];
        layer.bandIds.forEach((bandId, idx) => {
            if (bandId === statisticIDToUpdate) {
                rendererBandsToUpdate.push(idx);
            }
        });
        rendererBandsToUpdate.forEach((rendererBandToUdpate) => (renderer.statistics[rendererBandToUdpate] = this.currentStatistics[statisticIDToUpdate]));
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
    }
    updateStatisticsDisplay(selection) {
        const { min, max, avg, stddev } = selection;
        this.minNode.value = `${(0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ac)(min) ? this.round(min) : ""}`;
        this.maxNode.value = `${(0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ac)(max) ? this.round(max) : ""}`;
        this.avgNode.value = `${(0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ac)(avg) ? this.round(avg) : ""}`;
        this.stddevNode.value = `${(0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ac)(stddev) ? this.round(stddev) : ""}`;
    }
    round(value) {
        return Math.round(value * 1000) / 1000;
    }
    get hostElement() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisSmartMappingPanelsRasterRgb.style = arcgisSmartMappingPanelsRasterRgbCss;

const hillshadeTypeOptions = {
    TRADITIONAL: "traditional",
    MULTIDIRECTIONAL: "multi-directional"
};
const defaultHillshadeType = "multi-directional";
const defaultScalingType = "none";
const shadedReliefDefaults = {
    azimuth: 315,
    altitude: 45,
    pixelSizePower: 0.664,
    pixelSizeFactor: 0.024,
    zFactor: 1
};

const arcgisSmartMappingPanelsRasterShadedReliefCss = ":host{width:100%}.flow-item{height:100%}.shaded-relief-block{overflow-x:hidden}";

const ArcgisSmartMappingPanelsRasterShadedRelief = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisSmartMappingPanelsRasterShadedReliefClose = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingPanelsRasterShadedReliefClose", 7);
        this.arcgisSmartMappingPanelsRasterShadedReliefBackClick = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingPanelsRasterShadedReliefBackClick", 7);
        this.arcgisSmartMappingPanelsRasterShadedReliefError = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingPanelsRasterShadedReliefError", 7);
        this.handles = [];
        //--------------------------------------------------------------------------
        //
        //  Private methods
        //
        //--------------------------------------------------------------------------
        this.handleDone = () => {
            // keep the current settings on the layer
            this.arcgisSmartMappingPanelsRasterShadedReliefClose.emit("save");
        };
        this.handleCancel = () => {
            const { originalRendererObj } = this;
            const { layer: smLayer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
            const layer = smLayer;
            (0,_raster_renderer_a62f152c_js__WEBPACK_IMPORTED_MODULE_5__.a)(originalRendererObj, layer);
            this.arcgisSmartMappingPanelsRasterShadedReliefClose.emit("cancel");
        };
        this.menuOpen = undefined;
        this.showBackButton = undefined;
        this.beforeBack = undefined;
    }
    //--------------------------------------------------------------------------
    //
    //  Public Methods
    //
    //--------------------------------------------------------------------------
    async setFocus() {
        var _a;
        (_a = this.flowItemNode) === null || _a === void 0 ? void 0 : _a.setFocus();
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    componentWillLoad() {
        const { layer: smLayer, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        // save original renderer
        this.originalRendererObj = modules.esriLang.clone(layer.renderer);
    }
    componentDidLoad() {
        requestAnimationFrame(() => { var _a; return (_a = this.flowItemNode) === null || _a === void 0 ? void 0 : _a.setFocus(); });
    }
    //--------------------------------------------------------------------------
    //
    //  Render Methods
    //
    //--------------------------------------------------------------------------
    render() {
        const { hideLayerTitle, layer, strings, isRTL } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const title = layer.title;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.H, { class: "calcite-match-height" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-flow-item", { heading: strings.panels.shadedRelief.styleOptions, description: !hideLayerTitle ? title : undefined, class: {
                "flow-item": true,
                [_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_9__.C.rtl]: isRTL
            }, closable: (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.aa)(this.hostElement), menuOpen: this.menuOpen, beforeBack: this.beforeBack,
            // @ts-ignore
            showBackButton: this.showBackButton, onCalciteFlowItemClose: this.handleDone, onCalciteFlowItemBack: () => this.arcgisSmartMappingPanelsRasterShadedReliefBackClick.emit(), ref: (node) => (this.flowItemNode = node) }, this.renderVisualization(), this.renderDoneButton(), this.renderCancelButton())));
    }
    renderVisualization() {
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-block", { class: "shaded-relief-block", heading: strings.panels.shadedRelief.shadedRelief, open: true }, this.renderHillshadeTypeSelector(), this.renderColorScheme(), this.renderAzimuthSlider(), this.renderAltitudeSlider(), this.renderScalingSelector(), this.renderZFactorAndPixelInputs()));
    }
    renderHillshadeTypeSelector() {
        const { layer: smLayer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-hillshade-type-button", { onArcgisSmartMappingHillshadeTypeButtonBeforeOpen: () => (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.E)(), onArcgisSmartMappingHillshadeTypeButtonChange: (event) => {
                const node = event.target;
                const hillshadeType = event.detail;
                const renderer = layer.renderer;
                renderer.hillshadeType = hillshadeType;
                (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
                (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
                (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(node);
            } }));
    }
    renderColorScheme() {
        const { layer: smLayer, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        const renderer = layer.renderer;
        const { colorRamp } = renderer || {};
        // normalize colorRamp (currently in Multipart form)
        const colorScheme = (0,_raster_renderer_a62f152c_js__WEBPACK_IMPORTED_MODULE_5__.n)(colorRamp);
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-symbol-button", { label: strings.panels.shadedRelief.colorScheme, type: "raster-shaded-relief", rampType: "continuous", colors: colorScheme, onArcgisSmartMappingSymbolButtonSymbolChange: () => {
                (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
                (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
            } }));
    }
    renderAzimuthSlider() {
        const { layer: smLayer, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        const renderer = layer.renderer;
        const { hillshadeType = defaultHillshadeType, azimuth = shadedReliefDefaults.azimuth } = renderer || {};
        const showAzimuth = hillshadeType === hillshadeTypeOptions.TRADITIONAL;
        if (!showAzimuth) {
            return null;
        }
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, strings.panels.shadedRelief.azimuth, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-raster-slider", { rendererType: "shaded-relief", showThumbLabel: true, editThumbLabel: true, type: "azimuth", min: 0, max: 360, values: [azimuth], precision: 1, minLabel: "0", maxLabel: "360" })));
    }
    renderAltitudeSlider() {
        const { layer: smLayer, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        const renderer = layer.renderer;
        const { hillshadeType = defaultHillshadeType, altitude = shadedReliefDefaults.altitude } = renderer || {};
        const showAltitude = hillshadeType === hillshadeTypeOptions.TRADITIONAL;
        if (!showAltitude) {
            return null;
        }
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, strings.panels.shadedRelief.altitude, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-raster-slider", { rendererType: "shaded-relief", showThumbLabel: true, editThumbLabel: true, type: "altitude", min: 0, max: 90, values: [altitude], precision: 1, minLabel: "0", maxLabel: "90" })));
    }
    renderScalingSelector() {
        const { layer: smLayer, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        const renderer = layer.renderer;
        const { scalingType = defaultScalingType } = renderer || {};
        const scalingOptions = strings.panels.shadedRelief.scalingOptions;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, strings.panels.shadedRelief.scaling, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-segmented-control", { scale: "s", width: "full", onCalciteSegmentedControlChange: (event) => {
                const node = event.target;
                this.handleScalingOptionChange(node.value);
            } }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-segmented-control-item", { value: "none", checked: scalingType === "none" }, scalingOptions.none), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-segmented-control-item", { value: "adjusted", checked: scalingType === "adjusted" }, scalingOptions.adjusted))));
    }
    renderZFactorAndPixelInputs() {
        const { layer: smLayer, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        const renderer = layer.renderer;
        const { scalingType = defaultScalingType } = renderer || {};
        const showPixelSizePowerInput = scalingType === "adjusted";
        const zFactorPixelEntries = ["zFactor"];
        if (showPixelSizePowerInput) {
            zFactorPixelEntries.push("pixelSizePower");
            zFactorPixelEntries.push("pixelSizeFactor");
        }
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.F, null, zFactorPixelEntries.map((zFactorPixelEntry, idx) => {
            var _a;
            return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, strings.panels.shadedRelief[zFactorPixelEntry], (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-input-number", { label: strings.panels.shadedRelief[zFactorPixelEntry], tabindex: "0", min: 0, step: 0.1, scale: "s", value: `${(_a = renderer[zFactorPixelEntry]) !== null && _a !== void 0 ? _a : shadedReliefDefaults[zFactorPixelEntry]}`, onCalciteInputNumberInput: (event) => {
                    const node = event.target;
                    if (node.value === "" || parseFloat(node.value) < 0) {
                        this.handles[idx] = setTimeout(() => this.handleZFactorOrPixelChange(node, zFactorPixelEntry), 3000);
                    }
                    else {
                        clearTimeout(this.handles[idx]);
                        setTimeout(() => this.handleZFactorOrPixelChange(node, zFactorPixelEntry), 300);
                    }
                } })));
        })));
    }
    renderDoneButton() {
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { slot: "footer", label: strings.done, onClick: this.handleDone, appearance: "solid", width: "half" }, strings.done));
    }
    renderCancelButton() {
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { slot: "footer", label: strings.cancel, onClick: this.handleCancel, appearance: "outline-fill", width: "half" }, strings.cancel));
    }
    handleScalingOptionChange(newScalingType) {
        const { layer: smLayer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        const renderer = layer.renderer;
        renderer.scalingType = newScalingType;
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
    }
    handleZFactorOrPixelChange(node, property) {
        const { layer: smLayer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        const renderer = layer.renderer;
        let value = parseFloat(node.value);
        if (isNaN(value) || value < node.min) {
            value = node.min;
        }
        node.value = `${value}`;
        renderer[property] = value;
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
    }
    get hostElement() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisSmartMappingPanelsRasterShadedRelief.style = arcgisSmartMappingPanelsRasterShadedReliefCss;

const arcgisSmartMappingPanelsRasterStretchCss = ":host{width:100%}.flow-item{height:100%}.stretch-block{overflow-x:hidden}.percent-clip-section{display:flex;justify-content:space-between}.percent-clip-section-input{width:48%;display:flex;flex-flow:column;justify-content:space-between}.range-adjustment-label{font-weight:var(--calcite-font-weight-medium)}";

const ArcgisSmartMappingPanelsRasterStretch = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisSmartMappingPanelsRasterStretchClose = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingPanelsRasterStretchClose", 7);
        this.arcgisSmartMappingPanelsRasterStretchBackClick = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingPanelsRasterStretchBackClick", 7);
        this.arcgisSmartMappingPanelsRasterStretchError = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingPanelsRasterStretchError", 7);
        //--------------------------------------------------------------------------
        //
        //  Private methods
        //
        //--------------------------------------------------------------------------
        this.handleDone = () => {
            // keep the current settings on the layer
            this.arcgisSmartMappingPanelsRasterStretchClose.emit("save");
        };
        this.handleCancel = () => {
            const { originalRendererObj, originalEffect, originalBandCombination, originalStatistics } = this;
            const { layer: smLayer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
            const layer = smLayer;
            layer.effect = originalEffect;
            layer.bandIds = originalBandCombination;
            layer.rasterInfo.statistics = originalStatistics;
            (0,_raster_renderer_a62f152c_js__WEBPACK_IMPORTED_MODULE_5__.a)(originalRendererObj, layer);
            this.arcgisSmartMappingPanelsRasterStretchClose.emit("cancel");
        };
        this.menuOpen = undefined;
        this.showBackButton = undefined;
        this.beforeBack = undefined;
    }
    //--------------------------------------------------------------------------
    //
    //  Public Methods
    //
    //--------------------------------------------------------------------------
    async setFocus() {
        var _a;
        (_a = this.flowItemNode) === null || _a === void 0 ? void 0 : _a.setFocus();
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    componentWillLoad() {
        var _a, _b, _c, _d;
        const { layer: smLayer, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        const renderer = layer.renderer;
        const { statistics } = layer.rasterInfo;
        // save original renderer
        this.originalRendererObj = modules.esriLang.clone(layer.renderer);
        this.originalEffect = layer.effect;
        this.originalBandCombination = layer.bandIds;
        // save original statistics
        this.originalStatistics = (_a = modules.esriLang.clone(statistics)) !== null && _a !== void 0 ? _a : [];
        this.currentStatistics = (_b = modules.esriLang.clone(statistics)) !== null && _b !== void 0 ? _b : [];
        if (((_c = layer.bandIds) === null || _c === void 0 ? void 0 : _c.length) !== 1) {
            layer.bandIds = [0];
        }
        // populate renderer statistics if necessary
        if (this.isAnEmptyArray(renderer.statistics)) {
            renderer.statistics = [this.originalStatistics[0]];
        }
        // handles when no renderer statistics are initialized on load
        const bandIndex = (_d = layer.bandIds[0]) !== null && _d !== void 0 ? _d : _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ax.BAND_INDEX;
        if (!(0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ac)(statistics) && !(0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ac)(renderer.statistics[0])) {
            renderer.statistics[0] = {
                min: 0,
                max: 255,
                avg: 0,
                stddev: 0
            };
            this.currentStatistics[bandIndex] = renderer.statistics[0];
        }
        const rendererStats = renderer.statistics;
        if (this.isAnEmptyArray(rendererStats) && !renderer.dynamicRangeAdjustment) {
            this.currentStatistics[bandIndex] = {
                min: 0,
                max: 255,
                avg: 0,
                stddev: 0
            };
            renderer.statistics = [this.currentStatistics[bandIndex]];
        }
        else {
            this.currentStatistics[bandIndex] = renderer.statistics[0];
        }
    }
    componentDidLoad() {
        requestAnimationFrame(() => { var _a; return (_a = this.flowItemNode) === null || _a === void 0 ? void 0 : _a.setFocus(); });
    }
    //--------------------------------------------------------------------------
    //
    //  Render Methods
    //
    //--------------------------------------------------------------------------
    render() {
        const { hideLayerTitle, layer, strings, isRTL } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const title = layer.title;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.H, { class: "calcite-match-height" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-flow-item", { heading: strings.panels.stretch.styleOptions, description: !hideLayerTitle ? title : undefined, class: {
                "flow-item": true,
                [_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_9__.C.rtl]: isRTL
            }, closable: (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.aa)(this.hostElement), menuOpen: this.menuOpen, beforeBack: this.beforeBack,
            // @ts-ignore
            showBackButton: this.showBackButton, onCalciteFlowItemClose: this.handleDone, onCalciteFlowItemBack: () => this.arcgisSmartMappingPanelsRasterStretchBackClick.emit(), ref: (node) => (this.flowItemNode = node) }, this.renderVisualization(), this.renderDoneButton(), this.renderCancelButton())));
    }
    renderVisualization() {
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-block", { class: "stretch-block", heading: strings.panels.stretch.stretch, open: true }, this.renderStretchTypeSelector(), this.renderStandardDeviationSection(), this.renderPercentClipSection(), this.renderBandSelector(), this.renderGammaSlider(), this.renderColorScheme(), this.renderRangeAdjustmentToggle(), this.renderStatisticsTable()));
    }
    renderStretchTypeSelector() {
        const { layer: smLayer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-stretch-type-button", { onArcgisSmartMappingStretchTypeButtonBeforeOpen: () => (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.E)(), onArcgisSmartMappingStretchTypeButtonChange: (event) => {
                const node = event.target;
                const stretchType = event.detail;
                (0,_loading_69139907_js__WEBPACK_IMPORTED_MODULE_2__.r)((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ay)({ stretchType }), this.flowItemNode).then((result) => {
                    var _a;
                    const bandIndex = (_a = layer.bandIds[0]) !== null && _a !== void 0 ? _a : _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ax.BAND_INDEX;
                    if ((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ac)(this.currentStatistics)) {
                        result.renderer.statistics = [this.currentStatistics[bandIndex]];
                    }
                    if (stretchType === "none") {
                        result.renderer.dynamicRangeAdjustment = false;
                        result.renderer.colorRamp = null;
                    }
                    (0,_raster_renderer_a62f152c_js__WEBPACK_IMPORTED_MODULE_5__.a)(result.renderer, layer);
                    (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
                    (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
                    (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(node);
                }, (error) => {
                    (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(node);
                    this.arcgisSmartMappingPanelsRasterStretchError.emit(error);
                });
            } }));
    }
    renderStandardDeviationSection() {
        const { layer: smLayer, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        const renderer = layer.renderer;
        const { stretchType = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ax.STRETCH_TYPE } = renderer || {};
        const isStretchTypeStandardDeviation = stretchType === _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.az.STANDARD_DEVIATION;
        if (!isStretchTypeStandardDeviation) {
            return null;
        }
        let { numberOfStandardDeviations } = renderer || {};
        if (!(0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ac)(numberOfStandardDeviations) || numberOfStandardDeviations === 0) {
            numberOfStandardDeviations = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ax.STD_DEV;
        }
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, strings.panels.stretch.stddev, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-input-number", { label: strings.panels.stretch.stddev, scale: "s", tabindex: "0", min: 1, max: 100, step: 0.1, value: `${numberOfStandardDeviations}`, onCalciteInputNumberInput: (event) => {
                const node = event.target;
                const newStddev = parseFloat(node.value);
                if (node.value && newStddev >= node.min && newStddev <= node.max) {
                    this.handlePercentOrStddevChange(node, "stddev");
                }
                else {
                    setTimeout(() => this.handlePercentOrStddevChange(node, "stddev"), 3000);
                }
            } })));
    }
    renderPercentClipSection() {
        const { layer: smLayer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        const renderer = layer.renderer;
        const { stretchType = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ax.STRETCH_TYPE } = renderer || {};
        const isStretchTypePercentClip = stretchType === _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.az.PERCENT_CLIP;
        if (!isStretchTypePercentClip) {
            return null;
        }
        let { minPercent, maxPercent } = renderer || {};
        if (!(0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ac)(minPercent) || minPercent <= 0 || minPercent >= 100) {
            minPercent = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ax.MIN_PERCENT;
        }
        if (!(0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ac)(maxPercent) || maxPercent <= 0 || maxPercent >= 100) {
            maxPercent = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ax.MAX_PERCENT;
        }
        minPercent = parseFloat(minPercent.toFixed(1));
        maxPercent = parseFloat(maxPercent.toFixed(1));
        renderer.minPercent = minPercent;
        renderer.maxPercent = maxPercent;
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "percent-clip-section" }, this.renderPercentClipSectionInput("min", minPercent), this.renderPercentClipSectionInput("max", maxPercent)));
    }
    renderPercentClipSectionInput(selection, value) {
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "percent-clip-section-input" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, strings.panels.stretch[selection], (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-input-number", { label: strings.panels.stretch[selection], scale: "s", min: 0.1, max: 99.9, step: 0.1, suffixText: "%", value: `${value}`, onCalciteInputNumberInput: (event) => {
                const node = event.target;
                const newPercent = parseFloat(node.value);
                if (node.value && newPercent >= node.min && newPercent <= node.max) {
                    this.handlePercentOrStddevChange(node, selection);
                }
                else {
                    setTimeout(() => this.handlePercentOrStddevChange(node, selection), 3000);
                }
            } }))));
    }
    renderBandSelector() {
        const { layer: smLayer, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        const { bandCount } = layer.rasterInfo;
        const showBandSelector = bandCount > 1;
        if (!showBandSelector) {
            return null;
        }
        const { bandInfos } = layer.rasterInfo;
        const bandNames = bandInfos.map((bandInfo) => bandInfo.name);
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, strings.panels.stretch.band, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-combobox", { label: strings.panels.stretch.band, clearDisabled: true, selectionMode: "single-persist", onCalciteComboboxChange: (event) => {
                var _a;
                const node = event.target;
                const renderer = layer.renderer;
                layer.bandIds = [bandNames.indexOf(node.value)];
                const bandIndex = (_a = layer.bandIds[0]) !== null && _a !== void 0 ? _a : _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ax.BAND_INDEX;
                renderer.statistics = [this.currentStatistics[bandIndex]];
                (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
                (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
            } }, bandNames.map((bandName, idx) => this.renderBandOptions(bandName, idx)))));
    }
    renderBandOptions(bandName, idx) {
        var _a;
        const { layer: smLayer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        const bandIndex = (_a = layer.bandIds[0]) !== null && _a !== void 0 ? _a : _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ax.BAND_INDEX;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-combobox-item", { textLabel: bandName, value: bandName, selected: bandIndex === idx }));
    }
    renderGammaSlider() {
        var _a;
        const { layer: smLayer, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        const renderer = layer.renderer;
        let { gamma = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ax.GAMMA } = renderer || {};
        if (!(0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ac)(gamma)) {
            gamma = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ax.GAMMA;
        }
        if (Array.isArray(gamma)) {
            gamma = (_a = gamma[0]) !== null && _a !== void 0 ? _a : _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ax.GAMMA;
        }
        const { stretchType = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ax.STRETCH_TYPE } = renderer || {};
        const isStretchTypeNone = stretchType === _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.az.NONE;
        if (isStretchTypeNone) {
            return null;
        }
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, strings.panels.stretch.gamma, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-gamma-slider", { gamma: gamma, rendererType: "raster-stretch" })));
    }
    renderColorScheme() {
        const { layer: smLayer, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        const renderer = layer.renderer;
        const { stretchType = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ax.STRETCH_TYPE } = renderer || {};
        const isStretchTypeNone = stretchType === _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.az.NONE;
        if (isStretchTypeNone) {
            return null;
        }
        const { colorRamp } = renderer || {};
        // normalize colorRamp (currently in Multipart form)
        const colorScheme = (0,_raster_renderer_a62f152c_js__WEBPACK_IMPORTED_MODULE_5__.n)(colorRamp);
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-symbol-button", { label: strings.panels.stretch.colorScheme, type: "raster-stretch", rampType: "continuous", colors: colorScheme, onArcgisSmartMappingSymbolButtonSymbolChange: () => {
                (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
                (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
            } }));
    }
    renderRangeAdjustmentToggle() {
        const { layer: smLayer, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        const renderer = layer.renderer;
        const { dynamicRangeAdjustment } = renderer;
        const { stretchType = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ax.STRETCH_TYPE } = renderer || {};
        const isStretchTypeNone = stretchType === _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.az.NONE;
        if (isStretchTypeNone) {
            return null;
        }
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { layout: "inline-space-between", class: "range-adjustment-label" }, strings.panels.stretch.dynamicRangeAdjustment, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-switch", { scale: "s", checked: dynamicRangeAdjustment, onCalciteSwitchChange: (event) => {
                const node = event.target;
                const isToggled = node.checked;
                this.handleDRAToggle(isToggled);
                (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
            } })));
    }
    renderStatisticsTable() {
        var _a;
        const { originalStatistics } = this;
        const { layer: smLayer, modules, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        const renderer = layer.renderer;
        const { stretchType = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ax.STRETCH_TYPE } = renderer || {};
        const isStretchTypePercentClip = stretchType === _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.az.PERCENT_CLIP;
        const isStretchTypeNone = stretchType === _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.az.NONE;
        const isStretchTypeStandardDeviation = stretchType === _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.az.STANDARD_DEVIATION;
        const { dynamicRangeAdjustment } = renderer;
        const showStatsTable = !dynamicRangeAdjustment && !(isStretchTypeNone || isStretchTypePercentClip);
        if (!showStatsTable) {
            return null;
        }
        const hasStatistics = layer.rasterInfo.statistics !== null;
        let { statistics } = renderer || {};
        if (!statistics || (Array.isArray(statistics) && statistics.length < 1)) {
            statistics = modules.esriLang.clone(originalStatistics);
        }
        const bandIndex = (_a = layer.bandIds[0]) !== null && _a !== void 0 ? _a : _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ax.BAND_INDEX;
        const disableMeanAndStdDev = (!hasStatistics || isStretchTypePercentClip) && !isStretchTypeStandardDeviation;
        const { min = 0, max = 255, avg: mean = 0, stddev = 0 } = (statistics === null || statistics === void 0 ? void 0 : statistics[0]) || {};
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.F, null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, strings.panels.stretch.statistics), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, strings.panels.stretch.min, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-input-number", { label: strings.panels.stretch.min, scale: "s", step: 0.1, numberButtonType: "none", value: `${(0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ac)(min) ? this.round(min) : ""}`, onCalciteInputNumberInput: (0,_functional_44de8fcf_js__WEBPACK_IMPORTED_MODULE_10__.d)(() => {
                const value = parseFloat(this.minNode.value);
                if (!isNaN(value) && value <= this.currentStatistics[bandIndex]["max"]) {
                    this.minNode.value = `${value}`;
                    this.handleStatisticsChange(value, bandIndex, "min");
                }
                else {
                    setTimeout(() => {
                        const currentMin = this.round(this.currentStatistics[bandIndex]["min"]);
                        this.minNode.value = `${currentMin}`;
                    }, 3000);
                }
            }, 300), ref: (node) => (this.minNode = node) })), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, strings.panels.stretch.max, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-input-number", { label: strings.panels.stretch.max, scale: "s", step: 0.1, numberButtonType: "none", value: `${(0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ac)(max) ? this.round(max) : ""}`, onCalciteInputNumberInput: (0,_functional_44de8fcf_js__WEBPACK_IMPORTED_MODULE_10__.d)(() => {
                const value = parseFloat(this.maxNode.value);
                if (!isNaN(value) && value >= this.currentStatistics[bandIndex]["min"]) {
                    this.maxNode.value = `${value}`;
                    this.handleStatisticsChange(value, bandIndex, "max");
                }
                else {
                    setTimeout(() => {
                        const currentMax = this.round(this.currentStatistics[bandIndex]["max"]);
                        this.maxNode.value = `${currentMax}`;
                    }, 3000);
                }
            }, 300), ref: (node) => (this.maxNode = node) })), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, strings.panels.stretch.mean, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-input-number", { label: strings.panels.stretch.mean, scale: "s", step: 0.1, disabled: disableMeanAndStdDev, numberButtonType: "none", value: `${(0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ac)(mean) ? this.round(mean) : ""}`, onCalciteInputNumberInput: (0,_functional_44de8fcf_js__WEBPACK_IMPORTED_MODULE_10__.d)(() => {
                const value = parseFloat(this.avgNode.value);
                if (!isNaN(value)) {
                    this.avgNode.value = `${value}`;
                    this.handleStatisticsChange(value, bandIndex, "avg");
                }
                else {
                    setTimeout(() => {
                        const currentMean = this.round(this.currentStatistics[bandIndex]["avg"]);
                        this.avgNode.value = `${currentMean}`;
                    }, 3000);
                }
            }, 300), ref: (node) => (this.avgNode = node) })), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, strings.panels.stretch.stddev, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-input-number", { label: strings.panels.stretch.stddev, scale: "s", step: 0.1, disabled: disableMeanAndStdDev, numberButtonType: "none", value: `${(0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ac)(stddev) ? this.round(stddev) : ""}`, onCalciteInputNumberInput: (0,_functional_44de8fcf_js__WEBPACK_IMPORTED_MODULE_10__.d)(() => {
                const value = parseFloat(this.stddevNode.value);
                if (!isNaN(value)) {
                    this.stddevNode.value = `${value}`;
                    this.handleStatisticsChange(value, bandIndex, "stddev");
                }
                else {
                    setTimeout(() => {
                        const currentStddev = this.round(this.currentStatistics[bandIndex]["stddev"]);
                        this.stddevNode.value = `${currentStddev}`;
                    }, 3000);
                }
            }, 300), ref: (node) => (this.stddevNode = node) }))));
    }
    renderDoneButton() {
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { slot: "footer", label: strings.done, onClick: this.handleDone, appearance: "solid", width: "half" }, strings.done));
    }
    renderCancelButton() {
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { slot: "footer", label: strings.cancel, onClick: this.handleCancel, appearance: "outline-fill", width: "half" }, strings.cancel));
    }
    handlePercentOrStddevChange(node, changing) {
        const { layer: smLayer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        const renderer = layer.renderer;
        let value = parseFloat(node.value);
        if (isNaN(value) || value < node.min) {
            value = node.min;
        }
        else if (value > node.max) {
            value = node.max;
        }
        value = parseFloat(value.toFixed(1));
        node.value = `${value}`;
        changing === "min"
            ? (renderer.minPercent = value)
            : changing === "max"
                ? (renderer.maxPercent = value)
                : (renderer.numberOfStandardDeviations = value);
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
    }
    handleDRAToggle(applyDRA) {
        var _a;
        const { layer: smLayer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        const renderer = layer.renderer;
        const bandIndex = (_a = layer.bandIds[0]) !== null && _a !== void 0 ? _a : _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ax.BAND_INDEX;
        renderer.dynamicRangeAdjustment = applyDRA;
        if (applyDRA) {
            renderer.statistics = [];
        }
        else {
            renderer.statistics = [this.currentStatistics[bandIndex]];
        }
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
    }
    handleStatisticsChange(value, statisticIDToUpdate, type) {
        const { layer: smLayer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        const renderer = layer.renderer;
        this.currentStatistics[statisticIDToUpdate][type] = value;
        renderer.statistics = [this.currentStatistics[statisticIDToUpdate]];
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
    }
    isAnEmptyArray(value) {
        if (Array.isArray(value)) {
            return value.length === 0;
        }
        return value === undefined || value === null;
    }
    round(value) {
        return Math.round(value * 1000) / 1000;
    }
    get hostElement() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisSmartMappingPanelsRasterStretch.style = arcgisSmartMappingPanelsRasterStretchCss;

const arcgisSmartMappingPanelsRasterUniqueValueCss = ":host{width:100%}.flow-item{height:100%}.unique-value-block{overflow-x:hidden;overflow-wrap:anywhere}.label{padding:5px auto}.symbol{width:19px;height:19px}.symbol:focus,.label:focus{outline:2px solid var(--calcite-color-brand)}.symbol-container{cursor:pointer}.selected{outline:1px solid var(--calcite-color-brand)}.hidden{display:none}.gray-border{border-top:1px solid #e0e0e0;border-bottom:1px solid #e0e0e0}.checkbox{margin:0px 5.5px}.default-list-padding{padding-top:8px}";

const ArcgisSmartMappingPanelsRasterUniqueValue = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisSmartMappingPanelsRasterUniqueValueClose = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingPanelsRasterUniqueValueClose", 7);
        this.arcgisSmartMappingPanelsRasterUniqueValueBackClick = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingPanelsRasterUniqueValueBackClick", 7);
        this.arcgisSmartMappingPanelsRasterUniqueValueError = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingPanelsRasterUniqueValueError", 7);
        this.inputNodes = [];
        this.labelNodes = [];
        this.colorNodes = [];
        //--------------------------------------------------------------------------
        //
        //  Private methods
        //
        //--------------------------------------------------------------------------
        this.handleDone = () => {
            // keep the current settings on the layer
            this.arcgisSmartMappingPanelsRasterUniqueValueClose.emit("save");
        };
        this.handleCancel = () => {
            const { originalRendererObj } = this;
            const { layer: smLayer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
            const layer = smLayer;
            (0,_raster_renderer_a62f152c_js__WEBPACK_IMPORTED_MODULE_5__.a)(originalRendererObj, layer);
            this.arcgisSmartMappingPanelsRasterUniqueValueClose.emit("cancel");
        };
        this.menuOpen = undefined;
        this.showBackButton = undefined;
        this.beforeBack = undefined;
    }
    //--------------------------------------------------------------------------
    //
    //  Public Methods
    //
    //--------------------------------------------------------------------------
    async setFocus() {
        var _a;
        (_a = this.flowItemNode) === null || _a === void 0 ? void 0 : _a.setFocus();
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    componentWillLoad() {
        const { layer: smLayer, mapView, modules, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        const renderer = layer.renderer;
        const rendererType = (0,_raster_renderer_a62f152c_js__WEBPACK_IMPORTED_MODULE_5__.g)();
        _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s.lastDefault = {
            defaultSymbol: renderer.defaultSymbol || (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.S)(layer, mapView, rendererType),
            defaultLabel: renderer.defaultLabel || strings.panels.uniqueValue.other
        };
        // save original renderer
        this.originalRendererObj = modules.esriLang.clone(layer.renderer);
    }
    componentDidLoad() {
        requestAnimationFrame(() => { var _a; return (_a = this.flowItemNode) === null || _a === void 0 ? void 0 : _a.setFocus(); });
    }
    disconnectedCallback() {
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ae)();
    }
    //--------------------------------------------------------------------------
    //
    //  Render Methods
    //
    //--------------------------------------------------------------------------
    render() {
        const { hideLayerTitle, layer, strings, isRTL } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const title = layer.title;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.H, { class: "calcite-match-height" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-flow-item", { heading: strings.panels.uniqueValue.styleOptions, description: !hideLayerTitle ? title : undefined, class: {
                "flow-item": true,
                [_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_9__.C.rtl]: isRTL
            }, closable: (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.aa)(this.hostElement), menuOpen: this.menuOpen, beforeBack: this.beforeBack,
            // @ts-ignore
            showBackButton: this.showBackButton, onCalciteFlowItemClose: this.handleDone, onCalciteFlowItemBack: () => this.arcgisSmartMappingPanelsRasterUniqueValueBackClick.emit(), ref: (node) => (this.flowItemNode = node) }, this.renderVisualization(), this.renderDoneButton(), this.renderCancelButton())));
    }
    renderVisualization() {
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-block", { class: "unique-value-block", heading: strings.panels.uniqueValue.uniqueValue, open: true }, this.renderFieldSelector(), this.renderColorScheme(), this.renderValues()));
    }
    renderFieldSelector() {
        var _a;
        const { layer: smLayer, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        const renderer = layer.renderer;
        const rendererField = renderer.field || strings.panels.uniqueValue.value;
        const fields = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.aA)();
        const fieldList = fields.map((field) => {
            return {
                label: field.alias,
                layerField: field,
                // raster layer displays are not dependent on field type, so we use "string" as a placeholder
                simpleFieldType: _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.w.STRING
            };
        });
        const selectedField = fields.find((field) => {
            return field.name === rendererField;
        });
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-attribute-input", { label: strings.panels.uniqueValue.field, fieldList: fieldList, selectedField: {
                field: (_a = selectedField === null || selectedField === void 0 ? void 0 : selectedField.name) !== null && _a !== void 0 ? _a : strings.panels.uniqueValue.value,
                // raster layer displays are not dependent on field type, so we use "string" as a placeholder
                simpleFieldType: _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.w.STRING
            }, mode: "simple", popoverReferenceElement: this.flowItemNode, onArcgisSmartMappingAttributeInputChange: (event) => {
                if (event.detail) {
                    const newField = event.detail.field;
                    this.handleFieldChange(newField);
                }
            } }));
    }
    renderColorScheme() {
        const { layer: smLayer, mapView, modules, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        const renderer = layer.renderer;
        const uniqueValueInfos = renderer.uniqueValueInfos;
        if (!uniqueValueInfos.length) {
            return null;
        }
        const schemes = modules.typeSchemes.getSchemes({
            basemap: mapView.map.basemap,
            geometryType: "polygon"
        });
        const colorRampsAndSchemes = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a9)(schemes, Math.min(uniqueValueInfos.length, 10));
        const defaultColors = colorRampsAndSchemes[0].colors;
        const colors = [];
        colors.push(...((uniqueValueInfos === null || uniqueValueInfos === void 0 ? void 0 : uniqueValueInfos.length)
            ? uniqueValueInfos.map((uniqueValueInfo, idx) => (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.t)(uniqueValueInfo.symbol) ||
                new modules.esriColor(defaultColors[idx % defaultColors.length]))
            : []));
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-symbol-button", { label: strings.panels.uniqueValue.colorScheme, type: "raster-unique-value",
            /**
             * rampType must be continuous to handle graceful display of datasets with more than ~20 colors.
             * Individual colors can still be modified, and the changes will  be reflected in the symbol
             * button and symbol styler.
             */
            rampType: "continuous", colors: modules.esriLang.clone(colors).reverse(), onArcgisSmartMappingSymbolButtonSymbolChange: () => {
                (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
                (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
                (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.symbolButtonNode);
            }, ref: (node) => (this.symbolButtonNode = node) }));
    }
    renderValues() {
        const { layer: smLayer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        const renderer = layer.renderer;
        this.labelNodes = [];
        this.inputNodes = [];
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.F, null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, renderer.field), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-list", { group: "unique-value-items", class: "gray-border", dragEnabled: true, onCalciteListOrderChange: (event) => {
                if (event.detail.toEl) {
                    const draggedElement = event.detail.dragEl;
                    const draggedToOtherValuesList = event.detail.toEl.id === "other-values-list";
                    if (draggedToOtherValuesList) {
                        const newUniqueValueInfos = renderer.uniqueValueInfos.filter((_, idx) => idx !== parseInt(draggedElement.label));
                        renderer.uniqueValueInfos = newUniqueValueInfos;
                    }
                }
                const items = Array.from(event.target.children);
                this.handleSortValues(items);
            } }, renderer.uniqueValueInfos.map((uniqueValueInfo, idx) => {
            return this.renderValue(uniqueValueInfo, idx);
        })), this.renderDefaultValue(), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-list", { id: "other-values-list", dragEnabled: true, group: "unique-value-items" })));
    }
    renderValue(uniqueValueInfo, idx) {
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-list-item", { key: `values-${uniqueValueInfo.value}`, value: `${uniqueValueInfo.value}`, label: `${idx}` }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "actions-start" }, this.renderColorNode(uniqueValueInfo, idx)), this.renderTextNode(uniqueValueInfo, idx)));
    }
    renderColorNode(uniqueValueInfo, idx) {
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        let symbol = uniqueValueInfo.symbol.clone();
        const symbolNodeClasses = {
            "symbol-is-white": (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.aq)(symbol),
            symbol: true
        };
        if (idx !== -1 && this.colorNodes.length) {
            this.colorNodes = [];
        }
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: symbolNodeClasses, tabindex: "0", "aria-label": strings.panels.uniqueValue.accessibility.editColorFor.replace("${value}", uniqueValueInfo.label), "aria-haspopup": "true", ref: (node) => {
                if (node) {
                    idx === -1 ? (this.defaultColorNode = node) : this.colorNodes.push(node);
                }
            }, onClick: () => {
                if (this.popoverNode) {
                    const colorNode = this.selectedPopoverIdx === -1 ? this.defaultColorNode : this.colorNodes[this.selectedPopoverIdx];
                    colorNode.classList.remove("selected");
                    if (this.selectedPopoverIdx === idx) {
                        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.E)();
                        this.popoverNode = null;
                        this.selectedPopoverIdx = null;
                    }
                    else {
                        this.selectedPopoverIdx = idx;
                        this.handleColorClick(idx);
                    }
                }
                else {
                    this.selectedPopoverIdx = idx;
                    this.handleColorClick(idx);
                }
            }, onKeyDown: (event) => {
                if (event.key === " " || event.key === "Enter") {
                    event.preventDefault();
                    event.stopPropagation();
                    this.handleColorClick(idx);
                }
            } }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { ref: (node) => {
                if (node) {
                    this.afterCreateColorNode(node, idx);
                }
            } })));
    }
    renderTextNode(uniqueValueInfo, idx) {
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.F, null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: `${idx === -1 ? "default-label" : ""} label`, slot: "content", tabindex: "0", ref: (node) => {
                if (node) {
                    idx === -1 ? (this.defaultLabelNode = node) : (this.labelNodes[idx] = node);
                }
            }, "aria-label": strings.panels.uniqueValue.accessibility.editLabelFor.replace("${value}", uniqueValueInfo.label), onClick: (event) => this.handleLabelEdit(idx, event), onKeyDown: (event) => {
                if (event.key === " " || event.key === "Enter") {
                    this.handleLabelEdit(idx, event);
                }
            } }, uniqueValueInfo.label), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-input", { slot: "content", class: "hidden", scale: "s", tabindex: "0", ref: (node) => {
                var _a;
                if (node) {
                    idx === -1 ? (this.defaultInputNode = node) : (this.inputNodes[idx] = node);
                    (_a = this.defaultInputNode) === null || _a === void 0 ? void 0 : _a.classList.add("default-input-padding");
                }
            }, value: uniqueValueInfo.label, onCalciteInputChange: (event) => {
                const inputNode = idx === -1 ? this.defaultInputNode : this.inputNodes[idx];
                const labelNode = idx === -1 ? this.defaultLabelNode : this.labelNodes[idx];
                inputNode.classList.add("hidden");
                labelNode.classList.remove("hidden");
                this.handleValueTextChange(idx, event);
            }, onFocusout: (event) => {
                const inputNode = idx === -1 ? this.defaultInputNode : this.inputNodes[idx];
                const labelNode = idx === -1 ? this.defaultLabelNode : this.labelNodes[idx];
                inputNode.classList.add("hidden");
                labelNode.classList.remove("hidden");
                this.handleValueTextChange(idx, event);
            }, onKeyDown: (event) => {
                if (event.key === "Escape" || event.key === "Enter") {
                    const inputNode = idx === -1 ? this.defaultInputNode : this.inputNodes[idx];
                    inputNode.classList.add("hidden");
                    const input = event.currentTarget;
                    input.value = uniqueValueInfo.label || "";
                    input.disabled = true;
                    this.handleValueTextChange(idx, event);
                    const labelNode = idx === -1 ? this.defaultLabelNode : this.labelNodes[idx];
                    labelNode.classList.remove("hidden");
                    input.disabled = false;
                    setTimeout(() => labelNode.focus(), 300);
                }
            } })));
    }
    renderDefaultValue() {
        const { layer: smLayer, mapView, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        const renderer = layer.renderer;
        const rendererType = (0,_raster_renderer_a62f152c_js__WEBPACK_IMPORTED_MODULE_5__.g)();
        const defaultSymbol = renderer.defaultSymbol || (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.S)(layer, mapView, rendererType);
        const defaultLabel = renderer.defaultLabel || strings.panels.uniqueValue.other;
        const defaultUniqueValueInfo = {
            symbol: defaultSymbol,
            label: defaultLabel
        };
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-list", { class: "default-list-padding" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-list-item", null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-checkbox", { class: "checkbox", slot: "actions-start", scale: "m", tabIndex: 0, checked: !!renderer.defaultSymbol, onClick: (event) => this.handleCheckboxClick(event), onKeyDown: (event) => {
                if (event.key === " " || event.key === "Enter") {
                    event.preventDefault();
                    event.stopPropagation();
                    this.handleCheckboxClick(event);
                }
            }, onMouseOver: () => (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.af)(this.checkboxNode, strings.panels.uniqueValue.otherTooltip), onMouseOut: () => (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ae)(), onFocus: () => (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.af)(this.checkboxNode, strings.panels.uniqueValue.otherTooltip), onFocusout: () => (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ae)(), ref: (node) => {
                if (node) {
                    this.checkboxNode = node;
                }
            } }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "content-start", class: "symbol-container" }, this.renderColorNode(defaultUniqueValueInfo, -1)), this.renderTextNode(defaultUniqueValueInfo, -1))));
    }
    renderDoneButton() {
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { slot: "footer", label: strings.done, onClick: this.handleDone, appearance: "solid", width: "half" }, strings.done));
    }
    renderCancelButton() {
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { slot: "footer", label: strings.cancel, onClick: this.handleCancel, appearance: "outline-fill", width: "half" }, strings.cancel));
    }
    handleFieldChange(field) {
        const { layer: smLayer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        const renderer = layer.renderer;
        (0,_loading_69139907_js__WEBPACK_IMPORTED_MODULE_2__.r)((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.aB)({ field }), this.flowItemNode).then((result) => {
            (0,_raster_renderer_a62f152c_js__WEBPACK_IMPORTED_MODULE_5__.a)(result.renderer, layer);
            (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
            (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
        }, (error) => {
            this.fieldNode.value = renderer.field;
            this.arcgisSmartMappingPanelsRasterUniqueValueError.emit(error);
        });
    }
    handleSortValues(items) {
        const { layer: smLayer, mapView, modules, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const rendererType = (0,_raster_renderer_a62f152c_js__WEBPACK_IMPORTED_MODULE_5__.g)();
        const layer = smLayer;
        const renderer = layer.renderer;
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.E)();
        const itemValues = items.map((item) => item.value);
        const uniqueValueInfos = renderer.uniqueValueInfos.map((uniqueValueInfo) => modules.esriLang.clone(uniqueValueInfo));
        uniqueValueInfos.sort((a, b) => {
            const aIndex = itemValues.indexOf(`${a.value}`);
            const bIndex = itemValues.indexOf(`${b.value}`);
            return aIndex - bIndex;
        });
        if (uniqueValueInfos.length) {
            renderer.uniqueValueInfos = uniqueValueInfos;
        }
        else {
            renderer.defaultSymbol = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.S)(layer, mapView, rendererType);
            renderer.defaultLabel = strings.panels.uniqueValue.other;
        }
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
    }
    afterCreateColorNode(node, idx) {
        var _a;
        const { layer: smLayer, mapView, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        const renderer = layer.renderer;
        const rendererType = (0,_raster_renderer_a62f152c_js__WEBPACK_IMPORTED_MODULE_5__.g)();
        const symbol = idx === -1
            ? renderer.defaultSymbol || (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.S)(layer, mapView, rendererType)
            : renderer.uniqueValueInfos[idx].symbol.clone();
        // reset default outline
        if (idx === -1) {
            if (symbol.outline) {
                symbol.outline.width = 0;
            }
        }
        // add outlines only to symbols that are almost white
        if ((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.aq)(symbol)) {
            symbol.outline = new modules.SimpleLineSymbol({
                color: "#bdc3c7",
                width: 0.75
            });
        }
        while ((_a = node === null || node === void 0 ? void 0 : node.childNodes) === null || _a === void 0 ? void 0 : _a.length) {
            node.removeChild(node.childNodes[0]);
        }
        const { symbolUtils } = modules;
        if (symbol) {
            symbolUtils
                .renderPreviewHTML(symbol, {
                size: (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ar)(symbol),
                // @ts-ignore
                ignoreWhiteSymbols: true,
                symbolConfig: {
                    isSquareFill: true
                }
            })
                .then((element) => node === null || node === void 0 ? void 0 : node.appendChild(element));
        }
    }
    handleColorClick(idx) {
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.E)();
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const popoverNode = (0,_symbolStyler_04635b2b_js__WEBPACK_IMPORTED_MODULE_7__.c)({
            referenceElement: this.flowItemNode,
            heading: strings.panels.uniqueValue.colorScheme
        });
        popoverNode.addEventListener("arcgisSmartMappingStylerPopoverClose", () => this.handleRemoveColorFocus(popoverNode, idx, false));
        popoverNode.addEventListener("arcgisSmartMappingStylerPopoverDisconnected", () => this.handleRemoveColorFocus(popoverNode, idx, true));
        _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s.selectedValue = idx;
        (0,_raster_symbolStyler_9b32ef48_js__WEBPACK_IMPORTED_MODULE_6__.a)({
            popoverNode: popoverNode,
            onChange: () => {
                const { layer: smLayer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
                const layer = smLayer;
                const renderer = layer.renderer;
                if (idx === -1 && !renderer.defaultLabel) {
                    renderer.defaultLabel = strings.panels.uniqueValue.other;
                }
                (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
                (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
                this.symbolButtonNode && (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.symbolButtonNode);
            }
        });
        this.popoverNode = popoverNode;
        idx === -1
            ? this.defaultColorNode.classList.add("selected")
            : this.colorNodes[idx].classList.add("selected");
    }
    handleRemoveColorFocus(popoverNode, idx, disconnected) {
        (0,_symbolStyler_04635b2b_js__WEBPACK_IMPORTED_MODULE_7__.r)(popoverNode);
        setTimeout(() => {
            const colorNode = idx === -1 ? this.defaultColorNode : this.colorNodes[idx];
            if (!disconnected) {
                colorNode.focus();
            }
            colorNode.classList.remove("selected");
            this.popoverNode = null;
        }, 300);
    }
    handleLabelEdit(idx, event) {
        const inputNode = idx === -1 ? this.defaultInputNode : this.inputNodes[idx];
        inputNode.classList.remove("hidden");
        inputNode.setFocus();
        event.target.classList.add("hidden");
    }
    handleValueTextChange(idx, event) {
        const { layer: smLayer, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        const renderer = layer.renderer;
        // handles unchecking the default label checkbox
        if (idx === -1 && !renderer.defaultLabel) {
            this.defaultInputNode.value = strings.panels.uniqueValue.other;
            this.defaultLabelNode.textContent = strings.panels.uniqueValue.other;
            (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
            (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
            return;
        }
        const node = event.target;
        idx === -1
            ? (renderer.defaultLabel = node.value)
            : (renderer.uniqueValueInfos[idx].label = node.value);
        // handles empty inputs
        if (node.value === "") {
            if (idx === -1) {
                renderer.defaultLabel = strings.panels.uniqueValue.other;
                this.defaultInputNode.value = strings.panels.uniqueValue.other;
                this.defaultLabelNode.textContent = strings.panels.uniqueValue.other;
            }
            else {
                renderer.uniqueValueInfos[idx].label = `${renderer.uniqueValueInfos[idx].value}`;
                this.inputNodes[idx].value = renderer.uniqueValueInfos[idx].label;
            }
        }
        else {
            if (idx === -1) {
                this.defaultInputNode.value = renderer.defaultLabel;
                this.defaultLabelNode.textContent = renderer.defaultLabel;
            }
        }
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
    }
    handleCheckboxClick(event) {
        const { layer: smLayer, lastDefault, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        const renderer = layer.renderer;
        (0,_symbolStyler_04635b2b_js__WEBPACK_IMPORTED_MODULE_7__.r)(this.popoverNode);
        this.popoverNode = null;
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.E)();
        if (renderer.uniqueValueInfos.length) {
            if (renderer.defaultSymbol) {
                renderer.defaultSymbol = undefined;
                renderer.defaultLabel = undefined;
                this.defaultLabelNode.textContent = strings.panels.uniqueValue.other;
                this.defaultInputNode.value = strings.panels.uniqueValue.other;
            }
            else {
                renderer.defaultSymbol = lastDefault.defaultSymbol;
                renderer.defaultLabel = this.defaultLabelNode.textContent;
            }
            (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
            (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
        }
        else {
            event.target.checked = true;
        }
    }
    get hostElement() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisSmartMappingPanelsRasterUniqueValue.style = arcgisSmartMappingPanelsRasterUniqueValueCss;

const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
const unitOptions = strings.panels.vectorField.unitOptions;
const SpeedUnitOptions = [
    { key: "meter-per-second", title: unitOptions.esriMetersPerSecond, selected: false },
    { key: "kilometer-per-hour", title: unitOptions.esriKilometersPerHour, selected: false },
    { key: "knots", title: unitOptions.esriKnots, selected: false },
    { key: "feet-per-second", title: unitOptions.esriFeetPerSecond, selected: false },
    { key: "mile-per-hour", title: unitOptions.esriMilesPerHour, selected: false }
];

const arcgisSmartMappingPanelsRasterVectorFieldCss = ":host{width:100%}.flow-item{height:100%}.vector-field-block{overflow-x:hidden}.invert-symbol-wrapper{display:flex;justify-content:space-between}.invert-symbol-margin{margin-right:inherit;margin-left:0.35rem}.arcgis--rtl .invert-symbol-margin{margin-left:inherit;margin-right:0.35rem}.invert-symbol-switch{padding-top:6px}.magnitude-input-section{display:flex;justify-content:space-between;margin-top:-10px;margin-bottom:16px}.magnitude-input{width:48%}";

const ArcgisSmartMappingPanelsRasterVectorField = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisSmartMappingPanelsRasterVectorFieldClose = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingPanelsRasterVectorFieldClose", 7);
        this.arcgisSmartMappingPanelsRasterVectorFieldBackClick = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingPanelsRasterVectorFieldBackClick", 7);
        this.arcgisSmartMappingPanelsRasterVectorFieldError = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingPanelsRasterVectorFieldError", 7);
        //--------------------------------------------------------------------------
        //
        //  Private Properties
        //
        //--------------------------------------------------------------------------
        this.documentClickHandler = undefined;
        //--------------------------------------------------------------------------
        //
        //  Private methods
        //
        //--------------------------------------------------------------------------
        this.handleDone = () => {
            // keep the current settings on the layer
            this.arcgisSmartMappingPanelsRasterVectorFieldClose.emit("save");
        };
        this.handleCancel = () => {
            const { originalRendererObj } = this;
            const { layer: smLayer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
            const layer = smLayer;
            (0,_raster_renderer_a62f152c_js__WEBPACK_IMPORTED_MODULE_5__.a)(originalRendererObj, layer);
            this.arcgisSmartMappingPanelsRasterVectorFieldClose.emit("cancel");
        };
        this.menuOpen = undefined;
        this.showBackButton = undefined;
        this.beforeBack = undefined;
    }
    //--------------------------------------------------------------------------
    //
    //  Public Methods
    //
    //--------------------------------------------------------------------------
    async setFocus() {
        var _a;
        (_a = this.flowItemNode) === null || _a === void 0 ? void 0 : _a.setFocus();
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    componentWillLoad() {
        const { layer: smLayer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        // save original renderer
        this.originalRendererObj = layer.renderer;
    }
    componentDidLoad() {
        requestAnimationFrame(() => { var _a; return (_a = this.flowItemNode) === null || _a === void 0 ? void 0 : _a.setFocus(); });
        this.currentInput = this.inputUnitNode.value;
        this.currentOutput = this.outputUnitNode.value;
    }
    //--------------------------------------------------------------------------
    //
    //  Render Methods
    //
    //--------------------------------------------------------------------------
    render() {
        const { hideLayerTitle, layer, strings, isRTL } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const title = layer.title;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.H, { class: "calcite-match-height" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-flow-item", { heading: strings.panels.vectorField.styleOptions, description: !hideLayerTitle ? title : undefined, class: {
                "flow-item": true,
                [_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_9__.C.rtl]: isRTL
            }, closable: (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.aa)(this.hostElement), menuOpen: this.menuOpen, beforeBack: this.beforeBack,
            // @ts-ignore
            showBackButton: this.showBackButton, onCalciteFlowItemClose: this.handleDone, onCalciteFlowItemBack: () => this.arcgisSmartMappingPanelsRasterVectorFieldBackClick.emit(), ref: (node) => (this.flowItemNode = node) }, this.renderVisualization(), this.renderDoneButton(), this.renderCancelButton())));
    }
    renderVisualization() {
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-block", { class: "vector-field-block", heading: strings.panels.vectorField.vectorField, open: true }, this.renderSymbolStyleSelector(), this.renderSymbolDensitySlider(), this.renderSymbolScalingSlider(), this.renderInvertSymbols(), this.renderMagnitudeRange(), this.renderUnitSelectors()));
    }
    renderSymbolStyleSelector() {
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-vector-symbol-button", { ref: (node) => (this.selectNode = node), onArcgisSmartMappingSelectBeforeOpen: () => {
                var _a;
                (_a = this.popoverNode) === null || _a === void 0 ? void 0 : _a.parentElement.removeChild(this.popoverNode);
                this.popoverNode = null;
                this.popoverOpen = false;
            }, onArcgisSmartMappingSelectChange: (event) => {
                const { layer: smLayer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
                const layer = smLayer;
                const renderer = layer.renderer;
                let style = event.detail;
                if (style.includes("beaufort")) {
                    style = this.getExactBeaufortUnit(renderer.outputUnit);
                }
                this.resetOutputUnit(style, renderer);
                (0,_loading_69139907_js__WEBPACK_IMPORTED_MODULE_2__.r)((0,_raster_class_breaks_50c446bd_js__WEBPACK_IMPORTED_MODULE_8__.d)({ style: style }), this.flowItemNode).then((result) => {
                    layer.renderer = result.renderer;
                    (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
                    (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
                    this.selectNode && (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.selectNode);
                }, (error) => {
                    (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.selectNode);
                    this.arcgisSmartMappingPanelsRasterVectorFieldError.emit(error);
                });
            } }));
    }
    renderSymbolDensitySlider() {
        const { layer: smLayer, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        const renderer = layer.renderer;
        const { symbolTileSize } = renderer || {};
        const adjustedTileSize = 100 / symbolTileSize;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, strings.panels.vectorField.symbolDensity, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-raster-slider", { rendererType: "vector-field", type: "density", min: 1, max: 5, values: [Math.round(adjustedTileSize * 10) / 10], precision: 1, minLabel: strings.panels.flow.low, maxLabel: strings.panels.flow.high })));
    }
    renderSymbolScalingSlider() {
        const { layer: smLayer, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        const renderer = layer.renderer;
        const sizeVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)(renderer, "size");
        const { minSize, maxSize } = sizeVisVar;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, strings.panels.vectorField.symbolScaling, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-slider", { min: 0, minValue: minSize !== null ? minSize : 20, max: 100, maxValue: maxSize !== null ? maxSize : 80, step: 1, labelHandles: true, labelTicks: true, precise: true, snap: true, onCalciteSliderInput: (0,_functional_44de8fcf_js__WEBPACK_IMPORTED_MODULE_10__.d)(() => {
                const min = this.symbolScalingSliderNode.minValue;
                const max = this.symbolScalingSliderNode.maxValue;
                this.handleSymbolScaleChange(min, max);
            }, 300), ref: (node) => (this.symbolScalingSliderNode = node) })));
    }
    renderInvertSymbols() {
        const { layer: smLayer, isRTL, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        const renderer = layer.renderer;
        let isChecked = renderer.flowRepresentation !== "flow-from";
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "invert-symbol-wrapper" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { layout: "inline-space-between" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("section", null, strings.panels.vectorField.invertSymbols, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { class: {
                "invert-symbol-margin": true,
                [_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_9__.C.rtl]: isRTL
            }, "icon-start": "information", scale: "s", appearance: "transparent", kind: "neutral", onClick: () => {
                if (this.popoverOpen) {
                    this.removePopover();
                    this.buttonNode.setFocus();
                }
                else {
                    this.togglePopover();
                }
            }, ref: (node) => (this.buttonNode = node) }))), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-switch", { class: "invert-symbol-switch", scale: "s", label: strings.panels.vectorField.invertSymbols, checked: isChecked, onCalciteSwitchChange: (event) => this.handleInvertSymbolsChange(event.currentTarget.checked ? "flow-to" : "flow-from") })));
    }
    renderMagnitudeRange() {
        return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-magnitude-range-slider", null);
    }
    renderUnitSelectors() {
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.F, null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, strings.panels.vectorField.convertMagnitude), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, strings.panels.vectorField.inputUnits, this.renderUnitSelector("input")), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, strings.panels.vectorField.outputUnits, this.renderUnitSelector("output"))));
    }
    renderUnitSelector(type) {
        const { layer: smLayer, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        const renderer = layer.renderer;
        const disabled = type === "output" &&
            ["wind-barb", "ocean-current-kn", "ocean-current-m"].indexOf(renderer.style) > -1;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-combobox", { disabled: disabled, key: type === "input" ? renderer.inputUnit : renderer.outputUnit, label: type === "input"
                ? strings.panels.vectorField.inputUnits
                : strings.panels.vectorField.outputUnits, clearDisabled: true, scale: "s", selectionMode: "single", ref: (node) => {
                if (node) {
                    if (type === "output") {
                        this.outputUnitNode = node;
                    }
                    else {
                        this.inputUnitNode = node;
                    }
                }
            }, onCalciteComboboxChange: () => {
                if (type === "input") {
                    if (this.inputUnitNode.value === "") {
                        this.inputUnitNode.value = this.currentInput;
                    }
                    else {
                        this.currentInput = this.inputUnitNode.value;
                    }
                    this.handleUnitSelectClick("input");
                }
                else {
                    if (this.outputUnitNode.value === "") {
                        this.outputUnitNode.value = this.currentOutput;
                    }
                    else {
                        this.currentOutput = this.outputUnitNode.value;
                    }
                    this.handleUnitSelectClick("output");
                }
            } }, SpeedUnitOptions.map((unitOption) => this.renderUnitOption(type, unitOption))));
    }
    renderUnitOption(type, unit) {
        const { layer: smLayer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        const renderer = layer.renderer;
        const selectedUnitOption = SpeedUnitOptions.find((speedUnitOption) => type === "input"
            ? speedUnitOption.key === renderer.inputUnit
            : speedUnitOption.key === renderer.outputUnit);
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-combobox-item", { value: unit.key, textLabel: unit.title, selected: selectedUnitOption ? unit === selectedUnitOption : false }));
    }
    renderDoneButton() {
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { slot: "footer", label: strings.done, onClick: this.handleDone, appearance: "solid", width: "half" }, strings.done));
    }
    renderCancelButton() {
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { slot: "footer", label: strings.cancel, onClick: this.handleCancel, appearance: "outline-fill", width: "half" }, strings.cancel));
    }
    getExactBeaufortUnit(outputUnit) {
        outputUnit = outputUnit !== null && outputUnit !== void 0 ? outputUnit : "meter-per-second";
        switch (outputUnit) {
            case "knots":
                return "beaufort-kn";
            case "meter-per-second":
                return "beaufort-m";
            case "mile-per-hour":
                return "beaufort-mi";
            case "kilometer-per-hour":
                return "beaufort-km";
            case "feet-per-second":
                return "beaufort-ft";
        }
    }
    resetOutputUnit(style, renderer) {
        let outputUnit;
        switch (style) {
            case "ocean-current-kn":
            case "wind-barb":
                outputUnit = "knots";
                break;
            case "ocean-current-m":
                outputUnit = "meter-per-second";
                break;
        }
        if (outputUnit) {
            renderer.outputUnit = outputUnit;
        }
    }
    handleSymbolScaleChange(min, max) {
        const { layer: smLayer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        const renderer = layer.renderer;
        const sizeVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)(renderer, "size");
        sizeVisVar.minSize = min;
        sizeVisVar.maxSize = max;
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
    }
    handleInvertSymbolsChange(direction) {
        const { layer: smLayer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        const renderer = layer.renderer;
        renderer.flowRepresentation = direction;
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
    }
    handleUnitSelectClick(type) {
        const { layer: smLayer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        const renderer = layer.renderer;
        if (type === "input") {
            renderer.inputUnit = this.inputUnitNode.value;
        }
        else {
            renderer.outputUnit = this.outputUnitNode.value;
            if (renderer.style.includes("beaufort")) {
                renderer.style = this.getExactBeaufortUnit(renderer.outputUnit);
            }
        }
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
    }
    togglePopover() {
        const { flowItemNode } = this;
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        this.popoverNode = document.createElement("arcgis-smart-mapping-info-popover");
        this.popoverNode.props = {
            title: strings.panels.vectorField.invertSymbols,
            flowItemNode,
            moreInfo: strings.panels.vectorField.invertSymbolsTip
        };
        this.popoverNode.referenceElement = this.buttonNode;
        this.popoverNode.addEventListener("arcgisSmartMappingInfoPopoverClose", (event) => {
            event.stopPropagation();
            this.removePopover();
            this.buttonNode.setFocus();
        });
        document.body.appendChild(this.popoverNode);
        this.popoverNode.setOpen(true);
        this.popoverOpen = true;
        setTimeout(() => {
            this.documentClickHandler = (event) => {
                if (!(0,_popover_721f7ba2_js__WEBPACK_IMPORTED_MODULE_12__.i)(event.target)) {
                    this.removePopover();
                }
            };
            document.addEventListener("click", this.documentClickHandler);
        });
    }
    removePopover() {
        document.body
            .querySelectorAll(".arcgis-smart-mapping-popover")
            .forEach((node) => document.body.removeChild(node));
        this.popoverNode = null;
        this.popoverOpen = false;
        if (this.documentClickHandler) {
            document.removeEventListener("click", this.documentClickHandler);
            this.documentClickHandler = undefined;
        }
    }
    get hostElement() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisSmartMappingPanelsRasterVectorField.style = arcgisSmartMappingPanelsRasterVectorFieldCss;



//# sourceMappingURL=arcgis-smart-mapping-panels-raster-class-breaks_8.entry.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-44de8fcf.js":
/*!****************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-44de8fcf.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ arrayToLookupMap),
/* harmony export */   b: () => (/* binding */ unique),
/* harmony export */   c: () => (/* binding */ throttle),
/* harmony export */   d: () => (/* binding */ debounce),
/* harmony export */   e: () => (/* binding */ escapeRegExp),
/* harmony export */   f: () => (/* binding */ arraysAreEquivalent),
/* harmony export */   g: () => (/* binding */ chunk),
/* harmony export */   i: () => (/* binding */ isDefined),
/* harmony export */   m: () => (/* binding */ minDelay),
/* harmony export */   t: () => (/* binding */ timeout),
/* harmony export */   u: () => (/* binding */ uniqueBy)
/* harmony export */ });
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */
/**
 * Call a function only after it has not been called for n milliseconds
 * @param fn    - function to call
 * @param delay - delay in milliseconds
 */
const debounce = (fn, delay) => {
    let timeout;
    let status = "idle";
    function flush(...args) {
        status = "flushed";
        return debounced(...args);
    }
    function invoke(...args) {
        status = "invoked";
        return debounced(...args);
    }
    function cancel(...args) {
        status = "cancelled";
        return debounced(...args);
    }
    function getStatus() {
        return status;
    }
    const debounced = (...args) => new Promise((resolve) => {
        switch (status) {
            case "flushed":
                status = "idle";
                if (timeout) {
                    clearTimeout(timeout);
                    resolve(fn(...args));
                }
                else {
                    resolve(null);
                }
                break;
            case "invoked":
                clearTimeout(timeout);
                status = "idle";
                resolve(fn(...args));
                break;
            case "cancelled":
                clearTimeout(timeout);
                status = "idle";
                resolve(null);
                break;
            default:
                if (timeout) {
                    clearTimeout(timeout);
                }
                status = "pending";
                timeout = setTimeout(() => {
                    status = "idle";
                    return resolve(fn(...args));
                }, delay);
                break;
        }
    });
    debounced.flush = flush;
    debounced.invoke = invoke;
    debounced.cancel = cancel;
    debounced.getStatus = getStatus;
    return debounced;
};
/**
 * Call a function only after n milliseconds have elapsed
 * @param fn    - function to call
 * @param delay - delay in milliseconds
 */
const throttle = (fn, delay) => {
    let timeout;
    return (...args) => new Promise((resolve) => {
        if (timeout) {
            return;
        }
        timeout = setTimeout(() => {
            clearTimeout(timeout);
            timeout = undefined;
            resolve(fn(...args));
        }, delay);
    });
};
function escapeRegExp(str) {
    return str.replace(/[.*+?^${}()|[\]\\]/g, "\\$&"); // $& means the whole matched string
}
function isDefined(value) {
    return value !== undefined && value !== null;
}
/**
 * Set a minimum time for a promise to resolve (useful for preventing flash of loaders)
 */
async function minDelay(promise, minDelay) {
    await Promise.all([promise, timeout(minDelay)]);
    return promise;
}
/**
 * Helper method to inline setTimeout as an await in async functions
 */
function timeout(ms) {
    return new Promise((resolve) => setTimeout(resolve, ms));
}
const arrayToLookupMap = (dataArr, getKeyAndItem) => Object.fromEntries((dataArr || []).map((item) => {
    const { key, data } = getKeyAndItem(item);
    return [key, data];
}));
/**
 * Check whether two arrays have the same number of elements
 * and whether they contain the same elements
 * regardless of order
 */
const arraysAreEquivalent = (arr1, arr2) => arr1.length === arr2.length && arr1.reduce((memo, str) => memo && arr2.indexOf(str) > -1, true);
function uniqueBy(myArr, getItemId) {
    const resultArr = [];
    const lookupMap = {};
    myArr.forEach((item) => {
        const id = getItemId(item);
        if (lookupMap[id] == null) {
            lookupMap[id] = item;
            resultArr.push(item);
        }
    });
    return resultArr;
}
function unique(myArr) {
    const primitives = { boolean: {}, number: {}, string: {} };
    const objs = [];
    return myArr.filter((item) => {
        let type = typeof item;
        if (type in primitives) {
            return primitives[type].hasOwnProperty(item) ? false : (primitives[type][item] = true);
        }
        else {
            return objs.indexOf(item) >= 0 ? false : objs.push(item);
        }
    });
}
const chunk = (arr, size) => [...Array(Math.ceil(arr.length / size))].map((_, i) => arr.slice(size * i, size + size * i));



//# sourceMappingURL=functional-44de8fcf.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/popover-721f7ba2.js":
/*!*************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/popover-721f7ba2.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   i: () => (/* binding */ isInsideInfoPopoverNode)
/* harmony export */ });
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */
function isInsideInfoPopoverNode(node) {
    if ((node === null || node === void 0 ? void 0 : node.tagName) === "ARCGIS-SMART-MAPPING-INFO-POPOVER") {
        return true;
    }
    else {
        let parentNode = node === null || node === void 0 ? void 0 : node.parentElement;
        while (parentNode) {
            if (parentNode.tagName === "ARCGIS-SMART-MAPPING-INFO-POPOVER") {
                return true;
            }
            else {
                parentNode = parentNode.parentElement;
            }
        }
    }
    return false;
}



//# sourceMappingURL=popover-721f7ba2.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,