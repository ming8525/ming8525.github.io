"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_arcgis-d99497"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-symbol-styler.entry.js":
/*!***********************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-symbol-styler.entry.js ***!
  \***********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   arcgis_symbol_styler: () => (/* binding */ ArcGISSymbolStyler)
/* harmony export */ });
/* harmony import */ var _index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-e3bf7da7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-e3bf7da7.js");
/* harmony import */ var _colorRampUtils_8d9a3bed_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./colorRampUtils-8d9a3bed.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/colorRampUtils-8d9a3bed.js");
/* harmony import */ var _symbolUtils_f207d979_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./symbolUtils-f207d979.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/symbolUtils-f207d979.js");
/* harmony import */ var _color_16791b45_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./color-16791b45.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/color-16791b45.js");
/* harmony import */ var _functional_44de8fcf_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./functional-44de8fcf.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-44de8fcf.js");
/* harmony import */ var _locale_050b6db9_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./locale-050b6db9.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-050b6db9.js");
/* harmony import */ var _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./languageUtil-ef0e54b2.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-ef0e54b2.js");
/* harmony import */ var _loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./loadModules-b4ac1247.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-b4ac1247.js");
/* harmony import */ var _dom_4d367677_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./dom-4d367677.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-4d367677.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */










function equal(rampStops1, rampStops2, matchAlpha = false, reverse = true) {
    if (!rampStops1 || !rampStops2) {
        return false;
    }
    const equalMatch = rampStops1.every((color1, index) => {
        const color2 = rampStops2[index];
        return (color1.r === color2.r && color1.g === color2.g && color1.b === color2.b && (!matchAlpha || color1.a === color2.a));
    });
    if (!reverse) {
        return equalMatch;
    }
    return equalMatch || equal(rampStops1.slice().reverse(), rampStops2, matchAlpha, false);
}

function cimSymbolWalker(symbol, onVisit) {
    return visit(symbol, onVisit);
}
function visit(node, onVisit) {
    if (Array.isArray(node)) {
        for (let i = 0; i < node.length; i++) {
            const child = node[i];
            const result = visit(child, onVisit);
            if (result !== undefined) {
                return result;
            }
        }
        return;
    }
    const result = onVisit(node);
    if (result !== undefined) {
        return result;
    }
    if (node.type === "cim") {
        return visit(node.data.symbol, onVisit);
    }
    if (node.type === "CIMSymbolReference" || node.type === "CIMMarkerGraphic") {
        return visit(node.symbol, onVisit);
    }
    if (node.type === "CIMPointSymbol" || node.type === "CIMPolygonSymbol" || node.type === "CIMLineSymbol") {
        return visit(node.symbolLayers, onVisit);
    }
    if (node.type === "CIMHatchFill") {
        return visit(node.lineSymbol, onVisit);
    }
    if (node.type === "CIMVectorMarker") {
        return visit(node.markerGraphics, onVisit);
    }
    if (node.type === "CIMPictureMarker" ||
        node.type === "CIMTextSymbol" ||
        node.type === "CIMGradientFill" ||
        node.type === "CIMGradientStroke" ||
        node.type === "CIMObjectMarker3D" ||
        node.type === "CIMCharacterMarker" ||
        node.type === "CIMMaterialSymbolLayer" ||
        node.type === "CIMPictureStroke" ||
        node.type === "CIMPictureFill" ||
        node.type === "CIMSolidFill" ||
        node.type === "CIMSolidStroke") {
        /* end of the line â€“ intentional no-op */
        return;
    }
}
function updateSymbolLayerColor(symbolLayer, color, context) {
    const colorJSON = color.toJSON();
    cimSymbolWalker(symbolLayer, (node) => {
        if (context === "fill") {
            if (node.type === "CIMSolidFill") {
                node.color = colorJSON;
            }
            if (node.type === "CIMPictureFill" || node.type === "CIMPictureMarker") {
                node.tintColor = colorJSON;
            }
        }
        if (context === "stroke") {
            if (node.type === "CIMSolidStroke") {
                node.color = colorJSON;
            }
            if (node.type === "CIMPictureStroke") {
                node.tintColor = colorJSON;
            }
        }
    });
}
function getChildSymbolLayerColorContext(symbolLayer) {
    const observedTypes = new Set();
    observedTypes.add(cimSymbolWalker(symbolLayer, (node) => {
        if (node.type === "CIMSolidFill" ||
            node.type === "CIMHatchFill" ||
            node.type === "CIMPictureFill" ||
            node.type === "CIMPictureMarker") {
            return "fill";
        }
    }));
    observedTypes.add(cimSymbolWalker(symbolLayer, (node) => {
        if (node.type === "CIMSolidStroke" || node.type === "CIMPictureStroke") {
            return "stroke";
        }
    }));
    return Array.from(observedTypes).filter(Boolean);
}
function getVectorMarkerColor(vectorMarkerSymbolLayer, context) {
    const colorJSON = cimSymbolWalker(vectorMarkerSymbolLayer, (node) => {
        if (context === "fill") {
            if (node.type === "CIMSolidFill") {
                return node.color;
            }
            if (node.type === "CIMPictureFill" || node.type === "CIMPictureMarker") {
                return node.tintColor;
            }
        }
        if (context === "stroke") {
            if (node.type === "CIMSolidStroke") {
                return node.color;
            }
            if (node.type === "CIMPictureStroke") {
                return node.tintColor;
            }
        }
    });
    return _symbolUtils_f207d979_js__WEBPACK_IMPORTED_MODULE_2__.e.Color.fromJSON(colorJSON);
}
function getVectorMarkerSize(vectorMarkerSymbolLayer, context) {
    let size = 0;
    cimSymbolWalker(vectorMarkerSymbolLayer, (node) => {
        if (context === "fill") {
            if (node.type === "CIMVectorMarker" || node.type === "CIMPictureMarker") {
                if (node.size > size) {
                    size = node.size;
                }
            }
        }
        if (context === "stroke") {
            if (node.type === "CIMSolidStroke" || node.type === "CIMPictureStroke") {
                if (node.width > size) {
                    size = node.width;
                }
            }
        }
    });
    return size;
}
function updateSymbolLayerSize(symbolLayer, size, context) {
    cimSymbolWalker(symbolLayer, (node) => {
        if (context === "fill") {
            if (node.type === "CIMVectorMarker" || node.type === "CIMPictureMarker") {
                node.size = size;
            }
        }
        if (context === "stroke") {
            if (node.type === "CIMSolidStroke" || node.type === "CIMPictureStroke") {
                node.width = size;
            }
        }
    });
}
function getCIMStrokeWidthBounds() {
    // width should always use minWidthInPx/maxWidthInPx
    // except for CIMPictureStroke there we treat them as marker sizes with sizeMin/sizeMax
    return { min: _colorRampUtils_8d9a3bed_js__WEBPACK_IMPORTED_MODULE_1__.m, max: _colorRampUtils_8d9a3bed_js__WEBPACK_IMPORTED_MODULE_1__.a };
}
function validateEditable(symbol) {
    if (!symbol) {
        return "missing symbol to edit";
    }
    if (symbol.type === "text" || symbol.type === "picture-fill") {
        return `editing symbol of type ${symbol.type} is not supported`;
    }
}
function adjustTransparencyIfNeeded(previous, next) {
    if (previous.a === 0) {
        next.a = 1;
    }
    return next;
}
function supportsFill(symbol) {
    return (((0,_symbolUtils_f207d979_js__WEBPACK_IMPORTED_MODULE_2__.i)(symbol) && (isMVCompatible(symbol) || isFillOnlyCIM(symbol))) ||
        ((0,_symbolUtils_f207d979_js__WEBPACK_IMPORTED_MODULE_2__.a)(symbol) && !isLineOnlySymbol(symbol)) ||
        (0,_symbolUtils_f207d979_js__WEBPACK_IMPORTED_MODULE_2__.b)(symbol));
}
function supportsStroke(symbol) {
    return (((0,_symbolUtils_f207d979_js__WEBPACK_IMPORTED_MODULE_2__.i)(symbol) && isMVCompatible(symbol)) || (0,_symbolUtils_f207d979_js__WEBPACK_IMPORTED_MODULE_2__.a)(symbol) || (0,_symbolUtils_f207d979_js__WEBPACK_IMPORTED_MODULE_2__.c)(symbol) || (0,_symbolUtils_f207d979_js__WEBPACK_IMPORTED_MODULE_2__.b)(symbol));
}
function isLineOnlySymbol(symbol) {
    return !!((symbol === null || symbol === void 0 ? void 0 : symbol.type) === "simple-marker" && (symbol.style === "x" || symbol.style === "cross"));
}
function normalizeSizeProp(payloadWithSizeProp, newSize = payloadWithSizeProp.size) {
    return Object.assign(Object.assign({}, payloadWithSizeProp), { size: normalizePt(_symbolUtils_f207d979_js__WEBPACK_IMPORTED_MODULE_2__.e.screenUtils.px2pt(newSize)) });
}
function normalizePxOrPt(pxOrPt) {
    const fractionDigits = Number.isInteger(pxOrPt) ? 0 : 2;
    return Number(pxOrPt.toFixed(fractionDigits));
}
function normalizePx(pxOrPt) {
    const fractionDigits = Number.isInteger(pxOrPt) ? 0 : 2;
    return Number(pxOrPt.toFixed(fractionDigits));
}
function normalizePt(pxOrPt) {
    const fractionDigits = Number.isInteger(pxOrPt) ? 0 : 3;
    return Number(pxOrPt.toFixed(fractionDigits));
}
function parseSize(size, fallback) {
    return !isNaN(size) ? normalizePxOrPt(_symbolUtils_f207d979_js__WEBPACK_IMPORTED_MODULE_2__.e.screenUtils.pt2px(size)) : fallback;
}
function getSymbolRotation(symbol) {
    var _a;
    if (!symbol || symbol.type === "simple-line" || symbol.type === "simple-fill") {
        return 0;
    }
    return (0,_symbolUtils_f207d979_js__WEBPACK_IMPORTED_MODULE_2__.i)(symbol) ? _symbolUtils_f207d979_js__WEBPACK_IMPORTED_MODULE_2__.e.cimSymbolUtils.getCIMSymbolRotation(symbol, true) : (_a = symbol.angle) !== null && _a !== void 0 ? _a : 0;
}
function isCIMTextSymbol(symbol) {
    return symbol.type === "CIMTextSymbol";
}
function isMVCompatible(symbol) {
    if (isCIMTextSymbol(symbol.data.symbol)) {
        return false;
    }
    const { symbolLayers } = symbol.data.symbol;
    if (symbolLayers.length === 1) {
        const [first] = symbolLayers;
        if (first.type !== "CIMVectorMarker" || first.colorLocked) {
            return false;
        }
        const { markerGraphics } = first;
        return (markerGraphics.length === 1 &&
            !isCIMTextSymbol(markerGraphics[0].symbol) &&
            hasUnlockedFillAndStroke(markerGraphics[0].symbol.symbolLayers));
    }
    if (symbolLayers.length === 2) {
        const [first, second] = symbolLayers;
        if (first.type !== "CIMVectorMarker" ||
            second.type !== "CIMVectorMarker" ||
            first.colorLocked ||
            first.size > second.size) {
            return false;
        }
        const firstMarkerGraphics = first.markerGraphics;
        const secondMarkerGraphics = second.markerGraphics;
        if (firstMarkerGraphics.length !== 1 || secondMarkerGraphics.length !== 1) {
            return false;
        }
        const [{ symbol: firstMarkerGraphicSymbol }] = firstMarkerGraphics;
        const [{ symbol: secondMarkerGraphicSymbol }] = secondMarkerGraphics;
        return (firstMarkerGraphicSymbol &&
            secondMarkerGraphicSymbol &&
            !isCIMTextSymbol(firstMarkerGraphicSymbol) &&
            !isCIMTextSymbol(secondMarkerGraphicSymbol) &&
            hasUnlockedFillAndStroke(firstMarkerGraphicSymbol.symbolLayers) &&
            hasFillAndStroke(secondMarkerGraphicSymbol.symbolLayers));
    }
    return false;
}
function isFillOnlyCIM(symbol) {
    return !!_symbolUtils_f207d979_js__WEBPACK_IMPORTED_MODULE_2__.e.cimSymbolUtils.getCIMSymbolColor(symbol);
}
function hasUnlockedFillAndStroke(symbolLayers) {
    return hasUnlockedFill(symbolLayers) && hasStroke(symbolLayers);
}
function hasFillAndStroke(symbolLayers) {
    return hasFill(symbolLayers) && hasStroke(symbolLayers);
}
function hasFill(symbolLayers) {
    return !!(symbolLayers === null || symbolLayers === void 0 ? void 0 : symbolLayers.find(({ type }) => type === "CIMSolidFill"));
}
function hasUnlockedFill(symbolLayers) {
    return !!getUnlockedFill(symbolLayers);
}
function getUnlockedFill(symbolLayers) {
    return symbolLayers === null || symbolLayers === void 0 ? void 0 : symbolLayers.find(({ type, colorLocked }) => type === "CIMSolidFill" && !colorLocked);
}
function hasStroke(symbolLayers) {
    return !!getStroke(symbolLayers);
}
function getStroke(symbolLayers) {
    return symbolLayers === null || symbolLayers === void 0 ? void 0 : symbolLayers.find(({ type }) => type === "CIMSolidStroke");
}
function supportsOutlineWidth(symbol) {
    var _a;
    // CIM must have a stroke
    const hasStroke = (_a = symbol.data.symbol.symbolLayers) === null || _a === void 0 ? void 0 : _a.find(({ type }) => ["CIMSolidStroke", "CIMPictureStroke"].indexOf(type) > -1);
    return !!hasStroke;
}
function getOutlineWidth(symbol) {
    var _a, _b;
    // just take first stroke
    const stroke = (_a = symbol.data.symbol.symbolLayers) === null || _a === void 0 ? void 0 : _a.find((symbolLayer) => ["CIMSolidStroke", "CIMPictureStroke"].indexOf(symbolLayer.type) > -1);
    return (_b = stroke.width) !== null && _b !== void 0 ? _b : 0;
}
function setOutlineWidth(symbol, width) {
    var _a;
    // don't use scaleCIMSymbolTo() because it also scales markers, separation, ... of the CIM
    // apply width to all strokes inside the CIM
    (_a = symbol.data.symbol.symbolLayers) === null || _a === void 0 ? void 0 : _a.forEach((symbolLayer) => {
        if (["CIMSolidStroke", "CIMPictureStroke"].indexOf(symbolLayer.type) > -1) {
            symbolLayer.width = width;
        }
    });
}
function isArrowMarker(marker) {
    return _colorRampUtils_8d9a3bed_js__WEBPACK_IMPORTED_MODULE_1__.s.includes(marker === null || marker === void 0 ? void 0 : marker.placement) && (marker === null || marker === void 0 ? void 0 : marker.style) === "arrow";
}
function toArrowPlacement(marker) {
    if (!marker) {
        return "none";
    }
    return isArrowMarker(marker) ? marker.placement : "none";
}
function toArrowMarker(placement) {
    if (placement === "none") {
        return undefined;
    }
    return {
        style: "arrow",
        placement
    };
}
function getStateColorRamps(section, strokeOrFillProps) {
    if (section && strokeOrFillProps && has2DColorRamp(section)) {
        const rotationsToMatch = getRotationsToMatchSelected(strokeOrFillProps.color, section.colorRamps);
        if (rotationsToMatch > 0) {
            return section.colorRamps.map((ramp) => {
                const rampClone = Object.assign({}, ramp);
                for (let i = 0; i < rotationsToMatch; i++) {
                    rampClone.stops = (0,_colorRampUtils_8d9a3bed_js__WEBPACK_IMPORTED_MODULE_1__.f)(rampClone.stops, true);
                }
                return rampClone;
            });
        }
    }
    return section === null || section === void 0 ? void 0 : section.colorRamps;
}
function has2DColorRamp(section) {
    return (section === null || section === void 0 ? void 0 : section.type) === "color-ramp" && section.style === "2d";
}
function getRotationsToMatchSelected(selected, colorRamps) {
    const options = colorRamps.map((ramp) => ramp.stops);
    const maxRotations = 4;
    let selectedClone = selected.map((color) => color.clone());
    let totalRotationsOnSelected = 0;
    let matched = false;
    for (let i = 0; i < maxRotations; i++) {
        const match = options.some((option) => equal(selectedClone, option, true, false));
        if (match) {
            matched = true;
            break;
        }
        selectedClone = (0,_colorRampUtils_8d9a3bed_js__WEBPACK_IMPORTED_MODULE_1__.f)(selectedClone, true);
        totalRotationsOnSelected++;
    }
    return matched ? (maxRotations - totalRotationsOnSelected) % maxRotations : null;
}
function capitalize(text) {
    return text.charAt(0).toUpperCase() + text.slice(1);
}
function getSymbolLabel(symbol, strings) {
    if (!symbol) {
        return null;
    }
    if (symbol.type === "picture-marker" || symbol.type === "simple-marker") {
        return strings.basicPoint;
    }
    if (symbol.type === "simple-line") {
        return strings.basicLine;
    }
    if (symbol.type === "simple-fill") {
        return strings.basicPolygon;
    }
    if (symbol.data.symbol.type === "CIMPointSymbol") {
        return strings.vectorPoint;
    }
    if (symbol.data.symbol.type === "CIMLineSymbol") {
        return strings.vectorLine;
    }
    if (symbol.data.symbol.type === "CIMPolygonSymbol") {
        return strings.vectorPolygon;
    }
    throw new Error("unsupported symbol provided");
}

const SelectCSS = {
    base: "select-number",
    input: "select-number__input"
};
const stepperClickHandlerForProperFocus = (event) => {
    // workaround for calcite-label wrapped SelectNumber focus bug
    event.stopPropagation();
};
const SelectNumber = (props) => {
    const { disabled, flipLabels = false, min, max, step, unitsLabel, value, withSteppers = true, label } = props;
    return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: SelectCSS.base },
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-slider", { disabled: disabled, min: min, max: max, value: value, step: step, onCalciteSliderInput: (event) => applyValueOnChange(event.target, props) }),
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-input", { class: SelectCSS.input, disabled: disabled, max: max, min: min, numberButtonType: withSteppers ? "vertical" : "none", prefixText: flipLabels ? unitsLabel : "", onCalciteInputInput: (event) => applyValueOnChange(event.target, props), onClick: stepperClickHandlerForProperFocus, scale: "s", step: "any", suffixText: flipLabels ? "" : unitsLabel, type: "number", value: value.toString(), label: label })));
};
const applyValueOnChange = (0,_functional_44de8fcf_js__WEBPACK_IMPORTED_MODULE_4__.d)((node, props) => {
    debouncedApplyValueOnChange(node, props);
}, 800);
function debouncedApplyValueOnChange(node, props) {
    const value = Number(node.value);
    const clamped = Math.min(props.max, Math.max(props.min, value));
    if (value === props.value) {
        return;
    }
    node.value = `${clamped}`; // ensure value is within allowed range
    props.onValueChange(clamped);
}

const arcgisSymbolStylerCss = ".select-number{display:flex;align-items:center;justify-content:space-between;position:relative}.select-number calcite-slider{width:50%}.select-number__input{width:45%;font-size:var(--arcgis-app-font-size-0);font-family:var(--arcgis-app-font-family)}button{overflow:hidden;background-color:var(--arcgis-symbol-styler-inline-input-trigger-background-color);align-items:center;border:none;border-radius:0;box-sizing:border-box;cursor:pointer;display:flex;font-family:inherit;gap:8px;height:100%;justify-content:center;outline-color:transparent;outline-offset:0;padding:3px 0;padding-inline:3px 8px;position:relative;text-decoration:none;-webkit-user-select:none;-moz-user-select:none;user-select:none;text-align:center;-webkit-appearance:none;width:100%}button:focus{outline:2px solid var(--calcite-color-brand);outline-offset:2px}button:hover{text-decoration:none}:host{min-width:240px;height:-moz-min-content;height:min-content;display:flex;flex:1 1 auto;flex-flow:column nowrap;align-items:stretch}calcite-dropdown{width:100%}calcite-flow{height:100%}.color-locked-info{display:flex;gap:4px;margin:8px 0;align-items:center}.color-locked-info calcite-icon{color:var(--calcite-color-text-3)}.icon-dropdown{padding:0.25rem 0 0 0;width:100%;background-color:var(--arcgis-app-background);height:2.25rem;border:1px solid #a9a9a9;box-shadow:inset 0 1px 2px rgba(0, 0, 0, 0.075)}.icon-dropdown--selected{cursor:pointer;margin-left:12px;height:3px;width:100%}.icon-dropdown .icon-dropdown-item-content,.icon-dropdown--selected{background-position:center;background-clip:content-box;background-origin:content-box;padding-left:0;padding-right:0}.icon-dropdown .icon-dropdown-item-content{height:30px;width:200px}.arcgis--rtl .icon-dropdown--selected{margin-right:12px}.style-dropdown [slot=trigger]{width:100%;display:flex;justify-content:space-between;align-items:center}.style-dropdown [slot=trigger] calcite-icon{margin:8px;background-color:#fff}.style-dropdown [slot=trigger],.style-dropdown .icon-dropdown-item-content{background-repeat:repeat-x}.arrow-dropdown [slot=trigger]{width:100%;display:flex;justify-content:space-between;align-items:center}.arrow-dropdown [slot=trigger] .icon-dropdown--selected{height:30px;background-size:100% 119px}.arrow-dropdown [slot=trigger] calcite-icon{margin:8px;background-color:#fff}.arrow-dropdown [slot=trigger] .icon-dropdown--selected,.arrow-dropdown .icon-dropdown-item-content{background-repeat:no-repeat}.arrow-dropdown [slot=trigger] .icon-dropdown--selected[data-arrow=none],.arrow-dropdown .icon-dropdown-item-content[data-arrow=none]{background-position:0 0}.arrow-dropdown [slot=trigger] .icon-dropdown--selected[data-arrow=begin],.arrow-dropdown .icon-dropdown-item-content[data-arrow=begin]{background-position:0 -32px}.arrow-dropdown [slot=trigger] .icon-dropdown--selected[data-arrow=end],.arrow-dropdown .icon-dropdown-item-content[data-arrow=end]{background-position:0 -61px}.arrow-dropdown [slot=trigger] .icon-dropdown--selected[data-arrow=begin-end],.arrow-dropdown .icon-dropdown-item-content[data-arrow=begin-end]{background-position:0 -91px}.content-group{display:flex;flex-direction:column}.content-group label{margin:8px 0 0 0}.color-ramp-selection{padding:4px}.section-toggle--disabled{pointer-events:none;opacity:0.5}.swatch-item{box-sizing:border-box;height:16px;width:16px;border-radius:2px;box-shadow:0 0 0 1px rgba(0, 0, 0, 0.33)}calcite-input[disabled] [data-adjustment]{pointer-events:none}arcgis-symbol-styler-section calcite-block{overflow:visible;margin:0 -12px}arcgis-symbol-styler-section calcite-block[open]:before{content:\"\";height:16px;display:flex;background-color:var(--calcite-color-foreground-2)}arcgis-symbol-styler-section calcite-block:nth-of-type(n+1){border-bottom:1px solid #f0f0f0}arcgis-symbol-styler-section calcite-block:last-child{border-bottom:none}arcgis-symbol-styler-section calcite-block arcgis-symbol-styler-section:nth-of-type(2){margin-top:12px}calcite-panel{overflow:visible;margin-top:0}.input-color{flex-wrap:nowrap;gap:8px;align-items:center}calcite-tooltip{max-width:250px}calcite-tooltip:not([open]){visibility:hidden;pointer-events:none}.message{margin-top:8px}arcgis-symbol-styler-symbol-preview[slot=icon]{width:32px;height:32px;padding:2px;display:flex;align-items:center;justify-content:center}.container{display:flex;padding:8px 12px;align-items:center;justify-content:center;width:100%;gap:8px;flex-grow:1}.symbol{height:32px;display:flex;justify-content:center;align-items:center}.label{flex-grow:1;display:flex;justify-content:flex-start}.change-symbol-trigger{border:1px solid #949494}.symbol-selection-panel{min-height:min(100vh - 200px, 500px);display:flex;flex-direction:column}.symbol-selection-panel arcgis-item-palette .palette{gap:8px}.symbol-selection-panel calcite-notice:first-of-type{margin:auto 0 0 0}.symbol-selection-panel calcite-label{margin:16px 12px 0 12px}.symbol-selection-panel calcite-panel{overflow:visible}.section{display:flex;flex-direction:column;background-color:var(--arcgis-app-background)}";

const ArcGISSymbolStyler = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisSymbolStylerEdit = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSymbolStylerEdit", 7);
        this.arcgisSymbolStylerMarkerChange = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSymbolStylerMarkerChange", 7);
        this.arcgisSymbolStylerFillChange = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSymbolStylerFillChange", 7);
        this.arcgisSymbolStylerFillEnabledChange = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSymbolStylerFillEnabledChange", 7);
        this.arcgisSymbolStylerStrokeChange = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSymbolStylerStrokeChange", 7);
        this.arcgisSymbolStylerStrokeEnabledChange = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSymbolStylerStrokeEnabledChange", 7);
        this.arcgisSymbolStylerSourceIdChange = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSymbolStylerSourceIdChange", 7);
        this.resizeObserver = new ResizeObserver((entries) => {
            const last = entries.pop();
            this.narrow = last.contentRect.width <= 275;
        });
        this.windowResizeObserver = new ResizeObserver(() => this.checkPopoverMaxHeight());
        this.autoOpenFirstBlock = false;
        this.autoCalcHeight = false;
        this.colorInputEl = [];
        this.manualBlockOpen = false;
        this.updatePreviewSymbol = (0,_functional_44de8fcf_js__WEBPACK_IMPORTED_MODULE_4__.c)(() => {
            const preview = this.symbol.clone();
            this.syncSymbolProps(preview, {
                symbolState: {
                    marker: this.marker,
                    fill: this.fill,
                    stroke: this.stroke
                }
            });
            this.previewSymbol = preview;
        }, 150);
        //--------------------------------------------------------------------------
        //
        //  Private Methods
        //
        //--------------------------------------------------------------------------
        this.setRampInputRef = (el) => {
            this.rampInputEl = el;
        };
        this.setColorInputRef = (el) => {
            this.colorInputEl.push(el);
        };
        this.onColorRampFillTransparencyChange = (strokeTransparency) => {
            const alpha = (0,_color_16791b45_js__WEBPACK_IMPORTED_MODULE_3__.t)(strokeTransparency);
            const fill = this.fill;
            const mergedFill = {
                color: fill.color.map((color) => (0,_color_16791b45_js__WEBPACK_IMPORTED_MODULE_3__.c)(Object.assign(Object.assign({}, color), { a: alpha })))
            };
            this.fill = mergedFill;
            this.arcgisSymbolStylerFillChange.emit(mergedFill);
            this.setInternalSymbol(this.syncSymbolProps(this.symbol, { cimChangeContext: "root" }), true);
        };
        this.onFillColorRampCategoryChange = (event) => {
            const select = event.target;
            const activeCategory = select.selectedOption.value;
            const section = this.sections.fill;
            this.sections = Object.assign(Object.assign({}, this.sections), { fill: Object.assign(Object.assign({}, section), { activeCategory }) });
            event.stopPropagation();
        };
        this.onColorFillTransparencyChange = (strokeTransparency) => {
            const alpha = (0,_color_16791b45_js__WEBPACK_IMPORTED_MODULE_3__.t)(strokeTransparency);
            const { fill } = this;
            const mergedFill = {
                color: (0,_color_16791b45_js__WEBPACK_IMPORTED_MODULE_3__.c)(Object.assign(Object.assign({}, fill.color), { a: alpha }))
            };
            this.fill = mergedFill;
            this.arcgisSymbolStylerFillChange.emit(mergedFill);
            this.setInternalSymbol(this.syncSymbolProps(this.symbol), true);
        };
        this.onStrokeColorRampCategoryChange = (event) => {
            const select = event.target;
            const activeCategory = select.selectedOption.value;
            const section = this.sections.stroke;
            this.sections = Object.assign(Object.assign({}, this.sections), { stroke: Object.assign(Object.assign({}, section), { activeCategory }) });
            event.stopPropagation();
        };
        this.onColorStrokeTransparencyChange = (strokeTransparency) => {
            const { stroke } = this;
            const alpha = (0,_color_16791b45_js__WEBPACK_IMPORTED_MODULE_3__.t)(strokeTransparency);
            const mergedStroke = Object.assign(Object.assign({}, stroke), { color: (0,_color_16791b45_js__WEBPACK_IMPORTED_MODULE_3__.c)(Object.assign(Object.assign({}, stroke.color), { a: alpha })) });
            this.stroke = mergedStroke;
            this.arcgisSymbolStylerStrokeChange.emit(normalizeSizeProp(mergedStroke));
            this.setInternalSymbol(this.syncSymbolProps(this.symbol), true);
        };
        this.onColorRampStrokeTransparencyChange = (strokeTransparency) => {
            const alpha = (0,_color_16791b45_js__WEBPACK_IMPORTED_MODULE_3__.t)(strokeTransparency);
            const stroke = this.stroke;
            const mergedStroke = Object.assign(Object.assign({}, stroke), { color: stroke.color.map((color) => (0,_color_16791b45_js__WEBPACK_IMPORTED_MODULE_3__.c)(Object.assign(Object.assign({}, color), { a: alpha }))) });
            this.stroke = mergedStroke;
            this.arcgisSymbolStylerStrokeChange.emit(normalizeSizeProp(mergedStroke));
            this.setInternalSymbol(this.syncSymbolProps(this.symbol, { cimChangeContext: "root" }), true);
        };
        this.onStrokeStyleChange = (event) => {
            const dropdown = event.currentTarget;
            const style = dropdown.selectedItems[0].getAttribute("data-style");
            const { stroke } = this;
            const mergedStroke = Object.assign(Object.assign({}, stroke), { style });
            this.stroke = mergedStroke;
            this.arcgisSymbolStylerStrokeChange.emit(normalizeSizeProp(mergedStroke));
            this.setInternalSymbol(this.syncSymbolProps(this.symbol), true);
            event.stopPropagation();
        };
        this.onStrokeArrowChange = (event) => {
            const dropdown = event.currentTarget;
            const arrow = dropdown.selectedItems[0].getAttribute("data-arrow");
            const { stroke } = this;
            const mergedStroke = Object.assign(Object.assign({}, stroke), { marker: toArrowMarker(arrow) });
            this.stroke = mergedStroke;
            this.arcgisSymbolStylerStrokeChange.emit(normalizeSizeProp(mergedStroke));
            this.setInternalSymbol(this.syncSymbolProps(this.symbol), true);
            event.stopPropagation();
        };
        this.onStrokeWidthChange = (width) => this.setStrokeWidth(width);
        this.onAutoAdjustStrokeChange = (event) => {
            const node = event.currentTarget;
            const autoAdjusted = node.checked;
            const { stroke } = this;
            const mergedStroke = Object.assign(Object.assign({}, stroke), { autoAdjusted });
            this.stroke = mergedStroke;
            this.arcgisSymbolStylerStrokeChange.emit(normalizeSizeProp(mergedStroke));
            // we set to emit the auto-adjusted changes regardless of the symbol not changing
            this.emitEdit(this.symbol);
            event.stopPropagation();
        };
        this.syncSymbolProps = (symbol, options) => {
            const symbolState = (options === null || options === void 0 ? void 0 : options.symbolState) || {
                marker: this.marker,
                fill: this.fill,
                stroke: this.stroke
            };
            const cimChangeContext = options === null || options === void 0 ? void 0 : options.cimChangeContext;
            const type = (0,_symbolUtils_f207d979_js__WEBPACK_IMPORTED_MODULE_2__.g)(symbol);
            return type === "point"
                ? this.syncPointSymbolProps(symbol, symbolState, cimChangeContext)
                : type === "line"
                    ? this.syncLineSymbolProps(symbol, symbolState, cimChangeContext)
                    : this.syncPolygonSymbolProps(symbol, symbolState, cimChangeContext);
        };
        this.syncPointSymbolProps = (symbol, { fill, marker, stroke }, cimChangeContext) => {
            const { screenUtils } = _symbolUtils_f207d979_js__WEBPACK_IMPORTED_MODULE_2__.e;
            const { sections } = this;
            const size = normalizePt(screenUtils.px2pt(marker.size));
            if ((0,_symbolUtils_f207d979_js__WEBPACK_IMPORTED_MODULE_2__.a)(symbol)) {
                const lineOnlySymbol = isLineOnlySymbol(symbol);
                if (!lineOnlySymbol) {
                    if (this.isFillColorRamp()) {
                        symbol.color = this.getSampleFillColorRampColor();
                    }
                    else {
                        symbol.color = sections.fill.enabled ? fill.color : (0,_color_16791b45_js__WEBPACK_IMPORTED_MODULE_3__.c)(null);
                    }
                }
                if (symbol.outline) {
                    if (this.isStrokeColorRamp()) {
                        symbol.outline.color = this.getSampleStrokeColorRampColor();
                    }
                    else if (lineOnlySymbol && this.isFillColorRamp()) {
                        symbol.outline.color = this.getSampleFillColorRampColor();
                    }
                    else {
                        symbol.outline.color = sections.stroke.enabled
                            ? stroke.color
                            : (0,_color_16791b45_js__WEBPACK_IMPORTED_MODULE_3__.c)(null);
                    }
                    symbol.outline.marker = stroke.marker;
                    symbol.outline.style = stroke.style;
                    symbol.outline.width = normalizePt(screenUtils.px2pt(stroke.size));
                }
                symbol.size = size;
            }
            else if ((0,_symbolUtils_f207d979_js__WEBPACK_IMPORTED_MODULE_2__.d)(symbol)) {
                // keep aspect ratio
                symbol.height = Math.round((symbol.height / symbol.width) * size * 100) / 100;
                symbol.width = size;
            }
            const clockwiseAngle = Math.abs(marker.angle);
            if ((0,_symbolUtils_f207d979_js__WEBPACK_IMPORTED_MODULE_2__.i)(symbol)) {
                // only top-level props are applied
                // when using the original symbol from a symbol set we want to keep these current settings
                if (["root", "original-root"].indexOf(cimChangeContext) > -1) {
                    _symbolUtils_f207d979_js__WEBPACK_IMPORTED_MODULE_2__.e.cimSymbolUtils.applyCIMSymbolRotation(symbol, clockwiseAngle, true);
                    _symbolUtils_f207d979_js__WEBPACK_IMPORTED_MODULE_2__.e.cimSymbolUtils.scaleCIMSymbolTo(symbol, size);
                }
                else {
                    symbol.data.symbol.angle = clockwiseAngle;
                }
                if (this.isFillColorRamp()) {
                    _symbolUtils_f207d979_js__WEBPACK_IMPORTED_MODULE_2__.e.cimSymbolUtils.applyCIMSymbolColor(symbol, this.getSampleFillColorRampColor(), {
                        layersToColor: "fill"
                    });
                }
                else if (this.isStrokeColorRamp()) {
                    _symbolUtils_f207d979_js__WEBPACK_IMPORTED_MODULE_2__.e.cimSymbolUtils.applyCIMSymbolColor(symbol, this.getSampleStrokeColorRampColor(), { layersToColor: "outline" });
                }
            }
            else {
                symbol.angle = clockwiseAngle;
            }
            return symbol;
        };
        this.syncLineSymbolProps = (symbol, { stroke }, cimChangeContext) => {
            const { screenUtils } = _symbolUtils_f207d979_js__WEBPACK_IMPORTED_MODULE_2__.e;
            const { sections } = this;
            const width = normalizePt(screenUtils.px2pt(stroke.size));
            if ((0,_symbolUtils_f207d979_js__WEBPACK_IMPORTED_MODULE_2__.c)(symbol)) {
                if (this.isStrokeColorRamp()) {
                    symbol.color = this.getSampleStrokeColorRampColor();
                }
                else {
                    symbol.color = sections.stroke.enabled ? stroke.color : (0,_color_16791b45_js__WEBPACK_IMPORTED_MODULE_3__.c)(null);
                }
                // when using the original symbol from a symbol set we don't want to keep these settings
                if (cimChangeContext !== "original-root") {
                    symbol.marker = stroke.marker;
                    symbol.style = stroke.style;
                    symbol.width = width;
                }
            }
            else if ((0,_symbolUtils_f207d979_js__WEBPACK_IMPORTED_MODULE_2__.i)(symbol)) {
                // only top-level props are applied
                // when using the original symbol from a symbol set ("original-root") we don't want to keep these settings
                if (cimChangeContext === "root") {
                    _symbolUtils_f207d979_js__WEBPACK_IMPORTED_MODULE_2__.e.cimSymbolUtils.scaleCIMSymbolTo(symbol, width);
                }
                if (this.isStrokeColorRamp()) {
                    _symbolUtils_f207d979_js__WEBPACK_IMPORTED_MODULE_2__.e.cimSymbolUtils.applyCIMSymbolColor(symbol, this.getSampleStrokeColorRampColor());
                }
            }
            return symbol;
        };
        this.syncPolygonSymbolProps = (symbol, { fill, stroke }, cimChangeContext) => {
            const { screenUtils } = _symbolUtils_f207d979_js__WEBPACK_IMPORTED_MODULE_2__.e;
            const { sections } = this;
            const width = normalizePt(screenUtils.px2pt(stroke.size));
            if ((0,_symbolUtils_f207d979_js__WEBPACK_IMPORTED_MODULE_2__.b)(symbol)) {
                if (this.isFillColorRamp()) {
                    symbol.color = this.getSampleFillColorRampColor();
                }
                else {
                    symbol.color = sections.fill.enabled ? fill.color : (0,_color_16791b45_js__WEBPACK_IMPORTED_MODULE_3__.c)(null);
                }
                if (this.isStrokeColorRamp()) {
                    symbol.outline.color = this.getSampleStrokeColorRampColor();
                }
                else {
                    symbol.outline.color = sections.stroke.enabled
                        ? stroke.color
                        : (0,_color_16791b45_js__WEBPACK_IMPORTED_MODULE_3__.c)(null);
                }
                // when using the original symbol from a symbol set we don't want to keep these settings
                if (cimChangeContext !== "original-root") {
                    symbol.outline.width = width;
                    symbol.outline.style = stroke.style;
                }
            }
            else if ((0,_symbolUtils_f207d979_js__WEBPACK_IMPORTED_MODULE_2__.i)(symbol)) {
                // only top-level props are applied
                if (this.isFillColorRamp()) {
                    _symbolUtils_f207d979_js__WEBPACK_IMPORTED_MODULE_2__.e.cimSymbolUtils.applyCIMSymbolColor(symbol, this.getSampleFillColorRampColor(), {
                        layersToColor: "fill"
                    });
                }
                else if (this.isStrokeColorRamp()) {
                    _symbolUtils_f207d979_js__WEBPACK_IMPORTED_MODULE_2__.e.cimSymbolUtils.applyCIMSymbolColor(symbol, this.getSampleStrokeColorRampColor(), { layersToColor: "outline" });
                }
                // when using the original symbol from a symbol set ("original-root") we don't want to keep these settings
                if (cimChangeContext === "root") {
                    if ((0,_symbolUtils_f207d979_js__WEBPACK_IMPORTED_MODULE_2__.f)(symbol)) {
                        // scaleCIMSymbolTo() also scales markers, separators, ...
                        setOutlineWidth(symbol, width);
                    }
                    else {
                        _symbolUtils_f207d979_js__WEBPACK_IMPORTED_MODULE_2__.e.cimSymbolUtils.scaleCIMSymbolTo(symbol, width);
                    }
                }
            }
            return symbol;
        };
        this.onStrokeEnabledChange = (enabled) => {
            const { sections } = this;
            const preventChange = isLineOnlySymbol(this.activeSymbol);
            this.sections = Object.assign(Object.assign({}, sections), { stroke: Object.assign(Object.assign({}, sections.stroke), { enabled: preventChange ? true : enabled }) });
            if (preventChange) {
                return;
            }
            this.arcgisSymbolStylerStrokeEnabledChange.emit({
                enabled,
                stroke: normalizeSizeProp(this.stroke)
            });
            this.setInternalSymbol(this.syncSymbolProps(this.symbol), true);
        };
        this.onFillEnabledChange = (enabled) => {
            const { fill, sections } = this;
            const preventChange = isLineOnlySymbol(this.activeSymbol);
            this.sections = Object.assign(Object.assign({}, sections), { fill: Object.assign(Object.assign({}, sections.fill), { enabled: preventChange ? false : enabled }) });
            if (preventChange) {
                return;
            }
            this.arcgisSymbolStylerFillEnabledChange.emit({
                enabled,
                fill
            });
            this.setInternalSymbol(this.syncSymbolProps(this.symbol), true);
        };
        this.onAutoAdjustSizeChange = (event) => {
            const node = event.currentTarget;
            const autoAdjusted = node.checked;
            const { marker } = this;
            const mergedMarker = Object.assign(Object.assign({}, marker), { autoAdjusted });
            this.marker = mergedMarker;
            this.arcgisSymbolStylerMarkerChange.emit(normalizeSizeProp(mergedMarker));
            // we set to emit the auto-adjusted changes regardless of the symbol not changing
            this.emitEdit(this.symbol);
            event.stopPropagation();
        };
        this.onSymbolSizeChange = (size) => this.setSymbolSize(size);
        this.onSymbolRotationChange = (angle) => {
            const { marker, fill, stroke } = this;
            const mergedMarker = Object.assign(Object.assign({}, marker), { angle, symbol: this.syncSymbolProps(this.symbol, {
                    cimChangeContext: "root",
                    symbolState: {
                        marker: Object.assign(Object.assign({}, marker), { angle }),
                        fill: fill,
                        stroke: stroke
                    }
                }) });
            this.marker = mergedMarker;
            this.setInternalSymbol(mergedMarker.symbol, true);
            this.arcgisSymbolStylerMarkerChange.emit(normalizeSizeProp(mergedMarker));
        };
        this.onSymbolSelect = (symbol) => {
            var _a;
            const { fill, marker, sections, stroke } = this;
            const changedFromPMSToSMS = ((_a = this.activeSymbol) === null || _a === void 0 ? void 0 : _a.type) === "picture-marker" && symbol.type === "simple-marker";
            const hadLineOnlySymbol = isLineOnlySymbol(this.activeSymbol);
            const selectedLineOnlySymbol = isLineOnlySymbol(symbol);
            const changedFromLineOnlySMSToNonLineOnlySMS = hadLineOnlySymbol && !selectedLineOnlySymbol;
            const changedFromNonLineOnlySMSToLineOnlySMS = !hadLineOnlySymbol && selectedLineOnlySymbol;
            this.autoOpenFirstBlock = true;
            const fillSupported = supportsFill(symbol);
            const strokeSupported = supportsStroke(symbol);
            const fillStrokeOverrides = {};
            const switchedFromCIMToNonCIM = (0,_symbolUtils_f207d979_js__WEBPACK_IMPORTED_MODULE_2__.i)(this.activeSymbol) && !(0,_symbolUtils_f207d979_js__WEBPACK_IMPORTED_MODULE_2__.i)(symbol);
            if (switchedFromCIMToNonCIM) {
                if ((0,_symbolUtils_f207d979_js__WEBPACK_IMPORTED_MODULE_2__.a)(symbol) || (0,_symbolUtils_f207d979_js__WEBPACK_IMPORTED_MODULE_2__.b)(symbol)) {
                    if (fillSupported && sections.fill.type === "color") {
                        fillStrokeOverrides.fill = Object.assign(Object.assign({}, fill), { color: symbol.color.clone() });
                    }
                    if (strokeSupported && sections.stroke.type === "color") {
                        const smsOrSfs = symbol;
                        const color = smsOrSfs.outline.color.clone();
                        if (changedFromNonLineOnlySMSToLineOnlySMS) {
                            // ensure line color is visible
                            color.a = 1;
                        }
                        fillStrokeOverrides.stroke = Object.assign(Object.assign({}, stroke), { color });
                        if (_symbolUtils_f207d979_js__WEBPACK_IMPORTED_MODULE_2__.b) {
                            // override with outline width of new symbol
                            fillStrokeOverrides.stroke.size = symbol.outline.width;
                            fillStrokeOverrides.stroke.style = symbol.outline.style;
                        }
                    }
                }
                else if ((0,_symbolUtils_f207d979_js__WEBPACK_IMPORTED_MODULE_2__.c)(symbol)) {
                    if (strokeSupported && sections.stroke.type === "color") {
                        const sls = symbol;
                        fillStrokeOverrides.stroke = Object.assign(Object.assign({}, stroke), { size: sls.width, color: sls.color.clone() });
                    }
                }
            }
            else if ((0,_symbolUtils_f207d979_js__WEBPACK_IMPORTED_MODULE_2__.i)(symbol)) {
                const rootColor = _symbolUtils_f207d979_js__WEBPACK_IMPORTED_MODULE_2__.e.cimSymbolUtils.getCIMSymbolColor(symbol);
                if (sections.fill.type === "color") {
                    fillStrokeOverrides.fill = Object.assign(Object.assign({}, fill), { color: rootColor });
                }
                fillStrokeOverrides.stroke = Object.assign({}, stroke);
                if (this.editGeometry === "point") {
                    fillStrokeOverrides.stroke.size = normalizePt(marker.size);
                }
                else if (this.editGeometry === "line") {
                    fillStrokeOverrides.stroke.size = normalizePt(_symbolUtils_f207d979_js__WEBPACK_IMPORTED_MODULE_2__.e.cimSymbolUtils.getCIMSymbolSize(symbol));
                }
                if (sections.stroke.type === "color") {
                    fillStrokeOverrides.stroke.color = rootColor;
                }
                this.cimStrokeWidthBounds = getCIMStrokeWidthBounds();
            }
            else if (sections.fill.type === "color-ramp" && sections.stroke.type === "color") {
                if (selectedLineOnlySymbol) {
                    // use fill ramp category and store selected ramp whenever switching to pure-line style
                    this.tempStrokeColorRampStateActiveCategory = sections.fill.activeCategory;
                    this.tempStrokeColorRampStateStops = fill.color;
                    this.tempStrokePreviousColorBeforeColorRampSwitch = stroke.color;
                    fillStrokeOverrides.stroke = Object.assign(Object.assign({}, stroke), { color: this.tempStrokeColorRampStateStops });
                }
                else if (changedFromLineOnlySMSToNonLineOnlySMS) {
                    fillStrokeOverrides.fill = Object.assign(Object.assign({}, fill), { color: this.tempStrokeColorRampStateStops });
                    fillStrokeOverrides.stroke = Object.assign(Object.assign({}, stroke), { color: this.tempStrokePreviousColorBeforeColorRampSwitch });
                    this.tempStrokeColorRampStateActiveCategory = null;
                    this.tempStrokeColorRampStateStops = null;
                }
            }
            else if (sections.fill.type === "color" && sections.stroke.type === "color-ramp") {
                if (changedFromNonLineOnlySMSToLineOnlySMS) {
                    const ramp = stroke.color.map((color) => {
                        // ensure line color is visible
                        color.a = 1;
                        return color;
                    });
                    fillStrokeOverrides.stroke = Object.assign(Object.assign({}, stroke), { color: ramp });
                }
            }
            else if (sections.fill.type === "color" && sections.stroke.type === "color") {
                if (changedFromNonLineOnlySMSToLineOnlySMS) {
                    const color = stroke.color.clone();
                    if (changedFromNonLineOnlySMSToLineOnlySMS) {
                        // ensure line color is visible
                        color.a = 1;
                    }
                    fillStrokeOverrides.stroke = Object.assign(Object.assign({}, stroke), { color });
                }
            }
            this.sections = Object.assign(Object.assign({}, sections), { fill: Object.assign(Object.assign({}, sections.fill), { open: !selectedLineOnlySymbol && sections.fill.open, enabled: fillSupported &&
                        (!selectedLineOnlySymbol ||
                            (0,_symbolUtils_f207d979_js__WEBPACK_IMPORTED_MODULE_2__.i)(symbol) ||
                            changedFromLineOnlySMSToNonLineOnlySMS ||
                            changedFromPMSToSMS ||
                            sections.fill.enabled) }), stroke: Object.assign(Object.assign({}, sections.stroke), { enabled: strokeSupported &&
                        ((0,_symbolUtils_f207d979_js__WEBPACK_IMPORTED_MODULE_2__.i)(symbol) ||
                            changedFromNonLineOnlySMSToLineOnlySMS ||
                            (switchedFromCIMToNonCIM && !selectedLineOnlySymbol) ||
                            changedFromPMSToSMS ||
                            sections.stroke.enabled) }) });
            const finalFill = (fillStrokeOverrides.fill || fill);
            const finalStroke = (fillStrokeOverrides.stroke || stroke);
            const mergedMarker = Object.assign(Object.assign({}, marker), { symbol: this.syncSymbolProps(symbol, {
                    cimChangeContext: "original-root",
                    symbolState: {
                        marker,
                        fill: finalFill,
                        stroke: finalStroke
                    }
                }) });
            this.fill = finalFill;
            this.stroke = finalStroke;
            this.marker = mergedMarker;
            this.activeSymbol = symbol;
            this.setInternalSymbol(mergedMarker.symbol, true, true);
            this.arcgisSymbolStylerMarkerChange.emit(normalizeSizeProp(mergedMarker));
        };
        this.emitEdit = (0,_functional_44de8fcf_js__WEBPACK_IMPORTED_MODULE_4__.d)(async (symbol, symbolSwitch) => {
            const clone = symbol.clone();
            const info = {};
            const { editGeometry } = this;
            const addMarker = editGeometry === "point";
            const addFill = (!isLineOnlySymbol(symbol) && editGeometry === "point") || editGeometry === "polygon";
            if (addMarker) {
                info.marker = Object.assign(Object.assign({}, normalizeSizeProp(this.marker)), { symbol: clone });
            }
            if (addFill) {
                info.fill = Object.assign({}, this.fill);
            }
            // stroke applies to all geometry types
            info.stroke = Object.assign({}, normalizeSizeProp(this.stroke));
            this.arcgisSymbolStylerEdit.emit({
                symbol: clone,
                info,
                symbolSwitch
            });
        }, 300);
        this.flipFillColorRamps = () => {
            const section = this.sections.fill;
            const fill = this.fill;
            const is2d = section.style === "2d";
            const mergedFill = {
                color: (0,_colorRampUtils_8d9a3bed_js__WEBPACK_IMPORTED_MODULE_1__.f)(fill.color, is2d)
            };
            this.sections = Object.assign(Object.assign({}, this.sections), { fill: Object.assign(Object.assign({}, section), { colorRamps: section.colorRamps.map(({ stops, tags, name }) => ({
                        stops: (0,_colorRampUtils_8d9a3bed_js__WEBPACK_IMPORTED_MODULE_1__.f)(stops, is2d),
                        tags,
                        name
                    })) }) });
            this.fill = mergedFill;
            this.arcgisSymbolStylerFillChange.emit(mergedFill);
            // we set to emit the auto-adjusted changes regardless of the symbol not changing
            this.emitEdit(this.symbol);
        };
        this.renderBlock = (props) => {
            var _a;
            return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-block", { collapsible: true, disabled: (_a = props.disabled) !== null && _a !== void 0 ? _a : false, heading: props.heading, key: props.key, onCalciteBlockOpen: this.onBlockToggle, onCalciteBlockClose: this.onBlockToggle }, props.icon, props.content));
        };
        this.onBlockToggle = (event) => {
            var _a;
            if (this.manualBlockOpen) {
                this.manualBlockOpen = false;
                return;
            }
            // close all color picker popovers
            (_a = this.rampInputEl) === null || _a === void 0 ? void 0 : _a.close();
            this.colorInputEl.forEach((el) => el === null || el === void 0 ? void 0 : el.close());
        };
        this.renderSection = ({ disabled, embedded = false, key, sectionContent }) => {
            return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-symbol-styler-section", { disabled: disabled, key: key, embedded: embedded }, sectionContent.map(({ content }) => content)));
        };
        this.flipStrokeColorRamps = () => {
            const section = this.sections.stroke;
            const stroke = this.stroke;
            const is2d = section.style === "2d";
            const mergedStroke = Object.assign(Object.assign({}, stroke), { color: (0,_colorRampUtils_8d9a3bed_js__WEBPACK_IMPORTED_MODULE_1__.f)(stroke.color, is2d) });
            this.sections = Object.assign(Object.assign({}, this.sections), { stroke: Object.assign(Object.assign({}, section), { colorRamps: section.colorRamps.map(({ stops, tags, name }) => ({
                        stops: (0,_colorRampUtils_8d9a3bed_js__WEBPACK_IMPORTED_MODULE_1__.f)(stops, is2d),
                        tags: tags.slice(),
                        name
                    })) }) });
            this.stroke = mergedStroke;
            this.arcgisSymbolStylerStrokeChange.emit(normalizeSizeProp(mergedStroke));
            // we set to emit the auto-adjusted changes regardless of the symbol not changing
            this.emitEdit(this.symbol);
        };
        this.popoverProps = undefined;
        this.initialSourceId = undefined;
        this.portal = undefined;
        this.stringOverrides = undefined;
        this.mode = "default";
        this.cimStrokeWidthBounds = undefined;
        this.config = undefined;
        this.editGeometry = undefined;
        this.fill = undefined;
        this.marker = undefined;
        this.narrow = false;
        this.preppingEdit = true;
        this.previewSymbol = undefined;
        this.sections = undefined;
        this.builtInStrings = undefined;
        this.mergedStrings = undefined;
        this.stroke = undefined;
        this.symbol = undefined;
        this.tempStrokeColorRampStateActiveCategory = "all";
        this.activeSymbol = undefined;
        this.activeSymbolItem = undefined;
        this.activeSourceId = undefined;
        this.state = "editing";
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    connectedCallback() {
        this.resizeObserver.observe(this.el);
        this.windowResizeObserver.observe(document.body);
    }
    disconnectedCallback() {
        this.resizeObserver.unobserve(this.el);
        this.windowResizeObserver.unobserve(document.body);
    }
    async componentWillLoad() {
        const [, [strings]] = await Promise.all([
            _symbolUtils_f207d979_js__WEBPACK_IMPORTED_MODULE_2__.e.load(),
            (0,_locale_050b6db9_js__WEBPACK_IMPORTED_MODULE_5__.g)(this.el)
        ]);
        this.currentLanguage = (0,_locale_050b6db9_js__WEBPACK_IMPORTED_MODULE_5__.a)(this.el);
        this.dir = (0,_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_6__.g)(this.el);
        const percentFormatter = new Intl.NumberFormat(this.currentLanguage, { style: "percent" });
        const percentFormatSample = percentFormatter.format(0);
        this.percentLabelFlip =
            this.dir === "rtl" ? percentFormatSample.endsWith("%") : percentFormatSample.startsWith("%");
        this.builtInStrings = strings;
    }
    componentShouldUpdate(newVal, _oldVal, propName) {
        if (propName === "preppingEdit") {
            return !newVal;
        }
    }
    componentDidRender() {
        if (this.autoOpenFirstBlock && !this.preppingEdit) {
            const firstBlock = this.el.shadowRoot.querySelector("calcite-block");
            if (firstBlock) {
                this.autoOpenFirstBlock = false;
                // workaround for Calcite issue #8453
                this.manualBlockOpen = true;
                firstBlock.open = true;
            }
        }
    }
    // multiple watches trigger false negative for this rule
    // eslint-disable-next-line @stencil/no-unused-watch
    handleStringChanges() {
        this.mergedStrings = Object.assign(Object.assign({}, this.builtInStrings), this.stringOverrides);
    }
    onPanelBack(event) {
        event.stopPropagation();
    }
    //--------------------------------------------------------------------------
    //
    //  Public Methods
    //
    //--------------------------------------------------------------------------
    async edit(symbol, config) {
        var _a, _b, _c, _d, _e, _f, _g;
        const errorMessage = validateEditable(symbol);
        if (errorMessage) {
            throw new Error(`[arcgis-symbol-styler] ${errorMessage}`);
        }
        symbol = await this.checkLineOnlySymbol(symbol, config);
        this.portalOrInterceptor = config.portal || this.portal || _symbolUtils_f207d979_js__WEBPACK_IMPORTED_MODULE_2__.e.Portal.getDefault();
        this.preppingEdit = true;
        this.autoOpenFirstBlock = true;
        const { marker: markerSection, fill: fillSection, stroke: strokeSection } = config.sections;
        this.symbolFilter =
            config.symbolFilter ||
                ((markerSection === null || markerSection === void 0 ? void 0 : markerSection.markerType) === "all" ? undefined : markerSection === null || markerSection === void 0 ? void 0 : markerSection.markerType);
        this.editGeometry = (0,_symbolUtils_f207d979_js__WEBPACK_IMPORTED_MODULE_2__.g)(symbol);
        symbol = symbol.clone();
        const fillSupported = supportsFill(symbol);
        const strokeSupported = supportsStroke(symbol);
        if ((0,_symbolUtils_f207d979_js__WEBPACK_IMPORTED_MODULE_2__.a)(symbol) || (0,_symbolUtils_f207d979_js__WEBPACK_IMPORTED_MODULE_2__.b)(symbol)) {
            if (!symbol.outline) {
                symbol.outline = { type: "simple-line", color: (0,_color_16791b45_js__WEBPACK_IMPORTED_MODULE_3__.c)(null) };
            }
            else if (!symbol.outline.color) {
                symbol.outline.color = (0,_color_16791b45_js__WEBPACK_IMPORTED_MODULE_3__.c)(null);
            }
        }
        const stroke = Object.assign(Object.assign({ autoAdjusted: false }, config.stroke), { size: parseSize((_a = config.stroke) === null || _a === void 0 ? void 0 : _a.size, 2), style: _colorRampUtils_8d9a3bed_js__WEBPACK_IMPORTED_MODULE_1__.b.includes((_b = config.stroke) === null || _b === void 0 ? void 0 : _b.style) ? config.stroke.style : "solid" });
        if ((_c = config.stroke) === null || _c === void 0 ? void 0 : _c.marker) {
            stroke.marker = config.stroke.marker;
        }
        this.sections = {
            marker: {
                backgroundStyle: "light",
                optional: false /* placeholder */,
                enabled: false /* placeholder */,
                open: (markerSection === null || markerSection === void 0 ? void 0 : markerSection.open) || false,
                symbolsOpen: (markerSection && (!("symbolsOpen" in markerSection) || markerSection.symbolsOpen)) ||
                    false,
                sizeOpen: (markerSection && (!("sizeOpen" in markerSection) || markerSection.sizeOpen)) || false,
                rotationOpen: (markerSection && (!("rotationOpen" in markerSection) || markerSection.rotationOpen)) ||
                    false,
                keepChoice: (markerSection === null || markerSection === void 0 ? void 0 : markerSection.keepChoice) || false,
                parts: Object.assign(Object.assign({}, _colorRampUtils_8d9a3bed_js__WEBPACK_IMPORTED_MODULE_1__.d), markerSection === null || markerSection === void 0 ? void 0 : markerSection.parts)
            },
            fill: {
                activeCategory: "all",
                open: (fillSection === null || fillSection === void 0 ? void 0 : fillSection.open) || false,
                optional: (fillSection === null || fillSection === void 0 ? void 0 : fillSection.optional) || false,
                enabled: fillSupported &&
                    ((_d = config.fillEnabled) !== null && _d !== void 0 ? _d : true) &&
                    !(0,_symbolUtils_f207d979_js__WEBPACK_IMPORTED_MODULE_2__.i)(symbol) &&
                    (fillSection === null || fillSection === void 0 ? void 0 : fillSection.type) === "color" &&
                    !!this.toColorPickerValue(config.fill.color),
                type: fillSection === null || fillSection === void 0 ? void 0 : fillSection.type,
                style: fillSection === null || fillSection === void 0 ? void 0 : fillSection.style,
                suggestedColorsOpen: (fillSection === null || fillSection === void 0 ? void 0 : fillSection.suggestedColorsOpen) || false,
                customColorOpen: (fillSection === null || fillSection === void 0 ? void 0 : fillSection.customColorOpen) || false,
                colorRampsOpen: (fillSection === null || fillSection === void 0 ? void 0 : fillSection.colorRampsOpen) || false,
                colorRamps: getStateColorRamps(fillSection, config.fill),
                transparencyOpen: (fillSection === null || fillSection === void 0 ? void 0 : fillSection.transparencyOpen) || false,
                parts: Object.assign(Object.assign(Object.assign({}, _colorRampUtils_8d9a3bed_js__WEBPACK_IMPORTED_MODULE_1__.c), _colorRampUtils_8d9a3bed_js__WEBPACK_IMPORTED_MODULE_1__.e), fillSection === null || fillSection === void 0 ? void 0 : fillSection.parts)
            },
            stroke: {
                activeCategory: "all",
                optional: (strokeSection === null || strokeSection === void 0 ? void 0 : strokeSection.optional) || false,
                open: (strokeSection === null || strokeSection === void 0 ? void 0 : strokeSection.open) || false,
                enabled: strokeSupported &&
                    ((_e = config.strokeEnabled) !== null && _e !== void 0 ? _e : true) &&
                    !(0,_symbolUtils_f207d979_js__WEBPACK_IMPORTED_MODULE_2__.i)(symbol) &&
                    (strokeSection === null || strokeSection === void 0 ? void 0 : strokeSection.type) === "color" &&
                    !!this.toColorPickerValue(config.stroke.color),
                type: strokeSection === null || strokeSection === void 0 ? void 0 : strokeSection.type,
                style: strokeSection === null || strokeSection === void 0 ? void 0 : strokeSection.style,
                suggestedColorsOpen: (strokeSection === null || strokeSection === void 0 ? void 0 : strokeSection.suggestedColorsOpen) || false,
                customColorOpen: (strokeSection === null || strokeSection === void 0 ? void 0 : strokeSection.customColorOpen) || false,
                colorRampsOpen: (strokeSection === null || strokeSection === void 0 ? void 0 : strokeSection.colorRampsOpen) || false,
                colorRamps: getStateColorRamps(strokeSection, config.stroke),
                transparencyOpen: (strokeSection === null || strokeSection === void 0 ? void 0 : strokeSection.transparencyOpen) || false,
                extraOpen: (strokeSection === null || strokeSection === void 0 ? void 0 : strokeSection.extraOpen) || false,
                extraParts: Object.assign(Object.assign({}, _colorRampUtils_8d9a3bed_js__WEBPACK_IMPORTED_MODULE_1__.g), strokeSection === null || strokeSection === void 0 ? void 0 : strokeSection.extraParts),
                parts: Object.assign(Object.assign(Object.assign(Object.assign({}, _colorRampUtils_8d9a3bed_js__WEBPACK_IMPORTED_MODULE_1__.c), _colorRampUtils_8d9a3bed_js__WEBPACK_IMPORTED_MODULE_1__.e), _colorRampUtils_8d9a3bed_js__WEBPACK_IMPORTED_MODULE_1__.h), strokeSection === null || strokeSection === void 0 ? void 0 : strokeSection.parts)
            }
        };
        this.marker = Object.assign(Object.assign({}, config.marker), { size: parseSize((_f = config.marker) === null || _f === void 0 ? void 0 : _f.size, 0), angle: getSymbolRotation(symbol), autoAdjusted: ((_g = config.marker) === null || _g === void 0 ? void 0 : _g.autoAdjusted) || false, symbol });
        this.fill = Object.assign({}, config.fill);
        this.stroke = stroke;
        this.activeSymbol = symbol;
        this.activeSourceId = ((markerSection === null || markerSection === void 0 ? void 0 : markerSection.keepChoice) && this.activeSourceId) || null;
        this.activeSymbolItem = ((markerSection === null || markerSection === void 0 ? void 0 : markerSection.keepChoice) && this.activeSymbolItem) || null;
        this.config = config;
        if ((0,_symbolUtils_f207d979_js__WEBPACK_IMPORTED_MODULE_2__.i)(symbol) && (this.isFillColorRamp() || this.isStrokeColorRamp())) {
            this.syncSymbolProps(symbol, {
                cimChangeContext: "root"
            });
        }
        if ((0,_symbolUtils_f207d979_js__WEBPACK_IMPORTED_MODULE_2__.i)(symbol)) {
            this.cimStrokeWidthBounds = getCIMStrokeWidthBounds();
        }
        this.setInternalSymbol(symbol, false);
        this.preppingEdit = false;
    }
    async checkLineOnlySymbol(symbol, config) {
        // we no longer support plus and X markers in the styler
        var _a, _b, _c, _d, _e, _f, _g;
        if (isLineOnlySymbol(symbol)) {
            //"fill":{"color":Color},
            //"fill":{"color":[Color,Color,Color,Color,Color]}
            //"marker":{"size":13.5,"autoAdjusted":false},
            //"stroke":{"color":Color,"size":0.75}
            const [SimpleMarkerSymbol] = await (0,_loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_7__.l)(["esri/symbols/SimpleMarkerSymbol"]);
            symbol = new SimpleMarkerSymbol();
            // make sure config fits to new symbol
            if ((_a = config.fill) === null || _a === void 0 ? void 0 : _a.color) {
                if (Array.isArray(config.fill.color)) {
                    // "color-ramp"
                    symbol.color = config.fill.color[config.fill.color.length - 1];
                }
                else {
                    // "color"
                    symbol.color = config.fill.color;
                }
            }
            if ((_b = config.stroke) === null || _b === void 0 ? void 0 : _b.color) {
                config.stroke.color = symbol.outline.color.clone();
            }
            if (((_c = config.stroke) === null || _c === void 0 ? void 0 : _c.size) || ((_d = config.stroke) === null || _d === void 0 ? void 0 : _d.size) === 0) {
                config.stroke.size = symbol.outline.width;
            }
            if ((_e = config.marker) === null || _e === void 0 ? void 0 : _e.size) {
                symbol.size = config.marker.size;
            }
            this.marker = Object.assign(Object.assign({}, config.marker), { size: parseSize((_f = config.marker) === null || _f === void 0 ? void 0 : _f.size, 0), angle: getSymbolRotation(symbol), autoAdjusted: ((_g = config.marker) === null || _g === void 0 ? void 0 : _g.autoAdjusted) || false, symbol });
            this.emitEdit(symbol);
            return Promise.resolve(symbol);
        }
        return Promise.resolve(symbol);
    }
    async setSize(type, size) {
        const { screenUtils } = _symbolUtils_f207d979_js__WEBPACK_IMPORTED_MODULE_2__.e;
        if (type === "stroke") {
            this.setStrokeWidth(normalizePx(screenUtils.pt2px(size)), false);
        }
        if (type === "marker") {
            this.setSymbolSize(normalizePx(screenUtils.pt2px(size)), false);
        }
    }
    getLinePatternStyle(style) {
        return {
            backgroundImage: `url(${(0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.a)(`./assets/line-patterns/${style}.png`)})`
        };
    }
    getSelectedArrowPatternStyle() {
        return {
            backgroundImage: `url(${(0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.a)(`./assets/arrow-pattern-spritesheet.png`)})`
        };
    }
    getArrowPatternOptionStyle() {
        return {
            backgroundImage: `url(${(0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.a)(`./assets/arrow-pattern-options-spritesheet.png`)})`
        };
    }
    hasActiveLineOnlySimpleMarkerSymbol() {
        const { marker, symbol } = this;
        return marker && isLineOnlySymbol(symbol);
    }
    hasActivePictureMarkerSymbol() {
        var _a;
        return ((_a = this.symbol) === null || _a === void 0 ? void 0 : _a.type) === "picture-marker" || this.activeSymbol.type === "picture-marker";
    }
    setStrokeWidth(width, emit = true) {
        const { stroke } = this;
        const size = width < 0 ? 0 : normalizePx(width);
        const mergedStroke = Object.assign(Object.assign({}, stroke), { size });
        this.stroke = mergedStroke;
        if (emit) {
            this.arcgisSymbolStylerStrokeChange.emit(normalizeSizeProp(mergedStroke, width));
        }
        this.setInternalSymbol(this.syncSymbolProps(this.symbol, { cimChangeContext: "root" }), emit);
    }
    isFillColorRamp() {
        var _a;
        return ((_a = this.config.sections.fill) === null || _a === void 0 ? void 0 : _a.type) === "color-ramp";
    }
    isStrokeColorRamp() {
        var _a;
        return ((_a = this.config.sections.stroke) === null || _a === void 0 ? void 0 : _a.type) === "color-ramp";
    }
    getSampleFillColorRampColor() {
        const section = this.sections.fill;
        const fill = this.fill;
        return this.getSampleColorRampColor(section, fill.color);
    }
    getSampleStrokeColorRampColor() {
        const section = this.sections.stroke;
        const stroke = this.stroke;
        return this.getSampleColorRampColor(section, stroke.color);
    }
    getSampleColorRampColor(section, rampColors) {
        const totalColors = rampColors.length;
        if (section.style === "2d" || section.style === "discrete") {
            return rampColors[totalColors - 1];
        }
        return rampColors[Math.floor(totalColors / 2)];
    }
    setSymbolSize(size, emit = true) {
        const { marker, fill, stroke, symbol } = this;
        const mergedMarker = Object.assign(Object.assign({}, marker), { symbol: this.syncSymbolProps(symbol, {
                cimChangeContext: "root",
                symbolState: {
                    marker: Object.assign(Object.assign({}, marker), { size }),
                    fill: fill,
                    stroke: stroke
                }
            }), size });
        this.marker = mergedMarker;
        this.setInternalSymbol(mergedMarker.symbol, emit);
        if (emit) {
            this.arcgisSymbolStylerMarkerChange.emit(normalizeSizeProp(mergedMarker, size));
        }
    }
    render() {
        var _a, _b, _c, _d, _e, _f;
        if (this.preppingEdit) {
            return;
        }
        const dir = (0,_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_6__.g)(this.el);
        const { sections } = this.config;
        const editingCIM = (0,_symbolUtils_f207d979_js__WEBPACK_IMPORTED_MODULE_2__.i)(this.activeSymbol);
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.H, null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-flow", { ref: (el) => {
                this.flowEl = el;
                // we're here after componentDidLoad
                this.checkPopoverMaxHeight();
            } }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-flow-item", { class: {
                [_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_6__.C.rtl]: dir === "rtl"
            }, dir: dir,
            // omitting `heading` intentionally to allow embedding into existing panels
            //heightScale={this.heightScale}
            key: "main" }, [
            ((_b = (_a = sections.marker) === null || _a === void 0 ? void 0 : _a.parts) === null || _b === void 0 ? void 0 : _b.rotation) === false &&
                ((_d = (_c = sections.marker) === null || _c === void 0 ? void 0 : _c.parts) === null || _d === void 0 ? void 0 : _d.preview) === false &&
                ((_f = (_e = sections.marker) === null || _e === void 0 ? void 0 : _e.parts) === null || _f === void 0 ? void 0 : _f.size) === false
                ? null
                : this.renderSymbolBlock(),
            !editingCIM && sections.fill ? this.renderFillBlock() : null,
            !editingCIM && sections.stroke ? this.renderStrokeBlock() : null
        ]), this.state === "choosing-symbol" ? this.renderSymbolSelectionPanel() : null)));
    }
    renderSymbolBlock() {
        const { marker: section, stroke: strokeSection } = this.sections;
        const { parts: parts } = section;
        const { editGeometry, symbol } = this;
        const isCIM = (0,_symbolUtils_f207d979_js__WEBPACK_IMPORTED_MODULE_2__.i)(symbol);
        const content = [];
        if (parts.preview) {
            content.push({
                content: this.renderSymbolsSelection()
            });
        }
        if (isCIM) {
            if (this.isFillColorRamp()) {
                content.push({
                    content: this.renderColorRampFillBlock(true)
                });
            }
            else if (this.isStrokeColorRamp()) {
                content.push({
                    content: this.renderColorRampStrokeBlock(true)
                });
            }
        }
        if (editGeometry === "point") {
            if (parts.size) {
                content.push({
                    content: isCIM ? this.renderRootCIMSymbolSizeContent() : this.renderSymbolSizeContent()
                });
            }
            if (parts.rotation) {
                content.push({
                    content: this.renderSymbolRotationContent()
                });
            }
        }
        else if (isCIM && strokeSection.extraParts.width) {
            // check if the specific CIM supports an outline width
            if (!(0,_symbolUtils_f207d979_js__WEBPACK_IMPORTED_MODULE_2__.f)(symbol) || ((0,_symbolUtils_f207d979_js__WEBPACK_IMPORTED_MODULE_2__.f)(symbol) && supportsOutlineWidth(symbol))) {
                content.push({
                    content: this.renderRootCIMSymbolWidthContent()
                });
            }
        }
        if (isCIM) {
            content.push({
                content: this.renderRootCIMSymbolContent(symbol)
            });
        }
        return this.renderSection({
            key: "marker-symbols",
            sectionContent: content
        });
    }
    renderRootCIMSymbolContent(symbol) {
        const layerPanels = this.renderCIMSymbolLayersContent(symbol.data.symbol, "root-symbol");
        if (layerPanels.length > _colorRampUtils_8d9a3bed_js__WEBPACK_IMPORTED_MODULE_1__.i) {
            return [
                ...layerPanels.slice(0, _colorRampUtils_8d9a3bed_js__WEBPACK_IMPORTED_MODULE_1__.i),
                (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: _colorRampUtils_8d9a3bed_js__WEBPACK_IMPORTED_MODULE_1__.C.message }, this.mergedStrings.additionalSymbolLayersNotShown.replace("${count}", _colorRampUtils_8d9a3bed_js__WEBPACK_IMPORTED_MODULE_1__.i.toString()))
            ];
        }
        return layerPanels;
    }
    renderCIMSymbolLayersContent({ symbolLayers }, key, contentOnly = false, parentSymbolLayer) {
        return symbolLayers
            .filter(({ type }) => this.isSupportedSymbolLayerType(type))
            .map((symbolLayer, index) => {
            const contentKey = `${key}__symbol-layers__symbol-layer-${index.toString()}`;
            if (symbolLayer.type === "CIMVectorMarker") {
                return this.renderCIMVectorMarkerSymbolLayerBlocks(symbolLayer, contentKey);
            }
            if (symbolLayer.type === "CIMPictureMarker") {
                return this.renderCIMPictureMarkerSymbolLayerBlock(symbolLayer, contentKey, contentOnly);
            }
            if (symbolLayer.type === "CIMSolidStroke") {
                return this.renderCIMSolidStrokeSymbolLayerBlock(symbolLayer, contentKey, contentOnly, parentSymbolLayer);
            }
            if (symbolLayer.type === "CIMPictureStroke") {
                return this.renderCIMPictureStrokeSymbolLayerBlock(symbolLayer, contentKey, contentOnly);
            }
            if (symbolLayer.type === "CIMSolidFill") {
                return this.renderCIMSolidFillSymbolLayerBlock(symbolLayer, contentKey, contentOnly);
            }
            if (symbolLayer.type === "CIMHatchFill") {
                return this.renderCIMHatchFillSymbolLayerBlocks(symbolLayer, contentKey);
            }
            if (symbolLayer.type === "CIMPictureFill") {
                return this.renderCIMPictureFillSymbolLayerBlock(symbolLayer, contentKey, contentOnly);
            }
        })
            .filter(Boolean)
            .flat();
    }
    renderSymbolsSelection() {
        var _a, _b;
        const activeSymbol = this.previewSymbol;
        const contrastingBackgroundTheme = activeSymbol
            ? _symbolUtils_f207d979_js__WEBPACK_IMPORTED_MODULE_2__.e.previewSymbol2D.getContrastingBackgroundTheme(activeSymbol, 245)
            : "light";
        const isRtl = (0,_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_6__.g)(this.el) === "rtl";
        const singleSourceAndItemAvailable = ((_a = this.filteredSources) === null || _a === void 0 ? void 0 : _a.length) === 1 && ((_b = this.activeSymbolItems) === null || _b === void 0 ? void 0 : _b.length) === 1;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { style: {
                "--arcgis-symbol-styler-inline-input-trigger-background-color": contrastingBackgroundTheme === "dark" ? "#f3f3f3" : ""
            } }, this.mergedStrings.currentSymbol, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("button", { class: _colorRampUtils_8d9a3bed_js__WEBPACK_IMPORTED_MODULE_1__.C.changeSymbolTrigger, disabled: singleSourceAndItemAvailable, onClick: () => {
                this.state = "choosing-symbol";
            }, type: "button" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: _colorRampUtils_8d9a3bed_js__WEBPACK_IMPORTED_MODULE_1__.C.container, tabIndex: 0 }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: _colorRampUtils_8d9a3bed_js__WEBPACK_IMPORTED_MODULE_1__.C.symbol }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-symbol-styler-symbol-preview", { symbol: activeSymbol, options: this.editGeometry === "point" ? _colorRampUtils_8d9a3bed_js__WEBPACK_IMPORTED_MODULE_1__.p : null })), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: _colorRampUtils_8d9a3bed_js__WEBPACK_IMPORTED_MODULE_1__.C.label }, getSymbolLabel(activeSymbol, this.mergedStrings))), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { icon: singleSourceAndItemAvailable ? null : `chevron-${isRtl ? "left" : "right"}`, scale: "s" }))));
    }
    renderSymbolSelectionPanel() {
        const { dir, mergedStrings } = this;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-flow-item", { class: {
                [_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_6__.C.rtl]: dir === "rtl",
                "symbol-selection-panel": true
            }, dir: dir, heading: mergedStrings.changeSymbol,
            //heightScale={this.heightScale}
            key: "symbol-selection", beforeBack: async () => {
                this.state = "editing";
            } }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-symbol-picker", { lang: this.currentLanguage, onArcgisActiveSymbolChange: (event) => {
                const { detail: symbol } = event;
                this.onSymbolSelect(symbol);
                event.stopPropagation();
            }, onArcgisActiveSourceIdChange: ({ detail: activeSourceId }) => {
                this.activeSourceId = activeSourceId;
                this.arcgisSymbolStylerSourceIdChange.emit(activeSourceId);
            }, onArcgisActiveSymbolItemChange: ({ detail: activeSymbolItem }) => {
                this.activeSymbolItem = activeSymbolItem;
            }, onArcgisSymbolSourcesChange: ({ detail: filteredSources }) => (this.filteredSources = filteredSources), onArcgisActiveSourceItemsChange: ({ detail: activeSourceItems }) => (this.activeSymbolItems = activeSourceItems), activeSymbolItem: this.activeSymbolItem, activeSourceId: this.activeSourceId || this.initialSourceId, portal: this.portalOrInterceptor, style: {
                "--scroller-max-height": "var(--symbol-scroller-max-height)"
            }, symbolFilter: this.symbolFilter, symbol: this.activeSymbol }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { width: "full", slot: "footer", onClick: () => this.flowEl.back() }, mergedStrings.done)));
    }
    setInternalSymbol(symbol, emit, symbolSwitch) {
        this.symbol = symbol;
        this.updatePreviewSymbol();
        if (emit) {
            this.emitEdit(symbol, symbolSwitch);
        }
    }
    renderRootCIMSymbolSizeContent() {
        const { sections: { marker: { parts: { size } } }, marker } = this;
        const max = 150;
        const min = 1;
        const autoSizeAdjust = typeof size === "object" && (size === null || size === void 0 ? void 0 : size.autoSizeAdjust);
        const largestSize = _symbolUtils_f207d979_js__WEBPACK_IMPORTED_MODULE_2__.e.cimSymbolUtils.getCIMSymbolSize(this.symbol);
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: _colorRampUtils_8d9a3bed_js__WEBPACK_IMPORTED_MODULE_1__.C.contentGroup }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, this.mergedStrings.symbolSize, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(SelectNumber, { disabled: autoSizeAdjust && autoSizeAdjust !== "editable" && marker.autoAdjusted, min: min, max: max, step: 1, unitsLabel: this.mergedStrings.px, value: normalizePx(_symbolUtils_f207d979_js__WEBPACK_IMPORTED_MODULE_2__.e.screenUtils.pt2px(largestSize)), onValueChange: this.onSymbolSizeChange, withSteppers: !this.narrow, label: this.mergedStrings.symbolSize })), autoSizeAdjust
            ? this.renderAutoAdjust((0,_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_6__.g)(this.el), this.marker.autoAdjusted, this.mergedStrings.autoAdjustSize, this.onAutoAdjustSizeChange)
            : null));
    }
    renderRootCIMSymbolWidthContent() {
        var _a;
        // for polygon CIMs it only comes here for an outline
        const symbol = this.symbol;
        const { sections: { stroke: { extraParts: { autoStrokeAdjust } } }, stroke } = this;
        const dir = (0,_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_6__.g)(this.el);
        const width = (0,_symbolUtils_f207d979_js__WEBPACK_IMPORTED_MODULE_2__.f)(symbol)
            ? getOutlineWidth(symbol)
            : _symbolUtils_f207d979_js__WEBPACK_IMPORTED_MODULE_2__.e.cimSymbolUtils.getCIMSymbolSize(this.symbol);
        let label = this.getStrokeString("width");
        let min = this.cimStrokeWidthBounds.min;
        let max = this.cimStrokeWidthBounds.max;
        if ((0,_symbolUtils_f207d979_js__WEBPACK_IMPORTED_MODULE_2__.h)(symbol)) {
            // if it has markers we should treat it as size, not width
            const hasMarker = (_a = symbol.data.symbol.symbolLayers) === null || _a === void 0 ? void 0 : _a.some((symbolLayer) => ["CIMVectorMarker", "CIMPictureMarker"].indexOf(symbolLayer.type) > -1);
            if (hasMarker) {
                label = this.mergedStrings.symbolSize;
                min = _colorRampUtils_8d9a3bed_js__WEBPACK_IMPORTED_MODULE_1__.n;
                max = _colorRampUtils_8d9a3bed_js__WEBPACK_IMPORTED_MODULE_1__.q;
            }
        }
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: _colorRampUtils_8d9a3bed_js__WEBPACK_IMPORTED_MODULE_1__.C.contentGroup }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { dir: dir }, label, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(SelectNumber, { disabled: autoStrokeAdjust && autoStrokeAdjust !== "editable" && stroke.autoAdjusted, min: min, max: max, step: 1, unitsLabel: this.mergedStrings.px, value: normalizePx(_symbolUtils_f207d979_js__WEBPACK_IMPORTED_MODULE_2__.e.screenUtils.pt2px(width)), onValueChange: this.onStrokeWidthChange, withSteppers: !this.narrow, label: label })), autoStrokeAdjust
            ? this.renderAutoAdjust(dir, this.stroke.autoAdjusted, this.mergedStrings.autoAdjustStroke, this.onAutoAdjustStrokeChange)
            : null));
    }
    renderSymbolSizeContent() {
        const { sections: { marker: { parts: { size } } }, marker } = this;
        const dir = (0,_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_6__.g)(this.el);
        const max = 150;
        const min = 1;
        const autoSizeAdjust = typeof size === "object" && (size === null || size === void 0 ? void 0 : size.autoSizeAdjust);
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: _colorRampUtils_8d9a3bed_js__WEBPACK_IMPORTED_MODULE_1__.C.contentGroup }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, this.mergedStrings.symbolSize, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(SelectNumber, { disabled: autoSizeAdjust && autoSizeAdjust !== "editable" && marker.autoAdjusted, min: min, max: max, step: 1, unitsLabel: this.mergedStrings.px, value: marker.size, onValueChange: this.onSymbolSizeChange, withSteppers: !this.narrow, label: this.mergedStrings.symbolSize })), autoSizeAdjust
            ? this.renderAutoAdjust(dir, marker.autoAdjusted, this.mergedStrings.autoAdjustSize, this.onAutoAdjustSizeChange)
            : null));
    }
    renderAutoAdjust(dir, adjusted, label, changeHandler) {
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { class: _colorRampUtils_8d9a3bed_js__WEBPACK_IMPORTED_MODULE_1__.C.autoAdjustLabel, dir: dir, layout: "inline", key: "auto-adjust" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-checkbox", { checked: adjusted, class: _colorRampUtils_8d9a3bed_js__WEBPACK_IMPORTED_MODULE_1__.C.autoAdjustCheckbox, onCalciteCheckboxChange: changeHandler }), label));
    }
    renderSymbolRotationContent() {
        const { marker, mergedStrings } = this;
        const max = 360;
        const min = 0;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, mergedStrings.rotation, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(SelectNumber, { min: min, max: max, step: 1, unitsLabel: "\u00BA", flipLabels: this.dir === "rtl", value: marker.angle, onValueChange: this.onSymbolRotationChange, withSteppers: !this.narrow, label: mergedStrings.rotation })));
    }
    renderFillBlock() {
        const { fill } = this.config.sections;
        if (fill.type === "color") {
            return this.renderColorFillBlock();
        }
        return this.renderColorRampFillBlock();
    }
    renderColorFillBlock() {
        const section = this.sections.fill;
        const { parts } = section;
        const content = [];
        if (parts.suggestedColors || parts.customColor) {
            content.push({
                content: this.renderFillColorContent()
            });
        }
        if (parts.transparency) {
            content.push({
                content: ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-symbol-styler-section", { embedded: true, disabled: !section.enabled }, this.renderColorFillTransparencyContent(this.mergedStrings.fillTransparency, !section.enabled)))
            });
        }
        return this.renderSection({
            key: "color-fill",
            disabled: section.optional === "non-editable" ||
                this.hasActivePictureMarkerSymbol() ||
                this.hasActiveLineOnlySimpleMarkerSymbol(),
            sectionContent: content
        });
    }
    toColorPickerValue(color) {
        if (!color || (0,_color_16791b45_js__WEBPACK_IMPORTED_MODULE_3__.i)(color)) {
            return null;
        }
        return color.toHex();
    }
    renderFillColorContent() {
        const section = this.sections.fill;
        const color = section.enabled ? this.toColorPickerValue(this.fill.color) : null;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, this.mergedStrings.fillColor, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-color-input", { color: color,
            //compact={this.narrow}
            clearable: section.optional !== false, onArcgisColorInputChange: (event) => {
                const selectedColor = event.currentTarget.color;
                if (!selectedColor) {
                    this.onFillEnabledChange(false);
                    // no updates to color needed
                    return;
                }
                if (!section.enabled) {
                    this.onFillEnabledChange(true);
                }
                const color = (0,_color_16791b45_js__WEBPACK_IMPORTED_MODULE_3__.c)(selectedColor);
                const { color: currentColor } = this.fill;
                const mergedColor = adjustTransparencyIfNeeded(currentColor, Object.assign(Object.assign(Object.assign({}, currentColor), color), { a: currentColor.a }));
                const mergedFill = {
                    color: (0,_color_16791b45_js__WEBPACK_IMPORTED_MODULE_3__.c)(mergedColor)
                };
                this.fill = mergedFill;
                this.arcgisSymbolStylerFillChange.emit(mergedFill);
                this.setInternalSymbol(this.syncSymbolProps(this.symbol), true);
                event.stopPropagation();
            }, popoverProps: this.popoverProps, storageId: _colorRampUtils_8d9a3bed_js__WEBPACK_IMPORTED_MODULE_1__.j, ref: this.setColorInputRef })));
    }
    getStrokeString(prop) {
        return this.mergedStrings[this.editGeometry === "line" ? prop : `stroke${capitalize(prop)}`];
    }
    isSupportedSymbolLayerType(type) {
        return (type === "CIMVectorMarker" ||
            type === "CIMSolidFill" ||
            type === "CIMSolidStroke" ||
            type === "CIMHatchFill" ||
            type === "CIMPictureFill" ||
            type === "CIMPictureStroke" ||
            type === "CIMPictureMarker");
    }
    getSymbolLayerPreviewSymbol(symbolLayer, geometryType) {
        var _a;
        const symbolProps = {
            data: {
                type: "CIMSymbolReference",
                symbol: {
                    type: geometryType === "point"
                        ? "CIMPointSymbol"
                        : geometryType === "line"
                            ? "CIMLineSymbol"
                            : "CIMPolygonSymbol",
                    symbolLayers: [symbolLayer]
                }
            }
        };
        if (symbolLayer.type === "CIMVectorMarker") {
            symbolProps.data.symbol.angle = (_a = symbolLayer.rotation) !== null && _a !== void 0 ? _a : 0;
        }
        return new _symbolUtils_f207d979_js__WEBPACK_IMPORTED_MODULE_2__.e.CIMSymbol(symbolProps);
    }
    renderCIMVectorMarkerSymbolLayerBlocks(symbolLayer, key) {
        if (this.mode === "minimal") {
            return null;
        }
        const { sections: { marker: { parts: { size } }, stroke: { extraParts: { autoStrokeAdjust } } }, marker, mergedStrings } = this;
        const autoSizeAdjust = typeof size === "object" && (size === null || size === void 0 ? void 0 : size.autoSizeAdjust);
        const updateTargetSymbol = this.getSymbolLayerPreviewSymbol(symbolLayer, "point");
        const symbolSize = _symbolUtils_f207d979_js__WEBPACK_IMPORTED_MODULE_2__.e.cimSymbolUtils.getCIMSymbolSize(updateTargetSymbol);
        const symbolRotation = _symbolUtils_f207d979_js__WEBPACK_IMPORTED_MODULE_2__.e.cimSymbolUtils.getCIMSymbolRotation(updateTargetSymbol, true);
        const colorContext = getChildSymbolLayerColorContext(symbolLayer);
        const fillAndStrokeSections = [];
        if (colorContext.includes("fill") && (!this.isFillColorRamp() || symbolLayer.colorLocked)) {
            const fillColor = getVectorMarkerColor(symbolLayer, "fill");
            const fillContent = [
                (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { key: "fill-color" }, colorContext.length === 1 ? mergedStrings.color : mergedStrings.fillColor, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "input-color" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-color-input", { color: this.toColorPickerValue(fillColor),
                    //compact={this.narrow}
                    clearable: true, onArcgisColorInputChange: (event) => {
                        const color = (0,_color_16791b45_js__WEBPACK_IMPORTED_MODULE_3__.c)(event.currentTarget.color);
                        if (!(0,_color_16791b45_js__WEBPACK_IMPORTED_MODULE_3__.i)(color) && !(0,_color_16791b45_js__WEBPACK_IMPORTED_MODULE_3__.i)(fillColor)) {
                            color.a = fillColor.a;
                        }
                        updateSymbolLayerColor(symbolLayer, color, "fill");
                        this.setInternalSymbol(this.symbol, true);
                        event.stopPropagation();
                    }, popoverProps: this.popoverProps, storageId: _colorRampUtils_8d9a3bed_js__WEBPACK_IMPORTED_MODULE_1__.j, ref: this.setColorInputRef }))),
                (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { key: "fill-transparency" }, colorContext.length === 1 ? mergedStrings.transparency : mergedStrings.fillTransparency, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(SelectNumber, { min: _colorRampUtils_8d9a3bed_js__WEBPACK_IMPORTED_MODULE_1__.o, max: _colorRampUtils_8d9a3bed_js__WEBPACK_IMPORTED_MODULE_1__.k, step: 1, unitsLabel: "%", flipLabels: this.percentLabelFlip, value: (0,_color_16791b45_js__WEBPACK_IMPORTED_MODULE_3__.a)(fillColor.a), onValueChange: (transparency) => {
                        const alpha = (0,_color_16791b45_js__WEBPACK_IMPORTED_MODULE_3__.t)(transparency);
                        const color = fillColor.clone();
                        color.a = alpha;
                        updateSymbolLayerColor(symbolLayer, color, "fill");
                        this.setInternalSymbol(this.symbol, true);
                    }, withSteppers: !this.narrow, label: colorContext.length === 1
                        ? mergedStrings.transparency
                        : mergedStrings.fillTransparency }))
            ];
            fillAndStrokeSections.push(fillContent);
        }
        if (colorContext.includes("stroke")) {
            const strokeColor = getVectorMarkerColor(symbolLayer, "stroke");
            const strokeWidth = getVectorMarkerSize(symbolLayer, "stroke");
            const strokeContent = [
                (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { key: "stroke-color" }, colorContext.length === 1 ? mergedStrings.color : mergedStrings.strokeColor, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "input-color" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-color-input", { color: this.toColorPickerValue(strokeColor),
                    //compact={this.narrow}
                    clearable: true, onArcgisColorInputChange: (event) => {
                        const color = (0,_color_16791b45_js__WEBPACK_IMPORTED_MODULE_3__.c)(event.currentTarget.color);
                        if (!(0,_color_16791b45_js__WEBPACK_IMPORTED_MODULE_3__.i)(color) && !(0,_color_16791b45_js__WEBPACK_IMPORTED_MODULE_3__.i)(strokeColor)) {
                            color.a = strokeColor.a;
                        }
                        updateSymbolLayerColor(symbolLayer, color, "stroke");
                        this.setInternalSymbol(this.symbol, true);
                        event.stopPropagation();
                    }, popoverProps: this.popoverProps, storageId: _colorRampUtils_8d9a3bed_js__WEBPACK_IMPORTED_MODULE_1__.j, ref: this.setColorInputRef }))),
                (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { key: "stroke-transparency" }, colorContext.length === 1
                    ? mergedStrings.transparency
                    : mergedStrings.strokeTransparency, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(SelectNumber, { min: _colorRampUtils_8d9a3bed_js__WEBPACK_IMPORTED_MODULE_1__.o, max: _colorRampUtils_8d9a3bed_js__WEBPACK_IMPORTED_MODULE_1__.k, step: 1, unitsLabel: "%", flipLabels: this.percentLabelFlip, value: (0,_color_16791b45_js__WEBPACK_IMPORTED_MODULE_3__.a)(strokeColor.a), onValueChange: (transparency) => {
                        const alpha = (0,_color_16791b45_js__WEBPACK_IMPORTED_MODULE_3__.t)(transparency);
                        const color = strokeColor.clone();
                        color.a = alpha;
                        updateSymbolLayerColor(symbolLayer, color, "stroke");
                        this.setInternalSymbol(this.symbol, true);
                    }, withSteppers: !this.narrow, label: colorContext.length === 1
                        ? mergedStrings.transparency
                        : mergedStrings.strokeTransparency })),
                (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { key: "stroke-width" }, colorContext.length === 1 ? mergedStrings.width : mergedStrings.strokeWidth, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(SelectNumber, { disabled: autoStrokeAdjust && autoStrokeAdjust !== "editable" && this.stroke.autoAdjusted, min: this.cimStrokeWidthBounds.min, max: this.cimStrokeWidthBounds.max, step: 1, unitsLabel: mergedStrings.px, value: normalizePx(_symbolUtils_f207d979_js__WEBPACK_IMPORTED_MODULE_2__.e.screenUtils.pt2px(strokeWidth)), onValueChange: (width) => {
                        updateSymbolLayerSize(symbolLayer, normalizePt(_symbolUtils_f207d979_js__WEBPACK_IMPORTED_MODULE_2__.e.screenUtils.px2pt(width)), "stroke");
                        this.setInternalSymbol(this.symbol, true);
                    }, withSteppers: !this.narrow, label: colorContext.length === 1 ? mergedStrings.width : mergedStrings.strokeWidth }))
            ];
            fillAndStrokeSections.push(strokeContent);
        }
        const content = ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: _colorRampUtils_8d9a3bed_js__WEBPACK_IMPORTED_MODULE_1__.C.contentGroup, key: `${key}__vector-marker-symbol-layer` }, [...fillAndStrokeSections], (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, mergedStrings.symbolSize, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(SelectNumber, { disabled: autoSizeAdjust && autoSizeAdjust !== "editable" && marker.autoAdjusted, min: _colorRampUtils_8d9a3bed_js__WEBPACK_IMPORTED_MODULE_1__.n, max: _colorRampUtils_8d9a3bed_js__WEBPACK_IMPORTED_MODULE_1__.q, step: 1, unitsLabel: mergedStrings.px, value: normalizePx(_symbolUtils_f207d979_js__WEBPACK_IMPORTED_MODULE_2__.e.screenUtils.pt2px(symbolSize)), onValueChange: (size) => {
                this.setMarkerSymbolLayerSize(updateTargetSymbol, size);
                this.setInternalSymbol(this.symbol, true);
            }, withSteppers: !this.narrow, label: mergedStrings.symbolSize })), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, mergedStrings.rotation, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(SelectNumber, { min: _colorRampUtils_8d9a3bed_js__WEBPACK_IMPORTED_MODULE_1__.r, max: _colorRampUtils_8d9a3bed_js__WEBPACK_IMPORTED_MODULE_1__.l, step: 1, unitsLabel: "\u00BA", flipLabels: this.dir === "rtl", value: normalizePxOrPt(symbolRotation), onValueChange: (rotation) => {
                _symbolUtils_f207d979_js__WEBPACK_IMPORTED_MODULE_2__.e.cimSymbolUtils.applyCIMSymbolRotation(updateTargetSymbol, normalizePxOrPt(rotation), true);
                this.setInternalSymbol(this.symbol, true);
            }, withSteppers: !this.narrow, label: mergedStrings.rotation })), this.renderCIMMarkerPlacementSection(symbolLayer)));
        const symbolLayerPreview = this.getSymbolLayerPreviewSymbol(this.sanitizePointPreviewSymbolLayer(symbolLayer), "point");
        return this.renderBlock({
            icon: ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-symbol-styler-symbol-preview", { contrast: true, key: `${key}__symbol-layer-preview`, symbol: symbolLayerPreview, options: _colorRampUtils_8d9a3bed_js__WEBPACK_IMPORTED_MODULE_1__.p, slot: "icon" })),
            key: `${key}__symbol-layer`,
            heading: mergedStrings.vectorMarker,
            content
        });
    }
    setMarkerSymbolLayerSize(symbol, size) {
        if ((0,_symbolUtils_f207d979_js__WEBPACK_IMPORTED_MODULE_2__.j)(this.activeSymbol)) {
            symbol.data.symbol.symbolLayers[0].size = normalizePt(_symbolUtils_f207d979_js__WEBPACK_IMPORTED_MODULE_2__.e.screenUtils.px2pt(size));
        }
        else {
            _symbolUtils_f207d979_js__WEBPACK_IMPORTED_MODULE_2__.e.cimSymbolUtils.scaleCIMSymbolTo(symbol, normalizePt(_symbolUtils_f207d979_js__WEBPACK_IMPORTED_MODULE_2__.e.screenUtils.px2pt(size)));
        }
    }
    renderCIMSolidFillSymbolLayerBlock(symbolLayer, key, contentOnly = false) {
        if (this.mode === "minimal") {
            return null;
        }
        const fillColor = (0,_color_16791b45_js__WEBPACK_IMPORTED_MODULE_3__.c)(symbolLayer.color, true);
        const noFillColor = (0,_color_16791b45_js__WEBPACK_IMPORTED_MODULE_3__.i)(fillColor);
        let colorContent = null;
        let transparencyContent = null;
        if (!this.isFillColorRamp() || symbolLayer.colorLocked) {
            colorContent = ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, this.mergedStrings.fillColor, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "input-color" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-color-input", { color: this.toColorPickerValue(fillColor),
                //compact={this.narrow}
                clearable: true, onArcgisColorInputChange: (event) => {
                    const color = (0,_color_16791b45_js__WEBPACK_IMPORTED_MODULE_3__.c)(event.currentTarget.color);
                    if (!(0,_color_16791b45_js__WEBPACK_IMPORTED_MODULE_3__.i)(color) && !noFillColor) {
                        color.a = fillColor.a;
                    }
                    symbolLayer.color = color.toJSON();
                    this.setInternalSymbol(this.symbol, true);
                    event.stopPropagation();
                }, popoverProps: this.popoverProps, storageId: _colorRampUtils_8d9a3bed_js__WEBPACK_IMPORTED_MODULE_1__.j, ref: this.setColorInputRef }))));
            transparencyContent = ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, this.mergedStrings.fillTransparency, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(SelectNumber, { flipLabels: this.percentLabelFlip, min: _colorRampUtils_8d9a3bed_js__WEBPACK_IMPORTED_MODULE_1__.o, max: _colorRampUtils_8d9a3bed_js__WEBPACK_IMPORTED_MODULE_1__.k, step: 1, unitsLabel: "%", value: (0,_color_16791b45_js__WEBPACK_IMPORTED_MODULE_3__.a)(fillColor.a), disabled: noFillColor, onValueChange: (transparency) => {
                    const alpha = (0,_color_16791b45_js__WEBPACK_IMPORTED_MODULE_3__.t)(transparency);
                    const color = fillColor.clone();
                    color.a = alpha;
                    symbolLayer.color = color.toJSON();
                    this.setInternalSymbol(this.symbol, true);
                }, withSteppers: !this.narrow, label: this.mergedStrings.fillTransparency })));
        }
        const content = colorContent || transparencyContent ? ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-symbol-styler-section", { embedded: true, key: `${key}__solid-fill-symbol-layer-content` }, colorContent, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-symbol-styler-section", { embedded: true, disabled: noFillColor }, transparencyContent))) : ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, this.mergedStrings.emptySymbolLayerMsg));
        if (contentOnly) {
            return content;
        }
        const symbolLayerPreview = this.getSymbolLayerPreviewSymbol(symbolLayer, "polygon");
        return this.renderBlock({
            icon: ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-symbol-styler-symbol-preview", { contrast: true, key: `${key}__solid-fill-symbol-layer-preview`, symbol: symbolLayerPreview, slot: "icon" })),
            heading: this.mergedStrings.solidFill,
            key: `${key}__solid-fill-symbol-layer`,
            content
        });
    }
    renderCIMSolidStrokeSymbolLayerBlock(symbolLayer, key, contentOnly = false, parentSymbolLayer) {
        if (this.mode === "minimal") {
            return null;
        }
        const strokeColor = (0,_color_16791b45_js__WEBPACK_IMPORTED_MODULE_3__.c)(symbolLayer.color, true);
        const withinHatchFillSymbolLayer = (parentSymbolLayer === null || parentSymbolLayer === void 0 ? void 0 : parentSymbolLayer.type) === "CIMHatchFill";
        const overriddenByColorRamp = withinHatchFillSymbolLayer && this.isFillColorRamp();
        const autoStrokeAdjust = this.sections.stroke.extraParts.autoStrokeAdjust;
        const noStrokeColor = (0,_color_16791b45_js__WEBPACK_IMPORTED_MODULE_3__.i)(strokeColor);
        let colorContent = null;
        let transparencyContent = null;
        if (!this.isStrokeColorRamp() || symbolLayer.colorLocked) {
            colorContent = ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { key: "stroke-color" }, contentOnly ? this.mergedStrings.strokeColor : this.mergedStrings.color, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "input-color" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-color-input", { color: this.toColorPickerValue(strokeColor),
                //compact={this.narrow}
                clearable: true, onArcgisColorInputChange: (event) => {
                    const color = (0,_color_16791b45_js__WEBPACK_IMPORTED_MODULE_3__.c)(event.currentTarget.color);
                    if (!(0,_color_16791b45_js__WEBPACK_IMPORTED_MODULE_3__.i)(color) && !noStrokeColor) {
                        color.a = strokeColor.a;
                    }
                    symbolLayer.color = color.toJSON();
                    this.setInternalSymbol(this.symbol, true);
                    event.stopPropagation();
                }, popoverProps: this.popoverProps, storageId: _colorRampUtils_8d9a3bed_js__WEBPACK_IMPORTED_MODULE_1__.j, ref: this.setColorInputRef }))));
            transparencyContent = ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { key: "stroke-transparency" }, contentOnly ? this.mergedStrings.strokeTransparency : this.mergedStrings.transparency, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(SelectNumber, { flipLabels: this.percentLabelFlip, min: _colorRampUtils_8d9a3bed_js__WEBPACK_IMPORTED_MODULE_1__.o, max: _colorRampUtils_8d9a3bed_js__WEBPACK_IMPORTED_MODULE_1__.k, step: 1, unitsLabel: "%", value: (0,_color_16791b45_js__WEBPACK_IMPORTED_MODULE_3__.a)(strokeColor.a), disabled: noStrokeColor, onValueChange: (transparency) => {
                    const alpha = (0,_color_16791b45_js__WEBPACK_IMPORTED_MODULE_3__.t)(transparency);
                    const color = strokeColor.clone();
                    color.a = alpha;
                    symbolLayer.color = color.toJSON();
                    this.setInternalSymbol(this.symbol, true);
                }, withSteppers: !this.narrow, label: contentOnly ? this.mergedStrings.strokeTransparency : this.mergedStrings.transparency })));
        }
        const content = ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-symbol-styler-section", { embedded: true, key: `${key}__solid-stroke-symbol-layer-content` }, overriddenByColorRamp ? null : colorContent, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-symbol-styler-section", { embedded: true, disabled: noStrokeColor }, overriddenByColorRamp ? null : transparencyContent, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, contentOnly ? this.mergedStrings.strokeWidth : this.mergedStrings.width, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(SelectNumber, { disabled: noStrokeColor ||
                (autoStrokeAdjust && autoStrokeAdjust !== "editable" && this.stroke.autoAdjusted), min: this.cimStrokeWidthBounds.min, max: this.cimStrokeWidthBounds.max, step: 1, unitsLabel: this.mergedStrings.px, value: normalizePx(_symbolUtils_f207d979_js__WEBPACK_IMPORTED_MODULE_2__.e.screenUtils.pt2px(symbolLayer.width)), onValueChange: (width) => {
                symbolLayer.width = normalizePt(_symbolUtils_f207d979_js__WEBPACK_IMPORTED_MODULE_2__.e.screenUtils.px2pt(width));
                this.setInternalSymbol(this.symbol, true);
            }, withSteppers: !this.narrow, label: contentOnly ? this.mergedStrings.strokeWidth : this.mergedStrings.width }))), withinHatchFillSymbolLayer
            ? this.renderCIMHatchFillPatternSection(parentSymbolLayer)
            : null));
        if (contentOnly) {
            return content;
        }
        const symbolLayerPreview = withinHatchFillSymbolLayer
            ? this.getSymbolLayerPreviewSymbol(Object.assign(Object.assign({}, parentSymbolLayer), { lineSymbol: {
                    type: "CIMLineSymbol",
                    symbolLayers: [symbolLayer]
                } }), "polygon")
            : this.getSymbolLayerPreviewSymbol(symbolLayer, "line");
        return this.renderBlock({
            icon: ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-symbol-styler-symbol-preview", { contrast: true, key: `${key}__solid-stroke-symbol-layer-preview`, symbol: symbolLayerPreview, slot: "icon" })),
            heading: withinHatchFillSymbolLayer
                ? this.mergedStrings.hatchFill
                : this.mergedStrings.solidStroke,
            key: `${key}__solid-stroke-symbol-layer`,
            content
        });
    }
    renderCIMHatchFillSymbolLayerBlocks(symbolLayer, key) {
        return this.renderCIMSymbolLayersContent(symbolLayer.lineSymbol, `${key}__hatch-symbol-fill-symbol-layers`, false, symbolLayer).flat();
    }
    renderCIMHatchFillPatternSection(symbolLayer) {
        var _a, _b, _c;
        const { mergedStrings } = this;
        const fillOffset = (_a = symbolLayer.offsetX) !== null && _a !== void 0 ? _a : 0; // we apply offset uniformly, so we use take X
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-block-section", { key: "hatch-fill-pattern", text: mergedStrings.pattern }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, mergedStrings.rotation, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(SelectNumber, { flipLabels: this.dir === "rtl", max: _colorRampUtils_8d9a3bed_js__WEBPACK_IMPORTED_MODULE_1__.l, min: _colorRampUtils_8d9a3bed_js__WEBPACK_IMPORTED_MODULE_1__.r, onValueChange: (rotation) => {
                symbolLayer.rotation = Math.abs(rotation);
                this.setInternalSymbol(this.symbol, true);
            }, step: 1, unitsLabel: "\u00BA", value: (_b = symbolLayer.rotation) !== null && _b !== void 0 ? _b : 0, withSteppers: !this.narrow, label: mergedStrings.rotation })), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, mergedStrings.separation, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(SelectNumber, { flipLabels: this.dir === "rtl", max: _colorRampUtils_8d9a3bed_js__WEBPACK_IMPORTED_MODULE_1__.v, min: _colorRampUtils_8d9a3bed_js__WEBPACK_IMPORTED_MODULE_1__.w, onValueChange: (separation) => {
                symbolLayer.separation = separation;
                this.setInternalSymbol(this.symbol, true);
            }, step: 1, value: (_c = symbolLayer.separation) !== null && _c !== void 0 ? _c : 0, unitsLabel: mergedStrings.px, withSteppers: !this.narrow, label: mergedStrings.separation })), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, mergedStrings.offset, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(SelectNumber, { flipLabels: this.dir === "rtl", max: _colorRampUtils_8d9a3bed_js__WEBPACK_IMPORTED_MODULE_1__.t, min: _colorRampUtils_8d9a3bed_js__WEBPACK_IMPORTED_MODULE_1__.u, onValueChange: (offset) => {
                symbolLayer.offsetX = offset;
                symbolLayer.offsetY = offset;
                this.setInternalSymbol(this.symbol, true);
            }, step: 1, value: fillOffset, unitsLabel: mergedStrings.px, withSteppers: !this.narrow, label: mergedStrings.offset }))));
    }
    renderCIMPictureMarkerSymbolLayerBlock(symbolLayer, key, contentOnly = false) {
        if (this.mode === "minimal") {
            return null;
        }
        const tintColor = (0,_color_16791b45_js__WEBPACK_IMPORTED_MODULE_3__.c)(symbolLayer.tintColor, true);
        const { sections: { marker: { parts: { size } } }, marker } = this;
        const autoSizeAdjust = typeof size === "object" && (size === null || size === void 0 ? void 0 : size.autoSizeAdjust);
        const updateTargetSymbol = this.getSymbolLayerPreviewSymbol(symbolLayer, "point");
        const noTintColor = (0,_color_16791b45_js__WEBPACK_IMPORTED_MODULE_3__.i)(tintColor);
        const content = ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { key: `${key}__picture-marker-symbol-layer` }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-symbol-styler-section", { embedded: true, key: `${key}__picture-marker-symbol-layer-content` }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, this.mergedStrings.fillColor, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "input-color" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-color-input", { color: this.toColorPickerValue(tintColor),
            //compact={this.narrow}
            clearable: true, onArcgisColorInputChange: (event) => {
                const color = (0,_color_16791b45_js__WEBPACK_IMPORTED_MODULE_3__.c)(event.currentTarget.color);
                if (!(0,_color_16791b45_js__WEBPACK_IMPORTED_MODULE_3__.i)(color) && !noTintColor) {
                    color.a = tintColor.a;
                }
                symbolLayer.tintColor = color.toJSON();
                this.setInternalSymbol(this.symbol, true);
                event.stopPropagation();
            }, popoverProps: this.popoverProps, storageId: _colorRampUtils_8d9a3bed_js__WEBPACK_IMPORTED_MODULE_1__.j, ref: this.setColorInputRef }))), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-symbol-styler-section", { embedded: true, disabled: noTintColor }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, this.mergedStrings.fillTransparency, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(SelectNumber, { flipLabels: this.percentLabelFlip, min: _colorRampUtils_8d9a3bed_js__WEBPACK_IMPORTED_MODULE_1__.o, max: _colorRampUtils_8d9a3bed_js__WEBPACK_IMPORTED_MODULE_1__.k, step: 1, unitsLabel: "%", value: (0,_color_16791b45_js__WEBPACK_IMPORTED_MODULE_3__.a)(tintColor.a), disabled: noTintColor, onValueChange: (transparency) => {
                const alpha = (0,_color_16791b45_js__WEBPACK_IMPORTED_MODULE_3__.t)(transparency);
                const color = tintColor.clone();
                color.a = alpha;
                symbolLayer.tintColor = color.toJSON();
                this.setInternalSymbol(this.symbol, true);
            }, withSteppers: !this.narrow, label: this.mergedStrings.fillTransparency })), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, this.mergedStrings.symbolSize, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(SelectNumber, { disabled: noTintColor ||
                (autoSizeAdjust && autoSizeAdjust !== "editable" && marker.autoAdjusted), min: _colorRampUtils_8d9a3bed_js__WEBPACK_IMPORTED_MODULE_1__.n, max: _colorRampUtils_8d9a3bed_js__WEBPACK_IMPORTED_MODULE_1__.q, step: 1, unitsLabel: this.mergedStrings.px, value: normalizePx(_symbolUtils_f207d979_js__WEBPACK_IMPORTED_MODULE_2__.e.screenUtils.pt2px(symbolLayer.size)), onValueChange: (size) => {
                this.setMarkerSymbolLayerSize(updateTargetSymbol, size);
                this.setInternalSymbol(this.symbol, true);
            }, withSteppers: !this.narrow, label: this.mergedStrings.symbolSize })))), this.renderCIMMarkerPlacementSection(symbolLayer), this.renderCIMPictureMarkerAnimationSection(symbolLayer)));
        if (contentOnly) {
            return content;
        }
        const symbolLayerPreview = this.getSymbolLayerPreviewSymbol(this.sanitizePointPreviewSymbolLayer(symbolLayer), "point");
        return this.renderBlock({
            icon: ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-symbol-styler-symbol-preview", { contrast: true, key: `${key}__solid-fill-symbol-layer-preview`, symbol: symbolLayerPreview, options: _colorRampUtils_8d9a3bed_js__WEBPACK_IMPORTED_MODULE_1__.p, slot: "icon" })),
            heading: this.mergedStrings.pictureMarker,
            key: `${key}__picture-marker-symbol-layer`,
            content
        });
    }
    sanitizePointPreviewSymbolLayer(symbolLayer) {
        return Object.assign(Object.assign({}, symbolLayer), {
            // ensure markerPlacement is not set on CIM point symbols symbol layer for proper preview
            markerPlacement: undefined
        });
    }
    renderCIMPictureStrokeSymbolLayerBlock(symbolLayer, key, contentOnly = false) {
        if (this.mode === "minimal") {
            return null;
        }
        const tintColor = (0,_color_16791b45_js__WEBPACK_IMPORTED_MODULE_3__.c)(symbolLayer.tintColor, true);
        const { sections: { marker: { parts: { size } } }, marker } = this;
        const autoSizeAdjust = typeof size === "object" && (size === null || size === void 0 ? void 0 : size.autoSizeAdjust);
        const noTintColor = (0,_color_16791b45_js__WEBPACK_IMPORTED_MODULE_3__.i)(tintColor);
        const content = ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-symbol-styler-section", { embedded: true, key: `${key}__picture-stroke-symbol-layer-content` }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, this.mergedStrings.fillColor, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "input-color" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-color-input", { color: this.toColorPickerValue(tintColor),
            //compact={this.narrow}
            clearable: true, onArcgisColorInputChange: (event) => {
                const color = (0,_color_16791b45_js__WEBPACK_IMPORTED_MODULE_3__.c)(event.currentTarget.color);
                if (!(0,_color_16791b45_js__WEBPACK_IMPORTED_MODULE_3__.i)(color) && !noTintColor) {
                    color.a = tintColor.a;
                }
                symbolLayer.tintColor = color.toJSON();
                this.setInternalSymbol(this.symbol, true);
                event.stopPropagation();
            }, popoverProps: this.popoverProps, storageId: _colorRampUtils_8d9a3bed_js__WEBPACK_IMPORTED_MODULE_1__.j, ref: this.setColorInputRef }))), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-symbol-styler-section", { embedded: true, disabled: noTintColor }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, this.mergedStrings.fillTransparency, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(SelectNumber, { flipLabels: this.percentLabelFlip, min: _colorRampUtils_8d9a3bed_js__WEBPACK_IMPORTED_MODULE_1__.o, max: _colorRampUtils_8d9a3bed_js__WEBPACK_IMPORTED_MODULE_1__.k, step: 1, unitsLabel: "%", value: (0,_color_16791b45_js__WEBPACK_IMPORTED_MODULE_3__.a)(tintColor.a), disabled: noTintColor, onValueChange: (transparency) => {
                const alpha = (0,_color_16791b45_js__WEBPACK_IMPORTED_MODULE_3__.t)(transparency);
                const color = tintColor.clone();
                color.a = alpha;
                symbolLayer.tintColor = color.toJSON();
                this.setInternalSymbol(this.symbol, true);
            }, withSteppers: !this.narrow, label: this.mergedStrings.fillTransparency })), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, this.mergedStrings.symbolSize, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(SelectNumber, { disabled: noTintColor ||
                (autoSizeAdjust && autoSizeAdjust !== "editable" && marker.autoAdjusted), min: _colorRampUtils_8d9a3bed_js__WEBPACK_IMPORTED_MODULE_1__.n, max: _colorRampUtils_8d9a3bed_js__WEBPACK_IMPORTED_MODULE_1__.q, step: 1, unitsLabel: this.mergedStrings.px, value: normalizePx(_symbolUtils_f207d979_js__WEBPACK_IMPORTED_MODULE_2__.e.screenUtils.pt2px(symbolLayer.width)), onValueChange: (width) => {
                symbolLayer.width = normalizePt(_symbolUtils_f207d979_js__WEBPACK_IMPORTED_MODULE_2__.e.screenUtils.px2pt(width));
                this.setInternalSymbol(this.symbol, true);
            }, withSteppers: !this.narrow, label: this.mergedStrings.symbolSize })))));
        if (contentOnly) {
            return content;
        }
        const symbolLayerPreview = this.getSymbolLayerPreviewSymbol(symbolLayer, "line");
        return this.renderBlock({
            icon: ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-symbol-styler-symbol-preview", { contrast: true, key: `${key}__picture-stroke-symbol-layer-preview`, symbol: symbolLayerPreview, slot: "icon" })),
            heading: this.mergedStrings.pictureStroke,
            key: `${key}__picture-stroke-symbol-layer`,
            content
        });
    }
    renderCIMPictureFillSymbolLayerBlock(symbolLayer, key, contentOnly = false) {
        if (this.mode === "minimal") {
            return null;
        }
        const tintColor = (0,_color_16791b45_js__WEBPACK_IMPORTED_MODULE_3__.c)(symbolLayer.tintColor, true);
        const { sections: { marker: { parts: { size } } }, marker } = this;
        const autoSizeAdjust = typeof size === "object" && (size === null || size === void 0 ? void 0 : size.autoSizeAdjust);
        const noTintColor = (0,_color_16791b45_js__WEBPACK_IMPORTED_MODULE_3__.i)(tintColor);
        const content = ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-symbol-styler-section", { embedded: true, key: `${key}__picture-fill-symbol-layer-content` }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, this.mergedStrings.fillColor, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "input-color" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-color-input", { color: this.toColorPickerValue(tintColor),
            //compact={this.narrow}
            clearable: true, onArcgisColorInputChange: (event) => {
                const color = (0,_color_16791b45_js__WEBPACK_IMPORTED_MODULE_3__.c)(event.currentTarget.color);
                if (!(0,_color_16791b45_js__WEBPACK_IMPORTED_MODULE_3__.i)(color) && !noTintColor) {
                    color.a = tintColor.a;
                }
                symbolLayer.tintColor = color.toJSON();
                this.setInternalSymbol(this.symbol, true);
                event.stopPropagation();
            }, popoverProps: this.popoverProps, storageId: _colorRampUtils_8d9a3bed_js__WEBPACK_IMPORTED_MODULE_1__.j, ref: this.setColorInputRef }))), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-symbol-styler-section", { embedded: true, disabled: noTintColor }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, this.mergedStrings.fillTransparency, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(SelectNumber, { flipLabels: this.percentLabelFlip, min: _colorRampUtils_8d9a3bed_js__WEBPACK_IMPORTED_MODULE_1__.o, max: _colorRampUtils_8d9a3bed_js__WEBPACK_IMPORTED_MODULE_1__.k, step: 1, unitsLabel: "%", value: (0,_color_16791b45_js__WEBPACK_IMPORTED_MODULE_3__.a)(tintColor.a), disabled: noTintColor, onValueChange: (transparency) => {
                const alpha = (0,_color_16791b45_js__WEBPACK_IMPORTED_MODULE_3__.t)(transparency);
                const color = tintColor.clone();
                color.a = alpha;
                symbolLayer.tintColor = color.toJSON();
                this.setInternalSymbol(this.symbol, true);
            }, withSteppers: !this.narrow, label: this.mergedStrings.fillTransparency })), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, this.mergedStrings.symbolSize, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(SelectNumber, { disabled: noTintColor ||
                (autoSizeAdjust && autoSizeAdjust !== "editable" && marker.autoAdjusted), min: _colorRampUtils_8d9a3bed_js__WEBPACK_IMPORTED_MODULE_1__.n, max: _colorRampUtils_8d9a3bed_js__WEBPACK_IMPORTED_MODULE_1__.q, step: 1, unitsLabel: this.mergedStrings.px, value: normalizePx(_symbolUtils_f207d979_js__WEBPACK_IMPORTED_MODULE_2__.e.screenUtils.pt2px(symbolLayer.height)), onValueChange: (height) => {
                symbolLayer.height = normalizePt(_symbolUtils_f207d979_js__WEBPACK_IMPORTED_MODULE_2__.e.screenUtils.px2pt(height));
                this.setInternalSymbol(this.symbol, true);
            }, withSteppers: !this.narrow, label: this.mergedStrings.symbolSize })))));
        if (contentOnly) {
            return content;
        }
        const symbolLayerPreview = this.getSymbolLayerPreviewSymbol(symbolLayer, "polygon");
        return this.renderBlock({
            icon: ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-symbol-styler-symbol-preview", { contrast: true, key: `${key}__picture-fill-symbol-layer-preview`, symbol: symbolLayerPreview, slot: "icon" })),
            heading: this.mergedStrings.pictureFill,
            key: `${key}__picture-fill-symbol-layer`,
            content
        });
    }
    renderCIMPictureMarkerAnimationSection(symbolLayer) {
        var _a, _b, _c;
        const { dir, mergedStrings } = this;
        const { animatedSymbolProperties } = symbolLayer;
        if (animatedSymbolProperties) {
            return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-block-section", { key: "picture-marker-animation", text: mergedStrings.animation }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { dir: dir, layout: "inline" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-checkbox", { checked: animatedSymbolProperties.playAnimation, onCalciteCheckboxChange: (event) => {
                    const { checked } = event.currentTarget;
                    animatedSymbolProperties.playAnimation = checked;
                    this.setInternalSymbol(this.symbol, true);
                } }), mergedStrings.playAnimation), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { dir: dir, layout: "inline" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-checkbox", { checked: animatedSymbolProperties.reverseAnimation, onCalciteCheckboxChange: (event) => {
                    const { checked } = event.currentTarget;
                    animatedSymbolProperties.reverseAnimation = checked;
                    this.setInternalSymbol(this.symbol, true);
                } }), mergedStrings.reverseAnimation), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, mergedStrings.startTimeOffset, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-segmented-control", { onCalciteSegmentedControlChange: (event) => {
                    const value = event.currentTarget.value;
                    animatedSymbolProperties.randomizeStartTime = value === "random";
                    this.setInternalSymbol(this.symbol, true);
                } }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-segmented-control-item", { value: "random", checked: animatedSymbolProperties.randomizeStartTime }, mergedStrings.randomized), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-segmented-control-item", { value: "manual", checked: !animatedSymbolProperties.randomizeStartTime }, mergedStrings.manualOffset))), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, mergedStrings.manualOffset, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(SelectNumber, { disabled: animatedSymbolProperties.randomizeStartTime, max: _colorRampUtils_8d9a3bed_js__WEBPACK_IMPORTED_MODULE_1__.x, min: _colorRampUtils_8d9a3bed_js__WEBPACK_IMPORTED_MODULE_1__.y, onValueChange: (offset) => {
                    animatedSymbolProperties.startTimeOffset = offset;
                    this.setInternalSymbol(this.symbol, true);
                }, step: 1, value: (_a = animatedSymbolProperties.startTimeOffset) !== null && _a !== void 0 ? _a : 0, withSteppers: !this.narrow, label: mergedStrings.manualOffset })), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, mergedStrings.duration, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(SelectNumber, { max: _colorRampUtils_8d9a3bed_js__WEBPACK_IMPORTED_MODULE_1__.x, min: _colorRampUtils_8d9a3bed_js__WEBPACK_IMPORTED_MODULE_1__.y, onValueChange: (duration) => {
                    animatedSymbolProperties.duration = duration;
                    this.setInternalSymbol(this.symbol, true);
                }, step: 1, value: (_b = animatedSymbolProperties.duration) !== null && _b !== void 0 ? _b : 0, withSteppers: !this.narrow, label: mergedStrings.duration })), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, mergedStrings.repeatType, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-segmented-control", { onCalciteSegmentedControlChange: (event) => {
                    const type = event.currentTarget
                        .value;
                    animatedSymbolProperties.repeatType = type;
                    this.setInternalSymbol(this.symbol, true);
                } }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-segmented-control-item", { value: "None", checked: animatedSymbolProperties.repeatType === "None" }, mergedStrings.none), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-segmented-control-item", { value: "Loop", checked: animatedSymbolProperties.repeatType === "Loop" }, mergedStrings.loop), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-segmented-control-item", { value: "Oscillate", checked: animatedSymbolProperties.repeatType === "Oscillate" }, mergedStrings.oscillate))), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, mergedStrings.repeatDelay, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(SelectNumber, { max: _colorRampUtils_8d9a3bed_js__WEBPACK_IMPORTED_MODULE_1__.x, min: _colorRampUtils_8d9a3bed_js__WEBPACK_IMPORTED_MODULE_1__.y, onValueChange: (delay) => {
                    animatedSymbolProperties.repeatDelay = delay;
                    this.setInternalSymbol(this.symbol, true);
                }, step: 1, value: (_c = animatedSymbolProperties.repeatDelay) !== null && _c !== void 0 ? _c : 0, withSteppers: !this.narrow, label: mergedStrings.repeatDelay }))));
        }
        else {
            return null;
        }
    }
    renderCIMMarkerPlacementSection(symbolLayer) {
        const { dir, mergedStrings } = this;
        const { markerPlacement } = symbolLayer;
        if ((markerPlacement === null || markerPlacement === void 0 ? void 0 : markerPlacement.type) === "CIMMarkerPlacementInsidePolygon" &&
            ((markerPlacement === null || markerPlacement === void 0 ? void 0 : markerPlacement.gridType) === "Random" || (markerPlacement === null || markerPlacement === void 0 ? void 0 : markerPlacement.gridType) === "Fixed")) {
            return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-block-section", { key: "marker-placement", text: mergedStrings.markerPlacement }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, mergedStrings.gridType, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-segmented-control", { onCalciteSegmentedControlChange: (event) => {
                    const value = event.currentTarget
                        .value;
                    markerPlacement.gridType = value;
                    this.setInternalSymbol(this.symbol, true);
                } }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-segmented-control-item", { value: "Fixed", checked: markerPlacement.gridType === "Fixed" }, mergedStrings.fixed), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-segmented-control-item", { value: "Random", checked: markerPlacement.gridType === "Random" }, mergedStrings.random))), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, mergedStrings.randomness, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(SelectNumber, { disabled: markerPlacement.gridType === "Fixed", flipLabels: this.percentLabelFlip, max: _colorRampUtils_8d9a3bed_js__WEBPACK_IMPORTED_MODULE_1__.B, min: _colorRampUtils_8d9a3bed_js__WEBPACK_IMPORTED_MODULE_1__.D, onValueChange: (randomness) => {
                    markerPlacement.randomness = randomness;
                    this.setInternalSymbol(this.symbol, true);
                }, step: 1, value: markerPlacement.randomness, unitsLabel: "%", withSteppers: !this.narrow, label: mergedStrings.randomness })), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, mergedStrings.stepX, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(SelectNumber, { max: _colorRampUtils_8d9a3bed_js__WEBPACK_IMPORTED_MODULE_1__.z, min: _colorRampUtils_8d9a3bed_js__WEBPACK_IMPORTED_MODULE_1__.A, onValueChange: (step) => {
                    markerPlacement.stepX = normalizePt(_symbolUtils_f207d979_js__WEBPACK_IMPORTED_MODULE_2__.e.screenUtils.px2pt(step));
                    this.setInternalSymbol(this.symbol, true);
                }, step: 1, value: normalizePx(_symbolUtils_f207d979_js__WEBPACK_IMPORTED_MODULE_2__.e.screenUtils.pt2px(markerPlacement.stepX)), unitsLabel: mergedStrings.px, withSteppers: !this.narrow, label: mergedStrings.stepX })), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, mergedStrings.stepY, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(SelectNumber, { max: _colorRampUtils_8d9a3bed_js__WEBPACK_IMPORTED_MODULE_1__.z, min: _colorRampUtils_8d9a3bed_js__WEBPACK_IMPORTED_MODULE_1__.A, onValueChange: (step) => {
                    markerPlacement.stepY = normalizePt(_symbolUtils_f207d979_js__WEBPACK_IMPORTED_MODULE_2__.e.screenUtils.px2pt(step));
                    this.setInternalSymbol(this.symbol, true);
                }, step: 1, unitsLabel: mergedStrings.px, value: normalizePx(_symbolUtils_f207d979_js__WEBPACK_IMPORTED_MODULE_2__.e.screenUtils.pt2px(markerPlacement.stepY)), withSteppers: !this.narrow, label: mergedStrings.stepY })), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { dir: dir, layout: "inline" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-checkbox", { checked: markerPlacement.shiftOddRows && markerPlacement.gridType === "Fixed", disabled: markerPlacement.gridType === "Random", onCalciteCheckboxChange: (event) => {
                    const { checked } = event.currentTarget;
                    markerPlacement.shiftOddRows = checked;
                    this.setInternalSymbol(this.symbol, true);
                } }), mergedStrings.shiftOddRows)));
        }
        else {
            return null;
        }
    }
    renderColorFillTransparencyContent(label, disabled) {
        var _a;
        const { fill } = this;
        const max = 100;
        const min = 0;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, label, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(SelectNumber, { flipLabels: this.percentLabelFlip, min: min, max: max, step: 1, unitsLabel: "%", value: (0,_color_16791b45_js__WEBPACK_IMPORTED_MODULE_3__.a)((_a = fill.color) === null || _a === void 0 ? void 0 : _a.a), onValueChange: this.onColorFillTransparencyChange, withSteppers: !this.narrow, disabled: disabled, label: label })));
    }
    renderColorRampFillBlock(embedded = false) {
        const section = this.sections.fill;
        const { parts } = section;
        const shouldHide = this.hasActivePictureMarkerSymbol() || this.hasActiveLineOnlySimpleMarkerSymbol();
        if (shouldHide) {
            return null;
        }
        const content = [];
        if (parts.colorRamps) {
            content.push({
                content: this.renderFillColorRampsContent()
            });
        }
        if (parts.transparency) {
            content.push({
                content: this.renderColorRampFillTransparencyContent()
            });
        }
        return this.renderSection({
            key: "color-ramp-fill",
            disabled: section.optional === "non-editable",
            embedded,
            sectionContent: content
        });
    }
    renderFillColorRampsContent() {
        const { style } = this.config.sections.fill;
        const { activeCategory, colorRamps } = this.sections.fill;
        return this.renderRampsContent({
            style,
            activeCategory,
            colorRampStops: this.fill.color,
            colorRamps,
            heading: this.mergedStrings.colors,
            onCategoryChange: this.onFillColorRampCategoryChange,
            isSelected: (colorRamp) => {
                const currentColorRamp = this.fill.color;
                return equal(currentColorRamp, colorRamp.stops, style === "2d");
            },
            onSelect: (event) => {
                const { detail: colorRamp } = event;
                const color = colorRamp.stops.slice();
                const { fill } = this;
                const mergedFill = Object.assign(Object.assign({}, fill), { color });
                this.fill = mergedFill;
                this.tempStrokeColorRampStateStops = color;
                this.arcgisSymbolStylerFillChange.emit(mergedFill);
                this.setInternalSymbol(this.syncSymbolProps(this.symbol, { cimChangeContext: "root" }), true);
                event.stopPropagation();
            },
            onFlip: this.flipFillColorRamps
        });
    }
    renderRampsContent(options) {
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, options.heading, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-symbol-styler-color-ramp-input", { options: options, strings: this.mergedStrings, popoverProps: this.popoverProps, style: {
                "--scroller-max-height": "var(--ramp-scroller-max-height)"
            }, ref: this.setRampInputRef })));
    }
    renderColorRampFillTransparencyContent() {
        const { fill } = this;
        const max = 100;
        const min = 0;
        const color = fill.color[0];
        // for CIM symbols this might be a rgba array
        const alpha = color.length === 4 ? color[3] / 255 : color.a;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, this.mergedStrings.fillTransparency, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(SelectNumber, { flipLabels: this.percentLabelFlip, min: min, max: max, step: 1, unitsLabel: "%", value: (0,_color_16791b45_js__WEBPACK_IMPORTED_MODULE_3__.a)(alpha), onValueChange: this.onColorRampFillTransparencyChange, withSteppers: !this.narrow, label: this.mergedStrings.fillTransparency })));
    }
    renderStrokeBlock() {
        const { stroke } = this.config.sections;
        if (stroke.type === "color") {
            return this.renderColorStrokeBlock();
        }
        return this.renderColorRampStrokeBlock();
    }
    renderColorStrokeBlock() {
        const sections = this.sections;
        const section = sections.stroke;
        const { parts } = section;
        const content = [];
        if (parts.suggestedColors || parts.customColor) {
            content.push({
                content: this.renderStrokeColorsContent()
            });
        }
        if (parts.transparency || parts.extra) {
            const innerContent = [];
            if (parts.transparency) {
                innerContent.push(this.showingRampOptionsInStroke()
                    ? this.renderColorRampStrokeTransparencyContent(!section.enabled)
                    : this.renderColorStrokeTransparencyContent(!section.enabled));
            }
            if (parts.extra) {
                innerContent.push(this.renderStrokeExtraContent(!section.enabled));
            }
            content.push({
                content: ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-symbol-styler-section", { embedded: true, disabled: !section.enabled }, innerContent))
            });
        }
        return this.renderSection({
            key: "color-stroke",
            disabled: section.optional === "non-editable" || this.hasActivePictureMarkerSymbol(),
            sectionContent: content
        });
    }
    renderStrokeColorRampsContent() {
        const { style } = this.config.sections.stroke;
        const { activeCategory, colorRamps } = this.sections.stroke;
        return this.renderRampsContent({
            style,
            activeCategory,
            colorRampStops: this.stroke.color,
            colorRamps,
            heading: this.getStrokeString("color"),
            onCategoryChange: this.onStrokeColorRampCategoryChange,
            isSelected: (colorRamp) => {
                const currentColorRamp = this.stroke.color;
                return equal(currentColorRamp, colorRamp.stops);
            },
            onSelect: (event) => {
                const { detail: colorRamp } = event;
                const color = colorRamp.stops.slice();
                const { stroke } = this;
                const mergedStroke = Object.assign(Object.assign({}, stroke), { color });
                this.stroke = mergedStroke;
                this.arcgisSymbolStylerStrokeChange.emit(normalizeSizeProp(mergedStroke));
                this.setInternalSymbol(this.syncSymbolProps(this.symbol, { cimChangeContext: "root" }), true);
                event.stopPropagation();
            },
            onFlip: this.flipStrokeColorRamps
        });
    }
    showingRampOptionsInStroke() {
        const strokeSectionConfig = this.config.sections.stroke;
        const shouldShowFillColorsForOutline = isLineOnlySymbol(this.activeSymbol);
        const fillType = this.sections.fill.type;
        return (shouldShowFillColorsForOutline &&
            fillType === "color-ramp" &&
            strokeSectionConfig.type === "color");
    }
    renderStrokeColorsContent() {
        const strokeSection = this.sections.stroke;
        if (this.showingRampOptionsInStroke()) {
            const activeCategory = this.tempStrokeColorRampStateActiveCategory;
            const { style } = this.config.sections.fill;
            const { colorRamps } = this.sections.fill;
            return this.renderRampsContent({
                style,
                activeCategory,
                colorRampStops: this.tempStrokeColorRampStateStops,
                colorRamps,
                heading: this.getStrokeString("color"),
                onCategoryChange: (event) => {
                    const dropdown = event.currentTarget;
                    const activeCategory = dropdown.selectedItems[0].getAttribute("data-value");
                    this.tempStrokeColorRampStateActiveCategory = activeCategory;
                    event.stopPropagation();
                },
                isSelected: (colorRamp) => {
                    const currentColorRampStops = this.tempStrokeColorRampStateStops;
                    return equal(currentColorRampStops, colorRamp.stops);
                },
                onSelect: (event) => {
                    const { detail: colorRamp } = event;
                    const color = colorRamp.stops.slice();
                    const { stroke } = this;
                    const mergedStroke = Object.assign(Object.assign({}, stroke), { color });
                    this.stroke = mergedStroke;
                    this.tempStrokeColorRampStateStops = color;
                    this.arcgisSymbolStylerStrokeChange.emit(normalizeSizeProp(mergedStroke));
                    this.setInternalSymbol(this.syncSymbolProps(this.symbol), true);
                    event.stopPropagation();
                },
                onFlip: this.flipFillColorRamps
            });
        }
        const color = strokeSection.enabled
            ? this.toColorPickerValue(this.stroke.color)
            : null;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, this.getStrokeString("color"), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-color-input", { color: color,
            //compact={this.narrow}
            clearable: strokeSection.optional !== false, onArcgisColorInputChange: (event) => {
                const selectedColor = event.currentTarget.color;
                if (!selectedColor) {
                    this.onStrokeEnabledChange(false);
                    // no updates to color needed
                    return;
                }
                if (!strokeSection.enabled) {
                    this.onStrokeEnabledChange(true);
                }
                const color = (0,_color_16791b45_js__WEBPACK_IMPORTED_MODULE_3__.c)(selectedColor);
                const currentColor = this.stroke.color;
                const { stroke } = this;
                const mergedStroke = Object.assign(Object.assign({}, stroke), { color: (0,_color_16791b45_js__WEBPACK_IMPORTED_MODULE_3__.c)(adjustTransparencyIfNeeded(currentColor, Object.assign(Object.assign(Object.assign({}, currentColor), color), { a: currentColor.a }))) });
                this.stroke = mergedStroke;
                this.arcgisSymbolStylerStrokeChange.emit(normalizeSizeProp(mergedStroke));
                this.setInternalSymbol(this.syncSymbolProps(this.symbol), true);
                event.stopPropagation();
            }, popoverProps: this.popoverProps, storageId: _colorRampUtils_8d9a3bed_js__WEBPACK_IMPORTED_MODULE_1__.j, ref: this.setColorInputRef })));
    }
    renderColorStrokeTransparencyContent(disabled) {
        const { stroke } = this;
        const max = 100;
        const min = 0;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, this.getStrokeString("transparency"), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(SelectNumber, { flipLabels: this.percentLabelFlip, min: min, max: max, step: 1, unitsLabel: "%", value: (0,_color_16791b45_js__WEBPACK_IMPORTED_MODULE_3__.a)(stroke.color.a), onValueChange: this.onColorStrokeTransparencyChange, withSteppers: !this.narrow, disabled: disabled, label: this.getStrokeString("transparency") })));
    }
    renderStrokeExtraContent(disabled) {
        var _a, _b;
        const { sections: { stroke: { extraParts: { arrow, autoStrokeAdjust, style, width } } }, stroke } = this;
        const maxWidthInPx = 18;
        const editingLine = this.editGeometry === "line";
        const editingPolygon = this.editGeometry === "polygon";
        const minWidthInPx = editingLine ? 0.1 : 0;
        const isCim = (0,_symbolUtils_f207d979_js__WEBPACK_IMPORTED_MODULE_2__.i)(this.symbol);
        const canUpdateStyle = !isCim && style && (editingLine || editingPolygon);
        const canUpdateArrows = !isCim && arrow && editingLine;
        const canUpdateWidth = !isCim && width;
        const canUpdateAutoAdjust = !isCim && autoStrokeAdjust;
        const dir = (0,_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_6__.g)(this.el);
        const currentPlacement = toArrowPlacement(stroke.marker);
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: _colorRampUtils_8d9a3bed_js__WEBPACK_IMPORTED_MODULE_1__.C.contentGroup }, canUpdateWidth ? ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { dir: dir, key: "width-options" }, this.getStrokeString("width"), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(SelectNumber, { disabled: disabled ||
                (autoStrokeAdjust && autoStrokeAdjust !== "editable" && stroke.autoAdjusted), min: minWidthInPx, max: maxWidthInPx, step: 1, unitsLabel: this.mergedStrings.px, value: stroke.size, onValueChange: this.onStrokeWidthChange, withSteppers: !this.narrow, label: this.getStrokeString("width") }))) : null, canUpdateAutoAdjust
            ? this.renderAutoAdjust(dir, stroke.autoAdjusted, this.mergedStrings.autoAdjustStroke, this.onAutoAdjustStrokeChange)
            : null, canUpdateArrows ? ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { dir: dir, key: "arrow-options" }, this.mergedStrings.arrow, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-dropdown", { class: {
                [_colorRampUtils_8d9a3bed_js__WEBPACK_IMPORTED_MODULE_1__.C.iconDropdown]: true,
                [_colorRampUtils_8d9a3bed_js__WEBPACK_IMPORTED_MODULE_1__.C.arrowDropdown]: true
            }, onCalciteDropdownSelect: this.onStrokeArrowChange, widthScale: "l", placement: "top-end", "overlay-positioning": (_a = this.popoverProps) === null || _a === void 0 ? void 0 : _a.overlayPositioning, scale: "s" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { role: "button", slot: "trigger", tabIndex: 0 }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { "data-arrow": currentPlacement, class: _colorRampUtils_8d9a3bed_js__WEBPACK_IMPORTED_MODULE_1__.C.iconDropdownSelected, style: this.getSelectedArrowPatternStyle() }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { icon: "chevron-down", scale: "s" })), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-dropdown-group", null, _colorRampUtils_8d9a3bed_js__WEBPACK_IMPORTED_MODULE_1__.s.map((arrow) => ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-dropdown-item", { selected: arrow === currentPlacement, "data-arrow": arrow }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: _colorRampUtils_8d9a3bed_js__WEBPACK_IMPORTED_MODULE_1__.C.iconDropdownItemContent, "data-arrow": arrow, style: this.getArrowPatternOptionStyle() })))))))) : null, canUpdateStyle ? ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { dir: dir, key: "pattern-options" }, this.mergedStrings.pattern, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-dropdown", { class: {
                [_colorRampUtils_8d9a3bed_js__WEBPACK_IMPORTED_MODULE_1__.C.iconDropdown]: true,
                [_colorRampUtils_8d9a3bed_js__WEBPACK_IMPORTED_MODULE_1__.C.styleDropdown]: true
            }, onCalciteDropdownSelect: this.onStrokeStyleChange, widthScale: "l", placement: "top-end", "overlay-positioning": (_b = this.popoverProps) === null || _b === void 0 ? void 0 : _b.overlayPositioning, scale: "s" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { role: "button", slot: "trigger", tabIndex: 0 }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: _colorRampUtils_8d9a3bed_js__WEBPACK_IMPORTED_MODULE_1__.C.iconDropdownSelected, style: this.getLinePatternStyle(stroke.style) }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { icon: "chevron-down", scale: "s" })), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-dropdown-group", null, _colorRampUtils_8d9a3bed_js__WEBPACK_IMPORTED_MODULE_1__.b.map((style) => {
            return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-dropdown-item", { selected: style === stroke.style, "data-style": style }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { style: this.getLinePatternStyle(style), class: _colorRampUtils_8d9a3bed_js__WEBPACK_IMPORTED_MODULE_1__.C.iconDropdownItemContent })));
        }))))) : null));
    }
    renderColorRampStrokeBlock(embedded = false) {
        const section = this.sections.stroke;
        const parts = section.parts;
        const content = [];
        if (parts.colorRamps) {
            content.push({
                content: this.renderStrokeColorRampsContent()
            });
        }
        if (parts.transparency) {
            content.push({
                content: this.renderColorRampStrokeTransparencyContent(section.optional === "non-editable" || this.hasActivePictureMarkerSymbol())
            });
        }
        if (parts.extra) {
            content.push({
                content: this.renderStrokeExtraContent(section.optional === "non-editable" || this.hasActivePictureMarkerSymbol())
            });
        }
        return this.renderSection({
            key: "color-ramp-stroke",
            disabled: section.optional === "non-editable" || this.hasActivePictureMarkerSymbol(),
            embedded,
            sectionContent: content
        });
    }
    renderColorRampStrokeTransparencyContent(disabled) {
        const { stroke } = this;
        const max = 100;
        const min = 0;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, this.getStrokeString("transparency"), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(SelectNumber, { flipLabels: this.percentLabelFlip, min: min, max: max, step: 1, unitsLabel: "%", value: (0,_color_16791b45_js__WEBPACK_IMPORTED_MODULE_3__.a)(stroke.color[0].a), onValueChange: this.onColorRampStrokeTransparencyChange, withSteppers: !this.narrow, disabled: disabled, label: this.getStrokeString("transparency") })));
    }
    checkPopoverMaxHeight() {
        var _a, _b, _c;
        // if not set by caller then calculate the max height for any popover openend by the styler
        if (this.flowEl && this.popoverProps && (!this.popoverProps.maxHeight || this.autoCalcHeight)) {
            this.autoCalcHeight = true;
            const panelRect = this.flowEl.getBoundingClientRect();
            const windowHeight = window.innerHeight ||
                ((_a = document.documentElement) === null || _a === void 0 ? void 0 : _a.clientHeight) ||
                ((_b = document.body) === null || _b === void 0 ? void 0 : _b.clientHeight) ||
                0;
            const spaceToBottom = windowHeight && (panelRect === null || panelRect === void 0 ? void 0 : panelRect.top) ? windowHeight - panelRect.top - 30 : 0;
            this.popoverProps.maxHeight = `${Math.max(spaceToBottom || panelRect.height, 250) -
                ((_c = this.popoverProps.offsetDistance) !== null && _c !== void 0 ? _c : 0) -
                5}px`;
        }
    }
    static get assetsDirs() { return ["assets"]; }
    get el() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
    static get watchers() { return {
        "builtInStrings": ["handleStringChanges"],
        "stringOverrides": ["handleStringChanges"]
    }; }
};
ArcGISSymbolStyler.style = arcgisSymbolStylerCss;



//# sourceMappingURL=arcgis-symbol-styler.entry.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,