"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_arcgis-raster-function-editor_-3d24e5"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/common-strings.da-55c733be.js":
/*!**************************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/common-strings.da-55c733be.js ***!
  \**************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   addRaster: () => (/* binding */ addRaster),
/* harmony export */   addScalar: () => (/* binding */ addScalar),
/* harmony export */   breadcrumb: () => (/* binding */ breadcrumb),
/* harmony export */   breadcrumbEditor: () => (/* binding */ breadcrumbEditor),
/* harmony export */   cancel: () => (/* binding */ cancel),
/* harmony export */   category: () => (/* binding */ category),
/* harmony export */   categoryNames: () => (/* binding */ categoryNames),
/* harmony export */   close: () => (/* binding */ close),
/* harmony export */   copy: () => (/* binding */ copy),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   defaultModelName: () => (/* binding */ defaultModelName),
/* harmony export */   definitionQuery: () => (/* binding */ definitionQuery),
/* harmony export */   description: () => (/* binding */ description),
/* harmony export */   deselectFunction: () => (/* binding */ deselectFunction),
/* harmony export */   details: () => (/* binding */ details),
/* harmony export */   dialogTitle: () => (/* binding */ dialogTitle),
/* harmony export */   dontSave: () => (/* binding */ dontSave),
/* harmony export */   enterFURL: () => (/* binding */ enterFURL),
/* harmony export */   enterURL: () => (/* binding */ enterURL),
/* harmony export */   error: () => (/* binding */ error),
/* harmony export */   errorTitle: () => (/* binding */ errorTitle),
/* harmony export */   everyone: () => (/* binding */ everyone),
/* harmony export */   f32PixelType: () => (/* binding */ f32PixelType),
/* harmony export */   f64PixelType: () => (/* binding */ f64PixelType),
/* harmony export */   failedToLoadLayer: () => (/* binding */ failedToLoadLayer),
/* harmony export */   folder: () => (/* binding */ folder),
/* harmony export */   general: () => (/* binding */ general),
/* harmony export */   groupFieldName: () => (/* binding */ groupFieldName),
/* harmony export */   groupItemsBy: () => (/* binding */ groupItemsBy),
/* harmony export */   groups: () => (/* binding */ groups),
/* harmony export */   invalidRFTMessage: () => (/* binding */ invalidRFTMessage),
/* harmony export */   isDataset: () => (/* binding */ isDataset),
/* harmony export */   isPublic: () => (/* binding */ isPublic),
/* harmony export */   item: () => (/* binding */ item),
/* harmony export */   itemGroup: () => (/* binding */ itemGroup),
/* harmony export */   loadingLayer: () => (/* binding */ loadingLayer),
/* harmony export */   matchVariables: () => (/* binding */ matchVariables),
/* harmony export */   mosaic: () => (/* binding */ mosaic),
/* harmony export */   multidimensionalRules: () => (/* binding */ multidimensionalRules),
/* harmony export */   name: () => (/* binding */ name),
/* harmony export */   noTagErrorMsg: () => (/* binding */ noTagErrorMsg),
/* harmony export */   noTitleErrorMsg: () => (/* binding */ noTitleErrorMsg),
/* harmony export */   noTitleTagErrorMsg: () => (/* binding */ noTitleTagErrorMsg),
/* harmony export */   ok: () => (/* binding */ ok),
/* harmony export */   organization: () => (/* binding */ organization),
/* harmony export */   outputPixelType: () => (/* binding */ outputPixelType),
/* harmony export */   owner: () => (/* binding */ owner),
/* harmony export */   parameter: () => (/* binding */ parameter),
/* harmony export */   parameters: () => (/* binding */ parameters),
/* harmony export */   properties: () => (/* binding */ properties),
/* harmony export */   raster: () => (/* binding */ raster),
/* harmony export */   rasterFunctionEditor: () => (/* binding */ rasterFunctionEditor),
/* harmony export */   rasterFunctions: () => (/* binding */ rasterFunctions),
/* harmony export */   rfxLicenseInfo: () => (/* binding */ rfxLicenseInfo),
/* harmony export */   s16PixelType: () => (/* binding */ s16PixelType),
/* harmony export */   s32PixelType: () => (/* binding */ s32PixelType),
/* harmony export */   s8PixelType: () => (/* binding */ s8PixelType),
/* harmony export */   save: () => (/* binding */ save),
/* harmony export */   saveAs: () => (/* binding */ saveAs),
/* harmony export */   saveUtils: () => (/* binding */ saveUtils),
/* harmony export */   savingMessage: () => (/* binding */ savingMessage),
/* harmony export */   scalar: () => (/* binding */ scalar),
/* harmony export */   search: () => (/* binding */ search),
/* harmony export */   selectFeature: () => (/* binding */ selectFeature),
/* harmony export */   selectFunction: () => (/* binding */ selectFunction),
/* harmony export */   selectRaster: () => (/* binding */ selectRaster),
/* harmony export */   serviceURL: () => (/* binding */ serviceURL),
/* harmony export */   setGroupSharing: () => (/* binding */ setGroupSharing),
/* harmony export */   setSharingLevel: () => (/* binding */ setSharingLevel),
/* harmony export */   share: () => (/* binding */ share),
/* harmony export */   shareWith: () => (/* binding */ shareWith),
/* harmony export */   success: () => (/* binding */ success),
/* harmony export */   tagFieldName: () => (/* binding */ tagFieldName),
/* harmony export */   tags: () => (/* binding */ tags),
/* harmony export */   title: () => (/* binding */ title),
/* harmony export */   toolDetailsEditor: () => (/* binding */ toolDetailsEditor),
/* harmony export */   toolEditor: () => (/* binding */ toolEditor),
/* harmony export */   toolModeler: () => (/* binding */ toolModeler),
/* harmony export */   tryAgain: () => (/* binding */ tryAgain),
/* harmony export */   type: () => (/* binding */ type),
/* harmony export */   u16PixelType: () => (/* binding */ u16PixelType),
/* harmony export */   u32PixelType: () => (/* binding */ u32PixelType),
/* harmony export */   u8PixelType: () => (/* binding */ u8PixelType),
/* harmony export */   unionDimensions: () => (/* binding */ unionDimensions),
/* harmony export */   unknownPixelType: () => (/* binding */ unknownPixelType),
/* harmony export */   unsavedTitle: () => (/* binding */ unsavedTitle),
/* harmony export */   unsavedWarningExisting: () => (/* binding */ unsavedWarningExisting),
/* harmony export */   unsavedWarningNew: () => (/* binding */ unsavedWarningNew),
/* harmony export */   userStartDirection: () => (/* binding */ userStartDirection),
/* harmony export */   variables: () => (/* binding */ variables),
/* harmony export */   viewerModeMessage: () => (/* binding */ viewerModeMessage),
/* harmony export */   viewerModeTitle: () => (/* binding */ viewerModeTitle),
/* harmony export */   warning: () => (/* binding */ warning)
/* harmony export */ });
const ok = "OK";
const cancel = "Annuller";
const enterURL = "Indtast billedtjeneste-URL";
const serviceURL = "Tjeneste-URL";
const selectRaster = "Vælg raster";
const failedToLoadLayer = "Kunne ikke indlæse lag";
const loadingLayer = "Indlæser lag";
const selectFeature = "Vælg vektorlag";
const enterFURL = "Indtast featuretjeneste-URL";
const addRaster = "Tilføj rastervariabel";
const addScalar = "Tilføj konstant";
const raster = "Raster";
const scalar = "Skalar";
const defaultModelName = "Rasterfunktionsskabelon";
const general = "Generelt";
const parameters = "Parametre";
const variables = "Variabler";
const name = "Navn";
const description = "Beskrivelse";
const parameter = "parameter";
const isPublic = "IsPublic";
const isDataset = "IsDataset";
const unknownPixelType = "Ukendt";
const outputPixelType = "Output-pixeltype";
const u8PixelType = "8 bit usigneret";
const s8PixelType = "8 bit signeret";
const u16PixelType = "16 bit usigneret";
const s16PixelType = "16 bit signeret";
const u32PixelType = "32 bit usigneret";
const s32PixelType = "32 bit signeret";
const f32PixelType = "32 bit flydende";
const f64PixelType = "64 bit doblet";
const properties = "Egenskaber";
const multidimensionalRules = "Flerdimensionale regler";
const matchVariables = "Match-variabler";
const unionDimensions = "Union-dimensioner";
const rasterFunctionEditor = {
	invalidRFTMessage: "Skabelonen til rasterfunktionen er ikke gyldig.",
	rfxArgsEditor: {
		outputRaster: "OutputRaster",
		raster: "Raster",
		unsupportedDataTypeWarning: "Følgende argumenter vises ikke, fordi de ikke understøttes på nuværende tidspunkt.",
		unsupportedFunction: "Indeholder en eller flere rasterfunktioner, der ikke understøttes."
	},
	rfxRasterInput: {
		selectLayer: "Vælg lag",
		browseLayers: "Gennemse lag",
		rfxVariable: "RasterFunctionVariable"
	},
	rfxBandCombinationEditor: {
		methodLabel: "Metode",
		bandLabel: "Bånd",
		combinationLabel: "Kombination"
	},
	rfxRemapGrid: {
		minimum: "Minimum",
		maximum: "Maksimum",
		output: "Output",
		noData: "NoData",
		remapValuesLabel: "Genberegn værdier"
	},
	rfxNamedRasterEditor: {
		rasterVariables: "Rastervariabler",
		deleteSelectedVars: "Fjern de valgte variabler"
	},
	rfxClippingGeometry: {
		clippingLayer: "Klip-lag",
		clippingRaster: "Klip-raster",
		clippingGeometry: "Klip-geometri",
		customExtent: "Brugerdefineret udstrækning",
		outputExtent: "Output-udstrækning",
		currentExtent: "Aktuel kortudstrækning",
		drawLabel: "Tegn"
	},
	rfxCustomExtent: {
		top: "Top",
		right: "Højre",
		bottom: "Bund",
		left: "Venstre"
	},
	rfxRasterArrayEditor: {
		moveUp: "Flyt op",
		moveDown: "Flyt ned",
		remove: "Fjern"
	},
	rfxStatisticsGrid: {
		stdDev: "Std. afv.",
		min: "Min.",
		max: "Maks.",
		mean: "Middel"
	},
	rfxWeightedSumTableEditor: {
		weightedSumTable: "Vægtet sumtabel",
		id: "ID",
		layer: "Lag",
		field: "Felt",
		weight: "Vægt",
		value: "Værdi",
		selectLayer: "Vælg lag"
	},
	rfxWeightedOverlayTableEditor: {
		weightedOverlayTable: "Vægtet overlay-tabel",
		id: "ID",
		layer: "Lag",
		field: "Felt",
		influence: "Påvirkning",
		sumOfInfluence: "Summen af påvirkning",
		value: "Værdi",
		remapTable: "Genberegn tabel",
		scale: "Målestok",
		scales: "Vægte",
		selectRaster: "Vælg raster"
	},
	rfxFeatureSelect: {
		addFeatureLayer: "Søg efter et vektorlag",
		addPointLayer: "Søg efter et punktlag"
	},
	rfxFieldSelect: {
		value: "Værdi",
		count: "Tælling"
	},
	rfxAttributeTable: {
		tableType: "Tabeltype",
		manual: "Manuel",
		external: "Ekstern",
		minVal: "Minimumværdi",
		maxVal: "Maksimumværdi",
		baseClassName: "Klassebasisnavn",
		colorScheme: "Farveskema",
		defaultClassName: "Label_",
		generateTable: "Generer tabel",
		browseTable: "Gennemse tabel",
		value: "Værdi",
		classname: "ClassName",
		color: "Farve"
	},
	rfxFieldNumberSwitchable: {
		number: "Numerisk",
		field: "Felt",
		string: "Streng",
		linearUnit: "Lineær enhed"
	},
	rfxPropertySet: {
		name: "Navn",
		value: "Værdi"
	},
	rfxConversionGrid: {
		size: "Størrelse"
	},
	rfxTransposeBit: {
		bitPattern: "Bit-mønster",
		outputBit: "Output-bit",
		inputBit: "Input-bit"
	},
	rfxSpatialReference: {
		placeHolder: "Forfin med nøgleord",
		coordinateSystem: "Koordinatsystem",
		gcs: "Geografisk koordinatsystem",
		pcs: "Forudberegnet koordinatsystem",
		vcs: "Vertikalt koordinatsystem"
	}
};
const rfxLicenseInfo = "Denne rasterfunktionsskabelon kan bruges til at behandle dine billeder ved hjælp af ArcGIS Image Server.";
const rasterFunctions = {
	rfx: {
		aCosHName: "ARCCOSH",
		aCosHSnip: "Beregner den omvendte hyperbolske cosinus for celler i en raster.",
		aCosHDesc: "Funktionen beregner den omvendte hyperbolske cosinus for pixels i en raster.",
		aCosName: "ARCCOS",
		aCosSnip: "Beregner den omvendte cosinus for pixels i en raster.",
		aCosDesc: "Denne rasterfunktion beregner den omvendte cosinus for cellerne i en raster. Inden for matematikken har alle trigonometriske funktioner et defineret område med gyldige inputværdier, kaldet domænet. Outputværdierne fra enhver funktion har også et defineret område. For dette værktøj er domænet [-1, 1], og området er [0, pi].",
		aSinHName: "ARCSINH",
		aSinHSnip: "Beregner den omvendte hyperbolske sinus for celler i en raster.",
		aSinHDesc: "Funktionen beregner den omvendte hyperbolske sinus for pixels i en raster.",
		aSinName: "ARCSIN",
		aSinSnip: "Beregner den omvendte sinus for celler i en raster.",
		aSinDesc: "Funktionen beregner den omvendte sinus for pixels i en raster.",
		aTan2Name: "ARCTAN2",
		aTan2Snip: "Beregner den omvendte tangens (baseret på x,y) for celler i en raster.",
		aTan2Desc: "Funktionen beregner den omvendte tangens (baseret på x,y) for pixels i en raster.",
		aTanHName: "ARCTANH",
		aTanHSnip: "Beregner den omvendte hyperbolske tangens for celler i en raster.",
		aTanHDesc: "Funktionen beregner den omvendte hyperbolske tangens for pixels i en raster.",
		aTanName: "ARCTAN",
		aTanSnip: "Beregner den omvendte tangens for celler i en raster.",
		aTanDesc: "Funktionen beregner den omvendte tangens for pixels i en raster.",
		absName: "ABS",
		absSnip: "Beregner den absolutte værdi for cellerne i en raster.",
		absDesc: "Funktionen ABS beregner den absolutte værdi for pixels i en raster.",
		reflectanceName: "Synlig reflektans",
		reflectanceSnip: "Konverterer råbilleder til Top of Atmosphere-værdier ved at tage hensyn til sensoregenskaber, solens position og overtagelsestidspunktet.",
		reflectanceDesc: "Denne funktion justerer de digitale værdier for billedlysstyrke for visse satellitsensorer. Justeringerne er baseret på solhøjde, optagelsesdato og sensoregenskaber og indstiller stigning og afvigelse for hvert bånd. Denne funktion bruges til at justere reflektans, eller lysstyrke, og værdier for visse satellitbilleder baseret på scenebelysning og indstillinger for sensor-stigning. Billederne justeres til et teoretisk almindeligt lysforhold, så der bliver mindre variation mellem scener fra forskellige datoer og forskellige sensorer. Dette kan være nyttigt til billedklassificering, farvebalancering og mosaik. Denne funktion kan kun bruges med bestemte billeder. De anvendelige sensorer er Landsat MSS, Landsat TM, Landsat ETM +, Landsat 8, IKONOS, QuickBird, GeoEye-1, RapidEye, DMCii, WorldView-1, WorldView-2, SPOT 6 og Pleiades.<div><br/>Funktionen udfører to korrektioner. Den første er baseret på indstillingerne for stigning. De oprindelige lysstyrkeværdier genskabes ud fra billedværdierne ved at vende stignings-ligningerne. Den anden korrektion er relateret til forskelle i solvinkel og lysstyrke. De oprindelige lysstyrkeværdier justeres til et almindeligt lysforhold ved at normalisere scener, der er optaget under skiftende lysforhold. Outputbilleddatatypen er generelt den samme som inputbilleddatatypen, men outputværdierne er lavere end inputværdierne og klippes til det gyldige dataområde.</div>",
		argStatisticsName: "ArgStatistics",
		argStatisticsSnip: "Beregner arg-statistikker, herunder Arg Max, Arg Min, Arg Median og Varighed.",
		argStatisticsDesc: "Funktionen beregner arg-statistikker. Der er fire metoder i ArgStatistics-funktionen: ArgMax, ArgMin, ArgMedian og Varighed.",
		arithmeticName: "Aritmetisk",
		arithmeticSnip: "Udfører en aritmetisk operation mellem to raster eller en raster og en skalar.",
		arithmeticDesc: "Funktionen Aritmetisk udfører en aritmetisk operation mellem to raster eller en raster og en skalar og omvendt.",
		aspectSlopeName: "Aspekt-hældning",
		aspectSlopeSnip: "Opretter en raster, der på samme tid viser aspektet (retning) og hældning (stejlhed) for en sammenhængende overflade, som repræsenteret i en digital elevationsmodel.",
		aspectSlopeDesc: "Funktionen Aspekt-hældning skaber et rasterlag, der samtidig viser en flades aspekt og hældning. Aspekt angiver den nedadgående hældning ud fra den maksimale ændring af værdien af hver pixel i forhold til de tilstødende pixels. Man kan tænke på aspekt som en hældningsretning. Værdierne i output-rasteren vil udgøre kompasretningen for aspektet, repræsenteret af en farvetone (farve). Stigningen repræsenterer ændringen af højden for hver pixel i den digitale elevationsmodel (DEM). Hældningen repræsenterer overfladens stejlhed og er symboliseret i tre klasser, der vises ved hjælp af farvemætning (lysstyrke).<div><br/>Pixelværdierne i outputrasteren for aspekt-hældning afspejler en kombination af aspekt og hældning. Pixler med værdier under 20 betragtes som flade og vises med grå farve. Værdier for aspekt-hældning på 21 og derover vises med forskellig farvemætning som følger: 21 til 30 —Lille hældning, 31 til 40—Moderat hældning, 41 og derover—Stor hældning",
		aspectName: "Aspekt",
		aspectSnip: "Viser hvilken retning en pixel vender, hvor 0 er nord og vinklerne stiger med uret til 360.",
		aspectDesc: "Funktionen Aspekt angiver den nedadgående hældning ud fra den maksimale ændring af værdien af hver celle i forhold til de tilstødende celler. Man kan tænke på aspekt som en hældningsretning. Værdierne i output-rasterdataene vil udgøre kompasretningen for aspektet.<div><br/>Input til denne funktion er Inputraster. Funktionen Aspekt anvendes ofte på en digital elevationsmodel (DEM). Som standard vises aspektet som et gråtonebillede. Du kan tilføje Farvekort-funktionen for at angive et bestemt farveskema eller for at tillade, at personen, der ser mosaikken, ændre symbologien med deres eget farveskema.</div>",
		tableName: "Attributtabel",
		tableSnip: "Bruger en tabel til at navngive og symbolisere værdierne i et datasæt. Kolonner til tabellen er kommaseparerede: PixelValue, AttributeName, RedValue, GreenValue, BlueValue.",
		tableDesc: "Funktionen Attributtabel giver mulighed for at definere et attributtabel for at symbolisere et enkeltbånds mosaikdatasæt eller rasterdatasæt. <div><br/>Det er nyttigt, når du vil præsentere billeder, der er blevet klassificeret til arealanvendelse, f.eks. skov, vådområder, opdyrkede arealer og byområder. Hvis din tabel indeholder felter, der hedder rød, grøn og blå, anvendes værdierne i disse felter som et farvekort, når du gengiver billedet.</div>",
		bandArithmeticName: "Bånd-aritmetik",
		bandArithmeticSnip: "Beregner indekser ved hjælp af foruddefinerede formler eller et brugerdefineret udtryk.",
		bandArithmeticDesc: "Funktionen Bånd-aritmetik udfører en aritmetisk operation på båndene i et rasterdatasæt. Du kan vælge foruddefinerede algoritmer, eller du kan indtaste din egen enkeltlinjeformel. De understøttede operatører er -, +, /, * og unært -.",
		thresholdName: "Binær tærskelværdi",
		thresholdSnip: "Organiserer kontinuerlige data i forgrunden og baggrunden ved at minimere kovariansen mellem de to klasser.",
		thresholdDesc: "Når et raster datasæt har en bimodal distribution, skaber denne funktion en ny raster, der deler dataene i to forskellige klasser. Den opretter en klasse med lav værdi, der vises med sorte pixels, og en klasse med høj værdi, der vises med hvide pixels.",
		bitwiseAndName: "Bitwise Og",
		bitwiseAndSnip: "Udfører en Bitvis Og-operation på de binære værdier for to inputraster.",
		bitwiseAndDesc: "Bitwise Og udfører en Bitwise Og-operation på de binære værdier for to inputraster",
		bitwiseLeftShiftName: "Bitwise Venstre skift",
		bitwiseLeftShiftSnip: "Udfører en Bitwise Venstre skift-operation på de binære værdier for to inputraster.",
		bitwiseLeftShiftDesc: "Bitwise Venstre skift udfører en Bitwise Venstre skift-operation på de binære værdier for to inputraster",
		bitwiseNotName: "Bitwise Ikke",
		bitwiseNotSnip: "Udfører en Bitwise Ikke (supplement)-operation på den binære værdi for to inputraster.",
		bitwiseNotDesc: "Funktionen udfører en Bitwise Ikke (supplement)-operation på den binære værdi for en inputraster.",
		bitwiseOrName: "Bitwise Eller",
		bitwiseOrSnip: "Udfører en Bitwise Eller-operation på de binære værdier for to inputraster.",
		bitwiseOrDesc: "Funktionen udfører en Bitwise Eller-operation på de binære værdier for to inputraster. ",
		bitwiseRightShiftName: "Bitwise Højre skift",
		bitwiseRightShiftSnip: "Udfører en Bitwise Højre skift-operation på de binære værdier for to inputraster.",
		bitwiseRightShiftDesc: "Funktionen udfører en Bitwise Højre skift-operation på de binære værdier for to inputraster.",
		bitwiseXorName: "Bitwise Xor",
		bitwiseXorSnip: "Udfører en Bitwise eXclusive Or-operation på de binære værdier for to inputraster.",
		bitwiseXorDesc: "Funktionen udfører en Bitwise eXclusive Or-operation på de binære værdier for to inputraster",
		booleanAndName: "Boolesk Og",
		booleanAndSnip: "Udfører en Boolesk Og-operation på celleværdierne for to inputraster. Hvis begge inputværdier er sande (ikke-nul), er outputværdien 1. Hvis en eller begge inputværdier er falske (nul), er outputværdien 0.",
		booleanAndDesc: "Funktionen udfører en Boolesk Og-operation på pixelværdierne for to input. Hvis begge inputværdier er sande (ikke nul), er outputværdien 1. Hvis en eller begge inputværdier er falske (nul), er outputværdien 0. ",
		booleanNotName: "Boolesk Ikke",
		booleanNotSnip: "Udfører en Boolesk Ikke (supplement)-operation på celleværdierne i inputrasteren. Hvis inputværdierne er sande (ikke nul), er outputværdien 0. Hvis inputværdierne er falske (nul), er outputværdien 1.",
		booleanNotDesc: "Funktionen udfører en Boolesk Ikke (supplement)-operation på pixelværdierne i inputrasteren. Hvis inputværdierne er sande (ikke nul), er outputværdien 0. Hvis inputværdierne er falske (nul), er outputværdien 1.",
		booleanOrName: "Boolesk Eller",
		booleanOrSnip: "Udfører en Boolesk Eller-operation på celleværdierne for de to inputraster. Hvis en eller begge inputværdier er sande (ikke nul), er outputværdien 1. Hvis begge inputværdier er falske (nul), er outputværdien 0.",
		booleanOrDesc: "Funktionen udfører en Boolesk Eller-operation på celleværdierne for to inputraster. Hvis en eller begge inputværdier er sande (ikke nul), er outputværdien 1. Hvis begge indgangsværdier er falske (nul), er outputværdien 0.",
		booleanXorName: "Boolesk Xor",
		booleanXorSnip: "Udfører en Boolesk eXclusive Or-operation på celleværdierne for to inputraster. Hvis den ene inputværdi er sand (ikke nul), og den anden er falsk (nul), er outputværdien 1. Hvis begge inputværdier er sande, eller de begge er falske, er outputværdien 0.",
		booleanXorDesc: "Funktionen udfører en Boolesk eXclusive Or-operation på celleværdierne for to inputraster. Hvis den ene inputværdi er sand (ikke nul), og den anden er falsk (nul), er outputværdien 1. Hvis begge inputværdier er sande, eller de begge er falske, er outputværdien 0.",
		bufferedRasterName: "Buffered",
		bufferedRasterSnip: "Placerer de(n) sidst tilgåede pixelblok(ke) i bufferen.",
		bufferedRasterDesc: "Funktionen Buffered benyttes til at optimere ydelsen for komplekse funktionskæder. Den gemmer output fra den del af funktionskæden, der kommer før den, i hukommelsen. <div><br/>Indsæt denne funktion i Funktionseditoren der, hvor du vil gemme outputtet.</div>",
		rasterCalculatorName: "Regnemaskine",
		rasterCalculatorSnip: "Beregner en raster ud fra et rasterbaseret matematisk udtryk.",
		rasterCalculatorDesc: "Funktionen Regnemaskine giver dig mulighed for at oprette og køre udtryk og indarbejde dem i funktionskæder.",
		cellStatisticsName: "Cellestatistik",
		cellStatisticsSnip: "Beregner statistik pr. celle fra flere rastere. Den tilgængelige statistik er majoritet, maksimum, middel, median, minimum, minoritet, percentil, interval, standardafvigelse, sum og variation.",
		cellStatisticsDesc: "Denne funktion beregner statistikker ud fra flere raster pixel for pixel. De tilgængelige statistiktyper er majoritet, maksimum, middel, median, minimum, minoritet, interval, standardafvigelse, sum og variation.",
		classifyName: "Klassificér",
		classifySnip: "Tildeler hver pixel til en klasse. Indarbejder hjælpedata såsom et segmenteret billede.",
		classifyDesc: "Denne rasterfunktion klassificerer et rasterdatasæt baseret på en Esri-klassificeringsdefinitionsfil (.ecd) og rasterdatasæt-input. Den .ecd-fil, der anvendes i funktionen Klassifikation, indeholder alle oplysningerne til et bestemt datasæt og en bestemt klassifikator og genereres af uddannelsesværktøjerne til klassifikation, f.eks. Train Support Vector Machine eller Train Random Trees.",
		clipName: "Klip",
		clipSnip: "Angiver udstrækningen af en raster ved hjælp af koordinater eller et andet datasæt.",
		clipDesc: "Denne funktion klipper en raster ved hjælp af en rektangulær form i henhold til de definerede udstrækninger eller klipper en raster i samme form som en inputpolygon-objektklasse. Formen, der definerer klippet, kan klippe udstrækningen af rasteren eller klippe et område ud inde i rasteren.",
		colorspaceConversionName: "Konvertering af farvemodel",
		colorspaceConversionSnip: "Konverterer en raster fra RGB til HSV og omvendt.",
		colorspaceConversionDesc: "Funktionen Konvertering af farvemodel konverterer farvemodellen af et billede fra farverummet farvetone, mætning og værdi (HSV) til rødt, grønt og blåt (RGB) eller omvendt.<div><br/>Denne funktion kan bruges i et mosaik-datasæt.</div>",
		colormapToRGBName: "Farvekort til RGB",
		colormapToRGBSnip: "Konverterer en enkeltbåndsraster med et farvekort til en trebåndsraster (rød, grøn og blå).",
		colormapToRGBDesc: "Denne funktion konverterer en enkeltbåndsraster med et farvekort til en trebåndsraster (rød, grøn og blå).<div><br/>Denne funktion er nyttig, når du skal oprette en trebåndsraster ud fra en enkeltbåndsraster med et tilknyttet farvekort. Værdierne i farvekortet bruges til at oprette hvert enkelt rødt, grønt og blåt bånd. Denne funktion kan bruges i et mosaik-datasæt.</div>",
		colormapName: "Farvekort",
		colormapSnip: "Ændrer pixelværdier for at vise rasterdataene som en gråtoneskala eller et rødt, grønt og blåt billede (RGB), baseret på et farvekort eller en farveskala.",
		colormapDesc: "Funktionen Farvekort et rasterdata-gengivelsesværktøj. Den omdanner pixelværdierne, så de viser rasterdataene som enten en gråtoneskala eller et RGB-farvebillede baseret på et farveskema eller bestemte farver i en farvekortfil. Du kan bruge et farvekort til at repræsentere analyserede data, f.eks. et klassificeret billede, eller når der vises et topografisk kort (eller et indeks-farvescannet billede).<div><br/>Farvekort indeholder et sæt værdier, der er forbundet med de farver, der bruges til at vise en enkeltbåndsraster med de samme farver. Hver pixelværdi er forbundet med en farve, der er defineret som et sæt RGB-værdier. Farvekort kan understøtte alle bitdybder, undtagen flydende komma. De understøtter også positive og negative værdier og kan indeholde manglende farvekortværdier. Når der vises et datasæt med et farvekort med manglende værdier, vises pixels med de manglende værdier ikke.</div>",
		complexName: "Kompleks",
		complexSnip: "Uddrager størrelsen fra komplekse tal.",
		complexDesc: "Denne funktion beregner størrelsen ud fra komplekse værdier.<div><br/>Denne funktion bruges typisk med RADAR-billeder, der har en kompleks datatype. Den kan bruges i et mosaik-datasæt.</div>",
		compositeBandName: "Sammensatte bånd",
		compositeBandSnip: "Kombinerer flere datasæt i en flerbåndraster.",
		compositeBandDesc: "Med funktionen Sammensatte bånd kan du kombinere raster og danne et flerbåndsbillede.",
		conName: "Betinget",
		conSnip: "Udfører en betinget If, Then, Else-operation. Når en betingelses-operatør anvendes, skal der normalt være to eller flere funktioner, der er kædet sammen, hvor den ene funktion angiver kriterierne, og den anden funktion er betingelses-operatøren, der bruger kriterierne og bestemmer, hvad de sande og falske output skal være.",
		conDesc: "Funktionen Betinget angiver pixels for outputraster baseret på en ifelse-evaluering af hver inputpixel. Den returnerer pixelværdier fra Sand-rasteren, hvis den betingede evaluering er sand (1) eller returnerer pixelværdierne fra Falsk-rasteren, hvis den betingede evaluering er falsk (0). Dette kriterium er angivet af outputtet fra en logisk matematisk funktion, som er inputrasteren.",
		constantName: "Konstant",
		constantSnip: "Opretter en virtuel raster med en enkelt pixelværdi.",
		constantDesc: "Denne funktion skaber en virtuel raster med en enkelt pixelværdi, som kan bruges i rasterfunktionsskabeloner og til at behandle et mosaikdatasæt.<div><br/>Den konstante værdi anvendes til alle pixelværdier i rasteren.</div>",
		contourName: "Kontur",
		contourSnip: "Opretter konturlinjer.",
		contourDesc: "Funktionen genererer konturlinjer ved at forbinde punkter med samme højde fra et raster højdedatasæt. Konturerne er isolinjer, der er oprettet som raster med henblik på visualisering. Funktionen har følgende stærke nøglefunktioner: Konturer genereres hurtigt og dynamisk på meget store datasæt, som World Elevation; konturer kan glattes ud for at give et mere kartografisk udseende, samtidig med at konturernes nøjagtighed bevares; dynamisk kontrol over konturintervallet; muligheder for output omfatter konturlinjer, indekskonturer og udfyldte konturer.<div><br/>Oprettelsen af ​​et konturlag som et rasterprodukt er nyttigt for en bred vifte af anvendelser, da konturerne kan placeres oven på hinanden på et kort og give oplysninger om terrænet uden at skjule de underliggende data. De er nyttige inden for teknik, landbrug og vand.</div>",
		contrastBrightnessName: "Kontrast og lysstyrke",
		contrastBrightnessSnip: "Justerer kontrast og lysstyrke for en raster.",
		contrastBrightnessDesc: "Funktionen Kontrast og lysstyrke forbedrer udseendet af rasterdata ved at ændre lysstyrken og kontrasten i billedet. Lysstyrke øger billedets generelle lysstyrke f.eks. bliver mørke farver lysere og lyse farver hvidere, mens Kontrast justerer forskellen mellem de mørkeste og de lyseste farver.<div><br/>Denne funktion ændrer pixelværdierne. Derfor skal den bruges, når du vil forbedre dataenes udseende, og ikke hvis du har til hensigt at bruge dataene som en del af en analyse, der kræver de rå pixelværdier. Denne funktion er nyttig, når du offentliggør dataene som en billedtjeneste, som kan bruges i applikationer, der ikke kan ændre billedets kontrast og lysstyrke, eller for at sikre, at den vises med dine foretrukne indstillinger.</div>",
		convolutionName: "Foldning",
		convolutionSnip: "Anvender et filter til at skærpe, sløre, registrere kanter, glatte ud eller oprette en gradient på tværs af en raster.",
		convolutionDesc: "Funktionen Foldning udfører filtrering på pixelværdierne i et billede, og kan bruges til at gøre et billede skarpere, sløre et billede, registrere kanter inden for et billede eller andre kernebaserede forbedringer. Filtre bruges til at forbedre kvaliteten af rasterbilledet ved at eliminere falske data eller forbedre objekter i dataene. Disse foldningsfiltre anvendes på en overlappende kerne i bevægelse (vindue eller tilstødende), f.eks. 3 x 3. Foldningsfiltre fungerer ved at beregne pixelværdien baseret på vægtningen af tilstødende værdier.",
		corridorName: "Korridor",
		corridorSnip: "Beregner summen af akkumulerede omkostninger for to akkumulerede inputraster.",
		corridorDesc: "Funktionen Korridor beregner summen af akkumulerede omkostninger for to inputraster med akkumulerede omkostninger. To vilkårlige raster kan bruges som input, men hvis funktionen skal give et meningsfuldt resultat, bør de være uændrede outputraster med akkumulerede omkostninger. Rækkefølgen af de to input er ligegyldig.",
		cosHName: "CosH",
		cosHSnip: "Beregner den hyperbolske cosinus af celler i en raster.",
		cosHDesc: "Funktionen beregner den hyperbolske cosinus for pixels i en raster.",
		cosName: "Cos",
		cosSnip: "Beregner cosinus for en celle i raster.",
		cosDesc: "Funktionen beregner cosinus for pixels i en raster.",
		costAllocationName: "Omkostningsfordeling",
		costAllocationSnip: "Beregner for hver celle den kilde med de laveste omkostninger baseret på den mindste akkumulerede omkostning over en omkostningsoverflade.",
		costAllocationDesc: "Funktionen Omkostningsfordeling beregner for hver celle den kilde med de laveste omkostninger baseret på den mindste akkumulerede omkostning over en omkostningsoverflade.",
		costBackLinkName: "Omkostning BackLink",
		costBackLinkSnip: "Definerer nabocellen, der er den næste celle på ruten med de laveste akkumulerede omkostninger til den kilde med de laveste omkostninger.",
		costBackLinkDesc: "Funktionen Omkostning BackLink definerer den tilstødende værdi, som er den næste celle på ruten med de laveste akkumulerede omkostninger til den kilde med de laveste omkostninger.<div><br/>Backlink-rasteren indeholder værdier fra nul til otte, som definerer retningen eller identificerer den næste nabocelle (den efterfølgende celle) langs den rute med de laveste akkumulerede omkostninger fra en celle for at nå den kilde med de laveste omkostninger. Hvis stien skal gå til den rigtige nabocelle, tildeles cellen værdien 1, 2 for nederste højre diagonale celle og værditildelingen fortsættes i retning med uret. Værdien 0 er reserveret til kildeceller.</div>",
		costDistanceName: "Omkostning/afstand",
		costDistanceSnip: "Beregner afstanden med de laveste akkumulerede omkostninger for hver celle fra eller til kilden med de laveste omkostninger over en omkostningsoverflade.",
		costDistanceDesc: "Funktionen Omkostning/afstand beregner afstanden med de laveste akkumulerede omkostninger for hver celle fra eller til kilden med de laveste omkostninger over en omkostningsoverflade.",
		costPathName: "Omkostning/rute",
		costPathSnip: "Beregner ruten med de laveste omkostninger fra en kilde til en destination.",
		costPathDesc: "Den globale funktion Omkostning/rute beregner ruten med de laveste omkostninger fra en kilde til en destination.<div><br/>Denne funktion producerer en outputraster, der registrerer den eller de ruter med de laveste omkostninger fra udvalgte steder til den nærmeste kildecelle, der er defineret inden for den akkumulative omkostningsoverflade, hvad angår omkostninger/afstand.</div>",
		curvatureName: "Krumning",
		curvatureSnip: "Beregner krumningen af en rasteroverflade, der kan omfatte profil- og plankrumning.",
		curvatureDesc: "Funktionen Krumning viser formen eller krumningen af hældningen. En del af en overflade kan være konkav eller konveks. Det kan man se ved hjælp af krumningsværdien. Krumningen bestemmes ved at beregne den anden afledte værdi af overfladen.<div><br/>Outputtet fra funktionen Krumning kan bruges til at beskrive de fysiske egenskaber ved et dræningsbasin for at forstå erosions- og afstrømningsprocesser. Krumningsværdien kan bruges til at finde mønstre i jorderosion såvel som fordeling af vand på land. Profilkrumningen påvirker accelerationen og decelerationen af strømmen og påvirker derfor erosion og aflejring. Planformkrumningen påvirker strømmens konvergens og divergens.</div>",
		divideName: "Dividér",
		divideSnip: "Deler værdierne for to raster celle til celle.",
		divideDesc: "Funktionen Dividér deler værdierne for to raster pixel for pixel.",
		elevationVoidFillName: "Udfyldning af højdetomrum",
		elevationVoidFillSnip: "Opretter pixels, der hvor der er huller i dine højdedata.",
		elevationVoidFillDesc: "Funktionen Udfyldning af højdetomrum bruges til at oprette pixels, der hvor der er huller i dine højdedata.<div><br/>Der opstår tomrum, når der ikke er opsamlet punkter inden for det område, der repræsenteres af en pixel i den resulterende raster. Tomrum er ofte forårsaget af vandområder, klassetypevalg eller udelukkelse. Udfyldning af tomrum bruges mest til dannelse af en jordoverflade.</div>",
		equalToName: "Lig med",
		equalToSnip: "Udfører en relationsbaseret Lig med-operation på to input celle for celle. Returnerer 1 for celler, hvor den første raster er lig med den anden raster og 0 for celler, hvor den ikke er det.",
		equalToDesc: "Funktionen udfører en Lig med-operation på to raster pixel for pixel. Den returnerer værdien 1 for pixels, hvor den første raster er lig med den anden raster og værdien 0 for pixels, hvor de ikke er lig med hinanden.",
		eucAllocationName: "Euklidisk allokering",
		eucAllocationSnip: "Beregner den nærmeste kilde baseret på euklidisk afstand for hver celle.",
		eucAllocationDesc: "Funktionen Euklidisk allokering beregner den nærmeste kilde baseret på euklidisk afstand for hver celle.",
		eucDirectionName: "Euklidisk retning",
		eucDirectionSnip: "Beregner retningen i grader til nærmeste kilde for hver celle.",
		eucDirectionDesc: "Funktionen Euklidisk retning beregner retningen i grader til nærmeste kilde for hver celle. <div><br/>Retningen beregnes fra midten af hver celle til midten af ​​den kildecelle, der er nærmest på cellen. Intervallet af værdier er fra 0 grader til 360 grader, hvor 0 er forbeholdt kildecellerne. Stik øst (højre) er 90, og værdierne stiger i retning med uret (180 er syd, 270 er vest og 360 er nord).</div>",
		eucDistanceName: "Euklidisk afstand",
		eucDistanceSnip: "Beregner den euklidiske afstand til den nærmeste kilde for hver celle.",
		eucDistanceDesc: "Funktionen Euklidisk afstand beregner den euklidiske afstand til den nærmeste kilde for hver celle.",
		exp10Name: "EKSP10",
		exp10Snip: "Beregner grundtal 10-eksponentialfunktionen for cellerne i en raster.",
		exp10Desc: "Funktionen EKSP 10 beregner grundtal 10-eksponentialfunktionen for pixels i en raster.",
		exp2Name: "EKSP2",
		exp2Snip: "Beregner grundtal 2-eksponentialfunktionen for cellerne i en raster.",
		exp2Desc: "Denne funktion beregner grundtal 2-eksponentialfunktionen for pixels i en raster.",
		expName: "EKSP",
		expSnip: "Beregner grundtal e-eksponentialfunktionen for cellerne i en raster.",
		expDesc: "Denne funktion beregner grundtal e-eksponentialfunktionen for pixels i en raster.",
		extractBandName: "Udtræk bånd",
		extractBandSnip: "Angiver hvilke bånd, der skal arbejdes med, når du bruger flerbåndsdatasæt.",
		extractBandDesc: " Funktionen Udtræk bånd giver dig mulighed for at udtrække et eller flere bånd fra, eller ændre rækkefølge på bånd i, et rasterdatasæt med flere bånd.<div><br/>Du kan bruge funktionen Udtræk bånd før andre funktioner, såsom Aritmetik, til at styre, hvilke bånd der bruges som input i den næste funktion.</div>",
		fillName: "Fyld",
		fillSnip: "Fylder fordybninger i en overfladeraster for at fjerne små ufuldkommenheder i dataene.",
		fillDesc: "Den globale funktion Fyld lokaliserer og fylder fordybninger og toppe i en højdeoverfladeraster for at fjerne små ufuldkommenheder i dataene. Funktionen fylder i en gentagen proces, indtil alle fordybninger er fyldt inden for den angivne Z-grænse.<div><br/>Når en højdeoverflade er oprettet med Orto-kortlægningsværktøjer eller på anden måde, er der ofte små men betydelige fejl i form af fordybninger og toppe i dataene. I fotogrammetri betegnes fordybninger og toppe ofte som huller og spidser. Da overfladedata ofte anvendes til modellering, f.eks. hydrologisk modellering, er det vigtigt at rette disse fordybnings- og topfejl på en måde, der er i overensstemmelse med de omgivende data.</div>",
		floatName: "Flydende",
		floatSnip: "Konverterer hver enkelt celleværdi for en raster til en repræsentation med flydende komma.",
		floatDesc: "Funktionen Flydende konverterer hver enkelt pixelværdi for en raster til en repræsentation med flydende komma.",
		flowAccumulationName: "Flow-akkumulering",
		flowAccumulationSnip: "Opretter en raster af akkumuleret flow i hver celle. En vægtfaktor kan eventuelt anvendes.",
		flowAccumulationDesc: "Den globale funktion Flow-akkumulering skaber en raster af akkumuleret flow i hver pixel, som er fastlagt ved at akkumulere vægten for alle pixels, der strømmer ind i hver nedadgående pixel. Hvis der ikke er angivet nogen vægtraster, anvendes en vægt på 1 for hver pixel, og værdien af pixels i outputrasteren er antallet af pixels, der strømmer ind i hver pixel.<div><br/>Outputpixels med en høj flow-akkumulering er områder med koncentreret flow og kan bruges til at identificere strømkanaler. Outputpixels med en flow-akkumulering på nul er lokale topografiske højdepunkter og kan bruges til at identificere højderygge.</div>",
		flowDirectionName: "Flowretning",
		flowDirectionSnip: "Opretter en raster for flowretning fra hver celle til dens nabo med den stejleste nedadgående hældning.",
		flowDirectionDesc: "En af de vigtige ting, når man skal udlede hydrologiske egenskaber ved en overflade, er evnen til at fastslå flowretningen fra hver pixel i rasteren. Raster-funktionen Flowretning bruger en overflade som input og opretter en raster for flowretning fra hver pixel til dens nabo med den stejleste nedadgående hældning. funktionen Flowretning understøtter tre metoder til flowmodellering: D8 (otte retninger), Multi-Flow Direction (MFD) og D-Infinity (DINF). ",
		flowDistanceName: "Flow-afstand",
		flowDistanceSnip: "Beregner den minimale nedadgående vandrette eller lodrette afstand for hver celle til celler på en strøm eller en flod, som de strømmer i.",
		flowDistanceDesc: "For hver pixel beregner funktionen den laveste nedadgående vandrette eller lodrette afstand til pixel(s) på en flod eller strøm, som de strømmer i. Hvis en valgfri flowretningsraster findes, vil nedløbsretningerne være begrænset til dem, der er defineret af rasteren for inputflowets retning. Output er raster for flow-afstand.",
		focalName: "Fokuseret statistik",
		focalSnip: "Beregner fokuseret statistik for hver pixel i et billede baseret på et defineret fokusområde.",
		focalDesc: "Funktionen Fokuseret statistik beregner fokuseret statistik for hver pixel i et billede baseret på et bestemt fokusområde.",
		geometricName: "Geometrisk",
		geometricSnip: "Øger positionsnøjagtigheden for et datasæt ved at tage hensyn til højde.",
		geometricDesc: "Funktionen Geometrisk frembringer et orto-tilpasset billede baseret på en sensordefinition og en terrænmodel. Den øger positionsnøjagtigheden for et datasæt ved at tage hensyn til højde.",
		grayscaleName: "Gråtoneskala",
		grayscaleSnip: "Konverterer konverterer et flerbåndsbillede til et enkeltbåndsbillede i gråtoneskala.",
		grayscaleDesc: "Denne funktion konverterer et flerbåndsbillede til et enkeltbåndsbillede i gråtoneskala.<div><br/>Denne funktion anvender specificerede vægte for hvert inputbånd og normaliserer outputbilledet. Vægtene anvendes ofte, fordi nogle bånd har skiftende betydning afhængigt af anvendelsen. For eksempel indeholder det blå bånd ofte mere støj end andre bånd.</div>",
		greaterThanEqualName: "Større end eller lig med",
		greaterThanEqualSnip: "Udfører en relationsbaseret Større end eller lig med-handling på to inputs celle for celle. Returnerer 1 for celler, hvor den første raster er større end eller lig med den anden raster, og returnerer 0, hvis det ikke er tilfældet.",
		greaterThanEqualDesc: "Funktionen udfører en relationsbaseret Større end eller lig med-handling på to inputs pixel for pixel. Den returnerer en værdi på 1 for pixels, hvor den første raster er større end eller lig med den anden raster, og en værdi på 0 for pixels, hvor den første raster ikke er større end eller lig med den anden raster.",
		greaterThanName: "Større end",
		greaterThanSnip: "Udfører en relationsbaseret Større end-handling på to inputs celle for celle. Returnerer 1 for celler, hvor den første raster er større end den anden raster, og 0 for celler, hvis det ikke er tilfældet.",
		greaterThanDesc: "Funktionen udfører en relationsbaseret Større end-operation på to inputs pixel for pixel. Returnerer en værdi på 1 for pixels, hvor den første raster er større end den anden raster, og en værdi på 0 for pixels, hvor den første raster ikke er større end den anden raster.",
		heatIndexName: "Varmeindeks",
		heatIndexSnip: "Kombinerer omgivende temperatur og relativ fugtighed og returnerer oplevet temperatur.",
		heatIndexDesc: "Denne funktion beregner den oplevede temperatur baseret på omgivende temperatur og relativ fugtighed. Den oplevede temperatur beskrives ofte som hvor varmt det føles for menneskekroppen.<div><br/>Dette indeks kan være nyttigt til beregning af risiko i relation til medicinske problemer som muskelkrampe, dehydrering, varmeudmattelse eller, mere alvorligt, hedeslag på varme og fugtige dage. Når den relative fugtighed er høj, bliver det vanskeligere for kroppens sved at fordampe, hvilket gør det sværere for mennesker at blive afkølet på en naturlig måde. Kort over varmeguider eller advarsler er ofte et produkt af at omklassificere varmeindeksresultatet til klasser. Jo højere indeksværdien er, jo mere sandsynligt er det, at det bliver en advarsel frem for blot en vejledning.</div>",
		hillshadeName: "Skyggevirkning",
		hillshadeSnip: "Opretter en 3D-repræsentation af overfladen med solens relative position taget i betragtning ved skyggevirkning på billedet",
		hillshadeDesc: "Funktionen Skyggevirkning frembringer en 3D-repræsentation i gråtoneskala af terrænoverfladen med solens relative position, så der kommer skyggevirkning på billedet. <div><br/>Skyggevirkning er en teknik til visualisering af terræn på baggrund af en lyskilde og hældning og aspekt for højdeoverfladen. Det er en kvalitativ metode til visualisering af topografi og giver ikke absolutte højdeværdier. </div>",
		intName: "Heltal",
		intSnip: "Konverterer hver celleværdi for en raster til et helt tal ved afkortning.",
		intDesc: "Funktionen Heltal konverterer hver enkelt pixelværdi for en raster til et helt tal ved afkortning.",
		interpolateIrregularDataName: "Interpolér uregelmæssige data",
		interpolateIrregularDataSnip: "Interpolerer fra punktskyer eller uregelmæssige gitre.",
		interpolateIrregularDataDesc: "Nogle netCDF- eller HDF-datasæt gemmer deres geoplacering som uregelmæssigt adskilte arrayer af pixels eller punktdata. Når du tilføjer disse datasæt til et mosaikdatasæt, tager den interpolerede uregelmæssige datafunktion de uregelmæssige gitterdata og omstrukturerer dem, så hver pixel får samme størrelse og er firkantet.<div><br/>Når du tilføjer variabler fra netCDF eller HDF til et mosaikdatasæt, vil det automatisk kontrollere, om dataene er regelmæssigt opstillet. Hvis det ikke er tilfældet, kan den funktionen Interpolér uregelmæssige data bruges til at konvertere de uregelmæssige data til en raster med regelmæssigt gitter. Du kan ændre interpoationsmetoden og cellestørrelsen, der bruges i rasterfunktionen Interpolér uregelmæssige data. For rasterdata med regelmæssigt mellemrum vil der ikke blive anvendt interpolation, og dataene vil blive læst, som de er.</div>",
		isNullName: "er nul",
		isNullSnip: "Bestemmer hvilke værdier fra inputrasterne, der er NoData, celle for celle. Returnerer en værdi på 1, hvis inputværdierne er NoData, og 0 for celler, der ikke er.",
		isNullDesc: "Funktionen Er nul bestemmer, hvilke værdier fra inputrasteren der er NoData pixel for pixel. Den returnerer en værdi på 1, hvis inputværdien er NoData, og en værdi på 0 for pixels, der ikke er NoData.",
		kernelDensityName: "Kernetæthed",
		kernelDensitySnip: "Beregner en størrelse pr. område ud fra punkt- eller polylinje-egenskaber ved hjælp af en kernefunktion, så den tilpasser til en jævnt konisk overflade til hvert punkt eller hver polylinje.",
		kernelDensityDesc: "Denne funktion beregner en størrelse pr. område ud fra punkt- eller polylinje-egenskaber ved hjælp af en kernefunktion, så den tilpasser til en jævnt konisk overflade til hvert punkt eller hver polylinje.",
		keyMetadataName: "Vigtige metadata",
		keyMetadataSnip: "Tilsidesætter eller indsætter vigtige metadata for en raster i en funktionskæde.",
		keyMetadataDesc: "Denne funktion gør det muligt at indsætte eller tilsidesætte vigtige metadata for en raster.<div><br/>Oplysningerne i vigtige metadata bruges til at hjælpe applikationen med behandling og gengivelse, herunder at levere nyttige oplysninger som sensornavn, båndnavne eller skydække, der er forbundet med billedet.</div>",
		shortestPathName: "Rute med de laveste omkostninger",
		shortestPathSnip: "Udfører en omkostning/afstand-analyse ved hjælp af kilde- og destinationsinput, som derefter bruges til at fastlægge ruten med de laveste omkostninger fra en kilde til en destination.",
		shortestPathDesc: "Funktionen Rute med de laveste omkostninger beregner ruten med de laveste omkostninger fra en kilde til en destination. Afstanden med de laveste akkumulerede omkostninger beregnes for hver pixel over en omkostningsoverflade til nærmeste kilde. Det frembringer en outputraster, der registrerer den eller de ruter med de laveste omkostninger fra udvalgte steder til de nærmeste kildepixels, der er defineret inden for den akkumulative omkostningsoverflade, hvad angår omkostninger/afstand.<div><br/>Hver rute med de laveste omkostninger tildeles en værdi, når den registreres i scanningsprocessen. Den sidste pixel på kilderasteren på en omkostningsrute får værdien 1. Den første rute får værdien 3, den anden 4 osv. Når flere ruter fusionerer og følger den resterende afstand tilbage til en kilde ad samme rute, tildeles det segment, hvor de to ruter følges ad, værdien 2. Den fusionerede del af ruten kan ikke tildeles værdien fra en af ruterne, da den fusionerede del hører til begge ruter.</div>",
		lessThanEqualName: "Mindre end eller lig med",
		lessThanEqualSnip: "Udfører en relationsbaseret Mindre end eller lig med-handling på to inputs celle for celle. Returnerer 1 for celler, hvor den første raster er mindre end eller lig med den anden raster, og returnerer 0, når det ikke er tilfældet.",
		lessThanEqualDesc: "Funktionen udfører en relationsbaseret Mindre end eller lig med-operation på to inputs pixel for pixel. Den returnerer en værdi på 1 for pixels, hvor den første raster er mindre end eller lig med den anden raster, og en værdi på 0, hvor den ikke er mindre end eller lig med den anden raster.",
		lessThanName: "Mindre end",
		lessThanSnip: "Udfører en relationsbaseret Mindre end-handling på to inputs celle for celle. Returnerer 1 for celler, hvor den første raster er mindre end den anden raster og 0, hvis den ikke er.",
		lessThanDesc: "Funktionen udfører en relationsbaseret Mindre end-operation på to inputs pixel for pixel. Den returnerer en værdi på 1 for pixels, hvor den første raster er mindre end den anden raster, og en værdi på 0, hvis den ikke er mindre end den anden raster.",
		lnName: "Ln",
		lnSnip: "Beregner den naturlige logaritme (grundtal e) for celler i en raster.",
		lnDesc: "Funktionen Ln beregner den naturlige logaritme (grundtal e) for hver pixel i en raster.",
		log10Name: "Log10",
		log10Snip: "Beregner grundtal 10-logaritmen for celler i en raster.",
		log10Desc: "Funktionen Log10 beregner grundtal 10-logaritmen for hver pixel i en raster.",
		log2Name: "Log2",
		log2Snip: "Beregner grundtal 2-logaritmen for celler i en raster.",
		log2Desc: "Funktionen Log2 beregner grundtal 2-logaritmen for hver pixel i en raster.",
		lookupName: "Søgning",
		lookupSnip: "Opretter en ny raster ved at søge efter værdier, der findes i et andet felt i tabellen for inputrasteren.",
		lookupDesc: "Funktionen opretter en ny raster ved at slå værdier op, der findes i et andet felt i tabellen for inputrasteren.",
		mlClassifyName: "ML-klassifikation",
		mlClassifySnip: "Klassificerer billeder ved at vurdere hver enkelt pixel. Blandede pixels tildeles til de objekt med den højeste procentdel i den pågældende pixel.",
		mlClassifyDesc: "Funktionen ML-klassifikation giver dig mulighed for at udføre en overvåget klassifikation ved hjælp af algoritmen for den højeste sandsynlighedsklassifikation på et raster datasæt eller et mosaikdatasæt. Denne funktion kræver en klassifikationssignaturfil.",
		maskName: "Maske",
		maskSnip: "Indstiller værdier, som ikke skal vises.",
		maskDesc: "Denne raster-funktion angiver værdier, som ikke skal vises i din raster. Ved hjælp af funktionen Maske angives en eller flere NoData-værdier eller en række gyldige pixelværdier. ",
		minusName: "Minus",
		minusSnip: "Trækker værdien af den anden inputraster fra værdien af den første inputraster celle for celle.",
		minusDesc: "Funktionen Minus trækker værdien af den anden inputraster fra værdien af den første inputraster pixel for pixel.",
		modName: "Mod",
		modSnip: "Finder restværdien (modulo) af den første raster, når den divideres med den anden raster celle for celle.",
		modDesc: "Funktionen Mod finder restværdien (modulo) af den første raster, når den divideres med den anden raster pixel for pixel. Rækkefølgen af input er vigtig og påvirker outputresultatet.",
		mosaicRastersName: "Mosaikraster",
		mosaicRastersSnip: "Sætter et sæt rasterdatasæt sammen for at oprette et enkelt datasæt.",
		mosaicRastersDesc: "Funktionen Mosaikraster opretter et mosaikbillede ud fra flere billeder. Når der er overlapning mellem billederne, er der flere metoder, du kan vælge imellem for at bestemme, hvilke billeder der vises.",
		ndviColorizedName: "NDVI-farvelægning",
		ndviColorizedSnip: "Opretter et flerbåndsdatasæt, der repræsenterer vegetationssundhed baseret på forskellen mellem de røde og nær-infrarøde bånd.",
		ndviColorizedDesc: "Funktionen NDVI-farvelægning anvender NDVI-funktionen på inputbilledet og bruger derefter et farvekort eller en farveskala til at vise resultatet.",
		ndviName: "NDVI",
		ndviSnip: "Beregner Normalized Difference Vegetation Index (NDVI).",
		ndviDesc: "Funktionen NDVI skaber et enkeltbåndsdatasæt, der repræsenterer vegetationssundhed baseret på forskellen mellem de røde og nær-infrarøde bånd.<div><br/>NDVI er et standardiseret indeks, der gør det muligt at generere et billede, der viser grønhed, også kendt som relativ biomasse. Dette indeks drager fordel af kontrasten mellem de to bånds egenskaber ud fra et multispektralt rasterdatasæt. Absorberingen af klorofylpigment i det røde bånd og plantematerialernes høje refleksion i det nær-infrarøde (NIR) bånd. Ekstremt lave eller negative NDVI-værdier repræsenterer områder uden vegetation overhovedet, som f.eks. skyer, vand eller sne. Meget lave værdier repræsenterer områder med lav til ingen vegetation, såsom beton, sten eller bar jord. Moderate værdier repræsenterer områder med buske og græsarealer. Høje værdier repræsenterer skovområder og frodig vegetation.</div>",
		negateName: "Negér",
		negateSnip: "Ændrer fortegnet (ganger med -1) for celleværdierne for inputrasteren celle for celle.",
		negateDesc: "Funktionen Negér ændrer fortegnet (ganger med -1) for pixelværdierne for inputrasteren på en pixel ",
		nibbleName: "Nibble",
		nibbleSnip: "Erstatter celler i en raster, der svarer til en maske, med værdierne for de nærmeste naboer.",
		nibbleDesc: "Den globale funktion Nibble tillader, at udvalgte områder af en raster tildeles værdien for deres nærmeste nabo. Dette er nyttigt ved redigering af områder i en raster, hvor dataene kan være fejlagtige.",
		notEqualName: "Ikke lig med",
		notEqualSnip: "Udfører en relationsbaseret Ikke lig med-operation på to input celle for celle. Returnerer 1 for celler, hvor den første raster ikke er lig med den anden raster, og returnerer 0, når den er lig med.",
		notEqualDesc: "Funktionen udfører en relationsbaseret Ikke lig med-handling på to inputs pixel for pixel. Den returnerer en værdi på 1 for pixels, hvor den første raster ikke er lig med den anden raster, og en værdi på 0 for pixels, hvor den er lig med den anden raster.",
		pansharpeningName: "Pansharpen",
		pansharpeningSnip: "Forbedrer kunstigt den spatiale opløsning af et flerbåndsbillede ved at fusionere det med et pankromatisk billede med højere opløsning.",
		pansharpeningDesc: "Funktionen Pansharpen fusionerer et pankromatisk billede eller et rasterbånd med højere opløsning med en flerbåndsraster-datasæt med lavere opløsning for at øge flerbåndsbilledets spatiale opløsning.<div><br/>Formålet med Pansharpen er at skabe et billede med en højere visuel kvalitet. Da teknikkerne ændrer flerbåndsbilledets radiometri og spektrale egenskaber, skal Pansharpen-billeder bruges med forsigtighed til analytisk fjernmåling.</div>",
		pathAllocationName: "Rute-/afstandsallokering",
		pathAllocationSnip: "Beregner kilden med de laveste omkostninger for hver celle baseret på den laveste akkumulerede omkostning over en omkostningsoverflade, hvor der tages hensyn til overfladeafstand samt vandrette og lodrette omkostningsfaktorer.",
		pathAllocationDesc: "Funktionen Rute-/afstandsallokering beregner nærmeste kilde for hver celle baseret på den laveste akkumulerede omkostning over en omkostningsoverflade, hvor der tages hensyn til overfladeafstand samt vandrette og lodrette omkostningsfaktorer.",
		pathBackLinkName: "Rute/afstand BackLink",
		pathBackLinkSnip: "Definerer naboen, der er den næste celle på den rute med de laveste akkumulerede omkostninger til den kilde med de laveste omkostninger, hvor der tages hensyn til overfladeafstand samt vandrette og lodrette omkostningsfaktorer.",
		pathBackLinkDesc: "Funktionen Rute/afstand BackLink identificerer retningen for naboen, der er den næste celle på den rute med de laveste akkumulerede omkostninger til nærmeste kilde, hvor der tages hensyn til overfladeafstand samt vandrette og lodrette omkostningsfaktorer.",
		pathDistanceName: "Rute/afstand",
		pathDistanceSnip: "Beregner afstanden med de laveste akkumulerede omkostninger for hver celle fra eller til kilden med de laveste omkostninger, hvor der tages hensyn til overfladeafstand samt vandrette og lodrette omkostningsfaktorer.",
		pathDistanceDesc: "Funktionen Rute/afstand beregner afstanden med de laveste akkumulerede omkostninger for hver celle til nærmeste kilde, hvor der tages hensyn til overfladeafstand og vandrette og lodrette omkostningsfaktorer.",
		plusName: "Plus",
		plusSnip: "Lægger værdierne for to raster sammen celle for celle.",
		plusDesc: "Funktionen Plus lægger værdierne for to raster sammen pixel for pixel.",
		powerName: "Potens",
		powerSnip: "Opløfter celleværdierne i en raster til potensen af de værdier, der findes i en anden raster.",
		powerDesc: "Funktionen Potens opløfter pixelværdierne i en raster til potensen af de værdier, der findes i en anden raster.",
		radarCalibrationName: "Radarkalibrering",
		radarCalibrationSnip: "Konverterer RADARSAT-2-tilbagekastning.",
		radarCalibrationDesc: "Denne funktion kan bruges til at kalibrere RADARSAT-2-billeder i et mosaikdatasæt eller som et rasterprodukt. Kalibrering udføres på radarbilleder, så pixelværdierne er en sand repræsentation af radarens tilbagekastning.",
		rasterInfoName: "RasterInfo",
		rasterInfoSnip: "Ændrer egenskaberne i rasteren, f.eks. bitdybde, NoData-værdi, cellestørrelse osv.",
		rasterInfoDesc: "RasterInfo åbner en dialogboks med egenskaber for rasterdatasæt, såsom antallet af kolonner og rækker, antallet af bånd, pixeltype, udstrækning og den spatiale reference. Du kan redigere disse egenskaber ved at vælge et rasterdatasæt, der skal bruges som skabelon. ",
		rasterizeAttributesName: "Attributter for konvertering til raster",
		rasterizeAttributesSnip: "Beriger en raster gennem yderligere bånd, der kommer fra værdier af specificerede attributter fra en ekstern tabel eller en featuretjeneste.",
		rasterizeAttributesDesc: "Funktionen Attributter for konvertering til raster beriger en raster ved at tilføje bånd, der kommer fra værdier af specificerede attributter fra en ekstern tabel eller en featuretjeneste. Du kan eventuelt angive en zoneraster og den tilknyttede zone-ID-attribut for at aktivere regionsbaseret opslag.",
		rasterizeFeatureClassName: "Konverter objekter til raster",
		rasterizeFeatureClassSnip: "Konverterer objekter til raster.",
		rasterizeFeatureClassDesc: "Denne funktion konverterer polygon-, polylinje- og punktklassedata til et rasterlag.<div><br/>Objekter tildeles pixelværdier baseret på objekternes OBJECTID (standard). Eventuelt kan pixelværdierne baseres på et brugerdefineret værdifelt i inputobjektets attributtabel.</div>",
		recastName: "Omarbejd",
		recastSnip: "Ændrer parametrene for en funktionskæde i et mosaikdatasæt eller en billedtjeneste. Dette bruges ofte med LAS-datasæt for at undgå at skulle oprette et separat mosaikdatasæt til forskellige repræsentationer af terræn.",
		recastDesc: "Funktionen Omarbejd bruges til dynamisk at ændre funktionsparameteren, der anvendes i et mosaikdatasæt eller billedtjeneste, uden at ændringerne bevares fysisk.",
		regionGroupName: "Regionsgruppe",
		regionGroupSnip: "For hver celle i outputtet registreres identiteten af det forbundne område, som den pågældende celle tilhører. Der tildeles et unikt nummer til hver region.",
		regionGroupDesc: "Den globale funktion Regionsgruppe registrerer for hver celle i outputtet identiteten af det forbundne region, som den pågældende celle tilhører. Der tildeles et unikt nummer til hver region.<div><br/>Den første region, der scannes, modtager værdien en, den anden værdien to osv., indtil alle regioner har fået tildelt en værdi. Scanningen går fra venstre til højre, fra top til bund. De værdier, der tildeles outputzonerne, er baseret på, hvornår de registreres i scanningsprocessen.</div>",
		regionGrowName: "Regionsvækst",
		regionGrowSnip: "Frembringer regioner ud fra seed-punkter.",
		regionGrowDesc: "Funktionen Regionsvækst inddeler nabopixels i grupper ud fra den angivne radius fra seed-punktet. Gruppen af pixels eller objektet tildeles en angivet fyldværdi.",
		remapName: "Genberegn",
		remapSnip: "Ændrer pixelværdier ved at tildele nye værdier til intervaller af pixelværdier eller ved hjælp af en ekstern tabel.",
		remapDesc: "Funktionen Genberegn giver dig mulighed for at ændre eller omklassificere pixelværdierne for rasterdataene. Dette kan gøres ved enten at angive et interval af pixelværdier, der skal kortlægges til en output-pixelværdi, eller ved at bruge en tabel til at kortlægge pixelværdierne til outputpixelværdien.",
		reprojectName: "Genprojektion",
		reprojectSnip: "Ændrer projektionen af et rasterdatasæt, mosaikdatasæt eller rasterelement i et mosaikdatasæt. Det kan også omstrukturere dataene til en ny cellestørrelse og definere en oprindelse.",
		reprojectDesc: "Funktionen Genprojektion ændrer projektionen af et rasterdatasæt, mosaikdatasæt eller rasterelement i et mosaikdatasæt. Det kan også omstrukturere dataene til en ny cellestørrelse og definere en oprindelse.<div><br/>Funktionen Genprojektion kan bruges, når der oprettes en cache ud fra et raster- eller mosaikdatasæt, der ikke er i den påkrævede projektion. Når du f.eks. opretter en cachelagret billedtjeneste, som kan integreres af applikationer med andre cache-tjenester, er det vigtigt, at de alle er i samme projektion. Dette er ofte en Web Mercator-projektion. Eftersom mosaikdatasættet ikke kan genprojiceres, kan du gøre et af to: Du kan enten oprette et mosaikdatasæt, der refereres til, ud fra dit mosaikdatasæt i den ønskede projektion, eller du kan tilføje funktionen Genprojektion til mosaikdatasættets funktionskæde. Et andet eksempel bruger denne funktion på raster-elementet i et mosaikdatasæt. Når du bruger funktionen Cachelagret raster, ønsker du muligvis at indsætte funktionen Genprojektion, så cachen oprettes i den nye projektion. Rasteremner i et mosaikdatasæt kan cachelagres, når behandlingen er intens, og du forsøger at udgive en billedtjeneste, der er hurtig, uden at cachelagre hele billedtjenesten.</div>",
		resampleName: "Omstrukturering",
		resampleSnip: "Ændrer cellestørrelsen på en raster.",
		resampleDesc: "Funktionen Omstrukturering ændrer cellestørrelse, omstruktureringstype eller begge dele.<div><br/>Funktionen Omstrukturering bør kun bruges sammen med specifikke beregningskrav; for eksempel når du beregner vind- eller strømretningen, hvilket kræver omstrukturering fra kildeopløsningen.</div>",
		roundDownName: "Rund ned",
		roundDownSnip: "Returnerer den næste lavere heltalværdi, kun repræsenteret som en værdi med flydende komma, for hver celle i en raster.",
		roundDownDesc: "Funktionen Rund ned returnerer det næste lavere heltal som en værdi med flydende komma for hver pixel i en raster.",
		roundUpName: "Rund op",
		roundUpSnip: "Returnerer den næste højere heltalværdi, kun repræsenteret som en værdi med flydende komma, for hver celle i en raster.",
		roundUpDesc: "Rund op returnerer det næste højere heltal som en værdi med flydende komma for hver pixel i en raster.",
		segmentMeanShiftName: "Segment Mean Shift",
		segmentMeanShiftSnip: "Grupperer nabopixels med lignende spektrale egenskaber i segmenter.",
		segmentMeanShiftDesc: "Denne funktion identificerer objekter eller segmenter i dine billeder ved at gruppere tilstødende pixels, der har lignende spektrale og spatiale egenskaber. Du kan styre mængden af spatial og spektral udglatning for at hjælpe med at udlede funktioner, der har interesse.",
		s1RadiometricCalibrationName: "Sentinel-1 radiometrisk kalibrering",
		s1RadiometricCalibrationSnip: "Udfører forskellige typer radiometrisk kalibrering på Sentinel-1 data.",
		s1RadiometricCalibrationDesc: "Denne raster-funktion udfører tre forskellige kalibreringer for Sentinel 1-datasæt, herunder beta nought og gamma, og output er det kalibrerede datasæt. Målet med SAR-kalibrering er at tilvejebringe billeder, hvor pixelværdier kan relateres direkte til radarens tilbagekastning af scenen. Selvom ukalibrerede SAR-billeder er tilstrækkelige til kvalitativ brug, er kalibrerede SAR-billeder afgørende for kvantitativ brug af SAR-data.<div><br/>Typisk SAR-databehandling, som frembringer niveau 1-billeder, omfatter ikke radiometriske korrektioner og signifikante radiometriske biasrester. Derfor er det nødvendigt at anvende radiometrisk korrektion på SAR-billeder, så pixelværdierne for billederne virkelig repræsenterer radar-tilbagekastningen af den reflekterende overflade. Radiometrisk korrektion er også nødvendig for sammenligning af SAR-billeder, der kommer fra forskellige sensorer eller fra samme sensor på forskellige tidspunkter, i forskellige tilstande eller som er behandlet af forskellige processorer.</div>",
		s1ThermalNoiseRemovalName: "Fjernelse af termisk støj fra Sentinel-1 data",
		s1ThermalNoiseRemovalSnip: "Fjerner termisk støj fra Sentinel-1 data.",
		s1ThermalNoiseRemovalDesc: "Termisk støjkorrektion kan anvendes på fra Sentinel-1 Level-1 Single Look Complex (SLC)-produkter samt GRD-produkter (Level-1 Ground Range Detection), som ikke allerede er rettet. Operatøren kan også fjerne denne korrektion baseret på produktanmærkningerne for at genindføre det støjsignal, der blev fjernet for at frembringe det oprindelige produkt. Produktanmærkningerne bliver opdateret i overensstemmelse hermed, så korrektionen kan genanvendes. ",
		setNullName: "Angiv nul",
		setNullSnip: "Angiv nul angiver identificerede celleplaceringer til NoData baseret på et specificeret kriterium. Det returnerer NoData, hvis en betinget evaluering er sand, og returnerer værdien, der er angivet af en anden raster, hvis den er falsk.",
		setNullDesc: "Funktionen Angiv nul angiver de identificerede pixels til NoData, baseret på de specifikke kriterier. Den returnerer NoData, hvis en betinget vurdering er sand (1) og returnerer værdien, der er angivet i rasteren Falsk, hvis en betinget evaluering er falsk (0). Dette kriterium er angivet af outputtet fra en logisk matematisk funktion, som er inputrasteren.",
		shadedReliefName: "Skyggeeffekt",
		shadedReliefSnip: "Opretter en farvekodet, flerbånds 3D-repræsentation af overfladen med solens relative position taget i betragtning ved skyggelægning af billedet.",
		shadedReliefDesc: "Funktionen Skyggeeffekt skaber en 3D-repræsentation i farver af terrænet, som er skabt ved at fusionere billederne fra metoderne højdekode og skyggevirkning. Denne funktion bruger højde- og azimutegenskaberne til at angive solens position.<div><br/></div>",
		sinHName: "SinH",
		sinHSnip: "Beregner den hyperbolske sinus for celler i en raster.",
		sinHDesc: "Funktionen beregner den hyperbolske sinus for pixels i en raster.",
		sinName: "Sin",
		sinSnip: "Beregner sinus for celler i en raster.",
		sinDesc: "Funktionen beregner sinus for pixels i en raster.",
		slopeName: "Stigning",
		slopeSnip: "Beregner ændringshastigheden fra en pixelværdi til dens naboer.",
		slopeDesc: "Denne rasterfunktion beregner hældning, hvilket er hastigheden af ændring i højde for hver celle i en digital elevationsmodel (DEM). Det er den første afledte værdi af en DEM.<div><br/>Denne funktion bruger en accelereret atan()-funktion. Det er seks gange hurtigere, og tilnærmelsesfejlen er altid mindre end 0,3 grader.</div>",
		speckleName: "Speckle",
		speckleSnip: "Indeholder filtre til fjernelse af støj fra syntetiske aperturradar-datasæt.",
		speckleDesc: "Speckle er højfrekvent støj på radardata. Billederne, der genereres af SAR-systemer, er meget udsat for speckling-effekter på grund af behandlingen af spredte signaler og interferens fra elektromagnetiske bølger, der spredes fra overflader eller objekter. Denne Speckle-funktion filtrerer det specklede radardatasæt og udjævner støjen, mens kanter eller skarpe objekter i billedet bevares.",
		spectralConversionName: "Spektralkonvertering",
		spectralConversionSnip: "Anvender en matrix på et flerbåndsbillede.",
		spectralConversionDesc: "Funktionen Spektralkonvertering anvender en matrix på et flerbåndsbillede til at påvirke outputtets farveværdier.<div><br/>Nogle sensorer indsamler ikke blå bånd på grund af et lavt signal i forhold til støjen. Det kan f.eks. bruges til at konvertere et forkert farvet infrarødt billede til et pseudo-naturligt farvebillede.</div>",
		squareRootName: "Kvadratrod",
		squareRootSnip: "Beregner kvadratroden af celleværdierne i en raster.",
		squareRootDesc: "Funktionen Kvadratrod beregner kvadratroden af pixelværdierne i en raster.",
		squareName: "Kvadrat",
		squareSnip: "Beregner kvadratet af celleværdierne i en raster.",
		squareDesc: "Kvadrat beregner kvadratet af pixelværdierne i en raster.",
		statisticsHistogramName: "Statistik og histogram",
		statisticsHistogramSnip: "Definer eller tilknyt statistik og histogram.",
		statisticsHistogramDesc: "Funktionen Statistik og histogram bruges til at definere statistikken og histogrammet for en raster. Du kan indsætte denne funktion i slutningen af funktionskæden for at beskrive statistikken og histogrammet for en rasterfunktionsskabelon (RFT). Det kan være nødvendigt for at styre standardvisningen af behandlingsresultatet, især når der defineres en funktionskæde, der indeholder mange funktioner.<div><br/>Du kan definere statistikker ved at skrive værdierne eller importere fra et rasterdatasæt eller en XML-fil. Histogrammer kan kun defineres ved at importere en fil.</div>",
		statisticsName: "Statistik",
		statisticsSnip: "Beregner fokuseret statistik for hver pixel i et billede baseret på et defineret fokusområde.",
		statisticsDesc: "Funktionen Statistik beregner fokuseret statistik for hver pixel i et billede baseret på et defineret nærliggende fokusområde.<div><br/>Funktionen Statistik kan bruges til at udfylde tabte linjer i et billede. Tabte linjer skyldes ofte problemer i sensoren, hvor der ikke bliver indsamlet data. Dette er sket i sensorer som Landsat 7s Enhanced Thematic Mapper Plus (ETM+). Disse manglende data giver problemer ved analyse, samt når man ser på billedet. Der er ikke meget, der kan gøres, når man bruger billedet til analyse. Men hvis der findes et overlappende billede, kan det bruges i stedet for det manglende indhold. Det samme kan gøres, hvis billedet bruges til visualisering. Der findes dog ikke altid et ekstra billede til at udfylde det manglende indhold, så det skal udledes af de eksisterende data.</div>",
		streamLinkName: "Strømlink",
		streamLinkSnip: "Tildeler unikke værdier til dele af et lineært rasternetværk mellem skæringer.",
		streamLinkDesc: "Den globale funktion Strømlink tildeler unikke værdier til dele af et lineært rasternetværk mellem skæringer.<div><br/>Links er delen af en strømkanal, der forbinder to på hinanden følgende knudepunkter, et knudepunkt og udløbet, eller et knudepunkt og dræningsdelingen. Inden for hydrologi kaldes disse strømsegmenter for lige strækninger. Et knudepunkt er relateret til et punkt for vandløbsretning og medvirker til at markere et vandskel eller grænsen til et dræningsunderbasin.</div>",
		stretchName: "Stræk",
		stretchSnip: "Forbedrer et billede ved at justere rækkevidden af de viste værdier. Dette ændrer ikke de underliggende pixelværdier. Hvis en pixel har en værdi, der ligger uden for det angivne interval, vises den som enten minimum- eller maksimumværdien.",
		stretchDesc: "Funktionen Stræk forbedrer et billede ved at ændre egenskaber som lysstyrke, kontrast og gamma gennem flere stræktyper. Denne funktion bruger statistikkerne fra raster inden for mosaikdatasættet. Derfor skal du sørge for, at der er beregnet statistikker, hvis du benytter denne funktion.<div><br/>Stræktypen definerer et histogram-træk, som vil blive anvendt på rasterne for at forbedre deres udseende. Strækning forbedrer dataenes udseende ved at sprede pixelværdierne langs et histogram ud fra minimum- og maksimumværdierne, der er defineret af deres bitdybde. </div>",
		swathName: "Swath",
		swathSnip: "Interpolerer fra uregelmæssige grids eller swath-data.",
		swathDesc: "Nogle netCDF- eller HDF-datasæt gemmer deres geoplacering som uregelmæssigt adskilte arrayer. Når du tilføjer disse datasæt til et mosaikdatasæt, tager den interpolerede uregelmæssige datafunktion de uregelmæssige gitterdata og omstrukturerer dem, så hver pixel får samme størrelse og er firkantet.<div><br/>Når du tilføjer variabler fra netCDF eller HDF til et mosaikdatasæt, vil det automatisk kontrollere, om dataene er regelmæssigt opstillet. Hvis det ikke er tilfældet, bliver Swath-funktionen automatisk anvendt til at konvertere den uregelmæssige raster til punkter og derefter til en raster med regelmæssigt gitter. Du kan ændre interpoationsmetoden og cellestørrelsen, der bruges i rasterfunktionen Swath. For rasterdata med regelmæssigt mellemrum vil der ikke blive anvendt interpolation, og dataene vil blive læst, som de er.</div>",
		tanHName: "TanH",
		tanHSnip: "Beregner den hyperbolske tangens for pixels i en raster.",
		tanHDesc: "Funktionen beregner den hyperbolske tangens for pixels i en raster.",
		tanName: "Tan",
		tanSnip: "Beregner tastens for celler i en raster.",
		tanDesc: "Funktionen beregner tangens for pixels i en raster. ",
		tasseledCapName: "Tasseled Cap (Kauth-Thomas)",
		tasseledCapSnip: "Beregner niveauer for vegetation, vådhed og lysstyrke. Denne teknik er baseret på koefficienter, der skal beregnes specifikt til en sensor.",
		tasseledCapDesc: "Tasseled Cap (Kauth-Thomas)-transformationen er beregnet til at analysere og kortlægge vegetationsfænomenologi og ændringer i byudvikling, der registreres af forskellige satellitsensorsystemer. Det er kaldes Tasseled Cap-transformation på grund af formen på den grafiske distribution af data. Transformationen tilvejebragte et rationale for de mønstre, der findes i Landsat MSS-data for landbrugsarealer som en funktion af afgrødens livscyklus. Når afgrøder vokser fra frø til moden plante, sker der en nettoforøgelse i nær-infrarød reflektion og et fald i rød reflektion baseret på jordfarve<div><br/>Anvendelsen af ​​denne transformation er udvidet fra overvågning af afgrøder til analyse og kortlægning af vegetation til en række anvendelser som skovbrug, industriel vegetationsstyring, kortlægning og styring af økosystemer, opgørelse og overvågning af kulstofudledning og -kreditter, byudvikling og meget mere. Det er også udvidet sig fra kun at understøtte Landsat MSS til at omfatte andre populære satellitsystemer som Landsat TM, Landsat ETM+, Landsat 8, IKONOS, QuickBird, WorldView-2 og RapidEye multispektrale sensorer.</div>",
		timesName: "Tider",
		timesSnip: "Multiplicerer værdierne af to raster celle for celle.",
		timesDesc: "Funktionen Tider multiplicerer værdierne for to raster pixel for pixel.",
		transposeBitsName: "Transponer bits",
		transposeBitsSnip: "Udpakker bitsene i inputpixlen og mapper dem til specificerede bits i outputpixlen. Formålet med denne funktion er at manipulere bits fra nogle få input, såsom Landsat 8 kvalitetsbåndprodukterne.",
		transposeBitsDesc: "Funktionen Transponer bits udpakker bitsene i inputpixlen og mapper dem til specificerede bits i outputpixlen. Formålet med denne funktion er at manipulere bits fra nogle få input, såsom Landsat 8 kvalitetsbåndprodukterne.",
		unitConversionName: "Enhedskonvertering",
		unitConversionSnip: "Ændrer værdier fra en måleenhed til en anden.",
		unitConversionDesc: "Denne funktion konverterer pixels fra en enhed til en anden. Den understøtter konvertering af afstand, hastighed og temperatur.",
		vectorFieldName: "Vektorfelt",
		vectorFieldSnip: "Viser datasæt med både størrelse (u) og retning (v) som pile, hvor størrelsen er repræsenteret af størrelse og retningen er repræsenteret af pilens vinkel.",
		vectorFieldDesc: "Funktionen Vektorfelt bruges til at sammensætte og konvertere to raster til en tobåndsraster, der enten har datatypen Størrelse-Retning eller datatypen UV.<div><br/>U-værdien betegnes undertiden som zonehastigheden, og V-værdien betegnes undertiden som meridionalhastigheden.</div>",
		viewshed2Name: "Synsfelt",
		viewshed2Snip: "Bestemmer, hvilke placeringer af rasteroverflader, der er synlige for et sæt observatør-objekter ved hjælp af geodætiske metoder.",
		viewshed2Desc: "Funktionen Synsfelt bestemmer, hvilke placeringer af rasteroverflader, der er synlige for et sæt observatør-objekter ved hjælp af geodætiske metoder<div><br/>Sigtbarheden af ​​hvert pixelcenter bestemmes af en synslinjetest mellem målet og hver enkelt observatør. Hvis en observatør kan se målet ved pixelcentret, betragtes en pixel som synlig. Dette værktøj tager altid hensyn til jordens krumning, når synligheden fastlægges.</div>",
		watershedName: "Vandskel",
		watershedSnip: "Fastlægger det bidragende område, der ligger over et sæt pixels i en raster",
		watershedDesc: "Den globale funktion Vandskel fastlægger det bidragende område, der ligger over et sæt pixels i en raster. Vandskel af markeret ud fra en strømretningsraster, der identificerer strømretningen ud fra hver pixel.",
		weightedOverlayName: "Vægtet overlay",
		weightedOverlaySnip: "Lægger flere raster oven på hinanden ed hjælp af en fælles måleskala og vægt i overensstemmelse med deres individuelle vigtighed.",
		weightedOverlayDesc: "Denne funktion gør det muligt at lægge flere raster oven på hinanden ved hjælp af en fælles måleskala og vægt i overensstemmelse med deres individuelle vigtighed.",
		weightedSumName: "Vægtet sum",
		weightedSumSnip: "Vægter og tilføjer en array af raster celle for celle.",
		weightedSumDesc: "Funktionen Vægtet sum giver mulighed for at udføre overlay på flere raster, multiplicere hver enkelt med deres givne vægt og lægge dem sammen.",
		windchillName: "Vindafkøling",
		windchillSnip: "Kombinerer den omgivende temperatur og vindhastighed for at beregne Vindafkølingsfaktoren.",
		windchillDesc: "Funktionen Vindafkøling er nyttig til at identificere farlige vinterforhold, der kan resultere i forfrysninger eller endog hypotermi, afhængig af hvor længe man udsættes for elementerne. Vindafkøling er en måde at måle på, hvor koldt en person føler det, når der tages hensyn til vinden ved kolde temperaturer. Jo større vindhastighed, jo hurtigere mister kroppen varme, og jo koldere det vil føles.",
		zonalRemapName: "Genberegning af zoner",
		zonalRemapSnip: "Genberegner pixels i en raster baseret på zoner, der er defineret i en anden raster, og zone-afhængig værdi-kortlægning, der er defineret i en tabel.",
		zonalRemapDesc: "Denne funktion giver mulighed for at genberegne pixels i en raster baseret på zoner, der er defineret i en anden raster, og zone-afhængig værdi-kortlægning, der er defineret i en tabel.",
		zonalStatisticsName: "Zonestatistik",
		zonalStatisticsSnip: "Beregner statistik for værdier i en raster inden for zonerne i et andet datasæt.",
		zonalStatisticsDesc: "Funktionen beregner statistik for værdier i en raster inden for zonerne i et andet datasæt. En zone er defineret som alle områder i inputtet, der har samme værdi. Disse områder behøver ikke at støde op til hinanden. Når zone- og værdi-input begge er raster med samme opløsning, bruges de direkte. Hvis opløsningerne er forskellige, anvendes en intern omstrukturering for at gøre opløsningerne ens, inden zoneoperationen udføres.",
		flowLengthName: "Flow-længde",
		flowLengthSnip: "Beregner opstrøms- eller nedstrømsafstanden eller den vægtede afstand langs strømningsvejen for hver celle.",
		flowLengthDesc: "Dette er en global rasterfunktion. Denne funktion opretter et rasterlag med opstrøms- eller nedstrømsafstand eller vægtet afstand langs strømningsvejen for hver celle.<div><br/>En primær anvendelse af funktionen Flow-længde er at beregne længden af ​​den længste strømningsvej inden for et givet bassin. Denne måling bruges ofte til at beregne koncentrationstiden for et bassin. Dette gøres ved hjælp af indstillingen Opstrøms. Funktionen kan også bruges til at oprette afstandsdiagrammer over hypotetisk nedbør og afstrømningshændelser ved hjælp af vægtrasteren som en impedans for nedadgående bevægelse.</div>",
		streamOrderName: "Strømrækkefølge",
		streamOrderSnip: "Tildeler en numerisk rækkefølge til segmenter i en raster, der repræsenterer grene i et lineært netværk",
		streamOrderDesc: "Dette er en global rasterfunktion. Denne funktion opretter et rasterlag, der tildeler en numerisk rækkefølge til segmenter i en raster, der repræsenterer grene i et lineært netværk.<div><br/>Outputtet fra funktionen Strømrækkefølge vil være af højere kvalitet, hvis input strøm-rasterlaget og input-flowretnings-rasterlaget er afledt fra samme overflade. Hvis strømrasteren er afledt fra et rasteriseret strømsdatasæt, er output muligvis ikke anvendeligt, fordi retningen, celle for celle, ikke svarer til placeringen af strømceller. Resultaterne af funktionen Flow-akkumulering kan bruges til at skabe et raster strøm-netværk ved at anvende en tærskelværdi til at vælge celler med et høj akkumuleret flow. F.eks. bruges celler, hvor mere end 100 celler strømmer ind i dem, til at definere strøm-netværket. Brug funktionerne Betinget eller Angiv nul til at oprette en strømnetværksraster, hvor flowakkumuleringsværdier på 100 eller derover går til en, og resten sendes i baggrunden (NoData). Det resulterende strømnetværk kan bruges i funktionen Strømrækkefølge. Denne funktion understøtter kun et D8-inputflow-retnings-rasterlag. D8-flowretninger kan oprettes ved hjælp af funktionen Flowretning og køres med standardflowretningstypen D8.</div>",
		snapPourPointName: "Fastgør punkt for vandløbsretning",
		snapPourPointSnip: "Fastgør punkter for vandløbsretning til cellen med højeste flowakkumulering inden for en specificeret afstand",
		snapPourPointDesc: "Dette er en global rasterfunktion. Denne funktion fastgør punkter for vandløbsretning til cellen med højeste flowakkumulering inden for en specificeret afstand.<div><br/>Funktionen Fastgør punkt for vandløbsretning bruges til at sikre valget af punkter med højt akkumuleret flow ved afgrænsning af dræningsbassiner ved hjælp af funktionen Vandskel. Fastgør punkt for vandløbsretning søger inden for fastgørelsesafstanden omkring de specificerede punkter for vandløbsretning for cellen med det højeste akkumulerede flow og flytter punktet for vandløbsretning til det sted. Output er et heltal-rasterlag, når de originale placeringer for punkter for vandløbsretning er blevet fastgjort til steder med højere akkumuleret flow.</div>",
		sinkName: "Fordybning",
		sinkSnip: "Opretter en raster, der identificerer alle fordybninger eller områder med intern dræning",
		sinkDesc: "Dette er en global rasterfunktion. Denne funktion skaber et rasterlag, der identificerer alle fordybninger eller områder med intern dræning. En fordybninger er en celle eller et sæt spatialt forbundne celler med en flowretning, der ikke kan tildeles en af de otte gyldige værdier i en flowretningsraster. Dette kan opstå, når alle tilstødende celler er højere end behandlingscellen, eller når to celler strømmer ind i hinanden, hvilket skaber en to-celle-sløjfe.<div><br/>Funktionen Fordybning understøtter kun et D8-inputflow-rasterlag. D8-flowretninger kan oprettes ved hjælp af funktionen Flowretning og køres med standard flowretningstypen D8. Outputtet fra funktionen Fordybning er en heltal-raster, hvor hver fordybning tildeles en unik værdi. Disse unikke værdier har et interval mellem et og det samlede antal fordybninger. Hvis det samlede antal dræn f.eks. er 1000, så spænder de unikke værdier fra 1 til 1000.</div>",
		aggregateName: "Aggregér",
		aggregateSnip: "Genererer en version af en raster med lavere opløsning.",
		aggregateDesc: "Funktionen Aggregér omstrukturerer en input-raster til en grovere opløsning baseret på en specificeret aggregeringsstrategi. Enhver output-celle indeholder Sum, Minimum, Maksimum, Middelværdi eller Median for de input-celler, som er omgivet af den pågældende celles udstrækning.<div><br/>Du kan angive den faktor, som input-rasterens cellestørrelse skal ganges med. For eksempel vil en cellefaktor på 3 resultere i en output-cellestørrelse, der er er 3 gange større end input-rasterens cellestørrelse. Du kan definere, hvordan outputtets udstrækning skal håndteres, hvis antallet af rækker eller kolonner i inputtet ikke er nøjagtig multipel af cellefaktoren. Som standard vil de øverste og højre grænser blive udvidet til at dække en større spatial udstrækning end input-rasteren for at sikre, at alle input-cellerne behandles. De øverste og højre grænser kan også reduceres med henblik på at dække en mindre udstrækning, så antallet af rækker og kolonner er en nøjagtig multipel af cellefaktoren. Du kan definere, hvordan NoData-celler skal behandles af aggregeringsberegningen. Standardmekanismen er, at input-NoData-celler, der falder inden for den spatiale udstrækning af en større celle i output-rasteren, vil blive tilsidesat, når den pågældende output-celles værdi skal fastsættes. Du kan også angive, at hvis der blot er en enkelt input-NoData-celle inden for den spatiale udstrækning af en output-celle, vil denne celle være en NoData-celle i output-rasteren.</div>",
		ccdcName: "CCDC-analyse",
		ccdcSnip: "Evaluerer ændringer i pixelværdier over tid ved hjælp af algoritmen Continuous Change Detection and Classification (CCDC) og genererer modelresultater.",
		ccdcDesc: "Funktionen CCDC-analyse evaluerer ændringer i pixelværdier over tid ved hjælp af algoritmen Continuous Change Detection and Classification (CCDC) og genererer en flerdimensional raster, der indeholder modelresultater. Den understøttes udelukkende i sammenhæng med funktionen Detektér ændring ved hjælp af ændringsanalyse i en rasterfunktionsskabelon. Hvis du vil generere et raster-output, skal du knytte funktionen CCDC-analyse til funktionen Detektér ændring ved hjælp af ændringsanalyse, gemme den som en rasterfunktionsskabelon og køre rasteranalyse sammen med funktionsskabelonen.<div><br/>Denne funktion anvender algoritmen Continuous Change Detection and Classification (CCDC) til at evaluere ændringer i pixelværdier over tid for en stak billeder. I en tidsserie med optiske billeder eller afledte billeder (f.eks. NDVI) kan pixelværdierne variere af flere årsager: 1. Sæsonbestemt ændring – Ændringer i pixelværdierne reflekterer ændringer i vegetationen på grund af sæsonbestemte variationer i temperatur og nedbør. På den nordlige halvkugle forventer vi f.eks. at se en højere tæthed af grøn vegetation om sommeren end om vinteren; 2. Gradvis ændring – Ændringer i pixelværdierne reflekterer tendenser i vegetation eller overfladevand på grund af klimavariation eller arealforvaltningspraksis over lang tid. For eksempel kan omfanget af jordbund uden bevoksning vokse gradvist på grund af nedgang i nedbørsmængderne over lang tid; og 3. Pludselig ændring – Ændringer i pixelværdierne reflekterer ændringer i arealdække, der opstår pludseligt pga. skovrydning, byudvikling, naturkatastrofer osv. CCDC-algoritmen identificerer alle tre ændringstyper med det primære formål at identificere pludselige ændringer. Harmoniske regressions- og tendensmodeller knyttes til dataene med henblik på at beregne sæsonbestemte eller gradvise ændringer, og pludseligt opståede afvigelser fra tendensmodellerne er indikation på pludselige ændringer.<div><br/>CCDC-algoritmen blev oprindeligt udviklet til Landsat TM-, Landsat ETM+- og Landsat OLI-data, Surface Reflectance- eller Brightness Temperature-data. Dog vil funktionen Detektér ændring ved hjælp af ændringsanalyse sammen med denne funktion detektere ændringer af flerbåndsbilleder fra enhver understøttet sensor samt afledte enkeltbåndsbilleder, såsom båndindekser. Du kan f.eks. udføre kontinuerlig ændringsdetektering på en Normalize Difference Vegetation Index (NDVI)-raster, fordi pludselige ændringer i NDVI kan indikere skovrydning.</div>",
		computeChangeName: "Beregn ændring",
		computeChangeSnip: "Beregner forskellen på to kategoriske eller kontinuerlige rasterdatasæt.",
		computeChangeDesc: "Funktionen Beregn ændring kan anvendes til at beregne forskellene på to klassificerede rastere for arealdække-ændringsanalyse, eller den kan anvendes til at undersøge ændringer mellem to enkeltbånds kontinuerlige rastere, såsom højde, temperatur, kronedækningsgrad osv.",
		detectChangeName: "Detektér ændring ved hjælp af ændringsanalyse",
		detectChangeSnip: "Genererer et rasterlag, der indeholder oplysninger om pixelændringer ved brug af output-ændringsanalyseraster.",
		detectChangeDesc: "<div>Funktionen Detektér ændring ved hjælp af ændringsanalyse genererer et rasterlag, der indeholder oplysninger om pixel-datoændringer ved brug af ændringsanalyseraster. Ændringsanalyserasteren skal genereres af værktøjet Analysér ændringer ved hjælp af CCDC eller værktøjet Analysér ændringer ved hjælp af LandTrendr eller rasterfunktionen CCDC-analyse eller funktionen LandTrendr-analyse.</div><br><div>Denne rasterfunktion kan kombineres med rasterfunktionen CCDC-analyse eller funktionen LandTrendr-analyse i en rasterfunktionsskabelon. For at generere et permanent rasteroutput skal du knytte outputtet fra funktionen CCDC-analyse eller LandTrendr-analyse til funktionen Detektér ændring ved hjælp af ændringsanalyse, gemme det som en raster-funktionsskabelon og køre Raster-analyse med skabelonen.</div><br><div>Parameteren <strong>Ændringstype</strong> angiver de oplysninger, der genereres. Oplysningerne hentes fra ændringsanalyserasteren. Når du kører denne funktion på outputtet fra CCDC-funktionen/-værktøjet, kan du vælge mellem følgende indstillinger:</div><ul><li><strong> Tid for seneste ændring</strong>–Den seneste dato og det seneste tidspunkt, hvor en pixel blev markeret som ændret.</li><li><strong>Tid for tidligste ændring</strong>–Den tidligste dato og det tidligste tidspunkt, hvor en pixel blev markeret som ændret.</li><li><strong>Tid for største ændring</strong>–Den dato og det tidspunkt, hvor den beregnede ændring var den vigtigste for en pixel.</li><li> <strong>Antal ændringer</strong>–Det samlede antal gange, pixlen er blevet ændret.</li></ul><div>Når denne funktion køres på outputtet fra LandTrendr-funktionen/-værktøjet, er følgende yderligere indstillinger tilgængelige: </div><ul><li><strong>Tid for længste ændring</strong>–Den dato, hvor en pixel blev markeret som ændret ved begyndelsen eller slutningen af den længste ændringsperiode.</li><li><strong>Tid for korteste ændring</strong>Den dato, hvor en pixel blev markeret som ændret, ved begyndelsen eller slutningen af den korteste ændringsperiode.</li><li><strong>Tid for hurtigste ændring</strong>–Den dato, hvor en pixel blev markeret som ændret, ved begyndelsen eller slutningen af den hurtigste ændringsperiode.</li><li><strong>Tid for langsomste ændring</strong>–Den dato, hvor en pixel blev markeret som ændret, ved begyndelsen eller slutningen af den langsomste ændringsperiode.</li></ul><div>Output-rasteren er en multibåndsraster, hvori hvert bånd indeholder ændringsoplysninger afhængigt af den valgte ændringstype og det maksimale antal ændringer, der er angivet. Hvis <strong>Ændringstype</strong> f.eks. er indstillet til <strong>Tid for tidligste ændring</strong>og <strong>Maksimalt antal ændringer</strong>er indstilet til 2, beregner funktionen de to tidligste datoer, hvor der forekom ændringer i hele tidsserien for hver pixel. Resultatet er en raster, hvori det første bånd indeholder datoerne for den tidligste ændring pr. pixel, og det andet bånd indeholder datoerne for den andentidligste ændring pr. pixel.</div><br><div>Ved anvendelse af denne funktion på outputtet fra LandTrendr-værktøjerne kan du vælge, om du vil hente den dato, der markerer begyndelsen af en ændring eller slutningen af en ændring ved hjælp af parameteren <strong>Segmentdato</strong>. Hvis du f.eks. ønsker at forstå, hvordan den seneste ændring i tidsserien er startet, skal du indstille <strong>Ændringstype</strong> til <strong>Tid for seneste ændring</strong> og <strong>Segmentdato</strong> til <strong>Start på segment</strong>.</div><br><div>Brug følgende filtreringsparametre til at udtrække flere specifikke ændringsdatoer fra din ændringsanalyseraster:</div><ul><li><strong>Filtrér efter år</strong>– Identificér ændringer, der er opstået inden for en bestemt tidsperiode, hvis du f.eks. er på udkig efter ændringer, der er opstået i et landskab i løbet af fem år med tørke.</li><li><strong>Filtrér efter varighed</strong>–Identificér ændringer, der er opstået inden for en givet årrække, hvis du f.eks. er på udkig efter pludselige ændringer, der er indtruffet i løbet af 1 eller 2 år. Du kan beregne den varighed, du er interesseret i, ved hjælp af formlen <strong>slutår - startår +1</strong>. Der vil være inkluderet \"huller\" i tidsserien.</li><li><strong>Filtrér efter størrelse</strong>– Identificér ændringer af en given størrelse, hvis du f.eks. er på udkig efter store ændringer i vegetationsindekset NDVI. Størrelse er en absolut værdi, så minimum- og maksimumværdierne kan ikke være negative. Hvis du vil angive retningsændring, skal du bruge parameteren <strong>Ændre retning</strong>.</li></ul>",
		distanceAccumulationName: "Afstandsakkumulering",
		distanceAccumulationSnip: "Beregner den akkumulerede afstand fra hver celle til kilderne, hvilket tager højde for ligelinje-afstand, omkostningsafstand, virkelig overfladeafstand samt vandrette og lodrette omkostningsfaktorer.",
		distanceAccumulationDesc: "Funktionen Afstandsakkumulering beregner afstanden til hver position i undersøgelsesområdet i forhold til den nærmeste eller mindst omkostningstunge kilde. Hvis det kun er kilderne, der angives som input, beregnes ligelinje-afstanden til hver position i undersøgelsesområdet. Hvis både kilder og barrierer anvendes som input, beregner funktionen Afstandsakkumulering ligelinje-afstanden omkring barriererne. Baggrundsværdien skal være NoData for både kilderaster og barriereraster, når kilder og barrierer repræsenteres med gyldige celleværdier. Gyldige værdier omfatter nul. <div><br/>Når en overfladeraster angives som input, beregnes den faktiske overfladeafstand mellem cellerne. Hvis der skal udføres omkostningsanalyse ved hjælp af Afstandsakkumulering, er der brug for en omkostningsoverflade. Hvis en omkostningsoverflade angives, er resultatet en akkumuleret omkostningsafstands-raster. Når horisontale og vertikale faktorer angives, inddrages retningsbestemthed som akkumuleret omkostning. Der er fire kildeegenskaber, der kan anvendes. Disse kildeegenskaber, der enten kan være kilder eller egenskaber, der er flyttet væk fra kilden, styres af specifikke parametre: 1. Første akkumulering: angiver den første omkostning før flytningen begynder. 2. Maksimal akkumulering: angiver, hvor mange omkostninger en kilde kan akkumulere, før den når sin grænse. 3. Multiplikator, der skal anvendes til omkostninger: angiver rejsemåden eller størrelsen ved kilden. 4. Rejseretning: angiver, om \"flytteren\" starter ved kilden og bevæger sig mod ikke-kilde-positioner, eller starter ved ikke-kilde-positioner og bevæger sig tilbage til en kilde.<div><br/>Resultatet af Afstandsakkumulering er som standard et enkelt bånd, som er afstandsakkumuleringsrasteren. Men et andet bånd kan også oprettes – tilbageretningsbåndet.  Dette bånd angiver fra hver position i undersøgelsesområdet, hvilken retning der skal tages for at opnå den mindst omkostningstunge kilde.  Begge bånd er nødvendige for at kunne fastlægge de mest optimale ruter i undersøgelsesområdet. For at genere en rute skal du først bruge funktionen Udtræk bånd til at udtrække afstandsakkumuleringsrasteren og tilbageretningsrasteren. Brug disse lag som input til Omkostningsrute-funktionen. I denne funktion skal du bruge afstandsakkumuleringsrasteren som input til Omkostningsafstandsraster og tilbageretningsrasteren som input til Omkostning BackLink-raster.</div>",
		distanceAllocationName: "Afstandsallokering",
		distanceAllocationSnip: "Beregner afstandsallokeringen fra hver celle til de angivne kilder, baseret på ligelinje-afstand, omkostningsafstand, virkelig overfladeafstand samt vandrette og lodrette omkostningsfaktorer.",
		distanceAllocationDesc: "Afstandsallokering beregner, hvilken kilde hver position i undersøgelsesområdet er allokeret til. Hvis det kun er kilder, der angives som input, allokeres positionerne ved brug af ligelinje-afstand til den nærmeste kilde. Hvis både kilder og barrierer anvendes som input, beregner funktionen Afstandsallokering ligelinje-afstanden omkring barriererne for at bestemme, hvilken kilde en position skal allokeres til. Baggrundsværdien skal være NoData for både kilderaster og barriereraster, når kilder og barrierer repræsenteres med gyldige celleværdier. Gyldige værdier omfatter nul.<div><br/>Hvis der skal udføres omkostningsanalyse ved hjælp af Afstandsallokering, er der brug for en omkostningsoverflade. Hvis der angives en omkostningsoverflade, er resultatet en allokeringsraster, der er baseret på de akkumulerede omkostninger, ikke en ligelinje-afstand. Når horisontale og vertikale faktorer angives, inddrages retningsbestemthed som akkumuleret omkostning. Når en overfladeraster angives som input, beregnes den faktisk dækkede overfladeafstand, når overførslen mellem cellerne beregnes, og allokeringen bestemmes. Der er fire kildeegenskaber, der kan anvendes. Disse kildeegenskaber, der enten kan være kilder eller egenskaber, der er flyttet væk fra kilden, styres af specifikke parametre: 1. Første akkumulering: angiver den første omkostning før flytningen begynder. 2. Maksimal akkumulering: angiver, hvor mange omkostninger en kilde kan akkumulere, før den når sin grænse. 3. Multiplikator, der skal anvendes til omkostninger: angiver rejsemåden eller størrelsen ved kilden. 4. Rejseretning: angiver, om \"flytteren\" starter ved kilden og bevæger sig mod ikke-kilde-positioner, eller starter ved ikke-kilde-positioner og bevæger sig tilbage til en kilde.<div><br/>Resultatet af Afstandsallokering er som standard et enkelt bånd, som er afstandsallokeringsrasteren. Valg af den boolske operation Generer kilderække og -kolonne som yderligere bånd i output vil resultere i en multibåndsraster, der består af tre bånd. Det første bånd er afstandsallokeringsbåndet, det andet bånd indeholder et rækkeindeks, og det tredje bånd indeholder et kolonneindeks. Disse indekser identificerer placeringen af ​​kildecellen, der er afstanden med de laveste akkumulerede omkostninger væk. Kilderækkeindekset og kildekolonneindekset kan anvendes sammen med henblik på at udføre intensitetskortlægning. Hvis du forespørger på en vilkårlig position i dit undersøgelsesområde på tværs af bånd to og tre, vil du kende række og kolonne for den mindst omkostningstunge kilde for den pågældende position.</div>",
		eucBackDirectionName: "Euklidisk tilbageretning",
		eucBackDirectionSnip: "Beregner, for hver celle, retningen, i grader, til nabocellen ad den korteste vej tilbage til den nærmeste kilde, idet barrierer undgås.",
		eucBackDirectionDesc: "Funktionen Euklidisk tilbageretning resulterer i en kontinuerlig raster med flydende komma, som repræsenterer retningen i grader tilbage til den nærmeste kilde, idet barrierer undgås, hvis der er angivet barrierer.<div><br/>Input til Euklidisk tilbageretning er den kilde, som retningen beregnes til. Et valgfrit input er en raster, der repræsenterer barrierer inden for undersøgelsesområdet. Baggrundsværdien skal være NoData for både kilderaster og barriereraster, når kilder og barrierer repræsenteres med gyldige værdier. Gyldige værdier omfatter nul. Beregningen vil som standard behandle den kombinerede udstrækning af kilder og barrierer, plus to rækker og kolonner. Hvis analysen kun er påkrævet inden for den angivne afstand fra kilderne, kan parameteren Maksimal afstand anvendes. Euklidisk tilbageretning understøtter både en Planar-metode og en Geodætisk metode i forbindelse med beregningen. Beregningen med Planar-metoden foretages på et projekteret fladt plan ved hjælp af et 2D kartesisk koordinatsystem. Beregningen med Geodætisk metode vil blive foretaget på ellipsoiden, hvilket betyder, at resultatet ikke ændres, uanset input- eller output-projektionen.<div><br/>Resultatet fra funktionen Euklidisk tilbageretning kan anvendes sammen med resultatet fra funktionen Euklidisk afstand til at fastlægge de korteste ruter fra positioner inden for undersøgelsesområdet tilbage fra kilden. Resultatet af både Euklidisk tilbageretning og Euklidisk afstand anvendes i Omkostningsrute-funktionen sammen med destinationerne til at generere de korteste ruter.</div>",
		expandName: "Vis",
		expandSnip: "Udvider de valgte zoner for en raster med zoner med et angivet antal celler.",
		expandDesc: "Med funktionen Udvid globalt kan du generalisere – eller forenkle – rastere ved at gøre bestemte zoner større. Du kan også kontrollere graden af generalisering, der vil forekomme.<div><br/>De zoner, du vælger, vil blive større ved, at de udvides ind i andre zoner. De valgte zoneværdier kan – rent begrebsmæssigt – vises som forgrundszoner, mens andre værdier fortsat vises som baggrundszoner. Forgrundszonerne kan udvides ind i baggrundszonerne.<div><br/>Graden af generalisering kan kontrolleres med parameteren Antal celler. Denne værdi er som standard 1, hvilket betyder, at de valgte zoner vil blive udvidet med en værdi, der svarer til én celles størrelse. Hvis du vil øge graden af generalisering, kan du angive en større værdi for denne parameter. Rent begrebsmæssigt svarer dette til at køre værktøjet så mange gange som det angivne antal, hvilket betyder, at resultaterne fra den forrige kørsel bliver indsat i den efterfølgende kørsel.</div>",
		trendAnalysisName: "Generer tendens",
		trendAnalysisSnip: "Estimerer tendensen for hver pixel langs en dimension for en eller flere variabler i en flerdimensional  raster.",
		trendAnalysisDesc: "<div>Denne funktion kan bruges til at tilpasse data langs med en lineær harmonisk eller polynomisk tendenskurve, eller den kan bruges til at udføre detektering af tendenser ved hjælp af Mann-Kendall eller Seasonal-Kendall-testen.</div><br><div>Output-tendensrasteren, der genereres med denne funktion, bruges som input til funktionen <strong>Forudsig ved brug tendensraster</strong>.</div><br><div>Mann-Kendall- og Seasonal-Kendall-testene bruges som input til at afgøre, om der er en monoton tendens i dataene. Disse er ikke-parametriske, hvilket betyder, at de ikke forudsætter en specifik datafordeling. Mann-Kendall-testen tager ikke højde for seriel korrelation eller sæsonbestemte virkninger. Hvis dataene er sæsonbestemte, er Seasonal-Kendall-testen mere velegnet.</div><br><div>Hvis værktøjet bruges til at udføre enten Mann-Kendall eller Seasonal-Kendall-testen, er outputtet en fem-bånds raster som følger:</div><ul><li>Bånd 1 = Sen's slope (Sen's hældning)</li><li>Bånd 2 = p-værdi</li><li>Bånd 3 = Mann-Kendall-score (S)</li><li>Bånd 4 = S-varians </li><li>Bånd 4 = S-varians </li><li>Bånd 5 = Z-score</li></ul><div>Outputtene fra Mann-Kendall- eller Seasonal-Kendall-testene kan anvendes til at afgøre, hvilke pixels i dine flerdimensionale tidsserier der har en statistisk signifikant tendens. Du kan bruge disse oplysninger sammen med lineære, harmoniske eller polynomiske tendensanalyser til at udtrække signifikante tendenser i din tidsserie. Du kan generere en maske, der indeholder pixels med signifikante p-værdier, anvende masken på den flerdimensionale raster og bruge denne maskerede multidimensionelle raster som input til værktøjet til at udføre lineær, harmonisk. eller polynomisk tendensanalyse.</div><br><div>Der er tre tendenskurveindstillinger til tilpasning af en tendens for de variable værdier langs med en dimension: lineær, polynomisk og harmonisk.</div><br><div>For lineær tendensanalyse er outputtet en trebåndsraster som følger:</div><ul><li>Bånd 1 = Hældning</li><li>Bånd 2 Skæringspunkt</li><li>Bånd 3 = Fejl i kvadratroden af den gennemsnitlige kvadratafvigelse (RMSE) eller fejl omkring best-fit linjen</li></ul><div>For den polynomiske tendensanalyse afhænger antallet af bånd i outputtet af polynomiets grad. Andenordenspolynomiet genererer en firebåndsraster, hvor:</div><ul><li>Bånd 1 = Polynomium_2</li><li>Bånd 2 = Polynomium_1</li><li>Bånd 3 = Polynomium_0</li><li>Bånd 4 = RMSE</li></ul><div>Tredjeordenspolynomiet genererer en fembåndsraster, hvor:</div><ul><li>Bånd 1 = Polynomium_3</li><li>Bånd 2 = Polynomium_2</li><li>Bånd 3 = Polynomium_1</li><li>Bånd 4 = Polynomium_0</li><li>Bånd 5 = RMSE</li></ul><div>For harmonisk tendensanalyse afhænger antallet af bånd i outputtet af den harmoniske frekvens. Når frekvensen er indstillet til 1, er outputtet en fembåndsraster, hvor:</div><ul><li>Båd 1 = Hældning</li><li>Bånd 2 = Skæringspunkt</li><li>Bånd 3 = Harmonic_sin1</li><li>Bånd 4 = Harmonic_cos1</li><li>Bånd 5 = RMSE</li></ul><div>Når frekvensen er indstillet til 2, er outputtet en syvbåndsraster, hvor:</div><ul><li>Bånd 1 = Hældning</li><li>Bånd 2 = Skæringspunkt</li><li>Bånd 3 = Harmonic_sin1</li><li>Bånd 4 = Harmonic_cos1</li><li>Bånd 5 = Harmonic_sin2</li><li>Bånd 6 = Harmonic_cos2</li><li>Bånd 7 = RMSE</li></ul><div>Parameteren <strong>Cykluslængde</strong> for harmoniske tendensanalyse anvendes til at angive antallet af og længden af de cyklusser, som du forventer at se i dine data i løbet af en dag eller et år. Hvis du f.eks. forventer, at dine data vil gennemgå to variationscyklusser på ét år, vil cykluslængden være 182,5 dage eller 0,5 år. Hvis du har temperaturdata, der er indsamlet hver tredje time, og der er én variationscyklus pr. dag, vil cykluslængden være én dag.</div><br><div>Parameteren <strong>Frekvens</strong> for harmonisk tendensanalyse anvendes til at beskrive den harmoniske model, der passer til dataene. Hvis frekvensen indstilles til 1, anvendes en kombination af en lineær og en førsteordens harmonisk kurve til modellen. Hvis frekvensen er 2, anvendes en kombination af en lineær og en førsteordens og andenordens harmonisk kurve til dataene. Hvis frekvensen er til 3, anvendes der yderligere en tredjeordens harmonisk kurve til at modellere dataene osv.</div><br><div>Model goodness-of-fit-statistik kan genereres som valgfri output. Kvadratroden af den gennemsnitlige kvadratafvigelse (RMSE), den R-kvadratiske værdi og p-værdien for tendenshældning kan beregnes og symboliseres. Symbolisér output-tendensrasterlaget ved hjælp af <strong>RGB</strong>-symbologi, og angiv statistikken som røde, grønne og blå bånd.</div><br>",
		spectralUnmixingName: "Linear Spectral Unmixing",
		spectralUnmixingSnip: "Udfører underpixel-klassificering og beregner hyppigheden i brøkdele af forskellige typer arealdække for individuelle pixels.",
		spectralUnmixingDesc: "Funktionen Linear Spectral Unmixing beregner arealdækket i brøkdele for individuelle pixels, der indeholder flere typer arealdække. Funktionen genererer et multiband-lag, hvor hvert bånd svarer til hyppigheden i brøkdele for hver klasse af arealdække. Du kan f.eks. bruge denne funktion til at gennemføre klassificering af arealdække på et multispektralt billede med henblik på at identificere fotosyntetisk vegetation, jordbund uden bevoksning og udgået eller ikke-fotosyntetisk vegetation.<div><br/>Rækkefølgen for output-multiband-rasteren følger rækkefølgen for input-spektralprofilen. Antallet af klasser kan ikke overskride antallet af bånd i input-rasteren. Du kan f.eks. ikke udtrække oplysninger om mere end 8 klasser fra en 8-bånds raster.</div>",
		multidimensionalFilterName: "Flerdimensionelt filter",
		interpolateRasterByDimensionFunctionName: "Interpolér raster efter dimension",
		interpolateRasterByDimensionFunctionSnip: "Interpolerer en multidimensional raster ved angivne dimensionsværdier ved hjælp af tilstødende udsnit.",
		interpolateRasterByDimensionFunctionDesc: "<p>Med denne funktion kan du estimere pixelværdier for et ikke-defineret dimensionsudsnit i en multidimensional raster. Hvis du f.eks. har et datasæt, der indeholder en havtemperatur ved overfladen og 100 meter under overfladen, og du vil estimere temperaturen ved 50 meter under overfladen, kan du bruge denne funktion til at få et estimat ved den pågældende dybde ved hjælp af dimensionsdefinitionen Efter værdier.</p><p>Du kan også downsample et månedligt datasæt til et dagligt datasæt ved hjælp af dimensionsdefinitionen Efter værdier og angive parameterværdien for Trin til 1 og parameterværdien for Enhed til dage.</p><p>Brug dimensionsdefinitionen Efter målraster til at estimere værdien for målrasteren.</p>",
		multidimensionalFilterSnip: "Opretter et rasterlag ud fra et flerdimensionalt rasterdatasæt eller et flerdimensionalt rasterlag ved at opdele data i udsnit langs med definerede variabler og dimensioner.",
		multidimensionalFilterDesc: "Det flerdimensionelle filter opretter et flerdimensionelt rasterlag ved at filtrere og udtrække et undersæt af variabler fra en flerdimensionel raster. Du har f.eks. et flerdimensionalt datasæt, der indeholder månedlige nedbørsdata for 30 år, og du ønsker kun at udtrække data for hver januar måned for at få vist, hvordan nedbørsmængderne har ændret sig for denne måned.<div><br/>Brug parameteren Dimensionsdefinition til at opdele dimensioner ved brug af et interval, en værdi eller en række værdier. Hvis du f.eks. har 10 års data om saltholdighed i havet, der er indsamlet hver måned for hver 2 meters dybde op til 500 meters dybde, kan du anvende de forskellige dimensionsdefinitionsindstillinger til følgende scenarier. Scenarie 1: Udtræk saltholdighedsdata for måneden januar over en periode på 10 år. Vælg Efter værdier, indstil Dimension til StdTime, og indstil Værdier til Januar. Scenarie 2: Opdel saltholdighedsdata over et dybdeområde fra 0 til 150 meter. Vælg Efter områder, indstil Dimension til StdZ, og indstil Minimumværdi til -150 og Maksimumværdi til 0. Scenarie 3: Udtræk saltholdighedsdata for de første 10 dage i hver januar måned over en periode på 10 år. Vælg Efter gentagelse, indstil Dimension til StdTime, indstil Start på første gentagelse og Slut på første gentagelse til den tilsvarende start og slutning på gentagelsesperioden, indstil Trin til 1, og indstil Enhed til År.</div>",
		multidimensionalRasterName: "Flerdimensional raster",
		multidimensionalRasterSnip: "Tilføjer flerdimensionale data til et kort som et flerdimensionalt rasterlag.",
		multidimensionalRasterDesc: "Funktionen Flerdimensional raster føjer flerdimensionale data til et kort som et flerdimensionalt rasterlag. Denne funktion er nyttig, når der udføres rasteranalyse-arbejdsgange ved hjælp af en funktionskæde.<div><br/>Understøttede flerdimensionale rasterdatasæt omfatter netCDF, GRIB, HDF og Esris CRF. Flerdimensionale mosaikdatasæt understøttes også.</div>",
		optimalPathAsRasterName: "Optimal rute som raster",
		optimalPathAsRasterSnip: "Beregner ruten med de laveste omkostninger fra en kilde til en destination.",
		optimalPathAsRasterDesc: "Denne global funktion genererer en outputraster, der registrerer de(n) optimale rute(r) fra udvalgte steder til den nærmeste kildecelle, der er defineret inden for den akkumulerede omkostningsoverflade, hvad angår omkostningsafstand.<div><br/>Det kræves generelt, at der køres en eller flere vægtede omkostningsfunktioner (Afstandsakkumulering eller Afstandsallokering), før funktionen Optimal rute som raster køres for at oprette input-afstandsakkumulerings- og tilbageretningsrastere. Disse er obligatoriske input-rasterlag i forhold til funktionen Optimal rute. Værdierne for den optimale output-rute repræsenterer antallet af ruter på en given position. I mange tilfælde går ruterne i samme retning, når de forlader kilden, hvorefter de ændrer retning for at nå forskellige destinationer. En værdi på 1 indikerer f.eks., at der kun er én optimal rute for en given position, mens en værdi på 5 angiver, at der for den pågældende position er fem optimale ruter, der går igennem den pågældende celle i undersøgelsesområdet.<div><br/>Input-destinationsdataene skal være et rasterlag. Sættet med destinationsceller består af celler i input-rasteren, der har gyldige værdier. Celler, der har NoData-værdier, er ikke medtaget i datasættet. Værdien nul anses for at være en gyldig destination. Der kan oprettes en destinationsraster med udtrækningsværktøjerne. Hvis du har destinations- eller kildeobjekter, kan du konvertere dem til raster med funktionen Konverter objekter til raster. Brug afstandsakkumulering eller tilbageretningsraster som raster-input til rasterfunktionen. Dette vil sikre, at objektet konverteres til raster med den samme cellestørrelse, udstrækning og spatiale reference som de andre rastere, der indgår i funktionen Optimal rute som raster. Funktionen Optimal rute som raster kan også anvendes til at udlede ruten med den mindste modstand for en digital højdemodel (DEM). I dette tilfælde kan du bruge DEM'en som input-afstandsakkumuleringsraster og output fra funktionen Flowretning som tilbageretningsraster.</div>",
		trendName: "Forudsig ved brug tendensraster",
		trendSnip: "Beregner et forventet flerdimensionalt rasterlag ved hjælp af output-tendensrasteren fra funktionen Generer tendens eller geoprocesseringsværktøjet Generer tendensraster.",
		trendDesc: "Funktionen Forudsig ved brug tendensraster beregner et forventet flerdimensionalt rasterlag ved hjælp af output-tendensrasteren fra funktionen Generer tendens eller geoprocesseringsværktøjet Generer tendensraster.",
		rasterCollectionName: "Behandl rastersamling",
		rasterCollectionSnip: "Behandler hvert udsnit i en flerdimensional raster eller hvert element i en mosaikraster. Denne funktion kan også aggregere flere udsnit til et enkelt udsnit.",
		rasterCollectionDesc: "Funktionen Behandl rastersamling behandler hvert udsnit i en flerdimensional raster eller hvert element i en mosaikraster. Denne funktion kan også aggregere flere udsnit til et enkelt udsnit.<div><br/>Denne funktion behandler hvert udsnit i en flerdimensional raster eller mosaikraster ved hjælp af en rasterfunktionsskabelon. Denne funktion understøtter følgende indstillinger: 1. Angiv en rasterfunktionsskabelon for Elementfunktionen. Du har f.eks. et mosaikdatasæt, der indeholder 20 års Landsat-billeder, og du ønsker at beregne NDVI for hver scene i tidsserien. For Elementfunktionen skal du angive en rasterfunktionsskabelon, som indeholder NDVI-rasterfunktionen. 2. Angiv en rasterfunktionsskabelon for Aggregeringsfunktionen. Du har f.eks. en flerdimensional raster, der indeholder 10 års daglige temperaturdata, og du ønsker at beregne den maksimale temperatur for hvert år. For Aggregeringsfunktionen skal du angive en rasterfunktionsskabelon, som indeholder funktionen Cellestatistik, og handlingen skal være indstillet til Maksimum. Under Aggregeringsdefinition skal du indstille Dimension til StdTime, indstille Type til Interval-nøgleord og indstille Nøgleordsinterval til Årlig. Bemærk, at hvis input-mosaikdatasættet ikke er flerdimensionalt, vil aggregeringsfunktionen ikke overholde aggregeringsdefinitionen. Aggregeringsfunktionen vil aggregere alle elementer eller hver gruppe til én/ét, hvis disse er defineret i aggregeringsfunktionsskabelonen. For yderligere oplysninger om brug af grupper i et mosaikdatasæt, se Brug af mosaikdatasæt i Rasterfunktionsskabeloner. 3. Angiv en rasterfunktionsskabelon for Behandlingsfunktionen. Funktionen eller funktionskæden i denne skabelon anvendes til at vise den nye behandlede raster. Angiv f.eks. en rasterfunktionsskabelon, der indeholder funktionen Farvekort, for at ændre måden, hvorpå det behandlede rasterlag vises. Bemærk, at hvis inputtet er en flerdimensional raster, så anvendes behandlingsfunktionen til det aktuelle visningsudsnit. Hvis inputtet er et mosaiklag eller et mosaikdatasæt, så anvendes behandlingsfunktionen til mosaikrasteren ved brug af den første metode til opløsning af overlap. 3. Angiv skabeloner til enhver kombination af de tre funktioner. Du har f.eks. et mosaikdatasæt, der indeholder tidsserier med Landsat-billeder, og du ønsker  at generere et sammensat billede med maksimal NDVI. For Elementfunktionen skal du angive en rasterfunktionsskabelon, som indeholder NDVI-rasterfunktionen. For Aggregeringsfunktionen skal du angive en rasterfunktionsskabelon, som indeholder funktionen Cellestatistik, og handlingen skal være indstillet til Maksimum. For Behandlingsfunktionen skal du angive en rasterfunktionsskabelon, som indeholder funktionen Farvekort. Bemærk, at funktionsbehandlingsrækkefølgen følger inputparametrenes rækkefølge. Elementfunktionen vil f.eks. blive behandlet først.</div>",
		randomName: "Vilkårlig",
		randomSnip: "Opretter en raster med vilkårlige pixelværdier, der trækkes fra en pseudo-vilkårlig distribution. Flere distributioner og generatorer af tilfældige tal understøttes.",
		randomDesc: "Funktionen Vilkårlig opretter en raster med vilkårlige pixelværdier, der kan anvendes i rasterfunktionsskabeloner eller mosaikdatasæt.<div><br/>Mens mange funktioner fungerer sammen med én eller flere input-rastere, kræver funktionen Vilkårlig ikke nogen input-raster. Dette betyder, at den i højere grad agerer som et rasterdatasæt end som en funktion, så der skal udvises særlig forsigtighed, når den tilføjes til eller fjernes fra funktionskæden.</div>",
		shrinkName: "Formindsk",
		shrinkSnip: "Formindsker de valgte zoner med et angivet antal celler ved at erstatte dem med værdien af den celle, der er den oftest forekommende i dens omgivelser.",
		shrinkDesc: "Med funktionen Formindsk globalt kan du generalisere – eller forenkle – rastere ved at gøre bestemte zoner mindre. Du kan også kontrollere graden af generalisering, der vil forekomme.<div><br/>De zoner, du vælger, vil blive formindsket – eller reduceret – i størrelse, ved at celler fra de omgivende zoner udvides ind i dem. De valgte zoneværdier kan – rent begrebsmæssigt – vises som forgrundszoner, mens andre værdier fortsat vises som baggrundszoner. Cellerne i forgrundszonerne kan erstattes af celler i baggrundszonerne. \"Tynde øer\" inde i en zone, som har fælles grænser med zonen, kan også udskiftes.<div><br/>Graden af generalisering kan kontrolleres med parameteren Antal celler. Denne værdi er som standard 1, hvilket betyder, at de valgte zoner vil blive formindsket med den værdi, der svarer til én celles størrelse. Hvis du vil øge graden af generalisering, kan du angive en større værdi for denne parameter. Rent begrebsmæssigt svarer dette til at køre værktøjet så mange gange som det angivne antal, hvilket betyder, at resultaterne fra den forrige kørsel bliver indsat i den efterfølgende kørsel.</div>",
		trendToRGBName: "Tendens til RGB",
		trendToRGBSnip: "Konverterer en tendensraster til en trebåndsraster (rød, grøn og blå).",
		trendToRGBDesc: "Funktionen Tendens til RGB konverterer en tendensraster til en trebåndsraster (rød, grøn og blå). Tendensrasteren genereres fra funktionen Generer tendensraster eller rasterfunktionen CCDC-analyse.<div><br/>Denne funktion er nyttig til visualisering af model-koefficient-data fra funktionen Generer tendens eller funktionen CCDC-analyse. Begge funktioner beregner tendenser i pixelværdier, der ændres, men det er vanskeligt at fortolke resultaterne af funktionerne direkte.<div><br/>På samme måde som med andre rasterfunktioner er du måske nødt til at anvende Dynamisk justering af område (DRA) for at få vist resultaterne af denne funktion.</div>",
		landTrendrName: "LandTrendr-analyse",
		landTrendrSnip: "Evaluerer ændringer i pixelværdier over tid ved hjælp af den Landsat-baserede metode til detektering af tendenser i forstyrrelser og genopretning (LandTrendr) og genererer en ændringsanalyseraster, der indeholder modelresultaterne.",
		landTrendrDesc: "Denne rasterfunktion kan kun anvendes som input til funktionen Detektér ændring ved hjælp af ændringsanalyseraster. For at generere et raster-output skal funktionen LandTrendr-analyse forbindes med funktionen Detektér ændring ved hjælp af ændringsanalyse i en rasterfunktionsskabelon, og brug skabelonen som input i geoprocesseringsværktøjet Generér raster fra rasterfunktion. Resultatet er en raster, som indeholder oplysninger om det tidspunkt, hvor pixelværdierne ændrede sig.<div><br>Formålet med denne rasterfunktion er at udtrække ændringer i et observeret objekt, således at det ideelle flerdimensionale inputbillede bør indfange en ensartet observation over tid og bør ikke indeholde atmosfærisk eller sensorinterferens, skyer eller skygge fra skyer. Den bedste praksis er at anvende data, der er blevet normaliseret og kan maskeres ved hjælp af et Qa-bånd, f.eks. Landsat Collection 1 Surface Reflectance-produkter med en skymaske.<div><br>Funktionen udfører analyse på ét billede pr. år, og antallet af årlige udsnit skal være lig med eller større end den værdi, der er angivet i <strong>minimumsantallet af observations-</strong> parametre. Det anbefales, at du har data for mindst seks år.<div><br>Hvis du har månedlige, ugentlige eller daglige data, anbefales det, at du vælger flere billeder fra hvert år (helst fra samme årstid), fjerner skyer og skygge fra skyer og kombinerer billederne for at generere ét enkelt billede, som indfanger observationen godt. Hvis månedlige, ugentlige eller daglige data angives som den flerdimensionale input-raster, vil funktionen identificere et udsnit til analyse baseret på den dato, der ligger tættest på den, der er angivet i <strong>snappingdato-</strong> parameteren.<div><br>Det vil ofte tage tid for et objekt i et landskab at blive genoprettet fra en ikke-permanent ændring såsom skovbrand eller insektangreb. For at kontrollere den genopretningsgrad, som genkendes af modellen, indstil parameteren Genopretningstærskel. Et forskelligt segment kan ikke have en genopretningsgrad, der er hurtigere end 1/genopretningstærskel.<div><br>Genopretningen fra en ændring i landskab kan ske i positiv eller negativ retning. Hvis et landskab f.eks. oplever skovtab, viser en tidsserie af vegetationsindeksværdier et fald i indeksværdier, og genopretningen viser en gradvis stigning i vegetationsindeksværdier eller en positiv genopretningstendens. Angiv retningen for genopretningstendensen med parameteren <strong>Genopretning har en stigende tendens</strong>.",
		aggregateMultidimensionalName: "Aggregér flerdimensionalt",
		aggregateMultidimensionalSnip: "Kombinerer eksisterende flerdimensionale rastervariabeldata langs en dimension.",
		aggregateMultidimensionalDesc: "Den aggregerede flerdimensionale funktion opretter et flerdimensionalt rasterlag ved at kombinere eksisterende flerdimensionale rastervariabeldata langs en dimension.<div><br>Anvend <strong>Dimensionsdefinitions-</strong>Â  parameteren til først at filtre de inputdata, du vil aggregere. Hvis du f.eks. har månedlige data for 30 år, men du kun ønsker at oprette et aggregeret lag for de første 15 år, kan du anvende <strong>Dimensionsdefinitions-</strong>Â  parameteren til at angive de år, der skal medtages i analysen.<div><br><ul><li>Udtræk saltholdighedsdata for måneden januar over en periode på 10 år. Vælg <strong>efter værdier</strong>, indstil <strong>dimension</strong>til <strong>StdTime</strong>, og indstil <strong>værdier</strong>til <strong>januar</strong>.</li><li>Opdel saltholdighedsdata over et dybdeområde fra 0 til 150 meter. Vælg <strong>efter områder</strong>, indstil <strong>dimension</strong>til <strong>StdZ</strong>, og indstil<strong>minimums- værdi</strong>til <strong>-150</strong>og <strong>maksimums- værdi</strong>til <strong>0</strong>.</li><li>Udtræk saltholdighedsdata for de første 10 dage af hver januar måned i en 10 års periode. Vælg<strong>efter gentagelse</strong>, indstil<strong>dimension</strong>til <strong>StdTime</strong>, indstil <strong>start på første gentagelse</strong>og<strong>slutning på første gentagelse</strong>til den tilsvarende start og slutning på gentagelsesperioden, indstil<strong>trin</strong>til <strong>1</strong>, og indstil <strong>enhed</strong>til <strong>år</strong>.</li></ul><div><br>Anvend parametrene <strong>Aggregering Definition</strong>til at vælge den dimension, der skal vurderes, og aggregeringsintervallet ved hjælp af et nøgleord, en værdi eller et interval af værdier. Hvis man f.eks. har 30 års temperaturdata for havoverfladen, der er indsamlet dagligt og for hver 5 meters dybde ned til 100 meter, kan du anvende de forskellige indstillinger til følgende scenarier:<div><br><ul><li>Aggregér de daglige temperaturdata til månedlige data, hvis resultatet er en flerdimensional raster med 12 tidsudsnit, og hvert udsnit er aggregatet af hver måned på tværs af alle årene. Vælg <strong>intervalnøgleord</strong>og indstil nøgleordet til <strong>gentages månedligt</strong>.</li><li>Aggregér de daglige temperaturdata til månedlige data, hvis resultatet er en flerdimensional raster med 360 udsnit eller 12 tidsudsnit pr. år (30 år x 12 måneder = 360 udsnit). Vælg<strong>intervalnøgleord</strong>Â og indstil nøgleordet til <strong>månedligt</strong>.</li><li>Aggregér månedlige temperaturdata til 4-måneds intervaller. Vælg <strong>intervalværdi</strong>, indstil<strong>værdiinterval</strong>til 4, og indstil <strong>enhed</strong>til <strong>måneder</strong>.</li><li>Aggregér temperaturdata fra 0 til 25 meter, derefter fra 25 til 50 meter, derefter fra 50 til 100 meter. Vælg <strong>intervalområder</strong>og angiv minimums- og maksimumsdybder som <strong>0 25; 25 50; 50 100</strong>.</li></ul>",
		mergeRastersName: "Flet rastere",
		mergeRastersSnip: "Kombinerer flere rasterdatasæt rumligt eller på tværs af variabler og dimensioner.",
		mergeRastersDesc: "Denne funktion opretter en flettet raster fra en liste af rastere. Hvis du eksempelvis har et mosaikdatasæt, som indeholder månedlige nedbørsdata for 30 år, og et andet datasæt med månedlige temperaturdata for 10 år, kan du kombinere dem til en flerdimensional raster med begge variabler. <div><br>Hvis de flerdimensionale input-rastere indeholder forskellige variabler, vil de flerdimensionale output-rastere indeholde alle variablerne. <div><br>Hvis de flerdimensionale input-rastere indeholder forskellige dimensionsværdier, vil den flerdimensionale output-raster indeholde alle dimensionerne og dimensionsværdierne. <div><br>Hvis de flerdimensionale input-rastere indeholder forskellige dimensioner og variabler, men forskellige spatiale udstrækninger, vil den flerdimensionale output-raster indeholde variablerne og dimensionerne på tværs af de flettede spatiale udstrækninger.<div><br>Denne funktion kan også bruges, hvis du har flere rastere, som du ønsker behandlet som ét element, f.eks. beregning af samme statistikker for alle, eller hvis der er farveafbalancering, behøver du ikke at farveafbalancere hvert enkelt billede separat. Dette er nyttigt ved arbejde med billeder, der er gemt som separate tiles på grund af begrænsninger i filstørrelse. På den måde vil de pågældende tiles blive behandlet som en del af det samme billede.",
		boundaryCleanName: "Grænseudjævning",
		boundaryCleanSnip: "Udjævner grænsen mellem zoner.",
		boundaryCleanDesc: "<p>Funktionen generaliserer – eller forenkler – rastere ved at udjævne grænserne mellem zoner. Funktionen giver mulighed for at kontrollere, hvordan cellerne i zonerne i inputtet påvirker udjævningen og den mængde udjævning, der vil blive anvendt. Hver inputcelle vurderes ved hjælp af sine otte nærmeste naboer.</p><p>Udjævningsprocessen sorterer først nabocellerne ud fra en bestemt prioritering. Denne prioritering bestemmer, hvilken zone fra nabocellerne der kan erstatte værdien af den behandlede celle i outputtet.</p><p>Prioriteringen kan være baseret på zonernes værdi eller størrelse. Parameteren <strong>Sorteringstype</strong> bestemmer, hvilken sorteringstype der anvendes. </p><p>Standardindstillingen <strong>Sortér ikke</strong> vurderer prioriteringen ud fra zonernes værdi. Celler fra zoner med større værdier vil have en højere prioritering med henblik på at udvide sig til zoner med mindre værdier.</p><p>Størrelsen – eller det samlede område – af zonerne kan bruges til at sortere prioriteringen. Med indstillingen <strong>Faldende</strong> sorteres zonerne efter størrelse i faldende rækkefølge. Zoner med større samlede områder vil have prioritering med henblik på at udvide sig til zoner med mindre områder. Med indstillingen <strong>Stigende</strong> er det omvendte sandt: zoner med mindre samlede områder vil have prioritering til at udvide sig til zoner med større samlede områder.</p><p>Mængden af udjævning styres af parameteren <strong>Kør udvidelse og formindskelse to gange</strong>, hvilket bestemmer det antal gange udvidelses- og formindskelsesprocessen vil blive udført.</p><p>Hvis indstillingen ikke er markeret, udføres udvidelses- og formindskelsesprocessen én gang. Når indstillingen er markeret, udføres udvidelses- og formindskelsesprocessen to gange, hvilket resulterer i en yderligere udjævning af zonegrænserne.</p><p>Hvis værdierne for alle otte naboceller er de samme som for behandlingscellen, bevarer outputcellen den samme værdi som input-cellen.</p>",
		predictUsingRegressionName: "Forudsig ved brug af regression",
		predictUsingRegressionSnip: "Beregner en prognosebaseret raster baseret på input om rasterdata og en regressionsmodel. Regressionsmodellen er outputtet fra <strong>Train Random Trees Regression Model</strong>, der er et værktøj til geobehandling af raster.",
		predictUsingRegressionDesc: "<p>Regressionsmodellen er defineret i en Esri-regressionsdefinitionsfil (.ecd). Den indeholder alle oplysningerne for et specifikt datasæt eller et sæt af datasæt og regressionsmodellen og genereres af <strong>Train Random Trees Regression Model</strong>, der er et værktøj til geobehandling af raster.</p><p>Inputtet kan være raster med et enkelt bånd, flere bånd eller flere dimensioner eller en liste over disse typer. Typerne af inputraster skal være af samme type som dem, der er trænet af regressionsmodellen.</p><ul><li>Når inputtet er raster med flere bånd, behandles hvert bånd som en prognosebaseret variabel. Båndene skal være i samme rækkefølge som input med flere bånd for værktøjet til træning af regressionsmodeller.</li><li>Når inputtet er raster i flere dimensioner, behandles hver raster som en prognosebaseret variabel, og variablen skal være et enkelt bånd og have en tidsdimension. Variabelrækkefølgen og -navne skal være det samme som inputtet, når regressionsmodellen blev trænet. Outputtet er raster med flere dimensioner.</li><li>Inputtet kan være en liste over elementer. Antallet af elementer og rækkefølgen af elementerne skal matche inputtet, da regressionsmodellen blev trænet.</li></ul>",
		dimensionalMovingStatisticsName: "Statistik for dimensional flytning",
		dimensionalMovingStatisticsSnip: "Beregner statistik for et bevægeligt vindue på flerdimensionale data langs en angivet dimension.",
		dimensionalMovingStatisticsDesc: "<p>Funktionen Statistik for dimensional flytning beregner forskellige statistiske data i et foruddefineret vindue for alle dimensionsværdier langs en dimension. Denne funktion tager et flerdimensionalt rasterlag som input og opretter et flerdimensionalt rasterlag som output, der har den samme dimensionale størrelse som inputlaget.</p><p>Du kan angive en dimension, for hvilken dimensionsværdierne skal tages i betragtning ved beregningen. Som standard beregnes den langs den første ikke-spatiale dimension. Du kan også angive en vinduesstørrelse ved at angive parametrene for det bagudrettede vindue og det fremadrettede vindue.</p><p>Når statistiktypen er indstillet til percentil, bliver parametrene percentilværdi og percentil interpolationstype tilgængelige. Du kan bruge disse parametre til at angive percentilen til henholdsvis at beregne og vælge den interpolationstype, der skal bruges. Når statistiktypen er indstillet til Cirkulær middelværdi, bliver parameteren Cirkulær ombrydningsværdi tilgængelig. Den cirkulære ombrydningsværdi bruges til at konvertere en lineær værdi til området for et givet cirkulært gennemsnit.</p>",
		terrainFlattenFunctionName: "Terræn udjævnes",
		terrainFlattenFunctionSnip: "Korrigerer inputdata fra syntetisk aperturradar (SAR) for radiometriske forvrængninger på grund af topografi.",
		terrainFlattenFunctionDesc: "<p>Rasterfunktionen Terræn udjævnes korrigerer inputdata fra syntetisk aperturradar (SAR) for radiometriske forvrængninger på grund af topografi.</p><p>Inputradardata skal først kalibreres til beta-nought. Brug værktøjet Anvend radiometrisk kalibrering til at kalibrere radardata til beta-nought.</p><p>Hvis input-DEM ikke spænder over hele SAR-datasættet, vil værktøjet generere NoData-værdier for pixels uden for DEM-udstrækningen for gamma-nought, sigma-nought, punktområde, og geometriske forvrængningsoutput. For det geometriske forvrængningsmaske-output vil værktøjet generere ubestemte værdier for pixels uden for DEM-udstrækningen.</p><p>Input DEM skal være i WGS 1984 (EPSG:4326) geografisk koordinatsystem.</p>",
		createColorCompositeFunctionName: "Opret farvesammensætning",
		createColorCompositeFunctionSnip: "Opretter et trebåndsraster ud fra et multibånds-rasterdatasæt, hvor hvert bånd kan bruge en algebraisk beregning baseret på båndalgebra.",
		createColorCompositeFunctionDesc: "<p>Funktionen Opret farvesammensætningsraster opretter en trebåndsraster ud fra et multibånds-rasterdatasæt, hvor hvert bånd kan bruge en algebraisk beregning baseret på båndalgebra.</p><p>Når du definerer en båndaritmetisk algoritme, kan du indtaste en algebraisk formel på en enkelt linje for hvert udtryk for at oprette et flerbåndsoutput. De understøttede operatorer er unitære, plus (+), minus (-), gange (*) og divider (/).</p><p>Når du bruger et bånd-id i et udtryk, skal du identificere båndet ved at sætte B eller b foran båndnummeret.</p><p>En almindelig båndkombination, der bruges til syntetisk aperturradar (SAR) i lineære enheder, er VV for rød, VH for grøn og VV/VH for blå. Hvis inputdata er i decibel, skal båndkombinationen være VV for rød, VH for grøn og VV-VH for blå.</p>",
		surfaceParametersName: "Overfladeparametre",
		surfaceParametersSnip: "Bestemmer parametre for en rasteroverflade såsom aspekt, hældning og adskillige typer krumninger ved brug af geodætiske metoder.",
		surfaceParametersDesc: "<p>Funktionen Overfladeparametre bestemmer parametre for en rasteroverflade såsom aspekt, hældning og adskillige typer krumninger ved brug af geodætiske metoder.</p><p>Denne funktion kan anvendes til følgende applikationer:</p><ul><li>Beregning af aspekt og hældning ved brug af geodætiske metoder.</li><li>Beregning af forskellige typer krumninger ud fra en input-rasteroverflade f.eks. <strong>Tangential krumning (normal kontur)</strong>, der karakteriserer strømmens topografiske konvergens og divergens henover en overflade.</li></ul>",
		leastCostCorridorName: "Mindst omkostningsfulde korridor",
		leastCostCorridorSnip: "Beregner summen af to afstandsrastere med akkumulerede omkostninger med mulighed for at anvende en tærskel baseret på procent eller akkumulerede omkostninger.",
		leastCostCorridorDesc: "<p>Inputrasterne skal være afstandsakkumulerings- og tilbageretningsrastere fra funktionen<strong>Afstandsakkumulering</strong> eller <strong>Afstandsallokering</strong>. Disse skal være baseret på omkostning/afstand, og de samme parameterindstillinger skal bruges, når lagene for hver kilde oprettes. Ingen parametre, der afhænger af retning (horisontal faktor, vertikal faktor og bevægelsesretning), bør bruges til at oprette disse rastere.</p><p>Værdierne i output-korridor-rasteren er summen af de akkumulerede omkostninger for at nå en given placering med de samme enheder som inputrasteren for akkumulerede omkostninger.</p><p>Hvis en angivet <strong>Tærskel</strong>-værdi er større end de maksimale akkumulerede omkostninger, når to afstandsakkumuleringsrastere summeres, vil output-korridor-rasteren dække det samme område som de akkumulerede inputrastere.</p><p>Hvis en angivet tærskelværdi er mindre end minimumsværdien i korridor-rasteren, returneres der en advarselsmeddelelse, og outputrasteren vil være tom.</p><p>Output-korridor-rasteren kan indeholde celler med lidt større akkumulerede omkostninger end tærskelværdien. Dette er fra de tilbageretningsrastere, der bruger celler, som er tildelt lidt højere omkostninger end tærsklen med henblik på at forbinde frakoblede celler til korridoren.</p>",
		geometricMedianName: "Geometrisk median",
		geometricMedianSnip: "Den geometriske median-funktion beregner den geometriske median på tværs af pixels i en tidsserie af multibånd-billeder.",
		geometricMedianDesc: "<p>Denne funktion reducerer støj og afvigelser i tidsseriebilleder ved at beregne en geometrisk medianpixel for hvert pixel-array på tværs af billedstakken. Algoritmen bevarer de spektrale relationer mellem båndene i pixelspektrene, så resultatet kan bruges i analyser såsom vegetationsindekser.</p><p>Skyer og skygger skal maskeres ved hjælp af datasættets QA-bånd, før denne funktion anvendes.</p><p>Hvis inputbilledet er med flydende komma, såsom overfladereflektans, med værdier mellem 0 og 1, bør en epsilon-værdi på 0,001 give kvalitetsresultater.</p>"
	},
	rfxArgs: {
		rasterName: "Raster",
		colorSchemeTypeName: "Farveskematype",
		colormapName: "Farvekort",
		colormapNameName: "Navn på farvekort",
		colorRampName: "Farveskala",
		contrastOffsetName: "Kontrastforskydning",
		brightnessOffsetName: "Lysstyrkeforskydning",
		methodName: "Metode",
		bandNamesName: "Båndnavne",
		bandWavelengthsName: "Båndbølgelængder",
		bandIdsName: "Bånd-ID'er",
		missingBandActionName: "Manglende båndhandling",
		conversionParametersName: "Konverteringsparametre",
		hillshadeTypeName: "Hillshade-type",
		azimuthName: "Azimut",
		altitudeName: "Højde",
		slopeTypeName: "Skalering",
		zFactorName: "Z-faktor",
		PSPowerName: "Pixelstørrelseseffekt",
		PSZFactorName: "Pixelstørrelsesfaktor",
		removeEdgeEffectName: "Deaktivér standard-kantpixel-interpolation",
		fromUnitName: "Fra enhed",
		toUnitName: "Til enhed",
		rasterTypeName: "Type",
		minName: "Output-minimum",
		maxName: "Output-maksimum",
		minPercentName: "Procent clip-minimum",
		maxPercentName: "Procent clip-maksimum",
		numberOfStandardDeviationName: "Antal standardafvigelser",
		sigmoidStrengthLevelName: "Sigmoid-styrkeniveau",
		estimateStatsHistogramName: "Beregn statistik",
		DRAName: "Dynamisk justering af område",
		statisticsName: "Statistik",
		histogramsName: "Histogrammer",
		statisticsHistogramName: "Definer statistik og histogram",
		computeGammaName: "Auto Gamma",
		useGammaName: "Brug Gamma",
		gammaName: "Gamma",
		inputNamesName: "Navne",
		expressionName: "Udtryk",
		cellsizeTypeName: "Cellestørrelsestype",
		extentTypeName: "Udstrækningstype",
		classifierDefinitionFileName: "Input-definitionsfil",
		raster1Name: "Raster1",
		raster2Name: "Raster2",
		raster3Name: "Raster3",
		trueRasterName: "Sand raster",
		falseRasterName: "Falsk raster",
		noDataInterpretationName: "NoData-fortolkning",
		noDataValuesName: "NoData-værdier",
		includedRangesName: "Inkluderede områder",
		curvatureTypeName: "Krumningstype",
		rastersName: "Rastere",
		attributeTableName: "Tabel",
		attributeTableTypeName: "Tabeltype",
		rowsName: "Antal rækker",
		columnsName: "Antal kolonner",
		kernelName: "Kerne",
		mirrorEdgesName: "Spejlkanter",
		influencesName: "Inflydelser",
		fieldsName: "Felter",
		remapsName: "Genberegn tabel",
		evalFromName: "Evalueringsskala fra",
		evalToName: "Evalueringsskala til",
		weightsName: "Vægte",
		DEMName: "DEM",
		shortRangeIDWRadiusName: "IDW-radius for kort område",
		maxVoidWidthName: "Maks. tomrumsbredde",
		sigmaGaussianName: "Adaptiv udjævning",
		contourTypeName: "Konturtype",
		zBaseName: "Z-base",
		numberOfContoursName: "Antal konturer",
		contourIntervalName: "Konturinterval",
		nthContourLineInBoldName: "Nth ContourLine i fed",
		featureClassName: "Input-objekter",
		classIndexFieldName: "Felt",
		resolveOverlapMethodName: "Opløs overlapningsmetode",
		resamplingTypeName: "Resampling-type",
		inputCellsizeName: "Input-cellestørrelse",
		outputCellsizeName: "Output-cellestørrelse",
		pointFeatureClassName: "Seed-punkter",
		maxGrowthRadiusFieldName: "Radiusfelt for maks. vækst",
		similarityThresholdFieldName: "Tærskelfelt for lighed",
		fillValueFieldName: "Udfyldningsværdifelt",
		spectralDetailName: "Spektrale detaljer [1..20]",
		spatialDetailName: "Spatiale detaljer [1..20]",
		minNumPixelsPerSegmentName: "Mindste segmentstørrelse i pixels",
		boundariesOnlyName: "Kun segmentgrænser",
		statisticsTypeName: "Statistiktype",
		fillNoDataOnlyName: "Udfyld kun NoData-pixels",
		inputDataTypeName: "Inputdatatype",
		angleReferenceSystemName: "Vinkelreferencesystem",
		outputDataTypeName: "Outputdatatype",
		inputSamplePointFeatureClassName: "Inputeksempler",
		valueFieldName: "Værdifelt",
		rasterInfoName: "Raster-info",
		interpolationMethodName: "Interpolationsmetode",
		radiusName: "Radius",
		radianceGainValuesName: "Radiansstigning",
		radianceBiasValuesName: "Radiansafvigelse",
		reflectedGainValuesName: "Reflekteret stigning",
		reflectedBiasValuesName: "Reflekteret afvigelse",
		sunElevationName: "Solhøjde (grader)",
		albedoName: "Albedo",
		scaleFactorName: "Skalafaktor",
		offsetName: "Forskydning",
		thresholdTypeName: "Tærskeltype",
		thresholdsName: "Tærskler",
		undefinedClassName: "Ikke-defineret klasse",
		minValueName: "Min.",
		maxValueName: "Maks.",
		operationName: "Handling",
		clippingTypeName: "Klip-type",
		clippingGeometryName: "Klip-geometri/raster",
		extentName: "Output-udstrækning",
		useInputFeatureGeometryName: "Brug input-objekter til klip-geometri",
		remapDefinitionTypeName: "Genberegn definitionstype",
		inputRangeName: "Input-områder",
		outputValuesName: "Output-værdier",
		noDataRangeName: "NoData-områder",
		inputFieldName: "Inputfelt",
		outputFieldName: "Outputfelt",
		inputMaxFieldName: "Input-maks. felt (valgfrit)",
		remapTableTypeName: "Genberegn tabeltype",
		allowUnmatchedName: "Tillad ikke-matchede pixelværdier",
		changeMissingValuesToNoDataName: "Ændre manglende værdier til NoData",
		visibleBandIDName: "Synligt bånd-ID",
		infraredBandIDName: "Infrarødt bånd-ID",
		scientificOutputName: "Videnskabeligt output",
		bandIndexesName: "Båndindekser",
		constantName: "Konstant",
		weightName: "Vægt",
		minimumName: "Minimum",
		maximumName: "Maksimum",
		sourceDataName: "Kilderaster",
		sourceFieldName: "Kildefelt",
		costRasterName: "Omkostningsraster",
		maxDistanceName: "Maksimal afstand",
		valueRasterName: "Værdiraster",
		costMultiplierName: "Multiplikator, der skal anvendes til omkostninger",
		startCostName: "Startomkostning",
		accumCostResistanceRateName: "Akkumuleret omkostnings-resistens-sats",
		capacityName: "Kapacitet",
		travelDirectionName: "Rejseretning",
		cellSizeName: "Cellestørrelse",
		populationFieldName: "Populationsfelt",
		areaUnitsName: "Områdeenheder",
		outputValueTypeName: "Output-celleværdier",
		barriersName: "Inputbarrierer",
		destinationDataName: "Destinationsraster",
		destinationFieldName: "Destinationsfelt",
		pathTypeName: "Stitype",
		observerFeaturesName: "Observationsobjekter",
		analysisMethodName: "Analysemetode",
		analysisTypeName: "Analysetype",
		verticalErrorName: "Vertikal fejl",
		refractivityCoefficientName: "Koefficient for refraktivitet",
		surfaceOffsetName: "Overfladeforskydning",
		observerElevationName: "Observationshøjde",
		observerOffsetName: "Observationsforskydning",
		innerRadiusName: "Indre radius",
		innerRadiusIs3DDistanceName: "Indre radius er 3D-afstand",
		outerRadiusName: "Ydre radius",
		outerRadiusIs3DDistanceName: "Ydre radius er 3D-afstand",
		horizontalStartAngleName: "Horisontal startvinkel",
		horizontalEndAngleName: "Horisontal slutvinkel",
		verticalUpperAngleName: "Vertikal øvre vinkel",
		verticalLowerAngleName: "Vertikal nedre vinkel",
		zoneDataName: "Zoneraster",
		zoneFieldName: "Zonefelt",
		ignoreNoDataName: "Tilsidesæt NoData i beregninger",
		temperatureRasterName: "Temperaturraster",
		inTemperatureUnitsName: "Temperaturenheder",
		outHeatIndexTemperatureUnitsName: "Varmeindeksenheder",
		relativeHumidityRasterName: "Relativ fugtighedsraster",
		outWindChillTemperatureUnitsName: "Vindafkølingsenheder",
		windSpeedRasterName: "Vindhastighedsraster",
		inWindSpeedUnitsName: "Vindhastighedsenheder",
		valueName: "Værdi",
		propertyName: "Navn på egenskab",
		jsonName: "Metadata JSON",
		zoneTableName: "Zoneattributtabel",
		attributeFieldNames: "Attributfeltnavne",
		backgroundName: "Baggrundsværdi",
		whereClauseName: "WHERE-sætning",
		minimumValueFieldName: "Navn på minimumsværdifelt",
		maximumValueFieldName: "Navn på maksimumsværdifelt",
		outValueFieldName: "Navn på output-værdifelt",
		defaultValueName: "Standard-output-værdi",
		conversionMatrixName: "Konverteringsmatrix",
		IsPseudoColorOutputName: "Er et pseudo-farve-output",
		unmappedAsRandomColorName: "Tildel farver tilfældigt til ikke-kortlagte pixels",
		distanceMethodName: "Afstandsmetode",
		flowDirRasterName: "Flowretningsraster",
		pourPointName: "Raster for punkt(er) for vandløbsretning",
		pourPointFieldName: "Felt for punkt(er) for vandløbsretning",
		constantZName: "Konstant Z",
		zOffsetName: "Z-forskydning",
		geoIdName: "Geoide",
		calibrationTypeName: "Kalibreringstype",
		filterTypeName: "Filtertype",
		filterSizeName: "Filterstørrelse",
		noiseModelName: "Støjmodel",
		noiseVarianceName: "Støjvarians",
		additiveNoiseMeanName: "Additiv middelværdi for støj",
		multiplicativeNoiseMeanName: "Multiplikativ middelværdi for støj",
		numberofLooksName: "Antal udseender",
		dampingFactorName: "Dæmpningsfaktor",
		maskRasterName: "Maskeraster",
		nibbleValuesName: "Brug NoData-værdier, hvis de er den nærmeste nabo",
		nibbleNoDataName: "Nibble NoData-celler",
		zLimitName: "Z-grænse",
		flowDirectionTypeName: "Flowretningstype",
		weightRasterName: "Vægtraster",
		forceEdgeName: "Tving alle kantceller til at strømme væk",
		streamRasterName: "Strømraster",
		surfaceRasterName: "Overfladeraster",
		conversionType: "Konverteringstype",
		distanceRaster1: "Afstandsraster 1",
		distanceRaster2: "Afstandsraster 2",
		costDistanceRaster: "Omkostning/afstand-raster",
		costBacklinkRaster: "Omkostning BackLink-raster",
		overridesName: "Tilsidesætter",
		fieldName: "Felt",
		signatureFileOrUrl: "Signatur-fil eller URL",
		redName: "Rød",
		greenName: "Grøn",
		blueName: "Blå",
		infraredName: "Infrarød",
		panchromaticName: "Pankromatisk",
		multispectralName: "Multispektral",
		pansharpeningType: "Pansharpening-type",
		sensorName: "Sensor",
		spatialReferenceName: "Spatial reference",
		xCellsizeName: "X-cellestørrelse",
		yCellsizeName: "Y-cellestørrelse",
		xOriginName: "X-registreringspunkt",
		yOriginName: "Y-registreringspunkt",
		percentileName: "Percentilværdi",
		neighborhoodType: "Nabotype",
		widthName: "Bredde",
		heightName: "Højde",
		startAngleName: "Startvinkel",
		endAngleName: "Slutvinkel",
		neighborhoodValues: "Naboværdier",
		horizontalRaster: "Horisontal raster",
		horizontalFactor: "Horisontal faktor",
		verticalRaster: "Vertikal raster",
		verticalFactor: "Vertikal faktor",
		streamRaster: "Strømraster",
		flowDirRaster: "Flowretningsraster",
		numberNeighborCells: "Antal naboceller",
		zoneConnectivity: "Zoneforbindelse",
		addLinkBehavior: "Tilføj link",
		excludedValue: "Udelukket værdi",
		constantFillCheck: "Generer fyldraster ud fra konstant",
		fillRaster: "Fyldraster",
		constantFillValue: "Konstant værdi",
		inputBitPositions: "Input-bit",
		outputBitPositions: "Output-bit",
		distanceTypeName: "Afstandstype",
		barrierDataName: "Rasterbarrierer",
		pourPointDataName: "Raster for punkt(er) for vandløbsretning",
		accumulationRasterName: "Raster for flow-akkumulering",
		snapDistanceName: "Snap-afstand",
		orderMethodName: "Ordremetode",
		directionMeasurementName: "Måleretning",
		processAsMultiband: "Behandl som flerbånd",
		processMultidimensional: "Behandl som flerdimensional",
		forceFlowDirectionConvention: "Tving flowretningskonvention til backlink-raster",
		initialAccumulation: "Første akkumulering",
		maximumAccumulation: "Maksimal akkumulering",
		sourceLocationBands: "Generer kilderække og -kolonne som yderligere bånd i output",
		backDirectionBand: "Generer tilbageretning som ekstra bånd i output",
		numberOfCells: "Antal celler",
		zoneValues: "Zoneværdier",
		shrinkMethod: "Formindsk metode",
		expandMethod: "Udvid metode",
		inputSpectralProfileType: "Spektral profiltype",
		spectralProfileFileName: "Spektral profil",
		trainingFeatureFileName: "Træningsfunktion",
		nonNegative: "Ikke-negativ",
		sumToOne: "Sum til én",
		randomDistribution: "Distribution",
		meanName: "Middel",
		probabilityName: "Sandsynlighed",
		alphaName: "Alfa",
		betaName: "Beta",
		rName: "r",
		nName: "N",
		seed: "Frø",
		randomNumberGenerator: "Generator af tilfældigt tal",
		cellFactor: "Cellefaktor",
		aggregationType: "Aggregeringsteknik",
		extentHandling: "Udvid udstrækning om nødvendigt",
		trendAnalysisDimensionName: "Dimensionsnavn",
		trendAnalysisType: "Trendtype",
		harmonicFrequency: "Harmonisk frekvens",
		polynomialOrder: "Polynomisk rækkefølge",
		cycleLengthName: "Cykluslængde",
		trendAnalysisRMSE: "RMSE",
		trendAnalysisR2: "R-kvadratisk",
		trendAnalysisSlopePValue: "P-værdi af hældningskoefficient",
		trendAnalysisSeasonalPeriod: "Sæsonbestemt periode",
		cycleUnitName: "Cykusenhed",
		predictDimensionValues: "Værdier",
		dimensionDefinitionType: "Dimensionsdefinition",
		predictDimensionStart: "Start",
		predictDimensionEnd: "Slut",
		predictDimensionInterval: "Værdiinterval",
		dimensionUnit: "Enhed",
		interpolationCellsizeName: "Interpolation-cellestørrelse",
		variableName: "Variabler",
		dimensionlessName: "Dimensionsløs",
		mdimDefinition: "Dimensionsdefinition",
		dimensionName: "Dimension",
		iterationStart: "Start på første gentagelse",
		iterationEnd: "Slut på første gentagelse",
		intervalStart: "Start på interval",
		intervalEnd: "Slut på interval",
		stepName: "Trin",
		rangesName: "Områder",
		minValue: "Minimumværdi",
		maxValue: "Maksimumværdi",
		changeAnalysisRasterName: "Ændre analyseraster",
		changeTypeName: "Ændringstype",
		segmentDate: "Segmentdato",
		changeDirectionName: "Ændre retning",
		maxNumChangesName: "Maksimalt antal ændringer",
		filterByYear: "Filtrér efter år",
		minimumYear: "Minimumsværdi",
		maximumYear: "Maksimumsværdi",
		filterByDuration: "Filtrér efter varighed",
		minimumDuration: "Minimumsvarighed",
		maximumDuration: "Maksimumsvarighed",
		filterByMagnitude: "Filtrér efter størrelse",
		minimumMagnitude: "Minimumsstørrelse",
		maximumMagnitude: "Maksimumsstørrelse",
		filterByStartValue: "Filtrér efter startværdi",
		minimumStartValue: "Minimal startværdi",
		maximumStartValue: "Maksimal startværdi",
		filterByEndValue: "Filtrér efter slutværdi",
		minimumEndValue: "Minimal slutværdi",
		maximumEndValue: "Maksimal slutværdi",
		modelTypeName: "Modeltype",
		fromRasterName: "Fra raster",
		toRasterName: "Til raster",
		computeChangeMethod: "Beregn ændringsmetode",
		fromClassValues: "Fra klasseværdier (eksempel: 2 5)",
		toClassValues: "Til klasseværdier (eksempel: 2 5)",
		keepMethod: "Filtreringsmetode",
		useColorMethod: "Definér overgangsfarver",
		detectChangeBands: "Bånd til registrering af ændring (start ved 0)",
		tmaskBands: "Bånd til temporal maskering (start ved 0)",
		chiSquaredThreshold: "Khi2-tærskel til detektering af ændring",
		minAnomaly: "Minimalt antal på hinanden følgende anomaliobservationer",
		updatingFrequency: "Opdatering af tilpasningsfrekvens (i år)",
		distanceAccumulationRasterName: "Afstandsakkumuleringsraster",
		costBackdirectionRasterName: "Tilbageretnings- eller Flowretningsraster",
		rasterCollectionName: "Rastersamling",
		itemFunctionName: "Elementfunktion",
		aggregationFunctionName: "Aggregeringsfunktion",
		processingFunctionName: "Behandlingsfunktion",
		aggregationDefinitionName: "Aggregeringsdefinition",
		queryGeometryName: "Forespørgselsgeometri",
		factorFunctionZeroFactor: "Nulfaktor",
		factorFunctionCutAngle: "Skæringsvinkel",
		factorFunctionSideFactor: "Sidefaktor",
		factorFunctionSlope: "Stigning",
		factorFunctionLowCutAngle: "Lavt skåret vinkel",
		factorFunctionHighCutAngle: "Højt skåret vinkel",
		factorFunctionCosPower: "Cosinusfunktion",
		factorFunctionSecPower: "Sekantfunktion",
		factorFunctionTablePath: "Tabelsti",
		processingBand: "Behandlingsbånd",
		processingBandName: "Navn på behandlingsbånd",
		snappingDate: "Snappingdato",
		maxNumSegments: "Maksimalt antal segmenter",
		vertexCountOvershoot: "Koordinatpunkttælling overskydning",
		spikeThreshold: "Spike-tærskel",
		recoveryThreshold: "Genopretningstærskel",
		minNumObs: "Minimalt antal observationer",
		pValueThreshold: "P-værditærskel",
		bestModelProportion: "Bedste modelandel",
		preventOneYearRecovery: "Forhindre 1 års genopretning",
		recoveryIncreaseTrend: "Genopretning har en stigende tendens",
		outputOtherBands: "Output andre bånd",
		sortType: "Sorteringstype",
		numberOfRuns: "Kør udvidelse og formindskelse to gange",
		percentileValue: "Percentilværdi",
		percentileInterpolationType: "Percentilinterpolationstype",
		rasterInfoProperty: "Egenskab",
		rasterInfoValue: "Værdi",
		rasterInfoColumns: "Kolonner",
		rasterInfoRows: "Rækker",
		rasterInfoBandCount: "Antal bånd",
		rasterInfoPixelSizeX: "Cellestørrelse X",
		rasterInfoPixelSizeY: "Cellesstørrelse Y",
		rasterInfoPixelType: "Pixel-type",
		rasterExtentTop: "Top",
		rasterExtentBottom: "Bund",
		rasterExtentLeft: "Venstre",
		rasterExtentRight: "Højre",
		rasterStatisticsNotCalculated: "Statistik er ikke blevet beregnet.",
		spatialReferenceProjection: "Projektion",
		spatialReferenceWkid: "WKID",
		spatialReferenceLatestWkid: "Forrige WKID",
		spatialReferenceWkt: "WKT",
		spatialReferenceVcsWkid: "VCSWKID",
		spatialReferenceLatestVcsWkid: "Forrige VCSWKID",
		spatialReferenceAuthority: "Autoritet",
		spatialReferenceLinearUnit: "Lineær enhed",
		spatialReferenceAngularUnit: "Vinkelenhed",
		spatialReferenceFalseEasting: "Falsk easting",
		spatialReferenceFalseNorthing: "Falsk northing",
		spatialReferenceCentralMeridian: "Midtermeridian",
		spatialReferencePrimeMeridian: "Nulmeridian",
		spatialReferenceStandardParallel1: "Standardparallel 1",
		spatialReferenceStandardParallel2: "Standardparallel 2",
		spatialReferenceLatitudeOfOrigin: "Oprindelses breddegrad",
		spatialReferenceAuxiliarySphereType: "Auxiliary Sphere-type",
		spatialReferenceDatum: "Datum",
		spatialReferenceSpheroid: "Sfæroid",
		spatialReferenceSemimajorAxis: "Ækvatorialradius for sfæroide (a-akse)",
		spatialReferenceSemiminorAxis: "Polarradius for sfæroide (b-akse)",
		spatialReferenceInverseFlattening: "Omvendt udjævning",
		inputDefinitionFileName: "Input-definitionsfil",
		deleteName: "Slet",
		addVariableName: "Tilføj variabel",
		maxNumPixelsPerSegment: "Højste segmentstørrelse i pixels",
		forwardWindowName: "Fremad-vindue",
		backwardWindowName: "Bagud-vindue",
		noDataHandlingName: "NoData-håndtering",
		circularWrapValueName: "Circulær ombrydningsværdi",
		fromClassNameFieldName: "Feltnavn for klassenavne i Fra raster",
		toClassNameFieldName: "Feltnavn for klassenavne i Til raster",
		targetRasterName: "Mål-raster",
		circularWrapValue: "Circulær ombrydningsværdi",
		bandIndexesR: "Rødt udtryk",
		bandIndexesG: "Grønt udtryk",
		bandIndexesB: "Blåt udtryk",
		exampleName: "Eksempel",
		inputName: "Input",
		outputName: "Output",
		optionalName: "Valgfrit",
		browseDefinitionFile: "Gennemse definitionsfil",
		selectDefinitionFile: "Vælg input-definitionsfil",
		inputDefinitionURL: "Input-definitionsfils URL",
		enterDefinitionFileURL: "Indtast input-definitionsfils URL",
		browseXMLFile: "Gennemse XML-fil",
		selectStatsFile: "Vælg statistik- og histogramfil",
		enterXMLFileURL: "Indtast XML-fils URL",
		xmlFileURL: "XML-fils URL",
		circularCalculation: "Beregn cirkulær statistik",
		localSurfaceType: "Lokal overfladetype",
		surfaceParameterType: "Parametertype",
		neighborhoodDistance: "Naboafstand",
		useAdaptiveNeighborhood: "Brug adaptivt nabolag",
		outputSlopeType: "Måling af output-hældning",
		projectAzimuths: "Projicer geodætiske azimutter",
		useEquatorialAspect: "Brug ækvatorialaspekt",
		zUnit: "Z-enhed",
		analysisMask: "Analysemaske",
		stdDeviation: "Standardafvigelse",
		"true": "Sandt",
		"false": "Falsk",
		costDistanceRaster1: "Input-raster 1 for akkumuleret omkostningsafstand",
		costDistanceRaster2: "Input-raster 2 for akkumuleret omkostningsafstand",
		threshold: "Tærskel",
		thresholdMethod: "Tærskelmetode",
		directionRaster1: "Input-tilbageretningsraster 1",
		directionRaster2: "Input-tilbageretningsraster 2",
		maxIterations: "Maks. antal gentagelser",
		epsilon: "Epsilon"
	},
	enumLabels: {
		attributeTableTypeManual: "Manuel",
		attributeTableTypeExternal: "Ekstern",
		clrSchemeTypeColormap: "Farvekort",
		clrSchemeTypeColorRamp: "Farveskala",
		colormapTypeElevation: "Højde",
		colormapTypeGray: "Grå",
		colormapTypeNDVI: "NDVI",
		colormapTypeNDVI2: "NDVI2",
		colormapTypeNDVI3: "NDVI3",
		colormapTypeRandom: "Vilkårlig",
		none: "Ingen",
		slopeTypeAdjusted: "Justeret",
		slopeTypeDegree: "Grad",
		slopeTypePercentRise: "Procentstigning",
		slopeTypeScaled: "Skaleret",
		stretchTypeMinMax: "Min.-Maks.",
		stretchTypePercentMinMax: "PercentMinMax",
		stretchTypeSigmoid: "Sigmoid",
		stretchTypeStdDev: "StdAfv",
		hillshadeTypeSimple: "Traditionel",
		hillshadeTypeMultidirectional: "Mange retninger",
		bandComboByNames: "Båndnavne",
		bandComboByWavelength: "Båndbølgelængder",
		bandComboByIDs: "Bånd-ID'er",
		missingBandActionBestMatch: "Bedste match",
		missingBandActionFail: "Mislykket",
		unitTypeCelsius: "Celsius",
		unitTypeCentimeters: "Centimeter",
		unitTypeDecimeters: "Decimeter",
		unitTypeFahrenheit: "Fahrenheit",
		unitTypeFeet: "Fod",
		unitTypeFeetPerSec: "Fod pr. sekund (ft/s)",
		unitTypeInches: "Tommer",
		unitTypeKelvin: "Kelvin",
		unitTypeKilometers: "Kilometer",
		unitTypeKmsPerHour: "Kilometer pr. time (km/t)",
		unitTypeKnots: "Knob (kn)",
		unitTypeMeters: "Meter",
		unitTypeMetersPerSec: "Meter pr. sekund (m/s)",
		unitTypeMiles: "Miles",
		unitTypeMilesPerHour: "Miles pr. time (mph)",
		unitTypeMillimeters: "Millimeter",
		unitTypeNauticalMiles: "Sømil",
		unitTypeYards: "Yards",
		unitTypeDecimalDegrees: "Decimalgrader",
		unitTypePoints: "Punkter",
		unitTypeUnknown: "Ukendt",
		unitTypeSqMapUnits: "Kvadratkortenheder",
		unitTypeSqMiles: "Kvadratmiles",
		unitTypeSqKms: "Kvadratkilometer",
		unitTypeAcres: "Acres",
		unitTypeHectares: "Hektarer",
		unitTypeSqYards: "Kvadratyard",
		unitTypeSqFt: "Kvadratfod",
		unitTypeSqInches: "Kvadrattommer",
		unitTypeSqMts: "Kvadratmeter",
		unitTypeSqCms: "Kvadratcentimeter",
		unitTypeSqMms: "Kvadratmillimeter",
		cellsizeTypeFirst: "Første af",
		cellsizeTypeMin: "Min. af",
		cellsizeTypeMax: "Maks. af",
		cellsizeTypeMean: "Middelværdi af",
		cellsizeTypeLast: "Sidste af",
		extentTypeFirst: "Første af",
		extentTypeIntersection: "Gennemskæring af",
		extentTypeUnion: "Forening af",
		extentTypeLast: "Sidste af",
		noDataInterpretAny: "Match enhver",
		noDataInterpretAll: "Match alle",
		curvatureTypeStandard: "Standard",
		curvatureTypeProfile: "Profil",
		curvatureTypePlanform: "Planform",
		filterTypeLineDetectionHorizontal: "Linjedetektering vandret",
		filterTypeLineDetectionVertical: "Linjedetektering lodret",
		filterTypeLineDetectionLeftDiagonal: "Linjedetektering venstre diagonal",
		filterTypeLineDetectionRightDiagonal: "Linjedetektering højre diagonal",
		filterTypeGradientNorth: "Hældning nord",
		filterTypeGradientWest: "Hældning vest",
		filterTypeGradientEast: "Hældning øst",
		filterTypeGradientSouth: "Hældning syd",
		filterTypeGradientNorthEast: "Hældning nordøst",
		filterTypeGradientNorthWest: "Hældning nordvest",
		filterTypeSmoothArithmeticMean: "Jævn aritmetisk middelværdi",
		filterTypeSmoothing3x3: "Udjævner 3x3",
		filterTypeSmoothing5x5: "Udjævner 5x5",
		filterTypeSharpening3x3: "Skærper 3x3",
		filterTypeSharpening5x5: "Skærper 5x5",
		filterTypeLaplacian3x3: "Laplace-fordeling 3x3",
		filterTypeLaplacian5x5: "Laplace-fordeling 5x5",
		filterTypeSobelHorizontal: "Sobel vandret",
		filterTypeSobelVertical: "Sobel lodret",
		filterTypeSharpen: "Skærpning",
		filterTypeSharpen2: "Skærp mere",
		filterTypePointSpread: "Punktspredning",
		userDefined: "Brugerdefineret",
		ContourTypeLines: "Konturlinjer",
		ContourTypeFill: "Konturfyld",
		ContourTypeSmoothOnly: "Kun jævn overflade",
		rasterizeFirst: "Første",
		rasterizeLast: "Sidste",
		rasterizeSmallest: "Mindst",
		rasterizeLargest: "Størst",
		resamplingTypeNearest: "Nærmeste nabo",
		resamplingTypeBilinear: "Bilineær interpolation",
		resamplingTypeCubic: "Kubik-konvolution",
		resamplingTypeMajority: "Majoritet",
		resamplingTypeBilinearPlus: "Bilineær Interpolation Plus",
		resamplingTypeGauss: "Gaussisk sløring",
		resamplingTypeGaussPlus: "Gaussisk sløring Plus",
		resamplingTypeAverage: "Gennemsnit",
		resamplingTypeMinimum: "Minimum",
		resamplingTypeMaximum: "Maksimum",
		resamplingTypeVectorAvg: "Vektorgennemsnit",
		minimum: "Minimum",
		maximum: "Maksimum",
		mean: "Middel",
		stdDeviation: "Standardafvigelse",
		uvMagDirTypeUV: "U-V",
		uvMagDirTypeMagDir: "Størrelse-Retning",
		unknown: "Ukendt",
		angleRefSysGeographic: "Geografisk",
		angleRefSysArithmetic: "Aritmetisk",
		interpolateIrregularDataNearest: "Nærmeste nabo",
		interpolateIrregularDataBilinear: "Bilineær",
		interpolateIrregularDataTinningLinear: "Lineær tinning",
		interpolateIrregularDataTinningNaturalNeighbor: "Naturlig nabo",
		interpolateIrregularDataTinningIDW: "Vægtet omvendt afstand",
		esriRasterThresholdTypeConstant: "Konstant",
		esriRasterThresholdTypeOtsu: "Otsu",
		esriRasterThresholdTypeTsai: "Tsai",
		esriRasterThresholdTypeKapur: "Kapur",
		esriRasterThresholdTypeKittler: "Kittler",
		esriRasterThresholdTypeRosin: "Rosin",
		argStatsTypeMax: "Arg Max",
		argStatsTypeMin: "Arg Min",
		argStatsTypeMedian: "Arg Median",
		argStatsTypeDuration: "Varighed",
		arithmeticOpPlus: "Plus",
		arithmeticOpMinus: "Minus",
		arithmeticOpMultiply: "Multiplicér",
		arithmeticOpDivide: "Dividér",
		arithmeticOpPower: "Potens",
		arithmeticOpMode: "Tilstand",
		clipTypeOutside: "Klip udenfor",
		clipTypeInside: "Klip indeni",
		yes: "Ja",
		no: "Nej",
		densities: "Tætheder",
		expectedCounts: "Forventede antal",
		planar: "Plan",
		geodesic: "Geodætisk",
		eachCell: "Hver celle",
		eachZone: "Hver zone",
		bestSingle: "Bedste enkelt",
		allSightlines: "Alle sigtelinjer",
		perimeterSightlines: "Perimeter-sigtelinjer",
		frequency: "Frekvens",
		observers: "Observatører",
		majority: "Majoritet",
		median: "Median",
		minority: "Minoritet",
		percentile: "Percentil",
		range: "Område",
		sum: "Sum",
		variety: "Variation",
		ndvi: "NDVI",
		savi: "SAVI",
		bandArithmeticMethodTSAVI: "Transformeret SAVI",
		bandArithmeticMethodMSAVI: "Modificeret SAVI",
		bandArithmeticMethodSultan: "Sultan's Formula",
		gemi: "GEMI",
		pvi: "PVI",
		gvi: "GVI (Landsat TM)",
		vari: "VARI",
		sr: "SR",
		gndvi: "GNDVI",
		ndvire: "NDVIre",
		srre: "SRre",
		mtvi2: "MTVI2",
		rtviCore: "RTVICore",
		cire: "CIre",
		cig: "CIg",
		ndwi: "NDWI",
		evi: "EVI",
		ironOxide: "Jernoxid",
		ferrousMinerals: "Jernholdige mineraler",
		clayMinerals: "Lerholdige mineraler",
		wndwi: "WNDWI",
		bai: "BAI",
		mndwi: "MNDWI",
		nbr: "NBR",
		ndbi: "NDBI",
		ndmi: "NDMI",
		ndsi: "NDSI",
		localSquareRoot: "Kvadratrod",
		localACos: "ARCCOS",
		localASin: "ARCSIN",
		localATan: "ARCTAN",
		localATanH: "ARCTANH",
		localAbs: "ABS",
		localBitwiseNot: "Bitwise Ikke",
		localBooleanNot: "Boolesk Ikke",
		localCos: "Cos",
		localCosH: "CosH",
		localExp: "EKSP",
		localExp10: "EKSP10",
		localExp2: "EKSP2",
		localInt: "Heltal",
		localIsNull: "er nul",
		localFloat: "Flydende",
		localLn: "Ln",
		localLog10: "Log10",
		localLog2: "Log2",
		localNegate: "Negér",
		localRoundDown: "Rund ned",
		localRoundUp: "Rund op",
		localSin: "Sin",
		localSinH: "SinH",
		localTan: "Tan",
		localTanH: "TanH",
		localACosH: "ARCCOSH",
		localASinH: "ARCSINH",
		localPlus: "Plus",
		localMinus: "Minus",
		localTimes: "Tider",
		localPower: "Potens",
		localBitwiseAnd: "Bitwise Og",
		localBitwiseLeftShift: "Bitwise Venstre skift",
		localBitwiseOr: "Bitwise Eller",
		localBitwiseRightShift: "Bitwise Højre skift",
		localBitwiseXor: "Bitwise Xor",
		localBooleanAnd: "Boolesk Og",
		localBooleanOr: "Boolesk Eller",
		localBooleanXor: "Boolesk Xor",
		localDivide: "Dividér",
		localEqualTo: "Lig med",
		localGreaterThan: "Større end",
		localGreaterThanEqual: "Større end eller lig med",
		localLessThan: "Mindre end",
		localLessThanEqual: "Mindre end eller lig med",
		localMod: "Mod",
		localNotEqual: "Ikke lig med",
		localATan2: "ARCTAN2",
		localSquare: "Kvadrat",
		localSetNull: "Angiv nul",
		remapDefTypeList: "Liste",
		remapDefTypeTable: "Tabel",
		remapTableTypeSimple: "Enkel",
		remapTableTypeDynamic: "Dynamisk",
		remapTableTypeReassignment: "Gentildeling",
		geomCorrectionByConstZ: "Brug konstant Z",
		geomCorrectionByDEM: "Brug DEM",
		radarCalibBetaNought: "Beta-nought",
		radarCalibSigmaNought: "Sigma-nought",
		radarCalibGammaNought: "Gamma-nought",
		speckleFilterTypeLee: "Lee-filter",
		speckleFilterTypeEnhancedLee: "Udvidet Lee-filter",
		speckleFilterTypeFrost: "Frost-filter",
		speckleFilterTypeKuan: "Kuan-filter",
		speckleNoiseModelMul: "Multiplikativ støj",
		speckleNoiseModelAdd: "Additiv støj",
		speckleNoiseModelAddnMul: "Additiv og multiplikativ støj",
		mosaicOpTypeFirst: "Første",
		mosaicOpTypeLast: "Sidste",
		mosaicOpTypeMin: "Min.",
		mosaicOpTypeMax: "Maks.",
		mosaicOpTypeMean: "Middel",
		mosaicOpTypeBlend: "Bland",
		mosaicOpTypeSum: "Sum",
		integer: "Heltal",
		rfxD8: "D8",
		rfxMFD: "MFD",
		dinf: "Dinf",
		vertical: "Lodret",
		horizontal: "Vandret",
		localCellStatisticsMajority: "Majoritet",
		localCellStatisticsMax: "Maksimum",
		localCellStatisticsMean: "Middel",
		localCellStatisticsMedian: "Median",
		localCellStatisticsMin: "Minimum",
		localCellStatisticsMinority: "Minoritet",
		localCellStatisticsRange: "Område",
		localCellStatisticsStdDev: "Standardafvigelse",
		localCellStatisticsSum: "Sum",
		localCellStatisticsVariety: "Variation",
		localCellStatisticsMajorityIgnoreND: "Majoritet (ignorer NoData)",
		localCellStatisticsMaxIgnoreND: "Maksimum (ignorer NoData)",
		localCellStatisticsMeanIgnoreND: "Middel (ignorer NoData)",
		localCellStatisticsMedianIgnoreND: "Median (ignorer NoData)",
		localCellStatisticsMinIgnoreND: "Minimum (ignorer NoData)",
		localCellStatisticsMinorityIgnoreND: "Minoritet (ignorer NoData)",
		localCellStatisticsRangeIgnoreND: "Interval (ignorer NoData)",
		localCellStatisticsStdDevIgnoreND: "Standard-afvigelse (ignorer NoData)",
		localCellStatisticsSumIgnoreND: "Sum (ignorer NoData)",
		localCellStatisticsVarietyIgnoreND: "Variation (ignorer NoData)",
		localCellStatisticsTypePercentileIgnoreND: "Percentil (Ignorer NoData)",
		fromSource: "Fra kilde",
		toSource: "Til kilde",
		colorspaceConversionRgbToHsv: "RGB til HSV",
		colorspaceConversionHsvToRgb: "HSV til RGB",
		pansharpenTypeIHS: "IHS",
		pansharpenTypeBrovey: "Brovey",
		pansharpenTypeEsri: "Esri",
		pansharpenTypeMean: "Middel",
		pansharpenTypeGramSchmidt: "Gram-Schmidt",
		rectangleNeighborhood: "Rektangel",
		circleNeighborhood: "Cirkel",
		annulusNeighborhood: "Annulus",
		wedgeNeighborhood: "Kile",
		irregularNeighborhood: "Uregelmæssig",
		weightNeighborhood: "Vægt",
		four: "Fire",
		eight: "Otte",
		within: "Inden for",
		cross: "Kryds",
		addLink: "Tilføj link",
		noLink: "Intet link",
		weightedMean: "Vægtet gennemsnit",
		ls8QCBitPatternCirrus: "Landsat 8 cirrusskyer",
		ls8QCBitPatternCloud: "Landsat 8 skyer",
		ls8QCBitPatternCloudShadow: "Landsat 8 skygge fra skyer",
		ls8QCBitPatternDesignatedFill: "Landsat 8 udfyldning",
		ls8QCBitPatternDroppedFrame: "Landsat 8 undertrykt billede",
		ls8QCBitPatternSnowIce: "Landsat 8 sne/is",
		ls8QCBitPatternTerrainOcclusion: "Landsat 8 terræn-okklusion",
		ls8QCBitPatternVegetation: "Landsat 8 vegetation",
		ls8QCBitPatternWater: "Landsat 8 vand",
		downStream: "Nedstrøms",
		upStream: "Opstrøms",
		strahler: "STRAHLER",
		shreve: "SHREVE",
		currentSlice: "Nuværende udsnit",
		allSlices: "Alle udsnit",
		expandDistance: "DISTANCE",
		expandMorphological: "MORFOLOGISK",
		spectralProfileFile: "Spektral profil",
		trainingFeatureFile: "Træningsfunktion",
		randomDistributionTypeUniform: "Ensartet",
		randomDistributionTypeUniformInteger: "Heltal",
		randomDistributionTypeNormal: "Normal",
		randomDistributionTypeExponential: "Eksponentiel",
		randomDistributionTypePoisson: "Poisson",
		randomDistributionTypeGamma: "Gamma",
		randomDistributionTypeBinomial: "Binomisk",
		randomDistributionTypeGeometric: "Geometrisk",
		randomDistributionTypeNegativeBinomial: "Negativ binomisk",
		randomGeneratorTypeStandardCRand: "Standard C Rand",
		randomGeneratorTypeAlgorithmACM599: "ACM-indsamlet algoritme 599",
		randomGeneratorTypeMersenneTwister: "Mersenne Twister",
		sumName: "Sum",
		medainName: "Median",
		trendLinear: "Lineær",
		trendHarmonic: "Harmonisk",
		trendPolynomial: "Polynomial",
		trendMannKendall: "Mann-Kendall",
		trendSeasonalKendall: "Sæsonbestemt Kendall",
		dimensionByValue: "Efter værdi",
		dimensionByInterval: "Efter interval",
		mdimDefTypeAll: "Alle",
		mdimDefTypeByValues: "Efter værdier",
		mdimDefTypeByRanges: "Efter områder",
		mdimDefTypeByIteration: "Efter gentagelse",
		mdimDefTypeByInterval: "Efter interval",
		mdimDefTypeByTargetRaster: "Efter mål-raster",
		esriTimeUnitsHours: "Timer",
		esriTimeUnitsDays: "Dage",
		esriTimeUnitsWeeks: "Uger",
		esriTimeUnitsMonths: "Måneder",
		esriTimeUnitsYears: "År",
		esriTimeIntervalKeywordHourly: "Hver time",
		esriTimeIntervalKeywordDaily: "Hver dag",
		esriTimeIntervalKeywordWeekly: "Hver uge",
		esriTimeIntervalKeywordDekadly: "Hvert tiende år",
		esriTimeIntervalKeywordPentadly: "Hvert femte år",
		esriTimeIntervalKeywordMonthly: "Hver måned",
		esriTimeIntervalKeywordQuarterly: "Hver kvartal",
		esriTimeIntervalKeywordYearly: "Årligt",
		esriTimeIntervalKeywordRecurringDaily: "Dagligt tilbagevendende",
		esriTimeIntervalKeywordRecurringWeekly: "Ugentligt tilbagevendende",
		esriTimeIntervalKeywordRecurringMonthly: "Månedligt tilbagevendende",
		esriTimeIntervalKeywordRecurringQuarterly: "Kvartalsvist tilbagevendende",
		aggDefTypeAll: "Alle",
		aggDefTypeIntervalKeyword: "Interval-nøgleord",
		aggDefTypeIntervalValue: "Interval-værdi",
		aggDefTypeIntervalRanges: "Interval-område",
		latestChange: "Tid for seneste ændring",
		earliestChange: "Tid for tidligste ændring",
		largestChange: "Tid for største ændring",
		numberOfChanges: "Antal ændringer",
		longestChange: "Tid for længste ændring",
		shortestChange: "Tid for korteste ændring",
		fastestChange: "Tid for hurtigste ændring",
		slowestChange: "Tid for langsomste ændring",
		allChanges: "Alle",
		increaseChanges: "Øg",
		decreaseChanges: "Formindsk",
		segmentBeginning: "Start på segment",
		segmentEnd: "Slutning på segment",
		esriComputeChangeMethodDifference: "Forskel",
		esriComputeChangeMethodRelativeDifference: "Relativ forskel",
		esriComputeChangeMethodCategorical: "Kategorisk forskel",
		esriComputeChangeMethodMultispectralEuclideanDistance: "Spektral euklidisk afstand",
		esriComputeChangeMethodMultispectralAngularDifference: "Spektral vinkelforskel",
		esriComputeChangeMethodMultispectralAxisWithBiggestChange: "Bånd med mest ændring",
		esriComputeChangeKeepAll: "Bevar alle",
		esriComputeChangeKeepChangedOnly: "Bevar kun ændrede pixels",
		esriComputeChangeKeepUnchangedOnly: "Bevar kun uændrede pixels",
		esriComputeChangeUseColorAverage: "Gennemsnit fra og til farver",
		esriComputeChangeUseColorFrom: "Anvend fra farver",
		esriComputeChangeUseColorTo: "Anvend til farver",
		factorFunctionBinary: "Binær",
		factorFunctionForward: "Frem",
		factorFunctionLinear: "Lineær",
		factorFunctionInvLinear: "Omvendt lineær",
		factorFunctionTable: "Tabel",
		factorFunctionSymLinear: "Symetrisk lineær",
		factorFunctionSymInvLinear: "Symmetrisk omvendt lineær",
		factorFunctionCos: "Cosinus",
		factorFunctionSec: "Sekant",
		factorFunctionCosSec: "Cosinus sekant",
		factorFunctionSecCos: "Sekant Cosinus",
		noSort: "Sortér ikke",
		ascend: "Stigende",
		descend: "Faldende",
		autoDetect: "Auto-registrering",
		nearest: "Nærmest",
		linear: "Lineær",
		esriMonthJanuary: "Januar",
		esriMonthFebruary: "Februar",
		esriMonthMarch: "Marts",
		esriMonthApril: "April",
		esriMonthMay: "Maj",
		esriMonthJune: "Juni",
		esriMonthJuly: "Juli",
		esriMonthAugust: "August",
		esriMonthSeptember: "September",
		esriMonthOctober: "Oktober",
		esriMonthNovember: "November",
		esriMonthDecember: "December",
		dimensionalMovingIgnoreNoData: "Data",
		dimensionalMovingPropagateNoData: "NoData",
		dimensionalMovingFillOnlyNoData: "Udfyld NoData",
		circularMean: "Cirkulær middelværdi",
		circularName: "Cirkulær",
		arithmeticName: "Aritmetisk",
		slopeName: "Stigning",
		aspectName: "Aspekt",
		meanCurvature: "Middelkrumning",
		profileCurvature: "Profilkrumning (normal stigningslinje)",
		tangentialCurvature: "Tangential krumning (normal kontur)",
		planCurvature: "Plankrumning (projiceret kontur)",
		contourGeodesicTorsion: "Kontur – geodætisk vridning",
		gaussianCurvature: "Gaussisk krumning",
		casoratiCurvature: "Casoratisk krumning",
		localSurfaceTypeQuadratic: "kvadratisk",
		localSurfaceTypeBiquadratic: "Bikvadratisk",
		thresholdNoThreshold: "Ingen tærskel",
		thresholdPercentLeastCost: "Procent for laveste omkostning",
		thresholdAccumulativeCost: "Akkumuleret omkostning",
		clrmapTypeHillshade: "Skyggevirkning"
	},
	categoryLabels: {
		sourceCharacteristics: "Kildeegenskaber",
		neighborhoodSettings: "Naboindstillinger",
		statistics: "Statistik",
		gamma: "Gamma",
		viewshedParameters: "Parametre for udsigtsområde",
		observerParameters: "Parametre for observation",
		irregularDataInterpolation: "Uregelmæssig datainterpolation",
		modelStatistics: "Modelstatistik",
		aggregationDef: "Aggregeringsdefinition",
		filterByAttributes: "Filtrér efter attributter",
		percentileName: "Percentil",
		rasterInfo: "Rasteoplysninger",
		extent: "Udstrækning",
		spatialReference: "Spatial reference"
	},
	outputRasterHelpTexts: {
		outputName: "<p>Navnet på det, der oprettes og føjes til kortet.</p>",
		resultType: "<p>Den type output, der oprettes. Outputtene kan være tile-billedlag eller dynamiske billedlag.</p>",
		saveResultIn: "<p>Navnet på mappen <b>Mit indhold</b>, hvor resultatet gemmes.</p>"
	},
	analysisEnvironmentsHelpTexts: {
		description: "<p>Miljøindstillinger for analyse i Map Viewer. </p>",
		outSR: "<p>Angiver koordinatsystemet for analyse og resultatlaget.</p>",
		extent: "<p>Angiver det område, der skal anvendes til analyse.</p>",
		snapRaster: "<p>Justerer udstrækningen for outputtet, så det passer til cellejusteringen for det angivne snap-raster-lag.</p>",
		cellSize: "<p>Angiver den cellestørrelse eller opløsning, som skal bruges til analyse og til at oprette outputrasterlaget.</p>",
		mask: "<p>Angiver et maskelag, hvor kun de celler, der falder inden for maskeområdet, vil blive brugt til analyse.</p>",
		resamplingMethod: "<p>Angiver, hvordan pixelværdierne skal interpoleres, når input- og outputraster ikke stemmer overens.</p>"
	},
	mainGenStrings: {
		unsupportedDataType: "Ikke-understøttet type",
		currentlyUnsupported: " En standard editor til ${missingType} kommer snart. Midlertidig pladsholder-tekstboks til angivelse af strengbaseret input",
		unsupportedOverrideWarning: "En tilsidesæt editor-komponent, der giver en bedre UX ved arbejde med følgende parametre, kommer snart:",
		overrideWidgetMissing: "Tilsidesæt editor-komponent mangler!",
		uiIncomplete: "Jobafsendelse mislykkedes. Funktionen kan ikke køre, fordi nogle af de krævede felter er ufuldstændige eller mangler i UI.",
		count: "Tælling",
		selectVariables: "Vælg variabler",
		selectFeature: "Vælg objektlag",
		greaterThanErrorMessage: "Input-tallet skal være større end ${min}",
		lesserThanErrorMessage: "Input-tallet skal være mindre end ${max}",
		greaterThanOrEqualErrorMessage: "Input-tallet skal være større end eller lig med ${min}",
		lesserThanOrEqualErrorMessage: "Input-tallet skal være mindre end eller lig med ${max}",
		allowScalar: "Vælg et lag, eller angiv en konstant",
		selectField: "Vælg felt",
		parameterRequired: "Denne parameter er påkrævet.",
		enterAValue: "Angiv en værdi...",
		invalidInput: "Den angivne værdi er ikke gyldig.",
		itemNotFound: "Elementet eksisterer ikke eller er ikke tilgængeligt.",
		itemPermissionDenied: "Du har ikke adgangsrettigheder til dette element.",
		layerNotAvailable: "Kan ikke indlæse lag ${layerName}.",
		multipleLayersNotAvailable: "Kan ikke indlæse lag ${layerName} og andet.",
		learnMoreLabel: "Få mere at vide",
		fieldNotAvailable: "Kunne ikke indlæse felt.",
		allowAnalysis: "Analyse er ikke tilladt i billedtjenesten.",
		allowAnalysisReason: "Et eller flere lag fra dette kort er ikke angivet her, fordi de ikke tillader analyse.",
		learnMoreText: "Få mere at vide",
		atLeastOneRasterInput: "Mindst ét inputlag skal være et rasterlag.",
		browseAnalysisLayers: "Gennemse lag",
		activeMapViewExtent: "Brug aktuel kortudstrækning",
		chooseRaster: "Vælg klip-raster",
		chooseGeometry: "Vælg klip-geometri",
		resultType: "Resultattype",
		saveInFolder: "Gem i mappe",
		outputName: "Outputnavn",
		outputLayerType: "Outputlagtype",
		dynamicImageryLayer: "Dynamisk billedlag",
		tiledImageryLayer: "Tile-billedlag",
		custom: "Brugerdefineret",
		loading: "Indlæser...",
		layerMissing: "Et eller flere lag fra dette kort er ikke angivet her, fordi de ikke tillader analyse. Lær mere.",
		browseCoordinateSystems: "Gennemse koordinatsystemer",
		unableToRepopulateOutSR: "Kan ikke udfylde output-koordinatsystem.",
		defaultTitle: "Se mere",
		"ARC (equal arc-second)": "ARC (lige buesekund)",
		Africa: "Afrika",
		Antarctica: "Antarktis",
		Argentina: "Argentina",
		Asia: "Asien",
		"Asteroid Belt": "Asteroidebæltet",
		"Atlantic Ocean": "Atlanterhavet",
		Australia: "Australien",
		"Australia and New Zealand": "Australien og New Zealand",
		Austria: "Østrig",
		"BLM (US Feet)": "BLM (amerikanske fod)",
		Bangladesh: "Bangladesh",
		"Beijing 1954": "Beijing 1954",
		Bhutan: "Bhutan",
		CGCS2000: "CGCS2000",
		Canada: "Canada",
		Caribbean: "Caribien",
		"Caribbean Sea": "Det Caribiske Hav",
		"Central America": "Centralamerika",
		"Central and North America": "Central- og Nordamerika",
		Colombia: "Colombia",
		Continental: "Kontinental",
		"County Systems": "Amtsystemer",
		"Democratic Republic of the Congo": "Demokratiske Republik Congo",
		"EPSG Arctic": "EPSG – arktisk",
		Earth: "Jorden",
		"Ellipsoidal-based": "Ellipsoide-baseret",
		Europe: "Europa",
		Finland: "Finland",
		France: "Frankrig",
		"GSK 2011": "GSK 2011",
		"Gauss Kruger": "Gauss Kruger",
		"Geographic Coordinate Systems": "Geografiske koordinatsystemer",
		Germany: "Tyskland",
		"Gravity-related": "Tyngdekraftrelateret",
		"Greenwich-based": "Greenwich-baseret",
		"Highways England": "Motorveje – England",
		Illinois: "Illinois",
		"Indian Ocean": "Det Indiske Ocean",
		"Indian Subcontinent": "Det Indiske Subkontinent",
		Indiana: "Indiana",
		Indonesia: "Indonesien",
		Iowa: "Iowa",
		"Ireland and United Kingdom": "Irland og Storbritannien",
		Italy: "Italien",
		Japan: "Japan",
		Jupiter: "Jupiter",
		Kansas: "Kansas",
		"Las Vegas": "Las Vegas",
		Libya: "Libyen",
		Malaysia: "Malaysia",
		"Malaysia and Singapore": "Malaysia og Singapore",
		Mars: "Mars",
		Mercury: "Merkur",
		Minnesota: "Minnesota",
		Montana: "Montana",
		"NAD 1927": "NAD 1927",
		"NAD 1927 (US Feet)": "NAD 1927 (amerikanske fod)",
		"NAD 1983": "NAD 1983",
		"NAD 1983 (2011)": "NAD 1983 (2011)",
		"NAD 1983 (2011) (Intl Feet)": "NAD 1983 (2011) (internationale fod)",
		"NAD 1983 (2011) (Meters)": "NAD 1983 (2011) (meter)",
		"NAD 1983 (2011) (US Feet)": "NAD 1983 (2011) (amerikanske fod)",
		"NAD 1983 (CORS96) (Intl Feet)": "NAD 1983 (CORS96) (internationale fod)",
		"NAD 1983 (CORS96) (Meters)": "NAD 1983 (CORS96) (meter)",
		"NAD 1983 (CORS96) (US Feet)": "NAD 1983 (CORS96) (amerikanske fod)",
		"NAD 1983 (Intl Feet)": "NAD 1983 (internationale fod)",
		"NAD 1983 (Meters)": "NAD 1983 (meter)",
		"NAD 1983 (PA11) (Meters)": "NAD 1983 (PA11) (meter)",
		"NAD 1983 (PA11) (US Feet)": "NAD 1983 (PA11) (amerikanske fod)",
		"NAD 1983 (US Feet)": "NAD 1983 (amerikanske fod)",
		"NAD 1983 HARN (Intl Feet)": "NAD 1983 HARN (internationale fod)",
		"NAD 1983 HARN (Meters)": "NAD 1983 HARN (meter)",
		"NAD 1983 HARN (US Feet)": "NAD 1983 HARN (amerikanske fod)",
		"NAD 1983 NSRS2007 (Intl Feet)": "NAD 1983 NSRS2007 (internationale fod)",
		"NAD 1983 NSRS2007 (Meters)": "NAD 1983 NSRS2007 (meter)",
		"NAD 1983 NSRS2007 (US Feet)": "NAD 1983 NSRS2007 (internationale fod)",
		"National Grids": "Nationale gitre",
		Navajo: "Navajo",
		Neptune: "Neptun",
		"New Beijing": "Nyt Beijing",
		"New Zealand": "New Zealand",
		"North America": "Nordamerika",
		"Northern Hemisphere": "Nordlig halvkugle",
		Norway: "Norge",
		Oceans: "Oceaner",
		Oregon: "Oregon",
		"Other GCS": "Andet GCS",
		"Pacific Ocean": "Stillehavet",
		Pluto: "Pluto",
		Polar: "Polar",
		Portugal: "Portugal",
		"Projected Coordinate Systems": "Forudberegnede koordinatsystemer",
		"Pulkovo 1942": "Pulkovo 1942",
		"Pulkovo 1995": "Pulkovo 1995",
		Replaced: "Erstattet",
		"SAD 1969": "SAD 1969",
		SIRGAS: "SIRGAS",
		"SIRGAS 2000": "SIRGAS 2000",
		Saturn: "Saturn",
		"Solar System": "Solsystemet",
		"South Africa": "Sydafrika",
		"South America": "Sydamerika",
		"South Korea": "Sydkorea",
		"Southern Hemisphere": "Sydlig halvkugle",
		"Spheroid-based": "Sfæroid-baseret",
		"State Plane": "Delstatsplan",
		"State Systems": "Delstatssystemer",
		Sweden: "Sverige",
		"Switzerland and Liechtenstein": "Schweiz og Liechtenstein",
		Texas: "Texas",
		Tribal: "Stammerelateret",
		Turkey: "Tyrkiet",
		"US Feet": "Amerikanske fod",
		"USA and territories": "USA og territorier",
		UTM: "UTM",
		Ukraine: "Ukraine",
		"Unknown Height Systems": "Ukendte højdesystemer",
		Uranus: "Uranus",
		Venus: "Venus",
		"Vertical Coordinate Systems": "Vertikale koordinatsystemer",
		Vietnam: "Vietnam",
		"WGS 1972": "WGS 1972",
		"WGS 1984": "WGS 1984",
		Wisconsin: "Wisconsin",
		"Wisconsin CRS": "Wisconsin CRS",
		World: "Verden",
		"World (Sphere-based)": "Verden (sfærisk-baseret)",
		Wyoming: "Wyoming",
		"Xian 1980": "Xian 1980",
		done: "Udført",
		noResults: "Der blev ikke fundet nogen resultater",
		searchPlaceholder: "Navn eller WKID",
		browseTemplate: "Gennemse rasterfunktionsskabeloner",
		saveTemplate: "Gem rasterfunktionsskabelon",
		preview: "Forhåndsvisning",
		previewDescription: "Vis resultatet, før analysen køres.",
		showPreview: "Vis forhåndsvisning",
		previewLayer: "Forhåndsvisningslag ${number}",
		newPreview: "Ny forhåndsvisning",
		previewPopup: "Aktivér forhåndsvisning af analyseresultaterne baseret på inputparametrene.",
		updatePreviewLayer: "Opdatér det valgte forhåndsvisningslag",
		createPreviewLayer: "Opret nyt forhåndsvisningslag",
		maximumPreviewAllowed: "Det maksimale tilladte antal forhåndsvisningslag: ${maxCount}",
		previewFailure: "Forhåndsvisningslaget er ikke tilgængeligt. Kontrollér inputparametrene, og opdater forhåndsvisningslaget igen.",
		header: "Vælg element",
		content: "Du har ændringer, der ikke er gemt, i ${rftTitle}. Hvis du starter forfra med en ny skabelon, går disse ændringer tabt.",
		dontSave: "Gem ikke",
		"continue": "Fortsæt",
		stretch: "Tilpas til vindue",
		pan: "Panorér",
		newTemplate: "Opret ny skabelon",
		openTemplate: "Åbn skabelon",
		addFunction: "Tilføj rasterfunktioner",
		addConstant: "Tilføj kontrast",
		addRaster: "Tilføj rastervariabel",
		move: "Flyt",
		zoom: "Zoom",
		saveAs: "Gem som",
		clear: "Ryd",
		addRasterFunctionTitle: "Tilføj rasterfunktioner",
		templatePropertiesTitle: "Egenskaber for skabelon",
		browseRFT: "Gennemse rasterfunktionsskabeloner",
		defaultToolDescription: "${toolTitle}-analyseværktøj.",
		openToolText: "Åbn værktøj",
		toolDropdownText: "Værktøjsrullemenu",
		addToMap: "Bekræft og tilføj kort",
		confirm: "Bekræft",
		select: "Vælg",
		selectTask: "Vælg opgave",
		unsupportedLayer: "Denne parameter undersøtter ikke følgende lag: ${layerName}.",
		viewDetails: "Vis alle oplysninger om elementet",
		rename: "Omdøb",
		duplicate: "Duplikér",
		launch: "Åbn for at køre",
		templateEditor: "Skabeloneditor",
		createItem: "Gem rasterfunktionsskabelon",
		actionLabel: "Filtrér",
		filterPopoverHeading: "Filtrer funktionerne",
		defaultSearchPlaceholder: "Søg efter navn",
		settings: "Indstillinger",
		summary: "Resumé",
		definitionQuery: "Definitionsforespørgsel",
		matchVariables: "Matchvariabler",
		unionDimension: "Foreningsdimension",
		nameEditorPlaceholder: "Indtast titel",
		summaryEditorPlaceholder: "Angiv en kort beskrivelse.",
		definitionQueryPlaceholder: "Indtast...",
		upload: "Overfør",
		chooseImage: "Klik for at vælge en fil",
		update: "Opdatér",
		thumbnailErrors: {
			wrongImageType: "Der er valgt den forkerte billedtype.",
			notAvailable: "Miniaturen er ikke tilgængelig",
			loadError: "Kunne ikke indlæse billedet",
			chooseFile: "Klik for at vælge fil"
		}
	}
};
const copy = "Kopiér";
const save = "Gem";
const title = "Titel";
const folder = "Mappe";
const tags = "\"Tags\"";
const savingMessage = "Gemmer elementet i";
const shareWith = "Del med";
const share = "Del";
const setSharingLevel = "Angiv delingsniveau";
const setGroupSharing = "Angiv deling med grupper";
const owner = "Ejer";
const organization = "Organisation";
const everyone = "Alle (offentlig)";
const groups = "Grupper:";
const type = "Type";
const mosaic = "Mosaik";
const itemGroup = "Elementgruppe";
const item = "Element";
const definitionQuery = "Definitionsforespørgsel";
const groupItemsBy = "Gruppér elementer efter";
const groupFieldName = "Gruppér feltnavn";
const tagFieldName = "Tag feltnavn";
const noTitleTagErrorMsg = "Du skal angive en titel til dit element samt nøgleord, der gør det muligt at finde dit kort ved hjælp af søgninger.";
const noTitleErrorMsg = "Du skal angive en titel på elementet.";
const noTagErrorMsg = "Du skal angive mindst ét nøgleord for at hjælpe folk med at finde dit element via søgninger.";
const error = "Fejl";
const warning = "Advarsel";
const success = "Succes";
const details = "Oplysninger:";
const tryAgain = "Prøv igen";
const toolModeler = {
	save: "Gem",
	editProperties: "Rediger egenskaber",
	saveAs: "Gem som",
	savingNotification: "Gemmer ændringer til elementet...",
	savingTitle: "Gemmer",
	saveFailedMessage: "Kunne ikke gemme ændringer.",
	saveWithErrorsMessage: "Ændringerne blev gemt med følgende fejl.",
	viewItemMessage: "Vis det gemte element",
	here: "her.",
	itemCreatedMessage: "Nyt element er blevet oprettet.",
	clickToViewItemMessage: "Klik på OK for at få vist siden med elementoplysninger; klik på Annullér for at fortsætte.",
	readingFailed: "Kunne ikke indlæse den valgte skabelon til rasterfunktionen.",
	failedToLoadXML: "Kan ikke indlæse den valgte skabelon til rasterfunktionen i XML-format.",
	learnMore: "Få mere at vide",
	overwriteTitle: "Bekræft overskrivning",
	overwriteMessage: "Vil du overskrive et eksisterende element?",
	overwriteSuccessMessage: "Element er blevet opdateret."
};
const toolEditor = {
	run: "Kør",
	save: "Gem",
	deleteSelected: "Slet de markerede elementer",
	addRaster: "Tilføj raster",
	addScalar: "Tilføj skalar",
	layout: "Autolayout",
	errorTitle: "Fejl",
	invalidToolMessage: "Skabelonen til rasterfunktionen er ikke gyldig.",
	out: "Ud",
	zoomIn: "Zoom In",
	zoomOut: "Zoom Out",
	zoomToFit: "Tilpas til vindue",
	panOn: "Skift til panoreringstilstand",
	panOff: "Slå panoreringstilstand fra",
	defaultModelName: "Værktøjet Model",
	defaultRasterName: "Raster"
};
const toolDetailsEditor = {
	defaultToolName: "Rasterfunktionsskabelon",
	defaultToolDescription: "Tilføj et kort resumé om rasterfunktionen.",
	defaultHelpText: "Klik på hjælp-ikonet for at redigere hjælp-teksten",
	editHelpTitle: "Rediger Hjælp",
	saveLabel: "Gem",
	cancelLabel: "Annuller",
	thumbnail: {
		wrongImageType: "Der er valgt den forkerte billedtype.",
		notAvailable: "Miniaturen er ikke tilgængelig",
		loadError: "Kunne ikke indlæse billedet",
		chooseFile: "Klik for at vælge fil"
	}
};
const saveUtils = {
	thumbnail: "Miniaturebillede",
	sharing: "Deler"
};
const close = "Luk";
const unsavedWarningExisting = "Vil du gerne gemme ændringerne til elementet <b>${itemTitle}</b> ?";
const unsavedWarningNew = "Vil du gemme dine ændringer?";
const saveAs = "Gem som";
const dontSave = "Gem ikke";
const unsavedTitle = "Ændringer, der ikke er gemt";
const invalidRFTMessage = "Den oprettede skabelon til rasterfunktion er ikke gyldig.";
const errorTitle = "Fejl";
const breadcrumb = "Rasterfunktionseditor";
const breadcrumbEditor = "Indhold > Rasterfunktionseditor";
const viewerModeTitle = "Skrivebeskyttet";
const viewerModeMessage = "Rasterfunktionsskabelon-element er skrivebeskyttet. Ændringer kan ikke gemmes.";
const userStartDirection = "Vælg en funktion for at begynde at oprette en skabelon til rasterfunktion.";
const selectFunction = "Tilføj funktion";
const deselectFunction = "Fjern funktion";
const dialogTitle = "System";
const category = "Kategorier";
const search = "Søg i rasterfunktioner";
const categoryNames = {
	analysis: "Analyse",
	appearance: "Udseende",
	classification: "Klassifikation",
	conversion: "Konvertering",
	correction: "Korrektion",
	dataManagement: "Datahåndtering",
	distance: "Afstand",
	distanceLegacy: "Afstand (udfaset)",
	hydrology: "Hydrologi",
	math: "Matematik",
	mathConditional: "Matematik: Betinget",
	mathLogical: "Matematik: Logisk",
	mathTrigonometric: "Matematik: Trigonometrisk",
	reclass: "Omklassificering",
	statistical: "Statistisk",
	surface: "Overflade"
};
const commonStrings_da = {
	ok: ok,
	cancel: cancel,
	enterURL: enterURL,
	serviceURL: serviceURL,
	selectRaster: selectRaster,
	failedToLoadLayer: failedToLoadLayer,
	loadingLayer: loadingLayer,
	selectFeature: selectFeature,
	enterFURL: enterFURL,
	addRaster: addRaster,
	addScalar: addScalar,
	raster: raster,
	scalar: scalar,
	defaultModelName: defaultModelName,
	general: general,
	parameters: parameters,
	variables: variables,
	name: name,
	description: description,
	parameter: parameter,
	isPublic: isPublic,
	isDataset: isDataset,
	unknownPixelType: unknownPixelType,
	outputPixelType: outputPixelType,
	u8PixelType: u8PixelType,
	s8PixelType: s8PixelType,
	u16PixelType: u16PixelType,
	s16PixelType: s16PixelType,
	u32PixelType: u32PixelType,
	s32PixelType: s32PixelType,
	f32PixelType: f32PixelType,
	f64PixelType: f64PixelType,
	properties: properties,
	multidimensionalRules: multidimensionalRules,
	matchVariables: matchVariables,
	unionDimensions: unionDimensions,
	rasterFunctionEditor: rasterFunctionEditor,
	rfxLicenseInfo: rfxLicenseInfo,
	rasterFunctions: rasterFunctions,
	copy: copy,
	save: save,
	title: title,
	folder: folder,
	tags: tags,
	savingMessage: savingMessage,
	shareWith: shareWith,
	share: share,
	setSharingLevel: setSharingLevel,
	setGroupSharing: setGroupSharing,
	owner: owner,
	organization: organization,
	everyone: everyone,
	groups: groups,
	type: type,
	mosaic: mosaic,
	itemGroup: itemGroup,
	item: item,
	definitionQuery: definitionQuery,
	groupItemsBy: groupItemsBy,
	groupFieldName: groupFieldName,
	tagFieldName: tagFieldName,
	noTitleTagErrorMsg: noTitleTagErrorMsg,
	noTitleErrorMsg: noTitleErrorMsg,
	noTagErrorMsg: noTagErrorMsg,
	error: error,
	warning: warning,
	success: success,
	details: details,
	tryAgain: tryAgain,
	toolModeler: toolModeler,
	toolEditor: toolEditor,
	toolDetailsEditor: toolDetailsEditor,
	saveUtils: saveUtils,
	close: close,
	unsavedWarningExisting: unsavedWarningExisting,
	unsavedWarningNew: unsavedWarningNew,
	saveAs: saveAs,
	dontSave: dontSave,
	unsavedTitle: unsavedTitle,
	invalidRFTMessage: invalidRFTMessage,
	errorTitle: errorTitle,
	breadcrumb: breadcrumb,
	breadcrumbEditor: breadcrumbEditor,
	viewerModeTitle: viewerModeTitle,
	viewerModeMessage: viewerModeMessage,
	userStartDirection: userStartDirection,
	selectFunction: selectFunction,
	deselectFunction: deselectFunction,
	dialogTitle: dialogTitle,
	category: category,
	search: search,
	categoryNames: categoryNames
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (commonStrings_da);


//# sourceMappingURL=common-strings.da-55c733be.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,