"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_arcgis-raster-function-editor_-b5c014"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/common-strings.id-8b048c90.js":
/*!**************************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/common-strings.id-8b048c90.js ***!
  \**************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   addRaster: () => (/* binding */ addRaster),
/* harmony export */   addScalar: () => (/* binding */ addScalar),
/* harmony export */   breadcrumb: () => (/* binding */ breadcrumb),
/* harmony export */   breadcrumbEditor: () => (/* binding */ breadcrumbEditor),
/* harmony export */   cancel: () => (/* binding */ cancel),
/* harmony export */   category: () => (/* binding */ category),
/* harmony export */   categoryNames: () => (/* binding */ categoryNames),
/* harmony export */   close: () => (/* binding */ close),
/* harmony export */   copy: () => (/* binding */ copy),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   defaultModelName: () => (/* binding */ defaultModelName),
/* harmony export */   definitionQuery: () => (/* binding */ definitionQuery),
/* harmony export */   description: () => (/* binding */ description),
/* harmony export */   deselectFunction: () => (/* binding */ deselectFunction),
/* harmony export */   details: () => (/* binding */ details),
/* harmony export */   dialogTitle: () => (/* binding */ dialogTitle),
/* harmony export */   dontSave: () => (/* binding */ dontSave),
/* harmony export */   enterFURL: () => (/* binding */ enterFURL),
/* harmony export */   enterURL: () => (/* binding */ enterURL),
/* harmony export */   error: () => (/* binding */ error),
/* harmony export */   errorTitle: () => (/* binding */ errorTitle),
/* harmony export */   everyone: () => (/* binding */ everyone),
/* harmony export */   f32PixelType: () => (/* binding */ f32PixelType),
/* harmony export */   f64PixelType: () => (/* binding */ f64PixelType),
/* harmony export */   failedToLoadLayer: () => (/* binding */ failedToLoadLayer),
/* harmony export */   folder: () => (/* binding */ folder),
/* harmony export */   general: () => (/* binding */ general),
/* harmony export */   groupFieldName: () => (/* binding */ groupFieldName),
/* harmony export */   groupItemsBy: () => (/* binding */ groupItemsBy),
/* harmony export */   groups: () => (/* binding */ groups),
/* harmony export */   invalidRFTMessage: () => (/* binding */ invalidRFTMessage),
/* harmony export */   isDataset: () => (/* binding */ isDataset),
/* harmony export */   isPublic: () => (/* binding */ isPublic),
/* harmony export */   item: () => (/* binding */ item),
/* harmony export */   itemGroup: () => (/* binding */ itemGroup),
/* harmony export */   loadingLayer: () => (/* binding */ loadingLayer),
/* harmony export */   matchVariables: () => (/* binding */ matchVariables),
/* harmony export */   mosaic: () => (/* binding */ mosaic),
/* harmony export */   multidimensionalRules: () => (/* binding */ multidimensionalRules),
/* harmony export */   name: () => (/* binding */ name),
/* harmony export */   noTagErrorMsg: () => (/* binding */ noTagErrorMsg),
/* harmony export */   noTitleErrorMsg: () => (/* binding */ noTitleErrorMsg),
/* harmony export */   noTitleTagErrorMsg: () => (/* binding */ noTitleTagErrorMsg),
/* harmony export */   ok: () => (/* binding */ ok),
/* harmony export */   organization: () => (/* binding */ organization),
/* harmony export */   outputPixelType: () => (/* binding */ outputPixelType),
/* harmony export */   owner: () => (/* binding */ owner),
/* harmony export */   parameter: () => (/* binding */ parameter),
/* harmony export */   parameters: () => (/* binding */ parameters),
/* harmony export */   properties: () => (/* binding */ properties),
/* harmony export */   raster: () => (/* binding */ raster),
/* harmony export */   rasterFunctionEditor: () => (/* binding */ rasterFunctionEditor),
/* harmony export */   rasterFunctions: () => (/* binding */ rasterFunctions),
/* harmony export */   rfxLicenseInfo: () => (/* binding */ rfxLicenseInfo),
/* harmony export */   s16PixelType: () => (/* binding */ s16PixelType),
/* harmony export */   s32PixelType: () => (/* binding */ s32PixelType),
/* harmony export */   s8PixelType: () => (/* binding */ s8PixelType),
/* harmony export */   save: () => (/* binding */ save),
/* harmony export */   saveAs: () => (/* binding */ saveAs),
/* harmony export */   saveUtils: () => (/* binding */ saveUtils),
/* harmony export */   savingMessage: () => (/* binding */ savingMessage),
/* harmony export */   scalar: () => (/* binding */ scalar),
/* harmony export */   search: () => (/* binding */ search),
/* harmony export */   selectFeature: () => (/* binding */ selectFeature),
/* harmony export */   selectFunction: () => (/* binding */ selectFunction),
/* harmony export */   selectRaster: () => (/* binding */ selectRaster),
/* harmony export */   serviceURL: () => (/* binding */ serviceURL),
/* harmony export */   setGroupSharing: () => (/* binding */ setGroupSharing),
/* harmony export */   setSharingLevel: () => (/* binding */ setSharingLevel),
/* harmony export */   share: () => (/* binding */ share),
/* harmony export */   shareWith: () => (/* binding */ shareWith),
/* harmony export */   success: () => (/* binding */ success),
/* harmony export */   tagFieldName: () => (/* binding */ tagFieldName),
/* harmony export */   tags: () => (/* binding */ tags),
/* harmony export */   title: () => (/* binding */ title),
/* harmony export */   toolDetailsEditor: () => (/* binding */ toolDetailsEditor),
/* harmony export */   toolEditor: () => (/* binding */ toolEditor),
/* harmony export */   toolModeler: () => (/* binding */ toolModeler),
/* harmony export */   tryAgain: () => (/* binding */ tryAgain),
/* harmony export */   type: () => (/* binding */ type),
/* harmony export */   u16PixelType: () => (/* binding */ u16PixelType),
/* harmony export */   u32PixelType: () => (/* binding */ u32PixelType),
/* harmony export */   u8PixelType: () => (/* binding */ u8PixelType),
/* harmony export */   unionDimensions: () => (/* binding */ unionDimensions),
/* harmony export */   unknownPixelType: () => (/* binding */ unknownPixelType),
/* harmony export */   unsavedTitle: () => (/* binding */ unsavedTitle),
/* harmony export */   unsavedWarningExisting: () => (/* binding */ unsavedWarningExisting),
/* harmony export */   unsavedWarningNew: () => (/* binding */ unsavedWarningNew),
/* harmony export */   userStartDirection: () => (/* binding */ userStartDirection),
/* harmony export */   variables: () => (/* binding */ variables),
/* harmony export */   viewerModeMessage: () => (/* binding */ viewerModeMessage),
/* harmony export */   viewerModeTitle: () => (/* binding */ viewerModeTitle),
/* harmony export */   warning: () => (/* binding */ warning)
/* harmony export */ });
const ok = "YA";
const cancel = "Batalkan";
const enterURL = "Masukkan URL Layanan Gambar";
const serviceURL = "Layanan URL";
const selectRaster = "Pilih Raster";
const failedToLoadLayer = "Gagal memuat Layer";
const loadingLayer = "Memuat layer";
const selectFeature = "Pilih Feature Layer";
const enterFURL = "Masukkan URL Feature Service";
const addRaster = "Tambahkan Variabel Raster";
const addScalar = "Tambahkan Konstan";
const raster = "Raster";
const scalar = "Skalar";
const defaultModelName = "Template Fungsi Raster";
const general = "Umum";
const parameters = "Parameter";
const variables = "Variabel";
const name = "Nama";
const description = "Deskripsi";
const parameter = "Parameter";
const isPublic = "IsPublic";
const isDataset = "IsDataset";
const unknownPixelType = "Tidak Diketahui";
const outputPixelType = "Jenis Piksel Output";
const u8PixelType = "8 Bit Dibatalkan Tanda Tangannya";
const s8PixelType = "8 Bit Ditanda Tangani";
const u16PixelType = "16 Bit Dibatalkan Tanda Tangannya";
const s16PixelType = "16 Bit Ditanda Tangani";
const u32PixelType = "32 Bit Dibatalkan Tanda Tangannya";
const s32PixelType = "32 Bit Ditanda Tangani";
const f32PixelType = "32 Bit Mengambang";
const f64PixelType = "64 Bit Ganda";
const properties = "Properti";
const multidimensionalRules = "Aturan Multidimensi";
const matchVariables = "Variabel Kecocokan";
const unionDimensions = "Dimensi Perhimpunan";
const rasterFunctionEditor = {
	invalidRFTMessage: "Template Fungsi Raster tidak valid.",
	rfxArgsEditor: {
		outputRaster: "OutputRaster",
		raster: "Raster",
		unsupportedDataTypeWarning: "Argumen berikut tidak ditampilkan karena saat ini tidak didukung.",
		unsupportedFunction: "Berisi fungsi raster yang saat ini tidak didukung."
	},
	rfxRasterInput: {
		selectLayer: "Pilih Layer",
		browseLayers: "Telusuri Layer",
		rfxVariable: "RasterFunctionVariable"
	},
	rfxBandCombinationEditor: {
		methodLabel: "Metode",
		bandLabel: "Band",
		combinationLabel: "Kombinasi"
	},
	rfxRemapGrid: {
		minimum: "Minimum",
		maximum: "Maksimum",
		output: "Output",
		noData: "NoData",
		remapValuesLabel: "Petakan Ulang Nilai"
	},
	rfxNamedRasterEditor: {
		rasterVariables: "Variabel Raster",
		deleteSelectedVars: "Hapus variabel terpilih"
	},
	rfxClippingGeometry: {
		clippingLayer: "Lapisan Kliping",
		clippingRaster: "Raster Pemotongan",
		clippingGeometry: "Geometri Pemotongan",
		customExtent: "Jangkauan Kustom",
		outputExtent: "Tingkat Output",
		currentExtent: "Jangkauan Peta Saat Ini",
		drawLabel: "Gambar"
	},
	rfxCustomExtent: {
		top: "Atas",
		right: "Kanan",
		bottom: "Bawah",
		left: "Kiri"
	},
	rfxRasterArrayEditor: {
		moveUp: "Pindahkan ke atas",
		moveDown: "Pindahkan ke bawah",
		remove: "Hapus"
	},
	rfxStatisticsGrid: {
		stdDev: "Simpangan Baku",
		min: "Min",
		max: "Maks",
		mean: "Rata-rata"
	},
	rfxWeightedSumTableEditor: {
		weightedSumTable: "Tabel Jumlah Berbobot",
		id: "ID",
		layer: "Layer",
		field: "Kolom",
		weight: "Berat",
		value: "Nilai",
		selectLayer: "Pilih Layer"
	},
	rfxWeightedOverlayTableEditor: {
		weightedOverlayTable: "Tabel Overlay dengan Pembobotan",
		id: "ID",
		layer: "Layer",
		field: "Kolom",
		influence: "Pengaruh",
		sumOfInfluence: "Jumlah Pengaruh",
		value: "Nilai",
		remapTable: "Petakan Ulang Tabel",
		scale: "Skala",
		scales: "Skala",
		selectRaster: "Pilih Raster"
	},
	rfxFeatureSelect: {
		addFeatureLayer: "Telusuri untuk mencari feature layer",
		addPointLayer: "Telusuri untuk mencari layer titik"
	},
	rfxFieldSelect: {
		value: "Nilai",
		count: "Jumlah"
	},
	rfxAttributeTable: {
		tableType: "Jenis Tabel",
		manual: "Manual",
		external: "Eksternal",
		minVal: "Nilai Minimum",
		maxVal: "Nilai Maksimum",
		baseClassName: "Nama Dasar Kelas",
		colorScheme: "Skema Warna",
		defaultClassName: "Label_",
		generateTable: "Buat Tabel",
		browseTable: "Jelajahi Tabel",
		value: "Nilai",
		classname: "ClassName",
		color: "Warna"
	},
	rfxFieldNumberSwitchable: {
		number: "Numerik",
		field: "Kolom",
		string: "String",
		linearUnit: "Unit Linear"
	},
	rfxPropertySet: {
		name: "Nama",
		value: "Nilai"
	},
	rfxConversionGrid: {
		size: "Ukuran"
	},
	rfxTransposeBit: {
		bitPattern: "Pola Bit",
		outputBit: "Bit Output",
		inputBit: "Bit Input"
	},
	rfxSpatialReference: {
		placeHolder: "Perbaiki menurut Kata Kunci",
		coordinateSystem: "Sistem Koordinat",
		gcs: "Sistem Koordinat Geografik",
		pcs: "Sistem Koordinat Terproyeksi",
		vcs: "Sistem Koordinat Vertikal"
	}
};
const rfxLicenseInfo = "Template fungsi raster ini dapat digunakan untuk memproses citra Anda menggunakan ArcGIS Image Server.";
const rasterFunctions = {
	rfx: {
		aCosHName: "ACosH",
		aCosHSnip: "Menghitung kosinus hiperbolik inversi sel dalam sebuah raster.",
		aCosHDesc: "Fungsi tersebut menghitung kosinus hiperbolik inversi piksel dalam sebuah raster.",
		aCosName: "ACos",
		aCosSnip: "Menghitung kosinus inversi piksel dalam sebuah raster.",
		aCosDesc: "Fungsi raster ini menghitung kosinus inversi sel dalam raster. Dalam matematika, semua fungsi trigonometri memiliki rentang nilai input valid yang ditentukan, disebut sebagai domain. Nilai output dari setiap fungsi juga memiliki rentang nilai yang ditentukan. Untuk alat ini, domain adalah [-1, 1], dan rentang adalah [0, pi].",
		aSinHName: "ASinH",
		aSinHSnip: "Menghitung sinus hiperbolik inversi sel dalam sebuah raster.",
		aSinHDesc: "Fungsi tersebut menghitung sinus hiperbolik inversi piksel dalam sebuah raster.",
		aSinName: "ASin",
		aSinSnip: "Menghitung sinus inversi sel dalam sebuah raster.",
		aSinDesc: "Fungsi tersebut menghitung sinus inversi piksel dalam sebuah raster.",
		aTan2Name: "ATan2",
		aTan2Snip: "Menghitung tangen inversi (berbasis x,y) sel dalam sebuah raster.",
		aTan2Desc: "Fungsi tersebut menghitung tangen inversi (berbasis x,y) piksel dalam sebuah raster.",
		aTanHName: "ATanH",
		aTanHSnip: "Menghitung tangen hiperbolik inversi sel dalam sebuah raster.",
		aTanHDesc: "Fungsi tersebut menghitung tangen hiperbolik inversi piksel dalam sebuah raster.",
		aTanName: "ATan",
		aTanSnip: "Menghitung tangen inversi sel dalam sebuah raster.",
		aTanDesc: "Fungsi tersebut menghitung tangen inversi piksel dalam sebuah raster.",
		absName: "Abs",
		absSnip: "Menghitung nilai absolut sel dalam sebuah raster.",
		absDesc: "Fungsi Abs menghitung nilai absolut piksel dalam sebuah raster.",
		reflectanceName: "Pantulan yang Jelas",
		reflectanceSnip: "Mengonversi citra mentah ke nilai Atas Atmosfer dengan memperhitungkan karakteristik sensor, posisi matahari, dan waktu akuisisi.",
		reflectanceDesc: "Fungsi ini menyesuaikan nilai angka digital (DN) kecerahan gambar untuk beberapa sensor satelit. Penyesuaian didasarkan pada elevasi matahari, tanggal akuisisi, dan properti sensor untuk mengatur perolehan dan bias untuk setiap band. Fungsi ini digunakan untuk menyesuaikan pantulan, atau kecerahan, nilai beberapa citra satelit berdasarkan pencahayaan adegan dan pengaturan yang perolehan sensor. Gambar disesuaikan terhadap kondisi pencahayaan umum secara teoritis, jadi seharusnya ada lebih sedikit variasi antar adegan dari tanggal yang berbeda dan sensor yang berbeda. Ini bisa bermanfaat untuk klasifikasi gambar, penyeimbangan warna, dan pembuatan mosaik. Fungsi ini hanya dapat digunakan dengan citra spesifik. Sensor yang dapat digunakan adalah Landsat MSS, Landsat TM, Landsat ETM+, Landsat 8, IKONOS, QuickBird, GeoEye-1, RapidEye, DMCii, WorldView-1, WorldView-2, SPOT 6, dan Pleiades.<div><br/>Fungsi tersebut melakukan dua perbaikan. Fungsi pertama adalah berdasarkan pengaturan perolehan. Nilai kecerahan asli dibuat ulang dari nilai gambar dengan cara membalik persamaan perolehan. Perbaikan kedua memiliki kaitan dengan perbedaan dalam sudut dan kecerahan matahari. Nilai kecerahan asli disesuaikan ke kondisi pencahayaan umum dengan menormalkan adegan yang ditangkap pada kondisi pencahayaan variabel. Secara umum, saat jenis data gambar output adalah sama dengan jenis data gambar input, nilai output lebih rendah daripada nilai input dan dipotong ke rentang data valid.</div>",
		argStatisticsName: "ArgStatistics",
		argStatisticsSnip: "Menghitung statistik arg, termasuk Arg Max, Arg Min, Arg Median, dan Duration.",
		argStatisticsDesc: "Fungsi menghitung statistik arg. Ada empat metode dalam fungsi ArgStatistics: ArgMax, ArgMin, ArgMedian, dan Duration.",
		arithmeticName: "Aritmatika",
		arithmeticSnip: "Melakukan operasi aritmetika antara dua raster atau sebuah raster dan skalar.",
		arithmeticDesc: "Fungsi Aritmatika adalah melakukan operasi aritmetika antara dua raster atau sebuah raster dan skalar, dan sebaliknya.",
		aspectSlopeName: "Aspek-Kelerengan",
		aspectSlopeSnip: "Membuat raster yang secara bersamaan menampilkan aspek (arah) dan kelerengan (kemiringan) permukaan berkelanjutan, sebagaimana disajikan dalam model elevasi digital.",
		aspectSlopeDesc: "Fungsi Aspek Kelerengan membuat sebuah layer raster yang secara bersamaan menampilkan aspek dan kelerengan sebuah permukaan. Aspek mengidentifikasi arah kelerengan menurun tingkat perubahan maksimum dalam nilai dari setiap piksel ke area sekitarnya. Aspek dapat dianggap sebagai arah kelerengan. Nilai raster output akan menjadi arah kompas aspek, diwakili oleh hue (warna). Kelerengan mewakili tingkat perubahan elevasi untuk setiap piksel model elevasi digital (DEM). Kelerengan mewakili kemiringan permukaan dan disimbolkan ke dalam tiga kelas yang ditampilkan menggunakan saturasi warna (kecerahan).<div><br/>Nilai piksel dalam raster aspek kelerengan output mencerminkan gabungan aspek dan kelerengan. Piksel dengan nilai di bawah 20 dianggap datar dan ditampilkan dalam warna abu-abu. Nilai aspek kelerengan 21 dan di atasnya akan ditampilkan dengan berbagai saturasi sebagai berikut: 21 hingga 30 —Saturasi kelerengan rendah, 31 hingga 40—Saturasi kelerengan menengah, 41 dan di atasnya—Saturasi kelerengan tinggi</div>",
		aspectName: "Aspek",
		aspectSnip: "Menampilkan ke arah mana sebuah piksel menghadap, yang mana 0 adalah utara dan sudut naik searah jarum jam hingga 360.",
		aspectDesc: "Fungsi Aspek mengidentifikasi arah kelerengan menurun tingkat perubahan nilai maksimum dari setiap sel ke area sekitarnya. Aspek dapat dianggap sebagai arah kelerengan. Nilai raster output akan menjadi arah kompas aspek.<div><br/>Input untuk fungsi ini adalah Raster Input. Fungsi Aspek seringkali diterapkan pada model elevasi digital (DEM). Secara default, aspek muncul sebagai gambar skala abu-abu. Anda dapat menambahkan fungsi Peta Warna untuk menentukan skema warna khusus atau memungkinkan orang melihat mosaik untuk mengubah simbologi dengan skema warnanya sendiri.</div>",
		tableName: "Tabel Atribut",
		tableSnip: "Menggunakan tabel untuk memberi nama dan menyimbolkan nilai-nilai dalam set data. Kolom untuk tabel dibatasi koma: PixelValue, AttributeName, RedValue, GreenValue, BlueValue.",
		tableDesc: "Fungsi Tabel Atribut memungkinkan Anda untuk menentukan tabel atribut guna menyimbolisasikan sebuah set data mosaik band tunggal atau set data raster. <div><br/>Ini bermanfaat jika Anda ingin menyajikan citra yang telah mengalami klasifikasi terhadap penggunaan lahan, seperti lahan hutan, lahan basah, lahan panen, dan daerah urban. Selain itu, jika tabel Anda berisi kolom yang diberi nama merah, hijau, dan biru, nilai-nilai dalam kolom itu akan digunakan seperti peta warna saat merender gambar.</div>",
		bandArithmeticName: "Aritmatika Band",
		bandArithmeticSnip: "Menghitung indeks menggunakan rumus yang telah ditentukan sebelumnya atau ekspresi yang ditentukan pengguna.",
		bandArithmeticDesc: "Fungsi Aritmatika Band melakukan operasi aritmetika pada band set data raster. Anda dapat memilih algoritme yang ditentukan sebelumnya, atau Anda dapat memasukkan formula baris tunggal milik Anda sendiri. Operator yang didukung adalah -, +, /, *, dan unary -.",
		thresholdName: "Ambang Batas Biner",
		thresholdSnip: "Mengelola data berkelanjutan ke dalam latar depan dan latar belakang dengan meminimalkan kovarian antara dua kelas.",
		thresholdDesc: "Saat set data raster memiliki distribusi bimodal, fungsi ini menciptakan raster baru yang membagi data ke dalam dua kelas berbeda. Fungsi ini menciptakan kelas nilai rendah yang ditampilkan dengan piksel hitam, dan kelas nilai tinggi yang ditampilkan dengan piksel putih.",
		bitwiseAndName: "Bitwise And",
		bitwiseAndSnip: "Melakukan operasi Bitwise And pada nilai biner dua raster input.",
		bitwiseAndDesc: "Bitwise And melakukan operasi Bitwise And dalam nilai biner dua raster input",
		bitwiseLeftShiftName: "Bitwise Left Shift",
		bitwiseLeftShiftSnip: "Melakukan operasi Bitwise Left Shift pada nilai biner dua raster input.",
		bitwiseLeftShiftDesc: "Bitwise Left Shift melakukan operasi Bitwise Left Shift pada nilai biner dua raster input",
		bitwiseNotName: "Bitwise Not",
		bitwiseNotSnip: "Melakukan operasi Bitwise Not (pelengkap) pada nilai biner dua raster input.",
		bitwiseNotDesc: "Fungsi melakukan operasi Bitwise Not (pelengkap) pada nilai biner raster input.",
		bitwiseOrName: "Bitwise Or",
		bitwiseOrSnip: "Melakukan operasi Bitwise Or pada nilai biner dua raster input.",
		bitwiseOrDesc: "Fungsi melakukan operasi Bitwise Or pada nilai biner dua raster input. ",
		bitwiseRightShiftName: "Bitwise Right Shift",
		bitwiseRightShiftSnip: "Melakukan operasi Bitwise Right Shift pada nilai biner dua raster input.",
		bitwiseRightShiftDesc: "Fungsi melakukan operasi Bitwise Right Shift pada nilai biner dua raster input.",
		bitwiseXorName: "Bitwise Xor",
		bitwiseXorSnip: "Melakukan operasi Bitwise eXclusive Or pada nilai biner dua raster input.",
		bitwiseXorDesc: "Fungsi melakukan operasi Bitwise eXclusive Or pada nilai biner dua raster input",
		booleanAndName: "Boolean And",
		booleanAndSnip: "Melakukan operasi Boolean And pada nilai sel dua raster input. Jika kedua nilai input adalah benar (bukan nol), nilai output adalah 1. Jika salah satu atau kedua input adalah salah (nol), output adalah 0.",
		booleanAndDesc: "Fungsi melakukan operasi Boolean And pada nilai piksel dua input. Jika kedua nilai input adalah benar (bukan nol), nilai output adalah 1. Jika salah satu atau kedua nilai input adalah salah (nol), nilai output adalah 0. ",
		booleanNotName: "Boolean Not",
		booleanNotSnip: "Melakukan operasi Boolean Not (pelengkap) pada nilai sel raster input. Jika nilai input adalah benar (bukan nol), nilai output adalah 0. Jika nilai input adalah salah (nol), output adalah 1.",
		booleanNotDesc: "Fungsi melakukan operasi Boolean Not (pelengkap) pada nilai piksel raster input. Jika nilai input adalah benar (bukan nol), nilai output adalah 0. Jika nilai input adalah salah (nol), nilai output adalah 1.",
		booleanOrName: "Boolean Or",
		booleanOrSnip: "Melakukan operasi Boolean Or pada nilai sel dua raster input. Jika satu atau kedua nilai input adalah benar (bukan nol), nilai output adalah 1. Jika kedua nilai input adalah salah (nol), output adalah 0.",
		booleanOrDesc: "Fungsi melakukan operasi Boolean Or pada nilai sel dua raster input. Jika satu atau kedua nilai input adalah benar (bukan nol), nilai output adalah 1. Jika kedua nilai input adalah salah (nol), nilai output adalah 0.",
		booleanXorName: "Boolean Xor",
		booleanXorSnip: "Melakukan operasi Boolean eXclusive Or pada nilai sel dua raster input. Jika satu nilai input adalah benar (bukan nol) dan yang lainnya salah (nol), output adalah 1. Jika kedua nilai input adalah benar atau keduanya adalah salah, output adalah 0.",
		booleanXorDesc: "Fungsi melakukan operasi Boolean eXclusive Or pada nilai sel dua raster input. Jika satu nilai input adalah benar (bukan nol) dan nilai lainnya adalah salah (nol), nilai output adalah 1. Jika kedua nilai input adalah benar atau jika keduanya salah, nilai output adalah 0.",
		bufferedRasterName: "Buffered",
		bufferedRasterSnip: "Mem-buffer blok piksel yang diakses terakhir.",
		bufferedRasterDesc: "Fungsi Buffered digunakan untuk mengoptimalkan kinerja rantai fungsi kompleks. Jika menyimpan output dalam memori bagian rantai fungsi yang hadir sebelumnya. <div><br/>Sisipkan fungsi ini dalam Editor Fungsi di mana Anda ingin menyimpan output.</div>",
		rasterCalculatorName: "Kalkulator",
		rasterCalculatorSnip: "Menghitung raster dari raster berdasarkan ekspresi matematika.",
		rasterCalculatorDesc: "Fungsi Kalkulator memungkinkan Anda membuat dan menjalankan ekspresi dan menyertakan ekspresi itu ke dalam rantai fungsi.",
		cellStatisticsName: "Statistik Sel",
		cellStatisticsSnip: "Menghitung statistik per sel dari beberapa raster. Statistik yang tersedia adalah Mayoritas, Maksimal, Rata-rata, Median, Minimal, Minoritas, Persentil, Rentang, Simpangan Baku, Jumlah, dan Varietas.",
		cellStatisticsDesc: "Fungsi ini menghitung statistik dari beberapa raster, atas dasar piksel demi piksel. Statistik yang tersedia adalah mayoritas, maksimum, rata-rata, median, minimum, minoritas, rentang, simpangan baku, jumlah, dan varietas.",
		classifyName: "Klasifikasi",
		classifySnip: "Tetapkan setiap piksel ke sebuah kelas. Sertakan data tambahan seperti gambar tersegmentasi.",
		classifyDesc: "Fungsi raster ini mengklasifikasikan set data raster berdasarkan file Esri Classifier Definition (.ecd) dan input set data raster. File .ecd digunakan dalam fungsi Klasifikasi, berisi semua informasi untuk set data spesifik dan pengklasifikasi serta dibuat oleh alat pelatihan klasifikasi, seperti alat Train Support Vector Machine atau Train Random Trees.",
		clipName: "Klip",
		clipSnip: "Mengatur jangkauan raster menggunakan koordinat atau set data lainnya.",
		clipDesc: "Fungsi ini memotong raster menggunakan bentuk persegi sesuai dengan jangkauan yang ditetapkan atau akan memotong raster ke bentuk feature class poligon input. Bentuk menjelaskan bahwa klip dapat memotong jangkauan raster atau memotong ke luar area dalam raster.",
		colorspaceConversionName: "Konversi Model Warna",
		colorspaceConversionSnip: "Mengonversi raster dari RGB menjadi HSV dan sebaliknya.",
		colorspaceConversionDesc: "Fungsi Konversi Model Warna mengonversi model warna sebuah gambar dari ruang warna hue, saturasi, dan nilai (HSV) menjadi merah, hijau, dan biru (RGB), atau sebaliknya.<div><br/>Fungsi ini dapat digunakan dalam set data mosaik.</div>",
		colormapToRGBName: "Peta Warna ke RGB",
		colormapToRGBSnip: "Mengonversi sebuah raster band tunggal dengan sebuah peta warna, menjadi raster tiga-band (merah, hijau, dan biru).",
		colormapToRGBDesc: "Fungsi ini mengonversi raster band tunggal dengan peta warna, menjadi raster tiga band (merah, hijau, dan biru).<div><br/>Fungsi ini bermanfaat jika Anda ingin membuat raster tiga band dari raster band tunggal dengan peta warna terkait. Nilai dalam peta warna akan digunakan untuk membuat masing-masing band merah, hijau, dan biru. Fungsi ini dapat digunakan dalam set data mosaik.</div>",
		colormapName: "Peta Warna",
		colormapSnip: "Mengubah nilai piksel untuk menampilkan data raster sebagai gambar skala abu-abu atau gambar merah, hijau, biru (RGB), berdasarkan peta warna atau gradasi warna.",
		colormapDesc: "Fungsi Peta Warna adalah jenis perender data raster. Peta Warna mengubah nilai piksel untuk menampilkan data raster baik dalam gambar berwarna skala abu-abu atau berwarna RGB berdasarkan skema warna atau warna spesifik dalam file peta warna. Anda dapat menggunakan peta warna untuk mewakili data yang dianalisis, seperti misalnya gambar rahasia atau saat menampilkan peta topografik (atau gambar yang dipindai dengan warna indeks).<div><br/>Peta warna berisi seperangkat nilai yang dikaitkan dengan warna yang digunakan untuk menampilkan raster band tunggal secara konsisten dengan warna yang sama. Setiap nilai piksel dikaitkan dengan warna, ditentukan sebagai seperangkat nilai RGB. Peta warna mampu mendukung kedalaman bit apa pun kecuali titik mengambang. Peta warna juga mendukung nilai positif dan negatif serta dapat berisi nilai warna hilang yang dipetakan. Jika menampilkan sebuah set data dengan peta warna yang berisi nilai yang hilang, piksel dengan nilai hilang itu tidak akan ditampilkan.</div>",
		complexName: "Kompleks",
		complexSnip: "Mengekstrak magnitudo dari angka yang kompleks.",
		complexDesc: "Fungsi ini menghitung magnitudo dari nilai yang kompleks.<div><br/>Fungsi ini biasanya digunakan dengan citra RADAR yang memiliki jenis data kompleks. Ini dapat digunakan dalam set data mosaik.</div>",
		compositeBandName: "Gabungan Band",
		compositeBandSnip: "Menggabungkan beberapa set data ke dalam satu raster multiband.",
		compositeBandDesc: "Fungsi Gabungan Band memungkinkan Anda untuk menggabungkan raster untuk membentuk gambar multiband.",
		conName: "Kondisional",
		conSnip: "Melakukan operasi kondisional If, Then, Else. Jika operator Kondisional digunakan, biasanya diperlukan dua atau lebih banyak fungsi yang disatukan bersama, yang mana satu fungsi menyatakan kriteria dan fungsi kedua adalah operator Kondisional yang menggunakan kriteria dan mendiktekan bagaimana seharusnya output benar dan salah.",
		conDesc: "Fungsi Kondisional menetapkan piksel raster output berdasarkan evaluasi if\\else dari setiap piksel input. Fungsi Kondisional mengembalikan nilai piksel dari Raster Benar jika evaluasi kondisional adalah benar (1) atau mengembalikan nilai piksel dari Raster Salah jika evaluasi kondisional adalah salah (0). Kriteria ini ditentukan oleh output fungsi matematika logika, yang mana akan menjadi Raster input.",
		constantName: "Konstan",
		constantSnip: "Membuat raster virtual dengan nilai piksel tunggal.",
		constantDesc: "Fungsi ini membuat raster visual dengan nilai piksel tunggal yang dapat digunakan dalam template fungsi raster serta untuk memproses set data mosaik.<div><br/>Nilai konstan digunakan untuk setiap nilai piksel dalam raster.</div>",
		contourName: "Kontur",
		contourSnip: "Membuat garis kontur.",
		contourDesc: "Fungsi Kontur menghasilkan garis kontur dengan menggabungkan titik-titik dengan elevasi yang sama dari set data elevasi raster. Kontur adalah isoline yang dibuat sebagai raster untuk visualisasi. Fitur utama berikut menjadikan fungsi ini hebat: kontur dengan cepat dan dinamis dibuat pada set data yang sangat besar, seperti Elevasi Dunia; kontur dapat dihaluskan untuk memberikan tampilan yang lebih memuaskan secara kartografis seraya mempertahankan akurasi kontur; kontrol dinamis melalui interval kontur disediakan; opsi output menyertakan garis kontur, kontur indeks, dan kontur yang diisi.<div><br/>Pembuatan layer kontur sebagai produk raster sangat bernilai untuk aplikasi dalam rentang yang luas, karena kontur dapat dilapiskan pada peta dan memberikan informasi terkait medan tanpa mengaburkan data yang mendasarinya. Ini sangat bermanfaat dalam penerapan seperti teknik, pertanian, dan pengelolaan air.</div>",
		contrastBrightnessName: "Kontras dan Kecerahan",
		contrastBrightnessSnip: "Menyesuaikan kontras dan kecerahan raster.",
		contrastBrightnessDesc: "Fungsi Kontras dan Kecerahan meningkatkan tampilan data raster dengan mengubah kecerahan dan kontras dalam gambar. Kecerahan meningkatkan keseluruhan cahaya dari gambar—misalnya, menjadikan warna gelap lebih cerah dan warna cerah semakin putih—sedangkan kontras menyesuaikan perbedaan antara warna paling gelap dan paling terang.<div><br/>Menggunakan fungsi ini mengubah nilai piksel; karena itu, fungsi ini harus digunakan jika Anda ingin meningkatkan tampilan data dan jangan gunakan jika Anda bermaksud menggunakan data sebagai bagian analisis yang akan memerlukan nilai piksel mentah. Fungsi ini bermanfaat jika menerbitkan data sebagai layanan gambar yang mungkin digunakan dalam aplikasi tanpa kemampuan untuk mengubah kontras dan kecerahan citra, atau untuk memastikan bahwa ini ditampilkan menggunakan pengaturan pilihan Anda.</div>",
		convolutionName: "Konvolusi",
		convolutionSnip: "Menerapkan filter untuk mempertajam, mengaburkan, mendeteksi tepian, memperhalus, atau gradien di seluruh raster.",
		convolutionDesc: "Fungsi Konvolusi melakukan pemfilteran terhadap nilai piksel dalam sebuah gambar, yang dapat digunakan untuk mempertajam sebuah gambar, mengaburkan gambar, mendeteksi tepian dalam sebuah gambar, atau peningkatan berbasis kernel lainnya. Filter digunakan untuk meningkatkan kualitas gambar raster dengan menghapuskan data palsu atau meningkatkan fitur-fitur dalam data. Filter konvolusi ini diterapkan pada kernel yang bergerak, bertumpang tindih (jendela atau sekitar), misalnya 3 kali 3. Filter konvolusi bekerja dengan menghitung nilai piksel berdasarkan tingkat kepentingan sekitarnya.",
		corridorName: "Koridor",
		corridorSnip: "Menghitung jumlah biaya akumulatif untuk dua raster akumulatif input.",
		corridorDesc: "Fungsi Koridor menghitung jumlah biaya akumulatif untuk dua raster biaya akumulatif input. Meskipun dua raster apa saja bisa digunakan untuk input, untuk mendapatkan hasil yang baik, raster yang digunakan harus raster output biaya akumulatif yang tidak berubah. Urutan dua input itu tidak relevan.",
		cosHName: "CosH",
		cosHSnip: "Menghitung kosinus hiperbolik sel dalam sebuah raster.",
		cosHDesc: "Fungsi tersebut menghitung kosinus hiperbolik piksel dalam sebuah raster.",
		cosName: "Kosinus",
		cosSnip: "Menghitung kosinus sel dalam raster.",
		cosDesc: "Fungsi tersebut menghitung kosinus piksel dalam sebuah raster.",
		costAllocationName: "Alokasi Biaya",
		costAllocationSnip: "Menghitung biaya sumber terendah berdasarkan biaya akumulatif terendah terhadap biaya permukaan untuk setiap sel.",
		costAllocationDesc: "Fungsi Alokasi Biaya menghitung biaya sumber terendahnya berdasarkan biaya akumulatif terendah terhadap biaya permukaan untuk setiap sel.",
		costBackLinkName: "Biaya Tautan Balik",
		costBackLinkSnip: "Menentukan sekitar yang merupakan sel selanjutnya pada biaya jalur akumulatif terendah ke biaya sumber terendah.",
		costBackLinkDesc: "Fungsi Biaya Tautan Balik menentukan sekitar yang merupakan sel selanjutnya pada biaya jalur akumulatif paling sedikit ke biaya sumber terendah.<div><br/>Raster tautan balik berisi nilai nol hingga delapan, yang menentukan arah atau mengidentifikasi sel sekitar selanjutnya (sel selanjutnya) sepanjang biaya jalur akumulatif terendah dari sel untuk menjangkau biaya sumber terendahnya. Jika jalur tersebut akan melalui bagian sekitar sebelah kanan, sel akan diberi nilai 1, 2 untuk sel diagonal kanan bawah, dan berlanjut searah jarum jam. Nilai 0 disimpan untuk sel sumber.</div>",
		costDistanceName: "Biaya Jarak",
		costDistanceSnip: "Menghitung biaya akumulatif jarak terendah untuk setiap sel dari atau ke biaya sumber terendah melalui biaya permukaan.",
		costDistanceDesc: "Fungsi Biaya Jarak menghitung biaya akumulatif jarak terendah untuk setiap sel dari atau ke biaya sumber terendah melalui biaya permukaan.",
		costPathName: "Biaya Jalur",
		costPathSnip: "Menghitung biaya jalur terendah dari sumber ke tujuan.",
		costPathDesc: "Fungsi Biaya Jalur global menghitung biaya jalur terendah dari sumber ke tujuan.<div><br/>Fungsi ini menghasilkan sebuah raster output yang mencatat biaya jalur terendah atau jalur dari lokasi pilihan ke sel sumber terdekat ditentukan dalam biaya permukaan akumulatif dalam hal biaya jarak.</div>",
		curvatureName: "Lengkungan",
		curvatureSnip: "Menghitung lengkungan permukaan raster, secara opsional menyertakan lengkungan profil dan lengkungan plan.",
		curvatureDesc: "Fungsi Lengkungan menampilkan bentuk atau lengkungan kelerengan. Bagian permukaan bisa jadi cekung atau cembung; Anda dapat mengetahuinya dengan melihat nilai lengkungan. Lengkungan dihitung dengan menghitung turunan kedua dari permukaan.<div><br/>Output fungsi Lengkungan dapat digunakan untuk menjelaskan karakteristik fisik kolam daerah aliran sungai dalam upaya untuk memahami proses erosi dan limpasan. Nilai lengkungan dapat digunakan untuk menemukan pola erosi tanah, juga distribusi air di tanah. Lengkungan profil memengaruhi naik dan turunnya kecepatan aliran, dan karena itu, memengaruhi erosi dan endapan. Lengkungan planform memengaruhi konvergensi dan divergensi aliran.</div>",
		divideName: "Bagi",
		divideSnip: "Membagi nilai dua raster atas dasar sel demi sel.",
		divideDesc: "Fungsi Bagi membagi nilai dua raster atas dasar piksel demi piksel.",
		elevationVoidFillName: "Pengisian Kekosongan Elevasi",
		elevationVoidFillSnip: "Membuat piksel-piksel di tempat adanya lubang pada data elevasi Anda.",
		elevationVoidFillDesc: "Fungsi Pengisian Kekosongan Elevasi digunakan untuk membuat piksel di tempat adanya lubang-lubang pada elevasi Anda.<div><br/>Kekosongan muncul jika tidak ada titik yang dikumpulkan dalam area diwakili oleh sebuah piksel dalam raster yang dihasilkan. Kekosongan sering disebabkan oleh badan air, pilihan jenis kelas, atau pengecualian. Pengisian kekosongan paling banyak digunakan saat membuat permukaan tanah.</div>",
		equalToName: "Sama Dengan",
		equalToSnip: "Melakukan operasi Relasional sama dengan terhadap dua input berbasis sel demi sel. Mengembalikan 1 untuk sel yang mana raster pertama sama dengan raster kedua dan 0 untuk sel yang tidak sama.",
		equalToDesc: "Fungsi tersebut melakukan operasi sama dengan pada dua raster atas dasar piksel demi piksel. Ini mengembalikan nilai 1 untuk piksel yang mana raster pertama sama dengan raster kedua dan nilai 0 untuk piksel yang mana nilai itu tidak sama.",
		eucAllocationName: "Alokasi Euclidean",
		eucAllocationSnip: "Menghitung sumber terdekat berdasarkan jarak Euclidean untuk setiap sel.",
		eucAllocationDesc: "Fungsi Alokasi Euclidean menghitung sumber terdekat berdasarkan jarak Euclidean untuk setiap sel.",
		eucDirectionName: "Arah Euclidean",
		eucDirectionSnip: "Menghitung arah, dalam derajat, ke sumber terdekat untuk setiap sel.",
		eucDirectionDesc: "Fungsi Arah Euclidean menghitung arah, dalam derajat, ke sumber terdekat untuk setiap sel. <div><br/>Arah dihitung dari setiap pusat sel ke pusat sel sumber yang terdekat dengannya. Rentang nilai adalah dari 0 derajat ke 360 derajat, dengan 0 dicadangkan untuk sel sumber. Karena timur (kanan) adalah 90 dan nilai meningkat searah jarum jam (180 adalah selatan, 270 adalah barat, dan 360 adalah utara).</div>",
		eucDistanceName: "Jarak Euclidean",
		eucDistanceSnip: "Menghitung jarak Euclidean ke sumber terdekat untuk setiap sel.",
		eucDistanceDesc: "Fungsi Jarak Euclidean menghitung jarak Euclidean ke sumber terdekat untuk setiap sel.",
		exp10Name: "Exp10",
		exp10Snip: "Menghitung eksponensial basis 10 dari sel dalam sebuah raster.",
		exp10Desc: "Fungsi Exp 10 menghitung eksponensial basis 10 dari piksel dalam sebuah raster.",
		exp2Name: "Exp2",
		exp2Snip: "Menghitung eksponensial basis 2 dari sel dalam sebuah raster.",
		exp2Desc: "Fungsi ini menghitung eksponensial basis 2 dari piksel dalam sebuah raster.",
		expName: "Exp",
		expSnip: "Menghitung eksponensial basis e dari sel dalam sebuah raster.",
		expDesc: "Fungsi ini menghitung eksponensial basis e dari piksel dalam sebuah raster.",
		extractBandName: "Ekstrak Band",
		extractBandSnip: "Menentukan band mana yang akan bekerja saat menggunakan set data multiband.",
		extractBandDesc: " Fungsi Ekstrak Band memungkinkan Anda untuk mengekstrak satu band atau lebih, atau mengatur urutan band, dalam set data raster multiband.<div><br/>Anda dapat menggunakan fungsi Ekstrak Band sebelum fungsi lain seperti Aritmatika, untuk mengontrol band mana yang akan digunakan sebagai input dalam fungsi selanjutnya.</div>",
		fillName: "Pengisian",
		fillSnip: "Mengisi lembah di raster permukaan untuk menghapus kekurangan kecil dalam data.",
		fillDesc: "Fungsi Pengisian global ditentukan dan mengisi lembah dan puncak dalam raster permukaan elevasi untuk menghapus kekurangan kecil pada data. Fungsi ini akan melakukan pengisian dalam proses yang berulang-ulang hingga semua lembah dalam Batas Z yang ditentukan diisi.<div><br/>Saat permukaan elevasi dibuat dengan alat Pemetaan Orto atau dengan cara lain, seringkali ada galat kecil tapi signifikan dalam bentuk lembah dan puncak dalam data. Dalam fotogrametri, lembah dan puncak seringkali ditunjukkan sebagai lubang dan bentuk berujung runcing. Karena data permukaan seringkali digunakan dalam pembuatan model, seperti misalnya pembuatan model hidrologis, penting untuk memperbaiki galat lembah dan puncak ini dengan cara yang konsisten dengan data di sekitarnya.</div>",
		floatName: "Mengambang",
		floatSnip: "Mengonversi setiap nilai sel dari raster ke representasi titik mengambang.",
		floatDesc: "Fungsi Mengambang mengonversi setiap nilai piksel dari raster ke representasi titik mengambang.",
		flowAccumulationName: "Akumulasi Aliran",
		flowAccumulationSnip: "Membuat raster aliran terakumulasi ke dalam setiap sel. Faktor bobot dapat diaplikasikan secara opsional.",
		flowAccumulationDesc: "Fungsi Akumulasi Aliran global membuat raster aliran terakumulasi ke dalam setiap piksel, sebagaimana ditentukan dengan cara mengakumulasikan bobot untuk semua piksel yang mengalir ke dalam setiap piksel kelerengan menurun. Jika tidak ada raster bobot yang diberikan, bobot 1 diberlakukan pada setiap piksel, dan nilai piksel dalam raster output adalah jumlah piksel yang mengalir ke dalam setiap piksel.<div><br/>Piksel output dengan akumulasi aliran tinggi adalah area aliran terkonsentrasi dan dapat digunakan untuk mengidentifikasi saluran aliran. Piksel output dengan akumulasi alur nol adalah ketinggian topografi lokal dan dapat digunakan untuk mengidentifikasi punggung bukit.</div>",
		flowDirectionName: "Arah Aliran",
		flowDirectionSnip: "Membuat raster arah aliran dari setiap sel ke kelerengan menurun paling miring di sekitar.",
		flowDirectionDesc: "Salah satu kunci untuk mendapatkan karakteristik hidrologi permukaan adalah kemampuan untuk menentukan arah aliran dari semua piksel dalam raster. Fungsi raster Arah Aliran mengambil permukaan sebagai input dan membuat raster arah aliran dari setiap piksel ke kelerengan menurun paling miring di sekitar. Fungsi Arah Aliran mendukung tiga metode pemodelan aliran: D8 (delapan arah), Arah Multi-Aliran (MFD), dan D-Infinity (DINF). ",
		flowDistanceName: "Jarak Aliran",
		flowDistanceSnip: "Menghitung jarak kelerengan menurun minimum horizontal atau vertikal ke sel di aliran atau sungai di tempatnya mengalir untuk setiap sel.",
		flowDistanceDesc: "Untuk setiap piksel, fungsi tersebut akan menghitung jarak kelerengan menurun minimum horizontal atau vertikal ke piksel di sungai atau aliran air di tempatnya mengalir. Jika raster arah aliran opsional diberikan, arah kelerengan menurun akan dibatasi ke yang ditentukan oleh raster arah aliran input. Output adalah raster jarak aliran.",
		focalName: "Statistik Titik Fokus",
		focalSnip: "Menghitung statistik titik fokus untuk setiap piksel gambar berdasarkan titik fokus yang ditentukan di sekitar.",
		focalDesc: "Fungsi Statistik Titik Fokus menghitung statistik titik fokus untuk setiap piksel gambar berdasarkan titik fokus yang ditentukan di sekitar.",
		geometricName: "Geometrik",
		geometricSnip: "Meningkatkan akurasi posisional set data dengan melakukan perhitungan untuk elevasi.",
		geometricDesc: "Fungsi Geometrik menghasilkan sebuah gambar ortorektifikasi berdasarkan definisi sensor dan model medan. Fungsi geometrik meningkatkan akurasi posisional set data dengan melakukan perhitungan untuk elevasi.",
		grayscaleName: "Skala Abu-abu",
		grayscaleSnip: "Mengonversi gambar multiband ke gambar skala abu-abu band tunggal.",
		grayscaleDesc: "Fungsi ini mengonversi gambar multiband ke gambar skala abu-abu band tunggal.<div><br/>Fungsi ini menerapkan bobot yang ditentukan ke setiap band input dan melakukan normalisasi gambar output. Bobot seringkali diterapkan karena beberapa band memiliki tingkat kepentingan variabel bergantung pada penerapan. Contohnya, band biru seringkali berisi lebih banyak derau dibandingkan band lainnya.</div>",
		greaterThanEqualName: "Lebih Besar Dari Sama Dengan",
		greaterThanEqualSnip: "Melakukan operasi Relasional lebih besar dari atau sama dengan pada dua input berbasis sel demi sel. Mengembalikan 1 untuk sel yang mana raster pertama lebih besar dari atau sama dengan raster kedua 0 jika tidak.",
		greaterThanEqualDesc: "Fungsi melakukan operasi Relasional yang lebih besar dari atau sama dengan pada dua input berbasis piksel demi piksel. Fungsi ini mengembalikan nilai 1 untuk piksel yang mana raster pertama lebih besar dari atau sama dengan raster kedua dan nilai 0 untuk piksel yang mana raster pertama tidak lebih besar dari atau sama dengan raster kedua.",
		greaterThanName: "Lebih Besar Dari",
		greaterThanSnip: "Melakukan operasi Relasional lebih besar dari pada dua input berbasis sel demi sel. Mengembalikan 1 untuk sel yang mana raster pertama lebih besar dari raster kedua dan 0 untuk sel jika tidak.",
		greaterThanDesc: "Fungsi tersebut melakukan operasi Relasional lebih besar dari terhadap dua input berbasis piksel demi piksel. Mengembalikan nilai 1 untuk piksel yang mana raster pertama lebih besar dari raster kedua dan nilai 0 untuk piksel yang mana raster pertama tidak lebih besar dari raster kedua.",
		heatIndexName: "Indeks Panas",
		heatIndexSnip: "Menggabungkan suhu udara sekitar dan kelembapan relatif untuk mengembalikan suhu yang jelas.",
		heatIndexDesc: "Fungsi ini menghitung suhu yang jelas berdasarkan suhu sekitar dan kelembapan relatif. Suhu yang jelas sering digambarkan sebagai seberapa panas rasanya bagi tubuh manusia.<div><br/>Indeks ini dapat bermanfaat untuk menghitung bahaya terkait masalah medis seperti kram otot, dehidrasi, kelelahan akibat panas, atau serangan panas yang lebih serius pada hari-hari yang panas dan lembap. Saat kelembapan relatif tinggi, maka akan makin sulit bagi keringat tubuh untuk menguap, menjadikan orang tidak memiliki cara alamiah yang efektif untuk mendinginkan diri. Peta saran atau peringatan panas seringkali merupakan produk klasifikasi ulang hasil indeks panas ke dalam kelas-kelas, yang mana makin tinggi nilai indeks, maka kemungkinan munculnya peringatan, bukan saran, makin besar.</div>",
		hillshadeName: "Bayangan Gunung",
		hillshadeSnip: "Membuat representasi 3D permukaan, dengan posisi relatif matahari diperhitungkan untuk melakukan pembayangan pada gambar",
		hillshadeDesc: "Fungsi Bayangan Gunung menghasilkan representasi 3D skala abu-abu permukaan medan, dengan posisi relatif matahari diperhitungkan untuk membuat bayangan pada gambar. <div><br/>Pembayangan Gunung adalah teknik untuk memvisualisasi medan yang ditentukan oleh sumber cahaya dan kelerengan serta aspek permukaan elevasi. Ini adalah metode kualitatif untuk memvisualisasikan topografi dan tidak memberikan nilai elevasi yang absolut. </div>",
		intName: "Bilangan Bulat",
		intSnip: "Mengonversi setiap nilai sel raster ke bilangan bulat dengan pemotongan.",
		intDesc: "Fungsi Bilangan Bulat mengonversi setiap nilai piksel raster ke bilangan bulat dengan pemotongan.",
		interpolateIrregularDataName: "Interpolasi Data Tidak Teratur",
		interpolateIrregularDataSnip: "Menginterpolasi dari titik awan atau grid tidak teratur.",
		interpolateIrregularDataDesc: "Beberapa set data netCDF atau HDF menyimpan geolokasinya sebagai array yang memiliki ruang tidak teratur di data piksel atau titik. Saat menambahkan set data ini ke set data mosaik, fungsi interpolasi data tidak teratur mengambil data grid secara tidak teratur dan melakukan pengambilan ulang sampel sehingga setiap piksel memiliki ukuran yang seragam dan persegi.<div><br/>Saat menambahkan variabel dari netCDF atau HDF ke set data mosaik, fungsi ini akan secara otomatis memverifikasikannya jika data tersusun secara teratur. Jika tidak, fungsi interpolasi data tidak teratur dapat digunakan untuk mengonversi data yang tidak teratur ke dalam raster grid teratur. Anda dapat mengubah metode interpolasi dan ukuran sel yang digunakan dalam fungsi raster interpolasi data tidak teratur. Untuk data raster dengan ruang teratur, tidak ada interpolasi akan diberlakukan dan data akan dibaca sebagaimana adanya.</div>",
		isNullName: "Adalah Nol",
		isNullSnip: "Menentukan nilai mana dari raster input yang merupakan NoData atas dasar sel demi sel. Mengembalikan nilai 1 jika nilai input adalah NoData dan nilai 0 untuk sel yang bukan.",
		isNullDesc: "Fungsi Adalah Nol menentukan nilai mana dari raster input yang merupakan NoData atas dasar piksel demi piksel. Fungsi ini mengembalikan nilai 1 jika nilai input adalah NoData dan nilai 0 untuk piksel yang bukan NoData.",
		kernelDensityName: "Kepadatan Kernel",
		kernelDensitySnip: "Menghitung magnitudo per area unit dari fitur titik atau polyline menggunakan fungsi kernel untuk menyesuaikan secara halus permukaan yang meruncing ke setiap titik atau polyline.",
		kernelDensityDesc: "Fungsi ini menghitung magnitudo per area unit dari fitur titik atau polyline menggunakan fungsi kernel untuk menyesuaikan secara halus permukaan yang meruncing ke setiap titik atau polyline.",
		keyMetadataName: "Metadata Utama",
		keyMetadataSnip: "Menimpa atau menyisipkan metadata utama dari raster dalam rantai fungsi.",
		keyMetadataDesc: "Fungsi ini memungkinkan Anda untuk memasukkan atau menimpa metadata utama raster.<div><br/>Informasi dalam metadata utama digunakan untuk membantu aplikasi dengan pemrosesan dan perenderan, termasuk memberikan informasi yang bermanfaat seperti nama sensor, nama band, atau tutup awan terkait dengan citra.</div>",
		shortestPathName: "Biaya Jalur Terendah",
		shortestPathSnip: "Melakukan analisis biaya jarak menggunakan input sumber dan tujuan yang mana kemudian digunakan untuk menentukan biaya jalur terendah dari sumber ke tujuan.",
		shortestPathDesc: "Fungsi Biaya Jalur Terendah menghitung biaya jalur terendah dari sumber ke tujuan. Biaya jarak akumulatif terendah dihitung untuk setiap piksel melalui biaya permukaan, ke sumber terdekat. Fungsi ini menghasilkan raster output yang mencatat biaya jalur terendah, atau jalur, dari lokasi pilihan ke piksel sumber terdekat yang ditentukan dalam biaya permukaan akumulatif, dalam hal biaya jarak.<div><br/>Setiap biaya jalur terendah ditetapkan sebuah nilai saat dijumpai dalam proses pemindaian. Piksel akhir pada Raster Sumber biaya jalur menerima nilai 1. Jalur pertama menerima nilai 3, yang kedua 4, dan seterusnya. Saat beberapa jalur bergabung dan mengikuti jarak tersisa kembali ke sumber pada rute yang sama, segmen tempat dua jalur bergerak bersama ditetapkan nilai 2. Porsi gabungan jalur tidak dapat ditetapkan nilai satu jalur, karena porsi yang digabungkan merupakan bagian dari kedua rute.</div>",
		lessThanEqualName: "Kurang Dari Sama Dengan",
		lessThanEqualSnip: "Melakukan operasi Relasional kurang dari atau sama dengan pada dua input atas dasar sel demi sel. Mengembalikan 1 untuk sel yang mana raster pertama kurang dari atau sama dengan raster kedua dan 0 yang mana ini bukan.",
		lessThanEqualDesc: "Fungsi itu melakukan operasi Relasional kurang dari atau sama dengan pada dua input atas dasar piksel demi piksel. Fungsi ini mengembalikan nilai 1 untuk piksel yang mana raster pertama kurang dari atau sama dengan raster kedua dan nilai 0 yang mana bukan kurang dari atau sama dengan raster kedua.",
		lessThanName: "Kurang Dari",
		lessThanSnip: "Melakukan operasi Relasional kurang dari pada dua input atas dasar sel demi sel. Mengembalikan 1 untuk sel yang mana raster pertama kurang dari raster kedua dan 0 jika ini bukan.",
		lessThanDesc: "Fungsi tersebut melakukan operasi Relasional kurang dari pada dua input atas dasar piksel demi piksel. Fungsi ini mengembalikan nilai 1 untuk piksel yang mana raster pertama kurang dari raster kedua dan nilai 0 yang mana bukan kurang dari raster kedua.",
		lnName: "Ln",
		lnSnip: "Menghitung logaritme natural (basis e) dari sel dalam sebuah raster.",
		lnDesc: "Fungsi Ln menghitung logaritme natural (basis e) dari setiap piksel dalam sebuah raster.",
		log10Name: "Log10",
		log10Snip: "Menghitung logaritme basis 10 dari sel dalam sebuah raster.",
		log10Desc: "Fungsi Log10 menghitung logaritme basis 10 dari setiap piksel dalam sebuah raster.",
		log2Name: "Log2",
		log2Snip: "Menghitung logaritme basis 2 dari sel dalam sebuah raster.",
		log2Desc: "Fungsi Log2 Menghitung logaritme basis 2 dari setiap piksel dalam sebuah raster.",
		lookupName: "Pencarian",
		lookupSnip: "Membuat raster baru dengan mencari nilai yang ditemukan di kolom lain dalam tabel raster input.",
		lookupDesc: "Fungsi tersebut membuat raster baru dengan mencari nilai yang ditemukan di kolom lain dalam tabel raster input.",
		mlClassifyName: "Klasifikasi ML",
		mlClassifySnip: "Mengklasifikasikan citra menggunakan pendekatan per piksel. Piksel gabungan ditetapkan ke fitur dengan persentase tertinggi dalam piksel itu.",
		mlClassifyDesc: "Fungsi Klasifikasi ML memungkinkan Anda untuk melakukan klasifikasi yang diawasi, menggunakan algoritme klasifikasi kemungkinan maksimum, pada set data raster atau set data mosaik. Fungsi ini memerlukan file tanda tangan klasifikasi.",
		maskName: "Mask",
		maskSnip: "Menetapkan nilai yang tidak ingin Anda tampilkan.",
		maskDesc: "Fungsi raster ini menetapkan nilai yang tidak ingin Anda tampilkan di raster Anda. Menggunakan fungsi Mask, Anda akan menentukan satu atau lebih nilai NoData atau rentang nilai piksel valid. ",
		minusName: "Kurangi",
		minusSnip: "Mengurangi nilai raster input kedua dari nilai raster input pertama atas dasar sel demi sel.",
		minusDesc: "Fungsi Kurangi mengurangi nilai raster input kedua dari nilai raster input pertama atas dasar piksel demi piksel.",
		modName: "Mod",
		modSnip: "Menemukan sisa (modulo) dari raster pertama saat dibagi dengan raster kedua atas dasar sel demi sel.",
		modDesc: "Fungsi Mod menemukan sisa (modulo) dari raster pertama saat dibagi dengan raster kedua atas dasar piksel demi piksel. Urutan input sangat penting dan memengaruhi hasil output.",
		mosaicRastersName: "Raster Mosaik",
		mosaicRastersSnip: "Menyatukan seperangkat set data raster untuk membuat satu set data.",
		mosaicRastersDesc: "Fungsi Raster Mosaik membuat gambar mosaik dari beberapa gambar. Saat ada tumpang tindih antar gambar, ada beberapa metode yang dapat Anda pilih untuk menentukan gambar mana yang ditampilkan.",
		ndviColorizedName: "NDVI Berwarna",
		ndviColorizedSnip: "Membuat set data multiband yang mewakili kesehatan vegetasi, berdasarkan perbedaan antara band merah dan dekat infra merah.",
		ndviColorizedDesc: "Fungsi NDVI Berwarna menerapkan fungsi NDVI pada gambar input, lalu menggunakan peta warna atau gradasi warna untuk menampilkan hasilnya.",
		ndviName: "NDVI",
		ndviSnip: "Menghitung Indeks Vegetasi Perbedaan Ternormalisasi (NDVI).",
		ndviDesc: "Fungsi NDVI membuat set data band tunggal yang mewakili kesehatan vegetasi, berdasarkan perbedaan antara band merah dan dekat infra merah.<div><br/>NDVI adalah indeks yang distandarkan sehingga memungkinkan Anda membuat gambar yang menampilkan tingkat kehijauan berbeda, yang dikenal juga sebagai biomassa relatif. Indeks ini mengambil keuntungan dari karakteristik yang kontras antara dua band dari set data raster multispektral: penyerapan pigmen klorofil dalam band merah dan pantulan yang tinggi dari materi tanaman di band infra merah sekitar (NIR). Nilai NDVI yang sangat rendah atau negatif mewakili area dengan tanpa vegetasi sama sekali, seperti misalnya awan, air, atau salju. Nilai yang sangat rendah mewakili area dengan vegetasi sangat rendah hingga tanpa vegetasi, misalnya semen, batu, atau tanah luas tanpa ada apa pun. Nilai sedang mewakili area dengan semak belukar dan rumput. Nilai yang tinggi mewakili area hutan dan vegetasi yang subur.</div>",
		negateName: "Negasi",
		negateSnip: "Mengubah simbol (dikalikan -1) dari nilai sel raster input atas dasar sel demi sel.",
		negateDesc: "Fungsi negasi mengubah simbol (dikalikan -1) dari nilai piksel raster input pada sebuah piksel ",
		nibbleName: "Nibble",
		nibbleSnip: "Mengganti sel raster terkait dengan sebuah mask dengan nilai sekitar terdekat.",
		nibbleDesc: "Fungsi Nibble global memungkinkan area raster terpilih diberi nilai sekitar terdekatnya. Ini bermanfaat untuk pengeditan area raster tempat data mungkin salah.",
		notEqualName: "Tidak Sama Dengan",
		notEqualSnip: "Melakukan operasi Relasional tidak sama dengan pada dua input atas dasar sel demi sel. Mengembalikan 1 untuk sel yang mana raster pertama tidak sama dengan raster kedua dan 0 yang mana ini sama dengan.",
		notEqualDesc: "Fungsi tersebut melakukan operasi Relasional tidak sama dengan pada dua input atas dasar piksel demi piksel. Fungsi ini mengembalikan nilai 1 untuk piksel yang mana raster pertama tidak sama dengan raster kedua dan nilai 0 untuk piksel yang mana ini sama dengan raster kedua.",
		pansharpeningName: "Pansharpen",
		pansharpeningSnip: "Secara artifisial meningkatkan resolusi spasial gambar multiband dengan cara menggabungkannya dengan gambar pankromatik yang memiliki resolusi lebih tinggi.",
		pansharpeningDesc: "Fungsi Pan-sharpening menggunakan gambar pankromatik beresolusi lebih tinggi atau band raster untuk digabungkan dengan set data raster multiband beresolusi rendah guna meningkatkan resolusi spasial gambar multiband.<div><br/>Tujuan pan sharpening adalah membuat gambar visual berkualitas lebih tinggi. Karena teknik ini mengubah karakteristik radiometri dan spektral citra multiband, citra yang diproses dengan pan sharpening perlu digunakan dengan peringatan untuk tujuan pengindraan jarak jauh analitis.</div>",
		pathAllocationName: "Alokasi Jarak Jalur",
		pathAllocationSnip: "Menghitung biaya sumber terendah untuk setiap sel berdasarkan biaya akumulatif terendah pada biaya permukaan, seraya memperhitungkan jarak permukaan bersama faktor biaya horizontal dan vertikal.",
		pathAllocationDesc: "Fungsi Alokasi Jarak Jalur menghitung sumber terdekat untuk setiap sel berdasarkan biaya akumulatif terendah pada biaya permukaan, seraya memperhitungkan jarak permukaan dan faktor biaya horizontal dan vertikal.",
		pathBackLinkName: "Tautan Balik Jarak Jalur",
		pathBackLinkSnip: "Menentukan sekitar yaitu sel selanjutnya pada biaya jalur akumulatif terendah ke biaya sumber terendah, seraya memperhitungkan jarak permukaan bersamaan dengan faktor biaya horizontal dan vertikal.",
		pathBackLinkDesc: "Fungsi Tautan Balik Jarak Jalur mengidentifikasi tingkat kelangsungan sekitar yang mana merupakan sel selanjutnya di biaya jalur akumulatif terendah ke sumber terdekat, seraya memperhitungkan jarak permukaan dan faktor biaya horizontal dan vertikal.",
		pathDistanceName: "Jarak Jalur",
		pathDistanceSnip: "Menghitung biaya jarak akumulatif terendah dari atau ke sumber terdekat, seraya memperhitungkan untuk jarak permukaan dan faktor biaya horizontal dan vertikal untuk setiap sel.",
		pathDistanceDesc: "Fungsi Jarak Jalur menghitung biaya jarak akumulatif terendah ke sumber terdekat, seraya memperhitungkan untuk jarak permukaan dan faktor biaya horizontal dan vertikal untuk setiap sel.",
		plusName: "Tambah",
		plusSnip: "Menambahkan (menjumlahkan) nilai-nilai dua raster atas dasar sel demi sel.",
		plusDesc: "Fungsi Tambah menambahkan (menjumlahkan) nilai-nilai dua raster atas dasar piksel demi piksel.",
		powerName: "Pangkat",
		powerSnip: "Menaikkan nilai sel dalam sebuah raster ke pangkat nilai yang ditemukan di raster lainnya.",
		powerDesc: "Fungsi Pangkat menaikkan nilai piksel dalam sebuah raster ke power nilai yang ditemukan di raster lainnya.",
		radarCalibrationName: "Kalibrasi Radar",
		radarCalibrationSnip: "Mengonversi hamburan balik RADARSAT-2.",
		radarCalibrationDesc: "Fungsi ini dapat digunakan untuk mengkalibrasi citra RADARSAT-2 dalam sebuah set data mosaik atau sebagai produk raster. Kalibrasi dilakukan pada citra radar sehingga nilai piksel adalah representasi sesungguhnya dari radar hamburan balik.",
		rasterInfoName: "Info Raster",
		rasterInfoSnip: "Mengubah properti raster, seperti kedalaman bit, nilai NoData, ukuran sel, dan seterusnya.",
		rasterInfoDesc: "Info Raster membuka dialog dengan properti set data raster, seperti misalnya jumlah kolom dan baris, jumlah band, jenis piksel, jangkauan, dan referensi spasial. Anda dapat mengedit properti ini dengan memilih set data raster untuk digunakan sebagai template. ",
		rasterizeAttributesName: "Rasterisasi Atribut",
		rasterizeAttributesSnip: "Memperkaya raster melalui band tambahan yang diturunkan dari nilai atribut tertentu dari tabel eksternal atau sebuah feature service.",
		rasterizeAttributesDesc: "Fungsi Rasterisasi Atribut memperkaya raster dengan menambahkan bands yang diturunkan dari nilai atribut tertentu, dari tabel eksternal, atau sebuah feature service. Anda secara opsional dapat menentukan raster zona dan atribut ID zona terkait untuk mengaktifkan pencarian berbasis wilayah.",
		rasterizeFeatureClassName: "Rasterisasi Fitur",
		rasterizeFeatureClassSnip: "Mengonversi fitur ke raster.",
		rasterizeFeatureClassDesc: "Fungsi ini mengonversi poligon, polyline, dan data feature class titik ke layer raster.<div><br/>Fitur diberi nilai piksel berdasarkan OBJECTID (default) fitur. Secara opsional, nilai piksel dapat didasarkan pada kolom nilai yang ditentukan pengguna dalam tabel atribut fitur input.</div>",
		recastName: "Konversi Ulang",
		recastSnip: "Mengubah parameter rantai fungsi dalam set data mosaik atau layanan gambar. Ini seringkali digunakan dengan set data LAS untuk menghindari harus membuat set data mosaik terpisah untuk representasi medan yang berbeda.",
		recastDesc: "Fungsi Konversi Ulang digunakan untuk secara dinamis mengubah parameter fungsi yang digunakan dalam set data mosaik atau layanan gambar tanpa secara fisik mempertahankan perubahan.",
		regionGroupName: "Kelompok Wilayah",
		regionGroupSnip: "Untuk setiap sel dalam output, identitas wilayah terhubung ke tempat asal sel dicatat. Sebuah angka unik ditetapkan ke setiap wilayah.",
		regionGroupDesc: "Fungsi Kelompok Wilayah global mencatat setiap sel dalam output, kemudian mengidentifikasi wilayah yang terhubung ke tempat yang merupakan asal sel itu. Sebuah angka unik ditetapkan ke setiap wilayah.<div><br/>Wilayah yang pertama dipindai menerima nilai satu, yang kedua menerima nilai dua, dan seterusnya, hingga semua wilayah diberi nilai. Pemindaian bergerak dari kiri ke kanan, atas ke bawah. Nilai yang ditetapkan ke zona output adalah berdasarkan tempatnya bertemu dalam proses pemindaian.</div>",
		regionGrowName: "Pertumbuhan Wilayah",
		regionGrowSnip: "Menumbuhkan wilayah dari titik seed.",
		regionGrowDesc: "Fungsi Pertumbuhan Wilayah mengelompokkan piksel-piksel sekitar ke dalam kelompok-kelompok bergantung pada radius yang ditentukan dari titik seed. Kelompok piksel atau objek diberi nilai isian tertentu.",
		remapName: "Petakan Ulang",
		remapSnip: "Mengubah nilai piksel dengan menetapkan nilai-nilai baru ke rentang nilai piksel atau menggunakan tabel eksternal.",
		remapDesc: "Fungsi Petakan Ulang memungkinkan Anda mengubah atau mengklasifikasikan ulang nilai piksel pada data raster. Ini dapat dilakukan baik dengan menentukan rentang nilai piksel untuk dipetakan ke sebuah nilai piksel output, atau menggunakan sebuah tabel untuk memetakan nilai piksel ke nilai piksel output.",
		reprojectName: "Proyeksi Ulang",
		reprojectSnip: "Mengubah proyeksi set data raster, set data mosaik, atau item raster dalam sebuah set data mosaik. Fungsi ini juga dapat mengambil ulang sampel data ke ukuran sel yang baru dan menentukan asalnya.",
		reprojectDesc: "Fungsi Proyeksi Ulang mengubah proyeksi set data raster, set data mosaik, atau item raster dalam sebuah set data mosaik. Fungsi ini juga dapat mengambil ulang sampel data ke ukuran sel yang baru dan menentukan asalnya.<div><br/>Fungsi Proyeksi Ulang dapat digunakan saat membuat cache dari set data raster atau mosaik yang tidak berada dalam proyeksi yang diperlukan. Contoh, saat membuat layanan gambar yang di-cache, yang dapat diintegrasikan dengan melakukan penerapan dengan layanan lain yang di-cache, penting untuk diperhatikan bahwa semuanya harus berada dalam proyeksi yang sama. Ini seringkali merupakan proyeksi Web Mercator. Karena set data mosaik tidak dapat diproyeksikan ulang, Anda dapat melakukan salah satu dari dua hal—baik membuat set data mosaik yang direferensikan dari set data mosaik dalam proyeksi yang diperlukan atau menambahkan fungsi Proyeksi Ulang ke rantai fungsi set data mosaik. Contoh lain penggunaan fungsi ini adalah pada item raster dalam set data mosaik. Saat menggunakan fungsi Raster yang Di-cache, Anda mungkin akan ingin menyisipkan fungsi Proyeksi Ulang sehingga cache dibuat dalam proyeksi baru. Item raster adalah set data mosaik yang dapat di-cache saat pemrosesan intens dan Anda mencoba untuk memublikasikan layanan gambar yang cepat, tanpa melakukan cache keseluruhan layanan gambar.</div>",
		resampleName: "Pengambilan Ulang Sampel",
		resampleSnip: "Mengubah ukuran sel raster.",
		resampleDesc: "Fungsi Pengambilan Ulang Sampel, mengubah ukuran sel, jenis resampling, atau keduanya.<div><br/>Fungsi Pengambilan Ulang Sampel hanya boleh digunakan dengan persyaratan komputasi spesifik; misalnya, saat Anda menghitung angin atau arah magnitudo arus yang memerlukan proses pengambilan ulang sampel dari resolusi sumber.</div>",
		roundDownName: "Bulatkan ke Bawah",
		roundDownSnip: "Mengembalikan nilai bilangan bulat lebih rendah selanjutnya, hanya diwakili sebagai titik mengambang, untuk setiap sel dalam sebuah raster.",
		roundDownDesc: "Fungsi Bulatkan ke Bawah mengembalikan bilangan bulat lebih rendah selanjutnya sebagai nilai titik mengambang, untuk setiap piksel dalam sebuah raster.",
		roundUpName: "Bulatkan ke Atas",
		roundUpSnip: "Mengembalikan nilai bilangan bulat lebih tinggi selanjutnya, hanya diwakili sebagai titik mengambang, untuk setiap sel dalam sebuah raster.",
		roundUpDesc: "Bulatkan ke Atas mengembalikan bilangan bulat lebih tinggi selanjutnya sebagai nilai titik mengambang, untuk setiap piksel dalam sebuah raster.",
		segmentMeanShiftName: "Perubahan Rata-Rata Segmen",
		segmentMeanShiftSnip: "Mengelompokkan piksel sekitar dengan karakteristik spektral yang sama ke dalam segmen-segmen.",
		segmentMeanShiftDesc: "Fungsi ini mengidentifikasi objek, fitur, atau segmen dalam citra Anda dengan mengelompokkan piksel berdekatan bersama yang memiliki karakter spektral dan karakteristik spasial. Anda dapat mengendalikan jumlah penghalusan spasial dan spektral untuk membantu mendapatkan fitur yang diinginkan.",
		s1RadiometricCalibrationName: "Kalibrasi Radiometrik Sentinel-1",
		s1RadiometricCalibrationSnip: "Melakukan jenis kalibrasi radiometrik yang berbeda pada data Sentinel-1.",
		s1RadiometricCalibrationDesc: "Fungsi raster ini melakukan tiga kalibrasi berbeda untuk set data Sentinel 1, termasuk beta nought dan gamma, serta menghasilkan output set data yang dikalibrasi. Tujuan kalibrasi SAR adalah menyediakan citra di mana nilai piksel dapat secara langsung terkait ke radar hamburan balik adegan. Meskipun citra SAR yang belum dikalibrasi sudah memadai untuk penggunaan kualitatif, gambar SAR yang dikalibrasi penting untuk penggunaan data SAR secara kuantitatif.<div><br/>Pemrosesan data SAR umum, yang menghasilkan gambar Level 1, tidak mencakup perbaikan radiometrik dan bias radiometrik yang signifikan akan tetap ada. Karena itu, diperlukan untuk menerapkan perbaikan radiometrik terhadap gambar SAR sehingga nilai piksel gambar benar-benar mewakili radar hamburan balik permukaan yang dicerminkan. Perbaikan radiometrik juga diperlukan untuk perbandingan gambar SAR yang diperoleh dengan sensor-sensor berbeda, atau diakuisisi dari sensor yang sama pada waktu berbeda, dalam mode yang berbeda, atau diproses dengan pemroses yang berbeda.</div>",
		s1ThermalNoiseRemovalName: "Penghapusan Derau Termal Sentinel-1",
		s1ThermalNoiseRemovalSnip: "Menghapus derau termal dari data Sentinel-1.",
		s1ThermalNoiseRemovalDesc: "Perbaikan derau termal dapat diterapkan terhadap produk-produk Single Look Complex (SLC) Sentinel-1 Level-1 juga produk-produk Ground Range Detection (GRD) Level-1 yang sudah diperbaiki. Operator juga dapat menghapus perbaikan ini berdasarkan anotasi produk untuk memperkenalkan ulang sinyal derau yang dihapus untuk menghasilkan produk asli. Anotasi produk akan diperbarui menurut hal ini untuk memungkinkan penerapan ulang perbaikan. ",
		setNullName: "Tetapkan ke Nol",
		setNullSnip: "Tetapkan ke Nol mengatur lokasi sel yang ditentukan ke NoData berdasarkan kriteria yang ditentukan. Fungsi ini mengembalikan NoData jika evaluasi kondisional adalah benar, dan mengembalikan nilai yang ditentukan oleh raster lainnya jika ini adalah salah.",
		setNullDesc: "Fungsi Tetapkan ke Nol menetapkan piksel yang diidentifikasi ke NoData, berdasarkan kriteria spesifik. Fungsi ini mengembalikan NoData jika evaluasi kondisional adalah true (1) dan mengembalikan nilai yang ditentukan dalam Raster False jika evaluasi kondisional adalah false (0). Kriteria ini ditentukan oleh output fungsi matematika logika, yang mana akan menjadi Raster input.",
		shadedReliefName: "Relief Berbayang",
		shadedReliefSnip: "Membuat representasi permukaan multiband, dikodekan warna, dan 3D dengan posisi relatif matahari yang diperhitungkan untuk memberikan bayangan terhadap gambar.",
		shadedReliefDesc: "Fungsi Relief Berbayang membuat representasi 3D medan berwarna yang dibuat dengan menggabungkan gambar dari metode yang dikodekan elevasi dan bayangan gunung. Fungsi ini menggunakan properti ketinggian dan azimut untuk menentukan posisi matahari.<div><br/></div>",
		sinHName: "SinH",
		sinHSnip: "Menghitung sinus sel hiperbolik dalam sebuah raster.",
		sinHDesc: "Fungsi tersebut menghitung sinus hiperbolik piksel dalam sebuah raster.",
		sinName: "Sin",
		sinSnip: "Menghitung sinus sel dalam sebuah raster.",
		sinDesc: "Fungsi tersebut menghitung sinus piksel dalam sebuah raster.",
		slopeName: "Kemiringan",
		slopeSnip: "Menghitung tingkat perubahan dari satu nilai piksel ke sekitarnya.",
		slopeDesc: "Fungsi raster ini menghitung kelerengan yang mana merupakan tingkat perubahan elevasi untuk setiap model elevasi digital (DEM) sel. Ini adalah derivatif DEM yang pertama.<div><br/>Fungsi ini menggunakan fungsi atan() yang diakselerasikan. Ini enam kali lebih cepat, dan galat pendekatan selalu kurang dari 0,3 derajat.</div>",
		speckleName: "Bintik",
		speckleSnip: "Menyediakan filter untuk menghilangkan derau pada set data synthetic aperture radar.",
		speckleDesc: "Bintik adalah derau frekuensi tinggi dalam data radar. Gambar yang dihasilkan oleh sistem synthetic aperture radar (SAR) rentan terkena efek bintik karena pemrosesan sinyal yang tersebar dan interferensi gelombang elektromagnetik yang tersebar dari permukaan atau objek. Fungsi Bintik ini memfilter set data radar berbintik dan memperhalus derau seraya mempertahankan fitur tepian atau tajam dalam gambar.",
		spectralConversionName: "Konversi Spektral",
		spectralConversionSnip: "Menerapkan matriks ke gambar multiband.",
		spectralConversionDesc: "Fungsi Konversi Spektral menerapkan sebuah matriks pada gambar multiband untuk memengaruhi nilai warna output.<div><br/>Beberapa sensor tidak mengumpulkan band biru karena rasio sinyal ke derau yang rendah. Ini bisa digunakan, misalnya, untuk mengonversi gambar infra merah dengan warna salah ke gambar warna alami semu.</div>",
		squareRootName: "Akar Kuadrat",
		squareRootSnip: "Menghitung akar kuadrat nilai sel dalam sebuah raster.",
		squareRootDesc: "Fungsi Akar Kuadrat menghitung akar kuadrat nilai piksel dalam sebuah raster.",
		squareName: "Kuadrat",
		squareSnip: "Menghitung kuadrat nilai sel dalam sebuah raster.",
		squareDesc: "Kuadrat menghitung nilai kuadrat piksel dalam sebuah raster.",
		statisticsHistogramName: "Statistik dan Histogram",
		statisticsHistogramSnip: "Tentukan atau kaitkan statistik dan histogram.",
		statisticsHistogramDesc: "Fungsi Statistik dan Histogram digunakan untuk menentukan statistik dan histogram raster. Anda dapat memasukkan fungsi ini di akhir rantai fungsi untuk menjelaskan statistik dan histogram template fungsi raster (RFT). Ini mungkin diperlukan untuk mengontrol tampilan default hasil pemrosesan, khususnya saat menentukan rantai fungsi yang berisi banyak fungsi.<div><br/>Anda dapat menentukan statistik dengan mengetikkan nilai atau mengimpor dari set data raster atau file XML. Histogram hanya dapat ditentukan dengan mengimpor sebuah file.</div>",
		statisticsName: "Statistik",
		statisticsSnip: "Menghitung statistik titik fokus untuk setiap piksel gambar berdasarkan titik fokus yang ditentukan di sekitar.",
		statisticsDesc: "Fungsi Statistik menghitung statistik titik fokus untuk setiap piksel gambar berdasarkan titik fokus sekitar yang ditentukan.<div><br/>Fungsi Statistik dapat digunakan untuk mengisi garis hilang dalam gambar. Garis hilang seringkali disebabkan oleh masalah dalam sensor yang mana data tidak dikumpulkan. Ini terjadi dalam sensor seperti Enhanced Thematic Mapper Plus (ETM+) Landsat 7. Data yang hilang menyebabkan masalah untuk analisis dan juga saat mencari citra. Hanya ada sedikit yang dapat dilakukan saat menggunakan citra untuk analisis, namun, jika ada gambar yang bertumpang tindih, maka ini dapat digunakan di tempat konten yang hilang. Hal yang sama dapat dilakukan jika citra digunakan untuk visualisasi. Namun, tidak selalu ada gambar ekstra untuk mengisi konten yang tidak ada, jadi ini harus diturunkan dari data yang ada.</div>",
		streamLinkName: "Tautan Aliran",
		streamLinkSnip: "Menetapkan nilai unik ke bagian-bagian jaringan linear raster antara persimpangan.",
		streamLinkDesc: "Fungsi Tautan Aliran global menetapkan nilai unik ke bagian jaringan linear raster antar persimpangan.<div><br/>Tautan adalah bagian dari saluran aliran yang menghubungkan dua persimpangan yang berurutan, sebuah persimpangan dan outlet, atau persimpangan dan drainase yang dibagi. Dalam hidrologi, segmen aliran ini disebut jangkauan. Sebuah persimpangan terkait dengan titik tuang dan membantu menggambarkan batas daerah aliran sungai atau daerah aliran anak sungai.</div>",
		stretchName: "Bentangkan",
		stretchSnip: "Meningkatkan gambar dengan menyesuaikan rentang nilai yang ditampilkan. Ini tidak mengubah nilai piksel yang mendasarinya. Jika piksel memiliki nilai di luar rentang yang ditentukan, maka ini akan muncul baik sebagai nilai minimum atau maksimum.",
		stretchDesc: "Fungsi Bentangkan meningkatkan gambar dengan mengubah properti seperti kecerahan, kontras, dan gamma melalui beberapa jenis bentangan. Fungsi ini menggunakan statistik dari raster dalam set data mosaik, karena itu, jika Anda menggunakan fungsi ini, maka Anda harus memastikan statistik telah dihitung.<div><br/>Jenis bentangan menentukan bentangan histogram yang akan diterapkan ke raster untuk meningkatkan penampilannya. Membentangkan akan meningkatkan penampilan data dengan menyebarkan nilai piksel sepanjang histogram dari nilai minimum ke maksimum yang ditentukan menurut kedalaman bitnya. </div>",
		swathName: "Petak",
		swathSnip: "Menginterpolasi dari data grid tidak teratur atau petak.",
		swathDesc: "Beberapa set data netCDF atau HDF menyimpan geolokasinya sebagai array dengan ruang yang tidak teratur. Saat menambahkan set data ini ke set data mosaik, fungsi petak mengambil data grid yang tidak teratur dan melakukan resampling sehingga setiap piksel memiliki ukuran seragam dan persegi.<div><br/>Saat menambahkan variabel dari netCDF atau HDF ke set data mosaik, fungsi ini akan secara otomatis memverifikasikannya jika data tersusun secara teratur. Jika tidak, fungsi petak diberlakukan secara otomatis untuk mengonversi raster tidak teratur ke dalam titik-titik, kemudian raster grid teratur. Anda dapat mengubah metode interpolasi dan ukuran sel menggunakan fungsi raster petak. Untuk data raster dengan ruang teratur, tidak akan ada interpolasi yang diberlakukan, data akan dibaca sebagaimana adanya.</div>",
		tanHName: "TanH",
		tanHSnip: "Menghitung tangen sel hiperbolik dalam sebuah raster.",
		tanHDesc: "Fungsi tersebut menghitung tangen hiperbolik piksel dalam sebuah raster.",
		tanName: "Tan",
		tanSnip: "Menghitung tangen sel dalam sebuah raster.",
		tanDesc: "Fungsi tersebut menghitung tangen piksel dalam sebuah raster. ",
		tasseledCapName: "Tasseled Cap (Kauth-Thomas)",
		tasseledCapSnip: "Menghitung tingkat vegetasi, tingkat basah, dan kecerahan. Teknik ini bergantung pada koefisien yang harus dihitung secara spesifik untuk sensor.",
		tasseledCapDesc: "Transformasi Tasseled Cap (Kauth-Thomas) dirancang untuk menganalisis dan memetakan fenomenologi vegetasi dan perubahan pengembangan daerah urban yang terdeteksi oleh berbagai sistem sensor satelit. Ini dikenal sebagai transformasi Tasseled Cap karena bentuk distribusi grafis data. Transformasi ini menyediakan alasan untuk pola yang ditemukan dalam data Landsat MSS lahan pertanian sebagai fungsi siklus hidup tanaman. Pada dasarnya, ketika tanaman tumbuh dari benih hingga siap panen, ada peningkatan bersih dalam infra merah dekat dan penurunan pantulan merah berdasarkan warna tanah<div><br/>Pemanfaatan transformasi ini telah diperluas dari memantau tanaman menjadi menganalisis dan memetakan vegetasi untuk mendukung berbagai penerapan seperti kehutanan, pengelolaan vegetasi industri, pemetaan dan pengelolaan ekosistem, inventarisasi dan pemantauan untuk penyerapan karbon dan kredit, pengembangan daerah urban, dan banyak lagi. Fungsi ini juga telah diperluas dari mendukung Landsat MSS hingga menyertakan sistem satelit populer lainnya seperti Landsat TM, Landsat ETM+, Landsat 8, IKONOS, QuickBird, WorldView-2, dan sensor multispektral RapidEye.</div>",
		timesName: "Kali",
		timesSnip: "Mengalikan nilai dua raster atas dasar sel demi sel.",
		timesDesc: "Fungsi Kali mengalikan nilai dua raster atas dasar piksel demi piksel.",
		transposeBitsName: "Transposisi Bit",
		transposeBitsSnip: "Membuka bit dari piksel input, dan memetakannya ke bit yang ditentukan dalam piksel output. Tujuan fungsi ini adalah memanipulasi bit dari beberapa input, seperti misalnya produk band kualitas Landsat 8.",
		transposeBitsDesc: "Fungsi Transposisi Bit membuka bit piksel input dan memetakannya ke bit yang ditentukan dalam piksel output. Tujuan fungsi ini adalah untuk memanipulasi bit dari beberapa input, misalnya produk band kualitas Landsat 8.",
		unitConversionName: "Konversi Unit",
		unitConversionSnip: "Mengubah nilai dari satu unit pengukuran ke unit pengukuran lain.",
		unitConversionDesc: "Fungsi ini mengonversi piksel dari satu unit ke unit lainnya. Fungsi ini mendukung konversi jarak, kecepatan, dan suhu.",
		vectorFieldName: "Kolom Vektor",
		vectorFieldSnip: "Menampilkan set data dengan kedua magnitudo (u) dan arah (v) sebagai anak panah tempat magnitudo disajikan oleh ukuran dan arah direpresentasikan oleh sudut anak panah.",
		vectorFieldDesc: "Fungsi Kolom Vektor digunakan untuk menggabungkan dan mengonversi dua raster ke dalam raster dua band, baik yang memiliki jenis data Arah Magnitudo atau jenis data U-V.<div><br/>Nilai U terkadang disebut sebagai kecepatan zona, dan nilai V terkadang disebut sebagai kecepatan meridional.</div>",
		viewshed2Name: "Area Pandang",
		viewshed2Snip: "Menentukan lokasi permukaan raster yang terlihat bagi seperangkat fitur pengamat, menggunakan metode geodesik.",
		viewshed2Desc: "Fungsi Area Pandang menentukan lokasi permukaan raster yang terlihat pada seperangkat fitur pengamat menggunakan metode geodesik<div><br/>Visibilitas setiap pusat piksel ditentukan oleh uji line-of-sight antara target dan setiap pengamat. Jika pengamat dapat melihat target di pusat piksel, maka piksel ini akan dianggap terlihat. Alat ini selalu memperhitungkan lengkungan bumi saat visibilitas ditentukan.</div>",
		watershedName: "Daerah Aliran Sungai",
		watershedSnip: "Menentukan area yang berkontribusi di atas seperangkat sel dalam sebuah raster",
		watershedDesc: "Fungsi Daerah Aliran Sungai global menentukan area kontribusi di atas seperangkat piksel dalam sebuah raster. Daerah Aliran Sungai digambarkan dari raster arah aliran yang mengidentifikasi arah aliran dari setiap piksel.",
		weightedOverlayName: "Overlay Berbobot",
		weightedOverlaySnip: "Melakukan overlay beberapa raster menggunakan skala dan bobot pengukuran umum masing-masing sesuai kepentingannya.",
		weightedOverlayDesc: "Fungsi ini memungkinkan Anda untuk melakukan overlay beberapa raster menggunakan skala dan bobot pengukuran umum masing-masing sesuai kepentingannya.",
		weightedSumName: "Jumlah Berbobot",
		weightedSumSnip: "Melakukan pembobotan dan menambahkan array raster atas dasar sel demi sel.",
		weightedSumDesc: "Fungsi Jumlah Berbobot memungkinkan Anda untuk melakukan overlay beberapa raster, mengalikan masing-masing dengan bobot yang diberikan, dan menjumlahkannya.",
		windchillName: "Kesejukan Angin",
		windchillSnip: "Menggabungkan suhu udara sekitar dan kecepatan angin untuk memperhitungkan faktor kesejukan angin.",
		windchillDesc: "Fungsi Kesejukan Angin bermanfaat untuk mengidentifikasi kondisi musim dingin yang berbahaya, yang mana bergantung pada waktu paparan terhadap elemen, dapat mengakibatkan radang dingin atau bahkan hipotermia. Kesejukan angin adalah cara untuk mengukur seberapa tingkat dingin yang dirasakan individu saat angin diperhitungkan bersama dengan suhu dingin. Makin cepat kecepatan angin, maka akan semakin cepat tubuh kehilangan panas dan seseorang akan makin merasa dingin.",
		zonalRemapName: "Pemetaan Ulang Zona",
		zonalRemapSnip: "Memetakan ulang piksel dalam raster berdasarkan zona yang ditentukan dalam raster lainnya dan pemetaan nilai bergantung zona yang ditentukan dalam tabel.",
		zonalRemapDesc: "Fungsi ini memungkinkan Anda untuk memetakan ulang piksel dalam raster berdasarkan zona yang ditentukan dalam raster lainnya dan pemetaan nilai bergantung zona yang ditentukan dalam tabel.",
		zonalStatisticsName: "Statistik Zona",
		zonalStatisticsSnip: "Menghitung statistik pada nilai raster dalam zona set data lainnya.",
		zonalStatisticsDesc: "Fungsi tersebut menghitung statistik pada nilai raster dalam zona set data lainnya. Zona ditentukan sebagai semua area dalam input yang memiliki nilai sama. Area ini tidak perlu berdampingan. Saat zona dan input nilai kedua raster memiliki resolusi yang sama, maka keduanya akan digunakan secara langsung. Jika resolusi berbeda, sebuah pengambilan ulang sampel internal dilakukan untuk menjadikan resolusi cocok sebelum operasi zona dilakukan.",
		flowLengthName: "Panjang Aliran",
		flowLengthSnip: "Menghitung jarak hulu atau hilir, atau jarak tertimbang di sepanjang jalur aliran setiap sel.",
		flowLengthDesc: "Ini adalah fungsi raster global. Fungsi ini membuat layer raster dari jarak hulu atau hilir, atau jarak tertimbang di sepanjang jalur aliran setiap sel.<div><br/>Penggunaan utama dari fungsi Panjang Aliran adalah untuk menghitung panjang jalur aliran terpanjang dalam daerah aliran tertentu. Ukuran ini sering digunakan untuk menghitung waktu konsentrasi daerah aliran. Ini dilakukan menggunakan opsi Hulu. Fungsi ini juga digunakan untuk membuat diagram area-berjarak dari peristiwa limpasan dan curah hujan hipotetis menggunakan raster bobot sebagai impedansi untuk pergerakan kelerengan menurun.</div>",
		streamOrderName: "Urutan Aliran",
		streamOrderSnip: "Menetapkan urutan numerik pada segmen raster yang merepresentasikan cabang-cabang dari jaringan linear.",
		streamOrderDesc: "Ini adalah fungsi raster global. Fungsi ini membuat layer raster yang menetapkan urutan numerik pada segmen raster yang merepresentasikan cabang-cabang dari jaringan linear.<div><br/>Output fungsi Urutan Aliran akan memiliki kualitas yang lebih tinggi jika layer raster aliran input dan layer raster arah aliran input berasal dari permukaan yang sama. Jika raster aliran berasal dari set data aliran yang dirasterisasi, output mungkin tidak dapat digunakan karena, atas dasar sel-demi-sel, arah tidak akan sesuai dengan lokasi sel aliran. Hasil dari fungsi Akumulasi Aliran dapat digunakan untuk membuat jaringan aliran raster dengan menerapkan nilai ambang batas untuk memilih sel dengan aliran yang terakumulasi tinggi. Misalnya, sel yang memiliki lebih dari 100 sel yang mengalir ke dalamnya digunakan untuk menentukan jaringan aliran. Gunakan fungsi Con atau Tetapkan ke Nol untuk membuat raster jaringan aliran di mana nilai akumulasi aliran 100 atau lebih besar menuju padanya, dan sisanya diletakkan di latar belakang (NoData). Jaringan aliran yang dihasilkan dapat digunakan pada fungsi Urutan Aliran. Fungsi ini hanya mendukung layer raster arah aliran input D8. Arah aliran D8 dapat dibuat menggunakan fungsi Arah Aliran dan dijalankan dengan arah aliran default tipe D8.</div>",
		snapPourPointName: "Tangkap Titik Tuang",
		snapPourPointSnip: "Tangkap titik tuang ke sel akumulasi aliran tertinggi dalam jarak yang ditentukan",
		snapPourPointDesc: "Ini adalah fungsi raster global. Fungsi ini menangkap titik tuang ke sel akumulasi aliran tertinggi dalam jarak yang ditentukan<div><br/>Fungsi Tangkap Titik Tuang digunakan untuk memastikan pemilihan titik dengan aliran yang terakumulasi tinggi saat menggambarkan daerah aliran sungai menggunakan fungsi Daerah Aliran Sungai. Tangkap Titik Tuang akan mencari dalam jarak tangkapan di sekitar titik tuang yang ditentukan untuk sel dengan aliran terakumulasi tertinggi dan memindahkan titik tuang ke lokasi tersebut. Outputnya adalah layer raster bilangan bulat jika lokasi titik tuang asli telah diambil ke lokasi dengan aliran terakumulasi yang lebih tinggi.</div>",
		sinkName: "Titik Temu",
		sinkSnip: "Membuat raster yang mengidentifikasi semua titik temu atau area drainase internal",
		sinkDesc: "Ini adalah fungsi raster global. Fungsi ini membuat layer raster yang mengidentifikasi semua titik temu atau area drainase internal. Titik temu adalah sel atau set sel yang terhubung secara spasial dengan arah aliran yang tidak dapat ditetapkan salah satu dari delapan nilai yang valid dalam raster arah aliran. Ini dapat terjadi ketika semua sel yang berdekatan lebih tinggi dari sel pemrosesan atau ketika dua sel mengalir satu sama lain, menciptakan loop dua sel.<div><br/>Fungsi Titik Temu hanya mendukung layer raster arah aliran input D8. Arah aliran D8 dapat dibuat menggunakan fungsi Arah Aliran dan dijalankan dengan arah aliran default tipe D8. Output dari fungsi Titik Temu adalah raster bilangan bulat, dengan masing-masing titik temu diberi nilai unik. Nilai unik ini memiliki rentang antara satu dan jumlah total titik temu. Misalnya, jika jumlah total titik temu adalah 1000, rentang nilai unik dari 1 hingga 1000.</div>",
		aggregateName: "Agregat",
		aggregateSnip: "Menghasilkan raster versi resolusi diturunkan.",
		aggregateDesc: "Fungsi Agregat membuat sampel ulang raster input ke resolusi yang lebih kasar berdasarkan strategi agregasi yang telah ditentukan. Setiap sel output berisi Jumlah, Minimum, Maksimum, Rata-rata, atau Median dari sel input yang dicakup oleh jangkauan sel tersebut.<div><br/>Anda bisa menentukan faktor yang digunakan untuk mengalikan ukuran sel raster input. Sebagai contoh, nilai faktor sel sebesar 3 akan menghasilkan output di mana ukuran selnya tiga kali lebih besar daripada raster input. Anda dapat menentukan cara menangani jangkauan output jika jumlah baris atau kolom dalam input tersebut bukan kelipatan faktor sel yang tepat. Secara default, batas atas dan kanan akan diperluas untuk mencakup jangkauan spasial yang lebih besar daripada raster inputnya, untuk memastikan semua sel input diproses. Atau, batas atas dan kanan dapat dikurangi untuk mencakup jangkauan yang lebih kecil, sehingga jumlah baris dan kolom yang diproses adalah kelipatan tepat dari faktor selnya. Anda bisa menentukan bagaimana sel-sel NoData akan ditangani oleh perhitungan agregasi. Mekanisme defaultnya adalah bahwa sel NoData input yang termasuk dalam jangkauan spasial dari sel yang lebih besar di raster output akan diabaikan ketika menentukan nilai sel output itu. Atau, Anda dapat menentukan bahwa jika bahkan ada sel NoData input tunggal dalam jangkauan spasial sel output, sel itu akan menjadi NoData dalam raster output.</div>",
		ccdcName: "Analisis CCDC",
		ccdcSnip: "Mengevaluasi perubahan nilai piksel dari waktu ke waktu menggunakan algoritme Continuous Change Detection and Classification (CCDC) dan menghasilkan hasil model.",
		ccdcDesc: "Fungsi Analisis CCDC mengevaluasi perubahan nilai piksel dari waktu ke waktu menggunakan algoritme Continuous Change Detection and Classification (CCDC) dan menghasilkan raster multidimensional yang berisi hasil model. Ini hanya didukung bersamaan dengan fungsi Deteksi Perubahan Menggunakan Analisis Perubahan dalam template fungsi raster. Untuk menghasilkan output raster, hubungkan fungsi Analisis CCDC dengan fungsi Deteksi Perubahan Menggunakan Analisis Perubahan, simpan sebagai template fungsi raster, dan jalankan Analisis Raster dengan template fungsi.<div><br/>Fungsi ini menggunakan algoritme Continuous Change Detection and Classification (CCDC) untuk mengevaluasi perubahan nilai piksel dari waktu ke waktu untuk tumpukan gambar. Dalam rangkaian waktu citra optik atau turunan citra (misalnya, NDVI), nilai piksel dapat berfluktuasi karena beberapa penyebab: 1. Perubahan musiman -- Perubahan nilai piksel mencerminkan perubahan vegetasi karena variabilitas suhu dan curah hujan musiman. Di Belahan Bumi Utara, misalnya, kami berharap untuk melihat kepadatan vegetasi hijau yang lebih tinggi di musim panas dibandingkan dengan musim dingin; 2. Perubahan bertahap -- Perubahan nilai piksel mencerminkan tren vegetasi atau air permukaan karena variabilitas iklim atau praktik pengelolaan lahan jangka panjang. Misalnya, tanah gundul secara bertahap dapat meningkat di suatu kawasan karena penurunan curah hujan jangka panjang; dan 3. Perubahan mendadak -- Perubahan nilai piksel mencerminkan perubahan tutupan lahan yang terjadi secara tiba-tiba karena adanya penggundulan hutan, pengembangan daerah urban, bencana alam, dan sebagainya. Algoritme CCDC mengidentifikasi ketiga tipe perubahan dengan tujuan utama mengidentifikasi perubahan mendadak. Regresi harmonik dan model tren disesuaikan dengan data untuk memperkirakan perubahan musiman dan bertahap, dan simpangan mendadak model tren adalah indikasi perubahan mendadak.<div><br/>Algoritme CCDC pada awalnya dirancang untuk Landsat TM, Landsat ETM, Landsat ETM+ dan Reflektan-Permukaan data Landsat OLI atau data Suhu Kecerahan. Namun, fungsi Deteksi Perubahan Menggunakan Analisis Perubahan bersama dengan fungsi ini akan mendeteksi perubahan citra multiband dari sensor yang didukung, serta turunan citra band tunggal seperti indeks band. Misalnya, Anda dapat melakukan deteksi perubahan berkelanjutan pada raster Normalize Difference Vegetation Index (NDVI), karena perubahan mendadak dalam NDVI dapat menjadi indikasi penggundulan hutan.</div>",
		computeChangeName: "Hitung Perubahan",
		computeChangeSnip: "Menghitung perbedaan antara dua set data raster mutlak atau kontinu.",
		computeChangeDesc: "Fungsi Hitung Perubahan dapat digunakan untuk menghitung perbedaan antara dua raster yang diklasifikasikan untuk analisis perubahan tutupan lahan, atau dapat digunakan untuk menguji perubahan antara dua raster kontinu band tunggal seperti elevasi, suhu, tutupan kanopi, dan sebagainya.",
		detectChangeName: "Deteksi Perubahan Menggunakan Analisis Perubahan",
		detectChangeSnip: "Menghasilkan layer raster yang berisi informasi perubahan piksel menggunakan raster analisis perubahan output.",
		detectChangeDesc: "Fungsi <div>Deteksi Perubahan Menggunakan Analisis Perubahan menghasilkan layer raster yang berisi informasi tanggal perubahan piksel menggunakan raster analisis perubahan. Raster analisis perubahan harus dihasilkan oleh alat Analisis Perubahan Menggunakan CCDC atau alat Analisis Perubahan Menggunakan LandTrendr, atau fungsi raster Analisis CCDC atau fungsi raster Analisis LandTrendr.</div><br><div>Fungsi raster ini dapat digabungkan dengan fungsi raster Analisis CCDC atau fungsi raster Analisis LandTrendr dalam template fungsi raster. Untuk menghasilkan output raster, hubungkan output fungsi Analisis CCDC atau Analisis LandTrendr ke fungsi Deteksi Perubahan Menggunakan Analisis Perubahan, simpan sebagai template fungsi raster, dan jalankan Analisis Raster dengan template. Parameter </div><br><div><strong>Jenis Perubahan</strong> menunjukkan informasi yang dihasilkan. Informasi diekstrak dari raster analisis perubahan. Saat menjalankan fungsi ini pada output dari fungsi/alat CCDC, Anda dapat memilih dari opsi berikut:</div><ul><li><strong>Waktu perubahan terakhir</strong>--Tanggal dan waktu terbaru saat piksel ditandai sebagai diubah.</li><li><strong>Waktu perubahan paling awal</strong>--Waktu dan tanggal paling awal saat piksel ditandai sebagai diubah.</li><li><strong>Waktu perubahan terbesar</strong>--Waktu dan tanggal saat perubahan yang dihitung adalah yang paling signifikan untuk piksel.</li><li> <strong>Jumlah perubahan</strong>--Jumlah total perubahan piksel.</li></ul><div>Saat menjalankan fungsi ini di output dari fungsi/alat LandTrendr, tersedia opsi tambahan berikut:</div><ul><li><strong>Waktu perubahan terpanjang</strong>--Tanggal saat piksel ditandai sebagai diubah, di awal atau akhir periode perubahan terpanjang.</li><li><strong>Waktu perubahan terpendek</strong>--Tanggal saat piksel ditandai sebagai diubah, di awal atau akhir periode perubahan terpendek.</li><li><strong>Waktu perubahan tercepat</strong>--Tanggal saat piksel ditandai sebagai diubah, di awal atau akhir periode perubahan tercepat.</li><li><strong>Waktu perubahan paling lambat</strong>--Tanggal saat piksel ditandai sebagai diubah, di awal atau akhir periode perubahan paling lambat.</li></ul><div>Raster output adalah raster multiband, dengan setiap band berisi informasi perubahan yang bergantung pada jenis perubahan yang dipilih dan jumlah perubahan maksimal yang ditentukan. Misalnya, jika <strong>Jenis Perubahan</strong> diatur ke <strong>Waktu Perubahan Paling Awal</strong> dan <strong>Jumlah Perubahan Maksimal</strong> diatur menjadi 2, fungsi menghitung dua tanggal paling awal saat perubahan terjadi sepanjang rangkaian waktu untuk setiap piksel. Hasilnya adalah raster dengan band pertama berisi tanggal perubahan paling awal per piksel, dan band kedua berisi tanggal perubahan paling awal kedua per piksel.</div><br><div>Saat menerapkan fungsi ini di output dari alat LandTrendr, Anda dapat memilih apakah akan mengekstrak tanggal yang menandai awal perubahan atau akhir perubahan menggunakan parameter <strong>Tanggal Segmen</strong>. Misalnya, untuk memahami awal perubahan terbaru di rangkaian waktu, atur <strong>Jenis Perubahan</strong> ke <strong>Waktu perubahan terbaru</strong> dan <strong>Tanggal Segmen</strong> ke <strong>Awal segmen</strong>.</div><br><div>Gunakan parameter pemfilteran untuk mengekstrak tanggal perubahan yang lebih spesifik dari raster analisis perubahan Anda:</div><ul><li><strong>Filter menurut tahun</strong>--Identifikasi perubahan yang terjadi dalam periode waktu tertentu, misalnya, jika Anda mencari perubahan yang terjadi di lanskap selama lima tahun kekeringan.</li><li><strong>Filter menurut durasi</strong>--Identifikasi perubahan yang terjadi selama rentang tahun tertentu, misalnya, jika Anda hanya mencari perubahan mendadak yang terjadi selama 1 atau 2 tahun. Anda dapat menghitung durasi yang diinginkan dalam menggunakan rumus <strong>tahun berakhir - tahun mulai +1</strong>. Kesenjangan dalam rangkaian waktu akan disertakan.</li><li><strong>Filter menurut besarnya</strong>--Identifikasi perubahan pada besaran tertentu, misalnya, jika Anda hanya mencari perubahan besar dalam indeks vegetas NDVI. Besaran adalah nilai absolut, sehingga nilai minimal dan maksimal tidak boleh negatif. Untuk menentukan perubahan arah, gunakan parameter <strong>Ubah Arah</strong>.</li></ul>",
		distanceAccumulationName: "Akumulasi Jarak",
		distanceAccumulationSnip: "Menghitung akumulasi jarak untuk setiap sel ke sumber, yang memungkinkan jarak garis lurus, jarak biaya, jarak permukaan sebenarnya, serta faktor biaya vertikal dan horizontal.",
		distanceAccumulationDesc: "Akumulasi Jarak menghitung jarak ke setiap lokasi di area studi ke sumber terdekat, atau paling tidak sumber biaya. Jika hanya sumber yang disediakan untuk input, maka jarak garis lurus dihitung untuk setiap lokasi di area studi. Jika sumber dan barrier digunakan sebagai input, maka Akumulasi Jarak menghitung jarak garis lurus di sekitar barrier. Untuk raster sumber maupun pembatasan raster, nilai latar belakang harus NoData, sementara sumber dan pembatasan diwakili dengan nilai sel yang valid. Nilai yang valid termasuk nol. <div><br/>Ketika raster permukaan disediakan sebagai input, jarak permukaan aktual antar sel dihitung. Untuk melakukan analisis biaya menggunakan Akumulasi Jarak, maka permukaan biaya diperlukan. Jika permukaan biaya disediakan, hasilnya adalah akumulasi raster jarak biaya. Ketika faktor horizontal dan vertikal disediakan, maka arah dipertimbangkan seraya biaya diakumulasikan. Ada empat karakteristik sumber yang dapat digunakan. Karakteristik ini, yang bisa berupa sumber atau penggerak dari sumber, dikendalikan oleh parameter khusus: 1. Akumulasi Awal: mengatur biaya awal sebelum pergerakan dimulai. 2. Akumulasi maksimum: menentukan berapa banyak biaya yang dapat diakumulasikan oleh sumber sebelum mencapai batasnya. 3. Pengganda yang akan diterapkan pada biaya: menentukan mode perjalanan atau besarnya pada sumbernya. 4. Arah perjalanan: mengidentifikasi apakah penggerak dimulai dari sumber dan berpindah ke lokasi non-sumber, atau, dimulai di lokasi non-sumber dan berpindah balik ke sumber.<div><br/>Secara default, hasil dari Akumulasi Jarak adalah band tunggal, yang merupakan akumulasi raster jarak. Namun, band kedua juga dapat dibuat, band arah belakang.  Band ini menunjukkan dari setiap lokasi di area studi arah mana yang harus ditempuh untuk sampai ke sumber yang paling murah.  Kedua band akan dibutuhkan untuk menentukan jalur optimal dalam area studi. Untuk menghasilkan jalur, pertama-tama gunakan fungsi Ekstrak Band untuk mengekstraksi raster akumulasi jarak dan raster arah belakang. Gunakan layer ini sebagai input ke fungsi Biaya Jalur. Dalam fungsi tersebut, gunakan raster akumulasi jarak sebagai input Raster Biaya Jarak, dan raster arah belakang sebagai input Raster Biaya Tautan Balik.</div>",
		distanceAllocationName: "Alokasi Jarak",
		distanceAllocationSnip: "Menghitung alokasi jarak untuk setiap sel ke sumber yang disediakan berdasarkan jarak garis lurus, jarak biaya, jarak permukaan sebenarnya, serta faktor biaya vertikal dan horizontal.",
		distanceAllocationDesc: "Alokasi Jarak menghitung sumber mana setiap lokasi di area studi dialokasikan. Jika hanya sumber yang disediakan untuk input, maka lokasi dialokasikan menggunakan jarak garis lurus ke sumber terdekat. Jika sumber maupun pembatasan digunakan sebagai input, maka Alokasi Jarak menghitung jarak garis lurus di sekitar pembatasan untuk menentukan sumber mana yang beralokasi dengan lokasi. Untuk raster sumber maupun pembatasan raster, nilai latar belakang harus NoData, sementara sumber dan pembatasan diwakili dengan nilai sel yang valid. Nilai yang valid termasuk nol.<div><br/>Untuk melakukan analisis biaya menggunakan Alokasi Jarak, maka diperlukan permukaan biaya. Jika permukaan biaya disediakan, maka hasilnya adalah raster alokasi berdasarkan biaya akumulatif, bukan pada jarak garis lurus. Ketika faktor horizontal dan vertikal disediakan, maka arah dipertimbangkan seraya biaya diakumulasikan. Ketika sebuah raster permukaan disediakan sebagai input, maka jarak permukaan aktual yang tercakup saat melewati antar sel dihitung ketika alokasi ditentukan. Ada empat karakteristik sumber yang dapat digunakan. Karakteristik ini, yang bisa berupa sumber atau penggerak dari sumber, dikendalikan oleh parameter khusus: 1. Akumulasi Awal: mengatur biaya awal sebelum pergerakan dimulai. 2. Akumulasi Maksimum: menentukan berapa banyak biaya yang dapat diakumulasikan oleh sumber sebelum mencapai batasnya. 3. Pengganda yang akan diterapkan pada biaya: menentukan mode perjalanan atau besarnya pada sumbernya. 4. Arah perjalanan: mengidentifikasi apakah penggerak dimulai dari sumber dan berpindah ke lokasi non-sumber, atau, dimulai di lokasi non-sumber dan berpindah balik ke sumber.<div><br/>Secara default, hasil dari Alokasi Jarak adalah satu band tunggal, yang merupakan raster alokasi jarak. Memeriksa opsi Boolean Hasilkan baris dan kolom sumber sebagai band tambahan dalam output akan menghasilkan raster multiband yang terdiri dari tiga band. Band pertama adalah band alokasi jarak, band kedua berisi indeks baris, dan band ketiga berisi indeks kolom. Indeks-indeks ini mengidentifikasi lokasi sel sumber yang merupakan jarak biaya terakumulasi paling sedikit. Indeks baris sumber dan indeks kolom sumber dapat digunakan bersama untuk melakukan pemetaan intensitas. Jika Anda menanyakan lokasi di area studi Anda di seluruh band dua dan tiga, Anda akan tahu baris dan kolom dari sumber biaya terendah untuk lokasi itu.</div>",
		eucBackDirectionName: "Arah Balik Euclidean",
		eucBackDirectionSnip: "Menghitung, untuk setiap sel, arah, dalam derajat, ke sel lingkungan di sepanjang jalur terpendek balik ke sumber terdekat sambil menghindari pembatasan.",
		eucBackDirectionDesc: "Fungsi Arah Balik Euclidean menghasilkan raster titik mengambang terus menerus yang mewakili arah dalam derajat balik ke sumber terdekat dengan tetap menghindari pembatasan, jika pembatasan disediakan.<div><br/>Input ke Arah Balik Euclidean adalah sumber yang akan dihitung arahnya. Input opsional adalah raster yang mewakili pembatasan dalam area studi. Untuk raster sumber maupun pembatasan raster, nilai latar belakang harus NoData, sementara sumber dan pembatasan diwakili dengan nilai yang valid. Nilai yang valid termasuk nol. Secara default, perhitungan akan memproses jangkauan sumber dan barrier, ditambah 2 baris dan kolom. Jika analisis hanya diperlukan dalam jarak tertentu dari sumber, maka parameter Jarak Maksimum dapat digunakan. Arah Balik Euclidean mendukung metode Planar dan metode Geodesik dalam perhitungan. Perhitungan metode Planar akan dilakukan pada bidang datar yang diproyeksikan menggunakan sistem koordinat Kartesius 2D. Perhitungan metode Geodesik akan dilakukan pada ellipsoid, yang berarti bahwa terlepas dari input atau proyeksi output, hasilnya tidak berubah.<div><br/>Hasil dari fungsi Arah Balik Euclidean dapat digunakan bersama dengan hasil dari fungsi Jarak Euclidean untuk menentukan jalur terpendek dari lokasi dalam area studi yang balik ke sumbernya. Arah Balik Euclidean dan hasil Jarak Euclidean digunakan dalam fungsi Biaya Jalur bersama dengan tujuan untuk menghasilkan jalur terpendek.</div>",
		expandName: "Perluas",
		expandSnip: "Memperluas zona yang dipilih dari raster dengan zona dengan jumlah sel tertentu.",
		expandDesc: "Dengan fungsi global Perluas, Anda dapat menggeneralisasi, atau menyederhanakan, raster dengan memperbesar zona tertentu. Anda juga dapat mengontrol jumlah generalisasi yang akan terjadi.<div><br/>Zona yang Anda pilih akan bertambah besar dengan memperluas ke zona lain. Secara konseptual, Nilai Zona yang dipilih dapat dilihat sebagai zona latar depan, sementara nilai lainnya tetap menjadi zona latar belakang. Zona latar depan dapat diperluas ke zona latar belakang.<div><br/>Jumlah generalisasi dapat dikontrol dengan parameter Jumlah Sel. Secara default, nilai ini adalah 1, yang berarti zona yang dipilih akan semakin besar dengan jumlah yang sesuai dengan ukuran satu sel. Untuk meningkatkan derajat generalisasi, Anda dapat menentukan nilai yang lebih besar untuk parameter ini. Secara konseptual, ini seperti menjalankan alat sebanyak jumlah yang ditentukan, dengan hasil yang dijalankan sebelumnya menjadi input ke iterasi berikutnya.</div>",
		trendAnalysisName: "Buat Tren",
		trendAnalysisSnip: "Memperkirakan tren untuk setiap piksel di sepanjang dimensi untuk satu atau lebih variabel dalam raster multidimensional.",
		trendAnalysisDesc: "<div>Fungsi ini dapat digunakan untuk menyesuaikan data sepanjang garis tren linear, harmonik, dan polinomial, atau dapat digunakan untuk mendeteksi tren menggunakan uji Mann-Kendall atau Seasonal-Kendall.</div><br><div>Raster tren output yang dihasilkan dengan fungsi ini digunakan sebagai input ke fungsi <strong>Prediksi Menggunakan Tren</strong>.</div><br><div>Uji Mann-Kendall dan Seasonal-Kendall digunakan untuk menentukan ada tidaknya tren monotonik pada data. Fungsi ini bersifat nonparametrik, yang berarti fungsinya tidak mengasumsikan distribusi data spesifik. Uji Mann-Kendall tidak mempertimbangkan korelasi serial atau efek musiman. Jika datanya bersifat musiman, maka uji Seasonal-Kendall lebih tepat.</div><br><div>Jika alat digunakan untuk melakukan uji Mann-Kendall atau Seasonal-Kendall, maka outputnya adalah raster lima band sebagai berikut:</div><ul><li>Band 1 = Kemiringan Sen</li><li>Band 2 = nilai-p</li><li>Band 3 = Skor Mann-Kendall (S)</li><li>Band 4 = S Variance</li><li>Band 4 = Variasi S</li><li>Band 5 = Skor Z</li></ul><div>Output uji Mann-Kendall atau Seasonal-Kendall dapat digunakan untuk menentukan piksel mana di rangkaian waktu multidimensional Anda yang memiliki tren signifikan dari segi statistik. Anda dapat menggunakan informasi ini bersama dengan analisis tren linear, harmonik, atau polinomial untuk mengekstrak tren yang signifikan di dalam rangkaian waktu Anda. Anda dapat membuat mask yang mengikutsertakan piksel dengan nilai-p yang signifikan, menerapkan mask ke raster multidimensional, dan menggunakan raster multidimensional yang di-mask ini sebagai input ke alat untuk melakukan analisis tren linear, harmonik, atau polinomial.</div><br><div>Ada tiga opsi garis tren untuk memasang tren ke nilai variabel sepanjang dimensi: linear, polinomial, dan harmonik.</div><br><div>Untuk analisis tren linear, outputnya adalah raster tiga band sebagai berikut:</div><ul><li>Band 1 = Kemiringan</li><li>Band 2 = Titik Potong</li><li>Band 3 = Root Mean Square Error (RMSE) atau kesalahan di sekitar garis yang sesuai</li></ul><div>Untuk analisis tren polinomial, jumlah band dalam output berdasarkan urutan polinomial. Pemasangan polinomial urutan kedua menghasilkan raster lima band sebagai berikut:</div><ul><li>Band 1 = Polynomial_2</li><li>Band 2 = Polynomial_1</li><li>Band 3 = Polynomial_0</li><li>Band 4 = RMSE</li></ul><div>Pemasangan polinomial urutan ketiga menghasilkan raster lima band sebagai berikut:</div><ul><li>Band 1 = Polynomial_3</li><li>Band 2 = Polynomial_2</li><li>Band 3 = Polynomial_1</li><li>Band 4 = Polynomial_0</li><li>Band 5 = RMSE</li></ul><div>Untuk analisis harmonik, jumlah band dalam output bergantung pada frekuensi harmonik. Jika frekuensi diatur ke 1, outputnya adalah raster lima band sebagai berikut:</div><ul><li>Band 1 = Kemiringan</li><li>Band 2 = Titik Potong</li><li>Band 3 = Harmonic_sin1</li><li>Band 4 = Harmonic_cos1</li><li>Band 5 = RMSE</li></ul><div>Jika frekuensi diatur ke 2, outputnya adalah raster tujuh band sebagai berikut:</div><ul><li>Band 1 = Kemiringan</li><li>Band 2 = Titik Potong</li><li>Band 3 = Harmonic_sin1</li><li>Band 4 = Harmonic_cos1</li><li>Band 5 = Harmonic_sin2</li><li>Band 6 = Harmonic_cos2</li><li>Band 7 = RMSE</li></ul><div>Parameter <strong>Panjang Siklus</strong> untuk analisis tren harmonik digunakan untuk menunjukkan jumlah dan panjang siklus yang ingin dilihat dalam data Anda sepanjang hari atau tahun. Misalnya, jika Anda menginginkan data Anda melalui dua siklus variasi dalam satu tahun, lamanya siklus adalah 182,5 hari atau 0,5 tahun. Jika Anda mengumpulkan data suhu setiap tiga jam, dan ada satu siklus variasi per hari, lamanya siklus adalah satu hari.</div><br><div>Paramater <strong>Freqkuensi</strong> untuk analisis tren harmonik digunakan untuk mendeskripsikan model harmonik agar sesuai dengan data. Jika frekuensi diatur ke 1, kombinasi kurva linear dan harmonik urutan pertama akan digunakan untuk menyesuaikan model. Jika frekuensinya 2, kombinasi kurva linear, kurva harmonik urutan pertama, dan kurva harmonik urutan kedua akan digunakan untuk menyesuaikan data. Jika frekuensinya 3, kurva harmonik urutan ketiga tambahan akan digunakan untuk memodelkan data, dan seterusnya.</div><br><div>Statistik kesesuaian model dapat dihasilkan sebagai output opsional. Root mean-square error (RMSE), R-kuadrat, dan nilai-p kemiringan tren dapat dihitung dan disimbolkan. Menyimbolkan layer raster tren output menggunakan simbologi <strong>RGB</strong> dan menentukan statistik sebagai band merah, hijau, dan biru.</div><br>",
		spectralUnmixingName: "Pemisahan Spektral Linear",
		spectralUnmixingSnip: "Melakukan klasifikasi subpiksel dan menghitung kelimpahan fraksional dari jenis tutupan lahan yang berbeda untuk masing-masing piksel.",
		spectralUnmixingDesc: "Fungsi Pemisahan Spektral Linear menghitung penutup fraksional untuk masing-masing piksel yang berisi beberapa jenis tutupan lahan. Ini menghasilkan layer multiband, di mana setiap band sesuai dengan kelimpahan fraksi dari setiap kelas tutupan lahan. Misalnya, Anda dapat menggunakannya untuk melakukan klasifikasi tutupan lahan pada gambar multispektral untuk mengidentifikasi vegetasi fotosintesis, tanah kosong, dan vegetasi mati atau nonfotosintesis.<div><br/>Urutan raster multiband output mengikuti urutan profil spektral input. Jumlah kelas tidak bisa melebihi jumlah band di raster input. Misalnya, Anda tidak dapat mengekstraksi informasi sekitar lebih dari 8 kelas dari raster 8-band.</div>",
		multidimensionalFilterName: "Filter Multidimensional",
		interpolateRasterByDimensionFunctionName: "Interpolasi Raster berdasarkan Dimensi",
		interpolateRasterByDimensionFunctionSnip: "Interpolasi raster multidimensional pada nilai dimensi tertentu menggunakan irisan yang berdekatan.",
		interpolateRasterByDimensionFunctionDesc: "<p>Fungsi ini memungkinkan Anda memperkirakan nilai piksel untuk irisan dimensi yang tidak ditentukan dalam raster multidimensional. Misalnya, jika Anda memiliki kumpulan data yang berisi suhu laut pada permukaan dan 100 meter di bawah permukaan laut dan Anda ingin memperkirakan suhu pada 50 meter di bawah permukaan laut, Anda dapat menggunakan fungsi ini untuk mendapatkan perkiraan pada kedalaman tersebut menggunakan penentuan dimensi Berdasarkan Nilai.</p><p>Anda juga dapat menurunkan sampel kumpulan data bulanan menjadi kumpulan data harian menggunakan penentuan dimensi Berdasarkan Interval dan menetapkan nilai parameter Langkah sebagai 1 dan nilai parameter Unit sebagai Hari.</p><p>Gunakan penentuan dimensi Berdasarkan Raster Target untuk memperkirakan nilai Raster Target.</p>",
		multidimensionalFilterSnip: "Membuat layer raster dari set data raster multidimensional atau layer raster multidimensi dengan mengiris data sepanjang variabel dan dimensi yang telah ditentukan.",
		multidimensionalFilterDesc: "Filter Multidimensi membuat layer raster multidimensional dengan memfilter dan mengekstraksi subset variabel dari raster multidimensi. Misalnya, Anda memiliki set data multidimensional yang berisi 30 tahun data curah hujan bulanan, dan Anda hanya ingin mengekstraksi data untuk setiap Januari untuk melihat bagaimana perubahan curah hujan untuk bulan itu.<div><br/>Gunakan parameter Penentuan Dimensi untuk memotong dimensi menggunakan interval, nilai, atau rentang nilai. Sebagai contoh, jika Anda memiliki data salinitas laut dalam periode 10 tahun, yang dikumpulkan setiap bulan dan setiap kedalaman 2 meter hingga 500 meter, Anda dapat menggunakan opsi penentuan dimensi yang berbeda untuk skenario berikut. Skenario 1: Ekstrak data salinitas untuk bulan Januari selama periode 10 tahun. Pilih Berdasarkan Nilai, atur Dimensi ke StdTime, dan atur Nilai ke Januari. Skenario 2: Iris data salinitas pada rentang kedalaman dari 0 hingga 150 meter. Pilih Berdasarkan Rentang, atur Dimensi ke StdZ, dan atur Nilai Minimum ke -150 dan Nilai Maksimum ke 0. Skenario 3: Ekstrak data salinitas selama 10 hari pertama setiap Januari selama periode 10 tahun. Pilih Berdasarkan Iterasi, atur Dimensi ke StdTime, atur Mulai dari iterasi pertama dan Akhir iterasi pertama ke awal dan akhir periode iterasi yang bersangkutan, atur Langkah ke 1, dan atur Unit ke Tahun.</div>",
		multidimensionalRasterName: "Raster Multidimensional",
		multidimensionalRasterSnip: "Menambahkan data multidimensional ke peta sebagai layer raster multidimensional.",
		multidimensionalRasterDesc: "Fungsi Raster Multidimensional menambahkan data multidimensi ke peta sebagai layer raster multidimensi. Fungsi ini berguna saat melakukan alur kerja analisis raster menggunakan rantai fungsi.<div><br/>Set data raster multidimensional yang didukung termasuk netCDF, GRIB, HDF, dan CRF Esri. Set data mosaik multidimensional juga didukung.</div>",
		optimalPathAsRasterName: "Jalur Optimal Sebagai Raster",
		optimalPathAsRasterSnip: "Menghitung biaya jalur terendah dari sumber ke tujuan.",
		optimalPathAsRasterDesc: "Fungsi global ini menghasilkan sebuah raster output yang mencatat jalur optimal atau jalur dari lokasi pilihan ke sel sumber terdekat ditentukan dalam biaya permukaan akumulatif dalam hal biaya jarak.<div><br/>Satu atau lebih fungsi biaya berbobot (Akumulasi Jarak atau Alokasi Jarak) umumnya harus dijalankan sebelum menjalankan fungsi Jalur Optimal Sebagai Raster untuk membuat akumulasi jarak input dan raster arah belakang. Ini adalah layer raster input wajib ke fungsi Jalur Optimal. Nilai pada jalur optimal output mewakili jumlah jalur di lokasi tertentu. Dalam banyak kasus, jalur mengikuti rute yang sama, meninggalkan sumber dan kemudian menyimpang untuk mengarah ke tujuan yang berbeda. Misalnya, nilai satu menunjukkan bahwa hanya ada satu jalur optimal di lokasi tertentu, sedangkan nilai lima berarti di lokasi itu ada lima jalur optimal yang melewati sel itu di area studi.<div><br/>Data tujuan input harus berupa layer raster. Set sel tujuan terdiri dari semua sel dalam raster input yang memiliki nilai valid. Sel yang memiliki nilai NoData tidak termasuk dalam set. Nilai nol dianggap sebagai tujuan yang sah. Raster tujuan dapat dibuat menggunakan alat ekstraksi. Jika Anda memiliki fitur tujuan atau sumber, Anda dapat mengonversinya menjadi raster menggunakan fungsi Rasterisasi Fitur. Gunakan akumulasi jarak atau raster arah belakang sebagai input Raster ke fungsi rasterisasi. Ini akan memastikan fitur tersebut dirasterisasi menggunakan ukuran sel, jangkauan, dan referensi spasial yang sama dengan raster lain yang masuk ke fungsi Jalur Optimal Sebagai Raster. Fungsi Jalur Optimal Sebagai Raster juga dapat digunakan untuk menurunkan jalur dengan resistansi paling rendah ke model elevasi digital (Digital Elevation Model/DEM). Dalam hal ini, gunakan DEM untuk raster akumulasi jarak input dan output dari fungsi Arah Aliran untuk Raster arah belakang.</div>",
		trendName: "Prediksi Menggunakan Tren",
		trendSnip: "Menghitung layer raster multidimensional yang diperkirakan menggunakan raster tren output dari fungsi Buat Tren atau alat geoprocessing Buat Raster Tren.",
		trendDesc: "Fungsi Prediksi Menggunakan Tren menghitung layer raster multidimensional yang diperkirakan menggunakan raster tren output dari fungsi Buat Tren atau alat geoprocessing Buat Raster Tren.",
		rasterCollectionName: "Proses Koleksi Raster",
		rasterCollectionSnip: "Memproses setiap irisan dalam raster multidimensional atau setiap item dalam raster mosaik. Fungsi ini juga dapat menggabungkan beberapa irisan menjadi irisan tunggal.",
		rasterCollectionDesc: "Fungsi Proses Koleksi Raster memproses setiap irisan dalam raster multidimensional atau setiap item dalam raster mosaik. Fungsi ini juga dapat menggabungkan beberapa irisan menjadi irisan tunggal.<div><br/>Fungsi ini memproses setiap irisan dalam raster multidimensional atau raster mosaik menggunakan template fungsi raster. Fungsi ini mendukung opsi berikut: 1. Tentukan template fungsi raster untuk Fungsi Item. Misalnya, Anda memiliki set data mosaik yang berisi data 20 tahun citra Landsat dan Anda ingin menghitung NDVI untuk setiap scene dalam rangkaian waktu. Untuk Fungsi Item, tentukan template fungsi raster yang berisi fungsi raster NDVI. 2. Tentukan template fungsi raster untuk Fungsi Agregasi. Misalnya, Anda memiliki raster multidimensional yang berisi data 10 tahun suhu harian dan Anda ingin menghitung suhu maksimum untuk setiap tahun. Di Fungsi Agregasi, tentukan template fungsi raster yang berisi fungsi Statistik Sel, dengan operasi diatur ke Maksimum. Di bawah Definisi Agregasi, atur Dimensi ke StdTime, atur Jenis ke Kata Kunci Interval, dan atur Interval Kata Kunci ke Tahunan. Harap dicatat bahwa jika set data mosaik input bukan multidimensional, fungsi agregasi tidak akan memenuhi penentuan agregasi. Fungsi agregasi akan menggabungkan semua item atau setiap grup menjadi satu jika item tersebut ditentukan dalam template fungsi agregasi. Untuk informasi lebih lanjut tentang penggunaan grup dalam set data mosaik, lihat Menggunakan Item Set Data Mosaik di Template Fungsi Raster. 3. Tentukan template fungsi raster untuk Fungsi Pemrosesan. Fungsi atau rantai fungsi dalam template ini digunakan untuk menampilkan raster yang baru diproses. Misalnya, tentukan template fungsi raster yang berisi fungsi Peta Warna untuk mengubah cara layer raster yang diproses ditampilkan. Harap dicatat bahwa jika input adalah raster multidimensional, fungsi pemrosesan diterapkan pada irisan tampilan saat ini. Jika inputnya adalah layer mosaik atau set data mosaik, fungsi pemrosesan diterapkan ke raster mosaik menggunakan metode Pertama untuk menyelesaikan tumpang tindih. 3. Tentukan template untuk kombinasi ketiga fungsi tersebut. Misalnya, Anda memiliki set data mosaik yang berisi citra Landsat rangkaian waktu dan Anda ingin menghasilkan gambar komposit NDVI maksimum. Untuk Fungsi Item, tentukan template fungsi raster yang berisi fungsi raster NDVI. Untuk Fungsi Agregasi, tentukan template fungsi raster yang berisi fungsi Statistik Sel, dengan operasi diatur ke Maksimum. Untuk Fungsi Pemrosesan, tentukan template fungsi raster yang berisi fungsi Peta Warna. Harap dicatat bahwa urutan pemrosesan fungsi mengikuti urutan parameter input. Misalnya, Fungsi Item akan diproses terlebih dahulu.</div>",
		randomName: "Acak",
		randomSnip: "Membuat raster dengan nilai piksel acak yang diambil dari distribusi pseudorandom. Beberapa distribusi dan generator nomor acak didukung.",
		randomDesc: "Fungsi Acak membuat raster dengan nilai piksel acak yang dapat digunakan dalam template fungsi raster atau set data mosaik.<div><br/>Sementara banyak fungsi bekerja pada satu atau lebih raster input, fungsi Acak tidak memerlukan raster input. Ini berarti bahwa ia berperilaku lebih seperti set data raster daripada suatu fungsi, jadi perhatian khusus harus diambil ketika menambahkan atau menghapusnya dari rantai fungsi.</div>",
		shrinkName: "Menyusut",
		shrinkSnip: "Menyusutkan zona yang dipilih dengan jumlah sel tertentu dengan menggantinya dengan nilai sel yang paling sering di lingkungannya.",
		shrinkDesc: "Dengan fungsi Menyusut global, Anda dapat menggeneralisasi, atau menyederhanakan, raster dengan membuat zona tertentu lebih kecil. Anda juga dapat mengontrol jumlah generalisasi yang akan terjadi.<div><br/>Zona yang Anda pilih akan menyusut, atau mengurangi ukurannya, dengan membuat sel-sel dari zona sekitarnya meluas ke dalamnya. Secara konseptual, Nilai Zona yang dipilih dapat dilihat sebagai zona latar depan, sementara nilai lainnya tetap menjadi zona latar belakang. Sel-sel di zona latar depan dapat diganti dengan sel-sel di zona latar belakang. Pulau-pulau tipis di dalam zona, yang dapat dilihat sebagai batas berbagi dengan zona, juga dapat diganti.<div><br/>Jumlah generalisasi dapat dikontrol dengan parameter Jumlah Sel. Secara default, nilai ini adalah 1, yang berarti zona yang dipilih akan menyusut dengan jumlah yang sesuai dengan ukuran satu sel. Untuk meningkatkan derajat generalisasi, Anda dapat menentukan nilai yang lebih besar untuk parameter ini. Secara konseptual, ini seperti menjalankan alat sebanyak jumlah yang ditentukan, dengan hasil yang dijalankan sebelumnya menjadi input ke iterasi berikutnya.</div>",
		trendToRGBName: "Tren Ke RGB",
		trendToRGBSnip: "Mengubah raster tren menjadi raster tiga-band (merah, hijau, dan biru).",
		trendToRGBDesc: "Fungsi Tren Ke RGB mengubah tren raster menjadi raster tiga-band (merah, hijau, dan biru). Raster tren dihasilkan dari fungsi raster Buat Tren atau fungsi raster Analisis CCDC.<div><br/>Fungsi ini berguna untuk memvisualisasikan data koefisien model dari fungsi Buat Tren atau fungsi Analisis CCDC. Kedua fungsi tersebut memperkirakan tren dalam mengubah nilai piksel, tetapi hasil dari fungsi tersebut sulit diinterpretasikan secara langsung.<div><br/>Seperti banyak fungsi raster, Anda mungkin perlu menggunakan Pengaturan Rentang Dinamis (DRA) untuk menampilkan hasil fungsi ini dengan lebih baik.</div>",
		landTrendrName: "Analisis LandTrendr",
		landTrendrSnip: "Mengevaluasi perubahan pada nilai piksel dari waktu ke waktu menggunakan metode deteksi tren gangguan dan pemulihan berbasis Landsat (LandTrendr) dan membuat raster analisis perubahan yang memuat hasil modelnya.",
		landTrendrDesc: "Fungsi raster ini hanya dapat digunakan sebagai input untuk fungsi raster Deteksi Perubahan Menggunakan Analisis Perubahan. Untuk menghasilkan output raster, hubungkan fungsi Analisis LandTrendr ke fungsi Deteksi Perubahan Menggunakan Analisis Perubahan pada template fungsi raster, dan gunakan template tersebut sebagai input di alat geoprocessing Hasilkan Raster Dari Fungsi Raster. Hasilnya adalah raster yang memuat informasi tentang waktu nilai piksel diubah.<div><br>Tujuan fungsi raster ini adalah untuk memperoleh informasi perubahan yang dapat diamati, sehingga citra multidimensi input yang ideal harus memiliki pengamatan yang konsisten sepanjang waktu dan sebaiknya tidak menyertakan gangguan atmosfer atau sensor, awan, atau bayangan awan. Praktik terbaiknya adalah menggunakan data yang telah dinormalisasi dan dapat ditutup menggunakan band QA, misalnya produk Reflektansi Permukaan Koleksi Landsat 1 dengan masker awan.<div><br>Fungsi ini melakukan analisis pada satu gambar per tahun, dan jumlah irisan tahunan harus sama atau lebih dari nilai yang dintentukan pada parameter <strong>Jumlah Minimal Observasi</strong>. Anda disarankan untuk setidaknya memiliki data selama enam tahun.<div><br>Jika Anda memiliki data bulanan, mingguan, atau harian, maka Anda disarankan untuk memilih beberapa gambar dari setiap tahun (utamanya dari musim yang sama), hilangkan awan dan bayangan awannya, dan padukan gambarnya untuk menghasilkan gambar tunggal yang menampilkan hasil pengamatannya. Jika data bulanan, mingguan, atau harian disediakan sebagai raster multidimensional input, fungsinya akan mengidentifikasi satu irisan untuk analisis berdasarkan tanggal yang mendekati waktu yang ditentukan di parameter <strong>Tanggal Snapping</strong>.<div><br>Sebuah fitur di lanskap akan sering memerlukan waktu untuk pulih dari perubahan yang bersifat nonpermanen, misalnya kebakaran hutan atau serangan serangga. Untuk mengontrol tingkat pemulihan yang dapat dikenali oleh model, tetapkan parameter Ambang Batas Pemulihan. Segmen yang berbeda tidak dapat memiliki tingkat pemulihan lebih cepat dari 1/ambang batas pemulihan.<div><br>Pemulihan dari perubahan lanskap dapat terjadi ke arah positif maupun negatif. Misalnya, ketika ada lanskap yang mengalami pengikisan hutan, rangkaian waktu nilai indeks vegetasi akan menampilkan penurunan nilai indeks, dan pemulihan akan menunjukkan peningkatan nilai indeks vegetasi secara bertahap, atau tren pemulihan positif. Tentukan arah tren pemulihan dengan parameter <strong>Pemulihan Memiliki Tren yang Meningkat</strong>.",
		aggregateMultidimensionalName: "Agregasi Multidimensional",
		aggregateMultidimensionalSnip: "Memadukan data variabel raster multidimensional yang ada di suatu dimensi.",
		aggregateMultidimensionalDesc: "Fungsi Agregat Multidimensional membuat layer raster multidimensional dengan memadukan data variabel raster multidimensional yang sudah ada di suatu dimensi.<div><br>Gunakan parameter <strong>Penentuan Dimensi</strong> untuk memfilter data input yang ingin diagregasi. Misalnya, jika Anda memiliki data bulanan selama 30 tahun, tetapi Anda hanya ingin membuat layer agregat untuk 15 tahun pertama, maka Anda dapat menggunakan parameter <strong>Penentuan Dimensi</strong> untuk menentukan tahun yang nantinya diikutsertakan ke dalam analisis.<div><br><ul><li>Ambil data salinitas untuk bulan Januari selama periode 10 tahun. Pilih <strong>Berdasarkan Nilai</strong>, tetapkan <strong>Dimensi</strong> menjadi <strong>StdTime</strong>, dan tetapkan <strong>Nilai</strong> menjadi <strong>Januari</strong>.</li><li>Iris data salinitas pada rentang kedalaman dari 0 hingga 150 meter. Pilih <strong>Berdasarkan Rentang</strong>, tetapkan <strong>Dimensi</strong> menjadi <strong>StdZ</strong>, dan tetapkan <strong>Nilai Minimal</strong> menjadi <strong>-150</strong> dan <strong>Nilai Maksimal</strong> menjadi <strong>0</strong>.</li><li>Ambil data salinitas untuk 10 hari pertama setiap bulan Januari selama periode 10 tahun. Pilih <strong>Berdasarkan Iterasi</strong>, tetapkan <strong>Dimensi</strong> menjadi <strong>StdTime</strong>, atur <strong>Awal iterasi pertama</strong> dan <strong>Akhir iterasi pertama</strong> ke awal dan akhir periode iterasi, tetapkan <strong>Langkah</strong> menjadi <strong>1</strong>, dan tetapkan <strong>Unit</strong> menjadi <strong>Tahun</strong>.</li></ul><div><br>Gunakan parameter <strong>Penentuan Agregasi</strong> untuk memilih dimensi yang akan dinilai dan interval agregasi menggunakan kata kunci, nilai, atau rentang nilai. Misalnya, jika Anda memiliki data suhu permukaan laut selama 30 tahun, yang dikumpulkan setiap hari dan dalam setiap kedalaman 5 meter hingga mencapa 100 meter, Anda dapat menggunakan opsi interval yang berbeda untuk skenario berikut:<div><br><ul><li>Agregasikan data suhu harian menjadi data bulanan, yang hasilnya merupakan raster multidimensi dengan 12 kali irisan, dan setiap irisan adalah agregat setiap bulan dalam sepanjang tahun yang ada. Pilih <strong>Kata Kunci Interval</strong> dan tetapkan kata kunci menjadi <strong>Bulanan Berulang</strong>.</li><li>Kumpulkan data suhu harian menjadi data bulanan dengan hasil raster multidimensi dengan 360 irisan, atau 12 kali irisan per tahun (30 tahun x 12 bulan = 360 irisan). Pilih <strong>Kata Kunci Interval</strong> dan tetapkan kata kunci menjadi <strong>Bulanan</strong>.</li><li>Kumpulkan data suhu bulanan dalam interval 4 bulan. Pilih <strong>Nilai Interval</strong>, tetapkan <strong>Interval Nilai</strong> menjadi 4, dan tetapkan <strong>Unit</strong> menjadi <strong>Bulanan</strong>.</li><li>Kumpulkan data suhu dari 0 hingga 25 meter, lalu dari 25 ke 50 meter, lalu dari 50 ke 100 meter. Pilih <strong>Rentang Interval</strong> dan tentukan kedalaman minimal serta maksimal, yakni <strong>0 25; 25 50; 50 100</strong>.</li></ul>",
		mergeRastersName: "Gabungkan Raster",
		mergeRastersSnip: "Menggabungkan beberapa kumpulan data raster secara spasial, atau dari seluruh variabel dan dimensi.",
		mergeRastersDesc: "Fungsi ini membuat raster gabungan dari daftar raster. Misalnya, jika Anda memiliki kumpulan data mosaik yang memuat data curah hujan bulanan selama 30 tahun dan kumpulan data lain yang memuat data suhu bulanan selama 10 tahun, Anda dapat menggabungkannya menjadi raster multidimensi yang memuat kedua variabel tersebut. <div><br>Jika raster multidimensi input memuat variabel yang berbeda, raster multidimensi output akan memuat semua variabelnya. <div><br>Jika raster multidimensi input memuat dimensi atau nilai dimensi yang berbeda-beda, raster multidimensi output akan menyertakan semua dimensi dan nilai dimensinya. <div><br>Jika raster multidimensi input memuat dimensi dan variabel yang sama, tetapi jangkauan spasial yang berbeda, raster multidimensi output akan menyertakan variabel dan dimensi di seluruh jangkauan spasial yang digabung.<div><br>Fungsi ini juga dapat digunakan ketika Anda memiliki beberapa raster yang ingin Anda tangani sebagai satu item, misalnya ketika menghitung statistik yang sama untuk semua raster, atau ketika menyeimbangkan warna agar Anda tidak perlu menyeimbangkan warna setiap gambar secara terpisah. Fungsi ini bermanfaat ketika menangani citra yang disimpan sebagai ubin terpisah karena batasan ukuran file; dengan demikian, ubin akan dianggap sebagai bagian dari gambar yang sama.",
		boundaryCleanName: "Pembersihan Batas",
		boundaryCleanSnip: "Menghaluskan batas antar zona.",
		boundaryCleanDesc: "<p>Fungsi ini menggeneralisasi, atau menyederhanakan raster dengan menghaluskan batas antar zona. Fungsi ini memberikan opsi untuk mengontrol pengaruh sel zona dalam input terhadap penghalusan dan jumlah penghalusan yang akan diterapkan. Setiap sel input dievaluasi menggunakan delapan sel terdekatnya.</p><p>Proses penghalusan pertama-tama akan mengurutkan sel terdekat menurut prioritas tertentu. Prioritas menentukan zona dari sel terdekat yang dapat mengganti nilai pemrosesan sel dalam output.</p><p>Prioritas dapat didasarkan pada nilai zona atau ukuran zona. Parameter <strong>Urutkan jenis</strong> menentukan jenis pengurutan yang akan digunakan. </p><p>Pengaturan <strong>Jangan urutkan</strong> default menilai prioritas berdasarkan nilai zona. Sel dari zona dengan nilai yang lebih besar akan memiliki prioritas lebih tinggi untuk diperluas ke zona dengan nilai yang lebih kecil.</p><p>Ukuran atau total area zona dapat digunakan untuk mengurutkan prioritas. Dengan pengaturan <strong>Turun</strong>, zona diurutkan menurut ukuran dalam urutan turun. Zona dengan total area yang lebih besar akan memiliki prioritas untuk diperluas ke zona dengan area yang lebih kecil. Dengan pengaturan <strong>Naik</strong>, yang terjadi adalah sebaliknya: zona dengan total area yang lebih kecil akan memiliki prioritas untuk diperluas ke zona dengan total area yang lebih besar.</p><p>Jumlah penghalusan dikontrol oleh parameter <strong>Jalankan perluasan dan penyusutan dua kali</strong>, yang menentukan frekuensi proses perluasan dan penyusutan.</p><p>Jika pengaturan tidak dicentang, proses perluasan dan penyusutan akan dilakukan satu kali. Jika pengaturan dicentang, proses perluasan dan penyusutan akan dilakukan dua kali, sehingga menghasilkan penghalusan tambahan untuk batas zona.</p><p>Jika nilai kedelapan sel terdekat sama dengan sel pemrosesan, maka sel output akan mempertahankan nilai sel input.</p>",
		predictUsingRegressionName: "Prediksi Menggunakan Regresi",
		predictUsingRegressionSnip: "Menghitung raster terprediksi berdasarkan input data raster dan model regresi. Model regresi tersebut merupakan output dari alat geoprocessing raster <strong>Model Train Random Trees Regression</strong>.",
		predictUsingRegressionDesc: "<p>Model regresi didefinisikan dalam file definisi regresi Esri (.ecd). Ini berisi semua informasi untuk kumpulan data tertentu atau sekumpulan kumpulan data, dan model regresi, dan dihasilkan oleh alat geoprocessing raster <strong>Model Train Random Trees Regression</strong>.</p><p>Input dapat berupa raster single band, multiband, atau multidimensi, atau daftar dari jenis ini. Jenis raster input harus sama dengan jenis raster yang dilatih oleh model regresi.</p><ul><li>Ketika input berupa raster multiband, setiap band diperlakukan sebagai variabel prediktor. Band harus dalam urutan yang sama dengan input multiband untuk alat pelatihan model regresi.</li><li>Ketika input berupa raster multidimensi, setiap variabel diperlakukan sebagai variabel prediktor, dan variabel harus single band dan memiliki dimensi waktu. Urutan dan nama variabel harus sama dengan input saat model regresi dilatih. Outputnya berupa raster multidimensional.</li><li>Input dapat berupa daftar item. Jumlah item dan urutan item harus sesuai dengan input saat model regresi dilatih.</li></ul>",
		dimensionalMovingStatisticsName: "Statistik Pergerakan Dimensi",
		dimensionalMovingStatisticsSnip: "Menghitung statistik di jendela yang bergerak pada data multidimensional di sepanjang dimensi yang ditentukan.",
		dimensionalMovingStatisticsDesc: "<p>Fungsi Dimensional Moving Statistics menghitung berbagai statistik dalam jendela yang telah ditentukan sebelumnya untuk semua nilai dimensi di sepanjang dimensi. Fungsi ini mengambil layer raster multidimensional sebagai input dan membuat layer raster multidimensional sebagai output yang memiliki ukuran dimensi yang sama dengan layer input.</p><p>Anda dapat menentukan dimensi yang nilai dimensinya dipertimbangkan selama penghitungan. Secara default, Fungsi ini menghitung sepanjang dimensi non-spasial pertama. Anda juga dapat menentukan ukuran jendela dengan menentukan parameter Jendela Mundur dan Jendela Maju.</p><p>Ketika Jenis Statistik diatur ke Persentil, parameter Nilai Persentil dan Jenis Interpolasi Persentil akan tersedia. Anda dapat menggunakan parameter ini untuk menentukan persentil yang akan dihitung dan memilih jenis interpolasi yang akan digunakan. Saat Jenis Statistik diatur ke Rata-Rata Melingkar, parameter Nilai Bungkus Melingkar menjadi tersedia. Nilai bungkus melingkar digunakan untuk mengonversi nilai linear ke rentang rata-rata melingkar tertentu.</p>",
		terrainFlattenFunctionName: "Meratakan Medan",
		terrainFlattenFunctionSnip: "Mengoreksi distorsi radiometrik pada data synthetic aperture radar (SAR) input yang disebabkan oleh topografi.",
		terrainFlattenFunctionDesc: "<p>Fungsi raster Meratakan Medan mengoreksi distorsi radiometrik pada data synthetic aperture radar (SAR) input yang disebabkan oleh topografi.</p><p>Data radar input harus dikalibrasikan terlebih dahulu ke beta nol. Gunakan alat Terapkan Kalibrasi Radiometrik untuk mengalibrasikan data radar ke beta nought.</p><p>Jika DEM input tidak menjangkau hingga ke seluruh kumpulan data SAR, alat akan menghasilkan output nilai NoData untuk piksel di luar jangkauan DEM untuk output gamma nol, sigma nol, area hamburan, dan distorsi geometrik. Untuk output masker distorsi geometrik, alat akan menghasilkan output nilai yang tidak ditentukan untuk piksel di luar jangkauan DEM.</p><p>DEM input harus berada di dalam sistem koordinat geografis WGS 1984 (EPSG:4326).</p>",
		createColorCompositeFunctionName: "Buat Paduan Warna",
		createColorCompositeFunctionSnip: "Membuat raster three-band dari kumpulan data raster multiband, yang masing-masing band dapat menggunakan kalkulasi aljabar berdasarkan aljabra band.",
		createColorCompositeFunctionDesc: "<p>Fungsi raster Buat Paduan Warna membuat raster three-band dari kumpulan data raster multiband, yang masing-masing band dapat menggunakan kalkulasi aljabar berdasarkan aljabra band.</p><p>Saat menentukan algoritme aritmatika band, Anda dapat memasukkan rumus aljabar satu baris untuk setiap ekspresi untuk membuat output multiband. Operator yang didukung adalah unary, jumlah (+), kurangi (-), kali (*), dan bagi (/).</p><p>Saat menggunakan ID Band dalam ekspresi, identifikasi band dengan menambahkan awalan B atau b di nomor band.</p><p>Kombinasi band yang umum digunakan untuk synthetic aperture radar (SAR) dalam unit linear adalah VV untuk warna merah, VH untuk warna hijau, dan VV/VH untuk warna biru. Jika data input berada dalam bentuk desibel, kombinasi band harus berupa VV untuk warna merah, VH untuk warna hijau, dan VV-VH untuk warna biru.</p>",
		surfaceParametersName: "Munculkan Parameter",
		surfaceParametersSnip: "Tentukan parameter raster permukaan seperti aspek, kemiringan, dan beberapa jenis lengkungan menggunakan metode geodesik.",
		surfaceParametersDesc: "<p>Fitur Parameter Permukaan menentukan parameter sebuah parameter raster permukaan seperti aspek, kemiringan, dan beberapa jenis lengkungan menggunakan metode geodesik.</p><p>Fitur ini dapat digunakan untuk beberapa penerapan berikut:</p><ul><li>Menghitung aspek dan kemiringan menggunakan metode geodesik.</li><li>Menghitung jenis lengkungan yang berbeda dari raster permukaan input, contohnya, <strong>lengkungan Tangensial (kontur normal)</strong> yang menkarakteristikkan konvergensi dan divergensi topografis dari aliran di atas permukaan.</li></ul>",
		leastCostCorridorName: "Koridor dengan Biaya Terendah",
		leastCostCorridorSnip: "Menghitung jumlah dua raster jarak biaya akumulatif dengan opsi untuk menerapkan batasan berdasarkan biaya persentase atau akumulatif.",
		leastCostCorridorDesc: "<p>Raster input harus berupa akumulasi jarak dan output raster arah balik dari fungsi <strong>Akumulasi Jarak</strong> atau <strong>Alokasi Jarak</strong>. Ini harus berdasarkan pada jarak biaya, dan pengaturan parameter yang sama harus digunakan saat membuat layer untuk setiap sumber. Tidak ada parameter yang terhubung dalam perihal arah (faktor horizontal, faktor vertikal, dan arah perjalanan) yang boleh digunakan dalam pembuatan raster ini.</p><p>Nilai di raster koridor output merupakan jumlah biaya akumulatif untuk mencapai lokasi yang ditentukan dengan unit yang sama dengan raster jarak biaya akumulatif input.</p><p>Jika nilai <strong>Ambang Batas</strong> yang ditentukan lebih besar dari biaya akumulatif maksimal saat dua raster akumulasi jarak dijumlahkan, raster koridor output akan mencakup area yang sama dengan raster akumulatif input.</p><p>Jika nilai ambang batas yang ditentukan kurang dari nilai minimal di raster koridor, pesan peringatan akan dikembalikan, dan raster output akan dikosongkan.</p><p>Raster koridor output bisa berisi sel dengan biaya akumulasi yang sedikit lebih besar dari nilai ambang batas. Ini berasal dari raster arah balik yang menggunakan sel yang menerapkan biaya yang sedikit lebih tinggi daripada ambang batas untuk menghubungkan sel yang terputus dari koridor.</p>",
		geometricMedianName: "Median Geometrik",
		geometricMedianSnip: "Fungsi Median Geometrik menghitung median geometrik di semua piksel dalam satu rangkaian waktu citra multiband.",
		geometricMedianDesc: "<p>Fungsi ini mengurangi derau dan pencilan dalam citra serangkaian waktu dengan menghitung piksel median geometrik untuk setiap barisan piksel di tumpukan gambar. Algoritma menjaga hubungan spektral antarpita dalam spektral piksel, sehingga output-nya dapat digunakan dalam analisis, seperti indeks vegetasi.</p><p>Awan dan bayangan harus ditutupi menggunakan pita QA dataset sebelum menerapkan fungsi ini.</p><p>Jika gambar input berupa titik mengambang, seperti pantulan permukaan dengan nilai antara 0 dan 1, nilai epsilon 0,001 harusnya dapat memproduksi hasil berkualitas.</p>"
	},
	rfxArgs: {
		rasterName: "Raster",
		colorSchemeTypeName: "Jenis Skema Warna",
		colormapName: "Peta Warna",
		colormapNameName: "Nama Peta Warna",
		colorRampName: "Gradasi Warna",
		contrastOffsetName: "Offset Kontras",
		brightnessOffsetName: "Offset Kecerahan",
		methodName: "Metode",
		bandNamesName: "Nama Band",
		bandWavelengthsName: "Panjang Gelombang Band",
		bandIdsName: "ID Band",
		missingBandActionName: "Tindakan Band Hilang",
		conversionParametersName: "Parameter Konversi",
		hillshadeTypeName: "Jenis Bayangan Gunung",
		azimuthName: "Azimut",
		altitudeName: "Ketinggian",
		slopeTypeName: "Penskalaan",
		zFactorName: "Faktor Z",
		PSPowerName: "Daya Ukuran Piksel",
		PSZFactorName: "Faktor Ukuran Piksel",
		removeEdgeEffectName: "Nonaktifkan interpolasi piksel tepi default",
		fromUnitName: "Dari Unit",
		toUnitName: "Ke Unit",
		rasterTypeName: "Jenis",
		minName: "Output Minimal",
		maxName: "Output Maksimal",
		minPercentName: "Pemotongan Persen Minimal",
		maxPercentName: "Pemotongan Persen Maksimal",
		numberOfStandardDeviationName: "Jumlah dari simpangan baku",
		sigmoidStrengthLevelName: "Tingkat Kekuatan Sigmoid",
		estimateStatsHistogramName: "Estimasikan Statistik",
		DRAName: "Penyesuaian Rentang Dinamis",
		statisticsName: "Statistik",
		histogramsName: "Histogram",
		statisticsHistogramName: "Tentukan Statistik dan Histogram",
		computeGammaName: "Gamma Otomatis",
		useGammaName: "Gunakan Gamma",
		gammaName: "Gamma",
		inputNamesName: "Nama",
		expressionName: "Ekspresi",
		cellsizeTypeName: "Jenis Ukuran Sel",
		extentTypeName: "Jenis Jangkauan",
		classifierDefinitionFileName: "File Definisi Input",
		raster1Name: "Raster1",
		raster2Name: "Raster2",
		raster3Name: "Raster3",
		trueRasterName: "Raster Benar",
		falseRasterName: "Raster Salah",
		noDataInterpretationName: "Interpretasi NoData",
		noDataValuesName: "Nilai NoData",
		includedRangesName: "Rentang yang Disertakan",
		curvatureTypeName: "Jenis Lengkungan",
		rastersName: "Raster",
		attributeTableName: "Tabel",
		attributeTableTypeName: "Jenis Tabel",
		rowsName: "Jumlah Baris",
		columnsName: "Jumlah Kolom",
		kernelName: "Kernel",
		mirrorEdgesName: "Tepi Cermin",
		influencesName: "Pengaruh",
		fieldsName: "Kolom",
		remapsName: "Petakan Ulang Tabel",
		evalFromName: "Skala Evaluasi Dari",
		evalToName: "Skala Evaluasi Hingga",
		weightsName: "Berat",
		DEMName: "DEM",
		shortRangeIDWRadiusName: "Radius IDW Rentang Pendek",
		maxVoidWidthName: "Lebar Kosong Maks",
		sigmaGaussianName: "Penghalusan Adaptif",
		contourTypeName: "Jenis Kontur",
		zBaseName: "Dasar Z",
		numberOfContoursName: "Jumlah Kontur",
		contourIntervalName: "Interval Kontur",
		nthContourLineInBoldName: "ContourLine Utara Tercetak Tebal",
		featureClassName: "Fitur Input",
		classIndexFieldName: "Kolom",
		resolveOverlapMethodName: "Atasi Metode Tumpang Tindih",
		resamplingTypeName: "Jenis Pengambilan Sampel Ulang",
		inputCellsizeName: "Ukuran Sel Input",
		outputCellsizeName: "Ukuran Sel Output",
		pointFeatureClassName: "Titik Sumber",
		maxGrowthRadiusFieldName: "Kolom Radius Pertumbuhan Maks",
		similarityThresholdFieldName: "Kolom Ambang Batas Kesamaan",
		fillValueFieldName: "Isi Kolom Nilai",
		spectralDetailName: "Detail Spektrum [1..20]",
		spatialDetailName: "Detail Spasial [1..20]",
		minNumPixelsPerSegmentName: "Ukuran Segmen Minimal dalam Piksel",
		boundariesOnlyName: "Hanya batas segmen",
		statisticsTypeName: "Jenis Statistik",
		fillNoDataOnlyName: "Hanya isi piksel NoData",
		inputDataTypeName: "Jenis Data Input",
		angleReferenceSystemName: "Sistem Referensi Sudut",
		outputDataTypeName: "Jenis Data Output",
		inputSamplePointFeatureClassName: "Sampel Input",
		valueFieldName: "Kolom Nilai",
		rasterInfoName: "Info Raster",
		interpolationMethodName: "Metode Interpolasi",
		radiusName: "Radius",
		radianceGainValuesName: "Perolehan Sinar",
		radianceBiasValuesName: "Bias Sinar",
		reflectedGainValuesName: "Perolehan Reflektans",
		reflectedBiasValuesName: "Bias Reflektans",
		sunElevationName: "Elevasi Matahari (derajat)",
		albedoName: "Albedo",
		scaleFactorName: "Faktor Skala",
		offsetName: "Offset",
		thresholdTypeName: "Jenis Ambang Batas",
		thresholdsName: "Ambang Batas",
		undefinedClassName: "Kelas yang Tidak Ditentukan",
		minValueName: "Min",
		maxValueName: "Maks",
		operationName: "Operasi",
		clippingTypeName: "Jenis Pemotongan",
		clippingGeometryName: "Geometri Pemotongan / Raster",
		extentName: "Tingkat Output",
		useInputFeatureGeometryName: "Gunakan fitur input untuk geometri pemotongan",
		remapDefinitionTypeName: "Petakan Ulang Jenis Definisi",
		inputRangeName: "Rentang Input",
		outputValuesName: "Nilai Output",
		noDataRangeName: "Rentang NoData",
		inputFieldName: "Kolom Input",
		outputFieldName: "Kolom Output",
		inputMaxFieldName: "Kolom Maks Input (opsional)",
		remapTableTypeName: "Petakan Ulang Jenis Tabel",
		allowUnmatchedName: "Izinkan Nilai Piksel yang Tidak Cocok",
		changeMissingValuesToNoDataName: "Ubah nilai yang hilang ke NoData",
		visibleBandIDName: "ID Band yang Terlihat",
		infraredBandIDName: "ID Band Inframerah",
		scientificOutputName: "Output Ilmiah",
		bandIndexesName: "Indeks Band",
		constantName: "Konstan",
		weightName: "Berat",
		minimumName: "Minimum",
		maximumName: "Maksimum",
		sourceDataName: "Raster Sumber",
		sourceFieldName: "Kolom Sumber",
		costRasterName: "Biaya Raster",
		maxDistanceName: "Jarak Maksimal",
		valueRasterName: "Raster Nilai",
		costMultiplierName: "Pengganda untuk Diterapkan ke Biaya",
		startCostName: "Biaya Awal",
		accumCostResistanceRateName: "Tingkat Resistansi Biaya Akumulatif",
		capacityName: "Kapasitas",
		travelDirectionName: "Arah Perjalanan",
		cellSizeName: "Ukuran Sel",
		populationFieldName: "Kolom Populasi",
		areaUnitsName: "Unit Area",
		outputValueTypeName: "Nilai Sel Output",
		barriersName: "Penghalang Input",
		destinationDataName: "Raster Tujuan",
		destinationFieldName: "Kolom Tujuan",
		pathTypeName: "Jenis Jalur",
		observerFeaturesName: "Fitur Pengamat",
		analysisMethodName: "Metode Analisis",
		analysisTypeName: "Jenis Analisis",
		verticalErrorName: "Kesalahan Vertikal",
		refractivityCoefficientName: "Koefisien Refraktivitas",
		surfaceOffsetName: "Offset Permukaan",
		observerElevationName: "Elevasi Pengamat",
		observerOffsetName: "Offset Pengamat",
		innerRadiusName: "Radius Dalam",
		innerRadiusIs3DDistanceName: "Radius Dalam adalah Jarak 3D",
		outerRadiusName: "Radius Luar",
		outerRadiusIs3DDistanceName: "Radius Luar adalah Jarak 3D",
		horizontalStartAngleName: "Sudut Mulai Horizontal",
		horizontalEndAngleName: "Sudut Akhir Horizontal",
		verticalUpperAngleName: "Sudut Atas Vertikal",
		verticalLowerAngleName: "Sudut Bawah Vertikal",
		zoneDataName: "Raster Zona",
		zoneFieldName: "Kolom Zona",
		ignoreNoDataName: "Abaikan NoData dalam penghitungan",
		temperatureRasterName: "Raster Suhu",
		inTemperatureUnitsName: "Unit Suhu",
		outHeatIndexTemperatureUnitsName: "Unit Indeks Panas",
		relativeHumidityRasterName: "Raster Kelembapan Relatif",
		outWindChillTemperatureUnitsName: "Unit Kesejukan Angin",
		windSpeedRasterName: "Raster Kecepatan Angin",
		inWindSpeedUnitsName: "Unit Kecepatan Angin",
		valueName: "Nilai",
		propertyName: "Nama Properti",
		jsonName: "JSON Metadata",
		zoneTableName: "Tabel Atribut Zona",
		attributeFieldNames: "Nama Kolom Atribut",
		backgroundName: "Nilai Latar Belakang",
		whereClauseName: "Di Mana Klausa",
		minimumValueFieldName: "Nama Kolom Nilai Minimum",
		maximumValueFieldName: "Nama Kolom Nilai Maksimum",
		outValueFieldName: "Nama Kolom Nilai Output",
		defaultValueName: "Nilai Output Default",
		conversionMatrixName: "Matriks Konversi",
		IsPseudoColorOutputName: "Adalah output warna palsu",
		unmappedAsRandomColorName: "Menetapkan Warna Acak ke Piksel yang Belum Dipetakan",
		distanceMethodName: "Metode Jarak",
		flowDirRasterName: "Raster Arah Aliran",
		pourPointName: "Raster Titik Tuang",
		pourPointFieldName: "Kolom Titik Tuang",
		constantZName: "Konstan Z",
		zOffsetName: "Offset Z",
		geoIdName: "Geoid",
		calibrationTypeName: "Jenis Kalibrasi",
		filterTypeName: "Jenis Filter",
		filterSizeName: "Ukuran Filter",
		noiseModelName: "Model Derau",
		noiseVarianceName: "Varian Derau",
		additiveNoiseMeanName: "Rata-Rata Derau Tambahan",
		multiplicativeNoiseMeanName: "Rata-Rata Derau Multiplikatif",
		numberofLooksName: "Jumlah Pencarian",
		dampingFactorName: "Faktor Pengurangan",
		maskRasterName: "Raster Mask",
		nibbleValuesName: "Gunakan nilai NoData jika nilai itu adalah lingkungan terdekat",
		nibbleNoDataName: "Sel NoData Sambutan",
		zLimitName: "Batas Z",
		flowDirectionTypeName: "Jenis Arah Aliran",
		weightRasterName: "Raster Bobot",
		forceEdgeName: "Paksa semua sel tepi untuk mengalir keluar",
		streamRasterName: "Raster Arus",
		surfaceRasterName: "Raster Permukaan",
		conversionType: "Jenis Konversi",
		distanceRaster1: "Raster Jarak 1",
		distanceRaster2: "Raster Jarak 2",
		costDistanceRaster: "Biaya Raster Jarak",
		costBacklinkRaster: "Biaya Raster Tautan Balik",
		overridesName: "Menimpa",
		fieldName: "Kolom",
		signatureFileOrUrl: "Tanda tangan File atau URL",
		redName: "Merah",
		greenName: "Hijau",
		blueName: "Biru",
		infraredName: "Inframerah",
		panchromaticName: "Pankromatik",
		multispectralName: "Multispektral",
		pansharpeningType: "Jenis Pansharpening",
		sensorName: "Sensor",
		spatialReferenceName: "Referensi Spasial",
		xCellsizeName: "Ukuran Sel X",
		yCellsizeName: "Ukuran Sel Y",
		xOriginName: "Titik Pendaftaran X",
		yOriginName: "Titik Pendaftaran Y",
		percentileName: "Nilai Persentil",
		neighborhoodType: "Jenis Lingkungan",
		widthName: "Lebar",
		heightName: "Tinggi",
		startAngleName: "Sudut Mulai",
		endAngleName: "Sudut Akhir",
		neighborhoodValues: "Nilai Lingkungan Sekitar",
		horizontalRaster: "Raster Horizontal",
		horizontalFactor: "Faktor Horizontal",
		verticalRaster: "Raster Vertikal",
		verticalFactor: "Faktor Vertikal",
		streamRaster: "Raster Arus",
		flowDirRaster: "Raster Arah Aliran",
		numberNeighborCells: "Jumlah Sel Lingkungan",
		zoneConnectivity: "Konektivitas Zona",
		addLinkBehavior: "Tambahkan Tautan",
		excludedValue: "Nilai yang Dikecualikan",
		constantFillCheck: "Buat Raster Isian dari Konstan",
		fillRaster: "Raster Isian",
		constantFillValue: "Nilai Konstan",
		inputBitPositions: "Bit Input",
		outputBitPositions: "Bit Output",
		distanceTypeName: "Jenis Jarak",
		barrierDataName: "Batas Raster",
		pourPointDataName: "Raster Titik Tuang",
		accumulationRasterName: "Raster Akumulasi Aliran",
		snapDistanceName: "Snap Jarak",
		orderMethodName: "Metode Pemesanan",
		directionMeasurementName: "Arah Pengukuran",
		processAsMultiband: "Proses Sebagai Multiband",
		processMultidimensional: "Proses sebagai multidimensional",
		forceFlowDirectionConvention: "Konvensi arah aliran daya untuk raster tautan balik",
		initialAccumulation: "Akumulasi Awal",
		maximumAccumulation: "Akumulasi Maksimum",
		sourceLocationBands: "Buat baris dan kolom sumber sebagai band tambahan di output",
		backDirectionBand: "Buat arah balik sebagai band tambahan di output",
		numberOfCells: "Jumlah Sel",
		zoneValues: "Nilai Zona",
		shrinkMethod: "Susutkan Metode",
		expandMethod: "Perluas Metode",
		inputSpectralProfileType: "Jenis Profil Spektral",
		spectralProfileFileName: "Profil Spektral",
		trainingFeatureFileName: "Fitur Pelatihan",
		nonNegative: "Non-negatif",
		sumToOne: "Jumlahkan ke Satu",
		randomDistribution: "Distribusi",
		meanName: "Rata-rata",
		probabilityName: "Probabilitas",
		alphaName: "Alfa",
		betaName: "Beta",
		rName: "r",
		nName: "N",
		seed: "Seed",
		randomNumberGenerator: "Generator Angka Acak",
		cellFactor: "Faktor Sel",
		aggregationType: "Teknik agregasi",
		extentHandling: "Perluas jangkauan jika diperlukan",
		trendAnalysisDimensionName: "Nama Dimensi",
		trendAnalysisType: "Jenis Tren",
		harmonicFrequency: "Frekuensi Harmonik",
		polynomialOrder: "Urutan Polinomial",
		cycleLengthName: "Panjang Siklus",
		trendAnalysisRMSE: "RMSE",
		trendAnalysisR2: "R-Kuadrat",
		trendAnalysisSlopePValue: "Nilai-P dari Koefisien Kemiringan",
		trendAnalysisSeasonalPeriod: "Periode Musiman",
		cycleUnitName: "Unit Siklus",
		predictDimensionValues: "Nilai",
		dimensionDefinitionType: "Penentuan Dimensi",
		predictDimensionStart: "Mulai",
		predictDimensionEnd: "Akhiri",
		predictDimensionInterval: "Interval Nilai",
		dimensionUnit: "Unit",
		interpolationCellsizeName: "Ukuran Sel Interpolasi",
		variableName: "Variabel",
		dimensionlessName: "Tanpa dimensi",
		mdimDefinition: "Penentuan Dimensi",
		dimensionName: "Dimensi",
		iterationStart: "Mulai dari iterasi pertama",
		iterationEnd: "Akhir dari iterasi pertama",
		intervalStart: "Awal Interval",
		intervalEnd: "Akhir Interval",
		stepName: "Langkah",
		rangesName: "Rentang",
		minValue: "Nilai Minimum",
		maxValue: "Nilai Maksimum",
		changeAnalysisRasterName: "Ubah Raster Analisis",
		changeTypeName: "Ubah Jenis",
		segmentDate: "Tanggal Segmen",
		changeDirectionName: "Ubah Arah",
		maxNumChangesName: "Jumlah Perubahan Maksimum",
		filterByYear: "Filter Menurut Tahun",
		minimumYear: "Nilai Minimum",
		maximumYear: "Nilai Maksimum",
		filterByDuration: "Filter Menurut Durasi",
		minimumDuration: "Durasi Minimal",
		maximumDuration: "Durasi Maksimal",
		filterByMagnitude: "Filter Menurut Magnitudo",
		minimumMagnitude: "Magnitudo Minimal",
		maximumMagnitude: "Magnitudo Maksimal",
		filterByStartValue: "Filter menurut Nilai Awal",
		minimumStartValue: "Nilai Awal Minimum",
		maximumStartValue: "Nilai Awal Maksimum",
		filterByEndValue: "Filter menurut Nilai Akhir",
		minimumEndValue: "Nilai Akhir Minimum",
		maximumEndValue: "Nilai Akhir Maksimum",
		modelTypeName: "Tipe Model",
		fromRasterName: "Dari Raster",
		toRasterName: "Hingga Raster",
		computeChangeMethod: "Metode Hitung Perubahan",
		fromClassValues: "Dari Nilai Kelas (Contoh: 2 5)",
		toClassValues: "Hingga Nilai Kelas (Contoh: 2 5)",
		keepMethod: "Metode Filter",
		useColorMethod: "Tentukan Warna Transisi",
		detectChangeBands: "Band untuk Mendeteksi Perubahan (mulai dari 0)",
		tmaskBands: "Band untuk Masking Temporal (mulai dari 0)",
		chiSquaredThreshold: "Ambang Batas Chi-kuadrat untuk Mendeteksi Perubahan",
		minAnomaly: "Pengamatan Anomali Berurutan Minimum",
		updatingFrequency: "Memperbarui Frekuensi Pemasangan (dalam tahun)",
		distanceAccumulationRasterName: "Raster Akumulasi Jarak",
		costBackdirectionRasterName: "Raster Arah Balik atau Raster Arah Aliran",
		rasterCollectionName: "Koleksi Raster",
		itemFunctionName: "Fungsi Item",
		aggregationFunctionName: "Fungsi Agregasi",
		processingFunctionName: "Fungsi Pemrosesan",
		aggregationDefinitionName: "Penentuan Agregasi",
		queryGeometryName: "Geometri Kueri",
		factorFunctionZeroFactor: "Faktor Nol",
		factorFunctionCutAngle: "Sudut Potong",
		factorFunctionSideFactor: "Faktor Skala",
		factorFunctionSlope: "Kemiringan",
		factorFunctionLowCutAngle: "Sudut Potong Rendah",
		factorFunctionHighCutAngle: "Sudut Potong Tinggi",
		factorFunctionCosPower: "Daya Kosinus",
		factorFunctionSecPower: "Daya Sekan",
		factorFunctionTablePath: "Jalur Tabel",
		processingBand: "Band Pemrosesan",
		processingBandName: "Nama Band Pemrosesan",
		snappingDate: "Tanggal Snapping",
		maxNumSegments: "Jumlah Maksimal Segmen",
		vertexCountOvershoot: "Overshoot Jumlah Verteks",
		spikeThreshold: "Ambang Batas Spike",
		recoveryThreshold: "Ambang Batas Pemulihan",
		minNumObs: "Jumlah Minimal Observasi",
		pValueThreshold: "Ambang Batas Nilai-P",
		bestModelProportion: "Proporsi Model Terbaik",
		preventOneYearRecovery: "Cegah Pemulihan Satu Tahun",
		recoveryIncreaseTrend: "Pemulihan Memiliki Tren yang Meningkat",
		outputOtherBands: "Output Band Lainnya",
		sortType: "Urutkan Jenis",
		numberOfRuns: "Jalankan perluasan dan penyusutan dua kali",
		percentileValue: "Nilai Persentil",
		percentileInterpolationType: "Jenis interpolasi persentil",
		rasterInfoProperty: "Properti",
		rasterInfoValue: "Nilai",
		rasterInfoColumns: "Kolom",
		rasterInfoRows: "Baris",
		rasterInfoBandCount: "Jumlah Band",
		rasterInfoPixelSizeX: "Ukuran Sel X",
		rasterInfoPixelSizeY: "Ukuran Sel Y",
		rasterInfoPixelType: "Jenis Piksel",
		rasterExtentTop: "Atas",
		rasterExtentBottom: "Bawah",
		rasterExtentLeft: "Kiri",
		rasterExtentRight: "Kanan",
		rasterStatisticsNotCalculated: "Statistik belum dihitung.",
		spatialReferenceProjection: "Proyeksi",
		spatialReferenceWkid: "WKID",
		spatialReferenceLatestWkid: "WKID Sebelumnya",
		spatialReferenceWkt: "WKT",
		spatialReferenceVcsWkid: "VCSWKID",
		spatialReferenceLatestVcsWkid: "VCSWKID Sebelumnya",
		spatialReferenceAuthority: "Otoritas",
		spatialReferenceLinearUnit: "Unit Linear",
		spatialReferenceAngularUnit: "Unit Angular",
		spatialReferenceFalseEasting: "Absis Semu",
		spatialReferenceFalseNorthing: "Ordinat Semu",
		spatialReferenceCentralMeridian: "Meridian Pusat",
		spatialReferencePrimeMeridian: "Meridian Utama",
		spatialReferenceStandardParallel1: "Paralel Standar 1",
		spatialReferenceStandardParallel2: "Paralel Standar 2",
		spatialReferenceLatitudeOfOrigin: "Lintang Asal",
		spatialReferenceAuxiliarySphereType: "Jenis Auxiliary Sphere",
		spatialReferenceDatum: "Datum",
		spatialReferenceSpheroid: "Spheroid",
		spatialReferenceSemimajorAxis: "Sumbu Semimayor",
		spatialReferenceSemiminorAxis: "Sumbu Semiminor",
		spatialReferenceInverseFlattening: "Perataan Inversi",
		inputDefinitionFileName: "File Definisi Input",
		deleteName: "Hapus",
		addVariableName: "Tambah variabel",
		maxNumPixelsPerSegment: "Ukuran Segmen Maksimal dalam Piksel",
		forwardWindowName: "Jendela Depan",
		backwardWindowName: "Jendela Belakang",
		noDataHandlingName: "Penanganan NoData",
		circularWrapValueName: "Nilai Bentuk Sirkular",
		fromClassNameFieldName: "Nama Kolom Untuk Nama Kelas Dalam Raster Dari",
		toClassNameFieldName: "Nama Kolom Untuk Nama Kelas Dalam Raster Ke",
		targetRasterName: "Raster Target",
		circularWrapValue: "Nilai Bentuk Sirkular",
		bandIndexesR: "Ekspresi Merah",
		bandIndexesG: "Ekspresi Hijau",
		bandIndexesB: "Ekspresi Biru",
		exampleName: "Contoh",
		inputName: "Input",
		outputName: "Keluaran",
		optionalName: "Opsional",
		browseDefinitionFile: "Jelajahi File Definisi",
		selectDefinitionFile: "Pilih File Definisi Input",
		inputDefinitionURL: "URL File Definisi Input",
		enterDefinitionFileURL: "Masukkan URL File Definisi",
		browseXMLFile: "Jelajahi file XML",
		selectStatsFile: "Pilih File Statistik dan Histogram",
		enterXMLFileURL: "Masukkan URL File XML",
		xmlFileURL: "URL File XML",
		circularCalculation: "Hitung Statistik Melingkar",
		localSurfaceType: "Jenis Permukaan Lokal",
		surfaceParameterType: "Jenis Parameter",
		neighborhoodDistance: "Jarak Lingkungan",
		useAdaptiveNeighborhood: "Gunakan Lingkungan Adaptif",
		outputSlopeType: "Pengukuran Kemiringan Output",
		projectAzimuths: "Proyeksikan Azimut Geodesik",
		useEquatorialAspect: "Gunakan Aspek Khatulistiwa",
		zUnit: "Unit Z",
		analysisMask: "Mask Analisis",
		stdDeviation: "Simpangan Baku",
		"true": "Benar",
		"false": "Salah",
		costDistanceRaster1: "Input Raster Jarak Biaya Akumulatif 1",
		costDistanceRaster2: "Input Raster Jarak Biaya Akumulatif 2",
		threshold: "Ambang batas",
		thresholdMethod: "Metode Ambang Batas",
		directionRaster1: "Input Raster Arah Belakang 1",
		directionRaster2: "Input Raster Arah Belakang 2",
		maxIterations: "Jumlah Maksimum Iterasi",
		epsilon: "Epsilon"
	},
	enumLabels: {
		attributeTableTypeManual: "Manual",
		attributeTableTypeExternal: "Eksternal",
		clrSchemeTypeColormap: "Peta Warna",
		clrSchemeTypeColorRamp: "Rangkaian Warna",
		colormapTypeElevation: "Elevasi",
		colormapTypeGray: "Abu-Abu",
		colormapTypeNDVI: "NDVI",
		colormapTypeNDVI2: "NDVI2",
		colormapTypeNDVI3: "NDVI3",
		colormapTypeRandom: "Acak",
		none: "Tidak Ada",
		slopeTypeAdjusted: "Disesuaikan",
		slopeTypeDegree: "Derajat",
		slopeTypePercentRise: "PercentRise",
		slopeTypeScaled: "Berskala",
		stretchTypeMinMax: "MinMax",
		stretchTypePercentMinMax: "PercentMinMax",
		stretchTypeSigmoid: "Sigmoid",
		stretchTypeStdDev: "Simpangan Baku",
		hillshadeTypeSimple: "Tradisional",
		hillshadeTypeMultidirectional: "Banyak Arah",
		bandComboByNames: "Nama Band",
		bandComboByWavelength: "Panjang Gelombang Band",
		bandComboByIDs: "ID Band",
		missingBandActionBestMatch: "Kecocokan Terbaik",
		missingBandActionFail: "Gagal",
		unitTypeCelsius: "Celsius",
		unitTypeCentimeters: "Sentimeter",
		unitTypeDecimeters: "Desimeter",
		unitTypeFahrenheit: "Fahrenheit",
		unitTypeFeet: "Kaki",
		unitTypeFeetPerSec: "Kaki Per Detik (kaki/dtk)",
		unitTypeInches: "Inci",
		unitTypeKelvin: "Kelvin",
		unitTypeKilometers: "Kilometer",
		unitTypeKmsPerHour: "Kilometer Per Jam (km/jam)",
		unitTypeKnots: "Knot (kn)",
		unitTypeMeters: "Meter",
		unitTypeMetersPerSec: "Meter Per Detik (m/dtk)",
		unitTypeMiles: "Mil",
		unitTypeMilesPerHour: "Mil Per Jam (mpj)",
		unitTypeMillimeters: "Milimeter",
		unitTypeNauticalMiles: "Mil Laut",
		unitTypeYards: "Yard",
		unitTypeDecimalDegrees: "Derajat desimal",
		unitTypePoints: "Titik",
		unitTypeUnknown: "Tidak Diketahui",
		unitTypeSqMapUnits: "Unit Peta Persegi",
		unitTypeSqMiles: "Mil Persegi",
		unitTypeSqKms: "Kilometer Persegi",
		unitTypeAcres: "Acre",
		unitTypeHectares: "Hektar",
		unitTypeSqYards: "Yard Persegi",
		unitTypeSqFt: "Kaki Persegi",
		unitTypeSqInches: "Inci Persegi",
		unitTypeSqMts: "Meter Persegi",
		unitTypeSqCms: "Sentimeter Persegi",
		unitTypeSqMms: "Milimeter Persegi",
		cellsizeTypeFirst: "Pertama Dari",
		cellsizeTypeMin: "Min Dari",
		cellsizeTypeMax: "Maks Dari",
		cellsizeTypeMean: "Rata-rata Dari",
		cellsizeTypeLast: "Terakhir Dari",
		extentTypeFirst: "Pertama Dari",
		extentTypeIntersection: "Perpotongan Dari",
		extentTypeUnion: "Gabungan Dari",
		extentTypeLast: "Terakhir Dari",
		noDataInterpretAny: "Cocokkan Apa Saja",
		noDataInterpretAll: "Cocokkan Semua",
		curvatureTypeStandard: "Standar",
		curvatureTypeProfile: "Profil",
		curvatureTypePlanform: "Planform",
		filterTypeLineDetectionHorizontal: "Deteksi Garis Horizontal",
		filterTypeLineDetectionVertical: "Deteksi Garis Vertikal",
		filterTypeLineDetectionLeftDiagonal: "Deteksi Garis Diagonal Kiri",
		filterTypeLineDetectionRightDiagonal: "Deteksi Garis Diagonal Kanan",
		filterTypeGradientNorth: "Gradien Utara",
		filterTypeGradientWest: "Gradien Barat",
		filterTypeGradientEast: "Gradien Timur",
		filterTypeGradientSouth: "Gradien Selatan",
		filterTypeGradientNorthEast: "Gradien Timur Laut",
		filterTypeGradientNorthWest: "Gradien Barat Laut",
		filterTypeSmoothArithmeticMean: "Rata-rata Aritmetika Halus",
		filterTypeSmoothing3x3: "Penghalusan 3x3",
		filterTypeSmoothing5x5: "Penghalusan 5x5",
		filterTypeSharpening3x3: "Penajaman 3x3",
		filterTypeSharpening5x5: "Penajaman 5x5",
		filterTypeLaplacian3x3: "Laplacian 3x3",
		filterTypeLaplacian5x5: "Laplacian 5x5",
		filterTypeSobelHorizontal: "Sobel Horizontal",
		filterTypeSobelVertical: "Sobel Vertikal",
		filterTypeSharpen: "Tajamkan",
		filterTypeSharpen2: "Tajamkan Lebih Lagi",
		filterTypePointSpread: "Titik Sebar",
		userDefined: "Ditentukan Pengguna",
		ContourTypeLines: "Garis Kontur",
		ContourTypeFill: "Isian Kontur",
		ContourTypeSmoothOnly: "Khusus Permukaan Halus",
		rasterizeFirst: "Pertama",
		rasterizeLast: "Terakhir",
		rasterizeSmallest: "Paling kecil",
		rasterizeLargest: "Paling besar",
		resamplingTypeNearest: "Lingkungan Terdekat",
		resamplingTypeBilinear: "Interpolasi Bilinear",
		resamplingTypeCubic: "Konvolusi Kubik",
		resamplingTypeMajority: "Mayoritas",
		resamplingTypeBilinearPlus: "Interpolasi Bilinear Plus",
		resamplingTypeGauss: "Gauss Blur",
		resamplingTypeGaussPlus: "Gauss Blur Plus",
		resamplingTypeAverage: "Rata-Rata",
		resamplingTypeMinimum: "Minimum",
		resamplingTypeMaximum: "Maksimum",
		resamplingTypeVectorAvg: "Rata-rata Vektor",
		minimum: "Minimum",
		maximum: "Maksimum",
		mean: "Rata-rata",
		stdDeviation: "Deviasi Standar",
		uvMagDirTypeUV: "U-V",
		uvMagDirTypeMagDir: "Besaran-Arah",
		unknown: "Tidak Diketahui",
		angleRefSysGeographic: "Geografis",
		angleRefSysArithmetic: "Aritmatika",
		interpolateIrregularDataNearest: "Lingkungan Terdekat",
		interpolateIrregularDataBilinear: "Bilinear",
		interpolateIrregularDataTinningLinear: "Linear Tipis",
		interpolateIrregularDataTinningNaturalNeighbor: "Lingkungan Alami",
		interpolateIrregularDataTinningIDW: "Jarak Inversi Berbobot",
		esriRasterThresholdTypeConstant: "Konstan",
		esriRasterThresholdTypeOtsu: "Otsu",
		esriRasterThresholdTypeTsai: "Tsai",
		esriRasterThresholdTypeKapur: "Kapur",
		esriRasterThresholdTypeKittler: "Kittler",
		esriRasterThresholdTypeRosin: "Rosin",
		argStatsTypeMax: "Arg Maks",
		argStatsTypeMin: "Arg Min",
		argStatsTypeMedian: "Arg Median",
		argStatsTypeDuration: "Durasi",
		arithmeticOpPlus: "Tambah",
		arithmeticOpMinus: "Kurang",
		arithmeticOpMultiply: "Kali",
		arithmeticOpDivide: "Bagi",
		arithmeticOpPower: "Pangkat",
		arithmeticOpMode: "Mode",
		clipTypeOutside: "Potong di Luar",
		clipTypeInside: "Potong di Dalam",
		yes: "Iya",
		no: "Tidak",
		densities: "Kepadatan",
		expectedCounts: "Jumlah yang Diharapkan",
		planar: "Planar",
		geodesic: "Geodesik",
		eachCell: "Setiap Sel",
		eachZone: "Setiap Zona",
		bestSingle: "Tunggal Terbaik",
		allSightlines: "Semua Garis Pandangan",
		perimeterSightlines: "Garis Pandangan Perimeter",
		frequency: "Frekuensi",
		observers: "Pengamat",
		majority: "Mayoritas",
		median: "Median",
		minority: "Minoritas",
		percentile: "Persentil",
		range: "Rentang",
		sum: "Jumlah",
		variety: "Keragaman",
		ndvi: "NDVI",
		savi: "SAVI",
		bandArithmeticMethodTSAVI: "SAVI yang Ditransformasi",
		bandArithmeticMethodMSAVI: "SAVI yang Diubah",
		bandArithmeticMethodSultan: "Rumus Sultan",
		gemi: "GEMI",
		pvi: "PVI",
		gvi: "GVI (TM Landsat)",
		vari: "VARI",
		sr: "SR",
		gndvi: "GNDVI",
		ndvire: "NDVIre",
		srre: "SRre",
		mtvi2: "MTVI2",
		rtviCore: "RTVICore",
		cire: "CIre",
		cig: "CIg",
		ndwi: "NDWI",
		evi: "EVI",
		ironOxide: "Besi Oksida",
		ferrousMinerals: "Mineral Besi",
		clayMinerals: "Mineral Lumpur",
		wndwi: "WNDWI",
		bai: "BAI",
		mndwi: "MNDWI",
		nbr: "NBR",
		ndbi: "NDBI",
		ndmi: "NDMI",
		ndsi: "NDSI",
		localSquareRoot: "Akar Kuadrat",
		localACos: "ACos",
		localASin: "ASin",
		localATan: "ATan",
		localATanH: "ATanH",
		localAbs: "Abs",
		localBitwiseNot: "Bitwise Not",
		localBooleanNot: "Boolean Not",
		localCos: "Cos",
		localCosH: "CosH",
		localExp: "Exp",
		localExp10: "Exp10",
		localExp2: "Exp2",
		localInt: "Bilangan Bulat",
		localIsNull: "Adalah Nol",
		localFloat: "Mengambang",
		localLn: "Ln",
		localLog10: "Log10",
		localLog2: "Log2",
		localNegate: "Negasi",
		localRoundDown: "Bulatkan ke Bawah",
		localRoundUp: "Bulatkan ke Atas",
		localSin: "Sin",
		localSinH: "SinH",
		localTan: "Tan",
		localTanH: "TanH",
		localACosH: "ACosH",
		localASinH: "ASinH",
		localPlus: "Tambah",
		localMinus: "Kurang",
		localTimes: "Kali",
		localPower: "Pangkat",
		localBitwiseAnd: "Bitwise And",
		localBitwiseLeftShift: "Bitwise Left Shift",
		localBitwiseOr: "Bitwise Or",
		localBitwiseRightShift: "Bitwise Right Shift",
		localBitwiseXor: "Bitwise Xor",
		localBooleanAnd: "Boolean And",
		localBooleanOr: "Boolean Or",
		localBooleanXor: "Boolean Xor",
		localDivide: "Bagi",
		localEqualTo: "Sama Dengan",
		localGreaterThan: "Lebih Besar Dari",
		localGreaterThanEqual: "Lebih Besar Dari Sama Dengan",
		localLessThan: "Kurang Dari",
		localLessThanEqual: "Kurang Dari Sama Dengan",
		localMod: "Mod",
		localNotEqual: "Tidak Sama Dengan",
		localATan2: "ATan2",
		localSquare: "Kuadrat",
		localSetNull: "Tetapkan ke Nol",
		remapDefTypeList: "Daftar",
		remapDefTypeTable: "Tabel",
		remapTableTypeSimple: "Sederhana",
		remapTableTypeDynamic: "Dinamis",
		remapTableTypeReassignment: "Penugasan Ulang",
		geomCorrectionByConstZ: "Gunakan Konstan Z",
		geomCorrectionByDEM: "Gunakan DEM",
		radarCalibBetaNought: "Beta nol",
		radarCalibSigmaNought: "Sigma nol",
		radarCalibGammaNought: "Gamma nol",
		speckleFilterTypeLee: "Filter Lee",
		speckleFilterTypeEnhancedLee: "Filter Lee yang Ditingkatkan",
		speckleFilterTypeFrost: "Filter Frost",
		speckleFilterTypeKuan: "Filter Kuan",
		speckleNoiseModelMul: "Derau Multiplikatif",
		speckleNoiseModelAdd: "Derau Tambahan",
		speckleNoiseModelAddnMul: "Defau Tambahan dan Multiplikatif",
		mosaicOpTypeFirst: "Pertama",
		mosaicOpTypeLast: "Terakhir",
		mosaicOpTypeMin: "Min",
		mosaicOpTypeMax: "Maks",
		mosaicOpTypeMean: "Rata-rata",
		mosaicOpTypeBlend: "Paduan",
		mosaicOpTypeSum: "Sum",
		integer: "Bilangan Bulat",
		rfxD8: "D8",
		rfxMFD: "MFD",
		dinf: "Dinf",
		vertical: "Vertikal",
		horizontal: "Horizontal",
		localCellStatisticsMajority: "Mayoritas",
		localCellStatisticsMax: "Maksimum",
		localCellStatisticsMean: "Rata-rata",
		localCellStatisticsMedian: "Median",
		localCellStatisticsMin: "Minimum",
		localCellStatisticsMinority: "Minoritas",
		localCellStatisticsRange: "Rentang",
		localCellStatisticsStdDev: "Simpangan Baku",
		localCellStatisticsSum: "Jumlah",
		localCellStatisticsVariety: "Keragaman",
		localCellStatisticsMajorityIgnoreND: "Mayoritas (Abaikan NoData)",
		localCellStatisticsMaxIgnoreND: "Maksimum (Abaikan NoData)",
		localCellStatisticsMeanIgnoreND: "Rata-Rata (Abaikan NoData)",
		localCellStatisticsMedianIgnoreND: "Median (Abaikan NoData)",
		localCellStatisticsMinIgnoreND: "Minimum (Abaikan NoData)",
		localCellStatisticsMinorityIgnoreND: "Minoritas (Abaikan NoData)",
		localCellStatisticsRangeIgnoreND: "Rentang (Abaikan NoData)",
		localCellStatisticsStdDevIgnoreND: "Simpangan Baku (Abaikan NoData)",
		localCellStatisticsSumIgnoreND: "Jumlah (Abaikan NoData)",
		localCellStatisticsVarietyIgnoreND: "Keragaman (Abaikan NoData)",
		localCellStatisticsTypePercentileIgnoreND: "Persentil (Abaikan NoData)",
		fromSource: "Dari Sumber",
		toSource: "Ke Sumber",
		colorspaceConversionRgbToHsv: "RGB hingga HSV",
		colorspaceConversionHsvToRgb: "HSV hingga RGB",
		pansharpenTypeIHS: "IHS",
		pansharpenTypeBrovey: "Brovey",
		pansharpenTypeEsri: "Esri",
		pansharpenTypeMean: "Rata-rata",
		pansharpenTypeGramSchmidt: "Gram-Schmidt",
		rectangleNeighborhood: "Persegi Empat",
		circleNeighborhood: "Lingkaran",
		annulusNeighborhood: "Annulus",
		wedgeNeighborhood: "Wedge",
		irregularNeighborhood: "Tak Beraturan",
		weightNeighborhood: "Berat",
		four: "Empat",
		eight: "Delapan",
		within: "Dalam",
		cross: "Silang",
		addLink: "Tambahkan Tautan",
		noLink: "Tidak Ada Tautan",
		weightedMean: "Rata-rata Tertimbang",
		ls8QCBitPatternCirrus: "Landsat 8 Awan Tipis",
		ls8QCBitPatternCloud: "Landsat 8 Awan",
		ls8QCBitPatternCloudShadow: "Landsat 8 Bayangan Awan",
		ls8QCBitPatternDesignatedFill: "Landsat 8 Isi yang Ditentukan",
		ls8QCBitPatternDroppedFrame: "Landsat 8 Frame yang Hilang",
		ls8QCBitPatternSnowIce: "Landsat 8 Salju/Es",
		ls8QCBitPatternTerrainOcclusion: "Landsat 8 Oklusi Medan",
		ls8QCBitPatternVegetation: "Landsat 8 Tanaman",
		ls8QCBitPatternWater: "Landsat 8 Air",
		downStream: "Hilir",
		upStream: "Hulu",
		strahler: "STRAHLER",
		shreve: "SHREVE",
		currentSlice: "Irisan Saat Ini",
		allSlices: "Semua Irisan",
		expandDistance: "JARAK",
		expandMorphological: "MORFOLOGI",
		spectralProfileFile: "Profil Spektral",
		trainingFeatureFile: "Fitur Pelatihan",
		randomDistributionTypeUniform: "Seragam",
		randomDistributionTypeUniformInteger: "Bilangan Bulat",
		randomDistributionTypeNormal: "Normal",
		randomDistributionTypeExponential: "Eksponensial",
		randomDistributionTypePoisson: "Poisson",
		randomDistributionTypeGamma: "Gamma",
		randomDistributionTypeBinomial: "Binomial",
		randomDistributionTypeGeometric: "Geometrik",
		randomDistributionTypeNegativeBinomial: "Binomial Negatif",
		randomGeneratorTypeStandardCRand: "Rand C Standar",
		randomGeneratorTypeAlgorithmACM599: "Algoritme yang dikumpulkan ACM 599",
		randomGeneratorTypeMersenneTwister: "Mersenne Twister",
		sumName: "Jumlah",
		medainName: "Median",
		trendLinear: "Linear",
		trendHarmonic: "Harmonik",
		trendPolynomial: "Polinomial",
		trendMannKendall: "Mann-Kendall",
		trendSeasonalKendall: "Seasonal Kendall",
		dimensionByValue: "Berdasarkan Nilai",
		dimensionByInterval: "Berdasarkan Interval",
		mdimDefTypeAll: "Semua",
		mdimDefTypeByValues: "Berdasarkan Nilai",
		mdimDefTypeByRanges: "Berdasarkan Rentang",
		mdimDefTypeByIteration: "Berdasarkan Iterasi",
		mdimDefTypeByInterval: "Berdasarkan Interval",
		mdimDefTypeByTargetRaster: "Berdasarkan Raster Target",
		esriTimeUnitsHours: "Jam",
		esriTimeUnitsDays: "Hari",
		esriTimeUnitsWeeks: "Minggu",
		esriTimeUnitsMonths: "Bulan",
		esriTimeUnitsYears: "Tahun",
		esriTimeIntervalKeywordHourly: "Setiap jam",
		esriTimeIntervalKeywordDaily: "Harian",
		esriTimeIntervalKeywordWeekly: "Mingguan",
		esriTimeIntervalKeywordDekadly: "Setiap Dekade",
		esriTimeIntervalKeywordPentadly: "Lima Tahunan",
		esriTimeIntervalKeywordMonthly: "Bulanan",
		esriTimeIntervalKeywordQuarterly: "Triwulanan",
		esriTimeIntervalKeywordYearly: "Tahunan",
		esriTimeIntervalKeywordRecurringDaily: "Berulang setiap hari",
		esriTimeIntervalKeywordRecurringWeekly: "Berulang setiap minggu",
		esriTimeIntervalKeywordRecurringMonthly: "Berulang setiap bulan",
		esriTimeIntervalKeywordRecurringQuarterly: "Berulang setiap triwulan",
		aggDefTypeAll: "Semua",
		aggDefTypeIntervalKeyword: "Kata Kunci Interval",
		aggDefTypeIntervalValue: "Nilai Interval",
		aggDefTypeIntervalRanges: "Rentang Interval",
		latestChange: "Waktu Perubahan Terbaru",
		earliestChange: "Waktu Perubahan Terlama",
		largestChange: "Waktu Perubahan Terbesar",
		numberOfChanges: "Jumlah Perubahan",
		longestChange: "Waktu Perubahan Terpanjang",
		shortestChange: "Waktu Perubahan Terpendek",
		fastestChange: "Waktu Perubahan Tercepat",
		slowestChange: "Waktu Perubahan Terlama",
		allChanges: "Semua",
		increaseChanges: "Naikkan",
		decreaseChanges: "Turunkan",
		segmentBeginning: "Awal segmen",
		segmentEnd: "Akhir segmen",
		esriComputeChangeMethodDifference: "Perbedaan",
		esriComputeChangeMethodRelativeDifference: "Perbedaan Relatif",
		esriComputeChangeMethodCategorical: "Perbedaan Kategoris",
		esriComputeChangeMethodMultispectralEuclideanDistance: "Jarak Euclidean Spektral",
		esriComputeChangeMethodMultispectralAngularDifference: "Perbedaan Sudut Spektral",
		esriComputeChangeMethodMultispectralAxisWithBiggestChange: "Band Dengan Perubahan Paling Banyak",
		esriComputeChangeKeepAll: "Pertahankan Semua",
		esriComputeChangeKeepChangedOnly: "Hanya Pertahankan Piksel yang Berubah Saja",
		esriComputeChangeKeepUnchangedOnly: "Hanya Pertahankan Piksel yang Tidak Berubah Saja",
		esriComputeChangeUseColorAverage: "Rata-rata Warna Dari Dan Hingga",
		esriComputeChangeUseColorFrom: "Gunakan Warna Dari",
		esriComputeChangeUseColorTo: "Gunakan Warna Hingga",
		factorFunctionBinary: "Biner",
		factorFunctionForward: "Depan",
		factorFunctionLinear: "Linear",
		factorFunctionInvLinear: "Linear Terbalik",
		factorFunctionTable: "Tabel",
		factorFunctionSymLinear: "Linear Simetris",
		factorFunctionSymInvLinear: "Linear Terbalik Simetris",
		factorFunctionCos: "Kosinus",
		factorFunctionSec: "Sekan",
		factorFunctionCosSec: "Kosinus Sekan",
		factorFunctionSecCos: "Sekan Kosinus",
		noSort: "Jangan Urutkan",
		ascend: "Naik",
		descend: "Turun",
		autoDetect: "Deteksi otomatis",
		nearest: "Terdekat",
		linear: "Linear",
		esriMonthJanuary: "Januari",
		esriMonthFebruary: "Februari",
		esriMonthMarch: "Maret",
		esriMonthApril: "April",
		esriMonthMay: "Mei",
		esriMonthJune: "Juni",
		esriMonthJuly: "Juli",
		esriMonthAugust: "Agustus",
		esriMonthSeptember: "September",
		esriMonthOctober: "Oktober",
		esriMonthNovember: "November",
		esriMonthDecember: "Desember",
		dimensionalMovingIgnoreNoData: "Data",
		dimensionalMovingPropagateNoData: "NoData",
		dimensionalMovingFillOnlyNoData: "Isi NoData",
		circularMean: "Rata-Rata Melingkar",
		circularName: "Melingkar",
		arithmeticName: "Aritmatika",
		slopeName: "Kemiringan",
		aspectName: "Aspek",
		meanCurvature: "Lengkungan rata-rata",
		profileCurvature: "Lengkungan profil (garis kemiringan normal)",
		tangentialCurvature: "Lengkungan tangensial (kontur normal)",
		planCurvature: "Lengkungan rencana (kontur yang diproyeksikan)",
		contourGeodesicTorsion: "Torsi geodesik kontur",
		gaussianCurvature: "Lengkungan Gaussian",
		casoratiCurvature: "Lengkungan Casorati",
		localSurfaceTypeQuadratic: "Kuadrat",
		localSurfaceTypeBiquadratic: "Bikwadratik",
		thresholdNoThreshold: "Tidak Ada Ambang Batas",
		thresholdPercentLeastCost: "Persen dari Biaya Terendah",
		thresholdAccumulativeCost: "Biaya Akumulatif",
		clrmapTypeHillshade: "Hillshade"
	},
	categoryLabels: {
		sourceCharacteristics: "Karakteristik Sumber",
		neighborhoodSettings: "Tata Lingkungan",
		statistics: "Statistik",
		gamma: "Gamma",
		viewshedParameters: "Parameter Jarak Pandang",
		observerParameters: "Parameter Pengamat",
		irregularDataInterpolation: "Interpolasi Data Tidak Beraturan",
		modelStatistics: "Statistik Model",
		aggregationDef: "Penentuan Agregasi",
		filterByAttributes: "Filter menurut Atribut",
		percentileName: "Persentil",
		rasterInfo: "Informasi Raster",
		extent: "Jangkauan",
		spatialReference: "Referensi Spasial"
	},
	outputRasterHelpTexts: {
		outputName: "<p>Nama layer yang akan dibuat dan ditambahkan ke peta.</p>",
		resultType: "<p>Jenis output yang akan dibuat. Output dapat berupa layer citra Tile atau layer citra Dinamis.</p>",
		saveResultIn: "<p>Nama folder di <b>Konten Saya</b> adalah tempat hasil disimpan.</p>"
	},
	analysisEnvironmentsHelpTexts: {
		description: "<p>Pengaturan lingkungan untuk analisis di Penampil Peta. </p>",
		outSR: "<p>Menentukan sistem koordinat untuk analisis dan layer hasil.</p>",
		extent: "<p>Menentukan area yang akan digunakan untuk analisis.</p>",
		snapRaster: "<p>Menyesuaikan jangkauan output sehingga akan cocok dengan penjajaran sel dari layer snap raster yang ditentukan.</p>",
		cellSize: "<p>Menentukan ukuran atau resolusi sel yang akan digunakan untuk analisis dan membuat layer raster output.</p>",
		mask: "<p>Menentukan layer mask, sehingga hanya sel yang termasuk dalam area mask yang akan digunakan untuk analisis.</p>",
		resamplingMethod: "<p>Menentukan cara menginterpolasi nilai piksel saat input dan output raster tidak sejajar.</p>"
	},
	mainGenStrings: {
		unsupportedDataType: "Jenis tidak didukung",
		currentlyUnsupported: " Editor default untuk ${missingType} sedang tertunda tetapi akan segera hadir. Kolom tulisan placeholder sementara untuk menentukan input berbasis string.",
		unsupportedOverrideWarning: "Komponen editor penimpa yang menyediakan UX yang lebih baik untuk bekerja dengan parameter berikut sedang tertunda tetapi akan segera hadir:",
		overrideWidgetMissing: "Timpa komponen editor yang hilang!",
		uiIncomplete: "Pengiriman pekerjaan gagal. Fungsi tidak dapat dijalankan karena beberapa bidang yang wajib diisi tidak lengkap atau hilang dari UI.",
		count: "Count",
		selectVariables: "Pilih variabel",
		selectFeature: "Pilih feature layer",
		greaterThanErrorMessage: "Jumlah input harus lebih besar dari ${min}",
		lesserThanErrorMessage: "Jumah input harus kurang dari ${max}",
		greaterThanOrEqualErrorMessage: "Jumlah input harus lebih besar dari atau sama dengan ${min}",
		lesserThanOrEqualErrorMessage: "Jumlah input harus kurang dari atau sama dengan ${max}",
		allowScalar: "Pilih layer atau masukkan konstan",
		selectField: "Pilih kolom",
		parameterRequired: "Parameter ini harus diisi.",
		enterAValue: "Masukkan nilai...",
		invalidInput: "Nilai yang dimasukkan tidak valid.",
		itemNotFound: "Item tidak ada atau tidak dapat diakses.",
		itemPermissionDenied: "Anda tidak memiliki izin untuk mengakses item ini.",
		layerNotAvailable: "Gagal memuat layer ${layerName}.",
		multipleLayersNotAvailable: "Gagal memuat layer ${layerName} dan lainnya.",
		learnMoreLabel: "Pelajari Lebih Lanjut",
		fieldNotAvailable: "Gagal memuat kolom.",
		allowAnalysis: "Analisis tidak diizinkan pada layanan gambar.",
		allowAnalysisReason: "Satu atau lebih layer dari peta tidak terdaftar di sini karena ini tidak mengizinkan analisis.",
		learnMoreText: "Pelajari selengkapnya",
		atLeastOneRasterInput: "Sedikitnya satu layer input harus menjadi layer raster.",
		browseAnalysisLayers: "Telusuri layer",
		activeMapViewExtent: "Gunakan Jangkauan Peta Saat Ini",
		chooseRaster: "Pilih Raster Pemotongan",
		chooseGeometry: "Pilih Geometri Pemotongan",
		resultType: "Jenis hasil",
		saveInFolder: "Simpan di folder",
		outputName: "Nama output",
		outputLayerType: "Jenis layer output",
		dynamicImageryLayer: "Layer citra dinamis",
		tiledImageryLayer: "Layer citra berubin",
		custom: "Khusus",
		loading: "Memuat...",
		layerMissing: "Satu atau lebih layer dari peta tidak terdaftar di sini karena ini tidak mengizinkan analisis. Pelajari selengkapnya.",
		browseCoordinateSystems: "Telusuri sistem koordinat",
		unableToRepopulateOutSR: "Tidak dapat mengisi sistem koordinat output.",
		defaultTitle: "Lihat lebih banyak",
		"ARC (equal arc-second)": "BUSUR (setara busur-detik)",
		Africa: "Afrika",
		Antarctica: "Antartika",
		Argentina: "Argentina",
		Asia: "Asia",
		"Asteroid Belt": "Sabuk Asteroid",
		"Atlantic Ocean": "Samudra Atlantik",
		Australia: "Australia",
		"Australia and New Zealand": "Australia dan Selandia Baru",
		Austria: "Austria",
		"BLM (US Feet)": "BLM (Kaki AS)",
		Bangladesh: "Bangladesh",
		"Beijing 1954": "Beijing 1954",
		Bhutan: "Bhutan",
		CGCS2000: "CGCS2000",
		Canada: "Kanada",
		Caribbean: "Karibia",
		"Caribbean Sea": "Laut Karibia",
		"Central America": "Amerika Tengah",
		"Central and North America": "Amerika Tengah dan Utara",
		Colombia: "Kolombia",
		Continental: "Kontinental",
		"County Systems": "Sistem Daerah",
		"Democratic Republic of the Congo": "Republik Demokratik Kongo",
		"EPSG Arctic": "EPSG Arktik",
		Earth: "Bumi",
		"Ellipsoidal-based": "Berdasarkan ellipsoid",
		Europe: "Eropa",
		Finland: "Finlandia",
		France: "Prancis",
		"GSK 2011": "GSK 2011",
		"Gauss Kruger": "Gauss Kruger",
		"Geographic Coordinate Systems": "Sistem Koordinat Geografik",
		Germany: "Jerman",
		"Gravity-related": "Terkait gravitasi",
		"Greenwich-based": "Berdasarkan Greenwich",
		"Highways England": "Inggris Jalan Raya",
		Illinois: "Illinois",
		"Indian Ocean": "Samudra Hindia",
		"Indian Subcontinent": "Subkontinen Hindia",
		Indiana: "Indiana",
		Indonesia: "Indonesia",
		Iowa: "Iowa",
		"Ireland and United Kingdom": "Irlandia dan Inggris Raya",
		Italy: "Italia",
		Japan: "Jepang",
		Jupiter: "Jupiter",
		Kansas: "Kansas",
		"Las Vegas": "Las Vegas",
		Libya: "Libya",
		Malaysia: "Malaysia",
		"Malaysia and Singapore": "Malaysia dan Singapura",
		Mars: "Mars",
		Mercury: "Merkurius",
		Minnesota: "Minnesota",
		Montana: "Montana",
		"NAD 1927": "NAD 1927",
		"NAD 1927 (US Feet)": "NAD 1927 (Kaki AS)",
		"NAD 1983": "NAD 1983",
		"NAD 1983 (2011)": "NAD 1983 (2011)",
		"NAD 1983 (2011) (Intl Feet)": "NAD 1983 (2011) (Kaki Internasional)",
		"NAD 1983 (2011) (Meters)": "NAD 1983 (2011) (Meter)",
		"NAD 1983 (2011) (US Feet)": "NAD 1983 (2011) (Kaki AS)",
		"NAD 1983 (CORS96) (Intl Feet)": "NAD 1983 (CORS96) (Kaki Internasional)",
		"NAD 1983 (CORS96) (Meters)": "NAD 1983 (CORS96) (Meter)",
		"NAD 1983 (CORS96) (US Feet)": "NAD 1983 (CORS96) (Kaki AS)",
		"NAD 1983 (Intl Feet)": "NAD 1983 (Kaki Internasional)",
		"NAD 1983 (Meters)": "NAD 1983 (Meter)",
		"NAD 1983 (PA11) (Meters)": "NAD 1983 (PA11) (Meter)",
		"NAD 1983 (PA11) (US Feet)": "NAD 1983 (PA11) (Kaki AS)",
		"NAD 1983 (US Feet)": "NAD 1983 (Kaki AS)",
		"NAD 1983 HARN (Intl Feet)": "NAD 1983 HARN (Kaki Internasional)",
		"NAD 1983 HARN (Meters)": "NAD 1983 HARN (Meter)",
		"NAD 1983 HARN (US Feet)": "NAD 1983 HARN (Kaki AS)",
		"NAD 1983 NSRS2007 (Intl Feet)": "NAD 1983 NSRS2007 (Kaki Internasional)",
		"NAD 1983 NSRS2007 (Meters)": "NAD 1983 NSRS2007 (Meter)",
		"NAD 1983 NSRS2007 (US Feet)": "NAD 1983 NSRS2007 (Kaki AS)",
		"National Grids": "Grid Nasional",
		Navajo: "Navajo",
		Neptune: "Neptunus",
		"New Beijing": "Beijing Baru",
		"New Zealand": "Selandia Baru",
		"North America": "Amerika Utara",
		"Northern Hemisphere": "Belahan Bumi Utara",
		Norway: "Norwegia",
		Oceans: "Samudra",
		Oregon: "Oregon",
		"Other GCS": "GCS Lain",
		"Pacific Ocean": "Samudra Pasifik",
		Pluto: "Pluto",
		Polar: "Kutub",
		Portugal: "Portugal",
		"Projected Coordinate Systems": "Sistem Koordinat yang Diproyeksikan",
		"Pulkovo 1942": "Pulkovo 1942",
		"Pulkovo 1995": "Pulkovo 1995",
		Replaced: "Diganti",
		"SAD 1969": "SAD 1969",
		SIRGAS: "SIRGAS",
		"SIRGAS 2000": "SIRGAS 2000",
		Saturn: "Saturnus",
		"Solar System": "Tata Surya",
		"South Africa": "Afrika Selatan",
		"South America": "Amerika Selatan",
		"South Korea": "Korea Selatan",
		"Southern Hemisphere": "Belahan Bumi Selatan",
		"Spheroid-based": "Berdasarkan spheroid",
		"State Plane": "Pesawat Negara",
		"State Systems": "Sistem Negara",
		Sweden: "Swedia",
		"Switzerland and Liechtenstein": "Swiss dan Liechtenstein",
		Texas: "Texas",
		Tribal: "Tribal",
		Turkey: "Turki",
		"US Feet": "Kaki AS",
		"USA and territories": "AS dan wilayahnya",
		UTM: "UTM",
		Ukraine: "Ukraina",
		"Unknown Height Systems": "Sistem Ketinggian Tidak Dikenal",
		Uranus: "Uranus",
		Venus: "Venus",
		"Vertical Coordinate Systems": "Sistem Koordinat Vertikal",
		Vietnam: "Vietnam",
		"WGS 1972": "WGS 1972",
		"WGS 1984": "WGS 1984",
		Wisconsin: "Wisconsin",
		"Wisconsin CRS": "CRS Wisconsin",
		World: "Dunia",
		"World (Sphere-based)": "Dunia (Berdasarkan bola)",
		Wyoming: "Wyoming",
		"Xian 1980": "Xian 1980",
		done: "Selesai",
		noResults: "Tidak ditemukan hasil",
		searchPlaceholder: "Nama atau WKID",
		browseTemplate: "Telusuri template fungsi raster",
		saveTemplate: "Simpan template fungsi raster",
		preview: "Pratinjau",
		previewDescription: "Pratinjau hasilnya sebelum menjalankan analisis.",
		showPreview: "Tampilkan pratinjau",
		previewLayer: "Pratinjau Layer ${number}",
		newPreview: "Pratinjau baru",
		previewPopup: "Aktifkan pratinjau hasil analisis berdasarkan parameter input.",
		updatePreviewLayer: "Perbarui layer pratinjau yang dipilih",
		createPreviewLayer: "Buat layer pratinjau baru",
		maximumPreviewAllowed: "Jumlah maksimum layer pratinjau yang diperbolehkan: ${maxCount}",
		previewFailure: "Layer pratinjau ini tidak tersedia. Periksa parameter input dan perbarui lagi layer pratinjau ini.",
		header: "Pilih item",
		content: "Anda memiliki perubahan yang belum disimpan di ${rftTitle}. Jika Anda memulai kembali dengan template baru, perubahan tersebut akan hilang.",
		dontSave: "Jangan simpan",
		"continue": "Terus-menerus (kontinyu)",
		stretch: "Sesuaikan dengan jendela",
		pan: "Geser",
		newTemplate: "Buat template baru",
		openTemplate: "Buka template",
		addFunction: "Tambahkan fungsi raster",
		addConstant: "Tambahkan konstanta",
		addRaster: "Tambahkan variabel raster",
		move: "Pindah",
		zoom: "Perbesar",
		saveAs: "Simpan sebagai",
		clear: "Hapus",
		addRasterFunctionTitle: "Tambahkan fungsi raster",
		templatePropertiesTitle: "Properti template",
		browseRFT: "Telusuri template fungsi raster",
		defaultToolDescription: "Alat analisis ${toolTitle}.",
		openToolText: "Buka Alat",
		toolDropdownText: "Tarik Turun Alat",
		addToMap: "Konfirmasi dan tambahkan ke peta",
		confirm: "Konfirmasi",
		select: "Pilih",
		selectTask: "Pilih tugas",
		unsupportedLayer: "Parameter ini tidak mendukung layer berikut ini: ${layerName}",
		viewDetails: "Lihat detail item lengkap",
		rename: "Ubah Nama",
		duplicate: "Duplikasi",
		launch: "Terbuka untuk dijalankan",
		templateEditor: "Editor Template",
		createItem: "Simpan Template Fungsi Raster",
		actionLabel: "Filter",
		filterPopoverHeading: "Filter fungsi",
		defaultSearchPlaceholder: "Cari berdasarkan nama",
		settings: "Pengaturan",
		summary: "Ringkasan",
		definitionQuery: "Permintaan definisi",
		matchVariables: "Variabel yang cocok",
		unionDimension: "Dimensi persatuan",
		nameEditorPlaceholder: "Masukkan judul",
		summaryEditorPlaceholder: "Masukkan deskripsi singkat.",
		definitionQueryPlaceholder: "Masukkan...",
		upload: "Unggah",
		chooseImage: "Klik untuk memilih file",
		update: "Pembaruan",
		thumbnailErrors: {
			wrongImageType: "Jenis gambar yang salah dipilih",
			notAvailable: "Thumbnail tidak tersedia",
			loadError: "Tidak dapat memuat gambar",
			chooseFile: "Klik untuk memilih file"
		}
	}
};
const copy = "Salin";
const save = "Simpan";
const title = "Judul";
const folder = "Folder";
const tags = "Tag";
const savingMessage = "Menyimpan item ke";
const shareWith = "Bagikan dengan";
const share = "Bagikan";
const setSharingLevel = "Tetapkan Level Berbagi";
const setGroupSharing = "Tetapkan Berbagi Grup";
const owner = "Pemilik";
const organization = "Organisasi";
const everyone = "Semua orang (publik)";
const groups = "Grup:";
const type = "Jenis";
const mosaic = "Mosaik";
const itemGroup = "Grup Item";
const item = "Item";
const definitionQuery = "Kueri Definisi";
const groupItemsBy = "Kelompokkan Item Menurut";
const groupFieldName = "Kelompokkan Nama Kolom";
const tagFieldName = "Labeli Nama Kolom";
const noTitleTagErrorMsg = "Anda harus memberi judul untuk item dan label agar peta Anda ditemukan melalui pencarian.";
const noTitleErrorMsg = "Anda harus memberi judul pada item Anda.";
const noTagErrorMsg = "Anda harus menyediakan paling sedikit satu label untuk membantu orang menemukan item Anda melalui pencarian.";
const error = "Kesalahan";
const warning = "Peringatan";
const success = "Berhasil";
const details = "Detail:";
const tryAgain = "Coba Lagi";
const toolModeler = {
	save: "Simpan",
	editProperties: "Edit Properti",
	saveAs: "Simpan Sebagai",
	savingNotification: "Menyimpan perubahan ke item...",
	savingTitle: "Menyimpan",
	saveFailedMessage: "Gagal menyimpan perubahan.",
	saveWithErrorsMessage: "Perubahan disimpan dengan kesalahan berikut.",
	viewItemMessage: "Tampilkan item tersimpan",
	here: "di sini.",
	itemCreatedMessage: "Item baru telah dibuat.",
	clickToViewItemMessage: "Klik OK untuk menampilkan halaman detail item; klik Batal untuk melanjutkan.",
	readingFailed: "Gagal memuat template fungsi raster pilihan.",
	failedToLoadXML: "Gagal memuat template fungsi raster pilihan dalam format XML.",
	learnMore: "Pelajari selengkapnya",
	overwriteTitle: "Konfirmasikan menimpa",
	overwriteMessage: "Ingin menimpa item yang ada?",
	overwriteSuccessMessage: "Item telah diperbarui."
};
const toolEditor = {
	run: "Jalankan",
	save: "Simpan",
	deleteSelected: "Hapus Item yang Dipilih",
	addRaster: "Tambahkan Raster",
	addScalar: "Tambahkan Skalar",
	layout: "Tata Letak Otomatis",
	errorTitle: "Kesalahan",
	invalidToolMessage: "Template fungsi raster tidak valid.",
	out: "Keluar",
	zoomIn: "Perbesar",
	zoomOut: "Perkecil",
	zoomToFit: "Sesuaikan dengan Jendela",
	panOn: "Beralih ke mode pan",
	panOff: "Nonaktifkan mode pan",
	defaultModelName: "Model Alat",
	defaultRasterName: "Raster"
};
const toolDetailsEditor = {
	defaultToolName: "Template Fungsi Raster",
	defaultToolDescription: "Tambahkan ringkasan singkat tentang fungsi raster.",
	defaultHelpText: "Klik ikon bantuan untuk mengedit teks bantuan",
	editHelpTitle: "Edit Bantuan",
	saveLabel: "Simpan",
	cancelLabel: "Batalkan",
	thumbnail: {
		wrongImageType: "Jenis gambar yang salah dipilih",
		notAvailable: "Gambar mini tidak tersedia",
		loadError: "Tidak dapat memuat gambar",
		chooseFile: "Klik untuk memilih file"
	}
};
const saveUtils = {
	thumbnail: "Gambar mini",
	sharing: "Berbagi"
};
const close = "Tutup";
const unsavedWarningExisting = "Apakah Anda ingin menyimpan perubahan pada item <b>${itemTitle}</b>?";
const unsavedWarningNew = "Apakah Anda ingin menyimpan perubahan Anda?";
const saveAs = "Simpan Sebagai";
const dontSave = "Jangan Simpan";
const unsavedTitle = "Perubahan Belum Disimpan";
const invalidRFTMessage = "Template fungsi raster yang dibuat tidak valid.";
const errorTitle = "Kesalahan";
const breadcrumb = "Editor Fungsi Raster";
const breadcrumbEditor = "Konten > Editor Fungsi Raster";
const viewerModeTitle = "Hanya Dibaca";
const viewerModeMessage = "Item template fungsi raster bersifat baca saja. Perubahan tidak dapat disimpan.";
const userStartDirection = "Pilih sebuah fungsi untuk mulai mengembangkan template fungsi raster.";
const selectFunction = "Tambahkan Fungsi";
const deselectFunction = "Hapus Fungsi";
const dialogTitle = "Sistem";
const category = "Kategori";
const search = "Cari Fungsi Raster";
const categoryNames = {
	analysis: "Analisis",
	appearance: "Penampilan",
	classification: "Klasifikasi",
	conversion: "Konversi",
	correction: "Perbaikan",
	dataManagement: "Manajemen Data",
	distance: "Jarak",
	distanceLegacy: "Jarak (Lama)",
	hydrology: "Hidrologi",
	math: "Matematika",
	mathConditional: "Matematika: Kondisional",
	mathLogical: "Matematika: Logika",
	mathTrigonometric: "Matematika: Trigonometri",
	reclass: "Klasifikasi Ulang",
	statistical: "Statistik",
	surface: "Permukaan"
};
const commonStrings_id = {
	ok: ok,
	cancel: cancel,
	enterURL: enterURL,
	serviceURL: serviceURL,
	selectRaster: selectRaster,
	failedToLoadLayer: failedToLoadLayer,
	loadingLayer: loadingLayer,
	selectFeature: selectFeature,
	enterFURL: enterFURL,
	addRaster: addRaster,
	addScalar: addScalar,
	raster: raster,
	scalar: scalar,
	defaultModelName: defaultModelName,
	general: general,
	parameters: parameters,
	variables: variables,
	name: name,
	description: description,
	parameter: parameter,
	isPublic: isPublic,
	isDataset: isDataset,
	unknownPixelType: unknownPixelType,
	outputPixelType: outputPixelType,
	u8PixelType: u8PixelType,
	s8PixelType: s8PixelType,
	u16PixelType: u16PixelType,
	s16PixelType: s16PixelType,
	u32PixelType: u32PixelType,
	s32PixelType: s32PixelType,
	f32PixelType: f32PixelType,
	f64PixelType: f64PixelType,
	properties: properties,
	multidimensionalRules: multidimensionalRules,
	matchVariables: matchVariables,
	unionDimensions: unionDimensions,
	rasterFunctionEditor: rasterFunctionEditor,
	rfxLicenseInfo: rfxLicenseInfo,
	rasterFunctions: rasterFunctions,
	copy: copy,
	save: save,
	title: title,
	folder: folder,
	tags: tags,
	savingMessage: savingMessage,
	shareWith: shareWith,
	share: share,
	setSharingLevel: setSharingLevel,
	setGroupSharing: setGroupSharing,
	owner: owner,
	organization: organization,
	everyone: everyone,
	groups: groups,
	type: type,
	mosaic: mosaic,
	itemGroup: itemGroup,
	item: item,
	definitionQuery: definitionQuery,
	groupItemsBy: groupItemsBy,
	groupFieldName: groupFieldName,
	tagFieldName: tagFieldName,
	noTitleTagErrorMsg: noTitleTagErrorMsg,
	noTitleErrorMsg: noTitleErrorMsg,
	noTagErrorMsg: noTagErrorMsg,
	error: error,
	warning: warning,
	success: success,
	details: details,
	tryAgain: tryAgain,
	toolModeler: toolModeler,
	toolEditor: toolEditor,
	toolDetailsEditor: toolDetailsEditor,
	saveUtils: saveUtils,
	close: close,
	unsavedWarningExisting: unsavedWarningExisting,
	unsavedWarningNew: unsavedWarningNew,
	saveAs: saveAs,
	dontSave: dontSave,
	unsavedTitle: unsavedTitle,
	invalidRFTMessage: invalidRFTMessage,
	errorTitle: errorTitle,
	breadcrumb: breadcrumb,
	breadcrumbEditor: breadcrumbEditor,
	viewerModeTitle: viewerModeTitle,
	viewerModeMessage: viewerModeMessage,
	userStartDirection: userStartDirection,
	selectFunction: selectFunction,
	deselectFunction: deselectFunction,
	dialogTitle: dialogTitle,
	category: category,
	search: search,
	categoryNames: categoryNames
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (commonStrings_id);


//# sourceMappingURL=common-strings.id-8b048c90.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,