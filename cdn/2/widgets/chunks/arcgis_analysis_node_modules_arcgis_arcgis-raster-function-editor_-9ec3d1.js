"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_arcgis-raster-function-editor_-9ec3d1"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/help-texts.pt-PT-1ddbad3e.js":
/*!*************************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/help-texts.pt-PT-1ddbad3e.js ***!
  \*************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   rfxArgsHelpTexts: () => (/* binding */ rfxArgsHelpTexts)
/* harmony export */ });
const rfxArgsHelpTexts = {
	"@@Abs_Cellsize-Type_tag0@@": "Escolha qual o tamanho da célula a utilizar no raster de saída. Se todos os tamanhos da célula de entrada forem os mesmos, todas as opções irão produzir os mesmos resultados.",
	"@@Abs_Cellsize-Type_tag1@@": "Primeiro De--Utiliza o primeiro tamanho da célula dos rasters de entrada.",
	"@@Abs_Cellsize-Type_tag2@@": "Último De--Utiliza o último tamanho da célula dos rasters de entrada.",
	"@@Abs_Cellsize-Type_tag3@@": "Máximo De--Utiliza o maior tamanho da célula de todos os rasters de entrada. Isto é por omissão.",
	"@@Abs_Cellsize-Type_tag4@@": "Média De--Utiliza o tamanho da célula médio de todos os rasters de entrada.",
	"@@Abs_Cellsize-Type_tag5@@": "Mín. De--Utiliza o menor tamanho da célula de todos os rasters de entrada.",
	"@@Abs_Extent-Type_tag0@@": "Escolha qual a extensão que deve ser utilizada no raster de saída:",
	"@@Abs_Extent-Type_tag1@@": "Primeiro De--Utiliza a extensão do primeiro raster de entrada para determinar a extensão de processamento.",
	"@@Abs_Extent-Type_tag2@@": "Interseção De--Utiliza a extensão dos pixéis sobrepostos para determinar a extensão de processamento. Isto é por omissão.",
	"@@Abs_Extent-Type_tag3@@": "Último De--Utiliza a extensão do último raster de entrada para determinar a extensão de processamento.",
	"@@Abs_Extent-Type_tag4@@": "União De--Utiliza a extensão de todos os rasters para determinar a extensão de processamento.",
	"@@Abs_Raster_tag0@@": "O raster de entrada para o qual se calculam os valores absolutos.",
	"@@ACos_Cellsize-Type_tag0@@": "Escolha qual o tamanho da célula a utilizar no raster de saída. Se todos os tamanhos da célula de entrada forem os mesmos, todas as opções irão produzir os mesmos resultados.",
	"@@ACos_Cellsize-Type_tag1@@": "Primeiro De--Utiliza o primeiro tamanho da célula dos rasters de entrada.",
	"@@ACos_Cellsize-Type_tag2@@": "Último De--Utiliza o último tamanho da célula dos rasters de entrada.",
	"@@ACos_Cellsize-Type_tag3@@": "Máximo De--Utiliza o maior tamanho da célula de todos os rasters de entrada. Isto é por omissão.",
	"@@ACos_Cellsize-Type_tag4@@": "Média De--Utiliza o tamanho da célula médio de todos os rasters de entrada.",
	"@@ACos_Cellsize-Type_tag5@@": "Mín. De--Utiliza o menor tamanho da célula de todos os rasters de entrada.",
	"@@ACos_Extent-Type_tag0@@": "Escolha qual a extensão que deve ser utilizada no raster de saída:",
	"@@ACos_Extent-Type_tag1@@": "Primeiro De--Utiliza a extensão do primeiro raster de entrada para determinar a extensão de processamento.",
	"@@ACos_Extent-Type_tag2@@": "Interseção De--Utiliza a extensão dos pixéis sobrepostos para determinar a extensão de processamento. Isto é por omissão.",
	"@@ACos_Extent-Type_tag3@@": "Último De--Utiliza a extensão do último raster de entrada para determinar a extensão de processamento.",
	"@@ACos_Extent-Type_tag4@@": "União De--Utiliza a extensão de todos os rasters para determinar a extensão de processamento.",
	"@@ACos_Raster_tag0@@": "A entrada para a qual calcular os valores de cosseno inverso.",
	"@@ACosH_Cellsize-Type_tag0@@": "Escolha qual o tamanho da célula a utilizar no raster de saída. Se todos os tamanhos da célula de entrada forem os mesmos, todas as opções irão produzir os mesmos resultados.",
	"@@ACosH_Cellsize-Type_tag1@@": "Primeiro De--Utiliza o primeiro tamanho da célula dos rasters de entrada.",
	"@@ACosH_Cellsize-Type_tag2@@": "Último De--Utiliza o último tamanho da célula dos rasters de entrada.",
	"@@ACosH_Cellsize-Type_tag3@@": "Máximo De--Utiliza o maior tamanho da célula de todos os rasters de entrada. Isto é por omissão.",
	"@@ACosH_Cellsize-Type_tag4@@": "Média De--Utiliza o tamanho da célula médio de todos os rasters de entrada.",
	"@@ACosH_Cellsize-Type_tag5@@": "Mín. De--Utiliza o menor tamanho da célula de todos os rasters de entrada.",
	"@@ACosH_Extent-Type_tag0@@": "Escolha qual a extensão que deve ser utilizada no raster de saída:",
	"@@ACosH_Extent-Type_tag1@@": "Primeiro De--Utiliza a extensão do primeiro raster de entrada para determinar a extensão de processamento.",
	"@@ACosH_Extent-Type_tag2@@": "Interseção De--Utiliza a extensão dos pixéis sobrepostos para determinar a extensão de processamento. Isto é por omissão.",
	"@@ACosH_Extent-Type_tag3@@": "Último De--Utiliza a extensão do último raster de entrada para determinar a extensão de processamento.",
	"@@ACosH_Extent-Type_tag4@@": "União De--Utiliza a extensão de todos os rasters para determinar a extensão de processamento.",
	"@@ACosH_Raster_tag0@@": "A entrada para a qual calcular os valores de cosseno hiperbólico inverso.",
	"@@Apparent-Reflectance_Albedo_tag0@@": "Os resultados da função de Refletância Aparente também podem ser expressos como albedo, que é a percentagem da energia disponível refletida pela superfície planetária. Os dados de albedo são usados por utilizadores científicos para aplicações complexas de modelação e de deteção remota técnica.",
	"@@Apparent-Reflectance_Albedo_tag1@@": "Não verificado--A função devolve valores de refletância aparente. Isto é por omissão.",
	"@@Apparent-Reflectance_Albedo_tag2@@": "Verificado--A função devolve valores de ponto flutuante de 32 bits, que geralmente se encontram no intervalo de 0,0 a 1,0. Não é realizado qualquer recorte de dados, se esta opção for selecionada.",
	"@@Apparent-Reflectance_Albedo_tag3@@": "Uma vez que o tipo de dados de saída para albedo é de tipo ponto flutuante, deve definir explicitamente o <strong>Tipo de Píxel de Saída</strong> preferido para flutuação de 32 bits ou dupla de 64 bits. O parâmetro <strong>Tipo de Píxel de Saída</strong> encontra-se no separador <strong>Geral</strong> na função raster <strong>Refletância Aparente</strong>. Se <strong>Tipo de Píxel de Saída</strong> não for definido corretamente para a opção <strong>Albedo</strong>, os valores resultantes serão inválidos e será apresentado um valor de 0.",
	"@@Apparent-Reflectance_Offset_tag0@@": "O seu valor albedo dimensionado pode, opcionalmente, ter um valor de desvio:",
	"@@Apparent-Reflectance_Offset_tag1@@": "Para os tipos de dados não registados de 16 bits, o desvio da escala predefinido é de 5000.",
	"@@Apparent-Reflectance_Offset_tag2@@": "Para os tipos de dados não registados de 8 bits, o desvio da escala predefinido é de 0.",
	"@@Apparent-Reflectance_Offset_tag3@@": "Não é aplicada nenhuma escala quando a saída é albedo.",
	"@@Apparent-Reflectance_Radiance-Gains-and-Bias-Values-per-Band_tag0@@": "Pode definir ou editar manualmente este valor para cada banda. As informações adequadas podem ser lidas a partir dos metadados do produto de raster de entrada.",
	"@@Apparent-Reflectance_Raster_tag0@@": "O produto raster no qual será aplicada a refletância aparente.",
	"@@Apparent-Reflectance_Scale-Factor_tag0@@": "O seu valor de saída de refletância aparente pode ser expresso como um número inteiro. O fator de escala é multiplicado pelo albedo para converter todos os valores de ponto flutuante em valores inteiros.",
	"@@Apparent-Reflectance_Scale-Factor_tag1@@": "Se o fator de escala for ${0} ou não for especificado, será aplicada uma escala predefinida dependendo do tipo de píxel dos dados de entrada:",
	"@@Apparent-Reflectance_Scale-Factor_tag2@@": "Para tipos de dados não registados de 16 bits, o fator de escala predefinido é de 50.000.",
	"@@Apparent-Reflectance_Scale-Factor_tag3@@": "Para tipos de dados não registados de 8 bits, o fator de escala predefinido é de 255.",
	"@@Apparent-Reflectance_Scale-Factor_tag4@@": "O fator de escala é sempre aplicado quando a saída é refletância aparente. Não é aplicada nenhuma escala quando a saída é albedo.",
	"@@Apparent-Reflectance_Sun-Elevation_tag0@@": "Este é o valor de elevação do sol, expresso em graus. Este será preenchido pelo sistema se as informações adequadas puderem ser lidas a partir dos metadados. Pode definir ou editar manualmente este valor.",
	"@@ArgStatistics_Max_tag0@@": "O valor máximo que definiu é o valor mais elevado igual ou inferior ao final da duração.",
	"@@ArgStatistics_Max_tag1@@": "Esta entrada é aplicável apenas quando o método é Duração.",
	"@@ArgStatistics_Method_tag0@@": "Selecione o método estatístico para calcular:",
	"@@ArgStatistics_Method_tag1@@": "Máx. do Arg.--O argumento do máximo, que devolve o ${Band index} para o qual o píxel dado atinge o seu valor mínimo de todas as bandas. Todas as bandas raster a partir de cada raster de entrada são atribuídas a um índice de banda incremental com base em 0, que é primeiro ordenado pelo índice do raster de entrada e, em seguida, pela ordem de banda relativa dentro de cada raster de entrada.",
	"@@ArgStatistics_Method_tag2@@": "Mediana do Arg.--O argumento da mediana, que devolve o ${Band index} para o qual o píxel dado atinge o seu valor mediano dos valores de todas as bandas.",
	"@@ArgStatistics_Method_tag3@@": "Mín. do Arg.--O argumento do mínimo, que devolve o ${Band index} para o qual o píxel dado atinge o seu valor mínimo de todas as bandas.",
	"@@ArgStatistics_Method_tag4@@": "Duração--O método Duração encontra os elementos consecutivos mais longos na matriz, onde cada elemento tem um valor maior ou igual a <strong>Min</strong> e menor ou igual a <strong>Max</strong> e, em seguida, devolve o seu comprimento.",
	"@@ArgStatistics_Min_tag0@@": "O valor mínimo que definiu é o valor mais baixo igual ou maior ao início da duração.",
	"@@ArgStatistics_Min_tag1@@": "Esta entrada é aplicável apenas quando o método é Duração.",
	"@@ArgStatistics_Rasters_tag0@@": "O raster de entrada sobre o qual irá efetuar os vários métodos estatísticos.",
	"@@ArgStatistics_Undefined-Class_tag0@@": "Uma entrada constante que será devolvida quando não for possível obter um valor máximo, mínimo ou mediano definitivo. O cenário mais comum é o momento em que o valor máximo ou mínimo ocorre mais do que uma vez entre valores de todas as bandas. O valor predefinido para a constante indefinida é 100.",
	"@@ArgStatistics_Undefined-Class_tag1@@": "A classe indefinida só é aplicável quando o método é <strong>ArgMax</strong>, <strong>ArgMin</strong> ou <strong>ArgMedian</strong>.",
	"@@ArgStatistics_ignorenodata_tag0@@": "Indica se os valores NoData são ignorados pelo cálculo estatístico.",
	"@@ArgStatistics_ignorenodata_tag1@@": "Selecionado: a análise irá incluir todos os píxeis válidos nos rasters de entrada e ignorar quaisquer píxeis NoData.",
	"@@ArgStatistics_ignorenodata_tag2@@": "Não selecionado: a análise irá resultar em NoData se existirem valores NoData para os píxeis nos rasters de entrada. Esta é a predefinição.",
	"@@Arithmetic_Cellsize-Type_tag0@@": "Escolha qual o tamanho da célula a utilizar no raster de saída. Se todos os tamanhos da célula de entrada forem os mesmos, todas as opções irão produzir os mesmos resultados.",
	"@@Arithmetic_Cellsize-Type_tag1@@": "Primeiro De--Utiliza o primeiro tamanho da célula dos rasters de entrada.",
	"@@Arithmetic_Cellsize-Type_tag2@@": "Último De--Utiliza o último tamanho da célula dos rasters de entrada.",
	"@@Arithmetic_Cellsize-Type_tag3@@": "Máximo De--Utiliza o maior tamanho da célula de todos os rasters de entrada. Isto é por omissão.",
	"@@Arithmetic_Cellsize-Type_tag4@@": "Média De--Utiliza o tamanho da célula médio de todos os rasters de entrada.",
	"@@Arithmetic_Cellsize-Type_tag5@@": "Mín. De--Utiliza o menor tamanho da célula de todos os rasters de entrada.",
	"@@Arithmetic_Extent-Type_tag0@@": "Escolha qual a extensão que deve ser utilizada no raster de saída:",
	"@@Arithmetic_Extent-Type_tag1@@": "Primeiro De--Utiliza a extensão do primeiro raster de entrada para determinar a extensão de processamento.",
	"@@Arithmetic_Extent-Type_tag2@@": "Interseção De--Utiliza a extensão dos pixéis sobrepostos para determinar a extensão de processamento. Isto é por omissão.",
	"@@Arithmetic_Extent-Type_tag3@@": "Último De--Utiliza a extensão do último raster de entrada para determinar a extensão de processamento.",
	"@@Arithmetic_Extent-Type_tag4@@": "União De--Utiliza a extensão de todos os rasters para determinar a extensão de processamento.",
	"@@Arithmetic_Operation_tag0@@": "A operação aritmética a ser realizada entre os dois rasters de entrada.",
	"@@Arithmetic_Operation_tag1@@": "As opções são as seguintes:",
	"@@Arithmetic_Operation_tag2@@": "<strong>Divisão</strong>--Exporta o resultado divisível entre os valores de píxel correspondentes para cada raster.",
	"@@Arithmetic_Operation_tag4@@": "<strong>Menos</strong>--Exporta a diferença entre os valores de píxel correspondentes para cada raster. Isto pode ser utilizado para calcular a deteção de alterações.",
	"@@Arithmetic_Operation_tag6@@": "<strong>Modo</strong>--Exporta o valor de píxel de todos os píxeis sobrepostos que ocorrem com mais frequência. Por exemplo, se existirem seis bandas num raster, existirão seis pixéis sobrepostos. Para os valores 4, 5, 6, 4, 7, 9, o valor do modo é 4.",
	"@@Arithmetic_Operation_tag8@@": "<strong>Multiplicação</strong>--Exporta o produto dos valores de píxel correspondentes para cada raster. Isto pode ser utilizado para realizar algumas funções de custo.",
	"@@Arithmetic_Operation_tag10@@": "<strong>Adição</strong>--Exporta a soma de todos os valores de píxel correspondentes para cada raster.",
	"@@Arithmetic_Operation_tag12@@": "<strong>Potência</strong>--Exporta o produto dos valores de píxel correspondentes elevados à potência da escala ou raster de entrada.",
	"@@Arithmetic_Raster_tag0@@": "O primeiro conjunto de dados raster de entrada.",
	"@@Arithmetic_Raster2_tag0@@": "O segundo conjunto de dados raster de entrada.",
	"@@ASin_Cellsize-Type_tag0@@": "Escolha qual o tamanho da célula a utilizar no raster de saída. Se todos os tamanhos da célula de entrada forem os mesmos, todas as opções irão produzir os mesmos resultados.",
	"@@ASin_Cellsize-Type_tag1@@": "Primeiro De--Utiliza o primeiro tamanho da célula dos rasters de entrada.",
	"@@ASin_Cellsize-Type_tag2@@": "Último De--Utiliza o último tamanho da célula dos rasters de entrada.",
	"@@ASin_Cellsize-Type_tag3@@": "Máximo De--Utiliza o maior tamanho da célula de todos os rasters de entrada. Isto é por omissão.",
	"@@ASin_Cellsize-Type_tag4@@": "Média De--Utiliza o tamanho da célula médio de todos os rasters de entrada.",
	"@@ASin_Cellsize-Type_tag5@@": "Mín. De--Utiliza o menor tamanho da célula de todos os rasters de entrada.",
	"@@ASin_Extent-Type_tag0@@": "Escolha qual a extensão que deve ser utilizada no raster de saída:",
	"@@ASin_Extent-Type_tag1@@": "Primeiro De--Utiliza a extensão do primeiro raster de entrada para determinar a extensão de processamento.",
	"@@ASin_Extent-Type_tag2@@": "Interseção De--Utiliza a extensão dos pixéis sobrepostos para determinar a extensão de processamento. Isto é por omissão.",
	"@@ASin_Extent-Type_tag3@@": "Último De--Utiliza a extensão do último raster de entrada para determinar a extensão de processamento.",
	"@@ASin_Extent-Type_tag4@@": "União De--Utiliza a extensão de todos os rasters para determinar a extensão de processamento.",
	"@@ASin_Raster_tag0@@": "A entrada para a qual calcular os valores de seno inverso.",
	"@@ASinH_Cellsize-Type_tag0@@": "Escolha qual o tamanho da célula a utilizar no raster de saída. Se todos os tamanhos da célula de entrada forem os mesmos, todas as opções irão produzir os mesmos resultados.",
	"@@ASinH_Cellsize-Type_tag1@@": "Primeiro De--Utiliza o primeiro tamanho da célula dos rasters de entrada.",
	"@@ASinH_Cellsize-Type_tag2@@": "Último De--Utiliza o último tamanho da célula dos rasters de entrada.",
	"@@ASinH_Cellsize-Type_tag3@@": "Máximo De--Utiliza o maior tamanho da célula de todos os rasters de entrada. Isto é por omissão.",
	"@@ASinH_Cellsize-Type_tag4@@": "Média De--Utiliza o tamanho da célula médio de todos os rasters de entrada.",
	"@@ASinH_Cellsize-Type_tag5@@": "Mín. De--Utiliza o menor tamanho da célula de todos os rasters de entrada.",
	"@@ASinH_Extent-Type_tag0@@": "Escolha qual a extensão que deve ser utilizada no raster de saída:",
	"@@ASinH_Extent-Type_tag1@@": "Primeiro De--Utiliza a extensão do primeiro raster de entrada para determinar a extensão de processamento.",
	"@@ASinH_Extent-Type_tag2@@": "Interseção De--Utiliza a extensão dos pixéis sobrepostos para determinar a extensão de processamento. Isto é por omissão.",
	"@@ASinH_Extent-Type_tag3@@": "Último De--Utiliza a extensão do último raster de entrada para determinar a extensão de processamento.",
	"@@ASinH_Extent-Type_tag4@@": "União De--Utiliza a extensão de todos os rasters para determinar a extensão de processamento.",
	"@@ASinH_Raster_tag0@@": "A entrada para a qual calcular os valores de seno hiperbólico inverso.",
	"@@Aspect_Raster_tag0@@": "O DEM de entrada utilizado para derivar o conjunto de dados de aspeto.",
	"@@Aspect-Slope_Raster_tag0@@": "O DEM de entrada.",
	"@@Aspect-Slope_Z-Factor_tag0@@": "Um fator de escala utilizado para converter os valores de elevação, com os dois objetivos seguintes:",
	"@@Aspect-Slope_Z-Factor_tag1@@": "Converter as unidades de elevação (tais como metros ou pés) nas unidades de coordenadas horizontais do conjunto de dados, que podem estar em pés, metros ou graus.",
	"@@Aspect-Slope_Z-Factor_tag2@@": "Adicionar exagero vertical para criar efeito visual.",
	"@@ATan_Cellsize-Type_tag0@@": "Escolha qual o tamanho da célula a utilizar no raster de saída. Se todos os tamanhos da célula de entrada forem os mesmos, todas as opções irão produzir os mesmos resultados.",
	"@@ATan_Cellsize-Type_tag1@@": "Primeiro De--Utiliza o primeiro tamanho da célula dos rasters de entrada.",
	"@@ATan_Cellsize-Type_tag2@@": "Último De--Utiliza o último tamanho da célula dos rasters de entrada.",
	"@@ATan_Cellsize-Type_tag3@@": "Máximo De--Utiliza o maior tamanho da célula de todos os rasters de entrada. Isto é por omissão.",
	"@@ATan_Cellsize-Type_tag4@@": "Média De--Utiliza o tamanho da célula médio de todos os rasters de entrada.",
	"@@ATan_Cellsize-Type_tag5@@": "Mín. De--Utiliza o menor tamanho da célula de todos os rasters de entrada.",
	"@@ATan_Extent-Type_tag0@@": "Escolha qual a extensão que deve ser utilizada no raster de saída:",
	"@@ATan_Extent-Type_tag1@@": "Primeiro De--Utiliza a extensão do primeiro raster de entrada para determinar a extensão de processamento.",
	"@@ATan_Extent-Type_tag2@@": "Interseção De--Utiliza a extensão dos pixéis sobrepostos para determinar a extensão de processamento. Isto é por omissão.",
	"@@ATan_Extent-Type_tag3@@": "Último De--Utiliza a extensão do último raster de entrada para determinar a extensão de processamento.",
	"@@ATan_Extent-Type_tag4@@": "União De--Utiliza a extensão de todos os rasters para determinar a extensão de processamento.",
	"@@ATan_Raster_tag0@@": "A entrada para a qual calcular os valores de tangente inversa.",
	"@@ATan2_Cellsize-Type_tag0@@": "Escolha qual o tamanho da célula a utilizar no raster de saída. Se todos os tamanhos da célula de entrada forem os mesmos, todas as opções irão produzir os mesmos resultados.",
	"@@ATan2_Cellsize-Type_tag1@@": "Primeiro De--Utiliza o primeiro tamanho da célula dos rasters de entrada.",
	"@@ATan2_Cellsize-Type_tag2@@": "Último De--Utiliza o último tamanho da célula dos rasters de entrada.",
	"@@ATan2_Cellsize-Type_tag3@@": "Máximo De--Utiliza o maior tamanho da célula de todos os rasters de entrada. Isto é por omissão.",
	"@@ATan2_Cellsize-Type_tag4@@": "Média De--Utiliza o tamanho da célula médio de todos os rasters de entrada.",
	"@@ATan2_Cellsize-Type_tag5@@": "Mín. De--Utiliza o menor tamanho da célula de todos os rasters de entrada.",
	"@@ATan2_Extent-Type_tag0@@": "Escolha qual a extensão que deve ser utilizada no raster de saída:",
	"@@ATan2_Extent-Type_tag1@@": "Primeiro De--Utiliza a extensão do primeiro raster de entrada para determinar a extensão de processamento.",
	"@@ATan2_Extent-Type_tag2@@": "Interseção De--Utiliza a extensão dos pixéis sobrepostos para determinar a extensão de processamento. Isto é por omissão.",
	"@@ATan2_Extent-Type_tag3@@": "Último De--Utiliza a extensão do último raster de entrada para determinar a extensão de processamento.",
	"@@ATan2_Extent-Type_tag4@@": "União De--Utiliza a extensão de todos os rasters para determinar a extensão de processamento.",
	"@@ATan2_Raster_tag0@@": "A entrada que especifica o numerador, ou o valor y, a utilizar ao calcular a tangente inversa.",
	"@@ATan2_Raster2_tag0@@": "A entrada que especifica o denominador, ou o valor x, a utilizar ao calcular a tangente inversa.",
	"@@ATanH_Cellsize-Type_tag0@@": "Escolha qual o tamanho da célula a utilizar no raster de saída. Se todos os tamanhos da célula de entrada forem os mesmos, todas as opções irão produzir os mesmos resultados.",
	"@@ATanH_Cellsize-Type_tag1@@": "Primeiro De--Utiliza o primeiro tamanho da célula dos rasters de entrada.",
	"@@ATanH_Cellsize-Type_tag2@@": "Último De--Utiliza o último tamanho da célula dos rasters de entrada.",
	"@@ATanH_Cellsize-Type_tag3@@": "Máximo De--Utiliza o maior tamanho da célula de todos os rasters de entrada. Isto é por omissão.",
	"@@ATanH_Cellsize-Type_tag4@@": "Média De--Utiliza o tamanho da célula médio de todos os rasters de entrada.",
	"@@ATanH_Cellsize-Type_tag5@@": "Mín. De--Utiliza o menor tamanho da célula de todos os rasters de entrada.",
	"@@ATanH_Extent-Type_tag0@@": "Escolha qual a extensão que deve ser utilizada no raster de saída:",
	"@@ATanH_Extent-Type_tag1@@": "Primeiro De--Utiliza a extensão do primeiro raster de entrada para determinar a extensão de processamento.",
	"@@ATanH_Extent-Type_tag2@@": "Interseção De--Utiliza a extensão dos pixéis sobrepostos para determinar a extensão de processamento. Isto é por omissão.",
	"@@ATanH_Extent-Type_tag3@@": "Último De--Utiliza a extensão do último raster de entrada para determinar a extensão de processamento.",
	"@@ATanH_Extent-Type_tag4@@": "União De--Utiliza a extensão de todos os rasters para determinar a extensão de processamento.",
	"@@ATanH_Raster_tag0@@": "A entrada para a qual calcular os valores da tangente hiperbólica inversa.",
	"@@Attribute-Table_Raster_tag0@@": "O raster de entrada.",
	"@@Attribute-Table_Table-Type_tag0@@": "A tabela de atributos de entrada pode ser introduzida usando o tipo <strong>Manual</strong> onde atribui um nome de classe e uma cor a cada valor, ou pode consultar uma tabela existente que tem origem num ficheiro ${.dbf}.",
	"@@Band-Arithmetic_Band-Indexes_tag0@@": "Defina a sua fórmula aritmética de banda caso tenha escolhido <strong>Definido pelo Utilizador</strong> para o seu <strong>Método</strong>.",
	"@@Band-Arithmetic_Band-Indexes_tag5@@": "Se escolheu um índice predefinido para o seu <strong>Método</strong>, defina as bandas adequadas do seu conjunto de dados raster de entrada que correspondem ao índice.",
	"@@Band-Arithmetic_Method_tag0@@": "O tipo de algoritmo aritmético de banda que pretende implementar. Pode definir o seu algoritmo personalizado, ou escolher um índice predefinido.",
	"@@Band-Arithmetic_Method_tag1@@": "<strong>BAI</strong>--Índice de Área Queimada",
	"@@Band-Arithmetic_Method_tag2@@": "<strong>CIg</strong>--Índice de Clorofila - Verde",
	"@@Band-Arithmetic_Method_tag3@@": "<strong>CIre</strong>--Índice de Clorofila - Extremidade Vermelha",
	"@@Band-Arithmetic_Method_tag4@@": "<strong>Minerais de Argila</strong>--Rácio de Minerais de Argila",
	"@@Band-Arithmetic_Method_tag5@@": "<strong>EVI</strong>--Índice de Vegetação Melhorado",
	"@@Band-Arithmetic_Method_tag6@@": "<strong>Minerais Ferrosos</strong>--Rácio de Minerais Ferrosos",
	"@@Band-Arithmetic_Method_tag7@@": "<strong>GEMI</strong>--Índice de Monitorização Ambiental Global",
	"@@Band-Arithmetic_Method_tag8@@": "<strong>GNDVI</strong>--Índice de Vegetação de Diferença Normalizada",
	"@@Band-Arithmetic_Method_tag9@@": "<strong>GVI (Landsat TM)</strong>--Índice de Vegetação Verde - Landsat TM",
	"@@Band-Arithmetic_Method_tag10@@": "<strong>Óxido de Ferro</strong>--Rácio de Óxido de Ferro",
	"@@Band-Arithmetic_Method_tag11@@": "<strong>MNDWI</strong>--Índice de Água de Diferença Normalizada Modificado",
	"@@Band-Arithmetic_Method_tag12@@": "<strong>MTVI2</strong>--Índice de Vegetação Triangulada Modificado (segunda iteração)",
	"@@Band-Arithmetic_Method_tag13@@": "<strong>SAVI Modificado</strong>--Índice de Vegetação Ajustado ao Solo Modificado",
	"@@Band-Arithmetic_Method_tag14@@": "<strong>NBR</strong>--Índice de Área Queimada Normalizado",
	"@@Band-Arithmetic_Method_tag15@@": "<strong>NDBI</strong>--Índice de Acumulação de Diferença Normalizada",
	"@@Band-Arithmetic_Method_tag16@@": "<strong>NDMI</strong>--Índice de Humidade de Diferença Normalizada",
	"@@Band-Arithmetic_Method_tag17@@": "<strong>NDSI</strong>--Índice de Neve de Diferença Normalizada",
	"@@Band-Arithmetic_Method_tag18@@": "<strong>NDVI</strong>--Índice de Vegetação de Diferença Normalizada",
	"@@Band-Arithmetic_Method_tag19@@": "<strong>NDVIre</strong>---Índice de Vegetação de Diferença Normalizada da Extremidade Vermelha",
	"@@Band-Arithmetic_Method_tag20@@": "<strong>NDWI</strong>--Índice de Água de Diferença Normalizada",
	"@@Band-Arithmetic_Method_tag21@@": "<strong>PVI</strong>--Índice de Vegetação Perpendicular",
	"@@Band-Arithmetic_Method_tag22@@": "<strong>RTVICore</strong>--Índice de Vegetação Triangulada da Extremidade Vermelha",
	"@@Band-Arithmetic_Method_tag23@@": "<strong>SAVI</strong>--Índice de Vegetação Ajustado ao Solo",
	"@@Band-Arithmetic_Method_tag24@@": "<strong>SR</strong>--Rácio Simples",
	"@@Band-Arithmetic_Method_tag25@@": "<strong>SRre</strong>--Rácio Simples de Extremidade Vermelha",
	"@@Band-Arithmetic_Method_tag26@@": "<strong>Fórmula de Sultan</strong>--Fórmula de Sultan",
	"@@Band-Arithmetic_Method_tag27@@": "<strong>SAVI Transformado</strong>--Índice de Vegetação Ajustado ao Solo Transformado",
	"@@Band-Arithmetic_Method_tag28@@": "<strong>Definido por Utilizador</strong>--Permite-lhe definir a sua expressão da banda aritmética personalizada.",
	"@@Band-Arithmetic_Method_tag29@@": "<strong>VARI</strong>--Índice Resistente Atmosfericamente Visível",
	"@@Band-Arithmetic_Method_tag30@@": "<strong>WNDWI</strong>--Índice de Água de Diferença Normalizada Ponderado",
	"@@Band-Arithmetic_Raster_tag0@@": "O raster de entrada.",
	"@@Binary-Thresholding_Raster_tag0@@": "O raster de entrada.",
	"@@Bitwise-And_Cellsize-Type_tag0@@": "Escolha qual o tamanho da célula a utilizar no raster de saída. Se todos os tamanhos da célula de entrada forem os mesmos, todas as opções irão produzir os mesmos resultados.",
	"@@Bitwise-And_Cellsize-Type_tag1@@": "Primeiro De--Utiliza o primeiro tamanho da célula dos rasters de entrada.",
	"@@Bitwise-And_Cellsize-Type_tag2@@": "Último De--Utiliza o último tamanho da célula dos rasters de entrada.",
	"@@Bitwise-And_Cellsize-Type_tag3@@": "Máximo De--Utiliza o maior tamanho da célula de todos os rasters de entrada. Isto é por omissão.",
	"@@Bitwise-And_Cellsize-Type_tag4@@": "Média De--Utiliza o tamanho da célula médio de todos os rasters de entrada.",
	"@@Bitwise-And_Cellsize-Type_tag5@@": "Mín. De--Utiliza o menor tamanho da célula de todos os rasters de entrada.",
	"@@Bitwise-And_Extent-Type_tag0@@": "Escolha qual a extensão que deve ser utilizada no raster de saída:",
	"@@Bitwise-And_Extent-Type_tag1@@": "Primeiro De--Utiliza a extensão do primeiro raster de entrada para determinar a extensão de processamento.",
	"@@Bitwise-And_Extent-Type_tag2@@": "Interseção De--Utiliza a extensão dos pixéis sobrepostos para determinar a extensão de processamento. Isto é por omissão.",
	"@@Bitwise-And_Extent-Type_tag3@@": "Último De--Utiliza a extensão do último raster de entrada para determinar a extensão de processamento.",
	"@@Bitwise-And_Extent-Type_tag4@@": "União De--Utiliza a extensão de todos os rasters para determinar a extensão de processamento.",
	"@@Bitwise-And_Raster_tag0@@": "A primeira entrada a utilizar nesta operação bitwise.",
	"@@Bitwise-And_Raster_tag1@@": "Pode ser utilizado um valor constante como entrada para este parâmetro, desde que seja especificado um raster para o outro parâmetro.",
	"@@Bitwise-And_Raster2_tag0@@": "A segunda entrada a utilizar nesta operação bitwise.",
	"@@Bitwise-And_Raster2_tag1@@": "Pode ser utilizado um valor constante como entrada para este parâmetro, desde que seja especificado um raster para o outro parâmetro.",
	"@@Bitwise-Left-Shift_Cellsize-Type_tag0@@": "Escolha qual o tamanho da célula a utilizar no raster de saída. Se todos os tamanhos da célula de entrada forem os mesmos, todas as opções irão produzir os mesmos resultados.",
	"@@Bitwise-Left-Shift_Cellsize-Type_tag1@@": "Primeiro De--Utiliza o primeiro tamanho da célula dos rasters de entrada.",
	"@@Bitwise-Left-Shift_Cellsize-Type_tag2@@": "Último De--Utiliza o último tamanho da célula dos rasters de entrada.",
	"@@Bitwise-Left-Shift_Cellsize-Type_tag3@@": "Máximo De--Utiliza o maior tamanho da célula de todos os rasters de entrada. Isto é por omissão.",
	"@@Bitwise-Left-Shift_Cellsize-Type_tag4@@": "Média De--Utiliza o tamanho da célula médio de todos os rasters de entrada.",
	"@@Bitwise-Left-Shift_Cellsize-Type_tag5@@": "Mín. De--Utiliza o menor tamanho da célula de todos os rasters de entrada.",
	"@@Bitwise-Left-Shift_Extent-Type_tag0@@": "Escolha qual a extensão que deve ser utilizada no raster de saída:",
	"@@Bitwise-Left-Shift_Extent-Type_tag1@@": "Primeiro De--Utiliza a extensão do primeiro raster de entrada para determinar a extensão de processamento.",
	"@@Bitwise-Left-Shift_Extent-Type_tag2@@": "Interseção De--Utiliza a extensão dos pixéis sobrepostos para determinar a extensão de processamento. Isto é por omissão.",
	"@@Bitwise-Left-Shift_Extent-Type_tag3@@": "Último De--Utiliza a extensão do último raster de entrada para determinar a extensão de processamento.",
	"@@Bitwise-Left-Shift_Extent-Type_tag4@@": "União De--Utiliza a extensão de todos os rasters para determinar a extensão de processamento.",
	"@@Bitwise-Left-Shift_Raster_tag0@@": "A entrada na qual efetuar a deslocação.",
	"@@Bitwise-Left-Shift_Raster_tag1@@": "Pode ser utilizado um valor constante como entrada para este parâmetro, desde que seja especificado um raster para o outro parâmetro.",
	"@@Bitwise-Left-Shift_Raster2_tag0@@": "A entrada que define o número de posições para deslocação dos bits.",
	"@@Bitwise-Left-Shift_Raster2_tag1@@": "Pode ser utilizado um valor constante como entrada para este parâmetro, desde que seja especificado um raster para o outro parâmetro.",
	"@@Bitwise-Not_Cellsize-Type_tag0@@": "Escolha qual o tamanho da célula a utilizar no raster de saída. Se todos os tamanhos da célula de entrada forem os mesmos, todas as opções irão produzir os mesmos resultados.",
	"@@Bitwise-Not_Cellsize-Type_tag1@@": "Primeiro De--Utiliza o primeiro tamanho da célula dos rasters de entrada.",
	"@@Bitwise-Not_Cellsize-Type_tag2@@": "Último De--Utiliza o último tamanho da célula dos rasters de entrada.",
	"@@Bitwise-Not_Cellsize-Type_tag3@@": "Máximo De--Utiliza o maior tamanho da célula de todos os rasters de entrada. Isto é por omissão.",
	"@@Bitwise-Not_Cellsize-Type_tag4@@": "Média De--Utiliza o tamanho da célula médio de todos os rasters de entrada.",
	"@@Bitwise-Not_Cellsize-Type_tag5@@": "Mín. De--Utiliza o menor tamanho da célula de todos os rasters de entrada.",
	"@@Bitwise-Not_Extent-Type_tag0@@": "Escolha qual a extensão que deve ser utilizada no raster de saída:",
	"@@Bitwise-Not_Extent-Type_tag1@@": "Primeiro De--Utiliza a extensão do primeiro raster de entrada para determinar a extensão de processamento.",
	"@@Bitwise-Not_Extent-Type_tag2@@": "Interseção De--Utiliza a extensão dos pixéis sobrepostos para determinar a extensão de processamento. Isto é por omissão.",
	"@@Bitwise-Not_Extent-Type_tag3@@": "Último De--Utiliza a extensão do último raster de entrada para determinar a extensão de processamento.",
	"@@Bitwise-Not_Extent-Type_tag4@@": "União De--Utiliza a extensão de todos os rasters para determinar a extensão de processamento.",
	"@@Bitwise-Not_Raster_tag0@@": "O raster de entrada no qual efetuar a operação (complementar) Bitwise Not.",
	"@@Bitwise-Or_Cellsize-Type_tag0@@": "Escolha qual o tamanho da célula a utilizar no raster de saída. Se todos os tamanhos da célula de entrada forem os mesmos, todas as opções irão produzir os mesmos resultados.",
	"@@Bitwise-Or_Cellsize-Type_tag1@@": "Primeiro De--Utiliza o primeiro tamanho da célula dos rasters de entrada.",
	"@@Bitwise-Or_Cellsize-Type_tag2@@": "Último De--Utiliza o último tamanho da célula dos rasters de entrada.",
	"@@Bitwise-Or_Cellsize-Type_tag3@@": "Máximo De--Utiliza o maior tamanho da célula de todos os rasters de entrada. Isto é por omissão.",
	"@@Bitwise-Or_Cellsize-Type_tag4@@": "Média De--Utiliza o tamanho da célula médio de todos os rasters de entrada.",
	"@@Bitwise-Or_Cellsize-Type_tag5@@": "Mín. De--Utiliza o menor tamanho da célula de todos os rasters de entrada.",
	"@@Bitwise-Or_Extent-Type_tag0@@": "Escolha qual a extensão que deve ser utilizada no raster de saída:",
	"@@Bitwise-Or_Extent-Type_tag1@@": "Primeiro De--Utiliza a extensão do primeiro raster de entrada para determinar a extensão de processamento.",
	"@@Bitwise-Or_Extent-Type_tag2@@": "Interseção De--Utiliza a extensão dos pixéis sobrepostos para determinar a extensão de processamento. Isto é por omissão.",
	"@@Bitwise-Or_Extent-Type_tag3@@": "Último De--Utiliza a extensão do último raster de entrada para determinar a extensão de processamento.",
	"@@Bitwise-Or_Extent-Type_tag4@@": "União De--Utiliza a extensão de todos os rasters para determinar a extensão de processamento.",
	"@@Bitwise-Or_Raster_tag0@@": "A primeira entrada a utilizar nesta operação bitwise.",
	"@@Bitwise-Or_Raster_tag1@@": "Pode ser utilizado um valor constante como entrada para este parâmetro, desde que seja especificado um raster para o outro parâmetro.",
	"@@Bitwise-Or_Raster2_tag0@@": "A segunda entrada a utilizar nesta operação bitwise.",
	"@@Bitwise-Or_Raster2_tag1@@": "Pode ser utilizado um valor constante como entrada para este parâmetro, desde que seja especificado um raster para o outro parâmetro.",
	"@@Bitwise-Right-Shift_Cellsize-Type_tag0@@": "Escolha qual o tamanho da célula a utilizar no raster de saída. Se todos os tamanhos da célula de entrada forem os mesmos, todas as opções irão produzir os mesmos resultados.",
	"@@Bitwise-Right-Shift_Cellsize-Type_tag1@@": "Primeiro De--Utiliza o primeiro tamanho da célula dos rasters de entrada.",
	"@@Bitwise-Right-Shift_Cellsize-Type_tag2@@": "Último De--Utiliza o último tamanho da célula dos rasters de entrada.",
	"@@Bitwise-Right-Shift_Cellsize-Type_tag3@@": "Máximo De--Utiliza o maior tamanho da célula de todos os rasters de entrada. Isto é por omissão.",
	"@@Bitwise-Right-Shift_Cellsize-Type_tag4@@": "Média De--Utiliza o tamanho da célula médio de todos os rasters de entrada.",
	"@@Bitwise-Right-Shift_Cellsize-Type_tag5@@": "Mín. De--Utiliza o menor tamanho da célula de todos os rasters de entrada.",
	"@@Bitwise-Right-Shift_Extent-Type_tag0@@": "Escolha qual a extensão que deve ser utilizada no raster de saída:",
	"@@Bitwise-Right-Shift_Extent-Type_tag1@@": "Primeiro De--Utiliza a extensão do primeiro raster de entrada para determinar a extensão de processamento.",
	"@@Bitwise-Right-Shift_Extent-Type_tag2@@": "Interseção De--Utiliza a extensão dos pixéis sobrepostos para determinar a extensão de processamento. Isto é por omissão.",
	"@@Bitwise-Right-Shift_Extent-Type_tag3@@": "Último De--Utiliza a extensão do último raster de entrada para determinar a extensão de processamento.",
	"@@Bitwise-Right-Shift_Extent-Type_tag4@@": "União De--Utiliza a extensão de todos os rasters para determinar a extensão de processamento.",
	"@@Bitwise-Right-Shift_Raster_tag0@@": "A entrada na qual efetuar a deslocação.",
	"@@Bitwise-Right-Shift_Raster_tag1@@": "Pode ser utilizado um valor constante como entrada para este parâmetro, desde que seja especificado um raster para o outro parâmetro.",
	"@@Bitwise-Right-Shift_Raster2_tag0@@": "A entrada que define o número de posições para deslocação dos bits.",
	"@@Bitwise-Right-Shift_Raster2_tag1@@": "Pode ser utilizado um valor constante como entrada para este parâmetro, desde que seja especificado um raster para o outro parâmetro.",
	"@@Bitwise-Xor_Cellsize-Type_tag0@@": "Escolha qual o tamanho da célula a utilizar no raster de saída. Se todos os tamanhos da célula de entrada forem os mesmos, todas as opções irão produzir os mesmos resultados.",
	"@@Bitwise-Xor_Cellsize-Type_tag1@@": "Primeiro De--Utiliza o primeiro tamanho da célula dos rasters de entrada.",
	"@@Bitwise-Xor_Cellsize-Type_tag2@@": "Último De--Utiliza o último tamanho da célula dos rasters de entrada.",
	"@@Bitwise-Xor_Cellsize-Type_tag3@@": "Máximo De--Utiliza o maior tamanho da célula de todos os rasters de entrada. Isto é por omissão.",
	"@@Bitwise-Xor_Cellsize-Type_tag4@@": "Média De--Utiliza o tamanho da célula médio de todos os rasters de entrada.",
	"@@Bitwise-Xor_Cellsize-Type_tag5@@": "Mín. De--Utiliza o menor tamanho da célula de todos os rasters de entrada.",
	"@@Bitwise-Xor_Extent-Type_tag0@@": "Escolha qual a extensão que deve ser utilizada no raster de saída:",
	"@@Bitwise-Xor_Extent-Type_tag1@@": "Primeiro De--Utiliza a extensão do primeiro raster de entrada para determinar a extensão de processamento.",
	"@@Bitwise-Xor_Extent-Type_tag2@@": "Interseção De--Utiliza a extensão dos pixéis sobrepostos para determinar a extensão de processamento. Isto é por omissão.",
	"@@Bitwise-Xor_Extent-Type_tag3@@": "Último De--Utiliza a extensão do último raster de entrada para determinar a extensão de processamento.",
	"@@Bitwise-Xor_Extent-Type_tag4@@": "União De--Utiliza a extensão de todos os rasters para determinar a extensão de processamento.",
	"@@Bitwise-Xor_Raster_tag0@@": "A primeira entrada a utilizar nesta operação bitwise.",
	"@@Bitwise-Xor_Raster_tag1@@": "Pode ser utilizado um valor constante como entrada para este parâmetro, desde que seja especificado um raster para o outro parâmetro.",
	"@@Bitwise-Xor_Raster2_tag0@@": "A segunda entrada a utilizar nesta operação bitwise.",
	"@@Bitwise-Xor_Raster2_tag1@@": "Pode ser utilizado um valor constante como entrada para este parâmetro, desde que seja especificado um raster para o outro parâmetro.",
	"@@Boolean-and_Cellsize-Type_tag0@@": "Escolha qual o tamanho da célula a utilizar no raster de saída. Se todos os tamanhos da célula de entrada forem os mesmos, todas as opções irão produzir os mesmos resultados.",
	"@@Boolean-and_Cellsize-Type_tag1@@": "Primeiro De--Utiliza o primeiro tamanho da célula dos rasters de entrada.",
	"@@Boolean-and_Cellsize-Type_tag2@@": "Último De--Utiliza o último tamanho da célula dos rasters de entrada.",
	"@@Boolean-and_Cellsize-Type_tag3@@": "Máximo De--Utiliza o maior tamanho da célula de todos os rasters de entrada. Isto é por omissão.",
	"@@Boolean-and_Cellsize-Type_tag4@@": "Média De--Utiliza o tamanho da célula médio de todos os rasters de entrada.",
	"@@Boolean-and_Cellsize-Type_tag5@@": "Mín. De--Utiliza o menor tamanho da célula de todos os rasters de entrada.",
	"@@Boolean-and_Extent-Type_tag0@@": "Escolha qual a extensão que deve ser utilizada no raster de saída:",
	"@@Boolean-and_Extent-Type_tag1@@": "Primeiro De--Utiliza a extensão do primeiro raster de entrada para determinar a extensão de processamento.",
	"@@Boolean-and_Extent-Type_tag2@@": "Interseção De--Utiliza a extensão dos pixéis sobrepostos para determinar a extensão de processamento. Isto é por omissão.",
	"@@Boolean-and_Extent-Type_tag3@@": "Último De--Utiliza a extensão do último raster de entrada para determinar a extensão de processamento.",
	"@@Boolean-and_Extent-Type_tag4@@": "União De--Utiliza a extensão de todos os rasters para determinar a extensão de processamento.",
	"@@Boolean-and_Raster_tag0@@": "A primeira entrada a utilizar nesta operação Booleana.",
	"@@Boolean-and_Raster_tag1@@": "Pode ser utilizado um valor constante como entrada para este parâmetro, desde que seja especificado um raster para o outro parâmetro.",
	"@@Boolean-and_Raster2_tag0@@": "A segunda entrada a utilizar nesta operação Booleana.",
	"@@Boolean-and_Raster2_tag1@@": "Pode ser utilizado um valor constante como entrada para este parâmetro, desde que seja especificado um raster para o outro parâmetro.",
	"@@Boolean-Not_Cellsize-Type_tag0@@": "Escolha qual o tamanho da célula a utilizar no raster de saída. Se todos os tamanhos da célula de entrada forem os mesmos, todas as opções irão produzir os mesmos resultados.",
	"@@Boolean-Not_Cellsize-Type_tag1@@": "Primeiro De--Utiliza o primeiro tamanho da célula dos rasters de entrada.",
	"@@Boolean-Not_Cellsize-Type_tag2@@": "Último De--Utiliza o último tamanho da célula dos rasters de entrada.",
	"@@Boolean-Not_Cellsize-Type_tag3@@": "Máximo De--Utiliza o maior tamanho da célula de todos os rasters de entrada. Isto é por omissão.",
	"@@Boolean-Not_Cellsize-Type_tag4@@": "Média De--Utiliza o tamanho da célula médio de todos os rasters de entrada.",
	"@@Boolean-Not_Cellsize-Type_tag5@@": "Mín. De--Utiliza o menor tamanho da célula de todos os rasters de entrada.",
	"@@Boolean-Not_Extent-Type_tag0@@": "Escolha qual a extensão que deve ser utilizada no raster de saída:",
	"@@Boolean-Not_Extent-Type_tag1@@": "Primeiro De--Utiliza a extensão do primeiro raster de entrada para determinar a extensão de processamento.",
	"@@Boolean-Not_Extent-Type_tag2@@": "Interseção De--Utiliza a extensão dos pixéis sobrepostos para determinar a extensão de processamento. Isto é por omissão.",
	"@@Boolean-Not_Extent-Type_tag3@@": "Último De--Utiliza a extensão do último raster de entrada para determinar a extensão de processamento.",
	"@@Boolean-Not_Extent-Type_tag4@@": "União De--Utiliza a extensão de todos os rasters para determinar a extensão de processamento.",
	"@@Boolean-Not_Raster_tag0@@": "A primeira entrada a utilizar nesta operação Booleana.",
	"@@Boolean-Or_Cellsize-Type_tag0@@": "Escolha qual o tamanho da célula a utilizar no raster de saída. Se todos os tamanhos da célula de entrada forem os mesmos, todas as opções irão produzir os mesmos resultados.",
	"@@Boolean-Or_Cellsize-Type_tag1@@": "Primeiro De--Utiliza o primeiro tamanho da célula dos rasters de entrada.",
	"@@Boolean-Or_Cellsize-Type_tag2@@": "Último De--Utiliza o último tamanho da célula dos rasters de entrada.",
	"@@Boolean-Or_Cellsize-Type_tag3@@": "Máximo De--Utiliza o maior tamanho da célula de todos os rasters de entrada. Isto é por omissão.",
	"@@Boolean-Or_Cellsize-Type_tag4@@": "Média De--Utiliza o tamanho da célula médio de todos os rasters de entrada.",
	"@@Boolean-Or_Cellsize-Type_tag5@@": "Mín. De--Utiliza o menor tamanho da célula de todos os rasters de entrada.",
	"@@Boolean-Or_Extent-Type_tag0@@": "Escolha qual a extensão que deve ser utilizada no raster de saída:",
	"@@Boolean-Or_Extent-Type_tag1@@": "Primeiro De--Utiliza a extensão do primeiro raster de entrada para determinar a extensão de processamento.",
	"@@Boolean-Or_Extent-Type_tag2@@": "Interseção De--Utiliza a extensão dos pixéis sobrepostos para determinar a extensão de processamento. Isto é por omissão.",
	"@@Boolean-Or_Extent-Type_tag3@@": "Último De--Utiliza a extensão do último raster de entrada para determinar a extensão de processamento.",
	"@@Boolean-Or_Extent-Type_tag4@@": "União De--Utiliza a extensão de todos os rasters para determinar a extensão de processamento.",
	"@@Boolean-Or_Raster_tag0@@": "A primeira entrada a utilizar nesta operação Booleana.",
	"@@Boolean-Or_Raster_tag1@@": "Pode ser utilizado um valor constante como entrada para este parâmetro, desde que seja especificado um raster para o outro parâmetro.",
	"@@Boolean-Or_Raster2_tag0@@": "A segunda entrada a utilizar nesta operação Booleana.",
	"@@Boolean-Or_Raster2_tag1@@": "Pode ser utilizado um valor constante como entrada para este parâmetro, desde que seja especificado um raster para o outro parâmetro.",
	"@@Boolean-Xor_Cellsize-Type_tag0@@": "Escolha qual o tamanho da célula a utilizar no raster de saída. Se todos os tamanhos da célula de entrada forem os mesmos, todas as opções irão produzir os mesmos resultados.",
	"@@Boolean-Xor_Cellsize-Type_tag1@@": "Primeiro De--Utiliza o primeiro tamanho da célula dos rasters de entrada.",
	"@@Boolean-Xor_Cellsize-Type_tag2@@": "Último De--Utiliza o último tamanho da célula dos rasters de entrada.",
	"@@Boolean-Xor_Cellsize-Type_tag3@@": "Máximo De--Utiliza o maior tamanho da célula de todos os rasters de entrada. Isto é por omissão.",
	"@@Boolean-Xor_Cellsize-Type_tag4@@": "Média De--Utiliza o tamanho da célula médio de todos os rasters de entrada.",
	"@@Boolean-Xor_Cellsize-Type_tag5@@": "Mín. De--Utiliza o menor tamanho da célula de todos os rasters de entrada.",
	"@@Boolean-Xor_Extent-Type_tag0@@": "Escolha qual a extensão que deve ser utilizada no raster de saída:",
	"@@Boolean-Xor_Extent-Type_tag1@@": "Primeiro De--Utiliza a extensão do primeiro raster de entrada para determinar a extensão de processamento.",
	"@@Boolean-Xor_Extent-Type_tag2@@": "Interseção De--Utiliza a extensão dos pixéis sobrepostos para determinar a extensão de processamento. Isto é por omissão.",
	"@@Boolean-Xor_Extent-Type_tag3@@": "Último De--Utiliza a extensão do último raster de entrada para determinar a extensão de processamento.",
	"@@Boolean-Xor_Extent-Type_tag4@@": "União De--Utiliza a extensão de todos os rasters para determinar a extensão de processamento.",
	"@@Boolean-Xor_Raster_tag0@@": "A primeira entrada a utilizar nesta operação Booleana.",
	"@@Boolean-Xor_Raster_tag1@@": "Pode ser utilizado um valor constante como entrada para este parâmetro, desde que seja especificado um raster para o outro parâmetro.",
	"@@Boolean-Xor_Raster2_tag0@@": "A segunda entrada a utilizar nesta operação Booleana.",
	"@@Boolean-Xor_Raster2_tag1@@": "Pode ser utilizado um valor constante como entrada para este parâmetro, desde que seja especificado um raster para o outro parâmetro.",
	"@@Buffered_Raster_tag0@@": "O raster de entrada a armazenar na memória.",
	"@@Calculator_Cellsize-Type_tag0@@": "O tamanho da célula utilizado para criar o raster de saída.",
	"@@Calculator_Cellsize-Type_tag1@@": "Pode escolher o tamanho da célula de saída a partir das seguintes opções na lista pendente:",
	"@@Calculator_Cellsize-Type_tag2@@": "<strong>Primeiro De</strong>--O tamanho da célula da primeira variável raster.",
	"@@Calculator_Cellsize-Type_tag4@@": "<strong>Mín. De</strong>--O tamanho mínimo da célula dos rasters de entrada.",
	"@@Calculator_Cellsize-Type_tag6@@": "<strong>Máx. De</strong>--O tamanho máximo da célula dos rasters de entrada.",
	"@@Calculator_Cellsize-Type_tag8@@": "<strong>Média De</strong>--O tamanho médio da célula dos rasters de entrada.",
	"@@Calculator_Cellsize-Type_tag10@@": "<strong>Último De</strong>--O tamanho da célula da última variável raster.",
	"@@Calculator_Cellsize-Type_tag12@@": "A seleção predefinida é <strong>Máx. De</strong>.",
	"@@Calculator_Expression_tag0@@": "Construa uma expressão algébrica para realizar uma análise espacial no raster de entrada.",
	"@@Calculator_Expression_tag1@@": "Todas as funções matemáticas existentes podem ser chamadas a construir a expressão. Os operadores disponíveis estão listados abaixo.",
	"@@Calculator_Expression_tag2@@": "Operações Aritméticas",
	"@@Calculator_Expression_tag3@@": "Adição: +",
	"@@Calculator_Expression_tag4@@": "Divisão: /",
	"@@Calculator_Expression_tag5@@": "Módulo: %",
	"@@Calculator_Expression_tag6@@": "Multiplicação: *",
	"@@Calculator_Expression_tag7@@": "Potência: **",
	"@@Calculator_Expression_tag8@@": "Subtração: -",
	"@@Calculator_Expression_tag9@@": "Operações Booleanas",
	"@@Calculator_Expression_tag10@@": "Booleano E: &&",
	"@@Calculator_Expression_tag11@@": "Booleano Ou: ||",
	"@@Calculator_Expression_tag12@@": "Operações de Relação",
	"@@Calculator_Expression_tag13@@": "Igual a: ==",
	"@@Calculator_Expression_tag14@@": "Maior do que: >",
	"@@Calculator_Expression_tag15@@": "Maior ou Igual a: >=",
	"@@Calculator_Expression_tag16@@": "Menor do que: <",
	"@@Calculator_Expression_tag17@@": "Menor ou Igual a: <=",
	"@@Calculator_Expression_tag18@@": "Não Igual a: !=",
	"@@Calculator_Expression_tag19@@": "Operações Adicionais",
	"@@Calculator_Expression_tag20@@": "Mínimo de dois rasters numa base por píxel: mín.(a,b)",
	"@@Calculator_Expression_tag21@@": "Máximo de dois rasters numa base por píxel: máx.(a,b)",
	"@@Calculator_Expression_tag22@@": "Seguem-se alguns exemplos de expressões:",
	"@@Calculator_Expression_tag23@@": "Declaração Condicional Simples: num raster (identificado por T), encontra valores de elevação superiores a 4000 pés e atribui a estas áreas um valor de 1 e a todas as outras áreas um valor de 0.",
	"@@Calculator_Expression_tag24@@": "Con(T > 4000, 1, 0)",
	"@@Calculator_Expression_tag25@@": "Declaração Condicional Agrupada: encontra áreas onde a inclinação (identificada por b1) é inferior a 10 graus e o NDVI (identificado por b2) é superior a 0,5 e atribui a estas áreas um valor de 1. Para todas as outras áreas, atribui um valor de 2 se a inclinação for superior a 10 graus e a elevação (identificada por b3) for superior a 2500 pés. É atribuído um valor de 3 a todas as outras áreas.",
	"@@Calculator_Expression_tag26@@": "Con((b1 < 10 && b2 > .5, 1, Con(b1 > 10 && b3 > 2500, 2, 3)))",
	"@@Calculator_extenttype_tag0@@": "<p>Selecione que extensão deve ser usada no raster de saída:</p><ul><li><p>Primeiro De: usa a extensão do primeiro raster de entrada para determinar a extensão de processamento.</p></li><li>Interseção De: usa a extensão dos píxeis sobrepostos para determinar a extensão de processamento Esta é a predefinição.</li><li>União De: usa a extensão de todos os rasters para determinar a extensão de processamento.</li><li>Último De: usa a extensão do último raster de entrada para determinar a extensão de processamento.</li></ul>",
	"@@Calculator_Raster-Variables_tag0@@": "O nome de variável definido pelo utilizador e o raster de entrada.",
	"@@Classify_Input-Definition-File_tag0@@": "O ficheiro de entrada de Definição de Classificador da Esri (${.ecd}) que contém as estatísticas e outras informações de classificação para o conjunto de dados específico, classificador e atributos escolhidos.",
	"@@Classify_Raster_tag0@@": "O conjunto de dados raster que deseja classificar.",
	"@@Classify_Raster2_tag0@@": "Um conjunto de dados raster auxiliar opcional para incorporar no classificador, como uma imagem segmentada, imagem multiespectral ou dados de elevação, utilizado para gerar uma definição de classificação mais robusta para o seu conjunto de dados. O conjunto de dados raster para este parâmetro deve corresponder ao utilizado para criar o ficheiro de entrada de Definição de Classificador Esri.",
	"@@Clip_Clipping-Geometry-or-Raster_tag0@@": "O que se segue pode ser utilizado para especificar a extensão de recorte:",
	"@@Clip_Clipping-Geometry-or-Raster_tag1@@": "<strong>Recortar Raster</strong>--Extensão do raster de recorte",
	"@@Clip_Clipping-Geometry-or-Raster_tag3@@": "<strong>Extensão Personalizada</strong>--Coordenadas X e Y mínima e máxima",
	"@@Clip_Clipping-Geometry-or-Raster_tag5@@": "<strong>Extensão do Mapa Atual</strong>--Extensão da exibição do mapa atual",
	"@@Clip_Clipping-Raster_tag0@@": "A camada raster utilizada para recortar.",
	"@@Clip_Clipping-Type_tag0@@": "Especifique se pretende manter a área no interior ou fora da geometria de recorte.",
	"@@Clip_Clipping-Type_tag1@@": "<strong>Recortar Dentro</strong>--As imagens no interior das extensões de recorte serão removidas.",
	"@@Clip_Clipping-Type_tag3@@": "<strong>Recortar Fora</strong>--As imagens fora das extensões de recorte serão removidas.",
	"@@Clip_Custom-Extent_tag0@@": "Especifique as quatro coordenadas que definem a extensão da caixa delimitadora utilizada para recortar o raster.",
	"@@Clip_Output-Extent_tag0@@": "As coordenadas x e y da extensão de recorte atual.",
	"@@Clip_Output-Extent_tag1@@": "O botão <strong>Capturar Extensão do Mapa Atual</strong> utiliza a extensão de exibição para o mapa ativo.",
	"@@Clip_Raster_tag0@@": "A camada raster de entrada.",
	"@@Clip_Use-Input-Features-for-Clipping-Geometry_tag0@@": "Quando selecionados, os dados são recortados de acordo com a geometria da classe de elementos especificada.",
	"@@Clip_Use-Input-Features-for-Clipping-Geometry_tag1@@": "Desmarcado--A função utiliza a geometria de recorte especificada por <strong>Retângulo</strong>. Isto é por omissão.",
	"@@Clip_Use-Input-Features-for-Clipping-Geometry_tag4@@": "Verificado--A função utiliza a geometria de recorte definida por uma classe de elementos.",
	"@@Color-Model-Conversion_Conversion-Type_tag0@@": "O tipo de conversão de cor a executar:",
	"@@Color-Model-Conversion_Conversion-Type_tag1@@": "HSV para RGB",
	"@@Color-Model-Conversion_Conversion-Type_tag2@@": "RGB para HSV",
	"@@Color-Model-Conversion_Raster_tag0@@": "O raster de entrada.",
	"@@Colormap_Color-Ramp_tag0@@": "Escolha uma rampa de cores pré-existente.",
	"@@Colormap_Color-Scheme-Type_tag0@@": "Escolha o tipo de esquema de cores para apresentar o seu raster de entrada",
	"@@Colormap_Color-Scheme-Type_tag1@@": "Rampa de cores--Utilizar uma rampa de cores.",
	"@@Colormap_Color-Scheme-Type_tag2@@": "Mapa de cores--Utilizar um mapa de cores pré-existente.",
	"@@Colormap_Colormap_tag0@@": "Os seguintes mapas de cores predefinidos estão disponíveis na lista pendente:",
	"@@Colormap_Colormap_tag1@@": "Elevação--Um mapa de cores que muda gradualmente de ciano, para roxo, para preto.",
	"@@Colormap_Colormap_tag2@@": "Cinzento--Um mapa de cores que muda gradualmente de preto para branco.",
	"@@Colormap_Colormap_tag7@@": "Hillshade: um mapa de cores em escala de cinzentos para visualizar uma representação 3D da superfície do terreno, com a posição relativa do sol tida em conta para sombrear a imagem.",
	"@@Colormap_Colormap_tag3@@": "NDVI--Um mapa de cores para visualizar a vegetação. Os valores próximos de zero são azuis. Os valores baixos são castanhos. Depois, as cores mudam gradualmente de vermelho, para cor de laranja, para amarelo, para verde e para preto à medida que o índice de vegetação passa de baixo para alto.",
	"@@Colormap_Colormap_tag4@@": "NDVI2--Um mapa de cores para visualizar a vegetação. Os valores baixos variam de branco para verde. Depois, as cores variam de cinzento, para roxo, para violeta, para azul-escuro e para preto à medida que o índice de vegetação passa de baixo para alto.",
	"@@Colormap_Colormap_tag5@@": "NDVI3--Um mapa de cores para visualizar a vegetação. Os valores próximos de zero são azuis. Depois, as cores mudam gradualmente de vermelho, para cor de laranja e para verde à medida que o índice de vegetação passa de baixo para alto.",
	"@@Colormap_Colormap_tag6@@": "Aleatório--Um mapa de cores aleatório.",
	"@@Colormap_Raster_tag0@@": "O raster de entrada.",
	"@@Colormap-To-RGB_Raster_tag0@@": "O raster do mapa de cores de entrada.",
	"@@Complex_Raster_tag0@@": "O raster de entrada.",
	"@@Composite-Bands_Rasters_tag0@@": "Utilize a lista pendente ou o botão <strong>Procurar</strong> para escolher as entradas raster.",
	"@@Composite-Bands_cellsizetype_tag0@@": "<p>Escolha qual o tamanho da célula a utilizar no raster de saída. Se todos os tamanhos da célula de entrada forem os mesmos, todas as opções irão produzir os mesmos resultados.</p><ul><li>Primeiro uso: usa o tamanho da primeira célula dos rasters de entrada.</li><li>Mínimo uso: usa o menor tamanho de célula de todos os rasters de entrada.</li><li>Máximo de uso: usa o maior tamanho de célula de todos os rasters de entrada. Esta é a predefinição.</li><li>Média De - usa o tamanho médio da célula de todos os rasters de entrada.</li><li>Último De - usa o tamanho da última célula dos rasters de entrada.</li></ul>",
	"@@Con-function_Cellsize-Type_tag0@@": "Escolha qual o tamanho da célula a utilizar no raster de saída. Se todos os tamanhos da célula de entrada forem os mesmos, todas as opções irão produzir os mesmos resultados.",
	"@@Con-function_Cellsize-Type_tag1@@": "Primeiro De--Utiliza o primeiro tamanho da célula dos rasters de entrada.",
	"@@Con-function_Cellsize-Type_tag2@@": "Último De--Utiliza o último tamanho da célula dos rasters de entrada.",
	"@@Con-function_Cellsize-Type_tag3@@": "Máximo De--Utiliza o maior tamanho da célula de todos os rasters de entrada. Isto é por omissão.",
	"@@Con-function_Cellsize-Type_tag4@@": "Média De--Utiliza o tamanho da célula médio de todos os rasters de entrada.",
	"@@Con-function_Cellsize-Type_tag5@@": "Mín. De--Utiliza o menor tamanho da célula de todos os rasters de entrada.",
	"@@Con_Extent-Type_tag0@@": "Escolha qual a extensão que deve ser utilizada no raster de saída:",
	"@@Con_Extent-Type_tag1@@": "Primeiro De--Utiliza a extensão do primeiro raster de entrada para determinar a extensão de processamento.",
	"@@Con_Extent-Type_tag2@@": "Interseção De--Utiliza a extensão dos pixéis sobrepostos para determinar a extensão de processamento. Isto é por omissão.",
	"@@Con_Extent-Type_tag3@@": "Último De--Utiliza a extensão do último raster de entrada para determinar a extensão de processamento.",
	"@@Con_Extent-Type_tag4@@": "União De--Utiliza a extensão de todos os rasters para determinar a extensão de processamento.",
	"@@Con_False-Raster_tag0@@": "A entrada cujos valores serão utilizados como valores de píxel de saída se a condição for falsa. Pode ser um número inteiro, um raster de ponto flutuante ou um valor constante.",
	"@@Con_Raster_tag0@@": "O raster de entrada que representa o resultado Booleano de uma função raster matemática lógica. Os valores serão 1 (para verdadeiro) ou 0 (para falso). Pode ser um número inteiro ou um raster de ponto flutuante.",
	"@@Con_True-Raster_tag0@@": "A entrada cujos valores serão utilizados como valores de píxel de saída se a condição for verdadeira. Pode ser um número inteiro, um raster de ponto flutuante ou um valor constante.",
	"@@Constant_Constant_tag0@@": "O valor da constante a ser adicionada ao raster virtual.",
	"@@Constant_Raster-Info_tag0@@": "Utilize o botão <strong>Carregar o modelo de raster</strong> para carregar um modelo a partir de um diretório ou portal.",
	"@@Contour_Adaptive-Smoothing_tag0@@": "A quantidade de suavização a aplicar à linha de contorno. O valor padrão é 2.5.",
	"@@Contour_Adaptive-Smoothing_tag1@@": "Um valor mais baixo produz uma linha de contorno com mais granularidade e menos suavização, enquanto um valor mais alto produz uma linha de contorno com mais suavidade que parece ser menos irregular.",
	"@@Contour_Contour-Interval_tag0@@": "A diferença na altitude entre linhas de contorno.",
	"@@Contour_Contour-Interval_tag1@@": "É utilizado um pequeno intervalo de contorno em áreas relativamente planas, enquanto os intervalos de contorno maiores são utilizados em terrenos variáveis ou montanhosos.",
	"@@Contour_Contour-Type_tag0@@": "O tipo de contorno a criar:",
	"@@Contour_Contour-Type_tag1@@": "<strong>Preenchimento de contorno</strong>--Preenche a área entre cada linha de contorno com o valor de elevação quantificado.",
	"@@Contour_Contour-Type_tag3@@": "<strong>Linhas de contorno</strong>--Junta pontos de igual elevação para criar uma linha que representa uma elevação constante.",
	"@@Contour_Contour-Type_tag5@@": "<strong>Suavizar apenas a superfície</strong>--Suaviza a camada de elevação de entrada, mas não produz contornos.",
	"@@Contour_Nth-Contour-Line-In-Bold_tag0@@": "O índice de contorno, que é representado por uma linha a negrito.",
	"@@Contour_Nth-Contour-Line-In-Bold_tag1@@": "O valor padrão é 5; portanto, cada 5º contorno de linha está a negrito.",
	"@@Contour_Number-Of-Contours_tag0@@": "O número de contornos a gerar no ecrã. Isto ajusta dinamicamente o intervalo de contorno para encaixar o terreno no ecrã enquanto mantém intervalos padronizados como 1, 5, 10, etc.",
	"@@Contour_Raster_tag0@@": "Um conjunto de dados de elevação raster de banda única.",
	"@@Contour_Z-Base_tag0@@": "O valor de base do contorno. Os contornos são gerados acima e abaixo deste valor, conforme necessário, para abranger todo o intervalo de valores do raster de entrada. O padrão é 0.",
	"@@Contour_Z-Base_tag1@@": "Um valor de 0 representa frequentemente o nível médio do mar, dependendo do conjunto de dados de elevação da origem.",
	"@@Contour_Z-Factor_tag0@@": "O fator de conversão da unidade utilizado ao gerar contornos. O valor padrão é 1.",
	"@@Contour_Z-Factor_tag1@@": "As linhas de contorno são geradas baseado nos valores z no raster de entrada, que são frequentemente medidos em unidades de metros ou pés. Com o valor predefinido de 1, os contornos estarão nas mesmas unidades que os valores z do raster de entrada. Para criar contornos numa unidade diferente da dos valores z, defina um valor adequado para o fator z. Tenha em atenção que não é necessário que as unidades x e y do solo e z de superfície sejam consistentes para esta ferramenta.",
	"@@Contour_Z-Factor_tag2@@": "Por exemplo, se os valores de elevação no raster de entrada estiverem em pés, mas quiser que os contornos sejam gerados com base em unidades métricas, defina o fator z para 0,3048 (dado que 1 pé = 0,3048 metros).",
	"@@Contrast-and-Brightness_Brightness-Offset_tag0@@": "Ajuste a luminosidade da camada raster.",
	"@@Contrast-and-Brightness_Brightness-Offset_tag1@@": "Pode utilizar o controlo de deslize para modificar o desvio de luminosidade, ou pode introduzir um valor.",
	"@@Contrast-and-Brightness_Contrast-Offset_tag0@@": "Ajuste o contraste da camada raster.",
	"@@Contrast-and-Brightness_Contrast-Offset_tag1@@": "Pode utilizar o controlo de deslize para modificar o desvio de contraste, ou pode introduzir um valor.",
	"@@Contrast-and-Brightness_Raster_tag0@@": "O raster de entrada no qual pode editar a luminosidade e o contraste.",
	"@@Convolution_kernel_tag0@@": "<p>Esta tabela mostra como cada píxel será ponderado no processo de filtragem. Esta tabela pode ser editada se escolher <strong>Definido pelo Utilizador</strong> como o <strong>Tipo</strong>.</p>",
	"@@Convolution_Raster_tag0@@": "O conjunto de dados raster de entrada.",
	"@@Convolution_Type_tag0@@": "Selecione o tipo de filtragem que pretende efetuar. Existem opções para nitidez, desfocagem e deteção de extremidades, ou pode definir o seu próprio filtro com base em kernel",
	"@@Corridor_Distance-Raster-1_tag0@@": "O primeiro raster de entrada de distância. Deverá ser uma saída de distância de custo acumulado da Distância de Custo ou da Distância do Caminho.",
	"@@Corridor_Distance-Raster-2_tag0@@": "O segundo raster de entrada de distância. Deverá ser uma saída de distância de custo acumulado da Distância de Custo ou da Distância do Caminho.",
	"@@Cos_Cellsize-Type_tag0@@": "Escolha qual o tamanho da célula a utilizar no raster de saída. Se todos os tamanhos da célula de entrada forem os mesmos, todas as opções irão produzir os mesmos resultados.",
	"@@Cos_Cellsize-Type_tag1@@": "Primeiro De--Utiliza o primeiro tamanho da célula dos rasters de entrada.",
	"@@Cos_Cellsize-Type_tag2@@": "Último De--Utiliza o último tamanho da célula dos rasters de entrada.",
	"@@Cos_Cellsize-Type_tag3@@": "Máximo De--Utiliza o maior tamanho da célula de todos os rasters de entrada. Isto é por omissão.",
	"@@Cos_Cellsize-Type_tag4@@": "Média De--Utiliza o tamanho da célula médio de todos os rasters de entrada.",
	"@@Cos_Cellsize-Type_tag5@@": "Mín. De--Utiliza o menor tamanho da célula de todos os rasters de entrada.",
	"@@Cos_Extent-Type_tag0@@": "Escolha qual a extensão que deve ser utilizada no raster de saída:",
	"@@Cos_Extent-Type_tag1@@": "Primeiro De--Utiliza a extensão do primeiro raster de entrada para determinar a extensão de processamento.",
	"@@Cos_Extent-Type_tag2@@": "Interseção De--Utiliza a extensão dos pixéis sobrepostos para determinar a extensão de processamento. Isto é por omissão.",
	"@@Cos_Extent-Type_tag3@@": "Último De--Utiliza a extensão do último raster de entrada para determinar a extensão de processamento.",
	"@@Cos_Extent-Type_tag4@@": "União De--Utiliza a extensão de todos os rasters para determinar a extensão de processamento.",
	"@@Cos_Raster_tag0@@": "A entrada para a qual calcular os valores de cosseno.",
	"@@CosH_Cellsize-Type_tag0@@": "Escolha qual o tamanho da célula a utilizar no raster de saída. Se todos os tamanhos da célula de entrada forem os mesmos, todas as opções irão produzir os mesmos resultados.",
	"@@CosH_Cellsize-Type_tag1@@": "Primeiro De--Utiliza o primeiro tamanho da célula dos rasters de entrada.",
	"@@CosH_Cellsize-Type_tag2@@": "Último De--Utiliza o último tamanho da célula dos rasters de entrada.",
	"@@CosH_Cellsize-Type_tag3@@": "Máximo De--Utiliza o maior tamanho da célula de todos os rasters de entrada. Isto é por omissão.",
	"@@CosH_Cellsize-Type_tag4@@": "Média De--Utiliza o tamanho da célula médio de todos os rasters de entrada.",
	"@@CosH_Cellsize-Type_tag5@@": "Mín. De--Utiliza o menor tamanho da célula de todos os rasters de entrada.",
	"@@CosH_Extent-Type_tag0@@": "Escolha qual a extensão que deve ser utilizada no raster de saída:",
	"@@CosH_Extent-Type_tag1@@": "Primeiro De--Utiliza a extensão do primeiro raster de entrada para determinar a extensão de processamento.",
	"@@CosH_Extent-Type_tag2@@": "Interseção De--Utiliza a extensão dos pixéis sobrepostos para determinar a extensão de processamento. Isto é por omissão.",
	"@@CosH_Extent-Type_tag3@@": "Último De--Utiliza a extensão do último raster de entrada para determinar a extensão de processamento.",
	"@@CosH_Extent-Type_tag4@@": "União De--Utiliza a extensão de todos os rasters para determinar a extensão de processamento.",
	"@@CosH_Raster_tag0@@": "A entrada para a qual calcular os valores de cosseno hiperbólico.",
	"@@Cost-Allocation_Accumulative-Cost-Resistance-Rate_tag0@@": "Este parâmetro simula o aumento do esforço para superar os custos à medida que o custo acumulado aumenta. É utilizado para modelar a fadiga do condutor. O custo acumulado crescente para alcançar uma célula é multiplicado pela taxa de resistência e adicionado ao custo para se mover para a célula seguinte.",
	"@@Cost-Allocation_Accumulative-Cost-Resistance-Rate_tag1@@": "É uma versão modificada de uma fórmula de taxa de juro composta que é utilizada para calcular o custo aparente de se mover por uma célula. À medida que o valor da taxa de resistência aumenta, aumenta o custo das células que são visitadas mais tarde. Quanto maior for a taxa de resistência, maior será o custo de alcançar a célula seguinte, que é composto por cada movimento subsequente. Uma vez que a taxa de resistência é semelhante a uma taxa composta e geralmente os valores de custo acumulado são muito grandes, são sugeridas pequenas taxas de resistência, como 0,005 ou mesmo mais pequenas, dependendo dos valores de custo acumulado.",
	"@@Cost-Allocation_Accumulative-Cost-Resistance-Rate_tag2@@": "O valor tem de ser maior que zero. A capacidade predefinida está na extremidade do raster de saída.",
	"@@Cost-Allocation_Accumulative-Cost-Resistance-Rate_tag3@@": "Pode ser utilizado para um valor numérico (duplo) ou um campo de <strong>Raster de Origem</strong> para este parâmetro.",
	"@@Cost-Allocation_Capacity_tag0@@": "Define a capacidade de custo para o condutor para uma origem. Os cálculos de custos continuam para cada origem até que a capacidade especificada seja alcançada.",
	"@@Cost-Allocation_Capacity_tag1@@": "O valor tem de ser maior que zero. A capacidade predefinida está na extremidade do raster de saída.",
	"@@Cost-Allocation_Capacity_tag2@@": "Pode ser utilizado para um valor numérico (duplo) ou um campo de <strong>Raster de Origem</strong> para este parâmetro.",
	"@@Cost-Allocation_Cost-Raster_tag0@@": "Um raster de entrada necessário define o custo ou impedância para que se mova de modo planimétrico através de cada célula. O valor em cada localização da célula representa a distância de custo-por-unidade para movimentação. Cada valor da localização da célula é multiplicado pela resolução de célula e também compensa o movimento diagonal para obter os custos totais de passagem pela célula.",
	"@@Cost-Allocation_Cost-Raster_tag1@@": "Os valores de <strong>Raster de Custo</strong> podem ser um número inteiro ou ponto flutuante, mas não podem ser negativos ou zero.",
	"@@Cost-Allocation_Maximum-Distance_tag0@@": "O limiar que os valores de custo acumulado não podem exceder. Se uma distância de custo acumulado exceder este valor, o valor de saída para a localização da célula será de ${NoData}. A distância máxima define a extensão em que as distâncias de custo acumulado são calculadas. A distância predefinida é até à extensão do raster de saída.",
	"@@Cost-Allocation_Multiplier-to-Apply-to-Costs_tag0@@": "Um multiplicador para aplicar os valores de custo.",
	"@@Cost-Allocation_Multiplier-to-Apply-to-Costs_tag1@@": "Este parâmetro permite controlar o modo de viagem ou a magnitude numa origem. Quanto maior for o multiplicador, maior será o custo de se mover através de cada célula.",
	"@@Cost-Allocation_Multiplier-to-Apply-to-Costs_tag2@@": "Os valores têm de ser maiores que zero. O padrão é 1.",
	"@@Cost-Allocation_Multiplier-to-Apply-to-Costs_tag3@@": "Pode ser utilizado para um valor numérico (duplo) ou um campo de <strong>Raster de Origem</strong> para este parâmetro.",
	"@@Cost-Allocation_Source-Field_tag0@@": "O campo utilizado para atribuir valores às localizações de origem. Deve ser do tipo número inteiro. Se <strong>Raster de Valor</strong> tiver sido definido, os valores nessa entrada têm precedência sobre qualquer definição para o <strong>Campo de Origem</strong>.",
	"@@Cost-Allocation_Source-Raster_tag0@@": "O raster de entrada necessário das localizações de origem.",
	"@@Cost-Allocation_Source-Raster_tag1@@": "Trata-se de um raster que identifica as células ou localizações a partir das quais é calculada a menor distância de custo acumulado para cada localização da célula de saída.",
	"@@Cost-Allocation_Source-Raster_tag2@@": "Se <strong>Raster de Origem</strong> de entrada for um ponto flutuante, o <strong>Raster de Valor</strong> deve ser definido e deve ser um número inteiro. O <strong>Raster de Valor</strong> terá precedência sobre qualquer definição do <strong>Campo de Origem</strong>.",
	"@@Cost-Allocation_Start-Cost_tag0@@": "O custo de arranque a partir do qual se iniciam os cálculos de custos. Este parâmetro permite a especificação do custo fixo associado a uma origem. Em vez de começar com um custo de 0, o algoritmo de custo começa com o valor especificado.",
	"@@Cost-Allocation_Start-Cost_tag1@@": "O valor deverá ser igual ou maior que zero. O padrão é 0.",
	"@@Cost-Allocation_Travel-Direction_tag0@@": "Define a direção do condutor ao aplicar a taxa de resistência à origem e o custo de arranque da origem.",
	"@@Cost-Allocation_Travel-Direction_tag1@@": "<strong>Da Origem</strong>--A taxa de resistência à origem e o custo de arranque da origem serão aplicados a partir da origem de entrada e ao sair das células não de origem. Isto é por omissão.",
	"@@Cost-Allocation_Travel-Direction_tag3@@": "<strong>Para a Origem</strong>--A taxa de resistência à origem e o custo de arranque da origem serão aplicados a partir de cada célula não de origem e de volta à origem de entrada.",
	"@@Cost-Allocation_Travel-Direction_tag5@@": "Especifique a palavra-chave <strong>Da Origem</strong> ou <strong>Para a Origem</strong> que será aplicada a todas as origens, ou especifique um campo no <strong>Raster de Origem</strong> que contenha as palavras-chave para identificar a direção de deslocação para cada origem. Esse campo deve conter a string ${FROM_SOURCE} ou ${TO_SOURCE}.",
	"@@Cost-Allocation_Value-Raster_tag0@@": "O raster de número inteiro de entrada que identifica os valores da zona a utilizar para cada localização de origem de entrada. Para cada célula de localização de origem, o valor definido pelo <strong>Raster de Valor</strong> será atribuído a todas as células alocadas à localização de origem para o cálculo. O <strong>Raster de Valor</strong> terá precedência sobre qualquer definição para o <strong>Campo de Origem</strong>.",
	"@@Cost-Back-Link_Accumulative-Cost-Resistance-Rate_tag0@@": "Este parâmetro simula o aumento do esforço para superar os custos à medida que o custo acumulado aumenta. É utilizado para modelar a fadiga do condutor. O custo acumulado crescente para alcançar uma célula é multiplicado pela taxa de resistência e adicionado ao custo para se mover para a célula seguinte.",
	"@@Cost-Back-Link_Accumulative-Cost-Resistance-Rate_tag1@@": "É uma versão modificada de uma fórmula de taxa de juro composta que é utilizada para calcular o custo aparente de se mover por uma célula. À medida que o valor da taxa de resistência aumenta, aumenta o custo das células que são visitadas mais tarde. Quanto maior for a taxa de resistência, maior será o custo de alcançar a célula seguinte, que é composto por cada movimento subsequente. Uma vez que a taxa de resistência é semelhante a uma taxa composta e geralmente os valores de custo acumulado são muito grandes, são sugeridas pequenas taxas de resistência, como 0,005 ou mesmo mais pequenas, dependendo dos valores de custo acumulado.",
	"@@Cost-Back-Link_Accumulative-Cost-Resistance-Rate_tag2@@": "O valor tem de ser maior que zero. A capacidade predefinida está na extremidade do raster de saída.",
	"@@Cost-Back-Link_Accumulative-Cost-Resistance-Rate_tag3@@": "Pode ser utilizado para um valor numérico (duplo) ou um campo de <strong>Raster de Origem</strong> para este parâmetro.",
	"@@Cost-Back-Link_Capacity_tag0@@": "Define a capacidade de custo para o condutor para uma origem. Os cálculos de custos continuam para cada origem até que a capacidade especificada seja alcançada.",
	"@@Cost-Back-Link_Capacity_tag1@@": "O valor tem de ser maior que zero. A capacidade predefinida está na extremidade do raster de saída.",
	"@@Cost-Back-Link_Capacity_tag2@@": "Pode ser utilizado para um valor numérico (duplo) ou um campo de <strong>Raster de Origem</strong> para este parâmetro.",
	"@@Cost-Back-Link_Cost-Raster_tag0@@": "Um raster de entrada necessário define o custo ou impedância para que se mova de modo planimétrico através de cada célula. O valor em cada localização da célula representa a distância de custo-por-unidade para movimentação. Cada valor da localização da célula é multiplicado pela resolução de célula e também compensa o movimento diagonal para obter os custos totais de passagem pela célula.",
	"@@Cost-Back-Link_Cost-Raster_tag1@@": "Os valores de <strong>Raster de Custo</strong> podem ser um número inteiro ou ponto flutuante, mas não podem ser negativos ou zero.",
	"@@Cost-Back-Link_Maximum-Distance_tag0@@": "O limiar que os valores de custo acumulado não podem exceder. Se uma distância de custo acumulado exceder este valor, o valor de saída para a localização da célula será NoData. A distância máxima define a extensão em que as distâncias de custo acumulado são calculadas. A distância predefinida é até à extensão do raster de saída.",
	"@@Cost-Back-Link_Multiplier-to-Apply-to-Costs_tag0@@": "Um multiplicador para aplicar os valores de custo.",
	"@@Cost-Back-Link_Multiplier-to-Apply-to-Costs_tag1@@": "Este parâmetro permite controlar o modo de viagem ou a magnitude numa origem. Quanto maior for o multiplicador, maior será o custo de se mover através de cada célula.",
	"@@Cost-Back-Link_Multiplier-to-Apply-to-Costs_tag2@@": "Os valores têm de ser maiores que zero. O padrão é 1.",
	"@@Cost-Back-Link_Multiplier-to-Apply-to-Costs_tag3@@": "Pode ser utilizado para um valor numérico (duplo) ou um campo de <strong>Raster de Origem</strong> para este parâmetro.",
	"@@Cost-Back-Link_Source-Raster_tag0@@": "O raster de entrada necessário das localizações de origem.",
	"@@Cost-Back-Link_Source-Raster_tag1@@": "Trata-se de um raster que identifica as células ou localizações a partir das quais é calculada a menor distância de custo acumulado para cada localização da célula de saída.",
	"@@Cost-Back-Link_Start-Cost_tag0@@": "O custo de arranque a partir do qual se iniciam os cálculos de custos. Este parâmetro permite a especificação do custo fixo associado a uma origem. Em vez de começar com um custo de 0, o algoritmo de custo começa com o valor especificado.",
	"@@Cost-Back-Link_Start-Cost_tag1@@": "O valor deverá ser igual ou maior que zero. O padrão é 0.",
	"@@Cost-Back-Link_Travel-Direction_tag0@@": "Define a direção do condutor ao aplicar a taxa de resistência à origem e o custo de arranque da origem.",
	"@@Cost-Back-Link_Travel-Direction_tag1@@": "<strong>Da Origem</strong>--A taxa de resistência à origem e o custo de arranque da origem serão aplicados a partir da origem de entrada e ao sair das células não de origem. Isto é por omissão.",
	"@@Cost-Back-Link_Travel-Direction_tag3@@": "<strong>Para a Origem</strong>--A taxa de resistência à origem e o custo de arranque da origem serão aplicados a partir de cada célula não de origem e de volta à origem de entrada.",
	"@@Cost-Back-Link_Travel-Direction_tag5@@": "Especifique a palavra-chave <strong>Da Origem</strong> ou <strong>Para a Origem</strong> que será aplicada a todas as origens, ou especifique um campo no <strong>Raster de Origem</strong> que contenha as palavras-chave para identificar a direção de deslocação para cada origem. Esse campo deve conter a string ${FROM_SOURCE} ou ${TO_SOURCE}.",
	"@@Cost-Distance_Accumulative-Cost-Resistance-Rate_tag0@@": "Este parâmetro simula o aumento do esforço para superar os custos à medida que o custo acumulado aumenta. É utilizado para modelar a fadiga do condutor. O custo acumulado crescente para alcançar uma célula é multiplicado pela taxa de resistência e adicionado ao custo para se mover para a célula seguinte.",
	"@@Cost-Distance_Accumulative-Cost-Resistance-Rate_tag1@@": "É uma versão modificada de uma fórmula de taxa de juro composta que é utilizada para calcular o custo aparente de se mover por uma célula. À medida que o valor da taxa de resistência aumenta, aumenta o custo das células que são visitadas mais tarde. Quanto maior for a taxa de resistência, maior será o custo de alcançar a célula seguinte, que é composto por cada movimento subsequente. Uma vez que a taxa de resistência é semelhante a uma taxa composta e geralmente os valores de custo acumulado são muito grandes, são sugeridas pequenas taxas de resistência, como 0,005 ou mesmo mais pequenas, dependendo dos valores de custo acumulado.",
	"@@Cost-Distance_Accumulative-Cost-Resistance-Rate_tag2@@": "O valor tem de ser maior que zero. A capacidade predefinida está na extremidade do raster de saída.",
	"@@Cost-Distance_Accumulative-Cost-Resistance-Rate_tag3@@": "Pode ser utilizado para um valor numérico (duplo) ou um campo de <strong>Raster de Origem</strong> para este parâmetro.",
	"@@Cost-Distance_Capacity_tag0@@": "Define a capacidade de custo para o condutor para uma origem. Os cálculos de custos continuam para cada origem até que a capacidade especificada seja alcançada.",
	"@@Cost-Distance_Capacity_tag1@@": "O valor tem de ser maior que zero. A capacidade predefinida está na extremidade do raster de saída.",
	"@@Cost-Distance_Capacity_tag2@@": "Pode ser utilizado para um valor numérico (duplo) ou um campo de <strong>Raster de Origem</strong> para este parâmetro.",
	"@@Cost-Distance_Cost-Raster_tag0@@": "Um raster de entrada necessário define o custo ou impedância para que se mova de modo planimétrico através de cada célula. O valor em cada localização da célula representa a distância de custo-por-unidade para movimentação. Cada valor da localização da célula é multiplicado pela resolução de célula e também compensa o movimento diagonal para obter os custos totais de passagem pela célula.",
	"@@Cost-Distance_Cost-Raster_tag1@@": "Os valores de <strong>Raster de Custo</strong> podem ser um número inteiro ou ponto flutuante, mas não podem ser negativos ou zero.",
	"@@Cost-Distance_Maximum-Distance_tag0@@": "O limiar que os valores de custo acumulado não podem exceder. Se uma distância de custo acumulado exceder este valor, o valor de saída para a localização da célula será NoData. A distância máxima define a extensão em que as distâncias de custo acumulado são calculadas. A distância predefinida é até à extensão do raster de saída.",
	"@@Cost-Distance_Multiplier-to-Apply-to-Costs_tag0@@": "Um multiplicador para aplicar os valores de custo.",
	"@@Cost-Distance_Multiplier-to-Apply-to-Costs_tag1@@": "Este parâmetro permite controlar o modo de viagem ou a magnitude numa origem. Quanto maior for o multiplicador, maior será o custo de se mover através de cada célula.",
	"@@Cost-Distance_Multiplier-to-Apply-to-Costs_tag2@@": "Os valores têm de ser maiores que zero. O padrão é 1.",
	"@@Cost-Distance_Multiplier-to-Apply-to-Costs_tag3@@": "Pode ser utilizado para um valor numérico (duplo) ou um campo de <strong>Raster de Origem</strong> para este parâmetro.",
	"@@Cost-Distance_Source-Raster_tag0@@": "O raster de entrada necessário das localizações de origem.",
	"@@Cost-Distance_Source-Raster_tag1@@": "Trata-se de um raster que identifica as células ou localizações a partir das quais é calculada a menor distância de custo acumulado para cada localização da célula de saída.",
	"@@Cost-Distance_Start-Cost_tag0@@": "O custo de arranque a partir do qual se iniciam os cálculos de custos. Este parâmetro permite a especificação do custo fixo associado a uma origem. Em vez de começar com um custo de 0, o algoritmo de custo começa com o valor especificado.",
	"@@Cost-Distance_Start-Cost_tag1@@": "O valor deverá ser igual ou maior que zero. O padrão é 0.",
	"@@Cost-Distance_Travel-Direction_tag0@@": "Define a direção do condutor ao aplicar a taxa de resistência à origem e o custo de arranque da origem.",
	"@@Cost-Distance_Travel-Direction_tag1@@": "<strong>Da Origem</strong>--A taxa de resistência à origem e o custo de arranque da origem serão aplicados a partir da origem de entrada e ao sair das células não de origem. Isto é por omissão.",
	"@@Cost-Distance_Travel-Direction_tag3@@": "<strong>Para a Origem</strong>--A taxa de resistência à origem e o custo de arranque da origem serão aplicados a partir de cada célula não de origem e de volta à origem de entrada.",
	"@@Cost-Distance_Travel-Direction_tag5@@": "Especifique a palavra-chave <strong>Da Origem</strong> ou <strong>Para a Origem</strong> que será aplicada a todas as origens, ou especifique um campo no <strong>Raster de Origem</strong> que contenha as palavras-chave para identificar a direção de deslocação para cada origem. Esse campo deve conter a string ${FROM_SOURCE} ou ${TO_SOURCE}.",
	"@@Curvature_Curvature-Type_tag0@@": "O tipo de curvatura acentua diferentes aspetos da inclinação. Existem três opções de curvatura:",
	"@@Curvature_Curvature-Type_tag1@@": "Asa--É perpendicular à direção da inclinação máxima. Afeta a convergência e a divergência de fluxo ao longo de uma superfície.",
	"@@Curvature_Curvature-Type_tag2@@": "Perfil--É paralelo à inclinação e indica a direção da inclinação máxima. Afeta a aceleração e desaceleração do fluxo em toda a superfície.",
	"@@Curvature_Curvature-Type_tag3@@": "Padrão--Combina as curvaturas de <strong>Perfil</strong> e <strong>Asa</strong>.",
	"@@Curvature_DEM_tag0@@": "Um raster de modelo digital de elevação (DEM).",
	"@@Curvature_Z-Factor_tag0@@": "O fator z ajusta as unidades de medida para as unidades z quando são diferentes das unidades x e y da superfície de entrada. Se as unidades x e y e as unidades z estiverem nas mesmas unidades de medida, o fator z deve ser definido para 1. Os valores z da superfície de entrada são multiplicados pelo fator z ao calcular a superfície de saída final. Por exemplo, se as suas unidades z estiverem em pés e as suas unidades x e y em metros, utilizaria um fator z de 0,3048 para converter as suas unidades z de pés para metros, dado que 1 pé = 0,3048 metros.",
	"@@Divide_Cellsize-Type_tag0@@": "Escolha qual o tamanho da célula a utilizar no raster de saída. Se todos os tamanhos da célula de entrada forem os mesmos, todas as opções irão produzir os mesmos resultados.",
	"@@Divide_Cellsize-Type_tag1@@": "Primeiro De--Utiliza o primeiro tamanho da célula dos rasters de entrada.",
	"@@Divide_Cellsize-Type_tag2@@": "Último De--Utiliza o último tamanho da célula dos rasters de entrada.",
	"@@Divide_Cellsize-Type_tag3@@": "Máximo De--Utiliza o maior tamanho da célula de todos os rasters de entrada. Isto é por omissão.",
	"@@Divide_Cellsize-Type_tag4@@": "Média De--Utiliza o tamanho da célula médio de todos os rasters de entrada.",
	"@@Divide_Cellsize-Type_tag5@@": "Mín. De--Utiliza o menor tamanho da célula de todos os rasters de entrada.",
	"@@Divide_Extent-Type_tag0@@": "Escolha qual a extensão que deve ser utilizada no raster de saída:",
	"@@Divide_Extent-Type_tag1@@": "Primeiro De--Utiliza a extensão do primeiro raster de entrada para determinar a extensão de processamento.",
	"@@Divide_Extent-Type_tag2@@": "Interseção De--Utiliza a extensão dos pixéis sobrepostos para determinar a extensão de processamento. Isto é por omissão.",
	"@@Divide_Extent-Type_tag3@@": "Último De--Utiliza a extensão do último raster de entrada para determinar a extensão de processamento.",
	"@@Divide_Extent-Type_tag4@@": "União De--Utiliza a extensão de todos os rasters para determinar a extensão de processamento.",
	"@@Divide_Raster_tag0@@": "A entrada cujo valor será dividido pela segunda entrada.",
	"@@Divide_Raster_tag1@@": "Pode ser utilizado um número como entrada para este parâmetro, desde que seja especificado um raster para ${Raster2}.",
	"@@Divide_Raster2_tag0@@": "A entrada por cujo valor a primeira entrada será dividida.",
	"@@Divide_Raster2_tag1@@": "Pode ser utilizado um número como uma entrada para este parâmetro, desde que seja especificado um raster para ${Raster}.",
	"@@Elevation-Void-Fill_DEM_tag0@@": "O DEM de entrada.",
	"@@Elevation-Void-Fill_Max-Void-Width_tag0@@": "O valor de largura de vazio máximo é utilizado para especificar o tamanho maior de um vazio que pretende preencher. Se a largura ou altura da caixa delimitadora à volta do vazio for superior ao valor de largura de vazio máximo, o vazio não é preenchido. As unidades deste parâmetro são as mesmas que as unidades utilizadas no sistema de referência espacial dos seus dados.",
	"@@Elevation-Void-Fill_Max-Void-Width_tag1@@": "Se este parâmetro estiver em branco ou tiver um valor de ${0}, não será utilizada uma largura máxima e todos os vazios serão preenchidos. Um valor de ${-1} significa que não haverá preenchimento de vazios.",
	"@@Elevation-Void-Fill_Short-Range-IDW-Radius_tag0@@": "O raio de pesquisa máximo que será utilizado para preenchimento do vazio. Um vazio que esteja mais afastado de qualquer píxel válido do que este valor limite irá permanecer vazio. As unidades deste parâmetro são as mesmas que as unidades utilizadas no sistema de referência espacial dos seus dados.",
	"@@Elevation-Void-Fill_Short-Range-IDW-Radius_tag1@@": "Se o valor deste parâmetro estiver em branco, ${0}, ou ${-1} este parâmetro não será utilizado.",
	"@@Equal-to_Cellsize-Type_tag0@@": "Escolha qual o tamanho da célula a utilizar no raster de saída. Se todos os tamanhos da célula de entrada forem os mesmos, todas as opções irão produzir os mesmos resultados.",
	"@@Equal-to_Cellsize-Type_tag1@@": "Primeiro De--Utiliza o primeiro tamanho da célula dos rasters de entrada.",
	"@@Equal-to_Cellsize-Type_tag2@@": "Último De--Utiliza o último tamanho da célula dos rasters de entrada.",
	"@@Equal-to_Cellsize-Type_tag3@@": "Máximo De--Utiliza o maior tamanho da célula de todos os rasters de entrada. Isto é por omissão.",
	"@@Equal-to_Cellsize-Type_tag4@@": "Média De--Utiliza o tamanho da célula médio de todos os rasters de entrada.",
	"@@Equal-to_Cellsize-Type_tag5@@": "Mín. De--Utiliza o menor tamanho da célula de todos os rasters de entrada.",
	"@@Equal-to_Extent-Type_tag0@@": "Escolha qual a extensão que deve ser utilizada no raster de saída:",
	"@@Equal-to_Extent-Type_tag1@@": "Primeiro De--Utiliza a extensão do primeiro raster de entrada para determinar a extensão de processamento.",
	"@@Equal-to_Extent-Type_tag2@@": "Interseção De--Utiliza a extensão dos pixéis sobrepostos para determinar a extensão de processamento. Isto é por omissão.",
	"@@Equal-to_Extent-Type_tag3@@": "Último De--Utiliza a extensão do último raster de entrada para determinar a extensão de processamento.",
	"@@Equal-to_Extent-Type_tag4@@": "União De--Utiliza a extensão de todos os rasters para determinar a extensão de processamento.",
	"@@Equal-to_Raster_tag0@@": "A entrada que será utilizada para comparação da igualdade pela segunda entrada.",
	"@@Equal-to_Raster_tag1@@": "Pode ser utilizado um valor constante como entrada para este parâmetro, desde que seja especificado um raster para o outro parâmetro.",
	"@@Equal-to_Raster2_tag0@@": "A entrada que será utilizada para comparação da igualdade pela primeira entrada.",
	"@@Equal-to_Raster2_tag1@@": "Pode ser utilizado um valor constante como entrada para este parâmetro, desde que seja especificado um raster para o outro parâmetro.",
	"@@Euclidean-Allocation_Cellsize_tag0@@": "O tamanho da célula em que será criado o raster de saída.",
	"@@Euclidean-Allocation_Cellsize_tag1@@": "Se o tamanho da célula tiver sido explicitamente definido em <strong>Ambientes de Análise</strong>, esse será o tamanho da célula predefinido. Se não tiver sido definido, o tamanho da célula de saída será o mesmo de <strong>Raster de Origem</strong>.",
	"@@Euclidean-Allocation_Distance-Method_tag0@@": "Determina se deve calcular a distância através de um método planar (terra plana) ou geodésico (elipsoide).",
	"@@Euclidean-Allocation_Distance-Method_tag1@@": "Geodésico--A linha mais curta entre dois pontos na superfície da terra num esferoide (elipsoide). Portanto, independentemente da projeção da entrada ou saída, os resultados não se alteram. Uma utilização para uma linha geodésica é quando pretende determinar a distância mais curta entre duas cidades para a trajetória de voo de um avião. Isto também é conhecido como arco de círculo máximo se se basear numa esfera em vez de num elipsoide.",
	"@@Euclidean-Allocation_Distance-Method_tag2@@": "Planar--As medições planares utilizam matemática cartesiana 2D para calcular o comprimento e a área. A opção só está disponível ao medir um sistema de coordenadas projetado e o plano 2D desse sistema de coordenadas será utilizado como base para as medições.",
	"@@Euclidean-Allocation_Maximum-Distance_tag0@@": "Define a distância limite dentro da qual a origem mais próxima será determinada. Se a distância para a origem mais próxima exceder este valor, a saída para essa célula será ${NoData}.",
	"@@Euclidean-Allocation_Maximum-Distance_tag1@@": "A distância predefinida é até à extensão do raster de saída.",
	"@@Euclidean-Allocation_Raster-Barriers_tag0@@": "O raster que define as barreiras.",
	"@@Euclidean-Allocation_Raster-Barriers_tag1@@": "O conjunto de dados deve conter ${NoData} onde não existirem barreiras. As barreiras são representadas por valores válidos, incluindo zero.",
	"@@Euclidean-Allocation_Raster-Barriers_tag2@@": "As barreiras podem ser definidas por um raster de número inteiro ou de ponto flutuante.",
	"@@Euclidean-Allocation_Source-Field_tag0@@": "O campo utilizado para atribuir valores às localizações de origem. Deve ser do tipo número inteiro. Se <strong>Raster de Valor</strong> tiver sido definido, os valores nessa entrada têm precedência sobre qualquer definição para o <strong>Campo de Origem</strong>.",
	"@@Euclidean-Allocation_Source-Raster_tag0@@": "Um raster de entrada necessário que identifica as localizações de origem. Com base na distância euclidiana, a origem mais próxima será determinada para cada célula na saída",
	"@@Euclidean-Allocation_Source-Raster_tag1@@": "O tipo de entrada pode ser um número inteiro ou ponto flutuante.",
	"@@Euclidean-Allocation_Value-Raster_tag0@@": "O raster de número inteiro de entrada que identifica os valores da zona a utilizar para cada localização de origem de entrada. Para cada célula de localização de origem, o valor definido pelo <strong>Raster de Valor</strong> será atribuído a todas as células alocadas à localização de origem para o cálculo. O <strong>Raster de Valor</strong> terá precedência sobre qualquer definição para o <strong>Campo de Origem</strong>.",
	"@@Euclidean-Direction_Cellsize_tag0@@": "O tamanho da célula em que será criado o raster de saída.",
	"@@Euclidean-Direction_Cellsize_tag1@@": "Se o tamanho da célula tiver sido explicitamente definido em <strong>Ambientes de Análise</strong>, esse será o tamanho da célula predefinido. Se não tiver sido definido, o tamanho da célula de saída será o mesmo de <strong>Raster de Origem</strong>.",
	"@@Euclidean-Direction_Distance-Method_tag0@@": "Determina se deve calcular a distância através de um método planar (terra plana) ou geodésico (elipsoide).",
	"@@Euclidean-Direction_Distance-Method_tag1@@": "Geodésico--A linha mais curta entre dois pontos na superfície da terra num esferoide (elipsoide). Portanto, independentemente da projeção da entrada ou saída, os resultados não se alteram. Uma utilização para uma linha geodésica é quando pretende determinar a distância mais curta entre duas cidades para a trajetória de voo de um avião. Isto também é conhecido como arco de círculo máximo se se basear numa esfera em vez de num elipsoide.",
	"@@Euclidean-Direction_Distance-Method_tag2@@": "Planar--As medições planares utilizam matemática cartesiana 2D para calcular o comprimento e a área. A opção só está disponível ao medir um sistema de coordenadas projetado e o plano 2D desse sistema de coordenadas será utilizado como base para as medições.",
	"@@Euclidean-Direction_Maximum-Distance_tag0@@": "Define a distância limite dentro da qual a direção para a origem mais próxima será calculada. Se a distância para a origem mais próxima exceder este valor, a saída para essa célula será ${NoData}.",
	"@@Euclidean-Direction_Maximum-Distance_tag1@@": "A distância predefinida é até à extensão do raster de saída.",
	"@@Euclidean-Direction_Raster-Barriers_tag0@@": "O raster que define as barreiras.",
	"@@Euclidean-Direction_Raster-Barriers_tag1@@": "O conjunto de dados deve conter NoData se não existirem barreiras. As barreiras são representadas por valores válidos, incluindo zero.",
	"@@Euclidean-Direction_Raster-Barriers_tag2@@": "As barreiras podem ser definidas por um raster de número inteiro ou de ponto flutuante.",
	"@@Euclidean-Direction_Source-Raster_tag0@@": "Um raster de entrada necessário que identifica as células ou localizações para as quais a direção euclidiana para cada localização da célula de saída é calculada.",
	"@@Euclidean-Direction_Source-Raster_tag1@@": "O tipo de entrada pode ser um número inteiro ou ponto flutuante.",
	"@@Euclidean-Distance_Cellsize_tag0@@": "O tamanho da célula em que será criado o raster de saída.",
	"@@Euclidean-Distance_Cellsize_tag1@@": "Se o tamanho da célula tiver sido explicitamente definido em <strong>Ambientes de Análise</strong>, esse será o tamanho da célula predefinido. Se não tiver sido definido, o tamanho da célula de saída será o mesmo de <strong>Raster de Origem</strong>.",
	"@@Euclidean-Distance_Distance-Method_tag0@@": "Determina se deve calcular a distância através de um método planar (terra plana) ou geodésico (elipsoide).",
	"@@Euclidean-Distance_Distance-Method_tag1@@": "Geodésico--A linha mais curta entre dois pontos na superfície da terra num esferoide (elipsoide). Portanto, independentemente da projeção da entrada ou saída, os resultados não se alteram. Uma utilização para uma linha geodésica é quando pretende determinar a distância mais curta entre duas cidades para a trajetória de voo de um avião. Isto também é conhecido como arco de círculo máximo se se basear numa esfera em vez de num elipsoide.",
	"@@Euclidean-Distance_Distance-Method_tag2@@": "Planar--As medições planares utilizam matemática cartesiana 2D para calcular o comprimento e a área. A opção só está disponível ao medir um sistema de coordenadas projetado e o plano 2D desse sistema de coordenadas será utilizado como base para as medições.",
	"@@Euclidean-Distance_Maximum-Distance_tag0@@": "O limiar que os valores de distância acumulada não podem exceder. Se uma distância euclidiana acumulada exceder este valor, o valor de saída para a localização da célula será NoData.",
	"@@Euclidean-Distance_Maximum-Distance_tag1@@": "A distância predefinida é até à extensão do raster de saída.",
	"@@Euclidean-Distance_Raster-Barriers_tag0@@": "O raster que define as barreiras.",
	"@@Euclidean-Distance_Raster-Barriers_tag1@@": "O conjunto de dados deve conter ${NoData} onde não existirem barreiras. As barreiras são representadas por valores válidos, incluindo zero.",
	"@@Euclidean-Distance_Raster-Barriers_tag2@@": "As barreiras podem ser definidas por um raster de número inteiro ou de ponto flutuante.",
	"@@Euclidean-Distance_Source-Raster_tag0@@": "O raster de entrada necessário que identifica as células ou localizações para as quais a distância euclidiana para cada localização da célula de saída é calculada.",
	"@@Euclidean-Distance_Source-Raster_tag1@@": "O tipo de entrada pode ser um número inteiro ou ponto flutuante.",
	"@@Exp_Cellsize-Type_tag0@@": "Escolha qual o tamanho da célula a utilizar no raster de saída. Se todos os tamanhos da célula de entrada forem os mesmos, todas as opções irão produzir os mesmos resultados.",
	"@@Exp_Cellsize-Type_tag1@@": "Primeiro De--Utiliza o primeiro tamanho da célula dos rasters de entrada.",
	"@@Exp_Cellsize-Type_tag2@@": "Último De--Utiliza o último tamanho da célula dos rasters de entrada.",
	"@@Exp_Cellsize-Type_tag3@@": "Máximo De--Utiliza o maior tamanho da célula de todos os rasters de entrada. Isto é por omissão.",
	"@@Exp_Cellsize-Type_tag4@@": "Média De--Utiliza o tamanho da célula médio de todos os rasters de entrada.",
	"@@Exp_Cellsize-Type_tag5@@": "Mín. De--Utiliza o menor tamanho da célula de todos os rasters de entrada.",
	"@@Exp_Extent-Type_tag0@@": "Escolha qual a extensão que deve ser utilizada no raster de saída:",
	"@@Exp_Extent-Type_tag1@@": "Primeiro De--Utiliza a extensão do primeiro raster de entrada para determinar a extensão de processamento.",
	"@@Exp_Extent-Type_tag2@@": "Interseção De--Utiliza a extensão dos pixéis sobrepostos para determinar a extensão de processamento. Isto é por omissão.",
	"@@Exp_Extent-Type_tag3@@": "Último De--Utiliza a extensão do último raster de entrada para determinar a extensão de processamento.",
	"@@Exp_Extent-Type_tag4@@": "União De--Utiliza a extensão de todos os rasters para determinar a extensão de processamento.",
	"@@Exp_Raster_tag0@@": "Os valores de entrada para os quais encontrar o exponencial de base e.",
	"@@Exp10_Cellsize-Type_tag0@@": "Escolha qual o tamanho da célula a utilizar no raster de saída. Se todos os tamanhos da célula de entrada forem os mesmos, todas as opções irão produzir os mesmos resultados.",
	"@@Exp10_Cellsize-Type_tag1@@": "Primeiro De--Utiliza o primeiro tamanho da célula dos rasters de entrada.",
	"@@Exp10_Cellsize-Type_tag2@@": "Último De--Utiliza o último tamanho da célula dos rasters de entrada.",
	"@@Exp10_Cellsize-Type_tag3@@": "Máximo De--Utiliza o maior tamanho da célula de todos os rasters de entrada. Isto é por omissão.",
	"@@Exp10_Cellsize-Type_tag4@@": "Média De--Utiliza o tamanho da célula médio de todos os rasters de entrada.",
	"@@Exp10_Cellsize-Type_tag5@@": "Mín. De--Utiliza o menor tamanho da célula de todos os rasters de entrada.",
	"@@Exp10_Extent-Type_tag0@@": "Escolha qual a extensão que deve ser utilizada no raster de saída:",
	"@@Exp10_Extent-Type_tag1@@": "Primeiro De--Utiliza a extensão do primeiro raster de entrada para determinar a extensão de processamento.",
	"@@Exp10_Extent-Type_tag2@@": "Interseção De--Utiliza a extensão dos pixéis sobrepostos para determinar a extensão de processamento. Isto é por omissão.",
	"@@Exp10_Extent-Type_tag3@@": "Último De--Utiliza a extensão do último raster de entrada para determinar a extensão de processamento.",
	"@@Exp10_Extent-Type_tag4@@": "União De--Utiliza a extensão de todos os rasters para determinar a extensão de processamento.",
	"@@Exp10_Raster_tag0@@": "Os valores de entrada para os quais encontrar o exponencial de base 10.",
	"@@Exp2_Cellsize-Type_tag0@@": "Escolha qual o tamanho da célula a utilizar no raster de saída. Se todos os tamanhos da célula de entrada forem os mesmos, todas as opções irão produzir os mesmos resultados.",
	"@@Exp2_Cellsize-Type_tag1@@": "Primeiro De--Utiliza o primeiro tamanho da célula dos rasters de entrada.",
	"@@Exp2_Cellsize-Type_tag2@@": "Último De--Utiliza o último tamanho da célula dos rasters de entrada.",
	"@@Exp2_Cellsize-Type_tag3@@": "Máximo De--Utiliza o maior tamanho da célula de todos os rasters de entrada. Isto é por omissão.",
	"@@Exp2_Cellsize-Type_tag4@@": "Média De--Utiliza o tamanho da célula médio de todos os rasters de entrada.",
	"@@Exp2_Cellsize-Type_tag5@@": "Mín. De--Utiliza o menor tamanho da célula de todos os rasters de entrada.",
	"@@Exp2_Extent-Type_tag0@@": "Escolha qual a extensão que deve ser utilizada no raster de saída:",
	"@@Exp2_Extent-Type_tag1@@": "Primeiro De--Utiliza a extensão do primeiro raster de entrada para determinar a extensão de processamento.",
	"@@Exp2_Extent-Type_tag2@@": "Interseção De--Utiliza a extensão dos pixéis sobrepostos para determinar a extensão de processamento. Isto é por omissão.",
	"@@Exp2_Extent-Type_tag3@@": "Último De--Utiliza a extensão do último raster de entrada para determinar a extensão de processamento.",
	"@@Exp2_Extent-Type_tag4@@": "União De--Utiliza a extensão de todos os rasters para determinar a extensão de processamento.",
	"@@Exp2_Raster_tag0@@": "Os valores de entrada para os quais encontrar o exponencial de base 2.",
	"@@Extract-Bands_Band_tag0@@": "Selecione as bandas a extrair de uma lista com base na opção do parâmetro <strong>Método</strong> utilizada.",
	"@@Extract-Bands_Combination_tag0@@": "A combinação de banda ou ordem de banda. A lista de seleção depende da opção de <strong>Método</strong> especificada. Por exemplo, se o <strong>Método</strong> for <strong>Nomes de Bandas</strong>, pode selecionar uma combinação de Azul, Verde e Vermelho para extrair uma imagem de cor natural.",
	"@@Extract-Bands_Method_tag0@@": "Selecione um dos seguintes métodos para extrair bandas:",
	"@@Extract-Bands_Method_tag1@@": "<strong>ID de Bandas</strong>--A designação ou número de banda, que são únicos para cada sensor. Estas podem ser idênticas aos <strong>Nomes de Bandas</strong>.",
	"@@Extract-Bands_Method_tag4@@": "<strong>Nomes de Bandas</strong>--Utiliza o nome da banda que representa o intervalo de comprimento de onda no espetro eletromagnético (Vermelho, Infravermelho Próximo, Infravermelho Térmico, por exemplo). Isto também pode ser designado como um ID do número da banda.",
	"@@Extract-Bands_Method_tag6@@": "<strong>Comprimentos de Onda de Bandas</strong>--O comprimento de onda no espetro eletromagnético.",
	"@@Extract-Bands_Missing-Band-Action_tag0@@": "Especifique a ação que irá ocorrer quando uma banda na lista de bandas extraídas não estiver disponível.",
	"@@Extract-Bands_Missing-Band-Action_tag1@@": "<strong>Melhor Correspondência</strong>--Encontra a melhor banda disponível para utilizar em vez da banda em falta com base no comprimento de onda, para que a função não falhe",
	"@@Extract-Bands_Missing-Band-Action_tag3@@": "<strong>Falha</strong>--Se no conjunto de dados de entrada estiver em falta qualquer banda especificada no parâmetro <strong>Banda</strong>, parâmetro, a função irá falhar.",
	"@@Extract-Bands_Raster_tag0@@": "O produto raster a partir do qual a banda ou bandas serão extraídas.",
	"@@Fill_Raster_tag0@@": "Um raster de elevação de banda única.",
	"@@Fill_Z-Limit_tag0@@": "A diferença de elevação máxima entre um coletor e o seu ponto de escoamento a ser preenchida.",
	"@@Fill_Z-Limit_tag1@@": "Exceto se for especificado um valor para este parâmetro, todos os coletores serão preenchidos, independentemente da profundidade.",
	"@@Fill_Z-Limit_tag2@@": "O valor de <strong>Limite Z</strong> deve ser maior do que zero.",
	"@@Float_Cellsize-Type_tag0@@": "Escolha qual o tamanho da célula a utilizar no raster de saída. Se todos os tamanhos da célula de entrada forem os mesmos, todas as opções irão produzir os mesmos resultados.",
	"@@Float_Cellsize-Type_tag1@@": "Primeiro De--Utiliza o primeiro tamanho da célula dos rasters de entrada.",
	"@@Float_Cellsize-Type_tag2@@": "Último De--Utiliza o último tamanho da célula dos rasters de entrada.",
	"@@Float_Cellsize-Type_tag3@@": "Máximo De--Utiliza o maior tamanho da célula de todos os rasters de entrada. Isto é por omissão.",
	"@@Float_Cellsize-Type_tag4@@": "Média De--Utiliza o tamanho da célula médio de todos os rasters de entrada.",
	"@@Float_Cellsize-Type_tag5@@": "Mín. De--Utiliza o menor tamanho da célula de todos os rasters de entrada.",
	"@@Float_Extent-Type_tag0@@": "Escolha qual a extensão que deve ser utilizada no raster de saída:",
	"@@Float_Extent-Type_tag1@@": "Primeiro De--Utiliza a extensão do primeiro raster de entrada para determinar a extensão de processamento.",
	"@@Float_Extent-Type_tag2@@": "Interseção De--Utiliza a extensão dos pixéis sobrepostos para determinar a extensão de processamento. Isto é por omissão.",
	"@@Float_Extent-Type_tag3@@": "Último De--Utiliza a extensão do último raster de entrada para determinar a extensão de processamento.",
	"@@Float_Extent-Type_tag4@@": "União De--Utiliza a extensão de todos os rasters para determinar a extensão de processamento.",
	"@@Float_Raster_tag0@@": "O raster de entrada a converter para o ponto flutuante.",
	"@@Flow-Accumulation_Flow-Direction-Raster_tag0@@": "O raster de entrada que exibe a direção do fluxo a partir de cada célula.",
	"@@Flow-Accumulation_Flow-Direction-Raster_tag1@@": "O raster de direção do fluxo pode ser criado ao executar a função de <strong>Direção do Fluxo</strong>.",
	"@@Flow-Accumulation_Flow-Direction-Type_tag0@@": "Define o tipo de raster de direção do fluxo de entrada.",
	"@@Flow-Accumulation_Flow-Direction-Type_tag1@@": "<strong>D8</strong>--O raster de direção do fluxo de entrada é do tipo D8. Isto é por omissão.",
	"@@Flow-Accumulation_Flow-Direction-Type_tag3@@": "<strong>DINF</strong>--O raster de direção do fluxo de entrada é do tipo D-Infinity (DINF).",
	"@@Flow-Accumulation_Flow-Direction-Type_tag5@@": "<strong>MFD</strong>--O raster de direção do fluxo de entrada é do tipo Direção Múltipla do Fluxo (MFD).",
	"@@Flow-Accumulation_Output-Data-Type_tag0@@": "O raster de acumulação de saída pode ser do tipo número inteiro ou ponto flutuante.",
	"@@Flow-Accumulation_Output-Data-Type_tag1@@": "<strong>Flutuante</strong>--O raster de saída será do tipo ponto flutuante. Isto é por omissão.",
	"@@Flow-Accumulation_Output-Data-Type_tag3@@": "<strong>Número Inteiro</strong>--O raster de saída será do tipo número inteiro.",
	"@@Flow-Accumulation_Weight-Raster_tag0@@": "Um raster de entrada opcional para aplicar uma ponderação a cada píxel.",
	"@@Flow-Accumulation_Weight-Raster_tag1@@": "Se não for especificado qualquer raster de ponderação, será aplicada uma ponderação predefinida de 1 a cada píxel.",
	"@@Flow-Direction_Flow-Direction-Type_tag0@@": "Define o tipo de raster de direção do fluxo de entrada.",
	"@@Flow-Direction_Flow-Direction-Type_tag1@@": "<strong>D8</strong>--O raster de direção do fluxo de entrada é do tipo D8. Isto é por omissão.",
	"@@Flow-Direction_Flow-Direction-Type_tag3@@": "<strong>DINF</strong>--O raster de direção do fluxo de entrada é do tipo D-Infinity (DINF).",
	"@@Flow-Direction_Flow-Direction-Type_tag5@@": "<strong>MFD</strong>--O raster de direção do fluxo de entrada é do tipo Direção Múltipla do Fluxo (MFD).",
	"@@Flow-Direction_Force-all-edge-cells-to-flow-outward_tag0@@": "Especifica se os pixéis de extremidade irão fluir sempre para fora ou seguir as regras de fluxo normais.",
	"@@Flow-Direction_Force-all-edge-cells-to-flow-outward_tag1@@": "<strong>Não</strong>--Se a queda máxima no interior de um píxel de extremidade for maior que zero, a direção do fluxo será determinada como habitualmente; caso contrário, a direção do fluxo dirigir-se-á à extremidade. Os pixéis que devem fluir da extremidade do raster de superfície para dentro irão fazê-lo. Isto é por omissão.",
	"@@Flow-Direction_Force-all-edge-cells-to-flow-outward_tag3@@": "<strong>Sim</strong>--Todos os píxeis na extremidade do raster de superfície irão fluir para fora do raster de superfície.",
	"@@Flow-Direction_Raster_tag0@@": "O raster de entrada representa uma superfície de elevação contínua.",
	"@@Flow-Distance_Distance-Type_tag0@@": "Determina se o componente vertical ou horizontal da distância do fluxo é calculado.",
	"@@Flow-Distance_Distance-Type_tag1@@": "<strong>Horizontal</strong>--Os cálculos da distância do fluxo representam o componente horizontal da distância do fluxo a partir de cada píxel no domínio até ao(s) píxel(is) na corrente para a qual fluem.",
	"@@Flow-Distance_Distance-Type_tag3@@": "<strong>Vertical</strong>--Os cálculos da distância do fluxo representam o componente vertical da distância do fluxo a partir de cada píxel no domínio até ao(s) píxel(is) na corrente para a qual fluem. Isto é por omissão.",
	"@@Flow-Distance_Flow-Direction-Raster_tag0@@": "O raster de entrada que exibe a direção do fluxo a partir de cada píxel.",
	"@@Flow-Distance_Flow-Direction-Raster_tag1@@": "Quando é fornecido um raster de direção do fluxo, a(s) direção(ões) da declividade será(ão) limitada(s) às definidas pelas direções do fluxo de entrada.",
	"@@Flow-Distance_Flow-Direction-Raster_tag2@@": "O raster de direção do fluxo pode ser criado utilizando a função de Direção do Fluxo.",
	"@@Flow-Distance_Flow-Direction-Type_tag0@@": "Define o tipo de raster de direção do fluxo de entrada.",
	"@@Flow-Distance_Flow-Direction-Type_tag1@@": "<strong>D8</strong>--O raster de direção do fluxo de entrada é do tipo D8. Isto é por omissão.",
	"@@Flow-Distance_Flow-Direction-Type_tag3@@": "<strong>DINF</strong>--O raster de direção do fluxo de entrada é do tipo D-Infinity (DINF).",
	"@@Flow-Distance_Flow-Direction-Type_tag5@@": "<strong>MFD</strong>--O raster de direção do fluxo de entrada é do tipo Direção Múltipla do Fluxo (MFD).",
	"@@Flow-Distance_Statistics-Type_tag0@@": "Determina o tipo de estatística utilizado para calcular a distância do fluxo ao longo de vários caminhos de fluxo. Se existir apenas um único caminho do fluxo a partir de cada célula para uma célula na corrente, todos os tipos de estatística produzem o mesmo resultado.",
	"@@Flow-Distance_Statistics-Type_tag1@@": "<strong>Mínimo</strong>--Quando existem vários caminhos de fluxo, é calculada a distância mínima do fluxo. Isto é por omissão.",
	"@@Flow-Distance_Statistics-Type_tag3@@": "<strong>Média Ponderada</strong>--Quando existem vários caminhos de fluxo, é calculada uma média ponderada da distância do fluxo. As proporções do fluxo de uma célula para as células vizinhas a jusante são utilizadas como ponderações para calcular a média ponderada.",
	"@@Flow-Distance_Statistics-Type_tag5@@": "<strong>Máximo</strong>--Quando existem vários caminhos de fluxo, é calculada a distância máxima do fluxo.",
	"@@Flow-Distance_Stream-Raster_tag0@@": "Um raster de corrente de entrada que representa uma rede de corrente linear.",
	"@@Flow-Distance_Surface-Raster_tag0@@": "O raster de entrada representa uma superfície de elevação contínua.",
	"@@Flow-Length_Direction-of-Measurement_tag0@@": "A direção da medição ao longo do caminho do fluxo.",
	"@@Flow-Length_Direction-of-Measurement_tag1@@": "<strong> A Jusante</strong>--Calcula a distância da declividade ao longo do caminho do fluxo, de cada célula até um coletor ou saída na extremidade do raster.",
	"@@Flow-Length_Direction-of-Measurement_tag3@@": "<strong>A Montante</strong>--Calcula a maior distância da aclividade ao longo do caminho do fluxo, de cada célula até à parte superior da divisão da drenagem.",
	"@@Flow-Length_Flow-Direction-Raster_tag0@@": "O raster de entrada que exibe a direção do fluxo a partir de cada célula.",
	"@@Flow-Length_Flow-Direction-Raster_tag1@@": "O raster de direção do fluxo pode ser criado ao executar a função de <strong>Direção do Fluxo</strong>.",
	"@@Flow-Length_Weight-Raster_tag0@@": "Um raster de entrada opcional para aplicar uma ponderação a cada célula.",
	"@@Flow-Length_Weight-Raster_tag1@@": "Se não for especificado qualquer raster de ponderação, será aplicada uma ponderação predefinida de 1 a cada célula.",
	"@@Focal-Statistics_Ignore-NoData-in-calculations_tag0@@": "Indica se os valores ${NoData} são ignorados pelo cálculo estatístico.",
	"@@Focal-Statistics_Ignore-NoData-in-calculations_tag1@@": "<strong>Marcado</strong>--Especifica que se existir um valor ${NoData} numa vizinhança, o valor ${NoData} será ignorado. Apenas serão utilizadas células na vizinhança que tiverem valores de dados para determinar o valor de saída. Isto é por omissão.",
	"@@Focal-Statistics_Ignore-NoData-in-calculations_tag3@@": "<strong>Desmarcado</strong>--Especifica que se qualquer célula numa vizinhança tiver um valor ${NoData}, a saída para a célula de processamento será ${NoData}.",
	"@@Focal-Statistics_Neighborhood_tag0@@": "A forma da área à volta de cada célula utilizada para calcular a estatística.",
	"@@Focal-Statistics_Neighborhood_tag1@@": "Cada vizinhança tem parâmetros adicionais com os quais deve definir a forma.",
	"@@Focal-Statistics_Neighborhood_tag2@@": "Coroa Circular, Raio Interior, Raio Exterior",
	"@@Focal-Statistics_Neighborhood_tag3@@": "Círculo, Raio",
	"@@Focal-Statistics_Neighborhood_tag4@@": "Valores Irregulares, Largura, Altura, Vizinhança",
	"@@Focal-Statistics_Neighborhood_tag5@@": "Retângulo, Largura, Altura",
	"@@Focal-Statistics_Neighborhood_tag6@@": "Calço, Raio, Ângulo inicial, Ângulo final",
	"@@Focal-Statistics_Neighborhood_tag7@@": "Valores de Ponderação, Largura, Altura, Vizinhança",
	"@@Focal-Statistics_Neighborhood_tag8@@": "A vizinhança Irregular permite-lhe especificar um bairro com uma forma irregular à volta da célula de processamento. Utilize a tabela de valores de Vizinhança para definir a forma da vizinhança kernel. Um valor de 0 para uma posição de célula indica que a célula não faz parte da vizinhança e não será utilizada para processamento. Um valor de 1 indica que a sua célula correspondente (e valor) é membro da vizinhança.",
	"@@Focal-Statistics_Neighborhood_tag9@@": "A vizinhança de Ponderação é semelhante ao tipo de vizinhança irregular, uma vez que lhe permite definir uma vizinhança irregular à volta da célula de processamento, mas também lhe permite aplicar ponderações aos valores de entrada. Os valores no kernel de ponderação especificam quais as posições da célula que devem ser incluídas na vizinhança e as ponderações pelas quais serão multiplicados. Utilize um valor de 0 para excluir uma célula do processamento. Os valores positivos, negativos e decimais são todos opções válidas para utilização como ponderação. Para o tipo de vizinhança de Ponderação, só são suportadas as estatísticas de Média, Desvio Padrão ou Soma.",
	"@@Focal-Statistics_Percentile-Value_tag0@@": "Indica qual o percentil a calcular quando <strong>Percentil</strong> está selecionado como o tipo de estatística. A predefinição é 90, para o 90º percentil.",
	"@@Focal-Statistics_Percentile-Value_tag3@@": "O intervalo dos valores é de 0 a 100. O 0.º percentil é essencialmente equivalente à estatística Mínimo e o 100.º percentil equivalente a Máximo, com a exceção de que o resultado será o ponto flutuante. Um valor de 50 irá essencialmente produzir o mesmo resultado que a estatística Mediana.",
	"@@Focal-Statistics_Raster_tag0@@": "O raster de entrada necessário.",
	"@@Focal-Statistics_Statistics-Type_tag0@@": "O tipo estatístico a calcular.",
	"@@Focal-Statistics_Statistics-Type_tag1@@": "<strong>Maioria</strong>--Calcula a maioria (valor que ocorre com mais frequência) das células na vizinhança.",
	"@@Focal-Statistics_Statistics-Type_tag3@@": "<strong>Máximo</strong>--Calcula o máximo (valor maior) das células na vizinhança.",
	"@@Focal-Statistics_Statistics-Type_tag5@@": "<strong>Média</strong>--Calcula a média (valor médio) das células na vizinhança.",
	"@@Focal-Statistics_Statistics-Type_tag7@@": "<strong>Mediana</strong>--Calcula a mediana das células na vizinhança.",
	"@@Focal-Statistics_Statistics-Type_tag9@@": "<strong>Mínimo</strong>--Calcula o mínimo (valor menor) das células na vizinhança.",
	"@@Focal-Statistics_Statistics-Type_tag11@@": "<strong>Minoria</strong>--Calcula a minoria (valor que ocorre com menos frequência) das células na vizinhança.",
	"@@Focal-Statistics_Statistics-Type_tag13@@": "<strong>Percentil</strong>--Calcula um percentil das células na vizinhança. Pode determinar qual o percentil a calcular com o parâmetro <strong>Valor de Percentil</strong>.",
	"@@Focal-Statistics_Statistics-Type_tag17@@": "<strong>Intervalo</strong>--Calcula o intervalo (diferença entre o valor maior e o menor) das células na vizinhança.",
	"@@Focal-Statistics_Statistics-Type_tag19@@": "<strong>Desvio Padrão</strong>--Calcula o desvio padrão das células na vizinhança.",
	"@@Focal-Statistics_Statistics-Type_tag21@@": "<strong>Soma</strong>--Calcula a soma (total de todos os valores) das células na vizinhança.",
	"@@Focal-Statistics_Statistics-Type_tag23@@": "<strong>Variedade</strong>--Calcula a variedade (o número de valores únicos) das células na vizinhança.",
	"@@Focal-Statistics_Statistics-Type_tag25@@": "Se o raster de entrada for um ponto flutuante, só estão disponíveis os tipos estatísticos Média, Máximo, Mediana, Mínimo, Percentil, Intervalo, Desvio Padrão e Soma.",
	"@@Focal-Statistics_Statistics-Type_tag26@@": "Para Média, Mediana, Percentil e Desvio Padrão, a saída é sempre um ponto flutuante.",
	"@@Focal-Statistics_Statistics-Type_tag27@@": "O tipo estatístico predefinido é Média.",
	"@@Geometric_Constant-Z_tag0@@": "Especifique uma elevação constante a utilizar para a função Geométrica.",
	"@@Geometric_DEM_tag0@@": "Especifique o DEM a utilizar para a função Geométrica. Pode utilizar um DEM contido no conjunto de dados de mosaico como um conjunto de dados raster ou como um conjunto de dados de mosaico cuja saída seja um DEM.",
	"@@Geometric_Geoid_tag0@@": "A maioria dos conjuntos de dados de elevação, como USGS NED ou Elevação mundial, são alturas ortométricas, pelo que é necessário selecionar a correção Geoide para compatibilidade com RPC de satélite, que requer alturas elipsoidais. Marque a caixa de seleção <strong>Geoide</strong> para aplicar a correção geoide (EGM96) aos valores z, exceto se o seu DEM já estiver referenciado para alturas elipsoidais.",
	"@@Geometric_Method_tag0@@": "Escolha o método de elevação para a função geométrica:",
	"@@Geometric_Method_tag1@@": "Utilizar a Constante Z--Especificar uma elevação constante para realizar a função Geométrica.",
	"@@Geometric_Method_tag2@@": "Utilizar o DEM--Especificar um DEM para realizar a função Geométrica.",
	"@@Geometric_Raster_tag0@@": "O raster de entrada.",
	"@@Geometric_Z-Factor_tag0@@": "Os coeficientes polinomiais racionais (RPC) de satélite são dimensionados para conjuntos de dados de elevação com unidades verticais em metros. Se a sua elevação utilizar outras unidades verticais, introduza um <strong>Fator Z</strong> para redimensionar para metros. Por exemplo, se as suas unidades de elevação estiverem em pés, utilizaria um valor de 0,3048 para converter as suas unidades de elevação de pés para metros.",
	"@@Geometric_Z-Offset_tag0@@": "O valor de base a ser adicionado ao valor de elevação no DEM. Isto pode ser utilizado para compensar os valores de elevação que não começam ao nível do mar.",
	"@@Geometric_Tolerance_tag0@@": "Especifique o erro máximo tolerável na função geométrica em número de píxeis. A predefinição para o tipo raster NITF (NCDRD) é de dois.",
	"@@Grayscale_Raster_tag0@@": "O raster de entrada.",
	"@@Grayscale_Conversion-Parameters_tag0@@": "As ponderações de cada uma das bandas que contêm o raster de entrada.",
	"@@Greater-Than_Cellsize-Type_tag0@@": "Escolha qual o tamanho da célula a utilizar no raster de saída. Se todos os tamanhos da célula de entrada forem os mesmos, todas as opções irão produzir os mesmos resultados.",
	"@@Greater-Than_Cellsize-Type_tag1@@": "Primeiro De--Utiliza o primeiro tamanho da célula dos rasters de entrada.",
	"@@Greater-Than_Cellsize-Type_tag2@@": "Último De--Utiliza o último tamanho da célula dos rasters de entrada.",
	"@@Greater-Than_Cellsize-Type_tag3@@": "Máximo De--Utiliza o maior tamanho da célula de todos os rasters de entrada. Isto é por omissão.",
	"@@Greater-Than_Cellsize-Type_tag4@@": "Média De--Utiliza o tamanho da célula médio de todos os rasters de entrada.",
	"@@Greater-Than_Cellsize-Type_tag5@@": "Mín. De--Utiliza o menor tamanho da célula de todos os rasters de entrada.",
	"@@Greater-Than_Extent-Type_tag0@@": "Escolha qual a extensão que deve ser utilizada no raster de saída:",
	"@@Greater-Than_Extent-Type_tag1@@": "Primeiro De--Utiliza a extensão do primeiro raster de entrada para determinar a extensão de processamento.",
	"@@Greater-Than_Extent-Type_tag2@@": "Interseção De--Utiliza a extensão dos pixéis sobrepostos para determinar a extensão de processamento. Isto é por omissão.",
	"@@Greater-Than_Extent-Type_tag3@@": "Último De--Utiliza a extensão do último raster de entrada para determinar a extensão de processamento.",
	"@@Greater-Than_Extent-Type_tag4@@": "União De--Utiliza a extensão de todos os rasters para determinar a extensão de processamento.",
	"@@Greater-Than_Raster_tag0@@": "A entrada a testar para determinar se é superior à segunda entrada.",
	"@@Greater-Than_Raster_tag1@@": "Pode ser utilizado um valor constante como entrada para este parâmetro, desde que seja especificado um raster para o outro parâmetro.",
	"@@Greater-Than_Raster2_tag0@@": "A entrada face à qual a primeira entrada é testada para ser maior do que a mesma.",
	"@@Greater-Than_Raster2_tag1@@": "Pode ser utilizado um valor constante como entrada para este parâmetro, desde que seja especificado um raster para o outro parâmetro.",
	"@@Greater-Than-Equal_Cellsize-Type_tag0@@": "Escolha qual o tamanho da célula a utilizar no raster de saída. Se todos os tamanhos da célula de entrada forem os mesmos, todas as opções irão produzir os mesmos resultados.",
	"@@Greater-Than-Equal_Cellsize-Type_tag1@@": "Primeiro De--Utiliza o primeiro tamanho da célula dos rasters de entrada.",
	"@@Greater-Than-Equal_Cellsize-Type_tag2@@": "Último De--Utiliza o último tamanho da célula dos rasters de entrada.",
	"@@Greater-Than-Equal_Cellsize-Type_tag3@@": "Máximo De--Utiliza o maior tamanho da célula de todos os rasters de entrada. Isto é por omissão.",
	"@@Greater-Than-Equal_Cellsize-Type_tag4@@": "Média De--Utiliza o tamanho da célula médio de todos os rasters de entrada.",
	"@@Greater-Than-Equal_Cellsize-Type_tag5@@": "Mín. De--Utiliza o menor tamanho da célula de todos os rasters de entrada.",
	"@@Greater-Than-Equal_Extent-Type_tag0@@": "Escolha qual a extensão que deve ser utilizada no raster de saída:",
	"@@Greater-Than-Equal_Extent-Type_tag1@@": "Primeiro De--Utiliza a extensão do primeiro raster de entrada para determinar a extensão de processamento.",
	"@@Greater-Than-Equal_Extent-Type_tag2@@": "Interseção De--Utiliza a extensão dos pixéis sobrepostos para determinar a extensão de processamento. Isto é por omissão.",
	"@@Greater-Than-Equal_Extent-Type_tag3@@": "Último De--Utiliza a extensão do último raster de entrada para determinar a extensão de processamento.",
	"@@Greater-Than-Equal_Extent-Type_tag4@@": "União De--Utiliza a extensão de todos os rasters para determinar a extensão de processamento.",
	"@@Greater-Than-Equal_Raster_tag0@@": "A entrada a testar para determinar se é superior ou igual à segunda entrada.",
	"@@Greater-Than-Equal_Raster_tag1@@": "Pode ser utilizado um valor constante como entrada para este parâmetro, desde que seja especificado um raster para o outro parâmetro.",
	"@@Greater-Than-Equal_Raster2_tag0@@": "A entrada face à qual a primeira entrada é testada para ser maior ou igual do que a mesma.",
	"@@Greater-Than-Equal_Raster2_tag1@@": "Pode ser utilizado um valor constante como entrada para este parâmetro, desde que seja especificado um raster para o outro parâmetro.",
	"@@Heat-Index_Heat-Index-Units_tag0@@": "A unidade de medição associada ao raster de saída. As unidades de saída disponíveis são Celsius, Fahrenheit e Kelvin.",
	"@@Heat-Index_Relative-Humidity-Raster_tag0@@": "Um raster de banda única em que os valores de píxel representam humidade relativa como um valor percentual entre 0 e 100.",
	"@@Heat-Index_Temperature-Raster_tag0@@": "Um raster de banda única onde os valores de píxel representam a temperatura ambiente do ar.",
	"@@Heat-Index_Temperature-Units_tag0@@": "A unidade de medição associada ao raster de temperatura de entrada. As unidades de entrada disponíveis são Celsius, Fahrenheit e Kelvin.",
	"@@Hillshade_Altitude_tag0@@": "A altitude é o ângulo de elevação do sol acima do horizonte e varia de 0 a 90 graus. Um valor de 0 graus indica que o sol está no horizonte, ou seja, no mesmo plano horizontal que a estrutura de referência. Um valor de 90 graus indica que o sol está diretamente acima.",
	"@@Hillshade_Altitude_tag1@@": "Este parâmetro só é válido quando <strong>Tipo de Sombra</strong> for <strong>Tradicional</strong>. A predefinição é de 45 graus acima do horizonte.",
	"@@Hillshade_Azimuth_tag0@@": "O Azimute é a posição relativa do sol ao longo do horizonte (em graus). Esta posição é indicada pelo ângulo do sol medido no sentido dos ponteiros do relógio seguindo para norte. Um azimute de 0 graus indica o norte, o este é de 90 graus, o sul é de 180 graus e o oeste é de 270 graus.",
	"@@Hillshade_Azimuth_tag1@@": "Este parâmetro só é válido quando <strong>Tipo de Sombra</strong> for <strong>Tradicional</strong>. A predefinição é de 315 graus, de noroeste.",
	"@@Hillshade_Disable-default-edge-pixel-interpolation_tag0@@": "A utilização desta opção evita quaisquer artefactos de reamostragem que possam ocorrer ao longo das extremidades de um raster. Os pixéis de saída ao longo da extremidade de um raster ou junto de pixéis NoData serão preenchidos com NoData; assim, recomenda-se que este parâmetro seja utilizado apenas com conjuntos de dados de mosaico de elevação que tenham sido sobrepostos. Quando estão disponíveis pixéis sobrepostos, as áreas NoData irão apresentar os valores de pixéis sobrepostos em vez de pixéis em branco.",
	"@@Hillshade_Disable-default-edge-pixel-interpolation_tag1@@": "Não verificado--A reamostragem bilinear será aplicada uniformemente para reamostrar a sua sombra. Utilize esta opção quando o conjunto de dados de mosaico que contém os seus dados raster de elevação estiver unido. Isto é por omissão.",
	"@@Hillshade_Disable-default-edge-pixel-interpolation_tag2@@": "Verificado--A reamostragem bilinear será utilizada dentro da sombra, exceto ao longo das extremidades dos rasters ou junto a pixéis NoData. Estes pixéis serão preenchidos com NoData e apresentam os valores de pixéis sobrepostos, reduzindo assim quaisquer efeitos de extremidade afiada que possam ocorrer de outra forma. Utilize esta opção quando o conjunto de dados de mosaico que contém os seus dados raster de elevação consiste em itens ou mosaicos sobrepostos.",
	"@@Hillshade_Disable-default-edge-pixel-interpolation_tag3@@": "Os resultados da função podem ser dependentes dos dados. Se observar artefactos de limite de mosaicos na sua saída, selecione a condição alternativa da caixa de seleção.",
	"@@Hillshade_Hillshade-Type_tag0@@": "Controla a origem da iluminação para a sombra:",
	"@@Hillshade_Hillshade-Type_tag1@@": "Tradicional--Calcula a sombra a partir de uma única direção de iluminação. Isto é por omissão. Pode definir o <strong>Azimute</strong> e a <strong>Altitude</strong> para controlar a localização da fonte de luz.",
	"@@Hillshade_Hillshade-Type_tag6@@": "Multidirecional--Combina luz de várias origens para representar uma visualização melhorada do terreno.",
	"@@Hillshade_Pixel-Size-Factor_tag0@@": "O Fator de Tamanho de Pixéis representa alterações na escala à medida que o visualizador ampliar/reduzir o ecrã do mapa. Controla a taxa à qual o <strong>Fator Z</strong> se altera.",
	"@@Hillshade_Pixel-Size-Factor_tag3@@": "Este parâmetro só é válido quando o tipo de <strong>Escala</strong> for <strong>Ajustado</strong>. O valor padrão é 0.024.",
	"@@Hillshade_Pixel-Size-Power_tag0@@": "A Potência de Tamanho de Pixéis representa alterações na altitude (ou escala) à medida que o visualizador ampliar/reduzir o ecrã do mapa. É o expoente aplicado ao termo do tamanho do píxel na equação que controla a taxa à qual o <strong>Fator Z</strong> se altera para evitar perdas significativas de relevo.",
	"@@Hillshade_Pixel-Size-Power_tag3@@": "Este parâmetro só é válido quando o tipo de <strong>Escala</strong> for <strong>Ajustado</strong>. O valor padrão é 0.664.",
	"@@Hillshade_Raster_tag0@@": "O conjunto de dados de elevação de entrada.",
	"@@Hillshade_Scaling_tag0@@": "O resultado sombreado é ajustado dinamicamente ajustando o fator z utilizando uma das duas opções:",
	"@@Hillshade_Scaling_tag1@@": "Ajustado--Isto aplica-se a um ajuste não linear utilizando os valores prededinidos de <strong>Potência de Tamanho de Píxeis</strong> e <strong>Fator de Tamanho de Píxeis</strong>, que acomodam uma ampla variedade de alterações de altitude (escala) à medida que o visualizador ampliar/reduzir. A definição do parâmetro <strong>Ajustado</strong> é recomendada ao utilizar um conjunto de dados mundial.",
	"@@Hillshade_Scaling_tag8@@": "Nenhum--Não é aplicada nenhuma escala. Isto é ideal para um conjunto de dados raster único que cobre uma área local. Isto não é recomendado para conjuntos de dados mundiais com grandes variações em mapas de escala múltipla ou elevação, uma vez que irá produzir um relevo de terreno com pouca variação em escalas pequenas.",
	"@@Hillshade_Z-Factor_tag0@@": "O fator z é um fator de escala utilizado para converter os valores de elevação, com dois objetivos:",
	"@@Hillshade_Z-Factor_tag1@@": "Converter as unidades de elevação (tais como metros ou pés) nas unidades de coordenadas horizontais do conjunto de dados, que podem estar em pés, metros ou graus.",
	"@@Hillshade_Z-Factor_tag2@@": "Adicionar exagero vertical para criar efeito visual.",
	"@@Int_Cellsize-Type_tag0@@": "Escolha qual o tamanho da célula a utilizar no raster de saída. Se todos os tamanhos da célula de entrada forem os mesmos, todas as opções irão produzir os mesmos resultados.",
	"@@Int_Cellsize-Type_tag1@@": "Primeiro De--Utiliza o primeiro tamanho da célula dos rasters de entrada.",
	"@@Int_Cellsize-Type_tag2@@": "Último De--Utiliza o último tamanho da célula dos rasters de entrada.",
	"@@Int_Cellsize-Type_tag3@@": "Máximo De--Utiliza o maior tamanho da célula de todos os rasters de entrada. Isto é por omissão.",
	"@@Int_Cellsize-Type_tag4@@": "Média De--Utiliza o tamanho da célula médio de todos os rasters de entrada.",
	"@@Int_Cellsize-Type_tag5@@": "Mín. De--Utiliza o menor tamanho da célula de todos os rasters de entrada.",
	"@@Int_Extent-Type_tag0@@": "Escolha qual a extensão que deve ser utilizada no raster de saída:",
	"@@Int_Extent-Type_tag1@@": "Primeiro De--Utiliza a extensão do primeiro raster de entrada para determinar a extensão de processamento.",
	"@@Int_Extent-Type_tag2@@": "Interseção De--Utiliza a extensão dos pixéis sobrepostos para determinar a extensão de processamento. Isto é por omissão.",
	"@@Int_Extent-Type_tag3@@": "Último De--Utiliza a extensão do último raster de entrada para determinar a extensão de processamento.",
	"@@Int_Extent-Type_tag4@@": "União De--Utiliza a extensão de todos os rasters para determinar a extensão de processamento.",
	"@@Int_Raster_tag0@@": "O raster de entrada a converter para número inteiro.",
	"@@Interpolate-Irregular-Data_Cellsize_tag0@@": "O tamanho da célula para o raster de saída será automaticamente detetado; no entanto, pode alterar isto. Embora o tamanho da célula possa ser alterado, a extensão do conjunto de dados raster continuará a ser a mesma.",
	"@@Interpolate-Irregular-Data_Input-Samples_tag0@@": "Os dados dos pontos de entrada.",
	"@@Interpolate-Irregular-Data_Interpolation-Method_tag0@@": "Existem quatro métodos de reamostragem para esta função:",
	"@@Interpolate-Irregular-Data_Interpolation-Method_tag1@@": "<strong>Distância Inversa Ponderada</strong>--Determina os valores das células utilizando uma combinação linearmente ponderada de um conjunto de pontos ou células de amostra. A ponderação é uma função do inverso da distância dos pontos ou células conhecidos.",
	"@@Interpolate-Irregular-Data_Interpolation-Method_tag3@@": "<strong>Simplificação Linear</strong>--Utiliza uma rede irregular triangular a partir dos pontos centrais de cada célula no raster irregular para interpolar uma superfície que é depois convertida num raster regular.",
	"@@Interpolate-Irregular-Data_Interpolation-Method_tag5@@": "<strong>Vizinho Natural</strong>--Encontra o subconjunto de amostras de entrada mais próximo de um ponto de consulta e aplica-lhes ponderações com base em áreas proporcionais para interpolar um valor.",
	"@@Interpolate-Irregular-Data_Interpolation-Method_tag7@@": "<strong>Vizinho mais Próximo</strong>--Calcula o valor do píxel utilizando o píxel mais próximo. Se não existir qualquer píxel de origem, não pode ser criado qualquer píxel novo na saída. Isto é por omissão.",
	"@@Interpolate-Irregular-Data_Search-Radius_tag0@@": "Identifica o número de pixéis a incluir para o método de reamostragem selecionado. O valor predefinido é ${3} pixéis.",
	"@@Interpolate-Irregular-Data_Value-Field_tag0@@": "Se selecionar uma classe de elementos de ponto como a entrada, terá de identificar o campo na tabela de atributos com o valor dos pontos",
	"@@Is-Null_Cellsize-Type_tag0@@": "Escolha qual o tamanho da célula a utilizar no raster de saída. Se todos os tamanhos da célula de entrada forem os mesmos, todas as opções irão produzir os mesmos resultados.",
	"@@Is-Null_Cellsize-Type_tag1@@": "Primeiro De--Utiliza o primeiro tamanho da célula dos rasters de entrada.",
	"@@Is-Null_Cellsize-Type_tag2@@": "Último De--Utiliza o último tamanho da célula dos rasters de entrada.",
	"@@Is-Null_Cellsize-Type_tag3@@": "Máximo De--Utiliza o maior tamanho da célula de todos os rasters de entrada. Isto é por omissão.",
	"@@Is-Null_Cellsize-Type_tag4@@": "Média De--Utiliza o tamanho da célula médio de todos os rasters de entrada.",
	"@@Is-Null_Cellsize-Type_tag5@@": "Mín. De--Utiliza o menor tamanho da célula de todos os rasters de entrada.",
	"@@Is-Null_Extent-Type_tag0@@": "Escolha qual a extensão que deve ser utilizada no raster de saída:",
	"@@Is-Null_Extent-Type_tag1@@": "Primeiro De--Utiliza a extensão do primeiro raster de entrada para determinar a extensão de processamento.",
	"@@Is-Null_Extent-Type_tag2@@": "Interseção De--Utiliza a extensão dos pixéis sobrepostos para determinar a extensão de processamento. Isto é por omissão.",
	"@@Is-Null_Extent-Type_tag3@@": "Último De--Utiliza a extensão do último raster de entrada para determinar a extensão de processamento.",
	"@@Is-Null_Extent-Type_tag4@@": "União De--Utiliza a extensão de todos os rasters para determinar a extensão de processamento.",
	"@@Is-Null_Raster_tag0@@": "O raster de entrada a ser testado para identificar as células que são ${NoData} (nulas).",
	"@@Is-Null_Raster_tag1@@": "A entrada pode ser do tipo número inteiro ou ponto flutuante.",
	"@@Key-Metadata_Band-Names_tag0@@": "Isto é utilizado para substituir os nomes de bandas de um raster. É uma string separada por vírgulas que representa nomes de bandas atualizados.",
	"@@Key-Metadata_Band-Names_tag1@@": "Este parâmetro é opcional.",
	"@@Key-Metadata_Metadata-JSON_tag0@@": "Os metadados-chave a serem injetados no raster a enviar descrito como uma string JSON que representa uma coleção de pares de valores-chave. O seguinte é um exemplo de uma string JSON que pode ser utilizada como entrada para esta função. Todas as entradas para este parâmetro devem seguir o mesmo formato.",
	"@@Key-Metadata_Metadata-JSON_tag1@@": "String JSON que representa os metadados-chave",
	"@@Key-Metadata_Metadata-JSON_tag2@@": "{ \"CloudCover\": 4, \"BandProperties\":[ { \"BandName\": \"Blue\", \"WavelengthMin\": 445, \"WavelengthMax\": 516 }, { \"BandName\": \"Green\", \"WavelengthMin\": 506, \"WavelengthMax\": 595 }, ]}",
	"@@Key-Metadata_Property-Name_tag0@@": "O nome da propriedade-chave do nível do conjunto de dados a substituir.",
	"@@Key-Metadata_Raster_tag0@@": "O conjunto de dados de mosaico ou raster que contém os metadados-chave que gostaria de inserir ou substituir.",
	"@@Key-Metadata_Value_tag0@@": "O valor de substituição da propriedade-chave do nível do conjunto de dados que pretende definir.",
	"@@Least-Cost-Path_Accumulative-Cost-Resistance-Rate_tag0@@": "Este parâmetro simula o aumento do esforço para superar os custos à medida que o custo acumulado aumenta. É utilizado para modelar a fadiga do condutor. O custo acumulado crescente para alcançar uma célula é multiplicado pela taxa de resistência e adicionado ao custo para se mover para a célula seguinte.",
	"@@Least-Cost-Path_Accumulative-Cost-Resistance-Rate_tag1@@": "É uma versão modificada de uma fórmula de taxa de juro composta que é utilizada para calcular o custo aparente de se mover por uma célula. À medida que o valor da taxa de resistência aumenta, aumenta o custo das células que são visitadas mais tarde. Quanto maior for a taxa de resistência, maior será o custo de alcançar a célula seguinte, que é composto por cada movimento subsequente. Uma vez que a taxa de resistência é semelhante a uma taxa composta e geralmente os valores de custo acumulado são muito grandes, são sugeridas pequenas taxas de resistência, como 0,005 ou mesmo mais pequenas, dependendo dos valores de custo acumulado.",
	"@@Least-Cost-Path_Accumulative-Cost-Resistance-Rate_tag2@@": "O valor tem de ser maior que zero. A capacidade predefinida está na extremidade do raster de saída.",
	"@@Least-Cost-Path_Capacity_tag0@@": "Define a capacidade de custo para o condutor para uma origem. Os cálculos de custos continuam para cada origem até que a capacidade especificada seja alcançada.",
	"@@Least-Cost-Path_Capacity_tag1@@": "O valor tem de ser maior que zero. A capacidade predefinida está na extremidade do raster de saída.",
	"@@Least-Cost-Path_Cost-Raster_tag0@@": "Um raster de entrada necessário define o custo ou impedância para que se mova de modo planimétrico através de cada célula. O valor em cada localização da célula representa a distância de custo-por-unidade para movimentação. Cada valor da localização da célula é multiplicado pela resolução de célula e também compensa o movimento diagonal para obter os custos totais de passagem pela célula.",
	"@@Least-Cost-Path_Cost-Raster_tag1@@": "Os valores de <strong>Raster de Custo</strong> podem ser um número inteiro ou ponto flutuante, mas não podem ser negativos ou zero.",
	"@@Least-Cost-Path_Destination-Field_tag0@@": "O campo utilizado para obter valores para os locais de destino.",
	"@@Least-Cost-Path_Destination-Raster_tag0@@": "Um raster de entrada necessário que identifica os pixéis a partir das quais o caminho de menor custo é determinado para a origem de menor custo. Esta entrada consiste em pixéis que têm valores válidos e os restantes pixéis devem ter atribuído ${NoData}. Valores 0 são válidos.",
	"@@Least-Cost-Path_Maximum-Distance_tag0@@": "O limiar que os valores de custo acumulado não podem exceder. Se uma distância de custo acumulado exceder este valor, o valor de saída para a localização da célula será de ${NoData}. A distância máxima define a extensão em que as distâncias de custo acumulado são calculadas. A distância predefinida é até à extensão do raster de saída.",
	"@@Least-Cost-Path_Multiplier-to-Apply-to-Costs_tag0@@": "Este parâmetro permite controlar o modo de viagem ou a magnitude numa origem. Quanto maior for o multiplicador, maior será o custo de se mover através de cada célula.",
	"@@Least-Cost-Path_Multiplier-to-Apply-to-Costs_tag1@@": "Os valores têm de ser maiores que zero. O padrão é 1.",
	"@@Least-Cost-Path_Path-Type_tag0@@": "Uma palavra-chave que define o modo como os valores e zonas nos dados de destino de entrada serão interpretados nos cálculos de caminho de custo:",
	"@@Least-Cost-Path_Path-Type_tag1@@": "<strong>Melhor Único</strong>--Para todos os píxeis nos dados de destino de entrada, o caminho de menor custo deriva do píxel com o mínimo de caminhos de menor custo até às células de origem.",
	"@@Least-Cost-Path_Path-Type_tag3@@": "<strong>Cada Célula</strong>--É determinado um caminho de menor custo para cada píxel com valores válidos nos dados de destino de entrada, e guardado no raster de saída. Cada célula dos dados de destino de entrada é tratada separadamente e é determinado um caminho de menor custo para cada célula.",
	"@@Least-Cost-Path_Path-Type_tag5@@": "<strong>Cada Zona</strong>--É determinado um caminho de menor custo para cada zona nos dados de destino de entrada, e guardado no raster de saída. O caminho de menor custo para cada zona começa no píxel com a menor ponderação de distância de custo na zona.",
	"@@Least-Cost-Path_Source-Raster_tag0@@": "Trata-se de um raster de entrada necessário que identifica as células ou localizações a partir das quais é calculada a menor distância de custo acumulado para cada localização da célula de saída.",
	"@@Least-Cost-Path_Start-Cost_tag0@@": "O custo de arranque a partir do qual se iniciam os cálculos de custos. Este parâmetro permite a especificação do custo fixo associado a uma origem. Em vez de começar com um custo de 0, o algoritmo de custo começa com o valor especificado.",
	"@@Least-Cost-Path_Start-Cost_tag1@@": "O valor deverá ser igual ou maior que zero. O padrão é 0.",
	"@@Least-Cost-Path_Travel-Direction_tag0@@": "Define a direção do condutor ao aplicar a taxa de resistência à origem e o custo de arranque da origem.",
	"@@Least-Cost-Path_Travel-Direction_tag1@@": "<strong>Da Origem</strong>--A taxa de resistência à origem e o custo de arranque da origem serão aplicados a partir da origem de entrada e ao sair das células não de origem. Isto é por omissão.",
	"@@Least-Cost-Path_Travel-Direction_tag3@@": "<strong>Para a Origem</strong>--A taxa de resistência à origem e o custo de arranque da origem serão aplicados a partir de cada célula não de origem e de volta à origem de entrada.",
	"@@Least-Cost-Path_Travel-Direction_tag5@@": "Especifique a palavra-chave <strong>Da Origem</strong> ou <strong>Para a Origem</strong> que será aplicada a todas as origens, ou especifique um campo no <strong>Raster de Origem</strong> que contenha as palavras-chave para identificar a direção de deslocação para cada origem. Esse campo deve conter a string ${FROM_SOURCE} ou ${TO_SOURCE}.",
	"@@Less-Than_Cellsize-Type_tag0@@": "Escolha qual o tamanho da célula a utilizar no raster de saída. Se todos os tamanhos da célula de entrada forem os mesmos, todas as opções irão produzir os mesmos resultados.",
	"@@Less-Than_Cellsize-Type_tag1@@": "Primeiro De--Utiliza o primeiro tamanho da célula dos rasters de entrada.",
	"@@Less-Than_Cellsize-Type_tag2@@": "Último De--Utiliza o último tamanho da célula dos rasters de entrada.",
	"@@Less-Than_Cellsize-Type_tag3@@": "Máximo De--Utiliza o maior tamanho da célula de todos os rasters de entrada. Isto é por omissão.",
	"@@Less-Than_Cellsize-Type_tag4@@": "Média De--Utiliza o tamanho da célula médio de todos os rasters de entrada.",
	"@@Less-Than_Cellsize-Type_tag5@@": "Mín. De--Utiliza o menor tamanho da célula de todos os rasters de entrada.",
	"@@Less-Than_Extent-Type_tag0@@": "Escolha qual a extensão que deve ser utilizada no raster de saída:",
	"@@Less-Than_Extent-Type_tag1@@": "Primeiro De--Utiliza a extensão do primeiro raster de entrada para determinar a extensão de processamento.",
	"@@Less-Than_Extent-Type_tag2@@": "Interseção De--Utiliza a extensão dos pixéis sobrepostos para determinar a extensão de processamento. Isto é por omissão.",
	"@@Less-Than_Extent-Type_tag3@@": "Último De--Utiliza a extensão do último raster de entrada para determinar a extensão de processamento.",
	"@@Less-Than_Extent-Type_tag4@@": "União De--Utiliza a extensão de todos os rasters para determinar a extensão de processamento.",
	"@@Less-Than_Raster_tag0@@": "A entrada a testar para determinar se é menor do que a segunda entrada.",
	"@@Less-Than_Raster_tag1@@": "Pode ser utilizado um valor constante como entrada para este parâmetro, desde que seja especificado um raster para o outro parâmetro.",
	"@@Less-Than_Raster2_tag0@@": "A entrada face à qual a primeira entrada é testada para ser menor do que a mesma.",
	"@@Less-Than_Raster2_tag1@@": "Pode ser utilizado um valor constante como entrada para este parâmetro, desde que seja especificado um raster para o outro parâmetro.",
	"@@Less-Than-Equal_Cellsize-Type_tag0@@": "Escolha qual o tamanho da célula a utilizar no raster de saída. Se todos os tamanhos da célula de entrada forem os mesmos, todas as opções irão produzir os mesmos resultados.",
	"@@Less-Than-Equal_Cellsize-Type_tag1@@": "Primeiro De--Utiliza o primeiro tamanho da célula dos rasters de entrada.",
	"@@Less-Than-Equal_Cellsize-Type_tag2@@": "Último De--Utiliza o último tamanho da célula dos rasters de entrada.",
	"@@Less-Than-Equal_Cellsize-Type_tag3@@": "Máximo De--Utiliza o maior tamanho da célula de todos os rasters de entrada. Isto é por omissão.",
	"@@Less-Than-Equal_Cellsize-Type_tag4@@": "Média De--Utiliza o tamanho da célula médio de todos os rasters de entrada.",
	"@@Less-Than-Equal_Cellsize-Type_tag5@@": "Mín. De--Utiliza o menor tamanho da célula de todos os rasters de entrada.",
	"@@Less-Than-Equal_Extent-Type_tag0@@": "Escolha qual a extensão que deve ser utilizada no raster de saída:",
	"@@Less-Than-Equal_Extent-Type_tag1@@": "Primeiro De--Utiliza a extensão do primeiro raster de entrada para determinar a extensão de processamento.",
	"@@Less-Than-Equal_Extent-Type_tag2@@": "Interseção De--Utiliza a extensão dos pixéis sobrepostos para determinar a extensão de processamento. Isto é por omissão.",
	"@@Less-Than-Equal_Extent-Type_tag3@@": "Último De--Utiliza a extensão do último raster de entrada para determinar a extensão de processamento.",
	"@@Less-Than-Equal_Extent-Type_tag4@@": "União De--Utiliza a extensão de todos os rasters para determinar a extensão de processamento.",
	"@@Less-Than-Equal_Raster_tag0@@": "A entrada a testar para determinar se é menor ou igual à segunda entrada.",
	"@@Less-Than-Equal_Raster_tag1@@": "Pode ser utilizado um valor constante como entrada para este parâmetro, desde que seja especificado um raster para o outro parâmetro.",
	"@@Less-Than-Equal_Raster2_tag0@@": "A entrada face à qual a primeira entrada é testada para ser menor ou igual à mesma.",
	"@@Less-Than-Equal_Raster2_tag1@@": "Pode ser utilizado um valor constante como entrada para este parâmetro, desde que seja especificado um raster para o outro parâmetro.",
	"@@Ln_Cellsize-Type_tag0@@": "Escolha qual o tamanho da célula a utilizar no raster de saída. Se todos os tamanhos da célula de entrada forem os mesmos, todas as opções irão produzir os mesmos resultados.",
	"@@Ln_Cellsize-Type_tag1@@": "Primeiro De--Utiliza o primeiro tamanho da célula dos rasters de entrada.",
	"@@Ln_Cellsize-Type_tag2@@": "Último De--Utiliza o último tamanho da célula dos rasters de entrada.",
	"@@Ln_Cellsize-Type_tag3@@": "Máximo De--Utiliza o maior tamanho da célula de todos os rasters de entrada. Isto é por omissão.",
	"@@Ln_Cellsize-Type_tag4@@": "Média De--Utiliza o tamanho da célula médio de todos os rasters de entrada.",
	"@@Ln_Cellsize-Type_tag5@@": "Mín. De--Utiliza o menor tamanho da célula de todos os rasters de entrada.",
	"@@Ln_Extent-Type_tag0@@": "Escolha qual a extensão que deve ser utilizada no raster de saída:",
	"@@Ln_Extent-Type_tag1@@": "Primeiro De--Utiliza a extensão do primeiro raster de entrada para determinar a extensão de processamento.",
	"@@Ln_Extent-Type_tag2@@": "Interseção De--Utiliza a extensão dos pixéis sobrepostos para determinar a extensão de processamento. Isto é por omissão.",
	"@@Ln_Extent-Type_tag3@@": "Último De--Utiliza a extensão do último raster de entrada para determinar a extensão de processamento.",
	"@@Ln_Extent-Type_tag4@@": "União De--Utiliza a extensão de todos os rasters para determinar a extensão de processamento.",
	"@@Ln_Raster_tag0@@": "Valores de entrada para os quais encontrar o logaritmo natural (Ln).",
	"@@Log10_Cellsize-Type_tag0@@": "Escolha qual o tamanho da célula a utilizar no raster de saída. Se todos os tamanhos da célula de entrada forem os mesmos, todas as opções irão produzir os mesmos resultados.",
	"@@Log10_Cellsize-Type_tag1@@": "Primeiro De--Utiliza o primeiro tamanho da célula dos rasters de entrada.",
	"@@Log10_Cellsize-Type_tag2@@": "Último De--Utiliza o último tamanho da célula dos rasters de entrada.",
	"@@Log10_Cellsize-Type_tag3@@": "Máximo De--Utiliza o maior tamanho da célula de todos os rasters de entrada. Isto é por omissão.",
	"@@Log10_Cellsize-Type_tag4@@": "Média De--Utiliza o tamanho da célula médio de todos os rasters de entrada.",
	"@@Log10_Cellsize-Type_tag5@@": "Mín. De--Utiliza o menor tamanho da célula de todos os rasters de entrada.",
	"@@Log10_Extent-Type_tag0@@": "Escolha qual a extensão que deve ser utilizada no raster de saída:",
	"@@Log10_Extent-Type_tag1@@": "Primeiro De--Utiliza a extensão do primeiro raster de entrada para determinar a extensão de processamento.",
	"@@Log10_Extent-Type_tag2@@": "Interseção De--Utiliza a extensão dos pixéis sobrepostos para determinar a extensão de processamento. Isto é por omissão.",
	"@@Log10_Extent-Type_tag3@@": "Último De--Utiliza a extensão do último raster de entrada para determinar a extensão de processamento.",
	"@@Log10_Extent-Type_tag4@@": "União De--Utiliza a extensão de todos os rasters para determinar a extensão de processamento.",
	"@@Log10_Raster_tag0@@": "Valores de entrada para os quais encontrar o logaritmo de base 10.",
	"@@Log2_Cellsize-Type_tag0@@": "Escolha qual o tamanho da célula a utilizar no raster de saída. Se todos os tamanhos da célula de entrada forem os mesmos, todas as opções irão produzir os mesmos resultados.",
	"@@Log2_Cellsize-Type_tag1@@": "Primeiro De--Utiliza o primeiro tamanho da célula dos rasters de entrada.",
	"@@Log2_Cellsize-Type_tag2@@": "Último De--Utiliza o último tamanho da célula dos rasters de entrada.",
	"@@Log2_Cellsize-Type_tag3@@": "Máximo De--Utiliza o maior tamanho da célula de todos os rasters de entrada. Isto é por omissão.",
	"@@Log2_Cellsize-Type_tag4@@": "Média De--Utiliza o tamanho da célula médio de todos os rasters de entrada.",
	"@@Log2_Cellsize-Type_tag5@@": "Mín. De--Utiliza o menor tamanho da célula de todos os rasters de entrada.",
	"@@Log2_Extent-Type_tag0@@": "Escolha qual a extensão que deve ser utilizada no raster de saída:",
	"@@Log2_Extent-Type_tag1@@": "Primeiro De--Utiliza a extensão do primeiro raster de entrada para determinar a extensão de processamento.",
	"@@Log2_Extent-Type_tag2@@": "Interseção De--Utiliza a extensão dos pixéis sobrepostos para determinar a extensão de processamento. Isto é por omissão.",
	"@@Log2_Extent-Type_tag3@@": "Último De--Utiliza a extensão do último raster de entrada para determinar a extensão de processamento.",
	"@@Log2_Extent-Type_tag4@@": "União De--Utiliza a extensão de todos os rasters para determinar a extensão de processamento.",
	"@@Log2_Raster_tag0@@": "Valores de entrada para os quais encontrar o logaritmo de base 2.",
	"@@Lookup_Field_tag0@@": "Campo que contém os valores pretendidos para o novo raster.",
	"@@Lookup_Field_tag1@@": "Tem de ser um tipo numérico.",
	"@@Lookup_Raster_tag0@@": "O raster de entrada que contém um campo a partir do qual criar um novo raster.",
	"@@Lookup_Raster_tag1@@": "Pode ser de tipo número inteiro ou ponto flutuante.",
	"@@Mask_Included-Ranges_tag0@@": "Os intervalos podem ser especificados para cada banda ao especificar um valor máximo e mínimo; quaisquer valores fora do intervalo serão devolvidos como ${NoData}. É incluído um píxel se o valor do píxel se encontrar dentro de qualquer um dos intervalos especificados. Portanto, se a banda 1 tiver um intervalo de 5-10 e a banda 2 tiver um intervalo de 15-20 e o valor do píxel para a banda 1 for 8, este píxel não será mascarado.",
	"@@Mask_NoData-Interpretation_tag0@@": "Isto refere-se à forma como os <strong>Valores ${NoData}</strong> terão impacto na imagem de saída.",
	"@@Mask_NoData-Interpretation_tag3@@": "Das que se seguem, pode selecionar duas opções:",
	"@@Mask_NoData-Interpretation_tag4@@": "<strong>Corresponder Todos</strong>--Os valores ${NoData} que especificar para cada banda devem ocorrer no mesmo píxel para a imagem de saída a conter o píxel ${NoData}.",
	"@@Mask_NoData-Interpretation_tag6@@": "<strong>Corresponder Qualquer</strong>--Se o valor ${NoData} que especificar ocorrer para um píxel numa banda especificada, esse píxel na imagem de saída será ${NoData}. Isto é por omissão.",
	"@@Mask_NoData-Values_tag0@@": "Os valores NoData podem ser especificados para cada banda. Pode especificar mais do que um valor introduzindo uma lista delimitada pelo espaço.",
	"@@Mask_Raster_tag0@@": "O raster de entrada.",
	"@@Minus_Cellsize-Type_tag0@@": "Escolha qual o tamanho da célula a utilizar no raster de saída. Se todos os tamanhos da célula de entrada forem os mesmos, todas as opções irão produzir os mesmos resultados.",
	"@@Minus_Cellsize-Type_tag1@@": "Primeiro De--Utiliza o primeiro tamanho da célula dos rasters de entrada.",
	"@@Minus_Cellsize-Type_tag2@@": "Último De--Utiliza o último tamanho da célula dos rasters de entrada.",
	"@@Minus_Cellsize-Type_tag3@@": "Máximo De--Utiliza o maior tamanho da célula de todos os rasters de entrada. Isto é por omissão.",
	"@@Minus_Cellsize-Type_tag4@@": "Média De--Utiliza o tamanho da célula médio de todos os rasters de entrada.",
	"@@Minus_Cellsize-Type_tag5@@": "Mín. De--Utiliza o menor tamanho da célula de todos os rasters de entrada.",
	"@@Minus_Extent-Type_tag0@@": "Escolha qual a extensão que deve ser utilizada no raster de saída:",
	"@@Minus_Extent-Type_tag1@@": "Primeiro De--Utiliza a extensão do primeiro raster de entrada para determinar a extensão de processamento.",
	"@@Minus_Extent-Type_tag2@@": "Interseção De--Utiliza a extensão dos pixéis sobrepostos para determinar a extensão de processamento. Isto é por omissão.",
	"@@Minus_Extent-Type_tag3@@": "Último De--Utiliza a extensão do último raster de entrada para determinar a extensão de processamento.",
	"@@Minus_Extent-Type_tag4@@": "União De--Utiliza a extensão de todos os rasters para determinar a extensão de processamento.",
	"@@Minus_Raster_tag0@@": "A entrada a partir da qual subtrair os valores da segunda entrada.",
	"@@Minus_Raster_tag1@@": "Pode ser utilizado um valor constante como entrada para este parâmetro, desde que seja especificado um raster para o outro parâmetro.",
	"@@Minus_Raster2_tag0@@": "Os valores de entrada a subtrair aos valores da primeira entrada.",
	"@@Minus_Raster2_tag1@@": "Pode ser utilizado um valor constante como entrada para este parâmetro, desde que seja especificado um raster para o outro parâmetro.",
	"@@ML-Classify_Raster_tag0@@": "O raster de entrada a classificar utilizando o algoritmo de classificação de máxima verosimilhança.",
	"@@ML-Classify_Signature-File-or-URL_tag0@@": "O ficheiro de assinatura ${.gsg}.",
	"@@Mod_Cellsize-Type_tag0@@": "Escolha qual o tamanho da célula a utilizar no raster de saída. Se todos os tamanhos da célula de entrada forem os mesmos, todas as opções irão produzir os mesmos resultados.",
	"@@Mod_Cellsize-Type_tag1@@": "Primeiro De--Utiliza o primeiro tamanho da célula dos rasters de entrada.",
	"@@Mod_Cellsize-Type_tag2@@": "Último De--Utiliza o último tamanho da célula dos rasters de entrada.",
	"@@Mod_Cellsize-Type_tag3@@": "Máximo De--Utiliza o maior tamanho da célula de todos os rasters de entrada. Isto é por omissão.",
	"@@Mod_Cellsize-Type_tag4@@": "Média De--Utiliza o tamanho da célula médio de todos os rasters de entrada.",
	"@@Mod_Cellsize-Type_tag5@@": "Mín. De--Utiliza o menor tamanho da célula de todos os rasters de entrada.",
	"@@Mod_Extent-Type_tag0@@": "Escolha qual a extensão que deve ser utilizada no raster de saída:",
	"@@Mod_Extent-Type_tag1@@": "Primeiro De--Utiliza a extensão do primeiro raster de entrada para determinar a extensão de processamento.",
	"@@Mod_Extent-Type_tag2@@": "Interseção De--Utiliza a extensão dos pixéis sobrepostos para determinar a extensão de processamento. Isto é por omissão.",
	"@@Mod_Extent-Type_tag3@@": "Último De--Utiliza a extensão do último raster de entrada para determinar a extensão de processamento.",
	"@@Mod_Extent-Type_tag4@@": "União De--Utiliza a extensão de todos os rasters para determinar a extensão de processamento.",
	"@@Mod_Raster_tag0@@": "A entrada do numerador.",
	"@@Mod_Raster_tag1@@": "Pode ser utilizado um valor constante como entrada para este parâmetro, desde que seja especificado um raster para o outro parâmetro.",
	"@@Mod_Raster2_tag0@@": "A entrada do denominador.",
	"@@Mod_Raster2_tag1@@": "Pode ser utilizado um valor constante como entrada para este parâmetro, desde que seja especificado um raster para o outro parâmetro.",
	"@@Mosaic-Rasters_Operation_tag0@@": "Resolva qualquer conflito quando tiver partes de duas ou mais imagens que se sobrepõem. As opções incluem as seguintes:",
	"@@Mosaic-Rasters_Operation_tag1@@": "<strong>Blend</strong>--Calcular e exibir uma média dos píxeis sobrepostos, dando mais ponderação a píxeis que se encontram mais próximos de imagens vizinhas, para que a saída seja uma imagem mais suave. Isto é por omissão.",
	"@@Mosaic-Rasters_Operation_tag3@@": "<strong>Primeiro</strong>--Exibir os píxeis da primeira imagem na lista de imagens em sobreposição numa determinada área.",
	"@@Mosaic-Rasters_Operation_tag5@@": "<strong>Último</strong>--Exibir os píxeis da última imagem na lista de imagens em sobreposição numa determinada área.",
	"@@Mosaic-Rasters_Operation_tag7@@": "<strong>Máx.</strong>--Exibir o píxel mais valorizado de todas as camadas de sobreposição. Com esta opção, não tem qualquer garantia de exibição dos pixéis de uma única imagem na área de sobreposição, mas sim uma combinação de todas as camadas potenciais.",
	"@@Mosaic-Rasters_Operation_tag9@@": "<strong>Média</strong>--Calcular e exibir uma média dos píxeis sobrepostos.",
	"@@Mosaic-Rasters_Operation_tag11@@": "<strong>Mín.</strong>--Exibir o píxel menos valorizado de todas as camadas de sobreposição. Com esta opção, não tem qualquer garantia de exibição dos pixéis de uma única imagem na área de sobreposição, mas sim uma combinação de todas as camadas potenciais.",
	"@@Mosaic-Rasters_Rasters_tag0@@": "Selecione os rasters que pretende unir em mosaico para formar uma imagem.",
	"@@NDVI_Infrared-Band-ID_tag0@@": "Especifica a ID da banda que representa a parte próxima ao infravermelho do espectro eletromagnético.",
	"@@NDVI_Raster_tag0@@": "O raster multiespectral de entrada.",
	"@@NDVI_Scientific-Output_tag0@@": "O intervalo dos valores de saída será entre -1,0 e 1,0, o que é utilizado em muitas aplicações científicas.",
	"@@NDVI_Visible-Band-ID_tag0@@": "Especifica a ID da banda que representa a parte vermelha do espectro eletromagnético.",
	"@@NDVI-Colorized_Color-Ramp_tag0@@": "Escolha um esquema de cores predefinido a partir da lista pendente.",
	"@@NDVI-Colorized_Color-Scheme-Type_tag0@@": "Escolha qual o tipo de esquema de cores para colorir a saída NDVI:",
	"@@NDVI-Colorized_Color-Scheme-Type_tag1@@": "Mapa de Cores--Escolha um mapa de cores predefinido a partir da lista pendente. Em alternativa, pode procurar num ficheiro de mapa de cores persistente que exista.",
	"@@NDVI-Colorized_Color-Scheme-Type_tag2@@": "Rampa de Cores--Escolha um esquema de cores predefinido a partir da lista pendente.",
	"@@NDVI-Colorized_Colormap_tag0@@": "Escolha um mapa de cores predefinido a partir da lista pendente. Em alternativa, pode procurar num ficheiro de mapa de cores existente.",
	"@@NDVI-Colorized_Infrared-Band-ID_tag0@@": "Especifica a ID da banda que representa a parte próxima ao infravermelho do espectro eletromagnético.",
	"@@NDVI-Colorized_Raster_tag0@@": "O raster multiespectral de entrada.",
	"@@NDVI-Colorized_Scientific-Output_tag0@@": "O intervalo dos valores de saída será entre -1,0 e 1,0, o que é utilizado em muitas aplicações científicas.",
	"@@NDVI-Colorized_Visible-Band-ID_tag0@@": "Especifica a ID da banda que representa a parte vermelha do espectro eletromagnético.",
	"@@Negate_Cellsize-Type_tag0@@": "Escolha qual o tamanho da célula a utilizar no raster de saída. Se todos os tamanhos da célula de entrada forem os mesmos, todas as opções irão produzir os mesmos resultados.",
	"@@Negate_Cellsize-Type_tag1@@": "Primeiro De--Utiliza o primeiro tamanho da célula dos rasters de entrada.",
	"@@Negate_Cellsize-Type_tag2@@": "Último De--Utiliza o último tamanho da célula dos rasters de entrada.",
	"@@Negate_Cellsize-Type_tag3@@": "Máximo De--Utiliza o maior tamanho da célula de todos os rasters de entrada. Isto é por omissão.",
	"@@Negate_Cellsize-Type_tag4@@": "Média De--Utiliza o tamanho da célula médio de todos os rasters de entrada.",
	"@@Negate_Cellsize-Type_tag5@@": "Mín. De--Utiliza o menor tamanho da célula de todos os rasters de entrada.",
	"@@Negate_Extent-Type_tag0@@": "Escolha qual a extensão que deve ser utilizada no raster de saída:",
	"@@Negate_Extent-Type_tag1@@": "Primeiro De--Utiliza a extensão do primeiro raster de entrada para determinar a extensão de processamento.",
	"@@Negate_Extent-Type_tag2@@": "Interseção De--Utiliza a extensão dos pixéis sobrepostos para determinar a extensão de processamento. Isto é por omissão.",
	"@@Negate_Extent-Type_tag3@@": "Último De--Utiliza a extensão do último raster de entrada para determinar a extensão de processamento.",
	"@@Negate_Extent-Type_tag4@@": "União De--Utiliza a extensão de todos os rasters para determinar a extensão de processamento.",
	"@@Negate_Raster_tag0@@": "O raster de entrada a ser negado (multiplicado por -1).",
	"@@Nibble_Mask-Raster_tag0@@": "O raster de entrada necessário utilizado como máscara.",
	"@@Nibble_Mask-Raster_tag1@@": "Células com NoData, uma vez que o seu valor será recortado no <strong>Raster</strong> de entrada.",
	"@@Nibble_Mask-Raster_tag4@@": "O raster de máscara pode ser do tipo número inteiro ou ponto flutuante.",
	"@@Nibble_Nibble-NoData-cells_tag0@@": "Define se as células NoData no raster de entrada irão permanecer NoData no raster de saída.",
	"@@Nibble_Nibble-NoData-cells_tag1@@": "<strong>Não</strong>--Especifica que as células NoData no raster de entrada irão permanecer NoData na saída. Isto é por omissão.",
	"@@Nibble_Nibble-NoData-cells_tag3@@": "<strong>Sim</strong>--Especifica que as células NoData no raster de entrada e dentro da máscara podem ser recortadas em valores válidos de célula de saída.",
	"@@Nibble_Raster_tag0@@": "O raster de entrada necessário que será recortado.",
	"@@Nibble_Raster_tag1@@": "O raster de entrada pode ser do tipo número inteiro ou ponto flutuante.",
	"@@Nibble_Use-NoData-values-if-they-are-the-nearest-neighbor_tag0@@": "Define se os valores ${NoData} no raster de entrada podem ser recortados para a área definida pelo raster de máscara.",
	"@@Nibble_Use-NoData-values-if-they-are-the-nearest-neighbor_tag1@@": "<strong>Sim</strong>--Especifica que o valor do vizinho mais próximo será utilizado, quer seja ${NoData} ou outro valor de dados no raster de entrada. Os valores ${NoData} no raster de entrada são livremente recortados em áreas definidas na máscara se forem o vizinho mais próximo. Isto é por omissão.",
	"@@Nibble_Use-NoData-values-if-they-are-the-nearest-neighbor_tag3@@": "<strong>Não</strong>--Especifica que apenas os valores de dados são livremente recortados em áreas definidas no raster de máscara. Os valores ${NoData} no raster de entrada não podem ser recortados em áreas definidas no raster de máscara, mesmo que sejam o vizinho mais próximo.",
	"@@Nibble_Zone-Raster_tag0@@": "O raster de zona de entrada.",
	"@@Nibble_Zone-Raster_tag1@@": "Uma zona é todas as células num raster que têm o mesmo valor, quer sejam ou não contíguas. A camada de zona de entrada define a forma, os valores e as localizações das zonas. O raster de zona pode ser do tipo número inteiro ou ponto flutuante.",
	"@@Not-Equal_Cellsize-Type_tag0@@": "Escolha qual o tamanho da célula a utilizar no raster de saída. Se todos os tamanhos da célula de entrada forem os mesmos, todas as opções irão produzir os mesmos resultados.",
	"@@Not-Equal_Cellsize-Type_tag1@@": "Primeiro De--Utiliza o primeiro tamanho da célula dos rasters de entrada.",
	"@@Not-Equal_Cellsize-Type_tag2@@": "Último De--Utiliza o último tamanho da célula dos rasters de entrada.",
	"@@Not-Equal_Cellsize-Type_tag3@@": "Máximo De--Utiliza o maior tamanho da célula de todos os rasters de entrada. Isto é por omissão.",
	"@@Not-Equal_Cellsize-Type_tag4@@": "Média De--Utiliza o tamanho da célula médio de todos os rasters de entrada.",
	"@@Not-Equal_Cellsize-Type_tag5@@": "Mín. De--Utiliza o menor tamanho da célula de todos os rasters de entrada.",
	"@@Not-Equal_Extent-Type_tag0@@": "Escolha qual a extensão que deve ser utilizada no raster de saída:",
	"@@Not-Equal_Extent-Type_tag1@@": "Primeiro De--Utiliza a extensão do primeiro raster de entrada para determinar a extensão de processamento.",
	"@@Not-Equal_Extent-Type_tag2@@": "Interseção De--Utiliza a extensão dos pixéis sobrepostos para determinar a extensão de processamento. Isto é por omissão.",
	"@@Not-Equal_Extent-Type_tag3@@": "Último De--Utiliza a extensão do último raster de entrada para determinar a extensão de processamento.",
	"@@Not-Equal_Extent-Type_tag4@@": "União De--Utiliza a extensão de todos os rasters para determinar a extensão de processamento.",
	"@@Not-Equal_Raster_tag0@@": "A entrada que será comparada quanto à desigualdade pela segunda entrada.",
	"@@Not-Equal_Raster_tag1@@": "Pode ser utilizado um valor constante como entrada para este parâmetro, desde que seja especificado um raster para o outro parâmetro.",
	"@@Not-Equal_Raster2_tag0@@": "A entrada que será comparada com a primeira entrada quanto à desigualdade.",
	"@@Not-Equal_Raster2_tag1@@": "Pode ser utilizado um valor constante como entrada para este parâmetro, desde que seja especificado um raster para o outro parâmetro.",
	"@@Pansharpening_Multispectral_tag0@@": "O raster multiespectral que pretende tornar mais nítido utilizando a banda pancromática.",
	"@@Pansharpening_Panchromatic_tag0@@": "O raster de banda única e de alta resolução que será utilizado para ajustar a nitidez do raster multiespectral de baixa resolução.",
	"@@Pansharpening_Pansharpening-Type_tag0@@": "Escolha o algoritmo para ajustar a nitidez que pretende utilizar.",
	"@@Pansharpening_Pansharpening-Type_tag1@@": "Brovey--Utiliza o algoritmo de Brovey com base na modelação espectral para fusão de dados.",
	"@@Pansharpening_Pansharpening-Type_tag2@@": "Esri--Utiliza o algoritmo Esri com base na modelação espectral para fusão de dados.",
	"@@Pansharpening_Pansharpening-Type_tag3@@": "Gram-Schmidt--Utiliza o algoritmo de nitidez espectral Gram-Schmidt para tornar os dados multiespectrais mais nítidos.",
	"@@Pansharpening_Pansharpening-Type_tag4@@": "IHS--Utiliza a colorimetria Intensidade, Tonalidade e Saturação para fusão de dados.",
	"@@Pansharpening_Pansharpening-Type_tag5@@": "Média--Utiliza o valor médio entre os valores vermelho, verde e azul e o valor de píxel pancromático.",
	"@@Pansharpening_Weights_tag0@@": "Especifique as ponderações das bandas vermelhas, verdes, azuis e infravermelhas. Todos os valores devem estar incluídos no intervalo de 0 a 1.",
	"@@Path-Distance_Accumulative-Cost-Resistance-Rate_tag0@@": "Este parâmetro simula o aumento do esforço para superar os custos à medida que o custo acumulado aumenta. É utilizado para modelar a fadiga do condutor. O custo acumulado crescente para alcançar uma célula é multiplicado pela taxa de resistência e adicionado ao custo para se mover para a célula seguinte.",
	"@@Path-Distance_Accumulative-Cost-Resistance-Rate_tag1@@": "É uma versão modificada de uma fórmula de taxa de juro composta que é utilizada para calcular o custo aparente de se mover por uma célula. À medida que o valor da taxa de resistência aumenta, aumenta o custo das células que são visitadas mais tarde. Quanto maior for a taxa de resistência, maior será o custo de alcançar a célula seguinte, que é composto por cada movimento subsequente. Uma vez que a taxa de resistência é semelhante a uma taxa composta e geralmente os valores de custo acumulado são muito grandes, são sugeridas pequenas taxas de resistência, como 0,005 ou mesmo mais pequenas, dependendo dos valores de custo acumulado.",
	"@@Path-Distance_Accumulative-Cost-Resistance-Rate_tag2@@": "O valor tem de ser maior que zero. A capacidade predefinida está na extremidade do raster de saída.",
	"@@Path-Distance_Capacity_tag0@@": "Define a capacidade de custo para o condutor para uma origem. Os cálculos de custos continuam para cada origem até que a capacidade especificada seja alcançada.",
	"@@Path-Distance_Capacity_tag1@@": "O valor tem de ser maior que zero. A capacidade predefinida está na extremidade do raster de saída.",
	"@@Path-Distance_Cost-Raster_tag0@@": "Um raster de entrada necessário define o custo ou impedância para que se mova de modo planimétrico através de cada célula. O valor em cada localização da célula representa a distância de custo-por-unidade para movimentação. Cada valor da localização da célula é multiplicado pela resolução de célula e também compensa o movimento diagonal para obter os custos totais de passagem pela célula.",
	"@@Path-Distance_Cost-Raster_tag1@@": "Os valores de <strong>Raster de Custo</strong> podem ser um número inteiro ou ponto flutuante, mas não podem ser negativos ou zero.",
	"@@Path-Distance_horizontalfactor_tag0@@": "<p>Define a relação entre o fator de custo horizontal e o ângulo de movimento relativo horizontal (HRMA).</p><p>Existem vários fatores com modificadores que identificam um gráfico de fator vertical definido. Adicionalmente, pode ser utilizada uma tabela para criar um gráfico personalizado. Os gráficos são utilizados para identificar o fator vertical utilizado no cálculo do custo total de mover para uma célula vizinha.</p><p>Nas explicações abaixo, são utilizados dois acrónimos: HF e HRMA. HF significa fator horizontal, que define a dificuldade horizontal detetada ao passar de uma célula para a seguinte. HRMA significa um ângulo de movimento relativo horizontal, que identifica o ângulo entre a direção horizontal de uma célula e a direção de movimento.</p><p> Os tipos de <strong>Fator horizontal</strong> incluem:</p><ul><li><strong>Binário</strong> – indica que se o HRMA for inferior ao ângulo de corte, o HF é definido para o valor associado ao fator zero; caso contrário, é infinito.</li><li><strong>Posterior </strong> – estabelece que apenas é permitido movimento de avanço. O HRMA tem de ser superior ou igual a 0 e inferior a 90 graus (0 &lt;= HRMA &lt; 90). Se o HRMA for superior a 0 e inferior a 45 graus, o HF da célula é definido para o valor associado ao fator zero. Se o HRMA for superior ou igual a 45 graus é utilizado o valor de modificador do valor lateral. O HF para qualquer valor HRMA igual ou superior a 90 graus está definido para infinito.</li><li><strong>Linear</strong> – especifica que o HF é uma função linear do HRMA.</li><li><strong>Linear Inverso</strong> – especifica que o HF é uma função linear inversa do HRMA.</li><li><strong>Tabela</strong> – identifica que será utilizado um ficheiro de tabela para definir o gráfico de fator horizontal utilizado para determinar os HF.</li></ul><p>Os modificadores para os fatores horizontais incluem:</p><ul><li><strong>Fator Zero</strong> – O fator horizontal a ser utilizado quando o HRMA é zero. Este fator posiciona a interceção Y para qualquer uma das funções do fator horizontal..</li><li><strong>Ângulo de corte</strong> – define o ângulo HRMA além do qual o HF será definido para o infinito.</li><li><strong>Inclinação</strong> – estabelece a inclinação da linha reta utilizada com as palavras-chave do fator horizontal <strong>Linear</strong> e <strong>Linear Inverso</strong>. A inclinação é especificada como uma fração de subida em excesso (por exemplo, 45 por cento da inclinação é de 1/45, que é inserido como 0,02222).</li><li><strong>Valor lateral</strong> – estabelece o HF quando o HRMA é superior ou igual a 45 graus e inferior a 90 graus quando é especificada a palavra-chave do fator horizontal <strong>Posterior</strong>.</li><li><strong>Nome da tabela</strong> – identifica o nome da tabela que define o HF.</li></ul>",
	"@@Path-Distance_Horizontal-Raster_tag0@@": "Um raster que define a direção horizontal em cada célula.",
	"@@Path-Distance_Horizontal-Raster_tag1@@": "Os valores no raster têm de ser números inteiros de 0 a 360, sendo 0 graus a norte, ou na direção da parte superior do ecrã, e aumentando no sentido dos ponteiros do relógio. As áreas planas devem ter um valor de -1. Os valores em cada localização serão utilizados em conjunto com <strong>Fator horizontal</strong> para determinar o custo horizontal incorrido ao deslocar-se de uma célula para os seus vizinhos.",
	"@@Path-Distance_Maximum-Distance_tag0@@": "O limiar que os valores de custo acumulado não podem exceder. Se uma distância de custo acumulado exceder este valor, o valor de saída para a localização da célula será NoData. A distância máxima define a extensão em que as distâncias de custo acumulado são calculadas. A distância predefinida é até à extensão do raster de saída.",
	"@@Path-Distance_Multiplier-to-Apply-to-Costs_tag0@@": "Um multiplicador para aplicar os valores de custo.",
	"@@Path-Distance_Multiplier-to-Apply-to-Costs_tag1@@": "Este parâmetro permite controlar o modo de viagem ou a magnitude numa origem. Quanto maior for o multiplicador, maior será o custo de se mover através de cada célula.",
	"@@Path-Distance_Multiplier-to-Apply-to-Costs_tag2@@": "Os valores têm de ser maiores que zero. O padrão é 1.",
	"@@Path-Distance_Multiplier-to-Apply-to-Costs_tag3@@": "Pode ser utilizado para um valor numérico (duplo) ou um campo de <strong>Raster de Origem</strong> para este parâmetro.",
	"@@Path-Distance_Source-Raster_tag0@@": "O raster de entrada necessário das localizações de origem.",
	"@@Path-Distance_Source-Raster_tag1@@": "Trata-se de um raster que identifica as células ou localizações a partir das quais é calculada a menor distância de custo acumulado para cada localização da célula de saída.",
	"@@Path-Distance_Source-Raster_tag2@@": "Pode ser do tipo número inteiro ou ponto flutuante.",
	"@@Path-Distance_Start-Cost_tag0@@": "O custo de arranque a partir do qual se iniciam os cálculos de custos. Este parâmetro permite a especificação do custo fixo associado a uma origem. Em vez de começar com um custo de 0, o algoritmo de custo começa com o valor especificado.",
	"@@Path-Distance_Start-Cost_tag1@@": "O valor deverá ser igual ou maior que zero. O padrão é 0.",
	"@@Path-Distance_Surface-Raster_tag0@@": "Um raster define os valores de elevação em cada localização da célula.",
	"@@Path-Distance_Surface-Raster_tag1@@": "Os valores são utilizados para calcular a distância real da superfície coberta ao passar entre células.",
	"@@Path-Distance_Travel-Direction_tag0@@": "Define a direção do condutor ao aplicar a taxa de resistência à origem e o custo de arranque da origem.",
	"@@Path-Distance_Travel-Direction_tag1@@": "<strong>Da Origem</strong>--A taxa de resistência à origem e o custo de arranque da origem serão aplicados a partir da origem de entrada e ao sair das células não de origem. Isto é por omissão.",
	"@@Path-Distance_Travel-Direction_tag3@@": "<strong>Para a Origem</strong>--A taxa de resistência à origem e o custo de arranque da origem serão aplicados a partir de cada célula não de origem e de volta à origem de entrada.",
	"@@Path-Distance_Travel-Direction_tag5@@": "Especifique a palavra-chave <strong>Da Origem</strong> ou <strong>Para a Origem</strong> que será aplicada a todas as origens, ou especifique um campo no <strong>Raster de Origem</strong> que contenha as palavras-chave para identificar a direção de deslocação para cada origem. Esse campo deve conter a string ${FROM_SOURCE} ou ${TO_SOURCE}.",
	"@@Path-Distance_verticalfactor_tag0@@": "<p>Define a relação entre o fator de custo vertical e o ângulo de movimento relativo vertical (VRMA).</p><p>Existem vários fatores com modificadores que identificam um gráfico de fator vertical definido. Adicionalmente, pode ser utilizada uma tabela para criar um gráfico personalizado. Os gráficos são utilizados para identificar o fator vertical utilizado no cálculo do custo total de mover para uma célula vizinha.</p><p>Nas explicações abaixo, são utilizados dois acrónimos: VF e VRMA. VF significa fator vertical, que define a dificuldade vertical encontrada na mudança de uma célula para a seguinte. VRMA significa um ângulo de movimento relativo vertical, que identifica o ângulo de inclinação entre FROM (DE) ou o processamento, a célula e a célula TO (PARA).</p><p>Os tipo de <strong>Fator vertical</strong> incluem:</p><ul><li><strong>Binário</strong> – especifica que se o VRMA for superior ao ângulo de corte baixo e inferior ao ângulo de corte elevado, o VF está definido para o valor associado ao fator zero, caso contrário, é infinito.</li><li><strong>Linear</strong> – indica que o VF é uma função linear do VRMA.</li><li><strong>Linear simétrico</strong> – especifica que o VF é uma função linear do VRMA no lado negativo ou positivo do VRMA, respetivamente, e as duas funções lineares são simétricas no que respeita ao eixo VF (y).</li><li><strong>Linear inverso</strong> – indica que o VF é uma função linear inversa do VRMA.</li><li><strong>Linear inverso simétrico</strong> – Especifica que o VF é uma função linear inversa do VRMA no lado negativo ou positivo do VRMA, respetivamente, e que as duas funções lineares são simétricas em relação ao eixo VF (y).</li><li><strong>Cos</strong> – identifica o VF como a função baseada no cosseno do VRMA.</li><li><strong>Sec</strong> – identifica o VF como a função baseada no secante do VRMA.</li><li><strong>Cos-Sec</strong> – especifica que o VF é a função baseada no secante do VRMA quando o VRMA é negativo e a função baseada no cosseno do VRMA quando o VRMA não é negativo.</li><li><strong>Sec-Cos</strong> – especifica que o VF é a função baseada no secante do VRMA quando o VRMA é negativo e a função baseada no cosseno do VRMA quando o VRMA não é negativo.</li><li><strong>Tabela</strong> – identifica que será utilizado um ficheiro de tabela para definir o gráfico de fator vertical utilizado para determinar VF.</li></ul><p>Os modificadores das palavras-chave verticais incluem:</p><ul><li><strong>Fator zero</strong> – estabelece o fator vertical utilizado quando o VRMA é zero. Este fator posiciona a interceção Y da função especificada. Por definição, o fator zero não é aplicável a qualquer uma das funções verticais trignométricas (COS, SEC, COS-SEC ou SEC-COS). A interceção Y é definida por estas funções.</li><li><strong>Ângulo de corte baixo</strong> – define o ângulo do VRMA abaixo do qual o VF será definido para infinito.</li><li><strong>Ângulo de corte elevado</strong> – define o ângulo do VRMA acima do qual o VF será definido para infinito.</li><li><strong>Inclinação</strong> – estabelece a inclinação da linha reta utilizada com as palavras-chave do fator vertical <strong>Linear</strong> e <strong>Linear inverso</strong>. A inclinação é especificada como uma fração de subida em excesso (por exemplo, 45 por cento da inclinação é de 1/45, que é inserido como 0,02222).</li><li><strong>Nome da tabela</strong> – identifica o nome da tabela que define o VF.</li></ul>",
	"@@Path-Distance_Vertical-Raster_tag0@@": "Define a relação entre o fator de custo vertical e o ângulo de movimento relativo vertical (VRMA).",
	"@@Path-Distance_Vertical-Raster_tag1@@": "Os valores são utilizados para calcular a inclinação utilizada para identificar o fator vertical incorrido durante o movimento de uma célula para outra.",
	"@@Path-Distance-Allocation_Accumulative-Cost-Resistance-Rate_tag0@@": "Este parâmetro simula o aumento do esforço para superar os custos à medida que o custo acumulado aumenta. É utilizado para modelar a fadiga do condutor. O custo acumulado crescente para alcançar uma célula é multiplicado pela taxa de resistência e adicionado ao custo para se mover para a célula seguinte.",
	"@@Path-Distance-Allocation_Accumulative-Cost-Resistance-Rate_tag1@@": "É uma versão modificada de uma fórmula de taxa de juro composta que é utilizada para calcular o custo aparente de se mover por uma célula. À medida que o valor da taxa de resistência aumenta, aumenta o custo das células que são visitadas mais tarde. Quanto maior for a taxa de resistência, maior será o custo de alcançar a célula seguinte, que é composto por cada movimento subsequente. Uma vez que a taxa de resistência é semelhante a uma taxa composta e geralmente os valores de custo acumulado são muito grandes, são sugeridas pequenas taxas de resistência, como 0,005 ou mesmo mais pequenas, dependendo dos valores de custo acumulado.",
	"@@Path-Distance-Allocation_Accumulative-Cost-Resistance-Rate_tag2@@": "O valor tem de ser maior que zero. A capacidade predefinida está na extremidade do raster de saída.",
	"@@Path-Distance-Allocation_Capacity_tag0@@": "Define a capacidade de custo para o condutor para uma origem. Os cálculos de custos continuam para cada origem até que a capacidade especificada seja alcançada.",
	"@@Path-Distance-Allocation_Capacity_tag1@@": "O valor tem de ser maior que zero. A capacidade predefinida está na extremidade do raster de saída.",
	"@@Path-Distance-Allocation_Cost-Raster_tag0@@": "Um raster de entrada necessário define o custo ou impedância para que se mova de modo planimétrico através de cada célula. O valor em cada localização da célula representa a distância de custo-por-unidade para movimentação. Cada valor da localização da célula é multiplicado pela resolução de célula e também compensa o movimento diagonal para obter os custos totais de passagem pela célula.",
	"@@Path-Distance-Allocation_Cost-Raster_tag1@@": "Os valores de <strong>Raster de Custo</strong> podem ser um número inteiro ou ponto flutuante, mas não podem ser negativos ou zero.",
	"@@Path-Distance-Allocation_horizontalfactor_tag0@@": "<p>Define a relação entre o fator de custo horizontal e o ângulo de movimento relativo horizontal (HRMA).</p><p>Existem vários fatores com modificadores que identificam um gráfico de fator vertical definido. Adicionalmente, pode ser utilizada uma tabela para criar um gráfico personalizado. Os gráficos são utilizados para identificar o fator vertical utilizado no cálculo do custo total de mover para uma célula vizinha.</p><p>Nas explicações abaixo, são utilizados dois acrónimos: HF e HRMA. HF significa fator horizontal, que define a dificuldade horizontal detetada ao passar de uma célula para a seguinte. HRMA significa um ângulo de movimento relativo horizontal, que identifica o ângulo entre a direção horizontal de uma célula e a direção de movimento.</p><p> Os tipos de <strong>Fator horizontal</strong> incluem:</p><ul><li><strong>Binário</strong> – indica que se o HRMA for inferior ao ângulo de corte, o HF é definido para o valor associado ao fator zero; caso contrário, é infinito.</li><li><strong>Posterior </strong> – estabelece que apenas é permitido movimento de avanço. O HRMA tem de ser superior ou igual a 0 e inferior a 90 graus (0 &lt;= HRMA &lt; 90). Se o HRMA for superior a 0 e inferior a 45 graus, o HF da célula é definido para o valor associado ao fator zero. Se o HRMA for superior ou igual a 45 graus é utilizado o valor de modificador do valor lateral. O HF para qualquer valor HRMA igual ou superior a 90 graus está definido para infinito.</li><li><strong>Linear</strong> – especifica que o HF é uma função linear do HRMA.</li><li><strong>Linear Inverso</strong> – especifica que o HF é uma função linear inversa do HRMA.</li><li><strong>Tabela</strong> – identifica que será utilizado um ficheiro de tabela para definir o gráfico de fator horizontal utilizado para determinar os HF.</li></ul><p>Os modificadores para os fatores horizontais incluem:</p><ul><li><strong>Fator Zero</strong> – O fator horizontal a ser utilizado quando o HRMA é zero. Este fator posiciona a interceção Y para qualquer uma das funções do fator horizontal..</li><li><strong>Ângulo de corte</strong> – define o ângulo HRMA além do qual o HF será definido para o infinito.</li><li><strong>Inclinação</strong> – estabelece a inclinação da linha reta utilizada com as palavras-chave do fator horizontal <strong>Linear</strong> e <strong>Linear Inverso</strong>. A inclinação é especificada como uma fração de subida em excesso (por exemplo, 45 por cento da inclinação é de 1/45, que é inserido como 0,02222).</li><li><strong>Valor lateral</strong> – estabelece o HF quando o HRMA é superior ou igual a 45 graus e inferior a 90 graus quando é especificada a palavra-chave do fator horizontal <strong>Posterior</strong>.</li><li><strong>Nome da tabela</strong> – identifica o nome da tabela que define o HF.</li></ul>",
	"@@Path-Distance-Allocation_Horizontal-Raster_tag0@@": "Um raster que define a direção horizontal em cada célula.",
	"@@Path-Distance-Allocation_Horizontal-Raster_tag1@@": "Os valores no raster têm de ser números inteiros de 0 a 360, sendo 0 graus a norte, ou na direção da parte superior do ecrã, e aumentando no sentido dos ponteiros do relógio. As áreas planas devem ter um valor de -1. Os valores em cada localização serão utilizados em conjunto com <strong>Fator horizontal</strong> para determinar o custo horizontal incorrido ao deslocar-se de uma célula para os seus vizinhos.",
	"@@Path-Distance-Allocation_Maximum-Distance_tag0@@": "O limiar que os valores de custo acumulado não podem exceder. Se uma distância de custo acumulado exceder este valor, o valor de saída para a localização da célula será NoData. A distância máxima define a extensão em que as distâncias de custo acumulado são calculadas. A distância predefinida é até à extensão do raster de saída.",
	"@@Path-Distance-Allocation_Multiplier-to-Apply-to-Costs_tag0@@": "Um multiplicador para aplicar os valores de custo.",
	"@@Path-Distance-Allocation_Multiplier-to-Apply-to-Costs_tag1@@": "Este parâmetro permite controlar o modo de viagem ou a magnitude numa origem. Quanto maior for o multiplicador, maior será o custo de se mover através de cada célula.",
	"@@Path-Distance-Allocation_Multiplier-to-Apply-to-Costs_tag2@@": "Os valores têm de ser maiores que zero. O padrão é 1.",
	"@@Path-Distance-Allocation_Multiplier-to-Apply-to-Costs_tag3@@": "Pode ser utilizado para um valor numérico (duplo) ou um campo de <strong>Raster de Origem</strong> para este parâmetro.",
	"@@Path-Distance-Allocation_Source-Field_tag0@@": "O campo utilizado para atribuir valores às localizações de origem. Deve ser do tipo número inteiro. Se <strong>Raster de Valor</strong> tiver sido definido, os valores nessa entrada têm precedência sobre qualquer definição para o <strong>Campo de Origem</strong>.",
	"@@Path-Distance-Allocation_Source-Raster_tag0@@": "O raster de entrada necessário das localizações de origem.",
	"@@Path-Distance-Allocation_Source-Raster_tag1@@": "Trata-se de um raster que identifica as células ou localizações a partir das quais é calculada a menor distância de custo acumulado para cada localização da célula de saída.",
	"@@Path-Distance-Allocation_Source-Raster_tag2@@": "Pode ser do tipo número inteiro ou ponto flutuante.",
	"@@Path-Distance-Allocation_Start-Cost_tag0@@": "O custo de arranque a partir do qual se iniciam os cálculos de custos. Este parâmetro permite a especificação do custo fixo associado a uma origem. Em vez de começar com um custo de 0, o algoritmo de custo começa com o valor especificado.",
	"@@Path-Distance-Allocation_Start-Cost_tag1@@": "O valor deverá ser igual ou maior que zero. O padrão é 0.",
	"@@Path-Distance-Allocation_Surface-Raster_tag0@@": "Um raster define os valores de elevação em cada localização da célula.",
	"@@Path-Distance-Allocation_Surface-Raster_tag1@@": "Os valores são utilizados para calcular a distância real da superfície coberta ao passar entre células.",
	"@@Path-Distance-Allocation_Travel-Direction_tag0@@": "Define a direção do condutor ao aplicar a taxa de resistência à origem e o custo de arranque da origem.",
	"@@Path-Distance-Allocation_Travel-Direction_tag1@@": "<strong>Da Origem</strong>--A taxa de resistência à origem e o custo de arranque da origem serão aplicados a partir da origem de entrada e ao sair das células não de origem. Isto é por omissão.",
	"@@Path-Distance-Allocation_Travel-Direction_tag3@@": "<strong>Para a Origem</strong>--A taxa de resistência à origem e o custo de arranque da origem serão aplicados a partir de cada célula não de origem e de volta à origem de entrada.",
	"@@Path-Distance-Allocation_Travel-Direction_tag5@@": "Especifique a palavra-chave <strong>Da Origem</strong> ou <strong>Para a Origem</strong> que será aplicada a todas as origens, ou especifique um campo no <strong>Raster de Origem</strong> que contenha as palavras-chave para identificar a direção de deslocação para cada origem. Esse campo deve conter a string ${FROM_SOURCE} ou ${TO_SOURCE}.",
	"@@Path-Distance-Allocation_Value-Raster_tag0@@": "O raster de número inteiro de entrada que identifica os valores da zona a utilizar para cada localização de origem de entrada. Para cada célula de localização de origem, o valor definido pelo <strong>Raster de Valor</strong> será atribuído a todas as células alocadas à localização de origem para o cálculo. O <strong>Raster de Valor</strong> terá precedência sobre qualquer definição para o <strong>Campo de Origem</strong>.",
	"@@Path-Distance-Allocation_verticalfactor_tag0@@": "<p>Define a relação entre o fator de custo vertical e o ângulo de movimento relativo vertical (VRMA).</p><p>Existem vários fatores com modificadores que identificam um gráfico de fator vertical definido. Adicionalmente, pode ser utilizada uma tabela para criar um gráfico personalizado. Os gráficos são utilizados para identificar o fator vertical utilizado no cálculo do custo total de mover para uma célula vizinha.</p><p>Nas explicações abaixo, são utilizados dois acrónimos: VF e VRMA. VF significa fator vertical, que define a dificuldade vertical encontrada na mudança de uma célula para a seguinte. VRMA significa um ângulo de movimento relativo vertical, que identifica o ângulo de inclinação entre FROM (DE) ou o processamento, a célula e a célula TO (PARA).</p><p>Os tipo de <strong>Fator vertical</strong> incluem:</p><ul><li><strong>Binário</strong> – especifica que se o VRMA for superior ao ângulo de corte baixo e inferior ao ângulo de corte elevado, o VF está definido para o valor associado ao fator zero, caso contrário, é infinito.</li><li><strong>Linear</strong> – indica que o VF é uma função linear do VRMA.</li><li><strong>Linear simétrico</strong> – especifica que o VF é uma função linear do VRMA no lado negativo ou positivo do VRMA, respetivamente, e as duas funções lineares são simétricas no que respeita ao eixo VF (y).</li><li><strong>Linear inverso</strong> – indica que o VF é uma função linear inversa do VRMA.</li><li><strong>Linear inverso simétrico</strong> – Especifica que o VF é uma função linear inversa do VRMA no lado negativo ou positivo do VRMA, respetivamente, e que as duas funções lineares são simétricas em relação ao eixo VF (y).</li><li><strong>Cos</strong> – identifica o VF como a função baseada no cosseno do VRMA.</li><li><strong>Sec</strong> – identifica o VF como a função baseada no secante do VRMA.</li><li><strong>Cos-Sec</strong> – especifica que o VF é a função baseada no secante do VRMA quando o VRMA é negativo e a função baseada no cosseno do VRMA quando o VRMA não é negativo.</li><li><strong>Sec-Cos</strong> – especifica que o VF é a função baseada no secante do VRMA quando o VRMA é negativo e a função baseada no cosseno do VRMA quando o VRMA não é negativo.</li><li><strong>Tabela</strong> – identifica que será utilizado um ficheiro de tabela para definir o gráfico de fator vertical utilizado para determinar VF.</li></ul><p>Os modificadores das palavras-chave verticais incluem:</p><ul><li><strong>Fator zero</strong> – estabelece o fator vertical utilizado quando o VRMA é zero. Este fator posiciona a interceção Y da função especificada. Por definição, o fator zero não é aplicável a qualquer uma das funções verticais trignométricas (COS, SEC, COS-SEC ou SEC-COS). A interceção Y é definida por estas funções.</li><li><strong>Ângulo de corte baixo</strong> – define o ângulo do VRMA abaixo do qual o VF será definido para infinito.</li><li><strong>Ângulo de corte elevado</strong> – define o ângulo do VRMA acima do qual o VF será definido para infinito.</li><li><strong>Inclinação</strong> – estabelece a inclinação da linha reta utilizada com as palavras-chave do fator vertical <strong>Linear</strong> e <strong>Linear inverso</strong>. A inclinação é especificada como uma fração de subida em excesso (por exemplo, 45 por cento da inclinação é de 1/45, que é inserido como 0,02222).</li><li><strong>Nome da tabela</strong> – identifica o nome da tabela que define o VF.</li></ul>",
	"@@Path-Distance-Allocation_Vertical-Raster_tag0@@": "Define a relação entre o fator de custo vertical e o ângulo de movimento relativo vertical (VRMA).",
	"@@Path-Distance-Allocation_Vertical-Raster_tag1@@": "Os valores são utilizados para calcular a inclinação utilizada para identificar o fator vertical incorrido durante o movimento de uma célula para outra.",
	"@@Path-Distance-Back-Link_Accumulative-Cost-Resistance-Rate_tag0@@": "Este parâmetro simula o aumento do esforço para superar os custos à medida que o custo acumulado aumenta. É utilizado para modelar a fadiga do condutor. O custo acumulado crescente para alcançar uma célula é multiplicado pela taxa de resistência e adicionado ao custo para se mover para a célula seguinte.",
	"@@Path-Distance-Back-Link_Accumulative-Cost-Resistance-Rate_tag1@@": "É uma versão modificada de uma fórmula de taxa de juro composta que é utilizada para calcular o custo aparente de se mover por uma célula. À medida que o valor da taxa de resistência aumenta, aumenta o custo das células que são visitadas mais tarde. Quanto maior for a taxa de resistência, maior será o custo de alcançar a célula seguinte, que é composto por cada movimento subsequente. Uma vez que a taxa de resistência é semelhante a uma taxa composta e geralmente os valores de custo acumulado são muito grandes, são sugeridas pequenas taxas de resistência, como 0,005 ou mesmo mais pequenas, dependendo dos valores de custo acumulado.",
	"@@Path-Distance-Back-Link_Accumulative-Cost-Resistance-Rate_tag2@@": "O valor tem de ser maior que zero. A capacidade predefinida está na extremidade do raster de saída.",
	"@@Path-Distance-Back-Link_Capacity_tag0@@": "Define a capacidade de custo para o condutor para uma origem. Os cálculos de custos continuam para cada origem até que a capacidade especificada seja alcançada.",
	"@@Path-Distance-Back-Link_Capacity_tag1@@": "O valor tem de ser maior que zero. A capacidade predefinida está na extremidade do raster de saída.",
	"@@Path-Distance-Back-Link_Cost-Raster_tag0@@": "Um raster de entrada necessário define o custo ou impedância para que se mova de modo planimétrico através de cada célula. O valor em cada localização da célula representa a distância de custo-por-unidade para movimentação. Cada valor da localização da célula é multiplicado pela resolução de célula e também compensa o movimento diagonal para obter os custos totais de passagem pela célula.",
	"@@Path-Distance-Back-Link_Cost-Raster_tag1@@": "Os valores de <strong>Raster de Custo</strong> podem ser um número inteiro ou ponto flutuante, mas não podem ser negativos ou zero.",
	"@@Path-Distance-Back-Link_horizontalfactor_tag0@@": "<p>Define a relação entre o fator de custo horizontal e o ângulo de movimento relativo horizontal (HRMA).</p><p>Existem vários fatores com modificadores que identificam um gráfico de fator vertical definido. Adicionalmente, pode ser utilizada uma tabela para criar um gráfico personalizado. Os gráficos são utilizados para identificar o fator vertical utilizado no cálculo do custo total de mover para uma célula vizinha.</p><p>Nas explicações abaixo, são utilizados dois acrónimos: HF e HRMA. HF significa fator horizontal, que define a dificuldade horizontal detetada ao passar de uma célula para a seguinte. HRMA significa um ângulo de movimento relativo horizontal, que identifica o ângulo entre a direção horizontal de uma célula e a direção de movimento.</p><p> Os tipos de <strong>Fator horizontal</strong> incluem:</p><ul><li><strong>Binário</strong> – indica que se o HRMA for inferior ao ângulo de corte, o HF é definido para o valor associado ao fator zero; caso contrário, é infinito.</li><li><strong>Posterior </strong> – estabelece que apenas é permitido movimento de avanço. O HRMA tem de ser superior ou igual a 0 e inferior a 90 graus (0 &lt;= HRMA &lt; 90). Se o HRMA for superior a 0 e inferior a 45 graus, o HF da célula é definido para o valor associado ao fator zero. Se o HRMA for superior ou igual a 45 graus é utilizado o valor de modificador do valor lateral. O HF para qualquer valor HRMA igual ou superior a 90 graus está definido para infinito.</li><li><strong>Linear</strong> – especifica que o HF é uma função linear do HRMA.</li><li><strong>Linear Inverso</strong> – especifica que o HF é uma função linear inversa do HRMA.</li><li><strong>Tabela</strong> – identifica que será utilizado um ficheiro de tabela para definir o gráfico de fator horizontal utilizado para determinar os HF.</li></ul><p>Os modificadores para os fatores horizontais incluem:</p><ul><li><strong>Fator Zero</strong> – O fator horizontal a ser utilizado quando o HRMA é zero. Este fator posiciona a interceção Y para qualquer uma das funções do fator horizontal..</li><li><strong>Ângulo de corte</strong> – define o ângulo HRMA além do qual o HF será definido para o infinito.</li><li><strong>Inclinação</strong> – estabelece a inclinação da linha reta utilizada com as palavras-chave do fator horizontal <strong>Linear</strong> e <strong>Linear Inverso</strong>. A inclinação é especificada como uma fração de subida em excesso (por exemplo, 45 por cento da inclinação é de 1/45, que é inserido como 0,02222).</li><li><strong>Valor lateral</strong> – estabelece o HF quando o HRMA é superior ou igual a 45 graus e inferior a 90 graus quando é especificada a palavra-chave do fator horizontal <strong>Posterior</strong>.</li><li><strong>Nome da tabela</strong> – identifica o nome da tabela que define o HF.</li></ul>",
	"@@Path-Distance-Back-Link_Horizontal-Raster_tag0@@": "Um raster que define a direção horizontal em cada célula.",
	"@@Path-Distance-Back-Link_Horizontal-Raster_tag1@@": "Os valores no raster têm de ser números inteiros de 0 a 360, sendo 0 graus a norte, ou na direção da parte superior do ecrã, e aumentando no sentido dos ponteiros do relógio. As áreas planas devem ter um valor de -1. Os valores em cada localização serão utilizados em conjunto com <strong>Fator horizontal</strong> para determinar o custo horizontal incorrido ao deslocar-se de uma célula para os seus vizinhos.",
	"@@Path-Distance-Back-Link_Maximum-Distance_tag0@@": "O limiar que os valores de custo acumulado não podem exceder. Se uma distância de custo acumulado exceder este valor, o valor de saída para a localização da célula será NoData. A distância máxima define a extensão em que as distâncias de custo acumulado são calculadas. A distância predefinida é até à extensão do raster de saída.",
	"@@Path-Distance-Back-Link_Multiplier-to-Apply-to-Costs_tag0@@": "Um multiplicador para aplicar os valores de custo.",
	"@@Path-Distance-Back-Link_Multiplier-to-Apply-to-Costs_tag1@@": "Este parâmetro permite controlar o modo de viagem ou a magnitude numa origem. Quanto maior for o multiplicador, maior será o custo de se mover através de cada célula.",
	"@@Path-Distance-Back-Link_Multiplier-to-Apply-to-Costs_tag2@@": "Os valores têm de ser maiores que zero. O padrão é 1.",
	"@@Path-Distance-Back-Link_Multiplier-to-Apply-to-Costs_tag3@@": "Pode ser utilizado para um valor numérico (duplo) ou um campo de <strong>Raster de Origem</strong> para este parâmetro.",
	"@@Path-Distance-Back-Link_Source-Raster_tag0@@": "O raster de entrada necessário das localizações de origem.",
	"@@Path-Distance-Back-Link_Source-Raster_tag1@@": "Trata-se de um raster que identifica as células ou localizações a partir das quais é calculada a menor distância de custo acumulado para cada localização da célula de saída.",
	"@@Path-Distance-Back-Link_Source-Raster_tag2@@": "Pode ser do tipo número inteiro ou ponto flutuante.",
	"@@Path-Distance-Back-Link_Start-Cost_tag0@@": "O custo de arranque a partir do qual se iniciam os cálculos de custos. Este parâmetro permite a especificação do custo fixo associado a uma origem. Em vez de começar com um custo de 0, o algoritmo de custo começa com o valor especificado.",
	"@@Path-Distance-Back-Link_Start-Cost_tag1@@": "O valor deverá ser igual ou maior que zero. O padrão é 0.",
	"@@Path-Distance-Back-Link_Surface-Raster_tag0@@": "Um raster define os valores de elevação em cada localização da célula.",
	"@@Path-Distance-Back-Link_Surface-Raster_tag1@@": "Os valores são utilizados para calcular a distância real da superfície coberta ao passar entre células.",
	"@@Path-Distance-Back-Link_Travel-Direction_tag0@@": "Define a direção do condutor ao aplicar a taxa de resistência à origem e o custo de arranque da origem.",
	"@@Path-Distance-Back-Link_Travel-Direction_tag1@@": "<strong>Da Origem</strong>--A taxa de resistência à origem e o custo de arranque da origem serão aplicados a partir da origem de entrada e ao sair das células não de origem. Isto é por omissão.",
	"@@Path-Distance-Back-Link_Travel-Direction_tag3@@": "<strong>Para a Origem</strong>--A taxa de resistência à origem e o custo de arranque da origem serão aplicados a partir de cada célula não de origem e de volta à origem de entrada.",
	"@@Path-Distance-Back-Link_Travel-Direction_tag5@@": "Especifique a palavra-chave <strong>Da Origem</strong> ou <strong>Para a Origem</strong> que será aplicada a todas as origens, ou especifique um campo no <strong>Raster de Origem</strong> que contenha as palavras-chave para identificar a direção de deslocação para cada origem. Esse campo deve conter a string ${FROM_SOURCE} ou ${TO_SOURCE}.",
	"@@Path-Distance-Back-Link_verticalfactor_tag0@@": "<p>Define a relação entre o fator de custo vertical e o ângulo de movimento relativo vertical (VRMA).</p><p>Existem vários fatores com modificadores que identificam um gráfico de fator vertical definido. Adicionalmente, pode ser utilizada uma tabela para criar um gráfico personalizado. Os gráficos são utilizados para identificar o fator vertical utilizado no cálculo do custo total de mover para uma célula vizinha.</p><p>Nas explicações abaixo, são utilizados dois acrónimos: VF e VRMA. VF significa fator vertical, que define a dificuldade vertical encontrada na mudança de uma célula para a seguinte. VRMA significa um ângulo de movimento relativo vertical, que identifica o ângulo de inclinação entre FROM (DE) ou o processamento, a célula e a célula TO (PARA).</p><p>Os tipo de <strong>Fator vertical</strong> incluem:</p><ul><li><strong>Binário</strong> – especifica que se o VRMA for superior ao ângulo de corte baixo e inferior ao ângulo de corte elevado, o VF está definido para o valor associado ao fator zero, caso contrário, é infinito.</li><li><strong>Linear</strong> – indica que o VF é uma função linear do VRMA.</li><li><strong>Linear simétrico</strong> – especifica que o VF é uma função linear do VRMA no lado negativo ou positivo do VRMA, respetivamente, e as duas funções lineares são simétricas no que respeita ao eixo VF (y).</li><li><strong>Linear inverso</strong> – indica que o VF é uma função linear inversa do VRMA.</li><li><strong>Linear inverso simétrico</strong> – Especifica que o VF é uma função linear inversa do VRMA no lado negativo ou positivo do VRMA, respetivamente, e que as duas funções lineares são simétricas em relação ao eixo VF (y).</li><li><strong>Cos</strong> – identifica o VF como a função baseada no cosseno do VRMA.</li><li><strong>Sec</strong> – identifica o VF como a função baseada no secante do VRMA.</li><li><strong>Cos-Sec</strong> – especifica que o VF é a função baseada no secante do VRMA quando o VRMA é negativo e a função baseada no cosseno do VRMA quando o VRMA não é negativo.</li><li><strong>Sec-Cos</strong> – especifica que o VF é a função baseada no secante do VRMA quando o VRMA é negativo e a função baseada no cosseno do VRMA quando o VRMA não é negativo.</li><li><strong>Tabela</strong> – identifica que será utilizado um ficheiro de tabela para definir o gráfico de fator vertical utilizado para determinar VF.</li></ul><p>Os modificadores das palavras-chave verticais incluem:</p><ul><li><strong>Fator zero</strong> – estabelece o fator vertical utilizado quando o VRMA é zero. Este fator posiciona a interceção Y da função especificada. Por definição, o fator zero não é aplicável a qualquer uma das funções verticais trignométricas (COS, SEC, COS-SEC ou SEC-COS). A interceção Y é definida por estas funções.</li><li><strong>Ângulo de corte baixo</strong> – define o ângulo do VRMA abaixo do qual o VF será definido para infinito.</li><li><strong>Ângulo de corte elevado</strong> – define o ângulo do VRMA acima do qual o VF será definido para infinito.</li><li><strong>Inclinação</strong> – estabelece a inclinação da linha reta utilizada com as palavras-chave do fator vertical <strong>Linear</strong> e <strong>Linear inverso</strong>. A inclinação é especificada como uma fração de subida em excesso (por exemplo, 45 por cento da inclinação é de 1/45, que é inserido como 0,02222).</li><li><strong>Nome da tabela</strong> – identifica o nome da tabela que define o VF.</li></ul>",
	"@@Path-Distance-Back-Link_Vertical-Raster_tag0@@": "Define a relação entre o fator de custo vertical e o ângulo de movimento relativo vertical (VRMA).",
	"@@Path-Distance-Back-Link_Vertical-Raster_tag1@@": "Os valores são utilizados para calcular a inclinação utilizada para identificar o fator vertical incorrido durante o movimento de uma célula para outra.",
	"@@Plus_Cellsize-Type_tag0@@": "Escolha qual o tamanho da célula a utilizar no raster de saída. Se todos os tamanhos da célula de entrada forem os mesmos, todas as opções irão produzir os mesmos resultados.",
	"@@Plus_Cellsize-Type_tag1@@": "Primeiro De--Utiliza o primeiro tamanho da célula dos rasters de entrada.",
	"@@Plus_Cellsize-Type_tag2@@": "Último De--Utiliza o último tamanho da célula dos rasters de entrada.",
	"@@Plus_Cellsize-Type_tag3@@": "Máximo De--Utiliza o maior tamanho da célula de todos os rasters de entrada. Isto é por omissão.",
	"@@Plus_Cellsize-Type_tag4@@": "Média De--Utiliza o tamanho da célula médio de todos os rasters de entrada.",
	"@@Plus_Cellsize-Type_tag5@@": "Mín. De--Utiliza o menor tamanho da célula de todos os rasters de entrada.",
	"@@Plus_Extent-Type_tag0@@": "Escolha qual a extensão que deve ser utilizada no raster de saída:",
	"@@Plus_Extent-Type_tag1@@": "Primeiro De--Utiliza a extensão do primeiro raster de entrada para determinar a extensão de processamento.",
	"@@Plus_Extent-Type_tag2@@": "Interseção De--Utiliza a extensão dos pixéis sobrepostos para determinar a extensão de processamento. Isto é por omissão.",
	"@@Plus_Extent-Type_tag3@@": "Último De--Utiliza a extensão do último raster de entrada para determinar a extensão de processamento.",
	"@@Plus_Extent-Type_tag4@@": "União De--Utiliza a extensão de todos os rasters para determinar a extensão de processamento.",
	"@@Plus_Raster_tag0@@": "A entrada cujos valores serão adicionados.",
	"@@Plus_Raster_tag1@@": "Pode ser utilizado um valor constante como entrada para este parâmetro, desde que seja especificado um raster para o outro parâmetro.",
	"@@Plus_Raster2_tag0@@": "A entrada cujos valores serão adicionados à primeira entrada.",
	"@@Plus_Raster2_tag1@@": "Pode ser utilizado um valor constante como entrada para este parâmetro, desde que seja especificado um raster para o outro parâmetro.",
	"@@Local_Cellsize-Type_tag0@@": "Selecione qual o tamanho da célula a utilizar no raster de saída. Se todos os tamanhos da célula de entrada forem os mesmos, todas as opções irão produzir os mesmos resultados.",
	"@@Local_Cellsize-Type_tag1@@": "Primeiro De: utilize o primeiro tamanho de célula dos rasters de entrada.",
	"@@Local_Cellsize-Type_tag2@@": "Último De: utilize o último tamanho da célula dos rasters de entrada.",
	"@@Local_Cellsize-Type_tag3@@": "Máximo De: utilize o maior tamanho da célula de todos os rasters de entrada. Esta é a predefinição.",
	"@@Local_Cellsize-Type_tag4@@": "Média De: utilize o tamanho da célula médio de todos os rasters de entrada.",
	"@@Local_Cellsize-Type_tag5@@": "Mín. De: utilize o menor tamanho da célula de todos os rasters de entrada.",
	"@@Local_Extent-Type_tag0@@": "Escolha qual a extensão que deve ser utilizada no raster de saída:",
	"@@Local_Extent-Type_tag1@@": "Primeiro De: utilize a extensão do primeiro raster de entrada para determinar a extensão de processamento.",
	"@@Local_Extent-Type_tag2@@": "Interseção De: utilize a extensão dos pixeis sobrepostos para determinar a extensão de processamento. Esta é a predefinição.",
	"@@Local_Extent-Type_tag3@@": "Último De: utilize a extensão do último raster de entrada para determinar a extensão de processamento.",
	"@@Local_Extent-Type_tag4@@": "União De: utilize a extensão de todos os rasters para determinar a extensão de processamento.",
	"@@Local_Raster_tag0@@": "A entrada cujos valores serão adicionados.",
	"@@Local_Raster_tag1@@": "Pode ser utilizado um valor constante como entrada para este parâmetro, desde que seja especificado um raster para o outro parâmetro.",
	"@@Local_Raster2_tag0@@": "A entrada cujos valores serão adicionados à primeira entrada.",
	"@@Local_Raster2_tag1@@": "Pode ser utilizado um valor constante como entrada para este parâmetro, desde que seja especificado um raster para o outro parâmetro.",
	"@@Local_False-Raster_tag0@@": "A entrada cujos valores serão utilizados como valores de píxel de saída se a condição for falsa. Pode ser um número inteiro, um raster de ponto flutuante ou um valor constante.",
	"@@Local_True-Raster_tag0@@": "A entrada cujos valores serão utilizados como valores de píxel de saída se a condição for verdadeira. Pode ser um número inteiro, um raster de ponto flutuante ou um valor constante.",
	"@@Power_Cellsize-Type_tag0@@": "Escolha qual o tamanho da célula a utilizar no raster de saída. Se todos os tamanhos da célula de entrada forem os mesmos, todas as opções irão produzir os mesmos resultados.",
	"@@Power_Cellsize-Type_tag1@@": "Primeiro De--Utiliza o primeiro tamanho da célula dos rasters de entrada.",
	"@@Power_Cellsize-Type_tag2@@": "Último De--Utiliza o último tamanho da célula dos rasters de entrada.",
	"@@Power_Cellsize-Type_tag3@@": "Máximo De--Utiliza o maior tamanho da célula de todos os rasters de entrada. Isto é por omissão.",
	"@@Power_Cellsize-Type_tag4@@": "Média De--Utiliza o tamanho da célula médio de todos os rasters de entrada.",
	"@@Power_Cellsize-Type_tag5@@": "Mín. De--Utiliza o menor tamanho da célula de todos os rasters de entrada.",
	"@@Power_Extent-Type_tag0@@": "Escolha qual a extensão que deve ser utilizada no raster de saída:",
	"@@Power_Extent-Type_tag1@@": "Primeiro De--Utiliza a extensão do primeiro raster de entrada para determinar a extensão de processamento.",
	"@@Power_Extent-Type_tag2@@": "Interseção De--Utiliza a extensão dos pixéis sobrepostos para determinar a extensão de processamento. Isto é por omissão.",
	"@@Power_Extent-Type_tag3@@": "Último De--Utiliza a extensão do último raster de entrada para determinar a extensão de processamento.",
	"@@Power_Extent-Type_tag4@@": "União De--Utiliza a extensão de todos os rasters para determinar a extensão de processamento.",
	"@@Power_Raster_tag0@@": "Os valores de entrada a aumentar para a potência definida por <strong>Raster2</strong>.",
	"@@Power_Raster_tag3@@": "Pode ser utilizado um valor constante como entrada para este parâmetro, desde que seja especificado um raster para o outro parâmetro.",
	"@@Power_Raster2_tag0@@": "A entrada que determina a potência à qual os valores de <strong>Raster</strong> serão aumentados.",
	"@@Power_Raster2_tag3@@": "Pode ser utilizado um valor constante como entrada para este parâmetro, desde que seja especificado um raster para o outro parâmetro.",
	"@@Radar-Calibration_Calibration-Type_tag0@@": "O tipo de calibração a realizar.",
	"@@Radar-Calibration_Calibration-Type_tag1@@": "Beta zero-A função devolve a refletividade do radar por área da unidade no intervalo oblíquo. Este é o tipo de calibração predefinida.",
	"@@Radar-Calibration_Calibration-Type_tag2@@": "Sigma zero-A função devolve a refletividade do radar por área da unidade na área do solo. Os resultados são valores de ponto flutuante de 32 bits normalmente compreendidos no intervalo entre 0,0 e 1,0. Não é realizado qualquer recorte de dados, se esta opção for selecionada.",
	"@@Radar-Calibration_Calibration-Type_tag3@@": "Gama--A função devolve a refletividade do radar por área da unidade no plano perpendicular à direção de medição.",
	"@@Radar-Calibration_Calibration-Type_tag4@@": "Nenhum",
	"@@Radar-Calibration_Raster_tag0@@": "O raster de entrada.",
	"@@RasterInfo_Raster-Info_tag0@@": "Selecione um conjunto de dados raster para usar como modelo",
	"@@RasterInfo_Raster_tag0@@": "O raster de entrada.",
	"@@Rasterize-Attributes_Attribute-Field-Names_tag0@@": "Uma lista de campos em <strong>Tabela de Atributos Zonais</strong>, onde cada campo é separado por uma vírgula. Os valores em cada campo serão representados por uma banda no raster de saída.",
	"@@Rasterize-Attributes_Background-Value_tag0@@": "O valor de píxel inicial das bandas de saída num raster, antes de voltar a cartografar.",
	"@@Rasterize-Attributes_Background-Value_tag1@@": "Se um píxel não se enquadrar numa zona, este permanecerá como valor de fundo.",
	"@@Rasterize-Attributes_Value-Raster_tag0@@": "O raster de entrada necessário.",
	"@@Rasterize-Attributes_Value-Raster_tag1@@": "A entrada deve ser um raster de banda única. Se for utilizado um raster multibandas, apenas será utilizada a primeira banda.",
	"@@Rasterize-Attributes_Where-Clause_tag0@@": "Uma consulta adicional opcional é aplicada em <strong>Tabela de Atributos Zonais</strong>.",
	"@@Rasterize-Attributes_Where-Clause_tag3@@": "Se utilizasse a tabela acima como exemplo, a consulta seria de ${Variable1 = 'bare earth'}.",
	"@@Rasterize-Attributes_Zonal-Attributes-Table_tag0@@": "Os atributos de zona especificados como um caminho para uma classe de elementos local, o caminho para uma tabela, o URL para uma camada de serviço de elementos ou uma string JSON.",
	"@@Rasterize-Attributes_Zonal-Attributes-Table_tag1@@": "Em JSON é descrito como uma coleção de mapeamento de ID da zona para um conjunto de números inteiros. ${{ zoneId:[f1,f2,...,fn], ... } }",
	"@@Rasterize-Attributes_Zone-Field_tag0@@": "O nome de campo que contém os valores de ID da zona.",
	"@@Rasterize-Attributes_Zone-Raster_tag0@@": "Um raster de banda única opcional onde cada píxel contém a ID da zona associada à localização. A ID da zona é utilizada para procurar linhas na tabela de atributos de zona para a ingestão específica da zona.",
	"@@Rasterize-Attributes_Zone-Raster_tag1@@": "Deixe este parâmetro não especificado se apenas pretender importar o atributo.",
	"@@Rasterize-Features_Field_tag0@@": "Selecione o campo a utilizar para identificar cada elemento.",
	"@@Rasterize-Features_Input-Features_tag0@@": "Selecione a classe de elementos para converter para o formato raster.",
	"@@Rasterize-Features_Raster_tag0@@": "Selecione um raster para definir o tamanho e extensão da célula para a conversão de elementos.",
	"@@Rasterize-Features_Resolve-Overlap-Method_tag0@@": "Determine como gerir os elementos que se sobrepõem:",
	"@@Rasterize-Features_Resolve-Overlap-Method_tag1@@": "<strong>Primeiro</strong>--As áreas de sobreposição serão atribuídas a um valor do primeiro conjunto de dados listado.",
	"@@Rasterize-Features_Resolve-Overlap-Method_tag3@@": "<strong>Último</strong>--As áreas de sobreposição serão atribuídas a um valor do último conjunto de dados listado.",
	"@@Rasterize-Features_Resolve-Overlap-Method_tag5@@": "<strong>Menor</strong>--As áreas de sobreposição serão atribuídas a um valor a partir do menor dos elementos.",
	"@@Rasterize-Features_Resolve-Overlap-Method_tag7@@": "<strong>Maior</strong>--As áreas de sobreposição serão atribuídas a um valor da maior parte dos elementos.",
	"@@Recast_Overrides_tag0@@": "Uma tabela de nomes variáveis e valores definidos pelo utilizador utilizados para modificar um conjunto de dados de mosaico.",
	"@@Recast_Raster_tag0@@": "O produto raster ao qual a função Recast será aplicada.",
	"@@Region-Group_Add-Link_tag0@@": "Especifica se é adicionado um campo de ligação à tabela da saída.",
	"@@Region-Group_Add-Link_tag1@@": "<strong>Adicionar Ligação</strong>--Um item ${LINK} será adicionado à tabela do raster de saída.",
	"@@Region-Group_Add-Link_tag3@@": "<strong>Sem Ligação</strong>--A tabela de atributos do raster de saída contém apenas os itens ${Value} e ${Count}.",
	"@@Region-Group_Excluded-Value_tag0@@": "Identifica um valor que, se a localização da célula incluir o valor, não será avaliada qualquer conectividade espacial independentemente do número de vizinhos especificado (QUATRO ou OITO).",
	"@@Region-Group_Excluded-Value_tag1@@": "As células com o valor excluído serão tratadas como NoData e são eliminadas dos cálculos. As localizações da célula que contêm o valor excluído irão receber 0 no raster de saída.",
	"@@Region-Group_Excluded-Value_tag2@@": "O valor excluído é semelhante ao conceito de um valor de fundo ou com uma máscara aplicada. Deve ser especificado um valor para este parâmetro se o parâmetro <strong>${CROSS}</strong> for especificado.",
	"@@Region-Group_Number-of-Neighbor-Cells_tag0@@": "O número de células vizinhas a utilizar na avaliação da conectividade entre células.",
	"@@Region-Group_Number-of-Neighbor-Cells_tag1@@": "<strong>QUATRO</strong>--Define a conectividade entre células do mesmo valor apenas se as células forem diretamente para a esquerda, direita, para cima ou para baixo de cada um dos quatro vizinhos mais próximos. Isto é por omissão.",
	"@@Region-Group_Number-of-Neighbor-Cells_tag3@@": "<strong>OITO</strong>--Define a conectividade entre células do mesmo valor se estiverem na vizinhança imediata de oito células entre si. Isto inclui o lado direito, esquerdo, superior ou diagonal entre si.",
	"@@Region-Group_Zone-Connectivity_tag0@@": "Define que valores de células devem ser considerados ao testar a conectividade.",
	"@@Region-Group_Zone-Connectivity_tag1@@": "<strong>DENTRO</strong>--Testa a conectividade entre os valores de entrada que são os mesmos dentro da mesma zona. Isto é por omissão.",
	"@@Region-Group_Zone-Connectivity_tag3@@": "As únicas células que podem ser agrupadas são células da mesma zona (valor) que cumprem os requisitos espaciais de conectividade especificados pelo parâmetro <strong>Número de vizinhos</strong> (quatro ou oito vias).",
	"@@Region-Group_Zone-Connectivity_tag6@@": "<strong>CRUZADO</strong>--Testa a conectividade pelos requisitos espaciais especificados pelo parâmetro de número de vizinhos entre células com quaisquer valores, exceto para o valor identificado a excluir pelo parâmetro de valor excluído.",
	"@@Region-Group_Zone-Connectivity_tag8@@": "Quando esta opção é usada, deve ser especificado um valor para o parâmetro <strong>Valor excluído</strong>.",
	"@@Region-Group_Zone-Raster_tag0@@": "O raster de entrada necessário cujas regiões ligadas únicas serão identificadas.",
	"@@Region-Group_Zone-Raster_tag1@@": "Deve ser de tipo número inteiro.",
	"@@Region-Grow_Fill-Value-Field_tag0@@": "O campo na tabela de atributos que define o valor de preenchimento para o grupo de pixéis. Numa imagem multibandas, todas as bandas serão atribuídas a este valor.",
	"@@Region-Grow_Max-Growth-Radius-Field_tag0@@": "O campo na tabela de atributos que define o raio de crescimento máximo, nas unidades de referência espacial da imagem.",
	"@@Region-Grow_Raster_tag0@@": "O raster em que pretende executar esta função.",
	"@@Region-Grow_Seed-Points_tag0@@": "Uma classe de elementos de ponto, que serve como seeds iniciais para o algoritmo. Cada ponto seed corresponde a uma entrada na tabela de atributos, que possui o raio de crescimento máximo, limiar de semelhança e informações sobre o valor de preenchimento.",
	"@@Region-Grow_Similarity-Threshold-Field_tag0@@": "O campo na tabela de atributos que define o limiar de semelhança, como distância euclidiana no espaço espectral.",
	"@@Remap_Allow-Unmatched-Pixel-Values_tag0@@": "Os valores em falta na tabela Reclass podem manter o seu valor ou voltar a cartografar em NoData.",
	"@@Remap_Allow-Unmatched-Pixel-Values_tag1@@": "Não verificado – qualquer píxel do raster de entrada que não seja reclassificado numa tabela voltar a cartografar irá manter o seu valor e ser escrito para a sua localização no raster de saída. Isto é por omissão.",
	"@@Remap_Allow-Unmatched-Pixel-Values_tag2@@": "Verificado – qualquer píxel do raster de entrada que não seja reclassificado numa tabela voltar a cartografar irá manter o seu valor voltar a cartografar para NoData para a sua localização no raster de saída.",
	"@@Remap_Input-Field_tag0@@": "Escolha o campo que especifica o valor do píxel de entrada de voltar a cartografar.",
	"@@Remap_Input-Field_tag1@@": "Se a sua tabela tiver um intervalo de valores, este será o campo de valor mínimo e o parâmetro <strong>Campo Máx de Entrada</strong> também necessita de ser especificado.",
	"@@Remap_Input-Max-Field_tag0@@": "Escolha o campo de valor máximo se a sua tabela especificar um intervalo de valores.",
	"@@Remap_List_tag0@@": "Especifique os valores do mapa e especifique o intervalo de valores mínimo e máximo e os novos valores de voltar a cartografar. Além disso, o intervalo de valores pode ser definido como pixéis NoData.",
	"@@Remap_Output-Field_tag0@@": "Escolha o campo que será utilizado como valor a voltar a cartografar de saída.",
	"@@Remap_Raster_tag0@@": "O raster de entrada.",
	"@@Remap_Remap-Definition-Type_tag0@@": "Escolha a opção que pretende utilizar para definir os valores de voltar a cartografar:",
	"@@Remap_Remap-Definition-Type_tag1@@": "Lista--Especifique um intervalo de valores de píxel para cartografar um valor de píxel de saída",
	"@@Remap_Remap-Table-Type_tag0@@": "Escolha o tipo de tabela que irá utilizar para voltar a cartografar o seu raster de entrada:",
	"@@Remap_Remap-Table-Type_tag1@@": "Simples--Usa a entrada <strong>Tabela Voltar a Cartografar</strong> para voltar a cartografar os valores de píxel de <strong>Campo de Entrada</strong> para o valor correspondente no parâmetro <strong>Campo de Saída</strong>. Este método oculta a tabela a voltar a cartografar para que possa ter um desempenho mais rápido.",
	"@@Remap_Remap-Table-Type_tag8@@": "Dinâmico--Este método não oculta a tabela a voltar a cartografar e irá fazer uma consulta sempre que for efetuado um pedido (deslocar, ampliar/reduzir ou atualizar). Se a tabela mudar, o próximo pedido pode voltar a cartografar dinamicamente os valores em conformidade.",
	"@@Remap_Remap-Table-Type_tag9@@": "Reatribuição--Uma tabela específica utilizada para o processo de reclassificação, em que cada linha na tabela apenas irá voltar a cartografar com base em cada limite de elemento.",
	"@@Remap_Remap-Table_tag0@@": "Procure na mesa tabela que define os seus valores de voltar a cartografar.",
	"@@Reproject_Raster_tag0@@": "O conjunto de dados raster a reprojetado ou reamostrado.",
	"@@Reproject_Spatial-Reference_tag0@@": "O sistema de coordenadas usado para reprojetar os dados.",
	"@@Reproject_X-Cellsize_tag0@@": "A dimensão x a que os dados devem ser reamostrados. Isto é opcional. Se o valor for igual ou inferior a 0, o envelope de saída (tamanhos de células e extensão) é calculado a partir do raster de entrada.",
	"@@Reproject_X-Registration-Point_tag0@@": "A coordenada X utilizada para definir o canto superior esquerdo do conjunto de dados. Esta coordenada deve ser definida nas unidades da nova referência espacial. Se ambos os parâmetros <strong>Tamanho da Célula X</strong> e <strong>Tamanho da Célula Y</strong> forem superiores a 0, são utilizados juntamente com os parâmetros <strong>Ponto de Registo X</strong> e <strong>Ponto de Registo Y</strong> para definir o envelope de saída.",
	"@@Reproject_Y-Cellsize_tag0@@": "A dimensão y a que os dados devem ser novamente reamostrados. Isto é opcional. Se o valor for igual ou inferior a 0, o envelope de saída (tamanhos de células e extensão) é calculado a partir do raster de entrada.",
	"@@Reproject_Y-Registration-Point_tag0@@": "A coordenada Y utilizada para definir o canto superior esquerdo do conjunto de dados. Esta coordenada deve ser definida nas unidades da nova referência espacial. Se ambos os parâmetros <strong>Tamanho da Célula X</strong> e <strong>Tamanho da Célula Y</strong> forem superiores a 0, são utilizados juntamente com os parâmetros <strong>Ponto de Registo X</strong> e <strong>Ponto de Registo Y</strong> para definir o envelope de saída.",
	"@@Resample_Input-Cellsize_tag0@@": "O tamanho da célula de pixéis do raster de entrada.",
	"@@Resample_Output-Cellsize_tag0@@": "O tamanho da célula de píxel do raster de saída. O tamanho da célula pode ser alterado, mas a extensão do conjunto de dados raster continuará a ser a mesma. A reamostragem a partir de um tamanho da célula definido pelo utilizador pode ser muito mais lenta do que a predefinição do sistema, uma vez que os processos de reamostragem predefinidos processam a quantidade mínima de dados a partir da resolução mais próxima possível.",
	"@@Resample_Raster_tag0@@": "O raster de entrada a ser reamostrado.",
	"@@Resample_Resampling-Type_tag0@@": "<strong>Vizinho Mais Próximo</strong>--Calcula o valor de píxel de saída utilizando o píxel de entrada mais próximo. Os pixéis NoData não irão permanecer inalterados no conjunto de dados raster de saída. Isto é predefinido.",
	"@@Resample_Resampling-Type_tag2@@": "<strong>Interpolação Bilinear</strong>--Calcula o valor de píxel utilizando o valor de distância ponderada dos quatro píxeis mais próximos. Este método é eficiente a nível computacional no processo.",
	"@@Resample_Resampling-Type_tag4@@": "<strong>Convolução Cúbica</strong>--Determina o novo valor de um píxel com base na instalação de uma curva suave através dos 16 centros de píxel de entrada mais próximos.",
	"@@Resample_Resampling-Type_tag6@@": "<strong>Maioria</strong>--Calcula o valor de píxel utilizando a maioria do valor de píxel nos 16 píxeis mais próximos. Os pixéis NoData não irão permanecer inalterados no conjunto de dados raster de saída.",
	"@@Resample_Resampling-Type_tag8@@": "<strong>Interpolação Bilinear Plus</strong>--Usa <strong>Interpolação Bilinear</strong>, exceto os píxeis ao longo das extremidades que são definidos como NoData e não são replicados ou considerados no cálculo. Utilize <strong>Interpolação Bilinear Plus</strong> para dados de mosaicos porque as extremidades irão corresponder melhor.",
	"@@Resample_Resampling-Type_tag14@@": "<strong>Gauss Blur</strong>--Aplica uma convolução Gaussiana ao raster de origem e calcula o valor de píxel utilizando o valor de distância ponderada de quatro píxeis mais próximo do raster desfocado. É adequado remover o ruído nos dados reamostrados e reduzir a amostragem para um tamanho de píxel superior.",
	"@@Resample_Resampling-Type_tag16@@": "<strong>Gauss Blur Plus</strong>--Usa o mesmo método que <strong>Gauss Blur</strong>, exceto os píxeis ao longo das extremidades que são definidos como NoData e não são replicados ou considerados no cálculo. Utilize <strong>Gauss Blur Plus</strong> para dados de mosaicos porque as extremidades irão corresponder melhor.",
	"@@Resample_Resampling-Type_tag22@@": "<strong>Média</strong>--Calcula os valores de píxel utilizando o valor médio de todos os píxeis sobrepostos para cada píxel-alvo.",
	"@@Resample_Resampling-Type_tag24@@": "<strong>Mínimo</strong>--Calcula o valor de píxel utilizando o valor mínimo de todos os píxeis sobrepostos. Os pixéis NoData não irão permanecer inalterados no conjunto de dados raster de saída.",
	"@@Resample_Resampling-Type_tag26@@": "<strong>Máximo</strong>--Adequado para dados contínuos, produz uma imagem de saída mais suave do que o método de reamostragem Vizinho Mais Próximo.",
	"@@Resample_Resampling-Type_tag28@@": "<strong>Média de Vetores</strong>--Calcula a média do vetor de direção de magnitude utilizando todos os píxeis envolvidos. Este método só se aplica a rasters de duas bandas que representam a magnitude e a direção. Converte primeiro a direção de magnitude em U-V e, de seguida, leva a média aritmética a todos os pixéis envolvidos para obter o U-V do píxel-alvo e convertê-lo novamente na direção de magnitude.",
	"@@Round-Down_Cellsize-Type_tag0@@": "Escolha qual o tamanho da célula a utilizar no raster de saída. Se todos os tamanhos da célula de entrada forem os mesmos, todas as opções irão produzir os mesmos resultados.",
	"@@Round-Down_Cellsize-Type_tag1@@": "Primeiro De--Utiliza o primeiro tamanho da célula dos rasters de entrada.",
	"@@Round-Down_Cellsize-Type_tag2@@": "Último De--Utiliza o último tamanho da célula dos rasters de entrada.",
	"@@Round-Down_Cellsize-Type_tag3@@": "Máximo De--Utiliza o maior tamanho da célula de todos os rasters de entrada. Isto é por omissão.",
	"@@Round-Down_Cellsize-Type_tag4@@": "Média De--Utiliza o tamanho da célula médio de todos os rasters de entrada.",
	"@@Round-Down_Cellsize-Type_tag5@@": "Mín. De--Utiliza o menor tamanho da célula de todos os rasters de entrada.",
	"@@Round-Down_Extent-Type_tag0@@": "Escolha qual a extensão que deve ser utilizada no raster de saída:",
	"@@Round-Down_Extent-Type_tag1@@": "Primeiro De--Utiliza a extensão do primeiro raster de entrada para determinar a extensão de processamento.",
	"@@Round-Down_Extent-Type_tag2@@": "Interseção De--Utiliza a extensão dos pixéis sobrepostos para determinar a extensão de processamento. Isto é por omissão.",
	"@@Round-Down_Extent-Type_tag3@@": "Último De--Utiliza a extensão do último raster de entrada para determinar a extensão de processamento.",
	"@@Round-Down_Extent-Type_tag4@@": "União De--Utiliza a extensão de todos os rasters para determinar a extensão de processamento.",
	"@@Round-Down_Raster_tag0@@": "Os valores de entrada a ser arredondados por defeito.",
	"@@Round-Up_Cellsize-Type_tag0@@": "Escolha qual o tamanho da célula a utilizar no raster de saída. Se todos os tamanhos da célula de entrada forem os mesmos, todas as opções irão produzir os mesmos resultados.",
	"@@Round-Up_Cellsize-Type_tag1@@": "Primeiro De--Utiliza o primeiro tamanho da célula dos rasters de entrada.",
	"@@Round-Up_Cellsize-Type_tag2@@": "Último De--Utiliza o último tamanho da célula dos rasters de entrada.",
	"@@Round-Up_Cellsize-Type_tag3@@": "Máximo De--Utiliza o maior tamanho da célula de todos os rasters de entrada. Isto é por omissão.",
	"@@Round-Up_Cellsize-Type_tag4@@": "Média De--Utiliza o tamanho da célula médio de todos os rasters de entrada.",
	"@@Round-Up_Cellsize-Type_tag5@@": "Mín. De--Utiliza o menor tamanho da célula de todos os rasters de entrada.",
	"@@Round-Up_Extent-Type_tag0@@": "Escolha qual a extensão que deve ser utilizada no raster de saída:",
	"@@Round-Up_Extent-Type_tag1@@": "Primeiro De--Utiliza a extensão do primeiro raster de entrada para determinar a extensão de processamento.",
	"@@Round-Up_Extent-Type_tag2@@": "Interseção De--Utiliza a extensão dos pixéis sobrepostos para determinar a extensão de processamento. Isto é por omissão.",
	"@@Round-Up_Extent-Type_tag3@@": "Último De--Utiliza a extensão do último raster de entrada para determinar a extensão de processamento.",
	"@@Round-Up_Extent-Type_tag4@@": "União De--Utiliza a extensão de todos os rasters para determinar a extensão de processamento.",
	"@@Round-Up_Raster_tag0@@": "Os valores de entrada a ser arredondados por excesso.",
	"@@Segment-Mean-Shift_Minimum-Segment-Size-in-Pixels_tag0@@": "O tamanho de segmento mínimo, medido em pixéis. Este valor está relacionado com a sua unidade de mapeamento mínima e irá filtrar blocos mais pequenos de pixéis. Todos os segmentos que são mais pequenos do que o valor especificado irão fundir os segmentos mais pequenos com o seu segmento vizinho de melhor instalação.",
	"@@Segment-Mean-Shift_Raster_tag0@@": "O raster de entrada a segmentar.",
	"@@Segment-Mean-Shift_Segment-boundaries-only_tag0@@": "Os limites do segmento são exibidos como uma linha de contorno preta à volta de cada segmento. Isto é útil para que possa distinguir segmentos adjacentes com cores semelhantes.",
	"@@Segment-Mean-Shift_Segment-boundaries-only_tag1@@": "Não verificado--Os limites do segmento não são apresentados. Isto é por omissão.",
	"@@Segment-Mean-Shift_Segment-boundaries-only_tag2@@": "Verificado-Os limites do segmento são apresentados com linhas de contorno pretas à volta de cada segmento.",
	"@@Segment-Mean-Shift_Spatial-Detail_tag0@@": "A importância relativa da separação de objetos com base em características espaciais.",
	"@@Segment-Mean-Shift_Spatial-Detail_tag1@@": "O intervalo de valores inteiros válido vai de 1 a 20. Os valores mais pequenos resultam em classes amplas e numa maior suavização. Um valor mais elevado é apropriado para discriminação entre os elementos espacialmente mais pequenos e agrupados. Por exemplo, numa cena urbana, poderia classificar os elementos de uma superfície impermeável geral utilizando um valor de detalhe espacial mais pequeno ou classificar edifícios e estradas como classes separadas utilizando um valor de detalhe espacial mais elevado.",
	"@@Segment-Mean-Shift_Spectral-Detail_tag0@@": "A importância relativa da separação de objetos com base nas características da cor.",
	"@@Segment-Mean-Shift_Spectral-Detail_tag1@@": "O intervalo de valores de ponto flutuante válido vai de 1.0 a 20.0. Os valores mais pequenos resultam em classes amplas e numa maior suavização. Um valor mais elevado é apropriado quando quer discriminar entre elementos com características espectrais similares. Por exemplo, a utilização de um valor de detalhe espectral mais elevado numa cena de floresta permite-lhe distinguir melhor as diferentes espécies de árvores.",
	"@@Segment-Mean-Shift_maximumsegmentsizeinpixels_tag0@@": "<p>O tamanho máximo de um segmento. Os segmentos maiores do que o tamanho especificado serão divididos. Utilize este parâmetro para evitar artefactos na camada de saída resultantes de grandes segmentos. A predefinição é -1.</p>",
	"@@Sentinel-1-Radiometric-Calibration_Calibration-Type_tag0@@": "Selecione um dos quatro tipos de calibração:",
	"@@Sentinel-1-Radiometric-Calibration_Calibration-Type_tag1@@": "<strong>Beta zero</strong>--Produz uma saída que contém o coeficiente de luminosidade do radar.",
	"@@Sentinel-1-Radiometric-Calibration_Calibration-Type_tag3@@": "<strong>Sigma zero</strong>--A retrodifusão à antena a partir de uma área da unidade no solo, relacionada com o intervalo ao solo.",
	"@@Sentinel-1-Radiometric-Calibration_Calibration-Type_tag5@@": "<strong>Gama</strong>--A medição da energia emitida e devolvida útil para determinar os padrões da antena.",
	"@@Sentinel-1-Radiometric-Calibration_Calibration-Type_tag7@@": "<strong>Nenhuma</strong>--não aplique uma correção. Isto é por omissão.",
	"@@Sentinel-1-Radiometric-Calibration_Raster_tag0@@": "O raster de entrada Sentinel-1 Level-1 GRD ou SLC que pretende processar.",
	"@@Sentinel-1-Radiometric-Calibration_Raster_tag1@@": "A função irá utilizar o ficheiro LUT para aplicar a correção térmica ou remover a correção, dependendo do conteúdo de LUT.",
	"@@Sentinel-1-Thermal-Noise-Removal_Raster_tag0@@": "O raster de entrada Sentinel-1 que pretende processar.",
	"@@Sentinel-1-Thermal-Noise-Removal_Raster_tag1@@": "A função irá utilizar o ficheiro LUT para aplicar a correção térmica ou remover a correção, dependendo do conteúdo de LUT.",
	"@@Set-Null_Cellsize-Type_tag0@@": "Escolha qual o tamanho da célula a utilizar no raster de saída. Se todos os tamanhos da célula de entrada forem os mesmos, todas as opções irão produzir os mesmos resultados.",
	"@@Set-Null_Cellsize-Type_tag1@@": "Primeiro De--Utiliza o primeiro tamanho da célula dos rasters de entrada.",
	"@@Set-Null_Cellsize-Type_tag2@@": "Último De--Utiliza o último tamanho da célula dos rasters de entrada.",
	"@@Set-Null_Cellsize-Type_tag3@@": "Máximo De--Utiliza o maior tamanho da célula de todos os rasters de entrada. Isto é por omissão.",
	"@@Set-Null_Cellsize-Type_tag4@@": "Média De--Utiliza o tamanho da célula médio de todos os rasters de entrada.",
	"@@Set-Null_Cellsize-Type_tag5@@": "Mín. De--Utiliza o menor tamanho da célula de todos os rasters de entrada.",
	"@@Set-Null_Extent-Type_tag0@@": "Escolha qual a extensão que deve ser utilizada no raster de saída:",
	"@@Set-Null_Extent-Type_tag1@@": "Primeiro De--Utiliza a extensão do primeiro raster de entrada para determinar a extensão de processamento.",
	"@@Set-Null_Extent-Type_tag2@@": "Interseção De--Utiliza a extensão dos pixéis sobrepostos para determinar a extensão de processamento. Isto é por omissão.",
	"@@Set-Null_Extent-Type_tag3@@": "Último De--Utiliza a extensão do último raster de entrada para determinar a extensão de processamento.",
	"@@Set-Null_Extent-Type_tag4@@": "União De--Utiliza a extensão de todos os rasters para determinar a extensão de processamento.",
	"@@Set-Null_False-Raster_tag0@@": "A entrada cujos valores serão utilizados como valores de píxel de saída se a condição for falsa. Pode ser um número inteiro, um raster de ponto flutuante ou um valor constante.",
	"@@Set-Null_Raster_tag0@@": "O raster de entrada que representa o resultado Booleano de uma função raster matemática lógica. Os valores serão 1 (para verdadeiro) ou 0 (para falso). Pode ser um número inteiro ou um raster de ponto flutuante.",
	"@@Shaded-Relief_Altitude_tag0@@": "A altitude é o ângulo de elevação do sol acima do horizonte e varia de 0 a 90 graus. Um valor de 0 graus indica que o sol está no horizonte, ou seja, no mesmo plano horizontal que a estrutura de referência. Um valor de 90 graus indica que o sol está diretamente acima. A predefinição é de 45 graus acima do horizonte.",
	"@@Shaded-Relief_Azimuth_tag0@@": "O Azimute é a posição relativa do sol ao longo do horizonte (em graus). Esta posição é indicada pelo ângulo do sol medido no sentido dos ponteiros do relógio seguindo para norte. Um azimute de 0 graus indica o norte, o este é de 90 graus, o sul é de 180 graus e o oeste é de 270 graus.",
	"@@Shaded-Relief_Color-Scheme-Type_tag0@@": "Especifique se será utilizada uma rampa de cores ou um mapa de cores para apresentar o relevo sombreado.",
	"@@Shaded-Relief_Color-Scheme-Type_tag1@@": "<strong>Rampa de Cores</strong>--Quando selecionar <strong>Rampa de Cores</strong>, ser-lhe-á solicitado que selecione uma rampa de cores apropriada.",
	"@@Shaded-Relief_Color-Scheme-Type_tag5@@": "<strong>Mapa de Cores</strong>--Quando selecionar <strong>Mapa de Cores</strong>, ser-lhe-á solicitado que especifique o ficheiro do mapa de cores a utilizar.",
	"@@Shaded-Relief_Disable-default-edge-pixel-interpolation_tag0@@": "Especifique se a interpolação de píxel de extremidade predefinida será desativada.",
	"@@Shaded-Relief_Disable-default-edge-pixel-interpolation_tag1@@": "Não verificado--A reamostragem bilinear será aplicada uniformemente para reamostrar o relevo sombreado. Isto é por omissão.",
	"@@Shaded-Relief_Disable-default-edge-pixel-interpolation_tag2@@": "Verificado--A reamostragem bilinear será utilizada dentro do relevo sombreado, exceto nas extremidades dos rasters ou junto a pixéis NoData. Estes pixéis serão preenchidos com NoData, uma vez que irão reduzir quaisquer efeitos de extremidade afiadas que possam ocorrer.",
	"@@Shaded-Relief_Disable-default-edge-pixel-interpolation_tag3@@": "A utilização desta opção irá evitar quaisquer artefactos de reamostragem que possam ocorrer ao longo das extremidades de um raster. Os pixéis de saída ao longo da extremidade de um raster ou junto a pixéis sem um valor serão preenchidos com NoData; assim, recomenda-se que esta opção seja utilizada apenas quando existirem outros rasters com pixéis sobrepostos disponíveis. Quando estão disponíveis pixéis sobrepostos, estas áreas NoData irão apresentar os valores de pixéis sobrepostos em vez de estarem em branco.",
	"@@Shaded-Relief_Raster_tag0@@": "O raster de elevação de entrada.",
	"@@Shaded-Relief_Scaling_tag0@@": "O resultado sombreado é ajustado dinamicamente ajustando o fator z utilizando uma das duas opções:",
	"@@Shaded-Relief_Scaling_tag1@@": "<strong>Nenhuma</strong>--Não é aplicada nenhuma escala. Isto é ideal para um conjunto de dados raster único que cobre uma área local. Isto não é recomendado para conjuntos de dados a nível mundial com grandes variações em mapas de elevação ou de múltipla escala, uma vez que irá produzir um relevo de terreno com pouca variação a pequenas escalas.",
	"@@Shaded-Relief_Scaling_tag3@@": "<strong>Ajustado</strong>--É aplicado um ajuste não linear utilizando valores padrão de <strong>Potência de Tamanho de Píxeis</strong> e <strong>Fator de Tamanho de Píxeis</strong>, que acomodam uma ampla variedade de alterações de altitude (escala) à medida que o visualizador ampliar/reduzir. A opção <strong>Ajustado</strong> é recomendada ao utilizar um conjunto de dados mundial.",
	"@@Shaded-Relief_Z-Factor_tag0@@": "O fator z é um fator de escala utilizado para converter os valores de elevação, com dois objetivos:",
	"@@Shaded-Relief_Z-Factor_tag1@@": "Converter as unidades de elevação (tais como metros ou pés) nas unidades de coordenadas horizontais do conjunto de dados, que podem estar em pés, metros ou graus",
	"@@Shaded-Relief_Z-Factor_tag2@@": "Adicionar exagero vertical para criar efeito visual",
	"@@Shaded-Relief_Z-Factor_tag3@@": "O resultado sombreado é ajustado dinamicamente ajustando o fator z utilizando uma das duas opções:",
	"@@Shaded-Relief_Z-Factor_tag4@@": "<strong>Nenhuma</strong>--Não é aplicada nenhuma escala. Isto é ideal para um conjunto de dados raster único que cobre uma área local. Isto não é recomendado para conjuntos de dados a nível mundial com grandes variações em mapas de elevação ou de múltipla escala, uma vez que irá produzir um relevo de terreno com pouca variação a pequenas escalas.",
	"@@Shaded-Relief_Z-Factor_tag6@@": "<strong>Ajustado</strong>--É aplicado um ajuste não linear utilizando valores padrão de <strong>Potência de Tamanho de Píxeis</strong> e <strong>Fator de Tamanho de Píxeis</strong>, que acomodam uma ampla variedade de alterações de altitude (escala) à medida que o visualizador ampliar/reduzir. A opção <strong>Ajustado</strong> é recomendada ao utilizar um conjunto de dados mundial.",
	"@@Shaded-Relief_hillshadetype_tag0@@": "Controla a origem da iluminação para a sombra.",
	"@@Shaded-Relief_hillshadetype_tag1@@": "<strong>Tradicional</strong> -- Calcula a sombra a partir de uma única direção de iluminação. Pode definir as opções <strong>Azimute</strong> e <strong>Altitude</strong> para controlar a localização da fonte de luz. Isto é por omissão.",
	"@@Shaded-Relief_hillshadetype_tag2@@": "<strong>Multidirecional</strong> -- Combina luz de várias origens para representar uma visualização melhorada do terreno.",
	"@@Shaded-Relief_PSPower_tag0@@": "A <strong>Potência de Tamanho de Píxeis</strong> representa alterações na altitude (ou escala) à medida que o visualizador ampliar/reduzir o ecrã do mapa. É o expoente aplicado ao termo do tamanho do píxel na equação que controla a taxa à qual o <strong>Fator Z</strong> se altera para evitar perdas significativas de relevo.",
	"@@Shaded-Relief_PSPower_tag1@@": "Este parâmetro só é válido quando o tipo de <strong>Escala</strong> for <strong>Ajustado</strong>. O valor predefinido é 0,664.",
	"@@Shaded-Relief_PSZFactor_tag0@@": "O <strong>Fator de Tamanho de Píxeis</strong> representa alterações na escala à medida que o visualizador ampliar/reduzir o ecrã do mapa. Controla a taxa à qual o <strong>Fator Z</strong> se altera.",
	"@@Shaded-Relief_PSZFactor_tag1@@": "Este parâmetro só é válido quando o tipo de <strong>Escala</strong> for <strong>Ajustado</strong>. O valor predefinido é 0,024.",
	"@@Sin_Cellsize-Type_tag0@@": "Escolha qual o tamanho da célula a utilizar no raster de saída. Se todos os tamanhos da célula de entrada forem os mesmos, todas as opções irão produzir os mesmos resultados.",
	"@@Sin_Cellsize-Type_tag1@@": "Primeiro De--Utiliza o primeiro tamanho da célula dos rasters de entrada.",
	"@@Sin_Cellsize-Type_tag2@@": "Último De--Utiliza o último tamanho da célula dos rasters de entrada.",
	"@@Sin_Cellsize-Type_tag3@@": "Máximo De--Utiliza o maior tamanho da célula de todos os rasters de entrada. Isto é por omissão.",
	"@@Sin_Cellsize-Type_tag4@@": "Média De--Utiliza o tamanho da célula médio de todos os rasters de entrada.",
	"@@Sin_Cellsize-Type_tag5@@": "Mín. De--Utiliza o menor tamanho da célula de todos os rasters de entrada.",
	"@@Sin_Extent-Type_tag0@@": "Escolha qual a extensão que deve ser utilizada no raster de saída:",
	"@@Sin_Extent-Type_tag1@@": "Primeiro De--Utiliza a extensão do primeiro raster de entrada para determinar a extensão de processamento.",
	"@@Sin_Extent-Type_tag2@@": "Interseção De--Utiliza a extensão dos pixéis sobrepostos para determinar a extensão de processamento. Isto é por omissão.",
	"@@Sin_Extent-Type_tag3@@": "Último De--Utiliza a extensão do último raster de entrada para determinar a extensão de processamento.",
	"@@Sin_Extent-Type_tag4@@": "União De--Utiliza a extensão de todos os rasters para determinar a extensão de processamento.",
	"@@Sin_Raster_tag0@@": "A entrada para a qual calcular os valores de seno.",
	"@@SinH_Cellsize-Type_tag0@@": "Escolha qual o tamanho da célula a utilizar no raster de saída. Se todos os tamanhos da célula de entrada forem os mesmos, todas as opções irão produzir os mesmos resultados.",
	"@@SinH_Cellsize-Type_tag1@@": "Primeiro De--Utiliza o primeiro tamanho da célula dos rasters de entrada.",
	"@@SinH_Cellsize-Type_tag2@@": "Último De--Utiliza o último tamanho da célula dos rasters de entrada.",
	"@@SinH_Cellsize-Type_tag3@@": "Máximo De--Utiliza o maior tamanho da célula de todos os rasters de entrada. Isto é por omissão.",
	"@@SinH_Cellsize-Type_tag4@@": "Média De--Utiliza o tamanho da célula médio de todos os rasters de entrada.",
	"@@SinH_Cellsize-Type_tag5@@": "Mín. De--Utiliza o menor tamanho da célula de todos os rasters de entrada.",
	"@@SinH_Extent-Type_tag0@@": "Escolha qual a extensão que deve ser utilizada no raster de saída:",
	"@@SinH_Extent-Type_tag1@@": "Primeiro De--Utiliza a extensão do primeiro raster de entrada para determinar a extensão de processamento.",
	"@@SinH_Extent-Type_tag2@@": "Interseção De--Utiliza a extensão dos pixéis sobrepostos para determinar a extensão de processamento. Isto é por omissão.",
	"@@SinH_Extent-Type_tag3@@": "Último De--Utiliza a extensão do último raster de entrada para determinar a extensão de processamento.",
	"@@SinH_Extent-Type_tag4@@": "União De--Utiliza a extensão de todos os rasters para determinar a extensão de processamento.",
	"@@SinH_Raster_tag0@@": "A entrada para a qual calcular valores de seno hiperbólico.",
	"@@Sink_Flow-Direction-Raster_tag0@@": "O raster de entrada que exibe a direção do fluxo a partir de cada célula.",
	"@@Sink_Flow-Direction-Raster_tag1@@": "O raster de direção do fluxo pode ser criado ao executar a função de <strong>Direção do Fluxo</strong>.",
	"@@Slope_DEM_tag0@@": "O raster de elevação de entrada.",
	"@@Slope_Disable-default-edge-pixel-interpolation_tag0@@": "A utilização desta opção irá evitar quaisquer artefactos de reamostragem que possam ocorrer ao longo das extremidades de um raster. Os pixéis de saída ao longo da extremidade de um raster ou junto a pixéis sem um valor serão preenchidos com NoData; assim, recomenda-se que esta opção seja utilizada apenas quando existirem outros rasters com pixéis sobrepostos disponíveis. Quando estão disponíveis pixéis sobrepostos, estas áreas NoData irão apresentar os valores de pixéis sobrepostos em vez de estarem em branco.",
	"@@Slope_Disable-default-edge-pixel-interpolation_tag1@@": "Não verificado--A reamostragem bilinear será aplicada uniformemente para reamostrar a sua inclinação. Isto é por omissão.",
	"@@Slope_Disable-default-edge-pixel-interpolation_tag2@@": "Verificado--A reamostragem bilinear será utilizada dentro da inclinação, exceto ao longo das extremidades dos rasters ou junto a pixéis NoData. Estes pixéis serão preenchidos com NoData, uma vez que irão reduzir quaisquer efeitos de extremidade afiadas que possam ocorrer.",
	"@@Slope_Scaling_tag0@@": "A saída do valor da inclinação da encosta pode ser inserida como um valor em graus ou como um aumento percentual. Existem três opções para <strong>Escala</strong>:",
	"@@Slope_Scaling_tag3@@": "<strong>Grau</strong>--A inclinação da encosta é calculada em graus. O intervalo de valores varia de 0 a 90.",
	"@@Slope_Scaling_tag5@@": "<strong>Percentagem_Aumento</strong>--A inclinação da encosta é calculada sob a forma de valores percentuais. O intervalo de valores varia de 0 a infinito. Uma superfície plana tem 0 porcento de aumento, enquanto uma superfície de 45 graus tem um aumento de 100 porcento. À medida que a superfície se torna mais vertical, o aumento percentual torna-se cada vez maior.",
	"@@Slope_Scaling_tag7@@": "<strong>Dimensionado</strong>--A inclinação da encosta é calculada da mesma forma que GRAU, mas o fator z é ajustado à escala. Utiliza os valores de <strong>Potência de Tamanho de Píxeis</strong> e <strong>Fator Tamanho de Píxeis</strong>, que representam as alterações de resolução (escala) à medida que o visualizador ampliar/reduzir. Isto é recomendado ao utilizar conjuntos de dados mundiais--particularmente ao utilizar o declive como uma superfície para visualização.",
	"@@Slope_Scaling_tag13@@": "O fator z é ajustado utilizando a seguinte equação:",
	"@@Slope_Scaling_tag14@@": "Fator Z ajustado = (Fator Z) + (Tamanho do Píxel)",
	"@@Slope_Scaling_tag15@@": "× (Fator de Tamanho de Píxeis)",
	"@@Slope_Scaling_tag16@@": "Potência Tamanho de Pixéis",
	"@@Slope_Z-Factor_tag0@@": "O <strong>Fator Z</strong> é um fator de escala utilizado para converter os valores de elevação, com dois objetivos:",
	"@@Slope_Z-Factor_tag3@@": "Converter as unidades de elevação (tais como metros ou pés) nas unidades de coordenadas horizontais do conjunto de dados, que podem estar em pés, metros ou graus",
	"@@Slope_Z-Factor_tag4@@": "Adicionar exagero vertical para criar efeito visual",
	"@@Slope_PSPower_tag0@@": "A <strong>Potência de Tamanho de Píxeis</strong> representa alterações na altitude (ou escala) à medida que o visualizador ampliar/reduzir o ecrã do mapa. É o expoente aplicado ao termo do tamanho do píxel na equação que controla a taxa à qual o <strong>Fator Z</strong> se altera para evitar perdas significativas de relevo.",
	"@@Slope_PSPower_tag1@@": "Este parâmetro só é válido quando o tipo de <strong>Escala</strong> for <strong>Dimensionado</strong>. O valor predefinido é 0,664.",
	"@@Slope_PSZFactor_tag0@@": "O <strong>Fator de Tamanho de Píxeis</strong> representa alterações na escala à medida que o visualizador ampliar/reduzir o ecrã do mapa. Controla a taxa à qual o <strong>Fator Z</strong> se altera.",
	"@@Slope_PSZFactor_tag1@@": "Este parâmetro só é válido quando o tipo de <strong>Escala</strong> for <strong>Dimensionado</strong>. O valor predefinido é 0,024.",
	"@@Snap-Pour-Point_Flow-Accumulation-Raster_tag0@@": "A camada raster de acumulação de fluxo de entrada.",
	"@@Snap-Pour-Point_Flow-Accumulation-Raster_tag1@@": "Isto pode ser criado com a função <strong>Acumulação de Fluxo</strong>.",
	"@@Snap-Pour-Point_Pour-Point-Field_tag0@@": "O campo utilizado para atribuir valores às localizações de ponto de escoamento.",
	"@@Snap-Pour-Point_Pour-Point-Raster_tag0@@": "As localizações de ponto de escoamento de entrada que tiverem sido ajustadas.",
	"@@Snap-Pour-Point_Pour-Point-Raster_tag1@@": "Para uma camada raster de entrada, todas as células que não sejam NoData (ou seja, têm um valor) serão consideradas pontos de escoamento e serão ajustadas.",
	"@@Snap-Pour-Point_Snap-Distance_tag0@@": "A distância máxima, em unidades de mapa, para procurar uma célula de fluxo acumulado mais elevado.",
	"@@Speckle_Additive-Noise-Mean_tag0@@": "Especifica o valor médio do ruído de aditivo. Um valor médio de ruído maior irá produzir menos suavização, enquanto que resultados de valor mais pequeno resultam numa maior suavidade.",
	"@@Speckle_Additive-Noise-Mean_tag1@@": "Este parâmetro só é válido quando o <strong>Tipo de Filtro</strong> for <strong>Filtro Lee</strong> e o <strong>Modelo de Ruído</strong> for <strong>Ruído Aditivo</strong> ou <strong>Ruído Aditivo e Multiplicativo</strong>. O valor padrão é 0.",
	"@@Speckle_Damping-Factor_tag0@@": "Especifica a extensão do efeito de amortecimento exponencial na filtragem. Um maior valor de amortecimento preserva as extremidades melhor, mas suaviza menos, enquanto um valor mais pequeno produz mais suavização. Um valor de 0 resulta na mesma saída que um filtro de baixa passagem.",
	"@@Speckle_Damping-Factor_tag1@@": "Este parâmetro só é válido quando o <strong>Tipo de Filtro</strong> for <strong>Filtro Lee Melhorado</strong> ou <strong>Filtro Frost</strong>. O valor padrão é 1.",
	"@@Speckle_Filter-Size_tag0@@": "Especifica o tamanho da janela de pixéis utilizada para filtrar o ruído:",
	"@@Speckle_Filter-Size_tag1@@": "3x3",
	"@@Speckle_Filter-Size_tag2@@": "5x5",
	"@@Speckle_Filter-Size_tag3@@": "7x7",
	"@@Speckle_Filter-Size_tag4@@": "9x9",
	"@@Speckle_Filter-Size_tag5@@": "11x11",
	"@@Speckle_Filter-Type_tag0@@": "Especifica o tipo de filtro a utilizar no algoritmo de suavização para remover o ruído de speckle:",
	"@@Speckle_Filter-Type_tag1@@": "<strong>Filtro Lee</strong>--Reduz o ruído speckle através da aplicação de um filtro espacial a cada píxel numa imagem, que filtra os dados com base em estatísticas locais calculadas numa janela quadrada. Este filtro é útil quando pretende suavizar os dados de speckle que possui um aditivo ou um componente multiplicativo. Isto é por omissão.",
	"@@Speckle_Filter-Type_tag3@@": "<strong>Filtro Lee Melhorado</strong>--Uma versão adaptada do filtro Lee que inclui o <strong>Fator de Amortecimento</strong> e <strong>Número de Feições</strong>. Este filtro é útil quando pretende reduzir o speckle, preservando simultaneamente a informação sobre textura.",
	"@@Speckle_Filter-Type_tag9@@": "<strong>Filtro Frost</strong>--Reduz o ruído speckle com um filtro circularmente simétrico humedecido exponencialmente que utiliza estatísticas locais nas janelas individuais de filtro. Este filtro é útil quando pretende reduzir o speckle enquanto preserva as extremidades nas imagens do radar.",
	"@@Speckle_Filter-Type_tag11@@": "<strong>Filtro Kuan</strong>--Tal como o filtro Lee, este filtro aplica um filtro espacial a cada píxel numa imagem e filtra os dados com base em estatísticas locais calculadas numa janela quadrada. Este filtro é útil quando pretende reduzir o speckle enquanto preserva as extremidades nas imagens do radar.",
	"@@Speckle_Multiplicative-Noise-Mean_tag0@@": "Especifica o valor médio do ruído multiplicativo. Um valor médio de ruído maior irá produzir menos suavização, enquanto que resultados de valor mais pequeno resultam numa maior suavidade.",
	"@@Speckle_Multiplicative-Noise-Mean_tag1@@": "Este parâmetro só é válido quando o <strong>Tipo de Filtro</strong> for <strong>Filtro Lee</strong> e o <strong>Modelo de Ruído</strong> for <strong>Ruído Aditivo</strong> ou <strong>Ruído Aditivo e Multiplicativo</strong>. O valor padrão é 1.",
	"@@Speckle_Noise-Model_tag0@@": "Especifica o tipo de ruído que está a reduzir a qualidade da imagem de radar:",
	"@@Speckle_Noise-Model_tag1@@": "<strong>Ruído Multiplicativo</strong>--O ruído do sinal aleatório que é multiplicado para o sinal relevante durante a captura ou transmissão",
	"@@Speckle_Noise-Model_tag3@@": "<strong>Ruído Aditivo</strong>--O ruído do sinal aleatório que é adicionado para o sinal relevante durante a captura ou transmissão",
	"@@Speckle_Noise-Model_tag5@@": "<strong>Ruído Aditivo e Multiplicativo</strong>--Ambos os modelos de ruído",
	"@@Speckle_Noise-Variance_tag0@@": "Especifica a variância do ruído da imagem de radar.",
	"@@Speckle_Noise-Variance_tag1@@": "Este parâmetro só é válido quando o <strong>Tipo de Filtro</strong> for <strong>Filtro Lee</strong> e o <strong>Modelo de Ruído</strong> for <strong>Ruído Aditivo</strong> ou <strong>Ruído Aditivo e Multiplicativo</strong>. O valor padrão é 0.25.",
	"@@Speckle_Number-of-Looks_tag0@@": "Especifica o número de aspeto da imagem, que controla a suavização da imagem e estima a variância do ruído. Um valor mais pequeno resulta numa maior suavização, enquanto um valor maior mantém mais elementos de imagem.",
	"@@Speckle_Number-of-Looks_tag1@@": "Este parâmetro só é válido quando o <strong>Tipo de Filtro</strong> for <strong>Filtro Lee</strong> e o <strong>Modelo de Ruído</strong> for <strong>Ruído Multiplicativo</strong> ou quando o <strong>Tipo de Filtro</strong> for <strong>Ruído Aditivo e Multiplicativo</strong>. O valor padrão é 1.",
	"@@Speckle_Raster_tag0@@": "O raster de entrada.",
	"@@Spectral-Conversion_Conversion-Matrix_tag0@@": "A matriz utilizada para converter o raster de entrada.",
	"@@Spectral-Conversion_Conversion-Matrix_tag1@@": "A equação utilizada para efetuar esta conversão é:",
	"@@Spectral-Conversion_Conversion-Matrix_tag2@@": "Saída Banda_R = Ponderação_P * Banda_C",
	"@@Spectral-Conversion_Conversion-Matrix_tag3@@": "Onde:",
	"@@Spectral-Conversion_Conversion-Matrix_tag4@@": "Banda_R é uma banda de saída, onde R é um número de 1 para o número de bandas de saída.",
	"@@Spectral-Conversion_Conversion-Matrix_tag5@@": "Ponderação_P é uma lista delimitada por vírgulas de ponderações, 1 para cada banda de entrada. A soma das ponderações de cada banda deve ser igual a 1.",
	"@@Spectral-Conversion_Conversion-Matrix_tag6@@": "A Banda_C é a imagem de entrada, onde C é um número de 1 para o número de bandas da imagem de entrada.",
	"@@Spectral-Conversion_Raster_tag0@@": "O raster de entrada.",
	"@@Spectral-Conversion_Raster_tag1@@": "Este pode ser um conjunto de dados raster, um conjunto de dados de mosaico ou um serviço de imagem.",
	"@@Spectral-Conversion_Size_tag0@@": "O número de linhas e de colunas em <strong>Matriz de Conversão</strong>.",
	"@@Square_Cellsize-Type_tag0@@": "Escolha qual o tamanho da célula a utilizar no raster de saída. Se todos os tamanhos da célula de entrada forem os mesmos, todas as opções irão produzir os mesmos resultados.",
	"@@Square_Cellsize-Type_tag1@@": "Primeiro De--Utiliza o primeiro tamanho da célula dos rasters de entrada.",
	"@@Square_Cellsize-Type_tag2@@": "Último De--Utiliza o último tamanho da célula dos rasters de entrada.",
	"@@Square_Cellsize-Type_tag3@@": "Máximo De--Utiliza o maior tamanho da célula de todos os rasters de entrada. Isto é por omissão.",
	"@@Square_Cellsize-Type_tag4@@": "Média De--Utiliza o tamanho da célula médio de todos os rasters de entrada.",
	"@@Square_Cellsize-Type_tag5@@": "Mín. De--Utiliza o menor tamanho da célula de todos os rasters de entrada.",
	"@@Square_Extent-Type_tag0@@": "Escolha qual a extensão que deve ser utilizada no raster de saída:",
	"@@Square_Extent-Type_tag1@@": "Primeiro De--Utiliza a extensão do primeiro raster de entrada para determinar a extensão de processamento.",
	"@@Square_Extent-Type_tag2@@": "Interseção De--Utiliza a extensão dos pixéis sobrepostos para determinar a extensão de processamento. Isto é por omissão.",
	"@@Square_Extent-Type_tag3@@": "Último De--Utiliza a extensão do último raster de entrada para determinar a extensão de processamento.",
	"@@Square_Extent-Type_tag4@@": "União De--Utiliza a extensão de todos os rasters para determinar a extensão de processamento.",
	"@@Square_Raster_tag0@@": "Os valores de entrada a elevar ao quadrado.",
	"@@Square-Root_Cellsize-Type_tag0@@": "Escolha qual o tamanho da célula a utilizar no raster de saída. Se todos os tamanhos da célula de entrada forem os mesmos, todas as opções irão produzir os mesmos resultados.",
	"@@Square-Root_Cellsize-Type_tag1@@": "Primeiro De--Utiliza o primeiro tamanho da célula dos rasters de entrada.",
	"@@Square-Root_Cellsize-Type_tag2@@": "Último De--Utiliza o último tamanho da célula dos rasters de entrada.",
	"@@Square-Root_Cellsize-Type_tag3@@": "Máximo De--Utiliza o maior tamanho da célula de todos os rasters de entrada. Isto é por omissão.",
	"@@Square-Root_Cellsize-Type_tag4@@": "Média De--Utiliza o tamanho da célula médio de todos os rasters de entrada.",
	"@@Square-Root_Cellsize-Type_tag5@@": "Mín. De--Utiliza o menor tamanho da célula de todos os rasters de entrada.",
	"@@Square-Root_Extent-Type_tag0@@": "Escolha qual a extensão que deve ser utilizada no raster de saída:",
	"@@Square-Root_Extent-Type_tag1@@": "Primeiro De--Utiliza a extensão do primeiro raster de entrada para determinar a extensão de processamento.",
	"@@Square-Root_Extent-Type_tag2@@": "Interseção De--Utiliza a extensão dos pixéis sobrepostos para determinar a extensão de processamento. Isto é por omissão.",
	"@@Square-Root_Extent-Type_tag3@@": "Último De--Utiliza a extensão do último raster de entrada para determinar a extensão de processamento.",
	"@@Square-Root_Extent-Type_tag4@@": "União De--Utiliza a extensão de todos os rasters para determinar a extensão de processamento.",
	"@@Square-Root_Raster_tag0@@": "Os valores de entrada utilizados para encontrar a raiz quadrada.",
	"@@Statistics-and-Histogram_Define-Statistics-and-Histogram_tag0@@": "Defina os valores de estatística para cada banda.",
	"@@Statistics-and-Histogram_Define-Statistics-and-Histogram_tag1@@": "A coluna ${Histogram} é um campo apenas de leitura que pode ser preenchido utilizando o parâmetro <strong>Importar</strong>. Se importar um ficheiro de histograma, a coluna ${Histogram} será marcada como <strong>Definido</strong>.",
	"@@Statistics-and-Histogram_Import_tag0@@": "Importe as estatísticas e informações do histograma de um ficheiro raster ou XML.",
	"@@Statistics-and-Histogram_Raster_tag0@@": "O raster de entrada requer que as estatísticas e o histograma sejam definidos.",
	"@@Statistics-and-Histogram_Statistics_tag0@@": "Defina os valores de estatística para cada banda.",
	"@@Stream-Link_Flow-Direction-Raster_tag0@@": "O raster de entrada que exibe a direção do fluxo a partir de cada célula.",
	"@@Stream-Link_Flow-Direction-Raster_tag1@@": "O raster de direção do fluxo pode ser criado ao executar a função de <strong>Direção do Fluxo</strong>.",
	"@@Stream-Link_Stream-Raster_tag0@@": "O raster de entrada que representa uma rede de corrente linear.",
	"@@Stream-Order_Flow-Direction-Raster_tag0@@": "O raster de entrada que exibe a direção do fluxo a partir de cada célula.",
	"@@Stream-Order_Flow-Direction-Raster_tag1@@": "O raster de direção do fluxo pode ser criado ao executar a função de <strong>Direção do Fluxo</strong>.",
	"@@Stream-Order_Order-Method_tag0@@": "O método utilizado para atribuir a encomenda de corrente.",
	"@@Stream-Order_Order-Method_tag1@@": "<strong>STRAHLER</strong>--Método de encomenda de corrente proposto por Strahler em 1952. A ordem de corrente aumenta apenas quando as correntes da mesma encomenda intersetam. A interseção de uma ligação de primeira ordem e de segunda ordem continuará a ser uma ligação de segunda ordem, em vez de criar uma ligação de terceira ordem. Isto é por omissão.",
	"@@Stream-Order_Order-Method_tag3@@": "<strong>SHREVE</strong>--O método de encomenda de corrente por magnitude, proposto por Shreve em 1967. É atribuída uma magnitude (encomenda) de um a todas as ligações sem tributários. As magnitudes são um aditivo declividade. Quando duas ligações intersetam, as suas magnitudes são adicionadas e atribuídas à ligação declividade.",
	"@@Stream-Order_Stream-Raster_tag0@@": "Um raster de corrente de entrada que representa uma rede de corrente linear.",
	"@@Stretch_Auto-Gamma_tag0@@": "Utilize <strong>Gama Automático</strong> para calcular o gama das estatísticas e histograma do conjunto de dados. As estatísticas podem ser estatísticas estimadas pela função em si ou as estatísticas podem ser estimadas pelo software se escolher uma camada.",
	"@@Stretch_Dynamic-Range-Adjustment_tag0@@": "Marque a caixa de seleção <strong>Ajustamento de Intervalo Dinâmico</strong> se pretende que as estatísticas calculadas apenas a partir dos píxeis apresentados no seu ecrã. Esta opção é geralmente aplicada quando a imagem for publicada e utilizada numa aplicação web que não pode realizar este tipo de extensão.",
	"@@Stretch_Estimate-Statistics_tag0@@": "Marque a caixa de seleção <strong>Prever Estatísticas</strong> se pretende prever as suas estatísticas. As estatísticas estimadas são calculadas de uma amostragem de 1000 a 1000 a partir do centro do raster e utilizadas pela extensão.",
	"@@Stretch_Estimate-Statistics_tag3@@": "Se isto estiver marcada e o raster tiver estatísticas, ou se introduziu valores na tabela <strong>Estatísticas</strong>, estes serão utilizados em vez de estimativas, exceto se a extensão necessitar de um histograma. Se a extensão necessitar de um histograma que não exista, este será estimado.",
	"@@Stretch_Gamma_tag0@@": "Utilize a barra de controlo de deslize para definir manualmente o valor <strong>Gama</strong>.",
	"@@Stretch_Number-Of-Standard-Deviations_tag0@@": "Especifique o valor n para o número de desvios padrão para utilizar. Este método é utilizado para realçar os valores de elementos que variam em relação ao valor médio; é melhor quando utilizado em dados normalmente distribuídos.",
	"@@Stretch_Output-Maximum_tag0@@": "Defina o valor de píxel mais elevado para o histograma.",
	"@@Stretch_Output-Maximum_tag1@@": "O <strong>Mínimo de Saída</strong> e o <strong>Máximo de Saída</strong> irão definir o intervalo de valores que serão então linearmente em extensão por contraste.",
	"@@Stretch_Output-Minimum_tag0@@": "Defina o valor de píxel mais baixo para o histograma.",
	"@@Stretch_Output-Minimum_tag1@@": "O <strong>Mínimo de Saída</strong> e o <strong>Máximo de Saída</strong> irão definir o intervalo de valores que serão então linearmente em extensão por contraste.",
	"@@Stretch_Percent-Clip-Maximum_tag0@@": "Especifique a percentagem dos valores elevados a excluir da extensão.",
	"@@Stretch_Percent-Clip-Maximum_tag1@@": "O intervalo de valores válidos vai de 0 a 99.",
	"@@Stretch_Percent-Clip-Minimum_tag0@@": "Especifique a percentagem dos valores baixos a excluir da extensão.",
	"@@Stretch_Percent-Clip-Minimum_tag1@@": "O intervalo de valores válidos vai de 0 a 99.",
	"@@Stretch_Raster_tag0@@": "O raster de entrada para a extensão de contraste.",
	"@@Stretch_Sigmoid-Strength-Level_tag0@@": "O <strong>Nível de Força</strong> determina a quantidade de função sigmoide que será utilizada na extensão. Um valor reduzido como 1 irá utilizar apenas a parte média da curva, que tende a produzir cores opacas e desbotadas. Um valor elevado como 6 irá utilizar toda a curva, que tende a produzir cores fortes e nítidas.",
	"@@Stretch_Statistics_tag0@@": "Pode introduzir as suas próprias estatísticas na caixa de diálogo. Por predefinição, as estatísticas são obtidas dos dados; no entanto, quaisquer valores que introduza neste parâmetro serão utilizados.",
	"@@Stretch_Type_tag0@@": "Escolha o método de tipo de extensão:",
	"@@Stretch_Type_tag1@@": "Nenhum--Extensão sem contraste",
	"@@Stretch_Type_tag2@@": "StdDev--Extensão do desvio padrão",
	"@@Stretch_Type_tag3@@": "MinMax--Extensão Mínima-Máxima",
	"@@Stretch_Type_tag4@@": "PercentMinMax--Extensão de recorte percentual",
	"@@Stretch_Type_tag5@@": "Sigmoid--Extensão de sigmoide",
	"@@Stretch_Use-Gamma_tag0@@": "Marque a caixa de seleção <strong>Utilizar Gama</strong> se pretende aplicar uma extensão de gama.",
	"@@Swath_Cellsize_tag0@@": "O tamanho da célula para o raster de saída será automaticamente detetado; pode alterar isto se quiser. O tamanho da célula pode ser alterado, mas a extensão do conjunto de dados raster continuará a ser a mesma.",
	"@@Swath_Interpolation-Method_tag0@@": "Existem quatro métodos de reamostragem para esta função:",
	"@@Swath_Interpolation-Method_tag1@@": "<strong>Vizinho mais Próximo</strong>--Calcula o valor do píxel utilizando o píxel mais próximo. Se não existir qualquer píxel de origem, não pode ser criado qualquer píxel novo na saída.",
	"@@Swath_Interpolation-Method_tag3@@": "<strong>Bilinear</strong>--Calcula o valor do píxel utilizando o valor de distância ponderada de quatro píxeis mais próximos.",
	"@@Swath_Interpolation-Method_tag5@@": "<strong>Simplificação Linear</strong>--Utiliza uma rede irregular triangulada a partir dos pontos centrais de cada célula no raster irregular para interpolar uma superfície que é depois convertida num raster regular.",
	"@@Swath_Interpolation-Method_tag7@@": "<strong>Vizinho Natural</strong>--Efetua uma atribuição de vizinho mais próximo; é o método mais rápido de interpolação. É utilizado principalmente para dados discretos, como uma classificação de utilização de terreno, uma vez que não irá alterar os valores das células. O erro espacial máximo terá metade do tamanho da célula.",
	"@@Swath_Raster_tag0@@": "A irregularidade do raster em grade a ser reamostrado.",
	"@@Tan_Cellsize-Type_tag0@@": "Escolha qual o tamanho da célula a utilizar no raster de saída. Se todos os tamanhos da célula de entrada forem os mesmos, todas as opções irão produzir os mesmos resultados.",
	"@@Tan_Cellsize-Type_tag1@@": "Primeiro De--Utiliza o primeiro tamanho da célula dos rasters de entrada.",
	"@@Tan_Cellsize-Type_tag2@@": "Último De--Utiliza o último tamanho da célula dos rasters de entrada.",
	"@@Tan_Cellsize-Type_tag3@@": "Máximo De--Utiliza o maior tamanho da célula de todos os rasters de entrada. Isto é por omissão.",
	"@@Tan_Cellsize-Type_tag4@@": "Média De--Utiliza o tamanho da célula médio de todos os rasters de entrada.",
	"@@Tan_Cellsize-Type_tag5@@": "Mín. De--Utiliza o menor tamanho da célula de todos os rasters de entrada.",
	"@@Tan_Extent-Type_tag0@@": "Escolha qual a extensão que deve ser utilizada no raster de saída:",
	"@@Tan_Extent-Type_tag1@@": "Primeiro De--Utiliza a extensão do primeiro raster de entrada para determinar a extensão de processamento.",
	"@@Tan_Extent-Type_tag2@@": "Interseção De--Utiliza a extensão dos pixéis sobrepostos para determinar a extensão de processamento. Isto é por omissão.",
	"@@Tan_Extent-Type_tag3@@": "Último De--Utiliza a extensão do último raster de entrada para determinar a extensão de processamento.",
	"@@Tan_Extent-Type_tag4@@": "União De--Utiliza a extensão de todos os rasters para determinar a extensão de processamento.",
	"@@Tan_Raster_tag0@@": "A entrada para a qual calcular os valores de tangente.",
	"@@TanH_Cellsize-Type_tag0@@": "Escolha qual o tamanho da célula a utilizar no raster de saída. Se todos os tamanhos da célula de entrada forem os mesmos, todas as opções irão produzir os mesmos resultados.",
	"@@TanH_Cellsize-Type_tag1@@": "Primeiro De--Utiliza o primeiro tamanho da célula dos rasters de entrada.",
	"@@TanH_Cellsize-Type_tag2@@": "Último De--Utiliza o último tamanho da célula dos rasters de entrada.",
	"@@TanH_Cellsize-Type_tag3@@": "Máximo De--Utiliza o maior tamanho da célula de todos os rasters de entrada. Isto é por omissão.",
	"@@TanH_Cellsize-Type_tag4@@": "Média De--Utiliza o tamanho da célula médio de todos os rasters de entrada.",
	"@@TanH_Cellsize-Type_tag5@@": "Mín. De--Utiliza o menor tamanho da célula de todos os rasters de entrada.",
	"@@TanH_Extent-Type_tag0@@": "Escolha qual a extensão que deve ser utilizada no raster de saída:",
	"@@TanH_Extent-Type_tag1@@": "Primeiro De--Utiliza a extensão do primeiro raster de entrada para determinar a extensão de processamento.",
	"@@TanH_Extent-Type_tag2@@": "Interseção De--Utiliza a extensão dos pixéis sobrepostos para determinar a extensão de processamento. Isto é por omissão.",
	"@@TanH_Extent-Type_tag3@@": "Último De--Utiliza a extensão do último raster de entrada para determinar a extensão de processamento.",
	"@@TanH_Extent-Type_tag4@@": "União De--Utiliza a extensão de todos os rasters para determinar a extensão de processamento.",
	"@@TanH_Raster_tag0@@": "A entrada para a qual calcular os valores de tangente hiperbólica.",
	"@@Tasseled-Cap_Raster_tag0@@": "O raster de entrada para realizar a transformação de Tasseled Cap.",
	"@@Times_Cellsize-Type_tag0@@": "Escolha qual o tamanho da célula a utilizar no raster de saída. Se todos os tamanhos da célula de entrada forem os mesmos, todas as opções irão produzir os mesmos resultados.",
	"@@Times_Cellsize-Type_tag1@@": "Primeiro De--Utiliza o primeiro tamanho da célula dos rasters de entrada.",
	"@@Times_Cellsize-Type_tag2@@": "Último De--Utiliza o último tamanho da célula dos rasters de entrada.",
	"@@Times_Cellsize-Type_tag3@@": "Máximo De--Utiliza o maior tamanho da célula de todos os rasters de entrada. Isto é por omissão.",
	"@@Times_Cellsize-Type_tag4@@": "Média De--Utiliza o tamanho da célula médio de todos os rasters de entrada.",
	"@@Times_Cellsize-Type_tag5@@": "Mín. De--Utiliza o menor tamanho da célula de todos os rasters de entrada.",
	"@@Times_Extent-Type_tag0@@": "Escolha qual a extensão que deve ser utilizada no raster de saída:",
	"@@Times_Extent-Type_tag1@@": "Primeiro De--Utiliza a extensão do primeiro raster de entrada para determinar a extensão de processamento.",
	"@@Times_Extent-Type_tag2@@": "Interseção De--Utiliza a extensão dos pixéis sobrepostos para determinar a extensão de processamento. Isto é por omissão.",
	"@@Times_Extent-Type_tag3@@": "Último De--Utiliza a extensão do último raster de entrada para determinar a extensão de processamento.",
	"@@Times_Extent-Type_tag4@@": "União De--Utiliza a extensão de todos os rasters para determinar a extensão de processamento.",
	"@@Times_Raster_tag0@@": "A entrada contém os valores a ser multiplicados.",
	"@@Times_Raster_tag1@@": "Pode ser utilizado um valor constante como entrada para este parâmetro, desde que seja especificado um raster para o outro parâmetro.",
	"@@Times_Raster2_tag0@@": "A entrada que contém os valores pelos quais a primeira entrada será multiplicada.",
	"@@Times_Raster2_tag1@@": "Pode ser utilizado um valor constante como entrada para este parâmetro, desde que seja especificado um raster para o outro parâmetro.",
	"@@Transpose-Bits_Bit-Pattern_tag0@@": "Escolha o tipo de transposição a executar ou especifique um personalizado:",
	"@@Transpose-Bits_Bit-Pattern_tag1@@": "Landsat 8: Cirro",
	"@@Transpose-Bits_Bit-Pattern_tag2@@": "Landsat 8: Nuvem",
	"@@Transpose-Bits_Bit-Pattern_tag3@@": "Landsat 8: Sombra de Nuvem",
	"@@Transpose-Bits_Bit-Pattern_tag4@@": "Landsat 8: Preenchimento Designado",
	"@@Transpose-Bits_Bit-Pattern_tag5@@": "Landsat 8: Perda de Frame",
	"@@Transpose-Bits_Bit-Pattern_tag6@@": "Landsat 8: Neve/Gelo",
	"@@Transpose-Bits_Bit-Pattern_tag7@@": "Landsat 8: Oclusão do Terreno",
	"@@Transpose-Bits_Bit-Pattern_tag8@@": "Landsat 8: Vegetação",
	"@@Transpose-Bits_Bit-Pattern_tag9@@": "Landsat 8: Água",
	"@@Transpose-Bits_Bit-Pattern_tag10@@": "Definido por Utilizador",
	"@@Transpose-Bits_Constant-Value_tag0@@": "Um valor opcional que será utilizado para preencher todos os bits que não estejam envolvidos na transposição. Este parâmetro é exposto quando o parâmetro <strong>Gerar Raster de Preenchimento a Partir de Constante</strong> é definido para <strong>Sim</strong>.",
	"@@Transpose-Bits_Fill-Raster_tag0@@": "Especifique um conjunto de dados raster a ser utilizado para preencher todos os bits que não estejam envolvidos na transposição. Este parâmetro é exposto quando o parâmetro <strong>Gerar Raster de Preenchimento a Partir de Constante</strong> é definido para <strong>Não</strong>.",
	"@@Transpose-Bits_Generate-Fill-Raster-from-Constant_tag0@@": "Gerir um raster de preenchimento que usa um valor constante:",
	"@@Transpose-Bits_Generate-Fill-Raster-from-Constant_tag1@@": "<strong>Sim</strong>--Um raster será gerado utilizando um valor constante para preencher os bits não envolvidos na transposição. Isto é por omissão.",
	"@@Transpose-Bits_Generate-Fill-Raster-from-Constant_tag3@@": "<strong>Não</strong>--Um raster será gerado utilizando valores de píxel de um conjunto de dados raster existente para preencher os bits não envolvidos na transposição.",
	"@@Transpose-Bits_Output-Bit-and-Input-Bit_tag0@@": "Uma tabela apenas de leitura que mostra os bits de saída e as entradas que estarão no seu lugar.",
	"@@Transpose-Bits_Raster_tag0@@": "O raster de entrada para desembalar e voltar a cartografar.",
	"@@Unit-Conversion_From-Unit_tag0@@": "O tipo de unidade original dos pixéis.",
	"@@Unit-Conversion_Raster_tag0@@": "O raster de entrada que irá conter as unidades convertidas.",
	"@@Unit-Conversion_To-Unit_tag0@@": "O tipo de unidade convertida dos pixéis.",
	"@@Vector-Field_Angle-Reference-System_tag0@@": "Especifica como o componente direcional foi medido.",
	"@@Vector-Field_Angle-Reference-System_tag1@@": "Geografia--0° pontos para norte e 90º pontos para leste",
	"@@Vector-Field_Angle-Reference-System_tag2@@": "Aritmética--0° pontos para leste e 90º pontos para norte",
	"@@Vector-Field_Input-Data-Type_tag0@@": "O tipo de campo de vetor que as suas entradas representam.",
	"@@Vector-Field_Input-Data-Type_tag1@@": "Desconhecido-É desconhecido se as entradas representam U-V ou Direção de Magnitude.",
	"@@Vector-Field_Input-Data-Type_tag2@@": "Os dados de entrada U-V representam os componentes U e V.",
	"@@Vector-Field_Input-Data-Type_tag3@@": "Direção de Magnitude--Os dados de entrada representam a magnitude e a direção.",
	"@@Vector-Field_Output-Data-Type_tag0@@": "Especifica o tipo de campo de vetor que a sua saída representará.",
	"@@Vector-Field_Output-Data-Type_tag1@@": "Direção de Magnitude--Os dados de saída representam a magnitude e a direção.",
	"@@Vector-Field_Output-Data-Type_tag2@@": "U-V--Os dados de saída representam os componentes U e V.",
	"@@Vector-Field_Raster1_tag0@@": "O primeiro raster de entrada.",
	"@@Vector-Field_Raster1_tag1@@": "Este será o valor U ou a magnitude.",
	"@@Vector-Field_Raster2_tag0@@": "O segundo raster de entrada.",
	"@@Vector-Field_Raster2_tag1@@": "Este será o valor V ou a direção.",
	"@@Viewshed_Analysis-Method_tag0@@": "Escolha o método através do qual a visibilidade será calculada. Esta opção permite-lhe trocar alguma precisão para um desempenho melhorado.",
	"@@Viewshed_Analysis-Method_tag1@@": "Todas as Linhas de Visão--Uma linha de visão é realizada em cada píxel no raster de modo a estabelecer áreas visíveis. Este é o método predefinido.",
	"@@Viewshed_Analysis-Method_tag2@@": "Linhas de Visão de Perímetro--As linhas de visão são realizadas apenas nos pixéis no perímetro das áreas visíveis para estabelecer áreas de visibilidade. Este método apresenta um desempenho melhor do que o método <strong>Todas as Linhas de Visão</strong> dado que menos linhas de visão são consideradas no cálculo.",
	"@@Viewshed_Analysis-Type_tag0@@": "Escolha qual o tipo de análise de visibilidade que pretende realizar, quer determine como cada célula é visível para os observadores, quer identifique para cada localização de superfície os observadores que são visíveis.",
	"@@Viewshed_Analysis-Type_tag1@@": "Frequência--O número de vezes que cada localização de píxel no raster de superfície de entrada pode ser visto pelas localizações de observação de entrada (como pontos ou vértices para elementos de observador de polilinha). Isto é por omissão.",
	"@@Viewshed_Analysis-Type_tag2@@": "Observadores---A saída identifica exatamente quais os pontos de observador visíveis a partir de cada localização da superfície de raster. O número máximo permitido de exames de observadores de entrada é 32 com este tipo de análise.",
	"@@Viewshed_Horizontal-End-Angle_tag0@@": "Este valor define o ângulo final do intervalo de digitalização horizontal. O valor deve ser especificado em graus de 0 a 360.0, onde 0 está orientado para o norte. O valor padrão é 360.0.",
	"@@Viewshed_Horizontal-End-Angle_tag1@@": "Pode ser um campo no conjunto de dados de entrada <strong>Elementos de Observadores</strong> ou um valor numérico de entrada. Se este parâmetro for definido para um valor, esse valor será aplicado a todos os observadores. Para especificar valores diferentes para cada observador, defina este parâmetro para um campo no conjunto de dados <strong>Elementos de Observadores</strong>.",
	"@@Viewshed_Horizontal-Start-Angle_tag0@@": "Este valor define o ângulo inicial do intervalo de digitalização horizontal. O valor deve ser especificado em graus de 0 a 360.0, onde 0 está orientado para o norte. O valor padrão é 0.",
	"@@Viewshed_Horizontal-Start-Angle_tag1@@": "Pode ser um campo no conjunto de dados de entrada <strong>Elementos de Observadores</strong> ou um valor numérico de entrada. Se este parâmetro for definido para um valor, esse valor será aplicado a todos os observadores. Para especificar valores diferentes para cada observador, defina este parâmetro para um campo no conjunto de dados <strong>Elementos de Observadores</strong>.",
	"@@Viewshed_Inner-Radius-is-3D-Distance_tag0@@": "Tipo de distância para o parâmetro do raio interior.",
	"@@Viewshed_Inner-Radius-is-3D-Distance_tag1@@": "Desmarcado--<strong>Raio Interior</strong> deve ser interpretado como uma distância 2D. Isto é por omissão.",
	"@@Viewshed_Inner-Radius-is-3D-Distance_tag4@@": "Marcado--<strong>Raio Interior</strong> deve ser interpretado como uma distância 3D.",
	"@@Viewshed_Inner-Radius_tag0@@": "Este valor define a distância inicial (mínima) a partir da qual a visibilidade é determinada. Os píxeis mais próximos desta distância são considerados não visíveis na saída, mas podem ainda bloquear a visibilidade dos píxeis entre o <strong>Raio Interior</strong> e o <strong>Raio Exterior</strong>. O valor padrão é 0.",
	"@@Viewshed_Inner-Radius_tag5@@": "Pode ser um campo no conjunto de dados de entrada <strong>Elementos de Observadores</strong> ou um valor numérico de entrada. Se este parâmetro for definido para um valor, esse valor será aplicado a todos os observadores. Para especificar valores diferentes para cada observador, defina este parâmetro para um campo no conjunto de dados <strong>Elementos de Observadores</strong>.",
	"@@Viewshed_Observer-Elevation_tag0@@": "Este valor é utilizado para definir as elevações de superfície dos pontos do observador ou vértices.",
	"@@Viewshed_Observer-Elevation_tag1@@": "Pode ser um campo no conjunto de dados de entrada <strong>Elementos de Observadores</strong> ou um valor numérico de entrada. Se este parâmetro não for especificado, será obtida a elevação do observador do raster de superfície utilizando a interpolação bilinear. Se este parâmetro for definido para um valor, então esse valor será aplicado a todos os observadores. Para especificar valores diferentes para cada observador, defina este parâmetro para um campo no conjunto de dados <strong>Elementos de Observadores</strong>.",
	"@@Viewshed_Observer-Features_tag0@@": "A classe de elementos de entrada necessária que identifica as localizações do observador. Podem ser elementos de ponto, multiponto ou polilinha.",
	"@@Viewshed_Observer-Features_tag1@@": "A classe de elementos de entrada é transformada num sistema de coordenadas geocêntricas 3D durante o cálculo de visibilidade. Os observadores fora da extensão do raster de superfície, ou localizados em células NoData, serão ignorados no cálculo.",
	"@@Viewshed_Observer-Offset_tag0@@": "Este valor indica uma distância vertical (em unidades de superfície) a ser adicionada à elevação do observador. Deve ser um número inteiro positivo ou ponto flutuante.",
	"@@Viewshed_Observer-Offset_tag1@@": "Pode ser um campo no conjunto de dados de entrada <strong>Elementos de Observadores</strong> ou um valor numérico de entrada. Se este parâmetro for definido para um valor, esse valor será aplicado a todos os observadores. Para especificar valores diferentes para cada observador, defina este parâmetro para um campo no conjunto de dados <strong>Elementos de Observadores</strong>.",
	"@@Viewshed_Outer-Radius-is-3D-Distance_tag0@@": "Tipo de distância para o parâmetro do raio exterior.",
	"@@Viewshed_Outer-Radius-is-3D-Distance_tag1@@": "Desmarcado--<strong>Raio Exterior</strong> deve ser interpretado como uma distância 2D. Isto é por omissão.",
	"@@Viewshed_Outer-Radius-is-3D-Distance_tag4@@": "Marcado--<strong>Raio Exterior</strong> deve ser interpretado como uma distância 3D.",
	"@@Viewshed_Outer-Radius_tag0@@": "Este valor define a distância máxima a partir da qual a visibilidade é determinada. Os pixéis para além desta distância são excluídos da análise.",
	"@@Viewshed_Outer-Radius_tag1@@": "Pode ser um campo no conjunto de dados de entrada <strong>Elementos de Observadores</strong> ou um valor numérico de entrada. Se este parâmetro for definido para um valor, esse valor será aplicado a todos os observadores. Para especificar valores diferentes para cada observador, defina este parâmetro para um campo no conjunto de dados <strong>Elementos de Observadores</strong>.",
	"@@Viewshed_Raster_tag0@@": "O raster de superfície de entrada necessário. Pode ser um número inteiro ou um raster de ponto flutuante.",
	"@@Viewshed_Raster_tag1@@": "A entrada é transformada num sistema de coordenadas geocêntricas 3D durante o cálculo de visibilidade. As células NoData no raster de entrada não bloqueiam a determinação de visibilidade.",
	"@@Viewshed_Refractive-Coefficient_tag0@@": "Coeficiente da refração de luz visível no ar.",
	"@@Viewshed_Refractive-Coefficient_tag1@@": "O valor padrão é 0.13.",
	"@@Viewshed_Surface-Offset_tag0@@": "Este valor indica uma distância vertical (em unidades de superfície) a adicionar ao valor z de cada píxel-alvo, uma vez que é considerado para visibilidade. Deve ser um número inteiro positivo ou ponto flutuante.",
	"@@Viewshed_Surface-Offset_tag1@@": "Pode ser um campo no conjunto de dados de entrada <strong>Elementos de Observadores</strong> ou um valor numérico de entrada. Se este parâmetro for definido para um valor, esse valor será aplicado a todos os observadores. Para especificar valores diferentes para cada observador, defina este parâmetro para um campo no conjunto de dados <strong>Elementos de Observadores</strong>.",
	"@@Viewshed_Vertical-Error_tag0@@": "A quantidade de incerteza, medida como erro de Erro Médio Quadrático (RMSE), nos valores de elevação de superfície. É um valor de ponto flutuante que representa o erro esperado dos valores de elevação de entrada. Quando este parâmetro for atribuído um valor superior a 0, o raster de visibilidade de saída será um ponto flutuante. Neste caso, cada valor de píxel no raster de visibilidade de saída representa a soma de probabilidades para a qual a célula é visível para qualquer um dos observadores.",
	"@@Viewshed_Vertical-Error_tag1@@": "Quando o <strong>Tipo de Análise</strong> for <strong>Observadores</strong> ou o <strong>Método de Análise</strong> for <strong>Linhas de Visão de Perímetro</strong>, este parâmetro é desativado.",
	"@@Viewshed_Vertical-Lower-Angle_tag0@@": "Este valor define o limite do ângulo vertical inferior da digitalização abaixo de um plano horizontal. O valor deve ser especificado em graus de -90.0 a 0, que podem ser um número inteiro ou ponto flutuante. O valor padrão é -90.0.",
	"@@Viewshed_Vertical-Lower-Angle_tag1@@": "Pode ser um campo no conjunto de dados de entrada <strong>Elementos de Observadores</strong> ou um valor numérico de entrada. Se este parâmetro for definido para um valor, esse valor será aplicado a todos os observadores. Para especificar valores diferentes para cada observador, defina este parâmetro para um campo no conjunto de dados <strong>Elementos de Observadores</strong>.",
	"@@Viewshed_Vertical-Upper-Angle_tag0@@": "Este valor define o limite do ângulo vertical superior da digitalização acima de um plano horizontal. O valor deve ser especificado em graus de 0 a 90.0, podendo ser um número inteiro ou ponto flutuante. O valor padrão é 90.0.",
	"@@Viewshed_Vertical-Upper-Angle_tag1@@": "Pode ser um campo no conjunto de dados de entrada <strong>Elementos de Observadores</strong> ou um valor numérico de entrada. Se este parâmetro for definido para um valor, esse valor será aplicado a todos os observadores. Para especificar valores diferentes para cada observador, defina este parâmetro para um campo no conjunto de dados <strong>Elementos de Observadores</strong>.",
	"@@Watershed_Flow-Direction-Raster_tag0@@": "O raster de entrada que exibe a direção do fluxo a partir de cada célula.",
	"@@Watershed_Flow-Direction-Raster_tag1@@": "O raster de direção do fluxo pode ser criado ao executar a função de <strong>Direção do Fluxo</strong>.",
	"@@Watershed_Pour-Point(s)-Raster_tag0@@": "Os locais de pontos de escoamento de entrada",
	"@@Watershed_Pour-Point(s)-Raster_tag1@@": "Este raster representa células acima cuja área contribuinte, ou captação, será determinada. Todas as células que não sejam NoData serão utilizadas como células de origem.",
	"@@Watershed_Pour-Point-Field_tag0@@": "O campo utilizado para atribuir valores às localizações de ponto de escoamento.",
	"@@Watershed_Pour-Point-Field_tag1@@": "Para um conjunto de dados de ponto de escoamento de raster, ${Value} é usado por predefinição.",
	"@@Weighted-Overlay_Cellsize-Type_tag0@@": "Escolha qual o tamanho da célula a utilizar no raster de saída. Se todos os tamanhos da célula de entrada forem os mesmos, todas as opções irão produzir os mesmos resultados.",
	"@@Weighted-Overlay_Cellsize-Type_tag1@@": "Primeiro De--Utiliza o primeiro tamanho da célula dos rasters de entrada.",
	"@@Weighted-Overlay_Cellsize-Type_tag2@@": "Mín. De--Utiliza o menor tamanho da célula de todos os rasters de entrada.",
	"@@Weighted-Overlay_Cellsize-Type_tag3@@": "Máximo De--Utiliza o maior tamanho da célula de todos os rasters de entrada. Isto é por omissão.",
	"@@Weighted-Overlay_Cellsize-Type_tag4@@": "Média De--Utiliza o tamanho da célula médio de todos os rasters de entrada.",
	"@@Weighted-Overlay_Cellsize-Type_tag5@@": "Último De--Utiliza o último tamanho da célula dos rasters de entrada.",
	"@@Weighted-Overlay_Extent-Type_tag0@@": "Escolha qual a extensão que deve ser utilizada no raster de saída:",
	"@@Weighted-Overlay_Extent-Type_tag1@@": "Primeiro De--Utiliza a extensão do primeiro raster de entrada para determinar a extensão de processamento.",
	"@@Weighted-Overlay_Extent-Type_tag2@@": "Interseção De--Utiliza a extensão dos pixéis sobrepostos para determinar a extensão de processamento. Isto é por omissão.",
	"@@Weighted-Overlay_Extent-Type_tag3@@": "União De--Utiliza a extensão de todos os rasters para determinar a extensão de processamento.",
	"@@Weighted-Overlay_Extent-Type_tag4@@": "Último De--Utiliza a extensão do último raster de entrada para determinar a extensão de processamento.",
	"@@Weighted-Overlay_Scales_tag0@@": "O intervalo para os novos valores através dos quais voltar a cartografar os valores antigos.",
	"@@Weighted-Overlay_Weighted-Overlay-Table_tag0@@": "A tabela de sobreposição ponderada consiste em quatro partes:",
	"@@Weighted-Overlay_Weighted-Overlay-Table_tag1@@": "Camada--Todos os rasters de entrada devem ser de tipo número inteiro.",
	"@@Weighted-Overlay_Weighted-Overlay-Table_tag2@@": "Influência--Cada raster de entrada é ponderado de acordo com a sua importância ou influência, como uma percentagem relativa. A soma das ponderações de influência percentual tem de ser igual a 100 e cada peso deve ser especificado em valores inteiros.",
	"@@Weighted-Overlay_Weighted-Overlay-Table_tag3@@": "Campo--Um campo de número inteiro ou string no raster de entrada para utilizar para ponderação.",
	"@@Weighted-Overlay_Weighted-Overlay-Table_tag4@@": "Tabela Voltar a Cartografar--Cada valor de um raster de entrada é atribuído a um novo valor de escala com base na tabela voltar a cartografar. O valor de escala pode ser um valor válido ou um valor NoData.",
	"@@Weighted-Sum_Cellsize-Type_tag0@@": "Escolha qual o tamanho da célula a utilizar no raster de saída. Se todos os tamanhos da célula de entrada forem os mesmos, todas as opções irão produzir os mesmos resultados.",
	"@@Weighted-Sum_Cellsize-Type_tag1@@": "Primeiro De--Utiliza o primeiro tamanho da célula dos rasters de entrada.",
	"@@Weighted-Sum_Cellsize-Type_tag2@@": "Último De--Utiliza o último tamanho da célula dos rasters de entrada.",
	"@@Weighted-Sum_Cellsize-Type_tag3@@": "Máximo De--Utiliza o maior tamanho da célula de todos os rasters de entrada. Isto é por omissão.",
	"@@Weighted-Sum_Cellsize-Type_tag4@@": "Média De--Utiliza o tamanho da célula médio de todos os rasters de entrada.",
	"@@Weighted-Sum_Cellsize-Type_tag5@@": "Mín. De--Utiliza o menor tamanho da célula de todos os rasters de entrada.",
	"@@Weighted-Sum_Extent-Type_tag0@@": "Escolha qual a extensão que deve ser utilizada no raster de saída:",
	"@@Weighted-Sum_Extent-Type_tag1@@": "Primeiro De--Utiliza a extensão do primeiro raster de entrada para determinar a extensão de processamento.",
	"@@Weighted-Sum_Extent-Type_tag2@@": "Interseção De--Utiliza a extensão dos pixéis sobrepostos para determinar a extensão de processamento. Isto é por omissão.",
	"@@Weighted-Sum_Extent-Type_tag3@@": "Último De--Utiliza a extensão do último raster de entrada para determinar a extensão de processamento.",
	"@@Weighted-Sum_Extent-Type_tag4@@": "União De--Utiliza a extensão de todos os rasters para determinar a extensão de processamento.",
	"@@Weighted-Sum_Weighted-Sum-Table_tag0@@": "A tabela de soma ponderada é definida por três propriedades:",
	"@@Weighted-Sum_Weighted-Sum-Table_tag1@@": "Camada--O raster a ser ponderado.",
	"@@Weighted-Sum_Weighted-Sum-Table_tag2@@": "Campo--O campo do raster a usar para ponderação.",
	"@@Weighted-Sum_Weighted-Sum-Table_tag3@@": "Peso-O valor da ponderação através do qual pode multiplicar o raster. Pode ser qualquer valor decimal positivo ou negativo.",
	"@@Wind-Chill_Temperature-Raster_tag0@@": "Um raster de banda única onde os valores de píxel representam a temperatura ambiente do ar.",
	"@@Wind-Chill_Temperature-Units_tag0@@": "A unidade de medição associada ao raster de temperatura de entrada. As unidades de entrada disponíveis são Celsius, Fahrenheit e Kelvin.",
	"@@Wind-Chill_Wind-Chill-Units_tag0@@": "A unidade de medição associada ao raster de saída. As unidades de saída disponíveis são Celsius, Fahrenheit e Kelvin.",
	"@@Wind-Chill_Wind-Speed-Raster_tag0@@": "Um raster de banda única onde os valores de píxel representam a velocidade do vento.",
	"@@Wind-Chill_Wind-Speed-Units_tag0@@": "Define a unidade de medição para o raster de velocidade do vento:",
	"@@Wind-Chill_Wind-Speed-Units_tag1@@": "Milhas Por Hora (mph)",
	"@@Wind-Chill_Wind-Speed-Units_tag2@@": "Quilómetros Por Hora (km/h)",
	"@@Wind-Chill_Wind-Speed-Units_tag3@@": "Metros Por Segundo (m/s)",
	"@@Wind-Chill_Wind-Speed-Units_tag4@@": "Pés Por Segundo (pés/s)",
	"@@Wind-Chill_Wind-Speed-Units_tag5@@": "Nós (kn)",
	"@@Zonal-Remap_Background-Value_tag0@@": "O valor de píxel inicial do raster de saída, antes de voltar a cartografar os pixéis de entrada.",
	"@@Zonal-Remap_Default-Output-Value_tag0@@": "O valor que será atribuído a um píxel que não cumpre qualquer uma das condições definidas na <strong>Tabela de Atributos Zonais</strong>.",
	"@@Zonal-Remap_Default-Output-Value_tag3@@": "Este será também o valor do píxel de saída se o parâmetro <strong>Nome de Campo de Valor de Saída</strong> for deixado não especificado ou o valor de saída do limiar de zona correspondente for deixado não especificado na <strong>Tabela de Atributos Zonais</strong>.",
	"@@Zonal-Remap_Maximum-Value-Field-Name_tag0@@": "O nome de campo que contém o valor máximo abaixo do qual um píxel de entrada voltar a cartografar.",
	"@@Zonal-Remap_Maximum-Value-Field-Name_tag1@@": "Se não especificado, ou se o valor de campo for nulo, os valores de píxel não são testados para o máximo.",
	"@@Zonal-Remap_Minimum-Value-Field-Name_tag0@@": "O nome de campo que contém o valor mínimo acima do qual um píxel de entrada voltar a cartografar.",
	"@@Zonal-Remap_Minimum-Value-Field-Name_tag1@@": "Se não for especificado, ou se o valor de campo for nulo, os valores de píxel não são testados para o mínimo.",
	"@@Zonal-Remap_Output-Value-Field-Name_tag0@@": "O nome de campo que contém o valor-alvo para o qual um píxel de entrada voltar a cartografar.",
	"@@Zonal-Remap_Output-Value-Field-Name_tag1@@": "Se não for especificado, ou se o valor de campo for nulo, os valores de píxel voltam a ser cartografados são definidos para <strong>Valor de Saída Padrão</strong>.",
	"@@Zonal-Remap_Value-Raster_tag0@@": "Uma entrada raster de banda única necessária com valores de píxel para voltar a cartografar.",
	"@@Zonal-Remap_Where-Clause_tag0@@": "Uma consulta opcional é aplicada na <strong>Tabela de Atributos Zonais</strong>.",
	"@@Zonal-Remap_Where-Clause_tag3@@": "Se utilizasse a tabela acima como exemplo, a consulta seria ${Variable1 = 'bare earth' AND Variable2 = 'California'}.",
	"@@Zonal-Remap_Zonal-Attributes-Table_tag0@@": "Uma tabela de entrada necessária contendo pelo menos três campos. Tem de ter um valor limite mínimo, valor limite máximo e valor-alvo. O valor-alvo é o campo que irá conter o valor a voltar a cartografar.",
	"@@Zonal-Remap_Zonal-Attributes-Table_tag1@@": "O formato do ficheiro pode ser uma classe de elementos, serviço de elementos ou qualquer tipo de tabela que suporte ArcGIS.",
	"@@Zonal-Remap_Zone-Field_tag0@@": "O nome do campo na <strong>Tabela de Atributos Zonais</strong> que contém os valores de ID da zona.",
	"@@Zonal-Remap_Zone-Field_tag3@@": "Os valores ID da zona estão diretamente associados aos ID da zona no seu raster de zona. Proporcionam outro nível de filtragem quando voltam a ser cartografados. Se não existir nenhum ID da zona associado a um registo específico na tabela, este não irá participar ao voltar a cartografar.",
	"@@Zonal-Remap_Zone-Raster_tag0@@": "Um raster de banda única onde cada píxel define zonas associadas a uma localização específica. Uma zona é definida como sendo todas as áreas na entrada que possuem o mesmo valor. As áreas não têm de ser contíguas.",
	"@@Predict-Using-Trend_dimensiondefinition_tag0@@": "Especifica o método utilizado para fornecer valores de dimensão de previsão.",
	"@@Predict-Using-Trend_dimensiondefinition_tag1@@": "<strong>Por Valor</strong>--A previsão será calculada para um valor de dimensão única. Por exemplo, pretende prever a precipitação anual para os anos 2050, 2100 e 2150. Isto é por omissão.",
	"@@Predict-Using-Trend_dimensiondefinition_tag2@@": "<strong>Por Intervalo</strong>--A previsão será calculada para um intervalo da dimensão definida por um valor inicial e um valor final. Por exemplo, pretende prever a precipitação anual para cada ano entre 2050 e 2150.",
	"@@Predict-Using-Trend_end_tag0@@": "A data de fim, altura ou profundidade do intervalo de dimensão a utilizar na previsão.",
	"@@Predict-Using-Trend_end_tag1@@": "Este parâmetro é necessário quando o parâmetro <strong>Definição de Dimensão</strong> é definido para <strong>Por Intervalo</strong>.",
	"@@Predict-Using-Trend_raster_tag0@@": "O raster de tendência multidimensional de entrada da função <strong>Gerar Tendência</strong>.",
	"@@Predict-Using-Trend_start_tag0@@": "A data de início, altura ou profundidade do intervalo de dimensão a utilizar na previsão.",
	"@@Predict-Using-Trend_start_tag1@@": "Este parâmetro é necessário quando o parâmetro <strong>Definição de Dimensão</strong> é definido para <strong>Por Intervalo</strong>.",
	"@@Predict-Using-Trend_unit_tag0@@": "A unidade que será utilizada para o intervalo de valor. Este parâmetro só se aplica quando a dimensão da análise é uma dimensão temporal.",
	"@@Predict-Using-Trend_unit_tag1@@": "<strong>Horas</strong>--A previsão será calculada para cada hora no intervalo de tempo descrito pelos parâmetros <strong>Início</strong>, <strong>Fim</strong> e <strong>Intervalo de Valor</strong>.",
	"@@Predict-Using-Trend_unit_tag2@@": "<strong>Dias</strong>--A previsão será calculada para cada dia no intervalo de tempo descrito pelos parâmetros <strong>Início</strong>, <strong>Fim</strong> e <strong>Intervalo de Valor</strong>.",
	"@@Predict-Using-Trend_unit_tag3@@": "<strong>Semanas</strong>--A previsão será calculada para cada semana no intervalo de tempo descrito pelos parâmetros <strong>Início</strong>, <strong>Fim</strong> e <strong>Intervalo de Valor</strong>.",
	"@@Predict-Using-Trend_unit_tag4@@": "<strong>Meses</strong>--A previsão será calculada para cada mês no intervalo de tempo descrito pelos parâmetros <strong>Início</strong>, <strong>Fim</strong> e <strong>Intervalo de Valor</strong>.",
	"@@Predict-Using-Trend_unit_tag5@@": "<strong>Anos</strong>--A previsão será calculada para cada ano no intervalo de tempo descrito pelos parâmetros <strong>Início</strong>, <strong>Fim</strong> e <strong>Intervalo de Valor</strong>.",
	"@@Predict-Using-Trend_valueinterval_tag0@@": "O número de passos entre dois valores de dimensão a incluir na previsão. O valor padrão é 1.",
	"@@Predict-Using-Trend_valueinterval_tag1@@": "Este parâmetro é necessário quando o parâmetro <strong>Definição de Dimensão</strong> é definido para <strong>Por Intervalo</strong>.",
	"@@Predict-Using-Trend_values_tag0@@": "O valor ou valores de dimensão a utilizar na previsão.",
	"@@Predict-Using-Trend_values_tag1@@": "O formato dos valores de tempo, profundidade e altura deve corresponder ao formato dos valores de dimensão utilizados para gerar o raster de tendência. Se o raster de tendência foi gerado para a dimensão StdTime, o formato deve ser YYYY-MM-DDTHH:MM:SS, por exemplo, 2050-01-01T00:00:00. Os valores múltiplos são separados com ponto e vírgula.",
	"@@Process-Raster-Collection_aggregationfunction_tag0@@": "Especifique o modelo da função raster utilizada para agregar várias secções em menos secções ou numa única secção.",
	"@@Process-Raster-Collection_dimension_tag0@@": "Dimensão de agregação. Esta é a dimensão ao longo da qual as variáveis serão agregadas.",
	"@@Process-Raster-Collection_itemfunction_tag0@@": "Especifique o modelo da função raster utilizada para processar cada secção ou item da coleção de raster de entrada.",
	"@@Process-Raster-Collection_keywordinterval_tag0@@": "Especifica o intervalo de palavras-chave que será utilizado durante a agregação ao longo da dimensão. Este parâmetro é necessário quando o <strong>Tipo</strong> é definido para <strong>Palavra-chave de Intervalo</strong> e a agregação deve ser feita ao longo do tempo.",
	"@@Process-Raster-Collection_keywordinterval_tag1@@": "<strong>De hora a hora</strong>--Os valores dos dados serão agregados em etapas temporais horárias e o resultado incluirá todas as horas na série de tempo.",
	"@@Process-Raster-Collection_keywordinterval_tag2@@": "<strong>Diariamente</strong>--Os valores dos dados serão agregados em etapas temporais diárias e o resultado incluirá todos os dias na série de tempo.",
	"@@Process-Raster-Collection_keywordinterval_tag3@@": "<strong>Semanalmente</strong>--Os valores dos dados serão agregados em etapas temporais semanais e o resultado incluirá todas as semanas na série de tempo.",
	"@@Process-Raster-Collection_keywordinterval_tag4@@": "<strong>A cada 10 dias</strong>--Os valores dos dados serão agregados em 3 períodos de 10 dias cada. O último período pode conter mais ou menos que 10 dias. O resultado incluirá 3 secções para cada mês.",
	"@@Process-Raster-Collection_keywordinterval_tag5@@": "<strong>A cada 5 dias</strong>--Os valores dos dados serão agregados em 6 períodos de 5 dias cada. O último período pode conter mais ou menos que 5 dias. O resultado incluirá 6 secções para cada mês.",
	"@@Process-Raster-Collection_keywordinterval_tag6@@": "<strong>Mensalmente</strong>--Os valores dos dados serão agregados em etapas temporais mensais e o resultado incluirá todos os meses na série de tempo.",
	"@@Process-Raster-Collection_keywordinterval_tag7@@": "<strong>Trimestralmente</strong>--Os valores dos dados serão agregados em etapas temporais trimestrais e o resultado incluirá todos os trimestres na série de tempo.",
	"@@Process-Raster-Collection_keywordinterval_tag8@@": "<strong>Anualmente</strong>--Os valores dos dados serão agregados em etapas temporais anuais e o resultado incluirá todos os anos na série de tempo.",
	"@@Process-Raster-Collection_keywordinterval_tag9@@": "<strong>Diariamente Recorrente</strong>--Os valores dos dados serão agregados em etapas temporais diárias e o resultado incluirá um valor agregado por dia juliano. O resultado incluirá, no máximo, 366 secções de tempo diárias.",
	"@@Process-Raster-Collection_keywordinterval_tag10@@": "<strong>Semanalmente Recorrente</strong>--Os valores dos dados serão agregados em etapas temporais semanais e o resultado incluirá um valor agregado por semana. O resultado incluirá, no máximo, 53 secções de tempo semanais.",
	"@@Process-Raster-Collection_keywordinterval_tag11@@": "<strong>Mensalmente Recorrente</strong>--Os valores dos dados serão agregados em etapas temporais mensais e o resultado incluirá um valor agregado por mês. O resultado incluirá, no máximo, 12 secções de tempo mensais.",
	"@@Process-Raster-Collection_keywordinterval_tag12@@": "<strong>Trimestralmente Recorrente</strong>--Os valores dos dados serão agregados em etapas temporais trimestrais e o resultado incluirá um valor agregado por trimestre. O resultado incluirá, no máximo, 4 secções de tempo trimestrais.",
	"@@Process-Raster-Collection_maximumvalue_tag0@@": "O valor máximo para um intervalo.",
	"@@Process-Raster-Collection_maximumvalue_tag1@@": "Este parâmetro é necessário quando o parâmetro <strong>Tipo</strong> é definido para <strong>Intervalos</strong>.",
	"@@Process-Raster-Collection_minimumvalue_tag0@@": "O valor mínimo para um intervalo.",
	"@@Process-Raster-Collection_minimumvalue_tag1@@": "Este parâmetro é necessário quando o parâmetro <strong>Tipo</strong> é definido para <strong>Intervalos</strong>.",
	"@@Process-Raster-Collection_processingfunction_tag0@@": "Especifique o modelo da função raster utilizada para apresentar a camada de raster processada.",
	"@@Process-Raster-Collection_rastercollection_tag0@@": "O raster multidimensional de entrada, a camada de mosaico ou o conjunto de dados de mosaico.",
	"@@Process-Raster-Collection_type_tag0@@": "Especifica o intervalo de dimensão para o qual os dados serão agregados.",
	"@@Process-Raster-Collection_type_tag1@@": "<strong>Todos</strong>--Os valores dos dados serão agregados em todas as secções. Isto é por omissão.",
	"@@Process-Raster-Collection_type_tag2@@": "<strong>Palavra-chave de Intervalo</strong>--Os dados das variáveis serão agregados utilizando um intervalo normalmente conhecido.",
	"@@Process-Raster-Collection_type_tag3@@": "<strong>Intervalos</strong>--Os dados das variáveis serão agregados entre pares especificados de valores ou datas.",
	"@@Process-Raster-Collection_type_tag4@@": "<strong>Valores de Intervalo</strong>--Os dados das variáveis serão agregados utilizando um intervalo e unidade especificados pelo utilizador.",
	"@@Process-Raster-Collection_unit_tag0@@": "A unidade que será utilizado para o valor de intervalo. Este parâmetro é necessário quando o parâmetro <strong>Dimensão</strong> é um campo de tempo e o parâmetro <strong>Tipo</strong> é definido para <strong>Valor de Intervalo</strong>.",
	"@@Process-Raster-Collection_unit_tag1@@": "Se estiver a agregar algo que não tempo, esta opção não estará disponível e a unidade para o valor de intervalo irá corresponder à unidade da variável dos dados raster multidimensional introduzidos.",
	"@@Process-Raster-Collection_unit_tag2@@": "<strong>Horas</strong>--Os valores de dados serão agregados em secções de tempo horárias no intervalo fornecido.",
	"@@Process-Raster-Collection_unit_tag3@@": "<strong>Dias</strong>--Os valores de dados serão agregados em secções de tempo diárias no intervalo fornecido.",
	"@@Process-Raster-Collection_unit_tag4@@": "<strong>Semanas</strong>--Os valores de dados serão agregados em secções de tempo semanais no intervalo fornecido.",
	"@@Process-Raster-Collection_unit_tag5@@": "<strong>Meses</strong>--Os valores de dados serão agregados em secções de tempo mensais no intervalo fornecido.",
	"@@Process-Raster-Collection_unit_tag6@@": "<strong>Anos</strong>--Os valores de dados serão agregados em secções de tempo anuais no intervalo fornecido.",
	"@@Process-Raster-Collection_valueinterval_tag0@@": "O tamanho do intervalo que será utilizado para a agregação. Este parâmetro é necessário quando o parâmetro <strong>Tipo</strong> é definido para <strong>Valor de Intervalo</strong>.",
	"@@Process-Raster-Collection_valueinterval_tag1@@": "Por exemplo, para agregar 30 anos de dados de temperatura mensais em incrementos de 5 anos, introduza 5 como <strong>Intervalo de Valor</strong> e especifique <strong>Unidade</strong> como <strong>Anos</strong>.",
	"@@Linear-Spectral-Unmixing_non-negative_tag0@@": "Especifica as opções para definir os valores de píxel de entrada.",
	"@@Linear-Spectral-Unmixing_non-negative_tag1@@": "Marcado--Não existirão valores de saída negativos.",
	"@@Linear-Spectral-Unmixing_non-negative_tag2@@": "Desmarcado--Podem existir valores negativos de cobertura fracionária do solo.",
	"@@Linear-Spectral-Unmixing_raster_tag0@@": "O raster de entrada.",
	"@@Linear-Spectral-Unmixing_spectralprofile_tag0@@": "O ficheiro de perfil espetral de entrada.",
	"@@Linear-Spectral-Unmixing_spectralprofiletype_tag0@@": "A informação espetral para as diferentes classes de cobertura do solo.",
	"@@Linear-Spectral-Unmixing_spectralprofiletype_tag1@@": "<strong>Perfil Espetral</strong>--Um ficheiro de definição de classificador (${.ecd}), gerado a partir da ferramenta <strong><strong>Preparar Classificador de Máxima Verosimilhança</strong></strong> ou um ficheiro JavaScript Object Notation (${.json}) que contém os perfis espetrais das classes.",
	"@@Linear-Spectral-Unmixing_spectralprofiletype_tag2@@": "<strong>Elemento de Treino</strong>--Elementos de polígono ou uma classe de elemento de amostras de treino, gerados a partir do <strong>Gestor de Amostras de Treino</strong>.",
	"@@Linear-Spectral-Unmixing_sumtoone_tag0@@": "Especifica as opções para definir os valores de píxel de entrada.",
	"@@Linear-Spectral-Unmixing_sumtoone_tag1@@": "Marcado--Os valores de classe para cada píxel são fornecidos em formato decimal com a soma de todas as classes iguais a 1. Por exemplo, Classe1 = 0,16; Classe2 = 0,24; Classe3 = 0,60.",
	"@@Linear-Spectral-Unmixing_sumtoone_tag2@@": "Desmarcado--A soma de todas as classes num píxel pode exceder 1.",
	"@@Linear-Spectral-Unmixing_trainingfeature_tag0@@": "O ficheiro de elementos de treino de entrada.",
	"@@Aggregate_aggregationtechnique_tag0@@": "O método utilizado para agregação. Os valores das células de entrada englobados pelas células de saída menos precisas são agregados por uma das seguintes estatísticas:",
	"@@Aggregate_aggregationtechnique_tag1@@": "<strong>Soma</strong>--O total das células de entrada. Isto é por omissão.",
	"@@Aggregate_aggregationtechnique_tag2@@": "<strong>Máximo</strong>--O maior valor das células de entrada.",
	"@@Aggregate_aggregationtechnique_tag3@@": "<strong>Média</strong>--O valor médio das células de entrada.",
	"@@Aggregate_aggregationtechnique_tag4@@": "<strong>Mediano</strong>--O valor mediano das células de entrada.",
	"@@Aggregate_aggregationtechnique_tag5@@": "<strong>Mínimo</strong>--O menor valor das células de entrada.",
	"@@Aggregate_cellfactor_tag0@@": "O fator pelo qual se pode multiplicar o tamanho da célula do raster de entrada.",
	"@@Aggregate_cellfactor_tag1@@": "Por exemplo, um valor do fator de célula de três resultaria num tamanho de célula de saída três vezes maior do que o do raster de entrada.",
	"@@Aggregate_expandextentifneeded_tag0@@": "Define como lidar com os limites do raster de entrada quando as suas linhas ou colunas não são um múltiplo do fator de célula.",
	"@@Aggregate_expandextentifneeded_tag1@@": "Marcado--Expande os limites superior ou direito do raster de entrada de modo que o número total de células numa linha ou coluna seja um múltiplo do fator de célula. Com esta opção, o raster de saída pode cobrir uma extensão espacial maior do que o raster de entrada. Isto é por omissão.",
	"@@Aggregate_expandextentifneeded_tag2@@": "Desmarcado--Diminui o número de linhas ou colunas no raster de saída. Isto trunca as restantes células no limite superior ou direito do raster de entrada, tornando o número de linhas ou colunas no raster de entrada um múltiplo do fator de célula. Com esta opção, o raster de saída pode cobrir uma extensão espacial menor do que o raster de entrada.",
	"@@Aggregate_ignorenodataincalculations_tag0@@": "Indica se os valores ${NoData} são ignorados pelo cálculo da agregação.",
	"@@Aggregate_ignorenodataincalculations_tag1@@": "Marcado--Especifica que se existirem valores ${NoData} para qualquer uma das células que se encontrem dentro da extensão espacial de uma célula maior no raster de saída, os valores ${NoData} serão ignorados ao determinar o valor para a localização das células de saída. Apenas serão utilizadas as células de entrada dentro da extensão da célula de saída que tiverem valores de dados para determinar o valor da célula de saída. Isto é por omissão.",
	"@@Aggregate_ignorenodataincalculations_tag2@@": "Desmarcado--Especifica que se qualquer célula situada na extensão espacial de uma célula maior no raster de saída tiver o valor de ${NoData}, o valor para essa localização da célula de saída será ${NoData}. Quando esta opção é utilizada, está implícito que, quando as células dentro de uma agregação contiverem o valor ${NoData}, não há informações suficientes para efetuar os cálculos especificados necessários para determinar um valor de saída.",
	"@@Aggregate_raster_tag0@@": "O raster de entrada a agregar.",
	"@@Expand_numberofcells_tag0@@": "O número de células para expandir.",
	"@@Expand_numberofcells_tag1@@": "O valor deve ser um número inteiro e pode ser igual ou maior do que 1.",
	"@@Expand_raster_tag0@@": "O raster de entrada para a qual as zonas identificadas devem ser expandidas.",
	"@@Expand_raster_tag1@@": "Deve ser de tipo número inteiro.",
	"@@Expand_zonevalues_tag0@@": "A lista de zonas a expandir.",
	"@@Expand_zonevalues_tag1@@": "Os valores das zonas devem ser números inteiros e podem estar em qualquer ordem.",
	"@@Expand_zonevalues_tag2@@": "Para especificar várias zonas, utilize um espaço para separar os valores das zonas.",
	"@@Multidimensional-Filter_dimension_tag0@@": "A dimensão da qual se devem extrair as variáveis.",
	"@@Multidimensional-Filter_dimensiondefinition_tag0@@": "Especifica o método que será utilizado para seccionar a dimensão.",
	"@@Multidimensional-Filter_dimensiondefinition_tag1@@": "<strong>Tudo</strong>--Será usado o intervalo completo para cada dimensão. Isto é por omissão.",
	"@@Multidimensional-Filter_dimensiondefinition_tag2@@": "<strong>Por Valores</strong>--A dimensão será seccionada utilizando um valor de dimensão ou lista de valores.",
	"@@Multidimensional-Filter_dimensiondefinition_tag3@@": "<strong>Por Intervalos</strong>--A dimensão será seccionada utilizando um intervalo ou uma lista de intervalos.",
	"@@Multidimensional-Filter_dimensiondefinition_tag4@@": "<strong>Por Iteração</strong>--A dimensão será seccionada ao longo de um tamanho de intervalo especificado.",
	"@@Multidimensional-Filter_endoffirstiteration_tag0@@": "O fim do primeiro intervalo. Este intervalo é utilizado para iterar através do conjunto de dados. Este parâmetro é necessário quando o parâmetro <strong>Definição de Dimensão</strong> é definido para <strong>Por Iteração</strong>.",
	"@@Multidimensional-Filter_maximumvalue_tag0@@": "O valor máximo para o intervalo. Este parâmetro é necessário quando o parâmetro <strong>Definição de Dimensão</strong> é definido para <strong>Por Intervalos</strong>.",
	"@@Multidimensional-Filter_minimumvalue_tag0@@": "O valor mínimo para o intervalo. Este parâmetro é necessário quando o parâmetro <strong>Definição de Dimensão</strong> é definido para <strong>Por Intervalos</strong>.",
	"@@Multidimensional-Filter_raster_tag0@@": "O raster multidimensional de entrada.",
	"@@Multidimensional-Filter_ranges_tag0@@": "<p>Os intervalos especificados numa tabela são utilizados para agregar grupos de valores. Os valores mínimo e máximo especificam o intervalo a ser incluído.</p><p>Este parâmetro é necessário quando o parâmetro<strong>Tipo</strong> é definido como <strong>Intervalos</strong>.</p>",
	"@@Multidimensional-Filter_startoffirstiteration_tag0@@": "O início do primeiro intervalo. Este intervalo é utilizado para iterar através do conjunto de dados. Este parâmetro é necessário quando o parâmetro <strong>Definição de Dimensão</strong> é definido para <strong>Por Iteração</strong>.",
	"@@Multidimensional-Filter_step_tag0@@": "A frequência pela qual os dados serão seccionados. Este parâmetro é necessário quando o parâmetro <strong>Definição de Dimensão</strong> é definido para <strong>Por Iteração</strong>. O padrão é 3.",
	"@@Multidimensional-Filter_unit_tag0@@": "Especifica a unidade de iteração. Este parâmetro é necessário quando o parâmetro <strong>Definição de Dimensão</strong> é definido para <strong>Por Iteração</strong> e o parâmetro <strong>Dimensão</strong> é definido para <strong>StdTime</strong>.",
	"@@Multidimensional-Filter_value_tag0@@": "O valor para a dimensão especificada. Este parâmetro é necessário quando o parâmetro <strong>Definição de Dimensão</strong> é definido para <strong>Por Valores</strong>.",
	"@@Multidimensional-Filter_variables_tag0@@": "As variáveis que serão incluídas na camada do raster multidimensional de saída. Se não for especificada qualquer variável, será utilizada a primeira variável.",
	"@@Multidimensional-Filter_dimensionless_tag0@@": "Especifica se a camada deve ter valores de dimensão. Esta opção só está disponível se for selecionada uma única secção para criar uma camada.",
	"@@Multidimensional-Filter_dimensionless_tag1@@": "Marcado -- A camada não terá valores de dimensão.",
	"@@Multidimensional-Filter_dimensionless_tag2@@": "Desmarcado -- A camada terá um valor de dimensão. Isto é por omissão.",
	"@@Multidimensional-Raster_interpolationcellsize_tag0@@": "O tamanho da célula do raster interpolado. O valor padrão é ${1}.",
	"@@Multidimensional-Raster_interpolationmethod_tag0@@": "O método de remostragem utilizado para interpolar dados irregulares.",
	"@@Multidimensional-Raster_interpolationmethod_tag1@@": "<strong>Vizinho Mais Próximo</strong>--Calcula o valor de píxel de saída utilizando o píxel de entrada mais próximo. Se não existir qualquer píxel de origem, não pode ser criado qualquer píxel novo na saída. Isto é por omissão.",
	"@@Multidimensional-Raster_interpolationmethod_tag2@@": "<strong>Simplificação Linear</strong>--Utiliza uma rede irregular triangulada a partir dos ponto central de cada píxel no raster irregular para interpolar uma superfície que é depois convertida num raster regular.",
	"@@Multidimensional-Raster_interpolationmethod_tag3@@": "<strong>Vizinho Natural</strong>--Encontra o subconjunto de amostras de entrada mais próximo de um ponto de consulta e aplica-lhes ponderações com base em áreas proporcionais para interpolar um valor.",
	"@@Multidimensional-Raster_interpolationmethod_tag4@@": "<strong>Ponderação da Distância Inversa</strong>--Determina os valores de píxel utilizando uma combinação linearmente ponderada de um conjunto de pontos ou píxeis de amostra. A ponderação é uma função do inverso da distância dos pontos ou píxeis conhecidos.",
	"@@Multidimensional-Raster_raster_tag0@@": "O raster multidimensional de entrada.",
	"@@Multidimensional-Raster_variables_tag0@@": "A variável ou variáveis a incluir na camada do raster multidimensional.",
	"@@Random_distribution_tag0@@": "Especifique o método de distribuição do valor aleatório a utilizar.",
	"@@Random_distribution_tag1@@": "<strong>Uniforme</strong> (Mínimo, Máximo)--Uma distribuição uniforme com um intervalo definido. Os valores padrão são 0 para Mínimo e 1 para Máximo. Isto é por omissão.",
	"@@Random_distribution_tag2@@": "<strong>Número inteiro</strong> (Mínimo, Máximo)--Uma distribuição de números inteiros com um intervalo definido. Os valores padrão são 1 para Mínimo e 10 para Máximo.",
	"@@Random_distribution_tag3@@": "<strong>Normal</strong> (Média, Desvio Padrão)--Uma distribuição normal com uma média e desvio padrão definidos. Os valores padrão são 0 para Média e 1 para Desvio Padrão.",
	"@@Random_distribution_tag4@@": "<strong>Exponencial</strong> (Média)--Uma distribuição exponencial com uma média definida. O valor padrão é 1.",
	"@@Random_distribution_tag5@@": "<strong>Poisson</strong> (Média)--Uma distribuição Poisson com uma média definida. O valor padrão é 1.",
	"@@Random_distribution_tag6@@": "<strong>Gama</strong> (Alfa, Beta)--Uma distribuição gama com alfa e beta definidos. Os valores padrão são 1 para Alfa e 1 para Beta.",
	"@@Random_distribution_tag7@@": "<strong>Binomial</strong> (N, Probabilidade)--Uma distribuição binomial com N e probabilidade definidos. Os valores padrão são 10 para N e 0,5 para Probabilidade.",
	"@@Random_distribution_tag8@@": "<strong>Geométrica</strong> (Probabilidade)--Uma distribuição geométrica com uma probabilidade definida. O valor padrão é 0.5.",
	"@@Random_distribution_tag9@@": "<strong>Binomial Negativo</strong> (r, Probabilidade)--Uma distribuição Pascal com um r e probabilidade definidos. Os valores padrão são 10,0 para r e 0,5 para Probabilidade.",
	"@@Random_randomnumbergenerator_tag0@@": "Especifique o algoritmo do gerador aleatório que utiliza o seed e a distribuição para produzir uma sequência de números aleatórios. As opções disponíveis são as seguintes:",
	"@@Random_randomnumbergenerator_tag1@@": "Standard C Rand",
	"@@Random_randomnumbergenerator_tag2@@": "ACM collected algorithm 599",
	"@@Random_randomnumbergenerator_tag3@@": "Mersenne Twister",
	"@@Random_randomnumbergenerator_tag4@@": "O valor padrão é Mersenne Twister.",
	"@@Random_rasterinfo_tag0@@": "Utilize o botão <strong>Carregar o modelo de raster</strong> para carregar um modelo a partir de um diretório ou portal.",
	"@@Random_seed_tag0@@": "O seed é um valor inteiro e é utilizado para iniciar o gerador de números aleatórios. O valor padrão é 1.",
	"@@Shrink_numberofcells_tag0@@": "O número de células com as quais se deve encolher cada zona especificada.",
	"@@Shrink_numberofcells_tag1@@": "O valor deve ser um número inteiro e pode ser igual ou maior do que 1.",
	"@@Shrink_raster_tag0@@": "O raster de entrada para a qual as zonas identificadas devem ser encolhidas.",
	"@@Shrink_raster_tag1@@": "Deve ser de tipo número inteiro.",
	"@@Shrink_zonevalues_tag0@@": "A lista de zonas a encolher.",
	"@@Shrink_zonevalues_tag1@@": "Os valores das zonas devem ser números inteiros e podem estar em qualquer ordem.",
	"@@Shrink_zonevalues_tag2@@": "Para especificar várias zonas, utilize um espaço para separar os valores das zonas.",
	"@@Distance-Accumulation_costraster_tag0@@": "Um raster que define o custo ou impedância para que se mova de modo planimétrico através de cada célula. O valor em cada localização da célula representa a distância de custo-por-unidade para movimentação. Cada valor da localização da célula é multiplicado pela resolução de célula e também compensa o movimento diagonal para obter os custos totais de passagem pela célula.",
	"@@Distance-Accumulation_costraster_tag1@@": "Os valores de <strong>Raster de Custo</strong> podem ser um número inteiro ou ponto flutuante, mas não podem ser negativos ou zero.",
	"@@Distance-Accumulation_distancemethod_tag0@@": "Determina se deve calcular a distância através de um método planar (terra plana) ou geodésico (elipsoide).",
	"@@Distance-Accumulation_distancemethod_tag1@@": "Planar--As medições planares utilizam matemática cartesiana 2D para calcular o comprimento e a área. A opção só está disponível ao medir um sistema de coordenadas projetado e o plano 2D desse sistema de coordenadas será utilizado como base para as medições.",
	"@@Distance-Accumulation_distancemethod_tag2@@": "Geodésico--A linha mais curta entre dois pontos na superfície da terra num esferoide (elipsoide). Por conseguinte, independentemente da projeção de entrada ou saída, os resultados não se alteram.",
	"@@Distance-Accumulation_distancemethod_tag3@@": "<strong>Nota:</strong> uma utilização para uma linha geodésica é quando pretende determinar a distância mais curta entre duas cidades para a trajetória de voo de um avião. Isto também é conhecido como arco de círculo grande se basear numa esfera em vez de num elipsoide.",
	"@@Distance-Accumulation_generatebackdirectionbandasadditionalbandinoutput_tag0@@": "Determina se apenas o raster de acumulação de distância é criado ou se é criado um raster multibanda composto tanto pelo raster de acumulação de distância como pelo raster de direção de retorno.",
	"@@Distance-Accumulation_generatebackdirectionbandasadditionalbandinoutput_tag1@@": "Desmarcado--O resultado é o raster de acumulação de distância. Este é um resultado de banda única. Isto é por omissão.",
	"@@Distance-Accumulation_generatebackdirectionbandasadditionalbandinoutput_tag2@@": "Marcado--É criado um resultado multibanda. A primeira banda é o raster de acumulação de distância e a segunda banda é o raster de direção de retorno.",
	"@@Distance-Accumulation_generatebackdirectionbandasadditionalbandinoutput_tag3@@": "O raster de direção de retorno calcula, para cada célula, o sentido, em graus, para a célula vizinha ao longo do caminho mais curto de volta até à origem mais próxima, evitando ao mesmo tempo as barreiras.",
	"@@Distance-Accumulation_horizontalfactor_tag0@@": "<p>Define a relação entre o fator de custo horizontal e o ângulo de movimento relativo horizontal (HRMA).</p><p>Existem vários fatores com modificadores que identificam um gráfico de fator vertical definido. Adicionalmente, pode ser utilizada uma tabela para criar um gráfico personalizado. Os gráficos são utilizados para identificar o fator vertical utilizado no cálculo do custo total de mover para uma célula vizinha.</p><p>Nas explicações abaixo, são utilizados dois acrónimos: HF e HRMA. HF significa fator horizontal, que define a dificuldade horizontal detetada ao passar de uma célula para a seguinte. HRMA significa um ângulo de movimento relativo horizontal, que identifica o ângulo entre a direção horizontal de uma célula e a direção de movimento.</p><p> Os tipos de <strong>Fator horizontal</strong> incluem:</p><ul><li><strong>Binário</strong> – indica que se o HRMA for inferior ao ângulo de corte, o HF é definido para o valor associado ao fator zero; caso contrário, é infinito.</li><li><strong>Posterior </strong> – estabelece que apenas é permitido movimento de avanço. O HRMA tem de ser superior ou igual a 0 e inferior a 90 graus (0 &lt;= HRMA &lt; 90). Se o HRMA for superior a 0 e inferior a 45 graus, o HF da célula é definido para o valor associado ao fator zero. Se o HRMA for superior ou igual a 45 graus é utilizado o valor de modificador do valor lateral. O HF para qualquer valor HRMA igual ou superior a 90 graus está definido para infinito.</li><li><strong>Linear</strong> – especifica que o HF é uma função linear do HRMA.</li><li><strong>Linear Inverso</strong> – especifica que o HF é uma função linear inversa do HRMA.</li><li><strong>Tabela</strong> – identifica que será utilizado um ficheiro de tabela para definir o gráfico de fator horizontal utilizado para determinar os HF.</li></ul><p>Os modificadores para os fatores horizontais incluem:</p><ul><li><strong>Fator Zero</strong> – O fator horizontal a ser utilizado quando o HRMA é zero. Este fator posiciona a interceção Y para qualquer uma das funções do fator horizontal..</li><li><strong>Ângulo de corte</strong> – define o ângulo HRMA além do qual o HF será definido para o infinito.</li><li><strong>Inclinação</strong> – estabelece a inclinação da linha reta utilizada com as palavras-chave do fator horizontal <strong>Linear</strong> e <strong>Linear Inverso</strong>. A inclinação é especificada como uma fração de subida em excesso (por exemplo, 45 por cento da inclinação é de 1/45, que é inserido como 0,02222).</li><li><strong>Valor lateral</strong> – estabelece o HF quando o HRMA é superior ou igual a 45 graus e inferior a 90 graus quando é especificada a palavra-chave do fator horizontal <strong>Posterior</strong>.</li><li><strong>Nome da tabela</strong> – identifica o nome da tabela que define o HF.</li></ul>",
	"@@Distance-Accumulation_horizontalraster_tag0@@": "Um raster que define a direção horizontal em cada célula.",
	"@@Distance-Accumulation_horizontalraster_tag1@@": "Os valores no raster têm de ser números inteiros de 0 a 360, sendo 0 graus a norte, ou na direção da parte superior do ecrã, e aumentando no sentido dos ponteiros do relógio. As áreas planas devem ter um valor de -1. Os valores em cada localização serão utilizados em conjunto com <strong>Fator horizontal</strong> para determinar o custo horizontal incorrido ao deslocar-se de uma célula para os seus vizinhos.",
	"@@Distance-Accumulation_initialaccumulation_tag0@@": "O custo cumulativo inicial para iniciar o cálculo do custo. Este parâmetro permite a especificação do custo fixo associado a uma origem. Em vez de começar com um custo de 0, o algoritmo de custo começa com o valor especificado.",
	"@@Distance-Accumulation_initialaccumulation_tag1@@": "Pode ser utilizado para um valor numérico (duplo) ou um campo de <strong>Raster de Origem</strong> para este parâmetro.",
	"@@Distance-Accumulation_initialaccumulation_tag2@@": "O valor deverá ser igual ou maior que zero. O padrão é 0.",
	"@@Distance-Accumulation_maximumaccumulation_tag0@@": "Define o custo cumulativo máximo para o viajante para uma origem. Os cálculos de custos continuam para cada origem até que a capacidade especificada seja alcançada.",
	"@@Distance-Accumulation_maximumaccumulation_tag1@@": "Pode ser utilizado para um valor numérico (duplo) ou um campo de <strong>Raster de Origem</strong> para este parâmetro.",
	"@@Distance-Accumulation_maximumaccumulation_tag2@@": "O valor tem de ser maior que zero. A capacidade predefinida está na extremidade do raster de saída.",
	"@@Distance-Accumulation_multipliertoapplytocosts_tag0@@": "Um multiplicador para aplicar os valores de custo.",
	"@@Distance-Accumulation_multipliertoapplytocosts_tag1@@": "Este parâmetro permite controlar o modo de viagem ou a magnitude numa origem. Quanto maior for o multiplicador, maior será o custo de se mover através de cada célula.",
	"@@Distance-Accumulation_multipliertoapplytocosts_tag2@@": "Pode ser utilizado para um valor numérico (duplo) ou um campo de <strong>Raster de Origem</strong> para este parâmetro.",
	"@@Distance-Accumulation_multipliertoapplytocosts_tag3@@": "Os valores têm de ser maiores que zero. O padrão é 1.",
	"@@Distance-Accumulation_rasterbarriers_tag0@@": "O raster que define as barreiras.",
	"@@Distance-Accumulation_rasterbarriers_tag1@@": "O conjunto de dados deve conter NoData se não existirem barreiras. As barreiras são representadas por valores válidos, incluindo zero.",
	"@@Distance-Accumulation_rasterbarriers_tag2@@": "As barreiras podem ser definidas por um raster de número inteiro ou de ponto flutuante.",
	"@@Distance-Accumulation_sourceraster_tag0@@": "As localizações das origens de entrada.",
	"@@Distance-Accumulation_sourceraster_tag1@@": "Este é um conjunto de dados mais raster que identifica as células ou localizações a partir das quais é calculada a menor distância de custo acumulado para cada localização da célula de saída.",
	"@@Distance-Accumulation_sourceraster_tag2@@": "Pode ser do tipo número inteiro ou ponto flutuante.",
	"@@Distance-Accumulation_surfaceraster_tag0@@": "Um raster define os valores de elevação em cada localização da célula.",
	"@@Distance-Accumulation_surfaceraster_tag1@@": "Os valores são utilizados para calcular a distância real da superfície coberta ao passar entre células.",
	"@@Distance-Accumulation_traveldirection_tag0@@": "Define a direção do viajante ao aplicar o fator vertical, o fator horizontal e a taxa de resistência à origem.",
	"@@Distance-Accumulation_traveldirection_tag1@@": "<strong>Da Origem</strong>--O fator vertical, o fator horizontal e a taxa de resistência à origem serão aplicados a partir da origem de entrada e passando para as células não de origem. Isto é por omissão.",
	"@@Distance-Accumulation_traveldirection_tag2@@": "<strong>Para a Origem</strong>--O fator vertical, o fator horizontal e a taxa de resistência à origem serão aplicados a partir de cada célula não de origem e de volta à origem de entrada.",
	"@@Distance-Accumulation_traveldirection_tag3@@": "Especifique a palavra-chave <strong>Da Origem</strong> ou <strong>Para a Origem</strong> que será aplicada a todas as origens, ou especifique um campo no <strong>Raster de Origem</strong> que contenha as palavras-chave para identificar a direção de deslocação para cada origem. Esse campo deve conter a string ${FROM_SOURCE} ou ${TO_SOURCE}.",
	"@@Distance-Accumulation_verticalfactor_tag0@@": "<p>Define a relação entre o fator de custo vertical e o ângulo de movimento relativo vertical (VRMA).</p><p>Existem vários fatores com modificadores que identificam um gráfico de fator vertical definido. Adicionalmente, pode ser utilizada uma tabela para criar um gráfico personalizado. Os gráficos são utilizados para identificar o fator vertical utilizado no cálculo do custo total de mover para uma célula vizinha.</p><p>Nas explicações abaixo, são utilizados dois acrónimos: VF e VRMA. VF significa fator vertical, que define a dificuldade vertical encontrada na mudança de uma célula para a seguinte. VRMA significa um ângulo de movimento relativo vertical, que identifica o ângulo de inclinação entre FROM (DE) ou o processamento, a célula e a célula TO (PARA).</p><p>Os tipo de <strong>Fator vertical</strong> incluem:</p><ul><li><strong>Binário</strong> – especifica que se o VRMA for superior ao ângulo de corte baixo e inferior ao ângulo de corte elevado, o VF está definido para o valor associado ao fator zero, caso contrário, é infinito.</li><li><strong>Linear</strong> – indica que o VF é uma função linear do VRMA.</li><li><strong>Linear simétrico</strong> – especifica que o VF é uma função linear do VRMA no lado negativo ou positivo do VRMA, respetivamente, e as duas funções lineares são simétricas no que respeita ao eixo VF (y).</li><li><strong>Linear inverso</strong> – indica que o VF é uma função linear inversa do VRMA.</li><li><strong>Linear inverso simétrico</strong> – Especifica que o VF é uma função linear inversa do VRMA no lado negativo ou positivo do VRMA, respetivamente, e que as duas funções lineares são simétricas em relação ao eixo VF (y).</li><li><strong>Cos</strong> – identifica o VF como a função baseada no cosseno do VRMA.</li><li><strong>Sec</strong> – identifica o VF como a função baseada no secante do VRMA.</li><li><strong>Cos-Sec</strong> – especifica que o VF é a função baseada no secante do VRMA quando o VRMA é negativo e a função baseada no cosseno do VRMA quando o VRMA não é negativo.</li><li><strong>Sec-Cos</strong> – especifica que o VF é a função baseada no secante do VRMA quando o VRMA é negativo e a função baseada no cosseno do VRMA quando o VRMA não é negativo.</li><li><strong>Tabela</strong> – identifica que será utilizado um ficheiro de tabela para definir o gráfico de fator vertical utilizado para determinar VF.</li></ul><p>Os modificadores das palavras-chave verticais incluem:</p><ul><li><strong>Fator zero</strong> – estabelece o fator vertical utilizado quando o VRMA é zero. Este fator posiciona a interceção Y da função especificada. Por definição, o fator zero não é aplicável a qualquer uma das funções verticais trignométricas (COS, SEC, COS-SEC ou SEC-COS). A interceção Y é definida por estas funções.</li><li><strong>Ângulo de corte baixo</strong> – define o ângulo do VRMA abaixo do qual o VF será definido para infinito.</li><li><strong>Ângulo de corte elevado</strong> – define o ângulo do VRMA acima do qual o VF será definido para infinito.</li><li><strong>Inclinação</strong> – estabelece a inclinação da linha reta utilizada com as palavras-chave do fator vertical <strong>Linear</strong> e <strong>Linear inverso</strong>. A inclinação é especificada como uma fração de subida em excesso (por exemplo, 45 por cento da inclinação é de 1/45, que é inserido como 0,02222).</li><li><strong>Nome da tabela</strong> – identifica o nome da tabela que define o VF.</li></ul>",
	"@@Distance-Accumulation_verticalraster_tag0@@": "Define a relação entre o fator de custo vertical e o ângulo de movimento relativo vertical (VRMA).",
	"@@Distance-Accumulation_verticalraster_tag1@@": "Os valores são utilizados para calcular a inclinação utilizada para identificar o fator vertical incorrido durante o movimento de uma célula para outra.",
	"@@Distance-Allocation_costraster_tag0@@": "Um raster que define o custo ou impedância para que se mova de modo planimétrico através de cada célula. O valor em cada localização da célula representa a distância de custo-por-unidade para movimentação. Cada valor da localização da célula é multiplicado pela resolução de célula e também compensa o movimento diagonal para obter os custos totais de passagem pela célula.",
	"@@Distance-Allocation_costraster_tag1@@": "Os valores de <strong>Raster de Custo</strong> podem ser um número inteiro ou ponto flutuante, mas não podem ser negativos ou zero.",
	"@@Distance-Allocation_distancemethod_tag0@@": "Determina se deve calcular a distância através de um método planar (terra plana) ou geodésico (elipsoide).",
	"@@Distance-Allocation_distancemethod_tag1@@": "Planar--As medições planares utilizam matemática cartesiana 2D para calcular o comprimento e a área. A opção só está disponível ao medir um sistema de coordenadas projetado e o plano 2D desse sistema de coordenadas será utilizado como base para as medições.",
	"@@Distance-Allocation_distancemethod_tag2@@": "Geodésico--A linha mais curta entre dois pontos na superfície da terra num esferoide (elipsoide). Por conseguinte, independentemente da projeção de entrada ou saída, os resultados não se alteram.",
	"@@Distance-Allocation_distancemethod_tag3@@": "<strong>Nota:</strong> uma utilização para uma linha geodésica é quando pretende determinar a distância mais curta entre duas cidades para a trajetória de voo de um avião. Isto também é conhecido como arco de círculo grande se basear numa esfera em vez de num elipsoide.",
	"@@Distance-Allocation_horizontalfactor_tag0@@": "<p>Define a relação entre o fator de custo horizontal e o ângulo de movimento relativo horizontal (HRMA).</p><p>Existem vários fatores com modificadores que identificam um gráfico de fator vertical definido. Adicionalmente, pode ser utilizada uma tabela para criar um gráfico personalizado. Os gráficos são utilizados para identificar o fator vertical utilizado no cálculo do custo total de mover para uma célula vizinha.</p><p>Nas explicações abaixo, são utilizados dois acrónimos: HF e HRMA. HF significa fator horizontal, que define a dificuldade horizontal detetada ao passar de uma célula para a seguinte. HRMA significa um ângulo de movimento relativo horizontal, que identifica o ângulo entre a direção horizontal de uma célula e a direção de movimento.</p><p> Os tipos de <strong>Fator horizontal</strong> incluem:</p><ul><li><strong>Binário</strong> – indica que se o HRMA for inferior ao ângulo de corte, o HF é definido para o valor associado ao fator zero; caso contrário, é infinito.</li><li><strong>Posterior </strong> – estabelece que apenas é permitido movimento de avanço. O HRMA tem de ser superior ou igual a 0 e inferior a 90 graus (0 &lt;= HRMA &lt; 90). Se o HRMA for superior a 0 e inferior a 45 graus, o HF da célula é definido para o valor associado ao fator zero. Se o HRMA for superior ou igual a 45 graus é utilizado o valor de modificador do valor lateral. O HF para qualquer valor HRMA igual ou superior a 90 graus está definido para infinito.</li><li><strong>Linear</strong> – especifica que o HF é uma função linear do HRMA.</li><li><strong>Linear Inverso</strong> – especifica que o HF é uma função linear inversa do HRMA.</li><li><strong>Tabela</strong> – identifica que será utilizado um ficheiro de tabela para definir o gráfico de fator horizontal utilizado para determinar os HF.</li></ul><p>Os modificadores para os fatores horizontais incluem:</p><ul><li><strong>Fator Zero</strong> – O fator horizontal a ser utilizado quando o HRMA é zero. Este fator posiciona a interceção Y para qualquer uma das funções do fator horizontal..</li><li><strong>Ângulo de corte</strong> – define o ângulo HRMA além do qual o HF será definido para o infinito.</li><li><strong>Inclinação</strong> – estabelece a inclinação da linha reta utilizada com as palavras-chave do fator horizontal <strong>Linear</strong> e <strong>Linear Inverso</strong>. A inclinação é especificada como uma fração de subida em excesso (por exemplo, 45 por cento da inclinação é de 1/45, que é inserido como 0,02222).</li><li><strong>Valor lateral</strong> – estabelece o HF quando o HRMA é superior ou igual a 45 graus e inferior a 90 graus quando é especificada a palavra-chave do fator horizontal <strong>Posterior</strong>.</li><li><strong>Nome da tabela</strong> – identifica o nome da tabela que define o HF.</li></ul>",
	"@@Distance-Allocation_horizontalraster_tag0@@": "Um raster que define a direção horizontal em cada célula.",
	"@@Distance-Allocation_horizontalraster_tag1@@": "Os valores no raster têm de ser números inteiros de 0 a 360, sendo 0 graus a norte, ou na direção da parte superior do ecrã, e aumentando no sentido dos ponteiros do relógio. As áreas planas devem ter um valor de -1. Os valores em cada localização serão utilizados em conjunto com <strong>Fator horizontal</strong> para determinar o custo horizontal incorrido ao deslocar-se de uma célula para os seus vizinhos.",
	"@@Distance-Allocation_initialaccumulation_tag0@@": "O custo cumulativo inicial para iniciar o cálculo do custo. Este parâmetro permite a especificação do custo fixo associado a uma origem. Em vez de começar com um custo de 0, o algoritmo de custo começa com o valor especificado.",
	"@@Distance-Allocation_initialaccumulation_tag1@@": "Pode ser utilizado para um valor numérico (duplo) ou um campo de <strong>Raster de Origem</strong> para este parâmetro.",
	"@@Distance-Allocation_initialaccumulation_tag2@@": "O valor deverá ser igual ou maior que zero. O padrão é 0.",
	"@@Distance-Allocation_maximumaccumulation_tag0@@": "Define o custo cumulativo máximo para o viajante para uma origem. Os cálculos de custos continuam para cada origem até que a capacidade especificada seja alcançada.",
	"@@Distance-Allocation_maximumaccumulation_tag1@@": "Pode ser utilizado para um valor numérico (duplo) ou um campo de <strong>Raster de Origem</strong> para este parâmetro.",
	"@@Distance-Allocation_maximumaccumulation_tag2@@": "O valor tem de ser maior que zero. A capacidade predefinida está na extremidade do raster de saída.",
	"@@Distance-Allocation_multipliertoapplytocosts_tag0@@": "Um multiplicador para aplicar os valores de custo.",
	"@@Distance-Allocation_multipliertoapplytocosts_tag1@@": "Este parâmetro permite controlar o modo de viagem ou a magnitude numa origem. Quanto maior for o multiplicador, maior será o custo de se mover através de cada célula.",
	"@@Distance-Allocation_multipliertoapplytocosts_tag2@@": "Os valores têm de ser maiores que zero. O padrão é 1.",
	"@@Distance-Allocation_multipliertoapplytocosts_tag3@@": "Pode ser utilizado para um valor numérico (duplo) ou um campo de <strong>Raster de Origem</strong> para este parâmetro.",
	"@@Distance-Allocation_rasterbarriers_tag0@@": "O raster que define as barreiras.",
	"@@Distance-Allocation_rasterbarriers_tag1@@": "O conjunto de dados deve conter NoData se não existirem barreiras. As barreiras são representadas por valores válidos, incluindo zero.",
	"@@Distance-Allocation_rasterbarriers_tag2@@": "As barreiras podem ser definidas por um raster de número inteiro ou de ponto flutuante.",
	"@@Distance-Allocation_sourcefield_tag0@@": "O campo utilizado para atribuir valores às localizações de origem. Deve ser do tipo número inteiro.",
	"@@Distance-Allocation_sourceraster_tag0@@": "As localizações das origens de entrada.",
	"@@Distance-Allocation_sourceraster_tag1@@": "Este é um conjunto de dados mais raster que identifica as células ou localizações a partir das quais é calculada a menor distância de custo acumulado para cada localização da célula de saída.",
	"@@Distance-Allocation_sourcerowandcolumnbands_tag0@@": "Determina se apenas é criado o raster de locação ou se é criado um resultado multibanda.",
	"@@Distance-Allocation_sourcerowandcolumnbands_tag1@@": "Desmarcado--O resultado é o raster de alocação de distância. Este é um resultado de banda única. Isto é por omissão.",
	"@@Distance-Allocation_sourcerowandcolumnbands_tag2@@": "Marcado--É criado um raster multibanda. A primeira banda é o raster de alocação de distância, a segunda banda contém um índice de linhas e a terceira banda contém um índice de colunas. Estes índices identificam a localização da célula de origem que se encontra a menor distância de custo acumulado.",
	"@@Distance-Allocation_surfaceraster_tag0@@": "Um raster define os valores de elevação em cada localização da célula.",
	"@@Distance-Allocation_surfaceraster_tag1@@": "Os valores são utilizados para calcular a distância real da superfície coberta ao passar entre células.",
	"@@Distance-Allocation_traveldirection_tag0@@": "Define a direção do viajante ao aplicar o fator vertical, o fator horizontal e a taxa de resistência à origem.",
	"@@Distance-Allocation_traveldirection_tag1@@": "<strong>Da Origem</strong>--O fator vertical, o fator horizontal e a taxa de resistência à origem serão aplicados a partir da origem de entrada e passando para as células não de origem. Isto é por omissão.",
	"@@Distance-Allocation_traveldirection_tag2@@": "<strong>Para a Origem</strong>--O fator vertical, o fator horizontal e a taxa de resistência à origem serão aplicados a partir de cada célula não de origem e de volta à origem de entrada.",
	"@@Distance-Allocation_traveldirection_tag3@@": "Especifique a palavra-chave <strong>Da Origem</strong> ou <strong>Para a Origem</strong> que será aplicada a todas as origens, ou especifique um campo no <strong>Raster de Origem</strong> que contenha as palavras-chave para identificar a direção de deslocação para cada origem. Esse campo deve conter a string ${FROM_SOURCE} ou ${TO_SOURCE}.",
	"@@Distance-Allocation_verticalfactor_tag0@@": "<p>Define a relação entre o fator de custo vertical e o ângulo de movimento relativo vertical (VRMA).</p><p>Existem vários fatores com modificadores que identificam um gráfico de fator vertical definido. Adicionalmente, pode ser utilizada uma tabela para criar um gráfico personalizado. Os gráficos são utilizados para identificar o fator vertical utilizado no cálculo do custo total de mover para uma célula vizinha.</p><p>Nas explicações abaixo, são utilizados dois acrónimos: VF e VRMA. VF significa fator vertical, que define a dificuldade vertical encontrada na mudança de uma célula para a seguinte. VRMA significa um ângulo de movimento relativo vertical, que identifica o ângulo de inclinação entre FROM (DE) ou o processamento, a célula e a célula TO (PARA).</p><p>Os tipo de <strong>Fator vertical</strong> incluem:</p><ul><li><strong>Binário</strong> – especifica que se o VRMA for superior ao ângulo de corte baixo e inferior ao ângulo de corte elevado, o VF está definido para o valor associado ao fator zero, caso contrário, é infinito.</li><li><strong>Linear</strong> – indica que o VF é uma função linear do VRMA.</li><li><strong>Linear simétrico</strong> – especifica que o VF é uma função linear do VRMA no lado negativo ou positivo do VRMA, respetivamente, e as duas funções lineares são simétricas no que respeita ao eixo VF (y).</li><li><strong>Linear inverso</strong> – indica que o VF é uma função linear inversa do VRMA.</li><li><strong>Linear inverso simétrico</strong> – Especifica que o VF é uma função linear inversa do VRMA no lado negativo ou positivo do VRMA, respetivamente, e que as duas funções lineares são simétricas em relação ao eixo VF (y).</li><li><strong>Cos</strong> – identifica o VF como a função baseada no cosseno do VRMA.</li><li><strong>Sec</strong> – identifica o VF como a função baseada no secante do VRMA.</li><li><strong>Cos-Sec</strong> – especifica que o VF é a função baseada no secante do VRMA quando o VRMA é negativo e a função baseada no cosseno do VRMA quando o VRMA não é negativo.</li><li><strong>Sec-Cos</strong> – especifica que o VF é a função baseada no secante do VRMA quando o VRMA é negativo e a função baseada no cosseno do VRMA quando o VRMA não é negativo.</li><li><strong>Tabela</strong> – identifica que será utilizado um ficheiro de tabela para definir o gráfico de fator vertical utilizado para determinar VF.</li></ul><p>Os modificadores das palavras-chave verticais incluem:</p><ul><li><strong>Fator zero</strong> – estabelece o fator vertical utilizado quando o VRMA é zero. Este fator posiciona a interceção Y da função especificada. Por definição, o fator zero não é aplicável a qualquer uma das funções verticais trignométricas (COS, SEC, COS-SEC ou SEC-COS). A interceção Y é definida por estas funções.</li><li><strong>Ângulo de corte baixo</strong> – define o ângulo do VRMA abaixo do qual o VF será definido para infinito.</li><li><strong>Ângulo de corte elevado</strong> – define o ângulo do VRMA acima do qual o VF será definido para infinito.</li><li><strong>Inclinação</strong> – estabelece a inclinação da linha reta utilizada com as palavras-chave do fator vertical <strong>Linear</strong> e <strong>Linear inverso</strong>. A inclinação é especificada como uma fração de subida em excesso (por exemplo, 45 por cento da inclinação é de 1/45, que é inserido como 0,02222).</li><li><strong>Nome da tabela</strong> – identifica o nome da tabela que define o VF.</li></ul>",
	"@@Distance-Allocation_verticalraster_tag0@@": "Define a relação entre o fator de custo vertical e o ângulo de movimento relativo vertical (VRMA).",
	"@@Distance-Allocation_verticalraster_tag1@@": "Os valores são utilizados para calcular a inclinação utilizada para identificar o fator vertical incorrido durante o movimento de uma célula para outra.",
	"@@Euclidean-Back-Direction_cellsize_tag0@@": "O tamanho da célula em que será criado o raster de saída.",
	"@@Euclidean-Back-Direction_cellsize_tag1@@": "Se o tamanho da célula tiver sido explicitamente definido em <strong>Ambientes</strong>, esse será o tamanho da célula predefinido. Se não tiver sido definido, o tamanho da célula de saída será o mesmo de <strong>Raster de Origem</strong>.",
	"@@Euclidean-Back-Direction_distancemethod_tag0@@": "Determina se deve calcular a distância através de um método planar (terra plana) ou geodésico (elipsoide).",
	"@@Euclidean-Back-Direction_distancemethod_tag1@@": "Planar--As medições planares utilizam matemática cartesiana 2D para calcular o comprimento e a área. A opção só está disponível ao medir um sistema de coordenadas projetado e o plano 2D desse sistema de coordenadas será utilizado como base para as medições.",
	"@@Euclidean-Back-Direction_distancemethod_tag2@@": "Geodésico--A linha mais curta entre dois pontos na superfície da terra num esferoide (elipsoide). Por conseguinte, independentemente da projeção de entrada ou saída, os resultados não se alteram.",
	"@@Euclidean-Back-Direction_distancemethod_tag3@@": "<strong>Nota:</strong> uma utilização para uma linha geodésica é quando pretende determinar a distância mais curta entre duas cidades para a trajetória de voo de um avião. Isto também é conhecido como arco de círculo grande se basear numa esfera em vez de num elipsoide.",
	"@@Euclidean-Back-Direction_maximumdistance_tag0@@": "Define a distância limite dentro da qual a direção para a origem mais próxima será calculada. Se a distância para a origem mais próxima exceder este valor, a saída para essa célula será NoData.",
	"@@Euclidean-Back-Direction_maximumdistance_tag1@@": "A distância predefinida é até à extensão do raster de saída.",
	"@@Euclidean-Back-Direction_rasterbarriers_tag0@@": "O raster que define as barreiras.",
	"@@Euclidean-Back-Direction_rasterbarriers_tag1@@": "O conjunto de dados deve conter NoData se não existirem barreiras. As barreiras são representadas por valores válidos, incluindo zero.",
	"@@Euclidean-Back-Direction_rasterbarriers_tag2@@": "As barreiras podem ser definidas por um raster de número inteiro ou de ponto flutuante.",
	"@@Euclidean-Back-Direction_sourceraster_tag0@@": "Um conjunto de dados raster que identifica as células ou localizações para as quais é calculada a direção euclidiana para cada localização da célula de saída.",
	"@@Euclidean-Back-Direction_sourceraster_tag1@@": "O tipo de entrada pode ser um número inteiro ou ponto flutuante.",
	"@@Cost-Path_costbacklinkraster_tag0@@": "O nome de uma camada raster de ligação inversa de custo utilizado para determinar o caminho para regressar a uma origem através do caminho de menor custo.",
	"@@Cost-Path_costbacklinkraster_tag1@@": "Para cada célula no raster de ligação inversa, um valor identifica o vizinho que é a célula seguinte no caminho de menor custo acumulado da célula para uma única célula de origem ou conjunto de células de origem.",
	"@@Cost-Path_costdistanceraster_tag0@@": "O nome de um raster de distância de custo a utilizar para determinar o caminho de menor custo entre as localizações de destino e uma origem.",
	"@@Cost-Path_costdistanceraster_tag1@@": "O raster de distância de custo é normalmente criado com a função Distância de Custo, Alocação de Custo ou Ligação Inversa de Custo. A camada raster de distância de custo armazena, para cada célula, a distância de custo acumulado mínimo de uma superfície de custo de cada célula para um conjunto de células de origem.",
	"@@Cost-Path_destinationfield_tag0@@": "O campo utilizado para obter valores para os locais de destino. Os dados de funcionalidade de entrada devem conter, pelo menos, um campo válido.",
	"@@Cost-Path_destinationraster_tag0@@": "Uma camada de conjunto de dados raster que identifica as células a partir das quais o caminho de menor custo é determinado para a origem de menor custo.",
	"@@Cost-Path_destinationraster_tag1@@": "A camada raster de entrada consiste em células que têm valores válidos (zero é um valor válido) e às células restantes tem de ser atribuído o valor NoData.",
	"@@Cost-Path_forceflowdirectionconventionforbacklinkraster_tag0@@": "Força a função a tratar o raster de ligação inversa de entrada como um raster de direção do fluxo. Os rasters de direção do fluxo podem ter um número inteiro com valores de 0-255.",
	"@@Cost-Path_forceflowdirectionconventionforbacklinkraster_tag1@@": "Desmarcado--Se os valores do raster de ligação inversa especificado forem números inteiros no intervalo de 0-8, o conjunto de dados será tratado como um raster de custo de ligação inversa. Se os valores forem de 0-255, a entrada será tratada como um raster de direção do fluxo. Se os valores forem de 0-360 e ponto flutuante, a entrada será tratada como um raster de direção de retorno.",
	"@@Cost-Path_forceflowdirectionconventionforbacklinkraster_tag2@@": "Marcado--O raster fornecido para o raster de ligação inversa será tratado como um raster de direção do fluxo. Utilize esta opção do raster de direção do fluxo para ter um valor máximo de 8 ou menos.",
	"@@Cost-Path_pathtype_tag0@@": "Uma palavra-chave que define o modo como os valores e zonas nos dados de destino de entrada serão interpretados nos cálculos de caminho de custo. As opções são as seguintes:",
	"@@Cost-Path_pathtype_tag1@@": "<strong>Cada Célula</strong>--Para cada célula com valores válidos nos dados de destino de entrada é determinado e guardado um caminho de menor custo no raster de saída. Com esta opção, cada célula dos dados de destino de entrada é tratada separadamente e é determinado um caminho de menor custo para cada célula.",
	"@@Cost-Path_pathtype_tag2@@": "<strong>Cada Zona</strong>--Por cada zona nos dados de destino de entrada, é determinado e guardado um caminho de menor custo no raster de saída. Com esta opção, o caminho de menor custo para cada zona começa na célula com a menor ponderação de distância de custo na zona.",
	"@@Cost-Path_pathtype_tag3@@": "<strong>Melhor Único</strong>--Para todas as células nos dados de destino de entrada, o caminho de menor custo deriva da célula com o mínimo de caminhos de menor custo até às células de origem.",
	"@@Cell-Statistics_cellsizetype_tag0@@": "Escolha qual o tamanho da célula a utilizar no raster de saída. Se todos os tamanhos da célula de entrada forem os mesmos, todas as opções irão produzir os mesmos resultados.",
	"@@Cell-Statistics_cellsizetype_tag1@@": "Primeiro De--Utiliza o primeiro tamanho da célula dos rasters de entrada.",
	"@@Cell-Statistics_cellsizetype_tag2@@": "Mín. De--Utiliza o menor tamanho da célula de todos os rasters de entrada.",
	"@@Cell-Statistics_cellsizetype_tag3@@": "Máximo De--Utiliza o maior tamanho da célula de todos os rasters de entrada. Isto é por omissão.",
	"@@Cell-Statistics_cellsizetype_tag4@@": "Média De--Utiliza o tamanho da célula médio de todos os rasters de entrada.",
	"@@Cell-Statistics_cellsizetype_tag5@@": "Último De--Utiliza o último tamanho da célula dos rasters de entrada.",
	"@@Cell-Statistics_extenttype_tag0@@": "Escolha qual a extensão que deve ser utilizada no raster de saída:",
	"@@Cell-Statistics_extenttype_tag1@@": "Primeiro De--Utiliza a extensão do primeiro raster de entrada para determinar a extensão de processamento.",
	"@@Cell-Statistics_extenttype_tag2@@": "Interseção De--Utiliza a extensão dos pixéis sobrepostos para determinar a extensão de processamento. Isto é por omissão.",
	"@@Cell-Statistics_extenttype_tag3@@": "União De--Utiliza a extensão de todos os rasters para determinar a extensão de processamento.",
	"@@Cell-Statistics_extenttype_tag4@@": "Último De--Utiliza a extensão do último raster de entrada para determinar a extensão de processamento.",
	"@@Cell-Statistics_processasmultiband_tag0@@": "Determina como as bandas dos rasters de entrada são processadas.",
	"@@Cell-Statistics_processasmultiband_tag1@@": "Desmarcado--Todas as entradas multibanda serão processadas como bandas únicas. Isto é por omissão.",
	"@@Cell-Statistics_processasmultiband_tag2@@": "Marcado--Todas as entradas multibanda serão processadas como multibanda.",
	"@@Cell-Statistics_rasters_tag0@@": "A lista de rasters a partir dos quais as estatísticas são calculadas, numa base píxel a píxel.",
	"@@Cell-Statistics_percentileinterpolationtype_tag0@@": "<p>Especifica o método de interpolação a ser utilizado quando o valor do percentil especificado fica entre dois valores de célula de entrada.</p><ul><li><strong>Detetar automaticamente</strong> – se os rasters de entrada forem do tipo píxel inteiro, o método <strong>Mais próximo</strong> é utilizado. Se o raster de entrada for do tipo píxel de ponto flutuante, o método <strong>Linear</strong> é utilizado. Esta é a predefinição.</li><li><strong>Mais próximo</strong> - é usado o valor disponível mais próximo do percentil pretendido. Neste caso, o tipo de píxel de saída é o mesmo do raster de valor de entrada.</li><li><strong>Linear</strong> – é utilizada a média ponderada dos dois valores circundantes do percentil pretendido. Neste caso, o tipo de píxel de saída é ponto flutuante.</li></ul><p>Esta opção só está disponível se o tipo de parâmetro <strong>Operação</strong> estiver definido como <strong>Mediana</strong> ou <strong>Percentil</strong>.</p>",
	"@@Cell-Statistics_percentilevalue_tag0@@": "<p>O percentil a calcular. A predefinição é 90, para o 90.º percentil.</p><p>O intervalo dos valores é de 0 a 100. O 0.º percentil é essencialmente equivalente à estatística mínimo e o 100.º percentil é equivalente a máximo. Um valor de 50 irá essencialmente produzir o mesmo resultado que a estatística mediana.</p><p> Esta opção só está disponível se o parâmetro <strong>Operação</strong> estiver definido como <strong>Percentil</strong>.</p>",
	"@@Optimal-Path-As-Raster_backdirectionrasterorflowdirectionraster_tag0@@": "O raster da direção de retorno contém as direções calculadas em graus. A direção identifica a próxima célula ao longo do melhor percurso de volta à origem de menor custo acumulado, evitando ao mesmo tempo as barreiras.",
	"@@Optimal-Path-As-Raster_backdirectionrasterorflowdirectionraster_tag1@@": "O intervalo de valores vai dos 0 graus até aos 360 graus, com o 0 reservado para as células de origem. A direção para Este (direita) é 90, e os valores aumentam no sentido dos ponteiros do relógio (180 é sul, 270 é oeste, e 360 é norte).",
	"@@Optimal-Path-As-Raster_destinationfield_tag0@@": "O campo utilizado para obter valores para os locais de destino.",
	"@@Optimal-Path-As-Raster_destinationraster_tag0@@": "Uma camada de conjunto de dados raster que identifica as células a partir das quais o melhor percurso é determinado para a origem de menor custo. Esta entrada é obrigatória.",
	"@@Optimal-Path-As-Raster_destinationraster_tag1@@": "A camada raster de entrada consiste em células que têm valores válidos (zero é um valor válido) e às células restantes tem de ser atribuído o valor NoData.",
	"@@Optimal-Path-As-Raster_distanceaccumulationraster_tag0@@": "O raster de acumulação de distância é utilizado para determinar o melhor percurso desde os destinos até às origens. O raster de acumulação de distância é normalmente criada com a função <strong>Acumulação de Distância</strong>. Cada célula no raster de acumulação de distância representa a distância mínima do custo acumulado sobre a superfície de cada célula para um conjunto de células de origem.",
	"@@Optimal-Path-As-Raster_pathtype_tag0@@": "Especifica uma palavra-chave que define a forma como os valores e zonas nos dados de destino de entrada serão interpretados nos cálculos do percurso de custo.",
	"@@Optimal-Path-As-Raster_pathtype_tag1@@": "<strong>Cada Zona</strong> -- Por cada zona nos dados de destino de entrada, é determinado e guardado um percurso de menor custo no raster de saída. Com esta opção, o melhor percurso para cada zona começa na célula com a ponderação de distância de menor custo na zona.",
	"@@Optimal-Path-As-Raster_pathtype_tag2@@": "<strong>Melhor Único</strong> -- Para todas as células nos dados de destino de entrada, o melhor percurso deriva da célula com o mínimo de percursos de menor custo até às células de origem.",
	"@@Optimal-Path-As-Raster_pathtype_tag3@@": "<strong>Cada Célula</strong> -- Para cada célula com valores válidos nos dados de destino de entrada, é determinado o melhor percurso. Com esta opção, cada célula dos dados de destino de entrada é tratada separadamente e é determinado o melhor percurso para cada célula.",
	"@@CCDC-Analysis_bandsfordetectingchange_tag0@@": "As ID da banda a utilizar para a deteção de alterações. Se não forem fornecidas ID de banda, serão utilizadas todas as bandas do conjunto de dados raster de entrada.",
	"@@CCDC-Analysis_bandsfordetectingchange_tag1@@": "Os valores de ID devem ser números inteiros separados por espaços.",
	"@@CCDC-Analysis_bandsfortemporalmasking_tag0@@": "As ID da banda verde e da banda SWIR, a serem utilizadas para mascarar a nuvem, a sombra da nuvem e a neve. Se não forem fornecidas ID de banda, não ocorrerá máscara.",
	"@@CCDC-Analysis_bandsfortemporalmasking_tag1@@": "Os valores de ID devem ser números inteiros separados por espaços.",
	"@@CCDC-Analysis_bandsfortemporalmasking_tag2@@": "Este parâmetro especifica as bandas a utilizar para máscara de nuvem, sombra de nuvem e neve. Como a sombra de nuvem e a neve aparecem muito escuras na banda de infravermelhos de onda curta (SWIR) e as nuvens e a neve são muito claras na banda verde, recomenda-se que sejam mascarados os índices de banda para as bandas SWIR e as bandas verdes.",
	"@@CCDC-Analysis_chi-squaredthresholdfordetectchange_tag0@@": "O limite de probabilidade de alteração do chi-quadrado. Se uma observação tiver uma probabilidade de alteração calculada acima deste limite, é sinalizada como uma anomalia, que é um potencial evento de alteração. O valor padrão é 0.99.",
	"@@CCDC-Analysis_minimumconsecutiveanomalyobservations_tag0@@": "O número mínimo de observações de anomalia consecutivas que devem ocorrer antes de um evento é considerado como uma alteração. Um píxel deve ser sinalizado como anomalia durante o número especificado de secções de tempo consecutivas antes de ser considerado como uma alteração real. O padrão é 6.",
	"@@CCDC-Analysis_raster_tag0@@": "A camada raster multidimensional de entrada.",
	"@@CCDC-Analysis_updatingfittingfrequency(inyears)_tag0@@": "A frequência com que se deve atualizar o modelo da série temporal com novas observações. O padrão é atualizar o modelo a cada ano.",
	"@@CCDC-Analysis_updatingfittingfrequency(inyears)_tag1@@": "Este parâmetro define a frequência com que o modelo de série temporal será atualizado com novas observações. A atualização frequente de um modelo pode ser dispendiosa em termos de cálculo e o benefício pode ser mínimo. Por exemplo, se existirem 365 secções ou observações claras por ano no raster multidimensional e a frequência de atualização for para cada observação, o processamento será 365 vezes mais dispendioso em termos de cálculo do que a atualização anual, mas a precisão pode não ser maior.",
	"@@Trend-To-RGB_modeltype_tag0@@": "O tipo de informações do modelo a converter para RGB.",
	"@@Trend-To-RGB_modeltype_tag1@@": "Linear -- As informações de tendência linear serão convertidas para RGB. Isto é por omissão.",
	"@@Trend-To-RGB_modeltype_tag2@@": "Harmónica -- As informações de tendência harmónica serão convertidas para RGB.",
	"@@Trend-To-RGB_raster_tag0@@": "O raster de tendência de entrada.",
	"@@LandTrendr-Analysis_bestmodelproportion_tag0@@": "<p>O melhor valor de proporção de modelo. Durante o processo de seleção de modelo, a ferramenta irá calcular o valor p para cada modelo e selecionar um modelo que tenha mais vértices, mantendo o valor p menor (mais significativo) com base neste valor de proporção. Um valor de 1 significa que o modelo tem o menor valor p, mas pode não ter um grande número de vértices. A predefinição é 1,25.</p>",
	"@@LandTrendr-Analysis_maximumnumberofsegments_tag0@@": "<p>O número máximo de segmentos a serem ajustados à série temporal para cada píxel. A predefinição é 5.</p>",
	"@@LandTrendr-Analysis_minimumnumberofobservations_tag0@@": "<p>O número mínimo de observações válidas necessárias para realizar o ajuste. O número de anos no conjunto de dados multidimensional de entrada deve ser igual ou superior a este valor. A predefinição é 6.</p>",
	"@@LandTrendr-Analysis_outputotherbands_tag0@@": "<p>Especifica se outras bandas serão incluídas nos resultados.</p><ul><li>Selecionado - outras bandas serão incluídas nos resultados. As informações de segmentação e vértices da banda de segmentação inicial especificada no parâmetro <strong>Banda de Processamento</strong> também serão ajustadas às bandas restantes nas imagens multibanda. Os resultados do modelo incluirão primeiro a banda de segmentação e depois as bandas restantes.</li><li>Não Selecionado - não serão incluídas outras bandas. Esta é a predefinição.</li></ul>",
	"@@LandTrendr-Analysis_preventoneyearrecovery_tag0@@": "<p>Especifica se os segmentos que apresentam uma recuperação de um ano serão excluídos.</p><ul><li>Selecionado - os segmentos que apresentarem recuperação de um ano serão excluídos. Esta é a predefinição.</li><li>Não Selecionado - os segmentos que apresentarem uma recuperação de um ano não serão excluídos.</li></ul>",
	"@@LandTrendr-Analysis_processingband_tag0@@": "<p>A banda a ser usada para segmentar as trajetórias de valor de píxeis ao longo do tempo. Escolha a banda que irá captar melhor as alterações no elemento que pretende observar.</p>",
	"@@LandTrendr-Analysis_p-valuethreshold_tag0@@": "<p>O limiar do valor p para um modelo a ser selecionado. Após os vértices serem detetados na fase inicial de ajuste do modelo, a ferramenta irá ajustar cada segmento e calcular o valor p para determinar a significância do modelo. Na próxima iteração, o modelo irá diminuir o número de segmentos em um e recalcular o valor p. O mesmo irá continuar e, se o valor p for menor que o valor especificado neste parâmetro, o modelo será selecionado e a ferramenta deixará de procurar um modelo melhor. Se nenhum modelo for selecionado, a ferramenta irá selecionar um modelo com um valor p menor que o <strong>menor valor p × melhor valor de proporção do modelo</strong>. A predefinição é 0,01.</p>",
	"@@LandTrendr-Analysis_raster_tag0@@": "<p>A camada raster multidimensional Landsat de entrada.</p>",
	"@@LandTrendr-Analysis_recoveryhasincreasetrend_tag0@@": "<p>Especifica se a recuperação tem uma tendência crescente (positiva).</p><ul><li>Selecionado - a recuperação tem uma tendência crescente. Esta é a predefinição.</li><li>Não Selecionado - a recuperação tem uma tendência decrescente.</li></ul>",
	"@@LandTrendr-Analysis_recoverythreshold_tag0@@": "<p>O valor de limiar de recuperação em anos. Se um segmento tiver uma taxa de recuperação mais rápida do que <strong>1/limiar de recuperação</strong>, o segmento é ignorado e não incluído no modelo de série temporal. O valor tem de variar entre 0 e 1. A predefinição é de 0,25.</p>",
	"@@LandTrendr-Analysis_snappingdate_tag0@@": "<p>A data usada para selecionar uma secção para cada ano no conjunto de dados multidimensional de entrada. A secção com a data mais próxima da data de ajuste será selecionada. Este parâmetro é necessário se o conjunto de dados de entrada tiver dados subanuais.</p>",
	"@@LandTrendr-Analysis_spikethreshold_tag0@@": "<p>O limite a ser usado para atenuar picos ou anomalias na trajetória de valor de píxeis. O valor tem de variar entre 0 e 1, em que 1 significa sem atenuação. A predefinição é 0,9.</p>",
	"@@LandTrendr-Analysis_vertexcountovershoot_tag0@@": "<p>O número de vértices adicionais além de <strong>max_num_segments + 1</strong> que pode ser usado para ajustar o modelo durante a fase inicial de identificação de vértices. Posteriormente durante o processo de modelação, o número de vértices adicionais será reduzido para <strong>num_máx_segmentos + 1</strong>. A predefinição é 2.</p>",
	"@@Merge-Rasters_rasters_tag0@@": "<p>Os conjuntos de dados raster de entrada ou conjuntos de dados raster multidimensionais a integrar.</p>",
	"@@Merge-Rasters_resolveoverlapmethod_tag0@@": "<p>Especifica o método a ser usado para resolver píxeis sobrepostos nos conjuntos de dados combinados.</p><ul><li><strong>Primeiro</strong> - o valor de píxeis nas áreas sobrepostas é o valor do primeiro raster na lista de rasters de entrada. Esta é a predefinição.</li><li><strong>Último</strong> - o valor de píxeis nas áreas sobrepostas é o valor do último raster na lista de rasters de entrada.</li><li><strong>Mín.</strong> - o valor de píxeis nas áreas sobrepostas é o valor mínimo dos píxeis sobrepostos.</li><li><strong>Máx.</strong> - o valor de píxeis nas áreas sobrepostas é o valor máximo dos píxeis sobrepostos.</li><li><strong>Média</strong> - o valor de píxeis nas áreas sobrepostas é a média dos píxeis sobrepostos.</li><li><strong>Soma</strong> - o valor de píxeis nas áreas sobrepostas é a soma total dos píxeis sobrepostos.</li></ul>",
	"@@Generate-Trend_cycleunit_tag0@@": "<p>Especifica a unidade de tempo a ser usada para a duração de um ciclo harmónico.</p><ul><li><strong>Dias</strong> - a unidade para a duração do ciclo harmónico é dias.</li><li><strong>Anos</strong> - a unidade para a duração do ciclo harmónico é anos. Esta é a predefinição.</li></ul>",
	"@@Generate-Trend_dimensionname_tag0@@": "<p>A dimensão ao longo da qual uma tendência será extraída para a variável ou variáveis selecionadas na análise.</p>",
	"@@Generate-Trend_harmonicfrequency_tag0@@": "<p>A número da frequência a utilizar no ajuste à tendência. Este parâmetro especifica a frequência de ciclos num ano. O valor predefinido é 1 ou um ciclo harmónico por ano.</p><p>Este parâmetro só é incluído na análise de tendência para uma regressão harmónica.</p>",
	"@@Generate-Trend_ignorenodata_tag0@@": "<p>Especifica se os valores NoData são ignorados na análise.</p><ul><li>Selecionado - a análise irá incluir todos os píxeis válidos ao longo de uma determinada dimensão e irá ignorar quaisquer píxeis NoData. Esta é a predefinição.</li><li>Não Selecionado - a análise irá resultar em NoData se existirem valores NoData para os píxeis ao longo de uma determinada dimensão.</li></ul>",
	"@@Generate-Trend_lengthofcycle_tag0@@": "<p>O comprimento da variação periódica para o modelo. A unidade é em dias, independentemente da unidade de tempo dos dados de entrada. Por exemplo, o verde de folhas tem frequentemente um ciclo forte de variação num único ano, pelo que a duração do ciclo é de 365,25, mesmo se os dados de entrada forem verdor mensal. Os dados de temperatura horária têm um ciclo forte de variação ao longo de um único dia, pelo que a duração do ciclo é 1.</p><p>A duração predefinida é de 365,25 dias para os dados que variam num ciclo anual.</p>",
	"@@Generate-Trend_p-valueofslopecoefficient_tag0@@": "<p>Especifica se é calculada a estatística do valor p para o coeficiente de inclinação da linha de tendência.</p><ul><li>Selecionado - O valor p será calculado e exibido nos detalhes quando a função for concluída.</li><li>Não Selecionado - O valor não será calculado. Esta é a predefinição.</li></ul>",
	"@@Generate-Trend_polynomialorder_tag0@@": "<p>O número de ordem polinomial a utilizar no ajuste à tendência. Este parâmetro especifica a ordem polinomial. O valor predefinido é 2 ou um polinómio de segunda ordem.</p><p>Este parâmetro só está incluído na análise de tendência para uma regressão polinomial.</p>",
	"@@Generate-Trend_r-squared_tag0@@": "<p>Especifica se é calculada a estatística de ajustamento de R ao quadrado para a linha de ajuste de tendência.</p><ul><li>Selecionado - o R-quadrado será calculado e exibido nos detalhes quando a função for concluída.</li><li>Não Selecionado - o R-quadrado não será calculado. Esta é a predefinição.</li></ul>",
	"@@Generate-Trend_raster_tag0@@": "<p>O raster multidimensional de entrada.</p>",
	"@@Generate-Trend_rmse_tag0@@": "<p>Especifica se é gerado o erro médio quadrático (RMSE) da linha de ajuste de tendência.</p><ul><li>Selecionado - o RMSE será calculado e exibido nos detalhes quando a função for concluída. Esta é a predefinição.</li><li>Não Selecionado - o RMSE não será calculado.</li></ul>",
	"@@Generate-Trend_seasonalperiod_tag0@@": "<p>Especifica a unidade de tempo a ser usada para a duração de um período sazonal ao realizar o teste de Seasonal-Kendall.</p><ul><li>Dias - a unidade para a duração do período sazonal é dias. Esta é a predefinição.</li><li>Meses - a unidade para a duração do período sazonal é meses.</li></ul>",
	"@@Generate-Trend_trendtype_tag0@@": "<p>Especifica o tipo de linha a utilizar para se ajustar aos valores de píxel ao longo de uma dimensão.</p><ul><li><strong>Linear</strong> - ajusta os valores de píxeis para uma variável ao longo de uma linha de tendência linear. Esta é a predefinição.</li><li><strong>Harmónica</strong> - ajusta os valores de píxeis para uma variável ao longo de uma linha de tendência harmónica.</li><li><strong>Polinomial</strong> -ajusta os valores de píxeis para uma variável ao longo de uma linha de tendência polinomial.</li><li><strong>Mann-Kendall</strong> - os valores variáveis de píxeis serão avaliados com o teste de tendência Mann-Kendall.</li><li><strong>Seasonal-Kendall</strong> - os valores variáveis de píxeis serão avaliados com o teste de tendência Seasonal-Kendall.</li></ul>",
	"@@Compute-Change_cellsizetype_tag0@@": "<p>Selecione qual o tamanho da célula a utilizar no raster de saída. Se todos os tamanhos da célula de entrada forem os mesmos, todas as opções irão produzir os mesmos resultados.</p><ul><li>Primeiro De - usa o tamanho da primeira célula dos rasters de entrada.</li><li>Mín. De - usa o menor tamanho de célula de todos os rasters de entrada.</li><li>Máx. De - usa o maior tamanho de célula de todos os rasters de entrada. Esta é a predefinição.</li><li>Média De - usa o tamanho médio da célula de todos os rasters de entrada.</li><li>Último De - usa o tamanho da última célula dos rasters de entrada.</li></ul>",
	"@@Compute-Change_computechangemethod_tag0@@": "<p>O método usado para computação.</p><ul><li><strong>Diferença</strong>: a diferença matemática/subtração entre os valores de píxeis nos rasters de entrada será calculada. Esta é a predefinição.</li><li><strong>Diferença Relativa</strong>: a diferença de valores de píxeis, tendo em consideração as magnitudes dos valores sendo comparados, será calculada.</li><li><strong>Diferença Categórica</strong>: a diferença entre dois rasters categóricos ou temáticos será calculada, em que a saída contém transições de classe que ocorreram entre os dois rasters.</li><li><strong>Distância Euclidiana Espectral</strong>: a distância euclidiana entre os valores de píxeis de dois rasters multibanda será calculada.</li><li><strong>Diferença Angular Espectral</strong>: o ângulo espectral entre os valores de píxeis de dois rasters multibanda será calculado. A saída é em radianos.</li><li><strong>Banda Com Mais Alterações</strong> – a banda que tiver a maior alteração em cada píxel entre dois rasters multibanda será calculada.</li></ul><p>Se o parâmetro <strong>Calcular Método de Alteração</strong> estiver definido como <strong>Diferença Categórica</strong> e uma das entradas não for categórica, uma diferença simples será calculada.</p>",
	"@@Compute-Change_definetransitioncolors_tag0@@": "<p>Especifique o método a ser usado para simbolizar os píxeis que mudaram de classe.</p><ul><li><strong>De e Para Cores Médias</strong> - a cor do píxel será a média da cor da sua classe original e a cor da sua classe final.</li><li><strong>Usar De Cores</strong> - a cor do píxel será a cor da sua classe original.</li><li><strong>Utilizar Para Cores</strong> - a cor do píxel será a cor de sua classe final.</li></ul>",
	"@@Compute-Change_extenttype_tag0@@": "<p>Selecione que extensão deve ser usada no raster de saída:</p><ul><li>Primeiro De - usa a extensão do primeiro raster de entrada para determinar a extensão de processamento.</li><li>Interseção De - usa a extensão dos píxeis sobrepostos para determinar a extensão de processamento. Esta é a predefinição.</li><li>União De - usa a extensão de todos os rasters para determinar a extensão de processamento.</li><li>Último De - usa a extensão do último raster de entrada para determinar a extensão de processamento.</li></ul>",
	"@@Compute-Change_filtermethod_tag0@@": "<p>Selecione o método de filtragem para o cálculo de alteração categórica.</p><ul><li><strong>Manter Tudo</strong> - todas as classes são incluídas na saída e nenhuma filtragem irá ocorrer. Selecione esta opção para ver a alteração e persistência num único conjunto de dados.</li><li><strong>Manter Apenas Píxeis Alterados</strong> - apenas as classes que mudaram de um tipo de classe para outro tipo de classe são incluídas na saída. Selecione esta opção se apenas estiver interessado na alteração.</li><li><strong>Manter Apenas Píxeis Inalterados</strong> - apenas as classes que não foram alteradas são incluídas na saída. Selecione esta opção se apenas estiver interessado na persistência.</li></ul>",
	"@@Compute-Change_fromclassvalues_tag0@@": "<p>Os valores de classe de <strong>De Raster</strong> a serem incluídos no cálculo, se comparar dois rasters categóricos. Esta é uma lista delimitada por espaços de valores inteiros correspondentes ao campo <strong>ClassValue</strong> no seu conjunto de dados raster de entrada.</p>",
	"@@Compute-Change_fromraster_tag0@@": "<p>O primeiro raster a ser usado no cálculo. Para avaliar a alteração do tempo 1 (anterior) para o tempo 2 (posterior), introduza o raster de tempo 1 aqui.</p>",
	"@@Compute-Change_toclassvalues_tag0@@": "<p>Os valores de classe de <strong>Para Raster</strong> a serem incluídos no cálculo, se comparar dois rasters categóricos. Esta é uma lista delimitada por espaços de valores inteiros correspondentes ao campo <strong>ClassValue</strong> no seu conjunto de dados raster de entrada.</p>",
	"@@Compute-Change_toraster_tag0@@": "<p>O segundo raster a ser usado no cálculo. Para avaliar a alteração do tempo 1 (anterior) para o tempo 2 (posterior), introduza o raster de tempo 2.</p>",
	"@@Compute-Change_usecolormethod_tag0@@": "<p>Especifique o método a ser usado para simbolizar os píxeis que mudaram de classe.</p><ul><li><strong>De e Para Cores Médias</strong> - a cor do píxel será a média da cor da sua classe original e a cor da sua classe final.</li><li><strong>Usar De Cores</strong> - a cor do píxel será a cor da sua classe original.</li><li><strong>Utilizar Para Cores</strong> - a cor do píxel será a cor de sua classe final.</li></ul>",
	"@@Compute-Change_fieldnameforclassnamesinfromraster_tag0@@": "<p>Um campo que armazena nomes de classes na entrada <strong>De Raster</strong>. A ferramenta pesquisa automaticamente o campo <strong>ClassName</strong> ou <strong>Class_Name</strong> a utilizar.</p><p>Use esta opção se a entrada não tiver estes nomes de campo padrão.</p>",
	"@@Compute-Change_fieldnameforclassnamesintoraster_tag0@@": "<p>Um campo que armazena nomes de classes na entrada<strong>Para Raster</strong>. A ferramenta pesquisa automaticamente o campo <strong>ClassName</strong> ou <strong>Class_Name</strong> a utilizar.</p><p>Use esta opção se a entrada não tiver estes nomes de campo padrão.</p>",
	"@@Statistics_numberofcolumns_tag0@@": "<p>O número de colunas de píxel a usar numa dimensão de vizinhança focal.</p>",
	"@@Statistics_numberofrows_tag0@@": "<p>O número de linhas de píxel a utilizar numa dimensão de vizinhança focal.</p>",
	"@@Statistics_onlyfillnodatapixels_tag0@@": "<p>Preenche as lacunas NoData na saída. Isto é útil quando as suas imagens podem ter linhas ignoradas.</p>",
	"@@Statistics_raster_tag0@@": "<p>O raster de entrada para efetuar estatísticas focais.</p>",
	"@@Statistics_statisticstype_tag0@@": "<p>Seguem-se os sete tipos de funções estatísticas focais:</p><ul><li>Mínimo - calcula o valor mínimo dos píxeis dentro da vizinhança.</li><li>Máximo - calcula o valor máximo dos píxeis dentro da vizinhança.</li><li>Média - calcula o valor médio dos píxeis dentro da vizinhança. Esta é a predefinição.</li><li>Desvio Padrão - calcula o valor de desvio padrão dos pixéis dentro da vizinhança.</li><li>Mediana - calcula o valor mediano dos pixéis dentro da vizinhança.</li><li>Maioria - calcula o valor da maioria (valor que ocorre com mais frequência) dos pixéis dentro da vizinhança.</li><li>Minoria - calcula o valor da minoria (valor que ocorre com menos frequência) dos pixéis dentro da vizinhança.</li></ul>",
	"@@Detect-Change-Using-Change-Analysis_changedirection_tag0@@": "<p>Especifica a direção da alteração a ser incluída na análise.</p><p>Este parâmetro apenas está disponível quando o raster de análise de alterações de entrada é a saída das ferramentas LandTrendr.</p><ul><li><strong>Todas as direções</strong> - todas as direções da alteração estão incluídas na saída. Esta é a predefinição.</li><li><strong>Crescente</strong> - apenas a alteração na direção positiva ou crescente é incluída na saída.</li><li><strong>Decrescente</strong> - apenas a alteração na direção negativa ou decrescente é incluída na saída.</li></ul>",
	"@@Detect-Change-Using-Change-Analysis_changetype_tag0@@": "<p>Especifica as informações das alterações a calcular.</p><ul><li><strong>Hora da Última Alteração</strong> - cada píxel contém a data da alteração mais recente para esse píxel na série temporal. Esta é a predefinição.</li><li><strong>Hora da Alteração mais Antiga</strong> - cada píxel contém a data da alteração mais antiga para esse píxel na série temporal.</li><li><strong>Hora da Maior Alteração</strong> - cada píxel contém a data da alteração mais significativa para esse píxel na série temporal.</li><li><strong>Número de Alterações</strong> - cada píxel contém o número total de vezes que o píxel foi alterado na série temporal.</li><li><strong>Hora da Maior Alteração</strong> - cada píxel contém a data de alteração no final do segmento de transição mais longo na série temporal.</li><li><strong>Hora da Menor Alteração</strong> - cada píxel contém a data de alteração no final do segmento de transição mais curo na série temporal.</li><li><strong>Hora da Alteração Mais Rápida</strong> - cada píxel contém a data de alteração no final da transição que ocorreu mais rapidamente.</li><li><strong>Hora da Alteração Mais Lenta</strong>- cada píxel contém a data de alteração no final da transição que ocorreu mais lentamente.</li></ul>",
	"@@Detect-Change-Using-Change-Analysis_filterbyduration_tag0@@": "<p>Especifica se é filtrado pela duração da alteração.</p><p></p><ul><li>Selecionado - filtra os resultados por duração para que apenas as alterações que duraram um determinado período de tempo sejam incluídas na saída.</li><li>Não Selecionado - não filtra resultados por duração. Esta é a predefinição.</li></ul><p>Este parâmetro apenas está disponível quando o raster de análise de alterações de entrada é a saída das ferramentas LandTrendr.</p><p>Se este parâmetro estiver selecionado, tem de definir os parâmetros <strong>Duração Mínima</strong> e <strong>Duração Máxima</strong> para filtragem.</p>",
	"@@Detect-Change-Using-Change-Analysis_filterbymagnitude_tag0@@": "<p>Especifica se é filtrado pela magnitude da alteração</p><ul><li>Selecionado - filtra os resultados por magnitude para que apenas as alterações de uma determinada magnitude sejam incluídas na saída.</li><li>Não Selecionado - não filtra resultados por magnitude. Esta é a predefinição.</li></ul><p>.Este parâmetro apenas está disponível quando o raster de análise de alterações de entrada é a saída das ferramentas LandTrendr.</p><p>Se este parâmetro estiver selecionado, tem de definir os parâmetros <strong>Magnitude Mínima</strong> e <strong>Magnitude Máxima</strong> para filtragem.</p>",
	"@@Detect-Change-Using-Change-Analysis_filterbyyear_tag0@@": "<p>Especifica se a produção é limitada por um intervalo de anos.</p><ul><li>Selecionado - filtra os resultados para que apenas as alterações ocorridas num intervalo específico de anos sejam incluídas na saída.</li><li>Não Selecionado - não filtra resultados por ano. Esta é a predefinição.</li></ul><p>Se este parâmetro estiver selecionado, tem de definir os parâmetros<strong>Valor Mínimo</strong> e <strong>Valor Máximo</strong> para filtragem.</p>",
	"@@Detect-Change-Using-Change-Analysis_filterbystartvalue_tag0@@": "<p>Filtre os resultados por valor inicial para que apenas as alterações de um determinado valor inicial sejam incluídas na saída.</p>",
	"@@Detect-Change-Using-Change-Analysis_filterbyendvalue_tag0@@": "<p>Filtre os resultados por valor final para que apenas as alterações de um determinado valor final sejam incluídas na saída.</p>",
	"@@Detect-Change-Using-Change-Analysis_maximumnumberofchanges_tag0@@": "<p>O número máximo de alterações por píxel a ser calculado. O número introduzido corresponde ao número de bandas no raster de saída. A predefinição é 1, o que significa que apenas uma data de alteração é calculada e o raster de saída contém apenas uma banda.</p><p>Este parâmetro não está disponível quando o parâmetro <strong>Tipo de Alteração</strong> está definido como <strong>Número de alterações</strong>.</p>",
	"@@Detect-Change-Using-Change-Analysis_raster_tag0@@": "<p>O raster de análise de alterações de entrada.</p>",
	"@@Detect-Change-Using-Change-Analysis_segmentdate_tag0@@": "<p>Especifica se a data é extraída no início de um segmento de alteração ou no final.</p><p>Este parâmetro apenas está disponível quando o raster de análise de alterações de entrada é a saída das ferramentas LandTrendr.</p><ul><li><strong>Início do segmento</strong>- extrai a data no início de um segmento de alteração. Esta é a predefinição.</li><li><strong>Fim do segmento</strong> - extrai a data no fim de um segmento de alteração.</li></ul>",
	"@@Kernel-Density_areaunits_tag0@@": "<p>As unidades de área dos valores de densidade de saída</p><ul><li>Unidades de Mapa Quadradas - para o quadrado das unidades lineares da referência espacial de saída.</li><li>Milhas Quadradas - para milhas (EUA).</li><li>Quilómetros Quadrados - para quilómetros.</li><li>Acres - para acres (EUA).</li><li>Hectares - para hectares.</li><li>Metros Quadrados - para metros.</li><li>Jardas Quadradas - para jardas (EUA).</li><li>Pés Quadrados - para pés (EUA)</li><li>Polegadas Quadradas - para polegadas (EUA).</li><li>Centímetros Quadrados - para centímetros.</li><li>Milímetros Quadrados - para milímetros.</li></ul>",
	"@@Kernel-Density_cellsize_tag0@@": "<p>O tamanho do píxel para o conjunto de dados raster de saída. Se o valor<strong>Cellsize</strong> tiver sido definido nos ambientes de geoprocessamento, é a predefinição.</p>",
	"@@Kernel-Density_inputbarriers_tag0@@": "<p>O conjunto de dados que define as barreiras.</p><p>As barreiras podem ser uma camada de elementos polilinha ou poligonais.</p>",
	"@@Kernel-Density_inputfeatures_tag0@@": "<p>Os elementos de ponto ou linha de entrada para os quais se calcula a densidade.</p>",
	"@@Kernel-Density_method_tag0@@": "<p>Determina se é utilizado um caminho mais curto num método esferoide (geodésico) ou terra plana (planar).</p><ul><li><strong>Planar</strong> - usa distâncias planares entre os elementos. Esta é a predefinição.</li><li><strong>Geodésico</strong> - usa distâncias geodésicas entre elementos. Este método tem em consideração a curvatura do esferoide e lida corretamente com dados próximos dos polos e da linha de data internacional.</li></ul><p>É recomendável que use o método <strong>Geodésico</strong> com dados armazenados num sistema de coordenadas que não seja adequado para medições à distância e qualquer análise que abranja uma ampla área geográfica Por exemplo, o Web Mercator ou qualquer sistema de coordenadas geográficas deve utilizar o método <strong>Geodésico</strong>.</p>",
	"@@Kernel-Density_outputcellvalues_tag0@@": "<p>Determina o que representam os valores no raster de saída.</p><ul><li><strong>Densidades</strong> - os valores de saída representam o valor de densidade previsto. Esta é a predefinição.</li><li><strong>Contagens Expectáveis</strong> - os valores de saída representam a quantidade prevista do fenómeno em cada píxel. Uma vez que o valor do píxel está associado ao valor <strong>Cellsize</strong> especificado, o raster resultante não pode ser reamostrado para um tamanho de píxel diferente e ainda representa a quantidade do fenómeno.</li></ul>",
	"@@Kernel-Density_populationfield_tag0@@": "<p>Campo que indica valores da população para cada elemento. O valor <strong>Campo População</strong> é a contagem ou quantidade a propagar pela paisagem para criar uma superfície contínua. Os valores no <strong>Campo População</strong>podem ser um número inteiro ou ponto flutuante.</p><p>As opções e comportamentos predefinidos para o campo estão listados abaixo por ordem de prioridade.</p><ul><li>Use <strong>Nenhum</strong> se não for utilizado nenhum item ou valor especial e cada elemento será contado uma vez.</li><li>Use <strong>Forma</strong> se os elementos de entrada contiverem Z.</li><li>Caso contrário, o campo predefinido é <strong>POPULAÇÃO</strong> ou qualquer derivado aceitável da população:<ul><li><strong>POPULAÇÃOxxxx</strong> em que <strong>xxxx</strong> pode ser qualquer caráter válido, tal como <strong>POPULAÇÃO6</strong>, <strong>POPULAÇÃO1974</strong> ou <strong>POPULAÇÃOTIPODEESTRADA</strong>.</li><li><strong>POP</strong>.</li><li><strong>POPxxxx</strong>.</li><li>Se nenhuma das opções acima se aplicar, então a predefinição é <strong>Nenhum</strong>.</li></ul></li></ul>",
	"@@Kernel-Density_searchradius_tag0@@": "<p>O raio de pesquisa no qual calcular a densidade. As unidades baseiam-se na unidade linear da projeção.</p><p>Por exemplo, se as unidades estiverem em metros, para incluir todos os elementos numa vizinhança de uma milha, defina o raio de pesquisa igual a 1609,344 (dado que 1 milha é 1609,344 metros).</p>",
	"@@Zonal-Statistics_ignorenodataincalculations_tag0@@": "<p>Indica se os valores <strong>NoData</strong> em <strong>Raster de Valor</strong> irão influenciar os resultados da zona no qual se encontram.</p><ul><li><strong>Sim</strong> - em qualquer zona específica, apenas pixéis com valor em <strong>Raster de Valor</strong> serão usados para determinar o valor de saída para essa zona. Os píxeis <strong>NoData</strong> em <strong>Raster de Valor</strong> serão ignorados no cálculo estatístico. Esta é a predefinição.</li><li><strong>Não</strong> - em qualquer zona específica, se existirem pixéis<strong>NoData</strong> em <strong>Value Raster</strong>, considera-se que não existem informações suficientes para realizar cálculos estatísticos para todos os pixéis nessa zona; portanto, toda a zona irá receber o valor <strong>NoData</strong> no raster de saída.</li></ul>",
	"@@Zonal-Statistics_percentileinterpolationtype_tag0@@": "<p>Determina o método de interpolação de percentil a ser usado quando o número de valores do raster de entrada a ser calculado é par.</p><ul><li><strong>Detetar automaticamente</strong> - se o raster de valor de entrada for do tipo píxel inteiro, o método <strong>Mais próximo</strong> é usado. Se o raster de valor de entrada for do tipo píxel de ponto flutuante, o método <strong>Linear</strong> é usado. Esta é a predefinição.</li><li><strong>Mais próximo</strong> - é usado o valor disponível mais próximo do percentil pretendido. Neste caso, o tipo de píxel de saída é o mesmo do raster de valor de entrada.</li><li><strong>Linear</strong> - é usada a média ponderada dos dois valores circundantes do percentil pretendido. Neste caso, o tipo de píxel de saída é ponto flutuante.</li></ul>",
	"@@Zonal-Statistics_percentilevalue_tag0@@": "<p>O percentil a calcular. A predefinição é 90, para o 90.º percentil.</p><p>O intervalo dos valores é de 0 a 100. O 0.º percentil é essencialmente equivalente à estatística Mínimo e o 100.º percentil é equivalente a Máximo. Um valor de 50 irá essencialmente produzir o mesmo resultado que a estatística Mediana.</p>",
	"@@Zonal-Statistics_processasmultidimensional_tag0@@": "<p>Determina como o raster de valor multidimensional de entrada é processado.</p><ul><li><strong>Secção Atual</strong> - as estatísticas serão calculadas a partir da secção atual de um conjunto de dados multidimensional. Esta é a predefinição.</li><li><strong>Todas as Secções</strong> - as estatísticas serão calculadas para todas as dimensões (como tempo ou profundidade) de um conjunto de dados multidimensional.</li></ul>",
	"@@Zonal-Statistics_statisticstype_tag0@@": "<p>Tipo estatístico a calcular.</p><ul><li><strong>Média</strong> -calcula a média de todos os píxeis em <strong>Raster de Valor</strong> que pertencem à mesma zona que o píxel de saída.</li><li><strong>Maioria</strong> - determina o valor que ocorre com mais frequência de todos os píxeis em <strong>Raster de Valor</strong> que pertencem à mesma zona que o píxel de saída.</li><li><strong>Maximum</strong> - determina o valor maior de todos os píxeis em <strong>Raster de Valor</strong> que pertencem à mesma zona que o píxel de saída.</li><li><strong>Mediana</strong> - determina o valor mediano de todos os píxeis em <strong>Raster de Valor</strong> que pertencem à mesma zona que o píxel de saída.</li><li><strong>Mínimo</strong> - determina o valor menor de todos os píxeis em <strong>Raster de Valor</strong> que pertencem à mesma zona que o píxel de saída.</li><li><strong>Minoria</strong> - determina o valor que ocorre com menos frequência de todos os píxeis em <strong>Raster de Valor</strong> que pertencem à mesma zona que o píxel de saída.</li><li><strong>Percentil</strong> - calcula a média de todos os píxeis em <strong>Raster de Valor</strong> que pertencem à mesma zona que o píxel de saída O 90º percentil é calculado por predefinição. Pode determinar qual o percentil a calcular com o parâmetro <strong>Valor de Percentil</strong>.</li><li><strong>Intervalo</strong> - calcula a diferença entre o valor maior e o menor de todos os pixéis em <strong>Raster de Valor</strong> que pertencem à mesma zona que o píxel de saída.</li><li><strong>Desvio Padrão</strong> - calcula o desvio padrão de todos os píxeis em <strong>Raster de Valor</strong> que pertencem à mesma zona que o píxel de saída.</li><li><strong>Soma</strong> - calcula o valor total de todos os píxeis em <strong>Raster de Valor</strong> que pertencem à mesma zona que o píxel de saída.</li><li><strong>Variedade</strong> - calcula o número de valores únicos para todos os píxeis em <strong>Raster de Valor</strong> que pertencem à mesma zona que o píxel de saída.</li></ul>",
	"@@Zonal-Statistics_valueraster_tag0@@": "<p>Raster que contém os valores nos quais se calcula uma estatística.</p>",
	"@@Zonal-Statistics_zonefield_tag0@@": "<p>Campo que mantém os valores que definem cada zona. Pode ser um campo de número inteiro ou de string do raster da zona.</p>",
	"@@Zonal-Statistics_zoneraster_tag0@@": "<p>Conjunto de dados que define as zonas. As zonas podem ser definidas por um raster de número inteiro.</p>",
	"@@Zonal-Statistics_calculatecircularstatistics_tag0@@": "<p>Especifica como será calculado o tipo de estatísticas.</p><ul><li><strong>Aritmética</strong>: calcula estatísticas aritméticas. Esta é a predefinição.</li><li><strong>Circular</strong>: calcula estatísticas circulares adequadas para quantidades cíclicas, como a direção da bússola em graus, horas do dia e partes fracionárias de números reais.</li></ul>",
	"@@Zonal-Statistics_circularwrapvalue_tag0@@": "<p>O valor mais alto possível (limite superior) nos dados cíclicos. É um número positivo, com um valor predefinido de 360. Este valor também representa a mesma quantidade que o valor mais baixo possível (limite inferior).</p><p>Este parâmetro só é aplicável quando as estatísticas circulares são calculadas.</p>",
	"@@Boundary-Clean-function_inputraster_tag0@@": "<p>O raster de entrada para o qual o limite entre as zonas será suavizado.</p><p>Tem de ser de tipo número inteiro.</p>",
	"@@Boundary-Clean-function_runexpansionandshrinkingtwice_tag0@@": "<p>Especifica o número de vezes que o processo de suavização irá ocorrer (uma ou duas vezes).</p><ul><li><p><strong>Selecionado</strong> - executa uma operação de expansão e redução duas vezes. Na primeira vez, a operação é executada de acordo com o tipo de classificação especificado. Em seguida, uma expansão adicional e operação de redução é executada com a prioridade invertida. Esta é a predefinição.</p></li><li><p><strong>Não Selecionado</strong> - executa a operação de expansão e redução uma vez de acordo com o tipo de classificação.</p></li></ul>",
	"@@Boundary-Clean-function_sorttype_tag0@@": "<p>Especifica o tipo de classificação a ser usado no processo de suavização. A ordenação determina a prioridade pela qual as células podem expandir-se para os respetivos vizinhos.</p><p>A ordenação pode ser efetuada com base no valor da zona ou área da zona</p><ul><li><p><strong>Não ordenar</strong> - as zonas não são classificadas por tamanho. As zonas com valores maiores têm uma prioridade mais alta de se expandirem para zonas com valores menores na saída suavizada. Esta é a predefinição.</p></li><li><p><strong>Decrescente</strong> - ordena as zonas por ordem decrescente de tamanho. As zonas com áreas totais maiores têm uma prioridade mais alta de se expandirem para zonas com áreas totais menores. Esta opção tende a eliminar ou reduzir a prevalência de células de zonas menores na saída suavizada.</p></li><li><p><strong>Crescente</strong> - ordena as zonas por ordem crescente de tamanho. As zonas com áreas totais menores têm uma prioridade mais alta de se expandirem para zonas com áreas totais maiores. Esta opção tende a manter ou aumentar a prevalência de células de zonas menores na saída suavizada.</p></li></ul>",
	"@@Aggregate-Multidimensional_dimension_tag0@@": "<p>A dimensão de agregação. Esta é a dimensão ao longo da qual as variáveis serão agregadas.</p>",
	"@@Aggregate-Multidimensional_dimensiondefinition_tag0@@": "<p>Especifica o método a ser usado para filtrar os dados multidimensionais de entrada antes de executar a agregação.</p><ul><li><strong>Tudo</strong>--Será usado o intervalo completo para cada dimensão Esta é a predefinição.</li><li><strong>Por Valores</strong>--A dimensão será seccionada utilizando um valor de dimensão ou lista de valores.</li><li><strong>Por Intervalos</strong>--A dimensão será seccionada utilizando um intervalo ou uma lista de intervalos</li><li><strong>Por Iteração</strong>--A dimensão será seccionada ao longo de um tamanho de intervalo especificado.</li></ul>",
	"@@Aggregate-Multidimensional_iterationdefinitionparameters_tag0@@": "<p>Os parâmetros de Definição de Iteração permitem-lhe definir os valores de dimensão a serem usados para filtrar os dados multidimensionais de entrada para análise quando o parâmetro <strong>Definição de Dimensão</strong> é definido como <strong>Por Iteração</strong>.</p><ul><li><strong>Dimensão</strong>--A dimensão a ser usada para filtrar.</li><li><strong>Início da primeira iteração</strong>--O início do primeiro intervalo. Este intervalo é usado para iterar através do conjunto de dados.</li><li><strong>Fim da primeira iteração</strong>--O fim do primeiro intervalo. Este intervalo é usado para iterar através do conjunto de dados.</li><li><strong>Etapa</strong>--A frequência com que os dados serão seccionados.</li><li><strong>Unidade</strong>--A unidade de iteração.</li></ul>",
	"@@Aggregate-Multidimensional_keywordinterval_tag0@@": "<p>Especifica o intervalo de palavras-chave que será utilizado durante a agregação ao longo da dimensão.</p><p>Este parâmetro é necessário quando o parâmetro <strong>Tipo</strong> é definido como <strong>Palavra-chave de Intervalo</strong>.</p><ul><li><strong>A cada hora</strong>--Os valores dos dados são agregados em etapas temporais horárias e o resultado inclui todas as horas na série de tempo. Esta é a predefinição.</li><li><strong>Diariamente</strong>--Os valores dos dados são agregados em etapas temporais diárias e o resultado inclui todos os dias na série de tempo.</li><li><strong>Semanalmente </strong>--Os valores dos dados são agregados em etapas temporais semanais e o resultado inclui todas as semanas na série de tempo.</li><li><strong>A cada 10 dias</strong>--Os valores dos dados são agregados em 3 períodos de 10 dias cada. O último período pode conter mais ou menos que 10 dias. O resultado inclui 3 secções para cada mês.</li><li><strong>A cada 5 dias</strong>--Os valores dos dados são agregados em 6 períodos de 5 dias cada. O último período pode conter mais ou menos que 5 dias. O resultado inclui 6 secções para cada mês.</li><li><strong>Mensalmente</strong>--Os valores dos dados são agregados em etapas temporais mensais e o resultado inclui todos meses na série de tempo.</li><li><strong>Trimestralmente</strong>--Os valores dos dados são agregados em etapas temporais trimestrais e o resultado inclui todos os trimestres na série de tempo.</li><li><strong>Anualmente</strong>--Os valores dos dados são agregados em etapas temporais anuais e o resultado inclui todos os anos na série de tempo.</li><li><strong>Diariamente recorrente</strong>--Os valores dos dados são agregados em etapas temporais diárias e o resultado inclui um valor agregado por dia juliano. O resultado inclui, no máximo, 366 secções de tempo diárias.</li><li><strong>Semanalmente recorrente</strong>--Os valores dos dados são agregados em etapas temporais semanais e o resultado inclui um valor agregado por semana. O resultado inclui, no máximo, 53 secções de tempo semanais.</li><li><strong>Mensalmente recorrente</strong>--Os valores dos dados são agregados em etapas temporais semanais e o resultado inclui um valor agregado por mês. O resultado inclui, no máximo, 12 secções de tempo mensais.</li><li><strong>Recurring quarterly</strong>--Os valores dos dados são agregados em etapas temporais trimestrais e os resultados incluem um valor agregado por trimestre. O resultado inclui, no máximo, 4 secções de tempo trimestrais.</li></ul>",
	"@@Aggregate-Multidimensional_operation_tag0@@": "<p>Especifica o método matemático que será utilizado para combinar as secções agregadas num intervalo.</p><ul><li><strong>Maioria</strong>--O valor de píxel que ocorreu com mais frequência será calculado em todas as secções no intervalo.</li><li><strong>Máximo</strong>--O valor máximo de um píxel em todas as secções no intervalo.</li><li><strong>Média</strong>--A média dos valores de um píxel em todas as secções no intervalo. Esta é a predefinição.</li><li><strong>Mediana</strong>--O valor mediano de um píxel em todas as secções no intervalo.</li><li><strong>Mínimo </strong>--O valor mínimo de um píxel em todas as secções no intervalo.</li><li><strong>Minoria</strong>--O valor de píxel que ocorreu com menos frequência será calculado em todas as secções no intervalo.</li><li><strong>Intervalo</strong>--O intervalo de valores para um píxel em todas as secções no intervalo.</li><li><strong>Standard Desvio Padrão</strong>--O desvio padrão dos valores de um píxel em todas as secções no intervalo.</li><li><strong>Soma</strong>--A soma dos valores de um píxel em todas as secções no intervalo.</li><li><strong>Variedade</strong>--O número de valores únicos de um píxel em todas as secções no intervalo.</li></ul><p>Todas as opções também têm um equivalente com a opção Ignorar NoData. Estas opções irão realizar a operação matemática em todos os píxeis válidos ao longo da dimensão e ignorar quaisquer píxeis NoData.</p>",
	"@@Aggregate-Multidimensional_ranges_tag0@@": "<p>Os intervalos especificados numa tabela são utilizados para agregar grupos de valores. Os valores mínimo e máximo especificam o intervalo a ser incluído.</p><p>Este parâmetro é necessário quando o parâmetro<strong>Tipo</strong> é definido como <strong>Intervalos</strong>.</p>",
	"@@Aggregate-Multidimensional_raster_tag0@@": "<p>O raster multidimensional de entrada.</p>",
	"@@Aggregate-Multidimensional_type_tag0@@": "<p>Especifica o intervalo de dimensão para o qual os dados serão agregados.</p><ul><li><strong>Todos</strong>--Os dados das variáveis serão agregados em todas as secções. Esta é a predefinição.</li><li><strong>Palavra-chave de Intervalo</strong>--Os dados das variáveis serão agregados utilizando um intervalo normalmente conhecido.</li><li><strong>Valor de Intervalo</strong>--Os dados das variáveis serão agregados utilizando um intervalo e unidade especificado pelo utilizador.</li><li><strong>Intervalos</strong>--Os dados das variáveis serão agregados entre pares especificados de valores ou datas.</li></ul>",
	"@@Aggregate-Multidimensional_valueinterval_tag0@@": "<p>O tamanho do intervalo usado para a agregação.</p><p>Este parâmetro é necessário quando o parâmetro <strong>Tipo</strong> é definido como <strong>Valor de Intervalo</strong>.</p>",
	"@@Aggregate-Multidimensional_values_tag0@@": "<p>Os valores de dimensão a serem usados para filtrar os dados multidimensionais de entrada para análise. Este parâmetro é necessário quando o parâmetro <strong>Definição de Dimensão</strong> é definido como <strong>Por Valores</strong>.</p>",
	"@@Aggregate-Multidimensional_variables_tag0@@": "<p>A variável ou variáveis que serão agregadas ao longo de uma determinada dimensão.</p>",
	"@@Predict-Using-Regression_inputdefinitionfile_tag0@@": "<p>O ficheiro de definição de regressão Esri de entrada (<strong>.ecd</strong>) que contém as estatísticas e informações para o conjunto de dados específico, modelo de regressão e atributos escolhidos.</p>",
	"@@Predict-Using-Regression_rasters_tag0@@": "<p>O conjunto ou conjuntos de dados raster que representam as variáveis de previsão. Pode ser um raster de banda única, raster de banda múltipla, raster multidimensional, conjunto de dados em mosaico ou uma coleção de raster.</p>",
	"@@Cell-Statistics_operation_tag0@@": "<p>O tipo de cálculo estatístico que pretende realizar.</p><p>As estatísticas disponíveis são <strong>Maioria</strong>, <strong>Máximo</strong>, <strong>Média</strong>, <strong>Mediana</strong>, <strong>Mínimo</strong>, <strong>Minoria</strong>, <strong>Percentil</strong>, <strong>Intervalo</strong>, <strong>Desvio Padrão</strong>, <strong>Soma </strong> e <strong>Variedade</strong>.</p><p>A predefinição é <strong>Média</strong>.</p>",
	"@@Colormap-To-RGB_randomlyassigncolortounmappedpixels_tag0@@": "<p>As cores são atribuídas aleatoriamente a píxeis que não estão incluídos no mapa de cores.</p><ul><li>Não selecionado: não é atribuída uma cor aos píxeis não mapeados. Esta é a predefinição.</li><li>Selecionado: é atribuída uma cor aos píxeis não mapeados.</li></ul>",
	"@@Pansharpen_sensor_tag0@@": "<p>Quando é escolhido o algoritmo Gram-Schmidt, também pode especificar o sensor que recolheu a entrada raster multibanda. A escolha do tipo de sensor irá definir as ponderações de banda adequadas.</p>",
	"@@Dimensional-Moving-Statistics_backwardwindow_tag0@@": "<p>O valor de quantas secções antes ou acima a serem incluídas na janela definida. O valor tem de ser um número inteiro positivo de 1 a 100. A predefinição é 1.</p><p>A unidade deste parâmetro é a secção.</p>",
	"@@Dimensional-Moving-Statistics_circularwrapvalue_tag0@@": "<p>O valor que será usado para arredondar um valor linear para o intervalo de uma determinada média circular.</p><p>O respetivo valor tem de ser positivo. O valor predefinido é 360 graus.</p>",
	"@@Dimensional-Moving-Statistics_dimension_tag0@@": "<p>O nome da dimensão ao longo da qual a janela se irá mover.</p><p>O valor predefinido é a primeira dimensão diferente de x,y encontrada no raster multidimensional de entrada.</p>",
	"@@Dimensional-Moving-Statistics_forwardwindow_tag0@@": "<p>O valor de quantas secções depois ou abaixo a serem incluídas na janela definida. O valor tem de ser um número inteiro positivo de 1 a 100. A predefinição é 1.</p><p>A unidade deste parâmetro é a secção.</p>",
	"@@Dimensional-Moving-Statistics_inputraster_tag0@@": "<p>O raster de entrada só pode ser um raster multidimensional no formato Cloud Raster Format (<strong>.crf</strong>file).</p>",
	"@@Dimensional-Moving-Statistics_nodatahandling_tag0@@": "<p>Especifica como os valores NoData serão tratados pelo cálculo estatístico.</p><ul><li><strong>Dados</strong>: os valores NoData na entrada de valores serão ignorados nos resultados da janela definida em que se enquadram. Esta é a predefinição.</li><li><strong>NoData</strong>: os valores de saída serão NoData se existir algum valor NoData na entrada dentro da janela definida.</li><li><strong>Preencher NoData</strong>: os valores das células NoData serão substituídos com a estatística selecionada dentro da janela definida.</li></ul>",
	"@@Dimensional-Moving-Statistics_percentileinterpolationtype_tag0@@": "<p>Especifica o método de interpolação a ser utilizado quando o valor do percentil fica entre dois valores de célula de entrada.</p><ul><li><strong>Detetar automaticamente</strong>: se o raster de entrada for do tipo píxel inteiro, o método <strong>Mais próximo</strong> será usado. Se o raster de entrada for do tipo píxel flutuante, o método <strong>Linear</strong> será usado. Esta é a predefinição.</li><li><strong>Mais próximo</strong>: será usado o valor disponível mais próximo do percentil. Neste caso, o tipo de píxel de saída será o mesmo do raster de valor de entrada.</li><li><strong>Linear</strong>: será usada a média ponderada dos dois valores circundantes do percentil. Neste caso, o tipo de píxel de saída será ponto flutuante.</li></ul>",
	"@@Dimensional-Moving-Statistics_percentilevalue_tag0@@": "<p>O percentil que será calculado quando <strong>Percentil</strong> está selecionado como o tipo de estatística. A predefinição é 90, para o 90.º percentil.</p><p>O intervalo dos valores é de 0 a 100. O 0.º percentil é essencialmente equivalente à estatística mínima e o 100.º percentil equivalente à máxima, com a exceção de que o resultado será o ponto flutuante. Um valor de 50 irá produzir o mesmo resultado que a estatística mediana.</p>",
	"@@Dimensional-Moving-Statistics_statisticstype_tag0@@": "<p>Especifica o tipo de estatística a ser calculada.</p><p></p><ul><li><strong>Média</strong>: a média (valor médio) das células na janela definida será calculada. Esta é a predefinição.</li><li><strong>Média Circular</strong>: a média circular das células na janela definida será calculada. Quando este tipo de estatística é selecionado, o parâmetro <strong>Valor de Moldagem Circular</strong> fica disponível.</li><li><strong>Maioria</strong>: a maioria (valor que ocorre com mais frequência) das células na janela definida será identificada.</li><li><strong>Máximo</strong>: o máximo (valor maior) das células na janela definida será identificado.</li><li><strong>Mediana</strong>: a mediana das células na vizinhança será identificada.</li><li><strong>Mínimo</strong>: o mínimo (menor valor) das células na vizinhança será identificado.</li><li><strong>Percentil</strong>: será calculado um percentil das células na vizinhança. Quando este tipo de estatística é selecionado, os parâmetros <strong>Valor de Percentil</strong> e <strong>Tipo de Interpolação de Percentil</strong> ficam disponíveis. Use estes novos parâmetros para designar o percentil a ser calculado e escolha o tipo de interpolação a ser usado, respetivamente.</li></ul>",
	"@@Interpolate-Raster-By-Dimension_dimension_tag0@@": "<p>A dimensão a ser usada para a interpolação.</p><p>Este parâmetro é necessário quando o parâmetro <strong>Definição de Dimensão</strong> está definido como <strong>Por Intervalo</strong>.</p>",
	"@@Interpolate-Raster-By-Dimension_dimensiondefinition_tag0@@": "<p>Especifica o método que será usado para filtrar os dados multidimensionais de entrada antes de realizar a interpolação.</p><ul><li><strong>Por Valores</strong>: a dimensão será seccionada com um valor de dimensão ou lista de valores.</li><li><strong>Por Intervalo</strong>: a dimensão será seccionada com um intervalo ou uma lista de intervalos.</li><li><strong>Por Raster de Destino</strong>: a dimensão será seccionada com um raster multidimensional de destino específico.</li></ul>",
	"@@Interpolate-Raster-By-Dimension_endofinterval_tag0@@": "<p>O fim do intervalo, que é usado para iterar pelo conjunto de dados.</p><p>Este parâmetro é necessário quando o parâmetro <strong>Definição de Dimensão</strong> está definido como <strong>Por Intervalo</strong>.</p>",
	"@@Interpolate-Raster-By-Dimension_ignorenodata_tag0@@": "<p>Especifica se os valores NoData serão ignorados na análise.</p><ul><li>Não selecionado: a análise irá resultar em NoData se existirem valores NoData em secções adjacentes. Esta é a predefinição.</li><li>Selecionado: a análise só irá usar secções que tenham píxeis válidos e ignorar secções NoData.</li></ul>",
	"@@Interpolate-Raster-By-Dimension_interpolationmethod_tag0@@": "<p>Especifica o método que será usado para interpolar o raster.</p><ul><li><strong>Linear</strong>: a saída será interpolada linearmente com as secções adjacentes. Esta é a predefinição.</li><li><strong>Vizinho Mais Próximo</strong>: a saída irá usar a secção adjacente mais próxima.</li></ul>",
	"@@Interpolate-Raster-By-Dimension_raster_tag0@@": "<p>O raster multidimensional de entrada.</p>",
	"@@Interpolate-Raster-By-Dimension_startofinterval_tag0@@": "<p>O início do intervalo, que é usado para iterar pelo conjunto de dados.</p><p>Este parâmetro é necessário quando o parâmetro <strong>Definição de Dimensão</strong> está definido como <strong>Por Intervalo</strong>.</p>",
	"@@Interpolate-Raster-By-Dimension_step_tag0@@": "<p>A frequência com que os dados serão interpolados.</p><p>Este parâmetro é necessário quando o parâmetro <strong>Definição de Dimensão</strong> está definido como <strong>Por Intervalo</strong>.</p>",
	"@@Interpolate-Raster-By-Dimension_targetraster_tag0@@": "<p>O raster de destino especificado pela definição de dimensão.</p><p>Este parâmetro é necessário quando o parâmetro <strong>Definição de Dimensão</strong> está definido como <strong>Por Raster de Destino</strong>.</p>",
	"@@Interpolate-Raster-By-Dimension_unit_tag0@@": "<p>A unidade de intervalo.</p><p>Este parâmetro é necessário quando o parâmetro <strong>Definição de Dimensão</strong> está definido como <strong>Por Intervalo</strong>.</p>",
	"@@Interpolate-Raster-By-Dimension_values_tag0@@": "<p>Os valores dimensionais a serem usados para filtrar os dados multidimensionais de entrada para análise.</p><p>Este parâmetro é necessário quando o parâmetro <strong>Definição de Dimensão</strong>está definido como <strong>Por Valores</strong>.</p>",
	"@@Interpolate-Raster-By-Dimension_variables_tag0@@": "<p>A variável ou variáveis que serão interpoladas pela definição de dimensão.</p>",
	"@@Terrain-Flatten_calibrationtype_tag0@@": "<p>Especifica se a saída terá o terreno aplanado com <strong>Sigma-zero</strong> ou <strong>Gama-zero</strong>.</p><ul><li><strong>Gama-zero</strong>: a retrodispersão beta-zero será normalizada com a área unitária de um plano localmente tangente ao DEM, vulgarmente conhecido como o ângulo de incidência local. Esta é a predefinição.</li><li><strong>Sigma-zero</strong>: a retrodispersão beta-zero beta será normalizada com um DEM para calcular a área.</li></ul>",
	"@@Terrain-Flatten_dem_tag0@@": "<p>O DEM de entrada.</p><p>O DEM é utilizado para estimar a área iluminada local.</p>",
	"@@Terrain-Flatten_geoid_tag0@@": "<p>Especifica se o sistema de referência vertical do DEM de entrada será transformado em altura elipsoidal. A maioria dos conjuntos de dados de elevação são referenciados à altura ortométrica do nível do mar, pelo que é necessária uma correção nestes casos para converter para altura elipsoidal.</p><ul><li>Selecionado: será efetuada uma correção do geoide para converter a altura ortométrica em altura elipsoidal (com base no geoide EGM96). Esta é a predefinição.</li><li>Não selecionado: não será efetuada qualquer correção do geoide. Utilize esta opção apenas se o DEM for expresso em altura elipsoidal.</li></ul>",
	"@@Terrain-Flatten_raster_tag0@@": "<p>Os dados de radar de entrada.</p><p>Este raster tem de ser primeiramente calibrado radiometricamente a beta-zero.</p>",
	"@@Create-Color-Composite_blueexpression_tag0@@": "<p>O cálculo atribuído à terceira banda.</p><p>Um nome de banda, ID de banda ou uma expressão algébrica com as bandas.</p><p>Os operadores suportados são unários: mais (+), menos (-), multiplicação (*) e divisão (/).</p>",
	"@@Create-Color-Composite_greenexpression_tag0@@": "<p>O cálculo atribuído à segunda banda.</p><p>Um nome de banda, ID de banda ou uma expressão algébrica com as bandas.</p><p>Os operadores suportados são unários: mais (+), menos (-), multiplicação (*) e divisão (/).</p>",
	"@@Create-Color-Composite_inputraster_tag0@@": "<p>Os dados raster multibanda de entrada.</p>",
	"@@Create-Color-Composite_method_tag0@@": "<p>Especifica o método que será utilizado para extrair bandas.</p><ul><li>Nomes de Bandas: será utilizado o nome de banda que representar o intervalo de comprimento de onda no espectro eletromagnético (como Vermelho, Infravermelho Próximo ou Infravermelho Térmico) ou a polarização (como VH, VV, HH ou HV). Esta é a predefinição.</li><li>IDs de Banda: o número de banda (como B1, B2, ou B3) será utilizado.</li></ul>",
	"@@Create-Color-Composite_redexpression_tag0@@": "<p>O cálculo atribuído à primeira banda.</p><p>Um nome de banda, ID de banda ou uma expressão algébrica com as bandas.</p><p>Os operadores suportados são unários: mais (+), menos (-), multiplicação (*) e divisão (/).</p>",
	"@@Surface-Parameters_localsurfacetype_tag0@@": "<p>Selecione o tipo de função de superfície que será colocada em redor da célula de destino.</p><ul><li>Quadrática: uma função de superfície quadrática será colocada nas células na vizinhança. Este é o tipo predefinido.</li><li>Biquadrática: uma função de superfície biquadrática será colocada nas células na vizinhança.</li></ul>",
	"@@Surface-Parameters_neighborhooddistance_tag0@@": "<p>A saída será calculada ao longo desta distância a partir do centro da célula de destino. Determina o tamanho da vizinhança. O valor predefinido é o tamanho da célula raster de entrada, resultando numa vizinhança de 3 por 3.</p>",
	"@@Surface-Parameters_outputslopemeasurement_tag0@@": "<p>As unidades de medida (graus ou percentagens) que serão utilizadas para o raster de declive de saída. Este parâmetro só está ativo quando o </strong><strong>tipo de parâmetro<strong> é Declive</strong>.</p><ul><li>Grau: a inclinação do declive será calculada em graus. Esta é a predefinição.</li><li>Aumento percentual: a inclinação do declive será calculada como aumento percentual, também referido como declive percentual.</li></ul>",
	"@@Surface-Parameters_parametertype_tag0@@": "<p>Especifica o tipo de parâmetro de superfície de saída que será calculado.</p><ul><li>Declive: a taxa de mudança de elevação será calculada. Esta é a predefinição.</li><li>Aspeto: a direção descendente da taxa máxima de mudança para cada célula será calculada.</li><li>Curvatura média: a curvatura geral da superfície será medida. É calculada como a média da curvatura mínima e máxima. Esta curvatura descreve a convexidade intrínseca ou concavidade da superfície, independentemente da direção ou da influência da gravidade.</li><li>Curvatura Tangencial (contorno normal): a curvatura geométrica normal perpendicular à linha de declive, tangente à linha de contorno, será medida. Esta curvatura é tipicamente aplicada para caracterizar a convergência ou divergência do fluxo ao longo da superfície.</li><li>Curvatura de Perfil (linha de declive normal): a curvatura geométrica normal ao longo da linha de declive será medida. Esta curvatura é normalmente aplicada para caracterizar a aceleração e desaceleração do fluxo pela superfície.</li><li>Curvatura do Plano (contorno projetado): a curvatura ao longo das linhas de contorno será medida.</li><li>Torção Geodésica do Contorno: a taxa de variação do ângulo de declive ao longo das linhas de contorno será medida.</li><li>Curvatura Gaussiana: a curvatura geral da superfície será medida. É calculada como o produto da curvatura mínima e máxima.</li><li>Curvatura de Casorati: a curvatura geral da superfície será medida. Pode ser zero ou qualquer outro número positivo.</li></ul>",
	"@@Surface-Parameters_projectgeodesicazimuths_tag0@@": "<p>Especifica se os azimutes geodésicos serão projetados para corrigir a distorção angular causada pela referência espacial de saída. Este parâmetro só está ativo quando o <strong>tipo de parâmetro</strong> é <strong>Aspeto</strong>.</p><ul><li>Não selecionada: os azimutes geodésicos não serão projetados. Esta é a predefinição.</li><li>Selecionada: os azimutes geodésicos serão projetados.</li></ul>",
	"@@Surface-Parameters_raster_tag0@@": "<p>O raster de superfície de entrada. Pode ser um número inteiro ou um raster de ponto flutuante.</p>",
	"@@Surface-Parameters_useadaptiveneighborhood_tag0@@": "<p>Especifica se a distância da vizinhança irá variar com as alterações da paisagem (adaptativa). A distância máxima é determinada pela distância da vizinhança. A distância mínima é o tamanho da célula raster de entrada.</p><ul><li>Não selecionada: uma distância de vizinhança única (fixa) será utilizada em todas as localizações. Esta é a predefinição.</li><li>Selecionada: será utilizada uma distância de vizinhança adaptativa em todas as localizações.</li></ul>",
	"@@Surface-Parameters_useequatorialaspect_tag0@@": "<p>Especifica se o aspeto será medido a partir de um ponto no equador ou a partir do polo norte. Este parâmetro só está ativo quando o <strong>tipo de parâmetro</strong> é <strong>Aspeto</strong>.</p><ul><li>Não selecionada: o aspeto será medido a partir do polo norte. Esta é a predefinição.</li><li>Selecionada: o aspeto será medido a partir de um ponto no equador.</li></ul>",
	"@@Surface-Parameters_zunit_tag0@@": "<p>A unidade linear de valores z verticais.</p><p>É definida por um sistema de coordenadas verticais, se existir. Se não existir um sistema de coordenadas verticais, a unidade z deve ser definida a partir da lista de unidades, para assegurar um cálculo geodésico correto.</p><ul><li>Polegada: a unidade linear será polegadas.</li><li>Pé: a unidade linear será pés.</li><li>Jarda: a unidade linear será jardas.</li><li>Milha EUA: a unidade linear será milhas.</li><li>Milha náutica: a unidade linear será milhas náuticas.</li><li>Milímetro: a unidade linear será milímetros.</li><li>Centímetro: a unidade linear será centímetros.</li><li>Metro: a unidade linear será metros. Esta é a predefinição.</li><li>Quilómetro: a unidade linear será quilómetros.</li><li>Decímetro: a unidade linear será decímetros.</li></ul>",
	"@@Surface-Parameters_analysismask_tag0@@": "<p>Um raster que especifica as localizações onde a análise irá ocorrer.</p><p>O raster pode ser do tipo inteiro ou de ponto flutuante.</p><p>Todas as células com um valor válido, incluindo zero, irão compor a máscara. As células que são NoData na entrada da máscara serão NoData na saída.</p>",
	"@@Geometric-Median_cellsizetype_tag0@@": "<p>Selecione qual o tamanho da célula a utilizar no raster de saída. Se todos os tamanhos da célula de entrada forem os mesmos, todas as opções irão produzir os mesmos resultados.</p><ul><li>Primeiro De - usa o tamanho da primeira célula dos rasters de entrada.</li><li>Mín. De - usa o menor tamanho de célula de todos os rasters de entrada.</li><li>Máx. De - usa o maior tamanho de célula de todos os rasters de entrada. Esta é a predefinição.</li><li>Média De - usa o tamanho médio da célula de todos os rasters de entrada.</li><li>Último De - usa o tamanho da última célula dos rasters de entrada.</li></ul>",
	"@@Geometric-Median_epsilon_tag0@@": "<p>Especifica o valor de convergência entre duas iterações consecutivas. Quando epsilon é menor ou igual ao valor especificado, a iteração pára e o resultado da última iteração é utilizado.</p>",
	"@@Geometric-Median_extenttype_tag0@@": "<p>Selecione que extensão deve ser usada no raster de saída:</p><ul><li><p>Primeiro De: usa a extensão do primeiro raster de entrada para determinar a extensão de processamento.</p></li><li>Interseção De: usa a extensão dos píxeis sobrepostos para determinar a extensão de processamento Esta é a predefinição.</li><li>União De - usa a extensão de todos os rasters para determinar a extensão de processamento.</li><li>Último De - usa a extensão do último raster de entrada para determinar a extensão de processamento.</li></ul>",
	"@@Geometric-Median_maximumnumberofiterations_tag0@@": "<p>Especifica o número máximo de iterações a concluir. O cálculo termina quando este valor é atingido, independentemente da definição de <strong>Epsilon</strong>.</p>",
	"@@Geometric-Median_rasters_tag0@@": "<p>Os rasters multibanda de entrada.</p>",
	"@@Least-Cost-Corridor_inputaccumulativecostdistanceraster1_tag0@@": "<p>O raster de entrada que representa a distância de custo acumulado a partir da primeira fonte.</p><p>Deve ser uma saída de distância de custo acumulado da função <strong>Acumulação de Distância</strong> ou <strong>Atribuição de Distância</strong>.</p>",
	"@@Least-Cost-Corridor_inputaccumulativecostdistanceraster2_tag0@@": "<p>O raster de entrada que representa a distância de custo acumulado a partir da segunda fonte.</p><p>Deve ser uma saída de distância de custo acumulado da função <strong>Acumulação de Distância</strong> ou <strong>Atribuição de Distância</strong>.</p>",
	"@@Least-Cost-Corridor_inputbackdirectionraster1_tag0@@": "<p>O raster da direção de retorno de entrada da primeira fonte.</p><p>É um conjunto de dados raster que identifica a direção da célula seguinte ao longo do caminho de menor custo de regresso à primeira fonte. É a saída da função <strong>Acumulação de Distância</strong> ou <strong>Atribuição de Distância</strong>.</p>",
	"@@Least-Cost-Corridor_inputbackdirectionraster2_tag0@@": "<p>O raster da direção de retorno de segunda da primeira fonte.</p><p>É um conjunto de dados raster que identifica a direção da célula seguinte ao longo do caminho de menor custo de regresso à primeira fonte. É a saída da função <strong>Acumulação de Distância</strong> ou <strong>Atribuição de Distância</strong>.</p>",
	"@@Least-Cost-Corridor_threshold_tag0@@": "<p>Uma percentagem ou limiar de custo acumulado que irá determinar se uma determinada célula será incluída no raster de corredor de saída.</p><p>Quando o parâmetro <strong>Método de limiar</strong> está definido para <strong>Percentagem de menor custo</strong>, o valor especificado indica o aumento percentual a aplicar a partir do valor mínimo da soma dos rasters de distância de custo acumulado. Quando o parâmetro <strong>Método de limiar</strong> está definido para <strong>Custo acumulado</strong>, o valor indica as células que têm um custo acumulado somado igual ou inferior ao valor que será incluído no corredor.</p><p>Este parâmetro só está ativo se o parâmetro <strong>Método de limiar</strong> estiver definido para <strong>Percentagem de menor custo</strong> ou <strong>Custo acumulado</strong>.</p>",
	"@@Least-Cost-Corridor_thresholdmethod_tag0@@": "<p>Especifica como o limiar será definido.</p><p></p><ul><li><strong>Sem limiar</strong>: não será aplicado qualquer limiar e o corredor resultante irá cobrir toda a extensão dos rasters de entrada. Esta é a predefinição.</li><li><strong>Percentagem de Menor Custo</strong>: o limiar será definido como uma percentagem do valor mínimo da soma das distâncias de custos acumulados.</li><li><strong>Custo Acumulado</strong>: o limiar será definido em unidades de distância de custo acumulado.</li></ul>"
};
const helpTexts_ptPT = {
	rfxArgsHelpTexts: rfxArgsHelpTexts
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (helpTexts_ptPT);


//# sourceMappingURL=help-texts.pt-PT-1ddbad3e.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,