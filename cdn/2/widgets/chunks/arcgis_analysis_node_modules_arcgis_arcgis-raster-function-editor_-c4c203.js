"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_arcgis-raster-function-editor_-c4c203"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/common-strings.de-1454f434.js":
/*!**************************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/common-strings.de-1454f434.js ***!
  \**************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   addRaster: () => (/* binding */ addRaster),
/* harmony export */   addScalar: () => (/* binding */ addScalar),
/* harmony export */   breadcrumb: () => (/* binding */ breadcrumb),
/* harmony export */   breadcrumbEditor: () => (/* binding */ breadcrumbEditor),
/* harmony export */   cancel: () => (/* binding */ cancel),
/* harmony export */   category: () => (/* binding */ category),
/* harmony export */   categoryNames: () => (/* binding */ categoryNames),
/* harmony export */   close: () => (/* binding */ close),
/* harmony export */   copy: () => (/* binding */ copy),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   defaultModelName: () => (/* binding */ defaultModelName),
/* harmony export */   definitionQuery: () => (/* binding */ definitionQuery),
/* harmony export */   description: () => (/* binding */ description),
/* harmony export */   deselectFunction: () => (/* binding */ deselectFunction),
/* harmony export */   details: () => (/* binding */ details),
/* harmony export */   dialogTitle: () => (/* binding */ dialogTitle),
/* harmony export */   dontSave: () => (/* binding */ dontSave),
/* harmony export */   enterFURL: () => (/* binding */ enterFURL),
/* harmony export */   enterURL: () => (/* binding */ enterURL),
/* harmony export */   error: () => (/* binding */ error),
/* harmony export */   errorTitle: () => (/* binding */ errorTitle),
/* harmony export */   everyone: () => (/* binding */ everyone),
/* harmony export */   f32PixelType: () => (/* binding */ f32PixelType),
/* harmony export */   f64PixelType: () => (/* binding */ f64PixelType),
/* harmony export */   failedToLoadLayer: () => (/* binding */ failedToLoadLayer),
/* harmony export */   folder: () => (/* binding */ folder),
/* harmony export */   general: () => (/* binding */ general),
/* harmony export */   groupFieldName: () => (/* binding */ groupFieldName),
/* harmony export */   groupItemsBy: () => (/* binding */ groupItemsBy),
/* harmony export */   groups: () => (/* binding */ groups),
/* harmony export */   invalidRFTMessage: () => (/* binding */ invalidRFTMessage),
/* harmony export */   isDataset: () => (/* binding */ isDataset),
/* harmony export */   isPublic: () => (/* binding */ isPublic),
/* harmony export */   item: () => (/* binding */ item),
/* harmony export */   itemGroup: () => (/* binding */ itemGroup),
/* harmony export */   loadingLayer: () => (/* binding */ loadingLayer),
/* harmony export */   matchVariables: () => (/* binding */ matchVariables),
/* harmony export */   mosaic: () => (/* binding */ mosaic),
/* harmony export */   multidimensionalRules: () => (/* binding */ multidimensionalRules),
/* harmony export */   name: () => (/* binding */ name),
/* harmony export */   noTagErrorMsg: () => (/* binding */ noTagErrorMsg),
/* harmony export */   noTitleErrorMsg: () => (/* binding */ noTitleErrorMsg),
/* harmony export */   noTitleTagErrorMsg: () => (/* binding */ noTitleTagErrorMsg),
/* harmony export */   ok: () => (/* binding */ ok),
/* harmony export */   organization: () => (/* binding */ organization),
/* harmony export */   outputPixelType: () => (/* binding */ outputPixelType),
/* harmony export */   owner: () => (/* binding */ owner),
/* harmony export */   parameter: () => (/* binding */ parameter),
/* harmony export */   parameters: () => (/* binding */ parameters),
/* harmony export */   properties: () => (/* binding */ properties),
/* harmony export */   raster: () => (/* binding */ raster),
/* harmony export */   rasterFunctionEditor: () => (/* binding */ rasterFunctionEditor),
/* harmony export */   rasterFunctions: () => (/* binding */ rasterFunctions),
/* harmony export */   rfxLicenseInfo: () => (/* binding */ rfxLicenseInfo),
/* harmony export */   s16PixelType: () => (/* binding */ s16PixelType),
/* harmony export */   s32PixelType: () => (/* binding */ s32PixelType),
/* harmony export */   s8PixelType: () => (/* binding */ s8PixelType),
/* harmony export */   save: () => (/* binding */ save),
/* harmony export */   saveAs: () => (/* binding */ saveAs),
/* harmony export */   saveUtils: () => (/* binding */ saveUtils),
/* harmony export */   savingMessage: () => (/* binding */ savingMessage),
/* harmony export */   scalar: () => (/* binding */ scalar),
/* harmony export */   search: () => (/* binding */ search),
/* harmony export */   selectFeature: () => (/* binding */ selectFeature),
/* harmony export */   selectFunction: () => (/* binding */ selectFunction),
/* harmony export */   selectRaster: () => (/* binding */ selectRaster),
/* harmony export */   serviceURL: () => (/* binding */ serviceURL),
/* harmony export */   setGroupSharing: () => (/* binding */ setGroupSharing),
/* harmony export */   setSharingLevel: () => (/* binding */ setSharingLevel),
/* harmony export */   share: () => (/* binding */ share),
/* harmony export */   shareWith: () => (/* binding */ shareWith),
/* harmony export */   success: () => (/* binding */ success),
/* harmony export */   tagFieldName: () => (/* binding */ tagFieldName),
/* harmony export */   tags: () => (/* binding */ tags),
/* harmony export */   title: () => (/* binding */ title),
/* harmony export */   toolDetailsEditor: () => (/* binding */ toolDetailsEditor),
/* harmony export */   toolEditor: () => (/* binding */ toolEditor),
/* harmony export */   toolModeler: () => (/* binding */ toolModeler),
/* harmony export */   tryAgain: () => (/* binding */ tryAgain),
/* harmony export */   type: () => (/* binding */ type),
/* harmony export */   u16PixelType: () => (/* binding */ u16PixelType),
/* harmony export */   u32PixelType: () => (/* binding */ u32PixelType),
/* harmony export */   u8PixelType: () => (/* binding */ u8PixelType),
/* harmony export */   unionDimensions: () => (/* binding */ unionDimensions),
/* harmony export */   unknownPixelType: () => (/* binding */ unknownPixelType),
/* harmony export */   unsavedTitle: () => (/* binding */ unsavedTitle),
/* harmony export */   unsavedWarningExisting: () => (/* binding */ unsavedWarningExisting),
/* harmony export */   unsavedWarningNew: () => (/* binding */ unsavedWarningNew),
/* harmony export */   userStartDirection: () => (/* binding */ userStartDirection),
/* harmony export */   variables: () => (/* binding */ variables),
/* harmony export */   viewerModeMessage: () => (/* binding */ viewerModeMessage),
/* harmony export */   viewerModeTitle: () => (/* binding */ viewerModeTitle),
/* harmony export */   warning: () => (/* binding */ warning)
/* harmony export */ });
const ok = "OK";
const cancel = "Abbrechen";
const enterURL = "Image-Service-URL eingeben";
const serviceURL = "Service-URL";
const selectRaster = "Raster auswählen";
const failedToLoadLayer = "Fehler beim Laden des Layers";
const loadingLayer = "Layer wird geladen";
const selectFeature = "Feature-Layer auswählen";
const enterFURL = "Feature-Service-URL eingeben";
const addRaster = "Raster-Variable hinzufügen";
const addScalar = "Konstante hinzufügen";
const raster = "Raster";
const scalar = "Skalar";
const defaultModelName = "Raster-Funktionsvorlage";
const general = "Allgemein";
const parameters = "Parameter";
const variables = "Variablen";
const name = "Name";
const description = "Beschreibung";
const parameter = "Parameter";
const isPublic = "IsPublic";
const isDataset = "IsDataset";
const unknownPixelType = "Unbekannt";
const outputPixelType = "Ausgabepixeltyp";
const u8PixelType = "8-Bit ohne Vorzeichen";
const s8PixelType = "8-Bit mit Vorzeichen";
const u16PixelType = "16-Bit ohne Vorzeichen";
const s16PixelType = "16-Bit mit Vorzeichen";
const u32PixelType = "32-Bit ohne Vorzeichen";
const s32PixelType = "32-Bit mit Vorzeichen";
const f32PixelType = "32-Bit-Gleitkommazahl";
const f64PixelType = "64-Bit-Double";
const properties = "Eigenschaften";
const multidimensionalRules = "Multidimensionale Regeln";
const matchVariables = "Variablen abgleichen";
const unionDimensions = "Dimensionen vereinigen";
const rasterFunctionEditor = {
	invalidRFTMessage: "Die Raster-Funktionsvorlage ist ungültig.",
	rfxArgsEditor: {
		outputRaster: "Ausgabe-Raster",
		raster: "Raster",
		unsupportedDataTypeWarning: "Die folgenden Argumente werden nicht angezeigt, da sie derzeit nicht unterstützt werden.",
		unsupportedFunction: "Enthält aktuell nicht unterstützte Raster-Funktionen."
	},
	rfxRasterInput: {
		selectLayer: "Layer auswählen",
		browseLayers: "Layer durchsuchen",
		rfxVariable: "RasterFunctionVariable"
	},
	rfxBandCombinationEditor: {
		methodLabel: "Methode",
		bandLabel: "Band",
		combinationLabel: "Kombination"
	},
	rfxRemapGrid: {
		minimum: "Minimum",
		maximum: "Maximum",
		output: "Ausgabe",
		noData: "NoData",
		remapValuesLabel: "Werte neu zuordnen"
	},
	rfxNamedRasterEditor: {
		rasterVariables: "Raster-Variablen",
		deleteSelectedVars: "Ausgewählte Variablen entfernen"
	},
	rfxClippingGeometry: {
		clippingLayer: "Ausschneide-Layer",
		clippingRaster: "Raster zum Ausschneiden",
		clippingGeometry: "Ausschneidegeometrie",
		customExtent: "Benutzerdefinierte Ausdehnung",
		outputExtent: "Ausgabeausdehnung",
		currentExtent: "Aktuelle Kartenausdehnung",
		drawLabel: "Zeichnen"
	},
	rfxCustomExtent: {
		top: "Oben",
		right: "Rechts",
		bottom: "Unten",
		left: "Links"
	},
	rfxRasterArrayEditor: {
		moveUp: "Nach oben verschieben",
		moveDown: "Nach unten verschieben",
		remove: "Entfernen"
	},
	rfxStatisticsGrid: {
		stdDev: "Std. Abw",
		min: "Min.",
		max: "Max.",
		mean: "Mittelwert"
	},
	rfxWeightedSumTableEditor: {
		weightedSumTable: "Tabelle der gewichteten Summe",
		id: "ID",
		layer: "Layer",
		field: "Feld",
		weight: "Gewichtung",
		value: "Wert",
		selectLayer: "Layer auswählen"
	},
	rfxWeightedOverlayTableEditor: {
		weightedOverlayTable: "Gewichtungsüberlagerungstabelle",
		id: "ID",
		layer: "Layer",
		field: "Feld",
		influence: "Einfluss",
		sumOfInfluence: "Summe der Einflüsse",
		value: "Wert",
		remapTable: "Neuzuordnungs-Tabelle",
		scale: "Maßstab",
		scales: "Maßstäbe",
		selectRaster: "Raster auswählen"
	},
	rfxFeatureSelect: {
		addFeatureLayer: "Nach einem Feature-Layer suchen",
		addPointLayer: "Nach einem Punkt-Layer suchen"
	},
	rfxFieldSelect: {
		value: "Wert",
		count: "Anzahl"
	},
	rfxAttributeTable: {
		tableType: "Tabellentyp",
		manual: "Manuell",
		external: "Extern",
		minVal: "Minimalwert",
		maxVal: "Maximalwert",
		baseClassName: "Basisname für Klasse",
		colorScheme: "Farbschema",
		defaultClassName: "Label_",
		generateTable: "Tabelle generieren",
		browseTable: "Tabelle durchsuchen",
		value: "Wert",
		classname: "ClassName",
		color: "Farbe"
	},
	rfxFieldNumberSwitchable: {
		number: "Numerisch",
		field: "Feld",
		string: "Zeichenfolge",
		linearUnit: "Lineare Einheit"
	},
	rfxPropertySet: {
		name: "Name",
		value: "Wert"
	},
	rfxConversionGrid: {
		size: "Größe"
	},
	rfxTransposeBit: {
		bitPattern: "Bit-Muster",
		outputBit: "Ausgabebit",
		inputBit: "Eingabebit"
	},
	rfxSpatialReference: {
		placeHolder: "Nach Schlüsselwort eingrenzen",
		coordinateSystem: "Koordinatensystem",
		gcs: "Geographisches Koordinatensystem",
		pcs: "Projiziertes Koordinatensystem",
		vcs: "Vertikales Koordinatensystem"
	}
};
const rfxLicenseInfo = "Diese Raster-Funktionsvorlage können Sie zur Verarbeitung Ihrer Bilddaten mithilfe von ArcGIS Image Server verwenden.";
const rasterFunctions = {
	rfx: {
		aCosHName: "ACosH",
		aCosHSnip: "Den Areakosinus von Zellen in einem Raster berechnen.",
		aCosHDesc: "Mit der Funktion wird der Areakosinus Hyperbolicus der Pixel in einem Raster berechnet.",
		aCosName: "ACos",
		aCosSnip: "Berechnet den Arkuskosinus der Pixel in einem Raster.",
		aCosDesc: "Mit dieser Raster-Funktion wird der Arkuskosinus von Zellen in einem Raster berechnet. In der Mathematik verfügen alle trigonometrischen Funktionen über einen definierten Bereich gültiger Eingabewerte, der als Domäne bezeichnet wird. Die Ausgabewerte jeder Funktion haben ebenfalls einen definierten Bereich. Für dieses Werkzeug beträgt die Domäne [-1, 1] und der Bereich [0, pi].",
		aSinHName: "ASinH",
		aSinHSnip: "Den Areasinus von Zellen in einem Raster berechnen.",
		aSinHDesc: "Mit der Funktion wird der Areasinus Hyperbolicus der Pixel in einem Raster berechnet.",
		aSinName: "ASin",
		aSinSnip: "Den Arkussinus von Zellen in einem Raster berechnen.",
		aSinDesc: "Mit der Funktion wird der Arkussinus der Pixel in einem Raster berechnet.",
		aTan2Name: "ATan2",
		aTan2Snip: "Den Arkustangens (auf Basis von x,y) von Zellen in einem Raster berechnen.",
		aTan2Desc: "Mit der Funktion wird der Arkustangens (auf Basis von XY-Koordinaten) der Pixel in einem Raster berechnet.",
		aTanHName: "ATanH",
		aTanHSnip: "Den Areatangens von Zellen in einem Raster berechnen.",
		aTanHDesc: "Mit der Funktion wird der Areatangens Hyperbolicus der Pixel in einem Raster berechnet.",
		aTanName: "ATan",
		aTanSnip: "Den Arkustangens von Zellen in einem Raster berechnen.",
		aTanDesc: "Mit der Funktion wird der Arkustangens der Pixel in einem Raster berechnet.",
		absName: "Abs",
		absSnip: "Den absoluten Wert der Zellen in einem Raster berechnen.",
		absDesc: "Mit der Funktion \"Abs\" wird der absolute Wert der Pixel in einem Raster berechnet.",
		reflectanceName: "Sichtbare Reflexion",
		reflectanceSnip: "Rohe Bilddaten unter Berücksichtigung von Sensoreigenschaften, der Position der Sonne und des Zeitpunktes der Erfassung in Werte für den Oberrand der Atmosphäre konvertieren.",
		reflectanceDesc: "Diese Funktion passt die digitale Nummer (DN) für die Bildhelligkeitswerte für einige Satellitensensoren an. Die Anpassungen basieren auf der Sonnenhöhe, dem Aufnahmedatum und den Sensoreigenschaften, um die Verstärkungs- und Verzerrungseinstellungen für jedes Band festzulegen. Mit dieser Funktion werden die Reflexions- bzw. Helligkeitswerte für bestimmte Satellitenbilder gemäß den Einstellungen für die Szenenbeleuchtung und Sensorverstärkung angepasst. Die Bilder werden an eine theoretische gemeinsame Beleuchtungsbedingung angepasst, sodass weniger Abweichungen zwischen den Szenen von verschiedenen Datumseinstellungen und unterschiedlichen Sensoren bestehen. Dies kann für Bildklassifizierung, Farbausgleich und Mosaikierung nützlich sein. Diese Funktion kann nur für bestimmte Bilder verwendet werden. Die entsprechenden Sensoren sind Landsat MSS, Landsat TM, Landsat ETM+, Landsat 8, IKONOS, QuickBird, GeoEye-1, RapidEye, DMCii, WorldView-1, WorldView-2, SPOT 6 und Pleiades.<div><br/>Die Funktion führt zwei Korrekturen durch. Die erste Korrektur basiert auf den Verstärkungseinstellungen. Die ursprünglichen Helligkeitswerte werden aus den Bildwerten neu erstellt, indem die Verstärkungsgleichung umgekehrt wird. Die zweite Korrektur hängt mit den Unterschieden in Sonnenwinkel und Helligkeit zusammen. Die ursprünglichen Helligkeitswerte werden an eine gemeinsame Beleuchtungsbedingung angepasst, indem Szenen, die bei verschiedenen Beleuchtungsbedingungen aufgenommen wurden, normalisiert werden. Im Allgemeinen gilt, dass der Datentyp des Ausgabebildes mit dem Datentyp des Eingabebilds übereinstimmt, die Ausgabewerte jedoch niedriger als die Eingabewerte sind und in den gültigen Datenbereich eingepasst werden.</div>",
		argStatisticsName: "ArgStatistics",
		argStatisticsSnip: "Arg-Statistiken einschließlich ArgMax, ArgMin, ArgMedian und Dauer berechnen.",
		argStatisticsDesc: "Mit der Funktion werden Arg-Statistiken berechnet. Die Funktion \"ArgStatistics\" umfasst vier Methoden: ArgMax, ArgMin, ArgMedian und Dauer.",
		arithmeticName: "Arithmetisch",
		arithmeticSnip: "Eine arithmetische Operation zwischen zwei Rastern bzw. einem Raster und einem Skalar ausführen.",
		arithmeticDesc: "Mit der Funktion \"Arithmetisch\" wird eine arithmetische Operation zwischen zwei Rastern bzw. einem Raster und einem Skalar oder umgekehrt ausgeführt.",
		aspectSlopeName: "Ausrichtung-Neigung",
		aspectSlopeSnip: "Ein Raster erstellen, das gleichzeitig die Ausrichtung (Richtung) und die Neigung (Steilheit) einer kontinuierlichen Oberfläche anzeigt, wie in einem digitalen Höhenmodell dargestellt.",
		aspectSlopeDesc: "Mit der Funktion \"Ausrichtung-Neigung\" wird ein Raster-Layer erstellt, in dem gleichzeitig die Ausrichtung und die Neigung einer Oberfläche anzeigt werden. Die Funktion \"Ausrichtung\" bestimmt die Neigungsrichtung der maximalen Änderungsrate des Werts von einem Pixel zum jeweiligen benachbarten Pixel. Sie können sich die Ausrichtung also als Neigungsrichtung vorstellen. Die Werte des Ausgabe-Rasters entsprechen der Kompassrichtung der Ausrichtung, die durch einen Farbton dargestellt wird. Die Neigung stellt die Änderungsrate der Höhe für jedes Pixel des digitalen Höhenmodells (DEM) dar. Die Neigung stellt die Steilheit einer Oberfläche dar und wird in Form von drei Klassen symbolisiert, die durch Farbsättigung (Helligkeit) gekennzeichnet werden.<div><br/>Die Pixelwerte im Ausrichtungs-Neigungs-Ausgabe-Raster bezeichnen eine bestimmte Kombination aus Ausrichtung und Neigung. Dabei stehen Pixelwerte unter 20 (grau dargestellt) für eine ebene Fläche. Ausrichtungs-Neigungs-Werte ab 21 werden folgendermaßen in unterschiedlichen Farbsättigungen dargestellt: 21 bis 30: Farbsättigung zur Darstellung einer geringen Neigung, 31 bis 40: Farbsättigung zur Darstellung einer mittleren Neigung, ab 41: Farbsättigung zur Darstellung einer großen Neigung</div>",
		aspectName: "Ausrichtung",
		aspectSnip: "Anzeigen, in welche Richtung ein Pixel weist, wobei 0 Norden darstellt und Winkel im Uhrzeigersinn bis 360 zunehmen.",
		aspectDesc: "Die Funktion \"Ausrichtung\" bestimmt die Neigungsrichtung der maximalen Änderungsrate des Wertes jeder einzelnen Zelle zur jeweiligen Nachbarzelle. Sie können sich die Ausrichtung also als Neigungsrichtung vorstellen. Die Werte des Ausgabe-Rasters bestimmen die Kompassrichtung der Ausrichtung.<div><br/>Die Eingabe für diese Funktion ist das Eingabe-Raster. Die Funktion \"Ausrichtung\" wird oft auf ein digitales Höhenmodell (Digital Elevation Model, DEM) angewendet. Standardmäßig wird die Ausrichtung als Graustufenbild angezeigt. Sie können die Funktion \"Colormap\" hinzufügen, um ein bestimmtes Farbschema anzugeben oder um einem Benutzer bei der Anzeige des Mosaiks zu ermöglichen, die Symbolisierung mit einem eigenen Farbschema zu ändern.</div>",
		tableName: "Attributtabelle",
		tableSnip: "Verwendet zum Benennen und Symbolisieren der Werte in einem Dataset eine Tabelle. Die Spalten für die Tabelle müssen durch Komma getrennt werden: PixelValue, AttributeName, RedValue, GreenValue, BlueValue.",
		tableDesc: "Mit der Funktion \"Attributtabelle\" können Sie eine Attributtabelle definieren, um ein Einzelband-Mosaik-Dataset oder Raster-Dataset zu symbolisieren. <div><br/>Dies ist nützlich, wenn Sie Bilddaten präsentieren möchten, die als Landnutzung klassifiziert wurden, z. B. Waldflächen, Sumpfgebiete, Kulturflächen und Stadtgebiete. Wenn die Tabelle darüber hinaus Felder enthält, die als rot, grün und blau benannt sind, werden beim Rendern des Bildes Werte innerhalb dieser Felder wie eine Colormap verwendet.</div>",
		bandArithmeticName: "Bandarithmetik",
		bandArithmeticSnip: "Indizes mit den vordefinierten Formeln oder einem benutzerdefinierten Ausdruck berechnen.",
		bandArithmeticDesc: "Die Funktion \"Bandarithmetik\" führt eine arithmetische Operation auf den Bändern eines Raster-Datasets aus. Sie können vordefinierte Algorithmen auswählen oder eine eigene einzeilige Formel eingeben. Die unterstützten Operatoren sind -, +, /, * und unäres -.",
		thresholdName: "Binärer Schwellenwert",
		thresholdSnip: "Kontinuierliche Daten in Vordergrund und Hintergrund organisieren, indem die Kovarianz zwischen zwei Klassen minimiert wird.",
		thresholdDesc: "Wenn ein Raster-Dataset eine bimodale Verteilung aufweist, wird mit dieser Funktion ein neues Raster erstellt, das die Daten in zwei unterschiedliche Klassen unterteilt. Es wird eine Klasse mit niedrigen Werten erstellt, die mit schwarzen Pixeln dargestellt wird, und eine Klasse mit hohen Werten, die mit weißen Pixeln dargestellt wird.",
		bitwiseAndName: "Bitwise And",
		bitwiseAndSnip: "Führt eine bitweise AND-Operation für die binären Werte von zwei Eingabe-Rastern aus.",
		bitwiseAndDesc: "Mit \"Bitwise And\" wird eine bitweise AND-Operation für die binären Werte zweier Eingabe-Raster ausgeführt.",
		bitwiseLeftShiftName: "Bitwise Left Shift",
		bitwiseLeftShiftSnip: "Führt eine bitweise LEFT SHIFT-Operation für die binären Werte von zwei Eingabe-Rastern aus.",
		bitwiseLeftShiftDesc: "Mit \"Bitwise Left Shift\" wird eine bitweise LEFT SHIFT-Operation für die binären Werte zweier Eingabe-Raster ausgeführt.",
		bitwiseNotName: "Bitwise Not",
		bitwiseNotSnip: "Führt eine bitweise NOT-Operation (Komplement) für die binären Werte zweier Eingabe-Raster aus.",
		bitwiseNotDesc: "Mit der Funktion wird eine bitweise NOT-Operation (Komplement) für den binären Wert eines Eingabe-Rasters ausgeführt.",
		bitwiseOrName: "Bitwise Or",
		bitwiseOrSnip: "Führt eine bitweise OR-Operation für die binären Werte von zwei Eingabe-Rastern aus.",
		bitwiseOrDesc: "Mit der Funktion wird eine bitweise OR-Operation für die binären Werte zweier Eingabe-Raster ausgeführt. ",
		bitwiseRightShiftName: "Bitwise Right Shift",
		bitwiseRightShiftSnip: "Führt eine bitweise RIGHT SHIFT-Operation für die binären Werte von zwei Eingabe-Rastern aus.",
		bitwiseRightShiftDesc: "Mit der Funktion wird eine bitweise RIGHT SHIFT-Operation für die binären Werte zweier Eingabe-Raster ausgeführt.",
		bitwiseXorName: "Bitwise Xor",
		bitwiseXorSnip: "Führt eine bitweise Operation mit ausschließendem OR für die binären Werte von zwei Eingabe-Rastern aus.",
		bitwiseXorDesc: "Mit der Funktion wird eine bitweise Operation mit ausschließendem OR für die binären Werte zweier Eingabe-Raster ausgeführt.",
		booleanAndName: "Boolean And",
		booleanAndSnip: "Führt eine \"Boolean And\"-Operation für die Zellenwerte von zwei Eingabe-Rastern durch. Wenn beide Eingabewerte TRUE (ungleich 0) sind, lautet der Ausgabewert 1. Wenn eine oder beide Eingaben FALSE (0) sind, lautet der Ausgabewert 0.",
		booleanAndDesc: "Mit der Funktion wird eine boolesche AND-Operation für die Pixelwerte zweier Eingaben ausgeführt. Wenn beide Eingabewerte TRUE (ungleich 0) sind, lautet der Ausgabewert 1. Wenn eine oder beide Eingabewerte FALSE (0) sind, ist der Ausgabewert 0. ",
		booleanNotName: "Boolean Not",
		booleanNotSnip: "Führt eine \"Boolean Not\"-Operation (Komplementoperation) für die Zellenwerte des Eingabe-Rasters durch. Wenn die Eingabewerte TRUE (ungleich 0) sind, lautet der Ausgabewert 1. Wenn die Eingabewerte FALSE (0) sind, lautet die Ausgabe 1.",
		booleanNotDesc: "Mit der Funktion wird eine boolesche NOT-Operation (Komplement) für die Pixelwerte des Eingabe-Rasters ausgeführt. Wenn die Eingabewerte TRUE (ungleich 0) sind, lautet der Ausgabewert 0. Wenn die Eingabewerte FALSE (0) sind, lautet der Ausgabewert 1.",
		booleanOrName: "Boolean Or",
		booleanOrSnip: "Führt eine boolesche OR-Operation für die Zellenwerte zweier Eingabe-Raster aus. Wenn einer oder beide Eingabewerte TRUE (ungleich 0) sind, lautet der Ausgabewert 1. Wenn beide Eingabewerte FALSE (0) sind, lautet der Ausgabewert 0.",
		booleanOrDesc: "Mit der Funktion wird eine boolesche OR-Operation für die Zellenwerte zweier Eingabe-Raster ausgeführt. Wenn einer oder beide TRUE (ungleich 0) sind, lautet der Ausgabewert 1. Wenn beide Eingabewerte FALSE (0) sind, lautet der Ausgabewert 0.",
		booleanXorName: "Boolean XOr",
		booleanXorSnip: "Führt eine Operation mit \"Boolean eXclusive Or\" für die Zellenwerte von zwei Eingabe-Rastern aus. Wenn ein Eingabewert TRUE (ungleich 0) und der andere FALSE (0) ist, lautet die Ausgabe 1. Wenn beide Eingabewerte TRUE oder beide FALSE sind, lautet die Ausgabe 0.",
		booleanXorDesc: "Mit der Funktion wird eine boolesche Operation mit ausschließendem OR für die binären Werte zweier Eingabe-Raster ausgeführt. Wenn ein Eingabewert TRUE (ungleich 0) und der andere Eingabewert FALSE (0) ist, lautet der Ausgabewert 1. Wenn beide Eingabewerte TRUE oder beide FALSE sind, lautet der Ausgabewert 0.",
		bufferedRasterName: "Zwischenspeichern",
		bufferedRasterSnip: "Die zuletzt aufgerufenen Pixelblöcke zwischenspeichern.",
		bufferedRasterDesc: "Die Funktion \"Zwischenspeichern\" dient zur Optimierung der Performance komplexer Funktionsketten. Sie speichert die Ausgaben im Speicher des Teils der Funktionskette, der ihr vorangestellt ist. <div><br/>Fügen Sie diese Funktion im Funktions-Editor an der Stelle ein, an der die Ausgabe gespeichert werden soll.</div>",
		rasterCalculatorName: "Berechnung",
		rasterCalculatorSnip: "Ein Raster über einen Raster-basierten mathematischen Ausdruck berechnen.",
		rasterCalculatorDesc: "Mit der Funktion \"Berechnung\" können Sie Ausdrücke erstellen und diese in Funktionsketten integrieren.",
		cellStatisticsName: "Zellenstatistiken",
		cellStatisticsSnip: "Berechnet eine Pro-Zellen-Statistik für mehrere Raster. Die verfügbaren Statistiken sind: \"Mehrheit\", \"Maximum\", \"Mittelwert\", \"Medianwert\", \"Minimum\", \"Minderheit\", \"Perzentil\", \"Bereich\", \"Standardabweichung\", \"Summe\" und \"Varianz\".",
		cellStatisticsDesc: "Mit dieser Funktion werden Statistiken aus mehreren Rastern auf Pixelbasis berechnet. Die verfügbaren Statistiken sind: \"Mehrheit\", \"Maximum\", \"Mittelwert\", \"Medianwert\", \"Minimum\", \"Minderheit\", \"Bereich\", \"Standardabweichung\", \"Summe\" und \"Varianz\".",
		classifyName: "Klassifizieren",
		classifySnip: "Weist jedes Pixel einer Klasse zu. Es werden Zusatzdaten wie z. B. segmentierte Bilder einbezogen.",
		classifyDesc: "Diese Raster-Funktion klassifiziert ein Raster-Dataset basierend auf einer Esri Classifier Definition-Datei (.ecd) und Raster-Dataset-Eingaben. Die in der Funktion \"Klassifizieren\" verwendete ECD-Datei enthält alle Informationen für ein bestimmtes Dataset und einen bestimmten Klassifikator. Sie wird durch die Trainingswerkzeuge für Klassifizierungen, z. B. das Werkzeug \"Support Vector Machine-Klassifikator trainieren\" oder \"Random Trees-Klassifikator trainieren\", erstellt.",
		clipName: "Ausschneiden",
		clipSnip: "Die Ausdehnung eines Rasters anhand von Koordinaten oder anhand eines anderen Datasets festlegen.",
		clipDesc: "Diese Funktion schneidet ein Raster entsprechend den definierten Ausdehnungen mit einer rechteckigen Form aus oder schneidet ein Raster auf die Form der Feature-Class eines Eingabe-Polygons zu. Das Shape zum Definieren des Ausschnitts kann die Ausdehnung des Rasters oder eine Fläche innerhalb des Rasters ausschneiden.",
		colorspaceConversionName: "Farbmodellkonvertierung",
		colorspaceConversionSnip: "Ein Raster von RGB in HSV konvertieren und umgekehrt.",
		colorspaceConversionDesc: "Die Funktion \"Farbmodellkonvertierung\" konvertiert das Farbmodell eines Bildes vom HSV-Farbraum (Hue, Saturation, Value = Farbton, Sättigung, Helligkeitswert) in RGB (Rot, Grün, Blau) oder umgekehrt.<div><br/>Diese Funktion kann in einem Mosaik-Dataset verwendet werden.</div>",
		colormapToRGBName: "Colormap in RGB",
		colormapToRGBSnip: "Ein Einzelband-Raster mit einer Colormap in ein RGB-Raster (Rot, Grün und Blau) mit drei Bändern konvertieren.",
		colormapToRGBDesc: "Mit dieser Funktion wird ein Einzelband-Raster mit einer Colormap in ein RGB-Raster mit drei Bändern (Rot, Grün und Blau) konvertiert.<div><br/>Diese Funktion ist nützlich, wenn Sie aus einem Einzelband-Raster mit verknüpfter Colormap ein Raster aus drei Bändern erstellen müssen. Mit den Werten in der Colormap wird jeweils das rote, grüne und blaue Band erstellt. Diese Funktion kann in einem Mosaik-Dataset verwendet werden.</div>",
		colormapName: "Colormap",
		colormapSnip: "Die Pixelwerte für die Anzeige der Raster-Daten auf der Grundlage einer Colormap oder eines Farbverlaufs als Graustufen- oder RGB-Bild (Rot, Grün, Blau) ändern.",
		colormapDesc: "Die Funktion \"Colormap\" ist eine Art Raster-Daten-Renderer. Damit werden die Pixelwerte zur Anzeige der Raster-Daten auf der Grundlage eines Farbschemas oder bestimmter Farben in einer Colormap-Datei als Graustufen- oder RGB-Farbbild transformiert. Sie können eine Colormap zur Darstellung analysierter Daten, wie z. B. ein klassifiziertes Bild, oder beim Anzeigen einer topographischen Karte (oder eines gescannten indizierten Farbbildes) verwenden.<div><br/>Colormaps enthalten einen Satz von Werten, die mit Farben verknüpft sind, die verwendet werden, um ein Einzelband-Raster durchgängig mit den gleichen Farben anzuzeigen. Jeder Pixelwert ist einer Farbe zugeordnet, die als Gruppe von RGB-Werten definiert ist. Colormaps unterstützen sämtliche Bittiefen außer Gleitkomma. Zudem unterstützen sie positive und negative Werte; es können auch Colormapwerte fehlen. Bei der Anzeige eines Datasets mit einer Karte, in der Werte fehlen, werden die Pixel mit den fehlenden Werten nicht angezeigt.</div>",
		complexName: "Komplex",
		complexSnip: "Die Größe komplexer Zahlen extrahieren.",
		complexDesc: "Mit der Funktion wird die Größe komplexer Werte berechnet.<div><br/>Diese Funktion wird normalerweise bei RADAR-Bilddaten eines komplexen Datentyps eingesetzt. Sie kann in einem Mosaik-Dataset verwendet werden.</div>",
		compositeBandName: "Bänder zusammensetzen",
		compositeBandSnip: "Kombiniert mehrere Datasets zu einem Multiband-Raster.",
		compositeBandDesc: "Mit der Funktion \"Bänder zusammensetzen\" können Sie Raster kombinieren, sodass sie ein Multiband-Raster bilden.",
		conName: "If-Else-Bedingungen",
		conSnip: "Führt eine konditionale If-Then-Else-Operation durch. Bei der Verwendung einer If-Else-Bedingung müssen üblicherweise mindestens zwei Funktionen miteinander verknüpft werden, wobei in der einen Funktion die Kriterien und in der zweiten Funktion die If-Else-Bedingung unter Verwendung der Kriterien angegeben wird. Letztere schreibt die \"True\"- und \"False\"-Ausgaben vor.",
		conDesc: "Durch die Funktion \"If-Else-Bedingungen\" werden die Pixel des Ausgabe-Rasters auf Grundlage der If-Else-Auswertung der einzelnen Eingabepixel festgelegt. Sie gibt die Pixelwerte aus dem True-Raster zurück, wenn die Bedingungsauswertung \"true\" (1) ergibt, und die Pixelwerte aus dem False-Raster, wenn die Bedingungsauswertung \"false\" (0) lautet. Dieses Kriterium wird durch die Ausgabe einer logischen mathematischen Funktion festgelegt, die dem Eingabe-Raster entspricht.",
		constantName: "Konstante",
		constantSnip: "Ein virtuelles Raster mit einem einzelnen Pixelwert erstellen.",
		constantDesc: "Mit dieser Funktion wird ein virtuelles Raster mit einem einzelnen Pixelwert erstellt, das in Raster-Funktionsvorlagen und zum Verarbeiten eines Mosaik-Datasets verwendet werden kann.<div><br/>Der konstante Wert wird für alle Pixelwerte im Raster verwendet.</div>",
		contourName: "Konturlinie",
		contourSnip: "Konturlinien erstellen.",
		contourDesc: "Mit der Konturlinienfunktion werden Konturlinien erstellt, indem Punkte mit derselben Höhe aus einem Raster-Höhen-Dataset verbunden werden. Die Konturlinien sind Isolinien, die zum Visualisieren als Raster erstellt werden. Die Leistungsfähigkeit dieser Funktion gründet auf den folgenden zentralen Aspekten: Konturlinien werden für große Datasets wie World Elevation schnell und dynamisch erstellt; Konturlinien können geglättet werden, um ein kartografisch ansprechenderes Aussehen unter Beibehaltung der Genauigkeit der Konturlinien zu erzielen; dynamische Kontrolle über das bereitgestellte Konturlinienintervall; mögliche Ausgaben sind Konturlinien, Indexkonturlinien und gefüllte Konturlinien.<div><br/>Die Erstellung eines Konturlinien-Layers als Raster-Produkt ist für eine breite Palette von Anwendungen wertvoll, da die Konturlinien auf einer Karte überlagert werden können und viele Informationen zum Terrain bereitstellen, ohne die zugrunde liegenden Daten zu verdecken. Sie sind hilfreich bei Anwendungen wie Entwicklung, Landwirtschaft und Wasserbewirtschaftung.</div>",
		contrastBrightnessName: "Kontrast und Helligkeit",
		contrastBrightnessSnip: "Den Kontrast und die Helligkeit eines Rasters anpassen.",
		contrastBrightnessDesc: "Mit der Funktion \"Kontrast und Helligkeit\" kann das Aussehen von Raster-Daten durch Änderung von Helligkeit und/oder Kontrast im Bild verbessert werden. Durch Helligkeit wird die Gesamthelligkeit des Bildes erhöht (dunkle Farben werden aufgehellt, helle Farben werden weißer) und mit Kontrast wird der Unterschied zwischen den dunkelsten und hellsten Farben eingestellt.<div><br/>Mit dieser Funktion werden die Pixelwerte geändert. Daher sollte die Funktion verwendet werden, wenn Sie das Aussehen der Daten verbessern, diese jedoch nicht in Analysen verwenden möchten, für die die unbearbeiteten Pixelwerte benötigt werden. Diese Funktion ist geeignet, wenn Sie die Daten als Image-Service veröffentlichen, der in Anwendungen ohne Funktion zum Ändern von Kontrast und Helligkeit der Bilder verwendet werden kann, oder um sicherzustellen, dass die Anzeige tatsächlich mit den bevorzugten Einstellungen erfolgt.</div>",
		convolutionName: "Faltung",
		convolutionSnip: "Einen Filter zum Schärfen, Weichzeichnen, Erkennen von Kanten oder Glätten bzw. einen Gradient in einem Raster anwenden.",
		convolutionDesc: "Die Funktion \"Faltung\" führt die Filterung der Pixelwerte in einem Bild aus, z. B. für das Scharf- oder Weichzeichnen eines Bildes, für das Ermitteln der Kanten in einem Bild oder für andere Kernel-basierte Verbesserungen. Filter werden verwendet, um die Qualität eines Raster-Bilds durch das Entfernen von unkorrekten Daten oder durch die Erweiterung von Features in den Daten zu verbessern Diese Faltungsfilter werden auf einen bewegten, überlappenden Kernel (Fenster oder Nachbarschaft) angewendet (z. B. 3 x 3). Die Funktion \"Faltung\" filtert Ihre Arbeit durch eine Berechnung des Pixelwertes auf Grundlage der Gewichtung seiner Nachbarn..",
		corridorName: "Korridor",
		corridorSnip: "Berechnet die Summe der akkumulativen Kosten für zwei akkumulative Eingabe-Raster.",
		corridorDesc: "Mit der Funktion \"Korridor\" wird die Summe der akkumulativen Kosten für zwei Eingabe-Raster mit akkumulativen Kosten berechnet. Es können zwar zwei beliebige Raster für die Eingabe verwendet werden; um ein sinnvolles Ergebnis zu erhalten, sollte es sich dabei jedoch um unveränderte akkumulative Kosten-Ausgabe-Raster handeln. Die Reihenfolge der beiden Eingaben ist irrelevant.",
		cosHName: "CosH",
		cosHSnip: "Den Kosinus Hyperbolicus von Zellen in einem Raster berechnen.",
		cosHDesc: "Mit der Funktion wird der Kosinus Hyperbolicus der Pixel in einem Raster berechnet.",
		cosName: "Cos",
		cosSnip: "Berechnet den Kosinus einer Zelle in einem Raster.",
		cosDesc: "Mit der Funktion wird der Kosinus der Pixel in einem Raster berechnet.",
		costAllocationName: "Kostenzuordnung",
		costAllocationSnip: "Berechnet für jede Zelle die kostengünstigste Quelle basierend auf den kleinsten akkumulativen Kosten auf einer Kostenoberfläche.",
		costAllocationDesc: "Mit der Funktion \"Kostenzuweisung\" wird für jede Zelle die kostengünstigste Quelle auf Basis der geringsten akkumulativen Kosten auf einer Kostenoberfläche berechnet.",
		costBackLinkName: "Kostenrückverknüpfung",
		costBackLinkSnip: "Definiert die nächste Nachbarzelle auf dem kleinsten akkumulativen Kostenpfad zur kostengünstigsten Quelle.",
		costBackLinkDesc: "Mit der Funktion \"Kostenrückverknüpfung\" wird die nächste Nachbarzelle auf dem Pfad mit den geringsten akkumulativen Kosten zur kostengünstigsten Quelle definiert.<div><br/>Das Rückverknüpfungs-Raster enthält Werte von null bis acht. Mit diesen Werten wird die Richtung definiert oder die nächste angrenzende Zelle (die nachfolgende Zelle) entlang des Kostenpfads mit den geringsten akkumulativen Kosten von einer Zelle zur entsprechenden kostengünstigsten Quelle angegeben. Wenn der Pfad in die rechte benachbarte Zelle übergeht, wird der Zelle der Wert 1 zugeordnet, gefolgt von 2 für die diagonal rechts unten angeordnete Zelle. Die folgenden Zellen werden im Uhrzeigersinn nummeriert. Der Wert 0 ist für die Quellenzellen reserviert.</div>",
		costDistanceName: "Kostenentfernung",
		costDistanceSnip: "Berechnet für jede Zelle die kleinste akkumulative Kostenentfernung von oder zur kostengünstigsten Quelle auf einer Kostenoberfläche.",
		costDistanceDesc: "Mit der Funktion \"Kostenentfernung\" wird die kleinste akkumulative Kostenentfernung für jede Zelle von oder zur kostengünstigsten Quelle auf einer Kostenoberfläche berechnet.",
		costPathName: "Kostenpfad",
		costPathSnip: "Berechnet den kostengünstigsten Pfad von einer Quelle zu einem Ziel.",
		costPathDesc: "Mit der globalen Funktion \"Kostenpfad\" wird der kostengünstigste Pfad von einer Quelle zu einem Ziel berechnet.<div><br/>Mit dieser Funktion wird ein Ausgabe-Raster erzeugt, das den/die kostengünstigsten Pfad(e) von ausgewählten Positionen zur jeweils nächstgelegenen Quellenzelle aufzeichnet, die innerhalb der akkumulativen Kostenoberfläche definiert wurden (hinsichtlich der Kostenentfernung).</div>",
		curvatureName: "Krümmung",
		curvatureSnip: "Berechnet die Krümmung einer Raster-Oberfläche, optional mit Vertikal- und Horizontalkrümmung.",
		curvatureDesc: "Mit der Funktion \"Krümmung\" wird die Form oder Krümmung der Neigung angezeigt. Ein Teil einer Oberfläche kann konkav oder konvex sein, was Sie am Krümmungswert erkennen. Die Krümmung wird berechnet, indem die zweite Ableitung der Oberfläche ermittelt wird.<div><br/>Die Ausgabe der Funktion \"Krümmung\" dient dem Beschreiben der physischen Merkmale eines Wassereinzugsgebiets bei dem Versuch, Erosions- und Drainageprozesse nachzuvollziehen. Der Krümmungswert kann verwendet werden, um Bodenerosionsmuster zu finden und die Wasserverteilung auf dem Land zu ermitteln. Die Vertikalkrümmung wirkt sich auf die Fließbeschleunigung und -verlangsamung aus und beeinflusst dadurch Erosion und Ablagerungen. Die Horizontalkrümmung beeinflusst die Fließkonvergenz und -divergenz.</div>",
		divideName: "Divide",
		divideSnip: "Die Werte von zwei Rastern auf Zellenbasis teilen.",
		divideDesc: "Mit der Funktion \"Divide\" werden die Werte zweier Raster auf Pixelbasis dividiert.",
		elevationVoidFillName: "Lückenfüllung für Höhen",
		elevationVoidFillSnip: "Pixel in Bereichen erstellen, wo in Ihren Höhendaten Löcher vorhanden sind.",
		elevationVoidFillDesc: "Die Funktion \"Lückenfüllung für Höhen\" wird verwendet, um Pixel für Bereiche zu erstellen, wo in Ihren Höhendaten Löcher vorhanden sind.<div><br/>Lücken treten auf, wenn es keine Punkte gibt, die auf der durch ein Pixel dargestellten Fläche im resultierenden Raster erfasst wurden. Lücken werden oft von Gewässern, Klassentypauswahl oder Ausschluss verursacht. Beim Generieren einer Bodenoberfläche wird die Lückenfüllung am häufigsten verwendet.</div>",
		equalToName: "Equal To",
		equalToSnip: "Führt auf Zellenbasis eine relationale \"Equal To\"-Operation für zwei Eingaben aus. Gibt 1 für Zellen zurück, bei denen das erste Raster mit dem zweiten Raster identisch ist, andernfalls 0.",
		equalToDesc: "Mit der Funktion wird auf Pixelbasis eine \"Equal To\"-Operation für zwei Raster ausgeführt. Sie gibt den Wert 1 für Pixel zurück, bei denen das erste Raster mit dem zweiten Raster identisch ist, andernfalls 0.",
		eucAllocationName: "Euklidische Zuordnung",
		eucAllocationSnip: "Berechnet für jede Zelle die nächstgelegene Quelle auf Basis der euklidischen Entfernung.",
		eucAllocationDesc: "Mit der Funktion \"Euklidische Zuordnung\" wird für jede Zelle die nächstgelegene Quelle auf Basis der euklidischen Entfernung berechnet.",
		eucDirectionName: "Euklidische Richtung",
		eucDirectionSnip: "Berechnet für jede Zelle die Richtung in Grad zur nächstgelegenen Quelle.",
		eucDirectionDesc: "Mit der Funktion \"Euklidische Richtung\" wird für jede Zelle die Richtung in Grad zur nächstgelegenen Quelle berechnet. <div><br/>Die Richtung wird vom jeweiligen Zellenmittelpunkt bis zum Mittelpunkt der nächstgelegenen Quellenzelle berechnet. Der Wertebereich reicht von 0 Grad bis 360 Grad, wobei 0 Grad für die Quellenzellen reserviert ist. In östlicher Richtung (rechts) befindet sich der 90-Grad-Winkel, und die Werte nehmen im Uhrzeigersinn zu (180 Grad ist Süden, 270 Grad ist Westen und 360 Grad ist Norden).</div>",
		eucDistanceName: "Euklidische Entfernung",
		eucDistanceSnip: "Berechnet für jede Zelle die euklidische Entfernung zur nächstgelegenen Quelle.",
		eucDistanceDesc: "Mit der Funktion \"Euklidische Entfernung\" wird für jede Zelle die euklidische Entfernung zur nächstgelegenen Quelle berechnet.",
		exp10Name: "Exp10",
		exp10Snip: "Die Exponentialfunktion zur Basis 10 der Zellen in einem Raster berechnen.",
		exp10Desc: "Mit der Funktion \"Exp 10\" wird die Exponentialfunktion zur Basis 10 der Pixel in einem Raster berechnet.",
		exp2Name: "Exp2",
		exp2Snip: "Die Exponentialfunktion zur Basis 2 der Zellen in einem Raster berechnen.",
		exp2Desc: "Mit dieser Funktion wird die Exponentialfunktion zur Basis 2 der Pixel in einem Raster berechnet.",
		expName: "Exp",
		expSnip: "Die Exponentialfunktion zur Basis e der Zellen in einem Raster berechnen.",
		expDesc: "Mit dieser Funktion wird die Exponentialfunktion zur Basis e der Pixel in einem Raster berechnet.",
		extractBandName: "Bänder extrahieren",
		extractBandSnip: "Festlegen, mit welchen Bändern bei Verwendung von Multiband-Datasets gearbeitet werden soll.",
		extractBandDesc: " Mit der Funktion \"Bänder extrahieren\" können Sie ein oder mehrere Bänder aus einem Multiband-Raster-Dataset extrahieren bzw. die Bänder neu anordnen.<div><br/>Sie können diese Funktion vor anderen Funktionen wie z. B. \"Arithmetisch\" verwenden, um festzulegen, welche Bänder als Eingabe für die folgende Funktion verwendet werden</div>",
		fillName: "Füllung",
		fillSnip: "Senken in einem Oberflächen-Raster füllen, um alle Unregelmäßigkeiten in den Daten zu entfernen.",
		fillDesc: "Mit der globalen Funktion \"Füllung\" werden Senken und Spitzen in einem Raster für Höhenoberflächen gefüllt, um kleine Unregelmäßigkeiten in den Daten zu beseitigen. Die Funktion führt die Füllung als iterativen Vorgang aus, bis alle Senken innerhalb des angegebenen Z-Limits gefüllt sind.<div><br/>Wenn eine Höhenoberfläche mit den Ortho Mapping-Werkzeugen o. Ä. erstellt wird, treten häufig signifikante Fehler in Form von Senken und Spitzen in den Daten auf. Im Zusammenhang mit der Luftbildmessung werden Senken und Spitzen häufig als Löcher und Spitzen bezeichnet. Da Oberflächendaten oft bei der Modellierung, z. B. hydrologische Modellierung, verwendet werden, ist es wichtig, diese Senken- und Spitzenfehler so zu korrigieren, dass sie mit den umgebenden Daten konsistent sind.</div>",
		floatName: "Float",
		floatSnip: "Konvertiert jeden Zellenwert eines Rasters in eine Gleitkommadarstellung.",
		floatDesc: "Die Funktion \"Float\" konvertiert jeden Pixelwert eines Rasters in eine Gleitkommadarstellung.",
		flowAccumulationName: "Abflussakkumulation",
		flowAccumulationSnip: "Erstellt für jede Zelle ein Raster der Abflussakkumulation. Optional kann ein Gewichtungsfaktor angewendet werden.",
		flowAccumulationDesc: "Mit der globalen Funktion \"Abflussakkumulation\" wird ein Raster der Abflussakkumulation zu jedem Pixel erstellt. Bestimmt wird dies durch das Akkumulieren der Gewichtung für alle Pixel, die in einzelne tiefer gelegene Pixel fließen. Wenn kein Gewichtungs-Raster angegeben ist, wird eine Gewichtung von 1 auf die Pixel angewendet, und der Wert der Pixel im Ausgabe-Raster entspricht der Anzahl von Pixeln, die in jedes Pixel fließen.<div><br/>Ausgabepixel mit einer hohen Abflussakkumulation sind Flächen konzentrierten Flusses und können verwendet werden, um Wasserlaufkanäle zu identifizieren. Ausgabepixel mit einer Abflussakkumulation von 0 sind lokale topographische Höhen und können verwendet werden, um Bergkämme zu identifizieren.</div>",
		flowDirectionName: "Fließrichtung",
		flowDirectionSnip: "Ein Raster mit der Fließrichtung von jeder Zelle zur jeweiligen Nachbarzelle mit der steilsten Neigung erstellen.",
		flowDirectionDesc: "Eine der Hauptvoraussetzungen für das Ableiten hydrologischer Eigenschaften einer Oberfläche besteht darin, die Fließrichtung aus den einzelnen Pixeln im Raster bestimmen zu können. Die Raster-Funktion \"Fließrichtung\" verwendet eine Oberfläche als Eingabe und erstellt ein Fließrichtungs-Raster von jedem Pixel zu seinem jeweils tiefer gelegenen Nachbarn mit der steilsten Neigung. Die Funktion \"Fließrichtung\" unterstützt drei Modellierungsmethoden: D8 (acht Richtungen), Multiple Flow Direction (MFD) und D-Infinity (DINF). ",
		flowDistanceName: "Fließentfernung",
		flowDistanceSnip: "Für jede Zelle die minimale horizontale oder vertikale Neigungsentfernung zu Zellen eines Wasserlaufs oder Flusses berechnen.",
		flowDistanceDesc: "Die Funktion berechnet die minimale horizontale oder vertikale Neigungsentfernung zu Pixeln eines Wasserlaufs oder Flusses, in den sie fließen. Wenn ein optionales Fließrichtungs-Raster angegeben wird, werden nur die Neigungsrichtungen berücksichtigt, die durch das Eingabe-Fließrichtungs-Raster definiert werden. Die Ausgabe ist ein Raster für die Fließentfernung.",
		focalName: "Focal Statistics",
		focalSnip: "Berechnet auf der Grundlage einer definierten Fokusnachbarschaft die Fokusstatistiken für jedes Pixel eines Bildes.",
		focalDesc: "Mit der Funktion \"Focal Statistics\" wird die Fokusstatistik für jedes Pixel eines Bildes auf der Grundlage einer definierten Fokusnachbarschaft berechnet.",
		geometricName: "Geometrisch",
		geometricSnip: "Die Positionsgenauigkeit eines Datasets durch Berücksichtigung der Höhe steigern.",
		geometricDesc: "Die Funktion \"Geometrisch\" erzeugt auf Grundlage einer Sensordefinition und eines Terrainmodells ein orthorektifiziertes Bild. Sie erhöht die Positionsgenauigkeit eines Datasets durch Berücksichtigung der Höhe.",
		grayscaleName: "Graustufen",
		grayscaleSnip: "Konvertiert ein Multiband-Bild in ein Einzelband-Graustufen-Bild.",
		grayscaleDesc: "Mit dieser Funktion wird ein Multiband-Bild in ein Einzelband-Bild in Graustufen konvertiert.<div><br/>Bei dieser Funktion werden angegebene Gewichtungen auf die einzelnen Eingabebänder angewendet, dann wird das Ausgabebild normalisiert. Gewichtungen werden häufig angewendet, weil einige Bänder eine unterschiedliche Wichtigkeit je nach Anwendung haben. Das blaue Band enthält z. B. mehr Rauschen als andere Bänder.</div>",
		greaterThanEqualName: "Greater Than Equal",
		greaterThanEqualSnip: "Führt auf Zellenbasis eine relationale \"Greater Than or Equal To\"-Operation für zwei Eingaben aus. Gibt 1 für Zellen zurück, bei denen das erste Raster größer als das zweite Raster oder gleich ist, andernfalls 0.",
		greaterThanEqualDesc: "Mit der Funktion wird auf Pixelbasis eine relationale \"Greater Than or Equal To\"-Operation für zwei Eingaben ausgeführt. Sie gibt den Wert 1 für Pixel zurück, bei denen das erste Raster größer als das zweite Raster oder gleich ist, und den Wert 0 für Pixel, bei denen das erste Raster kleiner als oder genauso groß wie das zweite Raster ist.",
		greaterThanName: "Greater Than",
		greaterThanSnip: "Führt auf Zellenbasis eine relationale \"Greater Than\"-Operation für zwei Eingaben aus. Gibt 1 für Zellen zurück, bei denen das erste Raster größer ist als das zweite Raster, andernfalls 0.",
		greaterThanDesc: "Mit der Funktion wird auf Pixelbasis eine relationale \"Greater Than\"-Operation für zwei Eingaben ausgeführt. Gibt den Wert 1 für Pixel zurück, bei denen das erste Raster größer als das zweite Raster ist, und gibt den Wert 0 für Pixel zurück, bei denen das erste Raster nicht größer als das zweite Raster ist.",
		heatIndexName: "Hitzeindex",
		heatIndexSnip: "Kombiniert Umgebungstemperatur der Luft und relative Feuchtigkeit, um die gefühlte Temperatur zurückzugeben.",
		heatIndexDesc: "Mit dieser Funktion wird die gefühlte Temperatur basierend auf der Umgebungstemperatur und der relativen Feuchtigkeit berechnet. Die gefühlte Temperatur wird häufig als Wärme beschrieben, wie sie vom menschlichen Körper empfunden wird.<div><br/>Dieser Hitzeindex kann bei der Berechnung von Gefahren im Zusammenhang mit medizinischen Problemen hilfreich sein, z. B. Muskelkrämpfe, Dehydrierung, Hitzeschäden oder schwerwiegendere Hitzeschläge an heißen und feuchten Tagen. Wenn die relative Luftfeuchtigkeit hoch ist, wird die Verdunstung des Schweißes für den Körper zunehmend schwieriger und Menschen haben keine Möglichkeit, sich auf natürliche Weise abzukühlen. Karten mit Empfehlungen und Warnungen bei Hitze sind häufig ein Produkt der Reklassifizierung des Hitzeindexergebnisses in Klassen. Je höher der Indexwert, desto wahrscheinlicher wird daraus eine Warnung statt eine Empfehlung.</div>",
		hillshadeName: "Schummerung",
		hillshadeSnip: "Erstellt eine 3D-Darstellung der Oberfläche, wobei die relative Position der Sonne beim Schummern des Bildes berücksichtigt wird.",
		hillshadeDesc: "Die Funktion \"Schummerung\" erzeugt eine Graustufen-3D-Darstellung der Terrain-Oberfläche, wobei die relative Position der Sonne beim Schummern des Bildes berücksichtigt wird. <div><br/>Schummerung ist eine Methode zum Visualisieren von Terrain, das durch eine Lichtquelle und die Neigung und Ausrichtung der Höhenoberfläche bestimmt wird. Es handelt sich um eine qualitative Methode zum Visualisieren von Topografie, die keine absoluten Höhenwerte liefert. </div>",
		intName: "Int",
		intSnip: "Konvertiert die einzelnen Zellenwerte eines Rasters durch Kürzung in eine ganze Zahl.",
		intDesc: "Die Funktion \"Int\" konvertiert die einzelnen Pixelwerte eines Rasters durch Kürzung in eine ganze Zahl.",
		interpolateIrregularDataName: "Unregelmäßige Daten interpolieren",
		interpolateIrregularDataSnip: "Interpoliert aus Punktwolken oder unregelmäßigen Gittern.",
		interpolateIrregularDataDesc: "In einigen netCDF- oder HDF-Datasets wird die Geolokalisierung in Form von unregelmäßig angeordneten Arrays aus Pixeln oder Punktdaten gespeichert. Beim Hinzufügen dieser Datasets zu einem Mosaik-Dataset wird von der Funktion \"Unregelmäßige Daten interpolieren\" ein Resampling der unregelmäßig gerasterten Daten durchgeführt, sodass jedes Pixel die gleiche Größe und eine rechteckige Form erhält.<div><br/>Beim Hinzufügen von Variablen aus netCDF oder HDF zu einem Mosaik-Dataset wird automatisch geprüft, ob die Daten in einem regelmäßigen Array angeordnet sind. Falls dies nicht der Fall ist, können die unregelmäßigen Daten mit der Funktion \"Unregelmäßige Daten interpolieren\" in ein regelmäßiges Raster umgewandelt werden. Sie können die verwendete Interpolationsmethode und Zellengröße in der Funktion \"Unregelmäßige Daten interpolieren\" ändern. Bei regelmäßig angeordneten Raster-Daten findet keine Interpolation statt, die Daten werden in ihrem gegenwärtigen Zustand gelesen.</div>",
		isNullName: "Ist Null",
		isNullSnip: "Ermittelt auf Zellenbasis, welche Werte in den Eingabe-Rastern den Wert \"NoData\" aufweisen. Gibt den Wert 1 zurück, wenn die Eingabewerte \"NoData\" lauten, andernfalls 0.",
		isNullDesc: "Mit der Funktion \"Is Null\" wird auf Pixelbasis ermittelt, welche Werte im Eingabe-Raster den Wert \"NoData\" aufweisen. Sie gibt den Wert 1 zurück, wenn der Eingabewert \"NoData\" lautet, und den Wert 0 für Pixel, bei denen der Eingabewert nicht \"NoData\" lautet.",
		kernelDensityName: "Kerndichte",
		kernelDensitySnip: "Berechnet mit einer Kernel-Funktion eine Magnitude pro Flächeneinheit aus Punkt- oder Polylinien-Features, um für jeden Punkt bzw. jede Polylinie eine sanft abgeschrägte Oberfläche anzupassen.",
		kernelDensityDesc: "Mit dieser Funktion wird anhand einer Kernel-Funktion die Größe pro Flächeneinheit auf Basis von Punkt- oder Polylinien-Features berechnet, um für jeden Punkt bzw. jede Polylinie eine sanft abgeschrägte Oberfläche anzupassen.",
		keyMetadataName: "Schlüsselmetadaten",
		keyMetadataSnip: "Schlüsselmetadaten eines Rasters werden in eine Funktionskette eingefügt oder darin überschrieben.",
		keyMetadataDesc: "Mit dieser Funktion können Sie Schlüsselmetadaten eines Rasters einfügen oder überschreiben.<div><br/>Durch die Informationen in den Schlüsselmetadaten wird die Anwendung bei der Verarbeitung und dem Rendern unterstützt, darunter beim Bereitstellen nützlicher Informationen, z. B. von mit den Bilddaten verknüpften Sensornamen und Bandnamen oder der verknüpften Wolkenbedeckung.</div>",
		shortestPathName: "Kostengünstigster Pfad",
		shortestPathSnip: "Kostenentfernungsanalyse mithilfe von Quell- und Zieleingabe durchführen, die dann zum Ermitteln des kostengünstigsten Pfads von einer Quelle zu einem Ziel verwendet wird.",
		shortestPathDesc: "Mit der Funktion \"Kostengünstigster Pfad\" wird der kostengünstigste Pfad von einer Quelle zu einem Ziel berechnet. Die kleinste akkumulative Kostenentfernung wird für jedes Pixel über eine Kostenoberfläche zur nächstgelegenen Quelle berechnet. Dadurch wird ein Ausgabe-Raster erzeugt, das den/die kostengünstigsten Pfad(e) von ausgewählten Positionen zu den nächsten Quellpixeln aufzeichnet, die innerhalb der akkumulativen Kosten-Oberfläche definiert wurden (hinsichtlich der Kostenentfernung).<div><br/>Jedem kostengünstigen Pfad wird ein Wert zugewiesen, wenn sie beim Scanvorgang gefunden wird. Dem Endpixel im Quell-Raster eines Kostenpfades wird der Wert 1 zugewiesen. Dem ersten Pfad wird der Wert 3, dem zweiten der Wert 4 usw. zugewiesen. Wenn mehrere Pfade zusammenlaufen und für die verbleibende Entfernung zurück zu einer Quelle denselben Pfad verwenden, wird dem Segment, in dem die beiden Pfade zusammen verlaufen, der Wert 2 zugewiesen. Dem zusammengeführten Teil des Pfades kann nicht der Wert eines der Pfade zugewiesen werden, da der zusammengeführte Teil zu beiden Pfaden gehört.</div>",
		lessThanEqualName: "Less Than Equal",
		lessThanEqualSnip: "Führt auf Zellenbasis eine relationale \"Less Than or Equal To\"-Operation für zwei Eingaben aus. Gibt 1 für Zellen zurück, bei denen das erste Raster kleiner als das zweite Raster oder gleich ist, andernfalls 0.",
		lessThanEqualDesc: "Mit der Funktion wird auf Pixelbasis eine relationale \"Less Than or Equal To\"-Operation für zwei Raster ausführt. Sie gibt den Wert 1 für Pixel zurück, bei denen das erste Raster kleiner als das zweite Raster oder gleich ist, und den Wert 0 für Pixel, bei denen das erste Raster größer als das zweite Raster ist.",
		lessThanName: "Less Than",
		lessThanSnip: "Führt auf Zellenbasis eine relationale \"Less Than\"-Operation für zwei Eingaben aus. Gibt 1 für Zellen zurück, bei denen das erste Raster kleiner als das zweite Raster ist, andernfalls gibt es 0 zurück.",
		lessThanDesc: "Mit der Funktion wird auf Pixelbasis eine relationale \"Less Than\"-Operation für zwei Eingaben ausführt. Sie gibt den Wert 1 für Pixel zurück, bei denen das erste Raster kleiner als das zweite Raster ist, und den Wert 0 für Pixel, bei denen das erste Raster nicht kleiner als das zweite Raster ist.",
		lnName: "Ln",
		lnSnip: "Den natürlichen Logarithmus (Basis e) von Zellen in einem Raster berechnen.",
		lnDesc: "Mit der Funktion \"Ln\" wird der natürliche Logarithmus (Basis e) der einzelnen Pixel in einem Raster berechnet.",
		log10Name: "Log10",
		log10Snip: "Den Logarithmus der Basis 10 von Zellen in einem Raster berechnen.",
		log10Desc: "Mit der Funktion \"Log10\" wird der Logarithmus der Basis 10 der einzelnen Pixel in einem Raster berechnet.",
		log2Name: "Log2",
		log2Snip: "Den Logarithmus der Basis 2 von Zellen in einem Raster berechnen.",
		log2Desc: "Mit der Funktion \"Log2\" wird der Logarithmus der Basis 2 der einzelnen Pixel in einem Raster berechnet.",
		lookupName: "Lookup",
		lookupSnip: "Erstellt ein neues Raster durch die Suche nach Werten in einem anderen Feld in der Tabelle des Eingabe-Rasters.",
		lookupDesc: "Die Funktion erstellt durch die Suche nach Werten aus einem anderen Feld in der Tabelle des Eingabe-Rasters ein neues Raster.",
		mlClassifyName: "ML-Klassifizierung",
		mlClassifySnip: "Klassifiziert Bilddaten, wobei die Klassifizierung pro Pixel erfolgt. Gemischte Pixel werden dem Feature mit dem höchsten Prozentsatz in diesem Pixel zugewiesen.",
		mlClassifyDesc: "Mit der Funktion \"ML-Klassifizierung\" können Sie eine überwachte Klassifizierung mithilfe des Maximum-Likelihood-Klassifizierungsalgorithmus für ein Raster-Dataset oder ein Mosaik-Dataset ausführen.  Für diese Funktion ist eine Klassifizierungs-Signaturdatei erforderlich.",
		maskName: "Maske",
		maskSnip: "Werte festlegen, die nicht angezeigt werden sollen.",
		maskDesc: "Mit dieser Raster-Funktion werden Werte festgelegt, die nicht im Raster angezeigt werden sollen. Mithilfe der Funktion \"Maske\" können Sie einen oder mehrere NoData-Werte oder einen Bereich gültiger Pixelwerte angeben. ",
		minusName: "Minus",
		minusSnip: "Den Wert des zweiten Eingabe-Rasters vom Wert des ersten Eingabe-Rasters auf Zellenbasis subtrahieren.",
		minusDesc: "Mit der Funktion \"Minus\" wird der Wert des zweiten Eingabe-Rasters vom Wert des ersten Eingabe-Rasters auf Pixelbasis subtrahiert.",
		modName: "Mod",
		modSnip: "Den Rest (Modulo) der Teilung des ersten Rasters durch das zweite Raster auf Zellenbasis ermitteln.",
		modDesc: "Mit der Funktion \"Mod\" wird auf Pixelbasis der Rest (Modulo) der Teilung des ersten Rasters durch das zweite Raster ermittelt. Die Reihenfolge der Eingaben ist wichtig und wirkt sich auf das Ausgabeergebnis aus.",
		mosaicRastersName: "Raster mosaikieren",
		mosaicRastersSnip: "Fügt eine Reihe von Raster-Datasets zusammen, um ein Dataset zu erstellen.",
		mosaicRastersDesc: "Mit der Funktion \"Raster mosaikieren\" wird ein Mosaikbild aus mehreren Bildern zusammengefügt. Wenn sich die Bilder überlappen, stehen mehrere Methoden zur Auswahl, um festzulegen, welche Bilder angezeigt werden.",
		ndviColorizedName: "Farbgebung durch NDVI",
		ndviColorizedSnip: "Ein Multiband-Dataset erstellen, das den Gesundheitszustand der Vegetation basierend auf dem Unterschied zwischen dem roten und dem infrarotnahen Band darstellt.",
		ndviColorizedDesc: "Die Funktion \"Farbgebung durch NDVI\" wendet die Funktion \"NDVI\" auf das Eingabebild an und verwendet anschließend eine Colormap oder einen Farbverlauf, um das Ergebnis anzuzeigen.",
		ndviName: "NDVI",
		ndviSnip: "Berechnet den normalisierten differenzierten Vegetationsindex (Normalized Difference Vegetation Index, NDVI).",
		ndviDesc: "Die Funktion \"NDVI\" erstellt ein Multiband-Dataset, das den Vegetationszustand basierend auf dem Unterschied zwischen dem roten und dem nahinfraroten Band darstellt.<div><br/>NDVI ist ein standardisierter Index, der Ihnen das Erstellen eines Bildes mit Grünanteilen (die sog. relative Biomasse) ermöglicht. Dieser Index nutzt den Kontrast der Eigenschaften zweier Bänder aus einem multispektralen Raster-Dataset: die Absorption durch die Chlorophyllpigmente im roten Band und den Pflanzen-Reflexionsgrad im nahinfraroten Band (NIR). Äußerst niedrige oder negative NDVI-Werte stehen für Bereiche ohne Vegetation wie Wolken, Wasser oder Schnee. Sehr niedrige Werte stehen für Bereiche mit wenig oder ohne Vegetation, wie Beton, Stein oder nackter Erde. Mittlere Werte stehen für Bereiche mit Strauch- und Grasflächen. Hohe Werte stehen für Bereiche mit Forstflächen und üppiger Vegetation.</div>",
		negateName: "Negate",
		negateSnip: "Das Vorzeichen der Zellenwerte des Eingabe-Rasters (Multiplikation mit -1) auf Zellenbasis ändern.",
		negateDesc: "Durch die Funktion \"Negate\" wird das Vorzeichen der Zellenwerte des Eingabe-Rasters auf Pixelbasis geändert (Multiplikation mit -1). ",
		nibbleName: "Nibble",
		nibbleSnip: "Ersetzt die Zellen eines Rasters entsprechend einer Maske durch die Werte der nächsten Nachbarn.",
		nibbleDesc: "Mit der globalen Funktion \"Nibble\" kann ausgewählten Bereichen eines Rasters der Wert des nächsten Nachbarn zugewiesen werden. Dies ist für die Bearbeitung von Raster-Flächen, deren Daten möglicherweise fehlerhaft sind.",
		notEqualName: "Not Equal",
		notEqualSnip: "Führt auf Zellenbasis eine relationale \"Not Equal To\"-Operation für zwei Eingaben aus. Gibt 1 für Zellen zurück, bei denen das erste Raster nicht mit dem zweiten Raster identisch ist, andernfalls 0.",
		notEqualDesc: "Mit der Funktion wird auf Pixelbasis eine relationale \"Not Equal To\"-Operation für zwei Eingaben ausführt. Sie gibt den Wert 1 für Pixel zurück, bei denen das erste Raster ungleich dem zweiten Raster ist, und den Wert 0 für Pixel, bei denen das erste Raster gleich dem zweiten Raster ist.",
		pansharpeningName: "Pansharpen",
		pansharpeningSnip: "Die räumliche Auflösung eines Multiband-Bildes wird durch Verschmelzen mit einem panchromatischen Bild mit höherer Auflösung künstlich verbessert.",
		pansharpeningDesc: "Die Funktion \"Pansharpen\" führt ein panchromatisches Bild bzw. Raster-Band mit hoher Auflösung mit einem Multiband-Raster-Dataset mit geringerer Auflösung zusammen. Dadurch wird die räumliche Auflösung des Multibandbildes erhöht.<div><br/>Zweck des Pan-Sharpening ist es, ein visuell hochwertigeres Bild zu erstellen. Da durch diese Techniken die Radiometrie und die spektralen Eigenschaften der Multiband-Bilddaten geändert werden, müssen Pan-Sharpened-Bilddaten in Analysen für die Fernerkundung mit Vorsicht verwendet werden.</div>",
		pathAllocationName: "Pfadentfernungs-Zuordnung",
		pathAllocationSnip: "Berechnet die kostengünstigste Quelle für jede Zelle auf Basis der geringsten akkumulativen Kosten auf einer Kostenoberfläche unter Berücksichtigung der Oberflächenentfernung zusammen mit horizontalen und vertikalen Kostenfaktoren.",
		pathAllocationDesc: "Mit der Funktion \"Pfadentfernungs-Zuordnung\" wird für jede Zelle die nächste Quelle auf Grundlage der geringsten akkumulativen Kosten über einer Kostenoberfläche berechnet, wobei die Oberflächenentfernung sowie horizontale und vertikale Kostenfaktoren berücksichtigt werden.",
		pathBackLinkName: "Pfadentfernungs-Rückverknüpfung",
		pathBackLinkSnip: "Gibt den Nachbarn an, bei dem es sich um die nächste Zelle auf dem Pfad mit den geringsten akkumulativen Kosten zur kostengünstigsten Quelle handelt, wobei die Oberflächenentfernung zusammen mit horizontalen und vertikalen Kostenfaktoren berücksichtigt werden.",
		pathBackLinkDesc: "Mit der Funktion \"Pfadentfernungs-Rückverknüpfung\" wird der Nachbar ermittelt, bei dem es sich um die nächste Zelle auf dem Pfad mit den geringsten akkumulativen Kosten zur nächstgelegenen Quelle handelt, wobei die Oberflächenentfernung sowie horizontale und vertikale Kostenfaktoren berücksichtigt werden.",
		pathDistanceName: "Pfadentfernung",
		pathDistanceSnip: "Berechnet für jede Zelle die kleinste akkumulative Kostenentfernung von oder zur kostengünstigsten Quelle unter Berücksichtigung der Oberflächenentfernung sowie horizontaler und vertikaler Kostenfaktoren.",
		pathDistanceDesc: "Mit der Funktion \"Pfadentfernung\" wird für jede Zelle die Entfernung mit den geringsten akkumulativen Kosten zur nächstgelegenen Quelle berechnet, wobei die Oberflächenentfernung sowie horizontale und vertikale Kostenfaktoren berücksichtigt werden.",
		plusName: "Plus",
		plusSnip: "Die Werte von zwei Rastern auf Zellenbasis addieren.",
		plusDesc: "Die Funktion \"Plus\" addiert die Werte zweier Raster auf Pixelbasis.",
		powerName: "Power",
		powerSnip: "Die Zellenwerte in einem Raster mit den Werten in einem anderen Raster potenzieren.",
		powerDesc: "Mit der Funktion \"Potenz\" werden die Pixelwerte eines Rasters mit den Werten aus einem anderen Raster potenziert.",
		radarCalibrationName: "Radarkalibrierung",
		radarCalibrationSnip: "RADARSAT-2-Rückstreuung konvertieren.",
		radarCalibrationDesc: "Diese Funktion kann verwendet werden, um RADARSAT-2-Symbolik in einem Mosaik-Dataset oder als Raster-Produkt zu kalibrieren. Die Kalibrierung wird auf Radarbilddaten angewendet, damit die Pixelwerte eine echte Darstellung der Radarrückstreuung sind.",
		rasterInfoName: "RasterInfo",
		rasterInfoSnip: "Eigenschaften des Rasters wie Bittiefe, NoData-Wert, Zellengröße usw. ändern.",
		rasterInfoDesc: "Mit der Funktion \"RasterInfo\" wird ein Dialogfeld geöffnet, dass die Eigenschaften des Raster-Datasets beinhaltet, z. B. Anzahl der Spalten und Zeilen, Anzahl der Bänder, Pixeltyp, Ausdehnung und Raumbezug. Sie können diese Eigenschaften bearbeiten, indem Sie ein Raster-Dataset auswählen, das als Vorlage verwendet werden soll. ",
		rasterizeAttributesName: "Attribute rastern",
		rasterizeAttributesSnip: "Reichert ein Raster mit zusätzlichen Bändern an, die aus Werten bestimmter Attribute einer externen Tabelle oder eines Feature-Service abgeleitet wurden.",
		rasterizeAttributesDesc: "Die Funktion \"Attribute rastern\" reichert ein Raster durch Hinzufügen von Bändern an, die aus Werten bestimmter Attribute, aus einer externen Tabelle oder aus einem Feature-Service abgeleitet wurden. Sie können optional ein Zonen-Raster und das verknüpfte Zonen-ID-Attribut angeben, um die regionenbasierte Suche zu aktivieren.",
		rasterizeFeatureClassName: "Features rastern",
		rasterizeFeatureClassSnip: "Konvertiert Features in Raster.",
		rasterizeFeatureClassDesc: "Diese Funktion konvertiert Polygon-, Polyline-, und Point-Feature-Class-Daten in einen Raster-Layer.<div><br/>Features werden Pixelwerte basierend auf der OBJECTID des Features zugewiesen (Standardeinstellung). Die Pixelwerte können optional auf einem benutzerdefinierten Wertefeld in der Attributtabelle des Eingabe-Features basieren.</div>",
		recastName: "Überarbeiten",
		recastSnip: "Ändert die Parameter einer Funktionskette in einem Mosaik-Dataset oder Image-Service. Die Funktion wird häufig mit LAS-Datasets verwendet, um die Erstellung gesonderter Mosaik-Datasets für verschiedene Terrain-Darstellungen zu vermeiden.",
		recastDesc: "Die Funktion \"Überarbeiten\" wird verwendet, um die in einem Mosaik-Dataset oder Image-Service verwendeten Funktionsparameter dynamisch zu ändern, ohne die Änderungen an den Elementen physisch beizubehalten.",
		regionGroupName: "Gruppierung zu Regionen",
		regionGroupSnip: "Für jede Zelle in der Ausgabe wird die Zugehörigkeit der Zelle zu einer verbundenen Region ermittelt. Jeder Region wird eine eindeutige Nummer zugewiesen.",
		regionGroupDesc: "Mit der globalen Funktion \"Gruppierung zu Regionen\" wird für jede Zelle in der Ausgabe die Identität der verbundenen Region aufgezeichnet, zu der diese Zelle gehört. Jeder Region wird eine eindeutige Nummer zugewiesen.<div><br/>Die erste gescannte Region erhält den Wert 1, die zweite den Wert 2 usw., bis allen Regionen ein Wert zugewiesen wurde. Der Scan erfolgt von links nach rechts, von oben nach unten. Die den Ausgabe-Zonen zugewiesenen Werte hängen davon ab, wann sie im Scanvorgang gefunden wurden.</div>",
		regionGrowName: "Region Grow",
		regionGrowSnip: "Bildet Regionen aus Schwerpunkten.",
		regionGrowDesc: "Die Funktion \"Region Grow\" gruppiert benachbarte Pixel gemäß dem im Ausgangspunkt angegebenen Radius. Den Pixel- oder Objektgruppen wird ein bestimmter Füllwert zugewiesen.",
		remapName: "Neuzuordnung",
		remapSnip: "Pixelwerte durch Zuweisen neuer Werte zu Pixelwertbereichen oder durch Verwenden einer externen Tabelle ändern.",
		remapDesc: "Die Funktion \"Neuzuordnung\" ermöglicht es Ihnen, die Pixelwerte der Raster-Daten zu ändern oder zu reklassifizieren.  Dies kann erreicht werden, indem für die Zuordnung zu Ausgabepixelwerten ein Pixelwertebereich angegeben oder eine Tabelle verwendet wird.",
		reprojectName: "Neu projizieren",
		reprojectSnip: "Ändert die Projektion eines Raster-Datasets, Mosaik-Datasets oder Raster-Elements in einem Mosaik-Dataset. Sie kann auch zum Resampling der Daten in eine neue Zellengröße und zum Definieren eines Ursprungs verwendet werden.",
		reprojectDesc: "Mit der Funktion \"Neu projizieren\" wird die Projektion eines Raster-Datasets, Mosaik-Datasets oder Raster-Elements in einem Mosaik-Dataset geändert. Sie kann auch zum Resampling der Daten in eine neue Zellengröße und zum Definieren eines Ursprungs verwendet werden.<div><br/>Die Funktion \"Neu projizieren\" kann beim Erstellen eines Cache aus einem Raster oder Mosaik-Dataset verwendet werden, das sich nicht in der erforderlichen Projizierung befindet. Wenn beispielsweise ein gecachter Image-Service erstellt wird, der in Anwendungen mit anderen gecachten Services integriert ist, ist es wichtig, dass sie sich alle in derselben Projektion befinden. Dabei handelt es sich häufig um eine Web Mercator-Projektion. Da das Mosaik-Dataset nicht neu projiziert werden kann, haben Sie zwei Möglichkeiten: Entweder erstellen Sie in der erforderlichen Projektion ein referenziertes Mosaik-Dataset aus Ihrem Mosaik-Dataset oder Sie fügen der Funktionskette des Mosaik-Datasets die Funktion \"Neu projizieren\" hinzu. Ein weiteres Beispiel ist die Verwendung dieser Funktion auf dem Raster-Element in einem Mosaik-Dataset. Bei Verwendung der Funktion \"Gecachte Raster\" können Sie die Funktion \"Neu projizieren\" so einfügen, dass der Cache in der neuen Projektion erstellt wird. Raster-Elemente in einem Mosaik-Dataset können gecacht werden, wenn die das Verarbeitungsaufkommen hoch ist und Sie versuchen, einen schnellen Image-Service zu veröffentlichen, ohne den gesamten Image-Service zu cachen.</div>",
		resampleName: "Resampling",
		resampleSnip: "Die Zellengröße eines Rasters ändern.",
		resampleDesc: "Die Funktion \"Resampling\" ändert die Zellengröße, den Resampling-Typ oder beides.<div><br/>Die Funktion \"Resampling\" sollte nur bei speziellen Berechnungsanforderungen verwendet werden. Beispielsweise bei der Berechnung von Magnitude-Richtung für Wind oder Strömung, die ein Resampling aus der Quellauflösung erfordert.</div>",
		roundDownName: "Round Down",
		roundDownSnip: "Für jede Zelle in einem Raster wird die nächstniedrigere Ganzzahl zurückgegeben, die als Gleitkommazahl angegeben wird.",
		roundDownDesc: "Die Funktion \"Round down\" gibt für jedes Pixel in einem Raster die nächstniedrigere ganze Zahl als Gleitkommawert zurück.",
		roundUpName: "Round Up",
		roundUpSnip: "Gibt für jede Zelle in einem Raster den nächsthöheren ganzzahligen Wert als Gleitkommawert zurück.",
		roundUpDesc: "\"Round down\" gibt für jedes Pixel in einem Raster die nächsthöhere ganze Zahl als Gleitkommawert zurück.",
		segmentMeanShiftName: "Mean Shift-Segmentierung",
		segmentMeanShiftSnip: "Benachbarte Pixel mit ähnlichen Spektraleigenschaften in Segmente gruppieren.",
		segmentMeanShiftDesc: "Mit dieser Funktion werden Objekte, Features oder Segmente in Ihren Bilddaten identifiziert, indem benachbarte Pixel, die ähnliche Spektraleigenschaften oder räumliche Eigenschaften aufweisen, gruppiert werden. Zur besseren Ableitung von interessanten Features können Sie die Stärke der räumlichen und spektralen Glättung selbst bestimmen.",
		s1RadiometricCalibrationName: "Sentinel-1 Radiometrische Kalibrierung",
		s1RadiometricCalibrationSnip: "Unterschiedliche Typen der radiometrischen Kalibrierung für Sentinel-1-Daten ausführen.",
		s1RadiometricCalibrationDesc: "Diese Raster-Funktion führt drei verschiedene Kalibrierungen für Sentinel-1-Datasets durch, einschließlich Beta-Nought und Gamma-Nought, und gibt das kalibrierte Dataset aus. Ziel der SAR-Kalibrierung ist es, Bilddaten zu liefern, in denen Pixelwerte direkt mit der Radarrückstreuung der Szene in Beziehung gesetzt werden können. Obwohl nicht kalibrierte SAR-Bilder für den qualitativen Einsatz ausreichend sind, sind kalibrierte SAR-Bilder für die quantitative Nutzung von SAR-Daten unerlässlich.<div><br/>Eine typische SAR-Datenverarbeitung, die Level-1-Bilder erzeugt, beinhaltet keine radiometrischen Korrekturen, und es bleibt eine signifikante radiometrische Verzerrung. Daher ist es notwendig, radiometrische Korrekturen auf SAR-Bilder anzuwenden, damit die Pixelwerte der Bilder tatsächlich die Radarrückstreuung der reflektierenden Oberfläche darstellen. Die radiometrische Korrektur ist auch für den Vergleich von SAR-Bildern notwendig, die mit verschiedenen Sensoren aufgenommen wurden oder die von demselben Sensor zu verschiedenen Zeiten, in verschiedenen Modi erfasst oder von verschiedenen Prozessoren verarbeitet wurden.</div>",
		s1ThermalNoiseRemovalName: "Sentinel-1 Wärmerauschen entfernen",
		s1ThermalNoiseRemovalSnip: "Wärmerauschen aus Sentinel-1-Daten entfernen.",
		s1ThermalNoiseRemovalDesc: "Die Korrektur des Wärmerauschens kann auf Sentinel-1 Level-1 Single Look Complex (SLC)-Produkte sowie auf Level-1 Ground Range Detection (GRD)-Produkte angewendet werden, die noch nicht korrigiert wurden. Der Bearbeiter kann diese Korrektur auch auf Grundlage der Produkt-Annotations entfernen, um das Rauschsignal wieder einzubringen, das zur Erstellung des Originalprodukts entfernt wurde. Produkt-Annotations werden entsprechend aktualisiert, um eine erneute Anwendung der Korrektur zu ermöglichen. ",
		setNullName: "Auf NULL setzen",
		setNullSnip: "\"Auf NULL setzen\" legt für identifizierte Zellpositionen auf Grundlage eines angegebenen Kriteriums den Wert \"NoData\" fest. \"NoData\" wird zurückgegeben, wenn eine Bedingungsauswertung \"true\" (wahr) ergibt, und ein durch ein anderes Raster angegebener Wert wird zurückgegeben, wenn die Bedingungsauswertung \"false\" (falsch) ergibt.",
		setNullDesc: "Mit der Funktion \"Auf NULL setzen\" werden die identifizierten Pixel basierend auf den angegebenen Kriterien auf \"NoData\" festgelegt. \"NoData\" wird zurückgegeben, wenn eine Bedingungsauswertung \"true\" (1) ergibt. Der im False-Raster angegebene Wert wird zurückgegeben, wenn die Bedingungsauswertung \"false\" (0) ergibt. Dieses Kriterium wird durch die Ausgabe einer logischen mathematischen Funktion festgelegt, die dem Eingabe-Raster entspricht.",
		shadedReliefName: "Geschummertes Relief",
		shadedReliefSnip: "Eine Multiband-, farbcodierte, 3D-Darstellung der Oberfläche erstellen, wobei die relative Position der Sonne beim Schummern des Bildes berücksichtigt wird.",
		shadedReliefDesc: "Durch die Funktion \"Geschummertes Relief\" wird eine 3D-Farbdarstellung des Terrains erstellt, indem die Bilder aus den Methoden \"Höhencodiert\" und \"Schummerung\" zusammengeführt werden. Diese Funktion verwendet die Eigenschaften von Höhe und Azimut, um die Position der Sonne anzugeben.<div><br/></div>",
		sinHName: "SinH",
		sinHSnip: "Den Sinus Hyperbolicus von Zellen in einem Raster berechnen.",
		sinHDesc: "Mit der Funktion wird der Sinus Hyperbolicus der Pixel in einem Raster berechnet.",
		sinName: "Sin",
		sinSnip: "Den Sinus von Zellen in einem Raster berechnen.",
		sinDesc: "Mit der Funktion wird der Sinus der Pixel in einem Raster berechnet.",
		slopeName: "Neigung",
		slopeSnip: "Die Änderungsrate von einem Pixelwert im Vergleich zu seinen Nachbarn berechnen.",
		slopeDesc: "Mit dieser Raster-Funktion wird die Neigung berechnet, die der Änderungsrate der Höhe in den einzelnen Zellen des digitalen Höhenmodells (Digital Elevation Model, DEM) entspricht. Dies ist die erste Ableitung eines DEM.<div><br/>Diese Funktion verwendet eine beschleunigte atan()-Funktion. Sie ist sechs mal schneller und der Annäherungsfehler beträgt immer weniger als 0,3 Grad.</div>",
		speckleName: "Speckle",
		speckleSnip: "Filter bereitstellen, um SAR-Datasets vom Rauschen zu bereinigen.",
		speckleDesc: "Speckle ist das Hochfrequenzrauschen auf Radardaten. Die von SAR-Systemen (Synthetic Aperture Radar) generierten Bilder sind aufgrund der Verarbeitung zerstreuter Signale und Interferenzen elektromagnetischer Wellen, die von Oberflächen oder Objekten zurückgeworfen werden, in höchstem Maße Speckling-Effekten unterworfen. Diese Funktion filtert das Radar-Dataset mit Speckling und glättet das Rauschen, wobei Kanten oder scharfe Features im Bild erhalten bleiben.",
		spectralConversionName: "Spektralkonvertierung",
		spectralConversionSnip: "Wendet eine Matrix auf ein Multiband-Bild an.",
		spectralConversionDesc: "Die Funktion \"Spektralkonvertierung\" wendet eine Matrix auf ein Multiband-Bild an, um die Farbwerte der Ausgabe zu beeinflussen.<div><br/>Blaue Bänder werden von einigen Sensoren aufgrund des niedrigen Signal-Rausch-Verhältnisses nicht erfasst. Diese Funktion kann verwendet werden, um z. B. ein falsches Infrarotfarbbild in ein Pseudofarbbild zu konvertieren.</div>",
		squareRootName: "Square Root",
		squareRootSnip: "Die Quadratwurzel der Zellenwerte in einem Raster berechnen.",
		squareRootDesc: "Mit der Funktion \"Square Root\" wird die Quadratwurzel der Pixelwerte in einem Raster berechnet.",
		squareName: "Square",
		squareSnip: "Das Quadrat der Zellenwerte in einem Raster berechnen.",
		squareDesc: "Mit \"Square\" wird das Quadrat der Pixelwerte in einem Raster berechnet.",
		statisticsHistogramName: "Statistiken und Histogramm",
		statisticsHistogramSnip: "Statistiken und Histogramm definieren oder verknüpfen.",
		statisticsHistogramDesc: "Die Funktion \"Statistiken und Histogramm\" wird verwendet, um die Statistik und das Histogramm eines Rasters zu definieren.  Sie können diese Funktion am Ende der Funktionskette einfügen, um die Statistik und das Histogramm einer Raster-Funktionsvorlage (Raster Function Template, RFT) zu beschreiben. Dies kann erforderlich sein, um die Standardanzeige des Verarbeitungsergebnisses zu steuern, insbesondere beim Definieren einer Funktionskette, die viele Funktionen enthält.<div><br/>Sie können die Statistik definieren, indem Sie die Werte eingeben oder aus einem Raster-Dataset bzw. einer XML-Datei importieren. Histogramme können nur durch das Importieren einer Datei definiert werden.</div>",
		statisticsName: "Statistiken",
		statisticsSnip: "Berechnet auf der Grundlage einer definierten Fokusnachbarschaft die Fokusstatistiken für jedes Pixel eines Bildes.",
		statisticsDesc: "Mit der Funktion \"Statistiken\" wird die Fokusstatistik für jedes Pixel eines Bildes auf der Grundlage einer definierten Fokusnachbarschaft berechnet.<div><br/>Die Funktion \"Statistiken\" kann zum Auffüllen von gelöschten Zeilen in einem Bild verwendet werden. Gelöschte Zeilen werden häufig durch Probleme im Sensor verursacht, wobei keine Daten erfasst werden. Dies ist bei Sensoren wie dem Enhanced Thematic Mapper Plus (ETM+) des Landsat 7 aufgetreten. Die fehlenden Daten verursachen Probleme bei der Analyse und auch beim Betrachten der Bilddaten. An diesem Umstand lässt sich bei der Verwendung von Bilddaten für Analysen nicht viel ändern. Wenn jedoch ein überlappendes Bild vorliegt, könnte es anstelle des fehlenden Inhalts verwendet werden. Auf die gleiche Weise könnte auch bei Bilddaten vorgegangen werden, die zur Visualisierung verwendet werden. Da jedoch nicht immer ein zusätzliches Bild zum Auffüllen des fehlenden Inhalts zur Verfügung steht, muss er aus den vorhandenen Daten abgeleitet werden.</div>",
		streamLinkName: "Wasserlauf-Abschnitte",
		streamLinkSnip: "Weist Abschnitten eines linearen Raster-Netzwerks Einzelwerte zwischen Schnittpunkten zu.",
		streamLinkDesc: "Mit der globalen Funktion \"Wasserlauf-Abschnitte\" werden den Abschnitten eines linearen Raster-Netzwerks zwischen Schnittpunkten Einzelwerte zugewiesen.<div><br/>Links sind die Abschnitte eines Wasserlaufkanals, die zwei aufeinander folgende Knoten, einen Knoten und den Abfluss oder einen Knoten und die Wasserscheide miteinander verbinden. In der Hydrologie werden diese Wasserlaufsegmente als Flussabschnitte bezeichnet. Ein Knoten bezieht sich auf einen Abflusspunkt und ermöglicht das Skizzieren eines Abflussgebietes oder der Grenze eines Teileinzuggebiets.</div>",
		stretchName: "Streckung",
		stretchSnip: "Verstärkt ein Bild durch die Anpassung des angezeigten Wertebereichs. Dadurch werden die zugrunde liegenden Pixelwerte nicht verändert. Wenn ein Pixelwert außerhalb des angegebenen Bereichs liegt, wird er als Minimal- oder Maximalwert angezeigt.",
		stretchDesc: "Die Funktion \"Streckung\" verbessert ein Bild, indem sie Eigenschaften wie Helligkeit, Kontrast und Gamma mithilfe mehrerer Streckungstypen ändert. Diese Funktion verwendet die Statistik der Raster innerhalb des Mosaik-Datasets. Bei ihrer Verwendung müssen Sie daher sicherstellen, dass die Statistik berechnet wurde.<div><br/>Der Streckungstyp definiert eine Histogrammstreckung, die auf die Raster angewendet wird, um ihr Erscheinungsbild zu verbessern. Eine Streckung verbessert das Erscheinungsbild der Daten, indem die Pixelwerte entlang einem Histogramm von den Minimal- und Maximalwerten gedehnt werden, die durch ihre Bit-Tiefe definiert sind. </div>",
		swathName: "Streifen",
		swathSnip: "Interpoliert aus unregelmäßigen Gittern oder Streifendaten.",
		swathDesc: "In einigen netCDF- oder HDF-Datasets wird die Geolokalisierung in Form von unregelmäßig angeordneten Arrays gespeichert. Beim Hinzufügen dieser Datasets zu einem Mosaik-Dataset wird von der Funktion \"Streifen\" ein Resampling der unregelmäßig gerasterten Daten durchgeführt, sodass jedes Pixel die gleiche Größe und eine rechteckige Form erhält.<div><br/>Beim Hinzufügen von Variablen aus netCDF oder HDF zu einem Mosaik-Dataset wird automatisch geprüft, ob die Daten in einem regelmäßigen Array angeordnet sind. Falls nicht, wird die Funktion \"Streifen\" angewendet, um die unregelmäßigen Raster in Punkte und anschließend in ein regelmäßig Raster zu konvertieren. Sie können die in der Raster-Funktion \"Streifen\" verwendete Interpolationsmethode und Zellengröße ändern. Bei regelmäßig angeordneten Raster-Daten findet keine Interpolation statt, die Daten werden in ihrem gegenwärtigen Zustand gelesen.</div>",
		tanHName: "TanH",
		tanHSnip: "Den Tangens Hyperbolicus von Zellen in einem Raster berechnen.",
		tanHDesc: "Mit der Funktion wird der Tangens Hyperbolicus der Pixel in einem Raster berechnet.",
		tanName: "Tan",
		tanSnip: "Den Tangens von Zellen in einem Raster berechnen.",
		tanDesc: "Mit der Funktion wird der Tangens der Pixel in einem Raster berechnet. ",
		tasseledCapName: "Tasseled Cap (Kauth-Thomas)",
		tasseledCapSnip: "Berechnet den Grad an Vegetation, Feuchtigkeit und Helligkeit. Diese Methode beruht auf Koeffizienten, die speziell für einen Sensor berechnet werden müssen.",
		tasseledCapDesc: "Die Tasseled-Cap-Transformation (auch Kauth-Thomas-Transformation) wurde entwickelt, um Veränderungen in der Vegetationsphänologie und Städteentwicklung, die von verschiedenen Satellitensensorsystemen erfasst werden, zu analysieren und als Karte darzustellen. Den Namen \"Tasseled Cap\"-Transformation (Zipfelmütze) verdankt sie der Form der graphischen Verteilung von Daten. Mit der Transformation konnten die Muster, die in Landsat-MSS-Daten für landwirtschaftliche Flächen gefunden wurden, in Abhängigkeit vom Lebenszyklus der Nutzpflanzen erklärt werden. Im Wesentlichen findet während des Wachstums von Nutzpflanzen vom Saatkorn bis zur Erntereife eine Nettozunahme der infrarotnahen und eine Abnahme der Rotreflexion basierend auf der Bodenfarbe statt.<div><br/>Diese Transformation hat mittlerweile ein breites Anwendungsspektrum und dient nicht nur zur Überwachung von Nutzpflanzen, sondern auch zur Analyse und Kartenerstellung von Vegetation für Forstwirtschaft, industrielles Vegetationsmanagement, Ökosystem-Kartenerstellung und -Verwaltung, Bestandserfassung und Überwachung von Kohlenstoffbindung und Emissionshandel, Städteentwicklung usw. Mittlerweile werden nicht nur Landsat MSS unterstützt, sondern auch andere gängige Satellitensysteme wie die Multispektralsensoren Landsat TM, Landsat ETM+, Landsat 8, IKONOS, QuickBird, WorldView-2 und RapidEye.</div>",
		timesName: "Times",
		timesSnip: "Die Werte von zwei Rastern auf Zellenbasis multiplizieren.",
		timesDesc: "Mit der Funktion \"Times\" werden die Werte zweier Raster auf Pixelbasis multipliziert.",
		transposeBitsName: "Bitversatz",
		transposeBitsSnip: "Entpackt die Bits des Eingabepixels und ordnet sie festgelegten Bits in dem Ausgabepixel zu. Zweck dieser Funktion ist es, die Bits aus einigen Eingaben zu manipulieren, z. B. Landsat 8-Bänder zur Qualitätsprüfung.",
		transposeBitsDesc: "Die Funktion \"Bitversatz\" entpackt die Bits des Eingabepixels und ordnet sie festgelegten Bits in dem Ausgabepixel zu. Zweck dieser Funktion ist es, die Bits aus einigen Eingaben zu manipulieren, z. B. solche der Landsat 8-Qualitätsbandprodukte.",
		unitConversionName: "Einheitenumrechnung",
		unitConversionSnip: "Werte von einer Maßeinheit in eine andere ändern.",
		unitConversionDesc: "Diese Funktion konvertiert Pixel von einer Einheit in eine andere. Sie unterstützt die Konvertierung von Entfernung, Geschwindigkeit und Temperatur.",
		vectorFieldName: "Vektorfeld",
		vectorFieldSnip: "Datasets mit Größe (u) und Richtung (v) als Pfeile anzeigen, wobei Höhe durch die Größe und Richtung durch den Winkel des Pfeils dargestellt wird.",
		vectorFieldDesc: "Die Funktion \"Vektorfeld\" kombiniert und konvertiert zwei Raster zu einem Zweiband-Raster, dessen Datentyp entweder \"Magnituden-Richtung\" oder \"U-V\" ist.<div><br/>Der U-Wert wird manchmal als zonale Geschwindigkeit und der V-Wert als meridionale Geschwindigkeit bezeichnet.</div>",
		viewshed2Name: "Sichtfeld",
		viewshed2Snip: "Bestimmt anhand geodätischer Methoden die Gitternetz-Oberflächenpositionen, die für eine Reihe von Beobachter-Features sichtbar sind.",
		viewshed2Desc: "Die Funktion \"Sichtfeld\" bestimmt anhand geodätischer Methoden die Raster-Oberflächenpositionen, die für eine Reihe von Beobachter-Features sichtbar sind.<div><br/>Die Sichtbarkeit jedes einzelnen Pixelmittelpunkts wird durch einen Sichtlinientest zwischen dem Ziel und dem jeweiligen Beobachter ermittelt. Wenn ein Beobachter das Ziel im Pixelmittelpunkt sehen kann, wird das Pixel als sichtbar erachtet. Bei der Ermittlung der Sichtbarkeit wird stets die Erdkrümmung berücksichtigt.</div>",
		watershedName: "Abflussgebiet",
		watershedSnip: "Ermittelt die relevante Fläche über einer Gruppe von Zellen in einem Raster.",
		watershedDesc: "Mit der globalen Funktion \"Abflussgebiet\" wird die relevante Fläche über einer Gruppe von Pixeln in einem Raster ermittelt. Abflussgebiete werden von einem Fließrichtungsraster skizziert, das die Fließrichtung von jedem Pixel identifiziert.",
		weightedOverlayName: "Gewichtete Überlagerung",
		weightedOverlaySnip: "Überlagert mehrere Raster anhand eines allgemeinen Maßstabs und gewichtet nach der Wichtigkeit jedes Rasters.",
		weightedOverlayDesc: "Mit dieser Funktion werden mehrere Raster anhand eines allgemeinen Maßstabs überlagert und nach der Wichtigkeit jedes Rasters gewichtet.",
		weightedSumName: "Gewichtete Summe",
		weightedSumSnip: "Ein Raster-Array auf Zellenbasis gewichten und hinzufügen.",
		weightedSumDesc: "Die Funktion \"Gewichtete Summe\" ermöglicht die Überlagerung mehrerer Raster, wobei sie nach ihrer jeweiligen Gewichtung multipliziert und zusammengerechnet werden.",
		windchillName: "Windchill",
		windchillSnip: "Umgebungslufttemperatur und Windgeschwindigkeit zum Berechnen des Windchill-Faktors kombinieren.",
		windchillDesc: "Die Funktion \"Windchill\" ist bei der Identifizierung gefährlicher winterlicher Bedingungen hilfreich, die je nachdem, wie lange man äußerlichen Einflüssen ausgesetzt ist, zu Erfrierungen und sogar Unterkühlung führen können. Windchill ist eine Möglichkeit, das Kälteempfinden einer Person zu messen, wenn Wind bei bereits kalten Temperaturen berücksichtigt wird. Je höher die Windgeschwindigkeit, desto schneller verliert der Körper Wärme und desto höher ist das Kälteempfinden.",
		zonalRemapName: "Zonale Neuzuordnung",
		zonalRemapSnip: "Ordnen Sie Pixel in einem Raster basierend auf in einem anderen Raster definierten Zonen und zonenabhängiger Wertzuordnung, die in einer Tabelle definiert ist, neu zu.",
		zonalRemapDesc: "Mit dieser Funktion können Sie Pixel in einem Raster basierend auf in einem anderen Raster definierten Zonen und zonenabhängiger Wertzuordnung, die in einer Tabelle definiert ist, neu zuordnen.",
		zonalStatisticsName: "Zonale Statistiken",
		zonalStatisticsSnip: "Berechnet Statistiken der Werte eines Gitternetzs innerhalb der Zonen eines anderen Datasets.",
		zonalStatisticsDesc: "Mit der Funktion werden Statistiken der Werte eines Rasters innerhalb der Zonen eines anderen Datasets berechnet. Eine Zone wird durch alle Flächen in der Eingabe definiert, die den gleichen Wert aufweisen. Diese Flächen müssen nicht zusammenhängend sein. Wenn die Zonen- und Werteingaben jeweils Raster mit derselben Auflösung sind, werden sie direkt verwendet. Wenn die Auflösungen verschieden sind, wird ein internes Resampling angewendet, um die Auflösungen zur Übereinstimmung zu bringen, bevor die zonale Operation ausgeführt wird.",
		flowLengthName: "Fließlänge",
		flowLengthSnip: "Berechnet die Entfernung flussaufwärts bzw. flussabwärts oder die kostengewichtete Entfernung entlang des Fließpfades für jede Zelle.",
		flowLengthDesc: "Dies ist eine globale Raster-Funktion. Mit dieser Funktion wird ein Raster-Layer der Entfernung flussaufwärts bzw. flussabwärts oder die gewichtete Entfernung entlang des Fließpfades für jede Zelle erstellt.<div><br/>Eine primäre Verwendung der Funktion \"Fließlänge\" besteht in der Berechnung der Länge des längsten Fließpfades innerhalb eines gegebenen Wassereinzugsgebiets. Dieser Messwert wird häufig verwendet, um die Konzentrationszeit eines Wassereinzugsgebiets zu berechnen. Hierzu wird die Option \"Flussaufwärts\" verwendet. Die Funktion kann auch verwendet werden, um Entfernungs-Flächen-Diagramme für hypothetische Niederschlags- und Abflussereignisse zu erstellen, wobei das Gewichtungs-Raster als Impedanz für die Abwärtsbewegung verwendet wird.</div>",
		streamOrderName: "Wasserlauf-Ordnung",
		streamOrderSnip: "Weist Segmenten eines Rasters, die Verzweigungen eines linearen Netzwerkes darstellen, eine numerische Ordnung zu.",
		streamOrderDesc: "Dies ist eine globale Raster-Funktion. Mit dieser Funktion wird ein Raster-Layer erstellt, der Segmenten eines Rasters, die Verzweigungen eines linearen Netzwerkes darstellen, eine numerische Ordnung zuweist.<div><br/>Die Ausgabe der Funktion \"Wasserlauf-Ordnung\" ist von höherer Qualität, wenn der Eingabe-Raster-Layer für den Wasserlauf und der Eingabe-Raster-Layer für die Fließrichtung von der gleichen Oberfläche abgeleitet werden. Wenn das Wasserlauf-Raster aus einem gerasterten Wasserlauf-Dataset abgeleitet wird, ist die Ausgabe möglicherweise unbrauchbar, da die Richtung auf Zellenbasis nicht mit der Position von Wasserlaufzellen übereinstimmt. Die Ergebnisse der Funktion \"Abflussakkumulation\" können verwendet werden, um durch das Anwenden eines Schwellenwertes zur Auswahl von Zellen mit einer hohen Abflussakkumulation ein Raster-Wasserlaufnetz zu erstellen. Beispielsweise werden Zellen mit einem Zufluss von mehr als 100 Zellen zum Definieren des Wasserlaufnetzes verwendet. Verwenden Sie die Funktion \"Con\" oder \"Auf NULL setzen\", um ein Wasserlaufnetz-Raster zu erstellen, in dem akkumulierte Wasserlaufwerte von 100 und mehr in einem Netz zusammenfließen und die anderen Wasserläufe im Hintergrund (NoData) positioniert werden. Das resultierende Wasserlaufnetz kann in der Funktion \"Wasserlauf-Ordnung\" verwendet werden. Diese Funktion unterstützt nur D8-Eingabe-Fließrichtungs-Raster-Layer. D8-Fließrichtungs-Raster können mit der Funktion \"Fließrichtung\" erstellt und mit dem Standardfließrichtungstyp D8 ausgeführt werden.</div>",
		snapPourPointName: "Abflusspunkt zuordnen",
		snapPourPointSnip: "Fängt Fließpunkte an der Zelle mit der höchsten Abflussakkumulation innerhalb einer bestimmten Entfernung.",
		snapPourPointDesc: "Dies ist eine globale Raster-Funktion. Mit dieser Funktion werden Abflusspunkte an der Zelle mit der höchsten Abflussakkumulation innerhalb einer bestimmten Entfernung gefangen.<div><br/>Beim Abgrenzen von Wassereinzugsgebieten mit der Funktion \"Abflussgebiet\" wird die Funktion \"Abflusspunkt zuordnen\" verwendet, um die Auswahl der Punkte mit hoher Abflussakkumulation sicherzustellen. \"Abflusspunkt zuordnen\" sucht innerhalb einer Fangentfernung um die angegebenen Abflusspunkte nach der Zelle mit der höchsten Abflussakkumulation und verschiebt den Abflusspunkt an diese Position. Die Ausgabe ist ein ganzzahliger Raster-Layer, wenn die ursprünglichen Abflusspunktpositionen an Positionen mit höherer Abflussakkumulation gefangen wurden.</div>",
		sinkName: "Senke",
		sinkSnip: "Erstellt ein Raster, das alle Senken oder Flächen mit interner Drainage identifiziert.",
		sinkDesc: "Dies ist eine globale Raster-Funktion. Mit dieser Funktion wird ein Raster-Layer erstellt, der alle Senken oder Flächen mit interner Drainage identifiziert. Eine Senke ist eine Zelle oder ein Satz räumlich verbundener Zellen, deren Fließrichtung keiner der acht gültigen Werte in einem Fließrichtungs-Raster zugewiesen werden kann. Dies kann auftreten, wenn alle benachbarten Zellen höher als die bearbeitete Zelle sind, oder wenn zwei Zellen ineinander fließen und eine Schleife mit zwei Zellen schaffen.<div><br/>Die Funktion \"Senke\" unterstützt nur D8-Eingabe-Fließrichtungs-Raster-Layer. D8-Fließrichtungs-Raster können mit der Funktion \"Fließrichtung\" erstellt und mit dem Standardfließrichtungstyp D8 ausgeführt werden. Die Ausgabe der Funktion \"Senke\" ist ein Integer-Raster, bei dem jeder Senke ein Einzelwert zugewiesen wird. Diese Einzelwerte weisen einen Bereich auf, der zwischen eins oder der Gesamtzahl der Senken liegt. Wenn die Gesamtzahl der Senken 1000 betragen würde, würde der Bereich der Einzelwerte 1 bis 1000 betragen.</div>",
		aggregateName: "Aggregieren",
		aggregateSnip: "Generiert eine Version des Rasters mit reduzierter Auflösung.",
		aggregateDesc: "Die Funktion \"Aggregieren\" führt entsprechend der angegebenen Aggregationsstrategie ein Resampling des Eingabe-Rasters auf eine gröbere Auflösung durch. Jede Ausgabezelle enthält die Summe, Minimum, Maximum, Mittelwert oder Medianwert der Eingabezellen, die von der Ausdehnung dieser Zelle umfasst werden.<div><br/>Sie können angeben, mit welchem Faktor die Zellengröße des Eingabe-Rasters multipliziert werden soll. Der Zellenfaktorwert 3 würde z. B. zu einer Ausgabe-Zellengröße führen, die dreimal so groß ist wie die des Eingabe-Rasters. Sie können definieren, wie die Ausdehnung der Ausgabe behandelt werden soll, wenn die Anzahl von Zeilen oder Spalten in der Eingabe kein genaues Vielfaches des Zellenfaktors ist. Standardmäßig werden die obere und rechte Begrenzung erweitert, sodass eine größere räumliche Ausdehnung als im Eingabe-Raster erfasst wird, damit wirklich alle Eingabezellen verarbeitet werden. Alternativ können die obere und rechte Begrenzung auf eine kleinere Ausdehnung reduziert werden, sodass die Anzahl der verarbeiteten Zeilen und Spalten ein genaues Vielfaches des Zellenfaktors darstellt. Sie können definieren, wie NoData-Zellen bei der Aggregationsberechnung verarbeitet werden. Beim Standardmechanismus werden NoData-Eingabezellen, die innerhalb der räumlichen Ausdehnung einer größeren Zelle im Ausgabe-Raster liegen, ignoriert, wenn der Wert der jeweiligen Ausgabezelle bestimmt wird. Alternativ können Sie angeben, dass auch nur eine einzige NoData-Eingabezelle in der räumlichen Ausdehnung einer Ausgabezelle dazu führt, dass die Zelle im Ausgabe-Raster als NoData-Zelle behandelt wird.</div>",
		ccdcName: "CCDC-Analyse",
		ccdcSnip: "Überprüft mit dem CCDC-Algorithmus (Continuous Detection and Classification) Änderungen von Pixelwerten im Zeitverlauf und generiert Modellergebnisse.",
		ccdcDesc: "Die CCDC-Analyse-Funktion überprüft mit dem CCDC-Algorithmus (Continuous Detection and Classification) Änderungen von Pixelwerten im Zeitverlauf und generiert ein multidimensionales Raster, das die Modellergebnisse enthält. Die Funktion wird nur gemeinsam mit der Funktion \"Veränderung mit Veränderungsanalyse erkennen\" in einer Vorlage für Raster-Funktionen unterstützt. Um eine Raster-Ausgabe zu erzeugen, verbinden Sie die Funktion \"CCDC-Analyse\" mit der Funktion \"Veränderung mit Veränderungsanalyse erkennen\", speichern Sie dies als Raster-Funktionsvorlage, und führen Sie die Raster-Analyse mit der Funktionsvorlage aus.<div><br/>Diese Funktion verwendet den CCDC-Algorithmus (Continuous Detection and Classification), um Änderungen an Pixelwerten im zeitlichen Verlauf für eine Reihe von Bildern auszuwerten. In einer Zeitserie von optischen Bilddaten oder abgeleiteten Bilddaten (z. B. NDVI) können Pixelwerte aus mehreren Gründen schwanken: 1. Jahreszeitliche Veränderungen: Änderungen an Pixelwerten spiegeln Veränderungen in der Vegetation aufgrund jahreszeitlicher Schwankungen von Temperatur und Niederschlägen wider. In der nördlichen Hemisphäre etwa wird eine höhere Dichte an grüner Vegetation im Sommer als im Winter erwartet. 2. Allmähliche Veränderungen: Änderungen an Pixelwerten spiegeln Trends bei der Vegetation oder Oberflächengewässern aufgrund klimatischer Schwankungen oder langfristiger Landbewirtschaftungspraktiken wider. Beispielsweise kann der Anteil von nackter Erde in einem Gebiet allmählich zunehmen, wenn die Niederschlagsmenge langfristig abnimmt. 3. Abrupte Veränderungen: Änderungen an Pixelwerten spiegeln Veränderungen bei der Landbedeckung wider, die beispielsweise aufgrund von Abholzungen, der Stadtentwicklung und Naturkatastrophen auftreten. Der CCDC-Algorithmus identifiziert alle drei Veränderungstypen mit dem primären Zweck, abrupte Veränderungen zu erkennen. Harmonische Regressions- und Trendmodelle werden auf die Daten eingepasst, um jahreszeitliche und allmähliche Veränderungen abzuschätzen. Plötzliche Abweichungen von den Trendmodellen weisen auf abrupte Veränderungen hin.<div><br/>Der CCDC-Algorithmus wurde ursprünglich für Daten zur Oberflächenreflektion oder Strahlungstemperatur von Landsat TM, Landsat ETM+ und Landsat OLI entwickelt. Die Funktion \"Veränderung mit Veränderungsanalyse erkennen\" in Kombination mit dieser Funktion erkennt jedoch Multiband-Bilddaten von allen unterstützten Sensoren sowie Ableitungen von Einzelband-Bilddaten wie Bandindizes. Sie können beispielsweise eine kontinuierliche Veränderungserkennung für ein NDVI-Raster (Normalisierter differenzierter Vegetationsindex) durchführen, da abrupte Änderungen beim NDVI auf eine Abholzung hindeuten können.</div>",
		computeChangeName: "Veränderungen berechnen",
		computeChangeSnip: "Berechnet die Unterschiede zwischen zwei kategorischen oder kontinuierlichen Raster-Datasets.",
		computeChangeDesc: "Die Funktion \"Veränderung berechnen\" kann verwendet werden, um die Unterschiede zwischen zwei klassifizierten Rastern für die Analyse von Änderungen der Landbedeckung aufzuzählen oder Änderungen zwischen zwei kontinuierlichen Einzelband-Rastern zu untersuchen, z. B. Höhe, Temperatur und Deckungsgrad.",
		detectChangeName: "Veränderung mit Veränderungsanalyse erkennen",
		detectChangeSnip: "Generiert mit dem Ausgabe-Veränderungsanalyse-Raster einen Raster-Layer, der Pixeländerungsinformationen enthält.",
		detectChangeDesc: "<div>Die Funktion \"Veränderung mit Veränderungsanalyse-Raster erkennen\" generiert mit dem Veränderungsanalyse-Raster einen Raster-Layer, der Informationen zum Pixeländerungsdatum enthält. Das Veränderungsanalyse-Raster muss mit dem Werkzeug \"Veränderungen mit CCDC analysieren\", dem Werkzeug \"Veränderungen mit LandTrendr analysieren\", der Raster-Funktion \"CCDC-Analyse\" oder der Raster-Funktion \"LandTrendr-Analyse\" generiert werden.</div><br><div>Diese Raster-Funktion kann mit der Raster-Funktion \"CCDC-Analyse\" oder der Raster-Funktion \"LandTrendr\" in einer Raster-Funktionsvorlage kombiniert werden. Um eine dauerhafte Raster-Ausgabe zu erzeugen, verbinden Sie die Ausgabe der Funktion \"CCDC-Analyse\" oder \"LandTrendr\" mit der Funktion \"Veränderung mit Veränderungsanalyse erkennen\", speichern Sie diese als Raster-Funktionsvorlage, und führen Sie die Raster-Analyse mit der Vorlage aus.</div><br><div>Durch den Parameter <strong>Art der Änderung</strong> wird angegeben, welche Informationen erstellt werden. Die Informationen werden aus dem Veränderungsanalyse-Raster extrahiert. Bei Ausführung dieses Werkzeugs für die Ausgabe der CCDC-Funktion bzw. des CCDC-Werkzeugs können Sie eine der folgenden Optionen auswählen:</div><ul><li><strong>Zeit der letzten Änderung</strong>: Datum und Uhrzeit, zu denen ein Pixel zuletzt als geändert gekennzeichnet wurde.</li><li><strong>Zeit der ersten Änderung</strong>: Datum und Uhrzeit, zu denen ein Pixel das erste Mal als geändert gekennzeichnet wurde.</li><li><strong>Zeit der größten Änderung</strong>: Datum und Uhrzeit, zu denen die berechnete Änderung die größte Signifikanz für ein Pixel aufwies.</li><li> <strong>Anzahl an Änderungen:</strong> Die Gesamtzahl der Änderungen an einem Pixel.</li></ul><div>Bei Ausführung dieser Funktion für die Ausgabe des Werkzeugs bzw. der Funktion \"LandTrendr\" stehen die folgenden zusätzlichen Optionen zur Verfügung:</div><ul><li><strong>Zeit der längsten Änderung</strong>: Datum, an dem ein Pixel als geändert gekennzeichnet wurde, am Anfang oder Ende des längsten Änderungszeitraums.</li><li><strong>Zeit der kürzesten Änderung</strong>: Datum, an dem ein Pixel als geändert gekennzeichnet wurde, am Anfang oder Ende des kürzesten Änderungszeitraums.</li><li><strong>Zeit der schnellsten Änderung</strong>: Datum, an dem ein Pixel als geändert gekennzeichnet wurde, am Anfang oder Ende des Zeitraums der schnellsten Änderung.</li><li><strong>Zeit der langsamsten Änderung</strong>: Datum, an dem ein Pixel als geändert gekennzeichnet wurde, am Anfang oder Ende des Zeitraums der langsamsten Änderung.</li></ul><div>Ausgegeben wird ein Multiband-Raster, dessen Bänder abhängig vom ausgewählten Änderungstyp und der angegebenen maximalen Anzahl von Änderungen Änderungsinformationen enthalten. Wenn beispielsweise <strong>Änderungstyp</strong> auf <strong>Zeit der ersten Änderung</strong> und <strong>Maximale Anzahl an Änderungen</strong> auf 2 festgelegt wird, berechnet die Funktion jeweils die zwei ersten Änderungen, die in der Zeitserie für die Pixel vorliegen. Ausgegeben wird ein Raster mit zwei Bändern, wobei das erste Band das Datum der ersten Änderung eines Pixels enthält und das zweite Band das Datum der zweitältesten Änderung je Pixel.</div><br><div>Bei Anwendung dieser Funktion auf die Ausgabe der Werkzeuge \"LandTrendr\" können Sie optional mit dem Parameter <strong>Segmentdatum</strong> das Datum extrahieren, das den Anfang oder das Ende einer Änderung markiert. Wenn Sie beispielsweise wissen möchten, wie die letzte Änderung in der Zeitserie begonnen hat, legen Sie den Parameter <strong>Art der Änderung</strong> auf <strong>Zeit der letzten Änderung</strong> und den Parameter <strong>Segmentdatum</strong> auf <strong>Anfang des Segments</strong> fest.</div><br><div>Verwenden Sie die folgenden Filterparameter, um spezifischere Datumsangaben zu Änderungen aus dem Veränderungsanalyse-Raster zu extrahieren:</div><ul><li><strong>Nach Jahr filtern:</strong> Hiermit identifizieren Sie Veränderungen, die innerhalb eines bestimmten Zeitraums eingetreten sind, z. B., wenn Sie nach Veränderungen in einer Landschaft während einer fünf Jahre andauernden Trockenheit suchen.</li><li><strong>Nach Dauer filtern:</strong> Hiermit identifizieren Sie Veränderungen, die über eine bestimmte Anzahl von Jahren hinweg eingetreten sind, z. B., wenn Sie nach abrupten Veränderungen über einen Zeitraum von einem oder zwei Jahren suchen. Die Dauer, für die Sie sich interessieren, können Sie mit der Formel <strong>Endjahr - Startjahr + 1</strong> berechnen. Lücken in der Zeitserie werden berücksichtigt.</li><li><strong>Nach Magnitude filtern:</strong> Hiermit identifizieren Sie Veränderungen einer bestimmten Magnitude, z. B., wenn Sie nur nach großen Veränderungen im Vegetationsindex NDVI suchen. Da die Magnitude ein absoluter Wert ist, dürfen der Minimal- und Maximalwert nicht negativ sein. Verwenden Sie zum Festlegen einer Richtungsänderung den Parameter <strong>Richtung der Änderung</strong>.</li></ul>",
		distanceAccumulationName: "Entfernungsakkumulation",
		distanceAccumulationSnip: "Berechnet die akkumulative Entfernung von jeder Zelle zu Quellen. Dabei werden geradlinige Entfernung, Kostenentfernung, tatsächliche Oberflächenentfernung sowie vertikale und horizontale Kostenfaktoren berücksichtigt.",
		distanceAccumulationDesc: "Mit \"Entfernungsakkumulation\" wird die Entfernung von den einzelnen Positionen in einem Untersuchungsgebiet zur nächstgelegenen bzw. kostengünstigsten Quelle berechnet. Wenn nur die Quellen für die Eingabe angegeben werden, wird eine geradlinige Entfernung zu den einzelnen Positionen im Untersuchungsgebiet berechnet. Wenn sowohl Quellen als auch Barrieren als Eingabe verwendet werden, wird bei der Entfernungsakkumulation die geradlinige Entfernung um die Barrieren herum berechnet. Beim Quell-Raster und Barrieren-Raster sollte der Hintergrundwert NoData sein und die Quellen und Barrieren müssen durch gültige Zellenwerte dargestellt werden. Null ist ein gültiger Wert. <div><br/>Wenn ein Oberflächen-Raster als Eingabe angegeben wurde, wird die tatsächliche Oberflächenentfernung zwischen Zellen berechnet. Damit eine Kostenanalyse mit der Entfernungsakkumulation durchgeführt werden kann, wird eine Kostenoberfläche benötigt. Wenn eine Kostenoberfläche angegeben wird, stellt das Ergebnis ein akkumuliertes Kostenentfernungs-Raster dar. Bei der Angabe von horizontalen und vertikalen Faktoren wird die Richtungsabhängigkeit als akkumulierte Kosten betrachtet. Es gibt vier Quelleneigenschaften, die verwendet werden können. Diese Eigenschaften können entweder die Quelle oder die Reisenden von der Quelle darstellen und durch mehrere spezifische Parameter gesteuert werden: 1. Initiale Akkumulation: legt die anfänglichen Kosten vor Beginn der Bewegung fest. Maximale Akkumulation: Legt fest, welche Höhe an Kosten eine Quelle maximal akkumulieren kann, bevor die Grenze erreicht wird: 3. Multiplikator zum Anwenden von Kosten: gibt den Reisemodus oder die Höhe an der Quelle an. Reiserichtung: Ermittelt, ob der Reisende an einer Quelle startet und zu Nicht-Quellenpositionen reist oder an anderen Nicht-Quellenpositionen startet und zurück zu einer Quelle reist.<div><br/>Standardmäßig ist das Ergebnis der Entfernungsakkumulation ein Einzelband, das das Entfernungsakkumulations-Raster darstellt. Es kann jedoch ein zweites Band erstellt werden, das Gegenrichtungsband. Dieses Band gibt von jeder Position im Untersuchungsgebiet an, in welche Richtung die kostengünstigste Quelle liegt. Beide Bänder werden benötigt, um die optimalen Pfade im Untersuchungsgebiet zu bestimmen. Extrahieren Sie zur Erzeugung eines Pfades zunächst mithilfe der Funktion \"Bänder extrahieren\" das Entfernungsakkumulations-Raster und das Gegenrichtungs-Raster. Diese Layer dienen als Eingabe für die Funktion \"Kostenpfad\". Verwenden Sie in der Funktion das Entfernungsakkumulations-Raster als Eingabe für das Kostenentfernungs-Raster und das Gegenrichtungs-Raster als Eingabe für das Kosten-Rückverknüpfungs-Raster.</div>",
		distanceAllocationName: "Entfernungsallokation",
		distanceAllocationSnip: "Berechnet die Entfernungsallokation für jede Zelle zu den angegebenen Quellen auf Grundlage von geradliniger Entfernung, Kostenentfernung, tatsächlicher Oberflächenentfernung sowie vertikaler und horizontaler Kostenfaktoren.",
		distanceAllocationDesc: "Die Entfernungsallokation berechnet, welcher Quelle die einzelnen Positionen im Untersuchungsgebiet zugewiesen werden. Wenn nur die Quellen als Eingabe angegeben sind, werden die Positionen durch eine geradlinige Entfernung zur nächstgelegenen Quelle zugewiesen. Wenn sowohl Quellen als auch Barrieren als Eingabe verwendet werden, wird bei der Entfernungsallokation die geradlinige Entfernung um die Barrieren herum berechnet, um zu bestimmen, welcher Quelle eine Position zugewiesen wird. Beim Quell-Raster und Barrieren-Raster sollte der Hintergrundwert NoData sein und die Quellen und Barrieren müssen durch gültige Zellenwerte dargestellt werden. Null ist ein gültiger Wert.<div><br/>Damit eine Kostenanalyse mit der Entfernungsallokation durchgeführt werden kann, wird eine Kostenoberfläche benötigt. Wenn eine Kostenoberfläche angegeben wird, besteht das Ergebnis aus einem Allokations-Raster, das auf den akkumulativen Kosten und nicht auf der geradlinigen Entfernung beruht. Bei der Angabe von horizontalen und vertikalen Faktoren wird die Richtungsabhängigkeit als akkumulierte Kosten betrachtet. Wenn ein Oberflächen-Raster als Eingabe angegeben wurde, wird die tatsächlich zurückgelegte Oberflächenentfernung beim Wechsel zwischen Zellen bei der Bestimmung der Allokation berechnet. Es gibt vier Quelleneigenschaften, die verwendet werden können. Diese Eigenschaften können entweder die Quelle oder die Reisenden von der Quelle darstellen und durch mehrere spezifische Parameter gesteuert werden: 1. Initiale Akkumulation: legt die anfänglichen Kosten vor Beginn der Bewegung fest. Maximale Akkumulation: Legt fest, welche Höhe an Kosten eine Quelle maximal akkumulieren kann, bevor die Grenze erreicht wird: 3. Multiplikator zum Anwenden von Kosten: gibt den Reisemodus oder die Höhe an der Quelle an. Reiserichtung: Ermittelt, ob der Reisende an einer Quelle startet und zu Nicht-Quellenpositionen reist oder an anderen Nicht-Quellenpositionen startet und zurück zu einer Quelle reist.<div><br/>Standardmäßig ist das Ergebnis der Entfernungsallokation ein Einzelband, das das Entfernungsallokations-Raster darstellt. Bei Aktivierung der Booleschen Option \"Quellenzeile und -spalte als zusätzliche Bänder in Ausgabe generieren\" wird ein Multiband-Raster mit drei Bändern erzeugt. Das erste Band ist das Entfernungs-Allokations-Band, das zweite enthält einen Zeilenindex und das dritte einen Spaltenindex. Diese Indizes geben die Position der Quellenzelle an, deren Entfernung die geringsten akkumulativen Kosten aufweist. Quellenzeilen- und Quellenspaltenindex können zusammen für die Erstellung einer Intensitätskarte verwendet werden. Wenn Sie in Ihrem Untersuchungsgebiet in den Bändern zwei und drei eine Position abfragen möchten, kennen Sie die Zeile und Spalte der kostengünstigsten Quelle für diese Position.</div>",
		eucBackDirectionName: "Euklidische Gegenrichtung",
		eucBackDirectionSnip: "Berechnet für jede Zelle die Richtung zur benachbarten Zelle entlang der kürzesten Route zurück zur nächstgelegenen Quelle in Grad. Dabei werden Barrieren vermieden.",
		eucBackDirectionDesc: "Das Ergebnis der Funktion \"Euklidische Gegenrichtung\" ist ein kontinuierliches Gleitkomma-Raster, das die Richtung in Grad zur nächstgelegenen Quelle zurück darstellt und Barrieren vermeidet, wenn Barrieren angegeben sind.<div><br/>Die Eingabe für \"Euklidische Gegenrichtungen\" ist die Quelle, zu der die Richtung berechnet wird. Als optionale Eingabe kann ein Raster angegeben werden, das Barrieren im Untersuchungsgebiet darstellt. Beim Quell-Raster und Barrieren-Raster sollte der Hintergrundwert NoData sein, und die Quellen und Barrieren sollten durch gültige Werte dargestellt werden. Null ist ein gültiger Wert. Standardmäßig werden bei der Berechnung die kombinierte Ausdehnung von Quellen und Barrieren plus 2 Zeilen und Spalten verarbeitet. Wenn die Analyse nur innerhalb einer festgelegten Entfernung von den Quellen benötigt wird, kann der Parameter \"Maximale Entfernung\" verwendet werden. \"Euklidische Gegenrichtung\" unterstützt eine planare und eine geodätische Methode in der Berechnung. Die Berechnungsmethode \"Planar\" erfolgt auf einer projizierten flachen Ebene mithilfe eines kartesischen 2D-Koordinatensystems. Die Berechnungsmethode \"Geodätisch\" erfolgt auf dem Ellipsoid. Das bedeutet, dass sich die Ergebnisse unabhängig von der Eingabe- oder Ausgabeprojektion nicht ändern.<div><br/>Das Ergebnis der Funktion \"Euklidische Gegenrichtung\" kann gemeinsam mit dem Ergebnis der Funktion \"Euklidische Richtung\" verwendet werden, um die kürzesten Routen von Positionen im Untersuchungsgebiet zurück zur Quelle zu bestimmen. Die Ergebnisse aus \"Euklidische Gegenrichtung\" und \"Euklidische Entfernung\" werden in der Funktion \"Kostenpfad\" gemeinsam mit Zielen verwendet, um die kürzesten Routen zu generieren.</div>",
		expandName: "Erweitern",
		expandSnip: "Erweitert ausgewählte Zonen eines Rasters um eine angegebene Zellenzahl.",
		expandDesc: "Mit der globalen Funktion \"Erweitern\" können Sie Raster generalisieren oder vereinfachen, indem Sie bestimmte Zonen vergrößern. Darüber hinaus können Sie den Grad der Generalisierung steuern.<div><br/>Die ausgewählten Zonen werden vergrößert, indem sie auf andere Zonen erweitert werden. Konzeptionell gesehen können die ausgewählten \"Zonenwerte\" als Vordergrundzonen betrachtet werden, während die anderen Werte Hintergrundzonen bleiben. Die Vordergrundzonen können auf die Hintergrundzonen erweitert werden.<div><br/>Der Grad der Generalisierung kann mit dem Parameter \"Anzahl der Zellen\" gesteuert werden. Standardmäßig lautet dieser Wert 1, d. h. die ausgewählten Zonen werden um jeweils eine Zelle erweitert. Um den Grad der Generalisierung zu erhöhen, können Sie für diesen Parameter einen größeren Wert eingeben. Konzeptionell kommt dies dem Ausführen des Werkzeugs mit einer Häufigkeit gleich, die der angegebenen Anzahl entspricht, wobei die Ergebnisse der vorherigen Ausführung die Eingabe der nächsten Ausführung sind.</div>",
		trendAnalysisName: "Trend generieren",
		trendAnalysisSnip: "Schätzt den Trend für jedes Pixel entlang einer Dimension für eine oder mehrere Variablen in einem multidimensionalen Raster.",
		trendAnalysisDesc: "<div>Mit dieser Funktion können Daten entlang einer linearen, harmonischen oder polynomischen Trendlinie angepasst werden. Das Werkzeug kann auch zur Trenderkennung mittels Mann-Kendall-Test oder saisonalem Kendall-Test verwendet werden.</div><br><div>Das mit dieser Funktion generierte Ausgabe-Trend-Raster wird als Eingabe für die Funktion <strong>Mit Trend vorhersagen</strong> verwendet.</div><br><div>Mit dem Mann-Kendall-Test und dem saisonalen Kendall-Test werden die Daten auf einen monotonen Trend hin untersucht. Sie sind nichtparametrisch, d. h. es wird keine spezifische Verteilung der Daten angenommen. Beim Mann-Kendall-Test werden serielle Korrelation oder saisonale Effekte nicht berücksichtigt. Bei Saisonalität der Daten ist der saisonale Kendall-Test besser geeignet.</div><br><div>Wenn das Werkzeug zur Durchführung des Mann-Kendall-Tests oder des saisonalen Kendall-Tests verwendet wird, ist die Ausgabe ein Fünfband-Raster. Hierbei gilt:</div><ul><li>Band 1 = Sen-Steigung</li><li>Band 2 = p-Wert</li><li>Band 3 = Mann-Kendall-Wert (S)</li><li>Band 4 = S-Varianz</li><li>Band 4 = S-Varianz</li><li>Band 5 = Z-Wert</li></ul><div>Anhand der Ausgaben des Mann-Kendall-Tests oder des saisonalen Kendall-Tests kann ermittelt werden, welche Pixel in Ihrer multidimensionalen Zeitserie einen statistisch signifikanten Trend aufweisen. Sie können diese Informationen in Verbindung mit der linearen, harmonischen oder polynomischen Trendanalyse verwenden, um signifikante Trends in der Zeitserie zu extrahieren. Sie können eine Maske generieren, die Pixel mit signifikanten p-Werten enthält, die Maske auf das multidimensionale Raster anwenden und dieses maskierte multidimensionale Raster als Eingabe für das Werkzeug verwenden, um lineare, harmonische oder polynomische Trendanalysen durchzuführen.</div><br><div>Es gibt drei Möglichkeiten der Anpassung eines Trends an die Variablenwerte entlang einer Dimension: linear, polynomisch und harmonisch.</div><br><div>In der linearen Trendanalyse besteht die Ausgabe aus einem Dreiband-Raster, für das Folgendes gilt:</div><ul><li>Band 1 = Neigung</li><li>Band 2 = Schnittpunkt</li><li>Band 3 = RMS-Fehler (Root Mean Square, quadratisches Mittel), der den Fehler um die am besten passende Linie herum darstellt</li></ul><div>In der polynomischen Trendanalyse hängt die Anzahl der Bänder in der Ausgabe von der Polynom-Ordnung ab. Bei der Polynomanpassung zweiter Ordnung entsteht ein Vierband-Raster. Hierbei gilt:</div><ul><li>Band 1 = Polynomial_2</li><li>Band 2 = Polynomial_1</li><li>Band 3 = Polynomial_0</li><li>Band 4 = RMSE</li></ul><div>Bei der Polynomanpassung dritter Ordnung entsteht ein Fünfband-Raster. Hierbei gilt:</div><ul><li>Band 1 = Polynomial_3</li><li>Band 2 = Polynomial_2</li><li>Band 3 = Polynomial_1</li><li>Band 4 = Polynomial_0</li><li>Band 5 = RMSE</li></ul><div>In der harmonischen Trendanalyse hängt die Anzahl der Bänder in der Ausgabe von der harmonischen Frequenz ab. Bei der Frequenz 1 ist die Ausgabe ein Fünfband-Raster. Hierbei gilt:</div><ul><li>Band 1 = Neigung</li><li>Band 2 = Schnittpunkt</li><li>Band 3 = Harmonic_sin1</li><li>Band 4 = Harmonic_cos1</li><li>Band 5 = RMSE</li></ul><div>Bei der Frequenz 2 ist die Ausgabe ein Siebenband-Raster. Hierbei gilt:</div><ul><li>Band 1 = Neigung</li><li>Band 2 = Schnittpunkt</li><li>Band 3 = Harmonic_sin1</li><li>Band 4 = Harmonic_cos1</li><li>Band 5 = Harmonic_sin2</li><li>Band 6 = Harmonic_cos2</li><li>Band 7 = RMSE</li></ul><div>Mit dem Parameter <strong>Zykluslänge</strong> für die harmonische Trendanalyse wird die Anzahl und Länge der Zyklen angegeben, die Sie für die Daten in einem Tag oder Jahr erwarten. Wenn Sie beispielsweise für Ihre Daten zwei Variationszyklen pro Jahr erwarten, beträgt die Zykluslänge 182,5 Tage bzw. 0,5 Jahre. Wenn alle drei Stunden eine Erfassung von Temperaturdaten erfolgt und pro Tag ein Variationszyklus vorliegt, beträgt die Zykluslänge einen Tag.</div><br><div>Mit dem Parameter <strong>Häufigkeit</strong> für die harmonische Trendanalyse wird das harmonische Modell beschrieben, das an die Daten angepasst wird. Wird die Häufigkeit auf 1 festgelegt, wird eine Kombination aus linearer Kurve und harmonischer Kurve der ersten Ordnung für die Anpassung des Modells verwendet. Beträgt die Häufigkeit 2, wird eine Kombination aus linearer Kurve, harmonischer Kurve der ersten Ordnung und harmonischer Kurve der zweiten Ordnung für die Anpassung des Modells verwendet. Beträgt die Häufigkeit 3, wird zusätzlich eine harmonische Kurve der dritten Ordnung für die Modellierung der Daten verwendet und so weiter.</div><br><div>Modellstatistiken zur Qualität der Übereinstimmung können als optionale Ausgabe generiert werden. Der RMS-Fehler (Root Mean Square, quadratisches Mittel), R-Squared und der Trend für den p-Wert der Neigung können berechnet und symbolisiert werden. Symbolisieren Sie den Ausgabe-Trend-Raster-Layer mit der Symbolisierung <strong>RGB</strong>, und geben Sie die Statistiken als rote, grüne und blaue Bänder an.</div><br>",
		spectralUnmixingName: "Lineare spektrale Entmischung",
		spectralUnmixingSnip: "Führt eine Subpixel-Klassifizierung durch und berechnet den Anteil verschiedener Landbedeckungstypen für einzelne Pixel.",
		spectralUnmixingDesc: "Die Funktion \"Lineare spektrale Entmischung\" berechnet den Anteil einzelner Pixel, die mehrere Arten von Landbedeckungen enthalten. Es wird ein Multiband-Raster erzeugt, in dem jedes Band dem Anteil der einzelnen Landbedeckungsklassen entspricht. Beispiel: Sie können mit diesem Tool in einem Multispektralbild Landbedeckungen klassifizieren und Vegetation mit und ohne Photosyntheseaktivität, nackte Erde und tote Pflanzen ermitteln.<div><br/>Die Reihenfolge des Ausgabe-Multiband-Rasters entspricht der Reihenfolge des Eingabe-Spektralprofils. Die Anzahl der Klassen darf nicht größer sein als die Anzahl an Bändern im Eingabe-Raster. Aus einem Beispiel: Einem Achtband-Raster können Sie Informationen zu maximal acht Klassen entnehmen.</div>",
		multidimensionalFilterName: "Multidimensionaler Filter",
		interpolateRasterByDimensionFunctionName: "Raster nach Dimension interpolieren",
		interpolateRasterByDimensionFunctionSnip: "Interpoliert ein multidimensionales Raster mit angegebenen Dimensionswerten mithilfe von benachbarten Ausschnitten.",
		interpolateRasterByDimensionFunctionDesc: "<p>Mit dieser Funktion können Sie Pixelwerte für einen nicht definierten Dimensionsausschnitt in einem multidimensionalen Raster schätzen. Wenn Sie zum Beispiel ein Dataset haben, das die Meerestemperatur an der Oberfläche sowie 100 Meter unter dem Meeresspiegel enthält, und Sie die Temperatur 50 Meter unter dem Meeresspiegel schätzen möchten, können Sie mit dieser Funktion eine Schätzung für diese Tiefe enthalten. Verwenden Sie dazu die Dimensionsdefinition \"Nach Werten\".</p><p>Sie können auch ein monatliches Dataset auf ein tägliches Dataset reduzieren, indem Sie die Dimensionsdefinition \"Nach Intervall\" verwenden und für den Parameter \"Schritt\" den Wert \"1\" und für den Parameter \"Einheit\" den Wert \"Tage\" angeben.</p><p>Mit der Dimensionsdefinition \"Nach Ziel-Raster\" können Sie den Wert für das Ziel-Raster schätzen.</p>",
		multidimensionalFilterSnip: "Erstellt einen Raster-Layer aus einem multidimensionalen Raster-Dataset oder einem multidimensionalen Raster-Layer, indem Daten entlang definierter Variablen und Dimensionen aufgeteilt werden.",
		multidimensionalFilterDesc: "Das Werkzeug \"Multidimensionaler Filter\" erstellt einen multidimensionalen Raster-Layer, indem es eine Teilmenge von Variablen aus einem multidimensionalen Raster herausfiltert und extrahiert. Beispiel: Sie verfügen über ein multidimensionales Dataset, das die monatlichen Niederschlagsdaten von 30 Jahren enthält. Sie möchten Daten für den Januar der einzelnen Jahre extrahieren, um zu ermitteln, wie sich der Niederschlag in diesem Monat im Lauf der Jahre verändert hat.<div><br/>Verwenden Sie den Parameter \"Dimensionsdefinition\", um Dimensionen über ein Intervall, einen Wert oder einen Wertebereich aufzuteilen. Beispiel: Ihnen stehen für 10 Jahre Daten zum Salzgehalt des Meerwassers, die monatlich alle 2 Meter bis zu einer Tiefe von 500 Metern erfasst wurden, zur Verfügung. In diesem Fall können Sie die verschiedenen Optionen zur Dimensionsdefinition für die folgenden Szenarien verwenden. Szenario1: Extrahieren der Daten zum Salzgehalt für den Monat Januar über den Zeitraum von 10 Jahren. Wählen Sie \"Durch Werte\" aus. Legen Sie für \"Dimension\" den Wert \"StdTime\" und für \"Werte\" die Option \"Januar\" fest. Szenario 2: Aufteilen der Daten zum Salzgehalt für den Tiefenbereich 0 bis 150 Meter. Wählen Sie \"Nach Bereichen\" aus. Legen Sie für \"Dimension\" den Wert \"StdZ\", für \"Minimalwert\" den Wert \"-150\" und für \"Maximalwert\" den Wert \"0\" fest. Szenario 3: Extrahieren der Daten zum Salzgehalt für die ersten 10 Tage des Monats Januar über einen Zeitraum von 10 Jahren. Wählen Sie \"Nach Iteration\" aus. Legen Sie für \"Dimension\" den Wert \"StdTime\", für \"Beginn der ersten Iteration\" und \"Ende der ersten Iteration\" den entsprechenden Beginn und das Ende des Iterationszeitraums und für \"Schritt\" den Wert \"1\" fest, und geben Sie unter \"Einheit\" die Option \"Jahre\" an.</div>",
		multidimensionalRasterName: "Multidimensionales Raster",
		multidimensionalRasterSnip: "Fügt multidimensionale Daten als multidimensionalen Raster-Layer zu einer Karte hinzu.",
		multidimensionalRasterDesc: "Die Funktion \"Multidimensionales Raster\" fügt multidimensionale Daten als multidimensionalen Raster-Layer zu einer Karte hinzu. Diese Funktion ist hilfreich, wenn Raster-Analyse-Workflows mithilfe einer Funktionskette durchgeführt werden.<div><br/>Die unterstützten multidimensionalen Raster-Datasets sind netCDF, GRIB, HDF und Esri CRF. Multidimensionale Mosaik-Datasets werden auch unterstützt.</div>",
		optimalPathAsRasterName: "Optimaler Pfad als Raster",
		optimalPathAsRasterSnip: "Berechnet den kostengünstigsten Pfad von einer Quelle zu einem Ziel.",
		optimalPathAsRasterDesc: "Mit dieser globalen Funktion wird ein Ausgabe-Raster erzeugt, das den oder die optimalen Pfade von ausgewählten Positionen zur jeweils nächstgelegenen Quellenzelle aufzeichnet, die innerhalb der akkumulativen Kostenoberfläche definiert wurden (hinsichtlich der Kostenentfernung).<div><br/>Im Allgemeinen muss mindestens eine Funktion für gewichtete Kosten (Entfernungsakkumulation oder Entfernungsallokation) vor der Ausführung der Funktion \"Optimaler Pfad als Raster\" ausgeführt werden, um das Eingabe-Entfernungsakkumulations- und Gegenrichtungs-Raster zu erstellen. Dies sind erforderliche Eingabe-Raster-Layer für die Funktion \"Optimaler Pfad\". Die Werte für den optimalen Ausgabepfad stellen die Anzahl der Pfade an einer gegebenen Position dar. Häufig folgen die Pfade derselben Route ab einer Quelle und verzweigen sich dann zu unterschiedlichen Zielen. Beispielsweise bedeutet der Wert 1, dass an einer gegebenen Position nur ein optimaler Pfad vorhanden ist, und der Wert 5 bedeutet, dass an dieser Position fünf optimale Pfade vorhanden sind, die durch diese Zelle im Untersuchungsgebiet verlaufen.<div><br/>Bei den Eingabezieldaten muss es sich um einen Raster-Layer handeln. Die Menge der Zielzellen besteht aus allen Zellen im Eingabe-Raster, die über gültige Werte verfügen. Zellen mit NoData-Werten sind nicht in der Menge enthalten. Der Wert 0 wird als ein rechtmäßiges Ziel betrachtet. Ein Ziel-Raster kann mit den Extraktionswerkzeugen erstellt werden. Möglicherweise vorhandene Ziel- oder Quell-Features können mit der Funktion \"Features rastern\" in Raster konvertiert werden. Verwenden Sie als Raster-Eingabe für die Funktion zur Rasterung das Entfernungsakkumulations- oder Gegenrichtungs-Raster. Dadurch wird sichergestellt, dass das Feature mit derselben Zellengröße, derselben Ausdehnung und demselben Raumbezug wie die anderen Raster, die als Eingabe für die Funktion \"Optimaler Pfad als Raster\" dienen, gerastert wird. Die Funktion \"Optimaler Pfad als Raster\" kann auch verwendet werden, um den Pfad des geringsten Widerstands entlang eines digitalen Höhenmodells (DEM) abzuleiten. Verwenden Sie in diesem Fall das DEM für das Eingabe-Entfernungsakkumulations--Raster und die Ausgabe aus der Funktion \"Fließrichtung\" für das Gegenrichtungs-Raster.</div>",
		trendName: "Mit Trend vorhersagen",
		trendSnip: "Berechnet einen prognostizierten multidimensionalen Raster-Layer mithilfe des Ausgabe-Trend-Rasters aus der Funktion \"Trend generieren\" oder aus dem Geoverarbeitungswerkzeug \"Trend-Raster generieren\".",
		trendDesc: "Die Funktion \"Mit Trend vorhersagen\" berechnet einen prognostizierten multidimensionalen Raster-Layer mithilfe des Ausgabe-Trend-Rasters aus der Funktion \"Trend generieren\" oder aus dem Geoverarbeitungswerkzeug \"Trend-Raster generieren\".",
		rasterCollectionName: "Raster-Sammlung verarbeiten",
		rasterCollectionSnip: "Verarbeitet jeden Ausschnitt in einem multidimensionalen Raster oder jedes Element in einem Mosaik-Raster. Mit dieser Funktion können auch mehrere Ausschnitte zu einem einzelnen aggregiert werden.",
		rasterCollectionDesc: "Die Funktion \"Raster-Sammlung verarbeiten\" verarbeitet jeden Ausschnitt in einem multidimensionalen Raster oder jedes Element in einem Mosaik-Raster. Mit dieser Funktion können auch mehrere Ausschnitte zu einem einzelnen aggregiert werden.<div><br/>Diese Funktion verarbeitet einzelne Ausschnitte in multidimensionalen Rastern oder Mosaik-Rastern mithilfe einer Raster-Funktionsvorlage. Diese Funktion unterstützt die folgenden Optionen: 1. Angeben einer Raster-Funktionsvorlage für die \"Elementfunktion\". Sie haben zum Beispiel ein Mosaik-Dataset, das Landsat-Bilddaten aus einem Zeitraum von 20 Jahren enthält, und Sie möchten den NDVI für jede Szene in der Zeitserie berechnen. Geben Sie als \"Elementfunktion\" eine Raster-Funktionsvorlage an, die die NDVI-Raster-Funktion enthält. Angeben einer Raster-Funktionsvorlage für die Aggregationsfunktion. 2. Sie haben zum Beispiel ein multidimensionales Raster, das die Tagestemperaturdaten aus einem Zeitraum von 10 Jahren enthält, und Sie möchten die maximalen Jahrestemperaturen berechnen. Geben Sie als \"Aggregationsfunktion\" eine Raster-Funktionsvorlage an, die die Funktion \"Zellenstatistik\" enthält, und setzen Sie die Operation auf \"Maximum\". Legen Sie unter \"Aggregationsdefinition\" für die \"Dimension\" die Option \"StdTime\", für den \"Typ\" die Option \"Intervallschlüsselwort\" und für das \"Schlüsselwortintervall\" die Option \"Jährlich\" fest. Beachten Sie, dass die Aggregationsdefinition von der Aggregationsfunktion nicht berücksichtigt wird, wenn das Eingabe-Mosaik-Dataset nicht multidimensional ist. Die Aggregationsfunktion aggregiert alle Elemente oder jede Gruppe in eine, wenn sie in der Vorlage der Aggregationsfunktion definiert sind. Weitere Informationen zur Verwendung von Gruppen in einem Mosaik-Dataset finden Sie unter Verwenden von Mosaik-Dataset-Elementen in Raster-Funktionsvorlagen. 3. Geben Sie eine Raster-Funktionsvorlage für die \"Verarbeitungsfunktion\" an. Die Funktion oder Funktionskette in dieser Vorlage dient der Anzeige des neuen verarbeiteten Rasters. Sie können zum Beispiel eine Raster-Funktionsvorlage mit der Funktion \"Colormap\" angeben, um Darstellungsweise des verarbeiteten Raster-Layers zu ändern. Beachten Sie, dass die Funktion auf den aktuellen Anzeigeausschnitt angewendet wird, wenn die Eingabe ein multidimensionales Raster ist. Wenn die Eingabe ein Mosaik-Layer oder ein Mosaik-Dataset ist, wird die Verarbeitungsfunktion mit der Methode \"Erste(r)\" auf das Mosaik-Raster angewendet, um Überlappungen aufzulösen. 3. Sie können Vorlagen für eine beliebige Kombination aus den drei Funktionen angeben. Sie haben zum Beispiel ein Mosaik-Dataset, das eine Zeitserie aus Landsat-Bilddaten enthält, und möchten ein zusammengesetztes Bild mit maximalem NDVI erstellen. Geben Sie als \"Elementfunktion\" eine Raster-Funktionsvorlage an, die die NDVI-Raster-Funktion enthält. Geben Sie als \"Aggregationsfunktion\" eine Raster-Funktionsvorlage an, die die Funktion Zellenstatistik enthält, und setzen Sie die Operation auf \"Maximum\". Geben Sie als \"Verarbeitungsfunktion\" eine Raster-Funktionsvorlage an, die die Funktion \"Colormap\" enthält. Beachten Sie, dass die Verarbeitungsreihenfolge der Funktion der Reihenfolge der Eingabeparameter entspricht. Die \"Elementfunktion\" wird beispielsweise zuerst verarbeitet.</div>",
		randomName: "Zufällig",
		randomSnip: "Erstellt ein Raster mit zufälligen Pixelwerten, die aus einer Pseudozufallsverteilung abgerufen werden. Es werden verschiedene Verteilungen und Zufallszahlengeneratoren unterstützt.",
		randomDesc: "Mit der neuen Funktion \"Zufallsprinzip\" wird ein Raster mit zufälligen Pixelwerten erstellt, das in Raster-Funktionsvorlagen oder Mosaik-Datasets verwendet werden kann.<div><br/>Viele Funktionen können in einem oder mehreren Eingabe-Rastern verwendet werden. Für die Zufallsfunktion ist dagegen kein Eingabe-Raster erforderlich. Das bedeutet, dass sie sich weniger wie eine Funktion als vielmehr wie ein Raster-Dataset verhält. Daher muss bei deren Hinzufügung zu bzw. Entfernung aus der Funktionskette mit besonderer Sorgfalt vorgegangen werden.</div>",
		shrinkName: "Verkleinern",
		shrinkSnip: "Verkleinert die ausgewählten Zonen um eine angegebene Anzahl an Zellen, indem sie durch den Wert der Zelle ersetzt werden, der in der Nachbarschaft am häufigsten vorkommt.",
		shrinkDesc: "Mit der globalen Funktion \"Verkleinern\" können Sie Raster generalisieren oder vereinfachen, indem Sie bestimmte Zonen verkleinern. Darüber hinaus können Sie den Grad der Generalisierung steuern.<div><br/>Die ausgewählten Zonen werden verkleinert bzw. in ihrer Größe reduziert, indem Zellen aus umliegenden Zonen auf sie erweitert werden. Konzeptionell gesehen können die ausgewählten \"Zonenwerte\" als Vordergrundzonen betrachtet werden, während die anderen Werte Hintergrundzonen bleiben. Die Zellen in den Vordergrundzonen können durch Zellen in den Hintergrundzonen ersetzt werden. Dünne Inseln in einer Zone, deren Grenzen als gemeinsame Grenzen mit der Zone angesehen werden können, werden möglicherweise ebenfalls ersetzt.<div><br/>Der Grad der Generalisierung kann mit dem Parameter \"Anzahl der Zellen\" gesteuert werden. Standardmäßig lautet dieser Wert 1, d. h. die ausgewählten Zonen werden um jeweils eine Zelle verkleinert. Um den Grad der Generalisierung zu erhöhen, können Sie für diesen Parameter einen größeren Wert eingeben. Konzeptionell kommt dies dem Ausführen des Werkzeugs mit einer Häufigkeit gleich, die der angegebenen Anzahl entspricht, wobei die Ergebnisse der vorherigen Ausführung die Eingabe der nächsten Ausführung sind.</div>",
		trendToRGBName: "Trend in RGB",
		trendToRGBSnip: "Konvertiert ein Trend-Raster in ein RGB-Raster (Rot, Grün und Blau) mit drei Bändern.",
		trendToRGBDesc: "Mit der Funktion \"Trend in RGB\" wird ein Trend-Raster in ein Raster mit drei Bändern (Rot, Grün und Blau) konvertiert. Das Trend-Raster wird aus der Raster-Funktion \"Trend generieren\" oder der Raster-Funktion \"CCDC-Analyse\" generiert.<div><br/>Diese Funktion ist hilfreich bei der Visualisierung von Modellkoeffizientendaten aus der Funktion \"Trend generieren\" oder \"CCDC-Analyse\". In beiden Funktionen werden Trends bei sich ändernden Pixelwerten abgeschätzt, die Ergebnisse der Funktionen lassen sich jedoch nur schwer direkt interpretieren.<div><br/>Wie bei vielen Raster-Funktionen müssen Sie möglicherweise die dynamische Bereichsanpassung (DRA) verwenden, um die Ergebnisse der Funktion besser anzeigen zu können.</div>",
		landTrendrName: "LandTrendr-Analyse",
		landTrendrSnip: "Überprüft mit der Landsat-Methode zur Erkennung von Störungs- und Regenerationstendenzen (LandTrendr) Veränderungen von Pixelwerten im Zeitverlauf und generiert ein Veränderungsanalyse-Raster, das die Modellergebnisse enthält.",
		landTrendrDesc: "Diese Raster-Funktion kann nur als Eingabe für die Raster-Funktion Veränderung mit Veränderungsanalyse erkennen verwendet werden. Um eine Raster-Ausgabe zu erzeugen, verbinden Sie die LandTrendr-Analyse-Funktion in einer Raster-Funktionsvorlage mit der Funktion \"Veränderung mit Veränderungsanalyse erkennen\", und verwenden Sie die Vorlage als Eingabe für das Geoverarbeitungswerkzeug \"Raster über Raster-Funktion erstellen\". Das Ergebnis ist ein Raster, das Informationen über den Zeitpunkt enthält, an dem sich Pixelwerte verändert haben.<div><br>Der Zweck dieser Raster-Funktion besteht darin, Veränderungen an einem beobachteten Feature zu extrahieren, sodass die optimalen multidimensionalen Eingabe-Bilddaten im Zeitverlauf eine konsistente Beobachtung erfassen und keine atmosphärischen oder Sensorstörungen, Wolken bzw. Wolkenschatten enthalten sollten. Es hat sich bewährt, Daten zu verwenden, die normalisiert wurden und mit einem QA-Band maskiert werden können, z. B. Produkte aus der Landsat-Sammlung 1 zur Oberflächenreflexion mit einer Wolkenmaskierung.<div><br>Die Funktion führt die Analyse für ein Bild pro Jahr aus, und die Anzahl der Jahresabschnitte muss gleich oder größer sein als der im Parameter <strong>Minimale Anzahl der Beobachtungen</strong> angegebene Wert. Es wird empfohlen, Daten aus mindestens sechs Jahren zu verwenden.<div><br>Wenn Sie über monatliche, wöchentliche oder tägliche Daten verfügen, sollten Sie aus jedem Jahr mehrere Bilder auswählen (vorzugsweise aus der gleichen Jahreszeit), Wolken und Wolkenschatten entfernen und durch Kombinieren der Bilder ein einzelnes Bild generieren, das die Beobachtung gut erfasst. Sofern monatliche, wöchentliche oder tägliche Daten als multidimensionales Eingabe-Raster bereitgestellt werden, ermittelt die Funktion einen Abschnitt für die Analyse auf der Grundlage des Datums, das dem im Parameter <strong>Fangdatum</strong> angegebenen Datum am nächsten liegt.<div><br>Ein Feature in einer Landschaft braucht häufig einige Zeit, bis es sich von einer nicht dauerhaften Veränderung wie einem Waldbrand oder einem Insektenbefall erholt hat. Legen Sie den Parameter \"Regenerationsschwellenwert\" fest, um die vom Modell erkannte Regenerationsrate zu steuern. Ein eindeutiges Segment kann keine schnellere Regenerationsrate als 1/Regenerationsschwellenwert aufweisen.<div><br>Die Regeneration nach einer Veränderung in einer Landschaft kann in positiver oder negativer Richtung erfolgen. Erleidet eine Landschaft z. B. Waldverlust, zeigt eine Zeitserie von Vegetationsindexwerten einen Rückgang der Indexwerte, und die Regeneration zeigt einen allmählichen Anstieg der Vegetationsindexwerte oder einen positiven Regenerationstrend. Geben Sie die Richtung des Regenerationstrends mit dem Parameter <strong>Regeneration mit zunehmendem Trend</strong> an.",
		aggregateMultidimensionalName: "Multidimensional aggregieren",
		aggregateMultidimensionalSnip: "Kombiniert vorhandene multidimensionale Raster-Variablendaten entlang einer Dimension.",
		aggregateMultidimensionalDesc: "Mit der Funktion \"Multidimensional aggregieren\" wird ein multidimensionaler Raster-Layer erstellt, indem vorhandene multidimensionale Raster-Variablendaten entlang einer Dimension miteinander kombiniert werden.<div><br>Mit dem Parameter <strong>Dimensionsdefinition</strong> filtern Sie zunächst die Eingabedaten, die Sie aggregieren möchten. Wenn Sie beispielsweise über monatliche Daten aus 30 Jahren verfügen, aber nur einen aggregierten Layer für die ersten 15 Jahre erstellen möchten, können Sie mithilfe des Parameters <strong>Dimensionsdefinition</strong> die Jahre angeben, die in die Analyse einbezogen werden sollen.<div><br><ul><li>Extrahieren der Daten zum Salzgehalt für den Monat Januar über den Zeitraum von 10 Jahren. Wählen Sie <strong>Durch Werte</strong> aus. Legen Sie für <strong>Dimension</strong> den Wert <strong>StdTime</strong> und für <strong>Werte</strong> die Option <strong>Januar</strong> fest.</li><li>Aufteilen der Daten zum Salzgehalt für den Tiefenbereich 0 bis 150 Meter. Wählen Sie <strong>Nach Bereichen</strong> aus. Legen Sie für <strong>Dimension</strong> den Wert <strong>StdZ</strong>, für <strong>Minimalwert</strong> den Wert <strong>-150</strong> und für <strong>Maximalwert</strong> den Wert <strong>0</strong> fest.</li><li>Extrahieren der Daten zum Salzgehalt für die ersten 10 Tage des Monats Januar über einen Zeitraum von 10 Jahren. Wählen Sie <strong>Nach Iteration</strong> aus. Legen Sie für <strong>Dimension</strong> den Wert <strong>StdTime</strong> fest und für <strong>Beginn der ersten Iteration</strong> sowie <strong>Ende der ersten Iteration</strong> entsprechend den Beginn und das Ende des Iterationszeitraums. Legen Sie für <strong>Schritt</strong> den Wert <strong>1</strong> und für <strong>Einheit</strong> die Option <strong>Jahre</strong> fest.</li></ul><div><br>Verwenden Sie die Parameter unter <strong>Aggregationsdefinition</strong>, um mithilfe eines Schlüsselwortes, eines Wertes oder eines Wertebereichs die zu bewertende Dimension und das Aggregationsintervall auszuwählen. Beispiel: Ihnen stehen für 30 Jahre Temperaturdaten der Meeresoberfläche zur Verfügung, die täglich alle 5 Meter bis zu einer Tiefe von 100 Metern erfasst wurden. In diesem Fall können Sie die verschiedenen Intervalloptionen für die folgenden Szenarien verwenden:<div><br><ul><li>Tagestemperaturdaten in monatliche Daten aggregieren, sodass sich ein multidimensionales Raster mit 12 Zeitintervallen ergibt und jedes Intervall das Aggregat der einzelnen Monate für alle Jahre ist. Wählen Sie <strong>Intervallschlüsselwort</strong> aus, und legen Sie für das Schlüsselwort die Option <strong>Monatlich wiederkehrend</strong> fest.</li><li>Tagestemperaturdaten in monatliche Daten aggregieren, sodass sich ein multidimensionales Raster mit 360 Zeitintervallen bzw. 12 Zeitintervallen pro Jahr ergibt (30 Jahre x 12 Monate = 360 Zeitintervalle). Wählen Sie <strong>Intervallschlüsselwort</strong> aus, und legen Sie für das Schlüsselwort die Option <strong>Monatlich</strong> fest.</li><li>Monatliche Temperaturdaten in 4-Monats-Intervalle aggregieren. Wählen Sie <strong>Intervallwert</strong> aus, legen Sie für <strong>Wertintervall</strong> den Wert 4 fest und für <strong>Einheit</strong> die Option <strong>Monate</strong>.</li><li>Temperaturdaten von 0 bis 25 Meter, 25 bis 50 Meter und 50 bis 100 Meter aggregieren. Wählen Sie <strong>Intervallbereiche</strong> aus, und geben Sie für die minimalen und maximalen Tiefenwerte <strong>0 25; 25 50; 50 100</strong> ein.</li></ul>",
		mergeRastersName: "Raster zusammenführen",
		mergeRastersSnip: "Kombiniert mehrere Raster-Datasets räumlich oder für verschiedene Variablen und Dimensionen.",
		mergeRastersDesc: "Diese Funktion erstellt aus einer Liste von Rastern ein zusammengeführtes Raster. Wenn Sie beispielsweise über ein Mosaik-Dataset verfügen, das die monatlichen Niederschlagsdaten von 30 Jahren enthält, und ein weiteres Dataset mit monatlichen Temperaturdaten für 10 Jahre, können Sie diese zu einem multidimensionalen Raster mit beiden Variablen kombinieren. <div><br>Wenn die multidimensionalen Eingabe-Raster unterschiedliche Variablen enthalten, enthält das multidimensionale Ausgabe-Raster sämtliche Variablen. <div><br>Wenn die multidimensionalen Eingabe-Raster unterschiedliche Dimensionen oder Dimensionswerte enthalten, enthält das multidimensionale Ausgabe-Raster sämtliche Dimensionen und Dimensionswerte. <div><br>Wenn die multidimensionalen Eingabe-Raster dieselben Dimensionen und Variablen, jedoch unterschiedliche räumliche Ausdehnungen enthalten, enthält das multidimensionale Ausgabe-Raster die Variablen und Dimensionen für die zusammengeführten räumlichen Ausdehnungen.<div><br>Verwenden Sie diese Funktion, wenn Sie mehrere Raster haben, die Sie als ein Element behandeln möchten, z. B. beim Berechnen einer Statistik für alle Bilder oder beim Farbausgleich, um den Farbausgleich nicht für jedes Bild separat vornehmen zu müssen. Dies ist nützlich bei der Arbeit mit Bilddaten, die aufgrund von Dateigrößenbeschränkungen als getrennte Kacheln gespeichert sind. Auf diese Weise werden die Kacheln als Teil eines Bildes behandelt.",
		boundaryCleanName: "Grenzen glätten",
		boundaryCleanSnip: "Glättet die Grenze zwischen Zonen.",
		boundaryCleanDesc: "<p>Die Funktion generalisiert bzw. vereinfacht Raster, indem sie die Grenzen zwischen Zonen glättet. In der Funktion sind Optionen verfügbar, mit denen gesteuert wird, welche Auswirkungen die Zellen der Eingabezonen auf das Glätten und den angewendeten Glättungsgrad haben. Jede Eingabezelle wird anhand der acht nächsten Nachbarn ausgewertet.</p><p>Beim Glättungsvorgang werden zuerst die Nachbarzellen nach einer bestimmten Priorität geordnet. Durch die Priorität wird festgelegt, welche Zone aus den Nachbarzellen den Wert der Verarbeitungszelle in der Ausgabe ersetzen kann.</p><p>Die Priorität kann entweder auf dem Wert der Zonen oder der Größe der Zonen basieren. Mit dem Parameter <strong>Sortiertyp</strong> wird der verwendete Sortiertyp bestimmt. </p><p>Bei der Standardeinstellung <strong>Nicht sortieren</strong> wird die Priorität basierend auf dem Wert der Zonen ausgewertet. Zellen aus Zonen mit höheren Werten haben für die Ausdehnung in Zonen mit niedrigeren Werten eine höhere Priorität.</p><p>Die Größe bzw. Gesamtfläche der Zonen kann für die Sortierung nach Priorität verwendet werden. Mit der Einstellung <strong>Absteigend</strong> werden die Zonen in absteigender Reihenfolge nach Größe geordnet. Zonen mit größerer Gesamtfläche haben für die Ausdehnung in Zonen mit kleinerer Gesamtfläche eine höhere Priorität. Bei der Einstellung <strong>Aufsteigend</strong> trifft das Gegenteil zu: Zonen mit kleinerer Gesamtfläche haben für die Ausdehnung in Zonen mit größerer Gesamtfläche eine höhere Priorität.</p><p>Der Glättungsgrad wird mit dem Parameter <strong>Ausdehnen und Verkleinern zweimal durchlaufen</strong> gesteuert. Damit wird die Anzahl der Durchgänge für den Ausdehnungs- und Verkleinerungsvorgang festgelegt.</p><p>Ist die Einstellung deaktiviert, wird der Ausdehnungs- und Verkleinerungsvorgang einmal durchgeführt. Ist die Einstellung hingegen aktiviert, wird der Ausdehnungs- und Verkleinerungsvorgang zweimal durchgeführt, sodass sich eine stärkere Glättung der Zonengrenzen ergibt.</p><p>Wenn die Werte aller acht Nachbarzellen dem der Verarbeitungszelle entsprechen, behält die Ausgabezelle den Wert der Eingabezelle bei.</p>",
		predictUsingRegressionName: "Mit Regression vorhersagen",
		predictUsingRegressionSnip: "Berechnet ein vorhergesagtes Raster basierend auf Raster-Daten-Eingaben und einem Regressionsmodell. Das Regressionsmodell ist die Ausgabe des Geoverarbeitungswerkzeugs <strong>Regressionsmodell \"Random Trees\" trainieren</strong>.",
		predictUsingRegressionDesc: "<p>Das Regressionsmodell ist in einer Esri Regressionsdefinitionsdatei (.ecd) definiert. Sie enthält alle Informationen für ein bestimmtes Dataset bzw. verschiedene Datasets sowie das Regressionsmodell und wird durch das Raster-Geoverarbeitungswerkzeug <strong>Regressionsmodell \"Random Trees\" trainieren</strong> generiert.</p><p>Die Eingabe kann ein Einzelband-, ein Multiband- oder ein multidimensionales Raster oder eine Liste dieser Typen sein. Die Typen der Eingabe-Raster müssen mit dem durch das Regressionsmodell trainierten Raster-Typ identisch sein.</p><ul><li>Wenn die Eingabe ein Multiband-Raster ist, wird jedes Band als Einflussvariable behandelt. Die Reihenfolge der Bänder muss mit der Multiband-Eingabe für das Regressionsmodell-Trainingswerkzeug identisch sein.</li><li>Wenn die Eingabe ein multidimensionales Raster ist, wird jede Variable als Einflussvariable behandelt. Außerdem muss die Variable eine Einzelband-Variable mit einer Zeitdimension sein. Die Reihenfolge und Namen der Variablen müssen mit der Eingabe beim Trainieren des Regressionsmodells identisch sein. Bei der Ausgabe handelt es sich um ein multidimensionales Raster.</li><li>Die Eingabe kann eine Elementliste sein. Die Anzahl und Reihenfolge der Elemente muss mit der Eingabe beim Trainieren des Regressionsmodells identisch sein.</li></ul>",
		dimensionalMovingStatisticsName: "Gleitende Dimensionsstatistiken",
		dimensionalMovingStatisticsSnip: "Berechnet in einem gleitenden Fenster und entlang einer bestimmten Dimension Statistiken für multidimensionale Daten.",
		dimensionalMovingStatisticsDesc: "<p>Mit der Funktion \"Gleitende Dimensionsstatistiken\" werden in einem vordefinierten Fenster für alle Dimensionswerte entlang einer bestimmten Dimension verschiedene Statistiken berechnet. Diese Funktion unterstützt einen multidimensionalen Raster-Layer als Eingabe und erstellt als Ausgabe einen multidimensionalen Raster-Layer, der die gleiche Dimensionsgröße wie der Eingabe-Layer aufweist.</p><p>Sie können eine Dimension angeben, für die bei der Berechnung Dimensionswerte berücksichtigt werden. Standardmäßig erfolgt die Berechnung entlang der ersten nichträumlichen Dimension. Mit den Parametern \"Rückwärtsgleitendes Fenster\" und \"Vorwärtsgleitendes Fenster\" können Sie auch eine Fenstergröße angeben.</p><p>Wenn als Statistiktyp \"Perzentil\" ausgewählt ist, werden die Parameter \"Perzentilwert\" und \"Perzentil-Interpolationstyp\" verfügbar. Über diese Parameter können Sie das zu berechnende Perzentil angeben bzw. den zu verwendenden Interpolationstyp auswählen. Wenn als Statistiktyp \"Zirkulärer Mittelwert\" festgelegt ist, wird der Parameter \"Umbruchwert für Verteilung auf Einheitskreis\" verfügbar. Anhand des Umbruchwertes für die Verteilung auf dem Einheitskreis wird ein linearer Wert in den Bereich eines bestimmten zirkulären Mittelwertes konvertiert.</p>",
		terrainFlattenFunctionName: "Terrain-Abplattung",
		terrainFlattenFunctionSnip: "Korrigiert radiometrische Verzerrungen aufgrund der Topografie in den Eingabe-SAR-Daten (SAR, Synthetic Aperture Radar).",
		terrainFlattenFunctionDesc: "<p>Die Raster-Funktion \"Terrain-Abplattung\" korrigiert radiometrische Verzerrungen aufgrund der Topografie in den Eingabe-SAR-Daten (SAR, Synthetic Aperture Radar).</p><p>Die Eingaberadardaten müssen zuerst auf Beta-Nought kalibriert werden. Kalibrieren Sie die Radardaten mit dem Werkzeug \"Radiometrische Kalibrierung anwenden\" auf Beta-Nought.</p><p>Wenn das Eingabe-DEM nicht das gesamte SAR-Dataset abdeckt und es sich um Ausgaben vom Typ \"Gamma-Nought\", \"Sigma-Nought\", \"Streuungsfläche\" und \"Geometrische Verzerrung\" handelt, gibt das Werkzeug NoData-Werte für die Pixel außerhalb der DEM-Ausdehnung aus. Bei Ausgaben vom Typ \"Geometrische Verzerrungsmaske\" gibt das Werkzeug den Wert \"Unbestimmt\" für Pixel außerhalb der DEM-Ausdehnung aus.</p><p>Das Eingabe-DEM muss im geografischen Koordinatensystem WGS 1984 (EPSG:4326) vorliegen.</p>",
		createColorCompositeFunctionName: "Farbkompositbild erstellen",
		createColorCompositeFunctionSnip: "Erstellt ein Dreiband-Raster aus einem Multiband-Raster-Dataset, bei dem jedes Band eine algebraische Berechnung verwenden kann, die auf Bandalgebra basiert.",
		createColorCompositeFunctionDesc: "<p>Die Raster-Funktion \"Farbkompositbild erstellen\" erstellt ein Dreiband-Raster aus einem Multiband-Raster-Dataset, bei dem jedes Band eine algebraische Berechnung verwenden kann, die auf Bandalgebra basiert.</p><p>Beim Definieren des Algorithmus für eine Bandarithmetik können Sie eine einzeilige algebraische Formel für jeden Ausdruck eingeben, um eine Multiband-Ausgabe zu erstellen. Unterstützt werden unäre Operatoren: Plus (+), Minus (-), Multiplizieren (*) und Dividieren (/).</p><p>Wenn in einem Ausdruck eine Band-ID verwendet wird, identifizieren Sie das Band, indem Sie der Bandnummer B oder b voranstellen.</p><p>Eine typische Bandkombination, die für Synthetic Aperture Radar (SAR) in linearen Einheiten verwendet wird, ist VV für Rot, VH für Grün und VV/VH für Blau. Wenn die Eingabedaten in Dezibel angegeben sind, sollte die Bandkombination VV für Rot, VH für Grün und VV-VH für Blau lauten.</p>",
		surfaceParametersName: "Oberflächenparameter",
		surfaceParametersSnip: "Mit dieser Funktion werden mithilfe von geodätischen Methoden Parameter eines Oberflächen-Rasters wie Ausrichtung, Neigung und verschiedene Arten von Krümmungen ermittelt.",
		surfaceParametersDesc: "<p>Mit der Funktion \"Oberflächenparameter\" werden mithilfe von geodätischen Methoden Parameter eines Oberflächen-Rasters wie Ausrichtung, Neigung und verschiedene Arten von Krümmungen ermittelt.</p><p>Diese Funktion kann für die folgenden Anwendungen verwendet werden:</p><ul><li>Berechnen der Ausrichtung und Neigung mithilfe von geodätischen Methoden</li><li>Berechnen verschiedener Arten von Krümmungen aus einem Eingabe-Oberflächen-Raster, z. B. <strong>Tangentialkrümmung (Normalkontur), </strong> womit die topografische Konvergenz und Divergenz eines Flusses auf der Oberfläche beschrieben werden.</li></ul>",
		leastCostCorridorName: "Kostengünstigster Korridor",
		leastCostCorridorSnip: "Berechnet die Summe von zwei akkumulativen Kostenentfernungs-Rastern. Dabei besteht die Option, basierend auf dem Prozentsatz der Minimalkosten oder den akkumulativen Kosten einen Schwellenwert anzuwenden.",
		leastCostCorridorDesc: "<p>Die Eingabe-Raster müssen Entfernungsakkumulations- und Gegenrichtungs-Raster-Ausgaben der Funktion <strong>Entfernungsakkumulation</strong> oder <strong>Entfernungsallokation</strong> sein. Sie sollten auf der Kostenentfernung basieren, und beim Erstellen der Layer für die jeweilige Quelle sollten dieselben Parameter verwendet werden. Beim Erstellen dieser Raster dürfen keine Parameter verwendet werden, die richtungsabhängig (horizontaler Faktor, vertikaler Faktor und Reiserichtung) sind.</p><p>Die Werte im Ausgabe-Korridor-Raster entsprechen der Summe der akkumulativen Kosten beim Erreichen einer bestimmten Position mit den gleichen Einheiten wie die Eingabe-Raster der akkumulativen Kostenentfernung.</p><p>Wenn ein angegebener <strong>Schwellenwert</strong> größer ist als die maximalen akkumulativen Kosten beim Summieren der zwei Entfernungsakkumulations-Raster, deckt das Ausgabe-Korridor-Raster die gleiche Fläche wie die Eingabe-Akkumulations-Raster ab.</p><p>Wenn ein angegebener Schwellenwert unter dem Minimalwert im Korridor-Raster liegt, wird eine Warnmeldung zurückgegeben, und das Ausgabe-Raster ist leer.</p><p>Das Ausgabe-Korridor-Raster kann Zellen mit etwas höheren akkumulativen Kosten als der Schwellenwert enthalten. Diese entstehen dadurch, dass in Gegenrichtungs-Rastern Zellen verwendet werden, denen etwas höhere Kosten zugewiesen sind, um unverbundene Zellen mit dem Korridor zu verbinden.</p>",
		geometricMedianName: "Geometrischer Medianwert",
		geometricMedianSnip: "Mit der Funktion \"Geometrischer Medianwert\" wird der geometrische Medianwert aller Pixel in einer Zeitserie von Multiband-Bilddaten berechnet.",
		geometricMedianDesc: "<p>Mit dieser Funktion werden Rauschen und Ausreißer in Zeitserien-Bilddaten reduziert, indem ein geometrischer Medianpixel für jedes Pixel-Array der Bildserie berechnet wird. Der Algorithmus behält die spektralen Beziehungen zwischen den Bändern in den Pixelspektren bei, deshalb kann die Ausgabe in Analysen verwendet werden (z. B. Vegetationsindizes).</p><p>Wolken und Schatten sollten mit dem Dataset-QA-Band maskiert werden, bevor diese Funktion angewendet wird.</p><p>Wenn es sich um ein Gleitkomma-Eingabebild handelt, etwa eine Oberflächenreflexion mit Werten zwischen 0 und 1, wird mit dem Epsilon-Wert 0,001 normalerweise ein gutes Ergebnis erzielt.</p>"
	},
	rfxArgs: {
		rasterName: "Raster",
		colorSchemeTypeName: "Typ des Farbschemas",
		colormapName: "Colormap",
		colormapNameName: "Colormap-Name",
		colorRampName: "Farbverlauf",
		contrastOffsetName: "Kontrastversatz",
		brightnessOffsetName: "Helligkeitsversatz",
		methodName: "Methode",
		bandNamesName: "Bandnamen",
		bandWavelengthsName: "Bandwellenlängen",
		bandIdsName: "Band-IDs",
		missingBandActionName: "Fehlende Bandaktion",
		conversionParametersName: "Konvertierungsparameter",
		hillshadeTypeName: "Schummerungstyp",
		azimuthName: "Azimut",
		altitudeName: "Höhe",
		slopeTypeName: "Skalierung",
		zFactorName: "Z-Faktor",
		PSPowerName: "Pixelgrößen-Potenz",
		PSZFactorName: "Pixelgrößenfaktor",
		removeEdgeEffectName: "Standardinterpolation für Kantenpixel deaktivieren",
		fromUnitName: "Ausgangseinheit",
		toUnitName: "Zieleinheit",
		rasterTypeName: "Typ",
		minName: "Ausgabe-Minimum",
		maxName: "Ausgabe-Maximum",
		minPercentName: "Minimaler Wert für \"Prozentual eingrenzen\"",
		maxPercentName: "Maximaler Wert für \"Prozentual eingrenzen\"",
		numberOfStandardDeviationName: "Anzahl der Standardabweichungen",
		sigmoidStrengthLevelName: "Sigmoid-Stärkestufe",
		estimateStatsHistogramName: "Statistiken schätzen",
		DRAName: "Dynamische Bereichsanpassung (DRA)",
		statisticsName: "Statistiken",
		histogramsName: "Histogramme",
		statisticsHistogramName: "Statistiken und Histogramm definieren",
		computeGammaName: "Automatische Gammafunktion",
		useGammaName: "Gamma verwenden",
		gammaName: "Gamma",
		inputNamesName: "Namen",
		expressionName: "Ausdruck",
		cellsizeTypeName: "Zellengrößentyp",
		extentTypeName: "Ausdehnungstyp",
		classifierDefinitionFileName: "Eingabe-Definitionsdatei",
		raster1Name: "Raster1",
		raster2Name: "Raster2",
		raster3Name: "Raster3",
		trueRasterName: "True-Raster",
		falseRasterName: "False-Raster",
		noDataInterpretationName: "NoData-Interpretation",
		noDataValuesName: "NoData-Werte",
		includedRangesName: "Eingeschlossene Bereiche",
		curvatureTypeName: "Krümmungstyp",
		rastersName: "Raster",
		attributeTableName: "Tabelle",
		attributeTableTypeName: "Tabellentyp",
		rowsName: "Anzahl Zeilen",
		columnsName: "Anzahl Spalten",
		kernelName: "Kernel",
		mirrorEdgesName: "Kanten spiegeln",
		influencesName: "Einflüsse",
		fieldsName: "Felder",
		remapsName: "Neuzuordnungs-Tabelle",
		evalFromName: "Auswertungsmaßstab von",
		evalToName: "Auswertungsmaßstab bis",
		weightsName: "Gewichtungen",
		DEMName: "DEM",
		shortRangeIDWRadiusName: "Kurzbereichsradius für IDW",
		maxVoidWidthName: "Max. Lückenbreite",
		sigmaGaussianName: "Adaptive Glättung",
		contourTypeName: "Konturlinientyp",
		zBaseName: "Z-Basis",
		numberOfContoursName: "Anzahl der Konturlinien",
		contourIntervalName: "Konturlinienintervall",
		nthContourLineInBoldName: "N-te Konturlinie fett formatiert",
		featureClassName: "Eingabe-Features",
		classIndexFieldName: "Feld",
		resolveOverlapMethodName: "Die Methode \"Überlappung auflösen\"",
		resamplingTypeName: "Resampling-Typ",
		inputCellsizeName: "Eingabezellengröße",
		outputCellsizeName: "Ausgabezellengröße",
		pointFeatureClassName: "Schwerpunkte",
		maxGrowthRadiusFieldName: "Feld \"Max. Wachstumsradius\"",
		similarityThresholdFieldName: "Feld \"Ähnlichkeitsschwellenwert\"",
		fillValueFieldName: "Füllwertefeld",
		spectralDetailName: "Spektraldetail [1..20]",
		spatialDetailName: "Räumliches Detail [1..20]",
		minNumPixelsPerSegmentName: "Minimale Segmentgröße in Pixel",
		boundariesOnlyName: "Nur Segmentgrenzen",
		statisticsTypeName: "Statistiktyp",
		fillNoDataOnlyName: "Nur NoData-Pixel füllen",
		inputDataTypeName: "Eingabedatentyp",
		angleReferenceSystemName: "Winkelbezugssystem",
		outputDataTypeName: "Ausgabedatentyp",
		inputSamplePointFeatureClassName: "Eingabebeispiele",
		valueFieldName: "Wertefeld",
		rasterInfoName: "Raster-Info",
		interpolationMethodName: "Interpolationsmethode",
		radiusName: "Radius",
		radianceGainValuesName: "Strahlungsverstärkung",
		radianceBiasValuesName: "Strahlungs-Bias",
		reflectedGainValuesName: "Reflexionsverstärkung",
		reflectedBiasValuesName: "Reflexions-Bias",
		sunElevationName: "Sonnenstand (Grad)",
		albedoName: "Albedo",
		scaleFactorName: "Skalierungsfaktor",
		offsetName: "Versatzwert",
		thresholdTypeName: "Schwellenwerttyp",
		thresholdsName: "Schwellenwerte",
		undefinedClassName: "Nicht definierte Klasse",
		minValueName: "Min.",
		maxValueName: "Max.",
		operationName: "Operation",
		clippingTypeName: "Ausschneidetyp",
		clippingGeometryName: "Geometrie/Raster zum Ausschneiden",
		extentName: "Ausgabeausdehnung",
		useInputFeatureGeometryName: "Eingabe-Features als Geometrie zum Ausschneiden verwenden",
		remapDefinitionTypeName: "Neuzuordnungs-Definitionstyp",
		inputRangeName: "Eingabebereiche",
		outputValuesName: "Ausgabewerte",
		noDataRangeName: "NoData-Bereiche",
		inputFieldName: "Eingabefeld",
		outputFieldName: "Ausgabefeld",
		inputMaxFieldName: "Eingabefeld für Maximum (optional)",
		remapTableTypeName: "Neuzuordnungs-Tabellentyp",
		allowUnmatchedName: "Pixelwerte ohne Übereinstimmung zulassen",
		changeMissingValuesToNoDataName: "Fehlende Werte zu NoData ändern",
		visibleBandIDName: "ID für sichtbares Band",
		infraredBandIDName: "ID für Infrarotband",
		scientificOutputName: "Wissenschaftliche Ausgabe",
		bandIndexesName: "Bandindizes",
		constantName: "Konstante",
		weightName: "Gewichtung",
		minimumName: "Minimum",
		maximumName: "Maximum",
		sourceDataName: "Quell-Raster",
		sourceFieldName: "Quellfeld",
		costRasterName: "Kosten-Raster",
		maxDistanceName: "Maximale Entfernung",
		valueRasterName: "Werte-Raster",
		costMultiplierName: "Multiplikator zum Anwenden auf Kosten",
		startCostName: "Startkosten",
		accumCostResistanceRateName: "Akkumulative Kostenresistenzrate",
		capacityName: "Kapazität",
		travelDirectionName: "Reiserichtung",
		cellSizeName: "Zellengröße",
		populationFieldName: "Feld mit Grundgesamtheit",
		areaUnitsName: "Flächeneinheiten",
		outputValueTypeName: "Ausgabezellenwerte",
		barriersName: "Eingabe-Barrieren",
		destinationDataName: "Ziel-Raster",
		destinationFieldName: "Zielfeld",
		pathTypeName: "Pfadtyp",
		observerFeaturesName: "Beobachter-Features",
		analysisMethodName: "Analysemethode",
		analysisTypeName: "Analysetyp",
		verticalErrorName: "Vertikaler Fehler",
		refractivityCoefficientName: "Brechungskoeffizient",
		surfaceOffsetName: "Oberflächenversatz",
		observerElevationName: "Beobachterhöhe",
		observerOffsetName: "Beobachterversatz",
		innerRadiusName: "Innerer Radius",
		innerRadiusIs3DDistanceName: "Innerer Radius ist 3D-Entfernung",
		outerRadiusName: "Äußerer Radius",
		outerRadiusIs3DDistanceName: "Äußerer Radius ist 3D-Entfernung",
		horizontalStartAngleName: "Horizontaler Anfangswinkel",
		horizontalEndAngleName: "Horizontaler Endwinkel",
		verticalUpperAngleName: "Vertikaler oberer Winkel",
		verticalLowerAngleName: "Vertikaler unterer Winkel",
		zoneDataName: "Zonen-Raster",
		zoneFieldName: "Zonenfeld",
		ignoreNoDataName: "NoData-Werte in Berechnungen ignorieren",
		temperatureRasterName: "Temperatur-Raster",
		inTemperatureUnitsName: "Temperatureinheiten",
		outHeatIndexTemperatureUnitsName: "Hitzeindexeinheiten",
		relativeHumidityRasterName: "Raster für relative Feuchtigkeit",
		outWindChillTemperatureUnitsName: "Windchill-Einheiten",
		windSpeedRasterName: "Windgeschwindigkeits-Raster",
		inWindSpeedUnitsName: "Windgeschwindigkeitseinheiten",
		valueName: "Wert",
		propertyName: "Name der Eigenschaft",
		jsonName: "Metadaten-JSON",
		zoneTableName: "Tabelle mit zonalen Attributen",
		attributeFieldNames: "Name des Attributfeldes",
		backgroundName: "Hintergrundwert",
		whereClauseName: "Where-Bedingung",
		minimumValueFieldName: "Minimalwert-Feldname",
		maximumValueFieldName: "Maximalwert-Feldname",
		outValueFieldName: "Ausgabewert-Feldname",
		defaultValueName: "Standard-Ausgabewert",
		conversionMatrixName: "Konvertierungsmatrix",
		IsPseudoColorOutputName: "Ist eine Pseudofarbausgabe",
		unmappedAsRandomColorName: "Nicht zugeordneten Pixeln nach dem Zufallsprinzip eine Farbe zuweisen",
		distanceMethodName: "Entfernungsmethode",
		flowDirRasterName: "Fließrichtungs-Raster",
		pourPointName: "Abflusspunkt-Raster",
		pourPointFieldName: "Abflusspunkt-Feld",
		constantZName: "Z-Konstante",
		zOffsetName: "Z-Versatz",
		geoIdName: "Geoid",
		calibrationTypeName: "Kalibrierungstyp",
		filterTypeName: "Filter-Typ",
		filterSizeName: "Filtergröße",
		noiseModelName: "Rauschmodell",
		noiseVarianceName: "Rauschvarianz",
		additiveNoiseMeanName: "Additives Rauschen – Mittelwert",
		multiplicativeNoiseMeanName: "Multiplikatives Rauschen – Mittelwert",
		numberofLooksName: "Anzahl von Looks",
		dampingFactorName: "Dämpfungsfaktor",
		maskRasterName: "Maskierungs-Raster",
		nibbleValuesName: "NoData-Werte verwenden, falls sie der nächste Nachbar sind",
		nibbleNoDataName: "Nibble für NoData-Zellen",
		zLimitName: "Z-Limit",
		flowDirectionTypeName: "Fließrichtungstyp",
		weightRasterName: "Gewichtungs-Raster",
		forceEdgeName: "Abfluss von Randzellen nach außen erzwingen",
		streamRasterName: "Wasserlauf-Raster",
		surfaceRasterName: "Oberflächen-Raster",
		conversionType: "Umwandlungstyp",
		distanceRaster1: "Entfernungs-Raster 1",
		distanceRaster2: "Entfernungs-Raster 2",
		costDistanceRaster: "Kostenentfernungs-Raster",
		costBacklinkRaster: "Kosten-Rückverknüpfungs-Raster",
		overridesName: "Overrides",
		fieldName: "Feld",
		signatureFileOrUrl: "Signaturdatei oder URL",
		redName: "Rot",
		greenName: "Grün",
		blueName: "Blau",
		infraredName: "Infrarot",
		panchromaticName: "Panchromatisch",
		multispectralName: "Multispektral",
		pansharpeningType: "Pan-Sharpening-Typ",
		sensorName: "Sensor",
		spatialReferenceName: "Raumbezug",
		xCellsizeName: "X-Zellengröße",
		yCellsizeName: "Y-Zellengröße",
		xOriginName: "X-Registrierungspunkt",
		yOriginName: "Y-Registrierungspunkt",
		percentileName: "Perzentilwert",
		neighborhoodType: "Nachbarschaftstyp",
		widthName: "Breite",
		heightName: "Höhe",
		startAngleName: "Anfangswinkel",
		endAngleName: "Endwinkel",
		neighborhoodValues: "Nachbarschaftswerte",
		horizontalRaster: "Horizontal-Raster",
		horizontalFactor: "Horizontaler Faktor",
		verticalRaster: "Vertikal-Raster",
		verticalFactor: "Vertikaler Faktor",
		streamRaster: "Wasserlauf-Raster",
		flowDirRaster: "Fließrichtungs-Raster",
		numberNeighborCells: "Anzahl der Nachbarzellen",
		zoneConnectivity: "Zonenkonnektivität",
		addLinkBehavior: "Link hinzufügen",
		excludedValue: "Ausgeschlossener Wert",
		constantFillCheck: "Füll-Raster aus Konstante erstellen",
		fillRaster: "Füll-Raster",
		constantFillValue: "Konstanter Wert",
		inputBitPositions: "Eingabebit",
		outputBitPositions: "Ausgabebit",
		distanceTypeName: "Entfernungstyp",
		barrierDataName: "Raster-Barrieren",
		pourPointDataName: "Abflusspunkt-Raster",
		accumulationRasterName: "Abflussakkumulations-Raster",
		snapDistanceName: "Fangentfernung",
		orderMethodName: "Anordnungsmethode",
		directionMeasurementName: "Messrichtung",
		processAsMultiband: "Als Multiband verarbeiten",
		processMultidimensional: "Als multidimensional verarbeiten",
		forceFlowDirectionConvention: "Fließrichtungs-Konvention für Rückverknüpfungs-Raster erzwingen",
		initialAccumulation: "Initiale Akkumulation",
		maximumAccumulation: "Maximale Akkumulation",
		sourceLocationBands: "Quellenzeile und -spalte als zusätzliche Bänder in Ausgabe generieren",
		backDirectionBand: "Gegenrichtung als zusätzliches Band in der Ausgabe generieren",
		numberOfCells: "Anzahl der Zellen",
		zoneValues: "Zonenwerte",
		shrinkMethod: "Verkleinerungsmethode",
		expandMethod: "Erweiterungsmethode",
		inputSpectralProfileType: "Spektralprofiltyp",
		spectralProfileFileName: "Spektralprofil",
		trainingFeatureFileName: "Trainings-Feature",
		nonNegative: "Nicht negativ",
		sumToOne: "Summenwert 1",
		randomDistribution: "Verteilung",
		meanName: "Mittelwert",
		probabilityName: "Wahrscheinlichkeit",
		alphaName: "Alpha",
		betaName: "Beta",
		rName: "r",
		nName: "N",
		seed: "Ursprung",
		randomNumberGenerator: "Zufallszahlengenerator",
		cellFactor: "Zellenfaktor",
		aggregationType: "Aggregierungs-Methode",
		extentHandling: "Ausdehnung erweitern, falls nötig",
		trendAnalysisDimensionName: "Dimensionsname",
		trendAnalysisType: "Trendtyp",
		harmonicFrequency: "Harmonische Frequenz",
		polynomialOrder: "Polynom-Ordnung",
		cycleLengthName: "Zykluslänge",
		trendAnalysisRMSE: "RMSE",
		trendAnalysisR2: "R-Squared",
		trendAnalysisSlopePValue: "P-Wert des Neigungskoeffizienten",
		trendAnalysisSeasonalPeriod: "Saisonaler Zeitraum",
		cycleUnitName: "Zykluseinheit",
		predictDimensionValues: "Werte",
		dimensionDefinitionType: "Dimensionsdefinition",
		predictDimensionStart: "Anfang",
		predictDimensionEnd: "Ende",
		predictDimensionInterval: "Wertintervall",
		dimensionUnit: "Einheit",
		interpolationCellsizeName: "Zellengröße für die Interpolation",
		variableName: "Variablen",
		dimensionlessName: "Ohne Dimensionen",
		mdimDefinition: "Dimensionsdefinition",
		dimensionName: "Dimension",
		iterationStart: "Beginn der ersten Iteration",
		iterationEnd: "Ende der ersten Iteration",
		intervalStart: "Beginn des Intervalls",
		intervalEnd: "Ende des Intervalls",
		stepName: "Schritt",
		rangesName: "Bereiche",
		minValue: "Minimum",
		maxValue: "Maximum",
		changeAnalysisRasterName: "Veränderungsanalyse-Raster",
		changeTypeName: "Typ ändern",
		segmentDate: "Segmentdatum",
		changeDirectionName: "Richtung der Änderung",
		maxNumChangesName: "Maximale Anzahl an Änderungen",
		filterByYear: "Nach Jahr filtern",
		minimumYear: "Minimalwert",
		maximumYear: "Maximalwert",
		filterByDuration: "Nach Dauer filtern",
		minimumDuration: "Minimaldauer",
		maximumDuration: "Maximaldauer",
		filterByMagnitude: "Nach Magnitude filtern",
		minimumMagnitude: "Minimalmagnitude",
		maximumMagnitude: "Maximalmagnitude",
		filterByStartValue: "Nach Startwert filtern",
		minimumStartValue: "Minimaler Startwert",
		maximumStartValue: "Maximaler Startwert",
		filterByEndValue: "Nach Endwert filtern",
		minimumEndValue: "Minimaler Endwert",
		maximumEndValue: "Maximaler Endwert",
		modelTypeName: "Modelltyp",
		fromRasterName: "Von Raster",
		toRasterName: "Zu Raster",
		computeChangeMethod: "Methode \"Veränderungen berechnen\"",
		fromClassValues: "Von-Klassenwerte (Beispiel: 2 5)",
		toClassValues: "Zu-Klassenwerte (Beispiel: 2 5)",
		keepMethod: "Filtermethode",
		useColorMethod: "Farbübergänge definieren",
		detectChangeBands: "Bänder für die Erkennung von Änderungen (beginnend bei 0)",
		tmaskBands: "Bänder für zeitbezogene Maskierung (beginnend bei 0)",
		chiSquaredThreshold: "Chi-Quadrat-Schwellenwert für die Erkennung von Änderungen",
		minAnomaly: "Minimum der aufeinanderfolgenden beobachteten Abweichungen",
		updatingFrequency: "Anpassungshäufigkeit (in Jahren) wird aktualisiert",
		distanceAccumulationRasterName: "Entfernungsakkumulations-Raster",
		costBackdirectionRasterName: "Gegenrichtungs- oder Fließrichtungs-Raster",
		rasterCollectionName: "Raster-Sammlung",
		itemFunctionName: "Elementfunktion",
		aggregationFunctionName: "Aggregationsfunktion",
		processingFunctionName: "Verarbeitungsfunktion",
		aggregationDefinitionName: "Aggregationsdefinition",
		queryGeometryName: "Geometrie abfragen",
		factorFunctionZeroFactor: "Null-Faktor",
		factorFunctionCutAngle: "Schnittwinkel",
		factorFunctionSideFactor: "Seitenfaktor",
		factorFunctionSlope: "Neigung",
		factorFunctionLowCutAngle: "Niedriger Schnittwinkel",
		factorFunctionHighCutAngle: "Hoher Schnittwinkel",
		factorFunctionCosPower: "Kosinuspotenz",
		factorFunctionSecPower: "Sekanspotenz",
		factorFunctionTablePath: "Tabellenpfad",
		processingBand: "Verarbeitungsband",
		processingBandName: "Name des Verarbeitungsbandes",
		snappingDate: "Fangdatum",
		maxNumSegments: "Maximale Anzahl an Segmenten",
		vertexCountOvershoot: "Überstand bei Anzahl an Stützpunkten",
		spikeThreshold: "Spike-Schwellenwert",
		recoveryThreshold: "Regenerationsschwellenwert",
		minNumObs: "Mindestanzahl der Beobachtungen",
		pValueThreshold: "Schwellenwert für p-Werte",
		bestModelProportion: "Proportion des besten Modells",
		preventOneYearRecovery: "Einjährige Regeneration verhindern",
		recoveryIncreaseTrend: "Regeneration mit zunehmendem Trend",
		outputOtherBands: "Andere Bänder ausgeben",
		sortType: "Sortiertyp",
		numberOfRuns: "Ausdehnen und Verkleinern zweimal durchlaufen",
		percentileValue: "Perzentilwert",
		percentileInterpolationType: "Perzentil-Interpolationstyp",
		rasterInfoProperty: "Eigenschaft",
		rasterInfoValue: "Wert",
		rasterInfoColumns: "Spalten",
		rasterInfoRows: "Zeilen",
		rasterInfoBandCount: "Anzahl an Bändern",
		rasterInfoPixelSizeX: "Zellengröße X",
		rasterInfoPixelSizeY: "Zellengröße Y",
		rasterInfoPixelType: "Pixeltyp",
		rasterExtentTop: "Oben",
		rasterExtentBottom: "Unten",
		rasterExtentLeft: "Links",
		rasterExtentRight: "Rechts",
		rasterStatisticsNotCalculated: "Statistiken wurden nicht berechnet.",
		spatialReferenceProjection: "Projektion",
		spatialReferenceWkid: "WKID",
		spatialReferenceLatestWkid: "Vorherige WKID",
		spatialReferenceWkt: "WKT",
		spatialReferenceVcsWkid: "VCSWKID",
		spatialReferenceLatestVcsWkid: "Vorherige VCSWKID",
		spatialReferenceAuthority: "Zuständige Stelle",
		spatialReferenceLinearUnit: "Lineare Einheit",
		spatialReferenceAngularUnit: "Winkeleinheit",
		spatialReferenceFalseEasting: "Östlicher Versatz",
		spatialReferenceFalseNorthing: "Nördlicher Versatz",
		spatialReferenceCentralMeridian: "Mittelmeridian",
		spatialReferencePrimeMeridian: "Nullmeridian",
		spatialReferenceStandardParallel1: "Standardparallele 1",
		spatialReferenceStandardParallel2: "Standardparallele 2",
		spatialReferenceLatitudeOfOrigin: "Breitengrad des Ursprungs",
		spatialReferenceAuxiliarySphereType: "Art der Auxiliary Sphere",
		spatialReferenceDatum: "Datum",
		spatialReferenceSpheroid: "Sphäroid",
		spatialReferenceSemimajorAxis: "Große Halbachse",
		spatialReferenceSemiminorAxis: "Kleine Halbachse",
		spatialReferenceInverseFlattening: "Inverse Abflachung",
		inputDefinitionFileName: "Eingabe-Definitionsdatei",
		deleteName: "Löschen",
		addVariableName: "Variable hinzufügen",
		maxNumPixelsPerSegment: "Maximale Segmentgröße in Pixel",
		forwardWindowName: "Vorwärtsgleitendes Fenster",
		backwardWindowName: "Rückwärtsgleitendes Fenster",
		noDataHandlingName: "Umgang mit NoData-Werten",
		circularWrapValueName: "Umbruchwert für Verteilung auf Einheitskreis",
		fromClassNameFieldName: "Feldname für Klassennamen in \"Von Raster\"",
		toClassNameFieldName: "Feldname für Klassennamen in \"In Raster\"",
		targetRasterName: "Ziel-Raster",
		circularWrapValue: "Umbruchwert für Verteilung auf Einheitskreis",
		bandIndexesR: "Roter Ausdruck",
		bandIndexesG: "Grüner Ausdruck",
		bandIndexesB: "Blauer Ausdruck",
		exampleName: "Beispiel",
		inputName: "Eingabe",
		outputName: "Ausgabe",
		optionalName: "Optional",
		browseDefinitionFile: "Definitionsdatei durchsuchen",
		selectDefinitionFile: "Eingabe-Definitionsdatei auswählen",
		inputDefinitionURL: "URL der Eingabe-Definitionsdatei",
		enterDefinitionFileURL: "URL der Definitionsdatei eingeben",
		browseXMLFile: "XML-Datei durchsuchen",
		selectStatsFile: "Statistik- und Histogrammdatei auswählen",
		enterXMLFileURL: "URL der XML-Datei eingeben",
		xmlFileURL: "URL der XML-Datei",
		circularCalculation: "Zirkuläre Statistiken berechnen",
		localSurfaceType: "Typ der lokalen Oberfläche",
		surfaceParameterType: "Parametertyp",
		neighborhoodDistance: "Nachbarschaftsentfernung",
		useAdaptiveNeighborhood: "Adaptive Nachbarschaft verwenden",
		outputSlopeType: "Messwert der Ausgabeneigung",
		projectAzimuths: "Geodätische Azimute projizieren",
		useEquatorialAspect: "Äquatorausrichtung verwenden",
		zUnit: "Z-Einheit",
		analysisMask: "Analysemaske",
		stdDeviation: "Standardabweichung",
		"true": "True",
		"false": "False",
		costDistanceRaster1: "Eingabe-Raster 1 für akkumulative Kostenentfernung",
		costDistanceRaster2: "Eingabe-Raster 2 für akkumulative Kostenentfernung",
		threshold: "Schwellenwert",
		thresholdMethod: "Schwellenwertmethode",
		directionRaster1: "Eingabe-Gegenrichtungs-Raster 1",
		directionRaster2: "Eingabe-Gegenrichtungs-Raster 2",
		maxIterations: "Maximale Anzahl der Iterationen",
		epsilon: "Epsilon"
	},
	enumLabels: {
		attributeTableTypeManual: "Manuell",
		attributeTableTypeExternal: "Extern",
		clrSchemeTypeColormap: "Colormap",
		clrSchemeTypeColorRamp: "Farbverlauf",
		colormapTypeElevation: "Höhenangaben",
		colormapTypeGray: "Grau",
		colormapTypeNDVI: "NDVI",
		colormapTypeNDVI2: "NDVI2",
		colormapTypeNDVI3: "NDVI3",
		colormapTypeRandom: "Zufällig",
		none: "Kein(e)",
		slopeTypeAdjusted: "Angepasst",
		slopeTypeDegree: "Grad",
		slopeTypePercentRise: "Prozentualer Anstieg",
		slopeTypeScaled: "Skaliert",
		stretchTypeMinMax: "MinMax",
		stretchTypePercentMinMax: "PercentMinMax",
		stretchTypeSigmoid: "Sigmoid",
		stretchTypeStdDev: "StdAbw",
		hillshadeTypeSimple: "Traditionell",
		hillshadeTypeMultidirectional: "Multidirektional",
		bandComboByNames: "Bandnamen",
		bandComboByWavelength: "Bandwellenlängen",
		bandComboByIDs: "Band-IDs",
		missingBandActionBestMatch: "Höchste Übereinstimmung",
		missingBandActionFail: "Fehler",
		unitTypeCelsius: "Celsius",
		unitTypeCentimeters: "Zentimeter",
		unitTypeDecimeters: "Dezimeter",
		unitTypeFahrenheit: "Fahrenheit",
		unitTypeFeet: "Fuß",
		unitTypeFeetPerSec: "Fuß pro Sekunde (ft/s)",
		unitTypeInches: "Zoll",
		unitTypeKelvin: "Kelvin",
		unitTypeKilometers: "Kilometer",
		unitTypeKmsPerHour: "Kilometer pro Stunde (km/h)",
		unitTypeKnots: "Knoten (kn)",
		unitTypeMeters: "Meter",
		unitTypeMetersPerSec: "Meter pro Sekunde (m/s)",
		unitTypeMiles: "Meilen",
		unitTypeMilesPerHour: "Meilen pro Stunde (mph)",
		unitTypeMillimeters: "Millimeter",
		unitTypeNauticalMiles: "Seemeile",
		unitTypeYards: "Yards",
		unitTypeDecimalDegrees: "Dezimalgrad",
		unitTypePoints: "Punkte",
		unitTypeUnknown: "Unbekannt",
		unitTypeSqMapUnits: "Quadrat-Karteneinheiten",
		unitTypeSqMiles: "Quadratmeilen",
		unitTypeSqKms: "Quadratkilometer",
		unitTypeAcres: "Acres",
		unitTypeHectares: "Hektar",
		unitTypeSqYards: "Quadratyards",
		unitTypeSqFt: "Quadratfuß",
		unitTypeSqInches: "Quadratzoll",
		unitTypeSqMts: "Quadratmeter",
		unitTypeSqCms: "Quadratzentimeter",
		unitTypeSqMms: "Quadratmillimeter",
		cellsizeTypeFirst: "Erste(r) von",
		cellsizeTypeMin: "Min. von",
		cellsizeTypeMax: "Max. von",
		cellsizeTypeMean: "Mittelwert von",
		cellsizeTypeLast: "Letzte(r) von",
		extentTypeFirst: "Erste(r) von",
		extentTypeIntersection: "Schnittpunkt von",
		extentTypeUnion: "Vereinigung von",
		extentTypeLast: "Letzte(r) von",
		noDataInterpretAny: "Mit irgendeinem übereinstimmend",
		noDataInterpretAll: "Mit allen übereinstimmend",
		curvatureTypeStandard: "Standard",
		curvatureTypeProfile: "Profil",
		curvatureTypePlanform: "Horizontal",
		filterTypeLineDetectionHorizontal: "Linienerkennung horizontal",
		filterTypeLineDetectionVertical: "Linienerkennung vertikal",
		filterTypeLineDetectionLeftDiagonal: "Linienerkennung links diagonal",
		filterTypeLineDetectionRightDiagonal: "Linienerkennung rechts diagonal",
		filterTypeGradientNorth: "Gradient Nord",
		filterTypeGradientWest: "Gradient West",
		filterTypeGradientEast: "Gradient Ost",
		filterTypeGradientSouth: "Gradient Süd",
		filterTypeGradientNorthEast: "Gradient Nordost",
		filterTypeGradientNorthWest: "Gradient Nordwest",
		filterTypeSmoothArithmeticMean: "Geglättetes arithmetisches Mittel",
		filterTypeSmoothing3x3: "Glätten 3x3",
		filterTypeSmoothing5x5: "Glätten 5x5",
		filterTypeSharpening3x3: "Schärfen 3x3",
		filterTypeSharpening5x5: "Schärfen 5x5",
		filterTypeLaplacian3x3: "Laplace 3x3",
		filterTypeLaplacian5x5: "Laplace 5x5",
		filterTypeSobelHorizontal: "Sobel horizontal",
		filterTypeSobelVertical: "Sobel vertikal",
		filterTypeSharpen: "Schärfen",
		filterTypeSharpen2: "Weiter schärfen",
		filterTypePointSpread: "Punktverteilung",
		userDefined: "Benutzerdefiniert",
		ContourTypeLines: "Konturlinien",
		ContourTypeFill: "Konturlinienfüllung",
		ContourTypeSmoothOnly: "Nur glatte Oberfläche",
		rasterizeFirst: "Erster",
		rasterizeLast: "Letzter",
		rasterizeSmallest: "Kleinste",
		rasterizeLargest: "Größte",
		resamplingTypeNearest: "Nächster Nachbar",
		resamplingTypeBilinear: "Bilineare Interpolation",
		resamplingTypeCubic: "Kubische Faltung",
		resamplingTypeMajority: "Mehrheit",
		resamplingTypeBilinearPlus: "Bilineare Interpolation Plus",
		resamplingTypeGauss: "Gauss Blur",
		resamplingTypeGaussPlus: "Gauss Blur Plus",
		resamplingTypeAverage: "Durchschnitt",
		resamplingTypeMinimum: "Minimum",
		resamplingTypeMaximum: "Maximum",
		resamplingTypeVectorAvg: "Vektordurchschnitt",
		minimum: "Minimum",
		maximum: "Maximum",
		mean: "Mittelwert",
		stdDeviation: "Standardabweichung",
		uvMagDirTypeUV: "U-V",
		uvMagDirTypeMagDir: "Magnituden-Richtung",
		unknown: "Unbekannt",
		angleRefSysGeographic: "Geographisch",
		angleRefSysArithmetic: "Arithmetisch",
		interpolateIrregularDataNearest: "Nächster Nachbar",
		interpolateIrregularDataBilinear: "Bilinear",
		interpolateIrregularDataTinningLinear: "Lineare Ausdünnung",
		interpolateIrregularDataTinningNaturalNeighbor: "Natürlicher Nachbar",
		interpolateIrregularDataTinningIDW: "Inverse Distance Weighted",
		esriRasterThresholdTypeConstant: "Konstante",
		esriRasterThresholdTypeOtsu: "Otsu",
		esriRasterThresholdTypeTsai: "Tsai",
		esriRasterThresholdTypeKapur: "Kapur",
		esriRasterThresholdTypeKittler: "Kittler",
		esriRasterThresholdTypeRosin: "Rosin",
		argStatsTypeMax: "Arg-Maximum",
		argStatsTypeMin: "Arg-Minimum",
		argStatsTypeMedian: "Arg-Medianwert",
		argStatsTypeDuration: "Dauer",
		arithmeticOpPlus: "Plus",
		arithmeticOpMinus: "Minus",
		arithmeticOpMultiply: "Multiplizieren",
		arithmeticOpDivide: "Teilen",
		arithmeticOpPower: "Potenz",
		arithmeticOpMode: "Modus",
		clipTypeOutside: "Außerhalb ausschneiden",
		clipTypeInside: "Innerhalb ausschneiden",
		yes: "Ja",
		no: "Nein",
		densities: "Dichte",
		expectedCounts: "Erwartete Anzahl",
		planar: "Planar",
		geodesic: "Geodätisch",
		eachCell: "Jede Zelle",
		eachZone: "Jede Zone",
		bestSingle: "Der Beste",
		allSightlines: "Alle Sichtlinien",
		perimeterSightlines: "Sichtlinien aus Umfang",
		frequency: "Häufigkeit (Frequency)",
		observers: "Beobachter",
		majority: "Mehrheit",
		median: "Medianwert",
		minority: "Minderheit",
		percentile: "Perzentil",
		range: "Bereich",
		sum: "Summe",
		variety: "Varianz",
		ndvi: "NDVI",
		savi: "SAVI",
		bandArithmeticMethodTSAVI: "Transformierter SAVI",
		bandArithmeticMethodMSAVI: "Geänderter SAVI",
		bandArithmeticMethodSultan: "Sultan-Formel",
		gemi: "GEMI",
		pvi: "PVI",
		gvi: "GVI (Landsat TM)",
		vari: "VARI",
		sr: "SR",
		gndvi: "GNDVI",
		ndvire: "NDVIre",
		srre: "SRre",
		mtvi2: "MTVI2",
		rtviCore: "RTVICore",
		cire: "CIre",
		cig: "CIg",
		ndwi: "NDWI",
		evi: "EVI",
		ironOxide: "Eisenoxid",
		ferrousMinerals: "Eisenmineralien",
		clayMinerals: "Tonmineralien",
		wndwi: "WNDWI",
		bai: "BAI",
		mndwi: "MNDWI",
		nbr: "NBR",
		ndbi: "NDBI",
		ndmi: "NDMI",
		ndsi: "NDSI",
		localSquareRoot: "Quadratwurzel",
		localACos: "ACos",
		localASin: "ASin",
		localATan: "ATan",
		localATanH: "ATanH",
		localAbs: "Abs",
		localBitwiseNot: "Bitwise Not",
		localBooleanNot: "Boolean Not",
		localCos: "Cos",
		localCosH: "CosH",
		localExp: "Exp",
		localExp10: "Exp10",
		localExp2: "Exp2",
		localInt: "Int",
		localIsNull: "Is Null",
		localFloat: "Float",
		localLn: "Ln",
		localLog10: "Log10",
		localLog2: "Log2",
		localNegate: "Negate",
		localRoundDown: "Round Down",
		localRoundUp: "Round Up",
		localSin: "Sin",
		localSinH: "SinH",
		localTan: "Tan",
		localTanH: "TanH",
		localACosH: "ACosH",
		localASinH: "ASinH",
		localPlus: "Plus",
		localMinus: "Minus",
		localTimes: "Times",
		localPower: "Power",
		localBitwiseAnd: "Bitwise And",
		localBitwiseLeftShift: "Bitwise Left Shift",
		localBitwiseOr: "Bitwise Or",
		localBitwiseRightShift: "Bitwise Right Shift",
		localBitwiseXor: "Bitwise Xor",
		localBooleanAnd: "Boolean And",
		localBooleanOr: "Boolean Or",
		localBooleanXor: "Boolean XOr",
		localDivide: "Divide",
		localEqualTo: "Equal To",
		localGreaterThan: "Greater Than",
		localGreaterThanEqual: "Greater Than Equal",
		localLessThan: "Less Than",
		localLessThanEqual: "Less Than Equal",
		localMod: "Mod",
		localNotEqual: "Not Equal",
		localATan2: "ATan2",
		localSquare: "Square",
		localSetNull: "Auf NULL setzen",
		remapDefTypeList: "Liste",
		remapDefTypeTable: "Tabelle",
		remapTableTypeSimple: "Einfach",
		remapTableTypeDynamic: "Dynamisch",
		remapTableTypeReassignment: "Neuzuweisung",
		geomCorrectionByConstZ: "Z-Konstante verwenden",
		geomCorrectionByDEM: "DEM verwenden",
		radarCalibBetaNought: "Beta-Nought",
		radarCalibSigmaNought: "Sigma-Nought",
		radarCalibGammaNought: "Gamma-Nought",
		speckleFilterTypeLee: "Lee-Filter",
		speckleFilterTypeEnhancedLee: "Erweiterter Lee-Filter",
		speckleFilterTypeFrost: "Frost-Filter",
		speckleFilterTypeKuan: "Kuan-Filter",
		speckleNoiseModelMul: "Multiplikatives Rauschen",
		speckleNoiseModelAdd: "Additives Rauschen",
		speckleNoiseModelAddnMul: "Additives und multiplikatives Rauschen",
		mosaicOpTypeFirst: "Erste(r)",
		mosaicOpTypeLast: "Letzte(r)",
		mosaicOpTypeMin: "Min.",
		mosaicOpTypeMax: "Max.",
		mosaicOpTypeMean: "Mittelwert",
		mosaicOpTypeBlend: "Verschmelzen",
		mosaicOpTypeSum: "Summe",
		integer: "Integer",
		rfxD8: "D8",
		rfxMFD: "MFD",
		dinf: "DINF",
		vertical: "Vertikal",
		horizontal: "Horizontal",
		localCellStatisticsMajority: "Mehrheit",
		localCellStatisticsMax: "Maximum",
		localCellStatisticsMean: "Mittelwert",
		localCellStatisticsMedian: "Medianwert",
		localCellStatisticsMin: "Minimum",
		localCellStatisticsMinority: "Minderheit",
		localCellStatisticsRange: "Bereich",
		localCellStatisticsStdDev: "Standardabweichung",
		localCellStatisticsSum: "Summe",
		localCellStatisticsVariety: "Varianz",
		localCellStatisticsMajorityIgnoreND: "Mehrheit (NoData ignorieren)",
		localCellStatisticsMaxIgnoreND: "Maximum (NoData ignorieren)",
		localCellStatisticsMeanIgnoreND: "Mittelwert (NoData ignorieren)",
		localCellStatisticsMedianIgnoreND: "Medianwert (NoData ignorieren)",
		localCellStatisticsMinIgnoreND: "Minimum (NoData ignorieren)",
		localCellStatisticsMinorityIgnoreND: "Minderheit (NoData ignorieren)",
		localCellStatisticsRangeIgnoreND: "Bereich (NoData ignorieren)",
		localCellStatisticsStdDevIgnoreND: "Standardabweichung (NoData ignorieren)",
		localCellStatisticsSumIgnoreND: "Summe (NoData ignorieren)",
		localCellStatisticsVarietyIgnoreND: "Varianz (NoData ignorieren)",
		localCellStatisticsTypePercentileIgnoreND: "Perzentil (NoData ignorieren)",
		fromSource: "Aus Quelle",
		toSource: "Zur Quelle",
		colorspaceConversionRgbToHsv: "RGB in HSV",
		colorspaceConversionHsvToRgb: "HSV in RGB",
		pansharpenTypeIHS: "IHS",
		pansharpenTypeBrovey: "Brovey",
		pansharpenTypeEsri: "Esri",
		pansharpenTypeMean: "Mittelwert",
		pansharpenTypeGramSchmidt: "Gram-Schmidt",
		rectangleNeighborhood: "Rechteck",
		circleNeighborhood: "Kreis",
		annulusNeighborhood: "Kreisring",
		wedgeNeighborhood: "Keil",
		irregularNeighborhood: "Unregelmäßig",
		weightNeighborhood: "Gewichtung",
		four: "Vier",
		eight: "Acht",
		within: "In",
		cross: "Darüberhinaus",
		addLink: "Link hinzufügen",
		noLink: "Kein Link",
		weightedMean: "Gewichteter Mittelwert",
		ls8QCBitPatternCirrus: "Landsat 8 Cirrus",
		ls8QCBitPatternCloud: "Landsat 8 Cloud",
		ls8QCBitPatternCloudShadow: "Landsat 8 Cloud Shadow",
		ls8QCBitPatternDesignatedFill: "Landsat 8 Designated Fill",
		ls8QCBitPatternDroppedFrame: "Landsat 8 Dropped Frame",
		ls8QCBitPatternSnowIce: "Landsat 8 Snow/Ice",
		ls8QCBitPatternTerrainOcclusion: "Landsat 8 Terrain Occlusion",
		ls8QCBitPatternVegetation: "Landsat 8 Vegetation",
		ls8QCBitPatternWater: "Landsat 8 Water",
		downStream: "Flussabwärts",
		upStream: "Flussaufwärts",
		strahler: "STRAHLER",
		shreve: "SHREVE",
		currentSlice: "Aktueller Ausschnitt",
		allSlices: "Alle Ausschnitte",
		expandDistance: "ENTFERNUNG",
		expandMorphological: "MORPHOLOGISCH",
		spectralProfileFile: "Spektralprofil",
		trainingFeatureFile: "Trainings-Feature",
		randomDistributionTypeUniform: "Einheitlich",
		randomDistributionTypeUniformInteger: "Integer",
		randomDistributionTypeNormal: "Normal",
		randomDistributionTypeExponential: "Exponential",
		randomDistributionTypePoisson: "Poisson",
		randomDistributionTypeGamma: "Gamma",
		randomDistributionTypeBinomial: "Binomial",
		randomDistributionTypeGeometric: "Geometrisch",
		randomDistributionTypeNegativeBinomial: "Negativ binomial",
		randomGeneratorTypeStandardCRand: "Standard C Rand",
		randomGeneratorTypeAlgorithmACM599: "ACM599 – Sammelalgorithmus",
		randomGeneratorTypeMersenneTwister: "Mersenne Twister",
		sumName: "Summe",
		medainName: "Medianwert",
		trendLinear: "Linear",
		trendHarmonic: "Harmonisch",
		trendPolynomial: "Polynomial",
		trendMannKendall: "Mann-Kendall-Test",
		trendSeasonalKendall: "Saisonaler Kendall-Test",
		dimensionByValue: "Nach Wert",
		dimensionByInterval: "Nach Intervall",
		mdimDefTypeAll: "Alle",
		mdimDefTypeByValues: "Durch Werte",
		mdimDefTypeByRanges: "Nach Bereichen",
		mdimDefTypeByIteration: "Nach Iteration",
		mdimDefTypeByInterval: "Nach Intervall",
		mdimDefTypeByTargetRaster: "Nach Ziel-Raster",
		esriTimeUnitsHours: "Stunden",
		esriTimeUnitsDays: "Tage",
		esriTimeUnitsWeeks: "Wochen",
		esriTimeUnitsMonths: "Monate",
		esriTimeUnitsYears: "Jahre",
		esriTimeIntervalKeywordHourly: "Stündlich",
		esriTimeIntervalKeywordDaily: "Täglich",
		esriTimeIntervalKeywordWeekly: "Wöchentlich",
		esriTimeIntervalKeywordDekadly: "10 Tage",
		esriTimeIntervalKeywordPentadly: "5 Tage",
		esriTimeIntervalKeywordMonthly: "Monatlich",
		esriTimeIntervalKeywordQuarterly: "Vierteljährlich",
		esriTimeIntervalKeywordYearly: "Jährlich",
		esriTimeIntervalKeywordRecurringDaily: "Täglich wiederkehrend",
		esriTimeIntervalKeywordRecurringWeekly: "Wöchentlich wiederkehrend",
		esriTimeIntervalKeywordRecurringMonthly: "Monatlich wiederkehrend",
		esriTimeIntervalKeywordRecurringQuarterly: "Quartalsweise wiederkehrend",
		aggDefTypeAll: "Alle",
		aggDefTypeIntervalKeyword: "Intervallschlüsselwort",
		aggDefTypeIntervalValue: "Intervallwert",
		aggDefTypeIntervalRanges: "Intervallbereiche",
		latestChange: "Zeit der letzten Änderung",
		earliestChange: "Zeit der ersten Änderung",
		largestChange: "Zeit der größten Änderung",
		numberOfChanges: "Anzahl an Änderungen",
		longestChange: "Zeit der längsten Änderung",
		shortestChange: "Zeit der kürzesten Änderung",
		fastestChange: "Zeit der schnellsten Änderung",
		slowestChange: "Zeit der langsamsten Änderung",
		allChanges: "Alle",
		increaseChanges: "Zunahme",
		decreaseChanges: "Abnahme",
		segmentBeginning: "Anfang des Segments",
		segmentEnd: "Ende des Segments",
		esriComputeChangeMethodDifference: "Differenz",
		esriComputeChangeMethodRelativeDifference: "Relativer Unterschied",
		esriComputeChangeMethodCategorical: "Kategorischer Unterschied",
		esriComputeChangeMethodMultispectralEuclideanDistance: "Spektrale euklidische Entfernung",
		esriComputeChangeMethodMultispectralAngularDifference: "Spektrale Winkeldifferenz",
		esriComputeChangeMethodMultispectralAxisWithBiggestChange: "Band mit größter Veränderung",
		esriComputeChangeKeepAll: "Alle beibehalten",
		esriComputeChangeKeepChangedOnly: "Nur geänderte Pixel beibehalten",
		esriComputeChangeKeepUnchangedOnly: "Nur nicht geänderte Pixel beibehalten",
		esriComputeChangeUseColorAverage: "Von-Zu-Farben für Durchschnitt",
		esriComputeChangeUseColorFrom: "Von-Farben verwenden",
		esriComputeChangeUseColorTo: "Zu-Farben verwenden",
		factorFunctionBinary: "Binär",
		factorFunctionForward: "Vorwärts",
		factorFunctionLinear: "Linear",
		factorFunctionInvLinear: "Invers linear",
		factorFunctionTable: "Tabelle",
		factorFunctionSymLinear: "Symmetrisch linear",
		factorFunctionSymInvLinear: "Symmetrisch invers linear",
		factorFunctionCos: "Kosinus",
		factorFunctionSec: "Sekans",
		factorFunctionCosSec: "Kosinus Sekans",
		factorFunctionSecCos: "Sekans Kosinus",
		noSort: "Nicht sortieren",
		ascend: "Aufsteigend",
		descend: "Absteigend",
		autoDetect: "Automatisch erkennen",
		nearest: "Nächster",
		linear: "Linear",
		esriMonthJanuary: "Januar",
		esriMonthFebruary: "Februar",
		esriMonthMarch: "März",
		esriMonthApril: "April",
		esriMonthMay: "Mai",
		esriMonthJune: "Juni",
		esriMonthJuly: "Juli",
		esriMonthAugust: "August",
		esriMonthSeptember: "September",
		esriMonthOctober: "Oktober",
		esriMonthNovember: "November",
		esriMonthDecember: "Dezember",
		dimensionalMovingIgnoreNoData: "Daten",
		dimensionalMovingPropagateNoData: "NoData",
		dimensionalMovingFillOnlyNoData: "NoData-Werte füllen",
		circularMean: "Zirkulärer Mittelwert",
		circularName: "Kreisförmig",
		arithmeticName: "Arithmetisch",
		slopeName: "Neigung",
		aspectName: "Ausrichtung",
		meanCurvature: "Mittlere Krümmung",
		profileCurvature: "Profilkrümmung (Normalneigungslinie)",
		tangentialCurvature: "Tangentialkrümmung (Normalkontur)",
		planCurvature: "Plankrümmung (projizierte Kontur)",
		contourGeodesicTorsion: "Geodätische Torsion der Kontur",
		gaussianCurvature: "Gauß'sche Krümmung",
		casoratiCurvature: "Casorati-Krümmung",
		localSurfaceTypeQuadratic: "Quadratisch",
		localSurfaceTypeBiquadratic: "Biquadratisch",
		thresholdNoThreshold: "Kein Schwellenwert",
		thresholdPercentLeastCost: "Prozentsatz der geringsten Kosten",
		thresholdAccumulativeCost: "Akkumulative Kosten",
		clrmapTypeHillshade: "Schummerung"
	},
	categoryLabels: {
		sourceCharacteristics: "Quelleneigenschaften",
		neighborhoodSettings: "Nachbarschaftseinstellungen",
		statistics: "Statistiken",
		gamma: "Gamma",
		viewshedParameters: "Sichtfeldparameter",
		observerParameters: "Beobachterparameter",
		irregularDataInterpolation: "Unregelmäßige Dateninterpolation",
		modelStatistics: "Modellstatistiken",
		aggregationDef: "Aggregationsdefinition",
		filterByAttributes: "Nach Attributen filtern",
		percentileName: "Perzentil",
		rasterInfo: "Raster-Information",
		extent: "Ausdehnung",
		spatialReference: "Raumbezug"
	},
	outputRasterHelpTexts: {
		outputName: "<p>Der Name des Layers, der erstellt und der Karte hinzugefügt wird.</p>",
		resultType: "<p>Die Art der Ausgabe, die erstellt wird. Die Ausgaben können gekachelte Bilddaten-Layer oder dynamische Bilddaten-Layer sein.</p>",
		saveResultIn: "<p>Der Name des Ordners in <b>Eigene Inhalte</b>, in dem das Ergebnis gespeichert werden soll.</p>"
	},
	analysisEnvironmentsHelpTexts: {
		description: "<p>Umgebungseinstellungen für Analysen in Map Viewer. </p>",
		outSR: "<p>Legt das Koordinatensystem für die Analyse und den Ergebnis-Layer fest.</p>",
		extent: "<p>Gibt den Bereich an, der für die Analyse verwendet werden soll.</p>",
		snapRaster: "<p>Passt die Ausdehnung der Ausgabe an, sodass sie der Zellenausrichtung des angegebenen Fang-Raster-Layers entspricht.</p>",
		cellSize: "<p>Legt die Zellengröße oder Auflösung fest, die für die Analyse und zum Erstellen des Ausgabe-Raster-Layers verwendet wird.</p>",
		mask: "<p>Gibt einen Masken-Layer an, in dem nur die Zellen im Maskenbereich für die Analyse verwendet werden.</p>",
		resamplingMethod: "<p>Gibt an, wie Pixelwerte interpoliert werden sollen, wenn die Eingabe- und Ausgabe-Raster nicht übereinstimmen.</p>"
	},
	mainGenStrings: {
		unsupportedDataType: "Nicht unterstützter Typ",
		currentlyUnsupported: " Ein Standard-Editor für ${missingType} ist in Kürze verfügbar. Temporäres Platzhalter-Textfeld für die Angabe von auf einer Zeichenfolge basierten Eingaben.",
		unsupportedOverrideWarning: "Eine Editor-Komponente zum Überschreiben mit einer besseren Benutzeroberfläche für das Arbeiten mit den folgenden Parametern ist in Kürze verfügbar:",
		overrideWidgetMissing: "Editor-Komponente zum Überschreiben fehlt!",
		uiIncomplete: "Auftragsübermittlung fehlgeschlagen. Die Funktion kann nicht ausgeführt werden, weil einige der Pflichtfelder nicht ausgefüllt sind oder in der Benutzeroberfläche fehlen.",
		count: "Anzahl",
		selectVariables: "Variablen auswählen",
		selectFeature: "Feature-Layer auswählen",
		greaterThanErrorMessage: "Die Eingabe für die Anzahl muss größer als ${min} sein.",
		lesserThanErrorMessage: "Die Eingabe für die Anzahl muss kleiner als ${max} sein.",
		greaterThanOrEqualErrorMessage: "Die Eingabe für die Anzahl muss größer als oder gleich ${min} sein.",
		lesserThanOrEqualErrorMessage: "Die Eingabe für die Anzahl muss kleiner als oder gleich ${max} sein.",
		allowScalar: "Layer auswählen oder Konstante eingeben",
		selectField: "Feld auswählen",
		parameterRequired: "Dieser Parameter ist erforderlich.",
		enterAValue: "Wert eingeben ...",
		invalidInput: "Der eingegebene Wert ist ungültig.",
		itemNotFound: "Das Element ist nicht vorhanden, oder es kann nicht darauf zugegriffen werden.",
		itemPermissionDenied: "Sie haben keine Zugriffsberechtigung für dieses Element.",
		layerNotAvailable: "Fehler beim Laden des Layers \"${layerName}\".",
		multipleLayersNotAvailable: "Fehler beim Laden des Layers \"${layerName}\" und weiterer Layer.",
		learnMoreLabel: "Mehr erfahren",
		fieldNotAvailable: "Feld konnte nicht geladen werden.",
		allowAnalysis: "Die Analyse ist für den Image-Service nicht zulässig.",
		allowAnalysisReason: "Ein oder mehrere Layer aus der Karte sind hier nicht aufgeführt, da sie keine Analyse zulassen.",
		learnMoreText: "Weitere Informationen",
		atLeastOneRasterInput: "Mindestens ein Eingabe-Layer muss ein Raster-Layer sein.",
		browseAnalysisLayers: "Layer durchsuchen",
		activeMapViewExtent: "Aktuelle Kartenausdehnung verwenden",
		chooseRaster: "Raster zum Ausschneiden auswählen",
		chooseGeometry: "Geometrie zum Ausschneiden auswählen",
		resultType: "Ergebnistyp",
		saveInFolder: "In Ordner speichern",
		outputName: "Ausgabename",
		outputLayerType: "Ausgabe-Layer-Typ",
		dynamicImageryLayer: "Dynamischer Bilddaten-Layer",
		tiledImageryLayer: "Gekachelter Bilddaten-Layer",
		custom: "Benutzerdefiniert",
		loading: "Wird geladen...",
		layerMissing: "Ein oder mehrere Layer aus der Karte sind hier nicht aufgeführt, da sie keine Analyse zulassen. Weitere Informationen",
		browseCoordinateSystems: "Koordinatensysteme durchsuchen",
		unableToRepopulateOutSR: "Das Ausgabekoordinatensystem kann nicht gefüllt werden.",
		defaultTitle: "Mehr anzeigen",
		"ARC (equal arc-second)": "ARC (gleich Bogensekunde)",
		Africa: "Afrika",
		Antarctica: "Antarktis",
		Argentina: "Argentinien",
		Asia: "Asien",
		"Asteroid Belt": "Asteroidengürtel",
		"Atlantic Ocean": "Atlantischer Ozean",
		Australia: "Australien",
		"Australia and New Zealand": "Australien und Neuseeland",
		Austria: "Österreich",
		"BLM (US Feet)": "BLM (US Feet)",
		Bangladesh: "Bangladesch",
		"Beijing 1954": "Beijing 1954",
		Bhutan: "Bhutan",
		CGCS2000: "CGCS2000",
		Canada: "Kanada",
		Caribbean: "Karibik",
		"Caribbean Sea": "Karibisches Meer",
		"Central America": "Mittelamerika",
		"Central and North America": "Mittel- und Nordamerika",
		Colombia: "Kolumbien",
		Continental: "Kontinente",
		"County Systems": "County Systems",
		"Democratic Republic of the Congo": "Demokratische Republik Kongo",
		"EPSG Arctic": "EPSG Arctic",
		Earth: "Erde",
		"Ellipsoidal-based": "Ellipsoid",
		Europe: "Europa",
		Finland: "Finnland",
		France: "Frankreich",
		"GSK 2011": "GSK 2011",
		"Gauss Kruger": "Gauß-Krüger",
		"Geographic Coordinate Systems": "Geographische Koordinatensysteme",
		Germany: "Deutschland",
		"Gravity-related": "Schwerkraftabhängig",
		"Greenwich-based": "Greenwich-basiert",
		"Highways England": "Highways England",
		Illinois: "Illinois",
		"Indian Ocean": "Indischer Ozean",
		"Indian Subcontinent": "Indischer Subkontinent",
		Indiana: "Indiana",
		Indonesia: "Indonesien",
		Iowa: "Iowa",
		"Ireland and United Kingdom": "Irland und Vereinigtes Königreich",
		Italy: "Italien",
		Japan: "Japan",
		Jupiter: "Jupiter",
		Kansas: "Kansas",
		"Las Vegas": "Las Vegas",
		Libya: "Libyen",
		Malaysia: "Malaysia",
		"Malaysia and Singapore": "Malaysia und Singapur",
		Mars: "Mars",
		Mercury: "Merkur",
		Minnesota: "Minnesota",
		Montana: "Montana",
		"NAD 1927": "NAD 1927",
		"NAD 1927 (US Feet)": "NAD 1927 (US Feet)",
		"NAD 1983": "NAD 1983",
		"NAD 1983 (2011)": "NAD 1983 (2011)",
		"NAD 1983 (2011) (Intl Feet)": "NAD 1983 (2011) (Intl Feet)",
		"NAD 1983 (2011) (Meters)": "NAD 1983 (2011) (Meters)",
		"NAD 1983 (2011) (US Feet)": "NAD 1983 (2011) (US Feet)",
		"NAD 1983 (CORS96) (Intl Feet)": "NAD 1983 (CORS96) (Intl Feet)",
		"NAD 1983 (CORS96) (Meters)": "NAD 1983 (CORS96) (Meters)",
		"NAD 1983 (CORS96) (US Feet)": "NAD 1983 (CORS96) (US Feet)",
		"NAD 1983 (Intl Feet)": "NAD 1983 (Intl Feet)",
		"NAD 1983 (Meters)": "NAD 1983 (Meters)",
		"NAD 1983 (PA11) (Meters)": "NAD 1983 (PA11) (Meters)",
		"NAD 1983 (PA11) (US Feet)": "NAD 1983 (PA11) (US Feet)",
		"NAD 1983 (US Feet)": "NAD 1983 (US Feet)",
		"NAD 1983 HARN (Intl Feet)": "NAD 1983 HARN (Intl Feet)",
		"NAD 1983 HARN (Meters)": "NAD 1983 HARN (Meters)",
		"NAD 1983 HARN (US Feet)": "NAD 1983 HARN (US Feet)",
		"NAD 1983 NSRS2007 (Intl Feet)": "NAD 1983 NSRS2007 (Intl Feet)",
		"NAD 1983 NSRS2007 (Meters)": "NAD 1983 NSRS2007 (Meters)",
		"NAD 1983 NSRS2007 (US Feet)": "NAD 1983 NSRS2007 (US Feet)",
		"National Grids": "Nationale Gitter",
		Navajo: "Navajo",
		Neptune: "Neptun",
		"New Beijing": "New Beijing",
		"New Zealand": "Neuseeland",
		"North America": "Nordamerika",
		"Northern Hemisphere": "Nördliche Hemisphäre",
		Norway: "Norwegen",
		Oceans: "Meere",
		Oregon: "Oregon",
		"Other GCS": "Anderes GCS",
		"Pacific Ocean": "Pazifischer Ozean",
		Pluto: "Pluto",
		Polar: "Polargebiete",
		Portugal: "Portugal",
		"Projected Coordinate Systems": "Projizierte Koordinatensysteme",
		"Pulkovo 1942": "Pulkovo 1942",
		"Pulkovo 1995": "Pulkovo 1995",
		Replaced: "Ersetzt",
		"SAD 1969": "SAD 1969",
		SIRGAS: "SIRGAS",
		"SIRGAS 2000": "SIRGAS 2000",
		Saturn: "Saturn",
		"Solar System": "Sonnensystem",
		"South Africa": "Südafrika",
		"South America": "Südamerika",
		"South Korea": "Südkorea",
		"Southern Hemisphere": "Südliche Hemisphäre",
		"Spheroid-based": "Sphäroid-basiert",
		"State Plane": "State Plane",
		"State Systems": "State Systems",
		Sweden: "Schweden",
		"Switzerland and Liechtenstein": "Schweiz und Liechtenstein",
		Texas: "Texas",
		Tribal: "Tribal",
		Turkey: "Türkei",
		"US Feet": "US Feet",
		"USA and territories": "USA und zugehörige Territorien",
		UTM: "UTM",
		Ukraine: "Ukraine",
		"Unknown Height Systems": "Unbekannte Höhensysteme",
		Uranus: "Uranus",
		Venus: "Venus",
		"Vertical Coordinate Systems": "Vertikale Koordinatensysteme",
		Vietnam: "Vietnam",
		"WGS 1972": "WGS 1972",
		"WGS 1984": "WGS 1984",
		Wisconsin: "Wisconsin",
		"Wisconsin CRS": "Wisconsin CRS",
		World: "Welt",
		"World (Sphere-based)": "Welt (Sphäroid)",
		Wyoming: "Wyoming",
		"Xian 1980": "Xian 1980",
		done: "Fertig",
		noResults: "Keine Ergebnisse gefunden",
		searchPlaceholder: "Name oder WKID",
		browseTemplate: "Raster-Funktionsvorlagen durchsuchen",
		saveTemplate: "Raster-Funktionsvorlage speichern",
		preview: "Vorschau",
		previewDescription: "Vor dem Ausführen der Analyse eine Vorschau des Ergebnisses anzeigen.",
		showPreview: "Vorschau anzeigen",
		previewLayer: "Vorschau von Layer ${number} anzeigen",
		newPreview: "Neue Vorschau",
		previewPopup: "Die Vorschau der Analyseergebnisse basierend auf den Eingabeparametern aktivieren.",
		updatePreviewLayer: "Ausgewählten Vorschau-Layer aktualisieren",
		createPreviewLayer: "Neuen Vorschau-Layer erstellen",
		maximumPreviewAllowed: "Maximal zulässige Anzahl von Vorschau-Layern: ${maxCount}",
		previewFailure: "Dieser Vorschau-Layer ist nicht verfügbar. Überprüfen Sie die Eingabeparameter, und aktualisieren Sie diesen Vorschau-Layer erneut.",
		header: "Element auswählen",
		content: "Nicht gespeicherte Änderungen in ${rftTitle}. Wenn Sie mit einer neuen Vorlage beginnen, gehen diese Änderungen verloren.",
		dontSave: "Nicht speichern",
		"continue": "Weiter",
		stretch: "An Fenster anpassen",
		pan: "Schwenken",
		newTemplate: "Neue Vorlage erstellen",
		openTemplate: "Vorlage öffnen",
		addFunction: "Raster-Funktionen hinzufügen",
		addConstant: "Konstante hinzufügen",
		addRaster: "Raster-Variable hinzufügen",
		move: "Verschieben",
		zoom: "Zoomen",
		saveAs: "Speichern unter",
		clear: "Löschen",
		addRasterFunctionTitle: "Raster-Funktionen hinzufügen",
		templatePropertiesTitle: "Vorlageneigenschaften",
		browseRFT: "Raster-Funktionsvorlagen durchsuchen",
		defaultToolDescription: "${toolTitle}-Analysewerkzeug",
		openToolText: "Werkzeug öffnen",
		toolDropdownText: "Werkzeug-Dropdown-Liste",
		addToMap: "Bestätigen und zur Karte hinzufügen",
		confirm: "Bestätigen",
		select: "Auswählen",
		selectTask: "Task auswählen",
		unsupportedLayer: "Dieser Parameter unterstützt die folgenden Layer nicht: ${layerName}",
		viewDetails: "Vollständige Elementdetails anzeigen",
		rename: "Umbenennen",
		duplicate: "Duplizieren",
		launch: "Zum Ausführen öffnen",
		templateEditor: "Vorlageneditor",
		createItem: "Raster-Funktionsvorlage speichern",
		actionLabel: "Filtern",
		filterPopoverHeading: "Funktionen filtern",
		defaultSearchPlaceholder: "Nach Namen suchen",
		settings: "Einstellungen",
		summary: "Zusammenfassung",
		definitionQuery: "Definitionsabfrage",
		matchVariables: "Variablen abgleichen",
		unionDimension: "Dimension vereinigen",
		nameEditorPlaceholder: "Titel eingeben",
		summaryEditorPlaceholder: "Geben Sie eine Kurzbeschreibung ein.",
		definitionQueryPlaceholder: "Eingabe...",
		upload: "Hochladen",
		chooseImage: "Klicken Sie, um eine Datei auszuwählen.",
		update: "Aktualisieren",
		thumbnailErrors: {
			wrongImageType: "Falscher Bildtyp ausgewählt",
			notAvailable: "Miniaturansicht nicht verfügbar",
			loadError: "Bild konnte nicht geladen werden",
			chooseFile: "Klicken Sie, um die Datei auszuwählen."
		}
	}
};
const copy = "Kopieren";
const save = "Speichern";
const title = "Titel";
const folder = "Ordner";
const tags = "Tags";
const savingMessage = "Element wird gespeichert in";
const shareWith = "Freigeben für";
const share = "Freigeben";
const setSharingLevel = "Freigabeebene festlegen";
const setGroupSharing = "Gruppenfreigabe festlegen";
const owner = "Besitzer";
const organization = "Organisation";
const everyone = "Alle (öffentlich)";
const groups = "Gruppen:";
const type = "Typ";
const mosaic = "Mosaik";
const itemGroup = "Elementgruppe";
const item = "Element";
const definitionQuery = "Definitionsabfrage";
const groupItemsBy = "Elemente gruppieren nach";
const groupFieldName = "Gruppierungsfeldname";
const tagFieldName = "Tag-Feldname";
const noTitleTagErrorMsg = "Sie müssen einen Titel für das Element sowie Tags angeben, damit die Karte in Suchvorgängen gefunden werden kann.";
const noTitleErrorMsg = "Sie müssen einen Titel für das Element angeben.";
const noTagErrorMsg = "Sie müssen mindestens ein Tag angeben, damit das Element in Suchvorgängen gefunden werden kann.";
const error = "Fehler";
const warning = "Warnung";
const success = "Erfolgreich abgeschlossen";
const details = "Details:";
const tryAgain = "Erneut versuchen";
const toolModeler = {
	save: "Speichern",
	editProperties: "Eigenschaften bearbeiten",
	saveAs: "Speichern als",
	savingNotification: "Änderungen am Element werden gespeichert...",
	savingTitle: "Wird gespeichert",
	saveFailedMessage: "Änderungen konnten nicht gespeichert werden.",
	saveWithErrorsMessage: "Die Änderungen wurden mit den folgenden Fehlern gespeichert.",
	viewItemMessage: "Das gespeicherte Element",
	here: "hier anzeigen.",
	itemCreatedMessage: "Es wurde ein neues Element erstellt.",
	clickToViewItemMessage: "Klicken Sie auf \"OK\", um die Elementdetailseite anzuzeigen. Klicken Sie auf \"Abbrechen\", um fortzufahren.",
	readingFailed: "Die ausgewählte Raster-Funktionsvorlage konnte nicht geladen werden.",
	failedToLoadXML: "Die ausgewählte Raster-Funktionsvorlage konnte im XML-Format nicht geladen werden.",
	learnMore: "Weitere Informationen",
	overwriteTitle: "Überschreiben bestätigen",
	overwriteMessage: "Möchten Sie das vorhandene Element überschreiben?",
	overwriteSuccessMessage: "Das Element wurde aktualisiert."
};
const toolEditor = {
	run: "Ausführen",
	save: "Speichern",
	deleteSelected: "Ausgewählte Elemente löschen",
	addRaster: "Raster hinzufügen",
	addScalar: "Skalar hinzufügen",
	layout: "Autolayout",
	errorTitle: "Fehler",
	invalidToolMessage: "Die Raster-Funktionsvorlage ist ungültig.",
	out: "Aus",
	zoomIn: "Vergrößern",
	zoomOut: "Verkleinern",
	zoomToFit: "An Fenster anpassen",
	panOn: "Zum Modus \"Schwenken\" wechseln",
	panOff: "Modus \"Schwenken\" deaktivieren",
	defaultModelName: "Werkzeugmodell",
	defaultRasterName: "Raster"
};
const toolDetailsEditor = {
	defaultToolName: "Raster-Funktionsvorlage",
	defaultToolDescription: "Fügen Sie eine kurze Zusammenfassung der Raster-Funktion hinzu.",
	defaultHelpText: "Klicken Sie auf das Hilfe-Symbol, um den Hilfetext zu bearbeiten",
	editHelpTitle: "Hilfe bearbeiten",
	saveLabel: "Speichern",
	cancelLabel: "Abbrechen",
	thumbnail: {
		wrongImageType: "Falscher Bildtyp ausgewählt",
		notAvailable: "Miniaturansicht nicht verfügbar",
		loadError: "Bild konnte nicht geladen werden",
		chooseFile: "Zum Auswählen einer Datei klicken"
	}
};
const saveUtils = {
	thumbnail: "Miniaturansicht",
	sharing: "Freigeben"
};
const close = "Schließen";
const unsavedWarningExisting = "Möchten Sie die Änderungen speichern, die am Element <b>${itemTitle}</b> vorgenommen wurden?";
const unsavedWarningNew = "Möchten Sie die Änderungen speichern?";
const saveAs = "Speichern als";
const dontSave = "Nicht speichern";
const unsavedTitle = "Nicht gespeicherte Änderungen";
const invalidRFTMessage = "Die erstellte Raster-Funktionsvorlage ist ungültig.";
const errorTitle = "Fehler";
const breadcrumb = "Raster-Funktions-Editor";
const breadcrumbEditor = "Inhalt > Raster-Funktions-Editor";
const viewerModeTitle = "Schreibgeschützt";
const viewerModeMessage = "Die Vorlagenelement für Raster-Funktionen ist schreibgeschützt. Änderungen können nicht gespeichert werden.";
const userStartDirection = "Wählen Sie eine Funktion aus, um mit der Erstellung einer Raster-Funktionsvorlage zu beginnen.";
const selectFunction = "Funktion hinzufügen";
const deselectFunction = "Funktion entfernen";
const dialogTitle = "System";
const category = "Kategorien";
const search = "Raster-Funktionen durchsuchen";
const categoryNames = {
	analysis: "Analyse",
	appearance: "Aussehen",
	classification: "Klassifizierung",
	conversion: "Konvertierung",
	correction: "Korrektur",
	dataManagement: "Datenmanagement",
	distance: "Entfernung",
	distanceLegacy: "Entfernung (Legacy)",
	hydrology: "Hydrologie",
	math: "Mathematik",
	mathConditional: "Mathematik: Konditional",
	mathLogical: "Mathematik: Logisch",
	mathTrigonometric: "Mathematik: Trigonometrisch",
	reclass: "Reklassifizieren",
	statistical: "Statistisch",
	surface: "Oberfläche"
};
const commonStrings_de = {
	ok: ok,
	cancel: cancel,
	enterURL: enterURL,
	serviceURL: serviceURL,
	selectRaster: selectRaster,
	failedToLoadLayer: failedToLoadLayer,
	loadingLayer: loadingLayer,
	selectFeature: selectFeature,
	enterFURL: enterFURL,
	addRaster: addRaster,
	addScalar: addScalar,
	raster: raster,
	scalar: scalar,
	defaultModelName: defaultModelName,
	general: general,
	parameters: parameters,
	variables: variables,
	name: name,
	description: description,
	parameter: parameter,
	isPublic: isPublic,
	isDataset: isDataset,
	unknownPixelType: unknownPixelType,
	outputPixelType: outputPixelType,
	u8PixelType: u8PixelType,
	s8PixelType: s8PixelType,
	u16PixelType: u16PixelType,
	s16PixelType: s16PixelType,
	u32PixelType: u32PixelType,
	s32PixelType: s32PixelType,
	f32PixelType: f32PixelType,
	f64PixelType: f64PixelType,
	properties: properties,
	multidimensionalRules: multidimensionalRules,
	matchVariables: matchVariables,
	unionDimensions: unionDimensions,
	rasterFunctionEditor: rasterFunctionEditor,
	rfxLicenseInfo: rfxLicenseInfo,
	rasterFunctions: rasterFunctions,
	copy: copy,
	save: save,
	title: title,
	folder: folder,
	tags: tags,
	savingMessage: savingMessage,
	shareWith: shareWith,
	share: share,
	setSharingLevel: setSharingLevel,
	setGroupSharing: setGroupSharing,
	owner: owner,
	organization: organization,
	everyone: everyone,
	groups: groups,
	type: type,
	mosaic: mosaic,
	itemGroup: itemGroup,
	item: item,
	definitionQuery: definitionQuery,
	groupItemsBy: groupItemsBy,
	groupFieldName: groupFieldName,
	tagFieldName: tagFieldName,
	noTitleTagErrorMsg: noTitleTagErrorMsg,
	noTitleErrorMsg: noTitleErrorMsg,
	noTagErrorMsg: noTagErrorMsg,
	error: error,
	warning: warning,
	success: success,
	details: details,
	tryAgain: tryAgain,
	toolModeler: toolModeler,
	toolEditor: toolEditor,
	toolDetailsEditor: toolDetailsEditor,
	saveUtils: saveUtils,
	close: close,
	unsavedWarningExisting: unsavedWarningExisting,
	unsavedWarningNew: unsavedWarningNew,
	saveAs: saveAs,
	dontSave: dontSave,
	unsavedTitle: unsavedTitle,
	invalidRFTMessage: invalidRFTMessage,
	errorTitle: errorTitle,
	breadcrumb: breadcrumb,
	breadcrumbEditor: breadcrumbEditor,
	viewerModeTitle: viewerModeTitle,
	viewerModeMessage: viewerModeMessage,
	userStartDirection: userStartDirection,
	selectFunction: selectFunction,
	deselectFunction: deselectFunction,
	dialogTitle: dialogTitle,
	category: category,
	search: search,
	categoryNames: categoryNames
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (commonStrings_de);


//# sourceMappingURL=common-strings.de-1454f434.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,