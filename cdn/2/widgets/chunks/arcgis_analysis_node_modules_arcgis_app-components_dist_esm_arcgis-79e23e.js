"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_arcgis-79e23e"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-un-ntc-pick-list_2.entry.js":
/*!****************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-un-ntc-pick-list_2.entry.js ***!
  \****************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   arcgis_un_ntc_pick_list: () => (/* binding */ ArcgisUnNtcPickList),
/* harmony export */   arcgis_un_ntc_pick_list_info: () => (/* binding */ ArcgisUnNtcPickListInfo)
/* harmony export */ });
/* harmony import */ var _index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-e3bf7da7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-e3bf7da7.js");
/* harmony import */ var _loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./loadModules-b4ac1247.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-b4ac1247.js");
/* harmony import */ var _locale_050b6db9_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./locale-050b6db9.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-050b6db9.js");
/* harmony import */ var _dom_4d367677_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./dom-4d367677.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-4d367677.js");
/* harmony import */ var _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./languageUtil-ef0e54b2.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-ef0e54b2.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */






var ntcLastSortBy;
(function (ntcLastSortBy) {
    ntcLastSortBy["default"] = "default";
    ntcLastSortBy["title"] = "title";
    ntcLastSortBy["type"] = "type";
    ntcLastSortBy["description"] = "description";
})(ntcLastSortBy || (ntcLastSortBy = {}));

const arcgisUnNtcPickListCss = ".popover{z-index:100}.panel{min-height:300px}.label{height:-webkit-fill-available;width:-webkit-fill-available;padding:10px}.selection-button-div{padding:4px 10px}.content{max-height:60vh}";

const ArcgisUnNtcPickList = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisNtcPickListChange = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisNtcPickListChange", 7);
        this.arcgisNtcPickListDismissed = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisNtcPickListDismissed", 7);
        this.arcgisNtcPickListSortByChange = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisNtcPickListSortByChange", 7);
        this.errorMessage = "";
        this.namedTraceConfigurationsInfo = [];
        this.calciteValueList = (ntc) => ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-pick-list-item", { key: ntc.id, label: ntc.title, description: ntc.description, value: ntc.id, selected: this.selectedNTCs.indexOf(ntc.id) > -1, metadata: {
                id: ntc.id,
                title: ntc.title
            } }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { slot: "actions-end", text: this.strings.info, title: this.strings.info, scale: "s", icon: "information", onClick: (event) => {
                event.stopPropagation();
                const ntcFlowItemElementInfo = document.createElement("calcite-flow-item");
                ntcFlowItemElementInfo.heading = ntc.title;
                ntcFlowItemElementInfo.description = ntc.description;
                const ntcInfo = document.createElement("arcgis-un-ntc-pick-list-info");
                ntcInfo.utilityNetwork = this.utilityNetwork;
                ntcInfo.ntcId = ntc.id;
                ntcInfo.strings = this.strings;
                ntcInfo.classList.add("content");
                ntcFlowItemElementInfo.appendChild(ntcInfo);
                this.flowElement.appendChild(ntcFlowItemElementInfo);
                ntcFlowItemElementInfo.setFocus();
            } })));
        this.filterPlaceholderText = undefined;
        this.multiple = true;
        this.popoverProps = undefined;
        this.selectedNTCs = [];
        this.showFilterLength = 10;
        this.showSort = true;
        this.sortBy = ntcLastSortBy.default;
        this.utilityNetwork = undefined;
        this.lastSortyBy = ntcLastSortBy.default;
        this.filterNTCs = null;
        this.isOpen = false;
    }
    // --------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    // --------------------------------------------------------------------------
    async componentWillLoad() {
        await this.loadAllModules();
        const localeSettings = await (0,_locale_050b6db9_js__WEBPACK_IMPORTED_MODULE_2__.g)(this.hostElement);
        this.strings = localeSettings[0];
        this.currentLanguage = localeSettings[1];
        this.lastSortyBy = this.sortBy || this.lastSortyBy;
        try {
            this.namedTraceConfigurations = await this.utilityNetwork.queryNamedTraceConfigurations();
            this.namedTraceConfigurations.forEach((ntc) => {
                this.namedTraceConfigurationsInfo.push({
                    id: ntc.globalId,
                    creationDate: ntc.creationDate,
                    creator: ntc.creator,
                    description: ntc.description,
                    minStartingPoints: ntc.minStartingPoints,
                    resultTypes: ntc.resultTypes,
                    tags: ntc.tags,
                    title: ntc.title,
                    type: ntc.traceType
                });
            });
            this.utilityNetwork.sharedNamedTraceConfigurations.forEach((ntc) => {
                this.selectedNTCs.push(ntc.globalId);
            });
        }
        catch (error) {
            this.errorMessage = error.message;
        }
    }
    componentDidLoad() {
        this.isOpen = true;
    }
    // temp: https://github.com/Esri/calcite-components/issues/4333
    calciteFilterChangeHandler(event) {
        var _a, _b;
        event.stopPropagation();
        const filterNode = (_a = event === null || event === void 0 ? void 0 : event.path) === null || _a === void 0 ? void 0 : _a.find((item) => item.nodeName === "CALCITE-FILTER");
        this.filterNTCs = (_b = filterNode === null || filterNode === void 0 ? void 0 : filterNode.filteredItems) === null || _b === void 0 ? void 0 : _b.map((item) => {
            return item.value;
        });
    }
    // --------------------------------------------------------------------------
    //
    // Public Methods
    //
    // --------------------------------------------------------------------------
    async reposition() {
        var _a;
        (_a = this.popoverNode) === null || _a === void 0 ? void 0 : _a.reposition();
    }
    // --------------------------------------------------------------------------
    //
    // Private Methods
    //
    // --------------------------------------------------------------------------
    getSortedList() {
        const tempSorted = [...this.namedTraceConfigurationsInfo];
        if (this.lastSortyBy === ntcLastSortBy.title) {
            tempSorted.sort((a, b) => a.title.localeCompare(b.title));
        }
        else if (this.lastSortyBy === ntcLastSortBy.description) {
            tempSorted.sort((a, b) => a.description.localeCompare(b.description));
        }
        if (this.lastSortyBy === ntcLastSortBy.type) {
            tempSorted.sort((a, b) => a.type.localeCompare(b.type));
        }
        return tempSorted;
    }
    // return true for deselect all, false for select all
    selectDeselect() {
        var _a;
        return ((_a = this.filterNTCs) === null || _a === void 0 ? void 0 : _a.length)
            ? this.filterContainsAll()
            : this.selectedNTCs.length === this.namedTraceConfigurationsInfo.length;
    }
    // check if filter has all current NTC info
    filterContainsAll() {
        return this.filterNTCs.every((filter) => {
            return this.selectedNTCs.some((curr) => {
                return curr === filter;
            });
        });
    }
    async loadAllModules() {
        const [NamedTraceConfiguration] = await (0,_loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_1__.l)([
            "esri/networks/support/NamedTraceConfiguration"
        ]);
        this.NamedTraceConfiguration = NamedTraceConfiguration;
    }
    // --------------------------------------------------------------------------
    //
    // Render  Methods
    //
    // --------------------------------------------------------------------------
    render() {
        var _a;
        const { NamedTraceConfiguration } = this;
        const sort = ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-dropdown", { slot: "menu-actions", placement: "bottom-end" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { slot: "trigger", text: this.strings.sort, title: this.strings.sort }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { scale: "s", icon: "sortDescending" })), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-dropdown-group", null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-dropdown-item", { selected: this.lastSortyBy === ntcLastSortBy.default, onClick: () => {
                this.lastSortyBy = ntcLastSortBy.default;
                this.arcgisNtcPickListSortByChange.emit(this.lastSortyBy);
            } }, this.strings.default), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-dropdown-item", { selected: this.lastSortyBy === ntcLastSortBy.title, onClick: () => {
                this.lastSortyBy = ntcLastSortBy.title;
                this.arcgisNtcPickListSortByChange.emit(this.lastSortyBy);
            } }, this.strings.name), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-dropdown-item", { selected: this.lastSortyBy === ntcLastSortBy.type, onClick: () => {
                this.lastSortyBy = ntcLastSortBy.type;
                this.arcgisNtcPickListSortByChange.emit(this.lastSortyBy);
            } }, this.strings.type), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-dropdown-item", { selected: this.lastSortyBy === ntcLastSortBy.description, onClick: () => {
                this.lastSortyBy = ntcLastSortBy.description;
                this.arcgisNtcPickListSortByChange.emit(this.lastSortyBy);
            } }, this.strings.description))));
        const selectionButton = ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "selection-button-div" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { appearance: "transparent", scale: "s", width: "full", onClick: () => {
                var _a, _b;
                if (this.selectDeselect()) {
                    //deselect all
                    this.selectedNTCs = ((_a = this.filterNTCs) === null || _a === void 0 ? void 0 : _a.length)
                        ? this.selectedNTCs.filter((item) => !this.filterNTCs.includes(item))
                        : [];
                }
                else {
                    //select all
                    this.selectedNTCs = ((_b = this.filterNTCs) === null || _b === void 0 ? void 0 : _b.length)
                        ? [...new Set([...this.selectedNTCs, ...this.filterNTCs])]
                        : this.namedTraceConfigurationsInfo.map((ntc) => {
                            return ntc.id;
                        });
                }
            } }, this.selectDeselect() ? this.strings.deselectAll : this.strings.selectAll)));
        const errorLabel = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { class: "label" }, this.errorMessage);
        const nctPickList = ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-pick-list", { multiple: this.multiple, ref: (node) => {
                this.pickListNode = node;
            }, filterEnabled: this.namedTraceConfigurationsInfo.length >= this.showFilterLength ? true : false, filterPlaceholder: (_a = this.filterPlaceholderText) !== null && _a !== void 0 ? _a : this.strings.filter, onCalciteListChange: async () => {
                // keep original order. Add addional values at the end
                const selectedItems = await this.pickListNode.getSelectedItems();
                this.selectedNTCs = [
                    ...new Set([
                        ...this.selectedNTCs.filter((item) => {
                            return selectedItems.has(item);
                        }),
                        ...selectedItems.keys()
                    ])
                ];
                this.utilityNetwork.sharedNamedTraceConfigurations = [];
                this.selectedNTCs.forEach((ntcId) => {
                    let tmpNamedTraceConfiguration = this.namedTraceConfigurations.find((c) => c.globalId === ntcId);
                    this.utilityNetwork.sharedNamedTraceConfigurations.push(new NamedTraceConfiguration({
                        globalId: tmpNamedTraceConfiguration.globalId,
                        title: tmpNamedTraceConfiguration.title
                    }));
                });
                this.arcgisNtcPickListChange.emit(this.utilityNetwork.sharedNamedTraceConfigurations);
            } }, this.namedTraceConfigurationsInfo.length >= this.showFilterLength && this.showSort && sort, selectionButton, [...this.getSortedList()].map((ntc) => this.calciteValueList(ntc))));
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.H, { class: "js-app-flyout" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-popover", { class: "popover", placement: this.popoverProps.placement || "leading-start", open: this.isOpen, pointerDisabled: true, referenceElement: this.popoverProps.refElement, offsetDistance: this.popoverProps.offsetDistance ||
                -Math.round(this.popoverProps.refElement.getBoundingClientRect().width), offsetSkidding: this.popoverProps.offsetSkidding || 0, label: this.strings.headerSelect, ref: (node) => (this.popoverNode = node) }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-flow", { ref: (node) => {
                this.flowElement = node;
            }, style: {
                width: `${this.popoverProps.popoverWidth ||
                    this.popoverProps.refElement.getBoundingClientRect().width}px`
            } }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-flow-item", { ref: (el) => (this.flowItemElement = el), class: "panel", heading: this.strings.headerSelect, closable: true, onCalciteFlowItemClose: () => this.arcgisNtcPickListDismissed.emit() }, this.errorMessage !== "" ? errorLabel : nctPickList)))));
    }
    get hostElement() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisUnNtcPickList.style = arcgisUnNtcPickListCss;

/**
 * Returns additional named trace configuration info from utility network
 * @param props - properties containing utility network and named trace configuration globalID
 */
async function getNtcInfo(props) {
    const { utilityNetwork, ntcId } = props;
    let ntcInfo;
    let namedTraceConfigurations = await utilityNetwork.queryNamedTraceConfigurations();
    namedTraceConfigurations
        .filter((ntc) => ntc.globalId === ntcId)
        .forEach((c) => {
        const info = {
            title: c.title,
            description: c.description,
            creator: c.creator,
            creationDate: c.creationDate,
            traceType: c.traceType,
            minimumPoints: c.minStartingPoints,
            resultTypes: c.resultTypes,
            tags: c.tags
        };
        ntcInfo = info;
    });
    return ntcInfo;
}

const arcgisUnNtcPickListInfoCss = ":host{height:100%}.container{padding:6px;background-color:white}.title{font-weight:bold;padding:5px 0}.section{padding:6px 0}";

const CSS = {
    container: "container",
    section: "section",
    title: "title"
};
const ArcgisUnNtcPickListInfo = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this._getResultTypes = (resultTypes) => {
            if (resultTypes.length === 0) {
                return this.strings.ntcNoResultTypes;
            }
            else {
                let arr = [];
                resultTypes.forEach((r) => {
                    arr.push(r["type"]);
                });
                return arr.join(", ");
            }
        };
        this._getTags = (tags) => {
            if (tags.length === 0) {
                return this.strings.ntcNoTags;
            }
            else {
                return tags.join(", ");
            }
        };
        this.utilityNetwork = undefined;
        this.ntcId = undefined;
        this.strings = undefined;
    }
    //--------------------------------------------------------------------------
    //
    //  Events
    //
    //--------------------------------------------------------------------------
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    async componentWillLoad() {
        const { utilityNetwork, ntcId } = this;
        this.props = {
            utilityNetwork,
            ntcId
        };
        const [intl] = await (0,_loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_1__.l)(["esri/intl"]);
        this.intl = intl;
        // required for initial load
        this.props.ntcInfo = await getNtcInfo(this.props);
    }
    // --------------------------------------------------------------------------
    //
    //  Render Methods
    //
    //--------------------------------------------------------------------------
    render() {
        const { props } = this;
        const { ntcInfo } = props;
        if (!ntcInfo) {
            return null;
        }
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.H, null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.container }, this.renderNtcCreator(), this.renderNtcCreationDate(), this.renderNtcTraceType(), this.renderNtcMinimumPoints(), this.renderNtcResultTypes(), this.renderNtcTags())));
    }
    // --------------------------------------------------------------------------
    //
    //  Private methods
    //
    // --------------------------------------------------------------------------
    renderNtcCreator() {
        const { props } = this;
        const { ntcInfo } = props;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.section }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.title }, this.strings.ntcCreator), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, ntcInfo.creator)));
    }
    renderNtcCreationDate() {
        const { intl, props } = this;
        const { ntcInfo } = props;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.section }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.title }, this.strings.ntcCreationDate), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, intl.formatDate(ntcInfo.creationDate, { dateStyle: "full" }))));
    }
    renderNtcTraceType() {
        const { props } = this;
        const { ntcInfo } = props;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.section }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.title }, this.strings.ntcTraceType), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, ntcInfo.traceType)));
    }
    renderNtcMinimumPoints() {
        const { props } = this;
        const { ntcInfo } = props;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.section }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.title }, this.strings.ntcMinPoints), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, ntcInfo.minimumPoints)));
    }
    renderNtcResultTypes() {
        const { props } = this;
        const { ntcInfo } = props;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.section }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.title }, this.strings.ntcResultTypes), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, this._getResultTypes(ntcInfo.resultTypes))));
    }
    renderNtcTags() {
        const { props } = this;
        const { ntcInfo } = props;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.section }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.title }, this.strings.ntcTags), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, this._getTags(ntcInfo.tags))));
    }
    get hostElement() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisUnNtcPickListInfo.style = arcgisUnNtcPickListInfoCss;



//# sourceMappingURL=arcgis-un-ntc-pick-list_2.entry.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-ef0e54b2.js":
/*!******************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-ef0e54b2.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   C: () => (/* binding */ CSS_UTILITY),
/* harmony export */   a: () => (/* binding */ formatDate),
/* harmony export */   b: () => (/* binding */ formatPlural),
/* harmony export */   f: () => (/* binding */ formatNumber),
/* harmony export */   g: () => (/* binding */ getElementDir),
/* harmony export */   l: () => (/* binding */ languageMap)
/* harmony export */ });
/* harmony import */ var _loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./loadModules-b4ac1247.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-b4ac1247.js");
/* harmony import */ var _dom_4d367677_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dom-4d367677.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-4d367677.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */



const languageMap = new Map([
    ["ar", "ar"],
    ["bg", "bg"],
    ["bs", "bs"],
    ["ca", "ca"],
    ["cs", "cs"],
    ["da", "da"],
    ["de", "de"],
    ["el", "el"],
    ["en", "en"],
    ["es", "es"],
    ["et", "et"],
    ["fi", "fi"],
    ["fr", "fr"],
    ["he", "he"],
    ["hr", "hr"],
    ["hu", "hu"],
    ["id", "id"],
    ["it", "it"],
    ["ja", "ja"],
    ["ko", "ko"],
    ["lt", "lt"],
    ["lv", "lv"],
    ["nb", "nb"],
    ["nl", "nl"],
    ["pl", "pl"],
    ["pt-br", "pt-BR"],
    ["pt-pt", "pt-PT"],
    ["ro", "ro"],
    ["ru", "ru"],
    ["sk", "sk"],
    ["sl", "sl"],
    ["sr", "sr"],
    ["sv", "sv"],
    ["th", "th"],
    ["tr", "tr"],
    ["uk", "uk"],
    ["vi", "vi"],
    ["zh-cn", "zh-CN"],
    ["zh-hk", "zh-HK"],
    ["zh-tw", "zh-TW"]
]);
// rtl
function getElementDir(el) {
    return getElementProp(el, "dir", "ltr");
}
function getElementProp(el, prop, value) {
    const closestWithProp = (0,_dom_4d367677_js__WEBPACK_IMPORTED_MODULE_1__.c)(el, `[${prop}]`);
    return closestWithProp ? closestWithProp.getAttribute(prop) : value;
}
// css
const CSS_UTILITY = {
    rtl: "arcgis--rtl"
};
async function formatNumber(number, options) {
    const { api, type, places } = options || {};
    if (api === 4) {
        const [intl] = await (0,_loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_0__.l)(["esri/intl"]);
        const numberFormatIntlOptions = intl.convertNumberFormatToIntlOptions({
            places,
            style: type,
            digitSeparator: true
        });
        return intl.formatNumber(number, Object.assign(Object.assign({}, numberFormatIntlOptions), { style: type }));
    }
    const [dojoNumber] = await (0,_loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_0__.l)(["dojo/number"]);
    return dojoNumber.format(number, {
        type,
        places,
        pattern: options === null || options === void 0 ? void 0 : options.pattern
    });
}
const cache = {};
function formatDate(date) {
    const lang = document.documentElement.lang;
    const dayShortMonthYear = {
        year: "numeric",
        month: "short",
        day: "numeric"
    };
    if (!cache[lang]) {
        cache[lang] = new Intl.DateTimeFormat(document.documentElement.lang, dayShortMonthYear);
    }
    return cache[lang].format(date);
}
function formatPlural(lang, stringObj, number) {
    const singles = ["id", "ja", "ko", "th", "vi", "zh-cn", "zh-hk", "zh-tw"];
    const likeEnglish = [
        "en",
        "ca",
        "da",
        "de",
        "el",
        "es",
        "et",
        "fi",
        "hi",
        "hu",
        "it",
        "nb",
        "nl",
        "pt-pt",
        "sv",
        "tr"
    ];
    const locale = lang !== null && lang !== void 0 ? lang : "en";
    // if the number is one, or it is a "simple" language, return the 1 string
    if (number === 1 || singles.includes(locale)) {
        return stringObj.single.replace("${number}", "1");
    }
    // if the number is not 1 and the language uses the same pluralization strategy as english,
    // return the multiple string
    if (number !== 1 && likeEnglish.includes(locale)) {
        return stringObj.multiple.replace("${number}", `${number}`);
    }
    // if none of the above worked, return the "unknown" string
    return stringObj.unknown.replace("${number}", `${number}`);
}



//# sourceMappingURL=languageUtil-ef0e54b2.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-050b6db9.js":
/*!************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-050b6db9.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ getComponentClosestLanguage),
/* harmony export */   g: () => (/* binding */ getLocaleComponentStrings)
/* harmony export */ });
/* harmony import */ var _dom_4d367677_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dom-4d367677.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-4d367677.js");
/* harmony import */ var _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./languageUtil-ef0e54b2.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-ef0e54b2.js");
/* harmony import */ var _index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./index-e3bf7da7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-e3bf7da7.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */




// https://medium.com/stencil-tricks/implementing-internationalisation-i18n-with-stencil-5e6559554117
function getComponentClosestLanguage(element) {
    var _a, _b, _c;
    const closestElement = (_a = (0,_dom_4d367677_js__WEBPACK_IMPORTED_MODULE_0__.c)(element, "[lang]")) !== null && _a !== void 0 ? _a : (_c = (_b = element.shadowRoot) === null || _b === void 0 ? void 0 : _b.ownerDocument) === null || _c === void 0 ? void 0 : _c.documentElement;
    // language set by the calling application or browser. defaults to english.
    const lang = ((closestElement === null || closestElement === void 0 ? void 0 : closestElement.lang) || (navigator === null || navigator === void 0 ? void 0 : navigator.language) || "en").toLowerCase();
    if (_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang)) {
        return _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang);
    }
    else {
        // "ru-RU" maps to "ru" use case
        if (_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang.slice(0, 2))) {
            return _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang.slice(0, 2));
        }
        else {
            return "en";
        }
    }
}
function getComponentClosestLanguageIntl(element) {
    var _a, _b, _c;
    // it's OK if we don't have the 4 letter language file for it
    // 4 letter language code needed for formatting numbers
    const closestElement = (_a = (0,_dom_4d367677_js__WEBPACK_IMPORTED_MODULE_0__.c)(element, "[lang]")) !== null && _a !== void 0 ? _a : (_c = (_b = element.shadowRoot) === null || _b === void 0 ? void 0 : _b.ownerDocument) === null || _c === void 0 ? void 0 : _c.documentElement;
    // language set by the calling application or browser. defaults to english.
    const lang = ((closestElement === null || closestElement === void 0 ? void 0 : closestElement.lang) || (navigator === null || navigator === void 0 ? void 0 : navigator.language) || "en").toLowerCase();
    if (_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang)) {
        return _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang);
    }
    else {
        if (_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang.slice(0, 2))) {
            // we support the 2 letter coded language
            // e.g. it-CH vs it
            return lang;
        }
        else {
            return "en";
        }
    }
}
function fetchLocaleStringsForComponent(componentName, locale) {
    return new Promise((resolve, reject) => {
        fetch((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_2__.a)(`../arcgis-app-assets/i18n/${componentName}.i18n.${locale}.json`)).then((result) => {
            if (result.ok)
                resolve(result.json());
            else
                reject();
        }, () => reject());
    });
}
const stringCache = {};
function fetchLocaleStringsFromCache(componentName, locale) {
    const id = `${componentName}${locale}`;
    if (!stringCache[id]) {
        stringCache[id] = fetchLocaleStringsForComponent(componentName, locale);
    }
    return stringCache[id];
}
/**
 * Get strings and language codes.
 * This method returns 2 language codes.
 * The first one returns a code that's also supported as a language file.
 * The second one returns a code where there is support for the first 2 letters of the code as part of a language file,
 * but will return the original 4 letter code from the page.
 * E.g. For "it-ch" it will return "it" as the first language code and "it-ch" as the second.
 * The second one is required for esri.intl.setLocale() to get the correct formatting.
 *
 * If a tagName is provided it will overwite the element's tagName
 *
 *  @return [ strings, first language code, second language code]
 */
async function getLocaleComponentStrings(element, tagName) {
    const componentName = tagName || element.tagName.toLowerCase();
    const componentLanguage = getComponentClosestLanguage(element);
    const componentLanguageIntl = getComponentClosestLanguageIntl(element);
    let strings;
    try {
        strings = await fetchLocaleStringsFromCache(componentName, componentLanguage);
    }
    catch (e) {
        console.warn(`no locale for ${componentName} (${componentLanguage}) loading default locale en.`);
        strings = await fetchLocaleStringsFromCache(componentName, "en");
    }
    return [strings, componentLanguage, componentLanguageIntl];
}



//# sourceMappingURL=locale-050b6db9.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,