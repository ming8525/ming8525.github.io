"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_arcgis-raster-function-editor_-ea31e0"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/help-texts.lt-8ce21b20.js":
/*!**********************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/help-texts.lt-8ce21b20.js ***!
  \**********************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   rfxArgsHelpTexts: () => (/* binding */ rfxArgsHelpTexts)
/* harmony export */ });
const rfxArgsHelpTexts = {
	"@@Abs_Cellsize-Type_tag0@@": "Pasirinkite, koks gardelės dydis bus naudojamas išvesties rastre. Jei visų įvesties gardelių dydžiai vienodi, visos parinktys pateiks vienodus rezultatus.",
	"@@Abs_Cellsize-Type_tag1@@": "Pirmiausia--Naudoti pirmą įvesties rastrų gardelės dydį.",
	"@@Abs_Cellsize-Type_tag2@@": "Paskiausia--Naudoti paskutinį įvesties rastrų gardelės dydį.",
	"@@Abs_Cellsize-Type_tag3@@": "Didžiausias--Naudoti didžiausią įvesties rastrų gardelės dydį. Tai numatytasis nustatymas.",
	"@@Abs_Cellsize-Type_tag4@@": "Vidutinis--Naudoti vidutinį visų įvesties rastrų gardelės dydį.",
	"@@Abs_Cellsize-Type_tag5@@": "Mažiausias--Naudoti mažiausią įvesties rastrų gardelės dydį.",
	"@@Abs_Extent-Type_tag0@@": "Pasirinkite, kokia aprėptis bus naudojama išvesties rastre:",
	"@@Abs_Extent-Type_tag1@@": "Pirmiausia--Naudoti pirmojo įvesties rastro aprėptį nustatant apdorojimo aprėptį.",
	"@@Abs_Extent-Type_tag2@@": "Sankirta--Naudoti persidengiančių pikselių aprėptį nustatant apdorojimo aprėptį. Tai numatytasis nustatymas.",
	"@@Abs_Extent-Type_tag3@@": "Paskiausia--Naudoti paskutinio įvesties rastro aprėptį nustatant apdorojimo aprėptį.",
	"@@Abs_Extent-Type_tag4@@": "Sąjunga--Naudoti visų rastrų aprėptį nustatant apdorojimo aprėptį.",
	"@@Abs_Raster_tag0@@": "Įvesties rastras, kuriam bus skaičiuojamos absoliučiosios reikšmės.",
	"@@ACos_Cellsize-Type_tag0@@": "Pasirinkite, koks gardelės dydis bus naudojamas išvesties rastre. Jei visų įvesties gardelių dydžiai vienodi, visos parinktys pateiks vienodus rezultatus.",
	"@@ACos_Cellsize-Type_tag1@@": "Pirmiausia--Naudoti pirmą įvesties rastrų gardelės dydį.",
	"@@ACos_Cellsize-Type_tag2@@": "Paskiausia--Naudoti paskutinį įvesties rastrų gardelės dydį.",
	"@@ACos_Cellsize-Type_tag3@@": "Didžiausias--Naudoti didžiausią įvesties rastrų gardelės dydį. Tai numatytasis nustatymas.",
	"@@ACos_Cellsize-Type_tag4@@": "Vidutinis--Naudoti vidutinį visų įvesties rastrų gardelės dydį.",
	"@@ACos_Cellsize-Type_tag5@@": "Mažiausias--Naudoti mažiausią įvesties rastrų gardelės dydį.",
	"@@ACos_Extent-Type_tag0@@": "Pasirinkite, kokia aprėptis bus naudojama išvesties rastre:",
	"@@ACos_Extent-Type_tag1@@": "Pirmiausia--Naudoti pirmojo įvesties rastro aprėptį nustatant apdorojimo aprėptį.",
	"@@ACos_Extent-Type_tag2@@": "Sankirta--Naudoti persidengiančių pikselių aprėptį nustatant apdorojimo aprėptį. Tai numatytasis nustatymas.",
	"@@ACos_Extent-Type_tag3@@": "Paskutinė--Naudoti paskutinio įvesties rastro aprėptį nustatant apdorojimo aprėptį.",
	"@@ACos_Extent-Type_tag4@@": "Sąjunga--Naudoti visų rastrų aprėptį nustatant apdorojimo aprėptį.",
	"@@ACos_Raster_tag0@@": "Įvestis, kuriai bus skaičiuojamos atvirkščiai proporcingos kosinuso reikšmės.",
	"@@ACosH_Cellsize-Type_tag0@@": "Pasirinkite, koks gardelės dydis bus naudojamas išvesties rastre. Jei visų įvesties gardelių dydžiai vienodi, visos parinktys pateiks vienodus rezultatus.",
	"@@ACosH_Cellsize-Type_tag1@@": "Pirmas--Naudoti pirmą įvesties rastrų gardelės dydį.",
	"@@ACosH_Cellsize-Type_tag2@@": "Paskutinis--Naudoti paskutinį įvesties rastrų gardelės dydį.",
	"@@ACosH_Cellsize-Type_tag3@@": "Didžiausias--Naudoti didžiausią įvesties rastrų gardelės dydį. Tai numatytasis nustatymas.",
	"@@ACosH_Cellsize-Type_tag4@@": "Vidutinis--Naudoti vidutinį visų įvesties rastrų gardelės dydį.",
	"@@ACosH_Cellsize-Type_tag5@@": "Mažiausias--Naudoti mažiausią įvesties rastrų gardelės dydį.",
	"@@ACosH_Extent-Type_tag0@@": "Pasirinkite, kokia aprėptis bus naudojama išvesties rastre:",
	"@@ACosH_Extent-Type_tag1@@": "Pirmoji--Naudoti pirmojo įvesties rastro aprėptį nustatant apdorojimo aprėptį.",
	"@@ACosH_Extent-Type_tag2@@": "Sankirta--Naudoti persidengiančių pikselių aprėptį nustatant apdorojimo aprėptį. Tai numatytasis nustatymas.",
	"@@ACosH_Extent-Type_tag3@@": "Paskiausia--Naudoti paskutinio įvesties rastro aprėptį nustatant apdorojimo aprėptį.",
	"@@ACosH_Extent-Type_tag4@@": "Sąjunga--Naudoti visų rastrų aprėptį nustatant apdorojimo aprėptį.",
	"@@ACosH_Raster_tag0@@": "Įvestis, kuriai bus skaičiuojamos atvirkščiai proporcingos hiperbolinio kosinuso reikšmės.",
	"@@Apparent-Reflectance_Albedo_tag0@@": "Matomo atspindžio funkcijos rezultatus galima išreikšti ir kaip albedą, kuris yra planetos paviršiaus atspindima jį pasiekusios energijos procentinė dalis. Albedo duomenis paprastai naudoja naudotojai mokslininkai sudėtingoms modeliavimo užduotis ir techninėms nuotolinio tyrimo aplikacijoms.",
	"@@Apparent-Reflectance_Albedo_tag1@@": "Nepažymėta--Funkcija pateikia matomo atspindžio reikšmes. Tai numatytasis nustatymas.",
	"@@Apparent-Reflectance_Albedo_tag2@@": "Pažymėta--Funkcija pateikia 32 bitų slankiojo kablelio reikšmes. Dažniausiai jos yra tarp 0,0 ir 1,0. Pasirinkus šią parinktį, duomenys nekarpomi.",
	"@@Apparent-Reflectance_Albedo_tag3@@": "Kadangi albedo išvesties duomenų tipas yra kintamasis taškas, turite aiškiai nustatyti pageidaujamą <strong> Output Pixel Type </strong> į 32 bitų spartųjį arba 64 bitų dvigubą. Parametras <strong> Output Pixel Type </strong> yra rastro funkcijos <strong> Apparent Reflectance </strong> skirtuke <strong> General </strong>. Jei <strong>Output Pixel Type</strong> netinkamai nustatytas parinkčiai <strong>Albedo</strong>, gautos reikšmės bus netinkamos ir joms bus suteikta 0 reikšmė.",
	"@@Apparent-Reflectance_Offset_tag0@@": "Jūsų pakeisto mastelio albedo reikšmei galima pasirinkti turėti poslinkio reikšmę:",
	"@@Apparent-Reflectance_Offset_tag1@@": "16 bitų nepasirašytų duomenų tipui numatytoji mastelio poslinkio reikšmė yra 5 000.",
	"@@Apparent-Reflectance_Offset_tag2@@": "8 bitų nepasirašytų duomenų tipui numatytoji mastelio poslinkio reikšmė yra 0.",
	"@@Apparent-Reflectance_Offset_tag3@@": "Jei išvestis yra albedas, mastelio keitimas nevykdomas.",
	"@@Apparent-Reflectance_Radiance-Gains-and-Bias-Values-per-Band_tag0@@": "Kiekvienam kanalui galite rankiniu būdu nustatyti arba redaguoti šią reikšmę. Atitinkamą informaciją galima nuskaityti iš įvesties rastro produkto metaduomenų.",
	"@@Apparent-Reflectance_Raster_tag0@@": "Rastro produktas, kuriam bus taikomas matomas atspindys.",
	"@@Apparent-Reflectance_Scale-Factor_tag0@@": "Jūsų matomo atspindžio išvesties reikšmę galima išreikšti sveikaisiais skaičiais. Mastelio koeficientas dauginamas iš albedo visų slankiojo kablelio reikšmių konvertavimui į sveikojo skaičiaus reikšmes.",
	"@@Apparent-Reflectance_Scale-Factor_tag1@@": "Jei mastelio koeficientas lygus ${0} arba nenurodytas, bus taikomas numatytasis mastelio keitimas, atsižvelgiant į įvesties duomenų pikselių tipą:",
	"@@Apparent-Reflectance_Scale-Factor_tag2@@": "16 bitų nepasirašytų duomenų tipui numatytoji mastelio koeficiento reikšmė yra 50 000.",
	"@@Apparent-Reflectance_Scale-Factor_tag3@@": "8 bitų nepasirašytų duomenų tipui numatytoji mastelio koeficiento reikšmė yra 255.",
	"@@Apparent-Reflectance_Scale-Factor_tag4@@": "Mastelio koeficientas taikomas visada, kai išvestis yra matomas atspindys. Jei išvestis yra albedas, mastelio keitimas nevykdomas.",
	"@@Apparent-Reflectance_Sun-Elevation_tag0@@": "Tai yra laipsniais išreikšta Saulės aukščio reikšmė. Ją automatiškai užpildys sistema, jei atitinkamą informaciją galima nuskaityti iš metaduomenų. Šią reikšmę galite nustatyti rankiniu būdu arba redaguoti.",
	"@@ArgStatistics_Max_tag0@@": "Jūsų nustatyta maksimali reikšmė bus didžiausia reikšmė, lygi arba mažesnė už trukmės pabaigą.",
	"@@ArgStatistics_Max_tag1@@": "Tokia įvestis galima tik jei naudojamas trukmės metodas.",
	"@@ArgStatistics_Method_tag0@@": "Pasirinkite skaičiavimui naudojimą statistikos metodą:",
	"@@ArgStatistics_Method_tag1@@": "Arg. maks.--Maksimumo argumentas, pateikiantis ${Band index}, kuriam konkretus pikselis išlaiko minimalią reikšmę iš visų kanalų. Visiems kiekvieno įvesties rastro įvesties kanalams priskiriamas nuliu grįstas inkrementinis kanalo indeksas, kuris pirmiausia surikiuojamas pagal įvesties rastro indeksą, o tada – pagal santykinį kanalo eiliškumą kiekvieno įvesties rastro viduje.",
	"@@ArgStatistics_Method_tag2@@": "Arg. mediana--Medianos argumentas, pateikiantis ${Band index}, kuriam konkretus pikselis išlaiko medianos reikšmę iš visų kanalų reikšmių.",
	"@@ArgStatistics_Method_tag3@@": "Arg. min.--Minimumo argumentas, pateikiantis ${Band index}, kuriam konkretus pikselis išlaiko minimalią reikšmę iš visų kanalų.",
	"@@ArgStatistics_Method_tag4@@": "Trukmė--Trukmės metodu nustatomi ilgiausi iš eilės elementai masyve, kur kiekvieno elemento reikšmė yra didesnė ar lygi <strong>Min</strong> ir mažesnė ar lygi <strong>Max</strong> ir tada pateikiamas jų ilgis.",
	"@@ArgStatistics_Min_tag0@@": "Jūsų nustatyta minimali reikšmė bus mažiausia reikšmė, lygi arba didesnė už trukmės pradžią.",
	"@@ArgStatistics_Min_tag1@@": "Tokia įvestis galima tik jei naudojamas trukmės metodas.",
	"@@ArgStatistics_Rasters_tag0@@": "Įvesties rastras, kuriam taikysite įvairius statistinius metodus.",
	"@@ArgStatistics_Undefined-Class_tag0@@": "Įvesties konstanta, kuri bus pateikiama, jei nepavyks gauti apibrėžto maksimumo, minimumo arba medianos. Dažniausias scenarijus – maksimali arba minimali reikšmė daugiau nei vieną kartą pasitaiko tarp visuose kanaluose esančių reikšmių. Numatytoji neapibrėžtos konstantos reikšmė yra 100.",
	"@@ArgStatistics_Undefined-Class_tag1@@": "Neapibrėžta klasė taikoma tik, jei naudojamas metodas yra <strong>ArgMax</strong>, <strong>ArgMin</strong> arba <strong>ArgMedian</strong>.",
	"@@ArgStatistics_ignorenodata_tag0@@": "Nurodo, ar statistiniuose skaičiavimuose ignoruojamos NoData reikšmes.",
	"@@ArgStatistics_ignorenodata_tag1@@": "Pažymėta – į analizę bus įtraukti visi tinkami įvesties rastrų pikseliai ir bus ignoruojami visi NoData pikseliai.",
	"@@ArgStatistics_ignorenodata_tag2@@": "Nepažymėta – analizė pateiks rezultatą NoData, jei įvesties rastrų pikseliai turės bent vieną NoData reikšmę. Tai yra numatytasis nustatymas.",
	"@@Arithmetic_Cellsize-Type_tag0@@": "Pasirinkite, koks gardelės dydis bus naudojamas išvesties rastre. Jei visų įvesties gardelių dydžiai vienodi, visos parinktys pateiks vienodus rezultatus.",
	"@@Arithmetic_Cellsize-Type_tag1@@": "Pirmiausia--Naudoti pirmą įvesties rastrų gardelės dydį.",
	"@@Arithmetic_Cellsize-Type_tag2@@": "Paskiausia--Naudoti paskutinį įvesties rastrų gardelės dydį.",
	"@@Arithmetic_Cellsize-Type_tag3@@": "Didžiausias--Naudoti didžiausią įvesties rastrų gardelės dydį. Tai numatytasis nustatymas.",
	"@@Arithmetic_Cellsize-Type_tag4@@": "Vidutinis--Naudoti vidutinį visų įvesties rastrų gardelės dydį.",
	"@@Arithmetic_Cellsize-Type_tag5@@": "Mažiausias--Naudoti mažiausią įvesties rastrų gardelės dydį.",
	"@@Arithmetic_Extent-Type_tag0@@": "Pasirinkite, kokia aprėptis bus naudojama išvesties rastre:",
	"@@Arithmetic_Extent-Type_tag1@@": "Pirmiausia--Naudoti pirmojo įvesties rastro aprėptį nustatant apdorojimo aprėptį.",
	"@@Arithmetic_Extent-Type_tag2@@": "Sankirta--Naudoti persidengiančių pikselių aprėptį nustatant apdorojimo aprėptį. Tai numatytasis nustatymas.",
	"@@Arithmetic_Extent-Type_tag3@@": "Paskiausia--Naudoti paskutinio įvesties rastro aprėptį nustatant apdorojimo aprėptį.",
	"@@Arithmetic_Extent-Type_tag4@@": "Sąjunga--Naudoti visų rastrų aprėptį nustatant apdorojimo aprėptį.",
	"@@Arithmetic_Operation_tag0@@": "Aritmetinė operacija, kuris bus atliekama tarp dviejų įvesties rastrų.",
	"@@Arithmetic_Operation_tag1@@": "Galimos parinktys:",
	"@@Arithmetic_Operation_tag2@@": "<strong>Divide</strong>--Pateikia dalybos tarp atitinkamų kiekvieno rastro pikselių reikšmių rezultatą.",
	"@@Arithmetic_Operation_tag4@@": "<strong>Minus</strong>--Pateikia skirtumo tarp atitinkamų kiekvieno rastro pikselių reikšmių rezultatą. Šią operaciją galima naudoti apskaičiuojant pokyčių aptikimus.",
	"@@Arithmetic_Operation_tag6@@": "<strong>Mode</strong>--Pateikia dažniausiai pasitaikančią pikselio reikšmę iš visų persidengiančių pikselių. Pavyzdžiui, jei rastre yra šeši kanalai, bus šeši persidengiantys pikseliai. Jei turimos reikšmės yra 4, 5, 6, 4, 7, 9, šio režimo reikšmė bus 4.",
	"@@Arithmetic_Operation_tag8@@": "<strong>Multiply</strong>--Pateikia kiekvieno rastro atitinkamų pikselių reikšmių daugybos rezultatą. Tai galima naudoti kai kurioms išlaidų funkcijoms atlikti.",
	"@@Arithmetic_Operation_tag10@@": "<strong>Plus</strong>--Pateikia kiekvieno rastro atitinkamų pikselių reikšmių sumos rezultatą.",
	"@@Arithmetic_Operation_tag12@@": "<strong>Power</strong>--Pateikia atitinkamų pikselių reikšmių, pakeltų įvesties rastro arba skaliaro laipsniu, rezultatą.",
	"@@Arithmetic_Raster_tag0@@": "Pirmojo įvesties rastro duomenų rinkinys.",
	"@@Arithmetic_Raster2_tag0@@": "Antrojo įvesties rastro duomenų rinkinys.",
	"@@ASin_Cellsize-Type_tag0@@": "Pasirinkite, koks gardelės dydis bus naudojamas išvesties rastre. Jei visų įvesties gardelių dydžiai vienodi, visos parinktys pateiks vienodus rezultatus.",
	"@@ASin_Cellsize-Type_tag1@@": "Pirmiausia--Naudoti pirmą įvesties rastrų gardelės dydį.",
	"@@ASin_Cellsize-Type_tag2@@": "Paskiausia--Naudoti paskutinį įvesties rastrų gardelės dydį.",
	"@@ASin_Cellsize-Type_tag3@@": "Didžiausias--Naudoti didžiausią įvesties rastrų gardelės dydį. Tai numatytasis nustatymas.",
	"@@ASin_Cellsize-Type_tag4@@": "Vidutinis--Naudoti vidutinį visų įvesties rastrų gardelės dydį.",
	"@@ASin_Cellsize-Type_tag5@@": "Mažiausias--Naudoti mažiausią įvesties rastrų gardelės dydį.",
	"@@ASin_Extent-Type_tag0@@": "Pasirinkite, kokia aprėptis bus naudojama išvesties rastre:",
	"@@ASin_Extent-Type_tag1@@": "Pirmiausia--Naudoti pirmojo įvesties rastro aprėptį nustatant apdorojimo aprėptį.",
	"@@ASin_Extent-Type_tag2@@": "Sankirta--Naudoti persidengiančių pikselių aprėptį nustatant apdorojimo aprėptį. Tai numatytasis nustatymas.",
	"@@ASin_Extent-Type_tag3@@": "Paskiausia--Naudoti paskutinio įvesties rastro aprėptį nustatant apdorojimo aprėptį.",
	"@@ASin_Extent-Type_tag4@@": "Sąjunga--Naudoti visų rastrų aprėptį nustatant apdorojimo aprėptį.",
	"@@ASin_Raster_tag0@@": "Įvestis, kuriai bus skaičiuojamos atvirkščiai proporcingos sinuso reikšmės.",
	"@@ASinH_Cellsize-Type_tag0@@": "Pasirinkite, koks gardelės dydis bus naudojamas išvesties rastre. Jei visų įvesties gardelių dydžiai vienodi, visos parinktys pateiks vienodus rezultatus.",
	"@@ASinH_Cellsize-Type_tag1@@": "Pirmiausia--Naudoti pirmą įvesties rastrų gardelės dydį.",
	"@@ASinH_Cellsize-Type_tag2@@": "Paskiausia--Naudoti paskutinį įvesties rastrų gardelės dydį.",
	"@@ASinH_Cellsize-Type_tag3@@": "Didžiausias--Naudoti didžiausią įvesties rastrų gardelės dydį. Tai numatytasis nustatymas.",
	"@@ASinH_Cellsize-Type_tag4@@": "Vidutinis--Naudoti vidutinį visų įvesties rastrų gardelės dydį.",
	"@@ASinH_Cellsize-Type_tag5@@": "Mažiausias--Naudoti mažiausią įvesties rastrų gardelės dydį.",
	"@@ASinH_Extent-Type_tag0@@": "Pasirinkite, kokia aprėptis bus naudojama išvesties rastre:",
	"@@ASinH_Extent-Type_tag1@@": "Pirmiausia--Naudoti pirmojo įvesties rastro aprėptį nustatant apdorojimo aprėptį.",
	"@@ASinH_Extent-Type_tag2@@": "Sankirta--Naudoti persidengiančių pikselių aprėptį nustatant apdorojimo aprėptį. Tai numatytasis nustatymas.",
	"@@ASinH_Extent-Type_tag3@@": "Paskiausia--Naudoti paskutinio įvesties rastro aprėptį nustatant apdorojimo aprėptį.",
	"@@ASinH_Extent-Type_tag4@@": "Sąjunga--Naudoti visų rastrų aprėptį nustatant apdorojimo aprėptį.",
	"@@ASinH_Raster_tag0@@": "Įvestis, kuriai bus skaičiuojamos atvirkščiai proporcingos hiperbolinio sinuso reikšmės.",
	"@@Aspect_Raster_tag0@@": "Įvesties DEM, naudojamas gauti krypties duomenų rinkinį.",
	"@@Aspect-Slope_Raster_tag0@@": "Įvesties DEM.",
	"@@Aspect-Slope_Z-Factor_tag0@@": "Proporcingumo koeficientas, naudojamas konvertuojant aukščių reikšmes šiais dviem tikslais:",
	"@@Aspect-Slope_Z-Factor_tag1@@": "Konvertuoti aukščio vienetus (pvz. metrus ar pėdas) į duomenų rinkinio horizontaliosios ašies vienetus – pėdas, metrus ar laipsnius",
	"@@Aspect-Slope_Z-Factor_tag2@@": "Pridėti vertikalų padidinimą geresniam vizualiniam efektui.",
	"@@ATan_Cellsize-Type_tag0@@": "Pasirinkite, koks gardelės dydis bus naudojamas išvesties rastre. Jei visų įvesties gardelių dydžiai vienodi, visos parinktys pateiks vienodus rezultatus.",
	"@@ATan_Cellsize-Type_tag1@@": "Pirmiausia--Naudoti pirmą įvesties rastrų gardelės dydį.",
	"@@ATan_Cellsize-Type_tag2@@": "Paskiausia--Naudoti paskutinį įvesties rastrų gardelės dydį.",
	"@@ATan_Cellsize-Type_tag3@@": "Didžiausias--Naudoti didžiausią įvesties rastrų gardelės dydį. Tai numatytasis nustatymas.",
	"@@ATan_Cellsize-Type_tag4@@": "Vidutinis--Naudoti vidutinį visų įvesties rastrų gardelės dydį.",
	"@@ATan_Cellsize-Type_tag5@@": "Mažiausias--Naudoti mažiausią įvesties rastrų gardelės dydį.",
	"@@ATan_Extent-Type_tag0@@": "Pasirinkite, kokia aprėptis bus naudojama išvesties rastre:",
	"@@ATan_Extent-Type_tag1@@": "Pirmiausia--Naudoti pirmojo įvesties rastro aprėptį nustatant apdorojimo aprėptį.",
	"@@ATan_Extent-Type_tag2@@": "Sankirta--Naudoti persidengiančių pikselių aprėptį nustatant apdorojimo aprėptį. Tai numatytasis nustatymas.",
	"@@ATan_Extent-Type_tag3@@": "Paskiausia--Naudoti paskutinio įvesties rastro aprėptį nustatant apdorojimo aprėptį.",
	"@@ATan_Extent-Type_tag4@@": "Sąjunga--Naudoti visų rastrų aprėptį nustatant apdorojimo aprėptį.",
	"@@ATan_Raster_tag0@@": "Įvestis, kuriai bus skaičiuojamos atvirkščiai proporcingos tangento reikšmės.",
	"@@ATan2_Cellsize-Type_tag0@@": "Pasirinkite, koks gardelės dydis bus naudojamas išvesties rastre. Jei visų įvesties gardelių dydžiai vienodi, visos parinktys pateiks vienodus rezultatus.",
	"@@ATan2_Cellsize-Type_tag1@@": "Pirmiausia--Naudoti pirmą įvesties rastrų gardelės dydį.",
	"@@ATan2_Cellsize-Type_tag2@@": "Paskiausia--Naudoti paskutinį įvesties rastrų gardelės dydį.",
	"@@ATan2_Cellsize-Type_tag3@@": "Didžiausias--Naudoti didžiausią įvesties rastrų gardelės dydį. Tai numatytasis nustatymas.",
	"@@ATan2_Cellsize-Type_tag4@@": "Vidutinis--Naudoti vidutinį visų įvesties rastrų gardelės dydį.",
	"@@ATan2_Cellsize-Type_tag5@@": "Mažiausias--Naudoti mažiausią įvesties rastrų gardelės dydį.",
	"@@ATan2_Extent-Type_tag0@@": "Pasirinkite, kokia aprėptis bus naudojama išvesties rastre:",
	"@@ATan2_Extent-Type_tag1@@": "Pirmiausia--Naudoti pirmojo įvesties rastro aprėptį nustatant apdorojimo aprėptį.",
	"@@ATan2_Extent-Type_tag2@@": "Sankirta--Naudoti persidengiančių pikselių aprėptį nustatant apdorojimo aprėptį. Tai numatytasis nustatymas.",
	"@@ATan2_Extent-Type_tag3@@": "Paskiausia--Naudoti paskutinio įvesties rastro aprėptį nustatant apdorojimo aprėptį.",
	"@@ATan2_Extent-Type_tag4@@": "Sąjunga--Naudoti visų rastrų aprėptį nustatant apdorojimo aprėptį.",
	"@@ATan2_Raster_tag0@@": "Įvestis, nurodanti skaitiklį (y reikšmę), kuris bus naudojamas atvirkščiai proporcingam tangentui skaičiuoti.",
	"@@ATan2_Raster2_tag0@@": "Įvestis, nurodanti daliklį (x reikšmę), kuris bus naudojamas atvirkščiai proporcingam tangentui skaičiuoti.",
	"@@ATanH_Cellsize-Type_tag0@@": "Pasirinkite, koks gardelės dydis bus naudojamas išvesties rastre. Jei visų įvesties gardelių dydžiai vienodi, visos parinktys pateiks vienodus rezultatus.",
	"@@ATanH_Cellsize-Type_tag1@@": "Pirmiausia--Naudoti pirmą įvesties rastrų gardelės dydį.",
	"@@ATanH_Cellsize-Type_tag2@@": "Paskiausia--Naudoti paskutinį įvesties rastrų gardelės dydį.",
	"@@ATanH_Cellsize-Type_tag3@@": "Didžiausias--Naudoti didžiausią įvesties rastrų gardelės dydį. Tai numatytasis nustatymas.",
	"@@ATanH_Cellsize-Type_tag4@@": "Vidutinis--Naudoti vidutinį visų įvesties rastrų gardelės dydį.",
	"@@ATanH_Cellsize-Type_tag5@@": "Mažiausias--Naudoti mažiausią įvesties rastrų gardelės dydį.",
	"@@ATanH_Extent-Type_tag0@@": "Pasirinkite, kokia aprėptis bus naudojama išvesties rastre:",
	"@@ATanH_Extent-Type_tag1@@": "Pirmiausia--Naudoti pirmojo įvesties rastro aprėptį nustatant apdorojimo aprėptį.",
	"@@ATanH_Extent-Type_tag2@@": "Sankirta--Naudoti persidengiančių pikselių aprėptį nustatant apdorojimo aprėptį. Tai numatytasis nustatymas.",
	"@@ATanH_Extent-Type_tag3@@": "Paskiausia--Naudoti paskutinio įvesties rastro aprėptį nustatant apdorojimo aprėptį.",
	"@@ATanH_Extent-Type_tag4@@": "Sąjunga--Naudoti visų rastrų aprėptį nustatant apdorojimo aprėptį.",
	"@@ATanH_Raster_tag0@@": "Įvestis, kuriai bus skaičiuojamos atvirkščiai proporcingos hiperbolinio tangento reikšmės.",
	"@@Attribute-Table_Raster_tag0@@": "Įvesties rastras.",
	"@@Attribute-Table_Table-Type_tag0@@": "Įvesties atributo lentelę galima įvesti naudojant tipą <strong>Manual</strong>, kai kiekvienai reikšmei priskiriate klasės pavadinimą ir spalvą, arba galite nurodyti esamą lentelę ${.dbf} faile.",
	"@@Band-Arithmetic_Band-Indexes_tag0@@": "Apibrėžkite savo kanalo aritmetinę formulę, jei parametre <strong>Method</strong> pasirinkote <strong>User defined</strong>.",
	"@@Band-Arithmetic_Band-Indexes_tag5@@": "Jei <strong>Method</strong> pasirinkote iš anksto nustatytą indeksą, apibrėžkite tinkamus įvesties rastrinių duomenų rinkinio kanalus, atitinkančius indeksą.",
	"@@Band-Arithmetic_Method_tag0@@": "Kanalo aritmetinio algoritmo, kurį norite taikyti, tipas. Galite apibrėžti savo adaptuotą algoritmą arba pasirinkti iš anksto apibrėžtą indeksą.",
	"@@Band-Arithmetic_Method_tag1@@": "<strong>BAI</strong> – išdegimo teritorijos indeksas",
	"@@Band-Arithmetic_Method_tag2@@": "<strong>CIg</strong> – chlorofilo indeksas – žaliasis",
	"@@Band-Arithmetic_Method_tag3@@": "<strong>CIre</strong> – chlorofilo indeksas – raudonoji briauna",
	"@@Band-Arithmetic_Method_tag4@@": "<strong>Clay Minerals</strong> – molio mineralų santykis",
	"@@Band-Arithmetic_Method_tag5@@": "<strong>EVI</strong> – pagerintas augmenijos indeksas",
	"@@Band-Arithmetic_Method_tag6@@": "<strong>Ferrous Minerals</strong> – geležies mineralų santykis",
	"@@Band-Arithmetic_Method_tag7@@": "<strong>GEMI</strong> – visuotinis aplinkos stebėjimo indeksas",
	"@@Band-Arithmetic_Method_tag8@@": "<strong>GNDVI</strong> – žaliasis normalizuoto skirtumo augmenijos indeksas",
	"@@Band-Arithmetic_Method_tag9@@": "<strong>GVI (Landsat TM)</strong> – žaliosios augmenijos indeksas Landsat TM",
	"@@Band-Arithmetic_Method_tag10@@": "<strong>Iron Oxide</strong> – geležies oksido santykis",
	"@@Band-Arithmetic_Method_tag11@@": "<strong>MNDWI</strong> – modifikuotas normalizuoto skirtumo vandens indeksas",
	"@@Band-Arithmetic_Method_tag12@@": "<strong>MTVI2</strong> – modifikuotas trianguliuotas augmenijos indeksas (antra iteracija)",
	"@@Band-Arithmetic_Method_tag13@@": "<strong>Modified SAVI</strong> – modifikuotas, pagal dirvožemį koreguotas augmenijos indeksas",
	"@@Band-Arithmetic_Method_tag14@@": "<strong>NBR</strong> – normalizuoto išdegimo santykio indeksas",
	"@@Band-Arithmetic_Method_tag15@@": "<strong>NDBI</strong> – normalizuoto skirtumo sankaupų indeksas",
	"@@Band-Arithmetic_Method_tag16@@": "<strong>NDMI</strong> – normalizuoto skirtumo drėgmės indeksas",
	"@@Band-Arithmetic_Method_tag17@@": "<strong>NDSI</strong> – normalizuoto skirtumo sniego indeksas",
	"@@Band-Arithmetic_Method_tag18@@": "<strong>NDVI</strong> – normalizuoto skirtumo augmenijos indeksas",
	"@@Band-Arithmetic_Method_tag19@@": "<strong>NDVIre</strong> – raudonosios briaunos normalizuoto skirtumo augmenijos indeksas",
	"@@Band-Arithmetic_Method_tag20@@": "<strong>NDWI</strong> – normalizuoto skirtumo vandens indeksas",
	"@@Band-Arithmetic_Method_tag21@@": "<strong>PVI</strong> – vertikaliosios augmenijos indeksas",
	"@@Band-Arithmetic_Method_tag22@@": "<strong>RTVICore</strong> – raudonosios briaunos trianguliuotas augmenijos indeksas",
	"@@Band-Arithmetic_Method_tag23@@": "<strong>SAVI</strong> – pagal dirvožemį koreguotas augmenijos indeksas",
	"@@Band-Arithmetic_Method_tag24@@": "<strong>SR</strong> – paprastas santykis",
	"@@Band-Arithmetic_Method_tag25@@": "<strong>SRre</strong> – raudonosios briaunos paprastas santykis",
	"@@Band-Arithmetic_Method_tag26@@": "<strong>Sultan's Formula</strong> – Sultan formulė",
	"@@Band-Arithmetic_Method_tag27@@": "<strong>Transformed SAVI</strong> – transformuotas, pagal dirvožemį koreguotas augmenijos indeksas",
	"@@Band-Arithmetic_Method_tag28@@": "<strong>User Defined</strong> – leidžia apibrėžti adaptuotą aritmetinių veiksmų kanaluose išraišką.",
	"@@Band-Arithmetic_Method_tag29@@": "<strong>VARI</strong> – matomas atmosferos atsparumo indeksas",
	"@@Band-Arithmetic_Method_tag30@@": "<strong>WNDWI</strong> – pasvertas normalizuoto skirtumo vandens indeksas",
	"@@Band-Arithmetic_Raster_tag0@@": "Įvesties rastras.",
	"@@Binary-Thresholding_Raster_tag0@@": "Įvesties rastras.",
	"@@Bitwise-And_Cellsize-Type_tag0@@": "Pasirinkite, koks gardelės dydis bus naudojamas išvesties rastre. Jei visų įvesties gardelių dydžiai vienodi, visos parinktys pateiks vienodus rezultatus.",
	"@@Bitwise-And_Cellsize-Type_tag1@@": "Pirmiausia--Naudoti pirmą įvesties rastrų gardelės dydį.",
	"@@Bitwise-And_Cellsize-Type_tag2@@": "Paskiausia--Naudoti paskutinį įvesties rastrų gardelės dydį.",
	"@@Bitwise-And_Cellsize-Type_tag3@@": "Didžiausias--Naudoti didžiausią įvesties rastrų gardelės dydį. Tai numatytasis nustatymas.",
	"@@Bitwise-And_Cellsize-Type_tag4@@": "Vidutinis--Naudoti vidutinį visų įvesties rastrų gardelės dydį.",
	"@@Bitwise-And_Cellsize-Type_tag5@@": "Mažiausias--Naudoti mažiausią įvesties rastrų gardelės dydį.",
	"@@Bitwise-And_Extent-Type_tag0@@": "Pasirinkite, kokia aprėptis bus naudojama išvesties rastre:",
	"@@Bitwise-And_Extent-Type_tag1@@": "Pirmiausia--Naudoti pirmojo įvesties rastro aprėptį nustatant apdorojimo aprėptį.",
	"@@Bitwise-And_Extent-Type_tag2@@": "Sankirta--Naudoti persidengiančių pikselių aprėptį nustatant apdorojimo aprėptį. Tai numatytasis nustatymas.",
	"@@Bitwise-And_Extent-Type_tag3@@": "Paskiausia--Naudoti paskutinio įvesties rastro aprėptį nustatant apdorojimo aprėptį.",
	"@@Bitwise-And_Extent-Type_tag4@@": "Sąjunga--Naudoti visų rastrų aprėptį nustatant apdorojimo aprėptį.",
	"@@Bitwise-And_Raster_tag0@@": "Pirmoji šioje bitų operacijoje naudojama įvestis.",
	"@@Bitwise-And_Raster_tag1@@": "Šiam parametrui kaip įvestį galima naudoti konstantos reikšmę, jei kitam parametrui nurodytas rastras.",
	"@@Bitwise-And_Raster2_tag0@@": "Antroji šioje bitų operacijoje naudojama įvestis.",
	"@@Bitwise-And_Raster2_tag1@@": "Šiam parametrui kaip įvestį galima naudoti konstantos reikšmę, jei kitam parametrui nurodytas rastras.",
	"@@Bitwise-Left-Shift_Cellsize-Type_tag0@@": "Pasirinkite, koks gardelės dydis bus naudojamas išvesties rastre. Jei visų įvesties gardelių dydžiai vienodi, visos parinktys pateiks vienodus rezultatus.",
	"@@Bitwise-Left-Shift_Cellsize-Type_tag1@@": "Pirmiausia--Naudoti pirmą įvesties rastrų gardelės dydį.",
	"@@Bitwise-Left-Shift_Cellsize-Type_tag2@@": "Paskiausia--Naudoti paskutinį įvesties rastrų gardelės dydį.",
	"@@Bitwise-Left-Shift_Cellsize-Type_tag3@@": "Didžiausias--Naudoti didžiausią įvesties rastrų gardelės dydį. Tai numatytasis nustatymas.",
	"@@Bitwise-Left-Shift_Cellsize-Type_tag4@@": "Vidutinis--Naudoti vidutinį visų įvesties rastrų gardelės dydį.",
	"@@Bitwise-Left-Shift_Cellsize-Type_tag5@@": "Mažiausias--Naudoti mažiausią įvesties rastrų gardelės dydį.",
	"@@Bitwise-Left-Shift_Extent-Type_tag0@@": "Pasirinkite, kokia aprėptis bus naudojama išvesties rastre:",
	"@@Bitwise-Left-Shift_Extent-Type_tag1@@": "Pirmiausia--Naudoti pirmojo įvesties rastro aprėptį nustatant apdorojimo aprėptį.",
	"@@Bitwise-Left-Shift_Extent-Type_tag2@@": "Sankirta--Naudoti persidengiančių pikselių aprėptį nustatant apdorojimo aprėptį. Tai numatytasis nustatymas.",
	"@@Bitwise-Left-Shift_Extent-Type_tag3@@": "Paskiausia--Naudoti paskutinio įvesties rastro aprėptį nustatant apdorojimo aprėptį.",
	"@@Bitwise-Left-Shift_Extent-Type_tag4@@": "Sąjunga--Naudoti visų rastrų aprėptį nustatant apdorojimo aprėptį.",
	"@@Bitwise-Left-Shift_Raster_tag0@@": "Įvestis, su kuria atliekamas poslinkis.",
	"@@Bitwise-Left-Shift_Raster_tag1@@": "Šiam parametrui kaip įvestį galima naudoti konstantos reikšmę, jei kitam parametrui nurodytas rastras.",
	"@@Bitwise-Left-Shift_Raster2_tag0@@": "Įvestis, apibrėžianti, per kiek padėčių bus paslenkami bitai.",
	"@@Bitwise-Left-Shift_Raster2_tag1@@": "Šiam parametrui kaip įvestį galima naudoti konstantos reikšmę, jei kitam parametrui nurodytas rastras.",
	"@@Bitwise-Not_Cellsize-Type_tag0@@": "Pasirinkite, koks gardelės dydis bus naudojamas išvesties rastre. Jei visų įvesties gardelių dydžiai vienodi, visos parinktys pateiks vienodus rezultatus.",
	"@@Bitwise-Not_Cellsize-Type_tag1@@": "Pirmiausia--Naudoti pirmą įvesties rastrų gardelės dydį.",
	"@@Bitwise-Not_Cellsize-Type_tag2@@": "Paskutinis--Naudoti paskutinį įvesties rastrų gardelės dydį.",
	"@@Bitwise-Not_Cellsize-Type_tag3@@": "Didžiausias--Naudoti didžiausią įvesties rastrų gardelės dydį. Tai numatytasis nustatymas.",
	"@@Bitwise-Not_Cellsize-Type_tag4@@": "Vidutinis--Naudoti vidutinį visų įvesties rastrų gardelės dydį.",
	"@@Bitwise-Not_Cellsize-Type_tag5@@": "Mažiausias--Naudoti mažiausią įvesties rastrų gardelės dydį.",
	"@@Bitwise-Not_Extent-Type_tag0@@": "Pasirinkite, kokia aprėptis bus naudojama išvesties rastre:",
	"@@Bitwise-Not_Extent-Type_tag1@@": "Pirmiausia--Naudoti pirmojo įvesties rastro aprėptį nustatant apdorojimo aprėptį.",
	"@@Bitwise-Not_Extent-Type_tag2@@": "Sankirta--Naudoti persidengiančių pikselių aprėptį nustatant apdorojimo aprėptį. Tai numatytasis nustatymas.",
	"@@Bitwise-Not_Extent-Type_tag3@@": "Paskiausia--Naudoti paskutinio įvesties rastro aprėptį nustatant apdorojimo aprėptį.",
	"@@Bitwise-Not_Extent-Type_tag4@@": "Sąjunga--Naudoti visų rastrų aprėptį nustatant apdorojimo aprėptį.",
	"@@Bitwise-Not_Raster_tag0@@": "Įvesties rastras, su kuriuo bus atliekama bitų NE (papildymo) operacija.",
	"@@Bitwise-Or_Cellsize-Type_tag0@@": "Pasirinkite, koks gardelės dydis bus naudojamas išvesties rastre. Jei visų įvesties gardelių dydžiai vienodi, visos parinktys pateiks vienodus rezultatus.",
	"@@Bitwise-Or_Cellsize-Type_tag1@@": "Pirmiausia--Naudoti pirmą įvesties rastrų gardelės dydį.",
	"@@Bitwise-Or_Cellsize-Type_tag2@@": "Paskiausia--Naudoti paskutinį įvesties rastrų gardelės dydį.",
	"@@Bitwise-Or_Cellsize-Type_tag3@@": "Didžiausias--Naudoti didžiausią įvesties rastrų gardelės dydį. Tai numatytasis nustatymas.",
	"@@Bitwise-Or_Cellsize-Type_tag4@@": "Vidutinis--Naudoti vidutinį visų įvesties rastrų gardelės dydį.",
	"@@Bitwise-Or_Cellsize-Type_tag5@@": "Mažiausias--Naudoti mažiausią įvesties rastrų gardelės dydį.",
	"@@Bitwise-Or_Extent-Type_tag0@@": "Pasirinkite, kokia aprėptis bus naudojama išvesties rastre:",
	"@@Bitwise-Or_Extent-Type_tag1@@": "Pirmiausia--Naudoti pirmojo įvesties rastro aprėptį nustatant apdorojimo aprėptį.",
	"@@Bitwise-Or_Extent-Type_tag2@@": "Sankirta--Naudoti persidengiančių pikselių aprėptį nustatant apdorojimo aprėptį. Tai numatytasis nustatymas.",
	"@@Bitwise-Or_Extent-Type_tag3@@": "Paskiausia--Naudoti paskutinio įvesties rastro aprėptį nustatant apdorojimo aprėptį.",
	"@@Bitwise-Or_Extent-Type_tag4@@": "Sąjunga--Naudoti visų rastrų aprėptį nustatant apdorojimo aprėptį.",
	"@@Bitwise-Or_Raster_tag0@@": "Pirmoji šioje bitų operacijoje naudojama įvestis.",
	"@@Bitwise-Or_Raster_tag1@@": "Šiam parametrui kaip įvestį galima naudoti konstantos reikšmę, jei kitam parametrui nurodytas rastras.",
	"@@Bitwise-Or_Raster2_tag0@@": "Antroji šioje bitų operacijoje naudojama įvestis.",
	"@@Bitwise-Or_Raster2_tag1@@": "Šiam parametrui kaip įvestį galima naudoti konstantos reikšmę, jei kitam parametrui nurodytas rastras.",
	"@@Bitwise-Right-Shift_Cellsize-Type_tag0@@": "Pasirinkite, koks gardelės dydis bus naudojamas išvesties rastre. Jei visų įvesties gardelių dydžiai vienodi, visos parinktys pateiks vienodus rezultatus.",
	"@@Bitwise-Right-Shift_Cellsize-Type_tag1@@": "Pirmiausia--Naudoti pirmą įvesties rastrų gardelės dydį.",
	"@@Bitwise-Right-Shift_Cellsize-Type_tag2@@": "Paskiausia--Naudoti paskutinį įvesties rastrų gardelės dydį.",
	"@@Bitwise-Right-Shift_Cellsize-Type_tag3@@": "Didžiausias--Naudoti didžiausią įvesties rastrų gardelės dydį. Tai numatytasis nustatymas.",
	"@@Bitwise-Right-Shift_Cellsize-Type_tag4@@": "Vidutinis--Naudoti vidutinį visų įvesties rastrų gardelės dydį.",
	"@@Bitwise-Right-Shift_Cellsize-Type_tag5@@": "Mažiausias--Naudoti mažiausią įvesties rastrų gardelės dydį.",
	"@@Bitwise-Right-Shift_Extent-Type_tag0@@": "Pasirinkite, kokia aprėptis bus naudojama išvesties rastre:",
	"@@Bitwise-Right-Shift_Extent-Type_tag1@@": "Pirmiausia--Naudoti pirmojo įvesties rastro aprėptį nustatant apdorojimo aprėptį.",
	"@@Bitwise-Right-Shift_Extent-Type_tag2@@": "Sankirta--Naudoti persidengiančių pikselių aprėptį nustatant apdorojimo aprėptį. Tai numatytasis nustatymas.",
	"@@Bitwise-Right-Shift_Extent-Type_tag3@@": "Paskiausia--Naudoti paskutinio įvesties rastro aprėptį nustatant apdorojimo aprėptį.",
	"@@Bitwise-Right-Shift_Extent-Type_tag4@@": "Sąjunga--Naudoti visų rastrų aprėptį nustatant apdorojimo aprėptį.",
	"@@Bitwise-Right-Shift_Raster_tag0@@": "Įvestis, su kuria atliekamas poslinkis.",
	"@@Bitwise-Right-Shift_Raster_tag1@@": "Šiam parametrui kaip įvestį galima naudoti konstantos reikšmę, jei kitam parametrui nurodytas rastras.",
	"@@Bitwise-Right-Shift_Raster2_tag0@@": "Įvestis, apibrėžianti, per kiek padėčių bus paslenkami bitai.",
	"@@Bitwise-Right-Shift_Raster2_tag1@@": "Šiam parametrui kaip įvestį galima naudoti konstantos reikšmę, jei kitam parametrui nurodytas rastras.",
	"@@Bitwise-Xor_Cellsize-Type_tag0@@": "Pasirinkite, koks gardelės dydis bus naudojamas išvesties rastre. Jei visų įvesties gardelių dydžiai vienodi, visos parinktys pateiks vienodus rezultatus.",
	"@@Bitwise-Xor_Cellsize-Type_tag1@@": "Pirmiausia--Naudoti pirmą įvesties rastrų gardelės dydį.",
	"@@Bitwise-Xor_Cellsize-Type_tag2@@": "Paskiausia--Naudoti paskutinį įvesties rastrų gardelės dydį.",
	"@@Bitwise-Xor_Cellsize-Type_tag3@@": "Didžiausias--Naudoti didžiausią įvesties rastrų gardelės dydį. Tai numatytasis nustatymas.",
	"@@Bitwise-Xor_Cellsize-Type_tag4@@": "Vidutinis--Naudoti vidutinį visų įvesties rastrų gardelės dydį.",
	"@@Bitwise-Xor_Cellsize-Type_tag5@@": "Mažiausias--Naudoti mažiausią įvesties rastrų gardelės dydį.",
	"@@Bitwise-Xor_Extent-Type_tag0@@": "Pasirinkite, kokia aprėptis bus naudojama išvesties rastre:",
	"@@Bitwise-Xor_Extent-Type_tag1@@": "Pirmiausia--Naudoti pirmojo įvesties rastro aprėptį nustatant apdorojimo aprėptį.",
	"@@Bitwise-Xor_Extent-Type_tag2@@": "Sankirta--Naudoti persidengiančių pikselių aprėptį nustatant apdorojimo aprėptį. Tai numatytasis nustatymas.",
	"@@Bitwise-Xor_Extent-Type_tag3@@": "Paskiausia--Naudoti paskutinio įvesties rastro aprėptį nustatant apdorojimo aprėptį.",
	"@@Bitwise-Xor_Extent-Type_tag4@@": "Sąjunga--Naudoti visų rastrų aprėptį nustatant apdorojimo aprėptį.",
	"@@Bitwise-Xor_Raster_tag0@@": "Pirmoji šioje bitų operacijoje naudojama įvestis.",
	"@@Bitwise-Xor_Raster_tag1@@": "Šiam parametrui kaip įvestį galima naudoti konstantos reikšmę, jei kitam parametrui nurodytas rastras.",
	"@@Bitwise-Xor_Raster2_tag0@@": "Antroji šioje bitų operacijoje naudojama įvestis.",
	"@@Bitwise-Xor_Raster2_tag1@@": "Šiam parametrui kaip įvestį galima naudoti konstantos reikšmę, jei kitam parametrui nurodytas rastras.",
	"@@Boolean-and_Cellsize-Type_tag0@@": "Pasirinkite, koks gardelės dydis bus naudojamas išvesties rastre. Jei visų įvesties gardelių dydžiai vienodi, visos parinktys pateiks vienodus rezultatus.",
	"@@Boolean-and_Cellsize-Type_tag1@@": "Pirmiausia--Naudoti pirmą įvesties rastrų gardelės dydį.",
	"@@Boolean-and_Cellsize-Type_tag2@@": "Paskiausia--Naudoti paskutinį įvesties rastrų gardelės dydį.",
	"@@Boolean-and_Cellsize-Type_tag3@@": "Didžiausias--Naudoti didžiausią įvesties rastrų gardelės dydį. Tai numatytasis nustatymas.",
	"@@Boolean-and_Cellsize-Type_tag4@@": "Vidutinis--Naudoti vidutinį visų įvesties rastrų gardelės dydį.",
	"@@Boolean-and_Cellsize-Type_tag5@@": "Mažiausias--Naudoti mažiausią įvesties rastrų gardelės dydį.",
	"@@Boolean-and_Extent-Type_tag0@@": "Pasirinkite, kokia aprėptis bus naudojama išvesties rastre:",
	"@@Boolean-and_Extent-Type_tag1@@": "Pirmiausia--Naudoti pirmojo įvesties rastro aprėptį nustatant apdorojimo aprėptį.",
	"@@Boolean-and_Extent-Type_tag2@@": "Sankirta--Naudoti persidengiančių pikselių aprėptį nustatant apdorojimo aprėptį. Tai numatytasis nustatymas.",
	"@@Boolean-and_Extent-Type_tag3@@": "Paskiausia--Naudoti paskutinio įvesties rastro aprėptį nustatant apdorojimo aprėptį.",
	"@@Boolean-and_Extent-Type_tag4@@": "Sąjunga--Naudoti visų rastrų aprėptį nustatant apdorojimo aprėptį.",
	"@@Boolean-and_Raster_tag0@@": "Pirmoji šioje loginėje operacijoje naudojama įvestis.",
	"@@Boolean-and_Raster_tag1@@": "Šiam parametrui kaip įvestį galima naudoti konstantos reikšmę, jei kitam parametrui nurodytas rastras.",
	"@@Boolean-and_Raster2_tag0@@": "Antroji šioje loginėje operacijoje naudojama įvestis.",
	"@@Boolean-and_Raster2_tag1@@": "Šiam parametrui kaip įvestį galima naudoti konstantos reikšmę, jei kitam parametrui nurodytas rastras.",
	"@@Boolean-Not_Cellsize-Type_tag0@@": "Pasirinkite, koks gardelės dydis bus naudojamas išvesties rastre. Jei visų įvesties gardelių dydžiai vienodi, visos parinktys pateiks vienodus rezultatus.",
	"@@Boolean-Not_Cellsize-Type_tag1@@": "Pirmiausia--Naudoti pirmą įvesties rastrų gardelės dydį.",
	"@@Boolean-Not_Cellsize-Type_tag2@@": "Paskiausia--Naudoti paskutinį įvesties rastrų gardelės dydį.",
	"@@Boolean-Not_Cellsize-Type_tag3@@": "Didžiausias--Naudoti didžiausią įvesties rastrų gardelės dydį. Tai numatytasis nustatymas.",
	"@@Boolean-Not_Cellsize-Type_tag4@@": "Vidutinis--Naudoti vidutinį visų įvesties rastrų gardelės dydį.",
	"@@Boolean-Not_Cellsize-Type_tag5@@": "Mažiausias--Naudoti mažiausią įvesties rastrų gardelės dydį.",
	"@@Boolean-Not_Extent-Type_tag0@@": "Pasirinkite, kokia aprėptis bus naudojama išvesties rastre:",
	"@@Boolean-Not_Extent-Type_tag1@@": "Pirmiausia--Naudoti pirmojo įvesties rastro aprėptį nustatant apdorojimo aprėptį.",
	"@@Boolean-Not_Extent-Type_tag2@@": "Sankirta--Naudoti persidengiančių pikselių aprėptį nustatant apdorojimo aprėptį. Tai numatytasis nustatymas.",
	"@@Boolean-Not_Extent-Type_tag3@@": "Paskutinė--Naudoti paskutinio įvesties rastro aprėptį nustatant apdorojimo aprėptį.",
	"@@Boolean-Not_Extent-Type_tag4@@": "Sąjunga--Naudoti visų rastrų aprėptį nustatant apdorojimo aprėptį.",
	"@@Boolean-Not_Raster_tag0@@": "Pirmoji šioje loginėje operacijoje naudojama įvestis.",
	"@@Boolean-Or_Cellsize-Type_tag0@@": "Pasirinkite, koks gardelės dydis bus naudojamas išvesties rastre. Jei visų įvesties gardelių dydžiai vienodi, visos parinktys pateiks vienodus rezultatus.",
	"@@Boolean-Or_Cellsize-Type_tag1@@": "Pirmiausia--Naudoti pirmą įvesties rastrų gardelės dydį.",
	"@@Boolean-Or_Cellsize-Type_tag2@@": "Paskiausia--Naudoti paskutinį įvesties rastrų gardelės dydį.",
	"@@Boolean-Or_Cellsize-Type_tag3@@": "Didžiausias--Naudoti didžiausią įvesties rastrų gardelės dydį. Tai numatytasis nustatymas.",
	"@@Boolean-Or_Cellsize-Type_tag4@@": "Vidutinis--Naudoti vidutinį visų įvesties rastrų gardelės dydį.",
	"@@Boolean-Or_Cellsize-Type_tag5@@": "Mažiausias--Naudoti mažiausią įvesties rastrų gardelės dydį.",
	"@@Boolean-Or_Extent-Type_tag0@@": "Pasirinkite, kokia aprėptis bus naudojama išvesties rastre:",
	"@@Boolean-Or_Extent-Type_tag1@@": "Pirmiausia--Naudoti pirmojo įvesties rastro aprėptį nustatant apdorojimo aprėptį.",
	"@@Boolean-Or_Extent-Type_tag2@@": "Sankirta--Naudoti persidengiančių pikselių aprėptį nustatant apdorojimo aprėptį. Tai numatytasis nustatymas.",
	"@@Boolean-Or_Extent-Type_tag3@@": "Paskiausia--Naudoti paskutinio įvesties rastro aprėptį nustatant apdorojimo aprėptį.",
	"@@Boolean-Or_Extent-Type_tag4@@": "Sąjunga--Naudoti visų rastrų aprėptį nustatant apdorojimo aprėptį.",
	"@@Boolean-Or_Raster_tag0@@": "Pirmoji šioje loginėje operacijoje naudojama įvestis.",
	"@@Boolean-Or_Raster_tag1@@": "Šiam parametrui kaip įvestį galima naudoti konstantos reikšmę, jei kitam parametrui nurodytas rastras.",
	"@@Boolean-Or_Raster2_tag0@@": "Antroji šioje loginėje operacijoje naudojama įvestis.",
	"@@Boolean-Or_Raster2_tag1@@": "Šiam parametrui kaip įvestį galima naudoti konstantos reikšmę, jei kitam parametrui nurodytas rastras.",
	"@@Boolean-Xor_Cellsize-Type_tag0@@": "Pasirinkite, koks gardelės dydis bus naudojamas išvesties rastre. Jei visų įvesties gardelių dydžiai vienodi, visos parinktys pateiks vienodus rezultatus.",
	"@@Boolean-Xor_Cellsize-Type_tag1@@": "Pirmiausia--Naudoti pirmą įvesties rastrų gardelės dydį.",
	"@@Boolean-Xor_Cellsize-Type_tag2@@": "Paskiausia--Naudoti paskutinį įvesties rastrų gardelės dydį.",
	"@@Boolean-Xor_Cellsize-Type_tag3@@": "Didžiausias--Naudoti didžiausią įvesties rastrų gardelės dydį. Tai numatytasis nustatymas.",
	"@@Boolean-Xor_Cellsize-Type_tag4@@": "Vidutinis--Naudoti vidutinį visų įvesties rastrų gardelės dydį.",
	"@@Boolean-Xor_Cellsize-Type_tag5@@": "Mažiausias--Naudoti mažiausią įvesties rastrų gardelės dydį.",
	"@@Boolean-Xor_Extent-Type_tag0@@": "Pasirinkite, kokia aprėptis bus naudojama išvesties rastre:",
	"@@Boolean-Xor_Extent-Type_tag1@@": "Pirmiausia--Naudoti pirmojo įvesties rastro aprėptį nustatant apdorojimo aprėptį.",
	"@@Boolean-Xor_Extent-Type_tag2@@": "Sankirta--Naudoti persidengiančių pikselių aprėptį nustatant apdorojimo aprėptį. Tai numatytasis nustatymas.",
	"@@Boolean-Xor_Extent-Type_tag3@@": "Paskiausia--Naudoti paskutinio įvesties rastro aprėptį nustatant apdorojimo aprėptį.",
	"@@Boolean-Xor_Extent-Type_tag4@@": "Sąjunga--Naudoti visų rastrų aprėptį nustatant apdorojimo aprėptį.",
	"@@Boolean-Xor_Raster_tag0@@": "Pirmoji šioje loginėje operacijoje naudojama įvestis.",
	"@@Boolean-Xor_Raster_tag1@@": "Šiam parametrui kaip įvestį galima naudoti konstantos reikšmę, jei kitam parametrui nurodytas rastras.",
	"@@Boolean-Xor_Raster2_tag0@@": "Antroji šioje loginėje operacijoje naudojama įvestis.",
	"@@Boolean-Xor_Raster2_tag1@@": "Šiam parametrui kaip įvestį galima naudoti konstantos reikšmę, jei kitam parametrui nurodytas rastras.",
	"@@Buffered_Raster_tag0@@": "Įvesties rastras, kuris bus saugomas atmintyje.",
	"@@Calculator_Cellsize-Type_tag0@@": "Gardelės dydis, naudojamas kuriant išvesties rastrą.",
	"@@Calculator_Cellsize-Type_tag1@@": "Išvesties gardelės dydį galite pasirinkti iš šių išskleidžiamojo sąrašo variantų:",
	"@@Calculator_Cellsize-Type_tag2@@": "<strong>First Of</strong>--Pirmojo rastrinio kintamojo gardelės dydis.",
	"@@Calculator_Cellsize-Type_tag4@@": "<strong>Min Of</strong>--Minimalus įvesties rastrų gardelės dydis.",
	"@@Calculator_Cellsize-Type_tag6@@": "<strong>Max Of</strong>--Maksimalus įvesties rastrų gardelės dydis.",
	"@@Calculator_Cellsize-Type_tag8@@": "<strong>Mean Of</strong>--Vidutinis įvesties rastrų gardelės dydis.",
	"@@Calculator_Cellsize-Type_tag10@@": "<strong>Last Of</strong>--Paskutinio rastrinio kintamojo gardelės dydis.",
	"@@Calculator_Cellsize-Type_tag12@@": "Numatytasis pasirinkimas yra <strong>Max Of</strong>.",
	"@@Calculator_Expression_tag0@@": "Sukurkite algebros išraišką įvesties rastro erdvinei analizei atlikti.",
	"@@Calculator_Expression_tag1@@": "Išraiškai kurti galima iškviesti visas galimas matematines funkcijas. Toliau pateikti galimi operatoriai.",
	"@@Calculator_Expression_tag2@@": "Aritmetinės operacijos",
	"@@Calculator_Expression_tag3@@": "Sudėtis: +",
	"@@Calculator_Expression_tag4@@": "Dalyba: /",
	"@@Calculator_Expression_tag5@@": "Modulis: %",
	"@@Calculator_Expression_tag6@@": "Daugyba: *",
	"@@Calculator_Expression_tag7@@": "Kėlimas laipsniu: **",
	"@@Calculator_Expression_tag8@@": "Atimtis: -",
	"@@Calculator_Expression_tag9@@": "Loginės operacijos",
	"@@Calculator_Expression_tag10@@": "Loginis IR: &&",
	"@@Calculator_Expression_tag11@@": "Loginis ARBA: ||",
	"@@Calculator_Expression_tag12@@": "Sąryšių operacijos",
	"@@Calculator_Expression_tag13@@": "Lygu: ==",
	"@@Calculator_Expression_tag14@@": "Daugiau nei: >",
	"@@Calculator_Expression_tag15@@": "Daugiau arba lygu: >=",
	"@@Calculator_Expression_tag16@@": "Mažiau nei: <",
	"@@Calculator_Expression_tag17@@": "Mažiau arba lygu: <=",
	"@@Calculator_Expression_tag18@@": "Nelygu: !=",
	"@@Calculator_Expression_tag19@@": "Papildomos operacijos",
	"@@Calculator_Expression_tag20@@": "Dviejų rastrų minimumas kiekvienam pikseliui: min(a,b)",
	"@@Calculator_Expression_tag21@@": "Dviejų rastrų maksimumas kiekvienam pikseliui: max(a,b)",
	"@@Calculator_Expression_tag22@@": "Štai keli išraiškų pavyzdžiai:",
	"@@Calculator_Expression_tag23@@": "Paprastas sąlyginis teiginys: rastre (žymimame T) randa už 4 000 pėdų didesnes aukščio reikšmes ir toms teritorijoms suteikia reikšmę 1, o visoms kitoms – 0.",
	"@@Calculator_Expression_tag24@@": "Con(T > 4000, 1, 0)",
	"@@Calculator_Expression_tag25@@": "Integruotas sąlyginis teiginys: randa teritorijas, kur pasvirimas (pažymėtas b1)) mažesnis nei 10 laipsnių, o NDVI (žymimas b2) didesnis nei 0,5, ir suteikia toms teritorijoms reikšmę 1. Visoms kitoms teritorijoms priskiriama reikšmė 2, jei pasvirimas didesnis nei 10 laipsnių, o aukštis (žymimas b3) viršija 2 500 pėdų. Visoms kitoms teritorijoms priskiriama reikšmė 3.",
	"@@Calculator_Expression_tag26@@": "Con((b1 < 10 && b2 > .5, 1, Con(b1 > 10 && b3 > 2500, 2, 3)))",
	"@@Calculator_extenttype_tag0@@": "<p>Pasirinkite, kokią aprėptį naudoti išvesties rastre:</p><ul><li><p>Pirmoji – naudoti pirmojo įvesties rastro aprėptį nustatant apdorojimo aprėptį.</p></li><li>Sankirta – naudoti persidengiančių pikselių aprėptį nustatant apdorojimo aprėptį. Tai yra numatytasis nustatymas.</li><li>Sąjunga – naudoti visų rastrų aprėptį, nustatant apdorojimo aprėptį.</li><li>Paskutinė – naudoti paskutinio įvesties rastro aprėptį nustatant apdorojimo aprėptį.</li></ul>",
	"@@Calculator_Raster-Variables_tag0@@": "Naudotojo nustatytas kintamojo pavadinimas ir įvesties rastras.",
	"@@Classify_Input-Definition-File_tag0@@": "Įvesties Esri klasifikatoriaus aprašo (${.ecd}) failas, kuriame yra statistikos ir kita nurodyto duomenų rinkinio, klasifikatoriaus ir pasirinktų atributų klasifikacijos informacija.",
	"@@Classify_Raster_tag0@@": "Klasifikuotinas rastrinis duomenų rinkinys.",
	"@@Classify_Raster2_tag0@@": "Neprivalomas papildomas rastrinis duomenų rinkinys, įtrauktinas į klasifikatorių, pavyzdžiui, segmentuotas vaizdas, daugiaspektris vaizdas arba aukščio duomenys. Tai naudojama siekiant sukurti patikimesnį jūsų duomenų rinkinio klasifikavimo aprašą. Šio parametro rastrinis duomenų rinkinys turi atitikti tą, kuris naudotas kuriant įvesties Esri klasifikatoriaus aprašo failą.",
	"@@Clip_Clipping-Geometry-or-Raster_tag0@@": "Kirpimo aprėpčiai nurodyti galima naudoti tokias parinktis:",
	"@@Clip_Clipping-Geometry-or-Raster_tag1@@": "<strong>Clipping Raster</strong>--Iškerpamo rastro aprėptis",
	"@@Clip_Clipping-Geometry-or-Raster_tag3@@": "<strong>Custom Extent</strong>--X ir Y mažiausios ir didžiausios koordinatės",
	"@@Clip_Clipping-Geometry-or-Raster_tag5@@": "<strong>Current Map Extent</strong>--Esamo žemėlapio atvaizdavimo aprėptis",
	"@@Clip_Clipping-Raster_tag0@@": "Kirpimui naudojamas rastrinis sluoksnis.",
	"@@Clip_Clipping-Type_tag0@@": "Nurodykite, ar norite išlaikyti teritoriją iškirpimo geometrijoje, ar už jos ribų.",
	"@@Clip_Clipping-Type_tag1@@": "<strong>Clip Inside</strong>--Į iškirpimo aprėptis patenkantys vaizdai bus pašalinti.",
	"@@Clip_Clipping-Type_tag3@@": "<strong>Clip Outside</strong>--Į iškirpimo aprėptis nepatenkantys vaizdai bus pašalinti.",
	"@@Clip_Custom-Extent_tag0@@": "Nurodykite keturias koordinates, apibrėžiančias rastrui iškirpti naudojamo apriboto ploto aprėptį.",
	"@@Clip_Output-Extent_tag0@@": "Esamos iškirpimo aprėpties x ir y koordinatės.",
	"@@Clip_Output-Extent_tag1@@": "Mygtukas <strong>Capture Current Map Extent</strong> naudoja aktyvaus žemėlapio atvaizdavimo aprėptį.",
	"@@Clip_Raster_tag0@@": "Įvesties rastrinis sluoksnis.",
	"@@Clip_Use-Input-Features-for-Clipping-Geometry_tag0@@": "Pasirinkus šią parinktį, duomenys iškerpami pagal nurodytos elementų klasės geometriją.",
	"@@Clip_Use-Input-Features-for-Clipping-Geometry_tag1@@": "Nepažymėta--Funkcija naudoja iškirpimo geometriją, kurią nurodo <strong>Rectangle</strong>. Tai numatytasis nustatymas.",
	"@@Clip_Use-Input-Features-for-Clipping-Geometry_tag4@@": "Pažymėta--Funkcija naudoja elementų klasės apibrėžtą iškirpimo geometriją.",
	"@@Color-Model-Conversion_Conversion-Type_tag0@@": "Vykdytinas spalvų konvertavimo tipas:",
	"@@Color-Model-Conversion_Conversion-Type_tag1@@": "Iš HSV į RGB",
	"@@Color-Model-Conversion_Conversion-Type_tag2@@": "Iš RGB į HSV",
	"@@Color-Model-Conversion_Raster_tag0@@": "Įvesties rastras.",
	"@@Colormap_Color-Ramp_tag0@@": "Pasirinkite jau esančią spalvų seką.",
	"@@Colormap_Color-Scheme-Type_tag0@@": "Pasirinkite spalvų schemą, kurią naudojant bus atvaizduojamas jūsų įvesties rastras",
	"@@Colormap_Color-Scheme-Type_tag1@@": "Spalvų seka--Naudoja spalvų seką.",
	"@@Colormap_Color-Scheme-Type_tag2@@": "Spalvų žemėlapis--Naudoja jau esantį spalvų žemėlapį.",
	"@@Colormap_Colormap_tag0@@": "Išskleidžiamajame sąraše yra tokie numatytieji spalvų žemėlapiai:",
	"@@Colormap_Colormap_tag1@@": "Aukštis--Spalvų žemėlapis, pamažu kintantis nuo žydros iki violetinės ir iki juodos.",
	"@@Colormap_Colormap_tag2@@": "Pilkas--Spalvų žemėlapis, pamažu kintantis nuo juodos iki baltos.",
	"@@Colormap_Colormap_tag7@@": "Šešėlių rinkinys – pilkų atspalvių žemėlapis, skirtas reljefo paviršiaus 3D vaizdui, atsižvelgiant į santykinę saulės padėtį, kad vaizdas būtų šešėliuotas.",
	"@@Colormap_Colormap_tag3@@": "NDVI--Augmeniją vizualizuojantis spalvų žemėlapis. Nuliui artimos reikšmės žymimos mėlyna spalva. Mažos reikšmės žymimos ruda spalva. Tada spalvos pamažu kinta nuo raudonos iki oranžinės, geltonos, žalios ir juodos, augmenijos indeksui kintant nuo mažo iki didelio.",
	"@@Colormap_Colormap_tag4@@": "NDVI2--Augmeniją vizualizuojantis spalvų žemėlapis. Mažos reikšmės kinta nuo baltos iki žalios. Tada spalvos pamažu kinta nuo pilkos iki ryškiais violetinės, violetinės, tamsiai mėlynos ir juodos, augmenijos indeksui kintant nuo mažo iki didelio.",
	"@@Colormap_Colormap_tag5@@": "NDVI3--Augmeniją vizualizuojantis spalvų žemėlapis. Nuliui artimos reikšmės žymimos mėlyna spalva. Tada spalvos pamažu kinta nuo raudonos iki oranžinės ir žalios, augmenijos indeksui kintant nuo mažo iki didelio.",
	"@@Colormap_Colormap_tag6@@": "Atsitiktinis--Atsitiktinis spalvų žemėlapis.",
	"@@Colormap_Raster_tag0@@": "Įvesties rastras.",
	"@@Colormap-To-RGB_Raster_tag0@@": "Įvesties spalvų žemėlapio rastras.",
	"@@Complex_Raster_tag0@@": "Įvesties rastras.",
	"@@Composite-Bands_Rasters_tag0@@": "Rastro įvestį pasirinkite naudodamiesi išskleidžiamuoju sąrašu arba mygtuku <strong>Browse</strong>.",
	"@@Composite-Bands_cellsizetype_tag0@@": "<p>Pasirinkite, kokį gardelės dydį naudoti išvesties rastre. Jei visų įvesties gardelių dydžiai yra vienodi, visos parinktys duos tokius pačius rezultatus.</p><ul><li>Pirmas – naudoti pirmą įvesties rastrų gardelės dydį.</li><li>Mažiausias – naudoti mažiausią įvesties rastrų gardelės dydį.</li><li>Didžiausias – naudoti didžiausią įvesties rastrų gardelės dydį. Tai yra numatytasis nustatymas.</li><li>Vidutinis – naudoti vidutinį visų įvesties rastrų gardelės dydį.</li><li>Paskutinis – naudoti paskutinį įvesties rastrų gardelės dydį.</li></ul>",
	"@@Con-function_Cellsize-Type_tag0@@": "Pasirinkite, koks gardelės dydis bus naudojamas išvesties rastre. Jei visų įvesties gardelių dydžiai vienodi, visos parinktys pateiks vienodus rezultatus.",
	"@@Con-function_Cellsize-Type_tag1@@": "Pirmiausia--Naudoti pirmą įvesties rastrų gardelės dydį.",
	"@@Con-function_Cellsize-Type_tag2@@": "Paskiausia--Naudoti paskutinį įvesties rastrų gardelės dydį.",
	"@@Con-function_Cellsize-Type_tag3@@": "Didžiausias--Naudoti didžiausią įvesties rastrų gardelės dydį. Tai numatytasis nustatymas.",
	"@@Con-function_Cellsize-Type_tag4@@": "Vidutinis--Naudoti vidutinį visų įvesties rastrų gardelės dydį.",
	"@@Con-function_Cellsize-Type_tag5@@": "Mažiausias--Naudoti mažiausią įvesties rastrų gardelės dydį.",
	"@@Con_Extent-Type_tag0@@": "Pasirinkite, kokia aprėptis bus naudojama išvesties rastre:",
	"@@Con_Extent-Type_tag1@@": "Pirmiausia--Naudoti pirmojo įvesties rastro aprėptį nustatant apdorojimo aprėptį.",
	"@@Con_Extent-Type_tag2@@": "Sankirta--Naudoti persidengiančių pikselių aprėptį nustatant apdorojimo aprėptį. Tai numatytasis nustatymas.",
	"@@Con_Extent-Type_tag3@@": "Paskiausia--Naudoti paskutinio įvesties rastro aprėptį nustatant apdorojimo aprėptį.",
	"@@Con_Extent-Type_tag4@@": "Sąjunga--Naudoti visų rastrų aprėptį nustatant apdorojimo aprėptį.",
	"@@Con_False-Raster_tag0@@": "Įvestis, kurios reikšmės bus naudojamos kaip išvesties pikselių reikšmės, jei sąlyga bus neteisinga. Tai gali būti sveikasis skaičius, slankiojo kablelio rastras arba konstantos reikšmė.",
	"@@Con_Raster_tag0@@": "Įvesties rastras, atitinkantis loginės matematinės rastro funkcijos loginės operacijos rezultatą. Reikšmės bus 1 (jei teisinga) arba 0 (jei neteisinga). Tai gali būti sveikasis skaičius arba slankiojo kablelio rastras.",
	"@@Con_True-Raster_tag0@@": "Įvestis, kurios reikšmės bus naudojamos kaip išvesties pikselių reikšmės, jei sąlyga bus teisinga. Tai gali būti sveikasis skaičius, slankiojo kablelio rastras arba konstantos reikšmė.",
	"@@Constant_Constant_tag0@@": "Konstantos reikšmė, kuri bus pridedama į virtualų rastrą.",
	"@@Constant_Raster-Info_tag0@@": "Naudokite mygtuką <strong>Load template raster</strong>, jei norite įkelti šabloną iš katalogo arba portalo.",
	"@@Contour_Adaptive-Smoothing_tag0@@": "Kontūro linijai taikytino glodinimo kiekis. Numatytoji reikšmė yra 2,5.",
	"@@Contour_Adaptive-Smoothing_tag1@@": "Mažesnė reikšmė sukuria kontūro liniją su daugiau grūdėtumo ir mažiau glodinimo, o didesnė reikšmė sukuria kontūro liniją su daugiau glodinimo, atrodančią mažiau dantytai.",
	"@@Contour_Contour-Interval_tag0@@": "Kontūro linijų aukščio skirtumas.",
	"@@Contour_Contour-Interval_tag1@@": "Palyginti plokščiose teritorijose naudojamas mažas kontūro intervalas, o didesni kontūro intervalai naudojami stipriai kintamose ar kalnuotose teritorijose.",
	"@@Contour_Contour-Type_tag0@@": "Kuriamo kontūro tipas:",
	"@@Contour_Contour-Type_tag1@@": "<strong>Contour fill</strong>--Užpildo plotą tarp kiekvienos kontūro linijos apytiksle aukščio reikšme.",
	"@@Contour_Contour-Type_tag3@@": "<strong>Contour lines</strong>--Sujungia vienodo aukščio taškus ir sukuria liniją, reprezentuojančią pastovų aukštį.",
	"@@Contour_Contour-Type_tag5@@": "<strong>Smooth surface only</strong>--Glotnina įvesties aukščio sluoksnį, tačiau nesukuria kontūrų.",
	"@@Contour_Nth-Contour-Line-In-Bold_tag0@@": "Indekso kontūras, kurį reprezentuoja stora linija.",
	"@@Contour_Nth-Contour-Line-In-Bold_tag1@@": "Numatytoji reikšmė yra 5; todėl kas penkta kontūro linija paryškinta.",
	"@@Contour_Number-Of-Contours_tag0@@": "Atvaizdavimui generuotinų kontūrų skaičius. Ši funkcija dinamiškai koreguoja kontūro intervalą, kad teritorija tilptų ekrane, palaikydama standartizuotus intervalus, pavyzdžiui, 1, 5, 10 ir t. t.",
	"@@Contour_Raster_tag0@@": "Vienas kanalo rastrinių aukščio duomenų rinkinys.",
	"@@Contour_Z-Base_tag0@@": "Bazinė kontūro reikšmė. Kontūrai generuojami pagal poreikį didesnių ir aukštesnių reikšmių nei ši, kad padengtų visą įvesties rastro reikšmių intervalą. Numatytoji reikšmė yra 0.",
	"@@Contour_Z-Base_tag1@@": "Reikšmė, lygi 0, dažnai reprezentuoja vidutinį jūros lygį, atsižvelgiant į šaltinio aukščio duomenų rinkinį.",
	"@@Contour_Z-Factor_tag0@@": "Matavimo vienetų konvertavimo daugiklis, naudojamas generuojant kontūrus. Numatytoji reikšmė yra 1.",
	"@@Contour_Z-Factor_tag1@@": "Kontūro linijos generuojamos pagal įvesties rastro z reikšmes, kurios dažnai matuojamos tokiais vienetais kaip metrai ar pėdos. Naudojant numatytąją reikšmę, lygią 1, kontūrai bus tokių pačių matavimo vienetų kaip ir įvesties rastro z reikšmės. Jei norite sukurti kontūrus naudodami kitokį matavimo vienetą nei z reikšmių, nustatykite atitinkamą z faktoriaus reikšmę. Atkreipkite dėmesį, kad šiam įrankiui nėra būtinas žemės x, y ir paviršiaus z matavimo vienetų vienodumas.",
	"@@Contour_Z-Factor_tag2@@": "Pavyzdžiui, jei aukščio reikšmės jūsų įvesties rastre pateiktos pėdomis, tačiau norite generuoti kontūrus metrais, nustatykite z faktoriaus reikšmę kaip 0,3048 (kadangi 1 pėda =0,3048 metro).",
	"@@Contrast-and-Brightness_Brightness-Offset_tag0@@": "Rastrinio sluoksnio ryškumo koregavimas.",
	"@@Contrast-and-Brightness_Brightness-Offset_tag1@@": "Ryškumo poslinkį galite modifikuoti naudodami slankiklį arba įvesdami reikšmę.",
	"@@Contrast-and-Brightness_Contrast-Offset_tag0@@": "Rastrinio sluoksnio kontrasto koregavimas.",
	"@@Contrast-and-Brightness_Contrast-Offset_tag1@@": "Kontrasto poslinkį galite modifikuoti naudodami slankiklį arba įvesdami reikšmę.",
	"@@Contrast-and-Brightness_Raster_tag0@@": "Įvesties rastras, kuriame redaguojamas ryškumas ir kontrastas.",
	"@@Convolution_kernel_tag0@@": "<p>Šioje lentelėje rodoma, koks svoris bus suteiktas kiekvienam pikseliui filtravimo proceso metu. Šią lentelę galima redaguoti, jei parametre <strong>Tipas</strong> pasirinksite <strong>Naudotojo nustatytas</strong>.</p>",
	"@@Convolution_Raster_tag0@@": "Įvesties rastro duomenų rinkinys.",
	"@@Convolution_Type_tag0@@": "Pasirinkite norimą vykdyti filtravimo tipą Yra parinkčių, leidžiančių paryškinti, sulieti ir aptikti briaunas, arba galite patys apibrėžti branduolio pagrindo filtrą",
	"@@Corridor_Distance-Raster-1_tag0@@": "Pirmasis įvesties atstumo rastras. Jį turi sudaryti surinkti sąnaudų atstumo išvesties duomenys iš funkcijų Sąnaudų atstumas arba Kelio atstumas.",
	"@@Corridor_Distance-Raster-2_tag0@@": "Antrasis įvesties atstumo rastras. Jį turi sudaryti surinkti sąnaudų atstumo išvesties duomenys iš funkcijų Sąnaudų atstumas arba Kelio atstumas.",
	"@@Cos_Cellsize-Type_tag0@@": "Pasirinkite, koks gardelės dydis bus naudojamas išvesties rastre. Jei visų įvesties gardelių dydžiai vienodi, visos parinktys pateiks vienodus rezultatus.",
	"@@Cos_Cellsize-Type_tag1@@": "Pirmiausia--Naudoti pirmą įvesties rastrų gardelės dydį.",
	"@@Cos_Cellsize-Type_tag2@@": "Paskiausia--Naudoti paskutinį įvesties rastrų gardelės dydį.",
	"@@Cos_Cellsize-Type_tag3@@": "Didžiausias--Naudoti didžiausią įvesties rastrų gardelės dydį. Tai numatytasis nustatymas.",
	"@@Cos_Cellsize-Type_tag4@@": "Vidutinis--Naudoti vidutinį visų įvesties rastrų gardelės dydį.",
	"@@Cos_Cellsize-Type_tag5@@": "Mažiausias--Naudoti mažiausią įvesties rastrų gardelės dydį.",
	"@@Cos_Extent-Type_tag0@@": "Pasirinkite, kokia aprėptis bus naudojama išvesties rastre:",
	"@@Cos_Extent-Type_tag1@@": "Pirmiausia--Naudoti pirmojo įvesties rastro aprėptį nustatant apdorojimo aprėptį.",
	"@@Cos_Extent-Type_tag2@@": "Sankirta--Naudoti persidengiančių pikselių aprėptį nustatant apdorojimo aprėptį. Tai numatytasis nustatymas.",
	"@@Cos_Extent-Type_tag3@@": "Paskutinė--Naudoti paskutinio įvesties rastro aprėptį nustatant apdorojimo aprėptį.",
	"@@Cos_Extent-Type_tag4@@": "Sąjunga--Naudoti visų rastrų aprėptį nustatant apdorojimo aprėptį.",
	"@@Cos_Raster_tag0@@": "Įvestis, kuriai bus skaičiuojamos kosinuso reikšmės.",
	"@@CosH_Cellsize-Type_tag0@@": "Pasirinkite, koks gardelės dydis bus naudojamas išvesties rastre. Jei visų įvesties gardelių dydžiai vienodi, visos parinktys pateiks vienodus rezultatus.",
	"@@CosH_Cellsize-Type_tag1@@": "Pirmiausia--Naudoti pirmą įvesties rastrų gardelės dydį.",
	"@@CosH_Cellsize-Type_tag2@@": "Paskiausia--Naudoti paskutinį įvesties rastrų gardelės dydį.",
	"@@CosH_Cellsize-Type_tag3@@": "Didžiausias--Naudoti didžiausią įvesties rastrų gardelės dydį. Tai numatytasis nustatymas.",
	"@@CosH_Cellsize-Type_tag4@@": "Vidutinis--Naudoti vidutinį visų įvesties rastrų gardelės dydį.",
	"@@CosH_Cellsize-Type_tag5@@": "Mažiausias--Naudoti mažiausią įvesties rastrų gardelės dydį.",
	"@@CosH_Extent-Type_tag0@@": "Pasirinkite, kokia aprėptis bus naudojama išvesties rastre:",
	"@@CosH_Extent-Type_tag1@@": "Pirmiausia--Naudoti pirmojo įvesties rastro aprėptį nustatant apdorojimo aprėptį.",
	"@@CosH_Extent-Type_tag2@@": "Sankirta--Naudoti persidengiančių pikselių aprėptį nustatant apdorojimo aprėptį. Tai numatytasis nustatymas.",
	"@@CosH_Extent-Type_tag3@@": "Paskiausia--Naudoti paskutinio įvesties rastro aprėptį nustatant apdorojimo aprėptį.",
	"@@CosH_Extent-Type_tag4@@": "Sąjunga--Naudoti visų rastrų aprėptį nustatant apdorojimo aprėptį.",
	"@@CosH_Raster_tag0@@": "Įvestis, kuriai bus skaičiuojamos hiperbolinio kosinuso reikšmės.",
	"@@Cost-Allocation_Accumulative-Cost-Resistance-Rate_tag0@@": "Šis parametras simuliuoja, kaip didėjant suminėms išlaidoms auga pastangos kompensuoti sąnaudas. Jis naudojamas keliautojo nuovargiui modeliuoti. Augančios suminės sąnaudos pasiekti gardelę padauginamos iš pasipriešinimo koeficiento ir pridedamos prie išlaidų perėjimui į kitą gardelę.",
	"@@Cost-Allocation_Accumulative-Cost-Resistance-Rate_tag1@@": "Tai yra modifikuota sudėtinių palūkanų koeficiento formulės, naudojamos skaičiuojant matomas judėjimo per gardelę išlaidas, versija. Didėjant pasipriešinimo koeficiento reikšmei, ji kelia toliau lankomų gardelių sąnaudas. Kuo didesnis pasipriešinimo koeficientas, tuo didesnės išlaidos norit pasiekti kitą gardelę, ir jos susideda kiekvienam tolesniam judesiui. Kadangi pasipriešinimo koeficientas panašus į sudėtinį koeficientą, o suminių sąnaudų reikšmės paprastai labai didelės, rekomenduojama naudoti mažus pasipriešinimo koeficientus, pavyzdžiui, 0,005 ar net mažesnius, atsižvelgiant į suminių sąnaudų reikšmes.",
	"@@Cost-Allocation_Accumulative-Cost-Resistance-Rate_tag2@@": "Reikšmė turi būti didesnė už nulį. Numatytoji apimtis yra matuojama iki išvesties rastro briaunos.",
	"@@Cost-Allocation_Accumulative-Cost-Resistance-Rate_tag3@@": "Šiam parametrui gali būti naudojama skaitinė (dviguba) reikšmė arba <strong>Source Raster</strong> laukas.",
	"@@Cost-Allocation_Capacity_tag0@@": "Šaltiniui apibrėžia keliautojo išlaidų apimtį. Išlaidų skaičiavimai tęsiami kiekvienam šaltiniui, kol pasiekiama nurodyta apimtis.",
	"@@Cost-Allocation_Capacity_tag1@@": "Reikšmė turi būti didesnė už nulį. Numatytoji apimtis yra matuojama iki išvesties rastro briaunos.",
	"@@Cost-Allocation_Capacity_tag2@@": "Šiam parametrui gali būti naudojama skaitinė (dviguba) reikšmė arba <strong>Source Raster</strong> laukas.",
	"@@Cost-Allocation_Cost-Raster_tag0@@": "Būtinas įvesties rastras, apibrėžiantis planimetriško judėjimo per kiekvieną gardelę sąnaudas arba trukdžius. Kiekvienos gardelės padėties reikšmė atspindi sąnaudos vienetui atstumą judant per gardelę. Kiekvienos gardelės padėties reikšmė dauginama iš gardelės skiriamosios gebos, kompensuojant už judėjimą įstrižai, ir gaunama bendrųjų sąnaudų kertant gardelę suma.",
	"@@Cost-Allocation_Cost-Raster_tag1@@": "<strong>Cost Raster</strong> reikšmės gali būti sveikieji skaičiai arba skaičiai su slankiuoju kableliu, tačiau ne neigiamos ir ne nulinės reikšmės.",
	"@@Cost-Allocation_Maximum-Distance_tag0@@": "Riba, kurios negali viršyti suminių sąnaudų reikšmės. Jei suminių sąnaudų atstumas viršija šią reikšmę, gardelės padėties išvesties reikšmė bus ${NoData}. Maksimalus atstumas apibrėžia aprėptį, kuriai skaičiuojami suminiai sąnaudų atstumai. Numatytasis atstumas yra matuojama iki išvesties rastro aprėpties.",
	"@@Cost-Allocation_Multiplier-to-Apply-to-Costs_tag0@@": "Daugiklis, pritaikomas išlaidų reikšmėms.",
	"@@Cost-Allocation_Multiplier-to-Apply-to-Costs_tag1@@": "Šis parametras leidžia šaltinyje valdyti kelionės modelį arba stiprumą. Kuo daugiklis didesnis, tuo didesnės išlaidos keliauti per kiekvieną gardelę.",
	"@@Cost-Allocation_Multiplier-to-Apply-to-Costs_tag2@@": "Reikšmės turi būti didesnės už nulį. Numatytoji reikšmė yra 1.",
	"@@Cost-Allocation_Multiplier-to-Apply-to-Costs_tag3@@": "Šiam parametrui gali būti naudojama skaitinė (dviguba) reikšmė arba <strong>Source Raster</strong> laukas.",
	"@@Cost-Allocation_Source-Field_tag0@@": "Laukas, naudojamas priskirti reikšmes šaltinio padėtims. Jis turi būti sveikojo skaičiaus tipo. Jei nustatytas <strong>Value Raster</strong>, tos įvesties reikšmėms bus teikiama pirmenybė prieš bet kokį nustatymą, atliktą <strong>Source Field</strong>.",
	"@@Cost-Allocation_Source-Raster_tag0@@": "Būtinas šaltinio padėčių įvesties rastras.",
	"@@Cost-Allocation_Source-Raster_tag1@@": "Tai yra rastras, kuris identifikuoja gardeles ar padėtis, iš kurių skaičiuojamas mažiausias suminis sąnaudų atstumas kiekvienai išvesties gardelės padėčiai.",
	"@@Cost-Allocation_Source-Raster_tag2@@": "Jei <strong>Source Raster</strong> įvestis yra skaičius su slankiuoju kableliu, būtina nustatyti <strong>Value Raster</strong> ir tai turi būti sveikasis skaičius. <strong>Value Raster</strong> turės pirmenybę prieš bet kokį nustatymą, atliktą <strong>Source Field</strong>.",
	"@@Cost-Allocation_Start-Cost_tag0@@": "Pradinė kaina, nuo kurios pradedami išlaidų skaičiavimai. Šis parametras leidžia nurodyti fiksuotą su šaltiniu susijusią kainą. Užuot pradėjęs nuo 0 lygios kainos, išlaidų skaičiavimo algoritmas pradės nuo nurodytos reikšmės.",
	"@@Cost-Allocation_Start-Cost_tag1@@": "Reikšmė turi būti lygi nuliui arba didesnė. Numatytoji reikšmė yra 0.",
	"@@Cost-Allocation_Travel-Direction_tag0@@": "Apibrėžia keliautojo kryptį taikant šaltinio pasipriešinimo koeficientą bei pradinę šaltinio kainą.",
	"@@Cost-Allocation_Travel-Direction_tag1@@": "<strong>From Source</strong>--Šaltinio pasipriešinimo koeficientas ir šaltinio pradinė kaina bus pritaikyti ties įvesties šaltiniu ir iškeliaujant į šaltiniui nepriklausančias gardeles. Tai numatytasis nustatymas.",
	"@@Cost-Allocation_Travel-Direction_tag3@@": "<strong>To Source</strong>--Šaltinio pasipriešinimo koeficientas ir šaltinio pradinė kaina bus pritaikyti ties kiekviena šaltiniui nepriklausančia gardele ir grįžtant į įvesties šaltinį.",
	"@@Cost-Allocation_Travel-Direction_tag5@@": "Nurodykite raktažodį <strong>From Source</strong> arba <strong>To Source</strong>, kuris bus taikomas visiems šaltiniams, arba nurodykite <strong>Source Raster</strong> lauką, kuriame yra raktažodžiai, leidžiantys kiekvienam šaltiniui identifikuoti kelionės kryptį. Tame lauke turi būti eilutė ${FROM_SOURCE} arba ${TO_SOURCE}.",
	"@@Cost-Allocation_Value-Raster_tag0@@": "Įvesties sveikojo skaičiaus rastras, kuris identifikuoja zonos reikšmes, kurios turi būti naudojamos kiekvienai įvesties šaltinio padėčiai. Kiekvienai šaltinio padėties gardelei, reikšmė, nustatyta <strong>Value Raster</strong>, bus priskirta visoms gardelėms, skaičiavimui paskirtoms prie šaltinio padėties. <strong>Value Raster</strong> turės pirmenybę prieš bet kokį nustatymą, atliktą <strong>Source Field</strong>.",
	"@@Cost-Back-Link_Accumulative-Cost-Resistance-Rate_tag0@@": "Šis parametras simuliuoja, kaip didėjant suminėms išlaidoms auga pastangos kompensuoti sąnaudas. Jis naudojamas keliautojo nuovargiui modeliuoti. Didėjančios suminės išlaidos, norint pasiekti gardelę, padauginamos iš pasipriešinimo laipsnio ir pridedamos prie perkėlimo į kitą gardelę.",
	"@@Cost-Back-Link_Accumulative-Cost-Resistance-Rate_tag1@@": "Tai modifikuota sudėtinės palūkanų normos formulės versija, naudojama apskaičiuoti akivaizdžias judėjimo per gardelę išlaidas. Didėjant pasipriešinimo koeficiento reikšmei, ji kelia toliau lankomų gardelių sąnaudas. Kuo didesnis pasipriešinimo koeficientas, tuo didesnės išlaidos norit pasiekti kitą gardelę, ir jos susideda kiekvienam tolesniam veiksmui. Kadangi pasipriešinimo koeficientas panašus į sudėtinį koeficientą, o suminių sąnaudų reikšmės paprastai labai didelės, rekomenduojama naudoti mažus pasipriešinimo koeficientus, pavyzdžiui, 0,005 ar net mažesnius, atsižvelgiant į suminių sąnaudų reikšmes.",
	"@@Cost-Back-Link_Accumulative-Cost-Resistance-Rate_tag2@@": "Reikšmė turi būti didesnė už nulį. Numatytoji apimtis yra matuojama iki išvesties rastro briaunos.",
	"@@Cost-Back-Link_Accumulative-Cost-Resistance-Rate_tag3@@": "Šiam parametrui gali būti naudojama skaitinė (dviguba) reikšmė arba <strong>Source Raster</strong> laukas.",
	"@@Cost-Back-Link_Capacity_tag0@@": "Šaltiniui apibrėžia keliautojo išlaidų apimtį. Išlaidų skaičiavimai tęsiami kiekvienam šaltiniui, kol pasiekiama nurodyta apimtis.",
	"@@Cost-Back-Link_Capacity_tag1@@": "Reikšmė turi būti didesnė už nulį. Numatytoji apimtis yra matuojama iki išvesties rastro briaunos.",
	"@@Cost-Back-Link_Capacity_tag2@@": "Šiam parametrui gali būti naudojama skaitinė (dviguba) reikšmė arba <strong>Source Raster</strong> laukas.",
	"@@Cost-Back-Link_Cost-Raster_tag0@@": "Būtinas įvesties rastras, apibrėžiantis planimetriško judėjimo per kiekvieną gardelę sąnaudas arba trukdžius. Kiekvienos gardelės padėties reikšmė atspindi sąnaudos vienetui atstumą judant per gardelę. Kiekvienos gardelės padėties reikšmė dauginama iš gardelės skiriamosios gebos, kompensuojant už judėjimą įstrižai, ir gaunama bendrųjų sąnaudų kertant gardelę suma.",
	"@@Cost-Back-Link_Cost-Raster_tag1@@": "<strong>Cost Raster</strong> reikšmės gali būti sveikieji skaičiai arba skaičiai su slankiuoju kableliu, tačiau ne neigiamos ir ne nulinės reikšmės.",
	"@@Cost-Back-Link_Maximum-Distance_tag0@@": "Riba, kurios negali viršyti suminių sąnaudų reikšmės. Jei suminių sąnaudų atstumas viršija šią reikšmę, gardelės padėties išvesties reikšmė bus NoData. Maksimalus atstumas apibrėžia aprėptį, kuriai skaičiuojami suminiai sąnaudų atstumai. Numatytasis atstumas yra matuojama iki išvesties rastro aprėpties.",
	"@@Cost-Back-Link_Multiplier-to-Apply-to-Costs_tag0@@": "Daugiklis, taikytinas sąnaudų vertėms.",
	"@@Cost-Back-Link_Multiplier-to-Apply-to-Costs_tag1@@": "Šis parametras leidžia šaltinyje valdyti kelionės modelį arba stiprumą. Kuo daugiklis didesnis, tuo didesnės išlaidos keliauti per kiekvieną gardelę.",
	"@@Cost-Back-Link_Multiplier-to-Apply-to-Costs_tag2@@": "Reikšmės turi būti didesnės už nulį. Numatytoji reikšmė yra 1.",
	"@@Cost-Back-Link_Multiplier-to-Apply-to-Costs_tag3@@": "Šiam parametrui gali būti naudojama skaitinė (dviguba) reikšmė arba <strong>Source Raster</strong> laukas.",
	"@@Cost-Back-Link_Source-Raster_tag0@@": "Būtinas šaltinio padėčių įvesties rastras.",
	"@@Cost-Back-Link_Source-Raster_tag1@@": "Tai yra rastras, kuris identifikuoja gardeles ar padėtis, iš kurių skaičiuojamas mažiausias suminis sąnaudų atstumas kiekvienai išvesties gardelės padėčiai.",
	"@@Cost-Back-Link_Start-Cost_tag0@@": "Pradinė kaina, nuo kurios pradedami išlaidų skaičiavimai. Šis parametras leidžia nurodyti fiksuotą su šaltiniu susijusią kainą. Užuot pradėjęs nuo 0 lygios kainos, išlaidų skaičiavimo algoritmas pradės nuo nurodytos reikšmės.",
	"@@Cost-Back-Link_Start-Cost_tag1@@": "Reikšmė turi būti lygi nuliui arba didesnė. Numatytoji reikšmė yra 0.",
	"@@Cost-Back-Link_Travel-Direction_tag0@@": "Apibrėžia keliautojo kryptį taikant šaltinio pasipriešinimo koeficientą bei pradinę šaltinio kainą.",
	"@@Cost-Back-Link_Travel-Direction_tag1@@": "<strong>From Source</strong>--Šaltinio pasipriešinimo koeficientas ir šaltinio pradinė kaina bus pritaikyti ties įvesties šaltiniu ir iškeliaujant į šaltiniui nepriklausančias gardeles. Tai numatytasis nustatymas.",
	"@@Cost-Back-Link_Travel-Direction_tag3@@": "<strong>To Source</strong>--Šaltinio pasipriešinimo koeficientas ir šaltinio pradinė kaina bus pritaikyti ties kiekviena šaltiniui nepriklausančia gardele ir grįžtant į įvesties šaltinį.",
	"@@Cost-Back-Link_Travel-Direction_tag5@@": "Nurodykite raktažodį <strong>From Source</strong> arba <strong>To Source</strong>, kuris bus taikomas visiems šaltiniams, arba nurodykite <strong>Source Raster</strong> lauką, kuriame yra raktažodžiai, leidžiantys kiekvienam šaltiniui identifikuoti kelionės kryptį. Tame lauke turi būti eilutė ${FROM_SOURCE} arba ${TO_SOURCE}.",
	"@@Cost-Distance_Accumulative-Cost-Resistance-Rate_tag0@@": "Šis parametras simuliuoja, kaip didėjant suminėms išlaidoms auga pastangos kompensuoti sąnaudas. Jis naudojamas keliautojo nuovargiui modeliuoti. Didėjančios suminės išlaidos, norint pasiekti gardelę, padauginamos iš pasipriešinimo laipsnio ir pridedamos prie perkėlimo į kitą gardelę.",
	"@@Cost-Distance_Accumulative-Cost-Resistance-Rate_tag1@@": "Tai modifikuota sudėtinės palūkanų normos formulės versija, naudojama apskaičiuoti akivaizdžias judėjimo per gardelę išlaidas. Didėjant pasipriešinimo koeficiento reikšmei, ji kelia toliau lankomų gardelių sąnaudas. Kuo didesnis pasipriešinimo koeficientas, tuo didesnės išlaidos norit pasiekti kitą gardelę, ir jos susideda kiekvienam tolesniam judesiui. Kadangi pasipriešinimo koeficientas panašus į sudėtinį koeficientą, o suminių sąnaudų reikšmės paprastai labai didelės, rekomenduojama naudoti mažus pasipriešinimo koeficientus, pavyzdžiui, 0,005 ar net mažesnius, atsižvelgiant į suminių sąnaudų reikšmes.",
	"@@Cost-Distance_Accumulative-Cost-Resistance-Rate_tag2@@": "Reikšmė turi būti didesnė už nulį. Numatytoji apimtis yra matuojama iki išvesties rastro briaunos.",
	"@@Cost-Distance_Accumulative-Cost-Resistance-Rate_tag3@@": "Šiam parametrui gali būti naudojama skaitinė (dviguba) reikšmė arba parinkties <strong> Šaltinio rastras </strong> laukas.",
	"@@Cost-Distance_Capacity_tag0@@": "Šaltiniui apibrėžia keliautojo išlaidų apimtį. Išlaidų skaičiavimai tęsiami kiekvienam šaltiniui, kol pasiekiama nurodyta apimtis.",
	"@@Cost-Distance_Capacity_tag1@@": "Reikšmė turi būti didesnė už nulį. Numatytoji apimtis yra matuojama iki išvesties rastro briaunos.",
	"@@Cost-Distance_Capacity_tag2@@": "Šiam parametrui gali būti naudojama skaitinė (dviguba) reikšmė arba <strong>Source Raster</strong> laukas.",
	"@@Cost-Distance_Cost-Raster_tag0@@": "Būtinas įvesties rastras, apibrėžiantis planimetriško judėjimo per kiekvieną gardelę sąnaudas arba trukdžius. Kiekvienos gardelės padėties reikšmė atspindi sąnaudos vienetui atstumą judant per gardelę. Kiekvienos gardelės padėties reikšmė dauginama iš gardelės skiriamosios gebos, kompensuojant už judėjimą įstrižai, ir gaunama bendrųjų sąnaudų kertant gardelę suma.",
	"@@Cost-Distance_Cost-Raster_tag1@@": "<strong>Cost Raster</strong> reikšmės gali būti sveikieji skaičiai arba skaičiai su slankiuoju kableliu, tačiau ne neigiamos ir ne nulinės reikšmės.",
	"@@Cost-Distance_Maximum-Distance_tag0@@": "Riba, kurios negali viršyti suminių sąnaudų reikšmės. Jei suminių sąnaudų atstumas viršija šią reikšmę, gardelės padėties išvesties reikšmė bus NoData. Maksimalus atstumas apibrėžia aprėptį, kuriai skaičiuojami suminiai sąnaudų atstumai. Numatytasis atstumas yra matuojamas iki išvesties rastro aprėpties.",
	"@@Cost-Distance_Multiplier-to-Apply-to-Costs_tag0@@": "Daugiklis, pritaikomas išlaidų reikšmėms.",
	"@@Cost-Distance_Multiplier-to-Apply-to-Costs_tag1@@": "Šis parametras leidžia šaltinyje valdyti kelionės modelį arba stiprumą. Kuo daugiklis didesnis, tuo didesnės išlaidos keliauti per kiekvieną gardelę.",
	"@@Cost-Distance_Multiplier-to-Apply-to-Costs_tag2@@": "Reikšmės turi būti didesnės už nulį. Numatytoji reikšmė yra 1.",
	"@@Cost-Distance_Multiplier-to-Apply-to-Costs_tag3@@": "Šiam parametrui gali būti naudojama skaitinė (dviguba) reikšmė arba <strong>Source Raster</strong> laukas.",
	"@@Cost-Distance_Source-Raster_tag0@@": "Būtinas šaltinio padėčių įvesties rastras.",
	"@@Cost-Distance_Source-Raster_tag1@@": "Tai yra rastras, kuris identifikuoja gardeles ar padėtis, iš kurių skaičiuojamas mažiausias suminis sąnaudų atstumas kiekvienai išvesties gardelės padėčiai.",
	"@@Cost-Distance_Start-Cost_tag0@@": "Pradinė kaina, nuo kurios pradedami išlaidų skaičiavimai. Šis parametras leidžia nurodyti fiksuotą su šaltiniu susijusią kainą. Užuot pradėjęs nuo 0 lygios kainos, išlaidų skaičiavimo algoritmas pradės nuo nurodytos reikšmės.",
	"@@Cost-Distance_Start-Cost_tag1@@": "Reikšmė turi būti lygi nuliui arba didesnė. Numatytoji reikšmė yra 0.",
	"@@Cost-Distance_Travel-Direction_tag0@@": "Apibrėžia keliautojo kryptį taikant šaltinio pasipriešinimo koeficientą bei pradinę šaltinio kainą.",
	"@@Cost-Distance_Travel-Direction_tag1@@": "<strong>Nuo šaltinio</strong>--Šaltinio pasipriešinimo koeficientas ir šaltinio pradinė kaina bus pritaikyti ties įvesties šaltiniu ir iškeliaujant į šaltiniui nepriklausančias gardeles. Tai numatytasis nustatymas.",
	"@@Cost-Distance_Travel-Direction_tag3@@": "<strong>Į šaltinį</strong>--Šaltinio pasipriešinimo koeficientas ir šaltinio pradinė kaina bus pritaikyti ties kiekviena šaltiniui nepriklausančia gardele ir grįžtant į įvesties šaltinį.",
	"@@Cost-Distance_Travel-Direction_tag5@@": "Nurodykite raktažodį <strong> Nuo šaltinio </strong> arba <strong> Į šaltinį </strong>, kuris bus taikomas visiems šaltiniams, arba nurodykite lauką parinktyje <strong> Šaltinio rastras</strong>, kuriame yra raktažodžiai, leidžiantys kiekvienam šaltiniui identifikuoti kelionės kryptį. Tame lauke turi būti eilutė ${FROM_SOURCE} arba ${TO_SOURCE}.",
	"@@Curvature_Curvature-Type_tag0@@": "Išlinkimo tipai paryškina skirtingas pasvirimo kryptis. Galimos trys išlinkimo parinktys:",
	"@@Curvature_Curvature-Type_tag1@@": "Plano išlinkis--Statmenas maksimalaus pasvirimo krypčiai. Jis paveikia tėkmės paviršiumi išsiskyrimą ir susitelkimą.",
	"@@Curvature_Curvature-Type_tag2@@": "Profilis--Lygiagretus pasvirimui ir nurodo maksimalaus pasvirimo kryptį. Jis paveikia tėkmės paviršiumi greitėjimą ir lėtėjimą.",
	"@@Curvature_Curvature-Type_tag3@@": "Standartinis--Derina tiek <strong>Profile</strong>, tiek <strong>Planform</strong> išlinkimus.",
	"@@Curvature_DEM_tag0@@": "Skaitmeninio aukščio modelio (DEM) rastras.",
	"@@Curvature_Z-Factor_tag0@@": "Z faktorius koreguoja matavimo vienetus z vienetams, jei jie įvesties paviršiuje skiriasi nuo x ir y matavimo vienetų. Jei x, y ir z matavimo vienetai tie patys, z faktorius turi būti nustatytas kaip 1. Įvesties paviršiaus z reikšmės dauginamos iš z faktoriaus, kai skaičiuojamas galutinės išvesties paviršius. Pavyzdžiui, jei jūsų z matavimo vienetas yra pėdos, o x ir y matavimo vienetai yra metrai, naudotumėte z faktorių, lygų 0,3048, z vienetų konvertavimui iš pėdų į metrus, nes 1 pėda = 0,3048 metro.",
	"@@Divide_Cellsize-Type_tag0@@": "Pasirinkite, koks gardelės dydis bus naudojamas išvesties rastre. Jei visų įvesties gardelių dydžiai vienodi, visos parinktys pateiks vienodus rezultatus.",
	"@@Divide_Cellsize-Type_tag1@@": "Pirmiausia--Naudoti pirmą įvesties rastrų gardelės dydį.",
	"@@Divide_Cellsize-Type_tag2@@": "Paskiausia--Naudoti paskutinį įvesties rastrų gardelės dydį.",
	"@@Divide_Cellsize-Type_tag3@@": "Didžiausias--Naudoti didžiausią įvesties rastrų gardelės dydį. Tai numatytasis nustatymas.",
	"@@Divide_Cellsize-Type_tag4@@": "Vidutinis--Naudoti vidutinį visų įvesties rastrų gardelės dydį.",
	"@@Divide_Cellsize-Type_tag5@@": "Mažiausias--Naudoti mažiausią įvesties rastrų gardelės dydį.",
	"@@Divide_Extent-Type_tag0@@": "Pasirinkite, kokia aprėptis bus naudojama išvesties rastre:",
	"@@Divide_Extent-Type_tag1@@": "Pirmiausia--Naudoti pirmojo įvesties rastro aprėptį nustatant apdorojimo aprėptį.",
	"@@Divide_Extent-Type_tag2@@": "Sankirta--Naudoti persidengiančių pikselių aprėptį nustatant apdorojimo aprėptį. Tai numatytasis nustatymas.",
	"@@Divide_Extent-Type_tag3@@": "Paskiausia--Naudoti paskutinio įvesties rastro aprėptį nustatant apdorojimo aprėptį.",
	"@@Divide_Extent-Type_tag4@@": "Sąjunga--Naudoti visų rastrų aprėptį nustatant apdorojimo aprėptį.",
	"@@Divide_Raster_tag0@@": "Įvestis, kurios reikšmė bus dalinama iš antrosios įvesties.",
	"@@Divide_Raster_tag1@@": "Skaičius, kurį galima naudoti kaip šio parametro įvestį, jei ${Raster2} nurodytas rastras.",
	"@@Divide_Raster2_tag0@@": "Įvestis, iš kurios bus dalijama pirmosios įvesties reikšmė.",
	"@@Divide_Raster2_tag1@@": "Skaičius, kurį galima naudoti kaip šio parametro įvestį, jei ${Raster} nurodytas rastras.",
	"@@Elevation-Void-Fill_DEM_tag0@@": "Įvesties DEM.",
	"@@Elevation-Void-Fill_Max-Void-Width_tag0@@": "Maksimali tuštumos pločio reikšmė naudojama nurodyti didžiausią tuštumos, kurią norite užpildyti, dydį. Jei apriboti ploto aplink tuštumą plotis arba aukštis didesnis nei maksimali tuštumos pločio reikšmė, tuštuma neužpildoma. Šio parametro matavimo vienetai yra tie patys, kaip ir jūsų duomenų erdvinės atskaitos sistemoje naudoti.",
	"@@Elevation-Void-Fill_Max-Void-Width_tag1@@": "Jei šis parametras tuščias arba lygus ${0}, nebus naudojamas maksimalus plotis, todėl bus užpildytos visos tuštumos. Jei reikšmė lygi ${-1}, tuštumos nebus pildomos.",
	"@@Elevation-Void-Fill_Short-Range-IDW-Radius_tag0@@": "Maksimalus paieškos spindulys, naudojamas tuštumoms pildyti. Toliau nuo bet kurio tinkamo pikselio nei ši ribinė  reikšmė esanti tuštuma liks tuščia. Šio parametro matavimo vienetai yra tie patys, kaip ir jūsų duomenų erdvinės atskaitos sistemoje naudoti.",
	"@@Elevation-Void-Fill_Short-Range-IDW-Radius_tag1@@": "Jei šio parametro reikšmė tuščia, ${0} arba ${-1}, šis parametras nebus naudojamas.",
	"@@Equal-to_Cellsize-Type_tag0@@": "Pasirinkite, koks gardelės dydis bus naudojamas išvesties rastre. Jei visų įvesties gardelių dydžiai vienodi, visos parinktys pateiks vienodus rezultatus.",
	"@@Equal-to_Cellsize-Type_tag1@@": "Pirmiausia--Naudoti pirmą įvesties rastrų gardelės dydį.",
	"@@Equal-to_Cellsize-Type_tag2@@": "Paskiausia--Naudoti paskutinį įvesties rastrų gardelės dydį.",
	"@@Equal-to_Cellsize-Type_tag3@@": "Didžiausias--Naudoti didžiausią įvesties rastrų gardelės dydį. Tai numatytasis nustatymas.",
	"@@Equal-to_Cellsize-Type_tag4@@": "Vidutinis--Naudoti vidutinį visų įvesties rastrų gardelės dydį.",
	"@@Equal-to_Cellsize-Type_tag5@@": "Mažiausias--Naudoti mažiausią įvesties rastrų gardelės dydį.",
	"@@Equal-to_Extent-Type_tag0@@": "Pasirinkite, kokia aprėptis bus naudojama išvesties rastre:",
	"@@Equal-to_Extent-Type_tag1@@": "Pirmiausia--Naudoti pirmojo įvesties rastro aprėptį nustatant apdorojimo aprėptį.",
	"@@Equal-to_Extent-Type_tag2@@": "Sankirta--Naudoti persidengiančių pikselių aprėptį nustatant apdorojimo aprėptį. Tai numatytasis nustatymas.",
	"@@Equal-to_Extent-Type_tag3@@": "Paskiausia--Naudoti paskutinio įvesties rastro aprėptį nustatant apdorojimo aprėptį.",
	"@@Equal-to_Extent-Type_tag4@@": "Sąjunga--Naudoti visų rastrų aprėptį nustatant apdorojimo aprėptį.",
	"@@Equal-to_Raster_tag0@@": "Įvestis, kurią lygybei palyginti naudos antroji įvestis.",
	"@@Equal-to_Raster_tag1@@": "Šiam parametrui kaip įvestį galima naudoti konstantos reikšmę, jei kitam parametrui nurodytas rastras.",
	"@@Equal-to_Raster2_tag0@@": "Įvestis, kurią lygybei palyginti naudos pirmoji įvestis.",
	"@@Equal-to_Raster2_tag1@@": "Šiam parametrui kaip įvestį galima naudoti konstantos reikšmę, jei kitam parametrui nurodytas rastras.",
	"@@Euclidean-Allocation_Cellsize_tag0@@": "Gardelės dydis, ties kuriuo bus kuriamas išvesties rastras.",
	"@@Euclidean-Allocation_Cellsize_tag1@@": "Jei <strong>Analysis Environments</strong> gardelės dydis aiškiai nurodytas, jis ir bus numatytasis gardelės dydis. Jei jis nenustatytas, išvesties gardelės dydis bus toks pat kaip <strong>Source Raster</strong>.",
	"@@Euclidean-Allocation_Distance-Method_tag0@@": "Apibrėžia, ar apskaičiuoti atstumą naudojant plokštuminį (plokščios žemės) ar geodezinį (elipsoido) metodą.",
	"@@Euclidean-Allocation_Distance-Method_tag1@@": "Geodezinis--Trumpiausia linija tarp dviejų taškų ant Žemės paviršiaus sferoide (elipsoide). Todėl, nepaisant įvesties ar išvesties projekcijos, rezultatai nepasikeis. Vienas galimas geodezinės linijos panaudojimas: jei norite nustatyti trumpiausią atstumą tarp dviejų miestų lėktuvo skrydžio maršrutui. Tai dar vadinama didžiojo apskritimo linija, jei vietoj elipsoido naudojama sfera.",
	"@@Euclidean-Allocation_Distance-Method_tag2@@": "Plokštuminis--Plokštuminiai matavimai ilgiui ir plotui skaičiuoti naudoja dvimatę Dekarto matematiką. Ši parinktis galima tik matuojant projekcinėje koordinačių sistemoje, ir tik jei tos koordinačių sistemos dvimatė plokštuma bus naudojama kaip matavimų pagrindas.",
	"@@Euclidean-Allocation_Maximum-Distance_tag0@@": "Apibrėžia ribinį atstumą, kurio neviršijant nustatinėjamas artimiausias šaltinis. Jei atstumas iki artimiausio šaltinio viršija šią reikšmę, tos gardelės išvestis bus ${NoData}.",
	"@@Euclidean-Allocation_Maximum-Distance_tag1@@": "Numatytasis atstumas yra matuojamas iki išvesties rastro aprėpties.",
	"@@Euclidean-Allocation_Raster-Barriers_tag0@@": "Rastras, apibrėžiantis kliūtis.",
	"@@Euclidean-Allocation_Raster-Barriers_tag1@@": "Kur nėra kliūčių, duomenų rinkinyje turi būti ${NoData}. Kliūtims nurodomos galiojančios vertės, įskaitant nulį.",
	"@@Euclidean-Allocation_Raster-Barriers_tag2@@": "Kliūtis gali apibrėžti sveikasis skaičius arba slankiojo kablelio rastras.",
	"@@Euclidean-Allocation_Source-Field_tag0@@": "Laukas, naudojamas priskirti reikšmes šaltinio padėtims. Jis turi būti sveikojo skaičiaus tipo. Jei nustatytas <strong>Value Raster</strong>, tos įvesties reikšmėms bus teikiama pirmenybė prieš bet kokį nustatymą, atliktą parinktyje <strong>Source Field</strong>.",
	"@@Euclidean-Allocation_Source-Raster_tag0@@": "Būtinas įvesties rastras, identifikuojantis šaltinio padėtis. Išvestyje kiekvienai gardelei bus nustatytas artimiausias šaltinis pagal Euklido atstumą",
	"@@Euclidean-Allocation_Source-Raster_tag1@@": "Įvesties tipas gali būti sveikojo skaičiaus arba slankiojo kablelio tipo.",
	"@@Euclidean-Allocation_Value-Raster_tag0@@": "Įvesties sveikojo skaičiaus rastras, kuris identifikuoja zonos reikšmes, kurios turi būti naudojamos kiekvienai įvesties šaltinio padėčiai. Kiekvienai šaltinio padėties gardelei, reikšmė, nustatyta <strong>Value Raster</strong>, bus priskirta visoms gardelėms, skaičiavimui paskirtoms prie šaltinio padėties. <strong>Value Raster</strong> turės pirmenybę prieš bet kokį nustatymą, atliktą <strong>Source Field</strong>.",
	"@@Euclidean-Direction_Cellsize_tag0@@": "Gardelės dydis, ties kuriuo bus kuriamas išvesties rastras.",
	"@@Euclidean-Direction_Cellsize_tag1@@": "Jei <strong>Analysis Environments</strong> gardelės dydis aiškiai nurodytas, jis ir bus numatytasis gardelės dydis. Jei jis nenustatytas, išvesties gardelės dydis bus toks pat kaip <strong>Source Raster</strong>.",
	"@@Euclidean-Direction_Distance-Method_tag0@@": "Apibrėžia, ar apskaičiuoti atstumą naudojant plokštuminį (plokščios žemės) ar geodezinį (elipsoido) metodą.",
	"@@Euclidean-Direction_Distance-Method_tag1@@": "Geodezinis--Trumpiausia linija tarp dviejų taškų ant Žemės paviršiaus sferoide (elipsoide). Todėl, nepaisant įvesties ar išvesties projekcijos, rezultatai nepasikeis. Vienas galimas geodezinės linijos panaudojimas: jei norite nustatyti trumpiausią atstumą tarp dviejų miestų lėktuvo skrydžio maršrutui. Tai dar vadinama didžiojo apskritimo linija, jei vietoj elipsoido naudojama sfera.",
	"@@Euclidean-Direction_Distance-Method_tag2@@": "Plokštuminis--Plokštuminiai matavimai ilgiui ir plotui skaičiuoti naudoja dvimatę Dekarto matematiką. Ši parinktis galima tik matuojant projekcinėje koordinačių sistemoje, ir tik jei tos koordinačių sistemos dvimatė plokštuma bus naudojama kaip matavimų pagrindas.",
	"@@Euclidean-Direction_Maximum-Distance_tag0@@": "Apibrėžia ribinį atstumą, kurio neviršijant skaičiuojama kryptis artimiausio šaltinio link. Jei atstumas iki artimiausio šaltinio viršija šią reikšmę, tos gardelės išvestis bus ${NoData}.",
	"@@Euclidean-Direction_Maximum-Distance_tag1@@": "Numatytasis atstumas yra matuojamas iki išvesties rastro aprėpties.",
	"@@Euclidean-Direction_Raster-Barriers_tag0@@": "Rastras, apibrėžiantis kliūtis.",
	"@@Euclidean-Direction_Raster-Barriers_tag1@@": "Kur nėra kliūčių, duomenų rinkinyje turi būti NoData. Kliūtis reprezentuoja tinkamos reikšmės, įskaitant nulį.",
	"@@Euclidean-Direction_Raster-Barriers_tag2@@": "Kliūtis gali apibrėžti sveikasis skaičius arba slankiojo kablelio rastras.",
	"@@Euclidean-Direction_Source-Raster_tag0@@": "Būtinas įvesties rastras, kuris identifikuoja gardeles ar padėtis, iki kurių skaičiuojama Euklido kryptis kiekvienai išvesties gardelės padėčiai.",
	"@@Euclidean-Direction_Source-Raster_tag1@@": "Įvesties tipas gali būti sveikojo skaičiaus arba slankiojo kablelio tipo.",
	"@@Euclidean-Distance_Cellsize_tag0@@": "Gardelės dydis, ties kuriuo bus kuriamas išvesties rastras.",
	"@@Euclidean-Distance_Cellsize_tag1@@": "Jei <strong>Analysis Environments</strong> gardelės dydis aiškiai nurodytas, jis ir bus numatytasis gardelės dydis. Jei jis nenustatytas, išvesties gardelės dydis bus toks pat kaip <strong>Source Raster</strong>.",
	"@@Euclidean-Distance_Distance-Method_tag0@@": "Apibrėžia, ar apskaičiuoti atstumą naudojant plokštuminį (plokščios žemės) ar geodezinį (elipsoido) metodą.",
	"@@Euclidean-Distance_Distance-Method_tag1@@": "Geodezinis--Trumpiausia linija tarp dviejų taškų ant Žemės paviršiaus sferoide (elipsoide). Todėl, nepaisant įvesties ar išvesties projekcijos, rezultatai nepasikeis. Vienas galimas geodezinės linijos panaudojimas: jei norite nustatyti trumpiausią atstumą tarp dviejų miestų lėktuvo skrydžio maršrutui. Tai dar vadinama didžiojo apskritimo linija, jei vietoj elipsoido naudojama sfera.",
	"@@Euclidean-Distance_Distance-Method_tag2@@": "Plokštuminis--Plokštuminiai matavimai ilgiui ir plotui skaičiuoti naudoja dvimatę Dekarto matematiką. Ši parinktis galima tik matuojant projekcinėje koordinačių sistemoje, ir tik jei tos koordinačių sistemos dvimatė plokštuma bus naudojama kaip matavimų pagrindas.",
	"@@Euclidean-Distance_Maximum-Distance_tag0@@": "Riba, kurios negali viršyti suminių atstumų reikšmės. Jei suminis Euklido atstumas viršija šią reikšmę, gardelės padėties išvesties reikšmė bus NoData.",
	"@@Euclidean-Distance_Maximum-Distance_tag1@@": "Numatytasis atstumas yra matuojama iki išvesties rastro aprėpties.",
	"@@Euclidean-Distance_Raster-Barriers_tag0@@": "Rastras, apibrėžiantis kliūtis.",
	"@@Euclidean-Distance_Raster-Barriers_tag1@@": "Kur nėra kliūčių, duomenų rinkinyje turi būti ${NoData}. Kliūtims nurodomos galiojančios vertės, įskaitant nulį.",
	"@@Euclidean-Distance_Raster-Barriers_tag2@@": "Kliūtis gali apibrėžti sveikasis skaičius arba slankiojo kablelio rastras.",
	"@@Euclidean-Distance_Source-Raster_tag0@@": "Būtinas įvesties rastras, kuris identifikuoja gardeles ar padėtis, iki kurių skaičiuojamas Euklido atstumas kiekvienai išvesties gardelės padėčiai.",
	"@@Euclidean-Distance_Source-Raster_tag1@@": "Įvesties tipas gali būti sveikojo skaičiaus arba slankiojo kablelio tipo.",
	"@@Exp_Cellsize-Type_tag0@@": "Pasirinkite, koks gardelės dydis bus naudojamas išvesties rastre. Jei visų įvesties gardelių dydžiai vienodi, visos parinktys pateiks vienodus rezultatus.",
	"@@Exp_Cellsize-Type_tag1@@": "Pirmiausia--Naudoti pirmą įvesties rastrų gardelės dydį.",
	"@@Exp_Cellsize-Type_tag2@@": "Paskiausia--Naudoti paskutinį įvesties rastrų gardelės dydį.",
	"@@Exp_Cellsize-Type_tag3@@": "Didžiausias--Naudoti didžiausią įvesties rastrų gardelės dydį. Tai numatytasis nustatymas.",
	"@@Exp_Cellsize-Type_tag4@@": "Vidutinis--Naudoti vidutinį visų įvesties rastrų gardelės dydį.",
	"@@Exp_Cellsize-Type_tag5@@": "Mažiausias--Naudoti mažiausią įvesties rastrų gardelės dydį.",
	"@@Exp_Extent-Type_tag0@@": "Pasirinkite, kokia aprėptis bus naudojama išvesties rastre:",
	"@@Exp_Extent-Type_tag1@@": "Pirmiausia--Naudoti pirmojo įvesties rastro aprėptį nustatant apdorojimo aprėptį.",
	"@@Exp_Extent-Type_tag2@@": "Sankirta--Naudoti persidengiančių pikselių aprėptį nustatant apdorojimo aprėptį. Tai numatytasis nustatymas.",
	"@@Exp_Extent-Type_tag3@@": "Paskiausia--Naudoti paskutinio įvesties rastro aprėptį nustatant apdorojimo aprėptį.",
	"@@Exp_Extent-Type_tag4@@": "Sąjunga--Naudoti visų rastrų aprėptį nustatant apdorojimo aprėptį.",
	"@@Exp_Raster_tag0@@": "Įvesties reikšmės, kurioms ieškoma e pagrindo eksponentinė funkcija.",
	"@@Exp10_Cellsize-Type_tag0@@": "Pasirinkite, koks gardelės dydis bus naudojamas išvesties rastre. Jei visų įvesties gardelių dydžiai vienodi, visos parinktys pateiks vienodus rezultatus.",
	"@@Exp10_Cellsize-Type_tag1@@": "Pirmiausia--Naudoti pirmą įvesties rastrų gardelės dydį.",
	"@@Exp10_Cellsize-Type_tag2@@": "Paskiausia--Naudoti paskutinį įvesties rastrų gardelės dydį.",
	"@@Exp10_Cellsize-Type_tag3@@": "Didžiausias--Naudoti didžiausią įvesties rastrų gardelės dydį. Tai numatytasis nustatymas.",
	"@@Exp10_Cellsize-Type_tag4@@": "Vidutinis--Naudoti vidutinį visų įvesties rastrų gardelės dydį.",
	"@@Exp10_Cellsize-Type_tag5@@": "Mažiausias--Naudoti mažiausią įvesties rastrų gardelės dydį.",
	"@@Exp10_Extent-Type_tag0@@": "Pasirinkite, kokia aprėptis bus naudojama išvesties rastre:",
	"@@Exp10_Extent-Type_tag1@@": "Pirmiausia--Naudoti pirmojo įvesties rastro aprėptį nustatant apdorojimo aprėptį.",
	"@@Exp10_Extent-Type_tag2@@": "Sankirta--Naudoti persidengiančių pikselių aprėptį nustatant apdorojimo aprėptį. Tai numatytasis nustatymas.",
	"@@Exp10_Extent-Type_tag3@@": "Paskiausia--Naudoti paskutinio įvesties rastro aprėptį nustatant apdorojimo aprėptį.",
	"@@Exp10_Extent-Type_tag4@@": "Sąjunga--Naudoti visų rastrų aprėptį nustatant apdorojimo aprėptį.",
	"@@Exp10_Raster_tag0@@": "Įvesties reikšmės, kurioms ieškoma 10 pagrindo eksponentinė funkcija.",
	"@@Exp2_Cellsize-Type_tag0@@": "Pasirinkite, koks gardelės dydis bus naudojamas išvesties rastre. Jei visų įvesties gardelių dydžiai vienodi, visos parinktys pateiks vienodus rezultatus.",
	"@@Exp2_Cellsize-Type_tag1@@": "Pirmiausia--Naudoti pirmą įvesties rastrų gardelės dydį.",
	"@@Exp2_Cellsize-Type_tag2@@": "Paskiausia--Naudoti paskutinį įvesties rastrų gardelės dydį.",
	"@@Exp2_Cellsize-Type_tag3@@": "Didžiausias--Naudoti didžiausią įvesties rastrų gardelės dydį. Tai numatytasis nustatymas.",
	"@@Exp2_Cellsize-Type_tag4@@": "Vidutinis--Naudoti vidutinį visų įvesties rastrų gardelės dydį.",
	"@@Exp2_Cellsize-Type_tag5@@": "Mažiausias--Naudoti mažiausią įvesties rastrų gardelės dydį.",
	"@@Exp2_Extent-Type_tag0@@": "Pasirinkite, kokia aprėptis bus naudojama išvesties rastre:",
	"@@Exp2_Extent-Type_tag1@@": "Pirmiausia--Naudoti pirmojo įvesties rastro aprėptį nustatant apdorojimo aprėptį.",
	"@@Exp2_Extent-Type_tag2@@": "Sankirta--Naudoti persidengiančių pikselių aprėptį nustatant apdorojimo aprėptį. Tai numatytasis nustatymas.",
	"@@Exp2_Extent-Type_tag3@@": "Paskiausia--Naudoti paskutinio įvesties rastro aprėptį nustatant apdorojimo aprėptį.",
	"@@Exp2_Extent-Type_tag4@@": "Sąjunga--Naudoti visų rastrų aprėptį nustatant apdorojimo aprėptį.",
	"@@Exp2_Raster_tag0@@": "Įvesties reikšmės, kurioms ieškoma 2 pagrindo eksponentinė funkcija.",
	"@@Extract-Bands_Band_tag0@@": "Pasirinkite kanalus, kuriuos norite gauti iš sąrašo, remdamiesi naudojama parametro <strong>Method</strong> parinktimi.",
	"@@Extract-Bands_Combination_tag0@@": "Kanalų derinys arba kanalų eiliškumas. Pasirinkimų sąrašas priklauso nuo <strong>Metodas</strong> nurodytos parinkties. Pavyzdžiui, jei <strong>Method</strong> parinkta <strong>Band Names</strong>, galite pasirinkti mėlynos, žalios ir raudonos derinį, kad ištrauktumėte natūralios spalvos vaizdą.",
	"@@Extract-Bands_Method_tag0@@": "Kanalų išskyrimui pasirinkite vieną iš šių metodų:",
	"@@Extract-Bands_Method_tag1@@": "<strong>Band IDs</strong>--Kanalo paskirtis arba numeris, kuris kiekvienam jutikliui yra unikalus. Jie gali būti identiški <strong>Band Names</strong> nustatymui.",
	"@@Extract-Bands_Method_tag4@@": "<strong>Band Names</strong>--Naudoja kanalo pavadinimą, reprezentuojantį bangos ilgio intervalą elektromagnetiniame spektre (pavyzdžiui, raudona, šiluminė infraraudonoji). Tai galima paskirti ir kaip kanalo numerio ID.",
	"@@Extract-Bands_Method_tag6@@": "<strong>Band Wavelengths</strong>--Bangos ilgis elektromagnetiniame spektre.",
	"@@Extract-Bands_Missing-Band-Action_tag0@@": "Nurodykite veiksmą, kuris bus atliekamas, jei kanalas išskiriamų kanalų sąraše yra nepasiekiamas.",
	"@@Extract-Bands_Missing-Band-Action_tag1@@": "<strong>Best Match</strong>--Randa geriausią pasiekiamą kanalą, kuris bus naudojamas vietoj trūkstamo kanalo pagal bangos ilgį, kad funkcija nebūtų nutraukta",
	"@@Extract-Bands_Missing-Band-Action_tag3@@": "<strong>Fail</strong>--Jei įvesties duomenų rinkinyje trūksta bet kurio kanalo, nurodyto parametre <strong>Band</strong>, funkcija bus nutraukta.",
	"@@Extract-Bands_Raster_tag0@@": "Rastro produktas, iš kurio išskiriamas kanalas ar kanalai.",
	"@@Fill_Raster_tag0@@": "Vienas kanalo aukščio rastras.",
	"@@Fill_Z-Limit_tag0@@": "Maksimalus užpildomas aukščio skirtumas tarp įdubos ir jos nutekėjimo taško.",
	"@@Fill_Z-Limit_tag1@@": "Jei šiam parametrui nenurodyta reikšmė, bus užpildomos visos įdubos, neatsižvelgiant į gylį.",
	"@@Fill_Z-Limit_tag2@@": "<strong>Z Limit</strong> reikšmė turi būti didesnė už nulį.",
	"@@Float_Cellsize-Type_tag0@@": "Pasirinkite, koks gardelės dydis bus naudojamas išvesties rastre. Jei visų įvesties gardelių dydžiai vienodi, visos parinktys pateiks vienodus rezultatus.",
	"@@Float_Cellsize-Type_tag1@@": "Pirmiausia--Naudoti pirmą įvesties rastrų gardelės dydį.",
	"@@Float_Cellsize-Type_tag2@@": "Paskiausia--Naudoti paskutinį įvesties rastrų gardelės dydį.",
	"@@Float_Cellsize-Type_tag3@@": "Didžiausias--Naudoti didžiausią įvesties rastrų gardelės dydį. Tai numatytasis nustatymas.",
	"@@Float_Cellsize-Type_tag4@@": "Vidutinis--Naudoti vidutinį visų įvesties rastrų gardelės dydį.",
	"@@Float_Cellsize-Type_tag5@@": "Mažiausias--Naudoti mažiausią įvesties rastrų gardelės dydį.",
	"@@Float_Extent-Type_tag0@@": "Pasirinkite, kokia aprėptis bus naudojama išvesties rastre:",
	"@@Float_Extent-Type_tag1@@": "Pirmiausia--Naudoti pirmojo įvesties rastro aprėptį nustatant apdorojimo aprėptį.",
	"@@Float_Extent-Type_tag2@@": "Sankirta--Naudoti persidengiančių pikselių aprėptį nustatant apdorojimo aprėptį. Tai numatytasis nustatymas.",
	"@@Float_Extent-Type_tag3@@": "Paskiausia--Naudoti paskutinio įvesties rastro aprėptį nustatant apdorojimo aprėptį.",
	"@@Float_Extent-Type_tag4@@": "Sąjunga--Naudoti visų rastrų aprėptį nustatant apdorojimo aprėptį.",
	"@@Float_Raster_tag0@@": "Įvesties rastras bus konvertuojamas į slankiojo kablelio reikšmę.",
	"@@Flow-Accumulation_Flow-Direction-Raster_tag0@@": "Įvesties rastras, rodantis tėkmės iš kiekvienos gardelės kryptį.",
	"@@Flow-Accumulation_Flow-Direction-Raster_tag1@@": "Tėkmės krypties rastrą galima sukurti naudojant funkciją <strong>Flow Direction</strong>.",
	"@@Flow-Accumulation_Flow-Direction-Type_tag0@@": "Apibrėžkite įvesties srauto krypties rastro tipą.",
	"@@Flow-Accumulation_Flow-Direction-Type_tag1@@": "<strong>D8</strong>--Įvesties tėkmės krypties rastro tipas yra D8. Tai numatytasis nustatymas.",
	"@@Flow-Accumulation_Flow-Direction-Type_tag3@@": "<strong>DINF</strong>--Įvesties tėkmės krypties rastro tipas yra D-Infinity (DINF).",
	"@@Flow-Accumulation_Flow-Direction-Type_tag5@@": "<strong>MFD</strong>--Įvesties tėkmės krypties rastro tipas yra kelių tėkmių kryptis (MFD).",
	"@@Flow-Accumulation_Output-Data-Type_tag0@@": "Išvesties suminis rastras gali būti sveikojo skaičiaus arba slankiojo kablelio tipo.",
	"@@Flow-Accumulation_Output-Data-Type_tag1@@": "<strong>Float</strong>--Išvesties rastras bus slankiojo kablelio tipo. Tai numatytasis nustatymas.",
	"@@Flow-Accumulation_Output-Data-Type_tag3@@": "<strong>Integer</strong>--Išvesties rastras bus sveikojo skaičiaus tipo.",
	"@@Flow-Accumulation_Weight-Raster_tag0@@": "Neprivalomas įvesties rastras, skirtas kiekvienam pikseliui pritaikyti svorį.",
	"@@Flow-Accumulation_Weight-Raster_tag1@@": "Jei svorio rastras nenurodytas, kiekvienam pikseliui taikomas numatytasis svoris, lygus 1.",
	"@@Flow-Direction_Flow-Direction-Type_tag0@@": "Apibrėžkite įvesties srauto krypties rastro tipą.",
	"@@Flow-Direction_Flow-Direction-Type_tag1@@": "<strong>D8</strong><strong>D8</strong>--Įvesties tėkmės krypties rastro tipas yra D8. Tai numatytasis nustatymas.",
	"@@Flow-Direction_Flow-Direction-Type_tag3@@": "<strong>DINF</strong>--Įvesties tėkmės krypties rastro tipas yra D-Infinity (DINF).",
	"@@Flow-Direction_Flow-Direction-Type_tag5@@": "<strong>MFD</strong>--Įvesties tėkmės krypties rastro tipas yra kelių tėkmių kryptis (MFD).",
	"@@Flow-Direction_Force-all-edge-cells-to-flow-outward_tag0@@": "Nurodo, ar briaunos pikseliai visada tekės išorėn, ar paklus įprastinėms srovės taisyklėms.",
	"@@Flow-Direction_Force-all-edge-cells-to-flow-outward_tag1@@": "<strong>No</strong>--Jei maksimalus kritimas briaunos pikselio viduje didesnis nei nulis, tėkmės kryptis bus nustatoma įprastiniu būdu; kitu atveju tėkmės kryptis bus briaunos link. Pikseliai, kurie turėtų tekėti nuo paviršiaus rastro briaunos į vidų, taip ir elgsis. Tai numatytasis nustatymas.",
	"@@Flow-Direction_Force-all-edge-cells-to-flow-outward_tag3@@": "<strong>Yes</strong>--Visi paviršiaus rastro briaunos pikseliai tekės tolyn nuo paviršiaus rastro.",
	"@@Flow-Direction_Raster_tag0@@": "Įvesties rastras, reprezentuojantis nuolatinio aukštėjimo paviršių.",
	"@@Flow-Distance_Distance-Type_tag0@@": "Lemia, ar skaičiuojamas tėkmės atstumo vertikalus, ar horizontalus komponentas.",
	"@@Flow-Distance_Distance-Type_tag1@@": "<strong>Horizontal</strong>--Tėkmės atstumo skaičiavimai reprezentuoja tėkmės atstumo iš kiekvieno pikselio domene į pikselį (pikselius) tėkmėje, į kurią jie teka, horizontalų komponentą.",
	"@@Flow-Distance_Distance-Type_tag3@@": "<strong>Vertical</strong>--Tėkmės atstumo skaičiavimai reprezentuoja tėkmės atstumo iš kiekvieno pikselio domene į pikselį (pikselius) tėkmėje, į kurią jie teka, vertikalų komponentą. Tai numatytasis nustatymas.",
	"@@Flow-Distance_Flow-Direction-Raster_tag0@@": "Įvesties rastras, rodantis tėkmės iš kiekvieno pikselio kryptį.",
	"@@Flow-Distance_Flow-Direction-Raster_tag1@@": "Kai pateikiamas tėkmės krypties rastras, bus pasirinkta tik įvesties tėkmės krypčių nuolydžio kryptis (-ys).",
	"@@Flow-Distance_Flow-Direction-Raster_tag2@@": "Tėkmės krypties rastrą galima sukurti naudojant funkcija Tėkmės kryptis.",
	"@@Flow-Distance_Flow-Direction-Type_tag0@@": "Apibrėžkite įvesties srauto krypties rastro tipą.",
	"@@Flow-Distance_Flow-Direction-Type_tag1@@": "<strong>D8</strong><strong>D8</strong>--Įvesties tėkmės krypties rastro tipas yra D8. Tai numatytasis nustatymas.",
	"@@Flow-Distance_Flow-Direction-Type_tag3@@": "<strong>DINF</strong>--Įvesties tėkmės krypties rastro tipas yra D-Infinity (DINF).",
	"@@Flow-Distance_Flow-Direction-Type_tag5@@": "<strong>MFD</strong>--Įvesties tėkmės krypties rastro tipas yra kelių tėkmių kryptis (MFD).",
	"@@Flow-Distance_Statistics-Type_tag0@@": "Lemia statistikos tipą, naudojamą skaičiuojant tėkmės atstumą per įvairius tėkmės kelius. Jei iš kiekvienos gardelės į gardelę tėkmėje tėra vienas tėkmės kelias, visi statistikų tipai pateikia tokį patį rezultatą.",
	"@@Flow-Distance_Statistics-Type_tag1@@": "<strong>Minimum</strong>--Jei yra keli tėkmės keliai, skaičiuojamas minimalus tėkmės atstumas. Tai numatytasis nustatymas.",
	"@@Flow-Distance_Statistics-Type_tag3@@": "<strong>Weighted Mean</strong>--Jei yra keli tėkmės keliai, skaičiuojamas pasvertas vidutinis tėkmės atstumas. Skaičiuojant svertinį vidurkį, kaip svoris naudojamas tėkmės dalis iš gardelės į pasroviui esančias kaimynines gardeles.",
	"@@Flow-Distance_Statistics-Type_tag5@@": "<strong>Maximum</strong>--Jei yra keli tėkmės keliai, skaičiuojamas maksimalus tėkmės atstumas.",
	"@@Flow-Distance_Stream-Raster_tag0@@": "Įvesties tėkmės rastras, reprezentuojantis linijinį tėkmių tinklą.",
	"@@Flow-Distance_Surface-Raster_tag0@@": "Įvesties rastras, reprezentuojantis nuolatinio aukštėjimo paviršių.",
	"@@Flow-Length_Direction-of-Measurement_tag0@@": "Matavimo kryptis tėkmės kelio kryptimi.",
	"@@Flow-Length_Direction-of-Measurement_tag1@@": "<strong>Downstream</strong>--Skaičiuoja nuolydžio atstumą palei tėkmės kelią nuo kiekvienos gardelės iki įdubos arba išvesties rastro briaunoje.",
	"@@Flow-Length_Direction-of-Measurement_tag3@@": "<strong>Upstream</strong>--Skaičiuoja ilgiausią pakilimo atstumą palei tėkmės kelią nuo kiekvienos gardelės iki hidrografinio tinklo takoskyros viršaus.",
	"@@Flow-Length_Flow-Direction-Raster_tag0@@": "Įvesties rastras, rodantis tėkmės iš kiekvienos gardelės kryptį.",
	"@@Flow-Length_Flow-Direction-Raster_tag1@@": "Tėkmės krypties rastrą galima sukurti naudojant funkciją <strong>Flow Direction</strong>.",
	"@@Flow-Length_Weight-Raster_tag0@@": "Neprivalomas įvesties rastras, skirtas kiekvienai gardelei pritaikyti svorį.",
	"@@Flow-Length_Weight-Raster_tag1@@": "Jei svorio rastras nenurodytas, kiekvienai gardelei taikomas numatytasis svoris, lygus 1.",
	"@@Focal-Statistics_Ignore-NoData-in-calculations_tag0@@": "Nurodo, ar statistinis skaičiavimas ignoruoja reikšmes ${NoData}.",
	"@@Focal-Statistics_Ignore-NoData-in-calculations_tag1@@": "<strong>Checked</strong>--Nurodo, kad jei kaimynystėje yra reikšmė ${NoData}, ji (${NoData} reikšmė) bus ignoruojama. Nustatant išvesties reikšmę bus naudojamos tik tos kaimynystės gardelės, kurios turi duomenų reikšmes. Tai numatytasis nustatymas.",
	"@@Focal-Statistics_Ignore-NoData-in-calculations_tag3@@": "<strong>Unchecked</strong>--Nurodo, kad jei kaimynystėje yra gardelė su reikšme ${NoData}, apdorojimo gardelės išvestis bus ${NoData}.",
	"@@Focal-Statistics_Neighborhood_tag0@@": "Ploto aplink kiekvieną gardelę forma, naudojama statistikai skaičiuoti.",
	"@@Focal-Statistics_Neighborhood_tag1@@": "Kiekviena kaimynystė turi papildomų parametrų, kuriais apibrėžiama forma.",
	"@@Focal-Statistics_Neighborhood_tag2@@": "Žiedas, Vidinis spindulys, Išorinis spindulys",
	"@@Focal-Statistics_Neighborhood_tag3@@": "Žiedas, Spindulys",
	"@@Focal-Statistics_Neighborhood_tag4@@": "Netaisyklingas, Plotis, Aukštis, Kaimynystės reikšmės",
	"@@Focal-Statistics_Neighborhood_tag5@@": "Stačiakampis, Plotis, Aukštis",
	"@@Focal-Statistics_Neighborhood_tag6@@": "Pleištas, Spindulys, Pradinis kampas, Pabaigos kampas",
	"@@Focal-Statistics_Neighborhood_tag7@@": "Svoris, Plotis, Aukštis, Kaimynystės reikšmės",
	"@@Focal-Statistics_Neighborhood_tag8@@": "Netaisyklinga kaimynystė leidžia nurodyti netaisyklingos formos kaimynystę aplink apdorojimo gardelę. Kaimynystės branduolio formai apibrėžti naudokite Kaimynystės reikšmių lentelę. Gardelės padėties reikšmė, lygi 0, nurodo, kad gardelė nepriklauso kaimynystei, todėl ji nebus naudojama apdorojant duomenis. 1 lygi reikšmė nurodo, kad ją atitinkanti gardelė (ir jos reikšmė) priklauso kaimynystei.",
	"@@Focal-Statistics_Neighborhood_tag9@@": "Svorio kaimynystė, panašiai kaip ir netaisyklingo tipo leidžia apibrėžti netaisyklingos formos kaimynystę aplink apdorojimo gardelę, tačiau papildomai leidžia įvesties reikšmėms pritaikyti svorius. Svorio branduolyje esančios reikšmės nurodo, kurios gardelės padėtys turi būti įtrauktos į kaimynystę, ir svorius, iš kurių jų reikšmės turi būti dauginamos. Naudodami 0 lygią reikšmę pašalinsite gardelę iš apdorojimo apimties. Kaip svorį galite naudoti teigiamas, neigiamas ir dešimtaines reikšmes. Svorio kaimynystės tipas palaiko tik Vidurkio, Standartinio nuokrypio ir Sumos statistines operacijas.",
	"@@Focal-Statistics_Percentile-Value_tag0@@": "Nurodo, kokią procentinę dalį skaičiuoti, kai <strong>Percentile</strong> pasirenkamas kaip statistikos tipas. Numatytoji reikšmė yra 90 ir nurodo 90-ąją procentinę dalį.",
	"@@Focal-Statistics_Percentile-Value_tag3@@": "Tinkami reikšmių intervalai yra nuo 0 iki 100. 0-inė procentinė dalis iš esmės atitinka Minimumo statistiką, o 100 procentų ekvivalentas yra Maksimumas, išskyrus tai, kad pateikiamas rezultatas bus slankusis kablelis. 50 lygi reikšmė iš esmės pateiks analogiškus rezultatus kaip ir Medianos statistika.",
	"@@Focal-Statistics_Raster_tag0@@": "Būtinas įvesties rastras.",
	"@@Focal-Statistics_Statistics-Type_tag0@@": "Skaičiuotinas statistikos tipas.",
	"@@Focal-Statistics_Statistics-Type_tag1@@": "<strong>Majority</strong>--Skaičiuoja kaimynystės gardelių daugumą (dažniausiai pasitaikančią reikšmę)",
	"@@Focal-Statistics_Statistics-Type_tag3@@": "<strong>Maximum</strong>--Skaičiuoja kaimynystės gardelių maksimumą (didžiausią reikšmę).",
	"@@Focal-Statistics_Statistics-Type_tag5@@": "<strong>Mean</strong>--Skaičiuoja kaimynystės gardelių vidurkį (vidutinę reikšmę).",
	"@@Focal-Statistics_Statistics-Type_tag7@@": "<strong>Median</strong>--Skaičiuoja kaimynystės gardelių medianos reikšmę.",
	"@@Focal-Statistics_Statistics-Type_tag9@@": "<strong>Minimum</strong>--Skaičiuoja kaimynystės gardelių minimumą (mažiausią reikšmę).",
	"@@Focal-Statistics_Statistics-Type_tag11@@": "<strong>Minority</strong>--Skaičiuoja kaimynystės gardelių mažumą (rečiausiai pasitaikančią reikšmę).",
	"@@Focal-Statistics_Statistics-Type_tag13@@": "<strong>Percentile</strong>--Skaičiuoja kaimynystės gardelių procentinę dalį. Galite nustatyti, kokia procentinė dalis bus skaičiuojama, naudodami parametrą <strong>Percentile Value</strong>.",
	"@@Focal-Statistics_Statistics-Type_tag17@@": "<strong>Range</strong>--Skaičiuoja kaimynystės gardelių intervalą (skirtumą tarp didžiausios ir mažiausios reikšmių).",
	"@@Focal-Statistics_Statistics-Type_tag19@@": "<strong>Standard Deviation</strong>--Skaičiuoja kaimynystės gardelių standartinį nuokrypį.",
	"@@Focal-Statistics_Statistics-Type_tag21@@": "<strong>Sum</strong>--Skaičiuoja kaimynystės gardelių sumą (visų reikšmių sumą).",
	"@@Focal-Statistics_Statistics-Type_tag23@@": "<strong>Variety</strong>--Skaičiuoja kaimynystės gardelių įvairovę (unikalių reikšmių skaičių).",
	"@@Focal-Statistics_Statistics-Type_tag25@@": "Jei įvesties rastras yra slankiojo kablelio, galimos statistikos yra tik Vidurkis, Maksimumas, Mediana, Minimumas, Procentinė dalis, Intervalas, Standartinis nuokrypis ir Suma.",
	"@@Focal-Statistics_Statistics-Type_tag26@@": "Vidurkio, Medianos, Procentinės dalies ir Standartinio nuokrypio išvestis visada yra slankiojo kablelio.",
	"@@Focal-Statistics_Statistics-Type_tag27@@": "Numatytasis statistikos tipas yra Vidurkis.",
	"@@Geometric_Constant-Z_tag0@@": "Nurodykite pastovų aukštį, kuris bus naudojamas geometrijos funkcijai.",
	"@@Geometric_DEM_tag0@@": "Nurodykite DEM, kuris bus naudojamas geometrijos funkcijai. Mozaikos rinkinyje esantį DEM galite naudoti kaip rastrinį duomenų rinkinį arba kaip mozaikos rinkinį, kurio išvestis yra DEM.",
	"@@Geometric_Geoid_tag0@@": "Daugumos aukščio duomenų rinkinių, pvz., USGS NED ar ArcGIS Online, naudojamas pasaulio aukštis, yra ortometriniai aukščiai, todėl būtina pasirinkti geoido korekciją, kad būtų suderinama su palydovų RPC, kuriems būtini elipsoidiniai aukščiai. Pažymėkite  <strong>Geoid</strong> langelį, norėdami pritaikyti geoido (EGM96) korekciją z reikšmėms, nebent jūsų DEM jau nurodyti elipsoidiniai aukščiai.",
	"@@Geometric_Method_tag0@@": "Geometrinei funkcijai parinkite aukščio metodą:",
	"@@Geometric_Method_tag1@@": "Naudoti pastovų Z--Nurodykite pastovų aukštį, kuris bus naudojamas geometrijos funkcijai.",
	"@@Geometric_Method_tag2@@": "Naudoti DEM--Nurodykite DEM, kuris bus naudojamas geometrijos funkcijai.",
	"@@Geometric_Raster_tag0@@": "Įvesties rastras.",
	"@@Geometric_Z-Factor_tag0@@": "Palydovinių racionaliųjų polinominių koeficientų (RPC) masteliai pakeičiami į aukščio duomenų rinkinius, kurių aukščio matavimo vienetai yra metrai. Jei jūsų aukščio duomenyse naudojami kitokie matavimo vienetai, įveskite <strong>Z Factor</strong>, norėdami perskaičiuoti į metrus. Pavyzdžiui, jei jūsų aukščio vienetai yra pėdos, reikės naudoti reikšmę 0,3048, kad konvertuotumėte pėdas į metrus.",
	"@@Geometric_Z-Offset_tag0@@": "Bazinė reikšmė pridedama prie aukščio reikšmės DEM. Tai galima panaudoti, kai reikia taisyti aukščio reikšmes, matuojamas ne nuo jūros lygio.",
	"@@Geometric_Tolerance_tag0@@": "Nurodykite didžiausią leistiną geometrinės funkcijos paklaidą, išreikštą pikselių skaičiumi. Numatytasis NITF (NCDRD) rastro tipas yra du.",
	"@@Grayscale_Raster_tag0@@": "Įvesties rastras.",
	"@@Grayscale_Conversion-Parameters_tag0@@": "Kiekvieno kanalo svoris sudaro įvesties rastrą.",
	"@@Greater-Than_Cellsize-Type_tag0@@": "Pasirinkite, koks gardelės dydis bus naudojamas išvesties rastre. Jei visų įvesties gardelių dydžiai vienodi, visos parinktys pateiks vienodus rezultatus.",
	"@@Greater-Than_Cellsize-Type_tag1@@": "Pirmiausia--Naudoti pirmą įvesties rastrų gardelės dydį.",
	"@@Greater-Than_Cellsize-Type_tag2@@": "Paskiausia--Naudoti paskutinį įvesties rastrų gardelės dydį.",
	"@@Greater-Than_Cellsize-Type_tag3@@": "Didžiausias--Naudoti didžiausią įvesties rastrų gardelės dydį. Tai numatytasis nustatymas.",
	"@@Greater-Than_Cellsize-Type_tag4@@": "Vidutinis--Naudoti vidutinį visų įvesties rastrų gardelės dydį.",
	"@@Greater-Than_Cellsize-Type_tag5@@": "Mažiausias--Naudoti mažiausią įvesties rastrų gardelės dydį.",
	"@@Greater-Than_Extent-Type_tag0@@": "Pasirinkite, kokia aprėptis bus naudojama išvesties rastre:",
	"@@Greater-Than_Extent-Type_tag1@@": "Pirmiausia--Naudoti pirmojo įvesties rastro aprėptį nustatant apdorojimo aprėptį.",
	"@@Greater-Than_Extent-Type_tag2@@": "Sankirta--Naudoti persidengiančių pikselių aprėptį nustatant apdorojimo aprėptį. Tai numatytasis nustatymas.",
	"@@Greater-Than_Extent-Type_tag3@@": "Paskiausia--Naudoti paskutinio įvesties rastro aprėptį nustatant apdorojimo aprėptį.",
	"@@Greater-Than_Extent-Type_tag4@@": "Sąjunga--Naudoti visų rastrų aprėptį nustatant apdorojimo aprėptį.",
	"@@Greater-Than_Raster_tag0@@": "Įvestis patikrinama siekiant nustatyti, ar ji didesnė nei antroji įvestis.",
	"@@Greater-Than_Raster_tag1@@": "Šiam parametrui kaip įvestį galima naudoti konstantos reikšmę, jei kitam parametrui nurodytas rastras.",
	"@@Greater-Than_Raster2_tag0@@": "Įvestis, su kuria lyginama ir už kurią didesnė turi būti pirmoji įvestis.",
	"@@Greater-Than_Raster2_tag1@@": "Šiam parametrui kaip įvestį galima naudoti konstantos reikšmę, jei kitam parametrui nurodytas rastras.",
	"@@Greater-Than-Equal_Cellsize-Type_tag0@@": "Pasirinkite, koks gardelės dydis bus naudojamas išvesties rastre. Jei visų įvesties gardelių dydžiai vienodi, visos parinktys pateiks vienodus rezultatus.",
	"@@Greater-Than-Equal_Cellsize-Type_tag1@@": "Pirmiausia--Naudoti pirmą įvesties rastrų gardelės dydį.",
	"@@Greater-Than-Equal_Cellsize-Type_tag2@@": "Paskiausia--Naudoti paskutinį įvesties rastrų gardelės dydį.",
	"@@Greater-Than-Equal_Cellsize-Type_tag3@@": "Didžiausias--Naudoti didžiausią įvesties rastrų gardelės dydį. Tai numatytasis nustatymas.",
	"@@Greater-Than-Equal_Cellsize-Type_tag4@@": "Vidutinis--Naudoti vidutinį visų įvesties rastrų gardelės dydį.",
	"@@Greater-Than-Equal_Cellsize-Type_tag5@@": "Mažiausias--Naudoti mažiausią įvesties rastrų gardelės dydį.",
	"@@Greater-Than-Equal_Extent-Type_tag0@@": "Pasirinkite, kokia aprėptis bus naudojama išvesties rastre:",
	"@@Greater-Than-Equal_Extent-Type_tag1@@": "Pirmiausia--Naudoti pirmojo įvesties rastro aprėptį nustatant apdorojimo aprėptį.",
	"@@Greater-Than-Equal_Extent-Type_tag2@@": "Sankirta--Naudoti persidengiančių pikselių aprėptį nustatant apdorojimo aprėptį. Tai numatytasis nustatymas.",
	"@@Greater-Than-Equal_Extent-Type_tag3@@": "Paskiausia--Naudoti paskutinio įvesties rastro aprėptį nustatant apdorojimo aprėptį.",
	"@@Greater-Than-Equal_Extent-Type_tag4@@": "Sąjunga--Naudoti visų rastrų aprėptį nustatant apdorojimo aprėptį.",
	"@@Greater-Than-Equal_Raster_tag0@@": "Įvestis patikrinama siekiant nustatyti, ar ji didesnė arba lygi antrajai įvesčiai.",
	"@@Greater-Than-Equal_Raster_tag1@@": "Šiam parametrui kaip įvestį galima naudoti konstantos reikšmę, jei kitam parametrui nurodytas rastras.",
	"@@Greater-Than-Equal_Raster2_tag0@@": "Įvestis, su kuria lyginama ir už kurią didesnė arba jai lygi turi būti pirmoji įvestis.",
	"@@Greater-Than-Equal_Raster2_tag1@@": "Šiam parametrui kaip įvestį galima naudoti konstantos reikšmę, jei kitam parametrui nurodytas rastras.",
	"@@Heat-Index_Heat-Index-Units_tag0@@": "Su išvesties rastru susieti matavimo vienetai. Galimi išvesties vienetai: Celsijaus, Farenheito ir Kelvino laipsniai.",
	"@@Heat-Index_Relative-Humidity-Raster_tag0@@": "Vieno kanalo rastras, kurio pikselių reikšmės reprezentuoja santykinį drėgnumą kaip procentinę reikšmę nuo 0 iki 100.",
	"@@Heat-Index_Temperature-Raster_tag0@@": "Vieno kanalo rastras, kurio pikselių reikšmės reprezentuoja aplinkos oro temperatūrą.",
	"@@Heat-Index_Temperature-Units_tag0@@": "Su įvesties temperatūros rastru susieti matavimo vienetai. Galimi įvesties vienetai: Celsijaus, Farenheito ir Kelvino laipsniai.",
	"@@Hillshade_Altitude_tag0@@": "Aukštis yra Saulės pakilimo virš horizonto kampas. Jis gali būti nuo 0 iki 90 laipsnių. 0 laipsnių reikšmė rodo, kad Saulė yra horizonte, t. y. toje pačioje horizontalioje plokštumoje kaip ir atskaitos taškas. 90 laipsnių reikšmė rodo, kad Saulė yra tiesiai virš galvos.",
	"@@Hillshade_Altitude_tag1@@": "Šis parametras tinkamas tik, jei <strong>Hillshade Type</strong> nustatytas kaip <strong>Traditional</strong> . Numatytoji reikšmė yra 44 laipsniai virš horizonto.",
	"@@Hillshade_Azimuth_tag0@@": "Azimutas yra santykinė Saulės padėtis ties horizontu (laipsniais). Šią padėtį nurodo laipsnis, kiek Saulė nutolusi nuo šiaurės laikrodžio rodyklės kryptimi. 0 laipsnių azimutas nurodo šiaurę, rytai yra 90 laipsnių, pietūs yra 180 laipsnių, o vakarai ties 270 laipsnių.",
	"@@Hillshade_Azimuth_tag1@@": "Šis parametras tinkamas tik, jei <strong>Hillshade Type</strong> nustatytas kaip <strong>Traditional</strong> . Numatytoji reikšmė yra 315 laipsnių, šiaurės vakaruose.",
	"@@Hillshade_Disable-default-edge-pixel-interpolation_tag0@@": "Šios parinkties naudojimas leidžia išvengti perskaičiavimo artefaktų, kurie gali pasirodyti ties rastro briaunomis. Išvesties pikseliai palei rastro briauną arba šalia NoData pikselių automatiškai užpildomi kaip NoData. Todėl rekomenduojama šį parametrą naudoti tik aukščio mozaikos rinkiniams, kuriuose yra persidengimas. Jei yra persidengiančių pikselių, NoData teritorijose rodomos persidengiančių pikselių reikšmės, o ne tuščių.",
	"@@Hillshade_Disable-default-edge-pixel-interpolation_tag1@@": "Nepažymėta--Bitiesinis perskaičiavimas bus taikomas universaliai perskaičiuojant jūsų šešėliavimą. Šią parinktį naudokite tada, kai mozaikos rinkinys, kuriame yra jūsų aukščio rastriniai duomenys, yra sujungtas galais. Tai numatytasis nustatymas.",
	"@@Hillshade_Disable-default-edge-pixel-interpolation_tag2@@": "Pažymėta--Bitiesinis perskaičiavimas bus naudojamas šešėliuojant, išskyrus palei rastrų briaunas ir šalia NoData pikselių. Tie pikseliai bus automatiškai užpildyti kaip NoData ir rodys persidengiančių pikselių reikšmes, taip sušvelnindami aštrių briaunų efektus, kurie galėtų atsirasti. Šią parinktį naudokite tada, kai mozaikos rinkinį, kuriame yra jūsų aukščio rastriniai duomenys, sudaro persidengiantys elementai arba išklotinės.",
	"@@Hillshade_Disable-default-edge-pixel-interpolation_tag3@@": "Funkcijos pateikiami rezultatai gali priklausyti nuo duomenų. Jei savo išvestyje matote išklotinių ribų artefaktus, pažymėkite alternatyvią žymės langelio sąlygą.",
	"@@Hillshade_Hillshade-Type_tag0@@": "Valdo šešėliavimo apšvietimo šaltinį:",
	"@@Hillshade_Hillshade-Type_tag1@@": "Tradicinis--Skaičiuoja šešėliavimą naudojant vieną apšvietimo kryptį. Tai yra numatytasis nustatymas. Nustatykite <strong>Azimuth</strong> ir <strong>Altitude</strong> , norėdami valdyti šviesos šaltinio padėtį.",
	"@@Hillshade_Hillshade-Type_tag6@@": "Daugiakryptis--Apjungia šviesą iš kelių šaltinių, kad parodytų pagerintą teritorijos vaizdą.",
	"@@Hillshade_Pixel-Size-Factor_tag0@@": "Pikselio dydžio faktorius atsižvelgia į mastelį, kai žiūrovas artina ar tolina žemėlapio atvaizdavimą. Ši funkcija valdo, kaip sparčiai kinta <strong>Z Factor</strong> .",
	"@@Hillshade_Pixel-Size-Factor_tag3@@": "Šis parametras tinkamas tik, jei <strong>Scaling</strong> nustatytas kaip <strong>Adjusted</strong> . Numatytoji reikšmė yra 0,024.",
	"@@Hillshade_Pixel-Size-Power_tag0@@": "Pikselio dydžio įtaka atsižvelgia į aukščio pokyčius (ar mastelį), kai žiūrovas artina ar tolina žemėlapio atvaizdavimą. Tai yra eksponentinė funkcija, pritaikoma pikselio dydžio trukmei lygtyje, kuri valdo, kaip sparčiai kinta <strong>Z Factor</strong> , kad būtų išvengta ženklaus reljefo netekimo.",
	"@@Hillshade_Pixel-Size-Power_tag3@@": "Šis parametras tinkamas tik, jei <strong>Scaling</strong> nustatytas kaip <strong>Adjusted</strong>. Numatytoji reikšmė yra 0,664.",
	"@@Hillshade_Raster_tag0@@": "Įvesties aukščio duomenų rinkinys.",
	"@@Hillshade_Scaling_tag0@@": "Šešėliuoto rezultato mastelis dinamiškai keičiamas koreguojant z faktorių. Tam naudojama viena iš dviejų parinkčių:",
	"@@Hillshade_Scaling_tag1@@": "Koreguotas--Pritaikomas nelinijinis koregavimas naudojant numatytąsias <strong>Pixel Size Power</strong> ir <strong>Pixel Size Factor</strong> reikšmes, kurios prisitaiko prie įvairiausių aukščio (mastelio) pokyčių žiūrovui artinant ir tolinant vaizdą. Parametro <strong>Adjusted</strong> nustatymas rekomenduojamas tada, kai naudojate pasaulio duomenų rinkinį.",
	"@@Hillshade_Scaling_tag8@@": "Jokio--Nepritaikomas joks mastelio keitimas. Tai tobulai tinka vienam rastriniam duomenų rinkiniui, apimančiam vietinę teritoriją. Nerekomenduojama šios parinkties naudoti pasaulio duomenų rinkiniams su dideliais aukščio pokyčiais bei įvairaus mastelio žemėlapiais, kadangi tokiais atvejais gaunamo teritorijos reljefo pokyčiai maži esant smulkiam masteliui.",
	"@@Hillshade_Z-Factor_tag0@@": "Z faktorius – tai proporcingumo koeficientas, naudojamas konvertuojant aukščių reikšmes šiais dviem tikslais:",
	"@@Hillshade_Z-Factor_tag1@@": "Konvertuoti aukščio vienetus (pvz., metrus ar pėdas) į duomenų rinkinio horizontaliosios ašies vienetus – pėdas, metrus ar laipsnius",
	"@@Hillshade_Z-Factor_tag2@@": "Pridėti vertikalų padidinimą geresniam vizualiniam efektui.",
	"@@Int_Cellsize-Type_tag0@@": "Pasirinkite, koks gardelės dydis bus naudojamas išvesties rastre. Jei visų įvesties gardelių dydžiai vienodi, visos parinktys pateiks vienodus rezultatus.",
	"@@Int_Cellsize-Type_tag1@@": "Pirmiausia--Naudoti pirmą įvesties rastrų gardelės dydį.",
	"@@Int_Cellsize-Type_tag2@@": "Paskiausia--Naudoti paskutinį įvesties rastrų gardelės dydį.",
	"@@Int_Cellsize-Type_tag3@@": "Didžiausias--Naudoti didžiausią įvesties rastrų gardelės dydį. Tai numatytasis nustatymas.",
	"@@Int_Cellsize-Type_tag4@@": "Vidutinis--Naudoti vidutinį visų įvesties rastrų gardelės dydį.",
	"@@Int_Cellsize-Type_tag5@@": "Mažiausias--Naudoti mažiausią įvesties rastrų gardelės dydį.",
	"@@Int_Extent-Type_tag0@@": "Pasirinkite, kokia aprėptis bus naudojama išvesties rastre:",
	"@@Int_Extent-Type_tag1@@": "Pirmiausia--Naudoti pirmojo įvesties rastro aprėptį nustatant apdorojimo aprėptį.",
	"@@Int_Extent-Type_tag2@@": "Sankirta--Naudoti persidengiančių pikselių aprėptį nustatant apdorojimo aprėptį. Tai numatytasis nustatymas.",
	"@@Int_Extent-Type_tag3@@": "Paskiausia--Naudoti paskutinio įvesties rastro aprėptį nustatant apdorojimo aprėptį.",
	"@@Int_Extent-Type_tag4@@": "Sąjunga--Naudoti visų rastrų aprėptį nustatant apdorojimo aprėptį.",
	"@@Int_Raster_tag0@@": "Įvesties rastras, kuris bus konvertuojamas į sveikąjį skaičių.",
	"@@Interpolate-Irregular-Data_Cellsize_tag0@@": "Išvesties rastro gardelės dydis bus aptinkamas automatiškai, tačiau galima šį nustatymą pakeisti. Nors gardelės dydį galima keisti, rastrinio duomenų rinkinio aprėptis liks tokia pati.",
	"@@Interpolate-Irregular-Data_Input-Samples_tag0@@": "Įvesties taškų duomenys.",
	"@@Interpolate-Irregular-Data_Interpolation-Method_tag0@@": "Ši funkcija turi keturis perskaičiavimo metodus:",
	"@@Interpolate-Irregular-Data_Interpolation-Method_tag1@@": "<strong>Inverse Distance Weighted</strong>--Nustato gardelių reikšmes naudodamas linijiniu būdu pasvertą pavyzdžio taškų arba gardelių rinkinio derinį. Svoris yra atvirkščiai proporcingo atstumo nuo žinomų taškų ar gardelių funkcija.",
	"@@Interpolate-Irregular-Data_Interpolation-Method_tag3@@": "<strong>Linear Tinning</strong>--Naudoja trianguliacinį netaisyklingą tinklą, kurį sudaro kiekvienos netaisyklingo rastro gardelės centro taškai, interpoliuoti paviršių, kurį konvertuoja į įprastinį rastrą.",
	"@@Interpolate-Irregular-Data_Interpolation-Method_tag5@@": "<strong>Natural Neighbor</strong>--Randa artimiausią užklausos taškui įvesties pavyzdžių poaibį ir jiems pritaiko svorius, atsižvelgdamas į proporcingas teritorijas, kad interpoliuotų reikšmę.",
	"@@Interpolate-Irregular-Data_Interpolation-Method_tag7@@": "<strong>Nearest Neighbor</strong>--Skaičiuoja pikselio reikšmę naudodamas artimiausią pikselį. Jei nėra šaltinio pikselio, išvestyje negalima sukurti naujo pikselio. Tai numatytasis nustatymas.",
	"@@Interpolate-Irregular-Data_Search-Radius_tag0@@": "Identifikuota, kiek pikselių bus įtraukta pasirinktame perskaičiavimo metode. Numatytoji reikšmė yra ${3} pikseliai.",
	"@@Interpolate-Irregular-Data_Value-Field_tag0@@": "Jei kaip įvestį pasirenkate taškų elementų klasę, turėsite identifikuoti atributų lentelės lauką, kuriame yra taškų reikšmė.",
	"@@Is-Null_Cellsize-Type_tag0@@": "Pasirinkite, koks gardelės dydis bus naudojamas išvesties rastre. Jei visų įvesties gardelių dydžiai vienodi, visos parinktys pateiks vienodus rezultatus.",
	"@@Is-Null_Cellsize-Type_tag1@@": "Pirmiausia--Naudoti pirmą įvesties rastrų gardelės dydį.",
	"@@Is-Null_Cellsize-Type_tag2@@": "Paskiausia--Naudoti paskutinį įvesties rastrų gardelės dydį.",
	"@@Is-Null_Cellsize-Type_tag3@@": "Didžiausias--Naudoti didžiausią įvesties rastrų gardelės dydį. Tai numatytasis nustatymas.",
	"@@Is-Null_Cellsize-Type_tag4@@": "Vidutinis--Naudoti vidutinį visų įvesties rastrų gardelės dydį.",
	"@@Is-Null_Cellsize-Type_tag5@@": "Mažiausias--Naudoti mažiausią įvesties rastrų gardelės dydį.",
	"@@Is-Null_Extent-Type_tag0@@": "Pasirinkite, kokia aprėptis bus naudojama išvesties rastre:",
	"@@Is-Null_Extent-Type_tag1@@": "Pirmiausia--Naudoti pirmojo įvesties rastro aprėptį nustatant apdorojimo aprėptį.",
	"@@Is-Null_Extent-Type_tag2@@": "Sankirta--Naudoti persidengiančių pikselių aprėptį nustatant apdorojimo aprėptį. Tai numatytasis nustatymas.",
	"@@Is-Null_Extent-Type_tag3@@": "Paskiausia--Naudoti paskutinio įvesties rastro aprėptį nustatant apdorojimo aprėptį.",
	"@@Is-Null_Extent-Type_tag4@@": "Sąjunga--Naudoti visų rastrų aprėptį nustatant apdorojimo aprėptį.",
	"@@Is-Null_Raster_tag0@@": "Įvesties rastras testuojamas siekiant identifikuoti gardeles, kurios yra ${NoData} (nulinės).",
	"@@Is-Null_Raster_tag1@@": "Įvestis gali būti sveikojo skaičiaus arba slankiojo kablelio tipo.",
	"@@Key-Metadata_Band-Names_tag0@@": "Ši funkcija naudojama pakeisti rastro kanalų pavadinimus. Tai yra kableliais atskirta eilutė, kurioje yra atnaujinti kanalų pavadinimai.",
	"@@Key-Metadata_Band-Names_tag1@@": "Šis parametras neprivalomas.",
	"@@Key-Metadata_Metadata-JSON_tag0@@": "Pagrindiniai metaduomenys, kurie bus pateikiami į išeinantį rastrą. Jie aprašomi kaip JSON eilutė, kurią sudaro pagrindinių reikšmių porų rinkinys. Toliau pateiktas JSON eilutės, kurią galima naudoti kaip šios funkcijos įvestį, pavyzdys. Visos šio parametro įvestys turėtų būti tokio pat formato.",
	"@@Key-Metadata_Metadata-JSON_tag1@@": "JSON eilutė su pagrindiniais metaduomenimis",
	"@@Key-Metadata_Metadata-JSON_tag2@@": "{ \"CloudCover\": 4, \"BandProperties\":[ { \"BandName\": \"Blue\", \"WavelengthMin\": 445, \"WavelengthMax\": 516 }, { \"BandName\": \"Green\", \"WavelengthMin\": 506, \"WavelengthMax\": 595 }, ]}",
	"@@Key-Metadata_Property-Name_tag0@@": "Pakeistinos duomenų rinkinio lygio pagrindinės savybės pavadinimas.",
	"@@Key-Metadata_Raster_tag0@@": "Rastras arba mozaikos rinkinys, kuriame yra pagrindiniai metaduomenys, kuriuos norite įterpti arba pakeisti.",
	"@@Key-Metadata_Value_tag0@@": "Pakeičianti duomenų rinkinio lygio savybės reikšmė, kurią norite nustatyti.",
	"@@Least-Cost-Path_Accumulative-Cost-Resistance-Rate_tag0@@": "Šis parametras simuliuoja, kaip didėjant suminėms išlaidoms auga pastangos kompensuoti sąnaudas. Jis naudojamas keliautojo nuovargiui modeliuoti. Augančios suminės sąnaudos pasiekti gardelę padauginamos iš pasipriešinimo koeficiento ir pridedamos prie išlaidų perėjimui į kitą gardelę.",
	"@@Least-Cost-Path_Accumulative-Cost-Resistance-Rate_tag1@@": "Tai yra modifikuota sudėtinių palūkanų koeficiento formulės, naudojamos skaičiuojant matomas judėjimo per gardelę išlaidas, versija. Didėjant pasipriešinimo koeficiento reikšmei, ji kelia toliau lankomų gardelių sąnaudas. Kuo didesnis pasipriešinimo koeficientas, tuo didesnės išlaidos norit pasiekti kitą gardelę, ir jos susideda kiekvienam tolesniam judesiui. Kadangi pasipriešinimo koeficientas panašus į sudėtinį koeficientą, o suminių sąnaudų reikšmės paprastai labai didelės, rekomenduojama naudoti mažus pasipriešinimo koeficientus, pavyzdžiui, 0,005 ar net mažesnius, atsižvelgiant į suminių sąnaudų reikšmes.",
	"@@Least-Cost-Path_Accumulative-Cost-Resistance-Rate_tag2@@": "Reikšmė turi būti didesnė už nulį. Numatytoji apimtis yra matuojama iki išvesties rastro briaunos.",
	"@@Least-Cost-Path_Capacity_tag0@@": "Šaltiniui apibrėžia keliautojo išlaidų apimtį. Išlaidų skaičiavimai tęsiami kiekvienam šaltiniui, kol pasiekiama nurodyta apimtis.",
	"@@Least-Cost-Path_Capacity_tag1@@": "Reikšmė turi būti didesnė už nulį. Numatytoji apimtis yra matuojama iki išvesties rastro briaunos.",
	"@@Least-Cost-Path_Cost-Raster_tag0@@": "Būtinas įvesties rastras, apibrėžiantis planimetriško judėjimo per kiekvieną gardelę sąnaudas arba trukdžius. Kiekvienos gardelės padėties reikšmė atspindi sąnaudos vienetui atstumą judant per gardelę. Kiekvienos gardelės padėties reikšmė dauginama iš gardelės skiriamosios gebos, kompensuojant už judėjimą įstrižai, ir gaunama bendrųjų sąnaudų kertant gardelę suma.",
	"@@Least-Cost-Path_Cost-Raster_tag1@@": "<strong>Cost Raster</strong> reikšmės gali būti sveikieji skaičiai arba skaičiai su slankiuoju kableliu, tačiau ne neigiamos ir ne nulinės reikšmės.",
	"@@Least-Cost-Path_Destination-Field_tag0@@": "Laukas, naudojamas gauti paskirties vietų reikšmes.",
	"@@Least-Cost-Path_Destination-Raster_tag0@@": "Būtinas įvesties rastras, identifikuojantis pikselius, iš kurių nustatytas ekonomiškiausias kelias iki pigiausios paskirties vietos. Šią įvestį sudaro tinkamas reikšmes turintys pikseliai, kitiems pikseliams reikia priskirti ${NoData}. 0 lygios reikšmės yra tinkamos.",
	"@@Least-Cost-Path_Maximum-Distance_tag0@@": "Riba, kurios negali viršyti suminių sąnaudų reikšmės. Jei suminių sąnaudų atstumas viršija šią reikšmę, gardelės padėties išvesties reikšmė bus ${NoData}. Maksimalus atstumas apibrėžia aprėptį, kuriai skaičiuojami suminiai sąnaudų atstumai. Numatytasis atstumas yra matuojamas iki išvesties rastro aprėpties.",
	"@@Least-Cost-Path_Multiplier-to-Apply-to-Costs_tag0@@": "Šis parametras leidžia šaltinyje valdyti kelionės modelį arba stiprumą. Kuo daugiklis didesnis, tuo didesnės išlaidos keliauti per kiekvieną gardelę.",
	"@@Least-Cost-Path_Multiplier-to-Apply-to-Costs_tag1@@": "Reikšmės turi būti didesnės už nulį. Numatytoji reikšmė yra 1.",
	"@@Least-Cost-Path_Path-Type_tag0@@": "Raktažodis, nustatantis būdą, pagal kurį skaičiuojant maršrutų kainas bus interpretuojamos įvesties paskirties vietų duomenų reikšmės ir zonos:",
	"@@Least-Cost-Path_Path-Type_tag1@@": "<strong>Best Single</strong>--Visiems pikseliams įvesties paskirties vietų duomenyse ekonomiškiausias kelias apskaičiuojamas iš pikselio, turinčio mažiausiai ekonomiškiausių kelių į šaltinio gardeles.",
	"@@Least-Cost-Path_Path-Type_tag3@@": "<strong>Each Cell</strong>--Kiekvienam įvesties paskirties vietos duomenų pikseliui, turinčiam tinkamą reikšmę, nustatomas ekonomiškiausias kelias ir įrašomas į išvesties rastrą. Kiekviena įvesties paskirties vietos duomenų gardelė apdorojama atskirai ir kiekvienai iš jų nustatomas ekonomiškiausias kelias.",
	"@@Least-Cost-Path_Path-Type_tag5@@": "<strong>Each Zone</strong>--Kiekvienai įvesties paskirties vietos zonai nustatomas ekonomiškiausias kelias ir įrašomas į išvesties rastrą. Kiekvienai zonai skirtas mažiausios kainos maršrutas prasideda pikselyje su mažiausių sąnaudų atstumo svoriu zonoje.",
	"@@Least-Cost-Path_Source-Raster_tag0@@": "Tai yra būtinas įvesties rastras, kuris identifikuoja gardeles ar padėtis, iš kurių skaičiuojamas mažiausias suminis sąnaudų atstumas kiekvienai išvesties gardelės padėčiai.",
	"@@Least-Cost-Path_Start-Cost_tag0@@": "Pradinė kaina, nuo kurios pradedami išlaidų skaičiavimai. Šis parametras leidžia nurodyti fiksuotą su šaltiniu susijusią kainą. Užuot pradėjęs nuo 0 lygios kainos, išlaidų skaičiavimo algoritmas pradės nuo nurodytos reikšmės.",
	"@@Least-Cost-Path_Start-Cost_tag1@@": "Reikšmė turi būti lygi nuliui arba didesnė. Numatytoji reikšmė yra 0.",
	"@@Least-Cost-Path_Travel-Direction_tag0@@": "Apibrėžia keliautojo kryptį taikant šaltinio pasipriešinimo koeficientą bei pradinę šaltinio kainą.",
	"@@Least-Cost-Path_Travel-Direction_tag1@@": "<strong>From Source</strong>--Šaltinio pasipriešinimo koeficientas ir šaltinio pradinė kaina bus pritaikyti ties įvesties šaltiniu ir iškeliaujant į šaltiniui nepriklausančias gardeles. Tai numatytasis nustatymas.",
	"@@Least-Cost-Path_Travel-Direction_tag3@@": "<strong>To Source</strong>--Šaltinio pasipriešinimo koeficientas ir šaltinio pradinė kaina bus pritaikyti ties kiekviena šaltiniui nepriklausančia gardele ir grįžtant į įvesties šaltinį.",
	"@@Least-Cost-Path_Travel-Direction_tag5@@": "Nurodykite raktažodį <strong>From Source</strong> arba <strong>To Source</strong>, kuris bus taikomas visiems šaltiniams, arba nurodykite <strong>Source Raster</strong> lauką, kuriame yra raktažodžiai, leidžiantys kiekvienam šaltiniui identifikuoti kelionės kryptį. Tame lauke turi būti eilutė ${FROM_SOURCE} arba ${TO_SOURCE}.",
	"@@Less-Than_Cellsize-Type_tag0@@": "Pasirinkite, koks gardelės dydis bus naudojamas išvesties rastre. Jei visų įvesties gardelių dydžiai vienodi, visos parinktys pateiks vienodus rezultatus.",
	"@@Less-Than_Cellsize-Type_tag1@@": "Pirmiausia--Naudoti pirmą įvesties rastrų gardelės dydį.",
	"@@Less-Than_Cellsize-Type_tag2@@": "Paskiausia--Naudoti paskutinį įvesties rastrų gardelės dydį.",
	"@@Less-Than_Cellsize-Type_tag3@@": "Didžiausias--Naudoti didžiausią įvesties rastrų gardelės dydį. Tai numatytasis nustatymas.",
	"@@Less-Than_Cellsize-Type_tag4@@": "Vidutinis--Naudoti vidutinį visų įvesties rastrų gardelės dydį.",
	"@@Less-Than_Cellsize-Type_tag5@@": "Mažiausias--Naudoti mažiausią įvesties rastrų gardelės dydį.",
	"@@Less-Than_Extent-Type_tag0@@": "Pasirinkite, kokia aprėptis bus naudojama išvesties rastre:",
	"@@Less-Than_Extent-Type_tag1@@": "Pirmiausia--Naudoti pirmojo įvesties rastro aprėptį nustatant apdorojimo aprėptį.",
	"@@Less-Than_Extent-Type_tag2@@": "Sankirta--Naudoti persidengiančių pikselių aprėptį nustatant apdorojimo aprėptį. Tai numatytasis nustatymas.",
	"@@Less-Than_Extent-Type_tag3@@": "Paskiausia--Naudoti paskutinio įvesties rastro aprėptį nustatant apdorojimo aprėptį.",
	"@@Less-Than_Extent-Type_tag4@@": "Sąjunga--Naudoti visų rastrų aprėptį nustatant apdorojimo aprėptį.",
	"@@Less-Than_Raster_tag0@@": "Įvestis patikrinama siekiant nustatyti, ar ji mažesnė nei antroji įvestis.",
	"@@Less-Than_Raster_tag1@@": "Šiam parametrui kaip įvestį galima naudoti konstantos reikšmę, jei kitam parametrui nurodytas rastras.",
	"@@Less-Than_Raster2_tag0@@": "Įvestis, su kuria lyginama ir už kurią mažesnė turi būti pirmoji įvestis.",
	"@@Less-Than_Raster2_tag1@@": "Šiam parametrui kaip įvestį galima naudoti konstantos reikšmę, jei kitam parametrui nurodytas rastras.",
	"@@Less-Than-Equal_Cellsize-Type_tag0@@": "Pasirinkite, koks gardelės dydis bus naudojamas išvesties rastre. Jei visų įvesties gardelių dydžiai vienodi, visos parinktys pateiks vienodus rezultatus.",
	"@@Less-Than-Equal_Cellsize-Type_tag1@@": "Pirmiausia--Naudoti pirmą įvesties rastrų gardelės dydį.",
	"@@Less-Than-Equal_Cellsize-Type_tag2@@": "Paskiausia--Naudoti paskutinį įvesties rastrų gardelės dydį.",
	"@@Less-Than-Equal_Cellsize-Type_tag3@@": "Didžiausias--Naudoti didžiausią įvesties rastrų gardelės dydį. Tai numatytasis nustatymas.",
	"@@Less-Than-Equal_Cellsize-Type_tag4@@": "Vidutinis--Naudoti vidutinį visų įvesties rastrų gardelės dydį.",
	"@@Less-Than-Equal_Cellsize-Type_tag5@@": "Mažiausias--Naudoti mažiausią įvesties rastrų gardelės dydį.",
	"@@Less-Than-Equal_Extent-Type_tag0@@": "Pasirinkite, kokia aprėptis bus naudojama išvesties rastre:",
	"@@Less-Than-Equal_Extent-Type_tag1@@": "Pirmiausia--Naudoti pirmojo įvesties rastro aprėptį nustatant apdorojimo aprėptį.",
	"@@Less-Than-Equal_Extent-Type_tag2@@": "Sankirta--Naudoti persidengiančių pikselių aprėptį nustatant apdorojimo aprėptį. Tai numatytasis nustatymas.",
	"@@Less-Than-Equal_Extent-Type_tag3@@": "Paskiausia--Naudoti paskutinio įvesties rastro aprėptį nustatant apdorojimo aprėptį.",
	"@@Less-Than-Equal_Extent-Type_tag4@@": "Sąjunga--Naudoti visų rastrų aprėptį nustatant apdorojimo aprėptį.",
	"@@Less-Than-Equal_Raster_tag0@@": "Įvestis patikrinama siekiant nustatyti, ar ji mažesnė nei arba lygi antrajai įvesčiai.",
	"@@Less-Than-Equal_Raster_tag1@@": "Šiam parametrui kaip įvestį galima naudoti konstantos reikšmę, jei kitam parametrui nurodytas rastras.",
	"@@Less-Than-Equal_Raster2_tag0@@": "Įvestis, su kuria lyginama ir už kurią mažesnė arba jai lygi turi būti pirmoji įvestis.",
	"@@Less-Than-Equal_Raster2_tag1@@": "Šiam parametrui kaip įvestį galima naudoti konstantos reikšmę, jei kitam parametrui nurodytas rastras.",
	"@@Ln_Cellsize-Type_tag0@@": "Pasirinkite, koks gardelės dydis bus naudojamas išvesties rastre. Jei visų įvesties gardelių dydžiai vienodi, visos parinktys pateiks vienodus rezultatus.",
	"@@Ln_Cellsize-Type_tag1@@": "Pirmiausia--Naudoti pirmą įvesties rastrų gardelės dydį.",
	"@@Ln_Cellsize-Type_tag2@@": "Paskiausia--Naudoti paskutinį įvesties rastrų gardelės dydį.",
	"@@Ln_Cellsize-Type_tag3@@": "Didžiausias--Naudoti didžiausią įvesties rastrų gardelės dydį. Tai numatytasis nustatymas.",
	"@@Ln_Cellsize-Type_tag4@@": "Vidutinis--Naudoti vidutinį visų įvesties rastrų gardelės dydį.",
	"@@Ln_Cellsize-Type_tag5@@": "Mažiausias--Naudoti mažiausią įvesties rastrų gardelės dydį.",
	"@@Ln_Extent-Type_tag0@@": "Pasirinkite, kokia aprėptis bus naudojama išvesties rastre:",
	"@@Ln_Extent-Type_tag1@@": "Pirmiausia--Naudoti pirmojo įvesties rastro aprėptį nustatant apdorojimo aprėptį.",
	"@@Ln_Extent-Type_tag2@@": "Sankirta--Naudoti persidengiančių pikselių aprėptį nustatant apdorojimo aprėptį. Tai numatytasis nustatymas.",
	"@@Ln_Extent-Type_tag3@@": "Paskiausia--Naudoti paskutinio įvesties rastro aprėptį nustatant apdorojimo aprėptį.",
	"@@Ln_Extent-Type_tag4@@": "Sąjunga--Naudoti visų rastrų aprėptį nustatant apdorojimo aprėptį.",
	"@@Ln_Raster_tag0@@": "Įvesties reikšmės, kurioms ieškoma natūrinio logaritmo (Ln) funkcija.",
	"@@Log10_Cellsize-Type_tag0@@": "Pasirinkite, koks gardelės dydis bus naudojamas išvesties rastre. Jei visų įvesties gardelių dydžiai vienodi, visos parinktys pateiks vienodus rezultatus.",
	"@@Log10_Cellsize-Type_tag1@@": "Pirmiausia--Naudoti pirmą įvesties rastrų gardelės dydį.",
	"@@Log10_Cellsize-Type_tag2@@": "Paskiausia--Naudoti paskutinį įvesties rastrų gardelės dydį.",
	"@@Log10_Cellsize-Type_tag3@@": "Didžiausias--Naudoti didžiausią įvesties rastrų gardelės dydį. Tai numatytasis nustatymas.",
	"@@Log10_Cellsize-Type_tag4@@": "Vidutinis--Naudoti vidutinį visų įvesties rastrų gardelės dydį.",
	"@@Log10_Cellsize-Type_tag5@@": "Mažiausias--Naudoti mažiausią įvesties rastrų gardelės dydį.",
	"@@Log10_Extent-Type_tag0@@": "Pasirinkite, kokia aprėptis bus naudojama išvesties rastre:",
	"@@Log10_Extent-Type_tag1@@": "Pirmiausia--Naudoti pirmojo įvesties rastro aprėptį nustatant apdorojimo aprėptį.",
	"@@Log10_Extent-Type_tag2@@": "Sankirta--Naudoti persidengiančių pikselių aprėptį nustatant apdorojimo aprėptį. Tai numatytasis nustatymas.",
	"@@Log10_Extent-Type_tag3@@": "Paskiausia--Naudoti paskutinio įvesties rastro aprėptį nustatant apdorojimo aprėptį.",
	"@@Log10_Extent-Type_tag4@@": "Sąjunga--Naudoti visų rastrų aprėptį nustatant apdorojimo aprėptį.",
	"@@Log10_Raster_tag0@@": "Įvesties reikšmės, kurioms ieškoma 10 pagrindo logaritminė funkcija.",
	"@@Log2_Cellsize-Type_tag0@@": "Pasirinkite, koks gardelės dydis bus naudojamas išvesties rastre. Jei visų įvesties gardelių dydžiai vienodi, visos parinktys pateiks vienodus rezultatus.",
	"@@Log2_Cellsize-Type_tag1@@": "Pirmiausia--Naudoti pirmą įvesties rastrų gardelės dydį.",
	"@@Log2_Cellsize-Type_tag2@@": "Paskiausia--Naudoti paskutinį įvesties rastrų gardelės dydį.",
	"@@Log2_Cellsize-Type_tag3@@": "Didžiausias--Naudoti didžiausią įvesties rastrų gardelės dydį. Tai numatytasis nustatymas.",
	"@@Log2_Cellsize-Type_tag4@@": "Vidutinis--Naudoti vidutinį visų įvesties rastrų gardelės dydį.",
	"@@Log2_Cellsize-Type_tag5@@": "Mažiausias--Naudoti mažiausią įvesties rastrų gardelės dydį.",
	"@@Log2_Extent-Type_tag0@@": "Pasirinkite, kokia aprėptis bus naudojama išvesties rastre:",
	"@@Log2_Extent-Type_tag1@@": "Pirmiausia--Naudoti pirmojo įvesties rastro aprėptį nustatant apdorojimo aprėptį.",
	"@@Log2_Extent-Type_tag2@@": "Sankirta--Naudoti persidengiančių pikselių aprėptį nustatant apdorojimo aprėptį. Tai numatytasis nustatymas.",
	"@@Log2_Extent-Type_tag3@@": "Paskiausia--Naudoti paskutinio įvesties rastro aprėptį nustatant apdorojimo aprėptį.",
	"@@Log2_Extent-Type_tag4@@": "Sąjunga--Naudoti visų rastrų aprėptį nustatant apdorojimo aprėptį.",
	"@@Log2_Raster_tag0@@": "Įvesties reikšmės, kurioms ieškoma 2 pagrindo logaritminė funkcija.",
	"@@Lookup_Field_tag0@@": "Laukas su pageidaujamomis naujo rastro reikšmėmis.",
	"@@Lookup_Field_tag1@@": "Jis turi būti skaitinio tipo.",
	"@@Lookup_Raster_tag0@@": "Įvesties rastras, kuriame yra laukas, iš kurio bus kuriamas naujas rastras.",
	"@@Lookup_Raster_tag1@@": "Jis gali būti sveikojo skaičiaus arba slankiojo kablelio tipo.",
	"@@Mask_Included-Ranges_tag0@@": "Įterptus diapazonus galima nurodyti kiekvienam kanalui nurodant minalią ir maksimalią reikšmes. Visos į šį intervalą nepatenkančios reikšmės bus pateikiamos kaip ${NoData}. Pikselis įtraukiamas, jei jo reikšmė patenka į bet kurį iš nurodytų intervalų. Todėl pikselis, kurio reikšmė 1 kanalui yra 8, nebus maskuojamas, jei 1 kanalo intervalas yra 5–10, o 2 kanalo 15–20.",
	"@@Mask_NoData-Interpretation_tag0@@": "Tai rodo, kaip <strong>${NoData} Values</strong> paveiks išvesties vaizdą.",
	"@@Mask_NoData-Interpretation_tag3@@": "Galimos tokios dvi parinktys:",
	"@@Mask_NoData-Interpretation_tag4@@": "<strong>Match All</strong>--Kiekvienam kanalui nurodomos ${NoData} reikšmės turi būti tame pačiame pikselyje, kad išvesties vaizde būtų ${NoData} pikselis.",
	"@@Mask_NoData-Interpretation_tag6@@": "<strong>Match Any</strong>--Jei jūsų nurodyta ${NoData} reikšmė patenka į nurodyto kanalo pikselį, tas pikselis išvesties vaizde bus ${NoData}. Tai numatytasis nustatymas.",
	"@@Mask_NoData-Values_tag0@@": "NoData reikšmes galima nurodyti kiekvienam kanalui. Atskirdami tarpais galite nurodyti daugiau nei vieną reikšmę.",
	"@@Mask_Raster_tag0@@": "Įvesties rastras.",
	"@@Minus_Cellsize-Type_tag0@@": "Pasirinkite, koks gardelės dydis bus naudojamas išvesties rastre. Jei visų įvesties gardelių dydžiai vienodi, visos parinktys pateiks vienodus rezultatus.",
	"@@Minus_Cellsize-Type_tag1@@": "Pirmiausia--Naudoti pirmą įvesties rastrų gardelės dydį.",
	"@@Minus_Cellsize-Type_tag2@@": "Paskiausia--Naudoti paskutinį įvesties rastrų gardelės dydį.",
	"@@Minus_Cellsize-Type_tag3@@": "Didžiausias--Naudoti didžiausią įvesties rastrų gardelės dydį. Tai numatytasis nustatymas.",
	"@@Minus_Cellsize-Type_tag4@@": "Vidutinis--Naudoti vidutinį visų įvesties rastrų gardelės dydį.",
	"@@Minus_Cellsize-Type_tag5@@": "Mažiausias--Naudoti mažiausią įvesties rastrų gardelės dydį.",
	"@@Minus_Extent-Type_tag0@@": "Pasirinkite, kokia aprėptis bus naudojama išvesties rastre:",
	"@@Minus_Extent-Type_tag1@@": "Pirmiausia--Naudoti pirmojo įvesties rastro aprėptį nustatant apdorojimo aprėptį.",
	"@@Minus_Extent-Type_tag2@@": "Sankirta--Naudoti persidengiančių pikselių aprėptį nustatant apdorojimo aprėptį. Tai numatytasis nustatymas.",
	"@@Minus_Extent-Type_tag3@@": "Paskiausia--Naudoti paskutinio įvesties rastro aprėptį nustatant apdorojimo aprėptį.",
	"@@Minus_Extent-Type_tag4@@": "Sąjunga--Naudoti visų rastrų aprėptį nustatant apdorojimo aprėptį.",
	"@@Minus_Raster_tag0@@": "Įvestis, iš kurios reikia atimti antrosios įvesties reikšmes.",
	"@@Minus_Raster_tag1@@": "Šiam parametrui kaip įvestį galima naudoti konstantos reikšmę, jei kitam parametrui nurodytas rastras.",
	"@@Minus_Raster2_tag0@@": "Įvesties reikšmės, kurias reikia atimti iš pirmosios įvesties reikšmių.",
	"@@Minus_Raster2_tag1@@": "Šiam parametrui kaip įvestį galima naudoti konstantos reikšmę, jei kitam parametrui nurodytas rastras.",
	"@@ML-Classify_Raster_tag0@@": "Įvesties rastras, kuris bus klasifikuojamas naudojant didžiausios tikimybės klasifikacijos algoritmą.",
	"@@ML-Classify_Signature-File-or-URL_tag0@@": "${.gsg} parašo failas.",
	"@@Mod_Cellsize-Type_tag0@@": "Pasirinkite, koks gardelės dydis bus naudojamas išvesties rastre. Jei visų įvesties gardelių dydžiai vienodi, visos parinktys pateiks vienodus rezultatus.",
	"@@Mod_Cellsize-Type_tag1@@": "Pirmiausia--Naudoti pirmą įvesties rastrų gardelės dydį.",
	"@@Mod_Cellsize-Type_tag2@@": "Paskiausia--Naudoti paskutinį įvesties rastrų gardelės dydį.",
	"@@Mod_Cellsize-Type_tag3@@": "Didžiausias--Naudoti didžiausią įvesties rastrų gardelės dydį. Tai numatytasis nustatymas.",
	"@@Mod_Cellsize-Type_tag4@@": "Vidutinis--Naudoti vidutinį visų įvesties rastrų gardelės dydį.",
	"@@Mod_Cellsize-Type_tag5@@": "Mažiausias--Naudoti mažiausią įvesties rastrų gardelės dydį.",
	"@@Mod_Extent-Type_tag0@@": "Pasirinkite, kokia aprėptis bus naudojama išvesties rastre:",
	"@@Mod_Extent-Type_tag1@@": "Pirmiausia--Naudoti pirmojo įvesties rastro aprėptį nustatant apdorojimo aprėptį.",
	"@@Mod_Extent-Type_tag2@@": "Sankirta--Naudoti persidengiančių pikselių aprėptį nustatant apdorojimo aprėptį. Tai numatytasis nustatymas.",
	"@@Mod_Extent-Type_tag3@@": "Paskiausia--Naudoti paskutinio įvesties rastro aprėptį nustatant apdorojimo aprėptį.",
	"@@Mod_Extent-Type_tag4@@": "Sąjunga--Naudoti visų rastrų aprėptį nustatant apdorojimo aprėptį.",
	"@@Mod_Raster_tag0@@": "Skaitiklio įvestis.",
	"@@Mod_Raster_tag1@@": "Šiam parametrui kaip įvestį galima naudoti konstantos reikšmę, jei kitam parametrui nurodytas rastras.",
	"@@Mod_Raster2_tag0@@": "Daliklio įvestis.",
	"@@Mod_Raster2_tag1@@": "Šiam parametrui kaip įvestį galima naudoti konstantos reikšmę, jei kitam parametrui nurodytas rastras.",
	"@@Mosaic-Rasters_Operation_tag0@@": "Išspręskite bet kokius konfliktus dėl dviejų ar daugiau persidengiančių vaizdų. Galimos parinktys:",
	"@@Mosaic-Rasters_Operation_tag1@@": "<strong>Blend</strong>--Apskaičiuoti ir atvaizduoti persidengiančių pikselių vidurkį suteikiant daugiau svorio tiems pikseliams, kurie artimesni kaimyniniams vaizdams, kad išvesties vaizdas būtų tolygesnis. Tai numatytasis nustatymas.",
	"@@Mosaic-Rasters_Operation_tag3@@": "<strong>First</strong>--Atvaizduoti pirmojo vaizdo konkrečios teritorijos vaizdų sąraše pikselius.",
	"@@Mosaic-Rasters_Operation_tag5@@": "<strong>Last</strong>--Atvaizduoti paskutinio vaizdo konkrečios teritorijos vaizdų sąraše pikselius.",
	"@@Mosaic-Rasters_Operation_tag7@@": "<strong>Max</strong>--Atvaizduoti didžiausios reikšmės pikselį iš visų persidengiančių sluoksnių. Naudodami šią parinktį persidengiančioje teritorijoje veikiausiai atvaizduosite ne vieno vaizdo pikselius, bet visų potencialių sluoksnių derinį.",
	"@@Mosaic-Rasters_Operation_tag9@@": "<strong>Mean</strong>--Apskaičiuoti ir atvaizduoti persidengiančių pikselių vidurkį.",
	"@@Mosaic-Rasters_Operation_tag11@@": "<strong>Min</strong>--Atvaizduoti mažiausios reikšmės pikselį iš visų persidengiančių sluoksnių. Naudodami šią parinktį persidengiančioje teritorijoje veikiausiai atvaizduosite ne vieno vaizdo pikselius, bet visų potencialių sluoksnių derinį.",
	"@@Mosaic-Rasters_Rasters_tag0@@": "Pasirinkite rastrus, iš kurių norite sukurti vieną mozaikos vaizdą.",
	"@@NDVI_Infrared-Band-ID_tag0@@": "Nurodo kanalo ID, kuris reprezentuoja artimą infraraudoniesiems spinduliams elektromagnetinio spektro dalį.",
	"@@NDVI_Raster_tag0@@": "Daugiaspektris įvesties rastras.",
	"@@NDVI_Scientific-Output_tag0@@": "Išvesties reikšmių intervalas bus nuo -1,0 iki 1,0, tokios jos naudojamos daugelyje mokslinių aplikacijų.",
	"@@NDVI_Visible-Band-ID_tag0@@": "Nurodo kanalo ID, kuris reprezentuoja elektromagnetinio spektro raudonų spindulių dalį.",
	"@@NDVI-Colorized_Color-Ramp_tag0@@": "Iš išskleidžiamojo sąrašo pasirinkite iš anksto apibrėžtą spalvų schemą.",
	"@@NDVI-Colorized_Color-Scheme-Type_tag0@@": "Pasirinkite, kokio tipo spalvų schemą naudoti spalvinant NDVI išvestį:",
	"@@NDVI-Colorized_Color-Scheme-Type_tag1@@": "Spalvų žemėlapis--iš išskleidžiamojo sąrašo pasirinkite iš anksto apibrėžtą spalvų žemėlapį. Alternatyviai galite naršyti iki esančio išlaikyto spalvų žemėlapio failo.",
	"@@NDVI-Colorized_Color-Scheme-Type_tag2@@": "Spalvų seka--iš išskleidžiamojo sąrašo pasirinkite iš anksto apibrėžtą spalvų schemą.",
	"@@NDVI-Colorized_Colormap_tag0@@": "Iš išskleidžiamojo sąrašo pasirinkite iš anksto apibrėžtą spalvų žemėlapį. Alternatyviai galite naršyti iki esamo spalvų žemėlapio failo.",
	"@@NDVI-Colorized_Infrared-Band-ID_tag0@@": "Nurodo kanalo ID, kuris reprezentuoja artimą infraraudoniesiems spinduliams elektromagnetinio spektro dalį.",
	"@@NDVI-Colorized_Raster_tag0@@": "Daugiaspektris įvesties rastras.",
	"@@NDVI-Colorized_Scientific-Output_tag0@@": "Išvesties reikšmių intervalas bus nuo -1,0 iki 1,0, tokios jos naudojamos daugelyje mokslinių aplikacijų.",
	"@@NDVI-Colorized_Visible-Band-ID_tag0@@": "Nurodo kanalo ID, kuris reprezentuoja elektromagnetinio spektro raudonų spindulių dalį.",
	"@@Negate_Cellsize-Type_tag0@@": "Pasirinkite, koks gardelės dydis bus naudojamas išvesties rastre. Jei visų įvesties gardelių dydžiai vienodi, visos parinktys pateiks vienodus rezultatus.",
	"@@Negate_Cellsize-Type_tag1@@": "Pirmiausia--Naudoti pirmą įvesties rastrų gardelės dydį.",
	"@@Negate_Cellsize-Type_tag2@@": "Paskiausia--Naudoti paskutinį įvesties rastrų gardelės dydį.",
	"@@Negate_Cellsize-Type_tag3@@": "Didžiausias--Naudoti didžiausią įvesties rastrų gardelės dydį. Tai numatytasis nustatymas.",
	"@@Negate_Cellsize-Type_tag4@@": "Vidutinis--Naudoti vidutinį visų įvesties rastrų gardelės dydį.",
	"@@Negate_Cellsize-Type_tag5@@": "Mažiausias--Naudoti mažiausią įvesties rastrų gardelės dydį.",
	"@@Negate_Extent-Type_tag0@@": "Pasirinkite, kokia aprėptis bus naudojama išvesties rastre:",
	"@@Negate_Extent-Type_tag1@@": "Pirmiausia--Naudoti pirmojo įvesties rastro aprėptį nustatant apdorojimo aprėptį.",
	"@@Negate_Extent-Type_tag2@@": "Sankirta--Naudoti persidengiančių pikselių aprėptį nustatant apdorojimo aprėptį. Tai numatytasis nustatymas.",
	"@@Negate_Extent-Type_tag3@@": "Paskiausia--Naudoti paskutinio įvesties rastro aprėptį nustatant apdorojimo aprėptį.",
	"@@Negate_Extent-Type_tag4@@": "Sąjunga--Naudoti visų rastrų aprėptį nustatant apdorojimo aprėptį.",
	"@@Negate_Raster_tag0@@": "Įvesties rastras, kuris bus neigiamas (padaugintas iš -1).",
	"@@Nibble_Mask-Raster_tag0@@": "Būtinas įvesties rastras naudojamas kaip kaukė.",
	"@@Nibble_Mask-Raster_tag1@@": "Gardelės su NoData reikšmėmis įvestyje <strong>Raster</strong> gaus artimiausio kaimyninio elemento reikšmes.",
	"@@Nibble_Mask-Raster_tag4@@": "Kaukės rastro tipas gali būti sveikojo skaičiaus arba slankiojo kablelio tipo.",
	"@@Nibble_Nibble-NoData-cells_tag0@@": "Nustato, ar įvesties rastro NoData gardelės išliks NoData išvesties rastre.",
	"@@Nibble_Nibble-NoData-cells_tag1@@": "<strong>No</strong>--Nustato, kad įvesties rastro NoData gardelės išliks NoData išvesties rastre. Tai numatytasis nustatymas.",
	"@@Nibble_Nibble-NoData-cells_tag3@@": "<strong>Yes</strong>--Nurodo, kad įvesties rastro ir kaukei priklausančios NoData gardelės gali gauti artimiausių kaimyninių elementų tinkamas išvesties gardelės reikšmes.",
	"@@Nibble_Raster_tag0@@": "Būtino įvesties rastro NoData reikšmės bus pakeistos artimiausio elemento reikšmėmis.",
	"@@Nibble_Raster_tag1@@": "Įvesties rastro tipas gali būti sveikojo skaičiaus arba slankiojo kablelio tipo.",
	"@@Nibble_Use-NoData-values-if-they-are-the-nearest-neighbor_tag0@@": "Apibrėžia, ar įvesties rastro ${NoData} reikšmes galima pakeisti artimiausių elementų reikšmėmis kaukės rastro apibrėžtoje teritorijoje.",
	"@@Nibble_Use-NoData-values-if-they-are-the-nearest-neighbor_tag1@@": "<strong>Yes</strong>--Nurodo, kad artimiausio kaimyno reikšmė bus naudojama, atsižvelgiant į tai, ar tai yra įvesties rastro ${NoData}, ar kitokia duomenų reikšmė. Įvesties rastro ${NoData} reikšmės gali perimti reikšmes iš gretimų kaukėje apibrėžtų teritorijų, jei šios yra artimiausi jų kaimynai. Tai numatytasis nustatymas.",
	"@@Nibble_Use-NoData-values-if-they-are-the-nearest-neighbor_tag3@@": "<strong>No</strong>--Nurodo, kad tik duomenų reikšmės gali perimti kaukės rastre apibrėžtų gretimų teritorijų reikšmes. Įvesties rastro ${NoData} reikšmės negali perimti reikšmių iš gretimų kaukėje apibrėžtų teritorijų, net jei šios yra artimiausi jų kaimynai.",
	"@@Nibble_Zone-Raster_tag0@@": "Įvesties zonos rastras.",
	"@@Nibble_Zone-Raster_tag1@@": "Zona yra visos vienodą reikšmę turinčios rastro gardelės, neatsižvelgiant į tai, ar jos gretutinės, ar ne. Įvesties zonos sluoksnis aprašo zonų formą, reikšmes ir padėtis. Zonos rastras gali būti sveikojo skaičiaus arba slankiojo kablelio tipo.",
	"@@Not-Equal_Cellsize-Type_tag0@@": "Pasirinkite, koks gardelės dydis bus naudojamas išvesties rastre. Jei visų įvesties gardelių dydžiai vienodi, visos parinktys pateiks vienodus rezultatus.",
	"@@Not-Equal_Cellsize-Type_tag1@@": "Pirmiausia--Naudoti pirmą įvesties rastrų gardelės dydį.",
	"@@Not-Equal_Cellsize-Type_tag2@@": "Paskiausia--Naudoti paskutinį įvesties rastrų gardelės dydį.",
	"@@Not-Equal_Cellsize-Type_tag3@@": "Didžiausias--Naudoti didžiausią įvesties rastrų gardelės dydį. Tai numatytasis nustatymas.",
	"@@Not-Equal_Cellsize-Type_tag4@@": "Vidutinis--Naudoti vidutinį visų įvesties rastrų gardelės dydį.",
	"@@Not-Equal_Cellsize-Type_tag5@@": "Mažiausias--Naudoti mažiausią įvesties rastrų gardelės dydį.",
	"@@Not-Equal_Extent-Type_tag0@@": "Pasirinkite, kokia aprėptis bus naudojama išvesties rastre:",
	"@@Not-Equal_Extent-Type_tag1@@": "Pirmiausia--Naudoti pirmojo įvesties rastro aprėptį nustatant apdorojimo aprėptį.",
	"@@Not-Equal_Extent-Type_tag2@@": "Sankirta--Naudoti persidengiančių pikselių aprėptį nustatant apdorojimo aprėptį. Tai numatytasis nustatymas.",
	"@@Not-Equal_Extent-Type_tag3@@": "Paskiausia--Naudoti paskutinio įvesties rastro aprėptį nustatant apdorojimo aprėptį.",
	"@@Not-Equal_Extent-Type_tag4@@": "Sąjunga--Naudoti visų rastrų aprėptį nustatant apdorojimo aprėptį.",
	"@@Not-Equal_Raster_tag0@@": "Įvestis, kurią nelygybei palyginti naudos antroji įvestis.",
	"@@Not-Equal_Raster_tag1@@": "Šiam parametrui kaip įvestį galima naudoti konstantos reikšmę, jei kitam parametrui nurodytas rastras.",
	"@@Not-Equal_Raster2_tag0@@": "Sluoksnis, kuris bus lyginamas dėl nelygybės su pirmąja įvestimi.",
	"@@Not-Equal_Raster2_tag1@@": "Šiam parametrui kaip įvestį galima naudoti konstantos reikšmę, jei kitam parametrui nurodytas rastras.",
	"@@Pansharpening_Multispectral_tag0@@": "Daugiaspektris rastras, kurį norite ryškinti naudodami panchromatinį kanalą.",
	"@@Pansharpening_Panchromatic_tag0@@": "Didelės raiškos vieno kanalo rastras, kuris bus naudojamas mažesnės raiškos daugiaspektriui rastrui ryškinti panchromatiniu būdu.",
	"@@Pansharpening_Pansharpening-Type_tag0@@": "Pasirinkite norimą naudoti panchromatinio ryškinimo algoritmą.",
	"@@Pansharpening_Pansharpening-Type_tag1@@": "Brovey--naudoja Brovey algoritmą, pagrįstą spektriniu modeliavimu duomenų suliejimui.",
	"@@Pansharpening_Pansharpening-Type_tag2@@": "Esri--naudoja Esri algoritmą, pagrįstą spektriniu modeliavimu duomenų suliejimui.",
	"@@Pansharpening_Pansharpening-Type_tag3@@": "Gram-Schmidt--Naudoja Gram-Schmidt spektrinio ryškinimo algoritmą daugiaspektriams duomenims ryškinti.",
	"@@Pansharpening_Pansharpening-Type_tag4@@": "IHS--naudoja intensyvumą, atspalvį ir sodrumo spalvų erdvę duomenų suliejimui.",
	"@@Pansharpening_Pansharpening-Type_tag5@@": "Vidutinis--naudoja vidutines raudonos, žalios ir mėlynos spalvų reikšmes bei panchromatinę pikselio reikšmę.",
	"@@Pansharpening_Weights_tag0@@": "Nurodykite raudono, žalio, mėlyno ir infraraudonųjų spindulių kanalų svorius. Visos reikšmės turi būti nuo 0 iki 1.",
	"@@Path-Distance_Accumulative-Cost-Resistance-Rate_tag0@@": "Šis parametras simuliuoja, kaip didėjant suminėms išlaidoms auga pastangos kompensuoti sąnaudas. Jis naudojamas keliautojo nuovargiui modeliuoti. Augančios suminės sąnaudos pasiekti gardelę padauginamos iš pasipriešinimo koeficiento ir pridedamos prie išlaidų perėjimui į kitą gardelę.",
	"@@Path-Distance_Accumulative-Cost-Resistance-Rate_tag1@@": "Tai yra modifikuota sudėtinių palūkanų koeficiento formulės, naudojamos skaičiuojant matomas judėjimo per gardelę išlaidas, versija. Didėjant pasipriešinimo koeficiento reikšmei, ji kelia toliau lankomų gardelių sąnaudas. Kuo didesnis pasipriešinimo koeficientas, tuo didesnės išlaidos norit pasiekti kitą gardelę, ir jos susideda kiekvienam tolesniam judesiui. Kadangi pasipriešinimo koeficientas panašus į sudėtinį koeficientą, o suminių sąnaudų reikšmės paprastai labai didelės, rekomenduojama naudoti mažus pasipriešinimo koeficientus, pavyzdžiui, 0,005 ar net mažesnius, atsižvelgiant į suminių sąnaudų reikšmes.",
	"@@Path-Distance_Accumulative-Cost-Resistance-Rate_tag2@@": "Reikšmė turi būti didesnė už nulį. Numatytoji apimtis yra matuojama iki išvesties rastro briaunos.",
	"@@Path-Distance_Capacity_tag0@@": "Šaltiniui apibrėžia keliautojo išlaidų apimtį. Išlaidų skaičiavimai tęsiami kiekvienam šaltiniui, kol pasiekiama nurodyta apimtis.",
	"@@Path-Distance_Capacity_tag1@@": "Reikšmė turi būti didesnė už nulį. Numatytoji apimtis yra matuojama iki išvesties rastro briaunos.",
	"@@Path-Distance_Cost-Raster_tag0@@": "Būtinas įvesties rastras, apibrėžiantis planimetriško judėjimo per kiekvieną gardelę sąnaudas arba trukdžius. Kiekvienos gardelės padėties reikšmė atspindi sąnaudos vienetui atstumą judant per gardelę. Kiekvienos gardelės padėties reikšmė dauginama iš gardelės skiriamosios gebos, kompensuojant už judėjimą įstrižai, ir gaunama bendrųjų sąnaudų kertant gardelę suma.",
	"@@Path-Distance_Cost-Raster_tag1@@": "<strong>Cost Raster</strong> reikšmės gali būti sveikieji skaičiai arba skaičiai su slankiuoju kableliu, tačiau ne neigiamos ir ne nulinės reikšmės.",
	"@@Path-Distance_horizontalfactor_tag0@@": "<p>Aprašo ryšį tarp horizontalaus sąnaudų veiksnio ir horizontalaus santykinio judančio kampo (HRMA).</p><p>Yra keli veiksniai su modifikatoriais, kurie identifikuoja apibrėžtą vertikalaus veiksnio grafiką. Taip pat galite naudodami lentelę sukurti adaptuotą grafiką. Grafikai naudojami identifikuoti vertikalų veiksnį, kuris naudojamas skaičiuojant bendrąsias keliavimo į kaimyninę gardelę išlaidas.</p><p>Toliau pateikiamuose paaiškinimuose naudojami du akronimai: HF ir HRMA. HF žymi horizontalų veiksnį, kuris apibrėžia horizontalų sunkumą, su kuriuos susiduriama judant iš vienos gardelės į kitą. HRMA žymi horizontalųjį santykinį judantį kampą, kuris identifikuoja kampą tarp gardelės horizontalios krypties ir judėjimo krypties.</p><p><strong>Horizontalių veiksnių</strong> tipai yra tokie:</p><ul><li><strong>Dvejetainis</strong> – nurodo, kad jei HRMA yra mažesnis nei pjūvio kampas, HF nustatomas į su nuliniu veiksniu susijusią reikšmę; kitu atveju jis yra begalybė.</li><li><strong>Pirmyn</strong> – nurodo, kad leidžiama judėti tik pirmyn. HRMA turi būti didesnis nei arba lygus 0 ir mažesnis nei arba lygus 90 laipsnių (0 <= HRMA < 90). Jei HRMA didesnis nei 0 ir mažesnis nei 45 laipsniai, gardelės HF nustatomas į su nuliniu veiksniu susijusią reikšmę. Jei HRMA didesnis arba lygus nei 45 laipsniai, naudojama šoninė reikšmės modifikatoriaus reikšmė. Bet kokiai 90 laipsnių lygiai ar didesnei HRMA reikšmei nustatomas begalybei lygus HF.</li><li><strong>Tiesinis</strong> – nurodo, kad HF yra tiesinė HRMA funkcija.</li><li><strong>Atvirkštinis tiesinis</strong> – nurodo, kad HF yra atvirkščiai proporcinga tiesinė HRMA funkcija.</li><li><strong>Lentelė</strong> – nurodo, kad horizontalaus veiksnio grafikui, pagal kurį nustatomi HF, apibrėžti naudojamas lentelės failas.</li></ul><p>Horizontalių veiksnių modifikatoriai apima:</p><ul><li><strong>Nulinis veiksnys</strong> – horizontalus veiksnys, naudojamas kai HRMA lygu nuliui. Šis veiksnys bet kokioms horizontalaus veiksnio funkcijoms nustato y susikirtimo padėtį.</li><li><strong>Pjūvio kampas</strong> – apibrėžia HRMA kampą, kurį viršijus HF bus nustatytas kaip begalybė.</li><li><strong>Pasvirimas</strong> – nustato tiesios linijos pasvirimą, kuris bus naudojamas naudojamas su horizontalaus veiksnio raktažodžiais <strong>Tiesinis</strong> ir <strong>Atvirkštinis tiesinis</strong>. Pasvirimas nurodomas kaip pakilimo dalis per važiavimą (pavyzdžiui, 45 procentų pasvirimas yra 1/45 ir įvedamas kaip 0,02222).</li><li><strong>Šoninė reikšmė</strong> – nustato HF, kai HRMA didesnis už arba lygus 45 laipsniams ir mažesnis nei 90 laipsnių, nurodžius horizontalaus veiksnio raktažodį <strong>Pirmyn</strong>.</li><li><strong>Lentelės pavadinimas</strong> – identifikuoja HF aprašančios lentelės pavadinimą.</li></ul>",
	"@@Path-Distance_Horizontal-Raster_tag0@@": "Rastras, aprašantis kiekvienos gardelės horizontalią kryptį.",
	"@@Path-Distance_Horizontal-Raster_tag1@@": "Rastre esančios reikšmės turi būti tarp 0 ir 360, kur 0 laipsnių atitinka šiaurę arba ekrano viršų ir laipsniai didėja pagal laikrodžio rodyklę. Plokščioms teritorijoms reikia priskirti reikšmę -1. Kiekvienos padėties reikšmės bus naudojamos su <strong>Horizontal factor</strong>, siekiant nustatyti horizontalias išlaidas, patirtas judant iš gardelės į kaimynines.",
	"@@Path-Distance_Maximum-Distance_tag0@@": "Riba, kurios negali viršyti suminių sąnaudų reikšmės. Jei suminių sąnaudų atstumas viršija šią reikšmę, gardelės padėties išvesties reikšmė bus NoData. Maksimalus atstumas apibrėžia aprėptį, kuriai skaičiuojami suminiai sąnaudų atstumai. Numatytasis atstumas yra matuojamas iki išvesties rastro aprėpties.",
	"@@Path-Distance_Multiplier-to-Apply-to-Costs_tag0@@": "Daugiklis, pritaikomas išlaidų reikšmėms.",
	"@@Path-Distance_Multiplier-to-Apply-to-Costs_tag1@@": "Šis parametras leidžia šaltinyje valdyti kelionės modelį arba stiprumą. Kuo daugiklis didesnis, tuo didesnės išlaidos keliauti per kiekvieną gardelę.",
	"@@Path-Distance_Multiplier-to-Apply-to-Costs_tag2@@": "Reikšmės turi būti didesnės už nulį. Numatytoji reikšmė yra 1.",
	"@@Path-Distance_Multiplier-to-Apply-to-Costs_tag3@@": "Šiam parametrui gali būti naudojama skaitinė (dviguba) reikšmė arba <strong>Source Raster</strong> laukas.",
	"@@Path-Distance_Source-Raster_tag0@@": "Būtinas šaltinio padėčių įvesties rastras.",
	"@@Path-Distance_Source-Raster_tag1@@": "Tai yra rastras, kuris identifikuoja gardeles ar padėtis, iš kurių skaičiuojamas mažiausias suminis sąnaudų atstumas kiekvienai išvesties gardelės padėčiai.",
	"@@Path-Distance_Source-Raster_tag2@@": "Tai gali būti sveikasis skaičius arba slankiojo kablelio tipo.",
	"@@Path-Distance_Start-Cost_tag0@@": "Pradinė kaina, nuo kurios pradedami išlaidų skaičiavimai. Šis parametras leidžia nurodyti fiksuotą su šaltiniu susijusią kainą. Užuot pradėjęs nuo 0 lygios kainos, išlaidų skaičiavimo algoritmas pradės nuo nurodytos reikšmės.",
	"@@Path-Distance_Start-Cost_tag1@@": "Reikšmė turi būti lygi nuliui arba didesnė. Numatytoji reikšmė yra 0.",
	"@@Path-Distance_Surface-Raster_tag0@@": "Rastras, aprašantis kiekvienos gardelės padėties aukščio reikšmę.",
	"@@Path-Distance_Surface-Raster_tag1@@": "Šios reikšmės naudojamos skaičiuojant faktinį paviršiaus atstumą, kuris įveikiamas keliaujant tarp gardelių.",
	"@@Path-Distance_Travel-Direction_tag0@@": "Apibrėžia keliautojo kryptį taikant šaltinio pasipriešinimo koeficientą bei pradinę šaltinio kainą.",
	"@@Path-Distance_Travel-Direction_tag1@@": "<strong>From Source</strong>--Šaltinio pasipriešinimo koeficientas ir šaltinio pradinė kaina bus pritaikyti ties įvesties šaltiniu ir iškeliaujant į šaltiniui nepriklausančias gardeles. Tai numatytasis nustatymas.",
	"@@Path-Distance_Travel-Direction_tag3@@": "<strong>To Source</strong>--Šaltinio pasipriešinimo koeficientas ir šaltinio pradinė kaina bus pritaikyti ties kiekviena šaltiniui nepriklausančia gardele ir grįžtant į įvesties šaltinį.",
	"@@Path-Distance_Travel-Direction_tag5@@": "Nurodykite raktažodį <strong>From Source</strong> arba <strong>To Source</strong>, kuris bus taikomas visiems šaltiniams, arba nurodykite <strong>Source Raster</strong> lauką, kuriame yra raktažodžiai, leidžiantys kiekvienam šaltiniui identifikuoti kelionės kryptį. Tame lauke turi būti eilutė ${FROM_SOURCE} arba ${TO_SOURCE}.",
	"@@Path-Distance_verticalfactor_tag0@@": "<p>Aprašo ryšį tarp vertikalaus sąnaudų veiksnio ir vertikalaus santykinio judančio kampo (VRMA).</p><p>Yra keli veiksniai su modifikatoriais, kurie identifikuoja apibrėžtą vertikalaus veiksnio grafiką. Taip pat galite naudodami lentelę sukurti adaptuotą grafiką. Grafikai naudojami identifikuoti vertikalų veiksnį, kuris naudojamas skaičiuojant bendrąsias keliavimo į kaimyninę gardelę išlaidas.</p><p>Toliau pateikiamuose paaiškinimuose naudojami du akronimai: VF ir VRMA. VF žymi vertikalų veiksnį, kuris apibrėžia vertikalų sunkumą, su kuriuos susiduriama judant iš vienos gardelės į kitą. VRMA žymi vertikalų santykinį judantį kampą, kurios identifikuoja pasvirimo kampą tarp IŠ (apdorojimo), gardelės ir Į gardelę.</p><p><strong>Vertikalaus veiksnio</strong> tipai gali būti:</p><ul><li><strong>Dvejetainis</strong> – nurodo, kad jei VRMA yra didesnis nei apatinis pjūvio kampas ir mažesnis nei viršutinis pjūvio kampas, VF nustatomas į su nuliniu veiksniu susijusią reikšmę; kitu atveju jis yra begalybė.</li><li><strong>Tiesinis</strong> – nurodo, kad VF yra tiesinė VRMA funkcija.</li><li><strong>Simetrinis tiesinis</strong> – nurodo, kad VF yra tiesinė VRMA funkcija atitinkamai neigiamoje arba teigiamoje VRMA pusėje ir šios dvi tiesinės funkcijos yra simetriškos VF (y) ašies atžvilgiu.</li><li><strong>Atvirkštinis tiesinis</strong> – nurodo, kad VF yra atvirkščiai proporcinga tiesinė VRMA funkcija.</li><li><strong>Simetrinis atvirkštinis tiesinis</strong> – nurodo, kad VF yra atvirkščiai proporcinga tiesinė VRMA funkcija atitinkamai neigiamoje arba teigiamoje VRMA pusėje, ir kad šios dvi tiesinės funkcijos yra simetriškos VF (y) ašies atžvilgiu.</li><li><strong>Kosinusinis</strong> – identifikuoja VF kaip kosinusinę VRMA funkciją.</li><li><strong>Kirstinis</strong> – identifikuoja VF kaip kirstinę VRMA funkciją.</li><li><strong>Kosinusinis-kirstinis</strong> – nurodo, kad VF yra kosinusinė VRMA funkcija, kai VRMA yra neigiamas, ir kirstinė VRMA funkcija, kai šis kampas nėra neigiamas.</li><li><strong>Kirstinis-kosinusinis</strong> – nurodo, kad VF yra kirstinė VRMA funkcija, kai VRMA yra neigiamas, ir kosinusinė VRMA funkcija, kai šis kampas nėra neigiamas.</li><li><strong>Lentelė</strong> – nurodo, kad vertikalaus veiksnio grafikui, pagal kurį nustatomi VF, apibrėžti naudojamas lentelės failas.</li></ul><p>Vertikalių raktažodžių modifikatoriai apima:</p><ul><li><strong>Nulinis veiksnys</strong> – nustato vertikalų veiksnį, kuris naudojamas, kai VRMA lygus nuliui. Šis veiksnys nurodytai funkcijai nustato y susikirtimo padėtį. Pagal apibrėžimą nulinis veiksnys netaikomas jokioms trigonometrinėms vertikalioms funkcijoms (COS, SEC, COS-SEC ir SEC-COS). Šios funkcijos apibrėžia y susikirtimą.</li><li><strong>Apatinio pjūvio kampas</strong> – apibrėžia VRMA kampą, žemiau kurio VF bus nustatytas kaip begalybė.</li><li><strong>Viršutinis pjūvio kampas</strong> – apibrėžia VRMA kampą, virš kurio VF bus nustatytas kaip begalybė.</li><li><strong>Pasvirimas</strong> – nustato tiesios linijos pasvirimą, naudojamą su vertikalaus veiksnio raktažodžiais <strong>Tiesinis</strong> ir <strong>Atvirkštinis tiesinis</strong>. Pasvirimas nurodomas kaip pakilimo dalis per važiavimą (pavyzdžiui, 45 procentų pasvirimas yra 1/45 ir įvedamas kaip 0,02222).</li><li><strong>Lentelės pavadinimas</strong> – identifikuoja VF aprašančios lentelės pavadinimą.</li></ul>",
	"@@Path-Distance_Vertical-Raster_tag0@@": "Aprašo ryšį tarp vertikalaus sąnaudų veiksnio ir vertikalaus santykinio judančio kampo (VRMA).",
	"@@Path-Distance_Vertical-Raster_tag1@@": "Šios reikšmės naudojamos skaičiuojant pasvirimą, kuris naudojamas identifikuojant vertikalų veiksnį, patiriamą judant iš vienos gardelės į kitą.",
	"@@Path-Distance-Allocation_Accumulative-Cost-Resistance-Rate_tag0@@": "Šis parametras simuliuoja, kaip didėjant suminėms išlaidoms auga pastangos kompensuoti sąnaudas. Jis naudojamas keliautojo nuovargiui modeliuoti. Augančios suminės sąnaudos pasiekti gardelę padauginamos iš pasipriešinimo koeficiento ir pridedamos prie išlaidų perėjimui į kitą gardelę.",
	"@@Path-Distance-Allocation_Accumulative-Cost-Resistance-Rate_tag1@@": "Tai modifikuota sudėtinės palūkanų normos formulės versija, naudojama apskaičiuoti akivaizdžias judėjimo per gardelę išlaidas. Didėjant pasipriešinimo koeficiento reikšmei, ji kelia toliau lankomų gardelių sąnaudas. Kuo didesnis pasipriešinimo koeficientas, tuo didesnės išlaidos norit pasiekti kitą gardelę, ir jos susideda kiekvienam tolesniam judesiui. Kadangi pasipriešinimo koeficientas panašus į sudėtinį koeficientą, o suminių sąnaudų reikšmės paprastai labai didelės, rekomenduojama naudoti mažus pasipriešinimo koeficientus, pavyzdžiui, 0,005 ar net mažesnius, atsižvelgiant į suminių sąnaudų reikšmes.",
	"@@Path-Distance-Allocation_Accumulative-Cost-Resistance-Rate_tag2@@": "Reikšmė turi būti didesnė už nulį. Numatytoji apimtis yra matuojama iki išvesties rastro briaunos.",
	"@@Path-Distance-Allocation_Capacity_tag0@@": "Šaltiniui apibrėžia keliautojo išlaidų apimtį. Išlaidų skaičiavimai tęsiami kiekvienam šaltiniui, kol pasiekiama nurodyta apimtis.",
	"@@Path-Distance-Allocation_Capacity_tag1@@": "Reikšmė turi būti didesnė už nulį. Numatytoji apimtis yra matuojama iki išvesties rastro briaunos.",
	"@@Path-Distance-Allocation_Cost-Raster_tag0@@": "Būtinas įvesties rastras, apibrėžiantis planimetriško judėjimo per kiekvieną gardelę sąnaudas arba trukdžius. Kiekvienos gardelės padėties reikšmė atspindi sąnaudos vienetui atstumą judant per gardelę. Kiekvienos gardelės padėties reikšmė dauginama iš gardelės skiriamosios gebos, kompensuojant už judėjimą įstrižai, ir gaunama bendrųjų sąnaudų kertant gardelę suma.",
	"@@Path-Distance-Allocation_Cost-Raster_tag1@@": "<strong>Cost Raster</strong> reikšmės gali būti sveikieji skaičiai arba skaičiai su slankiuoju kableliu, tačiau ne neigiamos ir ne nulinės reikšmės.",
	"@@Path-Distance-Allocation_horizontalfactor_tag0@@": "<p>Aprašo ryšį tarp horizontalaus sąnaudų veiksnio ir horizontalaus santykinio judančio kampo (HRMA).</p><p>Yra keli veiksniai su modifikatoriais, kurie identifikuoja apibrėžtą vertikalaus veiksnio grafiką. Taip pat galite naudodami lentelę sukurti adaptuotą grafiką. Grafikai naudojami identifikuoti vertikalų veiksnį, kuris naudojamas skaičiuojant bendrąsias keliavimo į kaimyninę gardelę išlaidas.</p><p>Toliau pateikiamuose paaiškinimuose naudojami du akronimai: HF ir HRMA. HF žymi horizontalų veiksnį, kuris apibrėžia horizontalų sunkumą, su kuriuos susiduriama judant iš vienos gardelės į kitą. HRMA žymi horizontalųjį santykinį judantį kampą, kuris identifikuoja kampą tarp gardelės horizontalios krypties ir judėjimo krypties.</p><p><strong>Horizontalių veiksnių</strong> tipai yra tokie:</p><ul><li><strong>Dvejetainis</strong> – nurodo, kad jei HRMA yra mažesnis nei pjūvio kampas, HF nustatomas į su nuliniu veiksniu susijusią reikšmę; kitu atveju jis yra begalybė.</li><li><strong>Pirmyn</strong> – nurodo, kad leidžiama judėti tik pirmyn. HRMA turi būti didesnis nei arba lygus 0 ir mažesnis nei arba lygus 90 laipsnių (0 <= HRMA < 90). Jei HRMA didesnis nei 0 ir mažesnis nei 45 laipsniai, gardelės HF nustatomas į su nuliniu veiksniu susijusią reikšmę. Jei HRMA didesnis arba lygus nei 45 laipsniai, naudojama šoninė reikšmės modifikatoriaus reikšmė. Bet kokiai 90 laipsnių lygiai ar didesnei HRMA reikšmei nustatomas begalybei lygus HF.</li><li><strong>Tiesinis</strong> – nurodo, kad HF yra tiesinė HRMA funkcija.</li><li><strong>Atvirkštinis tiesinis</strong> – nurodo, kad HF yra atvirkščiai proporcinga tiesinė HRMA funkcija.</li><li><strong>Lentelė</strong> – nurodo, kad horizontalaus veiksnio grafikui, pagal kurį nustatomi HF, apibrėžti naudojamas lentelės failas.</li></ul><p>Horizontalių veiksnių modifikatoriai apima:</p><ul><li><strong>Nulinis veiksnys</strong> – horizontalus veiksnys, naudojamas kai HRMA lygu nuliui. Šis veiksnys bet kokioms horizontalaus veiksnio funkcijoms nustato y susikirtimo padėtį.</li><li><strong>Pjūvio kampas</strong> – apibrėžia HRMA kampą, kurį viršijus HF bus nustatytas kaip begalybė.</li><li><strong>Pasvirimas</strong> – nustato tiesios linijos pasvirimą, kuris bus naudojamas naudojamas su horizontalaus veiksnio raktažodžiais <strong>Tiesinis</strong> ir <strong>Atvirkštinis tiesinis</strong>. Pasvirimas nurodomas kaip pakilimo dalis per važiavimą (pavyzdžiui, 45 procentų pasvirimas yra 1/45 ir įvedamas kaip 0,02222).</li><li><strong>Šoninė reikšmė</strong> – nustato HF, kai HRMA didesnis už arba lygus 45 laipsniams ir mažesnis nei 90 laipsnių, nurodžius horizontalaus veiksnio raktažodį <strong>Pirmyn</strong>.</li><li><strong>Lentelės pavadinimas</strong> – identifikuoja HF aprašančios lentelės pavadinimą.</li></ul>",
	"@@Path-Distance-Allocation_Horizontal-Raster_tag0@@": "Rastras, aprašantis kiekvienos gardelės horizontalią kryptį.",
	"@@Path-Distance-Allocation_Horizontal-Raster_tag1@@": "Rastre esančios reikšmės turi būti tarp 0 ir 360, kur 0 laipsnių atitinka šiaurę arba ekrano viršų ir laipsniai didėja pagal laikrodžio rodyklę. Plokščioms teritorijoms reikia priskirti reikšmę -1. Kiekvienos padėties reikšmės bus naudojamos su <strong>Horizontal factor</strong>, siekiant nustatyti horizontalias išlaidas, patirtas judant iš gardelės į kaimynines.",
	"@@Path-Distance-Allocation_Maximum-Distance_tag0@@": "Riba, kurios negali viršyti suminių sąnaudų reikšmės. Jei suminių sąnaudų atstumas viršija šią reikšmę, gardelės padėties išvesties reikšmė bus NoData. Maksimalus atstumas apibrėžia aprėptį, kuriai skaičiuojami suminiai sąnaudų atstumai. Numatytasis atstumas yra matuojama iki išvesties rastro aprėpties.",
	"@@Path-Distance-Allocation_Multiplier-to-Apply-to-Costs_tag0@@": "Daugiklis, pritaikomas išlaidų reikšmėms.",
	"@@Path-Distance-Allocation_Multiplier-to-Apply-to-Costs_tag1@@": "Šis parametras leidžia šaltinyje valdyti kelionės modelį arba stiprumą. Kuo daugiklis didesnis, tuo didesnės išlaidos keliauti per kiekvieną gardelę.",
	"@@Path-Distance-Allocation_Multiplier-to-Apply-to-Costs_tag2@@": "Reikšmės turi būti didesnės už nulį. Numatytoji reikšmė yra 1.",
	"@@Path-Distance-Allocation_Multiplier-to-Apply-to-Costs_tag3@@": "Šiam parametrui gali būti naudojama skaitinė (dviguba) reikšmė arba <strong>Source Raster</strong> laukas.",
	"@@Path-Distance-Allocation_Source-Field_tag0@@": "Laukas, naudojamas priskirti reikšmes šaltinio padėtims. Jis turi būti sveikojo skaičiaus tipo. Jei nustatytas <strong>Value Raster</strong>, tos įvesties reikšmėms bus teikiama pirmenybė prieš bet kokį nustatymą, atliktą <strong>Source Field</strong>.",
	"@@Path-Distance-Allocation_Source-Raster_tag0@@": "Būtinas šaltinio padėčių įvesties rastras.",
	"@@Path-Distance-Allocation_Source-Raster_tag1@@": "Tai yra rastras, kuris identifikuoja gardeles ar padėtis, iš kurių skaičiuojamas mažiausias suminis sąnaudų atstumas kiekvienai išvesties gardelės padėčiai.",
	"@@Path-Distance-Allocation_Source-Raster_tag2@@": "Tai gali būti sveikasis skaičius arba slankiojo kablelio tipo.",
	"@@Path-Distance-Allocation_Start-Cost_tag0@@": "Pradinė kaina, nuo kurios pradedami išlaidų skaičiavimai. Šis parametras leidžia nurodyti fiksuotą su šaltiniu susijusią kainą. Užuot pradėjęs nuo 0 lygios kainos, išlaidų skaičiavimo algoritmas pradės nuo nurodytos reikšmės.",
	"@@Path-Distance-Allocation_Start-Cost_tag1@@": "Reikšmė turi būti lygi nuliui arba didesnė. Numatytoji reikšmė yra 0.",
	"@@Path-Distance-Allocation_Surface-Raster_tag0@@": "Rastras, aprašantis kiekvienos gardelės padėties aukščio reikšmę.",
	"@@Path-Distance-Allocation_Surface-Raster_tag1@@": "Šios reikšmės naudojamos skaičiuojant faktinį paviršiaus atstumą, kuris įveikiamas keliaujant tarp gardelių.",
	"@@Path-Distance-Allocation_Travel-Direction_tag0@@": "Apibrėžia keliautojo kryptį taikant šaltinio pasipriešinimo koeficientą bei pradinę šaltinio kainą.",
	"@@Path-Distance-Allocation_Travel-Direction_tag1@@": "<strong>From Source</strong>--Šaltinio pasipriešinimo koeficientas ir šaltinio pradinė kaina bus pritaikyti ties įvesties šaltiniu ir iškeliaujant į šaltiniui nepriklausančias gardeles. Tai numatytasis nustatymas.",
	"@@Path-Distance-Allocation_Travel-Direction_tag3@@": "<strong>To Source</strong>--Šaltinio pasipriešinimo koeficientas ir šaltinio pradinė kaina bus pritaikyti ties kiekviena šaltiniui nepriklausančia gardele ir grįžtant į įvesties šaltinį.",
	"@@Path-Distance-Allocation_Travel-Direction_tag5@@": "Nurodykite raktažodį <strong>From Source</strong> arba <strong>To Source</strong>, kuris bus taikomas visiems šaltiniams, arba nurodykite <strong>Source Raster</strong> lauką, kuriame yra raktažodžiai, leidžiantys kiekvienam šaltiniui identifikuoti kelionės kryptį. Tame lauke turi būti eilutė ${FROM_SOURCE} arba ${TO_SOURCE}.",
	"@@Path-Distance-Allocation_Value-Raster_tag0@@": "Įvesties sveikojo skaičiaus rastras, kuris identifikuoja zonos reikšmes, kurios turi būti naudojamos kiekvienai įvesties šaltinio padėčiai. Kiekvienai šaltinio padėties gardelei, reikšmė, nustatyta <strong>Value Raster</strong>, bus priskirta visoms gardelėms, skaičiavimui paskirtoms prie šaltinio padėties. <strong>Value Raster</strong> turės pirmenybę prieš bet kokį nustatymą, atliktą <strong>Source Field</strong>.",
	"@@Path-Distance-Allocation_verticalfactor_tag0@@": "<p>Aprašo ryšį tarp vertikalaus sąnaudų veiksnio ir vertikalaus santykinio judančio kampo (VRMA).</p><p>Yra keli veiksniai su modifikatoriais, kurie identifikuoja apibrėžtą vertikalaus veiksnio grafiką. Taip pat galite naudodami lentelę sukurti adaptuotą grafiką. Grafikai naudojami identifikuoti vertikalų veiksnį, kuris naudojamas skaičiuojant bendrąsias keliavimo į kaimyninę gardelę išlaidas.</p><p>Toliau pateikiamuose paaiškinimuose naudojami du akronimai: VF ir VRMA. VF žymi vertikalų veiksnį, kuris apibrėžia vertikalų sunkumą, su kuriuos susiduriama judant iš vienos gardelės į kitą. VRMA žymi vertikalų santykinį judantį kampą, kurios identifikuoja pasvirimo kampą tarp IŠ (apdorojimo), gardelės ir Į gardelę.</p><p><strong>Vertikalaus veiksnio</strong> tipai gali būti:</p><ul><li><strong>Dvejetainis</strong> – nurodo, kad jei VRMA yra didesnis nei apatinis pjūvio kampas ir mažesnis nei viršutinis pjūvio kampas, VF nustatomas į su nuliniu veiksniu susijusią reikšmę; kitu atveju jis yra begalybė.</li><li><strong>Tiesinis</strong> – nurodo, kad VF yra tiesinė VRMA funkcija.</li><li><strong>Simetrinis tiesinis</strong> – nurodo, kad VF yra tiesinė VRMA funkcija atitinkamai neigiamoje arba teigiamoje VRMA pusėje ir šios dvi tiesinės funkcijos yra simetriškos VF (y) ašies atžvilgiu.</li><li><strong>Atvirkštinis tiesinis</strong> – nurodo, kad VF yra atvirkščiai proporcinga tiesinė VRMA funkcija.</li><li><strong>Simetrinis atvirkštinis tiesinis</strong> – nurodo, kad VF yra atvirkščiai proporcinga tiesinė VRMA funkcija atitinkamai neigiamoje arba teigiamoje VRMA pusėje, ir kad šios dvi tiesinės funkcijos yra simetriškos VF (y) ašies atžvilgiu.</li><li><strong>Kosinusinis</strong> – identifikuoja VF kaip kosinusinę VRMA funkciją.</li><li><strong>Kirstinis</strong> – identifikuoja VF kaip kirstinę VRMA funkciją.</li><li><strong>Kosinusinis-kirstinis</strong> – nurodo, kad VF yra kosinusinė VRMA funkcija, kai VRMA yra neigiamas, ir kirstinė VRMA funkcija, kai šis kampas nėra neigiamas.</li><li><strong>Kirstinis-kosinusinis</strong> – nurodo, kad VF yra kirstinė VRMA funkcija, kai VRMA yra neigiamas, ir kosinusinė VRMA funkcija, kai šis kampas nėra neigiamas.</li><li><strong>Lentelė</strong> – nurodo, kad vertikalaus veiksnio grafikui, pagal kurį nustatomi VF, apibrėžti naudojamas lentelės failas.</li></ul><p>Vertikalių raktažodžių modifikatoriai apima:</p><ul><li><strong>Nulinis veiksnys</strong> – nustato vertikalų veiksnį, kuris naudojamas, kai VRMA lygus nuliui. Šis veiksnys nurodytai funkcijai nustato y susikirtimo padėtį. Pagal apibrėžimą nulinis veiksnys netaikomas jokioms trigonometrinėms vertikalioms funkcijoms (COS, SEC, COS-SEC ir SEC-COS). Šios funkcijos apibrėžia y susikirtimą.</li><li><strong>Apatinio pjūvio kampas</strong> – apibrėžia VRMA kampą, žemiau kurio VF bus nustatytas kaip begalybė.</li><li><strong>Viršutinis pjūvio kampas</strong> – apibrėžia VRMA kampą, virš kurio VF bus nustatytas kaip begalybė.</li><li><strong>Pasvirimas</strong> – nustato tiesios linijos pasvirimą, naudojamą su vertikalaus veiksnio raktažodžiais <strong>Tiesinis</strong> ir <strong>Atvirkštinis tiesinis</strong>. Pasvirimas nurodomas kaip pakilimo dalis per važiavimą (pavyzdžiui, 45 procentų pasvirimas yra 1/45 ir įvedamas kaip 0,02222).</li><li><strong>Lentelės pavadinimas</strong> – identifikuoja VF aprašančios lentelės pavadinimą.</li></ul>",
	"@@Path-Distance-Allocation_Vertical-Raster_tag0@@": "Aprašo ryšį tarp vertikalaus sąnaudų veiksnio ir vertikalaus santykinio judančio kampo (VRMA).",
	"@@Path-Distance-Allocation_Vertical-Raster_tag1@@": "Šios reikšmės naudojamos skaičiuojant pasvirimą, kuris naudojamas identifikuojant vertikalų veiksnį, patiriamą judant iš vienos gardelės į kitą.",
	"@@Path-Distance-Back-Link_Accumulative-Cost-Resistance-Rate_tag0@@": "Šis parametras simuliuoja, kaip didėjant suminėms išlaidoms auga pastangos kompensuoti sąnaudas. Jis naudojamas keliautojo nuovargiui modeliuoti. Augančios suminės sąnaudos pasiekti gardelę padauginamos iš pasipriešinimo koeficiento ir pridedamos prie išlaidų perėjimui į kitą gardelę.",
	"@@Path-Distance-Back-Link_Accumulative-Cost-Resistance-Rate_tag1@@": "Tai modifikuota sudėtinės palūkanų normos formulės versija, naudojama apskaičiuoti akivaizdžias judėjimo per gardelę išlaidas. Didėjant pasipriešinimo koeficiento reikšmei, ji kelia toliau lankomų gardelių sąnaudas. Kuo didesnis pasipriešinimo koeficientas, tuo didesnės išlaidos norit pasiekti kitą gardelę, ir jos susideda kiekvienam tolesniam judesiui. Kadangi pasipriešinimo koeficientas panašus į sudėtinį koeficientą, o suminių sąnaudų reikšmės paprastai labai didelės, rekomenduojama naudoti mažus pasipriešinimo koeficientus, pavyzdžiui, 0,005 ar net mažesnius, atsižvelgiant į suminių sąnaudų reikšmes.",
	"@@Path-Distance-Back-Link_Accumulative-Cost-Resistance-Rate_tag2@@": "Reikšmė turi būti didesnė už nulį. Numatytoji apimtis yra matuojama iki išvesties rastro briaunos.",
	"@@Path-Distance-Back-Link_Capacity_tag0@@": "Šaltiniui apibrėžia keliautojo išlaidų apimtį. Išlaidų skaičiavimai tęsiami kiekvienam šaltiniui, kol pasiekiama nurodyta apimtis.",
	"@@Path-Distance-Back-Link_Capacity_tag1@@": "Reikšmė turi būti didesnė už nulį. Numatytoji apimtis yra matuojama iki išvesties rastro briaunos.",
	"@@Path-Distance-Back-Link_Cost-Raster_tag0@@": "Būtinas įvesties rastras, apibrėžiantis planimetriško judėjimo per kiekvieną gardelę sąnaudas arba trukdžius. Kiekvienos gardelės padėties reikšmė atspindi sąnaudos vienetui atstumą judant per gardelę. Kiekvienos gardelės padėties reikšmė dauginama iš gardelės skiriamosios gebos, kompensuojant už judėjimą įstrižai, ir gaunama bendrųjų sąnaudų kertant gardelę suma.",
	"@@Path-Distance-Back-Link_Cost-Raster_tag1@@": "<strong>Cost Raster</strong> reikšmės gali būti sveikieji skaičiai arba skaičiai su slankiuoju kableliu, tačiau ne neigiamos ir ne nulinės reikšmės.",
	"@@Path-Distance-Back-Link_horizontalfactor_tag0@@": "<p>Aprašo ryšį tarp horizontalaus sąnaudų veiksnio ir horizontalaus santykinio judančio kampo (HRMA).</p><p>Yra keli veiksniai su modifikatoriais, kurie identifikuoja apibrėžtą vertikalaus veiksnio grafiką. Taip pat galite naudodami lentelę sukurti adaptuotą grafiką. Grafikai naudojami identifikuoti vertikalų veiksnį, kuris naudojamas skaičiuojant bendrąsias keliavimo į kaimyninę gardelę išlaidas.</p><p>Toliau pateikiamuose paaiškinimuose naudojami du akronimai: HF ir HRMA. HF žymi horizontalų veiksnį, kuris apibrėžia horizontalų sunkumą, su kuriuos susiduriama judant iš vienos gardelės į kitą. HRMA žymi horizontalųjį santykinį judantį kampą, kuris identifikuoja kampą tarp gardelės horizontalios krypties ir judėjimo krypties.</p><p><strong>Horizontalių veiksnių</strong> tipai yra tokie:</p><ul><li><strong>Dvejetainis</strong> – nurodo, kad jei HRMA yra mažesnis nei pjūvio kampas, HF nustatomas į su nuliniu veiksniu susijusią reikšmę; kitu atveju jis yra begalybė.</li><li><strong>Pirmyn</strong> – nurodo, kad leidžiama judėti tik pirmyn. HRMA turi būti didesnis nei arba lygus 0 ir mažesnis nei arba lygus 90 laipsnių (0 <= HRMA < 90). Jei HRMA didesnis nei 0 ir mažesnis nei 45 laipsniai, gardelės HF nustatomas į su nuliniu veiksniu susijusią reikšmę. Jei HRMA didesnis arba lygus nei 45 laipsniai, naudojama šoninė reikšmės modifikatoriaus reikšmė. Bet kokiai 90 laipsnių lygiai ar didesnei HRMA reikšmei nustatomas begalybei lygus HF.</li><li><strong>Tiesinis</strong> – nurodo, kad HF yra tiesinė HRMA funkcija.</li><li><strong>Atvirkštinis tiesinis</strong> – nurodo, kad HF yra atvirkščiai proporcinga tiesinė HRMA funkcija.</li><li><strong>Lentelė</strong> – nurodo, kad horizontalaus veiksnio grafikui, pagal kurį nustatomi HF, apibrėžti naudojamas lentelės failas.</li></ul><p>Horizontalių veiksnių modifikatoriai apima:</p><ul><li><strong>Nulinis veiksnys</strong> – horizontalus veiksnys, naudojamas kai HRMA lygu nuliui. Šis veiksnys bet kokioms horizontalaus veiksnio funkcijoms nustato y susikirtimo padėtį.</li><li><strong>Pjūvio kampas</strong> – apibrėžia HRMA kampą, kurį viršijus HF bus nustatytas kaip begalybė.</li><li><strong>Pasvirimas</strong> – nustato tiesios linijos pasvirimą, kuris bus naudojamas naudojamas su horizontalaus veiksnio raktažodžiais <strong>Tiesinis</strong> ir <strong>Atvirkštinis tiesinis</strong>. Pasvirimas nurodomas kaip pakilimo dalis per važiavimą (pavyzdžiui, 45 procentų pasvirimas yra 1/45 ir įvedamas kaip 0,02222).</li><li><strong>Šoninė reikšmė</strong> – nustato HF, kai HRMA didesnis už arba lygus 45 laipsniams ir mažesnis nei 90 laipsnių, nurodžius horizontalaus veiksnio raktažodį <strong>Pirmyn</strong>.</li><li><strong>Lentelės pavadinimas</strong> – identifikuoja HF aprašančios lentelės pavadinimą.</li></ul>",
	"@@Path-Distance-Back-Link_Horizontal-Raster_tag0@@": "Rastras, aprašantis kiekvienos gardelės horizontalią kryptį.",
	"@@Path-Distance-Back-Link_Horizontal-Raster_tag1@@": "Rastre esančios reikšmės turi būti tarp 0 ir 360, kur 0 laipsnių atitinka šiaurę arba ekrano viršų ir laipsniai didėja pagal laikrodžio rodyklę. Plokščioms teritorijoms reikia priskirti reikšmę -1. Kiekvienos padėties reikšmės bus naudojamos su <strong>Horizontal factor</strong>, siekiant nustatyti horizontalias išlaidas, patirtas judant iš gardelės į kaimynines.",
	"@@Path-Distance-Back-Link_Maximum-Distance_tag0@@": "Riba, kurios negali viršyti suminių sąnaudų reikšmės. Jei suminių sąnaudų atstumas viršija šią reikšmę, gardelės padėties išvesties reikšmė bus NoData. Maksimalus atstumas apibrėžia aprėptį, kuriai skaičiuojami suminiai sąnaudų atstumai. Numatytasis atstumas yra matuojama iki išvesties rastro aprėpties.",
	"@@Path-Distance-Back-Link_Multiplier-to-Apply-to-Costs_tag0@@": "Daugiklis, pritaikomas išlaidų reikšmėms.",
	"@@Path-Distance-Back-Link_Multiplier-to-Apply-to-Costs_tag1@@": "Šis parametras leidžia šaltinyje valdyti kelionės modelį arba stiprumą. Kuo daugiklis didesnis, tuo didesnės išlaidos keliauti per kiekvieną gardelę.",
	"@@Path-Distance-Back-Link_Multiplier-to-Apply-to-Costs_tag2@@": "Reikšmės turi būti didesnės už nulį. Numatytoji reikšmė yra 1.",
	"@@Path-Distance-Back-Link_Multiplier-to-Apply-to-Costs_tag3@@": "Šiam parametrui gali būti naudojama skaitinė (dviguba) reikšmė arba <strong>Source Raster</strong> laukas.",
	"@@Path-Distance-Back-Link_Source-Raster_tag0@@": "Būtinas šaltinio padėčių įvesties rastras.",
	"@@Path-Distance-Back-Link_Source-Raster_tag1@@": "Tai yra rastras, kuris identifikuoja gardeles ar padėtis, iš kurių skaičiuojamas mažiausias suminis sąnaudų atstumas kiekvienai išvesties gardelės padėčiai.",
	"@@Path-Distance-Back-Link_Source-Raster_tag2@@": "Tai gali būti sveikasis skaičius arba slankiojo kablelio tipo.",
	"@@Path-Distance-Back-Link_Start-Cost_tag0@@": "Pradinė kaina, nuo kurios pradedami išlaidų skaičiavimai. Šis parametras leidžia nurodyti fiksuotą su šaltiniu susijusią kainą. Užuot pradėjęs nuo 0 lygios kainos, išlaidų skaičiavimo algoritmas pradės nuo nurodytos reikšmės.",
	"@@Path-Distance-Back-Link_Start-Cost_tag1@@": "Reikšmė turi būti lygi nuliui arba didesnė. Numatytoji reikšmė yra 0.",
	"@@Path-Distance-Back-Link_Surface-Raster_tag0@@": "Rastras, aprašantis kiekvienos gardelės padėties aukščio reikšmę.",
	"@@Path-Distance-Back-Link_Surface-Raster_tag1@@": "Šios reikšmės naudojamos skaičiuojant faktinį paviršiaus atstumą, kuris įveikiamas keliaujant tarp gardelių.",
	"@@Path-Distance-Back-Link_Travel-Direction_tag0@@": "Apibrėžia keliautojo kryptį taikant šaltinio pasipriešinimo koeficientą bei pradinę šaltinio kainą.",
	"@@Path-Distance-Back-Link_Travel-Direction_tag1@@": "<strong>From Source</strong>--Šaltinio pasipriešinimo koeficientas ir šaltinio pradinė kaina bus pritaikyti ties įvesties šaltiniu ir iškeliaujant į šaltiniui nepriklausančias gardeles. Tai numatytasis nustatymas.",
	"@@Path-Distance-Back-Link_Travel-Direction_tag3@@": "<strong>To Source</strong>--Šaltinio pasipriešinimo koeficientas ir šaltinio pradinė kaina bus pritaikyti ties kiekviena šaltiniui nepriklausančia gardele ir grįžtant į įvesties šaltinį.",
	"@@Path-Distance-Back-Link_Travel-Direction_tag5@@": "Nurodykite raktažodį <strong>From Source</strong> arba <strong>To Source</strong>, kuris bus taikomas visiems šaltiniams, arba nurodykite <strong>Source Raster</strong> lauką, kuriame yra raktažodžiai, leidžiantys kiekvienam šaltiniui identifikuoti kelionės kryptį. Tame lauke turi būti eilutė ${FROM_SOURCE} arba ${TO_SOURCE}.",
	"@@Path-Distance-Back-Link_verticalfactor_tag0@@": "<p>Aprašo ryšį tarp vertikalaus sąnaudų veiksnio ir vertikalaus santykinio judančio kampo (VRMA).</p><p>Yra keli veiksniai su modifikatoriais, kurie identifikuoja apibrėžtą vertikalaus veiksnio grafiką. Taip pat galite naudodami lentelę sukurti adaptuotą grafiką. Grafikai naudojami identifikuoti vertikalų veiksnį, kuris naudojamas skaičiuojant bendrąsias keliavimo į kaimyninę gardelę išlaidas.</p><p>Toliau pateikiamuose paaiškinimuose naudojami du akronimai: VF ir VRMA. VF žymi vertikalų veiksnį, kuris apibrėžia vertikalų sunkumą, su kuriuos susiduriama judant iš vienos gardelės į kitą. VRMA žymi vertikalų santykinį judantį kampą, kurios identifikuoja pasvirimo kampą tarp IŠ (apdorojimo), gardelės ir Į gardelę.</p><p><strong>Vertikalaus veiksnio</strong> tipai gali būti:</p><ul><li><strong>Dvejetainis</strong> – nurodo, kad jei VRMA yra didesnis nei apatinis pjūvio kampas ir mažesnis nei viršutinis pjūvio kampas, VF nustatomas į su nuliniu veiksniu susijusią reikšmę; kitu atveju jis yra begalybė.</li><li><strong>Tiesinis</strong> – nurodo, kad VF yra tiesinė VRMA funkcija.</li><li><strong>Simetrinis tiesinis</strong> – nurodo, kad VF yra tiesinė VRMA funkcija atitinkamai neigiamoje arba teigiamoje VRMA pusėje ir šios dvi tiesinės funkcijos yra simetriškos VF (y) ašies atžvilgiu.</li><li><strong>Atvirkštinis tiesinis</strong> – nurodo, kad VF yra atvirkščiai proporcinga tiesinė VRMA funkcija.</li><li><strong>Simetrinis atvirkštinis tiesinis</strong> – nurodo, kad VF yra atvirkščiai proporcinga tiesinė VRMA funkcija atitinkamai neigiamoje arba teigiamoje VRMA pusėje, ir kad šios dvi tiesinės funkcijos yra simetriškos VF (y) ašies atžvilgiu.</li><li><strong>Kosinusinis</strong> – identifikuoja VF kaip kosinusinę VRMA funkciją.</li><li><strong>Kirstinis</strong> – identifikuoja VF kaip kirstinę VRMA funkciją.</li><li><strong>Kosinusinis-kirstinis</strong> – nurodo, kad VF yra kosinusinė VRMA funkcija, kai VRMA yra neigiamas, ir kirstinė VRMA funkcija, kai šis kampas nėra neigiamas.</li><li><strong>Kirstinis-kosinusinis</strong> – nurodo, kad VF yra kirstinė VRMA funkcija, kai VRMA yra neigiamas, ir kosinusinė VRMA funkcija, kai šis kampas nėra neigiamas.</li><li><strong>Lentelė</strong> – nurodo, kad vertikalaus veiksnio grafikui, pagal kurį nustatomi VF, apibrėžti naudojamas lentelės failas.</li></ul><p>Vertikalių raktažodžių modifikatoriai apima:</p><ul><li><strong>Nulinis veiksnys</strong> – nustato vertikalų veiksnį, kuris naudojamas, kai VRMA lygus nuliui. Šis veiksnys nurodytai funkcijai nustato y susikirtimo padėtį. Pagal apibrėžimą nulinis veiksnys netaikomas jokioms trigonometrinėms vertikalioms funkcijoms (COS, SEC, COS-SEC ir SEC-COS). Šios funkcijos apibrėžia y susikirtimą.</li><li><strong>Apatinio pjūvio kampas</strong> – apibrėžia VRMA kampą, žemiau kurio VF bus nustatytas kaip begalybė.</li><li><strong>Viršutinis pjūvio kampas</strong> – apibrėžia VRMA kampą, virš kurio VF bus nustatytas kaip begalybė.</li><li><strong>Pasvirimas</strong> – nustato tiesios linijos pasvirimą, naudojamą su vertikalaus veiksnio raktažodžiais <strong>Tiesinis</strong> ir <strong>Atvirkštinis tiesinis</strong>. Pasvirimas nurodomas kaip pakilimo dalis per važiavimą (pavyzdžiui, 45 procentų pasvirimas yra 1/45 ir įvedamas kaip 0,02222).</li><li><strong>Lentelės pavadinimas</strong> – identifikuoja VF aprašančios lentelės pavadinimą.</li></ul>",
	"@@Path-Distance-Back-Link_Vertical-Raster_tag0@@": "Aprašo ryšį tarp vertikalaus sąnaudų veiksnio ir vertikalaus santykinio judančio kampo (VRMA).",
	"@@Path-Distance-Back-Link_Vertical-Raster_tag1@@": "Šios reikšmės naudojamos skaičiuojant pasvirimą, kuris naudojamas identifikuojant vertikalų veiksnį, patiriamą judant iš vienos gardelės į kitą.",
	"@@Plus_Cellsize-Type_tag0@@": "Pasirinkite, koks gardelės dydis bus naudojamas išvesties rastre. Jei visų įvesties gardelių dydžiai vienodi, visos parinktys pateiks vienodus rezultatus.",
	"@@Plus_Cellsize-Type_tag1@@": "Pirmiausia--Naudoti pirmą įvesties rastrų gardelės dydį.",
	"@@Plus_Cellsize-Type_tag2@@": "Paskiausia--Naudoti paskutinį įvesties rastrų gardelės dydį.",
	"@@Plus_Cellsize-Type_tag3@@": "Didžiausias--Naudoti didžiausią įvesties rastrų gardelės dydį. Tai numatytasis nustatymas.",
	"@@Plus_Cellsize-Type_tag4@@": "Vidutinis--Naudoti vidutinį visų įvesties rastrų gardelės dydį.",
	"@@Plus_Cellsize-Type_tag5@@": "Mažiausias--Naudoti mažiausią įvesties rastrų gardelės dydį.",
	"@@Plus_Extent-Type_tag0@@": "Pasirinkite, kokia aprėptis bus naudojama išvesties rastre:",
	"@@Plus_Extent-Type_tag1@@": "Pirmiausia--Naudoti pirmojo įvesties rastro aprėptį nustatant apdorojimo aprėptį.",
	"@@Plus_Extent-Type_tag2@@": "Sankirta--Naudoti persidengiančių pikselių aprėptį nustatant apdorojimo aprėptį. Tai numatytasis nustatymas.",
	"@@Plus_Extent-Type_tag3@@": "Paskiausia--Naudoti paskutinio įvesties rastro aprėptį nustatant apdorojimo aprėptį.",
	"@@Plus_Extent-Type_tag4@@": "Sąjunga--Naudoti visų rastrų aprėptį nustatant apdorojimo aprėptį.",
	"@@Plus_Raster_tag0@@": "Šių reikšmių įvestis bus pridėta prie.",
	"@@Plus_Raster_tag1@@": "Šiam parametrui kaip įvestį galima naudoti konstantos reikšmę, jei kitam parametrui nurodytas rastras.",
	"@@Plus_Raster2_tag0@@": "Įvestis, kurios reikšmės bus pridėtos prie pirmosios įvesties.",
	"@@Plus_Raster2_tag1@@": "Šiam parametrui kaip įvestį galima naudoti konstantos reikšmę, jei kitam parametrui nurodytas rastras.",
	"@@Local_Cellsize-Type_tag0@@": "Pasirinkite, koks gardelės dydis bus naudojamas išvesties rastre. Jei visų įvesties gardelių dydžiai vienodi, visos parinktys pateiks vienodus rezultatus.",
	"@@Local_Cellsize-Type_tag1@@": "Pirmiausia--Naudoti pirmą įvesties rastrų gardelės dydį.",
	"@@Local_Cellsize-Type_tag2@@": "Paskiausia--Naudoti paskutinį įvesties rastrų gardelės dydį.",
	"@@Local_Cellsize-Type_tag3@@": "Didžiausias--Naudoti didžiausią įvesties rastrų gardelės dydį. Tai yra numatytasis nustatymas.",
	"@@Local_Cellsize-Type_tag4@@": "Vidutinis--Naudoti vidutinį visų įvesties rastrų gardelės dydį.",
	"@@Local_Cellsize-Type_tag5@@": "Mažiausias--Naudoti mažiausią įvesties rastrų gardelės dydį.",
	"@@Local_Extent-Type_tag0@@": "Pasirinkite, kokia aprėptis bus naudojama išvesties rastre:",
	"@@Local_Extent-Type_tag1@@": "Pirmiausia--Naudoti pirmojo įvesties rastro aprėptį, nustatant apdorojimo aprėptį.",
	"@@Local_Extent-Type_tag2@@": "Sankirta--Naudoti persidengiančių pikselių aprėptį nustatant apdorojimo aprėptį. Tai yra numatytasis nustatymas.",
	"@@Local_Extent-Type_tag3@@": "Paskiausia--Naudoti paskutinio įvesties rastro aprėptį nustatant apdorojimo aprėptį.",
	"@@Local_Extent-Type_tag4@@": "Sąjunga--Naudoti visų rastrų aprėptį, nustatant apdorojimo aprėptį.",
	"@@Local_Raster_tag0@@": "Šių reikšmių įvestis bus pridėta prie.",
	"@@Local_Raster_tag1@@": "Šiam parametrui kaip įvestį galima naudoti konstantos reikšmę, jei kitam parametrui nurodytas rastras.",
	"@@Local_Raster2_tag0@@": "Įvestis, kurios reikšmės bus pridėtos prie pirmosios įvesties.",
	"@@Local_Raster2_tag1@@": "Šiam parametrui kaip įvestį galima naudoti konstantos reikšmę, jei kitam parametrui nurodytas rastras.",
	"@@Local_False-Raster_tag0@@": "Įvestis, kurios reikšmės bus naudojamos kaip išvesties pikselių reikšmės, jei sąlyga bus neteisinga. Tai gali būti sveikasis skaičius, slankiojo kablelio rastras arba konstantos reikšmė.",
	"@@Local_True-Raster_tag0@@": "Įvestis, kurios reikšmės bus naudojamos kaip išvesties pikselių reikšmės, jei sąlyga bus teisinga. Tai gali būti sveikasis skaičius, slankiojo kablelio rastras arba konstantos reikšmė.",
	"@@Power_Cellsize-Type_tag0@@": "Pasirinkite, koks gardelės dydis bus naudojamas išvesties rastre. Jei visų įvesties gardelių dydžiai vienodi, visos parinktys pateiks vienodus rezultatus.",
	"@@Power_Cellsize-Type_tag1@@": "Pirmiausia--Naudoti pirmą įvesties rastrų gardelės dydį.",
	"@@Power_Cellsize-Type_tag2@@": "Paskiausia--Naudoti paskutinį įvesties rastrų gardelės dydį.",
	"@@Power_Cellsize-Type_tag3@@": "Didžiausias--Naudoti didžiausią įvesties rastrų gardelės dydį. Tai numatytasis nustatymas.",
	"@@Power_Cellsize-Type_tag4@@": "Vidutinis--Naudoti vidutinį visų įvesties rastrų gardelės dydį.",
	"@@Power_Cellsize-Type_tag5@@": "Mažiausias--Naudoti mažiausią įvesties rastrų gardelės dydį.",
	"@@Power_Extent-Type_tag0@@": "Pasirinkite, kokia aprėptis bus naudojama išvesties rastre:",
	"@@Power_Extent-Type_tag1@@": "Pirmiausia--Naudoti pirmojo įvesties rastro aprėptį nustatant apdorojimo aprėptį.",
	"@@Power_Extent-Type_tag2@@": "Sankirta--Naudoti persidengiančių pikselių aprėptį nustatant apdorojimo aprėptį. Tai numatytasis nustatymas.",
	"@@Power_Extent-Type_tag3@@": "Paskiausia--Naudoti paskutinio įvesties rastro aprėptį nustatant apdorojimo aprėptį.",
	"@@Power_Extent-Type_tag4@@": "Sąjunga--Naudoti visų rastrų aprėptį nustatant apdorojimo aprėptį.",
	"@@Power_Raster_tag0@@": "Įvesties reikšmės, kurios bus pakeltos laipsniu, aprašomu <strong>Raster2</strong>.",
	"@@Power_Raster_tag3@@": "Šiam parametrui kaip įvestį galima naudoti konstantos reikšmę, jei kitam parametrui nurodytas rastras.",
	"@@Power_Raster2_tag0@@": "Įvestis, kuri nustato, kokiu laipsniu bus pakeltos <strong>Raster</strong> reikšmės.",
	"@@Power_Raster2_tag3@@": "Šiam parametrui kaip įvestį galima naudoti konstantos reikšmę, jei kitam parametrui nurodytas rastras.",
	"@@Radar-Calibration_Calibration-Type_tag0@@": "Atliktino kalibravimo tipas.",
	"@@Radar-Calibration_Calibration-Type_tag1@@": "Beta nulinis--Ši funkcija pateikia radaro atspindėjimo gebą ploto vienetui nuožulniame intervale. Tai yra numatytasis kalibravimo tipas.",
	"@@Radar-Calibration_Calibration-Type_tag2@@": "Sigma nulinis--Ši funkcija pateikia radaro atspindėjimo gebą ploto vienetui žemės intervale. Rezultatai yra 32 bitų slankiojo kablelio reikšmės. Dažniausiai jos yra tarp 0,0 ir 1,0. Pasirinkus šią parinktį, duomenys nekarpomi.",
	"@@Radar-Calibration_Calibration-Type_tag3@@": "Gama--Ši funkcija pateikia radaro atspindėjimo gebą ploto vienetui plokštumoje, statmenoje matavimo krypčiai.",
	"@@Radar-Calibration_Calibration-Type_tag4@@": "Nėra",
	"@@Radar-Calibration_Raster_tag0@@": "Įvesties rastras.",
	"@@RasterInfo_Raster-Info_tag0@@": "Pasirinkite rastrinį duomenų rinkinį, kuris bus naudojamas kaip šablonas",
	"@@RasterInfo_Raster_tag0@@": "Įvesties rastras.",
	"@@Rasterize-Attributes_Attribute-Field-Names_tag0@@": "<strong>Zonal Attributes Table</strong> laukų sąrašas, kuriame laukus skiria kableliai. Kiekvieno lauko reikšmes išvesties kanale reprezentuos kanalas.",
	"@@Rasterize-Attributes_Background-Value_tag0@@": "Pradinė išvesties kanalų pikselio reikšmė rastre prieš perskaičiavimą.",
	"@@Rasterize-Attributes_Background-Value_tag1@@": "Jei pikselis nepatenka į zoną, jis lieka kaip fono reikšmė.",
	"@@Rasterize-Attributes_Value-Raster_tag0@@": "Būtinas įvesties rastras.",
	"@@Rasterize-Attributes_Value-Raster_tag1@@": "Įvestis turi būti vieno kanalo rastras. Jei naudojamas daugiakanalis rastras, bus panaudotas tik pirmas kanalas.",
	"@@Rasterize-Attributes_Where-Clause_tag0@@": "Neprivaloma papildoma užklausa, taikoma <strong>Zonal Attributes Table</strong>.",
	"@@Rasterize-Attributes_Where-Clause_tag3@@": "Jei , pavyzdžiui, naudotumėte aukščiau pateiktą lentelę, užklausa būtų ${Variable1 = 'bare earth'}.",
	"@@Rasterize-Attributes_Zonal-Attributes-Table_tag0@@": "Zonos atributai nurodyti kaip kelias į vietinę elementų klasę, kelias į lentelę, URL į elementų paslaugos sluoksnį arba JSON eilutė.",
	"@@Rasterize-Attributes_Zonal-Attributes-Table_tag1@@": "JSON jie aprašomi kaip zonų ID susiejimo su sveikųjų skaičių masyvu rinkinys. ${{ zoneId:[f1,f2,...,fn], ... } }",
	"@@Rasterize-Attributes_Zone-Field_tag0@@": "Lauko, kuriame yra zonų ID reikšmės, pavadinimas.",
	"@@Rasterize-Attributes_Zone-Raster_tag0@@": "Neprivalomas vieno kanalo rastras, kurio kiekvienas pikselis turi zonos ID, susietą su padėtimi. Zonos ID naudojamas eilutėms rasti zonų atributų lentelėje, kai to reikia konkrečios zonos įdėjimui.",
	"@@Rasterize-Attributes_Zone-Raster_tag1@@": "Šį parametrą palikite nenurodytą, jei tenorite importuoti atributą.",
	"@@Rasterize-Features_Field_tag0@@": "Pasirinkite lauką, kuris bus naudojamas kiekvienam elementui identifikuoti.",
	"@@Rasterize-Features_Input-Features_tag0@@": "Pasirinkite elementų klasę, kuris bus konvertuojama į rastrinį formatą.",
	"@@Rasterize-Features_Raster_tag0@@": "Pasirinkite rastrą, kurio elementų konvertavimui apibrėšite gardelės dydį ir aprėptį.",
	"@@Rasterize-Features_Resolve-Overlap-Method_tag0@@": "Nustatykite, ką daryti su persidengiančias elementais:",
	"@@Rasterize-Features_Resolve-Overlap-Method_tag1@@": "<strong>First</strong>--Persidengiančioms teritorijoms bus priskiriama reikšmė iš pirmo duomenų rinkinio sąraše.",
	"@@Rasterize-Features_Resolve-Overlap-Method_tag3@@": "<strong>Last</strong>--Persidengiančioms teritorijoms bus priskiriama reikšmė iš paskutinio duomenų rinkinio sąraše.",
	"@@Rasterize-Features_Resolve-Overlap-Method_tag5@@": "<strong>Smallest</strong>--Persidengiančioms teritorijoms bus priskiriama reikšmė iš mažesnio elemento.",
	"@@Rasterize-Features_Resolve-Overlap-Method_tag7@@": "<strong>Largest</strong>--Persidengiančioms teritorijoms bus priskiriama reikšmė iš didesnio elemento.",
	"@@Recast_Overrides_tag0@@": "Kintamųjų pavadinimų ir naudotojo nustatytų reikšmių lentelė, naudojama modifikuoti mozaikos rinkinį.",
	"@@Recast_Raster_tag0@@": "Rastro produktas, kuriam bus taikoma funkcija Perdaryti.",
	"@@Region-Group_Add-Link_tag0@@": "Nurodo, ar į išvesties lentelę įtrauktas nuorodos laukas.",
	"@@Region-Group_Add-Link_tag1@@": "<strong>Add Link</strong>--Elemento ${LINK} elementas bus įtraukiamas į išvesties rastro lentelę.",
	"@@Region-Group_Add-Link_tag3@@": "<strong>No Link</strong>--Išvesties rastro atributų lentelėje bus tik elementai ${Value} ir ${Count}.",
	"@@Region-Group_Excluded-Value_tag0@@": "Identifikuoja reikšmę, kuriai esant gardelės padėtyje nebus vertinami erdviniai ryšiai neatsižvelgiant į nurodytą kaimynų skaičių (KETURI ar AŠTUONI).",
	"@@Region-Group_Excluded-Value_tag1@@": "Gardelės su neįtraukta reikšme laikomos NoData ir šalinamos iš skaičiavimų. Neįtrauktą reikšmę turinčios gardelių padėtys išvesties rastre gaus 0.",
	"@@Region-Group_Excluded-Value_tag2@@": "Neįtraukta reikšmė prasme panaši į fono reikšmės idėją arba kaukės taikymą. Šiam parametrui būtina nurodyti reikšmę, jei nurodytas parametras <strong>${CROSS}</strong>.",
	"@@Region-Group_Number-of-Neighbor-Cells_tag0@@": "Gretimų gardelių skaičius, naudojamas vertinant ryšius tarp gardelių.",
	"@@Region-Group_Number-of-Neighbor-Cells_tag1@@": "<strong>FOUR</strong>--Aprašo ryšius tarp vienodos reikšmės gardelių tik tuo atveju, jei gardelės yra tiesiai kairėje, dešinėje, viršuje arba po kiekvienu iš artimiausių keturių kaimynų. Tai numatytasis nustatymas.",
	"@@Region-Group_Number-of-Neighbor-Cells_tag3@@": "<strong>EIGHT</strong>--Aprašo ryšius tarp vienodos reikšmės gardelių, jei jos yra tiesioginės aštuonių gardelių kaimynės viena kitai. Tai apima ir į dešinę, į kairę, virš ir įstrižai viena nuo kitos.",
	"@@Region-Group_Zone-Connectivity_tag0@@": "Aprašo, į kurių gardelių reikšmes atsižvelgiama tikrinant ryšius.",
	"@@Region-Group_Zone-Connectivity_tag1@@": "<strong>WITHIN</strong>--Tikrina ryšius tarp įvesties reikšmių, kurios toje pačioje zonoje turi vienodas reikšmes. Tai numatytasis nustatymas.",
	"@@Region-Group_Zone-Connectivity_tag3@@": "Vienintelės gardelės, kurias galima grupuoti, yra tai pačiai zonai (reikšmei) priklausančios gardelės, kurios atitinka erdvinius jungimo reikalavimus, nurodytus parametre <strong>Number of neighbors</strong> (keturiomis arba aštuoniomis kryptimis).",
	"@@Region-Group_Zone-Connectivity_tag6@@": "<strong>CROSS</strong>--Tikrina ryšius pagal erdvinius reikalavimus, nustatytus kaimynų parametro skaičiumi, tarp bet kokių reikšmių gardelių, išskyrus identifikuotą reikšmę, kurios neįtraukti nurodo neįtrauktos reikšmės parametras.",
	"@@Region-Group_Zone-Connectivity_tag8@@": "Naudojant šią parinktį, būtina nurodyti parametro <strong>Excluded value</strong> reikšmę.",
	"@@Region-Group_Zone-Raster_tag0@@": "Būtinas įvesties rastras, kurio unikalūs susiję regionai bus identifikuojami.",
	"@@Region-Group_Zone-Raster_tag1@@": "Jis turi būti sveikojo skaičiaus tipo.",
	"@@Region-Grow_Fill-Value-Field_tag0@@": "Atributų lentelės laukas, kuris apibrėžia pikselių grupes, užpildo reikšmę. Daugiakanaliame vaizde visiems kanalams bus priskiriama ši reikšmė.",
	"@@Region-Grow_Max-Growth-Radius-Field_tag0@@": "Atributų lentelės laukas, kuris aprašo maksimalaus augimo spindulį, vaizdo erdvinės atskaitos matavimo vienetais.",
	"@@Region-Grow_Raster_tag0@@": "Rastras, su kuriuo norite atlikti šią funkciją.",
	"@@Region-Grow_Seed-Points_tag0@@": "Taškinių elementų klasė, veikianti kaip pradiniai algoritmo taškai. Kiekvienas pradinis taškas atitinka vieną atributų lentelės įrašą, kuriame nurodytas maksimalus augimo spindulys, ribinė panašumo reikšmė ir užpildoma reikšmės informacija.",
	"@@Region-Grow_Similarity-Threshold-Field_tag0@@": "Atributų lentelės laukas, kuris aprašo ribinę panašumo reikšmę kaip Euklido atstumą spektrinėje erdvėje.",
	"@@Remap_Allow-Unmatched-Pixel-Values_tag0@@": "Klasifikavimo iš naujo lentelėje trūkstamos reikšmės gali išlaikyti savo reikšmes arba būti perskaičiuotos į NoData.",
	"@@Remap_Allow-Unmatched-Pixel-Values_tag1@@": "Nepažymėta – bet kuris įvesties rastro pikselis, kuris neklasifikuojamas susiejimo iš naujo lentelėje, išlaikys savo reikšmę ir bus įrašytas ties savo padėtimi į išvesties rastrą. Tai yra numatytasis nustatymas.",
	"@@Remap_Allow-Unmatched-Pixel-Values_tag2@@": "Pažymėta – bet kurio įvesties rastro pikselio, kuris neklasifikuojamas susiejimo iš naujo lentelėje, reikšmė bus perskaičiuota į NoData ir taip įrašyta ties jo padėtimi į išvesties rastrą.",
	"@@Remap_Input-Field_tag0@@": "Pasirinkite lauką, kuriame nurodyta įvesties pikselio reikšmė, kuri bus susieta iš naujo.",
	"@@Remap_Input-Field_tag1@@": "Jei jūsų lentelė turi reikšmių intervalą, tai bus minimalios reikšmės laukas, o parametrą <strong>Input Max Field</strong> taip pat reikia nurodyti.",
	"@@Remap_Input-Max-Field_tag0@@": "Pasirinkite maksimalų įvesties lauką, jei jūsų lentelėje nurodytas reikšmių intervalas.",
	"@@Remap_List_tag0@@": "Nurodykite susiejimo reikšmes, minimalių bei maksimalių reikšmių intervalą ir naujas susiejimo iš naujo reikšmes. Papildomai reikšmių intervalą galima nustatyti kaip NoData pikselius.",
	"@@Remap_Output-Field_tag0@@": "Pasirinkite lauką, kuris bus naudojamas kaip iš naujo susieta išvesties reikšmė.",
	"@@Remap_Raster_tag0@@": "Įvesties rastras.",
	"@@Remap_Remap-Definition-Type_tag0@@": "Pasirinkite parinktį, kurią norite naudoti iš naujo susiedami reikšmes:",
	"@@Remap_Remap-Definition-Type_tag1@@": "Sąrašas--Nurodykite pikselių reikšmių, kurias norite susieti su išvesties pikselio reikšme, intervalą",
	"@@Remap_Remap-Table-Type_tag0@@": "Pasirinkite tipą lentelės, kurią naudosite iš naujo susiedami savo įvesties rastrą:",
	"@@Remap_Remap-Table-Type_tag1@@": "Paprasta--<strong>Remap Table</strong> įvestis naudojama iš naujo susiejant <strong>Input Field</strong> pikselių reikšmes su atitinkama parametro <strong>Output Field</strong> reikšme. Šis metodas įkelia susiejimo iš naujo lentelę į talpyklą, kad galėtų sparčiau vykdyti užduotį.",
	"@@Remap_Remap-Table-Type_tag8@@": "Dinamiška--šis metodas neįkelia susiejimo iš naujo lentelės į talpyklą ir teikia užklausą kiekvieną kartą, kai pateikiama užklausa (perstumti, keisti mastelį ar atnaujinti). Jei lentelė pasikeičia, kita užklausa gali atitinkamai dinamiškai iš naujo susieti reikšmes.",
	"@@Remap_Remap-Table-Type_tag9@@": "Priskyrimas iš naujo--klasifikavimui iš naujo naudojama speciali lentelė, kurios kiekviena eilutė susies iš naujo tik pagal kiekvieno elemento ribą.",
	"@@Remap_Remap-Table_tag0@@": "Naršykite iki lentelės, nustatančios susiejimo iš naujo reikšmes.",
	"@@Reproject_Raster_tag0@@": "Rastrinis duomenų rinkinys, kurį reikia perprojektuoti arba perskaičiuoti.",
	"@@Reproject_Spatial-Reference_tag0@@": "Duomenų perprojektavimui naudojama koordinačių sistema.",
	"@@Reproject_X-Cellsize_tag0@@": "x matmuo, prie kurio duomenys turi būti perskaičiuoti. Tai neprivaloma. Jei reikšmė lygi 0 ar mažiau, išvesties stačiakampė aprėptis (aprėptis ir gardelių dydis) skaičiuojama iš įvesties rastro.",
	"@@Reproject_X-Registration-Point_tag0@@": "x koordinatė, naudojama aprašyti viršutinį kairįjį duomenų rinkinio kampą. Šią koordinatę būtina aprašyti naujos erdvinės atskaitos matavimo vienetais. Jei parametras <strong>X Cellsize</strong> ir parametras <strong>Y Cellsize</strong> yra didesni nei 0, jie naudojami kartu su parametrais <strong>X Registration Point</strong> ir <strong>Y Registration Point</strong> apibrėžiant išvesties stačiakampę aprėptį.",
	"@@Reproject_Y-Cellsize_tag0@@": "y matmuo, prie kurio duomenys turi būti perskaičiuoti. Tai neprivaloma. Jei reikšmė lygi 0 ar mažiau, išvesties stačiakampė aprėptis (aprėptis ir gardelių dydis) skaičiuojama iš įvesties rastro.",
	"@@Reproject_Y-Registration-Point_tag0@@": "y koordinatė, naudojama aprašyti viršutinį kairįjį duomenų rinkinio kampą. Šią koordinatę būtina aprašyti naujos erdvinės atskaitos matavimo vienetais. Jei parametras <strong>X Cellsize</strong> ir parametras <strong>Y Cellsize</strong> yra didesni nei 0, jie naudojami kartu su parametrais <strong>X Registration Point</strong> ir <strong>Y Registration Point</strong> apibrėžiant išvesties stačiakampę aprėptį.",
	"@@Resample_Input-Cellsize_tag0@@": "Įvesties rastro pikselių gardelės dydis.",
	"@@Resample_Output-Cellsize_tag0@@": "Išvesties rastro pikselių gardelės dydis. Gardelės dydį galima keisti, bet rastrinio duomenų rinkinio aprėptis liks tokia pati. Perskaičiavimas iš naudotojo apibrėžto gardelės dydžio gali būti daug lėtesnis nei numatytasis sistemos, kadangi sistemos numatytasis perskaičiavimas apdoroja minimalų duomenų kiekį iš artimiausios galimos raiškos.",
	"@@Resample_Raster_tag0@@": "Įvesties rastras, kuris bus perskaičiuojamas.",
	"@@Resample_Resampling-Type_tag0@@": "<strong>Nearest Neighbor</strong>--Skaičiuoja išvesties pikselio reikšmę naudodamas artimiausią įvesties pikselį. NoData pikseliai išvesties rastriniame duomenų rinkinyje liks nepasikeitę. Tai numatytasis nustatymas.",
	"@@Resample_Resampling-Type_tag2@@": "<strong>Bilinear Interpolation</strong>--Skaičiuoja pikselio reikšmę naudodamas pagal atstumą pasvertą keturių artimiausių pikselių reikšmę. Šį metodą kompiuteriai vykdo veiksmingai.",
	"@@Resample_Resampling-Type_tag4@@": "<strong>Cubic Convolution</strong>--Naują pikselio reikšmę nustato pagal glodintos kreivės tinkamumą per 16 artimiausių įvesties pikselių centrus.",
	"@@Resample_Resampling-Type_tag6@@": "<strong>Majority</strong>--Skaičiuoja pikselio reikšmę naudodamas16 artimiausių pikselių daugumos pikselių reikšmę. NoData pikseliai išvesties rastriniame duomenų rinkinyje liks nepasikeitę.",
	"@@Resample_Resampling-Type_tag8@@": "<strong>Bilinear Interpolation Plus</strong>--Naudoja <strong>Bilinear Interpolation</strong>, tačiau pikseliai ties briaunomis apibrėžiami kaip NoData ir skaičiuojant neatkuriami bei į juos neatsižvelgiama. Naudokite <strong>Bilinear Interpolation Plus</strong> išklotinių duomenims, nes tada briaunos geriau tiks.",
	"@@Resample_Resampling-Type_tag14@@": "<strong>Gauss Blur</strong>--Taiko Gauss sąsūką šaltinio rastrui ir skaičiuoja pikselių reikšmę naudodamas pagal atstumą pasvertą keturių artimiausių pikselių reikšmę iš sulieto rastro. Ši funkcija tinkama triukšmui šalinti iš perskaičiuotų duomenų bei perskaičiavimui į mažesnį didesnio dydžio pikselių kiekį.",
	"@@Resample_Resampling-Type_tag16@@": "<strong>Gauss Blur Plus</strong>--Naudoja <strong>Bilinear Interpolation</strong>, tačiau pikseliai ties briaunomis apibrėžiami kaip NoData ir skaičiuojant neatkuriami bei į juos neatsižvelgiama. Naudokite <strong>Gauss Blur Plus</strong> išklotinių duomenims, nes tada briaunos geriau tiks.",
	"@@Resample_Resampling-Type_tag22@@": "<strong>Average</strong>--Skaičiuoja pikselių reikšmes kiekvienam pikseliui naudodama vidutines visų persidengiančių pikselių reikšmes.",
	"@@Resample_Resampling-Type_tag24@@": "<strong>Minimum</strong>--Skaičiuoja pikselių reikšmes naudodama minimalią visų persidengiančių pikselių reikšmę. NoData pikseliai išvesties rastriniame duomenų rinkinyje liks nepasikeitę.",
	"@@Resample_Resampling-Type_tag26@@": "<strong>Maximum</strong>--Tinkama nuolatiniams duomenims funkcija pateikia tolydesnį išvesties vaizdą nei artimiausio kaimyno perskaičiavimo metodas.",
	"@@Resample_Resampling-Type_tag28@@": "<strong>Vector Average</strong>--Skaičiuoja dydžio-krypties vektorinį vidurkį naudodamas visus įtrauktus pikselius. Šis metodas tinkamas tik dviems kanalo rastrams, kurie reprezentuoja dydį ir kryptį. Pirmiausia jis dydį ir kryptį konvertuoja į U-V, tada paima visų įtrauktų pikselių aritmetinį vidurkį, kad gautų kiekvieno pikselio U-V ir konvertuoja jį atgal į dydžio ir krypties reikšmes.",
	"@@Round-Down_Cellsize-Type_tag0@@": "Pasirinkite, koks gardelės dydis bus naudojamas išvesties rastre. Jei visų įvesties gardelių dydžiai vienodi, visos parinktys pateiks vienodus rezultatus.",
	"@@Round-Down_Cellsize-Type_tag1@@": "Pirmiausia--Naudoti pirmą įvesties rastrų gardelės dydį.",
	"@@Round-Down_Cellsize-Type_tag2@@": "Paskiausia--Naudoti paskutinį įvesties rastrų gardelės dydį.",
	"@@Round-Down_Cellsize-Type_tag3@@": "Didžiausias--Naudoti didžiausią įvesties rastrų gardelės dydį. Tai numatytasis nustatymas.",
	"@@Round-Down_Cellsize-Type_tag4@@": "Vidutinis--Naudoti vidutinį visų įvesties rastrų gardelės dydį.",
	"@@Round-Down_Cellsize-Type_tag5@@": "Mažiausias--Naudoti mažiausią įvesties rastrų gardelės dydį.",
	"@@Round-Down_Extent-Type_tag0@@": "Pasirinkite, kokia aprėptis bus naudojama išvesties rastre:",
	"@@Round-Down_Extent-Type_tag1@@": "Pirmiausia--Naudoti pirmojo įvesties rastro aprėptį nustatant apdorojimo aprėptį.",
	"@@Round-Down_Extent-Type_tag2@@": "Sankirta--Naudoti persidengiančių pikselių aprėptį nustatant apdorojimo aprėptį. Tai numatytasis nustatymas.",
	"@@Round-Down_Extent-Type_tag3@@": "Paskiausia--Naudoti paskutinio įvesties rastro aprėptį nustatant apdorojimo aprėptį.",
	"@@Round-Down_Extent-Type_tag4@@": "Sąjunga--Naudoti visų rastrų aprėptį nustatant apdorojimo aprėptį.",
	"@@Round-Down_Raster_tag0@@": "Įvesties reikšmės, kurios bus apvalinamos į mažesnę pusę.",
	"@@Round-Up_Cellsize-Type_tag0@@": "Pasirinkite, koks gardelės dydis bus naudojamas išvesties rastre. Jei visų įvesties gardelių dydžiai vienodi, visos parinktys pateiks vienodus rezultatus.",
	"@@Round-Up_Cellsize-Type_tag1@@": "Pirmiausia--Naudoti pirmą įvesties rastrų gardelės dydį.",
	"@@Round-Up_Cellsize-Type_tag2@@": "Paskiausia--Naudoti paskutinį įvesties rastrų gardelės dydį.",
	"@@Round-Up_Cellsize-Type_tag3@@": "Didžiausias--Naudoti didžiausią įvesties rastrų gardelės dydį. Tai numatytasis nustatymas.",
	"@@Round-Up_Cellsize-Type_tag4@@": "Vidutinis--Naudoti vidutinį visų įvesties rastrų gardelės dydį.",
	"@@Round-Up_Cellsize-Type_tag5@@": "Mažiausias--Naudoti mažiausią įvesties rastrų gardelės dydį.",
	"@@Round-Up_Extent-Type_tag0@@": "Pasirinkite, kokia aprėptis bus naudojama išvesties rastre:",
	"@@Round-Up_Extent-Type_tag1@@": "Pirmiausia--Naudoti pirmojo įvesties rastro aprėptį nustatant apdorojimo aprėptį.",
	"@@Round-Up_Extent-Type_tag2@@": "Sankirta--Naudoti persidengiančių pikselių aprėptį nustatant apdorojimo aprėptį. Tai numatytasis nustatymas.",
	"@@Round-Up_Extent-Type_tag3@@": "Paskiausia--Naudoti paskutinio įvesties rastro aprėptį nustatant apdorojimo aprėptį.",
	"@@Round-Up_Extent-Type_tag4@@": "Sąjunga--Naudoti visų rastrų aprėptį nustatant apdorojimo aprėptį.",
	"@@Round-Up_Raster_tag0@@": "Įvesties reikšmės, kurios bus apvalinamos į didesnę pusę.",
	"@@Segment-Mean-Shift_Minimum-Segment-Size-in-Pixels_tag0@@": "Minimalus segmento dydis, matuojamas pikseliais. Ši reikšmė susijusi su minimaliu jūsų susiejimo iš naujo matavimo vienetu ir atfiltruos mažesnius pikselių blokus. Visi už nurodytą reikšmę mažesni segmentai sulies mažesnius segmentus su geriausiai tinkamu gretimu segmentu.",
	"@@Segment-Mean-Shift_Raster_tag0@@": "Įvesties rastras, kuris bus segmentuojamas.",
	"@@Segment-Mean-Shift_Segment-boundaries-only_tag0@@": "Segmento ribos žymimos kaip juoda kontūro linija aplink kiekvieną segmentą. Tai naudinga, nes padeda atskirti gretimus panašių spalvų segmentus.",
	"@@Segment-Mean-Shift_Segment-boundaries-only_tag1@@": "Nepažymėta--Segmentų ribos nerodomos. Tai numatytasis nustatymas.",
	"@@Segment-Mean-Shift_Segment-boundaries-only_tag2@@": "Pažymėta--Segmentų ribos rodomos kaip juodos kontūro linijos aplink kiekvieną segmentą.",
	"@@Segment-Mean-Shift_Spatial-Detail_tag0@@": "Santykinė objektų atskyrimo pagal erdvines charakteristikas svarba.",
	"@@Segment-Mean-Shift_Spatial-Detail_tag1@@": "Tinkami sveikojo skaičiaus reikšmių intervalai yra nuo 1 iki 20. Mažesnės reikšmės sukuria plačias klases ir daugiau glodinimo. Didesnė reikšmė tinkama norint atskirti elementus, kurie yra erdviškai maži ir susigrūdę arti. Pavyzdžiui, miesto scenoje galite bendro nelaidaus paviršiaus elementus klasifikuoti naudodami smulkesnę erdvinės informacijos reikšmę, arba galite klasifikuoti pastatus ir kelius kaip atskiras klases, naudodami didesnę erdvinės informacijos reikšmę.",
	"@@Segment-Mean-Shift_Spectral-Detail_tag0@@": "Santykinė objektų atskyrimo pagal spalvos charakteristikas svarba.",
	"@@Segment-Mean-Shift_Spectral-Detail_tag1@@": "Tinkami slankiojo kablelio reikšmių intervalai yra nuo 1,0 iki 20,0. Mažesnės reikšmės sukuria plačias klases ir daugiau glodinimo. Didesnė reikšmė tinkama, jei norite atskirti elementus, kurių spektro charakteristikos kažkiek panašios. Pavyzdžiui, naudodami didesnę išsamios spektrinės informacijos reikšmę miškingoje scenoje galite geriau atskirti medžių rūšis.",
	"@@Segment-Mean-Shift_maximumsegmentsizeinpixels_tag0@@": "<p>Maksimalus segmento dydis. Didesnio nei nurodyto dydžio segmentai bus padalinami. Naudokite šį parametrą, kad išvesties sluoksnyje išvengtumėte dėl didelių segmentų susidarančių artefaktų. Numatytoji reikšmė yra -1.</p>",
	"@@Sentinel-1-Radiometric-Calibration_Calibration-Type_tag0@@": "Pasirinkite vieną iš keturių kalibravimo tipų:",
	"@@Sentinel-1-Radiometric-Calibration_Calibration-Type_tag1@@": "<strong>Beta nought</strong>--Sukuria išvestį su radaro ryškumo koeficientu.",
	"@@Sentinel-1-Radiometric-Calibration_Calibration-Type_tag3@@": "<strong>Sigma nought</strong--Atgalinė sklaida, grįžtanti į anteną iš vieneto ploto ant žemės, susijusio su žemės intervalu.",
	"@@Sentinel-1-Radiometric-Calibration_Calibration-Type_tag5@@": "<strong>Gamma</strong>--Išspinduliuotos ir grįžusios energijos matavimai naudingi nustatant antenų modelius.",
	"@@Sentinel-1-Radiometric-Calibration_Calibration-Type_tag7@@": "<strong>None</strong>--nekoreguoti. Tai numatytasis nustatymas.",
	"@@Sentinel-1-Radiometric-Calibration_Raster_tag0@@": "Sentinel-1 Level-1 GRD arba SLC įvesties rastras, kurį norite apdoroti.",
	"@@Sentinel-1-Radiometric-Calibration_Raster_tag1@@": "Ši funkcija LUT failą naudoja šiluminei korekcijai pritaikyti arba jai pašalinti, priklausomai nuo LUT turinio.",
	"@@Sentinel-1-Thermal-Noise-Removal_Raster_tag0@@": "Sentinel-1 įvesties rastras, kurį norite apdoroti.",
	"@@Sentinel-1-Thermal-Noise-Removal_Raster_tag1@@": "Ši funkcija LUT failą naudoja šiluminei korekcijai pritaikyti arba jai pašalinti, priklausomai nuo LUT turinio.",
	"@@Set-Null_Cellsize-Type_tag0@@": "Pasirinkite, koks gardelės dydis bus naudojamas išvesties rastre. Jei visų įvesties gardelių dydžiai vienodi, visos parinktys pateiks vienodus rezultatus.",
	"@@Set-Null_Cellsize-Type_tag1@@": "Pirmiausia--Naudoti pirmą įvesties rastrų gardelės dydį.",
	"@@Set-Null_Cellsize-Type_tag2@@": "Paskiausia--Naudoti paskutinį įvesties rastrų gardelės dydį.",
	"@@Set-Null_Cellsize-Type_tag3@@": "Didžiausias--Naudoti didžiausią įvesties rastrų gardelės dydį. Tai numatytasis nustatymas.",
	"@@Set-Null_Cellsize-Type_tag4@@": "Vidutinis--Naudoti vidutinį visų įvesties rastrų gardelės dydį.",
	"@@Set-Null_Cellsize-Type_tag5@@": "Mažiausias--Naudoti mažiausią įvesties rastrų gardelės dydį.",
	"@@Set-Null_Extent-Type_tag0@@": "Pasirinkite, kokia aprėptis bus naudojama išvesties rastre:",
	"@@Set-Null_Extent-Type_tag1@@": "Pirmiausia--Naudoti pirmojo įvesties rastro aprėptį nustatant apdorojimo aprėptį.",
	"@@Set-Null_Extent-Type_tag2@@": "Sankirta--Naudoti persidengiančių pikselių aprėptį nustatant apdorojimo aprėptį. Tai numatytasis nustatymas.",
	"@@Set-Null_Extent-Type_tag3@@": "Paskiausia--Naudoti paskutinio įvesties rastro aprėptį nustatant apdorojimo aprėptį.",
	"@@Set-Null_Extent-Type_tag4@@": "Sąjunga--Naudoti visų rastrų aprėptį nustatant apdorojimo aprėptį.",
	"@@Set-Null_False-Raster_tag0@@": "Įvestis, kurios reikšmės bus naudojamos kaip išvesties pikselių reikšmės, jei sąlyga bus neteisinga. Tai gali būti sveikasis skaičius, slankiojo kablelio rastras arba konstantos reikšmė.",
	"@@Set-Null_Raster_tag0@@": "Įvesties rastras, atitinkantis loginės matematinės rastro funkcijos loginės operacijos rezultatą. Reikšmės bus 1 (jei teisinga) arba 0 (jei neteisinga). Tai gali būti sveikasis skaičius arba slankiojo kablelio rastras.",
	"@@Shaded-Relief_Altitude_tag0@@": "Aukštis yra Saulės pakilimo virš horizonto kampas. Jis gali būti nuo 0 iki 90 laipsnių. 0 laipsnių reikšmė rodo, kad Saulė yra horizonte, t. y. toje pačioje horizontalioje plokštumoje kaip ir atskaitos taškas. 90 laipsnių reikšmė rodo, kad Saulė yra tiesiai virš galvos. Numatytoji reikšmė yra 44 laipsniai virš horizonto.",
	"@@Shaded-Relief_Azimuth_tag0@@": "Azimutas yra santykinė Saulės padėtis ties horizontu (laipsniais). Šią padėtį nurodo laipsnis, kiek Saulė nutolusi nuo šiaurės laikrodžio rodyklės kryptimi. 0 laipsnių azimutas nurodo šiaurę, rytai yra 90 laipsnių, pietūs yra 180 laipsnių, o vakarai ties 270 laipsnių.",
	"@@Shaded-Relief_Color-Scheme-Type_tag0@@": "Nurodykite, ar reljefui su šešėliais atvaizduoti bus naudojama spalvų gama, ar spalvų žemėlapis.",
	"@@Shaded-Relief_Color-Scheme-Type_tag1@@": "<strong>Color Ramp</strong>--Pasirinkus <strong>Color Ramp</strong>, būsite paraginti pasirinkti atitinkamą spalvų gamą.",
	"@@Shaded-Relief_Color-Scheme-Type_tag5@@": "<strong>Colormap</strong>--Pasirinkus <strong>Colormap</strong>, būsite paraginti nurodyti spalvų žemėlapio failą, kurį norite naudoti.",
	"@@Shaded-Relief_Disable-default-edge-pixel-interpolation_tag0@@": "Nurodykite, ar numatytoji briaunų pikselių interpoliacija bus išjungta.",
	"@@Shaded-Relief_Disable-default-edge-pixel-interpolation_tag1@@": "Nepažymėta--Bitiesinis perskaičiavimas bus taikomas universaliai perskaičiuojant jūsų reljefą su šešėliais. Tai numatytasis nustatymas.",
	"@@Shaded-Relief_Disable-default-edge-pixel-interpolation_tag2@@": "Pažymėta--Bitiesinis perskaičiavimas bus naudojamas reljefe su šešėliais, išskyrus palei rastrų briaunas ir šalia NoData pikselių. Tie pikseliai bus automatiškai užpildyti kaip NoData, kadangi sušvelnins aštrių briaunų efektus, kurie galėtų atsirasti.",
	"@@Shaded-Relief_Disable-default-edge-pixel-interpolation_tag3@@": "Šios parinkties naudojimas leis išvengti perskaičiavimo artefaktų, kurie gali pasirodyti ties rastro briaunomis. Išvesties pikseliai palei rastro briauną arba šalia reikšmės neturinčių pikselių automatiškai užpildomi kaip NoData. Todėl rekomenduojama šią parinktį naudoti tik tada, kai yra kitų rastrų su persidengiančiais pikseliais. Jei yra persidengiančių pikselių, tokiose NoData teritorijose bus rodomos persidengiančių pikselių reikšmės, o ne tuščių.",
	"@@Shaded-Relief_Raster_tag0@@": "Įvesties aukščio rastras.",
	"@@Shaded-Relief_Scaling_tag0@@": "Šešėliuoto rezultato mastelis dinamiškai keičiamas koreguojant z faktorių. Tam naudojama viena iš dviejų parinkčių:",
	"@@Shaded-Relief_Scaling_tag1@@": "<strong>None</strong>--Nepritaikomas joks mastelio keitimas. Tai tobulai tinka vienam rastriniam duomenų rinkiniui, apimančiam vietinę teritoriją. Nerekomenduojama šios parinkties naudoti pasaulio duomenų rinkiniams su dideliais aukščio pokyčiais bei įvairaus mastelio žemėlapiais, kadangi tokiais atvejais gaunamo teritorijos reljefo pokyčiai maži esant smulkiam masteliui.",
	"@@Shaded-Relief_Scaling_tag3@@": "<strong>Adjusted</strong--Pritaikomas nelinijinis koregavimas naudojant numatytąsias <strong>Pixel Size Power</strong> ir <strong>Pixel Size Factor</strong> reikšmes, kurios prisitaiko prie įvairiausių aukščio (mastelio) pokyčių žiūrovui artinant ir tolinant vaizdą. Parinktis <strong>Adjusted</strong> rekomenduojama tada, kai naudojate pasaulio duomenų rinkinį.",
	"@@Shaded-Relief_Z-Factor_tag0@@": "Z faktorius – tai proporcingumo koeficientas, naudojamas konvertuojant aukščių reikšmes šiais dviem tikslais:",
	"@@Shaded-Relief_Z-Factor_tag1@@": "Konvertuoti aukščio vienetus (pvz., metrus ar pėdas) į duomenų rinkinio horizontaliosios ašies vienetus – pėdas, metrus ar laipsnius",
	"@@Shaded-Relief_Z-Factor_tag2@@": "Pridėti vertikalią ašį geresniam vizualiniam efektui",
	"@@Shaded-Relief_Z-Factor_tag3@@": "Šešėliuoto rezultato mastelis dinamiškai keičiamas koreguojant z faktorių. Tam naudojama viena iš dviejų parinkčių:",
	"@@Shaded-Relief_Z-Factor_tag4@@": "<strong>None</strong>--Nepritaikomas joks mastelio keitimas. Tai tobulai tinka vienam rastriniam duomenų rinkiniui, apimančiam vietinę teritoriją. Nerekomenduojama šios parinkties naudoti pasaulio duomenų rinkiniams su dideliais aukščio pokyčiais bei įvairaus mastelio žemėlapiais, kadangi tokiais atvejais gaunamo teritorijos reljefo pokyčiai maži esant smulkiam masteliui.",
	"@@Shaded-Relief_Z-Factor_tag6@@": "<strong>Adjusted</strong--Pritaikomas nelinijinis koregavimas naudojant numatytąsias <strong>Pixel Size Power</strong> ir <strong>Pixel Size Factor</strong> reikšmes, kurios prisitaiko prie įvairiausių aukščio (mastelio) pokyčių žiūrovui artinant ir tolinant vaizdą. Parinktis <strong>Adjusted</strong> rekomenduojama tada, kai naudojate pasaulio duomenų rinkinį.",
	"@@Shaded-Relief_hillshadetype_tag0@@": "Valdo šešėliavimo apšvietimo šaltinį.",
	"@@Shaded-Relief_hillshadetype_tag1@@": "<strong>Traditional</strong>--Skaičiuoja šešėliavimą naudojant vieną apšvietimo kryptį. Nustatykite parinktis <strong>Azimuth</strong> ir <strong>Altitude</strong>, norėdami valdyti šviesos šaltinio padėtį. Tai numatytasis nustatymas.",
	"@@Shaded-Relief_hillshadetype_tag2@@": "<strong>Multidirectional</strong>--Apjungia šviesą iš kelių šaltinių, kad parodytų pagerintą teritorijos vaizdą.",
	"@@Shaded-Relief_PSPower_tag0@@": "<strong>Pikselio dydžio įtaka</strong> atsižvelgia į aukščio pokyčius (ar mastelį), žiūrovui artinant ar tolinant žemėlapio atvaizdavimą. Tai yra eksponentinė funkcija, pritaikoma pikselio dydžio trukmei lygtyje, kuria valdoma, kaip sparčiai kinta <strong>Z Factor</strong>, kad būtų išvengta žymaus reljefo praradimo.",
	"@@Shaded-Relief_PSPower_tag1@@": "Šis parametras tinkamas tik, jei <strong>Scaling</strong> tipas nustatytas kaip <strong>Adjusted</strong>. Numatytoji reikšmė yra 0,664.",
	"@@Shaded-Relief_PSZFactor_tag0@@": "<strong>Pikselio dydžio faktoriumi</strong> atsižvelgiama į mastelį, žiūrovui artinant ar tolinant žemėlapio atvaizdavimą. Ši funkcija valdo, kaip sparčiai kinta <strong>Z Factor</strong>.",
	"@@Shaded-Relief_PSZFactor_tag1@@": "Šis parametras tinkamas tik, jei <strong>Scaling</strong> tipas nustatytas kaip <strong>Adjusted</strong>. Numatytoji reikšmė yra 0,024.",
	"@@Sin_Cellsize-Type_tag0@@": "Pasirinkite, koks gardelės dydis bus naudojamas išvesties rastre. Jei visų įvesties gardelių dydžiai vienodi, visos parinktys pateiks vienodus rezultatus.",
	"@@Sin_Cellsize-Type_tag1@@": "Pirmiausia--Naudoti pirmą įvesties rastrų gardelės dydį.",
	"@@Sin_Cellsize-Type_tag2@@": "Paskiausia--Naudoti paskutinį įvesties rastrų gardelės dydį.",
	"@@Sin_Cellsize-Type_tag3@@": "Didžiausias--Naudoti didžiausią įvesties rastrų gardelės dydį. Tai numatytasis nustatymas.",
	"@@Sin_Cellsize-Type_tag4@@": "Vidutinis--Naudoti vidutinį visų įvesties rastrų gardelės dydį.",
	"@@Sin_Cellsize-Type_tag5@@": "Mažiausias--Naudoti mažiausią įvesties rastrų gardelės dydį.",
	"@@Sin_Extent-Type_tag0@@": "Pasirinkite, kokia aprėptis bus naudojama išvesties rastre:",
	"@@Sin_Extent-Type_tag1@@": "Pirmiausia--Naudoti pirmojo įvesties rastro aprėptį nustatant apdorojimo aprėptį.",
	"@@Sin_Extent-Type_tag2@@": "Sankirta--Naudoti persidengiančių pikselių aprėptį nustatant apdorojimo aprėptį. Tai numatytasis nustatymas.",
	"@@Sin_Extent-Type_tag3@@": "Paskiausia--Naudoti paskutinio įvesties rastro aprėptį nustatant apdorojimo aprėptį.",
	"@@Sin_Extent-Type_tag4@@": "Sąjunga--Naudoti visų rastrų aprėptį nustatant apdorojimo aprėptį.",
	"@@Sin_Raster_tag0@@": "Įvestis, kuriai bus skaičiuojamos sinuso reikšmės.",
	"@@SinH_Cellsize-Type_tag0@@": "Pasirinkite, koks gardelės dydis bus naudojamas išvesties rastre. Jei visų įvesties gardelių dydžiai vienodi, visos parinktys pateiks vienodus rezultatus.",
	"@@SinH_Cellsize-Type_tag1@@": "Pirmiausia--Naudoti pirmą įvesties rastrų gardelės dydį.",
	"@@SinH_Cellsize-Type_tag2@@": "Paskiausia--Naudoti paskutinį įvesties rastrų gardelės dydį.",
	"@@SinH_Cellsize-Type_tag3@@": "Didžiausias--Naudoti didžiausią įvesties rastrų gardelės dydį. Tai numatytasis nustatymas.",
	"@@SinH_Cellsize-Type_tag4@@": "Vidutinis--Naudoti vidutinį visų įvesties rastrų gardelės dydį.",
	"@@SinH_Cellsize-Type_tag5@@": "Mažiausias--Naudoti mažiausią įvesties rastrų gardelės dydį.",
	"@@SinH_Extent-Type_tag0@@": "Pasirinkite, kokia aprėptis bus naudojama išvesties rastre:",
	"@@SinH_Extent-Type_tag1@@": "Pirmiausia--Naudoti pirmojo įvesties rastro aprėptį nustatant apdorojimo aprėptį.",
	"@@SinH_Extent-Type_tag2@@": "Sankirta--Naudoti persidengiančių pikselių aprėptį nustatant apdorojimo aprėptį. Tai numatytasis nustatymas.",
	"@@SinH_Extent-Type_tag3@@": "Paskiausia--Naudoti paskutinio įvesties rastro aprėptį nustatant apdorojimo aprėptį.",
	"@@SinH_Extent-Type_tag4@@": "Sąjunga--Naudoti visų rastrų aprėptį nustatant apdorojimo aprėptį.",
	"@@SinH_Raster_tag0@@": "Įvestis, kuriai bus skaičiuojamos hiperbolinio sinuso reikšmės.",
	"@@Sink_Flow-Direction-Raster_tag0@@": "Įvesties rastras, rodantis tėkmės iš kiekvienos gardelės kryptį.",
	"@@Sink_Flow-Direction-Raster_tag1@@": "Tėkmės krypties rastrą galima sukurti naudojant funkciją <strong>Flow Direction</strong>.",
	"@@Slope_DEM_tag0@@": "Įvesties aukščio rastras.",
	"@@Slope_Disable-default-edge-pixel-interpolation_tag0@@": "Šios parinkties naudojimas leis išvengti perskaičiavimo artefaktų, kurie gali pasirodyti ties rastro briaunomis. Išvesties pikseliai palei rastro briauną arba šalia reikšmės neturinčių pikselių automatiškai užpildomi kaip NoData. Todėl rekomenduojama šią parinktį naudoti tik tada, kai yra kitų rastrų su persidengiančiais pikseliais. Jei yra persidengiančių pikselių, tokiose NoData teritorijose bus rodomos persidengiančių pikselių reikšmės, o ne tuščių.",
	"@@Slope_Disable-default-edge-pixel-interpolation_tag1@@": "Nepažymėta--Bitiesinis perskaičiavimas bus taikomas universaliai perskaičiuojant jūsų pasvirimą. Tai numatytasis nustatymas.",
	"@@Slope_Disable-default-edge-pixel-interpolation_tag2@@": "Pažymėta--Bitiesinis perskaičiavimas bus naudojamas pasvirime, išskyrus palei rastrų briaunas ir šalia NoData pikselių. Tie pikseliai bus automatiškai užpildyti kaip NoData, kadangi sušvelnins aštrių briaunų efektus, kurie galėtų atsirasti.",
	"@@Slope_Scaling_tag0@@": "Pasvirimas gali būti išvedamas kaip reikšmė laipsniais arba procentinis pakilimas. Yra trys <strong>Scaling</strong> parinktys:",
	"@@Slope_Scaling_tag3@@": "<strong>Degree</strong>--Pasvirimas skaičiuojamas laipsniais. Reikšmių intervalas yra nuo 0 iki 90.",
	"@@Slope_Scaling_tag5@@": "<strong>Percent_Rise</strong>--Pasvirimas skaičiuojamas kaip procentinis pakilimas. Reikšmės kinta nuo 0 iki begalybės. Plokščias paviršius turi 0 procentų pakilimą, o 45 laipsnių paviršiaus procentinis pakilimas yra 100. Paviršiui vertikalėjant, procentinis pakilimas auga.",
	"@@Slope_Scaling_tag7@@": "<strong>Scaled</strong>--Pasvirimas skaičiuojamas taip pat kaip LAIPSNIS, tačiau masteliui pakeisti pakoreguojamas z faktorius. Naudojamos <strong>Pixel Size Power</strong> ir <strong>Pixel Size Factor</strong> reikšmės, kurios atsižvelgia į raiškos (mastelio) pokyčių žiūrovui artinant ir tolinant vaizdą. Ši funkcija rekomenduojama naudojant pasaulio duomenų rinkinius--ypač kai pasvirimas naudojamas kaip vizualizacijos paviršius.",
	"@@Slope_Scaling_tag13@@": "z faktorius pakoreguotas naudojant šią lygtį:",
	"@@Slope_Scaling_tag14@@": "Pakoreguotas z faktorius = (Z faktorius) + (pikselio dydis)",
	"@@Slope_Scaling_tag15@@": "x (Pikselių dydžio koeficientas)",
	"@@Slope_Scaling_tag16@@": "Pikselio dydžio įtaka",
	"@@Slope_Z-Factor_tag0@@": "<strong>Z Factor</strong> – tai proporcingumo koeficientas, naudojamas konvertuojant aukščių reikšmes šiais dviem tikslais:",
	"@@Slope_Z-Factor_tag3@@": "Konvertuoti aukščio vienetus (pvz., metrus ar pėdas) į duomenų rinkinio horizontaliosios ašies vienetus – pėdas, metrus ar laipsnius",
	"@@Slope_Z-Factor_tag4@@": "Pridėti vertikalią ašį geresniam vizualiniam efektui",
	"@@Slope_PSPower_tag0@@": "<strong>Pikselio dydžio įtaka</strong> atsižvelgia į aukščio pokyčius (ar mastelį), žiūrovui artinant ar tolinant žemėlapio atvaizdavimą. Tai yra eksponentinė funkcija, pritaikoma pikselio dydžio trukmei lygtyje, kuria valdoma, kaip sparčiai kinta <strong>Z Factor</strong>, kad būtų išvengta žymaus reljefo praradimo.",
	"@@Slope_PSPower_tag1@@": "Šis parametras tinkamas tik, jei <strong>Scaling</strong> tipas nustatytas kaip <strong>Scaled</strong>. Numatytoji reikšmė yra 0,664.",
	"@@Slope_PSZFactor_tag0@@": "<strong>Pikselio dydžio faktoriumi</strong> atsižvelgiama į mastelį, žiūrovui artinant ar tolinant žemėlapio atvaizdavimą. Ši funkcija valdo, kaip sparčiai kinta <strong>Z Factor</strong>.",
	"@@Slope_PSZFactor_tag1@@": "Šis parametras tinkamas tik, jei <strong>Scaling</strong> tipas nustatytas kaip <strong>Scaled</strong>. Numatytoji reikšmė yra 0,024.",
	"@@Snap-Pour-Point_Flow-Accumulation-Raster_tag0@@": "Įvesties tėkmės kaupimo rastrinis sluoksnis.",
	"@@Snap-Pour-Point_Flow-Accumulation-Raster_tag1@@": "Jį galima sukurti naudojant funkciją <strong>Flow Accumulation</strong>.",
	"@@Snap-Pour-Point_Pour-Point-Field_tag0@@": "Laukas, naudojamas priskirti reikšmes nutekėjimo taško padėtims.",
	"@@Snap-Pour-Point_Pour-Point-Raster_tag0@@": "Įvesties nutekėjimo taškų padėtys, kurios tuoj bus susietos.",
	"@@Snap-Pour-Point_Pour-Point-Raster_tag1@@": "Įvesties rastriniam sluoksniui visos gardelės, kurios nėra NoData (t. y. turi reikšmę), bus laikomos nutekėjimo taškais ir bus susietos.",
	"@@Snap-Pour-Point_Snap-Distance_tag0@@": "Maksimalus atstumas žemėlapio matavimo vienetais, kiek bus ieškoma gardelių su didesne tėkmės sankaupa.",
	"@@Speckle_Additive-Noise-Mean_tag0@@": "Nurodo pridėtinio triukšmo vidutinę reikšmę. Didesnė pridėtinio triukšmo reikšmė sukurs mažiau glodinimo, o mažesnė – priešingai.",
	"@@Speckle_Additive-Noise-Mean_tag1@@": "Šis parametras tinkamas tik, jei <strong>Filter Type</strong> nustatytas kaip <strong>Lee Filter</strong>, o <strong>Noise Model</strong> – kaip <strong>Additive Noise</strong> arba <strong>Additive and Multiplicative Noise</strong>. Numatytoji reikšmė yra 0.",
	"@@Speckle_Damping-Factor_tag0@@": "Nurodo laipsnio rodiklio slopinamojo poveikio filtravimui aprėptį. Didesnė slopinimo reikšmė geriau išlaiko briaunas, tačiau mažiau glodina, o mažesnė reikšmė geriau glodina. 0 lygi reikšmė suteikia tokią pačią išvestį kaip žemųjų dažnių filtras.",
	"@@Speckle_Damping-Factor_tag1@@": "Šis parametras tinkamas tik, jei <strong>Filter Type</strong> nustatytas kaip <strong>Enhanced Lee Filter</strong> arba <strong>Frost Filter</strong>. Numatytoji reikšmė yra 1.",
	"@@Speckle_Filter-Size_tag0@@": "Nurodo triukšmo filtravimui naudojamo pikselio lango dydį:",
	"@@Speckle_Filter-Size_tag1@@": "3x3",
	"@@Speckle_Filter-Size_tag2@@": "5x5",
	"@@Speckle_Filter-Size_tag3@@": "7x7",
	"@@Speckle_Filter-Size_tag4@@": "9x9",
	"@@Speckle_Filter-Size_tag5@@": "11x11",
	"@@Speckle_Filter-Type_tag0@@": "Nurodo tipą filtro, kuris bus naudojamas glodinimo algoritme siekiant pašalinti didelio dažnio triukšmą:",
	"@@Speckle_Filter-Type_tag1@@": "<strong>Lee Filter</strong>--Mažina didelio dažnio triukšmą pritaikydamas erdvinį filtrą kiekvienam vaizdo pikseliui ir filtruodamas duomenis pagal kvadratiniame lange apskaičiuotą vietinę statistiką. Šis filtras naudingas, kai norite suglodinti didelio dažnio triukšmo duomenis, kurie turi papildomą ar dauginamą komponentą. Tai numatytasis nustatymas.",
	"@@Speckle_Filter-Type_tag3@@": "<strong>Enhanced Lee Filter</strong>--Pritaikyta Lee filtro versija, kurioje yra <strong>Damping Factor</strong> ir <strong>Number of Looks</strong>. Šis filtras naudingas, kai norite mažinti didelio dažnio triukšmą, bet išsaugoti tekstūros informaciją.",
	"@@Speckle_Filter-Type_tag9@@": "<strong>Frost Filter</strong>--Sumažina didelio dažnio triukšmą naudodamas eksponentiškai slopinamą apskritimo lanku simetrišką filtrą, kuris atskiruose filtro languose naudoja vietinę statistiką. Šis filtras naudingas, kai norite mažinti didelio dažnio triukšmą, bet išsaugoti briaunas radaro vaizduose.",
	"@@Speckle_Filter-Type_tag11@@": "<strong>Kuan Filter</strong>--Panašiai kaip Lee filtras, šis pritaiko erdvinį filtrą kiekvienam vaizdo pikseliui ir filtruoja duomenis pagal kvadratiniame lange apskaičiuotą vietinę statistiką. Šis filtras naudingas, kai norite mažinti didelio dažnio triukšmą, bet išsaugoti briaunas radaro vaizduose.",
	"@@Speckle_Multiplicative-Noise-Mean_tag0@@": "Nurodo dauginamo triukšmo vidutinę reikšmę. Didesnė dauginamo triukšmo reikšmė sukurs mažiau glodinimo, o mažesnė – priešingai.",
	"@@Speckle_Multiplicative-Noise-Mean_tag1@@": "Šis parametras tinkamas tik, jei <strong>Filter Type</strong> nustatytas kaip <strong>Lee Filter</strong>, o <strong>Noise Model</strong> – kaip <strong>Additive Noise</strong> arba <strong>Additive and Multiplicative Noise</strong>. Numatytoji reikšmė yra 1.",
	"@@Speckle_Noise-Model_tag0@@": "Nurodo tipą triukšmo, kuris prastina radaro vaizdo kokybę:",
	"@@Speckle_Noise-Model_tag1@@": "<strong>Multiplicative Noise</strong>--Atsitiktinis triukšmo signalas, kuris dauginamas į aktualų signalą užfiksuojant arba perduodant",
	"@@Speckle_Noise-Model_tag3@@": "<strong>Additive Noise</strong>--Atsitiktinis triukšmo signalas, kuris pridedamas į aktualų signalą užfiksuojant arba perduodant",
	"@@Speckle_Noise-Model_tag5@@": "<strong>Additive and Multiplicative Noise</strong>--Abu triukšmo modeliai",
	"@@Speckle_Noise-Variance_tag0@@": "Nurodo radaro vaizdo triukšmo dispersiją",
	"@@Speckle_Noise-Variance_tag1@@": "Šis parametras tinkamas tik, jei <strong>Filter Type</strong> nustatytas kaip <strong>Lee Filter</strong>, o <strong>Noise Model</strong> – kaip <strong>Additive Noise</strong> arba <strong>Additive and Multiplicative Noise</strong>. Numatytoji reikšmė yra 0,25.",
	"@@Speckle_Number-of-Looks_tag0@@": "Nurodo vaizdo peržiūrų skaičių, valdantį vaizdo glodinimą ir vertinantį triukšmo dispersiją. Mažesnė reikšmė suteikia daugiau glodinimo, o didesnė išlaiko daugiau vaizdo elementų.",
	"@@Speckle_Number-of-Looks_tag1@@": "Šis parametras tinkamas tik, jei <strong>Filter Type</strong> yra nustatytas kaip <strong>Lee Filter</strong>, o <strong>Noise Model</strong> – kaip <strong>Multiplicative Noise</strong> , arba kai <strong>Filter Type</strong> nustatytas kaip <strong>Kuan Filter</strong>. Numatytoji reikšmė yra 1.",
	"@@Speckle_Raster_tag0@@": "Įvesties rastras.",
	"@@Spectral-Conversion_Conversion-Matrix_tag0@@": "Matrica, naudojama įvesties rastrui konvertuoti.",
	"@@Spectral-Conversion_Conversion-Matrix_tag1@@": "Šiai konversijai vykdyti naudojama lygtis yra:",
	"@@Spectral-Conversion_Conversion-Matrix_tag2@@": "Output Band_R = Weight_P * Band_C",
	"@@Spectral-Conversion_Conversion-Matrix_tag3@@": "kur:",
	"@@Spectral-Conversion_Conversion-Matrix_tag4@@": "Band_R yra išvesties kanalas, čia R yra skaičius nuo 1 iki išvesties kanalų skaičiaus.",
	"@@Spectral-Conversion_Conversion-Matrix_tag5@@": "Weight_P kableliu atskirtų svorių sąrašas, po 1 kiekvienam įvesties kanalui. Kiekvieno kanalo svorių suma turėtų būti lygi 1.",
	"@@Spectral-Conversion_Conversion-Matrix_tag6@@": "Band_C yra įvesties vaizdas, čia C yra skaičius nuo 1 iki įvesties vaizdo kanalų skaičiaus.",
	"@@Spectral-Conversion_Raster_tag0@@": "Įvesties rastras.",
	"@@Spectral-Conversion_Raster_tag1@@": "Tai gali būti rastrinis duomenų rinkinys, mozaikos rinkinys arba vaizdų paslauga.",
	"@@Spectral-Conversion_Size_tag0@@": "<strong>Conversion Matrix</strong> eilučių ir stulpelių skaičius.",
	"@@Square_Cellsize-Type_tag0@@": "Pasirinkite, koks gardelės dydis bus naudojamas išvesties rastre. Jei visų įvesties gardelių dydžiai vienodi, visos parinktys pateiks vienodus rezultatus.",
	"@@Square_Cellsize-Type_tag1@@": "Pirmiausia--Naudoti pirmą įvesties rastrų gardelės dydį.",
	"@@Square_Cellsize-Type_tag2@@": "Paskiausia--Naudoti paskutinį įvesties rastrų gardelės dydį.",
	"@@Square_Cellsize-Type_tag3@@": "Didžiausias--Naudoti didžiausią įvesties rastrų gardelės dydį. Tai numatytasis nustatymas.",
	"@@Square_Cellsize-Type_tag4@@": "Vidutinis--Naudoti vidutinį visų įvesties rastrų gardelės dydį.",
	"@@Square_Cellsize-Type_tag5@@": "Mažiausias--Naudoti mažiausią įvesties rastrų gardelės dydį.",
	"@@Square_Extent-Type_tag0@@": "Pasirinkite, kokia aprėptis bus naudojama išvesties rastre:",
	"@@Square_Extent-Type_tag1@@": "Pirmiausia--Naudoti pirmojo įvesties rastro aprėptį nustatant apdorojimo aprėptį.",
	"@@Square_Extent-Type_tag2@@": "Sankirta--Naudoti persidengiančių pikselių aprėptį nustatant apdorojimo aprėptį. Tai numatytasis nustatymas.",
	"@@Square_Extent-Type_tag3@@": "Paskiausia--Naudoti paskutinio įvesties rastro aprėptį nustatant apdorojimo aprėptį.",
	"@@Square_Extent-Type_tag4@@": "Sąjunga--Naudoti visų rastrų aprėptį nustatant apdorojimo aprėptį.",
	"@@Square_Raster_tag0@@": "Įvesties reikšmės, kurios bus keliamos kvadratu.",
	"@@Square-Root_Cellsize-Type_tag0@@": "Pasirinkite, koks gardelės dydis bus naudojamas išvesties rastre. Jei visų įvesties gardelių dydžiai vienodi, visos parinktys pateiks vienodus rezultatus.",
	"@@Square-Root_Cellsize-Type_tag1@@": "Pirmiausia--Naudoti pirmą įvesties rastrų gardelės dydį.",
	"@@Square-Root_Cellsize-Type_tag2@@": "Paskiausia--Naudoti paskutinį įvesties rastrų gardelės dydį.",
	"@@Square-Root_Cellsize-Type_tag3@@": "Didžiausias--Naudoti didžiausią įvesties rastrų gardelės dydį. Tai numatytasis nustatymas.",
	"@@Square-Root_Cellsize-Type_tag4@@": "Vidutinis--Naudoti vidutinį visų įvesties rastrų gardelės dydį.",
	"@@Square-Root_Cellsize-Type_tag5@@": "Mažiausias--Naudoti mažiausią įvesties rastrų gardelės dydį.",
	"@@Square-Root_Extent-Type_tag0@@": "Pasirinkite, kokia aprėptis bus naudojama išvesties rastre:",
	"@@Square-Root_Extent-Type_tag1@@": "Pirmiausia--Naudoti pirmojo įvesties rastro aprėptį nustatant apdorojimo aprėptį.",
	"@@Square-Root_Extent-Type_tag2@@": "Sankirta--Naudoti persidengiančių pikselių aprėptį nustatant apdorojimo aprėptį. Tai numatytasis nustatymas.",
	"@@Square-Root_Extent-Type_tag3@@": "Paskiausia--Naudoti paskutinio įvesties rastro aprėptį nustatant apdorojimo aprėptį.",
	"@@Square-Root_Extent-Type_tag4@@": "Sąjunga--Naudoti visų rastrų aprėptį nustatant apdorojimo aprėptį.",
	"@@Square-Root_Raster_tag0@@": "Įvesties reikšmės, naudotos rasti kvadratinę šaknį.",
	"@@Statistics-and-Histogram_Define-Statistics-and-Histogram_tag0@@": "Nustatykite statistikos reikšmes kiekvienam kanalui.",
	"@@Statistics-and-Histogram_Define-Statistics-and-Histogram_tag1@@": "${Histogram} stulpelis yra tik skaitomas laukas, kurį galima automatiškai užpildyti naudojant parametrą <strong>Import</strong>. Jei importuosite histogramos failą, stulpelis ${Histogram} bus pažymėtas kaip <strong>Defined</strong>.",
	"@@Statistics-and-Histogram_Import_tag0@@": "Importuokite statistikos ir histogramos informaciją iš esamo rastro arba XML failo.",
	"@@Statistics-and-Histogram_Raster_tag0@@": "Įvesties rastras, kuriam turi būti nustatytos statistika ir histograma.",
	"@@Statistics-and-Histogram_Statistics_tag0@@": "Nustatykite statistikos reikšmes kiekvienam kanalui.",
	"@@Stream-Link_Flow-Direction-Raster_tag0@@": "Įvesties rastras, rodantis tėkmės iš kiekvienos gardelės kryptį.",
	"@@Stream-Link_Flow-Direction-Raster_tag1@@": "Tėkmės krypties rastrą galima sukurti naudojant funkciją <strong>Flow Direction</strong>.",
	"@@Stream-Link_Stream-Raster_tag0@@": "Įvesties rastras, reprezentuojantis linijinį tėkmių tinklą.",
	"@@Stream-Order_Flow-Direction-Raster_tag0@@": "Įvesties rastras, rodantis tėkmės iš kiekvienos gardelės kryptį.",
	"@@Stream-Order_Flow-Direction-Raster_tag1@@": "Tėkmės krypties rastrą galima sukurti naudojant funkciją <strong>Flow Direction</strong>.",
	"@@Stream-Order_Order-Method_tag0@@": "Metodas, naudojamas priskirti tėkmės eiliškumą.",
	"@@Stream-Order_Order-Method_tag1@@": "<strong>STRAHLER</strong>--Šį tėkmės eiliškumą nustatantį metodą 1952 m. pasiūlė Strahleris. Tėkmių eiliškumas tik auga kai to pačio prioriteto tėkmės susikerta. Pirmo eiliškumo ir antro eiliškumo linijų sankirta lieka antro eiliškumo linija, o ne sukuria trečio eiliškumo liniją. Tai numatytasis nustatymas.",
	"@@Stream-Order_Order-Method_tag3@@": "<strong>SHREVE</strong>--Šį tėkmės eiliškumą pagal dydį nustatantį metodą 1967 m. pasiūlė Shreve. Visoms intakų neturinčioms linijoms priskiriamas dydis (eiliškumas), lygus 1. Dydis yra sudedamas nuolydis. Kai dvi linijos susikerta, jų dydžiai sudedami ir priskiriami nuolydžio linijai.",
	"@@Stream-Order_Stream-Raster_tag0@@": "Įvesties tėkmės rastras, reprezentuojantis linijinį tėkmių tinklą.",
	"@@Stretch_Auto-Gamma_tag0@@": "Naudokite  <strong>Auto Gamma</strong> skaičiuoti gamą iš duomenų rinkinio statistikos ir histogramos. Statistika gali būti įvertinama pačios funkcijos arba ją gali įvertinti programinė įranga, jei pasirinksite sluoksnį.",
	"@@Stretch_Dynamic-Range-Adjustment_tag0@@": "Pažymėkite <strong>Dynamic Range Adjustment</strong> žymės langelį, jei norite, kad statistika būtų skaičiuojama tik iš jūsų ekrane rodomų pikselių. Paprastai ši parinktis taikoma, kai vaizdas bus publikuojamas ir naudojamas internetinėje aplikacijoje, kuri pati negali atlikti tokio tipo ištempimo.",
	"@@Stretch_Estimate-Statistics_tag0@@": "Pažymėkite <strong>Estimate Statistics</strong> žymės langelį, jei norite apskaičiuoti savo statistiką. Ši statistika įvertinama imant 1000 kartų po 1000 pavyzdį iš rastro centro ir naudojama ištempiant.",
	"@@Stretch_Estimate-Statistics_tag3@@": "Jei ši parinktis pažymėta ir rastras turi statistiką, arba įvedėte reikšmes į <strong>Statistics</strong> lentelę, jos bus naudojamos vietoj įvertinimo, nebent ištempimui būtina histograma. Jei ištempimui reikalingos histogramos nėra, ji bus įvertinta.",
	"@@Stretch_Gamma_tag0@@": "Naudodami slinkimo juostą rankiniu būdu nustatykite <strong>Gamma</strong> reikšmę.",
	"@@Stretch_Number-Of-Standard-Deviations_tag0@@": "Nurodykite skaičių n, kiek standartinių nuokrypių bus naudojama. Šis metodas naudojamas norint paryškinti, kiek elementų reikšmės skiriasi nuo vidutinės reikšmės. Jis naudingiausias tada, kai naudojamas su normalinio pasiskirstymo duomenimis.",
	"@@Stretch_Output-Maximum_tag0@@": "Nustatykite didžiausią histogramos pikselio reikšmę.",
	"@@Stretch_Output-Maximum_tag1@@": "<strong>Output Minimum</strong> ir <strong>Output Maximum</strong> nustatys reikšmių, kurių kontrastas bus linijiniu būdu padidintas, intervalą.",
	"@@Stretch_Output-Minimum_tag0@@": "Nustatykite mažiausią histogramos pikselio reikšmę.",
	"@@Stretch_Output-Minimum_tag1@@": "<strong>Output Minimum</strong> ir <strong>Output Maximum</strong> nustatys reikšmių, kurių kontrastas bus linijiniu būdu padidintas, intervalą.",
	"@@Stretch_Percent-Clip-Maximum_tag0@@": "Nurodykite procentinę dalį, kiek didelių reikšmių neįtraukti ištempiant.",
	"@@Stretch_Percent-Clip-Maximum_tag1@@": "Tinkami reikšmių intervalai yra nuo 0 iki 99.",
	"@@Stretch_Percent-Clip-Minimum_tag0@@": "Nurodykite procentinę dalį, kiek mažų reikšmių neįtraukti ištempiant.",
	"@@Stretch_Percent-Clip-Minimum_tag1@@": "Tinkami reikšmių intervalai yra nuo 0 iki 99.",
	"@@Stretch_Raster_tag0@@": "Įvesties rastras, kurio kontrastas bus didinamas.",
	"@@Stretch_Sigmoid-Strength-Level_tag0@@": "<strong>Strength Level</strong> lemia, kiek sigmoidinės funkcijos bus naudojama ištempiant. Maža reikšmė, pavyzdžiui, 1, naudos tik vidurinę kreivės dalį, kuri paprastai pateikia blausias ir neryškias spalvas. Didelė reikšmė, pavyzdžiui, 6, naudos visą kreivę, kuri paprastai pateikia drąsias ir ryškias spalvas.",
	"@@Stretch_Statistics_tag0@@": "Dialogo lange galite įvesti savo statistiką. Pagal numatytuosius nustatymus statistika gaunama iš duomenų; tačiau vietoj jos bus naudojamos bet kokios reikšmės, kurias įvesite šiam parametrui.",
	"@@Stretch_Type_tag0@@": "Pasirinkite ištempimo tipo metodą:",
	"@@Stretch_Type_tag1@@": "Jokio--kontrasto didinimas nevykdomas",
	"@@Stretch_Type_tag2@@": "StdDev--ištempimas pagal standartinį nuokrypį",
	"@@Stretch_Type_tag3@@": "MinMax--ištempimas pagal minimumo ir maksimumo reikšmes",
	"@@Stretch_Type_tag4@@": "PercentMinMax--ištempimas pagal procentinį apkirpimą",
	"@@Stretch_Type_tag5@@": "Sigmoid--sigmoidinis ištempimas",
	"@@Stretch_Use-Gamma_tag0@@": "Pažymėkite <strong>Estimate Statistics</strong> žymės langelį, jei norite vykdyti gama ištempimą.",
	"@@Swath_Cellsize_tag0@@": "Išvesties rastro gardelės dydis bus aptinkamas automatiškai, tačiau galima šį nustatymą pakeisti, jei norite. Gardelės dydį galima keisti, bet rastrinio duomenų rinkinio aprėptis liks tokia pati.",
	"@@Swath_Interpolation-Method_tag0@@": "Ši funkcija turi keturis perskaičiavimo metodus:",
	"@@Swath_Interpolation-Method_tag1@@": "<strong>Nearest Neighbor</strong>--Skaičiuoja pikselio reikšmę naudodamas artimiausią pikselį. Jei nėra šaltinio pikselio, išvestyje negalima sukurti naujo pikselio.",
	"@@Swath_Interpolation-Method_tag3@@": "<strong>Bilinear</strong>--Skaičiuoja pikselio reikšmę naudodamas pagal atstumą pasvertą keturių artimiausių pikselių reikšmę.",
	"@@Swath_Interpolation-Method_tag5@@": "<strong>Linear Tinning</strong>--Interpoliuojamam paviršiui konvertuoti į įprastą rastrą, naudoja trianguliuotą netaisyklingą tinklą, kurį sudaro kiekvieno netaisyklingo rastro pikselio centro taškas.",
	"@@Swath_Interpolation-Method_tag7@@": "<strong>Natural Neighbor</strong>--Atlieka artimiausio kaimyno užduotį. Tai yra sparčiausias interpoliacijos metodas. Jis daugiausia naudojamas diskretiesiems duomenims, pavyzdžiui, klasifikacijai pagal žemės naudojimą, kadangi nekeičia gardelių reikšmių. Maksimali erdvinė klaida bus pusė gardelės dydžio.",
	"@@Swath_Raster_tag0@@": "Netaisyklingo tinklelio įvesties rastras, kuris bus perskaičiuojamas.",
	"@@Tan_Cellsize-Type_tag0@@": "Pasirinkite, koks gardelės dydis bus naudojamas išvesties rastre. Jei visų įvesties gardelių dydžiai vienodi, visos parinktys pateiks vienodus rezultatus.",
	"@@Tan_Cellsize-Type_tag1@@": "Pirmiausia--Naudoti pirmą įvesties rastrų gardelės dydį.",
	"@@Tan_Cellsize-Type_tag2@@": "Paskiausia--Naudoti paskutinį įvesties rastrų gardelės dydį.",
	"@@Tan_Cellsize-Type_tag3@@": "Didžiausias--Naudoti didžiausią įvesties rastrų gardelės dydį. Tai numatytasis nustatymas.",
	"@@Tan_Cellsize-Type_tag4@@": "Vidutinis--Naudoti vidutinį visų įvesties rastrų gardelės dydį.",
	"@@Tan_Cellsize-Type_tag5@@": "Mažiausias--Naudoti mažiausią įvesties rastrų gardelės dydį.",
	"@@Tan_Extent-Type_tag0@@": "Pasirinkite, kokia aprėptis bus naudojama išvesties rastre:",
	"@@Tan_Extent-Type_tag1@@": "Pirmiausia--Naudoti pirmojo įvesties rastro aprėptį nustatant apdorojimo aprėptį.",
	"@@Tan_Extent-Type_tag2@@": "Sankirta--Naudoti persidengiančių pikselių aprėptį nustatant apdorojimo aprėptį. Tai numatytasis nustatymas.",
	"@@Tan_Extent-Type_tag3@@": "Paskiausia--Naudoti paskutinio įvesties rastro aprėptį nustatant apdorojimo aprėptį.",
	"@@Tan_Extent-Type_tag4@@": "Sąjunga--Naudoti visų rastrų aprėptį nustatant apdorojimo aprėptį.",
	"@@Tan_Raster_tag0@@": "Įvestis, kuriai bus skaičiuojamos tangento reikšmės.",
	"@@TanH_Cellsize-Type_tag0@@": "Pasirinkite, koks gardelės dydis bus naudojamas išvesties rastre. Jei visų įvesties gardelių dydžiai vienodi, visos parinktys pateiks vienodus rezultatus.",
	"@@TanH_Cellsize-Type_tag1@@": "Pirmiausia--Naudoti pirmą įvesties rastrų gardelės dydį.",
	"@@TanH_Cellsize-Type_tag2@@": "Paskiausia--Naudoti paskutinį įvesties rastrų gardelės dydį.",
	"@@TanH_Cellsize-Type_tag3@@": "Didžiausias--Naudoti didžiausią įvesties rastrų gardelės dydį. Tai numatytasis nustatymas.",
	"@@TanH_Cellsize-Type_tag4@@": "Vidutinis--Naudoti vidutinį visų įvesties rastrų gardelės dydį.",
	"@@TanH_Cellsize-Type_tag5@@": "Mažiausias--Naudoti mažiausią įvesties rastrų gardelės dydį.",
	"@@TanH_Extent-Type_tag0@@": "Pasirinkite, kokia aprėptis bus naudojama išvesties rastre:",
	"@@TanH_Extent-Type_tag1@@": "Pirmiausia--Naudoti pirmojo įvesties rastro aprėptį nustatant apdorojimo aprėptį.",
	"@@TanH_Extent-Type_tag2@@": "Sankirta--Naudoti persidengiančių pikselių aprėptį nustatant apdorojimo aprėptį. Tai numatytasis nustatymas.",
	"@@TanH_Extent-Type_tag3@@": "Paskiausia--Naudoti paskutinio įvesties rastro aprėptį nustatant apdorojimo aprėptį.",
	"@@TanH_Extent-Type_tag4@@": "Sąjunga--Naudoti visų rastrų aprėptį nustatant apdorojimo aprėptį.",
	"@@TanH_Raster_tag0@@": "Įvestis, kuriai bus skaičiuojamos hiperbolinio tangento reikšmės.",
	"@@Tasseled-Cap_Raster_tag0@@": "Įvesties rastras, su kuriuo bus atliekama Tasseled Cap transformacija.",
	"@@Times_Cellsize-Type_tag0@@": "Pasirinkite, koks gardelės dydis bus naudojamas išvesties rastre. Jei visų įvesties gardelių dydžiai vienodi, visos parinktys pateiks vienodus rezultatus.",
	"@@Times_Cellsize-Type_tag1@@": "Pirmiausia--Naudoti pirmą įvesties rastrų gardelės dydį.",
	"@@Times_Cellsize-Type_tag2@@": "Paskiausia--Naudoti paskutinį įvesties rastrų gardelės dydį.",
	"@@Times_Cellsize-Type_tag3@@": "Didžiausias--Naudoti didžiausią įvesties rastrų gardelės dydį. Tai numatytasis nustatymas.",
	"@@Times_Cellsize-Type_tag4@@": "Vidutinis--Naudoti vidutinį visų įvesties rastrų gardelės dydį.",
	"@@Times_Cellsize-Type_tag5@@": "Mažiausias--Naudoti mažiausią įvesties rastrų gardelės dydį.",
	"@@Times_Extent-Type_tag0@@": "Pasirinkite, kokia aprėptis bus naudojama išvesties rastre:",
	"@@Times_Extent-Type_tag1@@": "Pirmiausia--Naudoti pirmojo įvesties rastro aprėptį nustatant apdorojimo aprėptį.",
	"@@Times_Extent-Type_tag2@@": "Sankirta--Naudoti persidengiančių pikselių aprėptį nustatant apdorojimo aprėptį. Tai numatytasis nustatymas.",
	"@@Times_Extent-Type_tag3@@": "Paskiausia--Naudoti paskutinio įvesties rastro aprėptį nustatant apdorojimo aprėptį.",
	"@@Times_Extent-Type_tag4@@": "Sąjunga--Naudoti visų rastrų aprėptį nustatant apdorojimo aprėptį.",
	"@@Times_Raster_tag0@@": "Įvestis, kurioje yra reikšmės, kurios bus dauginamos.",
	"@@Times_Raster_tag1@@": "Šiam parametrui kaip įvestį galima naudoti konstantos reikšmę, jei kitam parametrui nurodytas rastras.",
	"@@Times_Raster2_tag0@@": "Įvestis, kurioje yra reikšmės, iš kurių bus dauginama pirmoji įvestis.",
	"@@Times_Raster2_tag1@@": "Šiam parametrui kaip įvestį galima naudoti konstantos reikšmę, jei kitam parametrui nurodytas rastras.",
	"@@Transpose-Bits_Bit-Pattern_tag0@@": "Pasirinkite transponavimo tipą, kurį norite vykdyti, arba nurodykite adaptuotą:",
	"@@Transpose-Bits_Bit-Pattern_tag1@@": "Landsat 8 plunksniniai debesys",
	"@@Transpose-Bits_Bit-Pattern_tag2@@": "Landsat 8 debesis",
	"@@Transpose-Bits_Bit-Pattern_tag3@@": "Landsat 8 debesies šešėlis",
	"@@Transpose-Bits_Bit-Pattern_tag4@@": "Landsat 8 priskirtas užpildas",
	"@@Transpose-Bits_Bit-Pattern_tag5@@": "Landsat 8 pašalintas rėmelis",
	"@@Transpose-Bits_Bit-Pattern_tag6@@": "Landsat 8 sniegas / ledas",
	"@@Transpose-Bits_Bit-Pattern_tag7@@": "Landsat 8 teritorijos okliuzija",
	"@@Transpose-Bits_Bit-Pattern_tag8@@": "Landsat 8 augmenija",
	"@@Transpose-Bits_Bit-Pattern_tag9@@": "Landsat 8 vanduo",
	"@@Transpose-Bits_Bit-Pattern_tag10@@": "Vartotojo nustatytas",
	"@@Transpose-Bits_Constant-Value_tag0@@": "Neprivaloma reikšmė, kuri bus naudojama užpildyti visus bitus, kurie nedalyvauja transponavime. Šis parametras matomas, kai parametras <strong>Generate Fill Raster from Constant</strong> nustatytas kaip <strong>Yes</strong>.",
	"@@Transpose-Bits_Fill-Raster_tag0@@": "Nurodykite rastrinių duomenų rinkinį, kuris bus naudojamas užpildyti visus bitus, kurie nedalyvauja transponavime. Šis parametras matomas, kai parametras <strong>Generate Fill Raster from Constant</strong> nustatytas kaip <strong>No</strong>.",
	"@@Transpose-Bits_Generate-Fill-Raster-from-Constant_tag0@@": "Generuoti užpildo rastrą naudojant konstantos reikšmę:",
	"@@Transpose-Bits_Generate-Fill-Raster-from-Constant_tag1@@": "<strong>Yes</strong>--Bus sugeneruojamas rastras naudojant konstantos reikšmę užpildyti bitus, kurie nedalyvauja transponavime. Tai numatytasis nustatymas.",
	"@@Transpose-Bits_Generate-Fill-Raster-from-Constant_tag3@@": "<strong>No</strong>--Bus sugeneruojamas rastras naudojant pikselių reikšmes iš esamo rastrinio duomenų rinkinio užpildyti bitus, kurie nedalyvauja transponavime.",
	"@@Transpose-Bits_Output-Bit-and-Input-Bit_tag0@@": "Tik skaitoma lentelė, kurioje rodomi išvesties bitai ir įvesties duomenys, kurie juos pakeis.",
	"@@Transpose-Bits_Raster_tag0@@": "Įvesties rastras, kuris bus išpakuojamas ir susiejamas iš naujo.",
	"@@Unit-Conversion_From-Unit_tag0@@": "Originalus pikselių vieneto tipas.",
	"@@Unit-Conversion_Raster_tag0@@": "Įvesties rastras, kuriame bus konvertuoti vienetai.",
	"@@Unit-Conversion_To-Unit_tag0@@": "Konvertuotas pikselių vieneto tipas.",
	"@@Vector-Field_Angle-Reference-System_tag0@@": "Nurodo, kaip buvo matuojamas krypties komponentas.",
	"@@Vector-Field_Angle-Reference-System_tag1@@": "Geografinis--0° rodo į šiaurę, o 90° rodo į rytus",
	"@@Vector-Field_Angle-Reference-System_tag2@@": "Aritmetinis--0° rodo į rytus, o 90° rodo į šiaurę",
	"@@Vector-Field_Input-Data-Type_tag0@@": "Vektorinio lauko tipas, kurį reprezentuoja jūsų įvestys.",
	"@@Vector-Field_Input-Data-Type_tag1@@": "Nežinomas--nežinoma, ar įvestys reprezentuoja U-V, ar dydį-kryptį.",
	"@@Vector-Field_Input-Data-Type_tag2@@": "U-V--įvesties duomenys reprezentuoja U ir V komponentus.",
	"@@Vector-Field_Input-Data-Type_tag3@@": "Dydis-kryptis--įvesties duomenys reprezentuoja dydį ir kryptį.",
	"@@Vector-Field_Output-Data-Type_tag0@@": "Nurodo vektorinio lauko tipą, kurį reprezentuos jūsų įvestys.",
	"@@Vector-Field_Output-Data-Type_tag1@@": "Dydis-kryptis--išvesties duomenys reprezentuoja dydį ir kryptį.",
	"@@Vector-Field_Output-Data-Type_tag2@@": "U-V--išvesties duomenys reprezentuoja U ir V komponentus.",
	"@@Vector-Field_Raster1_tag0@@": "Pirmasis įvesties rastras.",
	"@@Vector-Field_Raster1_tag1@@": "Jis bus arba U reikšmių, arba dydžio.",
	"@@Vector-Field_Raster2_tag0@@": "Antrasis įvesties rastras.",
	"@@Vector-Field_Raster2_tag1@@": "Jis bus arba V reikšmių, arba krypties.",
	"@@Viewshed_Analysis-Method_tag0@@": "Pasirinkite metodą, kuriuo bus skaičiuojamas matomumas. Ši parinktis leidžia paaukoti dalį tikslumo, mainais gaunant našumo.",
	"@@Viewshed_Analysis-Method_tag1@@": "Visos apžvalgos linijos--kiekvienam rastro pikseliui vykdoma apžvalgos linija siekiant nustatyti matomas teritorijas. Tai yra numatytasis metodas.",
	"@@Viewshed_Analysis-Method_tag2@@": "Perimetro apžvalgos linijos--apžvalgos linijos vykdomos tik matomų teritorijų perimetro pikseliams, siekiant nustatyti matomumo teritorijas. Šis metodas yra efektyvesnis už <strong>All Sightlines</strong> metodą, nes skaičiuojant naudojama mažiau apžvalgos linijų.",
	"@@Viewshed_Analysis-Type_tag0@@": "Pasirinkite matomumo analizę, kurią norite atlikti, nustatydami arba kiek matoma kiekviena gardelė stebėtojams, arba identifikuodami kiekvieną paviršiaus padėtį, kurios stebėtojai matomi.",
	"@@Viewshed_Analysis-Type_tag1@@": "Dažnis--skaičius kartų, kiek kiekvieno pikselio padėtį įvesties paviršiaus rastre galima matyti iš įvesties stebėjimo padėčių (kaip taškai arba kaip viršūnės polilinijos stebėtojo elemento atveju). Tai numatytasis nustatymas.",
	"@@Viewshed_Analysis-Type_tag2@@": "Stebėtojai--išvestis tiksliai identifikuoja, kurie stebėtojų taškai matomi iš kiekvienos rastro paviršiaus padėties. Šiam analizės tipui leidžiamas maksimalus įvesties stebėtojų skaičius yra 32.",
	"@@Viewshed_Horizontal-End-Angle_tag0@@": "Ši reikšmė aprašo horizontalaus nuskaitymo intervalo pabaigos kampą. Šią reikšmę reikia nurodyti laipsniais nuo 0 iki 360,0, kur 0 nukreiptas į šiaurę. Numatytoji reikšmė yra 360,0.",
	"@@Viewshed_Horizontal-End-Angle_tag1@@": "Jis gali būti įvesties <strong>Observer Features</strong> duomenų rinkinio laukas arba skaitinė reikšmė. Jei šis parametras nustatytas kaip konkreti reikšmė, ta reikšmė bus taikoma visiems stebėtojams. Norėdami kiekvienam stebėtojui nustatyti skirtingas reikšmes, šį parametrą nustatykite kaip lauką duomenų rinkinyje <strong>Observer Features</strong>.",
	"@@Viewshed_Horizontal-Start-Angle_tag0@@": "Ši reikšmė aprašo horizontalaus nuskaitymo intervalo pradžios kampą. Šią reikšmę reikia nurodyti laipsniais nuo 0 iki 360,0, kur 0 nukreiptas į šiaurę. Numatytoji reikšmė yra 0.",
	"@@Viewshed_Horizontal-Start-Angle_tag1@@": "Jis gali būti įvesties <strong>Observer Features</strong> duomenų rinkinio laukas arba skaitinė reikšmė. Jei šis parametras nustatytas kaip konkreti reikšmė, ta reikšmė bus taikoma visiems stebėtojams. Norėdami kiekvienam stebėtojui nustatyti skirtingas reikšmes, šį parametrą nustatykite kaip lauką duomenų rinkinyje <strong>Observer Features</strong>.",
	"@@Viewshed_Inner-Radius-is-3D-Distance_tag0@@": "Vidinio spindulio parametro atstumo tipas.",
	"@@Viewshed_Inner-Radius-is-3D-Distance_tag1@@": "Nepažymėta--<strong>Inner Radius</strong> bus interpretuojamas kaip dvimatis atstumas. Tai numatytasis nustatymas.",
	"@@Viewshed_Inner-Radius-is-3D-Distance_tag4@@": "Pažymėta--<strong>Inner Radius</strong> bus interpretuojamas kaip trimatis atstumas.",
	"@@Viewshed_Inner-Radius_tag0@@": "Ši reikšmė aprašo pradinį (minimalų) atstumą, nuo kurio nustatomas matomumas. Arčiau nei šis atstumas esantys pikseliai laikomi nematomais išvestyje, tačiau vis tiek gali blokuoti pikselių matomumą tarp <strong>Inner Radius</strong> ir <strong>Outer Radius</strong>. Numatytoji reikšmė yra 0.",
	"@@Viewshed_Inner-Radius_tag5@@": "Jis gali būti įvesties <strong>Observer Features</strong> duomenų rinkinio laukas arba skaitinė reikšmė. Jei šis parametras nustatytas kaip konkreti reikšmė, ta reikšmė bus taikoma visiems stebėtojams. Norėdami kiekvienam stebėtojui nustatyti skirtingas reikšmes, šį parametrą nustatykite kaip lauką duomenų rinkinyje <strong>Observer Features</strong>.",
	"@@Viewshed_Observer-Elevation_tag0@@": "Ši reikšmė naudojama apibrėžti stebėtojo taškų ar viršūnių paviršiaus aukštį.",
	"@@Viewshed_Observer-Elevation_tag1@@": "Jis gali būti įvesties <strong>Observer Features</strong> duomenų rinkinio laukas arba skaitinė reikšmė. Jei šis parametras nenurodytas, stebėtojo aukštis bus gaunamas iš paviršiaus rastro naudojant bitiesinį interpoliavimą. Jei šis parametras nustatytas kaip konkreti reikšmė, ta reikšmė bus taikoma visiems stebėtojams. Norėdami kiekvienam stebėtojui nustatyti skirtingas reikšmes, šį parametrą nustatykite kaip lauką duomenų rinkinyje <strong>Observer Features</strong>.",
	"@@Viewshed_Observer-Features_tag0@@": "Būtina įvesties elementų klasė, identifikuojantis stebėtojo padėtis. Tai gali būti taškas, daugiataškis arba polilinijos elementai.",
	"@@Viewshed_Observer-Features_tag1@@": "Įvesties elementų klasė transformuojama į trimatę geocentrinę koordinačių sistemą, kai vykdomas matomumo skaičiavimas. Skaičiuojant ignoruojami stebėtojai, nepatenkantys į paviršiaus rastro aprėptį arba esantys NoData gardelėse.",
	"@@Viewshed_Observer-Offset_tag0@@": "Ši reikšmė nurodo vertikalų atstumą (paviršiaus vienetais), kuris bus pridedamas prie stebėtojo aukščio. Ji gali būti sveikojo skaičiaus arba slankiojo kablelio tipo.",
	"@@Viewshed_Observer-Offset_tag1@@": "Jis gali būti įvesties <strong>Observer Features</strong> duomenų rinkinio laukas arba skaitinė reikšmė. Jei šis parametras nustatytas kaip konkreti reikšmė, ta reikšmė bus taikoma visiems stebėtojams. Norėdami kiekvienam stebėtojui nustatyti skirtingas reikšmes, šį parametrą nustatykite kaip lauką duomenų rinkinyje <strong>Observer Features</strong>.",
	"@@Viewshed_Outer-Radius-is-3D-Distance_tag0@@": "Išorinio spindulio parametro atstumo tipas.",
	"@@Viewshed_Outer-Radius-is-3D-Distance_tag1@@": "Nepažymėta--<strong>Outer Radius</strong> bus interpretuojamas kaip dvimatis atstumas. Tai numatytasis nustatymas.",
	"@@Viewshed_Outer-Radius-is-3D-Distance_tag4@@": "Pažymėta--<strong>Outer Radius</strong> bus interpretuojamas kaip trimatis atstumas.",
	"@@Viewshed_Outer-Radius_tag0@@": "Ši reikšmė aprašo maksimalų atstumą, nuo kurio nustatomas matomumas. Už šio atstumo esantys pikseliai neįtraukiami į analizę.",
	"@@Viewshed_Outer-Radius_tag1@@": "Jis gali būti įvesties <strong>Observer Features</strong> duomenų rinkinio laukas arba skaitinė reikšmė. Jei šis parametras nustatytas kaip konkreti reikšmė, ta reikšmė bus taikoma visiems stebėtojams. Norėdami kiekvienam stebėtojui nustatyti skirtingas reikšmes, šį parametrą nustatykite kaip lauką duomenų rinkinyje <strong>Observer Features</strong>.",
	"@@Viewshed_Raster_tag0@@": "Būtinas įvesties paviršiaus rastras. Tai gali būti sveikasis skaičius arba slankiojo kablelio rastras.",
	"@@Viewshed_Raster_tag1@@": "Įvestis transformuojama į trimatę geocentrinę koordinačių sistemą, kai vykdomas matomumo skaičiavimas. Įvesties rastro NoData gardelės neblokuoja matomumo nustatymo.",
	"@@Viewshed_Refractive-Coefficient_tag0@@": "Regimos šviesos lūžio ore koeficientas.",
	"@@Viewshed_Refractive-Coefficient_tag1@@": "Numatytoji reikšmė yra 0,13.",
	"@@Viewshed_Surface-Offset_tag0@@": "Ši reikšmė nurodo vertikalų atstumą (paviršiaus vienetais), kurį reikia pridėti prie kiekvieno pikselio z reikšmės, kai vertinamas jo matomumas. Ji gali būti sveikojo skaičiaus arba slankiojo kablelio tipo.",
	"@@Viewshed_Surface-Offset_tag1@@": "Jis gali būti įvesties <strong>Observer Features</strong> duomenų rinkinio laukas arba skaitinė reikšmė. Jei šis parametras nustatytas kaip konkreti reikšmė, ta reikšmė bus taikoma visiems stebėtojams. Norėdami kiekvienam stebėtojui nustatyti skirtingas reikšmes, šį parametrą nustatykite kaip lauką duomenų rinkinyje <strong>Observer Features</strong>.",
	"@@Viewshed_Vertical-Error_tag0@@": "Paklaidos dydis, matuojamas kaip kvadratinis klaidos vidurkis (RMSE), paviršiaus aukščio vienetais. Tai yra slankiojo kablelio reikšmė, reprezentuojanti prognozuojamą įvesties aukščio reikšmių klaidą. Kai šiam parametrui priskirta didesnė nei 0 reikšmė, išvesties matomumo rastras bus slankiojo kablelio tipo. Tokiu atveju kiekvieno išvesties matomumo rastro pikselio reikšmė reprezentuoja tikimybių sumą, kad gardelė bus matoma bet kuriam stebėtojui.",
	"@@Viewshed_Vertical-Error_tag1@@": "Kai <strong>Analysis Type</strong> nustatytas kaip <strong>Observers</strong> arba <strong>Analysis Method</strong> nustatytas kaip <strong>Perimeter Sightlines</strong>, šis parametras yra išjungtas.",
	"@@Viewshed_Vertical-Lower-Angle_tag0@@": "Ši reikšmė aprašo apatinio vertikalaus kampo ribą nuskaitymui žemiau horizontalios plokštumos. Šią reikšmę reikia nurodyti laipsniais nuo -90,0 iki 0. Ji gali būti sveikasis skaičius arba slankusis kablelis. Numatytoji reikšmė yra -90,0.",
	"@@Viewshed_Vertical-Lower-Angle_tag1@@": "Jis gali būti įvesties <strong>Observer Features</strong> duomenų rinkinio laukas arba skaitinė reikšmė. Jei šis parametras nustatytas kaip konkreti reikšmė, ta reikšmė bus taikoma visiems stebėtojams. Norėdami kiekvienam stebėtojui nustatyti skirtingas reikšmes, šį parametrą nustatykite kaip lauką duomenų rinkinyje <strong>Observer Features</strong>.",
	"@@Viewshed_Vertical-Upper-Angle_tag0@@": "Ši reikšmė aprašo viršutinio vertikalaus kampo ribą nuskaitymui virš horizontalios plokštumos. Šią reikšmę reikia nurodyti laipsniais nuo 0 iki 90,0. Ji gali būti sveikasis skaičius arba slankusis kablelis. Numatytoji reikšmė yra 90,0.",
	"@@Viewshed_Vertical-Upper-Angle_tag1@@": "Jis gali būti įvesties <strong>Observer Features</strong> duomenų rinkinio laukas arba skaitinė reikšmė. Jei šis parametras nustatytas kaip konkreti reikšmė, ta reikšmė bus taikoma visiems stebėtojams. Norėdami kiekvienam stebėtojui nustatyti skirtingas reikšmes, šį parametrą nustatykite kaip lauką duomenų rinkinyje <strong>Observer Features</strong>.",
	"@@Watershed_Flow-Direction-Raster_tag0@@": "Įvesties rastras, rodantis tėkmės iš kiekvienos gardelės kryptį.",
	"@@Watershed_Flow-Direction-Raster_tag1@@": "Tėkmės krypties rastrą galima sukurti naudojant funkciją <strong>Flow Direction</strong>.",
	"@@Watershed_Pour-Point(s)-Raster_tag0@@": "Įvesties nutekėjimo taškų padėtys.",
	"@@Watershed_Pour-Point(s)-Raster_tag1@@": "Šis rastras reprezentuoja gardeles, virš kurių esantis plotas, arba upių baseinas, bus nustatomas. Kaip šaltinio gardelės bus naudojamos visos, išskyrus gardeles be duomenų.",
	"@@Watershed_Pour-Point-Field_tag0@@": "Laukas, naudojamas priskirti reikšmes nutekėjimo taško padėtims.",
	"@@Watershed_Pour-Point-Field_tag1@@": "Rastro nutekėjimo taško duomenų rinkiniui pagal numatytuosius nustatymus naudojama ${Value}.",
	"@@Weighted-Overlay_Cellsize-Type_tag0@@": "Pasirinkite, koks gardelės dydis bus naudojamas išvesties rastre. Jei visų įvesties gardelių dydžiai vienodi, visos parinktys pateiks vienodus rezultatus.",
	"@@Weighted-Overlay_Cellsize-Type_tag1@@": "Pirmiausia--Naudoti pirmą įvesties rastrų gardelės dydį.",
	"@@Weighted-Overlay_Cellsize-Type_tag2@@": "Mažiausias--Naudoti mažiausią įvesties rastrų gardelės dydį.",
	"@@Weighted-Overlay_Cellsize-Type_tag3@@": "Didžiausias--Naudoti didžiausią įvesties rastrų gardelės dydį. Tai numatytasis nustatymas.",
	"@@Weighted-Overlay_Cellsize-Type_tag4@@": "Vidutinis--Naudoti vidutinį visų įvesties rastrų gardelės dydį.",
	"@@Weighted-Overlay_Cellsize-Type_tag5@@": "Paskiausia--Naudoti paskutinį įvesties rastrų gardelės dydį.",
	"@@Weighted-Overlay_Extent-Type_tag0@@": "Pasirinkite, kokia aprėptis bus naudojama išvesties rastre:",
	"@@Weighted-Overlay_Extent-Type_tag1@@": "Pirmiausia--Naudoti pirmojo įvesties rastro aprėptį nustatant apdorojimo aprėptį.",
	"@@Weighted-Overlay_Extent-Type_tag2@@": "Sankirta--Naudoti persidengiančių pikselių aprėptį nustatant apdorojimo aprėptį. Tai numatytasis nustatymas.",
	"@@Weighted-Overlay_Extent-Type_tag3@@": "Sąjunga--Naudoti visų rastrų aprėptį nustatant apdorojimo aprėptį.",
	"@@Weighted-Overlay_Extent-Type_tag4@@": "Paskiausia--Naudoti paskutinio įvesties rastro aprėptį nustatant apdorojimo aprėptį.",
	"@@Weighted-Overlay_Scales_tag0@@": "Naujų reikšmių, pagal kurias bus iš naujo susietos senos, intervalas.",
	"@@Weighted-Overlay_Weighted-Overlay-Table_tag0@@": "Svorinių perdangų lentelę sudaro keturios dalys:",
	"@@Weighted-Overlay_Weighted-Overlay-Table_tag1@@": "Sluoksnis--visų įvesties rastrų tipas privalo būti sveikasis skaičius.",
	"@@Weighted-Overlay_Weighted-Overlay-Table_tag2@@": "Poveikis--kiekvienas įvesties rastras pasveriamas pagal jo svarbą (poveikį), vertinamą santykine procentine dalimi, Procentinių poveikio svorių suma turi būti lygi 100, o kiekvieną svorį būtina nurodyti sveikaisiais skaičiais.",
	"@@Weighted-Overlay_Weighted-Overlay-Table_tag3@@": "Laukas--sveikojo skaičiaus arba eilutės laukas įvesties rastre, naudojamas sveriant.",
	"@@Weighted-Overlay_Weighted-Overlay-Table_tag4@@": "Susiejimo iš naujo lentelė--kiekvienai įvesties rastro reikšmei priskiriama nauja mastelio reikšmė pagal susiejimo iš naujo lentelę. Mastelio reikšmė gali būti tinkama arba NoData reikšmė.",
	"@@Weighted-Sum_Cellsize-Type_tag0@@": "Pasirinkite, koks gardelės dydis bus naudojamas išvesties rastre. Jei visų įvesties gardelių dydžiai vienodi, visos parinktys pateiks vienodus rezultatus.",
	"@@Weighted-Sum_Cellsize-Type_tag1@@": "Pirmiausia--Naudoti pirmą įvesties rastrų gardelės dydį.",
	"@@Weighted-Sum_Cellsize-Type_tag2@@": "Paskiausia--Naudoti paskutinį įvesties rastrų gardelės dydį.",
	"@@Weighted-Sum_Cellsize-Type_tag3@@": "Didžiausias--Naudoti didžiausią įvesties rastrų gardelės dydį. Tai numatytasis nustatymas.",
	"@@Weighted-Sum_Cellsize-Type_tag4@@": "Vidutinis--Naudoti vidutinį visų įvesties rastrų gardelės dydį.",
	"@@Weighted-Sum_Cellsize-Type_tag5@@": "Mažiausias--Naudoti mažiausią įvesties rastrų gardelės dydį.",
	"@@Weighted-Sum_Extent-Type_tag0@@": "Pasirinkite, kokia aprėptis bus naudojama išvesties rastre:",
	"@@Weighted-Sum_Extent-Type_tag1@@": "Pirmiausia--Naudoti pirmojo įvesties rastro aprėptį, nustatant apdorojimo aprėptį.",
	"@@Weighted-Sum_Extent-Type_tag2@@": "Sankirta--Naudoti persidengiančių pikselių aprėptį, nustatant apdorojimo aprėptį. Tai numatytasis nustatymas.",
	"@@Weighted-Sum_Extent-Type_tag3@@": "Paskiausia--Naudoti paskutinio įvesties rastro aprėptį nustatant apdorojimo aprėptį.",
	"@@Weighted-Sum_Extent-Type_tag4@@": "Sąjunga--Naudoti visų rastrų aprėptį, nustatant apdorojimo aprėptį.",
	"@@Weighted-Sum_Weighted-Sum-Table_tag0@@": "Svorinių sumų lentelę aprašo trys ypatybės.",
	"@@Weighted-Sum_Weighted-Sum-Table_tag1@@": "Sluoksnis--sveriamas rastras.",
	"@@Weighted-Sum_Weighted-Sum-Table_tag2@@": "Laukas--sveriant naudojamas rastro laukas.",
	"@@Weighted-Sum_Weighted-Sum-Table_tag3@@": "Svoris--svorinė reikšmė, iš kurios dauginamas rastras. Tai gali būti bet kokia teigiama arba neigiama dešimtainė reikšmė.",
	"@@Wind-Chill_Temperature-Raster_tag0@@": "Vieno kanalo rastras, kurio pikselių reikšmės reprezentuoja aplinkos oro temperatūrą.",
	"@@Wind-Chill_Temperature-Units_tag0@@": "Su įvesties temperatūros rastru susieti matavimo vienetai. Galimi įvesties vienetai: Celsijaus, Farenheito ir Kelvino laipsniai.",
	"@@Wind-Chill_Wind-Chill-Units_tag0@@": "Su išvesties rastru susieti matavimo vienetai. Galimi išvesties vienetai: Celsijaus, Farenheito ir Kelvino laipsniai.",
	"@@Wind-Chill_Wind-Speed-Raster_tag0@@": "Vieno kanalo rastras, kurio pikselių reikšmės reprezentuoja vėjo greitį.",
	"@@Wind-Chill_Wind-Speed-Units_tag0@@": "Aprašo vėjo greičio rastro matavimo vienetus:",
	"@@Wind-Chill_Wind-Speed-Units_tag1@@": "Mylios per valandą (mylių/val.)",
	"@@Wind-Chill_Wind-Speed-Units_tag2@@": "Kilometrai per valandą (km/h)",
	"@@Wind-Chill_Wind-Speed-Units_tag3@@": "Metrai per sekundę (m/s)",
	"@@Wind-Chill_Wind-Speed-Units_tag4@@": "Pėdos per sekundę (pėd./sek.)",
	"@@Wind-Chill_Wind-Speed-Units_tag5@@": "Mazgai (mz)",
	"@@Zonal-Remap_Background-Value_tag0@@": "Pirminė išvesties rastro pikselių reikšmė prieš juos susiejant iš naujo.",
	"@@Zonal-Remap_Default-Output-Value_tag0@@": "Reikšmė, kuri bus priskiriama pikseliui, kuris neatitinka jokių sąlygų, nustatytų <strong>Zonal Attributes Table</strong>.",
	"@@Zonal-Remap_Default-Output-Value_tag3@@": "Tai taip pat bus išvesties pikselio reikšmė, jei bet kuris iš <strong>Output Value Field Name</strong> parametrų bus paliktas nenurodytas arba atitinkamos zonos ribos išvesties reikšmė liks nenurodyta <strong>Zonal Attributes Table</strong>.",
	"@@Zonal-Remap_Maximum-Value-Field-Name_tag0@@": "Lauko pavadinimas, kuriame yra maksimali reikšmė, kurios nesiekiantis įvesties pikselis susiejamas iš naujo.",
	"@@Zonal-Remap_Maximum-Value-Field-Name_tag1@@": "Jei nenurodyta arba jei lauko reikšmė nulinė, pikselių reikšmės netikrinamos dėl maksimumo sąlygos atitikimo.",
	"@@Zonal-Remap_Minimum-Value-Field-Name_tag0@@": "Lauko pavadinimas, kuriame yra minimali reikšmė, kurią viršijantis įvesties pikselis susiejamas iš naujo.",
	"@@Zonal-Remap_Minimum-Value-Field-Name_tag1@@": "Jei nenurodyta arba jei lauko reikšmė nulinė, pikselių reikšmės netikrinamos dėl minimumo sąlygos atitikimo.",
	"@@Zonal-Remap_Output-Value-Field-Name_tag0@@": "Lauko pavadinimas, kuriame yra tikslinė reikšmė, su kuria iš naujo susiejamas įvesties pikselis.",
	"@@Zonal-Remap_Output-Value-Field-Name_tag1@@": "Jei nenurodyta arba jei lauko reikšmė nulinė, iš naujo susietos pikselių reikšmės nustatomos į <strong>Default Output Value</strong>.",
	"@@Zonal-Remap_Value-Raster_tag0@@": "Būtina vieno kanalo rastro įvestis su pikselių reikšmėmis, kurios bus susiejamos iš naujo.",
	"@@Zonal-Remap_Where-Clause_tag0@@": "Neprivaloma užklausa, taikoma <strong>Zonal Attributes Table</strong>.",
	"@@Zonal-Remap_Where-Clause_tag3@@": "Jei kaip pavyzdį naudotumėte aukščiau pateiktą lentelę, užklausa būtų ${Variable1 = 'bare earth' AND Variable2 = 'California'}.",
	"@@Zonal-Remap_Zonal-Attributes-Table_tag0@@": "Būtina įvesties lentelė su bent trimis laukais. Joje turi būti minimali ribinė reikšmė, maksimali ribinė reikšmė ir dominanti reikšmė. Dominanti reikšmė yra laukas, kuriame bus iš naujo susieta reikšmė.",
	"@@Zonal-Remap_Zonal-Attributes-Table_tag1@@": "Failo formatas gali būti elementų klasė, elementų paslauga ar bet kokio tipo lentelė, palaikoma ArcGIS.",
	"@@Zonal-Remap_Zone-Field_tag0@@": "<strong>Zonal Attributes Table</strong> lauko pavadinimas, kuriame yra zonų ID reikšmės.",
	"@@Zonal-Remap_Zone-Field_tag3@@": "Zonų ID reikšmės tiesiogiai susietos su zonų ID jūsų zonų rastre. Jos suteikia dar vieną filtravimo lygį vykdant susiejimą iš naujo. Jei nėra su konkrečiu lentelės įrašu susieto zonos ID, tas įrašas nebus įtrauktas į susiejimą iš naujo.",
	"@@Zonal-Remap_Zone-Raster_tag0@@": "Vieno kanalo rastras, kuriame kiekvienas pikselis aprašo zonas, susietas su konkrečiomis padėtimis. Zona apibrėžiama kaip visi plotai, turintys tą pačią reikšmę. Plotai neprivalo susisiekti.",
	"@@Predict-Using-Trend_dimensiondefinition_tag0@@": "Nurodo metodą, naudojamą pateikti prognozuojamas matmens reikšmes.",
	"@@Predict-Using-Trend_dimensiondefinition_tag1@@": "<strong>By Value</strong>--Prognozė bus paskaičiuota vienai matmens reikšmei. Pavyzdžiui, jei norite numatyti metinį kritulių kiekį 2050, 2100 ir 2150 metais. Tai numatytasis nustatymas.",
	"@@Predict-Using-Trend_dimensiondefinition_tag2@@": "<strong>By Interval</strong>--Prognozė bus paskaičiuota pagal matmens intervalą, apibrėžtą pradžios ir pabaigos reikšmėmis. Pavyzdžiui, jei norite numatyti metinį kritulių kiekį kasmet tarp 2050 ir 2150 metų.",
	"@@Predict-Using-Trend_end_tag0@@": "Matmens intervalo pabaigos data, aukštis arba gylis, naudojamas prognozei.",
	"@@Predict-Using-Trend_end_tag1@@": "Šis parametras reikalingas, kai parametras <strong>Dimension Definition</strong> nustatytas kaip <strong>By Interval</strong>.",
	"@@Predict-Using-Trend_raster_tag0@@": "Funkcijos <strong>Generate Trend</strong> įvesties daugiamatis tendencijos rastras.",
	"@@Predict-Using-Trend_start_tag0@@": "Matmens intervalo pradžios data, aukštis arba gylis, naudojamas prognozei.",
	"@@Predict-Using-Trend_start_tag1@@": "Šis parametras reikalingas, kai parametras <strong>Dimension Definition</strong> nustatytas kaip <strong>By Interval</strong>.",
	"@@Predict-Using-Trend_unit_tag0@@": "Reikšmės intervalui naudojami matavimo vienetai. Šis parametras taikomas tik tada, kai analizės matmuo yra laiko matmuo.",
	"@@Predict-Using-Trend_unit_tag1@@": "<strong>Hours</strong>--Prognozė bus paskaičiuota kiekvienai laiko intervalo, kurį apibūdina <strong>Start</strong>, <strong>End</strong> ir <strong>Value Interval</strong> parametrai, valandai.",
	"@@Predict-Using-Trend_unit_tag2@@": "<strong>Days</strong>--Prognozė bus paskaičiuota kiekvienai laiko intervalo, kurį apibūdina <strong>Start</strong>, <strong>End</strong> ir <strong>Value Interval</strong> parametrai, dienai.",
	"@@Predict-Using-Trend_unit_tag3@@": "<strong>Weeks</strong>--Prognozė bus paskaičiuota kiekvienai laiko intervalo, kurį apibūdina <strong>Start</strong>, <strong>End</strong> ir <strong>Value Interval</strong> parametrai, savaitei.",
	"@@Predict-Using-Trend_unit_tag4@@": "<strong>Months</strong>--Prognozė bus paskaičiuota kiekvienam laiko intervalo, kurį apibūdina <strong>Start</strong>, <strong>End</strong> ir <strong>Value Interval</strong> parametrai, mėnesiui.",
	"@@Predict-Using-Trend_unit_tag5@@": "<strong>Years</strong>--Prognozė bus paskaičiuota kiekvieniems laiko intervalo, kurį apibūdina <strong>Start</strong>, <strong>End</strong> ir <strong>Value Interval</strong> parametrai, metams.",
	"@@Predict-Using-Trend_valueinterval_tag0@@": "Į prognozę įtrauktinų etapų tarp dviejų matmenų reikšmių skaičius. Numatytoji reikšmė yra 1.",
	"@@Predict-Using-Trend_valueinterval_tag1@@": "Šis parametras reikalingas, kai parametras <strong>Dimension Definition</strong> nustatytas kaip <strong>By Interval</strong>.",
	"@@Predict-Using-Trend_values_tag0@@": "Matmens reikšmė ar reikšmės, naudotinos prognozėje.",
	"@@Predict-Using-Trend_values_tag1@@": "Laiko, gylio ir aukščio reikšmių formatas turi atitikti matmenų reikšmių, naudojamų generuoti tendencijų rastrą, formatą. Jei StdTime matmeniui buvo sukurtas tendencijų rastras, formatas turėtų būti YYYY-MM-DDTHH:MM:SS, pavyzdžiui, 2050-01-01T00:00:00. Kelios reikšmės atskiriamos kabliataškiu.",
	"@@Process-Raster-Collection_aggregationfunction_tag0@@": "Nurodykite rastro funkcijos šabloną, naudojamą agreguoti kelias skiltis į mažesnį skilčių skaičių arba į vieną skiltį.",
	"@@Process-Raster-Collection_dimension_tag0@@": "Agregavimo matmuo. Tai yra matmuo, pagal kurį kintamieji bus agreguojami.",
	"@@Process-Raster-Collection_itemfunction_tag0@@": "Nurodykite rastro funkcijos šabloną, naudojamą apdoroti kiekvieną įvesties rastrų kolekcijos skiltį ar elementą.",
	"@@Process-Raster-Collection_keywordinterval_tag0@@": "Nurodo raktažodžio intervalą, kurį naudojant bus agreguojama pagal matmenį. Šis parametras reikalingas tada, kai <strong>Type</strong> nustatytas kaip <strong>Interval Keyword</strong>, o agregavimas vykdomas pagal laiką.",
	"@@Process-Raster-Collection_keywordinterval_tag1@@": "<strong>Hourly</strong>--Duomenų reikšmės bus agreguojamos į valandinius laiko etapus, o rezultatuose bus pateikiama kiekviena laiko sekos valanda.",
	"@@Process-Raster-Collection_keywordinterval_tag2@@": "<strong>Daily</strong>--Duomenų reikšmės bus agreguojamos į dieninius laiko etapus, o rezultatuose bus pateikiama kiekviena laiko sekos diena.",
	"@@Process-Raster-Collection_keywordinterval_tag3@@": "<strong>Weekly</strong>--Duomenų reikšmės bus agreguojamos į savaitinius laiko etapus, o rezultatuose bus pateikiama kiekviena laiko sekos savaite.",
	"@@Process-Raster-Collection_keywordinterval_tag4@@": "<strong>Dekadly</strong>--Duomenų reikšmės bus agreguojamos į tris laikotarpius po 10 dienų. Paskutinis laikotarpis gali būti ilgesnis arba trumpesnis nei 10 dienų. Išvestyje kiekvienam mėnesiui bus 3 skiltys.",
	"@@Process-Raster-Collection_keywordinterval_tag5@@": "<strong>Pentadly</strong>--Duomenų reikšmės bus agreguojamos į šešis laikotarpius po 5 dienas. Paskutinis laikotarpis gali būti ilgesnis arba trumpesnis nei 5 dienų. Išvestyje kiekvienam mėnesiui bus 6 skiltys.",
	"@@Process-Raster-Collection_keywordinterval_tag6@@": "<strong>Monthly</strong>--Duomenų reikšmės bus agreguojamos į mėnesinius laiko etapus, o rezultatuose bus pateikiamas kiekvienas laiko sekos mėnuo.",
	"@@Process-Raster-Collection_keywordinterval_tag7@@": "<strong>Quarterly</strong>--Duomenų reikšmės bus agreguojamos į ketvirtinius laiko etapus, o rezultatuose bus pateikiamas kiekvienas laiko sekos ketvirtis.",
	"@@Process-Raster-Collection_keywordinterval_tag8@@": "<strong>Yearly</strong>--Duomenų reikšmės bus agreguojamos į metinius laiko etapus, o rezultatuose bus pateikiami kiekvieni laiko sekos metai.",
	"@@Process-Raster-Collection_keywordinterval_tag9@@": "<strong>Recurring daily</strong>--Duomenų reikšmės bus agreguojamos į dieninius laiko etapus, o rezultatuose bus pateikiama viena agreguota reikšmė kiekvienai kalendorinei dienai. Tokia išvestis turės ne daugiau nei 366 dienines laiko skiltis.",
	"@@Process-Raster-Collection_keywordinterval_tag10@@": "<strong>Recurring weekly</strong>--Duomenų reikšmės bus agreguojamos į savaitinius laiko etapus, o rezultatuose bus pateikiama viena agreguota reikšmė kiekvienai savaitei. Tokia išvestis turės ne daugiau nei 53 savaitines laiko skiltis.",
	"@@Process-Raster-Collection_keywordinterval_tag11@@": "<strong>Recurring monthly</strong>--Duomenų reikšmės bus agreguojamos į savaitinius laiko etapus, o rezultatuose bus pateikiama viena agreguota reikšmė kiekvienam kalendoriniam mėnesiui. Tokia išvestis turės ne daugiau nei 12 mėnesio trukmės laiko skilčių.",
	"@@Process-Raster-Collection_keywordinterval_tag12@@": "<strong>Recurring quarterly</strong>--Duomenų reikšmės bus agreguojamos į ketvirtinius laiko etapus, o rezultatuose bus pateikiama viena agreguota reikšmė kiekvienam ketvirčiui. Tokia išvestis turės ne daugiau nei 4 ketvirčių laiko skiltis.",
	"@@Process-Raster-Collection_maximumvalue_tag0@@": "Didžiausia intervalo reikšmė.",
	"@@Process-Raster-Collection_maximumvalue_tag1@@": "Šis parametras reikalingas, kai parametras <strong>Type</strong> nustatytas kaip <strong>Interval Ranges</strong>.",
	"@@Process-Raster-Collection_minimumvalue_tag0@@": "Mažiausia intervalo reikšmė.",
	"@@Process-Raster-Collection_minimumvalue_tag1@@": "Šis parametras reikalingas, kai parametras <strong>Type</strong> nustatytas kaip <strong>Interval Ranges</strong>.",
	"@@Process-Raster-Collection_processingfunction_tag0@@": "Nurodykite rastro funkcijos šabloną, naudojamą parodyti apdorotą rastro sluoksnį.",
	"@@Process-Raster-Collection_rastercollection_tag0@@": "Įvesties daugiamatis rastras, mozaikos sluoksnis arba mozaikos rinkinys.",
	"@@Process-Raster-Collection_type_tag0@@": "Nurodo matmens intervalą, kuriame esantys duomenys bus agreguojami",
	"@@Process-Raster-Collection_type_tag1@@": "<strong>All</strong>--Bus agreguojamos visų skilčių duomenų reikšmės. Tai numatytasis nustatymas.",
	"@@Process-Raster-Collection_type_tag2@@": "strong>Interval Keyword</strong>--Kintamojo duomenys bus agreguojami naudojant vieną iš įprastinių intervalų.",
	"@@Process-Raster-Collection_type_tag3@@": "<strong>Interval Ranges</strong>--Kintamojo duomenys bus agreguojami, jei patenka tarp nurodytų reikšmių arba datų porų.",
	"@@Process-Raster-Collection_type_tag4@@": "<strong>Interval Values</strong>--Kintamojo duomenys bus agreguojami naudojant naudotojo nurodytą intervalą ir matavimo vienetus.",
	"@@Process-Raster-Collection_unit_tag0@@": "Intervalo reikšmei naudojami matavimo vienetai. Šis parametras reikalingas, kai <strong>Dimension</strong> yra laiko laukas, o parametras <strong>Type</strong> nustatytas kaip <strong>Interval Value</strong>.",
	"@@Process-Raster-Collection_unit_tag1@@": "Jei agreguojate pagal kitą kintamąjį nei laikas, ši parinktis nebus galima, o intervalo reikšmės matavimo vienetai bus tokie patys, kaip įvesties daugiamačių rastrinių duomenų kintamojo matavimo vienetai.",
	"@@Process-Raster-Collection_unit_tag2@@": "<strong>Hours</strong>--Nurodytame intervale duomenų reikšmės bus agreguojamos į valandos trukmės laiko skiltis.",
	"@@Process-Raster-Collection_unit_tag3@@": "<strong>Days</strong>--Nurodytame intervale duomenų reikšmės bus agreguojamos į dienos trukmės laiko skiltis.",
	"@@Process-Raster-Collection_unit_tag4@@": "<strong>Weeks</strong>--Nurodytame intervale duomenų reikšmės bus agreguojamos į savaitines laiko skiltis.",
	"@@Process-Raster-Collection_unit_tag5@@": "<strong>Months</strong>--Nurodytame intervale duomenų reikšmės bus agreguojamos į mėnesio trukmės laiko skiltis.",
	"@@Process-Raster-Collection_unit_tag6@@": "<strong>Years</strong>--Nurodytame intervale duomenų reikšmės bus agreguojamos į metų trukmės laiko skiltis.",
	"@@Process-Raster-Collection_valueinterval_tag0@@": "Intervalo, kuris bus naudojamas agregavimui, dydis. Šis parametras reikalingas, kai parametras <strong>Type</strong> nustatytas kaip <strong>Interval Value</strong>.",
	"@@Process-Raster-Collection_valueinterval_tag1@@": "Pavyzdžiui, norėdami agreguoti 30 metų mėnesio temperatūrų duomenis į 5 metų atkarpas, įveskite 5 kaip <strong>Value Interval</strong>, o <strong>Unit</strong> nurodykite kaip <strong>Years</strong>.",
	"@@Linear-Spectral-Unmixing_non-negative_tag0@@": "Nurodo parinktis, apibrėžiančias išvesties pikselių reikšmes.",
	"@@Linear-Spectral-Unmixing_non-negative_tag1@@": "Pažymėta--Neigiamų išvesties reikšmių nebus.",
	"@@Linear-Spectral-Unmixing_non-negative_tag2@@": "Nepažymėta--Trupmeninės žemės dangos reikšmės gali būti neigiamos.",
	"@@Linear-Spectral-Unmixing_raster_tag0@@": "Įvesties rastras.",
	"@@Linear-Spectral-Unmixing_spectralprofile_tag0@@": "Įvesties spektrinio profilio failas.",
	"@@Linear-Spectral-Unmixing_spectralprofiletype_tag0@@": "Skirtingos žemės dangos klasės spektrinė informacija.",
	"@@Linear-Spectral-Unmixing_spectralprofiletype_tag1@@": "<strong>Spectral Profile</strong>--Klasifikatoriaus aprašo failas (${.ecd}), sukurtas naudojantis <strong><strong>Train Maximum Likelihood Classifier</strong></strong> įrankiu, arba  JavaScript objekto žymėjimo failas (${.json}), kuriame yra klasių spektriniai profiliai.",
	"@@Linear-Spectral-Unmixing_spectralprofiletype_tag2@@": "<strong>Training Feature</strong>--Daugiakampiai elementai arba mokymų pavyzdžių elementų klasė, gaunami iš <strong>Training Samples Manager</strong>.",
	"@@Linear-Spectral-Unmixing_sumtoone_tag0@@": "Nurodo parinktis, apibrėžiančias išvesties pikselių reikšmes.",
	"@@Linear-Spectral-Unmixing_sumtoone_tag1@@": "Pažymėta--Kiekvieno pikselio klasės reikšmės pateikiamos dešimtainiu formatu, o visa klasių suma lygi 1. Pavyzdžiui, Klasė1 = 0,16; Klasė2 = 0,24; Klasė3 = 0,60.",
	"@@Linear-Spectral-Unmixing_sumtoone_tag2@@": "Nepažymėta--Pikselio klasių suma gali būti daugiau nei 1.",
	"@@Linear-Spectral-Unmixing_trainingfeature_tag0@@": "Įvesties mokymų savybių failas.",
	"@@Aggregate_aggregationtechnique_tag0@@": "Agregavimui naudojamas metodas. Įvesties gardelių, apsuptų mažesnės raiškos išvesties gardelių, reikšmės agreguojamos pagal vieną iš šių statistinių rodiklių:",
	"@@Aggregate_aggregationtechnique_tag1@@": "<strong>Sum</strong>--Įvesties gardelių suma. Tai numatytasis nustatymas.",
	"@@Aggregate_aggregationtechnique_tag2@@": "<strong>Maximum</strong>--Didžiausia įvesties gardelių reikšmė.",
	"@@Aggregate_aggregationtechnique_tag3@@": "<strong>Mean Of</strong>--Vidutinė įvesties gardelių reikšmė.",
	"@@Aggregate_aggregationtechnique_tag4@@": "<strong>Median</strong>--Įvesties gardelių medianos reikšmė.",
	"@@Aggregate_aggregationtechnique_tag5@@": "<strong>Minimum</strong>--Mažiausia įvesties gardelių reikšmė.",
	"@@Aggregate_cellfactor_tag0@@": "Įvesties rastro gardelės dydžio dauginimo koeficientas.",
	"@@Aggregate_cellfactor_tag1@@": "Pavyzdžiui, jei gardelės koeficiento reikšmė yra trys, išvesties gardelė bus tris kartus didesnė už įvesties rastro gardelę.",
	"@@Aggregate_expandextentifneeded_tag0@@": "Apibrėžia, kaip tvarkyti įvesties rastro ribas, kai jo eilutės ar stulpeliai nėra gardelės faktoriaus daugiklis.",
	"@@Aggregate_expandextentifneeded_tag1@@": "Pažymėta--Išplečia įvesties rastro viršutinę arba dešiniąją ribas, kad bendras gardelių skaičius eilutėje ar stulpelyje atitiktų gardelės koeficientą. Pasirinkus šią parinktį, išvesties rastro erdvinė aprėptis didesnė nei įvesties rastro. Tai numatytasis nustatymas.",
	"@@Aggregate_expandextentifneeded_tag2@@": "Nepažymėta--Sumažina išvesties rastro eilučių ir stulpelių skaičių. Likusios gardelės viršutinėje arba dešinėje įvesties rastro ribose bus apkarpytos, o įvesties rastro eilučių ar stulpelių skaičius padaugintas iš gardelės koeficiento. Pasirinkus šią parinktį, išvesties rastro erdvinė aprėptis mažesnė nei įvesties rastro.",
	"@@Aggregate_ignorenodataincalculations_tag0@@": "Nurodo, ar agregavimo skaičiavimas ignoruoja reikšmes ${NoData}.",
	"@@Aggregate_ignorenodataincalculations_tag1@@": "Pažymėta--Nurodo, kad jei ${NoData} reikšmės yra bet kurioje iš gardelių, patenkančių į išvesties rastro didesnės gardelės erdvinę aprėptį, ${NoData} reikšmės bus ignoruojamos nustatant išvesties gardelės vietų reikšmę. Nustatant išvesties gardelės reikšmę bus naudojamos tik įvesties gardelės, patenkančios į išvesties gardelės aprėptį ir turinčios duomenų reikšmes. Tai numatytasis nustatymas.",
	"@@Aggregate_ignorenodataincalculations_tag2@@": "Nepažymėta--Nurodo, kad jei kuri nors gardelė, patenkanti į išvesties rastro didesnės gardelės erdvinę aprėptį, turi ${NoData} reikšmę, tos išvesties gardelės vietos reikšmė bus lygi ${NoData}. Naudojant šią parinktį, numanoma, kad jei agregavimo gardelių reikšmė yra ${NoData}, nepakanka informacijos atlikti nurodytus skaičiavimus, būtinus apskaičiuojant išvesties reikšmę.",
	"@@Aggregate_raster_tag0@@": "Įvesties rastras, kuris bus agreguojamas.",
	"@@Expand_numberofcells_tag0@@": "Gardelių skaičius, kuriuo jos bus išplėstos.",
	"@@Expand_numberofcells_tag1@@": "Reikšmė turi būti sveikasis skaičius ir gali būti 1 ar daugiau.",
	"@@Expand_raster_tag0@@": "Įvesties rastras, kurio nustatytas zonas norima išplėsti.",
	"@@Expand_raster_tag1@@": "Jis turi būti sveikojo skaičiaus tipo.",
	"@@Expand_zonevalues_tag0@@": "Išplečiamų zonų sąrašas.",
	"@@Expand_zonevalues_tag1@@": "Zonų reikšmės turi būti sveikasis skaičius, jos gali būti pateiktos bet kokiu eiliškumu.",
	"@@Expand_zonevalues_tag2@@": "Norėdami nurodyti kelias zonas, naudokite tarpą atskirti zonų reikšmes.",
	"@@Multidimensional-Filter_dimension_tag0@@": "Matmuo, iš kurio ištraukiami kintamieji.",
	"@@Multidimensional-Filter_dimensiondefinition_tag0@@": "Nurodo metodą, kurį naudojant matmuo bus dalinamas į skiltis.",
	"@@Multidimensional-Filter_dimensiondefinition_tag1@@": "<strong>All</strong>--Bus naudojamas visas kiekvieno matmens intervalas. Tai numatytasis nustatymas.",
	"@@Multidimensional-Filter_dimensiondefinition_tag2@@": "<strong>By Values</strong>--Matmuo bus dalinamas į skiltis naudojant matmens reikšmę ar reikšmių sąrašą.",
	"@@Multidimensional-Filter_dimensiondefinition_tag3@@": "<strong>By Values</strong>--Matmuo bus dalinamas į skiltis naudojant intervalą ar intervalų sąrašą.",
	"@@Multidimensional-Filter_dimensiondefinition_tag4@@": "<strong>By Iteration</strong>--Matmuo bus dalinamas į skiltis pagal nurodytą intervalo dydį.",
	"@@Multidimensional-Filter_endoffirstiteration_tag0@@": "Pirmojo intervalo pabaiga. Šis intervalas naudojamas iteracijai per duomenų rinkinį. Šis parametras reikalingas, kai parametras <strong>Dimension Definition</strong> nustatytas kaip <strong>By Iteration</strong>.",
	"@@Multidimensional-Filter_maximumvalue_tag0@@": "Didžiausia intervalo reikšmė. Šis parametras reikalingas, kai parametras <strong>Dimension Definition</strong> nustatytas kaip <strong>By Ranges</strong>.",
	"@@Multidimensional-Filter_minimumvalue_tag0@@": "Mažiausia intervalo reikšmė. Šis parametras reikalingas, kai parametras <strong>Dimension Definition</strong> nustatytas kaip <strong>By Ranges</strong>.",
	"@@Multidimensional-Filter_raster_tag0@@": "Įvesties daugiamatis rastras.",
	"@@Multidimensional-Filter_ranges_tag0@@": "<p>Intervalai, nurodyti lentelėje, naudojami reikšmių grupėms agreguoti. Minimali ir maksimali reikšmės nurodo įtraukiamą intervalą.</p><p>Šis parametras reikalingas, kai parametras <strong>Tipas</strong> nustatytas kaip<strong>Intervalo ribos</strong>.</p>",
	"@@Multidimensional-Filter_startoffirstiteration_tag0@@": "Pirmojo intervalo pradžia. Šis intervalas naudojamas iteracijai per duomenų rinkinį. Šis parametras reikalingas, kai parametras <strong>Dimension Definition</strong> nustatytas kaip <strong>By Iteration</strong>.",
	"@@Multidimensional-Filter_step_tag0@@": "Duomenų dalinimo į skiltis dažnis. Šis parametras reikalingas, kai parametras <strong>Dimension Definition</strong> nustatytas kaip <strong>By Iteration</strong>. Numatytoji reikšmė yra 3.",
	"@@Multidimensional-Filter_unit_tag0@@": "Nurodo iteracijos vienetą. Šis parametras reikalingas, kai parametras <strong>Dimension Definition</strong> yra nustatytas kaip <strong>By Iteration</strong>, o parametras <strong>Dimension</strong> nustatytas kaip <strong>StdTime</strong>.",
	"@@Multidimensional-Filter_value_tag0@@": "Nurodyto matmens reikšmė. Šis parametras reikalingas, kai parametras <strong>Dimension Definition</strong> nustatytas kaip <strong>By Values</strong>.",
	"@@Multidimensional-Filter_variables_tag0@@": "Kintamieji, kurie bus įtraukiami į išvesties daugiamatį rastrinį sluoksnį. Jei nenurodytas joks kintamasis, bus naudojamas pirmasis kintamasis.",
	"@@Multidimensional-Filter_dimensionless_tag0@@": "Nurodo, ar sluoksnyje turėtų būti matmenų reikšmės. Ši parinktis galima tik tada, kai sluoksnis kuriamas iš vienos parinktos skilties.",
	"@@Multidimensional-Filter_dimensionless_tag1@@": "Pažymėta--sluoksnyje nebus matmenų reikšmių.",
	"@@Multidimensional-Filter_dimensionless_tag2@@": "Nepažymėta--sluoksnyje bus matmenų reikšmės. Tai numatytasis nustatymas.",
	"@@Multidimensional-Raster_interpolationcellsize_tag0@@": "Interpoliuoto rastro gardelės dydis. Numatytoji reikšmė yra ${1}.",
	"@@Multidimensional-Raster_interpolationmethod_tag0@@": "Atitikties atrankos metodas, naudojamas interpoliuojant netaisyklingus duomenis.",
	"@@Multidimensional-Raster_interpolationmethod_tag1@@": "<strong>Nearest Neighbor</strong>--Skaičiuoja išvesties pikselio reikšmę naudodamas artimiausią įvesties pikselį. Jei nėra šaltinio pikselio, išvestyje negalima sukurti naujo pikselio. Tai numatytasis nustatymas.",
	"@@Multidimensional-Raster_interpolationmethod_tag2@@": "<strong>Linear Tinning</strong>--Interpoliuojamam paviršiui konvertuoti į įprastą rastrą, naudoja trianguliuotą netaisyklingą tinklą, kurį sudaro kiekvieno netaisyklingo rastro pikselio centro taškas.",
	"@@Multidimensional-Raster_interpolationmethod_tag3@@": "<strong>Natural Neighbor</strong>--Randa artimiausią užklausos taškui įvesties pavyzdžių poaibį ir jiems pritaiko svorius, atsižvelgdamas į proporcingas teritorijas interpoliuojamai reikšmei.",
	"@@Multidimensional-Raster_interpolationmethod_tag4@@": "<strong>IInverse Distance Weighting</strong>--Nustato pikselių reikšmes naudojant linijiniu būdu pasvertą pavyzdžio taškų arba pikselių rinkinio derinį. Svoris yra atvirkščiai proporcingo atstumo nuo žinomų taškų ar pikselių funkcija.",
	"@@Multidimensional-Raster_raster_tag0@@": "Įvesties daugiamatis rastras.",
	"@@Multidimensional-Raster_variables_tag0@@": "Kintamieji, kurie bus įtraukiami į išvesties daugiamatį rastrinį sluoksnį.",
	"@@Random_distribution_tag0@@": "Nurodykite naudotiną atsitiktinio reikšmių paskirstymo metodą.",
	"@@Random_distribution_tag1@@": "<strong>Uniform</strong> (Minimali, Maksimali)--Vienodas pasiskirstymas su nustatytu intervalu. Numatytosios reikšmės yra 0 (Minimali) ir 1 (Maksimali). Tai numatytasis nustatymas.",
	"@@Random_distribution_tag2@@": "<strong>Uniform</strong> (Minimali, Maksimali)--Pasiskirstymas sveikaisiais skaičiais su nustatytu intervalu. Numatytosios reikšmės yra 1 (Minimali) ir 10 (Maksimali).",
	"@@Random_distribution_tag3@@": "<strong>Normal</strong> (Vidurkis, Standartinis nuokrypis)--Normalus pasiskirstymas su nustatytu vidurkiu ir standartiniu nuokrypiu. Numatytosios reikšmės yra 0 (Vidurkis) ir 1 (Standartinis nuokrypis).",
	"@@Random_distribution_tag4@@": "<strong>Exponential</strong> (Vidurkis)--Eksponentinis pasiskirstymas su nustatytu vidurkiu. Numatytoji reikšmė yra 1.",
	"@@Random_distribution_tag5@@": "<strong>Poisson</strong> (Vidurkis)--Poisson pasiskirstymas su nustatytu vidurkiu. Numatytoji reikšmė yra 1.",
	"@@Random_distribution_tag6@@": "<strong>Gamma</strong> (Alfa, Beta)--Gama pasiskirstymas su nustatytomis alfa ir beta reikšmėmis. Numatytosios reikšmės yra 1 (Alfa) ir 1 (Beta).",
	"@@Random_distribution_tag7@@": "<strong>Binomial</strong> (N, Tikimybė)--Binominis pasiskirstymas su nustatytu N ir tikimybe. Numatytosios reikšmės yra 10 (N) ir 0,5 (Tikimybė).",
	"@@Random_distribution_tag8@@": "<strong>Geometric</strong> (Tikimybė)--Geometrinis pasiskirstymas su nustatyta tikimybe. Numatytoji reikšmė yra 0,5.",
	"@@Random_distribution_tag9@@": "<strong>Negative Binomial</strong> (r, Tikimybė)--Pascal pasiskirstymas su nustatytu r ir tikimybe. Numatytosios reikšmės yra 10,0 (r) ir 0,5 (Tikimybė).",
	"@@Random_randomnumbergenerator_tag0@@": "Nurodykite atsitiktinio generatoriaus algoritmą, kuris sudaro atsitiktinių skaičių seką naudojantis pradiniu tašku ir pasiskirstymu. Galimos parinktys:",
	"@@Random_randomnumbergenerator_tag1@@": "Standartinis C Rand",
	"@@Random_randomnumbergenerator_tag2@@": "ACM surinktas algoritmas 599",
	"@@Random_randomnumbergenerator_tag3@@": "Mersenne Twister",
	"@@Random_randomnumbergenerator_tag4@@": "Numatytoji reikšmė yra Mersenne Twister.",
	"@@Random_rasterinfo_tag0@@": "Naudokite mygtuką <strong>Load template raster</strong>, jei norite įkelti šabloną iš katalogo arba portalo.",
	"@@Random_seed_tag0@@": "Pradinis taškas yra sveikasis skaičius, kuris naudojamas aktyvuoti atsitiktinį skaičių generatorių. Numatytoji reikšmė yra 1.",
	"@@Shrink_numberofcells_tag0@@": "Gardelių skaičius, kuriuo bus sumažinta kiekviena nurodyta zona.",
	"@@Shrink_numberofcells_tag1@@": "Reikšmė turi būti sveikasis skaičius ir gali būti 1 ar daugiau.",
	"@@Shrink_raster_tag0@@": "Įvesties rastras, kurio nustatytas zonas norima sumažinti.",
	"@@Shrink_raster_tag1@@": "Jis turi būti sveikojo skaičiaus tipo.",
	"@@Shrink_zonevalues_tag0@@": "Mažinamų zonų sąrašas.",
	"@@Shrink_zonevalues_tag1@@": "Zonų reikšmės turi būti sveikasis skaičius, jos gali būti pateiktos bet kokiu eiliškumu.",
	"@@Shrink_zonevalues_tag2@@": "Norėdami nurodyti kelias zonas, naudokite tarpą atskirti zonų reikšmes.",
	"@@Distance-Accumulation_costraster_tag0@@": "Įvesties rastras, apibrėžiantis planimetriško judėjimo per kiekvieną gardelę sąnaudas arba trukdžius. Kiekvienos gardelės padėties reikšmė atspindi sąnaudos vienetui atstumą judant per gardelę. Kiekvienos gardelės padėties reikšmė dauginama iš gardelės skiriamosios gebos, kompensuojant už judėjimą įstrižai, ir gaunama bendrųjų sąnaudų kertant gardelę suma.",
	"@@Distance-Accumulation_costraster_tag1@@": "<strong>Cost Raster</strong> reikšmės gali būti sveikieji skaičiai arba skaičiai su slankiuoju kableliu, tačiau ne neigiamos ir ne nulinės reikšmės.",
	"@@Distance-Accumulation_distancemethod_tag0@@": "Apibrėžia, ar apskaičiuoti atstumą naudojant plokštuminį (plokščios žemės) ar geodezinį (elipsoido) metodą.",
	"@@Distance-Accumulation_distancemethod_tag1@@": "Plokštuminis--Plokštuminiai matavimai ilgiui ir plotui skaičiuoti naudoja dvimatę Dekarto matematiką. Ši parinktis galima tik matuojant projekcinėje koordinačių sistemoje, ir tik jei tos koordinačių sistemos dvimatė plokštuma bus naudojama kaip matavimų pagrindas.",
	"@@Distance-Accumulation_distancemethod_tag2@@": "Geodezinis--Trumpiausia linija tarp dviejų taškų ant Žemės paviršiaus sferoide (elipsoide). Todėl, nepaisant įvesties ar išvesties projekcijos, rezultatai nepasikeis.",
	"@@Distance-Accumulation_distancemethod_tag3@@": "<strong>Note:</strong> vienas galimas geodezinės linijos panaudojimas: jei norite nustatyti trumpiausią atstumą tarp dviejų miestų lėktuvo skrydžio maršrutui. Tai dar vadinama didžiojo apskritimo linija, jei vietoj elipsoido naudojama sfera.",
	"@@Distance-Accumulation_generatebackdirectionbandasadditionalbandinoutput_tag0@@": "Nustato, ar sukuriamas tik atstumo kaupimo rastras, ar daugiakanalis rastras, susidedantis ir iš atstumo kaupimo rastro, ir iš atgalinės krypties rastro.",
	"@@Distance-Accumulation_generatebackdirectionbandasadditionalbandinoutput_tag1@@": "Nepažymėta--Rezultatas yra atstumo kaupimo rastras. Tai vienakanalis rezultatas. Tai numatytasis nustatymas.",
	"@@Distance-Accumulation_generatebackdirectionbandasadditionalbandinoutput_tag2@@": "Pažymėta--Sukuriamas daugiakanalis rastras. Pirmasis kanalas yra atstumo kaupimo rastras, o antrasis kanalas yra atgalinės krypties rastras.",
	"@@Distance-Accumulation_generatebackdirectionbandasadditionalbandinoutput_tag3@@": "Atgalinės krypties rastras apskaičiuoja kiekvienos gardelės kryptį laipsniais iki kaimyninės gardelės trumpiausiu keliu atgal iki artimiausio šaltinio, išvengiant kliūčių.",
	"@@Distance-Accumulation_horizontalfactor_tag0@@": "<p>Aprašo ryšį tarp horizontalaus sąnaudų veiksnio ir horizontalaus santykinio judančio kampo (HRMA).</p><p>Yra keli veiksniai su modifikatoriais, kurie identifikuoja apibrėžtą vertikalaus veiksnio grafiką. Taip pat galite naudodami lentelę sukurti adaptuotą grafiką. Grafikai naudojami identifikuoti vertikalų veiksnį, kuris naudojamas skaičiuojant bendrąsias keliavimo į kaimyninę gardelę išlaidas.</p><p>Toliau pateikiamuose paaiškinimuose naudojami du akronimai: HF ir HRMA. HF žymi horizontalų veiksnį, kuris apibrėžia horizontalų sunkumą, su kuriuos susiduriama judant iš vienos gardelės į kitą. HRMA žymi horizontalųjį santykinį judantį kampą, kuris identifikuoja kampą tarp gardelės horizontalios krypties ir judėjimo krypties.</p><p><strong>Horizontalių veiksnių</strong> tipai yra tokie:</p><ul><li><strong>Dvejetainis</strong> – nurodo, kad jei HRMA yra mažesnis nei pjūvio kampas, HF nustatomas į su nuliniu veiksniu susijusią reikšmę; kitu atveju jis yra begalybė.</li><li><strong>Pirmyn</strong> – nurodo, kad leidžiama judėti tik pirmyn. HRMA turi būti didesnis nei arba lygus 0 ir mažesnis nei arba lygus 90 laipsnių (0 <= HRMA < 90). Jei HRMA didesnis nei 0 ir mažesnis nei 45 laipsniai, gardelės HF nustatomas į su nuliniu veiksniu susijusią reikšmę. Jei HRMA didesnis arba lygus nei 45 laipsniai, naudojama šoninė reikšmės modifikatoriaus reikšmė. Bet kokiai 90 laipsnių lygiai ar didesnei HRMA reikšmei nustatomas begalybei lygus HF.</li><li><strong>Tiesinis</strong> – nurodo, kad HF yra tiesinė HRMA funkcija.</li><li><strong>Atvirkštinis tiesinis</strong> – nurodo, kad HF yra atvirkščiai proporcinga tiesinė HRMA funkcija.</li><li><strong>Lentelė</strong> – nurodo, kad horizontalaus veiksnio grafikui, pagal kurį nustatomi HF, apibrėžti naudojamas lentelės failas.</li></ul><p>Horizontalių veiksnių modifikatoriai apima:</p><ul><li><strong>Nulinis veiksnys</strong> – horizontalus veiksnys, naudojamas kai HRMA lygu nuliui. Šis veiksnys bet kokioms horizontalaus veiksnio funkcijoms nustato y susikirtimo padėtį.</li><li><strong>Pjūvio kampas</strong> – apibrėžia HRMA kampą, kurį viršijus HF bus nustatytas kaip begalybė.</li><li><strong>Pasvirimas</strong> – nustato tiesios linijos pasvirimą, kuris bus naudojamas naudojamas su horizontalaus veiksnio raktažodžiais <strong>Tiesinis</strong> ir <strong>Atvirkštinis tiesinis</strong>. Pasvirimas nurodomas kaip pakilimo dalis per važiavimą (pavyzdžiui, 45 procentų pasvirimas yra 1/45 ir įvedamas kaip 0,02222).</li><li><strong>Šoninė reikšmė</strong> – nustato HF, kai HRMA didesnis už arba lygus 45 laipsniams ir mažesnis nei 90 laipsnių, nurodžius horizontalaus veiksnio raktažodį <strong>Pirmyn</strong>.</li><li><strong>Lentelės pavadinimas</strong> – identifikuoja HF aprašančios lentelės pavadinimą.</li></ul>",
	"@@Distance-Accumulation_horizontalraster_tag0@@": "Rastras, aprašantis kiekvienos gardelės horizontalią kryptį.",
	"@@Distance-Accumulation_horizontalraster_tag1@@": "Rastre esančios reikšmės turi būti tarp 0 ir 360, kur 0 laipsnių atitinka šiaurę arba ekrano viršų ir laipsniai didėja pagal laikrodžio rodyklę. Plokščioms teritorijoms reikia priskirti reikšmę -1. Kiekvienos padėties reikšmės bus naudojamos su <strong>Horizontal factor</strong>, siekiant nustatyti horizontalias išlaidas, patirtas judant iš gardelės į kaimynines.",
	"@@Distance-Accumulation_initialaccumulation_tag0@@": "Pradinės suminės išlaidos, norint pradėti skaičiuoti išlaidas. Šis parametras leidžia nurodyti fiksuotą su šaltiniu susijusią kainą. Užuot pradėjęs nuo 0 lygios kainos, išlaidų skaičiavimo algoritmas pradės nuo nurodytos reikšmės.",
	"@@Distance-Accumulation_initialaccumulation_tag1@@": "Šiam parametrui gali būti naudojama skaitinė (dviguba) reikšmė arba <strong>Source Raster</strong> laukas.",
	"@@Distance-Accumulation_initialaccumulation_tag2@@": "Reikšmė turi būti lygi nuliui arba didesnė. Numatytoji reikšmė yra 0.",
	"@@Distance-Accumulation_maximumaccumulation_tag0@@": "Šaltiniui apibrėžia maksimalias keliautojo sumines sąnaudas. Išlaidų skaičiavimai tęsiami kiekvienam šaltiniui, kol pasiekiama nurodyta apimtis.",
	"@@Distance-Accumulation_maximumaccumulation_tag1@@": "Šiam parametrui gali būti naudojama skaitinė (dviguba) reikšmė arba <strong>Source Raster</strong> laukas.",
	"@@Distance-Accumulation_maximumaccumulation_tag2@@": "Reikšmė turi būti didesnė už nulį. Numatytoji apimtis yra matuojama iki išvesties rastro briaunos.",
	"@@Distance-Accumulation_multipliertoapplytocosts_tag0@@": "Daugiklis, taikytinas sąnaudų vertėms.",
	"@@Distance-Accumulation_multipliertoapplytocosts_tag1@@": "Šis parametras leidžia šaltinyje valdyti kelionės modelį arba stiprumą. Kuo daugiklis didesnis, tuo didesnės išlaidos keliauti per kiekvieną gardelę.",
	"@@Distance-Accumulation_multipliertoapplytocosts_tag2@@": "Šiam parametrui gali būti naudojama skaitinė (dviguba) reikšmė arba <strong>Source Raster</strong> laukas.",
	"@@Distance-Accumulation_multipliertoapplytocosts_tag3@@": "Reikšmės turi būti didesnės už nulį. Numatytoji reikšmė yra 1.",
	"@@Distance-Accumulation_rasterbarriers_tag0@@": "Rastras, apibrėžiantis kliūtis.",
	"@@Distance-Accumulation_rasterbarriers_tag1@@": "Kur nėra kliūčių, duomenų rinkinyje turi būti NoData. Kliūtims nurodomos galiojančios vertės, įskaitant nulį.",
	"@@Distance-Accumulation_rasterbarriers_tag2@@": "Kliūtis gali apibrėžti sveikasis skaičius arba slankiojo kablelio rastras.",
	"@@Distance-Accumulation_sourceraster_tag0@@": "Įvesties šaltinio vietos.",
	"@@Distance-Accumulation_sourceraster_tag1@@": "Tai yra rastro duomenų rinkinys, kuris identifikuoja gardeles ar padėtis, iš kurių skaičiuojamas mažiausias suminis sąnaudų atstumas kiekvienai išvesties gardelės padėčiai.",
	"@@Distance-Accumulation_sourceraster_tag2@@": "Tai gali būti sveikasis skaičius arba slankiojo kablelio tipo.",
	"@@Distance-Accumulation_surfaceraster_tag0@@": "Rastras, aprašantis kiekvienos gardelės padėties aukščio reikšmę.",
	"@@Distance-Accumulation_surfaceraster_tag1@@": "Šios reikšmės naudojamos skaičiuojant faktinį paviršiaus atstumą, kuris įveikiamas keliaujant tarp gardelių.",
	"@@Distance-Accumulation_traveldirection_tag0@@": "Apibrėžia keliautojo kryptį taikant vertikalų veiksnį, horizontalų veiksnį ir šaltinio pasipriešinimo koeficientą.",
	"@@Distance-Accumulation_traveldirection_tag1@@": "<strong>From Source</strong>--Vertikalus veiksnys, horizontalus veiksnys ir šaltinio pasipriešinimo koeficientas bus taikomi ties įvesties šaltiniu ir iškeliaujant į šaltiniui nepriklausančias gardeles. Tai numatytasis nustatymas.",
	"@@Distance-Accumulation_traveldirection_tag2@@": "<strong>To Source</strong>--Vertikalus veiksnys, horizontalus veiksnys ir šaltinio pasipriešinimo koeficientas bus taikomi ties kiekviena šaltiniui nepriklausančia gardele ir grįžtant į įvesties šaltinį.",
	"@@Distance-Accumulation_traveldirection_tag3@@": "Nurodykite raktažodį <strong>From Source</strong> arba <strong>To Source</strong>, kuris bus taikomas visiems šaltiniams, arba nurodykite <strong>Source Raster</strong> lauką, kuriame yra raktažodžiai, leidžiantys kiekvienam šaltiniui identifikuoti kelionės kryptį. Tame lauke turi būti eilutė ${FROM_SOURCE} arba ${TO_SOURCE}.",
	"@@Distance-Accumulation_verticalfactor_tag0@@": "<p>Aprašo ryšį tarp vertikalaus sąnaudų veiksnio ir vertikalaus santykinio judančio kampo (VRMA).</p><p>Yra keli veiksniai su modifikatoriais, kurie identifikuoja apibrėžtą vertikalaus veiksnio grafiką. Taip pat galite naudodami lentelę sukurti adaptuotą grafiką. Grafikai naudojami identifikuoti vertikalų veiksnį, kuris naudojamas skaičiuojant bendrąsias keliavimo į kaimyninę gardelę išlaidas.</p><p>Toliau pateikiamuose paaiškinimuose naudojami du akronimai: VF ir VRMA. VF žymi vertikalų veiksnį, kuris apibrėžia vertikalų sunkumą, su kuriuos susiduriama judant iš vienos gardelės į kitą. VRMA žymi vertikalų santykinį judantį kampą, kurios identifikuoja pasvirimo kampą tarp IŠ (apdorojimo), gardelės ir Į gardelę.</p><p><strong>Vertikalaus veiksnio</strong> tipai gali būti:</p><ul><li><strong>Dvejetainis</strong> – nurodo, kad jei VRMA yra didesnis nei apatinis pjūvio kampas ir mažesnis nei viršutinis pjūvio kampas, VF nustatomas į su nuliniu veiksniu susijusią reikšmę; kitu atveju jis yra begalybė.</li><li><strong>Tiesinis</strong> – nurodo, kad VF yra tiesinė VRMA funkcija.</li><li><strong>Simetrinis tiesinis</strong> – nurodo, kad VF yra tiesinė VRMA funkcija atitinkamai neigiamoje arba teigiamoje VRMA pusėje ir šios dvi tiesinės funkcijos yra simetriškos VF (y) ašies atžvilgiu.</li><li><strong>Atvirkštinis tiesinis</strong> – nurodo, kad VF yra atvirkščiai proporcinga tiesinė VRMA funkcija.</li><li><strong>Simetrinis atvirkštinis tiesinis</strong> – nurodo, kad VF yra atvirkščiai proporcinga tiesinė VRMA funkcija atitinkamai neigiamoje arba teigiamoje VRMA pusėje, ir kad šios dvi tiesinės funkcijos yra simetriškos VF (y) ašies atžvilgiu.</li><li><strong>Kosinusinis</strong> – identifikuoja VF kaip kosinusinę VRMA funkciją.</li><li><strong>Kirstinis</strong> – identifikuoja VF kaip kirstinę VRMA funkciją.</li><li><strong>Kosinusinis-kirstinis</strong> – nurodo, kad VF yra kosinusinė VRMA funkcija, kai VRMA yra neigiamas, ir kirstinė VRMA funkcija, kai šis kampas nėra neigiamas.</li><li><strong>Kirstinis-kosinusinis</strong> – nurodo, kad VF yra kirstinė VRMA funkcija, kai VRMA yra neigiamas, ir kosinusinė VRMA funkcija, kai šis kampas nėra neigiamas.</li><li><strong>Lentelė</strong> – nurodo, kad vertikalaus veiksnio grafikui, pagal kurį nustatomi VF, apibrėžti naudojamas lentelės failas.</li></ul><p>Vertikalių raktažodžių modifikatoriai apima:</p><ul><li><strong>Nulinis veiksnys</strong> – nustato vertikalų veiksnį, kuris naudojamas, kai VRMA lygus nuliui. Šis veiksnys nurodytai funkcijai nustato y susikirtimo padėtį. Pagal apibrėžimą nulinis veiksnys netaikomas jokioms trigonometrinėms vertikalioms funkcijoms (COS, SEC, COS-SEC ir SEC-COS). Šios funkcijos apibrėžia y susikirtimą.</li><li><strong>Apatinio pjūvio kampas</strong> – apibrėžia VRMA kampą, žemiau kurio VF bus nustatytas kaip begalybė.</li><li><strong>Viršutinis pjūvio kampas</strong> – apibrėžia VRMA kampą, virš kurio VF bus nustatytas kaip begalybė.</li><li><strong>Pasvirimas</strong> – nustato tiesios linijos pasvirimą, naudojamą su vertikalaus veiksnio raktažodžiais <strong>Tiesinis</strong> ir <strong>Atvirkštinis tiesinis</strong>. Pasvirimas nurodomas kaip pakilimo dalis per važiavimą (pavyzdžiui, 45 procentų pasvirimas yra 1/45 ir įvedamas kaip 0,02222).</li><li><strong>Lentelės pavadinimas</strong> – identifikuoja VF aprašančios lentelės pavadinimą.</li></ul>",
	"@@Distance-Accumulation_verticalraster_tag0@@": "Aprašo ryšį tarp vertikalaus sąnaudų veiksnio ir vertikalaus santykinio judančio kampo (VRMA).",
	"@@Distance-Accumulation_verticalraster_tag1@@": "Šios reikšmės naudojamos skaičiuojant pasvirimą, kuris naudojamas identifikuojant vertikalų veiksnį, patiriamą judant iš vienos gardelės į kitą.",
	"@@Distance-Allocation_costraster_tag0@@": "Įvesties rastras, apibrėžiantis planimetriško judėjimo per kiekvieną gardelę sąnaudas arba trukdžius. Kiekvienos gardelės padėties reikšmė atspindi sąnaudos vienetui atstumą judant per gardelę. Kiekvienos gardelės padėties reikšmė dauginama iš gardelės skiriamosios gebos, kompensuojant už judėjimą įstrižai, ir gaunama bendrųjų sąnaudų kertant gardelę suma.",
	"@@Distance-Allocation_costraster_tag1@@": "<strong>Cost Raster</strong> reikšmės gali būti sveikieji skaičiai arba skaičiai su slankiuoju kableliu, tačiau ne neigiamos ir ne nulinės reikšmės.",
	"@@Distance-Allocation_distancemethod_tag0@@": "Apibrėžia, ar apskaičiuoti atstumą naudojant plokštuminį (plokščios žemės) ar geodezinį (elipsoido) metodą.",
	"@@Distance-Allocation_distancemethod_tag1@@": "Plokštuminis--Plokštuminiai matavimai ilgiui ir plotui skaičiuoti naudoja dvimatę Dekarto matematiką. Ši parinktis galima tik matuojant projekcinėje koordinačių sistemoje, ir tik jei tos koordinačių sistemos dvimatė plokštuma bus naudojama kaip matavimų pagrindas.",
	"@@Distance-Allocation_distancemethod_tag2@@": "Geodezinis--Trumpiausia linija tarp dviejų taškų ant Žemės paviršiaus sferoide (elipsoide). Todėl, nepaisant įvesties ar išvesties projekcijos, rezultatai nepasikeis.",
	"@@Distance-Allocation_distancemethod_tag3@@": "<strong>Note:</strong> vienas galimas geodezinės linijos panaudojimas: jei norite nustatyti trumpiausią atstumą tarp dviejų miestų lėktuvo skrydžio maršrutui. Tai dar vadinama didžiojo apskritimo linija, jei vietoj elipsoido naudojama sfera.",
	"@@Distance-Allocation_horizontalfactor_tag0@@": "<p>Aprašo ryšį tarp horizontalaus sąnaudų veiksnio ir horizontalaus santykinio judančio kampo (HRMA).</p><p>Yra keli veiksniai su modifikatoriais, kurie identifikuoja apibrėžtą vertikalaus veiksnio grafiką. Taip pat galite naudodami lentelę sukurti adaptuotą grafiką. Grafikai naudojami identifikuoti vertikalų veiksnį, kuris naudojamas skaičiuojant bendrąsias keliavimo į kaimyninę gardelę išlaidas.</p><p>Toliau pateikiamuose paaiškinimuose naudojami du akronimai: HF ir HRMA. HF žymi horizontalų veiksnį, kuris apibrėžia horizontalų sunkumą, su kuriuos susiduriama judant iš vienos gardelės į kitą. HRMA žymi horizontalųjį santykinį judantį kampą, kuris identifikuoja kampą tarp gardelės horizontalios krypties ir judėjimo krypties.</p><p><strong>Horizontalių veiksnių</strong> tipai yra tokie:</p><ul><li><strong>Dvejetainis</strong> – nurodo, kad jei HRMA yra mažesnis nei pjūvio kampas, HF nustatomas į su nuliniu veiksniu susijusią reikšmę; kitu atveju jis yra begalybė.</li><li><strong>Pirmyn</strong> – nurodo, kad leidžiama judėti tik pirmyn. HRMA turi būti didesnis nei arba lygus 0 ir mažesnis nei arba lygus 90 laipsnių (0 <= HRMA < 90). Jei HRMA didesnis nei 0 ir mažesnis nei 45 laipsniai, gardelės HF nustatomas į su nuliniu veiksniu susijusią reikšmę. Jei HRMA didesnis arba lygus nei 45 laipsniai, naudojama šoninė reikšmės modifikatoriaus reikšmė. Bet kokiai 90 laipsnių lygiai ar didesnei HRMA reikšmei nustatomas begalybei lygus HF.</li><li><strong>Tiesinis</strong> – nurodo, kad HF yra tiesinė HRMA funkcija.</li><li><strong>Atvirkštinis tiesinis</strong> – nurodo, kad HF yra atvirkščiai proporcinga tiesinė HRMA funkcija.</li><li><strong>Lentelė</strong> – nurodo, kad horizontalaus veiksnio grafikui, pagal kurį nustatomi HF, apibrėžti naudojamas lentelės failas.</li></ul><p>Horizontalių veiksnių modifikatoriai apima:</p><ul><li><strong>Nulinis veiksnys</strong> – horizontalus veiksnys, naudojamas kai HRMA lygu nuliui. Šis veiksnys bet kokioms horizontalaus veiksnio funkcijoms nustato y susikirtimo padėtį.</li><li><strong>Pjūvio kampas</strong> – apibrėžia HRMA kampą, kurį viršijus HF bus nustatytas kaip begalybė.</li><li><strong>Pasvirimas</strong> – nustato tiesios linijos pasvirimą, kuris bus naudojamas naudojamas su horizontalaus veiksnio raktažodžiais <strong>Tiesinis</strong> ir <strong>Atvirkštinis tiesinis</strong>. Pasvirimas nurodomas kaip pakilimo dalis per važiavimą (pavyzdžiui, 45 procentų pasvirimas yra 1/45 ir įvedamas kaip 0,02222).</li><li><strong>Šoninė reikšmė</strong> – nustato HF, kai HRMA didesnis už arba lygus 45 laipsniams ir mažesnis nei 90 laipsnių, nurodžius horizontalaus veiksnio raktažodį <strong>Pirmyn</strong>.</li><li><strong>Lentelės pavadinimas</strong> – identifikuoja HF aprašančios lentelės pavadinimą.</li></ul>",
	"@@Distance-Allocation_horizontalraster_tag0@@": "Rastras, aprašantis kiekvienos gardelės horizontalią kryptį.",
	"@@Distance-Allocation_horizontalraster_tag1@@": "Rastre esančios reikšmės turi būti tarp 0 ir 360, kur 0 laipsnių atitinka šiaurę arba ekrano viršų ir laipsniai didėja pagal laikrodžio rodyklę. Plokščioms teritorijoms reikia priskirti reikšmę -1. Kiekvienos padėties reikšmės bus naudojamos su <strong>Horizontal factor</strong>, siekiant nustatyti horizontalias išlaidas, patirtas judant iš gardelės į kaimynines.",
	"@@Distance-Allocation_initialaccumulation_tag0@@": "Pradinės suminės išlaidos, norint pradėti skaičiuoti išlaidas. Šis parametras leidžia nurodyti fiksuotą su šaltiniu susijusią kainą. Užuot pradėjęs nuo 0 lygios kainos, išlaidų skaičiavimo algoritmas pradės nuo nurodytos reikšmės.",
	"@@Distance-Allocation_initialaccumulation_tag1@@": "Šiam parametrui gali būti naudojama skaitinė (dviguba) reikšmė arba <strong>Source Raster</strong> laukas.",
	"@@Distance-Allocation_initialaccumulation_tag2@@": "Reikšmė turi būti lygi nuliui arba didesnė. Numatytoji reikšmė yra 0.",
	"@@Distance-Allocation_maximumaccumulation_tag0@@": "Šaltiniui apibrėžia maksimalias keliautojo sumines išlaidas. Išlaidų skaičiavimai tęsiami kiekvienam šaltiniui, kol pasiekiama nurodyta apimtis.",
	"@@Distance-Allocation_maximumaccumulation_tag1@@": "Šiam parametrui gali būti naudojama skaitinė (dviguba) reikšmė arba <strong>Source Raster</strong> laukas.",
	"@@Distance-Allocation_maximumaccumulation_tag2@@": "Reikšmė turi būti didesnė už nulį. Numatytoji apimtis yra matuojama iki išvesties rastro briaunos.",
	"@@Distance-Allocation_multipliertoapplytocosts_tag0@@": "Daugiklis, taikytinas sąnaudų vertėms.",
	"@@Distance-Allocation_multipliertoapplytocosts_tag1@@": "Šis parametras leidžia šaltinyje valdyti kelionės modelį arba stiprumą. Kuo daugiklis didesnis, tuo didesnės išlaidos keliauti per kiekvieną gardelę.",
	"@@Distance-Allocation_multipliertoapplytocosts_tag2@@": "Reikšmės turi būti didesnės už nulį. Numatytoji reikšmė yra 1.",
	"@@Distance-Allocation_multipliertoapplytocosts_tag3@@": "Šiam parametrui gali būti naudojama skaitinė (dviguba) reikšmė arba <strong>Source Raster</strong> laukas.",
	"@@Distance-Allocation_rasterbarriers_tag0@@": "Rastras, apibrėžiantis kliūtis.",
	"@@Distance-Allocation_rasterbarriers_tag1@@": "Kur nėra kliūčių, duomenų rinkinyje turi būti NoData. Kliūtims nurodomos galiojančios vertės, įskaitant nulį.",
	"@@Distance-Allocation_rasterbarriers_tag2@@": "Kliūtis gali apibrėžti sveikasis skaičius arba slankiojo kablelio rastras.",
	"@@Distance-Allocation_sourcefield_tag0@@": "Laukas, naudojamas priskirti reikšmes šaltinio padėtims. Jis turi būti sveikojo skaičiaus tipo.",
	"@@Distance-Allocation_sourceraster_tag0@@": "Įvesties šaltinio vietos.",
	"@@Distance-Allocation_sourceraster_tag1@@": "Tai yra rastro duomenų rinkinys, kuris identifikuoja gardeles ar padėtis, iš kurių skaičiuojamas mažiausias suminis sąnaudų atstumas kiekvienai išvesties gardelės padėčiai.",
	"@@Distance-Allocation_sourcerowandcolumnbands_tag0@@": "Nustato, ar sukuriamas tik priskyrimo rastras, ar sukuriamas daugiakanalis rezultatas.",
	"@@Distance-Allocation_sourcerowandcolumnbands_tag1@@": "Nepažymėta--Rezultatas yra atstumo priskyrimo rastras. Tai vienakanalis rezultatas. Tai numatytasis nustatymas.",
	"@@Distance-Allocation_sourcerowandcolumnbands_tag2@@": "Pažymėta--Sukuriamas daugiakanalis rastras. Pirmasis kanalas yra atstumo priskyrimo rastras, antrajame kanale yra eilutės indeksas, o trečiajame kanale – stulpelio indeksas. Šie indeksai identifikuoja šaltinio gardelės vietą, kuri nutolusi per mažiausiai suminių sąnaudų.",
	"@@Distance-Allocation_surfaceraster_tag0@@": "Rastras, aprašantis kiekvienos gardelės padėties aukščio reikšmę.",
	"@@Distance-Allocation_surfaceraster_tag1@@": "Šios reikšmės naudojamos skaičiuojant faktinį paviršiaus atstumą, kuris įveikiamas keliaujant tarp gardelių.",
	"@@Distance-Allocation_traveldirection_tag0@@": "Apibrėžia keliautojo kryptį taikant vertikalų veiksnį, horizontalų veiksnį ir šaltinio pasipriešinimo koeficientą.",
	"@@Distance-Allocation_traveldirection_tag1@@": "<strong>From Source</strong>--Vertikalus veiksnys, horizontalus veiksnys ir šaltinio pasipriešinimo koeficientas bus taikomi ties įvesties šaltiniu ir iškeliaujant į šaltiniui nepriklausančias gardeles. Tai numatytasis nustatymas.",
	"@@Distance-Allocation_traveldirection_tag2@@": "<strong>To Source</strong>--Vertikalus veiksnys, horizontalus veiksnys ir šaltinio pasipriešinimo koeficientas bus taikomi ties kiekviena šaltiniui nepriklausančia gardele ir grįžtant į įvesties šaltinį.",
	"@@Distance-Allocation_traveldirection_tag3@@": "Nurodykite raktažodį <strong>From Source</strong> arba <strong>To Source</strong>, kuris bus taikomas visiems šaltiniams, arba nurodykite <strong>Source Raster</strong> lauką, kuriame yra raktažodžiai, leidžiantys kiekvienam šaltiniui identifikuoti kelionės kryptį. Tame lauke turi būti eilutė ${FROM_SOURCE} arba ${TO_SOURCE}.",
	"@@Distance-Allocation_verticalfactor_tag0@@": "<p>Aprašo ryšį tarp vertikalaus sąnaudų veiksnio ir vertikalaus santykinio judančio kampo (VRMA).</p><p>Yra keli veiksniai su modifikatoriais, kurie identifikuoja apibrėžtą vertikalaus veiksnio grafiką. Taip pat galite naudodami lentelę sukurti adaptuotą grafiką. Grafikai naudojami identifikuoti vertikalų veiksnį, kuris naudojamas skaičiuojant bendrąsias keliavimo į kaimyninę gardelę išlaidas.</p><p>Toliau pateikiamuose paaiškinimuose naudojami du akronimai: VF ir VRMA. VF žymi vertikalų veiksnį, kuris apibrėžia vertikalų sunkumą, su kuriuos susiduriama judant iš vienos gardelės į kitą. VRMA žymi vertikalų santykinį judantį kampą, kurios identifikuoja pasvirimo kampą tarp IŠ (apdorojimo), gardelės ir Į gardelę.</p><p><strong>Vertikalaus veiksnio</strong> tipai gali būti:</p><ul><li><strong>Dvejetainis</strong> – nurodo, kad jei VRMA yra didesnis nei apatinis pjūvio kampas ir mažesnis nei viršutinis pjūvio kampas, VF nustatomas į su nuliniu veiksniu susijusią reikšmę; kitu atveju jis yra begalybė.</li><li><strong>Tiesinis</strong> – nurodo, kad VF yra tiesinė VRMA funkcija.</li><li><strong>Simetrinis tiesinis</strong> – nurodo, kad VF yra tiesinė VRMA funkcija atitinkamai neigiamoje arba teigiamoje VRMA pusėje ir šios dvi tiesinės funkcijos yra simetriškos VF (y) ašies atžvilgiu.</li><li><strong>Atvirkštinis tiesinis</strong> – nurodo, kad VF yra atvirkščiai proporcinga tiesinė VRMA funkcija.</li><li><strong>Simetrinis atvirkštinis tiesinis</strong> – nurodo, kad VF yra atvirkščiai proporcinga tiesinė VRMA funkcija atitinkamai neigiamoje arba teigiamoje VRMA pusėje, ir kad šios dvi tiesinės funkcijos yra simetriškos VF (y) ašies atžvilgiu.</li><li><strong>Kosinusinis</strong> – identifikuoja VF kaip kosinusinę VRMA funkciją.</li><li><strong>Kirstinis</strong> – identifikuoja VF kaip kirstinę VRMA funkciją.</li><li><strong>Kosinusinis-kirstinis</strong> – nurodo, kad VF yra kosinusinė VRMA funkcija, kai VRMA yra neigiamas, ir kirstinė VRMA funkcija, kai šis kampas nėra neigiamas.</li><li><strong>Kirstinis-kosinusinis</strong> – nurodo, kad VF yra kirstinė VRMA funkcija, kai VRMA yra neigiamas, ir kosinusinė VRMA funkcija, kai šis kampas nėra neigiamas.</li><li><strong>Lentelė</strong> – nurodo, kad vertikalaus veiksnio grafikui, pagal kurį nustatomi VF, apibrėžti naudojamas lentelės failas.</li></ul><p>Vertikalių raktažodžių modifikatoriai apima:</p><ul><li><strong>Nulinis veiksnys</strong> – nustato vertikalų veiksnį, kuris naudojamas, kai VRMA lygus nuliui. Šis veiksnys nurodytai funkcijai nustato y susikirtimo padėtį. Pagal apibrėžimą nulinis veiksnys netaikomas jokioms trigonometrinėms vertikalioms funkcijoms (COS, SEC, COS-SEC ir SEC-COS). Šios funkcijos apibrėžia y susikirtimą.</li><li><strong>Apatinio pjūvio kampas</strong> – apibrėžia VRMA kampą, žemiau kurio VF bus nustatytas kaip begalybė.</li><li><strong>Viršutinis pjūvio kampas</strong> – apibrėžia VRMA kampą, virš kurio VF bus nustatytas kaip begalybė.</li><li><strong>Pasvirimas</strong> – nustato tiesios linijos pasvirimą, naudojamą su vertikalaus veiksnio raktažodžiais <strong>Tiesinis</strong> ir <strong>Atvirkštinis tiesinis</strong>. Pasvirimas nurodomas kaip pakilimo dalis per važiavimą (pavyzdžiui, 45 procentų pasvirimas yra 1/45 ir įvedamas kaip 0,02222).</li><li><strong>Lentelės pavadinimas</strong> – identifikuoja VF aprašančios lentelės pavadinimą.</li></ul>",
	"@@Distance-Allocation_verticalraster_tag0@@": "Aprašo ryšį tarp vertikalaus sąnaudų veiksnio ir vertikalaus santykinio judančio kampo (VRMA).",
	"@@Distance-Allocation_verticalraster_tag1@@": "Šios reikšmės naudojamos skaičiuojant pasvirimą, kuris naudojamas identifikuojant vertikalų veiksnį, patiriamą judant iš vienos gardelės į kitą.",
	"@@Euclidean-Back-Direction_cellsize_tag0@@": "Gardelės dydis, ties kuriuo bus kuriamas išvesties rastras.",
	"@@Euclidean-Back-Direction_cellsize_tag1@@": "Jei <strong>Environments</strong> gardelės dydis aiškiai nurodytas, jis ir bus numatytasis gardelės dydis. Jei jis nenustatytas, išvesties gardelės dydis bus toks pat kaip <strong>Source Raster</strong>.",
	"@@Euclidean-Back-Direction_distancemethod_tag0@@": "Apibrėžia, ar apskaičiuoti atstumą naudojant plokštuminį (plokščios žemės) ar geodezinį (elipsoido) metodą.",
	"@@Euclidean-Back-Direction_distancemethod_tag1@@": "Plokštuminis--Plokštuminiai matavimai ilgiui ir plotui skaičiuoti naudoja dvimatę Dekarto matematiką. Ši parinktis galima tik matuojant projekcinėje koordinačių sistemoje, ir tik jei tos koordinačių sistemos dvimatė plokštuma bus naudojama kaip matavimų pagrindas.",
	"@@Euclidean-Back-Direction_distancemethod_tag2@@": "Geodezinis--Trumpiausia linija tarp dviejų taškų ant Žemės paviršiaus sferoide (elipsoide). Todėl, nepaisant įvesties ar išvesties projekcijos, rezultatai nepasikeis.",
	"@@Euclidean-Back-Direction_distancemethod_tag3@@": "<strong>Note:</strong> vienas galimas geodezinės linijos panaudojimas: jei norite nustatyti trumpiausią atstumą tarp dviejų miestų lėktuvo skrydžio maršrutui. Tai dar vadinama didžiojo apskritimo linija, jei vietoj elipsoido naudojama sfera.",
	"@@Euclidean-Back-Direction_maximumdistance_tag0@@": "Apibrėžia ribinį atstumą, kurio neviršijant skaičiuojama kryptis artimiausio šaltinio link. Jei atstumas iki artimiausio šaltinio viršija šią reikšmę, tos gardelės išvestis bus NoData.",
	"@@Euclidean-Back-Direction_maximumdistance_tag1@@": "Numatytasis atstumas yra matuojamas iki išvesties rastro aprėpties.",
	"@@Euclidean-Back-Direction_rasterbarriers_tag0@@": "Rastras, apibrėžiantis kliūtis.",
	"@@Euclidean-Back-Direction_rasterbarriers_tag1@@": "Kur nėra kliūčių, duomenų rinkinyje turi būti NoData. Kliūtims nurodomos galiojančios vertės, įskaitant nulį.",
	"@@Euclidean-Back-Direction_rasterbarriers_tag2@@": "Kliūtis gali apibrėžti sveikasis skaičius arba slankiojo kablelio rastras.",
	"@@Euclidean-Back-Direction_sourceraster_tag0@@": "Įvesties rastro duomenų rinkinys, kuris identifikuoja gardeles ar padėtis, iki kurių skaičiuojama Euklido kryptis kiekvienai išvesties gardelės padėčiai.",
	"@@Euclidean-Back-Direction_sourceraster_tag1@@": "Įvesties tipas gali būti sveikojo skaičiaus arba slankiojo kablelio tipo.",
	"@@Cost-Path_costbacklinkraster_tag0@@": "Sąnaudų grąžinimo rastrinio sluoksnio, naudojamo nustatyti kelią grįžimui į šaltinį mažiausių sąnaudų maršrutu, pavadinimas.",
	"@@Cost-Path_costbacklinkraster_tag1@@": "Kiekvienai gardelei grįžtamojo rastro reikšmė identifikuoja kaimynę, kuri yra kita gardelė, mažiausių suminių sąnaudų maršrute iš gardelės į atskirą šaltinio gardelę arba šaltinio gardelių rinkinį.",
	"@@Cost-Path_costdistanceraster_tag0@@": "Sąnaudų atstumo rastro, naudojamo nustatyti ekonomiškiausią kelią iš paskirties vietų į šaltinį, pavadinimas.",
	"@@Cost-Path_costdistanceraster_tag1@@": "Sąnaudų atstumo rastras paprastai sukuriamas naudojant Sąnaudų atstumo, Sąnaudų priskyrimo arba Sąnaudų grąžinimo funkciją. Sąnaudų atstumo rastro sluoksnis kiekvienai gardelei saugo minimalų suminį sąnaudų atstumą sąnaudų paviršiaus vienetui iš kiekvienos gardelės į šaltinio gardelių rinkinį.",
	"@@Cost-Path_destinationfield_tag0@@": "Laukas, naudojamas gauti paskirties vietų reikšmes. Įvesties elementų duomenyse turi būti bent vienas tinkamas laukas.",
	"@@Cost-Path_destinationraster_tag0@@": "Įvesties rastro duomenų rinkinio sluoksnis, identifikuojantis gardeles, iš kurių nustatytas ekonomiškiausias kelias iki pigiausio šaltinio.",
	"@@Cost-Path_destinationraster_tag1@@": "Įvesties rastrą sudaro nulines reikšmes (nulis yra tinkama reikšmė) turinčios gardelės, o likusios gardelės turi būti pažymėtos kaip NoData.",
	"@@Cost-Path_forceflowdirectionconventionforbacklinkraster_tag0@@": "Priverčia funkciją traktuoti įvesties grįžtamąjį rastrą kaip tėkmės krypties rastrą. Tėkmės krypties rastrų reikšmės gali būti sveikieji skaičiai nuo 0 iki 255.",
	"@@Cost-Path_forceflowdirectionconventionforbacklinkraster_tag1@@": "Nepažymėta--Jei nurodyto grįžtamojo rastro reikšmės yra sveikieji skaičiai nuo 0 iki 8, duomenų rinkinys bus traktuojamas kaip sąnaudų grąžinimo rastras. Jei reikšmės yra nuo 0 iki 255, įvestis bus traktuojama kaip tėkmės krypties rastras. Jei slankiojo kablelio tipo reikšmės yra nuo 0 iki 360, įvestis bus traktuojama kaip atgalinės krypties rastras.",
	"@@Cost-Path_forceflowdirectionconventionforbacklinkraster_tag2@@": "Pažymėta--Grįžtamajam rastrui pateiktas rastras bus traktuojamas kaip tėkmės krypties rastras. Naudokite šią parinktį, kai tėkmės krypties rastro didžiausia reikšmė yra 8 ar mažiau.",
	"@@Cost-Path_pathtype_tag0@@": "Raktažodis, nustatantis būdą, pagal kurį skaičiuojant maršrutų kainas bus interpretuojamos įvesties paskirties vietų duomenų reikšmės ir zonos. Galimos parinktys:",
	"@@Cost-Path_pathtype_tag1@@": "<strong>Each Cell</strong>--Kiekvienai gardelei su tinkamomis reikšmėmis įvesties paskirties vietos duomenyse ekonomiškiausias kelias nustatomas ir įrašomas išvesties rastre. Naudojant šią parinktį, kiekviena įvesties paskirties vietos duomenų gardelė apdorojama atskirai ir kiekvienai iš jų nustatomas mažiausių sąnaudų maršrutas.",
	"@@Cost-Path_pathtype_tag2@@": "<strong>Each Zone</strong>--Kiekvienai zonai įvesties paskirties vietos duomenyse nustatomas ir išvesties rastre įrašomas mažiausių sąnaudų maršrutas. Naudojant šią parinktį, kiekvienai zonai skirtas mažiausios kainos maršrutas prasideda gardelėje su mažiausių sąnaudų atstumo svoriu zonoje.",
	"@@Cost-Path_pathtype_tag3@@": "<strong>Best Single</strong>--Visoms gardelėms įvesties paskirties vietų duomenyse ekonomiškiausias kelias apskaičiuojamas iš gardelės, turinčios mažiausiai ekonomiškiausių kelių į šaltinio gardeles.",
	"@@Cell-Statistics_cellsizetype_tag0@@": "Pasirinkite, koks gardelės dydis bus naudojamas išvesties rastre. Jei visų įvesties gardelių dydžiai vienodi, visos parinktys pateiks vienodus rezultatus.",
	"@@Cell-Statistics_cellsizetype_tag1@@": "Pirmiausia--Naudoti pirmą įvesties rastrų gardelės dydį.",
	"@@Cell-Statistics_cellsizetype_tag2@@": "Mažiausias--Naudoti mažiausią įvesties rastrų gardelės dydį.",
	"@@Cell-Statistics_cellsizetype_tag3@@": "Didžiausias--Naudoti didžiausią įvesties rastrų gardelės dydį. Tai numatytasis nustatymas.",
	"@@Cell-Statistics_cellsizetype_tag4@@": "Vidutinis--Naudoti vidutinį visų įvesties rastrų gardelės dydį.",
	"@@Cell-Statistics_cellsizetype_tag5@@": "Paskiausia--Naudoti paskutinį įvesties rastrų gardelės dydį.",
	"@@Cell-Statistics_extenttype_tag0@@": "Pasirinkite, kokia aprėptis bus naudojama išvesties rastre:",
	"@@Cell-Statistics_extenttype_tag1@@": "Pirmiausia--Naudoti pirmojo įvesties rastro aprėptį, nustatant apdorojimo aprėptį.",
	"@@Cell-Statistics_extenttype_tag2@@": "Sankirta--Naudoti persidengiančių pikselių aprėptį, nustatant apdorojimo aprėptį. Tai numatytasis nustatymas.",
	"@@Cell-Statistics_extenttype_tag3@@": "Sąjunga--Naudoti visų rastrų aprėptį, nustatant apdorojimo aprėptį.",
	"@@Cell-Statistics_extenttype_tag4@@": "Paskiausia--Naudoti paskutinio įvesties rastro aprėptį nustatant apdorojimo aprėptį.",
	"@@Cell-Statistics_processasmultiband_tag0@@": "Nustato, kaip apdorojami įvesties rastro kanalai.",
	"@@Cell-Statistics_processasmultiband_tag1@@": "Nepažymėta--Visos daugiakanalės įvestys bus apdorojamos kaip vienakanalės. Tai numatytasis nustatymas.",
	"@@Cell-Statistics_processasmultiband_tag2@@": "Pažymėta--Visos daugiakanalės įvestys bus apdorojamos kaip daugiakanalės.",
	"@@Cell-Statistics_rasters_tag0@@": "Sąrašas rastrų, kurių kiekvienam pikseliui reikia apskaičiuoti statistiką.",
	"@@Cell-Statistics_percentileinterpolationtype_tag0@@": "<p>Nurodo, koks interpoliacijos metodas bus naudojamas, kai nurodyta procentinė reikšmė patenka tarp dviejų įvesties gardelių reikšmių.</p><ul><li><strong>Automatinis nustatymas</strong> – jei įvesties rastrų tipas yra sveikųjų skaičių pikselių, naudojamas metodas <strong>Artimiausias</strong>. Jei įvesties rastras yra slankiojo kablelio pikselių tipo, naudojamas metodas <strong>Tiesinis</strong>. Tai yra numatytasis nustatymas.</li><li><strong>Artimiausias</strong>– naudojama artimiausia pageidaujamai procentinei daliai reikšmė, kuri yra pasiekiama. Šiuo atveju išvesties pikselio tipas yra toks pat, kaip įvesties reikšmių rastrų.</li><li><strong>Tiesinis</strong> – naudojamas dviejų pageidaujamą procentinę dalį supančių reikšmių svertinis vidurkis. Šiuo atveju išvesties pikselio tipas bus slankiojo kablelio.</li></ul><p>Ši parinktis pasiekiama tik tada, kai tipo parametras <strong>Operacija</strong> nustatytas kaip <strong>Mediana</strong> arba <strong>Procentinė dalis</strong>.</p>",
	"@@Cell-Statistics_percentilevalue_tag0@@": "<p>Apskaičiuotina procentinė dalis. Numatytoji reikšmė yra 90 ir nurodo 90-ąją procentinę dalį.</p><p>Tinkami reikšmių intervalai yra nuo 0 iki 100. 0-inė procentinė dalis iš esmės atitinka Minimumo statistiką, o 100 procentų ekvivalentas yra Maksimumas. 50 lygi reikšmė iš esmės pateiks analogiškus rezultatus kaip ir Medianos statistika.</p><p>Ši parinktis pasiekiama tik tada, kai parametras <strong>Operacija</strong> nustatytas kaip <strong>Procentinė dalis</strong>.</p>",
	"@@Optimal-Path-As-Raster_backdirectionrasterorflowdirectionraster_tag0@@": "Atgalinės krypties rastre yra laipsniais paskaičiuotų krypčių. Kryptis nurodo gardelę, esančią šalia optimalaus kelio atgal į mažiausių sukauptų sąnaudų šaltinį, išvengiant kliūčių.",
	"@@Optimal-Path-As-Raster_backdirectionrasterorflowdirectionraster_tag1@@": "Reikšmių diapazonas yra nuo 0 laipsnių iki 360 laipsnių, pasiliekant 0 šaltinio gardelėms. Rytų kryptis (dešinėn) yra 90 ir didėja pagal laikrodžio rodyklę (180 yra pietūs, 270 yra vakarai, o 360 yra šiaurė).",
	"@@Optimal-Path-As-Raster_destinationfield_tag0@@": "Laukas, naudojamas gauti paskirties vietų reikšmes.",
	"@@Optimal-Path-As-Raster_destinationraster_tag0@@": "Įvesties rastro duomenų rinkinio sluoksnis, identifikuojantis gardeles, iš kurių nustatytas optimalus kelias iki pigiausio šaltinio. Ši įvestis privaloma.",
	"@@Optimal-Path-As-Raster_destinationraster_tag1@@": "Įvesties rastrą sudaro nulines reikšmes (nulis yra tinkama reikšmė) turinčios gardelės, o likusios gardelės turi būti pažymėtos kaip NoData.",
	"@@Optimal-Path-As-Raster_distanceaccumulationraster_tag0@@": "Sukaupto atstumo rastras naudojamas nustatant optimalų kelią iš tikslų į šaltinius. Sukaupto atstumo rastras paprastai kuriamas naudojant funkciją <strong>Distance Accumulation</strong>. Kiekviena sukaupto atstumo rastro gardelė rodo mažiausią suminį sąnaudų atstumą paviršiaus vienetui iš kiekvienos gardelės į šaltinio gardelių rinkinį.",
	"@@Optimal-Path-As-Raster_pathtype_tag0@@": "Nustato raktažodį, apibrėžiantį būdą, pagal kurį skaičiuojant maršrutų sąnaudas bus interpretuojamos įvesties paskirties vietų duomenų reikšmės.",
	"@@Optimal-Path-As-Raster_pathtype_tag1@@": "<strong>Each Zone</strong>--Kiekvienai zonai įvesties paskirties vietos duomenyse nustatomas ir išvesties rastre įrašomas mažiausių sąnaudų maršrutas. Naudojant šią parinktį, kiekvienos zonos optimalus maršrutas prasideda gardelėje su mažiausių sąnaudų atstumo svoriu zonoje.",
	"@@Optimal-Path-As-Raster_pathtype_tag2@@": "<strong>Best Single</strong>--Visoms gardelėms įvesties paskirties vietų duomenyse optimalus kelias apskaičiuojamas iš gardelės, turinčios mažiausiai ekonomiškiausių kelių į šaltinio gardeles.",
	"@@Optimal-Path-As-Raster_pathtype_tag3@@": "<strong>Each Cell</strong>--Kiekvienai gardelei su tinkamomis reikšmėmis įvesties paskirties vietos duomenyse nustatomas optimalus kelias. Naudojant šią parinktį, kiekviena įvesties paskirties vietos duomenų gardelė apdorojama atskirai ir kiekvienai iš jų nustatomas optimalus maršrutas.",
	"@@CCDC-Analysis_bandsfordetectingchange_tag0@@": "Kanalo ID, naudojami aptinkant pokyčius. Jei kanalo ID nepateikti, bus naudojami visi įvesties rastro duomenų rinkinio kanalai.",
	"@@CCDC-Analysis_bandsfordetectingchange_tag1@@": "ID reikšmės turi būti sveikieji skaičiai, atskirti tarpais.",
	"@@CCDC-Analysis_bandsfortemporalmasking_tag0@@": "Žaliojo kanalo ir SWIR kanalo ID, naudojami maskuoti debesis, debesų šešėlius ir sniegą. Nepateikus kanalo ID, maskavimas nebus vykdomas.",
	"@@CCDC-Analysis_bandsfortemporalmasking_tag1@@": "ID reikšmės turi būti sveikieji skaičiai, atskirti tarpais.",
	"@@CCDC-Analysis_bandsfortemporalmasking_tag2@@": "Šiuo parametru nustatomi kanalai, kurie turėtų būti naudojami maskuoti debesis, debesų šešėlius ir sniegą. Kadangi trumpųjų bangų infraraudonojo spektro (SWIR) kanale debesų šešėlis ir sniegas rodomi labai tamsūs, o žaliojo spektro kanale debesys ir sniegas yra labai ryškūs, rekomenduojama užmaskuoti SWIR ir žaliojo spektro indeksus.",
	"@@CCDC-Analysis_chi-squaredthresholdfordetectchange_tag0@@": "Chi-kvadrato pokyčio tikimybės slenkstis. Jei stebint apskaičiuota pokyčio tikimybė yra didesnė už šį slenkstį, ji pažymima kaip anomalija, kuri yra potencialaus pokyčio įvykis. Numatytoji reikšmė yra 0,99.",
	"@@CCDC-Analysis_minimumconsecutiveanomalyobservations_tag0@@": "Mažiausias iš eilės pastebėtų anomalijų skaičius, kuris turi įvykti, kad įvykis būtų laikomas pokyčiu. Pikselis turi būti pažymėtas kaip anomalija tiek kartų, kiek nurodyta iš eilės einančių laiko skilčių, kad jis būtų laikomas tikru pokyčiu. Numatytoji reikšmė yra 6.",
	"@@CCDC-Analysis_raster_tag0@@": "Įvesties daugiamatis rastro sluoksnis.",
	"@@CCDC-Analysis_updatingfittingfrequency(inyears)_tag0@@": "Laiko serijos modelio atnaujinimo naujais stebėjimais dažnumas. Numatytasis nustatymas yra atnaujinti modelį kas metus.",
	"@@CCDC-Analysis_updatingfittingfrequency(inyears)_tag1@@": "Šiuo parametru nusakoma, kaip dažnai naujais stebėjimais bus atnaujinamas laiko serijos modelis. Dažnas modelio atnaujinimas gali būti brangus skaičiavimo atžvilgiu, o nauda minimali. Pavyzdžiui, jei daugiamačiame rastre yra 365 skiltys arba aiškūs stebėjimai per metus, o atnaujinimas vyksta kas stebėjimą, duomenų apdorojimas skaičiavimo atžvilgiu bus 365 kartus brangesnis lyginant su atnaujinimu, vykdomu kartą per metus, nors tikslumas gali ir nebūti didesnis.",
	"@@Trend-To-RGB_modeltype_tag0@@": "Modelio informacijos tipas, kuris bus konvertuojamas į RGB.",
	"@@Trend-To-RGB_modeltype_tag1@@": "Linijinis--Linijinės tendencijos informacija bus konvertuojama į RGB. Tai numatytasis nustatymas.",
	"@@Trend-To-RGB_modeltype_tag2@@": "Harmoninis--Harmoninės tendencijos informacija bus konvertuojama į RGB.",
	"@@Trend-To-RGB_raster_tag0@@": "Įvesties tendencijos rastras.",
	"@@LandTrendr-Analysis_bestmodelproportion_tag0@@": "<p>Geriausios modelio proporcijos reikšmė. Modelio parinkimo procese įrankis skaičiuos kiekvieno modelio p reikšmę ir parinks modelį su daugiausiai viršūnių, išlaikydamas mažiausią (reikšmingiausią) p reikšmę pagal šią proporcijos reikšmę. 1 lygi reikšmė reiškia, kad modelis turi mažiausią p reikšmę, bet gali neturėti didelio viršūnių skaičiaus. Numatytoji reikšmė lygi 1,25.</p>",
	"@@LandTrendr-Analysis_maximumnumberofsegments_tag0@@": "<p>Didžiausias skaičius segmentų, kurie laiko sekoje bus derinami kiekvienam pikseliui. Numatytasis skaičius yra 5.</p>",
	"@@LandTrendr-Analysis_minimumnumberofobservations_tag0@@": "<p>Derinimui vykdyti reikalingas mažiausias tinkamų stebėjimų skaičius. Metų įvesties daugiamačiame duomenų rinkinyje skaičius turi būti lygus šiai reikšmei arba didesnis. Numatytoji reikšmė lygi 6.</p>",
	"@@LandTrendr-Analysis_outputotherbands_tag0@@": "<p>Nurodo, ar rezultatuose bus įtraukti kiti kanalai.</p><ul><li>Pasirinkta – kiti kanalai bus įtraukti rezultatuose. Parametre <strong>Apdorojimo kanalas</strong> nurodyta pradinio segmentavimo kanalo ir viršūnių informacija taip pat bus derinama prie likusių kanalų daugiakanaliuose vaizduose. Modelio rezultatuose pirmiausia bus segmentavimo kanalas, tada likę kanalai.</li><li>Nepasirinkta – kiti kanalai nebus įtraukiami. Tai yra numatytasis nustatymas.</li></ul>",
	"@@LandTrendr-Analysis_preventoneyearrecovery_tag0@@": "<p>Nurodo, ar vienų metų atsigavimą rodantys kanalai bus neįtraukiami.</p><ul><li>Pasirinkta – vienų metų atsigavimą rodantys segmentai bus neįtraukiami. Tai yra numatytasis nustatymas.</li><li>Nepasirinkta – vienų metų atsigavimą rodantys segmentai bus įtraukiami.</li></ul>",
	"@@LandTrendr-Analysis_processingband_tag0@@": "<p>Kanalas, kuris bus naudojamas pikselių reikšmių trajektorijoms per laiką segmentuoti. Pasirinkite kanalą, kuris geriausiai fiksuos elemento pokyčius, kuriuos norite stebėti.</p>",
	"@@LandTrendr-Analysis_p-valuethreshold_tag0@@": "<p>Pasirinktino modelio p reikšmės ribinė vertė. Kai pradiniame modelio derinimo etape aptinkamos viršūnės, įrankis derins kiekvieną segmentą ir skaičiuos p reikšmę, kad nustatytų modelio reikšmingumą. Kitoje iteracijose modelis vienetu sumažins segmentų skaičių ir perskaičiuos p reikšmę. Tai tęsis ir, jei p reikšmė yra mažesnė nei šiame parametre nurodyta reikšmė, modelis bus pasirenkamas, o įrankis liausis ieškoti geresnio modelio. Jei toks modelis nebus pasirenkamas, įrankis parinks modelį, kurio p reikšmė mažesnė nei <strong>mažiausia p reikšmė x geriausios modelio proporcijos reikšmė</strong>. Numatytoji reikšmė lygi 0,01.</p>",
	"@@LandTrendr-Analysis_raster_tag0@@": "<p>Įvesties Landsat daugiamačio rastro sluoksnis.</p>",
	"@@LandTrendr-Analysis_recoveryhasincreasetrend_tag0@@": "<p>Nurodo, ar atsigavimas turi didėjimo (teigiamą) tendenciją.</p><ul><li>Pasirinkta – atsigavimas turi didėjimo tendenciją. Tai yra numatytasis nustatymas.</li><li>Nepasirinkta – atsigavimas turi mažėjančią reikšmę.</li></ul>",
	"@@LandTrendr-Analysis_recoverythreshold_tag0@@": "<p>Atsigavimo ribinė reikšmė metais. Jei segmento atsigavimo sparta didesnė nei<strong>1/atsigavimo ribinė vertės</strong>, tokio segmento atsisakoma ir jis neįtraukiamas į laiko sekos modelį. Reikšmė turi patekti į intervalą nuo 0 iki 1. Numatytoji reikšmė lygi 0,25.</p>",
	"@@LandTrendr-Analysis_snappingdate_tag0@@": "<p>Duomenys, naudojami pasirinkti įvesties daugiamačio duomenų rinkinio kiekvienų metų skiltį. Bus pasirinkta skiltis, kurios data artimiausia pritraukimo datai. Šis parametras būtinas, jei įvesties duomenų rinkinyje yra dažnesnių nei kartą metuose duomenų.</p>",
	"@@LandTrendr-Analysis_spikethreshold_tag0@@": "<p>Ribinė reikšmė, naudojama pikselio reikšmių trajektorijoje slopinti smailes arba anomalijas. Reikšmė turi patekti į intervalą nuo 0 iki 1, kur 1 reiškia neslopinti. Numatytoji reikšmė lygi 0,9.</p>",
	"@@LandTrendr-Analysis_vertexcountovershoot_tag0@@": "<p>Skaičius papildomų viršūnių po<strong>max_num_segments + 1</strong>, kurias galima naudoti derinant modelį per pradinį viršūnių identifikavimo etapą. Vėliau modeliavimo procese papildomų viršūnių skaičius bus sumažintas iki<strong>max_num_segments + 1</strong>. Numatytasis skaičius lygus 2.</p>",
	"@@Merge-Rasters_rasters_tag0@@": "<p>Įvesties rastrų duomenų rinkiniai arba daugiamačių rastrų duomenų rinkiniai, kuriuos reikia sujungti.</p>",
	"@@Merge-Rasters_resolveoverlapmethod_tag0@@": "<p>Nurodo metodą, kuris bus naudojamas persidengiantiems pikseliams sujungtuose duomenų rinkiniuose nustatyti.</p><ul><li><strong>Pirmas</strong>– persidengiančiose srityse pikselio reikšmė yra reikšmė, gaunama iš pirmo rastro įvesties rastrų sąraše. Tai yra numatytasis nustatymas.</li><li><strong>Paskutinis</strong>– persidengiančiose srityse pikselio reikšmė yra reikšmė, gaunama iš paskutinio rastro įvesties rastrų sąraše.</li><li><strong>Min.</strong>– persidengiančiose srityse pikselio reikšmė yra mažiausia reikšmė iš persidengiančių pikselių.</li><li><strong>Maks.</strong>– persidengiančiose srityse pikselio reikšmė yra didžiausia reikšmė iš persidengiančių pikselių.</li><li><strong>Vidurkis</strong>– persidengiančiose srityse pikselio reikšmė yra vidutinė reikšmė iš persidengiančių pikselių.</li><li><strong>Suma</strong>– persidengiančiose srityse pikselio reikšmė yra visa persidengiančių pikselių suma.</li></ul>",
	"@@Generate-Trend_cycleunit_tag0@@": "<p>Nurodo laiko vienetą, naudojamą harmoninio ciklo trukmei.</p><ul><li><strong>Dienos</strong>– harmoninio ciklo trukmės matavimo vienetas yra dienos.</li><li><strong>Metai</strong>– harmoninio ciklo trukmės matavimo vienetas yra metai. Tai yra numatytasis nustatymas.</li></ul>",
	"@@Generate-Trend_dimensionname_tag0@@": "<p>Matmuo, pagal kurį bus gaunama analizei pasirinkto kintamojo ar kintamųjų tendencija.</p>",
	"@@Generate-Trend_harmonicfrequency_tag0@@": "<p>Dažnio skaičius, naudojamas derinant tendencijas. Šis parametras nurodo ciklų dažnį per metus. Numatytoji reikšmė yra 1 arba vienas harmoninis ciklas per metus.</p><p>Šis parametras įtrauktas tik į harmoninės regresijos tendencijų analizę.</p>",
	"@@Generate-Trend_ignorenodata_tag0@@": "<p>Nurodo, ar analizuojant ignoruojamos NoData reikšmės.</p><ul><li>Pažymėta – analizėje bus įtraukti visi nurodyto matmens tinkami pikseliai ir neįtraukti visi NoData pikseliai. Tai yra numatytasis nustatymas.</li><li>Nepažymėta – analizė pateiks rezultatą NoData, jei nurodytame matmenyje pikseliai turi bent vieną NoData reikšmę.</li></ul>",
	"@@Generate-Trend_lengthofcycle_tag0@@": "<p>Modelio periodinės variacijos ilgis. Naudojamas matavimo vienetas – dienos, nepriklausomai nuo įvesties duomenyse naudojamo laiko matavimo vieneto. Pavyzdžiui, lapų žalumas dažnai turi vieną stiprų variacijos ciklą per vienerius metus, taigi ciklo ilgis yra 365,25, net jei įvesties duomenyse yra mėnesinis žalumas. Valandiniai temperatūros duomenys turi vieną stiprų variacijos ciklą vienos dienos metu, taigi ciklo ilgis yra 1 diena.</p><p>Metų ilgio ciklu kintančių duomenų numatytasis ciklo ilgis yra 365,25 dienos.</p>",
	"@@Generate-Trend_p-valueofslopecoefficient_tag0@@": "<p>Nurodo, ar skaičiuoti p reikšmės statistiką tendencijos linijos pasvirimo koeficientui.</p><ul><li>Pasirinkta – p reikšmė bus skaičiuojama ir rodoma išsamioje informacijoje, kai funkcija bus įvykdyta.</li><li>Nepasirinkta – p reikšmė nebus skaičiuojama. Tai yra numatytasis nustatymas.</li></ul>",
	"@@Generate-Trend_polynomialorder_tag0@@": "<p>Daugianarių eilės numeris, naudojamas derinant tendencijas. Šis parametras nurodo daugianarių eiliškumą. Numatytoji reikšmė yra 2 arba antro eiliškumo daugianaris.</p><p>Šis parametras įtrauktas tik į daugianarių regresijos tendencijų analizę.</p>",
	"@@Generate-Trend_r-squared_tag0@@": "<p>Nurodo, ar skaičiuoti tendencijos tinkamumo linijos R kvadrato modelio tinkamumo statistiką.</p><ul><li>Pasirinkta – R kvadratas bus skaičiuojamas ir rodomas išsamioje informacijoje, kai funkcija bus įvykdyta.</li><li>Nepasirinkta – R kvadratas nebus skaičiuojamas. Tai yra numatytasis nustatymas.</li></ul>",
	"@@Generate-Trend_raster_tag0@@": "<p>Įvesties daugiamatis rastras.</p>",
	"@@Generate-Trend_rmse_tag0@@": "<p>Nurodo, ar generuoti tendencijos tinkamumo linijos šaknį iš tendencijos modelio linijos vidutinės kvadratinės paklaidos (RMSE).</p><ul><li>Pasirinkta – RMSE bus skaičiuojama ir rodoma išsamioje informacijoje, kai funkcija bus įvykdyta. Tai yra numatytasis nustatymas.</li><li>Nepažymėta – RMSE nebus apskaičiuotas.</li></ul>",
	"@@Generate-Trend_seasonalperiod_tag0@@": "<p>Nurodo sezoninio laikotarpio laiko matavimo vienetą, kuris bus naudojamas vykdant sezoninį-Kendall testą.</p><ul><li>Dienos – sezoninio laikotarpio trukmės matavimo vienetas yra dienos. Tai yra numatytasis nustatymas.</li><li>Mėnesiai – sezoninio laikotarpio trukmės matavimo vienetas yra mėnesiai.</li></ul>",
	"@@Generate-Trend_trendtype_tag0@@": "<p>Nurodo, kokio tipo linija bus naudojama derinant pikselių reikšmes pagal matmenį.</p><ul><li><strong>Tiesinė</strong>– derina kintamojo pikselių reikšmes išilgai tiesinės tendencijos linijos. Tai yra numatytasis nustatymas.</li><li><strong>Harmoninė</strong>– derina kintamojo pikselių reikšmes išilgai harmoninės tendencijos linijos.</li><li><strong>Daugianarė</strong>– derina kintamojo pikselių reikšmes išilgai antro eiliškumo daugianarės tendencijos linijos.</li><li><strong>Mann-Kendall</strong>– kintamųjų pikseliai bus vertinami naudojant Mann-Kendall tendencijų testą</li><li><strong>Sezoninis Kendall</strong>– kintamųjų pikseliai bus vertinami naudojant sezoninį-Kendall tendencijų testą.</li></ul>",
	"@@Compute-Change_cellsizetype_tag0@@": "<p>Pasirinkite, koks gardelės dydis bus naudojamas išvesties rastre. Jei visų įvesties gardelės dydžiai yra vienodi, visos parinktys duos tokius pačius rezultatus.</p><ul><li>Pirmas – naudoti pirmą įvesties rastrų gardelės dydį.</li><li>Mažiausias – naudoti mažiausią įvesties rastrų gardelės dydį.</li><li>Didžiausias – naudoti didžiausią įvesties rastrų gardelės dydį. Tai yra numatytasis nustatymas.</li><li>Vidutinis – naudoti vidutinį visų įvesties rastrų gardelės dydį.</li><li>Paskutinis – naudoti paskutinį įvesties rastrų gardelės dydį.</li></ul>",
	"@@Compute-Change_computechangemethod_tag0@@": "<p>Naudojamas skaičiavimo metodas.</p><ul><li><strong>Skirtumas</strong> – bus skaičiuojamas matematinis skirtumas (atimtis) tarp pikselių reikšmės įvesties rastruose. Tai numatytoji reikšmė.</li><li><strong>Santykinis skirtumas</strong>-- Apskaičiuojamas pikselių reikšmių skirtumas, atsižvelgiant į lyginamų reikšmių dydžius.</li><li><strong>Kategorinis skirtumas</strong> -- Apskaičiuojamas skirtumas tarp dviejų kategorinių arba teminių rastrų, kai išvestyje pateikiami klasių perėjimai, įvykę tarp dviejų rastrų.</li><li><strong>Spektrinis euklidinis atstumas</strong> -- Apskaičiuojamas euklidinis atstumas tarp dviejų daugiakanalių rastrų pikselių reikšmių.</li><li><strong>Spektrinis kampo skirtumas</strong> -- Apskaičiuojamas spektrinis kampas tarp dviejų daugiakanalių rastrų pikselių reikšmių. Išvestis pateikiama radianais.</li><li><strong>Didžiausio pokyčio kanalas</strong>--Apskaičiuojamas kanalas, kuriame aptinkamas didžiausias kiekvieno pikselio tarp dviejų daugiakanalių rastrų pokytis.</li></ul><p>Jei<strong>Pokyčių skaičiavimo metodas</strong>nustatytas kaip<strong>Kategorinis skirtumas</strong>, o viena iš įvesčių nėra kategorinė, bus skaičiuojamas paprastas skirtumas.</p>",
	"@@Compute-Change_definetransitioncolors_tag0@@": "<p>Nurodykite metodą, kuris bus naudojamas simbolizuoti klases pakeitusius pikselius.</p><ul><li><strong>Vidutinės Iš ir Į spalvos</strong>– pikselio spalva bus jo originalios klasės ir galutinės klasės spalvų vidurkis.</li><li><strong>Naudoti Iš spalvas</strong>– pikselio spalva bus jo originalios klasės spalva.</li><li><strong>Naudoti Į spalvas</strong>– pikselio spalva bus jo galutinės klasės.</li></ul>",
	"@@Compute-Change_extenttype_tag0@@": "<p>Pasirinkite, kokią aprėptį naudoti išvesties rastre:</p><ul><li>Pirmoji – naudoti pirmojo įvesties rastro aprėptį nustatant apdorojimo aprėptį.</li><li>Sankirta – naudoti persidengiančių pikselių aprėptį nustatant apdorojimo aprėptį. Tai yra numatytasis nustatymas.</li><li>Sąjunga – naudoti visų rastrų aprėptį, nustatant apdorojimo aprėptį.</li><li>Paskutinė – naudoti paskutinio įvesties rastro aprėptį nustatant apdorojimo aprėptį.</li></ul>",
	"@@Compute-Change_filtermethod_tag0@@": "<p>Pasirinkite filtro metodą kategorinių pokyčių skaičiavimui.</p><ul><li><strong>Palikti visus</strong> – išvestyje įtraukiamos visos klasės, nevykdomas joks filtravimas. Šią parinktį rinkitės, jei norite viename duomenų rinkinyje matyti ir pokyčius, ir pastovumą.</li><li><strong>Palikti tik pakitusius pikselius</strong> – išvestyje įtraukiamos tik tos klasės, kurios pakito iš vieno klasės tipo į kitą. Šią parinktį rinkitės, jei jus domina tik pokyčiai.</li><li><strong>Palikti tik nepakitusius pikselius</strong> – išvestyje įtraukiamos tik nepakitusios klasės. Šią parinktį rinkitės, jei jus domina tik pastovumas.</li></ul>",
	"@@Compute-Change_fromclassvalues_tag0@@": "<p>Klasių reikšmės iš <strong>Rastro Iš</strong>, kurias įtraukti į skaičiavimą, jei lyginami du kategoriniai rastrai. Tai yra tarpais atskirtas sąrašas sveikųjų skaičių reikšmių, atitinkančių jūsų įvesties rastro duomenų rinkinio lauką <strong>ClassValue</strong>.</p>",
	"@@Compute-Change_fromraster_tag0@@": "<p>Pirmasis skaičiavimui naudojamas sluoksnis. Norėdami vertinti pokytį nuo 1 laiko (ankstesnio) iki 2 laiko (vėlesnio), čia įveskite 1 laiko rastrą.</p>",
	"@@Compute-Change_toclassvalues_tag0@@": "<p>Klasių reikšmės iš<strong>Rastro Į</strong>, kurias įtraukti į skaičiavimą, jei lyginami du kategoriniai rastrai. Tai yra tarpais atskirtas sąrašas sveikųjų skaičių reikšmių, atitinkančių jūsų įvesties rastro duomenų rinkinio lauką <strong>ClassValue</strong>.</p>",
	"@@Compute-Change_toraster_tag0@@": "<p>Antrasis skaičiavimui naudojamas sluoksnis. Norėdami vertinti pokytį nuo 1 laiko (ankstesnio) iki 2 laiko (vėlesnio), čia įveskite 2 laiko rastrą.</p>",
	"@@Compute-Change_usecolormethod_tag0@@": "<p>Nurodykite metodą, kuris bus naudojamas simbolizuoti klases pakeitusius pikselius.</p><ul><li><strong>Vidutinės Iš ir Į spalvos</strong>– pikselio spalva bus jo originalios klasės ir galutinės klasės spalvų vidurkis.</li><li><strong>Naudoti Iš spalvas</strong>– pikselio spalva bus jo originalios klasės spalva.</li><li><strong>Naudoti Į spalvas</strong>– pikselio spalva bus jo galutinės klasės.</li></ul>",
	"@@Compute-Change_fieldnameforclassnamesinfromraster_tag0@@": "<p>Laukas, kuriame saugomi įvesties <strong>Iš rastro</strong> klasių pavadinimai. Šis įrankis automatiškai ieško tinkamo naudojimui lauko <strong>ClassName</strong> arba <strong>Class_Name</strong>.</p><p>Šią parinktį naudokite, jei įvestyje nėra šių standartinių laukų pavadinimų.</p>",
	"@@Compute-Change_fieldnameforclassnamesintoraster_tag0@@": "<p>Laukas, kuriame saugomi įvesties <strong>Į rastrą</strong> klasių pavadinimai. Šis įrankis automatiškai ieško tinkamo naudojimui lauko <strong>ClassName</strong> arba <strong>Class_Name</strong>.</p><p>Šią parinktį naudokite, jei įvestyje nėra šių standartinių laukų pavadinimų.</p>",
	"@@Statistics_numberofcolumns_tag0@@": "<p>Pikselių stulpelių skaičius, kuris bus naudojamas židinio kaimynystės matmenyje.</p>",
	"@@Statistics_numberofrows_tag0@@": "<p>Pikselių eilučių skaičius, kuris bus naudojamas židinio kaimynystės matmenyje.</p>",
	"@@Statistics_onlyfillnodatapixels_tag0@@": "<p>Išvestyje užpildo NoData reikšmes. Tai naudinga, jei jūsų vaizde gali būti trūkstamų linijų.</p>",
	"@@Statistics_raster_tag0@@": "<p>Įvesties rastras, su kuriuo bus vykdoma židinio statistika.</p>",
	"@@Statistics_statisticstype_tag0@@": "<p>Toliau pateikti septyni židinio statistikos funkcijų tipai:</p><ul><li>Minimumas – skaičiuoja kaimynystės pikselių minimalią reikšmę.</li><li>Maksimumas – skaičiuoja kaimynystės pikselių maksimalią reikšmę.</li><li>Vidurkis – skaičiuoja kaimynystės pikselių vidutinę reikšmę. Tai yra numatytasis nustatymas.</li><li>Standartinis nuokrypis – skaičiuoja kaimynystės pikselių standartinio nuokrypio reikšmę.</li><li>Mediana – skaičiuoja kaimynystės pikselių medianos reikšmę.</li><li>Dauguma – skaičiuoja daugumos reikšmę, t. y. reikšmę, kuri tarp kaimynystės pikselių pasitaiko dažniausiai.</li><li>Mažuma – skaičiuoja mažumos reikšmę, t. y. reikšmę, kuri tarp kaimynystės pikselių pasitaiko rečiausiai.</li></ul>",
	"@@Detect-Change-Using-Change-Analysis_changedirection_tag0@@": "<p>Nurodo, kokias pokyčių kryptis įtraukti į analizę.</p><p>Šis parametras prieinamas tik jei įvesties pokyčių analizės rastras yra LandTrendr įrankių išvestis.</p><ul><li><strong>Visos kryptys</strong> – išvestyje įtraukiamos visos pokyčių kryptys. Tai yra numatytasis nustatymas.</li><li><strong>Didėjimas</strong>– tik teigiamos arba didėjimo krypties pokyčiai įtraukiami išvestyje.</li><li><strong>Mažėjimas</strong>– tik neigiamos arba mažėjimo krypties pokyčiai įtraukiami išvestyje.</li></ul>",
	"@@Detect-Change-Using-Change-Analysis_changetype_tag0@@": "<p>Nurodo, kokią skaičiavimo informaciją skaičiuoti.</p><ul><li><strong>Paskutinio pokyčio laikas</strong>– kiekviename pikselyje yra paskutinio to pikselio pokyčio laiko sekoje data. Tai yra numatytasis nustatymas.</li><li><strong>Anksčiausio pokyčio laikas</strong>– kiekviename pikselyje yra anksčiausio to pikselio pokyčio laiko sekoje data.</li><li><strong>Didžiausio pokyčio laikas</strong>– kiekviename pikselyje yra reikšmingiausio to pikselio pokyčio laiko sekoje data.</li><li><strong>Pokyčių skaičius</strong>– kiekviename pikselyje yra bendras skaičius, kiek kartų laiko sekoje tas pikselis pakito.</li><li><strong>Ilgiausio pokyčio laikas</strong>– kiekviename pikselyje yra ilgiausio perėjimo segmento laiko sekoje pabaigos pokyčio data.</li><li><strong>Trumpiausio pokyčio laikas</strong>– kiekviename pikselyje yra trumpiausio perėjimo segmento laiko sekoje pabaigos pokyčio data.</li><li><strong>Greičiausio pokyčio laikas</strong>– kiekviename pikselyje yra greičiausiai įvykusio perėjimo pabaigos pokyčio data.</li><li><strong>Lėčiausio pokyčio laikas</strong>– kiekviename pikselyje yra lėčiausiai įvykusio perėjimo pabaigos pokyčio data.</li></ul>",
	"@@Detect-Change-Using-Change-Analysis_filterbyduration_tag0@@": "<p>Nurodo, ar filtruoti pagal pokyčio trukmę.</p><p></p><ul><li>Pasirinkta – filtruoti rezultatus pagal trukmę, kad išvestyje būtų įtraukti tik nurodytą laiką užtrukę pokyčiai.</li><li>Nepasirinkta – nefiltruoti rezultatų pagal trukmę. Tai yra numatytasis nustatymas.</li></ul><p>Šis parametras prieinamas tik jei įvesties pokyčių analizės rastras yra LandTrendr įrankių išvestis.</p><p>Jei šis parametras pasirinktas, turite filtravimui nustatyti parametrus<strong>Minimali trukmė</strong>ir<strong>Maksimali trukmė</strong>.</p>",
	"@@Detect-Change-Using-Change-Analysis_filterbymagnitude_tag0@@": "<p>Nurodo, ar filtruoti pagal pokyčių stiprumą.</p><ul><li>Pasirinkta – filtruoti rezultatus pagal stiprumą, kad išvestyje būtų įtraukiami tik nurodyto stiprumo pokyčiai.</li><li>Nepasirinkta – nefiltruoti rezultatų pagal stiprumą. Tai yra numatytasis nustatymas.</li></ul><p>Šis parametras prieinamas tik jei įvesties pokyčių analizės rastras yra LandTrendr įrankių išvestis.</p><p>Jei šis parametras pasirinktas, turite filtravimui nustatyti parametrus<strong>Minimalus stiprumas</strong>ir<strong>Maksimalus stiprumas</strong>.</p>",
	"@@Detect-Change-Using-Change-Analysis_filterbyyear_tag0@@": "<p>Nurodo, ar apriboti išvestį metų intervalu.</p><ul><li>Pasirinkta – filtruoti rezultatus, kad išvestyje būtų įtraukiami tik pokyčiai, įvykę per konkretų metų intervalą.</li><li>Nepasirinkta – nefiltruoti rezultatų pagal metus. Tai yra numatytasis nustatymas.</li></ul><p>Jei šis parametras pasirinktas, turite filtravimui nustatyti parametrus<strong>Minimali reikšmė</strong>ir<strong>Maksimali reikšmė</strong>.</p>",
	"@@Detect-Change-Using-Change-Analysis_filterbystartvalue_tag0@@": "<p>Filtruokite rezultatus pagal pradžios reikšmę, kad išvestyje būtų įtraukiami tik nurodytos pradinės reikšmės pokyčiai.</p>",
	"@@Detect-Change-Using-Change-Analysis_filterbyendvalue_tag0@@": "<p>Filtruokite rezultatus pagal pabaigos reikšmę, kad išvestyje būtų įtraukiami tik nurodytos pabaigos reikšmės pokyčiai.</p>",
	"@@Detect-Change-Using-Change-Analysis_maximumnumberofchanges_tag0@@": "<p>Didžiausias kiekvienam pikseliui skaičiuotinas pokyčių skaičius. Įvestas skaičius atitinka išvesties rastro kanalų skaičių. Numatytoji reikšmė lygi 1, t. y. skaičiuojama tik viena pokyčio data, o išvesties rastre yra tik vienas kanalas.</p><p>Šis parametras negalimas, kai parametras<strong>Pokyčio tipas</strong>nustatytas kaip<strong>Pokyčių skaičius</strong>.</p>",
	"@@Detect-Change-Using-Change-Analysis_raster_tag0@@": "<p>Pokyčių analizės įvesties sluoksnis.</p>",
	"@@Detect-Change-Using-Change-Analysis_segmentdate_tag0@@": "<p>Nurodo, ar gauti duomenis iš pokyčio segmento pradžios, ar pabaigos.</p><p>Šis parametras prieinamas tik jei įvesties pokyčių analizės rastras yra LandTrendr įrankių išvestis.</p><ul><li><strong>Segmento pradžia</strong> – gauti duomenis iš pokyčio segmento pradžios. Tai yra numatytasis nustatymas.</li><li><strong>Segmento pabaiga</strong>– datą gauti iš pokyčio segmento pabaigos.</li></ul>",
	"@@Kernel-Density_areaunits_tag0@@": "<p>Išvesties tankio reikšmių ploto matavimo vienetai.</p><ul><li>Kvadratiniai žemėlapio vienetai – kvadratinėms išvesties koordinačių sistemos matavimo vienetų reikšmės.</li><li>Kvadratinės mylios – (JAV) mylioms.</li><li>Kvadratiniai kilometrai – kilometrams.</li><li>Akrai – (JAV) akrams.</li><li>Hektarai – hektarams.</li><li>Kvadratiniai metrai – metrams.</li><li>Kvadratiniai jardai – (JAV) jardams.</li><li>Kvadratinės pėdos – (JAV) pėdoms</li><li>Kvadratiniai coliai – (JAV) coliams.</li><li>Kvadratiniai centimetrai – centimetrams.</li><li>Kvadratiniai milimetrai – milimetrams.</li></ul>",
	"@@Kernel-Density_cellsize_tag0@@": "<p>Išvesties rastrinio duomenų rinkinio pikselio dydis. Jei geoduomenų apdorojimo aplinkose<strong>Cellsize</strong>reikšmė nenustatyta, tai bus numatytasis nustatymas.</p>",
	"@@Kernel-Density_inputbarriers_tag0@@": "<p>Kliūtis apibrėžiantis duomenų rinkinys.</p><p>Kliūtys gali būti polilinijos arba ploto elementų elementų sluoksnis.</p>",
	"@@Kernel-Density_inputfeatures_tag0@@": "<p>Įvesties taškas arba linijos elementai, kuriems bus skaičiuojamas tankis.</p>",
	"@@Kernel-Density_method_tag0@@": "<p>Lemia, ar bus naudojamas trumpiausio kelio ant sferoido (geodezinis), ar plokščios žemės (plokštuminis) metodas.</p><ul><li><strong>Plokštuminis</strong>– naudoja plokštuminius atstumus tarp elementų. Tai yra numatytasis nustatymas.</li><li><strong>Geodezinis</strong>– naudoja geodezinius atstumus tarp elementų. Šis metodas atsižvelgia į sferoido kreivumą ir tinkamai apdoroja arti ašigalių bei demarkacinės paros laiko linijos esančius duomenis.</li></ul><p><strong>Geodezinį</strong>metodą rekomenduojama naudoti duomenims, kurie laikomi koordinačių sistemoje, netinkamoje atstumų matavimams, ir bet kokiai analizei, kuri apima didelį geografinį plotą. Pavyzdžiui, Web Mercator arba bet kokia geografinė koordinačių sistema turėtų naudoti <strong>geodezinį</strong>metodą</p>.",
	"@@Kernel-Density_outputcellvalues_tag0@@": "<p>Sprendžia, ką reprezentuoja išvesties rastro reikšmės.</p><ul><li><strong>Tankiai</strong>– išvesties reikšmės reprezentuoja prognozuojamas tankumo reikšmes. Tai yra numatytasis nustatymas.</li><li><strong>Numatomas skaičius</strong>– išvesties reikšmės reprezentuoja prognozuojamą reiškinio kiekį kiekviename pikselyje. Kadangi pikselio reikšmė susieta su nurodyta<strong>Cellsize</strong>reikšme, rezultatų rastro negalima perskaičiuoti su kitu pikselio dydžiu taip, kad jis ir toliau rodytų reiškinio kiekį.</li></ul>",
	"@@Kernel-Density_populationfield_tag0@@": "<p>Laukas, kuriame nurodytos populiacijos reikšmės kiekvienam elementui. <strong>Gyventojų lauko</strong>reikšmė yra skaičius ar kiekis, kurį reikia paskleisti ant kraštovaizdžio, kad būtų sukurtas ištisinis paviršius. <strong>Gyventojų lauko</strong>reikšmės gali būti sveikieji skaičiai arba slankiojo kablelio.</p><p>Toliau pirmenybės tvarka išdėstytos šio lauko parinktys ir numatytoji elgsena.</p><ul><li>Naudokite<strong>None</strong>, jei nebus naudojamas joks elementas ar speciali reikšmė, o kiekvienas elementas bus skaičiuojamas vieną kartą.</li><li>Naudokite<strong>Shape</strong>, jei įvesties elementai turi Z reikšmes.</li><li>Kitais atvejais numatytoji lauko reikšmė yra<strong>POPULATION</strong>, arba bet kokia tinkama išvestinė gyventojų skaičiaus reikšmė:<ul><li><strong>POPULATIONxxxx</strong>, kur<strong>xxxx</strong>gali būti bet koks tinkamas simbolis, pvz.:<strong>POPULATION6</strong>,<strong>POPULATION1974</strong>arba<strong>POPULATIONROADTYPE</strong>.</li><li><strong>POP</strong>.</li><li><strong>POPxxxx</strong>.</li><li>Jei netinka nė vienas aukščiau nurodytas variantas, numatytoji reikšmė yra<strong>None</strong>.</li></ul></li></ul>",
	"@@Kernel-Density_searchradius_tag0@@": "<p>Paieškos spindulys, kurio ribose skaičiuojamas tankumas. Matavimo vienetai parenkami pagal projekcijos linijinius matavimo vienetus.</p><p>Pavyzdžiui, jei matavimo vienetai yra metrai, norėdami įtraukti visus elementus vienos mylios spinduliu, paieškos spindulį nustatykite kaip 1609,344 (kadangi 1 mylia yra 1609,344 metro).</p>",
	"@@Zonal-Statistics_ignorenodataincalculations_tag0@@": "<p>Žymi, ar<strong>NoData</strong>reikšmės<strong>reikšmių rastre</strong>turės įtakos rezultatams zonos, į kurią patenka.</p><ul><li><strong>Taip</strong> – bet kurioje zonoje, tik<strong>reikšmių rastre</strong>reikšmę turintys pikseliai bus naudojami nustatant tos zonos išvesties reikšmę.<strong>NoData</strong>pikseliai, esantys<strong>reikšmių rastre</strong>, bus ignoruojami skaičiuojant statistiką. Tai yra numatytoji reikšmė.</li><li><strong>Ne</strong>– jei bet kurioje konkrečioje zonoje yra<strong>NoData</strong>reikšmę turinčių <strong>reikšmių rastro</strong>pikselių, laikoma, kad nėra pakankamai informacijos atlikti statistinius skaičiavimus visiems tos zonos pikseliams; todėl išvesties rastre visa tokia zona gaus reikšmę<strong>NoData</strong>.</li></ul>",
	"@@Zonal-Statistics_percentileinterpolationtype_tag0@@": "<p>Nustato, koks procentinės interpoliacijos metodas bus naudojamas, kai skaičiuotinų įvesties rastro reikšmių skaičius yra lyginis.</p><ul><li><strong>Automatinis nustatymas</strong>– jei įvesties reikšmių rastro tipas yra sveikųjų skaičių pikselių, naudojamas metodas<strong>Artimiausias</strong>. Jei įvesties reikšmių rastras yra slankiojo kablelio pikselių tipo, naudojamas metodas<strong>Tiesinis</strong>. Tai yra numatytasis nustatymas.</li><li><strong>Artimiausias</strong>– naudojama artimiausia pageidaujamai procentinei daliai reikšmė, kuri yra pasiekiama. Šiuo atveju išvesties pikselio tipas yra toks pat, kaip įvesties reikšmių rastro.</li><li><strong>Tiesinis</strong>– naudojamas dviejų pageidaujamą procentinę dalį supančių reikšmių svertinis vidurkis. Šiuo atveju išvesties pikselio tipas bus slankiojo kablelio.</li></ul>",
	"@@Zonal-Statistics_percentilevalue_tag0@@": "<p>Apskaičiuotina procentinė dalis. Numatytoji reikšmė yra 90 ir nurodo 90-ąją procentinę dalį.</p><p>Tinkami reikšmių intervalai yra nuo 0 iki 100. 0-inė procentinė dalis iš esmės atitinka Minimumo statistiką, o 100 procentų ekvivalentas yra Maksimumas. 50 lygi reikšmė iš esmės pateiks analogiškus rezultatus kaip ir Medianos statistika.</p>",
	"@@Zonal-Statistics_processasmultidimensional_tag0@@": "<p>Nustato, kaip apdorojamas įvesties daugiamačių reikšmių rastras.</p><ul><li><strong>Dabartinė skiltis</strong>– statistiniai duomenys apskaičiuojami pagal esamą daugiamačio duomenų rinkinio skiltį. Tai yra numatytasis nustatymas.</li><li><strong>Visos skiltys</strong>– statistiniai duomenys apskaičiuojami visiems daugiamačio duomenų rinkinio matmenims (pavyzdžiui, laiko ar gylio).</li></ul>",
	"@@Zonal-Statistics_statisticstype_tag0@@": "<p>Skaičiuotinos statistikos tipas.</p><ul><li><strong>Vidurkis</strong>– skaičiuoja vidurkį visų<strong>reikšmių rastro</strong>pikselių, priklausančių tai pačiai zonai kaip išvesties pikselis.</li><li><strong>Dauguma</strong>– nustato reikšmę, kuri dažniausiai pasitaiko tarp visų<strong>reikšmių rastro</strong>pikselių, priklausančių tai pačiai zonai kaip išvesties pikselis.</li><li><strong>Maksimumas</strong>– nustato didžiausią reikšmę iš visų<strong>reikšmių rastro</strong>pikselių, priklausančių tai pačiai zonai kaip išvesties pikselis.</li><li><strong>Mediana</strong>– nustato medianos reikšmę iš visų<strong>reikšmių rastro</strong>pikselių, priklausančių tai pačiai zonai kaip išvesties pikselis.</li><li><strong>Minimumas</strong>– nustato mažiausią reikšmę iš visų<strong>reikšmių rastro</strong>pikselių, priklausančių tai pačiai zonai kaip išvesties pikselis.</li><li><strong>Mažuma</strong>– nustato reikšmę, rečiausiai pasitaikančią tarp visų<strong>reikšmių rastro</strong>pikselių, priklausančių tai pačiai zonai kaip išvesties pikselis.</li><li><strong>Procentinė dalis</strong>– apskaičiuoja procentinę dalį visų<strong>reikšmių rastro</strong>pikselių, priklausančių tai pačiai zonai kaip išvesties pikselis. Pagal numatytuosius nustatymus skaičiuojama 90-oji procentinė dalis. Kokią procentinę dalį skaičiuoti, galite nustatyti naudojami parametrą<strong>Procentinė reikšmė</strong>.</li><li><strong>Intervalas</strong>– skaičiuoja skirtumą tarp didžiausios ir mažiausios reikšmių iš visų<strong>reikšmių rastro</strong>pikselių, priklausančių tai pačiai zonai kaip išvesties pikselis.</li><li><strong>Standartinis nuokrypis</strong>– skaičiuoja standartinį nuokrypį visų<strong>reikšmių rastro</strong>pikselių, priklausančių tai pačiai zonai kaip išvesties pikselis.</li><li><strong>Suma</strong>– skaičiuoja bendrą reikšmę visų<strong>reikšmių rastro</strong>pikselių, priklausančių tai pačiai zonai kaip išvesties pikselis.</li><li><strong>Įvairovė</strong>– skaičiuoja unikalių reikšmių skaičių tarp visų<strong>reikšmių rastro</strong>pikselių, priklausančių tai pačiai zonai kaip išvesties pikselis.</li></ul>",
	"@@Zonal-Statistics_valueraster_tag0@@": "<p>Rastras, kuriame yra reikšmės, kurioms bus skaičiuojama statistika.</p>",
	"@@Zonal-Statistics_zonefield_tag0@@": "<p>Laukas, kuriame yra kiekvieną zoną aprašančios reikšmės. Tai gali būti sveikasis skaičius arba zonos rastro eilutės laukas.</p>",
	"@@Zonal-Statistics_zoneraster_tag0@@": "<p>Duomenų rinkinys, apibrėžiantis zonas. Zonas gali apibrėžti sveikojo skaičiaus rastras.</p>",
	"@@Zonal-Statistics_calculatecircularstatistics_tag0@@": "<p>Nurodo, kaip bus skaičiuojamas statistikos tipas.</p><ul><li><strong>Aritmetinis</strong> – skaičiuoja aritmetinę statistiką. Tai yra numatytasis nustatymas.</li><li><strong>Ciklinis</strong> – skaičiuoja ciklinę statistiką, kuri tinkama cikliniams kiekiams, pavyzdžiui, kompaso rodyklės krypčiai laipsniais, dienos laikams ir trupmeninėms realiųjų skaičių dalims.</li></ul>",
	"@@Zonal-Statistics_circularwrapvalue_tag0@@": "<p>Didžiausia galima ciklinių duomenų reikšmė (viršutinė riba). Tai yra teigiamas skaičius, kurio numatytoji reikšmė yra 360. Ši reikšmė taip pat reprezentuoja tokį patį kiekį, kaip ir mažiausia galima reikšmė (apatinė riba).</p><p>Šis parametras taikomas tik tada, kai skaičiuojama ciklinė statistika.</p>",
	"@@Boundary-Clean-function_inputraster_tag0@@": "<p>Įvesties rastras, kurio ribas tarp zonų norima glodinti.</p><p>Jis turi būti sveikojo skaičiaus tipo.</p>",
	"@@Boundary-Clean-function_runexpansionandshrinkingtwice_tag0@@": "<p>Nurodo, kiek kartų bus vykdomas glodinimo procesas – du ar vgieną.</p><ul><li><p><strong>Pasirinkta</strong>– plėtros ir sutraukimo operacija vykdoma du kartus. Pirmą kartą operacija vykdoma pagal nurodytą rūšiavimo tipą. Tada įvykdoma papildoma plėtros ir sutraukimo operacija, naudojant priešingą prioritetą. Tai yra numatytasis nustatymas.</p></li><li><p><strong>Nepasirinkta</strong>– plėtros ir sutraukimo operacija vykdoma vieną kartą, pagal rūšiavimo tipą.</p></li></ul>",
	"@@Boundary-Clean-function_sorttype_tag0@@": "<p>Nurodo rūšiavimo tipą, kurį naudoti glodinimo procese. Rūšiavimas nustato prioritetą, pagal kurį gardelės gali plėstis į savo kaimynes.</p><p>Rūšiuoti galima pagal zonos reikšmę arba zonos plotą.</p><ul><li><p><strong>Nerūšiuoti</strong>– zonos nerūšiuojamos pagal dydį. Suglodintoje išvestyje zonos su didesnėmis reikšmėmis turi didesnį prioritetą plėstis į zonas, kurių reikšmės mažesnės. Tai yra numatytasis nustatymas</p></li><li><p><strong>Mažėjimo tvarka</strong>– zonos rūšiuojamos mažėjimo tvarka pagal dydį. Bendro didesnio ploto zonos turės didesnį prioritetą plėstis į zonas, kurių bendri plotai mažesni. Ši parinktis suglodintoje išvestyje pašalina arba sumažina gardelių iš mažesnių zonų vyravimą.</p></li><li><p><strong>Didėjimo tvarka</strong>– zonos rūšiuojamos didėjimo tvarka pagal dydį. Bendro mažesnio ploto zonos turės didesnį prioritetą plėstis į zonas, kurių bendri plotai didesni. Ši parinktis suglodintoje išvestyje išlaiko arba padidina gardelių iš mažesnių zonų vyravimą.</p></li></ul>",
	"@@Aggregate-Multidimensional_dimension_tag0@@": "<p>Agregavimo matmuo. Tai yra matmuo, pagal kurį kintamieji bus agreguojami.</p>",
	"@@Aggregate-Multidimensional_dimensiondefinition_tag0@@": "<p>Nurodo metodą, kurį reikia naudoti norint filtruoti įvestus daugiamačius duomenis prieš atliekant agregavimą.</p><ul><li><strong>Visas</strong>--Bus naudojamas visas kiekvieno matmens intervalas. Tai yra numatytasis nustatymas.</li><li><strong>Pagal reikšmes</strong>-- Matmuo bus dalinamas į skiltis pagal matmens reikšmę arba reikšmių sąrašą.</li><li><strong>Pagal intervalus</strong>--Matmuo bus dalinamas į skiltis pagal intervalą arba intervalų sąrašą.</li><li><strong>Pagal iteraciją</strong>--Matmuo bus dalinamas į skiltis pagal nurodytą inervalo dydį.</li></ul>",
	"@@Aggregate-Multidimensional_iterationdefinitionparameters_tag0@@": "<p>Iteracijos apibrėžimo parametrai leidžia nustatyti matmenų reikšmes, kurios bus naudojamos filtruoti įvesties daugiamačius duomenis analizei, kai parametras <strong>Matmens apibrėžimas</strong>nustatytas kaip<strong>Pagal iteraciją</strong>.</p><ul><li><strong>Matmuo</strong>--Filtruojamas matmuo.</li><li><strong>Pirmosios iteracijos pradžia</strong>--Pirmojo intervalo pradžia. Šis intervalas naudojamas kartojant duomenų rinkinį.</li><li><strong>Pirmosios iteracijos pabaiga</strong>--Pirmojo intervalo pabaiga. Šis intervalas naudojamas kartojant duomenų rinkinį.</li><li><strong>Etapas</strong>--Duomenų skaidymo į skiltis dažnis.</li><li><strong>Vienetas</strong>--Iteracijos vienetas.</li></ul>",
	"@@Aggregate-Multidimensional_keywordinterval_tag0@@": "<p>Nurodo raktažodžių intervalą, kuris bus naudojamas agreguojant išilgai matmens.</p><p>Šis parametras reikalingas, kai parametras <strong>Tipas</strong> yra nustatytas kaip<strong>Intervalo raktažodis</strong>.</p><ul><li><strong>Kas valandą</strong>--Duomenų reikšmės agreguojamos į valandinius laiko etapus, o rezultatuose pateikiama kiekviena laiko sekos valanda. Tai yra numatytasis nustatymas.</li><li><strong>Kas dieną</strong>--Duomenų reikšmės agreguojamos į dienos laiko etapus, o rezultatuose pateikiama kiekviena laiko sekos diena.</li><li><strong>Kas savaitę</strong>--Duomenų reikšmės agreguojamos į savaitinius laiko etapus, o rezultatuose pateikiama kiekviena laiko sekos savaitė.</li><li><strong>Kas dešimt dienų</strong>--Duomenų reikšmės agreguojamos į 3 laikotarpius, kurių kiekvienas trunka 10 dienų. Paskutinis laikotarpis gali būti ilgesnis arba trumpesnis nei 5 dienos. Išvestyje yra 3 skiltys kiekvienam mėnesiui.</li><li><strong>Kas 5 dienas</strong>--Duomenų reikšmės agreguojamos į 6 laikotarpius, kurių kiekvienas trunka 5 dienas. Paskutinis laikotarpis gali būti ilgesnis arba trumpesnis nei 5 dienos. Išvestyje yra 6 skiltys kiekvienam mėnesiui.</li><li><strong>Kas mėnesį</strong>--Duomenų reikšmės agreguojamos į mėnesio laiko etapus, o rezultatuose pateikiama kiekviena laiko sekos diena.</li><li><strong>Kas ketvirtį</strong>--Duomenų reikšmės agreguojamos į ketvirčio laiko etapus, o rezultatuose pateikiama kiekvienas laiko sekos ketvirtis.</li><li><strong>Kas metus</strong>--Duomenų reikšmės agreguojamos į kasmetinius laiko etapus, o rezultatuose pateikiami kiekvieni laiko sekos metai.</li><li><strong>Pasikartojantis kasdien</strong>--Duomenų reikšmės agreguojamos į kasdienius laiko etapus, o rezultatuose pateikiama viena agreguota reikšmė kalendorinei datai. Išvestis apima daugiausia 366 dienos laiko skiltis.</li><li><strong>Pasikartojantis kas savaitę</strong>--Duomenų reikšmės agreguojamos į savaitinius laiko etapus, o rezultatuose pateikiama viena agreguota reikšmė savaitei. Išvestis apima daugiausia 53 savaitines laiko skiltis.</li><li><strong>Pasikartojantis kas mėnesį</strong>--Duomenų reikšmės agreguojamos į mėnesinius laiko etapus, o rezultatuose pateikiama viena agreguota reikšmė mėnesiui. Išvestis apima daugiausia 12 mėnesinių laiko skilčių.</li><li><strong>Pasikartojantis kas ketvirtį</strong>--Duomenų reikšmės agreguojamos į ketvirtinius laiko etapus, o rezultatuose pateikiama viena agreguota reikšmė ketvirčiui. Išvestis apima daugiausia 4 ketvirtines laiko skiltis.</li></ul>",
	"@@Aggregate-Multidimensional_operation_tag0@@": "<p>Nurodo matematinį metodą, naudojamą apjungti agreguotas skiltis intervale.</p><ul><li><strong>Dauguma</strong>--Apskaičiuojama dažniausiai intervalo skiltyse pasitaikiusi pikselio reikšmė.</li><li><strong>Maksimali</strong>--Apskaičiuojama didžiausia intervalo skilčių pikselio reikšmė.</li><li><strong>Vidurkis</strong>--Apskaičiuojamas intervalo skilčių pikselio reikšmių vidurkis. Tai yra numatytasis nustatymas.</li><li><strong>Mediana</strong>--Apskaičiuojama intervalo skilčių pikselių reikšmių mediana.</li><li><strong>Minimali</strong>--Apskaičiuojama mažiausia intervalo skilčių pikselio reikšmė.</li><li><strong>Mažuma</strong>--Apskaičiuojama rečiausiai intervalo skiltyse pasitaikiusi pikselio reikšmė.</li><li><strong>Ribos</strong>--Apskaičiuojamos intervalo skilčių pikselio reikšmių ribos.</li><li><strong>Standartinis nuokrypis</strong>--Apskaičiuojamas intervalo skilčių pikselio reikšmių standartinis nuokrypis.</li><li><strong>Suma</strong>--Apskaičiuojama intervalo skilčių pikselio reikšmių suma.</li><li><strong>Įvairovė</strong>--Apskaičiuojamas intervalo skilčių unikalių pikselio reikšmių skaičius.</li></ul><p>Visose parinktyse galima pasirinkti variantą „Nepaisyti NoData“. Matematiniai skaičiavimai bus atliekami su visais tinkamais matmens pikseliais, o NoData pikseliai nebus įtraukiami.</p>",
	"@@Aggregate-Multidimensional_ranges_tag0@@": "<p>Intervalai, nurodyti lentelėje, naudojami reikšmių grupėms agreguoti. Minimali ir maksimali reikšmės nurodo įtraukiamą intervalą.</p><p>Šis parametras reikalingas, kai parametras <strong>Tipas</strong> nustatytas kaip<strong>Intervalo ribos</strong>.</p>",
	"@@Aggregate-Multidimensional_raster_tag0@@": "<p>Įvesties daugiamatis rastras.</p>",
	"@@Aggregate-Multidimensional_type_tag0@@": "<p>Nurodo agreguojamų duomenų matmens intervalą.</p><ul><li><strong>Visi</strong>--Bus agreguojami visų skilčių kintamieji duomenys. Tai yra numatytasis nustatymas.</li><li><strong>Intervalo raktažodis</strong>--Bus agreguojami žinomo intervalo kintamieji duomenys.</li><li><strong>Intervalo reikšmė</strong>--Kintamieji duomenys bus agreguojami naudojant vartotojo nurodytus intervalą ir vienetą.</li><li><strong>Intervalo ribos</strong>--Bus agreguojami kintamieji duomenys, esantys tarp nurodytų reikšmių arba datų porų.</li></ul>",
	"@@Aggregate-Multidimensional_valueinterval_tag0@@": "<p>Agregavimui naudojamo intervalo dydis.</p><p>Šis parametras būtinas, kai parametras<strong>Tipas</strong> yra nustatytas kaip <strong>Intervalo reikšmė</strong>.</p>",
	"@@Aggregate-Multidimensional_values_tag0@@": "<p>Matmens reikšmės, naudojamos filtruoti įvesties daugiamačius duomenis atliekant analizę. šis parametras būtinas, kai parametras <strong>Matmens apibrėžimas</strong> nustatytas kaip <strong>Pagal reikšmes</strong>.</p>",
	"@@Aggregate-Multidimensional_variables_tag0@@": "<p>Nustatyto matmens agreguojamas kintamasis arba kintamieji.</p>",
	"@@Predict-Using-Regression_inputdefinitionfile_tag0@@": "<p>Įvesties Esri regresijos aprašo (<strong>.ecd</strong>) failas, kuriame yra nurodyto duomenų rinkinio, regresijos modelio ir pasirinktų atributų statistika bei informacija.</p>",
	"@@Predict-Using-Regression_rasters_tag0@@": "<p>Rastrinių duomenų rinkinys arba duomenų rinkinių rinkinys, kuriame yra prognozuojantys kintamieji. Tai gali būti vieno kanalo rastras, daugiakanalis rastras, daugiamatis rastras, mozaikinių duomenų rinkinys arba rastrų kolekcija.</p>",
	"@@Cell-Statistics_operation_tag0@@": "<p>Norimo atlikti statistinio skaičiavimo tipas.</p><p>Galima statistika:<strong>dauguma</strong>,<strong>maksimumas</strong>,<strong>vidurkis</strong>,<strong>mediana</strong>,<strong>minimumas</strong>,<strong>mažuma</strong>,<strong>procentinė reikšmė</strong>,<strong>intervalas</strong>,<strong>standartinis nuokrypis</strong>,<strong>suma</strong> ir<strong>įvairovė</strong>.</p><p>Numatytoji reikšmė yra<strong>vidurkis</strong>.</p>",
	"@@Colormap-To-RGB_randomlyassigncolortounmappedpixels_tag0@@": "<p>Į spalvų žemėlapį neįtrauktiems pikseliams spalvos priskiriamos automatiškai.</p><ul><li>Jei nepažymėta – nesusietiems pikseliams spalva nepriskiriama. Tai yra numatytoji reikšmė.</li><li>Jei pažymėta – nesusietiems pikseliams priskiriama spalva.</li></ul>",
	"@@Pansharpen_sensor_tag0@@": "<p>Pasirinkę Gram-Schmidt algoritmą taip pat galite nurodyti jutiklį, kuris rinko daugiakanalio rastro įvestį. Pasirinkus jutiklio tipą bus nustatyti atitinkami kanalų svoriai.</p>",
	"@@Dimensional-Moving-Statistics_backwardwindow_tag0@@": "<p>Ši reikšmė nurodo, kiek pjūvių prieš arba virš nurodyto intervalo bus įtraukta. Reikšmė turi būti teigiamas sveikasis skaičius nuo 1 iki 100. Numatytoji reikšmė yra 1.</p><p>Šio parametro vienetas yra pjūvis.</p>",
	"@@Dimensional-Moving-Statistics_circularwrapvalue_tag0@@": "<p>Reikšmė, kuri bus naudojama apvalinti linijinę reikšmę iki nurodyto ciklinio vidurkio intervalo.</p><p>Jo reikšmė privalo būti teigiama. Numatytoji reikšmė yra 360 laipsnių.</p>",
	"@@Dimensional-Moving-Statistics_dimension_tag0@@": "<p>Matmens, palei kurį judės intervalas, pavadinimas.</p><p>Numatytoji reikšmė yra pirmasis įvesties daugiamačiame rastre esantis matmuo, neskaitant x ir y.</p>",
	"@@Dimensional-Moving-Statistics_forwardwindow_tag0@@": "<p>Ši reikšmė nurodo, kiek skilčių po arba žemiau nurodyto intervalo bus įtraukta. Reikšmė turi būti teigiamas sveikasis skaičius nuo 1 iki 100. Numatytoji reikšmė yra 1.</p><p>Šio parametro vienetas yra pjūvis.</p>",
	"@@Dimensional-Moving-Statistics_inputraster_tag0@@": "<p>Įvesties rastras gali būti tik daugiamatis rastras debesų rastro formatu (<strong>.crf</strong>failas).</p>",
	"@@Dimensional-Moving-Statistics_nodatahandling_tag0@@": "<p>Nurodo, kaip statistikos skaičiavimas apdoros NoData reikšmes.</p><ul><li><strong>Duomenys</strong> – reikšmių įvesties NoData reikšmių bus nepaisoma apibrėžto intervalo, į kurį jos patenka, rezultatuose. Tai yra numatytasis nustatymas.</li><li><strong>NoData</strong> – jei įvestyje yra bet kokių į apibrėžtą intervalą patenkančių NoData reikšmių, išvesties reikšmės bus NoData.</li><li><strong>Užpildyti NoData</strong> – NoData gardelių reikšmės apibrėžtame intervale bus pakeičiamos naudojant pasirinktą statistiką.</li></ul>",
	"@@Dimensional-Moving-Statistics_percentileinterpolationtype_tag0@@": "<p>Nurodo, koks interpoliacijos metodas bus naudojamas, kai nurodyta procentinė reikšmų patenka tarp dviejų gardelių reikšmių.</p><ul><li><strong>Automatinis nustatymas</strong> – jei įvesties rastrų tipas yra sveikųjų skaičių pikselių, bus naudojamas metodas <strong>Artimiausias</strong>. Jei įvesties rastras yra slankiojo kablelio pikselių tipo, bus naudojamas metodas <strong>Tiesinis</strong>. Tai yra numatytasis nustatymas.</li><li><strong>Artimiausias</strong> – naudojama artimiausia procentinei daliai reikšmė, kuri yra pasiekiama. Šiuo atveju išvesties pikselio tipas bus toks pat, kaip įvesties reikšmių rastro.</li><li><strong>Tiesinis</strong> – bus naudojamas dviejų procentinę dalį supančių reikšmių svertinis vidurkis. Šiuo atveju išvesties pikselio tipas bus skaičiaus su slankiuoju kableliu.</li></ul>",
	"@@Dimensional-Moving-Statistics_percentilevalue_tag0@@": "<p>Procentinė dalis, kuri bus skaičiuojama, kai kaip statistikos tipas pasirinkta <strong>Procentinė dalis</strong>. Numatytoji reikšmė yra 90 ir nurodo 90-ąją procentinę dalį.</p><p>Tinkami reikšmių intervalai yra nuo 0 iki 100. 0-inė procentinė dalis iš esmės atitinka minimumo statistiką, o 100 procentų ekvivalentas yra maksimumo statistika, išskyrus tai, kad pateikiamas rezultatas bus slankusis kablelis. 50 lygi reikšmė pateiks analogiškus rezultatus kaip ir medianos statistika.</p>",
	"@@Dimensional-Moving-Statistics_statisticstype_tag0@@": "<p>Nurodo skaičiuojamos statistikos tipą.</p><p></p><ul><li><strong>Vidurkis</strong> – bus skaičiuojamas apibrėžtame intervale esančių gardelių vidurkis (vidutinė reikšmė). Tai yra numatytasis nustatymas.</li><li><strong>Ciklinis vidurkis</strong> – bus skaičiuojamas visų apibrėžtame intervale esančių gardelių ciklinis vidurkis. Parametras <strong>Ciklinio kėlimo reikšmė</strong> pasidaro pasiekiamas, kai pasirenkamas šis statistikos tipas.</li><li><strong>Dauguma</strong> – bus nustatoma apibrėžto intervalo gardelių daugumos reikšmė (dažniausiai pasitaikanti reikšmė).</li><li><strong>Maksimumas</strong> – bus nustatomas apibrėžto intervalo gardelių maksimumas (didžiausia reikšmė).</li><li><strong>Mediana</strong> – bus nustatoma kaimynystės gardelių mediana.</li><li><strong>Minimumas</strong> – bus nustatomas kaimynystės gardelių minimumas (mažiausia reikšmė).</li><li><strong>Procentinė dalis</strong> – bus skaičiuojama procentinė kaimynystės gardelių dalis. Kai pasirinktas šis statistikos tipas, pasidaro pasiekiami parametrai <strong>Procentinė reikšmė</strong> ir <strong>Procentinės interpoliacijos tipas</strong>. Naudodami šiuos naujus parametrus galite atitinkamai nurodyti, kokią procentinę dalį skaičiuoti, ir pasirinkti, kokio tipo interpoliaciją naudoti.</li></ul>",
	"@@Interpolate-Raster-By-Dimension_dimension_tag0@@": "<p>Interpoliacijai naudojamas matmuo.</p><p>Šis parametras būtinas, kai parametras <strong>Matmens apibrėžimas</strong> nustatytas kaip <strong>Pagal intervalą</strong>.</p>",
	"@@Interpolate-Raster-By-Dimension_dimensiondefinition_tag0@@": "<p>Nurodo, koks metodas bus naudojamas įvesties daugiamačiams duomenims filtruoti prieš atliekant interpoliaciją.</p><ul><li><strong>Pagal reikšmes</strong> – matmuo bus dalinamas į skiltis pagal matmens reikšmę arba reikšmių sąrašą.</li><li><strong>Pagal intervalą</strong> – matmuo bus dalinamas į skiltis pagal intervalą arba intervalų sąrašą.</li><li><strong>Pagal paskirties rastrą</strong> – matmuo bus dalinamas į skiltis naudojant konkretų paskirties daugiamatį rastrą.</li></ul>",
	"@@Interpolate-Raster-By-Dimension_endofinterval_tag0@@": "<p>Duomenų rinkinio iteracijai naudojamo intervalo pabaiga.</p><p>Šis parametras būtinas, kai parametras <strong>Matmens apibrėžimas</strong> nustatytas kaip <strong>Pagal intervalą</strong>.</p>",
	"@@Interpolate-Raster-By-Dimension_ignorenodata_tag0@@": "<p>Nurodo, ar analizuojant ignoruojamos NoData reikšmės.</p><ul><li>Nepažymėta – analizė pateiks NoData, jei gretimose skiltyse yra NoData reikšmių. Tai yra numatytasis nustatymas.</li><li>Pažymėta – analizė naudos tik tas skiltis, kuriose yra tinkami pikseliai, ir nepaisys NoData skilčių.</li></ul>",
	"@@Interpolate-Raster-By-Dimension_interpolationmethod_tag0@@": "<p>Nurodo, koks metodas bus naudojamas rastrui interpoliuoti.</p><ul><li><strong>Tiesinis</strong> – išvestis bus interpoliuojama tiesiškai, naudojant gretimas skiltis. Tai yra numatytasis nustatymas.</li><li><strong>Artimiausias kaimynas</strong> – išvestyje bus naudojama artimiausia gretima skiltis.</li></ul>",
	"@@Interpolate-Raster-By-Dimension_raster_tag0@@": "<p>Įvesties daugiamatis rastras.</p>",
	"@@Interpolate-Raster-By-Dimension_startofinterval_tag0@@": "<p>Duomenų rinkinio iteracijai naudojamo intervalo pradžia.</p><p>Šis parametras būtinas, kai parametras <strong>Matmens apibrėžimas</strong> nustatytas kaip <strong>Pagal intervalą</strong>.</p>",
	"@@Interpolate-Raster-By-Dimension_step_tag0@@": "<p>Dažnis, kuriuo bus interpoliuojami duomenys.</p><p>Šis parametras būtinas, kai parametras <strong>Matmens apibrėžimas</strong> nustatytas kaip <strong>Pagal intervalą</strong>.</p>",
	"@@Interpolate-Raster-By-Dimension_targetraster_tag0@@": "<p>Matmens apibrėžimo nurodytas paskirties rastras.</p><p>Šis parametras būtinas, kai parametras <strong>Matmens apibrėžimas</strong> nustatytas kaip <strong>Pagal paskirties rastrą</strong>.</p>",
	"@@Interpolate-Raster-By-Dimension_unit_tag0@@": "<p>Intervalo matavimo vienetas.</p><p>Šis parametras būtinas, kai parametras <strong>Matmens apibrėžimas</strong> nustatytas kaip <strong>Pagal intervalą</strong>.</p>",
	"@@Interpolate-Raster-By-Dimension_values_tag0@@": "<p>Matmens reikšmės, naudojamos analizei filtruoti įvesties daugiamačius duomenis.</p><p>Šis parametras būtinas, kai parametras <strong>Matmens apibrėžimas</strong> nustatytas kaip <strong>Pagal reikšmes</strong>.</p>",
	"@@Interpolate-Raster-By-Dimension_variables_tag0@@": "<p>Kintamasis arba kintamieji, kuris (kurie) bus interpoliuojamas (-i) pagal matmens apibrėžimą.</p>",
	"@@Terrain-Flatten_calibrationtype_tag0@@": "<p>Nurodoma, ar išvesties reljefo išlyginimas bus atliekamas naudojant<strong>Sigma nulinį</strong>ar<strong>Gama nulinį</strong>nustatymus.</p><ul><li><strong>Gama nulinis</strong>--Beta nulinė atgalinė sklaida normalizuojama naudojant plokštumos, lokaliai liečiančios DEM, ploto vienetą, paprastai vadinamą vietos kritimo kampu. Tai yra numatytoji reikšmė.</li><li><strong>Sigma nulinis</strong>--Beta nulinė atgalinė sklaida normalizuojama naudojant DEM, kad būtų apskaičiuotas plotas.</li></ul>",
	"@@Terrain-Flatten_dem_tag0@@": "<p>Įvesties DEM.</p><p>DEM naudojamas apskaičiuoti vietos apšviestą plotą.</p>",
	"@@Terrain-Flatten_geoid_tag0@@": "<p>Nurodo, ar įvesties DEM vertikalioji atskaitinė sistema bus konvertuota į elipsoidinį aukštį. Dauguma aukščių duomenų rinkinių yra susieti su jūros lygio ortometriniu aukščiu, todėl tokiais atvejais reikalinga korekcija, kad būtų galima konvertuoti į elipsoidinį aukštį.</p><ul><li>Pažymėjus--Bus atlikta geoido korekcija, kad ortometrinis aukštis būtų konvertuotas į elipsoidinį aukštį (remiantis EGM96 geoidu). Tai yra numatytoji reikšmė.</li><li>Nepažymėjus--Geoido korekcija nebus atlikta. Šią parinktį naudokite tik tuo atveju, jei DEM reikšmė išreiškiama elipsoidiniu aukščiu.</li></ul>",
	"@@Terrain-Flatten_raster_tag0@@": "<p>Įvesties radaro duomenys.</p><p>Šį rastrą pirmiausia reikia sukalibruoti į betą nulinį nustatymą.</p>",
	"@@Create-Color-Composite_blueexpression_tag0@@": "<p>Skaičiavimas, priskirtas trečiajam kanalui.</p><p>Kanalo pavadinimas, kanalo ID arba algebrinė išraiška, kurioje naudojamos grupės.</p><p>Palaikomi operatoriai yra vienaženkliai: plius (+), minus (-), kartotinis (*) ir dalmuo (/).</p>",
	"@@Create-Color-Composite_greenexpression_tag0@@": "<p>Skaičiavimas, priskirtas antrajam kanalui.</p><p>Kanalo pavadinimas, kanalo ID arba algebrinė išraiška, kurioje naudojami kanalai.</p><p>Palaikomi operatoriai yra vienaženkliai: plius (+), minus (-), kartotinis (*) ir dalmuo (/).</p>",
	"@@Create-Color-Composite_inputraster_tag0@@": "<p>Įvesties daugiakanalio rastro duomenys.</p>",
	"@@Create-Color-Composite_method_tag0@@": "<p>Nurodomas metodas, kuris bus naudojamas ištraukti kanalus.</p><ul><li>Kanalų pavadinimai--Naudojamas kanalo pavadinimas, nurodantis elektromagnetinio spektro bangos ilgio intervalą (pvz., raudonoji, artimoji infraraudonoji arba šiluminė infraraudonoji) arba poliarizaciją (pvz., VH, VV, HH arba HV). Tai yra numatytoji reikšmė.Kanalo ID--Naudojamas kanalo numeris (pvz., B1, B2 arba B3).</ul></li></li><li>",
	"@@Create-Color-Composite_redexpression_tag0@@": "<p>Skaičiavimas, priskirtas pirmajam kanalui.</p><p>Kanalo pavadinimas, kanalo ID arba algebrinė išraiška, kurioje naudojamos grupės.</p><p>Palaikomi operatoriai yra vienaženkliai: plius (+), minus (-), kartotinis (*) ir dalmuo (/).</p>",
	"@@Surface-Parameters_localsurfacetype_tag0@@": "<p>Pasirinkite paviršiaus funkcijos tipą, kuris bus taikomas aplink pasirinktą gardelę.</p><ul><li>Kvadratinis – kaimynystės gardelėms bus pritaikyta kvadratinė paviršiaus funkcija. Tai yra numatytasis tipas.</li><li>Bikvadratinis – kaimynystės gardelėms bus pritaikyta bikvadratinė paviršiaus funkcija.</li></ul>",
	"@@Surface-Parameters_neighborhooddistance_tag0@@": "<p>Išvestis bus skaičiuojama tokiu atstumu nuo pasirinktos gardelės centro. Ji nustato kaimynystės dydį. Numatytoji reikšmė yra įvesties rastro gardelės dydis, tokiu atveju gaunama 3x3 kaimynystė.</p>",
	"@@Surface-Parameters_outputslopemeasurement_tag0@@": "<p>Matavimo vienetai (laipsniai arba procentai), kurie bus naudojami išvesties nuolydžio rastre. Šis parametras aktyvus tik tada, kai<strong>parametro tipas</strong>yra<strong>nuolydis</strong>.</p><ul><li>Laipsnis – nuolydžio pasvirimas bus skaičiuojamas laipsniais. Tai yra numatytoji reikšmė.</li><li>Procentinis pakilimas – nuolydžio pasvirimas bus skaičiuojamas kaip procentinis pakilimas, dar vadinamas procentiniu nuolydžiu.</li></ul>",
	"@@Surface-Parameters_parametertype_tag0@@": "<p>Nurodo išvesties paviršiaus parametro tipą, kuris bus skaičiuojamas.</p><ul><li>Nuolydis – bus skaičiuojamas aukščio pokyčio dydis. Tai yra numatytoji reikšmė.</li><li>Kryptis – bus skaičiuojama didžiausio kiekvienos gardelės nuolydžio pokyčio kryptis.</li><li>Vidutinis išlinkis – bus matuojamas bendras paviršiaus išlinkis. Jis skaičiuojamas kaip mažiausio ir didžiausio išlinkio vidurkis. Šis išlinkis aprašo paviršiui būdingą iškilimą ar įdubimą nepriklausomai nuo krypties ar gravitacijos poveikio.</li><li>Tangentinis (normalaus kontūro) išlinkis – bus matuojamas geometrinis normalus išlinkis, lygiagretus nuolydžio linijai ir tangentinis kontūro linijai. Šis išlinkis paprastai pritaikomas norint charakterizuoti tėkmės išsiskyrimą ir susitelkimą paviršiuje.</li><li>Profilio (normalios nuolydžio linijos) išlinkis – bus matuojamas geometrinis normalus išlinkis palei nuolydžio liniją. Šis išlinkis paprastai pritaikomas norint charakterizuoti tėkmės greitėjimą ir lėtėjimą paviršiuje.</li><li>Plano (projekcinio kontūro) išlinkis – bus matuojamas išlinkis palei kontūro linijas.</li><li>Kontūro geodezinis sukimasis – bus matuojamas nuolydžio kampo pokyčio palei kontūro linijas dydis.</li><li>Gauso išlinkis – bus matuojamas bendras paviršiaus išlinkis. Jis skaičiuojamas kaip mažiausio ir didžiausio išlinkio sandauga.</li><li>Kasoračio išlinkis – bus matuojamas bendras paviršiaus išlinkis. Jis gali būti lygus nuliui arba bet kokiam kitam teigiamam skaičiui.</li></ul>",
	"@@Surface-Parameters_projectgeodesicazimuths_tag0@@": "<p>Nurodo, ar bus projektuojami geodeziniai azimutai siekiant patikslinti išvesties koordinačių sistemos sukeltą kampo iškraipymą. Šis parametras aktyvus tik tada, kai<strong>parametro tipas</strong>yra<strong>kryptis</strong>.</p><ul><li>Nepasirinkta – geodeziniai azimutai nebus projektuojami. Tai yra numatytoji reikšmė.</li><li>Pasirinkta – bus projektuojami geodeziniai azimutai.</li></ul>",
	"@@Surface-Parameters_raster_tag0@@": "<p>Įvesties paviršiaus rastras. Tai gali būti sveikasis skaičius arba slankiojo kablelio rastras.</p>",
	"@@Surface-Parameters_useadaptiveneighborhood_tag0@@": "<p>Nurodo, ar kaimynystės atstumas kis kintant kraštovaizdžiui (adaptyvus). Didžiausią atstumą lemia kaimynystės atstumas. Mažiausias atstumas yra įvesties rastro gardelės dydis.</p><ul><li>Nepasirinkta – visose padėtyse bus naudojamas vienas (fiksuotas) kaimynystės atstumas. Tai yra numatytoji reikšmė.</li><li>Pasirinkta – visose padėtyse bus naudojamas adaptyvus kaimynystės atstumas.</li></ul>",
	"@@Surface-Parameters_useequatorialaspect_tag0@@": "<p>Nurodo, ar kryptis bus matuojama nuo pusiaujo taško, ar nuo šiaurės ašigalio. Šis parametras aktyvus tik tada, kai<strong>parametro tipas</strong>yra<strong>kryptis</strong>.</p><ul><li>Nepasirinkta – kryptis bus matuojama nuo šiaurės ašigalio. Tai yra numatytoji reikšmė.</li><li>Pasirinkta – kryptis bus matuojama nuo pusiaujo taško.</li></ul>",
	"@@Surface-Parameters_zunit_tag0@@": "<p>Linijinis vertikalių z reikšmių matavimo vienetas.</p><p>Jį apibrėžia vertikali koordinačių sistema, jei tokia yra. Jei vertikalios koordinačių sistemos nėra, z vienetas bus apibrėžiamas iš vienetų sąrašo, siekiant užtikrinti tikslų geodezinį skaičiavimą.</p><ul><li>Colis – linijinis matavimo vienetas bus coliai.</li><li>Pėda – linijinis matavimo vienetas bus pėdos.</li><li>Jardas – linijinis matavimo vienetas bus jardai.</li><li>JAV mylia – linijinis matavimo vienetas bus mylios.</li><li>Jūrmylė – linijinis matavimo vienetas bus jūrmylės.</li><li>Milimetras – linijinis matavimo vienetas bus milimetrai.</li><li>Centimetras – linijinis matavimo vienetas bus centimetrai.</li><li>Metras – linijinis matavimo vienetas bus metrai. Tai yra numatytoji reikšmė.</li><li>Kilometras – linijinis matavimo vienetas bus kilometrai.</li><li>Decimetras – linijinis matavimo vienetas bus decimetrai.</li></ul>",
	"@@Surface-Parameters_analysismask_tag0@@": "<p>Rastras, nurodantis vietas, kurių analizė bus atlikta.</p><p>Rastras gali būti sveikojo skaičiaus arba slankiojo kablelio tipo.</p><p>Kaukę sudarys visi langeliai, kurių reikšmė yra tinkama, įskaitant nulį. Langeliai, kurių kaukės įvestyje yra NoData, išvestyje bus NoData.</p>",
	"@@Geometric-Median_cellsizetype_tag0@@": "<p>Pasirinkite, koks gardelės dydis bus naudojamas išvesties rastre. Jei visų įvesties gardelės dydžiai yra vienodi, visos parinktys duos tokius pačius rezultatus.</p><ul><li>Pirmas – naudoti pirmą įvesties rastrų gardelės dydį.</li><li>Mažiausias – naudoti mažiausią įvesties rastrų gardelės dydį.</li><li>Didžiausias – naudoti didžiausią įvesties rastrų gardelės dydį. Tai yra numatytasis nustatymas.</li><li>Vidutinis – naudoti vidutinį visų įvesties rastrų gardelės dydį.</li><li>Paskutinis – naudoti paskutinį įvesties rastrų gardelės dydį.</li></ul>",
	"@@Geometric-Median_epsilon_tag0@@": "<p>Nurodo dviejų iš eilės einančių iteracijų konvergencijos reikšmę. Kai epsilonas yra mažesnis arba lygus nurodytai reikšmei, iteracija sustabdoma ir naudojamas paskutinės iteracijos rezultatas.</p>",
	"@@Geometric-Median_extenttype_tag0@@": "<p>Pasirinkite, kokią aprėptį naudoti išvesties rastre:</p><ul><li><p>Pirmoji – naudoti pirmojo įvesties rastro aprėptį nustatant apdorojimo aprėptį.</p></li><li>Sankirta – naudoti persidengiančių pikselių aprėptį nustatant apdorojimo aprėptį. Tai yra numatytasis nustatymas.</li><li>Sąjunga – naudoti visų rastrų aprėptį, nustatant apdorojimo aprėptį.</li><li>Paskutinė – naudoti paskutinio įvesties rastro aprėptį nustatant apdorojimo aprėptį.</li></ul>",
	"@@Geometric-Median_maximumnumberofiterations_tag0@@": "<p>Nurodo maksimalų iteracijų skaičių prieš tai, kai skaičiavimas bus baigtas. Skaičiavimas baigiamas, kai pasiekiama ši reikšmė, nepaisant <strong>Epsilon</strong> nustatymo.</p>",
	"@@Geometric-Median_rasters_tag0@@": "<p>Įvesties daugiakanaliai rastrai.</p>",
	"@@Least-Cost-Corridor_inputaccumulativecostdistanceraster1_tag0@@": "<p>Įvesties rastras, nurodantis kaupimo sąnaudų atstumą nuo pirmojo šaltinio.</p><p>Tai turėtų būti kaupimo sąnaudų atstumo išvestis iš funkcijos <strong>Atstumo kaupimas</strong> arba <strong>Atstumo paskirstymas</strong>.</p>",
	"@@Least-Cost-Corridor_inputaccumulativecostdistanceraster2_tag0@@": "<p>Įvesties rastras, nurodantis kaupimo sąnaudų atstumą nuo antrojo šaltinio.</p><p>Tai turėtų būti kaupimo sąnaudų atstumo išvestis iš funkcijos <strong>Atstumo kaupimas</strong> arba <strong>Atstumo paskirstymas</strong>.</p>",
	"@@Least-Cost-Corridor_inputbackdirectionraster1_tag0@@": "<p>Įvesties atgalinės krypties rastras iš pirmojo šaltinio.</p><p>Tai rastrinis duomenų rinkinys, nurodantis kito langelio kryptį mažiausių sąnaudų keliu atgal į pirmąjį šaltinį. Tai yra išvestis iš funkcijos <strong>Atstumo kaupima</strong> arba <strong>Atstumo priskyrimas</strong>.</p>",
	"@@Least-Cost-Corridor_inputbackdirectionraster2_tag0@@": "<p>Įvesties atgalinės krypties rastras iš antrojo šaltinio.</p><p>Tai rastrinis duomenų rinkinys, nurodantis kito langelio kryptį mažiausių sąnaudų keliu atgal į pirmąjį šaltinį. Tai yra išvestis iš funkcijos <strong>Atstumo kaupima</strong> arba <strong>Atstumo priskyrimas</strong>.</p>",
	"@@Least-Cost-Corridor_threshold_tag0@@": "<p>Procentinė arba kaupimo sąnaudų slenkstinė reikšmė, nustatanti, ar nurodytas langelis bus įtrauktas į išvesties koridoriaus rastrą.</p><p>Kai parametras <strong>Slenkstinės reikšmės metodas</strong> nustatytas kaip <strong>Mažiausių sąnaudų procentas</strong>, nurodyta reikšmė nurodo procentinį padidėjimą, kurį reikia pritaikyti nuo susumuotų kaupimo sąnaudų atstumo rastrų minimalios reikšmės. Kai parametras <strong>Slenkstinės reikšmės metodas</strong> nustatytas kaip <strong>Kaupimo sąnaudos</strong>, reikšmė nurodo langelius, kuriuose yra susumuotos kaupimo sąnaudos, lygios arba mažesnės nei reikšmei, kuri bus įtraukta į koridorių.</p><p>Šis parametras yra aktyvus tik jei parametras <strong>Slenkstinės reikšmės metodas</strong> nustatytas kaip <strong>Mažiausių išlaidų procentas</strong> arba <strong>Kaupimo sąnaudos</strong>.</p>",
	"@@Least-Cost-Corridor_thresholdmethod_tag0@@": "<p>Nurodoma, kaip bus apibrėžiama slenkstinė reikšmė.</p><p></p><ul><li><strong>Be slenkstinės reikšmės</strong> – slenkstinė reikšmė netaikoma, o gautas koridorius apims visą įvesties rastrų apimtį. Tai yra numatytoji reikšmė.</li><li><strong>Mažiausių sąnaudų procentas</strong> – slenkstinė reikšmė bus apibrėžta kaip susumuotų kaupimo sąnaudų atstumo rastrų minimalios reikšmės procentas.</li><li><strong>Kaupimo sąnaudos</strong> – slenkstinė reikšmė bus apibrėžta kaupimo sąnaudų atstumo vienetais.</li></ul>"
};
const helpTexts_lt = {
	rfxArgsHelpTexts: rfxArgsHelpTexts
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (helpTexts_lt);


//# sourceMappingURL=help-texts.lt-8ce21b20.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,