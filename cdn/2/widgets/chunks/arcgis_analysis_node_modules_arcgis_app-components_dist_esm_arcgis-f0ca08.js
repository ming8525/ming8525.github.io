"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_arcgis-f0ca08"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-raster-processing-template.entry.js":
/*!************************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-raster-processing-template.entry.js ***!
  \************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   arcgis_raster_processing_template: () => (/* binding */ ArcgisRasterProcessingTemplate)
/* harmony export */ });
/* harmony import */ var _index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-e3bf7da7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-e3bf7da7.js");
/* harmony import */ var _loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./loadModules-b4ac1247.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-b4ac1247.js");
/* harmony import */ var _locale_050b6db9_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./locale-050b6db9.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-050b6db9.js");
/* harmony import */ var _dom_4d367677_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./dom-4d367677.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-4d367677.js");
/* harmony import */ var _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./languageUtil-ef0e54b2.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-ef0e54b2.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */






var ApiStatusType;
(function (ApiStatusType) {
    ApiStatusType[ApiStatusType["Idle"] = 0] = "Idle";
    ApiStatusType[ApiStatusType["Pending"] = 1] = "Pending";
    ApiStatusType[ApiStatusType["Resolved"] = 2] = "Resolved";
    ApiStatusType[ApiStatusType["Rejected"] = 3] = "Rejected";
})(ApiStatusType || (ApiStatusType = {}));

const defaultApiDataState = { status: ApiStatusType.Idle, data: null, error: null };

const addRasterFunctionNameURLParam = (baseURL, rasterFunctionName) => {
    const rasterFunctionNameURIComponent = `{"rasterFunction":"${rasterFunctionName}" }`;
    const renderingRuleURLParam = `renderingRule=${encodeURIComponent(rasterFunctionNameURIComponent)}`;
    return `${baseURL}&${renderingRuleURLParam}`;
};
function getPortalBaseUrl(portal) {
    const { customBaseUrl, portalHostname, urlKey } = portal;
    const { protocol } = window.location;
    const url = urlKey ? `${urlKey}.${customBaseUrl}` : portalHostname;
    return `${protocol}//${url}`;
}

const arcgisRasterProcessingTemplateCss = ":host{display:flex;height:100%}.beta-notice,.warning-notice{max-width:100%;text-align:center;padding:var(--arcgis-app-cap-spacing-half) var(--arcgis-app-side-spacing-half)}.raster-function-thumbnail{height:100px;width:100px;padding:0 8px}.rft-item-loader{display:inline-flex;align-items:center;justify-content:center;width:100%}.loader-text{margin:0 --arcgis-app-side-spacing}";

const ArcgisRasterProcessingTemplate = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisRasterProcessingTemplateClose = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisRasterProcessingTemplateClose", 7);
        this.originalRasterFunction = null;
        this.rasterFunctionInfos = [];
        this.dataURLRegex = /^\s*data:([a-z]+\/[a-z]+(;[a-z\-]+\=[a-z\-]+)?)?(;base64)?,[a-z0-9\!\$\&\'\,\(\)\*\+\,\;\=\-\.\_\~\:\@\/\?\%\s]*\s*$/i;
        // user click handers
        this.handleImportTemplate = () => {
            this.updateShowItemBrowser(true);
        };
        this.handleCustomRFTAdd = (item) => {
            this.fetchRFTItem(item);
        };
        this.handleDone = () => {
            this.arcgisRasterProcessingTemplateClose.emit("save");
        };
        this.handleCancel = () => {
            var _a;
            this.layer.rasterFunction = this.originalRasterFunction;
            this.activeRasterFunctionName = (_a = this.originalRasterFunction) === null || _a === void 0 ? void 0 : _a.functionName;
            this.arcgisRasterProcessingTemplateClose.emit("cancel");
        };
        // state update functions
        this.updateActiveRasterFunctionName = (updatedRasterFunctionName) => {
            this.activeRasterFunctionName = updatedRasterFunctionName;
        };
        this.updateLayerRasterFunction = (updatedRasterFunctionName) => {
            var _a, _b;
            const { layer, customRasterFunction } = this;
            let updatedLayerRasterFunction = {
                functionName: updatedRasterFunctionName
            };
            if (updatedRasterFunctionName === (customRasterFunction === null || customRasterFunction === void 0 ? void 0 : customRasterFunction.name)) {
                updatedLayerRasterFunction = customRasterFunction === null || customRasterFunction === void 0 ? void 0 : customRasterFunction.function;
            }
            if (layer.type === "imagery-tile") {
                layer.rasterFunction =
                    (updatedRasterFunctionName === null || updatedRasterFunctionName === void 0 ? void 0 : updatedRasterFunctionName.toLowerCase()) === "none" ? null : updatedLayerRasterFunction;
            }
            else {
                layer.rasterFunction = updatedLayerRasterFunction;
                if (((_a = layer === null || layer === void 0 ? void 0 : layer.mosaicRule) === null || _a === void 0 ? void 0 : _a.multidimensionalDefinition) &&
                    ((_b = layer.mosaicRule.multidimensionalDefinition[0]) === null || _b === void 0 ? void 0 : _b.variableName) !== updatedRasterFunctionName) {
                    const mdDefinition = layer.mosaicRule.multidimensionalDefinition.map((def) => {
                        def.variableName = "";
                        return def;
                    });
                    layer.mosaicRule.multidimensionalDefinition = mdDefinition;
                }
            }
            this.activeRasterFunctionName = updatedRasterFunctionName;
            layer.renderer = null;
            layer.bandIds = null;
            layer.multidimensionalSubset = null;
        };
        this.updateShowItemBrowser = (updatedShowItemBrowser) => {
            this.showRFTItemBrowser = updatedShowItemBrowser;
        };
        // async calls
        this.fetchRFTItem = async (item) => {
            this.updateRFTItemApiData({ status: ApiStatusType.Pending, data: null, error: null });
            if (!(item === null || item === void 0 ? void 0 : item.id)) {
                this.updateRFTItemApiData({
                    status: ApiStatusType.Rejected,
                    data: null,
                    error: this.strings.errorRetrievingRFTItem
                });
                return;
            }
            try {
                const portalRFTItem = new this.PortalItem({
                    id: item.id,
                    portal: this.portal
                });
                let fetchedRFTData;
                const itemName = item === null || item === void 0 ? void 0 : item.name;
                const itemFormat = itemName === null || itemName === void 0 ? void 0 : itemName.slice(-8);
                const isXMLFormat = (itemFormat === null || itemFormat === void 0 ? void 0 : itemFormat.toLowerCase()) === ".rft.xml";
                if (isXMLFormat) {
                    fetchedRFTData = await this.convertRFTFormat(item.id, "json");
                }
                else {
                    fetchedRFTData = await portalRFTItem.fetchData("json");
                }
                const rftData = this.RasterFunction.fromJSON({
                    rasterFunctionDefinition: fetchedRFTData
                });
                await this.validateRFT(rftData);
                this.updateRFTItemApiData({
                    status: ApiStatusType.Resolved,
                    data: rftData,
                    error: null
                });
                this.updateCustomRasterFunction(rftData);
            }
            catch (error) {
                this.updateRFTItemApiData({
                    status: ApiStatusType.Rejected,
                    data: null,
                    error: error.message
                });
            }
            this.updateShowItemBrowser(false);
        };
        this.validateRFT = async (rft) => {
            var _a, _b;
            try {
                const { layer, esriRequest, strings } = this;
                const rftJson = rft.toJSON();
                const validationData = layer.type === "imagery-tile"
                    ? await esriRequest(layer.url, {
                        query: {
                            f: "json",
                            renderingRule: JSON.stringify((_a = rftJson === null || rftJson === void 0 ? void 0 : rftJson.rasterFunctionDefinition) !== null && _a !== void 0 ? _a : rftJson)
                        }
                    })
                    : await layer.generateRasterInfo(rft);
                if (!validationData) {
                    throw new Error(strings.rftValidationFailed);
                }
            }
            catch (error) {
                const { strings: { rftValidationFailed, unsupportedFunction } } = this;
                const index = (_b = error.message) === null || _b === void 0 ? void 0 : _b.toLowerCase().indexOf("unsupported raster function:");
                const isUnsupportedRasterFunction = index > -1;
                let errorMessage = rftValidationFailed;
                if (isUnsupportedRasterFunction) {
                    errorMessage = `${rftValidationFailed} ${unsupportedFunction.replace("${rasterFunction}", error.message.slice(index + 28).trim())}`;
                }
                throw new Error(errorMessage);
            }
        };
        this.convertRFTFormat = async (rftItemId, format) => {
            const rasterUtilitiesServer = this.portal.helperServices.rasterUtilities;
            if (!rasterUtilitiesServer) {
                throw new Error(this.strings.rasterutilitySeverMissing);
            }
            const url = `${rasterUtilitiesServer.url}/ConvertRasterFunctionTemplate`;
            const params = {
                inputRasterFunction: JSON.stringify({ itemId: rftItemId }),
                format
            };
            const geoProcessorJob = await this.geoprocessor.submitJob(url, params);
            const geoProcessorJobWaitOptions = {
                interval: 1500
            };
            await geoProcessorJob.waitForJobCompletion(geoProcessorJobWaitOptions);
            const response = await geoProcessorJob.fetchResultData("outputRasterFunction");
            const convertedRFTUrl = response === null || response === void 0 ? void 0 : response.value;
            if (!convertedRFTUrl) {
                throw new Error(this.strings.unsupportedFunction);
            }
            const convertedRFTData = await this.esriRequest(convertedRFTUrl);
            return convertedRFTData.data;
        };
        // utilities
        this.createCustomRasterFunction = (rasterFunction) => {
            var _a;
            const { strings: { custom }, layer } = this;
            const rftJson = (_a = rasterFunction === null || rasterFunction === void 0 ? void 0 : rasterFunction.rasterFunctionDefinition) !== null && _a !== void 0 ? _a : rasterFunction;
            const { functionName } = rasterFunction;
            const { description, thumbnailEx: thumbnail, help } = rftJson;
            const customRFT = {
                name: `${custom}- ${functionName}`,
                function: rasterFunction,
                description,
                thumbnail,
                help,
                functionType: 0
            };
            if (!thumbnail && !this.dataURLRegex.test(thumbnail)) {
                const isImageryTileLayer = layer.type === "imagery-tile";
                if (isImageryTileLayer) {
                    customRFT.thumbnail = `${this.portal.staticImagesUrl}/rasterfunctiontemplate.png`;
                }
                else {
                    const exportImageBaseURL = this.getExportImageBaseURL();
                    const renderingRuleStr = `renderingRule=${encodeURIComponent(JSON.stringify(rftJson))}`; // @TODO Dev functino generalize utils.js
                    customRFT.thumbnail = `${exportImageBaseURL}&${renderingRuleStr}`;
                }
            }
            return customRFT;
        };
        this.getRasterFunctionInfos = () => {
            const { type } = this.layer;
            if (type === "imagery-tile") {
                return [
                    {
                        name: "None",
                        description: this.strings.noneRasterFunctionDescription,
                        help: "",
                        functionType: 0,
                        thumbnail: `${this.portal.staticImagesUrl}/rasterfunctiontemplate.png`
                    }
                ];
            }
            const rasterFunctionInfos = this.fixImageryRasterFunctionsThumbnail(this.layer.rasterFunctionInfos);
            return rasterFunctionInfos;
        };
        this.fixImageryRasterFunctionsThumbnail = (rasterFunctionInfos) => {
            const { dataURLRegex, layer, strings } = this;
            if (layer.type !== "imagery") {
                return rasterFunctionInfos;
            }
            const exportImageBaseURL = this.getExportImageBaseURL();
            return rasterFunctionInfos.map((rasterFunctionInfo) => {
                var _a;
                const isNoneFunction = rasterFunctionInfo.name.toLowerCase() === "none";
                const thumbnailURL = addRasterFunctionNameURLParam(exportImageBaseURL, rasterFunctionInfo.name);
                if (isNoneFunction) {
                    const noneFunctionDescription = strings.noneRasterFunctionDescription;
                    let thumbnail = thumbnailURL;
                    const bandIds = layer.bandIds;
                    if ((bandIds === null || bandIds === void 0 ? void 0 : bandIds.length) >= 3) {
                        thumbnail = `${thumbnailURL}+&bandIds=${bandIds[0]},${bandIds[1]},${bandIds[2]}`;
                    }
                    const noneFunctionThumbnail = thumbnail;
                    return Object.assign(Object.assign({}, rasterFunctionInfo), { description: noneFunctionDescription, thumbnail: noneFunctionThumbnail });
                }
                const functionDescription = (_a = rasterFunctionInfo.description) !== null && _a !== void 0 ? _a : "";
                let functionalThumbnail = rasterFunctionInfo.thumbnail;
                if (!rasterFunctionInfo.thumbnail || !dataURLRegex.test(rasterFunctionInfo.thumbnail)) {
                    functionalThumbnail = thumbnailURL;
                }
                return Object.assign(Object.assign({}, rasterFunctionInfo), { description: functionDescription, thumbnail: functionalThumbnail });
            });
        };
        this.getExportImageBaseURL = () => {
            var _a;
            const { layer, IdentityManager } = this;
            if (layer === null || layer.fullExtent === null) {
                return;
            }
            const layerExtent = layer.fullExtent.clone();
            const width = layer.fullExtent.width;
            const height = layer.fullExtent.height;
            if (width / height >= 2.0 || height / width >= 2.0) {
                // Fix for non-square services...
                const sideLength = Math.min(width, height) / 2.0;
                const center = layer.fullExtent.center;
                layerExtent.xmin = center.x - sideLength;
                layerExtent.ymin = center.y - sideLength;
                layerExtent.xmax = center.x + sideLength;
                layerExtent.ymax = center.y + sideLength;
            }
            const layerExtentStr = layerExtent.xmin + "," + layerExtent.ymin + "," + layerExtent.xmax + "," + layerExtent.ymax;
            const credential = IdentityManager.findCredential(layer.url);
            const token = credential === null || credential === void 0 ? void 0 : credential.token;
            const params = new URLSearchParams(Object.assign(Object.assign({ bbox: layerExtentStr, token, imageSize: "400,400" }, layer.customParameters), { f: "image" }));
            if (!token) {
                params.delete("token");
            }
            const serviceInfo = layer.sourceJSON;
            if (serviceInfo.bandCount === 2 && ((_a = serviceInfo.serviceDataType) === null || _a === void 0 ? void 0 : _a.includes("Vector"))) {
                params.append("renderingRule", JSON.stringify({
                    rasterFunction: "VectorFieldRenderer",
                    rasterFunctionArguments: {
                        MagnitudeBandID: 0,
                        DirectionBandID: 1,
                        IsUVComponents: serviceInfo.serviceDataType === "esriImageServiceDataTypeVector-UV",
                        // 1: arithmetic, 2: angular
                        ReferenceSystem: 1,
                        // 0: from, 1: to
                        MassFlowAngleRepresentation: 0,
                        // default is 50. we use small thumbnail (e.g. 200 x 133) so need more to better represent
                        SymbolTileSize: 30,
                        SymbolTileSizeUnits: 100,
                        CalculationMethod: "Vector Average",
                        SymbologyName: "Single Arrow",
                        MinimumMagnitude: 1,
                        MaximumMagnitude: -1,
                        MinimumSymbolSize: 40,
                        MaximumSymbolSize: 80
                    },
                    outputPixelType: "U8",
                    variableName: "Raster"
                }));
            }
            return `${layer.url}/exportImage?${params.toString()}`;
        };
        this.layer = undefined;
        this.portal = undefined;
        this.dismissible = false;
        this.showRendererWarning = false;
        this.activeRasterFunctionName = null;
        this.customRasterFunction = null;
        this.showRFTItemBrowser = false;
        this.items = undefined;
        this.pagination = undefined;
        this.rftItemData = defaultApiDataState;
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    async componentWillLoad() {
        const [IdentityManager, PortalItem, RasterFunction, geoprocessor, esriRequest] = await (0,_loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_1__.l)([
            "esri/identity/IdentityManager",
            "esri/portal/PortalItem",
            "esri/layers/support/RasterFunction",
            "esri/rest/geoprocessor",
            "esri/request"
        ]);
        this.IdentityManager = IdentityManager;
        this.PortalItem = PortalItem;
        this.RasterFunction = RasterFunction;
        this.geoprocessor = geoprocessor;
        this.esriRequest = esriRequest;
        const [strings] = await (0,_locale_050b6db9_js__WEBPACK_IMPORTED_MODULE_2__.g)(this.hostElement);
        this.strings = strings;
        await this.init();
    }
    // --------------------------------------------------------------------------
    //
    //  Renderer methods
    //
    // --------------------------------------------------------------------------
    render() {
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.H, { class: "calcite-match-height" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-flow", null, this.showRFTItemBrowser ? this.renderRFTBrowsePanel() : this.renderTemplatePanel())));
    }
    renderRFTBrowsePanel() {
        const { layer, rftItemData, strings } = this;
        const isRFTItemLoading = rftItemData.status === ApiStatusType.Pending;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-flow-item", { heading: strings.chooseRasterFunctionTemplate, loading: !layer }, this.renderBack(), isRFTItemLoading && this.renderRFTItemLoader(), this.renderRFTItemBrowser()));
    }
    renderRFTItemBrowser() {
        const { portal, strings, pagination } = this;
        const query = `type:"Raster function template"`;
        const baseUrl = `${getPortalBaseUrl(portal)}/home/`;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-item-browser", { api: 4, portal: portal, config: { baseUrl }, q: query, user: portal.user, view: "list", onArcgisItemBrowserUpdate: (event) => {
                const { results, num, start, total } = event.detail;
                this.items = results;
                this.pagination = { start, num, total };
            }, onArcgisItemBrowserLoading: () => (this.items = []) }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-item-browser-top-bar", { slot: "top-bar" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-item-browser-bucket-select", { slot: "bucket" }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-item-browser-search", { slot: "search", placeholder: strings.itemBrowserPlaceholder, term: "" })), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-item-browser-sort", { slot: "sort" }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-item-browser-filters", { slot: "filters" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-item-browser-filter-extent", null), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-item-browser-filter-folder", null), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-item-browser-filter-categories", null), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-item-browser-filter-date", { property: "modified" }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-item-browser-filter-date", { property: "created" }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-item-browser-filter-tags", null), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-item-browser-filter-sharing", null), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-item-browser-filter-content-status", null)), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-item-browser-content", { slot: "content" }, (this.items || []).map((item) => ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-item-browser-card", { key: item.id, baseUrl: baseUrl, item: item, portal: portal, preview: "top", showDateUpdated: true, showItemType: false, showOwner: true, showThumbnail: true, user: portal.user }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { slot: "actions-end", appearance: "transparent", iconStart: "plus-circle", kind: "neutral", scale: "s", onClick: () => this.handleCustomRFTAdd(item) }))))), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-item-browser-pagination", { slot: "pagination", total: pagination === null || pagination === void 0 ? void 0 : pagination.total, start: pagination === null || pagination === void 0 ? void 0 : pagination.start, num: pagination === null || pagination === void 0 ? void 0 : pagination.num })));
    }
    renderRFTItemLoader() {
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "rft-item-loader" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-loader", { inline: true, label: "rftItemLoader", type: "indeterminate" }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "loader-text" }, this.strings.rftItemLoaderText)));
    }
    renderTemplatePanel() {
        const { layer, rftItemData, strings, showRendererWarning, dismissible } = this;
        const shouldRenderBetaNotice = layer.type === "imagery-tile";
        const hasCustomRFTValidationError = rftItemData.status === ApiStatusType.Rejected;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-flow-item", { loading: !layer, heading: strings.processingTemplates }, dismissible && this.renderClose(), shouldRenderBetaNotice && this.renderBetaNotice(), showRendererWarning && this.renderWarningNotice(), this.renderImportTemplateButton(), hasCustomRFTValidationError && this.renderValidationError(rftItemData.error), this.renderServerRasterFunctionsInfo(), this.renderFooterActions()));
    }
    renderBetaNotice() {
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "beta-notice" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-notice", { closable: true, icon: true, open: true, scale: "s" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "message" }, this.strings.betaNotice))));
    }
    renderWarningNotice() {
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "warning-notice" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-notice", { closable: true, icon: true, kind: "warning", open: true, scale: "s" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "message" }, this.strings.warningNotice))));
    }
    renderImportTemplateButton() {
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { appearance: "transparent", "icon-start": "plus", onClick: this.handleImportTemplate }, this.strings.importUserTemplate));
    }
    renderValidationError(errorMessage) {
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-alert", { kind: "danger", label: errorMessage, open: true }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "title" }, this.strings.validationErrorTitle), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "message" }, errorMessage)));
    }
    renderServerRasterFunctionsInfo() {
        const { customRasterFunction, rasterFunctionInfos, strings } = this;
        if ((rasterFunctionInfos === null || rasterFunctionInfos === void 0 ? void 0 : rasterFunctionInfos.length) === 0) {
            return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-list", null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-list-item", { description: strings.noRasterFunctions })));
        }
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-list", { selectionMode: "single-persist" }, customRasterFunction
            ? this.renderRasterFunctionInfo(customRasterFunction, rasterFunctionInfos.length)
            : null, rasterFunctionInfos.map((rasterFunctionInfo, index) => this.renderRasterFunctionInfo(rasterFunctionInfo, index))));
    }
    renderRasterFunctionInfo(rasterFunctionInfo, id) {
        var _a, _b;
        const { name, description, thumbnail } = rasterFunctionInfo;
        const isDescriptionLengthy = (description === null || description === void 0 ? void 0 : description.length) > 100;
        const showTooltip = isDescriptionLengthy;
        const itemDescription = isDescriptionLengthy ? `${description.slice(0, 100)}...` : description;
        const listItemNodeId = `${name}_raster_function_info_${id}`;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { key: id }, showTooltip && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-tooltip", { "reference-element": listItemNodeId }, description)), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-list-item", { id: listItemNodeId, description: itemDescription, label: name, value: name, key: name, selected: name === ((_a = this.activeRasterFunctionName) !== null && _a !== void 0 ? _a : (_b = this.rasterFunctionInfos[0]) === null || _b === void 0 ? void 0 : _b.name), onCalciteListItemSelect: () => this.updateLayerRasterFunction(name) }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { slot: "actions-start", compact: true, scale: "s", text: name, onClick: () => this.updateLayerRasterFunction(name) }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("img", { src: thumbnail, class: "raster-function-thumbnail" })))));
    }
    renderBack() {
        const backActionId = "raster-processing-template-back-action";
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { id: backActionId, text: this.strings.back, scale: "s", slot: "header-actions-start", onClick: () => this.updateShowItemBrowser(false) }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { scale: "s", icon: "chevron-left" }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-tooltip", { "reference-element": backActionId, slot: "tooltip" }, this.strings.back)));
    }
    renderClose() {
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { text: this.strings.close, scale: "s", slot: "header-actions-end", onClick: this.handleCancel }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { scale: "m", icon: "x" })));
    }
    renderFooterActions() {
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.F, null, this.renderDoneButton(), this.renderCancelButton()));
    }
    renderDoneButton() {
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { slot: "footer", color: "blue", width: "half", onClick: this.handleDone }, this.strings.done));
    }
    renderCancelButton() {
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { slot: "footer", appearance: "outline-fill", width: "half", onClick: this.handleCancel }, this.strings.cancel));
    }
    // --------------------------------------------------------------------------
    //
    //  Private methods
    //
    // --------------------------------------------------------------------------
    async init() {
        var _a, _b;
        await this.layer.load();
        this.originalRasterFunction = this.layer.rasterFunction;
        const originalRasterFunctionName = (_b = (_a = this.originalRasterFunction) === null || _a === void 0 ? void 0 : _a.functionName) !== null && _b !== void 0 ? _b : null;
        this.updateActiveRasterFunctionName(originalRasterFunctionName);
        this.rasterFunctionInfos = this.getRasterFunctionInfos();
        const isActiveRasterFunctionCustom = this.activeRasterFunctionName &&
            !this.rasterFunctionInfos.some(({ name }) => name === this.activeRasterFunctionName);
        if (isActiveRasterFunctionCustom) {
            this.customRasterFunction = this.createCustomRasterFunction(this.originalRasterFunction);
        }
    }
    updateCustomRasterFunction(updatedCustomRasterFunction) {
        var _a;
        const updatedCustomRFT = this.createCustomRasterFunction(updatedCustomRasterFunction);
        if (((_a = this.customRasterFunction) === null || _a === void 0 ? void 0 : _a.name) !== updatedCustomRFT.name) {
            this.customRasterFunction = updatedCustomRFT;
            this.updateActiveRasterFunctionName(updatedCustomRFT.name);
            this.updateLayerRasterFunction(updatedCustomRFT.name);
        }
    }
    updateRFTItemApiData(updatedRFTItemApiData) {
        this.rftItemData = updatedRFTItemApiData;
    }
    get hostElement() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisRasterProcessingTemplate.style = arcgisRasterProcessingTemplateCss;



//# sourceMappingURL=arcgis-raster-processing-template.entry.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-ef0e54b2.js":
/*!******************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-ef0e54b2.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   C: () => (/* binding */ CSS_UTILITY),
/* harmony export */   a: () => (/* binding */ formatDate),
/* harmony export */   b: () => (/* binding */ formatPlural),
/* harmony export */   f: () => (/* binding */ formatNumber),
/* harmony export */   g: () => (/* binding */ getElementDir),
/* harmony export */   l: () => (/* binding */ languageMap)
/* harmony export */ });
/* harmony import */ var _loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./loadModules-b4ac1247.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-b4ac1247.js");
/* harmony import */ var _dom_4d367677_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dom-4d367677.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-4d367677.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */



const languageMap = new Map([
    ["ar", "ar"],
    ["bg", "bg"],
    ["bs", "bs"],
    ["ca", "ca"],
    ["cs", "cs"],
    ["da", "da"],
    ["de", "de"],
    ["el", "el"],
    ["en", "en"],
    ["es", "es"],
    ["et", "et"],
    ["fi", "fi"],
    ["fr", "fr"],
    ["he", "he"],
    ["hr", "hr"],
    ["hu", "hu"],
    ["id", "id"],
    ["it", "it"],
    ["ja", "ja"],
    ["ko", "ko"],
    ["lt", "lt"],
    ["lv", "lv"],
    ["nb", "nb"],
    ["nl", "nl"],
    ["pl", "pl"],
    ["pt-br", "pt-BR"],
    ["pt-pt", "pt-PT"],
    ["ro", "ro"],
    ["ru", "ru"],
    ["sk", "sk"],
    ["sl", "sl"],
    ["sr", "sr"],
    ["sv", "sv"],
    ["th", "th"],
    ["tr", "tr"],
    ["uk", "uk"],
    ["vi", "vi"],
    ["zh-cn", "zh-CN"],
    ["zh-hk", "zh-HK"],
    ["zh-tw", "zh-TW"]
]);
// rtl
function getElementDir(el) {
    return getElementProp(el, "dir", "ltr");
}
function getElementProp(el, prop, value) {
    const closestWithProp = (0,_dom_4d367677_js__WEBPACK_IMPORTED_MODULE_1__.c)(el, `[${prop}]`);
    return closestWithProp ? closestWithProp.getAttribute(prop) : value;
}
// css
const CSS_UTILITY = {
    rtl: "arcgis--rtl"
};
async function formatNumber(number, options) {
    const { api, type, places } = options || {};
    if (api === 4) {
        const [intl] = await (0,_loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_0__.l)(["esri/intl"]);
        const numberFormatIntlOptions = intl.convertNumberFormatToIntlOptions({
            places,
            style: type,
            digitSeparator: true
        });
        return intl.formatNumber(number, Object.assign(Object.assign({}, numberFormatIntlOptions), { style: type }));
    }
    const [dojoNumber] = await (0,_loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_0__.l)(["dojo/number"]);
    return dojoNumber.format(number, {
        type,
        places,
        pattern: options === null || options === void 0 ? void 0 : options.pattern
    });
}
const cache = {};
function formatDate(date) {
    const lang = document.documentElement.lang;
    const dayShortMonthYear = {
        year: "numeric",
        month: "short",
        day: "numeric"
    };
    if (!cache[lang]) {
        cache[lang] = new Intl.DateTimeFormat(document.documentElement.lang, dayShortMonthYear);
    }
    return cache[lang].format(date);
}
function formatPlural(lang, stringObj, number) {
    const singles = ["id", "ja", "ko", "th", "vi", "zh-cn", "zh-hk", "zh-tw"];
    const likeEnglish = [
        "en",
        "ca",
        "da",
        "de",
        "el",
        "es",
        "et",
        "fi",
        "hi",
        "hu",
        "it",
        "nb",
        "nl",
        "pt-pt",
        "sv",
        "tr"
    ];
    const locale = lang !== null && lang !== void 0 ? lang : "en";
    // if the number is one, or it is a "simple" language, return the 1 string
    if (number === 1 || singles.includes(locale)) {
        return stringObj.single.replace("${number}", "1");
    }
    // if the number is not 1 and the language uses the same pluralization strategy as english,
    // return the multiple string
    if (number !== 1 && likeEnglish.includes(locale)) {
        return stringObj.multiple.replace("${number}", `${number}`);
    }
    // if none of the above worked, return the "unknown" string
    return stringObj.unknown.replace("${number}", `${number}`);
}



//# sourceMappingURL=languageUtil-ef0e54b2.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-050b6db9.js":
/*!************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-050b6db9.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ getComponentClosestLanguage),
/* harmony export */   g: () => (/* binding */ getLocaleComponentStrings)
/* harmony export */ });
/* harmony import */ var _dom_4d367677_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dom-4d367677.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-4d367677.js");
/* harmony import */ var _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./languageUtil-ef0e54b2.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-ef0e54b2.js");
/* harmony import */ var _index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./index-e3bf7da7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-e3bf7da7.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */




// https://medium.com/stencil-tricks/implementing-internationalisation-i18n-with-stencil-5e6559554117
function getComponentClosestLanguage(element) {
    var _a, _b, _c;
    const closestElement = (_a = (0,_dom_4d367677_js__WEBPACK_IMPORTED_MODULE_0__.c)(element, "[lang]")) !== null && _a !== void 0 ? _a : (_c = (_b = element.shadowRoot) === null || _b === void 0 ? void 0 : _b.ownerDocument) === null || _c === void 0 ? void 0 : _c.documentElement;
    // language set by the calling application or browser. defaults to english.
    const lang = ((closestElement === null || closestElement === void 0 ? void 0 : closestElement.lang) || (navigator === null || navigator === void 0 ? void 0 : navigator.language) || "en").toLowerCase();
    if (_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang)) {
        return _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang);
    }
    else {
        // "ru-RU" maps to "ru" use case
        if (_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang.slice(0, 2))) {
            return _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang.slice(0, 2));
        }
        else {
            return "en";
        }
    }
}
function getComponentClosestLanguageIntl(element) {
    var _a, _b, _c;
    // it's OK if we don't have the 4 letter language file for it
    // 4 letter language code needed for formatting numbers
    const closestElement = (_a = (0,_dom_4d367677_js__WEBPACK_IMPORTED_MODULE_0__.c)(element, "[lang]")) !== null && _a !== void 0 ? _a : (_c = (_b = element.shadowRoot) === null || _b === void 0 ? void 0 : _b.ownerDocument) === null || _c === void 0 ? void 0 : _c.documentElement;
    // language set by the calling application or browser. defaults to english.
    const lang = ((closestElement === null || closestElement === void 0 ? void 0 : closestElement.lang) || (navigator === null || navigator === void 0 ? void 0 : navigator.language) || "en").toLowerCase();
    if (_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang)) {
        return _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang);
    }
    else {
        if (_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang.slice(0, 2))) {
            // we support the 2 letter coded language
            // e.g. it-CH vs it
            return lang;
        }
        else {
            return "en";
        }
    }
}
function fetchLocaleStringsForComponent(componentName, locale) {
    return new Promise((resolve, reject) => {
        fetch((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_2__.a)(`../arcgis-app-assets/i18n/${componentName}.i18n.${locale}.json`)).then((result) => {
            if (result.ok)
                resolve(result.json());
            else
                reject();
        }, () => reject());
    });
}
const stringCache = {};
function fetchLocaleStringsFromCache(componentName, locale) {
    const id = `${componentName}${locale}`;
    if (!stringCache[id]) {
        stringCache[id] = fetchLocaleStringsForComponent(componentName, locale);
    }
    return stringCache[id];
}
/**
 * Get strings and language codes.
 * This method returns 2 language codes.
 * The first one returns a code that's also supported as a language file.
 * The second one returns a code where there is support for the first 2 letters of the code as part of a language file,
 * but will return the original 4 letter code from the page.
 * E.g. For "it-ch" it will return "it" as the first language code and "it-ch" as the second.
 * The second one is required for esri.intl.setLocale() to get the correct formatting.
 *
 * If a tagName is provided it will overwite the element's tagName
 *
 *  @return [ strings, first language code, second language code]
 */
async function getLocaleComponentStrings(element, tagName) {
    const componentName = tagName || element.tagName.toLowerCase();
    const componentLanguage = getComponentClosestLanguage(element);
    const componentLanguageIntl = getComponentClosestLanguageIntl(element);
    let strings;
    try {
        strings = await fetchLocaleStringsFromCache(componentName, componentLanguage);
    }
    catch (e) {
        console.warn(`no locale for ${componentName} (${componentLanguage}) loading default locale en.`);
        strings = await fetchLocaleStringsFromCache(componentName, "en");
    }
    return [strings, componentLanguage, componentLanguageIntl];
}



//# sourceMappingURL=locale-050b6db9.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,