"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_arcgis-7900af"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-sketch-actions-popover_2.entry.js":
/*!**********************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-sketch-actions-popover_2.entry.js ***!
  \**********************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   arcgis_sketch_actions_popover: () => (/* binding */ ArcgisSketchActionsPopover),
/* harmony export */   arcgis_sketch_features: () => (/* binding */ ArcgisSketchFeatures)
/* harmony export */ });
/* harmony import */ var _index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-e3bf7da7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-e3bf7da7.js");
/* harmony import */ var _index_05956cab_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index-05956cab.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-05956cab.js");
/* harmony import */ var _loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./loadModules-b4ac1247.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-b4ac1247.js");
/* harmony import */ var _locale_050b6db9_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./locale-050b6db9.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-050b6db9.js");
/* harmony import */ var _storage_0353a769_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./storage-0353a769.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/storage-0353a769.js");
/* harmony import */ var _functional_44de8fcf_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./functional-44de8fcf.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-44de8fcf.js");
/* harmony import */ var _dom_4d367677_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./dom-4d367677.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-4d367677.js");
/* harmony import */ var _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./languageUtil-ef0e54b2.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-ef0e54b2.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */









const sketchFeaturesStore = (0,_index_05956cab_js__WEBPACK_IMPORTED_MODULE_1__.c)({
    strings: null,
    snappingOptions: null,
    snappingSessionStorageIds: null
});
const sketchFeaturesState = sketchFeaturesStore.state;

const ArcgisSketchActionsPopover = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisSketchActionsBulkEdit = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSketchActionsBulkEdit", 7);
        this.arcgisSketchActionsBulkDuplicate = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSketchActionsBulkDuplicate", 7);
        this.arcgisSketchActionsAddToNewSketch = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSketchActionsAddToNewSketch", 7);
        this.arcgisSketchActionsBulkDelete = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSketchActionsBulkDelete", 7);
        this.arcgisSketchActionsPopoverClose = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSketchActionsPopoverClose", 7);
        this.referenceElement = undefined;
        this.selectedGraphics = undefined;
    }
    // --------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    // --------------------------------------------------------------------------
    async componentWillLoad() {
        this.strings = sketchFeaturesState.strings;
    }
    //--------------------------------------------------------------------------
    //
    //  Public Methods
    //
    //--------------------------------------------------------------------------
    async setFocus() {
        setTimeout(() => { var _a; return (_a = this.editNode) === null || _a === void 0 ? void 0 : _a.setFocus(); }, 300);
    }
    //--------------------------------------------------------------------------
    //
    //  Render Methods
    //
    //--------------------------------------------------------------------------
    render() {
        var _a, _b;
        const { strings } = this;
        if (!((_a = this.selectedGraphics) === null || _a === void 0 ? void 0 : _a.length)) {
            return null;
        }
        const rect = (_b = this.referenceElement) === null || _b === void 0 ? void 0 : _b.getBoundingClientRect();
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.H, null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-popover", { class: "js-app-flyout", placement: "leading-start", offsetDistance: 10, offsetSkidding: (rect.height - 120) / 4 + 70, pointerDisabled: true, label: strings.edit, triggerDisabled: true, referenceElement: this.referenceElement, open: true, onCalcitePopoverClose: () => this.arcgisSketchActionsPopoverClose.emit() }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-panel", { heading: strings.actions }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { label: strings.edit, text: strings.edit, textEnabled: true, onClick: () => this.arcgisSketchActionsBulkEdit.emit({ graphics: this.selectedGraphics }), ref: (node) => (this.editNode = node) }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { label: strings.duplicate, text: strings.duplicate, textEnabled: true, onClick: () => this.arcgisSketchActionsBulkDuplicate.emit() }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { label: strings.addToNewSketch, text: strings.addToNewSketch, textEnabled: true, onClick: () => this.arcgisSketchActionsAddToNewSketch.emit() }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { label: strings.delete, text: strings.delete, textEnabled: true, onClick: () => this.arcgisSketchActionsBulkDelete.emit() })))));
    }
    get hostElement() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};

class svModel {
    constructor(mapNotesLayer, mapView, SketchViewModel, snappingOptions, onGraphicUpdate) {
        this.mapNotesLayer = mapNotesLayer;
        this.mapView = mapView;
        // Point
        this.sketchViewModelPoint = new SketchViewModel({
            layer: this.mapNotesLayer.pointLayer,
            view: this.mapView,
            updateOnGraphicClick: false,
            snappingOptions
        });
        this.sketchViewModelPoint.on("update", (event) => onGraphicUpdate(event));
        // Line
        this.sketchViewModelLine = new SketchViewModel({
            layer: this.mapNotesLayer.polylineLayer,
            view: this.mapView,
            updateOnGraphicClick: false,
            snappingOptions
        });
        this.sketchViewModelLine.on("update", (event) => onGraphicUpdate(event));
        // Polygon
        this.sketchViewModelPolygon = new SketchViewModel({
            layer: this.mapNotesLayer.polygonLayer,
            view: this.mapView,
            updateOnGraphicClick: false,
            snappingOptions
        });
        this.sketchViewModelPolygon.on("update", (event) => onGraphicUpdate(event));
        // Text
        this.sketchViewModelText = new SketchViewModel({
            layer: this.mapNotesLayer.textLayer,
            view: this.mapView,
            updateOnGraphicClick: false,
            snappingOptions
        });
        this.sketchViewModelText.on("update", (event) => onGraphicUpdate(event));
    }
    cancel() {
        this.cancelPoint();
        this.cancelLine();
        this.cancelPolygon();
        this.cancelText();
    }
    delete() {
        this.deletePoint();
        this.deleteLine();
        this.deletePolygon();
        this.deleteText();
    }
    duplicate() {
        this.duplicatePoint();
        this.duplicateLine();
        this.duplicatePolygon();
        this.duplicateText();
    }
    destroy() {
        this.destroyPoint();
        this.destroyLine();
        this.destroyPolygon();
        this.destroyText();
    }
    // Point
    updatePoint(graphics) {
        this.sketchViewModelPoint.update(graphics);
    }
    cancelPoint() {
        this.sketchViewModelPoint.cancel();
    }
    deletePoint() {
        this.sketchViewModelPoint.delete();
    }
    duplicatePoint() {
        this.sketchViewModelPoint.duplicate();
    }
    destroyPoint() {
        this.sketchViewModelPoint.destroy();
    }
    // Line
    updateLine(graphics) {
        this.sketchViewModelLine.update(graphics);
    }
    cancelLine() {
        this.sketchViewModelLine.cancel();
    }
    deleteLine() {
        this.sketchViewModelLine.delete();
    }
    duplicateLine() {
        this.sketchViewModelLine.duplicate();
    }
    destroyLine() {
        this.sketchViewModelLine.destroy();
    }
    // Polygon
    updatePolygon(graphics) {
        this.sketchViewModelPolygon.update(graphics);
    }
    cancelPolygon() {
        this.sketchViewModelPolygon.cancel();
    }
    deletePolygon() {
        this.sketchViewModelPolygon.delete();
    }
    duplicatePolygon() {
        this.sketchViewModelPolygon.duplicate();
    }
    destroyPolygon() {
        this.sketchViewModelPolygon.destroy();
    }
    // Text
    updateText(graphics) {
        this.sketchViewModelText.update(graphics);
    }
    cancelText() {
        this.sketchViewModelText.cancel();
    }
    deleteText() {
        this.sketchViewModelText.delete();
    }
    duplicateText() {
        this.sketchViewModelText.duplicate();
    }
    destroyText() {
        this.sketchViewModelText.destroy();
    }
}

function getGeometryTypeFromGraphic(currGraphic) {
    var _a, _b;
    switch ((_a = currGraphic === null || currGraphic === void 0 ? void 0 : currGraphic.geometry) === null || _a === void 0 ? void 0 : _a.type) {
        case "point":
            if (((_b = currGraphic === null || currGraphic === void 0 ? void 0 : currGraphic.symbol) === null || _b === void 0 ? void 0 : _b.type) === "text") {
                return "text";
            }
            else {
                return "point";
            }
        case "polyline":
            return "polyline";
        default:
            return "polygon";
    }
}

const saveSnappingToStorage = (snappingOptions, currentSnappingSessionStorageId) => {
    // get enabled layers and save object in session storage
    const featureSourcesIds = [
        ...new Set([...snappingOptions.featureSources.filter((source) => source.enabled).map((source) => source.layer.id)])
    ];
    const snappingObject = {
        enabled: snappingOptions.enabled,
        selfEnabled: snappingOptions.selfEnabled,
        featureEnabled: snappingOptions.featureEnabled,
        featureSourcesIds: featureSourcesIds
    };
    (0,_storage_0353a769_js__WEBPACK_IMPORTED_MODULE_4__.a)(currentSnappingSessionStorageId, snappingObject, true);
};
const getSnappingOptions = (snappingSessionStorageIds, layer, mapView, SnappingOptions) => {
    const snapping = getSnappingFromStorage(snappingSessionStorageIds) || {
        enabled: true,
        selfEnabled: true,
        featureEnabled: true,
        featureSourcesIds: [layer.id]
    };
    return new SnappingOptions({
        enabled: snapping.enabled,
        selfEnabled: snapping.selfEnabled,
        featureEnabled: snapping.featureEnabled,
        featureSources: getFeatureSourcesFromLayerIds(mapView, snapping.featureSourcesIds)
    });
};
const getFeatureSourcesFromLayerIds = (mapView, layerIds) => {
    const featureSources = [];
    layerIds.forEach((layerId) => {
        mapView.map.allLayers.toArray().find((layer) => {
            if ((layer === null || layer === void 0 ? void 0 : layer.type) === "map-notes" && layer.id === layerId) {
                featureSources.push({ layer, enabled: true });
            }
        });
    });
    return featureSources;
};
const getSnappingFromStorage = (snappingSessionStorageIds) => {
    if (snappingSessionStorageIds) {
        return ((0,_storage_0353a769_js__WEBPACK_IMPORTED_MODULE_4__.b)(snappingSessionStorageIds.webmap, true) ||
            (0,_storage_0353a769_js__WEBPACK_IMPORTED_MODULE_4__.b)(snappingSessionStorageIds.current, true) ||
            null);
    }
    return null;
};

const arcgisSketchFeaturesCss = ".actions-start-padding{padding:8px}";

const ArcgisSketchFeatures = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisSketchFeaturesAddSketch = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSketchFeaturesAddSketch", 7);
        this.arcgisSketchFeaturesEditFeature = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSketchFeaturesEditFeature", 7);
        this.arcgisSketchFeaturesEditMultipleFeatures = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSketchFeaturesEditMultipleFeatures", 7);
        this.arcgisSketchFeaturesAddToNewSketch = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSketchFeaturesAddToNewSketch", 7);
        this.arcgisSketchFeaturesUpdated = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSketchFeaturesUpdated", 7);
        this.graphicChange = [];
        this.graphicUpdate = [];
        this.checkboxNodes = [];
        this.selectedGraphics = [];
        this.duplicatedGraphicIndices = [];
        this.checkboxUpdate = false;
        this.numberOfActiveSVMs = 0;
        this.currentlyRenderingSymbolPreviews = false;
        this.onGraphicUpdate = (event) => {
            this.checkboxNodes = this.checkboxNodes.slice(0, this.graphics.length);
            if (event.state === "start") {
                if (this.checkboxUpdate || this.numberOfActiveSVMs) {
                    this.checkboxNodes.forEach((_, idx) => (this.checkboxNodes[idx].checked = (0,_functional_44de8fcf_js__WEBPACK_IMPORTED_MODULE_5__.i)(this.selectedGraphics.find((selectedGraphic) => selectedGraphic.index === idx))));
                    this.checkboxUpdate = false;
                    this.numberOfActiveSVMs -= 1;
                }
                else {
                    let found = false;
                    this.selectedGraphics = [];
                    this.graphics.forEach((graphic, index) => {
                        if (!found &&
                            JSON.stringify(graphic.toJSON()) === JSON.stringify(event.graphics[0].toJSON())) {
                            found = true;
                            this.selectedGraphics.push({ index, graphic });
                            this.checkboxNodes[index].checked = true;
                            this.addActionsPopover();
                        }
                        else {
                            this.checkboxNodes[index].checked = false;
                        }
                    });
                }
            }
            if (event.state === "complete") {
                this.arcgisSketchFeaturesUpdated.emit();
            }
        };
        this.pickListItem = (graphic, index) => {
            var _a;
            return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-list-item", { label: ((_a = graphic === null || graphic === void 0 ? void 0 : graphic.attributes) === null || _a === void 0 ? void 0 : _a.title) || this.getStringFromType(graphic) }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "actions-start", class: "actions-start-padding" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-checkbox", { ref: (node) => this.checkboxNodes.push(node), scale: "l", onCalciteCheckboxChange: (event) => {
                    if (event.target.checked) {
                        this.checkboxUpdate = true;
                        this.selectedGraphics.push({ index, graphic });
                    }
                    else {
                        this.selectedGraphics = this.selectedGraphics.filter((selectedGraphic) => selectedGraphic.index !== index);
                    }
                    if (this.selectedGraphics.length) {
                        this.addActionsPopover();
                        this.actionsPopoverNode.selectedGraphics = this.selectedGraphics;
                        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.actionsPopoverNode);
                    }
                    else {
                        this.removeActionsPopover();
                    }
                    let tempPoint = [];
                    let tempLine = [];
                    let tempPolygon = [];
                    let tempText = [];
                    this.selectedGraphics.forEach((selectedGraphic) => {
                        switch (getGeometryTypeFromGraphic(selectedGraphic.graphic)) {
                            case "polyline":
                                tempLine = [...tempLine, selectedGraphic.graphic];
                                break;
                            case "polygon":
                                tempPolygon = [...tempPolygon, selectedGraphic.graphic];
                                break;
                            case "text":
                                tempText = [...tempText, selectedGraphic.graphic];
                                break;
                            default:
                                tempPoint = [...tempPoint, selectedGraphic.graphic];
                                break;
                        }
                    });
                    const graphicArrays = [tempPoint, tempLine, tempPolygon, tempText];
                    const activeSVMs = graphicArrays.filter((graphicArray) => graphicArray.length);
                    this.numberOfActiveSVMs = activeSVMs.length;
                    this.checkboxUpdate = true;
                    tempPoint.length ? this.svModel.updatePoint(tempPoint) : this.svModel.cancelPoint();
                    tempLine.length ? this.svModel.updateLine(tempLine) : this.svModel.cancelLine();
                    tempPolygon.length
                        ? this.svModel.updatePolygon(tempPolygon)
                        : this.svModel.cancelPolygon();
                    tempText.length ? this.svModel.updateText(tempText) : this.svModel.cancelText();
                    this.watchForGraphicSelectionOnClick();
                    if (!this.selectedGraphics.length) {
                        this.svModel.cancel();
                        this.combineMapNotesGraphics();
                        this.checkboxUpdate = false;
                        this.numberOfActiveSVMs = 0;
                    }
                } })), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "content-start", id: `image-${index}` }), this.showEditFeature ? ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { slot: "actions-end", text: this.strings.edit, title: this.strings.edit, scale: "s", icon: "pencil", onClick: () => {
                    this.selectedGraphics.push({ index, graphic });
                    this.arcgisSketchFeaturesEditFeature.emit({ layer: this.layer, feature: graphic });
                } })) : null));
        };
        this.layer = undefined;
        this.mapView = undefined;
        this.showAddSketch = true;
        this.showEditFeature = true;
        this.snappingSessionStorageIds = undefined;
        this.open = true;
        this.graphics = undefined;
    }
    sketchUpdatedHandler(event) {
        event.stopPropagation();
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
    }
    // --------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    // --------------------------------------------------------------------------
    async componentWillLoad() {
        [this.strings] = await (0,_locale_050b6db9_js__WEBPACK_IMPORTED_MODULE_3__.g)(this.hostElement);
        await this.loadAllModules();
        this.snappingOptions = getSnappingOptions(this.snappingSessionStorageIds, this.layer, this.mapView, this.SnappingOptions);
        this.svModel = new svModel(this.layer, this.mapView, this.SketchViewModel, this.snappingOptions, this.onGraphicUpdate);
        this.combineMapNotesGraphics();
        sketchFeaturesState.strings = this.strings;
        sketchFeaturesState.snappingOptions = this.snappingOptions;
        sketchFeaturesState.snappingSessionStorageIds = this.snappingSessionStorageIds;
    }
    componentDidLoad() {
        this.watchForChangesToMapNotesLayer();
        this.watchForGraphicSelectionOnClick();
    }
    async componentDidRender() {
        var _a, _b, _c;
        // preview each graphic
        if (this.currentlyRenderingSymbolPreviews) {
            return;
        }
        this.currentlyRenderingSymbolPreviews = true;
        for (let x = 0; x < this.graphics.length; x++) {
            const currElement = this.hostElement.shadowRoot.getElementById(`image-${x}`);
            currElement.textContent = "";
            await this.symbolUtils.renderPreviewHTML(this.graphics[x].symbol, Object.assign({ node: currElement, scale: true, maxSize: 20, size: { width: 20, height: this.graphics[x].geometry.type === "polyline" ? 6 : 20 } }, (((_a = this.graphics[x].symbol) === null || _a === void 0 ? void 0 : _a.type) === "text" && {
                overrideText: ((_c = (_b = this.graphics[x].symbol) === null || _b === void 0 ? void 0 : _b.text) === null || _c === void 0 ? void 0 : _c[0]) || this.strings.textPreview
            })));
        }
        this.currentlyRenderingSymbolPreviews = false;
    }
    componentDidUpdate() {
        if (this.duplicatedGraphicIndices.length) {
            this.checkboxNodes.forEach((_, idx) => (this.checkboxNodes[idx].checked = this.duplicatedGraphicIndices.includes(idx)));
            this.selectedGraphics = [];
            this.checkboxNodes.forEach((checkboxNode, index) => {
                if (checkboxNode.checked) {
                    this.selectedGraphics.push({ index, graphic: this.graphics[index] });
                }
            });
            this.duplicatedGraphicIndices = [];
        }
    }
    disconnectedCallback() {
        var _a;
        this.graphicChange.forEach((currentHandle) => currentHandle === null || currentHandle === void 0 ? void 0 : currentHandle.remove());
        this.graphicUpdate.forEach((currentHandle) => currentHandle === null || currentHandle === void 0 ? void 0 : currentHandle.remove());
        this.unselectAllGraphics();
        (_a = this.hitTestHandle) === null || _a === void 0 ? void 0 : _a.remove();
        this.hitTestHandle = undefined;
        this.svModel.cancel();
        this.svModel.destroy();
    }
    // --------------------------------------------------------------------------
    //
    // Public Methods
    //
    // --------------------------------------------------------------------------
    async setFocus() {
        this.addFeatureNode.setFocus();
    }
    // Public Methods
    async done() {
        var _a;
        if ((_a = this.snappingSessionStorageIds) === null || _a === void 0 ? void 0 : _a.current) {
            saveSnappingToStorage(this.snappingOptions, this.snappingSessionStorageIds.current);
        }
        this.svModel.destroy();
        // enable popup in the map view
        this.mapView.popupEnabled = true;
    }
    // --------------------------------------------------------------------------
    //
    // Private Methods
    //
    // --------------------------------------------------------------------------
    async loadAllModules() {
        [this.reactiveUtils, this.symbolUtils, this.SketchViewModel, this.SnappingOptions] =
            await (0,_loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_2__.l)([
                "esri/core/reactiveUtils",
                "esri/symbols/support/symbolUtils",
                "esri/widgets/Sketch/SketchViewModel",
                "esri/views/interactive/snapping/SnappingOptions"
            ]);
    }
    watchForChangesToMapNotesLayer() {
        for (const sublayer of [
            this.layer.pointLayer,
            this.layer.polylineLayer,
            this.layer.polygonLayer,
            this.layer.textLayer
        ]) {
            const currGraphicsChange = this.reactiveUtils.on(() => sublayer.graphics, "change", () => {
                if (!this.checkboxUpdate) {
                    this.combineMapNotesGraphics();
                }
            });
            this.graphicChange.push(currGraphicsChange);
            // changes on clone
            const currGraphicsUpdate = this.reactiveUtils.on(() => sublayer, "graphic-update", (event) => {
                if ((event === null || event === void 0 ? void 0 : event.property) !== "geometry") {
                    this.combineMapNotesGraphics();
                }
            });
            this.graphicUpdate.push(currGraphicsUpdate);
        }
    }
    combineMapNotesGraphics() {
        this.graphics = [
            ...this.layer.pointLayer.graphics,
            ...this.layer.polylineLayer.graphics,
            ...this.layer.polygonLayer.graphics,
            ...this.layer.textLayer.graphics
        ];
    }
    getStringFromType(currGraphic) {
        var _a, _b;
        switch ((_a = currGraphic === null || currGraphic === void 0 ? void 0 : currGraphic.geometry) === null || _a === void 0 ? void 0 : _a.type) {
            case "point":
                if (((_b = currGraphic === null || currGraphic === void 0 ? void 0 : currGraphic.symbol) === null || _b === void 0 ? void 0 : _b.type) === "text") {
                    return this.strings.text;
                }
                else {
                    return this.strings.point;
                }
            case "polyline":
                return this.strings.line;
            case "polygon":
                return this.strings.polygon;
            default:
                return this.strings.point;
        }
    }
    addActionsPopover() {
        if (this.actionsPopoverNode) {
            this.actionsPopoverNode.setFocus();
            return;
        }
        this.actionsPopoverNode = document.createElement("arcgis-sketch-actions-popover");
        this.actionsPopoverNode.referenceElement = this.blockNode;
        this.actionsPopoverNode.selectedGraphics = this.selectedGraphics;
        this.actionsPopoverNode.addEventListener("arcgisSketchActionsBulkEdit", (event) => {
            this.removeActionsPopover();
            this.unselectAllGraphics();
            const features = event.detail.graphics.map((selectedGraphic) => selectedGraphic.graphic);
            this.arcgisSketchFeaturesEditMultipleFeatures.emit({ features });
        });
        this.actionsPopoverNode.addEventListener("arcgisSketchActionsBulkDuplicate", () => {
            this.svModel.duplicate();
            this.combineMapNotesGraphics();
            const selectedFeatures = this.selectedGraphics.map((selectedGraphic) => selectedGraphic.graphic);
            this.duplicatedGraphicIndices = [];
            selectedFeatures.forEach((selectedFeature) => {
                let found = false;
                this.graphics.forEach((graphic, idx) => {
                    if (!found &&
                        JSON.stringify(graphic.toJSON()) === JSON.stringify(selectedFeature.toJSON())) {
                        if (!this.duplicatedGraphicIndices.includes(idx)) {
                            this.duplicatedGraphicIndices.push(idx);
                            found = true;
                        }
                    }
                });
            });
        });
        this.actionsPopoverNode.addEventListener("arcgisSketchActionsAddToNewSketch", () => {
            const selectedFeatures = this.selectedGraphics.map((selectedGraphic) => selectedGraphic.graphic);
            this.arcgisSketchFeaturesAddToNewSketch.emit({ features: selectedFeatures });
        });
        this.actionsPopoverNode.addEventListener("arcgisSketchActionsBulkDelete", () => {
            this.removeActionsPopover();
            this.unselectAllGraphics();
            this.svModel.delete();
            this.combineMapNotesGraphics();
            this.checkboxUpdate = false;
            this.numberOfActiveSVMs = 0;
        });
        this.actionsPopoverNode.addEventListener("arcgisSketchActionsPopoverClose", () => {
            this.removeActionsPopover();
            this.svModel.cancel();
            this.unselectAllGraphics();
            this.checkboxUpdate = false;
            this.numberOfActiveSVMs = 0;
        });
        document.body.appendChild(this.actionsPopoverNode);
        this.actionsPopoverNode.setFocus();
    }
    removeActionsPopover() {
        var _a, _b;
        (_b = (_a = this.actionsPopoverNode) === null || _a === void 0 ? void 0 : _a.parentElement) === null || _b === void 0 ? void 0 : _b.removeChild(this.actionsPopoverNode);
        this.actionsPopoverNode = null;
    }
    unselectAllGraphics(keepActionsPopover) {
        this.selectedGraphics = [];
        this.checkboxNodes.forEach((checkboxNode) => {
            if (checkboxNode) {
                checkboxNode.checked = false;
            }
        });
        if (!keepActionsPopover) {
            this.removeActionsPopover();
        }
    }
    selectSingleGraphic(currGraphic) {
        var _a;
        switch (currGraphic.layer) {
            case this.layer.pointLayer:
                this.svModel.updatePoint([currGraphic]);
                break;
            case this.layer.textLayer:
                this.svModel.updateText([currGraphic]);
                break;
            case this.layer.polylineLayer:
                this.svModel.updateLine([currGraphic]);
                break;
            case this.layer.polygonLayer:
                this.svModel.updatePolygon([currGraphic]);
            default:
                return;
        }
        (_a = this.graphics) === null || _a === void 0 ? void 0 : _a.forEach((graphic, index) => {
            if (JSON.stringify(graphic.toJSON()) === JSON.stringify(currGraphic.toJSON())) {
                const graphicAlreadySelected = this.selectedGraphics.find((selectedGraphic) => JSON.stringify(selectedGraphic.graphic.toJSON()) ===
                    JSON.stringify(currGraphic.toJSON()));
                if (!graphicAlreadySelected) {
                    this.selectedGraphics.push({ index, graphic });
                    this.checkboxNodes[index].checked = true;
                }
            }
        });
        this.addActionsPopover();
    }
    watchForGraphicSelectionOnClick() {
        var _a;
        (_a = this.hitTestHandle) === null || _a === void 0 ? void 0 : _a.remove();
        this.hitTestHandle = this.mapView.on("click", async (event) => {
            var _a;
            const hitTestResults = await this.mapView.hitTest(event, {
                include: this.layer
            });
            const results = hitTestResults.results;
            if (results.length) {
                const order = ["point", "polyline", "polygon"];
                results.sort(function (a, b) {
                    return order.indexOf(a.graphic.geometry.type) - order.indexOf(b.graphic.geometry.type);
                });
                const currGraphic = results[0].graphic;
                this.unselectAllGraphics(true);
                this.selectSingleGraphic(currGraphic);
            }
            else {
                (_a = this.checkboxNodes) === null || _a === void 0 ? void 0 : _a.forEach((checkboxNode) => {
                    if (checkboxNode) {
                        checkboxNode.checked = false;
                    }
                });
                this.removeActionsPopover();
                this.unselectAllGraphics();
                this.svModel.cancel();
                this.checkboxUpdate = false;
                this.numberOfActiveSVMs = 0;
            }
        });
    }
    // --------------------------------------------------------------------------
    //
    // Render Methods
    //
    // --------------------------------------------------------------------------
    render() {
        this.checkboxNodes = [];
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.H, null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-block", { ref: (node) => (this.blockNode = node), heading: this.strings.sketches, open: this.open, collapsible: true, onCalciteBlockOpen: () => {
                if (this.selectedGraphics.length) {
                    this.addActionsPopover();
                }
            }, onCalciteBlockClose: () => this.removeActionsPopover() }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-list", null, this.graphics.map((graphic, index) => {
            return this.pickListItem(graphic, index);
        })), this.showAddSketch ? ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { ref: (element) => (this.addFeatureNode = element), iconStart: "pencil-mark", appearance: "transparent", width: "full", onClick: () => {
                this.removeActionsPopover();
                this.unselectAllGraphics();
                this.svModel.cancel();
                this.arcgisSketchFeaturesAddSketch.emit({ layer: this.layer });
            } }, this.strings.addSketch)) : null)));
    }
    get hostElement() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisSketchFeatures.style = arcgisSketchFeaturesCss;



//# sourceMappingURL=arcgis-sketch-actions-popover_2.entry.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-44de8fcf.js":
/*!****************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-44de8fcf.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ arrayToLookupMap),
/* harmony export */   b: () => (/* binding */ unique),
/* harmony export */   c: () => (/* binding */ throttle),
/* harmony export */   d: () => (/* binding */ debounce),
/* harmony export */   e: () => (/* binding */ escapeRegExp),
/* harmony export */   f: () => (/* binding */ arraysAreEquivalent),
/* harmony export */   g: () => (/* binding */ chunk),
/* harmony export */   i: () => (/* binding */ isDefined),
/* harmony export */   m: () => (/* binding */ minDelay),
/* harmony export */   t: () => (/* binding */ timeout),
/* harmony export */   u: () => (/* binding */ uniqueBy)
/* harmony export */ });
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */
/**
 * Call a function only after it has not been called for n milliseconds
 * @param fn    - function to call
 * @param delay - delay in milliseconds
 */
const debounce = (fn, delay) => {
    let timeout;
    let status = "idle";
    function flush(...args) {
        status = "flushed";
        return debounced(...args);
    }
    function invoke(...args) {
        status = "invoked";
        return debounced(...args);
    }
    function cancel(...args) {
        status = "cancelled";
        return debounced(...args);
    }
    function getStatus() {
        return status;
    }
    const debounced = (...args) => new Promise((resolve) => {
        switch (status) {
            case "flushed":
                status = "idle";
                if (timeout) {
                    clearTimeout(timeout);
                    resolve(fn(...args));
                }
                else {
                    resolve(null);
                }
                break;
            case "invoked":
                clearTimeout(timeout);
                status = "idle";
                resolve(fn(...args));
                break;
            case "cancelled":
                clearTimeout(timeout);
                status = "idle";
                resolve(null);
                break;
            default:
                if (timeout) {
                    clearTimeout(timeout);
                }
                status = "pending";
                timeout = setTimeout(() => {
                    status = "idle";
                    return resolve(fn(...args));
                }, delay);
                break;
        }
    });
    debounced.flush = flush;
    debounced.invoke = invoke;
    debounced.cancel = cancel;
    debounced.getStatus = getStatus;
    return debounced;
};
/**
 * Call a function only after n milliseconds have elapsed
 * @param fn    - function to call
 * @param delay - delay in milliseconds
 */
const throttle = (fn, delay) => {
    let timeout;
    return (...args) => new Promise((resolve) => {
        if (timeout) {
            return;
        }
        timeout = setTimeout(() => {
            clearTimeout(timeout);
            timeout = undefined;
            resolve(fn(...args));
        }, delay);
    });
};
function escapeRegExp(str) {
    return str.replace(/[.*+?^${}()|[\]\\]/g, "\\$&"); // $& means the whole matched string
}
function isDefined(value) {
    return value !== undefined && value !== null;
}
/**
 * Set a minimum time for a promise to resolve (useful for preventing flash of loaders)
 */
async function minDelay(promise, minDelay) {
    await Promise.all([promise, timeout(minDelay)]);
    return promise;
}
/**
 * Helper method to inline setTimeout as an await in async functions
 */
function timeout(ms) {
    return new Promise((resolve) => setTimeout(resolve, ms));
}
const arrayToLookupMap = (dataArr, getKeyAndItem) => Object.fromEntries((dataArr || []).map((item) => {
    const { key, data } = getKeyAndItem(item);
    return [key, data];
}));
/**
 * Check whether two arrays have the same number of elements
 * and whether they contain the same elements
 * regardless of order
 */
const arraysAreEquivalent = (arr1, arr2) => arr1.length === arr2.length && arr1.reduce((memo, str) => memo && arr2.indexOf(str) > -1, true);
function uniqueBy(myArr, getItemId) {
    const resultArr = [];
    const lookupMap = {};
    myArr.forEach((item) => {
        const id = getItemId(item);
        if (lookupMap[id] == null) {
            lookupMap[id] = item;
            resultArr.push(item);
        }
    });
    return resultArr;
}
function unique(myArr) {
    const primitives = { boolean: {}, number: {}, string: {} };
    const objs = [];
    return myArr.filter((item) => {
        let type = typeof item;
        if (type in primitives) {
            return primitives[type].hasOwnProperty(item) ? false : (primitives[type][item] = true);
        }
        else {
            return objs.indexOf(item) >= 0 ? false : objs.push(item);
        }
    });
}
const chunk = (arr, size) => [...Array(Math.ceil(arr.length / size))].map((_, i) => arr.slice(size * i, size + size * i));



//# sourceMappingURL=functional-44de8fcf.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-05956cab.js":
/*!***********************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-05956cab.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   c: () => (/* binding */ createStore)
/* harmony export */ });
/* harmony import */ var _index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-e3bf7da7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-e3bf7da7.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */


const appendToMap = (map, propName, value) => {
    const items = map.get(propName);
    if (!items) {
        map.set(propName, [value]);
    }
    else if (!items.includes(value)) {
        items.push(value);
    }
};
const debounce = (fn, ms) => {
    let timeoutId;
    return (...args) => {
        if (timeoutId) {
            clearTimeout(timeoutId);
        }
        timeoutId = setTimeout(() => {
            timeoutId = 0;
            fn(...args);
        }, ms);
    };
};

/**
 * Check if a possible element isConnected.
 * The property might not be there, so we check for it.
 *
 * We want it to return true if isConnected is not a property,
 * otherwise we would remove these elements and would not update.
 *
 * Better leak in Edge than to be useless.
 */
const isConnected = (maybeElement) => !('isConnected' in maybeElement) || maybeElement.isConnected;
const cleanupElements = debounce((map) => {
    for (let key of map.keys()) {
        map.set(key, map.get(key).filter(isConnected));
    }
}, 2000);
const stencilSubscription = () => {
    if (typeof _index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.g !== 'function') {
        // If we are not in a stencil project, we do nothing.
        // This function is not really exported by @stencil/core.
        return {};
    }
    const elmsToUpdate = new Map();
    return {
        dispose: () => elmsToUpdate.clear(),
        get: (propName) => {
            const elm = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.g)();
            if (elm) {
                appendToMap(elmsToUpdate, propName, elm);
            }
        },
        set: (propName) => {
            const elements = elmsToUpdate.get(propName);
            if (elements) {
                elmsToUpdate.set(propName, elements.filter(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f));
            }
            cleanupElements(elmsToUpdate);
        },
        reset: () => {
            elmsToUpdate.forEach((elms) => elms.forEach(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f));
            cleanupElements(elmsToUpdate);
        },
    };
};

const unwrap = (val) => (typeof val === 'function' ? val() : val);
const createObservableMap = (defaultState, shouldUpdate = (a, b) => a !== b) => {
    const unwrappedState = unwrap(defaultState);
    let states = new Map(Object.entries(unwrappedState !== null && unwrappedState !== void 0 ? unwrappedState : {}));
    const handlers = {
        dispose: [],
        get: [],
        set: [],
        reset: [],
    };
    const reset = () => {
        var _a;
        // When resetting the state, the default state may be a function - unwrap it to invoke it.
        // otherwise, the state won't be properly reset
        states = new Map(Object.entries((_a = unwrap(defaultState)) !== null && _a !== void 0 ? _a : {}));
        handlers.reset.forEach((cb) => cb());
    };
    const dispose = () => {
        // Call first dispose as resetting the state would
        // cause less updates ;)
        handlers.dispose.forEach((cb) => cb());
        reset();
    };
    const get = (propName) => {
        handlers.get.forEach((cb) => cb(propName));
        return states.get(propName);
    };
    const set = (propName, value) => {
        const oldValue = states.get(propName);
        if (shouldUpdate(value, oldValue, propName)) {
            states.set(propName, value);
            handlers.set.forEach((cb) => cb(propName, value, oldValue));
        }
    };
    const state = (typeof Proxy === 'undefined'
        ? {}
        : new Proxy(unwrappedState, {
            get(_, propName) {
                return get(propName);
            },
            ownKeys(_) {
                return Array.from(states.keys());
            },
            getOwnPropertyDescriptor() {
                return {
                    enumerable: true,
                    configurable: true,
                };
            },
            has(_, propName) {
                return states.has(propName);
            },
            set(_, propName, value) {
                set(propName, value);
                return true;
            },
        }));
    const on = (eventName, callback) => {
        handlers[eventName].push(callback);
        return () => {
            removeFromArray(handlers[eventName], callback);
        };
    };
    const onChange = (propName, cb) => {
        const unSet = on('set', (key, newValue) => {
            if (key === propName) {
                cb(newValue);
            }
        });
        // We need to unwrap the defaultState because it might be a function.
        // Otherwise we might not be sending the right reset value.
        const unReset = on('reset', () => cb(unwrap(defaultState)[propName]));
        return () => {
            unSet();
            unReset();
        };
    };
    const use = (...subscriptions) => {
        const unsubs = subscriptions.reduce((unsubs, subscription) => {
            if (subscription.set) {
                unsubs.push(on('set', subscription.set));
            }
            if (subscription.get) {
                unsubs.push(on('get', subscription.get));
            }
            if (subscription.reset) {
                unsubs.push(on('reset', subscription.reset));
            }
            if (subscription.dispose) {
                unsubs.push(on('dispose', subscription.dispose));
            }
            return unsubs;
        }, []);
        return () => unsubs.forEach((unsub) => unsub());
    };
    const forceUpdate = (key) => {
        const oldValue = states.get(key);
        handlers.set.forEach((cb) => cb(key, oldValue, oldValue));
    };
    return {
        state,
        get,
        set,
        on,
        onChange,
        use,
        dispose,
        reset,
        forceUpdate,
    };
};
const removeFromArray = (array, item) => {
    const index = array.indexOf(item);
    if (index >= 0) {
        array[index] = array[array.length - 1];
        array.length--;
    }
};

const createStore = (defaultState, shouldUpdate) => {
    const map = createObservableMap(defaultState, shouldUpdate);
    map.use(stencilSubscription());
    return map;
};



//# sourceMappingURL=index-05956cab.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-ef0e54b2.js":
/*!******************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-ef0e54b2.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   C: () => (/* binding */ CSS_UTILITY),
/* harmony export */   a: () => (/* binding */ formatDate),
/* harmony export */   b: () => (/* binding */ formatPlural),
/* harmony export */   f: () => (/* binding */ formatNumber),
/* harmony export */   g: () => (/* binding */ getElementDir),
/* harmony export */   l: () => (/* binding */ languageMap)
/* harmony export */ });
/* harmony import */ var _loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./loadModules-b4ac1247.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-b4ac1247.js");
/* harmony import */ var _dom_4d367677_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dom-4d367677.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-4d367677.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */



const languageMap = new Map([
    ["ar", "ar"],
    ["bg", "bg"],
    ["bs", "bs"],
    ["ca", "ca"],
    ["cs", "cs"],
    ["da", "da"],
    ["de", "de"],
    ["el", "el"],
    ["en", "en"],
    ["es", "es"],
    ["et", "et"],
    ["fi", "fi"],
    ["fr", "fr"],
    ["he", "he"],
    ["hr", "hr"],
    ["hu", "hu"],
    ["id", "id"],
    ["it", "it"],
    ["ja", "ja"],
    ["ko", "ko"],
    ["lt", "lt"],
    ["lv", "lv"],
    ["nb", "nb"],
    ["nl", "nl"],
    ["pl", "pl"],
    ["pt-br", "pt-BR"],
    ["pt-pt", "pt-PT"],
    ["ro", "ro"],
    ["ru", "ru"],
    ["sk", "sk"],
    ["sl", "sl"],
    ["sr", "sr"],
    ["sv", "sv"],
    ["th", "th"],
    ["tr", "tr"],
    ["uk", "uk"],
    ["vi", "vi"],
    ["zh-cn", "zh-CN"],
    ["zh-hk", "zh-HK"],
    ["zh-tw", "zh-TW"]
]);
// rtl
function getElementDir(el) {
    return getElementProp(el, "dir", "ltr");
}
function getElementProp(el, prop, value) {
    const closestWithProp = (0,_dom_4d367677_js__WEBPACK_IMPORTED_MODULE_1__.c)(el, `[${prop}]`);
    return closestWithProp ? closestWithProp.getAttribute(prop) : value;
}
// css
const CSS_UTILITY = {
    rtl: "arcgis--rtl"
};
async function formatNumber(number, options) {
    const { api, type, places } = options || {};
    if (api === 4) {
        const [intl] = await (0,_loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_0__.l)(["esri/intl"]);
        const numberFormatIntlOptions = intl.convertNumberFormatToIntlOptions({
            places,
            style: type,
            digitSeparator: true
        });
        return intl.formatNumber(number, Object.assign(Object.assign({}, numberFormatIntlOptions), { style: type }));
    }
    const [dojoNumber] = await (0,_loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_0__.l)(["dojo/number"]);
    return dojoNumber.format(number, {
        type,
        places,
        pattern: options === null || options === void 0 ? void 0 : options.pattern
    });
}
const cache = {};
function formatDate(date) {
    const lang = document.documentElement.lang;
    const dayShortMonthYear = {
        year: "numeric",
        month: "short",
        day: "numeric"
    };
    if (!cache[lang]) {
        cache[lang] = new Intl.DateTimeFormat(document.documentElement.lang, dayShortMonthYear);
    }
    return cache[lang].format(date);
}
function formatPlural(lang, stringObj, number) {
    const singles = ["id", "ja", "ko", "th", "vi", "zh-cn", "zh-hk", "zh-tw"];
    const likeEnglish = [
        "en",
        "ca",
        "da",
        "de",
        "el",
        "es",
        "et",
        "fi",
        "hi",
        "hu",
        "it",
        "nb",
        "nl",
        "pt-pt",
        "sv",
        "tr"
    ];
    const locale = lang !== null && lang !== void 0 ? lang : "en";
    // if the number is one, or it is a "simple" language, return the 1 string
    if (number === 1 || singles.includes(locale)) {
        return stringObj.single.replace("${number}", "1");
    }
    // if the number is not 1 and the language uses the same pluralization strategy as english,
    // return the multiple string
    if (number !== 1 && likeEnglish.includes(locale)) {
        return stringObj.multiple.replace("${number}", `${number}`);
    }
    // if none of the above worked, return the "unknown" string
    return stringObj.unknown.replace("${number}", `${number}`);
}



//# sourceMappingURL=languageUtil-ef0e54b2.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-050b6db9.js":
/*!************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-050b6db9.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ getComponentClosestLanguage),
/* harmony export */   g: () => (/* binding */ getLocaleComponentStrings)
/* harmony export */ });
/* harmony import */ var _dom_4d367677_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dom-4d367677.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-4d367677.js");
/* harmony import */ var _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./languageUtil-ef0e54b2.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-ef0e54b2.js");
/* harmony import */ var _index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./index-e3bf7da7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-e3bf7da7.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */




// https://medium.com/stencil-tricks/implementing-internationalisation-i18n-with-stencil-5e6559554117
function getComponentClosestLanguage(element) {
    var _a, _b, _c;
    const closestElement = (_a = (0,_dom_4d367677_js__WEBPACK_IMPORTED_MODULE_0__.c)(element, "[lang]")) !== null && _a !== void 0 ? _a : (_c = (_b = element.shadowRoot) === null || _b === void 0 ? void 0 : _b.ownerDocument) === null || _c === void 0 ? void 0 : _c.documentElement;
    // language set by the calling application or browser. defaults to english.
    const lang = ((closestElement === null || closestElement === void 0 ? void 0 : closestElement.lang) || (navigator === null || navigator === void 0 ? void 0 : navigator.language) || "en").toLowerCase();
    if (_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang)) {
        return _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang);
    }
    else {
        // "ru-RU" maps to "ru" use case
        if (_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang.slice(0, 2))) {
            return _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang.slice(0, 2));
        }
        else {
            return "en";
        }
    }
}
function getComponentClosestLanguageIntl(element) {
    var _a, _b, _c;
    // it's OK if we don't have the 4 letter language file for it
    // 4 letter language code needed for formatting numbers
    const closestElement = (_a = (0,_dom_4d367677_js__WEBPACK_IMPORTED_MODULE_0__.c)(element, "[lang]")) !== null && _a !== void 0 ? _a : (_c = (_b = element.shadowRoot) === null || _b === void 0 ? void 0 : _b.ownerDocument) === null || _c === void 0 ? void 0 : _c.documentElement;
    // language set by the calling application or browser. defaults to english.
    const lang = ((closestElement === null || closestElement === void 0 ? void 0 : closestElement.lang) || (navigator === null || navigator === void 0 ? void 0 : navigator.language) || "en").toLowerCase();
    if (_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang)) {
        return _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang);
    }
    else {
        if (_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang.slice(0, 2))) {
            // we support the 2 letter coded language
            // e.g. it-CH vs it
            return lang;
        }
        else {
            return "en";
        }
    }
}
function fetchLocaleStringsForComponent(componentName, locale) {
    return new Promise((resolve, reject) => {
        fetch((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_2__.a)(`../arcgis-app-assets/i18n/${componentName}.i18n.${locale}.json`)).then((result) => {
            if (result.ok)
                resolve(result.json());
            else
                reject();
        }, () => reject());
    });
}
const stringCache = {};
function fetchLocaleStringsFromCache(componentName, locale) {
    const id = `${componentName}${locale}`;
    if (!stringCache[id]) {
        stringCache[id] = fetchLocaleStringsForComponent(componentName, locale);
    }
    return stringCache[id];
}
/**
 * Get strings and language codes.
 * This method returns 2 language codes.
 * The first one returns a code that's also supported as a language file.
 * The second one returns a code where there is support for the first 2 letters of the code as part of a language file,
 * but will return the original 4 letter code from the page.
 * E.g. For "it-ch" it will return "it" as the first language code and "it-ch" as the second.
 * The second one is required for esri.intl.setLocale() to get the correct formatting.
 *
 * If a tagName is provided it will overwite the element's tagName
 *
 *  @return [ strings, first language code, second language code]
 */
async function getLocaleComponentStrings(element, tagName) {
    const componentName = tagName || element.tagName.toLowerCase();
    const componentLanguage = getComponentClosestLanguage(element);
    const componentLanguageIntl = getComponentClosestLanguageIntl(element);
    let strings;
    try {
        strings = await fetchLocaleStringsFromCache(componentName, componentLanguage);
    }
    catch (e) {
        console.warn(`no locale for ${componentName} (${componentLanguage}) loading default locale en.`);
        strings = await fetchLocaleStringsFromCache(componentName, "en");
    }
    return [strings, componentLanguage, componentLanguageIntl];
}



//# sourceMappingURL=locale-050b6db9.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/storage-0353a769.js":
/*!*************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/storage-0353a769.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ setSessionStorageItem),
/* harmony export */   b: () => (/* binding */ getSessionStorageItem),
/* harmony export */   c: () => (/* binding */ getCookie),
/* harmony export */   d: () => (/* binding */ setCookie),
/* harmony export */   g: () => (/* binding */ getLocalStorageItem),
/* harmony export */   s: () => (/* binding */ setLocalStorageItem)
/* harmony export */ });
/* harmony import */ var _functional_44de8fcf_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./functional-44de8fcf.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-44de8fcf.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */


// import stringUtil from "./strings";
/**
 * Utility methods for dealing with storage of various forms (cookies, local storage, and session storage).
 */
function setCookie(name, cookie, properties, stringify) {
    writeCookie(name, stringify ? JSON.stringify(cookie) : cookie, properties);
}
function getCookie(name, parse) {
    const cookie = readCookie(name);
    return cookie && parse ? JSON.parse(cookie) : cookie;
}
function setLocalStorageItem(name, item, stringify) {
    window.localStorage.setItem(name, stringify ? JSON.stringify(item) : item);
}
function getLocalStorageItem(name, parse) {
    const item = window.localStorage.getItem(name);
    return item && parse ? JSON.parse(item) : item;
}
function setSessionStorageItem(name, item, stringify) {
    window.sessionStorage.setItem(name, stringify ? JSON.stringify(item) : item);
}
function getSessionStorageItem(name, parse) {
    const item = window.sessionStorage.getItem(name);
    return item && parse ? JSON.parse(item) : item;
}
function readCookie(name) {
    const cookie = document.cookie;
    const cookieNameRE = new RegExp(`(?:^|; )${(0,_functional_44de8fcf_js__WEBPACK_IMPORTED_MODULE_0__.e)(name)}=([^;]*)`);
    const matchedCookies = cookie.match(cookieNameRE);
    return matchedCookies ? decodeURIComponent(matchedCookies[1]) : undefined;
}
function writeCookie(name, value, properties) {
    properties = properties || {};
    let expires = properties === null || properties === void 0 ? void 0 : properties.expires;
    if (typeof expires === "number") {
        const expirationDate = new Date();
        const daysFromTodayInMs = expires * 24 * 60 * 60 * 1000;
        expirationDate.setTime(Date.now() + daysFromTodayInMs);
        expires = properties.expires = expirationDate;
    }
    if (typeof expires !== "string" && (expires === null || expires === void 0 ? void 0 : expires.toUTCString)) {
        properties.expires = expires.toUTCString();
    }
    let cookie = `${name}=${encodeURIComponent(value)}`;
    let property;
    for (property in properties) {
        cookie += `; ${property}`;
        const propertyValue = properties[property];
        if (propertyValue !== true) {
            cookie += `=${propertyValue}`;
        }
    }
    document.cookie = cookie;
}



//# sourceMappingURL=storage-0353a769.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,