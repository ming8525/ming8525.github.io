"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_arcgis-eee067"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-smart-mapping-magnitude-range-slider_2.entry.js":
/*!************************************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-smart-mapping-magnitude-range-slider_2.entry.js ***!
  \************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   arcgis_smart_mapping_magnitude_range_slider: () => (/* binding */ ArcgisSmartMappingMagnitudeRangeSlider),
/* harmony export */   arcgis_smart_mapping_vector_symbol_button: () => (/* binding */ ArcgisSmartMappingVectorSymbolButton)
/* harmony export */ });
/* harmony import */ var _index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-e3bf7da7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-e3bf7da7.js");
/* harmony import */ var _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./raster-unique-value-0976ec7f.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/raster-unique-value-0976ec7f.js");
/* harmony import */ var _loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./loadModules-b4ac1247.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-b4ac1247.js");
/* harmony import */ var _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./commonEnums-fcf13661.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/commonEnums-fcf13661.js");
/* harmony import */ var _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./languageUtil-ef0e54b2.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-ef0e54b2.js");
/* harmony import */ var _dom_4d367677_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./dom-4d367677.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-4d367677.js");
/* harmony import */ var _locale_050b6db9_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./locale-050b6db9.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-050b6db9.js");
/* harmony import */ var _index_05956cab_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./index-05956cab.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-05956cab.js");
/* harmony import */ var _commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./commonFunctions-b0830e9e.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/commonFunctions-b0830e9e.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */










const arcgisSmartMappingMagnitudeRangeSliderCss = ".magnitude-range-block{margin-bottom:12px}.range-slider{height:40px;background-color:transparent;position:relative;width:90%;margin:15px auto 0 auto}.magnitude-range{display:flex;justify-content:space-between;margin-bottom:15px}.magnitude-range-item{width:48%;display:flex;flex-flow:column;justify-content:space-between}.esri-slider__label{text-decoration:underline}.esri-slider__label:hover{border:1px solid #bbb;background-color:#f3f3f3;text-decoration:none;z-index:1}";

const ArcgisSmartMappingMagnitudeRangeSlider = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    }
    // -------------------------------------------------------------------
    //
    // Lifecycle
    //
    // -------------------------------------------------------------------
    componentDidLoad() {
        const { config } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        this.hostElement.shadowRoot.firstElementChild.insertAdjacentHTML("beforebegin", `<link rel="stylesheet" href="${config.jsapiUrl}/themes/light/main.css" />`);
    }
    // -------------------------------------------------------------------
    //
    //  Render Methods
    //
    // -------------------------------------------------------------------
    render() {
        const { layer: smLayer, modules, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        const renderer = layer.renderer;
        const sizeVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)(renderer, "size");
        const { minDataValue, maxDataValue } = sizeVisVar;
        if (!this.rangeSliderNode) {
            const config = {
                min: minDataValue ? Math.round(minDataValue * 10) / 10 : 0,
                max: maxDataValue ? Math.round(maxDataValue * 10) / 10 : 100,
                values: [Math.round(minDataValue * 10) / 10, Math.round(maxDataValue * 10) / 10],
                visibleElements: {
                    labels: true
                },
                precision: 1,
                labelInputsEnabled: true,
                labelFormatFunction: (value) => value.toFixed(1)
            };
            this.rangeSliderNode = new modules.Slider(config);
        }
        else {
            if (minDataValue !== this.rangeSliderNode.values[0] ||
                maxDataValue !== this.rangeSliderNode.values[1] ||
                !(0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ac)(this.rangeSliderNode.values[1])) {
                const config = {
                    min: minDataValue ? Math.round(minDataValue * 10) / 10 : 0,
                    max: maxDataValue ? Math.round(maxDataValue * 10) / 10 : 100,
                    values: [Math.round(minDataValue * 10) / 10, Math.round(maxDataValue * 10) / 10]
                };
                this.rangeSliderNode.set(config);
            }
        }
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.H, null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "magnitude-range-block" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, strings.panels.vectorField.magnitudeRange), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "range-slider", ref: (node) => {
                if (node) {
                    this.afterMagnitudeRangeCreate(node);
                }
            } }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { dir: "ltr", class: "magnitude-range" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "magnitude-range-item" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-input-number", { class: "magnitude-input", label: strings.panels.vectorField.min, step: 0.1, scale: "s", min: minDataValue ? Math.round(minDataValue * 10) / 10 : 0, max: maxDataValue ? Math.round(maxDataValue * 10) / 10 : 100, value: `${minDataValue ? Math.round(minDataValue * 10) / 10 : 0}`, onCalciteInputNumberInput: () => {
                const values = this.rangeSliderNode.values;
                const newMinimumSize = parseFloat(this.minRangeNode.value);
                if (this.minRangeNode.value &&
                    newMinimumSize >= minDataValue &&
                    newMinimumSize < values[1]) {
                    clearTimeout(this.minWatchHandle);
                    this.minRangeNode.value = `${newMinimumSize}`;
                    this.rangeSliderNode.values = [parseFloat(this.minRangeNode.value), values[1]];
                    this.handleMagnitudeRangeValuesChange(newMinimumSize, values[1]);
                }
                else {
                    this.minWatchHandle = setTimeout(() => {
                        const updatedValues = this.rangeSliderNode.values;
                        this.minRangeNode.value = `${updatedValues[0]}`;
                        this.handleMagnitudeRangeValuesChange(updatedValues[0], updatedValues[1]);
                    }, 3000);
                }
            }, ref: (node) => (this.minRangeNode = node) })), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "magnitude-range-item" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-input-number", { class: "magnitude-input", label: strings.panels.vectorField.max, step: 0.1, scale: "s", min: minDataValue ? Math.round(minDataValue * 10) / 10 : 0, max: maxDataValue ? Math.round(maxDataValue * 10) / 10 : 100, value: `${maxDataValue ? Math.round(maxDataValue * 10) / 10 : 100}`, onCalciteInputNumberInput: () => {
                const values = this.rangeSliderNode.values;
                const newMaximumSize = parseFloat(this.maxRangeNode.value);
                if (this.maxRangeNode.value &&
                    newMaximumSize > values[0] &&
                    newMaximumSize <= maxDataValue) {
                    clearTimeout(this.maxWatchHandle);
                    this.maxRangeNode.value = `${newMaximumSize}`;
                    this.rangeSliderNode.values = [values[0], parseFloat(this.maxRangeNode.value)];
                    this.handleMagnitudeRangeValuesChange(values[0], newMaximumSize);
                }
                else {
                    this.maxWatchHandle = setTimeout(() => {
                        const updatedValues = this.rangeSliderNode.values;
                        this.maxRangeNode.value = `${updatedValues[0]}`;
                        this.handleMagnitudeRangeValuesChange(updatedValues[0], updatedValues[1]);
                    }, 3000);
                }
            }, ref: (node) => (this.maxRangeNode = node) }))))));
    }
    // -------------------------------------------------------------------
    //
    //  Private methods
    //
    // -------------------------------------------------------------------
    afterMagnitudeRangeCreate(node) {
        if (!this.rangeSliderNode.container) {
            const divNode = document.createElement("div");
            node.append(divNode);
            this.rangeSliderNode.container = divNode;
            this.createMagnitudeRangeSliderChangeEvents();
        }
    }
    createMagnitudeRangeSliderChangeEvents() {
        if (!this.rangeSliderNode) {
            return;
        }
        this.rangeSliderNode.on("thumb-change", (sliderNodeInfo) => {
            const values = this.rangeSliderNode.values;
            if (sliderNodeInfo.index === 0) {
                if (values[0] >= values[1]) {
                    values[0] = sliderNodeInfo.oldValue;
                }
            }
            else {
                if (values[1] <= values[0]) {
                    values[1] = sliderNodeInfo.oldValue;
                }
            }
            this.minRangeNode.value = `${values[0]}`;
            this.maxRangeNode.value = `${values[1]}`;
            this.handleMagnitudeRangeValuesChange(values[0], values[1]);
        });
        this.rangeSliderNode.on("thumb-drag", (sliderNodeInfo) => {
            const values = this.rangeSliderNode.values;
            if (sliderNodeInfo.index === 0) {
                if (values[0] >= values[1]) {
                    values[0] = values[0] - 0.1;
                    return;
                }
            }
            else {
                if (values[1] <= values[0]) {
                    values[1] = values[1] + 0.1;
                    return;
                }
            }
            this.minRangeNode.value = `${values[0]}`;
            this.maxRangeNode.value = `${values[1]}`;
            this.handleMagnitudeRangeValuesChange(values[0], values[1]);
        });
        this.rangeSliderNode.on("segment-drag", () => {
            var _a;
            const values = (_a = this.rangeSliderNode) === null || _a === void 0 ? void 0 : _a.values;
            this.minRangeNode.value = `${values[0]}`;
            this.maxRangeNode.value = `${values[1]}`;
            this.handleMagnitudeRangeValuesChange(values[0], values[1]);
        });
    }
    handleMagnitudeRangeValuesChange(lowerBound, upperBound) {
        if (lowerBound === this.minRangeNode.max && upperBound === this.maxRangeNode.min) {
            return;
        }
        const { layer: smLayer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        const renderer = layer.renderer;
        const sizeVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)(renderer, "size");
        this.minRangeNode.value = `${lowerBound}`;
        this.maxRangeNode.value = `${upperBound}`;
        sizeVisVar.minDataValue = lowerBound;
        sizeVisVar.maxDataValue = upperBound;
        this.maxRangeNode.min = lowerBound + this.maxRangeNode.step;
        this.minRangeNode.max = upperBound - this.minRangeNode.step;
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
    }
    get hostElement() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisSmartMappingMagnitudeRangeSlider.style = arcgisSmartMappingMagnitudeRangeSliderCss;

var ImagePaths;
(function (ImagePaths) {
    ImagePaths["beaufort"] = "beaufort.png";
    ImagePaths["classifiedArrow"] = "classifiedArrow.png";
    ImagePaths["oceanCurrentKnots"] = "oceanCurrentKnots.png";
    ImagePaths["oceanCurrentMps"] = "oceanCurrentMps.png";
    ImagePaths["simpleScalar"] = "simpleScalar.png";
    ImagePaths["singleArrow"] = "singleArrow.png";
    ImagePaths["windBarbs"] = "windBarbs.png";
})(ImagePaths || (ImagePaths = {}));

const arcgisSmartMappingVectorSymbolButtonCss = ".vector-symbol-button{display:flex;padding:6px;justify-content:space-between;align-items:center;border-radius:0;cursor:pointer;background-color:var(--calcite-color-foreground-1);color:var(--calcite-color-text-1);border-color:var(--calcite-color-foreground-3);border-width:1px;border-style:solid;box-shadow:transparent 0px 0px 0px 1px inset}.vector-symbol-button:hover{box-shadow:inset 0 0 0 1px var(--calcite-color-foreground-3)}.vector-symbol-button:active{box-shadow:inset 0 0 0 2px var(--calcite-color-foreground-3)}.vector-symbol-button:focus{box-shadow:inset 0 0 0 2px var(--calcite-color-foreground-3);outline:2px solid var(--calcite-color-brand);outline-offset:2px}.vector-symbol-button.active{outline:1px solid var(--calcite-ui-focus-color, var(--calcite-color-brand))}.vector-symbol-content{display:flex;align-items:center;width:100%}.vector-symbol-sub-content{display:flex;justify-content:space-between;align-items:center;width:100%}.vector-symbol-button-icon{min-width:16px;background-repeat:no-repeat;height:48px;padding:0;display:inline-block}.vector-symbol-button-text{display:inline-block;padding:0 10px}.vector-symbol-button-title{font-weight:bold}.vector-symbol-button-msg{font-size:80%;line-height:16px}";

const ArcgisSmartMappingVectorSymbolButton = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisSmartMappingSelectChange = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingSelectChange", 7);
        this.arcgisSmartMappingSelectBeforeOpen = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingSelectBeforeOpen", 7);
        //--------------------------------------------------------------------------
        //
        //  Private Properties
        //
        //--------------------------------------------------------------------------
        this.open = false;
        this.selectInfos = [];
    }
    //--------------------------------------------------------------------------
    //
    //  Public Methods
    //
    //--------------------------------------------------------------------------
    async setFocus() {
        this.buttonNode.focus();
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    componentWillLoad() {
        this.populateSymbolStyleSelectorInfo();
        this.setSymbolStyleSelection();
    }
    componentWillUpdate() {
        const { layer: smLayer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        const renderer = layer.renderer;
        const { style } = renderer;
        if (this.selectedStyleInfo.value !== style) {
            this.setSymbolStyleSelection();
        }
    }
    //--------------------------------------------------------------------------
    //
    // Render Methods
    //
    //--------------------------------------------------------------------------
    render() {
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { onClick: (event) => event.stopImmediatePropagation() }, strings.panels.vectorField.symbolType, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "vector-symbol-button", role: "button", tabindex: "0", "aria-haspopup": "true", "aria-label": strings.panels.vectorField.symbolType, ref: (node) => (this.buttonNode = node), onKeyDown: (event) => {
                if (event.key === " " || event.key === "Enter") {
                    event.preventDefault();
                    event.stopPropagation();
                    this.openSelectDropdown();
                }
            }, onClick: () => this.openSelectDropdown() }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "vector-symbol-content" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "vector-symbol-button-icon", style: {
                backgroundImage: `url(${(0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.a)(`./assets/arcgis-smart-mapping-dropdown-images/`)}${this.selectedStyleInfo.iconPath})`
            } }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "vector-symbol-sub-content" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "vector-symbol-button-text" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "vector-symbol-button-title" }, this.selectedStyleInfo.title), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "vector-symbol-button-msg" }, this.selectedStyleInfo.msg)), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { scale: "s", icon: "chevron-down" })))))));
    }
    // --------------------------------------------------------------------------
    //
    // Private methods
    //
    // --------------------------------------------------------------------------
    setSymbolStyleSelection() {
        const { layer: smLayer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        const renderer = layer.renderer;
        this.selectedStyleInfo = this.selectInfos.find((info) => info.value === renderer.style ||
            (renderer.style.includes("beaufort") && info.value.includes("beaufort")));
        this.selectInfos.forEach((selectInfo) => {
            selectInfo.selected = selectInfo.value === this.selectedStyleInfo.value;
        });
    }
    closePopover() {
        var _a;
        this.open = false;
        if (this.dropdownNode) {
            (_a = this.dropdownNode.parentNode) === null || _a === void 0 ? void 0 : _a.removeChild(this.dropdownNode);
            this.dropdownNode = null;
            this.buttonNode.classList.remove("active");
        }
    }
    openSelectDropdown() {
        if (!this.open) {
            this.arcgisSmartMappingSelectBeforeOpen.emit();
            const dropdown = document.createElement("arcgis-smart-mapping-dropdown");
            dropdown.buttonNode = this.buttonNode;
            dropdown.infos = this.selectInfos;
            this.dropdownNode = dropdown;
            dropdown.addEventListener("arcgisSmartMappingDropdownClose", (event) => {
                this.closePopover();
                event.detail === "Escape" && this.setFocus();
            });
            dropdown.addEventListener("arcgisSmartMappingDropdownChange", (event) => this.setSymbolStyle(event.detail));
            this.buttonNode.classList.add("active");
            document.body.appendChild(dropdown);
            this.open = true;
        }
        else {
            this.open = false;
        }
    }
    setSymbolStyle(newStyleInfo) {
        const { layer: smLayer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        const renderer = layer.renderer;
        const { style: currentStyle } = renderer;
        const newStyle = newStyleInfo.value;
        const wasBeaufort = currentStyle.includes("beaufort");
        const isBeaufort = newStyle.includes("beaufort");
        if (newStyle === currentStyle || (wasBeaufort && isBeaufort)) {
            this.closePopover();
            setTimeout(() => this.setFocus(), 300);
            return;
        }
        this.selectInfos.forEach((selectInfo) => {
            selectInfo.selected = selectInfo.value === newStyle;
        });
        this.selectedStyleInfo = newStyleInfo;
        this.arcgisSmartMappingSelectChange.emit(this.selectedStyleInfo.value);
        this.closePopover();
        setTimeout(() => this.setFocus(), 300);
    }
    populateSymbolStyleSelectorInfo() {
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const options = strings.panels.vectorField.symbolStyleOptions;
        const imgStr = "vfr_";
        this.selectInfos.push({
            value: "beaufort",
            title: options.beaufort.title,
            msg: options.beaufort.description,
            iconPath: `${imgStr}${ImagePaths.beaufort}`,
            selected: false
        });
        this.selectInfos.push({
            value: "simple-scalar",
            title: options.simpleScalar.title,
            msg: options.simpleScalar.description,
            iconPath: `${imgStr}${ImagePaths.simpleScalar}`,
            selected: false
        });
        this.selectInfos.push({
            value: "single-arrow",
            title: options.singleArrow.title,
            msg: options.singleArrow.description,
            iconPath: `${imgStr}${ImagePaths.singleArrow}`,
            selected: false
        });
        this.selectInfos.push({
            value: "wind-barb",
            title: options.windBarbs.title,
            msg: options.windBarbs.description,
            iconPath: `${imgStr}${ImagePaths.windBarbs}`,
            selected: false
        });
        this.selectInfos.push({
            value: "ocean-current-kn",
            title: options.oceanCurrentKnots.title,
            msg: options.oceanCurrentKnots.description,
            iconPath: `${imgStr}${ImagePaths.oceanCurrentKnots}`,
            selected: false
        });
        this.selectInfos.push({
            value: "ocean-current-m",
            title: options.oceanCurrentMps.title,
            msg: options.oceanCurrentMps.description,
            iconPath: `${imgStr}${ImagePaths.oceanCurrentMps}`,
            selected: false
        });
        this.selectInfos.push({
            value: "classified-arrow",
            title: options.classifiedArrow.title,
            msg: options.classifiedArrow.description,
            iconPath: `${imgStr}${ImagePaths.classifiedArrow}`,
            selected: false
        });
    }
    get hostElement() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisSmartMappingVectorSymbolButton.style = arcgisSmartMappingVectorSymbolButtonCss;



//# sourceMappingURL=arcgis-smart-mapping-magnitude-range-slider_2.entry.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2lkZ2V0cy9jaHVua3MvYXJjZ2lzX2FuYWx5c2lzX25vZGVfbW9kdWxlc19hcmNnaXNfYXBwLWNvbXBvbmVudHNfZGlzdF9lc21fYXJjZ2lzLWVlZTA2Ny5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ2dJO0FBQ0U7QUFDL0Y7QUFDQTtBQUNDO0FBQ1Q7QUFDRztBQUNEO0FBQ1U7O0FBRXZDLDBFQUEwRSxtQkFBbUIsY0FBYyxZQUFZLDZCQUE2QixrQkFBa0IsVUFBVSx3QkFBd0IsaUJBQWlCLGFBQWEsOEJBQThCLG1CQUFtQixzQkFBc0IsVUFBVSxhQUFhLGlCQUFpQiw4QkFBOEIsb0JBQW9CLDBCQUEwQiwwQkFBMEIsc0JBQXNCLHlCQUF5QixxQkFBcUIsVUFBVTs7QUFFemdCO0FBQ0E7QUFDQSxRQUFRLHFEQUFnQjtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixTQUFTLEVBQUUsK0RBQWlCO0FBQzVDLHdIQUF3SCxnQkFBZ0I7QUFDeEk7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsbUNBQW1DLEVBQUUsK0RBQWlCO0FBQ3RFO0FBQ0E7QUFDQSwyQkFBMkIsbUVBQVM7QUFDcEMsZ0JBQWdCLDZCQUE2QjtBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsb0VBQVM7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixxREFBQyxDQUFDLGlEQUFJLFFBQVEscURBQUMsVUFBVSxnQ0FBZ0MsRUFBRSxxREFBQyxvRUFBb0UscURBQUMsVUFBVTtBQUMzSjtBQUNBO0FBQ0E7QUFDQSxlQUFlLEdBQUcscURBQUMsVUFBVSxzQ0FBc0MsRUFBRSxxREFB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LFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QixPQUFPLEVBQUUsNkJBQTZCO0FBQy9EO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLE9BQU8sRUFBRSwyQkFBMkI7QUFDN0Q7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsT0FBTyxFQUFFLDJCQUEyQjtBQUM3RDtBQUNBLFNBQVM7QUFDVDtBQUNBLHdCQUF3QixPQUFPLHFEQUFVO0FBQ3pDO0FBQ0E7O0FBRW9MOztBQUVwTCIsInNvdXJjZXMiOlsid2VicGFjazovL2V4Yi1jbGllbnQvLi9leHRlbnNpb25zL3dpZGdldHMvYXJjZ2lzL2FuYWx5c2lzL25vZGVfbW9kdWxlcy9AYXJjZ2lzL2FwcC1jb21wb25lbnRzL2Rpc3QvZXNtL2FyY2dpcy1zbWFydC1tYXBwaW5nLW1hZ25pdHVkZS1yYW5nZS1zbGlkZXJfMi5lbnRyeS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEFsbCBtYXRlcmlhbCBjb3B5cmlnaHQgRVNSSSwgQWxsIFJpZ2h0cyBSZXNlcnZlZCwgdW5sZXNzIG90aGVyd2lzZSBzcGVjaWZpZWQuXG4gKiB2NC4wLjU4XG4gKi9cbmltcG9ydCB7IHIgYXMgcmVnaXN0ZXJJbnN0YW5jZSwgaCwgSCBhcyBIb3N0LCBkIGFzIGdldEVsZW1lbnQsIGMgYXMgY3JlYXRlRXZlbnQsIGEgYXMgZ2V0QXNzZXRQYXRoIH0gZnJvbSAnLi9pbmRleC1lM2JmN2RhNy5qcyc7XG5pbXBvcnQgeyBhIGFzIGdldFZpc1ZhciwgYWMgYXMgaXNEZWZpbmVkLCBhYiBhcyB1cGRhdGVSZW5kZXJlciwgcyBhcyBzbWFydE1hcHBpbmdTdGF0ZSB9IGZyb20gJy4vcmFzdGVyLXVuaXF1ZS12YWx1ZS0wOTc2ZWM3Zi5qcyc7XG5pbXBvcnQgJy4vbG9hZE1vZHVsZXMtYjRhYzEyNDcuanMnO1xuaW1wb3J0ICcuL2NvbW1vbkVudW1zLWZjZjEzNjYxLmpzJztcbmltcG9ydCAnLi9sYW5ndWFnZVV0aWwtZWYwZTU0YjIuanMnO1xuaW1wb3J0ICcuL2RvbS00ZDM2NzY3Ny5qcyc7XG5pbXBvcnQgJy4vbG9jYWxlLTA1MGI2ZGI5LmpzJztcbmltcG9ydCAnLi9pbmRleC0wNTk1NmNhYi5qcyc7XG5pbXBvcnQgJy4vY29tbW9uRnVuY3Rpb25zLWIwODMwZTllLmpzJztcblxuY29uc3QgYXJjZ2lzU21hcnRNYXBwaW5nTWFnbml0dWRlUmFuZ2VTbGlkZXJDc3MgPSBcIi5tYWduaXR1ZGUtcmFuZ2UtYmxvY2t7bWFyZ2luLWJvdHRvbToxMnB4fS5yYW5nZS1zbGlkZXJ7aGVpZ2h0OjQwcHg7YmFja2dyb3VuZC1jb2xvcjp0cmFuc3BhcmVudDtwb3NpdGlvbjpyZWxhdGl2ZTt3aWR0aDo5MCU7bWFyZ2luOjE1cHggYXV0byAwIGF1dG99Lm1hZ25pdHVkZS1yYW5nZXtkaXNwbGF5OmZsZXg7anVzdGlmeS1jb250ZW50OnNwYWNlLWJldHdlZW47bWFyZ2luLWJvdHRvbToxNXB4fS5tYWduaXR1ZGUtcmFuZ2UtaXRlbXt3aWR0aDo0OCU7ZGlzcGxheTpmbGV4O2ZsZXgtZmxvdzpjb2x1bW47anVzdGlmeS1jb250ZW50OnNwYWNlLWJldHdlZW59LmVzcmktc2xpZGVyX19sYWJlbHt0ZXh0LWRlY29yYXRpb246dW5kZXJsaW5lfS5lc3JpLXNsaWRlcl9fbGFiZWw6aG92ZXJ7Ym9yZGVyOjFweCBzb2xpZCAjYmJiO2JhY2tncm91bmQtY29sb3I6I2YzZjNmMzt0ZXh0LWRlY29yYXRpb246bm9uZTt6LWluZGV4OjF9XCI7XG5cbmNvbnN0IEFyY2dpc1NtYXJ0TWFwcGluZ01hZ25pdHVkZVJhbmdlU2xpZGVyID0gY2xhc3Mge1xuICAgIGNvbnN0cnVjdG9yKGhvc3RSZWYpIHtcbiAgICAgICAgcmVnaXN0ZXJJbnN0YW5jZSh0aGlzLCBob3N0UmVmKTtcbiAgICB9XG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIC8vXG4gICAgLy8gTGlmZWN5Y2xlXG4gICAgLy9cbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgY29tcG9uZW50RGlkTG9hZCgpIHtcbiAgICAgICAgY29uc3QgeyBjb25maWcgfSA9IHNtYXJ0TWFwcGluZ1N0YXRlO1xuICAgICAgICB0aGlzLmhvc3RFbGVtZW50LnNoYWRvd1Jvb3QuZmlyc3RFbGVtZW50Q2hpbGQuaW5zZXJ0QWRqYWNlbnRIVE1MKFwiYmVmb3JlYmVnaW5cIiwgYDxsaW5rIHJlbD1cInN0eWxlc2hlZXRcIiBocmVmPVwiJHtjb25maWcuanNhcGlVcmx9L3RoZW1lcy9saWdodC9tYWluLmNzc1wiIC8+YCk7XG4gICAgfVxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAvL1xuICAgIC8vICBSZW5kZXIgTWV0aG9kc1xuICAgIC8vXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgY29uc3QgeyBsYXllcjogc21MYXllciwgbW9kdWxlcywgc3RyaW5ncyB9ID0gc21hcnRNYXBwaW5nU3RhdGU7XG4gICAgICAgIGNvbnN0IGxheWVyID0gc21MYXllcjtcbiAgICAgICAgY29uc3QgcmVuZGVyZXIgPSBsYXllci5yZW5kZXJlcjtcbiAgICAgICAgY29uc3Qgc2l6ZVZpc1ZhciA9IGdldFZpc1ZhcihyZW5kZXJlciwgXCJzaXplXCIpO1xuICAgICAgICBjb25zdCB7IG1pbkRhdGFWYWx1ZSwgbWF4RGF0YVZhbHVlIH0gPSBzaXplVmlzVmFyO1xuICAgICAgICBpZiAoIXRoaXMucmFuZ2VTbGlkZXJOb2RlKSB7XG4gICAgICAgICAgICBjb25zdCBjb25maWcgPSB7XG4gICAgICAgICAgICAgICAgbWluOiBtaW5EYXRhVmFsdWUgPyBNYXRoLnJvdW5kKG1pbkRhdGFWYWx1ZSAqIDEwKSAvIDEwIDogMCxcbiAgICAgICAgICAgICAgICBtYXg6IG1heERhdGFWYWx1ZSA/IE1hdGgucm91bmQobWF4RGF0YVZhbHVlICogMTApIC8gMTAgOiAxMDAsXG4gICAgICAgICAgICAgICAgdmFsdWVzOiBbTWF0aC5yb3VuZChtaW5EYXRhVmFsdWUgKiAxMCkgLyAxMCwgTWF0aC5yb3VuZChtYXhEYXRhVmFsdWUgKiAxMCkgLyAxMF0sXG4gICAgICAgICAgICAgICAgdmlzaWJsZUVsZW1lbnRzOiB7XG4gICAgICAgICAgICAgICAgICAgIGxhYmVsczogdHJ1ZVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgcHJlY2lzaW9uOiAxLFxuICAgICAgICAgICAgICAgIGxhYmVsSW5wdXRzRW5hYmxlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBsYWJlbEZvcm1hdEZ1bmN0aW9uOiAodmFsdWUpID0+IHZhbHVlLnRvRml4ZWQoMSlcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aGlzLnJhbmdlU2xpZGVyTm9kZSA9IG5ldyBtb2R1bGVzLlNsaWRlcihjb25maWcpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKG1pbkRhdGFWYWx1ZSAhPT0gdGhpcy5yYW5nZVNsaWRlck5vZGUudmFsdWVzWzBdIHx8XG4gICAgICAgICAgICAgICAgbWF4RGF0YVZhbHVlICE9PSB0aGlzLnJhbmdlU2xpZGVyTm9kZS52YWx1ZXNbMV0gfHxcbiAgICAgICAgICAgICAgICAhaXNEZWZpbmVkKHRoaXMucmFuZ2VTbGlkZXJOb2RlLnZhbHVlc1sxXSkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjb25maWcgPSB7XG4gICAgICAgICAgICAgICAgICAgIG1pbjogbWluRGF0YVZhbHVlID8gTWF0aC5yb3VuZChtaW5EYXRhVmFsdWUgKiAxMCkgLyAxMCA6IDAsXG4gICAgICAgICAgICAgICAgICAgIG1heDogbWF4RGF0YVZhbHVlID8gTWF0aC5yb3VuZChtYXhEYXRhVmFsdWUgKiAxMCkgLyAxMCA6IDEwMCxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWVzOiBbTWF0aC5yb3VuZChtaW5EYXRhVmFsdWUgKiAxMCkgLyAxMCwgTWF0aC5yb3VuZChtYXhEYXRhVmFsdWUgKiAxMCkgLyAxMF1cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHRoaXMucmFuZ2VTbGlkZXJOb2RlLnNldChjb25maWcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiAoaChIb3N0LCBudWxsLCBoKFwiZGl2XCIsIHsgY2xhc3M6IFwibWFnbml0dWRlLXJhbmdlLWJsb2NrXCIgfSwgaChcImNhbGNpdGUtbGFiZWxcIiwgbnVsbCwgc3RyaW5ncy5wYW5lbHMudmVjdG9yRmllbGQubWFnbml0dWRlUmFuZ2UpLCBoKFwiZGl2XCIsIHsgY2xhc3M6IFwicmFuZ2Utc2xpZGVyXCIsIHJlZjogKG5vZGUpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAobm9kZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmFmdGVyTWFnbml0dWRlUmFuZ2VDcmVhdGUobm9kZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSB9KSwgaChcImRpdlwiLCB7IGRpcjogXCJsdHJcIiwgY2xhc3M6IFwibWFnbml0dWRlLXJhbmdlXCIgfSwgaChcImRpdlwiLCB7IGNsYXNzOiBcIm1hZ25pdHVkZS1yYW5nZS1pdGVtXCIgfSwgaChcImNhbGNpdGUtaW5wdXQtbnVtYmVyXCIsIHsgY2xhc3M6IFwibWFnbml0dWRlLWlucHV0XCIsIGxhYmVsOiBzdHJpbmdzLnBhbmVscy52ZWN0b3JGaWVsZC5taW4sIHN0ZXA6IDAuMSwgc2NhbGU6IFwic1wiLCBtaW46IG1pbkRhdGFWYWx1ZSA/IE1hdGgucm91bmQobWluRGF0YVZhbHVlICogMTApIC8gMTAgOiAwLCBtYXg6IG1heERhdGFWYWx1ZSA/IE1hdGgucm91bmQobWF4RGF0YVZhbHVlICogMTApIC8gMTAgOiAxMDAsIHZhbHVlOiBgJHttaW5EYXRhVmFsdWUgPyBNYXRoLnJvdW5kKG1pbkRhdGFWYWx1ZSAqIDEwKSAvIDEwIDogMH1gLCBvbkNhbGNpdGVJbnB1dE51bWJlcklucHV0OiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgdmFsdWVzID0gdGhpcy5yYW5nZVNsaWRlck5vZGUudmFsdWVzO1xuICAgICAgICAgICAgICAgIGNvbnN0IG5ld01pbmltdW1TaXplID0gcGFyc2VGbG9hdCh0aGlzLm1pblJhbmdlTm9kZS52YWx1ZSk7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMubWluUmFuZ2VOb2RlLnZhbHVlICYmXG4gICAgICAgICAgICAgICAgICAgIG5ld01pbmltdW1TaXplID49IG1pbkRhdGFWYWx1ZSAmJlxuICAgICAgICAgICAgICAgICAgICBuZXdNaW5pbXVtU2l6ZSA8IHZhbHVlc1sxXSkge1xuICAgICAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5taW5XYXRjaEhhbmRsZSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubWluUmFuZ2VOb2RlLnZhbHVlID0gYCR7bmV3TWluaW11bVNpemV9YDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yYW5nZVNsaWRlck5vZGUudmFsdWVzID0gW3BhcnNlRmxvYXQodGhpcy5taW5SYW5nZU5vZGUudmFsdWUpLCB2YWx1ZXNbMV1dO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmhhbmRsZU1hZ25pdHVkZVJhbmdlVmFsdWVzQ2hhbmdlKG5ld01pbmltdW1TaXplLCB2YWx1ZXNbMV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5taW5XYXRjaEhhbmRsZSA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdXBkYXRlZFZhbHVlcyA9IHRoaXMucmFuZ2VTbGlkZXJOb2RlLnZhbHVlcztcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubWluUmFuZ2VOb2RlLnZhbHVlID0gYCR7dXBkYXRlZFZhbHVlc1swXX1gO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVNYWduaXR1ZGVSYW5nZVZhbHVlc0NoYW5nZSh1cGRhdGVkVmFsdWVzWzBdLCB1cGRhdGVkVmFsdWVzWzFdKTtcbiAgICAgICAgICAgICAgICAgICAgfSwgMzAwMCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgcmVmOiAobm9kZSkgPT4gKHRoaXMubWluUmFuZ2VOb2RlID0gbm9kZSkgfSkpLCBoKFwiZGl2XCIsIHsgY2xhc3M6IFwibWFnbml0dWRlLXJhbmdlLWl0ZW1cIiB9LCBoKFwiY2FsY2l0ZS1pbnB1dC1udW1iZXJcIiwgeyBjbGFzczogXCJtYWduaXR1ZGUtaW5wdXRcIiwgbGFiZWw6IHN0cmluZ3MucGFuZWxzLnZlY3RvckZpZWxkLm1heCwgc3RlcDogMC4xLCBzY2FsZTogXCJzXCIsIG1pbjogbWluRGF0YVZhbHVlID8gTWF0aC5yb3VuZChtaW5EYXRhVmFsdWUgKiAxMCkgLyAxMCA6IDAsIG1heDogbWF4RGF0YVZhbHVlID8gTWF0aC5yb3VuZChtYXhEYXRhVmFsdWUgKiAxMCkgLyAxMCA6IDEwMCwgdmFsdWU6IGAke21heERhdGFWYWx1ZSA/IE1hdGgucm91bmQobWF4RGF0YVZhbHVlICogMTApIC8gMTAgOiAxMDB9YCwgb25DYWxjaXRlSW5wdXROdW1iZXJJbnB1dDogKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlcyA9IHRoaXMucmFuZ2VTbGlkZXJOb2RlLnZhbHVlcztcbiAgICAgICAgICAgICAgICBjb25zdCBuZXdNYXhpbXVtU2l6ZSA9IHBhcnNlRmxvYXQodGhpcy5tYXhSYW5nZU5vZGUudmFsdWUpO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLm1heFJhbmdlTm9kZS52YWx1ZSAmJlxuICAgICAgICAgICAgICAgICAgICBuZXdNYXhpbXVtU2l6ZSA+IHZhbHVlc1swXSAmJlxuICAgICAgICAgICAgICAgICAgICBuZXdNYXhpbXVtU2l6ZSA8PSBtYXhEYXRhVmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMubWF4V2F0Y2hIYW5kbGUpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm1heFJhbmdlTm9kZS52YWx1ZSA9IGAke25ld01heGltdW1TaXplfWA7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmFuZ2VTbGlkZXJOb2RlLnZhbHVlcyA9IFt2YWx1ZXNbMF0sIHBhcnNlRmxvYXQodGhpcy5tYXhSYW5nZU5vZGUudmFsdWUpXTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVNYWduaXR1ZGVSYW5nZVZhbHVlc0NoYW5nZSh2YWx1ZXNbMF0sIG5ld01heGltdW1TaXplKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubWF4V2F0Y2hIYW5kbGUgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHVwZGF0ZWRWYWx1ZXMgPSB0aGlzLnJhbmdlU2xpZGVyTm9kZS52YWx1ZXM7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1heFJhbmdlTm9kZS52YWx1ZSA9IGAke3VwZGF0ZWRWYWx1ZXNbMF19YDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaGFuZGxlTWFnbml0dWRlUmFuZ2VWYWx1ZXNDaGFuZ2UodXBkYXRlZFZhbHVlc1swXSwgdXBkYXRlZFZhbHVlc1sxXSk7XG4gICAgICAgICAgICAgICAgICAgIH0sIDMwMDApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIHJlZjogKG5vZGUpID0+ICh0aGlzLm1heFJhbmdlTm9kZSA9IG5vZGUpIH0pKSkpKSk7XG4gICAgfVxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAvL1xuICAgIC8vICBQcml2YXRlIG1ldGhvZHNcbiAgICAvL1xuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICBhZnRlck1hZ25pdHVkZVJhbmdlQ3JlYXRlKG5vZGUpIHtcbiAgICAgICAgaWYgKCF0aGlzLnJhbmdlU2xpZGVyTm9kZS5jb250YWluZXIpIHtcbiAgICAgICAgICAgIGNvbnN0IGRpdk5vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICAgICAgbm9kZS5hcHBlbmQoZGl2Tm9kZSk7XG4gICAgICAgICAgICB0aGlzLnJhbmdlU2xpZGVyTm9kZS5jb250YWluZXIgPSBkaXZOb2RlO1xuICAgICAgICAgICAgdGhpcy5jcmVhdGVNYWduaXR1ZGVSYW5nZVNsaWRlckNoYW5nZUV2ZW50cygpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNyZWF0ZU1hZ25pdHVkZVJhbmdlU2xpZGVyQ2hhbmdlRXZlbnRzKCkge1xuICAgICAgICBpZiAoIXRoaXMucmFuZ2VTbGlkZXJOb2RlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yYW5nZVNsaWRlck5vZGUub24oXCJ0aHVtYi1jaGFuZ2VcIiwgKHNsaWRlck5vZGVJbmZvKSA9PiB7XG4gICAgICAgICAgICBjb25zdCB2YWx1ZXMgPSB0aGlzLnJhbmdlU2xpZGVyTm9kZS52YWx1ZXM7XG4gICAgICAgICAgICBpZiAoc2xpZGVyTm9kZUluZm8uaW5kZXggPT09IDApIHtcbiAgICAgICAgICAgICAgICBpZiAodmFsdWVzWzBdID49IHZhbHVlc1sxXSkge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZXNbMF0gPSBzbGlkZXJOb2RlSW5mby5vbGRWYWx1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAodmFsdWVzWzFdIDw9IHZhbHVlc1swXSkge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZXNbMV0gPSBzbGlkZXJOb2RlSW5mby5vbGRWYWx1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLm1pblJhbmdlTm9kZS52YWx1ZSA9IGAke3ZhbHVlc1swXX1gO1xuICAgICAgICAgICAgdGhpcy5tYXhSYW5nZU5vZGUudmFsdWUgPSBgJHt2YWx1ZXNbMV19YDtcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlTWFnbml0dWRlUmFuZ2VWYWx1ZXNDaGFuZ2UodmFsdWVzWzBdLCB2YWx1ZXNbMV0pO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5yYW5nZVNsaWRlck5vZGUub24oXCJ0aHVtYi1kcmFnXCIsIChzbGlkZXJOb2RlSW5mbykgPT4ge1xuICAgICAgICAgICAgY29uc3QgdmFsdWVzID0gdGhpcy5yYW5nZVNsaWRlck5vZGUudmFsdWVzO1xuICAgICAgICAgICAgaWYgKHNsaWRlck5vZGVJbmZvLmluZGV4ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlc1swXSA+PSB2YWx1ZXNbMV0pIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWVzWzBdID0gdmFsdWVzWzBdIC0gMC4xO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlc1sxXSA8PSB2YWx1ZXNbMF0pIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWVzWzFdID0gdmFsdWVzWzFdICsgMC4xO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5taW5SYW5nZU5vZGUudmFsdWUgPSBgJHt2YWx1ZXNbMF19YDtcbiAgICAgICAgICAgIHRoaXMubWF4UmFuZ2VOb2RlLnZhbHVlID0gYCR7dmFsdWVzWzFdfWA7XG4gICAgICAgICAgICB0aGlzLmhhbmRsZU1hZ25pdHVkZVJhbmdlVmFsdWVzQ2hhbmdlKHZhbHVlc1swXSwgdmFsdWVzWzFdKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMucmFuZ2VTbGlkZXJOb2RlLm9uKFwic2VnbWVudC1kcmFnXCIsICgpID0+IHtcbiAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlcyA9IChfYSA9IHRoaXMucmFuZ2VTbGlkZXJOb2RlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EudmFsdWVzO1xuICAgICAgICAgICAgdGhpcy5taW5SYW5nZU5vZGUudmFsdWUgPSBgJHt2YWx1ZXNbMF19YDtcbiAgICAgICAgICAgIHRoaXMubWF4UmFuZ2VOb2RlLnZhbHVlID0gYCR7dmFsdWVzWzFdfWA7XG4gICAgICAgICAgICB0aGlzLmhhbmRsZU1hZ25pdHVkZVJhbmdlVmFsdWVzQ2hhbmdlKHZhbHVlc1swXSwgdmFsdWVzWzFdKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGhhbmRsZU1hZ25pdHVkZVJhbmdlVmFsdWVzQ2hhbmdlKGxvd2VyQm91bmQsIHVwcGVyQm91bmQpIHtcbiAgICAgICAgaWYgKGxvd2VyQm91bmQgPT09IHRoaXMubWluUmFuZ2VOb2RlLm1heCAmJiB1cHBlckJvdW5kID09PSB0aGlzLm1heFJhbmdlTm9kZS5taW4pIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB7IGxheWVyOiBzbUxheWVyIH0gPSBzbWFydE1hcHBpbmdTdGF0ZTtcbiAgICAgICAgY29uc3QgbGF5ZXIgPSBzbUxheWVyO1xuICAgICAgICBjb25zdCByZW5kZXJlciA9IGxheWVyLnJlbmRlcmVyO1xuICAgICAgICBjb25zdCBzaXplVmlzVmFyID0gZ2V0VmlzVmFyKHJlbmRlcmVyLCBcInNpemVcIik7XG4gICAgICAgIHRoaXMubWluUmFuZ2VOb2RlLnZhbHVlID0gYCR7bG93ZXJCb3VuZH1gO1xuICAgICAgICB0aGlzLm1heFJhbmdlTm9kZS52YWx1ZSA9IGAke3VwcGVyQm91bmR9YDtcbiAgICAgICAgc2l6ZVZpc1Zhci5taW5EYXRhVmFsdWUgPSBsb3dlckJvdW5kO1xuICAgICAgICBzaXplVmlzVmFyLm1heERhdGFWYWx1ZSA9IHVwcGVyQm91bmQ7XG4gICAgICAgIHRoaXMubWF4UmFuZ2VOb2RlLm1pbiA9IGxvd2VyQm91bmQgKyB0aGlzLm1heFJhbmdlTm9kZS5zdGVwO1xuICAgICAgICB0aGlzLm1pblJhbmdlTm9kZS5tYXggPSB1cHBlckJvdW5kIC0gdGhpcy5taW5SYW5nZU5vZGUuc3RlcDtcbiAgICAgICAgdXBkYXRlUmVuZGVyZXIoKTtcbiAgICB9XG4gICAgZ2V0IGhvc3RFbGVtZW50KCkgeyByZXR1cm4gZ2V0RWxlbWVudCh0aGlzKTsgfVxufTtcbkFyY2dpc1NtYXJ0TWFwcGluZ01hZ25pdHVkZVJhbmdlU2xpZGVyLnN0eWxlID0gYXJjZ2lzU21hcnRNYXBwaW5nTWFnbml0dWRlUmFuZ2VTbGlkZXJDc3M7XG5cbnZhciBJbWFnZVBhdGhzO1xuKGZ1bmN0aW9uIChJbWFnZVBhdGhzKSB7XG4gICAgSW1hZ2VQYXRoc1tcImJlYXVmb3J0XCJdID0gXCJiZWF1Zm9ydC5wbmdcIjtcbiAgICBJbWFnZVBhdGhzW1wiY2xhc3NpZmllZEFycm93XCJdID0gXCJjbGFzc2lmaWVkQXJyb3cucG5nXCI7XG4gICAgSW1hZ2VQYXRoc1tcIm9jZWFuQ3VycmVudEtub3RzXCJdID0gXCJvY2VhbkN1cnJlbnRLbm90cy5wbmdcIjtcbiAgICBJbWFnZVBhdGhzW1wib2NlYW5DdXJyZW50TXBzXCJdID0gXCJvY2VhbkN1cnJlbnRNcHMucG5nXCI7XG4gICAgSW1hZ2VQYXRoc1tcInNpbXBsZVNjYWxhclwiXSA9IFwic2ltcGxlU2NhbGFyLnBuZ1wiO1xuICAgIEltYWdlUGF0aHNbXCJzaW5nbGVBcnJvd1wiXSA9IFwic2luZ2xlQXJyb3cucG5nXCI7XG4gICAgSW1hZ2VQYXRoc1tcIndpbmRCYXJic1wiXSA9IFwid2luZEJhcmJzLnBuZ1wiO1xufSkoSW1hZ2VQYXRocyB8fCAoSW1hZ2VQYXRocyA9IHt9KSk7XG5cbmNvbnN0IGFyY2dpc1NtYXJ0TWFwcGluZ1ZlY3RvclN5bWJvbEJ1dHRvbkNzcyA9IFwiLnZlY3Rvci1zeW1ib2wtYnV0dG9ue2Rpc3BsYXk6ZmxleDtwYWRkaW5nOjZweDtqdXN0aWZ5LWNvbnRlbnQ6c3BhY2UtYmV0d2VlbjthbGlnbi1pdGVtczpjZW50ZXI7Ym9yZGVyLXJhZGl1czowO2N1cnNvcjpwb2ludGVyO2JhY2tncm91bmQtY29sb3I6dmFyKC0tY2FsY2l0ZS1jb2xvci1mb3JlZ3JvdW5kLTEpO2NvbG9yOnZhcigtLWNhbGNpdGUtY29sb3ItdGV4dC0xKTtib3JkZXItY29sb3I6dmFyKC0tY2FsY2l0ZS1jb2xvci1mb3JlZ3JvdW5kLTMpO2JvcmRlci13aWR0aDoxcHg7Ym9yZGVyLXN0eWxlOnNvbGlkO2JveC1zaGFkb3c6dHJhbnNwYXJlbnQgMHB4IDBweCAwcHggMXB4IGluc2V0fS52ZWN0b3Itc3ltYm9sLWJ1dHRvbjpob3Zlcntib3gtc2hhZG93Omluc2V0IDAgMCAwIDFweCB2YXIoLS1jYWxjaXRlLWNvbG9yLWZvcmVncm91bmQtMyl9LnZlY3Rvci1zeW1ib2wtYnV0dG9uOmFjdGl2ZXtib3gtc2hhZG93Omluc2V0IDAgMCAwIDJweCB2YXIoLS1jYWxjaXRlLWNvbG9yLWZvcmVncm91bmQtMyl9LnZlY3Rvci1zeW1ib2wtYnV0dG9uOmZvY3Vze2JveC1zaGFkb3c6aW5zZXQgMCAwIDAgMnB4IHZhcigtLWNhbGNpdGUtY29sb3ItZm9yZWdyb3VuZC0zKTtvdXRsaW5lOjJweCBzb2xpZCB2YXIoLS1jYWxjaXRlLWNvbG9yLWJyYW5kKTtvdXRsaW5lLW9mZnNldDoycHh9LnZlY3Rvci1zeW1ib2wtYnV0dG9uLmFjdGl2ZXtvdXRsaW5lOjFweCBzb2xpZCB2YXIoLS1jYWxjaXRlLXVpLWZvY3VzLWNvbG9yLCB2YXIoLS1jYWxjaXRlLWNvbG9yLWJyYW5kKSl9LnZlY3Rvci1zeW1ib2wtY29udGVudHtkaXNwbGF5OmZsZXg7YWxpZ24taXRlbXM6Y2VudGVyO3dpZHRoOjEwMCV9LnZlY3Rvci1zeW1ib2wtc3ViLWNvbnRlbnR7ZGlzcGxheTpmbGV4O2p1c3RpZnktY29udGVudDpzcGFjZS1iZXR3ZWVuO2FsaWduLWl0ZW1zOmNlbnRlcjt3aWR0aDoxMDAlfS52ZWN0b3Itc3ltYm9sLWJ1dHRvbi1pY29ue21pbi13aWR0aDoxNnB4O2JhY2tncm91bmQtcmVwZWF0Om5vLXJlcGVhdDtoZWlnaHQ6NDhweDtwYWRkaW5nOjA7ZGlzcGxheTppbmxpbmUtYmxvY2t9LnZlY3Rvci1zeW1ib2wtYnV0dG9uLXRleHR7ZGlzcGxheTppbmxpbmUtYmxvY2s7cGFkZGluZzowIDEwcHh9LnZlY3Rvci1zeW1ib2wtYnV0dG9uLXRpdGxle2ZvbnQtd2VpZ2h0OmJvbGR9LnZlY3Rvci1zeW1ib2wtYnV0dG9uLW1zZ3tmb250LXNpemU6ODAlO2xpbmUtaGVpZ2h0OjE2cHh9XCI7XG5cbmNvbnN0IEFyY2dpc1NtYXJ0TWFwcGluZ1ZlY3RvclN5bWJvbEJ1dHRvbiA9IGNsYXNzIHtcbiAgICBjb25zdHJ1Y3Rvcihob3N0UmVmKSB7XG4gICAgICAgIHJlZ2lzdGVySW5zdGFuY2UodGhpcywgaG9zdFJlZik7XG4gICAgICAgIHRoaXMuYXJjZ2lzU21hcnRNYXBwaW5nU2VsZWN0Q2hhbmdlID0gY3JlYXRlRXZlbnQodGhpcywgXCJhcmNnaXNTbWFydE1hcHBpbmdTZWxlY3RDaGFuZ2VcIiwgNyk7XG4gICAgICAgIHRoaXMuYXJjZ2lzU21hcnRNYXBwaW5nU2VsZWN0QmVmb3JlT3BlbiA9IGNyZWF0ZUV2ZW50KHRoaXMsIFwiYXJjZ2lzU21hcnRNYXBwaW5nU2VsZWN0QmVmb3JlT3BlblwiLCA3KTtcbiAgICAgICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICAvL1xuICAgICAgICAvLyAgUHJpdmF0ZSBQcm9wZXJ0aWVzXG4gICAgICAgIC8vXG4gICAgICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAgdGhpcy5vcGVuID0gZmFsc2U7XG4gICAgICAgIHRoaXMuc2VsZWN0SW5mb3MgPSBbXTtcbiAgICB9XG4gICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIC8vXG4gICAgLy8gIFB1YmxpYyBNZXRob2RzXG4gICAgLy9cbiAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgYXN5bmMgc2V0Rm9jdXMoKSB7XG4gICAgICAgIHRoaXMuYnV0dG9uTm9kZS5mb2N1cygpO1xuICAgIH1cbiAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgLy9cbiAgICAvLyAgTGlmZWN5Y2xlXG4gICAgLy9cbiAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgY29tcG9uZW50V2lsbExvYWQoKSB7XG4gICAgICAgIHRoaXMucG9wdWxhdGVTeW1ib2xTdHlsZVNlbGVjdG9ySW5mbygpO1xuICAgICAgICB0aGlzLnNldFN5bWJvbFN0eWxlU2VsZWN0aW9uKCk7XG4gICAgfVxuICAgIGNvbXBvbmVudFdpbGxVcGRhdGUoKSB7XG4gICAgICAgIGNvbnN0IHsgbGF5ZXI6IHNtTGF5ZXIgfSA9IHNtYXJ0TWFwcGluZ1N0YXRlO1xuICAgICAgICBjb25zdCBsYXllciA9IHNtTGF5ZXI7XG4gICAgICAgIGNvbnN0IHJlbmRlcmVyID0gbGF5ZXIucmVuZGVyZXI7XG4gICAgICAgIGNvbnN0IHsgc3R5bGUgfSA9IHJlbmRlcmVyO1xuICAgICAgICBpZiAodGhpcy5zZWxlY3RlZFN0eWxlSW5mby52YWx1ZSAhPT0gc3R5bGUpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0U3ltYm9sU3R5bGVTZWxlY3Rpb24oKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgLy9cbiAgICAvLyBSZW5kZXIgTWV0aG9kc1xuICAgIC8vXG4gICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgY29uc3QgeyBzdHJpbmdzIH0gPSBzbWFydE1hcHBpbmdTdGF0ZTtcbiAgICAgICAgcmV0dXJuIChoKFwiY2FsY2l0ZS1sYWJlbFwiLCB7IG9uQ2xpY2s6IChldmVudCkgPT4gZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCkgfSwgc3RyaW5ncy5wYW5lbHMudmVjdG9yRmllbGQuc3ltYm9sVHlwZSwgaChcImRpdlwiLCB7IGNsYXNzOiBcInZlY3Rvci1zeW1ib2wtYnV0dG9uXCIsIHJvbGU6IFwiYnV0dG9uXCIsIHRhYmluZGV4OiBcIjBcIiwgXCJhcmlhLWhhc3BvcHVwXCI6IFwidHJ1ZVwiLCBcImFyaWEtbGFiZWxcIjogc3RyaW5ncy5wYW5lbHMudmVjdG9yRmllbGQuc3ltYm9sVHlwZSwgcmVmOiAobm9kZSkgPT4gKHRoaXMuYnV0dG9uTm9kZSA9IG5vZGUpLCBvbktleURvd246IChldmVudCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChldmVudC5rZXkgPT09IFwiIFwiIHx8IGV2ZW50LmtleSA9PT0gXCJFbnRlclwiKSB7XG4gICAgICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm9wZW5TZWxlY3REcm9wZG93bigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIG9uQ2xpY2s6ICgpID0+IHRoaXMub3BlblNlbGVjdERyb3Bkb3duKCkgfSwgaChcImRpdlwiLCB7IGNsYXNzOiBcInZlY3Rvci1zeW1ib2wtY29udGVudFwiIH0sIGgoXCJkaXZcIiwgeyBjbGFzczogXCJ2ZWN0b3Itc3ltYm9sLWJ1dHRvbi1pY29uXCIsIHN0eWxlOiB7XG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZEltYWdlOiBgdXJsKCR7Z2V0QXNzZXRQYXRoKGAuL2Fzc2V0cy9hcmNnaXMtc21hcnQtbWFwcGluZy1kcm9wZG93bi1pbWFnZXMvYCl9JHt0aGlzLnNlbGVjdGVkU3R5bGVJbmZvLmljb25QYXRofSlgXG4gICAgICAgICAgICB9IH0pLCBoKFwiZGl2XCIsIHsgY2xhc3M6IFwidmVjdG9yLXN5bWJvbC1zdWItY29udGVudFwiIH0sIGgoXCJkaXZcIiwgeyBjbGFzczogXCJ2ZWN0b3Itc3ltYm9sLWJ1dHRvbi10ZXh0XCIgfSwgaChcImRpdlwiLCB7IGNsYXNzOiBcInZlY3Rvci1zeW1ib2wtYnV0dG9uLXRpdGxlXCIgfSwgdGhpcy5zZWxlY3RlZFN0eWxlSW5mby50aXRsZSksIGgoXCJkaXZcIiwgeyBjbGFzczogXCJ2ZWN0b3Itc3ltYm9sLWJ1dHRvbi1tc2dcIiB9LCB0aGlzLnNlbGVjdGVkU3R5bGVJbmZvLm1zZykpLCBoKFwiZGl2XCIsIG51bGwsIGgoXCJjYWxjaXRlLWljb25cIiwgeyBzY2FsZTogXCJzXCIsIGljb246IFwiY2hldnJvbi1kb3duXCIgfSkpKSkpKSk7XG4gICAgfVxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgLy9cbiAgICAvLyBQcml2YXRlIG1ldGhvZHNcbiAgICAvL1xuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgc2V0U3ltYm9sU3R5bGVTZWxlY3Rpb24oKSB7XG4gICAgICAgIGNvbnN0IHsgbGF5ZXI6IHNtTGF5ZXIgfSA9IHNtYXJ0TWFwcGluZ1N0YXRlO1xuICAgICAgICBjb25zdCBsYXllciA9IHNtTGF5ZXI7XG4gICAgICAgIGNvbnN0IHJlbmRlcmVyID0gbGF5ZXIucmVuZGVyZXI7XG4gICAgICAgIHRoaXMuc2VsZWN0ZWRTdHlsZUluZm8gPSB0aGlzLnNlbGVjdEluZm9zLmZpbmQoKGluZm8pID0+IGluZm8udmFsdWUgPT09IHJlbmRlcmVyLnN0eWxlIHx8XG4gICAgICAgICAgICAocmVuZGVyZXIuc3R5bGUuaW5jbHVkZXMoXCJiZWF1Zm9ydFwiKSAmJiBpbmZvLnZhbHVlLmluY2x1ZGVzKFwiYmVhdWZvcnRcIikpKTtcbiAgICAgICAgdGhpcy5zZWxlY3RJbmZvcy5mb3JFYWNoKChzZWxlY3RJbmZvKSA9PiB7XG4gICAgICAgICAgICBzZWxlY3RJbmZvLnNlbGVjdGVkID0gc2VsZWN0SW5mby52YWx1ZSA9PT0gdGhpcy5zZWxlY3RlZFN0eWxlSW5mby52YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGNsb3NlUG9wb3ZlcigpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICB0aGlzLm9wZW4gPSBmYWxzZTtcbiAgICAgICAgaWYgKHRoaXMuZHJvcGRvd25Ob2RlKSB7XG4gICAgICAgICAgICAoX2EgPSB0aGlzLmRyb3Bkb3duTm9kZS5wYXJlbnROb2RlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EucmVtb3ZlQ2hpbGQodGhpcy5kcm9wZG93bk5vZGUpO1xuICAgICAgICAgICAgdGhpcy5kcm9wZG93bk5vZGUgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5idXR0b25Ob2RlLmNsYXNzTGlzdC5yZW1vdmUoXCJhY3RpdmVcIik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgb3BlblNlbGVjdERyb3Bkb3duKCkge1xuICAgICAgICBpZiAoIXRoaXMub3Blbikge1xuICAgICAgICAgICAgdGhpcy5hcmNnaXNTbWFydE1hcHBpbmdTZWxlY3RCZWZvcmVPcGVuLmVtaXQoKTtcbiAgICAgICAgICAgIGNvbnN0IGRyb3Bkb3duID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImFyY2dpcy1zbWFydC1tYXBwaW5nLWRyb3Bkb3duXCIpO1xuICAgICAgICAgICAgZHJvcGRvd24uYnV0dG9uTm9kZSA9IHRoaXMuYnV0dG9uTm9kZTtcbiAgICAgICAgICAgIGRyb3Bkb3duLmluZm9zID0gdGhpcy5zZWxlY3RJbmZvcztcbiAgICAgICAgICAgIHRoaXMuZHJvcGRvd25Ob2RlID0gZHJvcGRvd247XG4gICAgICAgICAgICBkcm9wZG93bi5hZGRFdmVudExpc3RlbmVyKFwiYXJjZ2lzU21hcnRNYXBwaW5nRHJvcGRvd25DbG9zZVwiLCAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmNsb3NlUG9wb3ZlcigpO1xuICAgICAgICAgICAgICAgIGV2ZW50LmRldGFpbCA9PT0gXCJFc2NhcGVcIiAmJiB0aGlzLnNldEZvY3VzKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGRyb3Bkb3duLmFkZEV2ZW50TGlzdGVuZXIoXCJhcmNnaXNTbWFydE1hcHBpbmdEcm9wZG93bkNoYW5nZVwiLCAoZXZlbnQpID0+IHRoaXMuc2V0U3ltYm9sU3R5bGUoZXZlbnQuZGV0YWlsKSk7XG4gICAgICAgICAgICB0aGlzLmJ1dHRvbk5vZGUuY2xhc3NMaXN0LmFkZChcImFjdGl2ZVwiKTtcbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZHJvcGRvd24pO1xuICAgICAgICAgICAgdGhpcy5vcGVuID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMub3BlbiA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHNldFN5bWJvbFN0eWxlKG5ld1N0eWxlSW5mbykge1xuICAgICAgICBjb25zdCB7IGxheWVyOiBzbUxheWVyIH0gPSBzbWFydE1hcHBpbmdTdGF0ZTtcbiAgICAgICAgY29uc3QgbGF5ZXIgPSBzbUxheWVyO1xuICAgICAgICBjb25zdCByZW5kZXJlciA9IGxheWVyLnJlbmRlcmVyO1xuICAgICAgICBjb25zdCB7IHN0eWxlOiBjdXJyZW50U3R5bGUgfSA9IHJlbmRlcmVyO1xuICAgICAgICBjb25zdCBuZXdTdHlsZSA9IG5ld1N0eWxlSW5mby52YWx1ZTtcbiAgICAgICAgY29uc3Qgd2FzQmVhdWZvcnQgPSBjdXJyZW50U3R5bGUuaW5jbHVkZXMoXCJiZWF1Zm9ydFwiKTtcbiAgICAgICAgY29uc3QgaXNCZWF1Zm9ydCA9IG5ld1N0eWxlLmluY2x1ZGVzKFwiYmVhdWZvcnRcIik7XG4gICAgICAgIGlmIChuZXdTdHlsZSA9PT0gY3VycmVudFN0eWxlIHx8ICh3YXNCZWF1Zm9ydCAmJiBpc0JlYXVmb3J0KSkge1xuICAgICAgICAgICAgdGhpcy5jbG9zZVBvcG92ZXIoKTtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4gdGhpcy5zZXRGb2N1cygpLCAzMDApO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2VsZWN0SW5mb3MuZm9yRWFjaCgoc2VsZWN0SW5mbykgPT4ge1xuICAgICAgICAgICAgc2VsZWN0SW5mby5zZWxlY3RlZCA9IHNlbGVjdEluZm8udmFsdWUgPT09IG5ld1N0eWxlO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5zZWxlY3RlZFN0eWxlSW5mbyA9IG5ld1N0eWxlSW5mbztcbiAgICAgICAgdGhpcy5hcmNnaXNTbWFydE1hcHBpbmdTZWxlY3RDaGFuZ2UuZW1pdCh0aGlzLnNlbGVjdGVkU3R5bGVJbmZvLnZhbHVlKTtcbiAgICAgICAgdGhpcy5jbG9zZVBvcG92ZXIoKTtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB0aGlzLnNldEZvY3VzKCksIDMwMCk7XG4gICAgfVxuICAgIHBvcHVsYXRlU3ltYm9sU3R5bGVTZWxlY3RvckluZm8oKSB7XG4gICAgICAgIGNvbnN0IHsgc3RyaW5ncyB9ID0gc21hcnRNYXBwaW5nU3RhdGU7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSBzdHJpbmdzLnBhbmVscy52ZWN0b3JGaWVsZC5zeW1ib2xTdHlsZU9wdGlvbnM7XG4gICAgICAgIGNvbnN0IGltZ1N0ciA9IFwidmZyX1wiO1xuICAgICAgICB0aGlzLnNlbGVjdEluZm9zLnB1c2goe1xuICAgICAgICAgICAgdmFsdWU6IFwiYmVhdWZvcnRcIixcbiAgICAgICAgICAgIHRpdGxlOiBvcHRpb25zLmJlYXVmb3J0LnRpdGxlLFxuICAgICAgICAgICAgbXNnOiBvcHRpb25zLmJlYXVmb3J0LmRlc2NyaXB0aW9uLFxuICAgICAgICAgICAgaWNvblBhdGg6IGAke2ltZ1N0cn0ke0ltYWdlUGF0aHMuYmVhdWZvcnR9YCxcbiAgICAgICAgICAgIHNlbGVjdGVkOiBmYWxzZVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5zZWxlY3RJbmZvcy5wdXNoKHtcbiAgICAgICAgICAgIHZhbHVlOiBcInNpbXBsZS1zY2FsYXJcIixcbiAgICAgICAgICAgIHRpdGxlOiBvcHRpb25zLnNpbXBsZVNjYWxhci50aXRsZSxcbiAgICAgICAgICAgIG1zZzogb3B0aW9ucy5zaW1wbGVTY2FsYXIuZGVzY3JpcHRpb24sXG4gICAgICAgICAgICBpY29uUGF0aDogYCR7aW1nU3RyfSR7SW1hZ2VQYXRocy5zaW1wbGVTY2FsYXJ9YCxcbiAgICAgICAgICAgIHNlbGVjdGVkOiBmYWxzZVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5zZWxlY3RJbmZvcy5wdXNoKHtcbiAgICAgICAgICAgIHZhbHVlOiBcInNpbmdsZS1hcnJvd1wiLFxuICAgICAgICAgICAgdGl0bGU6IG9wdGlvbnMuc2luZ2xlQXJyb3cudGl0bGUsXG4gICAgICAgICAgICBtc2c6IG9wdGlvbnMuc2luZ2xlQXJyb3cuZGVzY3JpcHRpb24sXG4gICAgICAgICAgICBpY29uUGF0aDogYCR7aW1nU3RyfSR7SW1hZ2VQYXRocy5zaW5nbGVBcnJvd31gLFxuICAgICAgICAgICAgc2VsZWN0ZWQ6IGZhbHNlXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnNlbGVjdEluZm9zLnB1c2goe1xuICAgICAgICAgICAgdmFsdWU6IFwid2luZC1iYXJiXCIsXG4gICAgICAgICAgICB0aXRsZTogb3B0aW9ucy53aW5kQmFyYnMudGl0bGUsXG4gICAgICAgICAgICBtc2c6IG9wdGlvbnMud2luZEJhcmJzLmRlc2NyaXB0aW9uLFxuICAgICAgICAgICAgaWNvblBhdGg6IGAke2ltZ1N0cn0ke0ltYWdlUGF0aHMud2luZEJhcmJzfWAsXG4gICAgICAgICAgICBzZWxlY3RlZDogZmFsc2VcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuc2VsZWN0SW5mb3MucHVzaCh7XG4gICAgICAgICAgICB2YWx1ZTogXCJvY2Vhbi1jdXJyZW50LWtuXCIsXG4gICAgICAgICAgICB0aXRsZTogb3B0aW9ucy5vY2VhbkN1cnJlbnRLbm90cy50aXRsZSxcbiAgICAgICAgICAgIG1zZzogb3B0aW9ucy5vY2VhbkN1cnJlbnRLbm90cy5kZXNjcmlwdGlvbixcbiAgICAgICAgICAgIGljb25QYXRoOiBgJHtpbWdTdHJ9JHtJbWFnZVBhdGhzLm9jZWFuQ3VycmVudEtub3RzfWAsXG4gICAgICAgICAgICBzZWxlY3RlZDogZmFsc2VcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuc2VsZWN0SW5mb3MucHVzaCh7XG4gICAgICAgICAgICB2YWx1ZTogXCJvY2Vhbi1jdXJyZW50LW1cIixcbiAgICAgICAgICAgIHRpdGxlOiBvcHRpb25zLm9jZWFuQ3VycmVudE1wcy50aXRsZSxcbiAgICAgICAgICAgIG1zZzogb3B0aW9ucy5vY2VhbkN1cnJlbnRNcHMuZGVzY3JpcHRpb24sXG4gICAgICAgICAgICBpY29uUGF0aDogYCR7aW1nU3RyfSR7SW1hZ2VQYXRocy5vY2VhbkN1cnJlbnRNcHN9YCxcbiAgICAgICAgICAgIHNlbGVjdGVkOiBmYWxzZVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5zZWxlY3RJbmZvcy5wdXNoKHtcbiAgICAgICAgICAgIHZhbHVlOiBcImNsYXNzaWZpZWQtYXJyb3dcIixcbiAgICAgICAgICAgIHRpdGxlOiBvcHRpb25zLmNsYXNzaWZpZWRBcnJvdy50aXRsZSxcbiAgICAgICAgICAgIG1zZzogb3B0aW9ucy5jbGFzc2lmaWVkQXJyb3cuZGVzY3JpcHRpb24sXG4gICAgICAgICAgICBpY29uUGF0aDogYCR7aW1nU3RyfSR7SW1hZ2VQYXRocy5jbGFzc2lmaWVkQXJyb3d9YCxcbiAgICAgICAgICAgIHNlbGVjdGVkOiBmYWxzZVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgZ2V0IGhvc3RFbGVtZW50KCkgeyByZXR1cm4gZ2V0RWxlbWVudCh0aGlzKTsgfVxufTtcbkFyY2dpc1NtYXJ0TWFwcGluZ1ZlY3RvclN5bWJvbEJ1dHRvbi5zdHlsZSA9IGFyY2dpc1NtYXJ0TWFwcGluZ1ZlY3RvclN5bWJvbEJ1dHRvbkNzcztcblxuZXhwb3J0IHsgQXJjZ2lzU21hcnRNYXBwaW5nTWFnbml0dWRlUmFuZ2VTbGlkZXIgYXMgYXJjZ2lzX3NtYXJ0X21hcHBpbmdfbWFnbml0dWRlX3JhbmdlX3NsaWRlciwgQXJjZ2lzU21hcnRNYXBwaW5nVmVjdG9yU3ltYm9sQnV0dG9uIGFzIGFyY2dpc19zbWFydF9tYXBwaW5nX3ZlY3Rvcl9zeW1ib2xfYnV0dG9uIH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFyY2dpcy1zbWFydC1tYXBwaW5nLW1hZ25pdHVkZS1yYW5nZS1zbGlkZXJfMi5lbnRyeS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=