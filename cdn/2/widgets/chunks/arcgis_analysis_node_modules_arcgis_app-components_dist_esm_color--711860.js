"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_color--711860"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/color-d6da0a9a.js":
/*!***********************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/color-d6da0a9a.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ createColorAgeRenderer),
/* harmony export */   b: () => (/* binding */ createColorRendererFromExisting),
/* harmony export */   c: () => (/* binding */ createColorRenderer),
/* harmony export */   d: () => (/* binding */ createColorAgeRendererFromExisting),
/* harmony export */   e: () => (/* binding */ createClassedColorRendererFromExisting),
/* harmony export */   g: () => (/* binding */ getClassBreaksColors),
/* harmony export */   s: () => (/* binding */ sameColorField)
/* harmony export */ });
/* harmony import */ var _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./raster-unique-value-0976ec7f.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/raster-unique-value-0976ec7f.js");
/* harmony import */ var _loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./loadModules-b4ac1247.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-b4ac1247.js");
/* harmony import */ var _commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./commonFunctions-b0830e9e.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/commonFunctions-b0830e9e.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */




/**
 * Creates a Color renderer with default settings
 * @param options: options
 */
function createColorRenderer(options) {
    var _a;
    const { layer: smLayer, mapImageSublayer, mapView, supportsArcade, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    const layer = smLayer;
    if (mapImageSublayer && !supportsArcade) {
        return createClassedColorRenderer(options);
    }
    const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer);
    const authInfo = renderer.authoringInfo;
    const authColorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.p)(renderer, "color");
    options = options || {};
    const rendererType = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.g)();
    const extras = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.m)((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer));
    const fieldInfo = options.fieldInfos ? options.fieldInfos[0] : null;
    const theme = options.theme ? options.theme : "high-to-low";
    return modules.ColorCreator.createContinuousRenderer({
        layer,
        view: mapView,
        field: fieldInfo.field,
        valueExpression: fieldInfo.expression,
        valueExpressionTitle: fieldInfo.expressionTitle,
        theme,
        colorScheme: options.colorScheme || (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.P)(theme),
        normalizationField: options.normalizationField,
        minValue: options.min,
        maxValue: options.max,
        outlineOptimizationEnabled: mapImageSublayer
            ? false
            : (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_2__.i)(options.outlineOptimizationEnabled)
                ? options.outlineOptimizationEnabled
                : true,
        sizeOptimizationEnabled: mapImageSublayer
            ? false
            : (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_2__.i)(options.sizeOptimizationEnabled)
                ? options.sizeOptimizationEnabled
                : true,
        legendOptions: options.legendOptions,
        defaultSymbolEnabled: false,
        forBinning: ((_a = layer.featureReduction) === null || _a === void 0 ? void 0 : _a.type) === "binning"
    }).then((result) => {
        if (!options.noReuse &&
            ["color", "color-size", "color-size-age"].indexOf(rendererType) > -1 &&
            sameColorField(options) &&
            authInfo &&
            (authInfo === null || authInfo === void 0 ? void 0 : authInfo.univariateTheme) !== "above-and-below" &&
            ["centered-on", "extremes"].indexOf(authColorVisVar.theme) === -1) {
            // re-use color renderer
            const colorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a)((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer), "color");
            const authColorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.p)((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer), "color");
            result.renderer.visualVariables = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.n)(result.renderer, "color") || [];
            result.renderer.visualVariables.push(colorVisVar);
            if (extras.sizeOutlineVisVar) {
                result.renderer.visualVariables = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.n)(renderer, "size", "outline");
                result.renderer.visualVariables.push(extras.sizeOutlineVisVar);
            }
            result.renderer.authoringInfo.visualVariables = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.o)(result.renderer, "color") || [];
            result.renderer.authoringInfo.visualVariables.push(authColorVisVar);
            (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.Q)(result.renderer);
        }
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.l)(extras, result.renderer);
        return Promise.resolve(result);
    }, (error) => Promise.reject(error));
}
/**
 * Creates a Color Age renderer with default settings
 * @param options: options
 */
function createColorAgeRenderer(options) {
    const { layer: smLayer, mapImageSublayer, mapView, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    const layer = smLayer;
    const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer);
    const authInfo = renderer.authoringInfo;
    options = options || {};
    const rendererType = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.g)();
    const extras = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.m)((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer));
    const fieldInfo = options.fieldInfos ? options.fieldInfos[0] : null;
    const theme = options.theme ? options.theme : "high-to-low";
    return modules.ColorCreator.createAgeRenderer({
        layer,
        view: mapView,
        startTime: fieldInfo.field,
        endTime: new Date(),
        theme,
        colorScheme: options.colorScheme || (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.P)(theme),
        unit: undefined,
        outlineOptimizationEnabled: mapImageSublayer
            ? false
            : (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_2__.i)(options.outlineOptimizationEnabled)
                ? options.outlineOptimizationEnabled
                : true,
        sizeOptimizationEnabled: mapImageSublayer
            ? false
            : (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_2__.i)(options.sizeOptimizationEnabled)
                ? options.sizeOptimizationEnabled
                : true,
        legendOptions: options.legendOptions,
        defaultSymbolEnabled: false
    }).then((result) => {
        if (["color-age", "color-age-size"].indexOf(rendererType) > -1 &&
            sameColorField(options) &&
            authInfo &&
            (authInfo === null || authInfo === void 0 ? void 0 : authInfo.univariateTheme) !== "above-and-below") {
            // re-use color renderer
            const colorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a)((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer), "color");
            const authColorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.p)((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer), "color");
            result.renderer.visualVariables = [colorVisVar];
            if (extras.sizeOutlineVisVar) {
                result.renderer.visualVariables.push(extras.sizeOutlineVisVar);
            }
            result.renderer.authoringInfo.visualVariables = [authColorVisVar];
            (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.Q)(result.renderer);
        }
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.l)(extras, result.renderer);
        return Promise.resolve(result);
    }, (error) => Promise.reject(error));
}
/**
 * Creates a Color renderer with default settings
 * @param options: options
 */
function createClassedColorRenderer(options) {
    var _a;
    const { layer: smLayer, mapImageSublayer, mapView, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    const layer = smLayer;
    options = options || {};
    const extras = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.m)((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer));
    const fieldInfo = options.fieldInfos ? options.fieldInfos[0] : null;
    return modules.ColorCreator.createClassBreaksRenderer({
        layer,
        view: mapView,
        field: fieldInfo.field,
        valueExpression: fieldInfo.expression,
        valueExpressionTitle: fieldInfo.expressionTitle,
        normalizationField: options.normalizationField,
        classificationMethod: options.classificationMethod ? options.classificationMethod : "natural-breaks",
        standardDeviationInterval: options.classificationMethod === "standard-deviation"
            ? options.standardDeviationInterval
                ? options.standardDeviationInterval
                : 1
            : undefined,
        numClasses: options.numClasses ? options.numClasses : 4,
        minValue: options.min,
        maxValue: options.max,
        colorScheme: options.colorScheme || (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.P)(),
        outlineOptimizationEnabled: mapImageSublayer
            ? false
            : (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_2__.i)(options.outlineOptimizationEnabled)
                ? options.outlineOptimizationEnabled
                : true,
        legendOptions: options.legendOptions,
        defaultSymbolEnabled: false,
        forBinning: ((_a = layer.featureReduction) === null || _a === void 0 ? void 0 : _a.type) === "binning"
    }).then((result) => {
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.l)(extras, result.renderer);
        return Promise.resolve(result);
    }, (error) => Promise.reject(error));
}
/**
 * Creates a Color renderer with settings from current renderer
 */
function createColorRendererFromExisting(options) {
    var _a, _b, _c, _d;
    const { layer: smLayer, mapImageSublayer, mapView, supportsArcade, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    const layer = smLayer;
    if (mapImageSublayer && !supportsArcade) {
        return createClassedColorRendererFromExisting(options);
    }
    options = options || {};
    const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer);
    const authInfo = renderer.authoringInfo || {};
    const rendererType = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.g)();
    const colorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a)(renderer, "color");
    if (colorVisVar &&
        options.fieldInfos &&
        options.fieldInfos[0] &&
        options.fieldInfos[0].field == colorVisVar.field &&
        options.fieldInfos[0].expression == colorVisVar.valueExpression &&
        options.normalizationField === colorVisVar.normalizationField) {
        // no changes to fields
        delete options.fieldInfos;
        if ((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.R)(options)) {
            // nothing really changes
            return Promise.resolve({ renderer: renderer.clone() });
        }
    }
    const extras = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.m)(renderer);
    const authColorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.p)(renderer, "color");
    let fieldInfo = options.fieldInfos
        ? options.fieldInfos[0]
        : colorVisVar
            ? {
                field: colorVisVar.field,
                expression: colorVisVar.valueExpression,
                expressionTitle: colorVisVar.valueExpressionTitle,
                simpleFieldType: _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.w.NUMBER
            }
            : {
                field: renderer.field,
                expression: renderer.valueExpression,
                expressionTitle: renderer.valueExpressionTitle,
                simpleFieldType: _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.w.NUMBER
            };
    const normalizationField = options.normalizationField === null
        ? undefined
        : options.normalizationField
            ? options.normalizationField
            : colorVisVar
                ? colorVisVar.normalizationField
                : renderer.normalizationField;
    let symbol = renderer.classBreakInfos && renderer.classBreakInfos.length
        ? renderer.classBreakInfos[0].symbol
        : (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.S)(layer, mapView, rendererType);
    if (symbol.type === "picture-marker") {
        symbol = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.S)(layer, mapView, rendererType);
    }
    const defaultSymbol = renderer.defaultSymbol;
    const defaultLabel = renderer.defaultLabel;
    let needNewStatistics = false;
    if (options.normalizationField === null ||
        options.normalizationField ||
        options.fieldInfo ||
        (authInfo.classificationMethod === "manual" && !options.theme) ||
        authInfo.classificationMethod === "equal-interval") {
        needNewStatistics = true;
    }
    const minValue = options.discardMinMax
        ? undefined
        : (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_2__.i)(options.min)
            ? options.min
            : needNewStatistics
                ? undefined
                : colorVisVar
                    ? authColorVisVar === null || authColorVisVar === void 0 ? void 0 : authColorVisVar.minSliderValue
                    : renderer.classBreakInfos[0].minValue;
    const maxValue = options.discardMinMax
        ? undefined
        : (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_2__.i)(options.max)
            ? options.max
            : needNewStatistics
                ? undefined
                : colorVisVar
                    ? authColorVisVar === null || authColorVisVar === void 0 ? void 0 : authColorVisVar.maxSliderValue
                    : renderer.classBreakInfos[renderer.classBreakInfos.length - 1].maxValue;
    const theme = options.theme ? options.theme : authColorVisVar ? authColorVisVar.theme : "high-to-low";
    const wasBelow = (authColorVisVar === null || authColorVisVar === void 0 ? void 0 : authColorVisVar.theme) === "below";
    const isBelow = theme === "below";
    const belowSwitch = (isBelow && !wasBelow) || (!isBelow && wasBelow);
    let colorScheme = options.colorScheme || (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.P)(theme);
    const config = {
        layer,
        view: mapView,
        field: fieldInfo.field,
        valueExpression: fieldInfo.expression,
        valueExpressionTitle: fieldInfo.expressionTitle,
        theme,
        colorScheme,
        normalizationField,
        minValue,
        maxValue,
        outlineOptimizationEnabled: mapImageSublayer
            ? false
            : (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_2__.i)(options.outlineOptimizationEnabled)
                ? options.outlineOptimizationEnabled
                : !!extras.sizeOutlineVisVar,
        sizeOptimizationEnabled: mapImageSublayer
            ? false
            : (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_2__.i)(options.sizeOptimizationEnabled)
                ? options.sizeOptimizationEnabled
                : !!extras.sizeAutoVisVar,
        legendOptions: ((_a = options.legendOptions) === null || _a === void 0 ? void 0 : _a.toJSON()) ||
            ((_b = colorVisVar === null || colorVisVar === void 0 ? void 0 : colorVisVar.legendOptions) === null || _b === void 0 ? void 0 : _b.toJSON()) ||
            ((_c = renderer.legendOptions) === null || _c === void 0 ? void 0 : _c.toJSON()),
        defaultSymbolEnabled: (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_2__.i)(options.defaultSymbolEnabled)
            ? options.defaultSymbolEnabled
            : !!renderer.defaultSymbol,
        forBinning: ((_d = layer.featureReduction) === null || _d === void 0 ? void 0 : _d.type) === "binning"
    };
    return modules.ColorCreator.createContinuousRenderer(config).then(
    // console.log("ColorCreator.createContinuousRenderer", config);
    (result) => {
        // reset handles if necessary
        if (options.discardMinMax) {
            const colorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a)(renderer, "color");
            const newColorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a)(result.renderer, "color");
            colorVisVar.stops.forEach((stop, idx) => (stop.value = newColorVisVar.stops[idx].value));
        }
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.l)(extras, result.renderer);
        if (symbol && result.renderer.classBreakInfos && result.renderer.classBreakInfos.length) {
            result.renderer.classBreakInfos[0].symbol = symbol;
        }
        if (defaultSymbol) {
            result.renderer.defaultSymbol = defaultSymbol;
            result.renderer.defaultLabel = defaultLabel;
        }
        if (belowSwitch && colorScheme && colorVisVar) {
            // need to reverse color order
            const newColorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a)(result.renderer, "color");
            const len = colorVisVar.stops.length - 1;
            newColorVisVar.stops.forEach((colorStop, idx) => (colorStop.color = colorVisVar.stops[len - idx].color));
        }
        return Promise.resolve(result);
    }, (error) => Promise.reject(error));
}
/**
 * Creates a Age-Color renderer with settings from current renderer
 */
function createColorAgeRendererFromExisting(options) {
    var _a, _b;
    const { layer: smLayer, mapImageSublayer, mapView /* , supportsArcade */, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    const layer = smLayer;
    /* if (mapImageSublayer && !supportsArcade) {
      return createClassedColorRendererFromExisting(options);
    } */
    options = options || {};
    const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer);
    const rendererType = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.g)();
    const colorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a)(renderer, "color");
    if (colorVisVar && options.fieldInfos && options.fieldInfos[0] && options.fieldInfos[0].field == colorVisVar.field) {
        // no changes to field
        delete options.fieldInfos;
        if ((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.R)(options)) {
            // nothing really changes
            return Promise.resolve({ renderer: renderer.clone() });
        }
    }
    const extras = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.m)(renderer);
    const authColorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.p)(renderer, "color");
    const startTime = options.startTime ? options.startTime : authColorVisVar.startTime;
    const endTime = options.endTime ? options.endTime : authColorVisVar.endTime;
    const symbol = renderer.classBreakInfos && renderer.classBreakInfos.length
        ? renderer.classBreakInfos[0].symbol
        : (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.S)(layer, mapView, rendererType);
    const defaultSymbol = renderer.defaultSymbol;
    const defaultLabel = renderer.defaultLabel;
    let rangeChanged = false;
    if (options.startTime || options.endTime || options.units || options.fieldInfo) {
        rangeChanged = true;
    }
    const minValue = options.discardMinMax
        ? undefined
        : (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_2__.i)(options.min)
            ? options.min
            : rangeChanged
                ? undefined
                : authColorVisVar
                    ? authColorVisVar.minSliderValue
                    : renderer.classBreakInfos[0].minValue;
    const maxValue = options.discardMinMax
        ? undefined
        : (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_2__.i)(options.max)
            ? options.max
            : rangeChanged
                ? undefined
                : authColorVisVar
                    ? authColorVisVar.maxSliderValue
                    : renderer.classBreakInfos[renderer.classBreakInfos.length - 1].maxValue;
    const theme = options.theme ? options.theme : authColorVisVar ? authColorVisVar.theme : "high-to-low";
    const config = {
        layer,
        view: mapView,
        startTime,
        endTime,
        unit: options.units ? options.units : authColorVisVar.units,
        theme,
        colorScheme: options.colorScheme || (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.P)(theme),
        minValue,
        maxValue,
        outlineOptimizationEnabled: mapImageSublayer
            ? false
            : (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_2__.i)(options.outlineOptimizationEnabled)
                ? options.outlineOptimizationEnabled
                : !!extras.sizeOutlineVisVar,
        sizeOptimizationEnabled: mapImageSublayer
            ? false
            : (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_2__.i)(options.sizeOptimizationEnabled)
                ? options.sizeOptimizationEnabled
                : !!extras.sizeAutoVisVar,
        legendOptions: options.legendOptions
            ? options.legendOptions.toJSON()
            : rangeChanged
                ? undefined
                : ((_a = colorVisVar === null || colorVisVar === void 0 ? void 0 : colorVisVar.legendOptions) === null || _a === void 0 ? void 0 : _a.toJSON()) || ((_b = renderer.legendOptions) === null || _b === void 0 ? void 0 : _b.toJSON()),
        defaultSymbolEnabled: (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_2__.i)(options.defaultSymbolEnabled)
            ? options.defaultSymbolEnabled
            : !!renderer.defaultSymbol
    };
    return modules.ColorCreator.createAgeRenderer(config).then(
    // console.log("ColorCreator.createAgeRenderer", config);
    (result) => {
        // reset handles if necessary
        if (options.discardMinMax) {
            const colorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a)(renderer, "color");
            const newColorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a)(result.renderer, "color");
            colorVisVar.stops.forEach((stop, idx) => (stop.value = newColorVisVar.stops[idx].value));
        }
        const newAuthColorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.p)(result.renderer, "color");
        newAuthColorVisVar.field = authColorVisVar.field;
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.l)(extras, result.renderer);
        if (symbol && result.renderer.classBreakInfos && result.renderer.classBreakInfos.length) {
            result.renderer.classBreakInfos[0].symbol = symbol;
        }
        if (defaultSymbol) {
            result.renderer.defaultSymbol = defaultSymbol;
            result.renderer.defaultLabel = defaultLabel;
        }
        return Promise.resolve(result);
    }, (error) => Promise.reject(error));
}
/**
 * Creates a Color renderer with settings from current renderer
 */
function createClassedColorRendererFromExisting(options) {
    var _a;
    const { layer: smLayer, mapImageSublayer, mapView, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    const layer = smLayer;
    options = options || {};
    const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer);
    const authInfo = renderer.authoringInfo || {};
    const colorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a)(renderer, "color");
    if (!colorVisVar &&
        options.fieldInfo &&
        options.fieldInfo.field == renderer.field &&
        options.fieldInfo.expression == renderer.valueExpression &&
        options.normalizationField === renderer.normalizationField) {
        // no changes to fields
        delete options.fieldInfo;
        if ((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.R)(options)) {
            // nothing really changes
            return Promise.resolve({ renderer: renderer.clone() });
        }
    }
    const authColorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.p)(renderer, "color");
    const extras = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.m)(renderer);
    const rendererFieldInfo = {
        field: renderer.field,
        expression: renderer.valueExpression,
        expressionTitle: renderer.valueExpressionTitle,
        simpleFieldType: _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.w.NUMBER
    };
    let fieldInfo = options.fieldInfos
        ? options.fieldInfos[0]
        : colorVisVar
            ? {
                field: colorVisVar.field,
                expression: colorVisVar.valueExpression,
                expressionTitle: colorVisVar.valueExpressionTitle,
                simpleFieldType: _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.w.NUMBER
            }
            : rendererFieldInfo;
    // options.normalizationField = null means don't set the value
    const normalizationField = options.normalizationField !== undefined
        ? options.normalizationField
        : colorVisVar
            ? colorVisVar.normalizationField
            : renderer.normalizationField;
    let symbol;
    if (renderer.classBreakInfos && renderer.classBreakInfos.length) {
        const sym = renderer.classBreakInfos[0].symbol;
        if (["simple-fill", "simple-marker", "simple-line", "cim"].indexOf(sym.type) > -1) {
            symbol = sym;
        }
    }
    const defaultSymbol = renderer.defaultSymbol;
    const defaultLabel = renderer.defaultLabel;
    // TODO need to keep ramp
    const classificationMethod = options.classificationMethod
        ? options.classificationMethod
        : authInfo.classificationMethod && authInfo.classificationMethod !== "manual"
            ? authInfo.classificationMethod
            : "natural-breaks";
    const standardDeviationInterval = classificationMethod === "standard-deviation"
        ? options.standardDeviationInterval
            ? options.standardDeviationInterval
            : authInfo.standardDeviationInterval
                ? authInfo.standardDeviationInterval
                : 1
        : undefined;
    let keepNumClasses = true;
    if (options.classificationMethod &&
        options.classificationMethod !== authInfo.classificationMethod &&
        (options.classificationMethod === "standard-deviation" || authInfo.classificationMethod === "standard-deviation")) {
        keepNumClasses = false;
    }
    let needNewStatistics = false;
    if (options.normalizationField !== undefined ||
        !(0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.x)(fieldInfo, rendererFieldInfo) ||
        classificationMethod !== "equal-interval") {
        // creator returns error if classificationMethod not equal-interval
        // together with min/maxValue
        needNewStatistics = true;
    }
    const minValue = (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_2__.i)(options.min)
        ? options.min
        : needNewStatistics
            ? undefined
            : authColorVisVar
                ? authColorVisVar.minSliderValue
                : renderer.classBreakInfos[0].minValue;
    const maxValue = (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_2__.i)(options.max)
        ? options.max
        : needNewStatistics
            ? undefined
            : authColorVisVar
                ? authColorVisVar.maxSliderValue
                : renderer.classBreakInfos[renderer.classBreakInfos.length - 1].maxValue;
    let colorScheme = options.colorScheme || (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.P)();
    if (!colorScheme) {
        // we also use above-and-below colors for classed color renderer
        colorScheme = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.P)("above-and-below");
    }
    return modules.ColorCreator.createClassBreaksRenderer({
        layer,
        view: mapView,
        field: fieldInfo.field,
        valueExpression: fieldInfo.expression,
        valueExpressionTitle: fieldInfo.expressionTitle,
        normalizationField,
        classificationMethod,
        standardDeviationInterval,
        numClasses: (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_2__.i)(options.numClasses)
            ? options.numClasses
            : colorVisVar || !keepNumClasses
                ? 4
                : renderer.classBreakInfos.length,
        minValue,
        maxValue,
        colorScheme,
        outlineOptimizationEnabled: mapImageSublayer
            ? false
            : (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_2__.i)(options.outlineOptimizationEnabled)
                ? options.outlineOptimizationEnabled
                : !!extras.sizeOutlineVisVar,
        /* sizeOptimizationEnabled: mapImageSublayer
          ? false
          : isDefined(options.sizeOptimizationEnabled)
          ? options.sizeOptimizationEnabled
          : !!extras.sizeAutoVisVar, TODO below ...*/
        legendOptions: options.legendOptions || renderer.legendOptions,
        defaultSymbolEnabled: (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_2__.i)(options.defaultSymbolEnabled)
            ? options.defaultSymbolEnabled
            : !!renderer.defaultSymbol,
        forBinning: ((_a = layer.featureReduction) === null || _a === void 0 ? void 0 : _a.type) === "binning"
    }).then((result) => {
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.l)(extras, result.renderer);
        if (extras.sizeAutoVisVar) {
            result.renderer.visualVariables = result.renderer.visualVariables || [];
            result.renderer.visualVariables.push(extras.sizeAutoVisVar);
        }
        if (symbol && result.renderer.classBreakInfos) {
            result.renderer.classBreakInfos.map((classBreakInfo) => {
                const sym = symbol.clone();
                (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.r)(sym, (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.t)(classBreakInfo.symbol));
                classBreakInfo.symbol = sym;
            });
        }
        if (defaultSymbol) {
            result.renderer.defaultSymbol = defaultSymbol;
            result.renderer.defaultLabel = defaultLabel;
        }
        return Promise.resolve(result);
    }, (error) => Promise.reject(error));
}
function getClassBreaksColors() {
    const { layer, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer);
    return renderer.classBreakInfos.map((classBreakInfo) => {
        return {
            min: classBreakInfo.minValue,
            max: classBreakInfo.maxValue,
            color: (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.t)(classBreakInfo.symbol)
                ? (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.t)(classBreakInfo.symbol).clone()
                : new modules.esriColor({ r: 255, g: 255, b: 255, a: 1 }) // white in slider for PMS
        };
    });
}
function sameColorField(options) {
    // not checking for normalizationField
    // we keep it if the renderer has it and it does not get overwritten
    const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer).clone();
    const rendererType = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.g)();
    if (["color", "color-size", "color-size-age", "color-age", "color-age-size"].indexOf(rendererType) > -1 &&
        options.normalizationField === undefined) {
        let renderFieldInfo;
        const colorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a)(renderer, "color");
        if (colorVisVar) {
            // continuous
            if (["color-age", "color-age-size"].indexOf(rendererType) > -1) {
                const authColorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.p)(renderer, "color");
                renderFieldInfo = {
                    field: authColorVisVar.field
                };
            }
            else {
                renderFieldInfo = {
                    field: colorVisVar.field,
                    expression: colorVisVar.valueExpression,
                    expressionTitle: colorVisVar.valueExpressionTitle
                };
            }
        }
        else {
            // classed
            renderFieldInfo = {
                field: renderer.field,
                expression: renderer.valueExpression,
                expressionTitle: renderer.valueExpressionTitle
            };
        }
        if ((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.x)(options.fieldInfos[0], renderFieldInfo)) {
            return true;
        }
    }
    return false;
}



//# sourceMappingURL=color-d6da0a9a.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,