"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_arcgis-raster-function-editor_-33a6ef"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/help-texts.fr-7671a600.js":
/*!**********************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/help-texts.fr-7671a600.js ***!
  \**********************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   rfxArgsHelpTexts: () => (/* binding */ rfxArgsHelpTexts)
/* harmony export */ });
const rfxArgsHelpTexts = {
	"@@Abs_Cellsize-Type_tag0@@": "Choisissez la taille de cellule à utiliser dans le raster en sortie. Si les tailles des cellules en entrée sont identiques, toutes les options donnent les mêmes résultats.",
	"@@Abs_Cellsize-Type_tag1@@": "Premier de : utilise la première taille de cellule des rasters en entrée.",
	"@@Abs_Cellsize-Type_tag2@@": "Dernier de : utilise la dernière taille de cellule des rasters en entrée.",
	"@@Abs_Cellsize-Type_tag3@@": "Max de : utilise la plus grande taille de cellule de tous les rasters en entrée. Il s’agit de l’option par défaut.",
	"@@Abs_Cellsize-Type_tag4@@": "Moyenne de : utilise la taille de cellule moyenne de tous les rasters en entrée.",
	"@@Abs_Cellsize-Type_tag5@@": "Mini de : utilise la plus petite taille de cellule de tous les rasters en entrée.",
	"@@Abs_Extent-Type_tag0@@": "Sélectionnez l’étendue à utiliser dans le raster en sortie.",
	"@@Abs_Extent-Type_tag1@@": "Premier de : utilise l’étendue du premier raster en entrée pour déterminer l’étendue de traitement.",
	"@@Abs_Extent-Type_tag2@@": "Intersection de : utilise l’étendue des pixels superposés pour déterminer l’étendue de traitement. Il s’agit de l’option par défaut.",
	"@@Abs_Extent-Type_tag3@@": "Dernier de : utilise l’étendue du dernier raster en entrée pour déterminer l’étendue de traitement.",
	"@@Abs_Extent-Type_tag4@@": "Union de : utilise l’étendue de tous les rasters pour déterminer l’étendue de traitement.",
	"@@Abs_Raster_tag0@@": "Raster en entrée dont vous calculez les valeurs absolues.",
	"@@ACos_Cellsize-Type_tag0@@": "Choisissez la taille de cellule à utiliser dans le raster en sortie. Si les tailles des cellules en entrée sont identiques, toutes les options donnent les mêmes résultats.",
	"@@ACos_Cellsize-Type_tag1@@": "Premier de : utilise la première taille de cellule des rasters en entrée.",
	"@@ACos_Cellsize-Type_tag2@@": "Dernier de : utilise la dernière taille de cellule des rasters en entrée.",
	"@@ACos_Cellsize-Type_tag3@@": "Max de : utilise la plus grande taille de cellule de tous les rasters en entrée. Il s’agit de l’option par défaut.",
	"@@ACos_Cellsize-Type_tag4@@": "Moyenne de : utilise la taille de cellule moyenne de tous les rasters en entrée.",
	"@@ACos_Cellsize-Type_tag5@@": "Mini de : utilise la plus petite taille de cellule de tous les rasters en entrée.",
	"@@ACos_Extent-Type_tag0@@": "Sélectionnez l’étendue à utiliser dans le raster en sortie.",
	"@@ACos_Extent-Type_tag1@@": "Premier de : utilise l’étendue du premier raster en entrée pour déterminer l’étendue de traitement.",
	"@@ACos_Extent-Type_tag2@@": "Intersection de : utilise l’étendue des pixels superposés pour déterminer l’étendue de traitement. Il s’agit de l’option par défaut.",
	"@@ACos_Extent-Type_tag3@@": "Dernier de : utilise l’étendue du dernier raster en entrée pour déterminer l’étendue de traitement.",
	"@@ACos_Extent-Type_tag4@@": "Union de : utilise l’étendue de tous les rasters pour déterminer l’étendue de traitement.",
	"@@ACos_Raster_tag0@@": "Entrée pour laquelle calculer les valeurs de cosinus inverse.",
	"@@ACosH_Cellsize-Type_tag0@@": "Choisissez la taille de cellule à utiliser dans le raster en sortie. Si les tailles des cellules en entrée sont identiques, toutes les options donnent les mêmes résultats.",
	"@@ACosH_Cellsize-Type_tag1@@": "Premier de : utilise la première taille de cellule des rasters en entrée.",
	"@@ACosH_Cellsize-Type_tag2@@": "Dernier de : utilise la dernière taille de cellule des rasters en entrée.",
	"@@ACosH_Cellsize-Type_tag3@@": "Max de : utilise la plus grande taille de cellule de tous les rasters en entrée. Il s’agit de l’option par défaut.",
	"@@ACosH_Cellsize-Type_tag4@@": "Moyenne de : utilise la taille de cellule moyenne de tous les rasters en entrée.",
	"@@ACosH_Cellsize-Type_tag5@@": "Mini de : utilise la plus petite taille de cellule de tous les rasters en entrée.",
	"@@ACosH_Extent-Type_tag0@@": "Sélectionnez l’étendue à utiliser dans le raster en sortie.",
	"@@ACosH_Extent-Type_tag1@@": "Premier de : utilise l’étendue du premier raster en entrée pour déterminer l’étendue de traitement.",
	"@@ACosH_Extent-Type_tag2@@": "Intersection de : utilise l’étendue des pixels superposés pour déterminer l’étendue de traitement. Il s’agit de l’option par défaut.",
	"@@ACosH_Extent-Type_tag3@@": "Dernier de : utilise l’étendue du dernier raster en entrée pour déterminer l’étendue de traitement.",
	"@@ACosH_Extent-Type_tag4@@": "Union de : utilise l’étendue de tous les rasters pour déterminer l’étendue de traitement.",
	"@@ACosH_Raster_tag0@@": "Entrée pour laquelle calculer les valeurs de cosinus hyperbolique inverse.",
	"@@Apparent-Reflectance_Albedo_tag0@@": "Les résultats de la fonction de réflectance apparente peuvent également être exprimés en albédo, pourcentage de l'énergie disponible réfléchie par la surface planétaire. Les données albédo sont utilisées par des scientifiques dans le cadre d'applications techniques de télédétection et de modélisation complexes.",
	"@@Apparent-Reflectance_Albedo_tag1@@": "Non coché : la fonction renvoie les valeurs de réflectance apparente. Il s’agit de l’option par défaut.",
	"@@Apparent-Reflectance_Albedo_tag2@@": "Coché : la fonction renvoie des valeurs à virgule flottante 32 bits, généralement comprises entre 0.0 et 1.0. Aucun découpage de donnée n'est effectué si cette option est sélectionnée.",
	"@@Apparent-Reflectance_Albedo_tag3@@": "Le type de données en sortie pour l’albédo étant le nombre à virgule flottante, vous devez définir explicitement le <strong>Type de pixel en sortie</strong> qui convient le mieux (nombre à virgule flottante 32 bits ou double 64 bits). Le paramètre <strong>Type de pixel en sortie</strong> figure sur l’onglet <strong>Général</strong> de la fonction raster <strong>Réflectance apparente</strong>. Si le <strong>Type de pixel en sortie</strong> n’est pas correctement défini pour l’option <strong>Albédo</strong>, les valeurs résultantes ne seront pas valides et seront définies sur 0.",
	"@@Apparent-Reflectance_Offset_tag0@@": "Votre valeur albédo mise à l'échelle peut comporter une valeur de décalage :",
	"@@Apparent-Reflectance_Offset_tag1@@": "Pour les types de données 16 bits non signées, le décalage d'échelle par défaut est 5 000.",
	"@@Apparent-Reflectance_Offset_tag2@@": "Pour les types de données 8 bits non signées, le décalage d'échelle par défaut est 0.",
	"@@Apparent-Reflectance_Offset_tag3@@": "Aucune mise à l'échelle n'est appliquée lorsque la sortie est une valeur albédo.",
	"@@Apparent-Reflectance_Radiance-Gains-and-Bias-Values-per-Band_tag0@@": "Vous pouvez définir ou modifier manuellement cette valeur pour chaque canal. Les informations appropriées peuvent être lues à partir des métadonnées du produit raster en entrée.",
	"@@Apparent-Reflectance_Raster_tag0@@": "Le produit raster sur lequel appliquer la réflectance apparente.",
	"@@Apparent-Reflectance_Scale-Factor_tag0@@": "La valeur en sortie de votre réflectance apparente peut s'exprimer sous la forme d'un entier. Le facteur d'échelle est multiplié par la valeur albédo pour convertir toutes les valeurs à virgule flottante en valeurs entières.",
	"@@Apparent-Reflectance_Scale-Factor_tag1@@": "Si le facteur d’échelle est ${0} ou n’est pas spécifié, la mise à l’échelle par défaut est appliquée selon le type de pixel des données en entrée :",
	"@@Apparent-Reflectance_Scale-Factor_tag2@@": "Pour les types de données 16 bits non signées, le facteur d'échelle par défaut est 50 000.",
	"@@Apparent-Reflectance_Scale-Factor_tag3@@": "Pour les types de données 8 bits non signées, le facteur d'échelle par défaut est 225.",
	"@@Apparent-Reflectance_Scale-Factor_tag4@@": "Le facteur d'échelle est toujours appliqué lorsque la sortie est une réflectance apparente. Aucune mise à l'échelle n'est appliquée lorsque la sortie est une valeur albédo.",
	"@@Apparent-Reflectance_Sun-Elevation_tag0@@": "Il s'agit de la valeur d'altitude du soleil, exprimée en degrés. Elle est renseignée par le système si les informations appropriées sont lisibles à partir des métadonnées. Vous pouvez définir ou modifier manuellement cette valeur.",
	"@@ArgStatistics_Max_tag0@@": "La valeur maximale que vous définissez est la valeur la plus haute inférieure ou égale à la fin de la durée.",
	"@@ArgStatistics_Max_tag1@@": "Cette entrée s’applique uniquement dans le cas de la méthode Duration.",
	"@@ArgStatistics_Method_tag0@@": "Sélectionnez la méthode de statistiques à calculer :",
	"@@ArgStatistics_Method_tag1@@": "Arg Max : argument du maximum, qui renvoie le ${Band index} pour lequel le pixel donné atteint sa valeur minimale de tous les canaux. Tous les canaux de raster provenant de chaque raster en entrée se voient attribuer un index de canal incrémentiel de base 0, qui est classé d’abord selon l’index de raster en entrée, puis selon l’ordre relatif des canaux dans chaque raster en entrée.",
	"@@ArgStatistics_Method_tag2@@": "Arg Median : argument de la médiane, qui retourne le ${Band index} pour lequel le pixel donné atteint la valeur médiane des valeurs de tous les canaux.",
	"@@ArgStatistics_Method_tag3@@": "Arg Min : argument du minimum, qui retourne le ${Band index} pour lequel le pixel donné atteint sa valeur minimale de tous les canaux.",
	"@@ArgStatistics_Method_tag4@@": "Durée : la méthode Durée trouve les éléments consécutifs les plus longs de la matrice, où chaque élément possède une valeur supérieure ou égale à <strong>Min</strong> et inférieure ou égale à <strong>Max</strong>, puis renvoie la longueur de chacun.",
	"@@ArgStatistics_Min_tag0@@": "La valeur minimale que vous définissez est la valeur la plus basse supérieure ou égale au début de la durée.",
	"@@ArgStatistics_Min_tag1@@": "Cette entrée s’applique uniquement dans le cas de la méthode Duration.",
	"@@ArgStatistics_Rasters_tag0@@": "Raster en entrée sur lequel vous allez exécuter les différents méthodes statistiques.",
	"@@ArgStatistics_Undefined-Class_tag0@@": "Constante en entrée qui sera retournée si aucun maximum, minimum ou médiane ne peut être atteint. Le scénario le plus courant se produit lorsque la valeur maximale ou minimale survient plusieurs fois parmi les valeurs de tous les canaux. La valeur par défaut du champ de la constante non définie est 100.",
	"@@ArgStatistics_Undefined-Class_tag1@@": "La classe non définie concerne uniquement les cas dans lesquels la méthode est <strong>ArgMax</strong>, <strong>ArgMin</strong> ou <strong>ArgMedian</strong>.",
	"@@ArgStatistics_ignorenodata_tag0@@": "Indique si les valeurs NoData sont ignorées dans le calcul des statistiques.",
	"@@ArgStatistics_ignorenodata_tag1@@": "Activé : l’analyse inclut tous les pixels valides dans les rasters en entrée et ignore les pixels NoData.",
	"@@ArgStatistics_ignorenodata_tag2@@": "Désactivé : l’analyse renvoie des valeurs NoData si les pixels dans les rasters en entrée présentent des valeurs NoData. Il s’agit de l’option par défaut.",
	"@@Arithmetic_Cellsize-Type_tag0@@": "Choisissez la taille de cellule à utiliser dans le raster en sortie. Si les tailles des cellules en entrée sont identiques, toutes les options donnent les mêmes résultats.",
	"@@Arithmetic_Cellsize-Type_tag1@@": "Premier de : utilise la première taille de cellule des rasters en entrée.",
	"@@Arithmetic_Cellsize-Type_tag2@@": "Dernier de : utilise la dernière taille de cellule des rasters en entrée.",
	"@@Arithmetic_Cellsize-Type_tag3@@": "Max de : utilise la plus grande taille de cellule de tous les rasters en entrée. Il s’agit de l’option par défaut.",
	"@@Arithmetic_Cellsize-Type_tag4@@": "Moyenne de : utilise la taille de cellule moyenne de tous les rasters en entrée.",
	"@@Arithmetic_Cellsize-Type_tag5@@": "Mini de : utilise la plus petite taille de cellule de tous les rasters en entrée.",
	"@@Arithmetic_Extent-Type_tag0@@": "Sélectionnez l’étendue à utiliser dans le raster en sortie.",
	"@@Arithmetic_Extent-Type_tag1@@": "Premier de : utilise l’étendue du premier raster en entrée pour déterminer l’étendue de traitement.",
	"@@Arithmetic_Extent-Type_tag2@@": "Intersection de : utilise l’étendue des pixels superposés pour déterminer l’étendue de traitement. Il s’agit de l’option par défaut.",
	"@@Arithmetic_Extent-Type_tag3@@": "Dernier de : utilise l’étendue du dernier raster en entrée pour déterminer l’étendue de traitement.",
	"@@Arithmetic_Extent-Type_tag4@@": "Union de : utilise l’étendue de tous les rasters pour déterminer l’étendue de traitement.",
	"@@Arithmetic_Operation_tag0@@": "Opérateur arithmétique à effectuer entre les deux rasters en entrée.",
	"@@Arithmetic_Operation_tag1@@": "Les options sont les suivantes :",
	"@@Arithmetic_Operation_tag2@@": "<strong>Division</strong> : génère le quotient entre les valeurs de pixels correspondantes pour chaque raster.",
	"@@Arithmetic_Operation_tag4@@": "<strong>Soustraction</strong> : génère la différence entre les valeurs de pixels correspondantes pour chaque raster. Cela permet de calculer la détection des changements.",
	"@@Arithmetic_Operation_tag6@@": "<strong>Mode</strong> : génère la valeur de pixel la plus fréquente pour tous les pixels superposés. Si, par exemple, le raster compte six bandes, il y aura six pixels superposés. Pour les valeurs 4, 5, 6, 4, 7, 9, la valeur de mode est 4.",
	"@@Arithmetic_Operation_tag8@@": "<strong>Multiplication</strong> : génère le produit des valeurs de pixels correspondantes pour chaque raster. Cette option permet d’exécuter des fonctions de coût.",
	"@@Arithmetic_Operation_tag10@@": "<strong>Addition</strong> : génère la somme de toutes les valeurs de pixels correspondantes pour chaque raster.",
	"@@Arithmetic_Operation_tag12@@": "<strong>Puissance</strong> : génère le produit des valeurs de pixels correspondantes, élevé à la puissance du raster ou scalaire en entrée.",
	"@@Arithmetic_Raster_tag0@@": "Le premier jeu de données raster en entrée.",
	"@@Arithmetic_Raster2_tag0@@": "Deuxième jeu de données raster en entrée.",
	"@@ASin_Cellsize-Type_tag0@@": "Choisissez la taille de cellule à utiliser dans le raster en sortie. Si les tailles des cellules en entrée sont identiques, toutes les options donnent les mêmes résultats.",
	"@@ASin_Cellsize-Type_tag1@@": "Premier de : utilise la première taille de cellule des rasters en entrée.",
	"@@ASin_Cellsize-Type_tag2@@": "Dernier de : utilise la dernière taille de cellule des rasters en entrée.",
	"@@ASin_Cellsize-Type_tag3@@": "Max de : utilise la plus grande taille de cellule de tous les rasters en entrée. Il s’agit de l’option par défaut.",
	"@@ASin_Cellsize-Type_tag4@@": "Moyenne de : utilise la taille de cellule moyenne de tous les rasters en entrée.",
	"@@ASin_Cellsize-Type_tag5@@": "Mini de : utilise la plus petite taille de cellule de tous les rasters en entrée.",
	"@@ASin_Extent-Type_tag0@@": "Sélectionnez l’étendue à utiliser dans le raster en sortie.",
	"@@ASin_Extent-Type_tag1@@": "Premier de : utilise l’étendue du premier raster en entrée pour déterminer l’étendue de traitement.",
	"@@ASin_Extent-Type_tag2@@": "Intersection de : utilise l’étendue des pixels superposés pour déterminer l’étendue de traitement. Il s’agit de l’option par défaut.",
	"@@ASin_Extent-Type_tag3@@": "Dernier de : utilise l’étendue du dernier raster en entrée pour déterminer l’étendue de traitement.",
	"@@ASin_Extent-Type_tag4@@": "Union de : utilise l’étendue de tous les rasters pour déterminer l’étendue de traitement.",
	"@@ASin_Raster_tag0@@": "Entrée pour laquelle calculer les valeurs de sinus inverse.",
	"@@ASinH_Cellsize-Type_tag0@@": "Choisissez la taille de cellule à utiliser dans le raster en sortie. Si les tailles des cellules en entrée sont identiques, toutes les options donnent les mêmes résultats.",
	"@@ASinH_Cellsize-Type_tag1@@": "Premier de : utilise la première taille de cellule des rasters en entrée.",
	"@@ASinH_Cellsize-Type_tag2@@": "Dernier de : utilise la dernière taille de cellule des rasters en entrée.",
	"@@ASinH_Cellsize-Type_tag3@@": "Max de : utilise la plus grande taille de cellule de tous les rasters en entrée. Il s’agit de l’option par défaut.",
	"@@ASinH_Cellsize-Type_tag4@@": "Moyenne de : utilise la taille de cellule moyenne de tous les rasters en entrée.",
	"@@ASinH_Cellsize-Type_tag5@@": "Mini de : utilise la plus petite taille de cellule de tous les rasters en entrée.",
	"@@ASinH_Extent-Type_tag0@@": "Sélectionnez l’étendue à utiliser dans le raster en sortie.",
	"@@ASinH_Extent-Type_tag1@@": "Premier de : utilise l’étendue du premier raster en entrée pour déterminer l’étendue de traitement.",
	"@@ASinH_Extent-Type_tag2@@": "Intersection de : utilise l’étendue des pixels superposés pour déterminer l’étendue de traitement. Il s’agit de l’option par défaut.",
	"@@ASinH_Extent-Type_tag3@@": "Dernier de : utilise l’étendue du dernier raster en entrée pour déterminer l’étendue de traitement.",
	"@@ASinH_Extent-Type_tag4@@": "Union de : utilise l’étendue de tous les rasters pour déterminer l’étendue de traitement.",
	"@@ASinH_Raster_tag0@@": "Entrée pour laquelle calculer les valeurs de sinus hyperbolique inverse.",
	"@@Aspect_Raster_tag0@@": "Le MNA utilisé pour dériver le jeu de données d’exposition.",
	"@@Aspect-Slope_Raster_tag0@@": "DEM en entrée.",
	"@@Aspect-Slope_Z-Factor_tag0@@": "Un facteur d’échelle utilisé pour convertir les valeurs d’altitude dans les deux buts suivants :",
	"@@Aspect-Slope_Z-Factor_tag1@@": "Convertit les unités d'altitude (telles que les mètres ou les pieds) en unités de coordonnées horizontales du jeu de données, qui peuvent être des pieds, des mètres ou des degrés,",
	"@@Aspect-Slope_Z-Factor_tag2@@": "Ajoute une exagération verticale comme effet visuel.",
	"@@ATan_Cellsize-Type_tag0@@": "Choisissez la taille de cellule à utiliser dans le raster en sortie. Si les tailles des cellules en entrée sont identiques, toutes les options donnent les mêmes résultats.",
	"@@ATan_Cellsize-Type_tag1@@": "Premier de : utilise la première taille de cellule des rasters en entrée.",
	"@@ATan_Cellsize-Type_tag2@@": "Dernier de : utilise la dernière taille de cellule des rasters en entrée.",
	"@@ATan_Cellsize-Type_tag3@@": "Max de : utilise la plus grande taille de cellule de tous les rasters en entrée. Il s’agit de l’option par défaut.",
	"@@ATan_Cellsize-Type_tag4@@": "Moyenne de : utilise la taille de cellule moyenne de tous les rasters en entrée.",
	"@@ATan_Cellsize-Type_tag5@@": "Mini de : utilise la plus petite taille de cellule de tous les rasters en entrée.",
	"@@ATan_Extent-Type_tag0@@": "Sélectionnez l’étendue à utiliser dans le raster en sortie.",
	"@@ATan_Extent-Type_tag1@@": "Premier de : utilise l’étendue du premier raster en entrée pour déterminer l’étendue de traitement.",
	"@@ATan_Extent-Type_tag2@@": "Intersection de : utilise l’étendue des pixels superposés pour déterminer l’étendue de traitement. Il s’agit de l’option par défaut.",
	"@@ATan_Extent-Type_tag3@@": "Dernier de : utilise l’étendue du dernier raster en entrée pour déterminer l’étendue de traitement.",
	"@@ATan_Extent-Type_tag4@@": "Union de : utilise l’étendue de tous les rasters pour déterminer l’étendue de traitement.",
	"@@ATan_Raster_tag0@@": "Entrée pour laquelle calculer les valeurs de tangente inverse.",
	"@@ATan2_Cellsize-Type_tag0@@": "Choisissez la taille de cellule à utiliser dans le raster en sortie. Si les tailles des cellules en entrée sont identiques, toutes les options donnent les mêmes résultats.",
	"@@ATan2_Cellsize-Type_tag1@@": "Premier de : utilise la première taille de cellule des rasters en entrée.",
	"@@ATan2_Cellsize-Type_tag2@@": "Dernier de : utilise la dernière taille de cellule des rasters en entrée.",
	"@@ATan2_Cellsize-Type_tag3@@": "Max de : utilise la plus grande taille de cellule de tous les rasters en entrée. Il s’agit de l’option par défaut.",
	"@@ATan2_Cellsize-Type_tag4@@": "Moyenne de : utilise la taille de cellule moyenne de tous les rasters en entrée.",
	"@@ATan2_Cellsize-Type_tag5@@": "Mini de : utilise la plus petite taille de cellule de tous les rasters en entrée.",
	"@@ATan2_Extent-Type_tag0@@": "Sélectionnez l’étendue à utiliser dans le raster en sortie.",
	"@@ATan2_Extent-Type_tag1@@": "Premier de : utilise l’étendue du premier raster en entrée pour déterminer l’étendue de traitement.",
	"@@ATan2_Extent-Type_tag2@@": "Intersection de : utilise l’étendue des pixels superposés pour déterminer l’étendue de traitement. Il s’agit de l’option par défaut.",
	"@@ATan2_Extent-Type_tag3@@": "Dernier de : utilise l’étendue du dernier raster en entrée pour déterminer l’étendue de traitement.",
	"@@ATan2_Extent-Type_tag4@@": "Union de : utilise l’étendue de tous les rasters pour déterminer l’étendue de traitement.",
	"@@ATan2_Raster_tag0@@": "Entrée spécifiant le numérateur, ou la valeur y, à utiliser lors du calcul de la tangente inverse.",
	"@@ATan2_Raster2_tag0@@": "Entrée spécifiant le dénominateur, ou la valeur x, à utiliser lors du calcul de la tangente inverse.",
	"@@ATanH_Cellsize-Type_tag0@@": "Choisissez la taille de cellule à utiliser dans le raster en sortie. Si les tailles des cellules en entrée sont identiques, toutes les options donnent les mêmes résultats.",
	"@@ATanH_Cellsize-Type_tag1@@": "Premier de : utilise la première taille de cellule des rasters en entrée.",
	"@@ATanH_Cellsize-Type_tag2@@": "Dernier de : utilise la dernière taille de cellule des rasters en entrée.",
	"@@ATanH_Cellsize-Type_tag3@@": "Max de : utilise la plus grande taille de cellule de tous les rasters en entrée. Il s’agit de l’option par défaut.",
	"@@ATanH_Cellsize-Type_tag4@@": "Moyenne de : utilise la taille de cellule moyenne de tous les rasters en entrée.",
	"@@ATanH_Cellsize-Type_tag5@@": "Mini de : utilise la plus petite taille de cellule de tous les rasters en entrée.",
	"@@ATanH_Extent-Type_tag0@@": "Sélectionnez l’étendue à utiliser dans le raster en sortie.",
	"@@ATanH_Extent-Type_tag1@@": "Premier de : utilise l’étendue du premier raster en entrée pour déterminer l’étendue de traitement.",
	"@@ATanH_Extent-Type_tag2@@": "Intersection de : utilise l’étendue des pixels superposés pour déterminer l’étendue de traitement. Il s’agit de l’option par défaut.",
	"@@ATanH_Extent-Type_tag3@@": "Dernier de : utilise l’étendue du dernier raster en entrée pour déterminer l’étendue de traitement.",
	"@@ATanH_Extent-Type_tag4@@": "Union de : utilise l’étendue de tous les rasters pour déterminer l’étendue de traitement.",
	"@@ATanH_Raster_tag0@@": "Entrée pour laquelle calculer les valeurs de tangente hyperbolique inverse.",
	"@@Attribute-Table_Raster_tag0@@": "Raster en entrée.",
	"@@Attribute-Table_Table-Type_tag0@@": "La table attributaire en entrée peut être renseignée à l’aide du type <strong>Manuel</strong> où vous attribuez un nom de classe et une couleur à chaque valeur, ou vous pouvez faire référence à une table existante qui provient d’un fichier ${.dbf}.",
	"@@Band-Arithmetic_Band-Indexes_tag0@@": "Définissez votre formule arithmétique de bande si vous avez choisi <strong>Défini par l’utilisateur</strong> pour <strong>Méthode</strong>.",
	"@@Band-Arithmetic_Band-Indexes_tag5@@": "Si vous avez choisi un indice prédéfini pour <strong>Méthode</strong>, définissez les bandes appropriées de votre jeu de données raster en entrée correspondant à l’indice.",
	"@@Band-Arithmetic_Method_tag0@@": "Type d’algorithme arithmétique de canal que vous souhaitez déployer. Vous pouvez définir votre algorithme personnalisé ou choisir un indice prédéfini.",
	"@@Band-Arithmetic_Method_tag1@@": "<strong>BAI</strong> : indice de zones brûlées",
	"@@Band-Arithmetic_Method_tag2@@": "<strong>CIg</strong> : indice chlorophyllien - Vert",
	"@@Band-Arithmetic_Method_tag3@@": "<strong>CIre</strong> : indice chlorophyllien - Proche infrarouge",
	"@@Band-Arithmetic_Method_tag4@@": "<strong>Minéraux argileux</strong> : rapport de minéraux argileux",
	"@@Band-Arithmetic_Method_tag5@@": "<strong>EVI</strong> : indice de végétation amélioré",
	"@@Band-Arithmetic_Method_tag6@@": "<strong>Minéraux ferreux</strong> : rapport de minéraux ferreux",
	"@@Band-Arithmetic_Method_tag7@@": "<strong>GEMI</strong> : indice de surveillance environnementale globale",
	"@@Band-Arithmetic_Method_tag8@@": "<strong>GNDVI</strong> : indice de végétation par différence normalisée - Vert",
	"@@Band-Arithmetic_Method_tag9@@": "<strong>GVI (Landsat TM)</strong> : indice de végétation - Landsat TM",
	"@@Band-Arithmetic_Method_tag10@@": "<strong>Oxyde de fer</strong> : rapport d’oxyde de fer",
	"@@Band-Arithmetic_Method_tag11@@": "<strong>MNDWI</strong> : indice de teneur en eau modifié par différence normalisée",
	"@@Band-Arithmetic_Method_tag12@@": "<strong>MTVI2</strong> : indice de végétation triangulé modifié (deuxième itération)",
	"@@Band-Arithmetic_Method_tag13@@": "<strong>SAVI modifié</strong> : indice de végétation ajusté en fonction du sol et modifié",
	"@@Band-Arithmetic_Method_tag14@@": "<strong>NBR</strong> : indice du ratio de brûlure normalisé",
	"@@Band-Arithmetic_Method_tag15@@": "<strong>NDBI</strong> : indice d’urbanisation par différence normalisée",
	"@@Band-Arithmetic_Method_tag16@@": "<strong>NDMI</strong> : indice d'humidité par différence normalisée",
	"@@Band-Arithmetic_Method_tag17@@": "<strong>NDSI</strong> : indice d’enneigement par différence normalisée",
	"@@Band-Arithmetic_Method_tag18@@": "<strong>NDVI</strong> : indice de végétation par différence normalisée",
	"@@Band-Arithmetic_Method_tag19@@": "<strong>NDVIre</strong> : indice de végétation par différence normalisée - Proche infrarouge",
	"@@Band-Arithmetic_Method_tag20@@": "<strong>NDWI</strong> : indice de teneur en eau par différence normalisée",
	"@@Band-Arithmetic_Method_tag21@@": "<strong>PVI</strong> : indice de végétation perpendiculaire",
	"@@Band-Arithmetic_Method_tag22@@": "<strong>RTVICore</strong> : indice de végétation triangulé - Proche infrarouge",
	"@@Band-Arithmetic_Method_tag23@@": "<strong>SAVI</strong> : indice de végétation ajusté en fonction du sol",
	"@@Band-Arithmetic_Method_tag24@@": "<strong>SR</strong> : ratio simple",
	"@@Band-Arithmetic_Method_tag25@@": "<strong>SRre</strong> : ratio simple - Proche infrarouge",
	"@@Band-Arithmetic_Method_tag26@@": "<strong>Formule de Sultan</strong> : formule de Sultan",
	"@@Band-Arithmetic_Method_tag27@@": "<strong>SAVI transformé</strong> : indice de végétation ajusté en fonction du sol et transformé",
	"@@Band-Arithmetic_Method_tag28@@": "<strong>Défini par l’utilisateur</strong> : permet de définir votre expression arithmétique de canal personnalisé.",
	"@@Band-Arithmetic_Method_tag29@@": "<strong>VARI</strong> : indice visible de réduction des effets atmosphériques",
	"@@Band-Arithmetic_Method_tag30@@": "<strong>WNDWI</strong> : indice de végétation par différence normalisée pondéré",
	"@@Band-Arithmetic_Raster_tag0@@": "Raster en entrée.",
	"@@Binary-Thresholding_Raster_tag0@@": "Raster en entrée.",
	"@@Bitwise-And_Cellsize-Type_tag0@@": "Choisissez la taille de cellule à utiliser dans le raster en sortie. Si les tailles des cellules en entrée sont identiques, toutes les options donnent les mêmes résultats.",
	"@@Bitwise-And_Cellsize-Type_tag1@@": "Premier de : utilise la première taille de cellule des rasters en entrée.",
	"@@Bitwise-And_Cellsize-Type_tag2@@": "Dernier de : utilise la dernière taille de cellule des rasters en entrée.",
	"@@Bitwise-And_Cellsize-Type_tag3@@": "Max de : utilise la plus grande taille de cellule de tous les rasters en entrée. Il s’agit de l’option par défaut.",
	"@@Bitwise-And_Cellsize-Type_tag4@@": "Moyenne de : utilise la taille de cellule moyenne de tous les rasters en entrée.",
	"@@Bitwise-And_Cellsize-Type_tag5@@": "Mini de : utilise la plus petite taille de cellule de tous les rasters en entrée.",
	"@@Bitwise-And_Extent-Type_tag0@@": "Sélectionnez l’étendue à utiliser dans le raster en sortie.",
	"@@Bitwise-And_Extent-Type_tag1@@": "Premier de : utilise l’étendue du premier raster en entrée pour déterminer l’étendue de traitement.",
	"@@Bitwise-And_Extent-Type_tag2@@": "Intersection de : utilise l’étendue des pixels superposés pour déterminer l’étendue de traitement. Il s’agit de l’option par défaut.",
	"@@Bitwise-And_Extent-Type_tag3@@": "Dernier de : utilise l’étendue du dernier raster en entrée pour déterminer l’étendue de traitement.",
	"@@Bitwise-And_Extent-Type_tag4@@": "Union de : utilise l’étendue de tous les rasters pour déterminer l’étendue de traitement.",
	"@@Bitwise-And_Raster_tag0@@": "Première entrée à utiliser dans cette opération bit à bit.",
	"@@Bitwise-And_Raster_tag1@@": "Une valeur constante peut être utilisée en entrée pour ce paramètre, à condition qu’un raster soit spécifié pour l’autre paramètre.",
	"@@Bitwise-And_Raster2_tag0@@": "Deuxième entrée à utiliser dans cette opération bit à bit.",
	"@@Bitwise-And_Raster2_tag1@@": "Une valeur constante peut être utilisée en entrée pour ce paramètre, à condition qu’un raster soit spécifié pour l’autre paramètre.",
	"@@Bitwise-Left-Shift_Cellsize-Type_tag0@@": "Choisissez la taille de cellule à utiliser dans le raster en sortie. Si les tailles des cellules en entrée sont identiques, toutes les options donnent les mêmes résultats.",
	"@@Bitwise-Left-Shift_Cellsize-Type_tag1@@": "Premier de : utilise la première taille de cellule des rasters en entrée.",
	"@@Bitwise-Left-Shift_Cellsize-Type_tag2@@": "Dernier de : utilise la dernière taille de cellule des rasters en entrée.",
	"@@Bitwise-Left-Shift_Cellsize-Type_tag3@@": "Max de : utilise la plus grande taille de cellule de tous les rasters en entrée. Il s’agit de l’option par défaut.",
	"@@Bitwise-Left-Shift_Cellsize-Type_tag4@@": "Moyenne de : utilise la taille de cellule moyenne de tous les rasters en entrée.",
	"@@Bitwise-Left-Shift_Cellsize-Type_tag5@@": "Mini de : utilise la plus petite taille de cellule de tous les rasters en entrée.",
	"@@Bitwise-Left-Shift_Extent-Type_tag0@@": "Sélectionnez l’étendue à utiliser dans le raster en sortie.",
	"@@Bitwise-Left-Shift_Extent-Type_tag1@@": "Premier de : utilise l’étendue du premier raster en entrée pour déterminer l’étendue de traitement.",
	"@@Bitwise-Left-Shift_Extent-Type_tag2@@": "Intersection de : utilise l’étendue des pixels superposés pour déterminer l’étendue de traitement. Il s’agit de l’option par défaut.",
	"@@Bitwise-Left-Shift_Extent-Type_tag3@@": "Dernier de : utilise l’étendue du dernier raster en entrée pour déterminer l’étendue de traitement.",
	"@@Bitwise-Left-Shift_Extent-Type_tag4@@": "Union de : utilise l’étendue de tous les rasters pour déterminer l’étendue de traitement.",
	"@@Bitwise-Left-Shift_Raster_tag0@@": "Entrée sur laquelle exécuter le décalage.",
	"@@Bitwise-Left-Shift_Raster_tag1@@": "Une valeur constante peut être utilisée en entrée pour ce paramètre, à condition qu’un raster soit spécifié pour l’autre paramètre.",
	"@@Bitwise-Left-Shift_Raster2_tag0@@": "Entrée définissant le nombre de positions duquel déplacer les bits.",
	"@@Bitwise-Left-Shift_Raster2_tag1@@": "Une valeur constante peut être utilisée en entrée pour ce paramètre, à condition qu’un raster soit spécifié pour l’autre paramètre.",
	"@@Bitwise-Not_Cellsize-Type_tag0@@": "Choisissez la taille de cellule à utiliser dans le raster en sortie. Si les tailles des cellules en entrée sont identiques, toutes les options donnent les mêmes résultats.",
	"@@Bitwise-Not_Cellsize-Type_tag1@@": "Premier de : utilise la première taille de cellule des rasters en entrée.",
	"@@Bitwise-Not_Cellsize-Type_tag2@@": "Dernier de : utilise la dernière taille de cellule des rasters en entrée.",
	"@@Bitwise-Not_Cellsize-Type_tag3@@": "Max de : utilise la plus grande taille de cellule de tous les rasters en entrée. Il s’agit de l’option par défaut.",
	"@@Bitwise-Not_Cellsize-Type_tag4@@": "Moyenne de : utilise la taille de cellule moyenne de tous les rasters en entrée.",
	"@@Bitwise-Not_Cellsize-Type_tag5@@": "Mini de : utilise la plus petite taille de cellule de tous les rasters en entrée.",
	"@@Bitwise-Not_Extent-Type_tag0@@": "Sélectionnez l’étendue à utiliser dans le raster en sortie.",
	"@@Bitwise-Not_Extent-Type_tag1@@": "Premier de : utilise l’étendue du premier raster en entrée pour déterminer l’étendue de traitement.",
	"@@Bitwise-Not_Extent-Type_tag2@@": "Intersection de : utilise l’étendue des pixels superposés pour déterminer l’étendue de traitement. Il s’agit de l’option par défaut.",
	"@@Bitwise-Not_Extent-Type_tag3@@": "Dernier de : utilise l’étendue du dernier raster en entrée pour déterminer l’étendue de traitement.",
	"@@Bitwise-Not_Extent-Type_tag4@@": "Union de : utilise l’étendue de tous les rasters pour déterminer l’étendue de traitement.",
	"@@Bitwise-Not_Raster_tag0@@": "Raster en entrée sur lequel exécuter une opération de complément Non bit à bit.",
	"@@Bitwise-Or_Cellsize-Type_tag0@@": "Choisissez la taille de cellule à utiliser dans le raster en sortie. Si les tailles des cellules en entrée sont identiques, toutes les options donnent les mêmes résultats.",
	"@@Bitwise-Or_Cellsize-Type_tag1@@": "Premier de : utilise la première taille de cellule des rasters en entrée.",
	"@@Bitwise-Or_Cellsize-Type_tag2@@": "Dernier de : utilise la dernière taille de cellule des rasters en entrée.",
	"@@Bitwise-Or_Cellsize-Type_tag3@@": "Max de : utilise la plus grande taille de cellule de tous les rasters en entrée. Il s’agit de l’option par défaut.",
	"@@Bitwise-Or_Cellsize-Type_tag4@@": "Moyenne de : utilise la taille de cellule moyenne de tous les rasters en entrée.",
	"@@Bitwise-Or_Cellsize-Type_tag5@@": "Mini de : utilise la plus petite taille de cellule de tous les rasters en entrée.",
	"@@Bitwise-Or_Extent-Type_tag0@@": "Sélectionnez l’étendue à utiliser dans le raster en sortie.",
	"@@Bitwise-Or_Extent-Type_tag1@@": "Premier de : utilise l’étendue du premier raster en entrée pour déterminer l’étendue de traitement.",
	"@@Bitwise-Or_Extent-Type_tag2@@": "Intersection de : utilise l’étendue des pixels superposés pour déterminer l’étendue de traitement. Il s’agit de l’option par défaut.",
	"@@Bitwise-Or_Extent-Type_tag3@@": "Dernier de : utilise l’étendue du dernier raster en entrée pour déterminer l’étendue de traitement.",
	"@@Bitwise-Or_Extent-Type_tag4@@": "Union de : utilise l’étendue de tous les rasters pour déterminer l’étendue de traitement.",
	"@@Bitwise-Or_Raster_tag0@@": "Première entrée à utiliser dans cette opération bit à bit.",
	"@@Bitwise-Or_Raster_tag1@@": "Une valeur constante peut être utilisée en entrée pour ce paramètre, à condition qu’un raster soit spécifié pour l’autre paramètre.",
	"@@Bitwise-Or_Raster2_tag0@@": "Deuxième entrée à utiliser dans cette opération bit à bit.",
	"@@Bitwise-Or_Raster2_tag1@@": "Une valeur constante peut être utilisée en entrée pour ce paramètre, à condition qu’un raster soit spécifié pour l’autre paramètre.",
	"@@Bitwise-Right-Shift_Cellsize-Type_tag0@@": "Choisissez la taille de cellule à utiliser dans le raster en sortie. Si les tailles des cellules en entrée sont identiques, toutes les options donnent les mêmes résultats.",
	"@@Bitwise-Right-Shift_Cellsize-Type_tag1@@": "Premier de : utilise la première taille de cellule des rasters en entrée.",
	"@@Bitwise-Right-Shift_Cellsize-Type_tag2@@": "Dernier de : utilise la dernière taille de cellule des rasters en entrée.",
	"@@Bitwise-Right-Shift_Cellsize-Type_tag3@@": "Max de : utilise la plus grande taille de cellule de tous les rasters en entrée. Il s’agit de l’option par défaut.",
	"@@Bitwise-Right-Shift_Cellsize-Type_tag4@@": "Moyenne de : utilise la taille de cellule moyenne de tous les rasters en entrée.",
	"@@Bitwise-Right-Shift_Cellsize-Type_tag5@@": "Mini de : utilise la plus petite taille de cellule de tous les rasters en entrée.",
	"@@Bitwise-Right-Shift_Extent-Type_tag0@@": "Sélectionnez l’étendue à utiliser dans le raster en sortie.",
	"@@Bitwise-Right-Shift_Extent-Type_tag1@@": "Premier de : utilise l’étendue du premier raster en entrée pour déterminer l’étendue de traitement.",
	"@@Bitwise-Right-Shift_Extent-Type_tag2@@": "Intersection de : utilise l’étendue des pixels superposés pour déterminer l’étendue de traitement. Il s’agit de l’option par défaut.",
	"@@Bitwise-Right-Shift_Extent-Type_tag3@@": "Dernier de : utilise l’étendue du dernier raster en entrée pour déterminer l’étendue de traitement.",
	"@@Bitwise-Right-Shift_Extent-Type_tag4@@": "Union de : utilise l’étendue de tous les rasters pour déterminer l’étendue de traitement.",
	"@@Bitwise-Right-Shift_Raster_tag0@@": "Entrée sur laquelle exécuter le décalage.",
	"@@Bitwise-Right-Shift_Raster_tag1@@": "Une valeur constante peut être utilisée en entrée pour ce paramètre, à condition qu’un raster soit spécifié pour l’autre paramètre.",
	"@@Bitwise-Right-Shift_Raster2_tag0@@": "Entrée définissant le nombre de positions duquel déplacer les bits.",
	"@@Bitwise-Right-Shift_Raster2_tag1@@": "Une valeur constante peut être utilisée en entrée pour ce paramètre, à condition qu’un raster soit spécifié pour l’autre paramètre.",
	"@@Bitwise-Xor_Cellsize-Type_tag0@@": "Choisissez la taille de cellule à utiliser dans le raster en sortie. Si les tailles des cellules en entrée sont identiques, toutes les options donnent les mêmes résultats.",
	"@@Bitwise-Xor_Cellsize-Type_tag1@@": "Premier de : utilise la première taille de cellule des rasters en entrée.",
	"@@Bitwise-Xor_Cellsize-Type_tag2@@": "Dernier de : utilise la dernière taille de cellule des rasters en entrée.",
	"@@Bitwise-Xor_Cellsize-Type_tag3@@": "Max de : utilise la plus grande taille de cellule de tous les rasters en entrée. Il s’agit de l’option par défaut.",
	"@@Bitwise-Xor_Cellsize-Type_tag4@@": "Moyenne de : utilise la taille de cellule moyenne de tous les rasters en entrée.",
	"@@Bitwise-Xor_Cellsize-Type_tag5@@": "Mini de : utilise la plus petite taille de cellule de tous les rasters en entrée.",
	"@@Bitwise-Xor_Extent-Type_tag0@@": "Sélectionnez l’étendue à utiliser dans le raster en sortie.",
	"@@Bitwise-Xor_Extent-Type_tag1@@": "Premier de : utilise l’étendue du premier raster en entrée pour déterminer l’étendue de traitement.",
	"@@Bitwise-Xor_Extent-Type_tag2@@": "Intersection de : utilise l’étendue des pixels superposés pour déterminer l’étendue de traitement. Il s’agit de l’option par défaut.",
	"@@Bitwise-Xor_Extent-Type_tag3@@": "Dernier de : utilise l’étendue du dernier raster en entrée pour déterminer l’étendue de traitement.",
	"@@Bitwise-Xor_Extent-Type_tag4@@": "Union de : utilise l’étendue de tous les rasters pour déterminer l’étendue de traitement.",
	"@@Bitwise-Xor_Raster_tag0@@": "Première entrée à utiliser dans cette opération bit à bit.",
	"@@Bitwise-Xor_Raster_tag1@@": "Une valeur constante peut être utilisée en entrée pour ce paramètre, à condition qu’un raster soit spécifié pour l’autre paramètre.",
	"@@Bitwise-Xor_Raster2_tag0@@": "Deuxième entrée à utiliser dans cette opération bit à bit.",
	"@@Bitwise-Xor_Raster2_tag1@@": "Une valeur constante peut être utilisée en entrée pour ce paramètre, à condition qu’un raster soit spécifié pour l’autre paramètre.",
	"@@Boolean-and_Cellsize-Type_tag0@@": "Choisissez la taille de cellule à utiliser dans le raster en sortie. Si les tailles des cellules en entrée sont identiques, toutes les options donnent les mêmes résultats.",
	"@@Boolean-and_Cellsize-Type_tag1@@": "Premier de : utilise la première taille de cellule des rasters en entrée.",
	"@@Boolean-and_Cellsize-Type_tag2@@": "Dernier de : utilise la dernière taille de cellule des rasters en entrée.",
	"@@Boolean-and_Cellsize-Type_tag3@@": "Max de : utilise la plus grande taille de cellule de tous les rasters en entrée. Il s’agit de l’option par défaut.",
	"@@Boolean-and_Cellsize-Type_tag4@@": "Moyenne de : utilise la taille de cellule moyenne de tous les rasters en entrée.",
	"@@Boolean-and_Cellsize-Type_tag5@@": "Mini de : utilise la plus petite taille de cellule de tous les rasters en entrée.",
	"@@Boolean-and_Extent-Type_tag0@@": "Sélectionnez l’étendue à utiliser dans le raster en sortie.",
	"@@Boolean-and_Extent-Type_tag1@@": "Premier de : utilise l’étendue du premier raster en entrée pour déterminer l’étendue de traitement.",
	"@@Boolean-and_Extent-Type_tag2@@": "Intersection de : utilise l’étendue des pixels superposés pour déterminer l’étendue de traitement. Il s’agit de l’option par défaut.",
	"@@Boolean-and_Extent-Type_tag3@@": "Dernier de : utilise l’étendue du dernier raster en entrée pour déterminer l’étendue de traitement.",
	"@@Boolean-and_Extent-Type_tag4@@": "Union de : utilise l’étendue de tous les rasters pour déterminer l’étendue de traitement.",
	"@@Boolean-and_Raster_tag0@@": "Première entrée à utiliser dans cette opération booléenne.",
	"@@Boolean-and_Raster_tag1@@": "Une valeur constante peut être utilisée en entrée pour ce paramètre, à condition qu’un raster soit spécifié pour l’autre paramètre.",
	"@@Boolean-and_Raster2_tag0@@": "Deuxième entrée à utiliser dans cette opération booléenne.",
	"@@Boolean-and_Raster2_tag1@@": "Une valeur constante peut être utilisée en entrée pour ce paramètre, à condition qu’un raster soit spécifié pour l’autre paramètre.",
	"@@Boolean-Not_Cellsize-Type_tag0@@": "Choisissez la taille de cellule à utiliser dans le raster en sortie. Si les tailles des cellules en entrée sont identiques, toutes les options donnent les mêmes résultats.",
	"@@Boolean-Not_Cellsize-Type_tag1@@": "Premier de : utilise la première taille de cellule des rasters en entrée.",
	"@@Boolean-Not_Cellsize-Type_tag2@@": "Dernier de : utilise la dernière taille de cellule des rasters en entrée.",
	"@@Boolean-Not_Cellsize-Type_tag3@@": "Max de : utilise la plus grande taille de cellule de tous les rasters en entrée. Il s’agit de l’option par défaut.",
	"@@Boolean-Not_Cellsize-Type_tag4@@": "Moyenne de : utilise la taille de cellule moyenne de tous les rasters en entrée.",
	"@@Boolean-Not_Cellsize-Type_tag5@@": "Mini de : utilise la plus petite taille de cellule de tous les rasters en entrée.",
	"@@Boolean-Not_Extent-Type_tag0@@": "Sélectionnez l’étendue à utiliser dans le raster en sortie.",
	"@@Boolean-Not_Extent-Type_tag1@@": "Premier de : utilise l’étendue du premier raster en entrée pour déterminer l’étendue de traitement.",
	"@@Boolean-Not_Extent-Type_tag2@@": "Intersection de : utilise l’étendue des pixels superposés pour déterminer l’étendue de traitement. Il s’agit de l’option par défaut.",
	"@@Boolean-Not_Extent-Type_tag3@@": "Dernier de : utilise l’étendue du dernier raster en entrée pour déterminer l’étendue de traitement.",
	"@@Boolean-Not_Extent-Type_tag4@@": "Union de : utilise l’étendue de tous les rasters pour déterminer l’étendue de traitement.",
	"@@Boolean-Not_Raster_tag0@@": "Première entrée à utiliser dans cette opération booléenne.",
	"@@Boolean-Or_Cellsize-Type_tag0@@": "Choisissez la taille de cellule à utiliser dans le raster en sortie. Si les tailles des cellules en entrée sont identiques, toutes les options donnent les mêmes résultats.",
	"@@Boolean-Or_Cellsize-Type_tag1@@": "Premier de : utilise la première taille de cellule des rasters en entrée.",
	"@@Boolean-Or_Cellsize-Type_tag2@@": "Dernier de : utilise la dernière taille de cellule des rasters en entrée.",
	"@@Boolean-Or_Cellsize-Type_tag3@@": "Max de : utilise la plus grande taille de cellule de tous les rasters en entrée. Il s’agit de l’option par défaut.",
	"@@Boolean-Or_Cellsize-Type_tag4@@": "Moyenne de : utilise la taille de cellule moyenne de tous les rasters en entrée.",
	"@@Boolean-Or_Cellsize-Type_tag5@@": "Mini de : utilise la plus petite taille de cellule de tous les rasters en entrée.",
	"@@Boolean-Or_Extent-Type_tag0@@": "Sélectionnez l’étendue à utiliser dans le raster en sortie.",
	"@@Boolean-Or_Extent-Type_tag1@@": "Premier de : utilise l’étendue du premier raster en entrée pour déterminer l’étendue de traitement.",
	"@@Boolean-Or_Extent-Type_tag2@@": "Intersection de : utilise l’étendue des pixels superposés pour déterminer l’étendue de traitement. Il s’agit de l’option par défaut.",
	"@@Boolean-Or_Extent-Type_tag3@@": "Dernier de : utilise l’étendue du dernier raster en entrée pour déterminer l’étendue de traitement.",
	"@@Boolean-Or_Extent-Type_tag4@@": "Union de : utilise l’étendue de tous les rasters pour déterminer l’étendue de traitement.",
	"@@Boolean-Or_Raster_tag0@@": "Première entrée à utiliser dans cette opération booléenne.",
	"@@Boolean-Or_Raster_tag1@@": "Une valeur constante peut être utilisée en entrée pour ce paramètre, à condition qu’un raster soit spécifié pour l’autre paramètre.",
	"@@Boolean-Or_Raster2_tag0@@": "Deuxième entrée à utiliser dans cette opération booléenne.",
	"@@Boolean-Or_Raster2_tag1@@": "Une valeur constante peut être utilisée en entrée pour ce paramètre, à condition qu’un raster soit spécifié pour l’autre paramètre.",
	"@@Boolean-Xor_Cellsize-Type_tag0@@": "Choisissez la taille de cellule à utiliser dans le raster en sortie. Si les tailles des cellules en entrée sont identiques, toutes les options donnent les mêmes résultats.",
	"@@Boolean-Xor_Cellsize-Type_tag1@@": "Premier de : utilise la première taille de cellule des rasters en entrée.",
	"@@Boolean-Xor_Cellsize-Type_tag2@@": "Dernier de : utilise la dernière taille de cellule des rasters en entrée.",
	"@@Boolean-Xor_Cellsize-Type_tag3@@": "Max de : utilise la plus grande taille de cellule de tous les rasters en entrée. Il s’agit de l’option par défaut.",
	"@@Boolean-Xor_Cellsize-Type_tag4@@": "Moyenne de : utilise la taille de cellule moyenne de tous les rasters en entrée.",
	"@@Boolean-Xor_Cellsize-Type_tag5@@": "Mini de : utilise la plus petite taille de cellule de tous les rasters en entrée.",
	"@@Boolean-Xor_Extent-Type_tag0@@": "Sélectionnez l’étendue à utiliser dans le raster en sortie.",
	"@@Boolean-Xor_Extent-Type_tag1@@": "Premier de : utilise l’étendue du premier raster en entrée pour déterminer l’étendue de traitement.",
	"@@Boolean-Xor_Extent-Type_tag2@@": "Intersection de : utilise l’étendue des pixels superposés pour déterminer l’étendue de traitement. Il s’agit de l’option par défaut.",
	"@@Boolean-Xor_Extent-Type_tag3@@": "Dernier de : utilise l’étendue du dernier raster en entrée pour déterminer l’étendue de traitement.",
	"@@Boolean-Xor_Extent-Type_tag4@@": "Union de : utilise l’étendue de tous les rasters pour déterminer l’étendue de traitement.",
	"@@Boolean-Xor_Raster_tag0@@": "Première entrée à utiliser dans cette opération booléenne.",
	"@@Boolean-Xor_Raster_tag1@@": "Une valeur constante peut être utilisée en entrée pour ce paramètre, à condition qu’un raster soit spécifié pour l’autre paramètre.",
	"@@Boolean-Xor_Raster2_tag0@@": "Deuxième entrée à utiliser dans cette opération booléenne.",
	"@@Boolean-Xor_Raster2_tag1@@": "Une valeur constante peut être utilisée en entrée pour ce paramètre, à condition qu’un raster soit spécifié pour l’autre paramètre.",
	"@@Buffered_Raster_tag0@@": "Le raster en entrée à stocker en mémoire.",
	"@@Calculator_Cellsize-Type_tag0@@": "La taille de cellule utilisée pour créer le raster en sortie.",
	"@@Calculator_Cellsize-Type_tag1@@": "Vous pouvez choisir la taille de cellule en sortie à l’aide des options suivantes de la liste déroulante :",
	"@@Calculator_Cellsize-Type_tag2@@": "<strong>Premier de</strong> : taille de cellule de la première variable raster.",
	"@@Calculator_Cellsize-Type_tag4@@": "<strong>Min de</strong> : taille de cellule minimale des rasters en entrée.",
	"@@Calculator_Cellsize-Type_tag6@@": "<strong>Max de</strong> : taille de cellule maximale des rasters en entrée.",
	"@@Calculator_Cellsize-Type_tag8@@": "<strong>Moyenne de</strong> : taille de cellule moyenne des rasters en entrée.",
	"@@Calculator_Cellsize-Type_tag10@@": "<strong>Dernier de</strong> : taille de cellule de la dernière variable raster.",
	"@@Calculator_Cellsize-Type_tag12@@": "La sélection par défaut est <strong>Max de</strong>.",
	"@@Calculator_Expression_tag0@@": "Construire une expression algébrique pour effectuer l’analyse spatiale sur le raster en entrée.",
	"@@Calculator_Expression_tag1@@": "Toutes les fonctions mathématiques existantes peuvent être appelées pour construire l’expression. Les opérateurs disponibles sont répertoriés ci-dessous.",
	"@@Calculator_Expression_tag2@@": "Opérations arithmétiques",
	"@@Calculator_Expression_tag3@@": "Addition : +",
	"@@Calculator_Expression_tag4@@": "Division : /",
	"@@Calculator_Expression_tag5@@": "Modulo : %",
	"@@Calculator_Expression_tag6@@": "Multiplication : *",
	"@@Calculator_Expression_tag7@@": "Puissance : **",
	"@@Calculator_Expression_tag8@@": "Soustraction : -",
	"@@Calculator_Expression_tag9@@": "Opérations booléennes",
	"@@Calculator_Expression_tag10@@": "Et booléen : &&",
	"@@Calculator_Expression_tag11@@": "Ou booléen : ||",
	"@@Calculator_Expression_tag12@@": "Opérations relationnelles",
	"@@Calculator_Expression_tag13@@": "Égal à :==",
	"@@Calculator_Expression_tag14@@": "Supérieur à : >",
	"@@Calculator_Expression_tag15@@": "Supérieur ou égal à : >=",
	"@@Calculator_Expression_tag16@@": "Inférieur à : <",
	"@@Calculator_Expression_tag17@@": "Inférieur ou égal à : <=",
	"@@Calculator_Expression_tag18@@": "N’est pas égal à : !=",
	"@@Calculator_Expression_tag19@@": "Opérations supplémentaires",
	"@@Calculator_Expression_tag20@@": "Minimum de deux rasters, pixel par pixel : min(a,b)",
	"@@Calculator_Expression_tag21@@": "Maximum de deux rasters, pixel par pixel : max(a,b)",
	"@@Calculator_Expression_tag22@@": "Voici quelques exemples d’expressions.",
	"@@Calculator_Expression_tag23@@": "Instruction conditionnelle simple : dans un raster (indiqué par la lettre T) recherchez les valeurs d’altitude supérieures à 4 000 pieds et attribuez à ces zones la valeur 1 et la valeur 0 à toutes les autres zones.",
	"@@Calculator_Expression_tag24@@": "Con(T > 4000, 1, 0)",
	"@@Calculator_Expression_tag25@@": "Instruction conditionnelle imbriquée : recherchez les zones où la pente (indiquée par b1)) est inférieure à 10 degrés et l’indice NDVI (indiqué par b2) est supérieur à 0,5, et attribuez à ces zones la valeur 1. Pour toutes les autres zones, attribuez la valeur 2 si la pente est supérieure à 10 degrés et l’altitude (indiquée par b3) est supérieure à 2 500 pieds. La valeur 3 est attribuée à toutes les autres zones.",
	"@@Calculator_Expression_tag26@@": "Con((b1 < 10 && b2 > .5, 1, Con(b1 > 10 && b3 > 2500, 2, 3)))",
	"@@Calculator_extenttype_tag0@@": "<p>Sélectionnez l’étendue à utiliser dans le raster en sortie :</p><ul><li><p>Premier de : utiliser l’étendue du premier raster en entrée pour déterminer l’étendue de traitement.</p></li><li>Intersection de : utiliser l’étendue des pixels superposés pour déterminer l’étendue de traitement. Il s’agit de l’option par défaut.</li><li>Union de : utiliser l’étendue de tous les rasters pour déterminer l’étendue de traitement.</li><li>Dernier de : utiliser l’étendue du dernier raster en entrée pour déterminer l’étendue de traitement.</li></ul>",
	"@@Calculator_Raster-Variables_tag0@@": "Le nom de la variable définie par l’utilisateur et le raster en entrée.",
	"@@Classify_Input-Definition-File_tag0@@": "Fichier de définition de classificateur Esri en entrée (${.ecd}) qui contient les statistiques et d’autres informations de classification pour le jeu de données, le classificateur et les attributs choisis.",
	"@@Classify_Raster_tag0@@": "Jeu de données raster à classer.",
	"@@Classify_Raster2_tag0@@": "Jeu de données raster auxiliaire facultatif à incorporer au classificateur, tel qu’une image segmentée, une image multispectrale ou des données d’altitude, utilisé pour générer une définition de classification plus robuste pour votre ensemble de données. Le jeu de données raster pour ce paramètre doit correspondre à celui qui a été utilisé pour créer le fichier de définition de classificateur Esri en entrée.",
	"@@Clip_Clipping-Geometry-or-Raster_tag0@@": "Les éléments suivants peuvent être utilisés pou spécifier l’étendue de découpage :",
	"@@Clip_Clipping-Geometry-or-Raster_tag1@@": "<strong>Découpage du raster</strong> : étendue de découpage du raster.",
	"@@Clip_Clipping-Geometry-or-Raster_tag3@@": "<strong>Étendue personnalisée</strong> : coordonnées X et Y minimales et maximales",
	"@@Clip_Clipping-Geometry-or-Raster_tag5@@": "<strong>Étendue actuelle de la carte</strong> : étendue de l’affichage cartographique actuel",
	"@@Clip_Clipping-Raster_tag0@@": "La couche raster utilisée pour le découpage.",
	"@@Clip_Clipping-Type_tag0@@": "Indiquez si vous voulez que la zone figure à l’intérieur ou à l’extérieur de la géométrie de découpage.",
	"@@Clip_Clipping-Type_tag1@@": "<strong>Découpage intérieur</strong> : l’imagerie qui se trouve dans l’étendue de découpage sera supprimée.",
	"@@Clip_Clipping-Type_tag3@@": "<strong>Découpage extérieur</strong> : l’imagerie qui se trouve hors de l’étendue de découpage sera supprimée.",
	"@@Clip_Custom-Extent_tag0@@": "Spécifier les quatre coordonnées qui définissent l’étendue de l’emprise utilisée pour découper le raster.",
	"@@Clip_Output-Extent_tag0@@": "Les coordonnées x et y de l’étendue de découpage actuelle.",
	"@@Clip_Output-Extent_tag1@@": "Le bouton <strong>Capturer l’étendue actuelle de la carte</strong> utilise l’étendue d’affichage de la carte active.",
	"@@Clip_Raster_tag0@@": "Couche raster en entrée.",
	"@@Clip_Use-Input-Features-for-Clipping-Geometry_tag0@@": "Une fois sélectionnées, les données sont découpées selon la géométrie de la classe d’entités spécifiée",
	"@@Clip_Use-Input-Features-for-Clipping-Geometry_tag1@@": "Désactivé : la fonction utilise la géométrie de découpage spécifiée par l’option <strong>Rectangle</strong>. Il s’agit de l’option par défaut.",
	"@@Clip_Use-Input-Features-for-Clipping-Geometry_tag4@@": "Coché : la fonction utilise la géométrie de découpage définie par une classe d’entités.",
	"@@Color-Model-Conversion_Conversion-Type_tag0@@": "Le type de conversion de couleur à effectuer :",
	"@@Color-Model-Conversion_Conversion-Type_tag1@@": "TSL vers RVB",
	"@@Color-Model-Conversion_Conversion-Type_tag2@@": "RVB vers TSL",
	"@@Color-Model-Conversion_Raster_tag0@@": "Raster en entrée.",
	"@@Colormap_Color-Ramp_tag0@@": "Choisissez un dégradé de couleurs existant.",
	"@@Colormap_Color-Scheme-Type_tag0@@": "Choisissez le type de combinaison de couleurs à utiliser pour afficher votre raster en entrée",
	"@@Colormap_Color-Scheme-Type_tag1@@": "Dégradé de couleurs : utilisez un dégradé de couleurs.",
	"@@Colormap_Color-Scheme-Type_tag2@@": "Palette de couleurs : utilisez une palette de couleurs existante.",
	"@@Colormap_Colormap_tag0@@": "Les palettes de couleurs par défaut suivantes sont disponibles dans la liste déroulante :",
	"@@Colormap_Colormap_tag1@@": "Altitude : palette de couleurs qui passe progressivement du cyan au mauve, puis au noir.",
	"@@Colormap_Colormap_tag2@@": "Gris : palette de couleurs qui passe progressivement du noir au blanc.",
	"@@Colormap_Colormap_tag7@@": "Ombrage : palette de couleurs en échelle de gris servant à visualiser une représentation 3D de la surface du terrain, avec prise en compte de la position relative du soleil pour l’ombrage de l’image.",
	"@@Colormap_Colormap_tag3@@": "NDVI : palette de couleurs permettant de visualiser la végétation. Les valeurs proches de zéro correspondent au bleu. Les valeurs faibles correspondent au marron. Ensuite, les couleurs passent progressivement du rouge au orange, puis au jaune, au vert et enfin au noir, car l’index de végétation va des valeurs faibles aux plus élevées.",
	"@@Colormap_Colormap_tag4@@": "NDVI2 : palette de couleurs permettant de visualiser la végétation. La plage des valeurs faibles va du blanc au vert. Ensuite, les couleurs vont du gris au mauve, au violet, puis au bleu foncé et enfin au noir, à mesure que l’index de végétation passe de faible à élevé.",
	"@@Colormap_Colormap_tag5@@": "NDVI3 : palette de couleurs permettant de visualiser la végétation. Les valeurs proches de zéro correspondent au bleu. Ensuite, les couleurs passent progressivement du rouge au orange, puis au vert, car l’index de végétation va des valeurs faibles aux plus élevées.",
	"@@Colormap_Colormap_tag6@@": "Aléatoire : palette de couleurs aléatoires.",
	"@@Colormap_Raster_tag0@@": "Raster en entrée.",
	"@@Colormap-To-RGB_Raster_tag0@@": "Raster de la palette de couleurs en entrée.",
	"@@Complex_Raster_tag0@@": "Raster en entrée.",
	"@@Composite-Bands_Rasters_tag0@@": "Utilisez la liste déroulante ou le bouton <strong>Parcourir</strong> pour choisir les entrées raster.",
	"@@Composite-Bands_cellsizetype_tag0@@": "<p>Choisir la taille de cellule à utiliser dans le raster en sortie. Si toutes les tailles de cellule en entrée sont identiques, toutes les options donnent les mêmes résultats.</p><ul><li>Premier de : utiliser la première taille de cellule des rasters en entrée.</li><li>Min de : utiliser la plus petite taille de cellule de tous les rasters en entrée.</li><li>Max de : utiliser la plus grande taille de cellule de tous les rasters en entrée. Il s’agit de l’option par défaut.</li><li>Moyenne de : utiliser la taille de cellule moyenne de tous les rasters en entrée.</li><li>Dernier de : utiliser la dernière taille de cellule des rasters en entrée.</li></ul>",
	"@@Con-function_Cellsize-Type_tag0@@": "Choisissez la taille de cellule à utiliser dans le raster en sortie. Si les tailles des cellules en entrée sont identiques, toutes les options donnent les mêmes résultats.",
	"@@Con-function_Cellsize-Type_tag1@@": "Premier de : utilise la première taille de cellule des rasters en entrée.",
	"@@Con-function_Cellsize-Type_tag2@@": "Dernier de : utilise la dernière taille de cellule des rasters en entrée.",
	"@@Con-function_Cellsize-Type_tag3@@": "Max de : utilise la plus grande taille de cellule de tous les rasters en entrée. Il s’agit de l’option par défaut.",
	"@@Con-function_Cellsize-Type_tag4@@": "Moyenne de : utilise la taille de cellule moyenne de tous les rasters en entrée.",
	"@@Con-function_Cellsize-Type_tag5@@": "Mini de : utilise la plus petite taille de cellule de tous les rasters en entrée.",
	"@@Con_Extent-Type_tag0@@": "Sélectionnez l’étendue à utiliser dans le raster en sortie.",
	"@@Con_Extent-Type_tag1@@": "Premier de : utilise l’étendue du premier raster en entrée pour déterminer l’étendue de traitement.",
	"@@Con_Extent-Type_tag2@@": "Intersection de : utilise l’étendue des pixels superposés pour déterminer l’étendue de traitement. Il s’agit de l’option par défaut.",
	"@@Con_Extent-Type_tag3@@": "Dernier de : utilise l’étendue du dernier raster en entrée pour déterminer l’étendue de traitement.",
	"@@Con_Extent-Type_tag4@@": "Union de : utilise l’étendue de tous les rasters pour déterminer l’étendue de traitement.",
	"@@Con_False-Raster_tag0@@": "Entrée dont les valeurs seront utilisées en tant que valeurs de pixel en sortie si la condition est fausse. Il peut s’agir d’un raster de type entier, à virgule flottante ou d’une valeur constante.",
	"@@Con_Raster_tag0@@": "Le raster en entrée qui représente le résultat booléen d’une fonction raster mathématique logique. Les valeurs sont égales à 1 (pour Vrai) ou à 0 (pour Faux). Il peut s'agir d'un entier ou d'un raster en virgule flottante.",
	"@@Con_True-Raster_tag0@@": "Entrée dont les valeurs seront utilisées en tant que valeurs de pixel en sortie si la condition est vraie. Il peut s’agir d’un raster de type entier, à virgule flottante ou d’une valeur constante.",
	"@@Constant_Constant_tag0@@": "La valeur de la constante à ajouter au raster virtuel.",
	"@@Constant_Raster-Info_tag0@@": "Utilisez le bouton <strong>Charger le raster modèle</strong> pour charger un modèle à partir d’un répertoire ou d’un portail.",
	"@@Contour_Adaptive-Smoothing_tag0@@": "Quantité de lissage à appliquer à l'isoligne. La valeur par défaut est 2.5.",
	"@@Contour_Adaptive-Smoothing_tag1@@": "Une valeur inférieure produit une isoligne avec plus de granularité et moins de lissage, tandis qu'une valeur supérieure génère une isoligne avec plus de lissage qui semble moins irrégulière.",
	"@@Contour_Contour-Interval_tag0@@": "Différence en altitude entre les isolignes.",
	"@@Contour_Contour-Interval_tag1@@": "Un petit intervalle d’isolignes est utilisé dans les zones relativement planes, tandis qu’un intervalle plus élevé est utilisé pour les terrains variables ou montagneux.",
	"@@Contour_Contour-Type_tag0@@": "Type d'isoligne à créer :",
	"@@Contour_Contour-Type_tag1@@": "<strong>Remplissage d’isolignes</strong> : remplit la zone située entre chaque isoligne avec la valeur d’élévation quantifiée.",
	"@@Contour_Contour-Type_tag3@@": "<strong>Isolignes</strong> : joint les points d’élévation égale pour créer une ligne représentant une élévation constante.",
	"@@Contour_Contour-Type_tag5@@": "<strong>Surface lisse uniquement</strong> : lisse la couche d’élévation en entrée, mais ne génère pas d’isolignes.",
	"@@Contour_Nth-Contour-Line-In-Bold_tag0@@": "Isoligne d'index, qui est représentée sous forme de ligne en gras.",
	"@@Contour_Nth-Contour-Line-In-Bold_tag1@@": "La valeur par défaut est 5, c’est-à-dire qu’une isoligne sur 5 est en gras.",
	"@@Contour_Number-Of-Contours_tag0@@": "Nombre d’isolignes à générer sur l’affichage. Ajuste dynamiquement l'intervalle des isolignes pour les adapter au MNT sur l'affichage tout en conservant les intervalles standardisés, tels que 1, 5, 10, etc.",
	"@@Contour_Raster_tag0@@": "Jeu de données d'altitude raster monocanal.",
	"@@Contour_Z-Base_tag0@@": "Valeur de l'isoligne de base. Les isolignes sont générées au-dessus et en dessous de cette valeur de façon à couvrir la plage de valeurs complète du raster en entrée. La valeur par défaut est 0.",
	"@@Contour_Z-Base_tag1@@": "La valeur 0 représente souvent le niveau moyen de la mer, selon le jeu de données d'altitude source.",
	"@@Contour_Z-Factor_tag0@@": "Facteur de conversion d'unités utilisé lors de la génération des isolignes. La valeur par défaut est 1.",
	"@@Contour_Z-Factor_tag1@@": "Les isolignes sont générées en fonction des valeurs z dans le raster en entrée, qui sont souvent mesurées en mètres ou en pieds. Avec la valeur par défaut 1, les isolignes sont dans les mêmes unités que les valeurs z du raster en entrée. Pour créer des isolignes dans une autre unité que celle des valeurs z, définissez une valeur appropriée pour le facteur z. Notez qu'il n'est pas nécessaire que les unités x,y au sol et les unités z de surface soient homogènes pour cet outil.",
	"@@Contour_Z-Factor_tag2@@": "Par exemple, si les valeurs d’altitude de votre raster en entrée sont en pieds, mais que vous voulez que les isolignes soient générées en mètres, définissez le facteur z sur 0,3048 (car 1 pied = 0,3048 mètres).",
	"@@Contrast-and-Brightness_Brightness-Offset_tag0@@": "Réglez la luminosité de la couche raster.",
	"@@Contrast-and-Brightness_Brightness-Offset_tag1@@": "Vous pouvez utiliser le curseur pour modifier la luminosité, ou saisir une valeur.",
	"@@Contrast-and-Brightness_Contrast-Offset_tag0@@": "Réglez le contraste de la couche raster.",
	"@@Contrast-and-Brightness_Contrast-Offset_tag1@@": "Vous pouvez utiliser le curseur pour modifier le contraste, ou saisir une valeur.",
	"@@Contrast-and-Brightness_Raster_tag0@@": "Raster en entrée sur lequel modifier la luminosité et le contraste.",
	"@@Convolution_kernel_tag0@@": "<p>Cette table illustre la manière dont chaque pixel sera pondéré au cours du filtrage. Cette table peut être mise à jour si vous paramétrez le <strong>Type</strong> sur <strong>Défini par l’utilisateur</strong>.</p>",
	"@@Convolution_Raster_tag0@@": "Jeu de données raster en entrée.",
	"@@Convolution_Type_tag0@@": "Sélectionnez le type de filtrage à effectuer : Des options permettent d’affiner, de brouiller une image ou détecter des tronçons, mais vous pouvez également définir votre propre filtre de type noyau",
	"@@Corridor_Distance-Raster-1_tag0@@": "Premier raster de distance en entrée. Il doit s’agir d’une sortie d’outil de distance de coût cumulé provenant de Distance de coût ou Distance de chemin.",
	"@@Corridor_Distance-Raster-2_tag0@@": "Deuxième raster de distance en entrée. Il doit s’agir d’une sortie d’outil de distance de coût cumulé provenant de Distance de coût ou Distance de chemin.",
	"@@Cos_Cellsize-Type_tag0@@": "Choisissez la taille de cellule à utiliser dans le raster en sortie. Si les tailles des cellules en entrée sont identiques, toutes les options donnent les mêmes résultats.",
	"@@Cos_Cellsize-Type_tag1@@": "Premier de : utilise la première taille de cellule des rasters en entrée.",
	"@@Cos_Cellsize-Type_tag2@@": "Dernier de : utilise la dernière taille de cellule des rasters en entrée.",
	"@@Cos_Cellsize-Type_tag3@@": "Max de : utilise la plus grande taille de cellule de tous les rasters en entrée. Il s’agit de l’option par défaut.",
	"@@Cos_Cellsize-Type_tag4@@": "Moyenne de : utilise la taille de cellule moyenne de tous les rasters en entrée.",
	"@@Cos_Cellsize-Type_tag5@@": "Mini de : utilise la plus petite taille de cellule de tous les rasters en entrée.",
	"@@Cos_Extent-Type_tag0@@": "Sélectionnez l’étendue à utiliser dans le raster en sortie.",
	"@@Cos_Extent-Type_tag1@@": "Premier de : utilise l’étendue du premier raster en entrée pour déterminer l’étendue de traitement.",
	"@@Cos_Extent-Type_tag2@@": "Intersection de : utilise l’étendue des pixels superposés pour déterminer l’étendue de traitement. Il s’agit de l’option par défaut.",
	"@@Cos_Extent-Type_tag3@@": "Dernier de : utilise l’étendue du dernier raster en entrée pour déterminer l’étendue de traitement.",
	"@@Cos_Extent-Type_tag4@@": "Union de : utilise l’étendue de tous les rasters pour déterminer l’étendue de traitement.",
	"@@Cos_Raster_tag0@@": "Entrée pour laquelle calculer les valeurs de cosinus.",
	"@@CosH_Cellsize-Type_tag0@@": "Choisissez la taille de cellule à utiliser dans le raster en sortie. Si les tailles des cellules en entrée sont identiques, toutes les options donnent les mêmes résultats.",
	"@@CosH_Cellsize-Type_tag1@@": "Premier de : utilise la première taille de cellule des rasters en entrée.",
	"@@CosH_Cellsize-Type_tag2@@": "Dernier de : utilise la dernière taille de cellule des rasters en entrée.",
	"@@CosH_Cellsize-Type_tag3@@": "Max de : utilise la plus grande taille de cellule de tous les rasters en entrée. Il s’agit de l’option par défaut.",
	"@@CosH_Cellsize-Type_tag4@@": "Moyenne de : utilise la taille de cellule moyenne de tous les rasters en entrée.",
	"@@CosH_Cellsize-Type_tag5@@": "Mini de : utilise la plus petite taille de cellule de tous les rasters en entrée.",
	"@@CosH_Extent-Type_tag0@@": "Sélectionnez l’étendue à utiliser dans le raster en sortie.",
	"@@CosH_Extent-Type_tag1@@": "Premier de : utilise l’étendue du premier raster en entrée pour déterminer l’étendue de traitement.",
	"@@CosH_Extent-Type_tag2@@": "Intersection de : utilise l’étendue des pixels superposés pour déterminer l’étendue de traitement. Il s’agit de l’option par défaut.",
	"@@CosH_Extent-Type_tag3@@": "Dernier de : utilise l’étendue du dernier raster en entrée pour déterminer l’étendue de traitement.",
	"@@CosH_Extent-Type_tag4@@": "Union de : utilise l’étendue de tous les rasters pour déterminer l’étendue de traitement.",
	"@@CosH_Raster_tag0@@": "Entrée pour laquelle calculer les valeurs de cosinus hyperbolique.",
	"@@Cost-Allocation_Accumulative-Cost-Resistance-Rate_tag0@@": "Ce paramètre simule l’augmentation de l’effort pour surmonter les coûts au fur et à mesure que le coût cumulé augmente. Il permet de modéliser la fatigue du voyageur. Le coût cumulé croissant pour atteindre une cellule est multiplié par le taux de résistance et ajouté au coût engendré par le déplacement vers la cellule suivante.",
	"@@Cost-Allocation_Accumulative-Cost-Resistance-Rate_tag1@@": "Il s’agit d’une version modifiée d’une formule de taux d’intérêt composé qui permet de calculer le coût apparent du déplacement à travers une cellule. Avec l'augmentation du taux de résistance, le coût des cellules qui sont visitées ultérieurement s'accroît également. Plus le taux de résistance est important, plus le coût de déplacement vers la cellule suivante augmente, lequel est ajouté pour chaque mouvement suivant. Puisque le taux de résistance est similaire à un taux composé et qu’habituellement les valeurs de coût cumulé sont très importantes, nous suggérons l’utilisation de taux de résistance faibles, tels que 0,005 ou encore inférieurs, selon les valeurs de coût cumulé.",
	"@@Cost-Allocation_Accumulative-Cost-Resistance-Rate_tag2@@": "La valeur doit être supérieure à zéro. La capacité par défaut est limitée par le tronçon du raster en sortie.",
	"@@Cost-Allocation_Accumulative-Cost-Resistance-Rate_tag3@@": "Vous pouvez utiliser pour ce paramètre une valeur numérique (double) ou un champ du <strong>Raster source</strong>.",
	"@@Cost-Allocation_Capacity_tag0@@": "Définit la capacité de coût pour le voyageur pour une source. Les calculs de coût continuent pour chaque source jusqu’à ce que la capacité spécifiée soit atteinte.",
	"@@Cost-Allocation_Capacity_tag1@@": "La valeur doit être supérieure à zéro. La capacité par défaut est limitée par le tronçon du raster en sortie.",
	"@@Cost-Allocation_Capacity_tag2@@": "Vous pouvez utiliser pour ce paramètre une valeur numérique (double) ou un champ du <strong>Raster source</strong>.",
	"@@Cost-Allocation_Cost-Raster_tag0@@": "Raster en entrée requis définissant le coût ou l’impédance de déplacement planimétrique à travers chaque cellule. La valeur à chaque emplacement de cellule représente le coût par unité de distance pour le déplacement à travers chaque cellule. Chaque valeur d’emplacement de cellule est multipliée par la résolution de cellule et compense également le mouvement diagonal afin d’obtenir le coût total du passage à travers la cellule.",
	"@@Cost-Allocation_Cost-Raster_tag1@@": "Les valeurs du <strong>Raster de coût</strong> peuvent être des entiers ou des nombres à virgule flottante, mais elles ne peuvent pas être négatives ni nulles.",
	"@@Cost-Allocation_Maximum-Distance_tag0@@": "Le seuil que les valeurs de coût cumulé ne peuvent pas dépasser. Si une distance de coût cumulé dépasse cette valeur, la valeur en sortie de l’emplacement de cellule est ${NoData}. La distance maximale définit l’étendue pour laquelle les distances de coût cumulé sont calculées. La distance par défaut va jusqu’à l’étendue du raster en sortie.",
	"@@Cost-Allocation_Multiplier-to-Apply-to-Costs_tag0@@": "Multiplicateur à appliquer aux valeurs de coût.",
	"@@Cost-Allocation_Multiplier-to-Apply-to-Costs_tag1@@": "Ce paramètre permet de contrôler le mode de déplacement ou la magnitude à une source. Plus le multiplicateur est élevé, plus le coût de déplacement d’une cellule à une autre est important.",
	"@@Cost-Allocation_Multiplier-to-Apply-to-Costs_tag2@@": "Les valeurs doivent être supérieures à zéro. La valeur par défaut est 1.",
	"@@Cost-Allocation_Multiplier-to-Apply-to-Costs_tag3@@": "Vous pouvez utiliser pour ce paramètre une valeur numérique (double) ou un champ du <strong>Raster source</strong>.",
	"@@Cost-Allocation_Source-Field_tag0@@": "Champ permettant d’attribuer des valeurs aux emplacements sources. Il doit être de type entier. Si le <strong>Raster de valeur</strong> a été défini, les valeurs dans cette entrée sont prioritaires sur tout paramètre du <strong>Champ source</strong>.",
	"@@Cost-Allocation_Source-Raster_tag0@@": "Le raster en entrée requis des emplacements source.",
	"@@Cost-Allocation_Source-Raster_tag1@@": "Raster qui identifie les cellules ou les emplacements à partir desquels la distance de moindre coût cumulé est calculée pour chaque emplacement de cellule en sortie.",
	"@@Cost-Allocation_Source-Raster_tag2@@": "Si le <strong>Raster source</strong> en entrée est à virgule flottante, le <strong>Raster de valeur</strong> doit être défini et il doit être de type entier. Le <strong>Raster de valeur</strong> est prioritaire sur tout paramètre du <strong>Champ source</strong>.",
	"@@Cost-Allocation_Start-Cost_tag0@@": "Coût de départ du calcul des coûts. Ce paramètre permet de spécifier le coût fixe associé à une source. Plutôt que de commencer avec un coût égal à 0, l’algorithme de coût commence avec la valeur définie.",
	"@@Cost-Allocation_Start-Cost_tag1@@": "La valeur doit être égale ou supérieure à zéro. La valeur par défaut est 0.",
	"@@Cost-Allocation_Travel-Direction_tag0@@": "Définit le sens du voyageur en cas d’application du taux de résistance source et du coût de départ source.",
	"@@Cost-Allocation_Travel-Direction_tag1@@": "<strong>À partir de la source</strong> : le taux de résistance source et le coût de départ source sont appliqués à partir de la source en entrée et en se déplaçant vers les cellules non sources. Il s’agit de l’option par défaut.",
	"@@Cost-Allocation_Travel-Direction_tag3@@": "<strong>Vers la source</strong> : le taux de résistance source et le coût de départ source sont appliqués à partir de chaque cellule non source et en revenant vers la source en entrée.",
	"@@Cost-Allocation_Travel-Direction_tag5@@": "Spécifiez le mot-clé <strong>À partir de la source</strong> ou <strong>Vers la source</strong>, qui est appliqué à toutes les sources, ou spécifiez un champ dans le <strong>Raster source</strong> qui contient les mots-clés permettant d’identifier le sens de déplacement pour chaque source. Ce champ doit contenir la chaîne ${FROM_SOURCE} ou ${TO_SOURCE}.",
	"@@Cost-Allocation_Value-Raster_tag0@@": "Raster d’entiers en entrée qui identifie les valeurs de zone à utiliser pour chaque emplacement source en entrée. Pour chaque cellule d’emplacement source, la valeur définie par le <strong>Raster de valeur</strong> est attribuée à toutes les cellules allouées à l’emplacement source pour le calcul. Le <strong>Raster de valeur</strong> est prioritaire sur tout paramètre du <strong>Champ source</strong>.",
	"@@Cost-Back-Link_Accumulative-Cost-Resistance-Rate_tag0@@": "Ce paramètre simule l’augmentation de l’effort pour surmonter les coûts au fur et à mesure que le coût cumulé augmente. Il permet de modéliser la fatigue du voyageur. Le coût cumulé croissant pour atteindre une cellule est multiplié par le taux de résistance et ajouté au coût engendré par le déplacement vers la cellule suivante.",
	"@@Cost-Back-Link_Accumulative-Cost-Resistance-Rate_tag1@@": "Il s’agit d’une version modifiée d’une formule de taux d’intérêt composé qui permet de calculer le coût apparent du déplacement à travers une cellule. Avec l'augmentation du taux de résistance, le coût des cellules qui sont visitées ultérieurement s'accroît également. Plus le taux de résistance est important, plus le coût de déplacement vers la cellule suivante augmente, lequel est ajouté pour chaque mouvement suivant. Puisque le taux de résistance est similaire à un taux composé et qu’habituellement les valeurs de coût cumulé sont très importantes, nous suggérons l’utilisation de taux de résistance faibles, tels que 0,005 ou encore inférieurs, selon les valeurs de coût cumulé.",
	"@@Cost-Back-Link_Accumulative-Cost-Resistance-Rate_tag2@@": "La valeur doit être supérieure à zéro. La capacité par défaut est limitée par le tronçon du raster en sortie.",
	"@@Cost-Back-Link_Accumulative-Cost-Resistance-Rate_tag3@@": "Vous pouvez utiliser pour ce paramètre une valeur numérique (double) ou un champ du <strong>Raster source</strong>.",
	"@@Cost-Back-Link_Capacity_tag0@@": "Définit la capacité de coût pour le voyageur pour une source. Les calculs de coût continuent pour chaque source jusqu’à ce que la capacité spécifiée soit atteinte.",
	"@@Cost-Back-Link_Capacity_tag1@@": "La valeur doit être supérieure à zéro. La capacité par défaut est limitée par le tronçon du raster en sortie.",
	"@@Cost-Back-Link_Capacity_tag2@@": "Vous pouvez utiliser pour ce paramètre une valeur numérique (double) ou un champ du <strong>Raster source</strong>.",
	"@@Cost-Back-Link_Cost-Raster_tag0@@": "Raster en entrée requis définissant le coût ou l’impédance de déplacement planimétrique à travers chaque cellule. La valeur à chaque emplacement de cellule représente le coût par unité de distance pour le déplacement à travers chaque cellule. Chaque valeur d’emplacement de cellule est multipliée par la résolution de cellule et compense également le mouvement diagonal afin d’obtenir le coût total du passage à travers la cellule.",
	"@@Cost-Back-Link_Cost-Raster_tag1@@": "Les valeurs du <strong>Raster de coût</strong> peuvent être des entiers ou des nombres à virgule flottante, mais elles ne peuvent pas être négatives ni nulles.",
	"@@Cost-Back-Link_Maximum-Distance_tag0@@": "Le seuil que les valeurs de coût cumulé ne peuvent pas dépasser. Si une distance de coût cumulé dépasse cette valeur, la valeur en sortie de l’emplacement de cellule est NoData. La distance maximale définit l’étendue pour laquelle les distances de coût cumulé sont calculées. La distance par défaut va jusqu’à l’étendue du raster en sortie.",
	"@@Cost-Back-Link_Multiplier-to-Apply-to-Costs_tag0@@": "Multiplicateur à appliquer aux valeurs de coût.",
	"@@Cost-Back-Link_Multiplier-to-Apply-to-Costs_tag1@@": "Ce paramètre permet de contrôler le mode de déplacement ou la magnitude à une source. Plus le multiplicateur est élevé, plus le coût de déplacement d’une cellule à une autre est important.",
	"@@Cost-Back-Link_Multiplier-to-Apply-to-Costs_tag2@@": "Les valeurs doivent être supérieures à zéro. La valeur par défaut est 1.",
	"@@Cost-Back-Link_Multiplier-to-Apply-to-Costs_tag3@@": "Vous pouvez utiliser pour ce paramètre une valeur numérique (double) ou un champ du <strong>Raster source</strong>.",
	"@@Cost-Back-Link_Source-Raster_tag0@@": "Le raster en entrée requis des emplacements source.",
	"@@Cost-Back-Link_Source-Raster_tag1@@": "Raster qui identifie les cellules ou les emplacements à partir desquels la distance de moindre coût cumulé est calculée pour chaque emplacement de cellule en sortie.",
	"@@Cost-Back-Link_Start-Cost_tag0@@": "Coût de départ du calcul des coûts. Ce paramètre permet de spécifier le coût fixe associé à une source. Plutôt que de commencer avec un coût égal à 0, l’algorithme de coût commence avec la valeur définie.",
	"@@Cost-Back-Link_Start-Cost_tag1@@": "La valeur doit être égale ou supérieure à zéro. La valeur par défaut est 0.",
	"@@Cost-Back-Link_Travel-Direction_tag0@@": "Définit le sens du voyageur en cas d’application du taux de résistance source et du coût de départ source.",
	"@@Cost-Back-Link_Travel-Direction_tag1@@": "<strong>À partir de la source</strong> : le taux de résistance source et le coût de départ source sont appliqués à partir de la source en entrée et en se déplaçant vers les cellules non sources. Il s’agit de l’option par défaut.",
	"@@Cost-Back-Link_Travel-Direction_tag3@@": "<strong>Vers la source</strong> : le taux de résistance source et le coût de départ source sont appliqués à partir de chaque cellule non source et en revenant vers la source en entrée.",
	"@@Cost-Back-Link_Travel-Direction_tag5@@": "Spécifiez le mot-clé <strong>À partir de la source</strong> ou <strong>Vers la source</strong>, qui est appliqué à toutes les sources, ou spécifiez un champ dans le <strong>Raster source</strong> qui contient les mots-clés permettant d’identifier le sens de déplacement pour chaque source. Ce champ doit contenir la chaîne ${FROM_SOURCE} ou ${TO_SOURCE}.",
	"@@Cost-Distance_Accumulative-Cost-Resistance-Rate_tag0@@": "Ce paramètre simule l’augmentation de l’effort pour surmonter les coûts au fur et à mesure que le coût cumulé augmente. Il permet de modéliser la fatigue du voyageur. Le coût cumulé croissant pour atteindre une cellule est multiplié par le taux de résistance et ajouté au coût engendré par le déplacement vers la cellule suivante.",
	"@@Cost-Distance_Accumulative-Cost-Resistance-Rate_tag1@@": "Il s’agit d’une version modifiée d’une formule de taux d’intérêt composé qui permet de calculer le coût apparent du déplacement à travers une cellule. Avec l'augmentation du taux de résistance, le coût des cellules qui sont visitées ultérieurement s'accroît également. Plus le taux de résistance est important, plus le coût de déplacement vers la cellule suivante augmente, lequel est ajouté pour chaque mouvement suivant. Puisque le taux de résistance est similaire à un taux composé et qu’habituellement les valeurs de coût cumulé sont très importantes, nous suggérons l’utilisation de taux de résistance faibles, tels que 0,005 ou encore inférieurs, selon les valeurs de coût cumulé.",
	"@@Cost-Distance_Accumulative-Cost-Resistance-Rate_tag2@@": "La valeur doit être supérieure à zéro. La capacité par défaut est limitée par le tronçon du raster en sortie.",
	"@@Cost-Distance_Accumulative-Cost-Resistance-Rate_tag3@@": "Vous pouvez utiliser pour ce paramètre une valeur numérique (double) ou un champ du <strong>Raster source</strong>.",
	"@@Cost-Distance_Capacity_tag0@@": "Définit la capacité de coût pour le voyageur pour une source. Les calculs de coût continuent pour chaque source jusqu’à ce que la capacité spécifiée soit atteinte.",
	"@@Cost-Distance_Capacity_tag1@@": "La valeur doit être supérieure à zéro. La capacité par défaut est limitée par le tronçon du raster en sortie.",
	"@@Cost-Distance_Capacity_tag2@@": "Vous pouvez utiliser pour ce paramètre une valeur numérique (double) ou un champ du <strong>Raster source</strong>.",
	"@@Cost-Distance_Cost-Raster_tag0@@": "Raster en entrée requis définissant le coût ou l’impédance de déplacement planimétrique à travers chaque cellule. La valeur à chaque emplacement de cellule représente le coût par unité de distance pour le déplacement à travers chaque cellule. Chaque valeur d’emplacement de cellule est multipliée par la résolution de cellule et compense également le mouvement diagonal afin d’obtenir le coût total du passage à travers la cellule.",
	"@@Cost-Distance_Cost-Raster_tag1@@": "Les valeurs du <strong>Raster de coût</strong> peuvent être des entiers ou des nombres à virgule flottante, mais elles ne peuvent pas être négatives ni nulles.",
	"@@Cost-Distance_Maximum-Distance_tag0@@": "Le seuil que les valeurs de coût cumulé ne peuvent pas dépasser. Si une distance de coût cumulé dépasse cette valeur, la valeur en sortie de l’emplacement de cellule est NoData. La distance maximale définit l’étendue pour laquelle les distances de coût cumulé sont calculées. La distance par défaut va jusqu’à l’étendue du raster en sortie.",
	"@@Cost-Distance_Multiplier-to-Apply-to-Costs_tag0@@": "Multiplicateur à appliquer aux valeurs de coût.",
	"@@Cost-Distance_Multiplier-to-Apply-to-Costs_tag1@@": "Ce paramètre permet de contrôler le mode de déplacement ou la magnitude à une source. Plus le multiplicateur est élevé, plus le coût de déplacement d’une cellule à une autre est important.",
	"@@Cost-Distance_Multiplier-to-Apply-to-Costs_tag2@@": "Les valeurs doivent être supérieures à zéro. La valeur par défaut est 1.",
	"@@Cost-Distance_Multiplier-to-Apply-to-Costs_tag3@@": "Vous pouvez utiliser pour ce paramètre une valeur numérique (double) ou un champ du <strong>Raster source</strong>.",
	"@@Cost-Distance_Source-Raster_tag0@@": "Le raster en entrée requis des emplacements source.",
	"@@Cost-Distance_Source-Raster_tag1@@": "Raster qui identifie les cellules ou les emplacements à partir desquels la distance de moindre coût cumulé est calculée pour chaque emplacement de cellule en sortie.",
	"@@Cost-Distance_Start-Cost_tag0@@": "Coût de départ du calcul des coûts. Ce paramètre permet de spécifier le coût fixe associé à une source. Plutôt que de commencer avec un coût égal à 0, l’algorithme de coût commence avec la valeur définie.",
	"@@Cost-Distance_Start-Cost_tag1@@": "La valeur doit être égale ou supérieure à zéro. La valeur par défaut est 0.",
	"@@Cost-Distance_Travel-Direction_tag0@@": "Définit le sens du voyageur en cas d’application du taux de résistance source et du coût de départ source.",
	"@@Cost-Distance_Travel-Direction_tag1@@": "<strong>À partir de la source</strong> : le taux de résistance source et le coût de départ source sont appliqués à partir de la source en entrée et en se déplaçant vers les cellules non sources. Il s’agit de l’option par défaut.",
	"@@Cost-Distance_Travel-Direction_tag3@@": "<strong>Vers la source</strong> : le taux de résistance source et le coût de départ source sont appliqués à partir de chaque cellule non source et en revenant vers la source en entrée.",
	"@@Cost-Distance_Travel-Direction_tag5@@": "Spécifiez le mot-clé <strong>À partir de la source</strong> ou <strong>Vers la source</strong>, qui est appliqué à toutes les sources, ou spécifiez un champ dans le <strong>Raster source</strong> qui contient les mots-clés permettant d’identifier le sens de déplacement pour chaque source. Ce champ doit contenir la chaîne ${FROM_SOURCE} ou ${TO_SOURCE}.",
	"@@Curvature_Curvature-Type_tag0@@": "Le type de courbure accentue différentes expositions de la pente. Il existe trois options de courbure :",
	"@@Curvature_Curvature-Type_tag1@@": "Planiforme : est perpendiculaire à la direction de la pente maximale. Elle affecte la convergence et la divergence de flux sur la surface.",
	"@@Curvature_Curvature-Type_tag2@@": "Longitudinale : est parallèle à la pente et indique la direction de la pente maximale. Elle affecte l'accélération et la décélération de flux sur la surface.",
	"@@Curvature_Curvature-Type_tag3@@": "Standard : associe les courbures de type <strong>Profil</strong> et <strong>Planiforme</strong>.",
	"@@Curvature_DEM_tag0@@": "Raster de modèle numérique de terrain (MNT).",
	"@@Curvature_Z-Factor_tag0@@": "Le facteur z ajuste les unités de mesure des unités z lorsqu'elles sont différentes des unités x,y de la surface en entrée. Si les unités x,y et les unités z utilisent les mêmes unités de mesure, le facteur z doit être égal à 1. Les valeurs z de la surface en entrée sont multipliées par le facteur z lors du calcul de la surface finale en sortie. Par exemple, si l'unité z est exprimée en pieds et que les unités x,y sont exprimées en mètres, vous devez utiliser un facteur z égal à 0,3048 pour effectuer la conversion pieds/mètres (1 pied = 0,3048 mètre).",
	"@@Divide_Cellsize-Type_tag0@@": "Choisissez la taille de cellule à utiliser dans le raster en sortie. Si les tailles des cellules en entrée sont identiques, toutes les options donnent les mêmes résultats.",
	"@@Divide_Cellsize-Type_tag1@@": "Premier de : utilise la première taille de cellule des rasters en entrée.",
	"@@Divide_Cellsize-Type_tag2@@": "Dernier de : utilise la dernière taille de cellule des rasters en entrée.",
	"@@Divide_Cellsize-Type_tag3@@": "Max de : utilise la plus grande taille de cellule de tous les rasters en entrée. Il s’agit de l’option par défaut.",
	"@@Divide_Cellsize-Type_tag4@@": "Moyenne de : utilise la taille de cellule moyenne de tous les rasters en entrée.",
	"@@Divide_Cellsize-Type_tag5@@": "Mini de : utilise la plus petite taille de cellule de tous les rasters en entrée.",
	"@@Divide_Extent-Type_tag0@@": "Sélectionnez l’étendue à utiliser dans le raster en sortie.",
	"@@Divide_Extent-Type_tag1@@": "Premier de : utilise l’étendue du premier raster en entrée pour déterminer l’étendue de traitement.",
	"@@Divide_Extent-Type_tag2@@": "Intersection de : utilise l’étendue des pixels superposés pour déterminer l’étendue de traitement. Il s’agit de l’option par défaut.",
	"@@Divide_Extent-Type_tag3@@": "Dernier de : utilise l’étendue du dernier raster en entrée pour déterminer l’étendue de traitement.",
	"@@Divide_Extent-Type_tag4@@": "Union de : utilise l’étendue de tous les rasters pour déterminer l’étendue de traitement.",
	"@@Divide_Raster_tag0@@": "Entrée dont la valeur est divisée par la deuxième entrée.",
	"@@Divide_Raster_tag1@@": "Un nombre peut être utilisé en entrée pour ce paramètre, à condition qu’un raster soit spécifié pour ${Raster2}.",
	"@@Divide_Raster2_tag0@@": "Entrée par laquelle est divisée la valeur de la première entrée.",
	"@@Divide_Raster2_tag1@@": "Un nombre peut être utilisé en entrée pour ce paramètre, à condition qu’un raster soit spécifié pour ${Raster}.",
	"@@Elevation-Void-Fill_DEM_tag0@@": "DEM en entrée.",
	"@@Elevation-Void-Fill_Max-Void-Width_tag0@@": "La valeur de largeur de vide maximale est utilisée pour préciser la taille de vide la plus importante que vous souhaitez remplir. Si la largeur ou la hauteur de l'emprise autour du vide est plus grande que la valeur de largeur de vide maximale, le vide n'est pas rempli. Les unités de ce paramètre sont identiques à celles utilisées dans le système de référence spatiale de vos données.",
	"@@Elevation-Void-Fill_Max-Void-Width_tag1@@": "Si ce paramètre n’est pas renseigné ou a la valeur ${0}, aucune largeur maximale n’est utilisée et tous les vides sont remplis. La valeur ${-1} signifie qu’aucun remplissage des vides n’a lieu.",
	"@@Elevation-Void-Fill_Short-Range-IDW-Radius_tag0@@": "Le rayon de recherche maximum qui sera utilisé pour le remplissage des vides. Un vide plus éloigné, par rapport à n’importe quel pixel valide, que cette valeur seuil restera vide. Les unités de ce paramètre sont identiques à celles utilisées dans le système de référence spatiale de vos données.",
	"@@Elevation-Void-Fill_Short-Range-IDW-Radius_tag1@@": "Si la valeur de ce paramètre est non renseignée, ${0}, ou ${-1} ce paramètre n’est pas utilisé.",
	"@@Equal-to_Cellsize-Type_tag0@@": "Choisissez la taille de cellule à utiliser dans le raster en sortie. Si les tailles des cellules en entrée sont identiques, toutes les options donnent les mêmes résultats.",
	"@@Equal-to_Cellsize-Type_tag1@@": "Premier de : utilise la première taille de cellule des rasters en entrée.",
	"@@Equal-to_Cellsize-Type_tag2@@": "Dernier de : utilise la dernière taille de cellule des rasters en entrée.",
	"@@Equal-to_Cellsize-Type_tag3@@": "Max de : utilise la plus grande taille de cellule de tous les rasters en entrée. Il s’agit de l’option par défaut.",
	"@@Equal-to_Cellsize-Type_tag4@@": "Moyenne de : utilise la taille de cellule moyenne de tous les rasters en entrée.",
	"@@Equal-to_Cellsize-Type_tag5@@": "Mini de : utilise la plus petite taille de cellule de tous les rasters en entrée.",
	"@@Equal-to_Extent-Type_tag0@@": "Sélectionnez l’étendue à utiliser dans le raster en sortie.",
	"@@Equal-to_Extent-Type_tag1@@": "Premier de : utilise l’étendue du premier raster en entrée pour déterminer l’étendue de traitement.",
	"@@Equal-to_Extent-Type_tag2@@": "Intersection de : utilise l’étendue des pixels superposés pour déterminer l’étendue de traitement. Il s’agit de l’option par défaut.",
	"@@Equal-to_Extent-Type_tag3@@": "Dernier de : utilise l’étendue du dernier raster en entrée pour déterminer l’étendue de traitement.",
	"@@Equal-to_Extent-Type_tag4@@": "Union de : utilise l’étendue de tous les rasters pour déterminer l’étendue de traitement.",
	"@@Equal-to_Raster_tag0@@": "Entrée à comparer à la seconde entrée pour vérifier l'égalité des deux entrées.",
	"@@Equal-to_Raster_tag1@@": "Une valeur constante peut être utilisée en entrée pour ce paramètre, à condition qu’un raster soit spécifié pour l’autre paramètre.",
	"@@Equal-to_Raster2_tag0@@": "Entrée à comparer à la première entrée pour vérifier l'égalité des deux entrées.",
	"@@Equal-to_Raster2_tag1@@": "Une valeur constante peut être utilisée en entrée pour ce paramètre, à condition qu’un raster soit spécifié pour l’autre paramètre.",
	"@@Euclidean-Allocation_Cellsize_tag0@@": "Taille des cellules qui sera utilisée pour la création du raster en sortie.",
	"@@Euclidean-Allocation_Cellsize_tag1@@": "Si la taille de cellule a été explicitement définie dans <strong>Environnements d’analyse</strong>, il s’agit de la taille de cellule par défaut. Si elle n’a pas été définie, la taille de cellule en sortie est identique à celle du <strong>Raster source</strong>.",
	"@@Euclidean-Allocation_Distance-Method_tag0@@": "Détermine si la distance doit être calculée avec une méthode plane (Terre plate) ou géodésique (ellipsoïde).",
	"@@Euclidean-Allocation_Distance-Method_tag1@@": "Géodésique : ligne la plus courte entre deux points d’un sphéroïde (ellipsoïde) sur la surface de la Terre. Les résultats ne changent donc pas quelle que soit la projection en entrée ou en sortie. Vous pouvez utiliser une ligne géodésique si vous souhaitez déterminer la distance la plus courte entre deux villes pour la trajectoire de vol d’un avion. On parle également de « ligne de grand cercle » si elle repose sur une sphère plutôt qu'une ellipsoïde.",
	"@@Euclidean-Allocation_Distance-Method_tag2@@": "Plane : la mesure plane utilise des mathématiques cartésiennes en 2D pour calculer la longueur et la surface. Cette option est uniquement disponible lorsque les mesures sont effectuées dans un système de coordonnées projetées. Le plan 2D de ce système de coordonnées est alors utilisé comme base des mesures.",
	"@@Euclidean-Allocation_Maximum-Distance_tag0@@": "Définit la distance de seuil prise en compte pour estimer la source la plus proche. Si la distance par rapport à la source la plus proche dépasse ce seuil, la sortie de cette cellule prend la valeur ${NoData}.",
	"@@Euclidean-Allocation_Maximum-Distance_tag1@@": "La distance par défaut va jusqu’à l’étendue du raster en sortie.",
	"@@Euclidean-Allocation_Raster-Barriers_tag0@@": "Raster qui définit les interruptions.",
	"@@Euclidean-Allocation_Raster-Barriers_tag1@@": "Le jeu de données doit contenir une valeur ${NoData} lorsqu’il n’y a pas d’interruption. Les interruptions sont représentées par des valeurs valides, y compris zéro.",
	"@@Euclidean-Allocation_Raster-Barriers_tag2@@": "Les interruptions peuvent être définies par un entier ou un raster à virgule flottante.",
	"@@Euclidean-Allocation_Source-Field_tag0@@": "Champ permettant d’attribuer des valeurs aux emplacements sources. Il doit être de type entier. Si le <strong>Raster de valeur</strong> a été défini, les valeurs dans cette entrée sont prioritaires sur tout paramètre du <strong>Champ source</strong>.",
	"@@Euclidean-Allocation_Source-Raster_tag0@@": "Raster en entrée requis identifiant les emplacements source. Détermine, pour chaque cellule de la sortie, la source la plus proche en fonction de la distance euclidienne.",
	"@@Euclidean-Allocation_Source-Raster_tag1@@": "Le type en entrée peut être un entier ou un nombre à virgule flottante.",
	"@@Euclidean-Allocation_Value-Raster_tag0@@": "Raster d’entiers en entrée qui identifie les valeurs de zone à utiliser pour chaque emplacement source en entrée. Pour chaque cellule d’emplacement source, la valeur définie par le <strong>Raster de valeur</strong> est attribuée à toutes les cellules allouées à l’emplacement source pour le calcul. Le <strong>Raster de valeur</strong> est prioritaire sur tout paramètre du <strong>Champ source</strong>.",
	"@@Euclidean-Direction_Cellsize_tag0@@": "Taille des cellules qui sera utilisée pour la création du raster en sortie.",
	"@@Euclidean-Direction_Cellsize_tag1@@": "Si la taille de cellule a été explicitement définie dans <strong>Environnements d’analyse</strong>, il s’agit de la taille de cellule par défaut. Si elle n’a pas été définie, la taille de cellule en sortie est identique à celle du <strong>Raster source</strong>.",
	"@@Euclidean-Direction_Distance-Method_tag0@@": "Détermine si la distance doit être calculée avec une méthode plane (Terre plate) ou géodésique (ellipsoïde).",
	"@@Euclidean-Direction_Distance-Method_tag1@@": "Géodésique : ligne la plus courte entre deux points d’un sphéroïde (ellipsoïde) sur la surface de la Terre. Les résultats ne changent donc pas quelle que soit la projection en entrée ou en sortie. Vous pouvez utiliser une ligne géodésique si vous souhaitez déterminer la distance la plus courte entre deux villes pour la trajectoire de vol d’un avion. On parle également de « ligne de grand cercle » si elle repose sur une sphère plutôt qu'une ellipsoïde.",
	"@@Euclidean-Direction_Distance-Method_tag2@@": "Plane : la mesure plane utilise des mathématiques cartésiennes en 2D pour calculer la longueur et la surface. Cette option est uniquement disponible lorsque les mesures sont effectuées dans un système de coordonnées projetées. Le plan 2D de ce système de coordonnées est alors utilisé comme base des mesures.",
	"@@Euclidean-Direction_Maximum-Distance_tag0@@": "Définit la distance de seuil prise en compte pour estimer la direction par rapport à la source la plus proche. Si la distance par rapport à la source la plus proche dépasse ce seuil, la sortie de cette cellule prend la valeur ${NoData}.",
	"@@Euclidean-Direction_Maximum-Distance_tag1@@": "La distance par défaut va jusqu’à l’étendue du raster en sortie.",
	"@@Euclidean-Direction_Raster-Barriers_tag0@@": "Raster qui définit les interruptions.",
	"@@Euclidean-Direction_Raster-Barriers_tag1@@": "Le jeu de données doit contenir une valeur NoData lorsqu’il n’y a pas d’interruption. Les interruptions sont représentées par des valeurs valides, y compris zéro.",
	"@@Euclidean-Direction_Raster-Barriers_tag2@@": "Les interruptions peuvent être définies par un entier ou un raster à virgule flottante.",
	"@@Euclidean-Direction_Source-Raster_tag0@@": "Raster en entrée requis qui identifie les cellules ou les emplacements par rapport auxquels la direction euclidienne est calculée pour chaque emplacement de cellule en sortie.",
	"@@Euclidean-Direction_Source-Raster_tag1@@": "Le type en entrée peut être un entier ou un nombre à virgule flottante.",
	"@@Euclidean-Distance_Cellsize_tag0@@": "Taille des cellules qui sera utilisée pour la création du raster en sortie.",
	"@@Euclidean-Distance_Cellsize_tag1@@": "Si la taille de cellule a été explicitement définie dans <strong>Environnements d’analyse</strong>, il s’agit de la taille de cellule par défaut. Si elle n’a pas été définie, la taille de cellule en sortie est identique à celle du <strong>Raster source</strong>.",
	"@@Euclidean-Distance_Distance-Method_tag0@@": "Détermine si la distance doit être calculée avec une méthode plane (Terre plate) ou géodésique (ellipsoïde).",
	"@@Euclidean-Distance_Distance-Method_tag1@@": "Géodésique : ligne la plus courte entre deux points d’un sphéroïde (ellipsoïde) sur la surface de la Terre. Les résultats ne changent donc pas quelle que soit la projection en entrée ou en sortie. Vous pouvez utiliser une ligne géodésique si vous souhaitez déterminer la distance la plus courte entre deux villes pour la trajectoire de vol d’un avion. On parle également de « ligne de grand cercle » si elle repose sur une sphère plutôt qu'une ellipsoïde.",
	"@@Euclidean-Distance_Distance-Method_tag2@@": "Plane : la mesure plane utilise des mathématiques cartésiennes en 2D pour calculer la longueur et la surface. Cette option est uniquement disponible lorsque les mesures sont effectuées dans un système de coordonnées projetées. Le plan 2D de ce système de coordonnées est alors utilisé comme base des mesures.",
	"@@Euclidean-Distance_Maximum-Distance_tag0@@": "Seuil que les valeurs de distance cumulée ne peuvent pas dépasser. Si une distance euclidienne cumulée dépasse cette valeur, la valeur en sortie de l’emplacement de cellule est NoData.",
	"@@Euclidean-Distance_Maximum-Distance_tag1@@": "La distance par défaut va jusqu’à l’étendue du raster en sortie.",
	"@@Euclidean-Distance_Raster-Barriers_tag0@@": "Raster qui définit les interruptions.",
	"@@Euclidean-Distance_Raster-Barriers_tag1@@": "Le jeu de données doit contenir une valeur ${NoData} lorsqu’il n’y a pas d’interruption. Les interruptions sont représentées par des valeurs valides, y compris zéro.",
	"@@Euclidean-Distance_Raster-Barriers_tag2@@": "Les interruptions peuvent être définies par un entier ou un raster à virgule flottante.",
	"@@Euclidean-Distance_Source-Raster_tag0@@": "Le raster en entrée requis qui identifie les cellules ou les emplacements par rapport auxquels la distance euclidienne est calculée pour chaque emplacement de cellule en sortie.",
	"@@Euclidean-Distance_Source-Raster_tag1@@": "Le type en entrée peut être un entier ou un nombre à virgule flottante.",
	"@@Exp_Cellsize-Type_tag0@@": "Choisissez la taille de cellule à utiliser dans le raster en sortie. Si les tailles des cellules en entrée sont identiques, toutes les options donnent les mêmes résultats.",
	"@@Exp_Cellsize-Type_tag1@@": "Premier de : utilise la première taille de cellule des rasters en entrée.",
	"@@Exp_Cellsize-Type_tag2@@": "Dernier de : utilise la dernière taille de cellule des rasters en entrée.",
	"@@Exp_Cellsize-Type_tag3@@": "Max de : utilise la plus grande taille de cellule de tous les rasters en entrée. Il s’agit de l’option par défaut.",
	"@@Exp_Cellsize-Type_tag4@@": "Moyenne de : utilise la taille de cellule moyenne de tous les rasters en entrée.",
	"@@Exp_Cellsize-Type_tag5@@": "Mini de : utilise la plus petite taille de cellule de tous les rasters en entrée.",
	"@@Exp_Extent-Type_tag0@@": "Sélectionnez l’étendue à utiliser dans le raster en sortie.",
	"@@Exp_Extent-Type_tag1@@": "Premier de : utilise l’étendue du premier raster en entrée pour déterminer l’étendue de traitement.",
	"@@Exp_Extent-Type_tag2@@": "Intersection de : utilise l’étendue des pixels superposés pour déterminer l’étendue de traitement. Il s’agit de l’option par défaut.",
	"@@Exp_Extent-Type_tag3@@": "Dernier de : utilise l’étendue du dernier raster en entrée pour déterminer l’étendue de traitement.",
	"@@Exp_Extent-Type_tag4@@": "Union de : utilise l’étendue de tous les rasters pour déterminer l’étendue de traitement.",
	"@@Exp_Raster_tag0@@": "Valeurs en entrée pour lesquelles on calcule la base e exponentielle.",
	"@@Exp10_Cellsize-Type_tag0@@": "Choisissez la taille de cellule à utiliser dans le raster en sortie. Si les tailles des cellules en entrée sont identiques, toutes les options donnent les mêmes résultats.",
	"@@Exp10_Cellsize-Type_tag1@@": "Premier de : utilise la première taille de cellule des rasters en entrée.",
	"@@Exp10_Cellsize-Type_tag2@@": "Dernier de : utilise la dernière taille de cellule des rasters en entrée.",
	"@@Exp10_Cellsize-Type_tag3@@": "Max de : utilise la plus grande taille de cellule de tous les rasters en entrée. Il s’agit de l’option par défaut.",
	"@@Exp10_Cellsize-Type_tag4@@": "Moyenne de : utilise la taille de cellule moyenne de tous les rasters en entrée.",
	"@@Exp10_Cellsize-Type_tag5@@": "Mini de : utilise la plus petite taille de cellule de tous les rasters en entrée.",
	"@@Exp10_Extent-Type_tag0@@": "Sélectionnez l’étendue à utiliser dans le raster en sortie.",
	"@@Exp10_Extent-Type_tag1@@": "Premier de : utilise l’étendue du premier raster en entrée pour déterminer l’étendue de traitement.",
	"@@Exp10_Extent-Type_tag2@@": "Intersection de : utilise l’étendue des pixels superposés pour déterminer l’étendue de traitement. Il s’agit de l’option par défaut.",
	"@@Exp10_Extent-Type_tag3@@": "Dernier de : utilise l’étendue du dernier raster en entrée pour déterminer l’étendue de traitement.",
	"@@Exp10_Extent-Type_tag4@@": "Union de : utilise l’étendue de tous les rasters pour déterminer l’étendue de traitement.",
	"@@Exp10_Raster_tag0@@": "Valeurs en entrée pour lesquelles on calcule la base 10 exponentielle.",
	"@@Exp2_Cellsize-Type_tag0@@": "Choisissez la taille de cellule à utiliser dans le raster en sortie. Si les tailles des cellules en entrée sont identiques, toutes les options donnent les mêmes résultats.",
	"@@Exp2_Cellsize-Type_tag1@@": "Premier de : utilise la première taille de cellule des rasters en entrée.",
	"@@Exp2_Cellsize-Type_tag2@@": "Dernier de : utilise la dernière taille de cellule des rasters en entrée.",
	"@@Exp2_Cellsize-Type_tag3@@": "Max de : utilise la plus grande taille de cellule de tous les rasters en entrée. Il s’agit de l’option par défaut.",
	"@@Exp2_Cellsize-Type_tag4@@": "Moyenne de : utilise la taille de cellule moyenne de tous les rasters en entrée.",
	"@@Exp2_Cellsize-Type_tag5@@": "Mini de : utilise la plus petite taille de cellule de tous les rasters en entrée.",
	"@@Exp2_Extent-Type_tag0@@": "Sélectionnez l’étendue à utiliser dans le raster en sortie.",
	"@@Exp2_Extent-Type_tag1@@": "Premier de : utilise l’étendue du premier raster en entrée pour déterminer l’étendue de traitement.",
	"@@Exp2_Extent-Type_tag2@@": "Intersection de : utilise l’étendue des pixels superposés pour déterminer l’étendue de traitement. Il s’agit de l’option par défaut.",
	"@@Exp2_Extent-Type_tag3@@": "Dernier de : utilise l’étendue du dernier raster en entrée pour déterminer l’étendue de traitement.",
	"@@Exp2_Extent-Type_tag4@@": "Union de : utilise l’étendue de tous les rasters pour déterminer l’étendue de traitement.",
	"@@Exp2_Raster_tag0@@": "Valeurs en entrée pour lesquelles on calcule la base 2 exponentielle.",
	"@@Extract-Bands_Band_tag0@@": "Sélectionnez les bandes à extraire dans une liste basée sur l’option utilisée pour le paramètre <strong>Méthode</strong>.",
	"@@Extract-Bands_Combination_tag0@@": "Combinaison de bandes ou ordre des bandes. La liste de sélection dépend de l’option <strong>Méthode</strong> spécifiée. Par exemple, si la <strong>Méthode</strong> choisie est <strong>Noms des bandes</strong>, vous pouvez sélectionner une combinaison Bleu, Vert et Rouge pour extraire une image aux couleurs naturelles.",
	"@@Extract-Bands_Method_tag0@@": "Sélectionnez l’une des méthodes suivantes pour extraire les canaux :",
	"@@Extract-Bands_Method_tag1@@": "<strong>Identifiants des bandes</strong> : désignation ou numéro de bande qui est unique pour chaque capteur. Ils peuvent être identiques aux valeurs de l’option <strong>Noms des bandes</strong>.",
	"@@Extract-Bands_Method_tag4@@": "<strong>Noms des bandes</strong> : utilise le nom de la bande représentant l’intervalle de longueur d’onde sur le spectre électromagnétique (Rouge, Proche infrarouge, Infrarouge thermique, par exemple). Le nom de la bande est également désigné comme l’identifiant de numéro de bande.",
	"@@Extract-Bands_Method_tag6@@": "<strong>Longueurs d’ondes des bandes</strong> : longueur d’onde sur le spectre électromagnétique.",
	"@@Extract-Bands_Missing-Band-Action_tag0@@": "Indiquez l’action qui va se produire lorsqu’un canal au sein de la liste des canaux à extraire n’est pas disponible.",
	"@@Extract-Bands_Missing-Band-Action_tag1@@": "<strong>Meilleur résultat</strong> : Recherche la meilleure bande disponible à utiliser à la place de la bande manquante en fonction de la longueur d’onde, pour que la fonction n’échoue pas",
	"@@Extract-Bands_Missing-Band-Action_tag3@@": "<strong>Échec</strong> : si, dans le jeu de données en entrée, l’une des bandes spécifiées est absente dans le paramètre </strong>Bande<strong>, la fonction échoue.",
	"@@Extract-Bands_Raster_tag0@@": "Le produit raster duquel le ou les canaux seront extraits.",
	"@@Fill_Raster_tag0@@": "Raster d’altitude monocanal.",
	"@@Fill_Z-Limit_tag0@@": "La différence d’altitude maximale entre une cuvette et le point d’écoulement à remplir.",
	"@@Fill_Z-Limit_tag1@@": "Si aucune valeur n'est indiquée pour ce paramètre, toutes les cuvettes seront remplies, quelle que soit la profondeur.",
	"@@Fill_Z-Limit_tag2@@": "La valeur de <strong>Limite Z</strong> doit être supérieure à zéro.",
	"@@Float_Cellsize-Type_tag0@@": "Choisissez la taille de cellule à utiliser dans le raster en sortie. Si les tailles des cellules en entrée sont identiques, toutes les options donnent les mêmes résultats.",
	"@@Float_Cellsize-Type_tag1@@": "Premier de : utilise la première taille de cellule des rasters en entrée.",
	"@@Float_Cellsize-Type_tag2@@": "Dernier de : utilise la dernière taille de cellule des rasters en entrée.",
	"@@Float_Cellsize-Type_tag3@@": "Max de : utilise la plus grande taille de cellule de tous les rasters en entrée. Il s’agit de l’option par défaut.",
	"@@Float_Cellsize-Type_tag4@@": "Moyenne de : utilise la taille de cellule moyenne de tous les rasters en entrée.",
	"@@Float_Cellsize-Type_tag5@@": "Mini de : utilise la plus petite taille de cellule de tous les rasters en entrée.",
	"@@Float_Extent-Type_tag0@@": "Sélectionnez l’étendue à utiliser dans le raster en sortie.",
	"@@Float_Extent-Type_tag1@@": "Premier de : utilise l’étendue du premier raster en entrée pour déterminer l’étendue de traitement.",
	"@@Float_Extent-Type_tag2@@": "Intersection de : utilise l’étendue des pixels superposés pour déterminer l’étendue de traitement. Il s’agit de l’option par défaut.",
	"@@Float_Extent-Type_tag3@@": "Dernier de : utilise l’étendue du dernier raster en entrée pour déterminer l’étendue de traitement.",
	"@@Float_Extent-Type_tag4@@": "Union de : utilise l’étendue de tous les rasters pour déterminer l’étendue de traitement.",
	"@@Float_Raster_tag0@@": "Raster en entrée à convertir en virgule flottante.",
	"@@Flow-Accumulation_Flow-Direction-Raster_tag0@@": "Raster en entrée qui montre la direction du flux sortant de chaque cellule.",
	"@@Flow-Accumulation_Flow-Direction-Raster_tag1@@": "Le raster de direction de flux peut être créé en exécutant la fonction <strong>Direction de flux</strong>.",
	"@@Flow-Accumulation_Flow-Direction-Type_tag0@@": "Définit le type de raster de direction de flux en entrée.",
	"@@Flow-Accumulation_Flow-Direction-Type_tag1@@": "<strong>D8</strong> : le raster de direction de flux en entrée est de type D8. Il s’agit de l’option par défaut.",
	"@@Flow-Accumulation_Flow-Direction-Type_tag3@@": "<strong>DINF</strong> : le raster de direction de flux en entrée est de type D-Infinity (DINF).",
	"@@Flow-Accumulation_Flow-Direction-Type_tag5@@": "<strong>MFD</strong> : le raster de direction de flux en entrée est de type Multi Flow Direction (MFD).",
	"@@Flow-Accumulation_Output-Data-Type_tag0@@": "Le raster d'accumulation en sortie peut être un entier ou à virgule flottante.",
	"@@Flow-Accumulation_Output-Data-Type_tag1@@": "<strong>Flottant</strong> : le raster en sortie sera de type à virgule flottante. Il s’agit de l’option par défaut.",
	"@@Flow-Accumulation_Output-Data-Type_tag3@@": "<strong>Entier</strong> : le raster en sortie sera de type entier.",
	"@@Flow-Accumulation_Weight-Raster_tag0@@": "Raster en entrée facultatif pour appliquer une pondération à chaque pixel.",
	"@@Flow-Accumulation_Weight-Raster_tag1@@": "Si aucun raster de pondération n’est spécifié, une pondération par défaut de 1 est appliquée à chaque pixel.",
	"@@Flow-Direction_Flow-Direction-Type_tag0@@": "Définit le type de raster de direction de flux en entrée.",
	"@@Flow-Direction_Flow-Direction-Type_tag1@@": "<strong>D8</strong> : le raster de direction de flux en entrée est de type D8. Il s’agit de l’option par défaut.",
	"@@Flow-Direction_Flow-Direction-Type_tag3@@": "<strong>DINF</strong> : le raster de direction de flux en entrée est de type D-Infinity (DINF).",
	"@@Flow-Direction_Flow-Direction-Type_tag5@@": "<strong>MFD</strong> : le raster de direction de flux en entrée est de type Multi Flow Direction (MFD).",
	"@@Flow-Direction_Force-all-edge-cells-to-flow-outward_tag0@@": "Indique si les pixels de tronçon s’écoulent toujours vers l’extérieur ou suivent les règles de flux normales.",
	"@@Flow-Direction_Force-all-edge-cells-to-flow-outward_tag1@@": "<strong>Non</strong> : si la pente maximale d’un pixel de segment est supérieure à zéro, la direction de flux est déterminée de la manière habituelle. Dans le cas contraire, elle sera orientée vers le segment. Les pixels qui devraient s’écouler du segment de la surface raster vers l’intérieur s’écouleront ainsi. Il s’agit de l’option par défaut.",
	"@@Flow-Direction_Force-all-edge-cells-to-flow-outward_tag3@@": "<strong>Oui</strong> : tous les pixels sur le segment du raster de surface s’écouleront vers l’extérieur à partir du raster de surface.",
	"@@Flow-Direction_Raster_tag0@@": "Raster en entrée qui représente une surface d’altitude continue.",
	"@@Flow-Distance_Distance-Type_tag0@@": "Détermine si le composant vertical ou horizontal de la distance d'écoulement est calculé.",
	"@@Flow-Distance_Distance-Type_tag1@@": "<strong>Horizontale</strong> : les calculs de distance d’écoulement représentent le composant horizontal de la distance d’écoulement à partir de chaque pixel dans le domaine vers les pixels de l’écoulement dans lequel ils transitent.",
	"@@Flow-Distance_Distance-Type_tag3@@": "<strong>Verticale</strong> : les calculs de distance d’écoulement représentent le composant vertical de la distance d’écoulement à partir de chaque pixel dans le domaine vers les pixels de l’écoulement dans lequel ils transitent. Il s’agit de l’option par défaut.",
	"@@Flow-Distance_Flow-Direction-Raster_tag0@@": "Raster en entrée qui montre la direction du flux sortant de chaque pixel.",
	"@@Flow-Distance_Flow-Direction-Raster_tag1@@": "Lorsqu’un raster de direction de flux est fourni, les directions de pente descendante seront limitées à celles définies par les directions de flux en entrée.",
	"@@Flow-Distance_Flow-Direction-Raster_tag2@@": "Le raster de direction de flux peut être créé à l’aide de la fonction Flow Direction (Direction de flux).",
	"@@Flow-Distance_Flow-Direction-Type_tag0@@": "Définit le type de raster de direction de flux en entrée.",
	"@@Flow-Distance_Flow-Direction-Type_tag1@@": "<strong>D8</strong> : le raster de direction de flux en entrée est de type D8. Il s’agit de l’option par défaut.",
	"@@Flow-Distance_Flow-Direction-Type_tag3@@": "<strong>DINF</strong> : le raster de direction de flux en entrée est de type D-Infinity (DINF).",
	"@@Flow-Distance_Flow-Direction-Type_tag5@@": "<strong>MFD</strong> : le raster de direction de flux en entrée est de type Multi Flow Direction (MFD).",
	"@@Flow-Distance_Statistics-Type_tag0@@": "Détermine le type de statistique utilisé pour calculer la distance d’écoulement sur plusieurs chemins de flux. Lorsqu’il n’existe qu’un seul chemin de flux depuis chaque cellule vers une cellule du flux, tous les types de statistiques produisent le même résultat.",
	"@@Flow-Distance_Statistics-Type_tag1@@": "<strong>Minimum</strong> : s’il existe plusieurs chemins de flux, la distance d’écoulement minimale est calculée. Il s’agit de l’option par défaut.",
	"@@Flow-Distance_Statistics-Type_tag3@@": "<strong>Moyenne pondérée</strong> : s’il existe plusieurs chemins de flux, une moyenne pondérée de la distance d’écoulement est calculée. La proportion de flux à partir d’une cellule vers ses cellules voisines en aval est utilisée comme pondération pour calculer la moyenne pondérée.",
	"@@Flow-Distance_Statistics-Type_tag5@@": "<strong>Maximum</strong> : s’il existe plusieurs chemins de flux, la distance d’écoulement maximale est calculée.",
	"@@Flow-Distance_Stream-Raster_tag0@@": "Raster d’écoulement en entrée représentant un réseau d’écoulement linéaire.",
	"@@Flow-Distance_Surface-Raster_tag0@@": "Raster en entrée qui représente une surface d’altitude continue.",
	"@@Flow-Length_Direction-of-Measurement_tag0@@": "Direction mesurée le long du chemin de flux.",
	"@@Flow-Length_Direction-of-Measurement_tag1@@": "<strong>En aval</strong> : calcule la distance de pente le long du chemin de flux depuis chaque cellule jusqu’à une cuvette ou un orifice sur le segment du raster.",
	"@@Flow-Length_Direction-of-Measurement_tag3@@": "<strong>En amont</strong> : calcule la distance de montée la plus grande le long du chemin de flux, depuis chaque cellule jusqu’au sommet de la ligne de partage des eaux.",
	"@@Flow-Length_Flow-Direction-Raster_tag0@@": "Raster en entrée qui montre la direction du flux sortant de chaque cellule.",
	"@@Flow-Length_Flow-Direction-Raster_tag1@@": "Le raster de direction de flux peut être créé en exécutant la fonction <strong>Direction de flux</strong>.",
	"@@Flow-Length_Weight-Raster_tag0@@": "Raster en entrée facultatif pour appliquer une pondération à chaque cellule.",
	"@@Flow-Length_Weight-Raster_tag1@@": "Si aucun raster de pondération n'est spécifié, une pondération par défaut de 1 est appliquée à chaque cellule.",
	"@@Focal-Statistics_Ignore-NoData-in-calculations_tag0@@": "Indique si les valeurs ${NoData} sont ignorées par le calcul de statistiques.",
	"@@Focal-Statistics_Ignore-NoData-in-calculations_tag1@@": "<strong>Activé</strong> : précise que si une valeur ${NoData} existe dans un voisinage, elle est ignorée. Seules les cellules du voisinage dotées de valeurs de données sont utilisées dans la détermination de la valeur en sortie. Il s’agit de l’option par défaut.",
	"@@Focal-Statistics_Ignore-NoData-in-calculations_tag3@@": "<strong>Désactivé</strong> : précise que si une cellule d’un voisinage a une valeur ${NoData}, la sortie de la cellule de traitement est ${NoData}.",
	"@@Focal-Statistics_Neighborhood_tag0@@": "La forme de la zone autour de chaque cellule utilisée pour le calcul des statistiques.",
	"@@Focal-Statistics_Neighborhood_tag1@@": "Chaque voisinage possède des paramètres supplémentaires avec lesquels définir la forme.",
	"@@Focal-Statistics_Neighborhood_tag2@@": "Anneau, Rayon intérieur, Rayon extérieur",
	"@@Focal-Statistics_Neighborhood_tag3@@": "Cercle, Rayon",
	"@@Focal-Statistics_Neighborhood_tag4@@": "Irrégulier, Largeur, Hauteur, Valeurs voisines",
	"@@Focal-Statistics_Neighborhood_tag5@@": "Rectangle, Largeur, Hauteur",
	"@@Focal-Statistics_Neighborhood_tag6@@": "Secteur, Rayon, Angle de début, Angle de fin",
	"@@Focal-Statistics_Neighborhood_tag7@@": "Pondération, Largeur, Hauteur, Valeurs voisines",
	"@@Focal-Statistics_Neighborhood_tag8@@": "Le voisinage irrégulier permet de spécifier un voisinage de forme irrégulière autour de la cellule de traitement. Utilisez la table des valeurs voisines pour définir la forme du noyau de voisinage. Une valeur nulle pour une position de cellule indique que la cellule ne fait pas partie du voisinage et ne sera pas prise en compte dans le traitement. La valeur 1 indique que la cellule correspondante est un membre du voisinage (de même que sa valeur).",
	"@@Focal-Statistics_Neighborhood_tag9@@": "Le voisinage de pondération est similaire au type de voisinage irrégulier, dans le sens où il vous permet de définir un voisinage irrégulier autour de la cellule de traitement, mais également d’appliquer des pondérations aux valeurs en entrée. Les valeurs du noyau de pondération spécifie les positions de cellule qui doivent être comprises dans le voisinage et les pondérations par lesquelles elles seront multipliées. Utilisez la valeur 0 pour exclure une cellule du traitement. Les valeurs positives, négatives et décimales peuvent être utilisées en tant que valeurs de pondération. Pour le type de voisinage de pondération, seules les statistiques Moyenne, Écart type ou Somme sont prises en charge.",
	"@@Focal-Statistics_Percentile-Value_tag0@@": "Indique le centile à calculer lorsque le type de statistique <strong>Centile</strong> est sélectionné. La valeur par défaut est de 90, soit le 90e centile.",
	"@@Focal-Statistics_Percentile-Value_tag3@@": "Les valeurs peuvent varier entre 0 et 100. Le pourcentage nul est généralement équivalent à la statistique Minimum et le pourcentage 100 est équivalent à la statistique Maximum, à l’exception près que le résultat est de type virgule flottante. Une valeur de 50 donne généralement le même résultat que la statistique Median (Médiane).",
	"@@Focal-Statistics_Raster_tag0@@": "Le raster en entrée requis.",
	"@@Focal-Statistics_Statistics-Type_tag0@@": "Type de statistique à calculer.",
	"@@Focal-Statistics_Statistics-Type_tag1@@": "<strong>Majorité</strong> : calcule la majorité (valeur la plus fréquente) des cellules du voisinage.",
	"@@Focal-Statistics_Statistics-Type_tag3@@": "<strong>Maximum</strong> : calcule le maximum (valeur la plus élevée) des cellules du voisinage.",
	"@@Focal-Statistics_Statistics-Type_tag5@@": "<strong>Moyenne</strong> : calcule la moyenne des cellules du voisinage.",
	"@@Focal-Statistics_Statistics-Type_tag7@@": "<strong>Médiane</strong> : calcule la médiane des cellules du voisinage.",
	"@@Focal-Statistics_Statistics-Type_tag9@@": "<strong>Minimum</strong> : calcule le minimum (valeur la plus faible) des cellules du voisinage.",
	"@@Focal-Statistics_Statistics-Type_tag11@@": "<strong>Minorité</strong> : calcule la minorité (valeur la moins fréquente) des cellules du voisinage.",
	"@@Focal-Statistics_Statistics-Type_tag13@@": "<strong>Centile</strong> : calcule un centile des cellules du voisinage. Vous pouvez déterminer le centile à calculer à l’aide du paramètre <strong>Valeur de centile</strong>.",
	"@@Focal-Statistics_Statistics-Type_tag17@@": "<strong>Plage</strong> : calcule la plage (différence entre la valeur la plus élevée et la valeur la plus faible) des cellules du voisinage.",
	"@@Focal-Statistics_Statistics-Type_tag19@@": "<strong>Écart type</strong> : calcule l’écart type des cellules du voisinage.",
	"@@Focal-Statistics_Statistics-Type_tag21@@": "<strong>Somme</strong> : calcule la somme (total de toutes les valeurs) des cellules du voisinage.",
	"@@Focal-Statistics_Statistics-Type_tag23@@": "<strong>Variété</strong> : calcule la variété (le nombre de valeurs uniques) des cellules du voisinage.",
	"@@Focal-Statistics_Statistics-Type_tag25@@": "Si le raster en entrée est de type virgule flottante, seuls les types de statistiques Mean (Moyenne), Maximum, Median (Médiane), Minimum, Percentile (Pourcentage), Range (Plage), Standard deviation (Écart type) et Sum (Somme) sont disponibles.",
	"@@Focal-Statistics_Statistics-Type_tag26@@": "Pour Mean (Moyenne), Median (Médiane), Percentile (Pourcentage) et Standard Deviation (Écart type), la sortie est toujours de type virgule flottante.",
	"@@Focal-Statistics_Statistics-Type_tag27@@": "Le type de statistiques par défaut est Moyenne.",
	"@@Geometric_Constant-Z_tag0@@": "Spécifiez une altitude constante à utiliser pour la fonction Géométrique.",
	"@@Geometric_DEM_tag0@@": "Spécifiez un MNT à utiliser pour la fonction Géométrique. Vous pouvez utiliser un MNE contenu dans le jeu de données mosaïque sous forme de jeu de données raster ou de jeu de données mosaïque dont la sortie est un MNE.",
	"@@Geometric_Geoid_tag0@@": "La plupart des jeux de données d’élévation, comme USGS NED ou ArcGIS Online World Elevation, sont des hauteurs orthométriques. Par conséquent, il convient de sélectionner la correction Géoïde pour assurer la compatibilité avec les coefficients polynomiaux rationnels (RPC) des satellites, qui nécessitent des hauteurs ellipsoïdales. Cochez la case <strong>Géoïde</strong> pour appliquer la correction géoïde (EGM96) aux valeurs z, sauf si votre MNE est déjà référencé par rapport à des hauteurs ellipsoïdales.",
	"@@Geometric_Method_tag0@@": "Choisissez la méthode d'altitude pour la fonction géométrique :",
	"@@Geometric_Method_tag1@@": "Utiliser la constante Z : spécifier une altitude constante pour exécuter la fonction géométrique.",
	"@@Geometric_Method_tag2@@": "Utiliser MNE : spécifier un MNE pour exécuter la fonction géométrique.",
	"@@Geometric_Raster_tag0@@": "Raster en entrée.",
	"@@Geometric_Z-Factor_tag0@@": "Les coefficients polynomiaux rationnels (RPC) de satellite sont mis à l’échelle pour les jeux de données d’élévation avec des unités verticales en mètres. Si votre élévation utilise d’autres unités verticales, saisissez un <strong>Facteur Z</strong> pour redimensionner en mètres. Par exemple, si les unités d’élévation sont en pieds, vous devez utiliser une valeur de 0,3048 pour convertir les unités d’élévation de pieds en mètres.",
	"@@Geometric_Z-Offset_tag0@@": "Valeur de base à ajouter à la valeur d'altitude dans le modèle numérique de terrain. Cela permet de compenser des valeurs d'altitude qui ne démarrent pas au niveau de la mer.",
	"@@Geometric_Tolerance_tag0@@": "Indiquez l’erreur tolérable maximale dans la fonction géométrique, en nombre de pixels. La valeur par défaut pour le raster de type NITF (NCDRD) est deux.",
	"@@Grayscale_Raster_tag0@@": "Raster en entrée.",
	"@@Grayscale_Conversion-Parameters_tag0@@": "Pondérations de chaque canal comprenant le raster en entrée.",
	"@@Greater-Than_Cellsize-Type_tag0@@": "Choisissez la taille de cellule à utiliser dans le raster en sortie. Si les tailles des cellules en entrée sont identiques, toutes les options donnent les mêmes résultats.",
	"@@Greater-Than_Cellsize-Type_tag1@@": "Premier de : utilise la première taille de cellule des rasters en entrée.",
	"@@Greater-Than_Cellsize-Type_tag2@@": "Dernier de : utilise la dernière taille de cellule des rasters en entrée.",
	"@@Greater-Than_Cellsize-Type_tag3@@": "Max de : utilise la plus grande taille de cellule de tous les rasters en entrée. Il s’agit de l’option par défaut.",
	"@@Greater-Than_Cellsize-Type_tag4@@": "Moyenne de : utilise la taille de cellule moyenne de tous les rasters en entrée.",
	"@@Greater-Than_Cellsize-Type_tag5@@": "Mini de : utilise la plus petite taille de cellule de tous les rasters en entrée.",
	"@@Greater-Than_Extent-Type_tag0@@": "Sélectionnez l’étendue à utiliser dans le raster en sortie.",
	"@@Greater-Than_Extent-Type_tag1@@": "Premier de : utilise l’étendue du premier raster en entrée pour déterminer l’étendue de traitement.",
	"@@Greater-Than_Extent-Type_tag2@@": "Intersection de : utilise l’étendue des pixels superposés pour déterminer l’étendue de traitement. Il s’agit de l’option par défaut.",
	"@@Greater-Than_Extent-Type_tag3@@": "Dernier de : utilise l’étendue du dernier raster en entrée pour déterminer l’étendue de traitement.",
	"@@Greater-Than_Extent-Type_tag4@@": "Union de : utilise l’étendue de tous les rasters pour déterminer l’étendue de traitement.",
	"@@Greater-Than_Raster_tag0@@": "Entrée testée pour déterminer si elle est supérieure à la seconde entrée.",
	"@@Greater-Than_Raster_tag1@@": "Une valeur constante peut être utilisée en entrée pour ce paramètre, à condition qu’un raster soit spécifié pour l’autre paramètre.",
	"@@Greater-Than_Raster2_tag0@@": "Entrée par rapport à laquelle la première entrée est testée pour déterminer si elle est supérieure.",
	"@@Greater-Than_Raster2_tag1@@": "Une valeur constante peut être utilisée en entrée pour ce paramètre, à condition qu’un raster soit spécifié pour l’autre paramètre.",
	"@@Greater-Than-Equal_Cellsize-Type_tag0@@": "Choisissez la taille de cellule à utiliser dans le raster en sortie. Si les tailles des cellules en entrée sont identiques, toutes les options donnent les mêmes résultats.",
	"@@Greater-Than-Equal_Cellsize-Type_tag1@@": "Premier de : utilise la première taille de cellule des rasters en entrée.",
	"@@Greater-Than-Equal_Cellsize-Type_tag2@@": "Dernier de : utilise la dernière taille de cellule des rasters en entrée.",
	"@@Greater-Than-Equal_Cellsize-Type_tag3@@": "Max de : utilise la plus grande taille de cellule de tous les rasters en entrée. Il s’agit de l’option par défaut.",
	"@@Greater-Than-Equal_Cellsize-Type_tag4@@": "Moyenne de : utilise la taille de cellule moyenne de tous les rasters en entrée.",
	"@@Greater-Than-Equal_Cellsize-Type_tag5@@": "Mini de : utilise la plus petite taille de cellule de tous les rasters en entrée.",
	"@@Greater-Than-Equal_Extent-Type_tag0@@": "Sélectionnez l’étendue à utiliser dans le raster en sortie.",
	"@@Greater-Than-Equal_Extent-Type_tag1@@": "Premier de : utilise l’étendue du premier raster en entrée pour déterminer l’étendue de traitement.",
	"@@Greater-Than-Equal_Extent-Type_tag2@@": "Intersection de : utilise l’étendue des pixels superposés pour déterminer l’étendue de traitement. Il s’agit de l’option par défaut.",
	"@@Greater-Than-Equal_Extent-Type_tag3@@": "Dernier de : utilise l’étendue du dernier raster en entrée pour déterminer l’étendue de traitement.",
	"@@Greater-Than-Equal_Extent-Type_tag4@@": "Union de : utilise l’étendue de tous les rasters pour déterminer l’étendue de traitement.",
	"@@Greater-Than-Equal_Raster_tag0@@": "Entrée testée pour déterminer si elle est supérieure ou égale à la seconde entrée.",
	"@@Greater-Than-Equal_Raster_tag1@@": "Une valeur constante peut être utilisée en entrée pour ce paramètre, à condition qu’un raster soit spécifié pour l’autre paramètre.",
	"@@Greater-Than-Equal_Raster2_tag0@@": "Entrée par rapport à laquelle la première entrée est testée pour déterminer si elle est supérieure ou égale.",
	"@@Greater-Than-Equal_Raster2_tag1@@": "Une valeur constante peut être utilisée en entrée pour ce paramètre, à condition qu’un raster soit spécifié pour l’autre paramètre.",
	"@@Heat-Index_Heat-Index-Units_tag0@@": "Unité de mesure associée au raster en sortie. Les unités disponibles en sortie sont Celsius, Fahrenheit et Kelvin.",
	"@@Heat-Index_Relative-Humidity-Raster_tag0@@": "Raster monocanal où les valeurs de pixel représentent l’humidité relative sous forme de valeur de pourcentage comprise entre 0 et 100.",
	"@@Heat-Index_Temperature-Raster_tag0@@": "Raster monocanal où les valeurs de pixel représentent la température de l’air ambiant.",
	"@@Heat-Index_Temperature-Units_tag0@@": "Unité de mesure associée au raster de température en entrée. Les unités disponibles en entrée sont Celsius, Fahrenheit et Kelvin.",
	"@@Hillshade_Altitude_tag0@@": "L'altitude représente l'angle solaire de l'altitude au-dessus de la ligne d'horizon et s'étend de 0 à 90 degrés. Une valeur de 0 degrés indique que le soleil est sur l'horizon, c'est-à-dire sur le même plan horizontal que le cadre de référence. Une valeur de 90 degrés indique que le soleil est directement au-dessus.",
	"@@Hillshade_Altitude_tag1@@": "Ce paramètre est valide uniquement si le <strong>Type d’ombrage</strong> est <strong>Traditionnel</strong>. La valeur par défaut est de 45 degrés au-dessus de l’horizon.",
	"@@Hillshade_Azimuth_tag0@@": "La propriété Azimut définit la position relative du soleil par rapport à l'horizon (en degrés). Cette position est indiquée par l'angle du soleil mesuré dans le sens horaire à partir du nord. Un azimut de 0 degré indique le Nord, l'Est est à 90 degrés, le Sud à 180 degrés et l'Ouest à 270 degrés.",
	"@@Hillshade_Azimuth_tag1@@": "Ce paramètre est valide uniquement si le <strong>Type d’ombrage</strong> est <strong>Traditionnel</strong>. La valeur par défaut est de 315 degrés, à partir du nord-ouest.",
	"@@Hillshade_Disable-default-edge-pixel-interpolation_tag0@@": "Cette option évite les artefacts de rééchantillonnage qui peuvent se produire le long des tronçons d'un raster. Les pixels en sortie le long du tronçon d'un raster ou à côté de pixels NoData sont renseignés avec NoData. Il est par conséquent recommandé d'utiliser ce paramètre uniquement avec des mosaïques d'altitude qui présentent une superposition. Lorsque des pixels superposés sont disponibles, les surfaces de NoData affichent les valeurs des pixels superposés au lieu de pixels vides.",
	"@@Hillshade_Disable-default-edge-pixel-interpolation_tag1@@": "Non coché : le rééchantillonnage bilinéaire est appliqué uniformément pour rééchantillonner votre ombrage. Utilisez cette option lorsque la mosaïque contenant vos données raster d'altitude a connu un assemblage côte à côte. Il s’agit de l’option par défaut.",
	"@@Hillshade_Disable-default-edge-pixel-interpolation_tag2@@": "Coché : le rééchantillonnage bilinéaire est utilisé au sein de l’ombrage, sauf le long des tronçons des rasters ou à côté des pixels de valeur NoData. Ces pixels sont renseignés avec NoData et affichent les valeurs de pixels superposés, ce qui réduit les effets de tronçons abrupts pouvant se produire. Utilisez cette option lorsque la mosaïque contenant vos données raster d'altitude se compose de tuiles ou d'éléments superposés.",
	"@@Hillshade_Disable-default-edge-pixel-interpolation_tag3@@": "Les résultats de la fonction peuvent dépendre des données. Si vous observez des artéfacts de limites de tuiles dans votre sortie, sélectionnez l'autre condition de la case à cocher.",
	"@@Hillshade_Hillshade-Type_tag0@@": "Contrôle la source d'éclairage de l'ombrage :",
	"@@Hillshade_Hillshade-Type_tag1@@": "Traditionnel : calcule l’ombrage à partir d’une seule direction d’éclairage. Il s’agit de l’option par défaut. Vous pouvez définir les options <strong>Azimut</strong> et <strong>Altitude</strong> pour contrôler l’emplacement de la source d’éclairage.",
	"@@Hillshade_Hillshade-Type_tag6@@": "Multidirectionnel : associe la lumière de plusieurs sources pour représenter une visualisation optimisée du terrain.",
	"@@Hillshade_Pixel-Size-Factor_tag0@@": "L’option Facteur de taille de pixel tient compte des changements d’échelle à mesure que l’utilisateur applique un zoom avant ou arrière sur l’affichage cartographique. Elle contrôle la vitesse à laquelle le <strong>Facteur Z</strong> change.",
	"@@Hillshade_Pixel-Size-Factor_tag3@@": "Ce paramètre est valide uniquement si le type de <strong>Mise à l’échelle</strong> est <strong>Ajusté</strong>. La valeur par défaut est 0,024.",
	"@@Hillshade_Pixel-Size-Power_tag0@@": "L’option Puissance de taille de pixel tient compte de l’évolution de l’altitude (ou de l’échelle) à mesure que la visionneuse applique un zoom avant ou arrière sur l’affichage cartographique. Il s’agit de l’exposant appliqué au terme de taille de pixel dans l’équation qui contrôle la fréquence à laquelle le <strong>Facteur Z</strong> change pour éviter les pertes de relief significatives.",
	"@@Hillshade_Pixel-Size-Power_tag3@@": "Ce paramètre est valide uniquement si le type de <strong>Mise à l’échelle</strong> est <strong>Ajusté</strong>. La valeur par défaut est 0,664.",
	"@@Hillshade_Raster_tag0@@": "Le jeu de données d'altitude en entrée.",
	"@@Hillshade_Scaling_tag0@@": "Le résultat ombré est mis à l'échelle dynamiquement en ajustant le facteur z grâce à l'une de deux options :",
	"@@Hillshade_Scaling_tag1@@": "Ajusté : applique un ajustement non linéaire en utilisant les valeurs de <strong>Puissance de taille de pixel</strong> et de <strong>Facteur de taille de pixel</strong> par défaut, qui tiennent compte des changements d’altitude (échelle) lors d’un zoom avant ou arrière. L’utilisation du paramètre <strong>Ajusté</strong> est recommandée en cas d’utilisation d’un jeu de données mondial.",
	"@@Hillshade_Scaling_tag8@@": "Aucun : aucune mise à l’échelle n’est appliquée. Cela est idéal pour un jeu de données raster unique qui couvre une zone locale. Cette option n'est pas recommandée pour les jeux de données mondiaux dont l'altitude varie beaucoup ou les cartes à plusieurs échelles, car elle génère un relief du MNT avec des variations restreintes à de petites échelles.",
	"@@Hillshade_Z-Factor_tag0@@": "Le facteur Z est un facteur d'échelle utilisé pour convertir les valeurs d'altitude dans deux buts :",
	"@@Hillshade_Z-Factor_tag1@@": "Convertit les unités d'altitude (telles que les mètres ou les pieds) en unités de coordonnées horizontales du jeu de données, qui peuvent être des pieds, des mètres ou des degrés,",
	"@@Hillshade_Z-Factor_tag2@@": "Ajoute une exagération verticale comme effet visuel.",
	"@@Int_Cellsize-Type_tag0@@": "Choisissez la taille de cellule à utiliser dans le raster en sortie. Si les tailles des cellules en entrée sont identiques, toutes les options donnent les mêmes résultats.",
	"@@Int_Cellsize-Type_tag1@@": "Premier de : utilise la première taille de cellule des rasters en entrée.",
	"@@Int_Cellsize-Type_tag2@@": "Dernier de : utilise la dernière taille de cellule des rasters en entrée.",
	"@@Int_Cellsize-Type_tag3@@": "Max de : utilise la plus grande taille de cellule de tous les rasters en entrée. Il s’agit de l’option par défaut.",
	"@@Int_Cellsize-Type_tag4@@": "Moyenne de : utilise la taille de cellule moyenne de tous les rasters en entrée.",
	"@@Int_Cellsize-Type_tag5@@": "Mini de : utilise la plus petite taille de cellule de tous les rasters en entrée.",
	"@@Int_Extent-Type_tag0@@": "Sélectionnez l’étendue à utiliser dans le raster en sortie.",
	"@@Int_Extent-Type_tag1@@": "Premier de : utilise l’étendue du premier raster en entrée pour déterminer l’étendue de traitement.",
	"@@Int_Extent-Type_tag2@@": "Intersection de : utilise l’étendue des pixels superposés pour déterminer l’étendue de traitement. Il s’agit de l’option par défaut.",
	"@@Int_Extent-Type_tag3@@": "Dernier de : utilise l’étendue du dernier raster en entrée pour déterminer l’étendue de traitement.",
	"@@Int_Extent-Type_tag4@@": "Union de : utilise l’étendue de tous les rasters pour déterminer l’étendue de traitement.",
	"@@Int_Raster_tag0@@": "Raster en entrée à convertir en entier.",
	"@@Interpolate-Irregular-Data_Cellsize_tag0@@": "La taille de cellule du raster en sortie est automatiquement détectée, mais vous pouvez modifier ce comportement. La taille de cellule peut être modifiée, mais l’étendue du jeu de données raster reste identique.",
	"@@Interpolate-Irregular-Data_Input-Samples_tag0@@": "Les données ponctuelles en entrée.",
	"@@Interpolate-Irregular-Data_Interpolation-Method_tag0@@": "Quatre méthodes de rééchantillonnage sont disponibles pour cette fonction :",
	"@@Interpolate-Irregular-Data_Interpolation-Method_tag1@@": "<strong>Pondération par l’inverse de la distance</strong> : détermine les valeurs des cellules via la combinaison pondérée de manière linéaire d’un ensemble de points d’échantillonnage ou de cellules. La pondération est une fonction de l’inverse de la distance à partir des cellules ou des points connus.",
	"@@Interpolate-Irregular-Data_Interpolation-Method_tag3@@": "<strong>TIN linéaire</strong> : utilise un réseau triangulé irrégulier (TIN) à partir des points centraux de chaque cellule du raster irrégulier pour interpoler une surface qui sera ensuite convertie en raster régulier.",
	"@@Interpolate-Irregular-Data_Interpolation-Method_tag5@@": "<strong>Voisin naturel</strong> : recherche le sous-ensemble d’échantillons en entrée le plus proche d’un point de requête et lui applique une pondération sur la base de surfaces proportionnelles afin d’interpoler une valeur.",
	"@@Interpolate-Irregular-Data_Interpolation-Method_tag7@@": "<strong>Voisin le plus proche</strong> : calcule la valeur du pixel grâce au pixel le plus proche. Si aucun pixel source n’existe, aucun nouveau pixel ne peut être créé dans la sortie. Il s’agit de l’option par défaut.",
	"@@Interpolate-Irregular-Data_Search-Radius_tag0@@": "Identifie le nombre de pixels à inclure pour la méthode de rééchantillonnage sélectionnée. La valeur par défaut est ${3} pixels.",
	"@@Interpolate-Irregular-Data_Value-Field_tag0@@": "Si vous sélectionnez une classe d’entités ponctuelles en entrée, vous devrez identifier le champ dans la table attributaire avec la valeur des points.",
	"@@Is-Null_Cellsize-Type_tag0@@": "Choisissez la taille de cellule à utiliser dans le raster en sortie. Si les tailles des cellules en entrée sont identiques, toutes les options donnent les mêmes résultats.",
	"@@Is-Null_Cellsize-Type_tag1@@": "Premier de : utilise la première taille de cellule des rasters en entrée.",
	"@@Is-Null_Cellsize-Type_tag2@@": "Dernier de : utilise la dernière taille de cellule des rasters en entrée.",
	"@@Is-Null_Cellsize-Type_tag3@@": "Max de : utilise la plus grande taille de cellule de tous les rasters en entrée. Il s’agit de l’option par défaut.",
	"@@Is-Null_Cellsize-Type_tag4@@": "Moyenne de : utilise la taille de cellule moyenne de tous les rasters en entrée.",
	"@@Is-Null_Cellsize-Type_tag5@@": "Mini de : utilise la plus petite taille de cellule de tous les rasters en entrée.",
	"@@Is-Null_Extent-Type_tag0@@": "Sélectionnez l’étendue à utiliser dans le raster en sortie.",
	"@@Is-Null_Extent-Type_tag1@@": "Premier de : utilise l’étendue du premier raster en entrée pour déterminer l’étendue de traitement.",
	"@@Is-Null_Extent-Type_tag2@@": "Intersection de : utilise l’étendue des pixels superposés pour déterminer l’étendue de traitement. Il s’agit de l’option par défaut.",
	"@@Is-Null_Extent-Type_tag3@@": "Dernier de : utilise l’étendue du dernier raster en entrée pour déterminer l’étendue de traitement.",
	"@@Is-Null_Extent-Type_tag4@@": "Union de : utilise l’étendue de tous les rasters pour déterminer l’étendue de traitement.",
	"@@Is-Null_Raster_tag0@@": "Raster en entrée testé pour identifier les cellules qui ont une valeur ${NoData} (nulle).",
	"@@Is-Null_Raster_tag1@@": "L'entrée peut être une valeur entière ou à virgule flottante.",
	"@@Key-Metadata_Band-Names_tag0@@": "Permet de remplacer les noms de canaux d'un raster. Il s'agit d'une chaîne séparée par une virgule représentant les noms de canaux mis à jour.",
	"@@Key-Metadata_Band-Names_tag1@@": "Ce paramètre est facultatif.",
	"@@Key-Metadata_Metadata-JSON_tag0@@": "Les métadonnées clés à injecter dans le raster sortant décrit comme une chaîne JSON représentant une collection de paires clé-valeur. Voici un exemple de chaîne JSON pouvant servir d'entrée à cette fonction. Toutes les entrées de ce paramètre doivent suivre le même format.",
	"@@Key-Metadata_Metadata-JSON_tag1@@": "Chaîne JSON représentant les métadonnées clés.",
	"@@Key-Metadata_Metadata-JSON_tag2@@": "{ \"CloudCover\": 4, \"BandProperties\":[ { \"BandName\": \"Blue\", \"WavelengthMin\": 445, \"WavelengthMax\": 516 }, { \"BandName\": \"Green\", \"WavelengthMin\": 506, \"WavelengthMax\": 595 }, ]}",
	"@@Key-Metadata_Property-Name_tag0@@": "Le nom de la propriété clé au niveau du jeu de données que vous souhaitez remplacer.",
	"@@Key-Metadata_Raster_tag0@@": "Le jeu de données raster ou la mosaïque contenant les métadonnées clés que vous souhaitez insérer ou remplacer.",
	"@@Key-Metadata_Value_tag0@@": "La valeur de remplacement de la propriété clé au niveau du jeu de données que vous souhaitez définir.",
	"@@Least-Cost-Path_Accumulative-Cost-Resistance-Rate_tag0@@": "Ce paramètre simule l’augmentation de l’effort pour surmonter les coûts au fur et à mesure que le coût cumulé augmente. Il permet de modéliser la fatigue du voyageur. Le coût cumulé croissant pour atteindre une cellule est multiplié par le taux de résistance et ajouté au coût engendré par le déplacement vers la cellule suivante.",
	"@@Least-Cost-Path_Accumulative-Cost-Resistance-Rate_tag1@@": "Il s’agit d’une version modifiée d’une formule de taux d’intérêt composé qui permet de calculer le coût apparent du déplacement à travers une cellule. Avec l'augmentation du taux de résistance, le coût des cellules qui sont visitées ultérieurement s'accroît également. Plus le taux de résistance est important, plus le coût de déplacement vers la cellule suivante augmente, lequel est ajouté pour chaque mouvement suivant. Puisque le taux de résistance est similaire à un taux composé et qu’habituellement les valeurs de coût cumulé sont très importantes, nous suggérons l’utilisation de taux de résistance faibles, tels que 0,005 ou encore inférieurs, selon les valeurs de coût cumulé.",
	"@@Least-Cost-Path_Accumulative-Cost-Resistance-Rate_tag2@@": "La valeur doit être supérieure à zéro. La capacité par défaut est limitée par le tronçon du raster en sortie.",
	"@@Least-Cost-Path_Capacity_tag0@@": "Définit la capacité de coût pour le voyageur pour une source. Les calculs de coût continuent pour chaque source jusqu’à ce que la capacité spécifiée soit atteinte.",
	"@@Least-Cost-Path_Capacity_tag1@@": "La valeur doit être supérieure à zéro. La capacité par défaut est limitée par le tronçon du raster en sortie.",
	"@@Least-Cost-Path_Cost-Raster_tag0@@": "Raster en entrée requis définissant le coût ou l’impédance de déplacement planimétrique à travers chaque cellule. La valeur à chaque emplacement de cellule représente le coût par unité de distance pour le déplacement à travers chaque cellule. Chaque valeur d’emplacement de cellule est multipliée par la résolution de cellule et compense également le mouvement diagonal afin d’obtenir le coût total du passage à travers la cellule.",
	"@@Least-Cost-Path_Cost-Raster_tag1@@": "Les valeurs du <strong>Raster de coût</strong> peuvent être des entiers ou des nombres à virgule flottante, mais elles ne peuvent pas être négatives ni nulles.",
	"@@Least-Cost-Path_Destination-Field_tag0@@": "Champ permettant d'obtenir des valeurs relatives aux emplacements de destination.",
	"@@Least-Cost-Path_Destination-Raster_tag0@@": "Raster en entrée requis identifiant les pixels à partir desquels le chemin de moindre coût est déterminé vers la source de moindre coût. Cette entrée est composée de pixels ayant des valeurs valides et les pixels restants doivent avoir la valeur ${NoData}. Les valeurs égales à 0 sont valides.",
	"@@Least-Cost-Path_Maximum-Distance_tag0@@": "Le seuil que les valeurs de coût cumulé ne peuvent pas dépasser. Si une distance de coût cumulé dépasse cette valeur, la valeur en sortie de l’emplacement de cellule est ${NoData}. La distance maximale définit l’étendue pour laquelle les distances de coût cumulé sont calculées. La distance par défaut va jusqu’à l’étendue du raster en sortie.",
	"@@Least-Cost-Path_Multiplier-to-Apply-to-Costs_tag0@@": "Ce paramètre permet de contrôler le mode de déplacement ou la magnitude à une source. Plus le multiplicateur est élevé, plus le coût de déplacement d’une cellule à une autre est important.",
	"@@Least-Cost-Path_Multiplier-to-Apply-to-Costs_tag1@@": "Les valeurs doivent être supérieures à zéro. La valeur par défaut est 1.",
	"@@Least-Cost-Path_Path-Type_tag0@@": "Mot-clé définissant la façon dont les valeurs et les zones de l'entrée de destination sont interprétées dans les calculs du chemin de coût :",
	"@@Least-Cost-Path_Path-Type_tag1@@": "<strong>Le moins coûteux</strong> : pour tous les pixels des données de destination en entrée, le chemin du moindre coût est dérivé du pixel contenant le minimum de chemins de moindre coût vers les cellules sources.",
	"@@Least-Cost-Path_Path-Type_tag3@@": "<strong>Chaque cellule</strong> : un chemin de moindre coût est déterminé pour chaque pixel avec des valeurs valides dans les données de destination en entrée, puis enregistré dans le raster en sortie. Chaque cellule des données de destination en entrée est traitée séparément et un chemin de moindre coût est déterminé pour chaque cellule de départ.",
	"@@Least-Cost-Path_Path-Type_tag5@@": "<strong>Chaque zone</strong> : un chemin de moindre coût est déterminé pour chaque zone des données de destination en entrée, puis enregistré dans le raster en sortie. Le chemin de moindre coût commence au pixel avec la pondération de distance de plus faible coût dans la zone.",
	"@@Least-Cost-Path_Source-Raster_tag0@@": "Raster en entrée requis qui identifie les cellules ou les emplacements à partir desquels la distance de moindre coût cumulé est calculée pour chaque emplacement de cellule en sortie.",
	"@@Least-Cost-Path_Start-Cost_tag0@@": "Coût de départ du calcul des coûts. Ce paramètre permet de spécifier le coût fixe associé à une source. Plutôt que de commencer avec un coût égal à 0, l’algorithme de coût commence avec la valeur définie.",
	"@@Least-Cost-Path_Start-Cost_tag1@@": "La valeur doit être égale ou supérieure à zéro. La valeur par défaut est 0.",
	"@@Least-Cost-Path_Travel-Direction_tag0@@": "Définit le sens du voyageur en cas d’application du taux de résistance source et du coût de départ source.",
	"@@Least-Cost-Path_Travel-Direction_tag1@@": "<strong>À partir de la source</strong> : le taux de résistance source et le coût de départ source sont appliqués à partir de la source en entrée et en se déplaçant vers les cellules non sources. Il s’agit de l’option par défaut.",
	"@@Least-Cost-Path_Travel-Direction_tag3@@": "<strong>Vers la source</strong> : le taux de résistance source et le coût de départ source sont appliqués à partir de chaque cellule non source et en revenant vers la source en entrée.",
	"@@Least-Cost-Path_Travel-Direction_tag5@@": "Spécifiez le mot-clé <strong>À partir de la source</strong> ou <strong>Vers la source</strong>, qui est appliqué à toutes les sources, ou spécifiez un champ dans le <strong>Raster source</strong> qui contient les mots-clés permettant d’identifier le sens de déplacement pour chaque source. Ce champ doit contenir la chaîne ${FROM_SOURCE} ou ${TO_SOURCE}.",
	"@@Less-Than_Cellsize-Type_tag0@@": "Choisissez la taille de cellule à utiliser dans le raster en sortie. Si les tailles des cellules en entrée sont identiques, toutes les options donnent les mêmes résultats.",
	"@@Less-Than_Cellsize-Type_tag1@@": "Premier de : utilise la première taille de cellule des rasters en entrée.",
	"@@Less-Than_Cellsize-Type_tag2@@": "Dernier de : utilise la dernière taille de cellule des rasters en entrée.",
	"@@Less-Than_Cellsize-Type_tag3@@": "Max de : utilise la plus grande taille de cellule de tous les rasters en entrée. Il s’agit de l’option par défaut.",
	"@@Less-Than_Cellsize-Type_tag4@@": "Moyenne de : utilise la taille de cellule moyenne de tous les rasters en entrée.",
	"@@Less-Than_Cellsize-Type_tag5@@": "Mini de : utilise la plus petite taille de cellule de tous les rasters en entrée.",
	"@@Less-Than_Extent-Type_tag0@@": "Sélectionnez l’étendue à utiliser dans le raster en sortie.",
	"@@Less-Than_Extent-Type_tag1@@": "Premier de : utilise l’étendue du premier raster en entrée pour déterminer l’étendue de traitement.",
	"@@Less-Than_Extent-Type_tag2@@": "Intersection de : utilise l’étendue des pixels superposés pour déterminer l’étendue de traitement. Il s’agit de l’option par défaut.",
	"@@Less-Than_Extent-Type_tag3@@": "Dernier de : utilise l’étendue du dernier raster en entrée pour déterminer l’étendue de traitement.",
	"@@Less-Than_Extent-Type_tag4@@": "Union de : utilise l’étendue de tous les rasters pour déterminer l’étendue de traitement.",
	"@@Less-Than_Raster_tag0@@": "Entrée testée pour déterminer si elle est inférieure à la seconde entrée.",
	"@@Less-Than_Raster_tag1@@": "Une valeur constante peut être utilisée en entrée pour ce paramètre, à condition qu’un raster soit spécifié pour l’autre paramètre.",
	"@@Less-Than_Raster2_tag0@@": "Entrée par rapport à laquelle la première entrée est testée pour déterminer si elle est inférieure.",
	"@@Less-Than_Raster2_tag1@@": "Une valeur constante peut être utilisée en entrée pour ce paramètre, à condition qu’un raster soit spécifié pour l’autre paramètre.",
	"@@Less-Than-Equal_Cellsize-Type_tag0@@": "Choisissez la taille de cellule à utiliser dans le raster en sortie. Si les tailles des cellules en entrée sont identiques, toutes les options donnent les mêmes résultats.",
	"@@Less-Than-Equal_Cellsize-Type_tag1@@": "Premier de : utilise la première taille de cellule des rasters en entrée.",
	"@@Less-Than-Equal_Cellsize-Type_tag2@@": "Dernier de : utilise la dernière taille de cellule des rasters en entrée.",
	"@@Less-Than-Equal_Cellsize-Type_tag3@@": "Max de : utilise la plus grande taille de cellule de tous les rasters en entrée. Il s’agit de l’option par défaut.",
	"@@Less-Than-Equal_Cellsize-Type_tag4@@": "Moyenne de : utilise la taille de cellule moyenne de tous les rasters en entrée.",
	"@@Less-Than-Equal_Cellsize-Type_tag5@@": "Mini de : utilise la plus petite taille de cellule de tous les rasters en entrée.",
	"@@Less-Than-Equal_Extent-Type_tag0@@": "Sélectionnez l’étendue à utiliser dans le raster en sortie.",
	"@@Less-Than-Equal_Extent-Type_tag1@@": "Premier de : utilise l’étendue du premier raster en entrée pour déterminer l’étendue de traitement.",
	"@@Less-Than-Equal_Extent-Type_tag2@@": "Intersection de : utilise l’étendue des pixels superposés pour déterminer l’étendue de traitement. Il s’agit de l’option par défaut.",
	"@@Less-Than-Equal_Extent-Type_tag3@@": "Dernier de : utilise l’étendue du dernier raster en entrée pour déterminer l’étendue de traitement.",
	"@@Less-Than-Equal_Extent-Type_tag4@@": "Union de : utilise l’étendue de tous les rasters pour déterminer l’étendue de traitement.",
	"@@Less-Than-Equal_Raster_tag0@@": "Entrée testée pour déterminer si elle est inférieure ou égale à la seconde entrée.",
	"@@Less-Than-Equal_Raster_tag1@@": "Une valeur constante peut être utilisée en entrée pour ce paramètre, à condition qu’un raster soit spécifié pour l’autre paramètre.",
	"@@Less-Than-Equal_Raster2_tag0@@": "Entrée par rapport à laquelle la première entrée est testée pour déterminer si elle est inférieure ou égale.",
	"@@Less-Than-Equal_Raster2_tag1@@": "Une valeur constante peut être utilisée en entrée pour ce paramètre, à condition qu’un raster soit spécifié pour l’autre paramètre.",
	"@@Ln_Cellsize-Type_tag0@@": "Choisissez la taille de cellule à utiliser dans le raster en sortie. Si les tailles des cellules en entrée sont identiques, toutes les options donnent les mêmes résultats.",
	"@@Ln_Cellsize-Type_tag1@@": "Premier de : utilise la première taille de cellule des rasters en entrée.",
	"@@Ln_Cellsize-Type_tag2@@": "Dernier de : utilise la dernière taille de cellule des rasters en entrée.",
	"@@Ln_Cellsize-Type_tag3@@": "Max de : utilise la plus grande taille de cellule de tous les rasters en entrée. Il s’agit de l’option par défaut.",
	"@@Ln_Cellsize-Type_tag4@@": "Moyenne de : utilise la taille de cellule moyenne de tous les rasters en entrée.",
	"@@Ln_Cellsize-Type_tag5@@": "Mini de : utilise la plus petite taille de cellule de tous les rasters en entrée.",
	"@@Ln_Extent-Type_tag0@@": "Sélectionnez l’étendue à utiliser dans le raster en sortie.",
	"@@Ln_Extent-Type_tag1@@": "Premier de : utilise l’étendue du premier raster en entrée pour déterminer l’étendue de traitement.",
	"@@Ln_Extent-Type_tag2@@": "Intersection de : utilise l’étendue des pixels superposés pour déterminer l’étendue de traitement. Il s’agit de l’option par défaut.",
	"@@Ln_Extent-Type_tag3@@": "Dernier de : utilise l’étendue du dernier raster en entrée pour déterminer l’étendue de traitement.",
	"@@Ln_Extent-Type_tag4@@": "Union de : utilise l’étendue de tous les rasters pour déterminer l’étendue de traitement.",
	"@@Ln_Raster_tag0@@": "Valeurs en entrée pour lesquelles calculer le logarithme naturel (Ln).",
	"@@Log10_Cellsize-Type_tag0@@": "Choisissez la taille de cellule à utiliser dans le raster en sortie. Si les tailles des cellules en entrée sont identiques, toutes les options donnent les mêmes résultats.",
	"@@Log10_Cellsize-Type_tag1@@": "Premier de : utilise la première taille de cellule des rasters en entrée.",
	"@@Log10_Cellsize-Type_tag2@@": "Dernier de : utilise la dernière taille de cellule des rasters en entrée.",
	"@@Log10_Cellsize-Type_tag3@@": "Max de : utilise la plus grande taille de cellule de tous les rasters en entrée. Il s’agit de l’option par défaut.",
	"@@Log10_Cellsize-Type_tag4@@": "Moyenne de : utilise la taille de cellule moyenne de tous les rasters en entrée.",
	"@@Log10_Cellsize-Type_tag5@@": "Mini de : utilise la plus petite taille de cellule de tous les rasters en entrée.",
	"@@Log10_Extent-Type_tag0@@": "Sélectionnez l’étendue à utiliser dans le raster en sortie.",
	"@@Log10_Extent-Type_tag1@@": "Premier de : utilise l’étendue du premier raster en entrée pour déterminer l’étendue de traitement.",
	"@@Log10_Extent-Type_tag2@@": "Intersection de : utilise l’étendue des pixels superposés pour déterminer l’étendue de traitement. Il s’agit de l’option par défaut.",
	"@@Log10_Extent-Type_tag3@@": "Dernier de : utilise l’étendue du dernier raster en entrée pour déterminer l’étendue de traitement.",
	"@@Log10_Extent-Type_tag4@@": "Union de : utilise l’étendue de tous les rasters pour déterminer l’étendue de traitement.",
	"@@Log10_Raster_tag0@@": "Valeurs en entrée pour lesquelles on calcule le logarithme de base 10.",
	"@@Log2_Cellsize-Type_tag0@@": "Choisissez la taille de cellule à utiliser dans le raster en sortie. Si les tailles des cellules en entrée sont identiques, toutes les options donnent les mêmes résultats.",
	"@@Log2_Cellsize-Type_tag1@@": "Premier de : utilise la première taille de cellule des rasters en entrée.",
	"@@Log2_Cellsize-Type_tag2@@": "Dernier de : utilise la dernière taille de cellule des rasters en entrée.",
	"@@Log2_Cellsize-Type_tag3@@": "Max de : utilise la plus grande taille de cellule de tous les rasters en entrée. Il s’agit de l’option par défaut.",
	"@@Log2_Cellsize-Type_tag4@@": "Moyenne de : utilise la taille de cellule moyenne de tous les rasters en entrée.",
	"@@Log2_Cellsize-Type_tag5@@": "Mini de : utilise la plus petite taille de cellule de tous les rasters en entrée.",
	"@@Log2_Extent-Type_tag0@@": "Sélectionnez l’étendue à utiliser dans le raster en sortie.",
	"@@Log2_Extent-Type_tag1@@": "Premier de : utilise l’étendue du premier raster en entrée pour déterminer l’étendue de traitement.",
	"@@Log2_Extent-Type_tag2@@": "Intersection de : utilise l’étendue des pixels superposés pour déterminer l’étendue de traitement. Il s’agit de l’option par défaut.",
	"@@Log2_Extent-Type_tag3@@": "Dernier de : utilise l’étendue du dernier raster en entrée pour déterminer l’étendue de traitement.",
	"@@Log2_Extent-Type_tag4@@": "Union de : utilise l’étendue de tous les rasters pour déterminer l’étendue de traitement.",
	"@@Log2_Raster_tag0@@": "Valeurs en entrée pour lesquelles on calcule le logarithme de base 2.",
	"@@Lookup_Field_tag0@@": "Champ contenant les valeurs souhaitées du nouveau raster.",
	"@@Lookup_Field_tag1@@": "Il doit s’agir d’un type numérique.",
	"@@Lookup_Raster_tag0@@": "Le raster en entrée contenant un champ à partir duquel vous voulez créer un raster.",
	"@@Lookup_Raster_tag1@@": "Il peut être de type entier ou à virgule flottante.",
	"@@Mask_Included-Ranges_tag0@@": "Les plages incluses peuvent être spécifiées pour chaque canal en définissant une valeur minimum et une valeur maximum ; toute valeur en dehors de cette plage renverra la valeur ${NoData}. Un pixel n’est inclus que si sa valeur est comprise dans l’une des plages spécifiées. Par conséquent, si le canal 1 a une plage de 5-10 et le canal 2 une plage de 15-20, et que la valeur de pixel pour le canal 1 est 8, ce pixel ne sera pas masqué.",
	"@@Mask_NoData-Interpretation_tag0@@": "Cela fait référence à la façon dont les <strong>Valeurs ${NoData}</strong> impactent l’image en sortie.",
	"@@Mask_NoData-Interpretation_tag3@@": "Vous pouvez choisir parmi les deux options suivantes :",
	"@@Mask_NoData-Interpretation_tag4@@": "<strong>Tous les critères</strong> : les valeurs ${NoData} que vous spécifiez pour chaque bande doivent se produire dans le même pixel pour que l’image en sortie contienne le pixel ${NoData}.",
	"@@Mask_NoData-Interpretation_tag6@@": "<strong>Certains critères</strong> : si la valeur ${NoData} que vous spécifiez se produit pour un pixel dans une bande spécifiée, ce pixel dans l’image en sortie prendra la valeur ${NoData}. Il s’agit de l’option par défaut.",
	"@@Mask_NoData-Values_tag0@@": "Les valeurs NoData peuvent être spécifiées pour chaque canal. Vous pouvez spécifier plusieurs valeurs en saisissant une liste de valeurs séparées par un espace.",
	"@@Mask_Raster_tag0@@": "Raster en entrée.",
	"@@Minus_Cellsize-Type_tag0@@": "Choisissez la taille de cellule à utiliser dans le raster en sortie. Si les tailles des cellules en entrée sont identiques, toutes les options donnent les mêmes résultats.",
	"@@Minus_Cellsize-Type_tag1@@": "Premier de : utilise la première taille de cellule des rasters en entrée.",
	"@@Minus_Cellsize-Type_tag2@@": "Dernier de : utilise la dernière taille de cellule des rasters en entrée.",
	"@@Minus_Cellsize-Type_tag3@@": "Max de : utilise la plus grande taille de cellule de tous les rasters en entrée. Il s’agit de l’option par défaut.",
	"@@Minus_Cellsize-Type_tag4@@": "Moyenne de : utilise la taille de cellule moyenne de tous les rasters en entrée.",
	"@@Minus_Cellsize-Type_tag5@@": "Mini de : utilise la plus petite taille de cellule de tous les rasters en entrée.",
	"@@Minus_Extent-Type_tag0@@": "Sélectionnez l’étendue à utiliser dans le raster en sortie.",
	"@@Minus_Extent-Type_tag1@@": "Premier de : utilise l’étendue du premier raster en entrée pour déterminer l’étendue de traitement.",
	"@@Minus_Extent-Type_tag2@@": "Intersection de : utilise l’étendue des pixels superposés pour déterminer l’étendue de traitement. Il s’agit de l’option par défaut.",
	"@@Minus_Extent-Type_tag3@@": "Dernier de : utilise l’étendue du dernier raster en entrée pour déterminer l’étendue de traitement.",
	"@@Minus_Extent-Type_tag4@@": "Union de : utilise l’étendue de tous les rasters pour déterminer l’étendue de traitement.",
	"@@Minus_Raster_tag0@@": "Entrée de laquelle soustraire les valeurs de la deuxième entrée.",
	"@@Minus_Raster_tag1@@": "Une valeur constante peut être utilisée en entrée pour ce paramètre, à condition qu’un raster soit spécifié pour l’autre paramètre.",
	"@@Minus_Raster2_tag0@@": "Valeurs en entrée à soustraire des valeurs de la première entrée.",
	"@@Minus_Raster2_tag1@@": "Une valeur constante peut être utilisée en entrée pour ce paramètre, à condition qu’un raster soit spécifié pour l’autre paramètre.",
	"@@ML-Classify_Raster_tag0@@": "Raster en entrée à classer à l’aide de l’algorithme de classification de vraisemblance maximale.",
	"@@ML-Classify_Signature-File-or-URL_tag0@@": "Fichier de signatures ${.gsg}.",
	"@@Mod_Cellsize-Type_tag0@@": "Choisissez la taille de cellule à utiliser dans le raster en sortie. Si les tailles des cellules en entrée sont identiques, toutes les options donnent les mêmes résultats.",
	"@@Mod_Cellsize-Type_tag1@@": "Premier de : utilise la première taille de cellule des rasters en entrée.",
	"@@Mod_Cellsize-Type_tag2@@": "Dernier de : utilise la dernière taille de cellule des rasters en entrée.",
	"@@Mod_Cellsize-Type_tag3@@": "Max de : utilise la plus grande taille de cellule de tous les rasters en entrée. Il s’agit de l’option par défaut.",
	"@@Mod_Cellsize-Type_tag4@@": "Moyenne de : utilise la taille de cellule moyenne de tous les rasters en entrée.",
	"@@Mod_Cellsize-Type_tag5@@": "Mini de : utilise la plus petite taille de cellule de tous les rasters en entrée.",
	"@@Mod_Extent-Type_tag0@@": "Sélectionnez l’étendue à utiliser dans le raster en sortie.",
	"@@Mod_Extent-Type_tag1@@": "Premier de : utilise l’étendue du premier raster en entrée pour déterminer l’étendue de traitement.",
	"@@Mod_Extent-Type_tag2@@": "Intersection de : utilise l’étendue des pixels superposés pour déterminer l’étendue de traitement. Il s’agit de l’option par défaut.",
	"@@Mod_Extent-Type_tag3@@": "Dernier de : utilise l’étendue du dernier raster en entrée pour déterminer l’étendue de traitement.",
	"@@Mod_Extent-Type_tag4@@": "Union de : utilise l’étendue de tous les rasters pour déterminer l’étendue de traitement.",
	"@@Mod_Raster_tag0@@": "Entrée du numérateur.",
	"@@Mod_Raster_tag1@@": "Une valeur constante peut être utilisée en entrée pour ce paramètre, à condition qu’un raster soit spécifié pour l’autre paramètre.",
	"@@Mod_Raster2_tag0@@": "Entrée du dénominateur.",
	"@@Mod_Raster2_tag1@@": "Une valeur constante peut être utilisée en entrée pour ce paramètre, à condition qu’un raster soit spécifié pour l’autre paramètre.",
	"@@Mosaic-Rasters_Operation_tag0@@": "Résout les conflits lorsque des parties de deux images ou plus se superposent. Voici quelques-unes des options disponibles :",
	"@@Mosaic-Rasters_Operation_tag1@@": "<strong>Fusionner</strong> : calculer et afficher une moyenne des pixels superposés en attribuant une pondération plus élevée aux pixels les plus proches des images voisines afin de générer une image plus lisse. Il s’agit de l’option par défaut.",
	"@@Mosaic-Rasters_Operation_tag3@@": "<strong>Premier</strong> : afficher les pixels de la première image dans la liste des images qui se superposent à une zone donnée.",
	"@@Mosaic-Rasters_Operation_tag5@@": "<strong>Dernier</strong> : afficher les pixels de la dernière image dans la liste des images qui se superposent à une zone donnée.",
	"@@Mosaic-Rasters_Operation_tag7@@": "<strong>Max</strong> : afficher la valeur de pixel la plus élevée de toutes les couches superposées. Avec cette option, rien ne garantit que vous affichiez les pixels d’une seule image dans la zone de superposition. Il s’agit plutôt d’une combinaison des couches potentielles.",
	"@@Mosaic-Rasters_Operation_tag9@@": "<strong>Moyenne</strong> : calculer et afficher une moyenne des pixels superposés.",
	"@@Mosaic-Rasters_Operation_tag11@@": "<strong>Min</strong> : afficher la valeur de pixel la plus faible de toutes les couches superposées. Avec cette option, rien ne garantit que vous affichiez les pixels d’une seule image dans la zone de superposition. Il s’agit plutôt d’une combinaison des couches potentielles.",
	"@@Mosaic-Rasters_Rasters_tag0@@": "Sélectionner les raster que vous souhaitez mosaïquer ensemble pour former une image.",
	"@@NDVI_Infrared-Band-ID_tag0@@": "Spécifie l’ID de canal qui représente la partie infrarouge proche du spectre électromagnétique.",
	"@@NDVI_Raster_tag0@@": "Raster multispectral en entrée.",
	"@@NDVI_Scientific-Output_tag0@@": "Les valeurs en sortie vont de -1.0 à 1.0, ce qui est utilisé dans de nombreuses applications scientifiques.",
	"@@NDVI_Visible-Band-ID_tag0@@": "Spécifie l’ID de canal qui représente la partie rouge du spectre électromagnétique.",
	"@@NDVI-Colorized_Color-Ramp_tag0@@": "Choisissez un dégradé de couleurs prédéfini dans la liste déroulante.",
	"@@NDVI-Colorized_Color-Scheme-Type_tag0@@": "Sélectionnez le type de combinaison de couleurs avec lequel la sortie NDVI sera colorisée :",
	"@@NDVI-Colorized_Color-Scheme-Type_tag1@@": "Palette de couleurs : choisissez une palette de couleurs prédéfinie dans la liste déroulante. Vous avez également la possibilité d’accéder à un fichier de palette de couleurs existant.",
	"@@NDVI-Colorized_Color-Scheme-Type_tag2@@": "Dégradé de couleurs : choisissez une combinaison de couleurs prédéfinie dans la liste déroulante.",
	"@@NDVI-Colorized_Colormap_tag0@@": "Choisissez une palette de couleurs prédéfinie dans la liste déroulante. Vous pouvez aussi accéder à un fichier de palette de couleurs existant.",
	"@@NDVI-Colorized_Infrared-Band-ID_tag0@@": "Spécifie l’ID de canal qui représente la partie infrarouge proche du spectre électromagnétique.",
	"@@NDVI-Colorized_Raster_tag0@@": "Raster multispectral en entrée.",
	"@@NDVI-Colorized_Scientific-Output_tag0@@": "Les valeurs en sortie vont de -1.0 à 1.0, ce qui est utilisé dans de nombreuses applications scientifiques.",
	"@@NDVI-Colorized_Visible-Band-ID_tag0@@": "Spécifie l’ID de canal qui représente la partie rouge du spectre électromagnétique.",
	"@@Negate_Cellsize-Type_tag0@@": "Choisissez la taille de cellule à utiliser dans le raster en sortie. Si les tailles des cellules en entrée sont identiques, toutes les options donnent les mêmes résultats.",
	"@@Negate_Cellsize-Type_tag1@@": "Premier de : utilise la première taille de cellule des rasters en entrée.",
	"@@Negate_Cellsize-Type_tag2@@": "Dernier de : utilise la dernière taille de cellule des rasters en entrée.",
	"@@Negate_Cellsize-Type_tag3@@": "Max de : utilise la plus grande taille de cellule de tous les rasters en entrée. Il s’agit de l’option par défaut.",
	"@@Negate_Cellsize-Type_tag4@@": "Moyenne de : utilise la taille de cellule moyenne de tous les rasters en entrée.",
	"@@Negate_Cellsize-Type_tag5@@": "Mini de : utilise la plus petite taille de cellule de tous les rasters en entrée.",
	"@@Negate_Extent-Type_tag0@@": "Sélectionnez l’étendue à utiliser dans le raster en sortie.",
	"@@Negate_Extent-Type_tag1@@": "Premier de : utilise l’étendue du premier raster en entrée pour déterminer l’étendue de traitement.",
	"@@Negate_Extent-Type_tag2@@": "Intersection de : utilise l’étendue des pixels superposés pour déterminer l’étendue de traitement. Il s’agit de l’option par défaut.",
	"@@Negate_Extent-Type_tag3@@": "Dernier de : utilise l’étendue du dernier raster en entrée pour déterminer l’étendue de traitement.",
	"@@Negate_Extent-Type_tag4@@": "Union de : utilise l’étendue de tous les rasters pour déterminer l’étendue de traitement.",
	"@@Negate_Raster_tag0@@": "Raster en entrée dont l'opposé est calculé (multiplication par -1).",
	"@@Nibble_Mask-Raster_tag0@@": "Raster en entrée requis utilisé comme masque.",
	"@@Nibble_Mask-Raster_tag1@@": "Les cellules avec la valeur NoData sont grignotées dans le <strong>Raster</strong> en entrée.",
	"@@Nibble_Mask-Raster_tag4@@": "Le raster de masque peut être de type entier ou à virgule flottante.",
	"@@Nibble_Nibble-NoData-cells_tag0@@": "Définit si les cellules NoData dans le raster en entrée conserveront une valeur NoData dans le raster en sortie.",
	"@@Nibble_Nibble-NoData-cells_tag1@@": "<strong>Non</strong> : spécifie que les cellules NoData du raster en entrée resteront de type NoData dans le raster en sortie. Il s’agit de l’option par défaut.",
	"@@Nibble_Nibble-NoData-cells_tag3@@": "<strong>Oui</strong> : spécifie que les cellules NoData du raster en entrée et dans le masque peuvent être grignotées en valeurs de cellules en sortie valides.",
	"@@Nibble_Raster_tag0@@": "Raster en entrée requis qui sera grignoté.",
	"@@Nibble_Raster_tag1@@": "Le raster en entrée peut être une valeur entière ou à virgule flottante.",
	"@@Nibble_Use-NoData-values-if-they-are-the-nearest-neighbor_tag0@@": "Définit si les valeurs ${NoData} du raster en entrée peuvent grignoter la zone définie par le raster de masque.",
	"@@Nibble_Use-NoData-values-if-they-are-the-nearest-neighbor_tag1@@": "<strong>Oui</strong> : spécifie que la valeur du voisin le plus proche sera utilisée, que cette valeur soit ${NoData} ou une autre valeur de données dans le raster en entrée. Les valeurs ${NoData} dans le raster en entrée peuvent grignoter les zones définies dans le masque si elles constituent le voisin le plus proche. Il s’agit de l’option par défaut.",
	"@@Nibble_Use-NoData-values-if-they-are-the-nearest-neighbor_tag3@@": "<strong>Non</strong> : spécifie que seules les valeurs de données peuvent grignoter les zones définies dans le raster de masque. Les valeurs ${NoData} dans le raster en entrée ne sont pas autorisées à grignoter les zones définies dans le raster de masque, même si elles constituent le voisin le plus proche.",
	"@@Nibble_Zone-Raster_tag0@@": "Raster de zones en entrée.",
	"@@Nibble_Zone-Raster_tag1@@": "Une zone contient toutes les cellules d’un raster possédant la même valeur, qu’elles soient contiguës ou non. La couche de zone en entrée régit la forme, les valeurs et les emplacements des zones. Le raster de zones peut être de type entier ou à virgule flottante.",
	"@@Not-Equal_Cellsize-Type_tag0@@": "Choisissez la taille de cellule à utiliser dans le raster en sortie. Si les tailles des cellules en entrée sont identiques, toutes les options donnent les mêmes résultats.",
	"@@Not-Equal_Cellsize-Type_tag1@@": "Premier de : utilise la première taille de cellule des rasters en entrée.",
	"@@Not-Equal_Cellsize-Type_tag2@@": "Dernier de : utilise la dernière taille de cellule des rasters en entrée.",
	"@@Not-Equal_Cellsize-Type_tag3@@": "Max de : utilise la plus grande taille de cellule de tous les rasters en entrée. Il s’agit de l’option par défaut.",
	"@@Not-Equal_Cellsize-Type_tag4@@": "Moyenne de : utilise la taille de cellule moyenne de tous les rasters en entrée.",
	"@@Not-Equal_Cellsize-Type_tag5@@": "Mini de : utilise la plus petite taille de cellule de tous les rasters en entrée.",
	"@@Not-Equal_Extent-Type_tag0@@": "Sélectionnez l’étendue à utiliser dans le raster en sortie.",
	"@@Not-Equal_Extent-Type_tag1@@": "Premier de : utilise l’étendue du premier raster en entrée pour déterminer l’étendue de traitement.",
	"@@Not-Equal_Extent-Type_tag2@@": "Intersection de : utilise l’étendue des pixels superposés pour déterminer l’étendue de traitement. Il s’agit de l’option par défaut.",
	"@@Not-Equal_Extent-Type_tag3@@": "Dernier de : utilise l’étendue du dernier raster en entrée pour déterminer l’étendue de traitement.",
	"@@Not-Equal_Extent-Type_tag4@@": "Union de : utilise l’étendue de tous les rasters pour déterminer l’étendue de traitement.",
	"@@Not-Equal_Raster_tag0@@": "Entrée qui sera comparée pour déterminer l'inégalité avec la deuxième entrée.",
	"@@Not-Equal_Raster_tag1@@": "Une valeur constante peut être utilisée en entrée pour ce paramètre, à condition qu’un raster soit spécifié pour l’autre paramètre.",
	"@@Not-Equal_Raster2_tag0@@": "Entrée qui sera comparée à la première entrée pour déterminer l'inégalité.",
	"@@Not-Equal_Raster2_tag1@@": "Une valeur constante peut être utilisée en entrée pour ce paramètre, à condition qu’un raster soit spécifié pour l’autre paramètre.",
	"@@Pansharpening_Multispectral_tag0@@": "Le raster multispectral que vous voulez affiner à l’aide du canal panchromatique.",
	"@@Pansharpening_Panchromatic_tag0@@": "Le raster monocanal haute résolution utilisé pour affiner le raster multispectral de plus faible résolution.",
	"@@Pansharpening_Pansharpening-Type_tag0@@": "Sélectionnez l’algorithme d’affinage panchromatique à utiliser.",
	"@@Pansharpening_Pansharpening-Type_tag1@@": "Brovey : utilise l’algorithme Brovey basé sur la modélisation spectrale pour la fusion des données.",
	"@@Pansharpening_Pansharpening-Type_tag2@@": "ESRI : utilise l’algorithme ESRI basé sur la modélisation spectrale pour la fusion des données.",
	"@@Pansharpening_Pansharpening-Type_tag3@@": "Gram-Schmidt : l’algorithme d’affinage spectral Gram-Schmidt permet d’affiner les données multispectrales.",
	"@@Pansharpening_Pansharpening-Type_tag4@@": "IHS : utilise l’espace de couleur Intensité, Teinte et Saturation pour la fusion des données.",
	"@@Pansharpening_Pansharpening-Type_tag5@@": "Moyenne : utilise la valeur moyenne entre les valeurs rouge, vert et bleu et la valeur du pixel panchromatique.",
	"@@Pansharpening_Weights_tag0@@": "Spécifiez les pondérations des canaux rouge, vert, bleu et infrarouge. Toutes les valeurs doivent être comprises entre 0 et 1.",
	"@@Path-Distance_Accumulative-Cost-Resistance-Rate_tag0@@": "Ce paramètre simule l’augmentation de l’effort pour surmonter les coûts au fur et à mesure que le coût cumulé augmente. Il permet de modéliser la fatigue du voyageur. Le coût cumulé croissant pour atteindre une cellule est multiplié par le taux de résistance et ajouté au coût engendré par le déplacement vers la cellule suivante.",
	"@@Path-Distance_Accumulative-Cost-Resistance-Rate_tag1@@": "Il s’agit d’une version modifiée d’une formule de taux d’intérêt composé qui permet de calculer le coût apparent du déplacement à travers une cellule. Avec l'augmentation du taux de résistance, le coût des cellules qui sont visitées ultérieurement s'accroît également. Plus le taux de résistance est important, plus le coût de déplacement vers la cellule suivante augmente, lequel est ajouté pour chaque mouvement suivant. Puisque le taux de résistance est similaire à un taux composé et qu’habituellement les valeurs de coût cumulé sont très importantes, nous suggérons l’utilisation de taux de résistance faibles, tels que 0,005 ou encore inférieurs, selon les valeurs de coût cumulé.",
	"@@Path-Distance_Accumulative-Cost-Resistance-Rate_tag2@@": "La valeur doit être supérieure à zéro. La capacité par défaut est limitée par le tronçon du raster en sortie.",
	"@@Path-Distance_Capacity_tag0@@": "Définit la capacité de coût pour le voyageur pour une source. Les calculs de coût continuent pour chaque source jusqu’à ce que la capacité spécifiée soit atteinte.",
	"@@Path-Distance_Capacity_tag1@@": "La valeur doit être supérieure à zéro. La capacité par défaut est limitée par le tronçon du raster en sortie.",
	"@@Path-Distance_Cost-Raster_tag0@@": "Raster en entrée requis définissant le coût ou l’impédance de déplacement planimétrique à travers chaque cellule. La valeur à chaque emplacement de cellule représente le coût par unité de distance pour le déplacement à travers chaque cellule. Chaque valeur d’emplacement de cellule est multipliée par la résolution de cellule et compense également le mouvement diagonal afin d’obtenir le coût total du passage à travers la cellule.",
	"@@Path-Distance_Cost-Raster_tag1@@": "Les valeurs du <strong>Raster de coût</strong> peuvent être des entiers ou des nombres à virgule flottante, mais elles ne peuvent pas être négatives ni nulles.",
	"@@Path-Distance_horizontalfactor_tag0@@": "<p>Définit la relation entre le facteur de coût horizontal et l’angle de déplacement relatif horizontal (HRMA).</p><p>Plusieurs facteurs, avec modificateurs, identifient un diagramme de facteurs verticaux défini. En outre, vous pouvez utiliser une table pour créer un diagramme personnalisé. Les diagrammes permettent d’identifier le facteur vertical utilisé pour le calcul du coût total d’un déplacement vers une cellule voisine.</p><p>Dans les explications ci-dessous, deux acronymes sont utilisés : HF et HRMA. Le facteur HF correspond au facteur horizontal qui représente la difficulté horizontale rencontrée lors d’un déplacement d’une cellule vers la suivante. L’angle HRMA correspond à l’angle de déplacement relatif horizontal, lequel représente l’angle entre la direction horizontale d’une cellule et la direction du déplacement.</p><p>Les types de <strong>Facteur horizontal</strong> sont les suivants :</p><ul><li><strong>Binaire</strong> : indique que si l’angle HRMA est inférieur à l’angle d’inflexion, le facteur HF a la valeur associée au facteur zéro. Dans le cas contraire, le facteur horizontal a une valeur infinie.</li><li><strong>Avant</strong> : précise que seul un mouvement vers l’avant est autorisé. L’angle HRMA doit être supérieur ou égal à 0 et inférieur à 90 degrés (0 &lt;= HRMA &lt; 90). Si l’angle HRMA est compris entre 0 et 45 degrés, le facteur HF de la cellule a la valeur associée au facteur zéro. Si l’angle HRMA est supérieur ou égal à 45 degrés, la valeur du modificateur de la valeur de bord est utilisée. Le facteur HF pour un angle HRMA égal ou supérieur à 90 degrés a une valeur infinie.</li><li><strong>Linéaire</strong> : spécifie que le facteur HF est une fonction linéaire de l’angle HRMA.</li><li><strong>Linéaire inverse</strong> : spécifie que le facteur HF est une fonction linéaire inverse de l’angle HRMA.</li><li><strong>Table</strong> : indique qu’un fichier de table sera utilisé pour définir le diagramme des facteurs horizontaux permettant de déterminer les facteurs HF.</li></ul><p>Les modificateurs des facteurs horizontaux sont les suivants :</p><ul><li><strong>Facteur zéro</strong> : définit le facteur horizontal à utiliser lorsque l’angle HRMA est nul. Ce facteur positionne l’intersection avec l’axe des y de toutes les fonctions de facteur horizontal.</li><li><strong>Angle d’inflexion</strong> : définit l’angle HRMA au-delà duquel le facteur HF a une valeur infinie.</li><li><strong>Pente</strong> : définit la pente de la ligne droite utilisée avec les mots-clés de facteur horizontal <strong>Linéaire</strong> et <strong>Linéaire inverse</strong>. La pente est spécifiée sous forme d’un rapport de la hauteur sur la distance parcourue (par exemple, une pente de 45 pour cent correspond à 1/45, la valeur introduite étant 0,02222).</li><li><strong>Valeur de bord</strong> : définit le facteur HF lorsque l’angle HRMA est supérieur ou égal à 45 degrés et inférieur à 90 degrés lorsque le mot-clé de facteur horizontal <strong>Avant</strong> est spécifié.</li><li><strong>Nom de la table</strong> : correspond au nom de la table définissant le facteur HF.</li></ul>",
	"@@Path-Distance_Horizontal-Raster_tag0@@": "Un raster définissant la direction horizontale pour chaque cellule.",
	"@@Path-Distance_Horizontal-Raster_tag1@@": "Les valeurs du raster doivent être des entiers compris entre 0 et 360, 0 degré correspondant au nord (vers le haut de l’écran). Elles augmentent dans le sens horaire. La valeur -1 doit être attribuée aux surfaces planes. Les valeurs à chaque emplacement seront utilisées conjointement au <strong>Facteur horizontal</strong> afin de déterminer le coût horizontal encouru lors d’un déplacement à partir d’une cellule vers les cellules voisines.",
	"@@Path-Distance_Maximum-Distance_tag0@@": "Le seuil que les valeurs de coût cumulé ne peuvent pas dépasser. Si une distance de coût cumulé dépasse cette valeur, la valeur en sortie de l’emplacement de cellule est NoData. La distance maximale définit l’étendue pour laquelle les distances de coût cumulé sont calculées. La distance par défaut va jusqu’à l’étendue du raster en sortie.",
	"@@Path-Distance_Multiplier-to-Apply-to-Costs_tag0@@": "Multiplicateur à appliquer aux valeurs de coût.",
	"@@Path-Distance_Multiplier-to-Apply-to-Costs_tag1@@": "Ce paramètre permet de contrôler le mode de déplacement ou la magnitude à une source. Plus le multiplicateur est élevé, plus le coût de déplacement d’une cellule à une autre est important.",
	"@@Path-Distance_Multiplier-to-Apply-to-Costs_tag2@@": "Les valeurs doivent être supérieures à zéro. La valeur par défaut est 1.",
	"@@Path-Distance_Multiplier-to-Apply-to-Costs_tag3@@": "Vous pouvez utiliser pour ce paramètre une valeur numérique (double) ou un champ du <strong>Raster source</strong>.",
	"@@Path-Distance_Source-Raster_tag0@@": "Le raster en entrée requis des emplacements source.",
	"@@Path-Distance_Source-Raster_tag1@@": "Raster qui identifie les cellules ou les emplacements à partir desquels la distance de moindre coût cumulé est calculée pour chaque emplacement de cellule en sortie.",
	"@@Path-Distance_Source-Raster_tag2@@": "Il peut s’agir d’un entier ou d’un nombre à virgule flottante.",
	"@@Path-Distance_Start-Cost_tag0@@": "Coût de départ du calcul des coûts. Ce paramètre permet de spécifier le coût fixe associé à une source. Plutôt que de commencer avec un coût égal à 0, l’algorithme de coût commence avec la valeur définie.",
	"@@Path-Distance_Start-Cost_tag1@@": "La valeur doit être égale ou supérieure à zéro. La valeur par défaut est 0.",
	"@@Path-Distance_Surface-Raster_tag0@@": "Un raster définissant les valeurs d'altitudes à chaque emplacement de cellule.",
	"@@Path-Distance_Surface-Raster_tag1@@": "Ces valeurs permettent de calculer la distance à la surface réelle qui est couverte lors du passage d'une cellule à une autre.",
	"@@Path-Distance_Travel-Direction_tag0@@": "Définit le sens du voyageur en cas d’application du taux de résistance source et du coût de départ source.",
	"@@Path-Distance_Travel-Direction_tag1@@": "<strong>À partir de la source</strong> : le taux de résistance source et le coût de départ source sont appliqués à partir de la source en entrée et en se déplaçant vers les cellules non sources. Il s’agit de l’option par défaut.",
	"@@Path-Distance_Travel-Direction_tag3@@": "<strong>Vers la source</strong> : le taux de résistance source et le coût de départ source sont appliqués à partir de chaque cellule non source et en revenant vers la source en entrée.",
	"@@Path-Distance_Travel-Direction_tag5@@": "Spécifiez le mot-clé <strong>À partir de la source</strong> ou <strong>Vers la source</strong>, qui est appliqué à toutes les sources, ou spécifiez un champ dans le <strong>Raster source</strong> qui contient les mots-clés permettant d’identifier le sens de déplacement pour chaque source. Ce champ doit contenir la chaîne ${FROM_SOURCE} ou ${TO_SOURCE}.",
	"@@Path-Distance_verticalfactor_tag0@@": "<p>Définit la relation entre le facteur de coût vertical et l’angle de déplacement relatif vertical (VRMA).</p><p>Plusieurs facteurs, avec modificateurs, identifient un diagramme de facteurs verticaux défini. En outre, vous pouvez utiliser une table pour créer un diagramme personnalisé. Les diagrammes permettent d’identifier le facteur vertical utilisé pour le calcul du coût total d’un déplacement vers une cellule voisine.</p><p>Dans les explications ci-dessous, deux acronymes sont utilisés : VF et VRMA. Le facteur VF correspond au facteur vertical, lequel représente la difficulté verticale rencontrée lors d’un déplacement d’une cellule vers la suivante. L’angle VRMA correspond à l’angle de déplacement relatif vertical, lequel représente l’angle de la pente entre la cellule FROM (Origine), ou de traitement, et la cellule TO (Destination).</p><p>Les types de <strong>Facteur vertical</strong> sont les suivants :</p><ul><li><strong>Binaire</strong> : spécifie que si l’angle VRMA est supérieur à l’angle d’inflexion inférieur et inférieur à l’angle d’inflexion supérieur, le facteur VF doit correspondre à la valeur associée au facteur zéro. Dans le cas contraire, le facteur vertical a une valeur infinie.</li><li><strong>Linéaire</strong> : indique que le facteur VF est une fonction linéaire de l’angle VRMA.</li><li><strong>Linéaire symétrique</strong> : spécifie que le facteur VF est une fonction linéaire de l’angle VRMA, du côté négatif ou du côté positif de l’angle VRMA, respectivement, et que les deux fonctions linéaires sont symétriques par rapport à l’axe (y) du facteur VF.</li><li><strong>Linéaire inverse</strong> : indique que le facteur VF est une fonction linéaire inverse de l’angle VRMA.</li><li><strong>Linéaire inverse symétrique</strong> : spécifie que le facteur VF est une fonction linéaire inverse de l’angle VRMA, du côté négatif ou du côté positif de l’angle VRMA, respectivement, et que les deux fonctions linéaires sont symétriques par rapport à l’axe (y) du facteur VF.</li><li><strong>Cos</strong> : identifie le facteur VF comme une fonction cosinusoïdale de l’angle VRMA.</li><li><strong>Sec</strong> : identifie le facteur VF comme une fonction sécante de l’angle VRMA.</li><li><strong>Cos-Sec</strong> : spécifie que le facteur VF est une fonction cosinusoïdale de l’angle VRMA lorsque ce dernier est négatif et qu’il est une fonction sécante de l’angle VRMA lorsque ce dernier n’est pas négatif.</li><li><strong>Sec-Cos</strong> : spécifie que le facteur VF est une fonction sécante de l’angle VRMA lorsque ce dernier est négatif et qu’il est une fonction cosinusoïdale de l’angle VRMA lorsque ce dernier n’est pas négatif.</li><li><strong>Table</strong> : indique qu’un fichier de table sera utilisé pour définir le diagramme des facteurs verticaux permettant de déterminer les facteurs VF.</li></ul><p>Les modificateurs des mots-clés de facteur vertical sont les suivants :</p><ul><li><strong>Facteur zéro</strong> : définit le facteur vertical utilisé lorsque l’angle VRMA est nul. Ce facteur positionne l’intersection avec l’axe des y de la fonction spécifiée. Par définition, le facteur zéro ne s’applique à aucune fonction verticale trigonométrique (COS, SEC, COS-SEC ou SEC-COS). Ces fonctions définissent l’interception de l’axe des y.</li><li><strong>Angle d’inflexion inférieur</strong> : définit l’angle VRMA en dessous duquel le facteur VF a une valeur infinie.</li><li><strong>Angle d’inflexion supérieur</strong> : définit l’angle VRMA au-dessus duquel le facteur VF a une valeur infinie.</li><li><strong>Pente</strong> : définit la pente de la ligne droite utilisée avec les mots-clés de facteur vertical <strong>Linéaire</strong> et <strong>Linéaire inverse</strong>. La pente est spécifiée sous forme d’un rapport de la hauteur sur la distance parcourue (par exemple, une pente de 45 pour cent correspond à 1/45, la valeur introduite étant 0,02222).</li><li><strong>Nom de la table</strong> : correspond au nom de la table définissant le facteur VF.</li></ul>",
	"@@Path-Distance_Vertical-Raster_tag0@@": "Définit la relation entre le facteur de coût vertical et l'angle de déplacement relatif vertical (VRMA, vertical relative moving angle).",
	"@@Path-Distance_Vertical-Raster_tag1@@": "Ces valeurs permettent de calculer la pente utilisée pour identifier le facteur vertical relatif au déplacement d'une cellule à une autre.",
	"@@Path-Distance-Allocation_Accumulative-Cost-Resistance-Rate_tag0@@": "Ce paramètre simule l’augmentation de l’effort pour surmonter les coûts au fur et à mesure que le coût cumulé augmente. Il permet de modéliser la fatigue du voyageur. Le coût cumulé croissant pour atteindre une cellule est multiplié par le taux de résistance et ajouté au coût engendré par le déplacement vers la cellule suivante.",
	"@@Path-Distance-Allocation_Accumulative-Cost-Resistance-Rate_tag1@@": "Il s’agit d’une version modifiée d’une formule de taux d’intérêt composé qui permet de calculer le coût apparent du déplacement à travers une cellule. Avec l'augmentation du taux de résistance, le coût des cellules qui sont visitées ultérieurement s'accroît également. Plus le taux de résistance est important, plus le coût de déplacement vers la cellule suivante augmente, lequel est ajouté pour chaque mouvement suivant. Puisque le taux de résistance est similaire à un taux composé et qu’habituellement les valeurs de coût cumulé sont très importantes, nous suggérons l’utilisation de taux de résistance faibles, tels que 0,005 ou encore inférieurs, selon les valeurs de coût cumulé.",
	"@@Path-Distance-Allocation_Accumulative-Cost-Resistance-Rate_tag2@@": "La valeur doit être supérieure à zéro. La capacité par défaut est limitée par le tronçon du raster en sortie.",
	"@@Path-Distance-Allocation_Capacity_tag0@@": "Définit la capacité de coût pour le voyageur pour une source. Les calculs de coût continuent pour chaque source jusqu’à ce que la capacité spécifiée soit atteinte.",
	"@@Path-Distance-Allocation_Capacity_tag1@@": "La valeur doit être supérieure à zéro. La capacité par défaut est limitée par le tronçon du raster en sortie.",
	"@@Path-Distance-Allocation_Cost-Raster_tag0@@": "Raster en entrée requis définissant le coût ou l’impédance de déplacement planimétrique à travers chaque cellule. La valeur à chaque emplacement de cellule représente le coût par unité de distance pour le déplacement à travers chaque cellule. Chaque valeur d’emplacement de cellule est multipliée par la résolution de cellule et compense également le mouvement diagonal afin d’obtenir le coût total du passage à travers la cellule.",
	"@@Path-Distance-Allocation_Cost-Raster_tag1@@": "Les valeurs du <strong>Raster de coût</strong> peuvent être des entiers ou des nombres à virgule flottante, mais elles ne peuvent pas être négatives ni nulles.",
	"@@Path-Distance-Allocation_horizontalfactor_tag0@@": "<p>Définit la relation entre le facteur de coût horizontal et l’angle de déplacement relatif horizontal (HRMA).</p><p>Plusieurs facteurs, avec modificateurs, identifient un diagramme de facteurs verticaux défini. En outre, vous pouvez utiliser une table pour créer un diagramme personnalisé. Les diagrammes permettent d’identifier le facteur vertical utilisé pour le calcul du coût total d’un déplacement vers une cellule voisine.</p><p>Dans les explications ci-dessous, deux acronymes sont utilisés : HF et HRMA. Le facteur HF correspond au facteur horizontal qui représente la difficulté horizontale rencontrée lors d’un déplacement d’une cellule vers la suivante. L’angle HRMA correspond à l’angle de déplacement relatif horizontal, lequel représente l’angle entre la direction horizontale d’une cellule et la direction du déplacement.</p><p>Les types de <strong>Facteur horizontal</strong> sont les suivants :</p><ul><li><strong>Binaire</strong> : indique que si l’angle HRMA est inférieur à l’angle d’inflexion, le facteur HF a la valeur associée au facteur zéro. Dans le cas contraire, le facteur horizontal a une valeur infinie.</li><li><strong>Avant</strong> : précise que seul un mouvement vers l’avant est autorisé. L’angle HRMA doit être supérieur ou égal à 0 et inférieur à 90 degrés (0 &lt;= HRMA &lt; 90). Si l’angle HRMA est compris entre 0 et 45 degrés, le facteur HF de la cellule a la valeur associée au facteur zéro. Si l’angle HRMA est supérieur ou égal à 45 degrés, la valeur du modificateur de la valeur de bord est utilisée. Le facteur HF pour un angle HRMA égal ou supérieur à 90 degrés a une valeur infinie.</li><li><strong>Linéaire</strong> : spécifie que le facteur HF est une fonction linéaire de l’angle HRMA.</li><li><strong>Linéaire inverse</strong> : spécifie que le facteur HF est une fonction linéaire inverse de l’angle HRMA.</li><li><strong>Table</strong> : indique qu’un fichier de table sera utilisé pour définir le diagramme des facteurs horizontaux permettant de déterminer les facteurs HF.</li></ul><p>Les modificateurs des facteurs horizontaux sont les suivants :</p><ul><li><strong>Facteur zéro</strong> : définit le facteur horizontal à utiliser lorsque l’angle HRMA est nul. Ce facteur positionne l’intersection avec l’axe des y de toutes les fonctions de facteur horizontal.</li><li><strong>Angle d’inflexion</strong> : définit l’angle HRMA au-delà duquel le facteur HF a une valeur infinie.</li><li><strong>Pente</strong> : définit la pente de la ligne droite utilisée avec les mots-clés de facteur horizontal <strong>Linéaire</strong> et <strong>Linéaire inverse</strong>. La pente est spécifiée sous forme d’un rapport de la hauteur sur la distance parcourue (par exemple, une pente de 45 pour cent correspond à 1/45, la valeur introduite étant 0,02222).</li><li><strong>Valeur de bord</strong> : définit le facteur HF lorsque l’angle HRMA est supérieur ou égal à 45 degrés et inférieur à 90 degrés lorsque le mot-clé de facteur horizontal <strong>Avant</strong> est spécifié.</li><li><strong>Nom de la table</strong> : correspond au nom de la table définissant le facteur HF.</li></ul>",
	"@@Path-Distance-Allocation_Horizontal-Raster_tag0@@": "Un raster définissant la direction horizontale pour chaque cellule.",
	"@@Path-Distance-Allocation_Horizontal-Raster_tag1@@": "Les valeurs du raster doivent être des entiers compris entre 0 et 360, 0 degré correspondant au nord (vers le haut de l’écran). Elles augmentent dans le sens horaire. La valeur -1 doit être attribuée aux surfaces planes. Les valeurs à chaque emplacement seront utilisées conjointement au <strong>Facteur horizontal</strong> afin de déterminer le coût horizontal encouru lors d’un déplacement à partir d’une cellule vers les cellules voisines.",
	"@@Path-Distance-Allocation_Maximum-Distance_tag0@@": "Le seuil que les valeurs de coût cumulé ne peuvent pas dépasser. Si une distance de coût cumulé dépasse cette valeur, la valeur en sortie de l’emplacement de cellule est NoData. La distance maximale définit l’étendue pour laquelle les distances de coût cumulé sont calculées. La distance par défaut va jusqu’à l’étendue du raster en sortie.",
	"@@Path-Distance-Allocation_Multiplier-to-Apply-to-Costs_tag0@@": "Multiplicateur à appliquer aux valeurs de coût.",
	"@@Path-Distance-Allocation_Multiplier-to-Apply-to-Costs_tag1@@": "Ce paramètre permet de contrôler le mode de déplacement ou la magnitude à une source. Plus le multiplicateur est élevé, plus le coût de déplacement d’une cellule à une autre est important.",
	"@@Path-Distance-Allocation_Multiplier-to-Apply-to-Costs_tag2@@": "Les valeurs doivent être supérieures à zéro. La valeur par défaut est 1.",
	"@@Path-Distance-Allocation_Multiplier-to-Apply-to-Costs_tag3@@": "Vous pouvez utiliser pour ce paramètre une valeur numérique (double) ou un champ du <strong>Raster source</strong>.",
	"@@Path-Distance-Allocation_Source-Field_tag0@@": "Champ permettant d’attribuer des valeurs aux emplacements sources. Il doit être de type entier. Si le <strong>Raster de valeur</strong> a été défini, les valeurs dans cette entrée sont prioritaires sur tout paramètre du <strong>Champ source</strong>.",
	"@@Path-Distance-Allocation_Source-Raster_tag0@@": "Le raster en entrée requis des emplacements source.",
	"@@Path-Distance-Allocation_Source-Raster_tag1@@": "Raster qui identifie les cellules ou les emplacements à partir desquels la distance de moindre coût cumulé est calculée pour chaque emplacement de cellule en sortie.",
	"@@Path-Distance-Allocation_Source-Raster_tag2@@": "Il peut s’agir d’un entier ou d’un nombre à virgule flottante.",
	"@@Path-Distance-Allocation_Start-Cost_tag0@@": "Coût de départ du calcul des coûts. Ce paramètre permet de spécifier le coût fixe associé à une source. Plutôt que de commencer avec un coût égal à 0, l’algorithme de coût commence avec la valeur définie.",
	"@@Path-Distance-Allocation_Start-Cost_tag1@@": "La valeur doit être égale ou supérieure à zéro. La valeur par défaut est 0.",
	"@@Path-Distance-Allocation_Surface-Raster_tag0@@": "Un raster définissant les valeurs d'altitudes à chaque emplacement de cellule.",
	"@@Path-Distance-Allocation_Surface-Raster_tag1@@": "Ces valeurs permettent de calculer la distance à la surface réelle qui est couverte lors du passage d'une cellule à une autre.",
	"@@Path-Distance-Allocation_Travel-Direction_tag0@@": "Définit le sens du voyageur en cas d’application du taux de résistance source et du coût de départ source.",
	"@@Path-Distance-Allocation_Travel-Direction_tag1@@": "<strong>À partir de la source</strong> : le taux de résistance source et le coût de départ source sont appliqués à partir de la source en entrée et en se déplaçant vers les cellules non sources. Il s’agit de l’option par défaut.",
	"@@Path-Distance-Allocation_Travel-Direction_tag3@@": "<strong>Vers la source</strong> : le taux de résistance source et le coût de départ source sont appliqués à partir de chaque cellule non source et en revenant vers la source en entrée.",
	"@@Path-Distance-Allocation_Travel-Direction_tag5@@": "Spécifiez le mot-clé <strong>À partir de la source</strong> ou <strong>Vers la source</strong>, qui est appliqué à toutes les sources, ou spécifiez un champ dans le <strong>Raster source</strong> qui contient les mots-clés permettant d’identifier le sens de déplacement pour chaque source. Ce champ doit contenir la chaîne ${FROM_SOURCE} ou ${TO_SOURCE}.",
	"@@Path-Distance-Allocation_Value-Raster_tag0@@": "Raster d’entiers en entrée qui identifie les valeurs de zone à utiliser pour chaque emplacement source en entrée. Pour chaque cellule d’emplacement source, la valeur définie par le <strong>Raster de valeur</strong> est attribuée à toutes les cellules allouées à l’emplacement source pour le calcul. Le <strong>Raster de valeur</strong> est prioritaire sur tout paramètre du <strong>Champ source</strong>.",
	"@@Path-Distance-Allocation_verticalfactor_tag0@@": "<p>Définit la relation entre le facteur de coût vertical et l’angle de déplacement relatif vertical (VRMA).</p><p>Plusieurs facteurs, avec modificateurs, identifient un diagramme de facteurs verticaux défini. En outre, vous pouvez utiliser une table pour créer un diagramme personnalisé. Les diagrammes permettent d’identifier le facteur vertical utilisé pour le calcul du coût total d’un déplacement vers une cellule voisine.</p><p>Dans les explications ci-dessous, deux acronymes sont utilisés : VF et VRMA. Le facteur VF correspond au facteur vertical, lequel représente la difficulté verticale rencontrée lors d’un déplacement d’une cellule vers la suivante. L’angle VRMA correspond à l’angle de déplacement relatif vertical, lequel représente l’angle de la pente entre la cellule FROM (Origine), ou de traitement, et la cellule TO (Destination).</p><p>Les types de <strong>Facteur vertical</strong> sont les suivants :</p><ul><li><strong>Binaire</strong> : spécifie que si l’angle VRMA est supérieur à l’angle d’inflexion inférieur et inférieur à l’angle d’inflexion supérieur, le facteur VF doit correspondre à la valeur associée au facteur zéro. Dans le cas contraire, le facteur vertical a une valeur infinie.</li><li><strong>Linéaire</strong> : indique que le facteur VF est une fonction linéaire de l’angle VRMA.</li><li><strong>Linéaire symétrique</strong> : spécifie que le facteur VF est une fonction linéaire de l’angle VRMA, du côté négatif ou du côté positif de l’angle VRMA, respectivement, et que les deux fonctions linéaires sont symétriques par rapport à l’axe (y) du facteur VF.</li><li><strong>Linéaire inverse</strong> : indique que le facteur VF est une fonction linéaire inverse de l’angle VRMA.</li><li><strong>Linéaire inverse symétrique</strong> : spécifie que le facteur VF est une fonction linéaire inverse de l’angle VRMA, du côté négatif ou du côté positif de l’angle VRMA, respectivement, et que les deux fonctions linéaires sont symétriques par rapport à l’axe (y) du facteur VF.</li><li><strong>Cos</strong> : identifie le facteur VF comme une fonction cosinusoïdale de l’angle VRMA.</li><li><strong>Sec</strong> : identifie le facteur VF comme une fonction sécante de l’angle VRMA.</li><li><strong>Cos-Sec</strong> : spécifie que le facteur VF est une fonction cosinusoïdale de l’angle VRMA lorsque ce dernier est négatif et qu’il est une fonction sécante de l’angle VRMA lorsque ce dernier n’est pas négatif.</li><li><strong>Sec-Cos</strong> : spécifie que le facteur VF est une fonction sécante de l’angle VRMA lorsque ce dernier est négatif et qu’il est une fonction cosinusoïdale de l’angle VRMA lorsque ce dernier n’est pas négatif.</li><li><strong>Table</strong> : indique qu’un fichier de table sera utilisé pour définir le diagramme des facteurs verticaux permettant de déterminer les facteurs VF.</li></ul><p>Les modificateurs des mots-clés de facteur vertical sont les suivants :</p><ul><li><strong>Facteur zéro</strong> : définit le facteur vertical utilisé lorsque l’angle VRMA est nul. Ce facteur positionne l’intersection avec l’axe des y de la fonction spécifiée. Par définition, le facteur zéro ne s’applique à aucune fonction verticale trigonométrique (COS, SEC, COS-SEC ou SEC-COS). Ces fonctions définissent l’interception de l’axe des y.</li><li><strong>Angle d’inflexion inférieur</strong> : définit l’angle VRMA en dessous duquel le facteur VF a une valeur infinie.</li><li><strong>Angle d’inflexion supérieur</strong> : définit l’angle VRMA au-dessus duquel le facteur VF a une valeur infinie.</li><li><strong>Pente</strong> : définit la pente de la ligne droite utilisée avec les mots-clés de facteur vertical <strong>Linéaire</strong> et <strong>Linéaire inverse</strong>. La pente est spécifiée sous forme d’un rapport de la hauteur sur la distance parcourue (par exemple, une pente de 45 pour cent correspond à 1/45, la valeur introduite étant 0,02222).</li><li><strong>Nom de la table</strong> : correspond au nom de la table définissant le facteur VF.</li></ul>",
	"@@Path-Distance-Allocation_Vertical-Raster_tag0@@": "Définit la relation entre le facteur de coût vertical et l'angle de déplacement relatif vertical (VRMA, vertical relative moving angle).",
	"@@Path-Distance-Allocation_Vertical-Raster_tag1@@": "Ces valeurs permettent de calculer la pente utilisée pour identifier le facteur vertical relatif au déplacement d'une cellule à une autre.",
	"@@Path-Distance-Back-Link_Accumulative-Cost-Resistance-Rate_tag0@@": "Ce paramètre simule l’augmentation de l’effort pour surmonter les coûts au fur et à mesure que le coût cumulé augmente. Il permet de modéliser la fatigue du voyageur. Le coût cumulé croissant pour atteindre une cellule est multiplié par le taux de résistance et ajouté au coût engendré par le déplacement vers la cellule suivante.",
	"@@Path-Distance-Back-Link_Accumulative-Cost-Resistance-Rate_tag1@@": "Il s’agit d’une version modifiée d’une formule de taux d’intérêt composé qui permet de calculer le coût apparent du déplacement à travers une cellule. Avec l'augmentation du taux de résistance, le coût des cellules qui sont visitées ultérieurement s'accroît également. Plus le taux de résistance est important, plus le coût de déplacement vers la cellule suivante augmente, lequel est ajouté pour chaque mouvement suivant. Puisque le taux de résistance est similaire à un taux composé et qu’habituellement les valeurs de coût cumulé sont très importantes, nous suggérons l’utilisation de taux de résistance faibles, tels que 0,005 ou encore inférieurs, selon les valeurs de coût cumulé.",
	"@@Path-Distance-Back-Link_Accumulative-Cost-Resistance-Rate_tag2@@": "La valeur doit être supérieure à zéro. La capacité par défaut est limitée par le tronçon du raster en sortie.",
	"@@Path-Distance-Back-Link_Capacity_tag0@@": "Définit la capacité de coût pour le voyageur pour une source. Les calculs de coût continuent pour chaque source jusqu’à ce que la capacité spécifiée soit atteinte.",
	"@@Path-Distance-Back-Link_Capacity_tag1@@": "La valeur doit être supérieure à zéro. La capacité par défaut est limitée par le tronçon du raster en sortie.",
	"@@Path-Distance-Back-Link_Cost-Raster_tag0@@": "Raster en entrée requis définissant le coût ou l’impédance de déplacement planimétrique à travers chaque cellule. La valeur à chaque emplacement de cellule représente le coût par unité de distance pour le déplacement à travers chaque cellule. Chaque valeur d’emplacement de cellule est multipliée par la résolution de cellule et compense également le mouvement diagonal afin d’obtenir le coût total du passage à travers la cellule.",
	"@@Path-Distance-Back-Link_Cost-Raster_tag1@@": "Les valeurs du <strong>Raster de coût</strong> peuvent être des entiers ou des nombres à virgule flottante, mais elles ne peuvent pas être négatives ni nulles.",
	"@@Path-Distance-Back-Link_horizontalfactor_tag0@@": "<p>Définit la relation entre le facteur de coût horizontal et l’angle de déplacement relatif horizontal (HRMA).</p><p>Plusieurs facteurs, avec modificateurs, identifient un diagramme de facteurs verticaux défini. En outre, vous pouvez utiliser une table pour créer un diagramme personnalisé. Les diagrammes permettent d’identifier le facteur vertical utilisé pour le calcul du coût total d’un déplacement vers une cellule voisine.</p><p>Dans les explications ci-dessous, deux acronymes sont utilisés : HF et HRMA. Le facteur HF correspond au facteur horizontal qui représente la difficulté horizontale rencontrée lors d’un déplacement d’une cellule vers la suivante. L’angle HRMA correspond à l’angle de déplacement relatif horizontal, lequel représente l’angle entre la direction horizontale d’une cellule et la direction du déplacement.</p><p>Les types de <strong>Facteur horizontal</strong> sont les suivants :</p><ul><li><strong>Binaire</strong> : indique que si l’angle HRMA est inférieur à l’angle d’inflexion, le facteur HF a la valeur associée au facteur zéro. Dans le cas contraire, le facteur horizontal a une valeur infinie.</li><li><strong>Avant</strong> : précise que seul un mouvement vers l’avant est autorisé. L’angle HRMA doit être supérieur ou égal à 0 et inférieur à 90 degrés (0 &lt;= HRMA &lt; 90). Si l’angle HRMA est compris entre 0 et 45 degrés, le facteur HF de la cellule a la valeur associée au facteur zéro. Si l’angle HRMA est supérieur ou égal à 45 degrés, la valeur du modificateur de la valeur de bord est utilisée. Le facteur HF pour un angle HRMA égal ou supérieur à 90 degrés a une valeur infinie.</li><li><strong>Linéaire</strong> : spécifie que le facteur HF est une fonction linéaire de l’angle HRMA.</li><li><strong>Linéaire inverse</strong> : spécifie que le facteur HF est une fonction linéaire inverse de l’angle HRMA.</li><li><strong>Table</strong> : indique qu’un fichier de table sera utilisé pour définir le diagramme des facteurs horizontaux permettant de déterminer les facteurs HF.</li></ul><p>Les modificateurs des facteurs horizontaux sont les suivants :</p><ul><li><strong>Facteur zéro</strong> : définit le facteur horizontal à utiliser lorsque l’angle HRMA est nul. Ce facteur positionne l’intersection avec l’axe des y de toutes les fonctions de facteur horizontal.</li><li><strong>Angle d’inflexion</strong> : définit l’angle HRMA au-delà duquel le facteur HF a une valeur infinie.</li><li><strong>Pente</strong> : définit la pente de la ligne droite utilisée avec les mots-clés de facteur horizontal <strong>Linéaire</strong> et <strong>Linéaire inverse</strong>. La pente est spécifiée sous forme d’un rapport de la hauteur sur la distance parcourue (par exemple, une pente de 45 pour cent correspond à 1/45, la valeur introduite étant 0,02222).</li><li><strong>Valeur de bord</strong> : définit le facteur HF lorsque l’angle HRMA est supérieur ou égal à 45 degrés et inférieur à 90 degrés lorsque le mot-clé de facteur horizontal <strong>Avant</strong> est spécifié.</li><li><strong>Nom de la table</strong> : correspond au nom de la table définissant le facteur HF.</li></ul>",
	"@@Path-Distance-Back-Link_Horizontal-Raster_tag0@@": "Un raster définissant la direction horizontale pour chaque cellule.",
	"@@Path-Distance-Back-Link_Horizontal-Raster_tag1@@": "Les valeurs du raster doivent être des entiers compris entre 0 et 360, 0 degré correspondant au nord (vers le haut de l’écran). Elles augmentent dans le sens horaire. La valeur -1 doit être attribuée aux surfaces planes. Les valeurs à chaque emplacement seront utilisées conjointement au <strong>Facteur horizontal</strong> afin de déterminer le coût horizontal encouru lors d’un déplacement à partir d’une cellule vers les cellules voisines.",
	"@@Path-Distance-Back-Link_Maximum-Distance_tag0@@": "Le seuil que les valeurs de coût cumulé ne peuvent pas dépasser. Si une distance de coût cumulé dépasse cette valeur, la valeur en sortie de l’emplacement de cellule est NoData. La distance maximale définit l’étendue pour laquelle les distances de coût cumulé sont calculées. La distance par défaut va jusqu’à l’étendue du raster en sortie.",
	"@@Path-Distance-Back-Link_Multiplier-to-Apply-to-Costs_tag0@@": "Multiplicateur à appliquer aux valeurs de coût.",
	"@@Path-Distance-Back-Link_Multiplier-to-Apply-to-Costs_tag1@@": "Ce paramètre permet de contrôler le mode de déplacement ou la magnitude à une source. Plus le multiplicateur est élevé, plus le coût de déplacement d’une cellule à une autre est important.",
	"@@Path-Distance-Back-Link_Multiplier-to-Apply-to-Costs_tag2@@": "Les valeurs doivent être supérieures à zéro. La valeur par défaut est 1.",
	"@@Path-Distance-Back-Link_Multiplier-to-Apply-to-Costs_tag3@@": "Vous pouvez utiliser pour ce paramètre une valeur numérique (double) ou un champ du <strong>Raster source</strong>.",
	"@@Path-Distance-Back-Link_Source-Raster_tag0@@": "Le raster en entrée requis des emplacements source.",
	"@@Path-Distance-Back-Link_Source-Raster_tag1@@": "Raster qui identifie les cellules ou les emplacements à partir desquels la distance de moindre coût cumulé est calculée pour chaque emplacement de cellule en sortie.",
	"@@Path-Distance-Back-Link_Source-Raster_tag2@@": "Il peut s’agir d’un entier ou d’un nombre à virgule flottante.",
	"@@Path-Distance-Back-Link_Start-Cost_tag0@@": "Coût de départ du calcul des coûts. Ce paramètre permet de spécifier le coût fixe associé à une source. Plutôt que de commencer avec un coût égal à 0, l’algorithme de coût commence avec la valeur définie.",
	"@@Path-Distance-Back-Link_Start-Cost_tag1@@": "La valeur doit être égale ou supérieure à zéro. La valeur par défaut est 0.",
	"@@Path-Distance-Back-Link_Surface-Raster_tag0@@": "Un raster définissant les valeurs d'altitudes à chaque emplacement de cellule.",
	"@@Path-Distance-Back-Link_Surface-Raster_tag1@@": "Ces valeurs permettent de calculer la distance à la surface réelle qui est couverte lors du passage d'une cellule à une autre.",
	"@@Path-Distance-Back-Link_Travel-Direction_tag0@@": "Définit le sens du voyageur en cas d’application du taux de résistance source et du coût de départ source.",
	"@@Path-Distance-Back-Link_Travel-Direction_tag1@@": "<strong>À partir de la source</strong> : le taux de résistance source et le coût de départ source sont appliqués à partir de la source en entrée et en se déplaçant vers les cellules non sources. Il s’agit de l’option par défaut.",
	"@@Path-Distance-Back-Link_Travel-Direction_tag3@@": "<strong>Vers la source</strong> : le taux de résistance source et le coût de départ source sont appliqués à partir de chaque cellule non source et en revenant vers la source en entrée.",
	"@@Path-Distance-Back-Link_Travel-Direction_tag5@@": "Spécifiez le mot-clé <strong>À partir de la source</strong> ou <strong>Vers la source</strong>, qui est appliqué à toutes les sources, ou spécifiez un champ dans le <strong>Raster source</strong> qui contient les mots-clés permettant d’identifier le sens de déplacement pour chaque source. Ce champ doit contenir la chaîne ${FROM_SOURCE} ou ${TO_SOURCE}.",
	"@@Path-Distance-Back-Link_verticalfactor_tag0@@": "<p>Définit la relation entre le facteur de coût vertical et l’angle de déplacement relatif vertical (VRMA).</p><p>Plusieurs facteurs, avec modificateurs, identifient un diagramme de facteurs verticaux défini. En outre, vous pouvez utiliser une table pour créer un diagramme personnalisé. Les diagrammes permettent d’identifier le facteur vertical utilisé pour le calcul du coût total d’un déplacement vers une cellule voisine.</p><p>Dans les explications ci-dessous, deux acronymes sont utilisés : VF et VRMA. Le facteur VF correspond au facteur vertical, lequel représente la difficulté verticale rencontrée lors d’un déplacement d’une cellule vers la suivante. L’angle VRMA correspond à l’angle de déplacement relatif vertical, lequel représente l’angle de la pente entre la cellule FROM (Origine), ou de traitement, et la cellule TO (Destination).</p><p>Les types de <strong>Facteur vertical</strong> sont les suivants :</p><ul><li><strong>Binaire</strong> : spécifie que si l’angle VRMA est supérieur à l’angle d’inflexion inférieur et inférieur à l’angle d’inflexion supérieur, le facteur VF doit correspondre à la valeur associée au facteur zéro. Dans le cas contraire, le facteur vertical a une valeur infinie.</li><li><strong>Linéaire</strong> : indique que le facteur VF est une fonction linéaire de l’angle VRMA.</li><li><strong>Linéaire symétrique</strong> : spécifie que le facteur VF est une fonction linéaire de l’angle VRMA, du côté négatif ou du côté positif de l’angle VRMA, respectivement, et que les deux fonctions linéaires sont symétriques par rapport à l’axe (y) du facteur VF.</li><li><strong>Linéaire inverse</strong> : indique que le facteur VF est une fonction linéaire inverse de l’angle VRMA.</li><li><strong>Linéaire inverse symétrique</strong> : spécifie que le facteur VF est une fonction linéaire inverse de l’angle VRMA, du côté négatif ou du côté positif de l’angle VRMA, respectivement, et que les deux fonctions linéaires sont symétriques par rapport à l’axe (y) du facteur VF.</li><li><strong>Cos</strong> : identifie le facteur VF comme une fonction cosinusoïdale de l’angle VRMA.</li><li><strong>Sec</strong> : identifie le facteur VF comme une fonction sécante de l’angle VRMA.</li><li><strong>Cos-Sec</strong> : spécifie que le facteur VF est une fonction cosinusoïdale de l’angle VRMA lorsque ce dernier est négatif et qu’il est une fonction sécante de l’angle VRMA lorsque ce dernier n’est pas négatif.</li><li><strong>Sec-Cos</strong> : spécifie que le facteur VF est une fonction sécante de l’angle VRMA lorsque ce dernier est négatif et qu’il est une fonction cosinusoïdale de l’angle VRMA lorsque ce dernier n’est pas négatif.</li><li><strong>Table</strong> : indique qu’un fichier de table sera utilisé pour définir le diagramme des facteurs verticaux permettant de déterminer les facteurs VF.</li></ul><p>Les modificateurs des mots-clés de facteur vertical sont les suivants :</p><ul><li><strong>Facteur zéro</strong> : définit le facteur vertical utilisé lorsque l’angle VRMA est nul. Ce facteur positionne l’intersection avec l’axe des y de la fonction spécifiée. Par définition, le facteur zéro ne s’applique à aucune fonction verticale trigonométrique (COS, SEC, COS-SEC ou SEC-COS). Ces fonctions définissent l’interception de l’axe des y.</li><li><strong>Angle d’inflexion inférieur</strong> : définit l’angle VRMA en dessous duquel le facteur VF a une valeur infinie.</li><li><strong>Angle d’inflexion supérieur</strong> : définit l’angle VRMA au-dessus duquel le facteur VF a une valeur infinie.</li><li><strong>Pente</strong> : définit la pente de la ligne droite utilisée avec les mots-clés de facteur vertical <strong>Linéaire</strong> et <strong>Linéaire inverse</strong>. La pente est spécifiée sous forme d’un rapport de la hauteur sur la distance parcourue (par exemple, une pente de 45 pour cent correspond à 1/45, la valeur introduite étant 0,02222).</li><li><strong>Nom de la table</strong> : correspond au nom de la table définissant le facteur VF.</li></ul>",
	"@@Path-Distance-Back-Link_Vertical-Raster_tag0@@": "Définit la relation entre le facteur de coût vertical et l'angle de déplacement relatif vertical (VRMA, vertical relative moving angle).",
	"@@Path-Distance-Back-Link_Vertical-Raster_tag1@@": "Ces valeurs permettent de calculer la pente utilisée pour identifier le facteur vertical relatif au déplacement d'une cellule à une autre.",
	"@@Plus_Cellsize-Type_tag0@@": "Choisissez la taille de cellule à utiliser dans le raster en sortie. Si les tailles des cellules en entrée sont identiques, toutes les options donnent les mêmes résultats.",
	"@@Plus_Cellsize-Type_tag1@@": "Premier de : utilise la première taille de cellule des rasters en entrée.",
	"@@Plus_Cellsize-Type_tag2@@": "Dernier de : utilise la dernière taille de cellule des rasters en entrée.",
	"@@Plus_Cellsize-Type_tag3@@": "Max de : utilise la plus grande taille de cellule de tous les rasters en entrée. Il s’agit de l’option par défaut.",
	"@@Plus_Cellsize-Type_tag4@@": "Moyenne de : utilise la taille de cellule moyenne de tous les rasters en entrée.",
	"@@Plus_Cellsize-Type_tag5@@": "Mini de : utilise la plus petite taille de cellule de tous les rasters en entrée.",
	"@@Plus_Extent-Type_tag0@@": "Sélectionnez l’étendue à utiliser dans le raster en sortie.",
	"@@Plus_Extent-Type_tag1@@": "Premier de : utilise l’étendue du premier raster en entrée pour déterminer l’étendue de traitement.",
	"@@Plus_Extent-Type_tag2@@": "Intersection de : utilise l’étendue des pixels superposés pour déterminer l’étendue de traitement. Il s’agit de l’option par défaut.",
	"@@Plus_Extent-Type_tag3@@": "Dernier de : utilise l’étendue du dernier raster en entrée pour déterminer l’étendue de traitement.",
	"@@Plus_Extent-Type_tag4@@": "Union de : utilise l’étendue de tous les rasters pour déterminer l’étendue de traitement.",
	"@@Plus_Raster_tag0@@": "Entrée dont les valeurs sont ajoutées.",
	"@@Plus_Raster_tag1@@": "Une valeur constante peut être utilisée en entrée pour ce paramètre, à condition qu’un raster soit spécifié pour l’autre paramètre.",
	"@@Plus_Raster2_tag0@@": "Entrée dont les valeurs sont ajoutées à la première entrée.",
	"@@Plus_Raster2_tag1@@": "Une valeur constante peut être utilisée en entrée pour ce paramètre, à condition qu’un raster soit spécifié pour l’autre paramètre.",
	"@@Local_Cellsize-Type_tag0@@": "Sélectionnez la taille de cellule à utiliser dans le raster en sortie. Si toutes les tailles de cellule en entrée sont identiques, toutes les options donnent les mêmes résultats.",
	"@@Local_Cellsize-Type_tag1@@": "Premier de : utiliser la première taille de cellule des rasters en entrée.",
	"@@Local_Cellsize-Type_tag2@@": "Dernier de : utiliser la dernière taille de cellule des rasters en entrée.",
	"@@Local_Cellsize-Type_tag3@@": "Max de : utiliser la plus grande taille de cellule de tous les rasters en entrée. Il s’agit de l’option par défaut.",
	"@@Local_Cellsize-Type_tag4@@": "Moyenne de : utiliser la taille de cellule moyenne de tous les rasters en entrée.",
	"@@Local_Cellsize-Type_tag5@@": "Min de : utiliser la plus petite taille de cellule de tous les rasters en entrée.",
	"@@Local_Extent-Type_tag0@@": "Sélectionnez l’étendue à utiliser dans le raster en sortie :",
	"@@Local_Extent-Type_tag1@@": "Premier de : utiliser l’étendue du premier raster en entrée pour déterminer l’étendue de traitement.",
	"@@Local_Extent-Type_tag2@@": "Intersection de : utiliser l’étendue des pixels superposés pour déterminer l’étendue de traitement. Il s’agit de l’option par défaut.",
	"@@Local_Extent-Type_tag3@@": "Dernier de : utiliser l’étendue du dernier raster en entrée pour déterminer l’étendue de traitement.",
	"@@Local_Extent-Type_tag4@@": "Union de : utiliser l’étendue de tous les rasters pour déterminer l’étendue de traitement.",
	"@@Local_Raster_tag0@@": "Entrée dont les valeurs subissent l’ajout.",
	"@@Local_Raster_tag1@@": "Une valeur constante peut être utilisée en entrée pour ce paramètre, à condition qu’un raster soit spécifié pour l’autre paramètre.",
	"@@Local_Raster2_tag0@@": "Entrée dont les valeurs sont ajoutées à la première entrée.",
	"@@Local_Raster2_tag1@@": "Une valeur constante peut être utilisée en entrée pour ce paramètre, à condition qu’un raster soit spécifié pour l’autre paramètre.",
	"@@Local_False-Raster_tag0@@": "Entrée dont les valeurs sont utilisées en tant que valeurs de pixel en sortie si la condition est fausse. Il peut s’agir d’un raster de type entier ou à virgule flottante, ou d’une valeur constante.",
	"@@Local_True-Raster_tag0@@": "Entrée dont les valeurs sont utilisées en tant que valeurs de pixel en sortie si la condition est vraie. Il peut s’agir d’un raster de type entier ou à virgule flottante, ou d’une valeur constante.",
	"@@Power_Cellsize-Type_tag0@@": "Choisissez la taille de cellule à utiliser dans le raster en sortie. Si les tailles des cellules en entrée sont identiques, toutes les options donnent les mêmes résultats.",
	"@@Power_Cellsize-Type_tag1@@": "Premier de : utilise la première taille de cellule des rasters en entrée.",
	"@@Power_Cellsize-Type_tag2@@": "Dernier de : utilise la dernière taille de cellule des rasters en entrée.",
	"@@Power_Cellsize-Type_tag3@@": "Max de : utilise la plus grande taille de cellule de tous les rasters en entrée. Il s’agit de l’option par défaut.",
	"@@Power_Cellsize-Type_tag4@@": "Moyenne de : utilise la taille de cellule moyenne de tous les rasters en entrée.",
	"@@Power_Cellsize-Type_tag5@@": "Mini de : utilise la plus petite taille de cellule de tous les rasters en entrée.",
	"@@Power_Extent-Type_tag0@@": "Sélectionnez l’étendue à utiliser dans le raster en sortie.",
	"@@Power_Extent-Type_tag1@@": "Premier de : utilise l’étendue du premier raster en entrée pour déterminer l’étendue de traitement.",
	"@@Power_Extent-Type_tag2@@": "Intersection de : utilise l’étendue des pixels superposés pour déterminer l’étendue de traitement. Il s’agit de l’option par défaut.",
	"@@Power_Extent-Type_tag3@@": "Dernier de : utilise l’étendue du dernier raster en entrée pour déterminer l’étendue de traitement.",
	"@@Power_Extent-Type_tag4@@": "Union de : utilise l’étendue de tous les rasters pour déterminer l’étendue de traitement.",
	"@@Power_Raster_tag0@@": "Valeurs en entrée à élever à la puissance définie par <strong>Raster2</strong>.",
	"@@Power_Raster_tag3@@": "Une valeur constante peut être utilisée en entrée pour ce paramètre, à condition qu’un raster soit spécifié pour l’autre paramètre.",
	"@@Power_Raster2_tag0@@": "Entrée qui détermine la puissance à laquelle les valeurs <strong>Raster</strong> seront élevées.",
	"@@Power_Raster2_tag3@@": "Une valeur constante peut être utilisée en entrée pour ce paramètre, à condition qu’un raster soit spécifié pour l’autre paramètre.",
	"@@Radar-Calibration_Calibration-Type_tag0@@": "Type de calibrage à réaliser.",
	"@@Radar-Calibration_Calibration-Type_tag1@@": "Beta-nought (Bêta zéro) : la fonction renvoie la réflectivité du radar par unité de surface en distance oblique. Il s’agit du type de calibrage par défaut.",
	"@@Radar-Calibration_Calibration-Type_tag2@@": "Sigma-nought (Sigma zéro) : la fonction renvoie la réflectivité du radar par unité de surface en portée au sol. Les résultats sont des valeurs à virgule flottante 32 bits généralement comprises entre 0,0 et 1,0. Aucun découpage de donnée n'est effectué si cette option est sélectionnée.",
	"@@Radar-Calibration_Calibration-Type_tag3@@": "Gamma : la fonction renvoie la réflectivité du radar par unité de surface dans le plan perpendiculaire à la direction de la mesure.",
	"@@Radar-Calibration_Calibration-Type_tag4@@": "Aucun",
	"@@Radar-Calibration_Raster_tag0@@": "Raster en entrée.",
	"@@RasterInfo_Raster-Info_tag0@@": "Sélectionnez un jeu de données raster à utiliser comme modèle.",
	"@@RasterInfo_Raster_tag0@@": "Raster en entrée.",
	"@@Rasterize-Attributes_Attribute-Field-Names_tag0@@": "Liste des champs de la <strong>Table des attributs zonaux</strong>, où chaque champ est séparé par une virgule. Les valeurs dans chaque champ seront représentées par une bande dans le raster en sortie.",
	"@@Rasterize-Attributes_Background-Value_tag0@@": "La valeur de pixel initiale des canaux en sortie dans un raster, avant leur classement.",
	"@@Rasterize-Attributes_Background-Value_tag1@@": "Si un pixel ne se trouve pas au sein d’une zone, il demeure en tant que valeur d’arrière-plan.",
	"@@Rasterize-Attributes_Value-Raster_tag0@@": "Le raster en entrée requis.",
	"@@Rasterize-Attributes_Value-Raster_tag1@@": "L'entrée doit être un raster monocanal. Si un raster multicanal est utilisé, seul le premier canal est employé.",
	"@@Rasterize-Attributes_Where-Clause_tag0@@": "Requête supplémentaire facultative appliquée à la <strong>Table des attributs zonaux</strong>.",
	"@@Rasterize-Attributes_Where-Clause_tag3@@": "Si vous utilisiez la table ci-dessus comme exemple, la requête serait ${Variable1 = 'bare earth'}.",
	"@@Rasterize-Attributes_Zonal-Attributes-Table_tag0@@": "Les attributs zonaux spécifiés en tant que chemin d'accès à une classe d'entités locale, chemin d'accès à une table, URL d'une couche de service d'entités ou chaîne JSON.",
	"@@Rasterize-Attributes_Zonal-Attributes-Table_tag1@@": "Dans JSON, ceci est décrit en tant que collection cartographique allant des ID de zone à une matrice d’entiers. ${{ zoneId:[f1,f2,...,fn], ... } }",
	"@@Rasterize-Attributes_Zone-Field_tag0@@": "Le nom de champ contenant les valeurs d'ID de zone.",
	"@@Rasterize-Attributes_Zone-Raster_tag0@@": "Raster monocanal facultatif où chaque pixel contient l'ID de zone associé à l'emplacement. L'ID de zone permet de rechercher des lignes dans la table des attributs zonaux afin de recevoir des zones spécifiques.",
	"@@Rasterize-Attributes_Zone-Raster_tag1@@": "Ne spécifiez pas ce paramètre si vous souhaitez uniquement importer l'attribut.",
	"@@Rasterize-Features_Field_tag0@@": "Sélectionnez le champ à utiliser pour identifier chaque entité.",
	"@@Rasterize-Features_Input-Features_tag0@@": "Sélectionnez la classe d'entités à convertir en format raster.",
	"@@Rasterize-Features_Raster_tag0@@": "Sélectionnez un raster pour définir la taille de cellule et l’étendue pour la conversion des entités.",
	"@@Rasterize-Features_Resolve-Overlap-Method_tag0@@": "Indiquez comment gérer les entités superposées :",
	"@@Rasterize-Features_Resolve-Overlap-Method_tag1@@": "<strong>Premier</strong> : une valeur issue du premier jeu de données répertorié est attribuée aux zones superposées.",
	"@@Rasterize-Features_Resolve-Overlap-Method_tag3@@": "<strong>Dernier</strong> : une valeur issue du dernier jeu de données répertorié est attribuée aux zones superposées.",
	"@@Rasterize-Features_Resolve-Overlap-Method_tag5@@": "<strong>Le plus petit</strong> : une valeur issue des plus petites entités est attribuée aux zones superposées.",
	"@@Rasterize-Features_Resolve-Overlap-Method_tag7@@": "<strong>Le plus grand</strong> : une valeur issue des plus grandes entités est attribuée aux zones superposées.",
	"@@Recast_Overrides_tag0@@": "Une table des noms de variables et des valeurs définies par l’utilisateur utilisée pour modifier un jeu de données mosaïque.",
	"@@Recast_Raster_tag0@@": "Produit raster sur lequel auquel la fonction Rédéfinir est appliqué.",
	"@@Region-Group_Add-Link_tag0@@": "Spécifie si un champ LINK est ajouté à la table du résultat en sortie.",
	"@@Region-Group_Add-Link_tag1@@": "<strong>Ajouter un lien</strong> : un élément ${LINK} sera ajouté à la table du raster en sortie.",
	"@@Region-Group_Add-Link_tag3@@": "<strong>Aucun lien</strong> : la table attributaire du raster en sortie contiendra uniquement les éléments ${Value} et ${Count}.",
	"@@Region-Group_Excluded-Value_tag0@@": "Identifie une valeur telle que si un emplacement de cellule contient cette valeur, aucune connectivité spatiale ne pourra être évaluée, quel que soit le nombre de voisin spécifié (FOUR ou EIGHT).",
	"@@Region-Group_Excluded-Value_tag1@@": "Les cellules dotées de la valeur exclue sont traitées en NoData et sont éliminées de tout calcul. Dans le raster en sortie, la valeur zéro est attribuée aux emplacements de cellule qui contiennent la valeur exclue.",
	"@@Region-Group_Excluded-Value_tag2@@": "La valeur exclue repose sur le même concept qu’une valeur d’arrière-plan ou que l’application d’un masque. Une valeur doit être spécifiée pour ce paramètre si le paramètre <strong>${CROSS}</strong> est spécifié.",
	"@@Region-Group_Number-of-Neighbor-Cells_tag0@@": "Nombre de cellules voisines à utiliser afin d'évaluer la connectivité entre les cellules.",
	"@@Region-Group_Number-of-Neighbor-Cells_tag1@@": "<strong>QUATRE</strong> : définit la connectivité entre des cellules d’une même valeur uniquement si elles se trouvent directement à gauche, à droite, au-dessus ou en dessous des quatre voisins les plus proches. Il s’agit de l’option par défaut.",
	"@@Region-Group_Number-of-Neighbor-Cells_tag3@@": "<strong>HUIT</strong> : définit la connectivité entre des cellules de même valeur si elles se trouvent dans le voisinage immédiat de huit cellules. Elles peuvent se situer à droite, à gauche, au-dessus ou en diagonale.",
	"@@Region-Group_Zone-Connectivity_tag0@@": "Définit les valeurs de cellules qui doivent être prises en compte dans le cadre des tests de connectivité.",
	"@@Region-Group_Zone-Connectivity_tag1@@": "<strong>DANS</strong> : teste la connectivité entre des valeurs identiques en entrée au sein de la même zone. Il s’agit de l’option par défaut.",
	"@@Region-Group_Zone-Connectivity_tag3@@": "Les seules cellules qui peuvent être regroupées sont des cellules de la même zone (valeur) et qui répondent aux exigences spatiales de connectivité spécifiées par le paramètre <strong>Nombre de voisins</strong> (quatre ou huit voisins).",
	"@@Region-Group_Zone-Connectivity_tag6@@": "<strong>CROISER</strong> : teste la connectivité sur la base des exigences spatiales spécifiées par le nombre de voisins entre les cellules dotées de valeurs quelconques, à l’exception de la valeur identifiée à exclure via le paramètre de valeur exclue.",
	"@@Region-Group_Zone-Connectivity_tag8@@": "Lorsque cette option est utilisée, une valeur doit être spécifiée pour le paramètre <strong>Valeur exclue</strong>.",
	"@@Region-Group_Zone-Raster_tag0@@": "Raster en entrée requis dont les uniques régions connectées seront identifiées.",
	"@@Region-Group_Zone-Raster_tag1@@": "Il doit être de type entier.",
	"@@Region-Grow_Fill-Value-Field_tag0@@": "Champ de la table attributaire qui définit la valeur de remplissage attribuée au groupe de pixels. Dans une image multicanal, cette valeur est attribuée à tous les canaux.",
	"@@Region-Grow_Max-Growth-Radius-Field_tag0@@": "Champ de la table attributaire qui définit le rayon d'évolution maximale, dans les unités de la référence spatiale de l'image.",
	"@@Region-Grow_Raster_tag0@@": "Le raster sur lequel vous souhaitez appliquer cette fonction.",
	"@@Region-Grow_Seed-Points_tag0@@": "Classe d'entités points qui sert de valeurs initiales à l'algorithme. Chaque point d’origine correspond à une entrée de la table attributaire, qui comporte des informations sur le rayon d’évolution maximale, le seuil de similarité et la valeur de remplissage.",
	"@@Region-Grow_Similarity-Threshold-Field_tag0@@": "Champ de la table attributaire qui définit le seuil de similarité, en tant que distance euclidienne de l'espace spectral.",
	"@@Remap_Allow-Unmatched-Pixel-Values_tag0@@": "Les valeurs manquantes dans la table de reclassement peuvent conserver leur valeur ou être classifiées sur NoData.",
	"@@Remap_Allow-Unmatched-Pixel-Values_tag1@@": "Désactivé : tout pixel du raster en entrée qui n’est pas reclassé dans une table de classification conservera sa valeur et sera enregistré pour son emplacement dans le raster en sortie. Il s’agit de l’option par défaut.",
	"@@Remap_Allow-Unmatched-Pixel-Values_tag2@@": "Activé : tout pixel du raster en entrée qui n’est pas reclassé dans une table de classification prendra la valeur NoData pour son emplacement dans le raster en sortie.",
	"@@Remap_Input-Field_tag0@@": "Choisissez le champ qui indique la valeur de pixel à classifier.",
	"@@Remap_Input-Field_tag1@@": "Si votre table comporte une plage de valeurs, il s’agit du champ de la valeur minimale, et le paramètre <strong>Champ max en entrée</strong> doit également être spécifié.",
	"@@Remap_Input-Max-Field_tag0@@": "Choisissez le champ de la valeur maximale si votre table indique une plage de valeurs.",
	"@@Remap_List_tag0@@": "Indiquez les valeurs à apparier, ainsi que la plage des valeurs minimale et maximale et les nouvelles valeurs de classification. La plage des valeurs peut en outre être définie sur pixels NoData.",
	"@@Remap_Output-Field_tag0@@": "Choisissez le champ qui sera utilisé comme valeur classifiée en sortie.",
	"@@Remap_Raster_tag0@@": "Raster en entrée.",
	"@@Remap_Remap-Definition-Type_tag0@@": "Choisissez l’option que vous souhaitez utiliser pour définir les valeurs de classification :",
	"@@Remap_Remap-Definition-Type_tag1@@": "Liste : spécifier une plage de valeurs de pixel à apparier à une valeur de pixel en sortie",
	"@@Remap_Remap-Table-Type_tag0@@": "Choisissez le type de table que vous utiliserez pour classifier votre raster en entrée :",
	"@@Remap_Remap-Table-Type_tag1@@": "Simple : utilise la <strong>Table de classification</strong> en entrée pour apparier les valeurs de pixels du <strong>Champ en entrée</strong> avec la valeur correspondante dans le paramètre <strong>Champ en sortie</strong>. Cette méthode met en cache la table de classification afin d’accroître la rapidité d’exécution.",
	"@@Remap_Remap-Table-Type_tag8@@": "Dynamique : cette méthode ne met pas en cache la table de classification et effectue une requête chaque fois que l’utilisateur effectue un déplacement, zoom ou actualise la carte. Si la table est modifiée, la demande suivante peut classifier dynamiquement les valeurs en conséquence.",
	"@@Remap_Remap-Table-Type_tag9@@": "Réaffectation : une table spécifique est utilisée pour le processus de reclassification, dans lequel chaque ligne de la table n’est reclassée qu’en fonction de chaque limite d’entité.",
	"@@Remap_Remap-Table_tag0@@": "Accédez à la table qui définit vos valeurs de classification.",
	"@@Reproject_Raster_tag0@@": "Le jeu de données raster à reprojeter ou ré-échantilloner.",
	"@@Reproject_Spatial-Reference_tag0@@": "Système de coordonnées utilisé pour reprojeter les données.",
	"@@Reproject_X-Cellsize_tag0@@": "Dimension x dans laquelle les données doivent être rééchantillonnées. Ce paramètre est facultatif. Si la valeur est inférieure ou égale à 0, l’enveloppe en sortie (étendue et tailles de cellule) est calculée à partir du raster en entrée.",
	"@@Reproject_X-Registration-Point_tag0@@": "Coordonnée x utilisée pour définir l’angle supérieur gauche du jeu de données. Cette coordonnée doit être définie dans les unités de la nouvelle référence spatiale. Si les paramètres <strong>Taille de cellule X</strong> et <strong>Taille de cellule Y</strong> sont tous deux supérieurs à 0, ils sont utilisés avec les paramètres <strong>Point de calage X</strong> et <strong>Point de calage Y</strong> pour définir l’enveloppe en sortie.",
	"@@Reproject_Y-Cellsize_tag0@@": "Dimension y dans laquelle les données doivent être rééchantillonnées. Ce paramètre est facultatif. Si la valeur est inférieure ou égale à 0, l’enveloppe en sortie (étendue et tailles de cellule) est calculée à partir du raster en entrée.",
	"@@Reproject_Y-Registration-Point_tag0@@": "Coordonnée y utilisée pour définir l’angle supérieur gauche du jeu de données. Cette coordonnée doit être définie dans les unités de la nouvelle référence spatiale. Si les paramètres <strong>Taille de cellule X</strong> et <strong>Taille de cellule Y</strong> sont tous deux supérieurs à 0, ils sont utilisés avec les paramètres <strong>Point de calage X</strong> et <strong>Point de calage Y</strong> pour définir l’enveloppe en sortie.",
	"@@Resample_Input-Cellsize_tag0@@": "Taille de cellule (pixel) du raster en entrée.",
	"@@Resample_Output-Cellsize_tag0@@": "La taille de la cellule (pixel) du raster en sortie. La taille de cellule peut être modifiée, mais l’étendue du jeu de données raster reste identique. Le ré-échantillonnage à partir d'une taille de cellule définie par l'utilisateur peut s'avérer beaucoup plus lent que la valeur par défaut du système, car le ré-échantillonnage par défaut du système traite la quantité minimale de données à partir de la résolution la plus proche possible.",
	"@@Resample_Raster_tag0@@": "Le raster en entrée à ré-échantilloner.",
	"@@Resample_Resampling-Type_tag0@@": "<strong>Voisin le plus proche</strong> : calcule la valeur du pixel en sortie grâce au pixel en entrée le plus proche. Les pixels NoData ne sont pas modifiés dans le jeu de données raster en sortie. Il s’agit de l’option par défaut.",
	"@@Resample_Resampling-Type_tag2@@": "<strong>Interpolation bilinéaire</strong> : calcule la valeur du pixel en utilisant la valeur de distance pondérée des quatre pixels les plus proches. L’exécution de cette méthode est efficace au point de vue du calcul.",
	"@@Resample_Resampling-Type_tag4@@": "<strong>Convolution cubique</strong> : détermine la nouvelle valeur d’un pixel en faisant passer une courbe lissée par les centres des 16 pixels en entrée les plus proches.",
	"@@Resample_Resampling-Type_tag6@@": "<strong>Majorité</strong> : calcule la valeur du pixel en utilisant la valeur de pixel majoritaire des 16 pixels les plus proches. Les pixels NoData ne sont pas modifiés dans le jeu de données raster en sortie.",
	"@@Resample_Resampling-Type_tag8@@": "<strong>Interpolation bilinéaire Plus</strong> : utilise l’<strong>Interpolation bilinéaire</strong>, mais les pixels le long des segments sont définis sur la valeur NoData et ne sont ni répliqués ni pris en compte dans le calcul. Utilisez l’<strong>Interpolation bilinéaire Plus</strong> pour les données tuilées car les segments seront mieux ajustés.",
	"@@Resample_Resampling-Type_tag14@@": "<strong>Flou gaussien</strong> : applique une convolution gaussienne au raster source et calcule la valeur du pixel en utilisant la valeur de distance pondérée des quatre pixels les plus proches du raster flou. Cette méthode est appropriée pour supprimer le bruit dans les données rééchantillonnées et pour sous-échantillonner afin d’obtenir une taille de pixel plus grande.",
	"@@Resample_Resampling-Type_tag16@@": "<strong>Flou gaussien Plus</strong> : applique la méthode de <strong>Flou gaussien</strong>, mais les pixels le long des segments sont définis sur la valeur NoData et ne sont ni répliqués ni pris en compte dans le calcul. Utilisez le <strong>Flou gaussien Plus</strong> pour les données tuilées car les segments seront mieux ajustés.",
	"@@Resample_Resampling-Type_tag22@@": "<strong>Moyenne</strong> : calcule les valeurs des pixels en utilisant la valeur moyenne de tous les pixels superposés, pour chaque pixel cible.",
	"@@Resample_Resampling-Type_tag24@@": "<strong>Minimum</strong> : calcule la valeur du pixel en utilisant la valeur minimale de tous les pixels superposés. Les pixels NoData ne sont pas modifiés dans le jeu de données raster en sortie.",
	"@@Resample_Resampling-Type_tag26@@": "<strong>Maximum</strong> : adaptée aux données continues, cette méthode produit une image en sortie plus lisse que la méthode de rééchantillonnage par le voisin le plus proche.",
	"@@Resample_Resampling-Type_tag28@@": "<strong>Moyenne vectorielle</strong> : calcule la moyenne vectorielle de magnitude-direction en utilisant tous les pixels impliqués. Cette méthode s’applique uniquement à deux rasters bandes représentant la magnitude et la direction. Elle convertit d’abord la magnitude-direction en U-V, puis prend la moyenne arithmétique de tous les pixels impliqués pour obtenir l’U-V du pixel cible et le reconvertir en magnitude-direction.",
	"@@Round-Down_Cellsize-Type_tag0@@": "Choisissez la taille de cellule à utiliser dans le raster en sortie. Si les tailles des cellules en entrée sont identiques, toutes les options donnent les mêmes résultats.",
	"@@Round-Down_Cellsize-Type_tag1@@": "Premier de : utilise la première taille de cellule des rasters en entrée.",
	"@@Round-Down_Cellsize-Type_tag2@@": "Dernier de : utilise la dernière taille de cellule des rasters en entrée.",
	"@@Round-Down_Cellsize-Type_tag3@@": "Max de : utilise la plus grande taille de cellule de tous les rasters en entrée. Il s’agit de l’option par défaut.",
	"@@Round-Down_Cellsize-Type_tag4@@": "Moyenne de : utilise la taille de cellule moyenne de tous les rasters en entrée.",
	"@@Round-Down_Cellsize-Type_tag5@@": "Mini de : utilise la plus petite taille de cellule de tous les rasters en entrée.",
	"@@Round-Down_Extent-Type_tag0@@": "Sélectionnez l’étendue à utiliser dans le raster en sortie.",
	"@@Round-Down_Extent-Type_tag1@@": "Premier de : utilise l’étendue du premier raster en entrée pour déterminer l’étendue de traitement.",
	"@@Round-Down_Extent-Type_tag2@@": "Intersection de : utilise l’étendue des pixels superposés pour déterminer l’étendue de traitement. Il s’agit de l’option par défaut.",
	"@@Round-Down_Extent-Type_tag3@@": "Dernier de : utilise l’étendue du dernier raster en entrée pour déterminer l’étendue de traitement.",
	"@@Round-Down_Extent-Type_tag4@@": "Union de : utilise l’étendue de tous les rasters pour déterminer l’étendue de traitement.",
	"@@Round-Down_Raster_tag0@@": "Valeurs en entrée à arrondir au nombre inférieur.",
	"@@Round-Up_Cellsize-Type_tag0@@": "Choisissez la taille de cellule à utiliser dans le raster en sortie. Si les tailles des cellules en entrée sont identiques, toutes les options donnent les mêmes résultats.",
	"@@Round-Up_Cellsize-Type_tag1@@": "Premier de : utilise la première taille de cellule des rasters en entrée.",
	"@@Round-Up_Cellsize-Type_tag2@@": "Dernier de : utilise la dernière taille de cellule des rasters en entrée.",
	"@@Round-Up_Cellsize-Type_tag3@@": "Max de : utilise la plus grande taille de cellule de tous les rasters en entrée. Il s’agit de l’option par défaut.",
	"@@Round-Up_Cellsize-Type_tag4@@": "Moyenne de : utilise la taille de cellule moyenne de tous les rasters en entrée.",
	"@@Round-Up_Cellsize-Type_tag5@@": "Mini de : utilise la plus petite taille de cellule de tous les rasters en entrée.",
	"@@Round-Up_Extent-Type_tag0@@": "Sélectionnez l’étendue à utiliser dans le raster en sortie.",
	"@@Round-Up_Extent-Type_tag1@@": "Premier de : utilise l’étendue du premier raster en entrée pour déterminer l’étendue de traitement.",
	"@@Round-Up_Extent-Type_tag2@@": "Intersection de : utilise l’étendue des pixels superposés pour déterminer l’étendue de traitement. Il s’agit de l’option par défaut.",
	"@@Round-Up_Extent-Type_tag3@@": "Dernier de : utilise l’étendue du dernier raster en entrée pour déterminer l’étendue de traitement.",
	"@@Round-Up_Extent-Type_tag4@@": "Union de : utilise l’étendue de tous les rasters pour déterminer l’étendue de traitement.",
	"@@Round-Up_Raster_tag0@@": "Valeurs en entrée à arrondir au nombre supérieur.",
	"@@Segment-Mean-Shift_Minimum-Segment-Size-in-Pixels_tag0@@": "Taille minimale du segment exprimée en pixels. Cette valeur est associée à votre unité de mappage minimale et permet de filtrer les blocs de pixels plus petits. Tous les segments dont la taille est inférieure à la valeur précisée fusionnent les plus petits segments avec leur segment voisin le mieux adapté.",
	"@@Segment-Mean-Shift_Raster_tag0@@": "Raster en entrée à segmenter.",
	"@@Segment-Mean-Shift_Segment-boundaries-only_tag0@@": "Les limites du segment dessinent une isoligne autour de chaque segment. Cela permet de distinguer des segments adjacents de couleurs similaires.",
	"@@Segment-Mean-Shift_Segment-boundaries-only_tag1@@": "Non sélectionné : les limites des segments ne s’affichent pas. Il s’agit de l’option par défaut.",
	"@@Segment-Mean-Shift_Segment-boundaries-only_tag2@@": "Sélectionné : les limites des segments s’affichent avec des isolignes noires autour de chaque segment.",
	"@@Segment-Mean-Shift_Spatial-Detail_tag0@@": "Importance relative de la séparation des objets en fonction de caractéristiques spatiales.",
	"@@Segment-Mean-Shift_Spatial-Detail_tag1@@": "Les valeurs entières correctes sont comprises entre 1 et 20. Plus les valeurs sont faibles, plus les classes sont grandes et le lissage important. Une valeur élevée convient pour distinguer des entités petites et agrégées. Par exemple, dans une scène urbaine, vous pouvez classer une surface imperméable générale à l’aide d’une valeur de détail spatial plus petite ou classer des bâtiments et des routes en tant que classes séparées à l’aide d’une valeur de détail spatial supérieure.",
	"@@Segment-Mean-Shift_Spectral-Detail_tag0@@": "Importance relative de la séparation des objets en fonction de caractéristiques de couleur.",
	"@@Segment-Mean-Shift_Spectral-Detail_tag1@@": "Les valeurs à virgule flottante valides sont comprises entre 1,0 et 20,0. Plus les valeurs sont faibles, plus les classes sont grandes et le lissage important. Il convient d’attribuer une valeur élevée lorsque vous souhaitez distinguer les entités dont les caractéristiques spectrales sont relativement similaires. Par exemple, l’utilisation d’une valeur de détail spectral élevée dans une scène en zone forestière vous permet de mieux distinguer les espèces d’arbres.",
	"@@Segment-Mean-Shift_maximumsegmentsizeinpixels_tag0@@": "<p>Taille maximale d’un segment. Les segments de taille supérieure à celle spécifiée seront divisés. Utilisez ce paramètre pour éviter les artefacts dans la couche en sortie qui résultent de segments volumineux. La valeur par défaut est -1.</p>",
	"@@Sentinel-1-Radiometric-Calibration_Calibration-Type_tag0@@": "Sélectionnez l’un des quatre types de calibrage :",
	"@@Sentinel-1-Radiometric-Calibration_Calibration-Type_tag1@@": "<strong>Beta nought</strong> : produit une sortie contenant le coefficient de luminosité du radar.",
	"@@Sentinel-1-Radiometric-Calibration_Calibration-Type_tag3@@": "<strong>Sigma nought</strong> : rétrodiffusion renvoyée à l’antenne à partir de la surface d’une unité au sol, liée à la distance au sol.",
	"@@Sentinel-1-Radiometric-Calibration_Calibration-Type_tag5@@": "<strong>Gamma</strong> : mesure de l’énergie émise et renvoyée utile pour déterminer les modèles d’antenne.",
	"@@Sentinel-1-Radiometric-Calibration_Calibration-Type_tag7@@": "<strong>Aucun</strong> : aucune correction n’est appliquée. Il s’agit de l’option par défaut.",
	"@@Sentinel-1-Radiometric-Calibration_Raster_tag0@@": "Le raster en entrée GRD ou SLC Sentinel-1 de niveau 1 que vous souhaitez traiter.",
	"@@Sentinel-1-Radiometric-Calibration_Raster_tag1@@": "La fonction utilisera le fichier LUT pour appliquer la correction thermique ou pour supprimer la correction, selon le contenu du fichier LUT.",
	"@@Sentinel-1-Thermal-Noise-Removal_Raster_tag0@@": "Le raster en entrée Sentinel-1 que vous souhaitez traiter.",
	"@@Sentinel-1-Thermal-Noise-Removal_Raster_tag1@@": "La fonction utilisera le fichier LUT pour appliquer la correction thermique ou pour supprimer la correction, selon le contenu du fichier LUT.",
	"@@Set-Null_Cellsize-Type_tag0@@": "Choisissez la taille de cellule à utiliser dans le raster en sortie. Si les tailles des cellules en entrée sont identiques, toutes les options donnent les mêmes résultats.",
	"@@Set-Null_Cellsize-Type_tag1@@": "Premier de : utilise la première taille de cellule des rasters en entrée.",
	"@@Set-Null_Cellsize-Type_tag2@@": "Dernier de : utilise la dernière taille de cellule des rasters en entrée.",
	"@@Set-Null_Cellsize-Type_tag3@@": "Max de : utilise la plus grande taille de cellule de tous les rasters en entrée. Il s’agit de l’option par défaut.",
	"@@Set-Null_Cellsize-Type_tag4@@": "Moyenne de : utilise la taille de cellule moyenne de tous les rasters en entrée.",
	"@@Set-Null_Cellsize-Type_tag5@@": "Mini de : utilise la plus petite taille de cellule de tous les rasters en entrée.",
	"@@Set-Null_Extent-Type_tag0@@": "Sélectionnez l’étendue à utiliser dans le raster en sortie.",
	"@@Set-Null_Extent-Type_tag1@@": "Premier de : utilise l’étendue du premier raster en entrée pour déterminer l’étendue de traitement.",
	"@@Set-Null_Extent-Type_tag2@@": "Intersection de : utilise l’étendue des pixels superposés pour déterminer l’étendue de traitement. Il s’agit de l’option par défaut.",
	"@@Set-Null_Extent-Type_tag3@@": "Dernier de : utilise l’étendue du dernier raster en entrée pour déterminer l’étendue de traitement.",
	"@@Set-Null_Extent-Type_tag4@@": "Union de : utilise l’étendue de tous les rasters pour déterminer l’étendue de traitement.",
	"@@Set-Null_False-Raster_tag0@@": "Entrée dont les valeurs seront utilisées en tant que valeurs de pixel en sortie si la condition est fausse. Il peut s’agir d’un raster de type entier, à virgule flottante ou d’une valeur constante.",
	"@@Set-Null_Raster_tag0@@": "Le raster en entrée qui représente le résultat booléen d’une fonction raster mathématique logique. Les valeurs sont égales à 1 (pour Vrai) ou à 0 (pour Faux). Il peut s'agir d'un entier ou d'un raster en virgule flottante.",
	"@@Shaded-Relief_Altitude_tag0@@": "L'altitude représente l'angle solaire de l'altitude au-dessus de la ligne d'horizon et s'étend de 0 à 90 degrés. Une valeur de 0 degrés indique que le soleil est sur l'horizon, c'est-à-dire sur le même plan horizontal que le cadre de référence. Une valeur de 90 degrés indique que le soleil est directement au-dessus. La valeur par défaut est de 45 degrés, au-dessus de l'horizon.",
	"@@Shaded-Relief_Azimuth_tag0@@": "La propriété Azimut définit la position relative du soleil par rapport à l'horizon (en degrés). Cette position est indiquée par l'angle du soleil mesuré dans le sens horaire à partir du nord. Un azimut de 0 degré indique le Nord, l'Est est à 90 degrés, le Sud à 180 degrés et l'Ouest à 270 degrés.",
	"@@Shaded-Relief_Color-Scheme-Type_tag0@@": "Spécifiez si un dégradé de couleurs ou une palette de couleurs sera utilisé pour représenter le relief ombré.",
	"@@Shaded-Relief_Color-Scheme-Type_tag1@@": "<strong>Dégradé de couleurs</strong> : lorsque vous choisissez <strong>Dégradé de couleurs</strong>, vous êtes invité à sélectionner le dégradé de couleurs approprié.",
	"@@Shaded-Relief_Color-Scheme-Type_tag5@@": "<strong>Palette de couleurs</strong> : lorsque vous choisissez <strong>Palette de couleurs</strong>, vous êtes invité à spécifier le fichier de palette de couleurs à utiliser.",
	"@@Shaded-Relief_Disable-default-edge-pixel-interpolation_tag0@@": "Spécifiez si l’interpolation des pixels de tronçon par défaut est désactivée.",
	"@@Shaded-Relief_Disable-default-edge-pixel-interpolation_tag1@@": "Non coché : le rééchantillonnage bilinéaire est appliqué uniformément pour rééchantillonner le relief ombré. Il s’agit de l’option par défaut.",
	"@@Shaded-Relief_Disable-default-edge-pixel-interpolation_tag2@@": "Coché : le rééchantillonnage bilinéaire est utilisé au sein du relief ombré, sauf le long des tronçons des rasters ou à côté des pixels de valeur NoData. Ces pixels sont renseignés avec NoData, car ils réduisent les effets de tronçons abrupts pouvant se produire.",
	"@@Shaded-Relief_Disable-default-edge-pixel-interpolation_tag3@@": "Cette option évite les artefacts de rééchantillonnage qui peuvent se produire le long des tronçons d'un raster. Les pixels en sortie le long du tronçon d'un raster ou à côté de pixels sans valeur sont renseignés avec NoData. Il est par conséquent recommandé d'utiliser cette option uniquement lorsque d'autres rasters avec des pixels superposés sont disponibles. Lorsque des pixels superposés sont disponibles, ces surfaces de NoData affichent les pixels superposés au lieu d'être vides.",
	"@@Shaded-Relief_Raster_tag0@@": "Le raster d’altitude en entrée.",
	"@@Shaded-Relief_Scaling_tag0@@": "Le résultat ombré est mis à l'échelle dynamiquement en ajustant le facteur z grâce à l'une de deux options :",
	"@@Shaded-Relief_Scaling_tag1@@": "<strong>Aucune</strong> : aucune mise à l’échelle n’est appliquée. Cette option est idéale pour un jeu de données raster unique qui couvre une zone locale. Cette option n’est pas recommandée pour les jeux de données mondiaux dont l’élévation varie beaucoup ou pour les cartes à plusieurs échelles, car elle génère un relief de terrain avec des variations restreintes à de petites échelles.",
	"@@Shaded-Relief_Scaling_tag3@@": "<strong>Ajusté</strong> : applique un ajustement non linéaire en utilisant les valeurs de <strong>Puissance de taille de pixel</strong> et de <strong>Facteur de taille de pixel</strong> par défaut, qui tiennent compte des changements d’altitude (échelle) lors d’un zoom avant ou arrière. L’option <strong>Ajusté</strong> est recommandée en cas d’utilisation d’un jeu de données mondial.",
	"@@Shaded-Relief_Z-Factor_tag0@@": "Le facteur Z est un facteur d'échelle utilisé pour convertir les valeurs d'altitude dans deux buts :",
	"@@Shaded-Relief_Z-Factor_tag1@@": "pour convertir les unités altimétriques (telles que les mètres ou les pieds) en unités de coordonnées horizontales du jeu de données, qui peuvent être des pieds, des mètres ou des degrés ;",
	"@@Shaded-Relief_Z-Factor_tag2@@": "pour ajouter une exagération verticale comme effet visuel.",
	"@@Shaded-Relief_Z-Factor_tag3@@": "Le résultat ombré est mis à l'échelle dynamiquement en ajustant le facteur z grâce à l'une de deux options :",
	"@@Shaded-Relief_Z-Factor_tag4@@": "<strong>Aucune</strong> : aucune mise à l’échelle n’est appliquée. Cette option est idéale pour un jeu de données raster unique qui couvre une zone locale. Cette option n’est pas recommandée pour les jeux de données mondiaux dont l’élévation varie beaucoup ou pour les cartes à plusieurs échelles, car elle génère un relief de terrain avec des variations restreintes à de petites échelles.",
	"@@Shaded-Relief_Z-Factor_tag6@@": "<strong>Ajusté</strong> : applique un ajustement non linéaire en utilisant les valeurs de <strong>Puissance de taille de pixel</strong> et de <strong>Facteur de taille de pixel</strong> par défaut, qui tiennent compte des changements d’altitude (échelle) lors d’un zoom avant ou arrière. L’option <strong>Ajusté</strong> est recommandée en cas d’utilisation d’un jeu de données mondial.",
	"@@Shaded-Relief_hillshadetype_tag0@@": "Contrôle la source d’éclairage de l’ombrage.",
	"@@Shaded-Relief_hillshadetype_tag1@@": "<strong>Traditionnel</strong> : calcule l’ombrage à partir d’une seule direction d’éclairage. Vous pouvez définir les options <strong>Azimut</strong> et <strong>Altitude</strong> pour contrôler l’emplacement de la source d’éclairage. Il s’agit de l’option par défaut.",
	"@@Shaded-Relief_hillshadetype_tag2@@": "<strong>Multidirectionnel</strong> : associe la lumière de plusieurs sources pour représenter une visualisation optimisée du terrain.",
	"@@Shaded-Relief_PSPower_tag0@@": "L’option <strong>Puissance de taille de pixel</strong> tient compte des changements d’altitude (ou d’échelle) à mesure que des zooms avant ou arrière sont appliqués sur l’affichage cartographique. Il s’agit de l’exposant appliqué au terme de taille de pixel dans l’équation qui contrôle la fréquence à laquelle le <strong>Facteur Z</strong> change pour éviter les pertes de relief significatives.",
	"@@Shaded-Relief_PSPower_tag1@@": "Ce paramètre est valide uniquement si le type <strong>Mise à l’échelle</strong> est défini sur <strong>Ajusté</strong>. La valeur par défaut est 0,664.",
	"@@Shaded-Relief_PSZFactor_tag0@@": "L’option <strong>Facteur de taille de pixel</strong> tient compte des changements d’échelle à mesure que des zooms avant ou arrière sont appliqués sur l’affichage cartographique. Elle contrôle la fréquence à laquelle le <strong>Facteur Z</strong> change.",
	"@@Shaded-Relief_PSZFactor_tag1@@": "Ce paramètre est valide uniquement si le type <strong>Mise à l’échelle</strong> est défini sur <strong>Ajusté</strong>. La valeur par défaut est 0,024.",
	"@@Sin_Cellsize-Type_tag0@@": "Choisissez la taille de cellule à utiliser dans le raster en sortie. Si les tailles des cellules en entrée sont identiques, toutes les options donnent les mêmes résultats.",
	"@@Sin_Cellsize-Type_tag1@@": "Premier de : utilise la première taille de cellule des rasters en entrée.",
	"@@Sin_Cellsize-Type_tag2@@": "Dernier de : utilise la dernière taille de cellule des rasters en entrée.",
	"@@Sin_Cellsize-Type_tag3@@": "Max de : utilise la plus grande taille de cellule de tous les rasters en entrée. Il s’agit de l’option par défaut.",
	"@@Sin_Cellsize-Type_tag4@@": "Moyenne de : utilise la taille de cellule moyenne de tous les rasters en entrée.",
	"@@Sin_Cellsize-Type_tag5@@": "Mini de : utilise la plus petite taille de cellule de tous les rasters en entrée.",
	"@@Sin_Extent-Type_tag0@@": "Sélectionnez l’étendue à utiliser dans le raster en sortie.",
	"@@Sin_Extent-Type_tag1@@": "Premier de : utilise l’étendue du premier raster en entrée pour déterminer l’étendue de traitement.",
	"@@Sin_Extent-Type_tag2@@": "Intersection de : utilise l’étendue des pixels superposés pour déterminer l’étendue de traitement. Il s’agit de l’option par défaut.",
	"@@Sin_Extent-Type_tag3@@": "Dernier de : utilise l’étendue du dernier raster en entrée pour déterminer l’étendue de traitement.",
	"@@Sin_Extent-Type_tag4@@": "Union de : utilise l’étendue de tous les rasters pour déterminer l’étendue de traitement.",
	"@@Sin_Raster_tag0@@": "Entrée pour laquelle calculer les valeurs de sinus.",
	"@@SinH_Cellsize-Type_tag0@@": "Choisissez la taille de cellule à utiliser dans le raster en sortie. Si les tailles des cellules en entrée sont identiques, toutes les options donnent les mêmes résultats.",
	"@@SinH_Cellsize-Type_tag1@@": "Premier de : utilise la première taille de cellule des rasters en entrée.",
	"@@SinH_Cellsize-Type_tag2@@": "Dernier de : utilise la dernière taille de cellule des rasters en entrée.",
	"@@SinH_Cellsize-Type_tag3@@": "Max de : utilise la plus grande taille de cellule de tous les rasters en entrée. Il s’agit de l’option par défaut.",
	"@@SinH_Cellsize-Type_tag4@@": "Moyenne de : utilise la taille de cellule moyenne de tous les rasters en entrée.",
	"@@SinH_Cellsize-Type_tag5@@": "Mini de : utilise la plus petite taille de cellule de tous les rasters en entrée.",
	"@@SinH_Extent-Type_tag0@@": "Sélectionnez l’étendue à utiliser dans le raster en sortie.",
	"@@SinH_Extent-Type_tag1@@": "Premier de : utilise l’étendue du premier raster en entrée pour déterminer l’étendue de traitement.",
	"@@SinH_Extent-Type_tag2@@": "Intersection de : utilise l’étendue des pixels superposés pour déterminer l’étendue de traitement. Il s’agit de l’option par défaut.",
	"@@SinH_Extent-Type_tag3@@": "Dernier de : utilise l’étendue du dernier raster en entrée pour déterminer l’étendue de traitement.",
	"@@SinH_Extent-Type_tag4@@": "Union de : utilise l’étendue de tous les rasters pour déterminer l’étendue de traitement.",
	"@@SinH_Raster_tag0@@": "Entrée pour laquelle calculer les valeurs de sinus hyperbolique.",
	"@@Sink_Flow-Direction-Raster_tag0@@": "Raster en entrée qui montre la direction du flux sortant de chaque cellule.",
	"@@Sink_Flow-Direction-Raster_tag1@@": "Le raster de direction de flux peut être créé en exécutant la fonction <strong>Direction de flux</strong>.",
	"@@Slope_DEM_tag0@@": "Le raster d’altitude en entrée.",
	"@@Slope_Disable-default-edge-pixel-interpolation_tag0@@": "Cette option évite les artefacts de rééchantillonnage qui peuvent se produire le long des tronçons d'un raster. Les pixels en sortie le long du tronçon d'un raster ou à côté de pixels sans valeur sont renseignés avec NoData. Il est par conséquent recommandé d'utiliser cette option uniquement lorsque d'autres rasters avec des pixels superposés sont disponibles. Lorsque des pixels superposés sont disponibles, ces surfaces de NoData affichent les pixels superposés au lieu d'être vides.",
	"@@Slope_Disable-default-edge-pixel-interpolation_tag1@@": "Non sélectionnée : le ré-échantillonnage bilinéaire sera appliqué uniformément pour ré-échantillonner la pente. Il s’agit de l’option par défaut.",
	"@@Slope_Disable-default-edge-pixel-interpolation_tag2@@": "Sélectionnée : le ré-échantillonnage bilinéaire sera utilisé dans la pente, sauf le long des limites des rasters ou en dehors des pixels de valeur NoData. Ces pixels sont renseignés avec NoData, car ils réduisent les effets de tronçons abrupts pouvant se produire.",
	"@@Slope_Scaling_tag0@@": "L’inclinaison de la pente peut être générée sous la forme d’une valeur exprimée en degrés ou en pourcentage d’élévation. Il existe trois options pour la <strong>Mise à l’échelle</strong> :",
	"@@Slope_Scaling_tag3@@": "<strong>Degré</strong> : l’inclinaison de la pente est calculée en degrés. Les valeurs sont comprises entre 0 et 90.",
	"@@Slope_Scaling_tag5@@": "<strong>Pourcentage d’élévation</strong> : l’inclinaison de la pente est calculée en valeurs de pourcentage. Les valeurs sont comprises entre 0 et l’infini. Une surface plane correspond à un pourcentage d’élévation de 0 pour cent et une surface à 45 degrés à un pourcentage d’élévation de 100 pour cent. Au fur et à mesure que la surface devient de plus en plus verticale, le pourcentage d’élévation augmente.",
	"@@Slope_Scaling_tag7@@": "<strong>Mise à l’échelle</strong> : l’inclinaison de la pente est calculée de la même manière qu’avec DEGRÉ, mais le facteur z est ajusté pour l’échelle. Cette option utilise les valeurs de <strong>Puissance de taille de pixel</strong> et de <strong>Facteur de taille de pixel</strong>, qui tiennent compte des changements de résolution (échelle) lors d’un zoom avant ou arrière. Elle est recommandée lors de l’utilisation de jeux de données au niveau mondial, plus particulièrement si vous utilisez une pente comme surface de visualisation.",
	"@@Slope_Scaling_tag13@@": "Le facteur z est ajusté à l'aide de l'équation suivante :",
	"@@Slope_Scaling_tag14@@": "Facteur Z ajusté = (facteur Z) + (taille de pixel)",
	"@@Slope_Scaling_tag15@@": "x (Facteur de taille de pixel)",
	"@@Slope_Scaling_tag16@@": "Puissance de la taille de pixel",
	"@@Slope_Z-Factor_tag0@@": "Le <strong>Facteur Z</strong> est un facteur d’échelle utilisé pour convertir les valeurs d’élévation dans deux buts :",
	"@@Slope_Z-Factor_tag3@@": "pour convertir les unités altimétriques (telles que les mètres ou les pieds) en unités de coordonnées horizontales du jeu de données, qui peuvent être des pieds, des mètres ou des degrés ;",
	"@@Slope_Z-Factor_tag4@@": "pour ajouter une exagération verticale comme effet visuel.",
	"@@Slope_PSPower_tag0@@": "L’option <strong>Puissance de taille de pixel</strong> tient compte des changements d’altitude (ou d’échelle) à mesure que des zooms avant ou arrière sont appliqués sur l’affichage cartographique. Il s’agit de l’exposant appliqué au terme de taille de pixel dans l’équation qui contrôle la fréquence à laquelle le <strong>Facteur Z</strong> change pour éviter les pertes de relief significatives.",
	"@@Slope_PSPower_tag1@@": "Ce paramètre est valide uniquement si le type <strong>Mise à l’échelle</strong> est défini sur <strong>Avec mise à l’échelle</strong>. La valeur par défaut est 0,664.",
	"@@Slope_PSZFactor_tag0@@": "L’option <strong>Facteur de taille de pixel</strong> tient compte des changements d’échelle à mesure que des zooms avant ou arrière sont appliqués sur l’affichage cartographique. Elle contrôle la fréquence à laquelle le <strong>Facteur Z</strong> change.",
	"@@Slope_PSZFactor_tag1@@": "Ce paramètre est valide uniquement si le type <strong>Mise à l’échelle</strong> est défini sur <strong>Avec mise à l’échelle</strong>. La valeur par défaut est 0,024.",
	"@@Snap-Pour-Point_Flow-Accumulation-Raster_tag0@@": "Couche raster d’accumulation de flux en entrée.",
	"@@Snap-Pour-Point_Flow-Accumulation-Raster_tag1@@": "Celui-ci peut être créé avec la fonction <strong>Accumulation de flux</strong>.",
	"@@Snap-Pour-Point_Pour-Point-Field_tag0@@": "Champ utilisé pour attribuer des valeurs aux emplacements de points d'écoulement.",
	"@@Snap-Pour-Point_Pour-Point-Raster_tag0@@": "Emplacements de point d'écoulement en entrée qui seront capturés.",
	"@@Snap-Pour-Point_Pour-Point-Raster_tag1@@": "Pour une couche raster en entrée, toutes les cellules dont la valeur n’est pas NoData (qui ont une valeur) sont considérées comme des points d’écoulement et sont capturées.",
	"@@Snap-Pour-Point_Snap-Distance_tag0@@": "Distance maximale (en unités de carte) de recherche d’une cellule d’accumulation de flux plus élevée.",
	"@@Speckle_Additive-Noise-Mean_tag0@@": "Spécifie la valeur moyenne du bruit additif. Une valeur de moyenne de bruit plus élevée produit un lissage moindre, tandis qu’une valeur plus petite génère un lissage plus important.",
	"@@Speckle_Additive-Noise-Mean_tag1@@": "Ce paramètre est valide uniquement si l’option <strong>Type de filtre</strong> est définie sur <strong>Filtre Lee</strong> et que le <strong>Modèle de bruit</strong> est défini sur <strong>Bruit additif</strong> ou sur <strong>Bruit additif et multiplicatif</strong>. La valeur par défaut est 0.",
	"@@Speckle_Damping-Factor_tag0@@": "Spécifie l’étendue de l’effet d’humidité exponentielle sur le filtrage. Une valeur d’humidité plus élevée préserve mieux les tronçons mais génère un lissage moindre, tandis qu’une valeur moins élevée produit un plus grand lissage. La valeur 0 produit le même résultat qu'un filtre passe-bas.",
	"@@Speckle_Damping-Factor_tag1@@": "Ce paramètre est valide uniquement si l’option <strong>Type de filtre</strong> est définie sur <strong>Filtre Lee amélioré</strong> ou sur <strong>Filtre Frost</strong>. La valeur par défaut est 1.",
	"@@Speckle_Filter-Size_tag0@@": "Spécifie la taille de la fenêtre de pixel utilisée pour filtrer le bruit :",
	"@@Speckle_Filter-Size_tag1@@": "3x3",
	"@@Speckle_Filter-Size_tag2@@": "5x5",
	"@@Speckle_Filter-Size_tag3@@": "7x7",
	"@@Speckle_Filter-Size_tag4@@": "9x9",
	"@@Speckle_Filter-Size_tag5@@": "11x11",
	"@@Speckle_Filter-Type_tag0@@": "Spécifie le type de filtre à utiliser dans l’algorithme de lissage en vue de supprimer la granularité :",
	"@@Speckle_Filter-Type_tag1@@": "<strong>Filtre Lee</strong> : réduit la granularité en appliquant un filtre spatial à chaque pixel d’une image, ce qui filtre les données en fonction des statistiques locales calculées dans une fenêtre carrée. Ce filtre est utile pour lisser les données granuleuses qui comportent un composant additif et/ou multiplicatif. Il s’agit de l’option par défaut.",
	"@@Speckle_Filter-Type_tag3@@": "<strong>Filtre Lee amélioré</strong> : version adaptée du filtre Lee qui inclut les paramètres <strong>Facteur d’atténuation</strong> et <strong>Nombre de vues</strong>. Ce filtre est utile pour réduire la granularité tout en préservant les informations de texture.",
	"@@Speckle_Filter-Type_tag9@@": "<strong>Filtre Frost</strong> : réduit la granularité à l’aide d’un filtre symétrique circulaire d’atténuation exponentielle qui utilise des statistiques locales dans les fenêtres de chaque filtre. Ce filtre est utile pour réduire la granularité tout en préservant les segments dans les images radar.",
	"@@Speckle_Filter-Type_tag11@@": "<strong>Filtre Kuan</strong> : similaire au filtre Lee, ce filtre applique un filtre spatial à chaque pixel d’une image et filtre les données en fonction des statistiques locales calculées dans une fenêtre carrée. Ce filtre est utile pour réduire la granularité tout en préservant les segments dans les images radar.",
	"@@Speckle_Multiplicative-Noise-Mean_tag0@@": "Spécifie la valeur moyenne du bruit multiplicatif. Une valeur de moyenne de bruit plus élevée produit un lissage moindre, tandis qu’une valeur plus petite génère un lissage plus important.",
	"@@Speckle_Multiplicative-Noise-Mean_tag1@@": "Ce paramètre est valide uniquement si l’option <strong>Type de filtre</strong> est définie sur <strong>Filtre Lee</strong> et que le <strong>Modèle de bruit</strong> est défini sur <strong>Bruit additif</strong> ou sur <strong>Bruit additif et multiplicatif</strong>. La valeur par défaut est 1.",
	"@@Speckle_Noise-Model_tag0@@": "Spécifie le type de bruit qui réduit la qualité de l’image radar :",
	"@@Speckle_Noise-Model_tag1@@": "<strong>Bruit multiplicatif</strong> : bruit de signal aléatoire qui est multiplié dans le signal pertinent au cours de la capture ou de la transmission.",
	"@@Speckle_Noise-Model_tag3@@": "<strong>Bruit additif</strong> : bruit de signal aléatoire qui est ajouté au signal pertinent au cours de la capture ou de la transmission.",
	"@@Speckle_Noise-Model_tag5@@": "<strong>Bruit additif et multiplicatif</strong> : les deux modèles de bruit.",
	"@@Speckle_Noise-Variance_tag0@@": "Spécifie la variance de bruit de l’image radar.",
	"@@Speckle_Noise-Variance_tag1@@": "Ce paramètre est valide uniquement si l’option <strong>Type de filtre</strong> est définie sur <strong>Filtre Lee</strong> et que le <strong>Modèle de bruit</strong> est défini sur <strong>Bruit additif</strong> ou sur <strong>Bruit additif et multiplicatif</strong>. La valeur par défaut est 0,25.",
	"@@Speckle_Number-of-Looks_tag0@@": "Spécifie le nombre de vues de l’image, ce qui contrôle le lissage des images et estime la variance de bruit. Une valeur plus petite produit un plus grand lissage, tandis qu’une valeur plus élevée conserve davantage d’entités d’images.",
	"@@Speckle_Number-of-Looks_tag1@@": "Ce paramètre est valide uniquement si l’option <strong>Type de filtre</strong> est définie sur <strong>Filtre Lee</strong> et que le <strong>Modèle de bruit</strong> est défini sur <strong>Bruit multiplicatif</strong>, ou si l’option <strong>Type de filtre</strong> est définie sur <strong>Filtre Kuan</strong>. La valeur par défaut est 1.",
	"@@Speckle_Raster_tag0@@": "Raster en entrée.",
	"@@Spectral-Conversion_Conversion-Matrix_tag0@@": "Matrice utilisée pour convertir le raster en entrée.",
	"@@Spectral-Conversion_Conversion-Matrix_tag1@@": "L'équation utilisée pour effectuer cette conversion est la suivante :",
	"@@Spectral-Conversion_Conversion-Matrix_tag2@@": "Canal en sortie Band_R = Weight_P * Band_C",
	"@@Spectral-Conversion_Conversion-Matrix_tag3@@": "où :",
	"@@Spectral-Conversion_Conversion-Matrix_tag4@@": "Band_R est un canal en sortie, où R est un nombre compris entre 1 et le nombre de canaux en sortie.",
	"@@Spectral-Conversion_Conversion-Matrix_tag5@@": "Weight_P est une liste de pondérations délimitée par des virgules, 1 pour chaque canal en entrée. La somme des pondérations de chaque canal doit égaler la valeur 1.",
	"@@Spectral-Conversion_Conversion-Matrix_tag6@@": "Band_C est l'image en entrée, où C est un nombre compris entre 1 et le nombre de canaux de l'image en entrée.",
	"@@Spectral-Conversion_Raster_tag0@@": "Raster en entrée.",
	"@@Spectral-Conversion_Raster_tag1@@": "Il peut s’agir d’un jeu de données raster, d’une mosaïque ou d’un service d’imagerie.",
	"@@Spectral-Conversion_Size_tag0@@": "Nombre de lignes et de colonnes de la <strong>Matrice de conversion</strong>.",
	"@@Square_Cellsize-Type_tag0@@": "Choisissez la taille de cellule à utiliser dans le raster en sortie. Si les tailles des cellules en entrée sont identiques, toutes les options donnent les mêmes résultats.",
	"@@Square_Cellsize-Type_tag1@@": "Premier de : utilise la première taille de cellule des rasters en entrée.",
	"@@Square_Cellsize-Type_tag2@@": "Dernier de : utilise la dernière taille de cellule des rasters en entrée.",
	"@@Square_Cellsize-Type_tag3@@": "Max de : utilise la plus grande taille de cellule de tous les rasters en entrée. Il s’agit de l’option par défaut.",
	"@@Square_Cellsize-Type_tag4@@": "Moyenne de : utilise la taille de cellule moyenne de tous les rasters en entrée.",
	"@@Square_Cellsize-Type_tag5@@": "Mini de : utilise la plus petite taille de cellule de tous les rasters en entrée.",
	"@@Square_Extent-Type_tag0@@": "Sélectionnez l’étendue à utiliser dans le raster en sortie.",
	"@@Square_Extent-Type_tag1@@": "Premier de : utilise l’étendue du premier raster en entrée pour déterminer l’étendue de traitement.",
	"@@Square_Extent-Type_tag2@@": "Intersection de : utilise l’étendue des pixels superposés pour déterminer l’étendue de traitement. Il s’agit de l’option par défaut.",
	"@@Square_Extent-Type_tag3@@": "Dernier de : utilise l’étendue du dernier raster en entrée pour déterminer l’étendue de traitement.",
	"@@Square_Extent-Type_tag4@@": "Union de : utilise l’étendue de tous les rasters pour déterminer l’étendue de traitement.",
	"@@Square_Raster_tag0@@": "Valeurs en entrée à mettre au carré.",
	"@@Square-Root_Cellsize-Type_tag0@@": "Choisissez la taille de cellule à utiliser dans le raster en sortie. Si les tailles des cellules en entrée sont identiques, toutes les options donnent les mêmes résultats.",
	"@@Square-Root_Cellsize-Type_tag1@@": "Premier de : utilise la première taille de cellule des rasters en entrée.",
	"@@Square-Root_Cellsize-Type_tag2@@": "Dernier de : utilise la dernière taille de cellule des rasters en entrée.",
	"@@Square-Root_Cellsize-Type_tag3@@": "Max de : utilise la plus grande taille de cellule de tous les rasters en entrée. Il s’agit de l’option par défaut.",
	"@@Square-Root_Cellsize-Type_tag4@@": "Moyenne de : utilise la taille de cellule moyenne de tous les rasters en entrée.",
	"@@Square-Root_Cellsize-Type_tag5@@": "Mini de : utilise la plus petite taille de cellule de tous les rasters en entrée.",
	"@@Square-Root_Extent-Type_tag0@@": "Sélectionnez l’étendue à utiliser dans le raster en sortie.",
	"@@Square-Root_Extent-Type_tag1@@": "Premier de : utilise l’étendue du premier raster en entrée pour déterminer l’étendue de traitement.",
	"@@Square-Root_Extent-Type_tag2@@": "Intersection de : utilise l’étendue des pixels superposés pour déterminer l’étendue de traitement. Il s’agit de l’option par défaut.",
	"@@Square-Root_Extent-Type_tag3@@": "Dernier de : utilise l’étendue du dernier raster en entrée pour déterminer l’étendue de traitement.",
	"@@Square-Root_Extent-Type_tag4@@": "Union de : utilise l’étendue de tous les rasters pour déterminer l’étendue de traitement.",
	"@@Square-Root_Raster_tag0@@": "Valeurs en entrée utilisées pour calculer la racine carrée.",
	"@@Statistics-and-Histogram_Define-Statistics-and-Histogram_tag0@@": "Définissez les valeurs de statistiques de chaque canal.",
	"@@Statistics-and-Histogram_Define-Statistics-and-Histogram_tag1@@": "La colonne ${Histogram} est un champ en lecture seule qui peut être renseigné grâce au paramètre <strong>Importer</strong>. Si vous importez un fichier d’histogramme, la colonne ${Histogram} est marquée comme <strong>Définie</strong>.",
	"@@Statistics-and-Histogram_Import_tag0@@": "Importe les informations liées aux statistiques et à l'histogramme d'un raster ou d'un fichier XML existant.",
	"@@Statistics-and-Histogram_Raster_tag0@@": "Le raster en entrée pour lequel les statistiques et l’histogramme doivent être définis.",
	"@@Statistics-and-Histogram_Statistics_tag0@@": "Définissez les valeurs de statistiques de chaque canal.",
	"@@Stream-Link_Flow-Direction-Raster_tag0@@": "Raster en entrée qui montre la direction du flux sortant de chaque cellule.",
	"@@Stream-Link_Flow-Direction-Raster_tag1@@": "Le raster de direction de flux peut être créé en exécutant la fonction <strong>Direction de flux</strong>.",
	"@@Stream-Link_Stream-Raster_tag0@@": "Raster en entrée représentant un réseau d’écoulement linéaire.",
	"@@Stream-Order_Flow-Direction-Raster_tag0@@": "Raster en entrée qui montre la direction du flux sortant de chaque cellule.",
	"@@Stream-Order_Flow-Direction-Raster_tag1@@": "Le raster de direction de flux peut être créé en exécutant la fonction <strong>Direction de flux</strong>.",
	"@@Stream-Order_Order-Method_tag0@@": "Méthode utilisée pour attribuer l'ordre d'écoulement.",
	"@@Stream-Order_Order-Method_tag1@@": "<strong>STRAHLER</strong> : méthode de hiérarchisation d’écoulement proposée par Strahler en 1952. L’ordre d’écoulement augmente uniquement lorsque des cours d’eau du même ordre se croisent. L’intersection d’une liaison de premier ordre et d’une liaison de deuxième ordre reste une liaison de deuxième ordre plutôt que de créer une liaison de troisième ordre. Il s’agit de l’option par défaut.",
	"@@Stream-Order_Order-Method_tag3@@": "<strong>SHREVE</strong> : méthode de hiérarchisation d’écoulement par magnitude, proposée par Shreve en 1967. Tous les liens sans affluent ont une magnitude (ordre) de un. Les magnitudes sont des pentes descendantes additives. Lorsque deux liaisons se croisent, leurs magnitudes sont additionnées et le résultat est attribué au lien de pente descendante.",
	"@@Stream-Order_Stream-Raster_tag0@@": "Raster d’écoulement en entrée représentant un réseau d’écoulement linéaire.",
	"@@Stretch_Auto-Gamma_tag0@@": "Utilisez la <strong>Valeur Gamma automatique</strong> pour calculer la valeur Gamma à partir des statistiques et de l’histogramme du jeu de données. Les statistiques peuvent être estimées par la fonction même ou par le logiciel si vous avez choisi une couche.",
	"@@Stretch_Dynamic-Range-Adjustment_tag0@@": "Cochez la case <strong>Ajustement dynamique de la plage</strong> pour calculer les statistiques uniquement à partir des pixels affichés à l’écran. Cette option est appliquée en général lorsque l’image est destinée à être publiée et utilisée dans une application Web qui ne peut pas effectuer ce type d’étirement.",
	"@@Stretch_Estimate-Statistics_tag0@@": "Cochez la case <strong>Estimer les statistiques</strong> pour estimer vos statistiques. Les statistiques estimées sont calculées à partir d’un échantillon de 1 000 sur 1 000 depuis le centre du raster et utilisées par l’étirement.",
	"@@Stretch_Estimate-Statistics_tag3@@": "Si cette option est sélectionnée et que le raster comporte des statistiques, ou si vous avez saisi des valeurs dans la table <strong>Statistiques</strong>, elles sont utilisées au lieu d’effectuer une estimation, sauf si l’étirement nécessite un histogramme. Si l’étirement nécessite un histogramme qui n’existe pas, il est estimé.",
	"@@Stretch_Gamma_tag0@@": "Utilisez la barre du curseur pour définir manuellement la valeur <strong>Gamma</strong>.",
	"@@Stretch_Number-Of-Standard-Deviations_tag0@@": "Spécifiez la valeur n pour le nombre d'écart types à utiliser. Cette méthode permet d'accentuer dans quelle mesure les valeurs d'entités varient par rapport à la valeur moyenne. Elle est plus utile lorsqu'elle est utilisée sur des données réparties normalement.",
	"@@Stretch_Output-Maximum_tag0@@": "Définissez la valeur de pixel la plus élevée pour l'histogramme.",
	"@@Stretch_Output-Maximum_tag1@@": "Les valeurs de <strong>Sortie minimale</strong> et de <strong>Sortie maximale</strong> définissent la plage des valeurs qui présenteront ensuite un étirement de contraste linéaire.",
	"@@Stretch_Output-Minimum_tag0@@": "Définissez la valeur de pixel la plus faible pour l'histogramme.",
	"@@Stretch_Output-Minimum_tag1@@": "Les valeurs de <strong>Sortie minimale</strong> et de <strong>Sortie maximale</strong> définissent la plage des valeurs qui présenteront ensuite un étirement de contraste linéaire.",
	"@@Stretch_Percent-Clip-Maximum_tag0@@": "Spécifiez le pourcentage des valeurs élevées à exclure de l'étirement.",
	"@@Stretch_Percent-Clip-Maximum_tag1@@": "Les valeurs correctes sont comprises entre 0 et 99.",
	"@@Stretch_Percent-Clip-Minimum_tag0@@": "Spécifiez le pourcentage des valeurs faibles à exclure de l'étirement.",
	"@@Stretch_Percent-Clip-Minimum_tag1@@": "Les valeurs correctes sont comprises entre 0 et 99.",
	"@@Stretch_Raster_tag0@@": "Le raster en entrée pour l'étirement de contraste.",
	"@@Stretch_Sigmoid-Strength-Level_tag0@@": "Le <strong>Niveau de force</strong> détermine quelle partie de la fonction sigmoïdale sera utilisée dans l’étirement. Une valeur faible (par exemple, 1) utilise uniquement la partie centrale de la courbe, ce qui tend à générer des couleurs ternes et floues. Une valeur élevée (par exemple, 6) utilise l’intégralité de la courbe, ce qui tend à générer des couleurs vives et nettes.",
	"@@Stretch_Statistics_tag0@@": "Vous pouvez saisir vos propres statistiques dans la boîte de dialogue. Par défaut, les statistiques sont extraites des données. Toutefois, si vous entrez des valeurs dans ce paramètre, elles seront utilisées à la place.",
	"@@Stretch_Type_tag0@@": "Choisissez la méthode du type d'étirement:",
	"@@Stretch_Type_tag1@@": "Aucun : aucun étirement de contraste",
	"@@Stretch_Type_tag2@@": "Écart type : étirement Écart type",
	"@@Stretch_Type_tag3@@": "MinMax : étirement Minimum-Maximum",
	"@@Stretch_Type_tag4@@": "PourcentageMinMax : étirement Pourcentage de découpe",
	"@@Stretch_Type_tag5@@": "Sigmoïde : étirement Sigmoïde",
	"@@Stretch_Use-Gamma_tag0@@": "Cochez la case <strong>Utiliser la valeur Gamma</strong> pour appliquer un étirement gamma.",
	"@@Swath_Cellsize_tag0@@": "La taille de cellule du raster en sortie est automatiquement détectée, mais ceci peut être modifié si vous le souhaitez. La taille de cellule peut être modifiée, mais l'étendue du jeu de données raster reste identique.",
	"@@Swath_Interpolation-Method_tag0@@": "Quatre méthodes de rééchantillonnage sont disponibles pour cette fonction :",
	"@@Swath_Interpolation-Method_tag1@@": "<strong>Voisin le plus proche</strong> : calcule la valeur du pixel grâce au pixel le plus proche. Si aucun pixel source n’existe, aucun nouveau pixel ne peut être créé dans la sortie.",
	"@@Swath_Interpolation-Method_tag3@@": "<strong>Bilinéaire</strong> : calcule la valeur du pixel en utilisant la valeur de distance pondérée des quatre pixels les plus proches.",
	"@@Swath_Interpolation-Method_tag5@@": "<strong>TIN linéaire</strong> : utilise un réseau triangulé irrégulier (TIN) à partir des points centraux de chaque cellule du raster irrégulier pour interpoler une surface qui sera ensuite convertie en raster régulier.",
	"@@Swath_Interpolation-Method_tag7@@": "<strong>Voisin naturel</strong> : effectue une affectation du voisin le plus proche. Il s’agit de la plus rapide des méthodes d’interpolation. Elle est essentiellement utilisée pour les données discrètes, telles qu’une classification de l’utilisation du sol, car elle ne modifie pas les valeurs des cellules. L’erreur spatiale maximale sera de la moitié d’une taille de cellule.",
	"@@Swath_Raster_tag0@@": "Raster de points quadrillés de façon irrégulière à rééchantillonner.",
	"@@Tan_Cellsize-Type_tag0@@": "Choisissez la taille de cellule à utiliser dans le raster en sortie. Si les tailles des cellules en entrée sont identiques, toutes les options donnent les mêmes résultats.",
	"@@Tan_Cellsize-Type_tag1@@": "Premier de : utilise la première taille de cellule des rasters en entrée.",
	"@@Tan_Cellsize-Type_tag2@@": "Dernier de : utilise la dernière taille de cellule des rasters en entrée.",
	"@@Tan_Cellsize-Type_tag3@@": "Max de : utilise la plus grande taille de cellule de tous les rasters en entrée. Il s’agit de l’option par défaut.",
	"@@Tan_Cellsize-Type_tag4@@": "Moyenne de : utilise la taille de cellule moyenne de tous les rasters en entrée.",
	"@@Tan_Cellsize-Type_tag5@@": "Mini de : utilise la plus petite taille de cellule de tous les rasters en entrée.",
	"@@Tan_Extent-Type_tag0@@": "Sélectionnez l’étendue à utiliser dans le raster en sortie.",
	"@@Tan_Extent-Type_tag1@@": "Premier de : utilise l’étendue du premier raster en entrée pour déterminer l’étendue de traitement.",
	"@@Tan_Extent-Type_tag2@@": "Intersection de : utilise l’étendue des pixels superposés pour déterminer l’étendue de traitement. Il s’agit de l’option par défaut.",
	"@@Tan_Extent-Type_tag3@@": "Dernier de : utilise l’étendue du dernier raster en entrée pour déterminer l’étendue de traitement.",
	"@@Tan_Extent-Type_tag4@@": "Union de : utilise l’étendue de tous les rasters pour déterminer l’étendue de traitement.",
	"@@Tan_Raster_tag0@@": "Entrée pour laquelle calculer les valeurs de tangente.",
	"@@TanH_Cellsize-Type_tag0@@": "Choisissez la taille de cellule à utiliser dans le raster en sortie. Si les tailles des cellules en entrée sont identiques, toutes les options donnent les mêmes résultats.",
	"@@TanH_Cellsize-Type_tag1@@": "Premier de : utilise la première taille de cellule des rasters en entrée.",
	"@@TanH_Cellsize-Type_tag2@@": "Dernier de : utilise la dernière taille de cellule des rasters en entrée.",
	"@@TanH_Cellsize-Type_tag3@@": "Max de : utilise la plus grande taille de cellule de tous les rasters en entrée. Il s’agit de l’option par défaut.",
	"@@TanH_Cellsize-Type_tag4@@": "Moyenne de : utilise la taille de cellule moyenne de tous les rasters en entrée.",
	"@@TanH_Cellsize-Type_tag5@@": "Mini de : utilise la plus petite taille de cellule de tous les rasters en entrée.",
	"@@TanH_Extent-Type_tag0@@": "Sélectionnez l’étendue à utiliser dans le raster en sortie.",
	"@@TanH_Extent-Type_tag1@@": "Premier de : utilise l’étendue du premier raster en entrée pour déterminer l’étendue de traitement.",
	"@@TanH_Extent-Type_tag2@@": "Intersection de : utilise l’étendue des pixels superposés pour déterminer l’étendue de traitement. Il s’agit de l’option par défaut.",
	"@@TanH_Extent-Type_tag3@@": "Dernier de : utilise l’étendue du dernier raster en entrée pour déterminer l’étendue de traitement.",
	"@@TanH_Extent-Type_tag4@@": "Union de : utilise l’étendue de tous les rasters pour déterminer l’étendue de traitement.",
	"@@TanH_Raster_tag0@@": "Entrée pour laquelle calculer les valeurs de tangente hyperbolique.",
	"@@Tasseled-Cap_Raster_tag0@@": "Raster en entrée sur lequel exécuter la transformation.",
	"@@Times_Cellsize-Type_tag0@@": "Choisissez la taille de cellule à utiliser dans le raster en sortie. Si les tailles des cellules en entrée sont identiques, toutes les options donnent les mêmes résultats.",
	"@@Times_Cellsize-Type_tag1@@": "Premier de : utilise la première taille de cellule des rasters en entrée.",
	"@@Times_Cellsize-Type_tag2@@": "Dernier de : utilise la dernière taille de cellule des rasters en entrée.",
	"@@Times_Cellsize-Type_tag3@@": "Max de : utilise la plus grande taille de cellule de tous les rasters en entrée. Il s’agit de l’option par défaut.",
	"@@Times_Cellsize-Type_tag4@@": "Moyenne de : utilise la taille de cellule moyenne de tous les rasters en entrée.",
	"@@Times_Cellsize-Type_tag5@@": "Mini de : utilise la plus petite taille de cellule de tous les rasters en entrée.",
	"@@Times_Extent-Type_tag0@@": "Sélectionnez l’étendue à utiliser dans le raster en sortie.",
	"@@Times_Extent-Type_tag1@@": "Premier de : utilise l’étendue du premier raster en entrée pour déterminer l’étendue de traitement.",
	"@@Times_Extent-Type_tag2@@": "Intersection de : utilise l’étendue des pixels superposés pour déterminer l’étendue de traitement. Il s’agit de l’option par défaut.",
	"@@Times_Extent-Type_tag3@@": "Dernier de : utilise l’étendue du dernier raster en entrée pour déterminer l’étendue de traitement.",
	"@@Times_Extent-Type_tag4@@": "Union de : utilise l’étendue de tous les rasters pour déterminer l’étendue de traitement.",
	"@@Times_Raster_tag0@@": "Entrée qui contient les valeurs à multiplier.",
	"@@Times_Raster_tag1@@": "Une valeur constante peut être utilisée en entrée pour ce paramètre, à condition qu’un raster soit spécifié pour l’autre paramètre.",
	"@@Times_Raster2_tag0@@": "Entrée qui contient les valeurs par lesquelles la première entrée est multipliée.",
	"@@Times_Raster2_tag1@@": "Une valeur constante peut être utilisée en entrée pour ce paramètre, à condition qu’un raster soit spécifié pour l’autre paramètre.",
	"@@Transpose-Bits_Bit-Pattern_tag0@@": "Choisissez le type de transposition à effectuer ou spécifiez un type personnalisé.",
	"@@Transpose-Bits_Bit-Pattern_tag1@@": "Landsat 8 Cirrus",
	"@@Transpose-Bits_Bit-Pattern_tag2@@": "Landsat 8 Nuage",
	"@@Transpose-Bits_Bit-Pattern_tag3@@": "Landsat 8 Ombre nuage",
	"@@Transpose-Bits_Bit-Pattern_tag4@@": "Landsat 8 Remplissage désigné",
	"@@Transpose-Bits_Bit-Pattern_tag5@@": "Landsat 8 Image déplacée",
	"@@Transpose-Bits_Bit-Pattern_tag6@@": "Landsat 8 Neige/glace",
	"@@Transpose-Bits_Bit-Pattern_tag7@@": "Landsat 8 Occlusion de terrain",
	"@@Transpose-Bits_Bit-Pattern_tag8@@": "Landsat 8 Végétation",
	"@@Transpose-Bits_Bit-Pattern_tag9@@": "Landsat 8 Eau",
	"@@Transpose-Bits_Bit-Pattern_tag10@@": "Défini par l’utilisateur",
	"@@Transpose-Bits_Constant-Value_tag0@@": "Valeur facultative qui permet de renseigner tous les bits non impliqués dans la transposition. Ce paramètre est visible si le paramètre <strong>Générer un raster de remplissage à partir d’une constante</strong> est défini sur <strong>Oui</strong>.",
	"@@Transpose-Bits_Fill-Raster_tag0@@": "Spécifiez un jeu de données raster permettant de renseigner tous les bits non impliqués dans la transposition. Ce paramètre est visible si le paramètre <strong>Générer un raster de remplissage à partir d’une constante</strong> est défini sur <strong>Non</strong>.",
	"@@Transpose-Bits_Generate-Fill-Raster-from-Constant_tag0@@": "Générer un raster de remplissage à l’aide d’une valeur constante.",
	"@@Transpose-Bits_Generate-Fill-Raster-from-Constant_tag1@@": "<strong>Oui</strong> : un raster sera généré à l’aide d’une valeur constante pour renseigner tous les bits non impliqués dans la transposition. Il s’agit de l’option par défaut.",
	"@@Transpose-Bits_Generate-Fill-Raster-from-Constant_tag3@@": "<strong>Non</strong> : un raster sera généré à l’aide de valeurs de pixels provenant d’un jeu de données raster existant pour renseigner tous les bits non impliqués dans la transposition.",
	"@@Transpose-Bits_Output-Bit-and-Input-Bit_tag0@@": "Une table en lecture seule présentant les bits en sortie et les entrées qui seront à leur place.",
	"@@Transpose-Bits_Raster_tag0@@": "Le raster en entrée à décompresser et apparier à nouveau.",
	"@@Unit-Conversion_From-Unit_tag0@@": "Type d’unité d’origine des pixels.",
	"@@Unit-Conversion_Raster_tag0@@": "Raster en entrée qui contient les unités converties.",
	"@@Unit-Conversion_To-Unit_tag0@@": "Type d’unité convertie des pixels.",
	"@@Vector-Field_Angle-Reference-System_tag0@@": "Spécifie la façon dont le composant de direction a été mesuré.",
	"@@Vector-Field_Angle-Reference-System_tag1@@": "Géographique : 0° pointe vers le nord et 90° pointe vers l’est",
	"@@Vector-Field_Angle-Reference-System_tag2@@": "Arithmétique : 0° pointe vers l’est et 90° pointe vers le nord",
	"@@Vector-Field_Input-Data-Type_tag0@@": "Type de champ vectoriel représenté par vos entrées.",
	"@@Vector-Field_Input-Data-Type_tag1@@": "Unknown (Inconnu) : vous ne savez pas si les entrées représentent des valeurs U-V ou des valeurs Magnitude-Direction.",
	"@@Vector-Field_Input-Data-Type_tag2@@": "U-V : les données en entrée représentent les composants U et V.",
	"@@Vector-Field_Input-Data-Type_tag3@@": "Magnitude-Direction : les données en entrée représentent la magnitude et la direction.",
	"@@Vector-Field_Output-Data-Type_tag0@@": "Indique le type de champ vectoriel représenté par votre sortie.",
	"@@Vector-Field_Output-Data-Type_tag1@@": "Magnitude-Direction : les données en sortie représentent la magnitude et la direction.",
	"@@Vector-Field_Output-Data-Type_tag2@@": "U-V : les données en sortie représentent les composants U et V.",
	"@@Vector-Field_Raster1_tag0@@": "Premier raster en entrée.",
	"@@Vector-Field_Raster1_tag1@@": "Il s’agit de la valeur U ou de la magnitude.",
	"@@Vector-Field_Raster2_tag0@@": "Second raster en entrée.",
	"@@Vector-Field_Raster2_tag1@@": "Il s’agit de la valeur V ou de la direction.",
	"@@Viewshed_Analysis-Method_tag0@@": "Choisissez la méthode qui permettra de calculer la visibilité. Cette option vous permet d'adapter la précision afin d'optimiser les performances.",
	"@@Viewshed_Analysis-Method_tag1@@": "Toutes les lignes de visée : une ligne de visée est effectuée sur chaque pixel du raster afin d’établir des zones visibles. Il s'agit de la méthode par défaut.",
	"@@Viewshed_Analysis-Method_tag2@@": "Lignes de visée du périmètre : des lignes de visée sont uniquement effectuées sur les pixels situés dans le périmètre des zones visibles afin d’établir des zones de visibilité. Les performances de cette méthode sont meilleures que celles de la méthode <strong>Toutes les lignes de visée</strong>, car un moins grand nombre de lignes de visée sont présentes dans le calcul.",
	"@@Viewshed_Analysis-Type_tag0@@": "Choisissez le type d'analyse de visibilité que vous souhaitez effectuer, soit en déterminant le degré de visibilité de chaque cellule par rapport aux points d'observation, soit en identifiant pour chaque emplacement de la surface quels points d'observation sont visibles.",
	"@@Viewshed_Analysis-Type_tag1@@": "Fréquence : le nombre de fois où chaque emplacement de pixel dans le raster de surface en entrée est visible depuis les emplacements des points d’observation en entrée (en tant que points ou en tant que sommets pour les entités polylignes d’observation). Il s’agit de l’option par défaut.",
	"@@Viewshed_Analysis-Type_tag2@@": "Points d’observation : la sortie identifie avec précision les points d’observation visibles depuis chaque emplacement de la surface raster. Le nombre maximal autorisé de points d'observation en entrée est 32 avec ce type d'analyse.",
	"@@Viewshed_Horizontal-End-Angle_tag0@@": "Cette valeur définit l'angle de fin de la plage d'analyse horizontale. La valeur doit être exprimée en degrés de 0 à 360.0, 0 étant orienté vers le nord. La valeur par défaut est 360.0.",
	"@@Viewshed_Horizontal-End-Angle_tag1@@": "Il peut s’agir d’un champ du jeu de données <strong>Entités points d’observation</strong> en entrée ou d’une valeur numérique. Si une valeur est attribuée à ce paramètre, elle est appliquée à tous les points d’observation. Pour spécifier des valeurs différentes pour chaque point d’observation, définissez ce paramètre sur un champ du jeu de données <strong>Entités points d’observation</strong>.",
	"@@Viewshed_Horizontal-Start-Angle_tag0@@": "Cette valeur définit l'angle de départ de la plage d'analyse horizontale. La valeur doit être exprimée en degrés de 0 à 360.0, 0 étant orienté vers le nord. La valeur par défaut est 0.",
	"@@Viewshed_Horizontal-Start-Angle_tag1@@": "Il peut s’agir d’un champ du jeu de données <strong>Entités points d’observation</strong> en entrée ou d’une valeur numérique. Si une valeur est attribuée à ce paramètre, elle est appliquée à tous les points d’observation. Pour spécifier des valeurs différentes pour chaque point d’observation, définissez ce paramètre sur un champ du jeu de données <strong>Entités points d’observation</strong>.",
	"@@Viewshed_Inner-Radius-is-3D-Distance_tag0@@": "Type de distance pour le paramètre de rayon intérieur.",
	"@@Viewshed_Inner-Radius-is-3D-Distance_tag1@@": "Désactivé : le <strong>Rayon intérieur</strong> doit être interprété comme une distance 2D. Il s’agit de l’option par défaut.",
	"@@Viewshed_Inner-Radius-is-3D-Distance_tag4@@": "Activé : le <strong>Rayon intérieur</strong> doit être interprété comme une distance 3D.",
	"@@Viewshed_Inner-Radius_tag0@@": "Cette valeur définit la distance de départ (minimum) à partir de laquelle la visibilité est déterminée. Les pixels plus proches que cette distance sont considérés comme non visibles dans la sortie, mais peuvent toujours empêcher la visibilité des pixels situés entre le <strong>Rayon intérieur</strong> et le <strong>Rayon extérieur</strong>. La valeur par défaut est 0.",
	"@@Viewshed_Inner-Radius_tag5@@": "Il peut s’agir d’un champ du jeu de données <strong>Entités points d’observation</strong> en entrée ou d’une valeur numérique. Si une valeur est attribuée à ce paramètre, elle est appliquée à tous les points d’observation. Pour spécifier des valeurs différentes pour chaque point d’observation, définissez ce paramètre sur un champ du jeu de données <strong>Entités points d’observation</strong>.",
	"@@Viewshed_Observer-Elevation_tag0@@": "Cette valeur permet de définir les altitudes des surfaces des points d'observation ou des sommets.",
	"@@Viewshed_Observer-Elevation_tag1@@": "Il peut s’agir d’un champ du jeu de données <strong>Entités points d’observation</strong> en entrée ou d’une valeur numérique. Si ce paramètre n’est pas spécifié, l’élévation du point d’observation s’obtient à partir du raster de surface à l’aide de l’interpolation bilinéaire. Si une valeur est attribuée à ce paramètre, elle est appliquée à tous les points d’observation. Pour spécifier des valeurs différentes pour chaque point d’observation, définissez ce paramètre sur un champ du jeu de données <strong>Entités points d’observation</strong>.",
	"@@Viewshed_Observer-Features_tag0@@": "La classe d’entités requise en entrée qui identifie les emplacements des points d’observation. Il peut s'agir d'entités ponctuelles, multi-points ou polylinéaires.",
	"@@Viewshed_Observer-Features_tag1@@": "La classe d'entités en entrée est transformée en système de coordonnées 3D géocentriques au cours du calcul de la visibilité. Les points d'observation en dehors de l'étendue du raster de surface, ou se trouvant sur les cellules NoData, ne sont pas pris en compte dans le calcul.",
	"@@Viewshed_Observer-Offset_tag0@@": "Cette valeur indique la distance verticale (en unités de surface) à ajouter à l'altitude du point d'observation. La valeur doit être un entier positif ou un nombre à virgule flottante.",
	"@@Viewshed_Observer-Offset_tag1@@": "Il peut s’agir d’un champ du jeu de données <strong>Entités points d’observation</strong> en entrée ou d’une valeur numérique. Si une valeur est attribuée à ce paramètre, elle est appliquée à tous les points d’observation. Pour spécifier des valeurs différentes pour chaque point d’observation, définissez ce paramètre sur un champ du jeu de données <strong>Entités points d’observation</strong>.",
	"@@Viewshed_Outer-Radius-is-3D-Distance_tag0@@": "Type de distance pour le paramètre de rayon extérieur.",
	"@@Viewshed_Outer-Radius-is-3D-Distance_tag1@@": "Désactivé : le <strong>Rayon extérieur</strong> doit être interprété comme une distance 2D. Il s’agit de l’option par défaut.",
	"@@Viewshed_Outer-Radius-is-3D-Distance_tag4@@": "Activé : le <strong>Rayon extérieur</strong> doit être interprété comme une distance 3D.",
	"@@Viewshed_Outer-Radius_tag0@@": "Cette valeur définit la distance maximale à partir de laquelle la visibilité est déterminée. Les pixels situés au-delà de cette distance sont exclus de l'analyse.",
	"@@Viewshed_Outer-Radius_tag1@@": "Il peut s’agir d’un champ du jeu de données <strong>Entités points d’observation</strong> en entrée ou d’une valeur numérique. Si une valeur est attribuée à ce paramètre, elle est appliquée à tous les points d’observation. Pour spécifier des valeurs différentes pour chaque point d’observation, définissez ce paramètre sur un champ du jeu de données <strong>Entités points d’observation</strong>.",
	"@@Viewshed_Raster_tag0@@": "Le raster de surface en entrée requis. Il peut s'agir d'un entier ou d'un raster en virgule flottante.",
	"@@Viewshed_Raster_tag1@@": "L'entrée est transformée en système de coordonnées 3D géocentriques au cours du calcul de la visibilité. Les cellules NoData du raster en entrée n'empêchent pas de déterminer la visibilité.",
	"@@Viewshed_Refractive-Coefficient_tag0@@": "Coefficient de réfraction de la lumière visible dans l'air.",
	"@@Viewshed_Refractive-Coefficient_tag1@@": "La valeur par défaut est 0,13.",
	"@@Viewshed_Surface-Offset_tag0@@": "Cette valeur indique la distance verticale (en unités de surface) à ajouter à la valeur z de chaque pixel cible, telle qu'elle est prise en compte pour la visibilité. La valeur doit être un entier positif ou un nombre à virgule flottante.",
	"@@Viewshed_Surface-Offset_tag1@@": "Il peut s’agir d’un champ du jeu de données <strong>Entités points d’observation</strong> en entrée ou d’une valeur numérique. Si une valeur est attribuée à ce paramètre, elle est appliquée à tous les points d’observation. Pour spécifier des valeurs différentes pour chaque point d’observation, définissez ce paramètre sur un champ du jeu de données <strong>Entités points d’observation</strong>.",
	"@@Viewshed_Vertical-Error_tag0@@": "Niveau d'incertitude, mesuré en tant qu'erreur quadratique moyenne (EQM) des valeurs d'altitude de surface. Il s'agit de la valeur à virgule flottante représentant l'erreur attendue des valeurs d'altitude en entrée. Lorsque ce paramètre se voit attribuer une valeur supérieure à 0, le raster de visibilité en sortie sera à virgule flottante. Dans ce cas, chaque valeur de pixel du raster de visibilité en sortie représente la somme des probabilités que la cellule puisse être vue d'un quelconque point d'observation.",
	"@@Viewshed_Vertical-Error_tag1@@": "Lorsque le <strong>Type d’analyse</strong> est <strong>Points d’observation</strong> ou que la <strong>Méthode d’analyse</strong> est <strong>Lignes de visée du périmètre</strong>, ce paramètre est désactivé.",
	"@@Viewshed_Vertical-Lower-Angle_tag0@@": "Cette valeur définit la limite de l'angle vertical inférieur de l'analyse au-dessous du plan horizontal. La valeur doit être exprimée en degrés de -90.0 à 0 et peut être un entier ou une valeur à virgule flottante. La valeur par défaut est -90.0.",
	"@@Viewshed_Vertical-Lower-Angle_tag1@@": "Il peut s’agir d’un champ du jeu de données <strong>Entités points d’observation</strong> en entrée ou d’une valeur numérique. Si une valeur est attribuée à ce paramètre, elle est appliquée à tous les points d’observation. Pour spécifier des valeurs différentes pour chaque point d’observation, définissez ce paramètre sur un champ du jeu de données <strong>Entités points d’observation</strong>.",
	"@@Viewshed_Vertical-Upper-Angle_tag0@@": "Cette valeur définit la limite de l'angle vertical supérieur de l'analyse au-dessus du plan horizontal. La valeur doit être exprimée en degrés de 0 à 90.0 et peut être un entier ou une valeur à virgule flottante. La valeur par défaut est 90.0.",
	"@@Viewshed_Vertical-Upper-Angle_tag1@@": "Il peut s’agir d’un champ du jeu de données <strong>Entités points d’observation</strong> en entrée ou d’une valeur numérique. Si une valeur est attribuée à ce paramètre, elle est appliquée à tous les points d’observation. Pour spécifier des valeurs différentes pour chaque point d’observation, définissez ce paramètre sur un champ du jeu de données <strong>Entités points d’observation</strong>.",
	"@@Watershed_Flow-Direction-Raster_tag0@@": "Raster en entrée qui montre la direction du flux sortant de chaque cellule.",
	"@@Watershed_Flow-Direction-Raster_tag1@@": "Le raster de direction de flux peut être créé en exécutant la fonction <strong>Direction de flux</strong>.",
	"@@Watershed_Pour-Point(s)-Raster_tag0@@": "Emplacements des points d'écoulement en entrée.",
	"@@Watershed_Pour-Point(s)-Raster_tag1@@": "Ce raster représente les cellules au-dessus desquelles la surface de captation est déterminée. Toutes les cellules n'ayant pas la valeur NoData sont utilisées en tant que cellules sources.",
	"@@Watershed_Pour-Point-Field_tag0@@": "Champ utilisé pour attribuer des valeurs aux emplacements de points d'écoulement.",
	"@@Watershed_Pour-Point-Field_tag1@@": "Dans le cas d’un jeu de données raster de points d’écoulement, l’option ${Value} est utilisée par défaut.",
	"@@Weighted-Overlay_Cellsize-Type_tag0@@": "Choisissez la taille de cellule à utiliser dans le raster en sortie. Si les tailles des cellules en entrée sont identiques, toutes les options donnent les mêmes résultats.",
	"@@Weighted-Overlay_Cellsize-Type_tag1@@": "Premier de : utilise la première taille de cellule des rasters en entrée.",
	"@@Weighted-Overlay_Cellsize-Type_tag2@@": "Mini de : utilise la plus petite taille de cellule de tous les rasters en entrée.",
	"@@Weighted-Overlay_Cellsize-Type_tag3@@": "Max de : utilise la plus grande taille de cellule de tous les rasters en entrée. Il s’agit de l’option par défaut.",
	"@@Weighted-Overlay_Cellsize-Type_tag4@@": "Moyenne de : utilise la taille de cellule moyenne de tous les rasters en entrée.",
	"@@Weighted-Overlay_Cellsize-Type_tag5@@": "Dernier de : utilise la dernière taille de cellule des rasters en entrée.",
	"@@Weighted-Overlay_Extent-Type_tag0@@": "Sélectionnez l’étendue à utiliser dans le raster en sortie.",
	"@@Weighted-Overlay_Extent-Type_tag1@@": "Premier de : utilise l’étendue du premier raster en entrée pour déterminer l’étendue de traitement.",
	"@@Weighted-Overlay_Extent-Type_tag2@@": "Intersection de : utilise l’étendue des pixels superposés pour déterminer l’étendue de traitement. Il s’agit de l’option par défaut.",
	"@@Weighted-Overlay_Extent-Type_tag3@@": "Union de : utilise l’étendue de tous les rasters pour déterminer l’étendue de traitement.",
	"@@Weighted-Overlay_Extent-Type_tag4@@": "Dernier de : utilise l’étendue du dernier raster en entrée pour déterminer l’étendue de traitement.",
	"@@Weighted-Overlay_Scales_tag0@@": "Plage des nouvelles valeurs permettant de classifier les anciennes valeurs.",
	"@@Weighted-Overlay_Weighted-Overlay-Table_tag0@@": "La table de superposition pondérée se compose de quatre parties :",
	"@@Weighted-Overlay_Weighted-Overlay-Table_tag1@@": "Couche : tous les rasters en entrée doivent être des entiers.",
	"@@Weighted-Overlay_Weighted-Overlay-Table_tag2@@": "Influence : chaque raster en entrée est pondéré selon son importance, ou son influence, en pourcentage relatif. La somme des pondérations des pourcentages d’influence doit être égale à 100 et chaque pondération doit être spécifiée à l’aide de valeurs entières.",
	"@@Weighted-Overlay_Weighted-Overlay-Table_tag3@@": "Champ : un champ de type entier ou chaîne dans le raster en entrée à utiliser pour la pondération.",
	"@@Weighted-Overlay_Weighted-Overlay-Table_tag4@@": "Table de classification : une nouvelle valeur d’échelle basée sur la table de classification est affectée à chaque valeur dans un raster en entrée. La valeur d’échelle peut être une valeur valide ou une valeur NoData.",
	"@@Weighted-Sum_Cellsize-Type_tag0@@": "Choisissez la taille de cellule à utiliser dans le raster en sortie. Si les tailles des cellules en entrée sont identiques, toutes les options donnent les mêmes résultats.",
	"@@Weighted-Sum_Cellsize-Type_tag1@@": "Premier de : utilise la première taille de cellule des rasters en entrée.",
	"@@Weighted-Sum_Cellsize-Type_tag2@@": "Dernier de : utilise la dernière taille de cellule des rasters en entrée.",
	"@@Weighted-Sum_Cellsize-Type_tag3@@": "Max de : utilise la plus grande taille de cellule de tous les rasters en entrée. Il s’agit de l’option par défaut.",
	"@@Weighted-Sum_Cellsize-Type_tag4@@": "Moyenne de : utilise la taille de cellule moyenne de tous les rasters en entrée.",
	"@@Weighted-Sum_Cellsize-Type_tag5@@": "Mini de : utilise la plus petite taille de cellule de tous les rasters en entrée.",
	"@@Weighted-Sum_Extent-Type_tag0@@": "Sélectionnez l’étendue à utiliser dans le raster en sortie.",
	"@@Weighted-Sum_Extent-Type_tag1@@": "Premier de : utilise l’étendue du premier raster en entrée pour déterminer l’étendue de traitement.",
	"@@Weighted-Sum_Extent-Type_tag2@@": "Intersection de : utilise l’étendue des pixels superposés pour déterminer l’étendue de traitement. Il s’agit de l’option par défaut.",
	"@@Weighted-Sum_Extent-Type_tag3@@": "Dernier de : utilise l’étendue du dernier raster en entrée pour déterminer l’étendue de traitement.",
	"@@Weighted-Sum_Extent-Type_tag4@@": "Union de : utilise l’étendue de tous les rasters pour déterminer l’étendue de traitement.",
	"@@Weighted-Sum_Weighted-Sum-Table_tag0@@": "La table de somme pondérée est définie par trois propriétés :",
	"@@Weighted-Sum_Weighted-Sum-Table_tag1@@": "Couche : le raster qui est pondéré.",
	"@@Weighted-Sum_Weighted-Sum-Table_tag2@@": "Champ : le champ du raster à utiliser pour la pondération.",
	"@@Weighted-Sum_Weighted-Sum-Table_tag3@@": "Pondération : la valeur de pondération par laquelle multiplier le raster. Il peut s'agir de toute valeur décimale positive ou négative.",
	"@@Wind-Chill_Temperature-Raster_tag0@@": "Raster monocanal où les valeurs de pixel représentent la température de l’air ambiant.",
	"@@Wind-Chill_Temperature-Units_tag0@@": "Unité de mesure associée au raster de température en entrée. Les unités disponibles en entrée sont Celsius, Fahrenheit et Kelvin.",
	"@@Wind-Chill_Wind-Chill-Units_tag0@@": "Unité de mesure associée au raster en sortie. Les unités disponibles en sortie sont Celsius, Fahrenheit et Kelvin.",
	"@@Wind-Chill_Wind-Speed-Raster_tag0@@": "Raster monocanal où les valeurs de pixel représentent la vitesse du vent.",
	"@@Wind-Chill_Wind-Speed-Units_tag0@@": "Définit l’unité de mesure du raster de vitesse du vent.",
	"@@Wind-Chill_Wind-Speed-Units_tag1@@": "Miles par heure (mph)",
	"@@Wind-Chill_Wind-Speed-Units_tag2@@": "Kilomètres par heure (km/h)",
	"@@Wind-Chill_Wind-Speed-Units_tag3@@": "Mètres par seconde (m/s)",
	"@@Wind-Chill_Wind-Speed-Units_tag4@@": "Pieds par seconde (pd/s)",
	"@@Wind-Chill_Wind-Speed-Units_tag5@@": "Nœuds (nd)",
	"@@Zonal-Remap_Background-Value_tag0@@": "La valeur de pixel initiale du raster en sortie, avant le classement des pixels en entrée.",
	"@@Zonal-Remap_Default-Output-Value_tag0@@": "Valeur qui sera attribuée à un pixel qui ne répond à aucune des conditions définies dans la <strong>Table des attributs zonaux</strong>.",
	"@@Zonal-Remap_Default-Output-Value_tag3@@": "Il s’agit également de la valeur du pixel en sortie si le paramètre <strong>Nom du champ de la valeur en sortie</strong> n’est pas spécifié ou si la valeur en sortie du seuil zonal correspondant n’est pas spécifiée dans la <strong>Table des attributs zonaux</strong>.",
	"@@Zonal-Remap_Maximum-Value-Field-Name_tag0@@": "Nom du champ contenant la valeur maximale ci-dessous, dans laquelle un pixel en entrée est classé.",
	"@@Zonal-Remap_Maximum-Value-Field-Name_tag1@@": "Si aucune valeur n'est spécifiée ou si la valeur de champ est Null, les valeurs de pixel maximum ne sont pas testées.",
	"@@Zonal-Remap_Minimum-Value-Field-Name_tag0@@": "Nom du champ contenant la valeur minimale ci-dessus, dans laquelle un pixel en entrée est classé.",
	"@@Zonal-Remap_Minimum-Value-Field-Name_tag1@@": "Si aucune valeur n'est spécifiée ou si la valeur de champ est Null, les valeurs de pixel minimum ne sont pas testées.",
	"@@Zonal-Remap_Output-Value-Field-Name_tag0@@": "Nom du champ contenant la valeur cible dans laquelle un pixel en entrée est classé.",
	"@@Zonal-Remap_Output-Value-Field-Name_tag1@@": "Si aucune valeur n’est spécifiée ou si la valeur de champ est Null, les valeurs de pixels reclassées sont définies sur <strong>Valeur en sortie par défaut</strong>.",
	"@@Zonal-Remap_Value-Raster_tag0@@": "Entrée de raster monocanal requise contenant des valeurs de pixels à classer.",
	"@@Zonal-Remap_Where-Clause_tag0@@": "Requête facultative appliquée à la <strong>Table des attributs zonaux</strong>.",
	"@@Zonal-Remap_Where-Clause_tag3@@": "Si vous utilisiez la table ci-dessus comme exemple, la requête serait ${Variable1 = 'bare earth' AND Variable2 = 'California'}.",
	"@@Zonal-Remap_Zonal-Attributes-Table_tag0@@": "Une table en entrée requise contenant au moins trois champs. Elle doit comporter une valeur de seuil minimale, une valeur de seuil maximale et une valeur cible. La valeur cible est le champ qui contiendra la valeur classée.",
	"@@Zonal-Remap_Zonal-Attributes-Table_tag1@@": "Le format du fichier peut être une classe d’entités, un service d’entités ou n’importe quel type de table pris en charge par ArcGIS.",
	"@@Zonal-Remap_Zone-Field_tag0@@": "Nom du champ dans la <strong>Table des attributs zonaux</strong> qui contient les valeurs d’ID de zone.",
	"@@Zonal-Remap_Zone-Field_tag3@@": "Les valeurs d'ID de zone sont directement liées aux ID de zone dans votre raster zonal. Le classement bénéficie ainsi d’un niveau de filtrage supplémentaire. Si aucun ID de zone n'est associé à un enregistrement en particulier dans la table, il ne fera pas partie du classement.",
	"@@Zonal-Remap_Zone-Raster_tag0@@": "Un raster monocanal où chaque pixel définit les zones associées à un emplacement en particulier. Une zone est définie comme l'ensemble des surfaces en entrée ayant la même valeur. Les surfaces ne sont pas nécessairement contiguës.",
	"@@Predict-Using-Trend_dimensiondefinition_tag0@@": "Spécifie la méthode utilisée pour fournir les valeurs de dimension de prévision.",
	"@@Predict-Using-Trend_dimensiondefinition_tag1@@": "<strong>Par valeur</strong> : la prévision est calculée pour une seule valeur de dimension. Par exemple, vous souhaitez prévoir les précipitations annuelles pour les années 2050, 2100 et 2150. Il s’agit de l’option par défaut.",
	"@@Predict-Using-Trend_dimensiondefinition_tag2@@": "<strong>Par intervalle</strong> : la prévision est calculée pour un intervalle de la dimension défini par une valeur de début et une valeur de fin. Par exemple, vous souhaitez prévoir les précipitations annuelles pour les années comprises entre 2050 et 2150.",
	"@@Predict-Using-Trend_end_tag0@@": "Date de fin, hauteur ou profondeur de l’intervalle de dimension à utiliser dans la prévision.",
	"@@Predict-Using-Trend_end_tag1@@": "Ce paramètre est obligatoire si le paramètre <strong>Définition de la dimension</strong> est défini sur <strong>Par intervalle</strong>.",
	"@@Predict-Using-Trend_raster_tag0@@": "Raster de tendance multimensionnel en entrée de la fonction <strong>Générer un raster de tendance</strong>.",
	"@@Predict-Using-Trend_start_tag0@@": "Date de début, hauteur ou profondeur de l’intervalle de dimension à utiliser dans la prévision.",
	"@@Predict-Using-Trend_start_tag1@@": "Ce paramètre est obligatoire si le paramètre <strong>Définition de la dimension</strong> est défini sur <strong>Par intervalle</strong>.",
	"@@Predict-Using-Trend_unit_tag0@@": "Unité utilisée pour l’intervalle de valeurs. Ce paramètre s’applique uniquement si la dimension de l’analyse est une dimension temporelle.",
	"@@Predict-Using-Trend_unit_tag1@@": "<strong>Heures</strong> : la prévision est calculée pour chaque heure de la plage temporelle définie par les paramètres <strong>Début</strong>, <strong>Fin</strong> et <strong>Intervalle de valeur</strong>.",
	"@@Predict-Using-Trend_unit_tag2@@": "<strong>Jours</strong> : la prévision est calculée pour chaque jour de la plage temporelle définie par les paramètres <strong>Début</strong>, <strong>Fin</strong> et <strong>Intervalle de valeur</strong>.",
	"@@Predict-Using-Trend_unit_tag3@@": "<strong>Semaines</strong> : la prévision est calculée pour chaque semaine de la plage temporelle définie par les paramètres <strong>Début</strong>, <strong>Fin</strong> et <strong>Intervalle de valeur</strong>.",
	"@@Predict-Using-Trend_unit_tag4@@": "<strong>Mois</strong> : la prévision est calculée pour chaque mois de la plage temporelle définie par les paramètres <strong>Début</strong>, <strong>Fin</strong> et <strong>Intervalle de valeur</strong>.",
	"@@Predict-Using-Trend_unit_tag5@@": "<strong>Années</strong> : la prévision est calculée pour chaque année de la plage temporelle définie par les paramètres <strong>Début</strong>, <strong>Fin</strong> et <strong>Intervalle de valeur</strong>.",
	"@@Predict-Using-Trend_valueinterval_tag0@@": "Nombre d’étapes entre deux valeurs de dimension à inclure dans la prévision. La valeur par défaut est 1.",
	"@@Predict-Using-Trend_valueinterval_tag1@@": "Ce paramètre est obligatoire si le paramètre <strong>Définition de la dimension</strong> est défini sur <strong>Par intervalle</strong>.",
	"@@Predict-Using-Trend_values_tag0@@": "Valeur(s) de dimension à utiliser dans la prévision.",
	"@@Predict-Using-Trend_values_tag1@@": "Le format des valeurs temporelles, de profondeur et de hauteur doit correspondre au format des valeurs de dimension utilisées pour générer le raster de tendance. Si le raster de tendance a été généré pour la dimension StdTime, le format doit être AAAA-MM-JJTHH:MM:SS (par exemple, 2050-01-01T00:00:00). Les valeurs multiples sont séparées par des points-virgules.",
	"@@Process-Raster-Collection_aggregationfunction_tag0@@": "Spécifiez le modèle de fonction raster utilisé pour agréger plusieurs tranches en un nombre de tranches inférieur ou en une seule tranche.",
	"@@Process-Raster-Collection_dimension_tag0@@": "Dimension de l’agrégation. Il s’agit de la dimension le long de laquelle les variables sont agrégées.",
	"@@Process-Raster-Collection_itemfunction_tag0@@": "Spécifiez le modèle de fonction raster utilisé pour traiter chaque tranche ou élément de l’ensemble de rasters en entrée.",
	"@@Process-Raster-Collection_keywordinterval_tag0@@": "Spécifie le mot-clé de l’intervalle à utiliser lors de l’agrégation le long de la dimension. Ce paramètre est obligatoire si le <strong>Type</strong> est défini sur <strong>Mot-clé de l’intervalle</strong>. Dans ce cas, l’agrégation doit se faire dans le temps.",
	"@@Process-Raster-Collection_keywordinterval_tag1@@": "<strong>Par heure</strong> : les valeurs des données sont agrégées selon des intervalles horaires et le résultat comprend chaque heure de la série chronologique.",
	"@@Process-Raster-Collection_keywordinterval_tag2@@": "<strong>Par jour</strong> : les valeurs des données sont agrégées selon des intervalles quotidiens et le résultat comprend chaque jour de la série chronologique.",
	"@@Process-Raster-Collection_keywordinterval_tag3@@": "<strong>Par semaine</strong> : les valeurs des données sont agrégées selon des intervalles hebdomadaires et le résultat comprend chaque semaine de la série chronologique.",
	"@@Process-Raster-Collection_keywordinterval_tag4@@": "<strong>Par dix jours</strong> : les valeurs des données sont agrégées en 3 périodes de 10 jours chacune. La dernière période peut contenir plus ou moins de 10 jours. La sortie comprend 3 tranches pour chaque mois.",
	"@@Process-Raster-Collection_keywordinterval_tag5@@": "<strong>Par cinq jours</strong> : les valeurs des données sont agrégées en 6 périodes de 5 jours chacune. La dernière période peut contenir plus ou moins de 5 jours. La sortie comprend 6 tranches pour chaque mois.",
	"@@Process-Raster-Collection_keywordinterval_tag6@@": "<strong>Par mois</strong> : les valeurs des données sont agrégées selon des intervalles mensuels et le résultat comprend chaque mois de la série chronologique.",
	"@@Process-Raster-Collection_keywordinterval_tag7@@": "<strong>Par trimestre</strong> : les valeurs des données sont agrégées selon des intervalles trimestriels et le résultat comprend chaque trimestre de la série chronologique.",
	"@@Process-Raster-Collection_keywordinterval_tag8@@": "<strong>Par an</strong> : les valeurs des données sont agrégées selon des intervalles annuels et le résultat comprend chaque année de la série chronologique.",
	"@@Process-Raster-Collection_keywordinterval_tag9@@": "<strong>Récurrence quotidienne</strong> : les valeurs des données sont agrégées selon des intervalles quotidiens et le résultat inclut une valeur agrégée par jour du calendrier julien. Le résultat comprend 366 tranches de temps quotidiennes au maximum.",
	"@@Process-Raster-Collection_keywordinterval_tag10@@": "<strong>Récurrence hebdomadaire</strong> : les valeurs des données sont agrégées selon des intervalles hebdomadaires et le résultat inclut une valeur agrégée par semaine. Le résultat comprend 53 tranches de temps hebdomadaires au maximum.",
	"@@Process-Raster-Collection_keywordinterval_tag11@@": "<strong>Récurrence mensuelle</strong> : les valeurs des données sont agrégées selon des intervalles mensuels et le résultat inclut une valeur agrégée par mois. Le résultat comprend 12 tranches de temps mensuelles au maximum.",
	"@@Process-Raster-Collection_keywordinterval_tag12@@": "<strong>Récurrence trimestrielle</strong> : les valeurs des données sont agrégées selon des intervalles trimestriels et le résultat inclut une valeur agrégée par trimestre. Le résultat comprend 4 tranches de temps trimestrielles au maximum.",
	"@@Process-Raster-Collection_maximumvalue_tag0@@": "Valeur maximum d’une plage.",
	"@@Process-Raster-Collection_maximumvalue_tag1@@": "Ce paramètre est obligatoire si le paramètre <strong>Type</strong> est défini sur <strong>Plages d’intervalle</strong>.",
	"@@Process-Raster-Collection_minimumvalue_tag0@@": "Valeur minimum d’une plage.",
	"@@Process-Raster-Collection_minimumvalue_tag1@@": "Ce paramètre est obligatoire si le paramètre <strong>Type</strong> est défini sur <strong>Plages d’intervalle</strong>.",
	"@@Process-Raster-Collection_processingfunction_tag0@@": "Spécifiez le modèle de fonction raster utilisé pour afficher la couche raster traitée.",
	"@@Process-Raster-Collection_rastercollection_tag0@@": "Raster multidimensionnel, couche mosaïque ou jeu de données mosaïque en entrée.",
	"@@Process-Raster-Collection_type_tag0@@": "Spécifie l’intervalle dimensionnel selon lequel les données sont agrégées.",
	"@@Process-Raster-Collection_type_tag1@@": "<strong>Tout</strong> : les valeurs des données sont agrégées sur toutes les tranches. Il s’agit de l’option par défaut.",
	"@@Process-Raster-Collection_type_tag2@@": "<strong>Mot-clé de l’intervalle</strong> : les données des variables sont agrégées à l’aide d’un intervalle courant connu.",
	"@@Process-Raster-Collection_type_tag3@@": "<strong>Plages d’intervalle</strong> : les données des variables sont agrégées entre les paires de valeurs ou de dates spécifiées.",
	"@@Process-Raster-Collection_type_tag4@@": "<strong>Valeurs d’intervalle</strong> : les données des variables sont agrégées à l’aide d’un intervalle et d’une unité définis par l’utilisateur.",
	"@@Process-Raster-Collection_unit_tag0@@": "Unité utilisée pour la valeur de l’intervalle. Ce paramètre est obligatoire si la <strong>Dimension</strong> est un champ temporel et que le paramètre <strong>Type</strong> est défini sur <strong>Valeur de l’intervalle</strong>.",
	"@@Process-Raster-Collection_unit_tag1@@": "Si vous procédez à une agrégation sur une dimension autre que temporelle, cette option n’est pas disponible et l’unité de la valeur de l’intervalle correspond à l’unité de variable des données raster multidimensionnelles en entrée.",
	"@@Process-Raster-Collection_unit_tag2@@": "<strong>Heures</strong> : les valeurs des données sont agrégées par tranches horaires suivant l’intervalle fourni.",
	"@@Process-Raster-Collection_unit_tag3@@": "<strong>Jours</strong> : les valeurs des données sont agrégées par tranches quotidiennes suivant l’intervalle fourni.",
	"@@Process-Raster-Collection_unit_tag4@@": "<strong>Semaines</strong> : les valeurs des données sont agrégées par tranches hebdomadaires suivant l’intervalle fourni.",
	"@@Process-Raster-Collection_unit_tag5@@": "<strong>Mois</strong> : les valeurs des données sont agrégées par tranches mensuelles suivant l’intervalle fourni.",
	"@@Process-Raster-Collection_unit_tag6@@": "<strong>Années</strong> : les valeurs des données sont agrégées par tranches annuelles suivant l’intervalle fourni.",
	"@@Process-Raster-Collection_valueinterval_tag0@@": "Taille de l’intervalle à appliquer à l’agrégation. Ce paramètre est obligatoire si le paramètre <strong>Type</strong> est défini sur <strong>Valeur de l’intervalle</strong>.",
	"@@Process-Raster-Collection_valueinterval_tag1@@": "Par exemple, pour agréger 30 années de données de température mensuelles par incréments de 5 ans, saisissez 5 comme <strong>Valeur de l’intervalle</strong> et définissez <strong>Unité</strong> sur <strong>Années</strong>.",
	"@@Linear-Spectral-Unmixing_non-negative_tag0@@": "Spécifie les options permettant de définir les valeurs de pixels en sortie.",
	"@@Linear-Spectral-Unmixing_non-negative_tag1@@": "Activé : il n’y aura pas de valeurs négatives en sortie.",
	"@@Linear-Spectral-Unmixing_non-negative_tag2@@": "Désactivé : les fractions d’occupation du sol peuvent comporter des valeurs négatives.",
	"@@Linear-Spectral-Unmixing_raster_tag0@@": "Raster en entrée.",
	"@@Linear-Spectral-Unmixing_spectralprofile_tag0@@": "Fichier de profil spectral en entrée.",
	"@@Linear-Spectral-Unmixing_spectralprofiletype_tag0@@": "Informations spectrales pour les différentes classes d’occupation du sol.",
	"@@Linear-Spectral-Unmixing_spectralprofiletype_tag1@@": "<strong>Profil spectral</strong> : un fichier de définition de classificateur (${.ecd}), généré via l’outil <strong><strong>Préparer le classificateur de vraisemblance maximale</strong></strong>, ou un fichier JavaScript Object Notation (${.json}) qui contient les profils spectraux de classe.",
	"@@Linear-Spectral-Unmixing_spectralprofiletype_tag2@@": "<strong>Entités d’entraînement</strong> : des entités surfaciques ou une classe d’entités d’échantillons d’entraînement, générées à partir du <strong>Gestionnaire d’échantillons d’entraînement</strong>.",
	"@@Linear-Spectral-Unmixing_sumtoone_tag0@@": "Spécifie les options permettant de définir les valeurs de pixels en sortie.",
	"@@Linear-Spectral-Unmixing_sumtoone_tag1@@": "Activé : les valeurs de classe pour chaque pixel sont fournies au format décimal, la somme de toutes les classes étant égale à 1. Exemple : Classe1 = 0,16 ; Classe2 = 0,24 ; Classe3 = 0,60.",
	"@@Linear-Spectral-Unmixing_sumtoone_tag2@@": "Désactivé : la somme de toutes les classes d’un pixel peut être supérieure à 1.",
	"@@Linear-Spectral-Unmixing_trainingfeature_tag0@@": "Fichier d’entités d’entraînement en entrée.",
	"@@Aggregate_aggregationtechnique_tag0@@": "Méthode employée pour l’agrégation. Les valeurs des cellules en entrée incluses dans les cellules en sortie les plus grossières sont agrégées selon l’une des statistiques suivantes :",
	"@@Aggregate_aggregationtechnique_tag1@@": "<strong>Somme</strong> : total des cellules en entrée. Il s’agit de l’option par défaut.",
	"@@Aggregate_aggregationtechnique_tag2@@": "<strong>Maximum</strong> : valeur la plus élevée des cellules en entrée.",
	"@@Aggregate_aggregationtechnique_tag3@@": "<strong>Moyenne</strong> : valeur moyenne des cellules en entrée.",
	"@@Aggregate_aggregationtechnique_tag4@@": "<strong>Médiane</strong> : valeur médiane des cellules en entrée.",
	"@@Aggregate_aggregationtechnique_tag5@@": "<strong>Minimum</strong> : valeur la plus faible des cellules en entrée.",
	"@@Aggregate_cellfactor_tag0@@": "Facteur de multiplication de la taille de cellule du raster en entrée.",
	"@@Aggregate_cellfactor_tag1@@": "Par exemple, une valeur de facteur de cellule de trois entraîne une taille de cellule en sortie trois fois supérieure à celle du raster en entrée.",
	"@@Aggregate_expandextentifneeded_tag0@@": "Définit la gestion des limites du raster en entrée si ses lignes ou ses colonnes ne sont pas des multiples du facteur de cellule.",
	"@@Aggregate_expandextentifneeded_tag1@@": "Activé : étend les limites en haut ou à droite du raster en entrée afin que le nombre total de cellules d’une ligne ou d’une colonne soit un multiple du facteur de cellule. Cette option permet au raster en sortie de couvrir une étendue spatiale plus importante que celle du raster en entrée. Il s’agit de l’option par défaut.",
	"@@Aggregate_expandextentifneeded_tag2@@": "Désactivé : réduit le nombre de lignes ou de colonnes dans le raster en sortie. Cette option tronque les cellules restantes sur les limites en haut ou à droite du raster en entrée, ce qui fait du nombre de lignes ou de colonnes du raster en entrée un multiple du facteur de cellule. Cette option permet au raster en sortie de couvrir une étendue spatiale plus réduite que celle du raster en entrée.",
	"@@Aggregate_ignorenodataincalculations_tag0@@": "Indique si les valeurs ${NoData} sont exclues du calcul d’agrégation.",
	"@@Aggregate_ignorenodataincalculations_tag1@@": "Activé : précise que si des valeurs ${NoData} existent pour des cellules incluses dans l’étendue spatiale d’une plus grande cellule dans le raster en sortie, les valeurs ${NoData} sont ignorées lors de la détermination de la valeur des emplacements des cellules en sortie. Seules les cellules en entrée se trouvant dans l’étendue d’une cellule en sortie contenant des valeurs de données sont utilisées pour déterminer la valeur de la cellule en sortie. Il s’agit de l’option par défaut.",
	"@@Aggregate_ignorenodataincalculations_tag2@@": "Désactivé : précise que si une cellule incluse dans l’étendue spatiale d’une cellule plus grande dans le raster en sortie a une valeur ${NoData}, la valeur de l’emplacement de cette cellule en sortie est également ${NoData}. L’utilisation de cette option implique que, lorsque les cellules d’une agrégation contiennent la valeur ${NoData}, il manque des informations pour effectuer les calculs spécifiés nécessaires à la détermination d’une valeur en sortie.",
	"@@Aggregate_raster_tag0@@": "Raster en entrée à agréger.",
	"@@Expand_numberofcells_tag0@@": "Nombre de cellules à utiliser pour développer les zones.",
	"@@Expand_numberofcells_tag1@@": "La valeur doit être un entier et peut être égale ou supérieure à 1.",
	"@@Expand_raster_tag0@@": "Raster en entrée pour lequel les zones identifiées seront développées.",
	"@@Expand_raster_tag1@@": "Il doit être de type entier.",
	"@@Expand_zonevalues_tag0@@": "Liste des zones à développer.",
	"@@Expand_zonevalues_tag1@@": "Les valeurs de zone doivent être des entiers et peuvent être dans n’importe quel ordre.",
	"@@Expand_zonevalues_tag2@@": "Pour préciser plusieurs zones, utilisez un espace pour séparer les valeurs de zone.",
	"@@Multidimensional-Filter_dimension_tag0@@": "Dimension de laquelle les variables doivent être extraites.",
	"@@Multidimensional-Filter_dimensiondefinition_tag0@@": "Précise la méthode utilisée pour découper la dimension en tranches.",
	"@@Multidimensional-Filter_dimensiondefinition_tag1@@": "<strong>Tout</strong> : la plage complète de chaque dimension est utilisée. Il s’agit de l’option par défaut.",
	"@@Multidimensional-Filter_dimensiondefinition_tag2@@": "<strong>Par valeurs</strong> : la dimension est découpée en tranches selon une valeur de dimension ou une liste de valeurs.",
	"@@Multidimensional-Filter_dimensiondefinition_tag3@@": "<strong>Par plages</strong> : la dimension est découpée en tranches selon une plage ou une liste de plages.",
	"@@Multidimensional-Filter_dimensiondefinition_tag4@@": "<strong>Par itération</strong> : la dimension est découpée en tranches selon une taille d’intervalle précisée.",
	"@@Multidimensional-Filter_endoffirstiteration_tag0@@": "Fin du premier intervalle. Cet intervalle est employé pour l’itération au sein du jeu de données. Ce paramètre est obligatoire si le paramètre <strong>Définition de la dimension</strong> est défini sur <strong>Par itération</strong>.",
	"@@Multidimensional-Filter_maximumvalue_tag0@@": "Valeur maximale de la plage. Ce paramètre est obligatoire si le paramètre <strong>Définition de la dimension</strong> est défini sur <strong>Par plages</strong>.",
	"@@Multidimensional-Filter_minimumvalue_tag0@@": "Valeur minimale de la plage. Ce paramètre est obligatoire si le paramètre <strong>Définition de la dimension</strong> est défini sur <strong>Par plages</strong>.",
	"@@Multidimensional-Filter_raster_tag0@@": "Raster multidimensionnel en entrée.",
	"@@Multidimensional-Filter_ranges_tag0@@": "<p>Plages d’intervalle spécifiées dans une table, utilisées pour agréger des groupes de valeurs. Les valeurs minimales et maximales déterminent la plage à inclure.</p><p>Ce paramètre est requis lorsque le paramètre <strong>Type</strong> est défini sur <strong>Plages d’intervalle</strong>.</p>",
	"@@Multidimensional-Filter_startoffirstiteration_tag0@@": "Début du premier intervalle. Cet intervalle est employé pour l’itération au sein du jeu de données. Ce paramètre est obligatoire si le paramètre <strong>Définition de la dimension</strong> est défini sur <strong>Par itération</strong>.",
	"@@Multidimensional-Filter_step_tag0@@": "Fréquence à laquelle les données sont découpées en tranches. Ce paramètre est obligatoire si le paramètre <strong>Définition de la dimension</strong> est défini sur <strong>Par itération</strong>. La valeur par défaut est 3.",
	"@@Multidimensional-Filter_unit_tag0@@": "Spécifie l’unité de l’itération. Ce paramètre est obligatoire si le paramètre <strong>Définition de la dimension</strong> est défini sur <strong>Par itération</strong> et que le paramètre <strong>Dimension</strong> est défini sur <strong>StdTime</strong>.",
	"@@Multidimensional-Filter_value_tag0@@": "Valeur de la dimension spécifiée. Ce paramètre est obligatoire si le paramètre <strong>Définition de la dimension</strong> est défini sur <strong>Par valeurs</strong>.",
	"@@Multidimensional-Filter_variables_tag0@@": "Variables incluses dans la couche raster multidimensionnelle en sortie. Si aucune variable n’est spécifiée, la première variable est utilisée.",
	"@@Multidimensional-Filter_dimensionless_tag0@@": "Spécifie si la couche possède des valeurs de dimension. Cette option est disponible seulement si une seule tranche est sélectionnée pour la création d’une couche.",
	"@@Multidimensional-Filter_dimensionless_tag1@@": "Activé : la couche ne contient pas de valeurs de dimension.",
	"@@Multidimensional-Filter_dimensionless_tag2@@": "Désactivé : la couche contient des valeurs de dimension. Il s’agit de l’option par défaut.",
	"@@Multidimensional-Raster_interpolationcellsize_tag0@@": "Taille de cellule du raster interpolé. La valeur par défaut est ${1}.",
	"@@Multidimensional-Raster_interpolationmethod_tag0@@": "Méthode de rééchantillonnage utilisée pour interpoler les données irrégulières.",
	"@@Multidimensional-Raster_interpolationmethod_tag1@@": "<strong>Voisin le plus proche</strong> : calcule la valeur du pixel en sortie grâce au pixel en entrée le plus proche. Si aucun pixel source n’existe, aucun nouveau pixel ne peut être créé dans la sortie. Il s’agit de l’option par défaut.",
	"@@Multidimensional-Raster_interpolationmethod_tag2@@": "<strong>TIN linéaire</strong> : utilise un réseau triangulé irrégulier (TIN) à partir du point central de chaque pixel du raster irrégulier pour interpoler une surface qui sera ensuite convertie en raster régulier.",
	"@@Multidimensional-Raster_interpolationmethod_tag3@@": "<strong>Voisin naturel</strong> : recherche le sous-ensemble d’échantillons en entrée le plus proche d’un point de requête et lui applique une pondération sur la base de surfaces proportionnelles afin d’interpoler une valeur.",
	"@@Multidimensional-Raster_interpolationmethod_tag4@@": "<strong>Pondération par l’inverse de la distance</strong> : détermine les valeurs des pixels via la combinaison pondérée de manière linéaire d’un ensemble de points d’échantillonnage ou de pixels. La pondération est une fonction de l’inverse de la distance à partir des pixels ou des points connus.",
	"@@Multidimensional-Raster_raster_tag0@@": "Raster multidimensionnel en entrée.",
	"@@Multidimensional-Raster_variables_tag0@@": "Variable(s) à inclure dans la couche raster multidimensionnelle.",
	"@@Random_distribution_tag0@@": "Indiquez la méthode de distribution de valeurs aléatoires à utiliser.",
	"@@Random_distribution_tag1@@": "<strong>Uniforme</strong> (Minimum, Maximum) : distribution uniforme avec une plage définie. Les valeurs par défaut sont 0 pour Minimum et 1 pour Maximum. Il s’agit de l’option par défaut.",
	"@@Random_distribution_tag2@@": "<strong>Entiers</strong> (Minimum, Maximum) : distribution d’entiers avec une plage définie. Les valeurs par défaut sont 1 pour Minimum et 10 pour Maximum.",
	"@@Random_distribution_tag3@@": "<strong>Normale</strong> (Moyenne, Écart type) : distribution normale avec définition des valeurs Moyenne et Écart type. Les valeurs par défaut sont 0 pour Moyenne et 1 pour Écart type.",
	"@@Random_distribution_tag4@@": "<strong>Exponentielle</strong> (Moyenne) : distribution exponentielle avec définition de la valeur Moyenne. La valeur par défaut est 1.",
	"@@Random_distribution_tag5@@": "<strong>Poisson</strong> (Moyenne) : distribution Poisson avec définition de la valeur Moyenne. La valeur par défaut est 1.",
	"@@Random_distribution_tag6@@": "<strong>Gamma</strong> (Alpha, Bêta) : distribution gamma avec définition des valeurs Alpha et Bêta. Les valeurs par défaut sont 1 pour Alpha et 1 pour Bêta.",
	"@@Random_distribution_tag7@@": "<strong>Binomiale</strong> (N, Probabilité) : distribution binomiale avec définition des valeurs N et Probabilité. Les valeurs par défaut sont 10 pour N et 0,5 pour Probabilité.",
	"@@Random_distribution_tag8@@": "<strong>Géométrique</strong> (Probabilité) : distribution géométrique avec définition de la valeur Probabilité. La valeur par défaut est 0,5.",
	"@@Random_distribution_tag9@@": "<strong>Binomiale négative</strong> (r, Probabilité) : distribution Pascal avec définition des valeurs r et Probabilité. Les valeurs par défaut sont 10,0 pour r et 0,5 pour Probabilité.",
	"@@Random_randomnumbergenerator_tag0@@": "Spécifiez l’algorithme du générateur de nombres aléatoires qui utilise la valeur initiale et la distribution pour générer une séquence de nombres aléatoires. Les options disponibles sont les suivantes :",
	"@@Random_randomnumbergenerator_tag1@@": "Standard C Rand",
	"@@Random_randomnumbergenerator_tag2@@": "Algorithme de collecte ACM 599",
	"@@Random_randomnumbergenerator_tag3@@": "Mersenne Twister",
	"@@Random_randomnumbergenerator_tag4@@": "La valeur par défaut est Mersenne Twister.",
	"@@Random_rasterinfo_tag0@@": "Utilisez le bouton <strong>Charger le raster modèle</strong> pour charger un modèle à partir d’un répertoire ou d’un portail.",
	"@@Random_seed_tag0@@": "La valeur initiale est une valeur entière utilisée pour initialiser le générateur de nombres aléatoires. La valeur par défaut est 1.",
	"@@Shrink_numberofcells_tag0@@": "Nombre de cellules à utiliser pour réduire chaque zone spécifiée.",
	"@@Shrink_numberofcells_tag1@@": "La valeur doit être un entier et peut être égale ou supérieure à 1.",
	"@@Shrink_raster_tag0@@": "Raster en entrée pour lequel les zones identifiées seront réduites.",
	"@@Shrink_raster_tag1@@": "Il doit être de type entier.",
	"@@Shrink_zonevalues_tag0@@": "Liste des zones à réduire.",
	"@@Shrink_zonevalues_tag1@@": "Les valeurs de zone doivent être des entiers et peuvent être dans n’importe quel ordre.",
	"@@Shrink_zonevalues_tag2@@": "Pour préciser plusieurs zones, utilisez un espace pour séparer les valeurs de zone.",
	"@@Distance-Accumulation_costraster_tag0@@": "Raster définissant le coût ou l’impédance de déplacement planimétrique à travers chaque cellule. La valeur à chaque emplacement de cellule représente le coût par unité de distance pour le déplacement à travers la cellule. Chaque valeur d’emplacement de cellule est multipliée par la résolution de cellule et compense également le déplacement diagonal afin d’obtenir le coût total du passage à travers la cellule.",
	"@@Distance-Accumulation_costraster_tag1@@": "Les valeurs du <strong>Raster de coût</strong> peuvent être des entiers ou des nombres à virgule flottante, mais elles ne peuvent pas être négatives ni nulles.",
	"@@Distance-Accumulation_distancemethod_tag0@@": "Détermine si la distance doit être calculée avec une méthode plane (Terre plate) ou géodésique (ellipsoïde).",
	"@@Distance-Accumulation_distancemethod_tag1@@": "Plane : les mesures planes utilisent des mathématiques cartésiennes en 2D pour calculer la longueur et la surface. Cette option est uniquement disponible lorsque les mesures sont effectuées dans un système de coordonnées projetées. Le plan 2D de ce système de coordonnées est alors utilisé comme base des mesures.",
	"@@Distance-Accumulation_distancemethod_tag2@@": "Géodésique : ligne la plus courte entre deux points de la surface de la Terre sur un sphéroïde (ellipsoïde). Les résultats ne changent donc pas quelle que soit la projection en entrée ou en sortie.",
	"@@Distance-Accumulation_distancemethod_tag3@@": "<strong>Remarque :</strong> vous pouvez utiliser une ligne géodésique si vous souhaitez déterminer la distance la plus courte entre deux villes pour la trajectoire de vol d’un avion. On parle également de « ligne orthodromique » si elle repose sur une sphère plutôt que sur un ellipsoïde.",
	"@@Distance-Accumulation_generatebackdirectionbandasadditionalbandinoutput_tag0@@": "Détermine si seul le raster d’accumulation de distance est créé ou si un raster multibande constitué à la fois du raster d’accumulation de distance et du raster de direction arrière est créé.",
	"@@Distance-Accumulation_generatebackdirectionbandasadditionalbandinoutput_tag1@@": "Désactivé : le résultat est le raster d’accumulation de distance. Il s’agit d’un résultat à une seule bande. Il s’agit de l’option par défaut.",
	"@@Distance-Accumulation_generatebackdirectionbandasadditionalbandinoutput_tag2@@": "Activé : un résultat multibande est créé. La première bande correspond au raster d’accumulation de distance et la deuxième, au raster de direction arrière.",
	"@@Distance-Accumulation_generatebackdirectionbandasadditionalbandinoutput_tag3@@": "Le raster de direction arrière calcule pour chaque cellule la direction, en degrés, vers la cellule voisine sur le chemin le plus court en revenant vers la cellule source la plus proche, en évitant toute interruption.",
	"@@Distance-Accumulation_horizontalfactor_tag0@@": "<p>Définit la relation entre le facteur de coût horizontal et l’angle de déplacement relatif horizontal (HRMA).</p><p>Plusieurs facteurs, avec modificateurs, identifient un diagramme de facteurs verticaux défini. En outre, vous pouvez utiliser une table pour créer un diagramme personnalisé. Les diagrammes permettent d’identifier le facteur vertical utilisé pour le calcul du coût total d’un déplacement vers une cellule voisine.</p><p>Dans les explications ci-dessous, deux acronymes sont utilisés : HF et HRMA. Le facteur HF correspond au facteur horizontal qui représente la difficulté horizontale rencontrée lors d’un déplacement d’une cellule vers la suivante. L’angle HRMA correspond à l’angle de déplacement relatif horizontal, lequel représente l’angle entre la direction horizontale d’une cellule et la direction du déplacement.</p><p>Les types de <strong>Facteur horizontal</strong> sont les suivants :</p><ul><li><strong>Binaire</strong> : indique que si l’angle HRMA est inférieur à l’angle d’inflexion, le facteur HF a la valeur associée au facteur zéro. Dans le cas contraire, le facteur horizontal a une valeur infinie.</li><li><strong>Avant</strong> : précise que seul un mouvement vers l’avant est autorisé. L’angle HRMA doit être supérieur ou égal à 0 et inférieur à 90 degrés (0 &lt;= HRMA &lt; 90). Si l’angle HRMA est compris entre 0 et 45 degrés, le facteur HF de la cellule a la valeur associée au facteur zéro. Si l’angle HRMA est supérieur ou égal à 45 degrés, la valeur du modificateur de la valeur de bord est utilisée. Le facteur HF pour un angle HRMA égal ou supérieur à 90 degrés a une valeur infinie.</li><li><strong>Linéaire</strong> : spécifie que le facteur HF est une fonction linéaire de l’angle HRMA.</li><li><strong>Linéaire inverse</strong> : spécifie que le facteur HF est une fonction linéaire inverse de l’angle HRMA.</li><li><strong>Table</strong> : indique qu’un fichier de table sera utilisé pour définir le diagramme des facteurs horizontaux permettant de déterminer les facteurs HF.</li></ul><p>Les modificateurs des facteurs horizontaux sont les suivants :</p><ul><li><strong>Facteur zéro</strong> : définit le facteur horizontal à utiliser lorsque l’angle HRMA est nul. Ce facteur positionne l’intersection avec l’axe des y de toutes les fonctions de facteur horizontal.</li><li><strong>Angle d’inflexion</strong> : définit l’angle HRMA au-delà duquel le facteur HF a une valeur infinie.</li><li><strong>Pente</strong> : définit la pente de la ligne droite utilisée avec les mots-clés de facteur horizontal <strong>Linéaire</strong> et <strong>Linéaire inverse</strong>. La pente est spécifiée sous forme d’un rapport de la hauteur sur la distance parcourue (par exemple, une pente de 45 pour cent correspond à 1/45, la valeur introduite étant 0,02222).</li><li><strong>Valeur de bord</strong> : définit le facteur HF lorsque l’angle HRMA est supérieur ou égal à 45 degrés et inférieur à 90 degrés lorsque le mot-clé de facteur horizontal <strong>Avant</strong> est spécifié.</li><li><strong>Nom de la table</strong> : correspond au nom de la table définissant le facteur HF.</li></ul>",
	"@@Distance-Accumulation_horizontalraster_tag0@@": "Raster définissant la direction horizontale pour chaque cellule.",
	"@@Distance-Accumulation_horizontalraster_tag1@@": "Les valeurs du raster doivent être des entiers compris entre 0 et 360, 0 degré correspondant au nord (vers le haut de l’écran). Elles augmentent dans le sens horaire. La valeur -1 doit être attribuée aux surfaces planes. Les valeurs à chaque emplacement seront utilisées conjointement au <strong>Facteur horizontal</strong> afin de déterminer le coût horizontal encouru lors d’un déplacement à partir d’une cellule vers les cellules voisines.",
	"@@Distance-Accumulation_initialaccumulation_tag0@@": "Coût cumulé initial pour commencer le calcul de coût. Ce paramètre permet de spécifier le coût fixe associé à une source. Plutôt que de commencer avec un coût égal à 0, l’algorithme de coût commence avec la valeur définie.",
	"@@Distance-Accumulation_initialaccumulation_tag1@@": "Vous pouvez utiliser pour ce paramètre une valeur numérique (double) ou un champ du <strong>Raster source</strong>.",
	"@@Distance-Accumulation_initialaccumulation_tag2@@": "La valeur doit être égale ou supérieure à zéro. La valeur par défaut est 0.",
	"@@Distance-Accumulation_maximumaccumulation_tag0@@": "Définit le coût cumulé maximal pour le voyageur pour une source. Les calculs de coût continuent pour chaque source jusqu’à ce que la capacité spécifiée soit atteinte.",
	"@@Distance-Accumulation_maximumaccumulation_tag1@@": "Vous pouvez utiliser pour ce paramètre une valeur numérique (double) ou un champ du <strong>Raster source</strong>.",
	"@@Distance-Accumulation_maximumaccumulation_tag2@@": "La valeur doit être supérieure à zéro. La capacité par défaut est limitée par le segment du raster en sortie.",
	"@@Distance-Accumulation_multipliertoapplytocosts_tag0@@": "Multiplicateur à appliquer aux valeurs de coût.",
	"@@Distance-Accumulation_multipliertoapplytocosts_tag1@@": "Ce paramètre permet de contrôler le mode de déplacement ou la magnitude à une source. Plus le multiplicateur est élevé, plus le coût de déplacement d’une cellule à une autre est important.",
	"@@Distance-Accumulation_multipliertoapplytocosts_tag2@@": "Vous pouvez utiliser pour ce paramètre une valeur numérique (double) ou un champ du <strong>Raster source</strong>.",
	"@@Distance-Accumulation_multipliertoapplytocosts_tag3@@": "Les valeurs doivent être supérieures à zéro. La valeur par défaut est 1.",
	"@@Distance-Accumulation_rasterbarriers_tag0@@": "Raster qui définit les interruptions.",
	"@@Distance-Accumulation_rasterbarriers_tag1@@": "Le jeu de données doit contenir une valeur NoData lorsqu’il n’y a pas d’interruption. Les interruptions sont représentées par des valeurs valides, y compris zéro.",
	"@@Distance-Accumulation_rasterbarriers_tag2@@": "Les interruptions peuvent être définies par un raster de type entier ou à virgule flottante.",
	"@@Distance-Accumulation_sourceraster_tag0@@": "Emplacement des sources en entrée.",
	"@@Distance-Accumulation_sourceraster_tag1@@": "Jeu de données raster qui identifie les cellules ou les emplacements depuis ou vers lesquels la distance de moindre coût cumulé est calculée pour chaque emplacement de cellule en sortie.",
	"@@Distance-Accumulation_sourceraster_tag2@@": "Il peut s’agir d’un raster de type entier ou à virgule flottante.",
	"@@Distance-Accumulation_surfaceraster_tag0@@": "Raster définissant les valeurs d’élévation à chaque emplacement de cellule.",
	"@@Distance-Accumulation_surfaceraster_tag1@@": "Ces valeurs permettent de calculer la distance de surface réelle qui est couverte lors du passage d’une cellule à une autre.",
	"@@Distance-Accumulation_traveldirection_tag0@@": "Définit le sens du voyageur en cas d’application du facteur vertical, du facteur horizontal et du taux de résistance source.",
	"@@Distance-Accumulation_traveldirection_tag1@@": "<strong>À partir de la source</strong> : le facteur vertical, le facteur horizontal et le taux de résistance source sont appliqués à partir de la source en entrée et en se déplaçant vers les cellules non sources. Il s’agit de l’option par défaut.",
	"@@Distance-Accumulation_traveldirection_tag2@@": "<strong>Vers la source</strong> : le facteur vertical, le facteur horizontal et le taux de résistance source sont appliqués à partir de chaque cellule non source et lors du retour à la source en entrée.",
	"@@Distance-Accumulation_traveldirection_tag3@@": "Spécifiez le mot-clé <strong>À partir de la source</strong> ou <strong>Vers la source</strong>, qui est appliqué à toutes les sources, ou spécifiez un champ dans le <strong>Raster source</strong> qui contient les mots-clés permettant d’identifier le sens de déplacement pour chaque source. Ce champ doit contenir la chaîne ${FROM_SOURCE} ou ${TO_SOURCE}.",
	"@@Distance-Accumulation_verticalfactor_tag0@@": "<p>Définit la relation entre le facteur de coût vertical et l’angle de déplacement relatif vertical (VRMA).</p><p>Plusieurs facteurs, avec modificateurs, identifient un diagramme de facteurs verticaux défini. En outre, vous pouvez utiliser une table pour créer un diagramme personnalisé. Les diagrammes permettent d’identifier le facteur vertical utilisé pour le calcul du coût total d’un déplacement vers une cellule voisine.</p><p>Dans les explications ci-dessous, deux acronymes sont utilisés : VF et VRMA. Le facteur VF correspond au facteur vertical, lequel représente la difficulté verticale rencontrée lors d’un déplacement d’une cellule vers la suivante. L’angle VRMA correspond à l’angle de déplacement relatif vertical, lequel représente l’angle de la pente entre la cellule FROM (Origine), ou de traitement, et la cellule TO (Destination).</p><p>Les types de <strong>Facteur vertical</strong> sont les suivants :</p><ul><li><strong>Binaire</strong> : spécifie que si l’angle VRMA est supérieur à l’angle d’inflexion inférieur et inférieur à l’angle d’inflexion supérieur, le facteur VF doit correspondre à la valeur associée au facteur zéro. Dans le cas contraire, le facteur vertical a une valeur infinie.</li><li><strong>Linéaire</strong> : indique que le facteur VF est une fonction linéaire de l’angle VRMA.</li><li><strong>Linéaire symétrique</strong> : spécifie que le facteur VF est une fonction linéaire de l’angle VRMA, du côté négatif ou du côté positif de l’angle VRMA, respectivement, et que les deux fonctions linéaires sont symétriques par rapport à l’axe (y) du facteur VF.</li><li><strong>Linéaire inverse</strong> : indique que le facteur VF est une fonction linéaire inverse de l’angle VRMA.</li><li><strong>Linéaire inverse symétrique</strong> : spécifie que le facteur VF est une fonction linéaire inverse de l’angle VRMA, du côté négatif ou du côté positif de l’angle VRMA, respectivement, et que les deux fonctions linéaires sont symétriques par rapport à l’axe (y) du facteur VF.</li><li><strong>Cos</strong> : identifie le facteur VF comme une fonction cosinusoïdale de l’angle VRMA.</li><li><strong>Sec</strong> : identifie le facteur VF comme une fonction sécante de l’angle VRMA.</li><li><strong>Cos-Sec</strong> : spécifie que le facteur VF est une fonction cosinusoïdale de l’angle VRMA lorsque ce dernier est négatif et qu’il est une fonction sécante de l’angle VRMA lorsque ce dernier n’est pas négatif.</li><li><strong>Sec-Cos</strong> : spécifie que le facteur VF est une fonction sécante de l’angle VRMA lorsque ce dernier est négatif et qu’il est une fonction cosinusoïdale de l’angle VRMA lorsque ce dernier n’est pas négatif.</li><li><strong>Table</strong> : indique qu’un fichier de table sera utilisé pour définir le diagramme des facteurs verticaux permettant de déterminer les facteurs VF.</li></ul><p>Les modificateurs des mots-clés de facteur vertical sont les suivants :</p><ul><li><strong>Facteur zéro</strong> : définit le facteur vertical utilisé lorsque l’angle VRMA est nul. Ce facteur positionne l’intersection avec l’axe des y de la fonction spécifiée. Par définition, le facteur zéro ne s’applique à aucune fonction verticale trigonométrique (COS, SEC, COS-SEC ou SEC-COS). Ces fonctions définissent l’interception de l’axe des y.</li><li><strong>Angle d’inflexion inférieur</strong> : définit l’angle VRMA en dessous duquel le facteur VF a une valeur infinie.</li><li><strong>Angle d’inflexion supérieur</strong> : définit l’angle VRMA au-dessus duquel le facteur VF a une valeur infinie.</li><li><strong>Pente</strong> : définit la pente de la ligne droite utilisée avec les mots-clés de facteur vertical <strong>Linéaire</strong> et <strong>Linéaire inverse</strong>. La pente est spécifiée sous forme d’un rapport de la hauteur sur la distance parcourue (par exemple, une pente de 45 pour cent correspond à 1/45, la valeur introduite étant 0,02222).</li><li><strong>Nom de la table</strong> : correspond au nom de la table définissant le facteur VF.</li></ul>",
	"@@Distance-Accumulation_verticalraster_tag0@@": "Définit la relation entre le facteur de coût vertical et l’angle de déplacement relatif vertical (VRMA).",
	"@@Distance-Accumulation_verticalraster_tag1@@": "Ces valeurs permettent de calculer la pente utilisée pour identifier le facteur vertical associé au déplacement d’une cellule à une autre.",
	"@@Distance-Allocation_costraster_tag0@@": "Raster définissant le coût ou l’impédance de déplacement planimétrique à travers chaque cellule. La valeur à chaque emplacement de cellule représente le coût par unité de distance pour le déplacement à travers la cellule. Chaque valeur d’emplacement de cellule est multipliée par la résolution de cellule et compense également le déplacement diagonal afin d’obtenir le coût total du passage à travers la cellule.",
	"@@Distance-Allocation_costraster_tag1@@": "Les valeurs du <strong>Raster de coût</strong> peuvent être des entiers ou des nombres à virgule flottante, mais elles ne peuvent pas être négatives ni nulles.",
	"@@Distance-Allocation_distancemethod_tag0@@": "Détermine si la distance doit être calculée avec une méthode plane (Terre plate) ou géodésique (ellipsoïde).",
	"@@Distance-Allocation_distancemethod_tag1@@": "Plane : les mesures planes utilisent des mathématiques cartésiennes en 2D pour calculer la longueur et la surface. Cette option est uniquement disponible lorsque les mesures sont effectuées dans un système de coordonnées projetées. Le plan 2D de ce système de coordonnées est alors utilisé comme base des mesures.",
	"@@Distance-Allocation_distancemethod_tag2@@": "Géodésique : ligne la plus courte entre deux points de la surface de la Terre sur un sphéroïde (ellipsoïde). Les résultats ne changent donc pas quelle que soit la projection en entrée ou en sortie.",
	"@@Distance-Allocation_distancemethod_tag3@@": "<strong>Remarque :</strong> vous pouvez utiliser une ligne géodésique si vous souhaitez déterminer la distance la plus courte entre deux villes pour la trajectoire de vol d’un avion. On parle également de « ligne orthodromique » si elle repose sur une sphère plutôt que sur un ellipsoïde.",
	"@@Distance-Allocation_horizontalfactor_tag0@@": "<p>Définit la relation entre le facteur de coût horizontal et l’angle de déplacement relatif horizontal (HRMA).</p><p>Plusieurs facteurs, avec modificateurs, identifient un diagramme de facteurs verticaux défini. En outre, vous pouvez utiliser une table pour créer un diagramme personnalisé. Les diagrammes permettent d’identifier le facteur vertical utilisé pour le calcul du coût total d’un déplacement vers une cellule voisine.</p><p>Dans les explications ci-dessous, deux acronymes sont utilisés : HF et HRMA. Le facteur HF correspond au facteur horizontal qui représente la difficulté horizontale rencontrée lors d’un déplacement d’une cellule vers la suivante. L’angle HRMA correspond à l’angle de déplacement relatif horizontal, lequel représente l’angle entre la direction horizontale d’une cellule et la direction du déplacement.</p><p>Les types de <strong>Facteur horizontal</strong> sont les suivants :</p><ul><li><strong>Binaire</strong> : indique que si l’angle HRMA est inférieur à l’angle d’inflexion, le facteur HF a la valeur associée au facteur zéro. Dans le cas contraire, le facteur horizontal a une valeur infinie.</li><li><strong>Avant</strong> : précise que seul un mouvement vers l’avant est autorisé. L’angle HRMA doit être supérieur ou égal à 0 et inférieur à 90 degrés (0 &lt;= HRMA &lt; 90). Si l’angle HRMA est compris entre 0 et 45 degrés, le facteur HF de la cellule a la valeur associée au facteur zéro. Si l’angle HRMA est supérieur ou égal à 45 degrés, la valeur du modificateur de la valeur de bord est utilisée. Le facteur HF pour un angle HRMA égal ou supérieur à 90 degrés a une valeur infinie.</li><li><strong>Linéaire</strong> : spécifie que le facteur HF est une fonction linéaire de l’angle HRMA.</li><li><strong>Linéaire inverse</strong> : spécifie que le facteur HF est une fonction linéaire inverse de l’angle HRMA.</li><li><strong>Table</strong> : indique qu’un fichier de table sera utilisé pour définir le diagramme des facteurs horizontaux permettant de déterminer les facteurs HF.</li></ul><p>Les modificateurs des facteurs horizontaux sont les suivants :</p><ul><li><strong>Facteur zéro</strong> : définit le facteur horizontal à utiliser lorsque l’angle HRMA est nul. Ce facteur positionne l’intersection avec l’axe des y de toutes les fonctions de facteur horizontal.</li><li><strong>Angle d’inflexion</strong> : définit l’angle HRMA au-delà duquel le facteur HF a une valeur infinie.</li><li><strong>Pente</strong> : définit la pente de la ligne droite utilisée avec les mots-clés de facteur horizontal <strong>Linéaire</strong> et <strong>Linéaire inverse</strong>. La pente est spécifiée sous forme d’un rapport de la hauteur sur la distance parcourue (par exemple, une pente de 45 pour cent correspond à 1/45, la valeur introduite étant 0,02222).</li><li><strong>Valeur de bord</strong> : définit le facteur HF lorsque l’angle HRMA est supérieur ou égal à 45 degrés et inférieur à 90 degrés lorsque le mot-clé de facteur horizontal <strong>Avant</strong> est spécifié.</li><li><strong>Nom de la table</strong> : correspond au nom de la table définissant le facteur HF.</li></ul>",
	"@@Distance-Allocation_horizontalraster_tag0@@": "Raster définissant la direction horizontale pour chaque cellule.",
	"@@Distance-Allocation_horizontalraster_tag1@@": "Les valeurs du raster doivent être des entiers compris entre 0 et 360, 0 degré correspondant au nord (vers le haut de l’écran). Elles augmentent dans le sens horaire. La valeur -1 doit être attribuée aux surfaces planes. Les valeurs à chaque emplacement seront utilisées conjointement au <strong>Facteur horizontal</strong> afin de déterminer le coût horizontal encouru lors d’un déplacement à partir d’une cellule vers les cellules voisines.",
	"@@Distance-Allocation_initialaccumulation_tag0@@": "Coût cumulé initial pour commencer le calcul de coût. Ce paramètre permet de spécifier le coût fixe associé à une source. Plutôt que de commencer avec un coût égal à 0, l’algorithme de coût commence avec la valeur définie.",
	"@@Distance-Allocation_initialaccumulation_tag1@@": "Vous pouvez utiliser pour ce paramètre une valeur numérique (double) ou un champ du <strong>Raster source</strong>.",
	"@@Distance-Allocation_initialaccumulation_tag2@@": "La valeur doit être égale ou supérieure à zéro. La valeur par défaut est 0.",
	"@@Distance-Allocation_maximumaccumulation_tag0@@": "Définit le coût cumulé maximal pour le voyageur pour une source. Les calculs de coût continuent pour chaque source jusqu’à ce que la capacité spécifiée soit atteinte.",
	"@@Distance-Allocation_maximumaccumulation_tag1@@": "Vous pouvez utiliser pour ce paramètre une valeur numérique (double) ou un champ du <strong>Raster source</strong>.",
	"@@Distance-Allocation_maximumaccumulation_tag2@@": "La valeur doit être supérieure à zéro. La capacité par défaut est limitée par le segment du raster en sortie.",
	"@@Distance-Allocation_multipliertoapplytocosts_tag0@@": "Multiplicateur à appliquer aux valeurs de coût.",
	"@@Distance-Allocation_multipliertoapplytocosts_tag1@@": "Ce paramètre permet de contrôler le mode de déplacement ou la magnitude à une source. Plus le multiplicateur est élevé, plus le coût de déplacement d’une cellule à une autre est important.",
	"@@Distance-Allocation_multipliertoapplytocosts_tag2@@": "Les valeurs doivent être supérieures à zéro. La valeur par défaut est 1.",
	"@@Distance-Allocation_multipliertoapplytocosts_tag3@@": "Vous pouvez utiliser pour ce paramètre une valeur numérique (double) ou un champ du <strong>Raster source</strong>.",
	"@@Distance-Allocation_rasterbarriers_tag0@@": "Raster qui définit les interruptions.",
	"@@Distance-Allocation_rasterbarriers_tag1@@": "Le jeu de données doit contenir une valeur NoData lorsqu’il n’y a pas d’interruption. Les interruptions sont représentées par des valeurs valides, y compris zéro.",
	"@@Distance-Allocation_rasterbarriers_tag2@@": "Les interruptions peuvent être définies par un raster de type entier ou à virgule flottante.",
	"@@Distance-Allocation_sourcefield_tag0@@": "Champ permettant d’attribuer des valeurs aux emplacements sources. Il doit être de type entier.",
	"@@Distance-Allocation_sourceraster_tag0@@": "Emplacement des sources en entrée.",
	"@@Distance-Allocation_sourceraster_tag1@@": "Jeu de données raster qui identifie les cellules ou les emplacements depuis ou vers lesquels la distance de moindre coût cumulé est calculée pour chaque emplacement de cellule en sortie.",
	"@@Distance-Allocation_sourcerowandcolumnbands_tag0@@": "Détermine si seul le raster d’allocation est créé ou si un raster multibande est également créé.",
	"@@Distance-Allocation_sourcerowandcolumnbands_tag1@@": "Désactivé : le résultat est le raster d’allocation de distance. Il s’agit d’un résultat à une seule bande. Il s’agit de l’option par défaut.",
	"@@Distance-Allocation_sourcerowandcolumnbands_tag2@@": "Activé : un raster multibande est créé. La première bande est le raster d’allocation de distance, la seconde contient un index de lignes, et la troisième bande contient un index de colonnes. Ces index identifient l’emplacement de la cellule source qui se trouve à la distance de plus faible coût cumulé.",
	"@@Distance-Allocation_surfaceraster_tag0@@": "Raster définissant les valeurs d’élévation à chaque emplacement de cellule.",
	"@@Distance-Allocation_surfaceraster_tag1@@": "Ces valeurs permettent de calculer la distance de surface réelle qui est couverte lors du passage d’une cellule à une autre.",
	"@@Distance-Allocation_traveldirection_tag0@@": "Définit le sens du voyageur en cas d’application du facteur vertical, du facteur horizontal et du taux de résistance source.",
	"@@Distance-Allocation_traveldirection_tag1@@": "<strong>À partir de la source</strong> : le facteur vertical, le facteur horizontal et le taux de résistance source sont appliqués à partir de la source en entrée et en se déplaçant vers les cellules non sources. Il s’agit de l’option par défaut.",
	"@@Distance-Allocation_traveldirection_tag2@@": "<strong>Vers la source</strong> : le facteur vertical, le facteur horizontal et le taux de résistance source sont appliqués à partir de chaque cellule non source et lors du retour à la source en entrée.",
	"@@Distance-Allocation_traveldirection_tag3@@": "Spécifiez le mot-clé <strong>À partir de la source</strong> ou <strong>Vers la source</strong>, qui est appliqué à toutes les sources, ou spécifiez un champ dans le <strong>Raster source</strong> qui contient les mots-clés permettant d’identifier le sens de déplacement pour chaque source. Ce champ doit contenir la chaîne ${FROM_SOURCE} ou ${TO_SOURCE}.",
	"@@Distance-Allocation_verticalfactor_tag0@@": "<p>Définit la relation entre le facteur de coût vertical et l’angle de déplacement relatif vertical (VRMA).</p><p>Plusieurs facteurs, avec modificateurs, identifient un diagramme de facteurs verticaux défini. En outre, vous pouvez utiliser une table pour créer un diagramme personnalisé. Les diagrammes permettent d’identifier le facteur vertical utilisé pour le calcul du coût total d’un déplacement vers une cellule voisine.</p><p>Dans les explications ci-dessous, deux acronymes sont utilisés : VF et VRMA. Le facteur VF correspond au facteur vertical, lequel représente la difficulté verticale rencontrée lors d’un déplacement d’une cellule vers la suivante. L’angle VRMA correspond à l’angle de déplacement relatif vertical, lequel représente l’angle de la pente entre la cellule FROM (Origine), ou de traitement, et la cellule TO (Destination).</p><p>Les types de <strong>Facteur vertical</strong> sont les suivants :</p><ul><li><strong>Binaire</strong> : spécifie que si l’angle VRMA est supérieur à l’angle d’inflexion inférieur et inférieur à l’angle d’inflexion supérieur, le facteur VF doit correspondre à la valeur associée au facteur zéro. Dans le cas contraire, le facteur vertical a une valeur infinie.</li><li><strong>Linéaire</strong> : indique que le facteur VF est une fonction linéaire de l’angle VRMA.</li><li><strong>Linéaire symétrique</strong> : spécifie que le facteur VF est une fonction linéaire de l’angle VRMA, du côté négatif ou du côté positif de l’angle VRMA, respectivement, et que les deux fonctions linéaires sont symétriques par rapport à l’axe (y) du facteur VF.</li><li><strong>Linéaire inverse</strong> : indique que le facteur VF est une fonction linéaire inverse de l’angle VRMA.</li><li><strong>Linéaire inverse symétrique</strong> : spécifie que le facteur VF est une fonction linéaire inverse de l’angle VRMA, du côté négatif ou du côté positif de l’angle VRMA, respectivement, et que les deux fonctions linéaires sont symétriques par rapport à l’axe (y) du facteur VF.</li><li><strong>Cos</strong> : identifie le facteur VF comme une fonction cosinusoïdale de l’angle VRMA.</li><li><strong>Sec</strong> : identifie le facteur VF comme une fonction sécante de l’angle VRMA.</li><li><strong>Cos-Sec</strong> : spécifie que le facteur VF est une fonction cosinusoïdale de l’angle VRMA lorsque ce dernier est négatif et qu’il est une fonction sécante de l’angle VRMA lorsque ce dernier n’est pas négatif.</li><li><strong>Sec-Cos</strong> : spécifie que le facteur VF est une fonction sécante de l’angle VRMA lorsque ce dernier est négatif et qu’il est une fonction cosinusoïdale de l’angle VRMA lorsque ce dernier n’est pas négatif.</li><li><strong>Table</strong> : indique qu’un fichier de table sera utilisé pour définir le diagramme des facteurs verticaux permettant de déterminer les facteurs VF.</li></ul><p>Les modificateurs des mots-clés de facteur vertical sont les suivants :</p><ul><li><strong>Facteur zéro</strong> : définit le facteur vertical utilisé lorsque l’angle VRMA est nul. Ce facteur positionne l’intersection avec l’axe des y de la fonction spécifiée. Par définition, le facteur zéro ne s’applique à aucune fonction verticale trigonométrique (COS, SEC, COS-SEC ou SEC-COS). Ces fonctions définissent l’interception de l’axe des y.</li><li><strong>Angle d’inflexion inférieur</strong> : définit l’angle VRMA en dessous duquel le facteur VF a une valeur infinie.</li><li><strong>Angle d’inflexion supérieur</strong> : définit l’angle VRMA au-dessus duquel le facteur VF a une valeur infinie.</li><li><strong>Pente</strong> : définit la pente de la ligne droite utilisée avec les mots-clés de facteur vertical <strong>Linéaire</strong> et <strong>Linéaire inverse</strong>. La pente est spécifiée sous forme d’un rapport de la hauteur sur la distance parcourue (par exemple, une pente de 45 pour cent correspond à 1/45, la valeur introduite étant 0,02222).</li><li><strong>Nom de la table</strong> : correspond au nom de la table définissant le facteur VF.</li></ul>",
	"@@Distance-Allocation_verticalraster_tag0@@": "Définit la relation entre le facteur de coût vertical et l’angle de déplacement relatif vertical (VRMA).",
	"@@Distance-Allocation_verticalraster_tag1@@": "Ces valeurs permettent de calculer la pente utilisée pour identifier le facteur vertical associé au déplacement d’une cellule à une autre.",
	"@@Euclidean-Back-Direction_cellsize_tag0@@": "Taille de cellule qui sera utilisée pour la création du raster en sortie.",
	"@@Euclidean-Back-Direction_cellsize_tag1@@": "Si la taille de cellule a été explicitement définie dans <strong>Environnements</strong>, il s’agit de la taille de cellule par défaut. Si elle n’a pas été définie, la taille de cellule en sortie est identique à celle du <strong>Raster source</strong>.",
	"@@Euclidean-Back-Direction_distancemethod_tag0@@": "Détermine si la distance doit être calculée avec une méthode plane (Terre plate) ou géodésique (ellipsoïde).",
	"@@Euclidean-Back-Direction_distancemethod_tag1@@": "Plane : les mesures planes utilisent des mathématiques cartésiennes en 2D pour calculer la longueur et la surface. Cette option est uniquement disponible lorsque les mesures sont effectuées dans un système de coordonnées projetées. Le plan 2D de ce système de coordonnées est alors utilisé comme base des mesures.",
	"@@Euclidean-Back-Direction_distancemethod_tag2@@": "Géodésique : ligne la plus courte entre deux points de la surface de la Terre sur un sphéroïde (ellipsoïde). Les résultats ne changent donc pas quelle que soit la projection en entrée ou en sortie.",
	"@@Euclidean-Back-Direction_distancemethod_tag3@@": "<strong>Remarque :</strong> vous pouvez utiliser une ligne géodésique si vous souhaitez déterminer la distance la plus courte entre deux villes pour la trajectoire de vol d’un avion. On parle également de « ligne orthodromique » si elle repose sur une sphère plutôt que sur un ellipsoïde.",
	"@@Euclidean-Back-Direction_maximumdistance_tag0@@": "Définit la distance de seuil prise en compte pour calculer la direction par rapport à la source la plus proche. Si la distance par rapport à la source la plus proche dépasse ce seuil, la sortie de cette cellule prend la valeur NoData.",
	"@@Euclidean-Back-Direction_maximumdistance_tag1@@": "La distance par défaut va jusqu’à l’étendue du raster en sortie.",
	"@@Euclidean-Back-Direction_rasterbarriers_tag0@@": "Raster qui définit les interruptions.",
	"@@Euclidean-Back-Direction_rasterbarriers_tag1@@": "Le jeu de données doit contenir une valeur NoData lorsqu’il n’y a pas d’interruption. Les interruptions sont représentées par des valeurs valides, y compris zéro.",
	"@@Euclidean-Back-Direction_rasterbarriers_tag2@@": "Les interruptions peuvent être définies par un raster de type entier ou à virgule flottante.",
	"@@Euclidean-Back-Direction_sourceraster_tag0@@": "Jeu de données raster qui identifie les cellules ou les emplacements par rapport auxquels la direction euclidienne pour chaque emplacement de cellule en sortie est calculée.",
	"@@Euclidean-Back-Direction_sourceraster_tag1@@": "Le raster en entrée peut être de type entier ou à virgule flottante.",
	"@@Cost-Path_costbacklinkraster_tag0@@": "Nom de la couche raster d’antécédence de coût utilisée pour déterminer le chemin permettant de revenir vers une source via le chemin de moindre coût.",
	"@@Cost-Path_costbacklinkraster_tag1@@": "Pour chaque cellule dans le raster d’antécédence, une valeur identifie le voisin, à savoir la cellule suivante sur le chemin de moindre coût cumulé à partir de la cellule vers une seule cellule source ou un jeu de cellules sources.",
	"@@Cost-Path_costdistanceraster_tag0@@": "Nom du raster de distance de coût à utiliser pour déterminer le chemin de moindre coût à partir des emplacements cibles vers une source.",
	"@@Cost-Path_costdistanceraster_tag1@@": "En général, vous pouvez créer un raster de distance de coût grâce aux fonctions Distance de coût, Allocation de coût ou Antécédence de coût. La couche raster de distance de coût stocke, pour chaque cellule, la distance de coût cumulé minimale sur une surface de coût à partir de chaque cellule vers un ensemble de cellules sources.",
	"@@Cost-Path_destinationfield_tag0@@": "Champ permettant d’obtenir des valeurs pour les emplacements de destination. Les données d’entités en entrée doivent contenir au moins un champ autorisé.",
	"@@Cost-Path_destinationraster_tag0@@": "Couche de jeu de données raster identifiant les cellules à partir desquelles le chemin de moindre coût est déterminé par rapport à la source de moindre coût.",
	"@@Cost-Path_destinationraster_tag1@@": "La couche raster en entrée comporte des cellules qui ont des valeurs valides (zéro est une valeur valide) et les cellules restantes doivent avoir la valeur NoData.",
	"@@Cost-Path_forceflowdirectionconventionforbacklinkraster_tag0@@": "Oblige la fonction à traiter le raster d’antécédence en entrée comme un raster de sens de circulation. Les valeurs des rasters de sens de circulation peuvent être des entiers compris entre 0 et 255.",
	"@@Cost-Path_forceflowdirectionconventionforbacklinkraster_tag1@@": "Désactivé : si les valeurs du raster d’antécédence spécifié sont des entiers compris entre 0 et 8, le jeu de données est traité comme un raster d’antécédence de coût. Si les valeurs sont comprises entre 0 et 255, l’entrée est traitée comme un raster de sens de circulation. Si les valeurs sont comprises entre 0 et 360 avec une virgule flottante, l’entrée est traitée comme un raster de direction arrière.",
	"@@Cost-Path_forceflowdirectionconventionforbacklinkraster_tag2@@": "Activé : le raster fourni pour le raster d’antécédence est traité comme un raster de sens de circulation. Utilisez cette option si le raster de sens de circulation possède une valeur maximale inférieure ou égale à 8.",
	"@@Cost-Path_pathtype_tag0@@": "Mot-clé définissant la façon dont les valeurs et les zones des données de destination en entrée sont interprétées dans les calculs du chemin de coût. Les options sont les suivantes :",
	"@@Cost-Path_pathtype_tag1@@": "<strong>Chaque cellule</strong> : pour chaque cellule contenant des valeurs valides de données de destination en entrée, un chemin de moindre coût est déterminé et enregistré dans le raster en sortie. Avec cette option, chaque cellule des données de destination en entrée est traitée séparément et un chemin de moindre coût est déterminé pour chaque cellule.",
	"@@Cost-Path_pathtype_tag2@@": "<strong>Chaque zone</strong> : pour chaque zone des données de destination en entrée, un chemin de moindre coût est déterminé et enregistré dans le raster en sortie. Avec cette option, pour chaque zone, le chemin de moindre coût commence à la cellule avec la pondération de distance de plus faible coût dans la zone.",
	"@@Cost-Path_pathtype_tag3@@": "<strong>Le moins coûteux</strong> : pour toutes les cellules des données de destination en entrée, le chemin du moindre coût est dérivé de la cellule contenant le minimum de chemins de moindre coût vers les cellules sources.",
	"@@Cell-Statistics_cellsizetype_tag0@@": "Sélectionnez la taille de cellule à utiliser dans le raster en sortie. Si les tailles des cellules en entrée sont identiques, toutes les options donnent les mêmes résultats.",
	"@@Cell-Statistics_cellsizetype_tag1@@": "Premier de : utilise la première taille de cellule des rasters en entrée.",
	"@@Cell-Statistics_cellsizetype_tag2@@": "Min de : utilise la plus petite taille de cellule de tous les rasters en entrée.",
	"@@Cell-Statistics_cellsizetype_tag3@@": "Max de : utilise la plus grande taille de cellule de tous les rasters en entrée. Il s’agit de l’option par défaut.",
	"@@Cell-Statistics_cellsizetype_tag4@@": "Moyenne de : utilise la taille de cellule moyenne de tous les rasters en entrée.",
	"@@Cell-Statistics_cellsizetype_tag5@@": "Dernier de : utilise la dernière taille de cellule des rasters en entrée.",
	"@@Cell-Statistics_extenttype_tag0@@": "Sélectionnez l’étendue à utiliser dans le raster en sortie.",
	"@@Cell-Statistics_extenttype_tag1@@": "Premier de : utilise l’étendue du premier raster en entrée pour déterminer l’étendue de traitement.",
	"@@Cell-Statistics_extenttype_tag2@@": "Intersection de : utilise l’étendue des pixels superposés pour déterminer l’étendue de traitement. Il s’agit de l’option par défaut.",
	"@@Cell-Statistics_extenttype_tag3@@": "Union de : utilise l’étendue de tous les rasters pour déterminer l’étendue de traitement.",
	"@@Cell-Statistics_extenttype_tag4@@": "Dernier de : utilise l’étendue du dernier raster en entrée pour déterminer l’étendue de traitement.",
	"@@Cell-Statistics_processasmultiband_tag0@@": "Détermine le mode de traitement des bandes raster en entrée.",
	"@@Cell-Statistics_processasmultiband_tag1@@": "Désactivé : toutes les entrées multibandes sont traitées comme des bandes individuelles. Il s’agit de l’option par défaut.",
	"@@Cell-Statistics_processasmultiband_tag2@@": "Activé : toutes les entrées multibandes sont traitées comme des bandes multiples.",
	"@@Cell-Statistics_rasters_tag0@@": "Liste des rasters à partir desquels calculer les statistiques, pixel par pixel.",
	"@@Cell-Statistics_percentileinterpolationtype_tag0@@": "<p>Définit la méthode d’interpolation à utiliser lorsque la valeur de centile spécifiée se situe entre deux valeurs de cellule en entrée.</p><ul><li><strong>Détection automatique</strong> : si le type de pixel des rasters en entrée est entier, la méthode <strong>Le plus proche</strong> est utilisée. Si le raster en entrée est de type de pixel à virgule flottante, la méthode <strong>Linéaire</strong> est utilisée. Il s’agit de l’option par défaut.</li><li><strong>Le plus proche</strong> : la valeur disponible la plus proche du centile souhaité est utilisée. Dans ce cas, le type de pixel en sortie est identique à celui du raster de valeurs en entrée.</li><li><strong>Linéaire</strong> : la moyenne pondérée des deux valeurs environnantes du centile souhaité est utilisée. Dans ce cas, le type de pixel en sortie est à virgule flottante.</li></ul><p>Cette option est disponible uniquement si le paramètre <strong>Opération</strong> est défini sur <strong>Médiane</strong> ou <strong>Centile</strong>.</p>",
	"@@Cell-Statistics_percentilevalue_tag0@@": "<p>Centile à calculer. La valeur par défaut est de 90, soit le 90e centile.</p><p>Les valeurs peuvent aller de 0 à 100. Le centile 0 est équivalent à la statistique minimale, tandis que le 100e centile équivaut au maximum. Une valeur de 50 donne le même résultat que la statistique Médiane.</p><p>Cette option est disponible uniquement si le paramètre <strong>Opération</strong> est défini sur <strong>Centile</strong>.</p>",
	"@@Optimal-Path-As-Raster_backdirectionrasterorflowdirectionraster_tag0@@": "Le raster de direction arrière contient des directions calculées en degrés. La direction identifie la cellule suivante sur le chemin optimal de retour vers la source de plus faible coût cumulé, en évitant les interruptions.",
	"@@Optimal-Path-As-Raster_backdirectionrasterorflowdirectionraster_tag1@@": "La plage de valeurs s’étend de 0 à 360 degrés, 0 étant réservé aux cellules source. La direction plein Est (droite) est de 90 et les valeurs augmentent dans le sens horaire (180, Sud ; 270, Ouest et 360, Nord).",
	"@@Optimal-Path-As-Raster_destinationfield_tag0@@": "Champ permettant d’obtenir des valeurs relatives aux emplacements de destination.",
	"@@Optimal-Path-As-Raster_destinationraster_tag0@@": "La couche de jeu de données raster qui identifie les cellules à partir desquelles le chemin optimal est déterminé par rapport à la source de moindre coût. Cette entrée est obligatoire.",
	"@@Optimal-Path-As-Raster_destinationraster_tag1@@": "La couche raster en entrée comporte des cellules qui ont des valeurs valides (zéro est une valeur valide) et les cellules restantes doivent avoir la valeur NoData.",
	"@@Optimal-Path-As-Raster_distanceaccumulationraster_tag0@@": "Le raster d’accumulation de distance permet de déterminer le chemin optimal entre les destinations et les sources. Le raster d’accumulation de distance est généralement créé à l’aide de la fonction <strong>Accumulation de distance</strong>. Chaque cellule du raster d’accumulation de distance représente la distance de coût cumulée minimum sur une surface allant de chaque cellule à un ensemble de cellules source.",
	"@@Optimal-Path-As-Raster_pathtype_tag0@@": "Spécifie un mot-clé définissant la façon dont les valeurs et les zones de l’entrée de destination sont interprétées dans les calculs du chemin de coût.",
	"@@Optimal-Path-As-Raster_pathtype_tag1@@": "<strong>Chaque zone</strong> : pour chaque zone des données de destination en entrée, un chemin de moindre coût est déterminé et enregistré dans le raster en sortie. Avec cette option, pour chaque zone, le chemin optimal commence à la cellule avec la pondération de distance de plus faible coût dans la zone.",
	"@@Optimal-Path-As-Raster_pathtype_tag2@@": "<strong>Le moins coûteux</strong> : pour toutes les cellules des données de destination en entrée, le chemin optimal est dérivé de la cellule contenant le minimum de chemins de moindre coût vers les cellules sources.",
	"@@Optimal-Path-As-Raster_pathtype_tag3@@": "<strong>Chaque cellule</strong> : pour chaque cellule contenant des valeurs valides de données de destination en entrée, un chemin optimal est déterminé. Avec cette option, chaque cellule des données de destination en entrée est traitée séparément et un chemin optimal est déterminé pour chaque cellule.",
	"@@CCDC-Analysis_bandsfordetectingchange_tag0@@": "Identifiants des canaux à utiliser pour la détection de changements. Si aucun identifiant des canaux n’est fourni, tous les canaux du jeu de données raster en entrée seront utilisés.",
	"@@CCDC-Analysis_bandsfordetectingchange_tag1@@": "Les valeurs d’identifiant doivent être des entiers séparés par un espace.",
	"@@CCDC-Analysis_bandsfortemporalmasking_tag0@@": "Les identifiants des canaux vert et SWIR, à utiliser pour masquer les nuages, l’ombre des nuages et la neige. En l’absence d’identifiants des canaux, aucun masquage ne se produit.",
	"@@CCDC-Analysis_bandsfortemporalmasking_tag1@@": "Les valeurs d’identifiant doivent être des entiers séparés par un espace.",
	"@@CCDC-Analysis_bandsfortemporalmasking_tag2@@": "Ce paramètre spécifie les canaux à utiliser pour le masquage des nuages, de l’ombre des nuages et de la neige. L’ombre des nuages et la neige apparaissant très sombres dans le canal à onde courte infrarouge (SWIR) et les nuages et la neige étant très lumineux dans le canal vert, il est recommandé de masquer les index des canaux SWIR et vert.",
	"@@CCDC-Analysis_chi-squaredthresholdfordetectchange_tag0@@": "Seuil du khi deux de probabilité des changements. Si une observation a une probabilité de changement calculée supérieure à ce seuil, elle est signalée comme une anomalie, ce qui correspond à un événement de changement potentiel. La valeur par défaut est 0,99.",
	"@@CCDC-Analysis_minimumconsecutiveanomalyobservations_tag0@@": "Nombre minimum d’observations d’anomalies consécutives devant se produire pour qu’un événement soit considéré comme un changement. Un pixel doit être signalé comme une anomalie pour le nombre spécifié de tranches temporelles consécutives pour qu’il soit considéré comme un changement véritable. La valeur par défaut est 6.",
	"@@CCDC-Analysis_raster_tag0@@": "Couche raster multidimensionnelle en entrée.",
	"@@CCDC-Analysis_updatingfittingfrequency(inyears)_tag0@@": "Fréquence à laquelle le modèle de série chronologique est mis à jour avec les nouvelles observations. Par défaut, le modèle est mis à jour chaque année.",
	"@@CCDC-Analysis_updatingfittingfrequency(inyears)_tag1@@": "Ce paramètre définit la fréquence à laquelle le modèle de série chronologique est mis à jour avec les nouvelles observations. La mise à jour fréquente d’un modèle peut occasionner un grand nombre de calculs pour un avantage minimal. Si, par exemple, le raster multidimensionnel contient 365 tranches ou observations claires par an et que la fréquence de mise à jour concerne chacune de ces observations, le traitement demandera 365 fois plus de calculs qu’une mise à jour annuelle, sans pour autant que la précision ne soit supérieure.",
	"@@Trend-To-RGB_modeltype_tag0@@": "Type des informations du modèle à convertir en RGB.",
	"@@Trend-To-RGB_modeltype_tag1@@": "Linéaire : les informations sur la tendance linéaire seront converties en RVB. Il s’agit de l’option par défaut.",
	"@@Trend-To-RGB_modeltype_tag2@@": "Harmonique : les informations sur la tendance harmonique seront converties en RVB.",
	"@@Trend-To-RGB_raster_tag0@@": "Raster de tendance en entrée.",
	"@@LandTrendr-Analysis_bestmodelproportion_tag0@@": "<p>Meilleure valeur de proportion de modèle. Pendant le processus de sélection du modèle, l’outil calcule la valeur p pour chaque modèle et sélectionne le modèle qui a le plus de sommets tout en conservant la valeur p la plus petite (la plus significative) en fonction de cette valeur de proportion. La valeur 1 signifie que le modèle a la valeur p la plus basse mais n’a peut-être pas un grand nombre de sommets. La valeur par défaut est 1,25.</p>",
	"@@LandTrendr-Analysis_maximumnumberofsegments_tag0@@": "<p>Nombre maximal de segments à associer à la série chronologique de chaque pixel. La valeur par défaut est 5.</p>",
	"@@LandTrendr-Analysis_minimumnumberofobservations_tag0@@": "<p>Nombre minimum d’observations valides nécessaire pour effectuer l’ajustement. Le nombre d’années dans le jeu de données multidimensionnelles en entrée doit être supérieur ou égal à cette valeur. La valeur par défaut est 6.</p>",
	"@@LandTrendr-Analysis_outputotherbands_tag0@@": "<p>Indique si les autres canaux sont inclus dans les résultats.</p><ul><li>Activé : les autres canaux sont inclus dans les résultats. Les informations sur la segmentation et les sommets issues du canal de segmentation initial spécifié dans le paramètre <strong>Canal de traitement</strong> sont également ajustées aux autres canaux des images multicanal. Les résultats du modèle incluent d’abord le canal de segmentation, puis les autres canaux.</li><li>Désactivé : les autres canaux ne sont pas inclus. Il s’agit de l’option par défaut.</li></ul>",
	"@@LandTrendr-Analysis_preventoneyearrecovery_tag0@@": "<p>Indique si les segments qui présentent une récupération sur un an doivent être exclus.</p><ul><li>Activé : les segments qui présentent une récupération sur un an doivent être exclus. Il s’agit de l’option par défaut.</li><li>Désactivé : les segments qui présentent une récupération sur un an ne doivent pas être exclus.</li></ul>",
	"@@LandTrendr-Analysis_processingband_tag0@@": "<p>Canal utilisé pour découper les trajectoires de valeur de pixel au fil du temps en segments. Sélectionnez le canal qui capture le mieux les changements sur l’entité à observer.</p>",
	"@@LandTrendr-Analysis_p-valuethreshold_tag0@@": "<p>Seuil de la valeur p pour la sélection d’un modèle. Une fois les sommets détectés à l’étape initiale d’ajustement du modèle, l’outil ajuste chaque segment et calcule la valeur p pour déterminer le niveau d’importance du modèle. À l’itération suivante, le modèle diminue le nombre de segments d’un et recalcule la valeur p. Le processus continue ainsi et, si la valeur p devient inférieure à la valeur spécifiée dans ce paramètre, le modèle est sélectionné et l’outil arrête de rechercher un meilleur modèle. Si aucun modèle n’est sélectionné, l’outil sélectionne un modèle avec une valeur p inférieure à la <strong>valeur p la plus petite x la meilleure valeur de proportion de modèle</strong>. La valeur par défaut est 0,01.</p>",
	"@@LandTrendr-Analysis_raster_tag0@@": "<p>Couche raster multidimensionnelle Landsat en entrée.</p>",
	"@@LandTrendr-Analysis_recoveryhasincreasetrend_tag0@@": "<p>Indique si la récupération présente une tendance à la hausse (positive).</p><ul><li>Activé : la récupération présente une tendance à la hausse. Il s’agit de l’option par défaut.</li><li>Désactivé : la récupération présente une tendance à la baisse.</li></ul>",
	"@@LandTrendr-Analysis_recoverythreshold_tag0@@": "<p>Valeur du seuil de récupération, en années. Si le taux de récupération d’un segment est plus rapide que la valeur <strong>1/seuil de récupération</strong>, ce segment est ignoré et n’est pas inclus dans le modèle de série chronologique. La valeur doit être comprise entre 0 et 1. La valeur par défaut est 0,25.</p>",
	"@@LandTrendr-Analysis_snappingdate_tag0@@": "<p>Date utilisée pour sélectionner une tranche pour chaque année dans le jeu de données multidimensionnelles en entrée. La tranche dont la date est la plus proche de la date de capture est sélectionnée. Ce paramètre est requis si le jeu de données en entrée contient des données pour des périodes inférieures aux années.</p>",
	"@@LandTrendr-Analysis_spikethreshold_tag0@@": "<p>Seuil à utiliser pour amortir les pics ou les anomalies dans la trajectoire de valeur de pixel. Cette valeur doit être comprise entre 0 et 1, où 1 signifie qu’il n’y a pas d’amortissement. La valeur par défaut est 0,9.</p>",
	"@@LandTrendr-Analysis_vertexcountovershoot_tag0@@": "<p>Nombre de sommets supplémentaires au-delà de <strong>nombre_max_segments + 1</strong> qui peut être utilisé pour ajuster le modèle pendant la phase initiale d’identification des sommets. Plus tard dans le processus de modélisation, le nombre de sommets supplémentaires est réduit à <strong>nombre_max_segments + 1</strong>. La valeur par défaut est 2.</p>",
	"@@Merge-Rasters_rasters_tag0@@": "<p>Jeux de données raster ou jeux de données raster multidimensionnelles en entrée à fusionner.</p>",
	"@@Merge-Rasters_resolveoverlapmethod_tag0@@": "<p>Indique la méthode à utiliser pour résoudre les pixels superposés dans les jeux de données combinés.</p><ul><li><strong>Premier</strong> : la valeur de pixel des zones superposées est celle issue du premier raster de la liste des rasters en entrée. Il s’agit de l’option par défaut.</li><li><strong>Dernier</strong> : la valeur de pixel des zones superposées est celle issue du dernier raster de la liste des rasters en entrée.</li><li><strong>Min</strong> : la valeur de pixel des zones superposées est la valeur minimale des pixels superposés.</li><li><strong>Max</strong> : la valeur de pixel des zones superposées est la valeur maximale des pixels superposés.</li><li><strong>Moyenne</strong> : la valeur de pixel des zones superposées est la valeur moyenne des pixels superposés.</li><li><strong>Somme</strong> : la valeur de pixel des zones superposées est la somme des pixels superposés.</li></ul>",
	"@@Generate-Trend_cycleunit_tag0@@": "<p>Spécifie l’unité de temps à utiliser pour la durée d’un cycle harmonique.</p><ul><li><strong>Jours</strong> : L’unité de durée du cycle harmonique se définit en jours.</li><li><strong>Années</strong> : L’unité de durée du cycle harmonique se définit en années. Il s’agit de l’option par défaut.</li></ul>",
	"@@Generate-Trend_dimensionname_tag0@@": "<p>Dimension le long de laquelle une tendance sera extraite pour la ou les variables sélectionnées dans l’analyse.</p>",
	"@@Generate-Trend_harmonicfrequency_tag0@@": "<p>Numéro de fréquence à utiliser dans l’ajustement de tendance. Ce paramètre spécifie la fréquence des cycles au cours d’une année. La valeur par défaut est 1, soit un cycle harmonique par an.</p><p>Ce paramètre n’est inclus dans l’analyse de tendance que pour une régression harmonique.</p>",
	"@@Generate-Trend_ignorenodata_tag0@@": "<p>Indique si les valeurs NoData sont ignorées lors de l’analyse.</p><ul><li>Activé : l’analyse inclut tous les pixels valides le long d’une dimension donnée et ignore les pixels NoData. Il s’agit de l’option par défaut.</li><li>Désactivé : le résultat de l’analyse est NoData s’il existe des valeurs NoData pour les pixels le long de la dimension donnée.</li></ul>",
	"@@Generate-Trend_lengthofcycle_tag0@@": "<p>Durée de la variation périodique à modéliser. L’unité est le jour, quelle que soit l’unité temporelle des données en entrée. Par exemple, la couleur verte des feuilles possède généralement un cycle de variation important au cours d’une année ; la durée du cycle est égale à 365,25, même si les données en entrée font référence à une couleur verte mensuelle. Les données de température horaires ont un cycle de variation important sur la journée, la durée du cycle est égale à 1.</p><p>La durée par défaut est de 365,25 jours pour les données variant sur un cycle annuel.</p>",
	"@@Generate-Trend_p-valueofslopecoefficient_tag0@@": "<p>Indique s’il convient de calculer la statistique de valeur p du coefficient de pente de la ligne de tendance.</p><ul><li>Activé : la valeur p est calculée et affichée dans les détails à la fin du calcul de la fonction.</li><li>Désactivé : la valeur p n’est pas calculée. Il s’agit de l’option par défaut.</li></ul>",
	"@@Generate-Trend_polynomialorder_tag0@@": "<p>Numéro d’ordre polynomial à utiliser dans l’ajustement de tendance. Ce paramètre spécifie l’ordre polynomial. La valeur par défaut est 2 ou un polynôme de deuxième degré.</p><p>Ce paramètre n’est inclus dans l’analyse de tendance que pour une régression polynomiale.</p>",
	"@@Generate-Trend_r-squared_tag0@@": "<p>Indique s’il convient de calculer la statistique de la qualité de l’ajustement R-carré pour la ligne d’ajustement de la tendance.</p><ul><li>Activé : la valeur R-carré est calculée et affichée dans les détails à la fin du calcul de la fonction.</li><li>Désactivé : la valeur R-carré n’est pas calculée. Il s’agit de l’option par défaut.</li></ul>",
	"@@Generate-Trend_raster_tag0@@": "<p>Raster multidimensionnel en entrée.</p>",
	"@@Generate-Trend_rmse_tag0@@": "<p>Indique s’il convient de générer la racine carrée de l’erreur quadratique moyenne (EQM) de la ligne d’ajustement de la tendance.</p><ul><li>Activé : la valeur EQM est calculée et affichée dans les détails à la fin du calcul de la fonction. Il s’agit de l’option par défaut.</li><li>Désactivé : la valeur EQM n’est pas calculée.</li></ul>",
	"@@Generate-Trend_seasonalperiod_tag0@@": "<p>Spécifie l’unité de temps à utiliser pour mesurer la longueur de la période saisonnière lors du test de Kendall saisonnier</p><ul><li>Jours : l’unité de durée de la période saisonnière se définit en jours. Il s’agit de l’option par défaut.</li><li>Mois : l’unité de durée de la période saisonnière se définit en mois.</li></ul>",
	"@@Generate-Trend_trendtype_tag0@@": "<p>Spécifie le type de ligne à utiliser pour ajuster les valeurs de pixel le long d’une dimension.</p><ul><li><strong>Linéaire</strong> : ajuste les valeurs de pixel d’une variable le long d’une ligne de tendance linéaire. Il s’agit de l’option par défaut.</li><li><strong>Harmonique</strong> : ajuste les valeurs de pixel d’une variable le long d’une ligne de tendance harmonique.</li><li><strong>Polynomiale</strong> : ajuste les valeurs de pixel d’une variable le long d’une ligne de tendance polynomiale de deuxième degré.</li><li><strong>Mann-Kendall</strong> : les valeurs de pixel variables sont évaluées à l’aide du test de tendance de Mann-Kendall.</li><li><strong>Kendall saisonnier</strong> : les valeurs de pixel variables sont évaluées à l’aide du test de tendance de Kendall saisonnier.</li></ul>",
	"@@Compute-Change_cellsizetype_tag0@@": "<p>Sélectionnez la taille de cellule à utiliser dans le raster en sortie. Si les tailles des cellules en entrée sont identiques, toutes les options donnent les mêmes résultats.</p><ul><li>Premier de : utilise la première taille de cellule des rasters en entrée.</li><li>Min de : utilise la taille de cellule la plus petite de tous les rasters en entrée.</li><li>Max de : utilise la taille de cellule la plus grande de tous les rasters en entrée. Il s’agit de l’option par défaut.</li><li>Moyenne de : utilise la taille de cellule moyenne de tous les rasters en entrée.</li><li>Dernier de : utilise la dernière taille de cellule des rasters en entrée.</li></ul>",
	"@@Compute-Change_computechangemethod_tag0@@": "<p>Méthode employée pour le calcul.</p><ul><li><strong>Différence</strong> : calcule la différence mathématique, ou soustraction, entre les valeurs de pixel dans les rasters en entrée. Il s’agit de l’option par défaut.</li><li><strong>Différence relative</strong> - Calcule la différence en valeurs de pixel, en tenant compte des magnitudes des valeurs comparées.</li><li><strong>Différence catégorielle</strong> - Calcule la différence entre deux rasters catégoriels ou thématiques. La sortie contient les transitions de classe ayant eu lieu entre les deux rasters.</li><li><strong>Distance euclidienne spectrale</strong> - Calcule la distance euclidienne entre les valeurs de pixel de deux rasters multibandes.</li><li><strong>Écart de l’angle spectral</strong> - Calcule l’angle spectral entre les valeurs de pixel de deux rasters multibandes. La sortie est exprimée en radians.</li><li><strong>Bande avec le plus de changements</strong> - Calcule la bande comportant le plus grand nombre de changements pour chaque pixel entre deux rasters multibandes.</li></ul><p>Si l’option <strong>Mode de calcul des changements</strong> est définie sur <strong>Différence catégorielle</strong>, et que l’une des entrées n’est pas catégorique, une différence simple est calculée.</p>",
	"@@Compute-Change_definetransitioncolors_tag0@@": "<p>Spécifier la méthode à utiliser pour symboliser les pixels ayant changé de classe.</p><ul><li><strong>Utiliser la moyenne des couleurs d’origine et de destination</strong> : la couleur du pixel correspond à la moyenne de la couleur de sa classe d’origine et de la couleur de sa classe de destination.</li><li><strong>Utiliser les couleurs d’origine</strong> : le pixel prend la couleur de sa classe d’origine.</li><li><strong>Utiliser les couleurs de destination</strong> : le pixel prendra la couleur de sa classe de destination.</li></ul>",
	"@@Compute-Change_extenttype_tag0@@": "<p>Sélectionnez l’étendue à utiliser dans le raster en sortie :</p><ul><li>Premier de : utilise l’étendue du premier raster en entrée pour déterminer l’étendue de traitement.</li><li>Intersection de : utilise l’étendue des pixels superposés pour déterminer l’étendue de traitement. Il s’agit de l’option par défaut.</li><li>Union de : utilise l’étendue de tous les rasters pour déterminer l’étendue de traitement.</li><li>Dernier de : utilise l’étendue du dernier raster en entrée pour déterminer l’étendue de traitement.</li></ul>",
	"@@Compute-Change_filtermethod_tag0@@": "<p>Choisissez la méthode de filtrage à utiliser pour le calcul des changements catégoriels.</p><ul><li><strong>Tout conserver</strong> : toutes les classes sont incluses dans la sortie, et il n’y a pas de filtrage. Sélectionnez cette option pour observer les changements et les persistances dans un seul jeu de données.</li><li><strong>Conserver uniquement les pixels modifiés</strong> : seules les classes qui ont changé de type de classe sont incluses dans la sortie. Sélectionnez cette option si seuls les changements vous intéressent.</li><li><strong>Conserver uniquement les pixels non modifiés</strong> : seules les classes qui restent inchangées sont incluses dans la sortie. Sélectionnez cette option si seules les persistances vous intéressent.</li></ul>",
	"@@Compute-Change_fromclassvalues_tag0@@": "<p>Valeurs de la classe provenant de <strong>Raster d’origine</strong> à inclure dans le calcul, lorsqu’on compare deux rasters catégoriels. Il s’agit d’une liste de valeurs entières délimitées par des espaces correspondant au champ <strong>ClassValue</strong> dans votre jeu de données raster en entrée.</p>",
	"@@Compute-Change_fromraster_tag0@@": "<p>Premier raster utilisé dans le calcul. Pour évaluer le changement de l’intervalle 1 (précédemment) à l’intervalle 2 (ultérieurement), saisissez le raster de l’intervalle 1 ici.</p>",
	"@@Compute-Change_toclassvalues_tag0@@": "<p>Valeurs de la classe provenant de <strong>Raster de destination</strong> à inclure dans le calcul, lorsqu’on compare deux rasters catégoriels. Il s’agit d’une liste de valeurs entières délimitées par des espaces correspondant au champ <strong>ClassValue</strong> dans votre jeu de données raster en entrée.</p>",
	"@@Compute-Change_toraster_tag0@@": "<p>Second raster utilisé dans le calcul. Pour évaluer le changement de l’intervalle 1 (précédemment) à l’intervalle 2 (ultérieurement), saisissez le raster de l’intervalle 2.</p>",
	"@@Compute-Change_usecolormethod_tag0@@": "<p>Spécifier la méthode à utiliser pour symboliser les pixels ayant changé de classe.</p><ul><li><strong>Utiliser la moyenne des couleurs d’origine et de destination</strong> : la couleur du pixel correspond à la moyenne de la couleur de sa classe d’origine et de la couleur de sa classe de destination.</li><li><strong>Utiliser les couleurs d’origine</strong> : le pixel prend la couleur de sa classe d’origine.</li><li><strong>Utiliser les couleurs de destination</strong> : le pixel prendra la couleur de sa classe de destination.</li></ul>",
	"@@Compute-Change_fieldnameforclassnamesinfromraster_tag0@@": "<p>Champ stockant les noms de classe dans l’entrée <strong>Raster d’origine</strong>. L’outil recherche automatiquement le champ <strong>ClassName</strong> ou <strong>Class_Name</strong> à utiliser.</p><p>Utilisez cette option si l’entrée ne contient pas ces noms de champ standards.</p>",
	"@@Compute-Change_fieldnameforclassnamesintoraster_tag0@@": "<p>Champ stockant les noms de classe dans l’entrée <strong>Raster de destination</strong>. L’outil recherche automatiquement le champ <strong>ClassName</strong> ou <strong>Class_Name</strong> à utiliser.</p><p>Utilisez cette option si l’entrée ne contient pas ces noms de champ standards.</p>",
	"@@Statistics_numberofcolumns_tag0@@": "<p>Nombre de colonnes de pixels à utiliser dans une dimension de voisinage focale.</p>",
	"@@Statistics_numberofrows_tag0@@": "<p>Nombre de lignes de pixels que vous utilisez dans une dimension de voisinage focale.</p>",
	"@@Statistics_onlyfillnodatapixels_tag0@@": "<p>Comble les intervalles NoData dans la sortie. Cette fonction est utile lorsqu’il se peut que votre imagerie ait supprimé des lignes.</p>",
	"@@Statistics_raster_tag0@@": "<p>Raster en entrée sur lequel réaliser les statistiques focales.</p>",
	"@@Statistics_statisticstype_tag0@@": "<p>Les sept types de fonctions statistiques focales sont les suivants :</p><ul><li>Minimum : calcule la valeur minimale des pixels dans le voisinage.</li><li>Maximum : calcule la valeur maximale des pixels dans le voisinage.</li><li>Moyenne : calcule la valeur moyenne des pixels dans le voisinage. Il s’agit de l’option par défaut.</li><li>Écart type : calcule la valeur d’écart type des pixels dans le voisinage.</li><li>Médiane : calcule la valeur médiane des pixels dans le voisinage.</li><li>Majorité : calcule la majorité ou la valeur la plus fréquente des pixels dans le voisinage.</li><li>Minorité : calcule la minorité ou la valeur la moins fréquente des pixels dans le voisinage.</li></ul>",
	"@@Detect-Change-Using-Change-Analysis_changedirection_tag0@@": "<p>Indique la direction du changement à inclure dans l’analyse.</p><p>Ce paramètre est disponible uniquement si le raster d’analyse des changements en entrée est la sortie des outils LandTrendr.</p><ul><li><strong>Toutes les directions</strong> : toutes les directions de changement sont incluses dans la sortie. Il s’agit de l’option par défaut.</li><li><strong>Croissant</strong> : seuls les changements dont la direction est positive ou croissante sont inclus dans la sortie.</li><li><strong>Décroissant</strong> : seuls les changements dont la direction est négative ou décroissante sont inclus dans la sortie.</li></ul>",
	"@@Detect-Change-Using-Change-Analysis_changetype_tag0@@": "<p>Indique les informations de changement à calculer.</p><ul><li><strong>Heure du changement le plus récent</strong> : chaque pixel comprend la date de son changement le plus récent dans la série chronologique. Il s’agit de l’option par défaut.</li><li><strong>Heure du premier changement</strong> : chaque pixel comprend la date de son premier changement dans la série chronologique.</li><li><strong>Heure du plus grand changement</strong> : chaque pixel comprend la date de son changement le plus important dans la série chronologique.</li><li><strong>Nombre de changements</strong> : chaque pixel comprend le nombre total de fois où il a été changé dans la série chronologique.</li><li><strong>Date/heure du plus long changement</strong> : chaque pixel comprend la date de changement à la fin du plus long segment de transition de la série chronologique.</li><li><strong>Date/heure du plus court changement</strong> : chaque pixel comprend la date de changement à la fin du plus court segment de transition de la série chronologique.</li><li><strong>Date/heure du changement le plus rapide</strong> : chaque pixel comprend la date de changement à la fin de la transition qui est survenue le plus rapidement.</li><li><strong>Date/heure du changement le plus lent</strong> : chaque pixel comprend la date de changement à la fin de la transition qui est survenue le plus lentement.</li></ul>",
	"@@Detect-Change-Using-Change-Analysis_filterbyduration_tag0@@": "<p>Indique si le filtrage s’effectue sur la durée des changements.</p><p></p><ul><li>Activé : les résultats sont filtrés par durée, de façon à ce que seuls les changements ayant une durée donnée soient inclus dans la sortie.</li><li>Désactivé : les résultats ne sont pas filtrés par durée. Il s’agit de l’option par défaut.</li></ul><p>Ce paramètre est disponible uniquement si le raster d’analyse des changements en entrée est la sortie des outils LandTrendr.</p><p>Si ce paramètre est activé, vous devez définir les paramètres <strong>Durée minimale</strong> et <strong>Durée maximale</strong> pour le filtrage.</p>",
	"@@Detect-Change-Using-Change-Analysis_filterbymagnitude_tag0@@": "<p>Indique si le filtrage s’effectue sur la magnitude des changements. </p><ul><li>Activé : les résultats sont filtrés par magnitude, de façon à ce que seuls les changements ayant une magnitude donnée soient inclus dans la sortie.</li><li>Désactivé : les résultats ne sont pas filtrés par magnitude. Il s’agit de l’option par défaut.</li></ul><p>Ce paramètre est disponible uniquement si le raster d’analyse des changements en entrée est la sortie des outils LandTrendr.</p><p>Si ce paramètre est activé, vous devez définir les paramètres <strong>Magnitude minimale</strong> et <strong>Magnitude maximale</strong> pour le filtrage.</p>",
	"@@Detect-Change-Using-Change-Analysis_filterbyyear_tag0@@": "<p>Indique si la sortie doit être limitée à un nombre d’années. </p><ul><li>Activé : les résultats sont filtrés de façon à ce que seuls les changements survenus dans un nombre d’années spécifique soient inclus dans la sortie.</li><li>Désactivé : les résultats ne sont pas filtrés par année. Il s’agit de l’option par défaut.</li></ul><p>Si ce paramètre est activé, vous devez définir les paramètres <strong>Valeur minimale</strong> et <strong>Valeur maximale</strong> pour le filtrage.</p>",
	"@@Detect-Change-Using-Change-Analysis_filterbystartvalue_tag0@@": "<p>Filtrez les résultats par valeur de départ de façon à ce que seuls les changements d’une valeur de départ donnée soient inclus dans la sortie.</p>",
	"@@Detect-Change-Using-Change-Analysis_filterbyendvalue_tag0@@": "<p>Filtrez les résultats par valeur de fin de façon à ce que seuls les changements d’une valeur de fin donnée soient inclus dans la sortie.</p>",
	"@@Detect-Change-Using-Change-Analysis_maximumnumberofchanges_tag0@@": "<p>Nombre maximal de changements par pixel à calculer. Le nombre saisi correspond au nombre de canaux dans le raster en sortie. Par défaut, la valeur est 1. Autrement dit, une seule date de changement est calculée, et le raster en sortie ne comprend qu’une seule bande.</p><p>Ce paramètre n’est pas disponible si le paramètre <strong>Type de changement</strong> est défini sur <strong>Nombre de changements</strong>.</p>",
	"@@Detect-Change-Using-Change-Analysis_raster_tag0@@": "<p>Raster d’analyse des changements en entrée.</p>",
	"@@Detect-Change-Using-Change-Analysis_segmentdate_tag0@@": "<p>Indique s’il faut extraire la date au début ou à la fin d’un segment de changement.</p><p>Ce paramètre est disponible uniquement si le raster d’analyse des changements en entrée est la sortie des outils LandTrendr.</p><ul><li><strong>Début du segment</strong> : la date est extraite au début d’un segment de changement. Il s’agit de l’option par défaut.</li><li><strong>Fin du segment</strong> : la date est extraite à la fin d’un segment de changement.</li></ul>",
	"@@Kernel-Density_areaunits_tag0@@": "<p>Unités de surface des valeurs de densité en sortie.</p><ul><li>Unité de carte au carré : pour le carré des unités linéaires de la référence spatiale en sortie.</li><li>Miles carrés : pour les miles (U.S.).</li><li>Kilomètres carrés : pour les kilomètres.</li><li>Acres : pour les acres (U.S.).</li><li>Hectares : pour les hectares.</li><li>Mètres carrés : pour les mètres.</li><li>Yards carrés : pour les yards (U.S.).</li><li>Pieds carrés : pour les pieds (U.S.).</li><li>Pouces carrés : pour les pouces (U.S.).</li><li>Centimètres carrés : pour les centimètres.</li><li>Millimètres carrés : pour les millimètres.</li></ul>",
	"@@Kernel-Density_cellsize_tag0@@": "<p>Taille de pixel du jeu de données raster en sortie. Si la valeur du paramètre <strong>Taille de cellule</strong> a été configurée dans les environnements de géotraitement, il s’agit de la valeur par défaut.</p>",
	"@@Kernel-Density_inputbarriers_tag0@@": "<p>Jeu de données qui définit les interruptions.</p><p>Les interruptions peuvent être une couche d’entités polylignes ou surfaciques.</p>",
	"@@Kernel-Density_inputfeatures_tag0@@": "<p>Entités ponctuelles ou linéaires en entrée pour lesquelles calculer la densité.</p>",
	"@@Kernel-Density_method_tag0@@": "<p>Détermine s’il convient d’utiliser un plus court chemin sur une sphéroïde (géodésique) ou une terre plate (plane).</p><ul><li><strong>Planaire</strong> : utilise des distances planes entre les entités. Il s’agit de l’option par défaut.</li><li><strong>Géodésique</strong> : utilise des distances géodésiques entre les entités. Cette méthode tient compte de la courbure du sphéroïde et gère correctement les données situées près des pôles et la ligne internationale de changement de jour.</li></ul><p>Il est conseillé d’utiliser la méthode <strong>Géodésique</strong> avec des données stockées dans un système de coordonnées non approprié pour les mesures de distance et toute analyse couvrant une zone géographique importante. Par exemple, Web Mercator ou tout système de coordonnées géographiques doit utiliser la méthode <strong>Géodésique</strong>.</p>",
	"@@Kernel-Density_outputcellvalues_tag0@@": "<p>Détermine ce que les valeurs du raster en sortie représentent.</p><ul><li><strong>Densités</strong> : les valeurs en sortie représentent la valeur de densité prévue. Il s’agit de l’option par défaut.</li><li><strong>Volumes attendus</strong> : les valeurs en sortie représentent l’intensité prévue du phénomène dans chaque pixel. Puisque la valeur de pixel est liée à la valeur du paramètre <strong>Taille de cellule</strong> spécifiée, il est impossible de ré-échantillonner le raster résultant sur une autre taille de pixel, car il représente l’intensité du phénomène.</li></ul>",
	"@@Kernel-Density_populationfield_tag0@@": "<p>Champ indiquant les valeurs de population pour chaque entité. La valeur du paramètre <strong>Champ de population</strong> représente le total ou la quantité à répartir sur tout le paysage pour créer une surface continue. Le paramètre <strong>Champ de population</strong> peut contenir des valeurs entières ou à virgule flottante.</p><p>Les options et les comportements par défaut pour le champ sont répertoriés ci-dessous par ordre de priorité.</p><ul><li>Utilisez <strong>Aucun</strong> si aucun élément ou valeur spéciale n’est utilisé et que chaque entité est comptée une seule fois.</li><li>Utilisez <strong>Shape</strong> si les entités en entrée contiennent des valeurs z.</li><li>Sinon, le champ par défaut est <strong>POPULATION</strong>, ou toute dérivée acceptable de la population :<ul><li><strong>POPULATIONxxxx</strong> où <strong>xxxx</strong> représente n’importe quel caractère valide, tel que <strong>POPULATION6</strong>, <strong>POPULATION1974</strong>, ou <strong>POPULATIONROADTYPE</strong>.</li><li><strong>POP</strong>.</li><li><strong>POPxxxx</strong>.</li><li>Si aucune des conditions ci-dessus ne s’applique, la valeur par défaut est <strong>Aucun</strong>.</li></ul></li></ul>",
	"@@Kernel-Density_searchradius_tag0@@": "<p>Rayon de recherche dans lequel le calcul de la densité est effectué. Les unités sont basées sur l’unité linéaire de la projection.</p><p>Par exemple, si les unités sont exprimées en mètres pour inclure toutes les entités dans un voisinage d’un mile, définissez le rayon de recherche sur 1 609,344 (car 1 mile = 1 609,344 mètres).</p>",
	"@@Zonal-Statistics_ignorenodataincalculations_tag0@@": "<p>Indique si les valeurs <strong>NoData</strong> dans <strong>Raster de valeurs</strong> influencent les résultats de la zone dans laquelle elles se trouvent.</p><ul><li><strong>Oui</strong> : dans une zone particulière, seuls les pixels qui ont une valeur dans le <strong>raster de valeurs</strong> sont utilisés pour déterminer la valeur en sortie de cette zone. Les pixels <strong>NoData</strong> dans le <strong>Raster de valeurs</strong> sont ignorées dans le calcul statistique. Il s’agit de l’option par défaut.</li><li><strong>Non</strong> : dans une zone particulière, s’il existe des pixels <strong>NoData</strong> dans le <strong>Raster de valeurs</strong>, on considère que les informations sont insuffisantes pour exécuter des calculs statistiques pour l’ensemble des pixels de cette zone. Par conséquent, la zone entière reçoit la valeur <strong>NoData</strong> sur le raster en sortie.</li></ul>",
	"@@Zonal-Statistics_percentileinterpolationtype_tag0@@": "<p>Détermine la méthode d’interpolation en centile à utiliser lorsque le nombre de valeurs du raster en entrée à calculer est pair.</p><ul><li><strong>Détection automatique</strong> : si le type de pixel du raster de valeurs en entrée est de type entier, la méthode <strong>Le plus proche</strong> est utilisée. Si le type de pixel du raster de valeurs en entrée est de type virgule flottante, la méthode <strong>Linéaire</strong> est utilisée. Il s’agit de l’option par défaut.</li><li><strong>La plus proche</strong> : la valeur disponible la plus proche du centile souhaité est utilisée. Dans ce cas, le type de pixel en sortie est identique à celui du raster de valeurs en entrée.</li><li><strong>Linéaire</strong> : la moyenne pondérée des deux valeurs environnantes du centile souhaité est utilisée. Dans ce cas, le type de pixel en sortie est à virgule flottante.</li></ul>",
	"@@Zonal-Statistics_percentilevalue_tag0@@": "<p>Percentile à calculer. La valeur par défaut est de 90, soit le 90ème centile.</p><p>Les valeurs peuvent s’échelonner de 0 à 100. Le centile n° 0 est équivalent à la statistique Minimum tandis que le 100è centile équivaut au Maximum. </p>Une valeur de 50 donne le même résultat que la statistique Médiane.",
	"@@Zonal-Statistics_processasmultidimensional_tag0@@": "<p>Détermine le mode de traitement du raster de valeurs multidimensionnelles en entrée.</p><ul><li><strong>Tranche actuelle</strong> : les statistiques sont calculées à partir de la tranche actuelle d’un jeu de données multidimensionnelles. Il s’agit de l’option par défaut.</li><li><strong>Toutes les tranches</strong> : les statistiques sont calculées pour toutes les dimensions (par exemple, temps ou profondeur) d’un jeu de données multidimensionnelles.</li></ul>",
	"@@Zonal-Statistics_statisticstype_tag0@@": "<p>Type de statistique à calculer.</p><ul><li><strong>Moyenne </strong> : calcule la moyenne de tous les pixels dans le <strong>Raster de valeurs</strong> qui appartiennent à la même zone que le pixel en sortie.</li><li><strong>Majorité</strong> :détermine la valeur qui se produit le plus souvent parmi tous les pixels du <strong>Raster de valeurs</strong> qui appartiennent à la même zone que le pixel en sortie.</li><li><strong>Maximum</strong> : détermine la plus grande valeur parmi tous les pixels du <strong>Raster de valeurs</strong> qui appartiennent à la même zone que le pixel en sortie.</li><li><strong>Médiane</strong> : détermine la valeur médiane parmi tous les pixels du <strong>Raster de valeurs</strong> qui appartiennent à la même zone que le pixel en sortie.</li><li><strong>Minimum</strong> : détermine la plus petite valeur parmi tous les pixels du <strong>Raster de valeurs</strong> qui appartiennent à la même zone que le pixel en sortie.</li><li><strong>Minorité</strong> : détermine la valeur qui se produit le moins souvent parmi tous les pixels du <strong>Raster de valeurs</strong> qui appartiennent à la même zone que le pixel en sortie.</li><li><strong>Percentile</strong> : calcule un pourcentage de tous les pixels dans le <strong>Raster de valeurs</strong> qui appartiennent à la même zone que le pixel en sortie. Le 90è centile est calculé par défaut. Vous pouvez déterminer le pourcentage à calculer à l’aide du paramètre <strong>Valeur de centile</strong>.</li><li><strong>Plage</strong> : calcule l’écart entre la plus petite valeur et la plus grande valeur parmi tous les pixels du <strong>Raster de valeurs</strong> qui appartiennent à la même zone que le pixel en sortie.</li><li><strong>Écart type</strong> : calcule l’écart type de tous les pixels dans le <strong>Raster de valeurs</strong> qui appartiennent à la même zone que le pixel en sortie.</li><li><strong>Somme</strong> : calcule la valeur totale de tous les pixels dans le <strong>Raster de valeurs</strong> qui appartiennent à la même zone que le pixel en sortie.</li><li><strong>Variété</strong> : calcule le nombre de valeurs uniques pour tous les pixels du <strong>Raster de valeurs</strong> qui appartiennent à la même zone que le pixel en sortie.</li></ul>",
	"@@Zonal-Statistics_valueraster_tag0@@": "<p>Raster contenant les valeurs sur lesquelles vous voulez calculer une statistique.</p>",
	"@@Zonal-Statistics_zonefield_tag0@@": "<p>Champ contenant les valeurs qui définissent chaque zone. Il peut s’agir d’un champ de type entier ou chaîne du raster de zones.</p>",
	"@@Zonal-Statistics_zoneraster_tag0@@": "<p>Jeu de données définissant les zones. Les zones peuvent être définies par un raster de type entier.</p>",
	"@@Zonal-Statistics_calculatecircularstatistics_tag0@@": "<p>Détermine le mode de calcul du type de statistique.</p><ul><li><strong>Arithmétique</strong> : calcule des statistiques arithmétiques. Il s’agit de l’option par défaut.</li><li><strong>Circulaire</strong> : calcule les statistiques circulaires appropriées aux quantités cycliques, telles que la direction de la boussole en degrés, les journées ou la partie décimale des nombres réels.</li></ul>",
	"@@Zonal-Statistics_circularwrapvalue_tag0@@": "<p>Valeur possible la plus élevée (limite supérieure) dans les données cycliques. Il s’agit d’un nombre positif dont la valeur par défaut est 360. Cette valeur représente également la même quantité que la valeur possible la plus faible (limite inférieure).</p><p>Ce paramètre n’est applicable que lorsque des statistiques circulaires sont calculées.</p>",
	"@@Boundary-Clean-function_inputraster_tag0@@": "<p>Raster en entrée dont la limite entre les zones doit être lissée.</p><p>Il doit être de type entier.</p>",
	"@@Boundary-Clean-function_runexpansionandshrinkingtwice_tag0@@": "<p>Indique le nombre d’exécutions du lissage : une ou deux fois. </p><ul><li><p><strong>Activé</strong> : l’opération d’expansion et de contraction est effectuée deux fois. La première fois, l’opération est effectuée selon le type de tri spécifié. Ensuite, une opération d’expansion et de contraction supplémentaire est effectuée avec la priorité inverse. Il s’agit de l’option par défaut.</p></li><li><p><strong>Désactivé</strong> : l’opération d’expansion et de contraction est effectuée une seule fois en fonction du type de tri. </p></li></ul>",
	"@@Boundary-Clean-function_sorttype_tag0@@": "<p>Indique le type de tri à utiliser dans le processus de lissage. Celui-ci définit la priorité des cellules à étendre dans leur voisinage.</p><p>Le tri peut être basé sur la valeur de la zone ou sur la surface de la zone.</p><ul><li><p><strong>Ne pas trier</strong> : les zones ne sont pas triées par taille. Les zones dotées de valeurs plus importantes sont prioritaires pour s’étendre dans des zones à valeurs moindres dans la sortie lissée. Il s’agit de l’option par défaut.</p></li><li><p><strong>Décroissant</strong> : trie les zones par ordre de taille décroissant. Les zones dotées de surfaces totales plus importantes sont prioritaires pour s'étendre dans des zones à surfaces totales moindres. Cette option tend à éliminer ou à réduire la prévalence des cellules des zones plus petites dans la sortie lissée.</p></li><li><p><strong>Croissant</strong> : trie les zones par ordre de taille croissant. Les zones dotées de surfaces totales plus réduites sont prioritaires pour s'étendre dans des zones à surfaces totales plus importantes. Cette option tend à conserver ou à augmenter la prévalence des cellules des zones plus petites dans la sortie lissée.</p></li></ul>",
	"@@Aggregate-Multidimensional_dimension_tag0@@": "<p>Dimension de l’agrégation. Il s’agit de la dimension sur laquelle les variables sont agrégées.</p>",
	"@@Aggregate-Multidimensional_dimensiondefinition_tag0@@": "<p>Indique la méthode à utiliser pour filtrer les données multidimensionnelles en entrée avant d’effectuer l’agrégation.</p><ul><li><strong>Tout</strong> : la plage complète de chaque dimension est utilisée. Il s’agit de l’option par défaut.</li><li><strong>Par valeurs</strong> : la dimension est découpée en tranches selon une valeur de la dimension ou une liste de valeurs.</li><li><strong>Par plages</strong> : la dimension est découpée en tranches selon une plage ou une liste de plages.</li><li><strong>Par itération</strong> : la dimension est découpée en tranches selon une taille d’intervalle précisée.</li></ul>",
	"@@Aggregate-Multidimensional_iterationdefinitionparameters_tag0@@": "<p>Les paramètres de définition de l’itération permettent de définir les valeurs de la dimension à utiliser pour filtrer les données multidimensionnelles en entrée aux fins d’analyse lorsque le paramètre <strong>Définition de la dimension</strong> est défini sur <strong>Par itération</strong>.</p><ul><li><strong>Dimension</strong> : la dimension à utiliser pour le filtrage.</li><li><strong>Début de la première itération</strong> : début du premier intervalle. Cet intervalle est employé pour l’itération au sein du jeu de données.</li><li><strong>Fin de la première itération</strong> : fin du premier intervalle. Cet intervalle est employé pour l’itération au sein du jeu de données.</li><li><strong>Étape</strong> : fréquence à laquelle les données sont découpées en tranches.</li><li><strong>Unité</strong> : unité de l’itération.</li></ul>",
	"@@Aggregate-Multidimensional_keywordinterval_tag0@@": "<p>Spécifie le mot-clé de l’intervalle à utiliser lors de l’agrégation sur la dimension.</p><p>Ce paramètre est requis lorsque le paramètre <strong>Type</strong> est défini sur <strong>Mot-clé de l’intervalle</strong>.</p><ul><li><strong>Par heure</strong> : les valeurs des données sont agrégées selon des intervalles horaires et le résultat comprend chaque heure de la série chronologique. Il s’agit de l’option par défaut.</li><li><strong>Par jour</strong> : les valeurs des données sont agrégées selon des intervalles quotidiens et le résultat comprend chaque jour de la série chronologique.</li><li><strong>Par semaine</strong> : les valeurs des données sont agrégées selon des intervalles hebdomadaires et le résultat comprend chaque semaine de la série chronologique.</li><li><strong>Par dix jours</strong> : les valeurs des données sont agrégées en 3 périodes de 10 jours chacune. La dernière période peut contenir plus ou moins de 10 jours. La sortie comprend 3 tranches pour chaque mois.</li><li><strong>Par cinq jours</strong> : les valeurs des données sont agrégées en 6 périodes de 5 jours chacune. La dernière période peut contenir plus ou moins de 5 jours. La sortie comprend 6 tranches pour chaque mois.</li><li><strong>Par mois</strong> : les valeurs des données sont agrégées selon des intervalles mensuels et le résultat comprend chaque mois de la série chronologique.</li><li><strong>Par trimestre</strong> : les valeurs des données sont agrégées selon des intervalles trimestriels et le résultat comprend chaque trimestre de la série chronologique.</li><li><strong>Par an</strong> : les valeurs des données sont agrégées selon des intervalles annuels et le résultat comprend chaque année de la série chronologique.</li><li><strong>Récurrence quotidienne</strong> : les valeurs des données sont agrégées selon des intervalles quotidiens et le résultat comprend une valeur agrégée par jour du calendrier julien. La sortie comprend au maximum 366 tranches temporelles quotidiennes.</li><li><strong>Récurrence hebdomadaire</strong> : les valeurs des données sont agrégées selon des intervalles hebdomadaires et le résultat comprend une valeur agrégée par semaine. La sortie comprend au maximum 53 tranches temporelles hebdomadaires.</li><li><strong>Récurrence mensuelle</strong> : les valeurs des données sont agrégées selon des intervalles mensuels et le résultat comprend une valeur agrégée par mois. La sortie comprend au maximum 12 tranches temporelles mensuelles.</li><li><strong>Récurrence trimestrielle</strong> : les valeurs des données sont agrégées selon des intervalles trimestriels et le résultat comprend une valeur agrégée par trimestre. La sortie comprend au maximum 4 tranches temporelles trimestrielles.</li></ul>",
	"@@Aggregate-Multidimensional_operation_tag0@@": "<p>Indique la méthode mathématique utilisée pour combiner les tranches agrégées dans un intervalle.</p><ul><li><strong>Majorité</strong> : valeur de pixel la plus fréquente, calculée sur toutes les tranches comprises dans l’intervalle.</li><li><strong>Maximum</strong> : valeur maximale d’un pixel, calculée sur toutes les tranches comprises dans l’intervalle.</li><li><strong>Moyenne</strong> : moyenne des valeurs d’un pixel, calculée sur toutes les tranches comprises dans l’intervalle. Il s’agit de l’option par défaut.</li><li><strong>Médiane</strong> : valeur médiane d’un pixel, calculée sur toutes les tranches comprises dans l’intervalle.</li><li><strong>Minimum</strong> : valeur minimale d’un pixel, calculée sur toutes les tranches comprises dans l’intervalle.</li><li><strong>Minorité</strong> : valeur de pixel la moins fréquente, calculée sur toutes les tranches comprises dans l’intervalle.</li><li><strong>Plage</strong> : plage des valeurs d’un pixel, calculée sur toutes les tranches comprises dans l’intervalle.</li><li><strong>Écart type</strong> : écart type des valeurs d’un pixel, calculé sur toutes les tranches comprises dans l’intervalle.</li><li><strong>Somme</strong> : somme des valeurs d’un pixel, calculée sur toutes les tranches comprises dans l’intervalle.</li><li><strong>Variété</strong> : nombre de valeurs de pixel uniques, calculé sur toutes les tranches comprises dans l’intervalle.</li></ul><p>Chacune de ces options a également une option Ignorer NoData équivalente. Elle permet d’effectuer l’opération mathématique sur tous les pixels valides de la dimension et d’ignorer les pixels NoData.</p>",
	"@@Aggregate-Multidimensional_ranges_tag0@@": "<p>Plages d’intervalle spécifiées dans une table, utilisées pour agréger des groupes de valeurs. Les valeurs minimales et maximales déterminent la plage à inclure.</p><p>Ce paramètre est requis lorsque le paramètre <strong>Type</strong> est défini sur <strong>Plages d’intervalle</strong>.</p>",
	"@@Aggregate-Multidimensional_raster_tag0@@": "<p>Raster multidimensionnel en entrée.</p>",
	"@@Aggregate-Multidimensional_type_tag0@@": "<p>Spécifie l’intervalle dimensionnel pour lequel les données sont agrégées.</p><ul><li><strong>Tout</strong> : les données des variables sont agrégées sur toutes les tranches. Il s’agit de l’option par défaut.</li><li><strong>Mot-clé de l’intervalle</strong> : les données des variables sont agrégées à l’aide d’un intervalle courant connu.</li><li><strong>Valeur d’intervalle</strong> : les données des variables sont agrégées à l’aide d’un intervalle et d’une unité définis par l’utilisateur.</li><li><strong>Plages d’intervalle</strong> : les données des variables sont agrégées entre les paires de valeurs ou de dates spécifiées.</li></ul>",
	"@@Aggregate-Multidimensional_valueinterval_tag0@@": "<p>Taille de l’intervalle à utiliser pour l’agrégation.</p><p>Ce paramètre est requis lorsque le paramètre<strong>Type</strong>est défini sur<strong>Valeur d’intervalle</strong>.</p>",
	"@@Aggregate-Multidimensional_values_tag0@@": "<p>Les valeurs de la dimension à utiliser pour filtrer les données multidimensionnelles en entrée aux fins d’analyse. Ce paramètre est requis lorsque le paramètre <strong>Définition de la dimension</strong> est défini sur <strong>Par valeurs</strong>.</p>",
	"@@Aggregate-Multidimensional_variables_tag0@@": "<p>La ou les variables qui sont agrégées sur la dimension donnée.</p>",
	"@@Predict-Using-Regression_inputdefinitionfile_tag0@@": "<p>Fichier de définition de régression Esri (<strong>.ecd</strong>) en entrée qui contient les statistiques et les informations pour le jeu de données spécifique, le modèle de régression et les attributs choisis.</p>",
	"@@Predict-Using-Regression_rasters_tag0@@": "<p>Jeu ou jeux de données raster représentant les variables de prévision. Il peut s’agir d’un raster à une seule bande ou à plusieurs bandes, d’un raster multidimensionnel, d’un jeu de données mosaïque ou d’un ensemble de rasters.</p>",
	"@@Cell-Statistics_operation_tag0@@": "<p>Type de calcul statistique que vous souhaitez effectuer.</p><p>Les statistiques disponibles sont les suivantes :<strong>Majorité</strong>,<strong>Maximum</strong>,<strong>Moyenne</strong>,<strong>Médiane</strong>,<strong>Minimum</strong>,<strong>Minorité</strong>,<strong>Centile</strong>,<strong>Plage</strong>,<strong>Écart type</strong>,<strong>Somme</strong> et<strong>Variété</strong>.</p><p>La valeur par défaut est<strong>Moyenne</strong>.</p>",
	"@@Colormap-To-RGB_randomlyassigncolortounmappedpixels_tag0@@": "<p>Les couleurs sont attribuées de manière aléatoire aux pixels non inclus dans la palette de couleurs.</p><ul><li>Désactivé : aucune couleur n’est attribuée aux pixels non appariés. Il s’agit de l’option par défaut.</li><li>Activé : une couleur est attribuée aux pixels non appariés.</li></ul>",
	"@@Pansharpen_sensor_tag0@@": "<p>Lorsque l’algorithme Gram-Schmidt est choisi, vous pouvez également spécifier le capteur du raster multicanal en entrée. Le choix du type de capteur définit les pondérations de canal appropriées.</p>",
	"@@Dimensional-Moving-Statistics_backwardwindow_tag0@@": "<p>Valeur du nombre de coupes avant ou au-dessus à inclure dans la fenêtre définie. La valeur doit être un entier positif compris entre 1 et 100. La valeur par défaut est 1.</p><p>L’unité de ce paramètre est la coupe.</p>",
	"@@Dimensional-Moving-Statistics_circularwrapvalue_tag0@@": "<p>Valeur allant être utilisée pour arrondir une valeur linéaire à la plage d’une moyenne circulaire donnée.</p><p>Sa valeur doit être positive. La valeur par défaut est 360 degrés</p>.",
	"@@Dimensional-Moving-Statistics_dimension_tag0@@": "<p>Nom de la dimension le long de laquelle la fenêtre se déplace.</p><p>La valeur par défaut est la première dimension autre que x,y trouvée dans le raster multidimensionnel en entrée.</p>",
	"@@Dimensional-Moving-Statistics_forwardwindow_tag0@@": "<p>Valeur du nombre de coupes après ou au-dessous à inclure dans la fenêtre définie. La valeur doit être un entier positif compris entre 1 et 100. La valeur par défaut est 1.</p><p>L’unité de ce paramètre est la coupe.</p>",
	"@@Dimensional-Moving-Statistics_inputraster_tag0@@": "<p>Le raster en entrée ne peut être qu’un raster multidimensionnel au format Cloud Raster Format (fichier<strong>.crf</strong>).</p>",
	"@@Dimensional-Moving-Statistics_nodatahandling_tag0@@": "<p>Indique comment les valeurs NoData sont traitées par le calcul de statistiques.</p><ul><li><strong>Données</strong> : les valeurs NoData de la valeur en entrée sont ignorées dans les résultats de la fenêtre définie dans laquelle elles se trouvent. Il s’agit de l’option par défaut.</li><li><strong>NoData</strong> : les valeurs en sortie sont NoData s’il existe des valeurs NoData dans l’entrée dans la fenêtre définie.</li><li><strong>Remplir les valeurs NoData</strong> : les valeurs de cellule NoData sont remplacées à l’aide de la statistique sélectionnée dans la fenêtre définie.</li></ul>",
	"@@Dimensional-Moving-Statistics_percentileinterpolationtype_tag0@@": "<p>Définit la méthode d’interpolation à utiliser lorsque la valeur de centile se situe entre deux valeurs de cellule.</p><ul><li><strong>Détection automatique</strong> : si le raster en entrée est de type entier, la méthode<strong>Le plus proche</strong> est utilisée. Si le raster en entrée est de type pixel flottant, la méthode<strong>Linéaire</strong>est utilisée. Il s’agit de l’option par défaut.</li><li><strong>Le plus proche</strong> : la valeur disponible la plus proche du centile souhaité est utilisée. Dans ce cas, le type de pixel en sortie est identique à celui du raster de valeurs en entrée.</li><li><strong>Linéaire</strong> : la moyenne pondérée des deux valeurs environnantes du centile souhaité est utilisée. Dans ce cas, le type de pixel en sortie est à virgule flottante.</li></ul>",
	"@@Dimensional-Moving-Statistics_percentilevalue_tag0@@": "<p>Centile calculé lorsque le type de statistique<strong>Centile</strong>est sélectionné. La valeur par défaut est de 90, soit le 90e centile.</p><p>Les valeurs peuvent aller de 0 à 100. Le centile n° 0 équivaut essentiellement à la statistique minimale tandis que le 100e centile équivaut à la statistique maximale, à ceci près que le résultat est une virgule flottante. Une valeur de 50 génère le même résultat que la statistique Médiane.</p>",
	"@@Dimensional-Moving-Statistics_statisticstype_tag0@@": "<p>Spécifie le type de statistique à calculer.</p><p></p><ul><li><strong>Moyenne</strong> : la moyenne (valeur moyenne) des cellules dans la fenêtre définie est calculée. Il s’agit de l’option par défaut.</li><li><strong>Moyenne circulaire</strong> : la moyenne circulaire des cellules dans la fenêtre définie est calculée. Lorsque ce type de statistique est sélectionné, le paramètre<strong>Valeur de repli circulaire</strong>devient disponible.</li><li><strong>Majorité</strong> : la majorité (valeur la plus fréquente) des cellules dans la fenêtre définie est identifiée.</li><li><strong>Maximum</strong> : le maximum (valeur la plus élevée) des cellules dans la fenêtre définie est identifié.</li><li><strong>Médiane</strong> : la médiane des cellules du voisinage est identifiée.</li><li><strong>Minimum</strong> : le minimum (valeur la plus faible) des cellules du voisinage est identifié.</li><li><strong>Centile</strong> : un centile des cellules du voisinage est calculé. Lorsque ce type de statistique est sélectionné, les paramètres<strong>Valeur de centile</strong>et<strong>Type d’interpolation en centile</strong>deviennent disponibles. Utilisez ces nouveaux paramètres afin de désigner le centile à calculer et de choisir le type d’interpolation à utiliser, respectivement.</li></ul>",
	"@@Interpolate-Raster-By-Dimension_dimension_tag0@@": "<p>Dimension à utiliser pour l’interpolation.</p><p>Ce paramètre est requis si le paramètre<strong>Définition de la dimension</strong>est défini sur<strong>Par intervalle</strong>.</p>",
	"@@Interpolate-Raster-By-Dimension_dimensiondefinition_tag0@@": "<p>Spécifie la méthode utilisée pour filtrer les données multidimensionnelles en entrée avant d’effectuer l’interpolation.</p><ul><li><strong>Par valeurs</strong> : la dimension est découpée en tranches à l’aide d’une valeur de dimension ou d’une liste de valeurs.</li><li><strong>Par intervalle</strong> : la dimension est découpée en tranches selon une plage ou une liste de plages.</li><li><strong>Par raster cible</strong> : la dimension est découpée à l’aide d’un raster multidimensionnel cible spécifique.</li></ul>",
	"@@Interpolate-Raster-By-Dimension_endofinterval_tag0@@": "<p>Fin de l’intervalle, utilisée pour les itérations dans le jeu de données.</p><p>Ce paramètre est requis si le paramètre<strong>Définition de la dimension</strong>est défini sur<strong>Par intervalle</strong>.</p>",
	"@@Interpolate-Raster-By-Dimension_ignorenodata_tag0@@": "<p>Spécifie si les valeurs NoData sont ignorées lors de l’analyse.</p><ul><li>Désactivé : l’analyse renvoie une valeur NoData si les tranches adjacentes comportent des valeurs NoData. Il s’agit de l’option par défaut.</li><li>Activé : l’analyse n’utilise que les tranches comportant des pixels valides et ignore les tranches NoData.</li></ul>",
	"@@Interpolate-Raster-By-Dimension_interpolationmethod_tag0@@": "<p>Spécifie la méthode à utiliser pour interpoler le raster.</p><ul><li><strong>Linéaire</strong> : la sortie est interpolée de façon linéaire à l’aide des tranches adjacentes. Il s’agit de l’option par défaut.</li><li><strong>Voisin par défaut</strong> : la sortie utilise la tranche adjacente la plus proche.</li></ul>",
	"@@Interpolate-Raster-By-Dimension_raster_tag0@@": "<p>Raster multidimensionnel en entrée.</p>",
	"@@Interpolate-Raster-By-Dimension_startofinterval_tag0@@": "<p>Début de l’intervalle, utilisé pour les itérations dans le jeu de données.</p><p>Ce paramètre est requis si le paramètre<strong>Définition de la dimension</strong>est défini sur<strong>Par intervalle</strong>.</p>",
	"@@Interpolate-Raster-By-Dimension_step_tag0@@": "<p>Fréquence à laquelle les données sont interpolées.</p><p>Ce paramètre est requis si le paramètre<strong>Définition de la dimension</strong>est défini sur<strong>Par intervalle</strong>.</p>",
	"@@Interpolate-Raster-By-Dimension_targetraster_tag0@@": "<p>Raster cible spécifié par la définition de la dimension.</p><p>Ce paramètre est requis si le paramètre<strong>Définition de la dimension</strong>est défini sur<strong>Par raster cible</strong>.</p>",
	"@@Interpolate-Raster-By-Dimension_unit_tag0@@": "<p>Unité d’intervalle.</p><p>Ce paramètre est requis si le paramètre<strong>Définition de la dimension</strong>est défini sur<strong>Par intervalle</strong>.</p>",
	"@@Interpolate-Raster-By-Dimension_values_tag0@@": "<p>Valeurs de dimension à utiliser afin de filtrer les données multidimensionnelles en entrée pour l’analyse.</p><p>Ce paramètre est requis si le paramètre<strong>Définition de la dimension</strong>est défini sur<strong>Par valeurs</strong>.</p>",
	"@@Interpolate-Raster-By-Dimension_variables_tag0@@": "<p>La ou les variables interpolées par la définition de la dimension.</p>",
	"@@Terrain-Flatten_calibrationtype_tag0@@": "<p>Indique si le terrain de la sortie est aplani à l’aide de <strong>Sigma zéro</strong> ou <strong>Gamma zéro</strong>.</p><ul><li><strong>Gamma zéro</strong> - La rétrodiffusion bêta zéro est normalisée à l’aide de la surface d’unité d’un plan localement tangent au MNE, couramment appelé angle d’incidence local. Il s’agit de l’option par défaut.</li><li><strong>Sigma zéro</strong> - La rétrodiffusion bêta zéro est normalisée à l’aide d’un MNE pour calculer la surface.</li></ul>",
	"@@Terrain-Flatten_dem_tag0@@": "<p>MNE en entrée.</p><p>Le MNE permet d’estimer la zone locale éclairée.</p>",
	"@@Terrain-Flatten_geoid_tag0@@": "<p>Indique si le système de référence verticale du MNE en entrée est transformé en hauteur ellipsoïdale. La plupart des jeux de données d’élévation étant référencés par rapport à la hauteur orthométrique du niveau de la mer, une correction est donc nécessaire pour effectuer la conversion en hauteur ellipsoïdale.</p><ul><li>Activé - Une correction géodésique est effectuée pour convertir la hauteur orthométrique en hauteur ellipsoïdale (en fonction du géoïde EGM96). Il s’agit de l’option par défaut.</li><li>Désactivé - Aucune correction géodésique n’est effectuée. Utilisez cette option uniquement si le MNE est exprimé en hauteur ellipsoïdale.</li></ul>",
	"@@Terrain-Flatten_raster_tag0@@": "<p>Données radar en entrée.</p><p>Ce raster doit être préalablement calibré par radiométrie sur bêta zéro.</p>",
	"@@Create-Color-Composite_blueexpression_tag0@@": "<p>Calcul affecté à la troisième bande.</p><p>Nom de bande, identifiant de bande ou expression algébrique utilisant les bandes.</p><p>Les opérateurs pris en charge sont unaires : addition (+), soustraction (-), multiplication (*) et division (/).</p>",
	"@@Create-Color-Composite_greenexpression_tag0@@": "<p>Calcul affecté à la deuxième bande.</p><p>Nom de bande, identifiant de bande ou expression algébrique utilisant les bandes.</p><p>Les opérateurs pris en charge sont unaires : addition (+), soustraction (-), multiplication (*) et division (/).</p>",
	"@@Create-Color-Composite_inputraster_tag0@@": "<p>Données raster multibande en entrée.</p>",
	"@@Create-Color-Composite_method_tag0@@": "<p>Indique la méthode à utiliser pour extraire les bandes.</p><ul><li>Noms des bandes - Utilise le nom de la bande représentant l’intervalle de longueur d’onde sur le spectre électromagnétique (rouge, proche infrarouge ou infrarouge thermique, par exemple) ou la polarisation (VH, VV, HH ou HV). Il s’agit de l’option par défaut.</li><li>ID des bandes - Utilise le numéro de la bande (B1, B2, B3, etc.).</li></ul>",
	"@@Create-Color-Composite_redexpression_tag0@@": "<p>Calcul affecté à la première bande.</p><p>Nom de bande, identifiant de bande ou expression algébrique utilisant les bandes.</p><p>Les opérateurs pris en charge sont unaires : addition (+), soustraction (-), multiplication (*) et division (/).</p>",
	"@@Surface-Parameters_localsurfacetype_tag0@@": "<p>Choisir le type de fonction de surface qui est appliqué autour de la cellule cible.</p><ul><li>Quadratique : une fonction de surface quadratique est appliquée aux cellules du voisinage. Il s’agit du type par défaut.</li><li>Biquadratique : une fonction de surface biquadratique est appliquée aux cellules de voisinage.</li></ul>",
	"@@Surface-Parameters_neighborhooddistance_tag0@@": "<p>La sortie est calculée sur cette distance à partir du centre de la cellule cible. Elle détermine la taille du voisinage. La valeur par défaut est la taille de cellule du raster en entrée, soit un voisinage de 3 par 3.</p>",
	"@@Surface-Parameters_outputslopemeasurement_tag0@@": "<p>Unités de mesure (degrés ou pourcentages) utilisées pour le raster de pente en sortie. Ce paramètre est actif uniquement si <strong>Type de paramètre</strong> est défini sur <strong>Pente</strong>.</p><ul><li>Degré : l’inclinaison de la pente est calculée en degrés. Il s’agit de l’option par défaut.</li><li>Pourcentage d’élévation : l’inclinaison de la pente est calculée en pourcentage d’élévation, également désigné sous le nom de pourcentage de pente.</li></ul>",
	"@@Surface-Parameters_parametertype_tag0@@": "<p>Spécifie le type de paramètre de surface en sortie à calculer.</p><ul><li>Pente : le taux de variation de l’élévation est calculé. Il s’agit de l’option par défaut.</li><li>Exposition : la direction de la pente descendante du taux de variation maximal pour chaque cellule est calculée.</li><li>Courbure moyenne : la courbure globale de la surface est mesurée. Elle est calculée comme étant la moyenne des courbures maximale et minimale. Cette courbure décrit la convexité ou la concavité intrinsèque de la surface, indépendamment de la direction ou de l’influence de la gravité.</li><li>Courbure tangentielle (isoligne normale) : la courbure normale géométrique perpendiculaire à la ligne de pente, tangente à l’isoligne, est mesurée. Cette courbure est généralement appliquée pour caractériser la convergence ou la divergence du flux sur la surface.</li><li>Courbure longitudinale (ligne de pente normale) : la courbure normale géométrique le long de la ligne de pente est mesurée. Cette courbure est généralement appliquée pour caractériser l’accélération et la décélération du flux sur la surface.</li><li>Courbure transversale (isoligne projetée) : la courbure le long des isolignes est mesurée.</li><li>Torsion géodésique des isolignes : le taux de variation de l’angle de pente le long des isolignes est mesuré.</li><li>Courbure gaussienne : la courbure globale de la surface est mesurée. Elle est calculée comme le produit des courbures maximale et minimale.</li><li>Courbure Casorati : la courbure générale de la surface est mesurée. Elle peut être égale à zéro ou à tout autre nombre positif.</li></ul>",
	"@@Surface-Parameters_projectgeodesicazimuths_tag0@@": "<p>Spécifie si les azimuts géodésiques sont projetés afin de corriger la distorsion de l’angle provoquée par la référence spatiale en sortie. Ce paramètre est actif uniquement si <strong>Type de paramètre</strong> est défini sur <strong>Exposition</strong>.</p><ul><li>Désactivé : les azimuts géodésiques ne sont pas projetés. Il s’agit de l’option par défaut.</li><li>Activé : les azimuts géodésiques sont projetés.</li></ul>",
	"@@Surface-Parameters_raster_tag0@@": "<p>Raster de surface en entrée. Il peut s’agir d’un raster de type entier ou à virgule flottante.</p>",
	"@@Surface-Parameters_useadaptiveneighborhood_tag0@@": "<p>Spécifie si la distance de voisinage varie selon les changements du paysage (distance adaptative). La distance maximale est déterminée par la distance de voisinage. La distance minimale correspond à la taille de cellule du raster en entrée.</p><ul><li>Désactivé : une distance de voisinage unique (fixe) est utilisée à toutes les localisations. Il s’agit de l’option par défaut.</li><li>Activé : une distance de voisinage adaptative est utilisée à toutes les localisations.</li></ul>",
	"@@Surface-Parameters_useequatorialaspect_tag0@@": "<p>Spécifie si l’exposition est mesurée à partir d’un point sur l’équateur ou à partir du pôle Nord. Ce paramètre est actif uniquement si <strong>Type de paramètre</strong> est défini sur <strong>Exposition</strong>.</p><ul><li>Désactivé : l’exposition est mesurée à partir du pôle Nord. Il s’agit de l’option par défaut.</li><li>Activé : l’exposition est mesurée à partir d’un point sur l’équateur.</li></ul>",
	"@@Surface-Parameters_zunit_tag0@@": "<p>Unité linéaire des valeurs z verticales.</p><p>Elle est définie par un système de coordonnées verticales, s’il en existe un. En l’absence d’un système de coordonnées verticales, l’unité z doit être définie à partir de la liste des unités pour garantir un calcul géodésique correct.</p><ul><li>Pouce : l’unité linéaire est le pouce.</li><li>Pied : l’unité linéaire est le pied.</li><li>Yard : l’unité linéaire est le yard.</li><li>Mile (États-Unis) : l’unité linéaire est le mile.</li><li>Mille nautique : l’unité linéaire est le mille nautique.</li><li>Millimètre : l’unité linéaire est le millimètre.</li><li>Centimètre : l’unité linéaire est le centimètre.</li><li>Mètre : l’unité linéaire est le mètre. Il s’agit de l’option par défaut.</li><li>Kilomètre : l’unité linéaire est le kilomètre.</li><li>Décimètre : l’unité linéaire est le décimètre.</li></ul>",
	"@@Surface-Parameters_analysismask_tag0@@": "<p>Raster indiquant les localisations où l’analyse est effectuée.</p><p>Le raster peut être de type entier ou à virgule flottante.</p><p>Toutes les cellules ayant une valeur valide, zéro y compris, composent le masque. Les cellules NoData dans le masque de saisie auront une valeur NoData dans la sortie.</p>",
	"@@Geometric-Median_cellsizetype_tag0@@": "<p>Sélectionnez la taille de cellule à utiliser dans le raster en sortie. Si toutes les tailles de cellule en entrée sont identiques, toutes les options donnent les mêmes résultats.</p><ul><li>Premier de : utiliser la première taille de cellule des rasters en entrée.</li><li>Min de : utiliser la plus petite taille de cellule de tous les rasters en entrée.</li><li>Max de : utiliser la plus grande taille de cellule de tous les rasters en entrée. Il s’agit de l’option par défaut.</li><li>Moyenne de : utiliser la taille de cellule moyenne de tous les rasters en entrée.</li><li>Dernier de : utiliser la dernière taille de cellule des rasters en entrée.</li></ul>",
	"@@Geometric-Median_epsilon_tag0@@": "<p>Spécifie la valeur de convergence entre deux itérations consécutives. Si epsilon est inférieur ou égal à la valeur spécifiée, l’itération s’arrête et le résultat de la dernière itération est utilisé.</p>",
	"@@Geometric-Median_extenttype_tag0@@": "<p>Sélectionnez l’étendue à utiliser dans le raster en sortie :</p><ul><li><p>Premier de : utiliser l’étendue du premier raster en entrée pour déterminer l’étendue de traitement.</p></li><li>Intersection de : utiliser l’étendue des pixels superposés pour déterminer l’étendue de traitement. Il s’agit de l’option par défaut.</li><li>Union de : utiliser l’étendue de tous les rasters pour déterminer l’étendue de traitement.</li><li>Dernier de : utiliser l’étendue du dernier raster en entrée pour déterminer l’étendue de traitement.</li></ul>",
	"@@Geometric-Median_maximumnumberofiterations_tag0@@": "<p>Spécifie le nombre maximal d’itérations à effectuer. Le calcul prend fin lorsque cette valeur est atteinte, quelle que soit la valeur du paramètre <strong>Epsilon</strong>.</p>",
	"@@Geometric-Median_rasters_tag0@@": "<p>Rasters multibandes en entrée.</p>",
	"@@Least-Cost-Corridor_inputaccumulativecostdistanceraster1_tag0@@": "<p>Raster en entrée représentant la distance de coût cumulé pour la première source.</p><p>Il doit s’agir d’une distance de coût cumulé générée en sortie de la fonction <strong>Accumulation de distance</strong> ou <strong>Allocation de distance</strong>.</p>",
	"@@Least-Cost-Corridor_inputaccumulativecostdistanceraster2_tag0@@": "<p>Raster en entrée représentant la distance de coût cumulé pour la deuxième source.</p><p>Il doit s’agir d’une distance de coût cumulé générée en sortie de la fonction <strong>Accumulation de distance</strong> ou <strong>Allocation de distance</strong>.</p>",
	"@@Least-Cost-Corridor_inputbackdirectionraster1_tag0@@": "<p>Raster de direction arrière en entrée pour la première source.</p><p>Il s’agit d’un jeu de données raster indiquant la direction de la cellule suivante sur le chemin de moindre coût en revenant vers la première source. Il doit s’agir de la sortie générée par la fonction <strong>Accumulation de distance</strong> ou <strong>Allocation de distance</strong>.</p>",
	"@@Least-Cost-Corridor_inputbackdirectionraster2_tag0@@": "<p>Raster de direction arrière en entrée pour la seconde source.</p><p>Il s’agit d’un jeu de données raster indiquant la direction de la cellule suivante sur le chemin de moindre coût en revenant vers la première source. Il doit s’agir de la sortie générée par la fonction <strong>Accumulation de distance</strong> ou <strong>Allocation de distance</strong>.</p>",
	"@@Least-Cost-Corridor_threshold_tag0@@": "<p>Pourcentage ou seuil de coût cumulé qui détermine si une cellule donnée est ou non incluse dans le raster de couloir en sortie.</p><p>Lorsque le paramètre <strong>Méthode de seuil</strong> est défini sur <strong>Pourcentage de moindre coût</strong>, la valeur spécifiée indique le pourcentage de hausse à appliquer à partir de la valeur minimale des rasters de distance de coût cumulé additionnés. Lorsque le paramètre <strong>Méthode de seuil</strong> est défini sur <strong>Coût cumulé</strong>, la valeur indique les cellules dont la somme du coût cumulé est inférieure ou égale à la valeur à inclure dans le couloir.</p><p>Ce paramètre est actif uniquement si le paramètre <strong>Méthode de seuil</strong> est défini sur <strong>Pourcentage de moindre coût</strong> ou <strong>Coût cumulé</strong>.</p>",
	"@@Least-Cost-Corridor_thresholdmethod_tag0@@": "<p>Indique le mode de définition du seuil.</p><p></p><ul><li><strong>Aucun seuil</strong> : aucun seuil n’est appliqué et le couloir généré couvre l’étendue entière des rasters en entrée. Il s’agit de l’option par défaut.</li><li><strong>Pourcentage de moindre coût</strong> : le seuil est exprimé en un pourcentage de la valeur minimale des rasters de distance de coût cumulé additionnés.</li><li><strong>Coût cumulé</strong> : le seuil est exprimé en unités de distance de coût cumulé.</li></ul>"
};
const helpTexts_fr = {
	rfxArgsHelpTexts: rfxArgsHelpTexts
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (helpTexts_fr);


//# sourceMappingURL=help-texts.fr-7671a600.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,