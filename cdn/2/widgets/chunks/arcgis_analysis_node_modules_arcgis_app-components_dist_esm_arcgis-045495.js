"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_arcgis-045495"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-credit-estimate_2.entry.js":
/*!***************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-credit-estimate_2.entry.js ***!
  \***************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   arcgis_credit_estimate: () => (/* binding */ ArcgisCreditEstimate),
/* harmony export */   arcgis_select: () => (/* binding */ ArcgisSelect)
/* harmony export */ });
/* harmony import */ var _index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-e3bf7da7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-e3bf7da7.js");
/* harmony import */ var _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./languageUtil-ef0e54b2.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-ef0e54b2.js");
/* harmony import */ var _locale_050b6db9_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./locale-050b6db9.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-050b6db9.js");
/* harmony import */ var _util_21dc2ac5_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./util-21dc2ac5.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/util-21dc2ac5.js");
/* harmony import */ var _functional_44de8fcf_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./functional-44de8fcf.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-44de8fcf.js");
/* harmony import */ var _guid_aeaed84d_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./guid-aeaed84d.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/guid-aeaed84d.js");
/* harmony import */ var _loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./loadModules-b4ac1247.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-b4ac1247.js");
/* harmony import */ var _dom_4d367677_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./dom-4d367677.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-4d367677.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */









const arcgisCreditEstimateCss = ":host{display:flex;border:1px solid var(--calcite-color-border-1)}.left{padding-top:1rem;padding-bottom:1rem;padding-left:1.5rem;padding-right:1.5rem;flex:1 1 auto}.right{display:flex;flex-direction:column;justify-content:center;padding-top:1rem;padding-bottom:1rem;padding-left:1.5rem;padding-right:1.5rem;text-align:center;font-size:0.875rem;color:var(--calcite-color-text-3);flex:0 0 auto;border-inline-start:1px solid var(--calcite-color-border-1)}.number{display:block;font-size:1.625rem;font-weight:700}.number--blue{color:var(--calcite-color-brand)}.number--red{color:var(--calcite-color-status-danger)}.number--orange{color:#fe583e}.number calcite-icon{margin-inline-end:0.25rem;vertical-align:-0.25rem}.header{margin:0px;padding-bottom:0.5rem;font-size:1rem;font-weight:500;color:var(--calcite-color-text-1)}.text{margin-bottom:0.25rem;margin-top:0px;display:flex;font-size:0.875rem;color:var(--calcite-color-text-2)}.text--left{flex:1 1 auto}";

const ArcgisCreditEstimate = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.api = 4;
        this.transactionCreditCost = undefined;
        this.availableCredits = undefined;
        this.showTotal = false;
        this.formattedStrings = undefined;
    }
    updateTransactionCost() {
        this.replaceStrings();
    }
    async componentWillLoad() {
        const locale = await (0,_locale_050b6db9_js__WEBPACK_IMPORTED_MODULE_2__.g)(this.el);
        this.i18n = locale[0];
        await this.replaceStrings();
    }
    async replaceStrings() {
        const { transactionCreditCost, availableCredits, i18n } = this;
        const options = { api: this.api, type: "decimal", places: 2 };
        const available = await (0,_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.f)(availableCredits, options);
        const needed = await (0,_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.f)(transactionCreditCost, options);
        const percent = await (0,_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.f)(transactionCreditCost / availableCredits, Object.assign(Object.assign({}, options), { type: "percent" }));
        this.formattedStrings = Object.assign(Object.assign({}, i18n), { creditsAvailable: i18n.creditsAvailable.replace("${credits}", available), creditsAvailableColon: i18n.creditsAvailableColon.replace("${credits}", available), creditsNeededColon: i18n.creditsNeededColon.replace("${credits}", needed), creditsNeeded: i18n.creditsNeeded.replace("${credits}", needed), creditsNeededPercent: i18n.creditsNeededPercent.replace("${percent}", percent), needed,
            percent });
    }
    render() {
        if (!this.formattedStrings) {
            return null;
        }
        const { transactionCreditCost, availableCredits, showTotal, formattedStrings: i18n, api } = this;
        const color = (0,_util_21dc2ac5_js__WEBPACK_IMPORTED_MODULE_3__.g)(transactionCreditCost, availableCredits);
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.H, null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "left" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("h4", { class: "header" }, i18n.creditEstimate), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("p", { class: "text" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: "text--left" }, i18n.creditsNeededColon), showTotal && (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", null, i18n.creditsAvailableColon)), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-meter", { max: availableCredits, maxLabel: i18n.notEnough, current: transactionCreditCost, min: 0, label: showTotal ? i18n.creditEstimate : i18n.creditsNeededPercent, api: api })), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "right" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: `number number--${color}` }, color === "red" && (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { icon: "exclamation-mark-triangle" }), i18n.needed), i18n.creditsNeeded)));
    }
    get el() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
    static get watchers() { return {
        "transactionCreditCost": ["updateTransactionCost"],
        "availableCredits": ["updateTransactionCost"]
    }; }
};
ArcgisCreditEstimate.style = arcgisCreditEstimateCss;

const arcgisSelectCss = ":host{position:relative}.select{margin-top:0.25rem;margin-bottom:1rem;position:relative}.select--no-margin{margin:0}.label{font-size:0.875rem;color:var(--calcite-color-text-1);line-height:18px}.label--bold{font-weight:500}.description{margin-top:0.5rem;margin-bottom:1rem;display:block;font-size:0.875rem;font-weight:400;color:var(--calcite-color-text-3)}.large{font-size:1rem}.dropdown-container{position:absolute;left:0px;--tw-shadow:0 6px 20px -4px rgba(0, 0, 0, 0.1), 0 4px 12px -2px rgba(0, 0, 0, 0.08);--tw-shadow-colored:0 6px 20px -4px var(--tw-shadow-color), 0 4px 12px -2px var(--tw-shadow-color);box-shadow:var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);width:100%;top:100%;max-height:240px;overflow:auto;z-index:100}";

const ArcgisSelect = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisOptionChange = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisOptionChange", 7);
        this.guid = (0,_guid_aeaed84d_js__WEBPACK_IMPORTED_MODULE_5__.g)();
        this.handleKeys = (event) => {
            const key = event.key;
            const { options, selectedIndex, selectOpen, selectedOption } = this;
            switch (key) {
                case " " :
                case "Enter":
                    this.selectOpen = !this.selectOpen;
                    if (selectOpen) {
                        this.arcgisOptionChange.emit(options[selectedIndex].value);
                    }
                    break;
                case "ArrowDown":
                    this.selectOpen = true;
                    if (this.selectOpen) {
                        event.preventDefault();
                        this.selectedIndex = (selectedIndex + 1) % options.length;
                    }
                    break;
                case "ArrowUp":
                    if (this.selectOpen) {
                        event.preventDefault();
                        if (selectedIndex === 0) {
                            this.selectedIndex = options.length - 1;
                        }
                        else {
                            this.selectedIndex = selectedIndex - 1;
                        }
                    }
                    break;
                case "Tab":
                    if (selectOpen) {
                        this.selectedIndex = Math.max(options.findIndex((option) => option.value === selectedOption), 0);
                        this.selectOpen = false;
                    }
                    break;
                case "Escape":
                    this.selectedIndex = Math.max(options.findIndex((option) => option.value === selectedOption), 0);
                    this.selectOpen = false;
                    this.defaultOptionRef.setFocus();
            }
        };
        this.renderOptions = () => {
            return this.options.map(({ optionTitle, description, icon, badge, value }, index) => {
                const isFocusedIndex = index === this.selectedIndex;
                const isSelectedOption = value === this.selectedOption;
                return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-option", { "aria-selected": isSelectedOption ? "true" : "false", selected: isSelectedOption, active: isFocusedIndex, optionTitle: optionTitle, value: value, badge: badge, description: description, icon: icon, autoFocus: true }));
            });
        };
        this.renderSelectedOption = () => {
            var _a;
            const { selectOpen, selectedOption, emptyText, options, guid } = this;
            const selected = options.find((option) => option.value === selectedOption);
            return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-option", { "aria-controls": `select_${guid}`, "aria-labelledby": `label_${guid}`, "aria-expanded": selectOpen ? "true" : "false", "aria-activedescendant": ((_a = options[this.selectedIndex]) === null || _a === void 0 ? void 0 : _a.value) || "no-selection", isSelector: true, optionTitle: (selected === null || selected === void 0 ? void 0 : selected.optionTitle) || emptyText, value: (selected === null || selected === void 0 ? void 0 : selected.value) || "", description: (selected === null || selected === void 0 ? void 0 : selected.description) || "", badge: selected === null || selected === void 0 ? void 0 : selected.badge, icon: (selected === null || selected === void 0 ? void 0 : selected.icon) || "", ref: (ele) => (this.defaultOptionRef = ele), onArcgisSelectOpen: () => {
                    this.selectOpen = !this.selectOpen;
                } }));
        };
        this.selectOpen = false;
        this.selectedIndex = undefined;
        this.selectedOption = "";
        this.emptyText = undefined;
        this.options = undefined;
        this.label = undefined;
        this.labelDescription = undefined;
        this.labelWeight = "bold";
        this.autoFocus = undefined;
        this.focusDelay = 0;
    }
    async componentDidLoad() {
        this.onSelectedOptionChanged(this.selectedOption);
        if (this.autoFocus && this.selectOpen) {
            await (0,_functional_44de8fcf_js__WEBPACK_IMPORTED_MODULE_4__.t)(this.focusDelay);
            this.defaultOptionRef.focus();
        }
    }
    async setFocus() {
        this.defaultOptionRef.setFocus();
    }
    // eslint-disable-next-line @stencil/prefer-vdom-listener
    closeOnBlur() {
        this.selectOpen = false;
    }
    onSelectedOptionChanged(newSelectedOption) {
        const optionIndex = this.options.findIndex((option) => option.value === newSelectedOption);
        this.selectedIndex = Math.max(0, optionIndex);
    }
    async arcgisOptionChangeHandler() {
        this.selectOpen = false;
        this.defaultOptionRef.setFocus();
    }
    render() {
        const { label, labelDescription, guid, selectOpen } = this;
        const large = !!(this.label && this.labelDescription);
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.H, null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("label", { id: `label_${guid}`, class: "label" }, label && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: { label: true, "label--bold": this.labelWeight === "bold", large } }, label, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", { name: "afterLabel" }))), labelDescription && (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: { description: true, large } }, labelDescription)), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "select", onKeyDown: this.handleKeys }, this.renderSelectedOption(), selectOpen && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { role: "listbox", "aria-haspopup": "listbox", id: `select_${guid}`, class: "dropdown-container" }, this.renderOptions())))));
    }
    get element() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
    static get watchers() { return {
        "selectedOption": ["onSelectedOptionChanged"]
    }; }
};
ArcgisSelect.style = arcgisSelectCss;



//# sourceMappingURL=arcgis-credit-estimate_2.entry.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-44de8fcf.js":
/*!****************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-44de8fcf.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ arrayToLookupMap),
/* harmony export */   b: () => (/* binding */ unique),
/* harmony export */   c: () => (/* binding */ throttle),
/* harmony export */   d: () => (/* binding */ debounce),
/* harmony export */   e: () => (/* binding */ escapeRegExp),
/* harmony export */   f: () => (/* binding */ arraysAreEquivalent),
/* harmony export */   g: () => (/* binding */ chunk),
/* harmony export */   i: () => (/* binding */ isDefined),
/* harmony export */   m: () => (/* binding */ minDelay),
/* harmony export */   t: () => (/* binding */ timeout),
/* harmony export */   u: () => (/* binding */ uniqueBy)
/* harmony export */ });
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */
/**
 * Call a function only after it has not been called for n milliseconds
 * @param fn    - function to call
 * @param delay - delay in milliseconds
 */
const debounce = (fn, delay) => {
    let timeout;
    let status = "idle";
    function flush(...args) {
        status = "flushed";
        return debounced(...args);
    }
    function invoke(...args) {
        status = "invoked";
        return debounced(...args);
    }
    function cancel(...args) {
        status = "cancelled";
        return debounced(...args);
    }
    function getStatus() {
        return status;
    }
    const debounced = (...args) => new Promise((resolve) => {
        switch (status) {
            case "flushed":
                status = "idle";
                if (timeout) {
                    clearTimeout(timeout);
                    resolve(fn(...args));
                }
                else {
                    resolve(null);
                }
                break;
            case "invoked":
                clearTimeout(timeout);
                status = "idle";
                resolve(fn(...args));
                break;
            case "cancelled":
                clearTimeout(timeout);
                status = "idle";
                resolve(null);
                break;
            default:
                if (timeout) {
                    clearTimeout(timeout);
                }
                status = "pending";
                timeout = setTimeout(() => {
                    status = "idle";
                    return resolve(fn(...args));
                }, delay);
                break;
        }
    });
    debounced.flush = flush;
    debounced.invoke = invoke;
    debounced.cancel = cancel;
    debounced.getStatus = getStatus;
    return debounced;
};
/**
 * Call a function only after n milliseconds have elapsed
 * @param fn    - function to call
 * @param delay - delay in milliseconds
 */
const throttle = (fn, delay) => {
    let timeout;
    return (...args) => new Promise((resolve) => {
        if (timeout) {
            return;
        }
        timeout = setTimeout(() => {
            clearTimeout(timeout);
            timeout = undefined;
            resolve(fn(...args));
        }, delay);
    });
};
function escapeRegExp(str) {
    return str.replace(/[.*+?^${}()|[\]\\]/g, "\\$&"); // $& means the whole matched string
}
function isDefined(value) {
    return value !== undefined && value !== null;
}
/**
 * Set a minimum time for a promise to resolve (useful for preventing flash of loaders)
 */
async function minDelay(promise, minDelay) {
    await Promise.all([promise, timeout(minDelay)]);
    return promise;
}
/**
 * Helper method to inline setTimeout as an await in async functions
 */
function timeout(ms) {
    return new Promise((resolve) => setTimeout(resolve, ms));
}
const arrayToLookupMap = (dataArr, getKeyAndItem) => Object.fromEntries((dataArr || []).map((item) => {
    const { key, data } = getKeyAndItem(item);
    return [key, data];
}));
/**
 * Check whether two arrays have the same number of elements
 * and whether they contain the same elements
 * regardless of order
 */
const arraysAreEquivalent = (arr1, arr2) => arr1.length === arr2.length && arr1.reduce((memo, str) => memo && arr2.indexOf(str) > -1, true);
function uniqueBy(myArr, getItemId) {
    const resultArr = [];
    const lookupMap = {};
    myArr.forEach((item) => {
        const id = getItemId(item);
        if (lookupMap[id] == null) {
            lookupMap[id] = item;
            resultArr.push(item);
        }
    });
    return resultArr;
}
function unique(myArr) {
    const primitives = { boolean: {}, number: {}, string: {} };
    const objs = [];
    return myArr.filter((item) => {
        let type = typeof item;
        if (type in primitives) {
            return primitives[type].hasOwnProperty(item) ? false : (primitives[type][item] = true);
        }
        else {
            return objs.indexOf(item) >= 0 ? false : objs.push(item);
        }
    });
}
const chunk = (arr, size) => [...Array(Math.ceil(arr.length / size))].map((_, i) => arr.slice(size * i, size + size * i));



//# sourceMappingURL=functional-44de8fcf.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/guid-aeaed84d.js":
/*!**********************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/guid-aeaed84d.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   g: () => (/* binding */ guid)
/* harmony export */ });
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */
function generateId(counts) {
    return counts
        .map((count) => {
        let out = "";
        for (let i = 0; i < count; i++) {
            out += (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
        }
        return out;
    })
        .join("-");
}
const guid = () => generateId([2, 1, 1, 1, 3]);



//# sourceMappingURL=guid-aeaed84d.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-ef0e54b2.js":
/*!******************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-ef0e54b2.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   C: () => (/* binding */ CSS_UTILITY),
/* harmony export */   a: () => (/* binding */ formatDate),
/* harmony export */   b: () => (/* binding */ formatPlural),
/* harmony export */   f: () => (/* binding */ formatNumber),
/* harmony export */   g: () => (/* binding */ getElementDir),
/* harmony export */   l: () => (/* binding */ languageMap)
/* harmony export */ });
/* harmony import */ var _loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./loadModules-b4ac1247.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-b4ac1247.js");
/* harmony import */ var _dom_4d367677_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dom-4d367677.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-4d367677.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */



const languageMap = new Map([
    ["ar", "ar"],
    ["bg", "bg"],
    ["bs", "bs"],
    ["ca", "ca"],
    ["cs", "cs"],
    ["da", "da"],
    ["de", "de"],
    ["el", "el"],
    ["en", "en"],
    ["es", "es"],
    ["et", "et"],
    ["fi", "fi"],
    ["fr", "fr"],
    ["he", "he"],
    ["hr", "hr"],
    ["hu", "hu"],
    ["id", "id"],
    ["it", "it"],
    ["ja", "ja"],
    ["ko", "ko"],
    ["lt", "lt"],
    ["lv", "lv"],
    ["nb", "nb"],
    ["nl", "nl"],
    ["pl", "pl"],
    ["pt-br", "pt-BR"],
    ["pt-pt", "pt-PT"],
    ["ro", "ro"],
    ["ru", "ru"],
    ["sk", "sk"],
    ["sl", "sl"],
    ["sr", "sr"],
    ["sv", "sv"],
    ["th", "th"],
    ["tr", "tr"],
    ["uk", "uk"],
    ["vi", "vi"],
    ["zh-cn", "zh-CN"],
    ["zh-hk", "zh-HK"],
    ["zh-tw", "zh-TW"]
]);
// rtl
function getElementDir(el) {
    return getElementProp(el, "dir", "ltr");
}
function getElementProp(el, prop, value) {
    const closestWithProp = (0,_dom_4d367677_js__WEBPACK_IMPORTED_MODULE_1__.c)(el, `[${prop}]`);
    return closestWithProp ? closestWithProp.getAttribute(prop) : value;
}
// css
const CSS_UTILITY = {
    rtl: "arcgis--rtl"
};
async function formatNumber(number, options) {
    const { api, type, places } = options || {};
    if (api === 4) {
        const [intl] = await (0,_loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_0__.l)(["esri/intl"]);
        const numberFormatIntlOptions = intl.convertNumberFormatToIntlOptions({
            places,
            style: type,
            digitSeparator: true
        });
        return intl.formatNumber(number, Object.assign(Object.assign({}, numberFormatIntlOptions), { style: type }));
    }
    const [dojoNumber] = await (0,_loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_0__.l)(["dojo/number"]);
    return dojoNumber.format(number, {
        type,
        places,
        pattern: options === null || options === void 0 ? void 0 : options.pattern
    });
}
const cache = {};
function formatDate(date) {
    const lang = document.documentElement.lang;
    const dayShortMonthYear = {
        year: "numeric",
        month: "short",
        day: "numeric"
    };
    if (!cache[lang]) {
        cache[lang] = new Intl.DateTimeFormat(document.documentElement.lang, dayShortMonthYear);
    }
    return cache[lang].format(date);
}
function formatPlural(lang, stringObj, number) {
    const singles = ["id", "ja", "ko", "th", "vi", "zh-cn", "zh-hk", "zh-tw"];
    const likeEnglish = [
        "en",
        "ca",
        "da",
        "de",
        "el",
        "es",
        "et",
        "fi",
        "hi",
        "hu",
        "it",
        "nb",
        "nl",
        "pt-pt",
        "sv",
        "tr"
    ];
    const locale = lang !== null && lang !== void 0 ? lang : "en";
    // if the number is one, or it is a "simple" language, return the 1 string
    if (number === 1 || singles.includes(locale)) {
        return stringObj.single.replace("${number}", "1");
    }
    // if the number is not 1 and the language uses the same pluralization strategy as english,
    // return the multiple string
    if (number !== 1 && likeEnglish.includes(locale)) {
        return stringObj.multiple.replace("${number}", `${number}`);
    }
    // if none of the above worked, return the "unknown" string
    return stringObj.unknown.replace("${number}", `${number}`);
}



//# sourceMappingURL=languageUtil-ef0e54b2.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-050b6db9.js":
/*!************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-050b6db9.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ getComponentClosestLanguage),
/* harmony export */   g: () => (/* binding */ getLocaleComponentStrings)
/* harmony export */ });
/* harmony import */ var _dom_4d367677_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dom-4d367677.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-4d367677.js");
/* harmony import */ var _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./languageUtil-ef0e54b2.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-ef0e54b2.js");
/* harmony import */ var _index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./index-e3bf7da7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-e3bf7da7.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */




// https://medium.com/stencil-tricks/implementing-internationalisation-i18n-with-stencil-5e6559554117
function getComponentClosestLanguage(element) {
    var _a, _b, _c;
    const closestElement = (_a = (0,_dom_4d367677_js__WEBPACK_IMPORTED_MODULE_0__.c)(element, "[lang]")) !== null && _a !== void 0 ? _a : (_c = (_b = element.shadowRoot) === null || _b === void 0 ? void 0 : _b.ownerDocument) === null || _c === void 0 ? void 0 : _c.documentElement;
    // language set by the calling application or browser. defaults to english.
    const lang = ((closestElement === null || closestElement === void 0 ? void 0 : closestElement.lang) || (navigator === null || navigator === void 0 ? void 0 : navigator.language) || "en").toLowerCase();
    if (_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang)) {
        return _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang);
    }
    else {
        // "ru-RU" maps to "ru" use case
        if (_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang.slice(0, 2))) {
            return _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang.slice(0, 2));
        }
        else {
            return "en";
        }
    }
}
function getComponentClosestLanguageIntl(element) {
    var _a, _b, _c;
    // it's OK if we don't have the 4 letter language file for it
    // 4 letter language code needed for formatting numbers
    const closestElement = (_a = (0,_dom_4d367677_js__WEBPACK_IMPORTED_MODULE_0__.c)(element, "[lang]")) !== null && _a !== void 0 ? _a : (_c = (_b = element.shadowRoot) === null || _b === void 0 ? void 0 : _b.ownerDocument) === null || _c === void 0 ? void 0 : _c.documentElement;
    // language set by the calling application or browser. defaults to english.
    const lang = ((closestElement === null || closestElement === void 0 ? void 0 : closestElement.lang) || (navigator === null || navigator === void 0 ? void 0 : navigator.language) || "en").toLowerCase();
    if (_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang)) {
        return _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang);
    }
    else {
        if (_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang.slice(0, 2))) {
            // we support the 2 letter coded language
            // e.g. it-CH vs it
            return lang;
        }
        else {
            return "en";
        }
    }
}
function fetchLocaleStringsForComponent(componentName, locale) {
    return new Promise((resolve, reject) => {
        fetch((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_2__.a)(`../arcgis-app-assets/i18n/${componentName}.i18n.${locale}.json`)).then((result) => {
            if (result.ok)
                resolve(result.json());
            else
                reject();
        }, () => reject());
    });
}
const stringCache = {};
function fetchLocaleStringsFromCache(componentName, locale) {
    const id = `${componentName}${locale}`;
    if (!stringCache[id]) {
        stringCache[id] = fetchLocaleStringsForComponent(componentName, locale);
    }
    return stringCache[id];
}
/**
 * Get strings and language codes.
 * This method returns 2 language codes.
 * The first one returns a code that's also supported as a language file.
 * The second one returns a code where there is support for the first 2 letters of the code as part of a language file,
 * but will return the original 4 letter code from the page.
 * E.g. For "it-ch" it will return "it" as the first language code and "it-ch" as the second.
 * The second one is required for esri.intl.setLocale() to get the correct formatting.
 *
 * If a tagName is provided it will overwite the element's tagName
 *
 *  @return [ strings, first language code, second language code]
 */
async function getLocaleComponentStrings(element, tagName) {
    const componentName = tagName || element.tagName.toLowerCase();
    const componentLanguage = getComponentClosestLanguage(element);
    const componentLanguageIntl = getComponentClosestLanguageIntl(element);
    let strings;
    try {
        strings = await fetchLocaleStringsFromCache(componentName, componentLanguage);
    }
    catch (e) {
        console.warn(`no locale for ${componentName} (${componentLanguage}) loading default locale en.`);
        strings = await fetchLocaleStringsFromCache(componentName, "en");
    }
    return [strings, componentLanguage, componentLanguageIntl];
}



//# sourceMappingURL=locale-050b6db9.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/util-21dc2ac5.js":
/*!**********************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/util-21dc2ac5.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   g: () => (/* binding */ getMeterColor)
/* harmony export */ });
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */
function getMeterColor(current, max) {
    const percent = current / max;
    if (percent >= 1 || percent < 0) {
        return "red";
    }
    if (percent > 0.8) {
        return "orange";
    }
    return "blue";
}



//# sourceMappingURL=util-21dc2ac5.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,