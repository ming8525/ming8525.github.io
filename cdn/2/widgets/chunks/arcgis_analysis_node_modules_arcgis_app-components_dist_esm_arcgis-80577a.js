"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_arcgis-80577a"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-raster-multidimensional.entry.js":
/*!*********************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-raster-multidimensional.entry.js ***!
  \*********************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   arcgis_raster_multidimensional: () => (/* binding */ ArcgisRasterMultidimensional)
/* harmony export */ });
/* harmony import */ var _index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-e3bf7da7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-e3bf7da7.js");
/* harmony import */ var _functional_44de8fcf_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./functional-44de8fcf.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-44de8fcf.js");
/* harmony import */ var _locale_050b6db9_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./locale-050b6db9.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-050b6db9.js");
/* harmony import */ var _loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./loadModules-b4ac1247.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-b4ac1247.js");
/* harmony import */ var _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./languageUtil-ef0e54b2.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-ef0e54b2.js");
/* harmony import */ var _multidimensional_69f3968f_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./multidimensional-69f3968f.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/multidimensional-69f3968f.js");
/* harmony import */ var _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./commonEnums-fcf13661.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/commonEnums-fcf13661.js");
/* harmony import */ var _dom_4d367677_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./dom-4d367677.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-4d367677.js");
/* harmony import */ var _commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./commonFunctions-b0830e9e.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/commonFunctions-b0830e9e.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */










const arcgisRasterMultidimensionalCss = ":host{display:flex;flex:1 1 auto;overflow:hidden}.variable-section-boarder{border:1px solid var(--arcgis-app-border)}.variable-select{display:flex;justify-content:center}.multidimensional-extent>div{margin:10px 0}.multidimensional-extent-compact{display:flex;width:100%}.multidimensional-extent-compact>div{width:50%}.multidimensional-extent-compact>div:first-child{margin:0 20px 0 0}.multidimensional-unsupported{margin:20px}.dimension-zone{padding:10px;border:1px solid var(--arcgis-app-border);margin:10px 0}.dimension-select-container{display:flex;width:100%;align-items:center}.dimension-select-container .dimension-select{flex-grow:1}.arcgis--rtl .extent-compact>div:first-child{margin:0 0 0 20px}";

const undefined_dimension_value = Number.MAX_VALUE - 1;
const ArcgisRasterMultidimensional = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisRasterMultidimensionalChange = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisRasterMultidimensionalChange", 7);
        this.arcgisRasterMultidimensionalSave = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisRasterMultidimensionalSave", 7);
        this.arcgisRasterMultidimensionalCancel = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisRasterMultidimensionalCancel", 7);
        this.valuePickers = {
            time: null,
            z: null
        };
        this.containerTop = 0;
        this.aoiIndex = 0;
        this.previousPickedListSize = -1;
        this.pauseLayerUpdate = false;
        this.apply = () => {
            var _a;
            if (!this.multidimensionalInfo) {
                return;
            }
            this.originalLayerSetting.definition = this.esriLang.clone(this.activeMultidimensionalDefinition);
            this.originalLayerSetting.subset = this.activeMultidimensionalSubset.clone();
            const { layer } = this;
            if (this.isImageryLayer(layer)) {
                this.originalLayerSetting.mosaicRule = (_a = layer.mosaicRule) === null || _a === void 0 ? void 0 : _a.clone();
            }
            if (!this.makeLiveLayerUpdate) {
                this.updateLayerMultidimensionalDefinition();
                this.updateLayerMultidimensionalSubset();
            }
            this.closePopover();
            this.arcgisRasterMultidimensionalSave.emit();
        };
        this.cancel = () => {
            if (!this.multidimensionalInfo) {
                return;
            }
            const { layer, originalLayerSetting } = this;
            const definition = this.esriLang.clone(originalLayerSetting.definition);
            const subset = this.esriLang.clone(originalLayerSetting.subset);
            if (this.updateStateWhenCancel) {
                this.pauseLayerUpdate = true;
                this.activeMultidimensionalSubset = subset !== null && subset !== void 0 ? subset : this.getDefaultMultidimensionalSubset();
                this.activeMultidimensionalDefinition = definition;
                this.pauseLayerUpdate = false;
            }
            if (this.isImageryLayer(layer)) {
                layer.mosaicRule = originalLayerSetting.mosaicRule;
            }
            else {
                layer.multidimensionalDefinition = definition;
            }
            layer.renderer = originalLayerSetting.renderer;
            layer.multidimensionalSubset = subset;
            this.closePopover();
            this.arcgisRasterMultidimensionalCancel.emit();
        };
        this.updateDefinitionDimensionValue = (selectedDimensionName, value, updateValuePicker = false) => {
            var _a, _b;
            const newDef = this.esriLang.clone(this.activeMultidimensionalDefinition);
            const selectedDef = newDef.find(({ dimensionName }) => dimensionName === selectedDimensionName);
            selectedDef.values = [value];
            this.activeMultidimensionalDefinition = newDef;
            if (!updateValuePicker) {
                return;
            }
            // find the matching value picker
            const { valuePickers } = this;
            const valuePicker = ((_a = valuePickers.time) === null || _a === void 0 ? void 0 : _a.dimensionName) === selectedDimensionName
                ? valuePickers.time
                : ((_b = valuePickers.z) === null || _b === void 0 ? void 0 : _b.dimensionName) === selectedDimensionName
                    ? valuePickers.z
                    : null;
            if (valuePicker) {
                const index = valuePicker.dimensionValues.findIndex((dimValue) => Array.isArray(value) && Array.isArray(dimValue)
                    ? value.join("-") === dimValue.join("-")
                    : value === dimValue);
                valuePicker.slider.values = this.getSelectedSliderValue(index, valuePicker.slider.component.reversed, valuePicker.dimensionValues.length);
            }
        };
        this.updateDefinitionVariableName = (variableName) => {
            // normalize empty variable name (3.x), * (rft result), default variable string UI
            if (this.isDefaultUnspecifiedVariable(variableName)) {
                variableName = "";
            }
            const newDef = this.getNewMultidimensionalDefinition(variableName);
            this.activeMultidimensionalDefinition = newDef;
        };
        this.updateExtentDimensionSubset = (selectedDimensionName, valueOrExtent, replaceBoth = "both") => {
            const { activeMultidimensionalSubset } = this;
            const dim = activeMultidimensionalSubset.dimensions.find((dimension) => dimension.name === selectedDimensionName);
            const dimExtent = [...dim.extent];
            if (replaceBoth === "both") {
                // avoid updating when existing value matches new value
                if (dimExtent[0] === valueOrExtent[0] && dimExtent[1] === valueOrExtent[1]) {
                    return;
                }
                [dimExtent[0], dimExtent[1]] = valueOrExtent;
            }
            else if (replaceBoth === "start") {
                let wasNotRange = dimExtent[1] === dimExtent[0];
                dimExtent[0] = Array.isArray(valueOrExtent) ? valueOrExtent[0] : valueOrExtent;
                if (wasNotRange) {
                    dimExtent[1] = dimExtent[0];
                }
            }
            else {
                if (valueOrExtent === undefined_dimension_value) {
                    dimExtent[1] = dimExtent[0];
                }
                else {
                    dimExtent[1] = Array.isArray(valueOrExtent)
                        ? valueOrExtent[valueOrExtent.length - 1]
                        : valueOrExtent;
                }
            }
            if (dimExtent[1] < dimExtent[0] || dimExtent[1] == null) {
                dimExtent[1] = dimExtent[0];
            }
            const newActiveSubset = activeMultidimensionalSubset.clone();
            const { subsetDefinitions } = newActiveSubset;
            subsetDefinitions.forEach((def) => {
                if (def.dimensionName === selectedDimensionName) {
                    def.values = [dimExtent[0], dimExtent[1]];
                }
            });
            this.activeMultidimensionalSubset = newActiveSubset;
            const { animatedDimensions } = this;
            const hasTimePicker = animatedDimensions.time === selectedDimensionName;
            const hasZPicker = animatedDimensions.z === selectedDimensionName;
            if (hasTimePicker || hasZPicker) {
                const variableInfo = this.getVariableInfo(this.activeMultidimensionalDefinition[0].variableName);
                const dimInfo = variableInfo === null || variableInfo === void 0 ? void 0 : variableInfo.dimensions.find(({ name }) => name === selectedDimensionName);
                this.createValuePicker(dimInfo);
                // when there's single or 0 (can it be 0?) slices, keep enabled state as it's clipped by extent
                if (hasTimePicker) {
                    animatedDimensions.time = selectedDimensionName;
                }
                else {
                    animatedDimensions.z = selectedDimensionName;
                }
            }
        };
        this.updateExtentVariables = (selectedVariables) => {
            let { activeMultidimensionalSubset } = this;
            if (selectedVariables.length &&
                activeMultidimensionalSubset.variables.length &&
                selectedVariables.join(",") === activeMultidimensionalSubset.variables.join(",")) {
                return;
            }
            this.previousPickedListSize = selectedVariables.length;
            if (selectedVariables.length === 0) {
                selectedVariables = this.allVariables.map(({ name }) => name);
            }
            // start wtih default dimensions, use existing definition when exist, remove dimensions that are no longer part of selected variables
            const selectedDefaultSubset = this.getDefaultMultidimensionalSubset(selectedVariables);
            const { subsetDefinitions } = selectedDefaultSubset.clone();
            subsetDefinitions.forEach((defaultDef) => {
                const matchingDefinition = activeMultidimensionalSubset.subsetDefinitions.find((def) => def.variableName === defaultDef.variableName &&
                    def.dimensionName === defaultDef.dimensionName);
                if (matchingDefinition) {
                    defaultDef.values = matchingDefinition.values;
                }
                else {
                    const matchingDimensionExtent = activeMultidimensionalSubset.dimensions.find((dimension) => dimension.name === defaultDef.dimensionName);
                    if (matchingDimensionExtent) {
                        defaultDef.values = [...matchingDimensionExtent.extent];
                    }
                }
            });
            const newAtiveMultidimensionalSubset = activeMultidimensionalSubset.clone();
            newAtiveMultidimensionalSubset.subsetDefinitions = subsetDefinitions;
            this.activeMultidimensionalSubset = newAtiveMultidimensionalSubset;
        };
        this.updateExtentAOI = (aoi) => {
            const newAtiveMultidimensionalSubset = this.activeMultidimensionalSubset.clone();
            newAtiveMultidimensionalSubset.areaOfInterest = aoi === null || aoi === void 0 ? void 0 : aoi.clone();
            this.activeMultidimensionalSubset = newAtiveMultidimensionalSubset;
        };
        this.updateExtentFromTime = (timeExtent) => {
            if (!this.multidimensionalInfo) {
                return;
            }
            const originalDef = this.esriLang.clone(this.originalLayerSetting.definition);
            // todo expose this a utilty function in API
            const { multidimensionalDefinition: newDef } = this.layer.normalizeRasterFetchOptions({
                multidimensionalDefinition: originalDef,
                timeExtent
            });
            if (newDef && this.isPropertyValueChanged(newDef, this.activeMultidimensionalDefinition)) {
                this.activeMultidimensionalDefinition = newDef;
            }
        };
        this.updateSorting = (dimensionName) => {
            // not initialized (undefined) will be changed to descending
            const sortDirections = Object.assign({}, this.sortDirections);
            sortDirections[dimensionName] =
                sortDirections[dimensionName] === "descending" ? "ascending" : "descending";
            this.sortDirections = sortDirections;
        };
        this.updateLayerMultidimensionalDefinition = (0,_functional_44de8fcf_js__WEBPACK_IMPORTED_MODULE_1__.d)(() => {
            var _a, _b, _c;
            const { activeMultidimensionalDefinition, layer } = this;
            const isDynamicImagery = this.isImageryLayer(layer);
            const isDefinitionChanged = isDynamicImagery
                ? this.isPropertyValueChanged(activeMultidimensionalDefinition, (_a = layer.mosaicRule) === null || _a === void 0 ? void 0 : _a.multidimensionalDefinition)
                : this.isPropertyValueChanged(activeMultidimensionalDefinition, layer.multidimensionalDefinition);
            if (!isDefinitionChanged) {
                return;
            }
            const oldDefinition = this.getMultidimensionalDefinition(layer);
            const isVariableChanged = !oldDefinition ||
                oldDefinition.length === 0 ||
                oldDefinition[0].variableName !== activeMultidimensionalDefinition[0].variableName;
            if (isDynamicImagery) {
                const mosaicRule = ((_b = layer.mosaicRule) !== null && _b !== void 0 ? _b : layer.defaultMosaicRule).clone();
                if (this.isDefaultUnspecifiedVariable(activeMultidimensionalDefinition[0].variableName)) {
                    const newDefinition = activeMultidimensionalDefinition.map((def) => {
                        const newDef = def.clone();
                        newDef.variableName = "";
                        return newDef;
                    });
                    mosaicRule.multidimensionalDefinition = newDefinition;
                }
                else {
                    mosaicRule.multidimensionalDefinition = activeMultidimensionalDefinition;
                }
                layer.mosaicRule = mosaicRule;
            }
            else {
                layer.multidimensionalDefinition = activeMultidimensionalDefinition;
            }
            if (isVariableChanged) {
                const variableInfo = this.getVariableInfo(activeMultidimensionalDefinition[0].variableName);
                const { renderer } = layer;
                if ((renderer === null || renderer === void 0 ? void 0 : renderer.type) === "raster-stretch" && ((_c = variableInfo.statistics) === null || _c === void 0 ? void 0 : _c.length)) {
                    const newRenderer = renderer.clone();
                    newRenderer.statistics = variableInfo.statistics.map((stats) => (Object.assign({}, stats)));
                    layer.renderer = newRenderer;
                }
            }
        }, 100);
        this.updateLayerMultidimensionalSubset = (0,_functional_44de8fcf_js__WEBPACK_IMPORTED_MODULE_1__.d)(() => {
            const { activeMultidimensionalSubset, layer } = this;
            const fullDimensionalSubset = this.getDefaultMultidimensionalSubset();
            // this is a simple comparison (to default) to optimize persisted layer's size
            // it does no harm if a custom layer contains definitions with altered variable order.
            const isSubsetDefinitionsSpecified = this.isPropertyValueChanged(activeMultidimensionalSubset.subsetDefinitions, fullDimensionalSubset.subsetDefinitions);
            const isAOISpecified = activeMultidimensionalSubset.areaOfInterest != null;
            if (!isSubsetDefinitionsSpecified && !isAOISpecified) {
                layer.multidimensionalSubset = null;
            }
            else {
                if (!isSubsetDefinitionsSpecified) {
                    const newSubset = activeMultidimensionalSubset.clone();
                    newSubset.subsetDefinitions = [];
                    layer.multidimensionalSubset = newSubset;
                }
                else {
                    layer.multidimensionalSubset = activeMultidimensionalSubset;
                }
            }
        }, 100);
        this.hidePanelHeading = false;
        this.panelHeading = undefined;
        this.dismissible = false;
        this.hideButtons = false;
        this.hideExtentSection = false;
        this.hideAOI = false;
        this.isDimensionListSortable = false;
        this.collapseExtentSection = false;
        this.useCompactExtentDropdowns = false;
        this.showVariableFilter = undefined;
        this.watchViewTime = false;
        this.watchRasterFunction = false;
        this.updateStateWhenCancel = true;
        this.makeLiveLayerUpdate = true;
        this.showAnimationControls = false;
        this.showAnimationOnStartUp = false;
        this.showAnimationTooltip = false;
        this.animationSetting = {
            playRate: 3000,
            timeClassName: "imagery-dimension-picker-t",
            zClassName: "imagery-dimension-picker-z",
            timeTooltipPlacement: "top",
            zTooltipPlacement: "auto"
        };
        this.layer = undefined;
        this.view = undefined;
        this.multidimensionalInfo = undefined;
        this.activeMultidimensionalDefinition = undefined;
        this.activeMultidimensionalSubset = undefined;
        this.sortDirections = {};
        this.animatedDimensions = { time: "", z: "" };
    }
    watchLayer(newValue, _oldValue) {
        var _a, _b;
        this.closePopover();
        this.multidimensionalInfo = null;
        (_a = this.watchHandleViewTime) === null || _a === void 0 ? void 0 : _a.remove();
        this.watchHandleLayer = null;
        (_b = this.watchHandleLayer) === null || _b === void 0 ? void 0 : _b.remove();
        this.watchHandleLayer = null;
        this.initLayer(newValue);
    }
    watchActiveMultidimensionalDefinition(newValue, oldValue) {
        // oldValue is null during initialization, newValue can't be null
        if (newValue == null || oldValue == null) {
            return;
        }
        this.sortDirections = {};
        if (!this.pauseLayerUpdate && this.makeLiveLayerUpdate) {
            this.updateLayerMultidimensionalDefinition();
        }
        this.arcgisRasterMultidimensionalChange.emit({
            multidimensionalDefinition: newValue
        });
        // destroy value picker when the corresponding dimension does not exist for the new variable
        const { animatedDimensions, showAnimationControls } = this;
        if (showAnimationControls &&
            (animatedDimensions.time || animatedDimensions.z) &&
            newValue[0].variableName !== oldValue[0].variableName) {
            const variableInfo = this.getVariableInfo(newValue[0].variableName);
            if (!variableInfo.dimensions.some(({ name }) => name === animatedDimensions.time)) {
                this.destroyValuePicker("time");
            }
            if (!variableInfo.dimensions.some(({ name }) => name === animatedDimensions.z)) {
                this.destroyValuePicker("z");
            }
        }
    }
    watchactiveMultidimensionalSubset(newValue, _oldValue) {
        var _a;
        // todo: API support
        if (!this.pauseLayerUpdate && this.makeLiveLayerUpdate) {
            this.updateLayerMultidimensionalSubset();
        }
        const { activeMultidimensionalDefinition } = this;
        if (((_a = newValue.variables) === null || _a === void 0 ? void 0 : _a.length) && (activeMultidimensionalDefinition === null || activeMultidimensionalDefinition === void 0 ? void 0 : activeMultidimensionalDefinition.length)) {
            // use original order
            const variableNames = this.allVariables
                .filter(({ name }) => newValue.variables.includes(name))
                .map(({ name }) => name);
            const activeVariableName = activeMultidimensionalDefinition[0].variableName;
            const newVariableName = activeVariableName === "" || newValue.variables.includes(activeVariableName)
                ? activeVariableName
                : variableNames[0];
            const newDef = this.getNewMultidimensionalDefinition(newVariableName);
            const isDefinitionChanged = this.isMultidimensionalDefinitionChanged(newDef);
            if (isDefinitionChanged) {
                this.activeMultidimensionalDefinition = newDef;
            }
        }
        const data = {
                multidimensionalSubset: newValue
            };
        this.arcgisRasterMultidimensionalChange.emit(data);
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    async componentWillLoad() {
        [this.strings] = await (0,_locale_050b6db9_js__WEBPACK_IMPORTED_MODULE_2__.g)(this.hostElement);
        [
            this.esriLang,
            this.intl,
            this.DimensionalDefinition,
            this.MultidimensionalSubset,
            this.ValuePicker
        ] = await (0,_loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_3__.l)([
            "esri/core/lang",
            "esri/intl",
            "esri/layers/support/DimensionalDefinition",
            "esri/layers/support/MultidimensionalSubset",
            "esri/widgets/ValuePicker"
        ]);
        const { layer } = this;
        if (layer.loaded) {
            // load multidimensional info (may or may not involve actual async fetching)
            await this.initLayer(layer);
        }
        else {
            // load layer (show loading sign) and multidimensional info
            this.initLayer(layer);
        }
        this.containerTop = this.hostElement.getBoundingClientRect().top;
    }
    disconnectedCallback() {
        var _a, _b;
        this.closePopover();
        this.destroyValuePicker("both");
        (_a = this.watchHandleViewTime) === null || _a === void 0 ? void 0 : _a.remove();
        (_b = this.watchHandleLayer) === null || _b === void 0 ? void 0 : _b.remove();
    }
    // --------------------------------------------------------------------------
    //
    //  public methods
    //
    // --------------------------------------------------------------------------
    async setFocus(focusId) {
        var _a;
        if (focusId === "dismiss-button" || (!focusId && this.dismissible)) {
            (_a = this.refCloseButtonNode) === null || _a === void 0 ? void 0 : _a.setFocus();
        }
        else {
            this.refPanelNode.setFocus();
        }
    }
    async done() {
        this.apply();
    }
    // --------------------------------------------------------------------------
    //
    //  Renderer methods
    //
    // --------------------------------------------------------------------------
    render() {
        var _a;
        if (this.popOver) {
            this.updatePopoverProps();
        }
        const rtl = (0,_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_4__.g)(this.hostElement) === "rtl";
        const { hidePanelHeading, dismissible, hideButtons, panelHeading, hideExtentSection, strings: strings } = this;
        const loading = !((_a = this.layer) === null || _a === void 0 ? void 0 : _a.loaded);
        if (!this.multidimensionalInfo) {
            const unsupportedDiv = loading ? null : ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "multidimensional-unsupported" }, strings.general.unsupported));
            return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-panel", { loading: loading, heading: !hidePanelHeading ? panelHeading !== null && panelHeading !== void 0 ? panelHeading : strings.title : undefined, class: {
                    panel: true,
                    [_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_4__.C.rtl]: rtl
                }, ref: (node) => (this.refPanelNode = node) }, dismissible && this.renderClose(), unsupportedDiv, !hideButtons && this.renderDoneButton(), !hideButtons && this.renderCancelButton()));
        }
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.H, null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-panel", { loading: false, heading: !hidePanelHeading ? panelHeading !== null && panelHeading !== void 0 ? panelHeading : strings.title : undefined, class: {
                panel: true,
                [_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_4__.C.rtl]: rtl
            }, ref: (node) => (this.refPanelNode = node) }, dismissible ? this.renderClose() : null, hideExtentSection ? null : this.renderExtent(), this.renderCurrentDisplay(), hideButtons ? null : this.renderDoneButton(), hideButtons ? null : this.renderCancelButton())));
    }
    renderCurrentDisplay() {
        var _a;
        const { activeMultidimensionalDefinition, strings } = this;
        const subsetVariables = this.activeMultidimensionalSubset.variables;
        const variables = this.allVariables.filter(({ name }) => !subsetVariables.length || subsetVariables.includes(name));
        const { layer } = this;
        const isDynamicImagery = this.isImageryLayer(layer);
        const hasStarOrNewVariable = isDynamicImagery &&
            (variables.some(({ name }) => name === "*") ||
                this.hasNewVariable(this.multidimensionalInfo));
        // since multidimensionalDefinition can only be used for selection, it cannot be used to
        // work with new variables after rasterFunction
        let activeVariableName = activeMultidimensionalDefinition[0].variableName;
        // handle special variable name from a server side rft.
        // for 10.9+ servers, an rft with query definition will result a * variable, which is equivalent of unspecified variable name
        if (isDynamicImagery) {
            const { rasterFunction, version } = layer;
            const hasRasterFunction = rasterFunction && ((_a = rasterFunction.functionName) === null || _a === void 0 ? void 0 : _a.toLowerCase()) !== "none";
            if (hasRasterFunction) {
                if (version <= _multidimensional_69f3968f_js__WEBPACK_IMPORTED_MODULE_5__.m) {
                    variables.unshift(Object.assign(Object.assign({}, variables[0]), { name: strings.display.defaultVariable, label: strings.display.defaultVariable }));
                }
                if (activeVariableName === "") {
                    activeVariableName = hasStarOrNewVariable
                        ? variables[0].name
                        : strings.display.defaultVariable;
                }
            }
        }
        const selectedIndex = variables.findIndex((variableInfo) => variableInfo.name === activeVariableName);
        const selectStrings = {
            clearFilter: strings.select.clearFilter,
            filterText: strings.select.filterText,
            filterLabel: strings.extent.searchVariables,
            selectLabel: strings.extent.selectVariables
        };
        const variableSelect = ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, strings.display.variable, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-lazy-loading-select", { selectedIndex: selectedIndex === -1 ? 0 : selectedIndex, list: variables.map((variableInfo) => (Object.assign(Object.assign({}, variableInfo), { value: variableInfo.name }))), strings: selectStrings, key: this.sourceKey, onArcgisLazyLoadingSelectChange: (evt) => {
                const selectedVariableName = evt.detail.selectedValue;
                this.updateDefinitionVariableName(selectedVariableName);
            }, containerTop: this.containerTop }))));
        // restore special activeVariableName. star variable is fine for the following variableInfo lookup
        if (activeVariableName === strings.display.defaultVariable) {
            activeVariableName = "";
        }
        const variableInfo = this.getVariableInfo(activeVariableName);
        const dimensionBlocks = variableInfo.dimensions.map((dimInfo) => {
            dimInfo = (0,_multidimensional_69f3968f_js__WEBPACK_IMPORTED_MODULE_5__.g)(dimInfo, this.activeMultidimensionalSubset);
            return this.renderDimension(dimInfo);
        });
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-block", { heading: strings.display.current, collapsible: true, open: true }, variableSelect, dimensionBlocks));
    }
    renderPickListPopover() {
        if (this.popOver) {
            return;
        }
        const popOver = document.createElement("arcgis-field-pick-list");
        const popoverWidth = this.refPanelNode.getBoundingClientRect().width;
        popOver.popoverProps = {
            refElement: this.refPanelNode,
            placement: "leading-end",
            offsetDistance: 1,
            offsetSkidding: 48,
            popoverWidth
        };
        popOver.heading = this.strings.extent.selectVariables;
        popOver.filterPlaceholderText = this.strings.extent.searchVariables;
        popOver.showFieldInfo = false;
        popOver.showFieldName = false;
        popOver.showDescription = true;
        popOver.showSelectionAll = true;
        popOver.showCancel = false;
        popOver.showSort = false;
        popOver.sortBy = _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_6__.L.default;
        popOver.multiple = true;
        this.popOver = popOver;
        this.previousPickedListSize = -1;
        this.updatePopoverProps();
        popOver.addEventListener("arcgisFieldPickListChange", (evt) => {
            let selectedVariables = evt.detail.selectedFields || [];
            this.updateExtentVariables(selectedVariables);
        });
        popOver.addEventListener("arcgisFieldPickListDismissed", (_evt) => {
            this.closePopover();
        });
        document.body.appendChild(popOver);
    }
    renderExtent() {
        const variableList = this.renderVariableList();
        const { extent: extentStrings } = this.strings;
        const variableSelectButton = this.allVariables.length > 1 && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "variable-select" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { scale: "s", appearance: "outline-fill", kind: "neutral", round: true, alignment: "center", iconStart: "plus", onClick: () => this.renderPickListPopover() }, extentStrings.variables)));
        const allDimensiosn = [];
        this.multidimensionalInfo.variables.forEach(({ dimensions }) => allDimensiosn.push(...dimensions));
        const extentBlocks = this.activeMultidimensionalSubset.dimensions.map(({ name, extent }) => {
            const dimInfo = allDimensiosn.find(({ name: dimName }) => dimName === name);
            return this.renderDimensionExtent(dimInfo, extent);
        });
        const aoiBlock = this.hideAOI ? undefined : this.renderAOI();
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-block", { heading: extentStrings.extent, collapsible: true, open: !this.collapseExtentSection, onCalciteBlockToggle: () => this.closePopover() }, variableList, variableSelectButton, extentBlocks, aoiBlock));
    }
    renderVariableList() {
        const subsetVariables = this.activeMultidimensionalSubset.variables;
        const variables = this.allVariables.filter(({ name }) => !subsetVariables.length || subsetVariables.includes(name));
        const { strings } = this;
        const hidden = this.allVariables.length === 1;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, strings.extent.variables, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-list", { class: "variable-section-boarder" }, variables.map(({ name, label, description }) => ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-list-item", { label: label, description: description, key: name }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { icon: "x", scale: "s", text: strings.general.close, slot: "actions-end", hidden: hidden, onClick: () => this._removeVariable(name) }))))))));
    }
    renderAOI() {
        const { strings } = this;
        const aoiOptions = [
            { value: "default", label: strings.extent.default, selected: this.aoiIndex === 0 },
            { value: "map", label: strings.extent.mapExtent, selected: this.aoiIndex === 1 }
        ];
        const selectedIndex = aoiOptions.findIndex(({ selected }) => selected);
        const selectStrings = {
            clearFilter: this.strings.select.clearFilter,
            filterText: this.strings.select.filterText,
            filterLabel: this.strings.extent.searchAOI,
            selectLabel: this.strings.extent.selectAOI
        };
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, strings.extent.aoi, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-lazy-loading-select", { selectedIndex: selectedIndex, list: aoiOptions, strings: selectStrings, onArcgisLazyLoadingSelectChange: (evt) => {
                var _a;
                const value = evt.detail.selectedValue;
                const aoi = value === "default" ? null : (_a = this.view) === null || _a === void 0 ? void 0 : _a.extent;
                this.aoiIndex = value === "default" ? 0 : 1;
                this.updateExtentAOI(aoi);
            }, containerTop: this.containerTop }))));
    }
    _removeVariable(variableName) {
        const newActiveMultidimensionalSubset = this.activeMultidimensionalSubset.clone();
        let subsetDefinitions = newActiveMultidimensionalSubset.subsetDefinitions.filter((def) => def.variableName !== variableName);
        if (subsetDefinitions.length === 0) {
            subsetDefinitions = this.getDefaultMultidimensionalSubset().subsetDefinitions;
        }
        newActiveMultidimensionalSubset.subsetDefinitions = subsetDefinitions;
        this.activeMultidimensionalSubset = newActiveMultidimensionalSubset;
    }
    renderDimensionList(dimensionInfo, options) {
        var _a;
        let { selectedValue, key } = options;
        const isStartOrEnd = (key === null || key === void 0 ? void 0 : key.includes("start")) || (key === null || key === void 0 ? void 0 : key.includes("end"));
        if (Array.isArray((_a = dimensionInfo.values) === null || _a === void 0 ? void 0 : _a[0]) && typeof selectedValue === "number") {
            const dimValues = dimensionInfo.values;
            if (isStartOrEnd) {
                selectedValue = dimValues.find((value) => key.includes("start") ? value[0] === selectedValue : value[1] === selectedValue);
            }
            else {
                // match start, then match end
                selectedValue = dimValues.find((value) => value[0] === selectedValue);
                if (selectedValue == null) {
                    selectedValue = dimValues.find((value) => value[1] === selectedValue);
                }
            }
        }
        const isUndefinedValue = selectedValue === undefined_dimension_value ||
            options.selectedValue === undefined_dimension_value;
        const activeDimensionLabel = isUndefinedValue
            ? "undefined"
            : (0,_multidimensional_69f3968f_js__WEBPACK_IMPORTED_MODULE_5__.f)(selectedValue, dimensionInfo, {
                intl: this.intl,
                useRecurringTimeLabel: true
            });
        // number is not well supported by calcite-select
        // <option label="0" value="">0</option> (null/truthy check issue?)
        // start/end time column renders same (how is this related to number?)
        const separator = " - ";
        const isAscending = options.sortable
            ? this.sortDirections[dimensionInfo.name] !== "descending"
            : true;
        const dimensionValues = isAscending
            ? dimensionInfo.values
            : [...dimensionInfo.values].reverse();
        const values = dimensionValues.map((value) => {
            const label = (0,_multidimensional_69f3968f_js__WEBPACK_IMPORTED_MODULE_5__.f)(value, dimensionInfo, {
                intl: this.intl,
                useRecurringTimeLabel: true
            });
            const valueStr = Array.isArray(value) ? value.join(separator) : String(value);
            const selected = label === activeDimensionLabel;
            const key = `${options.key}-${valueStr}}`;
            return {
                key,
                value: valueStr,
                label,
                selected
            };
        });
        if (options.showEnd) {
            values.push({
                key: `${dimensionInfo.name}-end-undefined}`,
                value: String(undefined_dimension_value),
                label: this.strings.extent.endUndefined,
                selected: isUndefinedValue
            });
        }
        const onArcgisLazyLoadingSelectChange = (evt) => {
            var _a;
            const value = evt.detail.selectedValue.split(separator).map((val) => Number(val));
            (_a = options.onChange) === null || _a === void 0 ? void 0 : _a.call(options, value.length === 1 ? value[0] : value);
        };
        let sortIcon = null;
        if (options.sortable) {
            // icon is the what user want to change to
            const sortIconName = (0,_multidimensional_69f3968f_js__WEBPACK_IMPORTED_MODULE_5__.i)(dimensionInfo)
                ? isAscending
                    ? "clock-up"
                    : "clock-down"
                : isAscending
                    ? "sort-ascending-arrow"
                    : "sort-descending-arrow";
            sortIcon = ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { icon: sortIconName, scale: "s", text: this.strings.display.sort, slot: "actions-end", onClick: () => {
                    this.updateSorting(dimensionInfo.name);
                } }));
        }
        const selectedIndex = values.findIndex(({ selected }) => selected);
        const selectStrings = {
            clearFilter: this.strings.select.clearFilter,
            filterText: this.strings.select.filterText,
            filterLabel: this.strings.extent.searchDimensions,
            selectLabel: this.strings.extent.selectDimensions
        };
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "dimension-select-container" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-lazy-loading-select", { selectedIndex: selectedIndex === -1 ? 0 : selectedIndex, list: values, strings: selectStrings, onArcgisLazyLoadingSelectChange: onArcgisLazyLoadingSelectChange, containerTop: this.containerTop }), sortIcon));
    }
    renderDimension(dimensionInfo) {
        const { activeMultidimensionalDefinition } = this;
        const definition = activeMultidimensionalDefinition.find((def) => def.dimensionName === dimensionInfo.name);
        const onChange = (value) => this.updateDefinitionDimensionValue(dimensionInfo.name, value, true);
        const dimensionSelect = this.renderDimensionList(dimensionInfo, {
            selectedValue: definition.values[0],
            sortable: this.isDimensionListSortable,
            key: dimensionInfo.name,
            onChange
        });
        const { strings } = this;
        const dimensionLabel = dimensionInfo.name === "StdTime"
            ? strings.display.stdTimeDimension
            : dimensionInfo.name === "StdZ"
                ? strings.display.stdZDimension
                : strings.display.generalDimension.replace("${dimensionName}", dimensionInfo.name);
        const isTime = (0,_multidimensional_69f3968f_js__WEBPACK_IMPORTED_MODULE_5__.i)(dimensionInfo, true);
        const dimName = isTime ? "time" : "z";
        const clippedDimensionInfo = (0,_multidimensional_69f3968f_js__WEBPACK_IMPORTED_MODULE_5__.g)(dimensionInfo, this.activeMultidimensionalSubset);
        const isZeroOrSingleSlice = clippedDimensionInfo.values.length < 2;
        const { showAnimationControls } = this;
        const animationSwitch = showAnimationControls && !isZeroOrSingleSlice ? ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { layout: "inline" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-switch", { scale: "s", checked: this.animatedDimensions[dimName] === dimensionInfo.name, label: strings.display.showDimensionSlider, onCalciteSwitchChange: (event) => {
                const node = event.target;
                if (node.checked) {
                    this.createValuePicker(dimensionInfo);
                }
                else {
                    this.destroyValuePicker(isTime ? "time" : "z");
                }
            } }), strings.display.showDimensionSlider)) : null;
        return showAnimationControls ? ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "dimension-zone" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, dimensionLabel), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, strings.display.defaultPosition, dimensionSelect), animationSwitch)) : ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, dimensionLabel, dimensionSelect)));
    }
    renderDimensionExtent(dimensionInfo, extent) {
        var _a;
        const startValues = [];
        const endValues = [];
        dimensionInfo.values.forEach((value) => {
            if (Array.isArray(value)) {
                if (value[1] <= extent[1]) {
                    startValues.push(value);
                }
                if (value[0] >= extent[0]) {
                    endValues.push(value);
                }
            }
            else {
                if (value < extent[1]) {
                    startValues.push(value);
                }
                if (value > extent[0]) {
                    endValues.push(value);
                }
            }
        });
        const isSliceMode = extent[1] === extent[0] ||
            (Array.isArray(dimensionInfo.values[0]) &&
                dimensionInfo.values.some((val) => val[0] === extent[0] && val[1] === extent[1]));
        const startInfo = isSliceMode
            ? dimensionInfo
            : Object.assign(Object.assign({}, dimensionInfo), { values: startValues });
        const startList = this.renderDimensionList(startInfo, {
            selectedValue: extent[0],
            sortable: false,
            key: dimensionInfo.name + "-start",
            onChange: (value) => this.updateExtentDimensionSubset(dimensionInfo.name, value, "start")
        });
        const endInfo = Object.assign(Object.assign({}, dimensionInfo), { values: endValues });
        const endList = this.renderDimensionList(endInfo, {
            selectedValue: isSliceMode ? undefined_dimension_value : extent[1],
            sortable: false,
            key: dimensionInfo.name + "-end",
            showEnd: true,
            onChange: (value) => this.updateExtentDimensionSubset(dimensionInfo.name, value, "end")
        });
        const { strings } = this;
        const dimensionLabel = dimensionInfo.name === "StdTime"
            ? strings.extent.stdTimeExtent
            : dimensionInfo.name === "StdZ"
                ? strings.extent.stdZExtent
                : strings.extent.generalExtent.replace("${dimensionName}", dimensionInfo.name);
        const allValues = dimensionInfo.values;
        const sliceCount = allValues.length;
        // using closure here, there's one slider per dimension, doesn't need to keep track of them at the compoennt level
        let sliderTarget;
        const onSliderChange = (0,_functional_44de8fcf_js__WEBPACK_IMPORTED_MODULE_1__.d)(() => {
            var _a;
            // evt.target is not the slider itself in case of onCalciteSliderChange (onCalciteSliderInput is not fired when drag middle of two thumbs)
            let start, end;
            if (Array.isArray(sliderTarget.value)) {
                start = allValues[sliderTarget.value[0]];
                end = allValues[(_a = sliderTarget.value[1]) !== null && _a !== void 0 ? _a : sliderTarget.value[0]];
            }
            else {
                start = end = allValues[sliderTarget.value];
            }
            const startValue = Array.isArray(start) ? start[0] : start;
            const endValue = Array.isArray(end) ? end[1] : end;
            this.updateExtentDimensionSubset(dimensionInfo.name, [startValue, endValue]);
        }, 100);
        let minIndex = 0;
        let maxIndex = sliceCount - 1;
        const dimExtent = (_a = this.activeMultidimensionalSubset.dimensions.find(({ name }) => name === dimensionInfo.name)) === null || _a === void 0 ? void 0 : _a.extent;
        if (dimExtent) {
            minIndex = allValues.findIndex((val) => (Array.isArray(val) ? val[0] : val) === dimExtent[0]);
            if (minIndex === -1) {
                minIndex = 0;
            }
            maxIndex = allValues.findIndex((val) => (Array.isArray(val) ? val[1] : val) === dimExtent[1]);
            if (maxIndex === -1) {
                maxIndex = sliceCount - 1;
            }
        }
        const slider = extent[0] === extent[1] ? ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-slider", { disabled: false, min: 0, max: sliceCount - 1, value: minIndex, step: 1, snap: true, labelTicks: false, ticks: sliceCount, onCalciteSliderInput: onSliderChange, onCalciteSliderChange: onSliderChange, ref: (node) => (sliderTarget = node) })) : ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-slider", { disabled: false, min: 0, max: sliceCount - 1, "min-value": minIndex, "max-value": maxIndex, step: 1, snap: true, labelTicks: false, ticks: sliceCount, onCalciteSliderInput: onSliderChange, onCalciteSliderChange: onSliderChange, ref: (node) => (sliderTarget = node) }));
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "dimension-zone" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, dimensionLabel), slider, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: this.useCompactExtentDropdowns
                ? "multidimensional-extent-compact"
                : "multidimensional-extent" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, strings.extent.start, startList)), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, strings.extent.end, endList)))));
    }
    renderClose() {
        const { strings } = this;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { text: strings.general.close, icon: "x", slot: "header-actions-end", onClick: this.cancel, ref: (node) => {
                this.refCloseButtonNode = node;
            } }));
    }
    renderDoneButton() {
        const { strings } = this;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { slot: "footer", onClick: this.apply, appearance: "solid", width: "half", label: strings.general.done }, strings.general.done));
    }
    renderCancelButton() {
        const { strings } = this;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { slot: "footer", onClick: this.cancel, appearance: "outline-fill", width: "half", label: strings.general.cancel }, strings.general.cancel));
    }
    // --------------------------------------------------------------------------
    //
    //  Private methods
    //
    // --------------------------------------------------------------------------
    async initLayer(layer) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        if (!layer) {
            return;
        }
        if (!layer.loaded) {
            await layer.load();
        }
        this.rawMultidimensionalInfo = await (0,_multidimensional_69f3968f_js__WEBPACK_IMPORTED_MODULE_5__.a)(layer, true);
        if (!this.rawMultidimensionalInfo) {
            return;
        }
        const isDynamicImagery = this.isImageryLayer(layer);
        let functionName = "none";
        if (isDynamicImagery) {
            const multidimensionalInfo = (_a = (await (0,_multidimensional_69f3968f_js__WEBPACK_IMPORTED_MODULE_5__.a)(layer))) !== null && _a !== void 0 ? _a : this.rawMultidimensionalInfo;
            const hasMultipleNewVariables = ((_b = multidimensionalInfo.variables) === null || _b === void 0 ? void 0 : _b.length) > 1 && this.hasNewVariable(multidimensionalInfo);
            // todo: variable a/b/c to d/e/f is NOT supported since it requires extracting (not selecting) a variable, no test case as well.
            this.multidimensionalInfo = hasMultipleNewVariables
                ? this.rawMultidimensionalInfo
                : multidimensionalInfo;
            functionName = (_c = layer.rasterFunction) === null || _c === void 0 ? void 0 : _c.functionName;
        }
        else {
            this.multidimensionalInfo = this.rawMultidimensionalInfo;
        }
        this.sourceKey = `${layer.url}-${functionName}`;
        this.allVariables = this.multidimensionalInfo.variables.map(({ name, unit, description, dimensions, statistics }) => ({
            name,
            label: unit ? `${name} (${unit})` : name,
            description,
            dimensionNames: dimensions.map(({ name }) => name).join(", "),
            statisticsRange: statistics === null || statistics === void 0 ? void 0 : statistics.map(({ min, max }) => [min, max].join(", ")).join("; ")
        }));
        // keep original setting
        const definition = this.getMultidimensionalDefinition(layer);
        const mosaicRule = isDynamicImagery ? (_d = layer.mosaicRule) === null || _d === void 0 ? void 0 : _d.clone() : null;
        const renderer = (_e = layer.renderer) === null || _e === void 0 ? void 0 : _e.clone();
        const subset = (_f = layer.multidimensionalSubset) === null || _f === void 0 ? void 0 : _f.clone();
        this.originalLayerSetting = {
            subset,
            mosaicRule,
            definition,
            renderer
        };
        // active subset and definitions
        this.activeMultidimensionalDefinition = this.esriLang.clone(this.originalLayerSetting.definition);
        let activeMultidimensionalSubset = null;
        if ((_h = (_g = layer.multidimensionalSubset) === null || _g === void 0 ? void 0 : _g.subsetDefinitions) === null || _h === void 0 ? void 0 : _h.length) {
            activeMultidimensionalSubset = layer.multidimensionalSubset;
            if (activeMultidimensionalSubset.variables.some((variableName) => !this.multidimensionalInfo.variables.some((variablInfo) => variablInfo.name === variableName))) {
                layer.multidimensionalSubset = null;
                this.originalLayerSetting.subset = null;
                activeMultidimensionalSubset = this.getDefaultMultidimensionalSubset();
            }
        }
        else {
            activeMultidimensionalSubset = this.getDefaultMultidimensionalSubset();
        }
        this.activeMultidimensionalSubset = activeMultidimensionalSubset;
        this.showAnimationOnStartUp && this.launchDimensionalSliders();
        if (this.watchViewTime && this.view && !this.watchHandleViewTime) {
            this.watchHandleViewTime = this.view.watch("timeExtent", this.updateExtentFromTime);
        }
        if (this.watchRasterFunction && !this.watchHandleLayer && isDynamicImagery) {
            this.watchHandleLayer = layer.watch("rasterFunction", (0,_functional_44de8fcf_js__WEBPACK_IMPORTED_MODULE_1__.d)(async (newValue, oldValue) => {
                if ((newValue === null || newValue === void 0 ? void 0 : newValue.functionName) === (oldValue === null || oldValue === void 0 ? void 0 : oldValue.functionName)) {
                    return;
                }
                const mdInfo = await (0,_multidimensional_69f3968f_js__WEBPACK_IMPORTED_MODULE_5__.a)(layer);
                if (this.isPropertyValueChanged(mdInfo, this.multidimensionalInfo)) {
                    this.closePopover();
                    this.initLayer(layer);
                }
            }, 100));
        }
    }
    closePopover() {
        if (this.popOver) {
            document.body.removeChild(this.popOver);
            this.popOver = null;
        }
    }
    getMultidimensionalDefinition(layer) {
        const multidimensionalDefinition = (0,_multidimensional_69f3968f_js__WEBPACK_IMPORTED_MODULE_5__.c)(layer);
        if (multidimensionalDefinition === null || multidimensionalDefinition === void 0 ? void 0 : multidimensionalDefinition.length) {
            return multidimensionalDefinition;
        }
        return this.getNewMultidimensionalDefinition(this.allVariables[0].name);
    }
    getNewMultidimensionalDefinition(selectedVariableName) {
        var _a;
        const selectedVariableInfo = this.getVariableInfo(selectedVariableName);
        const dimensions = (_a = selectedVariableInfo.dimensions) !== null && _a !== void 0 ? _a : [];
        const selectedDimensionNames = dimensions.map((dimInfo) => dimInfo.name);
        const activeMultidimensionalDefinition = this.activeMultidimensionalDefinition || [];
        const newDef = this.esriLang.clone(activeMultidimensionalDefinition);
        const activeDimensionNames = activeMultidimensionalDefinition.map((def) => def.dimensionName);
        // handle special dimension-less case
        if (selectedDimensionNames.length === 0) {
            newDef.forEach((def) => {
                def.variableName = selectedVariableName;
                def.dimensionName = "";
                def.values = [];
                def.isSlice = true;
            });
            return newDef;
        }
        const isSameDimensionList = activeDimensionNames.length === selectedDimensionNames.length &&
            selectedDimensionNames.every((name) => activeDimensionNames.includes(name));
        if (isSameDimensionList) {
            newDef.forEach((def) => {
                def.variableName = selectedVariableName;
                const dimensionInfo = dimensions.find(({ name }) => name === def.dimensionName);
                (0,_multidimensional_69f3968f_js__WEBPACK_IMPORTED_MODULE_5__.u)(def, dimensionInfo, this.activeMultidimensionalSubset);
            });
            return newDef;
        }
        newDef.length = 0;
        dimensions.forEach((dimensionInfo) => {
            var _a;
            let def = (_a = activeMultidimensionalDefinition
                .find((def) => def.dimensionName === dimensionInfo.name)) === null || _a === void 0 ? void 0 : _a.clone();
            if (def) {
                def.variableName = selectedVariableName;
            }
            else {
                const value = (0,_multidimensional_69f3968f_js__WEBPACK_IMPORTED_MODULE_5__.b)(dimensionInfo);
                def = new this.DimensionalDefinition({
                    variableName: selectedVariableName,
                    dimensionName: dimensionInfo.name,
                    values: [value],
                    isSlice: true
                });
            }
            (0,_multidimensional_69f3968f_js__WEBPACK_IMPORTED_MODULE_5__.u)(def, dimensionInfo, this.activeMultidimensionalSubset);
            newDef.push(def);
        });
        return newDef;
    }
    isMultidimensionalDefinitionChanged(newDef) {
        return JSON.stringify(newDef) !== JSON.stringify(this.activeMultidimensionalDefinition);
    }
    launchDimensionalSliders() {
        var _a;
        this.destroyValuePicker("both");
        const { activeMultidimensionalDefinition, multidimensionalInfo } = this;
        const activeVariableName = activeMultidimensionalDefinition[0].variableName;
        const activeVariableInfo = (_a = multidimensionalInfo.variables.find(({ name }) => name === activeVariableName)) !== null && _a !== void 0 ? _a : multidimensionalInfo.variables[0];
        const timeDimension = activeVariableInfo.dimensions.find((dimensionInfo) => (0,_multidimensional_69f3968f_js__WEBPACK_IMPORTED_MODULE_5__.i)(dimensionInfo, true));
        this.createValuePicker(timeDimension);
        const zDimension = activeVariableInfo.dimensions.find((dimensionInfo) => !(0,_multidimensional_69f3968f_js__WEBPACK_IMPORTED_MODULE_5__.i)(dimensionInfo, true));
        this.createValuePicker(zDimension);
    }
    destroyValuePicker(target) {
        var _a, _b, _c, _d;
        if (target === "time" || target === "both") {
            (_a = this.valuePickers.time) === null || _a === void 0 ? void 0 : _a.handle.remove();
            (_b = this.valuePickers.time) === null || _b === void 0 ? void 0 : _b.slider.destroy();
            this.valuePickers.time = null;
            this.animatedDimensions.time = "";
        }
        if (target === "z" || target === "both") {
            (_c = this.valuePickers.z) === null || _c === void 0 ? void 0 : _c.handle.remove();
            (_d = this.valuePickers.z) === null || _d === void 0 ? void 0 : _d.slider.destroy();
            this.valuePickers.z = null;
            this.animatedDimensions.z = "";
        }
    }
    createValueTicks(steps, count) {
        return Array.from({ length: count }, (_, i) => i === 0
            ? 0
            : i === count - 1
                ? steps.length - 1
                : Math.round((i * (steps.length - 1)) / (count - 1)));
    }
    createValuePicker(dimensionInfo) {
        var _a, _b, _c;
        if (!dimensionInfo || !this.showAnimationControls) {
            return;
        }
        // process dimensionInfo clipping
        if (this.activeMultidimensionalSubset) {
            dimensionInfo = (0,_multidimensional_69f3968f_js__WEBPACK_IMPORTED_MODULE_5__.g)(dimensionInfo, this.activeMultidimensionalSubset);
        }
        // only have a single instance of time or z value picker
        const isTime = (0,_multidimensional_69f3968f_js__WEBPACK_IMPORTED_MODULE_5__.i)(dimensionInfo, true);
        const isZeroOrSingleSlice = dimensionInfo.values.length < 2;
        let prevValuePickerConfig = isTime ? this.valuePickers.time : this.valuePickers.z;
        if (isZeroOrSingleSlice ||
            (prevValuePickerConfig && prevValuePickerConfig.dimensionName !== dimensionInfo.name)) {
            this.destroyValuePicker(isTime ? "time" : "z");
            prevValuePickerConfig = null;
        }
        if (isZeroOrSingleSlice) {
            return;
        }
        // get picker parameters
        const activeDimensionValue = (_a = this.activeMultidimensionalDefinition.find(({ dimensionName }) => dimensionName === dimensionInfo.name)) === null || _a === void 0 ? void 0 : _a.values;
        const activeIndex = activeDimensionValue
            ? dimensionInfo.values.findIndex((value) => Array.isArray(value) && Array.isArray(activeDimensionValue[0])
                ? value.join() === activeDimensionValue.join()
                : value === activeDimensionValue[0])
            : 0;
        const dimValues = [...dimensionInfo.values];
        let lastDimValue = dimValues[dimValues.length - 1];
        if (Array.isArray(lastDimValue)) {
            lastDimValue = lastDimValue[lastDimValue.length - 1];
        }
        // API's default z layout is rising up: suitable when z dimension presents above-ground information
        // for ocean data, we need to reverse multiple places to "dive into the ocean"
        const reversed = !isTime && lastDimValue <= 0;
        const steps = dimValues.map((_val, i) => i);
        const stepCount = steps.length;
        // limit major ticks to 4 and avoid crowded minor ticks.
        const majorTicksCount = stepCount <= 4 ? 2 : isTime || stepCount <= 10 ? 3 : 4;
        const majorTicks = this.createValueTicks(steps, majorTicksCount);
        // align major tick to middle using 19: (1 + 9 * 2) for time, (1 + 6 * 3) for z
        const minorTicksCount = Math.min(19, stepCount > 19 ? Math.floor(stepCount / 2) : stepCount);
        const minorTicks = this.createValueTicks(steps, minorTicksCount);
        const labels = [...majorTicks];
        const formatter = (value, valueType) => {
            const index = reversed ? dimValues.length - 1 - value : value;
            return valueType === "tick"
                ? (0,_multidimensional_69f3968f_js__WEBPACK_IMPORTED_MODULE_5__.f)(dimValues[index], dimensionInfo, {
                    intl: this.intl,
                    useRecurringTimeLabel: true,
                    useFriendlyISOFormat: true,
                    useStartOrEndForRangedValue: true
                })
                : (0,_multidimensional_69f3968f_js__WEBPACK_IMPORTED_MODULE_5__.f)(dimValues[index], dimensionInfo, {
                    intl: this.intl,
                    useRecurringTimeLabel: true,
                    useFriendlyISOFormat: true,
                    format: "short-date-long-time"
                });
        };
        // create and add to view ui
        const valuePickerDiv = document.createElement("div");
        const { animationSetting } = this;
        valuePickerDiv.classList.add(isTime ? animationSetting.timeClassName : animationSetting.zClassName);
        document.body.appendChild(valuePickerDiv);
        // guard for 0 or negative playrate. tiled imagery can use a shorter interval
        const playRate = animationSetting.playRate <= 0
            ? this.isImageryLayer(this.layer)
                ? 3000
                : 2000
            : animationSetting.playRate;
        // update or create value picker
        const component = {
            type: "slider",
            min: 0,
            max: dimValues.length - 1,
            steps,
            minorTicks,
            majorTicks,
            labels,
            reversed,
            visibleElements: {
                thumbTooltip: this.showAnimationTooltip
            },
            labelFormatFunction: formatter
        };
        const values = this.getSelectedSliderValue(activeIndex, reversed, dimValues.length);
        if (prevValuePickerConfig) {
            prevValuePickerConfig.handle.remove();
            const valuePicker = prevValuePickerConfig.slider;
            valuePicker.component = component;
            valuePicker.values = values;
            prevValuePickerConfig.dimensionValues = dimValues;
            prevValuePickerConfig.handle = valuePicker.watch("values", (v) => {
                const index = reversed ? dimValues.length - 1 - v[0] : v[0];
                this.updateDefinitionDimensionValue(dimensionInfo.name, dimValues[index]);
            });
            return;
        }
        const valuePicker = new this.ValuePicker({
            caption: dimensionInfo.name,
            layout: isTime ? "horizontal" : "vertical",
            container: valuePickerDiv,
            label: dimensionInfo.name,
            playRate,
            component,
            values
        });
        this.view.ui.add(valuePicker, { position: "manual" });
        const handle = valuePicker.watch("values", (v) => {
            const index = reversed ? dimValues.length - 1 - v[0] : v[0];
            this.updateDefinitionDimensionValue(dimensionInfo.name, dimValues[index]);
        });
        // avoid obstruction for horizontal value picker with default top placement
        const tooltipPlacement = isTime
            ? (_b = this.animationSetting.timeTooltipPlacement) !== null && _b !== void 0 ? _b : "top"
            : (_c = this.animationSetting.zTooltipPlacement) !== null && _c !== void 0 ? _c : "auto";
        if (tooltipPlacement !== "auto") {
            setTimeout(() => (valuePickerDiv.getElementsByTagName("calcite-tooltip")[0].placement = tooltipPlacement), 1000);
        }
        const pickerConfig = {
            slider: valuePicker,
            dimensionName: dimensionInfo.name,
            dimensionValues: dimValues,
            handle
        };
        if (isTime) {
            this.valuePickers.time = pickerConfig;
            this.animatedDimensions.time = dimensionInfo.name;
        }
        else {
            this.valuePickers.z = pickerConfig;
            this.animatedDimensions.z = dimensionInfo.name;
        }
    }
    updatePopoverProps() {
        const subsetVariables = this.activeMultidimensionalSubset.variables;
        // special case: do not update popover when all unselected
        if (this.previousPickedListSize === 0 &&
            subsetVariables.length === this.multidimensionalInfo.variables.length) {
            return;
        }
        const { allVariables, popOver } = this;
        popOver.selectedFields = subsetVariables;
        popOver.fields = allVariables.map((variable) => ({
            name: variable.name,
            alias: variable.name,
            type: "String",
            description: variable.description
        }));
        const threshold = allVariables[0].description ? 5 : 10;
        popOver.showFilterLength =
            this.showVariableFilter == null
                ? threshold
                : this.showVariableFilter
                    ? 1
                    : allVariables.length + 1;
    }
    getDefaultMultidimensionalSubset(variableNames) {
        // subset definitions
        const { variables } = this.multidimensionalInfo;
        const subsetDefinitions = [];
        for (let i = 0; i < variables.length; i++) {
            const { name: variableName, dimensions } = variables[i];
            if ((variableNames === null || variableNames === void 0 ? void 0 : variableNames.length) && !variableNames.includes(variableName)) {
                continue;
            }
            if (dimensions.length === 0) {
                subsetDefinitions.push({ variableName, dimensionName: "", values: [], isSlice: false });
            }
            else {
                for (let j = 0; j < dimensions.length; j++) {
                    const dimensionName = dimensions[j].name;
                    const values = [...dimensions[j].extent];
                    subsetDefinitions.push({ variableName, dimensionName, values, isSlice: false });
                }
            }
        }
        return new this.MultidimensionalSubset({
            areaOfInterest: null,
            subsetDefinitions
        });
    }
    getVariableInfo(variableName) {
        var _a;
        const { variables } = this.multidimensionalInfo;
        return this.isDefaultUnspecifiedVariable(variableName)
            ? variables[0]
            : (_a = variables.find((info) => info.name === variableName)) !== null && _a !== void 0 ? _a : variables[0];
    }
    getSelectedSliderValue(dimIndex, reversed, count) {
        return [dimIndex === -1 ? 0 : reversed ? count - 1 - dimIndex : dimIndex];
    }
    isDefaultUnspecifiedVariable(variableName) {
        return ["", "*", this.strings.display.defaultVariable].includes(variableName);
    }
    isPropertyValueChanged(newValue, oldValue) {
        return JSON.stringify(newValue !== null && newValue !== void 0 ? newValue : undefined) !== JSON.stringify(oldValue !== null && oldValue !== void 0 ? oldValue : undefined);
    }
    hasNewVariable(multidimensionalInfo) {
        return multidimensionalInfo.variables.some((variableInfo) => !this.rawMultidimensionalInfo.variables.some((rawVariableInfo) => rawVariableInfo.name === variableInfo.name));
    }
    isImageryLayer(layer) {
        return layer.type === "imagery";
    }
    get hostElement() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
    static get watchers() { return {
        "layer": ["watchLayer"],
        "activeMultidimensionalDefinition": ["watchActiveMultidimensionalDefinition"],
        "activeMultidimensionalSubset": ["watchactiveMultidimensionalSubset"]
    }; }
};
ArcgisRasterMultidimensional.style = arcgisRasterMultidimensionalCss;



//# sourceMappingURL=arcgis-raster-multidimensional.entry.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-44de8fcf.js":
/*!****************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-44de8fcf.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ arrayToLookupMap),
/* harmony export */   b: () => (/* binding */ unique),
/* harmony export */   c: () => (/* binding */ throttle),
/* harmony export */   d: () => (/* binding */ debounce),
/* harmony export */   e: () => (/* binding */ escapeRegExp),
/* harmony export */   f: () => (/* binding */ arraysAreEquivalent),
/* harmony export */   g: () => (/* binding */ chunk),
/* harmony export */   i: () => (/* binding */ isDefined),
/* harmony export */   m: () => (/* binding */ minDelay),
/* harmony export */   t: () => (/* binding */ timeout),
/* harmony export */   u: () => (/* binding */ uniqueBy)
/* harmony export */ });
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */
/**
 * Call a function only after it has not been called for n milliseconds
 * @param fn    - function to call
 * @param delay - delay in milliseconds
 */
const debounce = (fn, delay) => {
    let timeout;
    let status = "idle";
    function flush(...args) {
        status = "flushed";
        return debounced(...args);
    }
    function invoke(...args) {
        status = "invoked";
        return debounced(...args);
    }
    function cancel(...args) {
        status = "cancelled";
        return debounced(...args);
    }
    function getStatus() {
        return status;
    }
    const debounced = (...args) => new Promise((resolve) => {
        switch (status) {
            case "flushed":
                status = "idle";
                if (timeout) {
                    clearTimeout(timeout);
                    resolve(fn(...args));
                }
                else {
                    resolve(null);
                }
                break;
            case "invoked":
                clearTimeout(timeout);
                status = "idle";
                resolve(fn(...args));
                break;
            case "cancelled":
                clearTimeout(timeout);
                status = "idle";
                resolve(null);
                break;
            default:
                if (timeout) {
                    clearTimeout(timeout);
                }
                status = "pending";
                timeout = setTimeout(() => {
                    status = "idle";
                    return resolve(fn(...args));
                }, delay);
                break;
        }
    });
    debounced.flush = flush;
    debounced.invoke = invoke;
    debounced.cancel = cancel;
    debounced.getStatus = getStatus;
    return debounced;
};
/**
 * Call a function only after n milliseconds have elapsed
 * @param fn    - function to call
 * @param delay - delay in milliseconds
 */
const throttle = (fn, delay) => {
    let timeout;
    return (...args) => new Promise((resolve) => {
        if (timeout) {
            return;
        }
        timeout = setTimeout(() => {
            clearTimeout(timeout);
            timeout = undefined;
            resolve(fn(...args));
        }, delay);
    });
};
function escapeRegExp(str) {
    return str.replace(/[.*+?^${}()|[\]\\]/g, "\\$&"); // $& means the whole matched string
}
function isDefined(value) {
    return value !== undefined && value !== null;
}
/**
 * Set a minimum time for a promise to resolve (useful for preventing flash of loaders)
 */
async function minDelay(promise, minDelay) {
    await Promise.all([promise, timeout(minDelay)]);
    return promise;
}
/**
 * Helper method to inline setTimeout as an await in async functions
 */
function timeout(ms) {
    return new Promise((resolve) => setTimeout(resolve, ms));
}
const arrayToLookupMap = (dataArr, getKeyAndItem) => Object.fromEntries((dataArr || []).map((item) => {
    const { key, data } = getKeyAndItem(item);
    return [key, data];
}));
/**
 * Check whether two arrays have the same number of elements
 * and whether they contain the same elements
 * regardless of order
 */
const arraysAreEquivalent = (arr1, arr2) => arr1.length === arr2.length && arr1.reduce((memo, str) => memo && arr2.indexOf(str) > -1, true);
function uniqueBy(myArr, getItemId) {
    const resultArr = [];
    const lookupMap = {};
    myArr.forEach((item) => {
        const id = getItemId(item);
        if (lookupMap[id] == null) {
            lookupMap[id] = item;
            resultArr.push(item);
        }
    });
    return resultArr;
}
function unique(myArr) {
    const primitives = { boolean: {}, number: {}, string: {} };
    const objs = [];
    return myArr.filter((item) => {
        let type = typeof item;
        if (type in primitives) {
            return primitives[type].hasOwnProperty(item) ? false : (primitives[type][item] = true);
        }
        else {
            return objs.indexOf(item) >= 0 ? false : objs.push(item);
        }
    });
}
const chunk = (arr, size) => [...Array(Math.ceil(arr.length / size))].map((_, i) => arr.slice(size * i, size + size * i));



//# sourceMappingURL=functional-44de8fcf.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-050b6db9.js":
/*!************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-050b6db9.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ getComponentClosestLanguage),
/* harmony export */   g: () => (/* binding */ getLocaleComponentStrings)
/* harmony export */ });
/* harmony import */ var _dom_4d367677_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dom-4d367677.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-4d367677.js");
/* harmony import */ var _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./languageUtil-ef0e54b2.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-ef0e54b2.js");
/* harmony import */ var _index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./index-e3bf7da7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-e3bf7da7.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */




// https://medium.com/stencil-tricks/implementing-internationalisation-i18n-with-stencil-5e6559554117
function getComponentClosestLanguage(element) {
    var _a, _b, _c;
    const closestElement = (_a = (0,_dom_4d367677_js__WEBPACK_IMPORTED_MODULE_0__.c)(element, "[lang]")) !== null && _a !== void 0 ? _a : (_c = (_b = element.shadowRoot) === null || _b === void 0 ? void 0 : _b.ownerDocument) === null || _c === void 0 ? void 0 : _c.documentElement;
    // language set by the calling application or browser. defaults to english.
    const lang = ((closestElement === null || closestElement === void 0 ? void 0 : closestElement.lang) || (navigator === null || navigator === void 0 ? void 0 : navigator.language) || "en").toLowerCase();
    if (_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang)) {
        return _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang);
    }
    else {
        // "ru-RU" maps to "ru" use case
        if (_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang.slice(0, 2))) {
            return _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang.slice(0, 2));
        }
        else {
            return "en";
        }
    }
}
function getComponentClosestLanguageIntl(element) {
    var _a, _b, _c;
    // it's OK if we don't have the 4 letter language file for it
    // 4 letter language code needed for formatting numbers
    const closestElement = (_a = (0,_dom_4d367677_js__WEBPACK_IMPORTED_MODULE_0__.c)(element, "[lang]")) !== null && _a !== void 0 ? _a : (_c = (_b = element.shadowRoot) === null || _b === void 0 ? void 0 : _b.ownerDocument) === null || _c === void 0 ? void 0 : _c.documentElement;
    // language set by the calling application or browser. defaults to english.
    const lang = ((closestElement === null || closestElement === void 0 ? void 0 : closestElement.lang) || (navigator === null || navigator === void 0 ? void 0 : navigator.language) || "en").toLowerCase();
    if (_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang)) {
        return _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang);
    }
    else {
        if (_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang.slice(0, 2))) {
            // we support the 2 letter coded language
            // e.g. it-CH vs it
            return lang;
        }
        else {
            return "en";
        }
    }
}
function fetchLocaleStringsForComponent(componentName, locale) {
    return new Promise((resolve, reject) => {
        fetch((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_2__.a)(`../arcgis-app-assets/i18n/${componentName}.i18n.${locale}.json`)).then((result) => {
            if (result.ok)
                resolve(result.json());
            else
                reject();
        }, () => reject());
    });
}
const stringCache = {};
function fetchLocaleStringsFromCache(componentName, locale) {
    const id = `${componentName}${locale}`;
    if (!stringCache[id]) {
        stringCache[id] = fetchLocaleStringsForComponent(componentName, locale);
    }
    return stringCache[id];
}
/**
 * Get strings and language codes.
 * This method returns 2 language codes.
 * The first one returns a code that's also supported as a language file.
 * The second one returns a code where there is support for the first 2 letters of the code as part of a language file,
 * but will return the original 4 letter code from the page.
 * E.g. For "it-ch" it will return "it" as the first language code and "it-ch" as the second.
 * The second one is required for esri.intl.setLocale() to get the correct formatting.
 *
 * If a tagName is provided it will overwite the element's tagName
 *
 *  @return [ strings, first language code, second language code]
 */
async function getLocaleComponentStrings(element, tagName) {
    const componentName = tagName || element.tagName.toLowerCase();
    const componentLanguage = getComponentClosestLanguage(element);
    const componentLanguageIntl = getComponentClosestLanguageIntl(element);
    let strings;
    try {
        strings = await fetchLocaleStringsFromCache(componentName, componentLanguage);
    }
    catch (e) {
        console.warn(`no locale for ${componentName} (${componentLanguage}) loading default locale en.`);
        strings = await fetchLocaleStringsFromCache(componentName, "en");
    }
    return [strings, componentLanguage, componentLanguageIntl];
}



//# sourceMappingURL=locale-050b6db9.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/multidimensional-69f3968f.js":
/*!**********************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/multidimensional-69f3968f.js ***!
  \**********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ getMultidimensionalInfo),
/* harmony export */   b: () => (/* binding */ getDefaultDimensionSliceValue),
/* harmony export */   c: () => (/* binding */ getMultidimensionalDefinition),
/* harmony export */   f: () => (/* binding */ formatDimensionValue),
/* harmony export */   g: () => (/* binding */ getClippedDimensionInfo),
/* harmony export */   i: () => (/* binding */ isTimeDimension),
/* harmony export */   m: () => (/* binding */ minVersionRFTMultidimensionalInfo),
/* harmony export */   u: () => (/* binding */ updateDimensionalDefinition)
/* harmony export */ });
/* harmony import */ var _commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./commonFunctions-b0830e9e.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/commonFunctions-b0830e9e.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */


const minVersionRFTMultidimensionalInfo = 10.9;
function formatTime(value, options) {
    const date = new Date(value);
    const { useFriendlyISOFormat, intl, format } = options;
    if (useFriendlyISOFormat && intl) {
        return intl.formatDate(date, Object.assign(Object.assign({}, intl.convertDateFormatToIntlOptions(format !== null && format !== void 0 ? format : "short-date-long-time")), { timeZone: "UTC" }));
    }
    let isoTimeString = new Date(value).toISOString();
    isoTimeString = isoTimeString.slice(0, isoTimeString.indexOf(".")) + "Z";
    return isoTimeString;
}
function formatMonth(value_base1, intl, format = "long") {
    // using an arbitrary date (the day the code was written) to avoid side effects of setMonth near the end of the month
    // setMonth will move the date to the next month when new month doesn't have current date (e.g. 9/31, 2/30)
    // date = new Date(2002, 9, 31); date.setMonth(8); console.log(date.toLocaleDateString())
    const date = new Date(2022, 9, 10);
    date.setMonth(value_base1 - 1);
    return intl.formatDate(date, { month: format });
}
function formatQuarter(value_base1, intl) {
    const startMonth = formatMonth((value_base1 - 1) * 3 + 1, intl, "short");
    const endMonth = formatMonth(value_base1 * 3, intl, "short");
    return `${startMonth} - ${endMonth}`;
}
function formatDimensionValue(value, dimensionInfo, options = {}) {
    var _a, _b, _c, _d;
    if (value == null) {
        return "";
    }
    const { intl, useRecurringTimeLabel } = options;
    if (useRecurringTimeLabel && intl && !Array.isArray(value)) {
        const intervalUnit = (_a = dimensionInfo.intervalUnit) === null || _a === void 0 ? void 0 : _a.toLowerCase().trim();
        // weekly and daily are not supported yet
        const canUseRecurringTimeLabel = isRecurringTimeDimension(dimensionInfo) && (intervalUnit === "months" || intervalUnit === "quarters");
        if (canUseRecurringTimeLabel) {
            return intervalUnit === "months" ? formatMonth(value, intl) : formatQuarter(value, intl);
        }
    }
    // this is prefered when labeling a slider alike control
    const lastElement = (_b = dimensionInfo.values) === null || _b === void 0 ? void 0 : _b[dimensionInfo.values.length - 1];
    if (options.useStartOrEndForRangedValue && Array.isArray(value) && value.length === 2 && Array.isArray(lastElement)) {
        const isLastElement = value.join("-") === lastElement.join("-");
        value = isLastElement ? value[1] : value[0];
    }
    const isTime = isTimeDimension(dimensionInfo);
    if (!isTime) {
        return Array.isArray(value)
            ? value.map((element) => { var _a; return (_a = intl === null || intl === void 0 ? void 0 : intl.formatNumber(element)) !== null && _a !== void 0 ? _a : String(element); }).join(" - ")
            : (_c = intl === null || intl === void 0 ? void 0 : intl.formatNumber(value)) !== null && _c !== void 0 ? _c : String(value);
    }
    if (options.useFriendlyISOFormat && !options.format) {
        let resolution = (_d = dimensionInfo.intervalUnit) === null || _d === void 0 ? void 0 : _d.toLowerCase().trim();
        let { interval, extent } = dimensionInfo;
        if (resolution === "months") {
            if (interval > 11) {
                resolution = "year";
            }
        }
        else if (resolution === "days") {
            if (interval > 364) {
                resolution = "year";
            }
            else if (interval > 27) {
                resolution = "months";
            }
        }
        else if (resolution === "hours") {
            resolution = "days";
        }
        if (!["years", "months", "days"].includes(resolution) && (extent === null || extent === void 0 ? void 0 : extent.length)) {
            const interval = (extent[1] - extent[0]) / dimensionInfo.values.length;
            const day = 86400000;
            if (interval >= 365 * day) {
                resolution = "years";
            }
            else if (interval >= 28 * day) {
                resolution = "months";
            }
        }
        const format = resolution === "years" ? "year" : resolution === "months" ? "short-month-year" : "short-date";
        options = Object.assign({ format }, options);
    }
    return Array.isArray(value)
        ? value.map((element) => formatTime(element, options)).join(" - ")
        : formatTime(value, options);
}
function getClippedDimensionInfo(dimensionInfo, multidimensionalSubset) {
    var _a;
    const constraint = (_a = multidimensionalSubset === null || multidimensionalSubset === void 0 ? void 0 : multidimensionalSubset.dimensions) === null || _a === void 0 ? void 0 : _a.find(({ name }) => name === dimensionInfo.name);
    if (!(constraint === null || constraint === void 0 ? void 0 : constraint.extent)) {
        return dimensionInfo;
    }
    const extent = [...constraint.extent];
    const values = dimensionInfo.values.filter((value) => {
        // must be contained, intersection is not sufficient
        if (Array.isArray(value)) {
            if (!(0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_0__.i)(extent[1]) || extent[0] === extent[1]) {
                return value[0] === extent[0];
            }
            return value[0] >= extent[0] && value[0] <= extent[1] && value[1] >= extent[0] && value[1] <= extent[1];
        }
        return value >= extent[0] && value <= extent[1];
    });
    // this is a special case, when last slice of a ranged dimension series is used
    if (values.length === 0) {
        const lastValue = dimensionInfo.values[dimensionInfo.values.length - 1];
        if (Array.isArray(lastValue) && lastValue[1] === extent[0]) {
            values.push(lastValue);
        }
    }
    return Object.assign(Object.assign({}, dimensionInfo), { extent, values });
}
function getDefaultDimensionSliceValue(dimensionInfo) {
    var _a;
    const { values, extent, name } = dimensionInfo;
    let value = (_a = values === null || values === void 0 ? void 0 : values[0]) !== null && _a !== void 0 ? _a : extent[0];
    if (name.toLowerCase() === "stdz" &&
        !dimensionInfo.hasRanges &&
        Math.abs(extent[1]) <= Math.abs(extent[0])) {
        if (values === null || values === void 0 ? void 0 : values.length) {
            value = values[values.length - 1];
        }
        else {
            value = extent[1];
        }
    }
    return value;
}
function getMultidimensionalDefinition(layer) {
    var _a, _b;
    return layer.type === "imagery-tile"
        ? layer.multidimensionalDefinition
        : (_b = ((_a = layer.mosaicRule) !== null && _a !== void 0 ? _a : layer._defaultServiceMosaicRule)) === null || _b === void 0 ? void 0 : _b.multidimensionalDefinition;
}
async function getMultidimensionalInfo(layer, useRawSourceInfo) {
    var _a, _b;
    if (layer.type === "imagery-tile") {
        return layer.rasterInfo.multidimensionalInfo;
    }
    const { rasterFunction, version } = layer;
    if (useRawSourceInfo ||
        version <= minVersionRFTMultidimensionalInfo ||
        !rasterFunction ||
        ((_a = rasterFunction.functionName) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === "none") {
        return layer.serviceRasterInfo.multidimensionalInfo;
    }
    const rasterInfo = (_b = (await layer.generateRasterInfo(layer.rasterFunction))) !== null && _b !== void 0 ? _b : layer.serviceRasterInfo;
    return rasterInfo.multidimensionalInfo;
}
function isTimeDimension(dimensionInfo, ignoreRecuring = false) {
    return dimensionInfo.name === "StdTime" && (ignoreRecuring || !dimensionInfo.recurring);
}
function isRecurringTimeDimension(dimensionInfo) {
    return dimensionInfo.name === "StdTime" && !!dimensionInfo.recurring;
}
function updateDimensionalDefinition(def, dimensionInfo, activeMultidimensionalSubset) {
    dimensionInfo = getClippedDimensionInfo(dimensionInfo, activeMultidimensionalSubset);
    const originalFormattedValue = formatDimensionValue(def.values[0], dimensionInfo);
    const hasOriginalFormattedValue = dimensionInfo.values.some((val) => originalFormattedValue === formatDimensionValue(val, dimensionInfo));
    if (!hasOriginalFormattedValue) {
        // get default slice value when def.values is invalid
        const value = getDefaultDimensionSliceValue(dimensionInfo);
        def.values = [value];
    }
}



//# sourceMappingURL=multidimensional-69f3968f.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,