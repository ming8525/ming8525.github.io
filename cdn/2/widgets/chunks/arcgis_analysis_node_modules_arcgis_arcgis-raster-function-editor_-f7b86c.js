"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_arcgis-raster-function-editor_-f7b86c"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/common-strings.lt-ac57c68c.js":
/*!**************************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/common-strings.lt-ac57c68c.js ***!
  \**************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   addRaster: () => (/* binding */ addRaster),
/* harmony export */   addScalar: () => (/* binding */ addScalar),
/* harmony export */   breadcrumb: () => (/* binding */ breadcrumb),
/* harmony export */   breadcrumbEditor: () => (/* binding */ breadcrumbEditor),
/* harmony export */   cancel: () => (/* binding */ cancel),
/* harmony export */   category: () => (/* binding */ category),
/* harmony export */   categoryNames: () => (/* binding */ categoryNames),
/* harmony export */   close: () => (/* binding */ close),
/* harmony export */   copy: () => (/* binding */ copy),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   defaultModelName: () => (/* binding */ defaultModelName),
/* harmony export */   definitionQuery: () => (/* binding */ definitionQuery),
/* harmony export */   description: () => (/* binding */ description),
/* harmony export */   deselectFunction: () => (/* binding */ deselectFunction),
/* harmony export */   details: () => (/* binding */ details),
/* harmony export */   dialogTitle: () => (/* binding */ dialogTitle),
/* harmony export */   dontSave: () => (/* binding */ dontSave),
/* harmony export */   enterFURL: () => (/* binding */ enterFURL),
/* harmony export */   enterURL: () => (/* binding */ enterURL),
/* harmony export */   error: () => (/* binding */ error),
/* harmony export */   errorTitle: () => (/* binding */ errorTitle),
/* harmony export */   everyone: () => (/* binding */ everyone),
/* harmony export */   f32PixelType: () => (/* binding */ f32PixelType),
/* harmony export */   f64PixelType: () => (/* binding */ f64PixelType),
/* harmony export */   failedToLoadLayer: () => (/* binding */ failedToLoadLayer),
/* harmony export */   folder: () => (/* binding */ folder),
/* harmony export */   general: () => (/* binding */ general),
/* harmony export */   groupFieldName: () => (/* binding */ groupFieldName),
/* harmony export */   groupItemsBy: () => (/* binding */ groupItemsBy),
/* harmony export */   groups: () => (/* binding */ groups),
/* harmony export */   invalidRFTMessage: () => (/* binding */ invalidRFTMessage),
/* harmony export */   isDataset: () => (/* binding */ isDataset),
/* harmony export */   isPublic: () => (/* binding */ isPublic),
/* harmony export */   item: () => (/* binding */ item),
/* harmony export */   itemGroup: () => (/* binding */ itemGroup),
/* harmony export */   loadingLayer: () => (/* binding */ loadingLayer),
/* harmony export */   matchVariables: () => (/* binding */ matchVariables),
/* harmony export */   mosaic: () => (/* binding */ mosaic),
/* harmony export */   multidimensionalRules: () => (/* binding */ multidimensionalRules),
/* harmony export */   name: () => (/* binding */ name),
/* harmony export */   noTagErrorMsg: () => (/* binding */ noTagErrorMsg),
/* harmony export */   noTitleErrorMsg: () => (/* binding */ noTitleErrorMsg),
/* harmony export */   noTitleTagErrorMsg: () => (/* binding */ noTitleTagErrorMsg),
/* harmony export */   ok: () => (/* binding */ ok),
/* harmony export */   organization: () => (/* binding */ organization),
/* harmony export */   outputPixelType: () => (/* binding */ outputPixelType),
/* harmony export */   owner: () => (/* binding */ owner),
/* harmony export */   parameter: () => (/* binding */ parameter),
/* harmony export */   parameters: () => (/* binding */ parameters),
/* harmony export */   properties: () => (/* binding */ properties),
/* harmony export */   raster: () => (/* binding */ raster),
/* harmony export */   rasterFunctionEditor: () => (/* binding */ rasterFunctionEditor),
/* harmony export */   rasterFunctions: () => (/* binding */ rasterFunctions),
/* harmony export */   rfxLicenseInfo: () => (/* binding */ rfxLicenseInfo),
/* harmony export */   s16PixelType: () => (/* binding */ s16PixelType),
/* harmony export */   s32PixelType: () => (/* binding */ s32PixelType),
/* harmony export */   s8PixelType: () => (/* binding */ s8PixelType),
/* harmony export */   save: () => (/* binding */ save),
/* harmony export */   saveAs: () => (/* binding */ saveAs),
/* harmony export */   saveUtils: () => (/* binding */ saveUtils),
/* harmony export */   savingMessage: () => (/* binding */ savingMessage),
/* harmony export */   scalar: () => (/* binding */ scalar),
/* harmony export */   search: () => (/* binding */ search),
/* harmony export */   selectFeature: () => (/* binding */ selectFeature),
/* harmony export */   selectFunction: () => (/* binding */ selectFunction),
/* harmony export */   selectRaster: () => (/* binding */ selectRaster),
/* harmony export */   serviceURL: () => (/* binding */ serviceURL),
/* harmony export */   setGroupSharing: () => (/* binding */ setGroupSharing),
/* harmony export */   setSharingLevel: () => (/* binding */ setSharingLevel),
/* harmony export */   share: () => (/* binding */ share),
/* harmony export */   shareWith: () => (/* binding */ shareWith),
/* harmony export */   success: () => (/* binding */ success),
/* harmony export */   tagFieldName: () => (/* binding */ tagFieldName),
/* harmony export */   tags: () => (/* binding */ tags),
/* harmony export */   title: () => (/* binding */ title),
/* harmony export */   toolDetailsEditor: () => (/* binding */ toolDetailsEditor),
/* harmony export */   toolEditor: () => (/* binding */ toolEditor),
/* harmony export */   toolModeler: () => (/* binding */ toolModeler),
/* harmony export */   tryAgain: () => (/* binding */ tryAgain),
/* harmony export */   type: () => (/* binding */ type),
/* harmony export */   u16PixelType: () => (/* binding */ u16PixelType),
/* harmony export */   u32PixelType: () => (/* binding */ u32PixelType),
/* harmony export */   u8PixelType: () => (/* binding */ u8PixelType),
/* harmony export */   unionDimensions: () => (/* binding */ unionDimensions),
/* harmony export */   unknownPixelType: () => (/* binding */ unknownPixelType),
/* harmony export */   unsavedTitle: () => (/* binding */ unsavedTitle),
/* harmony export */   unsavedWarningExisting: () => (/* binding */ unsavedWarningExisting),
/* harmony export */   unsavedWarningNew: () => (/* binding */ unsavedWarningNew),
/* harmony export */   userStartDirection: () => (/* binding */ userStartDirection),
/* harmony export */   variables: () => (/* binding */ variables),
/* harmony export */   viewerModeMessage: () => (/* binding */ viewerModeMessage),
/* harmony export */   viewerModeTitle: () => (/* binding */ viewerModeTitle),
/* harmony export */   warning: () => (/* binding */ warning)
/* harmony export */ });
const ok = "Gerai";
const cancel = "Atšaukti";
const enterURL = "Įveskite vaizdų paslaugos URL";
const serviceURL = "Paslaugos URL";
const selectRaster = "Pasirinkite rastrą";
const failedToLoadLayer = "Sluoksnio įkelti nepavyko";
const loadingLayer = "Įkeliamas sluoksnis";
const selectFeature = "Pasirinkti elementų sluoksnį";
const enterFURL = "Įvesti elementų sluoksnio URL";
const addRaster = "Pridėti rastro kintamąjį";
const addScalar = "Pridėti konstantą";
const raster = "Rastras";
const scalar = "Skaliaras";
const defaultModelName = "Rastrų funkcijos šablonas";
const general = "Bendra";
const parameters = "Parametrai";
const variables = "Kintamieji";
const name = "Pavadinimas";
const description = "Aprašymas";
const parameter = "Parametras";
const isPublic = "IsPublic";
const isDataset = "IsDataset";
const unknownPixelType = "Nežinoma";
const outputPixelType = "Išvesties pikselių tipas";
const u8PixelType = "8 bitų, tik teigiami";
const s8PixelType = "8 bitų, ir neigiami";
const u16PixelType = "16 bitų, tik teigiami";
const s16PixelType = "16 bitų, ir neigiami";
const u32PixelType = "32 bitų, tik teigiami";
const s32PixelType = "32 bitų, ir neigiami";
const f32PixelType = "32 bitų, kintami";
const f64PixelType = "64 bitų, dvigubi";
const properties = "Savybės";
const multidimensionalRules = "Daugiamatės taisyklės";
const matchVariables = "Sutapdinti kintamuosius";
const unionDimensions = "Sąjungos matmenys";
const rasterFunctionEditor = {
	invalidRFTMessage: "Šis rastrų funkcijos šablonas netinkamas.",
	rfxArgsEditor: {
		outputRaster: "OutputRaster",
		raster: "Rastras",
		unsupportedDataTypeWarning: "Tolesni argumentai nerodomi, nes šiuo metu nepalaikomi.",
		unsupportedFunction: "Apima šiuo metu nepalaikomą rastrų funkciją (-as)."
	},
	rfxRasterInput: {
		selectLayer: "Pasirinkti sluoksnį",
		browseLayers: "Naršyti sluoksnius",
		rfxVariable: "RasterFunctionVariable"
	},
	rfxBandCombinationEditor: {
		methodLabel: "Būdas",
		bandLabel: "Matuoklio spalva",
		combinationLabel: "Derinys"
	},
	rfxRemapGrid: {
		minimum: "Minimumas",
		maximum: "Maksimumas",
		output: "Išvestis",
		noData: "NoData",
		remapValuesLabel: "Iš naujo susieti reikšmes"
	},
	rfxNamedRasterEditor: {
		rasterVariables: "Rastriniai kintamieji",
		deleteSelectedVars: "Pašalinti pasirinktus kintamuosius"
	},
	rfxClippingGeometry: {
		clippingLayer: "Iškerpamas sluoksnis",
		clippingRaster: "Iškerpamas rastras",
		clippingGeometry: "Iškerpama forma",
		customExtent: "Adaptuota aprėptis",
		outputExtent: "Išvesties aprėptis",
		currentExtent: "Esama žemėlapio aprėptis",
		drawLabel: "Brėžti"
	},
	rfxCustomExtent: {
		top: "Viršus",
		right: "Dešinėje",
		bottom: "Apačioje",
		left: "Kairėje"
	},
	rfxRasterArrayEditor: {
		moveUp: "Pakelti aukštyn",
		moveDown: "Nuleisti žemyn",
		remove: "Panaikinti"
	},
	rfxStatisticsGrid: {
		stdDev: "Stand. nuokrypis",
		min: "Min.",
		max: "Maks.",
		mean: "Vidurkis"
	},
	rfxWeightedSumTableEditor: {
		weightedSumTable: "Svorinių sumų lentelė",
		id: "ID",
		layer: "Sluoksnis",
		field: "Darbui lauke",
		weight: "Svoris",
		value: "Reikšmė",
		selectLayer: "Pasirinkti sluoksnį"
	},
	rfxWeightedOverlayTableEditor: {
		weightedOverlayTable: "Svorinių perdangų lentelė",
		id: "ID",
		layer: "Sluoksnis",
		field: "Darbui lauke",
		influence: "Poveikis",
		sumOfInfluence: "Poveikių suma",
		value: "Reikšmė",
		remapTable: "Iš naujo susieti lentelę",
		scale: "Mastelis",
		scales: "Masteliai",
		selectRaster: "Pasirinkti rastrą"
	},
	rfxFeatureSelect: {
		addFeatureLayer: "Rasti elementų sluoksnį",
		addPointLayer: "Rasti taškų sluoksnį"
	},
	rfxFieldSelect: {
		value: "Reikšmė",
		count: "Skaičius"
	},
	rfxAttributeTable: {
		tableType: "Lentelės tipas",
		manual: "Rankinis",
		external: "Išorinis",
		minVal: "Minimali reikšmė",
		maxVal: "Maksimali reikšmė",
		baseClassName: "Bazinis klasės pavadinimas",
		colorScheme: "Spalvų paletė",
		defaultClassName: "Žymė_",
		generateTable: "Generuoti lentelę",
		browseTable: "Naršyti lentelę",
		value: "Reikšmė",
		classname: "ClassName",
		color: "Spalva"
	},
	rfxFieldNumberSwitchable: {
		number: "Skaitinis",
		field: "Darbui lauke",
		string: "Tekstas",
		linearUnit: "Linijinių dydžių vienetas"
	},
	rfxPropertySet: {
		name: "Pavadinimas",
		value: "Reikšmė"
	},
	rfxConversionGrid: {
		size: "Dydis"
	},
	rfxTransposeBit: {
		bitPattern: "Bitų derinys",
		outputBit: "Išvesties bitas",
		inputBit: "Įvesties bitas"
	},
	rfxSpatialReference: {
		placeHolder: "Tikslinti pagal raktažodį",
		coordinateSystem: "Koordinačių sistema",
		gcs: "Geografinė koordinačių sistema",
		pcs: "Projekcinė koordinačių sistema",
		vcs: "Vertikali koordinačių sistema"
	}
};
const rfxLicenseInfo = "Šis rastrų funkcijos šablonas gali būti naudojamas vaizdams apdoroti naudojant ArcGIS Image Server.";
const rasterFunctions = {
	rfx: {
		aCosHName: "ACosH",
		aCosHSnip: "Skaičiuoja atvirkštinį hiperbolinį rastro gardelių kosinusą.",
		aCosHDesc: "Funkcija skaičiuoja atvirkštinį hiperbolinį rastro pikselių kosinusą.",
		aCosName: "ACos",
		aCosSnip: "Skaičiuoja atvirkštinį rastro pikselių kosinusą.",
		aCosDesc: "Ši rastrų funkcija skaičiuoja atvirkštinį rastro gardelių kosinusą. Matematikoje visos trigonometrinės funkcijos turi apibrėžtą tinkamų įvesties reikšmių intervalą, vadinamą domenu. Kiekvienos funkcijos išvesties reikšmės taip pat turi apibrėžtą intervalą. Šio įrankio domenas yra [-1, 1], o intervalas [0, pi].",
		aSinHName: "ASinH",
		aSinHSnip: "Skaičiuoja atvirkštinį hiperbolinį rastro gardelių sinusą.",
		aSinHDesc: "Funkcija skaičiuoja atvirkštinį hiperbolinį rastro pikselių sinusą.",
		aSinName: "ASin",
		aSinSnip: "Skaičiuoja atvirkštinį rastro gardelių sinusą.",
		aSinDesc: "Funkcija skaičiuoja atvirkštinį rastro pikselių sinusą.",
		aTan2Name: "ATan2",
		aTan2Snip: "Skaičiuoja atvirkštinį rastro gardelių tangentą (pagal x, y).",
		aTan2Desc: "Funkcija skaičiuoja atvirkštinį rastro pikselių tangentą (pagal x, y).",
		aTanHName: "ATanH",
		aTanHSnip: "Skaičiuoja atvirkštinį hiperbolinį rastro gardelių tangentą.",
		aTanHDesc: "Funkcija skaičiuoja atvirkštinį hiperbolinį rastro pikselių tangentą.",
		aTanName: "ATan",
		aTanSnip: "Skaičiuoja atvirkštinį rastro gardelių tangentą.",
		aTanDesc: "Funkcija skaičiuoja atvirkštinį rastro pikselių tangentą.",
		absName: "Abs",
		absSnip: "Skaičiuoja rastro gardelių absoliučiąją reikšmę.",
		absDesc: "Funkcija Abs skaičiuoja absoliučiąją rastro pikselių reikšmę.",
		reflectanceName: "Matomas atspindys",
		reflectanceSnip: "Konvertuoja neapdorotus vaizdus į viršutinio atmosferos sluoksnio reikšmes, atsižvelgiant į jutiklių ypatybes, saulės padėtį ir užfiksavimo laiką.",
		reflectanceDesc: "Funkcija skaičiuoja kai kurių palydovų jutiklių vaizdo ryškumo nekalibruoto skaičiaus (DN) reikšmę. Korekcijos atliekamos, atsižvelgiant į saulės aukštį, užfiksavimo datą ir jutiklio ypatybes, kad būtų nustatytas kiekvieno kanalo stiprinimas ir nuokrypis. Ši funkcija naudojama koreguoti atspindėjimui arba ryškumui kai kurių palydovinių vaizdų reikšmėms, atsižvelgiant į scenos apšvietimą ir jutiklių stiprinimo parametrus. Vaizdai koreguojami pagal teoriškai bendrą apšvietimo sąlygą, kad skirtingomis dienomis ir skirtingų jutiklių užfiksuotos scenos mažiau skirtųsi. Tai praverčia klasifikuojant vaizdus, balansuojant spalvas ir kuriant mozaikas. Šią funkciją galima naudoti tik su konkrečiais vaizdais. Tinkami jutikliai yra Landsat MSS, Landsat TM, Landsat ETM+, Landsat 8, IKONOS, QuickBird, GeoEye-1, RapidEye, DMCii, WorldView-1, WorldView-2, SPOT 6 ir Pleiades.<div><br/>Funkcija atlieka dvi korekcijas. Pirmoji yra atliekama pagal stiprinimo nustatymus. Pirminės ryškumo reikšmės yra atkuriamos pagal vaizdo reikšmes, apsukant stiprinimo lygtis. Antroji korekcija yra susijusi su saulės kampo ir ryškumo skirtumu. Pirminės ryškumo reikšmės koreguojamos pagal bendrą apšvietimo sąlygą, normalizuojant scenas, kurios užfiksuotos skirtingo apšvietimo sąlygomis. Apskritai, nors išvesties vaizdo duomenų tipas atitinka įvesties vaizdo duomenų tipą, išvesties reikšmės yra mažesnės nei įvesties reikšmės, todėl jos pritaikomos prie tinkamo duomenų diapazono.</div>",
		argStatisticsName: "ArgStatistics",
		argStatisticsSnip: "Apskaičiuoja arg statistiką, įskaitant Arg Max, Arg Min, Arg Median ir Trukmę.",
		argStatisticsDesc: "Funkcija apskaičiuoja arg statistiką. Yra keturi ArgStatistics funkcijos apskaičiavimo būdai: ArgMax, ArgMin, ArgMedian ir Trukmė.",
		arithmeticName: "Aritmetika",
		arithmeticSnip: "Atlieka aritmetinę operaciją tarp dviejų rastrų arba rastro ir skaliaro.",
		arithmeticDesc: "Funkcija Aritmetika atlieka aritmetinę operaciją tarp dviejų rastrų arba rastro ir skaliaro ir atvirkščiai.",
		aspectSlopeName: "Padėtis-nuolydis",
		aspectSlopeSnip: "Sukuria rastrą, kuris vienu metu rodo vientiso paviršiaus padėtį (kryptį) ir nuolydį (statumą), kurį atspindi skaitmeninis aukščių modelis.",
		aspectSlopeDesc: "Padėties nuolydžio funkcija sukuria rastro sluoksnį, kuris vienu metu rodo paviršiaus padėtį ir nuolydį. Padėtis identifikuoja maksimalų krypties žemyn pokytį iš kiekvieno pikselio kaimyninių pikselių link. Padėtimi gali būti laikoma nuolydžio kryptis. Išvesties rastro reikšmės bus padėties kryptys, atvaizduojamos skirtingomis spalvomis. Nuolydis nurodo kiekvieno skaitmeninio aukščių modelio (DEM) pikselio aukščio pokytį. Nuolydis nurodo paviršiaus statumą ir yra simbolizuojamas trimis klasėmis, kurios atvaizduojamos naudojant spalvos sodrumą (ryškumą).<div><br/> Pikselių reikšmės išvesties nuolydžio-krypties rastre nurodo krypties ir nuolydžio santykį. Pikseliai, kurių reikšmės yra mažesnės nei 20, laikomi plokščiais ir vaizduojami pilki. Krypties-nuolydžio reikšmės nuo 21 rodomos skirtinga sodrumo spalva: nuo 21 iki 30 —mažo nuolydžio sodrumas, nuo 31 iki 40—vidutinio nuolydžio sodrumas, daugiau nei 41—didelio nuolydžio sodrumas</div>",
		aspectName: "Kryptis",
		aspectSnip: "Rodo, kuria kryptimi nukreiptas pikselis, kai 0 yra į šiaurę ir kampai didėja pagal laikrodžio rodyklę iki 360.",
		aspectDesc: "Padėties funkcija identifikuoja maksimalų krypties žemyn pokytį iš kiekvienos gardelės kaimyninių gardelių link. Padėtimi gali būti laikoma nuolydžio kryptis. Išvesties rastro reikšmės bus padėties kryptys.<div><br/>Šios funkcijos įvestis yra įvesties rastras. Padėties funkcija dažnai taikoma skaitmeniniam aukščių modeliui (DEM). Pagal numatytuosius nustatymus padėtis vaizduojama pilkai. Galite įtraukti funkciją Paletė, kad nurodytumėte konkrečią spalvų schemą arba leistumėte mozaiką peržiūrinčiam asmeniui modifikuoti simbolizaciją naudojant savo spalvų schemą.</div>",
		tableName: "Atributų lentelė",
		tableSnip: "Naudoja lentelę duomenų rinkiniui pavadinti ir vizualizuoti. Lentelės stulpeliai yra atskirti kableliais: PixelValue, AttributeName, RedValue, GreenValue, BlueValue.",
		tableDesc: "Funkcija Atributų lentelė leidžia apibrėžti lentelę, kad būtų atvaizduojamas vieno kanalo mozaikos duomenų rinkinys arba rastro duomenų rinkinys. <div><br/>Tai praverčia, kai norite turėti vaizdus, klasifikuotus pagal žemės naudojimą, pvz., miško žemė, pelkės, dirbama žemė ir urbanizuota teritorija. Be to, jei jūsų lentelėje yra laukai, pavadinti raudona, žalia ir mėlyna, jų reikšmės bus naudojamos kaip spalvų paletės generuojant vaizdą.</div>",
		bandArithmeticName: "Kanalų aritmetiniai veiksmai",
		bandArithmeticSnip: "Apskaičiuoja indeksus, naudojant iš anksto nustatytas formules arba naudotojo nustatytą išraišką.",
		bandArithmeticDesc: "Funkcija Kanalų aritmetiniai veiksmai atlieka aritmetinę operaciją rastrinio duomenų rinkinio kanaluose. Galite pasirinkti iš anksto nustatytus algoritmus arba galite įvesti savo vienos eilutės formulę. Palaikomi šie operatoriai -,+,/,* ir vienvietis -.",
		thresholdName: "Dvinarės ribos",
		thresholdSnip: "Suskirsto vientisus duomenis į priekinį planą ir foną, minimizuodama kovariaciją tarp dviejų klasių.",
		thresholdDesc: "Kai rastriniam duomenų rinkiniui yra būdingas bimodalinis pasiskirstymas, ši funkcija sukuria naują rastrą, kuris atskiria duomenis į dvi skirtingas klases. Ji sukuria mažos reikšmę klasę, pateikiamą su juodais pikseliais, ir aukštos vertės reikšmę, pateikiamą su baltais pikseliais.",
		bitwiseAndName: "Bitwise And",
		bitwiseAndSnip: "Atlieka Bitwise And operaciją su dvinarėmis dviejų įvesties rastrų reikšmėmis.",
		bitwiseAndDesc: "Bitwise And atlieka Bitwise And operaciją su dvinarėmis dviejų įvesties rastrų reikšmėmis",
		bitwiseLeftShiftName: "Bitwise Left Shift",
		bitwiseLeftShiftSnip: "Atlieka Bitwise Left Shift operaciją su dvinarėmis dviejų įvesties rastrų reikšmėmis.",
		bitwiseLeftShiftDesc: "Bitwise Left Shift atlieka operaciją su dvinarėmis dviejų įvesties rastrų reikšmėmis.",
		bitwiseNotName: "Bitwise Not",
		bitwiseNotSnip: "Atlieka Bitwise Not (papildymo) operaciją su dvinarėmis dviejų įvesties rastrų reikšmėmis.",
		bitwiseNotDesc: "Funkcija atlieka Bitwise Not (papildymo) operaciją su dvinare įvesties rastro reikšme.",
		bitwiseOrName: "Bitwise Or",
		bitwiseOrSnip: "Atlieka Bitwise Or operaciją su dvinarėmis dviejų įvesties rastrų reikšmėmis.",
		bitwiseOrDesc: "Funkcija atlieka Bitwise Or operaciją su dvinarėmis dviejų įvesties rastrų reikšmėmis. ",
		bitwiseRightShiftName: "Bitwise Right Shift",
		bitwiseRightShiftSnip: "Atlieka Bitwise Right Shift operaciją su dvinarėmis dviejų įvesties rastrų reikšmėmis.",
		bitwiseRightShiftDesc: "Funkcija atlieka Bitwise Right Shift operaciją su dvinarėmis dviejų įvesties rastrų reikšmėmis.",
		bitwiseXorName: "Bitwise Xor",
		bitwiseXorSnip: "Atlieka Bitwise eXclusive Or operaciją su dvinarėmis dviejų įvesties rastrų reikšmėmis.",
		bitwiseXorDesc: "Funkcija atlieka Bitwise eXclusive Or operaciją su dvinarėmis dviejų įvesties rastrų reikšmėmis.",
		booleanAndName: "Boolean And",
		booleanAndSnip: "Atlieka Boolean And operaciją su gardelės dviejų įvesties rastrų reikšmėmis. Jei abi įvesties reikšmės yra teisingos (ne nulis), išvesties reikšmė yra 1. Jei viena arba abi įvestys yra neteisingos (nulis), išvesties reikšmė yra 0.",
		booleanAndDesc: "Funkcija atlieka Boolean And operaciją su dvinarėmis dviejų įvesties rastrų reikšmėmis. Jei abi įvesties reikšmės yra teisingos (ne nulis), išvesties reikšmė yra 1. Jei viena arba abi įvesties reikšmės yra neteisingos (nulis), išvesties reikšmė yra 0. ",
		booleanNotName: "Boolean Not",
		booleanNotSnip: "Atlieka Boolean Not (papildymo) operaciją su gardelės įvesties rastro reikšmėmis. Jei įvesties reikšmės yra teisingos (ne nulis), išvesties reikšmė yra 0. Jei įvesties reikšmės yra neteisingos (nulis), išvestis yra 1.",
		booleanNotDesc: "Funkcija atlieka Boolean Not (papildymo) operaciją su pikselių įvesties rastro reikšmėmis. Jei įvesties reikšmės yra teisingos (ne nulis), išvesties reikšmė yra 0. Jei įvesties reikšmės yra neteisingos (nulis), išvesties reikšmė yra 1.",
		booleanOrName: "Boolean Or",
		booleanOrSnip: "Atlieka Boolean Or operaciją su gardelės dviejų įvesties rastrų reikšmėmis. Jei viena arba abi įvesties reikšmės yra teisingos (ne nulis), išvesties reikšmė yra 1. Jei abi įvesties reikšmės yra neteisingos (nulis), išvestis yra 0.",
		booleanOrDesc: "Funkcija atlieka Boolean Or operaciją su gardelės dviejų įvesties rastrų reikšmėmis. Jei viena arba abi įvesties reikšmės yra teisingos (ne nulis), išvesties reikšmė yra 1. Jei abi įvesties reikšmės yra neteisingos (nulis), išvesties reikšmė yra 0.",
		booleanXorName: "Loginis Xor",
		booleanXorSnip: "Atlieka Boolean eXclusive Or operaciją su gardelės dviejų įvesties rastrų reikšmėmis. Jei viena įvesties reikšmė yra teisinga (ne nulis), o kita yra neteisinga (nulis), išvestis 1. Jei abi įvesties reikšmės yra teisingos arba abi neteisingos, išvestis yra 0.",
		booleanXorDesc: "Funkcija atlieka Boolean eXclusive Or operaciją su gardelės dviejų įvesties rastrų reikšmėmis. Jei viena įvesties reikšmė yra teisinga (ne nulis), o kita reikšmė yra neteisinga (nulis), išvesties reikšmė yra 1. Jei abi įvesties reikšmės yra teisingos arba abi neteisingos, išvesties reikšmė yra 0.",
		bufferedRasterName: "Buferizuotas",
		bufferedRasterSnip: "Buferizuoja paskutinį pasiektą pikselių bloką (-us).",
		bufferedRasterDesc: "Buferizuota funkcija naudojama sudėtingų funkcijų grandinių našumo optimizavimui. Ji saugo išvestį prieš ją einančios funkcijų grandinės dalies atmintyje. <div><br/>Įterpkite šią funkciją funkcijų rengyklėje, kur norite išsaugoti išvestį.</div>",
		rasterCalculatorName: "Skaičiuotuvas",
		rasterCalculatorSnip: "Apskaičiuoja rastrą iš rastro pagrindo matematinės išraiškos.",
		rasterCalculatorDesc: "Skaičiuotuvo funkcija suteikia galimybę kurti bei vykdyti išraiškas ir jas įtraukti į funkcijų grandines.",
		cellStatisticsName: "Gardelės statistika",
		cellStatisticsSnip: "Apskaičiuoja kiekvienos gardelės statistiką iš kelių rastrų. Galima statistika: dauguma, maksimumas, vidurkis, mediana, minimumas, mažuma, procentilis, intervalas, standartinis nuokrypis, suma ir įvairovė.",
		cellStatisticsDesc: "Ši funkcija apskaičiuoja kelių rastrų statistiką pikselių lygmeniu. Galimos statistinės kategorijos: dauguma, maksimumas, vidurkis, mediana, minimumas, mažuma, intervalas, standartinis nuokrypis, suma ir įvairovė.",
		classifyName: "Klasifikavimas",
		classifySnip: "Priskiria kiekvieną pikselį klasei. Įtraukia papildomus duomenis, pvz., susegmentuotą vaizdą.",
		classifyDesc: "Rastrų funkcija klasifikuoja rastrinių duomenų rinkinį pagal Esri klasifikatoriaus apibrėžimo (.ecd) failą ir rastrinių duomenų rinkinio įvestis. Funkcijai Klasifikavimas naudojamame .ecd faile yra visa informacija apie konkretų duomenų rinkinį bei klasifikatorių ir šis failas sugeneruojamas klasifikavimo mokymo įrankių, pvz., Train Support Vector Machine arba Train Random Trees.",
		clipName: "Iškirpimas",
		clipSnip: "Nustato rastro kraštus pagal koordinates arba kitą duomenų rinkinį.",
		clipDesc: "Ši funkcija apkarpo rastrą pagal keturkampį šabloną, atsižvelgdama į nurodytus kraštus arba pagal įvesties poligono elementų klasės šabloną. Taikant iškarpos formą gali būti apkirpti rastro kraštai arba iškirpta sritis rastro viduje.",
		colorspaceConversionName: "Spalvų modelio konvertavimas",
		colorspaceConversionSnip: "Konvertuoja rastrą iš RGB į HSV arba atvirkščiai.",
		colorspaceConversionDesc: "Spalvų modelio konvertavimo funkcija konvertuoja vaizdo spalvų modelį iš atspalvio, sodrumo ir reikšmės (HSV) į raudoną, žalią ir mėlyną (RGB) arba atvirkščiai.<div><br/>Šią funkciją galima naudoti mozaikos duomenų rinkinyje.</div>",
		colormapToRGBName: "Paletė į RGB",
		colormapToRGBSnip: "Konvertuoja vieno kanalo rastrą su palete į trijų kanalų (raudono, žalio ir mėlyno) rastrą.",
		colormapToRGBDesc: "Ši funkcija konvertuoja vieno kanalo rastrą su palete į trijų kanalų (raudono, žalio ir mėlyno) rastrą.<div><br/>Ši funkcija praverčia, kai reikia sukurti trijų kanalų rastrą iš vieno kanalo rastro su susieta spalvų palete. Paletės reikšmės bus naudojamos kiekvienam raudonam, žaliam ir mėlynam kanalui sukurti. Šią funkciją galima naudoti mozaikos duomenų rinkinyje.</div>",
		colormapName: "Paletė",
		colormapSnip: "Pakeičia pikselių reikšmes, kad rastriniai duomenys būtų rodomi kaip pilkas arba raudonas, žalias, mėlynas (RGB) vaizdas, atsižvelgiant į paletę arba spalvų gamą.",
		colormapDesc: "Paletės funkcija yra rastrinių duomenų atvaizdavimo būdas. Ji transformuoja pikselių reikšmes, kad rastriniai duomenys būtų rodomi kaip pilkas arba RGB spalvų vaizdas pagal spalvų schemą arba konkrečias paletės failo spalvas. Paletę galite naudoti analizuojamų duomenų atvaizdavimui, pvz., klasifikuotam vaizdui, arba vaizduodami topografinį žemėlapį (arba indeksuotą nuskaitytą spalvotą vaizdą).<div><br/>Paletes sudaro reikšmių rinkiniai, susieti su spalvomis, naudojamomis nuosekliai vaizduoti vieno kanalo rastrą tomis pačiomis spalvomis. Kiekviena pikselio reikšmė yra susieta su spalva, apibrėžta kaip RGB reikšmių rinkinys. Paletės gali palaikyti bet kokį ryškumą bitais, išskyrus su slankiuoju kableliu. Jos taip pat palaiko teigiamas bei neigiamas reikšmes ir jose gali būti trūkstamų paletės reikšmių. Atvaizduojant duomenų rinkinį su palete, kurioje trūksta reikšmių, trūkstamų reikšmių pikseliai nebus rodomi.</div>",
		complexName: "Kompleksas",
		complexSnip: "Nuskaito sudėtingų skaičių stiprumą.",
		complexDesc: "Ši funkcija apskaičiuoja sudėtingų reikšmių stiprumą.<div><br/>Ši funkcija paprastai naudojama su RADAR vaizdais, kurie turi sudėtingą duomenų tipą. Ją galima naudoti mozaikos duomenų rinkinyje.</div>",
		compositeBandName: "Sudėtiniai kanalai",
		compositeBandSnip: "Sujungia kelis duomenų rinkinius į vieno kanalo rastrą.",
		compositeBandDesc: "Funkcija Sudėtiniai kanalai leidžia suderinti rastrus ir suformuoti kelių kanalų vaizdus.",
		conName: "Konstanta",
		conSnip: "Atlieka sąlyginę  If, Then, Else operaciją Kai naudojamas operatorius Con, paprastai turi būti sujungtos bent dvi funkcijos, kurių viena pateikia kriterijų, o antroji yra operatorius Con, kuris naudoja kriterijus ir nurodo, kuri išvestis yra teisinga, o kuri neteisinga.",
		conDesc: "Funkcija Con nustato išvesties rastro pikselius pagal kiekvieno įvesties pikselio jei \\ antraip įvertinimą. Ji pateikia pikselių reikšmes iš teisingo rastro, jei sąlygos įvertinimas yra teisingas (1) arba pateikia pikselių reikšmes iš neteisingo rastro, jei sąlygos įvertinimas yra neteisingas (0). Šį kriterijų nurodo loginės matematinės funkcijos išvestis, kuri bus įvesties rastras.",
		constantName: "Pastovus",
		constantSnip: "Sukuria virtualų rastrą su vieno pikselio reikšme.",
		constantDesc: "Ši funkcija sukuria virtualų rastrą su vieno pikselio reikšme, kurią galima naudoti rastrų funkcijų šablonams ir mozaikų duomenų rinkiniams apdoroti.<div><br/>Konstantos reikšmė yra naudojama kiekvienam rastro pikseliui.</div>",
		contourName: "Kontūras",
		contourSnip: "Sukuria kontūro linijas.",
		contourDesc: "Funkcija Kontūras sugeneruoja kontūro linijas, sujungdamas taškus tame pačiame aukštyje iš rastrinio paviršiaus duomenų rinkinio. Kontūrai yra izolinijos, sukurtos, kaip rastrai vizualizacijai. Ši funkcija yra nepaprastai galinga dėl šių pagrindinių savybių: greitai ir dinamiškai generuojami net labai didelių duomenų rinkinių, pvz., pasaulio aukščio, kontūrai; kontūrai gali būti užapvalinti, kad atrodytų kartografiškai gražesni, bet išliktų tikslūs; galimas dinaminis kontūrų intervalo valdymas; išvesties parinktis sudaro kontūro linijos, indekso kontūrai ir užpildyti kontūrai.<div><br/>Kontūro sluoksnio kūrimas kaip rastrinio produkto yra naudingas įvairioms paskirtims, nes kontūrus galima užkloti ant žemėlapio ir pateikti informaciją apie paviršių, neuždengiant pagrindo duomenų. Jie naudingi inžinerijoje, žemės ūkyje, vandentvarkoje ir kitose srityse.</div>",
		contrastBrightnessName: "Kontrastas ir ryškumas",
		contrastBrightnessSnip: "Koreguoja rastro kontrastą ir ryškumą.",
		contrastBrightnessDesc: "Funkcija Kontrastas ir ryškumas pagerina rastrinių duomenų išvaizdą, modifikuodama vaizdo ryškumą ir kontrastą. Ryškumas padidina bendrą vaizdo šviesumą—, pvz., pašviesina tamsesnes spalvas ir pabalina šviesias spalvas—, o kontrastas koreguoja skirtumą tarp tamsiausių ir šviesiausių spalvų.<div><br/>Ši funkcija pakeičia pikselių reikšmes; dėl to šią funkciją reikėtų naudoti, norint pagerinti duomenų išvaizdą, o ne ketinant panaudoti duomenis analizei, kuriai reikia neapdorotų pikselių reikšmių. Ši funkcija praverčia publikuojant duomenis kaip vaizdų paslaugą, kurią galima naudoti aplikacijose, bet, kuri neleidžia keisti vaizdų kontrasto ir ryškumo, arba siekiant užtikrinti, kad vaizdai būtų rodomi taikant jūsų pasirinktus nustatymus.</div>",
		convolutionName: "Supynimas",
		convolutionSnip: "Taiko filtrą vaizdui ryškinti, sulieti, aptikti briaunas, lyginti arba rastro perėjimui sukurti.",
		convolutionDesc: "Funkcija Konversija filtruoja pikselių reikšmes vaizde ir ją galima naudoti vaizdui paryškinti, vaizdui sulieti, vaizdo briaunoms aptikti arba kitiems branduoliu paremtiems patobulinimams. Filtrai naudojami rastrinio vaizdo kokybei gerinti, šalinant klaidingus duomenis arba taisant duomenų ypatybes. Šie konversijų filtrai taikomi judančiam, persidengiančiam branduoliui (langui arba sričiai), pvz., 3 x 3. Konversijos filtrai veikia apskaičiuodami pikselių reikšmę pagal kaimyninius pikselius.",
		corridorName: "Koridorius",
		corridorSnip: "Apskaičiuoja dviejų suminių rastrų suminių sąnaudų sumą.",
		corridorDesc: "Funkcija Koridorius apskaičiuoja dviejų suminių sąnaudų rastrų suminių sąnaudų sumą. Nors įvesčiai galima naudoti bet kuriuos du rastrus, kad rezultatas būtų reikšmingas, jie turėtų būti nepakeisti sąnaudų išvesties rastrai. Įvesčių eilės tvarka nesvarbi.",
		cosHName: "CosH",
		cosHSnip: "Skaičiuoja hiperbolinį rastro gardelių kosinusą.",
		cosHDesc: "Funkcija skaičiuoja hiperbolinį rastro pikselių kosinusą.",
		cosName: "Cos",
		cosSnip: "Skaičiuoja rastro gardelės kosinusą.",
		cosDesc: "Funkcija skaičiuoja rastro pikselių kosinusą.",
		costAllocationName: "Sąnaudų priskyrimas",
		costAllocationSnip: "Apskaičiuoja kiekvienos gardelės mažiausiai sąnaudų eikvojantį šaltinį, atsižvelgdama į mažiausias sumines sąnaudas sąnaudų paviršiuje.",
		costAllocationDesc: "Funkcija Sąnaudų priskyrimas apskaičiuoja kiekvienos gardelės mažiausiai sąnaudų eikvojantį šaltinį, atsižvelgdama į mažiausias sumines sąnaudas sąnaudų paviršiuje.",
		costBackLinkName: "Sąnaudų grąžinimo sąsaja",
		costBackLinkSnip: "Apibrėžia kaimyninę gardelę, kuri yra greta mažiausių suminių sąnaudų kelio į mažiausių sąnaudų šaltinį.",
		costBackLinkDesc: "Funkcija Sąnaudų grąžinimo sąsaja apibrėžia kaimyninę gardelę, kuri yra greta mažiausių suminių sąnaudų kelio į mažiausių sąnaudų šaltinį.<div><br/>Grąžinimo sąsajos rastrą sudaro reikšmės nuo nulio iki aštuonių, kurios apibrėžia kryptį arba nurodo kitą kaimyninę gardelę (paskesnę gardelę) mažiausių suminių sąnaudų kelyje nuo gardelės iki jos mažiausių sąnaudų šaltinio. Jei kelias turi vesti į dešinę kaimyninę gardelę, jai bus priskirta reikšmė 1, jei įstrižai į dešinę apatinę gardelę – 2 ir taip toliau pagal laikrodžio rodyklę. Reikšmė 0 palikta šaltinio gardelėms.</div>",
		costDistanceName: "Sąnaudų atstumas",
		costDistanceSnip: "Apskaičiuoja kiekvienos gardelės mažiausių suminių sąnaudų atstumą nuo arba iki mažiausių sąnaudų šaltinio sąnaudų paviršiuje.",
		costDistanceDesc: "Funkcija Sąnaudų atstumas apskaičiuoja kiekvienos gardelės mažiausių suminių sąnaudų atstumą nuo arba iki mažiausių sąnaudų šaltinio sąnaudų paviršiuje.",
		costPathName: "Sąnaudų kelias",
		costPathSnip: "Apskaičiuoja mažiausių sąnaudų kelią nuo šaltinio iki tikslo.",
		costPathDesc: "Funkcija Sąnaudų kelias apskaičiuoja mažiausių sąnaudų kelią nuo šaltinio iki tikslo.<div><br/>Ši funkcija sugeneruoja išvesties rastrą, kuris nurodo mažiausių sąnaudų kelią arba kelius nuo pasirinktų vietų iki artimiausios šaltinio gardelės suminių sąnaudų paviršiuje sąnaudų atstumo atžvilgiu.</div>",
		curvatureName: "Išlinkis",
		curvatureSnip: "Apskaičiuoja rastro paviršiaus išlinkį, pasirinktinai įtraukiant profilio ir plano išlinkį.",
		curvatureDesc: "Funkcija Išlinkis rodo nuolydžio formą arba išlinkį. Dalis paviršiaus gali būti įdubęs arba iškilęs; tai galima sužinoti pagal išlinkio reikšmę. Išlinkis skaičiuojamas apskaičiuojant antrąjį paviršiaus vedinį.<div><br/>Funkcijos Išlinkis išvestis gali būti naudojama apibūdinti fizines baseino ypatybes, siekiant suprasti erozijos ir nutekėjimo procesus. Išlinkio reikšmę galima naudoti dirvos erozijos modeliui ir vandens pasiskirstymui teritorijoje nustatyti. Profilio išlinkis turi įtakos tėkmės greitėjimui arba lėtėjimui, todėl turi įtakos ir erozijai bei nusėdimui. Plano išlinkis turi įtakos tėkmės išsiskyrimui ir susitelkimui.</div>",
		divideName: "Dalinimas",
		divideSnip: "Dalina dviejų rastrų reikšmes gardelių lygmeniu.",
		divideDesc: "Funkcija Dalinimas dalina dviejų rastrų reikšmes pikselių lygmeniu.",
		elevationVoidFillName: "Paviršiaus tuštumos užpildymas",
		elevationVoidFillSnip: "Sukuria pikselius, kur yra skylių paviršiaus duomenyse.",
		elevationVoidFillDesc: "Funkcija Paviršiaus tuštumos užpildymas naudojama pikseliams kurti, kai paviršiuje yra skylių.<div><br/>Tuštumos susidaro, kai rastro pikselio vaizduojamoje srityje nesurenkami taškai. Tuštumas dažnai lemia vandens telkiniai, klasės tipo pasirinkimas arba išimtys. Tuštumos užpildymas paprastai naudojamas generuojant žemės paviršių.</div>",
		equalToName: "Lygu",
		equalToSnip: "Atlieka santykinę dviejų įvesčių operaciją Lygu gardelių lygmeniu. Pateikia gardelių reikšmę 1, jei pirmasis rastras prilygsta antrajam ir gardelių reikšmę 0, jei jie nelygūs.",
		equalToDesc: "Funkcija atlieka dviejų rastrų operaciją Lygu pikselių lygmeniu. Ji pateikia pikselių reikšmę 1, jei pirmasis rastras prilygsta antrajam ir pikselių reikšmę 0, jei jie nelygūs.",
		eucAllocationName: "Euklido priskyrimas",
		eucAllocationSnip: "Apskaičiuoja kiekvienos gardelės artimiausią šaltinį pagal Euklido atstumą.",
		eucAllocationDesc: "Funkcija Euklido priskyrimas apskaičiuoja kiekvienos gardelės artimiausią šaltinį pagal Euklido atstumą.",
		eucDirectionName: "Euklido kryptis",
		eucDirectionSnip: "Apskaičiuoja kiekvienos gardelės kryptį laipsniais link artimiausio šaltinio.",
		eucDirectionDesc: "Funkcija Euklido kryptis apskaičiuoja kiekvienos gardelės kryptį laipsniais link artimiausio šaltinio. <div><br/>Kryptis skaičiuojama nuo kiekvienos gardelės centro iki artimiausios šaltinio gardelės centro. Reikšmių diapazonas yra nuo 0 laipsnių iki 360 laipsnių, pasiliekant 0 šaltinio gardelėms. Rytų kryptis (dešinėn) yra 90 ir didėja pagal laikrodžio rodyklę (180 yra pietūs, 270 yra vakarai, o 360 yra šiaurė).</div>",
		eucDistanceName: "Euklido atstumas",
		eucDistanceSnip: "Apskaičiuoja kiekvienos gardelės Euklido atstumą iki artimiausio šaltinio.",
		eucDistanceDesc: "Funkcija Euklido atstumas apskaičiuoja kiekvienos gardelės Euklido atstumą iki artimiausio šaltinio.",
		exp10Name: "Exp10",
		exp10Snip: "Skaičiuoja rastro gardelių 10 pagrindo eksponentinę funkciją.",
		exp10Desc: "Funkcija Exp 10 skaičiuoja rastro pikselių 10 pagrindo eksponentinę funkciją.",
		exp2Name: "Exp2",
		exp2Snip: "Skaičiuoja rastro gardelių 2 pagrindo eksponentinę funkciją.",
		exp2Desc: "Ši funkcija skaičiuoja rastro pikselių 2 pagrindo eksponentinę funkciją.",
		expName: "Exp",
		expSnip: "Skaičiuoja rastro gardelių e pagrindo eksponentinę funkciją.",
		expDesc: "Ši funkcija skaičiuoja rastro pikselių e pagrindo eksponentinę funkciją.",
		extractBandName: "Kanalų išskyrimas",
		extractBandSnip: "Nurodo, su kuriais kanalais dirbti, naudojant kelių kanalų duomenų rinkinius.",
		extractBandDesc: " Funkcija Kanalų išskyrimas leidžia išskirti vieną ar daugiau kanalų arba pakeisti kanalų tvarką kelių kanalų rastriniame duomenų rinkinyje.<div><br/>Funkciją Kanalų išskyrimas galima naudoti prieš kitas funkcijas, pvz., Aritmetika, kad galėtumėte valdyti, kurie kanalai bus naudojami kaip kitos funkcijos įvestis.</div>",
		fillName: "Užpildas",
		fillSnip: "Užpildo įdubas paviršiaus rastre, kad pašalintų smulkius duomenų netikslumus.",
		fillDesc: "Funkcija Užpildas randa ir užpildo įdubas ir viršūnes aukščio paviršiaus rastre, kad pašalintų duomenų netikslumus. Funkcija užpildo kartotinį procesą, kol visos įdubos užpildomos nurodytose Z ribose.<div><br/>Kai aukščio paviršius sukuriamas, naudojant Ortho Mapping įrankius arba kitas priemones, duomenyse pasitaiko smulkių, bet reikšmingų klaidų, kurias sudaro įdubos ir viršūnės. Fotogrametrijoje įdubos ir viršūnės dažnai vadinamos duobėmis ir smaigais. Kadangi paviršiaus duomenys dažnai naudojami modeliavimui, pvz., hidrologiniam modeliavimui, svarbu ištaisyti įdubų ir viršūnių klaidas atsižvelgiant į aplinkinius duomenis.</div>",
		floatName: "Realus skaičius",
		floatSnip: "Konvertuoja rastro kiekvienos gardelės reikšmę į slankiojo kablelio išraišką.",
		floatDesc: "Funkcija Realus skaičius konvertuoja rastro kiekvieno pikselio reikšmę į slankiojo kablelio išraišką.",
		flowAccumulationName: "Tėkmės sankaupa",
		flowAccumulationSnip: "Sukuria suminės tėkmės rastrą į kiekvieną gardelę. Pasirinktinai galima taikyti svorio faktorių.",
		flowAccumulationDesc: "Funkcija Tėkmės sankaupa sukuria suminės tėkmės rastrą į kiekvieną pikselį, kaip apibrėžta sumuojant visų pikselių, tekančių į kiekvieną nuolydžio pikselį, svorį. Jei nepateikiamas joks svorio rastras, kiekvienam pikseliui suteikiamas svoris 1, o pikselių reikšmė išvesties rastre yra pikselių, tekančių į kiekvieną pikselį, skaičius.<div><br/>Išvesties pikseliai su didele tėkmės sankaupa yra koncentruotos tėkmės sritys ir gali būti naudojamos šaltinio kanalams nustatyti. Išvesties pikseliai, kurių tėkmės sankaupa yra nulis, yra vietinės topografinės aukštumos ir gali būti naudojami keteroms nustatyti.</div>",
		flowDirectionName: "Tėkmės kryptis",
		flowDirectionSnip: "Sukuria tėkmės krypties rastrą iš kiekvienos gardelės į stačiausio nuolydžio kaimyninį elementą.",
		flowDirectionDesc: "Vienas iš būdų nustatyti hidrologines paviršiaus charakteristikas yra galimybė nustatyti tėkmės kryptį iš kiekvieno rastro pikselio. Rastrų funkcija Tėkmės kryptis įvertina paviršių kaip įvestį ir sukuria tėkmės krypties rastrą iš kiekvieno pikselio į stačiausio nuolydžio kaimyninį elementą. Funkcija Tėkmės kryptis palaiko tris tėkmės modeliavimo metodus: D8 (aštuonios kryptys), kelių tėkmių kryptis (MFD) ir D-Infinity (DINF). ",
		flowDistanceName: "Tėkmės atstumas",
		flowDistanceSnip: "Kiekvienai gardelei apskaičiuoja minimalų horizontalų arba vertikalų nuolydžio atstumą iki gardelės (-ių) upėje arba šaltinyje, į kurią jos teka.",
		flowDistanceDesc: "Kiekvienam pikseliui funkcija apskaičiuoja minimalų horizontalų arba vertikalų nuolydžio atstumą iki pikselio (-ių) upėje arba šaltinyje, į kurį jie teka. Jei pateikiamas papildomas tėkmės krypties rastras, bus pasirinkta tik įvesties tėkmės krypties rastro nuolydžio kryptis (-ys). Išvestis yra tėkmės atstumo rastras.",
		focalName: "Židinio statistika",
		focalSnip: "Apskaičiuoja kiekvieno vaizdo pikselio židinio statistiką pagal apibrėžto židinio kaimynystę.",
		focalDesc: "Funkcija Židinio statistika apskaičiuoja kiekvieno vaizdo pikselio židinio statistiką pagal apibrėžto židinio kaimynystę.",
		geometricName: "Geometrinės funkcijos",
		geometricSnip: "Padidina duomenų rinkinio pozicijos tikslumą, atsižvelgdama į aukštį.",
		geometricDesc: "Funkcija Geometrinės funkcijos sukuria ortografiškai pataisytą vaizdą pagal jutiklių raišką ir paviršiaus modelį. Ji padidina duomenų rinkinio pozicijos tikslumą, atsižvelgdama į aukštį.",
		grayscaleName: "Pilki pustoniai",
		grayscaleSnip: "Konvertuoja kelių kanalų vaizdą į vieno kanalo pilkų pustonių vaizdą.",
		grayscaleDesc: "Ši funkcija konvertuoja kelių kanalų vaizdą į vieno kanalo pilkų pustonių vaizdą.<div><br/>Ši funkcija taiko nurodytus svorius kiekvienam įvesties kanalui ir normalizuoja išvesties vaizdą. Svoriai dažniausiai taikomi, nes kai kurių kanalų svarba skiriasi, atsižvelgiant į taikymą. Pavyzdžiui, mėlyname kanale yra daugiau triukšmo nei kituose kanaluose.</div>",
		greaterThanEqualName: "Daugiau nei arba lygu",
		greaterThanEqualSnip: "Atlieka santykinę dviejų įvesčių Daugiau nei arba lygu operaciją gardelių lygmeniu. Pateikia gardelių reikšmę 1, jei pirmasis rastras yra didesnis nei arba lygus antrajam rastrui, o jei ne – pateikia 0.",
		greaterThanEqualDesc: "Funkcija atlieka santykinę dviejų įvesčių Daugiau nei arba lygu operaciją pikselių lygmeniu. Ji pateikia pikselių reikšmę 1, jei pirmasis rastras yra didesnis nei arba lygus antrajam rastrui, ir pikselių reikšmę 0, jei pirmasis rastras nėra didesnis arba lygus antrajam rastrui.",
		greaterThanName: "Daugiau nei",
		greaterThanSnip: "Atlieka santykinę dviejų įvesčių Daugiau nei operaciją gardelių lygmeniu. Pateikia gardelių reikšmę 1, jei pirmasis rastras yra didesnis nei antrasis ir gardelių reikšmę 0, jei yra priešingai.",
		greaterThanDesc: "Funkcija atlieka dviejų įvesčių Daugiau nei operaciją pikselių lygmeniu. Pateikia pikselių reikšmę 1, jei pirmasis rastras yra didesnis nei antrasis rastras, ir pikselių reikšmę 0, jei pirmasis rastras nėra didesnis nei antrasis rastras.",
		heatIndexName: "Karščio indeksas",
		heatIndexSnip: "Atsižvelgia į aplinkos temperatūrą ir santykinį drėgnumą, ir pateikia jutiminę temperatūrą.",
		heatIndexDesc: "Ši funkcija apskaičiuoja jutiminę temperatūrą pagal aplinkos temperatūrą ir santykinį drėgnumą. Jutiminė temperatūra dažnai vadinama žmogaus kūno jaučiama temperatūra.<div><br/>Šis indeksas gali praversti skaičiuojant pavojus dėl sveikatos problemų, pvz., dėl raumenų mėšlungio, dehidratacijos, perkaitimo arba širdies smūgio karštomis ir drėgnomis dienomis. Kai santykinis drėgnumas yra didelis, jį vis sunkiau išgarinti kūno prakaitui, todėl žmonėms tampa sunkiau atsivėsinti savaime. Laibai aukštos temperatūros arba įspėjimų žemėlapiai dažnai sudaromi perklasifikuojant karščio indekso rezultatą į klases, kurios prasideda nuo patarimų ir baigiasi įspėjimais, atsižvelgiant į indekso reikšmę.</div>",
		hillshadeName: "Šešėlių rinkinys",
		hillshadeSnip: "Sukuria 3D paviršiaus vaizdą, atsižvelgdama į santykinę saulės padėtį, kad sukurtų vaizdo šešėlius.",
		hillshadeDesc: "Funkcija Šešėlių rinkinys sukuria pilką 3D paviršiaus vaizdą, atsižvelgdama į santykinę saulės padėtį, kad sukurtų vaizdo šešėlius. <div><br/>Šešėliavimas yra paviršiaus vaizdavimo technika, nustatoma pagal šviesos šaltinį ir nuolydį bei aukščio paviršiaus santykį. Tai kokybinis metodas topografijai vaizduoti ir nepateikia absoliučiųjų aukščio reikšmių. </div>",
		intName: "Int",
		intSnip: "Konvertuoja rastro kiekvienos gardelės reikšmę į sveikąjį skaičių, atmesdama ne dešimtaines dalis.",
		intDesc: "Funkcija Int konvertuoja rastro kiekvieno pikselio reikšmę į sveikąjį skaičių, atmesdama ne dešimtaines dalis.",
		interpolateIrregularDataName: "Interpoliuoti netaisyklingus duomenis",
		interpolateIrregularDataSnip: "Interpoliuoja iš taškų debesies arba netaisyklingų tinklelių.",
		interpolateIrregularDataDesc: "Kai kuriuose netCDF arba HDF duomenų rinkiniuose geografinė padėtis saugoma kaip netaisyklingai išdėstytų pikselių arba taškinių duomenų masyvai. Įtraukiant šiuos duomenų rinkinius į mozaikos duomenų rinkinį funkcija Interpoliuoti netaisyklingus duomenis pakeičia netaisyklingai išdėstytus duomenis, kad kiekvienas pikselis būtų vienodo dydžio ir būtų kvadratinis.<div><br/>Įtraukiant kintamuosius iš netCDF arba HDF į mozaikos duomenų rinkinį, ji automatiškai patikrins, ar duomenys yra išdėstyti taisyklingai. Jei jie išdėstyti netaisyklingai, funkcija Interpoliuoti netaisyklingus duomenis gali konvertuoti netaisyklingus duomenis į taisyklingai išdėstytą rastrą. Galima keisti interpoliacijos metodą ir netaisyklingų duomenų rastro interpoliavimo funkcijai naudojamą gardelės dydį. Jei rastro duomenys išdėstyti taisyklingais tarpais, interpoliavimas nebus taikomas ir duomenys bus nuskaitomi tokie, kokie yra.</div>",
		isNullName: "Yra Null",
		isNullSnip: "Nustato, kurios įvesties rastrų reikšmės yra NoData gardelių lygmeniu. Jei įvesties reikšmės yra NoData, pateikiama reikšmė 1, o ji nėra be duomenų, pateikiama gardelių reikšmė 0.",
		isNullDesc: "Funkcija Yra Null nustato, kurios įvesties rastro reikšmės yra NoData pikselių lygmeniu. Jei įvesties reikšmė yra be NoData, pateikiama reikšmė 1, o jei nėra NoData, pateikiama pikselių reikšmė 0.",
		kernelDensityName: "Branduolio tankis",
		kernelDensitySnip: "Apskaičiuoja vieneto stiprumo plotą pagal taško arba polilinijos ypatybes, naudodama branduolio funkciją, kad pritaikytų vienalytį kūginį paviršių kiekvienam taškui arba polilinijai.",
		kernelDensityDesc: "Ši funkcija apskaičiuoja vieneto stiprumo plotą pagal taško arba polilinijos ypatybes, naudodama branduolio funkciją, kad pritaikytų vienalytį kūginį paviršių kiekvienam taškui arba polilinijai.",
		keyMetadataName: "Pagrindiniai metaduomenys",
		keyMetadataSnip: "Nepaiso arba įterpia pagrindinius rastro metaduomenis į funkcijų grandinę.",
		keyMetadataDesc: "Ši funkcija suteikia galimybę įterpti arba nepaisyti pagrindinių rastro metaduomenų.<div><br/>Pagrindinių metaduomenų informacija naudojama padėti aplikacijai naudinga informacija, pvz., jutiklio pavadinimu, kanalų pavadinimais arba vaizdo debesų padengimu.</div>",
		shortestPathName: "Mažiausių sąnaudų kelias",
		shortestPathSnip: "Atlieka sąnaudų atstumo analizę pagal šaltinio ir atstumo įvestis, kuri naudojama mažiausių sąnaudų keliui iš šaltinio iki tikslo nustatyti.",
		shortestPathDesc: "Funkcija Mažiausių sąnaudų kelias apskaičiuoja mažiausių sąnaudų kelią nuo šaltinio iki tikslo. Mažiausias suminių sąnaudų atstumas apskaičiuojamas kiekvienam sąnaudų paviršiaus pikseliui iki artimiausio šaltinio. Ji sugeneruoja išvesties rastrą, kuris nurodo mažiausių sąnaudų kelią arba kelius nuo pasirinktų vietų iki artimiausios šaltinio pikselio suminių sąnaudų paviršiuje sąnaudų atstumo atžvilgiu.<div><br/>Kiekvienam nuskaitymo proceso metu aptiktam mažiausių sąnaudų keliui priskiriama reikšmė. Sąnaudų kelio šaltinio rastro pabaigos pikseliui suteikiama reikšmė 1. Pirmasis kelias gauna reikšmę 3, antrasis – 4 ir t. t. Kai keli keliai susilieja ir likusį atstumą tęsiasi iki šaltinio tuo pačiu maršrutu, segmentui, kuriame du keliai tęsiasi kartu, priskiriama reikšmė 2. Susijungusių kelių daliai negalima priskirti vieno iš kelių reikšmės, nes susijungusių kelių dalis priklauso abiems maršrutams.</div>",
		lessThanEqualName: "Mažiau negu arba lygu",
		lessThanEqualSnip: "Atlieka santykinę dviejų įvesčių Mažiau nei arba lygu operaciją gardelių lygmeniu. Pateikia gardelių reikšmę 1, jei pirmasis rastras yra mažesnis nei arba lygus antrajam rastrui, o jei ne – pateikia 0.",
		lessThanEqualDesc: "Funkcija atlieka dviejų įvesčių Mažiau nei arba lygu operaciją pikselių lygmeniu. Ji pateikia pikselių reikšmę 1, jei pirmasis rastras yra mažesnis nei arba lygus antrajam rastrui, ir reikšmę 0, jei jis nėra mažesnis arba lygus antrajam rastrui.",
		lessThanName: "Mažiau nei",
		lessThanSnip: "Atlieka santykinę dviejų įvesčių Mažiau nei operaciją gardelių lygmeniu. Pateikia gardelių reikšmę 1, jei pirmasis rastras yra mažesnis nei antrasis rastras, o jei ne – pateikia 0.",
		lessThanDesc: "Funkcija atlieka dviejų įvesčių Mažiau nei operaciją pikselių lygmeniu. Ji pateikia pikselių reikšmę 1, jei pirmasis rastras yra mažesnis nei antrasis rastras, ir reikšmę 0, jei jis nėra mažesnis nei antrasis rastras.",
		lnName: "Ln",
		lnSnip: "Skaičiuoja rastro gardelių natūrinį logaritmą (pagal e).",
		lnDesc: "Funkcija skaičiuoja Ln rastro kiekvieno pikselio natūrinį logaritmą (pagal e).",
		log10Name: "Log10",
		log10Snip: "Skaičiuoja rastro gardelių 10 pagrindo logaritmą.",
		log10Desc: "Funkcija Log 10 skaičiuoja rastro kiekvieno pikselio 10 pagrindo logaritmą.",
		log2Name: "Log2",
		log2Snip: "Skaičiuoja rastro gardelių 2 pagrindo logaritmą.",
		log2Desc: "Funkcija Log 2 skaičiuoja rastro kiekvieno pikselio 2 pagrindo logaritmą.",
		lookupName: "Paieška",
		lookupSnip: "Sukuria naują rastrą ieškodama reikšmių kitame įvesties rastro lentelės laukelyje.",
		lookupDesc: "Funkcija sukuria naują rastrą ieškodama reikšmių kitame įvesties rastro lentelės laukelyje.",
		mlClassifyName: "ML klasifikacija",
		mlClassifySnip: "Klasifikuoja vaizdus pagal pikselius. Įvairūs pikseliai priskiriami ypatybei, atsižvelgiant į didžiausią pikselių dalį.",
		mlClassifyDesc: "Funkcija ML klasifikacija leidžia atlikti rastro duomenų rinkinio arba mozaikos duomenų rinkinio prižiūrimą klasifikaciją, naudojant maksimalios tikimybės klasifikacijos algoritmą. Šiai funkcijai reikalingas klasifikacijos parašo failas.",
		maskName: "Kaukė",
		maskSnip: "Nustato reikšmes, kurių nenorite rodyti.",
		maskDesc: "Ši rastro funkcija nustato reikšmes, kurių nenorite rodyti savo rastre. Naudodami Kaukės funkciją, nurodote bent vieną NoData reikšmę arba tinkamų pikselių reikšmių intervalą. ",
		minusName: "Minus",
		minusSnip: "Atima antrosios įvesties rastro reikšmę iš pirmosios įvesties rastro reikšmės gardelių lygmeniu.",
		minusDesc: "Funkcija Minus atima antrosios įvesties rastro reikšmę iš pirmosios įvesties rastro reikšmės pikselių lygmeniu.",
		modName: "Mod",
		modSnip: "Aptinka pirmojo rastro liekaną (modulį), kai dalinama iš antrojo rastro gardelių lygmeniu.",
		modDesc: "Funkcija Mod aptinka pirmojo rastro liekaną (modulį), kai dalinama iš antrojo rastro pikselių lygmeniu. Įvesčių tvarka yra svarbi ir turi įtakos išvesties rezultatui.",
		mosaicRastersName: "Mozaikos rastrai",
		mosaicRastersSnip: "Sujungia keletą rastrinių duomenų rinkinių ir sukuria vieną duomenų rinkinį.",
		mosaicRastersDesc: "Funkcija Mozaikos rastrai sukuria mozaikos vaizdą iš kelių vaizdų. Jei vaizdai persidengia, galimi keli būdai pasirinkti, kuriuos vaizdus rodyti.",
		ndviColorizedName: "NDVI atvaizdavimas",
		ndviColorizedSnip: "Sukuria kelių kanalų duomenų rinkinį, kuris vaizduoja augmenijos būklę, atsižvelgiant į skirtumą tarp raudono ir artimojo infraraudonojo kanalo.",
		ndviColorizedDesc: "Funkcija NDVI atvaizdavimas pritaiko funkciją NDVI įvesties vaizdui ir panaudoja paletę arba spalvų gamą rezultatui rodyti.",
		ndviName: "NDVI",
		ndviSnip: "Apskaičiuoja normalizuotą augmenijos skirtumo indeksą (NDVI).",
		ndviDesc: "NDVI funkcija sukuria vieno kanalo duomenų rinkinį, kuris vaizduoja augmenijos būklę, atsižvelgiant į skirtumą tarp raudono ir artimojo infraraudonojo kanalo.<div><br/>NDVI – standartizuotas indeksas, leidžiantis sugeneruoti vaizdą, rodantį žalumą, dar vadinama santykine biomase. Šis indeksas išnaudoja dviejų daugiakanalio rastrinio duomenų rinkinio kanalų charakteristikų kontrastą: chlorofilo pigmento sugertį raudonųjų spindulių juostoje ir didelę augalų medžiagų atspindėjimo gebą artimųjų infraraudonųjų spindulių (NIR) juostoje. Itin mažos arba neigiamos NDVI reikšmės atspindi sritis be jokios augmenijos, pvz., debesis, vandenį arba sniegą. Labai žemos reikšmės atspindi sritis beveik be augmenijos, pvz., betoną, uolas arba plyną dirvą. Vidutinės reikšmės atspindi krūmokšnių sritis arba pievas. Didelės reikšmės atspindi miškingas sritis arba tankią augmeniją.</div>",
		negateName: "Paneigti",
		negateSnip: "Pakeičia įvesties rastro gardelių reikšmių ženklą (padaugina iš -1) gardelių lygmeniu.",
		negateDesc: "Funkcija Paneigti pakeičia įvesties rastro pikselių reikšmių ženklą (padaugina iš -1) pikselių lygmeniu. ",
		nibbleName: "Pusbaitis",
		nibbleSnip: "Pakeičia rastro gardeles pagal kaukę artimiausių kaimyninių elementų reikšmėmis.",
		nibbleDesc: "Funkcija Pusbaitis suteikia galimybę priskirti pasirinktoms rastro sritims artimiausio kaimyninio elemento reikšmę. Tai praverčia redaguojant rastro sritis, kurių duomenys gali būti klaidingi.",
		notEqualName: "Nelygu",
		notEqualSnip: "Atlieka santykinę dviejų įvesčių operaciją Nelygu gardelių lygmeniu. Pateikia gardelių reikšmę 1, jei pirmasis rastras yra nelygus antrajam rastrui, o jei lygus – pateikia 0.",
		notEqualDesc: "Funkcija atlieka santykinę dviejų įvesčių Nelygu operaciją pikselių lygmeniu. Ji pateikia pikselių reikšmę 1, jei pirmasis rastras yra nelygus antrajam rastrui, ir pikselių reikšmę 0, jei jis lygus antrajam rastrui.",
		pansharpeningName: "Panchromatinis išryškinimas",
		pansharpeningSnip: "Dirbtinai pagerina erdvinę daugiakanalio vaizdo raišką, suliedamas su didesnės raiškos panchromatiniu vaizdu.",
		pansharpeningDesc: "Funkcija Panchromatinis išryškinimas naudoja didelės raiškos panchromatinį vaizdą arba rastro kanalą suliejimui su mažos raiškos, daugiakanalio rastro duomenų rinkiniu, kad padidintų erdvinę daugiakanalio vaizdo raišką.<div><br/>Panchromatinio išryškinimo tikslas – kurti geresnės vaizdo kokybės vaizdus. Kadangi ši technika pakeičia daugiakanalio vaizdo radiometrines ir spektro charakteristikas, analitiniam nuotoliniam stebėjimui panchromatiniu būdu išryškintas vaizdas turi būti naudojamas kritiškai.</div>",
		pathAllocationName: "Kelio atstumo priskyrimas",
		pathAllocationSnip: "Apskaičiuoja kiekvienos gardelės mažiausių sąnaudų šaltinį pagal mažiausias sumines sąnaudas sąnaudų paviršiuje, tuo pačiu atsižvelgdama į paviršiaus atstumą ir horizontalių bei vertikalių sąnaudų veiksnius.",
		pathAllocationDesc: "Funkcija Kelio atstumo priskyrimas apskaičiuoja kiekvienos gardelės artimiausią šaltinį pagal mažiausias sumines sąnaudas sąnaudų paviršiuje, tuo pačiu atsižvelgdama į paviršiaus atstumą ir horizontalių ir vertikalių sąnaudų veiksnius.",
		pathBackLinkName: "Kelio atstumo atgalinė sąsaja",
		pathBackLinkSnip: "Nustato kaimyninę gardelę mažiausių suminių sąnaudų kelyje į mažiausių sąnaudų šaltinį, tuo pačiu atsižvelgdama į paviršiaus atstumą ir horizontalių bei vertikalių sąnaudų veiksnius.",
		pathBackLinkDesc: "Funkcija Kelio atstumo atgalinė sąsaja nustato kaimyninės gardelės mažiausių suminių sąnaudų kelyje iki artimiausio šaltinio kryptį, atsižvelgdama į paviršiaus atstumą ir horizontalių bei vertikalių sąnaudų veiksnius.",
		pathDistanceName: "Kelio atstumas",
		pathDistanceSnip: "Apskaičiuoja kiekvienos gardelės mažiausių suminių sąnaudų atstumą iki mažiausių sąnaudų šaltinio, tuo pačiu atsižvelgdama į paviršiaus atstumą ir horizontalių bei vertikalių sąnaudų veiksnius.",
		pathDistanceDesc: "Funkcija Kelio atstumas apskaičiuoja kiekvienos gardelės mažiausių sąnaudų atstumą iki artimiausio šaltinio, tuo pačiu atsižvelgdama į paviršiaus atstumą ir horizontalių bei vertikalių sąnaudų veiksnius.",
		plusName: "Plus",
		plusSnip: "Sudeda (sumuoja) dvejų rastrų reikšmes gardelių lygmeniu.",
		plusDesc: "Funkcija Sumavimas sudeda (susumuoja) dviejų rastrų reikšmes pikselių lygmeniu.",
		powerName: "Kėlimas laipsniu",
		powerSnip: "Pakelia rastro gardelių reikšmes kitame rastre esančios reikšmės laipsniu.",
		powerDesc: "Funkcija Kėlimas laipsniu pakelia rastro pikselių reikšmes kitame rastre esančios reikšmės laipsniu.",
		radarCalibrationName: "Radaro kalibravimas",
		radarCalibrationSnip: "Konvertuoja RADARSAT-2 atgalinę sklaidą.",
		radarCalibrationDesc: "Ši funkcija naudojama kalibruoti RADARSAT-2 vaizdams mozaikos duomenų rinkinyje arba kaip rastro produktą. Kalibravimas atliekamas radaro vaizduose, kad pikselių reikšmės būtų teisingas radaro atgalinės sklaidos atspindys.",
		rasterInfoName: "Rastro informacija",
		rasterInfoSnip: "Modifikuoja rastro ypatybes, pvz., raišką bitais, NoData reikšmes, gardelių dydį ir t. t.",
		rasterInfoDesc: "Rastro informacija atidaro dialogo langą su rastro duomenų rinkinio ypatybėmis, pvz., stulpelių ir eilučių skaičiumi, kanalų skaičiumi, pikselių tipu, aprėptimi ir koordinačių sistema. Galite redaguoti šias ypatybes, pasirinkdami rastro duomenų rinkinį, kurį naudosite kaip šabloną. ",
		rasterizeAttributesName: "Rasterizavimas pagal atributus",
		rasterizeAttributesSnip: "Papildo rastrą papildomais kanalais, išvestais iš išorinės lentelės nurodytų atributų reikšmių arba elementų paslaugos.",
		rasterizeAttributesDesc: "Funkcija Rasterizavimas pagal atributus papildo rastrą įtraukdama kanalus, išvestus iš nurodytų atributų reikšmių, iš išorinės lentelės arba elementų paslaugos. Taip pat galite nurodyti zonos rastrą ir susietos zonos ID, kad įgalintumėte paiešką pagal sritį.",
		rasterizeFeatureClassName: "Elementų rasterizavimas",
		rasterizeFeatureClassSnip: "Konvertuoja elementą į rastrą.",
		rasterizeFeatureClassDesc: "Ši funkcija konvertuoja poligonų, polilinijų ir taškų elementų klasės duomenis į rastrinį sluoksnį.<div><br/>Elementams priskiriamos pikselių reikšmės pagal elementų OBJECTID (numatytasis nustatymas). Taip pat pikselių reikšmės gali būti grįstos naudotojo nurodytu reikšmės lauku įvesties elemento atributų lentelėje.</div>",
		recastName: "Perdaryti",
		recastSnip: "Modifikuoja funkcijų grandinės parametrus mozaikos duomenų rinkinyje arba vaizdų paslaugoje. Funkcija dažnai naudojama su LAS duomenų rinkiniais, kad nereikėtų kurti atskiro mozaikos duomenų rinkinio skirtingiems paviršiaus vaizdavimo būdams.",
		recastDesc: "Funkcija Perdaryti naudojama dinamiškai modifikuoti funkcijos parametrą, naudojamą mozaikos duomenų rinkinyje arba vaizdų paslaugoje, fiziškai neišsaugant pakeitimų.",
		regionGroupName: "Regionų grupė",
		regionGroupSnip: "Kiekvienai įvesties gardelei įrašo prijungto regiono, kuriam priklauso gardelė, tapatybę. Kiekvienam regionui suteikiamas unikalus numeris.",
		regionGroupDesc: "Funkcija Regionų grupė kiekvienai įvesties gardelei įrašo prijungto regiono, kuriam priklauso gardelė, tapatybę. Kiekvienam regionui suteikiamas unikalus numeris.<div><br/>Pirmajam nuskaitytam regionui suteikiama reikšmė vienas, antrajam – du ir taip toliau, kol reikšmė suteikiama visiems regionams. Nuskaitoma iš kairės į dešinę, iš viršaus į apačią. Išvesties zonoms priskirtos reikšmės išdėstomos pagal jų nuskaitymo laiką.</div>",
		regionGrowName: "Regiono augimas",
		regionGrowSnip: "Augina regionus iš pradinių taškų.",
		regionGrowDesc: "Funkcija Regiono augimas grupuoja kaimyninius pikselius į grupes, atsižvelgiant į nurodytą spindulį nuo pradinio taško. Pikselių grupei arba objektui priskiriama nurodyta užpildymo reikšmė.",
		remapName: "Susieti iš naujo",
		remapSnip: "Pakeičia pikselių reikšmes priskirdama naujas reikšmes pikselių reikšmių intervalams arba naudodama išorinę lentelę.",
		remapDesc: "Funkcija Susieti iš naujo leidžia keisti arba perklasifikuoti rastrinių duomenų pikselių reikšmes. Tai galima padaryti nurodant pikselių reikšmių intervalą, kurį reikia susieti su išvesties pikselio reikšme, arba naudojant lentelę susieti pikselių reikšmes su išvesties pikselio reikšme.",
		reprojectName: "Perprojektuoti",
		reprojectSnip: "Modifikuoja rastro duomenų rinkinio, mozaikos duomenų rinkinio arba rastro elemento mozaikos duomenų rinkinyje projekciją. Ji gali pakeisti duomenis iki naujo gardelių dydžio ir nurodyti kilmę.",
		reprojectDesc: "Funkcija Perprojektuoti modifikuoja rastro duomenų rinkinio, mozaikos duomenų rinkinio arba rastro elemento mozaikos duomenų rinkinyje projekciją. Ji gali pakeisti duomenis iki naujo gardelių dydžio ir nurodyti kilmę.<div><br/>Funkciją Perprojektuoti galima naudoti kuriant talpyklą iš rastro arba mozaikos duomenų rinkinio, kurio nėra reikiamoje projekcijoje. Pavyzdžiui, kuriant talpyklos vaizdų paslaugą, kurią gali integruoti aplikacijos su kitomis talpyklos paslaugomis, svarbu, kad visos būtų toje pačioje projekcijoje. Tai paprastai būna Web Mercator projekcija. Kadangi mozaikos duomenų rinkinio negalima perprojektuoti, galite atlikti vieną iš dviejų veiksmų—sukurkite mozaikos duomenų rinkinį su nuoroda iš savo mozaikos duomenų rinkinio reikiamoje projekcijoje arba įtraukite funkciją Perprojektuoti į mozaikos duomenų rinkinio funkcijų grandinę. Kitas pavyzdys naudoja šią funkciją rastro elemente mozaikos duomenų rinkinyje. Naudojant funkciją Rastro podėlis derėtų įtraukti funkciją Perprojektuoti, kad podėlis būtų sukurtas naujoje projekcijoje. Rastro elementai mozaikos duomenų rinkinyje gali būti įtraukti į podėlį, kai reikia intensyviai apdoroti ir bandote publikuoti sparčią vaizdų paslaugą, neįtraukiant į podėlį visos vaizdų paslaugos.</div>",
		resampleName: "Matmenų keitimas",
		resampleSnip: "Pakeičia rastro gardelės dydį.",
		resampleDesc: "Funkcija Matmenų keitimas pakeičia gardelės dydį, matmenų keitimo tipą arba abu.<div><br/>Funkcija Matmenų keitimas naudojama tik su konkrečiais skaičiavimo reikalavimais; pvz., kai skaičiuojate vėją arba dabartinę dydžio kryptį, kuriai būtina mastelio keitimas pagal šaltinio raišką.</div>",
		roundDownName: "Suapvalinti iki mažesnio",
		roundDownSnip: "Kiekvienai rastro gardelei pateikia artimiausią mažesnį sveikąjį skaičių, pateiktą slankiojo kablelio forma.",
		roundDownDesc: "Funkcija Suapvalinti iki mažesnio pateikia kiekvienam rastro pikseliui artimiausią mažesnį sveikąjį skaičių kaip slankiojo kablelio reikšmę.",
		roundUpName: "Suapvalinti iki didesnio",
		roundUpSnip: "Kiekvienai rastro gardelei pateikia artimiausią didesnį sveikąjį skaičių, pateiktą slankiojo kablelio forma.",
		roundUpDesc: "Funkcija Suapvalinti iki didesnio pateikia kiekvienam rastro pikseliui artimiausią didesnį sveikąjį skaičių kaip slankiojo kablelio reikšmę.",
		segmentMeanShiftName: "Segmentuoti pagal vidurkį",
		segmentMeanShiftSnip: "Grupuoja į segmentus kaimyninius pikselius su panašiomis spektrinėmis savybėmis.",
		segmentMeanShiftDesc: "Ši funkcija identifikuoja objektus, elementus arba segmentus jūsų vaizduose, grupuodama gretimus pikselius, kurie pasižymi panašiomis spektrinėmis arba erdvinėmis savybėmis. Galite valdyti erdvinio ir spektrinio glotninimo lygį, kad išryškintumėte dėmesio vertus elementus.",
		s1RadiometricCalibrationName: "Sentinel-1 radiometrinis kalibravimas",
		s1RadiometricCalibrationSnip: "Atlieka Sentinel-1 duomenų skirtingų tipų radiometrinį kalibravimą.",
		s1RadiometricCalibrationDesc: "Ši rastro funkcija atlieka tris skirtingus Sentinel 1 duomenų rinkinių kalibravimus, įskaitant beta nulinius ir gama, ir pateikia sukalibruotus duomenų rinkinius. SAR kalibravimo tikslas yra pateikti vaizdus, kurių pikselių reikšmes galima tiesiogiai susieti su scenos radaro atgaline sklaida. Nors nesukalibruotų SAR vaizdų pakanka kokybiniam naudojimui, sukalibruoti SAR vaizdai yra būtini kokybiniam SAR duomenų naudojimui.<div><br/>Į įprastinį SAR duomenų apdorojimą, kuriuo sukuriami 1 lygio vaizdai, neįtraukiamos radiometrinės korekcijos ir lieka reikšmingas radiometrinis nuokrypis. Dėl to SAR vaizdams būtina taikyti radiometrinę korekciją, kad vaizdų pikselių reikšmės tinkamai vaizduotų atspindinčio paviršiaus radaro atgalinę sklaidą. Radiometrinė korekcija taip pat būtina skirtingais jutikliais arba tuo pačiu jutikliu bet skirtingu laiku, skirtingais režimais užfiksuotiems arba skirtingais procesoriais apdorotiems SAR vaizdams lyginti.</div>",
		s1ThermalNoiseRemovalName: "Sentinel-1 šiluminio triukšmo šalinimas",
		s1ThermalNoiseRemovalSnip: "Pašalina šilumos triukšmą iš Sentinel-1 duomenų.",
		s1ThermalNoiseRemovalDesc: "Šiluminio triukšmo korekcija gali būti taikoma Sentinel-1 Level-1 Single Look Complex (SLC) produktams bei Level-1 Ground Range Detection (GRD) produktams, kurių korekcijos dar neatliktos. Operatorius taip pat gali pašalinti šią korekciją, atsižvelgdamas į produkto pastabas, kad grąžintų triukšmo signalą, kuris buvo pašalintas pirminiam produktui sukurti. Produkto pastabos naujinamos atitinkamai, kad būtų galima iš naujo pritaikyti korekciją. ",
		setNullName: "Nustatyti Null",
		setNullSnip: "Nustatyti Null nustato atpažintų gardelių vietas kaip NoData, atsižvelgdama į nurodytus kriterijus. Ji pateikia NoData, jei sąlygos įvertinimas yra teisingas ir pateikia kitame rastre nurodytą reikšmę, jei ji neteisinga.",
		setNullDesc: "Funkcija Nustatyti Null nustato atpažintus pikselius kaip be duomenų, atsižvelgdama į nurodytus kriterijus. Ji pateikia NoData, jei sąlygos įvertinimas yra teisingas (1) ir pateikia nurodytą reikšmę iš neteisingo rastro, jei sąlygos įvertinimas yra neteisingas (0). Šį kriterijų nurodo loginės matematinės funkcijos išvestis, kuri bus įvesties rastras.",
		shadedReliefName: "Reljefas su šešėliais",
		shadedReliefSnip: "Sukuria daugiakanalį, spalvotą 3D paviršiaus vaizdą, atsižvelgdama į santykinę saulės padėtį, kad sukurtų vaizdo šešėlius.",
		shadedReliefDesc: "Funkcija Reljefas su šešėliais sukuria spalvotą paviršiaus 3D vaizdą, suliedama aukščio koduotės ir šešėlių rinkinio vaizdus. Ši funkcija naudoja aukščio ir azimuto ypatybes, kad nustatytų saulės padėtį.<div><br/></div>",
		sinHName: "SinH",
		sinHSnip: "Skaičiuoja hiperbolinį rastro gardelių sinusą.",
		sinHDesc: "Funkcija skaičiuoja hiperbolinį rastro pikselių sinusą.",
		sinName: "Sin",
		sinSnip: "Skaičiuoja rastro gardelių sinusą.",
		sinDesc: "Funkcija skaičiuoja rastro pikselių sinusą.",
		slopeName: "Polinkis",
		slopeSnip: "Apskaičiuoja vieno pikselio reikšmės pokyti iki kaimyninio elemento.",
		slopeDesc: "Ši rastro funkcija apskaičiuoja nuolydį kaip kiekvieno skaitmeninio aukščių modelio (DEM) taško aukščio pokytį. Tai pirmasis DEM vedinys.<div><br/>Ši funkcija naudoja paspartintą funkciją atan(). Ji yra šešis kartus spartesnė, o aproksimacijos klaida visada yra mažesnė kaip 0,3 laipsnio.</div>",
		speckleName: "Raibumas",
		speckleSnip: "Suteikia filtrus triukšmo šalinimui iš sintetinės diafragmos radaro duomenų rinkinio.",
		speckleDesc: "Raibumas yra didelio dažnio triukšmas radaro duomenyse. Sintetinės diafragmos radaro (SAR) sistemomis sugeneruoti vaizdai dažnai pasižymi raibumo efektu dėl išskaidytų signalų apdorojimo ir nuo paviršių arba objektų atsispindėjusių elektromagnetinių bangų trikdžių. Funkcija Raibumas filtruoja radaro duomenų rinkinio raibumą ir išlygina triukšmą, palikdama briaunas arba ryškius vaizdo elementus.",
		spectralConversionName: "Spektro konvertavimas",
		spectralConversionSnip: "Pritaiko matricą daugiakanaliam vaizdui.",
		spectralConversionDesc: "Funkcija Spektro konvertavimas pritaiko matricą daugiakanaliam vaizdui, kad pakeistų išvesties spalvų reikšmes.<div><br/>Kai kurie jutikliai nefiksuoja mėlyno kanalo dėl mažo signalo ir triukšmo skirtumo. Ją galima panaudoti, pavyzdžiui, netikrų spalvų infraraudonųjų spindulių vaizdui konvertuoti į pseudo natūralių spalvų vaizdą.</div>",
		squareRootName: "Kvadratinė šaknis",
		squareRootSnip: "Skaičiuoja rastro gardelių reikšmių kvadratinę šaknį.",
		squareRootDesc: "Funkcija Kvadratinė šaknis apskaičiuoja rastro pikselių reikšmių kvadratinę šaknį.",
		squareName: "Kvadratinis",
		squareSnip: "Pakelia rastro gardelių reikšmes kvadratu.",
		squareDesc: "Funkcija Kvadratas pakelia rastro pikselių reikšmes kvadratu.",
		statisticsHistogramName: "Statistika ir histograma",
		statisticsHistogramSnip: "Apibrėžkite arba susiekite statistiką ir histogramą.",
		statisticsHistogramDesc: "Funkcija Statistika ir histograma naudojama apibrėžti rastro statistikai ir histogramai. Galite įterpti šią funkciją funkcijų grandinės gale, kad apibūdintumėte rastro funkcijos šablono (RFT) statistiką ir histogramą. To gali prireikti norint valdyti numatytąjį apdorojimo rezultatų pateikimą, ypač apibrėžiant funkcijų grandinę, kurioje yra daug funkcijų.<div><br/>Galite apibrėžti statistiką įvesdami reikšmes arba importuodami iš rastro duomenų rinkinio arba XML failo. Histogramas galima apibrėžti tik importuojant failą.</div>",
		statisticsName: "Statistika",
		statisticsSnip: "Apskaičiuoja kiekvieno vaizdo pikselio židinio statistiką pagal apibrėžto židinio kaimynystę.",
		statisticsDesc: "Funkcija Statistika apskaičiuoja kiekvieno vaizdo pikselio židinio statistiką pagal apibrėžto židinio kaimynystę.<div><br/>Funkciją Statistika galima naudoti praleistoms vaizdo eilutėms užpildyti. Praleistų eilučių dažniausiai pasitaiko dėl jutiklio problemų, kai nesurenkami duomenys. Tai nutinka tokiuose jutikliuose, kaip Landsat 7 Enhanced Thematic Mapper Plus (ETM+). Trūkstami duomenys kliudo analizei ir vaizdų peržiūrai. Jei vaizdai naudojami analizei, beveik niekuo padėti neįmanoma; tačiau jei vaizdai persidengia, juos galima panaudoti vietoje trūkstamo turinio. Tą pati galima padaryti, jei vaizdai naudojami peržiūrai. Tačiau ne visada yra papildomų vaizdų, kuriais galima pakeisti trūkstamą turinį, todėl jį tenka išvesti iš turimų duomenų.</div>",
		streamLinkName: "Srauto sąsaja",
		streamLinkSnip: "Priskiria unikalias reikšmes rastro linijinio tinklo sekcijoms tarp susikirtimų.",
		streamLinkDesc: "Funkcija Srauto sąsaja priskiria unikalias reikšmes rastro linijinio tinklo sekcijoms tarp susikirtimų.<div><br/>Sąsajos yra srauto kanalo, jungiančio dvi tolesnes sankirtas, sankirtą ir išvestį arba sankirtą ir baseino perskyrą, sekcijos. Hidrologijoje šie šaltinių segmentai vadinami upių ruožais. Sankirta yra susijusi su takumo tašku ir padeda apibrėžti antrinio vandens baseino ribas.</div>",
		stretchName: "Ištempti",
		stretchSnip: "Pagerina vaizdą, koreguodama rodomų reikšmių intervalą. Tai nekeičia pamatinių pikselių reikšmių. Jei pikselio reikšmė nepatenka į nurodytą intervalą, ji rodoma kaip minimali arba maksimali reikšmė.",
		stretchDesc: "Funkcija Ištempti pagerina vaizdą, keisdama jo ypatybes, pvz., ryškumą, kontrastą ir gamą įvairiais ištempimo tipais. Ši funkcija naudoja mozaikos duomenų rinkinio rastrų statistinius duomenis, dėl to naudojant šią funkciją būtina įsitikinti, kad statistika yra apskaičiuota.<div><br/>Ištempimo tipas nurodo histogramos ištempimą, kuris taikomas rastrų išvaizdai gerinti. Ištempimas pagerina duomenų išvaizdą, paskirstydamas pikselių reikšmes po histogramą nuo minimalių iki maksimalių reikšmių pagal jų bitų ryškumą. </div>",
		swathName: "Ruožas",
		swathSnip: "Interpoliuoja netaisyklingus tinklelius arba ruožo duomenis.",
		swathDesc: "Kai kuriuose netCDF arba HDF duomenų rinkiniuose geografinė padėtis saugoma kaip netaisyklingai išdėstyti masyvai. Įtraukiant šiuos duomenų rinkinius į mozaikos duomenų rinkinį, funkcija Ruožas pakeičia netaisyklingai išdėstytus duomenis, kad kiekvienas pikselis būtų vienodo dydžio ir būtų kvadratinis.<div><br/>Įtraukiant kintamuosius iš netCDF arba HDF į mozaikos duomenų rinkinį, ji automatiškai patikrins, ar duomenys yra išdėstyti taisyklingai. Jei ne, funkcija Ruožas taikoma automatiškai netaisyklingiems rastrams konvertuoti į taškus ir į taisyklingai išdėstytą rastrą. Galima keisti interpoliacijos metodą ir ruožo rastro funkcijai naudojamą gardelės dydį. Jei rastro duomenys išdėstyti taisyklingais tarpais, interpoliavimas nebus taikomas, duomenys bus nuskaitomi tokie, kokie yra.</div>",
		tanHName: "TanH",
		tanHSnip: "Skaičiuoja hiperbolinį rastro gardelių tangentą.",
		tanHDesc: "Funkcija skaičiuoja hiperbolinį rastro pikselių tangentą.",
		tanName: "Tan",
		tanSnip: "Skaičiuoja rastro gardelių tangentą.",
		tanDesc: "Funkcija skaičiuoja rastro pikselių tangentą. ",
		tasseledCapName: "Tasseled Cap (Kauth-Thomas)",
		tasseledCapSnip: "Apskaičiuoja augmeniją, drėgnumą ir ryškumą. Šiai technikai naudojami koeficientai turi būti apskaičiuoti konkrečiam jutikliui.",
		tasseledCapDesc: "Tasseled Cap (Kauth-Thomas) transformacija sukurta analizuoti ir žymėti augmenijos fenomenologijos ir miestų plėtros pokyčius, kuriuos užfiksuoja skirtingos palydovinių jutiklių sistemos. Ji vadinama Tasseled Cap transformacija dėl duomenų sklaidos grafinės išraiškos formos. Ši transformacija suteikė pagrindą struktūroms, rastoms dirbamų laukų Landsat MSS duomenyse, kaip pasėlių gyvavimo ciklo funkciją. Iš esmės, augalams augant nuo sėklos iki brandos, grynasis atspindėjimas artimajame infraraudonajame diapazone padidėja, o raudonajame – sumažėja, atsižvelgiant į dirvožemio spalvą<div><br/>Ši transformacija naudojama plačiai: pradedant pasėlių stebėjimu, baigiant augmenijos analizavimu ir kitiems įvairiems tikslams, pvz., miškininkystei, pramoninės augmenijos valdymui, ekosistemų žymėjimui ir valdymui, anglies dvideginio fiksavimui, stebėjimui, jo mažinimui ir kreditavimui, miestų plėtrai ir ne tik. Be to, ją jau palaiko ne vien Landsat MSS, bet ir kitos populiarios palydovų sistemos, pvz., Landsat TM, Landsat ETM+, Landsat 8, IKONOS, QuickBird, WorldView-2 ir RapidEye daugiaspektriai jutikliai.</div>",
		timesName: "Daugyba",
		timesSnip: "Daugina dviejų rastrų reikšmes gardelių lygmeniu.",
		timesDesc: "Funkcija Daugyba daugina dviejų rastrų reikšmes pikselių lygmeniu.",
		transposeBitsName: "Transponuoti bitus",
		transposeBitsSnip: "Išskleidžia įvesties pikselio bitus ir juos susieja su konkrečiais išvesties pikselio bitais. Šios funkcijos paskirtis – manipuliuoti poros įvesčių, pvz., Landsat 8 kokybiško kanalo produktų, bitais.",
		transposeBitsDesc: "Funkcija Transponuoti bitus išskleidžia įvesties pikselio bitus ir juos susieja su konkrečiais išvesties pikselio bitais. Šios funkcijos paskirtis – manipuliuoti poros įvesčių, pvz., Landsat 8 kokybiško kanalo produktų, bitais.",
		unitConversionName: "Matavimo vienetų konvertavimas",
		unitConversionSnip: "Keičia reikšmių matavimo vienetus.",
		unitConversionDesc: "Ši funkcija konvertuoja pikselių matavimo vienetus. Ji palaiko atstumo, greičio ir temperatūros matavimo vienetus.",
		vectorFieldName: "Vektorinis laukas",
		vectorFieldSnip: "Pateikia duomenų rinkinius tiek su dydžio (u), tiek su krypties (v) rodyklėmis: dydį galima įvertinti pagal rodyklės dydį, o kryptį pagal rodyklės kryptį.",
		vectorFieldDesc: "Funkcija Vektorinis laukas naudojama dviems rastrams sujungti ir konvertuoti į dviejų kanalų rastrą, kurio duomenų tipas yra Dydis-kryptis arba U-V.<div><br/>U reikšmė kartais vadinama zonos greičiu, o V reikšmė kartais vadinama meridiano greičiu.</div>",
		viewshed2Name: "Matymo laukas",
		viewshed2Snip: "Nustato rastro paviršiaus vietas, kurios yra matomos stebėtojui, naudodama geodezinius metodus.",
		viewshed2Desc: "Funkcija Matymo laukas nustato rastro paviršiaus vietas, kurios yra matomos stebėtojui, naudodama geodezinius metodus<div><br/>Kiekvieno pikselio centro matomumas nustatomas atliekant regėjimo linijos testą tarp objekto ir kiekvieno stebėtojo. Jei stebėtojas mato tikslą pikselio centre, pikselis laikomas matomu. Vertindamas matomumą šis įrankis visada atsižvelgia į žemės išlinkį.</div>",
		watershedName: "Baseinas",
		watershedSnip: "Nustato priklausantį plotą virš gardelių rinkinio rastre",
		watershedDesc: "Funkcija Baseinas nustato priklausantį plotą virš pikselių rinkinio rastre. Baseinai yra atskiriami nuo tėkmės krypties rastro, kuris nurodo tėkmės kryptį iš kiekvieno pikselio.",
		weightedOverlayName: "Svorinė perdanga",
		weightedOverlaySnip: "Perdengia keletą rastrų, įvertindama kiekvieną rastro svarbumą pagal bendrą matavimo skalę ir svorį.",
		weightedOverlayDesc: "Ši funkcija leidžia perdengti keletą rastrų, įvertindama kiekvieną rastro svarbumą pagal bendrą matavimo skalę ir svorį.",
		weightedSumName: "Svorių suma",
		weightedSumSnip: "Pasveria ir sudeda rastrų masyvą gardelių lygmeniu.",
		weightedSumDesc: "Funkcija Svorių suma leidžia perdengti keletą rastrų, kiekvieną jų padauginant iš jų svorio ir juos susumuojant.",
		windchillName: "Jutiminė tempratūra",
		windchillSnip: "Jutiminės temperatūros koeficientas apskaičiuojamas vertinant aplinkos temperatūra ir vėjo greitį.",
		windchillDesc: "Funkcija Jutiminė temperatūra naudinga vertinat pavojingas žiemos sąlygas, kurios, atsižvelgiant į lauke praleistą laiką, gali lemti nušalimus arba net hipotermiją. Jutiminė temperatūra yra būdas pamatuoti, kaip šalta žmogui, kai atsižvelgiama į vėją esant žemai temperatūrai. Kuo stipresnis vėjas, tuo greičiau kūnas netenka šilumos ir tuo šalčiau jaučiasi žmogus.",
		zonalRemapName: "Zonos susiejimas iš naujo",
		zonalRemapSnip: "Iš naujo susieja rastro pikselius pagal zonas, apibrėžtas kitame rastre ir lentelėje su pagal zonas susietomis reikšmėmis.",
		zonalRemapDesc: "Ši funkcija suteikia galimybę iš naujo susieti rastro pikselius pagal zonas, apibrėžtas kitame rastre ir lentelėje su pagal zonas susietomis reikšmėmis.",
		zonalStatisticsName: "Zoninė statistika",
		zonalStatisticsSnip: "Apskaičiuoja rastro reikšmių statistiką kito duomenų rinkinio zonose.",
		zonalStatisticsDesc: "Funkcija apskaičiuoja rastro reikšmių statistiką kito duomenų rinkinio zonose. Zona apibrėžiama kaip visi plotai, turintys tą pačią reikšmę. Šie plotai neprivalo susisiekti. Kai zonos ir reikšmės įvestys yra tos pačios raiškos rastrai, jie naudojami tiesiogiai. Jei raiškos skiriasi, taikomas vidinis dydžio keitimas, kad raiškos sutaptų prieš atliekant zoninę operaciją.",
		flowLengthName: "Tekmės ilgis",
		flowLengthSnip: "Apskaičiuoja atstumą prieš srovę arba pasroviui, arba svertinį atstumą kartu su kiekvienos gardelės tėkme pasroviui.",
		flowLengthDesc: "Tai pasaulinio rastro funkcija. Ši funkcija sukuria atstumo prieš srovę arba pasroviui rastrinį sluoksnį arba svertinį atstumą išilgai kiekvienos gardelės kelio.<div><br/>Pagrindinis srauto ilgio funkcijos naudojimas yra apskaičiuoti ilgiausios tėkmės pasroviui tam tikrame baseine ilgį. Šis matavimas dažnai naudojamas telkinio koncentracijos laikui apskaičiuoti. Tai atliekama naudojant parinktį Prieš srovę. Funkciją taip pat galima naudoti kuriant atstumo-teritorijos hipotetinių kritulių ir nuotėkio nuotolio diagramas, naudojant svertinį rastrą, kaip judėjimo žemyn trukdį.</div>",
		streamOrderName: "Srauto tvarka",
		streamOrderSnip: "Priskiria skaitinę tvarką rastro segmentams, reprezentuojančią linijinio tinklo šakas.",
		streamOrderDesc: "Tai pasaulinio rastro funkcija. Ši funkcija sukuria rastrinį sluoksnį, kuris priskiria skaitinę tvarką rastro segmentams, atspindintiems linijinio tinklo šakas.<div><br/>Srauto tvarkos funkcijos rezultatas bus geresnės kokybės, jei įvesties srovės rastrinis sluoksnis ir įvesties srauto krypties rastrinis sluoksnis yra išvesti iš to paties paviršiaus. Jei srauto rastras išvestas iš rasterizuoto srautų duomenų rinkinio, išvesties negalima naudoti, nes gardelių lygmeniu kryptis neatitiks srauto gardelių padėties. Srauto kaupimo funkcijos rezultatą galima naudoti kuriant rastro srauto tinklą, pritaikant slenksčio reikšmę pasirinktoms gardelėms su dideliu sukauptu srautu. Pavyzdžiui, gardelės, kurios jungiasi su daugiau nei 100 gardelių, naudojamos srauto tinklui apibrėžti. Naudokite funkciją Konstanta arba Nustatyti nulį, kad sukurtumėte srauto tinklo rastrą, kur srauto sukauptos 100 ar daugiau, sueina į vieną, o likusi dalis pateikiama kaip fonas (NoData). Gautą srauto tinklą galima naudoti Srauto tvarkos funkcijoje. Ši funkcija palaiko tik D8 įvesties srauto krypties rastrinį sluoksnį. D8 srauto kryptis galima sukurti naudojant Srauto krypties funkciją ir vykdyti su numatytuoju srauto krypties tipu D8.</div>",
		snapPourPointName: "Pritraukti užpylimo tašką",
		snapPourPointSnip: "Pritraukia užpylimo taškus prie aukščiausio srauto sukaupimo gardelės nurodytame atstume.",
		snapPourPointDesc: "Tai pasaulinio rastro funkcija. Ši funkcija pritraukia užpylimo taškus prie didžiausios srauto sankaupos gardelės nurodytame atstume.<div><br/>Funkcija Pritraukti užpylimo tašką naudojama aukščiausio sukaupto srauto taškų pasirinkimui užtikrinti, kai naudojant Baseino funkciją apibrėžiami hidrografinio tinklo baseinai. Funkcija Pritraukti užpylimo tašką pritraukimo atstume aplink nurodytus užpylimo taškus ieškos didžiausio sukaupto srauto gardelės ir perkels užpylimo tašką į tą padėtį. Išvestis yra sveikojo skaičiaus rastro sluoksnis, kai pradinio užpylimo taško padėtys pritrauktos prie aukščiau sukaupto srauto vietų.</div>",
		sinkName: "Įduba",
		sinkSnip: "Sukuria rastrą, identifikuojantį visas vidinio hidrografinio tinklo įdubas ar teritorijas",
		sinkDesc: "Tai pasaulinio rastro funkcija. Ši funkcija sukuria rastro sluoksnį, identifikuojantį visas vidinio hidrografinio tinklo įdubas ar teritorijas. Įduba yra gardelė arba erdvėje sujungtų gardelių rinkinys su srauto kryptimi, kurio negalima priskirti vienai iš aštuonių galiojančių reikšmių srauto krypties rastre. Ji gali atsirasti, kai visos netoliese esančios gardelės yra aukščiau nei apdorojama gardelė arba kai dvi gardelės teka viena į kitą, sukurdamos dviejų gardelių ciklą.<div><br/>Įdubos funkcija palaiko tik D8 įvesties srauto krypties rastrinį sluoksnį. D8 srauto kryptis galima sukurti naudojant Srauto krypties funkciją ir vykdyti su numatytuoju srauto krypties tipu D8. Įdubos funkcijos išvestis yra sveikojo skaičiaus rastras, kai kiekvienai įdubai priskiriama unikali reikšmė. Šių unikalių reikšmių intervalas yra nuo vieno iki visų įdubų skaičiaus. Pvz., jei visas įdubų skaičius būtų 1 000, unikalių reikšmių diapazonas būtų 1–1 000.</div>",
		aggregateName: "Agreguoti",
		aggregateSnip: "Sukuriama mažesnės raiškos rastro versija.",
		aggregateDesc: "Agregavimo funkcija pateikia įvesties rastro dydį menkesne raiška, remiantis nurodyta agregavimo strategija. Kiekvienoje išvesties gardelėje pateikiama įvestų gardelių, patenkančių į tos gardelės aprėptį, suma, mažiausia, didžiausia, vidutinė ir medianos reikšmės.<div><br/>Galite nurodyti įvesties rastro gardelės dydžio dauginimo koeficientą. Pavyzdžiui, jei gardelės koeficiento reikšmė yra trys, išvesties gardelė bus tris kartus didesnė už įvesties rastro gardelę. Galite apibrėžti, kaip elgtis su išvesties aprėptimi, jei įvesties eilučių arba stulpelių skaičius nėra tikslus gardelės koeficiento daugiklis. Pagal numatytuosius nustatymus viršutinė ir dešinioji ribos bus išplėstos, kad jų erdvinė apimtis būtų didesnė nei įvesties rastro erdvinė apimtis, norint užtikrinti, kad visos įvestos ląstelės būtų apdorotos. Arba viršutinę ir dešinę ribas galima susiaurinti, kad aprėptis būtų mažesnė, norint, jog apdorotų eilučių ir stulpelių skaičius būtų tikslus gardelės faktoriaus daugiklis. Galite apibrėžti, kaip atliekant agregavimo skaičiavimus turėtų būti traktuojamos NoData gardelės. Pagal numatytąjį nustatymą NoData gardelės, patenkančios į išvesties rastro didesnės gardelės erdvinę apimtį, neįtraukiamos apskaičiuojant tos išvesties gardelės reikšmę. Taip pat galite nurodyti, kad jei išvesties gardelės erdvinėje aprėptyje yra bent viena įvesties gardelė, kurios reikšmė NoData, tos išvesties rastro gardelės reikšmė bus NoData.</div>",
		ccdcName: "CCDC analizė",
		ccdcSnip: "Įvertinami pikselių reikšmių laikui bėgant pokyčiai, naudojant Nuolatinio pokyčių aptikimo ir klasifikavimo (CCDC) algoritmą, ir generuojami modelio rezultatai.",
		ccdcDesc: "CCDC analizės funkcija įvertina pikselių reikšmių laikui bėgant pokyčius, naudojant Nuolatinio pokyčių aptikimo ir klasifikavimo (CCDC) algoritmą, ir sukuria daugialypį rastrą, kuriame pateikiami modelio rezultatai. Ji palaikoma tik kartu su Pokyčių aptikimo naudojant pokyčių analizę funkcija, esančia rastro funkcijų šablone. Norėdami sukurti rastro išvestį, sujunkite CCDC analizės funkciją su Pokyčių aptikimo naudojant pokyčių analizę funkcija, įrašykite kaip rastro funkcijos šabloną ir paleiskite rastrų analizę, naudodami funkcijos šabloną.<div><br/>Ši funkcija naudoja Nuolatinio pokyčių aptikimo ir klasifikavimo (CCDC) algoritmą, kad įvertintų vaizdų grupės pikselių reikšmių pokyčius laikui bėgant. Optinių vaizdų ar vaizdų vedinių (pavyzdžiui, NDVI) pikselių reikšmės gali svyruoti dėl kelių priežasčių: 1. Sezoniniai pokyčiai - pikselių reikšmės pokyčiai atspindi augalijos pokyčius dėl sezoninio temperatūros ir kritulių kintamumo. Pvz., Šiaurės pusrutulyje vasarą galime tikėtis didesnio žaliosios augalijos tankio nei žiemą; 2. Laipsniški pokyčiai -- pikselių reikšmių pokyčiai atspindi augmenijos ar paviršinio vandens tendencijas, sukeliamas klimato pokyčių ar ilgalaikių žemės tvarkymo darbų. Pavyzdžiui, dėl ilgalaikio kritulių mažėjimo palaipsniui gali didėti pliko dirvožemio plotas; ir 3. Staigūs pokyčiai -- pikselių reikšmių pokyčiai atspindi žemės dangos pokyčius, kurie staiga atsiranda kertant miškus, plečiantis miestams, dėl stichinių nelaimių ir pan. CCDC algoritmu nustatomi visi trys pokyčių tipai, o to pagrindinis tikslas yra nustatyti staigius pokyčius. Prie duomenų pridedami harmoninės regresijos ir tendencijų modeliai, siekiant įvertinti sezoninius ir laipsniškus pokyčius, o staigūs nukrypimai nuo tendencijų modelių yra staigių pokyčių išraiška.<div><br/>CCDC algoritmas buvo pirmiausia sukurtas Landsat TM, Landsat ETM+ ir Landsat OLI duomenims apie Paviršiaus atspindėjimo arba Ryškumo temperatūros duomenis. Tačiau Pokyčių aptikimo naudojant pokyčių analizės funkcija kartu su šia funkcija aptiks daugiakanalių vaizdų iš bet kokio palaikomo jutiklio pokyčius, taip pat ir vienakanalio vaizdo vedinius, pvz., kanalų indeksus. Pavyzdžiui, galite atlikti nuolatinį pokyčių aptikimą Normalizuoto augmenijos skirtumo indekso (NDVI) rastre, nes staigūs NDVI pokyčiai gali reikšti miškų kirtimą.</div>",
		computeChangeName: "Skaičiuoti pokyčius",
		computeChangeSnip: "Apskaičiuojamas skirtumas tarp dviejų kategorinių ar ištisinių rastrų duomenų rinkinių.",
		computeChangeDesc: "Funkcija Skaičiuoti pokyčius gali būti naudojama numeruoti skirtumus tarp dviejų klasifikuotų rastrų atliekant žemės dangos pokyčių analizę arba analizuoti pokyčius tarp dviejų vienakanalių ištisinių rastrų, pvz., aukščio, temperatūros, medžių lajos dangos ir pan.",
		detectChangeName: "Aptikti pokyčius naudojant pokyčių analizę",
		detectChangeSnip: "Sukuriamas rastro sluoksnis su pikselių pokyčių informacija naudojant išvesties pokyčių analizės rastrą.",
		detectChangeDesc: "<div>Funkcija Aptikti pokyčius naudojant pokyčių analizę sukuria rastro sluoksnį su pikselių pokyčių datos informacija naudojant išvesties analizės rastrą. Pokyčių analizės rastrą reikia sugeneruoti funkcija Analizuoti pokyčius naudojant CCDC įrankį arba Analizuoti pokyčius naudojant LandTrendr įrankį arba CCDC analizės rastro funkcija arba LandTrendr analizės rastro funkcija.</div><br><div>Šią rastro funkciją galima sujungti su CCDC analizės rastro funkcija arba LandTrendr analizės rastro funkcija rastrų funkcijos šablone. Norėdami sukurti nuolatinę rastro išvestį, sujunkite CCDC analizės arba LandTrendr analizės funkcijos išvestį su funkcija Aptikti pokyčius naudojant pokyčių analizę, įrašykite kaip rastro funkcijos šabloną ir su juo paleiskite rastro analizę.</div><br><div>Parametras <strong>Pokyčio tipas</strong> nurodo renkamą informaciją. Informacija gaunama iš pokyčių analizės rastro. Vykdydami šią funkciją su CCDC funkcijos ar įrankio išvestimi, galite rinktis iš šių parinkčių:</div><ul><li><strong>Paskutinio pokyčio laikas</strong> – paskutinė data ir laikas, kai pikselis pažymėtas kaip keičiamas.</li><li><strong>Anksčiausio pokyčio laikas</strong> – anksčiausia data ir laikas, kai pikselis pažymėtas kaip keičiamas.</li><li><strong>Didžiausio pokyčio laikas</strong> – data ir laikas, kai apskaičiuotas pokytis pikseliui buvo reikšmingiausias.</li><li> <strong>Pokyčių skaičius</strong> – bendras skaičius, kiek kartų pikselis pakito.</li></ul><div>Šią funkciją vykdant su LandTrendr funkcijos ar įrankio išvestimi, galimos šios papildomos parinktys:</div><ul><li><strong>Ilgiausio pokyčio laikas</strong> – data, kai pikselis buvo pažymėtas kaip keičiamas, ilgiausio pokyčio laikotarpio pradžioje arba pabaigoje.</li><li><strong>Trumpiausio pokyčio laikas</strong> – data, kai pikselis buvo pažymėtas kaip keičiamas, trumpiausio pokyčio laikotarpio pradžioje arba pabaigoje.</li><li><strong>Greičiausio pokyčio laikas</strong> – data, kai pikselis buvo pažymėtas kaip keičiamas, greičiausio pokyčio laikotarpio pradžioje arba pabaigoje.</li><li><strong>Lėčiausio pokyčio laikas</strong> – data, kai pikselis buvo pažymėtas kaip keičiamas, lėčiausio pokyčio laikotarpio pradžioje arba pabaigoje.</li></ul><div>Išvesties rastras yra daugiakanalis rastras, kurio kiekviename kanale yra pokyčių informacija pagal pasirinktą pokyčio tipą ir nurodytą didžiausią pokyčių skaičių. Pavyzdžiui, jei <strong>Pokyčio tipas</strong> nustatytas kaip <strong>Anksčiausio pokyčio laikas</strong>, o <strong>Didžiausias pokyčių skaičius</strong> nustatytas kaip 2, tada funkcija kiekvienam pikseliui skaičiuoja dvi anksčiausias datas, kada per laiko sekas įvyko pokytis. Rezultatas yra rastras, kurio pirmajame kanale yra anksčiausių kiekvieno pikselio pokyčių datos, o antrajame kanale – kiekvieno pikselio antro anksčiausio pokyčio datos.</div><br><div>Taikydami šią funkciją LandTrendr įrankių išvesčiai, naudodami parametrą <strong>Segmento data</strong> galite pasirinkti, ar gauti pokyčio pradžią, ar pabaigą žyminčią datą. Pavyzdžiui, jei norite suprasti, kaip prasidėjo paskutinis laiko sekos pokytis, nustatykite <strong>Pokyčio tipas</strong> kaip <strong>Paskutinio pokyčio laikas</strong>, o <strong>Segmento data</strong> kaip <strong>Segmento pradžia</strong>.</div><br><div>Naudokite toliau nurodytus filtravimo parametrus, jei norite gauti konkretesnes pokyčių datas iš savo pokyčių analizės rastro:</div><ul><li><strong>Filtruoti pagal metus</strong> – identifikuoti pokyčius, įvykusius per konkretų laikotarpį, pavyzdžiui, jei ieškote pokyčių, įvykusių kraštovaizdyje per penkis sausros metus.</li><li><strong>Filtruoti pagal trukmę</strong> – identifikuoti pokyčius, įvykusius per pateiktą metų intervalą, pavyzdžiui, jei ieškote tik staigių pokyčių, įvykusių per 1 ar 2 metus. Dominančią trukmę galite apskaičiuoti naudodami formulę <strong>pabaigos metai - pradžios metai +1</strong>. Bus įtraukti laiko sekų tarpai.</li><li><strong>Filtruoti pagal stiprumą</strong> – identifikuoti nurodyto dydžio pokyčius, pavyzdžiui, jei ieškote tik didelių augmenijos indekso (NDVI) pokyčių. Stiprumas yra absoliučioji reikšmė, todėl mažiausia ir didžiausia reikšmės negali būti neigiamos. Norėdami nurodyti kryptingą pokyti, naudokite parametrą <strong>Pokyčių kryptis</strong>.</li></ul>",
		distanceAccumulationName: "Sukauptas atstumas",
		distanceAccumulationSnip: "Apskaičiuojamas kiekvienos gardelės sukauptas atstumas iki šaltinio, atsižvelgiant į tiesinį atstumą, sąnaudų atstumą, tikrąjį paviršiaus atstumą, taip pat vertikalius ir horizontalius sąnaudų veiksnius.",
		distanceAccumulationDesc: "Sukaupto atstumo funkcija apskaičiuoja atstumą iki kiekvienos tyrimo zonos vietos iki artimiausio arba ekonomiškiausio šaltinio. Jei įvesties duomenyse pateikiami tik šaltiniai, apskaičiuojamas tiesinis atstumas iki kiekvienos tyrimo zonos vietos. Jei kaip įvestis naudojami tiek šaltiniai, tiek kliūtys, Sukaupto atstumo funkcija apskaičiuoja tiesinį atstumą apeinant kliūtis. Tiek šaltinio rastrui, tiek kliūčių rastrui, fono reikšmė turėtų būti NoData, o šaltiniai ir kliūtys turėtų būti nurodomi tinkamomis gardelių reikšmėmis. Tinkama reikšmė gali būti ir nulis. <div><br/>Kaip įvestį pateikiant paviršiaus rastrą, apskaičiuojamas tikrasis paviršiaus atstumas tarp gardelių. Norint atlikti sąnaudų analizę naudojant Sukaupto atstumo funkciją, reikalingas sąnaudų paviršius. Nurodžius sąnaudų paviršių, gaunamas rezultatas yra sukauptas sąnaudų atstumo rastras. Pateikiant horizontalius ir vertikalius veiksnius, kaupiant sąnaudas atsižvelgiama į kryptingumą. Yra keturios šaltinio savybės kurias galima naudoti. Šios savybės, kurios gali būti arba šaltinio, arba judančiųjų iš šaltinio, valdomos konkrečiais parametrais: 1. Pradinės sankaupos: nustato pradines sąnaudas, prieš prasidedant judėjimui. 2. Didžiausios sankaupos: nurodo, kiek sąnaudų gali sukaupti šaltinis prieš pasiekdamas savo ribą. 3. Sąnaudoms taikomas daugiklis: u202fsnurodo kelionės būdą ar dydį šaltinyje. 4. Kelionės kryptis: nustato, ar judantysis pradeda nuo šaltinio ir juda į ne šaltinio vietas, ar pradeda ne šaltinio vietose ir grįžta į šaltinį.<div><br/>Pagal numatytuosius nustatymus Sukaupto atstumo rezultatas yra vienas kanalas, kuris yra sukaupto atstumo rastras. Tačiau gali būti sukurtas ir antras kanalas – atgalinės krypties kanalas.  Šis kanalas nurodo, kuria kryptimi eiti iš kiekvienos tyrimo zonos vietos, norint patekti į ekonomiškiausią šaltinį. Abu kanalai reikalingi nustatant optimalius kelius tyrimų zonoje. Norėdami sukurti kelią, pirmiausia naudokite funkciją Kanalų išskyrimas, kad išskirtumėte sukaupto atstumo rastrą ir atgalinės krypties rastrą. Naudokite šiuos sluoksnius kaip Sąnaudų kelio funkcijos įvestį. Funkcijoje naudokite sukaupto atstumo rastrą kaip Sąnaudų atstumo rastro įvestį, o atgalinės krypties rastrą - kaip Sąnaudų atgalinio rastro įvestį.</div>",
		distanceAllocationName: "Atstumo priskyrimas",
		distanceAllocationSnip: "Apskaičiuojamas kiekvienos gardelės atstumo priskyrimas iki pateiktų šaltinių, atsižvelgiant į tiesinį atstumą, sąnaudų atstumą, tikrąjį paviršiaus atstumą, taip pat vertikalius ir horizontalius sąnaudų veiksnius.",
		distanceAllocationDesc: "Atstumo priskyrimas apskaičiuoja šaltinį, kuriam priskirta kiekviena tyrimo zonos vieta. Jei kaip įvestis pateikiami tik šaltiniai, tai vietos priskiriamos tiesiniu atstumu iki artimiausio šaltinio. Jei kaip įvestis naudojami tiek šaltiniai, tiek kliūtys, Atstumo priskyrimo funkcija apskaičiuoja tiesinį atstumą apeinant kliūtis, kad nustatytų, kuriam šaltiniui priskirta vieta. Tiek šaltinio rastrui, tiek kliūčių rastrui, fono reikšmė turėtų būti NoData, o šaltiniai ir kliūtys turėtų būti nurodomi tinkamomis gardelių reikšmėmis. Tinkama reikšmė gali būti ir nulis.<div><br/>Norint atlikti sąnaudų analizę naudojant Atstumo priskyrimo funkciją, reikalingas sąnaudų paviršius. Nurodžius sąnaudų paviršių, gaunamas rezultatas yra priskyrimo rastras pagal sukauptas sąnaudas, o ne tiesinį atstumą. Pateikiant horizontalius ir vertikalius veiksnius, kaupiant sąnaudas atsižvelgiama į kryptingumą. Kaip įvestį pateikiant paviršiaus rastrą, tikrasis paviršiaus atstumas praeinant tarp gardelių apskaičiuojamas nustačius priskyrimą. Yra keturios šaltinio savybės kurias galima naudoti. Šios savybės, kurios gali būti arba šaltinio, arba judančiųjų iš šaltinio, valdomos konkrečiais parametrais: 1. Pradinės sankaupos: nustato pradines sąnaudas, prieš prasidedant judėjimui. 2. Didžiausios sankaupos: nurodo, kiek sąnaudų gali sukaupti šaltinis prieš pasiekdamas savo ribą. 3. Sąnaudoms taikomas daugiklis: snurodo kelionės būdą ar dydį šaltinyje. 4. Kelionės kryptis: nustato, ar judantysis pradeda nuo šaltinio ir juda į ne šaltinio vietas, ar pradeda ne šaltinio vietose ir grįžta į šaltinį.<div><br/>Pagal numatytuosius nustatymus Atstumo priskyrimo rezultatas yra vienas kanalas, kuris yra atstumo priskyrimo rastras. Pažymėjus Boolean parinktį Sukurti šaltinio eilutę ir stulpelį kaip papildomus išvesties kanalus bus gautas daugiakanalis rastras, susidedantis iš trijų kanalų. Pirmasis kanalas yra atstumo priskyrimo kanalas, antrajame kanale yra eilutės indeksas, o trečiajame kanale – stulpelio indeksas. Šie indeksai identifikuoja šaltinio gardelės vietą, kuri nutolusi per mažiausiai suminių sąnaudų. Šaltinio eilutės indeksą ir šaltinio stulpelio indeksą galima naudoti kartu atliekant intensyvumo žymėjimą. Pateikę užklausą dėl bet kurios tyrimo zonos vietos per antrąjį ir trečiąjį kanalus, sužinosite ekonomiškiausio tos vietos šaltinio eilutę ir stulpelį.</div>",
		eucBackDirectionName: "Euklido atgalinė kryptis",
		eucBackDirectionSnip: "Apskaičiuojama kiekvienos gardelės kryptis laipsniais iki kaimyninės gardelės trumpiausiu keliu atgal iki artimiausio šaltinio, išvengiant kliūčių.",
		eucBackDirectionDesc: "Euklido atgalinės krypties funkcija sukuriamas ištisinis slankiojo kablelio rastras, kuris nurodo kryptį atgal į artimiausią šaltinį laipsniais, vengiant kliūčių, jei kliūčių yra.<div><br/>Euklido atgalinės krypties įvestys yra šaltinis, į kurį bus apskaičiuota kryptis. Pasirinktinė įvestis yra rastras, apibūdinantis tyrimo zonoje esančias kliūtis. Tiek šaltinio rastrui, tiek kliūčių rastrui, fono reikšmė turėtų būti NoData, o šaltiniai ir kliūtys turėtų būti nurodomi tinkamomis reikšmėmis. Tinkama reikšmė gali būti ir nulis. Pagal numatytuosius nustatymus skaičiavimas atliekamas atsižvelgiant į bendrą šaltinių ir kliūčių aprėptį, pridėjus 2 eilutes ir stulpelius. Jei reikalinga tik konkretaus atstumo nuo šaltinių analizė, galima naudoti parametrą Didžiausias atstumas. Euklido atgalinė kryptis skaičiavimuose palaiko ir plokštuminį, ir geodezinį metodus. Plokštuminiu metodu skaičiavimas atliekamas ant plokščio ploto projekcijos, naudojant 2D Dekarto koordinačių sistemą. Geodeziniu metodu skaičiavimas atliekamas elipsoido pagrindu, o tai reiškia, kad nepaisant įvesties ar išvesties projekcijos, rezultatai nesikeičia.<div><br/>Euklido atgalinės krypties funkcijos rezultatas gali būti naudojamas kartu su Euklido atstumo funkcijos rezultatu, norint nustatyti trumpiausius kelius nuo tyrimo zonos vietų atgal į šaltinį. Tiek Euklido atgalinės krypties, tiek Euklido atstumo rezultatai naudojami Sąnaudų kelio funkcijoje kartu su kelionės tikslais kuriant trumpiausius kelius.</div>",
		expandName: "Išskleisti",
		expandSnip: "Išplečia pasirinktas rastro pagal teritorijas zonas nurodytu gardelių skaičiumi.",
		expandDesc: "Naudodami funkciją Išplėsti galite apibendrinti arba supaprastinti rastrus, tam tikras zonas padidindami. Taip pat galite kontroliuoti taikomą apibendrinimo laipsnį.<div><br/>Pasirenkamos zonos padidės, išsiplėsdamos į kitas zonas. Iš esmės pasirinktos zonos reikšmės gali būti suprantamos kaip priekinės zonos, o kitos reikšmės lieka foninėmis reikšmėmis. Priekinės zonos gali išsiplėsti į fonines zonas.<div><br/>Apibendrinimo laipsnis gali būti valdomas parametru Gardelių skaičius. Pagal numatytuosius nustatymus ši reikšmė yra 1, o tai reiškia, kad pasirinktos zonos išsiplės vienos gardelės dydį atitinkančiu plotu. Norėdami padidinti apibendrinimo laipsnį, galite nurodyti didesnę šio parametro reikšmę. Iš esmės tai lyg paleisti įrankį tiek kartų, koks skaičius nurodytas, ankstesnio paleidimo rezultatus įvedant į paskesnę iteraciją.</div>",
		trendAnalysisName: "Generuoti tendenciją",
		trendAnalysisSnip: "Įvertina kiekvieno pikselio tendenciją matmenyje vienam ar daugiau daugiamačio rastro kintamųjų.",
		trendAnalysisDesc: "<div>Šią funkciją galima naudoti talpinti duomenis pagal tiesinę, harmoninę arba daugianarę tendencijų liniją, arba ją galima naudoti vykdant tendencijų aptikimą naudojant Mann-Kendall artba sezoninį-Kendall testą.</div><br><div>Su šia funkcija sugeneruotas išvesties tendencijų rastras naudojamas kaip įvestis funkcijai <strong>Prognozuoti naudojant tendenciją</strong>.</div><br><div>Mann-Kendall ir sezoninis-Kendall testai naudojami siekiant nustatyti, ar duomenyse yra monotoniška tendencija. Jie yra neparametriniai, t. y. jie neturi konkretaus duomenų pasiskirstymo. Mann-Kendall testas neatsižvelgia į serijinę koreliaciją ir sezoninius veiksnius. Jei duomenys yra sezoniniai, tinkamesnis yra sezoninis-Kendall testas.</div><br><div>Jei Mann-Kendall arba Seasonal-Kendall testui vykdyti naudojamas šis įrankis, išvestis yra toks penkių kanalų rastras:</div><ul><li>1 kanalas = Sen pasvirimas</li><li>2 kanalas = p reikšmė</li><li>3 kanalas = Mann-Kendall įvertis (S)</li><li>4 kanalas = S dispersija</li><li>4 kanalas = S dispersija</li><li>5 kanalas = Z įvertis</li></ul><div>Mann-Kendall arba Seasonal-Kendall testų išvestis galima naudoti siekiant nustatyti, kurie jūsų daugiamačių laiko sekų pikseliai turi statistiškai reikšmingą tendenciją. Šią informaciją galite naudoti kartu su tiesine, harmonine arba daugianare tendencijų analize, kad gautumėte reikšmingas savo laiko sekų tendencijas. Galite generuoti kaukę įtraukdami pikselius su reikšmingomis p reikšmėmis, pritaikyti kaukę daugiamačiui rastrui ir tokį daugiamatį rastrą su kauke naudoti kaip įvestį įrankiui, kad vykdytumėte tiesinę, harmoninę arba daugianarę tendencijų analizę.</div><br><div>Yra trys tendencijų linijos parinktys tendencijos derinimui prie kintamųjų reikšmių pagal matmenį: tiesinė, daugianarė ir harmoninė.</div><br><div>Tiesinės tendencijų analizės išvestis yra toks trijų kanalų rastras:</div><ul><li>1 kanalas = pasvirimas</li><li>2 kanalas = susikirtimas</li><li>3 kanalas = šaknis iš vidutinės kvadratinės paklaidos (RMSE) arba paklaida nuo geriausiai tinkančios linijos</li></ul><div>Daugianarės tendencijų analizės išvesties kanalų skaičius priklauso nuo daugianarių eilės numerio. Antros eilės daugianariu derinimu sukuriamas toks keturių kanalų rastras:</div><ul><li>1 kanalas = Polynomial_2</li><li>2 kanalas = Polynomial_1</li><li>3 kanalas = Polynomial_0</li><li>4 kanalas = RMSE</li></ul><div>Trečios eilės daugianariu derinimu sukuriamas toks penkių kanalų rastras:</div><ul><li>1 kanalas = Polynomial_3</li><li>2 kanalas = Polynomial_2</li><li>3 kanalas = Polynomial_1</li><li>4 kanalas = Polynomial_0</li><li>5 kanalas = RMSE</li></ul><div>Harmoninės tendencijų analizės kanalų skaičius išvestyje priklauso nuo harmoninio dažnio. Kai dažnis nustatytas kaip 1, išvestis yra toks penkių kanalų rastras:</div><ul><li>1 kanalas = pasvirimas</li><li>2 kanalas = susikirtimas</li><li>3 kanalas = Harmonic_sin1</li><li>4 kanalas = Harmonic_cos1</li><li>5 kanalas = RMSE</li></ul><div>Kai dažnis nustatytas kaip 2, išvestis yra toks septynių kanalų rastras:</div><ul><li>1 kanalas = pasvirimas</li><li>2 kanalas = susikirtimas</li><li>3 kanalas = Harmonic_sin1</li><li>4 kanalas = Harmonic_cos1</li><li>5 kanalas = Harmonic_sin2</li><li>6 kanalas = Harmonic_cos2</li><li>7 lkanalas = RMSE</li></ul><div>Harmoninės tendencijų analizės parametras <strong>Ciklo trukmė</strong> naudojamas nurodyti, kiek ir kokios trukmės ciklų tikitės pamatyti savo duomenyse per dieną arba metus. Pavyzdžiui, jei manote, kad per vienerius metus jūsų duomenys pereis du variacijos ciklus, ciklo trukmė bus 182,5 dienos arba 0,5 metų. Jei turite kas tris valandas renkamus temperatūros duomenis, o per dieną yra vienas variacijos ciklas, ciklo trukmė yra viena diena.</div><br><div>Harmoninės tendencijų analizės parametras <strong>Dažnis</strong> naudojamas aprašyti harmoninį modelį, kad jis derėtų prie duomenų. Jei dažnis nustatytas kaip 1, modeliui derinti bus naudojamas tiesinės ir pirmosios eilės harmoninės kreivės derinys. Jei dažnis lygus 2, duomenims derinti prie modelio bus naudojamas tiesinės, pirmosios eilės harmoninės kreivės ir antrosios eilės harmoninės kreivės derinys. Jei dažnis lygus 3, duomenims modeliuoti bus naudojama papildoma trečiosios eilės harmoninė kreivė ir t. t..</div><br><div>Modelio tinkamumo statistiką galima sugeneruoti kaip pasirinktinę išvestį. Galima suskaičiuoti ir simbolizuoti šaknį iš vidutinės kvadratinės paklaidos (RMSE), R kvadratą ir tendencijos pasvirimo p reikšmę. Išvesties tendencijų rastrą simbolizuokite naudodami <strong>RGB</strong> simbolizaciją, o statistiką nurodykite kaip raudoną, žalią ir mėlyną kanalus.</div><br>",
		spectralUnmixingName: "Linijinis spektrinis atskyrimas",
		spectralUnmixingSnip: "Klasifikuoja subpikselius ir apskaičiuoja atskirų pikselių skirtingų žemės dangų tipų frakcinę gausą.",
		spectralUnmixingDesc: "Funkcija Linijinis spektrinis atskyrimas apskaičiuoja atskirų pikselių, kuriuose yra keli žemės dangos tipai, frakcinę dangą. Sukuriamas daugiakanalis sluoksnis, kur kiekvienas kanalas atitinka kiekvienos žemės dangos klasės frakcinę gausą. Pavyzdžiui, ši funkcija gali būti naudojama atliekant daugiaspektrinio vaizdo žemės dangos klasifikaciją, siekiant nustatyti fotosintetinę augmeniją, pliką dirvožemį ir negyvą arba nefotosintetinę augmeniją.<div><br/>Išvesties daugiakanalio rastro eiliškumas atitinka įvesties spektrinio profilio eiliškumą. Klasių skaičius negali būti didesnis nei įvesties rastro kanalų skaičius. Pavyzdžiui, iš 8 kanalų rastro negalite gauti informacijos apie daugiau nei 8 klases.</div>",
		multidimensionalFilterName: "Daugiamatis filtras",
		interpolateRasterByDimensionFunctionName: "Interpoliuoti rastrą pagal matmenį",
		interpolateRasterByDimensionFunctionSnip: "Interpoliuoja daugiamatį rastrą su nurodytomis matmenų reikšmėmis naudodama gretimas skiltis.",
		interpolateRasterByDimensionFunctionDesc: "<p>Ši funkcija leidžia apskaičiuoti daugiamačio rastro neapibrėžto matmens skilties pikselių reikšmes. Pavyzdžiui, jei turėdami duomenų rinkinį su vandenynų temperatūra paviršiuje ir 100 m gylyje norite apskaičiuoti temperatūrą 50 m gylyje, galite naudodami šią funkciją gauti apytikslę reikšmę tame gylyje su matmens apibrėžimu Pagal reikšmes.</p><p>Taip pat galite sutraukti mėnesio reikšmių duomenų rinkinį į kasdienių reikšmių duomenų rinkinį naudodami matmens apibrėžimą Pagal intervalą ir nurodydami parametro Žingsnis reikšmę kaip 1, o parametro Matavimo vienetas reikšmę kaip Dienos.</p><p>Naudokite matmens apibrėžimą Pagal paskirties rastrą norėdami apskaičiuoti paskirties rastro reikšmę.</p>",
		multidimensionalFilterSnip: "Sukuria rastro sluoksnį iš daugiamačio rastro duomenų rinkinio arba daugiamatį rastro sluoksnį, dalinant duomenis pagal apibrėžtus kintamuosius ir matmenis.",
		multidimensionalFilterDesc: "Daugiamatis filtras sukuria daugiamatį rastro sluoksnį, filtruojant ir ištraukiant iš daugiamačio rastro kintamųjų pogrupį. Pvz., turite daugiamatį duomenų rinkinį, kuriame yra 30 metų mėnesinių kritulių duomenys, ir norite išfiltruoti tik visų sausio mėnesių duomenis, kad pamatytumėte, kaip tą mėnesį keitėsi kritulių duomenys.<div><br/>Parametru Matmens apibrėžimas galima padalinti matmenis pagal intervalą, reikšmę ar reikšmių diapazoną. Pavyzdžiui, jei turite 10 metų vandenyno druskingumo duomenis, renkamus kas mėnesį ir kas du metrus iki 500 metrų gylio, galite naudoti skirtingas matmens apibrėžimo parinktis tokiems scenarijams. 1 scenarijus: Ištraukti druskingumo duomenis sausio mėnesį per 10 metų laikotarpį. Pasirinkite Pagal reikšmes, nustatykite Matmenį kaip StdTime, o Reikšmėse pasirinkite sausį. 2 scenarijus: Parodyti druskingumo duomenis gylyje nuo 0 iki 150 metrų. Pasirinkite Pagal diapazonus, nustatykite Matmenį kaip StdZ, Minimalią reikšmę – kaip -150, o Maksimalią reikšmę – kaip 0. 3 scenarijus: Ištraukti druskingumo duomenis per pirmas 10 kiekvieno sausio mėnesio dienų per 10 metų laikotarpį. Pasirinkite Pagal iteraciją, nustatykite Matmenį kaip StdTime, nustatykite pirmosios iteracijos Pradžią ir Pabaigą pasirinkdami atitinkamą iteracijos periodo pradžią ir pabaigą, nustatykite Žingsnį kaip 1, o Matavimo vienetą – kaip metus.</div>",
		multidimensionalRasterName: "Daugiamatis rastras",
		multidimensionalRasterSnip: "Prideda daugiamačius duomenis į žemėlapį kaip daugiamačio rastro sluoksnį.",
		multidimensionalRasterDesc: "Daugiamačio rastro funkcija prideda daugiamačius duomenis į žemėlapį kaip daugiamačio rastro sluoksnį. Ši funkcija naudinga vykdant rastro analizės darbo srautus naudojant funkcijų grandinę.<div><br/>Tarp palaikomų daugiamačių rastrinių duomenų rinkinių yra netCDF, GRIB, HDF ir Esri CRF. Palaikomi ir daugiamačiai mozaikos rinkiniai.</div>",
		optimalPathAsRasterName: "Optimalus kelias kaip rastras",
		optimalPathAsRasterSnip: "Apskaičiuoja mažiausių sąnaudų kelią nuo šaltinio iki tikslo.",
		optimalPathAsRasterDesc: "Ši globali funkcija sugeneruoja išvesties rastrą, kuris nurodo optimalų kelią arba kelius nuo pasirinktų vietų iki artimiausios šaltinio gardelės suminių sąnaudų paviršiuje sąnaudų atstumo atžvilgiu.<div><br/>Paprastai norint sukurti įvesties sukaupto atstumo ir atgalinės krypties rastrus, prieš paleidžiant funkciją Optimalus kelias kaip rastras, reikia paleisti vieną ar daugiau svertinių sąnaudų funkcijų (Sukauptas atstumas arba Atstumo priskyrimas). Tai yra privalomi įvesties rastro sluoksniai pasirenkant Optimalaus kelio funkciją. Išvesties optimalaus kelio reikšmės nurodo tam tikros vietos kelių skaičių. Daugeliu atvejų keliai eina tuo pačiu maršrutu – iš šaltinio ir tada išsišakodami į skirtingus kelionės tikslus. Pavyzdžiui, vienetas reiškia, kad nurodytoje vietoje yra tik vienas optimalus kelias, o skaičius 5 – kad per tą tyrimo zonos gardelę eina penki optimalūs keliai.<div><br/>Įvesties tikslo duomenys turi būti rastro sluoksnis. Tikslo gardelių rinkinį sudaro visos įvesties rastro gardelės, turinčios tinkamą reikšmę. Gardelės, kurių reikšmės NoData, į rinkinį neįtraukiamos. Nulinė reikšmė yra laikoma galimu kelionės tikslu. Tikslo rastras gali būti sukurtas naudojant išgavimo įrankius. Jei turite tikslo ar šaltinio elementus, galite juos konvertuoti į rastrą naudodami Elementų rasterizavimo funkciją. Kaip rasterizavimo funkcijos Rastro įvestį naudokite sukaupto atstumo arba atgalinės krypties rastrą. Tai užtikrins, kad elementas rasterizuojamas naudojant tokį patį gardelės dydį, aprėptį ir erdvinę nuorodą kaip kitų funkcijos Optimalus kelias kaip rastras rastrų. Funkcija Optimalus kelias kaip rastras gali būti naudojama nustatyti skaitmeninio aukščio modelio (DEM) mažiausio pasipriešinimo kelią. Šiuo atveju naudokite DEM kaip sukaupto atstumo rastro įvestį, o Tėkmės krypties funkcijos išvestį atgalinės krypties rastrui.</div>",
		trendName: "Prognozuoti naudojant tendencijas",
		trendSnip: "Apskaičiuoja prognozuojamo daugiamačio rastro sluoksnį, naudojant iš funkcijos Generuoti tendenciją arba iš geotvarkymo įrankio Generuoti tendencijų rastrą gautą išvesties tendencijų rastrą.",
		trendDesc: "Funkcija Prognozuoti naudojant tendencijas apskaičiuoja prognozuojamo daugiamačio rastro sluoksnį, naudojant iš funkcijos Generuoti tendenciją arba iš geotvarkymo įrankio Generuoti tendencijų rastrą gautą išvesties tendencijų rastrą.",
		rasterCollectionName: "Apdoroti rastrų grupę",
		rasterCollectionSnip: "Apdoroja kiekvieną daugiamačio rastro skiltį arba kiekvieną mozaikos rastro elementą. Šia funkcija taip pat galima sujungti keletą skilčių į vieną.",
		rasterCollectionDesc: "Funkcija Apdoroti rastrų grupę apdoroja kiekvieną daugiamačio rastro skiltį arba kiekvieną mozaikos rastro elementą. Šia funkcija taip pat galima sujungti keletą skilčių į vieną.<div><br/>Ši funkcija apdoroja kiekvieną daugiamačio rastro arba mozaikos rastro skiltį naudojant rastro funkcijos šabloną. Funkcija palaiko tokias parinktis: 1. Elemento funkcijai nurodyti rastro funkcijos šabloną. Pavyzdžiui, turite mozaikos duomenų rinkinį, kuriame yra sukaupti 20 metų Landsat vaizdai, ir norite apskaičiuoti kiekvienos laiko serijos scenos NDVI. Kaip Elemento funkciją nurodykite rastro funkcijos šabloną, kuriame yra NDVI rastro funkcija. 2. Agregavimo funkcijai nurodyti rastro funkcijos šabloną. Pavyzdžiui, turite daugiamatį rastrą, kuriame yra kiekvienos dienos temperatūros duomenys per 10 metų ir norite apskaičiuoti kiekvienų metų didžiausią temperatūrą. Agregavimo funkcijoje nurodykite rastro funkcijos šabloną, kuriame yra Gardelės statistikos funkcija, o operaciją nustatykite kaip Didžiausią. Agregavimo apibrėžimo parametre nustatykite Matmenį kaip StdTime, Tipą – kaip Intervalo raktažodį, o Raktažodžio intervalą – kaip Kasmet. Atkreipkite dėmesį, kad jei įvesties mozaikos duomenų rinkinys nėra daugiamatis, agregavimo funkcija neatitiks agregavimo apibrėžimo. Agregavimo funkcija sujungs visus elementus arba grupes į vieną, jei šie yra apibrėžti agregavimo funkcijos šablone. Daugiau informacijos apie mozaikos duomenų rinkinio grupių naudojimą rasite skyriuje Mozaikos duomenų rinkinių elementų naudojimas rastro funkcijų šablonuose. 3. Apdorojimo funkcijai nurodyti rastro funkcijos šabloną. Šio šablono funkcija arba funkcijų grandinė naudojama pateikti naująjį apdorotą rastrą. Pavyzdžiui, norėdami pakeisti apdoroto rastro sluoksnio rodymo vaizdą, nurodykite rastro funkcijos šabloną, kuriame yra Paletės funkcija. Atkreipkite dėmesį, kad įvedus daugiamatį rastrą, apdorojimo funkcija taikoma tuo metu rodomai skilčiai. Jei įvestis yra mozaikos sluoksnis arba mozaikos duomenų rinkinys, apdorojimo funkcija taikoma mozaikos rastrui naudojant pirmąjį metodą, kad būtų išspręsta persiklojimų problema. 3. Nurodykite bet kurio trijų funkcijų derinio šablonus. Pavyzdžiui, turite mozaikos duomenų rinkinį, kuriame yra laiko serijos Landsat vaizdų, ir norite sukurti didžiausio NDVI sudėtinį vaizdą. Kaip Elemento funkciją nurodykite rastro funkcijos šabloną, kuriame yra NDVI rastro funkcija. Kaip Agregavimo funkciją nurodykite rastro funkcijos šabloną, kuriame yra Gardelės statistikos funkcija, o operaciją nustatykite kaip Didžiausią. Kaip Apdorojimo funkciją nurodykite rastro funkcijos šabloną, kuriame yra Paletės funkcija. Atkreipkite dėmesį, kad funkcijos apdorojimo tvarka atitinka įvesties parametrų tvarką. Pavyzdžiui, Elemento funkcija bus apdorota pirmiausiai.</div>",
		randomName: "Atsitiktinis",
		randomSnip: "Sukuria rastrą su atsitiktinėmis pikselių reikšmėmis, gautomis iš pseudo atsitiktinio pasiskirstymo. Palaikomi keli pasiskirstymai ir atsitiktiniai skaičių generatoriai.",
		randomDesc: "Funkcija Atsitiktinis sukuria rastrą su atsitiktinėmis pikselių reikšmėmis, kurias galima naudoti rastro funkcijų šablonuose arba mozaikos duomenų rinkiniuose.<div><br/>Kai daugumai funkcijų būtinas vienas ar daugiau įvesties rastrų, funkcijai Atsitiktinis įvesties rastras nebūtinas. Tai reiškia, kad funkcija veikia panašiau į rastro duomenų rinkinį nei į funkciją, todėl ypač svarbu su ja elgtis atsargiai ją prie funkcijų grandinės pridedant arba iš jos išimant.</div>",
		shrinkName: "Sumažinti",
		shrinkSnip: "Sumažina pasirinktas zonas nurodytu gardelių skaičiumi, pakeičiant jas dažniausiai kaimynystėje pasitaikančios gardelės reikšme.",
		shrinkDesc: "Naudodami funkciją Sumažinti galite apibendrinti arba supaprastinti rastrus, tam tikras zonas sumažindami. Taip pat galite kontroliuoti taikomą apibendrinimo laipsnį.<div><br/>Pasirinktos zonos susitrauks arba sumažės leisdamos aplinkinių zonų gardelėms išsiplėsti. Iš esmės pasirinktos zonos reikšmės gali būti suprantamos kaip priekinės zonos, o kitos reikšmės lieka foninėmis reikšmėmis. Priekinių zonų gardelės gali būt keičiamos gardelėmis iš foninių zonų. Siauros zonos salos, kurių ribos gali sutapti su zonos ribomis, taip pat gali būti pakeistos.<div><br/>Apibendrinimo laipsnis gali būti valdomas parametru Gardelių skaičius. Pagal numatytuosius nustatymus ši reikšmė yra 1, o tai reiškia, kad pasirinktos zonos sumažės vienos gardelės dydį atitinkančiu plotu. Norėdami padidinti apibendrinimo laipsnį, galite nurodyti didesnę šio parametro reikšmę. Iš esmės tai lyg paleisti įrankį tiek kartų, koks skaičius nurodytas, ankstesnio paleidimo rezultatus įvedant į paskesnę iteraciją.</div>",
		trendToRGBName: "Tendencija į RGB",
		trendToRGBSnip: "Konvertuoja tendencijų rastrą į trijų kanalų (raudonos, žalios ir mėlynos spalvų) rastrą.",
		trendToRGBDesc: "Funkcija Tendencija į RGB konvertuoja tendencijų rastrą į trijų kanalų (raudonos, žalios ir mėlynos spalvų) rastrą. Tendencijų rastras generuojamas naudojant funkciją Generuoti tendencijų rastrą arba CCDC analizės rastro funkciją.<div><br/>Ši funkcija naudinga vizualizuojant modelio koeficiento duomenis iš funkcijos Generuoti tendenciją arba CCDC analizės funkcijos. Abi funkcijos įvertina kintančių pikselių reikšmių tendencijas, tačiau funkcijų rezultatus sunku tiesiogiai interpretuoti.<div><br/>Norint geriau atvaizduoti šios funkcijos rezultatus, kaip ir su daugeliu rastro funkcijų, gali prireikti naudoti Dinaminio diapazono derinimą (DRA).</div>",
		landTrendrName: "LandTrendr analizė",
		landTrendrSnip: "Įvertina pikselių reikšmių pokyčius laikui bėgant, naudojant Landsat paremtą žalos ir atsigavimo tendencijų aptikimo (LandTrendr) metodą ir sugeneruoja pokyčių analizės rastrą, kuriame pateikiami modelio rezultatai.",
		landTrendrDesc: "Šią rastro funkciją galima naudoti tik kaip įvestį rastro funkcijai Aptikti pokyčius naudojant pokyčių analizę. Norėdami sugeneruoti rastro išvestį, sujunkite LandTrendr analizės funkciją su Pokyčių aptikimo naudojant pokyčių analize funkcija, rastro funkcijos šablone ir naudokite šį šabloną kaip įvestį geoduomenų apdorojimo įrankiui Generuoti rastrą iš rastro funkcijos. Rezultatas yra rastras, kuriame yra informacija apie laiką, kai pasikeitė pikselių reikšmės.<div><br>Šios rastro funkcijos paskirtys yra išgauti stebimo elemento pokyčius, todėl idealūs įvesties daugiamačiai vaizdai turėtų registruoti nuoseklius stebėjimus laikui bėgant, ir juose neturėtų būti atmosferinių ar jutiklių trikdžių, debesų ar debesų šešėlių. Geriausia praktika yra naudoti normalizuotus duomenis, kuriuos galima maskuoti naudojant QA kanalą, pavyzdžiui, Landsat 1 rinkinio paviršiaus atspindžio produktus su debesų kauke.<div><br>Ši funkcija analizuoja vieną metinį vaizdą, o metinių skilčių skaičius turi būti lygus arba didesnis nei reikšmė, nurodyta parametre <strong>Mažiausias stebėjimų skaičius</strong>. Rekomenduojama turėti bent šešių metų duomenis.<div><br>Jei turite kasmėnesinius, kassavaitinius arba kasdienius duomenis, rekomenduojama parinkti po kelis vaizdus iš kiekvienų metų (pageidautina iš to pačio metų laiko), pašalinti debesis ir debesų šešėlį, ir sujungiant vaizdus sugeneruoti vieną vaizdą, kuris gerai atitinka stebėjimą. Jei kaip įvesties daugiamatis rastras pateikiami kasmėnesiniai, kassavaitiniai arba kasdieniai duomenys, funkcija identifikuos vieną skiltį analizei pagal datą, artimiausią nurodytai parametre <strong>Pritraukimo data</strong>.<div><br>Elementui kraštovaizdyje dažnai reikia laiko atsigauti po neilgalaikių pokyčių, pvz.: miško gaisro ar vabzdžių užkrato. Norėdami valdyti modelio atpažįstamą atsigavimo spartą, nustatykite parametrą Atsigavimo ribinė vertė. Skirtingas segmentas negali turėti atsigavimo spartos, greitesnės nei 1/atsigavimo ribinė vertė.<div><br>Atsigavimas po kraštovaizdžio pokyčio gali vykti teigiama arba neigiama kryptimi. Pavyzdžiui, kai kraštovaizdis netenka miško, augmenijos indekso reikšmių serija laikui bėgant rodo indekso reikšmių mažėjimą, o atsigavimas rodo laipsnišką augmenijos indekso reikšmių augimą arba teigiamą atsigavimo tendenciją. Nurodykite atsigavimo tendencijos kryptį naudodami parametrą <strong>Atsigavimas turi didėjimo tendenciją</strong>.",
		aggregateMultidimensionalName: "Agreguoti daugiamatį",
		aggregateMultidimensionalSnip: "Apjungia esamus daugiamačio rastro kintamųjų duomenis pagal matmenį.",
		aggregateMultidimensionalDesc: "Funkcija Agreguoti daugiamatį sukuria daugiamačio rastro sluoksnį sujungdama esamus daugiamačio rastro kintamųjų duomenis pagal matmenį.<div><br>Naudokite parametrą <strong>Matmens aprašas</strong>, kad pirmiausia filtruotumėte norimus agreguoti įvesties duomenys. Pavyzdžiui, jei turite 30 metų kasmėnesinių duomenų, tačiau norite sukurti tik pirmų 15 metų agreguotą sluoksnį, galite naudoti parametrą <strong>Matmens aprašas</strong>, kad nurodytumėte, kuriuos metus įtraukti į analizę.<div><br><ul><li>Ištraukti druskingumo duomenis sausio mėnesį per 10 metų laikotarpį. Pasirinkite <strong>Pagal reikšmes</strong>, nustatykite <strong>Matmenį</strong> kaip <strong>StdTime</strong> ir nustatykite  <strong>Reikšmes</strong> kaip <strong>Sausis</strong>.</li><li>Parodyti druskingumo duomenis gylyje nuo 0 iki 150 metrų. Pasirinkite <strong>Pagal intervalus</strong>, nustatykite <strong>Matmenį</strong> kaip <strong>StdZ</strong> ir nustatykite <strong>Minimalią reikšmę</strong> kaip <strong>-150</strong>, o <strong>Maksimalią reikšmę</strong> kaip <strong>0</strong>.</li><li>Ištraukti druskingumo duomenis per pirmas 10 kiekvieno sausio mėnesio dienų per 10 metų laikotarpį. Pasirinkite <strong>Pagal iteraciją</strong>, nustatykite <strong>Matmenį </strong>kaip <strong>StdTime</strong>, nustatykite <strong>Pirmosios iteracijos pradžią</strong> ir <strong>Pirmosios iteracijos pabaigą</strong> pasirinkdami atitinkamą iteracijos periodo pradžią ir pabaigą, nustatykite <strong>Žingsnį</strong> kaip <strong>1</strong>, o <strong>Matavimo vienetą</strong> – kaip <strong>Metai</strong>.</li></ul><div><br>Naudodami parametrą <strong>Agreguoti aprašą</strong> pasirinkite vertinamą matmenį ir agregavimo intervalą, panaudodami raktažodį, reikšmę arba reikšmių intervalą. Pavyzdžiui, jei turite 30 metų vandenyno paviršiaus temperatūros duomenis, renkamus kasdien ir kas 5 metrus iki 100 metrų gylio, galite naudoti skirtingas intervalo parinktis tokiems scenarijams:<div><br><ul><li>Kasdienių temperatūros duomenų agregavimas į kasmėnesinius duomenis, kur rezultatas yra daugiamatis rastras su 12 laiko skilčių, o kiekviena skiltis yra kiekvieno mėnesio agregavimas per visus 30 metų. Pasirinkite <strong>Intervalo raktažodis</strong> ir nustatykite raktažodį kaip <strong>Pasikartojantis kas mėnesį</strong>.</li><li>Agreguokite kasdienius temperatūros duomenis į mėnesio duomenis, kur rezultatas yra daugiamatis rastras su 360 skilčių, arba 12 skilčių per metus (30 metų x 12 mėnesių = 360 skilčių). Pasirinkite <strong>Intervalo raktažodis</strong> ir nustatykite raktažodį kaip <strong>Kas mėnesį</strong>.</li><li>Mėnesio temperatūrų duomenų agregavimas į 4 mėnesių intervalus. Pasirinkite <strong>Reikšmių intervalas</strong>, nustatykite <strong>Reikšmių intervalą</strong> kaip 4, nustatykite <strong>Matavimo vienetą</strong> kaip <strong>Mėnesiai</strong>.</li><li>Temperatūros duomenų agregavimas nuo 0 iki 25 metrų, tada nuo 25 iki 50 metrų, tada nuo 50 iki 100 metrų. Pasirinkite <strong>Reikšmių grupės</strong> ir minimalų bei maksimalų gylius nurodykite kaip <strong>0 25; 25 50; 50 100</strong>.</li></ul>",
		mergeRastersName: "Sujungti rastrus",
		mergeRastersSnip: "Sujungia kelius rastrų duomenų rinkinius erdviniu būdu arba per kintamuosius ir matmenis.",
		mergeRastersDesc: "Ši funkcija iš rastrų sąrašo sukuria sujungtą rastrą. Pavyzdžiui, jei turite mozaikinių duomenų rinkinį su 30 metų kasmėnesinių kritulių duomenų ir kitą duomenų rinkinį su 10 metų kasmėnesinių temperatūros duomenų, galite juos sujungti į abu kintamuosius turintį daugiamatį rastrą. <div><br>Jei įvesties daugiamačiai rastrai turi skirtingus kintamuosius, išvesties daugiamačiame rastre bus visi kintamieji. <div><br>Jei įvesties daugiamačiai rastrai turi skirtingus matmemis arba matmenų reikšmes, išvesties daugiamačiame rastre bus visi matmenys ir matmenų reikšmės. <div><br>Jei įvesties daugiamačiai rastrai turi tokius pačius matmenis ir kintamuosius, tačiau skirtingas erdvines aprėptis, tai išvesties daugiamačiame rastre bus kintamieji ir matmenys sujungtose erdvinėse aprėptyse.<div><br>Šią funkciją taip pat galima naudoti, kai turite kelis rastrus, kuriuos norite apdoroti kaip vieną elementą, pvz.: apskaičiuoti tokias pačias statistikas visiems, arba balansuojant spalvas, kad nereikėtų atskirai balansuoti kiekvieno vaizdo. Tai naudinga dirbant su vaizdais, dėl failų dydžio apribojimų saugomais kaip atskiros išklotinės; tokiu būdu išklotinės bus laikomos to pačio vaizdo dalimis.",
		boundaryCleanName: "Ribos valymas",
		boundaryCleanSnip: "Glodina ribą tarp zonų.",
		boundaryCleanDesc: "<p>Ši funkcija generalizuoja (supaprastina) rastrus suglodindama ribas tarp zonų. Ši funkcija suteikia parinkčių valdyti, kaip įvesties zonų gardelės veikia glodinimą, ir kiek glodinimo reikia pritaikyti. Kiekviena įvesties gardelė vertinama naudojant aštuonias tiesiogines jos kaimynes.</p><p>Glodinimo procesas pirmiausia rikiuoja kaimynines gardeles pagal tam tikrą prioritetą. Šis prioritetas nulemia, kuri kaimyninių gardelių zona gali pakeisti apdorojimo gardelės reikšmę išvestyje.</p><p>Prioritetas gali būti paremtas zonų reikšmėmis arba zonų dydžiais. Parametras <strong>Rūšiavimo tipas</strong> lemia, koks rūšiavimo tipas bus naudojamas. </p><p>Numatytasis nustatymas <strong>Nerūšiuoti</strong> prioritetą vertina pagal zonų reikšmes. Zonų su didesnėmis reikšmėmis gardelės turės didesnį prioritetą išsiplėsti į zonas su mažesnėmis reikšmėmis.</p><p>Prioriteto rūšiavimui galima naudoti zonų dydį (bendrą plotą). Naudojant nustatymą <strong>Mažėjimo tvarka</strong>, zonos rūšiuojamos pagal dydį mažėjimo tvarka. Bendro didesnio ploto zonos turės prioritetą plėstis į zonas, kurių plotai mažesni. Naudojant nustatymą <strong>Didėjimo tvarka</strong>, rūšiavimas vyksta priešingai: mažesnio bendro ploto zonos turės prioritetą plėstis į zonas, kurių bendras plotas mažesnis.</p><p>Glodinimo kiekį valdo parametras <strong>Du kartus vykdyti plėtrą ir sutraukimą</strong> , kuris nulemia, kiek kartų bus vykdomas plėtros ir sutraukimo procesas.</p><p>Jei šis nustatymas nepažymėtas, plėtros ir sutraukimo procesas vykdomas vieną kartą. Jei nustatymas pasirinktas, plėtros ir sutraukimo procesas vykdomas du kartus ir sukuria papildomą zonų ribų glodinimo laipsnį.</p><p>Jei visų aštuonių kaimyninių gardelių reikšmės yra tokios pačios kaip apdorojimo gardelės, išvesties gardelė išlaikys įvesties gardelės reikšmę.</p>",
		predictUsingRegressionName: "Prognozuoti naudojant regresiją",
		predictUsingRegressionSnip: "Apskaičiuoja prognozuojamą rastrą pagal rastrinių duomenų įvestį ir regresijos modelį. Regresijos modelis yra rastrinių geoduomenų apdorojimo įrankio <strong>Apmokyti atsitiktinių medžių regresijos modelį</strong> išvestis.",
		predictUsingRegressionDesc: "<p>Šis regresijos modelis aprašytas Esri regresijos aprašo (.ecd) faile. Jame yra visa konkretaus duomenų rinkinio arba duomenų rinkinių rinkinio informacija ir regresijos modelis, o jį sugeneruoja rastrinių geoduomenų apdorojimo įrankis <strong>Apmokyti atsitiktinių medžių regresijos modelį</strong>.</p><p>Įvestis gali būti vienas kanalas, daugiakanalis, daugiamatis rastras, arba šių tipų sąrašas. Įvesties rastrų tipai turi būti tokie patys kaip regresijos modelio apmokomo rastro.</p><ul><li>Jei įvestis yra daugiakanalis rastras, kiekvienas kanalas apdorojamas kaip prognozuojantis kintamasis. Kanalų eiliškumas turi būti toks pat kaip regresijos modelio apmokymo įrankio daugiakanalės įvesties. </li><li>Jei įvestis yra daugiakanalis rastras, kiekvienas kintamasis apdorojamas kaip prognozuojantis kintamasis, o kintamieji turi būti vieno kanalo ir turėti laiko matmenį. Kintamųjų eiliškumas ir pavadinimai turi atitikti įvestį, naudotą apmokant regresijos modelį. Išvestis yra daugiamatis rastras.</li><li>Įvestis gali būti elementų sąrašas. Elementų skaičius ir eiliškumas turi atitikti įvestį, naudotą apmokant regresijos modelį.</li></ul>",
		dimensionalMovingStatisticsName: "Perkėlimo pagal matmenį statistika",
		dimensionalMovingStatisticsSnip: "Skaičiuoja daugiamačių duomenų judėjimo laikotarpio statistiką pagal tam nurodytą matmenį.",
		dimensionalMovingStatisticsDesc: "<p>Perkėlimo pagal matmenį statistikos funkcija skaičiuoja įvairią statistiką, patenkančią į apibrėžtą intervalą, visoms matmens reikšmėms palei matmenį. Ši funkcija kaip įvestį naudoja daugiamatį rastrų sluoksnį ir kaip išvestį sukuria daugiamatį rastrų sluoksnį, kurio matmenų dydis toks pats kaip įvesties sluoksnio.</p><p>Galite nurodyti matmenį, į kurio matmens reikšmes atsižvelgiama skaičiuojant. Pagal numatytuosius nustatymus funkcija skaičiuoja palei pirmąjį neerdvinį matmenį. Intervalo dydį galite nurodyti nurodydami parametrus Langas atgal ir Langas pirmyn.</p><p>Parametrai Procentinė reikšmė ir Procentinės interpoliacijos tipas pasidaro pasiekiami, kai statistikos tipas nustatytas kaip Procentinė reikšmė. Naudodami tuos parametrus galite atitinkamai nurodyti, kokią procentinę dalį skaičiuoti, ir pasirinkti, kokio tipo interpoliaciją naudoti. Parametras Ciklinio kėlimo reikšmė pasidaro pasiekiamas, kai statistikos tipas nustatytas kaip Ciklinis vidurkis. Ciklinio kėlimo reikšmė naudojama linijinę reikšmę konvertuojant į nurodyto ciklinio vidurkio intervalą.</p>",
		terrainFlattenFunctionName: "Reljefo lyginimas",
		terrainFlattenFunctionSnip: "Koreguoja įvesties sintetinės apertūros radaro (SAR) duomenis dėl radiometrinių iškraipymų, atsirandančių dėl topografijos.",
		terrainFlattenFunctionDesc: "<p>Reljefo lyginimo rastrų funkcija ištaiso įvesties sintetinės apertūros radaro (SAR) duomenis dėl radiometrinių iškraipymų, atsirandančių dėl topografijos.</p><p>Įvesties radaro duomenys pirmiausia turi būti sukalibruotį į betą nulinį nustatymą. Norėdami sukalibruoti radaro duomenis į betą nulinį, naudokite radiometrinės kalibracijos taikymo įrankį.</p><p>Jei įvesties DEM apima ne visą SAR duomenų rinkinį, įrankis pateiks NoData reikšmes už DEM ribų esantiems gama nulinio, sigma nulinio, sklaidos ploto ir geometrinių iškraipymų išvesties pikseliams. Geometrinių iškraipymų kaukės išvesties atveju įrankis pateiks nenustatytas pikselių, esančių už DEM ribų, reikšmes.</p><p>Įvesties DEM turi būti WGS 1984 (EPSG:4326) geografinių koordinačių sistemoje.</p>",
		createColorCompositeFunctionName: "Kurti spalvų kompoziciją",
		createColorCompositeFunctionSnip: "Sukuria trijų kanalų rastrą iš daugiakanalio rastro duomenų rinkinio, kuriame kiekviename kanale galima naudoti algebros skaičiavimą, pagrįstą kanalų algebra.",
		createColorCompositeFunctionDesc: "<p>Spalvų kompozicijos kūrimo rastrų funkcija leidžia sukurti trijų kanalų rastrą iš daugiakanalio rastro duomenų rinkinio, kuriame kiekviename kanale galima naudoti algebros skaičiavimą, pagrįstą kanalų algebra.</p><p>Apskaičiuodami kanalų aritmetinį algoritmą, galite įvesti kiekvienos išraiškos vienos eilutės algebrinę formulę ir sukurti daugiakanalę išvestį. Palaikomi šie operatoriai: vienaženklis, pliusas (+), minusas (-), kartotinis (*) ir dalmuo (/).</p><p>Kai išraiškoje naudojate kanalo ID, kanalą identifikuokite prie kanalo numerio pridėdami priešdėlį B arba b.</p><p>Dažniausiai sintetinės apertūros radarams (SAR) linijiniais vienetais naudojamas dažnių kanalų derinys yra VV – raudona, VH – žalia ir VV/VH – mėlyna. Jei įvesties duomenys pateikiami decibelais, kanalų derinys turėtų būti VV – raudona, VH - žalia ir VV-VH - mėlynai.</p>",
		surfaceParametersName: "Paviršiaus parametrai",
		surfaceParametersSnip: "Naudodama geodezinius metodus, nustato tokius paviršiaus rastro parametrus kaip kryptį, nuolydį ir kelis išlinkio tipus.",
		surfaceParametersDesc: "<p>Funkcija Paviršiaus parametrai, naudodama geodezinius metodus nustato tokius paviršiaus rastro parametrus kaip kryptį, nuolydį ir kelis išlinkio tipus.</p><p>Šią funkciją galima naudoti tokiais tikslais:</p><ul><li>Skaičiuoti kryptį ir nuolydį naudojant geodezinius metodus.</li><li>Skaičiuoti įvairius išlinkio tipus iš įvesties paviršiaus rastro, pavyzdžiui, <strong>tangentinį (normalaus kontūro) išlinkį</strong>, kuris charakterizuoja tėkmės paviršiumi topografinį išsiskyrimą ir susitelkimą.</li></ul>",
		leastCostCorridorName: "Mažiausių kaštų koridorius",
		leastCostCorridorSnip: "Apskaičiuoja dviejų kaupimo sąnaudų atstumo rastrų sumą su galimybe taikyti slenkstinę reikšmę, pagrįstą procentinėmis arba kaupimo sąnaudomis.",
		leastCostCorridorDesc: "<p>Įvesties rastrai turėtų būti atstumo kaupimo ir atgalinės krypties rastrai, išvesti iš <strong>atstumo kaupimo</strong> arba <strong>atstumo paskirstymo</strong> funkcijos. Jie turėtų būti pagrįsti sąnaudų atstumu, o kuriant kiekvieno šaltinio sluoksnius turėtų būti naudojami tie patys parametrų nustatymai. Kuriant šiuos rastrus, neturėtų būti naudojami jokie nuo krypties priklausantys parametrai (horizontalusis veiksnys, vertikalusis veiksnys ir važiavimo kryptis).</p><p>Išvesties koridoriaus rastro reikšmės yra kaupimo sąnaudų suma, norint pasiekti nurodytą vietą su tais pačiais vienetais kaip ir įvesties kaupimo sąnaudų atstumo rastrai.</p><p>Jei nurodyta <strong>slenkstinė</strong> reikšmė yra didesnei nei maksimalios kaupimo sąnaudos, kai susumuojami du atstumo kaupimo rastrai, išvesties koridoriaus rastras apims tą patį plotą kaip ir įvesties kaupimo rastrai.</p><p>Jei nurodyta slenkstinė vertė yra mažesnė nei minimalią reikšmę koridoriaus rastre, grąžinamas įspėjamasis pranešimas, o išvesties rastras bus tuščias.</p><p>Išvesties koridoriaus rastre gali būti langelių, kurių kaupimo sąnaudos yra šiek tiek didesnės nei slenkstinė reikšmė. Jis yra iš atgalinės krypties rastrų, naudojančių langelius, kuriems priskirtos šiek tiek didesnės sąnaudos nei slenkstinė reikšmė, reikalinga norint prijungti atjungtus langelius prie koridoriaus.</p>",
		geometricMedianName: "Geometrinė mediana",
		geometricMedianSnip: "Funkcija Geometrinė mediana apskaičiuoja geometrinę medianą tarp pikselių kelių juostų vaizdų laiko eilutėje.",
		geometricMedianDesc: "<p>Ši funkcija sumažina laiko serijos vaizdų triukšmą ir nuokrypius, apskaičiuodama kiekvieno vaizdų rinkinio pikselių masyvo geometrinį pikselių vidurkį. Algoritmas palaiko spektrinius ryšius tarp pikselių spektro juostų, todėl išvestis gali būti naudojama analizei, pvz., augmenijos indeksams.</p><p>prieš Taikant šią funkciją, debesys ir šešėliai turi būti užmaskuoti naudojant duomenų rinkinio kokybės užtikrinimo juostą.</p><p>Jei įvesties vaizdas yra slankiojo kablelio, pvz., paviršiaus atspindžio koeficientas, kurio reikšmės yra nuo 0 iki 1, epsilono vertė 0,001 turėtų pateikti kokybiškus rezultatus.</p>"
	},
	rfxArgs: {
		rasterName: "Rastras",
		colorSchemeTypeName: "Spalvų paletės tipas",
		colormapName: "Paletė",
		colormapNameName: "Paletės pavadinimas",
		colorRampName: "Spalvų gama",
		contrastOffsetName: "Kontrasto poslinkis",
		brightnessOffsetName: "Ryškumo poslinkis",
		methodName: "Būdas",
		bandNamesName: "Kanalo pavadinimai",
		bandWavelengthsName: "Kanalo bangų ilgiai",
		bandIdsName: "Kanalo ID",
		missingBandActionName: "Trūkstamo kanalo veiksmas",
		conversionParametersName: "Konvertavimo parametrai",
		hillshadeTypeName: "Šešėlių rinkinio tipas",
		azimuthName: "Azimutas",
		altitudeName: "Aukštis",
		slopeTypeName: "Dydis",
		zFactorName: "Z veiksnys",
		PSPowerName: "Pikselio dydžio įtaka",
		PSZFactorName: "Pikselio dydžio faktorius",
		removeEdgeEffectName: "Išjungti numatytąją kraštų pikselių interpoliaciją",
		fromUnitName: "Iš vieneto",
		toUnitName: "Į vienetą",
		rasterTypeName: "Tipas",
		minName: "Išvesties minimumas",
		maxName: "Išvesties maksimumas",
		minPercentName: "Procentinio apkirpimo minimumas",
		maxPercentName: "Procentinio apkirpimo maksimumas",
		numberOfStandardDeviationName: "Standartinių nuokrypių skaičius",
		sigmoidStrengthLevelName: "Sigmoid stiprumo lygis",
		estimateStatsHistogramName: "Apskaičiuoti statistiką",
		DRAName: "Dinamiškai keičiamas intervalas",
		statisticsName: "Statistika",
		histogramsName: "Histogramos",
		statisticsHistogramName: "Apibrėžti statistiką ir histogramą",
		computeGammaName: "Aut. gama",
		useGammaName: "Naudoti gamą",
		gammaName: "Gama",
		inputNamesName: "Pavadinimai",
		expressionName: "Išraiška",
		cellsizeTypeName: "Gardelės dydžio tipas",
		extentTypeName: "Išplėsti tipą",
		classifierDefinitionFileName: "Įvesties apibrėžimo failas",
		raster1Name: "Raster1",
		raster2Name: "Raster2",
		raster3Name: "Raster3",
		trueRasterName: "Teisingas rastras",
		falseRasterName: "Neteisingas rastras",
		noDataInterpretationName: "NoData interpretavimas",
		noDataValuesName: "NoData reikšmės",
		includedRangesName: "Įterpti intervalai",
		curvatureTypeName: "Išlinkimo tipas",
		rastersName: "Rastrai",
		attributeTableName: "Lentelė",
		attributeTableTypeName: "Lentelės tipas",
		rowsName: "Eilučių skaičius",
		columnsName: "Stulpelių skaičius",
		kernelName: "Branduolio",
		mirrorEdgesName: "Veidrodinės kraštinės",
		influencesName: "Poveikiai",
		fieldsName: "Laukai",
		remapsName: "Iš naujo susieti lentelę",
		evalFromName: "Vertinimo skalė nuo",
		evalToName: "Vertinimo skalė iki",
		weightsName: "Svoris",
		DEMName: "DEM",
		shortRangeIDWRadiusName: "Trumpo diapazono IDW spindulys",
		maxVoidWidthName: "Maks. galiojantis plotis",
		sigmaGaussianName: "Adaptyvus užapvalinimas",
		contourTypeName: "Kontūro tipas",
		zBaseName: "Z pagrindas",
		numberOfContoursName: "Kontūrų skaičius",
		contourIntervalName: "Kontūro intervalas",
		nthContourLineInBoldName: "N-oji kontūro linija paryškinta",
		featureClassName: "Įvesties elementai",
		classIndexFieldName: "Darbui lauke",
		resolveOverlapMethodName: "Nustatyti persidengimo metodą",
		resamplingTypeName: "Matmenų keitimo tipas",
		inputCellsizeName: "Įvesties gardelės dydis",
		outputCellsizeName: "Išvesties gardelės dydis",
		pointFeatureClassName: "Pradiniai taškai",
		maxGrowthRadiusFieldName: "Maks. augimo spindulio laukas",
		similarityThresholdFieldName: "Panašumo ribinės vertės laukas",
		fillValueFieldName: "Užpildyti reikšmės lauką",
		spectralDetailName: "Išsami spektrinė informacija [1...20]",
		spatialDetailName: "Išsami erdvinė informacija [1...20]",
		minNumPixelsPerSegmentName: "Minimalus segmento dydis pikseliais",
		boundariesOnlyName: "Tik segmento ribos",
		statisticsTypeName: "Statistikos tipas",
		fillNoDataOnlyName: "Užpildyti tik NoData pikselius",
		inputDataTypeName: "Įvesties duomenų tipas",
		angleReferenceSystemName: "Kampo atskaitos sistema",
		outputDataTypeName: "Išvesties duomenų tipas",
		inputSamplePointFeatureClassName: "Įvesties pavyzdžiai",
		valueFieldName: "Reikšmės laukas",
		rasterInfoName: "Rastro informacija",
		interpolationMethodName: "Interpoliacijos metodas",
		radiusName: "Spindulys",
		radianceGainValuesName: "Spindėjimo padidėjimas",
		radianceBiasValuesName: "Spindėjimo nuokrypis",
		reflectedGainValuesName: "Atspindėjimo padidėjimas",
		reflectedBiasValuesName: "Atspindėjimo nuokrypis",
		sunElevationName: "Saulės aukštis (laipsniais)",
		albedoName: "Albedas",
		scaleFactorName: "Mastelio pakopa",
		offsetName: "Poslinkis",
		thresholdTypeName: "Ribinės vertės tipas",
		thresholdsName: "Ribinės vertės:",
		undefinedClassName: "Neapibrėžta klasė",
		minValueName: "Min.",
		maxValueName: "Maks.",
		operationName: "Veiksmas",
		clippingTypeName: "Iškirpimo tipas",
		clippingGeometryName: "Iškerpama forma / rastras",
		extentName: "Išvesties aprėptis",
		useInputFeatureGeometryName: "Iškerpamai formai naudoti įvesties elementus",
		remapDefinitionTypeName: "Iš naujo susieti aprašo tipą",
		inputRangeName: "Įvesties intervalai",
		outputValuesName: "Išvesties reikšmės",
		noDataRangeName: "NoData intervalai",
		inputFieldName: "Įvesties laukas",
		outputFieldName: "Išvesties laukas",
		inputMaxFieldName: "Maksimalus įvesties laukas (neprivaloma)",
		remapTableTypeName: "Iš naujo susieti lentelės tipą",
		allowUnmatchedName: "Įgalinti nesuderintas pikselio reikšmes",
		changeMissingValuesToNoDataName: "Keisti trūkstamas reikšmes į NoData",
		visibleBandIDName: "Regimojo kanalo ID",
		infraredBandIDName: "Infraraudonosios šviesos kanalo ID",
		scientificOutputName: "Mokslinė išvestis",
		bandIndexesName: "Kanalų indeksai",
		constantName: "Pastovus",
		weightName: "Svoris",
		minimumName: "Minimumas",
		maximumName: "Maksimumas",
		sourceDataName: "Šaltinio rastras",
		sourceFieldName: "Šaltinio laukas",
		costRasterName: "Sąnaudų rastras",
		maxDistanceName: "Maksimalus atstumas",
		valueRasterName: "Reikšmės rastras",
		costMultiplierName: "Sąnaudoms taikomas daugiklis",
		startCostName: "Pradinė kaina",
		accumCostResistanceRateName: "Suminis sąnaudų pasipriešinimo koeficientas",
		capacityName: "Apimtis",
		travelDirectionName: "Kelionės kryptis",
		cellSizeName: "Gardelės dydis",
		populationFieldName: "Gyventojų laukas",
		areaUnitsName: "Ploto vienetai",
		outputValueTypeName: "Išvesties gardelės reikšmės",
		barriersName: "Įvesties barjerai",
		destinationDataName: "Paskirties rastras",
		destinationFieldName: "Paskirties laukas",
		pathTypeName: "Maršruto tipas",
		observerFeaturesName: "Stebėtojo elementai",
		analysisMethodName: "Analizės metodas",
		analysisTypeName: "Analizės tipas",
		verticalErrorName: "Vertikali paklaida",
		refractivityCoefficientName: "Atspindėjimo koeficientas",
		surfaceOffsetName: "Paviršiaus poslinkis",
		observerElevationName: "Stebėtojo aukštis",
		observerOffsetName: "Stebėjimo poslinkis",
		innerRadiusName: "Vidinis spindulys",
		innerRadiusIs3DDistanceName: "Vidinis spindulys yra trimatis atstumas",
		outerRadiusName: "Išorinis spindulys",
		outerRadiusIs3DDistanceName: "Išorinis spindulys yra trimatis atstumas",
		horizontalStartAngleName: "Horizontalus pradžios kampas",
		horizontalEndAngleName: "Horizontalus pabaigos kampas",
		verticalUpperAngleName: "Vertikalus viršutinis kampas",
		verticalLowerAngleName: "Vertikalus apatinis kampas",
		zoneDataName: "Zonos rastras",
		zoneFieldName: "Zonos laukas",
		ignoreNoDataName: "Skaičiuojant nepaisyti NoData",
		temperatureRasterName: "Temperatūros rastras",
		inTemperatureUnitsName: "Temperatūros matavimo vienetai",
		outHeatIndexTemperatureUnitsName: "Karščio indekso matavimo vienetai",
		relativeHumidityRasterName: "Santykinio drėgnumo rastras",
		outWindChillTemperatureUnitsName: "Jutiminės temperatūros matavimo vienetai",
		windSpeedRasterName: "Vėjo greičio rastras",
		inWindSpeedUnitsName: "Vėjo greičio matavimo vienetai",
		valueName: "Reikšmė",
		propertyName: "Nuosavybės pavadinimas",
		jsonName: "JSON metaduomenys",
		zoneTableName: "Zonos atributų lentelė",
		attributeFieldNames: "Atributo lauko pavadinimai",
		backgroundName: "Fono reikšmė",
		whereClauseName: "Where sąlyga",
		minimumValueFieldName: "Minimali lauko pavadinimo reikšmė",
		maximumValueFieldName: "Maksimali lauko pavadinimo reikšmė",
		outValueFieldName: "Išvesties reikšmės lauko pavadinimas",
		defaultValueName: "Numatytoji išvesties reikšmė",
		conversionMatrixName: "Konversijos matrica",
		IsPseudoColorOutputName: "Yra netikros spalvos išvestis",
		unmappedAsRandomColorName: "Nesusietiems pikseliams atsitiktinai priskirti spalvą",
		distanceMethodName: "Atstumo metodas",
		flowDirRasterName: "Tėkmės krypties rastras",
		pourPointName: "Nutekėjimo taško(-ų) rastras",
		pourPointFieldName: "Nutekėjimo taško laukas",
		constantZName: "Pastovus Z",
		zOffsetName: "Z poslinkis",
		geoIdName: "Geoidas",
		calibrationTypeName: "Kalibravimo tipas",
		filterTypeName: "Filtro tipas",
		filterSizeName: "Filtro dydis",
		noiseModelName: "Triukšmo modelis",
		noiseVarianceName: "Triukšmo dispersija",
		additiveNoiseMeanName: "Papildomo triukšmo vidurkis",
		multiplicativeNoiseMeanName: "Didinamo triukšmo vidurkis",
		numberofLooksName: "Paieškų skaičius",
		dampingFactorName: "Slopinimo veiksnys",
		maskRasterName: "Kaukės rastras",
		nibbleValuesName: "Naudoti NoData reikšmes, jei jos yra arčiausiai",
		nibbleNoDataName: "NoData gardelėms priskirti artimiausio kaimyninio elemento reikšmes",
		zLimitName: "Z riba",
		flowDirectionTypeName: "Tėkmės krypties tipas",
		weightRasterName: "Svorio rastras",
		forceEdgeName: "Priversti visas kraštines gardeles tekėti laukan",
		streamRasterName: "Srauto rastras",
		surfaceRasterName: "Paviršiaus rastras",
		conversionType: "Konvertavimo tipas",
		distanceRaster1: "Atstumo rastras 1",
		distanceRaster2: "Atstumo rastras 2",
		costDistanceRaster: "Sąnaudų ir atstumo rastras",
		costBacklinkRaster: "Sąnaudų grąžinimo rastras",
		overridesName: "Perrašymai",
		fieldName: "Darbui lauke",
		signatureFileOrUrl: "Parašo failas arba URL",
		redName: "Raudona",
		greenName: "Žalia",
		blueName: "Mėlyna",
		infraredName: "Infraraudona",
		panchromaticName: "Panchromatinė",
		multispectralName: "Daugiaspektrė",
		pansharpeningType: "Panchromatinio paryškinimo tipas",
		sensorName: "Jutiklis",
		spatialReferenceName: "Koordinačių sistema",
		xCellsizeName: "X gardelės dydis",
		yCellsizeName: "Y gardelės dydis",
		xOriginName: "X registracijos taškas",
		yOriginName: "Y registracijos taškas",
		percentileName: "Procentinė reikšmė",
		neighborhoodType: "Kaimynystės tipas",
		widthName: "Plotis",
		heightName: "Aukštis",
		startAngleName: "Pradinis kampas",
		endAngleName: "Pabaigos kampas",
		neighborhoodValues: "Kaimynystės reikšmės",
		horizontalRaster: "Horizontalus rastras",
		horizontalFactor: "Horizontalus veiksnys",
		verticalRaster: "Vertikalus rastras",
		verticalFactor: "Vertikalus veiksnys",
		streamRaster: "Srauto rastras",
		flowDirRaster: "Tėkmės krypties rastras",
		numberNeighborCells: "Kaimyninių gardelių skaičius",
		zoneConnectivity: "Zonos jungimas",
		addLinkBehavior: "Pridėti nuorodą",
		excludedValue: "Neįtraukta reikšmė",
		constantFillCheck: "Generuoti užpildo rastrą pagal konstantą",
		fillRaster: "Užpildo rastras",
		constantFillValue: "Konstantos reikšmė",
		inputBitPositions: "Įvesties bitas",
		outputBitPositions: "Išvesties bitas",
		distanceTypeName: "Atstumo tipas",
		barrierDataName: "Rastrų kliūtys",
		pourPointDataName: "Nutekėjimo taško rastras",
		accumulationRasterName: "Srauto kaupimo rastras",
		snapDistanceName: "Priartinimo atstumas",
		orderMethodName: "Užsakymo metodas",
		directionMeasurementName: "Matavimo kryptis",
		processAsMultiband: "Apdoroti kaip daugiakanalį",
		processMultidimensional: "Apdoroti kaip daugiamatį",
		forceFlowDirectionConvention: "Nukreipti sutartą tėkmės kryptį grįžtamojo rastro link",
		initialAccumulation: "Pradinis kaupimas",
		maximumAccumulation: "Maksimalus kaupimas",
		sourceLocationBands: "Sukurti šaltinio eilutę ir stulpelį kaip papildomus išvesties kanalus",
		backDirectionBand: "Sukurti atgalinę kryptį kaip papildomą išvesties kanalą",
		numberOfCells: "Gardelių skaičius",
		zoneValues: "Zonos reikšmės",
		shrinkMethod: "Sumažinimo metodas",
		expandMethod: "Išplėtimo metodas",
		inputSpectralProfileType: "Spektrinio profilio tipas",
		spectralProfileFileName: "Spektrinis profilis",
		trainingFeatureFileName: "Mokymų elementas",
		nonNegative: "Nėra neigiamas",
		sumToOne: "Sumuoti į vieną",
		randomDistribution: "Paplitimas",
		meanName: "Vidurkis",
		probabilityName: "Tikimybė",
		alphaName: "Alfa",
		betaName: "Beta",
		rName: "r",
		nName: "Š",
		seed: "Taškas",
		randomNumberGenerator: "Atsitiktinis skaičių generatorius",
		cellFactor: "Gardelės faktorius",
		aggregationType: "Agregavimo technika",
		extentHandling: "Jei reikia, išplėskite apimtį",
		trendAnalysisDimensionName: "Matmens pavadinimas",
		trendAnalysisType: "Tendencijos tipas",
		harmonicFrequency: "Harmoninis dažnis",
		polynomialOrder: "Daugianarių eiliškumas",
		cycleLengthName: "Ciklo trukmė",
		trendAnalysisRMSE: "RMSE",
		trendAnalysisR2: "R kvadratas",
		trendAnalysisSlopePValue: "Nuolydžio koeficiento P-reikšmė",
		trendAnalysisSeasonalPeriod: "Sezoninis laikotarpis",
		cycleUnitName: "Ciklo vienetas",
		predictDimensionValues: "Reikšmės",
		dimensionDefinitionType: "Matmens apibrėžimas",
		predictDimensionStart: "Pradžia",
		predictDimensionEnd: "Pabaiga",
		predictDimensionInterval: "Reikšmių intervalas",
		dimensionUnit: "Vienetai",
		interpolationCellsizeName: "Interpoliacijos gardelės dydis",
		variableName: "Kintamieji",
		dimensionlessName: "Be matmenų",
		mdimDefinition: "Matmens apibrėžimas",
		dimensionName: "Matmuo",
		iterationStart: "Pirmosios iteracijos pradžia",
		iterationEnd: "Pirmosios iteracijos pabaiga",
		intervalStart: "Intervalo pradžia",
		intervalEnd: "Intervalo pabaiga",
		stepName: "Žingsnis",
		rangesName: "Intervalai",
		minValue: "Minimali reikšmė",
		maxValue: "Maksimali reikšmė",
		changeAnalysisRasterName: "Pokyčių analizės rastras",
		changeTypeName: "Keisti tipą",
		segmentDate: "Segmento data",
		changeDirectionName: "Pokyčių kryptis",
		maxNumChangesName: "Didžiausias pokyčių skaičius",
		filterByYear: "Filtruoti pagal metus",
		minimumYear: "Minimali reikšmė",
		maximumYear: "Maksimali reikšmė",
		filterByDuration: "Filtruoti pagal trukmę",
		minimumDuration: "Minimali trukmė",
		maximumDuration: "Maksimali trukmė",
		filterByMagnitude: "Filtruoti pagal stiprumą",
		minimumMagnitude: "Minimalus stiprumas",
		maximumMagnitude: "Maksimalus stiprumas",
		filterByStartValue: "Filtruoti pagal pradžios reikšmę",
		minimumStartValue: "Minimali pradžios reikšmė",
		maximumStartValue: "Maksimali pradžios reikšmė",
		filterByEndValue: "Filtruoti pagal pabaigos reikšmę",
		minimumEndValue: "Minimali pabaigos reikšmė",
		maximumEndValue: "Maksimali pabaigos reikšmė",
		modelTypeName: "Modelio tipas",
		fromRasterName: "Iš rastro",
		toRasterName: "Į rastrą",
		computeChangeMethod: "Skaičiuoti pokyčių metodą",
		fromClassValues: "Iš klasės reikšmių (pvz.: 2 5)",
		toClassValues: "Į klasės reikšmes (pvz.: 2 5)",
		keepMethod: "Filtro metodas",
		useColorMethod: "Apibrėžti perėjimo spalvas",
		detectChangeBands: "Pakeitimų aptikimo kanalai (prasideda nuo 0)",
		tmaskBands: "Laikino maskavimo kanalai (prasideda nuo 0)",
		chiSquaredThreshold: "Chi kvadrato slenkstis aptikti pokyčius",
		minAnomaly: "Mažiausi iš eilės pastebėti anomalijos atvejai",
		updatingFrequency: "Tvirtinimo dažnumo atnaujinimas (metais)",
		distanceAccumulationRasterName: "Sukaupto atstumo rastras",
		costBackdirectionRasterName: "Atgalinės krypties arba Tėkmės krypties rastras",
		rasterCollectionName: "Rastrų rinkinys",
		itemFunctionName: "Elemento funkcija",
		aggregationFunctionName: "Agregavimo funkcija",
		processingFunctionName: "Apdorojimo funkcija",
		aggregationDefinitionName: "Agregavimo aprašas",
		queryGeometryName: "Užklausos geometrija",
		factorFunctionZeroFactor: "Nulinis veiksnys",
		factorFunctionCutAngle: "Kirpimo kampas",
		factorFunctionSideFactor: "Šalutinis veiksnys",
		factorFunctionSlope: "Pasvirimas",
		factorFunctionLowCutAngle: "Mažas kirpimo kampas",
		factorFunctionHighCutAngle: "Didelis kirpimo kampas",
		factorFunctionCosPower: "Kosinuso laipsnis",
		factorFunctionSecPower: "Kirstinės laipsnis",
		factorFunctionTablePath: "Lentelės kelias",
		processingBand: "Apdorojimo kanalas",
		processingBandName: "Apdorojimo kanalo pavadinimas",
		snappingDate: "Pritraukimo data",
		maxNumSegments: "Didžiausias segmentų skaičius",
		vertexCountOvershoot: "Viršūnių skaičiaus viršijimas",
		spikeThreshold: "Smailių ribinė vertė",
		recoveryThreshold: "Atsigavimo ribinė vertė",
		minNumObs: "Mažiausias stebėjimų skaičius",
		pValueThreshold: "P reikšmės ribinė vertė",
		bestModelProportion: "Geriausia modelio proporcija",
		preventOneYearRecovery: "Neleisti vienų metų atsigavimo",
		recoveryIncreaseTrend: "Atsigavimas turi didėjimo tendenciją",
		outputOtherBands: "Išvesti kitus kanalus",
		sortType: "Rūšiavimo tipas",
		numberOfRuns: "Du kartus vykdyti plėtrą ir sutraukimą",
		percentileValue: "Procentinė reikšmė",
		percentileInterpolationType: "Procentinės interpoliacijos tipas",
		rasterInfoProperty: "Žemės nuosavybė",
		rasterInfoValue: "Vertė",
		rasterInfoColumns: "Stulpeliai",
		rasterInfoRows: "Eilutės",
		rasterInfoBandCount: "Kanalų skaičius",
		rasterInfoPixelSizeX: "Gardelės dydis X",
		rasterInfoPixelSizeY: "Gardelės dydis Y",
		rasterInfoPixelType: "Pikselių tipas",
		rasterExtentTop: "Viršus",
		rasterExtentBottom: "Apačia",
		rasterExtentLeft: "Kairė",
		rasterExtentRight: "Dešinė",
		rasterStatisticsNotCalculated: "Nepavyko apskaičiuoti statistikos.",
		spatialReferenceProjection: "Projekcija",
		spatialReferenceWkid: "WKID",
		spatialReferenceLatestWkid: "Ankstesnis WKID",
		spatialReferenceWkt: "WKT",
		spatialReferenceVcsWkid: "VCSWKID",
		spatialReferenceLatestVcsWkid: "Ankstesnis VCSWKID",
		spatialReferenceAuthority: "Autoritetingas šaltinis",
		spatialReferenceLinearUnit: "Linijinių dydžių vienetas",
		spatialReferenceAngularUnit: "Kampinių dydžių vienetas",
		spatialReferenceFalseEasting: "Platumos poslinkis",
		spatialReferenceFalseNorthing: "Ilgumos poslinkis",
		spatialReferenceCentralMeridian: "Centrinis dienovidinis",
		spatialReferencePrimeMeridian: "Nulinis dienovidinis",
		spatialReferenceStandardParallel1: "Standartinė lygiagretė 1",
		spatialReferenceStandardParallel2: "Standartinė lygiagretė 2",
		spatialReferenceLatitudeOfOrigin: "Pradinio taško platuma",
		spatialReferenceAuxiliarySphereType: "Pagalbinės sferos tipas",
		spatialReferenceDatum: "Data",
		spatialReferenceSpheroid: "Sferoidas",
		spatialReferenceSemimajorAxis: "Didžioji pusašė",
		spatialReferenceSemiminorAxis: "Mažoji pusašė",
		spatialReferenceInverseFlattening: "Atvirkštinis plokštėjimas",
		inputDefinitionFileName: "Įvesties apibrėžimo failas",
		deleteName: "Pašalinti",
		addVariableName: "Pridėti kintamąjį",
		maxNumPixelsPerSegment: "Maksimalus segmento dydis pikseliais",
		forwardWindowName: "Į kitą langą",
		backwardWindowName: "Į ankstesnį langą",
		noDataHandlingName: "NoData apdorojimas",
		circularWrapValueName: "Ciklinio kėlimo reikšmė",
		fromClassNameFieldName: "Klasės pavadinimų lauko pavadinimas iš rastro",
		toClassNameFieldName: "Klasės pavadinimų lauko pavadinimas į rastrą",
		targetRasterName: "Paskirties rastras",
		circularWrapValue: "Ciklinio kėlimo reikšmė",
		bandIndexesR: "Raudona išraiška",
		bandIndexesG: "Žalia išraiška",
		bandIndexesB: "Mėlyna išraiška",
		exampleName: "Pavyzdys",
		inputName: "Įvestis",
		outputName: "Išvestis",
		optionalName: "Neprivalomas",
		browseDefinitionFile: "Rasti apribrėžimo failą",
		selectDefinitionFile: "Pasirinkti įvesties apibrėžimo failą",
		inputDefinitionURL: "Įvesties apibrėžimo failo URL",
		enterDefinitionFileURL: "Įvesti apibrėžimo failo URL",
		browseXMLFile: "Rasti XML failą",
		selectStatsFile: "Pasirinkti statistikos ir histogramų failą",
		enterXMLFileURL: "Įvesti XML failo URL",
		xmlFileURL: "XML failo URL",
		circularCalculation: "Apskaičiuoti ciklinę statistiką",
		localSurfaceType: "Vietos paviršiaus tipas",
		surfaceParameterType: "Parametro tipas",
		neighborhoodDistance: "Kaimynystės atstumas",
		useAdaptiveNeighborhood: "Naudoti adaptyviąją kaimynystę",
		outputSlopeType: "Išvesties nuolydžio matavimas",
		projectAzimuths: "Projektuoti geodezinius azimutus",
		useEquatorialAspect: "Naudoti pusiaujinę projekciją",
		zUnit: "Z vienetai",
		analysisMask: "Analizės kaukė",
		stdDeviation: "Standartinį nuokrypį",
		"true": "Taip",
		"false": "Ne",
		costDistanceRaster1: "1 įvesties suminių sąnaudų ir atstumo rastras",
		costDistanceRaster2: "2 įvesties suminių sąnaudų ir atstumo rastras",
		threshold: "Ribinė vertė",
		thresholdMethod: "Ribinės vertės metodas",
		directionRaster1: "1 įvesties atgalinės krypties rastras",
		directionRaster2: "2 įvesties atgalinės krypties rastras",
		maxIterations: "Didžiausias iteracijų skaičius",
		epsilon: "Epsilon"
	},
	enumLabels: {
		attributeTableTypeManual: "Rankinis",
		attributeTableTypeExternal: "Išorinis",
		clrSchemeTypeColormap: "Paletė",
		clrSchemeTypeColorRamp: "Spalvų seka",
		colormapTypeElevation: "Paviršius",
		colormapTypeGray: "Pilkas",
		colormapTypeNDVI: "NDVI",
		colormapTypeNDVI2: "NDVI2",
		colormapTypeNDVI3: "NDVI3",
		colormapTypeRandom: "Atsitiktinis",
		none: "Nėra",
		slopeTypeAdjusted: "Koreguotas",
		slopeTypeDegree: "Laipsnis",
		slopeTypePercentRise: "PercentRise",
		slopeTypeScaled: "Apskaičiuota",
		stretchTypeMinMax: "MinMax",
		stretchTypePercentMinMax: "PercentMinMax",
		stretchTypeSigmoid: "Sigmoid",
		stretchTypeStdDev: "StdDev",
		hillshadeTypeSimple: "Tradicinis",
		hillshadeTypeMultidirectional: "Daugiakryptis",
		bandComboByNames: "Kanalo pavadinimai",
		bandComboByWavelength: "Kanalo bangų ilgiai",
		bandComboByIDs: "Kanalo ID",
		missingBandActionBestMatch: "Geriausias rezultatas",
		missingBandActionFail: "Nepavyko",
		unitTypeCelsius: "Celsijaus laipsniai",
		unitTypeCentimeters: "Centimetrai",
		unitTypeDecimeters: "Decimetrai",
		unitTypeFahrenheit: "Farenheito laipsniai",
		unitTypeFeet: "Pėdos",
		unitTypeFeetPerSec: "Pėdos per sekundę (pėd./sek.)",
		unitTypeInches: "Coliai",
		unitTypeKelvin: "Kelvinai",
		unitTypeKilometers: "Kilometrai",
		unitTypeKmsPerHour: "Kilometrai per valandą (km/h)",
		unitTypeKnots: "Mazgai (mz)",
		unitTypeMeters: "Metrai",
		unitTypeMetersPerSec: "Metrai per sekundę (m/s)",
		unitTypeMiles: "Mylios",
		unitTypeMilesPerHour: "Mylios per valandą (mylių/val.)",
		unitTypeMillimeters: "Milimetrai",
		unitTypeNauticalMiles: "Jūrmylės",
		unitTypeYards: "Jardai",
		unitTypeDecimalDegrees: "Dešimtainiai laipsniai",
		unitTypePoints: "Taškai",
		unitTypeUnknown: "Nežinoma",
		unitTypeSqMapUnits: "Kvadratiniai žemėlapio vienetai",
		unitTypeSqMiles: "Kvadratinės mylios",
		unitTypeSqKms: "Kvadratiniai kilometrai",
		unitTypeAcres: "Akrai",
		unitTypeHectares: "Hektarai",
		unitTypeSqYards: "Kvadratiniai jardai",
		unitTypeSqFt: "Kvadratinės pėdos",
		unitTypeSqInches: "Kvadratiniai coliai",
		unitTypeSqMts: "Kvadratiniai metrai",
		unitTypeSqCms: "Kvadratiniai centimetrai",
		unitTypeSqMms: "Kvadratiniai milimetrai",
		cellsizeTypeFirst: "Pirmas",
		cellsizeTypeMin: "Min.",
		cellsizeTypeMax: "Maks.",
		cellsizeTypeMean: "Vidurkis",
		cellsizeTypeLast: "Paskutinis",
		extentTypeFirst: "Pirmas",
		extentTypeIntersection: "Sankirta",
		extentTypeUnion: "Sąjunga",
		extentTypeLast: "Paskutinis",
		noDataInterpretAny: "Atitikti bet kurį",
		noDataInterpretAll: "Atitikti visus",
		curvatureTypeStandard: "Standard",
		curvatureTypeProfile: "Profilis",
		curvatureTypePlanform: "Plano forma",
		filterTypeLineDetectionHorizontal: "Linijos aptikimas – horizontali",
		filterTypeLineDetectionVertical: "Linijos aptikimas – vertikali",
		filterTypeLineDetectionLeftDiagonal: "Linijos aptikimas – įstrižainė kairėn",
		filterTypeLineDetectionRightDiagonal: "Linijos aptikimas – įstrižainė dešinėn",
		filterTypeGradientNorth: "Gradientas – šiaurė",
		filterTypeGradientWest: "Gradientas – vakarai",
		filterTypeGradientEast: "Gradientas – rytai",
		filterTypeGradientSouth: "Gradientas – pietūs",
		filterTypeGradientNorthEast: "Gradientas – šiaurės rytai",
		filterTypeGradientNorthWest: "Gradientas – šiaurės vakarai",
		filterTypeSmoothArithmeticMean: "Supaprastinti aritmetinį vidurkį",
		filterTypeSmoothing3x3: "Supaprastinama 3x3",
		filterTypeSmoothing5x5: "Supaprastinama 5x5",
		filterTypeSharpening3x3: "Ryškinama 3x3",
		filterTypeSharpening5x5: "Ryškinama 5x5",
		filterTypeLaplacian3x3: "Laplaso 3x3",
		filterTypeLaplacian5x5: "Laplaso 5x5",
		filterTypeSobelHorizontal: "Sobelio horizontalus",
		filterTypeSobelVertical: "Sobelio vertikalus",
		filterTypeSharpen: "Ryškinti",
		filterTypeSharpen2: "Dar ryškinti",
		filterTypePointSpread: "Taškas",
		userDefined: "Vartotojo nustatytas",
		ContourTypeLines: "Kontūras – linijos",
		ContourTypeFill: "Kontūras – užpildas",
		ContourTypeSmoothOnly: "Tik glotnus paviršius",
		rasterizeFirst: "Pirmas",
		rasterizeLast: "Paskutinis",
		rasterizeSmallest: "Mažiausias",
		rasterizeLargest: "Didžiausias",
		resamplingTypeNearest: "Artimiausias kaimynas",
		resamplingTypeBilinear: "Bitiesinis interpoliavimas",
		resamplingTypeCubic: "Kubinė konvoliucija",
		resamplingTypeMajority: "Dauguma",
		resamplingTypeBilinearPlus: "Bitiesinis interpoliavimas plius",
		resamplingTypeGauss: "Gauso suliejimas",
		resamplingTypeGaussPlus: "Gauso suliejimas plius",
		resamplingTypeAverage: "Vidurkis",
		resamplingTypeMinimum: "Minimumas",
		resamplingTypeMaximum: "Maksimumas",
		resamplingTypeVectorAvg: "Vektorių vidurkis",
		minimum: "Minimumas",
		maximum: "Maksimumas",
		mean: "Vidurkis",
		stdDeviation: "Standartinis nuokrypis",
		uvMagDirTypeUV: "U-V",
		uvMagDirTypeMagDir: "Dydis-kryptis",
		unknown: "Nežinoma",
		angleRefSysGeographic: "Geografinis",
		angleRefSysArithmetic: "Aritmetinis",
		interpolateIrregularDataNearest: "Artimiausias kaimynas",
		interpolateIrregularDataBilinear: "Bilinijinis",
		interpolateIrregularDataTinningLinear: "Linijinis dengimas",
		interpolateIrregularDataTinningNaturalNeighbor: "Natūralus kaimynas",
		interpolateIrregularDataTinningIDW: "Pasvertas atvirkščiai proporcingas atstumas",
		esriRasterThresholdTypeConstant: "Pastovus",
		esriRasterThresholdTypeOtsu: "Otsu",
		esriRasterThresholdTypeTsai: "Tsai",
		esriRasterThresholdTypeKapur: "Kapur",
		esriRasterThresholdTypeKittler: "Kittler",
		esriRasterThresholdTypeRosin: "Rosin",
		argStatsTypeMax: "Arg. maks.",
		argStatsTypeMin: "Arg. min.",
		argStatsTypeMedian: "Arg. medianas",
		argStatsTypeDuration: "Trukmė",
		arithmeticOpPlus: "Plius",
		arithmeticOpMinus: "Minus",
		arithmeticOpMultiply: "Dauginti",
		arithmeticOpDivide: "Dalinti",
		arithmeticOpPower: "Galia",
		arithmeticOpMode: "Režimas",
		clipTypeOutside: "Iškirpti išorėje",
		clipTypeInside: "Iškirpti viduje",
		yes: "Taip",
		no: "Ne",
		densities: "Tankumas",
		expectedCounts: "Tikėtini skaičiai",
		planar: "Plokščiasis",
		geodesic: "Geodezinis",
		eachCell: "Kiekviena gardelė",
		eachZone: "Kiekviena zona",
		bestSingle: "Geriausias atskiras",
		allSightlines: "Visos apžvalgos linijos",
		perimeterSightlines: "Perimetro apžvalgos linijos",
		frequency: "Dažnis",
		observers: "Stebėtojai",
		majority: "Dauguma",
		median: "Mediana",
		minority: "Mažuma",
		percentile: "Procentinė dalis",
		range: "Intervalas",
		sum: "Suma",
		variety: "Atmaina",
		ndvi: "NDVI",
		savi: "SAVI",
		bandArithmeticMethodTSAVI: "Transformuota SAVI",
		bandArithmeticMethodMSAVI: "Modifikuota SAVI",
		bandArithmeticMethodSultan: "Sultan formulė",
		gemi: "GEMI",
		pvi: "PVI",
		gvi: "GVI (Landsat TM)",
		vari: "VARI",
		sr: "SR",
		gndvi: "GNDVI",
		ndvire: "NDVIre",
		srre: "SRre",
		mtvi2: "MTVI2",
		rtviCore: "RTVICore",
		cire: "CIre",
		cig: "CIg",
		ndwi: "NDWI",
		evi: "EVI",
		ironOxide: "Geležies oksidas",
		ferrousMinerals: "Geležies mineralai",
		clayMinerals: "Molio mineralai",
		wndwi: "WNDWI",
		bai: "BAI",
		mndwi: "MNDWI",
		nbr: "NBR",
		ndbi: "NDBI",
		ndmi: "NDMI",
		ndsi: "NDSI",
		localSquareRoot: "Kvadratinė šaknis",
		localACos: "ACos",
		localASin: "ASin",
		localATan: "ATan",
		localATanH: "ATanH",
		localAbs: "Abs",
		localBitwiseNot: "Ne bitų",
		localBooleanNot: "Ne loginis",
		localCos: "Cos",
		localCosH: "CosH",
		localExp: "Exp",
		localExp10: "Exp10",
		localExp2: "Exp2",
		localInt: "Int",
		localIsNull: "Yra Null",
		localFloat: "Realus skaičius",
		localLn: "Ln",
		localLog10: "Log10",
		localLog2: "Log2",
		localNegate: "Paneigti",
		localRoundDown: "Suapvalinti iki mažesnio",
		localRoundUp: "Suapvalinti iki didesnio",
		localSin: "Sin",
		localSinH: "SinH",
		localTan: "Tan",
		localTanH: "TanH",
		localACosH: "ACosH",
		localASinH: "ASinH",
		localPlus: "Plius",
		localMinus: "Minus",
		localTimes: "Laikai",
		localPower: "Galia",
		localBitwiseAnd: "Bitinis IR",
		localBitwiseLeftShift: "Bitinis kairysis poslinkis",
		localBitwiseOr: "Bitinis ARBA",
		localBitwiseRightShift: "Bitinis dešinysis poslinkis",
		localBitwiseXor: "Bitinis Xor",
		localBooleanAnd: "Loginis IR",
		localBooleanOr: "Loginis ARBA",
		localBooleanXor: "Loginis Xor",
		localDivide: "Dalinti",
		localEqualTo: "Lygu",
		localGreaterThan: "Daugiau nei",
		localGreaterThanEqual: "Daugiau nei arba lygu",
		localLessThan: "Mažiau nei",
		localLessThanEqual: "Mažiau negu arba lygu",
		localMod: "Mod",
		localNotEqual: "Nelygu",
		localATan2: "ATan2",
		localSquare: "Kvadratas",
		localSetNull: "Nustatyti Null",
		remapDefTypeList: "Sąrašas",
		remapDefTypeTable: "Lentelė",
		remapTableTypeSimple: "Negrupuota",
		remapTableTypeDynamic: "Dinaminis",
		remapTableTypeReassignment: "Priskyrimas iš naujo",
		geomCorrectionByConstZ: "Naudoti pastovų Z",
		geomCorrectionByDEM: "Naudoti DEM",
		radarCalibBetaNought: "Beta nulinis",
		radarCalibSigmaNought: "Sigma nulinis",
		radarCalibGammaNought: "Gama nulinis",
		speckleFilterTypeLee: "Lee filtras",
		speckleFilterTypeEnhancedLee: "Pagerintas Lee filtras",
		speckleFilterTypeFrost: "Šalčio filtras",
		speckleFilterTypeKuan: "Kuan filtras",
		speckleNoiseModelMul: "Didinamas triukšmas",
		speckleNoiseModelAdd: "Papildomas triukšmas",
		speckleNoiseModelAddnMul: "Papildomas ir didinamas triukšmas",
		mosaicOpTypeFirst: "Pirmas",
		mosaicOpTypeLast: "Paskutinis",
		mosaicOpTypeMin: "Min.",
		mosaicOpTypeMax: "Maks.",
		mosaicOpTypeMean: "Vidurkis",
		mosaicOpTypeBlend: "Maišyti",
		mosaicOpTypeSum: "Suma",
		integer: "Sveikasis skaičius",
		rfxD8: "D8",
		rfxMFD: "MFD",
		dinf: "Dinf",
		vertical: "Vertikalė",
		horizontal: "Horizontalė",
		localCellStatisticsMajority: "Dauguma",
		localCellStatisticsMax: "Maksimumas",
		localCellStatisticsMean: "Vidurkis",
		localCellStatisticsMedian: "Mediana",
		localCellStatisticsMin: "Minimumas",
		localCellStatisticsMinority: "Mažuma",
		localCellStatisticsRange: "Intervalas",
		localCellStatisticsStdDev: "Standartinis nuokrypis",
		localCellStatisticsSum: "Suma",
		localCellStatisticsVariety: "Atmaina",
		localCellStatisticsMajorityIgnoreND: "Dauguma (nepaisyti NoData)",
		localCellStatisticsMaxIgnoreND: "Maksimumas (nepaisyti NoData)",
		localCellStatisticsMeanIgnoreND: "Vidurkis (nepaisyti NoData)",
		localCellStatisticsMedianIgnoreND: "Mediana (nepaisyti NoData)",
		localCellStatisticsMinIgnoreND: "Minimumas (nepaisyti NoData)",
		localCellStatisticsMinorityIgnoreND: "Mažuma (nepaisyti NoData)",
		localCellStatisticsRangeIgnoreND: "Intervalas (nepaisyti NoData)",
		localCellStatisticsStdDevIgnoreND: "Standartinis nuokrypis (nepaisyti NoData)",
		localCellStatisticsSumIgnoreND: "Suma (nepaisyti NoData)",
		localCellStatisticsVarietyIgnoreND: "Įvairovė (nepaisyti NoData)",
		localCellStatisticsTypePercentileIgnoreND: "Procentas (nepaisyti NoData)",
		fromSource: "Iš šaltinio",
		toSource: "Į šaltinį",
		colorspaceConversionRgbToHsv: "RGB į HSV",
		colorspaceConversionHsvToRgb: "HSV į RGB",
		pansharpenTypeIHS: "IHS",
		pansharpenTypeBrovey: "Brovey",
		pansharpenTypeEsri: "Esri",
		pansharpenTypeMean: "Vidurkis",
		pansharpenTypeGramSchmidt: "Gram-Schmidt",
		rectangleNeighborhood: "Stačiakampis",
		circleNeighborhood: "Apskritimas",
		annulusNeighborhood: "Žiedas",
		wedgeNeighborhood: "Pleištas",
		irregularNeighborhood: "Nereguliarus",
		weightNeighborhood: "Svoris",
		four: "Keturi",
		eight: "Aštuoni",
		within: "Viduje",
		cross: "Skersai",
		addLink: "Pridėti nuorodą",
		noLink: "Be nuorodos",
		weightedMean: "Svertinis vidurkis",
		ls8QCBitPatternCirrus: "Landsat 8 plunksniniai debesys",
		ls8QCBitPatternCloud: "Landsat 8 debesis",
		ls8QCBitPatternCloudShadow: "Landsat 8 debesies šešėlis",
		ls8QCBitPatternDesignatedFill: "Landsat 8 priskirtas užpildas",
		ls8QCBitPatternDroppedFrame: "Landsat 8 pašalintas rėmelis",
		ls8QCBitPatternSnowIce: "Landsat 8 sniegas / ledas",
		ls8QCBitPatternTerrainOcclusion: "Landsat 8 teritorijos okliuzija",
		ls8QCBitPatternVegetation: "Landsat 8 augmenija",
		ls8QCBitPatternWater: "Landsat 8 vanduo",
		downStream: "Pasroviui",
		upStream: "Prieš srovę",
		strahler: "STRAHLER",
		shreve: "SHREVE",
		currentSlice: "Esama skiltis",
		allSlices: "Visos skiltys",
		expandDistance: "ATSTUMAS",
		expandMorphological: "MORFOLOGINIS",
		spectralProfileFile: "Spektrinis profilis",
		trainingFeatureFile: "Mokymų elementas",
		randomDistributionTypeUniform: "Vienodas",
		randomDistributionTypeUniformInteger: "Sveikasis skaičius",
		randomDistributionTypeNormal: "Įprastas",
		randomDistributionTypeExponential: "Eksponentinis",
		randomDistributionTypePoisson: "Poisson",
		randomDistributionTypeGamma: "Gama",
		randomDistributionTypeBinomial: "Binominis",
		randomDistributionTypeGeometric: "Geometrinės funkcijos",
		randomDistributionTypeNegativeBinomial: "Neigiamas binominis",
		randomGeneratorTypeStandardCRand: "Standartinis C Rand",
		randomGeneratorTypeAlgorithmACM599: "ACM surinktas algoritmas 599",
		randomGeneratorTypeMersenneTwister: "Mersenne Twister",
		sumName: "Suma",
		medainName: "Mediana",
		trendLinear: "Linijinis",
		trendHarmonic: "Harmoninis",
		trendPolynomial: "Daugianaris",
		trendMannKendall: "Mann-Kendall",
		trendSeasonalKendall: "Sezoninis Kendall",
		dimensionByValue: "Pagal reikšmę",
		dimensionByInterval: "Pagal intervalą",
		mdimDefTypeAll: "Visi",
		mdimDefTypeByValues: "Pagal reikšmes",
		mdimDefTypeByRanges: "Pagal diapazonus",
		mdimDefTypeByIteration: "Pagal iteraciją",
		mdimDefTypeByInterval: "Pagal intervalą",
		mdimDefTypeByTargetRaster: "Pagal paskirties rastrą",
		esriTimeUnitsHours: "Valandos",
		esriTimeUnitsDays: "Dienos",
		esriTimeUnitsWeeks: "Savaitės",
		esriTimeUnitsMonths: "Mėnesiai",
		esriTimeUnitsYears: "Metai",
		esriTimeIntervalKeywordHourly: "Kas valandą",
		esriTimeIntervalKeywordDaily: "Kasdien",
		esriTimeIntervalKeywordWeekly: "Kas savaitę",
		esriTimeIntervalKeywordDekadly: "Kas dešimt",
		esriTimeIntervalKeywordPentadly: "Kas penkis",
		esriTimeIntervalKeywordMonthly: "Kas mėnesį",
		esriTimeIntervalKeywordQuarterly: "Kas ketvirtį",
		esriTimeIntervalKeywordYearly: "Kasmet",
		esriTimeIntervalKeywordRecurringDaily: "Pasikartojantis kasdien",
		esriTimeIntervalKeywordRecurringWeekly: "Pasikartojantis kas savaitę",
		esriTimeIntervalKeywordRecurringMonthly: "Pasikartojantis kas mėnesį",
		esriTimeIntervalKeywordRecurringQuarterly: "Pasikartojantis kas ketvirtį",
		aggDefTypeAll: "Viskas",
		aggDefTypeIntervalKeyword: "Raktažodžių intervalas",
		aggDefTypeIntervalValue: "Reikšmių intervalas",
		aggDefTypeIntervalRanges: "Diapazonų intervalas",
		latestChange: "Paskutinio pokyčio laikas",
		earliestChange: "Anksčiausio pokyčio laikas",
		largestChange: "Didžiausio pokyčio laikas",
		numberOfChanges: "Pokyčių skaičius",
		longestChange: "Ilgiausio pokyčio laikas",
		shortestChange: "Trumpiausio pokyčio laikas",
		fastestChange: "Greičiausio pokyčio laikas",
		slowestChange: "Lėčiausio pokyčio laikas",
		allChanges: "Viskas",
		increaseChanges: "Didėjimas",
		decreaseChanges: "Mažėjimas",
		segmentBeginning: "Segmento pradžia",
		segmentEnd: "Segmento pabaiga",
		esriComputeChangeMethodDifference: "Skirtumas",
		esriComputeChangeMethodRelativeDifference: "Santykinis skirtumas",
		esriComputeChangeMethodCategorical: "Kategorinis skirtumas",
		esriComputeChangeMethodMultispectralEuclideanDistance: "Spektrinis Euklido atstumas",
		esriComputeChangeMethodMultispectralAngularDifference: "Spektrinio kampo skirtumas",
		esriComputeChangeMethodMultispectralAxisWithBiggestChange: "Kanalas su daugiausia pokyčių",
		esriComputeChangeKeepAll: "Palikti visus",
		esriComputeChangeKeepChangedOnly: "Palikti tik pakitusius pikselius",
		esriComputeChangeKeepUnchangedOnly: "Palikti tik nepakitusius pikselius",
		esriComputeChangeUseColorAverage: "Vidutinės Nuo ir Iki spalvos",
		esriComputeChangeUseColorFrom: "Naudoti Nuo spalvas",
		esriComputeChangeUseColorTo: "Naudoti Iki spalvas",
		factorFunctionBinary: "Dvejetainis",
		factorFunctionForward: "Pirmyn",
		factorFunctionLinear: "Linijinis",
		factorFunctionInvLinear: "Atvirkščiai proporcingas linijinis",
		factorFunctionTable: "Lentelė",
		factorFunctionSymLinear: "Simetrinis linijinis",
		factorFunctionSymInvLinear: "Simetriškas atvirkščiai proporcingas linijinis",
		factorFunctionCos: "Kosinusas",
		factorFunctionSec: "Kirstinė",
		factorFunctionCosSec: "Kosinuso kirstinė",
		factorFunctionSecCos: "Kirstinės kosinusas",
		noSort: "Nerūšiuoti",
		ascend: "Paaukštinti",
		descend: "Pažeminti",
		autoDetect: "Automatinis nustatymas",
		nearest: "Artimiausias",
		linear: "Linijinis",
		esriMonthJanuary: "Sausis",
		esriMonthFebruary: "Vasaris",
		esriMonthMarch: "Kovas",
		esriMonthApril: "Balandis",
		esriMonthMay: "Gegužė",
		esriMonthJune: "Birželis",
		esriMonthJuly: "Liepa",
		esriMonthAugust: "Rugpjūtis",
		esriMonthSeptember: "Rugsėjis",
		esriMonthOctober: "Spalis",
		esriMonthNovember: "Lapkritis",
		esriMonthDecember: "Gruodis",
		dimensionalMovingIgnoreNoData: "Duomenys",
		dimensionalMovingPropagateNoData: "NoData",
		dimensionalMovingFillOnlyNoData: "Užpildyti NoData",
		circularMean: "Ciklinis vidurkis",
		circularName: "Ciklinis",
		arithmeticName: "Aritmetinis",
		slopeName: "Nuolydis",
		aspectName: "Kryptis",
		meanCurvature: "Vidutinis išlinkis",
		profileCurvature: "Profilio (normalios nuolydžio linijos) išlinkis",
		tangentialCurvature: "Tangentinis (normalaus kontūro) išlinkis",
		planCurvature: "Plano (projekcinio kontūro) išlinkis",
		contourGeodesicTorsion: "Kontūro geodezinis sukimasis",
		gaussianCurvature: "Gauso išlinkis",
		casoratiCurvature: "Kasoračio išlinkis",
		localSurfaceTypeQuadratic: "Kvadratinis",
		localSurfaceTypeBiquadratic: "Bikvadratinis",
		thresholdNoThreshold: "Nėra ribinės vertės",
		thresholdPercentLeastCost: "Mažiausių kaštų procentinė dalis",
		thresholdAccumulativeCost: "Suminės sąnaudos",
		clrmapTypeHillshade: "Šešėlių rinkinys"
	},
	categoryLabels: {
		sourceCharacteristics: "Šaltinio charakteristika",
		neighborhoodSettings: "Kaimynystės nustatymai",
		statistics: "Statistika",
		gamma: "Gama",
		viewshedParameters: "Matymo lauko parametrai",
		observerParameters: "Stebėtojo parametrai",
		irregularDataInterpolation: "Nevienodų duomenų interpoliacija",
		modelStatistics: "Modelio statistika",
		aggregationDef: "Agregavimo aprašas",
		filterByAttributes: "Filtruoti pagal atributus",
		percentileName: "Procentinė dalis",
		rasterInfo: "Rastro informacija",
		extent: "Aprėptis",
		spatialReference: "Koordinačių sistema"
	},
	outputRasterHelpTexts: {
		outputName: "<p>Sluoksnio, kuris bus sukurtas ir pridėtas į žemėlapį, pavadinimas.</p>",
		resultType: "<p>Sukuriamos išvesties tipas. Išvestys gali būti išklotinių vaizdų sluoksniai arba dinaminiai vaizdų sluoksniai.</p>",
		saveResultIn: "<p>Puslapyje<b>Turinys</b> esančio aplanko, kur bus įrašyti rezultatai, pavadinimas.</p>"
	},
	analysisEnvironmentsHelpTexts: {
		description: "<p>Map Viewer analizės aplinkos nustatymai. </p>",
		outSR: "<p>Nurodoma analizės koordinačių sistema ir rezultatų sluoksnis.</p>",
		extent: "<p>Nurodo analizei naudojamą plotą.</p>",
		snapRaster: "<p>Sureguliuoja išvesties aprėptį taip, kad ji atitiktų nurodyto pritraukimo rastrinio sluoksnio gardelių išlyginimą.</p>",
		cellSize: "<p>Nurodomas gardelės dydis arba skiriamoji geba, kuri bus naudojama analizei ir išvesties rastriniam sluoksniui kurti.</p>",
		mask: "<p>Nurodomas kaukės sluoksnis, kuriame analizei bus naudojamos tik tos gardelės, kurios patenka į kaukės sritį.</p>",
		resamplingMethod: "<p>Nurodo, kaip interpoliuoti pikselių vertes, kai įvesties ir išvesties rastrai nesutampa.</p>"
	},
	mainGenStrings: {
		unsupportedDataType: "Nepalaikomas tipas",
		currentlyUnsupported: " Numatytoji ${missingType} rengyklė – jau netrukus. Laikinas rezervuotos vietos teksto laukelis, skirtas nurodyti eilutes pagal įvestis.",
		unsupportedOverrideWarning: "Jau netrukus bus pristatytas perdarytas rengyklės komponentas, suteikiantis geresnę naudotojo sąsają dirbant su šiais parametrais (-ais):",
		overrideWidgetMissing: "Trūksta perdaryto rengyklės komponento!",
		uiIncomplete: "Nepavyko pateikti užduoties. Funkcijos paleisti negalima, nes kai kurie privalomi laukai yra neužpildyti arba jų nėra naudotojo sąsajoje.",
		count: "Bendras skaičius",
		selectVariables: "Pasirinkti kintamuosius",
		selectFeature: "Pasirinkti elementų sluoksnį",
		greaterThanErrorMessage: "Įvesties skaičius turi būti didesnis už ${min}",
		lesserThanErrorMessage: "Įvesties skaičius turi būti mažesnis už ${max}",
		greaterThanOrEqualErrorMessage: "Įvesties skaičius turi būti didesnis arba lygus ${min}",
		lesserThanOrEqualErrorMessage: "Įvesties skaičius turi būti mažesnis arba lygus ${max}",
		allowScalar: "Pasirinkite sluoksnį arba įveskite konstantą",
		selectField: "Pažymėti lauką",
		parameterRequired: "Šis parametras yra būtinas.",
		enterAValue: "Įvesti reikšmę...",
		invalidInput: "Įvesta reikšmė netinkama.",
		itemNotFound: "Elementas neegzistuoja arba yra nepasiekiamas.",
		itemPermissionDenied: "Neturite teisės pasiekti šio elemento.",
		layerNotAvailable: "Sluoksnio ${layerName} įkelti nepavyko.",
		multipleLayersNotAvailable: "Sluoksnio ${layerName} ir kitų įkelti nepavyko.",
		learnMoreLabel: "Sužinokite daugiau",
		fieldNotAvailable: "Įkelti lauką nepavyko.",
		allowAnalysis: "Vaizdo paslaugoje analizė neleidžiama.",
		allowAnalysisReason: "Vienas ar daugiau žemėlapio sluoksnių čia nepateikti, nes jie neleidžia atlikti analizės.",
		learnMoreText: "Sužinokite daugiau",
		atLeastOneRasterInput: "Bent vienas įvesties sluoksnis turi būti rastrinis.",
		browseAnalysisLayers: "Naršyti sluoksnius",
		activeMapViewExtent: "Naudoti esamą žemėlapio aprėptį",
		chooseRaster: "Pasirinkti iškerpamą rastrą",
		chooseGeometry: "Pasirinkti iškerpamą formą",
		resultType: "Rezultato tipas",
		saveInFolder: "Įrašyti kataloge",
		outputName: "Išvesties pavadinimas",
		outputLayerType: "Išvesties sluoksnio tipas",
		dynamicImageryLayer: "Dinaminis vaizdų sluoksnis",
		tiledImageryLayer: "Vaizdų išklotinės sluoksnis",
		custom: "Adaptuotas",
		loading: "Įkeliama...",
		layerMissing: "Vienas ar daugiau žemėlapio sluoksnių čia nepateikti, nes jie neleidžia atlikti analizės. Sužinokite daugiau.",
		browseCoordinateSystems: "Naršyti koordinačių sistemas",
		unableToRepopulateOutSR: "Nepavyko užpildyti išvesties koordinačių sistemos.",
		defaultTitle: "Žr. daugiau",
		"ARC (equal arc-second)": "ARC (vienoda kampo sekundė)",
		Africa: "Afrika",
		Antarctica: "Antarktida",
		Argentina: "Argentina",
		Asia: "Azija",
		"Asteroid Belt": "Asteroidų žiedas",
		"Atlantic Ocean": "Atlanto vandenynas",
		Australia: "Australija",
		"Australia and New Zealand": "Australija ir Naujoji Zelandija",
		Austria: "Austrija",
		"BLM (US Feet)": "BLM (JAV pėdos)",
		Bangladesh: "Bangladešas",
		"Beijing 1954": "Pekinas 1954",
		Bhutan: "Butanas",
		CGCS2000: "CGCS2000",
		Canada: "Kanada",
		Caribbean: "Karibai",
		"Caribbean Sea": "Karibų jūra",
		"Central America": "Centrinė Amerika",
		"Central and North America": "Centrinė ir Šiaurės Amerika",
		Colombia: "Kolumbija",
		Continental: "Žemyninis",
		"County Systems": "Savivaldybės sistemos",
		"Democratic Republic of the Congo": "Kongo Demokratinė Respublika",
		"EPSG Arctic": "EPSG Arktis",
		Earth: "Žemė",
		"Ellipsoidal-based": "Pagal elipsoidą",
		Europe: "Europa",
		Finland: "Suomija",
		France: "Prancūzija",
		"GSK 2011": "GSK 2011",
		"Gauss Kruger": "Gauso Krugerio",
		"Geographic Coordinate Systems": "Geografinės koordinačių sistemos",
		Germany: "Vokietija",
		"Gravity-related": "Susietas su gravitacija",
		"Greenwich-based": "Pagal Grinvičą",
		"Highways England": "Anglijos automagistralės",
		Illinois: "IIinojus",
		"Indian Ocean": "Indijos vandenynas",
		"Indian Subcontinent": "Indijos subkontinentas",
		Indiana: "Indijana",
		Indonesia: "Indonezija",
		Iowa: "Ajova",
		"Ireland and United Kingdom": "Airija ir Jungtinė Karalystė",
		Italy: "Italija",
		Japan: "Japonija",
		Jupiter: "Jupiteris",
		Kansas: "Kanzasas",
		"Las Vegas": "Las Vegasas",
		Libya: "Libija",
		Malaysia: "Malaizija",
		"Malaysia and Singapore": "Malaizija ir Singapūras",
		Mars: "Marsas",
		Mercury: "Merkurijus",
		Minnesota: "Minesota",
		Montana: "Montana",
		"NAD 1927": "NAD 1927",
		"NAD 1927 (US Feet)": "NAD 1927 (JAV pėdos)",
		"NAD 1983": "NAD 1983",
		"NAD 1983 (2011)": "NAD 1983 (2011)",
		"NAD 1983 (2011) (Intl Feet)": "NAD 1983 (2011) (tarptaut. pėdos)",
		"NAD 1983 (2011) (Meters)": "NAD 1983 (2011) (metrai)",
		"NAD 1983 (2011) (US Feet)": "NAD 1983 (2011) (JAV pėdos)",
		"NAD 1983 (CORS96) (Intl Feet)": "NAD 1983 (CORS96) (tarptaut. pėdos)",
		"NAD 1983 (CORS96) (Meters)": "NAD 1983 (CORS96) (metrai)",
		"NAD 1983 (CORS96) (US Feet)": "NAD 1983 (CORS96) (JAV pėdos)",
		"NAD 1983 (Intl Feet)": "NAD 1983 (tarptaut. pėdos)",
		"NAD 1983 (Meters)": "NAD 1983 (metrai)",
		"NAD 1983 (PA11) (Meters)": "NAD 1983 (PA11) (metrai)",
		"NAD 1983 (PA11) (US Feet)": "NAD 1983 (PA11) (JAV pėdos)",
		"NAD 1983 (US Feet)": "NAD 1983 (JAV pėdos)",
		"NAD 1983 HARN (Intl Feet)": "NAD 1983 HARN (tarptaut. pėdos)",
		"NAD 1983 HARN (Meters)": "NAD 1983 HARN (metrai)",
		"NAD 1983 HARN (US Feet)": "NAD 1983 HARN (JAV pėdos)",
		"NAD 1983 NSRS2007 (Intl Feet)": "NAD 1983 NSRS2007 (tarptaut. pėdos)",
		"NAD 1983 NSRS2007 (Meters)": "NAD 1983 NSRS2007 (metrai)",
		"NAD 1983 NSRS2007 (US Feet)": "NAD 1983 NSRS2007 (JAV pėdos)",
		"National Grids": "Valstybių tinkleliai",
		Navajo: "Navahų",
		Neptune: "Neptūnas",
		"New Beijing": "Naujasis Pekinas",
		"New Zealand": "Naujoji Zelandija",
		"North America": "Šiaurės Amerika",
		"Northern Hemisphere": "Šiaurės pusrutulis",
		Norway: "Norvegija",
		Oceans: "Vandenynai",
		Oregon: "Oregonas",
		"Other GCS": "Kitos GCS",
		"Pacific Ocean": "Ramusis vandenynas",
		Pluto: "Plutonas",
		Polar: "Poliarinis",
		Portugal: "Portugalija",
		"Projected Coordinate Systems": "Projekcinės koordinačių sistemos",
		"Pulkovo 1942": "Pulkovas 1942",
		"Pulkovo 1995": "Pulkovas 1995",
		Replaced: "Pakeista",
		"SAD 1969": "SAD 1969",
		SIRGAS: "SIRGAS",
		"SIRGAS 2000": "SIRGAS 2000",
		Saturn: "Saturnas",
		"Solar System": "Saulės sistema",
		"South Africa": "Pietų Afrika",
		"South America": "Pietų Amerika",
		"South Korea": "Pietų Korėja",
		"Southern Hemisphere": "Pietų pusrutulis",
		"Spheroid-based": "Pagal sferoidą",
		"State Plane": "Valstybinis planarinis",
		"State Systems": "Valstijų sistemos",
		Sweden: "Švedija",
		"Switzerland and Liechtenstein": "Šveicarija ir Lichtenšteinas",
		Texas: "Teksasas",
		Tribal: "Genties",
		Turkey: "Turkija",
		"US Feet": "JAV pėdos",
		"USA and territories": "JAV ir teritorijos",
		UTM: "UTM",
		Ukraine: "Ukraina",
		"Unknown Height Systems": "Nežinomų aukščių sistemos",
		Uranus: "Uranas",
		Venus: "Venera",
		"Vertical Coordinate Systems": "Vertikalios koordinačių sistemos",
		Vietnam: "Vietnamas",
		"WGS 1972": "WGS 1972",
		"WGS 1984": "WGS 1984",
		Wisconsin: "Viskonsinas",
		"Wisconsin CRS": "Viskonsino CRS",
		World: "Pasaulis",
		"World (Sphere-based)": "Pasaulis (pagal sferą)",
		Wyoming: "Vajomingas",
		"Xian 1980": "Sianas 1980",
		done: "Atlikta",
		noResults: "Rezultatų nerasta",
		searchPlaceholder: "Pavadinimas arba WKID",
		browseTemplate: "Naršyti rastrų funkcijų šablonus",
		saveTemplate: "Įrašyti rastrų funkcijos šabloną",
		preview: "Peržiūra",
		previewDescription: "Peržiūrėti rezultatą prieš vykdant analizę.",
		showPreview: "Rodyti peržiūrą",
		previewLayer: "Peržiūrėti sluoksnį ${number}",
		newPreview: "Peržiūros nėra",
		previewPopup: "Įgalinkite analizės rezultatų peržiūrą pagal įvesties parametrus.",
		updatePreviewLayer: "Atnaujinti pasirinktą peržiūros sluoksnį",
		createPreviewLayer: "Kurti naują peržiūros sluoksnį",
		maximumPreviewAllowed: "Didžiausias leidžiamas peržiūros sluoksnių skaičius: ${maxCount}",
		previewFailure: "Šis peržiūros sluoksnis neprieinamas. Patikrinkite įvesties parametrus ir dar kartą atnaujinkite šį peržiūros sluoksnį.",
		header: "Pasirinkti elementą",
		content: "Neįrašėte pakeitimų ${rftTitle}. Jei pradėsite nuo naujo šablono, šie pakeitimai bus prarasti.",
		dontSave: "Neįrašyti",
		"continue": "Tęsti",
		stretch: "Sutalpinti lange",
		pan: "Stumti",
		newTemplate: "Kurti naują šabloną",
		openTemplate: "Atidaryti šabloną",
		addFunction: "Įtraukti rastrų funkcijas",
		addConstant: "Pridėti konstantą",
		addRaster: "Pridėti rastro kintamąjį",
		move: "Perkelti",
		zoom: "Didinti",
		saveAs: "Įrašyti kaip",
		clear: "Valyti",
		addRasterFunctionTitle: "Įtraukti rastrų funkcijas",
		templatePropertiesTitle: "Šablono savybės",
		browseRFT: "Naršyti rastrų funkcijų šablonus",
		defaultToolDescription: "${toolTitle} analizės įrankis.",
		openToolText: "Atidaryti įrankį",
		toolDropdownText: "Įrankio išskleidimas",
		addToMap: "Patvirtinti ir pridėti žemėlapį",
		confirm: "Patvirtinti",
		select: "Pasirinkti",
		selectTask: "Pasirinkti užduotį",
		unsupportedLayer: "Šis parametras nepalaiko šių sluoksnių: ${layerName}.",
		viewDetails: "Peržiūrėti visą elemento aprašą",
		rename: "Pervardinti",
		duplicate: "Dubliuoti",
		launch: "Atidaryti norint vykdyti",
		templateEditor: "Šablonų rengyklė",
		createItem: "Įrašyti rastrų funkcijų šabloną",
		actionLabel: "Filtruoti",
		filterPopoverHeading: "Filtruoti funkcijas",
		defaultSearchPlaceholder: "Ieškoti pagal pavadinimą",
		settings: "Nustatymai",
		summary: "Santrauka",
		definitionQuery: "Užklausa dėl apibrėžimo",
		matchVariables: "Sutapdinti kintamuosius",
		unionDimension: "Sąjungos matmuo",
		nameEditorPlaceholder: "Įveskite pavadinimą",
		summaryEditorPlaceholder: "Įveskite trumpą aprašą.",
		definitionQueryPlaceholder: "Įvesti...",
		upload: "Įkelti",
		chooseImage: "Paspauskite failui pasirinkti",
		update: "Atnaujinti",
		thumbnailErrors: {
			wrongImageType: "Pasirinktas netinkamas vaizdo tipas",
			notAvailable: "Miniatiūros nėra",
			loadError: "Nepavyko įkelti vaizdo",
			chooseFile: "Paspauskite failui pasirinkti"
		}
	}
};
const copy = "Kopijuoti";
const save = "Išsaugoti";
const title = "Pavadinimas";
const folder = "Aplankas";
const tags = "Raktažodžiai";
const savingMessage = "Elementas įrašomas į";
const shareWith = "Bendrinti su";
const share = "Bendrinti";
const setSharingLevel = "Nustatyti bendrinimo lygį";
const setGroupSharing = "Nustatyti grupių bendrinimą";
const owner = "Savininkas";
const organization = "Organizacija";
const everyone = "Visi (vieša)";
const groups = "Grupės:";
const type = "Tipas";
const mosaic = "Mozaika";
const itemGroup = "Elementų grupė";
const item = "Elementas";
const definitionQuery = "Užklausa dėl apibrėžimo";
const groupItemsBy = "Grupuoti elementus pagal";
const groupFieldName = "Grupės lauko pavadinimas";
const tagFieldName = "Raktažodžio lauko pavadinimas";
const noTitleTagErrorMsg = "Turite nurodyti  elemento pavadinimą ir pateikti raktažodžius, leisiančius rasti žemėlapį naudojantis paieška.";
const noTitleErrorMsg = "Turite nurodyti elemento pavadinimą.";
const noTagErrorMsg = "Turite pateikti bent vieną raktažodį, kad padėtumėte žmonėms, atliekantiems paiešką, rasti jūsų elementą.";
const error = "Klaida";
const warning = "Įspėjimas";
const success = "Pavyko";
const details = "Detali informacija:";
const tryAgain = "Bandykite dar kartą";
const toolModeler = {
	save: "Išsaugoti",
	editProperties: "Redaguoti savybes",
	saveAs: "Išsaugoti kaip",
	savingNotification: "Įrašomi elemento pakeitimai...",
	savingTitle: "Įrašoma",
	saveFailedMessage: "Nepavyko įrašyti pakeitimų.",
	saveWithErrorsMessage: "Pakeitimai įrašyti su tokiomis klaidomis.",
	viewItemMessage: "Peržiūrėkite įrašytą elementą",
	here: "čia.",
	itemCreatedMessage: "Sukurtas naujas elementas.",
	clickToViewItemMessage: "Norėdami peržiūrėti elemento informacijos puslapį, spustelėkite Gerai. Norėdami tęsti, spustelėkite Atšaukti.",
	readingFailed: "Nepavyko įkelti pasirinkto rastrų funkcijos šablono.",
	failedToLoadXML: "Nepavyko įkelti pasirinkto rastrų funkcijos šablono XML formatu.",
	learnMore: "Sužinokite daugiau",
	overwriteTitle: "Patvirtinti perrašymą",
	overwriteMessage: "Ar norite perrašyti esamą elementą?",
	overwriteSuccessMessage: "Elementas atnaujintas."
};
const toolEditor = {
	run: "Vykdyti",
	save: "Išsaugoti",
	deleteSelected: "Ištrinti pasirinktus elementus",
	addRaster: "Pridėti rastrą",
	addScalar: "Pridėti skaliarą",
	layout: "Automatinis išdėstymas",
	errorTitle: "Klaida",
	invalidToolMessage: "Rastrų funkcijos šablonas netinkamas.",
	out: "Iš",
	zoomIn: "Artinti",
	zoomOut: "Tolinti",
	zoomToFit: "Sutalpinti lange",
	panOn: "Perjungti į stūmimo režimą",
	panOff: "Išjungti stūmimo režimą",
	defaultModelName: "Įrankio modelis",
	defaultRasterName: "Rastras"
};
const toolDetailsEditor = {
	defaultToolName: "Rastrų funkcijos šablonas",
	defaultToolDescription: "Pridėti trumpą rastrų funkcijos santrauką.",
	defaultHelpText: "Norėdami redaguoti pagalbos tekstą, paspauskite pagalbos piktogramą",
	editHelpTitle: "Redagavimo žinynas",
	saveLabel: "Išsaugoti",
	cancelLabel: "Atšaukti",
	thumbnail: {
		wrongImageType: "Pasirinktas netinkamas vaizdo tipas",
		notAvailable: "Miniatiūros nėra",
		loadError: "Nepavyko įkelti vaizdo",
		chooseFile: "Paspauskite failui pasirinkti"
	}
};
const saveUtils = {
	thumbnail: "Miniatiūra",
	sharing: "Bendrinimas"
};
const close = "Uždaryti";
const unsavedWarningExisting = "Ar norėtumėte įrašyti elemento <b>${itemTitle}</b> pakeitimus?";
const unsavedWarningNew = "Ar norite išsaugoti šiuos pakeitimus?";
const saveAs = "Išsaugoti kaip";
const dontSave = "Neišsaugoti";
const unsavedTitle = "Neįrašyti pakeitimai";
const invalidRFTMessage = "Sukurtas rastrų funkcijos šablonas netinkamas.";
const errorTitle = "Klaida";
const breadcrumb = "Rastrų funkcijų rengyklė";
const breadcrumbEditor = "Turinys > Rastrų funkcijų rengyklė";
const viewerModeTitle = "Tik skaitoma";
const viewerModeMessage = "Rastrų funkcijos šablono elementas yra tik skaitymui. Pakeitimų įrašyti negalima.";
const userStartDirection = "Pasirinkite funkciją ir pradėkite kurti rastrų funkcijos šabloną.";
const selectFunction = "Pridėti funkciją";
const deselectFunction = "Pašalinti funkciją";
const dialogTitle = "Sistema";
const category = "Kategorijos";
const search = "Ieškoti rastrų funkcijų";
const categoryNames = {
	analysis: "Analizė",
	appearance: "Išvaizda",
	classification: "Klasifikacija",
	conversion: "Konvertavimas",
	correction: "Korekcija",
	dataManagement: "Duomenų valdymas",
	distance: "Atstumas",
	distanceLegacy: "Atstumas (Nebenaudojama)",
	hydrology: "Hidrologija",
	math: "Matematika",
	mathConditional: "Matematika: sąlyginis",
	mathLogical: "Matematika: loginė",
	mathTrigonometric: "Matematika: trigonometrinė",
	reclass: "Klasifikuoti iš naujo",
	statistical: "Statistinis",
	surface: "Paviršius"
};
const commonStrings_lt = {
	ok: ok,
	cancel: cancel,
	enterURL: enterURL,
	serviceURL: serviceURL,
	selectRaster: selectRaster,
	failedToLoadLayer: failedToLoadLayer,
	loadingLayer: loadingLayer,
	selectFeature: selectFeature,
	enterFURL: enterFURL,
	addRaster: addRaster,
	addScalar: addScalar,
	raster: raster,
	scalar: scalar,
	defaultModelName: defaultModelName,
	general: general,
	parameters: parameters,
	variables: variables,
	name: name,
	description: description,
	parameter: parameter,
	isPublic: isPublic,
	isDataset: isDataset,
	unknownPixelType: unknownPixelType,
	outputPixelType: outputPixelType,
	u8PixelType: u8PixelType,
	s8PixelType: s8PixelType,
	u16PixelType: u16PixelType,
	s16PixelType: s16PixelType,
	u32PixelType: u32PixelType,
	s32PixelType: s32PixelType,
	f32PixelType: f32PixelType,
	f64PixelType: f64PixelType,
	properties: properties,
	multidimensionalRules: multidimensionalRules,
	matchVariables: matchVariables,
	unionDimensions: unionDimensions,
	rasterFunctionEditor: rasterFunctionEditor,
	rfxLicenseInfo: rfxLicenseInfo,
	rasterFunctions: rasterFunctions,
	copy: copy,
	save: save,
	title: title,
	folder: folder,
	tags: tags,
	savingMessage: savingMessage,
	shareWith: shareWith,
	share: share,
	setSharingLevel: setSharingLevel,
	setGroupSharing: setGroupSharing,
	owner: owner,
	organization: organization,
	everyone: everyone,
	groups: groups,
	type: type,
	mosaic: mosaic,
	itemGroup: itemGroup,
	item: item,
	definitionQuery: definitionQuery,
	groupItemsBy: groupItemsBy,
	groupFieldName: groupFieldName,
	tagFieldName: tagFieldName,
	noTitleTagErrorMsg: noTitleTagErrorMsg,
	noTitleErrorMsg: noTitleErrorMsg,
	noTagErrorMsg: noTagErrorMsg,
	error: error,
	warning: warning,
	success: success,
	details: details,
	tryAgain: tryAgain,
	toolModeler: toolModeler,
	toolEditor: toolEditor,
	toolDetailsEditor: toolDetailsEditor,
	saveUtils: saveUtils,
	close: close,
	unsavedWarningExisting: unsavedWarningExisting,
	unsavedWarningNew: unsavedWarningNew,
	saveAs: saveAs,
	dontSave: dontSave,
	unsavedTitle: unsavedTitle,
	invalidRFTMessage: invalidRFTMessage,
	errorTitle: errorTitle,
	breadcrumb: breadcrumb,
	breadcrumbEditor: breadcrumbEditor,
	viewerModeTitle: viewerModeTitle,
	viewerModeMessage: viewerModeMessage,
	userStartDirection: userStartDirection,
	selectFunction: selectFunction,
	deselectFunction: deselectFunction,
	dialogTitle: dialogTitle,
	category: category,
	search: search,
	categoryNames: categoryNames
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (commonStrings_lt);


//# sourceMappingURL=common-strings.lt-ac57c68c.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,