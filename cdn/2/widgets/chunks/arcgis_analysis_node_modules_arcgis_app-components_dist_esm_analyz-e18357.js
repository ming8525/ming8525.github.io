"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_analyz-e18357"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/analyze-69ec08c8.js":
/*!*************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/analyze-69ec08c8.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ analyze),
/* harmony export */   s: () => (/* binding */ setStandardizedFieldNames)
/* harmony export */ });
/* harmony import */ var _basic_6db7ebd7_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./basic-6db7ebd7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/basic-6db7ebd7.js");
/* harmony import */ var _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./commonEnums-fcf13661.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/commonEnums-fcf13661.js");
/* harmony import */ var _loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./loadModules-b4ac1247.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-b4ac1247.js");
/* harmony import */ var _add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./add-item-dbbe2f57.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/add-item-dbbe2f57.js");
/* harmony import */ var _append_4e11032c_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./append-4e11032c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/append-4e11032c.js");
/* harmony import */ var _geocode_64e0b0d3_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./geocode-64e0b0d3.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/geocode-64e0b0d3.js");
/* harmony import */ var _privileges_74639dae_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./privileges-74639dae.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/privileges-74639dae.js");
/* harmony import */ var _portal_d518b571_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./portal-d518b571.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/portal-d518b571.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */









/**
 * update fields property on for analyzeResults to reflect user changes to fields (e.g. selection, changes to displayName, etc.)
 */
function updateFields(response) {
    return updateFieldsInner(response, _add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_3__.a);
}
function updateFieldsInner(response, storeState) {
    var _a, _b, _c, _d;
    const { selectedFields, type, selectedSheet } = storeState;
    if (!selectedFields) {
        return response;
    }
    const publishParameters = response.publishParameters;
    let layerInfo = publishParameters === null || publishParameters === void 0 ? void 0 : publishParameters.layerInfo;
    switch (type) {
        case "Microsoft Excel":
            layerInfo = (_b = (_a = publishParameters === null || publishParameters === void 0 ? void 0 : publishParameters.layers) === null || _a === void 0 ? void 0 : _a[selectedSheet]) !== null && _b !== void 0 ? _b : (_c = publishParameters === null || publishParameters === void 0 ? void 0 : publishParameters.layers) === null || _c === void 0 ? void 0 : _c[0];
            break;
        case "GeoJson":
            layerInfo = (_d = publishParameters === null || publishParameters === void 0 ? void 0 : publishParameters.layers) === null || _d === void 0 ? void 0 : _d[0];
            break;
    }
    layerInfo.fields = layerInfo.fields.reduce((fields, field) => {
        const matchingField = selectedFields[field.name];
        if (matchingField) {
            field.alias = matchingField.alias;
            fields.push(field);
        }
        return fields;
    }, []);
    return response;
}
/**
 * Update locationType property on all fields based on analyze response
 */
function updateLocationFields(response) {
    var _a, _b, _c, _d, _e, _f;
    const { selectedSheet } = _add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_3__.a;
    const { publishParameters } = response;
    const layer = (_d = (_b = (_a = publishParameters.layers) === null || _a === void 0 ? void 0 : _a[selectedSheet]) !== null && _b !== void 0 ? _b : (_c = publishParameters.layers) === null || _c === void 0 ? void 0 : _c[0]) !== null && _d !== void 0 ? _d : publishParameters.layerInfo;
    if (!layer) {
        return response;
    }
    const addressFields = (_f = (_e = layer.addressFields) !== null && _e !== void 0 ? _e : publishParameters.addressFields) !== null && _f !== void 0 ? _f : {};
    const addressFieldsHash = Object.keys(addressFields).reduce((acc, key) => (Object.assign(Object.assign({}, acc), { [addressFields[key]]: key })), {});
    layer.fields = layer.fields.map((field) => {
        return Object.assign(Object.assign({}, field), { locationType: getLocationType(field, layer, publishParameters, addressFieldsHash) });
    });
    // keep location types of selected fields in sync as well (WebGIS/arcgis-portal-app#37037)
    if (_add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_3__.a.selectedFields) {
        _add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_3__.a.selectedFields = Object.keys(_add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_3__.a.selectedFields).reduce((acc, key) => {
            const field = _add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_3__.a.selectedFields[key];
            acc[key] = Object.assign(Object.assign({}, field), { locationType: getLocationType(field, layer, publishParameters, addressFieldsHash) });
            return acc;
        }, {});
    }
    return response;
}
function getLocationType(field, layer, publishParameters, addressFields) {
    var _a, _b, _c, _d;
    const latitudeFieldName = (_a = layer.latitudeFieldName) !== null && _a !== void 0 ? _a : publishParameters.latitudeFieldName;
    const longitudeFieldName = (_b = layer.longitudeFieldName) !== null && _b !== void 0 ? _b : publishParameters.longitudeFieldName;
    const coordinateFieldName = (_c = layer.coordinateFieldName) !== null && _c !== void 0 ? _c : publishParameters.coordinateFieldName;
    const coordinateFieldType = (_d = layer.coordinateFieldType) !== null && _d !== void 0 ? _d : publishParameters.coordinateFieldType;
    if (addressFields[field.name]) {
        return addressFields[field.name];
    }
    if (field.name === coordinateFieldName) {
        return coordinateFieldType === null || coordinateFieldType === void 0 ? void 0 : coordinateFieldType.toLowerCase();
    }
    if (field.name === latitudeFieldName) {
        return "latitude";
    }
    if (field.name === longitudeFieldName) {
        return "longitude";
    }
    return field.locationType || "unknown";
}

/**
 * Find the cost data for geocoding a given amount of records
 */
function getGeocodingCost(geocodeCount) {
    return (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_7__.r)(`${(0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_7__.g)()}portals/self/cost`, { geocodeCount });
}

/**
 * Update country codes list
 * based on geocoder's proxyFilter and sourceCountry list
 */
async function getCountryCodes(geocodeServiceUrl, restBaseUrl, geocodeServers) {
    const geocoder = (0,_geocode_64e0b0d3_js__WEBPACK_IMPORTED_MODULE_5__.f)(geocodeServiceUrl, geocodeServers);
    let filter;
    if (geocoder === null || geocoder === void 0 ? void 0 : geocoder.itemId) {
        const url = `${restBaseUrl}/content/items/${geocoder.itemId}`;
        const response = await (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_7__.r)(url);
        const sourceCountry = response.proxyFilter && JSON.parse(response.proxyFilter).sourceCountry;
        if (sourceCountry) {
            filter = sourceCountry.split(",").map((country) => country.toLowerCase());
            filter.push("world");
        }
    }
    const options = Object.keys(_geocode_64e0b0d3_js__WEBPACK_IMPORTED_MODULE_5__.c)
        .map((key) => ({ label: _geocode_64e0b0d3_js__WEBPACK_IMPORTED_MODULE_5__.c[key], value: key }))
        .filter(({ value }) => !filter || filter.includes(value.toLowerCase()))
        .sort((a, b) => {
        if (a.label < b.label) {
            return -1;
        }
        if (a.label > b.label) {
            return 1;
        }
        return 0;
    });
    return options;
}

async function analyze({ analyzeArgs, configArgs, itemArgs, initialize }) {
    var _a, _b;
    const { config, lang, portal, user } = configArgs;
    const { itemType } = itemArgs;
    if (initialize && (0,_privileges_74639dae_js__WEBPACK_IMPORTED_MODULE_6__.m)(user)) {
        const info = (0,_geocode_64e0b0d3_js__WEBPACK_IMPORTED_MODULE_5__.b)((_b = (_a = portal.helperServices) === null || _a === void 0 ? void 0 : _a.geocode) !== null && _b !== void 0 ? _b : [], user, portal.isPortal);
        if (info) {
            _add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_3__.a.allowGeocode = info.allowGeocode;
            _add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_3__.a.isAgoWorldGeocodeServer = info.isAgoWorldGeocodeServer;
            _add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_3__.a.isServiceProxyAgoWorldGeocodeServer = info.isServiceProxyAgoWorldGeocodeServer; // ! careful for reset, use default
            _add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_3__.a.isWorldGeocodeServer = info.isWorldGeocodeServer; // ! careful for reset, use default
            _add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_3__.a.geocodeServers = info.geocodeServers; // ! careful for reset, use default
            _add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_3__.a.geocodeServiceUrl = info.geocodeServiceUrl; // ! careful for reset, use default
        }
        if (_add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_3__.a.geocodeServers) {
            _add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_3__.a.sourceCountry = (0,_geocode_64e0b0d3_js__WEBPACK_IMPORTED_MODULE_5__.d)(user.region, portal.ipCntryCode); // ! careful for reset, use default
            try {
                _add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_3__.a.countryCodes = await getCountryCodes(_add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_3__.a.geocodeServiceUrl, config.restBaseUrl, _add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_3__.a.geocodeServers);
                _add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_3__.a.standardizedFieldNames = await getFieldNamesFromGeocoder(_add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_3__.a.geocodeServiceUrl, lang);
            }
            catch (error) {
                console.error("Geocoder unavailable", error);
                return { error: { code: "unavailableGeocoder" } };
            }
        }
    }
    const { locationType, // ! careful for reset, use default --- handleAnalyzeResponse
    isWorldGeocodeServer, // ! careful for reset, use default
    geocodeServiceUrl, // ! careful for reset, use default
    geocodeServers, // ! careful for reset, use default
    isServiceProxyAgoWorldGeocodeServer, // ! careful for reset, use default
    sourceCountry, // ! careful for reset, use default
    analyzeResults, // ! careful for reset, use default --- handleAnalyzeResponse
    analyzedLocationTypes // ! careful for reset, use default --- pushed below
     } = _add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_3__.a;
    const url = `${config.restBaseUrl}content/features/analyze`;
    const { isPortal } = portal;
    let analyzeSelectedLayer = false;
    let filetype;
    if ((analyzeArgs === null || analyzeArgs === void 0 ? void 0 : analyzeArgs.type) === "item" && analyzeArgs.workflow === "append") {
        filetype = _append_4e11032c_js__WEBPACK_IMPORTED_MODULE_4__.a[itemType];
        analyzeSelectedLayer = true;
    }
    else {
        filetype = itemType === "Microsoft Excel" ? "excel" : itemType.toLowerCase();
    }
    let params = {
        filetype
    };
    switch (analyzeArgs === null || analyzeArgs === void 0 ? void 0 : analyzeArgs.type) {
        case "url":
            params.sourceUrl = analyzeArgs.sourceUrl;
            break;
        case "item":
            params.itemid = analyzeArgs.itemid;
            break;
        case "file":
            params = new FormData();
            params.append("file", analyzeArgs.file);
            params.append("filetype", filetype);
            break;
        case "text":
            params.text = analyzeArgs.text;
            break;
    }
    const analyzeParameters = {
        enableGlobalGeocoding: true,
        sourceLocale: lang,
        locationType,
        returnEstimatedRowCount: true,
        returnSize: true
    };
    if ((isPortal && geocodeServiceUrl) || !isPortal) {
        if (isPortal || (!isPortal && (geocodeServers === null || geocodeServers === void 0 ? void 0 : geocodeServers.length))) {
            analyzeParameters.geocodeServiceUrl = encodeURI(geocodeServiceUrl);
        }
        if (analyzeResults || isPortal) {
            const analyzedValue = locationType === "address" ? "addressTypes" : "locationTypes";
            if (analyzedLocationTypes.indexOf(analyzedValue) === -1) {
                analyzedLocationTypes.push(analyzedValue);
            }
            analyzeParameters.locationType = locationType || "coordinates";
        }
        if ((!portal.isPortal && isWorldGeocodeServer) || (portal.isPortal && isServiceProxyAgoWorldGeocodeServer)) {
            analyzeParameters.sourceCountryHint = analyzeResults ? "" : sourceCountry.toLowerCase();
            analyzeParameters.sourceCountry = analyzeResults ? sourceCountry.toLowerCase() : "";
        }
        const stringifiedAnalyzeParameters = JSON.stringify(analyzeParameters);
        if (params instanceof FormData) {
            params.append("analyzeParameters", stringifiedAnalyzeParameters);
        }
        else {
            params.analyzeParameters = stringifiedAnalyzeParameters;
        }
    }
    try {
        const response = await (params instanceof FormData
            ? (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_7__.d)(url, params, {}, "post")
            : (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_7__.r)(url, params, {}, "post"));
        handleAnalyzeResponse({ response, initialize, analyzeSelectedLayer, geocodeServiceUrl, lang, portal, itemType });
        return {};
    }
    catch (error) {
        console.error(error);
        const errorMessage = (error === null || error === void 0 ? void 0 : error.message) || error || "";
        switch (true) {
            case errorMessage.includes("specify data to be analyzed"):
                return { error: { code: "emptyFile" } };
            case errorMessage.includes("Duplicate field names are not allowed"):
                return { error: { code: "duplicateFieldNames" } };
            case errorMessage.toLowerCase().includes("timeout"):
                return { error: { code: "timeout" } };
        }
        return { error: { code: "unhandledError" } };
    }
}
async function handleAnalyzeResponse({ response, analyzeSelectedLayer, initialize, geocodeServiceUrl, lang, portal, itemType }) {
    var _a, _b, _c, _d, _e, _f;
    const geocodeConfig = _add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_3__.a;
    const isPortal = portal.isPortal;
    const isExcel = itemType === "Microsoft Excel";
    const publishParameters = isExcel
        ? (_b = (_a = response.publishParameters.layers) === null || _a === void 0 ? void 0 : _a[geocodeConfig.selectedSheet]) !== null && _b !== void 0 ? _b : (_c = response.publishParameters.layers) === null || _c === void 0 ? void 0 : _c[0]
        : response.publishParameters;
    let sourceCountry;
    if ((!isPortal && geocodeConfig.isWorldGeocodeServer) ||
        (isPortal && geocodeConfig.isServiceProxyAgoWorldGeocodeServer)) {
        const isWorldGeocodeServer = (0,_basic_6db7ebd7_js__WEBPACK_IMPORTED_MODULE_0__.a)(publishParameters.sourceCountry);
        sourceCountry = geocodeConfig.sourceCountry || publishParameters.sourceCountry || "world";
        sourceCountry = sourceCountry === "wo" ? "world" : sourceCountry;
        _add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_3__.a.isWorldGeocodeServer = isWorldGeocodeServer;
        _add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_3__.a.sourceCountry = sourceCountry;
    }
    if (!geocodeConfig.allowGeocode && publishParameters.locationType === "address") {
        _add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_3__.a.locationType = "none";
    }
    updateLocationFields(response);
    const updatedResponse = updateFields(response);
    _add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_3__.a.analyzeResults = updatedResponse;
    if ((_d = updatedResponse === null || updatedResponse === void 0 ? void 0 : updatedResponse.publishParameters) === null || _d === void 0 ? void 0 : _d.layers) {
        _add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_3__.a.excelLayers = (_e = updatedResponse === null || updatedResponse === void 0 ? void 0 : updatedResponse.publishParameters) === null || _e === void 0 ? void 0 : _e.layers;
    }
    const layerInfo = (0,_geocode_64e0b0d3_js__WEBPACK_IMPORTED_MODULE_5__.a)(response, analyzeSelectedLayer);
    if (initialize) {
        _add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_3__.a.backupLayerFields = JSON.parse(JSON.stringify(layerInfo.fields));
    }
    else {
        // Fall back to world geocoder if no field names found
        !!publishParameters.standardizedFieldNames
            ? (_add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_3__.a.standardizedFieldNames = publishParameters.standardizedFieldNames)
            : setStandardizedFieldNames({
                lang,
                geocodeServiceUrl,
                // ! We set the location type above so we can't just use the destructed value
                // TODO: refactor that into a local variable
                locationType: _add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_3__.a.locationType
            });
    }
    // figure out how much this action will cost
    if (_add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_3__.a.locationType === "address" ||
        layerInfo.locationType === "address" ||
        ((_f = response === null || response === void 0 ? void 0 : response.publishParameters) === null || _f === void 0 ? void 0 : _f.locationType) === "address") {
        _add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_3__.a.geocodeCost = await getGeocodingCost(layerInfo.estimatedRecordCount);
    }
    else {
        _add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_3__.a.geocodeCost = null;
    }
}
async function setStandardizedFieldNames({ lang, geocodeServiceUrl, locationType }) {
    if (locationType === "address") {
        _add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_3__.a.standardizedFieldNames = await getFieldNamesFromGeocoder(geocodeServiceUrl, lang);
    }
}
async function getFieldNamesFromGeocoder(geocodeServiceUrl, lang) {
    const geocoderResponse = await (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_7__.r)(geocodeServiceUrl, {}, { addTokenManually: false });
    return geocoderResponse.addressFields.reduce((acc, field) => {
        var _a;
        if (field.name !== "unknown") {
            acc[field.name] = ((_a = field === null || field === void 0 ? void 0 : field.localizedNames) === null || _a === void 0 ? void 0 : _a[`${lang}`]) || field.alias || field.name;
        }
        return acc;
    }, {});
}



//# sourceMappingURL=analyze-69ec08c8.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/append-4e11032c.js":
/*!************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/append-4e11032c.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   A: () => (/* binding */ AppendOverwriteCloudPublishTypes),
/* harmony export */   N: () => (/* binding */ NONE_VALUE),
/* harmony export */   a: () => (/* binding */ appendFileTypes),
/* harmony export */   b: () => (/* binding */ AppendOverwritePublishTypes),
/* harmony export */   c: () => (/* binding */ appendExtensionsForEnterprise),
/* harmony export */   d: () => (/* binding */ appendExtensions),
/* harmony export */   u: () => (/* binding */ uidFields)
/* harmony export */ });
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */
const uidFields = ["esriFieldTypeOID", "esriFieldTypeGlobalID"];
const NONE_VALUE = "<None>";
const AppendOverwritePublishTypes = {
    "file geodatabase": "filegeodatabase",
    shapefile: "shapefile",
    geojson: "geojson",
    csv: "CSV",
    "microsoft excel": "excel",
    geopackage: "geoPackage"
};
const appendFileTypes = {
    Shapefile: "shapefile",
    "File Geodatabase": "fileGeodatabase",
    CSV: "csv",
    "Microsoft Excel": "excel",
    GeoJson: "geojson",
    GeoPackage: "geoPackage"
};
const AppendOverwriteCloudPublishTypes = {
    csv: "CSV",
    excel: "Microsoft Excel",
    shapefile: "Shapefile",
    fgdb: "File Geodatabase",
    geojson: "GeoJson",
    googlesheets: "Microsoft Excel"
};
const appendExtensions = ["zip", "csv", "xls", "xlsx", "geojson", "gpkg", "json"];
const appendExtensionsForEnterprise = ["zip", "csv", "xls", "xlsx"];



//# sourceMappingURL=append-4e11032c.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/basic-6db7ebd7.js":
/*!***********************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/basic-6db7ebd7.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ isDefined),
/* harmony export */   i: () => (/* binding */ isInNode),
/* harmony export */   s: () => (/* binding */ scales)
/* harmony export */ });
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */
var scales;
(function (scales) {
    scales["SMALL"] = "s";
    scales["MEDIUM"] = "m";
    scales["LARGE"] = "l";
})(scales || (scales = {}));
/**
 * Returns true if the value is defined
 * @param value - value to check
 */
function isDefined(value) {
    return value !== undefined && value !== null;
}
/**
 * Returns true if node has nodeName or is contained in a parent node with nodeName
 * @param node
 * @param nodeName
 */
function isInNode(node, nodeName) {
    while (node) {
        if (node.nodeName === nodeName.toUpperCase()) {
            return true;
        }
        node = node.parentElement;
    }
    return false;
}



//# sourceMappingURL=basic-6db7ebd7.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/commonEnums-fcf13661.js":
/*!*****************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/commonEnums-fcf13661.js ***!
  \*****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   L: () => (/* binding */ LastSortyBy),
/* harmony export */   a: () => (/* binding */ fieldTypesEnum),
/* harmony export */   f: () => (/* binding */ fieldInfoPrefixEnum),
/* harmony export */   i: () => (/* binding */ imageComponentInputTypesEnum),
/* harmony export */   l: () => (/* binding */ layerDisplayTypeEnum),
/* harmony export */   s: () => (/* binding */ serviceTypeEnum)
/* harmony export */ });
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */
var imageComponentInputTypesEnum;
(function (imageComponentInputTypesEnum) {
    imageComponentInputTypesEnum["sourceUrl"] = "sourceUrl";
    imageComponentInputTypesEnum["title"] = "title";
    imageComponentInputTypesEnum["caption"] = "caption";
    imageComponentInputTypesEnum["linkUrl"] = "linkUrl";
    imageComponentInputTypesEnum["altText"] = "altText";
})(imageComponentInputTypesEnum || (imageComponentInputTypesEnum = {}));
var fieldInfoPrefixEnum;
(function (fieldInfoPrefixEnum) {
    fieldInfoPrefixEnum["expression"] = "expression/";
    fieldInfoPrefixEnum["relationship"] = "relationships/";
    fieldInfoPrefixEnum["raster"] = "Raster.";
})(fieldInfoPrefixEnum || (fieldInfoPrefixEnum = {}));
var layerDisplayTypeEnum;
(function (layerDisplayTypeEnum) {
    layerDisplayTypeEnum["feature"] = "feature";
    layerDisplayTypeEnum["cluster"] = "cluster";
    layerDisplayTypeEnum["mapNotes"] = "mapNotes";
})(layerDisplayTypeEnum || (layerDisplayTypeEnum = {}));
var serviceTypeEnum;
(function (serviceTypeEnum) {
    serviceTypeEnum["feature"] = "feature";
    serviceTypeEnum["mapImage"] = "map-image";
    serviceTypeEnum["scene"] = "scene";
    serviceTypeEnum["ogcFeature"] = "ogc-feature";
    serviceTypeEnum["imagery"] = "imagery";
    serviceTypeEnum["wfs"] = "wfs";
    serviceTypeEnum["wms"] = "wms";
    serviceTypeEnum["csv"] = "csv";
    serviceTypeEnum["geojson"] = "geojson";
    serviceTypeEnum["stream"] = "stream";
    serviceTypeEnum["imageryTile"] = "imagery-tile";
    serviceTypeEnum["tile"] = "tile";
    serviceTypeEnum["subtype"] = "subtype";
})(serviceTypeEnum || (serviceTypeEnum = {}));
// https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-Field.html#type
var fieldTypesEnum;
(function (fieldTypesEnum) {
    fieldTypesEnum["integer"] = "integer";
    fieldTypesEnum["smallInteger"] = "small-integer";
    fieldTypesEnum["bigInteger"] = "big-integer";
    fieldTypesEnum["single"] = "single";
    fieldTypesEnum["double"] = "double";
    fieldTypesEnum["long"] = "long";
    fieldTypesEnum["string"] = "string";
    fieldTypesEnum["date"] = "date";
    fieldTypesEnum["dateOnly"] = "date-only";
    fieldTypesEnum["timeOnly"] = "time-only";
    fieldTypesEnum["timestampOffset"] = "timestamp-offset";
    fieldTypesEnum["oid"] = "oid";
    fieldTypesEnum["guid"] = "guid";
    fieldTypesEnum["globalId"] = "global-id";
    fieldTypesEnum["number"] = "number"; // for arcade
})(fieldTypesEnum || (fieldTypesEnum = {}));
var LastSortyBy;
(function (LastSortyBy) {
    LastSortyBy["default"] = "default";
    LastSortyBy["display"] = "display";
    LastSortyBy["type"] = "type";
    LastSortyBy["field"] = "field";
})(LastSortyBy || (LastSortyBy = {}));



//# sourceMappingURL=commonEnums-fcf13661.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,