"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["extensions_widgets_arcgis_analysis_node_modules_arcgis_arcgis-raster-function-editor_dist_esm-94120c"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/rfx-tree.entry.js":
/*!**************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/rfx-tree.entry.js ***!
  \**************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   rfx_tree: () => (/* binding */ RfxTree)
/* harmony export */ });
/* harmony import */ var _index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-da1b7138.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/index-da1b7138.js");
/* harmony import */ var _arcgis_core_core_lang_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @arcgis/core/core/lang.js */ "@arcgis/core/core/lang.js");
/* harmony import */ var _ui_utils_928a4096_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ui-utils-928a4096.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/ui-utils-928a4096.js");
/* harmony import */ var _arcgis_core_identity_IdentityManager_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @arcgis/core/identity/IdentityManager.js */ "@arcgis/core/identity/IdentityManager.js");
/* harmony import */ var _arcgis_core_core_urlUtils_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @arcgis/core/core/urlUtils.js */ "@arcgis/core/core/urlUtils.js");
/* harmony import */ var _arcgis_core_layers_Layer_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @arcgis/core/layers/Layer.js */ "@arcgis/core/layers/Layer.js");
/* harmony import */ var _arcgis_core_layers_ImageryLayer_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @arcgis/core/layers/ImageryLayer.js */ "@arcgis/core/layers/ImageryLayer.js");
/* harmony import */ var _arcgis_core_smartMapping_raster_renderers_stretch_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @arcgis/core/smartMapping/raster/renderers/stretch.js */ "@arcgis/core/smartMapping/raster/renderers/stretch.js");
/* harmony import */ var _arcgis_core_request_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @arcgis/core/request.js */ "@arcgis/core/request.js");
/* harmony import */ var _arcgis_core_rest_support_AlgorithmicColorRamp_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @arcgis/core/rest/support/AlgorithmicColorRamp.js */ "@arcgis/core/rest/support/AlgorithmicColorRamp.js");
/* harmony import */ var _arcgis_core_rest_support_MultipartColorRamp_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @arcgis/core/rest/support/MultipartColorRamp.js */ "@arcgis/core/rest/support/MultipartColorRamp.js");
/* harmony import */ var _arcgis_core_Color_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @arcgis/core/Color.js */ "@arcgis/core/Color.js");
/* harmony import */ var _colorRampUtils_8bdd46c5_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./colorRampUtils-8bdd46c5.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/colorRampUtils-8bdd46c5.js");
/* harmony import */ var _arcgis_core_rest_geoprocessor_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @arcgis/core/rest/geoprocessor.js */ "@arcgis/core/rest/geoprocessor.js");
/* harmony import */ var _arcgis_core_portal_PortalItem_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @arcgis/core/portal/PortalItem.js */ "@arcgis/core/portal/PortalItem.js");
















const rfxTreeCss = ":root{--calcite-color-brand:#007ac2;--calcite-color-brand-hover:#00619b;--calcite-color-brand-press:#004874;--calcite-color-status-info:#00619b;--calcite-color-status-success:#35ac46;--calcite-color-status-warning:#edd317;--calcite-color-status-danger:#d83020;--calcite-color-status-danger-hover:#a82b1e;--calcite-color-status-danger-press:#7c1d13;--calcite-color-background:#f8f8f8;--calcite-color-foreground-1:#ffffff;--calcite-color-foreground-2:#f3f3f3;--calcite-color-foreground-3:#eaeaea;--calcite-color-text-1:#151515;--calcite-color-text-2:#4a4a4a;--calcite-color-text-3:#6a6a6a;--calcite-color-text-inverse:#ffffff;--calcite-color-text-link:#00619b;--calcite-color-border-1:#cacaca;--calcite-color-border-2:#d4d4d4;--calcite-color-border-3:#dfdfdf;--calcite-color-border-input:#949494;--rfx-quarter-spacing:0.25rem;--rfx-half-spacing:0.5rem;--rfx-three-quarter-spacing:0.75rem;--rfx-full-spacing:1rem;--rfx-component-default-width:100%;--rfx-ui-border-input:var(--calcite-color-border-2);--rfx-popover-content-min-height:30vh;--rfx-popover-content-max-height:60vh;--rfx-popover-content-height:45vh;--rfx-widget-content-height:30vh}:host{overflow-y:auto;overflow-x:hidden;scroll-behavior:smooth;height:100%;width:100%}";

const RfxTree = class {
    constructor(hostRef) {
        (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.rfxTreeValueChange = (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "rfxTreeValueChange", 7);
        /**
         * @category Public
         * @type {string[]}
         * @description
         * Indicates which tree items are expanded.
         */
        this.treeItemsOpen = new Set();
        /**
         * handle mutations to the tree
         * @category private
         * @param {MutationRecord[]} mutations
         * @returns {void}
         */
        this.handleMutations = (mutations) => {
            mutations.forEach((mutation) => {
                if (mutation.type === "attributes" && mutation.attributeName === "expanded") {
                    const target = mutation.target;
                    if ("key" in target.dataset && target.dataset.key !== undefined) {
                        const previousState = this.treeItemsOpen.has(target.dataset.key);
                        if (previousState !== target.expanded) {
                            this.toggleTreeItem(target.dataset.key);
                        }
                    }
                }
            });
        };
        /**
         * Helper function to toggle expanded/open tree items
         * @param {string} key - key of the tree item
         * @category private
         */
        this.toggleTreeItem = (key) => {
            if (this.treeItemsOpen.has(key)) {
                this.treeItemsOpen.delete(key);
            }
            else {
                this.treeItemsOpen.add(key);
            }
            this.buildJSXTree();
        };
        this.data = {};
        this.value = undefined;
        this.renderedTree = [];
    }
    onDataChange() {
        this.setupComponent();
    }
    componentWillLoad() {
        this.setupComponent();
    }
    /**
     * @category Lifecycle
     */
    componentDidLoad() {
        this.setupObserver();
    }
    /**
     * @category Lifecycle
     */
    disconnectedCallback() {
        this.observer?.disconnect();
    }
    /**
     * @category private
     */
    setupComponent() {
        // Reset the tree, assume all items are closed
        this.treeItemsOpen.clear();
        // Build the tree
        this.buildJSXTree();
    }
    /**
     * @category Private
     * @description
     */
    setupObserver() {
        // create observer to track expansion of tree items
        this.observer = new MutationObserver(this.handleMutations);
        const target = this.hostElement.shadowRoot ?? this.hostElement;
        this.observer.observe(target, {
            attributes: true,
            subtree: true,
            attributeFilter: ["expanded"]
        });
    }
    /**
     * @category Private
     * @returns {void}
     * @description
     * Builds the tree from the data object, updates this.renderedTree param
     */
    buildJSXTree() {
        const buildJSXTreeRecursive = (subData) => {
            const elements = [];
            for (const key in subData) {
                const value = subData[key];
                let children = undefined;
                if (typeof value === "object") {
                    // If it's an object and expanded recurse over children, otherwise add a placeholder
                    children = this.treeItemsOpen.has(key)
                        ? buildJSXTreeRecursive(value)
                        : [this.createTreeItem("placeholder", "placeholder")];
                }
                const treeValue = typeof value === "object" ? key : value;
                elements.push(this.createTreeItem(key, treeValue, children));
            }
            return elements;
        };
        this.renderedTree = buildJSXTreeRecursive(this.data);
    }
    /**
     * @category Private
     * @param {string} key - key of the tree item
     * @param {string} value - value of the tree item
     * @param {h.Element[] | undefined} children - children of the tree item (if any)
     * @returns {h.Element} - tree item element with children
     * @description
     * Used to create a tree item element with children.
     */
    createTreeItem(key, value, children) {
        return ((0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-tree-item", { key: `${key}-item`, "data-key": key, selected: this.value === key, "aria-selected": this.value === key, expanded: this.treeItemsOpen.has(key), "aria-expanded": this.treeItemsOpen.has(key), onClick: children !== undefined ? () => this.toggleTreeItem(key) : undefined }, value, children !== undefined && ((0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-tree", { key: `${key}-child-tree`, slot: "children" }, children))));
    }
    /**
     * @category private
     * @param {CustomEvent} event - calcite-tree-select event
     * @description
     * Updates component value with selected item
     */
    handleTreeSelect(event) {
        const treeEl = event.target;
        const selectedKey = treeEl?.selectedItems[0]?.dataset.key;
        if (selectedKey !== undefined) {
            // This should never happen, but if it does, we want to fix it
            if (selectedKey.includes("placeholder") === true) {
                const parentKey = treeEl?.selectedItems[0].parentElement?.dataset.key;
                if (parentKey !== undefined) {
                    this.treeItemsOpen.add(parentKey);
                }
                // trigger re-render to replace placeholder with expected children
                this.buildJSXTree();
            }
            else {
                this.value = selectedKey;
                this.rfxTreeValueChange.emit();
            }
        }
    }
    /**
     * @category lifecycle
     * @description
     * Renders the component
     */
    render() {
        return ((0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.H, null, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-tree", { key: "base-tree", scale: _ui_utils_928a4096_js__WEBPACK_IMPORTED_MODULE_2__.U.Scale, onCalciteTreeSelect: (event) => this.handleTreeSelect(event) }, this.renderedTree))));
    }
    get hostElement() { return (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.a)(this); }
    static get watchers() { return {
        "data": ["onDataChange"]
    }; }
};
RfxTree.style = rfxTreeCss;



//# sourceMappingURL=rfx-tree.entry.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/ui-utils-928a4096.js":
/*!*****************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/ui-utils-928a4096.js ***!
  \*****************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   C: () => (/* binding */ CalciteScale),
/* harmony export */   U: () => (/* binding */ UIDefaults),
/* harmony export */   a: () => (/* binding */ CalciteOverlayPositioning)
/* harmony export */ });
const UIDefaults = {
    Scale: "s",
    PopoverTimer: 60
};
const CalciteScale = {
    s: "s",
    m: "m"
};
const CalciteOverlayPositioning = {
    absolute: "absolute",
    fixed: "fixed"
};



//# sourceMappingURL=ui-utils-928a4096.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,