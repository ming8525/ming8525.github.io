"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_arcgis-840a03"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-delete-items.entry.js":
/*!**********************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-delete-items.entry.js ***!
  \**********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   arcgis_delete_items: () => (/* binding */ ArcgisDeleteItems)
/* harmony export */ });
/* harmony import */ var _index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-e3bf7da7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-e3bf7da7.js");
/* harmony import */ var _index_05956cab_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index-05956cab.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-05956cab.js");
/* harmony import */ var _locale_050b6db9_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./locale-050b6db9.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-050b6db9.js");
/* harmony import */ var _delete_items_32d24534_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./delete-items-32d24534.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/delete-items-32d24534.js");
/* harmony import */ var _dom_4d367677_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./dom-4d367677.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-4d367677.js");
/* harmony import */ var _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./languageUtil-ef0e54b2.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-ef0e54b2.js");
/* harmony import */ var _loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./loadModules-b4ac1247.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-b4ac1247.js");
/* harmony import */ var _service_8c2c4241_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./service-8c2c4241.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/service-8c2c4241.js");
/* harmony import */ var _portal_d518b571_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./portal-d518b571.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/portal-d518b571.js");
/* harmony import */ var _config_75adf962_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./config-75adf962.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/config-75adf962.js");
/* harmony import */ var _url_4c3ae54c_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./url-4c3ae54c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/url-4c3ae54c.js");
/* harmony import */ var _functional_44de8fcf_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./functional-44de8fcf.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-44de8fcf.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */













const arcgisDeleteItemsCss = ".content{display:flex;min-height:72px;flex-direction:column}::slotted([slot=message]){margin-bottom:1rem}";

const ArcgisDeleteItems = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisDeleteItemsDelete = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisDeleteItemsDelete", 7);
        this.arcgisDeleteItemsClose = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisDeleteItemsClose", 7);
        this.arcgisDeleteItemsModeChange = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisDeleteItemsModeChange", 7);
        this.deletePrimaryAction = "RECYCLE";
        this.headerTitle = "";
        this.configurePermanentlyDeleteOverrideUI = () => {
            const { i18n } = this;
            this.headerTitle = i18n.permanentlyDelete;
            this.primaryButtonText = i18n.permanentlyDelete;
            this.deleteMode = "UNRECYCLABLE";
            this.permanentDeleteOverrideEnabled = true;
        };
        this.renderContent = () => {
            const { portal, items, deleteItemsBuckets, deleteMode, permanentDeleteOverrideEnabled, configurePermanentlyDeleteOverrideUI } = this;
            return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.F, null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", { name: "message" }), portal.sourceJSON.recycleBinEnabled ? ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-delete-items-recycle-enabled", { items: items, buckets: deleteItemsBuckets, mode: deleteMode, permanentlyDeleteOverridden: permanentDeleteOverrideEnabled, onArcgisDeleteItemsPermanentlyDeleteOverride: () => {
                    configurePermanentlyDeleteOverrideUI();
                }, showSelectedItemsCount: this.showSelectedItemsCount })) : ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-delete-items-recycle-disabled", { buckets: deleteItemsBuckets, mode: deleteMode }))));
        };
        this.handleDelete = async () => {
            var _a, _b;
            this.isLoading = true;
            const { unprotectedItems, unrecyclableItems } = this.deleteItemsBuckets;
            let permanentlyDeletedItems = null;
            let deletedItems = null;
            if (this.permanentDeleteOverrideEnabled) {
                permanentlyDeletedItems = await this.deleteItems(this.items, true);
            }
            else {
                deletedItems =
                    (_a = (unprotectedItems.length > 0 &&
                        (await this.deleteItems(unprotectedItems.map((bucket) => bucket.item))))) !== null && _a !== void 0 ? _a : null;
                permanentlyDeletedItems =
                    (_b = (unrecyclableItems.length > 0 &&
                        (await this.deleteItems(unrecyclableItems.map((bucket) => bucket.item), true)))) !== null && _b !== void 0 ? _b : null;
            }
            this.arcgisDeleteItemsDelete.emit({
                deletedItems,
                permanentlyDeletedItems
            });
            if (this.closeOnConfirm) {
                this.active = false;
            }
            this.isLoading = false;
        };
        this.deleteItems = async (items, permanentDelete = false) => {
            return items.length === 1
                ? [await (0,_delete_items_32d24534_js__WEBPACK_IMPORTED_MODULE_3__.d)(items[0], this.user, permanentDelete)]
                : (await (0,_delete_items_32d24534_js__WEBPACK_IMPORTED_MODULE_3__.a)(items, this.user, permanentDelete)).results;
        };
        this.user = undefined;
        this.portal = undefined;
        this.items = [];
        this.active = false;
        this.deleteItemsBuckets = {
            protectedItems: [],
            unprotectedItems: [],
            unrecyclableItems: []
        };
        this.showSelectedItemsCount = true;
        this.closeOnConfirm = true;
        this.permanentDeleteOverrideEnabled = false;
        this.isLoading = false;
        this.store = (0,_index_05956cab_js__WEBPACK_IMPORTED_MODULE_1__.c)({});
    }
    async componentWillLoad() {
        const locale = await (0,_locale_050b6db9_js__WEBPACK_IMPORTED_MODULE_2__.g)(this.el);
        this.i18n = locale[0];
        this.store.state.i18n = this.i18n;
        this.determineDeleteState();
    }
    async determineDeleteState(props = { fetch: true }) {
        const { fetch } = props;
        // Sort items into bins on load
        if (fetch) {
            this.isLoading = true;
            this.deleteItemsBuckets = Object.assign({}, (await (0,_delete_items_32d24534_js__WEBPACK_IMPORTED_MODULE_3__.b)(this.items, this.user, this.portal)));
            this.isLoading = false;
        }
        this.deleteMode = (0,_delete_items_32d24534_js__WEBPACK_IMPORTED_MODULE_3__.c)(this.deleteItemsBuckets);
        this.arcgisDeleteItemsModeChange.emit(this.deleteMode);
        this.deletePrimaryAction = (0,_delete_items_32d24534_js__WEBPACK_IMPORTED_MODULE_3__.e)(this.deleteMode);
        // Determine UI based on buckets
        this.primaryButtonText =
            this.i18n[this.deletePrimaryAction === "PERMANENTLY_DELETE" ? "permanentlyDelete" : "delete"];
        this.headerTitle =
            this.i18n[this.deletePrimaryAction === "PERMANENTLY_DELETE" ? "permanentlyDelete" : "deleteItems"];
    }
    render() {
        const { i18n, active, isLoading, headerTitle, primaryButtonText, deletePrimaryAction, permanentDeleteOverrideEnabled, renderContent } = this;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-modal", { open: active, widthScale: "s", kind: "danger", outsideCloseDisabled: true, onCalciteModalBeforeClose: () => {
                this.arcgisDeleteItemsClose.emit();
            }, onCalciteModalClose: () => {
                this.active = false;
            } }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { slot: "header", class: "header" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", { name: "header" }, headerTitle)), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "content", class: "content" }, isLoading ? (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-scrim", { loading: true }) : renderContent()), !isLoading && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.F, null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "back" }, permanentDeleteOverrideEnabled && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { appearance: "outline-fill", kind: "neutral", "data-id": "backButton", onClick: () => {
                this.permanentDeleteOverrideEnabled = false;
                this.determineDeleteState({ fetch: false });
            }, width: "full", disabled: isLoading }, i18n.back))), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { slot: "secondary", appearance: "outline-fill", "data-id": "cancelButton", onClick: () => {
                this.arcgisDeleteItemsClose.emit();
                this.active = false;
            }, width: "full" }, i18n.cancel), deletePrimaryAction !== "NONE" && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { slot: "primary", appearance: "solid", kind: "danger", "data-id": "nextButton", onClick: async () => this.handleDelete(), width: "full", disabled: isLoading }, primaryButtonText !== null && primaryButtonText !== void 0 ? primaryButtonText : i18n.delete))))));
    }
    get el() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
    static get watchers() { return {
        "items": ["determineDeleteState"]
    }; }
};
ArcgisDeleteItems.style = arcgisDeleteItemsCss;



//# sourceMappingURL=arcgis-delete-items.entry.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-ef0e54b2.js":
/*!******************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-ef0e54b2.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   C: () => (/* binding */ CSS_UTILITY),
/* harmony export */   a: () => (/* binding */ formatDate),
/* harmony export */   b: () => (/* binding */ formatPlural),
/* harmony export */   f: () => (/* binding */ formatNumber),
/* harmony export */   g: () => (/* binding */ getElementDir),
/* harmony export */   l: () => (/* binding */ languageMap)
/* harmony export */ });
/* harmony import */ var _loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./loadModules-b4ac1247.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-b4ac1247.js");
/* harmony import */ var _dom_4d367677_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dom-4d367677.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-4d367677.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */



const languageMap = new Map([
    ["ar", "ar"],
    ["bg", "bg"],
    ["bs", "bs"],
    ["ca", "ca"],
    ["cs", "cs"],
    ["da", "da"],
    ["de", "de"],
    ["el", "el"],
    ["en", "en"],
    ["es", "es"],
    ["et", "et"],
    ["fi", "fi"],
    ["fr", "fr"],
    ["he", "he"],
    ["hr", "hr"],
    ["hu", "hu"],
    ["id", "id"],
    ["it", "it"],
    ["ja", "ja"],
    ["ko", "ko"],
    ["lt", "lt"],
    ["lv", "lv"],
    ["nb", "nb"],
    ["nl", "nl"],
    ["pl", "pl"],
    ["pt-br", "pt-BR"],
    ["pt-pt", "pt-PT"],
    ["ro", "ro"],
    ["ru", "ru"],
    ["sk", "sk"],
    ["sl", "sl"],
    ["sr", "sr"],
    ["sv", "sv"],
    ["th", "th"],
    ["tr", "tr"],
    ["uk", "uk"],
    ["vi", "vi"],
    ["zh-cn", "zh-CN"],
    ["zh-hk", "zh-HK"],
    ["zh-tw", "zh-TW"]
]);
// rtl
function getElementDir(el) {
    return getElementProp(el, "dir", "ltr");
}
function getElementProp(el, prop, value) {
    const closestWithProp = (0,_dom_4d367677_js__WEBPACK_IMPORTED_MODULE_1__.c)(el, `[${prop}]`);
    return closestWithProp ? closestWithProp.getAttribute(prop) : value;
}
// css
const CSS_UTILITY = {
    rtl: "arcgis--rtl"
};
async function formatNumber(number, options) {
    const { api, type, places } = options || {};
    if (api === 4) {
        const [intl] = await (0,_loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_0__.l)(["esri/intl"]);
        const numberFormatIntlOptions = intl.convertNumberFormatToIntlOptions({
            places,
            style: type,
            digitSeparator: true
        });
        return intl.formatNumber(number, Object.assign(Object.assign({}, numberFormatIntlOptions), { style: type }));
    }
    const [dojoNumber] = await (0,_loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_0__.l)(["dojo/number"]);
    return dojoNumber.format(number, {
        type,
        places,
        pattern: options === null || options === void 0 ? void 0 : options.pattern
    });
}
const cache = {};
function formatDate(date) {
    const lang = document.documentElement.lang;
    const dayShortMonthYear = {
        year: "numeric",
        month: "short",
        day: "numeric"
    };
    if (!cache[lang]) {
        cache[lang] = new Intl.DateTimeFormat(document.documentElement.lang, dayShortMonthYear);
    }
    return cache[lang].format(date);
}
function formatPlural(lang, stringObj, number) {
    const singles = ["id", "ja", "ko", "th", "vi", "zh-cn", "zh-hk", "zh-tw"];
    const likeEnglish = [
        "en",
        "ca",
        "da",
        "de",
        "el",
        "es",
        "et",
        "fi",
        "hi",
        "hu",
        "it",
        "nb",
        "nl",
        "pt-pt",
        "sv",
        "tr"
    ];
    const locale = lang !== null && lang !== void 0 ? lang : "en";
    // if the number is one, or it is a "simple" language, return the 1 string
    if (number === 1 || singles.includes(locale)) {
        return stringObj.single.replace("${number}", "1");
    }
    // if the number is not 1 and the language uses the same pluralization strategy as english,
    // return the multiple string
    if (number !== 1 && likeEnglish.includes(locale)) {
        return stringObj.multiple.replace("${number}", `${number}`);
    }
    // if none of the above worked, return the "unknown" string
    return stringObj.unknown.replace("${number}", `${number}`);
}



//# sourceMappingURL=languageUtil-ef0e54b2.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-050b6db9.js":
/*!************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-050b6db9.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ getComponentClosestLanguage),
/* harmony export */   g: () => (/* binding */ getLocaleComponentStrings)
/* harmony export */ });
/* harmony import */ var _dom_4d367677_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dom-4d367677.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-4d367677.js");
/* harmony import */ var _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./languageUtil-ef0e54b2.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-ef0e54b2.js");
/* harmony import */ var _index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./index-e3bf7da7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-e3bf7da7.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */




// https://medium.com/stencil-tricks/implementing-internationalisation-i18n-with-stencil-5e6559554117
function getComponentClosestLanguage(element) {
    var _a, _b, _c;
    const closestElement = (_a = (0,_dom_4d367677_js__WEBPACK_IMPORTED_MODULE_0__.c)(element, "[lang]")) !== null && _a !== void 0 ? _a : (_c = (_b = element.shadowRoot) === null || _b === void 0 ? void 0 : _b.ownerDocument) === null || _c === void 0 ? void 0 : _c.documentElement;
    // language set by the calling application or browser. defaults to english.
    const lang = ((closestElement === null || closestElement === void 0 ? void 0 : closestElement.lang) || (navigator === null || navigator === void 0 ? void 0 : navigator.language) || "en").toLowerCase();
    if (_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang)) {
        return _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang);
    }
    else {
        // "ru-RU" maps to "ru" use case
        if (_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang.slice(0, 2))) {
            return _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang.slice(0, 2));
        }
        else {
            return "en";
        }
    }
}
function getComponentClosestLanguageIntl(element) {
    var _a, _b, _c;
    // it's OK if we don't have the 4 letter language file for it
    // 4 letter language code needed for formatting numbers
    const closestElement = (_a = (0,_dom_4d367677_js__WEBPACK_IMPORTED_MODULE_0__.c)(element, "[lang]")) !== null && _a !== void 0 ? _a : (_c = (_b = element.shadowRoot) === null || _b === void 0 ? void 0 : _b.ownerDocument) === null || _c === void 0 ? void 0 : _c.documentElement;
    // language set by the calling application or browser. defaults to english.
    const lang = ((closestElement === null || closestElement === void 0 ? void 0 : closestElement.lang) || (navigator === null || navigator === void 0 ? void 0 : navigator.language) || "en").toLowerCase();
    if (_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang)) {
        return _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang);
    }
    else {
        if (_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang.slice(0, 2))) {
            // we support the 2 letter coded language
            // e.g. it-CH vs it
            return lang;
        }
        else {
            return "en";
        }
    }
}
function fetchLocaleStringsForComponent(componentName, locale) {
    return new Promise((resolve, reject) => {
        fetch((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_2__.a)(`../arcgis-app-assets/i18n/${componentName}.i18n.${locale}.json`)).then((result) => {
            if (result.ok)
                resolve(result.json());
            else
                reject();
        }, () => reject());
    });
}
const stringCache = {};
function fetchLocaleStringsFromCache(componentName, locale) {
    const id = `${componentName}${locale}`;
    if (!stringCache[id]) {
        stringCache[id] = fetchLocaleStringsForComponent(componentName, locale);
    }
    return stringCache[id];
}
/**
 * Get strings and language codes.
 * This method returns 2 language codes.
 * The first one returns a code that's also supported as a language file.
 * The second one returns a code where there is support for the first 2 letters of the code as part of a language file,
 * but will return the original 4 letter code from the page.
 * E.g. For "it-ch" it will return "it" as the first language code and "it-ch" as the second.
 * The second one is required for esri.intl.setLocale() to get the correct formatting.
 *
 * If a tagName is provided it will overwite the element's tagName
 *
 *  @return [ strings, first language code, second language code]
 */
async function getLocaleComponentStrings(element, tagName) {
    const componentName = tagName || element.tagName.toLowerCase();
    const componentLanguage = getComponentClosestLanguage(element);
    const componentLanguageIntl = getComponentClosestLanguageIntl(element);
    let strings;
    try {
        strings = await fetchLocaleStringsFromCache(componentName, componentLanguage);
    }
    catch (e) {
        console.warn(`no locale for ${componentName} (${componentLanguage}) loading default locale en.`);
        strings = await fetchLocaleStringsFromCache(componentName, "en");
    }
    return [strings, componentLanguage, componentLanguageIntl];
}



//# sourceMappingURL=locale-050b6db9.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/service-8c2c4241.js":
/*!*************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/service-8c2c4241.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ getServiceUrlResponse),
/* harmony export */   g: () => (/* binding */ getRelatedItems),
/* harmony export */   i: () => (/* binding */ isHostedService),
/* harmony export */   r: () => (/* binding */ requestFetch)
/* harmony export */ });
/* harmony import */ var _portal_d518b571_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./portal-d518b571.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/portal-d518b571.js");
/* harmony import */ var _config_75adf962_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./config-75adf962.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/config-75adf962.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */



/** Work-around since using `request` directly will trigger unwanted toast on the Home App if the layer is unavailable */
const requestFetch = async (url, portal, options = {}) => {
    const { body, usePost, addTokenManually, api = _config_75adf962_js__WEBPACK_IMPORTED_MODULE_1__.c === null || _config_75adf962_js__WEBPACK_IMPORTED_MODULE_1__.c === void 0 ? void 0 : _config_75adf962_js__WEBPACK_IMPORTED_MODULE_1__.c.api, customToken } = options;
    const data = new URLSearchParams();
    if (body) {
        Object.entries(body).forEach(([key, value]) => {
            if (value !== undefined) {
                data.append(key, value);
            }
        });
    }
    const urlToSend = new URL(url);
    urlToSend.searchParams.append("f", "json");
    if (customToken) {
        urlToSend.searchParams.append("token", customToken);
    }
    else {
        const token = addTokenManually === false ? null : await (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_0__.h)(portal, api);
        if (token) {
            urlToSend.searchParams.append("token", token);
        }
    }
    const response = await fetch(urlToSend.toString(), {
        body: usePost ? data : undefined,
        method: usePost ? "POST" : "GET"
    });
    const result = await response.json();
    const error = result.error;
    if (error) {
        throw typeof error === "string" ? new Error(error) : error;
    }
    return result;
};

/**
 * Send a request to get data for `url`. This request will not include a token to avoid token leak
 */
const getServiceUrlResponse = async (url, portal) => {
    var _a;
    try {
        return { result: await requestFetch(url, portal, { addTokenManually: false }) };
    }
    catch (error) {
        const tokenRequiredMessage = "token required";
        if ((_a = error === null || error === void 0 ? void 0 : error.message) === null || _a === void 0 ? void 0 : _a.toLowerCase().includes(tokenRequiredMessage)) {
            return { error: { code: "tokenRequired" } };
        }
        console.error(error);
        return { error: { code: "unhandledError" } };
    }
};
async function getRelatedItems(itemId, portal, { relationshipType, direction }) {
    const url = `${(0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_0__.g)(portal)}content/items/${itemId}/relatedItems`;
    return await (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_0__.r)(url, { relationshipType, direction });
}

const isHostedService = (typeKeywords, type) => type === "Feature Service" && typeKeywords.includes("Hosted Service");



//# sourceMappingURL=service-8c2c4241.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2lkZ2V0cy9jaHVua3MvYXJjZ2lzX2FuYWx5c2lzX25vZGVfbW9kdWxlc19hcmNnaXNfYXBwLWNvbXBvbmVudHNfZGlzdF9lc21fYXJjZ2lzLTg0MGEwMy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDaUg7QUFDMUQ7QUFDZTtBQUN3RztBQUNuSjtBQUNTO0FBQ0Q7QUFDSjtBQUNEO0FBQ0E7QUFDSDtBQUNPOztBQUVsQyx1Q0FBdUMsYUFBYSxnQkFBZ0Isc0JBQXNCLDBCQUEwQixtQkFBbUI7O0FBRXZJO0FBQ0E7QUFDQSxRQUFRLHFEQUFnQjtBQUN4Qix1Q0FBdUMscURBQVc7QUFDbEQsc0NBQXNDLHFEQUFXO0FBQ2pELDJDQUEyQyxxREFBVztBQUN0RDtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsT0FBTztBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0Isc0hBQXNIO0FBQzFJLG9CQUFvQixxREFBQyxDQUFDLGlEQUFRLFFBQVEscURBQUMsV0FBVyxpQkFBaUIsMENBQTBDLHFEQUFDLDBDQUEwQztBQUN4SjtBQUNBLGlCQUFpQix1REFBdUQsTUFBTSxxREFBQywyQ0FBMkMsK0NBQStDO0FBQ3pLO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLHNDQUFzQztBQUMxRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5Qiw0REFBVTtBQUNuQyx5QkFBeUIsNERBQVc7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixxREFBVyxHQUFHO0FBQ25DO0FBQ0E7QUFDQSw2QkFBNkIsc0RBQXlC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eGItY2xpZW50Ly4vZXh0ZW5zaW9ucy93aWRnZXRzL2FyY2dpcy9hbmFseXNpcy9ub2RlX21vZHVsZXMvQGFyY2dpcy9hcHAtY29tcG9uZW50cy9kaXN0L2VzbS9hcmNnaXMtZGVsZXRlLWl0ZW1zLmVudHJ5LmpzIiwid2VicGFjazovL2V4Yi1jbGllbnQvLi9leHRlbnNpb25zL3dpZGdldHMvYXJjZ2lzL2FuYWx5c2lzL25vZGVfbW9kdWxlcy9AYXJjZ2lzL2FwcC1jb21wb25lbnRzL2Rpc3QvZXNtL2xhbmd1YWdlVXRpbC1lZjBlNTRiMi5qcyIsIndlYnBhY2s6Ly9leGItY2xpZW50Ly4vZXh0ZW5zaW9ucy93aWRnZXRzL2FyY2dpcy9hbmFseXNpcy9ub2RlX21vZHVsZXMvQGFyY2dpcy9hcHAtY29tcG9uZW50cy9kaXN0L2VzbS9sb2NhbGUtMDUwYjZkYjkuanMiLCJ3ZWJwYWNrOi8vZXhiLWNsaWVudC8uL2V4dGVuc2lvbnMvd2lkZ2V0cy9hcmNnaXMvYW5hbHlzaXMvbm9kZV9tb2R1bGVzL0BhcmNnaXMvYXBwLWNvbXBvbmVudHMvZGlzdC9lc20vc2VydmljZS04YzJjNDI0MS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEFsbCBtYXRlcmlhbCBjb3B5cmlnaHQgRVNSSSwgQWxsIFJpZ2h0cyBSZXNlcnZlZCwgdW5sZXNzIG90aGVyd2lzZSBzcGVjaWZpZWQuXG4gKiB2NC4wLjU4XG4gKi9cbmltcG9ydCB7IHIgYXMgcmVnaXN0ZXJJbnN0YW5jZSwgYyBhcyBjcmVhdGVFdmVudCwgaCwgRiBhcyBGcmFnbWVudCwgZCBhcyBnZXRFbGVtZW50IH0gZnJvbSAnLi9pbmRleC1lM2JmN2RhNy5qcyc7XG5pbXBvcnQgeyBjIGFzIGNyZWF0ZVN0b3JlIH0gZnJvbSAnLi9pbmRleC0wNTk1NmNhYi5qcyc7XG5pbXBvcnQgeyBnIGFzIGdldExvY2FsZUNvbXBvbmVudFN0cmluZ3MgfSBmcm9tICcuL2xvY2FsZS0wNTBiNmRiOS5qcyc7XG5pbXBvcnQgeyBkIGFzIGRlbGV0ZUl0ZW0sIGEgYXMgZGVsZXRlSXRlbXMsIGIgYXMgZGV0ZXJtaW5lRGVsZXRlSXRlbXNCdWNrZXRzLCBjIGFzIGRldGVybWluZURlbGV0ZU1vZGUsIGUgYXMgZGV0ZXJtaW5lRGVsZXRlUHJpbWFyeUFjdGlvbiB9IGZyb20gJy4vZGVsZXRlLWl0ZW1zLTMyZDI0NTM0LmpzJztcbmltcG9ydCAnLi9kb20tNGQzNjc2NzcuanMnO1xuaW1wb3J0ICcuL2xhbmd1YWdlVXRpbC1lZjBlNTRiMi5qcyc7XG5pbXBvcnQgJy4vbG9hZE1vZHVsZXMtYjRhYzEyNDcuanMnO1xuaW1wb3J0ICcuL3NlcnZpY2UtOGMyYzQyNDEuanMnO1xuaW1wb3J0ICcuL3BvcnRhbC1kNTE4YjU3MS5qcyc7XG5pbXBvcnQgJy4vY29uZmlnLTc1YWRmOTYyLmpzJztcbmltcG9ydCAnLi91cmwtNGMzYWU1NGMuanMnO1xuaW1wb3J0ICcuL2Z1bmN0aW9uYWwtNDRkZThmY2YuanMnO1xuXG5jb25zdCBhcmNnaXNEZWxldGVJdGVtc0NzcyA9IFwiLmNvbnRlbnR7ZGlzcGxheTpmbGV4O21pbi1oZWlnaHQ6NzJweDtmbGV4LWRpcmVjdGlvbjpjb2x1bW59OjpzbG90dGVkKFtzbG90PW1lc3NhZ2VdKXttYXJnaW4tYm90dG9tOjFyZW19XCI7XG5cbmNvbnN0IEFyY2dpc0RlbGV0ZUl0ZW1zID0gY2xhc3Mge1xuICAgIGNvbnN0cnVjdG9yKGhvc3RSZWYpIHtcbiAgICAgICAgcmVnaXN0ZXJJbnN0YW5jZSh0aGlzLCBob3N0UmVmKTtcbiAgICAgICAgdGhpcy5hcmNnaXNEZWxldGVJdGVtc0RlbGV0ZSA9IGNyZWF0ZUV2ZW50KHRoaXMsIFwiYXJjZ2lzRGVsZXRlSXRlbXNEZWxldGVcIiwgNyk7XG4gICAgICAgIHRoaXMuYXJjZ2lzRGVsZXRlSXRlbXNDbG9zZSA9IGNyZWF0ZUV2ZW50KHRoaXMsIFwiYXJjZ2lzRGVsZXRlSXRlbXNDbG9zZVwiLCA3KTtcbiAgICAgICAgdGhpcy5hcmNnaXNEZWxldGVJdGVtc01vZGVDaGFuZ2UgPSBjcmVhdGVFdmVudCh0aGlzLCBcImFyY2dpc0RlbGV0ZUl0ZW1zTW9kZUNoYW5nZVwiLCA3KTtcbiAgICAgICAgdGhpcy5kZWxldGVQcmltYXJ5QWN0aW9uID0gXCJSRUNZQ0xFXCI7XG4gICAgICAgIHRoaXMuaGVhZGVyVGl0bGUgPSBcIlwiO1xuICAgICAgICB0aGlzLmNvbmZpZ3VyZVBlcm1hbmVudGx5RGVsZXRlT3ZlcnJpZGVVSSA9ICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHsgaTE4biB9ID0gdGhpcztcbiAgICAgICAgICAgIHRoaXMuaGVhZGVyVGl0bGUgPSBpMThuLnBlcm1hbmVudGx5RGVsZXRlO1xuICAgICAgICAgICAgdGhpcy5wcmltYXJ5QnV0dG9uVGV4dCA9IGkxOG4ucGVybWFuZW50bHlEZWxldGU7XG4gICAgICAgICAgICB0aGlzLmRlbGV0ZU1vZGUgPSBcIlVOUkVDWUNMQUJMRVwiO1xuICAgICAgICAgICAgdGhpcy5wZXJtYW5lbnREZWxldGVPdmVycmlkZUVuYWJsZWQgPSB0cnVlO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLnJlbmRlckNvbnRlbnQgPSAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCB7IHBvcnRhbCwgaXRlbXMsIGRlbGV0ZUl0ZW1zQnVja2V0cywgZGVsZXRlTW9kZSwgcGVybWFuZW50RGVsZXRlT3ZlcnJpZGVFbmFibGVkLCBjb25maWd1cmVQZXJtYW5lbnRseURlbGV0ZU92ZXJyaWRlVUkgfSA9IHRoaXM7XG4gICAgICAgICAgICByZXR1cm4gKGgoRnJhZ21lbnQsIG51bGwsIGgoXCJzbG90XCIsIHsgbmFtZTogXCJtZXNzYWdlXCIgfSksIHBvcnRhbC5zb3VyY2VKU09OLnJlY3ljbGVCaW5FbmFibGVkID8gKGgoXCJhcmNnaXMtZGVsZXRlLWl0ZW1zLXJlY3ljbGUtZW5hYmxlZFwiLCB7IGl0ZW1zOiBpdGVtcywgYnVja2V0czogZGVsZXRlSXRlbXNCdWNrZXRzLCBtb2RlOiBkZWxldGVNb2RlLCBwZXJtYW5lbnRseURlbGV0ZU92ZXJyaWRkZW46IHBlcm1hbmVudERlbGV0ZU92ZXJyaWRlRW5hYmxlZCwgb25BcmNnaXNEZWxldGVJdGVtc1Blcm1hbmVudGx5RGVsZXRlT3ZlcnJpZGU6ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uZmlndXJlUGVybWFuZW50bHlEZWxldGVPdmVycmlkZVVJKCk7XG4gICAgICAgICAgICAgICAgfSwgc2hvd1NlbGVjdGVkSXRlbXNDb3VudDogdGhpcy5zaG93U2VsZWN0ZWRJdGVtc0NvdW50IH0pKSA6IChoKFwiYXJjZ2lzLWRlbGV0ZS1pdGVtcy1yZWN5Y2xlLWRpc2FibGVkXCIsIHsgYnVja2V0czogZGVsZXRlSXRlbXNCdWNrZXRzLCBtb2RlOiBkZWxldGVNb2RlIH0pKSkpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmhhbmRsZURlbGV0ZSA9IGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgICAgICB0aGlzLmlzTG9hZGluZyA9IHRydWU7XG4gICAgICAgICAgICBjb25zdCB7IHVucHJvdGVjdGVkSXRlbXMsIHVucmVjeWNsYWJsZUl0ZW1zIH0gPSB0aGlzLmRlbGV0ZUl0ZW1zQnVja2V0cztcbiAgICAgICAgICAgIGxldCBwZXJtYW5lbnRseURlbGV0ZWRJdGVtcyA9IG51bGw7XG4gICAgICAgICAgICBsZXQgZGVsZXRlZEl0ZW1zID0gbnVsbDtcbiAgICAgICAgICAgIGlmICh0aGlzLnBlcm1hbmVudERlbGV0ZU92ZXJyaWRlRW5hYmxlZCkge1xuICAgICAgICAgICAgICAgIHBlcm1hbmVudGx5RGVsZXRlZEl0ZW1zID0gYXdhaXQgdGhpcy5kZWxldGVJdGVtcyh0aGlzLml0ZW1zLCB0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGRlbGV0ZWRJdGVtcyA9XG4gICAgICAgICAgICAgICAgICAgIChfYSA9ICh1bnByb3RlY3RlZEl0ZW1zLmxlbmd0aCA+IDAgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIChhd2FpdCB0aGlzLmRlbGV0ZUl0ZW1zKHVucHJvdGVjdGVkSXRlbXMubWFwKChidWNrZXQpID0+IGJ1Y2tldC5pdGVtKSkpKSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogbnVsbDtcbiAgICAgICAgICAgICAgICBwZXJtYW5lbnRseURlbGV0ZWRJdGVtcyA9XG4gICAgICAgICAgICAgICAgICAgIChfYiA9ICh1bnJlY3ljbGFibGVJdGVtcy5sZW5ndGggPiAwICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAoYXdhaXQgdGhpcy5kZWxldGVJdGVtcyh1bnJlY3ljbGFibGVJdGVtcy5tYXAoKGJ1Y2tldCkgPT4gYnVja2V0Lml0ZW0pLCB0cnVlKSkpKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5hcmNnaXNEZWxldGVJdGVtc0RlbGV0ZS5lbWl0KHtcbiAgICAgICAgICAgICAgICBkZWxldGVkSXRlbXMsXG4gICAgICAgICAgICAgICAgcGVybWFuZW50bHlEZWxldGVkSXRlbXNcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKHRoaXMuY2xvc2VPbkNvbmZpcm0pIHtcbiAgICAgICAgICAgICAgICB0aGlzLmFjdGl2ZSA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5pc0xvYWRpbmcgPSBmYWxzZTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5kZWxldGVJdGVtcyA9IGFzeW5jIChpdGVtcywgcGVybWFuZW50RGVsZXRlID0gZmFsc2UpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBpdGVtcy5sZW5ndGggPT09IDFcbiAgICAgICAgICAgICAgICA/IFthd2FpdCBkZWxldGVJdGVtKGl0ZW1zWzBdLCB0aGlzLnVzZXIsIHBlcm1hbmVudERlbGV0ZSldXG4gICAgICAgICAgICAgICAgOiAoYXdhaXQgZGVsZXRlSXRlbXMoaXRlbXMsIHRoaXMudXNlciwgcGVybWFuZW50RGVsZXRlKSkucmVzdWx0cztcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy51c2VyID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLnBvcnRhbCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5pdGVtcyA9IFtdO1xuICAgICAgICB0aGlzLmFjdGl2ZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLmRlbGV0ZUl0ZW1zQnVja2V0cyA9IHtcbiAgICAgICAgICAgIHByb3RlY3RlZEl0ZW1zOiBbXSxcbiAgICAgICAgICAgIHVucHJvdGVjdGVkSXRlbXM6IFtdLFxuICAgICAgICAgICAgdW5yZWN5Y2xhYmxlSXRlbXM6IFtdXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuc2hvd1NlbGVjdGVkSXRlbXNDb3VudCA9IHRydWU7XG4gICAgICAgIHRoaXMuY2xvc2VPbkNvbmZpcm0gPSB0cnVlO1xuICAgICAgICB0aGlzLnBlcm1hbmVudERlbGV0ZU92ZXJyaWRlRW5hYmxlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmlzTG9hZGluZyA9IGZhbHNlO1xuICAgICAgICB0aGlzLnN0b3JlID0gY3JlYXRlU3RvcmUoe30pO1xuICAgIH1cbiAgICBhc3luYyBjb21wb25lbnRXaWxsTG9hZCgpIHtcbiAgICAgICAgY29uc3QgbG9jYWxlID0gYXdhaXQgZ2V0TG9jYWxlQ29tcG9uZW50U3RyaW5ncyh0aGlzLmVsKTtcbiAgICAgICAgdGhpcy5pMThuID0gbG9jYWxlWzBdO1xuICAgICAgICB0aGlzLnN0b3JlLnN0YXRlLmkxOG4gPSB0aGlzLmkxOG47XG4gICAgICAgIHRoaXMuZGV0ZXJtaW5lRGVsZXRlU3RhdGUoKTtcbiAgICB9XG4gICAgYXN5bmMgZGV0ZXJtaW5lRGVsZXRlU3RhdGUocHJvcHMgPSB7IGZldGNoOiB0cnVlIH0pIHtcbiAgICAgICAgY29uc3QgeyBmZXRjaCB9ID0gcHJvcHM7XG4gICAgICAgIC8vIFNvcnQgaXRlbXMgaW50byBiaW5zIG9uIGxvYWRcbiAgICAgICAgaWYgKGZldGNoKSB7XG4gICAgICAgICAgICB0aGlzLmlzTG9hZGluZyA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLmRlbGV0ZUl0ZW1zQnVja2V0cyA9IE9iamVjdC5hc3NpZ24oe30sIChhd2FpdCBkZXRlcm1pbmVEZWxldGVJdGVtc0J1Y2tldHModGhpcy5pdGVtcywgdGhpcy51c2VyLCB0aGlzLnBvcnRhbCkpKTtcbiAgICAgICAgICAgIHRoaXMuaXNMb2FkaW5nID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5kZWxldGVNb2RlID0gZGV0ZXJtaW5lRGVsZXRlTW9kZSh0aGlzLmRlbGV0ZUl0ZW1zQnVja2V0cyk7XG4gICAgICAgIHRoaXMuYXJjZ2lzRGVsZXRlSXRlbXNNb2RlQ2hhbmdlLmVtaXQodGhpcy5kZWxldGVNb2RlKTtcbiAgICAgICAgdGhpcy5kZWxldGVQcmltYXJ5QWN0aW9uID0gZGV0ZXJtaW5lRGVsZXRlUHJpbWFyeUFjdGlvbih0aGlzLmRlbGV0ZU1vZGUpO1xuICAgICAgICAvLyBEZXRlcm1pbmUgVUkgYmFzZWQgb24gYnVja2V0c1xuICAgICAgICB0aGlzLnByaW1hcnlCdXR0b25UZXh0ID1cbiAgICAgICAgICAgIHRoaXMuaTE4blt0aGlzLmRlbGV0ZVByaW1hcnlBY3Rpb24gPT09IFwiUEVSTUFORU5UTFlfREVMRVRFXCIgPyBcInBlcm1hbmVudGx5RGVsZXRlXCIgOiBcImRlbGV0ZVwiXTtcbiAgICAgICAgdGhpcy5oZWFkZXJUaXRsZSA9XG4gICAgICAgICAgICB0aGlzLmkxOG5bdGhpcy5kZWxldGVQcmltYXJ5QWN0aW9uID09PSBcIlBFUk1BTkVOVExZX0RFTEVURVwiID8gXCJwZXJtYW5lbnRseURlbGV0ZVwiIDogXCJkZWxldGVJdGVtc1wiXTtcbiAgICB9XG4gICAgcmVuZGVyKCkge1xuICAgICAgICBjb25zdCB7IGkxOG4sIGFjdGl2ZSwgaXNMb2FkaW5nLCBoZWFkZXJUaXRsZSwgcHJpbWFyeUJ1dHRvblRleHQsIGRlbGV0ZVByaW1hcnlBY3Rpb24sIHBlcm1hbmVudERlbGV0ZU92ZXJyaWRlRW5hYmxlZCwgcmVuZGVyQ29udGVudCB9ID0gdGhpcztcbiAgICAgICAgcmV0dXJuIChoKFwiY2FsY2l0ZS1tb2RhbFwiLCB7IG9wZW46IGFjdGl2ZSwgd2lkdGhTY2FsZTogXCJzXCIsIGtpbmQ6IFwiZGFuZ2VyXCIsIG91dHNpZGVDbG9zZURpc2FibGVkOiB0cnVlLCBvbkNhbGNpdGVNb2RhbEJlZm9yZUNsb3NlOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5hcmNnaXNEZWxldGVJdGVtc0Nsb3NlLmVtaXQoKTtcbiAgICAgICAgICAgIH0sIG9uQ2FsY2l0ZU1vZGFsQ2xvc2U6ICgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmFjdGl2ZSA9IGZhbHNlO1xuICAgICAgICAgICAgfSB9LCBoKFwic3BhblwiLCB7IHNsb3Q6IFwiaGVhZGVyXCIsIGNsYXNzOiBcImhlYWRlclwiIH0sIGgoXCJzbG90XCIsIHsgbmFtZTogXCJoZWFkZXJcIiB9LCBoZWFkZXJUaXRsZSkpLCBoKFwiZGl2XCIsIHsgc2xvdDogXCJjb250ZW50XCIsIGNsYXNzOiBcImNvbnRlbnRcIiB9LCBpc0xvYWRpbmcgPyBoKFwiY2FsY2l0ZS1zY3JpbVwiLCB7IGxvYWRpbmc6IHRydWUgfSkgOiByZW5kZXJDb250ZW50KCkpLCAhaXNMb2FkaW5nICYmIChoKEZyYWdtZW50LCBudWxsLCBoKFwiZGl2XCIsIHsgc2xvdDogXCJiYWNrXCIgfSwgcGVybWFuZW50RGVsZXRlT3ZlcnJpZGVFbmFibGVkICYmIChoKFwiY2FsY2l0ZS1idXR0b25cIiwgeyBhcHBlYXJhbmNlOiBcIm91dGxpbmUtZmlsbFwiLCBraW5kOiBcIm5ldXRyYWxcIiwgXCJkYXRhLWlkXCI6IFwiYmFja0J1dHRvblwiLCBvbkNsaWNrOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5wZXJtYW5lbnREZWxldGVPdmVycmlkZUVuYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB0aGlzLmRldGVybWluZURlbGV0ZVN0YXRlKHsgZmV0Y2g6IGZhbHNlIH0pO1xuICAgICAgICAgICAgfSwgd2lkdGg6IFwiZnVsbFwiLCBkaXNhYmxlZDogaXNMb2FkaW5nIH0sIGkxOG4uYmFjaykpKSwgaChcImNhbGNpdGUtYnV0dG9uXCIsIHsgc2xvdDogXCJzZWNvbmRhcnlcIiwgYXBwZWFyYW5jZTogXCJvdXRsaW5lLWZpbGxcIiwgXCJkYXRhLWlkXCI6IFwiY2FuY2VsQnV0dG9uXCIsIG9uQ2xpY2s6ICgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmFyY2dpc0RlbGV0ZUl0ZW1zQ2xvc2UuZW1pdCgpO1xuICAgICAgICAgICAgICAgIHRoaXMuYWN0aXZlID0gZmFsc2U7XG4gICAgICAgICAgICB9LCB3aWR0aDogXCJmdWxsXCIgfSwgaTE4bi5jYW5jZWwpLCBkZWxldGVQcmltYXJ5QWN0aW9uICE9PSBcIk5PTkVcIiAmJiAoaChcImNhbGNpdGUtYnV0dG9uXCIsIHsgc2xvdDogXCJwcmltYXJ5XCIsIGFwcGVhcmFuY2U6IFwic29saWRcIiwga2luZDogXCJkYW5nZXJcIiwgXCJkYXRhLWlkXCI6IFwibmV4dEJ1dHRvblwiLCBvbkNsaWNrOiBhc3luYyAoKSA9PiB0aGlzLmhhbmRsZURlbGV0ZSgpLCB3aWR0aDogXCJmdWxsXCIsIGRpc2FibGVkOiBpc0xvYWRpbmcgfSwgcHJpbWFyeUJ1dHRvblRleHQgIT09IG51bGwgJiYgcHJpbWFyeUJ1dHRvblRleHQgIT09IHZvaWQgMCA/IHByaW1hcnlCdXR0b25UZXh0IDogaTE4bi5kZWxldGUpKSkpKSk7XG4gICAgfVxuICAgIGdldCBlbCgpIHsgcmV0dXJuIGdldEVsZW1lbnQodGhpcyk7IH1cbiAgICBzdGF0aWMgZ2V0IHdhdGNoZXJzKCkgeyByZXR1cm4ge1xuICAgICAgICBcIml0ZW1zXCI6IFtcImRldGVybWluZURlbGV0ZVN0YXRlXCJdXG4gICAgfTsgfVxufTtcbkFyY2dpc0RlbGV0ZUl0ZW1zLnN0eWxlID0gYXJjZ2lzRGVsZXRlSXRlbXNDc3M7XG5cbmV4cG9ydCB7IEFyY2dpc0RlbGV0ZUl0ZW1zIGFzIGFyY2dpc19kZWxldGVfaXRlbXMgfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXJjZ2lzLWRlbGV0ZS1pdGVtcy5lbnRyeS5qcy5tYXAiLCIvKiFcbiAqIEFsbCBtYXRlcmlhbCBjb3B5cmlnaHQgRVNSSSwgQWxsIFJpZ2h0cyBSZXNlcnZlZCwgdW5sZXNzIG90aGVyd2lzZSBzcGVjaWZpZWQuXG4gKiB2NC4wLjU4XG4gKi9cbmltcG9ydCB7IGwgYXMgbG9hZE1vZHVsZXMgfSBmcm9tICcuL2xvYWRNb2R1bGVzLWI0YWMxMjQ3LmpzJztcbmltcG9ydCB7IGMgYXMgY2xvc2VzdEVsZW1lbnRDcm9zc1NoYWRvd0JvdW5kYXJ5IH0gZnJvbSAnLi9kb20tNGQzNjc2NzcuanMnO1xuXG5jb25zdCBsYW5ndWFnZU1hcCA9IG5ldyBNYXAoW1xuICAgIFtcImFyXCIsIFwiYXJcIl0sXG4gICAgW1wiYmdcIiwgXCJiZ1wiXSxcbiAgICBbXCJic1wiLCBcImJzXCJdLFxuICAgIFtcImNhXCIsIFwiY2FcIl0sXG4gICAgW1wiY3NcIiwgXCJjc1wiXSxcbiAgICBbXCJkYVwiLCBcImRhXCJdLFxuICAgIFtcImRlXCIsIFwiZGVcIl0sXG4gICAgW1wiZWxcIiwgXCJlbFwiXSxcbiAgICBbXCJlblwiLCBcImVuXCJdLFxuICAgIFtcImVzXCIsIFwiZXNcIl0sXG4gICAgW1wiZXRcIiwgXCJldFwiXSxcbiAgICBbXCJmaVwiLCBcImZpXCJdLFxuICAgIFtcImZyXCIsIFwiZnJcIl0sXG4gICAgW1wiaGVcIiwgXCJoZVwiXSxcbiAgICBbXCJoclwiLCBcImhyXCJdLFxuICAgIFtcImh1XCIsIFwiaHVcIl0sXG4gICAgW1wiaWRcIiwgXCJpZFwiXSxcbiAgICBbXCJpdFwiLCBcIml0XCJdLFxuICAgIFtcImphXCIsIFwiamFcIl0sXG4gICAgW1wia29cIiwgXCJrb1wiXSxcbiAgICBbXCJsdFwiLCBcImx0XCJdLFxuICAgIFtcImx2XCIsIFwibHZcIl0sXG4gICAgW1wibmJcIiwgXCJuYlwiXSxcbiAgICBbXCJubFwiLCBcIm5sXCJdLFxuICAgIFtcInBsXCIsIFwicGxcIl0sXG4gICAgW1wicHQtYnJcIiwgXCJwdC1CUlwiXSxcbiAgICBbXCJwdC1wdFwiLCBcInB0LVBUXCJdLFxuICAgIFtcInJvXCIsIFwicm9cIl0sXG4gICAgW1wicnVcIiwgXCJydVwiXSxcbiAgICBbXCJza1wiLCBcInNrXCJdLFxuICAgIFtcInNsXCIsIFwic2xcIl0sXG4gICAgW1wic3JcIiwgXCJzclwiXSxcbiAgICBbXCJzdlwiLCBcInN2XCJdLFxuICAgIFtcInRoXCIsIFwidGhcIl0sXG4gICAgW1widHJcIiwgXCJ0clwiXSxcbiAgICBbXCJ1a1wiLCBcInVrXCJdLFxuICAgIFtcInZpXCIsIFwidmlcIl0sXG4gICAgW1wiemgtY25cIiwgXCJ6aC1DTlwiXSxcbiAgICBbXCJ6aC1oa1wiLCBcInpoLUhLXCJdLFxuICAgIFtcInpoLXR3XCIsIFwiemgtVFdcIl1cbl0pO1xuLy8gcnRsXG5mdW5jdGlvbiBnZXRFbGVtZW50RGlyKGVsKSB7XG4gICAgcmV0dXJuIGdldEVsZW1lbnRQcm9wKGVsLCBcImRpclwiLCBcImx0clwiKTtcbn1cbmZ1bmN0aW9uIGdldEVsZW1lbnRQcm9wKGVsLCBwcm9wLCB2YWx1ZSkge1xuICAgIGNvbnN0IGNsb3Nlc3RXaXRoUHJvcCA9IGNsb3Nlc3RFbGVtZW50Q3Jvc3NTaGFkb3dCb3VuZGFyeShlbCwgYFske3Byb3B9XWApO1xuICAgIHJldHVybiBjbG9zZXN0V2l0aFByb3AgPyBjbG9zZXN0V2l0aFByb3AuZ2V0QXR0cmlidXRlKHByb3ApIDogdmFsdWU7XG59XG4vLyBjc3NcbmNvbnN0IENTU19VVElMSVRZID0ge1xuICAgIHJ0bDogXCJhcmNnaXMtLXJ0bFwiXG59O1xuYXN5bmMgZnVuY3Rpb24gZm9ybWF0TnVtYmVyKG51bWJlciwgb3B0aW9ucykge1xuICAgIGNvbnN0IHsgYXBpLCB0eXBlLCBwbGFjZXMgfSA9IG9wdGlvbnMgfHwge307XG4gICAgaWYgKGFwaSA9PT0gNCkge1xuICAgICAgICBjb25zdCBbaW50bF0gPSBhd2FpdCBsb2FkTW9kdWxlcyhbXCJlc3JpL2ludGxcIl0pO1xuICAgICAgICBjb25zdCBudW1iZXJGb3JtYXRJbnRsT3B0aW9ucyA9IGludGwuY29udmVydE51bWJlckZvcm1hdFRvSW50bE9wdGlvbnMoe1xuICAgICAgICAgICAgcGxhY2VzLFxuICAgICAgICAgICAgc3R5bGU6IHR5cGUsXG4gICAgICAgICAgICBkaWdpdFNlcGFyYXRvcjogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGludGwuZm9ybWF0TnVtYmVyKG51bWJlciwgT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBudW1iZXJGb3JtYXRJbnRsT3B0aW9ucyksIHsgc3R5bGU6IHR5cGUgfSkpO1xuICAgIH1cbiAgICBjb25zdCBbZG9qb051bWJlcl0gPSBhd2FpdCBsb2FkTW9kdWxlcyhbXCJkb2pvL251bWJlclwiXSk7XG4gICAgcmV0dXJuIGRvam9OdW1iZXIuZm9ybWF0KG51bWJlciwge1xuICAgICAgICB0eXBlLFxuICAgICAgICBwbGFjZXMsXG4gICAgICAgIHBhdHRlcm46IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5wYXR0ZXJuXG4gICAgfSk7XG59XG5jb25zdCBjYWNoZSA9IHt9O1xuZnVuY3Rpb24gZm9ybWF0RGF0ZShkYXRlKSB7XG4gICAgY29uc3QgbGFuZyA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5sYW5nO1xuICAgIGNvbnN0IGRheVNob3J0TW9udGhZZWFyID0ge1xuICAgICAgICB5ZWFyOiBcIm51bWVyaWNcIixcbiAgICAgICAgbW9udGg6IFwic2hvcnRcIixcbiAgICAgICAgZGF5OiBcIm51bWVyaWNcIlxuICAgIH07XG4gICAgaWYgKCFjYWNoZVtsYW5nXSkge1xuICAgICAgICBjYWNoZVtsYW5nXSA9IG5ldyBJbnRsLkRhdGVUaW1lRm9ybWF0KGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5sYW5nLCBkYXlTaG9ydE1vbnRoWWVhcik7XG4gICAgfVxuICAgIHJldHVybiBjYWNoZVtsYW5nXS5mb3JtYXQoZGF0ZSk7XG59XG5mdW5jdGlvbiBmb3JtYXRQbHVyYWwobGFuZywgc3RyaW5nT2JqLCBudW1iZXIpIHtcbiAgICBjb25zdCBzaW5nbGVzID0gW1wiaWRcIiwgXCJqYVwiLCBcImtvXCIsIFwidGhcIiwgXCJ2aVwiLCBcInpoLWNuXCIsIFwiemgtaGtcIiwgXCJ6aC10d1wiXTtcbiAgICBjb25zdCBsaWtlRW5nbGlzaCA9IFtcbiAgICAgICAgXCJlblwiLFxuICAgICAgICBcImNhXCIsXG4gICAgICAgIFwiZGFcIixcbiAgICAgICAgXCJkZVwiLFxuICAgICAgICBcImVsXCIsXG4gICAgICAgIFwiZXNcIixcbiAgICAgICAgXCJldFwiLFxuICAgICAgICBcImZpXCIsXG4gICAgICAgIFwiaGlcIixcbiAgICAgICAgXCJodVwiLFxuICAgICAgICBcIml0XCIsXG4gICAgICAgIFwibmJcIixcbiAgICAgICAgXCJubFwiLFxuICAgICAgICBcInB0LXB0XCIsXG4gICAgICAgIFwic3ZcIixcbiAgICAgICAgXCJ0clwiXG4gICAgXTtcbiAgICBjb25zdCBsb2NhbGUgPSBsYW5nICE9PSBudWxsICYmIGxhbmcgIT09IHZvaWQgMCA/IGxhbmcgOiBcImVuXCI7XG4gICAgLy8gaWYgdGhlIG51bWJlciBpcyBvbmUsIG9yIGl0IGlzIGEgXCJzaW1wbGVcIiBsYW5ndWFnZSwgcmV0dXJuIHRoZSAxIHN0cmluZ1xuICAgIGlmIChudW1iZXIgPT09IDEgfHwgc2luZ2xlcy5pbmNsdWRlcyhsb2NhbGUpKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmdPYmouc2luZ2xlLnJlcGxhY2UoXCIke251bWJlcn1cIiwgXCIxXCIpO1xuICAgIH1cbiAgICAvLyBpZiB0aGUgbnVtYmVyIGlzIG5vdCAxIGFuZCB0aGUgbGFuZ3VhZ2UgdXNlcyB0aGUgc2FtZSBwbHVyYWxpemF0aW9uIHN0cmF0ZWd5IGFzIGVuZ2xpc2gsXG4gICAgLy8gcmV0dXJuIHRoZSBtdWx0aXBsZSBzdHJpbmdcbiAgICBpZiAobnVtYmVyICE9PSAxICYmIGxpa2VFbmdsaXNoLmluY2x1ZGVzKGxvY2FsZSkpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZ09iai5tdWx0aXBsZS5yZXBsYWNlKFwiJHtudW1iZXJ9XCIsIGAke251bWJlcn1gKTtcbiAgICB9XG4gICAgLy8gaWYgbm9uZSBvZiB0aGUgYWJvdmUgd29ya2VkLCByZXR1cm4gdGhlIFwidW5rbm93blwiIHN0cmluZ1xuICAgIHJldHVybiBzdHJpbmdPYmoudW5rbm93bi5yZXBsYWNlKFwiJHtudW1iZXJ9XCIsIGAke251bWJlcn1gKTtcbn1cblxuZXhwb3J0IHsgQ1NTX1VUSUxJVFkgYXMgQywgZm9ybWF0RGF0ZSBhcyBhLCBmb3JtYXRQbHVyYWwgYXMgYiwgZm9ybWF0TnVtYmVyIGFzIGYsIGdldEVsZW1lbnREaXIgYXMgZywgbGFuZ3VhZ2VNYXAgYXMgbCB9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1sYW5ndWFnZVV0aWwtZWYwZTU0YjIuanMubWFwIiwiLyohXG4gKiBBbGwgbWF0ZXJpYWwgY29weXJpZ2h0IEVTUkksIEFsbCBSaWdodHMgUmVzZXJ2ZWQsIHVubGVzcyBvdGhlcndpc2Ugc3BlY2lmaWVkLlxuICogdjQuMC41OFxuICovXG5pbXBvcnQgeyBjIGFzIGNsb3Nlc3RFbGVtZW50Q3Jvc3NTaGFkb3dCb3VuZGFyeSB9IGZyb20gJy4vZG9tLTRkMzY3Njc3LmpzJztcbmltcG9ydCB7IGwgYXMgbGFuZ3VhZ2VNYXAgfSBmcm9tICcuL2xhbmd1YWdlVXRpbC1lZjBlNTRiMi5qcyc7XG5pbXBvcnQgeyBhIGFzIGdldEFzc2V0UGF0aCB9IGZyb20gJy4vaW5kZXgtZTNiZjdkYTcuanMnO1xuXG4vLyBodHRwczovL21lZGl1bS5jb20vc3RlbmNpbC10cmlja3MvaW1wbGVtZW50aW5nLWludGVybmF0aW9uYWxpc2F0aW9uLWkxOG4td2l0aC1zdGVuY2lsLTVlNjU1OTU1NDExN1xuZnVuY3Rpb24gZ2V0Q29tcG9uZW50Q2xvc2VzdExhbmd1YWdlKGVsZW1lbnQpIHtcbiAgICB2YXIgX2EsIF9iLCBfYztcbiAgICBjb25zdCBjbG9zZXN0RWxlbWVudCA9IChfYSA9IGNsb3Nlc3RFbGVtZW50Q3Jvc3NTaGFkb3dCb3VuZGFyeShlbGVtZW50LCBcIltsYW5nXVwiKSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogKF9jID0gKF9iID0gZWxlbWVudC5zaGFkb3dSb290KSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Iub3duZXJEb2N1bWVudCkgPT09IG51bGwgfHwgX2MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jLmRvY3VtZW50RWxlbWVudDtcbiAgICAvLyBsYW5ndWFnZSBzZXQgYnkgdGhlIGNhbGxpbmcgYXBwbGljYXRpb24gb3IgYnJvd3Nlci4gZGVmYXVsdHMgdG8gZW5nbGlzaC5cbiAgICBjb25zdCBsYW5nID0gKChjbG9zZXN0RWxlbWVudCA9PT0gbnVsbCB8fCBjbG9zZXN0RWxlbWVudCA9PT0gdm9pZCAwID8gdm9pZCAwIDogY2xvc2VzdEVsZW1lbnQubGFuZykgfHwgKG5hdmlnYXRvciA9PT0gbnVsbCB8fCBuYXZpZ2F0b3IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG5hdmlnYXRvci5sYW5ndWFnZSkgfHwgXCJlblwiKS50b0xvd2VyQ2FzZSgpO1xuICAgIGlmIChsYW5ndWFnZU1hcC5oYXMobGFuZykpIHtcbiAgICAgICAgcmV0dXJuIGxhbmd1YWdlTWFwLmdldChsYW5nKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIC8vIFwicnUtUlVcIiBtYXBzIHRvIFwicnVcIiB1c2UgY2FzZVxuICAgICAgICBpZiAobGFuZ3VhZ2VNYXAuaGFzKGxhbmcuc2xpY2UoMCwgMikpKSB7XG4gICAgICAgICAgICByZXR1cm4gbGFuZ3VhZ2VNYXAuZ2V0KGxhbmcuc2xpY2UoMCwgMikpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIFwiZW5cIjtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIGdldENvbXBvbmVudENsb3Nlc3RMYW5ndWFnZUludGwoZWxlbWVudCkge1xuICAgIHZhciBfYSwgX2IsIF9jO1xuICAgIC8vIGl0J3MgT0sgaWYgd2UgZG9uJ3QgaGF2ZSB0aGUgNCBsZXR0ZXIgbGFuZ3VhZ2UgZmlsZSBmb3IgaXRcbiAgICAvLyA0IGxldHRlciBsYW5ndWFnZSBjb2RlIG5lZWRlZCBmb3IgZm9ybWF0dGluZyBudW1iZXJzXG4gICAgY29uc3QgY2xvc2VzdEVsZW1lbnQgPSAoX2EgPSBjbG9zZXN0RWxlbWVudENyb3NzU2hhZG93Qm91bmRhcnkoZWxlbWVudCwgXCJbbGFuZ11cIikpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IChfYyA9IChfYiA9IGVsZW1lbnQuc2hhZG93Um9vdCkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLm93bmVyRG9jdW1lbnQpID09PSBudWxsIHx8IF9jID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYy5kb2N1bWVudEVsZW1lbnQ7XG4gICAgLy8gbGFuZ3VhZ2Ugc2V0IGJ5IHRoZSBjYWxsaW5nIGFwcGxpY2F0aW9uIG9yIGJyb3dzZXIuIGRlZmF1bHRzIHRvIGVuZ2xpc2guXG4gICAgY29uc3QgbGFuZyA9ICgoY2xvc2VzdEVsZW1lbnQgPT09IG51bGwgfHwgY2xvc2VzdEVsZW1lbnQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGNsb3Nlc3RFbGVtZW50LmxhbmcpIHx8IChuYXZpZ2F0b3IgPT09IG51bGwgfHwgbmF2aWdhdG9yID09PSB2b2lkIDAgPyB2b2lkIDAgOiBuYXZpZ2F0b3IubGFuZ3VhZ2UpIHx8IFwiZW5cIikudG9Mb3dlckNhc2UoKTtcbiAgICBpZiAobGFuZ3VhZ2VNYXAuaGFzKGxhbmcpKSB7XG4gICAgICAgIHJldHVybiBsYW5ndWFnZU1hcC5nZXQobGFuZyk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBpZiAobGFuZ3VhZ2VNYXAuaGFzKGxhbmcuc2xpY2UoMCwgMikpKSB7XG4gICAgICAgICAgICAvLyB3ZSBzdXBwb3J0IHRoZSAyIGxldHRlciBjb2RlZCBsYW5ndWFnZVxuICAgICAgICAgICAgLy8gZS5nLiBpdC1DSCB2cyBpdFxuICAgICAgICAgICAgcmV0dXJuIGxhbmc7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gXCJlblwiO1xuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gZmV0Y2hMb2NhbGVTdHJpbmdzRm9yQ29tcG9uZW50KGNvbXBvbmVudE5hbWUsIGxvY2FsZSkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIGZldGNoKGdldEFzc2V0UGF0aChgLi4vYXJjZ2lzLWFwcC1hc3NldHMvaTE4bi8ke2NvbXBvbmVudE5hbWV9LmkxOG4uJHtsb2NhbGV9Lmpzb25gKSkudGhlbigocmVzdWx0KSA9PiB7XG4gICAgICAgICAgICBpZiAocmVzdWx0Lm9rKVxuICAgICAgICAgICAgICAgIHJlc29sdmUocmVzdWx0Lmpzb24oKSk7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgcmVqZWN0KCk7XG4gICAgICAgIH0sICgpID0+IHJlamVjdCgpKTtcbiAgICB9KTtcbn1cbmNvbnN0IHN0cmluZ0NhY2hlID0ge307XG5mdW5jdGlvbiBmZXRjaExvY2FsZVN0cmluZ3NGcm9tQ2FjaGUoY29tcG9uZW50TmFtZSwgbG9jYWxlKSB7XG4gICAgY29uc3QgaWQgPSBgJHtjb21wb25lbnROYW1lfSR7bG9jYWxlfWA7XG4gICAgaWYgKCFzdHJpbmdDYWNoZVtpZF0pIHtcbiAgICAgICAgc3RyaW5nQ2FjaGVbaWRdID0gZmV0Y2hMb2NhbGVTdHJpbmdzRm9yQ29tcG9uZW50KGNvbXBvbmVudE5hbWUsIGxvY2FsZSk7XG4gICAgfVxuICAgIHJldHVybiBzdHJpbmdDYWNoZVtpZF07XG59XG4vKipcbiAqIEdldCBzdHJpbmdzIGFuZCBsYW5ndWFnZSBjb2Rlcy5cbiAqIFRoaXMgbWV0aG9kIHJldHVybnMgMiBsYW5ndWFnZSBjb2Rlcy5cbiAqIFRoZSBmaXJzdCBvbmUgcmV0dXJucyBhIGNvZGUgdGhhdCdzIGFsc28gc3VwcG9ydGVkIGFzIGEgbGFuZ3VhZ2UgZmlsZS5cbiAqIFRoZSBzZWNvbmQgb25lIHJldHVybnMgYSBjb2RlIHdoZXJlIHRoZXJlIGlzIHN1cHBvcnQgZm9yIHRoZSBmaXJzdCAyIGxldHRlcnMgb2YgdGhlIGNvZGUgYXMgcGFydCBvZiBhIGxhbmd1YWdlIGZpbGUsXG4gKiBidXQgd2lsbCByZXR1cm4gdGhlIG9yaWdpbmFsIDQgbGV0dGVyIGNvZGUgZnJvbSB0aGUgcGFnZS5cbiAqIEUuZy4gRm9yIFwiaXQtY2hcIiBpdCB3aWxsIHJldHVybiBcIml0XCIgYXMgdGhlIGZpcnN0IGxhbmd1YWdlIGNvZGUgYW5kIFwiaXQtY2hcIiBhcyB0aGUgc2Vjb25kLlxuICogVGhlIHNlY29uZCBvbmUgaXMgcmVxdWlyZWQgZm9yIGVzcmkuaW50bC5zZXRMb2NhbGUoKSB0byBnZXQgdGhlIGNvcnJlY3QgZm9ybWF0dGluZy5cbiAqXG4gKiBJZiBhIHRhZ05hbWUgaXMgcHJvdmlkZWQgaXQgd2lsbCBvdmVyd2l0ZSB0aGUgZWxlbWVudCdzIHRhZ05hbWVcbiAqXG4gKiAgQHJldHVybiBbIHN0cmluZ3MsIGZpcnN0IGxhbmd1YWdlIGNvZGUsIHNlY29uZCBsYW5ndWFnZSBjb2RlXVxuICovXG5hc3luYyBmdW5jdGlvbiBnZXRMb2NhbGVDb21wb25lbnRTdHJpbmdzKGVsZW1lbnQsIHRhZ05hbWUpIHtcbiAgICBjb25zdCBjb21wb25lbnROYW1lID0gdGFnTmFtZSB8fCBlbGVtZW50LnRhZ05hbWUudG9Mb3dlckNhc2UoKTtcbiAgICBjb25zdCBjb21wb25lbnRMYW5ndWFnZSA9IGdldENvbXBvbmVudENsb3Nlc3RMYW5ndWFnZShlbGVtZW50KTtcbiAgICBjb25zdCBjb21wb25lbnRMYW5ndWFnZUludGwgPSBnZXRDb21wb25lbnRDbG9zZXN0TGFuZ3VhZ2VJbnRsKGVsZW1lbnQpO1xuICAgIGxldCBzdHJpbmdzO1xuICAgIHRyeSB7XG4gICAgICAgIHN0cmluZ3MgPSBhd2FpdCBmZXRjaExvY2FsZVN0cmluZ3NGcm9tQ2FjaGUoY29tcG9uZW50TmFtZSwgY29tcG9uZW50TGFuZ3VhZ2UpO1xuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgICBjb25zb2xlLndhcm4oYG5vIGxvY2FsZSBmb3IgJHtjb21wb25lbnROYW1lfSAoJHtjb21wb25lbnRMYW5ndWFnZX0pIGxvYWRpbmcgZGVmYXVsdCBsb2NhbGUgZW4uYCk7XG4gICAgICAgIHN0cmluZ3MgPSBhd2FpdCBmZXRjaExvY2FsZVN0cmluZ3NGcm9tQ2FjaGUoY29tcG9uZW50TmFtZSwgXCJlblwiKTtcbiAgICB9XG4gICAgcmV0dXJuIFtzdHJpbmdzLCBjb21wb25lbnRMYW5ndWFnZSwgY29tcG9uZW50TGFuZ3VhZ2VJbnRsXTtcbn1cblxuZXhwb3J0IHsgZ2V0Q29tcG9uZW50Q2xvc2VzdExhbmd1YWdlIGFzIGEsIGdldExvY2FsZUNvbXBvbmVudFN0cmluZ3MgYXMgZyB9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1sb2NhbGUtMDUwYjZkYjkuanMubWFwIiwiLyohXG4gKiBBbGwgbWF0ZXJpYWwgY29weXJpZ2h0IEVTUkksIEFsbCBSaWdodHMgUmVzZXJ2ZWQsIHVubGVzcyBvdGhlcndpc2Ugc3BlY2lmaWVkLlxuICogdjQuMC41OFxuICovXG5pbXBvcnQgeyBoIGFzIGdldFBvcnRhbFRva2VuLCByIGFzIHJlcXVlc3QsIGcgYXMgZ2V0UmVzdEJhc2VVcmwgfSBmcm9tICcuL3BvcnRhbC1kNTE4YjU3MS5qcyc7XG5pbXBvcnQgeyBjIGFzIGNvbmZpZ1N0YXRlIH0gZnJvbSAnLi9jb25maWctNzVhZGY5NjIuanMnO1xuXG4vKiogV29yay1hcm91bmQgc2luY2UgdXNpbmcgYHJlcXVlc3RgIGRpcmVjdGx5IHdpbGwgdHJpZ2dlciB1bndhbnRlZCB0b2FzdCBvbiB0aGUgSG9tZSBBcHAgaWYgdGhlIGxheWVyIGlzIHVuYXZhaWxhYmxlICovXG5jb25zdCByZXF1ZXN0RmV0Y2ggPSBhc3luYyAodXJsLCBwb3J0YWwsIG9wdGlvbnMgPSB7fSkgPT4ge1xuICAgIGNvbnN0IHsgYm9keSwgdXNlUG9zdCwgYWRkVG9rZW5NYW51YWxseSwgYXBpID0gY29uZmlnU3RhdGUgPT09IG51bGwgfHwgY29uZmlnU3RhdGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGNvbmZpZ1N0YXRlLmFwaSwgY3VzdG9tVG9rZW4gfSA9IG9wdGlvbnM7XG4gICAgY29uc3QgZGF0YSA9IG5ldyBVUkxTZWFyY2hQYXJhbXMoKTtcbiAgICBpZiAoYm9keSkge1xuICAgICAgICBPYmplY3QuZW50cmllcyhib2R5KS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgZGF0YS5hcHBlbmQoa2V5LCB2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBjb25zdCB1cmxUb1NlbmQgPSBuZXcgVVJMKHVybCk7XG4gICAgdXJsVG9TZW5kLnNlYXJjaFBhcmFtcy5hcHBlbmQoXCJmXCIsIFwianNvblwiKTtcbiAgICBpZiAoY3VzdG9tVG9rZW4pIHtcbiAgICAgICAgdXJsVG9TZW5kLnNlYXJjaFBhcmFtcy5hcHBlbmQoXCJ0b2tlblwiLCBjdXN0b21Ub2tlbik7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjb25zdCB0b2tlbiA9IGFkZFRva2VuTWFudWFsbHkgPT09IGZhbHNlID8gbnVsbCA6IGF3YWl0IGdldFBvcnRhbFRva2VuKHBvcnRhbCwgYXBpKTtcbiAgICAgICAgaWYgKHRva2VuKSB7XG4gICAgICAgICAgICB1cmxUb1NlbmQuc2VhcmNoUGFyYW1zLmFwcGVuZChcInRva2VuXCIsIHRva2VuKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKHVybFRvU2VuZC50b1N0cmluZygpLCB7XG4gICAgICAgIGJvZHk6IHVzZVBvc3QgPyBkYXRhIDogdW5kZWZpbmVkLFxuICAgICAgICBtZXRob2Q6IHVzZVBvc3QgPyBcIlBPU1RcIiA6IFwiR0VUXCJcbiAgICB9KTtcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgY29uc3QgZXJyb3IgPSByZXN1bHQuZXJyb3I7XG4gICAgaWYgKGVycm9yKSB7XG4gICAgICAgIHRocm93IHR5cGVvZiBlcnJvciA9PT0gXCJzdHJpbmdcIiA/IG5ldyBFcnJvcihlcnJvcikgOiBlcnJvcjtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbi8qKlxuICogU2VuZCBhIHJlcXVlc3QgdG8gZ2V0IGRhdGEgZm9yIGB1cmxgLiBUaGlzIHJlcXVlc3Qgd2lsbCBub3QgaW5jbHVkZSBhIHRva2VuIHRvIGF2b2lkIHRva2VuIGxlYWtcbiAqL1xuY29uc3QgZ2V0U2VydmljZVVybFJlc3BvbnNlID0gYXN5bmMgKHVybCwgcG9ydGFsKSA9PiB7XG4gICAgdmFyIF9hO1xuICAgIHRyeSB7XG4gICAgICAgIHJldHVybiB7IHJlc3VsdDogYXdhaXQgcmVxdWVzdEZldGNoKHVybCwgcG9ydGFsLCB7IGFkZFRva2VuTWFudWFsbHk6IGZhbHNlIH0pIH07XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zdCB0b2tlblJlcXVpcmVkTWVzc2FnZSA9IFwidG9rZW4gcmVxdWlyZWRcIjtcbiAgICAgICAgaWYgKChfYSA9IGVycm9yID09PSBudWxsIHx8IGVycm9yID09PSB2b2lkIDAgPyB2b2lkIDAgOiBlcnJvci5tZXNzYWdlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EudG9Mb3dlckNhc2UoKS5pbmNsdWRlcyh0b2tlblJlcXVpcmVkTWVzc2FnZSkpIHtcbiAgICAgICAgICAgIHJldHVybiB7IGVycm9yOiB7IGNvZGU6IFwidG9rZW5SZXF1aXJlZFwiIH0gfTtcbiAgICAgICAgfVxuICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgICAgICAgcmV0dXJuIHsgZXJyb3I6IHsgY29kZTogXCJ1bmhhbmRsZWRFcnJvclwiIH0gfTtcbiAgICB9XG59O1xuYXN5bmMgZnVuY3Rpb24gZ2V0UmVsYXRlZEl0ZW1zKGl0ZW1JZCwgcG9ydGFsLCB7IHJlbGF0aW9uc2hpcFR5cGUsIGRpcmVjdGlvbiB9KSB7XG4gICAgY29uc3QgdXJsID0gYCR7Z2V0UmVzdEJhc2VVcmwocG9ydGFsKX1jb250ZW50L2l0ZW1zLyR7aXRlbUlkfS9yZWxhdGVkSXRlbXNgO1xuICAgIHJldHVybiBhd2FpdCByZXF1ZXN0KHVybCwgeyByZWxhdGlvbnNoaXBUeXBlLCBkaXJlY3Rpb24gfSk7XG59XG5cbmNvbnN0IGlzSG9zdGVkU2VydmljZSA9ICh0eXBlS2V5d29yZHMsIHR5cGUpID0+IHR5cGUgPT09IFwiRmVhdHVyZSBTZXJ2aWNlXCIgJiYgdHlwZUtleXdvcmRzLmluY2x1ZGVzKFwiSG9zdGVkIFNlcnZpY2VcIik7XG5cbmV4cG9ydCB7IGdldFNlcnZpY2VVcmxSZXNwb25zZSBhcyBhLCBnZXRSZWxhdGVkSXRlbXMgYXMgZywgaXNIb3N0ZWRTZXJ2aWNlIGFzIGksIHJlcXVlc3RGZXRjaCBhcyByIH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNlcnZpY2UtOGMyYzQyNDEuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9