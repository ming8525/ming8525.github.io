"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_relati-5dfdc2"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/relationship-b72d7d97.js":
/*!******************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/relationship-b72d7d97.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ createRelationshipRendererFromExisting),
/* harmony export */   c: () => (/* binding */ createRelationshipRenderer),
/* harmony export */   u: () => (/* binding */ updateRelationshipRenderer)
/* harmony export */ });
/* harmony import */ var _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./raster-unique-value-0976ec7f.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/raster-unique-value-0976ec7f.js");
/* harmony import */ var _loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./loadModules-b4ac1247.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-b4ac1247.js");
/* harmony import */ var _commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./commonFunctions-b0830e9e.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/commonFunctions-b0830e9e.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */




/**
 * Updates the layer with a Color renderer with default settings
 * @param options: options
 */
function createRelationshipRenderer(options) {
    var _a, _b;
    const { layer: smLayer, mapImageSublayer, mapView, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    const layer = smLayer;
    const rendererType = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.g)();
    let relationshipScheme = options.relationshipScheme;
    if (!relationshipScheme && ["relationship", "relationship-size"].indexOf(rendererType) > -1) {
        relationshipScheme = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a0)();
    }
    options = options || {};
    if (rendererType === "relationship-size") {
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer).clone();
        const authInfo = renderer.authoringInfo;
        if (authInfo &&
            ((_a = options.fieldInfos) === null || _a === void 0 ? void 0 : _a.length) > 1 &&
            options.fieldInfos[0].field == authInfo.field1.field &&
            options.fieldInfos[1].field == authInfo.field2.field) {
            // re-use relationship renderer; remove size
            renderer.visualVariables = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.n)(renderer, "size");
            renderer.authoringInfo.visualVariables = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.o)(renderer, "size");
            if ((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.q)(layer)) {
                // switch markers to polygons
                const polygonSymbol = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.S)(layer, mapView);
                const infos = renderer.uniqueValueInfos.slice();
                infos.map((valueInfo) => {
                    const color = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.t)(valueInfo.symbol);
                    valueInfo.symbol = polygonSymbol.clone();
                    (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.r)(valueInfo.symbol, color);
                });
                renderer.uniqueValueInfos = infos;
            }
            return Promise.resolve({ renderer });
        }
    }
    const extras = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.m)((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer));
    const config = {
        layer,
        view: mapView,
        field1: { field: options.fieldInfos[0].field },
        field2: { field: options.fieldInfos[1].field },
        classificationMethod: "quantile",
        numClasses: 3,
        focus: "HH",
        relationshipScheme,
        outlineOptimizationEnabled: mapImageSublayer
            ? false
            : (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_2__.i)(options.outlineOptimizationEnabled)
                ? options.outlineOptimizationEnabled
                : true,
        sizeOptimizationEnabled: mapImageSublayer
            ? false
            : (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_2__.i)(options.sizeOptimizationEnabled)
                ? options.sizeOptimizationEnabled
                : true,
        legendOptions: options.legendOptions,
        defaultSymbolEnabled: false,
        forBinning: ((_b = layer.featureReduction) === null || _b === void 0 ? void 0 : _b.type) === "binning"
    };
    //console.log("createRelationshipRenderer", config);
    return modules.RelationshipCreator.createRenderer(config).then((result) => {
        //console.log("createRelationshipRenderer-success", result);
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.l)(extras, result.renderer);
        return Promise.resolve(result);
    }, (error) => Promise.reject(error));
}
/**
 * Creates a Relationship renderer with settings from current renderer
 */
function createRelationshipRendererFromExisting(options) {
    var _a;
    const { layer: smLayer, mapImageSublayer, mapView, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    const layer = smLayer;
    options = options || {};
    const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer);
    const rendererType = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.g)();
    const authInfo = renderer.authoringInfo;
    // are we coming from a relationship-size renderer?
    const sizeVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a)(renderer, "size");
    if (options.fieldInfos &&
        options.fieldInfos.length > 1 &&
        options.fieldInfos[0].field == authInfo.field1.field &&
        options.normalizationField1 === authInfo.field1.normalizationField &&
        options.fieldInfos[1].field == authInfo.field2.field &&
        options.normalizationField2 === authInfo.field2.normalizationField) {
        // no changes to fields
        delete options.fieldInfos;
        delete options.normalizationField1;
        delete options.normalizationField2;
        if ((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.R)(options) && !sizeVisVar) {
            // nothing really changes
            return Promise.resolve({ renderer: renderer.clone() });
        }
    }
    let relationshipScheme = options.relationshipScheme;
    if (!relationshipScheme && ["relationship", "relationship-size"].indexOf(rendererType) > -1) {
        relationshipScheme = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a0)();
    }
    const extras = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.m)(renderer);
    let fieldInfo1 = options.fieldInfos
        ? options.fieldInfos[0]
        : {
            field: authInfo.field1.field,
            simpleFieldType: _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.w.NUMBER
        };
    let fieldInfo2 = options.fieldInfos
        ? options.fieldInfos[1]
        : {
            field: authInfo.field2.field,
            simpleFieldType: _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.w.NUMBER
        };
    const normalizationField1 = options.normalizationField1 !== undefined // null is used as a value
        ? options.normalizationField1
        : authInfo.field1.normalizationField;
    const normalizationField2 = options.normalizationField2 !== undefined // null is used as a value
        ? options.normalizationField2
        : authInfo.field2.normalizationField;
    const symbol = renderer.uniqueValueInfos && renderer.uniqueValueInfos.length ? renderer.uniqueValueInfos[0].symbol : null;
    const defaultSymbol = renderer.defaultSymbol;
    const defaultLabel = renderer.defaultLabel;
    const numClasses = options.numClasses ? options.numClasses : authInfo.numClasses;
    // TODO need to keep ramp
    return modules.RelationshipCreator.createRenderer({
        layer,
        view: mapView,
        field1: {
            field: fieldInfo1 ? fieldInfo1.field : renderer.field,
            normalizationField: normalizationField1
        },
        field2: {
            field: fieldInfo2 ? fieldInfo2.field : renderer.field,
            normalizationField: normalizationField2
        },
        classificationMethod: options.classificationMethod
            ? options.classificationMethod
            : authInfo.classificationMethod !== "manual"
                ? authInfo.classificationMethod
                : "quantile",
        numClasses,
        focus: options.focus ? options.focus : authInfo.focus,
        relationshipScheme,
        outlineOptimizationEnabled: mapImageSublayer
            ? false
            : (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_2__.i)(options.outlineOptimizationEnabled)
                ? options.outlineOptimizationEnabled
                : !!extras.sizeOutlineVisVar,
        sizeOptimizationEnabled: mapImageSublayer
            ? false
            : (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_2__.i)(options.sizeOptimizationEnabled)
                ? options.sizeOptimizationEnabled
                : !!extras.sizeAutoVisVar,
        legendOptions: options.legendOptions ? options.legendOptions : renderer.legendOptions,
        defaultSymbolEnabled: (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_2__.i)(options.defaultSymbolEnabled)
            ? options.defaultSymbolEnabled
            : !!renderer.defaultSymbol,
        forBinning: ((_a = layer.featureReduction) === null || _a === void 0 ? void 0 : _a.type) === "binning"
    }).then((result) => {
        //console.log("RelationshipCreator.createRenderer", result);
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.l)(extras, result.renderer);
        if (symbol) {
            const infos = result.renderer.uniqueValueInfos;
            infos.forEach((info) => {
                // keep the same symbol style, not the color
                const sym = symbol.clone();
                (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.r)(sym, (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.t)(info.symbol));
                info.symbol = sym;
            });
        }
        // keep old labels
        if (!options.numClasses || options.numClasses === authInfo.numClasses) {
            (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer).uniqueValueInfos.forEach((oldInfo) => {
                result.renderer.uniqueValueInfos.forEach((newInfo) => {
                    if (oldInfo.value === newInfo.value) {
                        newInfo.label = oldInfo.label;
                    }
                });
            });
        }
        if (defaultSymbol) {
            result.renderer.defaultSymbol = defaultSymbol;
            result.renderer.defaultLabel = defaultLabel;
        }
        return Promise.resolve(result);
    }, (error) => Promise.reject(error));
}
/**
 * Updates a relationship renderer after changes to slider breaks, focus, color ramp
 */
function updateRelationshipRenderer(options) {
    const { layer, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    options = options || {};
    const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer);
    const authInfo = renderer.authoringInfo;
    return modules.RelationshipCreator.updateRenderer({
        field1: authInfo.field1,
        field2: authInfo.field2,
        numClasses: options.numClasses ? options.numClasses : authInfo.numClasses,
        focus: options.focus ? (options.focus === "none" ? null : options.focus) : authInfo.focus,
        colors: options.colors,
        renderer
    });
}



//# sourceMappingURL=relationship-b72d7d97.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/typeSize-9d4c5d28.js":
/*!**************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/typeSize-9d4c5d28.js ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ createTypeSizeAgeRenderer),
/* harmony export */   b: () => (/* binding */ createTypeSizeAgeRendererFromExisting),
/* harmony export */   c: () => (/* binding */ createTypeSizeRenderer),
/* harmony export */   d: () => (/* binding */ createTypeSizeRendererFromExisting)
/* harmony export */ });
/* harmony import */ var _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./raster-unique-value-0976ec7f.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/raster-unique-value-0976ec7f.js");
/* harmony import */ var _loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./loadModules-b4ac1247.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-b4ac1247.js");
/* harmony import */ var _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./commonEnums-fcf13661.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/commonEnums-fcf13661.js");
/* harmony import */ var _colorSize_ce0ccdeb_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./colorSize-ce0ccdeb.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/colorSize-ce0ccdeb.js");
/* harmony import */ var _type_0ace5d2e_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./type-0ace5d2e.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/type-0ace5d2e.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */






/**
 * Updates the layer with a Color+size renderer with default settings
 * @param options: options
 */
function createTypeSizeRenderer(options) {
    const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    const rendererType = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.g)();
    options = options || {};
    // first size renderer, so we have the correct symbol types
    const secondField = options.fieldInfos.length > 1 ? options.fieldInfos[1] : options.fieldInfos[0];
    if ((0,_colorSize_ce0ccdeb_js__WEBPACK_IMPORTED_MODULE_3__.s)({ fieldInfos: [secondField] }) && ["color-size", "type-size"].indexOf(rendererType) > -1) {
        const sizeVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a)((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer), "size");
        if (sizeVisVar && (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer).authoringInfo) {
            // re-use size renderer
            return createTypePartForRenderer((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer), options).then((rendererResult) => {
                return Promise.resolve(rendererResult);
            }, (error) => Promise.reject(error));
        } // else classed
    }
    return (0,_colorSize_ce0ccdeb_js__WEBPACK_IMPORTED_MODULE_3__.c)(Object.assign(Object.assign({}, options), { fieldInfos: [options.fieldInfos[1]] })).then((sizeRendererResult) => {
        //console.log("createSizeRenderer result", sizeRendererResult.renderer.toJSON());
        return createTypePartForRenderer(sizeRendererResult.renderer, options).then((rendererResult) => {
            return Promise.resolve(rendererResult);
        }, (error) => Promise.reject(error));
    }, (error) => Promise.reject(error));
}
/**
 * Updates the layer with a Color+size renderer with default settings
 * @param options: options
 */
function createTypeSizeAgeRenderer(options) {
    const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    const rendererType = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.g)();
    options = options || {};
    // first size renderer, so we have the correct symbol types
    const secondField = options.fieldInfos.length > 1 ? options.fieldInfos[1] : options.fieldInfos[0];
    if ((0,_colorSize_ce0ccdeb_js__WEBPACK_IMPORTED_MODULE_3__.s)({ fieldInfos: [secondField] }) && ["color-size-age", "type-size-age"].indexOf(rendererType) > -1) {
        const sizeVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a)((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer), "size");
        if (sizeVisVar && (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer).authoringInfo) {
            // re-use size renderer
            return createTypePartForRenderer((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer), options).then((rendererResult) => {
                return Promise.resolve(rendererResult);
            }, (error) => Promise.reject(error));
        } // else classed
    }
    return (0,_colorSize_ce0ccdeb_js__WEBPACK_IMPORTED_MODULE_3__.a)(Object.assign(Object.assign({}, options), { fieldInfos: [options.fieldInfos[1]] })).then((sizeRendererResult) => {
        return createTypePartForRenderer(sizeRendererResult.renderer, options).then((rendererResult) => {
            //console.log("createColorSizeRenderer out 2", rendererResult.renderer.toJSON());
            return Promise.resolve(rendererResult);
        }, (error) => Promise.reject(error));
    }, (error) => Promise.reject(error));
}
/**
 * Creates a Type&Size renderer with settings from current renderer
 */
function createTypeSizeRendererFromExisting(options, rendererSubtype) {
    const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    options = options || {};
    // first size renderer, so we have the correct symbol types
    return (0,_colorSize_ce0ccdeb_js__WEBPACK_IMPORTED_MODULE_3__.f)(Object.assign(Object.assign({}, options), { fieldInfos: options.fieldInfos ? [options.fieldInfos[1]] : null })).then((sizeRendererResult) => {
        return (0,_type_0ace5d2e_js__WEBPACK_IMPORTED_MODULE_4__.a)(Object.assign(Object.assign({}, options), { fieldInfos: options.fieldInfos ? [options.fieldInfos[0]] : null })).then((typeRendererResult) => {
            copySizeToTypeRenderer(typeRendererResult.renderer, sizeRendererResult.renderer);
            typeRendererResult.backgroundFillSymbol = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer).backgroundFillSymbol;
            // handle situations where renderer recreation occurs from the size panel. Slider statistics must correspond to the size variable.
            if (rendererSubtype === "size") {
                typeRendererResult.statistics = sizeRendererResult.statistics;
            }
            return Promise.resolve(typeRendererResult);
        }, (error) => Promise.reject(error));
    }, (error) => Promise.reject(error));
}
/**
 * Creates a Type&SizeAge renderer with settings from current renderer
 */
function createTypeSizeAgeRendererFromExisting(options, rendererSubtype) {
    const { layer, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    options = options || {};
    // first size renderer, so we have the correct symbol types
    return (0,_colorSize_ce0ccdeb_js__WEBPACK_IMPORTED_MODULE_3__.g)(Object.assign(Object.assign({}, options), { fieldInfos: options.fieldInfos ? [options.fieldInfos[1]] : null })).then((sizeRendererResult) => {
        //console.log("createSizeAgeRendererFromExisting",sizeRendererResult.renderer.toJSON());
        // remove Age options
        delete options.units;
        delete options.startTime;
        delete options.endTime;
        if ((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.R)(options)) {
            // re-use type renderer
            const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer).clone();
            renderer.visualVariables = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.n)(renderer, "size") || [];
            const sizeVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a)(sizeRendererResult.renderer, "size");
            renderer.visualVariables.push(sizeVisVar);
            renderer.authoringInfo = renderer.authoringInfo || new modules.AuthoringInfo({});
            renderer.authoringInfo.visualVariables = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.o)(renderer, "size") || [];
            const sizeAuthVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.p)(sizeRendererResult.renderer, "size");
            renderer.authoringInfo.visualVariables.push(sizeAuthVisVar);
            return Promise.resolve({ renderer });
        }
        return (0,_type_0ace5d2e_js__WEBPACK_IMPORTED_MODULE_4__.a)(Object.assign(Object.assign({}, options), { fieldInfos: options.fieldInfos ? [options.fieldInfos[0]] : null })).then((typeRendererResult) => {
            copySizeToTypeRenderer(typeRendererResult.renderer, sizeRendererResult.renderer);
            typeRendererResult.backgroundFillSymbol = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer).backgroundFillSymbol;
            // handle situations where renderer recreation occurs from the size panel. Slider statistics must correspond to the size variable.
            if (rendererSubtype === "size") {
                typeRendererResult.statistics = sizeRendererResult.statistics;
            }
            return Promise.resolve(typeRendererResult);
        }, (error) => Promise.reject(error));
    }, (error) => Promise.reject(error));
}
function createTypePartForRenderer(sizeRenderer, options) {
    const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    const rendererType = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.g)();
    if ((0,_type_0ace5d2e_js__WEBPACK_IMPORTED_MODULE_4__.s)(options) && ["type", "type-size", "type-size-age"].indexOf(rendererType) > -1) {
        // we can re-use the type renderer
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer).clone();
        copySizeToTypeRenderer(renderer, sizeRenderer);
        return Promise.resolve({ renderer });
    }
    return (0,_type_0ace5d2e_js__WEBPACK_IMPORTED_MODULE_4__.c)(Object.assign(Object.assign({}, options), { fieldInfos: [options.fieldInfos[0]] })).then((typeRendererResult) => {
        copySizeToTypeRenderer(typeRendererResult.renderer, sizeRenderer);
        return Promise.resolve(typeRendererResult);
    }, (error) => Promise.reject(error));
}
function copySizeToTypeRenderer(typeRenderer, sizeRenderer) {
    const { layer, mapView, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    typeRenderer.visualVariables = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.n)(typeRenderer, "size") || [];
    typeRenderer.visualVariables = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.n)(typeRenderer, "size", "auto") || [];
    const sizeVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a)(sizeRenderer, "size");
    typeRenderer.visualVariables.push(sizeVisVar);
    typeRenderer.authoringInfo = typeRenderer.authoringInfo || new modules.AuthoringInfo({});
    typeRenderer.authoringInfo.visualVariables = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.o)(typeRenderer, "size") || [];
    const sizeAuthVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.p)(sizeRenderer, "size");
    typeRenderer.authoringInfo.visualVariables.push(sizeAuthVisVar);
    if ((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.q)(layer)) {
        const markerSymbol = sizeRenderer.classBreakInfos && sizeRenderer.classBreakInfos.length
            ? sizeRenderer.classBreakInfos[0].symbol
            : sizeRenderer.uniqueValueInfos && sizeRenderer.uniqueValueInfos.length
                ? sizeRenderer.uniqueValueInfos[0].symbol
                : (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.S)(layer, mapView, "type-size");
        const infos = typeRenderer.uniqueValueInfos.slice();
        infos.map((valueInfo) => {
            const color = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.t)(valueInfo.symbol);
            valueInfo.symbol = markerSymbol.clone();
            (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.r)(valueInfo.symbol, color);
        });
        typeRenderer.uniqueValueInfos = infos;
        typeRenderer.backgroundFillSymbol = sizeRenderer.backgroundFillSymbol;
        const sizeOutlineVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a)(sizeRenderer, "size", "outline");
        if (sizeOutlineVisVar) {
            typeRenderer.visualVariables.push(sizeOutlineVisVar);
        }
    }
}



//# sourceMappingURL=typeSize-9d4c5d28.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,