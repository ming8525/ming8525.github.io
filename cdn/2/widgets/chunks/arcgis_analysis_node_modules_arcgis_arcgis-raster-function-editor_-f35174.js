"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_arcgis-raster-function-editor_-f35174"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/common-strings.nb-5ec43a4b.js":
/*!**************************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/common-strings.nb-5ec43a4b.js ***!
  \**************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   addRaster: () => (/* binding */ addRaster),
/* harmony export */   addScalar: () => (/* binding */ addScalar),
/* harmony export */   breadcrumb: () => (/* binding */ breadcrumb),
/* harmony export */   breadcrumbEditor: () => (/* binding */ breadcrumbEditor),
/* harmony export */   cancel: () => (/* binding */ cancel),
/* harmony export */   category: () => (/* binding */ category),
/* harmony export */   categoryNames: () => (/* binding */ categoryNames),
/* harmony export */   close: () => (/* binding */ close),
/* harmony export */   copy: () => (/* binding */ copy),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   defaultModelName: () => (/* binding */ defaultModelName),
/* harmony export */   definitionQuery: () => (/* binding */ definitionQuery),
/* harmony export */   description: () => (/* binding */ description),
/* harmony export */   deselectFunction: () => (/* binding */ deselectFunction),
/* harmony export */   details: () => (/* binding */ details),
/* harmony export */   dialogTitle: () => (/* binding */ dialogTitle),
/* harmony export */   dontSave: () => (/* binding */ dontSave),
/* harmony export */   enterFURL: () => (/* binding */ enterFURL),
/* harmony export */   enterURL: () => (/* binding */ enterURL),
/* harmony export */   error: () => (/* binding */ error),
/* harmony export */   errorTitle: () => (/* binding */ errorTitle),
/* harmony export */   everyone: () => (/* binding */ everyone),
/* harmony export */   f32PixelType: () => (/* binding */ f32PixelType),
/* harmony export */   f64PixelType: () => (/* binding */ f64PixelType),
/* harmony export */   failedToLoadLayer: () => (/* binding */ failedToLoadLayer),
/* harmony export */   folder: () => (/* binding */ folder),
/* harmony export */   general: () => (/* binding */ general),
/* harmony export */   groupFieldName: () => (/* binding */ groupFieldName),
/* harmony export */   groupItemsBy: () => (/* binding */ groupItemsBy),
/* harmony export */   groups: () => (/* binding */ groups),
/* harmony export */   invalidRFTMessage: () => (/* binding */ invalidRFTMessage),
/* harmony export */   isDataset: () => (/* binding */ isDataset),
/* harmony export */   isPublic: () => (/* binding */ isPublic),
/* harmony export */   item: () => (/* binding */ item),
/* harmony export */   itemGroup: () => (/* binding */ itemGroup),
/* harmony export */   loadingLayer: () => (/* binding */ loadingLayer),
/* harmony export */   matchVariables: () => (/* binding */ matchVariables),
/* harmony export */   mosaic: () => (/* binding */ mosaic),
/* harmony export */   multidimensionalRules: () => (/* binding */ multidimensionalRules),
/* harmony export */   name: () => (/* binding */ name),
/* harmony export */   noTagErrorMsg: () => (/* binding */ noTagErrorMsg),
/* harmony export */   noTitleErrorMsg: () => (/* binding */ noTitleErrorMsg),
/* harmony export */   noTitleTagErrorMsg: () => (/* binding */ noTitleTagErrorMsg),
/* harmony export */   ok: () => (/* binding */ ok),
/* harmony export */   organization: () => (/* binding */ organization),
/* harmony export */   outputPixelType: () => (/* binding */ outputPixelType),
/* harmony export */   owner: () => (/* binding */ owner),
/* harmony export */   parameter: () => (/* binding */ parameter),
/* harmony export */   parameters: () => (/* binding */ parameters),
/* harmony export */   properties: () => (/* binding */ properties),
/* harmony export */   raster: () => (/* binding */ raster),
/* harmony export */   rasterFunctionEditor: () => (/* binding */ rasterFunctionEditor),
/* harmony export */   rasterFunctions: () => (/* binding */ rasterFunctions),
/* harmony export */   rfxLicenseInfo: () => (/* binding */ rfxLicenseInfo),
/* harmony export */   s16PixelType: () => (/* binding */ s16PixelType),
/* harmony export */   s32PixelType: () => (/* binding */ s32PixelType),
/* harmony export */   s8PixelType: () => (/* binding */ s8PixelType),
/* harmony export */   save: () => (/* binding */ save),
/* harmony export */   saveAs: () => (/* binding */ saveAs),
/* harmony export */   saveUtils: () => (/* binding */ saveUtils),
/* harmony export */   savingMessage: () => (/* binding */ savingMessage),
/* harmony export */   scalar: () => (/* binding */ scalar),
/* harmony export */   search: () => (/* binding */ search),
/* harmony export */   selectFeature: () => (/* binding */ selectFeature),
/* harmony export */   selectFunction: () => (/* binding */ selectFunction),
/* harmony export */   selectRaster: () => (/* binding */ selectRaster),
/* harmony export */   serviceURL: () => (/* binding */ serviceURL),
/* harmony export */   setGroupSharing: () => (/* binding */ setGroupSharing),
/* harmony export */   setSharingLevel: () => (/* binding */ setSharingLevel),
/* harmony export */   share: () => (/* binding */ share),
/* harmony export */   shareWith: () => (/* binding */ shareWith),
/* harmony export */   success: () => (/* binding */ success),
/* harmony export */   tagFieldName: () => (/* binding */ tagFieldName),
/* harmony export */   tags: () => (/* binding */ tags),
/* harmony export */   title: () => (/* binding */ title),
/* harmony export */   toolDetailsEditor: () => (/* binding */ toolDetailsEditor),
/* harmony export */   toolEditor: () => (/* binding */ toolEditor),
/* harmony export */   toolModeler: () => (/* binding */ toolModeler),
/* harmony export */   tryAgain: () => (/* binding */ tryAgain),
/* harmony export */   type: () => (/* binding */ type),
/* harmony export */   u16PixelType: () => (/* binding */ u16PixelType),
/* harmony export */   u32PixelType: () => (/* binding */ u32PixelType),
/* harmony export */   u8PixelType: () => (/* binding */ u8PixelType),
/* harmony export */   unionDimensions: () => (/* binding */ unionDimensions),
/* harmony export */   unknownPixelType: () => (/* binding */ unknownPixelType),
/* harmony export */   unsavedTitle: () => (/* binding */ unsavedTitle),
/* harmony export */   unsavedWarningExisting: () => (/* binding */ unsavedWarningExisting),
/* harmony export */   unsavedWarningNew: () => (/* binding */ unsavedWarningNew),
/* harmony export */   userStartDirection: () => (/* binding */ userStartDirection),
/* harmony export */   variables: () => (/* binding */ variables),
/* harmony export */   viewerModeMessage: () => (/* binding */ viewerModeMessage),
/* harmony export */   viewerModeTitle: () => (/* binding */ viewerModeTitle),
/* harmony export */   warning: () => (/* binding */ warning)
/* harmony export */ });
const ok = "OK";
const cancel = "Avbryt";
const enterURL = "Angi URL for bildetjeneste";
const serviceURL = "Tjeneste-URL";
const selectRaster = "Velg raster";
const failedToLoadLayer = "Kan ikke laste inn lag";
const loadingLayer = "Laster inn lag";
const selectFeature = "Velg geoobjektlag";
const enterFURL = "Angi URL for geoobjekttjeneste.";
const addRaster = "Legg til rastervariabel";
const addScalar = "Legg til konstant";
const raster = "Raster";
const scalar = "Skalar";
const defaultModelName = "Rasterfunksjonsmal";
const general = "Generelt";
const parameters = "Parametere";
const variables = "Variabler";
const name = "Navn";
const description = "Beskrivelse";
const parameter = "Parameter";
const isPublic = "IsPublic";
const isDataset = "IsDataset";
const unknownPixelType = "Ukjent";
const outputPixelType = "Utdatapikseltype";
const u8PixelType = "8 bit usignert";
const s8PixelType = "8 bit signert";
const u16PixelType = "16 bit usignert";
const s16PixelType = "16 bit signert";
const u32PixelType = "32 bit usignert";
const s32PixelType = "32 bit signert";
const f32PixelType = "32 bit flytende";
const f64PixelType = "64 bit dobbelt";
const properties = "Egenskaper";
const multidimensionalRules = "Multidimensional Rules";
const matchVariables = "Match Variables";
const unionDimensions = "Union-dimensjoner";
const rasterFunctionEditor = {
	invalidRFTMessage: "Rasterfunksjonsmalen er ikke gyldig.",
	rfxArgsEditor: {
		outputRaster: "UtdataRaster",
		raster: "Raster",
		unsupportedDataTypeWarning: "Følgende argumenter vises ikke, ettersom de ikke støttes for øyeblikket.",
		unsupportedFunction: "Inneholder rasterfunksjon(er) som for tiden ikke støttes."
	},
	rfxRasterInput: {
		selectLayer: "Velg lag",
		browseLayers: "Bla gjennom lag",
		rfxVariable: "RasterFunctionVariable"
	},
	rfxBandCombinationEditor: {
		methodLabel: "Metode",
		bandLabel: "Bånd",
		combinationLabel: "Kombinasjon"
	},
	rfxRemapGrid: {
		minimum: "Minimum",
		maximum: "Maksimum",
		output: "Resultat",
		noData: "Nodata",
		remapValuesLabel: "Tilordne verdier på nytt"
	},
	rfxNamedRasterEditor: {
		rasterVariables: "Rastervariabler",
		deleteSelectedVars: "Fjern valgte variabler"
	},
	rfxClippingGeometry: {
		clippingLayer: "Klippelag",
		clippingRaster: "Klipperaster",
		clippingGeometry: "Geometri for utklipp",
		customExtent: "Egendefinert utstrekning",
		outputExtent: "Utdataomfang",
		currentExtent: "Gjeldende kartutstrekning",
		drawLabel: "Tegn"
	},
	rfxCustomExtent: {
		top: "Topp",
		right: "Høyre",
		bottom: "Bunn",
		left: "Venstre"
	},
	rfxRasterArrayEditor: {
		moveUp: "Flytt opp",
		moveDown: "Flytt ned",
		remove: "Fjern"
	},
	rfxStatisticsGrid: {
		stdDev: "Std. Dev",
		min: "Min",
		max: "Maks",
		mean: "Gjennomsnitt"
	},
	rfxWeightedSumTableEditor: {
		weightedSumTable: "Vektet sum-tabell",
		id: "ID",
		layer: "Lag",
		field: "Felt",
		weight: "Vekt",
		value: "Verdi",
		selectLayer: "Velg lag"
	},
	rfxWeightedOverlayTableEditor: {
		weightedOverlayTable: "Vektet overleggstabell",
		id: "ID",
		layer: "Lag",
		field: "Felt",
		influence: "Påvirkning",
		sumOfInfluence: "Sum av påvirkning",
		value: "Verdi",
		remapTable: "Tilordne tabell på nytt",
		scale: "Målestokk",
		scales: "Målestokker",
		selectRaster: "Velg raster"
	},
	rfxFeatureSelect: {
		addFeatureLayer: "Bla gjennom etter geoobjektlag",
		addPointLayer: "Bla gjennom etter punktlag"
	},
	rfxFieldSelect: {
		value: "Verdi",
		count: "Antall"
	},
	rfxAttributeTable: {
		tableType: "Tabelltype",
		manual: "Manuell",
		external: "Ekstern",
		minVal: "Minimumsverdi",
		maxVal: "Maksimumsverdi",
		baseClassName: "Klassebasenavn",
		colorScheme: "Fargevalg",
		defaultClassName: "Etikett_",
		generateTable: "Generer tabell",
		browseTable: "Se gjennom tabell",
		value: "Verdi",
		classname: "Klassenavn",
		color: "Farge"
	},
	rfxFieldNumberSwitchable: {
		number: "Numerisk",
		field: "Felt",
		string: "Streng",
		linearUnit: "Lineær enhet"
	},
	rfxPropertySet: {
		name: "Navn",
		value: "Verdi"
	},
	rfxConversionGrid: {
		size: "Størrelse"
	},
	rfxTransposeBit: {
		bitPattern: "Bitmønster",
		outputBit: "Utdatabit",
		inputBit: "Inndatabit"
	},
	rfxSpatialReference: {
		placeHolder: "Avgrens etter søkeord",
		coordinateSystem: "Koordinatsystem",
		gcs: "Geografisk koordinatsystem",
		pcs: "Projisert koordinatsystem",
		vcs: "Vertikalt koordinatsystem"
	}
};
const rfxLicenseInfo = "Denne rasterfunksjonsmalen kan brukes til å behandle bildene dine ved hjelp av ArcGIS Image Server.";
const rasterFunctions = {
	rfx: {
		aCosHName: "ACosH",
		aCosHSnip: "Beregner invers cosinus for cellene i et raster.",
		aCosHDesc: "Funksjonen beregner invers cosinus for pikslene i et raster.",
		aCosName: "ACos",
		aCosSnip: "Beregner invers cosinus for pikslene i et raster.",
		aCosDesc: "Denne rasterfunksjonen beregner invers cosinus for cellene i et raster. I matematikken har alle trigonometriske funksjoner et definert område med gyldige inndataverdier som kalles definisjonsområde. Utdataverdiene for hver funksjon har også et definisjonsområde. For dette verktøyet er definisjonsområdet [-1, 1] og omfanget [0, pi].",
		aSinHName: "ASinH",
		aSinHSnip: "Beregner invers hyperbolsk sinus for cellene i et raster.",
		aSinHDesc: "Funksjonen beregner invers hyperbolsk sinus for pikslene i et raster.",
		aSinName: "ASin",
		aSinSnip: "Beregner invers sinus for cellene i et raster.",
		aSinDesc: "Funksjonen beregner invers sinus for pikslene i et raster.",
		aTan2Name: "ATan2",
		aTan2Snip: "Beregner invers tangent (basert på x, y) for cellene i et raster.",
		aTan2Desc: "Funksjonen beregner invers tangent (basert på x, y) for pikslene i et raster.",
		aTanHName: "ATanH",
		aTanHSnip: "Beregner invers hyperbolsk tangent for cellene i et raster.",
		aTanHDesc: "Funksjonen beregner invers hyperbolsk tangent for pikslene i et raster.",
		aTanName: "ATan",
		aTanSnip: "Beregner invers tangent for cellene i et raster.",
		aTanDesc: "Funksjonen beregner invers tangent for pikslene i et raster.",
		absName: "Abs",
		absSnip: "Beregner absolutt verdi for cellene i et raster.",
		absDesc: "Abs-funksjonen beregner den absolutte verdien for pikslene i et raster.",
		reflectanceName: "Synlig reflektans",
		reflectanceSnip: "Konverterer råbilder til Top of Atmosphere-verdier ved å ta hensyn til sensoregenskaper, solens posisjon og innhentingstidspunktet.",
		reflectanceDesc: "Denne funksjonen justerer lysstyrkens digitale antall (DN) for enkelte satellittsensorer. Justeringene er basert på solhøyde, innhentingsdato og sensoregenskaper for å angi økning og avvik for hvert bånd. Denne funksjonen brukes til å justere refleksjon eller lysstyrke, verdier på enkelte satellittbilder basert på scenelys og sensorøkningsinnstillinger. Bildene justeres til en teoretisk felles lysbetingelse, så det bør være mindre variasjon mellom scenene fra forskjellige datoer og forskjellige sensorer. Dette kan være nyttig for bildeklassifisering, fargebalanse og mosaikkering. Denne funksjonen kan bare brukes med bestemte bilder. De aktuelle sensorene er Landsat MSS, Landsat TM, Landsat ETM +, Landsat 8, IKONOS, QuickBird, GeoEye-1, RapidEye, DMCii, WorldView-1, WorldView-2, SPOT 6 og Pleiades.<div><br/>Funksjonen utfører to korreksjoner. Den første er basert på økningsinnstillingene. De opprinnelige lysstyrkeverdiene gjenopprettes fra bildeverdiene ved å reversere økningsligningene. Den andre korreksjonen har å gjøre med forskjeller i solvinkel og lysstyrke. De opprinnelige lysstyrkeverdiene justeres til et felles lysforhold ved å normalisere scener tatt under variable belysningsforhold. Generelt, mens bildets utdatatype er den samme som inndatatypen, er utdataverdiene lavere enn inndataverdiene, og klippes til det gyldige dataområdet.</div>",
		argStatisticsName: "ArgStatistics",
		argStatisticsSnip: "Beregner arg-statistikker, inkludert Arg Max, Arg Min, Argmedian og Duration.",
		argStatisticsDesc: "Funksjonen beregner arg-statistikk. Det er fire metoder i ArgStatistics-funksjonen: ArgMax, ArgMin, ArgMedian og Duration.",
		arithmeticName: "Aritmetisk",
		arithmeticSnip: "Utfører en aritmetisk operasjon mellom to raster eller et raster og en skalar.",
		arithmeticDesc: "Aritmetisk-funksjonen utfører en aritmetisk operasjon mellom to raster eller ett raster og en skalar og omvendt.",
		aspectSlopeName: "Aspect-Slope",
		aspectSlopeSnip: "Oppretter et raster som samtidig viser aspektet (retning) og helling (bratthet) av en kontinuerlig overflate, som representert i en digital høydemodell.",
		aspectSlopeDesc: "Aspect Slope-funksjonen oppretter et rasterlag som samtidig viser aspekt og helling på en overflate. Aspekt identifiserer helningsretning av maksimal endringsverdi fra hver piksel i forhold til naboene. Aspekt kan betraktes som helningsretning. Verdiene av resultatrasteret blir aspektets kompassretning, som representeres av en fargetone (farge). Hellingen representerer endringstakten for høyden for hver piksel i den digitale høydemodellen (DEM). Helling representerer brattheten på overflaten og er symbolisert i tre klasser, som vises ved hjelp av fargemetning (lysstyrke).<div><br/>Pikselverdiene i resultatraster av aspect-slope reflekterer en kombinasjon av aspekt og helling. Piksler med verdier under 20 betraktes som flate og vises i grått. Aspect-slope-verdier på 21 og over vil bli vist med forskjellig fargemetning som følger: 21 til 30—liten helling, 31 til 40—moderat helling, 41 og høyere—stor helling</div>",
		aspectName: "Helningsretning",
		aspectSnip: "Viser hvilken retning en piksel vender mot, hvor 0 er nordover og vinklene øker med klokken til 360.",
		aspectDesc: "Aspect-funksjonen identifiserer helningsretning av maksimal endringsverdi fra hver piksel i forhold til naboene. Aspekt kan betraktes som helningsretning. Verdiene av resultatrasteret blir aspektets kompassretning.<div><br/>Inndataene for denne funksjonen er inndataraster. Aspect-funksjonen blir ofte brukt på en digital høydemodell (DEM). Som standard vises aspektet som et gråtonebilde. Du kan legge til Colormap-funksjonen for å angi et bestemt fargevalg eller la personen som ser på mosaikken, endre symbolene med sitt egen fargevalg.</div>",
		tableName: "Attributtabell",
		tableSnip: "Bruker en tabell for å navngi og symbolisere verdiene i et datasett. Kolonnene for tabellen er kommaseparert: PixelValue, AttributeName, RedValue, GreenValue, BlueValue.",
		tableDesc: "Attributtabell-funksjonen lar deg definere en attributtabell for å symbolisere et enkeltbånd mosaikkdatasett eller rasterdatasett. <div><br/>Dette er nyttig når du vil presentere bilder som er blitt klassifisert til arealbruk, for eksempel skogmark, våtmarker, dyrket jord og urbane områder. Hvis tabellen i tillegg inneholder felt som er kalt \"red\", \"green\" og \"blue\", vil verdiene i disse feltene bli brukt som et fargekart når bildet blir tegnet opp.</div>",
		bandArithmeticName: "Båndaritmetikk",
		bandArithmeticSnip: "Beregner indekser ved hjelp av forhåndsdefinerte formler eller et brukerdefinert uttrykk.",
		bandArithmeticDesc: "Band Arithmetic-funskjonen utfører en aritmetisk operasjon på båndene i et rasterdatasett. Du kan velge forhåndsdefinerte algoritmer eller du kan skrive inn din egen enkeltlinjeformel. Operatorene som støttes er -, +, /, * og unary -.",
		thresholdName: "Binær terskelverdi",
		thresholdSnip: "Organiserer kontinuerlige data i forgrunn og bakgrunn ved å minimere kovariansen mellom de to klassene.",
		thresholdDesc: "Når et rasterdatasett har en bimodal distribusjon, oppretter denne funksjonen et nytt raster som deler dataene i to forskjellige klasser. Den skaper en klasse med lav verdi som vises med svarte piksler, og en klasse med høy verdi som vises med hvite piksler.",
		bitwiseAndName: "Bitwise And",
		bitwiseAndSnip: "Utfører en bitvis And-operasjon på de binære verdiene for to inndatarastere.",
		bitwiseAndDesc: "Bitvis And utfører en bitvis and-operasjon på de binære verdiene for to inndatarastere",
		bitwiseLeftShiftName: "Bitwise Left Shift",
		bitwiseLeftShiftSnip: "Utfører en Bitwise Left Shift-operasjon på de binære verdiene for to inndatarastere.",
		bitwiseLeftShiftDesc: "Bitwise Left Shift utfører en Bitwise Left Shift-operasjon på de binære verdiene for to inndatarastere",
		bitwiseNotName: "Bitwise Not",
		bitwiseNotSnip: "Utfører en Bitwise Not (complement)-operasjon på de binære verdiene for to inndatarastere.",
		bitwiseNotDesc: "Funksjonen utfører en Bitwise Not (complement)-operasjon på de binære verdiene for et inndataraster.",
		bitwiseOrName: "Bitwise Or",
		bitwiseOrSnip: "Utfører en Bitwise Or-operasjon på de binære verdiene for to inndatarastere.",
		bitwiseOrDesc: "Funksjonen utfører en Bitwise Or-operasjon på de binære verdiene for to inndatarastere. ",
		bitwiseRightShiftName: "Bitwise Right Shift",
		bitwiseRightShiftSnip: "Utfører en Bitwise Right Shift-operasjon på de binære verdiene for to inndatarastere.",
		bitwiseRightShiftDesc: "Funksjonen utfører en Bitwise Right Shift-operasjon på de binære verdiene for to inndatarastere.",
		bitwiseXorName: "Bitwise Xor",
		bitwiseXorSnip: "Utfører en Bitwise eXclusive Or-operasjon på de binære verdiene for to inndatarastere.",
		bitwiseXorDesc: "Funksjonen utfører en Bitwise eXclusive Or-operasjon på de binære verdiene for to inndatarastere",
		booleanAndName: "Boolsk And",
		booleanAndSnip: "Utfører en Boolsk And-operasjon på celleverdiene for to inndatarastere. Hvis begge inndataverdiene er sanne (ikke null), er utdataverdien 1. Hvis ett eller begge inndatasett er usann (null), er utdataverdien 0.",
		booleanAndDesc: "Funksjonen utfører en Boolsk And-operasjon på pikselverdiene for to inndatarastere. Hvis begge inndataverdiene er sanne (ikke null), er utdataverdien 1. Hvis en eller begge inndataverdiene er usann (null), er utdataverdien 0. ",
		booleanNotName: "Boolsk Not",
		booleanNotSnip: "Utfører en Boolsk Not (complement)-operasjon på celleverdiene for inndatarasteret. Hvis inndataverdiene er sanne (ikke null), er utdataverdien 0. Hvis inndataverdiene er usanne (null), er utdataverdien 1.",
		booleanNotDesc: "Funksjonen utfører en Boolsk Not (complement)-operasjon på pikselverdiene for inndatarasteret. Hvis inndataverdiene er sanne (ikke null), er utdataverdien 0. Hvis inndataverdiene er usanne (null), er utdataverdien 1.",
		booleanOrName: "Boolsk Or",
		booleanOrSnip: "Utfører en Boolsk Or-operasjon på celleverdiene for de to inndatarasterne. Hvis en begge inndataverdiene er sanne (ikke null), er utdataverdien 1. Hvis en eller begge inndataverdiene er usanne (null), er utdataverdien 0.",
		booleanOrDesc: "Funksjonen utfører en Boolsk Or-operasjon på celleverdiene for to inndatarastere. Hvis en begge inndataverdiene er sanne (ikke null), er utdataverdien 1. Hvis en eller begge inndataverdiene er usanne (null), er utdataverdien 0.",
		booleanXorName: "Boolsk Xor",
		booleanXorSnip: "Utfører en Boolsk eXclusive Or-operasjon på celleverdiene for to inndatarastere. Hvis en inndataverdi er sann (ikke null) og den andre verdien er usann (null), er utdataverdien 1. Hvis begge inndataverdiene er sanne eller begge er usanne, er utdataverdien 0.",
		booleanXorDesc: "Funksjonen utfører en Boolsk eXclusive Or-operasjon på celleverdiene for to inndatarastere. Hvis en inndataverdi er sann (ikke null) og den andre verdien er usann (null), er utdataverdien 1. Hvis begge inndataverdiene er sanne eller begge er usanne, er utdataverdien 0.",
		bufferedRasterName: "Bufret",
		bufferedRasterSnip: "Bufrer de(n) siste tilgjengelige pikselblokken(e).",
		bufferedRasterDesc: "Bufferfunksjonen brukes til å optimalisere ytelsen til komplekse funksjonskjeder. Den lagrer utdatene i minnet for den delen av funksjonskjeden som kommer før den. <div><br/>Sett inn denne funksjonen i funksjonsredigeringen der du ønsker å lagre utdataene.</div>",
		rasterCalculatorName: "Kalkulator",
		rasterCalculatorSnip: "Beregner et raster fra et rasterbasert matematisk uttrykk.",
		rasterCalculatorDesc: "Kalkulator-funksjonen lar deg opprette og kjøre uttrykk og inkorporere dem i funksjonskjeder.",
		cellStatisticsName: "Cellestatistikk",
		cellStatisticsSnip: "Beregner en per-cellestatistikk fra flere rastere. De tilgjengelige statistikktypene er Majoritet, Maksimum, Median, Minimum, Minoritet, Område, Standardavvik, Sum og Variasjon.",
		cellStatisticsDesc: "Denne funksjonen beregner statistikk fra flere raster, på piksel-etter-piksel basis. De tilgjengelige statistikktypene er Majoritet, Maksimum, Median, Minimum, Minoritet, Område, Standardavvik, Sum og Variasjon.",
		classifyName: "Klassifiser",
		classifySnip: "Tilordner hver piksel til en klasse. Innlemm tilleggsdata, f.eks. et segmentert bilde.",
		classifyDesc: "Denne raster-funksjonen klassifiserer et rasterdatasett basert på en Esri Classifier Definition (.ecd)-fil og rasterdata som inndata. .Ecd-filen som brukes i klassifiseringsfunksjonen, inneholder all informasjonen for et bestemt datasett og klassifiserer, og genereres av klassifikasjonslæreverktøyene, for eksempel Vector Machine eller Train Random Trees.",
		clipName: "Klipp ut",
		clipSnip: "Angir utstrekningen av et raster ved hjelp av koordinater eller et annet datasett.",
		clipDesc: "Denne funksjonen klipper et raster med en rektangulær form i henhold til de definerte utstrekningene, eller klipper et raster i henhold formen på en polygon-geoobjektklasse. Formen som definerer klippet, kan klippe utstrekningen av rasteret eller klippe ut et område i rasteret.",
		colorspaceConversionName: "Fargemodellkonvertering",
		colorspaceConversionSnip: "Konverterer et raster fra RGB til HSV og motsatt.",
		colorspaceConversionDesc: "Color Model Conversion-funksjonen konverterer bildes fargemodell fra tone, metning og valør (HSV) til rødt, grønt og blått (RGB), eller omvendt.<div><br/>Denne funksjonen kan brukes i et mosaikkdatasett.</div>",
		colormapToRGBName: "Fargekart til RGB",
		colormapToRGBSnip: "Konverterer et enkeltbåndraster med et fargekart til et raster med tre bånd (rød, grønn og blå).",
		colormapToRGBDesc: "Denne funksjonen konverterer et enkeltbåndraster med et fargekart til et raster med tre bånd (rød, grønn og blå).<div><br/>Denne funksjonen er nyttig når du har behov for å lage et raster med tre bånd fra et enkeltbåndraster med et tilknyttet fargekart. Verdiene i fargekartet brukes til å lage hvert røde, grønne og blå bånd. Denne funksjonen kan brukes i et mosaikkdatasett.</div>",
		colormapName: "Fargekart",
		colormapSnip: "Endrer pikselverdiene til å vise rasterdataene som enten et gråtonet eller et rødt, grønt og blått (RGB)-basert bilde på bakgrunn av et fargeskjema eller en fargepalett.",
		colormapDesc: "Colormap-funksjonen er en type rasterdataopptegner. Den forvandler pikselverdiene til å vise rasterdataene som enten et gråtonet eller et RGB-basert fargebilde på bakgrunn av et fargeskjema eller bestemte farger i en fargekartfil. Du kan bruke et fargekart til å representere analyserte data, for eksempel et klassifisert bilde eller når du viser et topografisk kart (eller et indeksfargeskannet bilde).<div><br/>Fargekart inneholder et sett med fargeverdier som brukes til å vise et enkeltbåndraster konsekvent med de samme fargene. Hver pikselverdi er knyttet til en farge, definert som et sett med RGB-verdier. Fargekart kan støtte alle slags bitdybder unntatt flytpunkt. De støtter også positive og negative verdier og kan inneholde manglende fargekartverdier. Når et datasett vises med et fargekart som inneholder manglende verdier, vises ikke pikslene med de manglende verdiene.</div>",
		complexName: "Kompleks",
		complexSnip: "Trekker ut størrelsen fra komplekse tall.",
		complexDesc: "Denne funksjonen beregner omfanget fra komplekse verdier.<div><br/>Denne funksjonen brukes vanligvis med RADAR-bilder som har en kompleks datatype. Den kan brukes i et mosaikkdatasett.</div>",
		compositeBandName: "Composite Bands",
		compositeBandSnip: "Kombinerer flere datasett i én raster med flere bånd.",
		compositeBandDesc: "Composite Bands-funksjonen lar deg kombinere raster for å danne et bilde med flere bånd.",
		conName: "Con",
		conSnip: "Utfører en betinget If, Then, Else-operasjon. Når en Con-operator brukes, må det vanligvis være to eller flere funksjoner som er sammenkjedet, hvor én funksjon angir kriteriene, og den andre funksjonen er Con-operatoren som bruker kriteriene og angir hva de sanne og usanne utdata skal være.",
		conDesc: "Con-funksjonen angir pikslene til utdatarasteret basert på en hvis\\eller-evaluering av hver inndatapiksel. Den returnerer pikselverdier fra True Raster hvis den betingede evalueringen er sann (1) eller returnerer pikselverdiene fra False Raster hvis den betingede evalueringen er usann (0). Disse kriteriene er spesifisert av utdata av en logisk matematikkfunksjon, som vil være inndatarasteret.",
		constantName: "Konstant",
		constantSnip: "Oppretter et virtuelt raster med en enkelt pikselverdi.",
		constantDesc: "Denne funksjonen oppretter et virtuelt raster med en enkelt pikselverdi som kan brukes i rasterfunksjonsmaler og til å behandle et mosaikkdatasett.<div><br/>Den konstante verdien brukes for hver pikselverdi i rasteret.</div>",
		contourName: "Contour",
		contourSnip: "Oppretter konturlinjer.",
		contourDesc: "Contour-funksjonen genererer konturlinjer ved å koble sammen punkter med samme høyde fra et rasterhøydedatasett. Konturene er isoliner som er laget som raster for visualisering. Følgende nøkkelegenskaper gjør denne funksjonen kraftig: konturer blir raskt og dynamisk generert på svært store datasett, for eksempel World Elevation; konturer kan glattes ut for å gi et mer kartografisk tiltalende utseende samtidig som konturenes nøyaktighet opprettholdes; dynamisk kontroll over konturintervallet tilbys; mulige resultater inkluderer konturlinjer, indekskonturer og fylte konturer.<div><br/>Muligheten til å opprette et konturlag som et rasterprodukt er nyttig i en rekke sammenhenger, siden konturene kan legges på et kart og gi informasjon om terrenget uten å skjule de underliggende dataene. De er nyttige i bruksområder som bygg og anlegg, landbruk og vannforvaltning.</div>",
		contrastBrightnessName: "Contrast and Brightness",
		contrastBrightnessSnip: "Justerer kontrasten og lysstyrken til et raster.",
		contrastBrightnessDesc: "Contrast And Brightness-funksjonen forbedrer utseendet til rasterdata ved å endre lysstyrken og kontrasten i bildet. Brightness øker den generelle lysstyrken i bildet— for eksempel, noe som gjør mørke farger lettere og lyse farger hvitere— mens Contrast justerer forskjellen mellom de mørkeste og lyseste fargene.<div><br/>Denne funksjonen endrer pikselverdiene. Den bør derfor brukes når du vil forbedre presentasjonen av dataene og ikke hvis du har tenkt å bruke dataene som en del av en analyse som krever rå pikselverdier. Denne funksjonen er nyttig når du publiserer dataene som en bildetjeneste som kan brukes i applikasjoner uten muligheten til å endre bildens kontrast og lysstyrke, eller for å sikre at dataene vises med dine foretrukne innstillinger.</div>",
		convolutionName: "Konvolvering",
		convolutionSnip: "Bruker et filter som skal gjøre skarpere, mer uklart, oppdage kanter, glatte ut eller lage en gradient over et raster.",
		convolutionDesc: "Convolution-funksjonen utfører filtrering på pikselverdiene i et bilde, som kan brukes til å gjøre et bilde skarpere, tilsløre et bilde, oppdage kanter innenfor et bilde eller andre kjernebaserte forbedringer. Filtre brukes til å forbedre kvaliteten på rasterbildet ved å eliminere falske data eller forbedre geoobjekter i dataene. Disse konvolveringsfiltrene blir brukt på en bevegelig, overlappende kjerne (vindu eller nabolag), slik som 3 ganger 3. Konvolveringsfiltrere fungerer ved å beregne pikselverdien basert på vekten til nabopikslene.",
		corridorName: "Corridor",
		corridorSnip: "Beregner summen av akkumulerte kostnader for to akkumulerte kostnadsrastere.",
		corridorDesc: "Corridor-funksjonen beregner summen av akkumulerte kostnader for to akkumulerte kostnadsrastere. Mens to hvilke som helst raster kan brukes til inndata, for å oppnå et meningsfylt resultat, bør de være uendrede akkumulerte kostnadsrastere. Rekkefølgen av de to inndatene er irrelevant.",
		cosHName: "CosH",
		cosHSnip: "Beregner hyperbolsk cosinus for cellene i et raster.",
		cosHDesc: "Funksjonen beregner hyperbolsk cosinus for pikslene i et raster.",
		cosName: "Cos",
		cosSnip: "Beregner cosinus av en celle i raster.",
		cosDesc: "Funksjonen beregner cosinus for pikslene i et raster.",
		costAllocationName: "Cost Allocation",
		costAllocationSnip: "Beregner, for hver celle, den minst kostnadskrevende kilde, basert på den laveste akkumulerte kostnaden over en kostnadsoverflate.",
		costAllocationDesc: "Cost Allocation-funksjonen beregner, for hver celle, den minst kostnadskrevende kilde, basert på den laveste akkumulerte kostnaden over en kostnadsoverflate.",
		costBackLinkName: "Cost Back Link",
		costBackLinkSnip: "Definerer naboen som er den neste cellen på den akkumulerte minste kostnadsruten, til kilden for den minste kostnadskilden.",
		costBackLinkDesc: "Cost Back Link-funksjonen definerer den neste nabocellen langs den akkumulerte minste kostnadsruten til den minste kostnadskilden.<div><br/>Back Link-rasteret inneholder verdier fra null til åtte. Verdiene definerer retningen eller identifiserer neste nabocelle (den etterfølgende cellen) langs ruten med lavest akkumulert kostnad fra en celle og frem til kilden for laveste kostnadsberegning. Hvis ruten skal gå til den riktige naboen, blir cellen tilordnet verdien 1, og 2 for den cellen nederst til høyre diagonalt, og fortsetter videre med urviseren. Verdien 0 er reservert for kildeceller.</div>",
		costDistanceName: "Cost Distance",
		costDistanceSnip: "Beregner den minste akkumulerte kostnadsavstanden for hver celle fra eller til den minst kostnadskrevende kilden, over en kostnadsoverflate.",
		costDistanceDesc: "Cost Distance-funksjonen beregner den minste akkumulerte kostnadsavstanden for hver celle fra eller til den minst kostnadskrevende kilden, over en kostnadsoverflate.",
		costPathName: "Cost Path",
		costPathSnip: "Beregner minste kostnadsruten fra en kilde til en destinasjon.",
		costPathDesc: "Den globale Cost Path-funksjonen beregner minste kostnadsrute fra en kilde til en destinasjon.<div><br/>Denne funksjonen produserer et utdataraster som finner ruten eller rutene med lavest kostnad fra utvalgte steder til nærmeste kildecelle som er definert innenfor den akkumulerte kostnadsoverflaten, i betydningen kostnadsavstand.</div>",
		curvatureName: "Curvature",
		curvatureSnip: "Beregner krumningen av en rasteroverflate, eventuelt også profil og plankrumning.",
		curvatureDesc: "Curvature-funksjonen viser formen eller krumningen av hellingen. En del av en overflate kan være konkav eller konveks; du kan se det ved å se krumningsverdien. Krumningen beregnes ved å regne ut det andre derivatet av overflaten.<div><br/>Utdataene fra Curvature-funksjonen kan brukes til å beskrive de fysiske egenskapene til et nedslagsfelt i et forsøk på å forstå erosjons- og avløpsprosesser. Krumningsverdien kan brukes til å finne jorderosjonsmønstre og fordeling av vann på land. Profilkurvaturen påvirker en strømings akselerasjon og retardasjon og påvirker derfor erosjon og avsetning. Planformkrumningen påvirker strømningens konvergens og divergens.</div>",
		divideName: "Dele på",
		divideSnip: "Deler verdiene til to raster på piksel for piksel-basis.",
		divideDesc: "Divide-funksjonen deler verdiene til to raster på piksel for piksel-basis.",
		elevationVoidFillName: "Elevation Void Fill",
		elevationVoidFillSnip: "Brukes til å opprette piksler der det finnes hull i høydedataene dine.",
		elevationVoidFillDesc: "Elevation Void Fill-funksjonen brukes til å opprette piksler der det finnes hull i din høyde.<div><br/>Det oppstår tomrom når det ikke er noen punkter samlet inn i området, representert av en piksel i det resulterende rasteret. Tomrom forårsakes ofte av vannlegemer, klassetypevalg eller utestenging. Fylling av tomrom brukes mest når man lager en bakkeoverflate.</div>",
		equalToName: "Er lik",
		equalToSnip: "Utfører en relasjonell equal-to-operasjon på to inndata på en celle for celle-basis. Returnerer 1 for celler der det første rasteret er lik det andre rasteret, og 0 for celler der de ikke er like.",
		equalToDesc: "Funksjonen utfører en tilsvarende operasjon på to raster på en piksel for piksel-basis. Den returnerer verdien 1 for piksler der det første rasteret er lik det andre rasteret, og verdien 0 for piksler der de ikke er like.",
		eucAllocationName: "Euclidean Allocation",
		eucAllocationSnip: "Beregner, for hver celle, nærmeste kilde basert på euklidisk avstand.",
		eucAllocationDesc: "Euclidean Allocation-funksjonen beregner, for hver celle, nærmeste kilde basert på euklidisk avstand.",
		eucDirectionName: "Euclidean Direction",
		eucDirectionSnip: "Beregner, for hver celle, retningen i grader til nærmeste kilde.",
		eucDirectionDesc: "Euclidean Direction-funksjonen beregner, for hver celle, retningen i grader til nærmeste kilde. <div><br/>Retningen beregnes fra hvert cellesenter til midten av kildecellen som er nærmest. Verdiområdet er fra 0 grader til 360 grader, med 0 reservert for kildecellene. Østlig retning (høyre) er 90 og verdiene øker med urviseren (180 er sør, 270 er vest og 360 er nord).</div>",
		eucDistanceName: "Euclidean Distance",
		eucDistanceSnip: "Beregner, for hver celle, den euklidske avstanden til den nærmeste kilden.",
		eucDistanceDesc: "Euclidean Distance-funksjonen beregner, for hver celle, den euklidske avstanden til den nærmeste kilden.",
		exp10Name: "Exp10",
		exp10Snip: "Beregner base 10-eksponenten for cellene i et raster.",
		exp10Desc: "Exp 10-funksjonen beregner base 10-eksponenten for pikslene i et raster.",
		exp2Name: "Exp2",
		exp2Snip: "Beregner base 2-eksponenten for cellene i et raster.",
		exp2Desc: "Dnne funksjonen beregner base 2-eksponenten for pikslene i et raster.",
		expName: "Exp",
		expSnip: "Beregner base e-eksponenten for cellene i et raster.",
		expDesc: "Dnne funksjonen beregner base e-eksponenten for pikslene i et raster.",
		extractBandName: "Extract Bands",
		extractBandSnip: "Angir hvilke bånd som det skal jobbes med når du bruker datasett med flere bånd.",
		extractBandDesc: " Extract Bands-funksjonen lar deg trekke ut et eller flere bånd fra, eller omorganisere båndene i, et rasterdatasett med flere bånd.<div><br/>Du kan bruke Extract Bands-funksjonen før andre funksjoner, for eksempel Arithmetic, for å kontrollere hvilke bånd som brukes som inndata i neste funksjon.</div>",
		fillName: "Fyll",
		fillSnip: "Fyller senkninger og topper i en høydeoverflateraster for å fjerne små feil i dataene.",
		fillDesc: "Global Fill-funksjonen lokaliserer og fyller senkninger og topper i en høydeoverflateraster for å fjerne små feil i dataene. Funksjonen fyller inn en iterativ prosess inntil alle senkninger fylles innenfor den angitte Z-grensen.<div><br/>Når en høydeoverflate opprettes med Ortho Mapping-verktøy eller på annen måte, er det ofte små, men vesentlige feil i form av senkninger og topper i dataene. I fotogrammetri blir senkninger og topper ofte kalt hull og spisser. Siden overflatedata ofte brukes i modellering, for eksempel hydrologisk modellering, er det viktig å korrigere disse senknings- og toppfeilene på en måte som er i samsvar med de omgivende dataene.</div>",
		floatName: "Flyt",
		floatSnip: "Konverterer hver pikselverdi i et raster til en representasjon med flytpunkter.",
		floatDesc: "Float-funksjonen konverterer hver pikselverdi i et raster til en representasjon med flytpunkter.",
		flowAccumulationName: "Strømningsakkumulering",
		flowAccumulationSnip: "Oppretter et raster med akkumulert flyt i hver celle. En vektfaktor kan eventuelt brukes.",
		flowAccumulationDesc: "Den globale funksjonen Flow Accumulation lager et raster av akkumulert strømning i hver piksel, som fastslås ved å samle vekten for alle piksler som strømmer inn i hver nedenforliggende piksel. Hvis ingen vektraster er oppgitt, blir en vekt på 1 brukt hver piksel, og verdien av piksler i utdatarastet er antallet piksler som strømmer inn i hver piksel.<div><br/>Utdatapiksler med høy akkumulert tilstrømming er områder med konsentrert strømning og kan brukes til å identifisere strømningskanaler. Utdatapiksler med akkumulert tilstrømming lik null er lokale, topografiske høyder, og kan brukes til å identifisere åsrygger.</div>",
		flowDirectionName: "Strømningsretning",
		flowDirectionSnip: "Oppretter et raster av strømningsretningen fra hver piksel til den bratteste nedenforliggende naboen.",
		flowDirectionDesc: "En av nøklene til å avlede hydrologiske karakteristikker på en overflate er evnen til å bestemme strømningsretningen fra hver piksel i rasteret. Flow Direction-rasterfunksjonen tar en overflate som inndata og oppretter et raster av strømningsretning fra hver piksel til den bratteste nedenforliggende naboen. Flow Direction-funksjonen støtter tre strømningsmodelleringsmetoder: D8 (åtte retninger), Multi-Flow Direction (MFD) og D-Infinity (DINF). ",
		flowDistanceName: "Flow Distance",
		flowDistanceSnip: "For hver piksel beregnes den laveste nedoverhellende horisontale eller vertikale avstanden til celler på en elv eller strøm som de strømmer inn i.",
		flowDistanceDesc: "For hver piksel beregner funksjonen den laveste nedoverhellende horisontale eller vertikale avstanden til piksel(er) på en elv eller strøm som de strømmer inn i. Hvis et valgfri strømningsretningsraster tilbys, vil retningen(e) for nedoverhellingen være begrenset til de som er definert av inndatastrømningsretningsrasteret. Utdataene er et strømningsavstandraster.",
		focalName: "Focal Statistics",
		focalSnip: "Beregner fokalstatistikk for hver piksel av et bilde basert på et definert fokalnabolag.",
		focalDesc: "Focal Statistics-funksjonen beregner fokalstatistikk for hver piksel av et bilde basert på et definert fokalnabolag.",
		geometricName: "Geometrisk",
		geometricSnip: "Øker posisjonsnøyaktigheten til et datasett ved å ta hensyn til høyden.",
		geometricDesc: "Geometric-funksjonen produserer et ortokorrigert bilde basert på en sensordefinisjon og en terrengmodell. Den øker posisjonsnøyaktigheten til et datasett ved å ta hensyn til høyden.",
		grayscaleName: "Grayscale",
		grayscaleSnip: "Konverterer et bilde med flere bånd til et gråskalabilde med ett bånd.",
		grayscaleDesc: "Denne funksjonen konverterer et bilde med flere bånd til et gråskalabilde med ett bånd.<div><br/>Denne funksjonen bruker spesifiserte vekter på hvert av inndatabåndene og normaliserer utdatabildet. Vektene blir ofte brukt fordi enkelte bånd har varierende betydning avhengig av bruksområdet. For eksempel inneholder det blå båndet ofte mer støy enn andre bånd.</div>",
		greaterThanEqualName: "Større enn eller lik",
		greaterThanEqualSnip: "Utfører en relasjonell større enn lik-operasjon på to inndata på en celle for celle-basis. Returnerer 1 for celler der det første rasteret er større enn eller lik det andre rasteret, og 0 den ikke er det.",
		greaterThanEqualDesc: "Funksjonen utfører en relasjonell større enn- eller lik-operasjon på to inndata på en celle for celle-basis. Den returnerer en verdi på 1 for piksler der det første rasteret er større enn eller lik det andre rasteret, og en verdi på 0 for piksler der det første rasteret ikke er større enn eller lik det andre rasteret.",
		greaterThanName: "Større enn",
		greaterThanSnip: "Utfører en relasjonell større enn-operasjon på to inndata på en celle for celle-basis. Returnerer 1 for celler der det første rasteret er større enn det andre rasteret, og 0 den ikke er det.",
		greaterThanDesc: "Funksjonen utfører en relasjonell større enn-operasjon på to inndata på en piksel etter piksel-basis. Returnerer en verdi på 1 for piksler der det første rasteret er større enn det andre rasteret, og en verdi på 0 for piksler der det første rasteret ikke er større enn det andre rasteret.",
		heatIndexName: "Varmeindeks",
		heatIndexSnip: "Kombinerer omgivelsestemperatur og relativ fuktighet for å returnere opplevd temperatur.",
		heatIndexDesc: "Denne funksjonen beregner opplevd temperatur basert på omgivelsestemperatur og relativ fuktighet. Den opplevde temperaturen beskrives ofte som hvor varmt det føles for menneskekroppen.<div><br/>Denne indeksen kan være nyttig for å beregne farer i forbindelse med medisinske problemer som muskelkramper, dehydrering, heteanfall eller mer alvorlige heteslag på varme og fuktige dager. Når relativ fuktighet er høy, blir det stadig vanskeligere for kroppens svette å fordampe, slik at folk ikke har noen naturlig måte å avkjøles på. Kart over varmeråd eller -advarsler er ofte et produkt av omklassifisering av varselindeksresultatet i klasser, der jo høyere indeksverdien er, desto mer sannsynlig er det at det blir en advarsel fremfor bare et råd.</div>",
		hillshadeName: "Hillshade",
		hillshadeSnip: "Lager en 3D-representasjon av overflaten, med solens relative posisjon tatt i betraktning for å skyggelegge bildet.",
		hillshadeDesc: "Hillshade-funksjonen produserer en gråtonet 3D-representasjon av terrengoverflaten, med solens relative posisjon tatt i betraktning for å skyggelegge bildet. <div><br/>Skyggemodellering er en teknikk for å visualisere terrenget i henhold til en lyskilde og skråningen og aspektet for høydeoverflaten. Det er en kvalitativ metode for visualisering av topografi og gir ikke absolutte høydeverdier. </div>",
		intName: "Int",
		intSnip: "Konverterer hver celleverdi i et raster til et heltall ved hjelp av trunkering.",
		intDesc: "Int-funksjonen konverterer hver pikselverdi i et raster til et heltall ved hjelp av trunkering.",
		interpolateIrregularDataName: "Interpolate Irregular Data",
		interpolateIrregularDataSnip: "Interpolerer fra punktskyer eller uregelmessige rutenett.",
		interpolateIrregularDataDesc: "Enkelte netCDF- eller HDF-datasett lagrer geolokasjoner som uregelmessig adskilte matriser av piksler eller punktdata. Når du legger til disse datasettene i et mosaikkdatasett, tar interpolert uregelmessige data-funksjonen uregelmessig rutenettdata og omfordeler dem slik at hver piksel er av lik størrelse og er firkantet.<div><br/>Når du legger til variabler fra netCDF eller HDF til et mosaikkdatasett, vil det automatisk verifisere om dataene er ordnet regelmessig. Hvis de ikke er det, kan interpoler uregelmessige data-funksjonen brukes til å konvertere de uregelmessige dataene til et regelmessig rutenettbasert raster. Du kan endre interpoleringsmetoden og cellestørrelsen som brukes i interpoler uregelmessige dataraster–funksjonen. For rasterdata med regelmessige mellomrom vil det ikke bli bruk noen interpolering, og dataene vil bli lest som det er.</div>",
		isNullName: "Is Null",
		isNullSnip: "Bestemmer hvilke verdier fra inndatarasteret som er NoData på en celle etter celle-basis. Returnerer en verdi på 1 hvis inndataverdien er NoData, og en verdi på 0 for celler som ikke er det.",
		isNullDesc: "Is Null-funksjonen bestemmer hvilke verdier fra inndatarasteret som er NoData på en piksel etter piksel-basis. Den returnerer en verdi på 1 hvis inndataverdien er NoData, og en verdi på 0 for piksler som ikke er NoData.",
		kernelDensityName: "Kernel Density",
		kernelDensitySnip: "Beregner størrelses per arealenhet fra punkt- eller linjegeoobjekter, ved hjelp av en kjernefunksjon for å tilpasses en jevn konisk overflate til hvert punkt eller linje.",
		kernelDensityDesc: "Denne funksjonen beregner størrelses per arealenhet fra punkt- eller linjegeoobjekter, ved hjelp av en kjernefunksjon for å tilpasses en jevn konisk overflate til hvert punkt eller linje.",
		keyMetadataName: "Key Metadata",
		keyMetadataSnip: "Overstyrer eller legger inn nøkkelmetadata til et raster i en funksjonskjede.",
		keyMetadataDesc: "Denne funksjonen lar deg sette inn eller overstyre et rasters nøkkelmetadata.<div><br/>Informasjonen i viktige metadata brukes til å hjelpe programmet med noe behandling og opptegning, inkludert å gi nyttige opplysninger som sensorens navn, båndets navn eller skydekket som er knyttet til bildene.</div>",
		shortestPathName: "Least Cost Path",
		shortestPathSnip: "Utfører en kostnad-avstandsanalyse med kilde- og destinasjon som inndata, som deretter brukes til å finne den minste kostnadsruten fra en kilde til en destinasjon.",
		shortestPathDesc: "Least Cost Path-funksjonen beregner minste kostnadskruten fra en kilde til en destinasjon. Den minste akkumulerte kostnadsavstanden beregnes for hver piksel over en kostnadsoverflate, til nærmeste kilde. Den produserer et utdataraster som registrerer minste kostnadsruten eller -rutene fra utvalgte steder til nærmeste kildepiksler som er definert innenfor den akkumulerte kostnadsoverflaten, i betydningen kostnadsavstand.<div><br/>Hver rute med lavest kostnad tildeles en verdi når den oppdages i skanneprosessen. Sluttpikselet i kilderaster for en kostnadsrute får verdi 1. Den første ruten får en verdi på 3, den andre 4, og så videre. Når flere ruter slås sammen og følger den gjenværende avstanden tilbake til en kilde på samme rute, blir segmentet hvor de to banene går sammen, tilordnet en verdi på 2. Den sammenslåtte delen av ruten kan ikke tilordnes verdien av en av banene, siden den sammenslåtte delen tilhører begge ruter.</div>",
		lessThanEqualName: "Mindre enn eller lik",
		lessThanEqualSnip: "Utfører en relasjonell mindre enn eller større enn-operasjon på to inndata på en celle for celle-basis. Returnerer 1 for celler der det første rasteret er mindre enn eller lik det andre rasteret, og 0 hvis den ikke er det.",
		lessThanEqualDesc: "Funksjonen utfører en relasjonell mindre enn- eller større enn-operasjon på to inndata på en piksel etter piksel-basis. Den returnerer en verdi på 1 for piksler der det første rasteret er mindre enn eller lik det andre rasteret, og en verdi på 0 der det ikke er mindre enn eller lik det andre rasteret.",
		lessThanName: "Mindre enn",
		lessThanSnip: "Utfører en relasjonell mindre enn-operasjon på to inndata på en celle for celle-basis. Returnerer 1 for celler der det første rasteret er mindre enn det andre rasteret, og 0 hvis det ikke er det.",
		lessThanDesc: "Funksjonen utfører en relasjonell mindre enn-operasjon på to inndata på en piksel etter piksel-basis. Den returnerer en verdi på 1 for piksler der det første rasteret er mindre enn det andre rasteret, og en verdi på 0 der den ikke er mindre enn det andre rasteret.",
		lnName: "Ln",
		lnSnip: "Beregner den naturlige logaritmen (base e) for cellene i et raster.",
		lnDesc: "Ln-funksjonen beregner den naturlige logaritmen (base e) av hver piksel i en raster.",
		log10Name: "Log10",
		log10Snip: "Beregner base 10-logaritmen for cellene i et raster.",
		log10Desc: "Log10-funksjonen beregner base 10-logaritmen for hver piksel i et raster.",
		log2Name: "Log2",
		log2Snip: "Beregner base 2-logaritmen for cellene i et raster.",
		log2Desc: "Log2-funksjonen beregner base 2-logaritmen for hver piksel i et raster.",
		lookupName: "Lookup",
		lookupSnip: "Oppretter et nytt raster ved å slå opp verdier som finnes i et annet felt i tabellen til inndatarasteret.",
		lookupDesc: "Funksjonen oppretter et nytt raster ved å slå opp verdier som finnes i et annet felt i tabellen til inndatarasteret.",
		mlClassifyName: "ML Classify",
		mlClassifySnip: "Klassifiserer bilder med en per piksel-tilnærming. Blandede piksler tilordnes geoobjektet med den høyeste prosentandelen i den pikselen.",
		mlClassifyDesc: "ML Classify-funksjonen lar deg utføre en overvåket klassifisering på et raster- eller mosaikkdatasett, ved hjelp av klassifiseringsalgoritmen for maksimal sannsynlighet. Denne funksjonen krever en klassifikasjonssignaturfil.",
		maskName: "Maske",
		maskSnip: "Angir verdier som du ikke vil vise.",
		maskDesc: "Denne rasterfunksjonen angir verdier som du ikke vil vise i rasteret ditt. Ved å bruke Mask-funksjonen vil du spesifisere en eller flere NoData-verdier eller en rekke gyldige pikselverdier. ",
		minusName: "Minus",
		minusSnip: "Subtraherer verdien av det andre inndatarasteret fra verdien av det første inndatarasteret på en celle for celle-basis.",
		minusDesc: "Minus-funksjonen subtraherer verdien av det andre inndatarasteret fra verdien av det første inndatarasteret på en piksel for piksel-basis.",
		modName: "Mod",
		modSnip: "Finner resten (modulo) av det første rasteret når den deles av det andre rasteret på celle for celle-basis.",
		modDesc: "Mod-funksjonen finner resten (modulo) av det første rasteret når den deles av det andre rasteret på piksel for piksel-basis. Rekkefølgen av de to inndatene er viktig og påvirker utdataresultatene.",
		mosaicRastersName: "Mosaic Rasters",
		mosaicRastersSnip: "Setter sammen et sett med rasterdatasett for å lage ett datasett.",
		mosaicRastersDesc: "Mosaic Rasters-funksjonen lager et mosaikkbilde ut fra flere bilder. Når det er overlapping mellom bildene, er det flere metoder du kan velge blant for å bestemme hvilke bilder som vises.",
		ndviColorizedName: "NDVI Colorized",
		ndviColorizedSnip: "Oppretter et datasett med flere bånd som representerer vegetasjonshelse, basert på forskjellen mellom de røde og nærliggende infrarøde båndene.",
		ndviColorizedDesc: "NDVI Colorized-funksjonen bruker NDVI-funksjonen på inndatabildet, og bruker deretter et fargekart eller en fargepalett til å vise resultatet.",
		ndviName: "NDVI",
		ndviSnip: "Beregner Normalized Difference Vegetation Index (NDVI).",
		ndviDesc: "NDVI-funksjonen oppretter et datasett med ett bånd som representerer vegetasjonshelse, basert på forskjellen mellom de røde og nærliggende infrarøde båndene.<div><br/>NDVI er en standardisert indeks som gjør at du kan generere et bilde som viser grønnhet, også kjent som relativ biomasse. Denne indeksen drar nytte av kontrasten fra karakteristikken av to bånd fra et multispektralt rasterdatasett. Klorofyllpigmentabsorpsjonene i det røde båndet og den høye refleksjonen av plantemateriale i det nær infrarøde (NIR) båndet. Ekstremt lave eller negative NDVI-verdier representerer områder uten vegetasjon i det hele tatt, for eksempel skyer, vann eller snø. Svært lave verdier representerer områder med liten eller ingen vegetasjon, som betong, stein eller ren jord. Moderate verdier representerer områder med busker og gressletter. Høye verdier representerer skogsområder og frodig vegetasjon.</div>",
		negateName: "Invertér",
		negateSnip: "Endrer tegnet (ganger med -1) av pikselverdiene til inndatarasteret på en celle for celle-basis.",
		negateDesc: "Negate-funksjonen endrer tegnet (ganger med -1) av pikselverdiene til inndatarasteret på en piksel ",
		nibbleName: "Nibble",
		nibbleSnip: "Erstatter cellene i et raster som svarer til en maske med verdiene til nærmeste naboer.",
		nibbleDesc: "Nibble-globalfunksjonen lar utvalgte områder på et rastet bli tildelt verdien av nærmeste nabo. Dette er nyttig for redigering av områder i et raster der dataene kan være feilaktige.",
		notEqualName: "Ikke lik",
		notEqualSnip: "Utfører en relasjonell ikke lik-operasjon på to inndata på en celle for celle-basis. Returnerer 1 for celler der det første rasteret ikke er lik det andre rasteret, og 0 hvis den er lik.",
		notEqualDesc: "Funksjonen utfører en relasjonell ikke lik-operasjon på to inndata på en piksel etter piksel-basis. Den returnerer en verdi på 1 for piksler der det første rasteret ikke er lik det andre rasteret, og en verdi på 0 der den er lik det andre rasteret.",
		pansharpeningName: "Pansharpen",
		pansharpeningSnip: "Forbedrer kunstig den geografiske oppløsningen til et bilde med flere bånd ved å føye det sammen med et pankromatisk bilde med høyere oppløsning.",
		pansharpeningDesc: "Pansharpening-funksjonen bruker et pankromatisk bilde eller rasterbånd med høyere oppløsning for å smelte sammen med et rasterdatasett med lavere oppløsning, og flerbåndraster-datasett for å øke den geografiske oppløsningen til flerbåndbildet.<div><br/>Formålet med Pansharpen er å skape et bilde med høyere kvalitet. Siden teknikkene forandrer radiometrien og de spektrale egenskaperne til bildet med flere bånd, må pankromatisk kjerpede bilder brukes med forsiktighet til fjernanalytiske formål.</div>",
		pathAllocationName: "Path Distance Allocation",
		pathAllocationSnip: "Beregner nærmeste kilde for hver celle basert på minst akkumulerte kostnad over en kostnadsoverflate, mens det tas hensyn til overflateavstand og horisontale og vertikale kostnadsfaktorer.",
		pathAllocationDesc: "Path Distance Allocation-funksjonen beregner nærmeste kilde for hver celle, basert på minst akkumulerte kostnad over en kostnadsoverflate, mens det tas hensyn til overflateavstand og horisontale og vertikale kostnadsfaktorer.",
		pathBackLinkName: "Path Distance Back Link",
		pathBackLinkSnip: "Definerer naboen som er den neste cellen på den akkumulerte minste kostnadsruten til den laveste kostnadskilden, mens det tas hensyn til overflateavstand i tillegg til horisontale og verdikale kostnadsfaktorer.",
		pathBackLinkDesc: "Path Distance Back Link-funksjonen identifiserer retningen til naboen som er den neste cellen på den akkumulerte minste kostnadsruten til nærmeste kilde, mens det tas hensyn til overflateavstand og horisontale og vertikale kostnadsfaktorer.",
		pathDistanceName: "Path Distance",
		pathDistanceSnip: "Beregner for hver celle den minst akkumulerte kostnaden over en kostnadsoverflate, mens det tas hensyn til overflateavstand og horisontale og vertikale kostnadsfaktorer.",
		pathDistanceDesc: "Funksjonen Path Distance beregner nærmeste kilde for hver celle basert på minst akkumulert kostnad over en kostnadsoverflate, mens det tas hensyn til overflateavstand og horisontale og vertikale kostnadsfaktorer.",
		plusName: "Plus",
		plusSnip: "Adderer (summerer) verdiene til to raster på piksel for piksel-basis.",
		plusDesc: "Plus-funksjonen adderer (summerer) verdiene til to raster på piksel for piksel-basis.",
		powerName: "Potens",
		powerSnip: "Øker celleverdiene i et raster til potensen av verdiene i et annet raster.",
		powerDesc: "Power-funksjonen øker pikselverdiene i et raster til potensen av verdiene i et annet raster.",
		radarCalibrationName: "Radar Calibration",
		radarCalibrationSnip: "Konverterer RADARSAT-2 backscatter.",
		radarCalibrationDesc: "Denne funksjonen kan brukes til å kalibrere RADARSAT-2-bilder i et mosaikkdatasett eller som et rasterprodukt. Kalibrering utføres på radarbilder slik at pikselverdiene er en ekte representasjon av radarbackscatteren.",
		rasterInfoName: "RasterInfo",
		rasterInfoSnip: "Endrer egenskapene til rasteret, for eksempel bitdybde, NoData-verdi, cellestørrelse og så videre.",
		rasterInfoDesc: "Raster Info åpner en dialog med rasterdatasettegenskaper, for eksempel antall kolonner og rader, antall bånd, pikseltype, utstrekning og romlig referanse. Du kan redigere disse egenskapene ved å velge et rasterdatasett som skal brukes som mal. ",
		rasterizeAttributesName: "Rasterize Attributes",
		rasterizeAttributesSnip: "Beriker et raster ved å legge til bånd som er utledet fra verdier på spesifiserte attributter, fra en ekstern tabell eller en geoobjekttjeneste.",
		rasterizeAttributesDesc: "Funksjonen Rasterize Attribute beriker et raster ved å legge til bånd som er utledet fra verdier på spesifiserte attributter, fra en ekstern tabell eller en geoobjekttjeneste. Du kan eventuelt angi et soneraster og tilhørende sone-ID-attributt for å aktivere regionbasert oppslag.",
		rasterizeFeatureClassName: "Rasterize Features",
		rasterizeFeatureClassSnip: "Konverterer geoobjekter til raster.",
		rasterizeFeatureClassDesc: "Denne funksjonen konverterer polygon-, polylinje- og punktgeoobjektklassedata til et rasterlag.<div><br/>Geoobjekter tilordnes pikselverdier på bakgrunn av geoobjektenes OBJECTID (standard). Pikselverdiene kan eventuelt baseres på et brukerdefinert verdifelt i inndatageoobjektets attributtabell.</div>",
		recastName: "Recast",
		recastSnip: "Endrer parametrene til en funksjonskjede i et mosaikkdatasett eller en bildetjeneste. Dette brukes ofte med LAS-datasett for å unngå å måtte opprette et eget mosaikkdatasett for ulike representasjoner av terreng.",
		recastDesc: "Funksjonen Recast brukes til dynamisk modifisering av funksjonsparameteren som brukes i et mosaikkdatasett eller bildetjeneste uten fysisk vedvarende endring.",
		regionGroupName: "Region Group",
		regionGroupSnip: "For hver celle i utdataene blir identiteten til den tilkoblede regionen som den cellen tilhører, registrert. Et unikt nummer tildeles hver region.",
		regionGroupDesc: "Globalfunksjonen Region Group registrerer identiteten til regionen som hver celle i utdataene tilhører. Et unikt nummer tildeles hver region.<div><br/>Den første regionen som skannes, får verdien én, den andre to og så videre til alle regioner er tildelt en verdi. Skanningen beveger seg fra venstre til høyre, topp til bunn. Verdiene som er tilordnet utdatasonene, er basert på når de oppdages i skanneprosessen.</div>",
		regionGrowName: "Region Grow",
		regionGrowSnip: "Vokser regioner fra utgangspunkter.",
		regionGrowDesc: "Region Grow-funksjonen grupperer nabopiksler i grupper avhengig av den angitte radiusen fra utgangspunktet. Pikselgruppen eller objektet tilordnes en spesifisert fyllingsverdi.",
		remapName: "Remap",
		remapSnip: "Endrer pikselverdier ved å tildele nye verdier til intervaller av pikselverdier eller ved hjelp av en ekstern tabell.",
		remapDesc: "Remap-funksjonen lar deg endre eller omklassifisere pikselverdiene til rasterdataene. Dette kan gjøres enten ved å spesifisere en rekke med pikselverdier for å kartlegge mot en utdatapikselverdi, eller bruke en tabell for å kartlegge pikselverdiene til utdataenes pikselverdi.",
		reprojectName: "Reproject",
		reprojectSnip: "Endrer projeksjonen av et rasterdatasett, mosaikkdatasett eller rasterelement i et mosaikkdatasett. Det kan også resample dataene til en ny cellestørrelse og definere et origo.",
		reprojectDesc: "Reproject-funksjonen endrer projeksjonen av et rasterdatasett, mosaikkdatasett eller rasterelement i et mosaikkdatasett. Det kan også resample dataene til en ny cellestørrelse og definere et origo.<div><br/>Reproject-funksjonen kan brukes når du lager en hurtigbuffer fra et raster- eller mosaikkdatasett som ikke har den nødvendige projeksjonen. Når du f.eks. oppretter en bufret bildetjeneste som kan integreres av programmer med andre bufrede tjenester, er det viktig at alle har samme projeksjon. Dette er ofte en Web Mercator-projeksjon. Siden mosaikkdatasettet ikke kan reprojiseres, kan du gjøre en av to ting— enten opprette et referert mosaikkdatasett fra mosaikkdatasettet i projeksjonen som trengs, eller legg til Reproject-funksjonen i mosaikkdatasettets funksjonskjede. Et annet eksempel bruker denne funksjonen på rasterlementet i et mosaikkdatasett. Når du bruker Cached Raster-funksjonen, vil du kanskje sette inn Reproject-funksjonen, slik at bufferen blir opprettet i den nye projeksjonen. Rasterelementer i et mosaikkdatasett kan bufres når behandlingen er intens, og du prøver å publisere en bildetjeneste som er rask, uten å bufre hele bildetjenesten.</div>",
		resampleName: "Resample",
		resampleSnip: "Endrer cellestørrelsen på et raster.",
		resampleDesc: "Resample-funksjonen endrer cellestørrelsen, resampling-typen eller begge deler.<div><br/>Resample-funksjonen bør bare brukes med spesifikke databehandlingskrav, for eksempel når du beregner vind- eller strømstyrken og -retningen som krever resampling fra kildeoppløsningen.</div>",
		roundDownName: "Avrund nedover",
		roundDownSnip: "Returnerer neste lavere heltall, representert som et flytpunkt, for hver celle i et raster.",
		roundDownDesc: "Round Down-funksjonen returnerer neste lavere heltall som en flytpunktverdi, for hver piksel i et raster.",
		roundUpName: "Avrund oppover",
		roundUpSnip: "Returnerer neste høyere heltall, representert som et flytpunkt, for hver celle i et raster.",
		roundUpDesc: "Round Up-funksjonen returnerer neste høyere heltall som en flytpunktverdi, for hver piksel i et raster.",
		segmentMeanShiftName: "Segment Mean Shift",
		segmentMeanShiftSnip: "Grupperer nabopiksler med lignende spektrale egenskaper sammen i segmenter.",
		segmentMeanShiftDesc: "Denne funksjonen identifiserer objekter, trekk eller segmenter i bildene dine ved å gruppere tilstøtende piksler sammen som har lignende spektrale og romlige egenskaper. Du kan kontrollere mengden romlig og spektral utjevning for å hjelpe til med å trekke ut geoobjekter av interesse.",
		s1RadiometricCalibrationName: "Sentinel-1 Radiometric Calibration",
		s1RadiometricCalibrationSnip: "Utfører forskjellige typer radiometrisk kalibrering på Sentinel-1 data.",
		s1RadiometricCalibrationDesc: "Denne rasterfunksjonen utfører tre forskjellige kalibreringer for Sentinel 1-datasett, inkludert beta null og gamma, og gir det kalibrerte datasettet. Målet med SAR-kalibrering er å tilby bilder hvor pikselverdiene kan være direkte relatert til radar-backscatteringen av scenen. Selv om ikke-kalibrerte SAR-bilder er tilstrekkelig for kvalitativ bruk, er kalibrerte SAR-bilder avgjørende for kvantitativ bruk av SAR-data.<div><br/>Typisk SAR-databehandling, som produserer nivå 1-bilder, omfatter ikke radiometriske korreksjoner og signifikante radiometriske skjevheter blir værende. Derfor er det nødvendig å bruke radiometrisk korreksjon til SAR-bilder, slik at bildenes pikselverdier virkelig representerer radar-backscatteren for den reflekterende overflaten. Radiometrisk korreksjon er også nødvendig for å sammenligne SAR-bilder som er innhentet med forskjellige sensorer eller hentet fra samme sensor på forskjellige tidspunkter, i forskjellige moduser, eller er behandlet av forskjellige prosessorer.</div>",
		s1ThermalNoiseRemovalName: "Sentinel-1 Thermal Noise Removal",
		s1ThermalNoiseRemovalSnip: "Fjerner termisk støy fra Sentinel-1 data.",
		s1ThermalNoiseRemovalDesc: "Termisk støykorrigering kan brukes på Sentinel-1 Level-1 Single Look Complex (SLC)-produkter samt GRD-produkter (Level 1 Ground Range Detection) som ikke allerede er korrigert. Operatoren kan også fjerne denne korreksjonen basert på produktannonteringene for å gjeninnføre støyen som ble fjernet for å produsere det opprinnelige produktet. Produktannoteringene vil bli oppdatert tilsvarende for å tillate bruk av korreksjonen på nytt. ",
		setNullName: "Angi null",
		setNullSnip: "Set Null angir identifiserte celleplasseringer til NoData basert på spesifiserte kriterier. Den returnerer NoData hvis en betinget evaluering er sann og returnerer verdien som er angitt av et annet raster hvis den er usann.",
		setNullDesc: "Set Null-funksjonen angir de identifiserte pikslene til NoData basert på de spesifikke kriteriene. Den returnerer NoData hvis en betinget vurdering er sann (1) og returnerer verdien som er angitt i False Raster hvis en betinget evaluering er usann (0). Disse kriteriene er spesifisert av utdata av en logisk matematikkfunksjon, som vil være inndatarasteret.",
		shadedReliefName: "Skyggelagt relieff",
		shadedReliefSnip: "Lager en flerbåndet, fargekodet 3D-representasjon av overflaten, med solens relative posisjon tatt i betraktning for å skyggelegge bildet.",
		shadedReliefDesc: "Shaded Relief-funksjonen skaper en farge-3D-representasjon av terrenget, og opprettes ved å slå sammen bildene fra høydekodede og terrengskyggemetoder. Denne funksjonen bruker høyde- og azimutegenskapene til å angi solens posisjon.<div><br/></div>",
		sinHName: "SinH",
		sinHSnip: "Beregner hyperbolsk sinus for cellene i et raster.",
		sinHDesc: "Funksjonen beregner hyperbolsk sinus for pikslene i et raster.",
		sinName: "Sin",
		sinSnip: "Beregner sinus for cellene i et raster.",
		sinDesc: "Funksjonen beregner sinus for pikslene i et raster.",
		slopeName: "Helning",
		slopeSnip: "Beregner endringstakten fra en pikselverdi til naboene.",
		slopeDesc: "Denne rasterfunksjonen beregner hellingen, som er endringstakten for høyden for hver celle i den digitale høydemodellen (DEM). Det er den første avledningen av en DEM.<div><br/>Denne funksjonen bruker en akselerert atan()-funksjon. Det er seks ganger raskere, og tilnærmelsesfeilen er alltid mindre enn 0,3 grader.</div>",
		speckleName: "Speckle",
		speckleSnip: "Tilbyr filtre for å fjerne støy fra datasett for syntetiske blenderåpninger.",
		speckleDesc: "Speckle er høyfrekvent støy på radardata. Bildene som er generert av SAR-systemer (synthetic aperture radar) er, som en følge av prosessering av spredte signaler og interferens av elektromagnetiske bølger spredt fra overflater eller gjenstander, svært utsatt for speckleffekter. Denne Speckle-funksjonen filtrerer støyen fra radardatasettet og jevner den ut, mens du beholder kantene eller de skarpe geoobjektene i bildet.",
		spectralConversionName: "Spectral Conversion",
		spectralConversionSnip: "Bruker en matrise på et bilde med flere bånd.",
		spectralConversionDesc: "Spectral Conversion-funksjonen bruker en matrise på et bilde med flere bånd for å påvirke fargeverdiene for utdataene.<div><br/>Enkelte sensorer henter ikke inn blå bånd på grunn av et lavt signal/støyforhold. Dette kan for eksempel brukes til å konvertere et falskt infrarødt bilde til et nesten naturlig fargebilde.</div>",
		squareRootName: "Kvadratrot",
		squareRootSnip: "Beregner kvadratroten av pikselverdiene i et raster.",
		squareRootDesc: "Square Root-funksjonen beregner kvadratroten av pikselverdiene i et raster.",
		squareName: "Kvadrat",
		squareSnip: "Beregner kvadratet av pikselverdiene i et raster.",
		squareDesc: "Square-funksjonen beregner kvadratet av pikselverdiene i et raster.",
		statisticsHistogramName: "Statistics og Histogram",
		statisticsHistogramSnip: "Definer eller knytt til statistikk og histogram.",
		statisticsHistogramDesc: "Statistics og Histogram-funksjonen brukes til å definere statistikken og histogrammet til et raster. Du kan sette inn denne funksjonen på slutten av funksjonskjeden for å beskrive statistikken og histogrammet til en rasterfunksjonsmal (RFT). Dette kan være nødvendig for å kontrollere standardvisningen av behandlingsresultatet, særlig når du definerer en funksjonskjede som inneholder mange funksjoner.<div><br/>Du kan definere statistikk ved å skrive inn verdiene eller importere fra et rasterdatasett eller en XML-fil. Histogrammer kan bare defineres ved å importere en fil.</div>",
		statisticsName: "Statistikk",
		statisticsSnip: "Beregner fokalstatistikk for hver piksel av et bilde basert på et definert fokalnabolag.",
		statisticsDesc: "Statistics-funksjonen beregner fokalstatistikk for hver piksel av et bilde basert på et definert fokalnabolag.<div><br/>Statistics-funksjonen kan brukes til å fylle manglende linjer i et bilde. Manglende linjer skyldes ofte problemer i sensoren, slik at data ikke samles inn. Dette har skjedd i sensorer som Landsat 7s Enhanced Thematic Mapper Plus (ETM+). Disse manglende dataene skaper problemer for analysen og også når du ser på bildene. Det er lite som kan gjøres når du bruker bildene til analyse, men hvis det var et overlappende bilde, kan det brukes i stedet for det manglende innholdet. Det samme kan gjøres hvis bildene brukes til visualisering. Det finnes imidlertid ikke alltid noe ekstra bilde for å fylle ut det manglende innholdet, så det må utledes fra eksisterende data.</div>",
		streamLinkName: "Stream Link",
		streamLinkSnip: "Tilordner unike verdier til deler av et linjært rasternettverk mellom krysningspunkter.",
		streamLinkDesc: "Den globale Stream Link-funksjonen tilordner unike verdier til deler av et linjært rasternettverk mellom krysningspunkter.<div><br/>Koblinger er seksjonene i en strømkanal som forbinder to påfølgende knutepunkter, et knutepunkt og utløpet, eller et knutepunkt og dreneringsdelingen. I hydrologi kalles disse strømsegmentene strekninger. Et knutepunkt er relatert til et utløpspunkt og bidrar til å avgrense et vannskille eller nedbørsfelt.</div>",
		stretchName: "Strekk",
		stretchSnip: "Forbedrer et bilde ved å justere rekkevidden av verdiene som vises. Dette endrer ikke de underliggende pikselverdiene. Hvis en piksel har en verdi utenfor det angitte området, vises det som minimums- eller maksimumsverdi.",
		stretchDesc: "Stretch-funksjonen forbedrer et bilde ved å endre egenskaper som lysstyrke, kontrast og gamma gjennom flere strekktyper. Denne funksjonen bruker statistikk fra rasterne i mosaikkdatasettet. Hvis du bruker denne funksjonen, må du derfor sørge for at statistikk er beregnet.<div><br/>Strekkingstypen definerer en histogramstrekking som vil bli brukt på rastrene for å forbedre visningen av dem. Strekking forbedrer utseendet på dataene ved å spre pikselverdiene langs et histogram fra minimums- og maksimumverdiene som er definert av bitdybden. </div>",
		swathName: "Swath",
		swathSnip: "Interpolerer fra uregelmessige rutenett eller swath-data.",
		swathDesc: "Enkelte netCDF- eller HDF-datasett lagrer geolokasjonen som uregelmessig adskilte matriser. Når du legger til disse datasettene i et mosaikkdatasett, tar swath-funksjonen uregelmessig rutenettdata og omfordeler dem slik at hver piksel er av lik størrelse og er firkantet.<div><br/>Når du legger til variabler fra netCDF eller HDF til et mosaikkdatasett, vil det automatisk verifisere om dataene er ordnet regelmessig. Hvis de ikke er det, brukes swath-funksjonen automatisk til å konvertere det uregelmessige rasteret til punkter og deretter til et regelmessig rutenettbasert raster. Du kan endre interpoleringsmetoden og cellestørrelsen som brukes i swath–funksjonen. For rasterdata med regelmessige mellomrom vil det ikke bli bruk noen interpolering, og dataene vil bli lest som det er.</div>",
		tanHName: "TanH",
		tanHSnip: "Beregner hyperbolsk tangent for cellene i et raster.",
		tanHDesc: "Funksjonen beregner hyperbolsk tangent for pikslene i et raster.",
		tanName: "Tan",
		tanSnip: "Beregner tangent for cellene i et raster.",
		tanDesc: "Funksjonen beregner tangent for pikslene i et raster. ",
		tasseledCapName: "Tasseled Cap (Kauth-Thomas)",
		tasseledCapSnip: "Beregner nivåer av vegetasjon, våthet og lysstyrke. Denne teknikken er avhengig av koeffisienter som må beregnes spesifikt for en sensor.",
		tasseledCapDesc: "Tasseled Cap (Kauth-Thomas)-transformasjonen er laget for å analysere og kartlegge vegetasjonsfenomenologi og byutviklingsendringer som oppdages av diverse satellittsensorsystemer. Den er kjent som Tasseled Cap-transformasjonen på grunn av formen på den grafiske fordelingen av data. Transformasjonen ga en begrunnelse for mønstrene man finner i Landsat MSS-data for landbruksfelt som en funksjon av avlingenes livssyklus. Etter hvert som avlinger vokser fra frø til moden plante, er det en netto økning i nærinfrarød og reduksjon i rød refleksjon basert på jordfarge.<div><br/>Anvendelsen av denne transformasjonen er utvidet fra overvåking av avlinger til analyse og kartlegging av vegetasjon for en rekke bruksområder som skogbruk, industriell vegetasjonsforvaltning, kartlegging og forvaltning av økosystem, registrere og overvåke karbonfangst og -lagring, byutvikling med mer. Den har også utvidet seg fra å støtte Landsat MSS til å inkludere andre populære satellittsystemer som Landsat TM, Landsat ETM +, Landsat 8, IKONOS, QuickBird, WorldView-2 og RapidEye multispectral-sensorer.</div>",
		timesName: "ganger",
		timesSnip: "Multipliserer verdiene til to raster på piksel for piksel-basis.",
		timesDesc: "Times-funksjonen multipliserer verdiene til to raster på piksel for piksel-basis.",
		transposeBitsName: "Transpose Bits",
		transposeBitsSnip: "Pakker ut bitene av inndataspikselet og kartlegger dem til spesifiserte biter i utdatapikselet. Formålet med denne funksjonen er å manipulere biter fra et par inndata, som for eksempel Landsat 8-kvalitetsbåndprodukter.",
		transposeBitsDesc: "Transpose Bit-funksjonen pakker ut bitene av inndataspikselet og tilordner dem til spesifiserte biter i utdatapikselet. Formålet med denne funksjonen er å manipulere biter fra et par inndata, som for eksempel Landsat 8-kvalitetsbåndprodukter.",
		unitConversionName: "Unit Conversion",
		unitConversionSnip: "Endrer verdier fra en måleenhet til en annen.",
		unitConversionDesc: "Denne funksjonen konverterer piksler fra en enhet til en annen. Den støtter konvertering av avstand, hastighet og temperatur.",
		vectorFieldName: "Vektorfelt",
		vectorFieldSnip: "Viser datasett med både omfang (u) og retning (v) som piler, der omfanget er representert av pilens størrelsen og retningen er representert ved pilens vinkel.",
		vectorFieldDesc: "Vector Field-funksjonen brukes til å sammensette og konvertere to raster til et tobåndsraster som enten er datatype Magnitude-Direction eller datatype U-V.<div><br/>U-verdien kalles noen ganger sonalhastighet, og V-verdien kalles noen ganger meridionalhastighet.</div>",
		viewshed2Name: "Synsfelt",
		viewshed2Snip: "Finner ved hjelp av geodetiske metoder hvilken del av rasteroverflaten som er synlig for et sett av observatører.",
		viewshed2Desc: "Viewshed-funksjonen finner ved hjelp av geodetiske metoder hvilken del av rasteroverflaten som er synlig for et sett av observatører.<div><br/>Synligheten for hvert pikselsenter bestemmes av en siktlinjetest mellom målet og hver observatør. Hvis en observatør kan se målet ved pikselsenteret, betraktes pikselet som synlig. Dette verktøyet vurderer alltid jordens krumning når synligheten bestemmes.</div>",
		watershedName: "Vannskille",
		watershedSnip: "Bestemmer tilførselsområdet over et sett med celler i et raster.",
		watershedDesc: "Den globale Watershed-funskjonen bestemmer tilførselsområdet over et sett med piksler i et raster. Vannskiller er avgrenset fra et strømningsretningraster som identifiserer strømningsretningen fra hver piksel.",
		weightedOverlayName: "Weighted Overlay",
		weightedOverlaySnip: "Legger over flere raster ved hjelp av en felles måleskala og vekt hver etter dens betydning.",
		weightedOverlayDesc: "Denne funksjonen lar deg legge flere raster med en felles måleskala oppå hverandre, og vekte hvert raster etter dets betydning.",
		weightedSumName: "Weighted Sum",
		weightedSumSnip: "Vekter og legger til en rekke med raster på en celle-til-celle basis.",
		weightedSumDesc: "Weighted Sum-funksjonen lar deg legge over flere raster, multiplisere hvert med sin oppgitte vekt og summere dem sammen.",
		windchillName: "Vindfaktor",
		windchillSnip: "Kombinerer omgivelsestemperatur og vindhastighet for å beregne vindfaktoren.",
		windchillDesc: "Wind Chill-funksjonen er nyttig for å identifisere farlige vinterforhold som, avhengig av eksponeringstiden for elementene, kan resultere i forfrysninger eller hypotermi. Vindfaktor er en måte å måle hvor kald en person føler seg når vinden tas i betraktning, ved allerede kalde temperaturer. Jo raskere vindhastigheten er, desto raskere vil kroppen miste varme og jo kaldere vil folk føle seg.",
		zonalRemapName: "Zonal Remap",
		zonalRemapSnip: "Omform piksler i et raster basert på soner som er definert i et annet raster og sonavhengig verditilordning som er definert i en tabell.",
		zonalRemapDesc: "Med denne funksjonen kan du omforme piksler i et raster basert på soner som er definert i et annen raster og sonavhengig verditilordning som er definert i en tabell.",
		zonalStatisticsName: "Zonal Statistics",
		zonalStatisticsSnip: "Beregner statistikk over verdier av et raster innenfor sonene til et annet datasett.",
		zonalStatisticsDesc: "Funksjonen beregner statistikk over verdier av et raster innenfor sonene til et annet datasett. En sone er definert som alle områder i inndataene som har samme verdi. Disse områdene behøver ikke være sammenhengende. Når sonen og verdi-inndatarasteret begge er raster med samme oppløsning, blir de brukt direkte. Hvis oppløsningene er forskjellige, brukes en intern resampling for å gjøre oppløsningene samsvarende før soneoperasjonen utføres.",
		flowLengthName: "Flow Length",
		flowLengthSnip: "Beregner oppstrøms- eller nedstrømsavstand eller vektet avstand langs strømningsbanen for hver celle.",
		flowLengthDesc: "Dette er en global rasterfunksjon. Denne funksjonen oppretter et rasterlag med oppstrøms- eller nedstrømsavstand eller vektet avstand langs strømningsbanen for hver celle.<div><br/>Flow Length-funksjonen brukes primært til å beregne lengden på lengste strømningsvei innenfor et gitt basseng. Målingen brukes ofte til å beregne konsentrasjonstiden for et basseng. Dette gjøres ved å bruke Oppstrøms-alternativet. Funksjonen kan også brukes til å opprette avstandsdiagrammer over hypotetisk nedbør og avrenningshendelser ved hjelp av vektrasteret som en impedans for nedadgående bevegelse.</div>",
		streamOrderName: "Strømrekkefølge",
		streamOrderSnip: "Tilordner en numerisk rekkefølge til segmenter i et raster som representerer forgreninger i et lineært nettverk.",
		streamOrderDesc: "Dette er en global rasterfunksjon. Denne funksjonen oppretter et rasterlag som tilordner en numerisk rekkefølge til segmenter i et raster som representerer forgreninger i et lineært nettverk.<div><br/>Utdataene fra Stream Order-funksjonen vil ha høyere kvalitet hvis inndatalaget for strømningsraster og inndatalaget for strømningsretningsraster er avledet fra samme overflate. Hvis strømrasteret er avledet av et rastrert strømdatasett, kan det hende utdataene ikke kan brukes fordi retningen celle for celler ikke samsvarer med plasseringen av strømcellene. Resultatene av funksjonen Strømningsakkumulering kan brukes til å lage et rasterstrømningnettverk ved å bruke en terskelverdi til å velge celler med høy akkumulert strømning. For eksempel brukes celler som har mer enn 100 celler som flyter inn i dem, til å definere strømnettverket. Bruk funksjonene Betinget eller Angi null til å opprette et strømningsnettverksraster der strømningsakkumuleringsverdier på 100 eller over går til et raster og resten sendes til bakgrunnen (NoData). Det resulterende strømnettverket kan brukes i funksjonen Strømrekkefølge. Funksjonen støtter bare et rasterlag med D8-strømretning som inndata. D8-strømningsretninger kan opprettes ved hjelp av funksjonen Strømningsretning og kjøres med standard strømningsretning D8.</div>",
		snapPourPointName: "Fest utløpspunkt",
		snapPourPointSnip: "Fester utløpspunkt til cellen med høyest strømningsakkumulering innenfor en gitt avstand",
		snapPourPointDesc: "Dette er en global rasterfunksjon. Denne funksjonen fester utløpspunkter til cellen med høyest strømningsakkumulering innenfor en angitt avstand.<div><br/>Funksjonen Fest utløpspunkt brukes til å sikre utvalget av punkt med høy akkumulert strømning ved avgrensing av nedslagsfelt ved hjelp av Vannskille-funksjonen. Fest utløpspunkt søker etter cellen med høyest strømningsakkumulering innenfor en snappavstand rundt de angitte utløpspunktene, og flytter utløpspunktet til denne lokasjonen. Utdata er et heltalls rasterlag når de opprinnelige utløpspunktlokasjonene er festet til lokasjonene for høyest akkumulert flyt.</div>",
		sinkName: "Forsenkning",
		sinkSnip: "Oppretter et raster som identifiserer alle forsenkninger eller områder med drenering",
		sinkDesc: "Dette er en global rasterfunksjon. Denne funksjonen oppretter et rasterlag som identifiserer alle forsenkninger eller områder med drenering. En forsenkning er en celle eller et sett med spatialt forbundne celler med en strømningsretning som ikke kan tilordnes en av de åtte verdiene i en strømningsretningsraster. Dette kan inntreffe når alle naboceller er høyere enn behandlingscellen, eller når to celler flyter inn i hverandre og danner en tocellers sløyfe.<div><br/>Forsenkning-funksjonen støtter kun et rasterlag med D8-strømningsretning som inndata. D8-strømningsretninger kan opprettes ved hjelp av funksjonen Strømningsretning og kjøres med standard strømningsretning D8. Utdataene for Forsenkning-funksjonen er et heltallsraster der hver forsenkning er tilordnet en unik verdi. Disse unike verdiene ligger i området fra én til totalt antall forsenkninger. Hvis for eksempel samlet antall forsenkninger er 1000, er de unike verdiene i området 1 til 1000.</div>",
		aggregateName: "Summer",
		aggregateSnip: "Genererer en versjon av et raster med redusert oppløsning.",
		aggregateDesc: "Aggregeringsfunksjonen sampler et inndataraster på nytt med en grovere oppløsning basert på en angitt aggregeringsstrategi. Hver utdatacelle inneholder sum, minimum, maksimum, gjennomsnitt eller median for utdatacellene som er innenfor utstrekningen av den cellen.<div><br/>Du kan angi faktoren som cellestørrelsen for inndatarasteret skal multipliseres med. For eksempel vil en cellefaktorverdi på tre resultere i en utdatacellestørrelse som er tre ganger større enn i inndatarasteret. Du kan definere hvordan utstrekningen for utdata skal håndteres hvis antall rader eller kolonner i inndataene ikke er en eksakt multippel av cellefaktoren. Som standard utvides øvre og høyre grense for å dekke en større romlig utstrekning enn den i inndatarasteret for å sikre at alle inndataceller behandles. Alternativt kan øvre og høyre grense minskes for å dekke en mindre romlig utstrekning slik at antallet rader og kolonner som behandles, er en eksakt multippel av cellefaktoren. Du kan definere hvordan NoData-celler skal håndteres i den aggregerte beregningen. Standardmekanismen er at NoData-inndataceller som faller innenfor den romlige utstrekningen av en større celle i utdatarasteret, ignoreres når verdien av utdatacellen bestemmes. Alternativt kan du spesifisere at hvis det bare er en enkelt NoData-inndatacelle innenfor den romlige utstrekningen for en utdatacelle, blir denne cellen en NoData-celle i utdatarasteret.</div>",
		ccdcName: "CCDC-analyse",
		ccdcSnip: "Bruker algoritmen for kontinuerlig endringsdeteksjon og klassifisering (CCDC) til å evaluerer endringer i pikselverdier over tid og generere modellresultater.",
		ccdcDesc: "CCDC-analysefunksjonen bruker algoritmen for kontinuerlig endringsdeteksjon og klassifisering (CCDC) til å evaluerer endringer i pikselverdier over tid og generere et flerdimensjonalt raster som inneholder modellresultatene. Dette støttes kun sammen med funksjonen Detect Change Using Change Analysis i en rasterfunksjonsmal. Du lager rasterutdata ved å koble CCDC Analysis-funksjonen til funksjonen Detect Change Using Change Analysis, lagre som en rasterfunksjonsmal og kjøre rasteranalyse med funksjonsmalen.<div><br/>Denne funksjonen bruker algoritmen for kontinuerlig endringsdeteksjon og klassifisering (CCDC) til å evaluere endringer i pikselverdier over tid for en stabel med bilder. I en tidsserie med optiske bilder eller bildederivater (for eksempel DNVI), kan pikselverdiene variere av flere grunner: 1. Årstidsendringer – Pikselverdiendringer reflekterer endringer i vegetasjon som skyldes årstidsvariasjoner i temperatur og nedbør. PÅ den nordlige halvkule forventer vi for eksempel å se høyere tetthet av grønn vegetasjon om sommeren sammenlignet med vinteren. 2. Gradvis endring – Pikselverdiendringer gjenspeiler tendenser i vegetasjon eller overflatevann som skyldes klimavariasjon eller langvarig arealforvaltningspraksis. For eksempel kan bar jord øke gradvis i areal som følge av langvarig reduksjon i nedbør. 3. Plutselig endring – Pikselverdiendringer gjenspeiler endringer i arealdekke som oppstår plutselig som følge av avskoging, byutvikling, naturkatastrofer og så videre. CCDC-algoritmen identifiserer alle disse tre endringstypene og hovedformålet er å identifisere plutselige endringer. Harmonisk regresjons- og trendmodeller tilpasses til dataene for å estimere årstidsbasert og gradvis endring, og plutselige avvik fra trendmodellene er indikasjoner på plutselig endring.<div><br/>CCDC-algoritmen ble opprinnelig utviklet for Landsat TM, Landsat ETM+ og Landsat OLI-data for overflatereflektans og stråletemperatur. Funksjonen Detect Change Using Change Analysis sammen med denne funksjonen vil imidlertid oppdage endring for bilder med flere bånd fra sensorer som støttes, samt bildederivater med ett bånd, som båndindekser. Du kan for eksempel utføre kontinuerlig endringsdeteksjon på et NDVI-raster (Normalize Difference Vegetation Index) fordi plutselige endringer i NDVI kan være en indikasjon på avskoging.</div>",
		computeChangeName: "Compute Change",
		computeChangeSnip: "Beregner differansen mellom to kategoriske eller kontinuerlige rasterdatasett.",
		computeChangeDesc: "Compute Change-funksjonen kan brukes til å spesifisere forskjellene mellom to klassifiserte rastre for analyse av endringer i arealdekke. Den kan også brukes til å undersøke endringer mellom to kontinuerlige enkeltbåndrastre, som høyde, temperatur, trekronedekning osv.",
		detectChangeName: "Detect Change Using Change Analysis",
		detectChangeSnip: "Genererer et rasterlag som inneholder informasjon om pikselendringer, ved å bruke det resulterende endringsanalyserasteret.",
		detectChangeDesc: "<div>Funksjonen Registrer endring ved hjelp av endringsanalyseraster genererer et rasterlag som inneholder informasjon om datoen for pikselendringer, ved å bruke endringsanalyserasteret. Endringsanalyserasteret må genereres av verktøyet Analyser endringer ved hjelp av CCDC eller verktøyet Analyser endringer ved hjelp av LandTrendr eller rasterfunksjonen CCDC-analyse eller rasterfunksjonen LandTrendr-analyse.</div><br><div>Denne rasterfunksjonen kan kombineres med rasterfunksjonen CCDC-analyse eller rasterfunksjonen LandTrendr-analyse i en rasterfunksjonsmal. For å produsere et permanent rasterresultat må CCDC-analyse- eller LandTrendr-analysefunksjonen kobles til funksjonen Registrer endring ved hjelp av endringsanalyseraster lagres som en rasterfunksjonsmal og kjøres som rasteranalyse med malen.</div><br><div>Parameteren <strong>Endringstype</strong> angir informasjonen som genereres. Informasjon trekkes ut fra endringsanalyserasteret. Når du kjører denne funksjonen på resultatet fra CCDC-funksjonen/verktøyet, kan du velge mellom følgende alternativer:</div><ul><li><strong>Tidspunkt for siste endring</strong> – Siste dato og klokkeslett da en piksel ble flagget som endret.</li><li><strong>Tidspunkt for tidligste endring</strong> –Tidligste dato og klokkeslett da en piksel ble flagget som endret.</li><li><strong>Tidspunkt for største endring</strong> – Dato og klokkeslett da den beregnede endringen hadde størst betydning for en piksel.</li><li> <strong>Antall endringer</strong> – Det totale antallet ganger pikselen ble endret.</li></ul><div>Når denne funksjonen kjøres på resultatet av LandTrendr-funksjonen/verktøyet, er følgende tilleggsalternativer tilgjengelige:</div><ul><li><strong>Tidspunkt for lengste endring</strong> – Datoen da en piksel ble flagget som endret, ved begynnelsen eller slutten av den lengste endringsperioden.</li><li><strong>Tidspunkt for korteste endring</strong> – Datoen da en piksel ble flagget som endret, ved begynnelsen eller slutten av den korteste endringsperioden.</li><li><strong>Tidspunkt for raskeste endring</strong> – Datoen da en piksel ble flagget som endret, ved begynnelsen eller slutten av den raskeste endringsperioden.</li><li><strong>Tidspunkt for langsomste endring</strong> – Datoen da en piksel ble flagget som endret, ved begynnelsen eller slutten av den langsomste endringsperioden.</li></ul><div>Det resulterende rasteret er et flerbåndsraster der hvert bånd inneholder endringsinformasjon som avhenger av hvilken endringstype som er valgt og det maksimale antallet endringer som er angitt. Hvis for eksempel <strong>Endringstype</strong> er satt til <strong>Tidspunkt for tidligste endring</strong> og <strong>Maksimalt antall endringer</strong> er satt til 2, beregner funksjonen de to tidligste datoene da endring fant sted i løpet av tidsserien for hver enkelt piksel. Resultatet er et raster der det første båndet inneholder datoene for tidligste endring per piksel, og det andre båndet inneholder datoene for nest tidligste endring per piksel.</div><br><div>Når denne funksjonen brukes på utdataene fra LandTrendr-verktøyene, kan du velge om du vil trekke ut datoen som markerer begynnelsen på en endring eller slutten på en endring, ved å bruke parameteren <strong>Segmentdato</strong>. Hvis du for eksempel vil forstå hvordan den nyligste endringen i tidsserien startet, kan du sette <strong>Endringstype</strong> til <strong>Tidspunkt for siste endring</strong> og <strong>Segmentdato</strong> til <strong>Segmentets begynnelse</strong>.</div><br><div>Bruk følgende filtreringsparametere for å trekke ut mer spesifikke endringsdatoer fra endringsanalyserasteret:</div><ul><li><strong>Filtrer etter år</strong> –Identifiser endringer som forekom i løpet av en bestemt tidsperiode, for eksempel hvis du ser etter endringer som har funnet sted i et landskap i løpet av fem år med tørke.</li><li><strong>Filtrer etter varighet</strong> – Identifiser endringer som har funnet sted i løpet av et gitt antall år, for eksempel hvis du bare ser etter plutselige endringer som har funnet sted i løpet av ett eller to år. Du kan beregne varigheten du er interessert i, ved å bruke formelen <strong>avslutningsår – startår +1</strong>. Opphold i tidsserien blir inkludert.</li><li><strong>Filtrer etter størrelse</strong> – Identifiser endringer av en viss størrelse, for eksempel hvis du bare ser etter store endringer i vegetasjonsindeksen NDVI (Normalized Difference Vegetation Index). Størrelse er en absolutt verdi, så minimums- og maksimumsverdier kan ikke være negative. Bruk parameteren <strong>Endringsretning</strong> hvis du vil angi retningsendringer.</li></ul>",
		distanceAccumulationName: "Distance Accumulation",
		distanceAccumulationSnip: "Beregner akkumulert avstand for hver celle til kildene og tillater rettlinjet avstand kostnadsavstand, reell overflateavstand samt vertikale og horisontale kostnadsfaktorer.",
		distanceAccumulationDesc: "Distance Accumulation beregner avstanden til hver lokasjon i studieområdet til nærmeste, eller rimeligste, kilde. Dersom kun kildene oppgis som inndata, så beregnes det en rettlinjet avstand til hver lokasjon i studieområdet. Hvis både kilder og hindringer brukes som inndata, beregner Distance Accumulation-funksjonen den rettlinjede avstanden forbi hindringer. For både kilderasteret og hindringsrasteret skal bakgrunnsverdien være NoData, mens kilder og hindringer representeres med gyldige celleverdier. Gyldige celleverdier omfatter null. <div><br/>Når et overflateraster brukes som inndata, beregnes den faktiske overflateavstanden mellom cellene. Hvis du vil utføre kostnadsanalyse ved hjelp av Distance Accumulation-funksjonen, må du ha en kostnadsoverflate. Hvis det er angitt en kostnadsoverflate, blir resultatet et raster med akkumulert kostnadsavstand. Når horisontale og vertikale faktorer er oppgitt, blir retning vurdert etter hvert som kostnad akkumuleres. Det er fire kildekarakteristikker som kan brukes. Karakteristikkene som kan være for kildene, eller de reisende fra kildene, styres av bestemte parametere: 1. Første akkumulering: angir den opprinnelige kostnaden før bevegelsen begynner. 2. Maksimal akkumulering: angir hvor stor kostnad en kilde kan akkumulere før den når grensen. 3. Multiplikator som skal brukes på kostnader: angir reisemåten eller størrelsen ved kilden. 4. Reiseretning: identifiserer om den reisende starter ved en kilde og beveger seg til ikke-kilde-lokasjoner, eller om den starter på ikke-kilde-lokasjoner og beveger seg tilbake til en kilde.<div><br/>Som standard er resultatet av Distance Accumulation-funksjonen et enkeltbånd, som er rasteret for avstandsakkumulering. Det kan også opprettes et bånd til, båndet for tilbakeretning. Dette båndet viser hvilken retning man må ta for å komme til kilden med lavest kostnad fra hver lokasjon i studieområdet. Begge båndene er nødvendige for å finne optimale ruter innenfor studieområdet. For å generere en rute bruker du først Extract Bands-funksjonen til å trekke ut rasteret for avstandsakkumulering og rasteret for tilbakeretning. Bruke disse lagene som inndata for Kostnadsrute-funksjonen. Med denne funksjonen bruker du rasteret for avstandsakkumulering som kostnad-/avstandsraster og rasteret for tilbakeretning som Cost Back Link-inndataraster.</div>",
		distanceAllocationName: "Distance Allocation",
		distanceAllocationSnip: "Beregner avstandstildeling for hver celle til de oppgitte kildene basert på rettlinjet avstand, kostnadsavstand, reell overflateavstand, samt vertikale og horisontale kostnadsfaktorer.",
		distanceAllocationDesc: "Distance Allocation beregner hvilken kilde hver lokasjon i studieområdet er tildelt til. Hvis kun kildene oppgis som inndata, blir lokasjonene tildelt ved hjelp av en rettlinjet avstand til den nærmeste kilden. Hvis både kilder og hindringer brukes som inndata, beregner Distance Allocation-funksjonen rettlinjet avstand rundt hindringer for å fastsette hvilken kilde en lokasjon blir tildelt til. For både kilderasteret og hindringsrasteret skal bakgrunnsverdien være NoData, mens kilder og hindringer representeres med gyldige celleverdier. Gyldige celleverdier omfatter null.<div><br/>Hvis du vil utføre kostnadsanalyse ved hjelp av Distance Allocation-funksjonen, må du ha en kostnadsoverflate. Hvis en kostnadsoverflate oppgis, blir resultatet et tildelingsraster basert på akkumulert kostnad og ikke på rettlinjet avstand. Når horisontale og vertikale faktorer er oppgitt, blir retning vurdert etter hvert som kostnad akkumuleres. Når et overflateraster brukes som inndata, blir den faktiske overflateavstanden som dekkes når man beveger seg mellom cellene, beregnet ved fastsettelse av tildeling. Det er fire kildekarakteristikker som kan brukes. Karakteristikkene som kan være for kildene, eller de reisende fra kildene, styres av bestemte parametere: 1. Første akkumulering: angir den opprinnelige kostnaden før bevegelsen begynner. 2. Maksimal akkumulering: angir hvor stor kostnad en kilde kan akkumulere før den når grensen. 3. Multiplikator som skal brukes på kostnader: angir reisemåten eller størrelsen ved kilden. 4. Reiseretning: identifiserer om den reisende starter ved en kilde og beveger seg til ikke-kilde-lokasjoner, eller om den starter på ikke-kilde-lokasjoner og beveger seg tilbake til en kilde.<div><br/>Som standard er resultatet av Distance Allocation-funksjonen et enkeltbånd, som er rasteret for avstandstildeling. Hvis det merkes av for det boolske alternativet Generer kilderad og -kolonne som ekstra bånd i utdata, gir det et flerbåndsraster som består av tre bånd. Det første båndet er båndet for avstandstildeling, det andre båndet inneholder en radindeks, og det tredje båndet inneholder en kolonneindeks. Disse indeksene identifiserer lokasjonen for kildecellen som er minste akkumulerte kostnadsavstand fra. Kilderadindeksen og kildekolonneindeksen kan brukes sammen til å kartlegge intensitet. Hvis du foretar spørring for en lokasjon i studieområdet på tvers av bånd to og tre, får du vite raden og kolonnen for kilden med lavest kostnad for denne lokasjonen.</div>",
		eucBackDirectionName: "Euclidean Back Direction",
		eucBackDirectionSnip: "Beregner retningen i grader for hver celle til nabocellen langs den korteste veien tilbake til nærmeste kilde og samtidig som hindringer unngås.",
		eucBackDirectionDesc: "Funksjonen Euclidean Back Direction resulterer i et kontinuerlig flytpunktraster som representerer retningen i grader tilbake til nærmeste kilde samtidig som hindringer unngås, hvis hindringer er oppgitt.<div><br/>Inndataene for funksjonen Euclidean Back Direction er kilden som retningen beregnes til. Et raster som representerer hindringer innenfor studieområdet, er valgfritt inndataalternativ. Bakgrunnsverdien skal være NoData for både kilderasteret og hindringrasteret, mens kildene og hindringene representeres med gyldige verdier. Gyldige celleverdier omfatter null. Som standard vil beregningen behandle til den kombinerte utstrekningen for kilder og hindringer, pluss to rader og kolonner. Hvis analyse kun er nødvendig innenfor en angitt avstand fra kildene, kan parameteren Maximum Distance brukes. Euclidean Back Direction støtter beregning med både en planmetode og en geodetisk metode. Med planmetoden foretas beregningen på et projisert flatt plan ved hjelp av et 2D kartesisk koordinatsystem. Med den geodetiske metoden foretas beregningen på ellipsoiden, noe som betyr at resultatene ikke endres uavhengig av inndata- eller utdataprojisering.<div><br/>Resultatet av funksjonen Euclidean Back Direction kan brukes sammen med resultatet fra funksjonen Euclidean Distance til å fastsette de korteste rutene fra lokasjoner innenfor studieområdet tilbake til kilden. Resultatene fra Euclidean Back Direction og Euclidean Distance brukes begge sammen med destinasjoner i Cost Path-funksjonen for å generere de korteste rutene.</div>",
		expandName: "Utvid",
		expandSnip: "Utvider valgte soner i et raster etter soner med et angitt antall celler.",
		expandDesc: "Med den globale funksjonen for utvidelse kan du generalisere, eller forenkle, rastrene ved å gjøre bestemte soner større. Du kan også bestemme omfanget av generaliseringen.<div><br/>Sonene du velger vil øke i størrelse ved at de utvides inn i andre soner. De valgte soneverdiene kan vises som soner i forgrunnen, mens de andre verdiene beholdes som soner i bakgrunnen. Sonene i forgrunnen kan utvides inn i sonene i bakgrunnen.<div><br/>Omfanget av generaliseringen kan styres med parameteren Antall celler. Denne verdien er som standard 1, noe som betyr at de valgte sonene utvides med mengden tilsvarende én celles størrelse. Du kan angi en større verdi for denne parameteren for å øke graden av generalisering. Dette blir som å kjøre verktøyet like mange ganger som angitt tall, med resultatene av forrige kjøring som inndata i etterfølgende gjentakelse.</div>",
		trendAnalysisName: "Generate Trend",
		trendAnalysisSnip: "Estimerer trenden for hver piksel langs en dimensjon for én eller flere variabler i et flerdimensjonalt raster.",
		trendAnalysisDesc: "<div>Denne funksjonen kan brukes til å plassere data langs en lineær, harmonisk eller polynom trendlinje, eller den kan brukes til å utføre trenddeteksjon ved hjelp av en Mann-Kendall- eller Seasonal Kendall-test.</div><br><div>Det resulterende trendrasteret som genereres med denne funksjonen, brukes som inndata til funksjonen <strong>Forutsi ved bruk av trend</strong>.</div><br><div>Mann-Kendall-og Seasonal-Kendall-testene brukes til å bestemme om det er en monoton trend i dataene. De er ikke-parametriske, det vil si at de ikke forutsetter en bestemt distribusjon av data. Mann-Kendall-testen vurderer ikke seriell korrelasjon eller årstidseffekter. Hvis dataene er årstidsbetingede, er Seasonal-Kendall-testen bedre egnet.</div><br><div>Hvis verktøyet brukes til å utføre enten en Mann-Kendall- eller en Seasonal-Kendall-test, blir resultatet et raster med fem bånd, som følger:</div><ul><li>Bånd 1 = Sens helling</li><li>Bånd 2 = P-verdi</li><li>Bånd 3 = Mann-Kendall-skår (S)</li><li>Bånd 4 = S-varians</li><li>Bånd 4 = S-varians</li><li>Bånd 5 = Z-skår</li></ul><div>Resultatene fra Mann-Kendall- eller Seasonal-Kendall-testen kan brukes til å bestemme hvilke piksler i den flerdimensjonale tidsserien som har en statistisk signifikant trend. Denne informasjonen kan du bruke sammen med den lineære, harmoniske eller polynome trendanalysen for å trekke ut signifikante trender i tidsserien. Du kan generere en maske som inkluderer piksler med signifikante p-verdier, bruke masken på det flerdimensjonale rasteret og bruke dette maskerte flerdimensjonale rasteret som inndata i verktøyet for å utføre lineær, harmonisk eller polynom trendanalyse.</div><br><div>Det er tre trendlinjealternativer for å tilpasse en trend til variabelverdiene langs en dimensjon: lineær, polynom og harmonisk.</div><br><div>For lineær trendanalyse er resultatet et raster med tre bånd, som følger:</div><ul><li>Bånd 1 = Helling</li><li>Bånd 2 = Avskjæring</li><li>Bånd 3 = Kvadratrot av gjennomsnitt (RMSE, Root Mean Square Error) eller feilen rundt linjen med best tilpasning</li></ul><div>For polynom trendanalyse avhenger det resulterende antallet bånd av polynomgraden. Tilpasning av andregradspolynomer produserer et raster med fire bånd, som følger:</div><ul><li>Bånd 1 = Polynom_2</li><li>Bånd 2 = Polynom_1</li><li>Bånd 3 = Polynom_0</li><li>Bånd 4 = RMSE</li></ul><div>Tilpasning av tredjegradspolynomer produserer et raster med fem bånd, som følger:</div><ul><li>Bånd 1 = Polynom_3</li><li>Bånd 2 = Polynom_2</li><li>Bånd 3 = Polynoml_1</li><li>Bånd 4 = Polynom_0</li><li>Bånd 5 = RMSE</li></ul><div>For harmonisk trendanalyse avhenger det resulterende antallet bånd av den harmoniske frekvensen. Når frekvensen er satt til 1, blir resultatet et raster med fem bånd, som følger:</div><ul><li>Bånd 1 = Helling</li><li>Bånd 2 = Avskjæring</li><li>Bånd 3 = Harmonisk_sin1</li><li>Bånd 4 = Harmonisk_cos1</li><li>Bånd 5 = RMSE</li></ul><div>Når frekvensen er satt til 2, blir resultatet et raster med sju bånd, som følger:</div><ul><li>Bånd 1 = Helling</li><li>Bånd 2 = Avskjæring</li><li>Bånd 3 = Harmonisk_sin1</li><li>Bånd 4 = Harmonisk_cos1</li><li>Bånd 5 = Harmonisk_sin2</li><li>Bånd 6 = Harmonisk_cos2</li><li>Bånd 7 = RMSE</li></ul><div>Parameteren <strong>Lengde på syklus</strong> for harmonisk trendanalyse brukes til å angi antall og lengde på sykluser du venter å se i dataene dine i løpet av en dag eller et år. Hvis du for eksempel venter at dataene skal gjennomgå to variasjonssykluser i løpet av et år, er lengden på syklusen 182,5 dager eller 0,5 år. Hvis du har temperaturdata som er innhentet hver tredje time, og det er én variasjonssyklus per dag, er lengden på syklusen én dag.</div><br><div>Parameteren <strong>Frekvens</strong> for harmonisk trendanalyse brukes til å beskrive den harmoniske modellen som skal tilpasses dataene. Hvis frekvensen settes til 1, brukes en kombinasjon av linær og førstegrads harmonisk kurve for å passe til modellen. Hvis frekvensen settes til 2, brukes en kombinasjon av linær, førstegrads harmonisk kurve og andregrads harmonisk kurve for å passe til modellen. Hvis frekvensen er 3, brukes ytterligere en tredjegrads harmonisk kurve for å modellere dataene, og så videre.</div><br><div>Statistikk som viser modellens godhet, kan genereres som valgfrie utdata. Kvadratrot av gjennomsnitt (RMSE), determinantkoeffisient og p-verdien for trendhelling kan beregnes og vises med symboler. Opprett symboler for det resulterende trendrasterlaget ved hjelp av <strong>RGB</strong>-symbologi og angi statistikken som røde, grønne og blå bånd.</div><br>",
		spectralUnmixingName: "Linear Spectral Unmixing",
		spectralUnmixingSnip: "Utfører subpikselklassifisering, og beregner andelen av ulike arealdekketyper for individuelle piksler.",
		spectralUnmixingDesc: "Funksjonen Linear Spectral Unmixing beregner andelen for individuelle piksler som inneholder flere arealdekketyper. Genererer et lag med flere bånd, der hvert lag tilsvarer andelen av hver enkelt arealdekkeklasse. Du kan for eksempel bruke den til å utføre klassifisering av arealdekke på et multispektralt bilde for å identifisere fotosyntetisk vegetasjon, bar jord og død eller ikke-fotosyntetisk vegetasjon.<div><br/>Rekkefølgen for utdatarasteret med flere bånd følger rekkefølgen for spektralprofilen som er inndata. Antall klasser kan ikke overstige antall bånd i inndatarasteret. Du kan for eksempel ikke trekke ut informasjon om flere enn åtte klasser fra et raster med åtte bånd.</div>",
		multidimensionalFilterName: "Flerdimensjonale filtre",
		interpolateRasterByDimensionFunctionName: "Interpoler raster etter størrelse",
		interpolateRasterByDimensionFunctionSnip: "Interpolerer en flerdimensjonal raster ved angitte dimensjonsverdier ved hjelp av tilstøtende stykker.",
		interpolateRasterByDimensionFunctionDesc: "<p>Med denne funksjonen kan du estimere bildepunktverdier for et udefinert dimensjonsstykke i en flerdimensjonal raster. Hvis du for eksempel har et datasett som inneholder havtemperatur på overflatenivå og 100 meter under havflaten, og du vil beregne temperaturen til 50 meter under havoverflaten, kan du bruke denne funksjonen til å få et estimat på denne dybden ved hjelp av dimensjonsdefinisjonen etter verdier.</p><p>Du kan også redusere oppløsningen for et månedlig datasett til et daglig datasett ved hjelp av dimensjonsdefinisjonen Etter intervall og angi parameterverdien Trinn som 1 og Enhetsparameterverdien som Dager.</p><p>Bruke dimensjonsdefinisjonen Etter målraster til å estimere verdien for målrasteret.</p>",
		multidimensionalFilterSnip: "Oppretter et rasterlag fra et flerdimensjonalt rasterdatasett eller et flerdimensjonalt rasterlag ved å dele inn data langs definerte variabler og dimensjoner.",
		multidimensionalFilterDesc: "Det flerdimensjonale filteret oppretter et flerdimensjonalt rasterlag ved å filtrere og trekke ut et delsett av variabler fra et flerdimensjonalt raster. La oss for eksempel si at at du har et flerdimensjonalt datasett som inneholder 30 år med månedlige nedbørsdata og du kun vil hente ut data for Januar hvert år for å se hvordan nedbøren har endret seg for denne måneden.<div><br/>Bruk parameteren Dimension Definition til å dele inn dimensjoner ved hjelp av et intervall, en verdi eller en serie med verdier. Hvis du for eksempel har 10 år med salinitetsdata for sjøvann som er samlet inn månedlig og i intervaller på 2 meter ned til 500 meters dybde, kan du bruke de ulike alternativene for dimensjonsdefinisjon til følgende scenarioer. Scenario 1: Trekk ut salinitetsdata for måneden Januar over en tiårsperiode. Velg By Values, angi StdTime for Dimension og velg January for Values. Scenario 2: Del inn salinitetsdata over et dybdeområde fra 0 til 150 meter. Velg By Ranges, angi StdZ for Dimension og velg -150 for Minimum Value og 0 for Maximum Value. Scenario 3: Trekk ut salinitetsdata for de første ti dagene i hver Januar måned over en tiårsperiode. Velg By Iteration, angi StdTime for Dimension, angi start og slutt for gjentakelsesperioden i Start of first iteration og End of first iteration, velg 1 for Step og Years for Unit.</div>",
		multidimensionalRasterName: "Multidimensional Raster",
		multidimensionalRasterSnip: "Legger til flerdimensjonale data som et flerdimensjonalt rasterlag i et kart.",
		multidimensionalRasterDesc: "Funksjonen Multidimensional Raster legger til flerdimensjonale data som et flerdimensjonalt rasterlag i et kart. Denne funksjonen er nyttig når du utfører arbeidsflyter for rasteranalyse ved hjelp av en funksjonskjede.<div><br/>Støttede flerdimensjonale rasterdatasett inkluderer netCDF, GRIB, HDF og Esris CRF. Det er også støtte for flerdimensjonale mosaikkdatasett.</div>",
		optimalPathAsRasterName: "Optimal Path As Raster",
		optimalPathAsRasterSnip: "Beregner minste kostnadsruten fra en kilde til en destinasjon.",
		optimalPathAsRasterDesc: "Denne globale funksjonen produserer et utdataraster som registrerer den optimale ruten eller rutene fra valgte lokasjoner til nærmeste kildecelle som er definert innenfor den akkumulerte kostnadsoverflaten, når det gjelder kostnadsavstand.<div><br/>Én eller flere av de vektede kostnadsfunksjonene (Distance Accumulation eller Distance Allocation) må vanligvis kjøres før funksjonen Optimal Path As Raster for å opprette inndatarastre for avstandsakkumulering og tilbakeretning. Disse er obligatoriske inndatarasterlag for Optimal Path-funksjonen. Verdiene på den resulterende optimale ruten representerer antallet ruter ved en gitt lokasjon. I mange tilfeller følger ruten samme vei fra en kilde og går så i forskjellige retninger til ulike destinasjoner. Verdien én indikerer for eksempel at det bare er én optimal rute ved en gitt lokasjon, mens verdien fem betyr at det ved denne lokasjonen er fem optimale ruter som går gjennom denne cellen i studieområdet.<div><br/>Destinasjonsinndataene må være et rasterlag. Settet med destinasjonsceller består av alle cellene med gyldige verdier i inndatarasteret. Celler med NoData-verdier inkluderes ikke i settet. Verdien null regnes som en gyldig destinasjon. Verktøyene for uttrekking kan brukes til å opprette et destinasjonsraster. Hvis du har destinasjons- eller kildegeoobjekter, kan du konvertere dem til raster ved hjelp av funksjonen Rasterize Features. Bruk rasteret for avstandsakkumulering eller tilbakeretning som inndataraster i funksjonen for rastrering. Dette sikrer at geoobjektet rastreres ved hjelp av samme cellestørrelse, utstrekning og romlige referanse som de andre rastrene som går inn i funksjonen Optimal Path As Raster. Funksjonen Optimal Path As Raster kan også brukes til å avlede ruten med minste motstand nedover i en digital høydemodell (DEM). I dette tilfellet bruker du DEM for inndatarasteret for avstandsakkumulering og Flow Direction-funksjonen for rasteret for tilbakeretning.</div>",
		trendName: "Predict Using Trend",
		trendSnip: "Beregner et prognosebasert flerdimensjonalt rasterlag ved hjelp av det resulterende trendrasteret fra Generate Trend-funksjonen eller geoprosesseringsverktøyet Generate Trend Raster.",
		trendDesc: "Funksjonen Predict Using Trend beregner et forventet flerdimensjonalt rasterlag ved hjelp av det resulterende trendrasteret fra Generate Trend-funksjonen eller geoprosesseringsverktøyet Generate Trend Raster.",
		rasterCollectionName: "Process Raster Collection",
		rasterCollectionSnip: "Behandler hver inndeling i et flerdimensjonalt raster eller hvert element i et mosaikkraster. Denne funksjonen kan også aggregere flere inndelinger til én enkelt inndeling.",
		rasterCollectionDesc: "Funksjonen Process Raster Collection behandler hver inndeling i et flerdimensjonalt raster eller hvert element i et mosaikkraster. Denne funksjonen kan også aggregere flere inndelinger til én enkelt inndeling.<div><br/>Denne funksjonen behandler hver inndeling i et flerdimensjonalt raster eller mosaikkraster ved hjelp av en rasterfunksjonsmal. Funksjonen støtter følgende alternativer: 1. Angi en rasterfunksjonsmal for elementfunksjonen. Hvis du for eksempel har et mosaikkdatasett som inneholder 20 år med Landsat-bilder, og du vil beregne NDVI for hver scene i tidsserien. Angi en rasterfunksjonsmal som inneholder NDVI-rasterfunksjonen, for elementfunksjonen. 2. Angi en rasterfunksjonsmal for aggregeringsfunksjonen. Hvis du for eksempel har et flerdimensjonalt raster som inneholder 10 år med daglige temperaturdata og du vil beregne maksimumstemperaturen for hvert år. I aggregeringsfunksjonen angir du en rasterfunksjonsmal som inneholder Cell Statistics-funksjonen og har Maximum angitt for Operation. Under Aggregation Definition velger du StdTime for Dimension, velger Interval Keyword for Type og velger Yearly for Keyword Interval. Vær oppmerksom på at hvis mosaikkdatasettet som er inndata ikke er flerdimensjonalt, vil ikke funksjonen for aggregering overholde aggregeringsdefinisjonen. Funksjonen for aggregering vil aggregere alle elementene eller hver gruppe til én hvis de er definert i malen for aggregeringsfunksjonen. Hvis du vil ha mer informasjon om bruk av grupper i mosaikkdatasett, se Bruke mosaikkdatasettelementer i rasterfunksjonsmaler. 3. Angi en rasterfunksjonsmal for behandlingsfunksjonen. Funksjonen eller funksjonskjeden i denne malen brukes til å vise det nye behandlede rasteret. Du kan for eksempel angi en rasterfunksjonsmal som inneholder Colormap-funksjonen, for å endre hvordan det behandlede rasterlaget vises. Vær oppmerksom på at hvis inndata er et flerdimensjonalt raster, brukes behandlingsfunksjonen på gjeldende inndeling som vises. Hvis inndataene er et mosaikklag eller mosaikkdatasett, brukes behandlingsfunksjonen på mosaikkrasteret ved hjelp av First-metoden for å løse overlappinger. 3. Spesifiser maler for en hvilken som helst kombinasjon av de tre funksjonene. Hvis du for eksempel har et mosaikkdatasett som inneholder tidsserie Landsat-bilder og du vil generere et sammensatt bilde av maksimum NDVI. For elementfunksjonen angir du en rasterfunksjonsmal som inneholder NDVI-rasterfunksjonen. For aggregeringsfunksjonen angir du en rasterfunksjonsmal som inneholder Cell Statistics-funksjonen og har Maximum angitt for Operation. For behandlingsfunksjonen angir du en rasterfunksjonsmal som inneholder Colormap-funksjonen. Legg merke til at rekkefølgen for funksjonsbehandling følger rekkefølgene i inndataparameterne. For eksempel behandles elementfunksjonen først.</div>",
		randomName: "Random",
		randomSnip: "Oppretter et raster med tilfeldige pikselverdier hentet fra en pseudotilfeldig fordeling. Det er støtte for flere fordelinger og generatorer for tilfeldige tall.",
		randomDesc: "Random-funksjonen oppretter et raster med tilfeldige pikselverdier som kan brukes i rasterfunksjonsmaler eller mosaikkdatasett.<div><br/>Mens mange funksjoner fungerer på ett eller flere inndataraster, krever ikke Random-funksjonen et inndataraster. Det betyr at den oppfører seg mer som et rasterdatasett enn en funksjon, og du må derfor være ekstra forsiktig når du legger den til eller fjerner den fra funksjonskjeden.</div>",
		shrinkName: "Shrink",
		shrinkSnip: "Minsker de valgte sonene med et angitt antall celler ved å erstatte dem med verdien for celle som forekommer oftest i nabolaget.",
		shrinkDesc: "Med den globale Shrink-funksjonen kan du generalisere, eller forenkle, rastrene ved å gjøre bestemte soner mindre. Du kan også bestemme omfanget av generaliseringen.<div><br/>Sonene du velger minskes, eller reduseres i størrelse, ved at celler fra omkringliggende soner utvides inn i dem. De valgte soneverdiene kan vises som soner i forgrunnen, mens de andre verdiene beholdes som soner i bakgrunnen. Cellene i sonene i forgrunnen kan erstattes av celler i sonene i bakgrunnen. Smale øyer inni en sone, som kan anses å dele grenser med sonen, kan også erstattes.<div><br/>Omfanget av generaliseringen kan styres med parameteren Antall celler. Denne verdien er som standard 1, noe som betyr at de valgte sonene reduseres med mengden tilsvarende én celles størrelse. Du kan angi en større verdi for denne parameteren for å øke graden av generalisering. Dette blir som å kjøre verktøyet like mange ganger som angitt tall, med resultatene av forrige kjøring som inndata i etterfølgende gjentakelse.</div>",
		trendToRGBName: "Trend To RGB",
		trendToRGBSnip: "Konverterer et trendraster til et raster med tre bånd (rød, grønn og blå).",
		trendToRGBDesc: "Funksjonen Trend To RGB konverterer et trendraster til et raster med tre bånd (rød, grønn og blå). Trendrasteret genereres fra Generate Trend Raster-funksjonen eller CCDC Analysis-rasterfunksjonen.<div><br/>Denne funksjonen er nyttig når du vil visualisere modellkoeffisientdata fra Generate Trend-funksjonen eller CCDC Analysis-funksjonen. Begge funksjonene estimerer trender i pikselverdier som endrer seg, men resultatene av funksjonen er vanskelige å tolke direkte.<div><br/>Som for mange rasterfunksjoner må du kanskje bruke Justering av dynamisk områder for å få en bedre visning av resultatet av denne funksjonen.</div>",
		landTrendrName: "LandTrendr-analyse",
		landTrendrSnip: "Evaluerer endringer i pikselverdier over tid ved hjelp av den Landsat-baserte metoden for registrering av trender i forstyrrelse og gjenoppretting (LandTrendr) og genererer et endringsanalyseraster som inneholder modellresultatene.",
		landTrendrDesc: "Denne rasterfunksjonen kan bare brukes som inndata for rasterfunksjonen Registrer endring ved hjelp av endringanalyse. For å generere rasterutdata må LandTrendr-analysefunksjonen kobles til Registrer endring ved hjelp av endringanalyse-funksjonen i en rasterfunksjonsmal og bruke malen som inndata i geoprosesseringsverktøyet Generer raster fra rasterfunksjon. Resultatet blir et raster som inneholder informasjon om tidspunktet for endring av pikselverdier.<div><br>Formålet med denne rasterfunksjonen er å påvise endringer i et observert geoobjekt, så det ideelle flerdimensjonelle bildematerialet som brukes som inndata, bør vise en konsekvent observasjon over tid og bør ikke inneholde atmosfærisk- eller sensorinterferens, skyer eller skyskygge. Beste praksis er å bruke data som er blitt normaliserte og kan maskeres ved hjelp av et kvalitetskontrollbånd, for eksempel Landsat Collection 1 Surface Reflectance-produkter med skymaske.<div><br>Funksjonen analyserer ett bilde per år, og antall årlige sektorer må være lik eller større enn verdien som er angitt i parameteren <strong>Minimumsantall observasjoner</strong>. Det anbefales å bruke data fra minst seks år.<div><br>Hvis du har månedlige, ukentlige eller daglige data, anbefaler vi at du velger flere bilder fra hvert år (helst fra samme årstid), fjerner skyer og skyskygge og slår bildene sammen slik at det genereres ett enkelt bilde som gjengir observasjonen på en god måte. Hvis månedlige, ukentlige eller daglige data benyttes som det flerdimensjonale inndatarasteret, identifiserer funksjonen én sektor for analyse basert på datoen nærmest den som er angitt i parameteren <strong>Festingsdato</strong>.<div><br>Et geoobjekt i et landskap trenger ofte tid for å gjenopprettes etter en ikke-permanent endring som en skogbrann eller et insektangrep. Angi parameteren Terskel for gjenoppretting for å styre gjenopprettingstakten som gjenkjennes av modellen. Et gitt segment kan ikke ha en gjenopprettingstakt som er raskere enn 1/gjenopprettingsterskel.<div><br>Gjenopprettingen etter endring av et landskap kan gå i positiv eller negativ retning. Når for eksempel et landskap opplever tap av skog, viser en tidsserie med indeksverdier for vegetasjon et fall i indeksverdiene, og gjenopprettingen viser en gradvis økning i vegetasjonens indeksverdier, eller en positiv gjenopprettingstrend. Angi retningen på gjenopprettingstrenden med parameteren <strong>Gjenoppretting har stigende trend</strong>.",
		aggregateMultidimensionalName: "Aggreger flerdimensjonalt",
		aggregateMultidimensionalSnip: "Kombinerer eksisterende flerdimensjonale rastervariabeldata langs en dimensjon.",
		aggregateMultidimensionalDesc: "Funksjonen Aggreger flerdimensjonalt oppretter et flerdimensjonalt rasterlag ved å slå sammen eksisterende flerdimensjonale rastervariabeldata langs en dimensjon.<div><br>Bruk parameteren <strong>Dimensjonsdefinisjon</strong> til først å filtrere inndataene du vil aggregere. Hvis du for eksempel har månedlige data for 30 år, men bare vil opprette et aggregert lag for de første 15 årene, kan du bruke parameteren <strong>Dimensjonsdefinisjon</strong> til å angi hvilke år som skal inkluderes i analysen.<div><br><ul><li>Ekstraher salinitetsdata for januar måned over en 10-årsperiode. Velg <strong>Etter verdier</strong>, sett <strong>Dimensjon</strong> til <strong>StdTime</strong>, og sett <strong>Verdier</strong> til <strong>januar</strong>.</li><li>Del inn salinitetsdataene i sektorer over et dybdeområde fra 0 til 150 meter. Velg <strong>Etter områder</strong>, sett <strong>Dimensjon</strong> til <strong>StdZ</strong>, og sett <strong>Minimumsverdi</strong> til <strong>-150</strong> og <strong>Maksimumsverdi</strong> til <strong>0</strong>.</li><li>Ekstraher salinitetsdata for de første 10 dagene i januar hvert år over en 10-årsperiode. Velg <strong>Etter gjentakelse</strong>, sett <strong>Dimensjon</strong> til <strong>StdTime</strong>, sett <strong>Start for første gjentakelse</strong> og <strong>Slutt for første gjentakelse</strong> til tilsvarende start og slutt på gjentakelsesperioden, sett <strong>Trinn</strong> til <strong>1</strong>, og sett <strong>Enhet</strong> til <strong>År</strong>.</li></ul><div><br>Bruk parameteren <strong>Aggregeringsdefinisjon</strong> til å velge dimensjonen som skal vurderes, og velg aggregeringsintervallet ved å bruke et nøkkelord, en verdi eller et verdiområde. Hvis du for eksempel har 30 år med data om havets overflatetemperatur, innhentet daglig og for hver 5. meter ned til 100 meters dyp, kan du bruke de forskjellie intervallalternativene på følgende scenarioer:<div><br><ul><li>Aggreger daglige temperaturdata og månedlige data, der resultatet blir et flerdimensjonalt raster med 12 tidssektorer, og hver sektor er aggregatet av hver måned over samtlige år. Velg <strong>Nøkkelordintervall</strong> og sett nøkkelordet til <strong>Gjentas hver måned</strong>.</li><li>Aggreger daglige temperaturdata til månedlige data, der resultatet blir et flerdimensjonalt raster med 360 sektorer, eller 12 tidssektorer per år (30 år x 12 måneder = 360 sektorer). Velg <strong>Nøkkelordintervall</strong>, og sett nøkkelordet til <strong>Månedlig</strong>.</li><li>Aggreger månedlige temperaturdata i 4-måneders intervaller. Velg <strong>Intervallverdi</strong>, sett <strong>Verdiintervall</strong> til 4, og sett <strong>Enhet</strong> til <strong>Måneder</strong>.</li><li>Aggreger temperaturdata fra 0 til 25 meter, så fra 25 til 50 meter og deretter fra 50 til 100 meter. Velg <strong>Intervallområder</strong>, og angi minimums- og maksimumsdybder som <strong>0 25; 25 50; 50 100</strong>.</li></ul>",
		mergeRastersName: "Slå sammen rastere",
		mergeRastersSnip: "Kombinerer flere rasterdatasett romlig, eller på tvers av variabler og dimensjoner.",
		mergeRastersDesc: "Denne funksjonen oppretter et sammenslått raster fra en liste over rastere. Hvis du for eksempel har et mosaikkdatasett som inneholder 30 års månedlige nedbørsdata, og et annet datasett med 10 års månedlige temperaturdata, kan du slå dem sammen til et flerdimensjonalt raster med begge variablene. <div><br>Hvis de flerdimenasjonale inndatarasterne inneholder forskjellige variabler, vil det resulterende flerdimensjonale rasteret inneholde samtlige variabler. <div><br>Hvis de flerdimenasjonale inndatarasterne inneholder forskjellige dimensjoner eller dimensjonsverdier, vil det resulterende flerdimensjonale rasteret inneholde samtlige dimensjoner og dimensjonsverdier. <div><br>Hvis de flerdimenasjonale inndatarasterne inneholder de samme dimensjonene og variablene, men har ulike romlige utstrekninger, vil det resulterende flerdimensjonale rasteret inneholde variablene og dimensjonene på tvers av de sammenslåtte romlige utstrekningene.<div><br>Denne funksjonen kan også brukes når du har flere rastere som du vil behandle som ett element, for eksempel for å beregne samme statistikk for alle, eller når du balanserer farger og vil slippe å balansere fargene i hvert bilde for seg. Dette er nyttig når du arbeider med bilder som er lagret som separate fliser på grunn av begrensninger på filstørrelse. Med denne metoden blir flisene behandlet som deler av det samme bildet.",
		boundaryCleanName: "Grenseutjevning",
		boundaryCleanSnip: "Jevner ut grensen mellom soner.",
		boundaryCleanDesc: "<p>Funksjonen generaliserer eller forenkler rastere ved å jevne ut grensene mellom soner. Funksjonen har alternativer for å styre hvordan cellene i sonene påvirker utjevningen og hvilken grad av utjevning som skal brukes. Hver enkelt inndatacelle evalueres ved å bruke de åtte nærmeste naboene.</p><p>Utjevningsprosessen sorterer først nabocellene etter en bestemt prioritet. Prioriteten bestemmer hvilken sone fra nabocellene som kan erstatte verdien av behandlingscellen i resultatet.</p><p>Prioriteten kan baseres på enten verdien av sonene eller størrelsen på sonene. Parameteren <strong>Sorteringstype</strong> bestemmer hvilken sorteringstype som skal brukes. </p><p>Standardinnstillingen <strong>Ikke sorter</strong> vurderer prioriteten ut fra verdien av sonene. Celler fra soner med høyere verdier vil ha en høyere prioritet for å utvides inn i soner med lavere verdier.</p><p>Sonenes størrelse eller totale areal kan brukes til å sortere prioriteten. Med innstillingen <strong>Synkende</strong> sorteres sonene etter størrelse i synkende rekkefølge. Soner med større totalt areal vil ha prioritet til å utvides inn i soner med mindre areal. Med innstillingen <strong>Stigende</strong> skjer det motsatte: Soner med mindre totalt areal vil ha prioritet til å utvides inn i soner med større totalt areal.</p><p>Graden av utjevning styres av parameteren <strong>Kjør utvidelse og krymping to ganger</strong>, som bestemmer antall ganger utvidelses- og krympeprosessen skal utføres.</p><p>Når innstillingen ikke er avmerket, utføres utvidelses- og krympeprosessen én gang. Når innstillingen er avmerket, utføres utvidelses- og krympeprosessen to ganger og resulterer i en ytterligere grad av utjevning av sonegrensene.</p><p>Hvis verdiene i alle de åtte nabocellene er de samme som i behandlingscellen, beholder den resulterende cellen verdien til inndatacellen.</p>",
		predictUsingRegressionName: "Forutsi bruk av regresjon",
		predictUsingRegressionSnip: "Beregner en forutsagt raster basert på rasterdatainndata og en regresjonsmodell. Regresjonsmodellen er utdata fra <strong>Train Random Trees-regresjonsmodellens</strong> rastergeobehandlingsverktøy.",
		predictUsingRegressionDesc: "<p>Regresjonsmodellen er definert i en Esri-regresjonsdefinisjonsfil (.ecd). Den inneholder all informasjon for et bestemt datasett eller et sett med datasett, og regresjonsmodellen, og genereres av <strong>Train Random Trees-regresjonsmodellens</strong> rastergeobehandlingsverktøy.</p><p>Inndataene kan være et enkelt bånd, et multibånd eller et flerdimensjonalt raster, eller en liste over disse typene. Typene inndatarastere må være samme type raster som er opplært av regresjonsmodellen.</p><ul><li>Når inndata er et multibåndraster, blir hvert bånd behandlet som en prediktorvariabel. Båndene må være i samme rekkefølge som multibåndsinndataene for regresjonsmodellens opplæringsverktøy.</li><li>Når inndata er et flerdimensjonalt raster, blir hver variabel behandlet som en prediktorvariabel, og variabelen må være enkeltbånd og ha en tidsdimensjon. Variabelrekkefølgen og -navnene må være de samme som inndataene når regresjonsmodellen ble lært opp. Utdataene er et flerdimensjonalt raster.</li><li>Inndataene kan være en liste med elementer. Antall elementer og rekkefølgen på elementene må samsvare med indataene når regresjonsmodellen ble lært opp.</li></ul>",
		dimensionalMovingStatisticsName: "Dimensjonal bevegelsesstatistikk",
		dimensionalMovingStatisticsSnip: "Beregner statistikk over et vindu i bevegelse på flerdimensjonale data langs en angitt dimensjon.",
		dimensionalMovingStatisticsDesc: "<p>Funksjonen Dimensjonsflyttingsstatistikk beregner ulike statistikker i et forhåndsdefinert vindu for alle dimensjonsverdier langs en dimensjon. Denne funksjonen tar et flerdimensjonalt rasterlag som inndata og oppretter et flerdimensjonalt rasterlag som utdata som har samme dimensjonale størrelse som inndatalaget.</p><p>Du kan angi en dimensjon som dimensjonsverdier vurderes for under beregningen. Som standard beregnes den langs den første ikke-romlige dimensjonen. Du kan også angi en vindusstørrelse ved å angi parameterne Bakovervindu og Fremovervindu.</p><p>Når statistikktypen er satt til persentil, blir parameterne persentilverdi og persentil interpoleringstype tilgjengelige. Du kan bruke disse parameterne til å angi persentilen som skal beregnes, og velge interpoleringstypen som skal brukes. Når statistikktypen er satt til sirkulært gjennomsnitt, blir parameteren sirkulær flytverdi tilgjengelig. Den sirkulære flytverdien brukes til å konvertere en lineær verdi til området for et gitt sirkulært gjennomsnitt.</p>",
		terrainFlattenFunctionName: "Utflating av terreng",
		terrainFlattenFunctionSnip: "Korrigerer inndata fra radar med syntetisk blenderåpning (SAR-data) for radiometriske fortegninger som skyldes topografi.",
		terrainFlattenFunctionDesc: "<p>Rasterfunksjonen Utflating av terreng korrigerer inndataene fra radarer med syntetisk blenderåpning (SAR-data) for radiometriske fortegninger som skyldes topgrafi.</p><p>Inndataene må først kalibreres til beta null. Verktøyet Bruk radiometrisk kalibrering brukes til å kalibrere radardata til beta null.</p><p>Hvis DEM-inndataene ikke omfatter hele SAR-datasettet, gir verktøyet følgende resultater: NoData-verdier for pikslene som ligger utenfor DEM-utstrekningen for gamma null, sigma null, spredningsområde og utdata for geometriske fortegninger. For maskeutdataene for geometrisk fortegning gir verktøyet som resultat ubestemte verdier for piksler utenfor DEM-utstrekningen.</p><p>Inndata-DEM må være i det geografiske koordinatsystemet WGS 1984 (EPSG:4326).</p>",
		createColorCompositeFunctionName: "Opprett fargekompositt",
		createColorCompositeFunctionSnip: "Oppretter et raster med tre bånd fra et flerbåndsrasterdatasett der hvert bånd kan bruke en algebraisk utregning basert på båndets algebra.",
		createColorCompositeFunctionDesc: "<p>Rasterfunksjonen Opprett fargekompositt oppretter et raster med tre bånd fra et flerbåndsrasterdatasett der hvert bånd kan bruke en algebraisk utregning basert på båndets algebra.</p><p>Når du definerer en båndaritmetisk algoritme, kan du angi en algebraisk formel på en enkelt linje for hvert uttrykk, for å skape et flerbåndsresultat. Operatorene som støttes, er enhetlige, pluss (+), minus (-), multiplikasjon (*), og divisjon (/).</p><p>Når en bånd-ID skal brukes i et uttrykk, må båndet identifiseres med prefikset B eller b ved båndnummeret.</p><p>En alminnelig båndkombinasjon som brukes for radar med syntetisk blenderåpning (SAR) i lineære enheter, er VV for rødt, VH for grønt og VV/VH for blått. Hvis inndataene er i desibel, skal båndkombinasjonen være VV for rødt, VH for grønt og VV-VH for blått.</p>",
		surfaceParametersName: "Overflateparametere",
		surfaceParametersSnip: "Fastsetter parametere for en rasteroverflate som hellingsretning, hellingsgrad og flere typer kurvatur ved hjelp av geodetiske metoder.",
		surfaceParametersDesc: "<p>Funksjonen Overflateparametre fastsetter parametere for en rasteroverflate som hellingsretning, hellingsgrad og flere typer kurvatur ved hjelp av geodetiske metoder.</p><p>Denne funksjonen kan brukes til følgende:</p><ul><li>Beregne hellingsretning og hellingsgrad ved hjelp av geodetiske metoder.</li><li>Beregne ulike typer kurvatur fra en innlagt overflateraster, for eksempel <strong>Tangenitell (normal kontur) kurvatur</strong> som karakteriserer topografisk konvergens og divergens av flyt over overflaten.</li></ul>",
		leastCostCorridorName: "Minst kostnad-korridor",
		leastCostCorridorSnip: "Beregner summen for to raster for kumulativ kostnadsavstand med mulighet til å bruke en terskel basert på prosent eller kumulativ kostnad.",
		leastCostCorridorDesc: "<p>Inndatarastrene skal være avstandsakkumulering og utdata for raster for motsatt retning fra funksjonen <strong>Avstandsakkumulering</strong> eller <strong>Avstandsallokering</strong> . Disse skal være basert på kostnadsavstand, og de samme parameterinnstillingene skal brukes til oppretting av lagene for hver kilde. Det skal ikke brukes parametere som er avhengige av retningsangivelse (horisontal faktor, vertikal faktor og reiseretning), til å opprette disse rasterene.</p><p>Verdiene i resulterende korridorraster er summen av den kumulative kostanden for å nå en gitt lokasjon med de samme enhetene som inndatarastrene med kumulativ kostnadsavstand.</p><p>Hvis en angitt <strong>terskel</strong>verdi er større enn maksimum kumulativ kostnad når de to rastrene for avstandsakkumulering er summert, vil resulterende korridorraster dekke det samme området som de kumulative inndatarastrene.</p><p>Hvis en angitt terskelverdi er mindre enn verdien i korridorrasteret, returneres en melding med en advarsel og utdatarasteret vil være tomt.</p><p>Resulterende korridorraster kan inneholde celler med litt større kumulative kostander enn terskelverdien. Dette er fra rastrene for motsatt retning som bruker celler tilordnet litt høyere kostnader enn terskelen for å knytte frakoblede celler til korridoren.</p>",
		geometricMedianName: "Geometrisk median",
		geometricMedianSnip: "Funksjonen Geometrisk median beregner den geometriske medianen på tvers av piksler i en tidsserie av flerbåndsbilder.",
		geometricMedianDesc: "<p>Funksjonen reduserer støy og avvik i tidsserier av bilder ved beregne en geometrisk medianpiksel for hver pikselmatrise på tvers av bildestakken. Algoritmen opprettholder de spektrale relasjonene mellom bånd i pikselspektrene slik at utdataene kan brukes i analyser, for eksempel vegetasjonsindekser.</p><p>Skyer og skygger skal maskeres ved hjelp av QA-bånd for datasettet før denne funksjonen brukes.</p><p>Hvis inndatabildet er flyttall, for eksempel overflaterefleks med verdier mellom 0 og 1, vil en epsilonverdi på 0,001 gi kvalitetsresultater.</p>"
	},
	rfxArgs: {
		rasterName: "Raster",
		colorSchemeTypeName: "Fargevalgtype",
		colormapName: "Fargekart",
		colormapNameName: "Navn på fargekart",
		colorRampName: "Fargepalett",
		contrastOffsetName: "Kontrastforskyvning",
		brightnessOffsetName: "Lysstyrkeforskyvning",
		methodName: "Metode",
		bandNamesName: "Båndnavn",
		bandWavelengthsName: "Båndbølgelengder",
		bandIdsName: "Bånd-ID-er",
		missingBandActionName: "Båndhandling mangler",
		conversionParametersName: "Konverteringsparametere",
		hillshadeTypeName: "Terrengskyggetype",
		azimuthName: "Asimut",
		altitudeName: "Høyde",
		slopeTypeName: "Skalering",
		zFactorName: "z-faktor",
		PSPowerName: "Pikselstørrelseseffekt",
		PSZFactorName: "Pikselstørrelsesfaktor",
		removeEdgeEffectName: "Deaktiver standard kantpikselinterpolasjon",
		fromUnitName: "Fra enhet",
		toUnitName: "Til enhet",
		rasterTypeName: "Type",
		minName: "Minimum for utdata",
		maxName: "Maksimum for utdata",
		minPercentName: "Minimum prosentklipp",
		maxPercentName: "Maksimum prosentklipp",
		numberOfStandardDeviationName: "Antall standardavvik",
		sigmoidStrengthLevelName: "Sigmoid-styrkenivå",
		estimateStatsHistogramName: "Beregn statistikk",
		DRAName: "Justering av dynamisk område",
		statisticsName: "Statistikk",
		histogramsName: "Histogrammer",
		statisticsHistogramName: "Definer statistikk og histogram",
		computeGammaName: "Automatisk gamma",
		useGammaName: "Bruk gamma",
		gammaName: "Gamma",
		inputNamesName: "Navn",
		expressionName: "Uttrykk",
		cellsizeTypeName: "Cellestørrelsestype",
		extentTypeName: "Utstrekningstype",
		classifierDefinitionFileName: "Angi definisjonsfil",
		raster1Name: "Raster1",
		raster2Name: "Raster2",
		raster3Name: "Raster3",
		trueRasterName: "Sant raster",
		falseRasterName: "Usant raster",
		noDataInterpretationName: "NoData-tolking",
		noDataValuesName: "NoData-verdier",
		includedRangesName: "Inkluderte områder",
		curvatureTypeName: "Kurvaturtype",
		rastersName: "Rastere",
		attributeTableName: "Tabell",
		attributeTableTypeName: "Tabelltype",
		rowsName: "Antall rader",
		columnsName: "Antall kolonner",
		kernelName: "Kjerne",
		mirrorEdgesName: "Speilkanter",
		influencesName: "Påvirkninger",
		fieldsName: "Felter",
		remapsName: "Tilordne tabell på nytt",
		evalFromName: "Evalueringsskala fra",
		evalToName: "Evalueringsskala til",
		weightsName: "Vekting",
		DEMName: "DEM",
		shortRangeIDWRadiusName: "IDW-radius med kort rekkevidde",
		maxVoidWidthName: "Største hullstørrelse",
		sigmaGaussianName: "Adaptiv utjevning",
		contourTypeName: "Høydekurvetype",
		zBaseName: "z-base",
		numberOfContoursName: "Antall høydekurver",
		contourIntervalName: "Høydekurveintervall",
		nthContourLineInBoldName: "Nth ContourLine i fet",
		featureClassName: "Inndatageoobjekter",
		classIndexFieldName: "Felt",
		resolveOverlapMethodName: "Løs overlappingsmetode",
		resamplingTypeName: "Resamplingstype",
		inputCellsizeName: "Inndatacellestørrelse",
		outputCellsizeName: "Utdatacellestørrelse",
		pointFeatureClassName: "Seed-punkt",
		maxGrowthRadiusFieldName: "Felt for maks. vekstradius",
		similarityThresholdFieldName: "Likhet terskelfelt",
		fillValueFieldName: "Felt for utfyllingsverdi",
		spectralDetailName: "Spektraldetalj [1..20]",
		spatialDetailName: "Romlig detalj [1..20]",
		minNumPixelsPerSegmentName: "Minimum segmentstørrelse i piksler",
		boundariesOnlyName: "Kun segmentgrenser",
		statisticsTypeName: "Statistikktype",
		fillNoDataOnlyName: "Fyll bare NoData-piksler",
		inputDataTypeName: "Inndatatype",
		angleReferenceSystemName: "Vinkelreferansesystem",
		outputDataTypeName: "Utdatatype",
		inputSamplePointFeatureClassName: "Inndataeksempler",
		valueFieldName: "Verdifelt",
		rasterInfoName: "Rasterinfo",
		interpolationMethodName: "Interpoleringsmetode",
		radiusName: "Radius",
		radianceGainValuesName: "Strålingsforsterking",
		radianceBiasValuesName: "Strålingstillegg",
		reflectedGainValuesName: "Refleksjonsfaktorøkning",
		reflectedBiasValuesName: "Refleksjonsfaktoravvik",
		sunElevationName: "Solhøyde (grader)",
		albedoName: "Albedo",
		scaleFactorName: "Målestokkfaktor",
		offsetName: "Forskyvning",
		thresholdTypeName: "Terskeltype",
		thresholdsName: "Terskler",
		undefinedClassName: "Udefinert klasse",
		minValueName: "Min",
		maxValueName: "Maks",
		operationName: "Operasjon",
		clippingTypeName: "Klippemåte",
		clippingGeometryName: "Geometri/raster for utklipp",
		extentName: "Utdataomfang",
		useInputFeatureGeometryName: "Bruk inndatageoobjekter for klippegeometri",
		remapDefinitionTypeName: "Tilordne definisjonstype på nytt",
		inputRangeName: "Inndataområder",
		outputValuesName: "Utdataverdier",
		noDataRangeName: "NoData-områder",
		inputFieldName: "Inndatafelt",
		outputFieldName: "Utdatafelt",
		inputMaxFieldName: "Inndatamaksimumsfelt (valgfritt)",
		remapTableTypeName: "Tilordne tabelltype på nytt",
		allowUnmatchedName: "Tillat ikke-samsvarende pikselverdier",
		changeMissingValuesToNoDataName: "Endre manglende verdier til NoData",
		visibleBandIDName: "Synlig bånd-ID",
		infraredBandIDName: "Infrarød bånd-ID",
		scientificOutputName: "Vitenskapelige utdata",
		bandIndexesName: "Båndindekser",
		constantName: "Konstant",
		weightName: "Vekt",
		minimumName: "Minimum",
		maximumName: "Maksimum",
		sourceDataName: "Kilderaster",
		sourceFieldName: "Kildefelt",
		costRasterName: "Kostnadsraster",
		maxDistanceName: "Maksimumsavstand",
		valueRasterName: "Verdiraster",
		costMultiplierName: "Multiplikator som skal brukes på kostnader",
		startCostName: "Startkostnad",
		accumCostResistanceRateName: "Kumulativ kostnadsmotstandsgrad",
		capacityName: "Kapasitet",
		travelDirectionName: "Reiseretning",
		cellSizeName: "Cellestørrelse",
		populationFieldName: "Befolkningsfelt",
		areaUnitsName: "Arealenheter",
		outputValueTypeName: "Utdatacelleverdier",
		barriersName: "Inndatasperrer",
		destinationDataName: "Målraster",
		destinationFieldName: "Målfelt",
		pathTypeName: "Reiserutetype",
		observerFeaturesName: "Observasjonsgeoobjekter",
		analysisMethodName: "Analysemetode",
		analysisTypeName: "Analysetype",
		verticalErrorName: "Vertikal feil",
		refractivityCoefficientName: "Brytningskoeffisient",
		surfaceOffsetName: "Overflateforskyvning",
		observerElevationName: "Observatørhøyde",
		observerOffsetName: "Observatørforskyvning",
		innerRadiusName: "Indre radius",
		innerRadiusIs3DDistanceName: "Indre radius er 3D-avstand",
		outerRadiusName: "Ytre radius",
		outerRadiusIs3DDistanceName: "Ytre radius er 3D-avstand",
		horizontalStartAngleName: "Horisontal startvinkel",
		horizontalEndAngleName: "Horisontal sluttvinkel",
		verticalUpperAngleName: "Vertikal øvre vinkel",
		verticalLowerAngleName: "Vertikal nedre vinkel",
		zoneDataName: "Soneraster",
		zoneFieldName: "Sonefelt",
		ignoreNoDataName: "Ignorer NoData i beregninger",
		temperatureRasterName: "Temperaturraster",
		inTemperatureUnitsName: "Temperaturenheter",
		outHeatIndexTemperatureUnitsName: "Varmeindeksenheter",
		relativeHumidityRasterName: "Relativ fuktighetsraster",
		outWindChillTemperatureUnitsName: "Vindfaktorenheter",
		windSpeedRasterName: "Vindhastighetsraster",
		inWindSpeedUnitsName: "Vindhastighetenheter",
		valueName: "Verdi",
		propertyName: "Egenskapsnavn",
		jsonName: "Metadata JSON",
		zoneTableName: "Soneattributtabell",
		attributeFieldNames: "Attributtfeltnavn",
		backgroundName: "Bakgrunnsverdi",
		whereClauseName: "Where-setning",
		minimumValueFieldName: "Navn på minimumsverdifelt",
		maximumValueFieldName: "Navn på maksimumsverdifelt",
		outValueFieldName: "Navn på utdataverdifelt",
		defaultValueName: "Standard utdataverdi",
		conversionMatrixName: "Konverteringsmatrise",
		IsPseudoColorOutputName: "Er uekte fargeutdata",
		unmappedAsRandomColorName: "Tildel farger tilfeldig til piksler som ikke er tilordnet",
		distanceMethodName: "Avstandsmetode",
		flowDirRasterName: "Strømningsretningsraster",
		pourPointName: "Utløpspunktraster",
		pourPointFieldName: "Utløpspunktfelt",
		constantZName: "Konstant Z",
		zOffsetName: "Z-forskyvning",
		geoIdName: "Geoide",
		calibrationTypeName: "Kalibreringstype",
		filterTypeName: "Filtertype",
		filterSizeName: "Filterstørrelse",
		noiseModelName: "Støymodell",
		noiseVarianceName: "Støyvarians",
		additiveNoiseMeanName: "Middelverdi for additiv støy",
		multiplicativeNoiseMeanName: "Middelverdi for multiplikativ for støy",
		numberofLooksName: "Antall utseender",
		dampingFactorName: "Dempingsfaktor",
		maskRasterName: "Maskeraster",
		nibbleValuesName: "Bruk NoData-verdier hvis de er nærmeste nabo",
		nibbleNoDataName: "Nibble NoData-celler",
		zLimitName: "Z-grense",
		flowDirectionTypeName: "Type strømningsretning",
		weightRasterName: "Vektraster",
		forceEdgeName: "Tving alle kantceller til å strømme utover",
		streamRasterName: "Strømraster",
		surfaceRasterName: "Overflateraster",
		conversionType: "Konverteringstype",
		distanceRaster1: "Avstandraster 1",
		distanceRaster2: "Avstandraster 2",
		costDistanceRaster: "Kostnad/avstandsraster",
		costBacklinkRaster: "Tilbakekoblingsraster for kostnad",
		overridesName: "Overstyrer",
		fieldName: "Felt",
		signatureFileOrUrl: "Signaturfil eller URL",
		redName: "Rød",
		greenName: "Grønn",
		blueName: "Blå",
		infraredName: "Infrarød",
		panchromaticName: "Pankromatisk",
		multispectralName: "Multispektral",
		pansharpeningType: "Type pankromatisk oppskarping",
		sensorName: "Sensor",
		spatialReferenceName: "Romlig referanse",
		xCellsizeName: "X-cellestørrelse",
		yCellsizeName: "Y-cellestørrelse",
		xOriginName: "X-registreringspunkt",
		yOriginName: "Y-registreringspunkt",
		percentileName: "Persentilverdi",
		neighborhoodType: "Nabotype",
		widthName: "Bredde",
		heightName: "Høyde",
		startAngleName: "Startvinkel",
		endAngleName: "Sluttvinkel",
		neighborhoodValues: "Nabolagsverdier",
		horizontalRaster: "Horisontalt raster",
		horizontalFactor: "Horisontal faktor",
		verticalRaster: "Vertikalt raster",
		verticalFactor: "Vertikal faktor",
		streamRaster: "Strømraster",
		flowDirRaster: "Strømningsretningsraster",
		numberNeighborCells: "Antall naboceller",
		zoneConnectivity: "Sonetilkobling",
		addLinkBehavior: "Legg til kobling",
		excludedValue: "Utelatt verdi",
		constantFillCheck: "Generer fyllraster fra konstant",
		fillRaster: "Fyllraster",
		constantFillValue: "Konstant verdi",
		inputBitPositions: "Inndatabit",
		outputBitPositions: "Utdatabit",
		distanceTypeName: "Avstandstype",
		barrierDataName: "Rasterbarrierer",
		pourPointDataName: "Utløpspunktraster",
		accumulationRasterName: "Raster med akkumulert flyt",
		snapDistanceName: "Snappavstand",
		orderMethodName: "Ordremetode",
		directionMeasurementName: "Måleretning",
		processAsMultiband: "Behandle som flerbånd",
		processMultidimensional: "Behandle som flerdimensjonal",
		forceFlowDirectionConvention: "Tving strømningsretningskonvensjon for backlink-raster",
		initialAccumulation: "Første akkumulering",
		maximumAccumulation: "Maksimal akkumulering",
		sourceLocationBands: "Generer kilderad og -kolonne som ekstra bånd i utdata",
		backDirectionBand: "Generer tilbakeretning som ekstra bånd i utdata",
		numberOfCells: "Antall celler",
		zoneValues: "Soneverdier",
		shrinkMethod: "Forminsk metode",
		expandMethod: "Utvide metode",
		inputSpectralProfileType: "Spektralprofiltype",
		spectralProfileFileName: "Spektralprofil",
		trainingFeatureFileName: "Opplæringsfunksjon",
		nonNegative: "Ikke-negativ",
		sumToOne: "Summer til én",
		randomDistribution: "Distribusjon",
		meanName: "Gjennomsnitt",
		probabilityName: "Sannsynlighet",
		alphaName: "Alfa",
		betaName: "Beta",
		rName: "r",
		nName: "N",
		seed: "Utgangsverdi",
		randomNumberGenerator: "Generator for tilfeldige tall",
		cellFactor: "Cellefaktor",
		aggregationType: "Aggregeringsteknikk",
		extentHandling: "Utvid utstrekning hvis nødvendig",
		trendAnalysisDimensionName: "Dimensjonsnavn",
		trendAnalysisType: "Trendtype",
		harmonicFrequency: "Harmonisk frekvens",
		polynomialOrder: "Polynomgrad",
		cycleLengthName: "Length of Cycle",
		trendAnalysisRMSE: "RMSE",
		trendAnalysisR2: "R-Squared",
		trendAnalysisSlopePValue: "P-Value of Slope Coefficients",
		trendAnalysisSeasonalPeriod: "Årstid",
		cycleUnitName: "Cycle Unit",
		predictDimensionValues: "Verdier",
		dimensionDefinitionType: "Dimensjonsdefinisjon",
		predictDimensionStart: "Start",
		predictDimensionEnd: "Slutt",
		predictDimensionInterval: "Verdiintervall",
		dimensionUnit: "Enhet",
		interpolationCellsizeName: "Cellestørrelse for interpolering",
		variableName: "Variabler",
		dimensionlessName: "Dimensionless",
		mdimDefinition: "Dimension Definition",
		dimensionName: "Dimensjon",
		iterationStart: "Start of first iteration",
		iterationEnd: "End of first iteration",
		intervalStart: "Start på intervall",
		intervalEnd: "Slutt på intervall",
		stepName: "Trinn",
		rangesName: "Ranges",
		minValue: "Minimum Value",
		maxValue: "Maximum Value",
		changeAnalysisRasterName: "Endre analyseraster",
		changeTypeName: "Change Type",
		segmentDate: "Segmentdato",
		changeDirectionName: "Endre retning",
		maxNumChangesName: "Maximum Number of Changes",
		filterByYear: "Filtrer etter år",
		minimumYear: "Minimumsverdi",
		maximumYear: "Maksimumsverdi",
		filterByDuration: "Filtrer etter varighet",
		minimumDuration: "Minimumsvarighet",
		maximumDuration: "Maksimumsvarighet",
		filterByMagnitude: "Filtrer etter størrelse",
		minimumMagnitude: "Minimumsstørrelse",
		maximumMagnitude: "Maksimumsstørrelse",
		filterByStartValue: "Filtrer etter startverdi",
		minimumStartValue: "Minimum startverdi",
		maximumStartValue: "Maksimum startverdi",
		filterByEndValue: "Filtrer etter sluttverdi",
		minimumEndValue: "Minimum sluttverdi",
		maximumEndValue: "Maksimum sluttverdi",
		modelTypeName: "Modelltype",
		fromRasterName: "Fra-raster",
		toRasterName: "Til-raster",
		computeChangeMethod: "Compute Change Method",
		fromClassValues: "Fra-klasseverdier (f.eks.: 2 5)",
		toClassValues: "Til-klasseverdier (f.eks.: 2 5)",
		keepMethod: "Filtreringsmetode",
		useColorMethod: "Definer overgangsfarger",
		detectChangeBands: "Bånd for å oppdage endring (start på 0)",
		tmaskBands: "Bånd for temporær maskering (start på 0)",
		chiSquaredThreshold: "Chi-squared Threshold for Detect Change",
		minAnomaly: "Minimum Consecutive Anomaly Observations",
		updatingFrequency: "Updating Fitting Frequency (in years)",
		distanceAccumulationRasterName: "Raster for avstandsakkumulering",
		costBackdirectionRasterName: "Raster for tilbakeretning eller strømningsretning",
		rasterCollectionName: "Rastersamling",
		itemFunctionName: "Elementfunksjon",
		aggregationFunctionName: "Aggregeringsfunksjon",
		processingFunctionName: "Behandlingsfunksjon",
		aggregationDefinitionName: "Aggregeringsdefinisjon",
		queryGeometryName: "Spørringsgeometri",
		factorFunctionZeroFactor: "Nullfaktor",
		factorFunctionCutAngle: "Snittvinkel",
		factorFunctionSideFactor: "Sidefaktor",
		factorFunctionSlope: "Helling",
		factorFunctionLowCutAngle: "Lav snittvinkel",
		factorFunctionHighCutAngle: "Høy snittvinkel",
		factorFunctionCosPower: "Cosinus opphøyd",
		factorFunctionSecPower: "Sekant opphøyd",
		factorFunctionTablePath: "Tabellbane",
		processingBand: "Behandlingsbånd",
		processingBandName: "Behandler båndnavn",
		snappingDate: "Festingsdato",
		maxNumSegments: "Maksimalt antall segmenter",
		vertexCountOvershoot: "Overskytende antall knekkpunkter",
		spikeThreshold: "Spike-terskel",
		recoveryThreshold: "Terskel for gjenoppretting",
		minNumObs: "Minimumsantall observasjoner",
		pValueThreshold: "Terskel for p-verdi",
		bestModelProportion: "Beste modellproporsjon",
		preventOneYearRecovery: "Hindre ett års gjenoppretting",
		recoveryIncreaseTrend: "Gjenoppretting har stigende trend",
		outputOtherBands: "Andre bånd som utdata",
		sortType: "Sorteringstype",
		numberOfRuns: "Kjør utvidelse og krymping to ganger",
		percentileValue: "Persentilverdi",
		percentileInterpolationType: "Type interpolasjon av persentil",
		rasterInfoProperty: "Eiendom",
		rasterInfoValue: "Verdi",
		rasterInfoColumns: "Kolonner",
		rasterInfoRows: "Rader",
		rasterInfoBandCount: "Antall bånd",
		rasterInfoPixelSizeX: "Cellestørrelse X",
		rasterInfoPixelSizeY: "Cellestørrelse Y",
		rasterInfoPixelType: "Pikseltype",
		rasterExtentTop: "Topp",
		rasterExtentBottom: "Bunn",
		rasterExtentLeft: "Venstre",
		rasterExtentRight: "Høyre",
		rasterStatisticsNotCalculated: "Statistikk er ikke beregnet.",
		spatialReferenceProjection: "Projeksjon",
		spatialReferenceWkid: "WKID",
		spatialReferenceLatestWkid: "Forrige WKID",
		spatialReferenceWkt: "WKT",
		spatialReferenceVcsWkid: "VCSWKID",
		spatialReferenceLatestVcsWkid: "Forrige VCSWKID",
		spatialReferenceAuthority: "Autoritet",
		spatialReferenceLinearUnit: "Lineær enhet",
		spatialReferenceAngularUnit: "Vinkelenhet",
		spatialReferenceFalseEasting: "Falsk øst-verdi",
		spatialReferenceFalseNorthing: "Falsk nord-verdi",
		spatialReferenceCentralMeridian: "Sentralmeridian",
		spatialReferencePrimeMeridian: "Nullmeridian",
		spatialReferenceStandardParallel1: "Standardparallell 1",
		spatialReferenceStandardParallel2: "Standardparallell 2",
		spatialReferenceLatitudeOfOrigin: "Breddegrad for utgangspunkt",
		spatialReferenceAuxiliarySphereType: "Auxiliary Sphere-type",
		spatialReferenceDatum: "Nullpunkt",
		spatialReferenceSpheroid: "Sfæroide",
		spatialReferenceSemimajorAxis: "Store halvakse",
		spatialReferenceSemiminorAxis: "Lille halvakse",
		spatialReferenceInverseFlattening: "Invers utflating",
		inputDefinitionFileName: "Angi definisjonsfil",
		deleteName: "Slett",
		addVariableName: "Legg til variabel",
		maxNumPixelsPerSegment: "Maksimum segmentstørrelse i piksler",
		forwardWindowName: "Forover vindu",
		backwardWindowName: "Bakover vindu",
		noDataHandlingName: "IngenData behandling",
		circularWrapValueName: "Sirkulær omslagsverdi",
		fromClassNameFieldName: "Feltnavn for klassenavn inn fra Raster",
		toClassNameFieldName: "Feltnavn for klassenavn inn til Raster",
		targetRasterName: "Målraster",
		circularWrapValue: "Sirkulær omslagsverdi",
		bandIndexesR: "Rødt uttrykk",
		bandIndexesG: "Grønt uttrykk",
		bandIndexesB: "Blått uttrykk",
		exampleName: "Eksempel",
		inputName: "Inndata",
		outputName: "Resultat",
		optionalName: "Valgfritt",
		browseDefinitionFile: "Bla gjennom definisjonsfil",
		selectDefinitionFile: "Velg inndatadefinisjonsfil",
		inputDefinitionURL: "URL for inndatadefinisjonsfil",
		enterDefinitionFileURL: "Angi URL for inndatadefinisjonsfil",
		browseXMLFile: "Bla gjennom XML-fil",
		selectStatsFile: "Velg statistikk- og histogramfil",
		enterXMLFileURL: "Angi URL for XML-fil",
		xmlFileURL: "URL for XML-fil",
		circularCalculation: "Beregn sirkelstatistikk",
		localSurfaceType: "Lokal overflatetype",
		surfaceParameterType: "Parametertype",
		neighborhoodDistance: "Nabolagsavstand",
		useAdaptiveNeighborhood: "Bruk adaptivt nabolag",
		outputSlopeType: "Utdata helningsmåling",
		projectAzimuths: "Projiser geodetiske asimuter",
		useEquatorialAspect: "Bruk ekvatorialaspekt",
		zUnit: "Z-enhet",
		analysisMask: "Analysemaske",
		stdDeviation: "Standardavvik",
		"true": "Sant",
		"false": "Usant",
		costDistanceRaster1: "Inndata for kostnad/avstandsraster 1",
		costDistanceRaster2: "Inndata for kostnad/avstandsraster 2",
		threshold: "Terskel",
		thresholdMethod: "Terskelmetode",
		directionRaster1: "Inndata for back direction-raster 1",
		directionRaster2: "Inndata for back direction-raster 2",
		maxIterations: "Maksimalt antall gjentakelser",
		epsilon: "Epsilon"
	},
	enumLabels: {
		attributeTableTypeManual: "Manuell",
		attributeTableTypeExternal: "Ekstern",
		clrSchemeTypeColormap: "Fargekart",
		clrSchemeTypeColorRamp: "Fargepalett",
		colormapTypeElevation: "Høydedata",
		colormapTypeGray: "Grå",
		colormapTypeNDVI: "NDVI",
		colormapTypeNDVI2: "NDVI2",
		colormapTypeNDVI3: "NDVI3",
		colormapTypeRandom: "Tilfeldig",
		none: "Ingen",
		slopeTypeAdjusted: "Justert",
		slopeTypeDegree: "Grad",
		slopeTypePercentRise: "Prosent stigning",
		slopeTypeScaled: "Skalert",
		stretchTypeMinMax: "MinMaks",
		stretchTypePercentMinMax: "ProsentMinMaks",
		stretchTypeSigmoid: "Sigmoid",
		stretchTypeStdDev: "StdDev",
		hillshadeTypeSimple: "Tradisjonell",
		hillshadeTypeMultidirectional: "Flere retninger",
		bandComboByNames: "Båndnavn",
		bandComboByWavelength: "Båndbølgelengder",
		bandComboByIDs: "Bånd-ID-er",
		missingBandActionBestMatch: "Beste treff",
		missingBandActionFail: "Feil",
		unitTypeCelsius: "Celsius",
		unitTypeCentimeters: "Centimeter",
		unitTypeDecimeters: "Desimeter",
		unitTypeFahrenheit: "Fahrenheit",
		unitTypeFeet: "Fot",
		unitTypeFeetPerSec: "Fot per sekund (ft/s)",
		unitTypeInches: "Tommer",
		unitTypeKelvin: "Kelvin",
		unitTypeKilometers: "Kilometer",
		unitTypeKmsPerHour: "Kilometer i timen (km/t)",
		unitTypeKnots: "Knop (kn)",
		unitTypeMeters: "Meter",
		unitTypeMetersPerSec: "Meter per sekund (m/s)",
		unitTypeMiles: "Miles",
		unitTypeMilesPerHour: "Miles i timen (mph)",
		unitTypeMillimeters: "Millimeter",
		unitTypeNauticalMiles: "Nautiske mil",
		unitTypeYards: "Yard",
		unitTypeDecimalDegrees: "Desimalgrader",
		unitTypePoints: "Punkter",
		unitTypeUnknown: "Ukjent",
		unitTypeSqMapUnits: "Kvadratkartenheter",
		unitTypeSqMiles: "Kvadratmiles",
		unitTypeSqKms: "Kvadratkilometer",
		unitTypeAcres: "Dekar",
		unitTypeHectares: "Hektar",
		unitTypeSqYards: "Kvadratyard",
		unitTypeSqFt: "Kvadratfot",
		unitTypeSqInches: "Kvadrattommer",
		unitTypeSqMts: "Kvadratmeter",
		unitTypeSqCms: "Kvadratcentimeter",
		unitTypeSqMms: "Kvadratmillimeter",
		cellsizeTypeFirst: "Først av",
		cellsizeTypeMin: "Min. av",
		cellsizeTypeMax: "Maks. av",
		cellsizeTypeMean: "Gjennomsnitt av",
		cellsizeTypeLast: "Sist av",
		extentTypeFirst: "Først av",
		extentTypeIntersection: "Skjæringspunkt av",
		extentTypeUnion: "Union av",
		extentTypeLast: "Sist av",
		noDataInterpretAny: "Finn noen",
		noDataInterpretAll: "Finn alle",
		curvatureTypeStandard: "Standard",
		curvatureTypeProfile: "Profil",
		curvatureTypePlanform: "Planform",
		filterTypeLineDetectionHorizontal: "Linjedeteksjon horisontal",
		filterTypeLineDetectionVertical: "Linjedeteksjon vertikal",
		filterTypeLineDetectionLeftDiagonal: "Linjedeteksjon venstre diagonal",
		filterTypeLineDetectionRightDiagonal: "Linjedeteksjon høyre diagonal",
		filterTypeGradientNorth: "Helning nord",
		filterTypeGradientWest: "Helning vest",
		filterTypeGradientEast: "Helning øst",
		filterTypeGradientSouth: "Helning sør",
		filterTypeGradientNorthEast: "Helning nordøst",
		filterTypeGradientNorthWest: "Helning nordvest",
		filterTypeSmoothArithmeticMean: "Jevn aritmetisk middelverdi",
		filterTypeSmoothing3x3: "Utjevner 3x3",
		filterTypeSmoothing5x5: "Utjevner 5x5",
		filterTypeSharpening3x3: "Skjerper 3x3",
		filterTypeSharpening5x5: "Skjerper 5x5",
		filterTypeLaplacian3x3: "Laplace-fordeling 3x3",
		filterTypeLaplacian5x5: "Laplace-fordeling 5x5",
		filterTypeSobelHorizontal: "Sobel horisontal",
		filterTypeSobelVertical: "Sobel vertikal",
		filterTypeSharpen: "Skjerp",
		filterTypeSharpen2: "Gjør enda skarpere",
		filterTypePointSpread: "Punktspredning",
		userDefined: "Brukerdefinert",
		ContourTypeLines: "Konturlinjer",
		ContourTypeFill: "Konturfylling",
		ContourTypeSmoothOnly: "Bare glatt overflate",
		rasterizeFirst: "Første",
		rasterizeLast: "Siste",
		rasterizeSmallest: "Minst",
		rasterizeLargest: "Størst",
		resamplingTypeNearest: "Nærmeste nabo",
		resamplingTypeBilinear: "Bilineær interpolasjon",
		resamplingTypeCubic: "Kubisk konvolusjon",
		resamplingTypeMajority: "Majoritet",
		resamplingTypeBilinearPlus: "Bilineær interpolasjon pluss",
		resamplingTypeGauss: "Gaussisk uskarphet",
		resamplingTypeGaussPlus: "Gaussisk uskarphet pluss",
		resamplingTypeAverage: "Gjennomsnitt",
		resamplingTypeMinimum: "Minimum",
		resamplingTypeMaximum: "Maksimum",
		resamplingTypeVectorAvg: "Vektorgjennomsnitt",
		minimum: "Minimum",
		maximum: "Maksimum",
		mean: "Gjennomsnitt",
		stdDeviation: "Standardavvik",
		uvMagDirTypeUV: "U-V",
		uvMagDirTypeMagDir: "Størrelse-Retning",
		unknown: "Ukjent",
		angleRefSysGeographic: "Geografisk",
		angleRefSysArithmetic: "Aritmetisk",
		interpolateIrregularDataNearest: "Nærmeste nabo",
		interpolateIrregularDataBilinear: "Bilineær",
		interpolateIrregularDataTinningLinear: "Trianguler lineært",
		interpolateIrregularDataTinningNaturalNeighbor: "Naturlig nabo",
		interpolateIrregularDataTinningIDW: "Vektet invers avstand",
		esriRasterThresholdTypeConstant: "Konstant",
		esriRasterThresholdTypeOtsu: "Otsu",
		esriRasterThresholdTypeTsai: "Tsai",
		esriRasterThresholdTypeKapur: "Kapur",
		esriRasterThresholdTypeKittler: "Kittler",
		esriRasterThresholdTypeRosin: "Rosin",
		argStatsTypeMax: "Arg maks.",
		argStatsTypeMin: "Arg min.",
		argStatsTypeMedian: "Arg median",
		argStatsTypeDuration: "Varighet",
		arithmeticOpPlus: "Pluss",
		arithmeticOpMinus: "Minus",
		arithmeticOpMultiply: "Multipliser",
		arithmeticOpDivide: "Dele på",
		arithmeticOpPower: "Potens",
		arithmeticOpMode: "Modus",
		clipTypeOutside: "Klipp utenfor",
		clipTypeInside: "Klipp innenfor",
		yes: "Ja",
		no: "Nei",
		densities: "Tettheter",
		expectedCounts: "Forventet antall",
		planar: "Plant",
		geodesic: "Geodetisk",
		eachCell: "Hver celle",
		eachZone: "Hver sone",
		bestSingle: "Beste enkeltforekomst",
		allSightlines: "Alle siktelinjer",
		perimeterSightlines: "Perimetersiktelinjer",
		frequency: "Frekvens",
		observers: "Observatører",
		majority: "Majoritet",
		median: "Median",
		minority: "Minoritet",
		percentile: "Persentil",
		range: "Område",
		sum: "Sum",
		variety: "Variant",
		ndvi: "NDVI",
		savi: "SAVI",
		bandArithmeticMethodTSAVI: "Transformert SAVI",
		bandArithmeticMethodMSAVI: "Endret SAVI",
		bandArithmeticMethodSultan: "Sultans formel",
		gemi: "GEMI",
		pvi: "PVI",
		gvi: "GVI (Landsat TM)",
		vari: "VARI",
		sr: "SR",
		gndvi: "GNDVI",
		ndvire: "NDVIre",
		srre: "SRre",
		mtvi2: "MTVI2",
		rtviCore: "RTVICore",
		cire: "CIre",
		cig: "CIg",
		ndwi: "NDWI",
		evi: "EVI",
		ironOxide: "Jernoksid",
		ferrousMinerals: "Jernholdige mineraler",
		clayMinerals: "Leirmineral",
		wndwi: "WNDWI",
		bai: "BAI",
		mndwi: "MNDWI",
		nbr: "NBR",
		ndbi: "NDBI",
		ndmi: "NDMI",
		ndsi: "NDSI",
		localSquareRoot: "Kvadratrot",
		localACos: "ACos",
		localASin: "ASin",
		localATan: "ATan",
		localATanH: "ATanH",
		localAbs: "Abs",
		localBitwiseNot: "Bitwise Not",
		localBooleanNot: "Boolsk Not",
		localCos: "Cos",
		localCosH: "CosH",
		localExp: "Exp",
		localExp10: "Exp10",
		localExp2: "Exp2",
		localInt: "Int",
		localIsNull: "Is Null",
		localFloat: "Float",
		localLn: "Ln",
		localLog10: "Log10",
		localLog2: "Log2",
		localNegate: "Invertér",
		localRoundDown: "Avrund nedover",
		localRoundUp: "Avrund oppover",
		localSin: "Sin",
		localSinH: "SinH",
		localTan: "Tan",
		localTanH: "TanH",
		localACosH: "ACosH",
		localASinH: "ASinH",
		localPlus: "Pluss",
		localMinus: "Minus",
		localTimes: "ganger",
		localPower: "Potens",
		localBitwiseAnd: "Bitwise And",
		localBitwiseLeftShift: "Bitwise Left Shift",
		localBitwiseOr: "Bitwise Or",
		localBitwiseRightShift: "Bitwise Right Shift",
		localBitwiseXor: "Bitwise Xor",
		localBooleanAnd: "Boolsk And",
		localBooleanOr: "Boolsk Or",
		localBooleanXor: "Boolsk Xor",
		localDivide: "Dele på",
		localEqualTo: "Er lik",
		localGreaterThan: "Større enn",
		localGreaterThanEqual: "Større enn eller lik",
		localLessThan: "Mindre enn",
		localLessThanEqual: "Mindre enn eller lik",
		localMod: "Mod",
		localNotEqual: "Ikke lik",
		localATan2: "ATan2",
		localSquare: "Kvadrat",
		localSetNull: "Angi null",
		remapDefTypeList: "Liste",
		remapDefTypeTable: "Tabell",
		remapTableTypeSimple: "Enkel",
		remapTableTypeDynamic: "Dynamisk",
		remapTableTypeReassignment: "Overføring",
		geomCorrectionByConstZ: "Bruk konstant Z",
		geomCorrectionByDEM: "Bruk DEM",
		radarCalibBetaNought: "Beta null",
		radarCalibSigmaNought: "Sigma null",
		radarCalibGammaNought: "Gamma null",
		speckleFilterTypeLee: "Lee-filter",
		speckleFilterTypeEnhancedLee: "Forbedret Lee-filter",
		speckleFilterTypeFrost: "Frost-filter",
		speckleFilterTypeKuan: "Juan-filter",
		speckleNoiseModelMul: "Multiplikativ støy",
		speckleNoiseModelAdd: "Additiv støy",
		speckleNoiseModelAddnMul: "Additiv og multiplikativ støy",
		mosaicOpTypeFirst: "Første",
		mosaicOpTypeLast: "Siste",
		mosaicOpTypeMin: "Min",
		mosaicOpTypeMax: "Maks",
		mosaicOpTypeMean: "Gjennomsnitt",
		mosaicOpTypeBlend: "Bland",
		mosaicOpTypeSum: "Sum",
		integer: "Heltall",
		rfxD8: "D8",
		rfxMFD: "MFD",
		dinf: "Dinf",
		vertical: "Loddrett",
		horizontal: "Vannrett",
		localCellStatisticsMajority: "Majoritet",
		localCellStatisticsMax: "Maksimum",
		localCellStatisticsMean: "Gjennomsnitt",
		localCellStatisticsMedian: "Median",
		localCellStatisticsMin: "Minimum",
		localCellStatisticsMinority: "Minoritet",
		localCellStatisticsRange: "Område",
		localCellStatisticsStdDev: "Standardavvik",
		localCellStatisticsSum: "Sum",
		localCellStatisticsVariety: "Variant",
		localCellStatisticsMajorityIgnoreND: "Majoritet (ignorer NoData)",
		localCellStatisticsMaxIgnoreND: "Maksimum (ignorer NoData)",
		localCellStatisticsMeanIgnoreND: "Middelverdi (ignorer NoData)",
		localCellStatisticsMedianIgnoreND: "Median (ignorer NoData)",
		localCellStatisticsMinIgnoreND: "Minimum (ignorer NoData)",
		localCellStatisticsMinorityIgnoreND: "Minoritet (ignorer NoData)",
		localCellStatisticsRangeIgnoreND: "Område (ignorer NoData)",
		localCellStatisticsStdDevIgnoreND: "Standardavvik (ignorere NoData)",
		localCellStatisticsSumIgnoreND: "Sum (ignorer NoData)",
		localCellStatisticsVarietyIgnoreND: "Variasjon (ignorer NoData)",
		localCellStatisticsTypePercentileIgnoreND: "Persentil (Ignorer IngenData)",
		fromSource: "Fra kilde",
		toSource: "Til kilde",
		colorspaceConversionRgbToHsv: "RGB til HSV",
		colorspaceConversionHsvToRgb: "HSV til RGB",
		pansharpenTypeIHS: "IHS",
		pansharpenTypeBrovey: "Brovey",
		pansharpenTypeEsri: "Esri",
		pansharpenTypeMean: "Gjennomsnitt",
		pansharpenTypeGramSchmidt: "Gram-Schmidt",
		rectangleNeighborhood: "Rektangel",
		circleNeighborhood: "Sirkel",
		annulusNeighborhood: "Ring",
		wedgeNeighborhood: "Kile",
		irregularNeighborhood: "Uregelmessig",
		weightNeighborhood: "Vekt",
		four: "Fire",
		eight: "Åtte",
		within: "Innenfor",
		cross: "Kryss",
		addLink: "Legg til kobling",
		noLink: "Ingen kobling",
		weightedMean: "Vektet snitt",
		ls8QCBitPatternCirrus: "Landsat 8 cirrius",
		ls8QCBitPatternCloud: "Landsat 8 sky",
		ls8QCBitPatternCloudShadow: "Landsat 8 skyskygge",
		ls8QCBitPatternDesignatedFill: "Landsat 8 designert fyll",
		ls8QCBitPatternDroppedFrame: "Landsat 8 utelatt ramme",
		ls8QCBitPatternSnowIce: "Landsat 8 snø/is",
		ls8QCBitPatternTerrainOcclusion: "Landsat 8 terrengokklusjon",
		ls8QCBitPatternVegetation: "Landsat 8 vegetasjon",
		ls8QCBitPatternWater: "Landsat 8 vann",
		downStream: "Nedstrøms",
		upStream: "Oppstrøms",
		strahler: "STRAHLER",
		shreve: "SHREVE",
		currentSlice: "Nåværende inndeling",
		allSlices: "Alle inndelinger",
		expandDistance: "AVSTAND",
		expandMorphological: "MORFOLOGISK",
		spectralProfileFile: "Spektralprofil",
		trainingFeatureFile: "Opplæringsfunksjon",
		randomDistributionTypeUniform: "Uniform",
		randomDistributionTypeUniformInteger: "Heltall",
		randomDistributionTypeNormal: "Normal",
		randomDistributionTypeExponential: "Eksponentiell",
		randomDistributionTypePoisson: "Poisson",
		randomDistributionTypeGamma: "Gamma",
		randomDistributionTypeBinomial: "Binomial",
		randomDistributionTypeGeometric: "Geometrisk",
		randomDistributionTypeNegativeBinomial: "Negativ binominal",
		randomGeneratorTypeStandardCRand: "Standard C Rand",
		randomGeneratorTypeAlgorithmACM599: "ACM-innsamlet algoritme 599",
		randomGeneratorTypeMersenneTwister: "Mersenne Twister",
		sumName: "Sum",
		medainName: "Median",
		trendLinear: "Lineær",
		trendHarmonic: "Harmonisk",
		trendPolynomial: "Polynom",
		trendMannKendall: "Mann-Kendall",
		trendSeasonalKendall: "Sesong-Kendall",
		dimensionByValue: "Etter verdi",
		dimensionByInterval: "Etter intervall",
		mdimDefTypeAll: "Alt",
		mdimDefTypeByValues: "By Values",
		mdimDefTypeByRanges: "By Ranges",
		mdimDefTypeByIteration: "By Iteration",
		mdimDefTypeByInterval: "Etter intervall",
		mdimDefTypeByTargetRaster: "Etter målraster",
		esriTimeUnitsHours: "Timer",
		esriTimeUnitsDays: "Dager",
		esriTimeUnitsWeeks: "Uker",
		esriTimeUnitsMonths: "Måneder",
		esriTimeUnitsYears: "År",
		esriTimeIntervalKeywordHourly: "Hver time",
		esriTimeIntervalKeywordDaily: "Daglig",
		esriTimeIntervalKeywordWeekly: "Ukentlig",
		esriTimeIntervalKeywordDekadly: "Ti dager",
		esriTimeIntervalKeywordPentadly: "Fem dager",
		esriTimeIntervalKeywordMonthly: "Månedlig",
		esriTimeIntervalKeywordQuarterly: "Kvartalsvis",
		esriTimeIntervalKeywordYearly: "Hvert år",
		esriTimeIntervalKeywordRecurringDaily: "Gjentas daglig",
		esriTimeIntervalKeywordRecurringWeekly: "Gjentas ukentlig",
		esriTimeIntervalKeywordRecurringMonthly: "Gjentas hver måned",
		esriTimeIntervalKeywordRecurringQuarterly: "Gjentas hvert kvartal",
		aggDefTypeAll: "Alle",
		aggDefTypeIntervalKeyword: "Nøkkelord for intervall",
		aggDefTypeIntervalValue: "Intervallverdi",
		aggDefTypeIntervalRanges: "Intervallområder",
		latestChange: "Time of Latest Change",
		earliestChange: "Time of Earliest Change",
		largestChange: "Time of Largest Change",
		numberOfChanges: "Number of Changes",
		longestChange: "Tidspunkt for lengste endring",
		shortestChange: "Tidspunkt for korteste endring",
		fastestChange: "Tidspunkt for raskeste endring",
		slowestChange: "Tidspunkt for langsomste endring",
		allChanges: "Alle",
		increaseChanges: "Øke",
		decreaseChanges: "Redusere",
		segmentBeginning: "Segmentets begynnelse",
		segmentEnd: "Segmentets slutt",
		esriComputeChangeMethodDifference: "Difference",
		esriComputeChangeMethodRelativeDifference: "Relative Difference",
		esriComputeChangeMethodCategorical: "Kategorisk forskjell",
		esriComputeChangeMethodMultispectralEuclideanDistance: "Spektral euklidsk avstand",
		esriComputeChangeMethodMultispectralAngularDifference: "Spektral vinkeldifferanse",
		esriComputeChangeMethodMultispectralAxisWithBiggestChange: "Bånd med størst endring",
		esriComputeChangeKeepAll: "Behold alle",
		esriComputeChangeKeepChangedOnly: "Behold bare endrede piksler",
		esriComputeChangeKeepUnchangedOnly: "Behold bare uendrede piksler",
		esriComputeChangeUseColorAverage: "Gjennomsnitt Fra- og Til-farger",
		esriComputeChangeUseColorFrom: "Bruk Fra-farger",
		esriComputeChangeUseColorTo: "Bruk Til-farger",
		factorFunctionBinary: "Binær",
		factorFunctionForward: "Fremover",
		factorFunctionLinear: "Lineær",
		factorFunctionInvLinear: "Invers lineær",
		factorFunctionTable: "Tabell",
		factorFunctionSymLinear: "Symmetrisk lineær",
		factorFunctionSymInvLinear: "Symmetrisk invers lineær",
		factorFunctionCos: "Cosinus",
		factorFunctionSec: "Sekant",
		factorFunctionCosSec: "Cosinus-sekant",
		factorFunctionSecCos: "Sekant-cosinus",
		noSort: "Ikke sorter",
		ascend: "Stigende",
		descend: "Synkende",
		autoDetect: "Auto-detekter",
		nearest: "Nærmeste",
		linear: "Lineær",
		esriMonthJanuary: "Januar",
		esriMonthFebruary: "Februar",
		esriMonthMarch: "Mars",
		esriMonthApril: "April",
		esriMonthMay: "Mai",
		esriMonthJune: "Juni",
		esriMonthJuly: "Juli",
		esriMonthAugust: "August",
		esriMonthSeptember: "September",
		esriMonthOctober: "Oktober",
		esriMonthNovember: "November",
		esriMonthDecember: "Desember",
		dimensionalMovingIgnoreNoData: "Data",
		dimensionalMovingPropagateNoData: "Nodata",
		dimensionalMovingFillOnlyNoData: "Fyll ut NoData",
		circularMean: "Sirkulært gjennomsnitt",
		circularName: "Sirkulær",
		arithmeticName: "Aritmetisk",
		slopeName: "Helling",
		aspectName: "Hellingsretning",
		meanCurvature: "Gjennomsnittlig kurvatur",
		profileCurvature: "Profil (normal hellingslinje) kurvatur",
		tangentialCurvature: "Tangentiell (normal kontur) kurvatur",
		planCurvature: "Plan (projisert kontur) kurvatur",
		contourGeodesicTorsion: "Kontur geodetisk torsjon",
		gaussianCurvature: "Gauss-kurvatur",
		casoratiCurvature: "Casorati-kurvatur",
		localSurfaceTypeQuadratic: "Kvadratisk",
		localSurfaceTypeBiquadratic: "Bikvadratisk",
		thresholdNoThreshold: "Ingen terskel",
		thresholdPercentLeastCost: "Prosent minst kostnad",
		thresholdAccumulativeCost: "Kumulativ kostnad",
		clrmapTypeHillshade: "Hillshade"
	},
	categoryLabels: {
		sourceCharacteristics: "Kildekarakteristikk",
		neighborhoodSettings: "Nabolagsinnstillinger",
		statistics: "Statistikk",
		gamma: "Gamma",
		viewshedParameters: "Synsfeltparametere",
		observerParameters: "Observatørparametere",
		irregularDataInterpolation: "Uregelmessig datainterpolering",
		modelStatistics: "Modellstatistikk",
		aggregationDef: "Aggregeringsdefinisjon",
		filterByAttributes: "Filtrer etter attributter",
		percentileName: "Persentil",
		rasterInfo: "Rasterinformasjon",
		extent: "Omfang",
		spatialReference: "Romlig referanse"
	},
	outputRasterHelpTexts: {
		outputName: "<p>Navnet på laget som opprettes og legges til kartet.</p>",
		resultType: "<p>Typen utdata som blir opprettet. Utdataene kan være flisinndelte bildelag eller dynamiske bildelag.</p>",
		saveResultIn: "<p>Navnet på mappen i <b>Mitt innhold</b> der resultatet blir lagret.</p>"
	},
	analysisEnvironmentsHelpTexts: {
		description: "<p>Miljøinnstillinger for analyse i Map Viewer. </p>",
		outSR: "<p>Angir koordinatsystemet for analyser og resultatlaget.</p>",
		extent: "<p>Angir området som skal brukes til analyse.</p>",
		snapRaster: "<p>Justerer utstrekningen for utdataene slik at den samsvarer med cellejusteringen i det angitte forankringsrasterlaget.</p>",
		cellSize: "<p>Angir cellestørrelsen eller oppløsningen som blir brukt til analyser og til å opprette utdatarasterlaget.</p>",
		mask: "<p>Angir et maskelag der bare cellene som er innenfor maskeområdet, brukes til analyse.</p>",
		resamplingMethod: "<p>Angir hvordan pikselverdier skal interpoleres når inndata- og utdatarasterene ikke er på linje.</p>"
	},
	mainGenStrings: {
		unsupportedDataType: "Typen støttes ikke",
		currentlyUnsupported: " Et standardredigeringsprogram for ${missingType} er under arbeid og kommer snart. Midlertidig plassholdertekstboks for å angi strengbaserte inndata.",
		unsupportedOverrideWarning: "En overstyrende komponent for redigeringsprogrammet som gir bedre UX for å jobbe med følgende parameter(e) er under arbeid, og kommer snart:",
		overrideWidgetMissing: "Komponent for overstyrende redigeringsprogram mangler!",
		uiIncomplete: "Jobbinnsendingen mislyktes. Funksjonen kan ikke kjøres fordi noen av de påkrevde feltene er ufullstendige eller mangler fra UI-et.",
		count: "Antall",
		selectVariables: "Velg variabler",
		selectFeature: "Velg et geoobjektlag",
		greaterThanErrorMessage: "Det angitte tallet må være høyere enn ${min}",
		lesserThanErrorMessage: "Det angitte tallet må være lavere enn ${max}",
		greaterThanOrEqualErrorMessage: "Det angitte tallet må være større enn eller lik ${min}",
		lesserThanOrEqualErrorMessage: "Det angitte tallet må være lavere enn eller lik ${max}",
		allowScalar: "Velg et lag eller angi en konstant",
		selectField: "Velg felt",
		parameterRequired: "Denne parameteren kreves.",
		enterAValue: "Angi en verdi...",
		invalidInput: "Den angitte verdien er ugyldig.",
		itemNotFound: "Elementet eksisterer ikke eller er utilgjengelig.",
		itemPermissionDenied: "Du har ikke tillatelser til å bruke dette elementet.",
		layerNotAvailable: "Kan ikke laste inn laget ${layerName}.",
		multipleLayersNotAvailable: "Kan ikke laste inn laget ${layerName} og andre.",
		learnMoreLabel: "Få mer informasjon",
		fieldNotAvailable: "Kan ikke laste inn feltet.",
		allowAnalysis: "Analyse er ikke tillatt på bildetjenesten.",
		allowAnalysisReason: "Ett eller flere lag fra kartet vises ikke her fordi de ikke tillater analyse.",
		learnMoreText: "Mer informasjon",
		atLeastOneRasterInput: "Minst ett inndatalag må være et rasterlag.",
		browseAnalysisLayers: "Bla gjennom lag",
		activeMapViewExtent: "Bruk den gjeldende kartutstrekningen",
		chooseRaster: "Velg Klipperaster",
		chooseGeometry: "Velg Geometri for utklipp",
		resultType: "Resultattype",
		saveInFolder: "Lagre i mappe",
		outputName: "Navn på utdata",
		outputLayerType: "Utdatalagtype",
		dynamicImageryLayer: "Dynamisk bildelag",
		tiledImageryLayer: "Flisinndelt bildelag",
		custom: "Tilpasset",
		loading: "Laster inn...",
		layerMissing: "Ett eller flere lag fra kartet vises ikke her fordi de ikke tillater analyse. Lær mer.",
		browseCoordinateSystems: "Bla gjennom koordinatsystemer",
		unableToRepopulateOutSR: "Kan ikke fylle ut koordinatsystemet for utdata.",
		defaultTitle: "Vis mer",
		"ARC (equal arc-second)": "ARC (lik bue-sekund)",
		Africa: "Afrika",
		Antarctica: "Antarktis",
		Argentina: "Argentina",
		Asia: "Asia",
		"Asteroid Belt": "Asteroidebelte",
		"Atlantic Ocean": "Atlanterhavet",
		Australia: "Australia",
		"Australia and New Zealand": "Australia og New Zealand",
		Austria: "Østerrike",
		"BLM (US Feet)": "BLM (amerikanske fot)",
		Bangladesh: "Bangladesh",
		"Beijing 1954": "Beijing 1954",
		Bhutan: "Bhutan",
		CGCS2000: "CGCS2000",
		Canada: "Kanada",
		Caribbean: "Karibia",
		"Caribbean Sea": "Det karibiske hav",
		"Central America": "Sentral-Amerika",
		"Central and North America": "Sentral- og Nord-Amerika",
		Colombia: "Colombia",
		Continental: "Kontinental",
		"County Systems": "Fylkessystemer",
		"Democratic Republic of the Congo": "Den demokratiske republikken Kongo",
		"EPSG Arctic": "EPSG Arctic",
		Earth: "Jorden",
		"Ellipsoidal-based": "Ellipsoidebasert",
		Europe: "Europa",
		Finland: "Finland",
		France: "Frankrike",
		"GSK 2011": "GSK 2011",
		"Gauss Kruger": "Gauss Kruger",
		"Geographic Coordinate Systems": "Geografiske koordinatsystemer",
		Germany: "Tyskland",
		"Gravity-related": "Gravitasjonsrelatert",
		"Greenwich-based": "Greenwich-basert",
		"Highways England": "Hovedveier England",
		Illinois: "Illinois",
		"Indian Ocean": "Det indiske hav",
		"Indian Subcontinent": "Det indiske subkontinent",
		Indiana: "Indiana",
		Indonesia: "Indonesia",
		Iowa: "Iowa",
		"Ireland and United Kingdom": "Irland og Storbritannia",
		Italy: "Italia",
		Japan: "Japan",
		Jupiter: "Jupiter",
		Kansas: "Kansas",
		"Las Vegas": "Las Vegas",
		Libya: "Libya",
		Malaysia: "Malaysia",
		"Malaysia and Singapore": "Malaysia og Singapore",
		Mars: "Mars",
		Mercury: "Merkur",
		Minnesota: "Minnesota",
		Montana: "Montana",
		"NAD 1927": "NAD 1927",
		"NAD 1927 (US Feet)": "NAD 1927 (amerikanske fot)",
		"NAD 1983": "NAD 1983",
		"NAD 1983 (2011)": "NAD 1983 (2011)",
		"NAD 1983 (2011) (Intl Feet)": "NAD 1983 (2011) (internasjonale fot)",
		"NAD 1983 (2011) (Meters)": "NAD 1983 (2011) (meter)",
		"NAD 1983 (2011) (US Feet)": "NAD 1983 (2011) (amerikanske fot)",
		"NAD 1983 (CORS96) (Intl Feet)": "NAD 1983 (CORS96) (internasjonale fot)",
		"NAD 1983 (CORS96) (Meters)": "NAD 1983 (CORS96) (meter)",
		"NAD 1983 (CORS96) (US Feet)": "NAD 1983 (CORS96) (amerikanske fot)",
		"NAD 1983 (Intl Feet)": "NAD 1983 (internasjonale fot)",
		"NAD 1983 (Meters)": "NAD 1983 (meter)",
		"NAD 1983 (PA11) (Meters)": "NAD 1983 (PA11) (meter)",
		"NAD 1983 (PA11) (US Feet)": "NAD 1983 (PA11) (amerikanske fot)",
		"NAD 1983 (US Feet)": "NAD 1983 (amerikanske fot)",
		"NAD 1983 HARN (Intl Feet)": "NAD 1983 HARN (internasjonale fot)",
		"NAD 1983 HARN (Meters)": "NAD 1983 HARN (meter)",
		"NAD 1983 HARN (US Feet)": "NAD 1983 HARN (amerikanske fot)",
		"NAD 1983 NSRS2007 (Intl Feet)": "NAD 1983 NSRS2007 (internasjonale fot)",
		"NAD 1983 NSRS2007 (Meters)": "NAD 1983 NSRS2007 (meter)",
		"NAD 1983 NSRS2007 (US Feet)": "NAD 1983 NSRS2007 (amerikanske fot)",
		"National Grids": "Nasjonale rutenett",
		Navajo: "Navajo",
		Neptune: "Neptun",
		"New Beijing": "New Beijing",
		"New Zealand": "New Zealand",
		"North America": "Nord-Amerika",
		"Northern Hemisphere": "Nordlige halvkule",
		Norway: "Norge",
		Oceans: "Hav",
		Oregon: "Oregon",
		"Other GCS": "Andre GCS",
		"Pacific Ocean": "Stillehavet",
		Pluto: "Pluto",
		Polar: "Polar",
		Portugal: "Portugal",
		"Projected Coordinate Systems": "Projiserte koordinatsystemer",
		"Pulkovo 1942": "Pulkovo 1942",
		"Pulkovo 1995": "Pulkovo 1995",
		Replaced: "Erstattet",
		"SAD 1969": "SAD 1969",
		SIRGAS: "SIRGAS",
		"SIRGAS 2000": "SIRGAS 2000",
		Saturn: "Saturn",
		"Solar System": "Solsystem",
		"South Africa": "Sør-Afrika",
		"South America": "Sør-Amerika",
		"South Korea": "Sør-Korea",
		"Southern Hemisphere": "Sørlige halvkule",
		"Spheroid-based": "Sfæroidebasert",
		"State Plane": "Delstatplan",
		"State Systems": "Delstatsystemer",
		Sweden: "Sverige",
		"Switzerland and Liechtenstein": "Sveits og Liechtenstein",
		Texas: "Texas",
		Tribal: "Stamme",
		Turkey: "Tyrkia",
		"US Feet": "Amerikanske fot",
		"USA and territories": "USA med territorier",
		UTM: "UTM",
		Ukraine: "Ukraina",
		"Unknown Height Systems": "Ukjente høydesystemer",
		Uranus: "Uranus",
		Venus: "Venus",
		"Vertical Coordinate Systems": "Vertikale koordinatsystemer",
		Vietnam: "Vietnam",
		"WGS 1972": "WGS 1972",
		"WGS 1984": "WGS 1984",
		Wisconsin: "Wisconsin",
		"Wisconsin CRS": "Wisconsin CRS",
		World: "Verden",
		"World (Sphere-based)": "Verden (sfærebasert)",
		Wyoming: "Wyoming",
		"Xian 1980": "Xian 1980",
		done: "Ferdig",
		noResults: "Finner ingen resultater",
		searchPlaceholder: "Navn eller WKID",
		browseTemplate: "Bla gjennom rasterfunksjonsmaler",
		saveTemplate: "Lagre rasterfunksjonsmal",
		preview: "Forhåndsvisning",
		previewDescription: "Forhåndsvis resultatene før du kjører analysen.",
		showPreview: "Vis forhåndsvisning",
		previewLayer: "Forhåndsvis laget ${number}",
		newPreview: "Ny forhåndsvisning",
		previewPopup: "Aktiver forhåndsvisning av analyseresultatene basert på inndataparameterne.",
		updatePreviewLayer: "Oppdater det valgte forhåndsvisningslaget",
		createPreviewLayer: "Opprett nytt forhåndsvisningslag",
		maximumPreviewAllowed: "Maks. antall tillatte forhåndsvisningslag: ${maxCount}",
		previewFailure: "Dette forhåndsvisningslaget er ikke tilgjengelig. Kontroller inndataparameterne, og oppdater dette forhåndsvisningslaget igjen.",
		header: "Velg element",
		content: "Du har endringer som ikke er lagret, i ${rftTitle}. Hvis du begynner på nytt med en ny mal, går disse endringene tapt.",
		dontSave: "Ikke lagre",
		"continue": "Fortsett",
		stretch: "Tilpass til vindu",
		pan: "Panorer",
		newTemplate: "Opprett ny mal",
		openTemplate: "Åpne mal",
		addFunction: "Legg til rasterfunksjoner",
		addConstant: "Legg til konstant",
		addRaster: "Legg til rastervariabel",
		move: "Flytt",
		zoom: "Zoom",
		saveAs: "Lagre som",
		clear: "Fjern",
		addRasterFunctionTitle: "Legg til rasterfunksjoner",
		templatePropertiesTitle: "Egenskaper for mal",
		browseRFT: "Bla gjennom rasterfunksjonsmaler",
		defaultToolDescription: "${toolTitle} analyseverktøy.",
		openToolText: "Åpne verktøy",
		toolDropdownText: "Rullegardinliste for verktøy",
		addToMap: "Bekreft og legg til kart",
		confirm: "Bekreft",
		select: "Velg",
		selectTask: "Velg oppgave",
		unsupportedLayer: "Denne parameteren støtter ikke følgende lag: ${layerName}.",
		viewDetails: "Vis fullstendige elementdetaljer",
		rename: "Gi nytt navn",
		duplicate: "Dupliser",
		launch: "Åpne for å kjøre",
		templateEditor: "Malredigering",
		createItem: "Lagre rasterfunksjonsmal",
		actionLabel: "Filter",
		filterPopoverHeading: "Filtrer funksjonene",
		defaultSearchPlaceholder: "Søk etter navn",
		settings: "Innstillinger",
		summary: "Sammendrag",
		definitionQuery: "Definisjonsspørring",
		matchVariables: "Match variabler",
		unionDimension: "Unionmål",
		nameEditorPlaceholder: "Angi tittel",
		summaryEditorPlaceholder: "Angi en kort beskrivelse.",
		definitionQueryPlaceholder: "Angi...",
		upload: "Opplasting",
		chooseImage: "Klikk for å velge en fil",
		update: "Oppdater",
		thumbnailErrors: {
			wrongImageType: "Feil bildetype valgt",
			notAvailable: "Miniatyrbilde ikke tilgjengelig",
			loadError: "Kan ikke laste inn bildet",
			chooseFile: "Klikk for å velge fil"
		}
	}
};
const copy = "Kopier";
const save = "Lagre";
const title = "Tittel";
const folder = "Mappe";
const tags = "Tagger";
const savingMessage = "Lagrer element til";
const shareWith = "Del med";
const share = "Dele";
const setSharingLevel = "Angi delingsnivå";
const setGroupSharing = "Angi gruppedeling";
const owner = "Eier";
const organization = "Organisasjon";
const everyone = "Alle (offentlig)";
const groups = "Grupper:";
const type = "Type";
const mosaic = "Mosaikk";
const itemGroup = "Elementgruppe";
const item = "Element";
const definitionQuery = "Definisjonsspørring";
const groupItemsBy = "Grupper elementer etter";
const groupFieldName = "Grupper feltnavn";
const tagFieldName = "Tagg feltnavn";
const noTitleTagErrorMsg = "Du må angi en tittel på elementet og tagger slik at det er mulig å finne kartet gjennom søk.";
const noTitleErrorMsg = "Du må oppgi en tittel for elementet ditt.";
const noTagErrorMsg = "Du må angi minst én tagg for at folk skal kunne finne element ditt gjennom søk.";
const error = "Feil";
const warning = "Advarsel";
const success = "Vellykket";
const details = "Detaljer:";
const tryAgain = "Prøv på nytt";
const toolModeler = {
	save: "Lagre",
	editProperties: "Rediger egenskaper",
	saveAs: "Lagre som",
	savingNotification: "Lagrer endringer til element...",
	savingTitle: "Lagrer",
	saveFailedMessage: "Endringene ble ikke lagret.",
	saveWithErrorsMessage: "Endringer ble lagret med følgende feil.",
	viewItemMessage: "Vis lagret element",
	here: "her.",
	itemCreatedMessage: "Et nytt element ble opprettet",
	clickToViewItemMessage: "Klikk på OK for å vise elementdetaljsiden, og klikk på Avbryt for å fortsette.",
	readingFailed: "Kan ikke laste inn valgt rasterfunksjonsmal.",
	failedToLoadXML: "Kan ikke laste inn valgt rasterfunksjonsmal i XML-format.",
	learnMore: "Mer informasjon",
	overwriteTitle: "Bekreft overskriving",
	overwriteMessage: "Vil du overskrive eksisterende element?",
	overwriteSuccessMessage: "Elementet ble oppdatert."
};
const toolEditor = {
	run: "Kjør",
	save: "Lagre",
	deleteSelected: "Slett valgte elementer",
	addRaster: "Legg til raster",
	addScalar: "Legg til skalar",
	layout: "Automatisk oppsett",
	errorTitle: "Feil",
	invalidToolMessage: "Rasterfunksjonsmal er ikke gyldig.",
	out: "Ut",
	zoomIn: "Zoom inn",
	zoomOut: "Zoom ut",
	zoomToFit: "Tilpass til vindu",
	panOn: "Bytt til panoreringsmodus",
	panOff: "Slå av panoreringsmodus",
	defaultModelName: "Vertøymodell",
	defaultRasterName: "Raster"
};
const toolDetailsEditor = {
	defaultToolName: "Rasterfunksjonsmal",
	defaultToolDescription: "Legg til et kort sammendrag for rasterfunksjonen.",
	defaultHelpText: "Klikk på Hjelp-ikonet for å redigere hjelpeteksten.",
	editHelpTitle: "Rediger hjelp",
	saveLabel: "Lagre",
	cancelLabel: "Avbryt",
	thumbnail: {
		wrongImageType: "Feil bildetype er valgt",
		notAvailable: "Miniatyrbilde ikke tilgjengelig",
		loadError: "Kan ikke laste inn bildet",
		chooseFile: "Klikk for å velge fil"
	}
};
const saveUtils = {
	thumbnail: "Miniatyrbilde",
	sharing: "Deling"
};
const close = "Lukk";
const unsavedWarningExisting = "Vil du lagre endringene til elementet <b>${itemTitle}</b> ?";
const unsavedWarningNew = "Vil du lagre endringene?";
const saveAs = "Lagre som";
const dontSave = "Ikke lagre";
const unsavedTitle = "Ulagrede endringer";
const invalidRFTMessage = "Den opprettede rasterfunksjonsmalen er ikke gyldig.";
const errorTitle = "Feil";
const breadcrumb = "Rasterfunksjonsredigering";
const breadcrumbEditor = "Innhold > Rasterfunksjonsredigering";
const viewerModeTitle = "Skrivebeskyttet";
const viewerModeMessage = "Rasterfunksjonsmalelementet er skrivebeskyttet. Endringer kan ikke lagres.";
const userStartDirection = "Velg en funksjon for å starte opprettingen av en rasterfunksjonsmal.";
const selectFunction = "Legg til funksjon";
const deselectFunction = "Fjern funksjon";
const dialogTitle = "System";
const category = "Kategorier";
const search = "Søk i rasterfunksjoner";
const categoryNames = {
	analysis: "Analyse",
	appearance: "Utseende",
	classification: "Klassifisering",
	conversion: "Konvertering",
	correction: "Korrigering",
	dataManagement: "Databehandling",
	distance: "Avstand",
	distanceLegacy: "Avstand (utfaset)",
	hydrology: "Hydrologi",
	math: "Matematikk",
	mathConditional: "Matematikk: Betingelse",
	mathLogical: "Matematikk: Logikk",
	mathTrigonometric: "Matematikk: Trigonometrisk",
	reclass: "Reklassifisering",
	statistical: "Statistikk",
	surface: "Overflate"
};
const commonStrings_nb = {
	ok: ok,
	cancel: cancel,
	enterURL: enterURL,
	serviceURL: serviceURL,
	selectRaster: selectRaster,
	failedToLoadLayer: failedToLoadLayer,
	loadingLayer: loadingLayer,
	selectFeature: selectFeature,
	enterFURL: enterFURL,
	addRaster: addRaster,
	addScalar: addScalar,
	raster: raster,
	scalar: scalar,
	defaultModelName: defaultModelName,
	general: general,
	parameters: parameters,
	variables: variables,
	name: name,
	description: description,
	parameter: parameter,
	isPublic: isPublic,
	isDataset: isDataset,
	unknownPixelType: unknownPixelType,
	outputPixelType: outputPixelType,
	u8PixelType: u8PixelType,
	s8PixelType: s8PixelType,
	u16PixelType: u16PixelType,
	s16PixelType: s16PixelType,
	u32PixelType: u32PixelType,
	s32PixelType: s32PixelType,
	f32PixelType: f32PixelType,
	f64PixelType: f64PixelType,
	properties: properties,
	multidimensionalRules: multidimensionalRules,
	matchVariables: matchVariables,
	unionDimensions: unionDimensions,
	rasterFunctionEditor: rasterFunctionEditor,
	rfxLicenseInfo: rfxLicenseInfo,
	rasterFunctions: rasterFunctions,
	copy: copy,
	save: save,
	title: title,
	folder: folder,
	tags: tags,
	savingMessage: savingMessage,
	shareWith: shareWith,
	share: share,
	setSharingLevel: setSharingLevel,
	setGroupSharing: setGroupSharing,
	owner: owner,
	organization: organization,
	everyone: everyone,
	groups: groups,
	type: type,
	mosaic: mosaic,
	itemGroup: itemGroup,
	item: item,
	definitionQuery: definitionQuery,
	groupItemsBy: groupItemsBy,
	groupFieldName: groupFieldName,
	tagFieldName: tagFieldName,
	noTitleTagErrorMsg: noTitleTagErrorMsg,
	noTitleErrorMsg: noTitleErrorMsg,
	noTagErrorMsg: noTagErrorMsg,
	error: error,
	warning: warning,
	success: success,
	details: details,
	tryAgain: tryAgain,
	toolModeler: toolModeler,
	toolEditor: toolEditor,
	toolDetailsEditor: toolDetailsEditor,
	saveUtils: saveUtils,
	close: close,
	unsavedWarningExisting: unsavedWarningExisting,
	unsavedWarningNew: unsavedWarningNew,
	saveAs: saveAs,
	dontSave: dontSave,
	unsavedTitle: unsavedTitle,
	invalidRFTMessage: invalidRFTMessage,
	errorTitle: errorTitle,
	breadcrumb: breadcrumb,
	breadcrumbEditor: breadcrumbEditor,
	viewerModeTitle: viewerModeTitle,
	viewerModeMessage: viewerModeMessage,
	userStartDirection: userStartDirection,
	selectFunction: selectFunction,
	deselectFunction: deselectFunction,
	dialogTitle: dialogTitle,
	category: category,
	search: search,
	categoryNames: categoryNames
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (commonStrings_nb);


//# sourceMappingURL=common-strings.nb-5ec43a4b.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,