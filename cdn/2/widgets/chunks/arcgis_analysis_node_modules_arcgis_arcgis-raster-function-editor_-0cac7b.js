"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_arcgis-raster-function-editor_-0cac7b"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/rfx-args-helper-ab401543.js":
/*!************************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/rfx-args-helper-ab401543.js ***!
  \************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   S: () => (/* binding */ SwitchableTypes),
/* harmony export */   a: () => (/* binding */ getRFTName),
/* harmony export */   b: () => (/* binding */ getArgRFT),
/* harmony export */   c: () => (/* binding */ canBuildArgRFTUI),
/* harmony export */   d: () => (/* binding */ getCaseInsensitiveArg),
/* harmony export */   e: () => (/* binding */ containsArgName),
/* harmony export */   f: () => (/* binding */ getEnumData),
/* harmony export */   g: () => (/* binding */ getFunctionSchema),
/* harmony export */   h: () => (/* binding */ hasRasterElements),
/* harmony export */   i: () => (/* binding */ isSingleArgumentFunction),
/* harmony export */   j: () => (/* binding */ cloneRFT),
/* harmony export */   k: () => (/* binding */ getSchemaArgKey),
/* harmony export */   l: () => (/* binding */ hasRFTElements),
/* harmony export */   m: () => (/* binding */ getRasterArrayInputArgs),
/* harmony export */   n: () => (/* binding */ isFunctionChain),
/* harmony export */   o: () => (/* binding */ getRFxDefKeyFromRFT),
/* harmony export */   p: () => (/* binding */ parseSwitchableDomainArguments),
/* harmony export */   q: () => (/* binding */ getArguments),
/* harmony export */   r: () => (/* binding */ getInputArgsFromElementInfos),
/* harmony export */   s: () => (/* binding */ shouldHonorIsPublic),
/* harmony export */   u: () => (/* binding */ useRFxArgWidget)
/* harmony export */ });
/* harmony import */ var _arcgis_core_core_lang_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @arcgis/core/core/lang.js */ "@arcgis/core/core/lang.js");
/* harmony import */ var _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./resources-27c66f5c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/resources-27c66f5c.js");
/* harmony import */ var _type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./type-gaurds-1840747f.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/type-gaurds-1840747f.js");
/* harmony import */ var _functions_f1f2dffd_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./functions-f1f2dffd.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/functions-f1f2dffd.js");
/* harmony import */ var _interfaces_d0c68944_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./interfaces-d0c68944.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/interfaces-d0c68944.js");






const SwitchableTypes = {
    List: "list",
    Unit: "linearUnit",
    Number: "number",
    Field: "field"
};
function isSingleArgumentFunction(rfxArgs) {
    const isDatasetDefined = !(0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_2__.i)(rfxArgs?.isDataset);
    const isRFV = rfxArgs?.type === _type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_2__.R;
    return isDatasetDefined && isRFV;
}
/**
 * Deep clone an object or an array, excluding specified properties.
 * Used to avoid circular dependency error.
 *
 * @param src The source object or array to clone.
 * @param excludeProps An array of property names to exclude from the cloned object.
 * @returns A deep copy of the input object or array.
 */
function cloneRFT(src, excludeProps) {
    if ((0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_2__.i)(excludeProps)) {
        return _arcgis_core_core_lang_js__WEBPACK_IMPORTED_MODULE_0__.clone(src);
    }
    // Create a new object to hold the cloned properties
    const dest = {};
    // If the input is an object and not an array, clone each of its properties
    if (typeof src === "object" && src !== null && !Array.isArray(src)) {
        for (const propName in src) {
            if (src.hasOwnProperty(propName) && excludeProps.indexOf(propName) < 0) {
                dest[propName] = cloneRFT(src[propName], excludeProps);
            }
        }
        return dest;
    }
    // If the input is an array, clone each of its elements
    if (Array.isArray(src)) {
        return src.map((element) => {
            return cloneRFT(element, excludeProps);
        });
    }
    // If the input is a primitive type, use esriLang.clone to create a copy
    return _arcgis_core_core_lang_js__WEBPACK_IMPORTED_MODULE_0__.clone(src);
}
/**
 * Get the value of an argument with case-insensitive name matching.
 * @param argName - The name of the argument to retrieve.
 * @param args - The object containing the arguments to search.
 * @returns The value of the argument with the given name, or undefined if not found.
 */
function getCaseInsensitiveArg(argName, args) {
    if ((0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_2__.i)(argName) || (0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_2__.i)(args)) {
        return undefined;
    }
    const argKey = Object.keys(args).find((key) => key.toLowerCase() === argName.toLowerCase());
    return argKey ? args[argKey] : undefined;
}
/**
 * Finds the schema key that matches the given RFx argument key in a case-insensitive manner.
 *
 * @param {RFxSchema} functionSchemaArgs - The schema to search for the argument key.
 * @param {string} rfxArgKey - The RFx argument key to find a matching schema key for.
 * @returns {string} - The matching schema key.
 */
function getSchemaArgKey(functionSchemaArgs, rfxArgKey) {
    if (!functionSchemaArgs) {
        return "";
    }
    const schemaKeys = Object.keys(functionSchemaArgs);
    if (rfxArgKey === undefined && schemaKeys.length === 1) {
        // If the rfxArg doesn't have a key, and the schema only has 1 argument defined,
        // return it
        return schemaKeys[0];
    }
    const matchingSchemaKey = schemaKeys.find((key) => key.toLowerCase() === rfxArgKey?.toLowerCase());
    return matchingSchemaKey ?? "";
}
/**
 * Gets the name of the RFxTemplate.
 * @param rfxTemplate The RFxTemplate object to get the name from.
 * @returns The name of the RFxTemplate.
 */
async function getRFTName(rfxTemplate) {
    const functionType = rfxTemplate?.function?.type?.toLowerCase()?.replace("function", "");
    const functionArguments = rfxTemplate?.arguments;
    const specialCaseMap = _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.h.rfxNameSpecialCases;
    const localFunctionOperations = _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.h.localFunctionOperations;
    const enums = await (0,_resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.g)();
    switch (functionType) {
        case "local":
            const operationValue = functionArguments?.Operation?.value;
            const localOp = localFunctionOperations.find((op) => op.key === operationValue);
            if (!(0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_2__.i)(localOp)) {
                return localOp.label;
            }
            else if (enums.cellStatisticsTypes.some((op) => op.key === operationValue)) {
                return "CellStatistics";
            }
            break;
        case "pythonadapter": {
            const pyClassName = functionArguments?.ClassName?.value;
            return pyClassName || null;
        }
        case "gpadapter": {
            const toolNameValue = functionArguments?.ToolName?.value?.toLowerCase()?.replace("_sa", "");
            const specialCase = specialCaseMap.find((sc) => sc.key === toolNameValue);
            return specialCase?.value || toolNameValue || null;
        }
        default: {
            const specialCase = specialCaseMap.find((sc) => sc.key === functionType);
            return specialCase?.value || functionType || null;
        }
    }
    return null;
}
function getArgRFT(rfxArg) {
    if (!rfxArg) {
        return;
    }
    if (rfxArg.type === _type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_2__.b) {
        return rfxArg;
    }
    else if (rfxArg.value && rfxArg.value.type === _type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_2__.b) {
        return rfxArg.value;
    }
}
/**
 * This function takes a schema object and an RFxTemplate object as input and returns
 * the schema for the corresponding function, based on the function type and name
 * determined by getFunctionName.
 * @param param
 * @returns
 */
function getFunctionSchema({ schema, rfxTemplate }) {
    if ((0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_2__.i)(rfxTemplate?.function?.type)) {
        return;
    }
    const functionType = rfxTemplate.function.type;
    const rfxArgs = rfxTemplate?.arguments;
    let functionName = (0,_functions_f1f2dffd_js__WEBPACK_IMPORTED_MODULE_3__.e)(rfxArgs);
    // The following handles case of "LocalFunction"
    if (!functionName || (!schema.hasOwnProperty(functionName) && schema.hasOwnProperty(functionType))) {
        functionName = functionType;
    }
    return schema[functionName];
}
function hasRasterElements(rfxArg) {
    // Check if an argument has raster elements in it
    // Can be { value: { elements[] } }, in which case we check in the elements
    // Else check value itself
    // Assumption: the array will only have raster/RFT elements, so checking only first element
    if (!rfxArg || !rfxArg.value) {
        return false;
    }
    const elements = rfxArg.value.elements ? rfxArg.value.elements : rfxArg.value;
    const element = elements[0];
    return element && (element.isDataset || element.type === _type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_2__.b);
}
/**
 * Determines if the given RFxTemplate should honor the "isPublic" flag.
 * If the RFxTemplate has any aliases defined, the "isPublic" flag is honored.
 * Otherwise, the "isPublic" flag is ignored.
 * Additionally, if any argument in the RFxTemplate has "isPublic" set to true,
 * the method returns true.
 * @param {RFxTemplate} rfxTemplate - The RFxTemplate to check.
 * @returns {boolean} - True if the RFxTemplate should honor the "isPublic" flag, false otherwise.
 */
function shouldHonorIsPublic(rfxTemplate) {
    if (!rfxTemplate || !rfxTemplate[_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_2__.A]) {
        return false;
    }
    // If RFT has aliases, honor isPublic
    if (rfxTemplate.aliases) {
        return true;
    }
    const checkRFxArg = (rfxArg) => {
        if (!rfxArg) {
            return false;
        }
        // If rfxArg is public, return true
        if (rfxArg.isPublic) {
            return true;
        }
        // If rfxArg contains raster elements, check if any of the elements are public
        if (hasRasterElements(rfxArg)) {
            const elements = rfxArg.value && rfxArg.value.elements ? rfxArg.value.elements : rfxArg.value;
            if (elements && Array.isArray(elements)) {
                return elements.some((element) => checkRFxArg(element));
            }
        }
        // Recursively check the rfxArg's RFT if it exists
        const rfxArgRFT = getArgRFT(rfxArg);
        return rfxArgRFT ? shouldHonorIsPublic(rfxArgRFT) : false;
    };
    const rfxArgs = rfxTemplate[_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_2__.A];
    if ((0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_2__.a)(rfxArgs)) {
        return checkRFxArg(rfxArgs);
    }
    return Object.keys(rfxArgs).some((rfxArgName) => {
        const rfxArg = rfxArgs[rfxArgName];
        if ((0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_2__.a)(rfxArg)) {
            return checkRFxArg(rfxArg);
        }
    });
}
/**
 * Determines whether to use an RFx argument widget for the given argument schema.
 * @param argSchema - The argument schema to evaluate.
 * @returns True if an RFx argument widget should be used for the given schema, false otherwise.
 */
function useRFxArgWidget(argSchema) {
    if (!argSchema) {
        return false;
    }
    const isRasterArray = argSchema.dataType === _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.rasterArray;
    const hasElementInfos = Boolean(argSchema.elementInfos);
    const isTable = argSchema.dataType === _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.table;
    return (isRasterArray && hasElementInfos) || isTable;
}
/**
 * Check if an argument name is contained in an array of argument names.
 *
 * @param {string[]} argNameArr - Array of argument names.
 * @param {string} argName - Name of the argument to check.
 * @returns {boolean} - `true` if the argument name is contained in the array, `false` otherwise.
 */
function containsArgName(argNameArr, argName) {
    return Array.isArray(argNameArr) && argNameArr.some((activeArg) => activeArg.toLowerCase() === argName.toLowerCase());
}
/**
 * Checks whether an argument has RFT elements in it.
 * Can be { value: { elements[] } }, in which case we check in the elements, else check value itself
 * @param {any} rfxArg - The RFx argument to check for RFT elements.
 * @returns {boolean} True if the argument has RFT elements, false otherwise.
 */
function hasRFTElements(rfxArg) {
    if (!rfxArg || !rfxArg.value) {
        return false;
    }
    const elements = rfxArg.value.elements ? rfxArg.value.elements : rfxArg.value;
    if (Array.isArray(elements)) {
        return elements.some(function (element) {
            return element && element.type === _type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_2__.b;
        });
    }
    return false;
}
function getEnumData(enumData) {
    enumData?.forEach((enumElement) => {
        enumElement.key = enumElement.key.toString();
    });
    return enumData;
    // dont remove this snippet. Can be used when we have to hide parameter options
    // function _removeOptionsToHide(): RFxArgumentEnum {
    //   const optionsToHide = {
    //     StatisticsType: [5, 6, 7], //[median, majority, minority]
    //     RegressionType: [3, 4], // [trendMannKendall, trendSeasonalKendall]
    //     ChangeType: [4, 5, 6, 7] //[longestChange, shortestChange, fastestChange, slowestChange]
    //   };
    //   if (portalMode === "multitenant" && optionsToHide[enumName]) {
    //     enumData = enumData.filter((rfxArgenum) => rfxArgenum && optionsToHide[enumName].indexOf(rfxArgenum.key) < 0);
    //   }
    //   return enumData;
    // }
}
//@resh TODO: remove this function, came with porting, can be done without this.
function parseSwitchableDomainArguments(attributes, rfxArgs) {
    attributes.forEach((attribute) => {
        if (attribute.type === "field") {
            const argument = getCaseInsensitiveArg(attribute.argumentName, rfxArgs);
            attribute.argumentName = argument.name;
            attribute.layerArgument = argument;
        }
        else if (attribute.type === _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list || attribute.type === _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.linearUnit) {
            attribute.enumStore = getEnumData[attribute.enum];
        }
    });
    return attributes;
}
function getRasterArrayInputArgs(argSchema, rfxArgs) {
    let inputArgs;
    const nElementsArgument = getCaseInsensitiveArg(argSchema.nElementsArgument, rfxArgs);
    const nElementsArgumentValue = nElementsArgument?.value;
    const elementInfos = argSchema.elementInfos;
    if ((nElementsArgument === undefined || nElementsArgumentValue === undefined) && elementInfos.length === 1) {
        // For the simple case where the element infos is static, not dependent on another argument
        return elementInfos[0].inputArgs;
    }
    if (Array.isArray(elementInfos)) {
        elementInfos.some((elementInfo) => {
            const values = elementInfo.values;
            if (Array.isArray(values) && values.indexOf(nElementsArgumentValue) > -1) {
                inputArgs = elementInfo.inputArgs;
                return true;
            }
        });
    }
    return inputArgs;
}
/**
 * To check if the given Arg contains any RFT
 * @param rfxArg
 * @returns
 */
function canBuildArgRFTUI(rfxArg) {
    if (!rfxArg)
        return false;
    const argRFT = getArgRFT(rfxArg);
    if (argRFT) {
        return true;
    }
    else if (hasRFTElements(rfxArg)) {
        return true;
    }
    return false;
}
/**
 * To check if a template is a chain or has only one function
 * @param {RFxTemplate} rfxTemplate
 * @returns {boolean} true if template is a function chain or false otherwis
 */
function isFunctionChain(rfxTemplate) {
    let isFnChain = false;
    const rfxArgs = rfxTemplate[_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_2__.A];
    if ((0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_2__.a)(rfxArgs)) {
        // checks if the arguments are of type Raster function template. Then exit with true
        return true;
    }
    // if arguments are not RFT_TYPE , then chances of the rfxTemplate being a chain is ,
    // any of the argument value is an array of RFTs
    for (const rfxTemplateArgName in rfxArgs) {
        if (rfxTemplateArgName === _type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_2__.T) {
            continue;
        }
        const rfxTemplateArg = rfxArgs[rfxTemplateArgName];
        if (canBuildArgRFTUI(rfxTemplateArg)) {
            // checks each argument and if it as RFT elements
            isFnChain = true;
            return isFnChain;
        }
    }
    return isFnChain;
}
/**
 * Get system raster function definition key from input RFT
 * @param {RFxTemplate} rfxTemplate to get the system raster function definition key from
 * @returns {string | undefined} the system RFx definition key or undefined for custom function cases
 */
function getRFxDefKeyFromRFT(rfxTemplate) {
    let functionDefKey = rfxTemplate?.function?.type;
    if (functionDefKey === "LocalFunction") {
        // for local funcitons, return rfx def key as `LocalFunction__${localOp}`
        // for example, return "LocalFunction__1" for Plus function
        const localOp = rfxTemplate.arguments?.Operation?.value?.toString();
        if (localOp !== undefined) {
            functionDefKey += `__${localOp}`;
        }
    }
    return functionDefKey;
}
function isSingleArgRFx({ functionSchema, rfxTemplate }) {
    // Single argument RFTs by design store the Raster Function Variable as the value of arguments property
    const schema = functionSchema;
    let schemaArgs;
    if (schema) {
        schemaArgs = schema.rasterFunctionArguments;
        if (Object.keys(schemaArgs).length === 1 && !schema.hasArgumentsObject) {
            return true;
        }
    }
    const rfxArgs = rfxTemplate.arguments, argsType = rfxArgs && rfxArgs.type;
    if (argsType &&
        (argsType === _interfaces_d0c68944_js__WEBPACK_IMPORTED_MODULE_4__.J.RASTER_FUNCTION_TEMPLATE || argsType === _interfaces_d0c68944_js__WEBPACK_IMPORTED_MODULE_4__.J.RASTER_FUNCTION_VARIABLE)) {
        return true;
    }
}
function getArguments({ functionSchema, rfxTemplate }) {
    if (!rfxTemplate) {
        return;
    }
    const args = [], rfxArgs = rfxTemplate.arguments, argsType = rfxArgs && rfxArgs.type;
    if (isSingleArgRFx({ functionSchema, rfxTemplate })) {
        const arg = _arcgis_core_core_lang_js__WEBPACK_IMPORTED_MODULE_0__.clone(rfxArgs);
        let argKey;
        if (argsType === _interfaces_d0c68944_js__WEBPACK_IMPORTED_MODULE_4__.J.RASTER_FUNCTION_TEMPLATE || arg.isDataset) {
            // Aspect or similar raster function with a single raster argument
            argKey = "Raster";
        }
        else {
            // CompositeBand or similar
            argKey = "Rasters";
        }
        args.push({ ...arg, key: argKey });
        return args;
    }
    Object.keys(rfxArgs).forEach((rfxArgKey) => {
        if (rfxArgKey === _interfaces_d0c68944_js__WEBPACK_IMPORTED_MODULE_4__.M.MATCH_VARIABLE || rfxArgKey === _interfaces_d0c68944_js__WEBPACK_IMPORTED_MODULE_4__.M.UNION_DIMENSION) {
            return;
        }
        const rfxArg = _arcgis_core_core_lang_js__WEBPACK_IMPORTED_MODULE_0__.clone(rfxArgs[rfxArgKey]);
        if ((0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_2__.a)(rfxArg)) {
            args.push({ ...rfxArg, key: rfxArgKey });
        }
    });
    return args;
}
function getInputArgsFromElementInfos(elementInfos, nElementsArgument) {
    const nElementsArgumentValue = nElementsArgument && nElementsArgument.value;
    if (nElementsArgumentValue == null) {
        return;
    }
    let inputArgs;
    elementInfos.some((elementInfo) => {
        if (elementInfo.values && elementInfo.values.indexOf(nElementsArgumentValue) > -1) {
            inputArgs = elementInfo.inputArgs;
            return true;
        }
    });
    return inputArgs;
}



//# sourceMappingURL=rfx-args-helper-ab401543.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,