"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_overwr-a51470"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/overwrite-7eb8dfd4.js":
/*!***************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/overwrite-7eb8dfd4.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ getPublishParameters),
/* harmony export */   b: () => (/* binding */ updateItemOverwrite),
/* harmony export */   c: () => (/* binding */ updateItemResource),
/* harmony export */   f: () => (/* binding */ fetchAndUpdateItem),
/* harmony export */   g: () => (/* binding */ getTokenFromProvider),
/* harmony export */   p: () => (/* binding */ publishForOverwrite),
/* harmony export */   r: () => (/* binding */ resetServiceTitle),
/* harmony export */   u: () => (/* binding */ updateTypeKeywords)
/* harmony export */ });
/* harmony import */ var _feature_layer_573bb473_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./feature-layer-573bb473.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/feature-layer-573bb473.js");
/* harmony import */ var _publish_item_17d2f9a3_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./publish-item-17d2f9a3.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/publish-item-17d2f9a3.js");
/* harmony import */ var _server_item_8d384796_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./server-item-8d384796.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/server-item-8d384796.js");
/* harmony import */ var _append_4e11032c_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./append-4e11032c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/append-4e11032c.js");
/* harmony import */ var _portal_d518b571_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./portal-d518b571.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/portal-d518b571.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */






const getFormParameters = (item) => {
    const { name, title, tags, type, typeKeywords, accessInformation, licenseInfo, description, snippet, extent } = item;
    return {
        name,
        title,
        tags,
        type,
        typeKeywords,
        accessInformation,
        licenseInfo,
        description,
        snippet,
        extent
    };
};
const getFormData = (item, addItemProps) => {
    //for parameters of updating source data of feature layer.
    const overwriteOn = !!addItemProps.overwrite;
    const formProperties = getFormParameters(item);
    const formData = new FormData();
    Object.keys(formProperties).forEach((property) => {
        var _a;
        if (property === "description" || property === "snippet" || property === "extent") {
            formData.append(property, addItemProps.keepDescription ? formProperties[property] : "");
        }
        else {
            formData.append(property, (_a = formProperties[property]) !== null && _a !== void 0 ? _a : "");
        }
    });
    formData.set("overwrite", "true");
    formData.set("async", "true");
    formData.set("file", addItemProps.file, item.title);
    if (overwriteOn) {
        formData.set("overwriteService", "on");
    }
    formData.set("useDescription", "on");
    return formData;
};
const createOverwritePublishParameters = (serviceInfo, item, newItemId) => {
    var _a, _b, _c, _d, _e;
    const itemPublishParameters = item === null || item === void 0 ? void 0 : item.publishParameters;
    const itemData = (_a = item === null || item === void 0 ? void 0 : item.sourceData) !== null && _a !== void 0 ? _a : item;
    const type = (_c = (_b = item === null || item === void 0 ? void 0 : item.sourceData) === null || _b === void 0 ? void 0 : _b.type) !== null && _c !== void 0 ? _c : _append_4e11032c_js__WEBPACK_IMPORTED_MODULE_3__.A[(_d = item === null || item === void 0 ? void 0 : item.cloudProviderInfo) === null || _d === void 0 ? void 0 : _d.mimeType];
    const finalOverwriteParameters = {
        itemId: newItemId !== null && newItemId !== void 0 ? newItemId : itemData.id,
        filetype: _append_4e11032c_js__WEBPACK_IMPORTED_MODULE_3__.b[type.toLowerCase()],
        overwrite: true,
        deleteSourceItemUponCompletion: !!newItemId
    };
    let publishParameters;
    switch (type) {
        case "CSV": {
            const layerInfo = Object.assign(Object.assign({}, (_e = serviceInfo.layers) === null || _e === void 0 ? void 0 : _e[0]), { fields: itemPublishParameters.layerInfo.fields });
            publishParameters = Object.assign(Object.assign({ layerInfo, name: itemPublishParameters.name || itemData.title.replace(/ /g, "_") }, itemPublishParameters), serviceInfo);
            break;
        }
        case "Microsoft Excel": {
            publishParameters = generateExcelOverwritePublishParameters(itemPublishParameters, serviceInfo);
            break;
        }
        default:
            publishParameters = Object.assign(Object.assign(Object.assign({}, itemPublishParameters), serviceInfo), { name: itemData.title ? itemData.title.replace(/ /g, "_") : item.title.replace(/ /g, "_") });
            break;
    }
    finalOverwriteParameters.publishParameters = JSON.stringify(publishParameters);
    return finalOverwriteParameters;
};
const generateExcelOverwritePublishParameters = (publishParameters, serviceInfo) => {
    const finalOverwriteParameters = Object.assign({}, serviceInfo);
    //service level properties
    finalOverwriteParameters.name = publishParameters.name;
    finalOverwriteParameters.sourceSR = publishParameters.sourceSR;
    finalOverwriteParameters.targetSR = publishParameters.targetSR;
    //table is not valid in excel publish parameters, so copy to layer
    for (let i = 0; i < finalOverwriteParameters.tables.length; i++) {
        //if excel has Review Table, ignore it
        if (finalOverwriteParameters.tables[i].name != "Review") {
            finalOverwriteParameters.layers[finalOverwriteParameters.layers.length] = finalOverwriteParameters.tables[i];
        }
    }
    for (let layer of finalOverwriteParameters.layers) {
        const { excelSheetId, locationType, latitudeFieldName, longitudeFieldName, geocodeServiceUrl, sourceLocale, sourceCountry, standardizedFieldNames, addressFields, coordinateFieldName, coordinateFieldType, fields, dateFieldsTimeReference } = publishParameters.layers[layer.id];
        const propertiesToUpdate = {
            excelSheetId,
            locationType,
            latitudeFieldName,
            longitudeFieldName,
            geocodeServiceUrl,
            sourceLocale,
            sourceCountry,
            standardizedFieldNames,
            addressFields,
            coordinateFieldName,
            coordinateFieldType,
            fields,
            dateFieldsTimeReference
        };
        finalOverwriteParameters.layers[layer.id] = Object.assign({}, propertiesToUpdate);
    }
    return finalOverwriteParameters;
};

const publishForOverwrite = async (item, title, portal, user) => {
    var _a, _b;
    const params = await getPublishParameters(item, portal, user);
    const publishResponse = await (0,_publish_item_17d2f9a3_js__WEBPACK_IMPORTED_MODULE_1__.p)({ itemId: item.sourceData.id, user, title, itemOwnerUrl: item.itemOwner.userContentUrl }, // ! Use fetchUser if itemOwner is not available
    params);
    const service = (_b = (_a = publishResponse.result) === null || _a === void 0 ? void 0 : _a.services) === null || _b === void 0 ? void 0 : _b[0];
    return {
        id: service === null || service === void 0 ? void 0 : service.serviceItemId,
        jobId: service === null || service === void 0 ? void 0 : service.jobId,
        serviceType: service === null || service === void 0 ? void 0 : service.type,
        serviceUrl: service === null || service === void 0 ? void 0 : service.serviceurl,
        overwriteStatus: ""
    };
};
const getPublishParameters = async (item, portal, user, newItemId) => {
    const { result: serviceInfo } = await fetchFeatureServiceInfoForOverwrite(item, portal, false, user);
    return await createOverwritePublishParameters(serviceInfo, item, newItemId);
};
const fetchAndUpdateItem = async (item, userContentUrl, addItemProps) => {
    const sourceData = item.sourceData;
    try {
        await updateItemOverwrite(sourceData, userContentUrl, {
            file: addItemProps.file,
            overwrite: addItemProps.overwrite,
            keepDescription: addItemProps.keepDescription
        });
        await (0,_publish_item_17d2f9a3_js__WEBPACK_IMPORTED_MODULE_1__.c)({ id: sourceData.id, folder: "", success: true });
        return {};
    }
    catch (error) {
        console.error(error);
        return { error: { code: "unhandledError" } };
    }
};
const updateItemOverwrite = async (item, userContentUrl, addItemProps) => {
    const url = `${userContentUrl}/items/${item.id}/update`;
    const formData = getFormData(item, {
        file: addItemProps.file,
        overwrite: addItemProps.overwrite,
        keepDescription: addItemProps.keepDescription
    });
    return await (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_4__.d)(url, formData, {}, "post");
};
const fetchFeatureServiceInfoForOverwrite = async (item, portal, isSecure, user) => {
    try {
        const { url } = item;
        const serviceInfo = await (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_4__.r)(url);
        const serviceLayerInfo = await (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_4__.r)(url + "/layers");
        const formattedLayers = serviceLayerInfo === null || serviceLayerInfo === void 0 ? void 0 : serviceLayerInfo.layers.map((layer) => {
            delete layer.fields;
            return layer;
        });
        serviceInfo.tables = [...serviceLayerInfo === null || serviceLayerInfo === void 0 ? void 0 : serviceLayerInfo.tables];
        serviceInfo.layers = [...formattedLayers];
        return { result: serviceInfo };
    }
    catch (error) {
        if (!isSecure && (((error === null || error === void 0 ? void 0 : error.code) === 499 && (error === null || error === void 0 ? void 0 : error.message) === "Token Required") || error.code === 403) && user) {
            return fetchFeatureServiceInfoForOverwrite(item, portal, true, user);
        }
        console.error(error);
        return { error: { code: "unhandledError" } };
    }
};
const resetServiceTitle = async (item) => {
    let keywords = item.typeKeywords.toString();
    const updateContent = {
        title: item.title || "",
        tags: item.tags.toString() || ""
    };
    if (item.typeKeywords.indexOf("Involved Lookup") !== -1) {
        keywords += ",showUnmatchedAddresses";
        updateContent["typeKeywords"] = keywords;
    }
    try {
        const response = await (0,_server_item_8d384796_js__WEBPACK_IMPORTED_MODULE_2__.u)(item.id, updateContent);
        const jobStatus = await (0,_feature_layer_573bb473_js__WEBPACK_IMPORTED_MODULE_0__.x)(item.id, { success: response === null || response === void 0 ? void 0 : response.success });
        if (jobStatus.status === "failed") {
            return { error: { code: "unhandledError" } };
        }
        return { result: jobStatus };
    }
    catch (error) {
        console.error("error:", error);
        return { error: { code: "unhandledError" } };
    }
};
//for vector tile service case
const updateItemResource = async (item, userContentUrl, addItemProps) => {
    const folderId = item.folderId || item.ownerFolder;
    const url = `${userContentUrl}/${folderId ? folderId : ""}/items/${item.id}/updateResources`;
    const formData = new FormData();
    formData.set("file", addItemProps.file);
    formData.set("resourcesPrefix", "styles");
    formData.set("filename", "root.json");
    try {
        const response = await (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_4__.d)(url, formData, {}, "post");
        return { result: response };
    }
    catch (error) {
        console.error(error);
        return { error: { code: "unhandledError" } };
    }
};
const updateTypeKeywords = async (publishParametersJSON, item, serviceItemId) => {
    let typeKeywords = ["Cloud Drive"];
    const publishParameters = JSON.parse(publishParametersJSON);
    if (publishParameters.locationType === "address" ||
        (publishParameters.layers[0] && publishParameters.layers[0].locationType === "address")) {
        typeKeywords.push("showUnmatchedAddresses");
        typeKeywords.push("Involved Lookup");
    }
    else if (publishParameters.locationType === "none" ||
        (publishParameters.layers[0] && publishParameters.layers[0].locationType === "none")) {
        typeKeywords.push("Table");
    }
    const finalTypeKeywords = typeKeywords.join(",");
    return await (0,_server_item_8d384796_js__WEBPACK_IMPORTED_MODULE_2__.u)(item.id, {
        folderId: (item === null || item === void 0 ? void 0 : item.folderId) || item.ownerFolder,
        id: serviceItemId,
        typeKeywords: finalTypeKeywords
    });
};
async function getTokenFromProvider(provider) {
    try {
        const token = await provider.connect();
        return { result: token };
    }
    catch (error) {
        return { error: { code: "unhandledError" } };
    }
}



//# sourceMappingURL=overwrite-7eb8dfd4.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,