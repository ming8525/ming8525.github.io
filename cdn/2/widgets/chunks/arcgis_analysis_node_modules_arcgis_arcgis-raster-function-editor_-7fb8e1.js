"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_arcgis-raster-function-editor_-7fb8e1"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/multidimensional-helper-fc8fbe0e.js":
/*!********************************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/multidimensional-helper-fc8fbe0e.js ***!
  \********************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ clone),
/* harmony export */   b: () => (/* binding */ getUniqueDimensionsForSelectedVariables),
/* harmony export */   c: () => (/* binding */ cloneData),
/* harmony export */   d: () => (/* binding */ getDimensionValuesForSelectedDimension),
/* harmony export */   e: () => (/* binding */ initRecurrentIntervalName),
/* harmony export */   g: () => (/* binding */ getDimensionRangeValuesForSelectedDimension),
/* harmony export */   i: () => (/* binding */ isItemInDropdown),
/* harmony export */   m: () => (/* binding */ multidimensionalDefinitionParser)
/* harmony export */ });
/* harmony import */ var _type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./type-gaurds-1840747f.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/type-gaurds-1840747f.js");
/* harmony import */ var _Uint8Array_68e1e3f9_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_Uint8Array-68e1e3f9.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/_Uint8Array-68e1e3f9.js");
/* harmony import */ var _getTag_96af029d_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_getTag-96af029d.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/_getTag-96af029d.js");




/** Built-in value references. */
var objectCreate = Object.create;

/**
 * The base implementation of `_.create` without support for assigning
 * properties to the created object.
 *
 * @private
 * @param {Object} proto The object to inherit from.
 * @returns {Object} Returns the new object.
 */
var baseCreate = (function() {
  function object() {}
  return function(proto) {
    if (!(0,_getTag_96af029d_js__WEBPACK_IMPORTED_MODULE_2__.j)(proto)) {
      return {};
    }
    if (objectCreate) {
      return objectCreate(proto);
    }
    object.prototype = proto;
    var result = new object;
    object.prototype = undefined;
    return result;
  };
}());

/**
 * Copies the values of `source` to `array`.
 *
 * @private
 * @param {Array} source The array to copy values from.
 * @param {Array} [array=[]] The array to copy values to.
 * @returns {Array} Returns `array`.
 */
function copyArray(source, array) {
  var index = -1,
      length = source.length;

  array || (array = Array(length));
  while (++index < length) {
    array[index] = source[index];
  }
  return array;
}

/**
 * A specialized version of `_.forEach` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns `array`.
 */
function arrayEach(array, iteratee) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    if (iteratee(array[index], index, array) === false) {
      break;
    }
  }
  return array;
}

/**
 * The base implementation of `_.assign` without support for multiple sources
 * or `customizer` functions.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @returns {Object} Returns `object`.
 */
function baseAssign(object, source) {
  return object && (0,_Uint8Array_68e1e3f9_js__WEBPACK_IMPORTED_MODULE_1__.c)(source, (0,_Uint8Array_68e1e3f9_js__WEBPACK_IMPORTED_MODULE_1__.b)(source), object);
}

/**
 * The base implementation of `_.assignIn` without support for multiple sources
 * or `customizer` functions.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @returns {Object} Returns `object`.
 */
function baseAssignIn(object, source) {
  return object && (0,_Uint8Array_68e1e3f9_js__WEBPACK_IMPORTED_MODULE_1__.c)(source, (0,_Uint8Array_68e1e3f9_js__WEBPACK_IMPORTED_MODULE_1__.k)(source), object);
}

/** Detect free variable `exports`. */
var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Built-in value references. */
var Buffer = moduleExports ? _getTag_96af029d_js__WEBPACK_IMPORTED_MODULE_2__.r.Buffer : undefined,
    allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;

/**
 * Creates a clone of  `buffer`.
 *
 * @private
 * @param {Buffer} buffer The buffer to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Buffer} Returns the cloned buffer.
 */
function cloneBuffer(buffer, isDeep) {
  if (isDeep) {
    return buffer.slice();
  }
  var length = buffer.length,
      result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

  buffer.copy(result);
  return result;
}

/**
 * Copies own symbols of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy symbols from.
 * @param {Object} [object={}] The object to copy symbols to.
 * @returns {Object} Returns `object`.
 */
function copySymbols(source, object) {
  return (0,_Uint8Array_68e1e3f9_js__WEBPACK_IMPORTED_MODULE_1__.c)(source, (0,_Uint8Array_68e1e3f9_js__WEBPACK_IMPORTED_MODULE_1__.f)(source), object);
}

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeGetSymbols = Object.getOwnPropertySymbols;

/**
 * Creates an array of the own and inherited enumerable symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */
var getSymbolsIn = !nativeGetSymbols ? _Uint8Array_68e1e3f9_js__WEBPACK_IMPORTED_MODULE_1__.s : function(object) {
  var result = [];
  while (object) {
    (0,_Uint8Array_68e1e3f9_js__WEBPACK_IMPORTED_MODULE_1__.h)(result, (0,_Uint8Array_68e1e3f9_js__WEBPACK_IMPORTED_MODULE_1__.f)(object));
    object = (0,_getTag_96af029d_js__WEBPACK_IMPORTED_MODULE_2__.m)(object);
  }
  return result;
};

/**
 * Copies own and inherited symbols of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy symbols from.
 * @param {Object} [object={}] The object to copy symbols to.
 * @returns {Object} Returns `object`.
 */
function copySymbolsIn(source, object) {
  return (0,_Uint8Array_68e1e3f9_js__WEBPACK_IMPORTED_MODULE_1__.c)(source, getSymbolsIn(source), object);
}

/**
 * Creates an array of own and inherited enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */
function getAllKeysIn(object) {
  return (0,_Uint8Array_68e1e3f9_js__WEBPACK_IMPORTED_MODULE_1__.j)(object, _Uint8Array_68e1e3f9_js__WEBPACK_IMPORTED_MODULE_1__.k, getSymbolsIn);
}

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Initializes an array clone.
 *
 * @private
 * @param {Array} array The array to clone.
 * @returns {Array} Returns the initialized clone.
 */
function initCloneArray(array) {
  var length = array.length,
      result = new array.constructor(length);

  // Add properties assigned by `RegExp#exec`.
  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
    result.index = array.index;
    result.input = array.input;
  }
  return result;
}

/**
 * Creates a clone of `arrayBuffer`.
 *
 * @private
 * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
 * @returns {ArrayBuffer} Returns the cloned array buffer.
 */
function cloneArrayBuffer(arrayBuffer) {
  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
  new _Uint8Array_68e1e3f9_js__WEBPACK_IMPORTED_MODULE_1__.U(result).set(new _Uint8Array_68e1e3f9_js__WEBPACK_IMPORTED_MODULE_1__.U(arrayBuffer));
  return result;
}

/**
 * Creates a clone of `dataView`.
 *
 * @private
 * @param {Object} dataView The data view to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned data view.
 */
function cloneDataView(dataView, isDeep) {
  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
}

/** Used to match `RegExp` flags from their coerced string values. */
var reFlags = /\w*$/;

/**
 * Creates a clone of `regexp`.
 *
 * @private
 * @param {Object} regexp The regexp to clone.
 * @returns {Object} Returns the cloned regexp.
 */
function cloneRegExp(regexp) {
  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
  result.lastIndex = regexp.lastIndex;
  return result;
}

/** Used to convert symbols to primitives and strings. */
var symbolProto = _getTag_96af029d_js__WEBPACK_IMPORTED_MODULE_2__.S ? _getTag_96af029d_js__WEBPACK_IMPORTED_MODULE_2__.S.prototype : undefined,
    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

/**
 * Creates a clone of the `symbol` object.
 *
 * @private
 * @param {Object} symbol The symbol object to clone.
 * @returns {Object} Returns the cloned symbol object.
 */
function cloneSymbol(symbol) {
  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
}

/**
 * Creates a clone of `typedArray`.
 *
 * @private
 * @param {Object} typedArray The typed array to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned typed array.
 */
function cloneTypedArray(typedArray, isDeep) {
  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
}

/** `Object#toString` result references. */
var boolTag$1 = '[object Boolean]',
    dateTag$1 = '[object Date]',
    mapTag$2 = '[object Map]',
    numberTag$1 = '[object Number]',
    regexpTag$1 = '[object RegExp]',
    setTag$2 = '[object Set]',
    stringTag$1 = '[object String]',
    symbolTag$1 = '[object Symbol]';

var arrayBufferTag$1 = '[object ArrayBuffer]',
    dataViewTag$1 = '[object DataView]',
    float32Tag$1 = '[object Float32Array]',
    float64Tag$1 = '[object Float64Array]',
    int8Tag$1 = '[object Int8Array]',
    int16Tag$1 = '[object Int16Array]',
    int32Tag$1 = '[object Int32Array]',
    uint8Tag$1 = '[object Uint8Array]',
    uint8ClampedTag$1 = '[object Uint8ClampedArray]',
    uint16Tag$1 = '[object Uint16Array]',
    uint32Tag$1 = '[object Uint32Array]';

/**
 * Initializes an object clone based on its `toStringTag`.
 *
 * **Note:** This function only supports cloning values with tags of
 * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
 *
 * @private
 * @param {Object} object The object to clone.
 * @param {string} tag The `toStringTag` of the object to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the initialized clone.
 */
function initCloneByTag(object, tag, isDeep) {
  var Ctor = object.constructor;
  switch (tag) {
    case arrayBufferTag$1:
      return cloneArrayBuffer(object);

    case boolTag$1:
    case dateTag$1:
      return new Ctor(+object);

    case dataViewTag$1:
      return cloneDataView(object, isDeep);

    case float32Tag$1: case float64Tag$1:
    case int8Tag$1: case int16Tag$1: case int32Tag$1:
    case uint8Tag$1: case uint8ClampedTag$1: case uint16Tag$1: case uint32Tag$1:
      return cloneTypedArray(object, isDeep);

    case mapTag$2:
      return new Ctor;

    case numberTag$1:
    case stringTag$1:
      return new Ctor(object);

    case regexpTag$1:
      return cloneRegExp(object);

    case setTag$2:
      return new Ctor;

    case symbolTag$1:
      return cloneSymbol(object);
  }
}

/**
 * Initializes an object clone.
 *
 * @private
 * @param {Object} object The object to clone.
 * @returns {Object} Returns the initialized clone.
 */
function initCloneObject(object) {
  return (typeof object.constructor == 'function' && !(0,_getTag_96af029d_js__WEBPACK_IMPORTED_MODULE_2__.e)(object))
    ? baseCreate((0,_getTag_96af029d_js__WEBPACK_IMPORTED_MODULE_2__.m)(object))
    : {};
}

/** `Object#toString` result references. */
var mapTag$1 = '[object Map]';

/**
 * The base implementation of `_.isMap` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a map, else `false`.
 */
function baseIsMap(value) {
  return (0,_getTag_96af029d_js__WEBPACK_IMPORTED_MODULE_2__.k)(value) && (0,_getTag_96af029d_js__WEBPACK_IMPORTED_MODULE_2__.g)(value) == mapTag$1;
}

/* Node.js helper references. */
var nodeIsMap = _getTag_96af029d_js__WEBPACK_IMPORTED_MODULE_2__.o && _getTag_96af029d_js__WEBPACK_IMPORTED_MODULE_2__.o.isMap;

/**
 * Checks if `value` is classified as a `Map` object.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a map, else `false`.
 * @example
 *
 * _.isMap(new Map);
 * // => true
 *
 * _.isMap(new WeakMap);
 * // => false
 */
var isMap = nodeIsMap ? (0,_getTag_96af029d_js__WEBPACK_IMPORTED_MODULE_2__.n)(nodeIsMap) : baseIsMap;

/** `Object#toString` result references. */
var setTag$1 = '[object Set]';

/**
 * The base implementation of `_.isSet` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a set, else `false`.
 */
function baseIsSet(value) {
  return (0,_getTag_96af029d_js__WEBPACK_IMPORTED_MODULE_2__.k)(value) && (0,_getTag_96af029d_js__WEBPACK_IMPORTED_MODULE_2__.g)(value) == setTag$1;
}

/* Node.js helper references. */
var nodeIsSet = _getTag_96af029d_js__WEBPACK_IMPORTED_MODULE_2__.o && _getTag_96af029d_js__WEBPACK_IMPORTED_MODULE_2__.o.isSet;

/**
 * Checks if `value` is classified as a `Set` object.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a set, else `false`.
 * @example
 *
 * _.isSet(new Set);
 * // => true
 *
 * _.isSet(new WeakSet);
 * // => false
 */
var isSet = nodeIsSet ? (0,_getTag_96af029d_js__WEBPACK_IMPORTED_MODULE_2__.n)(nodeIsSet) : baseIsSet;

/** Used to compose bitmasks for cloning. */
var CLONE_DEEP_FLAG = 1,
    CLONE_FLAT_FLAG = 2,
    CLONE_SYMBOLS_FLAG$1 = 4;

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    objectTag = '[object Object]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    symbolTag = '[object Symbol]',
    weakMapTag = '[object WeakMap]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

/** Used to identify `toStringTag` values supported by `_.clone`. */
var cloneableTags = {};
cloneableTags[argsTag] = cloneableTags[arrayTag] =
cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
cloneableTags[boolTag] = cloneableTags[dateTag] =
cloneableTags[float32Tag] = cloneableTags[float64Tag] =
cloneableTags[int8Tag] = cloneableTags[int16Tag] =
cloneableTags[int32Tag] = cloneableTags[mapTag] =
cloneableTags[numberTag] = cloneableTags[objectTag] =
cloneableTags[regexpTag] = cloneableTags[setTag] =
cloneableTags[stringTag] = cloneableTags[symbolTag] =
cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
cloneableTags[errorTag] = cloneableTags[funcTag] =
cloneableTags[weakMapTag] = false;

/**
 * The base implementation of `_.clone` and `_.cloneDeep` which tracks
 * traversed objects.
 *
 * @private
 * @param {*} value The value to clone.
 * @param {boolean} bitmask The bitmask flags.
 *  1 - Deep clone
 *  2 - Flatten inherited properties
 *  4 - Clone symbols
 * @param {Function} [customizer] The function to customize cloning.
 * @param {string} [key] The key of `value`.
 * @param {Object} [object] The parent object of `value`.
 * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
 * @returns {*} Returns the cloned value.
 */
function baseClone(value, bitmask, customizer, key, object, stack) {
  var result,
      isDeep = bitmask & CLONE_DEEP_FLAG,
      isFlat = bitmask & CLONE_FLAT_FLAG,
      isFull = bitmask & CLONE_SYMBOLS_FLAG$1;

  if (customizer) {
    result = object ? customizer(value, key, object, stack) : customizer(value);
  }
  if (result !== undefined) {
    return result;
  }
  if (!(0,_getTag_96af029d_js__WEBPACK_IMPORTED_MODULE_2__.j)(value)) {
    return value;
  }
  var isArr = (0,_getTag_96af029d_js__WEBPACK_IMPORTED_MODULE_2__.a)(value);
  if (isArr) {
    result = initCloneArray(value);
    if (!isDeep) {
      return copyArray(value, result);
    }
  } else {
    var tag = (0,_getTag_96af029d_js__WEBPACK_IMPORTED_MODULE_2__.g)(value),
        isFunc = tag == funcTag || tag == genTag;

    if ((0,_getTag_96af029d_js__WEBPACK_IMPORTED_MODULE_2__.b)(value)) {
      return cloneBuffer(value, isDeep);
    }
    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
      result = (isFlat || isFunc) ? {} : initCloneObject(value);
      if (!isDeep) {
        return isFlat
          ? copySymbolsIn(value, baseAssignIn(result, value))
          : copySymbols(value, baseAssign(result, value));
      }
    } else {
      if (!cloneableTags[tag]) {
        return object ? value : {};
      }
      result = initCloneByTag(value, tag, isDeep);
    }
  }
  // Check for circular references and return its corresponding clone.
  stack || (stack = new _Uint8Array_68e1e3f9_js__WEBPACK_IMPORTED_MODULE_1__.S);
  var stacked = stack.get(value);
  if (stacked) {
    return stacked;
  }
  stack.set(value, result);

  if (isSet(value)) {
    value.forEach(function(subValue) {
      result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
    });
  } else if (isMap(value)) {
    value.forEach(function(subValue, key) {
      result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
    });
  }

  var keysFunc = isFull
    ? (isFlat ? getAllKeysIn : _Uint8Array_68e1e3f9_js__WEBPACK_IMPORTED_MODULE_1__.g)
    : (isFlat ? _Uint8Array_68e1e3f9_js__WEBPACK_IMPORTED_MODULE_1__.k : _Uint8Array_68e1e3f9_js__WEBPACK_IMPORTED_MODULE_1__.b);

  var props = isArr ? undefined : keysFunc(value);
  arrayEach(props || value, function(subValue, key) {
    if (props) {
      key = subValue;
      subValue = value[key];
    }
    // Recursively populate clone (susceptible to call stack limits).
    (0,_Uint8Array_68e1e3f9_js__WEBPACK_IMPORTED_MODULE_1__.a)(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
  });
  return result;
}

/** Used to compose bitmasks for cloning. */
var CLONE_SYMBOLS_FLAG = 4;

/**
 * Creates a shallow clone of `value`.
 *
 * **Note:** This method is loosely based on the
 * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
 * and supports cloning arrays, array buffers, booleans, date objects, maps,
 * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
 * arrays. The own enumerable properties of `arguments` objects are cloned
 * as plain objects. An empty object is returned for uncloneable values such
 * as error objects, functions, DOM nodes, and WeakMaps.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to clone.
 * @returns {*} Returns the cloned value.
 * @see _.cloneDeep
 * @example
 *
 * var objects = [{ 'a': 1 }, { 'b': 2 }];
 *
 * var shallow = _.clone(objects);
 * console.log(shallow[0] === objects[0]);
 * // => true
 */
function clone(value) {
  return baseClone(value, CLONE_SYMBOLS_FLAG);
}

function getFormattedDateString(date) {
    return new Date(Number(date)).toISOString().replace("Z", "");
}
function parseFormattedDateString(date) {
    return new Date(date + "Z").getTime();
}
function mapObjectByProperty(items, key) {
    return items.map((item) => item[key]);
}
function itemInArray(array, item) {
    return array.some((element) => {
        return element.label === item.label;
    });
}
function isArrayUnique(arr) {
    return arr.every(function (a, idx, _arr) {
        return _arr.indexOf(a, idx + 1) >= 0 ? false : true;
    });
}
function removeDuplicatesFromArray(array) {
    /* works only for simple datatypes not objects */
    return array.filter(function (value, index, _array) {
        return _array.indexOf(value) === index;
    });
}
let translatedMonthMapper;
// Done to avoid making add createDataObject functions async
function initRecurrentIntervalName(strings) {
    const monthMapper = {
        1: "esriMonthJanuary",
        2: "esriMonthFebruary",
        3: "esriMonthMarch",
        4: "esriMonthApril",
        5: "esriMonthMay",
        6: "esriMonthJune",
        7: "esriMonthJuly",
        8: "esriMonthAugust",
        9: "esriMonthSeptember",
        10: "esriMonthOctober",
        11: "esriMonthNovember",
        12: "esriMonthDecember"
    };
    translatedMonthMapper = {
        1: strings[monthMapper[1]],
        2: strings[monthMapper[2]],
        3: strings[monthMapper[3]],
        4: strings[monthMapper[4]],
        5: strings[monthMapper[5]],
        6: strings[monthMapper[6]],
        7: strings[monthMapper[7]],
        8: strings[monthMapper[8]],
        9: strings[monthMapper[9]],
        10: strings[monthMapper[10]],
        11: strings[monthMapper[11]],
        12: strings[monthMapper[12]]
    };
}
function getRecurrentIntervalName(value, interval, intervalUnitStr) {
    const getMonthName = (month) => translatedMonthMapper[month];
    const formatValueName = (month) => `${value} (${getMonthName(month)})`;
    const formatIntervalName = (start, end) => `${value} (${getMonthName(start)} - ${getMonthName(end)})`;
    // check if intervalUnitStr is undefined / empty / null
    if (intervalUnitStr && intervalUnitStr === "") {
        return value.toString();
    }
    const isIntervalUnitMonth = intervalUnitStr === "Months";
    const isIntervalUnitQuarter = intervalUnitStr === "Quarters";
    if (!isIntervalUnitMonth && !isIntervalUnitQuarter) {
        return value.toString();
    }
    // Interval = Monthly => Values should be Jan, Feb, Mar, Apr etc
    if (interval == 1 && isIntervalUnitMonth) {
        return formatValueName(+value);
    }
    // Interval = Quarterly  => Values should be Jan-Mar, Apr-Jun etc
    // Quarterly could mean interval unit as 1 quarter or 3 months.
    // Dimension values will be as follows:
    // Interval unit - 1 quarter : 1,2,3,4
    // Interval unit - 3 months : 1,4,7,10
    switch (+value) {
        case 1:
            return formatIntervalName(1, 3);
        case 2:
            return formatIntervalName(4, 6);
        case 3:
        case 7:
            return formatIntervalName(7, 9);
        case 4:
            return isIntervalUnitQuarter ? formatIntervalName(10, 12) : formatIntervalName(4, 6);
        case 10:
            return formatIntervalName(10, 12);
    }
    return value.toString();
}
/**
 * Retrieves an array of variables from the given multidimensional data.
 *
 * @param {GetVariablesOptions} options - The options for getting variables.
 * @param {MultidimensionalInfo} options.multiDimensionalData - The multidimensional data containing variables.
 * @param {string[]} [options.selectedVariables=[]] - An array of selected variable names.
 * @returns {MultiDimensionalVariable[]} An array of multi-dimensional variables.
 */
function getVariables(options) {
    const { multiDimensionalData, selectedVariables = [] } = options;
    // If selectedVariables is empty, return all variables
    const variables = multiDimensionalData.variables.filter((variable) => {
        const isVariableSelected = selectedVariables.some((selectedVariable) => {
            // Handle cases of persisted data and first-time data
            return selectedVariable === variable.name;
        });
        // Return true for variables that should remain in the array
        return selectedVariables.length > 0
            ? isVariableSelected // Return true if variable is found in selectedVariables
            : true; // If length is 0, return true to keep all variables in the array
    });
    return variables;
}
/**
 * Retrieves an array of selected dimensions from the given array of multidimensional variables.
 *
 * If the array of multidimensional variables is empty, all dimensions of all variables are returned.
 * If the selected dimension is empty, all dimensions of the variables are returned.
 *
 * @param {GetDimensionsOptions} options - The options for getting dimensions.
 * @param {MultiDimensionalVariable[]} options.variables - An array of multidimensional variables.
 * @param {string} [options.selectedDimension=""] - The name of the selected dimension.
 * @returns {MultiDimensionalDimension[]} An array of multi-dimensional dimensions.
 */
function getDimensions(options) {
    const { variables = [], selectedDimension = "" } = options;
    const dimensions = variables.reduce((acc, variable) => {
        const dim = variable.dimensions.filter((dimension) => (0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_0__.i)(selectedDimension) ? true : dimension.name === selectedDimension);
        return dim.length ? [...acc, ...dim] : acc;
    }, []);
    return dimensions;
}
/**
 * Takes an array of Multidimensional Dimensions and returns formatted label and values
 * based on dimension ranges and recurring options.
 *
 * @param {MultiDimensionalDimension[]} dimensions - An array of Multidimensional Dimensions.
 * @returns {MultidimensionalDropdownOption[]} Formatted dimension values for dropdown options.
 */
function getFormattedDimensionValues(dimensions) {
    const data = [];
    const STD_TIME = "StdTime";
    dimensions.forEach(function (dimension) {
        const hasRanges = dimension.hasRanges;
        const isRecurring = dimension.recurring;
        let dropdownOption;
        dimension.values.forEach(function (val) {
            // Value can be a number, string, or array of string|number.
            // Convert everything to an array to keep operations uniform.
            let dimensionValue = clone(val);
            if (!hasRanges) {
                // If dimension does not have ranges, dimension will be a string or number
                dimensionValue = [dimensionValue];
            }
            if (dimension.name === STD_TIME) {
                dimensionValue = dimensionValue.map((dim) => isRecurring
                    ? getRecurrentIntervalName(dim, dimension.interval, dimension.intervalUnit)
                    : getFormattedDateString(Number(dim)));
            }
            const option = hasRanges ? dimensionValue.join(" — ") : dimensionValue.join("");
            dropdownOption = {
                label: option,
                key: isRecurring ? (hasRanges ? val.join(" — ") : val.toString()) : option
            };
            if (!itemInArray(data, dropdownOption)) {
                data.push(dropdownOption);
            }
        });
    });
    return data;
}
function dimensionHasRanges(dimensions) {
    let hasRanges = false;
    if (dimensions.length > 0) {
        hasRanges = dimensions[0].hasRanges;
    }
    return hasRanges;
}
function getFormattedDimensionRanges(dropdownOptions) {
    const dimensionMinRanges = [];
    const dimensionMaxRanges = [];
    dropdownOptions.forEach((dropdownOption) => {
        const labels = dropdownOption.label.split(" — ");
        dimensionMinRanges.push({
            label: labels[0],
            key: labels[0]
        });
        dimensionMaxRanges.push({
            label: labels[1],
            key: labels[1]
        });
    });
    return {
        min: dimensionMinRanges,
        max: dimensionMaxRanges
    };
}
/**
 * Gets the corresponding dimension range based on the minDimension value.
 *
 * @param {MultiDimensionalDimension} dimension - The dimension object.
 * @param {DimensionValue} minDimension - The minimum dimension value.
 * @returns {DimensionValue} The corresponding dimension range.
 */
function getCorrespondingDimensionRange(dimension, minDimension) {
    const STD_TIME = "StdTime";
    const isDimensionStdTime = dimension.name === STD_TIME;
    const tempMinDimension = isDimensionStdTime && typeof minDimension === "string" ? parseFormattedDateString(minDimension) : minDimension;
    // Find the corresponding dimensionPair based on the minDimension value
    const dimensionPair = dimension.values.find((_dimension) => _dimension[0] === tempMinDimension);
    // Handle special formatting for StdTime dimension
    if (typeof dimensionPair === "object" && isDimensionStdTime) {
        return dimensionPair.map((dim) => getFormattedDateString(Number(dim)));
    }
    return dimensionPair;
}
/**
 * Takes an array of variables and returns an array of unique dimensions
 * of the passed variables as dropdown options.
 *
 * @param {MultidimensionalInfo} multidimensionalInfo - The multidimensional data information.
 * @param {SelectedVariable[]} selectedVariables - The selected variables.
 * @returns {DimensionDropdownOption[]} An array of dimension dropdown options.
 */
function getUniqueDimensionsForSelectedVariables(multidimensionalInfo, selectedVariables) {
    const variables = getVariables({
        multiDimensionalData: multidimensionalInfo,
        selectedVariables: selectedVariables
    });
    const dimensions = getDimensions({ variables });
    const dimensionNames = mapObjectByProperty(dimensions, "name");
    const uniqueDimensionNames = removeDuplicatesFromArray(dimensionNames);
    return uniqueDimensionNames;
}
/**
 * Takes in a single dimension parameter of selected variables
 * and returns an aggreagate of all the dimension values.
 */
function getDimensionValuesForSelectedDimension(multiDimensionalData, selectedVariables, selectedDimension) {
    // extract selected variables from MD data
    const variables = getVariables({
        multiDimensionalData: multiDimensionalData,
        selectedVariables: selectedVariables
    });
    // extract dimensions from the extracted variables
    const dimensions = getDimensions({
        variables: variables,
        selectedDimension: selectedDimension
    });
    const gridDimensionValuesOptions = getFormattedDimensionValues(dimensions);
    return gridDimensionValuesOptions;
}
function getDimensionRangeValuesForSelectedDimension(multiDimensionalData, selectedVariables, selectedDimension) {
    // extract selected variables from MD data
    const variables = getVariables({
        multiDimensionalData: multiDimensionalData,
        selectedVariables: selectedVariables
    });
    // extract dimensions from the extracted variables
    const dimensions = getDimensions({
        variables: variables,
        selectedDimension: selectedDimension
    });
    const gridDimensionValuesOptions = getFormattedDimensionValues(dimensions);
    // for this.dimensionDefinition.BY_RANGES & this.dimensionDefinition.BY_ITERATION:
    let startValueOptions, endValueOptions;
    const hasRanges = dimensionHasRanges(dimensions);
    if (hasRanges) {
        const fromattedDimensions = getFormattedDimensionRanges(gridDimensionValuesOptions);
        startValueOptions = fromattedDimensions.min;
        endValueOptions = fromattedDimensions.max;
    }
    else {
        startValueOptions = clone(gridDimensionValuesOptions);
        endValueOptions = clone(gridDimensionValuesOptions);
    }
    return { startValueOptions: startValueOptions, endValueOptions: endValueOptions };
}
/**
 * Checks if a variable in a multidimensional dataset is a single slice.
 *
 * @param {MultidimensionalInfo} multidimensionalInfo - The multidimensional information.
 * @param {string} variable - The name of the variable to check.
 * @returns {boolean} True if the variable is a single slice, false otherwise.
 */
function isVariableSingleSlice(multidimensionalInfo, variable) {
    const multidimensionalInfoVariables = multidimensionalInfo?.variables;
    const mDimVariable = multidimensionalInfoVariables?.find((_variable) => variable === _variable.name);
    if (!mDimVariable) {
        return false;
    }
    const mDimVariableDimensions = mDimVariable.dimensions.reduce((accumulator, dimension) => {
        const dimensionName = dimension.name;
        accumulator[dimensionName] = dimension.values.length;
        return accumulator;
    }, {});
    return Object.values(mDimVariableDimensions).every((dimensionLength) => dimensionLength === 1);
}
function multidimensionalDefinitionParser(mdimDefinition, multidimensionalInfo) {
    const invalidDimensionDefinitionTypes = ["BY_ITERATION"];
    const isDefinitionTypeInvalid = invalidDimensionDefinitionTypes.includes(mdimDefinition.definitionType);
    if (isDefinitionTypeInvalid) {
        return false;
    }
    if ((0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_0__.i)(multidimensionalInfo)) {
        return false;
    }
    const mdimDimensions = mdimDefinition.dimensions;
    if (!mdimDimensions) {
        return isVariableSingleSlice(multidimensionalInfo, mdimDefinition.variables[0]);
    }
    const isDimensionsUnique = isArrayUnique(mdimDimensions);
    if (!isDimensionsUnique) {
        return false;
    }
    const variables = getVariables({
        multiDimensionalData: multidimensionalInfo,
        selectedVariables: mdimDefinition.variables
    });
    const dimensions = getDimensions({ variables });
    const dimensionNames = mapObjectByProperty(dimensions, "name");
    const isItemInArray = (array, item) => array.indexOf(item) >= 0;
    const isEveryDimensionInMdimDef = dimensionNames.every((dimension) => isItemInArray(mdimDimensions, dimension));
    if (!isEveryDimensionInMdimDef) {
        return false;
    }
    const isDefinitionTypeByRanges = mdimDefinition.definitionType === "BY_RANGES";
    if (!isDefinitionTypeByRanges) {
        return isEveryDimensionInMdimDef;
    }
    const maxDimensionValues = mdimDefinition.maxValues;
    const minDimensionValues = mdimDefinition.minValues;
    const isMinAndMaxDimensionSame = maxDimensionValues.every((maxDimension, index) => {
        const selectedDimension = mdimDimensions[index];
        const dimensionsForSelectedDimension = getDimensions({
            variables,
            selectedDimension
        });
        const dimension = dimensionsForSelectedDimension.length > 0 ? dimensionsForSelectedDimension[0] : undefined;
        if (dimension && dimension.hasRanges) {
            const dimensionPair = getCorrespondingDimensionRange(dimension, minDimensionValues[index]);
            return maxDimension === dimensionPair[1];
        }
        return minDimensionValues[index] === maxDimension;
    });
    return isMinAndMaxDimensionSame;
}
function isItemInDropdown(dropdownData, item) {
    /** function to select a dropdown from a dropdown list */
    return dropdownData.some(function (dropdownDatum) {
        if (dropdownDatum.key === item) {
            return true;
        }
    });
}
function cloneData(data) {
    return clone(data);
}



//# sourceMappingURL=multidimensional-helper-fc8fbe0e.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,