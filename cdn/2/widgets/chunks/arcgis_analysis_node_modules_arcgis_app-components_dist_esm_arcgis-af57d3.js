"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_arcgis-af57d3"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-smart-mapping-color-size-slider_3.entry.js":
/*!*******************************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-smart-mapping-color-size-slider_3.entry.js ***!
  \*******************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   arcgis_smart_mapping_color_size_slider: () => (/* binding */ ArcgisSmartMappingColorSizeSlider),
/* harmony export */   arcgis_smart_mapping_symbol_pair_button: () => (/* binding */ ArcgisSmartMappingSymbolPairButton),
/* harmony export */   arcgis_smart_mapping_symbol_pair_popover: () => (/* binding */ ArcgisSmartMappingSymbolPairPopover)
/* harmony export */ });
/* harmony import */ var _index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-e3bf7da7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-e3bf7da7.js");
/* harmony import */ var _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./raster-unique-value-0976ec7f.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/raster-unique-value-0976ec7f.js");
/* harmony import */ var _date_79c7d93c_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./date-79c7d93c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/date-79c7d93c.js");
/* harmony import */ var _loading_69139907_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./loading-69139907.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loading-69139907.js");
/* harmony import */ var _loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./loadModules-b4ac1247.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-b4ac1247.js");
/* harmony import */ var _precision_06a73672_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./precision-06a73672.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/precision-06a73672.js");
/* harmony import */ var _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./commonEnums-fcf13661.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/commonEnums-fcf13661.js");
/* harmony import */ var _slider_e162e136_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./slider-e162e136.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/slider-e162e136.js");
/* harmony import */ var _colorSizeUnivariant_d266ac7c_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./colorSizeUnivariant-d266ac7c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/colorSizeUnivariant-d266ac7c.js");
/* harmony import */ var _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./languageUtil-ef0e54b2.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-ef0e54b2.js");
/* harmony import */ var _dom_4d367677_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./dom-4d367677.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-4d367677.js");
/* harmony import */ var _locale_050b6db9_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./locale-050b6db9.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-050b6db9.js");
/* harmony import */ var _index_05956cab_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./index-05956cab.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-05956cab.js");
/* harmony import */ var _commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./commonFunctions-b0830e9e.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/commonFunctions-b0830e9e.js");
/* harmony import */ var _color_d6da0a9a_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./color-d6da0a9a.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/color-d6da0a9a.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */
















const arcgisSmartMappingColorSizeSliderCss = ".slider-box{height:320px}.slider-box .esri-color-size-slider,.slider-box .esri-binary-color-size-slider{min-width:200px}.slider-box .esri-color-size-slider .esri-slider .esri-slider__content,.slider-box .esri-binary-color-size-slider .esri-slider .esri-slider__content{height:175px}.slider-box .esri-color-size-slider__histogram-container,.slider-box .esri-binary-color-size-slider__histogram-container{width:85px}.slider-box .esri-color-size-slider .esri-slider .esri-slider__label,.slider-box .esri-color-size-slider .esri-slider .esri-slider__min,.slider-box .esri-color-size-slider .esri-slider .esri-slider__max,.slider-box .esri-binary-color-size-slider .esri-slider .esri-slider__label,.slider-box .esri-binary-color-size-slider .esri-slider .esri-slider__min,.slider-box .esri-binary-color-size-slider .esri-slider .esri-slider__max{text-decoration:underline}.slider-box .esri-color-size-slider .esri-slider .esri-slider__label:hover,.slider-box .esri-color-size-slider .esri-slider .esri-slider__min:hover,.slider-box .esri-color-size-slider .esri-slider .esri-slider__max:hover,.slider-box .esri-binary-color-size-slider .esri-slider .esri-slider__label:hover,.slider-box .esri-binary-color-size-slider .esri-slider .esri-slider__min:hover,.slider-box .esri-binary-color-size-slider .esri-slider .esri-slider__max:hover{border:1px solid #bbb;background-color:#f3f3f3;text-decoration:none;z-index:1}.slider-box-buttons-front{display:flex}";

const ArcgisSmartMappingColorSizeSlider = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisSmartMappingColorSizeSliderChange = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingColorSizeSliderChange", 7);
        this.arcgisSmartMappingColorSizeSliderError = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingColorSizeSliderError", 7);
        /**
         * Necessary for tracking stops for non-classed sliders,
         * whose values are updated immediately even given incorrect inputs.
         */
        this.currentColorStopValues = [];
        this.currentSizeStopSizes = [];
        this.zigzagClick = false;
        this.styleSheetStatus = "not-loaded";
        this.histogramStatus = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.b.MISSING;
        this.statisticsStatus = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.b.MISSING;
        this.sliderZoomed = false;
    }
    //--------------------------------------------------------------------------
    //
    //  Public Calls
    //
    //--------------------------------------------------------------------------
    async updateStatistics() {
        var _a;
        this.statisticsStatus = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.b.MISSING;
        this.statistics = null;
        this.histogramStatus = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.b.MISSING;
        this.histogram = null;
        (_a = this.colorSizeSlider) === null || _a === void 0 ? void 0 : _a.destroy();
        this.colorSizeSlider = undefined;
        this.sliderZoomed = false;
        this.getStatistics();
    }
    // -------------------------------------------------------------------
    //
    // Lifecycle
    //
    // -------------------------------------------------------------------
    componentWillLoad() {
        this.getStatistics();
    }
    componentDidLoad() {
        this.flowItemNode = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.F)(this.hostElement, "calcite-flow-item");
    }
    // -------------------------------------------------------------------
    //
    //  Render Methods
    //
    // -------------------------------------------------------------------
    render() {
        const { config } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.H, null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("link", { rel: "stylesheet", href: `${config.jsapiUrl}/themes/light/main.css`, onLoad: () => {
                this.styleSheetStatus = "loaded";
                (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
            }, onError: () => {
                this.styleSheetStatus = "failed";
                (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
            } }), this.styleSheetStatus === "loaded"
            ? this.renderColorSizeSlider()
            : this.styleSheetStatus === "not-loaded"
                ? this.renderColorSizeSliderLoading()
                : null));
    }
    renderColorSizeSlider() {
        var _a, _b, _c, _d;
        const { histogramStatus, statistics, statisticsStatus, sliderZoomed } = this;
        const { layer, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const authInfo = renderer.authoringInfo;
        const colorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)(renderer, "color");
        const sizeVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)(renderer, "size");
        const isAboveAndBelow = authInfo.univariateTheme === "above-and-below";
        if (statisticsStatus === _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.b.FAILED || statisticsStatus === _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.b.MISSING) {
            if (this.colorSizeSlider) {
                this.colorSizeSlider.destroy();
                this.colorSizeSlider = undefined;
            }
        }
        else if (statisticsStatus === _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.b.IN_PROGRESS ||
            (histogramStatus === _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.b.IN_PROGRESS && !this.colorSizeSlider)) {
            return this.renderColorSizeSliderLoading();
        }
        else {
            const ok = this.prepareColorSizeSlider();
            let disableZoomButton = false;
            if (colorVisVar && !sliderZoomed) {
                const authColorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.p)(renderer, "color");
                const stops = (0,_colorSizeUnivariant_d266ac7c_js__WEBPACK_IMPORTED_MODULE_8__.g)();
                const zoomOptions = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.aC)(stops, (_a = authColorVisVar === null || authColorVisVar === void 0 ? void 0 : authColorVisVar.minSliderValue) !== null && _a !== void 0 ? _a : statistics.min, (_b = authColorVisVar === null || authColorVisVar === void 0 ? void 0 : authColorVisVar.maxSliderValue) !== null && _b !== void 0 ? _b : statistics.max);
                if ((zoomOptions === null || zoomOptions === void 0 ? void 0 : zoomOptions.minMaxSame) ||
                    (!(0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ac)(zoomOptions === null || zoomOptions === void 0 ? void 0 : zoomOptions.min) && !(0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ac)(zoomOptions === null || zoomOptions === void 0 ? void 0 : zoomOptions.max))) {
                    disableZoomButton = true;
                    if (this.zoomButtonNode) {
                        this.zoomButtonNode.disabled = true;
                    }
                }
            }
            else if (sizeVisVar && !sliderZoomed) {
                const authSizeVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.p)(renderer, "size");
                const zoomOptions = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.aC)(isAboveAndBelow
                    ? sizeVisVar.stops
                    : [{ value: sizeVisVar.minDataValue }, { value: sizeVisVar.maxDataValue }], (_c = authSizeVisVar === null || authSizeVisVar === void 0 ? void 0 : authSizeVisVar.minSliderValue) !== null && _c !== void 0 ? _c : statistics.min, (_d = authSizeVisVar === null || authSizeVisVar === void 0 ? void 0 : authSizeVisVar.maxSliderValue) !== null && _d !== void 0 ? _d : statistics.max);
                if (zoomOptions.minMaxSame ||
                    (!(0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ac)(zoomOptions.min) && !(0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ac)(zoomOptions.max))) {
                    disableZoomButton = true;
                    if (this.zoomButtonNode) {
                        this.zoomButtonNode.disabled = true;
                    }
                }
            }
            if (colorVisVar) {
                this.currentColorStopValues = colorVisVar.stops.map((stop) => stop.value);
            }
            if (sizeVisVar === null || sizeVisVar === void 0 ? void 0 : sizeVisVar.stops) {
                this.currentSizeStopSizes = sizeVisVar.stops.map((stop) => stop.size);
            }
            if (ok || this.colorSizeSlider) {
                return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "slider-box" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, strings.colorSizeSlider.dataRange), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "slider-box-buttons-front" }, this.renderInvertButton(), sizeVisVar && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.F, null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, "\u00A0"), this.renderZoomButton(disableZoomButton), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, "\u00A0"), this.renderResetButton()))), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { ref: (node) => {
                        if (node) {
                            this.afterColorSizeSliderCreate(node);
                        }
                    } })));
            }
            else {
                return this.renderColorSizeSliderLoading();
            }
        }
    }
    renderColorSizeSliderLoading() {
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "slider-box" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-loader", { label: strings.loading })));
    }
    renderInvertButton() {
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-action", { text: strings.colorSizeSlider.invertSlider, icon: "arrowUpDown", onClick: () => this.handleInvertSlider() }));
    }
    renderZoomButton(disableZoomButton) {
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const { sliderZoomed } = this;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-action", { text: strings.colorSizeSlider.zoomSlider, icon: sliderZoomed ? "magnifyingGlassMinus" : "magnifyingGlassPlus", disabled: disableZoomButton, onClick: () => this.handleZoomSlider(), ref: (node) => {
                if (node) {
                    this.zoomButtonNode = node;
                }
            } }));
    }
    renderResetButton() {
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-action", { text: strings.colorSizeSlider.resetSlider, icon: "undo", onClick: () => this.handleResetSlider() }));
    }
    // -------------------------------------------------------------------
    //
    //  Private methods
    //
    // -------------------------------------------------------------------
    prepareColorSizeSlider() {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        const { statistics, histogram, histogramStatus, sliderZoomed } = this;
        const { layer, mapView, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const rendererType = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.g)();
        const authInfo = renderer.authoringInfo;
        const isAboveAndBelow = authInfo.univariateTheme === "above-and-below";
        const isAgeRenderer = ["size-age", "color-size-age", "type-size-age"].indexOf(rendererType) > -1;
        const fieldInfo = this.getFieldInfo();
        const isDateField = fieldInfo.simpleFieldType === _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.w.DATE;
        const colorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)(renderer, "color");
        const sizeVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)(renderer, "size");
        const authSizeVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.p)(renderer, "size");
        const authColorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.p)(renderer, "color");
        let handleInfo, min, max;
        if (authColorVisVar) {
            handleInfo = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.aD)(authColorVisVar.theme, colorVisVar.stops, true);
            min = authColorVisVar === null || authColorVisVar === void 0 ? void 0 : authColorVisVar.minSliderValue;
            max = authColorVisVar === null || authColorVisVar === void 0 ? void 0 : authColorVisVar.maxSliderValue;
        }
        else {
            min = (_a = authSizeVisVar === null || authSizeVisVar === void 0 ? void 0 : authSizeVisVar.minSliderValue) !== null && _a !== void 0 ? _a : statistics.min;
            max = (_b = authSizeVisVar === null || authSizeVisVar === void 0 ? void 0 : authSizeVisVar.maxSliderValue) !== null && _b !== void 0 ? _b : statistics.max;
        }
        ({ min, max } = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ad)({ min, max }));
        const slider = this.colorSizeSlider;
        if (this.colorSizeSlider &&
            ((colorVisVar && slider.style) || (!colorVisVar && !slider.style))) {
            (_c = this.colorSizeSlider) === null || _c === void 0 ? void 0 : _c.destroy();
            this.colorSizeSlider = undefined;
        }
        if (histogramStatus === _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.b.IN_PROGRESS) {
            return false;
        }
        if (!this.colorSizeSlider) {
            this.colorSliderBars = [];
            let config = {
                histogramConfig: {
                    bins: histogram === null || histogram === void 0 ? void 0 : histogram.bins,
                    average: Math.round(statistics.avg * 10) / 10,
                    standardDeviation: statistics.stddev,
                    standardDeviationCount: 1
                },
                min: min !== null && min !== void 0 ? min : statistics.min,
                max: max !== null && max !== void 0 ? max : statistics.max
            };
            if (isAboveAndBelow) {
                config.primaryHandleEnabled = true;
                config.persistSizeRangeEnabled = true;
            }
            if (isDateField) {
                config.hasTimeData = true;
                (0,_date_79c7d93c_js__WEBPACK_IMPORTED_MODULE_2__.a)(config, mapView.timeZone);
            }
            if (colorVisVar) {
                config = Object.assign(Object.assign({}, config), handleInfo);
                config.stops = (0,_colorSizeUnivariant_d266ac7c_js__WEBPACK_IMPORTED_MODULE_8__.g)();
                config.precision = (0,_precision_06a73672_js__WEBPACK_IMPORTED_MODULE_5__.g)(colorVisVar.stops);
                config.histogramConfig.barCreatedFunction =
                    histogram && _slider_e162e136_js__WEBPACK_IMPORTED_MODULE_7__.b.bind(this, config, histogram, this.colorSliderBars);
                this.colorSizeSlider = new modules.ColorSizeSlider(config);
                (0,_slider_e162e136_js__WEBPACK_IMPORTED_MODULE_7__.u)(this.colorSizeSlider, this.colorSliderBars);
            }
            else {
                config.style = {
                    trackBelowFillColor: (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.t)(renderer.classBreakInfos[0].symbol) ||
                        new modules.esriColor([0, 0, 0, 0.5]),
                    trackAboveFillColor: (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.t)(renderer.classBreakInfos[1].symbol) ||
                        new modules.esriColor([0, 0, 0, 0.5])
                };
                config.stops = sizeVisVar.stops;
                config.handlesSyncedToPrimary = false;
                config.precision = (0,_precision_06a73672_js__WEBPACK_IMPORTED_MODULE_5__.g)(config.stops);
                this.colorSizeSlider = new modules.BinaryColorSizeSlider(config);
            }
            this.createColorSizeSliderChangeEvents();
        }
        else {
            const slider = this.colorSizeSlider;
            if (((_d = slider.slider) === null || _d === void 0 ? void 0 : _d.state) === "dragging") {
                return true;
            }
            let config = {
                histogramConfig: {
                    bins: histogram === null || histogram === void 0 ? void 0 : histogram.bins,
                    average: Math.round(statistics.avg * 10) / 10,
                    standardDeviation: statistics.stddev,
                    standardDeviationCount: 1
                },
                min: min !== null && min !== void 0 ? min : statistics.min,
                max: max !== null && max !== void 0 ? max : statistics.max
            };
            if (colorVisVar) {
                config = Object.assign(Object.assign({}, config), handleInfo);
                config.stops = (0,_colorSizeUnivariant_d266ac7c_js__WEBPACK_IMPORTED_MODULE_8__.g)();
                config.precision = (0,_precision_06a73672_js__WEBPACK_IMPORTED_MODULE_5__.g)(config.stops);
                config.hasTimeData = isDateField && !isAgeRenderer;
                if (isDateField) {
                    (0,_date_79c7d93c_js__WEBPACK_IMPORTED_MODULE_2__.a)(config, mapView.timeZone);
                }
                if (sliderZoomed) {
                    /**
                     * clicking a zigzag already updates the internal slider zoomOptions;
                     * setting them here again would incorrectly override a user's decision
                     * to manually zoom out one side of the slider.
                     */
                    if (!this.zigzagClick) {
                        config.zoomOptions = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.aC)(colorVisVar.stops, (_e = authColorVisVar === null || authColorVisVar === void 0 ? void 0 : authColorVisVar.minSliderValue) !== null && _e !== void 0 ? _e : statistics.min, (_f = authColorVisVar === null || authColorVisVar === void 0 ? void 0 : authColorVisVar.maxSliderValue) !== null && _f !== void 0 ? _f : statistics.max);
                    }
                }
                else {
                    config.zoomOptions = null;
                }
                config.histogramConfig.barCreatedFunction =
                    histogram && _slider_e162e136_js__WEBPACK_IMPORTED_MODULE_7__.b.bind(this, colorVisVar, histogram, this.colorSliderBars);
                (0,_slider_e162e136_js__WEBPACK_IMPORTED_MODULE_7__.u)(this.colorSizeSlider, this.colorSliderBars, config, histogram);
            }
            else {
                config.style = {
                    trackBelowFillColor: (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.t)(renderer.classBreakInfos[0].symbol) ||
                        new modules.esriColor([0, 0, 0, 0.5]),
                    trackAboveFillColor: (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.t)(renderer.classBreakInfos[1].symbol) ||
                        new modules.esriColor([0, 0, 0, 0.5])
                };
                config.stops = sizeVisVar.stops;
                config.precision = (0,_precision_06a73672_js__WEBPACK_IMPORTED_MODULE_5__.g)(config.stops);
                if (sliderZoomed) {
                    /**
                     * clicking a zigzag already updates the internal slider zoomOptions;
                     * setting them here again would incorrectly override a user's decision
                     * to manually zoom out one side of the slider.
                     */
                    if (!this.zigzagClick) {
                        config.zoomOptions = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.aC)(isAboveAndBelow
                            ? sizeVisVar.stops
                            : [{ value: sizeVisVar.minDataValue }, { value: sizeVisVar.maxDataValue }], (_g = authSizeVisVar === null || authSizeVisVar === void 0 ? void 0 : authSizeVisVar.minSliderValue) !== null && _g !== void 0 ? _g : statistics.min, (_h = authSizeVisVar === null || authSizeVisVar === void 0 ? void 0 : authSizeVisVar.maxSliderValue) !== null && _h !== void 0 ? _h : statistics.max);
                    }
                }
                else {
                    config.zoomOptions = null;
                }
            }
            if (this.sliderZoomed && this.adjustedZoomOptions && !this.zigzagClick) {
                config.zoomOptions = this.adjustedZoomOptions;
                /**
                 * handles edge cases where the slider is zoomed, handles have been manually modified,
                 * and a user executes a label change. This prevents zoom options from changing and preserves
                 * the histogram display.
                 */
                if (this.zoomAdjustment === "min") {
                    this.colorSizeSlider.slider.min = config.zoomOptions.min;
                    config.zoomOptions.min = null;
                }
                else {
                    this.colorSizeSlider.slider.max = config.zoomOptions.max;
                    config.zoomOptions.max = null;
                }
            }
            this.adjustedZoomOptions = null;
            this.zoomAdjustment = null;
            this.colorSizeSlider.set(config);
            this.zigzagClick = false;
        }
        return (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ac)(this.colorSizeSlider);
    }
    handleInvertSlider() {
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const colorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)(renderer, "color");
        if (colorVisVar) {
            let colors = colorVisVar.stops.map((colorStop) => {
                return colorStop.color;
            });
            colors = colors.reverse();
            colorVisVar.stops.forEach((colorStop, idx) => {
                colorStop.color = colors[idx];
            });
        }
        else {
            const color = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.t)(renderer.classBreakInfos[0].symbol);
            (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.r)(renderer.classBreakInfos[0].symbol, (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.t)(renderer.classBreakInfos[1].symbol));
            (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.r)(renderer.classBreakInfos[1].symbol, color);
        }
        const sizeVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)(renderer, "size");
        [sizeVisVar.minSize, sizeVisVar.maxSize] = [sizeVisVar.maxSize, sizeVisVar.minSize];
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
        this.arcgisSmartMappingColorSizeSliderChange.emit();
    }
    handleZoomSlider(zoomed) {
        var _a, _b, _c, _d;
        if (this.histogramStatus === _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.b.IN_PROGRESS) {
            return;
        }
        const { statistics } = this;
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const authInfo = renderer.authoringInfo;
        const isAboveAndBelow = authInfo.univariateTheme === "above-and-below";
        this.sliderZoomed = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ac)(zoomed) ? zoomed : !this.sliderZoomed;
        const sizeVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)(renderer, "size");
        if (!sizeVisVar) {
            this.sliderZoomed = false;
        }
        const normalizationField = sizeVisVar
            ? sizeVisVar.normalizationField
            : renderer.normalizationField;
        const fieldInfo = this.getFieldInfo();
        const authSizeVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.p)(renderer, "size");
        const zoomOptions = this.sliderZoomed
            ? (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.aC)(isAboveAndBelow
                ? sizeVisVar.stops
                : [{ value: sizeVisVar.minDataValue }, { value: sizeVisVar.maxDataValue }], (_a = authSizeVisVar === null || authSizeVisVar === void 0 ? void 0 : authSizeVisVar.minSliderValue) !== null && _a !== void 0 ? _a : statistics.min, (_b = authSizeVisVar === null || authSizeVisVar === void 0 ? void 0 : authSizeVisVar.maxSliderValue) !== null && _b !== void 0 ? _b : statistics.max)
            : null;
        this.getHistogram(fieldInfo, normalizationField, statistics, (zoomOptions && zoomOptions.min) || ((_c = authSizeVisVar === null || authSizeVisVar === void 0 ? void 0 : authSizeVisVar.minSliderValue) !== null && _c !== void 0 ? _c : statistics.min), (zoomOptions && zoomOptions.max) || ((_d = authSizeVisVar === null || authSizeVisVar === void 0 ? void 0 : authSizeVisVar.maxSliderValue) !== null && _d !== void 0 ? _d : statistics.max));
    }
    handleResetSlider() {
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const authInfo = renderer.authoringInfo;
        this.sliderZoomed = false;
        const colorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)(renderer, "color");
        const sizeVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)(renderer, "size");
        const authColorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.p)(renderer, "color");
        const authSizeVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.p)(renderer, "size");
        const fieldInfo = this.getFieldInfo();
        const normalizationField = colorVisVar
            ? colorVisVar.normalizationField
            : renderer.normalizationField;
        (0,_loading_69139907_js__WEBPACK_IMPORTED_MODULE_3__.r)((0,_colorSizeUnivariant_d266ac7c_js__WEBPACK_IMPORTED_MODULE_8__.a)({
            fieldInfos: [fieldInfo],
            normalizationField: sizeVisVar.normalizationField,
            theme: authInfo.univariateTheme,
            isContinuous: !!colorVisVar,
            noReuse: true,
            discardMinMax: true
        }), this.flowItemNode).then((result) => {
            var _a;
            if (((_a = result.statistics) === null || _a === void 0 ? void 0 : _a.count) === 0) {
                // field has no values
                // make up some basic statistics so we show a slider
                const [defaultMin, defaultMax] = this.getDefaultDataRange(fieldInfo);
                const min = (authColorVisVar === null || authColorVisVar === void 0 ? void 0 : authColorVisVar.minSliderValue) || defaultMin;
                const max = (authColorVisVar === null || authColorVisVar === void 0 ? void 0 : authColorVisVar.maxSliderValue) || defaultMax;
                result.statistics.min = min;
                result.statistics.max = max;
                result.statistics.avg = (max + min) / 2;
                this.statistics = result.statistics;
                this.statisticsStatus = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.b.SUCCESS;
            }
            else if (result.statistics &&
                (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ac)(result.statistics.min) &&
                (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ac)(result.statistics.max) &&
                result.statistics.min <= result.statistics.max) {
                this.statistics = result.statistics;
                this.statisticsStatus = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.b.SUCCESS;
                this.getHistogram(fieldInfo, normalizationField, result.statistics, result.statistics.min, result.statistics.max);
            }
            else {
                this.statisticsStatus = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.b.FAILED;
            }
            if (authColorVisVar) {
                authColorVisVar.minSliderValue = this.statistics.min;
                authColorVisVar.maxSliderValue = this.statistics.max;
            }
            authSizeVisVar.minSliderValue = this.statistics.min;
            authSizeVisVar.maxSliderValue = this.statistics.max;
            (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
        }, (error) => this.arcgisSmartMappingColorSizeSliderError.emit(error));
    }
    afterColorSizeSliderCreate(node) {
        const divNode = document.createElement("div");
        node.appendChild(divNode);
        if (this.colorSizeSlider && !this.colorSizeSlider.container) {
            this.colorSizeSlider.container = divNode;
        }
    }
    getStatistics() {
        /**
         * Handles the following:
         *  1.) Retrieving statistics on slider load
         *  2.) Retrieving updated statistics after changing normalization field or theme
         */
        var _a;
        const { layer: smLayer, mapView, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const sizeVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)(renderer, "size");
        const authSizeVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.p)(renderer, "size");
        let min;
        let max;
        const fieldInfo = this.getFieldInfo();
        const normalizationField = sizeVisVar
            ? sizeVisVar.normalizationField
            : renderer.normalizationField;
        min = authSizeVisVar === null || authSizeVisVar === void 0 ? void 0 : authSizeVisVar.minSliderValue;
        max = authSizeVisVar === null || authSizeVisVar === void 0 ? void 0 : authSizeVisVar.maxSliderValue;
        this.statisticsStatus = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.b.IN_PROGRESS;
        if (!this.statistics) {
            modules
                .summaryStatistics({
                layer,
                view: mapView,
                field: fieldInfo.field,
                valueExpression: fieldInfo.expression,
                normalizationField,
                forBinning: "featureReduction" in layer && ((_a = layer.featureReduction) === null || _a === void 0 ? void 0 : _a.type) === "binning"
            })
                .then((statistics) => {
                if (statistics.count === 0) {
                    // field has no values
                    // make up some basic statistics so we can show a slider
                    const [defaultMin, defaultMax] = this.getDefaultDataRange(fieldInfo);
                    const min = (authSizeVisVar === null || authSizeVisVar === void 0 ? void 0 : authSizeVisVar.minSliderValue) || defaultMin;
                    const max = (authSizeVisVar === null || authSizeVisVar === void 0 ? void 0 : authSizeVisVar.maxSliderValue) || defaultMax;
                    statistics.min = min;
                    statistics.max = max;
                    statistics.avg = (max + min) / 2;
                    if (!(0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ac)(authSizeVisVar.minSliderValue)) {
                        authSizeVisVar.minSliderValue = min;
                        authSizeVisVar.maxSliderValue = max;
                    }
                }
                else if (!(0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ac)(statistics.avg) ||
                    !(0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ac)(statistics.min) ||
                    !(0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ac)(statistics.max)) {
                    // statistics unusable
                    this.statisticsStatus = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.b.FAILED;
                    return;
                }
                statistics = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ad)(statistics);
                min = min !== null && min !== void 0 ? min : statistics.min;
                max = max !== null && max !== void 0 ? max : statistics.max;
                this.statistics = statistics;
                this.statisticsStatus = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.b.SUCCESS;
                this.getHistogram(fieldInfo, normalizationField, statistics, min, max);
            }, (error) => {
                console.log(error);
                this.statisticsStatus = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.b.FAILED;
            });
        }
    }
    getHistogram(fieldInfo, normalizationField, statistics, min, max) {
        var _a;
        const { layer: smLayer, mapView, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        statistics = statistics || this.statistics;
        if (!statistics || statistics.count === 0) {
            return;
        }
        this.histogramStatus = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.b.IN_PROGRESS;
        modules
            .histogram({
            layer: layer,
            view: mapView,
            field: fieldInfo.field,
            valueExpression: fieldInfo.expression,
            numBins: 50,
            minValue: (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ac)(min) ? min : statistics.min,
            maxValue: (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ac)(max) ? max : statistics.max,
            normalizationField,
            forBinning: "featureReduction" in layer && ((_a = layer.featureReduction) === null || _a === void 0 ? void 0 : _a.type) === "binning"
        })
            .then((histogram) => {
            this.histogram = histogram;
            this.histogramStatus = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.b.SUCCESS;
        }, () => {
            this.histogramStatus = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.b.FAILED;
        });
    }
    onMinMaxChange(min, max, changing) {
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const authInfo = renderer.authoringInfo;
        const isAboveAndBelow = (authInfo === null || authInfo === void 0 ? void 0 : authInfo.univariateTheme) === "above-and-below";
        const colorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)(renderer, "color");
        const sizeVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)(renderer, "size");
        if (colorVisVar === null || colorVisVar === void 0 ? void 0 : colorVisVar.stops) {
            min = Math.min(min, colorVisVar.stops[0].value);
            max = Math.max(max, colorVisVar.stops[colorVisVar.stops.length - 1].value);
        }
        if (isAboveAndBelow) {
            min = Math.min(min, sizeVisVar.stops[0].value);
            max = Math.max(max, sizeVisVar.stops[sizeVisVar.stops.length - 1].value);
            sizeVisVar.stops.forEach((stop, idx) => {
                stop.size = this.currentSizeStopSizes[idx];
            });
        }
        this.handleMinMaxChange(min, max, changing);
    }
    handleMinMaxChange(min, max, changing) {
        const { statistics } = this;
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const colorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)(renderer, "color");
        const sizeVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)(renderer, "size");
        const authColorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.p)(renderer, "color") || {};
        const authSizeVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.p)(renderer, "size") || {};
        // update only the label that the user is changing
        if (changing === "min") {
            authColorVisVar.minSliderValue = min;
            authSizeVisVar.minSliderValue = min;
        }
        else {
            authColorVisVar.maxSliderValue = max;
            authSizeVisVar.maxSliderValue = max;
        }
        // determine if label updates merit zooming or not
        const zoomOptions = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.aC)(colorVisVar === null || colorVisVar === void 0 ? void 0 : colorVisVar.stops, authColorVisVar.minSliderValue, authColorVisVar.maxSliderValue);
        // handles zoom button display for non-classed color sliders
        if (this.zoomButtonNode) {
            if (this.sliderZoomed) {
                this.zoomButtonNode.disabled = false;
            }
            else if (!zoomOptions ||
                zoomOptions.minMaxSame ||
                (!(0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ac)(zoomOptions.min) && !(0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ac)(zoomOptions.max))) {
                this.zoomButtonNode.disabled = true;
            }
            else {
                this.zoomButtonNode.disabled = false;
            }
        }
        // zoom adjustment
        if (this.sliderZoomed) {
            this.adjustedZoomOptions = this.colorSizeSlider.zoomOptions;
            if (changing === "min") {
                this.adjustedZoomOptions.min = min;
                this.zoomAdjustment = "min";
            }
            else {
                this.adjustedZoomOptions.max = max;
                this.zoomAdjustment = "max";
            }
        }
        const fieldInfo = this.getFieldInfo();
        const normalizationField = sizeVisVar
            ? sizeVisVar.normalizationField
            : renderer.normalizationField;
        this.getHistogram(fieldInfo, normalizationField, statistics, min, max);
        (0,_slider_e162e136_js__WEBPACK_IMPORTED_MODULE_7__.u)(this.colorSizeSlider, this.colorSliderBars, colorVisVar, this.histogram);
        if (min === authColorVisVar.minSliderValue && max === authColorVisVar.maxSliderValue) {
            this.sliderZoomed = false;
        }
        renderer.authoringInfo.classificationMethod = "manual";
        this.arcgisSmartMappingColorSizeSliderChange.emit();
    }
    createColorSizeSliderChangeEvents() {
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const rendererType = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.g)();
        const sizeVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)(renderer, "size");
        const isAgeRenderer = ["size-age", "color-size-age", "type-size-age"].indexOf(rendererType) > -1;
        const fieldInfo = this.getFieldInfo();
        const isDateField = fieldInfo.simpleFieldType === _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.w.DATE;
        if (!this.colorSizeSlider) {
            return;
        }
        // handles zigzag click
        this.colorSizeSlider.watch("zoomOptions", (newValue, oldValue) => {
            if (this.sliderZoomed &&
                (((oldValue === null || oldValue === void 0 ? void 0 : oldValue.min) && !(newValue === null || newValue === void 0 ? void 0 : newValue.min)) || ((oldValue === null || oldValue === void 0 ? void 0 : oldValue.max) && !(newValue === null || newValue === void 0 ? void 0 : newValue.max)))) {
                this.zigzagClick = true;
                this.handleZigzagClick(newValue);
            }
        });
        this.colorSizeSlider.on("min-change", (info) => {
            if (info.value > this.currentColorStopValues[0]) {
                this.colorSizeSlider.stops.forEach((stop, idx) => {
                    stop.value = this.currentColorStopValues[idx];
                });
                this.onMinMaxChange(this.currentColorStopValues[0], this.colorSizeSlider.slider.max, "min");
            }
            else {
                this.onMinMaxChange(info.value, this.colorSizeSlider.slider.max, "min");
            }
        });
        this.colorSizeSlider.on("max-change", (info) => {
            if (info.value < this.currentColorStopValues[this.currentColorStopValues.length - 1]) {
                this.colorSizeSlider.stops.forEach((stop, idx) => {
                    stop.value = this.currentColorStopValues[idx];
                });
                this.onMinMaxChange(this.colorSizeSlider.slider.min, this.currentColorStopValues[this.currentColorStopValues.length - 1], "max");
            }
            else {
                this.onMinMaxChange(this.colorSizeSlider.slider.min, info.value, "max");
            }
        });
        this.colorSizeSlider.on("thumb-change", (info) => {
            if (sizeVisVar) {
                if (isDateField && !isAgeRenderer && info.value === 0) {
                    (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
                    return;
                }
                this.updateRendererStops(this.colorSizeSlider.stops);
            }
        });
        this.colorSizeSlider.on("thumb-drag", () => {
            if (sizeVisVar) {
                const stops = this.colorSizeSlider.stops;
                this.updateRendererStops(stops);
            }
        });
        this.colorSizeSlider.on("segment-drag", () => {
            this.updateRendererStops(this.colorSizeSlider.stops);
        });
    }
    updateRendererStops(stops) {
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const colorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)(renderer, "color");
        const sizeVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)(renderer, "size");
        const authSizeVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.p)(renderer, "size");
        const authInfo = renderer.authoringInfo;
        const isAboveAndBelow = authInfo.univariateTheme === "above-and-below";
        if (sizeVisVar.stops) {
            sizeVisVar.stops.forEach((stop, idx) => {
                stop.value = stops[idx].value;
                stop.size = stops[idx].size;
                stop.label = "";
            });
        }
        else {
            sizeVisVar.minDataValue = stops[0].value;
            sizeVisVar.maxDataValue = stops[stops.length - 1].value;
        }
        if (colorVisVar) {
            colorVisVar.stops.forEach((stop, idx) => {
                stop.value = stops[idx].value;
                stop.color = stops[idx].color;
                stop.label = "";
            });
        }
        this.currentColorStopValues = stops.map((stop) => stop.value);
        this.currentSizeStopSizes = stops.map((stop) => stop.size);
        if (renderer.classBreakInfos.length === 2) {
            renderer.classBreakInfos[0].maxValue = stops[2].value;
            renderer.classBreakInfos[1].minValue = stops[2].value;
        }
        const zoomOptions = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.aC)(isAboveAndBelow
            ? sizeVisVar.stops
            : [{ value: sizeVisVar.minDataValue }, { value: sizeVisVar.maxDataValue }], authSizeVisVar === null || authSizeVisVar === void 0 ? void 0 : authSizeVisVar.minSliderValue, authSizeVisVar === null || authSizeVisVar === void 0 ? void 0 : authSizeVisVar.maxSliderValue);
        if (this.sliderZoomed) {
            this.zoomButtonNode.disabled = false;
        }
        else if (!zoomOptions ||
            zoomOptions.minMaxSame ||
            (!(0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ac)(zoomOptions.min) && !(0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ac)(zoomOptions.max))) {
            this.zoomButtonNode.disabled = true;
        }
        else {
            this.zoomButtonNode.disabled = false;
        }
        (0,_slider_e162e136_js__WEBPACK_IMPORTED_MODULE_7__.u)(this.colorSizeSlider, this.colorSliderBars);
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
    }
    getDefaultDataRange(fieldInfo) {
        if (fieldInfo.simpleFieldType === _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.w.DATE) {
            const year = new Date().getFullYear();
            return [new Date(`1/1/${year}`).getTime(), new Date(`12/31/${year}`).getTime()];
        }
        else {
            return [0, 100];
        }
    }
    getFieldInfo() {
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const sizeVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)(renderer, "size");
        const field = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.u)(sizeVisVar ? sizeVisVar.field : renderer.field);
        const fieldInfo = {
            field: (sizeVisVar === null || sizeVisVar === void 0 ? void 0 : sizeVisVar.field) || renderer.field,
            expression: (sizeVisVar === null || sizeVisVar === void 0 ? void 0 : sizeVisVar.valueExpression) || renderer.valueExpression,
            expressionTitle: (sizeVisVar === null || sizeVisVar === void 0 ? void 0 : sizeVisVar.valueExpressionTitle) || renderer.valueExpressionTitle,
            simpleFieldType: field ? field.simpleFieldType : _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.w.NUMBER
        };
        return fieldInfo;
    }
    handleZigzagClick(newValue) {
        var _a, _b;
        const { statistics } = this;
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const sizeVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)(renderer, "size");
        const authSizeVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.p)(renderer, "size");
        const fieldInfo = this.getFieldInfo();
        const normalizationField = sizeVisVar
            ? sizeVisVar.normalizationField
            : renderer.normalizationField;
        this.getHistogram(fieldInfo, normalizationField, statistics, (_a = newValue === null || newValue === void 0 ? void 0 : newValue.min) !== null && _a !== void 0 ? _a : authSizeVisVar.minSliderValue, (_b = newValue === null || newValue === void 0 ? void 0 : newValue.max) !== null && _b !== void 0 ? _b : authSizeVisVar.maxSliderValue);
        if (!newValue) {
            this.sliderZoomed = false;
        }
    }
    get hostElement() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisSmartMappingColorSizeSlider.style = arcgisSmartMappingColorSizeSliderCss;

const arcgisSmartMappingSymbolPairButtonCss = ".symbol-pair-name{display:flex;padding:6px;justify-content:space-between;align-items:center;border-radius:0;cursor:pointer;background-color:var(--calcite-color-foreground-1);color:var(--calcite-color-text-1);outline-color:var(--calcite-color-foreground-3);outline-width:1px;outline-style:solid;box-shadow:transparent 0px 0px 0px 1px inset}.symbol-pair-name:hover{outline-width:2px}.symbol-pair-name:focus{box-shadow:inset 0 0 0 2px var(--calcite-color-foreground-3);outline:2px solid var(--calcite-color-brand);outline-offset:2px}";

const ArcgisSmartMappingSymbolPairButton = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisSmartMappingSymbolPairButtonChange = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingSymbolPairButtonChange", 7);
        this.arcgisSmartMappingSymbolPairButtonBeforeOpen = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingSymbolPairButtonBeforeOpen", 7);
        this.arcgisSmartMappingSymbolPairButtonError = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingSymbolPairButtonError", 7);
        this.symbolPairPopoverOpen = false;
    }
    arcgisSmartMappingClosePopoversHandler() {
        var _a;
        this.symbolPairPopoverOpen = false;
        if (this.symbolPairPopoverNode) {
            (_a = this.symbolPairPopoverNode.parentNode) === null || _a === void 0 ? void 0 : _a.removeChild(this.symbolPairPopoverNode);
            this.symbolPairPopoverNode = null;
        }
    }
    //--------------------------------------------------------------------------
    //
    // Lifecycle
    //
    //--------------------------------------------------------------------------
    componentWillLoad() {
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        this.flowItemNode = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.F)(this.hostElement, "calcite-flow-item");
        this.allSymbolPairs = [
            ["single", strings.symbolPairButton.singleSymbol],
            ["circle", strings.symbolPairButton.circles],
            ["square", strings.symbolPairButton.squares],
            ["caret", strings.symbolPairButton.chevrons],
            ["circle-caret", strings.symbolPairButton.circlesChevrons],
            ["arrow", strings.symbolPairButton.arrows],
            ["circle-arrow", strings.symbolPairButton.circleArrows],
            ["plus-minus", strings.symbolPairButton.plusMinus],
            ["circle-plus-minus", strings.symbolPairButton.circlePlusMinus],
            ["happy-sad", strings.symbolPairButton.faces],
            ["triangle", strings.symbolPairButton.triangles],
            ["thumb", strings.symbolPairButton.thumbs]
        ];
    }
    //--------------------------------------------------------------------------
    //
    // Render Methods
    //
    //--------------------------------------------------------------------------
    render() {
        const { layer, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const authInfo = renderer.authoringInfo;
        const symbolStyle = authInfo.univariateSymbolStyle;
        let symbolPairName = strings.symbolPairButton.singleSymbol;
        this.allSymbolPairs.forEach((symbolPair) => {
            if (symbolStyle === symbolPair[0]) {
                symbolPairName = symbolPair[1];
            }
        });
        if (symbolStyle === "custom") {
            symbolPairName = strings.symbolPairButton.custom;
        }
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, strings.symbolPairButton.symbolPair, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { ref: (node) => (this.symbolPairButtonNode = node), scale: "m", alignment: "icon-end-space-between", iconEnd: "chevron-down", appearance: "outline-fill", width: "full", tabindex: "0", role: "button", kind: "neutral", "aria-haspopup": "true", label: strings.symbolPairButton.symbolPair, onClick: () => this.symbolPairPopoverOpen ? (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.E)() : this.handleSymbolPairClick() }, symbolPairName)));
    }
    //--------------------------------------------------------------------------
    //
    // Private Methods
    //
    //--------------------------------------------------------------------------
    handleSymbolPairClick() {
        this.arcgisSmartMappingSymbolPairButtonBeforeOpen.emit();
        const symbolPicker = document.createElement("arcgis-smart-mapping-symbol-pair-popover");
        this.symbolPairPopoverNode = symbolPicker;
        symbolPicker.popoverProps = {
            refElement: this.flowItemNode,
            placement: "leading",
            offsetDistance: 0,
            overlayPositioning: "absolute",
            flipDisabled: false,
            triggerDisabled: false
        };
        symbolPicker.symbolPairs = this.allSymbolPairs;
        symbolPicker.addEventListener("arcgisSmartMappingSymbolPairPopoverClose", () => this.closePopover());
        symbolPicker.addEventListener("arcgisSmartMappingSymbolPairPopoverChange", (event) => {
            const symbolStyle = event.detail;
            this.closePopover();
            const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
            (0,_loading_69139907_js__WEBPACK_IMPORTED_MODULE_3__.r)((0,_colorSizeUnivariant_d266ac7c_js__WEBPACK_IMPORTED_MODULE_8__.a)({ symbolStyle: symbolStyle }), this.flowItemNode).then((result) => {
                (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.e)(result.renderer, layer);
                (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
                (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
                this.arcgisSmartMappingSymbolPairButtonChange.emit();
            }, (error) => this.arcgisSmartMappingSymbolPairButtonError.emit(error));
        });
        document.body.appendChild(symbolPicker);
        this.symbolPairPopoverOpen = true;
    }
    closePopover() {
        var _a;
        this.symbolPairPopoverOpen = false;
        if (this.symbolPairPopoverNode) {
            (_a = this.symbolPairPopoverNode.parentNode) === null || _a === void 0 ? void 0 : _a.removeChild(this.symbolPairPopoverNode);
            this.symbolPairPopoverNode = null;
            setTimeout(() => this.symbolPairButtonNode.setFocus(), 300);
        }
    }
    get hostElement() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisSmartMappingSymbolPairButton.style = arcgisSmartMappingSymbolPairButtonCss;

const ArcgisSmartMappingSymbolPairPopover = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisSmartMappingSymbolPairPopoverClose = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingSymbolPairPopoverClose", 7);
        this.arcgisSmartMappingSymbolPairPopoverChange = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingSymbolPairPopoverChange", 7);
        this.resizeObserver = new ResizeObserver((boundingRects) => {
            const panel = boundingRects.pop();
            this.popoverWidth = panel.contentRect.width * 1.05;
            this.offsetDistance = -Math.round(this.popoverProps.refElement.getBoundingClientRect().width * 1.025);
        });
        this.popoverProps = undefined;
        this.symbolPairs = undefined;
        this.popoverWidth = undefined;
    }
    // --------------------------------------------------------------------------
    //
    //  Public Calls
    //
    // --------------------------------------------------------------------------
    async setFocus() {
        this.calcitePopoverNode.setFocus();
    }
    // --------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    // --------------------------------------------------------------------------
    componentDidLoad() {
        requestAnimationFrame(() => this.calcitePopoverNode.setFocus());
        this.resizeObserver.observe(this.popoverProps.refElement);
    }
    disconnectedCallback() {
        this.resizeObserver.unobserve(this.popoverProps.refElement);
    }
    // --------------------------------------------------------------------------
    //
    // Render  Methods
    //
    // --------------------------------------------------------------------------
    render() {
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const props = this.popoverProps;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.H, { class: "js-app-flyout" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-popover", { ref: (node) => (this.calcitePopoverNode = node), dir: _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s.isRTL ? "rtl" : "ltr", placement: "leading-start", open: true, heading: strings.symbolPairButton.symbolPair, closable: true, pointerDisabled: true, referenceElement: props.refElement, offsetDistance: this.offsetDistance, offsetSkidding: 105, overlayPositioning: props.overlayPositioning, triggerDisabled: props.triggerDisabled, label: strings.symbolPairButton.symbolPair, onCalcitePopoverClose: () => this.arcgisSmartMappingSymbolPairPopoverClose.emit(), style: { width: `${this.popoverWidth}px` } }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-list", { selectionMode: "single-persist" }, this.renderItems()))));
    }
    renderItems() {
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const authInfo = renderer.authoringInfo;
        const symbolStyle = authInfo.univariateSymbolStyle || "single";
        const items = [];
        this.symbolPairs.forEach((symbolPair) => {
            items.push(this.renderItem(symbolPair[0], symbolPair[1], symbolStyle === symbolPair[0]));
        });
        return items;
    }
    renderItem(symbolType, label, isSelected) {
        const imagePath = symbolType.charAt(0).toUpperCase() + symbolType.slice(1) + ".svg";
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-list-item", { label: label, selected: isSelected, onClick: () => this.arcgisSmartMappingSymbolPairPopoverChange.emit(symbolType), onKeyDown: (event) => {
                if (event.key === " " || event.key === "Enter") {
                    event.preventDefault();
                    event.stopPropagation();
                    this.arcgisSmartMappingSymbolPairPopoverChange.emit(symbolType);
                }
            } }, symbolType !== "single" ? ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { scale: "s", slot: "actions-end", text: "symbol-pair-symbols" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { style: {
                width: "32px",
                height: "32px",
                backgroundImage: `url(${(0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.a)(`./assets/arcgis-smart-mapping-symbol-pair-images/`)}${imagePath})`
            } }))) : null));
    }
    get hostElement() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};



//# sourceMappingURL=arcgis-smart-mapping-color-size-slider_3.entry.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/date-79c7d93c.js":
/*!**********************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/date-79c7d93c.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ addDateFormatFunctions),
/* harmony export */   b: () => (/* binding */ utcToTimePicker),
/* harmony export */   d: () => (/* binding */ datePickerToUTC),
/* harmony export */   u: () => (/* binding */ utcToDatePicker)
/* harmony export */ });
/* harmony import */ var _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./raster-unique-value-0976ec7f.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/raster-unique-value-0976ec7f.js");
/* harmony import */ var _loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./loadModules-b4ac1247.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-b4ac1247.js");
/* harmony import */ var _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./commonEnums-fcf13661.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/commonEnums-fcf13661.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */




function addDateFormatFunctions(config, timeZone) {
    config.labelFormatFunction = (value) => {
        return getDateDisplayString(value, timeZone, "short-date");
    };
    config.inputFormatFunction = (value) => {
        return getDateDisplayString(value, timeZone, "short-date");
    };
    config.inputParseFunction = (value) => {
        return mapTZToUTC(Date.parse(value), timeZone);
    };
}
function utcToDatePicker(value, timeZone) {
    // date is in UTC
    // we need a map timezone
    let str;
    if (!timeZone || timeZone === "system") {
        const diff = new Date().getTimezoneOffset();
        str = new Date(value - diff * 60000).toISOString();
    }
    else if (timeZone === "unknown") {
        str = new Date(value).toISOString();
    }
    else {
        const diff = new Date().getTimezoneOffset();
        const mapDateStr = new Date(value).toLocaleString("en-US", { timeZone });
        str = new Date(new Date(mapDateStr).getTime() - diff * 60000).toISOString();
    }
    // console.log("utcToDatePicker", value, " - ", new Date(value).toISOString(), " -> ", str);
    return str;
}
function utcToTimePicker(value, timeZone, addSeconds) {
    // date is in UTC
    // we need a map timezone
    let str;
    if (!timeZone || timeZone === "system") {
        const diff = new Date().getTimezoneOffset();
        str = new Date(value - diff * 60000).toISOString();
    }
    else if (timeZone === "unknown") {
        str = new Date(value).toISOString();
    }
    else {
        const diff = new Date().getTimezoneOffset();
        const mapDateStr = new Date(value).toLocaleString("en-US", { timeZone });
        str = new Date(new Date(mapDateStr).getTime() - diff * 60000).toISOString();
    }
    // str = "2023-09-20T13:06:00.000Z"
    str = addSeconds ? str.substring(11, 19) : str.substring(11, 16);
    // console.log("utcToTimePicker", value, " - ", new Date(value).toISOString(), " -> ", str);
    return str;
}
function datePickerToUTC(dateString, timeZone) {
    // date is in map timezone
    // we need a UTC UNIX timestamp
    let date = new Date(dateString);
    // this is read as current time; toISOString() would reaturn UTC time (e.g. +7 hours from pacific)
    // fix the offset
    date = new Date(date.getTime() - date.getTimezoneOffset() * 60000);
    // date now contains the user's entered time
    let value;
    if (!timeZone || timeZone === "system") {
        // add difference between local time and UTC
        value = date.getTime() + date.getTimezoneOffset() * 60000;
    }
    else if (timeZone === "unknown") {
        // take what you get
        value = date.getTime();
    }
    else {
        // add difference between map time and UTC
        const diff = new Date(date.toLocaleString("en-US", { timeZone: "utc" })).getTime() -
            new Date(date.toLocaleString("en-US", { timeZone })).getTime();
        value = date.getTime() + diff;
    }
    // console.log("datePickerToUTC", date.toISOString(), " -> ", new Date(value).toISOString());
    return value;
}
function mapTZToUTC(value, timeZone) {
    if (!value) {
        return value;
    }
    // value is in map timezone
    // we need a UTC timestamp
    let newValue;
    if (!timeZone || timeZone === "system") {
        // add difference between local time and UTC
        const date = new Date();
        newValue = value + date.getTimezoneOffset() * 60000;
    }
    else if (timeZone === "unknown") {
        // take what you get
        newValue = value;
    }
    else {
        // add difference between map time and UTC
        const date = new Date();
        const diff = new Date(date.toLocaleString("en-US", { timeZone: "utc" })).getTime() -
            new Date(date.toLocaleString("en-US", { timeZone })).getTime();
        newValue = value + diff;
    }
    console.log("mapTZToUTC", value, " - ", new Date(value).toISOString(), " - ", new Date(newValue).toISOString());
    return newValue;
}
function getDateDisplayString(value, timeZone, dateFormat) {
    const { modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    let str;
    if (timeZone === "unknown") {
        str = modules.intl.formatDate(value, Object.assign(Object.assign({}, modules.intl.convertDateFormatToIntlOptions(dateFormat || "short-date-short-time")), { timeZone: "utc", timeZoneName: "shortOffset" }));
    }
    else {
        // known issues with formatting it-CH
        str = modules.intl.formatDate(value, Object.assign(Object.assign({}, modules.intl.convertDateFormatToIntlOptions(dateFormat || "short-date-short-time")), { timeZone }));
    }
    // console.log("getDateDisplayString", value, " - ", new Date(value).toISOString(), " -> ", str);
    return str;
}



//# sourceMappingURL=date-79c7d93c.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/slider-e162e136.js":
/*!************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/slider-e162e136.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   b: () => (/* binding */ barCreatedFunction),
/* harmony export */   u: () => (/* binding */ updateHistogramColors)
/* harmony export */ });
/* harmony import */ var _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./raster-unique-value-0976ec7f.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/raster-unique-value-0976ec7f.js");
/* harmony import */ var _loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./loadModules-b4ac1247.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-b4ac1247.js");
/* harmony import */ var _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./commonEnums-fcf13661.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/commonEnums-fcf13661.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */




function barCreatedFunction(colorVisVarOrBreaks, histogram, sliderBars, idx, element) {
    const color = (colorVisVarOrBreaks === null || colorVisVarOrBreaks === void 0 ? void 0 : colorVisVarOrBreaks.length)
        ? getColorForValueClassed(colorVisVarOrBreaks, histogram.bins[idx])
        : getColorForValue(colorVisVarOrBreaks.stops, histogram.bins[idx]);
    color && element.setAttribute("fill", color.toHex());
    color && element.setAttribute("opacity", `${Math.max(color.a, 0.2)}`);
    sliderBars.push(element);
}
function updateHistogramColors(slider, sliderBars, colorVisVarOrBreaks, histogram) {
    sliderBars === null || sliderBars === void 0 ? void 0 : sliderBars.forEach((element, index) => {
        const bin = (histogram || slider.histogramConfig).bins[index];
        const color = slider.breaks
            ? getColorForValueClassed(colorVisVarOrBreaks || slider.breaks, bin)
            : getColorForValue((colorVisVarOrBreaks || slider)
                .stops, bin);
        color && element.setAttribute("fill", color.toHex());
        color && element.setAttribute("opacity", `${Math.max(color.a, 0.2)}`);
    });
}
function getColorForValue(stops, bin) {
    // infers the color for a given value
    // based on the stops from a ColorVariable
    const { modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    if (!bin) {
        return;
    }
    const value = (bin.maxValue - bin.minValue) / 2 + bin.minValue;
    let minStop = stops[0];
    let maxStop = stops[stops.length - 1];
    const minStopValue = minStop.value;
    const maxStopValue = maxStop.value;
    if (value < minStopValue) {
        return minStop.color;
    }
    if (value > maxStopValue) {
        return maxStop.color;
    }
    const exactMatches = stops.filter((stop) => stop.value === value);
    if (exactMatches.length > 0) {
        return exactMatches[0].color;
    }
    minStop = null;
    maxStop = null;
    stops.forEach((stop, i) => {
        if (!minStop && !maxStop && stop.value >= value) {
            minStop = stops[i - 1];
            maxStop = stop;
        }
    });
    const weightedPosition = (value - minStop.value) / (maxStop.value - minStop.value);
    return modules.esriColor.blendColors(minStop.color, maxStop.color, weightedPosition);
}
function getColorForValueClassed(breaks, bin) {
    // infers the color for a given value
    // based on the classBreakInfo
    if (!bin) {
        return;
    }
    const value = (bin.maxValue - bin.minValue) / 2 + bin.minValue;
    let minBreak = breaks[0];
    let maxBreak = breaks[breaks.length - 1];
    if (value < minBreak.min || value > maxBreak.max) {
        return undefined;
    }
    const exactMatches = breaks.filter((b) => b.min === value);
    if (exactMatches.length > 0) {
        return exactMatches[0].color;
    }
    minBreak = breaks[breaks.length - 1];
    maxBreak = null;
    breaks.forEach((b, i) => {
        if (!maxBreak && b.min >= value) {
            minBreak = breaks[i - 1];
            maxBreak = b;
        }
    });
    return minBreak.color;
}



//# sourceMappingURL=slider-e162e136.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,