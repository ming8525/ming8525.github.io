"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_arcgis-raster-function-editor_-e4ce1e"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/common-strings.sv-9d23d938.js":
/*!**************************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/common-strings.sv-9d23d938.js ***!
  \**************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   addRaster: () => (/* binding */ addRaster),
/* harmony export */   addScalar: () => (/* binding */ addScalar),
/* harmony export */   breadcrumb: () => (/* binding */ breadcrumb),
/* harmony export */   breadcrumbEditor: () => (/* binding */ breadcrumbEditor),
/* harmony export */   cancel: () => (/* binding */ cancel),
/* harmony export */   category: () => (/* binding */ category),
/* harmony export */   categoryNames: () => (/* binding */ categoryNames),
/* harmony export */   close: () => (/* binding */ close),
/* harmony export */   copy: () => (/* binding */ copy),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   defaultModelName: () => (/* binding */ defaultModelName),
/* harmony export */   definitionQuery: () => (/* binding */ definitionQuery),
/* harmony export */   description: () => (/* binding */ description),
/* harmony export */   deselectFunction: () => (/* binding */ deselectFunction),
/* harmony export */   details: () => (/* binding */ details),
/* harmony export */   dialogTitle: () => (/* binding */ dialogTitle),
/* harmony export */   dontSave: () => (/* binding */ dontSave),
/* harmony export */   enterFURL: () => (/* binding */ enterFURL),
/* harmony export */   enterURL: () => (/* binding */ enterURL),
/* harmony export */   error: () => (/* binding */ error),
/* harmony export */   errorTitle: () => (/* binding */ errorTitle),
/* harmony export */   everyone: () => (/* binding */ everyone),
/* harmony export */   f32PixelType: () => (/* binding */ f32PixelType),
/* harmony export */   f64PixelType: () => (/* binding */ f64PixelType),
/* harmony export */   failedToLoadLayer: () => (/* binding */ failedToLoadLayer),
/* harmony export */   folder: () => (/* binding */ folder),
/* harmony export */   general: () => (/* binding */ general),
/* harmony export */   groupFieldName: () => (/* binding */ groupFieldName),
/* harmony export */   groupItemsBy: () => (/* binding */ groupItemsBy),
/* harmony export */   groups: () => (/* binding */ groups),
/* harmony export */   invalidRFTMessage: () => (/* binding */ invalidRFTMessage),
/* harmony export */   isDataset: () => (/* binding */ isDataset),
/* harmony export */   isPublic: () => (/* binding */ isPublic),
/* harmony export */   item: () => (/* binding */ item),
/* harmony export */   itemGroup: () => (/* binding */ itemGroup),
/* harmony export */   loadingLayer: () => (/* binding */ loadingLayer),
/* harmony export */   matchVariables: () => (/* binding */ matchVariables),
/* harmony export */   mosaic: () => (/* binding */ mosaic),
/* harmony export */   multidimensionalRules: () => (/* binding */ multidimensionalRules),
/* harmony export */   name: () => (/* binding */ name),
/* harmony export */   noTagErrorMsg: () => (/* binding */ noTagErrorMsg),
/* harmony export */   noTitleErrorMsg: () => (/* binding */ noTitleErrorMsg),
/* harmony export */   noTitleTagErrorMsg: () => (/* binding */ noTitleTagErrorMsg),
/* harmony export */   ok: () => (/* binding */ ok),
/* harmony export */   organization: () => (/* binding */ organization),
/* harmony export */   outputPixelType: () => (/* binding */ outputPixelType),
/* harmony export */   owner: () => (/* binding */ owner),
/* harmony export */   parameter: () => (/* binding */ parameter),
/* harmony export */   parameters: () => (/* binding */ parameters),
/* harmony export */   properties: () => (/* binding */ properties),
/* harmony export */   raster: () => (/* binding */ raster),
/* harmony export */   rasterFunctionEditor: () => (/* binding */ rasterFunctionEditor),
/* harmony export */   rasterFunctions: () => (/* binding */ rasterFunctions),
/* harmony export */   rfxLicenseInfo: () => (/* binding */ rfxLicenseInfo),
/* harmony export */   s16PixelType: () => (/* binding */ s16PixelType),
/* harmony export */   s32PixelType: () => (/* binding */ s32PixelType),
/* harmony export */   s8PixelType: () => (/* binding */ s8PixelType),
/* harmony export */   save: () => (/* binding */ save),
/* harmony export */   saveAs: () => (/* binding */ saveAs),
/* harmony export */   saveUtils: () => (/* binding */ saveUtils),
/* harmony export */   savingMessage: () => (/* binding */ savingMessage),
/* harmony export */   scalar: () => (/* binding */ scalar),
/* harmony export */   search: () => (/* binding */ search),
/* harmony export */   selectFeature: () => (/* binding */ selectFeature),
/* harmony export */   selectFunction: () => (/* binding */ selectFunction),
/* harmony export */   selectRaster: () => (/* binding */ selectRaster),
/* harmony export */   serviceURL: () => (/* binding */ serviceURL),
/* harmony export */   setGroupSharing: () => (/* binding */ setGroupSharing),
/* harmony export */   setSharingLevel: () => (/* binding */ setSharingLevel),
/* harmony export */   share: () => (/* binding */ share),
/* harmony export */   shareWith: () => (/* binding */ shareWith),
/* harmony export */   success: () => (/* binding */ success),
/* harmony export */   tagFieldName: () => (/* binding */ tagFieldName),
/* harmony export */   tags: () => (/* binding */ tags),
/* harmony export */   title: () => (/* binding */ title),
/* harmony export */   toolDetailsEditor: () => (/* binding */ toolDetailsEditor),
/* harmony export */   toolEditor: () => (/* binding */ toolEditor),
/* harmony export */   toolModeler: () => (/* binding */ toolModeler),
/* harmony export */   tryAgain: () => (/* binding */ tryAgain),
/* harmony export */   type: () => (/* binding */ type),
/* harmony export */   u16PixelType: () => (/* binding */ u16PixelType),
/* harmony export */   u32PixelType: () => (/* binding */ u32PixelType),
/* harmony export */   u8PixelType: () => (/* binding */ u8PixelType),
/* harmony export */   unionDimensions: () => (/* binding */ unionDimensions),
/* harmony export */   unknownPixelType: () => (/* binding */ unknownPixelType),
/* harmony export */   unsavedTitle: () => (/* binding */ unsavedTitle),
/* harmony export */   unsavedWarningExisting: () => (/* binding */ unsavedWarningExisting),
/* harmony export */   unsavedWarningNew: () => (/* binding */ unsavedWarningNew),
/* harmony export */   userStartDirection: () => (/* binding */ userStartDirection),
/* harmony export */   variables: () => (/* binding */ variables),
/* harmony export */   viewerModeMessage: () => (/* binding */ viewerModeMessage),
/* harmony export */   viewerModeTitle: () => (/* binding */ viewerModeTitle),
/* harmony export */   warning: () => (/* binding */ warning)
/* harmony export */ });
const ok = "OK";
const cancel = "Avbryt";
const enterURL = "Ange URL till bildtjänst";
const serviceURL = "Tjänste-URL";
const selectRaster = "Välj raster";
const failedToLoadLayer = "Det gick inte att läsa in lagret";
const loadingLayer = "Läser in lager";
const selectFeature = "Välj geoobjektlager";
const enterFURL = "Ange URL till geoobjekttjänst";
const addRaster = "Lägg till rastervariabel";
const addScalar = "Lägg till konstant";
const raster = "Raster";
const scalar = "Skalär";
const defaultModelName = "Mall för rasterfunktion";
const general = "Allmänt";
const parameters = "Parametrar";
const variables = "Variabler";
const name = "Namn";
const description = "Beskrivning";
const parameter = "Parameter";
const isPublic = "IsPublic";
const isDataset = "IsDataset";
const unknownPixelType = "Okänt";
const outputPixelType = "Pixeltyp för utdata";
const u8PixelType = "8-bitars osignerad";
const s8PixelType = "8-bitars signerad";
const u16PixelType = "16-bitars osignerad";
const s16PixelType = "16-bitars signerade";
const u32PixelType = "32-bitars osignerade";
const s32PixelType = "32-bitars signerad";
const f32PixelType = "32-bitars flyttal";
const f64PixelType = "64-bitars dubbel";
const properties = "Egenskaper";
const multidimensionalRules = "Flerdimensionella regler";
const matchVariables = "Matcha variabler";
const unionDimensions = "Unionsdimensioner";
const rasterFunctionEditor = {
	invalidRFTMessage: "Rasterfunktionsmallen är inte giltig.",
	rfxArgsEditor: {
		outputRaster: "OutputRaster",
		raster: "Raster",
		unsupportedDataTypeWarning: "Följande argument visas inte eftersom de för närvarande inte stöds.",
		unsupportedFunction: "Innehåller rasterfunktion(er) som för närvarande inte stöds."
	},
	rfxRasterInput: {
		selectLayer: "Välj lager",
		browseLayers: "Bläddra bland lager",
		rfxVariable: "RasterFunctionVariable"
	},
	rfxBandCombinationEditor: {
		methodLabel: "Metod",
		bandLabel: "Band",
		combinationLabel: "Kombination"
	},
	rfxRemapGrid: {
		minimum: "Minimum",
		maximum: "Maximalt",
		output: "Utdata",
		noData: "NoData",
		remapValuesLabel: "Mappa om värden"
	},
	rfxNamedRasterEditor: {
		rasterVariables: "Rastervariabler",
		deleteSelectedVars: "Ta bort valda variabler"
	},
	rfxClippingGeometry: {
		clippingLayer: "Beskärningslager",
		clippingRaster: "Klipper raster",
		clippingGeometry: "Klippningsgeometri",
		customExtent: "Anpassad utbredning",
		outputExtent: "Utdatautbredning",
		currentExtent: "Aktuell kartutbredning",
		drawLabel: "Rita"
	},
	rfxCustomExtent: {
		top: "Övre",
		right: "Höger",
		bottom: "Längst ned",
		left: "Vänster"
	},
	rfxRasterArrayEditor: {
		moveUp: "Flytta uppåt",
		moveDown: "Flytta nedåt",
		remove: "Ta bort"
	},
	rfxStatisticsGrid: {
		stdDev: "Std. av.",
		min: "Min.",
		max: "Max",
		mean: "Medelvärde"
	},
	rfxWeightedSumTableEditor: {
		weightedSumTable: "Viktad summeringstabell",
		id: "ID",
		layer: "Lager",
		field: "Fält",
		weight: "Vikt",
		value: "Värde",
		selectLayer: "Välj lager"
	},
	rfxWeightedOverlayTableEditor: {
		weightedOverlayTable: "Viktad överlagringstabell",
		id: "ID",
		layer: "Lager",
		field: "Fält",
		influence: "Inflytande",
		sumOfInfluence: "Summa av inflytande",
		value: "Värde",
		remapTable: "Ommappningstabell",
		scale: "Skala",
		scales: "Skalor",
		selectRaster: "Välj raster"
	},
	rfxFeatureSelect: {
		addFeatureLayer: "Bläddra efter ett geoobjektlager",
		addPointLayer: "Bläddra efter ett punktlager"
	},
	rfxFieldSelect: {
		value: "Värde",
		count: "Antal"
	},
	rfxAttributeTable: {
		tableType: "Tabelltyp",
		manual: "Manuell",
		external: "Extern",
		minVal: "Minsta värde",
		maxVal: "Maximalt värde",
		baseClassName: "Klassbasnamn",
		colorScheme: "Färgschema",
		defaultClassName: "Label_",
		generateTable: "Skapa tabell",
		browseTable: "Bläddra i tabell",
		value: "Värde",
		classname: "ClassName",
		color: "Färg"
	},
	rfxFieldNumberSwitchable: {
		number: "Numerisk",
		field: "Fält",
		string: "Sträng",
		linearUnit: "Linjär enhet"
	},
	rfxPropertySet: {
		name: "Namn",
		value: "Värde"
	},
	rfxConversionGrid: {
		size: "Storlek"
	},
	rfxTransposeBit: {
		bitPattern: "Bitmönster",
		outputBit: "Utdatabit",
		inputBit: "Indatabit"
	},
	rfxSpatialReference: {
		placeHolder: "Förfina genom nyckelord",
		coordinateSystem: "Koordinatsystem",
		gcs: "Geografiskt koordinatsystem",
		pcs: "Projicerat koordinatsystem",
		vcs: "Vertikalt koordinatsystem"
	}
};
const rfxLicenseInfo = "Denna mall för rasterfunktion kan användas till att bearbeta dina bilder med ArcGIS Image Server.";
const rasterFunctions = {
	rfx: {
		aCosHName: "ACosH",
		aCosHSnip: "Beräknar omvänd hyperbolisk cosinus för celler i ett raster.",
		aCosHDesc: "Funktionen beräknar omvänd hyperbolisk cosinus för pixlarna i ett raster.",
		aCosName: "ACos",
		aCosSnip: "Beräknar omvänd cosinus för pixlarna i ett raster.",
		aCosDesc: "Denna rasterfunktion beräknar omvänd cosinus för celler i ett raster. Inom matematiken har alla trigonometriska funktioner ett definierat omfång av giltiga ingångsvärden som kallas domän. Resultatvärdena från varje funktion har också ett omfång för resultatvärden. För det här verktyget är domänen [-1, 1] och omfånget [0, pi].",
		aSinHName: "ASinH",
		aSinHSnip: "Beräknar omvänd hyperbolisk sinus för celler i ett raster.",
		aSinHDesc: "Funktionen beräknar omvänd hyperbolisk sinus för pixlarna i ett raster.",
		aSinName: "ASin",
		aSinSnip: "Beräknar omvänd sinus för celler i ett raster.",
		aSinDesc: "Funktionen beräknar omvänd sinus för pixlarna i ett raster.",
		aTan2Name: "ATan2",
		aTan2Snip: "Beräknar omvänd tangent (baserad på x,y) för celler i ett raster.",
		aTan2Desc: "Funktionen beräknar omvänd tangent (baserat på x,y) för pixlarna i ett raster.",
		aTanHName: "ATanH",
		aTanHSnip: "Beräknar omvänd hyperbolisk tangent för celler i ett raster.",
		aTanHDesc: "Funktionen beräknar omvänd hyperbolisk tangent för pixlarna i ett raster.",
		aTanName: "ATan",
		aTanSnip: "Beräknar omvänd tangent för celler i ett raster.",
		aTanDesc: "Funktionen beräknar omvänd tangent för pixlarna i ett raster.",
		absName: "Abs",
		absSnip: "Beräknar absolut värde för cellerna i ett raster.",
		absDesc: "Abs-funktionen beräknar absolut värde för pixlarna i ett raster.",
		reflectanceName: "Skenbar reflektans",
		reflectanceSnip: "Konverterar obearbetade bilder till Top of Atmosphere-värden genom att ta hänsyn till sensoregenskaper, solens position och vilken tid bilden togs.",
		reflectanceDesc: "Den här funktionen justerar det digitala siffervärdet för bildens ljusstyrka (DN) för några satellitsensorer. Justeringarna baseras på solhöjd, anskaffningsdatum och sensoregenskaper för att ställa in förstärkning och snedvridning för varje band. Den här funktionen används för att justera värden för reflektans, eller ljusstyrka, för några satellitbilder baserat på scenbelysning och inställningar för sensorförstärkning. Bilderna justeras efter en belysning som är vanlig i teorin, så att scenerna från olika datum och sensorer inte ska skilja sig så mycket. Detta kan vara användbart för bildklassificering, färgbalansering och mosaikbearbetning. Den här funktionen kan endast användas med specifika bilder. Sensorerna som går att använda är Landsat MSS, Landsat TM, Landsat ETM+, Landsat 8, IKONOS, QuickBird, GeoEye-1, RapidEye, DMCii, WorldView-1, WorldView-2, SPOT 6 och Pleiades.<div><br/>Funktionen utför två korrigeringar. Den första är baserad på förstärkningsinställningarna. De ursprungliga värdena för ljusstyrka återskapas från bildvärdena genom att vända på förstärkningsekvationerna. Den andra korrigeringen avser skillnader i solvinkel och ljusstyrka. De ursprungliga värdena för ljusstyrka justeras till ett vanligt ljusförhållande genom att normalisera scener som fångats under varierande belysning. Medan utdata för bilder i regel är av samma typ som indata för bilder, är värdena för utdata lägre än värdena för indata och klipps till giltigt dataintervall.</div>",
		argStatisticsName: "ArgStatistics",
		argStatisticsSnip: "Beräknar arg-statistik, inklusive Arg Max, Arg Min, Arg Median och Varaktighet.",
		argStatisticsDesc: "Funktionen beräknar arg-statistik. Det finns fyra metoder i ArgStatistics-funktionen: ArgMax, ArgMin, ArgMedian och Duration.",
		arithmeticName: "Aritmetiskt",
		arithmeticSnip: "Utför en aritmetisk åtgärd mellan två raster eller ett raster och en skalär.",
		arithmeticDesc: "Den aritmetiska funktionen utför en aritmetisk åtgärd mellan två raster eller ett raster och en skalär och vice versa.",
		aspectSlopeName: "Riktning–lutning",
		aspectSlopeSnip: "Skapar ett raster som samtidigt visar riktning och lutning för en kontinuerlig yta, enligt representationen i en digital höjdmodell.",
		aspectSlopeDesc: "Riktning–lutning-funktionen skapar ett rasterlager som samtidigt visar aspekten och lutningen för en yta. Aspekten identifierar lutningsriktningen nedåt för den största värdeskillnaden från en pixel till anslutande pixlar. Du kan tänka dig aspekten som lutningsriktningen. Värdena i utdatarastret är aspektens kompassriktning som visas genom en nyans (färg). Lutningen representerar ändringsfrekvensen för höjd för varje pixel i den digitala höjdmodellen (DEM). Lutningen representerar ytans lutning och symboliseras av tre klasser som visas genom färgmättnad (ljusstyrka).<div><br/>Pixelvärdena i utdatarastret för riktning–lutning visar en kombination aspekt och lutning. Pixlar med värden under 20 räknas som plana och visas i grått. Riktning–lutning-värden på 21 och över visas med olika färgmättnad med följande indelning: 21 till 30 —Färgmättnad för liten lutning, 31 till 40—Färgmättnad för måttlig lutning, 41 och över—Färgmättnad för hög lutning</div>",
		aspectName: "Lutningsriktning",
		aspectSnip: "Visar åt vilket håll en pixel är vänd, där 0 är rakt norrut och vinklarna ökas medurs till 360.",
		aspectDesc: "Aspektfunktionen identifierar lutningens riktning för den högsta graden av skillnad i värden från en cell till anslutande celler. Du kan tänka dig aspekten som lutningsriktningen. Värdena i utdatarastret är aspektens kompassriktning.<div><br/>Indata för den här funktionen är indatarastret. Aspektfunktionen används ofta på en digital höjdmodell (DEM). Som standard visas aspekten som en bild i gråskala. Du kan lägga till funktionen färgschema för att ange ett särskilt färgschema eller låta personen som visar mosaiken ändra symbologin med sitt eget färgschema.</div>",
		tableName: "Attributtabell",
		tableSnip: "Använder en tabell för att namnge och symbolisera värdena i ett dataset. Kolumner för tabellen avgränsas med kommatecken: PixelValue, AttributeName, RedValue, GreenValue, BlueValue.",
		tableDesc: "Funktionen attributtabell gör att du kan definiera en attributtabell för att symbolisera ett mosaikdataset eller rasterdataset med ett band. <div><br/>Detta är användbart när du vill presentera bilder som har klassificerats för markanvändning, till exempel skogsmark, våtmark, åkermark och stadsmark. Om din tabell innehåller fält som namnges som röda, gröna och blå kommer dessutom värden inom de fälten att användas som en färgkarta när bilden renderas.</div>",
		bandArithmeticName: "Band aritmetiskt",
		bandArithmeticSnip: "Beräknar index med hjälp av fördefinierade formler eller ett användardefinierat uttryck.",
		bandArithmeticDesc: "Funktionen Band aritmetiskt utför en aritmetisk åtgärd på banden för ett rasterdataset. Du kan välja fördefinierade algoritmer eller ange din egen enradiga formel. Operatorerna som stöds är -,+,/,*, och enställig -.",
		thresholdName: "Binärt tröskelvärde",
		thresholdSnip: "Ordnar kontinuerliga data i förgrund och bakgrund genom att minimera kovariansen mellan de båda klasserna.",
		thresholdDesc: "När ett rasterdataset har en bimodal fördelning, skapar den här funktionen ett nytt raster som delar in data i två distinkta klasser. Den skapar en klass med låga värden med svarta pixlar, och en klass med höga värden som visas med vita pixlar.",
		bitwiseAndName: "Bitvist And",
		bitwiseAndSnip: "Utför en bitvis And-åtgärd på de binära värdena i två indataraster.",
		bitwiseAndDesc: "Bitvis And utför en bitvis And-åtgärd på de binära värdena i två indataraster",
		bitwiseLeftShiftName: "Bitvist vänsterskift",
		bitwiseLeftShiftSnip: "Utför en bitvis vänsterskiftsåtgärd på de binära värdena i två indataraster.",
		bitwiseLeftShiftDesc: "Bitvis vänsterskift utför en bitvis vänsterskiftsåtgärd på de binära värdena i två indataraster.",
		bitwiseNotName: "Bitvist Not",
		bitwiseNotSnip: "Utför en bitvis Not-åtgärd (komplement) på det binära värdet i två indataraster.",
		bitwiseNotDesc: "Funktionen utför en bitvis Not-åtgärd (komplement) på det binära värdet i ett indataraster.",
		bitwiseOrName: "Bitvist Or",
		bitwiseOrSnip: "Utför en bitvis Or-åtgärd på de binära värdena i två indataraster.",
		bitwiseOrDesc: "Funktionen utför en bitvis Or-åtgärd på de binära värdena i två indataraster. ",
		bitwiseRightShiftName: "Bitvist högerskift",
		bitwiseRightShiftSnip: "Utför en bitvis högerskiftsåtgärd på de binära värdena i två indataraster.",
		bitwiseRightShiftDesc: "Funktionen utför en bitvis högerskiftsåtgärd på de binära värdena i två indataraster.",
		bitwiseXorName: "Bitvist Xor",
		bitwiseXorSnip: "Utför en bitvis eXclusive Or-åtgärd på de binära värdena i två indataraster.",
		bitwiseXorDesc: "Funktionen utför en bitvis eXclusive Ir-åtgärd på de binära värdena i två indataraster",
		booleanAndName: "Booleskt And",
		booleanAndSnip: "Utför en boolesk And-åtgärd på cellvärdena i två indataraster. Om båda indatavärdena är sanna (ej noll), är utdatavärdet 1. Om det ena eller båda indata är falska (noll), är utdatavärdet 0.",
		booleanAndDesc: "Funktionen utför en boolesk And-åtgärd på de pixelvärdena i två indataraster. Om båda indatavärdena är sanna (ej noll), är utdatavärdet 1. Om det ena eller båda indatavärdena är falska (noll), är utdatavärdet 0. ",
		booleanNotName: "Booleskt Not",
		booleanNotSnip: "Utför en boolesk Not-åtgärd (komplement) på cellvärdena i indatarastret. Om indatavärdena är sanna (ej noll), är utdatavärdet 0. Om indatavärdena är falska (noll), är utdatavärdet 1.",
		booleanNotDesc: "Funktionen utför en boolesk Not-åtgärd (komplement) på pixelvärdena i indatarastret. Om indatavärdena är sanna (ej noll), är utdatavärdet 0. Om indatavärdena är falska (noll), är utdatavärdet 1.",
		booleanOrName: "Booleskt Or",
		booleanOrSnip: "Utför en boolesk Or-åtgärd på cellvärdena i de två indatarastren. Om det ena eller båda indatavärdena är sanna (ej noll), är utdatavärdet 1. Om båda indatavärdena är falska (noll), är utdatavärdet 0.",
		booleanOrDesc: "Funktionen utför en boolesk Or-åtgärd på cellvärdena i två indataraster. Om det ena eller båda indatavärdena är sanna (ej noll), är utdatavärdet 1. Om båda indatavärdena är falska (noll), är utdatavärdet 0.",
		booleanXorName: "Booleskt Xor",
		booleanXorSnip: "Utför en boolesk eXclusive Or-åtgärd på cellvärdena i två indataraster. Om ett indatavärde är sant (ej noll) och det andra falskt (noll), är utdatavärdet 1. Om båda indatavärdena är sanna eller båda är falska, är utdatavärdet 0.",
		booleanXorDesc: "Funktionen utför en boolesk eXclusive Or-åtgärd på cellvärdena i två indataraster. Om ett indatavärde är sant (ej noll) och det andra värdet är falskt (noll), är utdatavärdet 1. Om båda indatavärdena är sanna eller båda är falska, är utdatavärdet 0.",
		bufferedRasterName: "Buffrad",
		bufferedRasterSnip: "Buffrar senast använda pixelblock.",
		bufferedRasterDesc: "Den buffrade funktionen används för att optimera prestanda hos komplexa funktionskedjor. Den lagrar utdata i minnet för den del av funktionskedjan som kommer före. <div><br/>Infoga den här funktionen i funktionsredigeraren där du vill lagra utdata.</div>",
		rasterCalculatorName: "Miniräknare",
		rasterCalculatorSnip: "Beräknar ett raster från ett rasterbaserat matematiskt uttryck.",
		rasterCalculatorDesc: "Kalkylatorfunktionen gör att du kan skapa och köra uttryck och ha med dem i funktionskedjor.",
		cellStatisticsName: "Cellstatistik",
		cellStatisticsSnip: "Beräknar statistik per cell från flera raster. De tillgängliga statistiska kategorierna är Majoritet, Maximum, Medel, Median, Minimum, Minoritet, Procentsats, Intervall, Standardavvikelse, Summa och Variation.",
		cellStatisticsDesc: "Den här funktionen beräknar statistik från flera raster, pixel för pixel. De tillgängliga statistiska kategorierna är Majoritet, Maximum, Medel, Median, Minimum, Minoritet, Intervall, Standardavvikelse, Summa och Variation.",
		classifyName: "Klassificera",
		classifySnip: "Tilldelar varje pixel till en klass. Lägg till underordnade data, t.ex. en segmenterad bild.",
		classifyDesc: "Den här rasterfunktionen klassificerar ett rasterdataset baserat på en definitionsfil för Esri-klassificerare (.ecd) och indata från rasterdataset. Den .ecd-fil som används i klassificeringsfunktionen innehåller all information för ett specifikt dataset och en specifik klassificerare, och genereras av utbildningsverktygen för klassificering, som Tågets stödvektormaskin och Tågets slumpmässiga träd.",
		clipName: "Klipp",
		clipSnip: "Anger ett rasters utbredning med koordinater eller ett annat dataset.",
		clipDesc: "Den här funktionen klipper ett raster med en rektangulär form i enlighet med den definierade utbredningen, eller klipper ett raster till formen av en polygongeoobjektsklass för indata. Formen som definierar klippet kan klippa rastrets utbredning eller klippa ut ett område inom rastret.",
		colorspaceConversionName: "Färgmodellkonvertering",
		colorspaceConversionSnip: "Konverterar ett raster från RGB till HSV och vice versa.",
		colorspaceConversionDesc: "Funktionen Färgmodellkonvertering konverterar en bilds färgmodell från färgområdet nyans, mättnad och värde (HSV) till rött, grönt och blått (RGB), eller vice versa.<div><br/>Den här funktionen kan användas i ett mosiakdataset.</div>",
		colormapToRGBName: "Färgschema till RGB",
		colormapToRGBSnip: "Konverterar ett raster med ett band med ett färgschema, till ett raster med tre band (rött, grönt och blått).",
		colormapToRGBDesc: "Den här funktionen konverterar raster med ett band med ett färgschema till ett raster med tre band (rött, grönt och blått).<div><br/>Den här funktionen är användbar när du behöver skapa ett raster med tre band från ett raster med ett band med tillhörande färgkarta. Värdena i färgkartan används för att skapa varje rött, grönt och blått band. Den här funktionen kan användas i ett mosiakdataset.</div>",
		colormapName: "Färgschema",
		colormapSnip: "Ändrar pixelvärdena så att rasterdata visas antingen som gråskala eller som en RGB-bild (rött, grönt, blått), baserat på ett färgschema eller en färgramp.",
		colormapDesc: "Funktionen Färgschema är en typ av renderare av rasterdata. Den omvandlar pixelvärdena så att de visar rasterdata antingen som en gråskala eller en RGB-färgbild baserad på ett färgschema eller specifika färger i en fil med färgschema. Ett färgschema kan användas till att representera analyserade data, till exempel en klassificerad bild, eller när en topografisk karta visas (eller en indexfärgskannad bild).<div><br/>Färgscheman innehåller en uppsättning värden som är kopplade till färger som används för att konsekvent visa samma färger för ett raster med ett band. Varje pixelvärde är kopplat till en färg, definierad som en uppsättning RGB-värden. Färgscheman kan stödja alla bitdjup utom flyttal. De stödjer också positiva och negativa värden och kan innehålla färgschemavärden som saknas. När ett dataset med ett färgschema som innehåller saknade värden visas, visas inte pixlarna med de saknade värdena.</div>",
		complexName: "Komplex",
		complexSnip: "Extraherar magnituden från komplexa tal.",
		complexDesc: "Den här funktionen beräknar magnitud från komplexa värden.<div><br/>Den här funktionen används vanligtvis med RADAR-bilder som har en komplex datatyp. Den kan användas i ett mosaikdataset.</div>",
		compositeBandName: "Sammansatta band",
		compositeBandSnip: "Kombinerar flera dataset till ett flerbandsraster.",
		compositeBandDesc: "Funktionen Sammansatta band gör att du kan kombinera raster för att forma en flerbandsbild.",
		conName: "Con",
		conSnip: "Utför en villkorlig If, Then, Else-åtgärd. När en Con-operator används måste det vanligtvis finnas två eller flera funktioner sammankopplade, där en funktion anger villkoren och den andra funktionen är Con-operatorn som använder villkoren och anger vad sanna och falska utdata ska vara.",
		conDesc: "Con-funktionen ställer in pixlarna för utdatarastret baserat på en if\\else-utvärdering av varje indatapixel. Den returnerar pixelvärden från Sant raster om den villkorliga utvärderingen är sann (1) och returnerar pixelvärdena från Falskt raster om den villkorliga utvärderingen är falsk (0). Detta kriterium specificeras av utdata från en logisk matematikfunktion som blir indatarastret.",
		constantName: "Konstant",
		constantSnip: "Skapar ett virtuellt raster med ett enda pixelvärde.",
		constantDesc: "Den här funktionen skapar ett virtuellt raster med ett enda pixelvärde som kan användas i mallar för rasterfunktion och för att behandla ett mosaikdataset.<div><br/>Det konstanta värdet används för varje pixelvärde i rastret.</div>",
		contourName: "Höjdkurva",
		contourSnip: "Skapar höjdkurvelinjer.",
		contourDesc: "Höjdkurvfunktionen genererar höjdkurvelinjer genom att förena punkter med samma höjd från ett rasterhöjddataset. Höjdkurvorna är isolinjer skapade som raster för visualisering. Följande nyckelfunktioner gör den här funktionen kraftfull: höjdkurvor genereras snabbt och dynamiskt på mycket stora dataset, som World Elevation; höjdkurvor kan jämnas ut för att få ett mer tilltalande kartografiskt utseende samtidigt som höjdkurvorna fortsätter att vara korrekta; dynamisk kontroll över höjdkurveintervallet; utdataalternativ omfattar höjdkurvelinjer, indexhöjdkurvor och ifyllda höjdkurvor.<div><br/>Skapandet av ett höjdkurvelager som en rasterprodukt är värdefullt för ett stort antal tillämpningar eftersom höjdkurvorna kan läggas över på en karta och ge information om terrängen utan att skymma underliggande data. De är användbara för tillämpningar som teknik, jordbruk och vattenförsörjning.</div>",
		contrastBrightnessName: "Kontrast och ljusstyrka",
		contrastBrightnessSnip: "Justerar kontrast och ljusstyrka för ett raster.",
		contrastBrightnessDesc: "Funktionen Kontrast och ljusstyrka förbättrar utseendet hos rasterdata genom att modifiera ljusstyrka och kontrast inom bilden. Ljusstyrka gör hela bilden ljusare—till exempel, mörka färger blir ljusare och ljusa färger vitare—medan kontrast justerar skillnaden mellan de mörkaste och de ljusaste färgerna.<div><br/>När den här funktionen används ändras pixelvärdena; därför bör funktionen användas när du vill förbättra utseendet hos data och inte om du ska använda data som en del av en analys som kräver obearbetade pixelvärden. Den här funktionen är användbar när data publiceras som en bildtjänst som kan användas i tillämpningar utan möjlighet att ändra kontrasten och ljusstyrkan hos bilden, eller för att säkerställa att den visas med dina önskade inställningar.</div>",
		convolutionName: "Convolution",
		convolutionSnip: "Använder ett filter för skärpa, oskärpa, gränsidentifiering, utjämning eller toning över ett raster.",
		convolutionDesc: "Convolutionsfunktionen utför filtrering på pixelvärdena i en bild, vilket kan användas för att göra en bild skarpare, suddigare, hitta gränser i bilden eller andra kärnbaserade förbättringar. Filter används för att förbättra rasterbildens kvalitet genom att ta bort oäkta data eller förbättra funktionerna i data. Dessa convolutionsfilter tillämpas på en rörlig, överlappande kärna (fönster eller grannskap), som 3 av 3. Convolutionsfilter fungerar genom att beräkna pixelvärdet baserat på grannarnas vikter.",
		corridorName: "Korridor",
		corridorSnip: "Beräknar summan av de ackumulerade kostnaderna för två raster med ackumulerade indata.",
		corridorDesc: "Korridorfunktionen beräknar summan av de ackumulerade kostnaderna för två kostnadsraster med ackumulerade indata. Även om vilka två raster som helst kan användas för indata, bör det vara oförändrade, ackumulerade kostnadsraster med utdata om resultatet ska bli meningsfullt. Ordningen på de två indatavärdena är irrelevant.",
		cosHName: "CosH",
		cosHSnip: "Beräknar hyperbolisk cosinus för celler i ett raster.",
		cosHDesc: "Funktionen beräknar hyperbolisk cosinus för pixlarna i ett raster.",
		cosName: "Cos",
		cosSnip: "Beräknar cosinus för en cell i ett raster.",
		cosDesc: "Funktionen beräknar cosinus för pixlarna i ett raster.",
		costAllocationName: "Kostnadsallokering",
		costAllocationSnip: "Beräknar för varje cell dess billigaste källa baserat på lägsta ackumulerade kostnad över en kostnadsyta.",
		costAllocationDesc: "Funktionen Kostnadsallokering beräknar för varje cell dess billigaste källa baserat på lägsta ackumulerade kostnad över en kostnadsyta.",
		costBackLinkName: "Bakåtlänk för kostnad",
		costBackLinkSnip: "Definierar grannen som är nästa cell på rutten för lägsta ackumulerade kostnad till den billigaste rutten.",
		costBackLinkDesc: "Funktionen Bakåtlänk för kostnad definierar grannen som är nästa cell på rutten för lägsta ackumulerade kostnad till den billigaste källan.<div><br/>Bakåtlänkrastret innehåller värden från noll till åtta, vilka definierar riktningen eller identifierar nästa granncell (följande cell) längs rutten för lägsta ackumulerade kostnad från en cell till den billigaste källan. Om rutten går igenom den högra grannen, tilldelas cellen värdet 1, 2 för den nedre högra diagonala cellen och fortsätter medurs. Värdet 0 är reserverat för ursprungsceller.</div>",
		costDistanceName: "Kostnad för avstånd",
		costDistanceSnip: "Beräknar den lägsta ackumulerade kostnaden för avståndet för varje cell från eller till den billigaste källan över en kostnadsyta.",
		costDistanceDesc: "Funktionen Kostnad för avstånd beräknar den lägsta ackumulerade kostnaden för avståndet för varje cell från eller till den billigaste källan över en kostnadsyta.",
		costPathName: "Ruttkostnad",
		costPathSnip: "Beräknar den billigaste rutten från en källa till en destination.",
		costPathDesc: "Den globala funktionen Ruttkostnad beräknar den billigaste rutten från en källa till en destination.<div><br/>Den här funktionen producerar ett utdataraster som registrerar den billigaste rutten eller rutter från valda platser till den närmaste ursprungscellen som definierats inom den ackumulerade kostnadsytan, med avseende på kostnad för avstånd.</div>",
		curvatureName: "Kurvatur",
		curvatureSnip: "Beräknar kurvaturen hos en rasteryta, med alternativen profil- och plankurvatur.",
		curvatureDesc: "Kurvaturfunktionen visar formen eller kurvaturen för lutningen. En del av ytan kan vara konkav eller konvex; detta ser du på kurvaturvärdet. Kurvaturen beräknas genom att kalkylera ytans andraderivata.<div><br/>Kurvaturfunktionens utdata kan användas för att beskriva de fysiska egenskaperna hos ett avrinningsområde som ett sätt att förstå erosions- och avrinningsprocesser. Kurvaturvärdet kan användas för att hitta mönster för både jorderosion och vattendistributionen på land. Profilkurvaturen påverkar accelerationen och retardationen av flödet och därmed även erosion och avlagring. Planformskurvaturen påverkar flödets konvergens och divergens.</div>",
		divideName: "Fördela",
		divideSnip: "Dividerar värdena för två raster cell för cell.",
		divideDesc: "Funktionen Fördela dividerar värdena för två raster pixel för pixel.",
		elevationVoidFillName: "Fyllning av tomrum för höjd",
		elevationVoidFillSnip: "Skapar pixlar där det finns hål i höjddata.",
		elevationVoidFillDesc: "Funktionen Fyllning av tomrum för höjd används för att skapa pixlar där det finns hål i upphöjningen.<div><br/>Tomrum uppstår när det inte finns några samlade punkter inom området som representeras av en pixel i det resulterande rastret. Tomrum orsakas ofta av vattenförekomst, urval av geoobjektklass eller uteslutning. Fyllning av tomrum används oftast när en markyta genereras.</div>",
		equalToName: "Lika med",
		equalToSnip: "Utför en relationell lika med-åtgärd på två utdata, cell för cell. Returnerar 1 för celler där det första rastret är lika med det andra rastret och 0 för celler där de inte är lika stora.",
		equalToDesc: "Funktionen utför en lika med-åtgärd på två raster, cell för cell. Den returnerar värdet 1 för pixlar där det första rastret är lika med det andra rastret och värdet 0 för pixlar där de inte är lika stora.",
		eucAllocationName: "Euklidisk fördelning",
		eucAllocationSnip: "Beräknar den närmaste källan för varje cell baserat på de euklidiska avståndet.",
		eucAllocationDesc: "Funktionen Euklidisk riktning beräknar, för varje cell, riktningen, i grader, till närmaste källa.",
		eucDirectionName: "Euklidisk riktning",
		eucDirectionSnip: "Beräknar, för varje cell, riktningen, i grader, till närmaste källa.",
		eucDirectionDesc: "Funktionen Euklidisk fördelning beräknar, för varje cell, riktningen, i grader, till närmaste källa. <div><br/>Riktningen beräknas från varje cellcenter till center för närmaste ursprungscell. Värdeintervallet är från 0 till 360 grader, med 0 reserverat för ursprungsceller. Östlig riktning (höger) är 90 och värdena ökar medurs (180 är söder, 270 är väster och 360 är norr).</div>",
		eucDistanceName: "Euklidiskt avstånd",
		eucDistanceSnip: "Beräknar för varje cell det euklidiska avståndet till närmaste källa.",
		eucDistanceDesc: "Funktionen Euklidiskt avstånd beräknar, för varje cell, det euklidiska avståndet till närmaste källa.",
		exp10Name: "Exp10",
		exp10Snip: "Beräknar bas 10-exponentialfunktionen för cellerna i ett raster.",
		exp10Desc: "Funktionen Exp 10 beräknar bas 10-exponentialfunktionen för pixlarna i ett raster.",
		exp2Name: "Exp2",
		exp2Snip: "Beräknar bas 2-exponentialfunktionen för cellerna i ett raster.",
		exp2Desc: "Den här funktionen beräknar bas 2-exponentialfunktionen för pixlarna i ett raster.",
		expName: "Går ut",
		expSnip: "Beräknar bas e-exponentialfunktionen för cellerna i ett raster.",
		expDesc: "Den här funktionen beräknar bas e-exponentialfunktionen för pixlarna i ett raster.",
		extractBandName: "Extrahera band",
		extractBandSnip: "Anger vilka band du ska arbeta med när du använder flerbandsdataset.",
		extractBandDesc: " Funktionen Extrahera band gör att du kan extrahera ett eller flera band från ett flerbandsrasterdataset, eller ändrar ordningen på banden i datasetet.<div><br/>Du kan använda funktionen Extrahera band före andra funktioner, till exempel Aritmetisk, för att kontrollera vilka band som används som indata i nästa funktion.</div>",
		fillName: "Fyllning",
		fillSnip: "Fyller sänkor i ett ytraster för att ta bort små bristfälligheter i data.",
		fillDesc: "Den globala funktionen Fyllning lokaliserar och fyller ut sänkor och toppar i ett raster för höjdyta för att ta bort små bristfälligheter i data. Funktionen fyller i en iterativ process tills alla sänkor och toppar har fyllts inom den specificerade Z-begränsningen.<div><br/>När en höjdyta skapas med ortokarteringsverktyg eller på annat sätt, finns det ofta små men signifikanta fel i form av sänkor och toppar i data. I fotogrammetri kallas sänkor och toppar ofta för hål och toppar. Eftersom ytdata ofta används vid modellering, till exempel hydrologisk modellering, är det viktigt att korrigera dessa fel med sänkor och toppar på ett sätt som stämmer överens med omgivande data.</div>",
		floatName: "Flytande",
		floatSnip: "Konverterar varje cellvärde i ett raster till en flyttalsrepresentation.",
		floatDesc: "Funktionen Flyttal konverterar varje pixelvärde i ett raster till en flyttalsrepresentation.",
		flowAccumulationName: "Flödesackumulering",
		flowAccumulationSnip: "Skapar ett raster av ackumulerat flöde till varje cell. En viktfaktor kan också tillämpas.",
		flowAccumulationDesc: "Den globala funktionen Flödesackumulering skapar ett raster av ackumulerat flöde till varje pixel, som bestäms genom att vikten av alla pixlar som flyter till varje nedåtlutande pixel ackumuleras. Om inget viktraster tillhandahålls tilldelas varje pixel vikten 1 och värdet för pixlar i utdatarastret är antalet pixlar som flyter till varje pixel.<div><br/>Utdatapixlar med hög flödesackumulering är områden med koncentrerat flöde och kan användas för att identifiera strömkanaler. Utdatapixlar med flödesackumuleringen noll är lokala topografiska toppar och kan användas för att identifiera bergskammar (ryggar).</div>",
		flowDirectionName: "Flödesriktning",
		flowDirectionSnip: "Skapar ett raster av flödesriktning från varje cell till den brantaste grannen i fallande lutning.",
		flowDirectionDesc: "En nyckel till att härleda hydrologiska egenskaper hos en yta är möjligheten att bestämma flödesriktningen från varje pixel i rastret. Rasterfunktionen Flödesriktning tar en yta som indata och skapar ett raster av flödesriktningen från varje pixel till grannen med brantast lutning. Funktionen Flödesriktning stödjer tre flödesmodellerande metoder: D8 (åtta riktningar), Multi-Flow Direction (MFD) och D-Infinity (DINF). ",
		flowDistanceName: "Flödesavstånd",
		flowDistanceSnip: "///Beräknar det minsta horisontella eller vertikala avståndet nedför sluttningar för varje cell till celler i en ström eller flod som de mynnar i.",
		flowDistanceDesc: "För varje pixel beräknar funktionen det minsta horisontella eller vertikala avståndet nedför sluttningar till pixlar på en flod eller ström mot vilken de flyter. Om det finns ytterligare raster för flödesriktning, begränsas riktningarna i fallande lutning till dem som definieras av flödesriktningsrastret för indata. Utdata är ett raster för flödesavstånd.",
		focalName: "Fokal statistik",
		focalSnip: "Beräknar fokal statistik för varje pixel i en bild utifrån definierat fokalt grannskap.",
		focalDesc: "Funktionen Fokal statistik beräknar fokal statistik för varje pixel i en bild utifrån definierat fokalt grannskap.",
		geometricName: "Geometriskt",
		geometricSnip: "Ökar positionsnoggrannheten för ett dataset genom att ta hänsyn till höjd.",
		geometricDesc: "Funktionen Geometriskt producerar en ortorektifierad bild utifrån sensordefinition och en terrängmodell. Den ökar positionsnoggrannheten för ett dataset genom att ta hänsyn till höjd.",
		grayscaleName: "Gråskala",
		grayscaleSnip: "Konverterar en flerbandbild till en bild i gråskala med ett band.",
		grayscaleDesc: "Den här funktionen konverterar en flerbandbild till en bild i gråskala med ett band.<div><br/>Den här funktionen tillämpar specificerade vikter på varje indataband och normaliserar utdatabilden. Vikterna tillämpas ofta för att några band har olika betydelse beroende på applikation. Till exempel innehåller det blå bandet ofta mer brus än andra band.</div>",
		greaterThanEqualName: "Större än eller lika med",
		greaterThanEqualSnip: "Utför en relationell större än/lika med-åtgärd på två indata, cell för cell. Returnerar 1 för celler där det första rastret är större än eller lika med det andra rastret och 0 om det inte är det.",
		greaterThanEqualDesc: "Funktionen utför en relationell större än/lika med-åtgärd på två indata, pixel för pixel. Den returnerar värdet 1 för pixlar där det första rastret är större än eller lika med det andra rastret och värdet 0 för pixlar där det första rastret inte är större än eller lika med det andra rastret.",
		greaterThanName: "Större än",
		greaterThanSnip: "Utför en relationell större än-åtgärd på två indata, cell för cell. Returnerar 1 för celler där det första rastret är större än det andra rastret och 0 för celler där det inte är det.",
		greaterThanDesc: "Funktionen utför en relationell större än-åtgärd på två indata, pixel för pixel. Returnerar värdet 1 för pixlar där det första rastret är större än det andra rastret och värdet 0 för pixlar där det första rastret inte är större än det andra rastret.",
		heatIndexName: "Värmeindex",
		heatIndexSnip: "Kombinerar omgivningens lufttemperatur och relativ luftfuktighet samt returnerar den upplevda temperaturen.",
		heatIndexDesc: "Den här funktionen beräknar upplevd temperatur utifrån omgivningens temperatur och relativa fuktighet. Den upplevda temperaturen beskrivs ofta som hur varmt det känns för den mänskliga kroppen.<div><br/>Detta index kan vara användbart för att beräkna risker med koppling till medicinska problem som muskelkramper, uttorkning och solsting, eller mer allvarligt värmeslag under varma och fuktiga dagar. När den relativa fuktigheten är hög blir det allt svårare för kroppens svett att avdunsta, vilket gör att individen saknar ett effektivt naturligt sätt att kylas ned. Kartor med värmeråd eller värmevarningar är ofta resultatet av att värmeindex omklassificeras till klasser, där sannolikheten för att det ska bli en varning snarare än ett råd ökar ju högre indexvärdet är.</div>",
		hillshadeName: "Terrängskuggning",
		hillshadeSnip: "Skapar en 3D-representation av ytan med hänsyn tagen till solens relativa position för att skugga bilden.",
		hillshadeDesc: "Funktionen Terrängskuggning skapar en 3D-representation av terrrängytan med hänsyn tagen till solens relativa position för att skugga bilden. <div><br/>Terrängskuggning är en teknik för att visualisera terräng som bestäms av en ljuskälla samt lutningen och aspekten för höjdytan. Det är en kvalitativ metod för att visualisera topografi och den ger inga absoluta höjdvärden. </div>",
		intName: "Int",
		intSnip: "Konverterar varje cellvärde i ett raster till ett heltal via trunkering.",
		intDesc: "Funktionen Int konverterar varje pixelvärde i ett raster till ett heltal via trunkering.",
		interpolateIrregularDataName: "Interpolera oregelbundna data",
		interpolateIrregularDataSnip: "Interpolerar från punktmoln eller oregelbundna rutnät.",
		interpolateIrregularDataDesc: "Vissa netCDF- eller HDF-dataset lagrar sin geolokalisering som oregelbundet utspridda pixlar eller punktdata. När dessa dataset läggs till i ett mosaikdataset, tar den interpolerade oregelbundna datafunktionen det oregelbundna rutnätet av data och omsamplar det så att alla pixlar har samma storlek och är kvadratiska.<div><br/>När variabler från netCDF eller HDF läggs till i ett mosaikdataset, verifierar det automatiskt om data är jämnt utspridda. Om de inte är det kan den interpolerade oregelbundna datafunktionen användas för att konvertera oregelbundna data till ett regelbundet rutnätsraster. Du kan ändra interpoleringsmetoden och cellstorleken som används i den interpolerade oregelbundna datarasterfunktionen. För regelbundet utspridda rasterdata används ingen interpolering och data läses som de är.</div>",
		isNullName: "Är noll",
		isNullSnip: "Bestämmer vilka värden från indataraster som är NoData, cell för cell. Returnerar värdet 1 om indatavärdena är NoData och 0 för celler som inte är det.",
		isNullDesc: "Funktionen Är null bestämmer vilka värden från indatarastret som är NoData, pixel för pixel. Den returnerar värdet 1 om indatavärdet är NoData och värdet 0 för pixlar som inte är NoData.",
		kernelDensityName: "Kärndensitet",
		kernelDensitySnip: "Beräknar ett storlek-per-enhet-område från punkt- eller polylinjegeoobjekt med en kärnfunktion för att passa in en jämnt avsmalnande yta till varje punkt eller polylinje.",
		kernelDensityDesc: "Den här funktionen beräknar ett storlek-per-enhet-område från punkt- eller polylinjegeoobjekt med en kärnfunktion för att passa in en jämnt avsmalnande yta till varje punkt eller polylinje.",
		keyMetadataName: "Viktiga metadata",
		keyMetadataSnip: "Åsidosätter eller infogar viktiga metadata för ett raster i en funktionskedja.",
		keyMetadataDesc: "Den här funktionen gör att du kan infoga eller åsidosätta viktiga metadata för ett raster.<div><br/>Informationen i viktiga metadata används för att hjälpa applikationen med bearbetning och rendering, inklusive att tillhandahålla användbar information som sensornamn, bandnamn eller molntäcke kopplat till bilderna.</div>",
		shortestPathName: "Billigaste rutt",
		shortestPathSnip: "Utför en kostnadsavståndsanalys med käll- och målindata som sedan används för att fastställa den billigaste rutten från en källa till ett mål.",
		shortestPathDesc: "Funktionen Billigaste rutten beräknar den billigaste rutten från en källa till en destination. Den lägsta ackumulerade kostnaden beräknas för avståndet för varje pixel över en kostnadsyta till närmaste källa. Detta producerar ett utdataraster som registrerar den billigaste rutten, eller rutterna, från valda platser till den närmaste ursprungscellen som definierats inom den ackumulerade kostnadsytan, med avseende på kostnad för avstånd.<div><br/>Den billigaste rutten tilldelas alltid ett värde när den påträffas under skanningsprocessen. Den avslutande pixeln på källrastret för en kostnadsrutt får värdet 1. Den första rutten får värdet 3, nästa 4 o.s.v. När flera rutter sammanfogas och följer samma rutt tillbaka till en källa, tilldelas segmentet där de två rutterna reser tillsammans värdet 2. Den sammanfogade delen av rutten kan inte tilldelas värdet för en av rutterna, eftersom den sammanfogade delen tillhör båda rutterna.</div>",
		lessThanEqualName: "Mindre än eller lika med",
		lessThanEqualSnip: "Utför en relationell mindre än/lika med-åtgärd på två indatavärden, cell för cell. Returnerar 1 för celler där det första rastret är mindre än eller lika med det andra rastret och 0 om det inte är det.",
		lessThanEqualDesc: "Funktionen utför en relationell mindre än/lika med-åtgärd på två indata, pixel för pixel. Den returnerar värdet 1 för pixlar där det första rastret är mindre än eller lika med det andra rastret och värdet 0 för pixlar där det inte är mindre än eller lika med det andra rastret.",
		lessThanName: "Mindre än",
		lessThanSnip: "Utför en relationell mindre än-åtgärd på två indatavärden, cell för cell. Returnerar 1 för celler där det första rastret är mindre än det andra rastret och 0 om det inte är det.",
		lessThanDesc: "Funktionen utför en relationell mindre än-åtgärd på två indata, pixel för pixel. Den returnerar värdet 1 för pixlar där det första rastret är mindre än det andra rastret och värdet 0 om det inte är mindre än det andra rastret.",
		lnName: "Ln",
		lnSnip: "Beräknar den naturliga logaritmen (bas e) för cellerna i ett raster.",
		lnDesc: "Funktionen Ln beräknar den naturliga logaritmen (bas e) för varje pixel i ett raster.",
		log10Name: "Log10",
		log10Snip: "Beräknar bas 10-logaritmen för cellerna i ett raster.",
		log10Desc: "Funktionen Log10 beräknar bas 10-logaritmen för varje pixel i ett raster.",
		log2Name: "Log2",
		log2Snip: "Beräknar bas 2-logaritmen för cellerna i ett raster.",
		log2Desc: "Funktionen Log2 beräknar bas 2-logaritmen för varje pixel i ett raster.",
		lookupName: "Sök",
		lookupSnip: "Skapar ett nytt raster genom att söka värden som finns i ett annat fält i indatarastrets tabell.",
		lookupDesc: "Funktionen skapar ett nytt raster genom att söka värden som finns i ett annat fält i indatarastrets tabell.",
		mlClassifyName: "ML-klassificera",
		mlClassifySnip: "Klassificerar bilder per pixel. Blandade pixlar tilldelas geoobjektet med det högsta procentvärdet i den pixeln.",
		mlClassifyDesc: "Funktionen ML-klassificera gör att du kan utföra en övervakad klassificering genom att använda algoritmen klassificering med maximal sannolikhet på ett rasterdataset eller mosaikdataset. Den här funktionen kräver en klassificeringssignaturfil.",
		maskName: "Maska",
		maskSnip: "Anger värden du inte vill visa.",
		maskDesc: "Den här rasterfunktionen anger värden som du inte vill visa i ditt raster. När du använder funktionen Maskning anger du en eller flera NoData-värden eller ett intervall med giltiga pixelvärden. ",
		minusName: "Minus",
		minusSnip: "Subtraherar värdet för det andra indatarastret från värdet för det första indatarastret på cell-för-cell-bas.",
		minusDesc: "Minusfunktionen subtraherar värdet för det andra indatarastret från värdet för det första indatarastret pixel för pixel.",
		modName: "Mod",
		modSnip: "Hittar resten (modulo) av det första rastret när det divideras med det andra rastret på cell-för-cell-bas.",
		modDesc: "Funktionen Mod hittar resten (modulo) av det första rastret när det divideras med det andra rastret pixel för pixel. Ordningen på indata är viktig och påverkar utdataresultatet.",
		mosaicRastersName: "Mosaikraster",
		mosaicRastersSnip: "Sammanfogar en uppsättning rasterdataset för att skapa ett dataset.",
		mosaicRastersDesc: "Funktionen Mosaikraster skapar en mosaikbild av flera bilder. När det finns en överlappning mellan bilderna finns det flera metoder som du kan välja mellan för att avgöra vilka bilder som visas.",
		ndviColorizedName: "NDVI-färglagd",
		ndviColorizedSnip: "Skapar ett flerbandsdataset som visar vegetationens frodighet baserat på skillnaden mellan de röda och nära infraröda banden.",
		ndviColorizedDesc: "Funktionen NDVI-färglagd tillämpar NDVI-funktionen på indatabilden och använder sedan en färgkarta eller en färgramp för att visa resultatet.",
		ndviName: "NDVI",
		ndviSnip: "Beräknar Normalized Difference Vegetation Index (NDVI).",
		ndviDesc: "NDVI-funktionen skapar ett dataset med ett band som visar vegetationens frodighet baserat på skillnaden mellan de röda och infraröttnära banden.<div><br/>NDVI är ett standardiserat index som låter dig generera en bild som visar grönhet, som också kallas relativ biomassa. Det här indexet drar nytta av kontrasten mellan egenskaperna hos två band i ett multispektralt rasterdataset: klorofyllpigmentabsorptionen i det röda bandet och den höga reflektiviteten hos växtmaterial i det nära infraröda (NIR) bandet. Extremt låga eller negativa NDVI-värden representerar områden utan växtlighet, t.ex. moln, vatten eller snö. Mycket låga värden representerar områden med liten eller ingen växtlighet, som betong, klippor eller naken jord. Medelhöga värden representerar områden med buskar och gräsmarker. Höga värden representerar skogsområden och grönskande växtlighet.</div>",
		negateName: "Negera",
		negateSnip: "Ändrar tecknet (multiplicerar med -1) för cellvärdena i indatarastret på cell-för-cell-bas.",
		negateDesc: "Funktionen Negera ändrar tecknet (multiplicerar med -1) för pixelvärdena i indatarastret på en pixel. ",
		nibbleName: "Nagga",
		nibbleSnip: "Ersätter celler i ett raster enligt en mask med värdena för de närmaste grannarna.",
		nibbleDesc: "Den globala funktionen Nagga möjliggör att markerade områden i ett raster kan tilldelas samma värde som deras närmaste granne. Detta är praktiskt för att redigera områden i ett raster där data kan vara felaktiga.",
		notEqualName: "Inte lika med",
		notEqualSnip: "Utför en relationell inte lika med-åtgärd på två indatavärden cell för cell. Returnerar 1 för celler där det första rastret inte är lika med det andra rastret och 0 om de är lika.",
		notEqualDesc: "Funktionen utför en relationell inte lika med-åtgärd på två indatavärden pixel för pixel. Den returnerar ett värde på 1 för pixlar där det första rastret inte är lika med det andra rastret och ett värde på 0 för pixlar där det är lika med det andra rastret.",
		pansharpeningName: "Panoreringsskärpning",
		pansharpeningSnip: "Förbättrar den geografiska upplösningen i en bild med flera band på konstgjord väg genom att smälta samman den med en pankromatisk bild med högre upplösning.",
		pansharpeningDesc: "Funktionen Panoreringsskärpning använder en pankromatisk bild med högre upplösning eller ett rasterband för att smälta samman den med ett lågupplöst rasterdataset med flera band i syfte att öka flerbandsbildens geografiska upplösning.<div><br/>Syftet med panoreringsskärpning är att skapa en visuell bild med högre kvalitet. Eftersom teknikerna ändrar flerbandsbildernas radiometri och spektrala egenskaper måste panoreringsskärpta bilder användas med försiktighet vid fjärranalys.</div>",
		pathAllocationName: "Ruttavståndsallokering",
		pathAllocationSnip: "Beräknar källan med lägst kostnad för varje cell baserat på den lägsta ackumulerade kostnaden över en kostnadsyta, samtidigt som hänsyn tas till ytavståndet samt horisontella och vertikala kostnadsfaktorer.",
		pathAllocationDesc: "Ruttavståndsallokeringen beräknar den närmaste källan för varje cell baserat på den lägsta ackumulerade kostnaden över en kostnadsyta, samtidigt som hänsyn tas till ytavståndet samt horisontella och vertikala kostnadsfaktorer.",
		pathBackLinkName: "Bakåtlänk för ruttavstånd",
		pathBackLinkSnip: "Definierar grannen som är nästa cell på rutten för lägsta ackumulerad kostnad till den billigaste källan, samtidigt som hänsyn tas till ytavståndet samt horisontella och vertikala kostnadsfaktorer.",
		pathBackLinkDesc: "Bakåtlänk för ruttavstånd identifierar inriktningen för grannen som är nästa cell på rutten för lägsta ackumulerad kostnad till den närmaste källan, samtidigt som hänsyn tas till ytavståndet samt horisontella och vertikala kostnadsfaktorer.",
		pathDistanceName: "Ruttavstånd",
		pathDistanceSnip: "Beräknar för varje cell lägsta ackumulerad kostnad för avståndet från eller till den billigaste källan, samtidigt som hänsyn tas till ytavståndet samt horisontella och vertikala kostnadsfaktorer.",
		pathDistanceDesc: "Funktionen Ruttavstånd beräknar för varje cell lägsta ackumulerad kostnad för avståndet till den närmaste källan, samtidigt som hänsyn tas till ytavståndet samt horisontella och vertikala kostnadsfaktorer.",
		plusName: "Plus",
		plusSnip: "Adderar (summerar) värdena för två raster cell för cell.",
		plusDesc: "Funktionen Plus adderar (summerar) värdena för två raster pixel för pixel.",
		powerName: "Potens",
		powerSnip: "Upphöjer cellvärdena i ett raster till värden från ett annat raster.",
		powerDesc: "Funktionen Potens upphöjer pixelvärdena i ett raster till värden från ett annat raster.",
		radarCalibrationName: "Radarkalibrering",
		radarCalibrationSnip: "Konverterar RADARSAT-2-bakåtstrålning.",
		radarCalibrationDesc: "Den här funktionen kan användas till att kalibrera RADARSAT-2-bilder i ett mosaikdataset eller som en rasterprodukt. Kalibreringen utförs på radarbilder så att pixelvärdena är en verklig representation av radarbakåtstrålningen.",
		rasterInfoName: "RasterInfo",
		rasterInfoSnip: "Ändrar egenskaper för rastret, t.ex. bitdjup, NoData-värde, cellstorlek o.s.v.",
		rasterInfoDesc: "RasterInfo öppnar en dialogruta med egenskaper för rasterdataset, t.ex. antalet kolumner och rader, antalet band, pixeltypen, utbredningen och den geografiska referensen. Du kan redigera dessa egenskaper genom att välja ett rasterdataset som ska användas som mall. ",
		rasterizeAttributesName: "Rastrera attribut",
		rasterizeAttributesSnip: "Berikar ett raster genom ytterligare band som härrör från värden för angivna attribut från en extern tabell eller en geoobjekttjänst.",
		rasterizeAttributesDesc: "Funktionen Rastrera attribut berikar ett raster genom att lägga till band som härrör från värden för angivna attribut från en extern tabell eller en geoobjekttjänst. Om du vill kan du ange ett zonraster och det tillhörande zon-ID-attributet för att aktivera regionbaserad sökning.",
		rasterizeFeatureClassName: "Rastrera geoobjekt",
		rasterizeFeatureClassSnip: "Konverterar geoobjekt till raster.",
		rasterizeFeatureClassDesc: "Den här funktionen konverterar polygon-, polylinje- och punktgeoobjektklassdata till ett rasterlager.<div><br/>Geoobjekt tilldelas pixelvärden baserat på geoobjektens OBJECTID (standard). Pixelvärdena kan också baseras på ett användardefinierat värdefält i indatageoobjektets attributtabell.</div>",
		recastName: "Gör om",
		recastSnip: "Ändrar parametrarna hos en funktionskedja i ett mosaikdataset eller en bildtjänst. Det används ofta med LAS-dataset så att du inte behöver skapa ett separat mosaikdataset för olika representationer av terräng.",
		recastDesc: "Funktionen Gör om används för att dynamiskt modifiera den funktionsparameter som användas i ett mosaikdataset eller en bildtjänst utan att fysiskt bevara ändringarna.",
		regionGroupName: "Regiongrupp",
		regionGroupSnip: "För varje cell i utdata registreras identiteten för den anslutna region som cellen tillhör. Ett unikt nummer tilldelas varje region.",
		regionGroupDesc: "Den globala funktionen Regiongrupp registrerar för varje cell i utdata identiteten för den anslutna region som den cellen tillhör. Ett unikt nummer tilldelas varje region.<div><br/>Den första regionen som skannas erhåller värdet ett, den andra två och så vidare tills alla regioner har tilldelats ett värde. Skanningen sker från vänster till höger, uppifrån och nedåt. De värden som tilldelas till utdatazonerna baseras på när de påträffas i skanningsprocessen.</div>",
		regionGrowName: "Få regioner att växa",
		regionGrowSnip: "Utveckla regioner från seedpunkter.",
		regionGrowDesc: "Funktionen Få regioner att växa bildar grupper av närliggande pixlar efter angiven radie från seedpunkten. Gruppen av pixlar eller objekt tilldelas ett angivet fyllningsvärde.",
		remapName: "Ommappning",
		remapSnip: "Ändrar pixelvärden genom att tilldela nya värden till intervall av pixelvärden eller använda en extern tabell.",
		remapDesc: "Med funktionen Ommappning kan du ändra eller klassificera om pixelvärdena för rasterdata. Detta kan göras antingen genom att ange ett intervall med pixelvärden som ska mappas till ett utdatapixelvärde eller genom att använda en tabell till att mappa pixelvärdena till ett utdatapixelvärde.",
		reprojectName: "Projicera om",
		reprojectSnip: "Ändrar projektionen för ett rasterdataset, mosaikdataset eller rasterobjekt i ett mosaikdataset. Den kan också omsampla data till en ny cellstorlek och definiera ett ursprung.",
		reprojectDesc: "Funktionen Projicera om ändrar projektionen för ett rasterdataset, mosaikdataset eller rasterobjekt i ett mosaikdataset. Den kan också omsampla data till en ny cellstorlek och definiera ett ursprung.<div><br/>Funktionen Projicera om kan användas när en cache skapas från ett raster eller ett mosaikdataset som inte finns i den nödvändiga projektionen. När t.ex. en cachad bildtjänst skapas som kan integreras med andra cachade tjänster via applikationer är det viktigt att de alla är i samma projektion. Detta är ofta en Web Mercator-projektion. Eftersom mosaikdataset inte kan projiceras om kan du göra en av två saker—antingen skapa ett refererat mosaikdataset från ditt mosaikdataset i den projektion som behövs eller lägga till funktionen Projicera om i mosaikdatasetets funktionskedja. Ett annat exempel använder den här funktionen på rasterobjektet i ett mosaikdataset. När du använder funktionen Cachelagrat raster kan du infoga funktionen Projicera om så att cachen skapas i den nya projektionen. Rasterobjekt i ett mosaikdataset kan cachelagras när bearbetningen är intensiv och du försöker publicera en bildtjänst som är snabb utan att cachelagra hela bildtjänsten.</div>",
		resampleName: "Omsampla",
		resampleSnip: "Ändrar cellstorleken för ett raster.",
		resampleDesc: "Funktionen Omsampla ändrar cellstorleken, omsamplingstypen eller både och.<div><br/>Funktionen Omsampla ska enbart användas med specifika beräkningskrav, t.ex. när du beräknar vinden eller aktuell magnitud-riktning som kräver omsampling från källupplösningen.</div>",
		roundDownName: "Avrunda nedåt",
		roundDownSnip: "Returnerar nästa lägre heltalsvärde, endast representerat som flyttal, för varje cell i ett raster.",
		roundDownDesc: "Funktionen Avrunda nedåt returnerar nästa lägre heltalsvärde som ett flyttalsvärde för varje pixel i ett raster.",
		roundUpName: "Avrunda uppåt",
		roundUpSnip: "Returnerar nästa högre heltalsvärde, endast representerat som flyttal, för varje cell i ett raster.",
		roundUpDesc: "Funktionen Avrunda uppåt returnerar nästa högre heltalsvärde som ett flyttalsvärde för varje pixel i ett raster.",
		segmentMeanShiftName: "Flyttning av segmentmedelvärde",
		segmentMeanShiftSnip: "Grupperar angränsande pixlar med liknande spektrala egenskaper tillsammans till segment.",
		segmentMeanShiftDesc: "Den här funktionen identifierar objekt, geoobjekt eller segment i dina bilder genom att bilda grupper av intilliggande pixlar med liknande spektrala och geografiska egenskaper. Du kan kontrollera mängden geografisk och spektral utjämning för att få fram intressanta geoobjekt.",
		s1RadiometricCalibrationName: "Radiometrisk kalibrering för Sentinel-1",
		s1RadiometricCalibrationSnip: "Utför olika typer av radiometrisk kalibrering av Sentinel-1-data.",
		s1RadiometricCalibrationDesc: "Denna rasterfunktion utför tre olika kalibreringar för Sentinel-1-dataset, inklusive beta-noll och gamma, och ger det kalibrerade datasetet som utdata. Målet med SAR-kalibrering är att tillhandahålla bilder i vilka pixelvärdena direkt kan relateras till scenens radarbakåtstrålning. Okalibrerade SAR-bilder räcker till för kvalitativ användning, men för kvantitativ användning av SAR-data är kalibrerade SAR-bilder nödvändiga.<div><br/>Typisk SAR-databearbetning, som producerar nivå 1-bilder, saknar radiometriska korrigeringar och betydande radiometrisk snedvridning finns kvar. Det är därför nödvändigt att tillämpa radiometrisk korrigering på SAR-bilder så att bildernas pixelvärden verkligen representerar den reflekterande ytans radarbakåtstrålning. Radiometrisk korrigering är också nödvändig för att kunna jämföra SAR-bilder som inhämtats med olika sensorer, eller som inhämtats av samma sensor vid olika tidpunkter eller i olika lägen eller som bearbetats av olika processorer.</div>",
		s1ThermalNoiseRemovalName: "Borttagning av termiskt brus från Sentinel-1",
		s1ThermalNoiseRemovalSnip: "Tar bort termiskt brus från Sentinel-1-data.",
		s1ThermalNoiseRemovalDesc: "Termisk bruskorrigering kan tillämpas på Sentinel-1 Nivå-1 SLC-produkter (Single Look Complex) liksom Nivå-1 GRD-produkter (Ground Range Detection) som inte redan har korrigerats. Operatören kan också ta bort den här korrigeringen baserat på produkttexterna för att återintroducera den brussignal som togs bort för att ta fram den ursprungliga produkten. Produkttexter uppdateras därmed för att möjliggöra återtillämpning av korrigeringen. ",
		setNullName: "Sätt noll",
		setNullSnip: "Sätt noll anger identifierade cellplatser till NoData baserat på angivna kriterier. Den returnerar NoData om en villkorlig utvärdering är sann och returnerar det värde som angetts i ett annat raster om den är falsk.",
		setNullDesc: "Funktionen Sätt noll anger de identifierade pixlarna till NoData, baserat på de specifika kriterierna. Den returnerar NoData om en villkorlig utvärdering är sann (1) och returnerar det värde som angetts i Falskt raster om en villkorlig utvärdering är falsk (0). Detta kriterium specificeras av utdata från en logisk matematikfunktion som blir indatarastret.",
		shadedReliefName: "Skuggad relief",
		shadedReliefSnip: "Skapar en flerbands, färgkodad 3D-representation av ytan med hänsyn tagen till solens relativa position för att skugga bilden.",
		shadedReliefDesc: "Funktionen Skuggad relief skapar en 3D-representation i färg av terrängen. Den skapas genom att sammanfoga bilderna från metoderna höjdkodning och terrängskuggning. Funktionen anger solens position med höjd- och azimutegenskaper.<div><br/></div>",
		sinHName: "SinH",
		sinHSnip: "Beräknar hyperbolisk sinus för celler i ett raster.",
		sinHDesc: "Funktionen beräknar hyperbolisk sinus för pixlarna i ett raster.",
		sinName: "Sin",
		sinSnip: "Beräknar sinus för celler i ett raster.",
		sinDesc: "Funktionen beräknar sinus för pixlarna i ett raster.",
		slopeName: "Lutning",
		slopeSnip: "Beräknar ändringsfrekvensen från ett pixelvärde till dess grannar.",
		slopeDesc: "Denna rasterfunktion beräknar lutning, som är takten på höjdförändringen för varje cell i den digitala höjdmodellen (DEM). Det är den första härledningen från en DEM.<div><br/>Denna funktion använder en accelererad atan()-funktion. Den är sex gånger snabbare och approximationsfelet är alltid mindre än 0,3 grader.</div>",
		speckleName: "Fläck",
		speckleSnip: "Tillhandahåller filter för att reducera brus från dataset tagna med syntetisk aperturradar.",
		speckleDesc: "Fläck är högfrekvensbrus på radardata. Bilder som är genererade med syntetiska aperturradarsystem (SAR) är mycket utsatta för fläckeffekter på grund av bearbetning av spridda signaler och interferens från elektromagnetiska vågor som spridits från ytor eller föremål. Denna Fläckfunktion filtrerar fläckade radardataset och jämnar ut brus samtidigt som kanter eller skarpa geoobjekt bibehålls i bilden.",
		spectralConversionName: "Spektral konvertering",
		spectralConversionSnip: "Tillämpar en matris på en flerbandsbild.",
		spectralConversionDesc: "Funktionen spektral konvertering tillämpar en matris på en flerbandsbild, vilket påverkar färgvärden i utdata.<div><br/>Vissa sensorer samlar inte in blå band på grund av ett lågt signal-till-brus-förhållande. Detta kan t.ex. användas till att konvertera en infraröd bild i falska färger till en bild med pseudonaturliga färger.</div>",
		squareRootName: "Kvadratrot",
		squareRootSnip: "Beräknar kvadratroten av cellvärdena i ett raster.",
		squareRootDesc: "Funktionen Kvadratrot beräknar kvadratroten av pixelvärdena i ett raster.",
		squareName: "Kvadrat",
		squareSnip: "Beräknar kvadraten av cellvärdena i ett raster.",
		squareDesc: "Kvadrat beräknar kvadraten på pixelvärdena i ett raster.",
		statisticsHistogramName: "Statistik och histogram",
		statisticsHistogramSnip: "Definiera eller koppla statistik och histogram.",
		statisticsHistogramDesc: "Funktionen Statistik och histogram används för att definiera statistik och histogram för ett raster. Du kan infoga denna funktion i slutet av funktionskedjan för att beskriva statistik och histogram för en mall för rasterfunktion (RFT). Detta kan vara nödvändigt för att styra standardvisningen av bearbetningsresultatet, särskilt när en funktionskedja definieras som innehåller många funktioner.<div><br/>Du kan definiera statistik genom att skriva värdena eller importera dem från ett rasterdataset eller en XML-fil. Histogram kan endast definieras genom att importera en fil.</div>",
		statisticsName: "Statistik",
		statisticsSnip: "Beräknar fokal statistik för varje pixel i en bild utifrån definierat fokalt grannskap.",
		statisticsDesc: "Funktionen Statistik beräknar fokal statistik för varje pixel i en bild utifrån ett definierat fokalt grannskap.<div><br/>Statistikfunktionen kan användas till att fylla i saknade linjer i en bild. Saknade linjer orsakas ofta av problem i sensorn då data inte samlas in. Detta har inträffat med sensorer som Landsat 7:s Enhanced Thematic Mapper Plus (ETM+). Dessa saknade data skapar problem för analysen och även när man tittar på bilderna. Det finns inte mycket som kan göras när bilderna används för analys, men om det finns en överlappande bild kan den användas istället för det innehåll som saknas. Detta kan också göras om bilderna används för visualisering. Det finns emellertid inte alltid en extra bild för att fylla i saknat innehåll, så det måste härledas från befintliga data.</div>",
		streamLinkName: "Strömningslänk",
		streamLinkSnip: "Tilldelar unika värden till sektioner av ett linjärt rasternät mellan korsningar.",
		streamLinkDesc: "Den globala funktionen Strömningslänk tilldelar unika värden till sektioner av ett linjärt rasternät mellan korsningar.<div><br/>Länkar är de sektioner av ett vattendrag som går mellan två flodmöten i rad, ett flodmöte och utloppet eller ett flodmöte och vattendelaren. Inom hydrologin kallas dessa segment av vattendrag för sträcka. Ett flodmöte är relaterat till hällpunkt och hjälper till att avgränsa ett avrinningsområde eller gränsen för ett delavrinngsområde.</div>",
		stretchName: "Sträck",
		stretchSnip: "Förstärker en bild genom att justera intervallet för visade värden. Det ändrar inte de underliggande pixelvärdena. Om en pixel har ett värde utanför det angivna intervallet visas den som antingen det minimala eller maximala värdet.",
		stretchDesc: "Funktionen Sträck förbättrar en bild genom att ändra dess egenskaper som exempelvis ljusstyrka, kontrast och gamma genom att använda flera sträckningstyper. Denna funktion använder statistiken från rastren i mosaikdatasetet. Om du använder denna funktion måste du därför se till att statistiken har beräknats.<div><br/>Sträcktypen definierar en histogramsträckning som kommer att tillämpas på rastren för att förbättra deras utseende. Sträckning förbättrar utseendet för data genom att sprida pixelvärdena längs ett histogram från min- och maxvärdena definierat av deras bitdjup. </div>",
		swathName: "Stråk",
		swathSnip: "Interpolerar från oregelbundna rutnät eller stråkdata.",
		swathDesc: "Vissa netCDF- eller HDF-dataset lagrar sin geolokalisering som vektorer med oregelbundna avstånd. När dessa dataset läggs till i ett mosaikdataset tar stråkfunktionen oregelbundna rutnätdata och omsamplar dem så att varje pixel får en enhetlig storlek och blir fyrkantig.<div><br/>När variabler från netCDF eller HDF läggs till i ett mosaikdataset, verifierar det automatiskt om data är jämnt utspridda. Om inte tillämpas stråkfunktionen automatiskt så att det oregelbundna rastret konverteras till punkter och sedan till ett regelbundet rutnätsraster. Du kan ändra den interpoleringsmetod och den cellstorlek som används i stråkrasterfunktionen. För rasterdata med regelbundna avstånd tillämpas ingen interpolering, data läses i befintligt skick.</div>",
		tanHName: "TanH",
		tanHSnip: "Beräknar hyperbolisk tangent för celler i ett raster.",
		tanHDesc: "Funktionen beräknar hyperbolisk tangent för pixlarna i ett raster.",
		tanName: "Tan",
		tanSnip: "Beräknar tangent för celler i ett raster.",
		tanDesc: "Funktionen beräknar tangent för pixlarna i ett raster. ",
		tasseledCapName: "Tasseled Cap (Kauth-Thomas)",
		tasseledCapSnip: "Beräknar nivåer för vegetation, fuktighet och ljusstyrka. Tekniken förlitar sig på koefficienter som måste beräknas specifikt för en sensor.",
		tasseledCapDesc: "Tasseled Cap-transformationen (Kauth-Thomas) är konstruerad för att analysera och mappa växtlighetsfenomen och stadsbyggnadsförändringar som upptäckts av olika satellitsensorsystem. Den kallas Tasseled Cap-transformation på grund av formen på den grafiska distributionen av data. Transformationen gav en förklaring till de mönster som fanns i Landsat MSS-data för jordbruksfält som en funktion av grödans livscykel. Kortfattat sker det en nettoökning i den nära infraröda och en minskning i den röda reflektionen baserat på färgen på jorden.<div><br/>Användningsområdet för den här transformationen har vidgats från övervakning av grödor till skogsbruk, industriell växthantering, mappning och hantering av ekosystem, inventering och övervakning för koldioxidlagring och utsläppsrätter, stadsbyggnad och annat. Den har också utökats från att stödja Landsat MSS till att inkludera andra populära satellitsystem som Landsat TM, Landsat ETM+, Landsat 8, IKONOS, QuickBird, WorldView-2 och RapidEye.</div>",
		timesName: "Gånger",
		timesSnip: "Multiplicerar värdena för två raster cell för cell.",
		timesDesc: "Funktionen Gånger multiplicerar värdena för två raster pixel för pixel.",
		transposeBitsName: "Gör om bitar",
		transposeBitsSnip: "Packar upp bitarna hos indatapixeln och mappar dem till angivna bitar i utdatapixeln. Funktionens syfte är att modifiera bitar från ett par indata, t.ex. Landsat 8-kvalitetsbandsprodukter.",
		transposeBitsDesc: "Funktionen Gör om bitar packar upp bitarna hos indatapixeln och mappar dem till angivna bitar i utdatapixeln. Funktionens syfte är att modifiera bitar från ett par indata, t.ex. Landsat 8-kvalitetsbandsprodukter.",
		unitConversionName: "Enhetskonvertering",
		unitConversionSnip: "Konverterar värden från en mätenhet till en annan.",
		unitConversionDesc: "Denna funktion konverterar pixlar från en enhet till en annan. Den har stöd för konvertering av sträcka, hastighet och temperatur.",
		vectorFieldName: "Vektorfält",
		vectorFieldSnip: "Visar dataset med både magnitud (u) och riktning (v) som pilar, där magnituden visas av pilens storlek och riktningen av dess vinkel.",
		vectorFieldDesc: "Funktionen Vektorfält används för att sätta samman och konvertera två raster till ett raster med två band som är antingen av datatypen magnitud-riktning eller datatypen U-V.<div><br/>U-värdet kallas ibland zonhastighet och V-värdet kallas ibland meridional hastighet.</div>",
		viewshed2Name: "Synfält",
		viewshed2Snip: "Bestämmer vilka platser på rasterytan som är synliga för en uppsättning observatörsgeoobjekt, med geodetiska metoder.",
		viewshed2Desc: "Funktionen Synfält bestämmer vilka platser på rasterytan som är synliga för en uppsättning observatörsgeoobjekt, med geodetiska metoder.<div><br/>Synligheten för varje pixelmittpunkt fastställs med ett siktlinjetest mellan målet och varje observatör. Om en observatör kan se målet i pixelns mittpunkt anses pixeln vara synlig. Detta verktyg tar alltid hänsyn till jordens kurvatur när synligheten fastställs.</div>",
		watershedName: "Avrinningsområde",
		watershedSnip: "Fastställer ackumuleringsområdet ovanför en uppsättning celler i ett raster.",
		watershedDesc: "Den globala funktionen Avrinningsområde fastställer ackumuleringsområdet ovanför en uppsättning pixlar i ett raster. Avrinningsområden avgränsas av ett flödesriktningsraster som identifierar flödesriktningen från varje pixel.",
		weightedOverlayName: "Viktad överlagring",
		weightedOverlaySnip: "Överlagrar flera raster med en gemensam mätskala och viktar vart och ett efter dess betydelse.",
		weightedOverlayDesc: "Med denna funktion kan du överlagra flera raster med en gemensam mätskala och vikta vart och ett efter dess betydelse.",
		weightedSumName: "Viktad summa",
		weightedSumSnip: "Viktar och lägger till ett antal raster på cell efter cell.",
		weightedSumDesc: "Funktionen Viktad summa låter dig överlagra flera raster och multiplicera vart och ett med deras givna vikt och summera dem.",
		windchillName: "Vindavkylning",
		windchillSnip: "Kombinerar omgivningslufttemperatur och vindhastighet och beräknar vindavkylningen.",
		windchillDesc: "Funktionen Vindavkylning är användbar för att identifiera farliga vinterförhållanden som, beroende på exponeringstiden, kan leda till förfrysning eller till och med hypotermi. Vindavkylning är ett sätt att mäta hur kall en person känner sig när hänsyn tas till vinden vid redan låga temperaturer. Ju högre vindhastighet desto snabbare förlorar kroppen värme och desto kallare känner sig personen.",
		zonalRemapName: "Zonbaserad omkartering",
		zonalRemapSnip: "Kartera om pixlar i ett raster baserat på zoner definierade i ett annat raster och en zonberoende värdemappning som definieras i en tabell.",
		zonalRemapDesc: "Med denna funktion kan du kartera om pixlar i ett raster baserat på zoner definierade i ett annat raster och en zonberoende värdemappning som definieras i en tabell.",
		zonalStatisticsName: "Zonbaserad statistik",
		zonalStatisticsSnip: "Beräknar statistik för värden från ett raster inom zonerna för ett annat dataset.",
		zonalStatisticsDesc: "Funktionen beräknar statistik för värden från ett raster inom zonerna för ett annat dataset. En zon definieras som alla områden i indata som har samma värde. Områdena behöver inte vara sammanhängande. När zon- och värdeindata båda är raster med samma upplösning kommer de att användas direkt. Om upplösningarna är olika tillämpas en intern omsampling som ser till att upplösningarna matchar innan zonåtgärden genomförs.",
		flowLengthName: "Flödeslängd",
		flowLengthSnip: "Beräknar avståndet uppströms eller nedströms eller det viktade avståndet längs varje cells flödesväg.",
		flowLengthDesc: "Det här är en global rasterfunktion. Funktionen skapar ett rasterlager med avstånd uppströms eller nedströms, eller ett viktat avstånd, längs flödesvägen för varje cell.<div><br/>Ett primärt användningsområde för funktionen Flödeslängd är att beräkna längden på den längsta flödesvägen inom en viss given damm. Den här åtgärden används ofta för att beräkna koncentrationstiden för en damm. Detta görs med alternativet Uppströms. Funktionen kan också användas för att skapa diagram med avstånd-yta för hypotetiskt regn och avrinning med viktrastret som impedans för rörelser i lutning.</div>",
		streamOrderName: "Strömordning",
		streamOrderSnip: "Tilldelar ett numeriskt värde till segment i ett raster som representerar grenar i ett linjärt nätverk",
		streamOrderDesc: "Det här är en global rasterfunktion. Den här funktionen skapar ett rasterlager som tilldelar ett numeriskt värde till segment i ett raster som representerar grenar i ett linjärt nätverk.<div><br/>Utdata för funktionen Strömordning blir av högre kvalitet om indataströmrasterlagret och indataflödesriktningsrasterlagret härleds från samma yta. Om strömrastret härleds från ett rasteriserat strömdataset, kanske inte utdata går att använda eftersom riktningen cell för cell inte motsvarar platserna för strömcellerna. Resultatet av funktionen Flödesackumulering kan användas för att skapa ett rasterströmnätverk genom att tillämpa ett tröskelvärde som väljer ut celler med högt ackumulerat flöde. Celler som till exempel har fler än 100 celler som flödar till dem används för att definiera strömnätverket. Använd funktionen Con eller Sätt noll för att skapa ett strömnätverksraster där flödesackumuleringsvärden på 100 eller större går till ett, och resten placeras i bakgrunden (NoData). Det resulterande strömnätverket kan användas i funktionen Strömordning. Den här funktionen har endast stöd för ett D8-indataflödesriktningsrasterlager. D8-flödesriktningar kan skapas med funktionen Flödesriktning och köras med standardflödesriktningstypen D8.</div>",
		snapPourPointName: "Snappa hällpunkt",
		snapPourPointSnip: "Snappar hällpunkter till cellen med den högsta flödesackumuleringen inom ett angivet avstånd",
		snapPourPointDesc: "Det här är en global rasterfunktion. Den här funktionen snappar hällpunkter till cellen med den högsta flödesackumuleringen inom ett angivet avstånd.<div><br/>Funktionen Snappa hällpunkt används för att säkerställa val av punkter med högt ackumulerat flöde vid avgränsning av avrinningsområden med funktionen Avrinningsområde. Snappa hällpunkt söker inom ett snappningsavstånd runt de angivna hällpunkterna för cellen med högst ackumulerat flöde och flyttar hällpunkten till den platsen. Utdata är ett heltalsrasterlager när de ursprungliga platserna för hällpunkterna har snappats till platser med högre ackumulerat flöde.</div>",
		sinkName: "Sänka",
		sinkSnip: "Skapar ett raster som identifierar alla sänkor eller områden för intern dränering",
		sinkDesc: "Det här är en global rasterfunktion. Den här funktionen skapar ett raster som identifierar alla sänkor eller områden för intern dränering. En sänka är en cell eller en uppsättning geografiskt anslutna celler med en flödesriktning som inte går att tilldela något av de åtta giltiga värdena i ett flödesriktningsraster. Det här kan inträffa när alla intilliggande celler är högre än den bearbetande cellen eller när två celler flödar in i varandra och skapar en slinga med två celler.<div><br/>Funktionen Sänka stöder endast ett D8-indataflödesriktningsrasterlager. D8-flödesriktningar kan skapas med funktionen Flödesriktning och köras med standardflödesriktningstypen D8. Utdata för funktionen Sänka är ett heltalsraster där varje sänka tilldelas ett unikt värde. Dessa unika värden har ett intervall som ligger mellan ett och det totala antalet sänkor. Om det totala antalet sänkor till exempel var 1 000, sträcker sig det unika värdeintervallet från 1 till 1 000.</div>",
		aggregateName: "Aggregera",
		aggregateSnip: "Genererar en version av ett raster med minskad upplösning.",
		aggregateDesc: "Funktionen Aggregera omsamplar ett indataraster till en grövre upplösning baserat på en angiven aggregeringsstrategi. Varje utdatacell innehåller Summa, Minimum, Maximum, Medel eller Median för de indatacellerna som omfattas av den cellens utbredning.<div><br/>Du kan specificera faktorn med vilken cellstorleken av indatarastret ska multipliceras. Till exempel skulle ett cellfaktorvärde på 3 resultera i utdata där cellstorleken är tre gånger större än indatarastret. Du kan definiera hur utdatas utbredning ska hanteras om antalet rader eller kolumner inte är en exakt multipel av cellfaktorn. Som standard expanderas de övre eller högra gränserna för att täcka en större geografisk utbredning än indatarastrets, för att säkerställa att alla indataceller bearbetas. Alternativt kan de övre eller högra gränserna minskas för att täcka en mindre utbredning, så att det antal rader och kolumner som bearbetas är en exakt multipel av cellfaktorn. Du kan definiera hur NoData-celler ska hanteras av aggregeringsberäkningen. Standardmekanismen är att NoData-indataceller som faller inom den geografiska utbredningen för en större cell i utdatarastret ignoreras när värdet av den utdatacellen avgörs. Alternativt kan du ange att om det finns även en enstaka NoData-indatacell inom den geografiska utbredningen för en utdatacell, blir den cellen NoData i utdatarastret.</div>",
		ccdcName: "CCDC-analys",
		ccdcSnip: "Utvärderar ändringar i pixelvärden över tid med CCDC-algoritmen (Continuous Change Detection and Classification) och genererar modellresultat.",
		ccdcDesc: "CCDC-analysfunktionen utvärderar ändringar i pixelvärden över tid med CCDC-algoritmen (Continuous Change Detection and Classification) och genererar ett flerdimensionellt raster som innehåller modellresultaten. Den stöds bara i kombination med funktionen Identifiera ändring med hjälp av ändringsanalys i en rasterfunktionsmall. För att skapa rasterutdata måste du koppla CCDC-analysfunktionen till funktionen Identifiera ändring med hjälp av ändringsanalys, spara som en rasterfunktionsmall och köra Rasteranalys med funktionsmallen.<div><br/>Den här funktionen använder CCDC-algoritmen (Continuous Change Detection and Classification) för att utvärdera ändringar i pixelvärden över tid för en stapel bilder. I en tidsserie av optiska bilder eller bildhärledningar (t.ex. NDVI) kan pixelvärden fluktuera av flera anledningar: 1. Säsongsskiften – Ändrade pixelvärden motsvarar förändringar i vegetationen på grund av säsongsbetonade variationer i temperatur och nederbörd. På norra halvklotet väntar vi oss t.ex. att se högre täthet av grön vegetation på sommaren än på vintern; 2. Gradvis förändring – Ändrade pixelvärden återspeglar trender i växtlighet eller ytvatten på grund av klimatvariationer eller långsiktig markförvaltningspraxis. Till exempel kan bar mark gradvis öka i yta på grund av en långsiktig minskning av nederbörden, och 3. Abrupta ändringar – Ändrade pixelvärden återspeglar förändringar i marktäckning som uppkommer plötsligt på grund av skogsavverkning, stadsbyggnad, naturkatastrofer osv. CCDC-algoritmen identifierar alla tre typerna av förändring i det huvudsakliga syftet att identifiera abrupta förändringar. Harmonisk regression och trendmodeller anpassas till data för att beräkna säsongsbetonade och gradvisa förändringar, och plötsliga avvikelser från trendmodellerna är indikationer på abrupta förändringar.<div><br/>CCDC-algoritmen utformades ursprungligen för Landsat TM-, Landsat ETM+- och Landsat OLI-data ytreflektans- eller ljusstyrketemperaturdata. Funktionen Identifiera ändring med hjälp av ändringsanalys i kombination med denna funktion identifierar dock förändringar för flerbandsbilder från alla sensorer som stöds, samt ettbandsbildderivat som bandindex. Du kan till exempel utföra kontinuerlig identifiering av förändringar på ett NDVI-raster (Normalized Difference Vegetation Index), eftersom abrupta ändringar i NDVI kan indikera skogsavverkning.</div>",
		computeChangeName: "Beräkna förändring",
		computeChangeSnip: "Beräknar skillnaden mellan två kategoriska eller kontinuerliga rasterdataset.",
		computeChangeDesc: "Funktionen Beräkna förändring kan användas för att förteckna skillnaderna mellan två klassificerade raster för analys av marktäckningsförändring, eller så kan den användas för att undersöka förändringar mellan två kontinuerliga ettbandsraster som höjd över havet, temperatur, trädkroneteckning osv.",
		detectChangeName: "Identifiera ändring med hjälp av ändringsanalys",
		detectChangeSnip: "Genererar ett rasterlager som innehåller information om pixelförändringar med rastret för utdataförändringsanalys.",
		detectChangeDesc: "<div>Funktionen Identifiera ändring med hjälp av ändringsanalys genererar ett rasterlager som innehåller information om pixelförändringsdatum med förändringsanalysrastret. Förändringsanalysrastret måste genereras av verktyget Analysera förändring med CCDC eller Analysera ändringar med LandTrendr, eller rasterfunktionen CCDC-analys eller rasterfunktionen LandTrendr-analys.</div><br><div>Den här rasterfunktionen kan kombineras med rasterfunktionen CCDC-analys eller rasterfunktionen LandTrendr-analys i en rasterfunktionsmall. Om du vill skapa permanenta rasterutdata ansluter du CCDC-analysfunktionen eller LandTrendr-analysfunktionen till funktionen Identifiera ändring med hjälp av ändringsanalys, sparar som en mall för rasterfunktion och kör Rasteranalys med mallen. </div><br><div>Parametern <strong>Ändringstyp</strong> indikerar den information som genereras. Informationen extraheras från ändringsanalysrastret. När du kör den här funktionen på utdata från CCDC-funktionen/-verktyget kan du välja mellan följande alternativ:</div><ul><li><strong>Tid för senaste förändring</strong> – Det senaste datumet och tiden då en pixel flaggades som ändrad.</li><li><strong>Tid för tidigaste förändring</strong> – Det tidigaste datumet och tiden då en pixel flaggades som ändrad.</li><li><strong>Tid för största förändring</strong> – Datum och tid då den beräknade ändringen var den mest signifikanta för en pixel.</li><li> <strong>Antal förändringar</strong> – Det sammanlagda antalet gånger pixeln har ändrats.</li></ul><div>När funktionen körs på utdata från LandTrendr-funktionen/-verktyget finns följande ytterligare alternativ:</div><ul><li><strong>Tid för längsta förändring</strong> – Det datum då en pixel flaggades som ändrad, i början eller slutet av den längsta perioden för förändring.</li><li><strong>Tid för kortaste förändring</strong> – Det datum då en pixel flaggades som ändrad, i början eller slutet av den kortaste perioden för förändring.</li><li><strong>Tiden för snabbaste förändring</strong> – Det datum då en pixel flaggades som ändrad, i början eller slutet av den snabbaste perioden för förändring.</li><li><strong>Tid för långsammaste förändring</strong> – Det datum då en pixel flaggades som ändrad, i början eller slutet av den långsammaste perioden för förändring.</li></ul><div>Utdatarastret är ett flerbandsraster där varje band innehåller information om den valda ändringstypen och det maximala antalet angivna ändringar. Om till exempel <strong>Ändra typ</strong> är inställt till <strong>Tid för tidigaste förändring</strong> och <strong>Maximalt antal förändringar</strong> är inställt till 2, beräknar funktionen de två tidigaste datumen när en förändring inträffade genom tidsserien för varje pixel. Resultatet är ett raster där det första bandet innehåller datumen för den tidigaste förändringen per pixel, och det andra bandet innehåller datumen för den näst tidigaste förändringen per pixel.</div><br><div>När funktionen tillämpas på utdata från LandTrendr-verktygen, kan du välja om du vill extrahera det datum som markerar början av en förändring eller slutet av en förändring med parametern <strong>Segmentdatum</strong>. För att till exempel förstå hur den senaste ändringen i tidsserien startades, anger du <strong>Ändringstyp</strong> till <strong>Tid för senaste förändring</strong> och <strong>Segmentdatum</strong> till <strong>Början av segment</strong>.</div><br><div>Använd följande filtreringsparametrar om du vill extrahera mer specifika datum för förändring från ändringsanalysrastret:</div><ul><li><strong>Filtrera efter år</strong> – Identifiera förändringar som inträffade inom en viss tidsperiod, om du till exempel letar efter förändringar som har inträffat i ett landskap under fem år av torka.</li><li><strong>Filtrera efter varaktighet </strong> – Identifiera förändringar som inträffade under ett visst antal år, till exempel om du bara letar efter abrupta förändringar som ägde rum över 1 eller 2 år. Du kan beräkna den varaktighet du är intresserad av använda med hjälp av formeln <strong>slutår - startår +1</strong>. Mellanrum i tidsserien tas med.</li><li><strong>Filtrera efter magnitud</strong> – Identifiera ändringar av en viss magnitud, till exempel om du bara letar efter stora förändringar i vegetationsindexet NDVI. Magnitud är ett absolut värde, så minimi- och maximivärdena får inte vara negativa. Ange riktningsändring med parametern <strong>Ändra riktning</strong>.</li></ul>",
		distanceAccumulationName: "Avståndsackumulering",
		distanceAccumulationSnip: "Beräknar ackumulerat avstånd för varje cell till källor, med hänsyn till rak linje-avstånd, kostnadsavstånd, verkligt ytavstånd, samt vertikala och horisontella kostnadsfaktorer.",
		distanceAccumulationDesc: "Avståndsackumulering beräknar avståndet till varje plats i undersökningsområdet till den närmaste, eller billigaste, källan. Om bara källorna anges för indata, beräknas ett rak linje-avstånd till varje plats i undersökningsområdet. Om både källor och hinder används som indata, beräknar Avståndsackumulering rak linje-avståndet runt hinder. För både källrastret och hinderrastret bör bakgrundsvärdet vara NoData, medan källor och hinder representeras med giltiga cellvärden. Giltiga värden innefattar noll. <div><br/>När ett ytraster anges som indata, beräknas det faktiska ytavståndet mellan celler. För att utföra kostnadsanalys med Avståndsackumulering, behövs en kostnadsyta. Om en kostnadsyta anges, blir resultatet ett ackumulerat raster för avståndskostnad. När horisontal- och vertikalfaktorer tillhandahålls, beaktas riktning när kostnaden ackumuleras. Det finns fyra källgrunddrag som kan användas. Dessa grunddrag, som antingen kan vara för källan eller aktörerna från källan, styrs av specifika parametrar: 1. Inledande ackumulering: anger den inledande kostnaden innan rörelsen börjar. 2. Maximal ackumulering: anger hur mycket en källa kan ackumulera innan den når sin gräns. 3. Multiplikator att använda på kostnader: specificerar färdläget eller magnituden vid källan. 4. Reseriktning: identifierar om aktören startar vid en källa och rör sig till andra platser än källan, eller startar vid platser som inte tillhör källan och rör sig tillbaka till en källa.<div><br/>Som standard är resultatet från Avståndsackumulering ett enda band, som är avståndsackumuleringsrastret. Det går dock även att skapa ett andra band, tillbakariktningsbandet.  Det bandet visar i vilken riktning man ska resa från varje plats i undersökningsområdet för att komma till den billigaste källan. Båda banden behövs för att fastställa optimala rutter inom undersökningsområdet. För att generera en rutt ska först funktionen Extrahera band användas för att extrahera avståndsackumuleringsrastret och tillbakariktningsrastret. Använd dessa lager som indata för funktionen Kostnadsrutt. I funktionen använder du avståndsackumuleringsrastret som indata för Raster för avståndsackumuleringsraster, och tillbakariktningsrastret som indata för Raster för bakåtlänkskostnad.</div>",
		distanceAllocationName: "Avståndsallokering",
		distanceAllocationSnip: "Beräknar avståndsallokering för varje cell till de angivna källorna baserat på rak linje-avstånd, kostnadsavstånd, verkligt ytavstånd, samt vertikala och horisontella kostnadsfaktorer.",
		distanceAllocationDesc: "Avståndsallokering beräknar till vilken källa varje plats i undersökningsområdet är allokerad. Om endast källorna anges som indata, allokeras platserna efter ett rak linje-avstånd till den närmaste källan. Om både källor och hinder används som indata, beräknar Avståndsallokering rak linje-avståndet runt hinder för att avgöra vilken källa en plats allokeras till. För både källrastret och hinderrastret bör bakgrundsvärdet vara NoData, medan källor och hinder representeras med giltiga cellvärden. Giltiga värden innefattar noll.<div><br/>För att utföra kostnadsanalys med Avståndsallokering, behövs en kostnadsyta. Om en kostnadsyta anges är resultatet ett tilldelningsraster baserat på ackumulativ kostnad, inte på rak linje-avstånd. När horisontal- och vertikalfaktorer tillhandahålls, beaktas riktning när kostnaden ackumuleras. När ett ytraster anges som indata, beräknas det faktiska ytavståndet som täcks vid passage mellan celler när allokering avgörs. Det finns fyra källgrunddrag som kan användas. Dessa grunddrag, som antingen kan vara för källan eller aktörerna från källan, styrs av specifika parametrar: 1. Inledande ackumulering: anger den inledande kostnaden innan rörelsen börjar. 2. Maximal ackumulering: anger hur mycket en källa kan ackumulera innan den når sin gräns. 3. Multiplikator att använda på kostnader: specificerar färdläget eller magnituden vid källan. 4. Reseriktning: identifierar om aktören startar vid en källa och rör sig till andra platser än källan, eller startar vid platser som inte tillhör källan och rör sig tillbaka till en källa.<div><br/>Som standard är resultatet från Avståndsallokering ett enda band, som är avståndsallokeringsrastret. Om du markerar det booleska alternativet Generera källrad och kolumn som ytterligare band i utdata resulterar det i ett flerbandsraster som består av tre band. Det första bandet är avståndsallokeringsbandet, det andra bandet innehåller ett radindex och det tredje bandet innehåller ett kolumnindex. Dessa index identifierar platsen för källcellen som är den lägsta ackumulerade avståndskostnaden bort. Källradindexet och källkolumnindexet kan användas tillsammans för att skapa intensitetskartor. Om du söker efter någon plats i undersökningsområdet över band två och tre, vet du raden och kolumnen för den billigaste källan för den platsen.</div>",
		eucBackDirectionName: "Euklidisk tillbakafördelning",
		eucBackDirectionSnip: "Beräknar riktningen i grader för varje cell mot en angränsande cell längs den kortaste vägen tillbaka till den närmaste källan samtidigt som det undviker hinder.",
		eucBackDirectionDesc: "Funktionen Euklidisk tillbakafördelning resulterar i ett kontinuerligt flyttalsraster som representerar riktningen i grader tillbaka till den närmaste källan samtidigt som det undviker eventuella hinder.<div><br/>Indata till Euklidisk tillbakafördelning är den källa som riktningen beräknas till. Valfria indata är ett raster som representerar hinder inom undersökningsområdet. För både källrastret och hinderrastret bör bakgrundsvärdet vara NoData, medan källor och hinder representeras med giltiga värden. Giltiga värden innefattar noll. Som standard bearbetar beräkningen till den kombinerade utbredningen av källorna och hindren, plus 2 rader och kolumner. Om analysen bara behövs inom ett angivet avstånd från källorna, kan parametern Maximalt avstånd användas. Euklidisk tillbakafördelning har stöd för både en plan metod och en geodetisk metod i beräkningen. Beräkningen med plan metod utförs på ett projicerat platt plan med ett tvådimensionellt kartesiskt koordinatsystem. Beräkningen med geodetisk metod utförs på ellipsoiden, vilket innebär att resultatet inte förändras beroende av indata- eller utdataprojektion.<div><br/>Resultatet från funktionen Euklidisk tillbakafördelning kan användas i kombination med resultatet från funktionen Euklidiskt avstånd för att avgöra de kortaste rutterna från platser inom undersökningsområdet tillbaka till källan. Både resultatet för Euklidisk tillbakafördelning och resultatet för Euklidiskt avstånd används i funktionen Kostnadsrutt tillsammans med mål för att generera de kortaste rutterna.</div>",
		expandName: "Expandera",
		expandSnip: "Expanderar valda zoner i ett raster efter zoner med ett visst antal celler.",
		expandDesc: "Med den globala Expandera-funktionen kan du generalisera eller förenkla raster genom att göra vissa zoner större. Du kan också styra mängden generalisering som ska förekomma.<div><br/>De zoner du väljer ökar i storlek genom att expandera till andra zoner. Konceptuellt kan de valda zonvärdena ses som förgrundszoner, medan de andra värdena förblir bakgrundszoner. Förgrundszonerna kan expandera till bakgrundszonerna.<div><br/>Mängden generalisering kan styras med parametern Antal celler. Som standard är detta värde 1, vilket innebär att de valda zonerna expanderar med den mängd som motsvarar en cells storlek. För att öka graden av generalisering kan du ange ett större värde för den här parametern. Konceptuellt är det som att köra verktyget lika många gånger som det angivna antalet, där resultaten av föregående körning är indata till nästa iteration.</div>",
		trendAnalysisName: "Generera trend",
		trendAnalysisSnip: "Uppskattar trenden för varje pixel längs en dimension för en eller flera variabler i ett flerdimensionellt raster.",
		trendAnalysisDesc: "<div>Den här funktionen kan användas för att passa data längs en linjär, harmonisk eller polynom trendlinje, eller så kan den användas för att utföra trendidentifiering med Mann-Kendall- eller Seasonal-Kendall-testet.</div><br><div>Utdatatrendrastret som genereras med den här funktionen används som indata till funktionen <strong>Förutsäg med trend</strong>.</div><br><div>Mann-Kendall- och Seasonal-Kendall-testerna används för att avgöra om det finns en monotonisk trend i data. De är icke-parametriska, vilket innebär att de inte förutsätter någon specifik datafördelning. Mann-Kendall-testet tar inte hänsyn till serieeffekter för korrelationer eller årstider. Om data är årstidsberoende är Seasonal-Kendall-testet mer lämpligt.</div><br><div>Om verktyget används för att utföra antingen Mann-Kendall- eller Seasonal-Kendall-testet, är utdata ett raster med fem band enligt följande:</div><ul><li>Band 1 = Sens sluttning</li><li>2 = p-värde</li><li>Band 3 = Mann-Kendall-poäng (S)</li><li>Band 4 = S-varians</li><li>Band 4 = S-varians</li><li>Band 5 = Z-poäng</li></ul><div>Resultaten från Mann-Kendall-testet eller Seasonal-Kendall-testet kan användas för att fastställa vilka pixlar i flerdimensionella tidsserier som har en statistiskt signifikant trend. Den här informationen kan du använda i samband med linjära, harmoniska eller polynoma trendanalyser för att extrahera signifikanta trender i din tidsserie. Du kan generera en mask som innehåller pixlar med signifikanta p-värden, tillämpa masken på det flerdimensionella rastret och använda det maskerade flerdimensionsrastret som indata för verktyget för att utföra linjära analyser av p-värden eller polynomtrender.</div><br><div>Det finns tre trendlinjealternativ för att anpassa en trend till variabelvärdena längs en dimension: linjär, polynom och harmonisk.</div><br><div>För linjära trendanalyser är utdata ett trebandsraster enligt följande:</div><ul><li>Band 1 = Lutning</li><li>Band 2 = Intercept</li><li>Band 3 = Medelkvadratrotsfel (RMSE) eller felet runt linjen för bästa passning</li></ul><div>För polynom trendanalys beror antalet band i utdata på polynomordningen. Andra ordningens polynompassning skapar ett fyrabandsraster enligt följande:</div><ul><li>Band 1 = Polynom_2</li><li>Band 2 = Polynom_1</li><li>Band 3 = Polynom_0</li><li>Band 4 = Medelkvadratrotsfel</li></ul><div>Tredje ordningens polynompassning skapar ett fembandsraster enligt följande:</div><ul><li>Band 1 = Polynom_3</li><li>Band 2 = Polynom_2</li><li>Band 3 = Polynom_1</li><li>Band 4 = Polynom_0</li><li>Band 5 = Medelkvadratrotsfel</li></ul><div>För harmonisk trendanalys beror antalet band i utdata på den harmoniska frekvensen. När frekvensen är inställd till 1 är utdata ett fembandsraster enligt följande:</div><ul><li>Band 1 = Lutning</li><li>Band 2 = Intercept</li><li>Band 3 = Harmonisk_sin1</li><li>Band 4 = Harmonisk_cos1</li><li>Band 5 = Medelkvadratrotsfel</li></ul><div>När frekvensen är inställd på 2 är utdata ett raster på sju band enligt följande:</div><ul><li>Band 1 = Lutning</li><li>Band 2 = Intercept</li><li>Band 3 = Harmonisk_sin1</li><li>Band 4 = Harmonisk_cos1</li><li>Band 5 = Harmonisk_sin2</li><li>Band 6 = Harmonisk_cos2</li><li>Band 7 = Medelkvadratrotsfel</li></ul><div>Parametern <strong>Cykellängd</strong> för harmonisk trendanalys används för att visa antalet och längder för cykler som du väntar dig att se i dina data under en dag eller ett år. Om du till exempel väntar dig att dina data går igenom två variationscykler under ett år, är cykellängden 182,5 dagar eller 0,5 år. Om du har temperaturdata som samlats in var tredje timme och det finns en variationscykel per dag, är cykellängden en dag.</div><br><div>Parametern <strong>Frekvens</strong> för harmonisk trendanalys används för att beskriva den harmoniska modellen att passa till informationen. Om frekvensen är inställd till 1, används en kombination av linjär och första ordningens harmoniska kurva för att anpassa modellen. Om frekvensen är 2, används en kombination av linjära och första och andra ordningens harmoniska kurvor för att anpassa data. Om frekvensen är 3 används en ytterligare tredje ordningens harmonisk kurva för att modellera data, och så vidare.</div><br><div>Statistiken för modellens goodness-of-fit kan genereras som valfria utdata. Medelkvadratrotsfelet (RMSE), R-kvadrat och p-värdet för trendens lutning kan beräknas och symboliseras. Symbolisera utdatatrendens rasterlager med <strong>RGB</strong>-symbologi och ange statistiken som de röda, gröna och blå banden.</div><br>",
		spectralUnmixingName: "Linjär spektral oblandning",
		spectralUnmixingSnip: "Utför klassificering av underpixlar och beräknar bråkandelen av olika marktäckningstyper för enskilda pixlar.",
		spectralUnmixingDesc: "Funktionen Linjär spektral oblandning beräknar bråktäckningen för enskilda pixlar som innehåller flera marktäckningstyper. Den genererar ett flerbandslager, där varje band motsvarar bråkandelen av varje marktäckningsklass. Du kan t.ex. använda den för att utföra klassificering av marktäckning på en multispektral bild för att identifiera fotosyntetisk vegetation, bar mark och död eller icke-fotosyntetisk vegetation.<div><br/>Ordningen för utdataflerbandsrastret följer ordningen i den spektrala indataprofilen. Antalet klasser får inte överstiga antalet band i indatarastret. Du kan till exempel inte extrahera information om fler än 8 klasser från ett 8-bandsraster.</div>",
		multidimensionalFilterName: "Flerdimensionellt filter",
		interpolateRasterByDimensionFunctionName: "Interpolera raster efter dimension",
		interpolateRasterByDimensionFunctionSnip: "Interpolerar ett flerdimensionellt raster vid angivna dimensionsvärden med intilliggande sektorer.",
		interpolateRasterByDimensionFunctionDesc: "<p>Med den här funktionen kan du beräkna pixelvärden för en odefinierad dimensionssektor i ett flerdimensionellt raster. Om du till exempel har ett dataset som innehåller havstemperatur vid ytnivå och vid 100 meter under havsnivån och du vill beräkna temperaturen vid 50 meter under havsnivån, kan du använda den här funktionen för att få en uppskattning på det djupet med dimensionsdefinitionen Efter värden.</p><p>Du kan även nedsampla ett månatligt dataset till ett dagligt dataset med dimensionsdefinitionen Efter intervall och ange stegparametervärdet som 1 och enhetsparametervärdet som dagar.</p><p>Använd dimensionsdefinitionen Efter målraster för att beräkna värdet för målrastret.</p>",
		multidimensionalFilterSnip: "Skapar ett rasterlager från ett flerdimensionellt rasterdataset eller ett flerdimensionellt rasterlager genom att dela upp data enligt definierade variabler och dimensioner.",
		multidimensionalFilterDesc: "Det flerdimensionella filtret skapar ett flerdimensionellt rasterlager genom att filtrera och extrahera en delmängd variabler från ett flerdimensionellt raster. Till exempel kan du ha ett flerdimensionellt dataset som innehåller 30 års data om månadsnederbörd, och du vill bara extrahera data för varje januari för att se hur nederbörden har förändrats för den månaden.<div><br/>Använd parametern Dimensionsdefinition för att dela upp dimensioner efter ett intervall, ett värde eller ett intervall av värden. Om du t.ex. har 10 års data över salthalt för havet, insamlade varje månad och på varannan meters djup upp till 500 meter, kan du använda de olika alternativen för dimensionsdefinition för följande scenarion. Scenario 1: Extrahera salthaltsdata för januari månad över 10-årsperioden. Välj Efter värde, ställ in Dimension till StdTid och ställ in Värden till januari. Scenario 2: Dela upp salthaltsdata över ett djupintervall från 0 till 150 meter. Välj Efter intervall, ställ in Dimension till StdZ och ställ in Minimivärde till -150 och Maximumvärde till 0. Scenario 3: Extrahera salthaltsdata för de första 10 dagarna i januari över en 10-årsperiod. Välj Efter iteration, ställ in Dimension till StdTid, ställ in Början av första iterationen och Slutet av första iterationen till motsvarande början och slut av iterationsperioden, ställ in Steg till 1 och ställ in Enhet till År.</div>",
		multidimensionalRasterName: "Flerdimensionellt raster",
		multidimensionalRasterSnip: "Lägger till flerdimensionella data på en karta som ett flerdimensionellt rasterlager.",
		multidimensionalRasterDesc: "Funktionen Flerdimensionellt raster lägger till flerdimensionella data på en karta som ett flerdimensionellt rasterlager. Den här funktionen är användbar när du utför rasteranalysarbetsflöden med en funktionskedja.<div><br/>Flerdimensionella rasterdataset som stöds innefattar netCDF, GRIB, HDF och Esris CRF. Flerdimensionella mosaikdataset stöds också.</div>",
		optimalPathAsRasterName: "Optimal väg som raster",
		optimalPathAsRasterSnip: "Beräknar den billigaste rutten från en källa till en destination.",
		optimalPathAsRasterDesc: "Den här globala funktionen producerar ett utdataraster som registrerar den optimala rutten eller rutter från valda platser till den närmaste ursprungscellen som definierats inom den ackumulerade kostnadsytan, med avseende på kostnad för avstånd.<div><br/>En eller flera av funktionerna för vägda kostnader (Avståndsackumulering eller Avståndsallokering) måste i allmänhet köras innan funktionen Optimal väg som raster körs för att skapa indatarastren för avståndsackumulering och tillbakariktning. De är obligatoriska indatarasterlager för funktionen Optimal väg. Värdet för den utmatade optimala vägen motsvarar antalet vägar på en given plats. I många fall följer vägar samma rutt, lämnar en källa och delar sig sedan för att gå till olika destinationer. Till exempel visar värdet ett att det bara finns en optimal väg på en given plats, medan värdet fem betyder att det på den platsen finns fem optimala vägar som går genom den cellen i undersökningsområdet.<div><br/>Indestinationsdata måste vara ett rasterlager. Uppsättningen destinationsceller består av alla celler i indatarastret som har giltiga värden. Celler som har NoData-värden ingår inte i setet. Värdet noll ses som ett legitimt mål. Ett destinationsraster kan skapas med extraheringsverktygen. Om du har destinations- eller källgeoobjekt, kan du konvertera dem till raster med funktionen Rastrera geoobjekt. Använd rastret avståndsackumulering eller tillbakariktning som rasterindata för rastreringsfunktionen. Detta säkerställer att geoobjektet rastreras med samma cellstorlek, utbredning och geografiska referens som de andra rastren som går in i funktionen Optimal väg som raster. Funktionen Optimal väg som raster kan också användas för att härleda vägen med lägst motstånd nedför en digital höjdmodell. Använd i så fall den digitala höjdmodellen för indataavståndsackumuleringsrastret och utdata från funktionen Flödesriktning för tillbakariktningsrastret.</div>",
		trendName: "Förutsäg med trend",
		trendSnip: "Beräknar ett prognostiserat flerdimensionellt rasterlager med utdatatrendrastret från funktionen Generera trend eller geobearbetningsverktyget Generera trendraster.",
		trendDesc: "Funktionen Förutsäg med trend beräknar ett prognostiserat flerdimensionellt rasterlager med utdatatrendrastret från funktionen Generera trend eller geobearbetningsverktyget Generera trendraster.",
		rasterCollectionName: "Bearbeta rastersamling",
		rasterCollectionSnip: "Bearbetar varje sektor i ett flerdimensionellt raster eller varje objekt i ett mosaikraster. Funktionen kan också aggregera flera sektorer till en enda sektor.",
		rasterCollectionDesc: "Funktionen Bearbeta rastersamling bearbetar varje sektor i ett flerdimensionellt raster eller varje objekt i ett mosaikraster. Funktionen kan också aggregera flera sektorer till en enda sektor.<div><br/>Den här funktionen bearbetar varje sektor i ett flerdimensionellt raster eller mosaikraster med en rasterfunktionsmall. Funktionen har stöd för följande alternativ: 1. Ange en rasterfunktionsmall för Objektfunktion. Du har till exempel ett mosaikdataset som innehåller 20 års Landsat-bilder och du vill beräkna NDVI för varje scen i tidsserien. För Objektfunktion anger du en rasterfunktionsmall som innehåller NDVI-rasterfunktionen. 2. Ange en rasterfunktionsmall för Aggregeringsfunktionen. Du har till exempel ett flerdimensionellt raster som innehåller 10 års dagliga temperaturdata och du vill beräkna den maximala temperaturen för varje år. I Aggregeringsfunktionen anger du en rasterfunktionsmall som innehåller funktionen Cellstatistik, med operationen inställd på Maximum. Under Aggregeringsdefinition ställer du in Dimension till StdTid, ställer in Typ till Intervallnyckelord och ställer in Nyckelordsintervall till Årligen. Observera att om indatamosaikdatasetet inte är flerdimensionellt, tar aggregeringsfunktionen inte hänsyn till aggregeringsdefinitionen. Aggregeringsfunktionen aggregerar alla objekt eller varje grupp till en om de är definierade i aggregeringsfunktionsmallen. Mer information om att använda grupper i ett mosaikdataset finns i Använda mosaikdatasetobjekt i Rasterfunktionsmallar. 3. Ange en rasterfunktionsmall för Bearbetningsfunktionen. Funktionen eller funktionskedjan i den här mallen används för att visa det nya bearbetade rastret. Ange till exempel en rasterfunktionsmall som innehåller funktionen Färgkarta för att ändra hur det bearbetade rasterlagret ska visas. Observera att om indata är ett flerdimensionellt raster, tillämpas bearbetningsfunktionen på den aktuella visningssektorn. Om indata är ett mosaiklager eller mosaikdataset, tillämpas bearbetningsfunktionen på mosaikrastret med metoden Först för att lösa överlappningar. 3. Ange mallar för någon kombination av de tre funktionerna. Du har till exempel ett mosaikdataset som innehåller Landsat-bilder med tidsserier och du vill generera en sammansatt bild av maximal NDVI. För Objektfunktion anger du en rasterfunktionsmall som innehåller NDVI-rasterfunktionen. För Aggregeringsfunktionen anger du en rasterfunktionsmall som innehåller funktionen Cellstatistik, med operationen inställd på Maximum. För Bearbetningsfunktion anger du en rasterfunktionsmall som innehåller funktionen Färgkarta. Observera att ordningen för funktionsbearbetning följer indataparametrarnas ordning. Till exempel bearbetas Objektfunktionen först.</div>",
		randomName: "Slumpmässig",
		randomSnip: "Skapar ett raster med slumpmässiga pixelvärden som hämtats från en pseudoslumpmässig distribution. Det finns stöd för flera distributioner och slumptalgeneratorer.",
		randomDesc: "Funktionen Slumpmässig skapar ett raster med slumpmässiga pixelvärden som kan användas i rasterfunktionsmallar eller mosaikdataset.<div><br/>Även om många funktioner fungerar på ett eller flera indataraster, kräver funktionen Slumpmässig inget indataraster. Det innebär att den beter sig mer som ett rasterdataset än en funktion, så särskild försiktighet krävs när du lägger till den i eller tar bort den från funktionskedjan.</div>",
		shrinkName: "Krymp",
		shrinkSnip: "Krymper de valda zonerna med ett angivet antal celler genom att ersätta dem med värdet av den mest frekventa cellen i dess närområde.",
		shrinkDesc: "Med den globala Krymp-funktionen kan du generalisera eller förenkla raster genom att göra vissa zoner mindre. Du kan också styra mängden generalisering som ska förekomma.<div><br/>De zoner du väljer krymper, eller reduceras i storlek, genom att celler från omgivande zoner expanderar in i dem. Konceptuellt kan de valda zonvärdena ses som förgrundszoner, medan de andra värdena förblir bakgrundszoner. Cellerna i förgrundszonerna kan ersättas av celler i bakgrundszonerna. Tunna öar inuti en zon, som kan ses som att de delar gränser med zonen, kan också ersättas.<div><br/>Mängden generalisering kan styras med parametern Antal celler. Som standard är detta värde 1, vilket innebär att de valda zonerna krymper med den mängd som motsvarar en cells storlek. För att öka graden av generalisering kan du ange ett större värde för den här parametern. Konceptuellt är det som att köra verktyget lika många gånger som det angivna antalet, där resultaten av föregående körning är indata till nästa iteration.</div>",
		trendToRGBName: "Trend till RGB",
		trendToRGBSnip: "Konverterar ett trendraster till ett raster med tre band (rött, grönt och blått).",
		trendToRGBDesc: "Funktionen Trend till RGB konverterar ett trendraster till ett raster med tre band (rött, grönt och blått). Trendrastret genereras från rasterfunktionen Generera trend eller CCDC-analys.<div><br/>Den här funktionen är användbar för att visualisera modellkoefficientdata från funktionen Generera trend eller funktionen CCDC-analys. Båda funktionerna uppskattar trender i ändrade pixelvärden, men resultaten av funktionerna är svåra att tolka direkt.<div><br/>Som många rasterfunktioner kan du behöva använda dynamisk intervalljustering för att visa resultaten från funktionen.</div>",
		landTrendrName: "LandTrendr-analys",
		landTrendrSnip: "Utvärderar ändringar i pixelvärden över tid med Landsat-baserad upptäckt av trender inom metoder för störning och återhämtning (LandTrendr) och genererar ett ändringsanalysraster som innehåller modellresultaten.",
		landTrendrDesc: "Denna rasterfunktion kan bara användas som indata till rasterfunktionen Identifiera ändring med hjälp av ändringsanalys. För att skapa rasterutdata måste du koppla LandTrendr-analysfunktionen till funktionen Identifiera ändring med hjälp av ändringsanalys i en rasterfunktionsmall och använda mallen som indata i geobearbetningsverktyget Generera raster från rasterfunktion. Resultatet är ett raster som innehåller information om tidpunkten då pixelvärdena ändrades.<div><br>Syftet med denna rasterfunktion är att extrahera ändringarna i ett observerat geoobjekt, så idealiska flerdimensionella indata bör samla in en konsekvent observation över tid och bör inte inkludera atmosfärisk interferens eller sensorinterferens, moln eller molnskugga. Bästa praxis är att använda data som har normaliserats och kan maskeras med ett QA-band, till exempel Landsat Collection 1 Ytreflektans-produkter med en molnmask.<div><br>Funktionen utför analys på en bild per år och antalet årsdelar måste vara lika med eller större än värdet som anges i parametern <strong>Lägsta antal observationer</strong>. Vi rekommenderar att du har minst sex års data.<div><br>Om du har månatliga, veckovisa eller dagliga data rekommenderar vi att du väljer flera bilder från varje år (helst från samma årstid), tar bort moln och molnskugga och kombinerar bilderna för att generera en enskild bild som fångar observationen väl. Om månatliga, veckovisa eller dagliga data tillhandahålls som flerdimensionellt raster som indata, identifierar funktionen en del för analys baserat på de data som är närmast de som anges i parametern <strong>Snappningsdatum</strong>.<div><br>En funktion i landskapet tar ofta tid att återställa från en icke-permanent ändring som en skogsbrand eller ett insektsangrepp. Du kan styra återhämtningstakten för modellen genom att ange parametern Tröskelvärde för återhämtning. Ett distinkt segment kan inte ha en återhämtningstakt som är snabbare än tröskelvärdet för återhämtning 1/.<div><br>Återhämtningen från en landskapsförändring kan ske i positiv eller negativ riktning. Till exempel: när en skogsförlust uppstår i ett landskap så uppvisar en tidsserie med värden för vegetationsindex en sänkning av indexvärden. Återhämtningen visar en gradvis ökning av vegetationens indexvärden, eller en positiv återhämtningstrend. Ange riktningen för återhämtningstrenden med parametern <strong>Återställningen har en ökande trend</strong>.",
		aggregateMultidimensionalName: "Aggregera flerdimensionellt",
		aggregateMultidimensionalSnip: "Kombinerar befintliga flerdimensionella rastervariabeldata längs en dimension.",
		aggregateMultidimensionalDesc: "Funktionen Aggregera flerdimensionellt skapar ett flerdimensionellt rasterlager genom att kombinera befintliga flerdimensionella rastervariabeldata längs en dimension.<div><br>Använd parametern <strong>Dimensionsdefinition</strong> för att först filtrera de indata du vill aggregera. Om du till exempel har 30 år med månadsdata men bara vill skapa ett aggregerat lager för de första 15 åren, kan du använda parametern <strong>Dimensionsdefinition</strong> för att ange vilka år som ska ingå i analysen.<div><br><ul><li>Extrahera salthaltsdata för januari månad under 10-årsperioden. Välj <strong>Efter värden</strong>, ställ in <strong>Dimension</strong> till <strong>StdTid</strong> och ställ in <strong>Värden</strong> till <strong>Januari</strong>.</li><li>Dela upp salthaltsdata över ett djupintervall från 0 till 150 meter. Välj <strong>Efter intervall</strong>, ställ in <strong>Dimension</strong> till <strong>StdZ</strong> och ställ in <strong>Minimivärde</strong> till <strong>-150</strong> och <strong>Maximumvärde</strong> till <strong>0</strong>.</li><li> Extrahera salthaltsdata för de första 10 dagarna i januari över en 10-årsperiod. Välj <strong>Efter iteration</strong>, ställ in <strong>Dimension</strong> till <strong>StdTid</strong>, ställ in <strong>Början av första iterationen</strong> och <strong>Slutet av första iterationen</strong> till motsvarande början och slut av iterationsperioden, ställ in <strong>Steg</strong> till <strong>1</strong> och ställ in <strong>Enhet</strong> till <strong>År</strong>.</li></ul><div><br>Använd parametrarna <strong>Aggregeringsdefinition</strong> för att välja dimension att utvärdera och aggregeringsintervallet med nyckelord, ett värde eller ett värdeintervall. Om du till exempel har 30 års data över havsytans temperatur, insamlad varje dag och på var femte meters djup ända ned till 100 meter, kan du använda de olika intervallalternativen för följande scenarion:<div><br><ul><li>Aggregera dagstemperaturdata till månadsdata, där resultatet är ett flerdimensionellt raster med 12 tidsdelar, och varje del är en aggregering av varje månad under alla åren. Välj <strong>Intervallnyckelord</strong> och ställ in nyckelordet till <strong>Återkommer månadsvis</strong>.</li><li>Aggregera dagliga temperaturdata till månadsdata, där resultatet är ett flerdimensionellt raster med 360 delar eller 12 tidsdelar per år (30 år × 12 månader = 360 bitar). Välj <strong>Intervallnyckelord</strong> och ställ in nyckelordet till <strong>Månadsvis</strong>.</li><li>Aggregera månadstemperaturdata till fyramånadersintervall. Välj <strong>Intervallvärde</strong>, ställ in <strong>Värdeintervall</strong> till 4, och ställ in <strong>Enhet</strong> till <strong>Månader</strong>.</li><li>Aggregera temperaturdata från 0 till 25 meter, sedan från 25 till 50 meter, därefter från 50 till 100 meter. Välj <strong>Intervallområden</strong> och ange minsta och största djup som <strong>0 25; 25 50; 50 100</strong>.</li></ul>",
		mergeRastersName: "Sammanfoga raster",
		mergeRastersSnip: "Kombinerar flera rasterdataset geografiskt eller över variabler och dimensioner.",
		mergeRastersDesc: "Funktionen skapar ett sammanfogat raster från en lista med raster. Om du till exempel har ett mosaikdataset som innehåller 30 års data om månadsnederbörd, och ett annat dataset med 10 års data om månadstemperatur, så kan du kombinera dem till ett flerdimensionellt raster med båda variablerna. <div><br>Om flerdimensionella raster som indata innehåller olika variabler kommer flerdimensionella raster som utdata att innehålla alla de variablerna. <div><br>Om flerdimensionella raster som indata innehåller olika dimensioner eller dimensionsvärden, kommer flerdimensionella raster som utdata att innehålla alla dessa dimensioner och dimensionsvärden. <div><br>Om flerdimensionella raster som indata innehåller samma dimensioner och variabler men olika geografisk utbredning, kommer flerdimensionella raster som utdata att innehålla dessa variabler och dimensioner över de sammanfogade geografiska utbredningarna.<div><br>Denna funktion kan också användas när du har många raster som du vill behandla som ett enskilt objekt, som att beräkna samma statistik för alla, eller när färgbalansering tillämpas så att du inte behöver färgbalansera varje bild separat. Det här är användbart när du arbetar med bilder som lagrats som separata tiles på grund av filstorleksbegränsningar, för på det sättet behandlas alla tiles som en del av samma bild.",
		boundaryCleanName: "Gränsrensning",
		boundaryCleanSnip: "Jämnar ut gränsen mellan zoner.",
		boundaryCleanDesc: "<p>Funktionen generaliserar eller förenklar raster genom att jämna ut gränserna mellan zoner. Funktionen innehåller alternativ för att styra hur cellerna i zonerna i indata påverkar utjämningen och mängden utjämning som ska tillämpas. Varje indatacell utvärderas med hjälp av sina åtta närmaste grannar.</p><p>Utjämningsprocessen sorterar först granncellerna med en viss prioritet. Prioriteten avgör vilken zon från de närliggande cellerna som kan ersätta värdet av bearbetningscellen i utdata.</p><p>Prioriteten kan baseras på antingen värdet i zonerna eller storleken på zonerna. Parametern <strong>Sorteringstyp</strong> avgör vilken sorteringstyp som ska användas. </p><p> Standardinställningen <strong>Sortera inte</strong> utvärderar prioriteten baserat på värdet för zonerna. Celler från zoner med större värden kommer att ha högre prioritet för att expandera till zoner med mindre värden.</p><p>Zonernas storlek eller totala yta kan användas för att sortera prioriteten. Med inställningen <strong>Fallande</strong> sorteras zonerna efter storlek i fallande ordning. Zonerna med större totala ytor kommer att ha prioriteten att expandera till zoner med mindre ytor. Med inställningen <strong>Stigande</strong> gäller motsatsen: zoner med mindre totala ytor kommer att ha prioriteten att expandera till zoner med större totala ytor.</p><p>Mängden utjämning styrs av parametern <strong>Kör expansion och krympning två gånger</strong>, som avgör hur många gånger processen för expansion och krympning ska utföras.</p><p>När inställningen är avmarkerad utförs processen för expansion och krympning en gång. När inställningen är markerad utförs processen för expansion och krympning två gånger, vilket resulterar i en extra grad av utjämning av zongränserna.</p><p>Om värdena i alla åtta närliggande celler är samma som bearbetningscellen behåller utdatacellen värdet hos indatacellen.</p>",
		predictUsingRegressionName: "Förutsäg med regression",
		predictUsingRegressionSnip: "Beräknat ett förutsagt raster från rasterindata och en regressionsmodell. Regressionsmodellen är utdatan från geobearbetningsverktyget för raster, <strong>Regressionsmodell för träning av slumpmässiga träd</strong>.",
		predictUsingRegressionDesc: "<p>Regressionsmodellen definieras i Esris regressionsdefinitionsfil (.ecd). Den innehåller all information för ett specifikt dataset eller en uppsättning med dataset, samt regressionsmodellen, och genereras av geobearbetningsverktyget för raster, <strong>Regressionsmodell för träning av slumpmässiga träd</strong>.</p><p>Indata kan vara ett enskilt band, flerband, ett flerdimensionellt raster eller en lista över dessa typer. Typerna för indataraster måste vara av samma rastertyp som tränas av regressionsmodellen.</p><ul><li>När indata är ett flerbandsraster behandlas varje band som en prediktorvariabel. Banden måste vara i samma ordning som flerbandsindatan för träningsverktyget för regressionsmodellen.</li><li>När indata är ett flerdimensionellt raster behandlas varje variabel som en prediktorvariabel, och variabeln måste vara ett enskilt band och ha en tidsdimension. Variabelordningen och namnen måste vara samma som indata från när regressionsmodellen tränades. Utdata är ett flerdimensionellt raster.</li><li>Indata kan vara en lista med objekt. Antalet objekt och ordningen för objekten måste matcha indata från när regressionsmodellen tränades.</li></ul>",
		dimensionalMovingStatisticsName: "Dimensionell glidande statistik",
		dimensionalMovingStatisticsSnip: "Beräknar statistik från ett rörligt fönster med flerdimensionella data längs en angiven dimension.",
		dimensionalMovingStatisticsDesc: "<p>Funktionen Dimensionell glidande statistik beräknar olika statistik inom ett fördefinierat fönster för alla dimensionsvärden längs en dimension. Funkionen tar ett flerdimensionellt rasterlager som indata och skapar ett flerdimensionellt rasterlager som utdata som har samma dimensionella storlek som indatalagret.</p><p>Du kan ange en dimension för vilken dimensionsvärden beaktas vid beräkning. Som standard sker beräkningen längs den första icke-spatiala dimensionen. Du kan även ange en fönsterstorlek genom att ange parametrarna Fönster bakåt och Fönster framåt.</p><p>När statistiktypen är inställd på percentil blir parametrarna Percentilvärde och Interpoleringstyp för percentil tillgängliga. Du kan använda dessa parametrar för att ange percentilen för att beräkna och välja vilken interpoleringstyp som ska användas. När statistiktypen är inställd på Cirkulärt medelvärde blir parametern Cirkulärt radbrytningsvärde tillgänglig. Det cirkulära radbrytningsvärdet används för att konvertera ett linjärt värde till intervallet för ett angivet cirkulärt medelvärde.</p>",
		terrainFlattenFunctionName: "Terrängavplattning",
		terrainFlattenFunctionSnip: "Korrigerar indata för syntetisk aperturradardata (SAR) för radiometriska förvrängningar på grund av topografi.",
		terrainFlattenFunctionDesc: "<p>Funktionen Terrängavplattning korrigerar indata för syntetisk aperturradardata (SAR) för radiometriska förvrängningar på grund av topografi.</p><p>Radarindata måste först kalibreras till beta-noll. Använd verktyget Tillämpa radiometrisk kalibrering för att kalibrera radardata till beta-noll.</p><p>Om DEM som indata inte omfattar hela SAR-datasetet matar verktyget ut NoData-värden för pixlarna utanför DEM-utbredningen för gamma-noll, sigma-noll, spridningsområde och geometriska förvrängningsutdata. För den geometriska förvrängningsmaskens utdata matar verktyget ut obestämda värden för pixlar utanför DEM-utbredningen.</p><p>DEM som indata måste vara i det geografiska koordinatsystemet WGS 1984 (EPSG:4326).</p>",
		createColorCompositeFunctionName: "Skapa färgkombination",
		createColorCompositeFunctionSnip: "Skapar ett trebandsraster från ett flerbandsrasterdataset i vilket varje band kan använda en algebraisk beräkning baserat på bandalgebra.",
		createColorCompositeFunctionDesc: "<p>Rasterfunktionen Skapa färgkombination skapar ett trebandsraster från ett flerbandsrasterdataset i vilket varje band kan använda en algebraisk beräkning baserat på bandalgebra.</p><p>När en bandaritmetisk algoritm definieras kan du ange en algebraisk formel med en rad för varje uttryck för att skapa flerbandsutdata. Operatorerna som stöds är enställig, plus (+), minus (-), gånger (*) och delat med (/).</p><p>Identifiera bandet genom att ange prefixet B eller b för bandnumret när du använder ett band-ID i ett uttryck.</p><p>En vanlig bandkombination som används för syntetisk aperturradar (SAR) i linjära enheter är VV för rött, VH för grönt och VV/VH för blått. Om indata är i decibel ska bandkombinationen vara VV för rött, VH för grönt och VV-VH för blått.</p>",
		surfaceParametersName: "Ytparametrar",
		surfaceParametersSnip: "Bestämmer parametrar för ett ytraster, till exempel lutningsriktning, lutning och flera typer av kurvatur med geodetiska metoder.",
		surfaceParametersDesc: "<p>Funktionen Ytparametrar bestämmer parametrar för ett ytraster, till exempel lutningsriktning, lutning och flera typer av kurvatur med geodetiska metoder.</p><p>Denna funktion kan användas för följande applikationer:</p><ul><li>Beräkna lutningsriktning och lutning med geodetiska metoder.</li><li>Beräkna olika typer av kurvaturer från ett indataraster, till exempel <strong>Tangentialkurvatur (normal kontur)</strong> som karaktäriserar flödets topografiska konvergens och divergens över ytan.</li></ul>",
		leastCostCorridorName: "Billigaste korridor",
		leastCostCorridorSnip: "Beräknar summan av två ackumulerade raster för avståndskostnad med alternativet att tillämpa en tröskel baserat på procentsats eller ackumulerad kostnad.",
		leastCostCorridorDesc: "<p>Indatarastren ska vara avståndsackumulering och utdata för tillbakariktningsraster från funktionen <strong>Avståndsackumulering</strong> eller <strong>Avståndsallokering</strong>. Dessa ska baseras på kostnadsavstånd och samma parameterinställningar ska användas när lager skapas för varje källa. Inga parametrar som beror på inriktning (horisontalfaktor, vertikalfaktor och reseriktning) ska användas när dessa raster skapas.</p><p>Värdena i utdatarastret för korridoren är summan av den ackumulerade kostnaden för att nå en angiven plats med samma enheter som indatarastren för ackumulerad avståndskostnad.</p><p>Om ett angivet<strong>Tröskel</strong>-värde är större än maximal ackumulerad kostnad när de två rastren för avståndsackumulering summeras, kommer utdatarastret för korridoren att täcka samma område som rastren med ackumulerade indata.</p><p>Om ett angivet tröskelvärde är mindre än det minsta värdet i korridorrastret returneras ett varningsmeddelande och utdatarastret är tomt.</p><p>Utdatarastret för korridoren kan innehålla celler med något större ackumulerade kostnader än tröskelvärdet. Det beror på att rastren för tillbakariktning använder celler som är tilldelade något högre kostnader än tröskeln för att koppla frånkopplade celler till korridoren.</p>",
		geometricMedianName: "Geometrisk median",
		geometricMedianSnip: "Funktionen Geometrisk median beräknar den geometriska medianen för pixlar i en tidsserie av multibandsbilder.",
		geometricMedianDesc: "<p>Den här funktionen minskar brus och avvikelser i tidsseriebilder genom att beräkna den geometriska medianpixeln för varje pixelvektor i bildstacken. Algoritmen behåller de spektrala relationerna mellan band i pixelspektrumet, så att utdata kan användas i analys, som vegetationsindex.</p><p>Moln och skuggor bör maskeras med hjälp av datasetets QA-band innan den här funktionen tillämpas.</p><p>Om indatabilden är flyttal, som ytreflektans med värden mellan 0 och 1, bör ett epsilonvärde på 0,001 leda till kvalitetsresultat.</p>"
	},
	rfxArgs: {
		rasterName: "Raster",
		colorSchemeTypeName: "Typ av färgschema",
		colormapName: "Färgschema",
		colormapNameName: "Namn på färgschema",
		colorRampName: "Färgramp",
		contrastOffsetName: "Kontrastförskjutning",
		brightnessOffsetName: "Ljusstyrkeförskjutning",
		methodName: "Metod",
		bandNamesName: "Bandnamn",
		bandWavelengthsName: "Bandvåglängder",
		bandIdsName: "Bandidentifierare",
		missingBandActionName: "Saknad bandåtgärd",
		conversionParametersName: "Konverteringsparametrar",
		hillshadeTypeName: "Terrängskuggningstyp",
		azimuthName: "Azimut",
		altitudeName: "Höjd",
		slopeTypeName: "Skalning",
		zFactorName: "Z-faktor",
		PSPowerName: "Pixelstorlekspotens",
		PSZFactorName: "Pixelstorleksfaktor",
		removeEdgeEffectName: "Inaktivera standardinterpolering av kantpixlar",
		fromUnitName: "Från enhet",
		toUnitName: "Till enhet",
		rasterTypeName: "Typ",
		minName: "Minimum för utdata",
		maxName: "Maximum för utdata",
		minPercentName: "Procentklippning minimum",
		maxPercentName: "Procentklippning maximum",
		numberOfStandardDeviationName: "Antal standardavvikelser",
		sigmoidStrengthLevelName: "Sigmoidstyrkenivå",
		estimateStatsHistogramName: "Beräkna statistik",
		DRAName: "Dynamisk intervalljustering",
		statisticsName: "Statistik",
		histogramsName: "Histogram",
		statisticsHistogramName: "Definiera statistik och histogram",
		computeGammaName: "Autogamma",
		useGammaName: "Använd gamma",
		gammaName: "Gamma",
		inputNamesName: "Namn",
		expressionName: "Uttryck",
		cellsizeTypeName: "Cellstorlekstyp",
		extentTypeName: "Utbredningstyp",
		classifierDefinitionFileName: "Indatadefinitionsfil",
		raster1Name: "Raster1",
		raster2Name: "Raster2",
		raster3Name: "Raster3",
		trueRasterName: "Sant raster",
		falseRasterName: "Falskt raster",
		noDataInterpretationName: "NoData-tolkning",
		noDataValuesName: "NoData-värden",
		includedRangesName: "Inkluderade intervall",
		curvatureTypeName: "Kurvaturtyp",
		rastersName: "Raster",
		attributeTableName: "Tabell",
		attributeTableTypeName: "Tabelltyp",
		rowsName: "Antal rader",
		columnsName: "Antal kolumner",
		kernelName: "Kärna",
		mirrorEdgesName: "Spegelkanter",
		influencesName: "Inflytanden",
		fieldsName: "Fält",
		remapsName: "Ommappningstabell",
		evalFromName: "Utvärderingsskala från",
		evalToName: "Utvärderingsskala till",
		weightsName: "Vikter",
		DEMName: "DEM",
		shortRangeIDWRadiusName: "IDW-radie med kort avstånd",
		maxVoidWidthName: "Maxbredd för tomrum",
		sigmaGaussianName: "Adaptiv utjämning",
		contourTypeName: "Höjdkurvetyp",
		zBaseName: "Z-bas",
		numberOfContoursName: "Antal höjdkurvor",
		contourIntervalName: "Höjdkurveintervall",
		nthContourLineInBoldName: "N:e höjdkurvelinjen i fetstil",
		featureClassName: "Indatageoobjekt",
		classIndexFieldName: "Fält",
		resolveOverlapMethodName: "Metod för att lösa överlappning",
		resamplingTypeName: "Omsamplingstyp",
		inputCellsizeName: "Indatacellstorlek",
		outputCellsizeName: "Utdatacellstorlek",
		pointFeatureClassName: "Seedpunkter",
		maxGrowthRadiusFieldName: "Fält för max tillväxtradie",
		similarityThresholdFieldName: "Fält för likhetsgränsvärde",
		fillValueFieldName: "Fält för fyllningsvärde",
		spectralDetailName: "Spektral detalj [1..20]",
		spatialDetailName: "Geografisk detalj [1..20]",
		minNumPixelsPerSegmentName: "Minsta segmentstorlek i pixlar",
		boundariesOnlyName: "Endast segmentgränser",
		statisticsTypeName: "Statistiktyp",
		fillNoDataOnlyName: "Fyll endast i NoData-pixlar",
		inputDataTypeName: "Datatyp för indata",
		angleReferenceSystemName: "Vinkelreferenssystem",
		outputDataTypeName: "Datatyp för utdata",
		inputSamplePointFeatureClassName: "Indataprov",
		valueFieldName: "Värdefält",
		rasterInfoName: "Rasterinfo",
		interpolationMethodName: "Interpoleringsmetod",
		radiusName: "Radie",
		radianceGainValuesName: "Strålningsförstärkning",
		radianceBiasValuesName: "Snedvridning av strålning",
		reflectedGainValuesName: "Ökning av reflexionsfaktor",
		reflectedBiasValuesName: "Snedvridning av reflektans",
		sunElevationName: "Solhöjd (grader)",
		albedoName: "Albedo",
		scaleFactorName: "Skalfaktor",
		offsetName: "Förskjutning",
		thresholdTypeName: "Tröskelvärdestyp",
		thresholdsName: "Tröskelvärden",
		undefinedClassName: "Odefinierad klass",
		minValueName: "Min.",
		maxValueName: "Max",
		operationName: "Åtgärd",
		clippingTypeName: "Klippningstyp",
		clippingGeometryName: "Klipper geometri/raster",
		extentName: "Utdatautbredning",
		useInputFeatureGeometryName: "Använd indatageoobjekt för geometriklippning",
		remapDefinitionTypeName: "Ommappningsdefinitionstyp",
		inputRangeName: "Indataintervaller",
		outputValuesName: "Utdatavärden",
		noDataRangeName: "NoData-intervaller",
		inputFieldName: "Indatafält",
		outputFieldName: "Utdatafält",
		inputMaxFieldName: "Indatamaxfält (valfritt)",
		remapTableTypeName: "Ommappningstabelltyp",
		allowUnmatchedName: "Tillåt omatchade pixelvärden",
		changeMissingValuesToNoDataName: "Ändra saknade värden till NoData",
		visibleBandIDName: "ID för synligt band",
		infraredBandIDName: "ID för infrarött band",
		scientificOutputName: "Avancerade utdata",
		bandIndexesName: "Bandindex",
		constantName: "Konstant",
		weightName: "Vikt",
		minimumName: "Minimum",
		maximumName: "Maximalt",
		sourceDataName: "Källraster",
		sourceFieldName: "Källfält",
		costRasterName: "Kostnadsraster",
		maxDistanceName: "Maximalt avstånd",
		valueRasterName: "Värderaster",
		costMultiplierName: "Multiplikator att använda på kostnader",
		startCostName: "Startkostnad",
		accumCostResistanceRateName: "Ackumulerad nivå av motståndskostnad",
		capacityName: "Kapacitet",
		travelDirectionName: "Reseriktning",
		cellSizeName: "Cellstorlek",
		populationFieldName: "Befolkningsfält",
		areaUnitsName: "Areaenheter",
		outputValueTypeName: "Utdatacellvärden",
		barriersName: "Indatahinder",
		destinationDataName: "Destinationsraster",
		destinationFieldName: "Destinationsfält",
		pathTypeName: "Vägtyp",
		observerFeaturesName: "Observatörsgeoobjekt",
		analysisMethodName: "Analysmetod",
		analysisTypeName: "Analystyp",
		verticalErrorName: "Vertikalt fel",
		refractivityCoefficientName: "Refraktivitetskoefficient",
		surfaceOffsetName: "Ytförskjutning",
		observerElevationName: "Observatörshöjd",
		observerOffsetName: "Observatörsförskjutning",
		innerRadiusName: "Inre radie",
		innerRadiusIs3DDistanceName: "Innerradien är 3D-avståndet",
		outerRadiusName: "Yttre radie",
		outerRadiusIs3DDistanceName: "Ytterradien är 3D-avståndet",
		horizontalStartAngleName: "Horisontell startvinkel",
		horizontalEndAngleName: "Horisontell slutvinkel",
		verticalUpperAngleName: "Vertikal övre vinkel",
		verticalLowerAngleName: "Vertikal nedre vinkel",
		zoneDataName: "Zonraster",
		zoneFieldName: "Zonfält",
		ignoreNoDataName: "Ignorera NoData i beräkningar",
		temperatureRasterName: "Temperaturraster",
		inTemperatureUnitsName: "Temperaturenheter",
		outHeatIndexTemperatureUnitsName: "Värmeindexenheter",
		relativeHumidityRasterName: "Raster för relativ luftfuktighet",
		outWindChillTemperatureUnitsName: "Vindavkylningsenheter",
		windSpeedRasterName: "Vindhastighetsraster",
		inWindSpeedUnitsName: "Vindhastighetsenheter",
		valueName: "Värde",
		propertyName: "Egenskapsnamn",
		jsonName: "Metadata-JSON",
		zoneTableName: "Zonbaserad attributtabell",
		attributeFieldNames: "Attributfältnamn",
		backgroundName: "Bakgrundsvärde",
		whereClauseName: "Where-sats",
		minimumValueFieldName: "Fältnamn för minimivärde",
		maximumValueFieldName: "Fältnamn för maximivärde",
		outValueFieldName: "Fältnamn för utdatavärde",
		defaultValueName: "Standardutdatavärde",
		conversionMatrixName: "Konverteringsmatris",
		IsPseudoColorOutputName: "Är en pseudofärgutskrift",
		unmappedAsRandomColorName: "Tilldela färg slumpvis till ofyllda pixlar",
		distanceMethodName: "Avståndsmetod",
		flowDirRasterName: "Flödesriktningsraster",
		pourPointName: "Hällpunktsraster",
		pourPointFieldName: "Hällpunktsfält",
		constantZName: "Konstant Z",
		zOffsetName: "Z-offset",
		geoIdName: "Geoid",
		calibrationTypeName: "Kalibreringstyp",
		filterTypeName: "Filtertyp",
		filterSizeName: "Filterstorlek",
		noiseModelName: "Brusmodell",
		noiseVarianceName: "Brusvarians",
		additiveNoiseMeanName: "Additivt brusmedel",
		multiplicativeNoiseMeanName: "Multiplikativt brusmedel",
		numberofLooksName: "Antal granskningar",
		dampingFactorName: "Dämpningsfaktor",
		maskRasterName: "Maskraster",
		nibbleValuesName: "Använd NoData-värden om de är den närmaste grannen",
		nibbleNoDataName: "Nagga NoData-celler",
		zLimitName: "Z-begränsning",
		flowDirectionTypeName: "Flödesriktningstyp",
		weightRasterName: "Viktraster",
		forceEdgeName: "Tvinga alla kantceller att flöda utåt",
		streamRasterName: "Strömningsraster",
		surfaceRasterName: "Ytraster",
		conversionType: "Konverteringstyp",
		distanceRaster1: "Avståndsraster 1",
		distanceRaster2: "Avståndsraster 2",
		costDistanceRaster: "Raster för avståndskostnad",
		costBacklinkRaster: "Raster för bakåtlänkskostnad",
		overridesName: "Åsidosätter",
		fieldName: "Fält",
		signatureFileOrUrl: "Signaturfil eller URL",
		redName: "Rött",
		greenName: "Grönt",
		blueName: "Blått",
		infraredName: "Infrarött",
		panchromaticName: "Pankromatisk",
		multispectralName: "Multispektral",
		pansharpeningType: "Typ av panoreringsskärpning",
		sensorName: "Sensor",
		spatialReferenceName: "Geografisk referens",
		xCellsizeName: "X-cellstorlek",
		yCellsizeName: "Y-cellstorlek",
		xOriginName: "X-registreringspunkt",
		yOriginName: "Y-registreringspunkt",
		percentileName: "Percentilvärde",
		neighborhoodType: "Grannskapstyp",
		widthName: "Bredd",
		heightName: "Höjd över marken",
		startAngleName: "Startvinkel",
		endAngleName: "Slutvinkel",
		neighborhoodValues: "Grannskapsvärden",
		horizontalRaster: "Horisontellt raster",
		horizontalFactor: "Horisontalfaktor",
		verticalRaster: "Vertikalt raster",
		verticalFactor: "Vertikalfaktor",
		streamRaster: "Strömningsraster",
		flowDirRaster: "Flödesriktningsraster",
		numberNeighborCells: "Antal grannceller",
		zoneConnectivity: "Zonanslutning",
		addLinkBehavior: "Lägg till länk",
		excludedValue: "Uteslutet värde",
		constantFillCheck: "Generera fyllningsraster från konstant",
		fillRaster: "Fyllningsraster",
		constantFillValue: "Konstant värde",
		inputBitPositions: "Indatabit",
		outputBitPositions: "Utdatabit",
		distanceTypeName: "Avståndstyp",
		barrierDataName: "Rasterhinder",
		pourPointDataName: "Hällpunktsraster",
		accumulationRasterName: "Flödesackumuleringsraster",
		snapDistanceName: "Snappningsavstånd",
		orderMethodName: "Ordningsmetod",
		directionMeasurementName: "Mätningens riktning",
		processAsMultiband: "Bearbeta som multiband",
		processMultidimensional: "Bearbeta flerdimensionellt",
		forceFlowDirectionConvention: "Tvinga fram flödesriktningskonvention för bakåtlänkraster",
		initialAccumulation: "Inledande ackumulering",
		maximumAccumulation: "Maximal ackumulering",
		sourceLocationBands: "Generera källrad och kolumn som ytterligare band i utdata",
		backDirectionBand: "Generera tillbakariktning som extra band i utdata",
		numberOfCells: "Antal celler",
		zoneValues: "Zonvärden",
		shrinkMethod: "Krympmetod",
		expandMethod: "Expanderingsmetod",
		inputSpectralProfileType: "Spektral profiltyp",
		spectralProfileFileName: "Spektral profil",
		trainingFeatureFileName: "Träningsgeoobjekt",
		nonNegative: "Icke-negativt",
		sumToOne: "Summa till en",
		randomDistribution: "Distribution",
		meanName: "Medelvärde",
		probabilityName: "sannolikhet",
		alphaName: "Alfa",
		betaName: "Betaversion",
		rName: "r",
		nName: "N",
		seed: "Seed",
		randomNumberGenerator: "Slumptalsgenerator",
		cellFactor: "Cellfaktor",
		aggregationType: "Aggregeringsteknik",
		extentHandling: "Utöka utbredningen vid behov",
		trendAnalysisDimensionName: "Dimensionsnamn",
		trendAnalysisType: "Trendtyp",
		harmonicFrequency: "Harmonisk frekvens",
		polynomialOrder: "Polynomordning",
		cycleLengthName: "Cykellängd",
		trendAnalysisRMSE: "RMSE",
		trendAnalysisR2: "R-kvadrat",
		trendAnalysisSlopePValue: "P-värde för lutningskoefficient",
		trendAnalysisSeasonalPeriod: "Årstidsperiod",
		cycleUnitName: "Cykelenhet",
		predictDimensionValues: "Värden",
		dimensionDefinitionType: "Dimensionsdefinition",
		predictDimensionStart: "Start",
		predictDimensionEnd: "Stopp",
		predictDimensionInterval: "Värdeintervall",
		dimensionUnit: "Enhet",
		interpolationCellsizeName: "Interpolationscellstorlek",
		variableName: "Variabler",
		dimensionlessName: "Utan mått",
		mdimDefinition: "Dimensionsdefinition",
		dimensionName: "Mått",
		iterationStart: "Början av första iterationen",
		iterationEnd: "Slutet av första iterationen",
		intervalStart: "Start på intervall",
		intervalEnd: "Slut på intervall",
		stepName: "Steg",
		rangesName: "Intervall",
		minValue: "Minsta värde",
		maxValue: "Maximalt värde",
		changeAnalysisRasterName: "Ändra analysraster",
		changeTypeName: "Ändra typ",
		segmentDate: "Segmentdatum",
		changeDirectionName: "Ändra riktning",
		maxNumChangesName: "Maximalt antal förändringar",
		filterByYear: "Filtrera efter år",
		minimumYear: "Minsta värde",
		maximumYear: "Maximalt värde",
		filterByDuration: "Filtrera efter varaktighet",
		minimumDuration: "Lägsta varaktighet",
		maximumDuration: "Maximal varaktighet",
		filterByMagnitude: "Filtrera efter magnitud",
		minimumMagnitude: "Lägsta magnitud",
		maximumMagnitude: "Maximal magnitud",
		filterByStartValue: "Filtrera efter startvärde",
		minimumStartValue: "Minimalt startvärde",
		maximumStartValue: "Maximalt startvärde",
		filterByEndValue: "Filtrera efter slutvärde",
		minimumEndValue: "Minimalt slutvärde",
		maximumEndValue: "Maximalt slutvärde",
		modelTypeName: "Modelltyp",
		fromRasterName: "Från raster",
		toRasterName: "Till raster",
		computeChangeMethod: "Metod för Beräkna förändring",
		fromClassValues: "Från klassvärden (exempel: 2 5)",
		toClassValues: "Till klassvärden (exempel: 2 5)",
		keepMethod: "Filtermetod",
		useColorMethod: "Definiera övergångsfärger",
		detectChangeBands: "Band för att identifiera ändring (med början från 0)",
		tmaskBands: "Band för tidsbestämd maskning (med början från 0)",
		chiSquaredThreshold: "Chikvadrattröskel för Identifiera förändringar",
		minAnomaly: "Lägsta antal sammanhängande anomaliobservationer",
		updatingFrequency: "Frekvens för updateringsinpassning (i år)",
		distanceAccumulationRasterName: "Avståndsackumuleringsraster",
		costBackdirectionRasterName: "Tillbakariktnings- eller flödesriktningsraster",
		rasterCollectionName: "Rastersamling",
		itemFunctionName: "Objektfunktion",
		aggregationFunctionName: "Aggregeringsfunktion",
		processingFunctionName: "Bearbetar funktion",
		aggregationDefinitionName: "Aggregeringsdefinition",
		queryGeometryName: "Frågegeometri",
		factorFunctionZeroFactor: "Nollfaktor",
		factorFunctionCutAngle: "Klippvinkel",
		factorFunctionSideFactor: "Sidofaktor",
		factorFunctionSlope: "Lutning",
		factorFunctionLowCutAngle: "Låg klippvinkel",
		factorFunctionHighCutAngle: "Hög klippvinkel",
		factorFunctionCosPower: "Cosinus-faktor",
		factorFunctionSecPower: "Sekant-faktor",
		factorFunctionTablePath: "Tabellsökväg",
		processingBand: "Bearbetar band",
		processingBandName: "Bearbetar bandnamn",
		snappingDate: "Snappningsdatum",
		maxNumSegments: "Maximalt antal segment",
		vertexCountOvershoot: "Översläng för antalet brytpunkter",
		spikeThreshold: "Tröskelvärde för avvikelser",
		recoveryThreshold: "Tröskelvärde för återhämtning",
		minNumObs: "Lägsta antal observationer",
		pValueThreshold: "Tröskelvärde för P-värde",
		bestModelProportion: "Bästa modellproportion",
		preventOneYearRecovery: "Förhindra ett års återställning",
		recoveryIncreaseTrend: "Återställningen har en ökande trend",
		outputOtherBands: "Mata ut andra band",
		sortType: "Sorteringstyp",
		numberOfRuns: "Kör expansion och krympning två gånger",
		percentileValue: "Percentilvärde",
		percentileInterpolationType: "Interpoleringstyp för percentil",
		rasterInfoProperty: "Egenskap",
		rasterInfoValue: "Värde",
		rasterInfoColumns: "Kolumner",
		rasterInfoRows: "Rader",
		rasterInfoBandCount: "Antal band",
		rasterInfoPixelSizeX: "Cellstorlek X",
		rasterInfoPixelSizeY: "Cellstorlek Y",
		rasterInfoPixelType: "Pixeltyp",
		rasterExtentTop: "Övre",
		rasterExtentBottom: "Längst ned",
		rasterExtentLeft: "Vänster",
		rasterExtentRight: "Höger",
		rasterStatisticsNotCalculated: "Statistiken har inte beräknats.",
		spatialReferenceProjection: "Projektion",
		spatialReferenceWkid: "WKID",
		spatialReferenceLatestWkid: "Föregående WKID",
		spatialReferenceWkt: "WKT",
		spatialReferenceVcsWkid: "VCSWKID",
		spatialReferenceLatestVcsWkid: "Föregående VCSWKID",
		spatialReferenceAuthority: "Utfärdare",
		spatialReferenceLinearUnit: "Linjär enhet",
		spatialReferenceAngularUnit: "Vinkelenhet",
		spatialReferenceFalseEasting: "Falsk ostlig kurs",
		spatialReferenceFalseNorthing: "Falsk nordlig kurs",
		spatialReferenceCentralMeridian: "Centralmeredian",
		spatialReferencePrimeMeridian: "Nollmeridian",
		spatialReferenceStandardParallel1: "Standardparallell 1",
		spatialReferenceStandardParallel2: "Standardparallell 2",
		spatialReferenceLatitudeOfOrigin: "Ursprungslatitud",
		spatialReferenceAuxiliarySphereType: "Typ av tilläggssfär",
		spatialReferenceDatum: "Datum",
		spatialReferenceSpheroid: "Rotationsellipsoid",
		spatialReferenceSemimajorAxis: "Halv storaxel",
		spatialReferenceSemiminorAxis: "Halv lillaxel",
		spatialReferenceInverseFlattening: "Inverterad avplattning",
		inputDefinitionFileName: "Indatadefinitionsfil",
		deleteName: "Ta bort",
		addVariableName: "Lägg till variabel",
		maxNumPixelsPerSegment: "Maximal segmentstorlek i pixlar",
		forwardWindowName: "Fönster framåt",
		backwardWindowName: "Fönster bakåt",
		noDataHandlingName: "NoData-hantering",
		circularWrapValueName: "Cirkulärt radbrytningsvärde",
		fromClassNameFieldName: "Fältnamn för klassnamn i Från raster",
		toClassNameFieldName: "Fältnamn för klassnamn i Till raster",
		targetRasterName: "Målraster",
		circularWrapValue: "Cirkulärt radbrytningsvärde",
		bandIndexesR: "Rött uttryck",
		bandIndexesG: "Grönt uttryck",
		bandIndexesB: "Blått uttryck",
		exampleName: "Exempel",
		inputName: "Indata",
		outputName: "Utdata",
		optionalName: "Valfritt",
		browseDefinitionFile: "Bläddra efter definitionsfil",
		selectDefinitionFile: "Välj indatadefinitionsfil",
		inputDefinitionURL: "Indatadefinitionsfil-URL",
		enterDefinitionFileURL: "Ange destinationsfil-URL",
		browseXMLFile: "Bläddra efter XML-fil",
		selectStatsFile: "Välj statistik- och histogramfil",
		enterXMLFileURL: "Ange XML-fil-URL",
		xmlFileURL: "XML-fil-URL",
		circularCalculation: "Beräkna cirkulär statistik",
		localSurfaceType: "Lokal yttyp",
		surfaceParameterType: "Parametertyp",
		neighborhoodDistance: "Avstånd närområde",
		useAdaptiveNeighborhood: "Använd adaptivt närområde",
		outputSlopeType: "Utdatalutningsmätning",
		projectAzimuths: "Geodetiska azimuter för projekt",
		useEquatorialAspect: "Använd ekvatoriell aspekt",
		zUnit: "Z-enhet",
		analysisMask: "Analysmask",
		stdDeviation: "Standardavvikelse",
		"true": "Sant",
		"false": "Falskt",
		costDistanceRaster1: "Indataraster för ackumulerad avståndskostnad 1",
		costDistanceRaster2: "Indataraster för ackumulerad avståndskostnad 2",
		threshold: "Tröskel",
		thresholdMethod: "Tröskelmetod",
		directionRaster1: "Indatatillbakafördelningsraster 1",
		directionRaster2: "Indatatillbakafördelningsraster 2",
		maxIterations: "Maximalt antal upprepningar",
		epsilon: "Epsilon"
	},
	enumLabels: {
		attributeTableTypeManual: "Manuell",
		attributeTableTypeExternal: "Extern",
		clrSchemeTypeColormap: "Färgschema",
		clrSchemeTypeColorRamp: "Färgramp",
		colormapTypeElevation: "Höjd över havet",
		colormapTypeGray: "Grå",
		colormapTypeNDVI: "NDVI",
		colormapTypeNDVI2: "NDVI2",
		colormapTypeNDVI3: "NDVI3",
		colormapTypeRandom: "Slumpmässig",
		none: "Inga",
		slopeTypeAdjusted: "Justerad",
		slopeTypeDegree: "Grad",
		slopeTypePercentRise: "Procentökning",
		slopeTypeScaled: "Skalad",
		stretchTypeMinMax: "MinMax",
		stretchTypePercentMinMax: "PercentMinMax",
		stretchTypeSigmoid: "Sigmoid",
		stretchTypeStdDev: "StdDev",
		hillshadeTypeSimple: "Traditionell",
		hillshadeTypeMultidirectional: "Flerriktad",
		bandComboByNames: "Bandnamn",
		bandComboByWavelength: "Bandvåglängder",
		bandComboByIDs: "Bandidentifierare",
		missingBandActionBestMatch: "Bästa matchning",
		missingBandActionFail: "Misslyckad",
		unitTypeCelsius: "Celsius",
		unitTypeCentimeters: "Centimeter",
		unitTypeDecimeters: "Decimeter",
		unitTypeFahrenheit: "Fahrenheit",
		unitTypeFeet: "Fot",
		unitTypeFeetPerSec: "Fot per sekund (ft/s)",
		unitTypeInches: "Tum",
		unitTypeKelvin: "Kelvin",
		unitTypeKilometers: "Kilometer",
		unitTypeKmsPerHour: "Kilometer i timmen (km/h)",
		unitTypeKnots: "Knop (kn)",
		unitTypeMeters: "Meter",
		unitTypeMetersPerSec: "Meter per sekund (m/s)",
		unitTypeMiles: "Mile",
		unitTypeMilesPerHour: "Miles i timmen (mph)",
		unitTypeMillimeters: "Millimetrar",
		unitTypeNauticalMiles: "Nautiska mil",
		unitTypeYards: "Yard",
		unitTypeDecimalDegrees: "Decimalgrader",
		unitTypePoints: "Punkter",
		unitTypeUnknown: "Okänt",
		unitTypeSqMapUnits: "Kartans kvadratenheter",
		unitTypeSqMiles: "Kvadratmil (engelska)",
		unitTypeSqKms: "Kvadratkilometer",
		unitTypeAcres: "Tunnland",
		unitTypeHectares: "Hektar",
		unitTypeSqYards: "Square Yards",
		unitTypeSqFt: "Kvadratfot",
		unitTypeSqInches: "Kvadrattum",
		unitTypeSqMts: "Kvadratmeter",
		unitTypeSqCms: "Kvadratcentimeter",
		unitTypeSqMms: "Kvadratmillimeter",
		cellsizeTypeFirst: "Första av",
		cellsizeTypeMin: "Min av",
		cellsizeTypeMax: "Max av",
		cellsizeTypeMean: "Medelvärde av",
		cellsizeTypeLast: "Sista av",
		extentTypeFirst: "Första av",
		extentTypeIntersection: "Skärning av",
		extentTypeUnion: "Union av",
		extentTypeLast: "Sista av",
		noDataInterpretAny: "Matcha något",
		noDataInterpretAll: "Matcha alla",
		curvatureTypeStandard: "Standard",
		curvatureTypeProfile: "Profil",
		curvatureTypePlanform: "Planform",
		filterTypeLineDetectionHorizontal: "Linjeidentifiering horisontell",
		filterTypeLineDetectionVertical: "Linjeidentifiering vertikal",
		filterTypeLineDetectionLeftDiagonal: "Linjeidentifiering vänster diagonal",
		filterTypeLineDetectionRightDiagonal: "Linjeidentifiering höger diagonal",
		filterTypeGradientNorth: "Toning nord",
		filterTypeGradientWest: "Toning väst",
		filterTypeGradientEast: "Toning ost",
		filterTypeGradientSouth: "Toning syd",
		filterTypeGradientNorthEast: "Toning nordost",
		filterTypeGradientNorthWest: "Toning nordväst",
		filterTypeSmoothArithmeticMean: "Jämnt aritmetiskt medelvärde",
		filterTypeSmoothing3x3: "Utjämning 3x3",
		filterTypeSmoothing5x5: "Utjämning 5x5",
		filterTypeSharpening3x3: "Skärpning 3x3",
		filterTypeSharpening5x5: "Skärpning 5x5",
		filterTypeLaplacian3x3: "Laplace 3x3",
		filterTypeLaplacian5x5: "Laplace 5x5",
		filterTypeSobelHorizontal: "Sobel horisontell",
		filterTypeSobelVertical: "Sobel vertikal",
		filterTypeSharpen: "Gör skarpare",
		filterTypeSharpen2: "Skärp mer",
		filterTypePointSpread: "Punktspridning",
		userDefined: "Användardefinierad",
		ContourTypeLines: "Höjdkurvelinjer",
		ContourTypeFill: "Höjdkurvefyllning",
		ContourTypeSmoothOnly: "Endast jämn yta",
		rasterizeFirst: "Första",
		rasterizeLast: "Sista",
		rasterizeSmallest: "Minsta",
		rasterizeLargest: "Största",
		resamplingTypeNearest: "Närmsta granne",
		resamplingTypeBilinear: "Bilinjär interpolering",
		resamplingTypeCubic: "Kubisk interpolation",
		resamplingTypeMajority: "Majoritet",
		resamplingTypeBilinearPlus: "Bilinjär interpolering plus",
		resamplingTypeGauss: "Gaussisk oskärpa",
		resamplingTypeGaussPlus: "Gaussisk oskärpa plus",
		resamplingTypeAverage: "Genomsnitt",
		resamplingTypeMinimum: "Minimum",
		resamplingTypeMaximum: "Maximalt",
		resamplingTypeVectorAvg: "Vektorgenomsnitt",
		minimum: "Minimum",
		maximum: "Maximalt",
		mean: "Medelvärde",
		stdDeviation: "Standardavvikelse",
		uvMagDirTypeUV: "U-V",
		uvMagDirTypeMagDir: "Magnitud-riktning",
		unknown: "Okänt",
		angleRefSysGeographic: "Geografiska",
		angleRefSysArithmetic: "Aritmetiskt",
		interpolateIrregularDataNearest: "Närmsta granne",
		interpolateIrregularDataBilinear: "Bilinjär",
		interpolateIrregularDataTinningLinear: "Linjär tinning",
		interpolateIrregularDataTinningNaturalNeighbor: "Naturlig granne",
		interpolateIrregularDataTinningIDW: "Inverterat viktat avstånd",
		esriRasterThresholdTypeConstant: "Konstant",
		esriRasterThresholdTypeOtsu: "Otsu",
		esriRasterThresholdTypeTsai: "Tsai",
		esriRasterThresholdTypeKapur: "Kapur",
		esriRasterThresholdTypeKittler: "Kittler",
		esriRasterThresholdTypeRosin: "Rosin",
		argStatsTypeMax: "Arg max",
		argStatsTypeMin: "Arg min",
		argStatsTypeMedian: "Arg median",
		argStatsTypeDuration: "Varaktighet",
		arithmeticOpPlus: "Plus",
		arithmeticOpMinus: "Minus",
		arithmeticOpMultiply: "Multiplicera",
		arithmeticOpDivide: "Fördela",
		arithmeticOpPower: "Potens",
		arithmeticOpMode: "Läge",
		clipTypeOutside: "Klipp utanför",
		clipTypeInside: "Klipp innanför",
		yes: "Ja",
		no: "Nej",
		densities: "Densiteter",
		expectedCounts: "Förväntade antal",
		planar: "Plan",
		geodesic: "Geodetisk",
		eachCell: "Varje cell",
		eachZone: "Varje zon",
		bestSingle: "Bästa enskilda",
		allSightlines: "Alla siktlinjer",
		perimeterSightlines: "Siktlinjer för omkrets",
		frequency: "Frekvens",
		observers: "Observatörer",
		majority: "Majoritet",
		median: "Median",
		minority: "Minoritet",
		percentile: "Percentil",
		range: "Intervall",
		sum: "Summa",
		variety: "Variation",
		ndvi: "NDVI",
		savi: "SAVI",
		bandArithmeticMethodTSAVI: "Transformerad SAVI",
		bandArithmeticMethodMSAVI: "Modifierad SAVI",
		bandArithmeticMethodSultan: "Sultans formel",
		gemi: "GEMI",
		pvi: "PVI",
		gvi: "GVI (Landsat TM)",
		vari: "VARI",
		sr: "SR",
		gndvi: "GNDVI",
		ndvire: "NDVIre",
		srre: "SRre",
		mtvi2: "MTVI2",
		rtviCore: "RTVIcore",
		cire: "CIre",
		cig: "CIg",
		ndwi: "NDWI",
		evi: "EVI",
		ironOxide: "Järnoxid",
		ferrousMinerals: "Järnhaltiga mineraler",
		clayMinerals: "Lermineraler",
		wndwi: "WNDWI",
		bai: "BAI",
		mndwi: "MNDWI",
		nbr: "NBR",
		ndbi: "NDBI",
		ndmi: "NDMI",
		ndsi: "NDSI",
		localSquareRoot: "Kvadratrot",
		localACos: "ACos",
		localASin: "ASin",
		localATan: "ATan",
		localATanH: "ATanH",
		localAbs: "Abs",
		localBitwiseNot: "Bitvist Not",
		localBooleanNot: "Booleskt Not",
		localCos: "Cos",
		localCosH: "CosH",
		localExp: "Går ut",
		localExp10: "Exp10",
		localExp2: "Exp2",
		localInt: "Int",
		localIsNull: "Är noll",
		localFloat: "Flytande",
		localLn: "Ln",
		localLog10: "Log10",
		localLog2: "Log2",
		localNegate: "Negera",
		localRoundDown: "Avrunda nedåt",
		localRoundUp: "Avrunda uppåt",
		localSin: "Sin",
		localSinH: "SinH",
		localTan: "Tan",
		localTanH: "TanH",
		localACosH: "ACosH",
		localASinH: "ASinH",
		localPlus: "Plus",
		localMinus: "Minus",
		localTimes: "Gånger",
		localPower: "Potens",
		localBitwiseAnd: "Bitvist And",
		localBitwiseLeftShift: "Bitvist vänsterskift",
		localBitwiseOr: "Bitvist Or",
		localBitwiseRightShift: "Bitvist högerskift",
		localBitwiseXor: "Bitvist Xor",
		localBooleanAnd: "Booleskt And",
		localBooleanOr: "Booleskt Or",
		localBooleanXor: "Booleskt Xor",
		localDivide: "Fördela",
		localEqualTo: "Lika med",
		localGreaterThan: "Större än",
		localGreaterThanEqual: "Större än eller lika med",
		localLessThan: "Mindre än",
		localLessThanEqual: "Mindre än eller lika med",
		localMod: "Mod",
		localNotEqual: "Inte lika med",
		localATan2: "ATan2",
		localSquare: "Fyrkant",
		localSetNull: "Sätt noll",
		remapDefTypeList: "Lista",
		remapDefTypeTable: "Tabell",
		remapTableTypeSimple: "Enkel",
		remapTableTypeDynamic: "Dynamisk",
		remapTableTypeReassignment: "Omtilldelning",
		geomCorrectionByConstZ: "Använd konstant Z",
		geomCorrectionByDEM: "Använd DEM",
		radarCalibBetaNought: "Beta-noll",
		radarCalibSigmaNought: "Sigma-noll",
		radarCalibGammaNought: "Gamma-noll",
		speckleFilterTypeLee: "Lee-filter",
		speckleFilterTypeEnhancedLee: "Förstärkt Lee-filter",
		speckleFilterTypeFrost: "Frostfilter",
		speckleFilterTypeKuan: "Kuan-filter",
		speckleNoiseModelMul: "Multiplikativt brus",
		speckleNoiseModelAdd: "Additivt brus",
		speckleNoiseModelAddnMul: "Additivt och multiplikativt brus",
		mosaicOpTypeFirst: "Första",
		mosaicOpTypeLast: "Sista",
		mosaicOpTypeMin: "Min.",
		mosaicOpTypeMax: "Max",
		mosaicOpTypeMean: "Medelvärde",
		mosaicOpTypeBlend: "Blandning",
		mosaicOpTypeSum: "Summa",
		integer: "Heltal",
		rfxD8: "D8",
		rfxMFD: "MFD",
		dinf: "Dinf",
		vertical: "Vertikal",
		horizontal: "Horisontell",
		localCellStatisticsMajority: "Majoritet",
		localCellStatisticsMax: "Maximalt",
		localCellStatisticsMean: "Medelvärde",
		localCellStatisticsMedian: "Median",
		localCellStatisticsMin: "Minimum",
		localCellStatisticsMinority: "Minoritet",
		localCellStatisticsRange: "Intervall",
		localCellStatisticsStdDev: "Standardavvikelse",
		localCellStatisticsSum: "Summa",
		localCellStatisticsVariety: "Variation",
		localCellStatisticsMajorityIgnoreND: "Majoritet (ignorera NoData)",
		localCellStatisticsMaxIgnoreND: "Maximum (ignorera NoData)",
		localCellStatisticsMeanIgnoreND: "Medel (ignorera NoData)",
		localCellStatisticsMedianIgnoreND: "Median (ignorera NoData)",
		localCellStatisticsMinIgnoreND: "Minimum (ignorera NoData)",
		localCellStatisticsMinorityIgnoreND: "Minoritet (ignorera NoData)",
		localCellStatisticsRangeIgnoreND: "Intervall (ignorera NoData)",
		localCellStatisticsStdDevIgnoreND: "Standardavvikelse (ignorera NoData)",
		localCellStatisticsSumIgnoreND: "Summa (ignorera NoData)",
		localCellStatisticsVarietyIgnoreND: "Variation (ignorera NoData)",
		localCellStatisticsTypePercentileIgnoreND: "Percentil (ignorera NoData)",
		fromSource: "Från källa",
		toSource: "Till källa",
		colorspaceConversionRgbToHsv: "RGB till HSV",
		colorspaceConversionHsvToRgb: "HSV till RGB",
		pansharpenTypeIHS: "IHS",
		pansharpenTypeBrovey: "Brovey",
		pansharpenTypeEsri: "Esri",
		pansharpenTypeMean: "Medelvärde",
		pansharpenTypeGramSchmidt: "Gram-Schmidt",
		rectangleNeighborhood: "Rektangel",
		circleNeighborhood: "Cirkel",
		annulusNeighborhood: "Ring",
		wedgeNeighborhood: "Kil",
		irregularNeighborhood: "Oregelbunden",
		weightNeighborhood: "Vikt",
		four: "Fyra",
		eight: "Åtta",
		within: "Inom",
		cross: "Kors",
		addLink: "Lägg till länk",
		noLink: "Ingen länk",
		weightedMean: "Viktat medelvärde",
		ls8QCBitPatternCirrus: "Landsat 8 – cirrus",
		ls8QCBitPatternCloud: "Landsat 8 – moln",
		ls8QCBitPatternCloudShadow: "Landsat 8 – molnskugga",
		ls8QCBitPatternDesignatedFill: "Landsat 8 – avsedd fyllning",
		ls8QCBitPatternDroppedFrame: "Landsat 8 – utelämnad ram",
		ls8QCBitPatternSnowIce: "Landsat 8 – snö/is",
		ls8QCBitPatternTerrainOcclusion: "Landsat 8 – terrängocklusion",
		ls8QCBitPatternVegetation: "Landsat 8 – växtlighet",
		ls8QCBitPatternWater: "Landsat 8 – vatten",
		downStream: "Nedströms",
		upStream: "Uppströms",
		strahler: "STRAHLER",
		shreve: "SHREVE",
		currentSlice: "Aktuell sektor",
		allSlices: "Alla sektorer",
		expandDistance: "AVSTÅND",
		expandMorphological: "MORFOLOGISKT",
		spectralProfileFile: "Spektral profil",
		trainingFeatureFile: "Träningsgeoobjekt",
		randomDistributionTypeUniform: "Enhetlig",
		randomDistributionTypeUniformInteger: "Heltal",
		randomDistributionTypeNormal: "Normal",
		randomDistributionTypeExponential: "Exponentiell",
		randomDistributionTypePoisson: "Poisson",
		randomDistributionTypeGamma: "Gamma",
		randomDistributionTypeBinomial: "Binomial",
		randomDistributionTypeGeometric: "Geometriskt",
		randomDistributionTypeNegativeBinomial: "Negativ binomial",
		randomGeneratorTypeStandardCRand: "Standard C Rand",
		randomGeneratorTypeAlgorithmACM599: "ACM samlad algoritm 599",
		randomGeneratorTypeMersenneTwister: "Mersenne Twister",
		sumName: "Summa",
		medainName: "Median",
		trendLinear: "Linjär",
		trendHarmonic: "Harmonisk",
		trendPolynomial: "Polynom",
		trendMannKendall: "Mann-Kendall",
		trendSeasonalKendall: "Säsongsberoende Kendall",
		dimensionByValue: "Efter värde",
		dimensionByInterval: "Efter intervall",
		mdimDefTypeAll: "Alla",
		mdimDefTypeByValues: "Efter värden",
		mdimDefTypeByRanges: "Efter intervall",
		mdimDefTypeByIteration: "Efter iteration",
		mdimDefTypeByInterval: "Efter intervall",
		mdimDefTypeByTargetRaster: "Efter målraster",
		esriTimeUnitsHours: "Timmar",
		esriTimeUnitsDays: "Dagar",
		esriTimeUnitsWeeks: "Veckor",
		esriTimeUnitsMonths: "Månader",
		esriTimeUnitsYears: "År",
		esriTimeIntervalKeywordHourly: "Varje timma",
		esriTimeIntervalKeywordDaily: "Dagligen",
		esriTimeIntervalKeywordWeekly: "Veckovis",
		esriTimeIntervalKeywordDekadly: "Vart tionde år",
		esriTimeIntervalKeywordPentadly: "Vart femte år",
		esriTimeIntervalKeywordMonthly: "Månadsvis",
		esriTimeIntervalKeywordQuarterly: "Varje kvartal",
		esriTimeIntervalKeywordYearly: "Årligen",
		esriTimeIntervalKeywordRecurringDaily: "Återkommer dagligen",
		esriTimeIntervalKeywordRecurringWeekly: "Återkommer veckovis",
		esriTimeIntervalKeywordRecurringMonthly: "Återkommer månadsvis",
		esriTimeIntervalKeywordRecurringQuarterly: "Återkommer kvartalsvis",
		aggDefTypeAll: "Alla",
		aggDefTypeIntervalKeyword: "Intervallnyckelord",
		aggDefTypeIntervalValue: "Intervallvärde",
		aggDefTypeIntervalRanges: "Intervallområden",
		latestChange: "Tid för senaste förändring",
		earliestChange: "Tid för tidigaste förändring",
		largestChange: "Tid för största förändring",
		numberOfChanges: "Antal förändringar",
		longestChange: "Tidpunkt för längsta ändring",
		shortestChange: "Tidpunkt för kortaste ändring",
		fastestChange: "Tidpunkt för snabbaste ändring",
		slowestChange: "Tidpunkt för långsammaste ändring",
		allChanges: "Alla",
		increaseChanges: "Öka",
		decreaseChanges: "Minska",
		segmentBeginning: "Början på segmentet",
		segmentEnd: "Slut på segmentet",
		esriComputeChangeMethodDifference: "Skillnad",
		esriComputeChangeMethodRelativeDifference: "Relativ skillnad",
		esriComputeChangeMethodCategorical: "Kategorisk skillnad",
		esriComputeChangeMethodMultispectralEuclideanDistance: "Spektralt euklidiskt avstånd",
		esriComputeChangeMethodMultispectralAngularDifference: "Spektral vinkelskillnad",
		esriComputeChangeMethodMultispectralAxisWithBiggestChange: "Band med störst förändring",
		esriComputeChangeKeepAll: "Behåll samtliga",
		esriComputeChangeKeepChangedOnly: "Behåll endast ändrade pixlar",
		esriComputeChangeKeepUnchangedOnly: "Behåll endast oförändrade pixlar",
		esriComputeChangeUseColorAverage: "Genomsnittliga från- och till-färger",
		esriComputeChangeUseColorFrom: "Använd från-färger",
		esriComputeChangeUseColorTo: "Använd till-färger",
		factorFunctionBinary: "Binär",
		factorFunctionForward: "Framåt",
		factorFunctionLinear: "Linjär",
		factorFunctionInvLinear: "Omvänd linjär",
		factorFunctionTable: "Tabell",
		factorFunctionSymLinear: "Symmetrisk linjär",
		factorFunctionSymInvLinear: "Symmetrisk omvänd linjär",
		factorFunctionCos: "Cosinus",
		factorFunctionSec: "Sekant",
		factorFunctionCosSec: "Cosinus sekant",
		factorFunctionSecCos: "Sekant cosinus",
		noSort: "Sortera inte",
		ascend: "Stigande",
		descend: "Fallande",
		autoDetect: "Autoidentifiering",
		nearest: "Närmaste",
		linear: "Linjär",
		esriMonthJanuary: "Januari",
		esriMonthFebruary: "Februari",
		esriMonthMarch: "Mars",
		esriMonthApril: "April",
		esriMonthMay: "Maj",
		esriMonthJune: "Juni",
		esriMonthJuly: "Juli",
		esriMonthAugust: "Augusti",
		esriMonthSeptember: "September",
		esriMonthOctober: "Oktober",
		esriMonthNovember: "November",
		esriMonthDecember: "December",
		dimensionalMovingIgnoreNoData: "Data",
		dimensionalMovingPropagateNoData: "NoData",
		dimensionalMovingFillOnlyNoData: "Fyll i NoData",
		circularMean: "Cirkulärt medelvärde",
		circularName: "Cirkulär",
		arithmeticName: "Aritmetiskt",
		slopeName: "Lutning",
		aspectName: "Lutningsriktning",
		meanCurvature: "Medelkurvatur",
		profileCurvature: "Profilkurvatur (normal lutningslinje)",
		tangentialCurvature: "Tangentialkurvatur (normal kontur)",
		planCurvature: "Plankurvatur (projicerad kontur)",
		contourGeodesicTorsion: "Konturgeodetisk torsion",
		gaussianCurvature: "Gaussisk kurvatur",
		casoratiCurvature: "Casorati-kurvatur",
		localSurfaceTypeQuadratic: "Kvadratisk",
		localSurfaceTypeBiquadratic: "Bikvadratisk",
		thresholdNoThreshold: "Ingen tröskel",
		thresholdPercentLeastCost: "Procent av lägsta kostnad",
		thresholdAccumulativeCost: "Ackumulerad kostnad",
		clrmapTypeHillshade: "Terrängskuggning"
	},
	categoryLabels: {
		sourceCharacteristics: "Källgrunddrag",
		neighborhoodSettings: "Grannskapsinställningar",
		statistics: "Statistik",
		gamma: "Gamma",
		viewshedParameters: "Parametrar för siktområde",
		observerParameters: "Observatörsparametrar",
		irregularDataInterpolation: "Oregelbunden datainterpolation",
		modelStatistics: "Modellstatistik",
		aggregationDef: "Aggregeringsdefinition",
		filterByAttributes: "Filtrera efter attribut",
		percentileName: "Percentil",
		rasterInfo: "Rasterinformation",
		extent: "Utbredning",
		spatialReference: "Geografisk referens"
	},
	outputRasterHelpTexts: {
		outputName: "<p>Namnet på lagret som skapas och läggs till i kartan.</p>",
		resultType: "<p>Typ av utdata som skapas. Utdata kan vara bildlager i tileform eller dynamiska bildlager.</p>",
		saveResultIn: "<p>Namnet på mappen i <b>Mitt innehåll</b> där resultatet ska sparas.</p>"
	},
	analysisEnvironmentsHelpTexts: {
		description: "<p>Miljöinställningar för analys i Map Viewer. </p>",
		outSR: "<p>Anger koordinatsystem för analysen och resultatlagret.</p>",
		extent: "<p>Anger det område som ska användas för analys.</p>",
		snapRaster: "<p>Justerar utbredningen för utdata så att den matchar celljusteringen för det angivna snapprasterlagret.</p>",
		cellSize: "<p>Anger cellstorlek eller upplösning som ska användas för analys och för att skapa utdatarasterlagret.</p>",
		mask: "<p>Anger ett masklager i vilket endast de celler som ligger inom maskområdet kommer att användas för analys.</p>",
		resamplingMethod: "<p>Anger hur pixelvärden ska interpoleras när indata- och utdatalager inte ordnas korrekt.</p>"
	},
	mainGenStrings: {
		unsupportedDataType: "Typen stöds inte",
		currentlyUnsupported: " En standardredigerare för ${missingType} är väntande men kommer snart. Temporär platshållartextruta för att ange strängbaserade indata.",
		unsupportedOverrideWarning: "En komponent för åsidosättningsredigerare som ger en bättre användarupplevelse för arbete med följande parameter/parametrar är väntande men kommer snart:",
		overrideWidgetMissing: "Komponent för åsidosättningsredigerare saknas!",
		uiIncomplete: "Jobbinlämningen misslyckades. Funktionen kan inte köras eftersom vissa av de obligatoriska fälten är ofullständiga eller saknas i gränssnittet.",
		count: "Antal",
		selectVariables: "Välj variabler",
		selectFeature: "Välj ett geoobjektlager",
		greaterThanErrorMessage: "Indataantalet måste vara större än ${min}",
		lesserThanErrorMessage: "Indataantalet måste vara lägre än ${max}",
		greaterThanOrEqualErrorMessage: "Indataantalet måste vara större än eller lika med ${min}",
		lesserThanOrEqualErrorMessage: "Indataantalet måste vara lägre än eller lika med ${max}",
		allowScalar: "Välj ett lager eller ange en konstant",
		selectField: "Välj fält",
		parameterRequired: "Denna parameter är obligatorisk.",
		enterAValue: "Ange ett värde...",
		invalidInput: "Det angivna värdet är ogiltigt.",
		itemNotFound: "Objektet finns inte eller är inte tillgängligt.",
		itemPermissionDenied: "Du har inte åtkomstbehörighet till det här objektet.",
		layerNotAvailable: "Det gick inte att läsa in lagret ${layerName}.",
		multipleLayersNotAvailable: "Det gick inte att läsa in lagret ${layerName} och andra.",
		learnMoreLabel: "Läs mer",
		fieldNotAvailable: "Det gick inte att läsa in fältet.",
		allowAnalysis: "Analys är inte tillåtet i bildtjänsten.",
		allowAnalysisReason: "Ett eller flera lager från kartan listas inte här eftersom de inte tillåter analys.",
		learnMoreText: "Läs mer",
		atLeastOneRasterInput: "Minst ett indatalager ska vara ett rasterlager.",
		browseAnalysisLayers: "Bläddra bland lager",
		activeMapViewExtent: "Använd aktuell kartutbredning",
		chooseRaster: "Välj Klipper raster",
		chooseGeometry: "Välj Klippningsgeometri",
		resultType: "Resultattyp",
		saveInFolder: "Spara i mapp",
		outputName: "Utdatanamn",
		outputLayerType: "Lagertyp för utdata",
		dynamicImageryLayer: "Dynamiskt bildlager",
		tiledImageryLayer: "Bildlager i tileform",
		custom: "Anpassat",
		loading: "Läser in...",
		layerMissing: "Ett eller flera lager från kartan listas inte här eftersom de inte tillåter analys. Lär dig mer.",
		browseCoordinateSystems: "Bläddra i koordinatsystem",
		unableToRepopulateOutSR: "Det går inte att fylla i utdatakoordinatsystem.",
		defaultTitle: "Se mer",
		"ARC (equal arc-second)": "ARC (lika med båge-sekund)",
		Africa: "Afrika",
		Antarctica: "Antarktis",
		Argentina: "Argentina",
		Asia: "Asien",
		"Asteroid Belt": "Asteroidbältet",
		"Atlantic Ocean": "Atlanten",
		Australia: "Australien",
		"Australia and New Zealand": "Australien och Nya Zeeland",
		Austria: "Österrike",
		"BLM (US Feet)": "BLM (US-fot)",
		Bangladesh: "Bangladesh",
		"Beijing 1954": "Peking 1954",
		Bhutan: "Bhutan",
		CGCS2000: "CGCS2000",
		Canada: "Kanada",
		Caribbean: "Karibien",
		"Caribbean Sea": "Karibiska havet",
		"Central America": "Centralamerica",
		"Central and North America": "Centalamerika och Nordamerika",
		Colombia: "Colombia",
		Continental: "Kontinental",
		"County Systems": "Länsystem",
		"Democratic Republic of the Congo": "Demokratiska republiken Kongo",
		"EPSG Arctic": "EPSG Arktis",
		Earth: "Jorden",
		"Ellipsoidal-based": "Ellipsoidbaserat",
		Europe: "Europa",
		Finland: "Finland",
		France: "Frankrike",
		"GSK 2011": "GSK 2011",
		"Gauss Kruger": "Gauss Kruger",
		"Geographic Coordinate Systems": "Geografiska koordinatsystem",
		Germany: "Tyskland",
		"Gravity-related": "Gravitationsrelaterat",
		"Greenwich-based": "Greenwich-baserad",
		"Highways England": "Motorvägar England",
		Illinois: "Illinois",
		"Indian Ocean": "Indiska oceanen",
		"Indian Subcontinent": "Indiska subkontinenten",
		Indiana: "Indiana",
		Indonesia: "Indonesien",
		Iowa: "Iowa",
		"Ireland and United Kingdom": "Irland och Storbritannien",
		Italy: "Italien",
		Japan: "Japan",
		Jupiter: "Jupiter",
		Kansas: "Kansas",
		"Las Vegas": "Las Vegas",
		Libya: "Libyen",
		Malaysia: "Malaysia",
		"Malaysia and Singapore": "Malaysia och Singapore",
		Mars: "Mars",
		Mercury: "Merkurius",
		Minnesota: "Minnesota",
		Montana: "Montana",
		"NAD 1927": "NAD 1927",
		"NAD 1927 (US Feet)": "NAD 1927 (US-fot)",
		"NAD 1983": "NAD 1983",
		"NAD 1983 (2011)": "NAD 1983 (2011)",
		"NAD 1983 (2011) (Intl Feet)": "NAD 1983 (2011) (int. fot)",
		"NAD 1983 (2011) (Meters)": "NAD 1983 (2011) (meter)",
		"NAD 1983 (2011) (US Feet)": "NAD 1983 (2011) (US-fot)",
		"NAD 1983 (CORS96) (Intl Feet)": "NAD 1983 (CORS96) (int. fot)",
		"NAD 1983 (CORS96) (Meters)": "NAD 1983 (CORS96) (meter)",
		"NAD 1983 (CORS96) (US Feet)": "NAD 1983 (CORS96) (US-fot)",
		"NAD 1983 (Intl Feet)": "NAD 1983 (int. fot)",
		"NAD 1983 (Meters)": "NAD 1983 (meter)",
		"NAD 1983 (PA11) (Meters)": "NAD 1983 (PA11) (meter)",
		"NAD 1983 (PA11) (US Feet)": "NAD 1983 (PA11) (US-fot)",
		"NAD 1983 (US Feet)": "NAD 1983 (US-fot)",
		"NAD 1983 HARN (Intl Feet)": "NAD 1983 HARN (int. fot)",
		"NAD 1983 HARN (Meters)": "NAD 1983 HARN (meter)",
		"NAD 1983 HARN (US Feet)": "NAD 1983 HARN (US-fot)",
		"NAD 1983 NSRS2007 (Intl Feet)": "NAD 1983 NSRS2007 (int. fot)",
		"NAD 1983 NSRS2007 (Meters)": "NAD 1983 NSRS2007 (meter)",
		"NAD 1983 NSRS2007 (US Feet)": "NAD 1983 NSRS2007 (US-fot)",
		"National Grids": "Nationella rutnät",
		Navajo: "Navajo",
		Neptune: "Neptunus",
		"New Beijing": "Nya Peking",
		"New Zealand": "Nya Zeeland",
		"North America": "Nordamerika",
		"Northern Hemisphere": "Norra halvklotet",
		Norway: "Norge",
		Oceans: "Hav",
		Oregon: "Oregon",
		"Other GCS": "Annan GCS",
		"Pacific Ocean": "Stilla havet",
		Pluto: "Pluto",
		Polar: "Polar",
		Portugal: "Portugal",
		"Projected Coordinate Systems": "Projicerade koordinatsystem",
		"Pulkovo 1942": "Pulkovo 1942",
		"Pulkovo 1995": "Pulkovo 1995",
		Replaced: "Ersatt",
		"SAD 1969": "SAD 1969",
		SIRGAS: "SIRGAS",
		"SIRGAS 2000": "SIRGAS 2000",
		Saturn: "Saturnus",
		"Solar System": "Solsystem",
		"South Africa": "Sydafrika",
		"South America": "Sydamerika",
		"South Korea": "Sydkorea",
		"Southern Hemisphere": "Södra halvklotet",
		"Spheroid-based": "Rotationsellipsoidsbaserad",
		"State Plane": "Delstatsplan",
		"State Systems": "Delstatssystem",
		Sweden: "Sverige",
		"Switzerland and Liechtenstein": "Schweiz och Liechtenstein",
		Texas: "Texas",
		Tribal: "Stam",
		Turkey: "Turkiet",
		"US Feet": "US-fot",
		"USA and territories": "USA och territorierna",
		UTM: "UTM",
		Ukraine: "Ukraina",
		"Unknown Height Systems": "Okända höjdsystem",
		Uranus: "Uranus",
		Venus: "Venus",
		"Vertical Coordinate Systems": "Vertikala koordinatsystem",
		Vietnam: "Vietnam",
		"WGS 1972": "WGS 1972",
		"WGS 1984": "WGS 1984",
		Wisconsin: "Wisconsin",
		"Wisconsin CRS": "Wisconsin CRS",
		World: "Världen",
		"World (Sphere-based)": "Världen (sfärbaserad)",
		Wyoming: "Wyoming",
		"Xian 1980": "Xian 1980",
		done: "Klar",
		noResults: "Inga resultat hittades",
		searchPlaceholder: "Namn eller WKID",
		browseTemplate: "Bläddra bland mallar för rasterfunktion",
		saveTemplate: "Spara mall för rasterfunktion",
		preview: "Förhandsgranska",
		previewDescription: "Förhandsgranska resultatet innan du kör analysen.",
		showPreview: "Visa förhandsgranskning",
		previewLayer: "Förhandsgranska lager ${number}",
		newPreview: "Ny förhandsgranskning",
		previewPopup: "Aktivera förhandsgranskningen av analysresultaten baserat på indataparametrarna.",
		updatePreviewLayer: "Uppdatera valt förhandsvisningslager",
		createPreviewLayer: "Skapa nytt förhandsvisningslager",
		maximumPreviewAllowed: "Högsta antal tillåtna förhandsvisningslager: ${maxCount}",
		previewFailure: "Detta förhandsvisningslager är ej tillgängligt. Kontrollera indataparametrarna och uppdatera det här förhandsvisningslagret igen.",
		header: "Välj objekt",
		content: "Du har osparade ändringar i ${rftTitle}. Om du börjar om med en ny mall går dessa ändringar förlorade.",
		dontSave: "Spara inte",
		"continue": "Fortsätt",
		stretch: "Anpassa till fönster",
		pan: "Panorera",
		newTemplate: "Skapa ny mall",
		openTemplate: "Öppna mall",
		addFunction: "Lägg till rasterfunktioner",
		addConstant: "Lägg till konstant",
		addRaster: "Lägg till rastervariabel",
		move: "Flytta",
		zoom: "Zooma",
		saveAs: "Spara som",
		clear: "Radera",
		addRasterFunctionTitle: "Lägg till rasterfunktioner",
		templatePropertiesTitle: "Mallegenskaper",
		browseRFT: "Bläddra bland mallar för rasterfunktion",
		defaultToolDescription: "${toolTitle} analysverktyg.",
		openToolText: "Öppna verktyg",
		toolDropdownText: "Verktygslistmeny",
		addToMap: "Bekräfta och lägg till på karta",
		confirm: "Bekräfta",
		select: "Välj",
		selectTask: "Välj uppgift",
		unsupportedLayer: "Den här parametern stöder inte följande lager: ${layerName}.",
		viewDetails: "Visa fullständig objektinformation",
		rename: "Byt namn",
		duplicate: "Duplicera",
		launch: "Öppna för att köra",
		templateEditor: "Mallredigerare",
		createItem: "Spara mall för rasterfunktion",
		actionLabel: "Filter",
		filterPopoverHeading: "Filtrera funktioner",
		defaultSearchPlaceholder: "Sök efter namn",
		settings: "Inställningar",
		summary: "Sammanfattning",
		definitionQuery: "Definitionsfråga",
		matchVariables: "Matcha variabler",
		unionDimension: "Unionsdimension",
		nameEditorPlaceholder: "Ange titel",
		summaryEditorPlaceholder: "Ange en kort beskrivning.",
		definitionQueryPlaceholder: "Ange...",
		upload: "Överför",
		chooseImage: "Klicka för att välja en fil",
		update: "Uppdatera",
		thumbnailErrors: {
			wrongImageType: "Fel bildtyp är vald",
			notAvailable: "Ingen miniatyrbild finns tillgänglig",
			loadError: "Det gick inte att ladda bilden",
			chooseFile: "Klicka för att välja fil"
		}
	}
};
const copy = "Kopiera";
const save = "Spara";
const title = "Titel";
const folder = "Mapp";
const tags = "Taggar";
const savingMessage = "Sparar objekt till";
const shareWith = "Dela med";
const share = "Dela";
const setSharingLevel = "Ställ in delningsnivå";
const setGroupSharing = "Ställ in gruppdelning";
const owner = "Ägare";
const organization = "Organisation";
const everyone = "Alla (publik)";
const groups = "Grupper:";
const type = "Typ";
const mosaic = "Mosaik";
const itemGroup = "Objektgrupp";
const item = "Objekt";
const definitionQuery = "Definitionsfråga";
const groupItemsBy = "Gruppera objekt efter";
const groupFieldName = "Gruppera fältnamn";
const tagFieldName = "Taggfältnamn";
const noTitleTagErrorMsg = "Du måste ange en titel för objektet och taggar som gör att kartan går att hitta genom sökningar.";
const noTitleErrorMsg = "Du måste ange en titel för objektet.";
const noTagErrorMsg = "Du måste ange minst en tagg för att hjälpa andra att hitta objektet i sökningar.";
const error = "Fel";
const warning = "Varning";
const success = "Lyckades";
const details = "Information:";
const tryAgain = "Prova igen";
const toolModeler = {
	save: "Spara",
	editProperties: "Redigera egenskaper",
	saveAs: "Spara som",
	savingNotification: "Sparar ändringar av objekt ...",
	savingTitle: "Sparar",
	saveFailedMessage: "Det gick inte att spara ändringarna.",
	saveWithErrorsMessage: "Ändringar sparades med följande fel.",
	viewItemMessage: "Visa det sparade objektet",
	here: "här.",
	itemCreatedMessage: "Nytt objekt har skapats.",
	clickToViewItemMessage: "Klicka på OK för att visa objektinformationssidan; klicka på Avbryt för att fortsätta.",
	readingFailed: "Det går inte att läsa in den valda rasterfunktionsmallen.",
	failedToLoadXML: "Det går inte att läsa in den valda rasterfunktionsmallen i XML-format.",
	learnMore: "Läs mer",
	overwriteTitle: "Bekräfta att du vill skriva över",
	overwriteMessage: "Vill du skriva över ett befintligt objekt?",
	overwriteSuccessMessage: "Objektet har uppdaterats."
};
const toolEditor = {
	run: "Kör",
	save: "Spara",
	deleteSelected: "Ta bort markerade objekt",
	addRaster: "Lägg till raster",
	addScalar: "Lägg till skalär",
	layout: "Automatisk layout",
	errorTitle: "Fel",
	invalidToolMessage: "Rasterfunktionsmallen är inte giltig.",
	out: "Ut",
	zoomIn: "Zooma in",
	zoomOut: "Zooma ut",
	zoomToFit: "Anpassa till fönster",
	panOn: "Växla till panoreringsläge",
	panOff: "Stäng av panoreringsläge",
	defaultModelName: "Verktygsmodell",
	defaultRasterName: "Raster"
};
const toolDetailsEditor = {
	defaultToolName: "Mall för rasterfunktion",
	defaultToolDescription: "Lägg till en kort sammanfattning av rasterfunktionen.",
	defaultHelpText: "Klicka på hjälpikonen om du vill redigera hjälptexten.",
	editHelpTitle: "Redigera hjälp",
	saveLabel: "Spara",
	cancelLabel: "Avbryt",
	thumbnail: {
		wrongImageType: "Fel bildtyp är vald",
		notAvailable: "Ingen miniatyrbild finns tillgänglig",
		loadError: "Det gick inte att ladda bilden",
		chooseFile: "Klicka för att välja fil"
	}
};
const saveUtils = {
	thumbnail: "Miniatyrbild",
	sharing: "Delning"
};
const close = "Stäng";
const unsavedWarningExisting = "Vill du spara ändringarna av objektet <b>${itemTitle}</b>?";
const unsavedWarningNew = "Vill du spara dina ändringar?";
const saveAs = "Spara som";
const dontSave = "Spara inte";
const unsavedTitle = "Osparade ändringar";
const invalidRFTMessage = "Rasterfunktionsmallen som skapats är inte giltig.";
const errorTitle = "Fel";
const breadcrumb = "Rasterfunktionsredigerare";
const breadcrumbEditor = "Innehåll > rasterfunktionsredigerare";
const viewerModeTitle = "Skrivskyddad";
const viewerModeMessage = "Rasterfunktionsmallobjektet är skrivskyddat. Ändringarna kan inte sparas.";
const userStartDirection = "Välj en funktion för att börja skapa en rasterfunktionsmall.";
const selectFunction = "Lägg till funktion";
const deselectFunction = "Ta bort funktion";
const dialogTitle = "System";
const category = "Kategorier";
const search = "Sök rasterfunktioner";
const categoryNames = {
	analysis: "Analys",
	appearance: "Utseende",
	classification: "Klassificering",
	conversion: "Konvertering",
	correction: "Korrigering",
	dataManagement: "Datahantering",
	distance: "Avstånd",
	distanceLegacy: "Avstånd (äldre)",
	hydrology: "Hydrologi",
	math: "Matematik",
	mathConditional: "Matematik: villkorlig",
	mathLogical: "Matematik: logisk",
	mathTrigonometric: "Matematik: trigonometrisk",
	reclass: "Omklassning",
	statistical: "Statistisk",
	surface: "Yta"
};
const commonStrings_sv = {
	ok: ok,
	cancel: cancel,
	enterURL: enterURL,
	serviceURL: serviceURL,
	selectRaster: selectRaster,
	failedToLoadLayer: failedToLoadLayer,
	loadingLayer: loadingLayer,
	selectFeature: selectFeature,
	enterFURL: enterFURL,
	addRaster: addRaster,
	addScalar: addScalar,
	raster: raster,
	scalar: scalar,
	defaultModelName: defaultModelName,
	general: general,
	parameters: parameters,
	variables: variables,
	name: name,
	description: description,
	parameter: parameter,
	isPublic: isPublic,
	isDataset: isDataset,
	unknownPixelType: unknownPixelType,
	outputPixelType: outputPixelType,
	u8PixelType: u8PixelType,
	s8PixelType: s8PixelType,
	u16PixelType: u16PixelType,
	s16PixelType: s16PixelType,
	u32PixelType: u32PixelType,
	s32PixelType: s32PixelType,
	f32PixelType: f32PixelType,
	f64PixelType: f64PixelType,
	properties: properties,
	multidimensionalRules: multidimensionalRules,
	matchVariables: matchVariables,
	unionDimensions: unionDimensions,
	rasterFunctionEditor: rasterFunctionEditor,
	rfxLicenseInfo: rfxLicenseInfo,
	rasterFunctions: rasterFunctions,
	copy: copy,
	save: save,
	title: title,
	folder: folder,
	tags: tags,
	savingMessage: savingMessage,
	shareWith: shareWith,
	share: share,
	setSharingLevel: setSharingLevel,
	setGroupSharing: setGroupSharing,
	owner: owner,
	organization: organization,
	everyone: everyone,
	groups: groups,
	type: type,
	mosaic: mosaic,
	itemGroup: itemGroup,
	item: item,
	definitionQuery: definitionQuery,
	groupItemsBy: groupItemsBy,
	groupFieldName: groupFieldName,
	tagFieldName: tagFieldName,
	noTitleTagErrorMsg: noTitleTagErrorMsg,
	noTitleErrorMsg: noTitleErrorMsg,
	noTagErrorMsg: noTagErrorMsg,
	error: error,
	warning: warning,
	success: success,
	details: details,
	tryAgain: tryAgain,
	toolModeler: toolModeler,
	toolEditor: toolEditor,
	toolDetailsEditor: toolDetailsEditor,
	saveUtils: saveUtils,
	close: close,
	unsavedWarningExisting: unsavedWarningExisting,
	unsavedWarningNew: unsavedWarningNew,
	saveAs: saveAs,
	dontSave: dontSave,
	unsavedTitle: unsavedTitle,
	invalidRFTMessage: invalidRFTMessage,
	errorTitle: errorTitle,
	breadcrumb: breadcrumb,
	breadcrumbEditor: breadcrumbEditor,
	viewerModeTitle: viewerModeTitle,
	viewerModeMessage: viewerModeMessage,
	userStartDirection: userStartDirection,
	selectFunction: selectFunction,
	deselectFunction: deselectFunction,
	dialogTitle: dialogTitle,
	category: category,
	search: search,
	categoryNames: categoryNames
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (commonStrings_sv);


//# sourceMappingURL=common-strings.sv-9d23d938.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,