"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_ba-infographic_node_modules_arcgis_business-analyst-components_dis-7f6569"],{

/***/ "./extensions/widgets/ba-infographic/node_modules/@arcgis/business-analyst-components/dist/stencil-components/dist/esm/GEClient-1a83a657.js":
/*!**************************************************************************************************************************************************!*\
  !*** ./extensions/widgets/ba-infographic/node_modules/@arcgis/business-analyst-components/dist/stencil-components/dist/esm/GEClient-1a83a657.js ***!
  \**************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   E: () => (/* binding */ Environments),
/* harmony export */   G: () => (/* binding */ GEClient),
/* harmony export */   S: () => (/* binding */ SettingsHelper),
/* harmony export */   T: () => (/* binding */ TokenProvider)
/* harmony export */ });
/* harmony import */ var _ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ElementIds-f7d257e8.js */ "./extensions/widgets/ba-infographic/node_modules/@arcgis/business-analyst-components/dist/stencil-components/dist/esm/ElementIds-f7d257e8.js");


class TokenProvider {
  /**
   * todo: implement real method
   *
   * @return {Promise<unknown>}
   */
  static getToken() {
    return new Promise((resolve) => {
      resolve(TokenProvider.token.access_token);
    });
  }
  static setToken(username, token) {
    if (username && username.length > 0 && token && token.length > 0) {
      this.token.access_token = token;
      this.token.username = username;
    }
  }
}
TokenProvider.token = {
  access_token: '',
  expires_in: null,
  persist: 'true',
  ssl: 'true',
  username: 'mark_ba'
};

/** Environments
 *
 *  This class provides support for environments and subdomains
 *  PortalUrl - can be overriden for enterprise environments
 *  GeocoderUrl - can be overriden
 *  GeoenrichmentUrl - can be overriden
 */
class Environments {
  static setEnvironment(env) {
    let e = (env === 'prod' || env === 'localhost') ? 'www' : env;
    Environments._env = e;
  }
  static getEnvironment() {
    return Environments._env;
  }
  static setPortalUrl(portalUrl) {
    Environments.portalUrl = portalUrl;
  }
  static setGeoenrichmentUrl(geUrl) {
    Environments.geoenrichmentUrl = geUrl;
  }
  static setGeocodeUrl(geocodeUrl) {
    Environments.geocodeUrl = geocodeUrl;
  }
  static getPortalBase() {
    // Optional, if PortalUrl has been explicitly set/overriden use it
    if (Environments.portalUrl) {
      return Environments.portalUrl;
    }
    const e = Environments._env;
    if (!e)
      return '';
    const subdomain = e === 'dev' ? 'devext' : e === 'qa' ? 'qaext' : 'www';
    let url = 'https://' + subdomain + '.arcgis.com';
    return url;
  }
  /**
   * Returns appropriate request URL for the subdomain
   *
   * @param subDomain - one of 'geocode', 'arcgis', or 'geoenrich'
   */
  static getUrl(subDomain) {
    if (!Environments._env) {
      console.log('Environments error: env not set');
      return '';
    }
    if (!subDomain || !_ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_0__.U.hasText(subDomain)) {
      console.log('Environments error: invalid subdomain');
      return '';
    }
    const portal = Environments.getPortalBase();
    if (portal === '')
      return '';
    try {
      let url = '';
      switch (subDomain) {
        case ('geocode'): {
          // Optional, if GeocodeUrl has been explicitly set/overriden use it
          if (Environments.geocodeUrl) {
            url = Environments.geocodeUrl;
            break;
          }
          else {
            url =
              (Environments._env === 'qa') ? 'https://geocodeqa.arcgis.com/arcgis/rest/services/World/GeocodeServer' :
                (Environments._env === 'dev') ? 'https://geocodedev.arcgis.com/arcgis/rest/services/World/GeocodeServer' :
                  'https://geocode.arcgis.com/arcgis/rest/services/World/GeocodeServer';
            break;
          }
        }
        case ('arcgis'): {
          url = portal;
          break;
        }
        case ('infographics'): {
          url =
            (Environments._env === 'qa') ? 'https://baoqa.arcgis.com/InfographicsPlayer/BAMobile/23.R03/reportPlayer/ReportPlayerMobile.html' :
              (Environments._env === 'dev') ? 'https://baodev.arcgis.com/InfographicsPlayer/BAMobile/23.R03/reportPlayer/ReportPlayerMobile.html' :
                'https://bao.arcgis.com/InfographicsPlayer/BAMobile/23.R03/reportPlayer/ReportPlayerMobile.html';
          break;
        }
        case ('geoenrich'): {
          // Optional, if GeoenrichmentUrl has been explicitly set/overriden use it
          if (Environments.geoenrichmentUrl) {
            url = Environments.geoenrichmentUrl;
            break;
          }
          else {
            url =
              (Environments._env === 'qa') ? 'https://geoenrichqa.arcgis.com/arcgis/rest/services/World/geoenrichmentserver' :
                (Environments._env === 'dev') ? 'https://geoenrichdev.arcgis.com/arcgis/rest/services/World/geoenrichmentserver' :
                  'https://geoenrich.arcgis.com/arcgis/rest/services/World/geoenrichmentserver';
          }
          break;
        }
      }
      return url;
    }
    catch (ex) {
      _ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_0__.a.Error('Environments.getUrl() error ', ex);
    }
    return '';
  }
  // Returns true if the geocodeUrl string passed in is the online Geocoder Service (dev, qa, prod), false otherwise
  static isOnlineGeocoder(geocodeUrl) {
    if (geocodeUrl.toLowerCase().startsWith('https://geocode.arcgis.com/arcgis/rest/services/World/GeocodeServer'.toLowerCase()) ||
      geocodeUrl.toLowerCase().startsWith('https://geocodeqa.arcgis.com/arcgis/rest/services/World/GeocodeServer'.toLowerCase()) ||
      geocodeUrl.toLowerCase().startsWith('https://geocodedev.arcgis.com/arcgis/rest/services/World/GeocodeServer'.toLowerCase())) {
      return true;
    }
    return false;
  }
  // Returns true if the portalUrl string passed in is the online Portal (dev, qa, prod), false otherwise
  static isAGOPortal(portalUrl) {
    if (portalUrl.toLowerCase().startsWith('https://www.arcgis.com'.toLowerCase()) ||
      portalUrl.toLowerCase().startsWith('https://qaext.arcgis.com'.toLowerCase()) ||
      portalUrl.toLowerCase().startsWith('https://devext.arcgis.com'.toLowerCase())) {
      return true;
    }
    return false;
  }
}
Environments._env = 'www';
// Optional, ability to override portalUrl
Environments.portalUrl = '';
// Optional, ability to override geoenrichment URL
Environments.geoenrichmentUrl = '';
// Optional, ability to override geocode URL
Environments.geocodeUrl = '';

class ArcGISClient {
  static executeSelf() {
    return new Promise((resolve, reject) => {
      TokenProvider.getToken().then((accessToken) => {
        if (accessToken === ArcGISClient._lastSelfToken) {
          resolve(ArcGISClient._selfResult);
        }
        else {
          let settings = {
            taskPath: '/portals/self',
            data: {
              culture: 'en-us' // todo: get actual locale
            }
          };
          ArcGISClient.executeRequest(settings).then(response => {
            //caching response from "/self" with token as key
            ArcGISClient._lastSelfToken = accessToken;
            ArcGISClient._selfResult = response;
            resolve(response);
          })
            .catch(err => {
            ArcGISClient._lastSelfToken = '';
            ArcGISClient._selfResult = '';
            reject(err);
          });
        }
      })
        .catch(err => reject(err));
    });
  }
  static getGeoenrichmentUrl() {
    return Environments.getUrl('geoenrich');
  }
  static getHelperServiceUrl(serviceName) {
    return new Promise((resolve, reject) => {
      ArcGISClient.executeSelf().then(function (selfResult) {
        let helperServices = selfResult.helperServices;
        if (helperServices) {
          let helperService = helperServices[serviceName];
          if (helperService) {
            let urlString = Array.isArray(helperService) ? helperService[0].url : helperService.url;
            urlString ? resolve(urlString) : reject(serviceName + ' helper service is not configured.');
          }
          else
            reject(serviceName + ' helper service is not configured.');
        }
        else
          reject('Helper services are not configured.');
      }).catch(err => reject(err));
    });
  }
  static getPortalResource(resourceName) {
    return ArcGISClient.executeRequest({
      taskPath: '/portals/self/resources/' + resourceName
    });
  }
  static getItemData(itemId) {
    return ArcGISClient.executeRequest({
      taskPath: '/content/items/' + itemId + '/data'
    });
  }
  /**
   * Searches for items by provided search query and params and extracts all search results
   * bypassing ArcGIS server limit of 100 items
   *
   * @param query
   * @param params
   * @returns {Promise<unknown>}
   */
  static searchAllItems(query, params) {
    return new Promise((resolve, reject) => {
      let searchResults = [];
      let self = this;
      let _doSearch = function (query, params, context) {
        self.searchItems(query, params, context).then(function (result) {
          if (result.items.length)
            searchResults = searchResults.concat(result.items);
          let newContext = result.context;
          if (newContext.nextStart > 0)
            _doSearch(query, params, newContext);
          else
            resolve(searchResults);
        }, function (err) {
          if (searchResults && searchResults.length)
            resolve(searchResults);
          else
            reject(err);
        });
      };
      _doSearch(query, params, null);
    });
  }
  static searchItems(query, params, context) {
    return new Promise((resolve, reject) => {
      // do deep copy, instead of $j.extend({}, params)
      let searchParams = params ? JSON.parse(JSON.stringify(params)) : {};
      if (context) {
        searchParams.q = params.q;
        let total = context.total;
        let nextStart = context.nextStart;
        if (total && nextStart) {
          if (nextStart > 0 && total >= nextStart)
            searchParams.start = nextStart;
          else
            resolve({ items: [], context: context });
        }
        if (context.sortField && context.sortOrder) {
          searchParams.sortOrder = context.sortOrder;
          searchParams.sortField = context.sortField;
        }
        // $j.ajaxSetup({
        //     global: false
        // });
      }
      else {
        let queryParts = [];
        Object.getOwnPropertyNames(query).forEach(function (key) {
          queryParts.push(key + ':"' + query[key] + '"');
        });
        if (queryParts.length)
          searchParams.q = queryParts.join(' AND ');
      }
      ArcGISClient.portalSearch(searchParams).then((searchResponse) => {
        // $j.ajaxSetup({
        //     global: true
        // });
        let resultItems = searchResponse.results;
        let ctx = {
          query: searchResponse.query,
          total: searchResponse.total,
          nextStart: searchResponse.nextStart,
          sortOrder: null,
          sortField: null
        };
        if (searchParams.sortOrder && searchParams.sortField) {
          ctx.sortOrder = searchParams.sortOrder;
          ctx.sortField = searchParams.sortField;
        }
        resolve({ items: resultItems, context: ctx });
      }).catch(reject);
    });
  }
  /// methods from BA.arcGISRequests
  static portalSearch(params) {
    return ArcGISClient.executeRequest({
      taskPath: '/search',
      data: params
    });
  }
  static async getPortalUrl() {
    return Environments.getUrl('arcgis') + '/sharing/rest';
  }
  static executeRequest(settings) {
    //settings:
    // {
    //     "data": {
    //     "num": 1000,
    //         "q": "type:\"Report Template\" typekeywords:esriWebStandardInfographicReport owner:esri_reports",
    //         "sortField": "title",
    //         "sortOrder": "asc",
    //         "start": 1
    //     },
    //     "taskPath": "/search"
    // }
    return new Promise((resolve, reject) => {
      TokenProvider.getToken().then(async (access_token) => {
        if (!settings.data)
          settings.data = {};
        // todo: use default params with ability to override them
        if (!settings.data.f)
          settings.data.f = 'json';
        settings.data.token = access_token ? access_token : settings.data.token;
        if (!settings.data.token) {
          delete settings.data.token;
        }
        settings.data.langCode = settings.data?.langCode ? settings.data.langCode : 'en-us'; // todo: update
        //todo: timeout: 30000 ms - need to implement via timer and AbortController
        const formData = new FormData();
        for (let key in settings.data)
          formData.append(key, settings.data[key]);
        let url;
        if (Object.prototype.hasOwnProperty.call(settings, 'url')) {
          url = settings.url;
        }
        else {
          url = await ArcGISClient.getPortalUrl();
        }
        //let url = settings.url || ArcGISClient.getPortalUrl();
        if (settings.taskPath)
          url = url + settings.taskPath;
        let params = {};
        // Standard Geography query is handled differently
        // Need to add charset=UTF-8 to Content-Type request header
        if (settings.isStandardGeoQuery) {
          const requestHeaders = new Headers();
          requestHeaders.append('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8');
          let bodyData = '';
          let booleanFirst = true;
          for (const key in settings.data) {
            bodyData += booleanFirst ? '' : '&';
            bodyData += key + '=' + encodeURI(settings.data[key]);
            booleanFirst = false;
          }
          params = {
            method: 'POST',
            body: bodyData,
            headers: requestHeaders
          };
        }
        else {
          params = {
            method: 'POST',
            body: formData
          };
        }
        fetch(url, params).then(response => {
          if (!response.ok)
            throw new Error('Network response ended with error.');
          // todo: check if response is string?
          return settings.data.f === 'bin' ? response.blob() : response.json();
        }).then(result => {
          // ArcGIS returns error with HTTP 2xx code, so handle it here
          result.error ? reject(result.error) : resolve(result);
        }).catch(error => {
          console.error('Error:', error);
          reject(error);
        });
      }).catch(err => reject(err));
    });
  }
}

class WebAppSettings {
  static getBusinessAnalystOrganizationalSettings() {
    return ArcGISClient.getPortalResource('BusinessAnalyst_Organizational_Settings.json');
  }
  static getDisabledReports() {
    return new Promise((resolve) => {
      let emptyResolveOnErr = (err) => {
        resolve({});
        console.log('WebAppSettings error', err);
      };
      ArcGISClient.executeSelf().then((selfResponse) => {
        let roleId = selfResponse.user.roleId || selfResponse.user.role;
        WebAppSettings.getBusinessAnalystOrganizationalSettings().then((settings) => {
          let disabledReports = settings['userRoles.disabledAreas.reports'];
          if (disabledReports && disabledReports[roleId])
            resolve(disabledReports[roleId]);
          else
            resolve({});
        }).catch(emptyResolveOnErr);
      }).catch(emptyResolveOnErr);
    });
  }
  /**
   * Gets ids of infographic templates that user added to "My Templates" from "Gallery"
   * (uses new version of user settings)
   *
   * @returns {*}
   */
  static getUserGalleryInfographicReportIds() {
    return new Promise((resolve, reject) => {
      WebAppSettings._searchGalleryInfographicPreferencesItem().then((galleryPrefItem) => {
        if (!galleryPrefItem) {
          reject(null);
          return;
        }
        // assuming "properties": {"inData": "true"},
        let itemId = galleryPrefItem.id;
        ArcGISClient.getItemData(itemId).then((itemData) => {
          resolve(itemData &&
            itemData.data &&
            itemData.data.myGalleryInfographicReportIds);
        }).catch(err => reject(err));
      }).catch(err => reject(err));
    });
  }
  static _searchGalleryInfographicPreferencesItem() {
    return WebAppSettings._searchUserItem('esriFavoriteReportTemplates');
  }
  static _searchUserItem(typekeywords) {
    return new Promise((resolve, reject) => {
      ArcGISClient.executeSelf().then((selfResponse) => {
        let username = selfResponse.user.username;
        let query = {
          type: 'Web Mapping Application',
          typekeywords: typekeywords,
          owner: username
        };
        let params = { num: 1 };
        ArcGISClient.searchItems(query, params, undefined).then((items) => {
          resolve(items && items.length && items[0]);
        }).catch(err => reject(err));
      }).catch(err => reject(err));
    });
  }
}

class SettingsHelper {
  static getEnvironment() {
    return new Promise((resolve) => {
      resolve(Environments.getEnvironment());
    });
  }
  static setEnvironment(environment) {
    if (environment && environment.length > 0) {
      Environments.setEnvironment(environment);
    }
    else {
      console.log('ba-reports error: setEnvironment() invalid arg');
    }
  }
  static async getPortalBaseUrl() {
    return Environments.getUrl('arcgis');
  }
  static isTrueString(value) {
    return String(value).toLowerCase() === 'true';
  }
}

class ReportTemplatesManager {
  static _condenseResultsArray(data) {
    // simplify
    const arr = data.map((obj) => {
      return { id: obj.id, title: obj.title, date: obj.modified };
    });
    // remove duplicates by title
    const names = arr.map((a) => a.title);
    const result = arr.filter((obj, index) => {
      return names.indexOf(obj.title) == index;
    });
    return result;
  }
  static _condenseResultsArrayGEInfographics(data) {
    // simplify
    let date, t1, t2;
    const arr = data.map((obj) => {
      try {
        if (obj.metadata.lastRevisionDate) {
          t2 = obj.metadata.lastRevisionDate;
        }
        if (obj.metadata.creationDate) {
          t1 = obj.metadata.creationDate;
        }
        if (t1) {
          if (!t2) {
            date = t1;
          }
          else {
            date = (t2 > t1) ? t2 : t1;
          }
        }
      }
      catch (ex) {
        console.log('ReportTemplatesManager error', ex);
      }
      return { id: obj.itemID, title: obj.metadata.title, date: date };
    });
    // remove duplicates by title
    const names = arr.map((a) => a.title);
    const result = arr.filter((obj, index) => {
      return names.indexOf(obj.title) == index;
    });
    return result;
  }
  /**
   * Gets report templates for country identified by country code. Final report
   * templates set consists of templates from GeoEnrichment and from AGOL
   *
   * @param countryCode Only 2-letter countryCode! todo: consume 3-letter also
   * @param full        Flag True=return all data, False=return Id + Title only
   * @return {Promise<unknown>}
   */
  static getReportTemplates(countryCode, full = false) {
    return new Promise((resolve, reject) => {
      let reportTemplates = {
        ge: undefined,
        shared: undefined,
        user: undefined,
        favoriteIds: undefined
      };
      ArcGISClient.executeSelf()
        .then((selfResponse) => {
        let username = selfResponse.user.username;
        Promise.allSettled([
          // ReportTemplatesManager._getGEReportTemplates(countryCode),
          ReportTemplatesManager._getSharedCustomReportTemplateItems(username),
          ReportTemplatesManager._getMyCustomReportTemplateItems(username),
          ReportTemplatesManager._getFavoriteReportsIds(username, countryCode)
        ]).then((res) => {
          reportTemplates.ge = res[0].value ? res[0].value : [];
          reportTemplates.shared = ReportTemplatesManager._createReportTemplateInfos(res[1] && res[1].value ? res[1].value : [], countryCode);
          reportTemplates.user = ReportTemplatesManager._createReportTemplateInfos(res[2] && res[2].value ? res[2].value : [], countryCode);
          reportTemplates.favoriteIds =
            res[3] && res[3].value ? res[3].value : [];
          WebAppSettings.getDisabledReports()
            .then((disabledReports) => {
            let ge = reportTemplates.ge;
            let shared = reportTemplates.shared;
            if (ge != null) {
              reportTemplates.ge = ge.filter((template) => {
                return !disabledReports[template.reportID];
              });
              if (shared != null) {
                reportTemplates.shared = shared.filter((template) => {
                  return !disabledReports[template.reportID.itemid];
                });
              }
            }
            if (!full) {
              reportTemplates.ge = ReportTemplatesManager._condenseResultsArray(reportTemplates.ge);
              reportTemplates.shared = ReportTemplatesManager._condenseResultsArray(reportTemplates.shared);
              reportTemplates.user = ReportTemplatesManager._condenseResultsArray(reportTemplates.user);
              reportTemplates.favoriteIds = ReportTemplatesManager._condenseResultsArray(reportTemplates.favoriteIds);
              resolve(reportTemplates);
            }
            else {
              resolve(reportTemplates);
            }
          })
            .catch((err) => reject(err));
        });
      })
        .catch((err) => reject(err));
    });
  }
  static _getGEReportTemplates(countryCode) {
    return new Promise((resolve, reject) => {
      // todo: store templates in country instance: country.reportTemplates;
      let reportTemplates = ReportTemplatesManager._geReportTemplatesCache[countryCode];
      if (reportTemplates) {
        resolve(reportTemplates);
        return;
      }
      GEClient.execute({ taskPath: '/GeoEnrichment/Reports/' + countryCode })
        .then((reportTemplatesResponse) => {
        let reportTemplates = reportTemplatesResponse.reports;
        ReportTemplatesManager._geReportTemplatesCache[countryCode] = reportTemplates;
        resolve(reportTemplates);
      })
        .catch(reject);
    });
  }
  static _getSharedCustomReportTemplateItems(username) {
    let query = 'type:"Report Template" (access:shared OR access:org) typekeywords:(esriWebReport NOT esriWebInfographicReport) NOT owner:' +
      username;
    return ReportTemplatesManager._searchItems(query, ReportTemplatesManager._removeInfographicTemplates);
  }
  static _getMyCustomReportTemplateItems(username) {
    let query = 'type:"Report Template" typekeywords:(esriWebReport NOT esriWebInfographicReport) owner:' +
      username;
    return ReportTemplatesManager._searchItems(query, ReportTemplatesManager._removeInfographicTemplates);
  }
  static _removeInfographicTemplates(reportTemplateItem) {
    return !SettingsHelper.isTrueString(reportTemplateItem.properties.isGraphicReport);
  }
  /**
   *
   * @param countryCode Only 2-letter countryCode! todo: consume 3-letter also
   * @return {Promise<unknown>}
   */
  static getInfographicReportTemplateItems(countryCode, full = false, token) {
    return new Promise(async (resolve, reject) => {
      let infographicItems = {
        public: undefined,
        shared: undefined,
        user: undefined,
        favoriteIds: undefined,
        gallery: undefined
      };
      const defaultHierarchy = await GEClient.getGEDefaultHierarchy(countryCode, token);
      ArcGISClient.executeSelf()
        .then((selfResponse) => {
        let username = selfResponse.user.username;
        let orgId = selfResponse.user.orgId;
        // let countryCode = country.id;
        Promise.allSettled([
          ReportTemplatesManager._getEsriInfographicReportTemplateItems(countryCode),
          ReportTemplatesManager._getSharedInfographicReportTemplateItems(username, orgId),
          ReportTemplatesManager._getUserInfographicReportTemplateItems(username),
          ReportTemplatesManager._getFavoriteReportsIds(username, countryCode),
          ReportTemplatesManager._getGalleryInfographicReportTemplateItems()
          //
        ]).then((res) => {
          let byCountryAndDefaultHiearchy = ReportTemplatesManager._byCountryAndDefaultHiearchy(countryCode, defaultHierarchy);
          infographicItems.public = res[0].value
            ? res[0].value.filter(byCountryAndDefaultHiearchy)
            : [];
          infographicItems.shared = res[1].value
            ? res[1].value.filter(byCountryAndDefaultHiearchy)
            : [];
          infographicItems.user = res[2].value
            ? res[2].value.filter(byCountryAndDefaultHiearchy)
            : [];
          // infographicItems.public = infographicItems.public
          //   ? res[0].value.filter (byDefaultHierarchy)
          //   : []
          // infographicItems.shared = res[1].value
          //   ? res[1].value.filter (byDefaultHierarchy)
          //   : []
          // infographicItems.user = res[2].value
          //   ? res[2].value.filter (byDefaultHierarchy)
          //   : []
          infographicItems.favoriteIds = res[3].value ? res[3].value : [];
          infographicItems.gallery = res[4].value
            ? res[4].value.filter(byCountryAndDefaultHiearchy)
            : [];
          let user = infographicItems.user;
          if (user != null) {
            // sort alphabetically by title
            user.sort(function (item1, item2) {
              return item1.title.localeCompare(item2.title);
            });
          }
          WebAppSettings.getDisabledReports()
            .then((disabledReports) => {
            let filterDisabled = function (igItem) {
              return !disabledReports[igItem.id];
            };
            let pub = infographicItems.public;
            if (pub != null) {
              infographicItems.public = pub.filter(filterDisabled);
            }
            let shared = infographicItems.shared;
            if (shared != null) {
              infographicItems.shared = shared.filter(filterDisabled);
            }
            let gallery = infographicItems.gallery;
            if (gallery != null) {
              infographicItems.gallery = gallery.filter(filterDisabled);
            }
            if (!full) {
              infographicItems.public = ReportTemplatesManager._condenseResultsArrayGEInfographics(infographicItems.public);
              infographicItems.shared = ReportTemplatesManager._condenseResultsArray(infographicItems.shared);
              infographicItems.user = ReportTemplatesManager._condenseResultsArray(infographicItems.user);
              infographicItems.favoriteIds = ReportTemplatesManager._condenseResultsArray(infographicItems.favoriteIds);
              infographicItems.gallery = ReportTemplatesManager._condenseResultsArray(infographicItems.gallery);
              resolve(infographicItems);
            }
            else {
              resolve(infographicItems);
            }
          })
            .catch((err) => reject(err));
        });
      })
        .catch((err) => reject(err));
    });
  }
  /**
   * Gets function to filter portal items arrays by country code in its properties
   *
   * @param countryCode country code that item's 'countries' array should contain
   * @returns {function(*): boolean}
   */
  static _byCountryAndDefaultHiearchy(countryCode, defaultHierarchy) {
    return function (item) {
      let countries = (item && item.properties && item.properties.countries.toLowerCase()) || (item && item.metadata && item.metadata.countries.toLowerCase());
      let hierarchies = (item && item.properties && item.properties.hierarchy) || (item && item.metadata && item.metadata.hierarchy);
      return countries && countries.indexOf(countryCode.toLowerCase()) >= 0 && hierarchies && hierarchies.indexOf(defaultHierarchy) >= 0;
    };
  }
  // static _byDefaultHierarchy (defaultHierarchy: string) {
  //   return function (item: any) {
  //     let hierarchies = item && item.properties && item.properties.hierarchy
  //     if (hierarchies && hierarchies.indexOf(defaultHierarchy) >= 0)
  //       return true
  //     else
  //       return false
  //   }
  // }
  static _getEsriInfographicReportTemplateItems(countryCode) {
    return GEClient.execute({ taskPath: '/GeoEnrichment/Infographics/Standard/' + countryCode })
      .then((reportTemplatesResponse) => {
      let reportTemplates = reportTemplatesResponse.reports;
      return reportTemplates;
    });
  }
  static _getSharedInfographicReportTemplateItems(username, orgId) {
    let query = 'type:"Report Template" ' +
      '(access:shared OR access:org OR (access:public AND orgid:' +
      orgId +
      ')) ' +
      ' typekeywords:esriWebInfographicReport ' +
      ' NOT owner:' +
      username;
    return ReportTemplatesManager._searchItems(query, ReportTemplatesManager._infographicFilter);
  }
  static _getGalleryInfographicReportTemplateItems() {
    let query = 'type:"Report Template" ' +
      ' typekeywords:esriWebGalleryInfographicReport ' +
      ' owner:(esri_reports OR esri_reports_test)';
    return ReportTemplatesManager._searchItems(query, ReportTemplatesManager._infographicFilter, {
      start: 1,
      num: 1000,
      sortField: 'modified',
      sortOrder: 'desc',
      q: query
    });
  }
  static _getUserInfographicReportTemplateItems(username) {
    return new Promise((resolve, reject) => {
      let query = 'type:"Report Template"' +
        ' typekeywords:esriWebInfographicReport ' +
        ' owner:' +
        username;
      let userIgDeferred = ReportTemplatesManager._searchItems(query, ReportTemplatesManager._infographicFilter);
      let userGalleryIgDeferred = ReportTemplatesManager._getUserGalleryInfographicReportTemplateItems();
      Promise.allSettled([userIgDeferred, userGalleryIgDeferred]).then((res) => {
        let userIgItems = res[0].value ? res[0].value : [];
        let userGalleryIgItems = res[1].value ? res[1].value : [];
        resolve(userIgItems.concat(userGalleryIgItems));
      }, (rejected) => {
        reject(rejected);
      });
    });
  }
  static _getFavoriteReportsIds(username, countryId) {
    return new Promise((resolve, reject) => {
      let query = 'type:"Web Mapping Application" typekeywords:"BAUserData.FavoriteReports" owner:' +
        username;
      ReportTemplatesManager._searchItems(query, null)
        .then((favoriteReportsItems) => {
        let favReportsItem = favoriteReportsItems && favoriteReportsItems[0];
        if (!favReportsItem) {
          resolve([]); //no favorite reports
          return;
        }
        ArcGISClient.getItemData(favReportsItem.id)
          .then((itemData) => {
          if (!itemData) {
            resolve([]); //no favorite reports
            return;
          }
          let favReportsInfos = itemData.data && itemData.data['favorites' + countryId];
          if (!favReportsInfos) {
            resolve([]); //no favorite reports
            return;
          }
          let ret = favReportsInfos.map(function (info) {
            return info.reportID;
          });
          resolve(ret);
        })
          .catch((err) => reject(err));
      })
        .catch((err) => reject(err));
    });
  }
  /**
   * Gets infographic templates that user added to "My Templates" from "Gallery"
   *
   * @returns {*}
   * @private
   */
  static _getUserGalleryInfographicReportTemplateItems() {
    return new Promise((resolve, reject) => {
      WebAppSettings.getUserGalleryInfographicReportIds()
        .then((reportIds) => {
        if (!reportIds || !reportIds.length) {
          resolve([]);
          return;
        }
        let query = reportIds.map((id) => 'id:' + id).join(' OR ');
        ReportTemplatesManager._searchItems(query, ReportTemplatesManager._infographicFilter)
          .then((items) => {
          resolve(items);
        })
          .catch((err) => reject(err));
      })
        .catch((err) => reject(err));
    });
  }
  static _searchItems(query, resultsFilter, options) {
    return new Promise((resolve, reject) => {
      let params = options || {
        start: 1,
        num: 1000,
        sortField: 'title',
        sortOrder: 'asc',
        q: query
      };
      ArcGISClient.searchAllItems({}, params)
        .then((resultItems) => {
        let res = resultsFilter
          ? resultItems.filter(resultsFilter)
          : resultItems;
        resolve(res);
      })
        .catch((err) => reject(err));
    });
  }
  static _createReportTemplateInfos(portalItems, countryCode) {
    let templates = [];
    portalItems.forEach(function (item) {
      let properties = item.properties;
      if (properties) {
        let countries = properties.countries;
        if (SettingsHelper.isTrueString(properties.isComparisonReport)) {
          return;
        }
        if (countries && countries.indexOf(countryCode) !== -1) {
          let rti = {
            reportID: { itemid: item.id },
            formats: properties.formats && properties.formats.split(','),
            headers: [],
            metadata: {
              author: properties.author,
              categories: [],
              countries: countries,
              coverage: properties.coverage,
              hierarchy: GEClient.getGEDefaultHierarchy(countryCode),
              keywords: properties.keywords,
              owner: item.owner,
              title: item.title,
              type: properties.type
            }
          };
          templates.push(rti);
        }
      }
    });
    return templates;
  }
  /**
   * Function for Array.filter that removes non-infographic template items
   *
   * Left here to support filtering out some legacy infographic reports that
   * were not updated on portal for some reasons.
   * @param reportTemplateItem
   * @return {*|boolean}
   * @private
   */
  static _infographicFilter(reportTemplateItem) {
    let p = reportTemplateItem.properties;
    //leave ordinary infographic, but remove single infographics, hidden and blank reports if any
    //boolean properties may be stored as strings
    return (SettingsHelper.isTrueString(p.isGraphicReport) &&
      !SettingsHelper.isTrueString(p.isSingleInfographic) &&
      !SettingsHelper.isTrueString(p.isHidden) &&
      !SettingsHelper.isTrueString(p.isBlank));
  }
}
ReportTemplatesManager._geReportTemplatesCache = {};

class GEClient {
  static async getInfographicTemplatesList(countryCode, full = false, token) {
    return await ReportTemplatesManager.getInfographicReportTemplateItems(countryCode || 'US', full, token);
  }
  static async getClassicReportsTemplatesList(countryCode, full = false) {
    return await ReportTemplatesManager.getReportTemplates(countryCode || 'US', full);
  }
  static execute(geParameters) {
    return new Promise((resolve, reject) => {
      const geoenrichmentUrl = ArcGISClient.getGeoenrichmentUrl();
      // do deep copy, instead of $j.extend({}, params)
      var _geParams = geParameters ? JSON.parse(JSON.stringify(geParameters)) : {};
      if (!_geParams.data)
        _geParams.data = {};
      _geParams.data.forStorage = false;
      // todo: implement queue for this requests, key is _geParams.taskPath or hex_sha1(geParameters)
      ArcGISClient.executeRequest({
        url: geoenrichmentUrl + _geParams.taskPath,
        data: _geParams.data,
        isStandardGeoQuery: _geParams.isStandardGeoQuery
      }).then(resolve).catch(reject);
    });
  }
  static createReport(createReportParams) {
    return new Promise((resolve, reject) => {
      const geUrl = ArcGISClient.getGeoenrichmentUrl();
      let createReportUrl = geUrl.toString() + '/Geoenrichment/CreateReport';
      ArcGISClient.executeRequest({
        url: createReportUrl,
        data: createReportParams
      }).then(resolve).catch(reject);
    });
  }
  /**
   * Performs standard geography search by textual geography query.
   *
   * Note: be patient while setting request options. `sourceCountry`, `geographyLayers`, `optionalCountryHierarchy`
   * params are coupled and country-specific, so update it simultaneously
   *
   * @param geographyQuery String to search for
   * @param options Options to refine search:
   *    featureLimit
   *    geographyLayers
   *    useFuzzySearch
   *    sourceCountry
   *    optionalCountryHierarchy
   * @see https://developers.arcgis.com/rest/geoenrichment/api-reference/standard-geography-query.htm
   */
  static searchStdGeography(geographyQuery, options) {
    return new Promise(async (resolve, reject) => {
      if (!geographyQuery || !geographyQuery.length) {
        resolve([]);
        return;
      }
      let defaultHierarchy = await this.getGEDefaultHierarchy(options?.sourceCountry || 'US', options?.token);
      let geParams = {
        geographyQuery: geographyQuery,
        featureLimit: options?.featureLimit || 10,
        geographyLayers: options?.geographyLayers || ['US.States', 'US.Counties', 'US.Places'],
        useFuzzySearch: options?.useFuzzySearch,
        sourceCountry: options?.sourceCountry || 'US',
        langCode: options?.langCode || "en-us",
        optionalCountryHierarchy: options?.optionalCountryHierarchy || defaultHierarchy
      };
      this.standardGeographyQuery(geParams)
        .then(features => resolve(features))
        .catch(error => reject(error));
    });
  }
  /**
   * Gets standard geography by layer id, feature id and some optional parameters.
   *
   * @param layerId Id of layer to look up in
   * @param featureId Id of feature to request
   * @param options Options to refine query:
   *    featureLimit
   *    returnGeometry
   *    generalizationLevel
   *    sourceCountry
   *    langCode
   *    optionalCountryHierarchy
   * @see https://developers.arcgis.com/rest/geoenrichment/api-reference/standard-geography-query.htm
   */
  static requestStdGeography(layerId, featureId, options) {
    return new Promise(async (resolve, reject) => {
      let defaultHierarchy = await this.getGEDefaultHierarchy(options?.sourceCountry || 'US', options?.token);
      let geParams = {
        geographyLayers: [layerId],
        featureLimit: options?.featureLimit || 1,
        returnGeometry: options?.returnGeometry,
        // outSR: JSON.stringify({wkid: 102100, latestWkid: 3857}),
        generalizationLevel: options?.generalizationLevel || 0,
        geographyIDs: [featureId],
        sourceCountry: options?.sourceCountry || 'US',
        langCode: options?.langCode || "en-us",
        optionalCountryHierarchy: options?.optionalCountryHierarchy || defaultHierarchy
      };
      this.standardGeographyQuery(geParams)
        .then(features => resolve(features))
        .catch(error => reject(error));
    });
  }
  static standardGeographyQuery(params) {
    return new Promise((resolve, reject) => {
      let geParams = {
        data: params,
        isStandardGeoQuery: true,
        taskPath: '/StandardGeographyQuery/execute'
      };
      GEClient.execute(geParams).then((queryResponse) => {
        let result = queryResponse &&
          queryResponse.results &&
          queryResponse.results.length &&
          queryResponse.results[0];
        let features = result &&
          result.value &&
          result.value.features;
        if (features)
          resolve(features);
        else {
          let errorMessages = queryResponse &&
            queryResponse.messages &&
            queryResponse.messages.length;
          reject(errorMessages);
        }
      }).catch(error => {
        reject(error);
      });
    });
  }
  static getStoredDefaultHierarchy(country) {
    let result;
    if (window.localStorage) {
      let d = localStorage.getItem(GEClient._defaultHierarchyStorageName);
      if (d && _ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_0__.U.hasText(d)) {
        let obj = JSON.parse(d);
        result = obj[country];
        // save current defaults in static instance
        GEClient._defaultHierarchies = obj;
      }
    }
    return result;
  }
  /**  setStoredDefaultHierarchy
   *       Stores a default hierarchy name for a given country
   *
   * Stored object is in this format:
   *  {
   *    "US" : "census2020",
   *    "FR" : "FRA_EsriFrance"
   *  }
   * @param country - identifier (ex: 'US')
   * @param name    - default hierarchy name for the country
   */
  static setStoredDefaultHierarchy(country, name) {
    try {
      GEClient.getStoredDefaultHierarchy(country);
      if (!GEClient._defaultHierarchies)
        GEClient._defaultHierarchies = {};
      GEClient._defaultHierarchies[country] = name;
      if (window.localStorage) {
        localStorage.setItem(GEClient._defaultHierarchyStorageName, JSON.stringify(GEClient._defaultHierarchies));
      }
    }
    catch (ex) {
      console.log('GEClient error', ex);
    }
  }
  //   /**
  //      * Gets hierarchy for specified country: either set by id in app settings or default one
  //      *
  //      * @param countryCode 2-letter or 3-letter country code
  //      * @returns {*} Hierarchy for specified country (not null)
  //      */
  //   getPreferredHierarchy: function (countryCode) {
  //     var countryData = BA.CountryDataManager._countryData;
  //     BA.log.info("countryData: ", countryData);
  //     var country = countryData[countryCode];
  //     BA.log.info("countryCode: ", countryCode);
  //     if (country.hierarchies){
  //         for(var i=0; i < country.hierarchies.length; i++){
  //             var h = country.hierarchies[i];
  //             BA.log.info("hierarchy[i]: ", h);
  //             if(h.default){
  //                 BA.log.info("default hierarchy: ",  h);
  //                 // return if default hierarchy is true
  //                 return h;
  //             }
  //         }
  //         BA.log.info("default hierarchy not found using: ", h);
  //         return country.hierarchies[0];
  //         // return first result if no default is found
  //     }
  //     return false;
  // },
  /**  getGEDefaultHierarchy
   *      Returns the default hierarchy name for the given country.
   *      The default may be returned from a localStorage value
   *      saved previously using GEClient.setStoredDefaultHierarchy() or
   *      requested from GE.
   *
   *      In the case the default is fetched from GE, that default
   *      will be cached in local storage
   *
   * @param country - identifier (ex: 'US')
   * @param token - auth token (optional)
   */
  static getGEDefaultHierarchy(country, token) {
    return new Promise((resolve, reject) => {
      let c = 'US'; // default
      if (country && _ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_0__.U.hasText(country))
        c = country;
      // pull default hierarchy from localStorage if available
      let defaultHierarchy = GEClient.getStoredDefaultHierarchy(c);
      if (defaultHierarchy && _ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_0__.U.hasText(defaultHierarchy))
        resolve(defaultHierarchy);
      // Must request default from GE server
      // request= https://geoenrich.arcgis.com/arcgis/rest/services/World/geoenrichmentserver/Geoenrichment/Countries/US?f=pjson
      const geUrl = ArcGISClient.getGeoenrichmentUrl();
      let url = geUrl.toString() + '/Geoenrichment/Countries/' + country + '?f=pjson';
      const data = token ? {
        appID: GEClient.appID,
        token: token
      } :
        {
          appID: GEClient.appID
        };
      ArcGISClient.executeRequest({
        url: url,
        data
      }).then((e) => {
        let def = 'US';
        let arr = e.countries[0].hierarchies;
        if (arr && arr.length > 0) {
          for (let ii = 0; ii < arr.length; ii++) {
            let h = arr[ii];
            if (h.default) {
              def = h.ID;
              // save default to local storage
              GEClient.setStoredDefaultHierarchy(c, h.ID);
              break;
            }
          }
        }
        resolve(def);
      }).catch(reject);
    });
  }
  // async request for std geog levels
  static getStandardGeographyLevels(country, langCode) {
    return new Promise((resolve, reject) => {
      if (!country || !_ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_0__.U.hasText(country))
        country = 'US'; // default
      // default hierarchy
      GEClient.getGEDefaultHierarchy(country).then((defHierarchyName) => {
        // Request geography levels
        // request= https://geoenrich.arcgis.com/arcgis/rest/services/World/geoenrichmentserver/Geoenrichment/StandardGeographyLevels/US?f=json
        const geUrl = ArcGISClient.getGeoenrichmentUrl();
        // let url: string = geUrl.toString() + '/Countries/' + country + '?f=pjson';
        let url = geUrl.toString() + '/Geoenrichment/StandardGeographyLevels/' + country + '?f=pjson';
        ArcGISClient.executeRequest({
          url: url,
          data: {
            langCode: langCode ? langCode : "en-us"
          }
        }).then((e) => {
          let hier;
          if (e && e.geographyLevels && e.geographyLevels[0] && e.geographyLevels[0].hierarchies) {
            let arr = e.geographyLevels[0].hierarchies;
            for (let ii = 0; ii < arr.length; ii++) {
              if (arr[ii].ID == defHierarchyName) {
                hier = arr[ii];
                break;
              }
            }
            if (!hier)
              hier = arr[0];
          }
          resolve(hier);
        }).catch(reject);
      }).catch(reject);
    }).catch(error => {
      console.log('GEClient error', error);
    });
  }
}
GEClient._defaultHierarchyStorageName = 'GEClient-default-hierarchy';
// NOTE!!: Hardcoded for Experience Builder, we need to modify to be passed in by consuming application to allow for multi app use
GEClient.appID = "esriexperiencebuilder";
GEClient.enrich = function (enrichRequestParams) {
  return new Promise(async (resolve, reject) => {
    const params = enrichRequestParams;
    var enrichUrl = Environments.getUrl('geoenrich') + '/Geoenrichment/Enrich';
    params.forStorage = false;
    ArcGISClient.executeRequest({
      url: enrichUrl,
      data: params
    }).then(function (enrichResponse) {
      var result = enrichResponse && enrichResponse.results && enrichResponse.results.length && enrichResponse.results[0];
      var featureSet = result && result.value && result.value.FeatureSet && result.value.FeatureSet.length && result.value.FeatureSet[0];
      if (featureSet.features && featureSet.features.length) {
        resolve(enrichResponse);
      }
      else {
        var errorDescription = enrichResponse && enrichResponse.messages && enrichResponse.messages.length && enrichResponse.messages[0].description;
        if (!errorDescription)
          errorDescription = 'getfacts-no-data';
        reject(errorDescription);
      }
    }, function (err) {
      reject(err);
    });
  });
};



//# sourceMappingURL=GEClient-1a83a657.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,