"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_arcgis-raster-function-editor_-978ace"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/common-strings.bs-778fa490.js":
/*!**************************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/common-strings.bs-778fa490.js ***!
  \**************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   addRaster: () => (/* binding */ addRaster),
/* harmony export */   addScalar: () => (/* binding */ addScalar),
/* harmony export */   breadcrumb: () => (/* binding */ breadcrumb),
/* harmony export */   breadcrumbEditor: () => (/* binding */ breadcrumbEditor),
/* harmony export */   cancel: () => (/* binding */ cancel),
/* harmony export */   category: () => (/* binding */ category),
/* harmony export */   categoryNames: () => (/* binding */ categoryNames),
/* harmony export */   close: () => (/* binding */ close),
/* harmony export */   copy: () => (/* binding */ copy),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   defaultModelName: () => (/* binding */ defaultModelName),
/* harmony export */   definitionQuery: () => (/* binding */ definitionQuery),
/* harmony export */   description: () => (/* binding */ description),
/* harmony export */   deselectFunction: () => (/* binding */ deselectFunction),
/* harmony export */   details: () => (/* binding */ details),
/* harmony export */   dialogTitle: () => (/* binding */ dialogTitle),
/* harmony export */   dontSave: () => (/* binding */ dontSave),
/* harmony export */   enterFURL: () => (/* binding */ enterFURL),
/* harmony export */   enterURL: () => (/* binding */ enterURL),
/* harmony export */   error: () => (/* binding */ error),
/* harmony export */   errorTitle: () => (/* binding */ errorTitle),
/* harmony export */   everyone: () => (/* binding */ everyone),
/* harmony export */   f32PixelType: () => (/* binding */ f32PixelType),
/* harmony export */   f64PixelType: () => (/* binding */ f64PixelType),
/* harmony export */   failedToLoadLayer: () => (/* binding */ failedToLoadLayer),
/* harmony export */   folder: () => (/* binding */ folder),
/* harmony export */   general: () => (/* binding */ general),
/* harmony export */   groupFieldName: () => (/* binding */ groupFieldName),
/* harmony export */   groupItemsBy: () => (/* binding */ groupItemsBy),
/* harmony export */   groups: () => (/* binding */ groups),
/* harmony export */   invalidRFTMessage: () => (/* binding */ invalidRFTMessage),
/* harmony export */   isDataset: () => (/* binding */ isDataset),
/* harmony export */   isPublic: () => (/* binding */ isPublic),
/* harmony export */   item: () => (/* binding */ item),
/* harmony export */   itemGroup: () => (/* binding */ itemGroup),
/* harmony export */   loadingLayer: () => (/* binding */ loadingLayer),
/* harmony export */   matchVariables: () => (/* binding */ matchVariables),
/* harmony export */   mosaic: () => (/* binding */ mosaic),
/* harmony export */   multidimensionalRules: () => (/* binding */ multidimensionalRules),
/* harmony export */   name: () => (/* binding */ name),
/* harmony export */   noTagErrorMsg: () => (/* binding */ noTagErrorMsg),
/* harmony export */   noTitleErrorMsg: () => (/* binding */ noTitleErrorMsg),
/* harmony export */   noTitleTagErrorMsg: () => (/* binding */ noTitleTagErrorMsg),
/* harmony export */   ok: () => (/* binding */ ok),
/* harmony export */   organization: () => (/* binding */ organization),
/* harmony export */   outputPixelType: () => (/* binding */ outputPixelType),
/* harmony export */   owner: () => (/* binding */ owner),
/* harmony export */   parameter: () => (/* binding */ parameter),
/* harmony export */   parameters: () => (/* binding */ parameters),
/* harmony export */   properties: () => (/* binding */ properties),
/* harmony export */   raster: () => (/* binding */ raster),
/* harmony export */   rasterFunctionEditor: () => (/* binding */ rasterFunctionEditor),
/* harmony export */   rasterFunctions: () => (/* binding */ rasterFunctions),
/* harmony export */   rfxLicenseInfo: () => (/* binding */ rfxLicenseInfo),
/* harmony export */   s16PixelType: () => (/* binding */ s16PixelType),
/* harmony export */   s32PixelType: () => (/* binding */ s32PixelType),
/* harmony export */   s8PixelType: () => (/* binding */ s8PixelType),
/* harmony export */   save: () => (/* binding */ save),
/* harmony export */   saveAs: () => (/* binding */ saveAs),
/* harmony export */   saveUtils: () => (/* binding */ saveUtils),
/* harmony export */   savingMessage: () => (/* binding */ savingMessage),
/* harmony export */   scalar: () => (/* binding */ scalar),
/* harmony export */   search: () => (/* binding */ search),
/* harmony export */   selectFeature: () => (/* binding */ selectFeature),
/* harmony export */   selectFunction: () => (/* binding */ selectFunction),
/* harmony export */   selectRaster: () => (/* binding */ selectRaster),
/* harmony export */   serviceURL: () => (/* binding */ serviceURL),
/* harmony export */   setGroupSharing: () => (/* binding */ setGroupSharing),
/* harmony export */   setSharingLevel: () => (/* binding */ setSharingLevel),
/* harmony export */   share: () => (/* binding */ share),
/* harmony export */   shareWith: () => (/* binding */ shareWith),
/* harmony export */   success: () => (/* binding */ success),
/* harmony export */   tagFieldName: () => (/* binding */ tagFieldName),
/* harmony export */   tags: () => (/* binding */ tags),
/* harmony export */   title: () => (/* binding */ title),
/* harmony export */   toolDetailsEditor: () => (/* binding */ toolDetailsEditor),
/* harmony export */   toolEditor: () => (/* binding */ toolEditor),
/* harmony export */   toolModeler: () => (/* binding */ toolModeler),
/* harmony export */   tryAgain: () => (/* binding */ tryAgain),
/* harmony export */   type: () => (/* binding */ type),
/* harmony export */   u16PixelType: () => (/* binding */ u16PixelType),
/* harmony export */   u32PixelType: () => (/* binding */ u32PixelType),
/* harmony export */   u8PixelType: () => (/* binding */ u8PixelType),
/* harmony export */   unionDimensions: () => (/* binding */ unionDimensions),
/* harmony export */   unknownPixelType: () => (/* binding */ unknownPixelType),
/* harmony export */   unsavedTitle: () => (/* binding */ unsavedTitle),
/* harmony export */   unsavedWarningExisting: () => (/* binding */ unsavedWarningExisting),
/* harmony export */   unsavedWarningNew: () => (/* binding */ unsavedWarningNew),
/* harmony export */   userStartDirection: () => (/* binding */ userStartDirection),
/* harmony export */   variables: () => (/* binding */ variables),
/* harmony export */   viewerModeMessage: () => (/* binding */ viewerModeMessage),
/* harmony export */   viewerModeTitle: () => (/* binding */ viewerModeTitle),
/* harmony export */   warning: () => (/* binding */ warning)
/* harmony export */ });
const ok = "U redu";
const cancel = "Odustani";
const enterURL = "Unesite URL usluge slike";
const serviceURL = "URL usluge";
const selectRaster = "Odaberi raster";
const failedToLoadLayer = "Učitavanje sloja nije uspjelo";
const loadingLayer = "Učitavanje sloja";
const selectFeature = "Odaberi sloj geoobjekata";
const enterFURL = "Unesi URL usluge geoobjekata";
const addRaster = "Dodaj varijablu rastera";
const addScalar = "Dodaj konstantu";
const raster = "Raster";
const scalar = "Skalar";
const defaultModelName = "Predložak funkcije rastera";
const general = "Općenito";
const parameters = "Parametri";
const variables = "Varijable";
const name = "Naziv";
const description = "Opis";
const parameter = "Parametar";
const isPublic = "Javno je";
const isDataset = "Skup je podataka";
const unknownPixelType = "Nepoznato";
const outputPixelType = "Vrsta izlaznih piksela";
const u8PixelType = "Nepotpisano 8 bita";
const s8PixelType = "Potpisano 8 bita";
const u16PixelType = "Nepotpisano 16 bita";
const s16PixelType = "Potpisano 16 bita";
const u32PixelType = "Nepotpisano 32 bita";
const s32PixelType = "Potpisano 32 bita";
const f32PixelType = "Plutajuće 32 bita";
const f64PixelType = "Dvostruko 64 bita";
const properties = "Svojstva";
const multidimensionalRules = "Višedimenzionalna pravila";
const matchVariables = "Varijable podudaranja";
const unionDimensions = "Dimenzije sjedinjenja";
const rasterFunctionEditor = {
	invalidRFTMessage: "Predložak rasterske funkcije nije važeći.",
	rfxArgsEditor: {
		outputRaster: "Izlazni raster",
		raster: "Raster",
		unsupportedDataTypeWarning: "Sljedeći argumenti nisu prikazani jer trenutačno nisu podržani.",
		unsupportedFunction: "Sadrži trenutačno nepodržane rasterske funkcije."
	},
	rfxRasterInput: {
		selectLayer: "Odabir sloja",
		browseLayers: "Pretražite slojeve",
		rfxVariable: "Varijabla rasterske funkcije"
	},
	rfxBandCombinationEditor: {
		methodLabel: "Metoda",
		bandLabel: "Kanal",
		combinationLabel: "Kombinacija"
	},
	rfxRemapGrid: {
		minimum: "Minimum",
		maximum: "Maksimum",
		output: "Izlaz",
		noData: "Bez podataka",
		remapValuesLabel: "Ponovno kartiraj vrijednosti"
	},
	rfxNamedRasterEditor: {
		rasterVariables: "Varijable rastera",
		deleteSelectedVars: "Ukloni odabrane varijable"
	},
	rfxClippingGeometry: {
		clippingLayer: "Sloj rezanja",
		clippingRaster: "Raster rezanja",
		clippingGeometry: "Geometrija rezanja",
		customExtent: "Prilagođeni obuhvat",
		outputExtent: "Izlazni obuhvat",
		currentExtent: "Trenutačni obuhvat karte",
		drawLabel: "Crtaj"
	},
	rfxCustomExtent: {
		top: "Vrh",
		right: "Desno",
		bottom: "Dno",
		left: "Lijevo"
	},
	rfxRasterArrayEditor: {
		moveUp: "Premjesti gore",
		moveDown: "Premjesti dolje",
		remove: "Ukloni"
	},
	rfxStatisticsGrid: {
		stdDev: "Standardno Dev.",
		min: "Min.",
		max: "Maks.",
		mean: "Prosjek"
	},
	rfxWeightedSumTableEditor: {
		weightedSumTable: "Tablica ponderiranih zbrojeva",
		id: "ID",
		layer: "Sloj",
		field: "Polje",
		weight: "Težina",
		value: "Vrijednost",
		selectLayer: "Odabir sloja"
	},
	rfxWeightedOverlayTableEditor: {
		weightedOverlayTable: "Tablica ponderiranih preklapanja",
		id: "ID",
		layer: "Sloj",
		field: "Polje",
		influence: "Utjecaj",
		sumOfInfluence: "Zbroj utjecaja",
		value: "Vrijednost",
		remapTable: "Ponovno kartiraj tablicu",
		scale: "Mjerilo",
		scales: "Ljestvice",
		selectRaster: "Odaberi raster"
	},
	rfxFeatureSelect: {
		addFeatureLayer: "Potraži sloj geoobjekata",
		addPointLayer: "Potraži točkasti sloj"
	},
	rfxFieldSelect: {
		value: "Vrijednost",
		count: "Zbroj"
	},
	rfxAttributeTable: {
		tableType: "Vrsta tablice",
		manual: "Ručno",
		external: "Vanjski",
		minVal: "Minimalna vrijednost",
		maxVal: "Maksimalna vrijednost",
		baseClassName: "Osnovni naziv razreda",
		colorScheme: "Shema boja",
		defaultClassName: "Oznaka_",
		generateTable: "Generiraj tablicu",
		browseTable: "Pregledaj tablicu",
		value: "Vrijednost",
		classname: "Naziv razreda",
		color: "Boja"
	},
	rfxFieldNumberSwitchable: {
		number: "Brojčano",
		field: "Polje",
		string: "Tekst",
		linearUnit: "Linearna jedinica"
	},
	rfxPropertySet: {
		name: "Naziv",
		value: "Vrijednost"
	},
	rfxConversionGrid: {
		size: "Veličina"
	},
	rfxTransposeBit: {
		bitPattern: "Bitovni obrazac",
		outputBit: "Izlazni bit",
		inputBit: "Ulazni bit"
	},
	rfxSpatialReference: {
		placeHolder: "Preciziraj prema ključnoj riječi",
		coordinateSystem: "Koordinatni sustav",
		gcs: "Geografski koordinatni sustav",
		pcs: "Projicirani koordinatni sustav",
		vcs: "Visinski koordinatni sustav"
	}
};
const rfxLicenseInfo = "Ovaj predložak rasterske funkcije može se upotrijebiti za obradu snimki pomoću ArcGIS Image Servera.";
const rasterFunctions = {
	rfx: {
		aCosHName: "ACosH",
		aCosHSnip: "Izračunava inverzni hiperbolni kosinus ćelija u rasteru.",
		aCosHDesc: "Funkcija izračunava inverzni hiperbolni kosinus piksela u rasteru.",
		aCosName: "ACos",
		aCosSnip: "Izračunava inverzni kosinus piksela u rasteru.",
		aCosDesc: "Ova funkcija rastera izračunava inverzni kosinus ćelija u rasteru. U matematici sve trigonometrijske funkcije imaju definirani raspon valjanih ulaznih vrijednosti koje se nazivaju domenom. Izlazne vrijednosti svake funkcije također imaju definirani raspon. Za ovaj je alat domena [-1, 1], a raspon [0, pi].",
		aSinHName: "ASinH",
		aSinHSnip: "Izračunava inverzni hiperbolni sinus ćelija u rasteru.",
		aSinHDesc: "Funkcija izračunava inverzni hiperbolni sinus piksela u rasteru.",
		aSinName: "ASin",
		aSinSnip: "Izračunava inverzni sinus ćelija u rasteru.",
		aSinDesc: "Funkcija izračunava inverzni sinus piksela u rasteru.",
		aTan2Name: "ATan2",
		aTan2Snip: "Izračunava inverzni tangens (na temelju x, y) ćelija u rasteru.",
		aTan2Desc: "Funkcija izračunava inverzni tangens (na temelju x, y) piksela u rasteru.",
		aTanHName: "ATanH",
		aTanHSnip: "Izračunava inverzni hiperbolni tangens ćelija u rasteru.",
		aTanHDesc: "Funkcija izračunava inverzni hiperbolni tangens piksela u rasteru.",
		aTanName: "ATan",
		aTanSnip: "Izračunava inverzni tangens ćelija u rasteru.",
		aTanDesc: "Funkcija izračunava inverzni tangens piksela u rasteru.",
		absName: "Abs",
		absSnip: "Izračunava apsolutnu vrijednost ćelija u rasteru.",
		absDesc: "Funkcija Abs izračunava apsolutnu vrijednost piksela u rasteru.",
		reflectanceName: "Vidljiva refleksija",
		reflectanceSnip: "Pretvara sirove slike u vrijednosti gornjeg sloja atmosfere uzimajući u obzir karakteristike senzora, položaj sunca i vrijeme prikupljanja.",
		reflectanceDesc: "Ova funkcija podešava vrijednosti digitalnog broja (DN) svjetline slike za neke satelitske senzore. Podešavanja se temelje na visini sunca, datumu prikupljanja i svojstvima senzora kako bi se postavili povećanje i otklon za svaki kanal. Ova se funkcija upotrebljava za podešavanje refleksije ili svjetline, vrijednosti nekih satelitskih snimaka na temelju osvjetljenja scene i postavki pojačanja senzora. Slike su prilagođene teoretski uobičajenom stanju osvjetljenja, tako da bi trebalo biti manje varijacija između scena iz različitih datuma i različitih senzora. To može biti korisno za klasifikaciju slika, balansiranje boja i stvaranje mozaika. Ova se funkcija može upotrebljavati samo s određenim slikama. Primjenjivi su senzori Landsat MSS, Landsat TM, Landsat ETM+, Landsat 8, IKONOS, QuickBird, GeoEye-1, RapidEye, DMCii, WorldView-1, WorldView-2, SPOT 6 i Pleiades.<div><br/>Funkcija izvodi dva ispravka. Prvi se temelji na postavkama pojačanja. Izvorne vrijednosti svjetline ponovno se stvaraju iz vrijednosti slike preokretanjem jednadžbi pojačanja. Drugi ispravak odnosi se na razlike u kutu i svjetline sunca. Izvorne vrijednosti svjetline prilagođene su uobičajenim uvjetima osvjetljenja normaliziranjem scena snimljenih u uvjetima varijabilnog osvjetljenja. Općenito, dok je vrsta izlaznih podataka slike ista kao i vrsta ulaznih podataka slike, izlazne vrijednosti niže su od ulaznih vrijednosti i pridružene su valjanom rasponu podataka.</div>",
		argStatisticsName: "ArgStatistics",
		argStatisticsSnip: "Izračunava statistiku arg uključujući Arg Max, Arg Min, Arg Median i Trajanje.",
		argStatisticsDesc: "Funkcija izračunava statistiku arg. U funkciji ArgStatistics postoje četiri metode: ArgMax, ArgMin, ArgMedian i Trajanje.",
		arithmeticName: "Aritmetički",
		arithmeticSnip: "Izvodi aritmetičku operaciju između dvaju rastera ili rastera i skalara.",
		arithmeticDesc: "Aritmetička funkcija izvodi aritmetičku operaciju između dvaju rastera ili rastera i skalara i obrnuto.",
		aspectSlopeName: "Ekspozicija i nagib",
		aspectSlopeSnip: "Stvara raster koji istovremeno prikazuje ekspoziciju (smjer) i nagib (strminu) kontinuirane površine, kao što je prikazano u digitalnom modelu visine terena.",
		aspectSlopeDesc: "Funkcija Ekspozicija i nagib stvara rasterski sloj koji istodobno prikazuje ekspoziciju i nagib površine. Ekspozicija određuje smjer padine maksimalne stope promjene vrijednosti od pojedinog do susjednog piksela. Ekspozicija se može smatrati smjerom nagiba. Vrijednosti izlaznog rastera bit će smjernica ekspozicije predstavljena nijansom (boja). Nagib predstavlja stopu promjene visine terena za svaki piksel digitalnog modela terena (DEM). Nagib predstavlja strminu površine i simbolizira se u tri razreda koji su prikazani pomoću zasićenja boje (svjetline).<div><br/>Vrijednosti piksela u izlaznom rasterskom prikazu ekspozicije i nagiba odražavaju kombinaciju ekspozicije i nagiba. Pikseli s vrijednostima ispod 20 smatraju se ravnim i prikazani su sivom bojom. Vrijednosti ekspozicije i nagiba od 21 i više prikazat će se s različitim zasićenjima kako slijedi: 21 do 30 —nisko zasićenje nagiba , 31 do 40 —umjereno zasićenje nagiba, 41 i više —visoko zasićenje nagiba</div>",
		aspectName: "Ekspozicija",
		aspectSnip: "Pokazuje u kojem je smjeru piksel okrenut, gdje je 0 prema sjeveru, a kutovi se povećavaju u smjeru kazaljke na satu do 360.",
		aspectDesc: "Funkcija Ekspozicije određuje smjer padine maksimalne stope promjene vrijednosti od pojedine do susjednih ćelija. Ekspozicija se može smatrati smjerom nagiba. Vrijednosti izlaznog rastera bit će smjernica ekspozicije.<div><br/>Ulaz za ovu funkciju je ulazni raster. Funkcija Ekspozicije često se primjenjuje na digitalni model visine terena (DEM). Prema zadanim se postavkama ekspozicija pojavljuje kao slika u sivim tonovima. Možete dodati funkciju Karta boja da biste specificirali određenu shemu boja ili omogućili osobi koja gleda mozaik da izmijeni simbologiju vlastitom shemom boja.</div>",
		tableName: "Atributna tablica",
		tableSnip: "Upotrebljava tablicu za imenovanje i simboliziranje vrijednosti u skupu podataka. Stupci za tablicu razdvojeni su zarezima: PixelValue, AttributeName, RedValue, GreenValue, BlueValue.",
		tableDesc: "Funkcija Atributna tablica omogućuje vam da definirate atributnu tablicu koja simbolizira skup podataka jednokanalnog mozaika ili raspon skupa rastera. <div><br/>To je korisno kada želite prikazati slike koje su prošle klasifikaciju prema korištenju zemljišta, kao što su šumsko zemljište, močvare, zemljište za usjeve i urbano zemljište. Osim toga, ako vaša tablica sadrži polja s nazivom crvena, zelena i plava, vrijednosti unutar tih polja upotrijebit će se kao karta boja pri prikazivanju slike.</div>",
		bandArithmeticName: "Aritmetika za kanal",
		bandArithmeticSnip: "Izračunava indekse pomoću unaprijed definiranih formula ili korisnički definiranog izraza.",
		bandArithmeticDesc: "Funkcija Aritmetika za kanal izvodi aritmetičku operaciju na kanalima skupa podataka rastera. Možete odabrati unaprijed definirane algoritme ili možete unijeti vlastitu formulu u jednom redu. Znakovi koji su podržani jesu -,+,/,* i unarni -.",
		thresholdName: "Binarno određivanje praga",
		thresholdSnip: "Organizira kontinuirane podatke u prvi plan i pozadinu minimiziranjem kovarijance između dva razreda.",
		thresholdDesc: "Kada skup podataka rastera ima bimodalnu distribuciju, ova funkcija stvara novi raster koji dijeli podatke u dva različita razreda. Stvara razred niske vrijednosti s crnim pikselima i razred visoke vrijednosti s bijelim pikselima.",
		bitwiseAndName: "Na razini bita",
		bitwiseAndSnip: "Izvodi operaciju funkcije Na razini bita i na binarnim vrijednostima dva ulazna rastera.",
		bitwiseAndDesc: "Na razini bita i izvodi operaciju funkcije Na razini bita i na binarnim vrijednostima dva ulazna rastera",
		bitwiseLeftShiftName: "Lijevi pomak na razini bita",
		bitwiseLeftShiftSnip: "Izvodi operaciju funkcije Lijevi pomak na razini bita na binarnim vrijednostima dva ulazna rastera.",
		bitwiseLeftShiftDesc: "Lijevi pomak na razini bita izvodi operaciju funkcije Lijevi pomak na razini bita na binarnim vrijednostima dva ulazna rastera",
		bitwiseNotName: "Ne na razini bita",
		bitwiseNotSnip: "Izvodi operaciju funkcije Ne na razini bita (komplement) na binarnim vrijednostima dva ulazna rastera.",
		bitwiseNotDesc: "Funkcija izvodi operaciju funkcije Ne na razini bita (komplement) na binarnim vrijednostima ulaznog rastera.",
		bitwiseOrName: "Na razini bita ili",
		bitwiseOrSnip: "Izvodi operaciju funkcije Na razini bita ili na binarnim vrijednostima dva ulazna rastera.",
		bitwiseOrDesc: "Funkcija izvodi operaciju funkcije Na razini bita ili na binarnim vrijednostima dva ulazna rastera. ",
		bitwiseRightShiftName: "Desni pomak na razini bita",
		bitwiseRightShiftSnip: "Izvodi operaciju funkcije Desni pomak na razini bita na binarnim vrijednostima dva ulazna rastera.",
		bitwiseRightShiftDesc: "Funkcija izvodi operaciju funkcije Desni pomak na razini bita na binarnim vrijednostima dva ulazna rastera.",
		bitwiseXorName: "Na razini bita X ili",
		bitwiseXorSnip: "Izvodi operaciju funkcije Na razini bita eXclusive ili na binarnim vrijednostima dva ulazna rastera.",
		bitwiseXorDesc: "Funkcija izvodi operaciju funkcije Na razini bita eXclusive ili na binarnim vrijednostima dva ulazna rastera",
		booleanAndName: "Istinita vrijednost i",
		booleanAndSnip: "Izvodi operaciju funkcije Istinita vrijednost i na vrijednostima ćelije dva ulazna rastera. Ako su obje ulazne vrijednosti istinite (nisu nula), izlazna je vrijednost 1. Ako su jedan ili oba unosa neistiniti (nula), izlazna je vrijednost 0.",
		booleanAndDesc: "Funkcija izvodi operaciju funkcije Istinita vrijednost i na vrijednostima piksela dva unosa. Ako su obje ulazne vrijednosti istinite (nisu nula), izlazna je vrijednost 1. Ako su jedna ili obje vrijednosti neistinite (nula), izlazna je vrijednost 0. ",
		booleanNotName: "Ne istinita vrijednost",
		booleanNotSnip: "Izvodi operaciju funkcije Ne istinita vrijednost (komplement) na vrijednostima ćelije ulaznog rastera. Ako su ulazne vrijednosti istinite (nisu nula), izlazna je vrijednost 0. Ako su ulazne vrijednosti neistinite (nula), izlazna je vrijednost 1.",
		booleanNotDesc: "Funkcija izvodi operaciju funkcije Ne istinita vrijednost (komplement) na vrijednostima piksela ulaznog rastera. Ako su ulazne vrijednosti istinite (nisu nula), izlazna je vrijednost 0. Ako su ulazne vrijednosti neistinite (nula), izlazna je vrijednost 1.",
		booleanOrName: "Istinita vrijednost ili",
		booleanOrSnip: "Izvodi operaciju funkcije Istinita vrijednost ili na vrijednostima ćelije dva ulazna rastera. Ako su jedna ili obje ulazne vrijednosti istinite (nisu nula), izlazna je vrijednost 1. Ako su obje ulazne vrijednosti neistinite (nula), izlazna je vrijednost 0.",
		booleanOrDesc: "Funkcija izvodi operaciju funkcije Istinita vrijednost ili na vrijednostima ćelije dva ulazna rastera. Ako su jedna ili obje ulazne vrijednosti istinite (nisu nula), izlazna je vrijednost 1. Ako su obje ulazne vrijednosti neistinite (nula), izlazna je vrijednost 0.",
		booleanXorName: "Istinita vrijednost X ili",
		booleanXorSnip: "Izvodi operaciju funkcije Istinita vrijednost eXclusive ili na vrijednostima ćelije dva ulazna rastera. Ako je jedna ulazna vrijednost istinita (nije nula) i druga je neistinita (nula), izlazna je vrijednost 1. Ako su obje ulazne vrijednosti istinite ili su obje neistinite, izlazna je vrijednost 0.",
		booleanXorDesc: "Funkcija izvodi operaciju funkcije Istinita vrijednost eXclusive ili na vrijednostima ćelije dva ulazna rastera. Ako je jedna ulazna vrijednost istinita (nije nula) i druga je vrijednost neistinita (nula), izlazna je vrijednost 1. Ako su obje ulazne vrijednosti istinite ili su obje neistinite, izlazna je vrijednost 0.",
		bufferedRasterName: "Stvaranja pojasa",
		bufferedRasterSnip: "Stvara pojas za blok(ove) piksela koji su posljednji pristupljeni.",
		bufferedRasterDesc: "Funkcija Stvaranja pojasa služi za optimiziranje performansi složenih lanaca funkcija. Pohranjuje izlazne vrijednosti u memoriji dijela lanca funkcija koji dolazi prije njega. <div><br/>Unesite ovu funkciju u Uređivač funkcija gdje želite pohraniti izlazne vrijednosti.</div>",
		rasterCalculatorName: "Kalkulator",
		rasterCalculatorSnip: "Izračunava rasterski iz matematičkog izraza koji se temelji na rasteru.",
		rasterCalculatorDesc: "Funkcija Kalkulator omogućuje vam stvaranje i izvođenje izraza i njihovo uključivanje u lance funkcija.",
		cellStatisticsName: "Statistike ćelije",
		cellStatisticsSnip: "Izračunava statistiku po ćeliji iz više rastera. Dostupne statistike su većina, maksimum, prosjek, srednja vrijednost, minimum, manjina, percentil, raspon, standardna devijacija, zbroj i raznolikost.",
		cellStatisticsDesc: "Ova funkcija izračunava statistiku iz više rastera, na temelju pojedinog piksela. Dostupne statistike čine većina, maksimum, prosjek, srednja vrijednost, minimum, manjina, raspon, standardna devijacija, zbroj i raznolikost.",
		classifyName: "Klasificiraj",
		classifySnip: "Dodjeljuje svaki piksel razredu. Uključite pomoćne podatke kao što je segmentirana slika.",
		classifyDesc: "Ova rasterska funkcija klasificira skup podataka rastera na temelju datoteke Esri Classifier Definition (.ecd) i unosa skupa podataka rastera. Datoteka .ecd koja se upotrebljava u funkciji Klasificiraj sadrži sve informacije za određeni skup podataka i klasifikator i generira se pomoću alata za obuku klasifikacije, kao što su alati Train Support Vector Machine ili Train Random Trees.",
		clipName: "Isječak",
		clipSnip: "Postavlja obuhvat rastera pomoću koordinata ili drugog skupa podataka.",
		clipDesc: "Ova funkcija reže raster pravokutnim oblikom prema definiranim obuhvatima ili će izrezati raster u oblik razreda ulaznog poligonskog gaoobjekta. Oblik koji definira isječak može izrezati obuhvat rastera ili izrezati područje unutar rastera.",
		colorspaceConversionName: "Pretvaranje modela boja",
		colorspaceConversionSnip: "Pretvara raster iz RGB-a u HSV i obrnuto.",
		colorspaceConversionDesc: "Funkcija Pretvaranja modela boja pretvara model boje slike iz prostora boje nijanse, zasićenja i vrijednosti (HSV) u crvenu, zelenu i plavu (RGB) ili obrnuto.<div><br/>Ova se funkcija može upotrebljavati u skupu podataka mozaika.</div>",
		colormapToRGBName: "Karta boje u RGB",
		colormapToRGBSnip: "Pretvara jednokanalni raster s kartom boje trokanalni (crveni, zeleni i plavi) raster.",
		colormapToRGBDesc: "Ova funkcija pretvara jednokanalni raster s kartom boje trokanalni (crveni, zeleni i plavi) raster.<div><br/>Ova je funkcija korisna kada trebate stvoriti trokanalni raster iz jednokanalnog rastera s pridruženom kartom boja. Vrijednosti na karti boja upotrijebit će se za stvaranje svakog crvenog, zelenog i plavog kanala. Ova se funkcija može upotrebljavati u skupu podataka mozaika.</div>",
		colormapName: "Karta boja",
		colormapSnip: "Mijenjaju se vrijednosti piksela kako bi se prikazali podaci rastera u sivim tonovima ili kao crvenu, zelenu, plavu (RGB) sliku, na temelju karte boja ili palete boja.",
		colormapDesc: "Funkcija Karte boja vrsta je renderera podataka rastera. Pretvara vrijednosti piksela da bi se prikazali podaci rastera kao sliku u sivim tonovima ili RGB sliku u boji na temelju sheme boja ili određenih boja u datoteci karte boja. Kartu boja možete upotrebljavati za predstavljanje analiziranih podataka, kao što je klasificirana slika ili prikaz topografske karte (ili indeksirane slike skenirane u boji).<div><br/>Karte boja sadrže skup vrijednosti koje su povezane s bojama koje se upotrebljavaju za prikaz jednokanalnog rastera u skladu s istim bojama. Svaka vrijednost piksela povezana je s bojom, definiranom kao skup RGB vrijednosti. Karte boja mogu podržavati bilo koju dubinu bita osim plutajuće točke. Također podržavaju pozitivne i negativne vrijednosti i mogu sadržavati nedostajuće vrijednosti mapirane bojama. Kada se prikazuje skup podataka s kartom boja koja sadrži nedostajuće vrijednosti, pikseli s tim nedostajućim vrijednostima neće biti prikazani.</div>",
		complexName: "Složeno",
		complexSnip: "Izdvaja veličinu iz kompleksnih brojeva.",
		complexDesc: "Ova funkcija izračunava veličinu iz složenih vrijednosti.<div><br/>Ova se funkcija obično upotrebljava s RADARSKIM snimkama koje imaju složenu vrstu podataka. Može se upotrebljavati u skupu podataka mozaika.</div>",
		compositeBandName: "Kompozitni kanali",
		compositeBandSnip: "Kombinira više skupova podataka u jedan višekanalni raster.",
		compositeBandDesc: "Funkcija Kompozitni kanali omogućuje vam da kombinirate rastere ikako biste formirali višekanalnu sliku.",
		conName: "Uvjet",
		conSnip: "Izvodi uvjetne operacija Ako, Tada, Osim. Kad se upotrijebi operator Uvjeta, obično je potrebno povezati dvije ili više funkcija, pri čemu jedna funkcija navodi kriterije, a druga funkcija je operator Uvjeta koji upotrebljava kriterije i diktira što bi trebali biti istinite i neistinite izlazne vrijednosti.",
		conDesc: "Funkcija Uvjeta postavlja piksele izlaznog rastera na temelju procjene ako/osim svakog ulaznog piksela. Vraća vrijednosti piksela iz Istinitog rastera ako je uvjetna procjena istinita (1) ili vraća vrijednosti piksela iz Neistinitog rastera ako je uvjetna procjena neistinita (0). Ovaj kriterij određen je izlaznom vrijednosti logičke matematičke funkcije, koja će biti ulazni raster.",
		constantName: "Konstanta",
		constantSnip: "Stvara virtualni raster s jednom vrijednošću piksela.",
		constantDesc: "Ova funkcija stvara virtualni raster s jednom vrijednošću piksela koja se može upotrijebiti u predlošcima rasterskih funkcija i za obradu skupa podataka mozaika.<div><br/>Vrijednost konstante upotrebljava se za svaku vrijednost piksela u rasteru.</div>",
		contourName: "Obris",
		contourSnip: "Stvara linije obrisa.",
		contourDesc: "Funkcija Obrisa generira linije obrisa spajanjem točaka s istom visinom terena iz skupa podataka rastera o visini terena. Obrisi su izolinije stvorene kao rasteri za vizualizaciju. Sljedeće ključne značajke čine ovu funkciju moćnom: obrisi se brzo i dinamički generiraju na vrlo velikim skupovima podataka, kao što je Visina terena svijeta; obrisi se mogu izgladiti kako bi se osigurao ljepši kartografski izgled uz održavanje točnosti obrisa; pruža se dinamička kontrola intervala obrisa; izlazne opcije uključuju linije obrisa, obrise indeksa i ispunjene obrise.<div><br/>Stvaranje sloja obrisa kao produkta rastera vrijedno je za širok raspon primjena jer se obrisi mogu prekriti na karti i pružiti informacije o terenu bez skrivanja temeljnih podataka. Korisni su u primjenama kao što su inženjering, poljoprivreda i upravljanje vodama.</div>",
		contrastBrightnessName: "Kontrast i svjetlina",
		contrastBrightnessSnip: "Podešava kontrast i svjetlinu rastera.",
		contrastBrightnessDesc: "Funkcija kontrasta i svjetline poboljšava izgled podataka rastera mijenjanjem svjetline i kontrasta unutar slike. Svjetlina povećava ukupan svijetli izgled slike—f, na primjer, tamne boje izgledaju svjetlije i svijetlije boje izgledaju bjelje—, dok kontrast podešava razliku između najtamnijih i najsvjetlijih boja.<div><br/>Pomoću ove funkcije mijenjaju se vrijednosti piksela; stoga bi ovu funkciju trebalo upotrebljavati kada želite poboljšati izgled podataka, a ne ako namjeravate upotrebljavati podatke kao dio analize koja bi zahtijevala sirove vrijednosti piksela. Ova je funkcija korisna prilikom objavljivanja podataka kao usluge za slike koja se može upotrebljavati u aplikacijama bez mogućnosti mijenjanja kontrasta i svjetline snimaka ili kako bi se osiguralo da se prikazuju pomoću željenih postavki.</div>",
		convolutionName: "Konvolucija",
		convolutionSnip: "Primjenjuje filtar za izoštravanje, zamućenje, otkrivanje rubova, izglađivanje ili gradijent na rasteru.",
		convolutionDesc: "Funkcija Konvolucije izvodi filtriranje vrijednosti piksela na slici, koje se mogu upotrebljavati za izoštravanje slike, zamućenje slike, otkrivanje rubova unutar slike ili druga poboljšanja na temelju jezgre. Filtri se upotrebljavaju za poboljšanje kvalitete slike rastera uklanjanjem lažnih podataka ili poboljšanjem značajki u podacima. Ovi konvolucijski filteri primjenjuju se na jezgri koja se kreće i preklap (prozor ili susjedstvo), kao što je 3 prema 3. Filtri za konvoluciju rade izračunavanjem vrijednosti piksela na temelju pondera svojih susjeda.",
		corridorName: "Koridor",
		corridorSnip: "Izračunava zbroj akumulativnih troškova za dva ulazna akumulativna rastera.",
		corridorDesc: "Funkcija Koridor izračunava zbroj akumulativnih troškova za dva ulazna rastera akumulativnih troškova. Dok se za unos mogu upotrijebiti bilo koja dva rastera, da bi se dobio značajan rezultat, oni bi trebali biti nepromijenjeni izlazni rasteri akumulativnih troškova. Redoslijed dvaju unosa nije bitan.",
		cosHName: "CosH",
		cosHSnip: "Izračunava hiperbolni kosinus ćelija u rasteru.",
		cosHDesc: "Funkcija izračunava hiperbolni kosinus piksela u rasteru.",
		cosName: "Cos",
		cosSnip: "Izračunava kosinus ćelije u rasteru.",
		cosDesc: "Funkcija izračunava kosinus piksela u rasteru.",
		costAllocationName: "Raspodjela troškova",
		costAllocationSnip: "Izračunava za svaku ćeliju izvor najmanjih troškova na temelju najmanjeg akumulativnog troška na površini troška.",
		costAllocationDesc: "Funkcija Raspodjele troškova izračunava za svaku ćeliju izvor najmanjeg troška na temelju najmanjeg akumulativnog troška na površini troška.",
		costBackLinkName: "Povratna veza za trošak",
		costBackLinkSnip: "Definira susjeda koji je sljedeća ćelija na putanji najmanjeg akumulativnog troška do izvora najmanjeg troška.",
		costBackLinkDesc: "Funkcija Povratne veze za trošak definira susjeda koji je sljedeća ćelija na putanji najmanjeg akumulativnog troška do izvora najmanjeg troška.<div><br/>Raster povratne veze sadrži vrijednosti od nule do osam, koje definiraju smjer ili identificiraju iduću susjednu ćeliju (slijedeća ćelija) duž putanje najmanjeg akumulativnog troška od ćelije da bi se dosegao izvor najmanjeg troška. Ako putanja treba preći u desnog susjeda, ćeliji će biti dodijeljena vrijednost 1, 2 za donju desnu dijagonalnu ćeliju i nastavlja se u smjeru kazaljke na satu. Vrijednost 0 rezervirana je za izvorne ćelije.</div>",
		costDistanceName: "Udaljenost troška",
		costDistanceSnip: "Izračunava udaljenost najmanjeg akumulativnog troška za svaku ćeliju od ili do izvora najmanjeg troška na površini troška.",
		costDistanceDesc: "Funkcija Udaljenost troška izračunava udaljenost najmanjeg akumulativnog troška za svaku ćeliju od ili do izvora najmanjeg troška na površini troška.",
		costPathName: "Putanja troška",
		costPathSnip: "Izračunava putanju najmanjeg troška od izvora do odredišta.",
		costPathDesc: "Globalna funkcija Putanje troška izračunava putanju najmanjeg troška od izvora do odredišta.<div><br/>Ova funkcija daje izlazni raster koji bilježi putanju najmanjeg troška ili putanje od odabranih lokacija do najbliže ćelije izvora definirane unutar površine akumulativnog troška, u smislu udaljenosti.</div>",
		curvatureName: "Zakrivljenost",
		curvatureSnip: "Izračunava zakrivljenost površine rastera, opcionalno uključujući profila i krivulju plana.",
		curvatureDesc: "Funkcija Zakrivljenosti prikazuje oblik ili zakrivljenost nagiba. Dio površine može biti konkavan ili konveksan; možete to vidjeti ako pogledate vrijednost zakrivljenosti. Zakrivljenost se izračunava izračunavanjem druge derivacije površine.<div><br/>Izlazna vrijednost funkcije Zakrivljenosti može se upotrijebiti za opisivanje fizičkih svojstava sliva u pokušaju razumijevanja procesa erozije i otjecanja. Vrijednost zakrivljenosti može se upotrijebiti za pronalaženje uzoraka erozije tla i raspodjele vode na kopnu. Zakrivljenost profila utječe na ubrzanje i usporavanje protoka i stoga utječe na eroziju i taloženje. Zakrivljenost geometrijskog oblika utječe na konvergenciju i divergenciju protoka.</div>",
		divideName: "Podijeli",
		divideSnip: "Dijeli vrijednosti dvaju rastera na temelju pojedine ćelije.",
		divideDesc: "Funkcija Podjele dijeli vrijednosti dvaju rastera na temelju pojedinog piksela.",
		elevationVoidFillName: "Popunjavanje praznina u visini terena",
		elevationVoidFillSnip: "Stvara piksele gdje postoje rupe u podacima o visini terena.",
		elevationVoidFillDesc: "Funkcija Popunjavanje praznina u visini terena upotrebljava se za stvaranje piksela gdje postoje rupe u vašoj visini terena.<div><br/>Praznine se pojavljuju kada nema točaka prikupljenih unutar područja koje predstavlja piksel u nastalom rasteru. Praznine su često uzrokovane tijelima vode, odabirom vrste razreda ili izuzimanjem. Popunjavanje praznina najčešće se upotrebljava pri stvaranju površine tla.</div>",
		equalToName: "Jednako",
		equalToSnip: "Izvodi relacijsku operaciju Jednako na dvama unosima na temelju pojedine ćelije. Vraća 1 za ćelije u kojima je prvi raster jednak drugom rasteru i 0 za ćelije u kojima nije.",
		equalToDesc: "Funkcija izvodi operaciju Jednako na dvama rasterima na temelju pojedinog piksela. Vraća vrijednost 1 za piksele gdje je prvi raster jednak drugom rasteru i vrijednosti 0 za piksele gdje nisu jednaki.",
		eucAllocationName: "Euklidska raspodjela",
		eucAllocationSnip: "Izračunava za svaku ćeliju najbliži izvor na temelju Euklidske udaljenosti.",
		eucAllocationDesc: "Funkcija Euklidske raspodjele izračunava za svaku ćeliju najbliži izvor na temelju Euklidske udaljenosti.",
		eucDirectionName: "Euklidski smjer",
		eucDirectionSnip: "Izračunava za svaku ćeliju smjer u stupnjevima do najbližeg izvora.",
		eucDirectionDesc: "Funkcija Euklidskog smjera izračunava za svaku ćeliju smjer u stupnjevima do najbližeg izvora. <div><br/>Smjer se izračunava iz svakog središta ćelije do centra izvorne ćelije koja mu je najbliža. Raspon vrijednosti iznosi od 0 stupnjeva do 360 stupnjeva, s tim da je 0 rezervirano za izvorne ćelije. Prema istoku (desno) je 90, a vrijednosti se povećavaju u smjeru kazaljke na satu (180 je južno, 270 je zapadno, a 360 je sjeverno).</div>",
		eucDistanceName: "Euklidska udaljenost",
		eucDistanceSnip: "Za svaku ćeliju izračunava Euklidsku udaljenost do najbližeg izvora.",
		eucDistanceDesc: "Funkcija Euklidske udaljenosti za svaku ćeliju izračunava Euklidsku udaljenost do najbližeg izvora.",
		exp10Name: "Exp10",
		exp10Snip: "Izračunava eksponencijal baze 10 ćelija u rasteru.",
		exp10Desc: "Funkcija Exp 10 izračunava eksponencijal baze 10 piksela u rasteru.",
		exp2Name: "Exp2",
		exp2Snip: "Izračunava eksponencijal baze 2 ćelija u rasteru.",
		exp2Desc: "Ova funkcija izračunava eksponencijal baze 2 piksela u rasteru.",
		expName: "Exp",
		expSnip: "Izračunava eksponencijal baze e ćelija u rasteru.",
		expDesc: "Ova funkcija izračunava eksponencijal baze e piksela u rasteru.",
		extractBandName: "Izdvoji kanale",
		extractBandSnip: "Određuje s kojim će se kanalima raditi prilikom upotrebe višekanalnih skupova podataka.",
		extractBandDesc: " Funkcija Izdvoji kanale omogućuje vam da izdvojite jedan ili više kanala iz višekanalnog skupa podataka rastera ili mijenja redoslijed kanala u njemu.<div><br/>Funkciju Izdvoji kanale možete upotrebljavati prije drugih funkcija, kao što je aritmetika, da biste odredili koji se kanali upotrebljavaju kao unos u sljedećoj funkciji.</div>",
		fillName: "Ispuna",
		fillSnip: "Popunjava najniže vrijednosti na rasteru površine kako bi se uklonili mali nedostaci u podacima.",
		fillDesc: "Globalna funkcija Ispune pronalazi i popunjava najniže i najviše vrijednosti u rasteru površine visine terena kako bi se uklonili mali nedostaci u podacima. Funkcija će popuniti iterativni postupak dok se sve najniže vrijednosti ne popune unutar određenog ograničenja Z.<div><br/>Kada je površina visine terena stvorena pomoću alata Ortokartiranja ili drugim sredstvima, često postoje male, ali značajne pogreške u obliku najnižih i najviših vrijednosti u podacima. U fotogrametriji najniže i najviše vrijednosti često se nazivaju rupama i šiljcima. Budući da se podaci o površini često upotrebljavaju u modeliranju, kao što je hidrološko modeliranje, važno je ispraviti te pogreške najnižih i najviših vrijednosti na način koji je u skladu s okolnim podacima.</div>",
		floatName: "Plutanje",
		floatSnip: "Pretvara svaku vrijednost ćelije rastera u prikaz s plutajućom točkom.",
		floatDesc: "Funkcija Plutanja pretvara svaku vrijednost piksela rastera u prikaz s plutajućom točkom.",
		flowAccumulationName: "Akumulacija protoka",
		flowAccumulationSnip: "Stvara raster akumuliranog protoka u svaku ćeliju. Faktor pondera može se opcionalno primijeniti.",
		flowAccumulationDesc: "Globalna funkcija Akumulacije protoka stvara raster od akumuliranog protoka u svaki piksel, kako je određeno akumuliranjem pondera za sve piksele koji teku u svaki piksel padine. Ako nije pružen raster pondera, ponder 1 primjenjuje se na svaki piksel, a vrijednost piksela u izlaznom rasteru broj je piksela koji teče u svaki piksel.<div><br/>Izlazni pikseli s visokom akumulacijom protoka područja su koncentriranog protoka i mogu se upotrebljavati za identificiranje protoka kanala protoka. Izlazni pikseli s akumulacijom protoka vrijednosti nula lokalni su topografski vrhunci i mogu se upotrijebiti za identifikaciju grebena.</div>",
		flowDirectionName: "Smjer protoka",
		flowDirectionSnip: "Stvara raster smjera protoka iz svake ćelije do njezinog susjeda najstrmije padine.",
		flowDirectionDesc: "Jedan od ključeva za izvođenje hidroloških svojstava površine sposobnost je određivanja smjera protoka od svakog piksela u rasteru. Rasterska funkcija Smjer protoka uzima površinu kao ulaznu vrijednost i stvara raster smjera protoka od svakog piksela do njegovog susjeda najstrmije padine. Funkcija Smjera protoka podržava tri metode modeliranja protoka: D8 (osam smjerova), Smjer više protoka (MFD) i D-beskonačnost (DINF). ",
		flowDistanceName: "Udaljenost protoka",
		flowDistanceSnip: "Izračunava za svaku ćeliju minimalnu horizontalnu ili vertikalnu udaljenost niz padinu između ćelija na potoku ili rijeci u koju teku.",
		flowDistanceDesc: "Za svaki piksel funkcija će izračunati minimalnu horizontalnu ili vertikalnu udaljenost niz padinu do piksela na rijeci ili potoka u koji teku. Ako je pružen opcionalni raster smjera protoka, smjer(ovi) niz padinu bit će ograničen na one definirane ulaznim rasterom smjera protoka. Izlazna je vrijednost raster udaljenosti protoka.",
		focalName: "Žarišna statistika",
		focalSnip: "Izračunava žarišne statistike za svaki piksel slike na temelju definiranog žarišnog susjedstva.",
		focalDesc: "Funkcija Žarišne statistike izračunava žarišne statistike za svaki piksel slike na temelju definiranog žarišnog susjedstva.",
		geometricName: "Geometrijska",
		geometricSnip: "Povećava pozicijsku točnost skupa podataka uzimanje u obzir visine terena.",
		geometricDesc: "Geometrijska funkcija proizvodi ortorektificiranu sliku na temelju definicije senzora i modela terena. Povećava pozicijsku točnost skupa podataka uzimanje u obzir visine terena.",
		grayscaleName: "Sivi tonovi",
		grayscaleSnip: "Pretvara višekanalnu sliku u jednokanalnu sliku u sivim tonovima.",
		grayscaleDesc: "Ova funkcija pretvara višekanalnu sliku u jednokanalnu sliku u sivim tonovima.<div><br/>Ova funkcija primjenjuje određene pondere na svaki od ulaznih kanala i normalizira izlaznu sliku. Ponderi se često primjenjuju jer neki kanali imaju varijabilnu važnost, ovisno o primjeni. Primjerice, plavi kanal često sadrži više buke nego drugi kanali.</div>",
		greaterThanEqualName: "Veće od jednako",
		greaterThanEqualSnip: "Izvodi relacijsku operaciju Veće od ili jednako na dvama unosima na temelju pojedine ćelije. Vraća 1 za ćelije gdje je prvi raster veći ili jednak drugom rasteru i 0 ako nije.",
		greaterThanEqualDesc: "Funkcija izvodi relacijsku operaciju Veće od ili jednako na dvama unosima na temelju pojedinog piksela. Vraća vrijednost 1 za piksele gdje je prvi raster veći ili jednak drugom rasteru i vrijednost 0 za piksele gdje prvi raster nije veći ili jednak drugom rasteru.",
		greaterThanName: "Veće od",
		greaterThanSnip: "Izvodi relacijsku operaciju Veće od na dvama unosima na temelju pojedine ćelije. Vraća 1 za ćelije u kojima je prvi raster veći od drugog rastera i 0 za ćelije u kojima nije.",
		greaterThanDesc: "Funkcija izvodi relacijsku operaciju Veće od na dvama unosima na temelju pojedinog piksela. Vraća vrijednost 1 za piksele gdje je prvi raster veći od drugog rastera i vrijednost 0 za piksele gdje prvi raster nije veći od drugog rastera.",
		heatIndexName: "Indeks topline",
		heatIndexSnip: "Kombinira temperaturu okolnog zraka i relativnu vlažnost za vraćanje prividne temperature.",
		heatIndexDesc: "Ova funkcija izračunava prividnu temperaturu na temelju temperature okoline i relativne vlažnosti. Prividna temperatura često se opisuje u smislu koliko se ljudsko tijelo osjeća vruće.<div><br/>Ovaj indeks može biti koristan za izračunavanje opasnosti povezanih s medicinskim problemima kao što su grčevi u mišićima, dehidracija, toplinska iscrpljenost ili ozbiljniji toplinski udar u vrućim i vlažnim danima. Kada je relativna vlažnost visoka, isparavanje tjelesnog znoja postaje sve teže te pojedinci ostaju bez učinkovitog prirodnog načina da se ohlade. Karte savjeta ili upozorenja o toplini često su proizvod reklasifikacije rezultata indeksa topline u razrede, gdje što je veća vrijednost indeksa, to je veća vjerojatnost da će postati upozorenje, a ne samo savjet.</div>",
		hillshadeName: "Nijansa brda",
		hillshadeSnip: "Stvara 3D prikaz površine u sivim tonovima, uzimajući u obzir relativnu poziciju sunca s obzirom na sjenčanje slike",
		hillshadeDesc: "Funkcija Nijansa brda stvara 3D prikaz površine terena u sivim tonovima, uzimajući u obzir relativnu poziciju sunca s obzirom na sjenčanje slike. <div><br/>Nijansa brda tehnika je za vizualizaciju terena određenu izvorom svjetla, nagibom i ekspozicijom površine visine terena. To je kvalitativna metoda za vizualizaciju topografije i ne daje apsolutne vrijednosti visine terena. </div>",
		intName: "Int",
		intSnip: "Pretvara svaku vrijednost ćelije rastera u cijeli broj zaokruživanjem.",
		intDesc: "Funkcija Int pretvara svaku vrijednost piksela rastera u prikaz u cijeli broj zaokruživanjem.",
		interpolateIrregularDataName: "Interpoliraj neredovite podatke",
		interpolateIrregularDataSnip: "Interpolira iz oblaka točaka ili nepravilnih mreža.",
		interpolateIrregularDataDesc: "Neki NetCDF ili HDF skupovi podataka pohranjuju svoje geolokacije kao nepravilno raspoređena polja piksela ili točkastih podataka. Prilikom dodavanja tih skupova podataka u skup podataka mozaika, funkcija interpolacije neredovitih podataka uzima nepravilne mrežne podatke i ponovno ih uzorkuje tako da je svaki piksel jednake veličine i u obliku kvadrata.<div><br/>Prilikom dodavanja varijabli iz funkcije netCDF ili HDF u skup podataka mozaika, automatski će provjeriti raspoređuju li se podaci redovno. Ako to nije slučaj, funkcija interpolacije neredovitih podataka može se upotrebljavati za pretvaranje neredovitih podataka u redoviti mrežni raster. Možete promijeniti metodu interpolacije i veličinu ćelije koja se upotrebljava u funkciji rastera interpolacije neredovitih podataka. Za pravilo raspoređene podatke rastera neće se primijeniti interpolacija i podaci će se čitati kakvi jesu.</div>",
		isNullName: "Nema vrijednosti",
		isNullSnip: "Određuje koje su vrijednosti iz ulaznih rastera Bez podataka na temelju pojedine ćelije. Vraća vrijednost 1 ako su ulazne vrijednosti Bez podataka i 0 za ćelije koje nisu.",
		isNullDesc: "Funkcija Nema vrijednosti određuje koje su vrijednosti iz ulaznog rastera Bez podataka na temelju pojedinog piksela. Vraća vrijednost 1 ako je ulazna vrijednost Bez podataka i vrijednost 0 za piksele koji nisu Bez podataka.",
		kernelDensityName: "Gustoća jezgre",
		kernelDensitySnip: "Izračunava područje veličine po jedinici iz točkastih ili polilinijskih geoobjekata pomoću funkcije jezgre kako bi se postavila glatko sužena površina na svaku točku ili poliliniju.",
		kernelDensityDesc: "Ova funkcija izračunava područje veličine po jedinici iz točkastih ili polilinijskih geoobjekata pomoću funkcije jezgre kako bi se postavila glatko sužena površina na svaku točku ili poliliniju.",
		keyMetadataName: "Ključni metapodaci",
		keyMetadataSnip: "Nadjačava ili umeće ključne metapodatke rastera u lanac funkcija.",
		keyMetadataDesc: "Ova funkcija vam omogućuje umetanje ili nadjačavanje ključnih metapodatka rastera.<div><br/>Informacije u ključnim metapodacima upotrebljavaju se kako bi se aplikaciji pomoglo s nekim obradama i renderiranjem, uključujući pružanje nekih korisnih informacija kao što su naziv senzora, nazivi kanala ili naoblaka povezana sa slikama.</div>",
		shortestPathName: "Putanja najmanjeg troška",
		shortestPathSnip: "Izvršava analizu udaljenosti troška pomoću izvornih i odredišnih ulaznih vrijednosti koja se zatim upotrebljava za određivanje putanje najmanjeg troška od izvora do odredišta.",
		shortestPathDesc: "Funkcija Putanje najmanjeg troška izračunava putanju najmanjeg troška od izvora do odredišta. Udaljenost najmanjeg akumulativnog troška izračunava se za svaki piksel za površinu troška do najbližeg izvora. Time se dobiva izlazni raster koji bilježi putanju najmanjeg troška ili putanje od odabranih lokacija do najbližeg piksela izvora definiranog unutar površine akumulativnog troška, u smislu udaljenosti.<div><br/>Svakoj putanji najmanjeg troška dodjeljuje se vrijednost kada se nađe u procesu skeniranja. Završni piksel na izvornom rasteru putanje troška dobiva vrijednost 1. Prva putanja dobiva vrijednost 3, drugu 4 i tako dalje. Kada se više putanja spoji i prati preostalu udaljenost natrag do izvora na istoj ruti, segmentu gdje dvije putanje putuju zajedno dodjeljuje se vrijednost 2. Spojenom dijelu putanje ne može se dodijeliti vrijednost jedne od putanja jer spojeni dio pripada objema rutama.</div>",
		lessThanEqualName: "Manje od jednako",
		lessThanEqualSnip: "Izvodi relacijsku operaciju Manje od ili jednako na dvama unosima na temelju pojedine ćelije. Vraća 1 za ćelije gdje je prvi raster manji ili jednak drugom rasteru i 0 gdje nije.",
		lessThanEqualDesc: "Funkcija izvodi relacijsku operaciju Manje od ili jednako na dvama unosima na temelju pojedinog piksela. Vraća vrijednost 1 za piksele gdje je prvi raster manji ili jednak drugom rasteru i vrijednost 0 gdje nije manji ili jednak drugom rasteru.",
		lessThanName: "Manje od",
		lessThanSnip: "Izvodi relacijsku operaciju Manje od na dvama unosima na temelju pojedine ćelije. Vraća 1 za ćelije gdje je prvi raster manji od drugog rastera i 0 ako nije.",
		lessThanDesc: "Funkcija izvodi relacijsku operaciju Manje od na dvama unosima na temelju pojedinog piksela. Vraća vrijednost 1 za piksele gdje je prvi raster manji od drugog rastera i vrijednost 0 ako nije manji od drugog rastera.",
		lnName: "Ln",
		lnSnip: "Izračunava prirodni logaritam (baza e) ćelija u rasteru.",
		lnDesc: "Funkcija Ln izračunava prirodni logaritam (baza e) za svaki piksel u rasteru.",
		log10Name: "Log10",
		log10Snip: "Izračunava logaritam baze 10 ćelija u rasteru.",
		log10Desc: "Funkcija Log10 izračunava logaritam baze 10 svakog piksela u rasteru.",
		log2Name: "Log2",
		log2Snip: "Izračunava logaritam baze 2 ćelija u rasteru.",
		log2Desc: "Funkcija Log2 izračunava logaritam baze 2 svakog piksela u rasteru.",
		lookupName: "Traženje",
		lookupSnip: "Stvara novi raster tražeći vrijednosti pronađene u drugom polju u tablici ulaznog rastera.",
		lookupDesc: "Funkcija stvara novi raster tražeći vrijednosti pronađene u drugom polju u tablici ulaznog rastera.",
		mlClassifyName: "Klasificiraj maksimalnu vjerojatnost",
		mlClassifySnip: "Klasificiranje snimki upotrebom pristupa po pikselu. Mješoviti pikseli dodjeljuju se geoobjektu s najvećim postotkom u tom pikselu.",
		mlClassifyDesc: "Funkcija Klasificiraj maksimalnu vjerojatnost omogućuje izvođenje nadzirane klasifikacije, pomoću algoritma za klasifikaciju maksimalne vjerojatnosti, na skupu podataka rastera ili skupu podataka mozaika. Ova funkcija zahtijeva datoteku klasifikacije s potpisom.",
		maskName: "Maska",
		maskSnip: "Postavlja vrijednosti koje ne želite prikazati.",
		maskDesc: "Ova rasterska funkcija postavlja vrijednosti koje ne želite prikazati u vašem rasteru. Pomoću funkcije Maske odredit ćete jednu ili više vrijednosti Bez podataka ili raspon važećih vrijednosti piksela. ",
		minusName: "Minus",
		minusSnip: "Oduzima vrijednost drugog ulaznog rastera od vrijednosti prvog ulaznog rastera na temelju pojedine ćelije.",
		minusDesc: "Funkcija Minus oduzima vrijednost drugog ulaznog rastera od vrijednosti prvog ulaznog rastera na temelju pojedinog piksela.",
		modName: "Način",
		modSnip: "Pronalazi ostatak (modulo) prvog rastera kada je podijeljen s drugim rasterom na temelju pojedine ćelije.",
		modDesc: "Funkcija načina pronalazi ostatak (modulo) prvog rastera kada je podijeljen s drugim rasterom na temelju pojedinog piksela. Redoslijed ulaznih vrijednosti važan je i utječe na izlazni rezultat.",
		mosaicRastersName: "Rasteri mozaika",
		mosaicRastersSnip: "Spaja skupove podataka rastera kako bi stvorio jedan skup podataka.",
		mosaicRastersDesc: "Funkcija Rasteri mozaika stvara mozaičke slike iz više slika. Kada se slike preklapaju, postoji nekoliko metoda koje možete odabrati kako biste odredili koje će se slike prikazati.",
		ndviColorizedName: "Obojeni NDVI",
		ndviColorizedSnip: "Stvara višekanalni skup podataka koji predstavlja zdravlje vegetacije, na temelju razlike između crvenih i bliskih infracrvenih kanala.",
		ndviColorizedDesc: "Funkcija Obojeni NDVI primjenjuje funkciju NDVI na ulaznoj slici, a zatim za prikaz rezultata upotrebljava kartu boja ili paletu boja.",
		ndviName: "NDVI",
		ndviSnip: "Izračunava Normalizirani indeks različitosti vegetacije (NDVI).",
		ndviDesc: "Funkcija NDVI stvara jednokanalni skup podataka koji predstavljaj zdravlje vegetacije, na temelju razlike između crvenih i bliskih infracrvenih kanala.<div><br/>NDVI je standardizirani indeks koji vam omogućuje da generirate snimku s prikazom zelenila, poznato kao i relativna biomasa. Ovaj indeks iskorištava kontrast karakteristika dvaju kanala iz skupa podataka višespektarskog rastera: upijanja pigmenta klorofila u crvenom kanalu i visoku reflektivnost biljnih materijala u blisko crvenom kanalu (NIR). Izuzetno niske ili negativne vrijednosti NDVI-ja predstavljaju područja bez vegetacije, poput oblaka, vode ili snijega. Vrlo niske vrijednosti predstavljaju područja s malo ili nimalo vegetacije, kao što su beton, stijena ili golo tlo. Umjerene vrijednosti predstavljaju područja grmlja i travnjaka. Visoke vrijednosti predstavljaju šumska područja i bujnu vegetaciju.</div>",
		negateName: "Negiraj",
		negateSnip: "Mijenja znak (množi se s -1) vrijednosti ćelija ulaznog rastera na temelju pojedine ćelije.",
		negateDesc: "Negativna funkcija mijenja znak (množi se s -1) vrijednosti piksela ulaznog rastera na pikselu ",
		nibbleName: "Grickanje",
		nibbleSnip: "Zamjenjuje ćelije rastera koje odgovaraju maski s vrijednostima najbližih susjeda.",
		nibbleDesc: "Globalna funkcija Grickanja omogućuje da se odabranim područjima rastera dodijeli vrijednost njihovog najbližeg susjeda. To je korisno za uređivanje područja rastera gdje podaci mogu biti pogrešni.",
		notEqualName: "Različito",
		notEqualSnip: "Izvodi relacijsku operaciju Različito na dvama unosima na temelju pojedine ćelije. Vraća 1 za ćelije gdje prvi raster nije jednak drugom rasteru i 0 kad je jednak.",
		notEqualDesc: "Funkcija izvodi relacijsku operaciju Različito na dvama unosima na temelju pojedinog piksela. Vraća vrijednost 1 za piksele gdje je prvi raster različit od drugog rastera i vrijednost 0 za piksele gdje je jednak drugom rasteru.",
		pansharpeningName: "Spajanja slika radi izoštravanja",
		pansharpeningSnip: "Umjetno se povećava prostorna razlučivost višekanalne slike spajanjem s pankromatskom slikom veće razlučivosti.",
		pansharpeningDesc: "Funkcija Spajanja slika radi izoštravanja upotrebljava pankromatsku sliku više razlučivosti ili rasterski kanal za spajanje s višekanalnim skupom podataka rastera niže razlučivosti kako bi se povećala prostorna razlučivost višekanalne slike.<div><br/> Svrha izoštrenja slika stvaranje je vizualne slike bolje kvalitete. Budući da tehnike mijenjaju radiometrijske i spektralne karakteristike višekanalnih snimaka, izoštrene snimke treba oprezno upotrebljavati za analitičke svrhe daljinskog istraživanja.</div>",
		pathAllocationName: "Dodjela udaljenosti putanje",
		pathAllocationSnip: "Izračunava izvor najmanjeg troška za svaku ćeliju na temelju najmanjeg akumulativnog troška na površini troškova, uzimajući u obzor udaljenost te horizontalne i vertikalne faktora troškova.",
		pathAllocationDesc: "Funkcija Dodjele udaljenosti putanje izračunava najbliži izvor za svaku ćeliju na temelju najmanjeg akumulativnog troška na površini troškova, uzimajući u obzor udaljenost i horizontalne i vertikalne faktora troškova.",
		pathBackLinkName: "Povratna veza za udaljenost putanje",
		pathBackLinkSnip: "Definira susjeda koji je sljedeća ćelija na putanji najmanjeg akumulativnog troška do izvora najmanjeg troška, dok se uzima u obzir površinsku udaljenost zajedno s horizontalnim i vertikalnim troškovnim faktorima.",
		pathBackLinkDesc: "Funkcija Povratne veza za udaljenost putanje definira smjer susjeda koji je sljedeća ćelija na putanji najmanjeg akumulativnog troška do najbližeg izvora, dok se uzima u obzir površinsku udaljenost zajedno s horizontalnim i vertikalnim troškovnim faktorima.",
		pathDistanceName: "Udaljenost putanje",
		pathDistanceSnip: "Izračunava udaljenost najmanjeg akumulativnog troška za svaku ćeliju od ili do izvora najmanjeg troška, uzimajući u obzir udaljenost površine te horizontalne i vertikalne faktora troškova.",
		pathDistanceDesc: "Funkcija Udaljenost putanje izračunava udaljenost najmanjeg akumulativnog troška za svaku ćeliju do najbližeg izvora, uzimajući u obzir udaljenost površine i horizontalne i vertikalne faktora troškova.",
		plusName: "Plus",
		plusSnip: "Dodaje (zbraja) vrijednosti dvaju rastera na temelju pojedine ćelije.",
		plusDesc: "Funkcija Plus dodaje (zbraja) vrijednosti dvaju rastera na temelju pojedinog piksela.",
		powerName: "Snaga",
		powerSnip: "Podiže vrijednosti ćelija u rasteru na snagu vrijednosti koje se nalaze u drugom rasteru.",
		powerDesc: "Funkcija Snage podiže vrijednosti piksela u rasteru na snagu vrijednosti koje se nalaze u drugom rasteru.",
		radarCalibrationName: "Kalibracija radara",
		radarCalibrationSnip: "Pretvara povratne radarske signala radara RADARSAT-2.",
		radarCalibrationDesc: "Ova funkcija može se upotrijebiti za kalibriranje snimaka radara RADARSAT-2 u skupu podataka mozaika ili kao produkt rastera. Kalibracija se izvodi na radarskim snimkama, tako da su vrijednosti piksela istinski prikaz povratnih radarskih signala.",
		rasterInfoName: "Informacije o rasteru",
		rasterInfoSnip: "Mijenja svojstva rastera, kao što je dubina bita, vrijednost Bez podataka, veličina ćelije i tako dalje.",
		rasterInfoDesc: "Informacije o rasteru otvara dijalog s svojstvima skupa podataka rastera, kao što su broj stupaca i redaka, broj kanala, vrsta piksela, obuhvata i prostorna referenca. Ta svojstva možete urediti odabirom skupa podataka rastera koji će se koristiti kao predložak. ",
		rasterizeAttributesName: "Atributi rasterizacije",
		rasterizeAttributesSnip: "Obogaćuje raster dodatnim kanalima izvedenim iz vrijednosti specificiranih atributa iz vanjske tablice ili usluge geoobjekata.",
		rasterizeAttributesDesc: "Funkcija Atribut rasterizacije obogaćuje raster dodavanjem kanala izvedenih iz vrijednosti specificiranih atributa, iz vanjske tablice ili usluge geoobjekata. Po želji možete navesti raster zona i pridruženi atribut ID-a zone kako biste omogućili pretraživanje na temelju regije.",
		rasterizeFeatureClassName: "Geoobjekti rasterizacije",
		rasterizeFeatureClassSnip: "Pretvara geoobjekte u raster.",
		rasterizeFeatureClassDesc: "Ova funkcija pretvara podatke o razredu poligona, polilinija i točaka u sloj rastera.<div><br/>Geoobjektima su dodijeljene vrijednosti piksela na temelju ID objekta gaoobjekata (zadano). Opcionalno, vrijednosti piksela mogu se temeljiti na korisničkom definiranom polju vrijednosti u atributnoj tablici ulaznog geoobjekta.</div>",
		recastName: "Ponovno postavljanje",
		recastSnip: "Modificira parametre lanca funkcija u skupu podataka mozaika ili usluzi slike. To se često upotrebljava sa skupovima podataka LAS-a kako bi se izbjeglo stvaranje posebnog skupa podataka mozaika za različite prikaze terena.",
		recastDesc: "Funkcija Ponovno postavljanje koristi se za dinamičko modificiranje parametra funkcije koji se upotrebljavaju u skupu podataka mozaika ili usluzi slike bez fizičkog zadržavanja promjena.",
		regionGroupName: "Grupa regija",
		regionGroupSnip: "Za svaku ćeliju u izlaznoj vrijednosti bilježi se identifikacija povezane regije kojoj pripada ta ćelija. Svakoj je regiji dodijeljen jedinstveni broj.",
		regionGroupDesc: "Globalna funkcija Grupe regija bilježi za svaku ćeliju u izlaznoj vrijednosti identifikaciju povezane regije kojoj pripada ta ćelija. Svakoj je regiji dodijeljen jedinstveni broj.<div><br/> Prva skenirana regija prima vrijednost jedan, drugu dva i tako dalje, sve dok se svim regijama ne dodijeli vrijednost. Skeniranje se pomiče slijeva nadesno, odozgo prema dolje. Vrijednosti dodijeljene izlaznim zonama temelje se na tome kada se nađu u procesu skeniranja.</div>",
		regionGrowName: "Rast regije",
		regionGrowSnip: "Širi regije iz ishodišnih točaka..",
		regionGrowDesc: "Funkcija Rasta regije grupira susjedne piksele u skupine ovisno o određenom polumjeru od ishodišne točke. Grupi piksela ili objekata dodijeljena je zadana vrijednost popunjavanja.",
		remapName: "Ponovno kartiraj",
		remapSnip: "Mijenja vrijednosti piksela dodjeljivanjem novih vrijednosti rasponima vrijednosti piksela ili upotrebom vanjske tablice.",
		remapDesc: "Funkcija Ponovno kartiraj omogućuje da promijenite ili ponovno klasificirate vrijednosti piksela podataka rastera. To se može učiniti određivanjem raspona vrijednosti piksela za kartiranje vrijednosti u izlaznu vrijednost piksela ili upotrebom tablice za kartiranje vrijednosti piksela u izlaznu vrijednost piksela.",
		reprojectName: "Ponovno projiciranje",
		reprojectSnip: "Mijenja projekciju skupa podataka rastera, skupa podataka mozaika ili stavke rastera u skupu podataka o mozaiku. Također može ponovno uzorkovati podatke u novu veličinu ćelije i definirati ishodište.",
		reprojectDesc: "Funkcija Ponovnog projiciranja mijenja projekciju skupa podataka rastera, skupa podataka mozaika ili stavke rastera u skupu podataka o mozaiku. Također može ponovno uzorkovati podatke u novu veličinu ćelije i definirati ishodište.<div><br/> Funkcija Ponovnog projiciranja može se upotrijebiti pri stvaranju predmemorije iz skupa podataka rastera ili mozaika koji nije u traženoj projekciji. Na primjer, prilikom stvaranja usluge spremanja slika u predmemorije koja može biti integrirana u aplikacije s drugim uslugama predmemorije, važno je da su sve one u istoj projekciji. To je često projekcija Web Mercator. Budući da se skup podataka mozaika ne može ponovno projicirati, možete napraviti jednu od dvije stvari:— izradite referentni skup podataka mozaika iz skupa podataka mozaika u potrebnoj projekciji ili dodajte funkciju Ponovnog projiciranja u lanac funkcija skupa podataka mozaika. Drugi primjer upotrebljava ovu funkciju na stavci rastera u skupu podataka mozaika. Kada koristite funkciju Raster u predmemoriji, možda želite umetnuti funkciju Ponovnog projiciranja tako da se predmemorija stvori u novoj projekciji. Stavke rastera u skupu podataka mozaika mogu se predmemorirati kada je obrada intenzivna i kad pokušavate objaviti uslugu za slike koja je brza, bez spremanja cijele usluge za slike u predmemoriju.</div>",
		resampleName: "Ponovno uzorkovanje",
		resampleSnip: "Mijenja veličinu ćelije rastera.",
		resampleDesc: "Funkcija Ponovnog uzorkovanja mijenja veličinu ćelije, vrstu ponovnog uzorkovanja ili oboje.<div><br/>Funkcija Ponovnog uzorkovanja trebala bi se upotrebljavati samo s određenim računalnim zahtjevima; na primjer, kada izračunavate vjetar ili trenutačni smjer jačine koji zahtijeva ponovno uzorkovanje iz izvorne razlučivosti.</div>",
		roundDownName: "Zaokruži prema dolje",
		roundDownSnip: "Vraća sljedeću manju vrijednost cijelog broja, samo predstavljenu kao plutajuću točku, za svaku ćeliju na rasteru.",
		roundDownDesc: "Funkcija Zaokruži prema dolje vraća sljedeći manji cijeli broj kao vrijednost plutajuće točke za svaki piksel na rasteru.",
		roundUpName: "Zaokruži prema gore",
		roundUpSnip: "Vraća sljedeću manju vrijednost cijelog broja, samo predstavljenu kao plutajuću točku, za svaku ćeliju na rasteru.",
		roundUpDesc: "Funkcija Zaokruži prema gore vraća sljedeći veći cijeli broj kao vrijednost plutajuće točke za svaki piksel na rasteru.",
		segmentMeanShiftName: "Srednji pomak segmenta",
		segmentMeanShiftSnip: "Grupira susjedne piksele sa sličnim spektralnim značajkama zajedno u segmente.",
		segmentMeanShiftDesc: "Ova funkcija identificira objekte, geoobjekte ili segmente u vašim snimkama grupiranjem susjednih piksela koji imaju slične spektralne i prostorne značajke. Možete kontrolirati količinu prostornog i spektralnog izglađivanja kako biste izveli geoobjekte od interesa.",
		s1RadiometricCalibrationName: "Sentinel-1 radiometrijska kalibracija",
		s1RadiometricCalibrationSnip: "Izvodi različite vrste radiometrijskog kalibriranja na Sentinel-1 podacima.",
		s1RadiometricCalibrationDesc: "Ova funkcija rastera obavlja tri različite kalibracije za Sentinel 1 skupove podataka, uključujući beta nula i gama te daje kalibrirani skup podataka. Cilj je SAR kalibracije pružiti snimke u kojima se vrijednosti piksela mogu izravno povezati s povratnim radarskim signalom scene. Iako su nekalibrirane, SAR snimke dovoljne su za kvalitativnu uporabu, kalibrirane SAR snimke ključne su za kvantitativnu uporabu SAR podataka.<div><br/> Tipična obrada SAR podataka, koja proizvodi slike razine 1, ne uključuje radiometrijske korekcije i ostaje značajni radiometrijski otklon. Zbog toga je potrebno primijeniti radiometrijsku korekciju na SAR slike kako bi vrijednosti piksela na slikama doista predstavljali povratni radarski signal reflektirajuće površine. Radiometrijska korekcija također je potrebna za usporedbu SAR slika dobivenih različitim senzorima ili dobivenih od istog senzora u različita vremena, u različitim načinima ili obrađene različitim procesorima.</div>",
		s1ThermalNoiseRemovalName: "Uklanjane toplinskog šuma iz Sentinel-1 podataka",
		s1ThermalNoiseRemovalSnip: "Uklanja toplinski šum iz Sentinel-1 podataka.",
		s1ThermalNoiseRemovalDesc: "Ispravak toplinskog šuma može se primijeniti na produkte alata Sentinel-1 Level-1 Single Look Complex (SLC) kao i na produkte alata Level-1 Ground Range Detection (GRD) koji još nisu ispravljeni. Rukovatelj također može ukloniti ovaj ispravak na temelju napomena o produktima kako bi ponovno uveo signal šuma koji je uklonjen kako bi se proizveo izvorni produkt. Napomene od produktima ažurirat će se u skladu s tim kako bi se omogućila ponovna primjena ispravka. ",
		setNullName: "Postavi na bez vrijednosti",
		setNullSnip: "Funkcija Postavi na bez vrijednosti postavlja identificirane lokacije na vrijednost Bez podataka na temelju specifičnih kriterija. Vraća vrijednost Bez podataka ako je uvjetna procjena istinita i vraća vrijednosti određenu drugim rasterom ako je neistinita.",
		setNullDesc: "Funkcija Postavi na bez vrijednosti postavlja identificirane piksele na vrijednost Bez podataka na temelju specifičnih kriterija. Vraća vrijednost Bez podataka ako je uvjetna procjena istinita (1) i vraća vrijednosti određenu u Neistinitom rasteru ako je uvjetna procjena neistinita (0). Ovaj kriterij određen je izlaznom vrijednosti logičke matematičke funkcije, koja će biti ulazni raster.",
		shadedReliefName: "Osjenčani reljef",
		shadedReliefSnip: "Stvara višekanalni 3D prikaz površine u boji, uzimajući u obzir relativnu poziciju sunca s obzirom na sjenčanje slike.",
		shadedReliefDesc: "Funkcija osjenčanog reljefa stvara 3D prikaz terena spajanjem slika metodama kodiranih visina terena i nijansi brda. Ova funkcija koristi svojstva visine i azimuta za određivanje položaja sunca.<div><br/></div>",
		sinHName: "SinH",
		sinHSnip: "Izračunava hiperbolni sinus ćelija u rasteru.",
		sinHDesc: "Funkcija izračunava hiperbolni sinus piksela u rasteru.",
		sinName: "Sin",
		sinSnip: "Izračunava sinus ćelija u rasteru.",
		sinDesc: "Funkcija izračunava sinus piksela u rasteru.",
		slopeName: "Nagib",
		slopeSnip: "Izračunava brzinu promjene od vrijednosti jednog piksela do njegovog susjeda.",
		slopeDesc: "Ova rasterska funkcija izračunava nagib koji je stopa promjene visine terena za svaku ćeliju digitalnog modela terena (DEM). To je prvi derivat DEM-a.<div><br/> Ova funkcija koristi ubrzanu funkciju atan(). Šest puta je brža, a pogreška aproksimacije uvijek je manja od 0,3 stupnja.</div>",
		speckleName: "Pjega",
		speckleSnip: "Pruža filtre za smanjivanje šuma u skupovima podataka sintetičkog radara.",
		speckleDesc: "Pjega je visokofrekventni šum na radarskim podacima. Slike koje generiraju sintetički sustavi radara (SAR) vrlo su podložne efektima pojave pjega zbog obrade raspršenih signala i smetnje elektromagnetskih valova raspršenih s površina ili objekata. Ova funkcija Pjege filtrira pjegasti radarski skup podataka i izglađuje šum zadržavajući rubove ili oštre značajke na slici.",
		spectralConversionName: "Spektralna konverzija",
		spectralConversionSnip: "Primjenjuje matricu na višekanalnu sliku.",
		spectralConversionDesc: "Funkcija Spektralne konverzije primjenjuje matricu na višekanalnu sliku kako bi utjecala na vrijednosti boja rezultata.<div><br/> Neki senzori ne prikupljaju plave kanale zbog niskog omjera signala i šuma. To se, primjerice, može koristiti za pretvaranje lažne infracrvene slike u sliku pseudo prirodne boje.</div>",
		squareRootName: "Korijen",
		squareRootSnip: "Izračunava korijen vrijednosti ćelija u rasteru.",
		squareRootDesc: "Funkcija Korijena izračunava kvadratni korijen vrijednosti piksela u rasteru.",
		squareName: "Kvadrat",
		squareSnip: "Izračunava kvadratnu vrijednost vrijednosti ćelija u rasteru.",
		squareDesc: "Funkcija Kvadrata izračunava kvadratnu vrijednost vrijednosti piksela u rasteru.",
		statisticsHistogramName: "Statistike i histogram",
		statisticsHistogramSnip: "Definirajte ili povežite statistike i histogram.",
		statisticsHistogramDesc: "Funkcija Statistike i histograma koristi se za definiranje statistike i histograma rastera. Tu funkciju možete umetnuti na kraju lanca funkcija da biste opisali statistike i histogram predloška rasterske funkcije (RFT). To može biti potrebno za kontrolu zadanog prikaza rezultata obrade, posebno kada se definira lanac funkcija koji sadrži mnoge funkcije.<div><br/> Statistiku možete definirati upisivanjem vrijednosti ili uvozom iz skupa podataka rastera ili XML datoteke. Histogrami se mogu definirati samo uvozom datoteke.</div>",
		statisticsName: "Statistike",
		statisticsSnip: "Izračunava žarišne statistike za svaki piksel slike na temelju definiranog žarišnog susjedstva.",
		statisticsDesc: "Funkcija Statistike izračunava žarišne statistike za svaki piksel slike na temelju definiranog žarišnog susjedstva.<div><br/> Funkcija Statistike može se upotrijebiti za popunjavanje izostavljenih redaka na slici. Izostavljene linije često su uzrokovane problemima u senzoru gdje se podaci ne prikupljaju. To se dogodilo u senzorima kao što je Landsat 7's Enhanced Thematic Mapper Plus (ETM+). Ti podaci koji nedostaju uzrokuju probleme za analizu te kada gledate snimke. Malo se toga može učiniti kada se koriste snimke za analizu; međutim, ako je došlo do preklapanja slike, može se koristiti umjesto sadržaja koji nedostaje. Isto se može učiniti ako se snimke koriste za vizualizaciju. Međutim, ne postoji uvijek dodatna slika za popunjavanje sadržaja koji nedostaje, tako da mora biti izvedena iz postojećih podataka.</div>",
		streamLinkName: "Veza potoka",
		streamLinkSnip: "Dodjeljuje jedinstvene vrijednosti dijelovima rasterske linearne mreže između sjecišta.",
		streamLinkDesc: "Globalna funkcija Veza potoka dodjeljuje jedinstvene vrijednosti dijelovima rasterske linearne mreže između sjecišta.<div><br/> Veze su dijelovi kanala potoka koji spajaju dva uzastopna spoja, spoj i izlaz, ili spoj i granicu odvoda. U hidrologiji, ovi segmenti potoka nazivaju se dohvati. Spoj je vezan za točku ulijevanja i pomaže odrediti granicu sliva ili podsliva.</div>",
		stretchName: "Rastegni",
		stretchSnip: "Poboljšava sliku podešavanjem raspona prikazanih vrijednosti. To ne mijenja temeljne vrijednosti piksela. Ako piksel ima vrijednost izvan navedenog raspona, pojavit će se kao minimalna ili maksimalna vrijednost.",
		stretchDesc: "Funkcija Rastegni poboljšava sliku promjenom svojstava kao što su svjetlina, kontrast i game kroz više vrsti rastezanja. Ova funkcija koristi statistiku iz rastera unutar skupa podataka mozaika; stoga, ako koristite ovu funkciju, morate provjeriti jesu li statistike izračunate.<div><br/> Tip rastezanja definira rastezanje histograma koje će se primijeniti na rastere kako bi se poboljšao njihov izgled. Rastezanje poboljšava izgled podataka širenjem vrijednosti piksela duž histograma iz minimalnih i maksimalnih vrijednosti definiranih njihovom dubinom bita. </div>",
		swathName: "Otkos",
		swathSnip: "Interpolira iz nepravilnih mreža ili podataka o otkosu.",
		swathDesc: "Neki NetCDF ili HDF skupovi podataka pohranjuju svoje geolokacije kao nepravilno raspoređena polja. Prilikom dodavanja tih skupova podataka u skup podataka mozaika, funkcija otkosa uzima nepravilne mrežne podatke i ponovno ih uzorkuje tako da je svaki piksel jednake veličine i u obliku kvadrata.<div><br/>Prilikom dodavanja varijabli iz funkcije netCDF ili HDF u skup podataka mozaika, automatski će provjeriti raspoređuju li se podaci redovno. Ako to nije slučaj, funkcija otkosa automatski se primjenjuje za pretvaranje nepravilnog rastera u točke, a zatim u redoviti mrežni raster. Možete promijeniti metodu interpolacije i veličinu ćelije koja se upotrebljava u funkciji otkosa neredovitih podataka. Za pravilo raspoređene podatke rastera neće se primijeniti interpolacija, podaci će se čitati kakvi jesu.</div>",
		tanHName: "TanH",
		tanHSnip: "Izračunava hiperbolni tangens ćelija u rasteru.",
		tanHDesc: "Funkcija izračunava hiperbolni tangens piksela u rasteru.",
		tanName: "Tan",
		tanSnip: "Izračunava tangens ćelija u rasteru.",
		tanDesc: "Funkcija izračunava tangens piksela u rasteru. ",
		tasseledCapName: "Tasseled Cap (Kauth-Thomas)",
		tasseledCapSnip: "Izračunava razine vegetacije, vlažnosti i svjetline. Ova se tehnika oslanja na koeficijente koji se moraju posebno izračunati za senzor.",
		tasseledCapDesc: "Transformacija Tasseled Cap (Kauth-Thomas) dizajnirana je za analizu i kartiranje vegetacijske fenomenologije i promjena urbanog razvoja koje otkrivaju različiti satelitski senzorski sustavi. Poznata je kao transformacija Tasseled Cap zbog oblika grafičke distribucije podataka. Transformacija je pružila obrazloženje za obrasce pronađene u podacima Landsat MSS-a o poljoprivrednim poljima kao funkciji životnog ciklusa usjeva. U osnovi, kako usjevi rastu od sjemena do zrelosti, dolazi do neto povećanja blizu infracrvenog i smanjenja crvenog odsjaja na temelju boje tla<div><br/>Korisnost ove transformacije proširila se od praćenja usjeva na analizu i kartiranje vegetacije kako bi se podržale različite primjene kao što su šumarstvo, upravljanje industrijskom vegetacijom, kartiranje i upravljanje ekosustavima, inventar i praćenje za sekvestraciju ugljika i kredita, urbani razvoj i drugo. Također se proširila od podrške za Landsat MSS do drugih popularnih satelitskih sustava kao što su Landsat TM, Landsat ETM +, Landsat 8, IKONOS, QuickBird, WorldView-2 i RapidEye multispektralni senzori.</div>",
		timesName: "Vremena",
		timesSnip: "Množi vrijednosti dvaju rastera na temelju pojedine ćelije.",
		timesDesc: "Funkcija Vremena množi vrijednosti dvaju rastera na temelju pojedinog piksela.",
		transposeBitsName: "Prijenosa bitova",
		transposeBitsSnip: "Raspakirava bitove ulaznog piksela i kartira ih na specificirane bitove u izlaznom pikselu. Svrha ove funkcije manipuliranje je bitovima s nekoliko ulaza, kao što su kvalitetni produkti kanala Landsat 8.",
		transposeBitsDesc: "Funkcija Prijenosa bita raspakirava bitove ulaznog piksela i kartira ih na specificirane bitove u izlaznom pikselu. Svrha ove funkcije manipuliranje je bitovima s nekoliko ulaza, kao što su kvalitetni produkti kanala Landsat 8.",
		unitConversionName: "Pretvaranje jedinice",
		unitConversionSnip: "Mijenja vrijednosti iz jedne mjerne jedinice u drugu.",
		unitConversionDesc: "Ova funkcija pretvara piksele iz jedne jedinice u drugu. Podržava pretvorbu udaljenosti, brzine i temperature.",
		vectorFieldName: "Vektorsko polje",
		vectorFieldSnip: "Prikazuje skupove podataka s veličinom (u) i smjerom (v) kao strelice gdje je veličina prikazana veličinom strelice, a smjer je prikazan kutom strelice.",
		vectorFieldDesc: "Funkcija vektorskog polja koristi se za sastavljanje i pretvaranje dvaju rastera u dvokanalni raster koji ima vrstu podataka Veličina-smjer ili vrstu podataka U-V.<div><br/> Vrijednost U ponekad se naziva i zonska brzina, a vrijednost V ponekad se naziva meridijanskom brzinom.</div>",
		viewshed2Name: "Vidljivost",
		viewshed2Snip: "Određuje lokacije površine rastera vidljive skupu geoobjekata promatrača pomoću geodetskih metoda.",
		viewshed2Desc: "Funkcija vidljivost određuje lokacije površine rastera vidljive skupu geoobjekata promatrača pomoću geodetskih metoda<div><br/>Vidljivost svakog pikselskog središta određuje se testom vidljivosti između cilja i svakog promatrača. Ako promatrač može vidjeti cilj u središtu piksela, piksel se smatra vidljivim. Ovaj alat uvijek uzima u obzir zakrivljenost zemlje kada se određuje vidljivost.</div>",
		watershedName: "Sliv",
		watershedSnip: "Određuje uzvodno područje iznad skupa ćelija u rasteru",
		watershedDesc: "Globalna funkcija Vodenog sliva određuje uzvodno područje iznad skupa piksela u rasteru. Vodeni slivovi određeni su prema smjeru protoka na rasteru koji identificira smjer protoka od svakog piksela.",
		weightedOverlayName: "Ponderirano preklapanje",
		weightedOverlaySnip: "Preklapa nekoliko rastera pomoću zajedničke mjerne ljestvice i pondera, ovisno o njegovoj važnosti.",
		weightedOverlayDesc: "Ova funkcija omogućuje preklapanje nekoliko rastera pomoću zajedničke mjerne ljestvice i pondera, ovisno o njegovoj važnosti.",
		weightedSumName: "Ponderirani zbroj",
		weightedSumSnip: "Ponderira i zbraja polje rastera na temelju pojedine ćelije.",
		weightedSumDesc: "Funkcija Ponderiranog zbroja omogućuje vam preklapanje nekoliko rastera, množenjem svakog od njih danim ponderom i njihovim zbrajanjem.",
		windchillName: "Hladni vjetar",
		windchillSnip: "Kombinira temperaturu okolnog zraka i brzinu vjetra za izračun faktora hladnog vjetra.",
		windchillDesc: "Funkcija Hladnog vjetra korisna jeza identifikaciju opasnih zimskih uvjeta koji, ovisno o vremenu izlaganja elementima, mogu dovesti do ozeblina ili čak hipotermije. Funkcija Hladnog vjetra način je da se izmjeri koliko se čovjek osjeća hladno kad se uzme u obzir vjetar s već niskim temperaturama. Što je brzina vjetra brža, tijelo brže gubi toplinu i hladnije će se osjećati.",
		zonalRemapName: "Zonalno ponovno kartiranje",
		zonalRemapSnip: "Ponovno kartira piksele u rasteru na temelju zona definiranih u drugom rasteru i kartiranju vrijednosti ovisnim o zonama definiranom u tablici.",
		zonalRemapDesc: "Ova funkcija omogućuje vam da ponovno kartirate piksele u rasteru na temelju zona definiranih u drugom rasteru i kartiranju vrijednosti ovisnim o zonama definiranom u tablici.",
		zonalStatisticsName: "Zonalne statistike",
		zonalStatisticsSnip: "Izračunava statistiku za vrijednosti rastera unutar zona drugog skupa podataka.",
		zonalStatisticsDesc: "Funkcija izračunava statistiku za vrijednosti rastera unutar zona drugog skupa podataka. Zona se definira kao sva područja u unosu koje imaju istu vrijednost. Ta područja ne moraju biti susjedna. Kada su zona i unosi vrijednosti rasteri iste razlučivosti, oni će se izravno upotrebljavati. Ako su razlučivosti različite, primjenjuje se interno ponovno uzorkovanje da bi se razlučivosti podudarale prije nego se izvrši zonalne operacije.",
		flowLengthName: "Duljina protoka",
		flowLengthSnip: "Računa uzlaznu ili silaznu udaljenosti ili poderirane udaljenosti uzduž putanje protoka za svaku ćeliju.",
		flowLengthDesc: "Ovo je globalna funkcija rastera. Ova funkcija stvara rasterski sloj uzlazne ili silazne udaljenosti ili ponderirane udaljenosti uzduž putanje protoka za svaku ćeliju.<div><br/>Primarna upotreba funkcije Duljina protoka je izračun duljine najdulje putanje protoka unutar danog sliva. To se mjerenje često upotrebljava za izračun vremena koncentracije sliva. Provodi se upotrebom opcije Uzlazno. Funkciju je moguće upotrijebiti i za stvaranje dijagrama udaljenosti i područja hipotetskih kiša i otjecanja upotrebljavajući raster pondera kao impedanciju za kretnju niz padinu.</div>",
		streamOrderName: "Redoslijed potoka",
		streamOrderSnip: "Dodjeljuje brojeve segmentima rastera koji predstavljaju grane linearne mreže",
		streamOrderDesc: "Ovo je globalna funkcija rastera. Ova funkcija stvara rasterski sloj koji dodjeljuje brojeve segmentima rastera koji predstavljaju grane linearne mreže.<div><br/>Izlazni podaci funkcije Redoslijed potoka bit će bolje kvalitete ako se ulazni rasterski sloj potoka i ulazni rasterski sloj smjera protoka izvode iz istog izvora. Ako se raster potoka izvodi iz rasteriziranog skupa podataka o potocima, izlazni podaci možda neće biti upotrebljivi, jer na temelju pojedine ćelije smjer neće odgovarati lokaciji ćelija potoka. Rezultati funkcije Akumulacija protoka može se upotrijebiti za stvaranje rasterske mreže potoka primjenom praga vrijednosti radi odabira ćelija s visokim akumuliranim protokom. Na primjer, ćelije u koje teče više od 100 ćelija upotrebljavaju se za određivanje mreže potoka. Upotrijebite funkciju Uvjeta ili Postavi na bez vrijednosti kako biste stvorili raster mreže potoka u kojem vrijednosti akumulacije protoka koje su jednake ili veće od 100 odlaze u jednu, a ostatak odlazi u pozadinu (NoData). Mreža potoka koja time nastaje može se upotrijebiti u funkciji Redoslijed potoka. Ova funkcija podržava samo rasterski sloj smjera ulaznog protoka D8. D8 smjerovi protoka mogu se stvoriti pomoću funkcije Smjer protoka i pokrenuti zadanom vrstom smjera protoka D8.</div>",
		snapPourPointName: "Poravnaj točku ulijevanja",
		snapPourPointSnip: "Poravnava točke ulijevanja s ćelijom najviše akumulacije protoka unutar određene udaljenosti",
		snapPourPointDesc: "Ovo je globalna funkcija rastera. Ova funkcija poravnava točke ulijevanja s ćelijom najviše akumulacije protoka unutar određene udaljenosti.<div><br/>Funkcija Poravnaj točku ulijevanja upotrebljava se radi osiguranja odabira točaka visoke akumulacije protoka pri određivanju slivnih bazena upotrebljavajući funkciju Razvodnica. Poravnaj točku ulijevanja tražit će unutar udaljenosti za poravnanje oko određenih točaka ulijevanja ćeliju s najvišom akumulacijom protoka i premjestiti točku ulijevanja na tu lokaciju. Izlazi rasterski sloj s cijelim brojevima kada se originalne lokacije točaka ulijevanja poravnaju s lokacijama viših akumulacija protoka.</div>",
		sinkName: "Najniža vrijednost",
		sinkSnip: "Stvara raster koji identificira sve najniže vrijednosti ili područja s unutarnjim odvodom",
		sinkDesc: "Ovo je globalna funkcija rastera. Ova funkcija stvara rasterski sloj koji identificira sve najniže vrijednosti ili područja s unutarnjim odvodom. Najniža vrijednost ćelija je ili skup prostorno povezanih ćelija sa smjerom protoka kojemu nije moguće dodijeliti jedan od osam važećih vrijednosti u rasteru smjera protoka. Do toga može doći kada su sve susjedne ćelije više od ćelije obrade ili kada dvije ćelije teku jedna u drugu, stvarajući petlju od dvije ćelije.<div><br/>Funkcija Najniža vrijednost podržava samo rasterski sloj smjera ulaznog protoka D8. D8 smjerovi protoka mogu se stvoriti pomoću funkcije Smjer protoka i pokrenuti zadanom vrstom smjera protoka D8. Rezultat funkcije Najniža vrijednost raster je s cijelim brojevima, pri čemu se svakoj najnižoj vrijednosti dodjeljuje jedinstvena vrijednost. Te jedinstvene vrijednosti nalaze se u rasponu između broja jedan i ukupnog broja najnižih vrijednosti. Na primjer, kada bi ukupan broj najnižih vrijednosti bio 1000, jedinstvene vrijednosti bile bi u rasponu od 1 do 1000.</div>",
		aggregateName: "Agregacija",
		aggregateSnip: "Generira inačicu rastera sa smanjenom razlučivosti.",
		aggregateDesc: "Funkcija Agregiranja ponovno unosi raster ulaza u grublje razlučivosti na temelju određene strategije agregiranja. Svaka izlazna ćelija sadrži zbroj, najmanju, najveću, srednju ili srednju vrijednost ulaznih ćelija koje su obuhvaćene opsegom te ćelije.<div><br/>Možete specificirati čimbenik po kojem se umnožavaju veličine ćelije ulaznog rastera. Na primjer, vrijednost faktora ćelije od tri rezultirala bi izlazom gdje je veličina ćelije tri puta veća od one na ulaznom rasteru. Možete definirati kako postupati s opsegom izlaza ako broj redova ili stupaca na ulazu nije točan višestruki faktor ćelije. Prema zadanim postavkama gornja i desna granica bit će proširene kako bi obuhvatile veći prostorni opseg od one ulaznog rastera kako bi se osiguralo da se sve ulazne ćelije procesuiraju. Alternativno, gornja i desna granica mogu se smanjiti da pokrivaju manji opseg, tako da je broj obrađenih redaka i stupaca točan višestruki faktor ćelije. Možete definirati kako će ćelijama Bez podataka upravljati izračunavanje agregacije. Zadani mehanizam je da će ulazne ćelije Bez podataka koje spadaju u prostorni opseg veće ćelije u izlaznom rasteru biti zanemarene prilikom određivanja vrijednosti te izlazne ćelije. Alternativno, možete specificirati da ako postoji čak i jedna ulazna ćelija Bez podataka unutar prostornog opsega izlazne ćelije, ta ćelija biti Bez podataka u izlaznom rasteru.</div>",
		ccdcName: "CCDC Analiza",
		ccdcSnip: "Procjenjuje promjene u vrijednostima piksela tijekom vremena koristeći algoritam Neprekidne Detekcije i Klasifikacije Promjena (CCDC) i generira rezultate modela.",
		ccdcDesc: "Funkcija CCDC analiza procjenjuje promjene u vrijednostima piksela tijekom vremena koristeći algoritam Neprekidne Detekcije i Klasifikacije Promjena (CCDC) i generira višedimenzionalni raster koji sadrži rezultate modela. Podržana je samo u kombinaciji s Otkrij promjenu pomoću funkcije analiza promjene u predlošku rasterske funkcije. Da biste proizveli rasterski izlaz, povežite funkciju CCDC analize s funkcijom Otkrij promjenu pomoću funkcije analiza promjene, spremite kao predložak rasterske funkcije i pokrenite Rastersku analizu s predloškom funkcije.<div><br/>Ova funkcija koristi algoritam Neprekidne Detekcije i Klasifikacije Promjena (CCDC) za procjenu promjena vrijednosti piksela tijekom vremena za snop slika. U vremenskoj seriji optičkih slika ili njihovih derivata (na primjer, NDVI) vrijednosti piksela mogu varirati iz nekoliko razloga: 1. Sezonske promjene - Promjene vrijednosti piksela odražavaju promjene u vegetaciji zbog sezonske varijabilnosti temperature i oborina. Na primjer, u sjevernoj hemisferi očekujemo veću gustoću zelene vegetacije tijekom ljeta u odnosu na zimu; 2. Postepena promjena - Promjene vrijednosti piksela odražavaju trendove u vegetaciji ili površinskim vodama zbog klimatske varijabilnosti ili dugoročne prakse upravljanja zemljištem. Na primjer, golo tlo se može postupno povećavati u području zbog dugotrajnog pada oborina; i 3. Nagla promjena - promjene vrijednosti piksela odražavaju promjene pokrovnosti zemljišta koje se iznenada događaju zbog krčenja šuma, urbanog razvoja, prirodnih katastrofa itd. CCDC algoritam identificira sve tri vrste promjena s osnovnom svrhom identificiranja nagle promjene. Harmonični regresijski i trend-modeli uklapaju se u podatke za procjenu sezonskih i postupnih promjena, a nagla odstupanja od trend-modela ukazuju na nagle promjene.<div><br/>CCDC algoritam prvobitno je dizajniran za Landsat TM, Landsat ETM + i Landsat OLI podatke Površinske refleksije ili temperaturu svjetline podatke. Međutim, funkcija Otkrij promjenu pomoću funkcije analiza promjene u kombinaciji s ovom funkcijom otkrit će promjene za višepojasne slike s bilo kojeg podržanog senzora, kao i jednopojasne derivate slike, kao što su indeksi opsega. Na primjer, možete izvršiti kontinuirano otkrivanje promjena na rasteru Indeks normalizacije razlike u vegetaciji (NDVI), jer nagle promjene NDVI-a mogu ukazivati na krčenje šuma.</div>",
		computeChangeName: "Izračunaj promjenu",
		computeChangeSnip: "Izračunava razliku između dva kategorična ili kontinuirana rasterska skupa podataka.",
		computeChangeDesc: "Funkcija Izračunaj promjenu može se koristiti za pobrojavanje razlika između dva klasificirana rastera za analizu promjene pokrova zemljišta ili se može koristiti za ispitivanje promjena između dva jednopojasna kontinuirana raster, kao što su povišenje, temperatura, pokrov krošnji itd.",
		detectChangeName: "Otkrivanje promjena pomoću analize promjena",
		detectChangeSnip: "Stvara rasterski sloj koji sadrži informacije o promjeni piksela koristeći raster za analizu promjene izlaza",
		detectChangeDesc: "<div>Otkrivanje promjena pomoću analize promjena stvara rasterski sloj koji sadrži informacije o datumu promjene piksela koristeći raster za analizu promjene. Raster za analizu promjene mora generirati alat Analiziraj promjene pomoću CCDC-a ili alat Analiziraj promjene pomoću LandTrendr-a, ili rasterska funkcija CCDC Analiza ili rasterska funkcija LandTrendr Analiza.</div><br><div>Ova rasterska funkcija može se kombinirati s rasterskom funkcijom CCDC Analiza ili rasterskom funkcijom LandTrendr Analiza u predlošku rasterske funkcije. Da biste proizveli trajni rasterski izlaz, povežite izlaz funkcije CCDC analize ili LandTrendr analize s funkcijom Otkrij promjenu pomoću analize promjene, spremite kao predložak rasterske funkcije i pokrenite Rastersku analizu s predloškom.</div><br><div>Parametar <strong>Change Type</strong> označava generirane podatke. Informacije se uzimaju iz rastera za analizu promjene. Kada pokrećete ovu funkciju na izlazu iz CCDC funkcije/alata, možete birati između sljedećih opcija:</div><ul><li><strong>Time of latest change</strong>--Najnoviji datum i vrijeme u kojem je piksel označen kao promijenjen.</li><li><strong>Time of earliest change</strong>--Najraniji datum i vrijeme kada je piksel označen kao promijenjen.</li><li><strong>Vrijeme najveće promjene</strong>--Datum i vrijeme kada je izračunata promjena bila najznačajnija za piksel.</li><li> <strong>Number of changes</strong>--Ukupan broj promjena piksela.</li></ul><div>Pri pokretanju ove funkcije na izlazu iz funkcije/alata LandTrendr dostupne su sljedeće dodatne mogućnosti:</div><ul><li><strong>Time of longest change</strong>--Datum kada je piksel označen kao promijenjen, na početku ili na kraju najduljeg razdoblja promjene.</li><li><strong>Time of shortest change</strong>--Datum kada je piksel označen kao promijenjen, na početku ili na kraju najkraćeg razdoblja promjene.</li><li><strong>Time of fastest change</strong>--Datum kada je piksel označen kao promijenjen, na početku ili na kraju najbržeg razdoblja promjene.</li><li><strong>Time of slowest change</strong>--Datum kada je piksel označen kao promijenjen, na početku ili na kraju najsporijeg razdoblja promjene.</li></ul><div>Izlazni raster je višepojasni raster u kojem svaki pojas sadrži informacije o promjeni ovisno o odabranoj vrsti promjene i navedenom maksimalnom broju promjena. Na primjer, ako je <strong>Change Type</strong> postavljeno na <strong>Time of Earliest Change</strong>, a <strong>Maximum Number of Changes</strong> postavljen na 2, funkcija izračunava dva najranija datuma kada se promjena dogodila tijekom vremenskog niza za svaki piksel. Rezultat je raster u kojem prvi pojas sadrži datume najranije promjene po pikselu, a drugi pojas sadrži datume druge najranije promjene po pikselu.</div><br><div>Kada primjenjujete ovu funkciju na izlazu iz LandTrendr alata, možete odabrati želite li izdvojiti datum koji označava početak promjene ili kraj promjene pomoću parametra <strong>Segment Date</strong>. Na primjer, da biste razumjeli kako je započela najnovija promjena u vremenskom nizu, postavite <strong>Change Type</strong> na <strong>Time of latest change</strong>, a <strong>Segment Date</strong> na <strong>Beginning of segment</strong>.</div><br><div>Upotrijebite sljedeće parametre filtriranja za izdvajanje određenijih datuma promjene iz vašeg rastera za analizu promjena:</div><ul><li><strong>Filter by year</strong>--Prepoznajte promjene koje su se dogodile u određenom vremenskom razdoblju, na primjer, ako tražite promjene koje su se dogodile u krajoliku tijekom pet godina suše.</li><li><strong>Filter by duration</strong>--Prepoznajte promjene koje su se dogodile u određenom rasponu godina, na primjer, ako tražite samo nagle promjene koje su se dogodile tijekom 1 ili 2 godine. Trajanje koje vas zanima možete izračunati pomoću formule <strong>godina kraja - godina početka +1.</strong> Praznine u vremenskim serijama bit će uključene.</li><li><strong>Filter by magnitude</strong>--Utvrdite promjene zadane veličine, na primjer, ako tražite samo velike promjene u indeksu vegetacije NDVI. Veličina je apsolutna vrijednost, tako da minimalna i maksimalna vrijednost ne mogu biti negativne. Da biste odredili promjenu smjera, upotrijebite parametar <strong>Change Direction</strong>.</li></ul>",
		distanceAccumulationName: "Prijeđena udaljenost",
		distanceAccumulationSnip: "Izračunava prijeđenu udaljenost za svaku ćeliju do izvora, omogućavajući udaljenost ravne linije, troškovnu udaljenost, stvarnu površinsku udaljenost, kao i vertikalne i horizontalne faktore troškova.",
		distanceAccumulationDesc: "Prijeđena udaljenost izračunava udaljenost do svake lokacije u istraživanom području do najbližeg ili najmanje izvora koji najmanje košta. Ako su za unos predviđeni samo izvori, izračunava se ravnocrtna udaljenost do svakog mjesta u istraživanom području. Prijeđena udaljenost izračunava ravninsku udaljenost oko prepreka ako se oba izvora i prepreke koriste kao izvor. I za izvorni i za preprečni raster pozadinska vrijednost treba biti Bez podataka (NoData), dok su izvori i barijere prikazani s važećim vrijednostima ćelije. Važeće vrijednosti uključuju nulu. <div><br/>Kada se površinski raster stavi kao ulaz, izračunava se stvarna udaljenost površine između ćelija. Za provođenje analize troškova pomoću Prijeđene udaljenosti potrebna je površina troškova. Ako se dobije površina troška, tada je rezultat akumulirani rashod troškovne udaljenosti. Kada se dani horizontalni i okomiti faktori, tada se usmjeravanje smatra troškom akumuliranja. Postoje četiri karakteristike izvora koje se mogu koristiti. Ove karakteristike, koje mogu biti izvori ili pokretači iz izvora, kontroliraju se posebnim parametrima: 1. Početna akumulacija:   postavlja početni trošak prije nego što krene kretanje. 2. Maksimalna akumulacija:   određuje koliko troškova može akumulirati izvor prije nego što dosegne svoj limit. 3. Množitelj koji se primjenjuje na troškove:   određuje način putovanja ili veličinu na izvoru. 4. Smjer putovanja:  u202f identificira započinje li pokretač kod izvora i kreće se prema lokacijama na kojima nisu izvori, ili se ne pokreće s izvora i vraća se natrag do izvora.<div><br/>Prema zadanim postavkama, prijeđena udaljenost na daljinu je jedan pojas, što je rast akumulacije udaljenosti. Međutim, može se stvoriti i drugi pojas, pojas stražnjeg smjera. Ovaj pojas označava sa svake lokacije u istraživanom području u kojem smjeru trebate ići do izvora s najmanje troškova. Oba pojasa su potrebna za određivanje optimalnih putanja unutar područja proučavanja. Kako bi kreirali put, najprije koristite funkciju Izdvoji pojas za ekstrakciju rastera akumulacije udaljenosti i rastera stražnjeg smjera. Koristite ove slojeve kao ulaz za funkciju Trošak puta. U funkciji koristite raster prijeđene udaljenosti kao unos rastera troškovne udaljenosti, a raster stražnjeg smjera kao ulazni Raster povratne veze troškova.</div>",
		distanceAllocationName: "Raspodjela udaljenosti",
		distanceAllocationSnip: "Izračunava raspodjelu udaljenosti za svaku ćeliju do ponuđenih izvora na temelju ravne udaljenosti, troškovne udaljenosti, stvarne površinske udaljenosti, kao i vertikalnih i horizontalnih faktora troškova.",
		distanceAllocationDesc: "Raspodjela udaljenosti izračunava kojem je izvoru dodijeljeno svako mjesto u istraživanom području. Ako su za unos predviđeni samo izvori, raspoređuju se lokacije koristeći ravnu udaljenost do najbližeg izvora. Ako se i izvori i barijere koriste kao ulaz, tada raspodjela udaljenosti izračunava udaljenost pravoj liniji oko prepreka kako bi se utvrdilo kojem izvoru je dodijeljena lokacija. I za izvorni i za preprečni raster pozadinska vrijednost treba biti Bez podataka (NoData), dok su izvori i barijere prikazani s važećim vrijednostima ćelije. Važeće vrijednosti uključuju nulu.<div><br/> Za provođenje analize troškova pomoću Raspodjele udaljenosti potrebna je površina troškova. Ako se dobije površina troškova, tada je rezultat raster raspodjele koji se temelji na akumuliranom trošku, a ne na pravoj udaljenosti. Kada se dani horizontalni i okomiti faktori, tada se usmjeravanje smatra troškom akumuliranja. Kada se površinski raster isporučuje kao ulaz, tada se izračuna stvarna udaljenost površine prijeđena između ćelija kada se utvrdi raspodjela. Postoje četiri karakteristike izvora koje se mogu koristiti. Ove karakteristike, koje mogu biti izvori ili pokretači iz izvora, kontroliraju se posebnim parametrima: 1. Početna Akumulacija:   postavlja početni trošak prije nego što krene kretanje. 2. Maksimalna Akumulacija:   određuje koliko troškova može akumulirati izvor prije nego što dosegne svoj limit. 3. Množitelj koji se primjenjuje na troškove:   određuje način putovanja ili veličinu na izvoru. 4. Smjer putovanja:  u202f identificira započinje li pokretač kod izvora i kreće se prema lokacijama na kojima nisu izvori, ili se ne pokreće s izvora i vraća se natrag do izvora.<div><br/>Prema zadanim postavkama, rezultat Raspodjele udaljenosti je jedan pojas, što je raster za raspodjelu udaljenosti. Provjera opcije Boolean Generiranje izvornog retka i stupca kao dodatnih pojaseva u izlazu rezultirat će višepojasnim rasterom koji se sastoji od tri pojasa. Prvi pojas je pojas za raspodjelu udaljenosti, drugi pojas sadrži indeks reda, a treći pojas sadrži indeks stupaca. Ovi indeksi identificiraju lokaciju izvorne ćelije koja je najmanje udaljena akumulirana udaljenost troškova. Indeks retka izvora i indeks stupaca izvora mogu se koristiti zajedno za izvođenje mapiranja intenziteta. Ako izvršite upit za bilo koju lokaciju u vašem studijskom području preko pojasa dva i tri, znat ćete redak i stupac s izvorom najmanje troškova za tu lokaciju.</div>",
		eucBackDirectionName: "Euklidski stražnji smjer",
		eucBackDirectionSnip: "izračunava za svaku ćeliju smjer u stupnjevima prema susjednoj ćeliji najkraćim putem natrag do najbližeg izvora izbjegavajući barijere.",
		eucBackDirectionDesc: "Funkcija Euklidski stražnji smjer rezultira kontinuiranim rasterom s plutajućom točkom koja predstavlja smjer u stupnjevima prema najbližem izvoru, izbjegavajući prepreke ako postoje.<div><br/>Unosi u Euklidski stražnji smjer su izvor prema kojem će smjer biti izračunat. Opcionalni unos je raster koji predstavlja prepreke u području ispitivanja. I za izvorni i za preprečni raster pozadinska vrijednost treba biti Bez podataka (NoData), dok su izvori i barijere prikazani s važećim vrijednostima. Važeće vrijednosti uključuju nulu. Prema zadanim postavkama, obračun će se obraditi u kombiniranom opsegu izvora i prepreka, plus 2 reda i stupaca. Ako je analiza potrebna samo na određenoj udaljenosti od izvora, tada se može koristiti parametar Maksimalna udaljenost. Euklidski stražnji smjer podržava i Planarnu i Geodetsku metodu u proračunu. Planarna metoda izračuna će se izvršiti na projiciranoj ravnini pomoću 2D kartezijanskog koordinatnog sustava. Geodetska metoda izračuna će se izvršiti na elipsoidu, što znači da se bez obzira na ulaznu ili izlaznu projekciju rezultati ne mijenjaju.<div><br/>Rezultat funkcije Euklidskog stražnjeg smjera može se upotrijebiti zajedno s rezultatom funkcije Euklidske udaljenosti za određivanje najkraćih staza od mjesta unutar područja proučavanja do izvora. I rezultat Euklidskog stražnjeg smjera i rezultat Euklidske udaljenosti koriste se u funkciji troška puta zajedno s odredištima za generiranje najkraćih staza.</div>",
		expandName: "Proširi",
		expandSnip: "Proširi odabrane zone rastera po zonama prema određenom broju ćelija.",
		expandDesc: "Pomoću funkcije Globalno proširenje možete generalizirati ili pojednostaviti rastere povećavajući određene zone. Također možete kontrolirati količinu generalizacije koja će se dogoditi.<div><br/>Zone koje odaberete povećavat će se širenjem u druge zone. Koncepcijski, odabrane Vrijednosti zona mogu se promatrati kao prednje zone, dok ostale vrijednosti ostaju stražnje zone. Prednje zone mogu se proširiti u stražnje zone.<div><br/>Količina generalizacije može se kontrolirati parametrom Broj ćelija. Prema zadanim postavkama, ova vrijednost je 1, što znači da će se odabrane zone proširiti za količinu koja odgovara veličini jedne ćelije. Da biste povećali stupanj generalizacije, možete odrediti veću vrijednost za ovaj parametar. Koncepcijski, to je kao pokretanje alata onoliko puta koliko je naveden broj, a rezultati prethodnog izvođenja su ulaz u naknadnu iteraciju.</div>",
		trendAnalysisName: "Generiraj trend",
		trendAnalysisSnip: "Procjenjuje trend za svaki piksel po dimenziji za jednu ili više varijabli u višedimenzionalnom rasteru.",
		trendAnalysisDesc: "<div>Ova se funkcija može koristiti za dolikovanje podataka duž linearne, harmoničke ili polinomske linije trenda ili se može koristiti za izvršavanje detekcije trenda pomoću Mann-Kendall ili Seasonal-Kendall testa.</div><br><div>Izlazni raster trenda generiran ovom funkcijom koristi se kao ulaz u funkciju <strong>Predict Using Trend</strong>.</div><br><div>Mann-Kendall i Seasonal-Kendall testovi koriste se kako bi se utvrdilo postoji li monotoni trend u podacima. Oni su neparametarski, što znači da ne pretpostavljaju određenu raspodjelu podataka. Mann-Kendall test ne uzima u obzir serijsku korelaciju ili sezonske učinke. Ako su podaci sezonski, prikladniji je Seasonal-Kendall test.</div><br><div>Ako se alat koristi za provođenje Mann-Kendall ili Seasonal-Kendall testa, izlaz je petpojasni raster kako slijedi:</div><ul><li>Pojas 1 = Sen padina</li><li>Pojas 2 = p-vrijednost</li><li>Pojas 3 = Mann-Kendall rezultat (S)</li><li>Pojas 4 = S varijansa</li><li>Pojas 4 = S varijansa</li><li>Pojas 5 = Z-rezultat</li></ul><div>Izlazi iz Mann-Kendall ili Seasonal-Kendall testa mogu se koristiti za određivanje koji pikseli u vašim višedimenzionalnim vremenskim serijama imaju statistički značajan trend. Te informacije možete koristiti zajedno s linearnom, harmoničnom ili polinomnom analizom trenda za izdvajanje značajnih trendova iz vaših vremenskih serija. Možete generirati masku koja uključuje piksele sa značajnim p-vrijednostima, primijeniti masku na višedimenzionalni raster i koristiti ovaj maskirani višedimenzionalni raster kao ulaz u alat za izvođenje linearne, harmonijske ili polinomne analize trenda.</div><br><div>Postoje tri mogućnosti crte trenda za dolikovanje trenda promjenljivim vrijednostima duž dimenzije: linearna, polinomna i harmonijska.</div><br><div>Za linearnu analizu trenda, izlaz je raster s tri pojasa, kako slijedi:</div><ul><li>Pojas 1 = Padina</li><li>Pojas 2 = Presretanje</li><li>Pojas 3 = Korijenska srednja kvadratna pogreška (RMSE) ili pogreška oko linije koja najbolje odgovara</li></ul><div>Za analizu polinomnog trenda, broj pojasa u izlazu ovisi o polinomnom redoslijedu. Polinomsko dolikovanje drugog reda stvara četveropojasni raster kako slijedi:</div><ul><li>Pojas 1 = Polinom_2</li><li>Pojas 2 = Polinom_1</li><li>Pojas 3 = Polinom_0</li><li>Pojas 4 = RMSE</li></ul><div>Polinomsko dolikovanje trećeg reda stvara raster od pet pojasa kako slijedi:</div><ul><li>Pojas 1 = Polinom_3</li><li>Pojas 2 = Polinom_2</li><li>Pojas 3 = Polinom_1</li><li>Pojas 4 = Polinom_0</li><li>Pojas 5 = RMSE</li></ul><div>Za analizu harmonijskog trenda, broj pojasa na izlazu ovisi o frekvenciji harmonika. Kad je frekvencija postavljena na 1, izlaz je raster s pet pojasa, kako slijedi:</div><ul><li>Pojas 1 = Padina</li><li>Pojas 2 = Presretanje</li><li>Pojas 3 = Harmonijski_sin1</li><li>Pojas 4 = Harmonijski_cos1</li><li>Pojas 5 = RMSE</li></ul><div>Kada je frekvencija postavljena na 2, izlaz je raster sa sedam pojasa, kako slijedi:</div><ul><li>Pojas 1 = Padina</li><li>Pojas 2 = Presretanje</li><li>Pojas 3 = Harmonijski_sin1</li><li>Pojas 4 = Harmonijski_cos1</li><li>Pojas 5 = Harmonijski_sin2</li><li>Pojas 6 = Harmonijski_cos2</li><li>Pojas 7 = RMSE</li></ul><div>Parametar <strong>Duljina ciklusa</strong> za analizu harmonijskog trenda koristi se za označavanje broja i duljine ciklusa koje očekujete u svojim podacima tijekom dana ili godine. Na primjer, ako očekujete da će vaši podaci proći dva ciklusa varijacije u jednoj godini, duljina ciklusa bit će 182,5 dana ili 0,5 godina. Ako podatke o temperaturi prikupljate svaka tri sata, a postoji jedan ciklus varijacije dnevno, duljina ciklusa je jedan dan.</div><br><div>Parametar <strong>Frequency</strong> za analizu harmonijskog trenda koristi se za opisivanje harmonijskog modela koji će se dolikovati podacima. Ako je frekvencija postavljena na 1, kombinacija linearne i harmonijske krivulje prvog reda koristit će se za dolikovanje modela. Ako je frekvencija 2, za dolikovanje podataka koristit će se kombinacija linearne, harmonijske krivulje prvog reda i harmonijske krivulje drugog reda. Ako je frekvencija 3, dodatna harmonijska krivulja trećeg reda koristit će se za modeliranje podataka itd.</div><br><div>Statistički podaci o ispravnosti dolikovanja modela mogu se generirati kao neobavezni rezultati. Korijenska pogreška srednjeg kvadrata (RMSE), R-na kvadrat i p-vrijednost padine trenda mogu se izračunati i simbolizirati. Simbolizirajte izlazni rasterski sloj pomoću <strong>RGB</strong> simbologije i navedite statistiku kao crveni, zeleni i plavi pojas.</div><br>",
		spectralUnmixingName: "Lineano spektralno razdvajanje",
		spectralUnmixingSnip: "Provodi klasifikaciju podpiksela i izračunava frakcijsko obilje različitih vrsta pokrivača kopna za pojedine piksele.",
		spectralUnmixingDesc: "Funkcija Lineano spektralno razdvajanje izračunava frakcijski pokrov za pojedine piksele koji sadrže više vrsta pokrivača kopna. Stvara se višepojasni sloj, pri čemu svaki pojas odgovara frakcijskom obilju svake klase pokrivača. Na primjer, možete ga koristiti za klasificiranje kopnenog pokrivača na multispektralnoj slici za prepoznavanje fotosintetske vegetacije, golog tla i mrtve ili ne fotosintetske vegetacije.<div><br/>Redoslijed izlaznog višepojasnog rastera slijedi redoslijed profila ulaznog spektra. Broj klasa ne može premašiti broj pojaseva u ulaznom rasteru. Na primjer, ne možete izdvojiti podatke o više od 8 klasa iz rastera s 8 pojasa.</div>",
		multidimensionalFilterName: "Multidimenzionalni filtar",
		interpolateRasterByDimensionFunctionName: "Interpoliraj raster po dimenziji",
		interpolateRasterByDimensionFunctionSnip: "Interpolira višedimenzionalni raster na određenim vrijednostima dimenzija koristeći susjedne isječke.",
		interpolateRasterByDimensionFunctionDesc: "<p>Ova funkcija vam omogućuje procjenu vrijednosti piksela za nedefinirani dimenzijski isječak u višedimenzionalnom rasteru. Na primjer, ako imate skup podataka koji sadrži temperaturu oceana na površini i na 100 metara ispod razine mora i želite procijeniti temperaturu na 50 metara ispod razine mora, možete koristiti ovu funkciju kako biste dobili procjenu na toj dubini pomoću definicije dimenzije Po vrijednosti.</p><p>Također možete smanjiti uzorak mjesečnog skupa podataka u dnevni skup podataka koristeći definiciju dimenzije Po intervalu i navodeći vrijednost parametra koraka kao 1 i vrijednost parametra jedinice kao Dane.</p><p>Koristite definiciju dimenzije Po ciljnom rasteru za procjenu vrijednosti za Ciljni raster.</p>",
		multidimensionalFilterSnip: "Stvara rasterski sloj iz višedimenzionalnog rasterskog skupa podataka ili višedimenzionalnog sloja rastera rezanjem podataka duž definiranih varijabli i dimenzija.",
		multidimensionalFilterDesc: "Multidimenzionalni filtar stvara višedimenzionalni rasterski sloj filtriranjem i ekstrahiranjem podskupina varijabli iz višedimenzionalnog rastera. Na primjer, imate višedimenzionalni skup podataka koji sadrži 30 godina mjesečnih podataka o oborinama, a želite samo izdvojiti podatke za svaki siječanj da biste vidjeli kako su se oborine promijenile za taj mjesec.<div><br/>Koristite parametar Definicija dimenzije za isječak dimenzija pomoću intervala, vrijednosti ili raspona vrijednosti. Na primjer, ako imate 10 godina podataka o slanosti oceana, koji se prikupljaju mjesečno i na svaka 2 metra dubine do 500 metara, možete koristiti različite opcije definicije dimenzija za sljedeće scenarije. 1. scenarij: Izdvajanje podataka o slanosti za mjesec siječanj tijekom razdoblja od 10 godina. Odaberite Prema vrijednostima, postavite Dimenzije na Standardno vrijeme i postavite Vrijednosti na siječanj. 2. scenarij: Isječak podataka o slanosti na dubini od 0 do 150 metara. Odaberite Rasponi, postavite Dimenzije na Standardno Z i postavite Minimalnu vrijednost na -150, a maksimalnu na 0. 3. scenarij: Izdvojite podatke o slanosti prvih 10 dana svakog siječnja tijekom razdoblja od 10 godina. Odaberite Po iteracijom, postavite Dimenzije na Standardno vrijeme, postavite Početak prve iteracije i Kraj prve iteracije na odgovarajući početak i kraj razdoblja ponavljanja, postavite Korak na 1 i postavite Jedinicu na Godine.</div>",
		multidimensionalRasterName: "Višedimenzionalni raster",
		multidimensionalRasterSnip: "Dodaje višedimenzionalne podatke na kartu kao višedimenzionalni rasterski sloj.",
		multidimensionalRasterDesc: "Funkcija višedimenzionalni raster dodaje višedimenzionalne podatke na kartu kao višedimenzionalni rasterski sloj. Ova je funkcija korisna pri obavljanju radnih tijekova analize rastera koristeći lanac funkcija.<div><br/> Podržani skupovi višedimenzionalnih rasterskih podataka uključuju netCDF, GRIB, HDF i Esrijev CRF format. Višedimenzionalni mozaični skupovi podataka također su podržani.</div>",
		optimalPathAsRasterName: "Optimalni put kao raster",
		optimalPathAsRasterSnip: "Izračunava putanju najmanjeg troška od izvora do odredišta.",
		optimalPathAsRasterDesc: "Ova funkcija daje izlazni raster koji bilježi optimalnu putanju ili putanje od odabranih lokacija do najbliže ćelije izvora definirane unutar površine akumulativnog troška, u smislu udaljenosti.<div><br/>Jedna ili više ponderiranih troškovnih funkcija (Prijeđena udaljenost ili Raspodjela udaljenosti) općenito su potrebne biti pokrenute prije pokretanja funkcije Optimalni put kao raster radi stvaranja rastera ulazne prijeđene udaljenosti i stražnjeg smjera. To su obavezni ulazni rasterski slojevi u funkciji Optimalni put. Vrijednosti na izlaznom optimalnom putu predstavljaju broj staza na određenoj lokaciji. U mnogim slučajevima staze slijede istu rutu, ostavljajući izvor i zatim se razlaze prema različitim odredištima. Na primjer, vrijednost jedan označava da postoji samo jedan optimalni put na određenoj lokaciji, dok vrijednost pet znači da na tom mjestu postoji pet optimalnih staza koje prolaze kroz tu ćeliju u istraživanom području.<div><br/>Ulazni odredišni podaci moraju biti rasterski sloj. Skup odredišnih ćelija sastoji se od svih ćelija u ulaznom rasteru koje imaju valjane vrijednosti. Ćelije koje imaju vrijednosti NoData nisu uključene u skup. Vrijednost nula smatra se legitimnim odredištem. Odredišni raster može se stvoriti pomoću alata za ekstrakciju. Ako imate odredišne ili izvorne značajke, možete ih pretvoriti u rastvor pomoću funkcije Rasteriziraj značajke. Koristite raster prijeđena udaljenost ili stražnjeg smjera kao Rasterski ulaz u funkciji rasterizacije. To će osigurati rasterizaciju značajke koristeći istu veličinu, obujam i prostornu referencu ćelije kao i ostali rasteri koji idu u funkciju Optimalni put kao raster. Funkcija Optimalni put kao raster može se koristiti i za dobivanje puta najmanjeg otpora prema digitalnom modelu elevacije (DEM). U ovom slučaju koristite DEM za ulazni raster prijeđene udaljenosti i za izlaz iz funkcije smjera protoka za Raster stražnjeg smjera.</div>",
		trendName: "Predvidi pomoću trenda",
		trendSnip: "Izračunava predviđeni višedimenzionalni rasterski sloj koristeći izlazni raster trenda iz funkcije Generiraj trend ili alat Generiraj raster trenda za geoprocesiranje.",
		trendDesc: "Funkcija Predvidi pomoću trenda izračunava predviđeni višedimenzionalni rasterski sloj koristeći izlazni raster trenda iz funkcije Generiraj trend ili Generiraj raster trenda alat za geoprocesiranje.",
		rasterCollectionName: "Procesuiraj rastersku kolekciju",
		rasterCollectionSnip: "Procesuira svaki isječak u višedimenzionalnom rasteru ili svaku stavku u rasteru s mozaicima. Ova funkcija također može objediniti više isječaka u jedan isječak.",
		rasterCollectionDesc: "Funkcija Procesuiraj rastersku kolekciju procesuira svaki isječak u višedimenzionalnom rasteru ili svaku stavku u rasteru s mozaicima. Ova funkcija također može objediniti više isječaka u jedan isječak.<div><br/>Ova funkcija obrađuje svaki isječak u višedimenzionalnom rasterskom ili mozaičnom rasteru pomoću predloška rasterske funkcije. Ova funkcija podržava sljedeće opcije: 1. Navedite predložak rasterske funkcije za Funkciju stavke. Na primjer, imate mozaični skup podataka koji sadrži 20 godina Landsat slike i želite izračunati NDVI za svaku scenu u vremenskoj seriji. Za Funkciju stavke odredite predložak rasterske funkcije koji sadrži rastersku funkciju NDVI. 2. Navedite predložak rasterske funkcije za Funkciju agregiranja. Na primjer, imate višedimenzionalni raster koji sadrži podatke o dnevnoj temperaturi od 10 godina i želite izračunati maksimalnu temperaturu za svaku godinu. U Funkciji agregiranja odredite predložak rasterske funkcije koji sadrži funkciju Statistike ćelije, pri čemu je radnja postavljena na Maksimalno. U odjeljku Definicija agregacije postavite Dimenzija na Standardno vrijeme, postavite Vrsta na Ključnu riječ intervala i postavite Interval ključne riječi na Godišnji. Imajte na umu da ako skup podataka ulaza mozaika nije višedimenzionalan, funkcija agregiranja neće poštivati definiciju agregiranja. Funkcija agregiranja objedinit će sve stavke ili svaku skupinu u jednu ako su definirane u predlošku funkcije združivanja. Dodatne informacije o korištenju grupa u mozaičnom skupu podataka potražite u odjeljku Upotreba mozaičnih skupova podataka u predlošcima rasterskih funkcija. 3. Navedite predložak rasterske funkcije za Funkciju procesuiranja. Funkcija ili funkcijski lanac u ovom se predlošku koristi za prikaz novog obrađenog rastera. Na primjer, odredite predložak rasterske funkcije koji sadrži funkciju Karta boja za promjenu načina prikazivanja obrađenog sloja rastera. Imajte na umu da ako je ulaz višedimenzionalni raster, funkcija obrade primjenjuje se na trenutni isječak. Ako je ulaz sloj mozaika ili skup podataka mozaika, obrađujuća se funkcija primjenjuje na mozaik rastera pomoću Prve metode za rješavanje preklapanja. 3. Odredite predloške za bilo koju kombinaciju triju funkcija. Na primjer, imate skup mozaika koji sadrži slike krajobraznih vremenskih serija i želite generirati složene slike maksimalnog NDVI-a. Za Funkciju stavke odredite predložak rasterske funkcije koji sadrži rastersku funkciju NDVI. Za Funkciju agregiranja odredite predložak rasterske funkcije koji sadrži funkciju Statistike ćelije, pri čemu je radnja postavljena na Maksimalno. Za Funkciju obrađivanja odredite predložak rasterske funkcije koji sadrži funkciju Karta boje. Imajte na umu da redoslijed obrade funkcija slijedi redoslijed ulaznih parametara. Na primjer, Funkcija stavke će biti prva obrađena.</div>",
		randomName: "Nasumično",
		randomSnip: "Stvara raster sa slučajnim vrijednostima piksela izvučenim iz pseudo slučajne distribucije. Podržano je nekoliko distribucija i generatora slučajnih brojeva.",
		randomDesc: "Nasumična funkcija stvara raster sa vrijednostima slučajnih piksela koji se mogu upotrijebiti u predlošcima rasterskih funkcija ili mozaičnim skupovima podataka.<div><br/>Dok mnoge funkcije rade na jednom ili više ulaznih rastera, Nasumična funkcija ne zahtijeva ulazni raster. To znači da se ponaša više poput rasterskog skupa podataka nego funkcija, tako da morate posebno paziti kad ju dodajete ili uklanjanjate iz lanca funkcija.</div>",
		shrinkName: "Smanji",
		shrinkSnip: "Smanjuje odabrane zone na određeni broj ćelija zamjenjujući ih vrijednošću stanice koja je najčešća u njenom susjedstvu.",
		shrinkDesc: "Pomoću funkcije Globalno globalno možete generalizirati ili pojednostaviti rastere smanjivajući određene zone. Također možete kontrolirati količinu generalizacije koja će se dogoditi.<div><br/>Zone koje odaberete smanjit će se ili umanjiti u veličini tako što će se stanice iz okolnih zona proširiti u njih. Koncepcijski, odabrane Vrijednosti zona mogu se promatrati kao prednje zone, dok ostale vrijednosti ostaju stražnje zone. Stanice u prednjim zonama mogu se zamijeniti stanicama u pozadinskim zonama. Tanki otoci unutar zone koji se mogu smatrati dijeljenjem granica sa zonom, također se mogu zamijeniti.<div><br/>Količina generalizacije može se kontrolirati parametrom Broj ćelija. Prema zadanim postavkama, ova vrijednost je 1, što znači da će se odabrane zone smanjiti za količinu koja odgovara veličini jedne ćelije. Da biste povećali stupanj generalizacije, možete odrediti veću vrijednost za ovaj parametar. Koncepcijski, to je kao pokretanje alata onoliko puta koliko je naveden broj, a rezultati prethodnog izvođenja su ulaz u naknadnu iteraciju.</div>",
		trendToRGBName: "Trend do RGB",
		trendToRGBSnip: "Pretvara raster trenda u trokanalni (crveni, zeleni i plavi) raster.",
		trendToRGBDesc: "Trend u RGB pretvara raster trenda u trokanalni (crveni, zeleni i plavi) raster. Raster trenda generira se iz funkcije Generiraj raster trenda ili rasterske funkcije CCDC analize.<div><br/>Ova je funkcija korisna za vizualizaciju podataka o koeficijentima modela iz funkcije Generiraj trend ili CCDC analize. Obje funkcije procjenjuju trendove u promjenjivim vrijednostima piksela, ali rezultati funkcija se teški za izravno protumačiti.<div><br/>Kao i mnoge rasterske funkcije, možda ćete trebati upotrijebiti Dinamičko podešavanje raspona (DRA) za bolji prikaz rezultata ove funkcije.</div>",
		landTrendrName: "LandTrendr analiza",
		landTrendrSnip: "Procjenjuje promjene u vrijednostima piksela tijekom vremena primjenom metode kod koje se upotrebljava otkrivanje trendova ometanja i oporavka na temelju Landsat-a (LandTrendr) i generira raster za analizu promjena koji sadrži rezultate modela.",
		landTrendrDesc: "Ta funkcija rastera može se upotrebljavati samo kao unos za funkciju rastera Otkrij promjenu pomoću analize promjena. Da biste generirali rasterski izlaz, povežite funkciju LandTrendr analiza s funkcijom Otkrij promjenu pomoću analize promjene u predlošku rasterske funkcije i upotrijebite predložak kao ulaz u alatu za geoobradu Generiranje rastera iz rasterske funkcije. Rezultat je raster koji sadrži informacije o vremenu promjene vrijednosti piksela.<div><br>Svrha ove rasterske funkcije izdvajanje je promjena u promatranom geoobjektu, tako da bi idealne ulazne višedimenzionalne slike mogle snimiti dosljedno zapažanje kroz vrijeme i ne sadržavati atmosferske i senzorske smetnje, oblake, niti sjene oblaka. Najbolja je praksa korištenje podataka koji su normalizirani i mogu se maskirati pomoću kanala za kontrolu kvalitete, primjerice Landsat Collection 1 proizvodi za površinski odsjaj s maskom za oblake. <div><br>Funkcija analizira jednu sliku godišnje, a broj godišnjih isječaka mora biti jednak ili veći od vrijednosti navedene u parametru <strong>Minimalni broj opažanja</strong>. Preporuča se da imate najmanje šest godina podataka.<div><br>Ako imate mjesečne, tjedne ili dnevne podatke, preporuča se odabrati više slika iz svake godine (po mogućnosti iz iste sezone), ukloniti oblake i sjene oblaka te kombinirati slike kako biste stvorili jednu sliku koja dobro bilježi opažanje. Ako se mjesečni, tjedni ili dnevni podaci daju kao ulazni višedimenzionalni raster, funkcija identificira jedan isječak za analizu na temelju datuma koji je najbliži datumu navedenom u parametru <strong>datuma priljepljivanja</strong>.<div><br>Geoobjekt u krajoliku često treba vremena da se oporavi od privremenih promjena poput šumskog požara ili najezde insekata. Da biste upravljali brzinom oporavka koju prepoznaje model, postavite parametar Prag za oporavak. Odvojeni segment ne može imati stopu oporavka bržu od 1/Prag oporavka.<div><br>Oporavak nakon promjene krajolika može se pojaviti u pozitivnom ili negativnom smjeru. Na primjer, kada krajolik doživljava gubitak šuma, niz vrijednosti indeksa vegetacije kroz vrijeme pokazuje pad vrijednosti indeksa, a oporavak pokazuje postupno povećanje vrijednosti indeksa vegetacije, odnosno pozitivan trend oporavka. Odredite smjer trenda oporavka uz parametar <strong>Trend oporavka raste</strong>.",
		aggregateMultidimensionalName: "Agregiraj višedimenzionalno",
		aggregateMultidimensionalSnip: "Kombinira postojeće podatke varijabli iz višedimenzionalnog rastera uzduž dimenzije.",
		aggregateMultidimensionalDesc: "Funkcija Agregiraj višedimenzionalno stvara sloj višedimenzionalnog rastera kombiniranjem postojećih podataka variajbli višedimenzionalnog rastera uzduž dimenzije.<div><br>Koristite parametar <strong>Definicija dimenzije</strong> prvo za filtriranje ulaznih podataka koje želite agregirati. Na primjer, ako imate mjesečne podatke kroz 30 godina, ali želite stvoriti agregirani sloj za samo prvih 15 godina, možete upotrijebiti parametar <strong>Definicija dimenzije</strong> kako biste naznačili godine za uključivanje u analizu.<div><br><ul><li>Dohvatite podatke o slanosti za mjesec siječanj u 10-godišnjem razdoblju. Odaberite <strong>Prema vrijednostima</strong>, postavite <strong>Dimenzija</strong> na <strong>StdVrijeme</strong> i postavite <strong>Vrijednosti</strong> na <strong>siječanj</strong>.</li><li>Izrežite podatke o slanosti na dubinama u rasponu od 0 do 150 metara. Odaberite <strong>Prema rasponima</strong>, postavite <strong>Dimenziju</strong> na <strong>StdZ</strong> i postavtei <strong>Minimalnu vrijednost</strong> na <strong>-150</strong> i <strong>Maksimalnu vrijednost</strong> na <strong>0</strong>.</li><li>Izvezite podatke o slanosti za prvih 10 dana svakog siječnja tijekom razdoblja od 10 godina. Odaberite <strong>Prema iteraciji</strong>, postavite <strong>Dimenziju</strong> na <strong>StdVrijeme</strong>, postavite <strong>Početak prve iteracije</strong> i <strong>Kraj prve iteracije</strong> na odgovarajući početak i kraj razdoblja iteracije, postavite<strong> Korak</strong> na <strong>1</strong> i postavite <strong>Jedinicu</strong> na <strong>Godine</strong>.</li></ul><div><br>Upotrijebite parametre za <strong>Definiciju agregacije</strong> da biste procijenili i odabrali interval agregacije upotrebom ključne riječi, vrijednosti ili raspona vrijednosti. Na primjer, ako imate 30-godišnje podatke o temperaturi površine mora prikupljene dnevno i na dubini do 100 metara za svakih 5 metara, možete koristiti različite opcije intervala za sljedeće scenarije: <div><br><ul><li>Agregirajte dnevne podatke o temperaturi u mjesečne podatke, pri čemu je rezultat višedimenzionalni raster s 12 vremenskih isječaka, a svaki isječak je agregirana vrijednost svakog mjeseca tijekom svih godina. Odaberite <strong>Ključnu riječ intervala</strong> i postavite ključnu riječ na <strong>Mjesečno ponavljajuću</strong>.</li><li>Agregirajte podatke o dnevnoj temperaturi u mjesečne podatke, gdje će rezultat biti višedimenzionalni raster s 360 isječaka, odnosno 12 vremenskih isječaka godišnje (30 godina x 12 mjeseci = 360 isječaka). Odaberite <strong>Ključnu riječ intervala</strong> i postavite ključnu riječ na <strong>Mjesečnu</strong>.</li><li>Agregirajte podatke o mjesečnoj temperaturi u 4-mjesečne intervale. Odaberite <strong>Vrijednost intervala</strong>, postavite <strong>Interval vrijednosti</strong> na 4 i postavite <strong>Jedinicu</strong> na <strong>Mjeseci</strong>.</li><li>Agregirajte podatke o temperaturi od 0 do 25 metara te od 25 do 50 metara, a zatim od 50 do 100 metara. Odaberite <strong>Raspone intervala</strong> i odredite za minimalne i maksimalne dubine kao <strong>0 25; 25 50; 50 100</strong>.</li></ul>",
		mergeRastersName: "Spoji rastere",
		mergeRastersSnip: "Kombinira više skupova rasterskih podataka prostorno ili kroz varijable i dimenzije.",
		mergeRastersDesc: "Ova funkcija stvara spojeni raster s popisa rastera. Na primjer, ako imate skup podataka mozaika koji sadrži 30 godina mjesečnih podataka o oborinama i drugi skup podataka s 10 godina mjesečnih podataka o temperaturi, možete ih kombinirati u višedimenzionalni raster s obje varijable. <div><br>Ako ulazni višedimenzionalni rasteri sadrže različite varijable, izlazni višedimenzionalni raster sadržavat će sve varijable. <div><br>Ako ulazni višedimenzionalni rasteri sadrže različite dimenzije ili vrijednosti dimenzija, izlazni višedimenzionalni raster sadržavat će sve dimenzije i vrijednosti dimenzija. <div><br>Ako ulazni višedimenzionalni rasteri sadrže iste dimenzije i varijable, ali različite prostorne obuhvate, izlazni višedimenzionalni raster će uključivati varijable i dimenzije iz kombiniranih prostornih obuhvata.<div><br>Ova se funkcija može koristiti i kada imate više rastera koje želite vidjeti kao jednu stavku, kao što je izračunavanje iste statistike za sve, ili kada uravnotežavate boju, tako da ne morate zasebno uravnotežiti boju svake slike. To je korisno kada se radi o slikama pohranjenim kao pojedinačne ploče zbog ograničenja veličine datoteke, jer tako će se ploče smatrati dijelom iste slike.",
		boundaryCleanName: "Granica čista",
		boundaryCleanSnip: "Zaglađuje granicu između zona.",
		boundaryCleanDesc: "<p>Funkcija generalizira ili pojednostavljuje rastere zaglađivanjem granica između zona. Funkcija pruža mogućnosti za upravljanje načinom na koji ćelije zona u ulazu utječu na zaglađivanje i količinu zaglađivanja koja će se primijeniti. Svaka se ulazna ćelija procjenjuje pomoću osam neposrednih susjeda.</p><p>Postupak zaglađivanja prvo sortira susjedne ćelije po određenom prioritetu. Prioritet određuje koja zona iz susjednih ćelija može zamijeniti vrijednost procesne ćelije u izlazu.</p><p>Prioritet se može temeljiti na vrijednosti zona ili veličini zona. Parametar <strong>Sort type</strong> određuje vrstu sortiranja koja će se koristiti. </p><p>Zadana postavka <strong>Do not sort</strong> procjenjuje prioritet na temelju vrijednosti zona. Ćelije iz zona s većim vrijednostima imat će veći prioritet za širenje u zone s manjim vrijednostima.</p><p>Veličina ili ukupna površina zona može se koristiti za sortiranje prioriteta. S postavkom <strong>Descending</strong> zone se sortiraju prema veličini u silaznom redoslijedu. Zone s većim ukupnim površinama imat će prioritet da se prošire u zone s manjim površinama. S postavkom <strong>Ascending</strong> vrijedi suprotno: zone s manjim ukupnim površinama imat će prioritet da se prošire u zone s većim ukupnim površinama.</p><p>Količinu zaglađivanja kontrolira parametar <strong>Proširi i smanji dva puta</strong>, koji određuje koliko će se puta izvoditi postupak proširenja i skupljanja.</p><p>Ako postavka nije označena, postupak proširenja i skupljanja obavlja se jednom. Kad je postavka označena, postupak proširenja i skupljanja izvodi se dva puta, što rezultira dodatnim stupnjem zaglađivanja granica zone.</p><p>Ako su vrijednosti svih osam susjednih ćelija jednake procesnoj ćeliji, izlazna ćelija zadržat će vrijednost ulazne ćelije.</p>",
		predictUsingRegressionName: "Pedviđanje pomoću regresije",
		predictUsingRegressionSnip: "Izračunava predviđeni raster na temelju ulaznih rasterskih podataka i regresijskog modela. Regresijski model rezultat je rada rasterskog alata za geoobradu <strong>Train Random Trees Regression Model.</strong>",
		predictUsingRegressionDesc: "<p>Regresijski model definiran je u datoteci ESRI definicije regersije (.ecd). Sadrži sve informacije za određeni skup podataka ili skupinu skupova podataka, kao i regresijski model, a generira ga rasterski alat za geoobradu <strong>Train Random Trees Regression Model</strong>.</p><p>Ulazni podaci mogu biti jednokanalni, višekanalni ili višedimenzionalni raster ili popis tih vrsta. Vrste ulaznih rastera moraju se podudarati s vrstama rastera obučenih regresijskim modelom.</p><ul><li>Kada su ulazni podaci višekanalni raster, svaki kanal se obrađuje kao promjenjivi prediktor. Trake bi se trebale nalaziti u istom redoslijedu kao i višekanalni ulazni podaci za alat za učenje regresijskog modela.</li><li>Kada su ulazni podaci višedimenzionalni raster, svaka varijabla se obrađuje kao varijabla-prediktor, a varijabla mora biti jednostruki kanal i imati vremensku dimenziju. Redoslijed varijabli i nazivi moraju se podudarati s ulaznim podacima prilikom učenja regresijskog modela. Izlazni podaci su višedimenzionalni raster.</li><li>Ulazni podaci mogu biti popis stavki. Broj stavki i redoslijed moraju odgovarati ulaznim podacima prilikom učenja regresijskog modela.</li></ul>",
		dimensionalMovingStatisticsName: "Statistika pomicanja dimenzija",
		dimensionalMovingStatisticsSnip: "Izračunava statistiku u pokretnom prozoru na višedimenzionalnim podacima duž određene dimenzije.",
		dimensionalMovingStatisticsDesc: "<p>Funkcija Statistika dimenzionalnog pomicanja izračunava različite statistike unutar unaprijed definiranog prozora za sve vrijednosti dimenzija duž dimenzije. Ova funkcija uzima višedimenzionalni rasterski sloj kao ulaz i stvara višedimenzionalni rasterski sloj kao izlaz koji ima istu dimenzijsku veličinu kao i ulazni sloj.</p><p>Možete odrediti dimenziju za koju se vrijednosti dimenzije razmatraju tijekom izračuna. Prema zadanim postavkama izračunava duž prve neprostorne dimenzije. Također možete odrediti veličinu prozora navođenjem parametara Prozor prema natrag i Prozor prema naprijed.</p><p>Kada je Vrsta statistike postavljena na Postotak, parametri Vrijednost postotka i Vrsta postotne interpolacije postaju dostupni. Možete koristiti ove parametre za određivanje postotka za izračunavanje i odabir vrste interpolacije za korištenje. Kada je Vrsta statistike postavljena na Srednja kružna vrijednost, parametar Vrijednost kružnog omota postaje dostupan. Vrijednost kružnog omota koristi se za pretvaranje linearne vrijednosti u raspon dane srednje kružne vrijednosti.</p>",
		terrainFlattenFunctionName: "Terrain Flatten",
		terrainFlattenFunctionSnip: "Ispravlja ulazne podatke radara sintetičke blende (SAR) radi radiometrijskih izobličenja zbog topografije.",
		terrainFlattenFunctionDesc: "<p>Funkcija rastera Terrain Flatten ispravlja ulazne podatke radara sintetičke blende (SAR) radi radiometrijskih izobličenja zbog topografije.</p><p>Ulazni radarski podaci prvo se moraju kalibrirati na beta nula. Koristite alat Apply Radiometric Calibration za kalibraciju radarskih podataka na beta nula.</p><p>Ako ulazni DEM ne obuhvaća cijeli skup podataka SAR-a, alat će ispisati vrijednosti NoData za piksele izvan opsega DEM-a za izlaze gama nula, sigma nula, područje raspršenja i geometrijsko izobličenje. Za izlaz maske geometrijskog izobličenja, alat će ispisati neodređene vrijednosti za piksele izvan DEM opsega.</p><p>Ulazni DEM mora biti u geografskom koordinatnom sustavu WGS 1984 (EPSG:4326).</p>",
		createColorCompositeFunctionName: "Create Color Composite",
		createColorCompositeFunctionSnip: "Stvara tropojasni raster iz viešpojasnog skupa rasterskih podataka u kojem svaki pojas može koristiti algebarski izračun na temelju algebre pojasa.",
		createColorCompositeFunctionDesc: "<p>Funkcija rastera Create Color Composite stvara tropojasni raster iz viešpojasnog skupa rasterskih podataka u kojem svaki pojas može koristiti algebarski izračun na temelju algebre pojasa.</p><p>Kada definirate algoritam aritmetike pojasa, možete unijeti jednorednu algebarsku formulu za svaki izraz kako biste stvorili višepojasni izlaz. Podržani operatori su unarni, plus (+), minus (-), puta (*) i podijeljeno (/).</p><p>Kada koristite ID pojasa u izrazu, identificirajte opseg tako da dodate prefiks B ili b na broj pojasa.</p><p>Uobičajena kombinacija pojasa koja se koristi za radar sa sintetičkim otvorom blende (SAR) u linearnim jedinicama je VV za crvenu, VH za zelenu i VV/VH za plavu. Ako su ulazni podaci u decibelima, kombinacija pojasa treba biti VV za crvenu, VH za zelenu i VV-VH za plavu.</p>",
		surfaceParametersName: "Parametri površine",
		surfaceParametersSnip: "Određuje parametre površinskog rastera kao što su aspekt, nagib i nekoliko vrsta zakrivljenosti koristeći geodetske metode.",
		surfaceParametersDesc: "<p>Funkcija Parametri površine određuje parametre površinskog rastera kao što su aspekt, nagib i nekoliko vrsta zakrivljenosti koristeći geodetske metode.</p><p>Ova se funkcija može koristiti za sljedeće primjene:</p><ul><li>Izračun aspekta i nagiba koristeći geodetske metode.</li><li>Izračunae različitih vrsta zakrivljenosti iz rastera ulazne površine, na primjer, <strong>tangencijalnu (normalna kontura) zakrivljenost</strong> koja karakterizira topografsku konvergenciju i divergenciju toka preko površine.</li></ul>",
		leastCostCorridorName: "Prolaz najmanjeg troška",
		leastCostCorridorSnip: "Izračunava zbroj dva rastera udaljenosti akumuliranog troška s opcijom primjene praga na temelju postotka ili akumuliranog troška.",
		leastCostCorridorDesc: "<p>Ulazni rasteri trebaju biti rasteri akumulacije udaljenosti i rasteri smjera unatrag koji izlaze iz funkcije <strong>Akumulacija udaljenosti</strong> ili <strong>Dodjela udaljenosti</strong>. Trebaju se temeljiti na troškovnoj udaljenosti, a iste postavke parametara trebale bi se koristiti pri stvaranju slojeva za svaki izvor. U izradi ovih rastera ne smiju se koristiti nikakvi parametri koji ovise o usmjerenosti (horizontalni faktor, vertikalni faktor i smjer kretanja).</p><p>Vrijednosti u rasteru izlaznog koridora zbroj su akumuliranog troška za postizanje određene lokacije s istim jedinicama kao i ulazni rasteri udaljenosti akumuliranog troška.</p><p>Ako je navedena vrijednost <strong>praga</strong> veća od maksimalnog akumuliranog troška kada se zbroje dva rastera akumulacije udaljenosti, raster izlaznog koridora pokrivat će isto područje kao i ulazni akumulativni rasteri.</p><p>Ako je određena vrijednost praga manja od minimalne vrijednosti u rasteru koridora, vraća se poruka upozorenja, a izlazni raster bit će prazan.</p><p>Raster izlaznog koridora može sadržavati ćelije s nešto većim akumuliranim troškovima od granične vrijednosti. Ovo je iz rastera u smjeru unatrag koji koriste ćelije kojima su dodijeljeni malo viši troškovi od praga za povezivanje nepovezanih ćelija s koridorom.</p>",
		geometricMedianName: "Geometrijski medijan",
		geometricMedianSnip: "Funkcija geometrijskog medijana izračunava geometrijski medijan po pikselima u vremenskom nizu višepojasnih slika.",
		geometricMedianDesc: "<p>Ova funkcija smanjuje šum i odstupanja u slikama vremenskih nizova izračunavanjem geometrijskog medijana piksela za svaki niz piksela u nizu slika. Algoritam održava spektralne odnose između traka u spektru piksela, tako da se izlaz može koristiti u analizi, kao što su indeksi vegetacije.</p><p>Oblaci i sjene trebaju se maskirati pomoću skupa podataka QA pojasa prije primjene ove funkcije.</p><p>Ako je ulazna slika s pomičnim zarezom, kao što je refleksija površine s vrijednostima između 0 i 1, epsilon vrijednost od 0,001 trebala bi dati kvalitetne rezultate.</p>"
	},
	rfxArgs: {
		rasterName: "Raster",
		colorSchemeTypeName: "Vrsta sheme boja",
		colormapName: "Karta boja",
		colormapNameName: "Naziv karte boja",
		colorRampName: "Rampa boja",
		contrastOffsetName: "Pomak kontrasta",
		brightnessOffsetName: "Izjednačavanje svjetline",
		methodName: "Metoda",
		bandNamesName: "Nazivi kanala",
		bandWavelengthsName: "Valne duljine kanala",
		bandIdsName: "ID-ovi kanala",
		missingBandActionName: "Nedostaje aktivnost kanala",
		conversionParametersName: "Parametri konverzije",
		hillshadeTypeName: "Vrsta nijanse brda",
		azimuthName: "Azimut",
		altitudeName: "Nadmorska visina",
		slopeTypeName: "Skaliranje",
		zFactorName: "Faktor Z",
		PSPowerName: "Snaga veličine piksela",
		PSZFactorName: "Faktor veličine piksela",
		removeEdgeEffectName: "Onemogući zadanu interpolaciju piksela na rubu",
		fromUnitName: "S jedinice",
		toUnitName: "Na jedinicu",
		rasterTypeName: "Vrsta",
		minName: "Minimalni izlaz",
		maxName: "Maksimalni izlaz",
		minPercentName: "Minimalni postotak skraćivanja",
		maxPercentName: "Maksimalni postotak skraćivanja",
		numberOfStandardDeviationName: "Broj standardnih devijacija",
		sigmoidStrengthLevelName: "Sigmoidna razina snage",
		estimateStatsHistogramName: "Procijeni statistike",
		DRAName: "Podešavanje dinamičnog raspona",
		statisticsName: "Statistike",
		histogramsName: "Histogrami",
		statisticsHistogramName: "Definiraj statistike i histogram",
		computeGammaName: "Automatska gama",
		useGammaName: "Upotrijebi gamu",
		gammaName: "Gama",
		inputNamesName: "Nazivi",
		expressionName: "Izraz",
		cellsizeTypeName: "Vrsta veličine ćelije",
		extentTypeName: "Vrsta obuhvata",
		classifierDefinitionFileName: "Ulazna datoteka definicije",
		raster1Name: "Raster1",
		raster2Name: "Raster2",
		raster3Name: "Raster3",
		trueRasterName: "Istiniti raster",
		falseRasterName: "Neistiniti raster",
		noDataInterpretationName: "Interpretacija bez podataka",
		noDataValuesName: "Vrijednosti bez podataka",
		includedRangesName: "Uključeni rasponi",
		curvatureTypeName: "Vrsta zakrivljenja",
		rastersName: "Rasteri",
		attributeTableName: "tablica",
		attributeTableTypeName: "Vrsta tablice",
		rowsName: "Broj redaka",
		columnsName: "Broj stupaca",
		kernelName: "Jezgra sustava",
		mirrorEdgesName: "Zrcalni rubovi",
		influencesName: "Utjecaji",
		fieldsName: "Polja",
		remapsName: "Ponovno kartiraj tablicu",
		evalFromName: "Evaluacijska skala od",
		evalToName: "Evaluacijska skala do",
		weightsName: "Težine",
		DEMName: "DEM",
		shortRangeIDWRadiusName: "IDW radijus kratkog dometa",
		maxVoidWidthName: "Maks. širina praznine",
		sigmaGaussianName: "Prilagodljivo izglađivanje",
		contourTypeName: "Vrsta obrisa",
		zBaseName: "Baza Z",
		numberOfContoursName: "Broj obrisa",
		contourIntervalName: "Interval obrisa",
		nthContourLineInBoldName: "N-ta linija obrisa boldana",
		featureClassName: "Ulazni geoobjekti",
		classIndexFieldName: "Polje",
		resolveOverlapMethodName: "Riješi metodu preklapanja",
		resamplingTypeName: "Vrsta ponovnog uzorkovanja",
		inputCellsizeName: "Ulazna veličina ćelije",
		outputCellsizeName: "Izlazna veličina ćelije",
		pointFeatureClassName: "Ishodišne točke",
		maxGrowthRadiusFieldName: "Polje polumjera maks. rasta",
		similarityThresholdFieldName: "Polje praga sličnosti",
		fillValueFieldName: "Ispuni polje vrijednosti",
		spectralDetailName: "Spektralni detalj [1..20]",
		spatialDetailName: "Prostorni detalj [1..20]",
		minNumPixelsPerSegmentName: "Minimalna veličina segmenta u pikselima",
		boundariesOnlyName: "Samo granice segmenta",
		statisticsTypeName: "Vrsta statistike",
		fillNoDataOnlyName: "Ispuni samo piksele bez podataka",
		inputDataTypeName: "Vrsta ulaznih podataka",
		angleReferenceSystemName: "Referentni sustav kutova",
		outputDataTypeName: "Vrsta izlaznih podataka",
		inputSamplePointFeatureClassName: "Ulazni uzorci",
		valueFieldName: "Polje vrijednosti",
		rasterInfoName: "Informacije o rasteru",
		interpolationMethodName: "Metoda interpolacije",
		radiusName: "Polumjer",
		radianceGainValuesName: "Povećanje radijancije",
		radianceBiasValuesName: "Otklon radijancije",
		reflectedGainValuesName: "Rast refleksije",
		reflectedBiasValuesName: "Otklon refleksije",
		sunElevationName: "Položaj sunca (stupnjevi)",
		albedoName: "Albedo",
		scaleFactorName: "Faktor mjerila",
		offsetName: "Pomak",
		thresholdTypeName: "Vrsta praga",
		thresholdsName: "Pragovi",
		undefinedClassName: "Nedefinirana klasa",
		minValueName: "Min.",
		maxValueName: "Maks.",
		operationName: "Radnja",
		clippingTypeName: "Vrsta rezanja",
		clippingGeometryName: "Geometrija rezanja / Raster",
		extentName: "Izlazni obuhvat",
		useInputFeatureGeometryName: "Koristi ulazne geoobjekte za isječenu geometriju",
		remapDefinitionTypeName: "Ponovno kartiraj vrstu definicije",
		inputRangeName: "Ulazni rasponi",
		outputValuesName: "Izlazne vrijednosti",
		noDataRangeName: "Rasponi bez podataka",
		inputFieldName: "Ulazno polje",
		outputFieldName: "Izlazno polje",
		inputMaxFieldName: "Ulazno maks. polje (neobavezno)",
		remapTableTypeName: "Ponovno kartiraj vrstu tablice",
		allowUnmatchedName: "Dopusti nepodudarajuće vrijednosti piksela",
		changeMissingValuesToNoDataName: "Promijeni vrijednosti koje nedostaju u Bez podataka",
		visibleBandIDName: "ID vidljivog kanala",
		infraredBandIDName: "ID infracrvenog kanala",
		scientificOutputName: "Znanstveni rezultati",
		bandIndexesName: "Indeksi kanala",
		constantName: "Konstanta",
		weightName: "Težina",
		minimumName: "Minimum",
		maximumName: "Maksimum",
		sourceDataName: "Izvorni raster",
		sourceFieldName: "Izvorno polje",
		costRasterName: "Raster troškova",
		maxDistanceName: "Maksimalna udaljenost",
		valueRasterName: "Raster vrijednosti",
		costMultiplierName: "Množitelja koji treba primijeniti na troškove",
		startCostName: "Početni trošak",
		accumCostResistanceRateName: "Akumulativna stopa otpora troška",
		capacityName: "Kapacitet",
		travelDirectionName: "Smjer putovanja",
		cellSizeName: "Veličina ćelije",
		populationFieldName: "Polje za populaciju",
		areaUnitsName: "Površinske jedinice",
		outputValueTypeName: "Vrijednosti izlazne ćelije",
		barriersName: "Prepreke za ulazne podatke",
		destinationDataName: "Raster odredišta",
		destinationFieldName: "Polje za odredišta",
		pathTypeName: "Vrsta putanje",
		observerFeaturesName: "Geoobjekt promatrača",
		analysisMethodName: "Metoda analize",
		analysisTypeName: "Vrsta analize",
		verticalErrorName: "Vertikalna pogreška",
		refractivityCoefficientName: "Koeficijent refrakcije",
		surfaceOffsetName: "Pomak površine",
		observerElevationName: "Visina terena promatrača",
		observerOffsetName: "Pomak promatrača",
		innerRadiusName: "Unutarnji polumjer",
		innerRadiusIs3DDistanceName: "Unutarnji polumjer je 3D udaljenost",
		outerRadiusName: "Vanjski polumjer",
		outerRadiusIs3DDistanceName: "Vanjski polumjer je 3D udaljenost",
		horizontalStartAngleName: "Vodoravni početni kut",
		horizontalEndAngleName: "Vodoravni krajnji kut",
		verticalUpperAngleName: "Okomiti gornji kut",
		verticalLowerAngleName: "Okomiti donji kut",
		zoneDataName: "Raster zona",
		zoneFieldName: "Polje zone",
		ignoreNoDataName: "Ignoriraj stavku Bez podataka u izračunima",
		temperatureRasterName: "Raster temperatura",
		inTemperatureUnitsName: "Jedinice temperature",
		outHeatIndexTemperatureUnitsName: "Jedinice indeksa topline",
		relativeHumidityRasterName: "Raster relativne vlažnosti",
		outWindChillTemperatureUnitsName: "Jedinice hladnog vjetra",
		windSpeedRasterName: "Raster brzine vjetra",
		inWindSpeedUnitsName: "Jedinice brzine vjetra",
		valueName: "Vrijednost",
		propertyName: "Naziv svojstva",
		jsonName: "JSON metapodataka",
		zoneTableName: "Tablica zonskih atributa",
		attributeFieldNames: "Nazivi atributnih polja",
		backgroundName: "Pozadinska vrijednost",
		whereClauseName: "Uvjet gdje",
		minimumValueFieldName: "Naziv polja minimalne vrijednosti",
		maximumValueFieldName: "Naziv polja maksimalne vrijednosti",
		outValueFieldName: "Naziv polja izlazne vrijednosti",
		defaultValueName: "Zadana izlazna vrijednost",
		conversionMatrixName: "Matrica konverzije",
		IsPseudoColorOutputName: "Je izlaz pseudo boje",
		unmappedAsRandomColorName: "Slučajno dodijeli boju nekartiranim pikselima",
		distanceMethodName: "Metoda udaljenosti",
		flowDirRasterName: "Raster smjera protoka",
		pourPointName: "Raster s točkama ulijevanja",
		pourPointFieldName: "Polje s točkama ulijevanja",
		constantZName: "Konstanta Z",
		zOffsetName: "Pomak Z",
		geoIdName: "Geoid",
		calibrationTypeName: "Vrsta kalibracije",
		filterTypeName: "Vrste filtra",
		filterSizeName: "Veličina filtra",
		noiseModelName: "Model šuma",
		noiseVarianceName: "Varijanca šuma",
		additiveNoiseMeanName: "Prosjek aditivnog šuma",
		multiplicativeNoiseMeanName: "Prosjek multiplikativnog šuma",
		numberofLooksName: "Broj gledanja",
		dampingFactorName: "Faktor prigušivanja",
		maskRasterName: "Raster maske",
		nibbleValuesName: "Koristite vrijednosti bez podataka ako su najbliži susjed",
		nibbleNoDataName: "Grickanje ćelija bez podataka",
		zLimitName: "Ograničenje Z",
		flowDirectionTypeName: "Vrsta smjera protoka",
		weightRasterName: "Raster pondera",
		forceEdgeName: "Prisilite sve rubne ćelije da se kreću prema van",
		streamRasterName: "Raster potoka",
		surfaceRasterName: "Raster površine",
		conversionType: "Vrsta pretvorbe",
		distanceRaster1: "Raster udaljenosti 1",
		distanceRaster2: "Raster udaljenosti 2",
		costDistanceRaster: "Raster udaljenosti troškova",
		costBacklinkRaster: "Raster povratne veze troškova",
		overridesName: "Prepisivanja",
		fieldName: "Polje",
		signatureFileOrUrl: "Datoteka s potpisom ili URL",
		redName: "Crvena",
		greenName: "Zelena",
		blueName: "Plava linija",
		infraredName: "Infracrveno",
		panchromaticName: "Pankromatsko",
		multispectralName: "Multispektralno",
		pansharpeningType: "Vrsta spajanja slika radi izoštravanja",
		sensorName: "Senzor",
		spatialReferenceName: "Prostorna referenca",
		xCellsizeName: "Veličina ćelije X",
		yCellsizeName: "Veličina ćelije Y",
		xOriginName: "Registracijska točka X",
		yOriginName: "Registracijska točka Y",
		percentileName: "Vrijednost u postotcima",
		neighborhoodType: "Vrsta susjedstva",
		widthName: "Širina",
		heightName: "Visina",
		startAngleName: "Početni kut",
		endAngleName: "Krajnji kut",
		neighborhoodValues: "Vrijednosti susjedstva",
		horizontalRaster: "Horizontalni raster",
		horizontalFactor: "Horizontalni faktor",
		verticalRaster: "Vertikalni raster",
		verticalFactor: "Vertikalni faktor",
		streamRaster: "Raster potoka",
		flowDirRaster: "Raster smjera protoka",
		numberNeighborCells: "Broj susjednih ćelija",
		zoneConnectivity: "Povezivost zona",
		addLinkBehavior: "Dodaj poveznicu",
		excludedValue: "Isključena vrijednost",
		constantFillCheck: "Generiraj raster popunjavanja iz konstante",
		fillRaster: "Raster popunjavanja",
		constantFillValue: "Vrijednost konstante",
		inputBitPositions: "Ulazni bit",
		outputBitPositions: "Izlazni bit",
		distanceTypeName: "Vrsta udaljenosti",
		barrierDataName: "Rasterske prepreke",
		pourPointDataName: "Raster s točkom ulijevanja",
		accumulationRasterName: "Raster akumulacije protoka",
		snapDistanceName: "Poravnavanje udaljenosti",
		orderMethodName: "Metoda redoslijeda",
		directionMeasurementName: "Smjer mjerenja",
		processAsMultiband: "Procesuiraj kao višepojasno",
		processMultidimensional: "Procesuiraj kao multidimenzionalno",
		forceFlowDirectionConvention: "Forsiraj konvenciju smjera protoka za povratni raster",
		initialAccumulation: "Inicijalna akumulacija",
		maximumAccumulation: "Maksimalna akumulacija",
		sourceLocationBands: "Stvori izvorni redak i stupac kao dodatne pojaseve u izlazu",
		backDirectionBand: "Stvori smjer unatrag kao dodatni pojas u izlazu",
		numberOfCells: "Broj ćelija",
		zoneValues: "Vrijednosti zona",
		shrinkMethod: "Metoda smanjivanja",
		expandMethod: "Metoda proširivanja",
		inputSpectralProfileType: "Spektralan tip profila",
		spectralProfileFileName: "Spektralan profil",
		trainingFeatureFileName: "Geoobjekt treninga",
		nonNegative: "Ne-negativno",
		sumToOne: "Sumiraj na jedan",
		randomDistribution: "Distribucija",
		meanName: "Prosjek",
		probabilityName: "Vjerojatnost",
		alphaName: "Alfa",
		betaName: "Beta",
		rName: "r",
		nName: "S",
		seed: "Seed",
		randomNumberGenerator: "Generator nasumičnih brojeva",
		cellFactor: "Faktor čelija",
		aggregationType: "Tehnika agregacije",
		extentHandling: "Proširi opseg ako je potrebno",
		trendAnalysisDimensionName: "Ime dimenzije",
		trendAnalysisType: "Vrsta trenda",
		harmonicFrequency: "Harmonska frekvencija",
		polynomialOrder: "Polinomni red",
		cycleLengthName: "Dužina ciklusa",
		trendAnalysisRMSE: "RMSE",
		trendAnalysisR2: "R na kvadrat",
		trendAnalysisSlopePValue: "P-vrijednost koeficijenta nagiba",
		trendAnalysisSeasonalPeriod: "Sezonsko razdoblje",
		cycleUnitName: "Jedinica za ciklus",
		predictDimensionValues: "Vrijednosti",
		dimensionDefinitionType: "Definicija dimenzije",
		predictDimensionStart: "Početak",
		predictDimensionEnd: "Kraj",
		predictDimensionInterval: "Interval vrijednosti",
		dimensionUnit: "Jedinica",
		interpolationCellsizeName: "Veličina interpolacijske ćelije",
		variableName: "Varijable",
		dimensionlessName: "Bez dimenzija",
		mdimDefinition: "Definicija dimenzije",
		dimensionName: "Dimenzija",
		iterationStart: "Početak prve iteracije",
		iterationEnd: "Kraj prve iteracije",
		intervalStart: "Početak intervala",
		intervalEnd: "Kraj intervala",
		stepName: "Korak",
		rangesName: "Rasponi",
		minValue: "Minimalna vrijednost",
		maxValue: "Maksimalna vrijednost",
		changeAnalysisRasterName: "Raster analize promjena",
		changeTypeName: "Promijeni vrstu",
		segmentDate: "Datum segmenta",
		changeDirectionName: "Promijeni smjer",
		maxNumChangesName: "Maksimalan broj promjena",
		filterByYear: "Filtriranje prema godini",
		minimumYear: "Minimalna vrijednost",
		maximumYear: "Maksimalna vrijednost",
		filterByDuration: "Filtriranje po trajanju",
		minimumDuration: "Minimalno trajanje",
		maximumDuration: "Maksimalno trajanje",
		filterByMagnitude: "Filtriranje po jačini",
		minimumMagnitude: "Minimalna jačina",
		maximumMagnitude: "Maksimalna jačina",
		filterByStartValue: "Filtriraj po početnoj vrijednosti",
		minimumStartValue: "Minimalna početna vrijednost",
		maximumStartValue: "Maksimalna početna vrijednost",
		filterByEndValue: "Filtriraj prema krajnjoj vrijednosti",
		minimumEndValue: "Minimalna krajnja vrijednost",
		maximumEndValue: "Maksimalna krajnja vrijednost",
		modelTypeName: "Vrsta modela",
		fromRasterName: "Iz rastera",
		toRasterName: "U raster",
		computeChangeMethod: "Izračunaj metodu promjene",
		fromClassValues: "Od vrijednosti klase (Primjer: 2 5)",
		toClassValues: "Do vrijednosti klase (Primjer: 2 5)",
		keepMethod: "Metoda filtriranja",
		useColorMethod: "Odredi boje prijelaza",
		detectChangeBands: "Kanali za otkrivanje promjena (započnite od 0)",
		tmaskBands: "Kanali za temporalno maskiranje (započnite od 0)",
		chiSquaredThreshold: "Chi na kvadrat prag za otkrivanje promjene",
		minAnomaly: "Minimalna uzastopna zapažanja anomalije",
		updatingFrequency: "Ažuriranje učestalosti podešavanja (u godinama)",
		distanceAccumulationRasterName: "Raster prijeđene udaljenosti",
		costBackdirectionRasterName: "Raster stražnjeg smjera ili raster upravljanja tokom",
		rasterCollectionName: "Kolekcija rastera",
		itemFunctionName: "Funkcija stavke",
		aggregationFunctionName: "Funkcija agregacije",
		processingFunctionName: "Funkcija procesiranja",
		aggregationDefinitionName: "Definicija agregacije",
		queryGeometryName: "Geometrija upita",
		factorFunctionZeroFactor: "Faktor nule",
		factorFunctionCutAngle: "Kut reza",
		factorFunctionSideFactor: "Bočni faktor",
		factorFunctionSlope: "Nagib",
		factorFunctionLowCutAngle: "Kut niskog reza",
		factorFunctionHighCutAngle: "Kut visokog reza",
		factorFunctionCosPower: "Snaga kosinusa",
		factorFunctionSecPower: "Snaga sekante",
		factorFunctionTablePath: "Staza za stol",
		processingBand: "Kanal obrade",
		processingBandName: "Naziv kanala obrade",
		snappingDate: "Datum priljepljivanja",
		maxNumSegments: "Maksimalan broj segmenata",
		vertexCountOvershoot: "Prekoračenje broja lomnih točaka",
		spikeThreshold: "Prag za Spike",
		recoveryThreshold: "Prag za oporavak",
		minNumObs: "Minimalan broj opažanja",
		pValueThreshold: "Prag za vrijednost p",
		bestModelProportion: "Najbolje proporcije modela",
		preventOneYearRecovery: "Spriječi oporavak od jedne godine",
		recoveryIncreaseTrend: "Trend oporavka raste",
		outputOtherBands: "Izlaz na drugim kanalima",
		sortType: "Vrsta sortiranja",
		numberOfRuns: "Dvaput pokrenuti proširenje i skupljanje",
		percentileValue: "Vrijednost u postotcima",
		percentileInterpolationType: "Vrsta interpolacije postotka",
		rasterInfoProperty: "Vlasništvo",
		rasterInfoValue: "Vrijednost",
		rasterInfoColumns: "Stupci",
		rasterInfoRows: "Redci",
		rasterInfoBandCount: "Broj kanala",
		rasterInfoPixelSizeX: "Veličina ćelije X",
		rasterInfoPixelSizeY: "Veličina ćelije Y",
		rasterInfoPixelType: "Vrsta piksela",
		rasterExtentTop: "Vrh",
		rasterExtentBottom: "Dno",
		rasterExtentLeft: "Lijevo",
		rasterExtentRight: "Desno",
		rasterStatisticsNotCalculated: "Statistika nije izračunata.",
		spatialReferenceProjection: "Projekcija",
		spatialReferenceWkid: "WKID",
		spatialReferenceLatestWkid: "Prethodni WKID",
		spatialReferenceWkt: "WKT",
		spatialReferenceVcsWkid: "VCSWKID",
		spatialReferenceLatestVcsWkid: "Prethodni VCSWKID",
		spatialReferenceAuthority: "Autoritet",
		spatialReferenceLinearUnit: "Linearna jedinica",
		spatialReferenceAngularUnit: "Kutna jedinica",
		spatialReferenceFalseEasting: "Lažno kretanje na istok",
		spatialReferenceFalseNorthing: "Lažno kretanje na sjever",
		spatialReferenceCentralMeridian: "Središnji meridijan",
		spatialReferencePrimeMeridian: "Nulti meridijan",
		spatialReferenceStandardParallel1: "Standardna paralela 1",
		spatialReferenceStandardParallel2: "Standardna paralela 2",
		spatialReferenceLatitudeOfOrigin: "Širina ishodišta",
		spatialReferenceAuxiliarySphereType: "Vrsta pomoćne sfere",
		spatialReferenceDatum: "Podatak",
		spatialReferenceSpheroid: "Sferoid",
		spatialReferenceSemimajorAxis: "Srednjevelika os",
		spatialReferenceSemiminorAxis: "Srednjemala os",
		spatialReferenceInverseFlattening: "Inverzno spljoštavanje",
		inputDefinitionFileName: "Ulazna datoteka definicije",
		deleteName: "Izbriši",
		addVariableName: "Dodaj varijablu",
		maxNumPixelsPerSegment: "Maksimalna veličina segmenta u pikselima",
		forwardWindowName: "Prozor prema naprijed",
		backwardWindowName: "Prozor prema natrag",
		noDataHandlingName: "Rukovanje Bez podataka",
		circularWrapValueName: "Vrijednost kružnog omota",
		fromClassNameFieldName: "Naziv polja za nazive klasa u rasteru Od",
		toClassNameFieldName: "Naziv polja za nazive klasa u rasteru Za",
		targetRasterName: "Ciljni raster",
		circularWrapValue: "Vrijednost kružnog omota",
		bandIndexesR: "Crveni izraz",
		bandIndexesG: "Zeleni izraz",
		bandIndexesB: "Plavi izraz",
		exampleName: "Primjer",
		inputName: "Unos",
		outputName: "Izlaz",
		optionalName: "Neobavezno",
		browseDefinitionFile: "Potraži datoteku definicija",
		selectDefinitionFile: "Odaberi ulaznu datoteku definicije",
		inputDefinitionURL: "URL ulazne datoteke definicije",
		enterDefinitionFileURL: "Unesi URL datoteke definicije",
		browseXMLFile: "Potraži XML datoteku",
		selectStatsFile: "Odaberi datoteku statistike i histograma",
		enterXMLFileURL: "Unesi URL XML datoteke",
		xmlFileURL: "URL XML datoteke",
		circularCalculation: "Izračunaj kružnu statistiku",
		localSurfaceType: "Vrsta lokalne površine",
		surfaceParameterType: "Vrsta parametra",
		neighborhoodDistance: "Udaljenost susjedstva",
		useAdaptiveNeighborhood: "Koristi prilagodljivo susjedstvo",
		outputSlopeType: "Mjerenje izlaznog nagiba",
		projectAzimuths: "Projektiraj geodetske azimute",
		useEquatorialAspect: "Koristi ekvatorijalni aspekt",
		zUnit: "Jedinica Z",
		analysisMask: "Maska analize",
		stdDeviation: "Standardno odstupanje",
		"true": "Istinito",
		"false": "Neistinito",
		costDistanceRaster1: "Unos rastera kumulativnih udaljenosti troškova 1",
		costDistanceRaster2: "Unos rastera kumulativnih udaljenosti troškova 2",
		threshold: "Prag",
		thresholdMethod: "Metoda praga",
		directionRaster1: "Unos ulaznog rastera povratnog smjera 1",
		directionRaster2: "Unos ulaznog rastera povratnog smjera 2",
		maxIterations: "Maks. broj ponavljanja",
		epsilon: "Epsilon"
	},
	enumLabels: {
		attributeTableTypeManual: "Ručno",
		attributeTableTypeExternal: "Vanjski",
		clrSchemeTypeColormap: "Karta boja",
		clrSchemeTypeColorRamp: "Rampa boja",
		colormapTypeElevation: "Visina terena",
		colormapTypeGray: "Sivo",
		colormapTypeNDVI: "NDVI",
		colormapTypeNDVI2: "NDVI2",
		colormapTypeNDVI3: "NDVI3",
		colormapTypeRandom: "Nasumično",
		none: "Nema",
		slopeTypeAdjusted: "Podešeno",
		slopeTypeDegree: "Stupanj",
		slopeTypePercentRise: "Povećanje postotka",
		slopeTypeScaled: "Skalirano",
		stretchTypeMinMax: "Min. i maks.",
		stretchTypePercentMinMax: "Min. i maks. postotak",
		stretchTypeSigmoid: "Sigmoidno",
		stretchTypeStdDev: "StdDev",
		hillshadeTypeSimple: "Tradicionalno",
		hillshadeTypeMultidirectional: "Višemjerno",
		bandComboByNames: "Nazivi kanala",
		bandComboByWavelength: "Valne duljine kanala",
		bandComboByIDs: "ID-ovi kanala",
		missingBandActionBestMatch: "Najbolje podudaranje",
		missingBandActionFail: "Neuspjeh",
		unitTypeCelsius: "Celzijus",
		unitTypeCentimeters: "Centimetri",
		unitTypeDecimeters: "Decimetri",
		unitTypeFahrenheit: "Fahrenheit",
		unitTypeFeet: "Stope",
		unitTypeFeetPerSec: "Stope po sekundi (ft/s)",
		unitTypeInches: "Inči",
		unitTypeKelvin: "Kelvin",
		unitTypeKilometers: "Kilometri",
		unitTypeKmsPerHour: "Kilometri na sat (km/h)",
		unitTypeKnots: "Čvorovi (čv.)",
		unitTypeMeters: "Metri",
		unitTypeMetersPerSec: "Metri po sekundi (m/s)",
		unitTypeMiles: "Milje",
		unitTypeMilesPerHour: "Milje na sat (mph)",
		unitTypeMillimeters: "Milimetri",
		unitTypeNauticalMiles: "Nautičke milje",
		unitTypeYards: "Jardi",
		unitTypeDecimalDegrees: "Decimalni stupnjevi",
		unitTypePoints: "Točke",
		unitTypeUnknown: "Nepoznato",
		unitTypeSqMapUnits: "Jedinice za površinu karte",
		unitTypeSqMiles: "Kvadratne milje",
		unitTypeSqKms: "Kvadratni kilometri",
		unitTypeAcres: "Rali",
		unitTypeHectares: "Hektari",
		unitTypeSqYards: "Kvadratni jardi",
		unitTypeSqFt: "Kvadratne stope",
		unitTypeSqInches: "Kvadratni inči",
		unitTypeSqMts: "Kvadratni metri",
		unitTypeSqCms: "Kvadratni centimetri",
		unitTypeSqMms: "Kvadratni milimetri",
		cellsizeTypeFirst: "Prvo od",
		cellsizeTypeMin: "Min. od",
		cellsizeTypeMax: "Maks. od",
		cellsizeTypeMean: "Prosjek od",
		cellsizeTypeLast: "Posljednje od",
		extentTypeFirst: "Prvo od",
		extentTypeIntersection: "Presjek od",
		extentTypeUnion: "Unija od",
		extentTypeLast: "Posljednje od",
		noDataInterpretAny: "Upari bilo što",
		noDataInterpretAll: "Upari sve",
		curvatureTypeStandard: "Standard",
		curvatureTypeProfile: "Profil",
		curvatureTypePlanform: "Platforma",
		filterTypeLineDetectionHorizontal: "Vodoravno otkrivanje linija",
		filterTypeLineDetectionVertical: "Okomito otkrivanje linija",
		filterTypeLineDetectionLeftDiagonal: "Lijevo dijagonalno otkrivanje linija",
		filterTypeLineDetectionRightDiagonal: "Desno dijagonalno otkrivanje linija",
		filterTypeGradientNorth: "Gradijent prema sjeveru",
		filterTypeGradientWest: "Gradijent prema zapadu",
		filterTypeGradientEast: "Gradijent prema istoku",
		filterTypeGradientSouth: "Gradijent prema jugu",
		filterTypeGradientNorthEast: "Gradijent prema sjeveroistoku",
		filterTypeGradientNorthWest: "Gradijent prema sjeverozapadu",
		filterTypeSmoothArithmeticMean: "Aritmetička sredina izglađivanja",
		filterTypeSmoothing3x3: "Izglađivanje 3x3",
		filterTypeSmoothing5x5: "Izglađivanje 5x5",
		filterTypeSharpening3x3: "Izoštravanje 3x3",
		filterTypeSharpening5x5: "Izoštravanje 5x5",
		filterTypeLaplacian3x3: "Laplacian 3x3",
		filterTypeLaplacian5x5: "Laplacian 5x5",
		filterTypeSobelHorizontal: "Vodoravni sobel",
		filterTypeSobelVertical: "Okomiti sobel",
		filterTypeSharpen: "Izoštri",
		filterTypeSharpen2: "Više izoštri",
		filterTypePointSpread: "Širenje točaka",
		userDefined: "Korisnički definirano",
		ContourTypeLines: "Linije obrisa",
		ContourTypeFill: "Ispunjenje obrisa",
		ContourTypeSmoothOnly: "Samo izglađena površina",
		rasterizeFirst: "Prvo",
		rasterizeLast: "Posljednje",
		rasterizeSmallest: "Najmanje",
		rasterizeLargest: "Najveće",
		resamplingTypeNearest: "Najbliži susjed",
		resamplingTypeBilinear: "Bilinearna interpolacija",
		resamplingTypeCubic: "Kubična konvolucija",
		resamplingTypeMajority: "Većina",
		resamplingTypeBilinearPlus: "Bilinearna interpolacija Plus",
		resamplingTypeGauss: "Gauss zamućivanje",
		resamplingTypeGaussPlus: "Gauss zamućivanje Plus",
		resamplingTypeAverage: "Prosječno",
		resamplingTypeMinimum: "Minimum",
		resamplingTypeMaximum: "Maksimum",
		resamplingTypeVectorAvg: "Prosjek vektora",
		minimum: "Minimum",
		maximum: "Maksimum",
		mean: "Prosjek",
		stdDeviation: "Standardno odstupanje",
		uvMagDirTypeUV: "U-V",
		uvMagDirTypeMagDir: "Jačina-Smjer",
		unknown: "Nepoznato",
		angleRefSysGeographic: "Geografsko",
		angleRefSysArithmetic: "Aritmetički",
		interpolateIrregularDataNearest: "Najbliži susjed",
		interpolateIrregularDataBilinear: "Bilinearno",
		interpolateIrregularDataTinningLinear: "Linearno smanjenje",
		interpolateIrregularDataTinningNaturalNeighbor: "Prirodni susjed",
		interpolateIrregularDataTinningIDW: "Inverzno ponderiranje udaljenosti",
		esriRasterThresholdTypeConstant: "Konstanta",
		esriRasterThresholdTypeOtsu: "Otsu",
		esriRasterThresholdTypeTsai: "Tsai",
		esriRasterThresholdTypeKapur: "Kapur",
		esriRasterThresholdTypeKittler: "Kittler",
		esriRasterThresholdTypeRosin: "Kolofonij",
		argStatsTypeMax: "Arg Max",
		argStatsTypeMin: "Arg Min",
		argStatsTypeMedian: "Arg Median",
		argStatsTypeDuration: "Trajanje",
		arithmeticOpPlus: "Plus",
		arithmeticOpMinus: "Minus",
		arithmeticOpMultiply: "Pomnoži",
		arithmeticOpDivide: "Podijeli",
		arithmeticOpPower: "Snaga",
		arithmeticOpMode: "Način",
		clipTypeOutside: "Rezanje vani",
		clipTypeInside: "Rezanje unutra",
		yes: "Da",
		no: "Ne",
		densities: "Gustoće",
		expectedCounts: "Očekivani brojevi",
		planar: "Planarno",
		geodesic: "Geodetski",
		eachCell: "Svaka ćelija",
		eachZone: "Svaka zona",
		bestSingle: "Najbolja jedna",
		allSightlines: "Svi smjerovi pogleda",
		perimeterSightlines: "Smjerovi pogleda opsega",
		frequency: "Učestalost",
		observers: "Promatrači",
		majority: "Većina",
		median: "Srednja vrijednost",
		minority: "Manjina",
		percentile: "Postotak",
		range: "Raspon",
		sum: "Zbroj",
		variety: "Raznolikost",
		ndvi: "NDVI",
		savi: "SAVI",
		bandArithmeticMethodTSAVI: "Transformirani SAVI",
		bandArithmeticMethodMSAVI: "Izmijenjeni SAVI",
		bandArithmeticMethodSultan: "Sultanova formula",
		gemi: "GEMI",
		pvi: "PVI",
		gvi: "GVI (Landsat TM)",
		vari: "VARI",
		sr: "SR",
		gndvi: "GNDVI",
		ndvire: "NDVIre",
		srre: "SRre",
		mtvi2: "MTVI2",
		rtviCore: "RTVICore",
		cire: "CIre",
		cig: "CIg",
		ndwi: "NDWI",
		evi: "EVI",
		ironOxide: "Željezov oksid",
		ferrousMinerals: "Željezovi minerali",
		clayMinerals: "Minerali gline",
		wndwi: "WNDWI",
		bai: "BAI",
		mndwi: "MNDWI",
		nbr: "NBR",
		ndbi: "NDBI",
		ndmi: "NDMI",
		ndsi: "NDSI",
		localSquareRoot: "Korijen",
		localACos: "ACos",
		localASin: "ASin",
		localATan: "ATan",
		localATanH: "ATanH",
		localAbs: "Abs",
		localBitwiseNot: "Ne na razini bita",
		localBooleanNot: "Ne istinita vrijednost",
		localCos: "Cos",
		localCosH: "CosH",
		localExp: "Exp",
		localExp10: "Exp10",
		localExp2: "Exp2",
		localInt: "Int",
		localIsNull: "Nema vrijednosti",
		localFloat: "Plutanje",
		localLn: "Ln",
		localLog10: "Log10",
		localLog2: "Log2",
		localNegate: "Negiraj",
		localRoundDown: "Zaokruži prema dolje",
		localRoundUp: "Zaokruži prema gore",
		localSin: "Sin",
		localSinH: "SinH",
		localTan: "Tan",
		localTanH: "TanH",
		localACosH: "ACosH",
		localASinH: "ASinH",
		localPlus: "Plus",
		localMinus: "Minus",
		localTimes: "Vremena",
		localPower: "Snaga",
		localBitwiseAnd: "Na razini bita",
		localBitwiseLeftShift: "Lijevi pomak na razini bita",
		localBitwiseOr: "Na razini bita ili",
		localBitwiseRightShift: "Desni pomak na razini bita",
		localBitwiseXor: "Na razini bita X ili",
		localBooleanAnd: "Istinita vrijednost i",
		localBooleanOr: "Istinita vrijednost ili",
		localBooleanXor: "Istinita vrijednost X ili",
		localDivide: "Podijeli",
		localEqualTo: "Jednako",
		localGreaterThan: "Veće od",
		localGreaterThanEqual: "Veće od jednako",
		localLessThan: "Manje od",
		localLessThanEqual: "Manje od jednako",
		localMod: "Način",
		localNotEqual: "Različito",
		localATan2: "ATan2",
		localSquare: "Kvadrat",
		localSetNull: "Postavi na bez vrijednosti",
		remapDefTypeList: "Popis",
		remapDefTypeTable: "tablica",
		remapTableTypeSimple: "Jednostavno",
		remapTableTypeDynamic: "Dinamičko",
		remapTableTypeReassignment: "Ponovno raspoređivanje",
		geomCorrectionByConstZ: "Upotrijebi konstantu Z",
		geomCorrectionByDEM: "Upotrijebi DEM",
		radarCalibBetaNought: "Beta nula",
		radarCalibSigmaNought: "Sigma nula",
		radarCalibGammaNought: "Gama nula",
		speckleFilterTypeLee: "Filtar Lee",
		speckleFilterTypeEnhancedLee: "Poboljšani filtar Lee",
		speckleFilterTypeFrost: "Filtar Frost",
		speckleFilterTypeKuan: "Filtar Kuan",
		speckleNoiseModelMul: "Multiplikativni šum",
		speckleNoiseModelAdd: "Aditivni šum",
		speckleNoiseModelAddnMul: "Aditivni i multiplikativni šum",
		mosaicOpTypeFirst: "Prvo",
		mosaicOpTypeLast: "Posljednje",
		mosaicOpTypeMin: "Min.",
		mosaicOpTypeMax: "Maks.",
		mosaicOpTypeMean: "Prosjek",
		mosaicOpTypeBlend: "Stopi",
		mosaicOpTypeSum: "Zbroj",
		integer: "Cijeli broj",
		rfxD8: "D8",
		rfxMFD: "MFD",
		dinf: "Dinf",
		vertical: "Uspravno",
		horizontal: "Vodoravni",
		localCellStatisticsMajority: "Većina",
		localCellStatisticsMax: "Maksimum",
		localCellStatisticsMean: "Prosjek",
		localCellStatisticsMedian: "Srednja vrijednost",
		localCellStatisticsMin: "Minimum",
		localCellStatisticsMinority: "Manjina",
		localCellStatisticsRange: "Raspon",
		localCellStatisticsStdDev: "Standardno odstupanje",
		localCellStatisticsSum: "Zbroj",
		localCellStatisticsVariety: "Raznolikost",
		localCellStatisticsMajorityIgnoreND: "Većina (Zanemari stavku Bez podataka)",
		localCellStatisticsMaxIgnoreND: "Maksimum (Zanemari stavku Bez podataka)",
		localCellStatisticsMeanIgnoreND: "Prosjek (Zanemari stavku Bez podataka)",
		localCellStatisticsMedianIgnoreND: "Srednja vrijednost (Zanemari stavku Bez podataka)",
		localCellStatisticsMinIgnoreND: "Minimum (Zanemari stavku Bez podataka)",
		localCellStatisticsMinorityIgnoreND: "Manjina (Zanemari stavku Bez podataka)",
		localCellStatisticsRangeIgnoreND: "Raspon (Zanemari stavku Bez podataka)",
		localCellStatisticsStdDevIgnoreND: "Standardna devijacija (Zanemari stavku Bez podataka)",
		localCellStatisticsSumIgnoreND: "Zbroj (Zanemari stavku Bez podataka)",
		localCellStatisticsVarietyIgnoreND: "Raznolikost (Zanemari stavku Bez podataka)",
		localCellStatisticsTypePercentileIgnoreND: "Postotak (ignoriraj Bez podataka)",
		fromSource: "Od izvora",
		toSource: "Do izvora",
		colorspaceConversionRgbToHsv: "RGB do HSV",
		colorspaceConversionHsvToRgb: "HSV do RGB",
		pansharpenTypeIHS: "IHS",
		pansharpenTypeBrovey: "Brovey",
		pansharpenTypeEsri: "Esri",
		pansharpenTypeMean: "Prosjek",
		pansharpenTypeGramSchmidt: "Gram-Schmidt",
		rectangleNeighborhood: "Pravokutnik",
		circleNeighborhood: "Krug",
		annulusNeighborhood: "Prsten",
		wedgeNeighborhood: "Kriška",
		irregularNeighborhood: "Neredovito",
		weightNeighborhood: "Težina",
		four: "Četiri",
		eight: "Osam",
		within: "Unutar",
		cross: "Križ",
		addLink: "Dodaj poveznicu",
		noLink: "Nema veze",
		weightedMean: "Ponderirana srednja vrijednost",
		ls8QCBitPatternCirrus: "Landsat 8 cirus",
		ls8QCBitPatternCloud: "Landsat 8 oblaci",
		ls8QCBitPatternCloudShadow: "Landsat 8 sjene oblaka",
		ls8QCBitPatternDesignatedFill: "Landsat 8 određena ispuna",
		ls8QCBitPatternDroppedFrame: "Landsat 8 izostavljeni okvir",
		ls8QCBitPatternSnowIce: "Landsat 8 snijeg/led",
		ls8QCBitPatternTerrainOcclusion: "Landsat 8 okluzija terena",
		ls8QCBitPatternVegetation: "Landsat 8 vegetacija",
		ls8QCBitPatternWater: "Landsat 8 voda",
		downStream: "Silazno",
		upStream: "Uzlazno",
		strahler: "STRAHLER",
		shreve: "SHREVE",
		currentSlice: "Trenutni prerez",
		allSlices: "Svi prerezi",
		expandDistance: "UDALJENOST",
		expandMorphological: "MORFOLOŠKI",
		spectralProfileFile: "Spektralan profil",
		trainingFeatureFile: "Geoobjekt treninga",
		randomDistributionTypeUniform: "Ujednačen",
		randomDistributionTypeUniformInteger: "Cijeli broj",
		randomDistributionTypeNormal: "Normalno",
		randomDistributionTypeExponential: "Eksponencijalno",
		randomDistributionTypePoisson: "Poisson",
		randomDistributionTypeGamma: "Gama",
		randomDistributionTypeBinomial: "Binomialna",
		randomDistributionTypeGeometric: "Geometrijska",
		randomDistributionTypeNegativeBinomial: "Negativno binominalno",
		randomGeneratorTypeStandardCRand: "Standardni C Rand",
		randomGeneratorTypeAlgorithmACM599: "ACM prikupljeni algoritam 599",
		randomGeneratorTypeMersenneTwister: "Mersenne Twister",
		sumName: "Zbroj",
		medainName: "Srednja vrijednost",
		trendLinear: "Linearno",
		trendHarmonic: "Harmonijsko",
		trendPolynomial: "Polinomno",
		trendMannKendall: "Mann-Kendall",
		trendSeasonalKendall: "Sezonski Kendall",
		dimensionByValue: "Prema vrijednosti",
		dimensionByInterval: "Prema intervalu",
		mdimDefTypeAll: "Svi",
		mdimDefTypeByValues: "Po vrijednostima",
		mdimDefTypeByRanges: "Po rasponima",
		mdimDefTypeByIteration: "Po Iteraciji",
		mdimDefTypeByInterval: "Prema intervalu",
		mdimDefTypeByTargetRaster: "Po ciljnom rasteru",
		esriTimeUnitsHours: "Sati",
		esriTimeUnitsDays: "Dani",
		esriTimeUnitsWeeks: "Tjedni",
		esriTimeUnitsMonths: "Mjeseci",
		esriTimeUnitsYears: "Godine",
		esriTimeIntervalKeywordHourly: "Svaki sat",
		esriTimeIntervalKeywordDaily: "Dnevno",
		esriTimeIntervalKeywordWeekly: "Tjedno",
		esriTimeIntervalKeywordDekadly: "Desetljetno",
		esriTimeIntervalKeywordPentadly: "Pedesetljetnoentadly",
		esriTimeIntervalKeywordMonthly: "Mjesečno",
		esriTimeIntervalKeywordQuarterly: "Tromjesečno",
		esriTimeIntervalKeywordYearly: "Godišnje",
		esriTimeIntervalKeywordRecurringDaily: "Ponavlja se dnevno",
		esriTimeIntervalKeywordRecurringWeekly: "Ponavlja se tjedno",
		esriTimeIntervalKeywordRecurringMonthly: "Ponavlja se mjesečno",
		esriTimeIntervalKeywordRecurringQuarterly: "Ponavlja se kvartalno",
		aggDefTypeAll: "Svi",
		aggDefTypeIntervalKeyword: "Ključna riječ intervala",
		aggDefTypeIntervalValue: "Vrijednost intervala",
		aggDefTypeIntervalRanges: "Rasponi intervala",
		latestChange: "Vrijeme zadnje promjene",
		earliestChange: "Vrijeme prve promjene",
		largestChange: "Vrijeme najveće promjene",
		numberOfChanges: "Broj promjeni",
		longestChange: "Vrijeme najdulje promjene",
		shortestChange: "Vrijeme najkraće promjene",
		fastestChange: "Vrijeme najbrže promjene",
		slowestChange: "Vrijeme najsporije promjene",
		allChanges: "Svi",
		increaseChanges: "Povišenje",
		decreaseChanges: "Sniženje",
		segmentBeginning: "Početak segmenta",
		segmentEnd: "Kraj segmenta",
		esriComputeChangeMethodDifference: "Razlika",
		esriComputeChangeMethodRelativeDifference: "Relativna razlika",
		esriComputeChangeMethodCategorical: "Kategorička razlika",
		esriComputeChangeMethodMultispectralEuclideanDistance: "Spektralna euklidska udaljenost",
		esriComputeChangeMethodMultispectralAngularDifference: "Spektralna kutna razlika",
		esriComputeChangeMethodMultispectralAxisWithBiggestChange: "Kanal s najviše promjena",
		esriComputeChangeKeepAll: "Zadrži sve",
		esriComputeChangeKeepChangedOnly: "Zadrži samo promijenjene piksele",
		esriComputeChangeKeepUnchangedOnly: "Zadrži samo nepromijenjene piksele",
		esriComputeChangeUseColorAverage: "Boje za prosječno Od i Do",
		esriComputeChangeUseColorFrom: "Upotrijebi boje Od",
		esriComputeChangeUseColorTo: "Upotrijebi boje Do",
		factorFunctionBinary: "Binarni sustav",
		factorFunctionForward: "Naprijed",
		factorFunctionLinear: "Linearno",
		factorFunctionInvLinear: "Inverzno linearno",
		factorFunctionTable: "tablica",
		factorFunctionSymLinear: "Simetrično linearno",
		factorFunctionSymInvLinear: "Simetrično inverzno linearno",
		factorFunctionCos: "Kosinus",
		factorFunctionSec: "Sekanta",
		factorFunctionCosSec: "Sekanta kosinusa",
		factorFunctionSecCos: "Kosinus sekante",
		noSort: "Ne sortiraj",
		ascend: "Uzlazno",
		descend: "Silazno",
		autoDetect: "Automatsko otkrivanje",
		nearest: "Najbliže",
		linear: "Linearno",
		esriMonthJanuary: "Siječanj",
		esriMonthFebruary: "Veljača",
		esriMonthMarch: "Ožujak",
		esriMonthApril: "Travanj",
		esriMonthMay: "Svi",
		esriMonthJune: "Lipanj",
		esriMonthJuly: "Srpanj",
		esriMonthAugust: "Kolovoz",
		esriMonthSeptember: "Rujan",
		esriMonthOctober: "Listopad",
		esriMonthNovember: "Studeni",
		esriMonthDecember: "Prosinac",
		dimensionalMovingIgnoreNoData: "Podaci",
		dimensionalMovingPropagateNoData: "Bez podataka",
		dimensionalMovingFillOnlyNoData: "Ispuni područje bez podataka",
		circularMean: "Kružna srednja vrijednost",
		circularName: "Kružno",
		arithmeticName: "Aritmetički",
		slopeName: "Nagib",
		aspectName: "Aspekt",
		meanCurvature: "Srednja zakrivljenost",
		profileCurvature: "Profilna (normalna linija nagiba) zakrivljenost",
		tangentialCurvature: "Tangencijalna (normalna kontura) zakrivljenost",
		planCurvature: "Planska (projicirana kontura) zakrivljenost",
		contourGeodesicTorsion: "Konturna geodetska torzija",
		gaussianCurvature: "Gaussova zakrivljenost",
		casoratiCurvature: "Casoratijeva zakrivljenost",
		localSurfaceTypeQuadratic: "Kvadratna",
		localSurfaceTypeBiquadratic: "Bikvadratna",
		thresholdNoThreshold: "Nema praga",
		thresholdPercentLeastCost: "Posto najmanjeg troška",
		thresholdAccumulativeCost: "Kumulativni trošak",
		clrmapTypeHillshade: "Nijansa brda"
	},
	categoryLabels: {
		sourceCharacteristics: "Karakteristike izvora",
		neighborhoodSettings: "Postavke četvrti",
		statistics: "Statistika",
		gamma: "Gama",
		viewshedParameters: "Parametri vidljivosti",
		observerParameters: "Parametri promatrača",
		irregularDataInterpolation: "Nepravilna interpolacija podataka",
		modelStatistics: "Model statistika",
		aggregationDef: "Definicija agregacije",
		filterByAttributes: "Filtriraj prema atributima",
		percentileName: "Postotak",
		rasterInfo: "Informacije rastera",
		extent: "Obuhvat",
		spatialReference: "Prostorna referenca"
	},
	outputRasterHelpTexts: {
		outputName: "<p>Naziv sloja koji će se stvoriti i dodati karti.</p>",
		resultType: "<p>Vrsta izlaza koji će se stvoriti. Izlaz mogu biti slojevi s pločastom slikom ili slojevi s dinamičnom slikom.</p>",
		saveResultIn: "<p>Naziv mape u stavci <b>Moj sadržaj</b> gdje će se spremiti rezultat.</p>"
	},
	analysisEnvironmentsHelpTexts: {
		description: "<p>Postavke okruženja za analizu u programu Map Viewer. </p>",
		outSR: "<p>Određuje koordinatni sustav za analizu i sloj rezultata.</p>",
		extent: "<p>Određuje područje koje će se koristiti za analizu.</p>",
		snapRaster: "<p>Prilagođava obuhvat izlaza tako da se podudara sa poravnanjem ćelija navedenog sloja za poravnanje rastera.</p>",
		cellSize: "<p>Određuje veličinu ćelije ili razlučivost koja će se koristiti za analizu i stvaranje izlaznog rasterskog sloja.</p>",
		mask: "<p>Određuje sloj maske u kojem će se za analizu koristiti samo ćelije koje spadaju unutar područja maske.</p>",
		resamplingMethod: "<p>Određuje kako interpolirati vrijednosti piksela kada ulazni i izlazni rasteri nisu poravnati.</p>"
	},
	mainGenStrings: {
		unsupportedDataType: "Nepodržana vrsta",
		currentlyUnsupported: " Zadani uređivač za ${missingType} je na čekanju, ali će uskoro biti dostupan. Privremeno mjesto za unos teksnog okvira za određivanje unosa na temelju teksta.",
		unsupportedOverrideWarning: "Komponenta uređivača za premoštavanje, koja pruža bolji korisnički doživljaj za rad sa sljedećim parametrima je na čekanju, ali uskoro dolazi:",
		overrideWidgetMissing: "Komponenta uređivača za premoštavanje nedostaje!",
		uiIncomplete: "Predaja posla nije uspjela. Funkcija se ne može pokrenuti jer su neka od obaveznih polja nepotpuna ili nedostaju u korisničkom sučelju.",
		count: "Zbroj",
		selectVariables: "Odaberi varijable",
		selectFeature: "Odaberi sloj geoobjekata",
		greaterThanErrorMessage: "Ulazni broj mora biti veći od ${min}",
		lesserThanErrorMessage: "Ulazni broj mora biti manji od ${max}",
		greaterThanOrEqualErrorMessage: "Ulazni broj mora biti veći od ili jednak ${min}",
		lesserThanOrEqualErrorMessage: "Ulazni broj mora biti manji od ili jednak ${max}",
		allowScalar: "Odaberi sloj ili unesi konstantu",
		selectField: "Odaberi polje",
		parameterRequired: "Ovaj parametar je obavezan.",
		enterAValue: "Unesite vrijednost...",
		invalidInput: "Unesena vrijednost nije valjana.",
		itemNotFound: "Stavka ne postoji ili nije dostupna.",
		itemPermissionDenied: "Nemate dopuštenje za pristup ovoj stavki.",
		layerNotAvailable: "Nije uspjelo učitavanje sloja ${layerName}.",
		multipleLayersNotAvailable: "Nije uspjelo učitavanje sloja ${layerName} i ostalih.",
		learnMoreLabel: "Saznajte više",
		fieldNotAvailable: "Učitavanje polja nije uspjelo.",
		allowAnalysis: "Analiza nije dopuštena na usluzi slike.",
		allowAnalysisReason: "Jedan ili više slojeva s karte nisu navedeni ovdje jer ne dopuštaju analizu.",
		learnMoreText: "Saznajte više",
		atLeastOneRasterInput: "Batem jedan ulazni sloj treba biti rasterski sloj.",
		browseAnalysisLayers: "Pretraži slojeve",
		activeMapViewExtent: "Upotrijebi trenutačni obuhvat karte",
		chooseRaster: "Odaberi raster rezanja",
		chooseGeometry: "Odaberi geometriju rezanja",
		resultType: "Vrsta rezultata",
		saveInFolder: "Spremi u mapu",
		outputName: "Naziv izlaza",
		outputLayerType: "Vrsta izlaznog sloja",
		dynamicImageryLayer: "Dinamični sloj sa snimkama",
		tiledImageryLayer: "Nagnuti sloj sa snimkama",
		custom: "Prilagodi",
		loading: "Učitavanje u tijeku...",
		layerMissing: "Jedan ili više slojeva s karte nisu navedeni ovdje jer ne dopuštaju analizu. Saznajte više.",
		browseCoordinateSystems: "Pregledajte koordinatne sustave",
		unableToRepopulateOutSR: "Nije moguće popuniti izlazni koordinatni sustav.",
		defaultTitle: "Vidi više",
		"ARC (equal arc-second)": "ARC (jednaka lučna sekunda)",
		Africa: "Afrika",
		Antarctica: "Antarktika",
		Argentina: "Argentina",
		Asia: "Azija",
		"Asteroid Belt": "Asteroidni pojas",
		"Atlantic Ocean": "Atlantski ocean",
		Australia: "Australija",
		"Australia and New Zealand": "Australija i Novi Zeland",
		Austria: "Austrija",
		"BLM (US Feet)": "BLM (američke stope)",
		Bangladesh: "Bangladeš",
		"Beijing 1954": "Peking 1954",
		Bhutan: "Butan",
		CGCS2000: "CGCS2000",
		Canada: "Kanada",
		Caribbean: "Karibi",
		"Caribbean Sea": "Karipsko more",
		"Central America": "Srednja Amerika",
		"Central and North America": "Srednja i Sjeverna Amerika",
		Colombia: "Kolumbija",
		Continental: "Kontinentalno",
		"County Systems": "Sustavi županija",
		"Democratic Republic of the Congo": "Demokratska Republika Kongo",
		"EPSG Arctic": "EPSG arktik",
		Earth: "Zemlja",
		"Ellipsoidal-based": "Na bazi elipsoida",
		Europe: "Europa",
		Finland: "Finska",
		France: "Francuska",
		"GSK 2011": "GSK 2011",
		"Gauss Kruger": "Gauss Kruger",
		"Geographic Coordinate Systems": "Geografski koordinatni sustavi",
		Germany: "Njemačka",
		"Gravity-related": "Povezano s gravitacijom",
		"Greenwich-based": "Na bazi Greenwicha",
		"Highways England": "Highways England",
		Illinois: "Illinois",
		"Indian Ocean": "Indijski ocean",
		"Indian Subcontinent": "Indijski potkontinent",
		Indiana: "Indiana",
		Indonesia: "Indonezija",
		Iowa: "Iowa",
		"Ireland and United Kingdom": "Irska i Ujedinjeno Kraljevstvo",
		Italy: "Italija",
		Japan: "Japan",
		Jupiter: "Jupiter",
		Kansas: "Kansas",
		"Las Vegas": "Las Vegas",
		Libya: "Libija",
		Malaysia: "Malezija",
		"Malaysia and Singapore": "Malezija i Singapur",
		Mars: "Mars",
		Mercury: "Merkur",
		Minnesota: "Minnesota",
		Montana: "Montana",
		"NAD 1927": "NAD 1927",
		"NAD 1927 (US Feet)": "NAD 1927 (američke stope)",
		"NAD 1983": "NAD 1983",
		"NAD 1983 (2011)": "NAD 1983 (2011)",
		"NAD 1983 (2011) (Intl Feet)": "NAD 1983 (2011) (int stope)",
		"NAD 1983 (2011) (Meters)": "NAD 1983 (2011) (metri)",
		"NAD 1983 (2011) (US Feet)": "NAD 1983 (2011) (američke stope)",
		"NAD 1983 (CORS96) (Intl Feet)": "NAD 1983 (CORS96) (int stope)",
		"NAD 1983 (CORS96) (Meters)": "NAD 1983 (CORS96) (metri)",
		"NAD 1983 (CORS96) (US Feet)": "NAD 1983 (CORS96) (američke stope)",
		"NAD 1983 (Intl Feet)": "NAD 1983 (int stope)",
		"NAD 1983 (Meters)": "NAD 1983 ((metri)",
		"NAD 1983 (PA11) (Meters)": "NAD 1983 (PA11) (metri)",
		"NAD 1983 (PA11) (US Feet)": "NAD 1983 (PA11) (američke stope)",
		"NAD 1983 (US Feet)": "NAD 1983 (američke stope)",
		"NAD 1983 HARN (Intl Feet)": "NAD 1983 HARN (int stope)",
		"NAD 1983 HARN (Meters)": "NAD 1983 HARN (metri)",
		"NAD 1983 HARN (US Feet)": "NAD 1983 HARN (američke stope)",
		"NAD 1983 NSRS2007 (Intl Feet)": "NAD 1983 NSRS2007 (int stope)",
		"NAD 1983 NSRS2007 (Meters)": "NAD 1983 NSRS2007 (metri)",
		"NAD 1983 NSRS2007 (US Feet)": "NAD 1983 NSRS2007 (američke stope)",
		"National Grids": "Nacionalne mreže",
		Navajo: "Navajo",
		Neptune: "Neptun",
		"New Beijing": "Novi Peking",
		"New Zealand": "Novi Zeland",
		"North America": "Sjeverna Amerika",
		"Northern Hemisphere": "Sjeverna hemisfera",
		Norway: "Norveška",
		Oceans: "Oceani",
		Oregon: "Oregon",
		"Other GCS": "Drugi geografski koordinatni sustav",
		"Pacific Ocean": "Tihi ocean",
		Pluto: "Pluto",
		Polar: "Polarno",
		Portugal: "Portugal",
		"Projected Coordinate Systems": "Projicirani koordinatni sustavi",
		"Pulkovo 1942": "Pulkovo 1942",
		"Pulkovo 1995": "Pulkovo 1995",
		Replaced: "Zamijenjeno",
		"SAD 1969": "SAD 1969",
		SIRGAS: "SIRGAS",
		"SIRGAS 2000": "SIRGAS 2000",
		Saturn: "Saturn",
		"Solar System": "Solarni sustav",
		"South Africa": "Južnoafrička Republika",
		"South America": "Južna Amerika",
		"South Korea": "Južna Koreja",
		"Southern Hemisphere": "Južna hemisfera",
		"Spheroid-based": "Na bazi sferoida",
		"State Plane": "Državna ravnina",
		"State Systems": "Državni sustavi",
		Sweden: "Švedska",
		"Switzerland and Liechtenstein": "Švicarska i Lihtenštajn",
		Texas: "Texas",
		Tribal: "Plemenski",
		Turkey: "Turska",
		"US Feet": "Američke stope",
		"USA and territories": "SAD i teritoriji",
		UTM: "UTM",
		Ukraine: "Ukrajina",
		"Unknown Height Systems": "Nepoznati sustav visine",
		Uranus: "Uran",
		Venus: "Venera",
		"Vertical Coordinate Systems": "Vertikalni koordinatni sustavi",
		Vietnam: "Vijetnam",
		"WGS 1972": "WGS 1972",
		"WGS 1984": "WGS 1984",
		Wisconsin: "Wisconsin",
		"Wisconsin CRS": "Wisconsin CRS",
		World: "Svijet",
		"World (Sphere-based)": "Svijet (na bazi sfere)",
		Wyoming: "Wyoming",
		"Xian 1980": "Xian 1980",
		done: "Gotovo",
		noResults: "Nisu pronađeni rezultati",
		searchPlaceholder: "Ime ili WKID",
		browseTemplate: "Pregledaj predloške rasterske funkcije",
		saveTemplate: "Spremi predložak rasterske funkcije",
		preview: "Pretpregled",
		previewDescription: "Pregledajte rezultat prije pokretanja analize.",
		showPreview: "Prikaži pretpregled",
		previewLayer: "Sloj pretpregleda ${number}",
		newPreview: "Novi pretpregled",
		previewPopup: "Omogućite pregled rezultata analize na temelju ulaznih parametara.",
		updatePreviewLayer: "Ažurirajte odabrani sloj pretpregleda",
		createPreviewLayer: "Stvori novi sloj pretpregleda",
		maximumPreviewAllowed: "Maksimalni dopušteni broj slojeva pretpregleda: ${maxCount}",
		previewFailure: "Ovaj sloj pretpregleda nije dostupan. Provjerite ulazne parametre i ponovno ažurirajte ovaj sloj pretpregleda.",
		header: "Odaberi stavku",
		content: "Imate nespremljene promjene u ${rftTitle}. Ako počnete ispočetka s novim predloškom, te će se promjene izgubiti.",
		dontSave: "Nemoj spremiti",
		"continue": "Nastavak",
		stretch: "Prilagodi prozoru",
		pan: "Kreći se po slici",
		newTemplate: "Stvori novi predložak",
		openTemplate: "Otvori predložak",
		addFunction: "Dodaj rasterske funkcije",
		addConstant: "Dodaj konstantu",
		addRaster: "Dodaj varijablu rastera",
		move: "Premjesti",
		zoom: "Povećaj",
		saveAs: "Spremi kao",
		clear: "Ukloni",
		addRasterFunctionTitle: "Dodaj rasterske funkcije",
		templatePropertiesTitle: "Svojstva predloška",
		browseRFT: "Pregledaj predloške rasterske funkcije",
		defaultToolDescription: "${toolTitle} alat za analizu.",
		openToolText: "Otvori alat",
		toolDropdownText: "Padajući izbornik alata",
		addToMap: "Potvrdi i dodaj na kartu",
		confirm: "Potvrdi",
		select: "Odaberi",
		selectTask: "Odaberi zadatak",
		unsupportedLayer: "Ovaj parametar ne podržava sljedeće slojeve: ${layerName}.",
		viewDetails: "Prikaži sve pojedinosti o stavci",
		rename: "Preimenuj",
		duplicate: "Dupliciraj",
		launch: "Otvori za pokretanje",
		templateEditor: "Uređivač predložaka",
		createItem: "Spremi predložak rasterske funkcije",
		actionLabel: "Filtriraj",
		filterPopoverHeading: "Filtriraj funkcije",
		defaultSearchPlaceholder: "Pretraži prema nazivu",
		settings: "Postavke",
		summary: "Sažetak",
		definitionQuery: "Upit za definiciju",
		matchVariables: "Varijable podudaranja",
		unionDimension: "Dimenzija sjedinjenja",
		nameEditorPlaceholder: "Unesite naslov",
		summaryEditorPlaceholder: "Unesite kratak opis.",
		definitionQueryPlaceholder: "Ulaz...",
		upload: "Učitaj",
		chooseImage: "Kliknite da biste odabrali datoteku",
		update: "Ažuriraj",
		thumbnailErrors: {
			wrongImageType: "Odabrana je pogrešna vrsta slike",
			notAvailable: "Sličica nije dostupna",
			loadError: "Nije bilo moguće učitati sliku",
			chooseFile: "Kliknite da biste odabrali datoteku"
		}
	}
};
const copy = "Kopiraj";
const save = "Spremi";
const title = "Naziv";
const folder = "Mapa";
const tags = "Oznake";
const savingMessage = "Spremanje stavke na";
const shareWith = "Podijeli s";
const share = "Podijeli";
const setSharingLevel = "Postavi razinu dijeljenja";
const setGroupSharing = "Postavi dijeljenje s grupama";
const owner = "Vlasnik";
const organization = "Organizacija";
const everyone = "Svi (javno)";
const groups = "Grupe:";
const type = "Vrsta";
const mosaic = "Mozaik";
const itemGroup = "Grupa stavke";
const item = "Stavka";
const definitionQuery = "Upit za definiciju";
const groupItemsBy = "Grupiraj stavke prema";
const groupFieldName = "Grupiraj naziv polja";
const tagFieldName = "Označi naziv polja";
const noTitleTagErrorMsg = "Morate navesti naslov za svoj tim i oznake kako biste omogućili traženje karta pretraživanja.";
const noTitleErrorMsg = "Morate navesti naslov za svoju stavku.";
const noTagErrorMsg = "Morate navesti barem jednu oznaku kako biste pomogli korisnicima da pronađu vašu stavku putem pretraživanja.";
const error = "Pogreška";
const warning = "Upozorenje";
const success = "Uspjeh";
const details = "Pojedinosti:";
const tryAgain = "Pokušaj ponovno";
const toolModeler = {
	save: "Spremi",
	editProperties: "Uredi svojstva",
	saveAs: "Spremi kao",
	savingNotification: "Spremanje promjena stavke...",
	savingTitle: "Spremanje",
	saveFailedMessage: "Spremanje promjena nije uspjelo.",
	saveWithErrorsMessage: "Promjene su spremljene sa sljedećim pogreškama.",
	viewItemMessage: "Prikaz spremljene stavke",
	here: "ovdje.",
	itemCreatedMessage: "Nova stavka je stvorena.",
	clickToViewItemMessage: "Pritisnite U redu za prikaz stranice s detaljima stavke; kliknite Odustani za nastavak.",
	readingFailed: "Učitavanje odabranog predloška rasterske funkcije nije uspjelo.",
	failedToLoadXML: "Učitavanje odabranog predloška rasterske funkcije u XML formatu nije uspjelo.",
	learnMore: "Saznajte više",
	overwriteTitle: "Potvrdi prebrisanje",
	overwriteMessage: "Želite li pisati preko postojeće stavke?",
	overwriteSuccessMessage: "Stavka je ažurirana."
};
const toolEditor = {
	run: "Pokreni",
	save: "Spremi",
	deleteSelected: "Izbriši odabrane stavke",
	addRaster: "Dodaj raster",
	addScalar: "Dodaj skalar",
	layout: "Automatski izgled",
	errorTitle: "Pogreška",
	invalidToolMessage: "Predložak rasterske funkcije nije važeći.",
	out: "Van",
	zoomIn: "Povećaj",
	zoomOut: "Smanji",
	zoomToFit: "Prilagodi prozoru",
	panOn: "Prebaci u način pomicanja",
	panOff: "Isključi način pomicanja",
	defaultModelName: "Model alata",
	defaultRasterName: "Raster"
};
const toolDetailsEditor = {
	defaultToolName: "Predložak funkcije rastera",
	defaultToolDescription: "Dodajte kratki sažetak o rasterskoj funkciji.",
	defaultHelpText: "Kliknite na ikonu pomoći da biste uredili tekst pomoći",
	editHelpTitle: "Pomoć s uređivanjem",
	saveLabel: "Spremi",
	cancelLabel: "Odustani",
	thumbnail: {
		wrongImageType: "Odabrana je pogrešna vrsta slike",
		notAvailable: "Sličica nije dostupna",
		loadError: "Nije bilo moguće učitati sliku",
		chooseFile: "Kliknite da biste odabrali datoteku"
	}
};
const saveUtils = {
	thumbnail: "Sličica",
	sharing: "Dijeljenje"
};
const close = "Zatvori";
const unsavedWarningExisting = "Želite li spremiti promjene stavke <b>${itemTitle}</b>?";
const unsavedWarningNew = "Želite li spremiti promjene?";
const saveAs = "Spremi kao";
const dontSave = "Nemoj spremiti";
const unsavedTitle = "Nespremljene promjene";
const invalidRFTMessage = "Stvoreni predložak rasterske funkcije nije važeći.";
const errorTitle = "Pogreška";
const breadcrumb = "Uređivač rasterske funkcije";
const breadcrumbEditor = "Sadržaj > Uređivač rasterske funkcije";
const viewerModeTitle = "Samo za čitanje";
const viewerModeMessage = "Stavka predloška rasterske funkcije je samo za čitanje. Promjene se ne mogu spremiti.";
const userStartDirection = "Odaberite funkciju za početak izrade predloška rasterske funkcije.";
const selectFunction = "Dodaj funkciju";
const deselectFunction = "Ukloni funkciju";
const dialogTitle = "Sustav";
const category = "Kategorije";
const search = "Pretraživanje rasterskih funkcija";
const categoryNames = {
	analysis: "Analiza",
	appearance: "Izgled",
	classification: "Klasifikacija",
	conversion: "Pretvaranje",
	correction: "Ispravak",
	dataManagement: "Upravljanje podacima",
	distance: "Udaljenost",
	distanceLegacy: "Distance (Legacy)",
	hydrology: "Hidrologija",
	math: "Matematika",
	mathConditional: "Matematika: uvjetna",
	mathLogical: "Matematika: logička",
	mathTrigonometric: "Matematika: trigonometrijska",
	reclass: "Ponovno klasificiranje",
	statistical: "Statistički",
	surface: "Površinski"
};
const commonStrings_bs = {
	ok: ok,
	cancel: cancel,
	enterURL: enterURL,
	serviceURL: serviceURL,
	selectRaster: selectRaster,
	failedToLoadLayer: failedToLoadLayer,
	loadingLayer: loadingLayer,
	selectFeature: selectFeature,
	enterFURL: enterFURL,
	addRaster: addRaster,
	addScalar: addScalar,
	raster: raster,
	scalar: scalar,
	defaultModelName: defaultModelName,
	general: general,
	parameters: parameters,
	variables: variables,
	name: name,
	description: description,
	parameter: parameter,
	isPublic: isPublic,
	isDataset: isDataset,
	unknownPixelType: unknownPixelType,
	outputPixelType: outputPixelType,
	u8PixelType: u8PixelType,
	s8PixelType: s8PixelType,
	u16PixelType: u16PixelType,
	s16PixelType: s16PixelType,
	u32PixelType: u32PixelType,
	s32PixelType: s32PixelType,
	f32PixelType: f32PixelType,
	f64PixelType: f64PixelType,
	properties: properties,
	multidimensionalRules: multidimensionalRules,
	matchVariables: matchVariables,
	unionDimensions: unionDimensions,
	rasterFunctionEditor: rasterFunctionEditor,
	rfxLicenseInfo: rfxLicenseInfo,
	rasterFunctions: rasterFunctions,
	copy: copy,
	save: save,
	title: title,
	folder: folder,
	tags: tags,
	savingMessage: savingMessage,
	shareWith: shareWith,
	share: share,
	setSharingLevel: setSharingLevel,
	setGroupSharing: setGroupSharing,
	owner: owner,
	organization: organization,
	everyone: everyone,
	groups: groups,
	type: type,
	mosaic: mosaic,
	itemGroup: itemGroup,
	item: item,
	definitionQuery: definitionQuery,
	groupItemsBy: groupItemsBy,
	groupFieldName: groupFieldName,
	tagFieldName: tagFieldName,
	noTitleTagErrorMsg: noTitleTagErrorMsg,
	noTitleErrorMsg: noTitleErrorMsg,
	noTagErrorMsg: noTagErrorMsg,
	error: error,
	warning: warning,
	success: success,
	details: details,
	tryAgain: tryAgain,
	toolModeler: toolModeler,
	toolEditor: toolEditor,
	toolDetailsEditor: toolDetailsEditor,
	saveUtils: saveUtils,
	close: close,
	unsavedWarningExisting: unsavedWarningExisting,
	unsavedWarningNew: unsavedWarningNew,
	saveAs: saveAs,
	dontSave: dontSave,
	unsavedTitle: unsavedTitle,
	invalidRFTMessage: invalidRFTMessage,
	errorTitle: errorTitle,
	breadcrumb: breadcrumb,
	breadcrumbEditor: breadcrumbEditor,
	viewerModeTitle: viewerModeTitle,
	viewerModeMessage: viewerModeMessage,
	userStartDirection: userStartDirection,
	selectFunction: selectFunction,
	deselectFunction: deselectFunction,
	dialogTitle: dialogTitle,
	category: category,
	search: search,
	categoryNames: categoryNames
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (commonStrings_bs);


//# sourceMappingURL=common-strings.bs-778fa490.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,