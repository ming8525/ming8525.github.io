"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_arcgis-raster-function-editor_-f63a11"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/help-texts.sv-56096940.js":
/*!**********************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/help-texts.sv-56096940.js ***!
  \**********************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   rfxArgsHelpTexts: () => (/* binding */ rfxArgsHelpTexts)
/* harmony export */ });
const rfxArgsHelpTexts = {
	"@@Abs_Cellsize-Type_tag0@@": "Välj vilka celler som ska användas i utdatarastret. Om alla indatacellernas storlekar är identiska ger alla alternativen samma resultat.",
	"@@Abs_Cellsize-Type_tag1@@": "Först av – använd den första cellens storlek i indatarastren.",
	"@@Abs_Cellsize-Type_tag2@@": "Sist av – använd den sista cellens storlek i indatarastren.",
	"@@Abs_Cellsize-Type_tag3@@": "Max av – använd den största cellens storlek i indatarastren. Det här är standardinställningen.",
	"@@Abs_Cellsize-Type_tag4@@": "Medel av – använd den genomsnittliga cellstorleken i indatarastren.",
	"@@Abs_Cellsize-Type_tag5@@": "Min. av – använd den minsta cellens storlek i indatarastren.",
	"@@Abs_Extent-Type_tag0@@": "Välj vilken utbredning som ska användas i utdatarastret:",
	"@@Abs_Extent-Type_tag1@@": "Först av – använd det första indatarastrets utbredning för att bestämma bearbetningsutbredningen.",
	"@@Abs_Extent-Type_tag2@@": "Snittet mellan – använd de överlappande pixlarnas utbredning för att bestämma bearbetningsutbredningen. Det här är standardinställningen.",
	"@@Abs_Extent-Type_tag3@@": "Sist av – använd det sista indatarastrets utbredning för att bestämma bearbetningsutbredningen.",
	"@@Abs_Extent-Type_tag4@@": "Unionen av – använd alla rastrens utbredning för att bestämma bearbetningsutbredningen.",
	"@@Abs_Raster_tag0@@": "Det indataraster för vilket absoluta värden ska beräknas.",
	"@@ACos_Cellsize-Type_tag0@@": "Välj vilka celler som ska användas i utdatarastret. Om alla indatacellernas storlekar är identiska ger alla alternativen samma resultat.",
	"@@ACos_Cellsize-Type_tag1@@": "Först av – använd den första cellens storlek i indatarastren.",
	"@@ACos_Cellsize-Type_tag2@@": "Sist av – använd den sista cellens storlek i indatarastren.",
	"@@ACos_Cellsize-Type_tag3@@": "Max av – använd den största cellens storlek i indatarastren. Det här är standardinställningen.",
	"@@ACos_Cellsize-Type_tag4@@": "Medel av – använd den genomsnittliga cellstorleken i indatarastren.",
	"@@ACos_Cellsize-Type_tag5@@": "Min. av – använd den minsta cellens storlek i indatarastren.",
	"@@ACos_Extent-Type_tag0@@": "Välj vilken utbredning som ska användas i utdatarastret:",
	"@@ACos_Extent-Type_tag1@@": "Först av – använd det första indatarastrets utbredning för att bestämma bearbetningsutbredningen.",
	"@@ACos_Extent-Type_tag2@@": "Snittet mellan – använd de överlappande pixlarnas utbredning för att bestämma bearbetningsutbredningen. Det här är standardinställningen.",
	"@@ACos_Extent-Type_tag3@@": "Sist av – använd det sista indatarastrets utbredning för att bestämma bearbetningsutbredningen.",
	"@@ACos_Extent-Type_tag4@@": "Unionen av – använd alla rastrens utbredning för att bestämma bearbetningsutbredningen.",
	"@@ACos_Raster_tag0@@": "De indata för vilka inverterad cosinus ska beräknas.",
	"@@ACosH_Cellsize-Type_tag0@@": "Välj vilka celler som ska användas i utdatarastret. Om alla indatacellernas storlekar är identiska ger alla alternativen samma resultat.",
	"@@ACosH_Cellsize-Type_tag1@@": "Först av – använd den första cellens storlek i indatarastren.",
	"@@ACosH_Cellsize-Type_tag2@@": "Sist av – använd den sista cellens storlek i indatarastren.",
	"@@ACosH_Cellsize-Type_tag3@@": "Max av – använd den största cellens storlek i indatarastren. Det här är standardinställningen.",
	"@@ACosH_Cellsize-Type_tag4@@": "Medel av – använd den genomsnittliga cellstorleken i indatarastren.",
	"@@ACosH_Cellsize-Type_tag5@@": "Min. av – använd den minsta cellens storlek i indatarastren.",
	"@@ACosH_Extent-Type_tag0@@": "Välj vilken utbredning som ska användas i utdatarastret:",
	"@@ACosH_Extent-Type_tag1@@": "Först av – använd det första indatarastrets utbredning för att bestämma bearbetningsutbredningen.",
	"@@ACosH_Extent-Type_tag2@@": "Snittet mellan – använd de överlappande pixlarnas utbredning för att bestämma bearbetningsutbredningen. Det här är standardinställningen.",
	"@@ACosH_Extent-Type_tag3@@": "Sist av – använd det sista indatarastrets utbredning för att bestämma bearbetningsutbredningen.",
	"@@ACosH_Extent-Type_tag4@@": "Unionen av – använd alla rastrens utbredning för att bestämma bearbetningsutbredningen.",
	"@@ACosH_Raster_tag0@@": "De indata för vilka inverterad hyperbolisk cosinus ska beräknas.",
	"@@Apparent-Reflectance_Albedo_tag0@@": "Resultaten av funktionen för skenbar reflektans kan också uttryckas som albedo, vilket är den procentuella andelen av den tillgängliga energin som reflekteras av den planetariska ytan. Albedodata används av vetenskapliga användare i komplicerade modeller och tekniska fjärranalystillämpningar.",
	"@@Apparent-Reflectance_Albedo_tag1@@": "Avmarkerad – funktionen returnerar värden för skenbar reflektans. Det här är standardinställningen.",
	"@@Apparent-Reflectance_Albedo_tag2@@": "Markerad – funktionen returnerar 32-bitars flyttalsvärden, som vanligen ligger i intervallet 0,0 till 1,0. Ingen dataklippning utförs om det här alternativet är markerat.",
	"@@Apparent-Reflectance_Albedo_tag3@@": "Eftersom utdatatypen för albedo är flyttal måste du uttryckligen ange den önskade <strong>Pixeltyp för utdata</strong> till antingen 32-bitars flyttal eller 64-bitars dubbel. Parametern <strong>Pixeltyp för utdata</strong> finns på fliken <strong>Allmänt</strong> i rasterfunktionen <strong>Skenbar reflektans</strong>. Om <strong>Pixeltyp för utdata</strong> inte är korrekt inställd för alternativet <strong>Albedo</strong> blir resultatvärdena ogiltiga och får värdet 0.",
	"@@Apparent-Reflectance_Offset_tag0@@": "Ditt skalade albedovärde kan eventuellt ha ett förskjutningsvärde:",
	"@@Apparent-Reflectance_Offset_tag1@@": "För 16-bitars osignerade datatyper är standarden för skalförskjutningen 5 000.",
	"@@Apparent-Reflectance_Offset_tag2@@": "För 8-bitars osignerade datatyper är standarden för skalförskjutningen 0.",
	"@@Apparent-Reflectance_Offset_tag3@@": "Ingen skalning tillämpas när utdata är albedo.",
	"@@Apparent-Reflectance_Radiance-Gains-and-Bias-Values-per-Band_tag0@@": "Du kan ange eller redigera detta värde manuellt för varje band. Rätt information kan läsas från indatarasterproduktens metadata.",
	"@@Apparent-Reflectance_Raster_tag0@@": "Den rasterprodukt som den skenbara reflektansen kommer att tillämpas på.",
	"@@Apparent-Reflectance_Scale-Factor_tag0@@": "Utdatavärdet för den skenbara reflektansen kan uttryckas som ett heltal. Skalfaktorn multipliceras med albedo för att konvertera alla flyttalsvärden till heltal.",
	"@@Apparent-Reflectance_Scale-Factor_tag1@@": "Om skalfaktorn är antingen ${0} eller inte angiven, används standardskalning beroende på indatas pixeltyp:",
	"@@Apparent-Reflectance_Scale-Factor_tag2@@": "För 16-bitars osignerade datatyper är standardskalningsfaktorn 50 000.",
	"@@Apparent-Reflectance_Scale-Factor_tag3@@": "För 8-bitars osignerade datatyper är standardskalningsfaktorn 255.",
	"@@Apparent-Reflectance_Scale-Factor_tag4@@": "Skalningsfaktorn används alltid när utdata är skenbar reflektans. Ingen skalning tillämpas när utdata är albedo.",
	"@@Apparent-Reflectance_Sun-Elevation_tag0@@": "Det här är solhöjden uttryckt i grader. Detta fylls i automatiskt av systemet om den rätta informationen kan läsas från metadata. Du kan ange eller redigera detta värde manuellt.",
	"@@ArgStatistics_Max_tag0@@": "Det maximivärde som du anger är det högsta värdet som är lika med eller lägre än varaktighetens slut.",
	"@@ArgStatistics_Max_tag1@@": "Dessa indata är bara tillämpliga när metoden är Duration.",
	"@@ArgStatistics_Method_tag0@@": "Välj statistikmetod för att beräkna:",
	"@@ArgStatistics_Method_tag1@@": "Arg Max – argumentet för maximum, som returnerar ${Band index}, för vilket den givna pixeln får sitt lägsta värde från alla band. Alla rasterband från samtliga indataraster tilldelas ett nollbaserat inkrementellt bandindex, som först ordnas av indatarastrets index och sedan av den relativa bandordningen inom varje indataraster.",
	"@@ArgStatistics_Method_tag2@@": "Arg Median – argumentet för medianen, som returnerar ${Band index}, för vilket den givna pixeln får medianvärdet från alla band.",
	"@@ArgStatistics_Method_tag3@@": "Arg Min – argumentet för minimum, som returnerar ${Band index}, för vilket den givna pixeln får sitt lägsta värde från alla band.",
	"@@ArgStatistics_Method_tag4@@": "Duration – Metoden Duration hittar de längsta sammanhängande elementen i vektorn, där varje element har ett värde som är större än eller lika med <strong>Min</strong> och mindre än eller lika med <strong>Max</strong>, och sedan returnerar dess längd.",
	"@@ArgStatistics_Min_tag0@@": "Det minimivärde som du anger är det lägsta värdet som är lika med eller större än varaktighetens början.",
	"@@ArgStatistics_Min_tag1@@": "Dessa indata är bara tillämpliga när metoden är Duration.",
	"@@ArgStatistics_Rasters_tag0@@": "Det indataraster som du ska utföra de olika statistikmetoderna på.",
	"@@ArgStatistics_Undefined-Class_tag0@@": "En indatakonstant som returneras när inget definitivt minimi-, maximi- eller medianvärde kan erhållas. Det vanligaste scenariot är när det högsta eller lägsta värdet förekommer fler än en gång bland värdena från alla band. Standardvärdet för den odefinierade konstanten är 100.",
	"@@ArgStatistics_Undefined-Class_tag1@@": "Den odefinierade klassen är bara tillämplig när metoden är <strong>ArgMax</strong>, <strong>ArgMin</strong> eller <strong>ArgMedian</strong>.",
	"@@ArgStatistics_ignorenodata_tag0@@": "Anger om NoData-värden ska ignoreras i den statistiska beräkningen.",
	"@@ArgStatistics_ignorenodata_tag1@@": "Markerad – Analysen inkluderar alla giltiga pixlar i indatarastren och ignorerar eventuella NoData-pixlar.",
	"@@ArgStatistics_ignorenodata_tag2@@": "Avmarkerad – Analysen resulterar i NoData om det finns NoData-värden för pixlar i indataraster. Det här är standardinställningen.",
	"@@Arithmetic_Cellsize-Type_tag0@@": "Välj vilka celler som ska användas i utdatarastret. Om alla indatacellernas storlekar är identiska ger alla alternativen samma resultat.",
	"@@Arithmetic_Cellsize-Type_tag1@@": "Först av – använd den första cellens storlek i indatarastren.",
	"@@Arithmetic_Cellsize-Type_tag2@@": "Sist av – använd den sista cellens storlek i indatarastren.",
	"@@Arithmetic_Cellsize-Type_tag3@@": "Max av – använd den största cellens storlek i indatarastren. Det här är standardinställningen.",
	"@@Arithmetic_Cellsize-Type_tag4@@": "Medel av – använd den genomsnittliga cellstorleken i indatarastren.",
	"@@Arithmetic_Cellsize-Type_tag5@@": "Min. av – använd den minsta cellens storlek i indatarastren.",
	"@@Arithmetic_Extent-Type_tag0@@": "Välj vilken utbredning som ska användas i utdatarastret:",
	"@@Arithmetic_Extent-Type_tag1@@": "Först av – använd det första indatarastrets utbredning för att bestämma bearbetningsutbredningen.",
	"@@Arithmetic_Extent-Type_tag2@@": "Snittet mellan – använd de överlappande pixlarnas utbredning för att bestämma bearbetningsutbredningen. Det här är standardinställningen.",
	"@@Arithmetic_Extent-Type_tag3@@": "Sist av – använd det sista indatarastrets utbredning för att bestämma bearbetningsutbredningen.",
	"@@Arithmetic_Extent-Type_tag4@@": "Unionen av – använd alla rastrens utbredning för att bestämma bearbetningsutbredningen.",
	"@@Arithmetic_Operation_tag0@@": "Den aritmetiska operationen som ska utföras mellan de två indatarastren.",
	"@@Arithmetic_Operation_tag1@@": "Följande alternativ finns:",
	"@@Arithmetic_Operation_tag2@@": "<strong>Dela</strong> – Utdata motsvaras av det delbara resultatet mellan de korresponderande pixelvärdena för varje raster.",
	"@@Arithmetic_Operation_tag4@@": "<strong>Minus</strong> – Utdata motsvaras av differensen mellan de korresponderande pixelvärdena för varje raster. Detta kan användas för att beräkna förändringsdetektering.",
	"@@Arithmetic_Operation_tag6@@": "<strong>Läge</strong> – Utdata motsvaras av pixelvärdet för alla överlappande pixlar med tätast förekomst. Om det till exempel finns sex band i ett raster, blir det sex överlappande pixlar. För värdena 4, 5, 6, 4, 7, 9 är typvärdet 4.",
	"@@Arithmetic_Operation_tag8@@": "<strong>Multiplicera</strong> – Utdata motsvaras av produkten av de korresponderande pixelvärdena för varje raster. Detta kan användas när man gör vissa kostnadsberäkningar.",
	"@@Arithmetic_Operation_tag10@@": "<strong>Plus</strong> – Utdata motsvaras av summan för alla de korresponderande pixelvärdena för varje raster.",
	"@@Arithmetic_Operation_tag12@@": "<strong>Potens</strong> – Utdata motsvaras av produkten för de korresponderande pixelvärdena upphöjd till indatarastrets potens eller skalären.",
	"@@Arithmetic_Raster_tag0@@": "Det första indatarasterdatasetet.",
	"@@Arithmetic_Raster2_tag0@@": "Det andra indatarasterdatasetet.",
	"@@ASin_Cellsize-Type_tag0@@": "Välj vilka celler som ska användas i utdatarastret. Om alla indatacellernas storlekar är identiska ger alla alternativen samma resultat.",
	"@@ASin_Cellsize-Type_tag1@@": "Först av – använd den första cellens storlek i indatarastren.",
	"@@ASin_Cellsize-Type_tag2@@": "Sist av – använd den sista cellens storlek i indatarastren.",
	"@@ASin_Cellsize-Type_tag3@@": "Max av – använd den största cellens storlek i indatarastren. Det här är standardinställningen.",
	"@@ASin_Cellsize-Type_tag4@@": "Medel av – använd den genomsnittliga cellstorleken i indatarastren.",
	"@@ASin_Cellsize-Type_tag5@@": "Min. av – använd den minsta cellens storlek i indatarastren.",
	"@@ASin_Extent-Type_tag0@@": "Välj vilken utbredning som ska användas i utdatarastret:",
	"@@ASin_Extent-Type_tag1@@": "Först av – använd det första indatarastrets utbredning för att bestämma bearbetningsutbredningen.",
	"@@ASin_Extent-Type_tag2@@": "Snittet mellan – använd de överlappande pixlarnas utbredning för att bestämma bearbetningsutbredningen. Det här är standardinställningen.",
	"@@ASin_Extent-Type_tag3@@": "Sist av – använd det sista indatarastrets utbredning för att bestämma bearbetningsutbredningen.",
	"@@ASin_Extent-Type_tag4@@": "Unionen av – använd alla rastrens utbredning för att bestämma bearbetningsutbredningen.",
	"@@ASin_Raster_tag0@@": "De indata för vilka inverterad sinus ska beräknas.",
	"@@ASinH_Cellsize-Type_tag0@@": "Välj vilka celler som ska användas i utdatarastret. Om alla indatacellernas storlekar är identiska ger alla alternativen samma resultat.",
	"@@ASinH_Cellsize-Type_tag1@@": "Först av – använd den första cellens storlek i indatarastren.",
	"@@ASinH_Cellsize-Type_tag2@@": "Sist av – använd den sista cellens storlek i indatarastren.",
	"@@ASinH_Cellsize-Type_tag3@@": "Max av – använd den största cellens storlek i indatarastren. Det här är standardinställningen.",
	"@@ASinH_Cellsize-Type_tag4@@": "Medel av – använd den genomsnittliga cellstorleken i indatarastren.",
	"@@ASinH_Cellsize-Type_tag5@@": "Min. av – använd den minsta cellens storlek i indatarastren.",
	"@@ASinH_Extent-Type_tag0@@": "Välj vilken utbredning som ska användas i utdatarastret:",
	"@@ASinH_Extent-Type_tag1@@": "Först av – använd det första indatarastrets utbredning för att bestämma bearbetningsutbredningen.",
	"@@ASinH_Extent-Type_tag2@@": "Snittet mellan – använd de överlappande pixlarnas utbredning för att bestämma bearbetningsutbredningen. Det här är standardinställningen.",
	"@@ASinH_Extent-Type_tag3@@": "Sist av – använd det sista indatarastrets utbredning för att bestämma bearbetningsutbredningen.",
	"@@ASinH_Extent-Type_tag4@@": "Unionen av – använd alla rastrens utbredning för att bestämma bearbetningsutbredningen.",
	"@@ASinH_Raster_tag0@@": "De indata för vilka inverterad hyperbolisk sinus ska beräknas.",
	"@@Aspect_Raster_tag0@@": "De DEM-indata som används till att härleda den aspektdatasetet.",
	"@@Aspect-Slope_Raster_tag0@@": "DEM-indata.",
	"@@Aspect-Slope_Z-Factor_tag0@@": "En skalningsfaktor som används vid konvertering av höjdvärden för följande två ändamål:",
	"@@Aspect-Slope_Z-Factor_tag1@@": "För att konvertera höjdenheterna (t.ex. meter eller fot) till datasetets horisontella koordinatenheter, som kan vara fot, meter eller grader",
	"@@Aspect-Slope_Z-Factor_tag2@@": "För att lägga till vertikal förstoring för visuell effekt",
	"@@ATan_Cellsize-Type_tag0@@": "Välj vilka celler som ska användas i utdatarastret. Om alla indatacellernas storlekar är identiska ger alla alternativen samma resultat.",
	"@@ATan_Cellsize-Type_tag1@@": "Först av – använd den första cellens storlek i indatarastren.",
	"@@ATan_Cellsize-Type_tag2@@": "Sist av – använd den sista cellens storlek i indatarastren.",
	"@@ATan_Cellsize-Type_tag3@@": "Max av – använd den största cellens storlek i indatarastren. Det här är standardinställningen.",
	"@@ATan_Cellsize-Type_tag4@@": "Medel av – använd den genomsnittliga cellstorleken i indatarastren.",
	"@@ATan_Cellsize-Type_tag5@@": "Min. av – använd den minsta cellens storlek i indatarastren.",
	"@@ATan_Extent-Type_tag0@@": "Välj vilken utbredning som ska användas i utdatarastret:",
	"@@ATan_Extent-Type_tag1@@": "Först av – använd det första indatarastrets utbredning för att bestämma bearbetningsutbredningen.",
	"@@ATan_Extent-Type_tag2@@": "Snittet mellan – använd de överlappande pixlarnas utbredning för att bestämma bearbetningsutbredningen. Det här är standardinställningen.",
	"@@ATan_Extent-Type_tag3@@": "Sist av – använd det sista indatarastrets utbredning för att bestämma bearbetningsutbredningen.",
	"@@ATan_Extent-Type_tag4@@": "Unionen av – använd alla rastrens utbredning för att bestämma bearbetningsutbredningen.",
	"@@ATan_Raster_tag0@@": "De indata för vilka inverterad tangens ska beräknas.",
	"@@ATan2_Cellsize-Type_tag0@@": "Välj vilka celler som ska användas i utdatarastret. Om alla indatacellernas storlekar är identiska ger alla alternativen samma resultat.",
	"@@ATan2_Cellsize-Type_tag1@@": "Först av – använd den första cellens storlek i indatarastren.",
	"@@ATan2_Cellsize-Type_tag2@@": "Sist av – använd den sista cellens storlek i indatarastren.",
	"@@ATan2_Cellsize-Type_tag3@@": "Max av – använd den största cellens storlek i indatarastren. Det här är standardinställningen.",
	"@@ATan2_Cellsize-Type_tag4@@": "Medel av – använd den genomsnittliga cellstorleken i indatarastren.",
	"@@ATan2_Cellsize-Type_tag5@@": "Min. av – använd den minsta cellens storlek i indatarastren.",
	"@@ATan2_Extent-Type_tag0@@": "Välj vilken utbredning som ska användas i utdatarastret:",
	"@@ATan2_Extent-Type_tag1@@": "Först av – använd det första indatarastrets utbredning för att bestämma bearbetningsutbredningen.",
	"@@ATan2_Extent-Type_tag2@@": "Snittet mellan – använd de överlappande pixlarnas utbredning för att bestämma bearbetningsutbredningen. Det här är standardinställningen.",
	"@@ATan2_Extent-Type_tag3@@": "Sist av – använd det sista indatarastrets utbredning för att bestämma bearbetningsutbredningen.",
	"@@ATan2_Extent-Type_tag4@@": "Unionen av – använd alla rastrens utbredning för att bestämma bearbetningsutbredningen.",
	"@@ATan2_Raster_tag0@@": "De indata som anger vilken täljare, eller vilket y-värde, som ska användas vid beräkning av inverterad tangens.",
	"@@ATan2_Raster2_tag0@@": "De indata som anger vilken nämnare, eller vilket x-värde, som ska användas vid beräkning av inverterad tangens.",
	"@@ATanH_Cellsize-Type_tag0@@": "Välj vilka celler som ska användas i utdatarastret. Om alla indatacellernas storlekar är identiska ger alla alternativen samma resultat.",
	"@@ATanH_Cellsize-Type_tag1@@": "Först av – använd den första cellens storlek i indatarastren.",
	"@@ATanH_Cellsize-Type_tag2@@": "Sist av – använd den sista cellens storlek i indatarastren.",
	"@@ATanH_Cellsize-Type_tag3@@": "Max av – använd den största cellens storlek i indatarastren. Det här är standardinställningen.",
	"@@ATanH_Cellsize-Type_tag4@@": "Medel av – använd den genomsnittliga cellstorleken i indatarastren.",
	"@@ATanH_Cellsize-Type_tag5@@": "Min. av – använd den minsta cellens storlek i indatarastren.",
	"@@ATanH_Extent-Type_tag0@@": "Välj vilken utbredning som ska användas i utdatarastret:",
	"@@ATanH_Extent-Type_tag1@@": "Först av – använd det första indatarastrets utbredning för att bestämma bearbetningsutbredningen.",
	"@@ATanH_Extent-Type_tag2@@": "Snittet mellan – använd de överlappande pixlarnas utbredning för att bestämma bearbetningsutbredningen. Det här är standardinställningen.",
	"@@ATanH_Extent-Type_tag3@@": "Sist av – använd det sista indatarastrets utbredning för att bestämma bearbetningsutbredningen.",
	"@@ATanH_Extent-Type_tag4@@": "Unionen av – använd alla rastrens utbredning för att bestämma bearbetningsutbredningen.",
	"@@ATanH_Raster_tag0@@": "De indata för vilka inverterad hyperbolisk tangens ska beräknas.",
	"@@Attribute-Table_Raster_tag0@@": "Indatarastret.",
	"@@Attribute-Table_Table-Type_tag0@@": "Indataattributtabellen kan anges med hjälp av den <strong>Manuell</strong>-typ där du tilldelar ett klassnamn och en färg för varje värde, eller du kan hänvisa till en befintlig tabell som kommer från en ${.dbf}-fil.",
	"@@Band-Arithmetic_Band-Indexes_tag0@@": "Definiera din bandaritmetiska formel om du valde <strong>Användardefinierad</strong> för din <strong>Metod</strong>.",
	"@@Band-Arithmetic_Band-Indexes_tag5@@": "Om du väljer ett fördefinierat index för din <strong>Metod</strong>, definierar du de rätta banden i ditt indatarasters dataset som motsvarar indexet.",
	"@@Band-Arithmetic_Method_tag0@@": "Den typ av bandaritmetisk algoritm som du vill använda. Du kan definiera dina egen algoritm eller välja ett fördefinierat index.",
	"@@Band-Arithmetic_Method_tag1@@": "<strong>BAI</strong>--Burn Area Index",
	"@@Band-Arithmetic_Method_tag2@@": "<strong>CIg</strong>--Chlorophyll Index - Green",
	"@@Band-Arithmetic_Method_tag3@@": "<strong>CIre</strong>--Chlorophyll Index - Red Edge",
	"@@Band-Arithmetic_Method_tag4@@": "<strong>Clay Minerals</strong>--Clay Minerals Ratio",
	"@@Band-Arithmetic_Method_tag5@@": "<strong>EVI</strong>--Enhanced Vegetation Index",
	"@@Band-Arithmetic_Method_tag6@@": "<strong>Ferrous Minerals</strong>--Ferrous Minerals Ratio",
	"@@Band-Arithmetic_Method_tag7@@": "<strong>GEMI</strong>--Global Environmental Monitoring Index",
	"@@Band-Arithmetic_Method_tag8@@": "<strong>GNDVI</strong>--Green Normalized Difference Vegetation Index",
	"@@Band-Arithmetic_Method_tag9@@": "<strong>GVI (Landsat TM)</strong>--Green Vegetation Index Landsat TM",
	"@@Band-Arithmetic_Method_tag10@@": "<strong>Iron Oxide</strong>--Iron Oxide Ratio",
	"@@Band-Arithmetic_Method_tag11@@": "<strong>MNDWI</strong>--Modified Normalized Difference Water Index",
	"@@Band-Arithmetic_Method_tag12@@": "<strong>MTVI2</strong>--Modified Triangulated Vegetation Index (andra upprepningen)",
	"@@Band-Arithmetic_Method_tag13@@": "<strong>Modified SAVI</strong>--Modified Soil Adjusted Vegetation Index",
	"@@Band-Arithmetic_Method_tag14@@": "<strong>NBR</strong>--Normalized Burn Ratio Index",
	"@@Band-Arithmetic_Method_tag15@@": "<strong>NDBI</strong>--Normalized Difference Built-up Index",
	"@@Band-Arithmetic_Method_tag16@@": "<strong>NDMI</strong>--Normalized Difference Moisture Index",
	"@@Band-Arithmetic_Method_tag17@@": "<strong>NDSI</strong>--Normalized Difference Snow Index",
	"@@Band-Arithmetic_Method_tag18@@": "<strong>NDVI</strong>--Normalized Difference Vegetation Index",
	"@@Band-Arithmetic_Method_tag19@@": "<strong>NDVIre</strong>--Red-Edge Normalized Difference Vegetation Index",
	"@@Band-Arithmetic_Method_tag20@@": "<strong>NDWI</strong>--Normalized Difference Water Index",
	"@@Band-Arithmetic_Method_tag21@@": "<strong>PVI</strong>--Perpendicular Vegetation Index",
	"@@Band-Arithmetic_Method_tag22@@": "<strong>RTVICore</strong>--Red-Edge Triangulated Vegetation Index",
	"@@Band-Arithmetic_Method_tag23@@": "<strong>SAVI</strong>--Soil Adjusted Vegetation Index",
	"@@Band-Arithmetic_Method_tag24@@": "<strong>SR</strong>--Simple Ratio",
	"@@Band-Arithmetic_Method_tag25@@": "<strong>SRre</strong>--Red-Edge Simple Ratio",
	"@@Band-Arithmetic_Method_tag26@@": "<strong>Sultan's Formula</strong>--Sultan's Formula",
	"@@Band-Arithmetic_Method_tag27@@": "<strong>Transformed SAVI</strong>--Transformed Soil Adjusted Vegetation Index",
	"@@Band-Arithmetic_Method_tag28@@": "<strong>Användardefinierad</strong>--Ger dig möjlighet att definiera ditt eget bandaritmetiska uttryck.",
	"@@Band-Arithmetic_Method_tag29@@": "<strong>VARI</strong>--Visible Atmospherically Resistant Index",
	"@@Band-Arithmetic_Method_tag30@@": "<strong>WNDWI</strong>--Weighted Normalized Difference Water Index",
	"@@Band-Arithmetic_Raster_tag0@@": "Indatarastret.",
	"@@Binary-Thresholding_Raster_tag0@@": "Indatarastret.",
	"@@Bitwise-And_Cellsize-Type_tag0@@": "Välj vilka celler som ska användas i utdatarastret. Om alla indatacellernas storlekar är identiska ger alla alternativen samma resultat.",
	"@@Bitwise-And_Cellsize-Type_tag1@@": "Först av – använd den första cellens storlek i indatarastren.",
	"@@Bitwise-And_Cellsize-Type_tag2@@": "Sist av – använd den sista cellens storlek i indatarastren.",
	"@@Bitwise-And_Cellsize-Type_tag3@@": "Max av – använd den största cellens storlek i indatarastren. Det här är standardinställningen.",
	"@@Bitwise-And_Cellsize-Type_tag4@@": "Medel av – använd den genomsnittliga cellstorleken i indatarastren.",
	"@@Bitwise-And_Cellsize-Type_tag5@@": "Min. av – använd den minsta cellens storlek i indatarastren.",
	"@@Bitwise-And_Extent-Type_tag0@@": "Välj vilken utbredning som ska användas i utdatarastret:",
	"@@Bitwise-And_Extent-Type_tag1@@": "Först av – använd det första indatarastrets utbredning för att bestämma bearbetningsutbredningen.",
	"@@Bitwise-And_Extent-Type_tag2@@": "Snittet mellan – använd de överlappande pixlarnas utbredning för att bestämma bearbetningsutbredningen. Det här är standardinställningen.",
	"@@Bitwise-And_Extent-Type_tag3@@": "Sist av – använd det sista indatarastrets utbredning för att bestämma bearbetningsutbredningen.",
	"@@Bitwise-And_Extent-Type_tag4@@": "Unionen av – använd alla rastrens utbredning för att bestämma bearbetningsutbredningen.",
	"@@Bitwise-And_Raster_tag0@@": "Indata nummer ett som ska användas i denna bitvisa åtgärd.",
	"@@Bitwise-And_Raster_tag1@@": "Ett konstant värde kan användas som indata för denna parameter, förutsatt att ett raster anges för den andra parametern.",
	"@@Bitwise-And_Raster2_tag0@@": "Indata nummer två som ska användas i denna bitvisa åtgärd.",
	"@@Bitwise-And_Raster2_tag1@@": "Ett konstant värde kan användas som indata för denna parameter, förutsatt att ett raster anges för den andra parametern.",
	"@@Bitwise-Left-Shift_Cellsize-Type_tag0@@": "Välj vilka celler som ska användas i utdatarastret. Om alla indatacellernas storlekar är identiska ger alla alternativen samma resultat.",
	"@@Bitwise-Left-Shift_Cellsize-Type_tag1@@": "Först av – använd den första cellens storlek i indatarastren.",
	"@@Bitwise-Left-Shift_Cellsize-Type_tag2@@": "Sist av – använd den sista cellens storlek i indatarastren.",
	"@@Bitwise-Left-Shift_Cellsize-Type_tag3@@": "Max av – använd den största cellens storlek i indatarastren. Det här är standardinställningen.",
	"@@Bitwise-Left-Shift_Cellsize-Type_tag4@@": "Medel av – använd den genomsnittliga cellstorleken i indatarastren.",
	"@@Bitwise-Left-Shift_Cellsize-Type_tag5@@": "Min. av – använd den minsta cellens storlek i indatarastren.",
	"@@Bitwise-Left-Shift_Extent-Type_tag0@@": "Välj vilken utbredning som ska användas i utdatarastret:",
	"@@Bitwise-Left-Shift_Extent-Type_tag1@@": "Först av – använd det första indatarastrets utbredning för att bestämma bearbetningsutbredningen.",
	"@@Bitwise-Left-Shift_Extent-Type_tag2@@": "Snittet mellan – använd de överlappande pixlarnas utbredning för att bestämma bearbetningsutbredningen. Det här är standardinställningen.",
	"@@Bitwise-Left-Shift_Extent-Type_tag3@@": "Sist av – använd det sista indatarastrets utbredning för att bestämma bearbetningsutbredningen.",
	"@@Bitwise-Left-Shift_Extent-Type_tag4@@": "Unionen av – använd alla rastrens utbredning för att bestämma bearbetningsutbredningen.",
	"@@Bitwise-Left-Shift_Raster_tag0@@": "De indata som flyttningen ska utföras på.",
	"@@Bitwise-Left-Shift_Raster_tag1@@": "Ett konstant värde kan användas som indata för denna parameter, förutsatt att ett raster anges för den andra parametern.",
	"@@Bitwise-Left-Shift_Raster2_tag0@@": "De indata som definierar antalet positioner som bitarna ska flyttas.",
	"@@Bitwise-Left-Shift_Raster2_tag1@@": "Ett konstant värde kan användas som indata för denna parameter, förutsatt att ett raster anges för den andra parametern.",
	"@@Bitwise-Not_Cellsize-Type_tag0@@": "Välj vilka celler som ska användas i utdatarastret. Om alla indatacellernas storlekar är identiska ger alla alternativen samma resultat.",
	"@@Bitwise-Not_Cellsize-Type_tag1@@": "Först av – använd den första cellens storlek i indatarastren.",
	"@@Bitwise-Not_Cellsize-Type_tag2@@": "Sist av – använd den sista cellens storlek i indatarastren.",
	"@@Bitwise-Not_Cellsize-Type_tag3@@": "Max av – använd den största cellens storlek i indatarastren. Det här är standardinställningen.",
	"@@Bitwise-Not_Cellsize-Type_tag4@@": "Medel av – använd den genomsnittliga cellstorleken i indatarastren.",
	"@@Bitwise-Not_Cellsize-Type_tag5@@": "Min. av – använd den minsta cellens storlek i indatarastren.",
	"@@Bitwise-Not_Extent-Type_tag0@@": "Välj vilken utbredning som ska användas i utdatarastret:",
	"@@Bitwise-Not_Extent-Type_tag1@@": "Först av – använd det första indatarastrets utbredning för att bestämma bearbetningsutbredningen.",
	"@@Bitwise-Not_Extent-Type_tag2@@": "Snittet mellan – använd de överlappande pixlarnas utbredning för att bestämma bearbetningsutbredningen. Det här är standardinställningen.",
	"@@Bitwise-Not_Extent-Type_tag3@@": "Sist av – använd det sista indatarastrets utbredning för att bestämma bearbetningsutbredningen.",
	"@@Bitwise-Not_Extent-Type_tag4@@": "Unionen av – använd alla rastrens utbredning för att bestämma bearbetningsutbredningen.",
	"@@Bitwise-Not_Raster_tag0@@": "Det indataraster som Bitvist Not-åtgärden (komplement) ska utföras på.",
	"@@Bitwise-Or_Cellsize-Type_tag0@@": "Välj vilka celler som ska användas i utdatarastret. Om alla indatacellernas storlekar är identiska ger alla alternativen samma resultat.",
	"@@Bitwise-Or_Cellsize-Type_tag1@@": "Först av – använd den första cellens storlek i indatarastren.",
	"@@Bitwise-Or_Cellsize-Type_tag2@@": "Sist av – använd den sista cellens storlek i indatarastren.",
	"@@Bitwise-Or_Cellsize-Type_tag3@@": "Max av – använd den största cellens storlek i indatarastren. Det här är standardinställningen.",
	"@@Bitwise-Or_Cellsize-Type_tag4@@": "Medel av – använd den genomsnittliga cellstorleken i indatarastren.",
	"@@Bitwise-Or_Cellsize-Type_tag5@@": "Min. av – använd den minsta cellens storlek i indatarastren.",
	"@@Bitwise-Or_Extent-Type_tag0@@": "Välj vilken utbredning som ska användas i utdatarastret:",
	"@@Bitwise-Or_Extent-Type_tag1@@": "Först av – använd det första indatarastrets utbredning för att bestämma bearbetningsutbredningen.",
	"@@Bitwise-Or_Extent-Type_tag2@@": "Snittet mellan – använd de överlappande pixlarnas utbredning för att bestämma bearbetningsutbredningen. Det här är standardinställningen.",
	"@@Bitwise-Or_Extent-Type_tag3@@": "Sist av – använd det sista indatarastrets utbredning för att bestämma bearbetningsutbredningen.",
	"@@Bitwise-Or_Extent-Type_tag4@@": "Unionen av – använd alla rastrens utbredning för att bestämma bearbetningsutbredningen.",
	"@@Bitwise-Or_Raster_tag0@@": "Indata nummer ett som ska användas i denna bitvisa åtgärd.",
	"@@Bitwise-Or_Raster_tag1@@": "Ett konstant värde kan användas som indata för denna parameter, förutsatt att ett raster anges för den andra parametern.",
	"@@Bitwise-Or_Raster2_tag0@@": "Indata nummer två som ska användas i denna bitvisa åtgärd.",
	"@@Bitwise-Or_Raster2_tag1@@": "Ett konstant värde kan användas som indata för denna parameter, förutsatt att ett raster anges för den andra parametern.",
	"@@Bitwise-Right-Shift_Cellsize-Type_tag0@@": "Välj vilka celler som ska användas i utdatarastret. Om alla indatacellernas storlekar är identiska ger alla alternativen samma resultat.",
	"@@Bitwise-Right-Shift_Cellsize-Type_tag1@@": "Först av – använd den första cellens storlek i indatarastren.",
	"@@Bitwise-Right-Shift_Cellsize-Type_tag2@@": "Sist av – använd den sista cellens storlek i indatarastren.",
	"@@Bitwise-Right-Shift_Cellsize-Type_tag3@@": "Max av – använd den största cellens storlek i indatarastren. Det här är standardinställningen.",
	"@@Bitwise-Right-Shift_Cellsize-Type_tag4@@": "Medel av – använd den genomsnittliga cellstorleken i indatarastren.",
	"@@Bitwise-Right-Shift_Cellsize-Type_tag5@@": "Min. av – använd den minsta cellens storlek i indatarastren.",
	"@@Bitwise-Right-Shift_Extent-Type_tag0@@": "Välj vilken utbredning som ska användas i utdatarastret:",
	"@@Bitwise-Right-Shift_Extent-Type_tag1@@": "Först av – använd det första indatarastrets utbredning för att bestämma bearbetningsutbredningen.",
	"@@Bitwise-Right-Shift_Extent-Type_tag2@@": "Snittet mellan – använd de överlappande pixlarnas utbredning för att bestämma bearbetningsutbredningen. Det här är standardinställningen.",
	"@@Bitwise-Right-Shift_Extent-Type_tag3@@": "Sist av – använd det sista indatarastrets utbredning för att bestämma bearbetningsutbredningen.",
	"@@Bitwise-Right-Shift_Extent-Type_tag4@@": "Unionen av – använd alla rastrens utbredning för att bestämma bearbetningsutbredningen.",
	"@@Bitwise-Right-Shift_Raster_tag0@@": "De indata som flyttningen ska utföras på.",
	"@@Bitwise-Right-Shift_Raster_tag1@@": "Ett konstant värde kan användas som indata för denna parameter, förutsatt att ett raster anges för den andra parametern.",
	"@@Bitwise-Right-Shift_Raster2_tag0@@": "De indata som definierar antalet positioner som bitarna ska flyttas.",
	"@@Bitwise-Right-Shift_Raster2_tag1@@": "Ett konstant värde kan användas som indata för denna parameter, förutsatt att ett raster anges för den andra parametern.",
	"@@Bitwise-Xor_Cellsize-Type_tag0@@": "Välj vilka celler som ska användas i utdatarastret. Om alla indatacellernas storlekar är identiska ger alla alternativen samma resultat.",
	"@@Bitwise-Xor_Cellsize-Type_tag1@@": "Först av – använd den första cellens storlek i indatarastren.",
	"@@Bitwise-Xor_Cellsize-Type_tag2@@": "Sist av – använd den sista cellens storlek i indatarastren.",
	"@@Bitwise-Xor_Cellsize-Type_tag3@@": "Max av – använd den största cellens storlek i indatarastren. Det här är standardinställningen.",
	"@@Bitwise-Xor_Cellsize-Type_tag4@@": "Medel av – använd den genomsnittliga cellstorleken i indatarastren.",
	"@@Bitwise-Xor_Cellsize-Type_tag5@@": "Min. av – använd den minsta cellens storlek i indatarastren.",
	"@@Bitwise-Xor_Extent-Type_tag0@@": "Välj vilken utbredning som ska användas i utdatarastret:",
	"@@Bitwise-Xor_Extent-Type_tag1@@": "Först av – använd det första indatarastrets utbredning för att bestämma bearbetningsutbredningen.",
	"@@Bitwise-Xor_Extent-Type_tag2@@": "Snittet mellan – använd de överlappande pixlarnas utbredning för att bestämma bearbetningsutbredningen. Det här är standardinställningen.",
	"@@Bitwise-Xor_Extent-Type_tag3@@": "Sist av – använd det sista indatarastrets utbredning för att bestämma bearbetningsutbredningen.",
	"@@Bitwise-Xor_Extent-Type_tag4@@": "Unionen av – använd alla rastrens utbredning för att bestämma bearbetningsutbredningen.",
	"@@Bitwise-Xor_Raster_tag0@@": "Indata nummer ett som ska användas i denna bitvisa åtgärd.",
	"@@Bitwise-Xor_Raster_tag1@@": "Ett konstant värde kan användas som indata för denna parameter, förutsatt att ett raster anges för den andra parametern.",
	"@@Bitwise-Xor_Raster2_tag0@@": "Indata nummer två som ska användas i denna bitvisa åtgärd.",
	"@@Bitwise-Xor_Raster2_tag1@@": "Ett konstant värde kan användas som indata för denna parameter, förutsatt att ett raster anges för den andra parametern.",
	"@@Boolean-and_Cellsize-Type_tag0@@": "Välj vilka celler som ska användas i utdatarastret. Om alla indatacellernas storlekar är identiska ger alla alternativen samma resultat.",
	"@@Boolean-and_Cellsize-Type_tag1@@": "Först av – använd den första cellens storlek i indatarastren.",
	"@@Boolean-and_Cellsize-Type_tag2@@": "Sist av – använd den sista cellens storlek i indatarastren.",
	"@@Boolean-and_Cellsize-Type_tag3@@": "Max av – använd den största cellens storlek i indatarastren. Det här är standardinställningen.",
	"@@Boolean-and_Cellsize-Type_tag4@@": "Medel av – använd den genomsnittliga cellstorleken i indatarastren.",
	"@@Boolean-and_Cellsize-Type_tag5@@": "Min. av – använd den minsta cellens storlek i indatarastren.",
	"@@Boolean-and_Extent-Type_tag0@@": "Välj vilken utbredning som ska användas i utdatarastret:",
	"@@Boolean-and_Extent-Type_tag1@@": "Först av – använd det första indatarastrets utbredning för att bestämma bearbetningsutbredningen.",
	"@@Boolean-and_Extent-Type_tag2@@": "Snittet mellan – använd de överlappande pixlarnas utbredning för att bestämma bearbetningsutbredningen. Det här är standardinställningen.",
	"@@Boolean-and_Extent-Type_tag3@@": "Sist av – använd det sista indatarastrets utbredning för att bestämma bearbetningsutbredningen.",
	"@@Boolean-and_Extent-Type_tag4@@": "Unionen av – använd alla rastrens utbredning för att bestämma bearbetningsutbredningen.",
	"@@Boolean-and_Raster_tag0@@": "Indata nummer ett som ska användas i denna booleska åtgärd.",
	"@@Boolean-and_Raster_tag1@@": "Ett konstant värde kan användas som indata för denna parameter, förutsatt att ett raster anges för den andra parametern.",
	"@@Boolean-and_Raster2_tag0@@": "Indata nummer två som ska användas i denna booleska åtgärd.",
	"@@Boolean-and_Raster2_tag1@@": "Ett konstant värde kan användas som indata för denna parameter, förutsatt att ett raster anges för den andra parametern.",
	"@@Boolean-Not_Cellsize-Type_tag0@@": "Välj vilka celler som ska användas i utdatarastret. Om alla indatacellernas storlekar är identiska ger alla alternativen samma resultat.",
	"@@Boolean-Not_Cellsize-Type_tag1@@": "Först av – använd den första cellens storlek i indatarastren.",
	"@@Boolean-Not_Cellsize-Type_tag2@@": "Sist av – använd den sista cellens storlek i indatarastren.",
	"@@Boolean-Not_Cellsize-Type_tag3@@": "Max av – använd den största cellens storlek i indatarastren. Det här är standardinställningen.",
	"@@Boolean-Not_Cellsize-Type_tag4@@": "Medel av – använd den genomsnittliga cellstorleken i indatarastren.",
	"@@Boolean-Not_Cellsize-Type_tag5@@": "Min. av – använd den minsta cellens storlek i indatarastren.",
	"@@Boolean-Not_Extent-Type_tag0@@": "Välj vilken utbredning som ska användas i utdatarastret:",
	"@@Boolean-Not_Extent-Type_tag1@@": "Först av – använd det första indatarastrets utbredning för att bestämma bearbetningsutbredningen.",
	"@@Boolean-Not_Extent-Type_tag2@@": "Snittet mellan – använd de överlappande pixlarnas utbredning för att bestämma bearbetningsutbredningen. Det här är standardinställningen.",
	"@@Boolean-Not_Extent-Type_tag3@@": "Sist av – använd det sista indatarastrets utbredning för att bestämma bearbetningsutbredningen.",
	"@@Boolean-Not_Extent-Type_tag4@@": "Unionen av – använd alla rastrens utbredning för att bestämma bearbetningsutbredningen.",
	"@@Boolean-Not_Raster_tag0@@": "Indata nummer ett som ska användas i denna booleska åtgärd.",
	"@@Boolean-Or_Cellsize-Type_tag0@@": "Välj vilka celler som ska användas i utdatarastret. Om alla indatacellernas storlekar är identiska ger alla alternativen samma resultat.",
	"@@Boolean-Or_Cellsize-Type_tag1@@": "Först av – använd den första cellens storlek i indatarastren.",
	"@@Boolean-Or_Cellsize-Type_tag2@@": "Sist av – använd den sista cellens storlek i indatarastren.",
	"@@Boolean-Or_Cellsize-Type_tag3@@": "Max av – använd den största cellens storlek i indatarastren. Det här är standardinställningen.",
	"@@Boolean-Or_Cellsize-Type_tag4@@": "Medel av – använd den genomsnittliga cellstorleken i indatarastren.",
	"@@Boolean-Or_Cellsize-Type_tag5@@": "Min. av – använd den minsta cellens storlek i indatarastren.",
	"@@Boolean-Or_Extent-Type_tag0@@": "Välj vilken utbredning som ska användas i utdatarastret:",
	"@@Boolean-Or_Extent-Type_tag1@@": "Först av – använd det första indatarastrets utbredning för att bestämma bearbetningsutbredningen.",
	"@@Boolean-Or_Extent-Type_tag2@@": "Snittet mellan – använd de överlappande pixlarnas utbredning för att bestämma bearbetningsutbredningen. Det här är standardinställningen.",
	"@@Boolean-Or_Extent-Type_tag3@@": "Sist av – använd det sista indatarastrets utbredning för att bestämma bearbetningsutbredningen.",
	"@@Boolean-Or_Extent-Type_tag4@@": "Unionen av – använd alla rastrens utbredning för att bestämma bearbetningsutbredningen.",
	"@@Boolean-Or_Raster_tag0@@": "Indata nummer ett som ska användas i denna booleska åtgärd.",
	"@@Boolean-Or_Raster_tag1@@": "Ett konstant värde kan användas som indata för denna parameter, förutsatt att ett raster anges för den andra parametern.",
	"@@Boolean-Or_Raster2_tag0@@": "Indata nummer två som ska användas i denna booleska åtgärd.",
	"@@Boolean-Or_Raster2_tag1@@": "Ett konstant värde kan användas som indata för denna parameter, förutsatt att ett raster anges för den andra parametern.",
	"@@Boolean-Xor_Cellsize-Type_tag0@@": "Välj vilka celler som ska användas i utdatarastret. Om alla indatacellernas storlekar är identiska ger alla alternativen samma resultat.",
	"@@Boolean-Xor_Cellsize-Type_tag1@@": "Först av – använd den första cellens storlek i indatarastren.",
	"@@Boolean-Xor_Cellsize-Type_tag2@@": "Sist av – använd den sista cellens storlek i indatarastren.",
	"@@Boolean-Xor_Cellsize-Type_tag3@@": "Max av – använd den största cellens storlek i indatarastren. Det här är standardinställningen.",
	"@@Boolean-Xor_Cellsize-Type_tag4@@": "Medel av – använd den genomsnittliga cellstorleken i indatarastren.",
	"@@Boolean-Xor_Cellsize-Type_tag5@@": "Min. av – använd den minsta cellens storlek i indatarastren.",
	"@@Boolean-Xor_Extent-Type_tag0@@": "Välj vilken utbredning som ska användas i utdatarastret:",
	"@@Boolean-Xor_Extent-Type_tag1@@": "Först av – använd det första indatarastrets utbredning för att bestämma bearbetningsutbredningen.",
	"@@Boolean-Xor_Extent-Type_tag2@@": "Snittet mellan – använd de överlappande pixlarnas utbredning för att bestämma bearbetningsutbredningen. Det här är standardinställningen.",
	"@@Boolean-Xor_Extent-Type_tag3@@": "Sist av – använd det sista indatarastrets utbredning för att bestämma bearbetningsutbredningen.",
	"@@Boolean-Xor_Extent-Type_tag4@@": "Unionen av – använd alla rastrens utbredning för att bestämma bearbetningsutbredningen.",
	"@@Boolean-Xor_Raster_tag0@@": "Indata nummer ett som ska användas i denna booleska åtgärd.",
	"@@Boolean-Xor_Raster_tag1@@": "Ett konstant värde kan användas som indata för denna parameter, förutsatt att ett raster anges för den andra parametern.",
	"@@Boolean-Xor_Raster2_tag0@@": "Indata nummer två som ska användas i denna booleska åtgärd.",
	"@@Boolean-Xor_Raster2_tag1@@": "Ett konstant värde kan användas som indata för denna parameter, förutsatt att ett raster anges för den andra parametern.",
	"@@Buffered_Raster_tag0@@": "Det indataraster som ska lagras i minnet.",
	"@@Calculator_Cellsize-Type_tag0@@": "Den cellstorlek som används till att skapa utdatarastret.",
	"@@Calculator_Cellsize-Type_tag1@@": "Du kan välja storlek på utdatacellen bland följande alternativ i listrutan:",
	"@@Calculator_Cellsize-Type_tag2@@": "<strong>Först av</strong> – Den första rastervariabelns cellstorlek.",
	"@@Calculator_Cellsize-Type_tag4@@": "<strong>Min av</strong> – Den minsta cellstorleken i indatarastren.",
	"@@Calculator_Cellsize-Type_tag6@@": "<strong>Max av</strong> – Den största cellstorleken i indatarastren.",
	"@@Calculator_Cellsize-Type_tag8@@": "<strong>Medelvärde av</strong> – Den genomsnittliga cellstorleken i indatarastren.",
	"@@Calculator_Cellsize-Type_tag10@@": "<strong>Sist av</strong> – Den sista rastervariabelns cellstorlek.",
	"@@Calculator_Cellsize-Type_tag12@@": "Standardvalet är <strong>Max av</strong>.",
	"@@Calculator_Expression_tag0@@": "Skapa ett algebrauttryck för geografisk analys på indata.",
	"@@Calculator_Expression_tag1@@": "Alla befintliga matematiska funktioner kan anropas för att skapa uttrycket. De tillgängliga operatorerna visas i listan nedan.",
	"@@Calculator_Expression_tag2@@": "Aritmetiska operationer",
	"@@Calculator_Expression_tag3@@": "Addition: +",
	"@@Calculator_Expression_tag4@@": "Division: /",
	"@@Calculator_Expression_tag5@@": "Modulo: %",
	"@@Calculator_Expression_tag6@@": "Multiplikation: *",
	"@@Calculator_Expression_tag7@@": "Potens: **",
	"@@Calculator_Expression_tag8@@": "Subtraktion: -",
	"@@Calculator_Expression_tag9@@": "Booleska operationer",
	"@@Calculator_Expression_tag10@@": "Booleskt And: &&",
	"@@Calculator_Expression_tag11@@": "Booleskt Or: ||",
	"@@Calculator_Expression_tag12@@": "Relationsoperationer",
	"@@Calculator_Expression_tag13@@": "Lika med: ==",
	"@@Calculator_Expression_tag14@@": "Större än: >",
	"@@Calculator_Expression_tag15@@": "Större än eller lika med: >=",
	"@@Calculator_Expression_tag16@@": "Mindre än: <",
	"@@Calculator_Expression_tag17@@": "Mindre än eller lika med: <=",
	"@@Calculator_Expression_tag18@@": "Inte lika med: !=",
	"@@Calculator_Expression_tag19@@": "Ytterligare operationer",
	"@@Calculator_Expression_tag20@@": "Minimum av två raster enligt en bedömning som görs per pixel: min(a,b)",
	"@@Calculator_Expression_tag21@@": "Maximum av två raster enligt en bedömning som görs per pixel: max(a,b)",
	"@@Calculator_Expression_tag22@@": "Här är några exempel på uttryck:",
	"@@Calculator_Expression_tag23@@": "Enkelt villkorsuttryck: Hitta höjdvärden över 4 000 meter i ett raster (betecknat med T) och ge dessa områden värdet 1 och alla andra områden värdet 0.",
	"@@Calculator_Expression_tag24@@": "Con(T > 4000, 1, 0)",
	"@@Calculator_Expression_tag25@@": "Kapslat villkorsuttryck: Hitta områden där lutningen (betecknad med b1) är mindre än 10 grader och NDVI (betecknat med b2) är över 0,5, och ge dessa områden värdet 1. Tilldela värdet 2 för alla andra områden om lutningen är över 10 grader och höjden (betecknad med b3) är över 2 500 fot. Alla andra områden ges värdet 3.",
	"@@Calculator_Expression_tag26@@": "Con((b1 < 10 && b2 > .5, 1, Con(b1 > 10 && b3 > 2500, 2, 3)))",
	"@@Calculator_extenttype_tag0@@": "<p>Välj vilken utbredning som ska användas i utdatarastret:</p><ul><li><p>Först av – använd det första indatarastrets utbredning för att bestämma bearbetningsutbredningen.</p></li><li>Snittet mellan – använd de överlappande pixlarnas utbredning för att bestämma bearbetningsutbredningen. Det här är standardinställningen.</li><li>Unionen av – använd alla rastrens utbredning för att bestämma bearbetningsutbredningen.</li><li>Sist av – använd det sista indatarastrets utbredning för att bestämma bearbetningsutbredningen.</li></ul>",
	"@@Calculator_Raster-Variables_tag0@@": "Det användardefinierade variabelnamnet och indatarastret.",
	"@@Classify_Input-Definition-File_tag0@@": "Indatadefinitionsfilen för Esri-klassificerare (${.ecd}), som innehåller statistik och annan klassificeringsinformation för det specifika datasetet, samt valda attribut.",
	"@@Classify_Raster_tag0@@": "Det rasterdataset som du vill klassificera.",
	"@@Classify_Raster2_tag0@@": "Ett valfritt underordnat rasterdataset som kan integreras i klassificeraren, till exempel en segmenterad bild, en multispektral bild eller höjddata, som kan användas till att generera en robustare klassificeringsdefinition för ditt dataset. Rasterdatasetet för denna parameter måste matcha det dataset som används för att skapa indatadefinitionsfilen för Esri-klassificerare.",
	"@@Clip_Clipping-Geometry-or-Raster_tag0@@": "Följande kan användas för att ange klippningsutbredningen:",
	"@@Clip_Clipping-Geometry-or-Raster_tag1@@": "<strong>Klippningsraster</strong> – Klippningsrastrets utbredning",
	"@@Clip_Clipping-Geometry-or-Raster_tag3@@": "<strong>Anpassad utbredning</strong> – De högsta och lägsta X- och Y-koordinaterna",
	"@@Clip_Clipping-Geometry-or-Raster_tag5@@": "<strong>Aktuell kartutbredning</strong> – Den aktuella kartvisningens utbredning",
	"@@Clip_Clipping-Raster_tag0@@": "Det rasterlager som ska användas för klippning.",
	"@@Clip_Clipping-Type_tag0@@": "Ange om du vill bevara området innanför eller utanför klippningsgeometrin.",
	"@@Clip_Clipping-Type_tag1@@": "<strong>Klipp innanför</strong> – Bilder inuti klippningsutbredningen tas bort.",
	"@@Clip_Clipping-Type_tag3@@": "<strong>Klipp utanför</strong> – Bilder utanför klippningsutbredningen tas bort.",
	"@@Clip_Custom-Extent_tag0@@": "Ange de fyra koordinater som definierar utbredningen för den begränsningsruta som används för att klippa rastret.",
	"@@Clip_Output-Extent_tag0@@": "X- och y-koordinaterna för den aktuella klippningsutbredningen.",
	"@@Clip_Output-Extent_tag1@@": "<strong>Samla in aktuell kartutbredning</strong>-knappen använder den aktiva kartans visningsutbredning.",
	"@@Clip_Raster_tag0@@": "Indatarasterlagret.",
	"@@Clip_Use-Input-Features-for-Clipping-Geometry_tag0@@": "När detta markeras klipps data enligt den angivna geoobjektklassens geometri.",
	"@@Clip_Use-Input-Features-for-Clipping-Geometry_tag1@@": "Avmarkerad – funktionen använder den klippningsgeometri som anges av <strong>Rektangel</strong>. Det här är standardinställningen.",
	"@@Clip_Use-Input-Features-for-Clipping-Geometry_tag4@@": "Avmarkerad – funktionen använder den klippningsgeometri som anges av en geoobjektklass.",
	"@@Color-Model-Conversion_Conversion-Type_tag0@@": "Den typ av färgkonvertering som ska utföras:",
	"@@Color-Model-Conversion_Conversion-Type_tag1@@": "HSV till RGB",
	"@@Color-Model-Conversion_Conversion-Type_tag2@@": "RGB till HSV",
	"@@Color-Model-Conversion_Raster_tag0@@": "Indatarastret.",
	"@@Colormap_Color-Ramp_tag0@@": "Välj en befintlig färgramp.",
	"@@Colormap_Color-Scheme-Type_tag0@@": "Välj den typ av färgschema som ska användas för att rendera ditt indataraster",
	"@@Colormap_Color-Scheme-Type_tag1@@": "Färgramp – använd en färgramp.",
	"@@Colormap_Color-Scheme-Type_tag2@@": "Färgkarta – använd en befintlig färgkarta.",
	"@@Colormap_Colormap_tag0@@": "Följande standardfärgkartor är tillgängliga i listrutan:",
	"@@Colormap_Colormap_tag1@@": "Höjd över havet – en färgkarta som gradvis övergår från cyan över lila till svart.",
	"@@Colormap_Colormap_tag2@@": "Grå – en färgkarta som gradvis övergår från svart till vitt.",
	"@@Colormap_Colormap_tag7@@": "Terrängskuggning -- en färgkarta i gråskala som ska visualisera en 3D-representation av terrängytan med hänsyn tagen till solens relativa position för att skugga bilden.",
	"@@Colormap_Colormap_tag3@@": "NDVI – en färgkarta för att visualisera vegetation. Värden nära noll är blå. Låga värden är bruna. Sedan övergår färgerna gradvis från rött till orange, till gult, till grönt och till svart allt eftersom vegetationsindexet går från lågt till högt.",
	"@@Colormap_Colormap_tag4@@": "NDVI2 – en färgkarta för att visualisera vegetation. Låga värden sträcker sig från vitt till grönt. Sedan övergår färgerna gradvis från rött till orange, till gult, till grönt och till svart allt eftersom vegetationsindexet går från lågt till högt.",
	"@@Colormap_Colormap_tag5@@": "NDVI3 – en färgkarta för att visualisera vegetation. Värden nära noll är blå. Sedan övergår färgerna gradvis från rött över orange till grönt allt eftersom vegetationsindexet går från lågt till högt.",
	"@@Colormap_Colormap_tag6@@": "Slumpmässig – en slumpmässig färgkarta.",
	"@@Colormap_Raster_tag0@@": "Indatarastret.",
	"@@Colormap-To-RGB_Raster_tag0@@": "Det färgkarteraster som används som indata.",
	"@@Complex_Raster_tag0@@": "Indatarastret.",
	"@@Composite-Bands_Rasters_tag0@@": "Använd listrutan eller <strong>Bläddra</strong>-knappen för att välja rasterindata.",
	"@@Composite-Bands_cellsizetype_tag0@@": "<p>Välj vilken cellstorlek som ska användas i utdatarastret. Om alla indatacellernas storlekar är identiska ger alla alternativen samma resultat.</p><ul><li>Först av – använd den första cellens storlek i indatarastren.</li><li>Min. av – använd den minsta cellens storlek i alla indataraster.</li><li>Max av – använd den största cellens storlek i alla indataraster. Det här är standardinställningen.</li><li>Medel av – använd den genomsnittliga cellstorleken i alla indataraster.</li><li>Sist av – använd den sista cellens storlek i indatarastren.</li></ul>",
	"@@Con-function_Cellsize-Type_tag0@@": "Välj vilka celler som ska användas i utdatarastret. Om alla indatacellernas storlekar är identiska ger alla alternativen samma resultat.",
	"@@Con-function_Cellsize-Type_tag1@@": "Först av – använd den första cellens storlek i indatarastren.",
	"@@Con-function_Cellsize-Type_tag2@@": "Sist av – använd den sista cellens storlek i indatarastren.",
	"@@Con-function_Cellsize-Type_tag3@@": "Max av – använd den största cellens storlek i indatarastren. Det här är standardinställningen.",
	"@@Con-function_Cellsize-Type_tag4@@": "Medel av – använd den genomsnittliga cellstorleken i indatarastren.",
	"@@Con-function_Cellsize-Type_tag5@@": "Min. av – använd den minsta cellens storlek i indatarastren.",
	"@@Con_Extent-Type_tag0@@": "Välj vilken utbredning som ska användas i utdatarastret:",
	"@@Con_Extent-Type_tag1@@": "Först av – använd det första indatarastrets utbredning för att bestämma bearbetningsutbredningen.",
	"@@Con_Extent-Type_tag2@@": "Snittet mellan – använd de överlappande pixlarnas utbredning för att bestämma bearbetningsutbredningen. Det här är standardinställningen.",
	"@@Con_Extent-Type_tag3@@": "Sist av – använd det sista indatarastrets utbredning för att bestämma bearbetningsutbredningen.",
	"@@Con_Extent-Type_tag4@@": "Unionen av – använd alla rastrens utbredning för att bestämma bearbetningsutbredningen.",
	"@@Con_False-Raster_tag0@@": "De indata vilkas värden ska användas som utdatapixelvärden om villkoret är falskt. Det kan vara ett heltal, ett flyttalsraster eller ett konstant värde.",
	"@@Con_Raster_tag0@@": "Det indataraster som representerar det booleska resultatet av en logisk-matematisk rasterfunktion. Värdena kommer att vara antingen 1 (sant) eller 0 (falskt). Det kan vara ett heltal eller ett flyttalsraster.",
	"@@Con_True-Raster_tag0@@": "De indata vilkas värden ska användas som utdatapixelvärden om villkoret är sant. Det kan vara ett heltal, ett flyttalsraster eller ett konstant värde.",
	"@@Constant_Constant_tag0@@": "Konstantens värde adderas till det virtuella rastret.",
	"@@Constant_Raster-Info_tag0@@": "Använd <strong>Ladda mallraster</strong>-knappen för att läsa in en mall från en katalog eller portal.",
	"@@Contour_Adaptive-Smoothing_tag0@@": "Hur mycket utjämning som ska användas på höjdkurvelinjen. Standardvärdet är 2,5.",
	"@@Contour_Adaptive-Smoothing_tag1@@": "Ett lägre värde ger en höjdkurvelinje med mer granularitet och mindre utjämning, medan ett högre värde ger en höjdkurvelinje med mer utjämning som därför ser mindre kantig ut.",
	"@@Contour_Contour-Interval_tag0@@": "Skillnaden i höjd mellan höjdkurvelinjer.",
	"@@Contour_Contour-Interval_tag1@@": "Ett litet höjdkurveintervall används i relativt plana områden, medan större höjdkurveintervall används i varierande eller bergig terräng.",
	"@@Contour_Contour-Type_tag0@@": "Typen av höjdkurva som ska skapas.",
	"@@Contour_Contour-Type_tag1@@": "<strong>Höjdkurvefyllning</strong> – Fyller utrymmet mellan varje höjdkurvelinje med kvantiserade höjdvärden.",
	"@@Contour_Contour-Type_tag3@@": "<strong>Höjdkurvelinjer</strong> – Binder samma punkter med samma höjd över havet för att skapa en linje som representerar konstant höjd över havet.",
	"@@Contour_Contour-Type_tag5@@": "<strong>Endast jämn yta</strong> – Utjämnar indatahöjdlagret men producerar inte höjdkurvor.",
	"@@Contour_Nth-Contour-Line-In-Bold_tag0@@": "Indexhöjdkurvan, som visas med en fetstilt linje.",
	"@@Contour_Nth-Contour-Line-In-Bold_tag1@@": "Standardvärdet är 5: var 5:e höjdkurvelinje är fetstilt.",
	"@@Contour_Number-Of-Contours_tag0@@": "Antalet höjdkurvor som ska genereras i visningen. Detta justerar höjdkurveintervallet dynamiskt för att passa terrängen i bilden samtidigt som standardiserade intervall bevaras, t.ex. 1, 5, 10 och så vidare.",
	"@@Contour_Raster_tag0@@": "Ett enstaka dataset med bandrasterhöjder.",
	"@@Contour_Z-Base_tag0@@": "Bashöjdkurvans värde. Höjdkurvorna genereras över och under detta värde alltefter behov för att täcka hela indatarastrets intervall. Standard är 0.",
	"@@Contour_Z-Base_tag1@@": "Värdet 0 representerar ofta medelvattenståndet, beroende på källan höjddatasetet.",
	"@@Contour_Z-Factor_tag0@@": "Den konverteringsfaktor för enheter som används när du genererar höjdkurvor. Standardvärdet är 1.",
	"@@Contour_Z-Factor_tag1@@": "Höjdkurvelinjerna genereras baserat på z-värdena i indatarastret, vilka ofta mäts i meter eller fot. Med standardvärdet 1 får höjdkurvorna samma enheter som z-värdena indatarastret. Om du vill skapa höjdkurvor i en annan enhet än z-värdenas, anger du ett lämpligt värde för z-faktorn. Observera att det inte är nödvändigt att markens x- och y- och ytans z-enheter stämmer överens i detta verktyg.",
	"@@Contour_Z-Factor_tag2@@": "Om till exempel höjdvärdena i ditt indataraster uttrycks i fot, men du vill att höjdkurvorna ska genereras i meter, ställer du in z-faktorn på 0,3048 (eftersom 1 fot = 0,3048 meter).",
	"@@Contrast-and-Brightness_Brightness-Offset_tag0@@": "Justera rasterlagrets ljusstyrka.",
	"@@Contrast-and-Brightness_Brightness-Offset_tag1@@": "Du kan ändra ljusstyrkans förskjutning med skjutreglaget eller genom att skriva ett värde.",
	"@@Contrast-and-Brightness_Contrast-Offset_tag0@@": "Justera rasterlagrets kontrast.",
	"@@Contrast-and-Brightness_Contrast-Offset_tag1@@": "Du kan använda skjutreglaget när du ska ändra kontrastförskjutningen, men du kan också skriva in ett värde.",
	"@@Contrast-and-Brightness_Raster_tag0@@": "Det indataraster som ljusstyrkan och kontrasten ska redigeras på.",
	"@@Convolution_kernel_tag0@@": "<p>Den här tabellen visar hur varje pixel kommer att viktas i filtreringsprocessen. Den här tabellen kan redigeras om du väljer<strong>Användardefinierad</strong>som<strong>Typ</strong>.</p>",
	"@@Convolution_Raster_tag0@@": "Indatarasterdataset.",
	"@@Convolution_Type_tag0@@": "Välj den typ av filtrering som du vill utföra. Det finns alternativ för att göra en bild skarpare eller suddigare och för att hitta gränser i bilden, och du kan definiera ditt eget kärnbaserade filter",
	"@@Corridor_Distance-Raster-1_tag0@@": "Det första indatadistansrastret. Det bör vara ett ackumulerat resultat för avståndskostnad från Kostnad för avstånd eller Ruttavstånd.",
	"@@Corridor_Distance-Raster-2_tag0@@": "Det andra indatadistansrastret. Det bör vara ett ackumulerat resultat för avståndskostnad från Kostnad för avstånd eller Ruttavstånd.",
	"@@Cos_Cellsize-Type_tag0@@": "Välj vilka celler som ska användas i utdatarastret. Om alla indatacellernas storlekar är identiska ger alla alternativen samma resultat.",
	"@@Cos_Cellsize-Type_tag1@@": "Först av – använd den första cellens storlek i indatarastren.",
	"@@Cos_Cellsize-Type_tag2@@": "Sist av – använd den sista cellens storlek i indatarastren.",
	"@@Cos_Cellsize-Type_tag3@@": "Max av – använd den största cellens storlek i indatarastren. Det här är standardinställningen.",
	"@@Cos_Cellsize-Type_tag4@@": "Medel av – använd den genomsnittliga cellstorleken i indatarastren.",
	"@@Cos_Cellsize-Type_tag5@@": "Min. av – använd den minsta cellens storlek i indatarastren.",
	"@@Cos_Extent-Type_tag0@@": "Välj vilken utbredning som ska användas i utdatarastret:",
	"@@Cos_Extent-Type_tag1@@": "Först av – använd det första indatarastrets utbredning för att bestämma bearbetningsutbredningen.",
	"@@Cos_Extent-Type_tag2@@": "Snittet mellan – använd de överlappande pixlarnas utbredning för att bestämma bearbetningsutbredningen. Det här är standardinställningen.",
	"@@Cos_Extent-Type_tag3@@": "Sist av – använd det sista indatarastrets utbredning för att bestämma bearbetningsutbredningen.",
	"@@Cos_Extent-Type_tag4@@": "Unionen av – använd alla rastrens utbredning för att bestämma bearbetningsutbredningen.",
	"@@Cos_Raster_tag0@@": "De indata för vilka cosinus ska beräknas.",
	"@@CosH_Cellsize-Type_tag0@@": "Välj vilka celler som ska användas i utdatarastret. Om alla indatacellernas storlekar är identiska ger alla alternativen samma resultat.",
	"@@CosH_Cellsize-Type_tag1@@": "Först av – använd den första cellens storlek i indatarastren.",
	"@@CosH_Cellsize-Type_tag2@@": "Sist av – använd den sista cellens storlek i indatarastren.",
	"@@CosH_Cellsize-Type_tag3@@": "Max av – använd den största cellens storlek i indatarastren. Det här är standardinställningen.",
	"@@CosH_Cellsize-Type_tag4@@": "Medel av – använd den genomsnittliga cellstorleken i indatarastren.",
	"@@CosH_Cellsize-Type_tag5@@": "Min. av – använd den minsta cellens storlek i indatarastren.",
	"@@CosH_Extent-Type_tag0@@": "Välj vilken utbredning som ska användas i utdatarastret:",
	"@@CosH_Extent-Type_tag1@@": "Först av – använd det första indatarastrets utbredning för att bestämma bearbetningsutbredningen.",
	"@@CosH_Extent-Type_tag2@@": "Snittet mellan – använd de överlappande pixlarnas utbredning för att bestämma bearbetningsutbredningen. Det här är standardinställningen.",
	"@@CosH_Extent-Type_tag3@@": "Sist av – använd det sista indatarastrets utbredning för att bestämma bearbetningsutbredningen.",
	"@@CosH_Extent-Type_tag4@@": "Unionen av – använd alla rastrens utbredning för att bestämma bearbetningsutbredningen.",
	"@@CosH_Raster_tag0@@": "De indata för vilka hyperbolisk cosinus ska beräknas.",
	"@@Cost-Allocation_Accumulative-Cost-Resistance-Rate_tag0@@": "Denna parameter simulerar den ökade ansträngningen för att få bukt med kostnaderna när den ackumulerade kostnaden ökar. Den används för att modellera resenärens trötthet. Den ökande ackumulerade kostnaden för att nå en cell multipliceras med motståndskostnaden och läggs till i kostnaden för att flytta till nästa cell.",
	"@@Cost-Allocation_Accumulative-Cost-Resistance-Rate_tag1@@": "Det är en modifierad version av en formel för sammansatt ränta (ränta på ränta) som används för att beräkna den synliga kostnaden för att flytta genom en cell. Eftersom värdet av motståndskostnaden ökar, ökar kostnaden för de celler som besöks senare. Ju högre motståndskostnad, desto högre kostnad för att nå nästa cell, vilken läggs samman för varje efterföljande rörelse. Eftersom motståndskostnaden kan liknas vid en sammansatt ränta och eftersom ackumulerade kostnadsvärden i allmänhet är mycket stora, föreslås små motståndvärden, till exempel 0,005 eller ännu mindre, beroende på de ackumulerade kostnadsvärdena.",
	"@@Cost-Allocation_Accumulative-Cost-Resistance-Rate_tag2@@": "Värdet måste vara större än noll. Standardkapaciteten är till udatarastrets gräns.",
	"@@Cost-Allocation_Accumulative-Cost-Resistance-Rate_tag3@@": "Ett numeriskt värde (dubbelt) eller ett fält från <strong>Källraster</strong> kan användas för denna parameter.",
	"@@Cost-Allocation_Capacity_tag0@@": "Definierar resenärens kostnadskapaciteten för en källa. Kostnadsberäkningarna fortsätter för varje källa tills den angivna kapaciteten uppnås.",
	"@@Cost-Allocation_Capacity_tag1@@": "Värdet måste vara större än noll. Standardkapaciteten är till udatarastrets gräns.",
	"@@Cost-Allocation_Capacity_tag2@@": "Ett numeriskt värde (dubbelt) eller ett fält från <strong>Källraster</strong> kan användas för denna parameter.",
	"@@Cost-Allocation_Cost-Raster_tag0@@": "Ett obligatoriskt indataraster som definierar kostnaden eller impedansen för att flytta planimetriskt genom varje cell. Värdet i varje cellposition motsvarar kostnad-per-enhetsavståndet för att flytta genom cellen. Varje cellpositions värde multipliceras med cellupplösningen och kompenserar även för diagonal rörelse för att få fram den totala kostnaden för att passera genom cellen.",
	"@@Cost-Allocation_Cost-Raster_tag1@@": "Värdena <strong>Kostnadsraster</strong> kan vara heltal eller flyttal, men de kan inte vara negativa eller noll.",
	"@@Cost-Allocation_Maximum-Distance_tag0@@": "Tröskeln som de ackumulerade kostnadsvärdena inte får överstiga. Om en ackumulerad kostnad för ett avstånd överstiger detta värde kommer utdatavärdet för cellens placering att vara ${NoData}. Det maximala avståndet definierar den utbredning för vilken de ackumulerade avståndkostnaderna beräknas. Standardavståndet är till udatarastrets utbredning.",
	"@@Cost-Allocation_Multiplier-to-Apply-to-Costs_tag0@@": "En multiplikator som kan användas på kostnadsvärden.",
	"@@Cost-Allocation_Multiplier-to-Apply-to-Costs_tag1@@": "Denna parameter tillåter kontroll av färdläget eller magnituden vid en källa. Ju högre multiplikator, desto högre kostnad för att flytta igenom varje cell.",
	"@@Cost-Allocation_Multiplier-to-Apply-to-Costs_tag2@@": "Värdena måste vara större än noll. Standard är 1.",
	"@@Cost-Allocation_Multiplier-to-Apply-to-Costs_tag3@@": "Ett numeriskt värde (dubbelt) eller ett fält från <strong>Källraster</strong> kan användas för denna parameter.",
	"@@Cost-Allocation_Source-Field_tag0@@": "Det fält som används för att tilldela värden till källplatser. Det måste vara av heltalstyp. Om <strong>Värderaster</strong> har ställts in kommer värdena i dessa indata att ges företräde framför varje inställning för <strong>Källfält</strong>.",
	"@@Cost-Allocation_Source-Raster_tag0@@": "Det obligatoriska indatarastret med källplatser.",
	"@@Cost-Allocation_Source-Raster_tag1@@": "Detta är ett raster som identifierar de celler eller platser från vilka den lägsta ackumulerade avståndskostnaden för varje utdatacellplats beräknas.",
	"@@Cost-Allocation_Source-Raster_tag2@@": "Om <strong>Källraster</strong> för indata är ett flyttal måste <strong>Värderaster</strong> anges, och det måste vara ett heltal. <strong>Värderaster</strong> ges företräde framför alla eventuella inställningar av <strong>Källfält</strong>.",
	"@@Cost-Allocation_Start-Cost_tag0@@": "Startkostnaden från vilken kostnadsberäkningarna ska börja. Denna parameter tillåter specifikation av den fasta kostnaden som kan associeras med en källa. I stället för att börja på kostnaden 0, börjar kostnadsalgoritmen med det angivna värdet.",
	"@@Cost-Allocation_Start-Cost_tag1@@": "Värdet måste vara noll eller högre. Standard är 0.",
	"@@Cost-Allocation_Travel-Direction_tag0@@": "Definierar resenärens riktning vid användning av källans motståndskostnad och källans startkostnad.",
	"@@Cost-Allocation_Travel-Direction_tag1@@": "<strong>Från källa</strong> – Källans motståndskostnad och källans startkostnad kommer att användas med början vid indatakällan för att flytta ut till icke-källcellerna. Det här är standardinställningen.",
	"@@Cost-Allocation_Travel-Direction_tag3@@": "<strong>Till källa</strong> – Källans motståndskostnad och källans startkostnad kommer att användas med början vid varje icke-källcell för att flytta tillbaka till indatakällan.",
	"@@Cost-Allocation_Travel-Direction_tag5@@": "Ange antingen nyckelordet <strong>Från källa</strong> eller <strong>Till källa</strong>, som ska tillämpas på alla källor, eller ange ett fält i <strong>Källraster</strong> som innehåller de nyckelord som ska identifiera färdriktning för varje källa. Det fältet måste innehålla strängen ${FROM_SOURCE} eller ${TO_SOURCE}.",
	"@@Cost-Allocation_Value-Raster_tag0@@": "Indatarasterheltalet som identifierar de zonvärden som ska användas för varje indatakällplats. För varje källplatscell kommer det värdet som definieras av <strong>Värderaster</strong> att tilldelas till alla celler som allokerats till källplatsen för beräkningen. <strong>Värderaster</strong> ges företräde framför alla eventuella inställningar av <strong>Källfält</strong>.",
	"@@Cost-Back-Link_Accumulative-Cost-Resistance-Rate_tag0@@": "Denna parameter simulerar den ökade ansträngningen för att få bukt med kostnaderna när den ackumulerade kostnaden ökar. Den används för att modellera resenärens trötthet. Den ökande ackumulerade kostnaden för att nå en cell multipliceras med motståndskostnaden och läggs till i kostnaden för att flytta till nästa cell.",
	"@@Cost-Back-Link_Accumulative-Cost-Resistance-Rate_tag1@@": "Det är en modifierad version av en formel för sammansatt ränta (ränta på ränta) som används för att beräkna den synliga kostnaden för att flytta genom en cell. Eftersom värdet av motståndskostnaden ökar, ökar kostnaden för de celler som besöks senare. Ju högre motståndskostnad, desto högre kostnad för att nå nästa cell, vilken läggs samman för varje efterföljande rörelse. Eftersom motståndskostnaden kan liknas vid en sammansatt ränta och eftersom ackumulerade kostnadsvärden i allmänhet är mycket stora, föreslås små motståndvärden, till exempel 0,005 eller ännu mindre, beroende på de ackumulerade kostnadsvärdena.",
	"@@Cost-Back-Link_Accumulative-Cost-Resistance-Rate_tag2@@": "Värdet måste vara större än noll. Standardkapaciteten är till udatarastrets gräns.",
	"@@Cost-Back-Link_Accumulative-Cost-Resistance-Rate_tag3@@": "Ett numeriskt värde (dubbelt) eller ett fält från <strong>Källraster</strong> kan användas för denna parameter.",
	"@@Cost-Back-Link_Capacity_tag0@@": "Definierar resenärens kostnadskapaciteten för en källa. Kostnadsberäkningarna fortsätter för varje källa tills den angivna kapaciteten uppnås.",
	"@@Cost-Back-Link_Capacity_tag1@@": "Värdet måste vara större än noll. Standardkapaciteten är till udatarastrets gräns.",
	"@@Cost-Back-Link_Capacity_tag2@@": "Ett numeriskt värde (dubbelt) eller ett fält från <strong>Källraster</strong> kan användas för denna parameter.",
	"@@Cost-Back-Link_Cost-Raster_tag0@@": "Ett obligatoriskt indataraster som definierar kostnaden eller impedansen för att flytta planimetriskt genom varje cell. Värdet i varje cellposition motsvarar kostnad-per-enhetsavståndet för att flytta genom cellen. Varje cellpositions värde multipliceras med cellupplösningen och kompenserar även för diagonal rörelse för att få fram den totala kostnaden för att passera genom cellen.",
	"@@Cost-Back-Link_Cost-Raster_tag1@@": "Värdena <strong>Kostnadsraster</strong> kan vara heltal eller flyttal, men de kan inte vara negativa eller noll.",
	"@@Cost-Back-Link_Maximum-Distance_tag0@@": "Tröskeln som de ackumulerade kostnadsvärdena inte får överstiga. Om en ackumulerad kostnad för ett avstånd överstiger detta värde kommer utdatavärdet för cellens placering att vara NoData. Det maximala avståndet definierar den utbredning för vilken de ackumulerade avståndkostnaderna beräknas. Standardavståndet är till udatarastrets utbredning.",
	"@@Cost-Back-Link_Multiplier-to-Apply-to-Costs_tag0@@": "En multiplikator som kan användas på kostnadsvärden.",
	"@@Cost-Back-Link_Multiplier-to-Apply-to-Costs_tag1@@": "Denna parameter tillåter kontroll av färdläget eller magnituden vid en källa. Ju högre multiplikator, desto högre kostnad för att flytta igenom varje cell.",
	"@@Cost-Back-Link_Multiplier-to-Apply-to-Costs_tag2@@": "Värdena måste vara större än noll. Standard är 1.",
	"@@Cost-Back-Link_Multiplier-to-Apply-to-Costs_tag3@@": "Ett numeriskt värde (dubbelt) eller ett fält från <strong>Källraster</strong> kan användas för denna parameter.",
	"@@Cost-Back-Link_Source-Raster_tag0@@": "Det obligatoriska indatarastret med källplatser.",
	"@@Cost-Back-Link_Source-Raster_tag1@@": "Detta är ett raster som identifierar de celler eller platser från vilka den lägsta ackumulerade avståndskostnaden för varje utdatacellplats beräknas.",
	"@@Cost-Back-Link_Start-Cost_tag0@@": "Startkostnaden från vilken kostnadsberäkningarna ska börja. Denna parameter tillåter specifikation av den fasta kostnaden som kan associeras med en källa. I stället för att börja på kostnaden 0, börjar kostnadsalgoritmen med det angivna värdet.",
	"@@Cost-Back-Link_Start-Cost_tag1@@": "Värdet måste vara noll eller högre. Standard är 0.",
	"@@Cost-Back-Link_Travel-Direction_tag0@@": "Definierar resenärens riktning vid användning av källans motståndskostnad och källans startkostnad.",
	"@@Cost-Back-Link_Travel-Direction_tag1@@": "<strong>Från källa</strong> – Källans motståndskostnad och källans startkostnad kommer att användas med början vid indatakällan för att flytta ut till icke-källcellerna. Det här är standardinställningen.",
	"@@Cost-Back-Link_Travel-Direction_tag3@@": "<strong>Till källa</strong> – Källans motståndskostnad och källans startkostnad kommer att användas med början vid varje icke-källcell för att flytta tillbaka till indatakällan.",
	"@@Cost-Back-Link_Travel-Direction_tag5@@": "Ange antingen nyckelordet <strong>Från källa</strong> eller <strong>Till källa</strong>, som ska tillämpas på alla källor, eller ange ett fält i <strong>Källraster</strong> som innehåller de nyckelord som ska identifiera färdriktning för varje källa. Det fältet måste innehålla strängen ${FROM_SOURCE} eller ${TO_SOURCE}.",
	"@@Cost-Distance_Accumulative-Cost-Resistance-Rate_tag0@@": "Denna parameter simulerar den ökade ansträngningen för att få bukt med kostnaderna när den ackumulerade kostnaden ökar. Den används för att modellera resenärens trötthet. Den ökande ackumulerade kostnaden för att nå en cell multipliceras med motståndskostnaden och läggs till i kostnaden för att flytta till nästa cell.",
	"@@Cost-Distance_Accumulative-Cost-Resistance-Rate_tag1@@": "Det är en modifierad version av en formel för sammansatt ränta (ränta på ränta) som används för att beräkna den synliga kostnaden för att flytta genom en cell. Eftersom värdet av motståndskostnaden ökar, ökar kostnaden för de celler som besöks senare. Ju högre motståndskostnad, desto högre kostnad för att nå nästa cell, vilken läggs samman för varje efterföljande rörelse. Eftersom motståndskostnaden kan liknas vid en sammansatt ränta och eftersom ackumulerade kostnadsvärden i allmänhet är mycket stora, föreslås små motståndvärden, till exempel 0,005 eller ännu mindre, beroende på de ackumulerade kostnadsvärdena.",
	"@@Cost-Distance_Accumulative-Cost-Resistance-Rate_tag2@@": "Värdet måste vara större än noll. Standardkapaciteten är till udatarastrets gräns.",
	"@@Cost-Distance_Accumulative-Cost-Resistance-Rate_tag3@@": "Ett numeriskt värde (dubbelt) eller ett fält från <strong>Källraster</strong> kan användas för denna parameter.",
	"@@Cost-Distance_Capacity_tag0@@": "Definierar resenärens kostnadskapaciteten för en källa. Kostnadsberäkningarna fortsätter för varje källa tills den angivna kapaciteten uppnås.",
	"@@Cost-Distance_Capacity_tag1@@": "Värdet måste vara större än noll. Standardkapaciteten är till udatarastrets gräns.",
	"@@Cost-Distance_Capacity_tag2@@": "Ett numeriskt värde (dubbelt) eller ett fält från <strong>Källraster</strong> kan användas för denna parameter.",
	"@@Cost-Distance_Cost-Raster_tag0@@": "Ett obligatoriskt indataraster som definierar kostnaden eller impedansen för att flytta planimetriskt genom varje cell. Värdet i varje cellposition motsvarar kostnad-per-enhetsavståndet för att flytta genom cellen. Varje cellpositions värde multipliceras med cellupplösningen och kompenserar även för diagonal rörelse för att få fram den totala kostnaden för att passera genom cellen.",
	"@@Cost-Distance_Cost-Raster_tag1@@": "Värdena <strong>Kostnadsraster</strong> kan vara heltal eller flyttal, men de kan inte vara negativa eller noll.",
	"@@Cost-Distance_Maximum-Distance_tag0@@": "Tröskeln som de ackumulerade kostnadsvärdena inte får överstiga. Om en ackumulerad kostnad för ett avstånd överstiger detta värde kommer utdatavärdet för cellens placering att vara NoData. Det maximala avståndet definierar den utbredning för vilken de ackumulerade avståndkostnaderna beräknas. Standardavståndet är till udatarastrets utbredning.",
	"@@Cost-Distance_Multiplier-to-Apply-to-Costs_tag0@@": "En multiplikator som kan användas på kostnadsvärden.",
	"@@Cost-Distance_Multiplier-to-Apply-to-Costs_tag1@@": "Denna parameter tillåter kontroll av färdläget eller magnituden vid en källa. Ju högre multiplikator, desto högre kostnad för att flytta igenom varje cell.",
	"@@Cost-Distance_Multiplier-to-Apply-to-Costs_tag2@@": "Värdena måste vara större än noll. Standard är 1.",
	"@@Cost-Distance_Multiplier-to-Apply-to-Costs_tag3@@": "Ett numeriskt värde (dubbelt) eller ett fält från <strong>Källraster</strong> kan användas för denna parameter.",
	"@@Cost-Distance_Source-Raster_tag0@@": "Det obligatoriska indatarastret med källplatser.",
	"@@Cost-Distance_Source-Raster_tag1@@": "Detta är ett raster som identifierar de celler eller platser från vilka den lägsta ackumulerade avståndskostnaden för varje utdatacellplats beräknas.",
	"@@Cost-Distance_Start-Cost_tag0@@": "Startkostnaden från vilken kostnadsberäkningarna ska börja. Denna parameter tillåter specifikation av den fasta kostnaden som kan associeras med en källa. I stället för att börja på kostnaden 0, börjar kostnadsalgoritmen med det angivna värdet.",
	"@@Cost-Distance_Start-Cost_tag1@@": "Värdet måste vara noll eller högre. Standard är 0.",
	"@@Cost-Distance_Travel-Direction_tag0@@": "Definierar resenärens riktning vid användning av källans motståndskostnad och källans startkostnad.",
	"@@Cost-Distance_Travel-Direction_tag1@@": "<strong>Från källa</strong> – Källans motståndskostnad och källans startkostnad kommer att användas med början vid indatakällan för att flytta ut till icke-källcellerna. Det här är standardinställningen.",
	"@@Cost-Distance_Travel-Direction_tag3@@": "<strong>Till källa</strong> – Källans motståndskostnad och källans startkostnad kommer att användas med början vid varje icke-källcell för att flytta tillbaka till indatakällan.",
	"@@Cost-Distance_Travel-Direction_tag5@@": "Ange antingen nyckelordet <strong>Från källa</strong> eller <strong>Till källa</strong>, som ska tillämpas på alla källor, eller ange ett fält i <strong>Källraster</strong> som innehåller de nyckelord som ska identifiera färdriktning för varje källa. Det fältet måste innehålla strängen ${FROM_SOURCE} eller ${TO_SOURCE}.",
	"@@Curvature_Curvature-Type_tag0@@": "Höjdkurvetypen accentuerar olika aspekter av lutningen. Det finns tre höjdkurvealternativ:",
	"@@Curvature_Curvature-Type_tag1@@": "Planform – vinkelrät mot riktningen för den maximala lutningen. Den påverkar flödets konvergens och divergens över en yta.",
	"@@Curvature_Curvature-Type_tag2@@": "Profil – parallell med lutningen och anger riktningen för den maximala lutningen. Den påverkar flödets acceleration och retardation över ytan.",
	"@@Curvature_Curvature-Type_tag3@@": "Standard – kombinerar både höjdkurvorna <strong>Profil</strong> och <strong>Planform</strong>.",
	"@@Curvature_DEM_tag0@@": "Ett raster med en digital höjdmodell (DEM).",
	"@@Curvature_Z-Factor_tag0@@": "Z-faktorn justerar måttenheterna för z-enheterna när de skiljer sig från indataytans x,y-enheter. Om x,y- och z-enheterna använder samma måttenhet, bör z-faktorn sättas till 1. Indataytans z-värden multipliceras med z-faktorn vid beräkning av den slutliga utdataytan. Om till exempel dina z-enheterna är fot och dina x,y-enheter är meter, skulle du använda en z-faktor på 0,3048 till att konvertera dina z-enheter från fot till meter, eftersom 1 fot = 0,3048 meter.",
	"@@Divide_Cellsize-Type_tag0@@": "Välj vilka celler som ska användas i utdatarastret. Om alla indatacellernas storlekar är identiska ger alla alternativen samma resultat.",
	"@@Divide_Cellsize-Type_tag1@@": "Först av – använd den första cellens storlek i indatarastren.",
	"@@Divide_Cellsize-Type_tag2@@": "Sist av – använd den sista cellens storlek i indatarastren.",
	"@@Divide_Cellsize-Type_tag3@@": "Max av – använd den största cellens storlek i indatarastren. Det här är standardinställningen.",
	"@@Divide_Cellsize-Type_tag4@@": "Medel av – använd den genomsnittliga cellstorleken i indatarastren.",
	"@@Divide_Cellsize-Type_tag5@@": "Min. av – använd den minsta cellens storlek i indatarastren.",
	"@@Divide_Extent-Type_tag0@@": "Välj vilken utbredning som ska användas i utdatarastret:",
	"@@Divide_Extent-Type_tag1@@": "Först av – använd det första indatarastrets utbredning för att bestämma bearbetningsutbredningen.",
	"@@Divide_Extent-Type_tag2@@": "Snittet mellan – använd de överlappande pixlarnas utbredning för att bestämma bearbetningsutbredningen. Det här är standardinställningen.",
	"@@Divide_Extent-Type_tag3@@": "Sist av – använd det sista indatarastrets utbredning för att bestämma bearbetningsutbredningen.",
	"@@Divide_Extent-Type_tag4@@": "Unionen av – använd alla rastrens utbredning för att bestämma bearbetningsutbredningen.",
	"@@Divide_Raster_tag0@@": "De indata vilkas värden ska divideras med indata nummer två.",
	"@@Divide_Raster_tag1@@": "Ett tal kan användas som indata för denna parameter, förutsatt att ett raster anges för ${Raster2}.",
	"@@Divide_Raster2_tag0@@": "De indata vilkas värden indata nummer ett ska divideras med.",
	"@@Divide_Raster2_tag1@@": "Ett tal kan användas som indata för denna parameter, förutsatt att ett raster anges för ${Raster}.",
	"@@Elevation-Void-Fill_DEM_tag0@@": "DEM-indata.",
	"@@Elevation-Void-Fill_Max-Void-Width_tag0@@": "Värdet för maxbredd för tomrum används för att ange den största storleken för ett tomrum som du vill fylla. Om bredden eller höjden av begränsningsrutan runt tomrummet är större än värdet för maxbredd för tomrum, fylls tomrummet inte. Enheterna i denna parameter är desamma som enheterna som används i dina datas geografiska referenssystem.",
	"@@Elevation-Void-Fill_Max-Void-Width_tag1@@": "Om den här parametern är tom eller har värdet ${0}, används ingen maximal bredd och alla tomrum fylls. Värdet av ${-1} betyder att inga tomrum kommer att fyllas.",
	"@@Elevation-Void-Fill_Short-Range-IDW-Radius_tag0@@": "Den maximala sökradien som ska användas vid fyllning av tomrum. Ett tomrum som ligger längre bort från varje giltig pixel än detta tröskelvärde kommer att kvarstå som ett tomrum. Enheterna i denna parameter är desamma som enheterna som används i dina datas geografiska referenssystem.",
	"@@Elevation-Void-Fill_Short-Range-IDW-Radius_tag1@@": "Om värdet för denna parameter är tomt, ${0} eller ${-1} används inte denna parameter.",
	"@@Equal-to_Cellsize-Type_tag0@@": "Välj vilka celler som ska användas i utdatarastret. Om alla indatacellernas storlekar är identiska ger alla alternativen samma resultat.",
	"@@Equal-to_Cellsize-Type_tag1@@": "Först av – använd den första cellens storlek i indatarastren.",
	"@@Equal-to_Cellsize-Type_tag2@@": "Sist av – använd den sista cellens storlek i indatarastren.",
	"@@Equal-to_Cellsize-Type_tag3@@": "Max av – använd den största cellens storlek i indatarastren. Det här är standardinställningen.",
	"@@Equal-to_Cellsize-Type_tag4@@": "Medel av – använd den genomsnittliga cellstorleken i indatarastren.",
	"@@Equal-to_Cellsize-Type_tag5@@": "Min. av – använd den minsta cellens storlek i indatarastren.",
	"@@Equal-to_Extent-Type_tag0@@": "Välj vilken utbredning som ska användas i utdatarastret:",
	"@@Equal-to_Extent-Type_tag1@@": "Först av – använd det första indatarastrets utbredning för att bestämma bearbetningsutbredningen.",
	"@@Equal-to_Extent-Type_tag2@@": "Snittet mellan – använd de överlappande pixlarnas utbredning för att bestämma bearbetningsutbredningen. Det här är standardinställningen.",
	"@@Equal-to_Extent-Type_tag3@@": "Sist av – använd det sista indatarastrets utbredning för att bestämma bearbetningsutbredningen.",
	"@@Equal-to_Extent-Type_tag4@@": "Unionen av – använd alla rastrens utbredning för att bestämma bearbetningsutbredningen.",
	"@@Equal-to_Raster_tag0@@": "De indata som ska användas för jämförelse av jämlikhet av indata nummer två.",
	"@@Equal-to_Raster_tag1@@": "Ett konstant värde kan användas som indata för denna parameter, förutsatt att ett raster anges för den andra parametern.",
	"@@Equal-to_Raster2_tag0@@": "De indata som ska användas för jämförelse av jämlikhet av indata nummer ett.",
	"@@Equal-to_Raster2_tag1@@": "Ett konstant värde kan användas som indata för denna parameter, förutsatt att ett raster anges för den andra parametern.",
	"@@Euclidean-Allocation_Cellsize_tag0@@": "Den cellstorlek som utdatarastret skapas vid.",
	"@@Euclidean-Allocation_Cellsize_tag1@@": "Om cellstorleken har angetts uttryckligen i <strong>Analysmiljö</strong>, blir det standardcellstorleken. Om den inte har angetts blir utdatacellstorleken densamma som <strong>Källraster</strong>.",
	"@@Euclidean-Allocation_Distance-Method_tag0@@": "Avgör om avståndet ska beräknas med en planmetod (platt jordyta) eller en geodetisk metod (ellipsoid).",
	"@@Euclidean-Allocation_Distance-Method_tag1@@": "Geodetisk – den kortaste linjen mellan två punkter på jordens yta på en rotationsellipsoid (ellipsoid). Det innebär att resultatet inte förändras beroende på indata- eller utdataprojektion. En användning för en geodetisk linje är när du vill bestämma det kortaste avståndet mellan två städer för ett flygplans flygväg. Detta är också känt som en storcirkellinje om den baseras på en sfär snarare än en ellipsoid.",
	"@@Euclidean-Allocation_Distance-Method_tag2@@": "Plan – planmätningar använder 2D-kartesisk matematik för att beräkna längd och area. Alternativet är endast tillgängligt vid mätning i ett projicerat koordinatsystem, och 2D-planet i detta koordinatsystem kommer att användas som grund för mätningarna.",
	"@@Euclidean-Allocation_Maximum-Distance_tag0@@": "Definierar tröskelavståndet inom vilket den närmaste källan kommer att fastställas. Om avståndet till den närmaste källan överskrider detta kommer utdata för den cellen att vara ${NoData}.",
	"@@Euclidean-Allocation_Maximum-Distance_tag1@@": "Standardavståndet är till udatarastrets utbredning.",
	"@@Euclidean-Allocation_Raster-Barriers_tag0@@": "Det raster som definierar hindren.",
	"@@Euclidean-Allocation_Raster-Barriers_tag1@@": "Datasetet måste innehålla ${NoData} där det inte finns några hinder. Hindren representeras av giltiga värden inklusive noll.",
	"@@Euclidean-Allocation_Raster-Barriers_tag2@@": "Hindren kan definieras av ett heltal eller ett flyttalsraster.",
	"@@Euclidean-Allocation_Source-Field_tag0@@": "Det fält som används för att tilldela värden till källplatser. Det måste vara av heltalstyp. Om <strong>Värderaster</strong> har ställts in kommer värdena i dessa indata att ges företräde framför varje inställning för <strong>Källfält</strong>.",
	"@@Euclidean-Allocation_Source-Raster_tag0@@": "Ett obligatoriskt indataraster som identifierar källplatserna. Baserat på det euklidiska avståndet kommer närmaste källa att fastställas för varje cell i utdata",
	"@@Euclidean-Allocation_Source-Raster_tag1@@": "Indatatypen kan vara heltal eller flyttal.",
	"@@Euclidean-Allocation_Value-Raster_tag0@@": "Indatarasterheltalet som identifierar de zonvärden som ska användas för varje indatakällplats. För varje källplatscell kommer det värdet som definieras av <strong>Värderaster</strong> att tilldelas till alla celler som allokerats till källplatsen för beräkningen. <strong>Värderaster</strong> ges företräde framför alla eventuella inställningar av <strong>Källfält</strong>.",
	"@@Euclidean-Direction_Cellsize_tag0@@": "Den cellstorlek som utdatarastret skapas vid.",
	"@@Euclidean-Direction_Cellsize_tag1@@": "Om cellstorleken har angetts uttryckligen i <strong>Analysmiljö</strong>, blir det standardcellstorleken. Om den inte har angetts blir utdatacellstorleken densamma som <strong>Källraster</strong>.",
	"@@Euclidean-Direction_Distance-Method_tag0@@": "Avgör om avståndet ska beräknas med en planmetod (platt jordyta) eller en geodetisk metod (ellipsoid).",
	"@@Euclidean-Direction_Distance-Method_tag1@@": "Geodetisk – den kortaste linjen mellan två punkter på jordens yta på en rotationsellipsoid (ellipsoid). Det innebär att resultatet inte förändras beroende på indata- eller utdataprojektion. En användning för en geodetisk linje är när du vill bestämma det kortaste avståndet mellan två städer för ett flygplans flygväg. Detta är också känt som en storcirkellinje om den baseras på en sfär snarare än en ellipsoid.",
	"@@Euclidean-Direction_Distance-Method_tag2@@": "Plan – planmätningar använder 2D-kartesisk matematik för att beräkna längd och area. Alternativet är endast tillgängligt vid mätning i ett projicerat koordinatsystem, och 2D-planet i detta koordinatsystem kommer att användas som grund för mätningarna.",
	"@@Euclidean-Direction_Maximum-Distance_tag0@@": "Definierar tröskelavståndet inom vilket riktningen till den närmaste källan ska beräknas. Om avståndet till den närmaste källan överskrider detta kommer utdata för den cellen att vara ${NoData}.",
	"@@Euclidean-Direction_Maximum-Distance_tag1@@": "Standardavståndet är till udatarastrets utbredning.",
	"@@Euclidean-Direction_Raster-Barriers_tag0@@": "Det raster som definierar hindren.",
	"@@Euclidean-Direction_Raster-Barriers_tag1@@": "Datasetet måste innehålla NoData där det inte finns några hinder. Hindren representeras av giltiga värden inklusive noll.",
	"@@Euclidean-Direction_Raster-Barriers_tag2@@": "Hindren kan definieras av ett heltal eller ett flyttalsraster.",
	"@@Euclidean-Direction_Source-Raster_tag0@@": "Ett obligatoriskt indataraster som identifierar de celler eller platser till vilka den euklidiska riktningen för varje utdatacellplats beräknas.",
	"@@Euclidean-Direction_Source-Raster_tag1@@": "Indatatypen kan vara heltal eller flyttal.",
	"@@Euclidean-Distance_Cellsize_tag0@@": "Den cellstorlek som utdatarastret skapas vid.",
	"@@Euclidean-Distance_Cellsize_tag1@@": "Om cellstorleken har angetts uttryckligen i <strong>Analysmiljö</strong>, blir det standardcellstorleken. Om den inte har angetts blir utdatacellstorleken densamma som <strong>Källraster</strong>.",
	"@@Euclidean-Distance_Distance-Method_tag0@@": "Avgör om avståndet ska beräknas med en planmetod (platt jordyta) eller en geodetisk metod (ellipsoid).",
	"@@Euclidean-Distance_Distance-Method_tag1@@": "Geodetisk – den kortaste linjen mellan två punkter på jordens yta på en rotationsellipsoid (ellipsoid). Det innebär att resultatet inte förändras beroende på indata- eller utdataprojektion. En användning för en geodetisk linje är när du vill bestämma det kortaste avståndet mellan två städer för ett flygplans flygväg. Detta är också känt som en storcirkellinje om den baseras på en sfär snarare än en ellipsoid.",
	"@@Euclidean-Distance_Distance-Method_tag2@@": "Plan – planmätningar använder 2D-kartesisk matematik för att beräkna längd och area. Alternativet är endast tillgängligt vid mätning i ett projicerat koordinatsystem, och 2D-planet i detta koordinatsystem kommer att användas som grund för mätningarna.",
	"@@Euclidean-Distance_Maximum-Distance_tag0@@": "Tröskeln som de ackumulerade avståndsvärdena inte får överskrida. Om ett ackumulerat euklidiskt avstånd överskrider detta värde kommer utdatavärdet för cellens placering att vara NoData.",
	"@@Euclidean-Distance_Maximum-Distance_tag1@@": "Standardavståndet är till udatarastrets utbredning.",
	"@@Euclidean-Distance_Raster-Barriers_tag0@@": "Det raster som definierar hindren.",
	"@@Euclidean-Distance_Raster-Barriers_tag1@@": "Datasetet måste innehålla ${NoData} där det inte finns några hinder. Hindren representeras av giltiga värden inklusive noll.",
	"@@Euclidean-Distance_Raster-Barriers_tag2@@": "Hindren kan definieras av ett heltal eller ett flyttalsraster.",
	"@@Euclidean-Distance_Source-Raster_tag0@@": "Det obligatoriska indatarastret som identifierar de celler eller platser till vilka det euklidiska avståndet för varje utdatacellplats beräknas.",
	"@@Euclidean-Distance_Source-Raster_tag1@@": "Indatatypen kan vara heltal eller flyttal.",
	"@@Exp_Cellsize-Type_tag0@@": "Välj vilka celler som ska användas i utdatarastret. Om alla indatacellernas storlekar är identiska ger alla alternativen samma resultat.",
	"@@Exp_Cellsize-Type_tag1@@": "Först av – använd den första cellens storlek i indatarastren.",
	"@@Exp_Cellsize-Type_tag2@@": "Sist av – använd den sista cellens storlek i indatarastren.",
	"@@Exp_Cellsize-Type_tag3@@": "Max av – använd den största cellens storlek i indatarastren. Det här är standardinställningen.",
	"@@Exp_Cellsize-Type_tag4@@": "Medel av – använd den genomsnittliga cellstorleken i indatarastren.",
	"@@Exp_Cellsize-Type_tag5@@": "Min. av – använd den minsta cellens storlek i indatarastren.",
	"@@Exp_Extent-Type_tag0@@": "Välj vilken utbredning som ska användas i utdatarastret:",
	"@@Exp_Extent-Type_tag1@@": "Först av – använd det första indatarastrets utbredning för att bestämma bearbetningsutbredningen.",
	"@@Exp_Extent-Type_tag2@@": "Snittet mellan – använd de överlappande pixlarnas utbredning för att bestämma bearbetningsutbredningen. Det här är standardinställningen.",
	"@@Exp_Extent-Type_tag3@@": "Sist av – använd det sista indatarastrets utbredning för att bestämma bearbetningsutbredningen.",
	"@@Exp_Extent-Type_tag4@@": "Unionen av – använd alla rastrens utbredning för att bestämma bearbetningsutbredningen.",
	"@@Exp_Raster_tag0@@": "Indatavärdena för vilka man ska hitta e-exponenten.",
	"@@Exp10_Cellsize-Type_tag0@@": "Välj vilka celler som ska användas i utdatarastret. Om alla indatacellernas storlekar är identiska ger alla alternativen samma resultat.",
	"@@Exp10_Cellsize-Type_tag1@@": "Först av – använd den första cellens storlek i indatarastren.",
	"@@Exp10_Cellsize-Type_tag2@@": "Sist av – använd den sista cellens storlek i indatarastren.",
	"@@Exp10_Cellsize-Type_tag3@@": "Max av – använd den största cellens storlek i indatarastren. Det här är standardinställningen.",
	"@@Exp10_Cellsize-Type_tag4@@": "Medel av – använd den genomsnittliga cellstorleken i indatarastren.",
	"@@Exp10_Cellsize-Type_tag5@@": "Min. av – använd den minsta cellens storlek i indatarastren.",
	"@@Exp10_Extent-Type_tag0@@": "Välj vilken utbredning som ska användas i utdatarastret:",
	"@@Exp10_Extent-Type_tag1@@": "Först av – använd det första indatarastrets utbredning för att bestämma bearbetningsutbredningen.",
	"@@Exp10_Extent-Type_tag2@@": "Snittet mellan – använd de överlappande pixlarnas utbredning för att bestämma bearbetningsutbredningen. Det här är standardinställningen.",
	"@@Exp10_Extent-Type_tag3@@": "Sist av – använd det sista indatarastrets utbredning för att bestämma bearbetningsutbredningen.",
	"@@Exp10_Extent-Type_tag4@@": "Unionen av – använd alla rastrens utbredning för att bestämma bearbetningsutbredningen.",
	"@@Exp10_Raster_tag0@@": "Indatavärdena för vilka man ska hitta 10-exponenten.",
	"@@Exp2_Cellsize-Type_tag0@@": "Välj vilka celler som ska användas i utdatarastret. Om alla indatacellernas storlekar är identiska ger alla alternativen samma resultat.",
	"@@Exp2_Cellsize-Type_tag1@@": "Först av – använd den första cellens storlek i indatarastren.",
	"@@Exp2_Cellsize-Type_tag2@@": "Sist av – använd den sista cellens storlek i indatarastren.",
	"@@Exp2_Cellsize-Type_tag3@@": "Max av – använd den största cellens storlek i indatarastren. Det här är standardinställningen.",
	"@@Exp2_Cellsize-Type_tag4@@": "Medel av – använd den genomsnittliga cellstorleken i indatarastren.",
	"@@Exp2_Cellsize-Type_tag5@@": "Min. av – använd den minsta cellens storlek i indatarastren.",
	"@@Exp2_Extent-Type_tag0@@": "Välj vilken utbredning som ska användas i utdatarastret:",
	"@@Exp2_Extent-Type_tag1@@": "Först av – använd det första indatarastrets utbredning för att bestämma bearbetningsutbredningen.",
	"@@Exp2_Extent-Type_tag2@@": "Snittet mellan – använd de överlappande pixlarnas utbredning för att bestämma bearbetningsutbredningen. Det här är standardinställningen.",
	"@@Exp2_Extent-Type_tag3@@": "Sist av – använd det sista indatarastrets utbredning för att bestämma bearbetningsutbredningen.",
	"@@Exp2_Extent-Type_tag4@@": "Unionen av – använd alla rastrens utbredning för att bestämma bearbetningsutbredningen.",
	"@@Exp2_Raster_tag0@@": "Indatavärdena för vilka man ska hitta 2-exponenten.",
	"@@Extract-Bands_Band_tag0@@": "Markera de band som ska extraheras från en lista baserat på det <strong>Metod</strong>-parameteralternativ som används.",
	"@@Extract-Bands_Combination_tag0@@": "Bandkombinationen eller bandordningen. Urvalslistan beror på vilket <strong>Metod</strong>-alternativ som angetts. Till exempel om <strong>Metod</strong> är <strong>Bandnamn</strong>, kan du välja en blå, grön och röda kombination för att extrahera en naturlig färgbild.",
	"@@Extract-Bands_Method_tag0@@": "Välj en av följande metoder när du ska extrahera band:",
	"@@Extract-Bands_Method_tag1@@": "<strong>Bandidentifierare</strong> – Bandets beteckning eller nummer, som är unikt för varje sensor. Dessa kan vara identiska med <strong>Bandnamn</strong>.",
	"@@Extract-Bands_Method_tag4@@": "<strong>Bandnamn</strong> – Använder det bandnamn som representerar våglängdsintervallet på det elektromagnetiska spektrumet (rött, nära infrarött, termiskt infrarött till exempel). Detta kan också betecknas som ett bandnummer-ID.",
	"@@Extract-Bands_Method_tag6@@": "<strong>Bandvåglängder</strong> – Våglängden i det elektromagnetiska spektrumet.",
	"@@Extract-Bands_Missing-Band-Action_tag0@@": "Ange den åtgärd som ska utföras när ett band inom extraktionsbandlistan inte är tillgängligt.",
	"@@Extract-Bands_Missing-Band-Action_tag1@@": "<strong>Bästa matchning</strong> – Hittar det bäst tillgängliga bandet som ska användas i stället för det saknade bandet baserat på våglängd, så att funktionen inte orsakar ett fel",
	"@@Extract-Bands_Missing-Band-Action_tag3@@": "<strong>Fel</strong> – Om indatasetet saknar något band som anges i <strong>Band</strong>-parametern, kommer funktionen att orsaka ett fel.",
	"@@Extract-Bands_Raster_tag0@@": "Den rasterprodukt som bandet eller banden ska extraheras från.",
	"@@Fill_Raster_tag0@@": "Ett höjdraster för singelband.",
	"@@Fill_Z-Limit_tag0@@": "Den maximala höjdskillnaden mellan en sänka och dess hällpunkt som ska fyllas.",
	"@@Fill_Z-Limit_tag1@@": "Om inte ett värde har angetts för den här parametern, fylls alla sänkor, oavsett djup.",
	"@@Fill_Z-Limit_tag2@@": "Värdet för <strong>Z-begränsning</strong> måste vara större än noll.",
	"@@Float_Cellsize-Type_tag0@@": "Välj vilka celler som ska användas i utdatarastret. Om alla indatacellernas storlekar är identiska ger alla alternativen samma resultat.",
	"@@Float_Cellsize-Type_tag1@@": "Först av – använd den första cellens storlek i indatarastren.",
	"@@Float_Cellsize-Type_tag2@@": "Sist av – använd den sista cellens storlek i indatarastren.",
	"@@Float_Cellsize-Type_tag3@@": "Max av – använd den största cellens storlek i indatarastren. Det här är standardinställningen.",
	"@@Float_Cellsize-Type_tag4@@": "Medel av – använd den genomsnittliga cellstorleken i indatarastren.",
	"@@Float_Cellsize-Type_tag5@@": "Min. av – använd den minsta cellens storlek i indatarastren.",
	"@@Float_Extent-Type_tag0@@": "Välj vilken utbredning som ska användas i utdatarastret:",
	"@@Float_Extent-Type_tag1@@": "Först av – använd det första indatarastrets utbredning för att bestämma bearbetningsutbredningen.",
	"@@Float_Extent-Type_tag2@@": "Snittet mellan – använd de överlappande pixlarnas utbredning för att bestämma bearbetningsutbredningen. Det här är standardinställningen.",
	"@@Float_Extent-Type_tag3@@": "Sist av – använd det sista indatarastrets utbredning för att bestämma bearbetningsutbredningen.",
	"@@Float_Extent-Type_tag4@@": "Unionen av – använd alla rastrens utbredning för att bestämma bearbetningsutbredningen.",
	"@@Float_Raster_tag0@@": "Det indataraster som ska konverteras till flyttal.",
	"@@Flow-Accumulation_Flow-Direction-Raster_tag0@@": "Det indataraster som visar riktningen för flödet ut ur varje cell.",
	"@@Flow-Accumulation_Flow-Direction-Raster_tag1@@": "Flödesriktningsrastret kan skapas genom att man kör funktionen <strong>Flödesriktning</strong>.",
	"@@Flow-Accumulation_Flow-Direction-Type_tag0@@": "Definierar typen av flödesriktningsraster för indata.",
	"@@Flow-Accumulation_Flow-Direction-Type_tag1@@": "<strong>D8</strong> – Flödesriktningsrastret för indata är av typ D8. Det här är standardinställningen.",
	"@@Flow-Accumulation_Flow-Direction-Type_tag3@@": "<strong>DINF</strong> – Flödesriktningsrastret för indata är av typen D-Infinity (DINF).",
	"@@Flow-Accumulation_Flow-Direction-Type_tag5@@": "<strong>MFD</strong> – Flödesriktningsrastret för indata är av typen Multi Flow Direction (MFD).",
	"@@Flow-Accumulation_Output-Data-Type_tag0@@": "Ackumulationsrastret i indata kan vara av heltalstyp eller flyttalstyp.",
	"@@Flow-Accumulation_Output-Data-Type_tag1@@": "<strong>Flyttal</strong> – Utdatarastret kommer att vara av flyttalstyp. Det här är standardinställningen.",
	"@@Flow-Accumulation_Output-Data-Type_tag3@@": "<strong>Heltal</strong> – Utdatarastret kommer att vara av heltalstyp.",
	"@@Flow-Accumulation_Weight-Raster_tag0@@": "Ett valfritt indataraster för tillämpning av en viktning på varje pixel.",
	"@@Flow-Accumulation_Weight-Raster_tag1@@": "Om inget viktningsraster anges, används standardviktningen 1 på varje pixel.",
	"@@Flow-Direction_Flow-Direction-Type_tag0@@": "Definierar typen av flödesriktningsraster för indata.",
	"@@Flow-Direction_Flow-Direction-Type_tag1@@": "<strong>D8</strong> – Flödesriktningsrastret för indata är av typ D8. Det här är standardinställningen.",
	"@@Flow-Direction_Flow-Direction-Type_tag3@@": "<strong>DINF</strong> – Flödesriktningsrastret för indata är av typen D-Infinity (DINF).",
	"@@Flow-Direction_Flow-Direction-Type_tag5@@": "<strong>MFD</strong> – Flödesriktningsrastret för indata är av typen Multi Flow Direction (MFD).",
	"@@Flow-Direction_Force-all-edge-cells-to-flow-outward_tag0@@": "Anger om gränspixlar alltid ska flöda utåt eller följa normala flödesregler.",
	"@@Flow-Direction_Force-all-edge-cells-to-flow-outward_tag1@@": "<strong>Nej</strong> – Om den maximala sänkningen på insidan av gränspixel är större än noll, bestäms flödesriktningen som vanligt, annars löper flödesriktningen mot gränsen. Pixlar som ska flöda inåt från ytrastrets gräns kommer att göra det. Det här är standardinställningen.",
	"@@Flow-Direction_Force-all-edge-cells-to-flow-outward_tag3@@": "<strong>Ja</strong> – Alla pixlar vid ytrastrets gräns kommer att flöda utåt från ytrastret.",
	"@@Flow-Direction_Raster_tag0@@": "Det indataraster som representerar en kontinuerlig höjdyta.",
	"@@Flow-Distance_Distance-Type_tag0@@": "Avgör om den vertikala eller horisontella komponenten av flödesavståndet ska beräknas.",
	"@@Flow-Distance_Distance-Type_tag1@@": "<strong>Horisontellt</strong> – Flödesavståndsberäkningarna representerar den horisontella komponenten av flödesavståndet från varje pixel i domänen till pixeln eller pixlarna i strömmen som de flödar in i.",
	"@@Flow-Distance_Distance-Type_tag3@@": "<strong>Vertikalt</strong> – Flödesavståndsberäkningarna representerar den vertikala komponenten av flödesavståndet från varje pixel i domänen till pixeln eller pixlarna i strömmen som de flödar in i. Det här är standardinställningen.",
	"@@Flow-Distance_Flow-Direction-Raster_tag0@@": "Det indataraster som visar flödesriktningen ut från varje pixel.",
	"@@Flow-Distance_Flow-Direction-Raster_tag1@@": "När det finns ett flödesriktningsraster begränsas riktningarna i fallande lutning till dem som definieras av indataflödesriktningarna.",
	"@@Flow-Distance_Flow-Direction-Raster_tag2@@": "Flödesriktningsrastret kan skapas genom man kör funktionen Flödesriktning.",
	"@@Flow-Distance_Flow-Direction-Type_tag0@@": "Definierar typen av flödesriktningsraster för indata.",
	"@@Flow-Distance_Flow-Direction-Type_tag1@@": "<strong>D8</strong> – Flödesriktningsrastret för indata är av typ D8. Det här är standardinställningen.",
	"@@Flow-Distance_Flow-Direction-Type_tag3@@": "<strong>DINF</strong> – Flödesriktningsrastret för indata är av typen D-Infinity (DINF).",
	"@@Flow-Distance_Flow-Direction-Type_tag5@@": "<strong>MFD</strong> – Flödesriktningsrastret för indata är av typen Multi Flow Direction (MFD).",
	"@@Flow-Distance_Statistics-Type_tag0@@": "Avgör statistiktypen som används för att beräkna flödesavståndet över flera flödesvägar. Om det bara finns en enda flödesväg från varje cell till en cell i strömmen, ger alla statistiktyper samma resultat.",
	"@@Flow-Distance_Statistics-Type_tag1@@": "<strong>Minimum</strong> – Där det finns flera flödesvägar, beräknas det lägsta flödesavståndet. Det här är standardinställningen.",
	"@@Flow-Distance_Statistics-Type_tag3@@": "<strong>Viktat medelvärde</strong> – där det finns flera flödesvägar beräknas ett viktat medelvärde av flödesavståndet. Flödesandel från en cell till dess intilliggande celler nedströms används som vikter för att beräkna ett viktat medelvärde.",
	"@@Flow-Distance_Statistics-Type_tag5@@": "<strong>Maximum</strong> – När det finns flera flödesvägar beräknas det största flödesavståndet.",
	"@@Flow-Distance_Stream-Raster_tag0@@": "Ett indataströmraster som representerar ett linjärt strömnätverk.",
	"@@Flow-Distance_Surface-Raster_tag0@@": "Det indataraster som representerar en kontinuerlig höjdyta.",
	"@@Flow-Length_Direction-of-Measurement_tag0@@": "Mätriktningen längs flödesvägen.",
	"@@Flow-Length_Direction-of-Measurement_tag1@@": "<strong>Nedströms</strong> – Beräknar avståndet nedför en sluttning längs flödesvägen från varje cell till en sänka eller ett utlopp vid rastrets gräns.",
	"@@Flow-Length_Direction-of-Measurement_tag3@@": "<strong>Uppströms</strong> – Beräknar det längsta avståndet uppför en sluttning längs flödesvägen från varje cell till vattendelarens topp.",
	"@@Flow-Length_Flow-Direction-Raster_tag0@@": "Det indataraster som visar riktningen för flödet ut ur varje cell.",
	"@@Flow-Length_Flow-Direction-Raster_tag1@@": "Flödesriktningsrastret kan skapas genom att man kör funktionen <strong>Flödesriktning</strong>.",
	"@@Flow-Length_Weight-Raster_tag0@@": "Ett valfritt indataraster för tillämpning av en viktning för varje cell.",
	"@@Flow-Length_Weight-Raster_tag1@@": "Om inget viktningsraster anges, används standardviktningen 1 för varje pixel.",
	"@@Focal-Statistics_Ignore-NoData-in-calculations_tag0@@": "Anger om ${NoData}-värden ska ignoreras av den statistiska beräkningen.",
	"@@Focal-Statistics_Ignore-NoData-in-calculations_tag1@@": "<strong>Markerad</strong> – Anger att om det finns ett ${NoData}-värde inom ett grannskap, kommer ${NoData}-värdet att ignoreras. Endast celler inom grannskapet som innehåller datavärden kommer att användas vid fastställandet av resultatvärdet. Det här är standardinställningen.",
	"@@Focal-Statistics_Ignore-NoData-in-calculations_tag3@@": "<strong>Avmarkerad</strong> – Anger att om någon cell i ett grannskap har värdet ${NoData}, blir resultatet för bearbetningscellen ${NoData}.",
	"@@Focal-Statistics_Neighborhood_tag0@@": "Formen för området runt varje cell som används till att beräkna statistik.",
	"@@Focal-Statistics_Neighborhood_tag1@@": "Varje grannskap har ytterligare parametrar som definierar formen.",
	"@@Focal-Statistics_Neighborhood_tag2@@": "Ring, Inre radie, Yttre radie",
	"@@Focal-Statistics_Neighborhood_tag3@@": "Cirkel, Radie",
	"@@Focal-Statistics_Neighborhood_tag4@@": "Oregelbunden, Bredd, Höjd, Grannskapsvärden",
	"@@Focal-Statistics_Neighborhood_tag5@@": "Rektangel, Bredd, Höjd",
	"@@Focal-Statistics_Neighborhood_tag6@@": "Kil, Radie, Startvinkel, Slutvinkel",
	"@@Focal-Statistics_Neighborhood_tag7@@": "Vikt, Bredd, Höjd, Grannskapsvärden",
	"@@Focal-Statistics_Neighborhood_tag8@@": "Det oregelbundna grannskapet tillåter att du anger ett oregelbundet format grannskap runt bearbetningscellen. Använd tabellen Grannskapsvärden till att definiera formen för grannskapets kärna. Värdet 0 för en cellposition anger att cellen inte är en del av grannskapet och att den inte kommer att användas för bearbetning. Värdet 1 anger att dess korresponderande cell (och värde) ingår i grannskapet.",
	"@@Focal-Statistics_Neighborhood_tag9@@": "Viktgrannskapet liknar den oregelbundna grannskapstypen genom att den tillåter att du definierar ett oregelbundet grannskap runt bearbetningscellen, men den tillåter dessutom att du tillämpar viktningar på indatavärdena. Värdena i viktkärnan anger vilka cellpositioner som ska inkluderas i grannskapet och de vikter som med vilka de ska multipliceras. Använd värdet 0 för att utesluta en cell från bearbetningen. Positiva, negativa och decimala värden är giltiga alternativ att använda som viktning. För grannskapstypen Vikt stöds bara statistikkategorierna Medel, Standardavvikelse och Summa.",
	"@@Focal-Statistics_Percentile-Value_tag0@@": "Anger vilken percentil som ska beräknas när <strong>Percentil</strong> väljs som statistiktyp. Standard är 90 för den nittionde percentilen.",
	"@@Focal-Statistics_Percentile-Value_tag3@@": "Värdena kan vara från 0 till 100. Den 0.e percentilen motsvarar i huvudsak statistikkategorin Minimum, och den 100:e percentilen motsvarar Maximum, med undantaget att resultatet blir ett flyttal. Värdet 50 ger i huvudsak samma resultat som statistikkategorin Median.",
	"@@Focal-Statistics_Raster_tag0@@": "Det obligatoriska indatarastret.",
	"@@Focal-Statistics_Statistics-Type_tag0@@": "Statistiktypen som ska beräknas.",
	"@@Focal-Statistics_Statistics-Type_tag1@@": "<strong>Majoritet</strong> – Beräknar majoriteten (värde som förekommer oftast) av cellerna i grannskapet.",
	"@@Focal-Statistics_Statistics-Type_tag3@@": "<strong>Maximum</strong> – Beräknar maximum (högsta värdet) för cellerna i grannskapet.",
	"@@Focal-Statistics_Statistics-Type_tag5@@": "<strong>Medelvärde</strong> – Beräknar medelvärdet (genomsnittsvärdet) för cellerna i grannskapet.",
	"@@Focal-Statistics_Statistics-Type_tag7@@": "<strong>Median</strong> – Beräknar medianvärdet för cellerna i grannskapet.",
	"@@Focal-Statistics_Statistics-Type_tag9@@": "<strong>Minimum</strong> – Beräknar minimivärdet (det lägsta värdet) för cellerna i grannskapet.",
	"@@Focal-Statistics_Statistics-Type_tag11@@": "<strong>Minoritet</strong> – Beräknar minoriteten (värde som förekommer mest sällan) av cellerna i grannskapet.",
	"@@Focal-Statistics_Statistics-Type_tag13@@": "<strong>Percentil</strong> – Beräknar en percentil för cellerna i grannskapet. Du kan bestämma vilken percentil som ska beräknas med <strong>Percentilvärde</strong>-parametern.",
	"@@Focal-Statistics_Statistics-Type_tag17@@": "<strong>Räckvidd</strong> – Beräknar variationsbredden (differensen mellan högsta och lägsta värde) för cellerna i grannskapet.",
	"@@Focal-Statistics_Statistics-Type_tag19@@": "<strong>Standardavvikelse</strong> – Beräknar standardavvikelsen för cellerna i grannskapet.",
	"@@Focal-Statistics_Statistics-Type_tag21@@": "<strong>Summa</strong> – Beräknar summan (det totala värdet) för cellerna i grannskapet.",
	"@@Focal-Statistics_Statistics-Type_tag23@@": "<strong>Variation</strong> – Beräknar antalet unika värden för cellerna i grannskapet.",
	"@@Focal-Statistics_Statistics-Type_tag25@@": "Om indatarastret är av flyttalstyp är endast statistiktyperna Medel, Maximum, Median, Minimum, Percentil, Intervall, Standardavvikelse och Summa tillgängliga.",
	"@@Focal-Statistics_Statistics-Type_tag26@@": "För Medel, Median, Percentil och Standardavvikelse är utdata alltid av flyttalstyp.",
	"@@Focal-Statistics_Statistics-Type_tag27@@": "Standardstatistiktypen är Medel.",
	"@@Geometric_Constant-Z_tag0@@": "Ange en konstant höjd över havet att använda för den geometriska funktion.",
	"@@Geometric_DEM_tag0@@": "Ange vilken digital höjdmodell (DEM) som ska användas för den geometriska funktionen. Du kan använda en DEM i mosaikdatasetet som ett rasterdataset eller som ett mosaikdataset vars utdata är en DEM.",
	"@@Geometric_Geoid_tag0@@": "De flesta höjddataset, som USGS NED eller ArcGIS Online World Elevation, innehåller ortometriska höjder, så det är nödvändigt att välja geoidkorrigering för kompatibilitet med rationella polynomkoefficienter från satelliter, vilket kräver ellipsoidhöjder. Markera kryssrutan <strong>Geoid</strong> för att använda geoidkorrigeringen (EGM96) på z-värdena, om inte din DEM redan refererar till ellipsoidhöjder.",
	"@@Geometric_Method_tag0@@": "Välj höjdmetod för den geometriska funktionen:",
	"@@Geometric_Method_tag1@@": "Använd konstant Z – ange en konstant höjd som ska användas när den geometriska funktionen utförs.",
	"@@Geometric_Method_tag2@@": "Använd DEM – ange en DEM som ska användas när den geometriska funktionen utförs.",
	"@@Geometric_Raster_tag0@@": "Indatarastret.",
	"@@Geometric_Z-Factor_tag0@@": "Rationella polynomkoefficienter (RPC:er ) för satelliter skalas för höjddataset med vertikala enheter i meter. Om din höjd använder andra vertikala enheter, anger du en <strong>Z-faktor</strong> som skalar om till meter. Om till exempel dina höjdenheter är fot, skulle du använda ett värde på 0,3048 till att konvertera dina höjdenheter från fot till meter.",
	"@@Geometric_Z-Offset_tag0@@": "Basvärdet som ska läggas till i höjdvärdet i DEM. Det kan användas som offsetvärden för värden som inte startar på havsnivå.",
	"@@Geometric_Tolerance_tag0@@": "Ange maximalt tolerabelt fel i den geometriska funktionen, angivet i antal pixlar. Standard för rastertypen NITF (NCDRD) är två.",
	"@@Grayscale_Raster_tag0@@": "Indatarastret.",
	"@@Grayscale_Conversion-Parameters_tag0@@": "De vikter för vart och ett av banden som omfattar indatarastret.",
	"@@Greater-Than_Cellsize-Type_tag0@@": "Välj vilka celler som ska användas i utdatarastret. Om alla indatacellernas storlekar är identiska ger alla alternativen samma resultat.",
	"@@Greater-Than_Cellsize-Type_tag1@@": "Först av – använd den första cellens storlek i indatarastren.",
	"@@Greater-Than_Cellsize-Type_tag2@@": "Sist av – använd den sista cellens storlek i indatarastren.",
	"@@Greater-Than_Cellsize-Type_tag3@@": "Max av – använd den största cellens storlek i indatarastren. Det här är standardinställningen.",
	"@@Greater-Than_Cellsize-Type_tag4@@": "Medel av – använd den genomsnittliga cellstorleken i indatarastren.",
	"@@Greater-Than_Cellsize-Type_tag5@@": "Min. av – använd den minsta cellens storlek i indatarastren.",
	"@@Greater-Than_Extent-Type_tag0@@": "Välj vilken utbredning som ska användas i utdatarastret:",
	"@@Greater-Than_Extent-Type_tag1@@": "Först av – använd det första indatarastrets utbredning för att bestämma bearbetningsutbredningen.",
	"@@Greater-Than_Extent-Type_tag2@@": "Snittet mellan – använd de överlappande pixlarnas utbredning för att bestämma bearbetningsutbredningen. Det här är standardinställningen.",
	"@@Greater-Than_Extent-Type_tag3@@": "Sist av – använd det sista indatarastrets utbredning för att bestämma bearbetningsutbredningen.",
	"@@Greater-Than_Extent-Type_tag4@@": "Unionen av – använd alla rastrens utbredning för att bestämma bearbetningsutbredningen.",
	"@@Greater-Than_Raster_tag0@@": "De indata som testas för att avgöra om de är större än indata nummer två.",
	"@@Greater-Than_Raster_tag1@@": "Ett konstant värde kan användas som indata för denna parameter, förutsatt att ett raster anges för den andra parametern.",
	"@@Greater-Than_Raster2_tag0@@": "De indata som indata nummer ett testas emot för att se om indata ett är större än indata två.",
	"@@Greater-Than_Raster2_tag1@@": "Ett konstant värde kan användas som indata för denna parameter, förutsatt att ett raster anges för den andra parametern.",
	"@@Greater-Than-Equal_Cellsize-Type_tag0@@": "Välj vilka celler som ska användas i utdatarastret. Om alla indatacellernas storlekar är identiska ger alla alternativen samma resultat.",
	"@@Greater-Than-Equal_Cellsize-Type_tag1@@": "Först av – använd den första cellens storlek i indatarastren.",
	"@@Greater-Than-Equal_Cellsize-Type_tag2@@": "Sist av – använd den sista cellens storlek i indatarastren.",
	"@@Greater-Than-Equal_Cellsize-Type_tag3@@": "Max av – använd den största cellens storlek i indatarastren. Det här är standardinställningen.",
	"@@Greater-Than-Equal_Cellsize-Type_tag4@@": "Medel av – använd den genomsnittliga cellstorleken i indatarastren.",
	"@@Greater-Than-Equal_Cellsize-Type_tag5@@": "Min. av – använd den minsta cellens storlek i indatarastren.",
	"@@Greater-Than-Equal_Extent-Type_tag0@@": "Välj vilken utbredning som ska användas i utdatarastret:",
	"@@Greater-Than-Equal_Extent-Type_tag1@@": "Först av – använd det första indatarastrets utbredning för att bestämma bearbetningsutbredningen.",
	"@@Greater-Than-Equal_Extent-Type_tag2@@": "Snittet mellan – använd de överlappande pixlarnas utbredning för att bestämma bearbetningsutbredningen. Det här är standardinställningen.",
	"@@Greater-Than-Equal_Extent-Type_tag3@@": "Sist av – använd det sista indatarastrets utbredning för att bestämma bearbetningsutbredningen.",
	"@@Greater-Than-Equal_Extent-Type_tag4@@": "Unionen av – använd alla rastrens utbredning för att bestämma bearbetningsutbredningen.",
	"@@Greater-Than-Equal_Raster_tag0@@": "De indata som testas för att avgöra om de är större än eller lika med indata nummer två.",
	"@@Greater-Than-Equal_Raster_tag1@@": "Ett konstant värde kan användas som indata för denna parameter, förutsatt att ett raster anges för den andra parametern.",
	"@@Greater-Than-Equal_Raster2_tag0@@": "De indata som indata nummer ett testas emot för att se om indata ett är större än eller lika med indata två.",
	"@@Greater-Than-Equal_Raster2_tag1@@": "Ett konstant värde kan användas som indata för denna parameter, förutsatt att ett raster anges för den andra parametern.",
	"@@Heat-Index_Heat-Index-Units_tag0@@": "Den måttenhet som är kopplad till utdatarastret. Tillgängliga utdataenheter är Celsius, Fahrenheit och Kelvin.",
	"@@Heat-Index_Relative-Humidity-Raster_tag0@@": "Ett singelbandsraster där pixelvärdena representerar relativ luftfuktighet som ett procentvärde mellan 0 och 100.",
	"@@Heat-Index_Temperature-Raster_tag0@@": "Ett singelbandsraster där pixelvärdena representerar omgivningens lufttemperatur.",
	"@@Heat-Index_Temperature-Units_tag0@@": "Den måttenhet som är kopplad till indatatemperaturrastret. Tillgängliga indataenheter är Celsius, Fahrenheit och Kelvin.",
	"@@Hillshade_Altitude_tag0@@": "Höjden är solens höjdvinkel ovanför horisonten och går från 0 till 90 grader. Värdet 0 grader anger att solen ligger precis på horisonten, på samma horisontalplan som referensramen. Värdet 90 grader anger att solen står i zenit, rakt ovanför.",
	"@@Hillshade_Altitude_tag1@@": "Den här parametern är endast giltig när <strong>Terrängskuggningstyp</strong> är <strong>Traditionell</strong> . Standard är 45 grader över horisonten.",
	"@@Hillshade_Azimuth_tag0@@": "Azimut är solens relativa position över horisonten (i grader). Positionen anges solens vinkel mätt medurs, rakt norrifrån. En azimut på 0 grader anger norr, öster är 90 grader, söder 180 grader och väst är 270 grader.",
	"@@Hillshade_Azimuth_tag1@@": "Den här parametern är endast giltig när <strong>Terrängskuggningstyp</strong> är <strong>Traditionell</strong> . Standard är 315 grader, vilket är från nordväst.",
	"@@Hillshade_Disable-default-edge-pixel-interpolation_tag0@@": "Med det här alternativet undviks omsamplingsartefakter som kan uppstå längs kanterna av ett raster. Utdatapixlarna längs rastrets gräns eller bredvid NoData-pixlar fylls med NoData. Därför rekommenderas att denna parameter endast används med höjdmosaikdataset som överlappar varandra. När det finns överlappande pixlar kommer områdena med NoData att visa de överlappande pixelvärdena i stället för tomma pixlar.",
	"@@Hillshade_Disable-default-edge-pixel-interpolation_tag1@@": "Avmarkerad – bilinjär omsampling kommer att tillämpas enhetligt på din terrängskuggning. Använd det här alternativet när mosaikdatasetet som innehåller dina höjdrasterdata är laskade. Det här är standardinställningen.",
	"@@Hillshade_Disable-default-edge-pixel-interpolation_tag2@@": "Markerad – bilinjär omsampling används inom terrängskuggningen utom längs rastrets gränser eller bredvid pixlar med NoData. Dessa pixlar fylls med NoData och visar de överlappande pixelvärdena och minskar därmed eventuella skarpa kanteffekter som annars kan uppträda. Använd det här alternativet när mosaikdatasetet som innehåller dina höjdrasterdata består av överlappande objekt eller tiles.",
	"@@Hillshade_Disable-default-edge-pixel-interpolation_tag3@@": "Resultaten från funktionen kan vara databeroende. Om du observerar tilegränsartefakter i dina utdata väljer du kryssrutans alternativa villkor.",
	"@@Hillshade_Hillshade-Type_tag0@@": "Styr terrängskuggningens belysningskälla:",
	"@@Hillshade_Hillshade-Type_tag1@@": "Traditionell – beräknar terrängskuggningen från en enda belysningsriktning. Det här är standardinställningen. Du kan ställa in <strong>Azimut</strong> och <strong>Höjd</strong> för att styra ljuskällans placering.",
	"@@Hillshade_Hillshade-Type_tag6@@": "Flerriktad – kombinerar ljus från flera ljuskällor för att representera en förbättrad visualisering av terrängen.",
	"@@Hillshade_Pixel-Size-Factor_tag0@@": "Pixelstorleksfaktorn står för förändringar i skala när kartvyn zoomas in och ut. Den styr hur ofta <strong>Z-faktorn</strong> ändras.",
	"@@Hillshade_Pixel-Size-Factor_tag3@@": "Den här parametern är endast giltig när <strong>Skalning</strong>-typen är <strong>Justerad</strong>. Standardvärdet är 0,024.",
	"@@Hillshade_Pixel-Size-Power_tag0@@": "Pixelstorlekspotensen står för förändringar i höjd (eller skala) när kartvyn zoomas in och ut. Det är exponenten för pixelstorleksvillkoret i ekvationen som styr hur ofta <strong>Z-faktorn</strong> förändras för att undvika betydande reliefförluster.",
	"@@Hillshade_Pixel-Size-Power_tag3@@": "Den här parametern är endast giltig när <strong>Skalning</strong>-typen är <strong>Justerad</strong>. Standardvärdet är 0,664.",
	"@@Hillshade_Raster_tag0@@": "Indatahöjddatasetet.",
	"@@Hillshade_Scaling_tag0@@": "Det skuggade resultatet skalas dynamiskt genom att z-faktorn justeras med ett av två alternativ:",
	"@@Hillshade_Scaling_tag1@@": "Justerad – Detta använder en ickelinjär justering med hjälp av standardvärden för <strong>Pixelstorlekspotens</strong> och <strong>Pixelstorleksfaktor</strong>, som rymmer en mängd olika höjdändringar (skala) allt eftersom kartvyn zoomas in och ut. <strong>Justerad</strong>-parameterinställningen rekommenderas vid användning av ett världsomfattande dataset.",
	"@@Hillshade_Scaling_tag8@@": "Ingen – ingen skalning. Det här är idealiskt för ett enstaka rasterdataset som omfattar ett lokalt område. Detta rekommenderas inte för världsomfattande dataset med stora höjdvariationer eller flerskaliga kartor eftersom det kommer att producera terrängrelief med liten variation i små skalor.",
	"@@Hillshade_Z-Factor_tag0@@": "Z-faktorn är en skalningsfaktor som används vid konvertering av höjdvärden för två ändamål:",
	"@@Hillshade_Z-Factor_tag1@@": "För att konvertera höjdenheterna (t.ex. meter eller fot) till datasetets horisontella koordinatenheter, som kan vara fot, meter eller grader",
	"@@Hillshade_Z-Factor_tag2@@": "För att lägga till vertikal förstoring för visuell effekt",
	"@@Int_Cellsize-Type_tag0@@": "Välj vilka celler som ska användas i utdatarastret. Om alla indatacellernas storlekar är identiska ger alla alternativen samma resultat.",
	"@@Int_Cellsize-Type_tag1@@": "Först av – använd den första cellens storlek i indatarastren.",
	"@@Int_Cellsize-Type_tag2@@": "Sist av – använd den sista cellens storlek i indatarastren.",
	"@@Int_Cellsize-Type_tag3@@": "Max av – använd den största cellens storlek i indatarastren. Det här är standardinställningen.",
	"@@Int_Cellsize-Type_tag4@@": "Medel av – använd den genomsnittliga cellstorleken i indatarastren.",
	"@@Int_Cellsize-Type_tag5@@": "Min. av – använd den minsta cellens storlek i indatarastren.",
	"@@Int_Extent-Type_tag0@@": "Välj vilken utbredning som ska användas i utdatarastret:",
	"@@Int_Extent-Type_tag1@@": "Först av – använd det första indatarastrets utbredning för att bestämma bearbetningsutbredningen.",
	"@@Int_Extent-Type_tag2@@": "Snittet mellan – använd de överlappande pixlarnas utbredning för att bestämma bearbetningsutbredningen. Det här är standardinställningen.",
	"@@Int_Extent-Type_tag3@@": "Sist av – använd det sista indatarastrets utbredning för att bestämma bearbetningsutbredningen.",
	"@@Int_Extent-Type_tag4@@": "Unionen av – använd alla rastrens utbredning för att bestämma bearbetningsutbredningen.",
	"@@Int_Raster_tag0@@": "Det indataraster som ska konverteras till heltal.",
	"@@Interpolate-Irregular-Data_Cellsize_tag0@@": "Cellstorleken för utdatarastret identifieras automatiskt, men du kan ändra detta. Medan cellstorleken kan ändras, förblir rasterdatasetets utbredning densamma.",
	"@@Interpolate-Irregular-Data_Input-Samples_tag0@@": "Punktdata i indata.",
	"@@Interpolate-Irregular-Data_Interpolation-Method_tag0@@": "Det finns fyra omsamplingsmetoder för den här funktionen:",
	"@@Interpolate-Irregular-Data_Interpolation-Method_tag1@@": "<strong>Genomsnitt för inverterat viktat avstånd</strong> – Fastställer värdena i cellen med en linjärt viktad kombination av en uppsättning punkter eller celler. Vikten är en funktion av det inverterade avståndet från kända punkter eller celler.",
	"@@Interpolate-Irregular-Data_Interpolation-Method_tag3@@": "<strong>Linjär tinning</strong> – Använder ett triangulärt oregelbundet nätverk från mittpunkter i varje cell i det oregelbundna rastret för att interpolera en yta som sedan konverteras till ett regelbundet raster.",
	"@@Interpolate-Irregular-Data_Interpolation-Method_tag5@@": "<strong>Naturlig granne</strong> – Söker efter den närmaste delmängden av indataprover till en frågepunkt och tillämpar viktningarna på dem baserat på proportionella områden för att interpolera ett värde.",
	"@@Interpolate-Irregular-Data_Interpolation-Method_tag7@@": "<strong>Närmaste granne</strong> – Beräknar pixelvärdet med hjälp av närmaste pixel. Om det inte finns någon källpixel kan det inte skapas någon ny pixel i utdata. Det här är standardinställningen.",
	"@@Interpolate-Irregular-Data_Search-Radius_tag0@@": "Identifierar antalet pixlar som ska ingå i den valda omsamplingsmetoden. Standardvärdet är ${3} pixlar.",
	"@@Interpolate-Irregular-Data_Value-Field_tag0@@": "Om du väljer en punktgeoobjektklass som indata, måste du identifiera fältet i attributtabellen med värdet av punkterna",
	"@@Is-Null_Cellsize-Type_tag0@@": "Välj vilka celler som ska användas i utdatarastret. Om alla indatacellernas storlekar är identiska ger alla alternativen samma resultat.",
	"@@Is-Null_Cellsize-Type_tag1@@": "Först av – använd den första cellens storlek i indatarastren.",
	"@@Is-Null_Cellsize-Type_tag2@@": "Sist av – använd den sista cellens storlek i indatarastren.",
	"@@Is-Null_Cellsize-Type_tag3@@": "Max av – använd den största cellens storlek i indatarastren. Det här är standardinställningen.",
	"@@Is-Null_Cellsize-Type_tag4@@": "Medel av – använd den genomsnittliga cellstorleken i indatarastren.",
	"@@Is-Null_Cellsize-Type_tag5@@": "Min. av – använd den minsta cellens storlek i indatarastren.",
	"@@Is-Null_Extent-Type_tag0@@": "Välj vilken utbredning som ska användas i utdatarastret:",
	"@@Is-Null_Extent-Type_tag1@@": "Först av – använd det första indatarastrets utbredning för att bestämma bearbetningsutbredningen.",
	"@@Is-Null_Extent-Type_tag2@@": "Snittet mellan – använd de överlappande pixlarnas utbredning för att bestämma bearbetningsutbredningen. Det här är standardinställningen.",
	"@@Is-Null_Extent-Type_tag3@@": "Sist av – använd det sista indatarastrets utbredning för att bestämma bearbetningsutbredningen.",
	"@@Is-Null_Extent-Type_tag4@@": "Unionen av – använd alla rastrens utbredning för att bestämma bearbetningsutbredningen.",
	"@@Is-Null_Raster_tag0@@": "Det indataraster som testas för att identifiera de celler som är ${NoData} (null).",
	"@@Is-Null_Raster_tag1@@": "Indata kan vara av heltalstyp eller flyttalstyp.",
	"@@Key-Metadata_Band-Names_tag0@@": "Detta används för att åsidosätta rastrets bandnamn. Det är en kommaseparerad sträng som representerar uppdaterade bandnamn.",
	"@@Key-Metadata_Band-Names_tag1@@": "Den här parametern är valfri.",
	"@@Key-Metadata_Metadata-JSON_tag0@@": "Viktiga metadata som ska infogas i utdatarastret som beskrivs som en JSON-sträng som representerar en samling av nyckel–värde-par. Följande är ett exempel på en JSON-sträng som kan användas som indata till denna funktion. Alla indata för denna parameter bör följa samma format.",
	"@@Key-Metadata_Metadata-JSON_tag1@@": "JSON-sträng som representerar viktiga metadata",
	"@@Key-Metadata_Metadata-JSON_tag2@@": "{ \"CloudCover\": 4, \"BandProperties\":[ { \"BandName\": \"Blue\", \"WavelengthMin\": 445, \"WavelengthMax\": 516 }, { \"BandName\": \"Green\", \"WavelengthMin\": 506, \"WavelengthMax\": 595 }, ]}",
	"@@Key-Metadata_Property-Name_tag0@@": "Namnet på den egenskap på datasetnivå som ska åsidosättas.",
	"@@Key-Metadata_Raster_tag0@@": "Det raster- eller mosaikdataset som innehåller viktiga metadata som du vill infoga eller skriva över.",
	"@@Key-Metadata_Value_tag0@@": "Det åsidosättande värdet från egenskapen på datasetnivå som du vill ange.",
	"@@Least-Cost-Path_Accumulative-Cost-Resistance-Rate_tag0@@": "Denna parameter simulerar den ökade ansträngningen för att få bukt med kostnaderna när den ackumulerade kostnaden ökar. Den används för att modellera resenärens trötthet. Den ökande ackumulerade kostnaden för att nå en cell multipliceras med motståndskostnaden och läggs till i kostnaden för att flytta till nästa cell.",
	"@@Least-Cost-Path_Accumulative-Cost-Resistance-Rate_tag1@@": "Det är en modifierad version av en formel för sammansatt ränta (ränta på ränta) som används för att beräkna den synliga kostnaden för att flytta genom en cell. Eftersom värdet av motståndskostnaden ökar, ökar kostnaden för de celler som besöks senare. Ju högre motståndskostnad, desto högre kostnad för att nå nästa cell, vilken läggs samman för varje efterföljande rörelse. Eftersom motståndskostnaden kan liknas vid en sammansatt ränta och eftersom ackumulerade kostnadsvärden i allmänhet är mycket stora, föreslås små motståndvärden, till exempel 0,005 eller ännu mindre, beroende på de ackumulerade kostnadsvärdena.",
	"@@Least-Cost-Path_Accumulative-Cost-Resistance-Rate_tag2@@": "Värdet måste vara större än noll. Standardkapaciteten är till udatarastrets gräns.",
	"@@Least-Cost-Path_Capacity_tag0@@": "Definierar resenärens kostnadskapaciteten för en källa. Kostnadsberäkningarna fortsätter för varje källa tills den angivna kapaciteten uppnås.",
	"@@Least-Cost-Path_Capacity_tag1@@": "Värdet måste vara större än noll. Standardkapaciteten är till udatarastrets gräns.",
	"@@Least-Cost-Path_Cost-Raster_tag0@@": "Ett obligatoriskt indataraster som definierar kostnaden eller impedansen för att flytta planimetriskt genom varje cell. Värdet i varje cellposition motsvarar kostnad-per-enhetsavståndet för att flytta genom cellen. Varje cellpositions värde multipliceras med cellupplösningen och kompenserar även för diagonal rörelse för att få fram den totala kostnaden för att passera genom cellen.",
	"@@Least-Cost-Path_Cost-Raster_tag1@@": "Värdena <strong>Kostnadsraster</strong> kan vara heltal eller flyttal, men de kan inte vara negativa eller noll.",
	"@@Least-Cost-Path_Destination-Field_tag0@@": "Fältet som används för att erhålla värden för destinationsplatser.",
	"@@Least-Cost-Path_Destination-Raster_tag0@@": "Ett obligatoriskt indataraster som identifierar de pixlar från vilka den billigaste rutten kan bestämmas till den mest kostnadseffektiva källan. Indata består av pixlar som har giltiga värden, och de återstående cellerna måste tilldelas ${NoData}. Nollvärden är giltiga.",
	"@@Least-Cost-Path_Maximum-Distance_tag0@@": "Tröskeln som de ackumulerade kostnadsvärdena inte får överstiga. Om en ackumulerad kostnad för ett avstånd överstiger detta värde kommer utdatavärdet för cellens placering att vara ${NoData}. Det maximala avståndet definierar den utbredning för vilken de ackumulerade avståndkostnaderna beräknas. Standardavståndet är till udatarastrets utbredning.",
	"@@Least-Cost-Path_Multiplier-to-Apply-to-Costs_tag0@@": "Denna parameter tillåter kontroll av färdläget eller magnituden vid en källa. Ju högre multiplikator, desto högre kostnad för att flytta igenom varje cell.",
	"@@Least-Cost-Path_Multiplier-to-Apply-to-Costs_tag1@@": "Värdena måste vara större än noll. Standard är 1.",
	"@@Least-Cost-Path_Path-Type_tag0@@": "Ett nyckelord som definierar hur värden och zoner i inkommande destinationsdata kommer att tolkas i kostnadsberäkningar för rutter:",
	"@@Least-Cost-Path_Path-Type_tag1@@": "<strong>Bästa enskilda</strong> – För alla pixlar i inkommande destinationsdata härleds den billigaste rutten från cellen med lägst antal rutter med lägst kostnad till källcellerna.",
	"@@Least-Cost-Path_Path-Type_tag3@@": "<strong>Varje cell</strong> – En billigaste rutt bestäms för varje pixel med giltiga värden i inkommande destinationsdata och sparas i utdatarastret. Varje cell i inkommande destinationsdata behandlas separat, och en billigaste rutt bestäms för varje från-cell.",
	"@@Least-Cost-Path_Path-Type_tag5@@": "<strong>Varje zon</strong> – En billigaste rutt bestäms för varje zon i inkommande destinationsdata och sparas i utdatarastret. Den billigaste rutten för varje zon börjar vid pixeln med den lägsta kostnaden för avståndsviktning i zonen.",
	"@@Least-Cost-Path_Source-Raster_tag0@@": "Detta är ett obligatoriskt indataraster som identifierar de celler eller platser från vilka den lägsta ackumulerade avståndskostnaden för varje utdatacellplats beräknas.",
	"@@Least-Cost-Path_Start-Cost_tag0@@": "Startkostnaden från vilken kostnadsberäkningarna ska börja. Denna parameter tillåter specifikation av den fasta kostnaden som kan associeras med en källa. I stället för att börja på kostnaden 0, börjar kostnadsalgoritmen med det angivna värdet.",
	"@@Least-Cost-Path_Start-Cost_tag1@@": "Värdet måste vara noll eller högre. Standard är 0.",
	"@@Least-Cost-Path_Travel-Direction_tag0@@": "Definierar resenärens riktning vid användning av källans motståndskostnad och källans startkostnad.",
	"@@Least-Cost-Path_Travel-Direction_tag1@@": "<strong>Från källa</strong> – Källans motståndskostnad och källans startkostnad kommer att användas med början vid indatakällan för att flytta ut till icke-källcellerna. Det här är standardinställningen.",
	"@@Least-Cost-Path_Travel-Direction_tag3@@": "<strong>Till källa</strong> – Källans motståndskostnad och källans startkostnad kommer att användas med början vid varje icke-källcell för att flytta tillbaka till indatakällan.",
	"@@Least-Cost-Path_Travel-Direction_tag5@@": "Ange antingen nyckelordet <strong>Från källa</strong> eller <strong>Till källa</strong>, som ska tillämpas på alla källor, eller ange ett fält i <strong>Källraster</strong> som innehåller de nyckelord som ska identifiera färdriktning för varje källa. Det fältet måste innehålla strängen ${FROM_SOURCE} eller ${TO_SOURCE}.",
	"@@Less-Than_Cellsize-Type_tag0@@": "Välj vilka celler som ska användas i utdatarastret. Om alla indatacellernas storlekar är identiska ger alla alternativen samma resultat.",
	"@@Less-Than_Cellsize-Type_tag1@@": "Först av – använd den första cellens storlek i indatarastren.",
	"@@Less-Than_Cellsize-Type_tag2@@": "Sist av – använd den sista cellens storlek i indatarastren.",
	"@@Less-Than_Cellsize-Type_tag3@@": "Max av – använd den största cellens storlek i indatarastren. Det här är standardinställningen.",
	"@@Less-Than_Cellsize-Type_tag4@@": "Medel av – använd den genomsnittliga cellstorleken i indatarastren.",
	"@@Less-Than_Cellsize-Type_tag5@@": "Min. av – använd den minsta cellens storlek i indatarastren.",
	"@@Less-Than_Extent-Type_tag0@@": "Välj vilken utbredning som ska användas i utdatarastret:",
	"@@Less-Than_Extent-Type_tag1@@": "Först av – använd det första indatarastrets utbredning för att bestämma bearbetningsutbredningen.",
	"@@Less-Than_Extent-Type_tag2@@": "Snittet mellan – använd de överlappande pixlarnas utbredning för att bestämma bearbetningsutbredningen. Det här är standardinställningen.",
	"@@Less-Than_Extent-Type_tag3@@": "Sist av – använd det sista indatarastrets utbredning för att bestämma bearbetningsutbredningen.",
	"@@Less-Than_Extent-Type_tag4@@": "Unionen av – använd alla rastrens utbredning för att bestämma bearbetningsutbredningen.",
	"@@Less-Than_Raster_tag0@@": "De indata som testas för att avgöra om de är mindre än indata nummer två.",
	"@@Less-Than_Raster_tag1@@": "Ett konstant värde kan användas som indata för denna parameter, förutsatt att ett raster anges för den andra parametern.",
	"@@Less-Than_Raster2_tag0@@": "De indata som indata nummer ett testas emot för att se om indata ett är mindre än indata två.",
	"@@Less-Than_Raster2_tag1@@": "Ett konstant värde kan användas som indata för denna parameter, förutsatt att ett raster anges för den andra parametern.",
	"@@Less-Than-Equal_Cellsize-Type_tag0@@": "Välj vilka celler som ska användas i utdatarastret. Om alla indatacellernas storlekar är identiska ger alla alternativen samma resultat.",
	"@@Less-Than-Equal_Cellsize-Type_tag1@@": "Först av – använd den första cellens storlek i indatarastren.",
	"@@Less-Than-Equal_Cellsize-Type_tag2@@": "Sist av – använd den sista cellens storlek i indatarastren.",
	"@@Less-Than-Equal_Cellsize-Type_tag3@@": "Max av – använd den största cellens storlek i indatarastren. Det här är standardinställningen.",
	"@@Less-Than-Equal_Cellsize-Type_tag4@@": "Medel av – använd den genomsnittliga cellstorleken i indatarastren.",
	"@@Less-Than-Equal_Cellsize-Type_tag5@@": "Min. av – använd den minsta cellens storlek i indatarastren.",
	"@@Less-Than-Equal_Extent-Type_tag0@@": "Välj vilken utbredning som ska användas i utdatarastret:",
	"@@Less-Than-Equal_Extent-Type_tag1@@": "Först av – använd det första indatarastrets utbredning för att bestämma bearbetningsutbredningen.",
	"@@Less-Than-Equal_Extent-Type_tag2@@": "Snittet mellan – använd de överlappande pixlarnas utbredning för att bestämma bearbetningsutbredningen. Det här är standardinställningen.",
	"@@Less-Than-Equal_Extent-Type_tag3@@": "Sist av – använd det sista indatarastrets utbredning för att bestämma bearbetningsutbredningen.",
	"@@Less-Than-Equal_Extent-Type_tag4@@": "Unionen av – använd alla rastrens utbredning för att bestämma bearbetningsutbredningen.",
	"@@Less-Than-Equal_Raster_tag0@@": "De indata som testas för att avgöra om de är mindre än eller lika med indata nummer två.",
	"@@Less-Than-Equal_Raster_tag1@@": "Ett konstant värde kan användas som indata för denna parameter, förutsatt att ett raster anges för den andra parametern.",
	"@@Less-Than-Equal_Raster2_tag0@@": "De indata som indata nummer ett testas emot för att se om indata ett är mindre än eller lika med indata två.",
	"@@Less-Than-Equal_Raster2_tag1@@": "Ett konstant värde kan användas som indata för denna parameter, förutsatt att ett raster anges för den andra parametern.",
	"@@Ln_Cellsize-Type_tag0@@": "Välj vilka celler som ska användas i utdatarastret. Om alla indatacellernas storlekar är identiska ger alla alternativen samma resultat.",
	"@@Ln_Cellsize-Type_tag1@@": "Först av – använd den första cellens storlek i indatarastren.",
	"@@Ln_Cellsize-Type_tag2@@": "Sist av – använd den sista cellens storlek i indatarastren.",
	"@@Ln_Cellsize-Type_tag3@@": "Max av – använd den största cellens storlek i indatarastren. Det här är standardinställningen.",
	"@@Ln_Cellsize-Type_tag4@@": "Medel av – använd den genomsnittliga cellstorleken i indatarastren.",
	"@@Ln_Cellsize-Type_tag5@@": "Min. av – använd den minsta cellens storlek i indatarastren.",
	"@@Ln_Extent-Type_tag0@@": "Välj vilken utbredning som ska användas i utdatarastret:",
	"@@Ln_Extent-Type_tag1@@": "Först av – använd det första indatarastrets utbredning för att bestämma bearbetningsutbredningen.",
	"@@Ln_Extent-Type_tag2@@": "Snittet mellan – använd de överlappande pixlarnas utbredning för att bestämma bearbetningsutbredningen. Det här är standardinställningen.",
	"@@Ln_Extent-Type_tag3@@": "Sist av – använd det sista indatarastrets utbredning för att bestämma bearbetningsutbredningen.",
	"@@Ln_Extent-Type_tag4@@": "Unionen av – använd alla rastrens utbredning för att bestämma bearbetningsutbredningen.",
	"@@Ln_Raster_tag0@@": "Indatavärden för vilka man ska hitta den naturliga logaritmen (Ln).",
	"@@Log10_Cellsize-Type_tag0@@": "Välj vilka celler som ska användas i utdatarastret. Om alla indatacellernas storlekar är identiska ger alla alternativen samma resultat.",
	"@@Log10_Cellsize-Type_tag1@@": "Först av – använd den första cellens storlek i indatarastren.",
	"@@Log10_Cellsize-Type_tag2@@": "Sist av – använd den sista cellens storlek i indatarastren.",
	"@@Log10_Cellsize-Type_tag3@@": "Max av – använd den största cellens storlek i indatarastren. Det här är standardinställningen.",
	"@@Log10_Cellsize-Type_tag4@@": "Medel av – använd den genomsnittliga cellstorleken i indatarastren.",
	"@@Log10_Cellsize-Type_tag5@@": "Min. av – använd den minsta cellens storlek i indatarastren.",
	"@@Log10_Extent-Type_tag0@@": "Välj vilken utbredning som ska användas i utdatarastret:",
	"@@Log10_Extent-Type_tag1@@": "Först av – använd det första indatarastrets utbredning för att bestämma bearbetningsutbredningen.",
	"@@Log10_Extent-Type_tag2@@": "Snittet mellan – använd de överlappande pixlarnas utbredning för att bestämma bearbetningsutbredningen. Det här är standardinställningen.",
	"@@Log10_Extent-Type_tag3@@": "Sist av – använd det sista indatarastrets utbredning för att bestämma bearbetningsutbredningen.",
	"@@Log10_Extent-Type_tag4@@": "Unionen av – använd alla rastrens utbredning för att bestämma bearbetningsutbredningen.",
	"@@Log10_Raster_tag0@@": "Indatavärden för vilka man ska hitta 10-logaritmen.",
	"@@Log2_Cellsize-Type_tag0@@": "Välj vilka celler som ska användas i utdatarastret. Om alla indatacellernas storlekar är identiska ger alla alternativen samma resultat.",
	"@@Log2_Cellsize-Type_tag1@@": "Först av – använd den första cellens storlek i indatarastren.",
	"@@Log2_Cellsize-Type_tag2@@": "Sist av – använd den sista cellens storlek i indatarastren.",
	"@@Log2_Cellsize-Type_tag3@@": "Max av – använd den största cellens storlek i indatarastren. Det här är standardinställningen.",
	"@@Log2_Cellsize-Type_tag4@@": "Medel av – använd den genomsnittliga cellstorleken i indatarastren.",
	"@@Log2_Cellsize-Type_tag5@@": "Min. av – använd den minsta cellens storlek i indatarastren.",
	"@@Log2_Extent-Type_tag0@@": "Välj vilken utbredning som ska användas i utdatarastret:",
	"@@Log2_Extent-Type_tag1@@": "Först av – använd det första indatarastrets utbredning för att bestämma bearbetningsutbredningen.",
	"@@Log2_Extent-Type_tag2@@": "Snittet mellan – använd de överlappande pixlarnas utbredning för att bestämma bearbetningsutbredningen. Det här är standardinställningen.",
	"@@Log2_Extent-Type_tag3@@": "Sist av – använd det sista indatarastrets utbredning för att bestämma bearbetningsutbredningen.",
	"@@Log2_Extent-Type_tag4@@": "Unionen av – använd alla rastrens utbredning för att bestämma bearbetningsutbredningen.",
	"@@Log2_Raster_tag0@@": "Indatavärden för vilka man ska hitta 2-logaritmen.",
	"@@Lookup_Field_tag0@@": "Fält som innehåller de önskade värdena för det nya rastret.",
	"@@Lookup_Field_tag1@@": "Det måste vara en numerisk typ.",
	"@@Lookup_Raster_tag0@@": "Det indataraster som innehåller ett fält som ska användas för att skapa ett nytt raster.",
	"@@Lookup_Raster_tag1@@": "De kan vara av antingen heltalstyp eller flyttalstyp.",
	"@@Mask_Included-Ranges_tag0@@": "De ingående intervallen kan anges för varje band genom att man anger ett lägsta och ett högsta värde. Värden utanför intervallet returneras som ${NoData}. En pixel inkluderas om pixelns värde faller inom något av de angivna intervallen. Alltså: om band 1 har intervallet 5–10 och band 2 har intervallet 15–20 och pixelvärdet för band 1 är 8, maskas inte denna pixel.",
	"@@Mask_NoData-Interpretation_tag0@@": "Detta refererar till hur <strong>${NoData}-värden</strong> påverkar resultatbilden.",
	"@@Mask_NoData-Interpretation_tag3@@": "Du kan välja mellan följande två alternativ:",
	"@@Mask_NoData-Interpretation_tag4@@": "<strong>Matcha alla</strong>– De ${NoData}-värden du anger för varje band måste förekomma i samma pixel för att resultatbilden ska innehålla ${NoData}-pixeln.",
	"@@Mask_NoData-Interpretation_tag6@@": "<strong>Matcha vilken som helst</strong> – Om ${NoData}-värdet du anger förekommer för en pixel i ett angivet band, kommer pixeln i resultatbilden att vara ${NoData}. Det här är standardinställningen.",
	"@@Mask_NoData-Values_tag0@@": "NoData-värdena kan anges för varje band. Du kan ange fler än ett värde genom att ange en blankstegsavgränsad lista.",
	"@@Mask_Raster_tag0@@": "Indatarastret.",
	"@@Minus_Cellsize-Type_tag0@@": "Välj vilka celler som ska användas i utdatarastret. Om alla indatacellernas storlekar är identiska ger alla alternativen samma resultat.",
	"@@Minus_Cellsize-Type_tag1@@": "Först av – använd den första cellens storlek i indatarastren.",
	"@@Minus_Cellsize-Type_tag2@@": "Sist av – använd den sista cellens storlek i indatarastren.",
	"@@Minus_Cellsize-Type_tag3@@": "Max av – använd den största cellens storlek i indatarastren. Det här är standardinställningen.",
	"@@Minus_Cellsize-Type_tag4@@": "Medel av – använd den genomsnittliga cellstorleken i indatarastren.",
	"@@Minus_Cellsize-Type_tag5@@": "Min. av – använd den minsta cellens storlek i indatarastren.",
	"@@Minus_Extent-Type_tag0@@": "Välj vilken utbredning som ska användas i utdatarastret:",
	"@@Minus_Extent-Type_tag1@@": "Först av – använd det första indatarastrets utbredning för att bestämma bearbetningsutbredningen.",
	"@@Minus_Extent-Type_tag2@@": "Snittet mellan – använd de överlappande pixlarnas utbredning för att bestämma bearbetningsutbredningen. Det här är standardinställningen.",
	"@@Minus_Extent-Type_tag3@@": "Sist av – använd det sista indatarastrets utbredning för att bestämma bearbetningsutbredningen.",
	"@@Minus_Extent-Type_tag4@@": "Unionen av – använd alla rastrens utbredning för att bestämma bearbetningsutbredningen.",
	"@@Minus_Raster_tag0@@": "De indata från vilka värdena i indata nummer två ska subtraheras.",
	"@@Minus_Raster_tag1@@": "Ett konstant värde kan användas som indata för denna parameter, förutsatt att ett raster anges för den andra parametern.",
	"@@Minus_Raster2_tag0@@": "De indatavärden som ska subtraheras från värdena i indata nummer ett.",
	"@@Minus_Raster2_tag1@@": "Ett konstant värde kan användas som indata för denna parameter, förutsatt att ett raster anges för den andra parametern.",
	"@@ML-Classify_Raster_tag0@@": "Det indataraster som ska klassificeras med algoritmen för klassificering av maximal sannolikhet.",
	"@@ML-Classify_Signature-File-or-URL_tag0@@": "${.gsg}-signaturfilen.",
	"@@Mod_Cellsize-Type_tag0@@": "Välj vilka celler som ska användas i utdatarastret. Om alla indatacellernas storlekar är identiska ger alla alternativen samma resultat.",
	"@@Mod_Cellsize-Type_tag1@@": "Först av – använd den första cellens storlek i indatarastren.",
	"@@Mod_Cellsize-Type_tag2@@": "Sist av – använd den sista cellens storlek i indatarastren.",
	"@@Mod_Cellsize-Type_tag3@@": "Max av – använd den största cellens storlek i indatarastren. Det här är standardinställningen.",
	"@@Mod_Cellsize-Type_tag4@@": "Medel av – använd den genomsnittliga cellstorleken i indatarastren.",
	"@@Mod_Cellsize-Type_tag5@@": "Min. av – använd den minsta cellens storlek i indatarastren.",
	"@@Mod_Extent-Type_tag0@@": "Välj vilken utbredning som ska användas i utdatarastret:",
	"@@Mod_Extent-Type_tag1@@": "Först av – använd det första indatarastrets utbredning för att bestämma bearbetningsutbredningen.",
	"@@Mod_Extent-Type_tag2@@": "Snittet mellan – använd de överlappande pixlarnas utbredning för att bestämma bearbetningsutbredningen. Det här är standardinställningen.",
	"@@Mod_Extent-Type_tag3@@": "Sist av – använd det sista indatarastrets utbredning för att bestämma bearbetningsutbredningen.",
	"@@Mod_Extent-Type_tag4@@": "Unionen av – använd alla rastrens utbredning för att bestämma bearbetningsutbredningen.",
	"@@Mod_Raster_tag0@@": "Indata för täljaren.",
	"@@Mod_Raster_tag1@@": "Ett konstant värde kan användas som indata för denna parameter, förutsatt att ett raster anges för den andra parametern.",
	"@@Mod_Raster2_tag0@@": "Indata för nämnaren.",
	"@@Mod_Raster2_tag1@@": "Ett konstant värde kan användas som indata för denna parameter, förutsatt att ett raster anges för den andra parametern.",
	"@@Mosaic-Rasters_Operation_tag0@@": "Lös eventuella konflikter när delar av två eller fler bilder överlappar varandra. Följande alternativ finns:",
	"@@Mosaic-Rasters_Operation_tag1@@": "<strong>Blandning</strong> – Beräkna och visa ett genomsnitt av de överlappande pixlarna genom att ge större vikt åt pixlar som ligger närmare angränsande bilder så att resultatet blir en mjukare bild. Det här är standardinställningen.",
	"@@Mosaic-Rasters_Operation_tag3@@": "<strong>Först</strong> – Visa pixlarna från den första bilden i listan över bilder som överlappar ett visst område.",
	"@@Mosaic-Rasters_Operation_tag5@@": "<strong>Sist</strong> – Visa pixlarna från den sista bilden i listan över bilder som överlappar ett visst område.",
	"@@Mosaic-Rasters_Operation_tag7@@": "<strong>Max</strong> – Visa pixeln med det högsta värdet i alla överlappande lager. Med det här alternativet har du inga garantier för att det bara visas pixlar av en bild i det överlappande området i stället för en kombination av alla potentiella lager.",
	"@@Mosaic-Rasters_Operation_tag9@@": "<strong>Medelvärde</strong> – Beräkna och visa ett genomsnitt av de överlappande pixlarna.",
	"@@Mosaic-Rasters_Operation_tag11@@": "<strong>Min</strong> – Visa pixeln med det lägsta värdet i alla överlappande lager. Med det här alternativet har du inga garantier för att det bara visas pixlar av en bild i det överlappande området i stället för en kombination av alla potentiella lager.",
	"@@Mosaic-Rasters_Rasters_tag0@@": "Välj de raster du vill skapa en mosaik av som ska skapa en bild.",
	"@@NDVI_Infrared-Band-ID_tag0@@": "Anger det ID-band som representerar den nära infraröda delen av det elektromagnetiska spektrumet.",
	"@@NDVI_Raster_tag0@@": "Det multispektrala rastret i indata.",
	"@@NDVI_Scientific-Output_tag0@@": "Värdena i utdata kommer att variera från −1,0 till 1,0, vilket också används i många vetenskapliga program.",
	"@@NDVI_Visible-Band-ID_tag0@@": "Anger det band-ID som representerar den röda delen av det elektromagnetiska spektrumet.",
	"@@NDVI-Colorized_Color-Ramp_tag0@@": "Välj ett fördefinierat färgschema i listrutan.",
	"@@NDVI-Colorized_Color-Scheme-Type_tag0@@": "Välj vilken typ av färgschema som ska färglägga dina NDVI-utdata:",
	"@@NDVI-Colorized_Color-Scheme-Type_tag1@@": "Färgkarta – välj en fördefinierad färgkarta i listrutan. Du kan också leta reda på en befintlig färgkartefil.",
	"@@NDVI-Colorized_Color-Scheme-Type_tag2@@": "Färgramp – välj ett fördefinierat färgschema i listrutan.",
	"@@NDVI-Colorized_Colormap_tag0@@": "Välj en fördefinierad färgkarta i listrutan. Du kan också leta reda på en befintlig färgkartefil.",
	"@@NDVI-Colorized_Infrared-Band-ID_tag0@@": "Anger det ID-band som representerar den nära infraröda delen av det elektromagnetiska spektrumet.",
	"@@NDVI-Colorized_Raster_tag0@@": "Det multispektrala rastret i indata.",
	"@@NDVI-Colorized_Scientific-Output_tag0@@": "Värdena i utdata kommer att variera från −1,0 till 1,0, vilket också används i många vetenskapliga program.",
	"@@NDVI-Colorized_Visible-Band-ID_tag0@@": "Anger det band-ID som representerar den röda delen av det elektromagnetiska spektrumet.",
	"@@Negate_Cellsize-Type_tag0@@": "Välj vilka celler som ska användas i utdatarastret. Om alla indatacellernas storlekar är identiska ger alla alternativen samma resultat.",
	"@@Negate_Cellsize-Type_tag1@@": "Först av – använd den första cellens storlek i indatarastren.",
	"@@Negate_Cellsize-Type_tag2@@": "Sist av – använd den sista cellens storlek i indatarastren.",
	"@@Negate_Cellsize-Type_tag3@@": "Max av – använd den största cellens storlek i indatarastren. Det här är standardinställningen.",
	"@@Negate_Cellsize-Type_tag4@@": "Medel av – använd den genomsnittliga cellstorleken i indatarastren.",
	"@@Negate_Cellsize-Type_tag5@@": "Min. av – använd den minsta cellens storlek i indatarastren.",
	"@@Negate_Extent-Type_tag0@@": "Välj vilken utbredning som ska användas i utdatarastret:",
	"@@Negate_Extent-Type_tag1@@": "Först av – använd det första indatarastrets utbredning för att bestämma bearbetningsutbredningen.",
	"@@Negate_Extent-Type_tag2@@": "Snittet mellan – använd de överlappande pixlarnas utbredning för att bestämma bearbetningsutbredningen. Det här är standardinställningen.",
	"@@Negate_Extent-Type_tag3@@": "Sist av – använd det sista indatarastrets utbredning för att bestämma bearbetningsutbredningen.",
	"@@Negate_Extent-Type_tag4@@": "Unionen av – använd alla rastrens utbredning för att bestämma bearbetningsutbredningen.",
	"@@Negate_Raster_tag0@@": "Det indataraster som ska negeras (multipliceras med −1).",
	"@@Nibble_Mask-Raster_tag0@@": "Det obligatoriska indatarastret som ska användas som mask.",
	"@@Nibble_Mask-Raster_tag1@@": "Celler med NoData som värde kommer att naggas i <strong>indatarastret</strong>.",
	"@@Nibble_Mask-Raster_tag4@@": "Maskrastret kan vara av heltals- eller flyttalstyp.",
	"@@Nibble_Nibble-NoData-cells_tag0@@": "Definierar om NoData-celler i indatarastret ska förbli NoData i utdatarastret.",
	"@@Nibble_Nibble-NoData-cells_tag1@@": "<strong>Nej</strong> – Anger att NoData-celler i indatarastret ska förbli NoData i utdata. Det här är standardinställningen.",
	"@@Nibble_Nibble-NoData-cells_tag3@@": "<strong>Ja</strong> – Anger att NoData-celler i indatarastret och i masken kan naggas till giltiga cellvärden i utdata.",
	"@@Nibble_Raster_tag0@@": "Det obligatoriska indatarastret som ska naggas.",
	"@@Nibble_Raster_tag1@@": "Indatarastret kan vara av heltals- eller flyttalstyp.",
	"@@Nibble_Use-NoData-values-if-they-are-the-nearest-neighbor_tag0@@": "Definierar om ${NoData}-värden i indatarastret får nagga in i det område som definieras av maskrastret.",
	"@@Nibble_Use-NoData-values-if-they-are-the-nearest-neighbor_tag1@@": "<strong>Ja</strong> – Anger att värdet för närmaste granne kommer att användas oavsett om det är ${NoData} eller ett annat datavärde i indatarastret. ${NoData}-värden i indatarastret får nagga in i områden som definieras i masken om de är den närmaste grannen. Det här är standardinställningen.",
	"@@Nibble_Use-NoData-values-if-they-are-the-nearest-neighbor_tag3@@": "<strong>Nej</strong> – Anger att endast datavärden får nagga in i områden som definieras i maskrastret. ${NoData}-värden i indatarastret tillåts inte nagga in i områden som definieras i maskrastret även om de är närmaste granne.",
	"@@Nibble_Zone-Raster_tag0@@": "Indatazonrastret.",
	"@@Nibble_Zone-Raster_tag1@@": "En zon består av alla celler i ett raster som har samma värde, oavsett om hänger samman eller inte. Indatazonlagret definierar formen, värdena och platser i zonerna. Zonrastret kan vara av heltals- eller flyttalstyp.",
	"@@Not-Equal_Cellsize-Type_tag0@@": "Välj vilka celler som ska användas i utdatarastret. Om alla indatacellernas storlekar är identiska ger alla alternativen samma resultat.",
	"@@Not-Equal_Cellsize-Type_tag1@@": "Först av – använd den första cellens storlek i indatarastren.",
	"@@Not-Equal_Cellsize-Type_tag2@@": "Sist av – använd den sista cellens storlek i indatarastren.",
	"@@Not-Equal_Cellsize-Type_tag3@@": "Max av – använd den största cellens storlek i indatarastren. Det här är standardinställningen.",
	"@@Not-Equal_Cellsize-Type_tag4@@": "Medel av – använd den genomsnittliga cellstorleken i indatarastren.",
	"@@Not-Equal_Cellsize-Type_tag5@@": "Min. av – använd den minsta cellens storlek i indatarastren.",
	"@@Not-Equal_Extent-Type_tag0@@": "Välj vilken utbredning som ska användas i utdatarastret:",
	"@@Not-Equal_Extent-Type_tag1@@": "Först av – använd det första indatarastrets utbredning för att bestämma bearbetningsutbredningen.",
	"@@Not-Equal_Extent-Type_tag2@@": "Snittet mellan – använd de överlappande pixlarnas utbredning för att bestämma bearbetningsutbredningen. Det här är standardinställningen.",
	"@@Not-Equal_Extent-Type_tag3@@": "Sist av – använd det sista indatarastrets utbredning för att bestämma bearbetningsutbredningen.",
	"@@Not-Equal_Extent-Type_tag4@@": "Unionen av – använd alla rastrens utbredning för att bestämma bearbetningsutbredningen.",
	"@@Not-Equal_Raster_tag0@@": "De indata som ska användas för jämförelse av jämlikhet av indata nummer två.",
	"@@Not-Equal_Raster_tag1@@": "Ett konstant värde kan användas som indata för denna parameter, förutsatt att ett raster anges för den andra parametern.",
	"@@Not-Equal_Raster2_tag0@@": "De indata som ska jämföras med indata nummer ett med avseende på ojämlikhet.",
	"@@Not-Equal_Raster2_tag1@@": "Ett konstant värde kan användas som indata för denna parameter, förutsatt att ett raster anges för den andra parametern.",
	"@@Pansharpening_Multispectral_tag0@@": "Det multispektrala rastret som du vill skärpa med det pankromatiska bandet.",
	"@@Pansharpening_Panchromatic_tag0@@": "Det högupplösta singelbandsrastret som ska användas till att panoreringsskärpa det lågupplösta multispektrala rastret.",
	"@@Pansharpening_Pansharpening-Type_tag0@@": "Välj den typ av algoritm för panoreringsskärpning som du vill använda,",
	"@@Pansharpening_Pansharpening-Type_tag1@@": "Brovey – använder algoritmen Brovey som bygger på en spektral modell för datasammanslagning.",
	"@@Pansharpening_Pansharpening-Type_tag2@@": "Esri – använder Esris algoritm som bygger på en spektral modell för datasammanslagning.",
	"@@Pansharpening_Pansharpening-Type_tag3@@": "Gram-Schmidt – använder algoritmen Gram-Schmidt för spektralskärpning för att skärpa multispektrala data.",
	"@@Pansharpening_Pansharpening-Type_tag4@@": "IHS – använder färgområdet Intensitet, Nyans och Mättnad för datasammanslagning.",
	"@@Pansharpening_Pansharpening-Type_tag5@@": "Medel – använder snittvärdet mellan de röda, gröna och blå värdena och det pankromatiska pixelvärdet.",
	"@@Pansharpening_Weights_tag0@@": "Ange viktningarna för de röda, gröna, blåa och infraröda banden. Alla värden bör vara inom intervallet 0 till 1.",
	"@@Path-Distance_Accumulative-Cost-Resistance-Rate_tag0@@": "Denna parameter simulerar den ökade ansträngningen för att få bukt med kostnaderna när den ackumulerade kostnaden ökar. Den används för att modellera resenärens trötthet. Den ökande ackumulerade kostnaden för att nå en cell multipliceras med motståndskostnaden och läggs till i kostnaden för att flytta till nästa cell.",
	"@@Path-Distance_Accumulative-Cost-Resistance-Rate_tag1@@": "Det är en modifierad version av en formel för sammansatt ränta (ränta på ränta) som används för att beräkna den synliga kostnaden för att flytta genom en cell. Eftersom värdet av motståndskostnaden ökar, ökar kostnaden för de celler som besöks senare. Ju högre motståndskostnad, desto högre kostnad för att nå nästa cell, vilken läggs samman för varje efterföljande rörelse. Eftersom motståndskostnaden kan liknas vid en sammansatt ränta och eftersom ackumulerade kostnadsvärden i allmänhet är mycket stora, föreslås små motståndvärden, till exempel 0,005 eller ännu mindre, beroende på de ackumulerade kostnadsvärdena.",
	"@@Path-Distance_Accumulative-Cost-Resistance-Rate_tag2@@": "Värdet måste vara större än noll. Standardkapaciteten är till udatarastrets gräns.",
	"@@Path-Distance_Capacity_tag0@@": "Definierar resenärens kostnadskapaciteten för en källa. Kostnadsberäkningarna fortsätter för varje källa tills den angivna kapaciteten uppnås.",
	"@@Path-Distance_Capacity_tag1@@": "Värdet måste vara större än noll. Standardkapaciteten är till udatarastrets gräns.",
	"@@Path-Distance_Cost-Raster_tag0@@": "Ett obligatoriskt indataraster som definierar kostnaden eller impedansen för att flytta planimetriskt genom varje cell. Värdet i varje cellposition motsvarar kostnad-per-enhetsavståndet för att flytta genom cellen. Varje cellpositions värde multipliceras med cellupplösningen och kompenserar även för diagonal rörelse för att få fram den totala kostnaden för att passera genom cellen.",
	"@@Path-Distance_Cost-Raster_tag1@@": "Värdena <strong>Kostnadsraster</strong> kan vara heltal eller flyttal, men de kan inte vara negativa eller noll.",
	"@@Path-Distance_horizontalfactor_tag0@@": "<p>Definierar förhållandet mellan den horisontella kostnadsfaktorn och den horisontella relativa rörelsevinkeln (HRMA).</p><p>Det finns flera faktorer med modifierare som identifierar ett definierat vertikalt faktordiagram. Dessutom kan en tabell användas till att skapa ett anpassat diagram. Diagrammen används till att identifiera den vertikala faktor som används vid beräkning av den totala kostnaden för att flytta in i en angränsande cell.</p><p>I förklaringarna nedan används två förkortningar: HF och HRMA. HF står för horisontalfaktor, som definierar den horisontala svårigheten man möter när man flyttar från en cell till nästa. HRMA står för horizontal relative moving angle, dvs. horisontell relativ rörelsevinkel, vilket identifierar vinkeln mellan den horisontella riktningen från en cell och rörelseriktningen.</p><p><strong>Horisontalfaktor</strong>-typerna innehåller följande:</p><ul><li><strong>Binär</strong>--Anger att om HRMA är mindre än klippvinkeln, får HF det värde som är kopplat till nollfaktorn. Annars får det ett oändligt värde.</li><li><strong>Framåt</strong>--Anger att endast rörelse framåt tillåts. HRMA måste vara större än eller lika med 0 och mindre än 90 grader (0 &lt;= HRMA &lt; 90). Om HRMA är större än 0 och mindre än 45 grader, får HF för cellen det värde som är kopplat till nollfaktorn. Om HRMA är större än eller lika med 45 grader, används sidovärdesmodifierarens värde. HF-värdet för ett valfritt HRMA-värde som är lika med eller större än 90 grader får ett oändligt värde.</li><li><strong>Linjär</strong>--Anger att HF är en inverterad linjär funktion av HRMA.</li><li><strong>Omvänd linjär</strong>--Anger att HF är en inverterad linjär funktion av HRMA.</li><li><strong>Tabell</strong>--Identifierar att en tabellfil kommer att användas för att definiera det horisontalfaktorsdiagram som används för att bestämma HF-värden.</li></ul><p>Följande är modifierare av horisontalfaktorer:</p><ul><li><strong>Nollfaktor</strong>--Fastställer den horisontalfaktor som ska användas när HRMA är noll. Denna faktor positionerar y-interceptet för någon av horisontalfaktorsfunktionerna.</li><li><strong>Klippvinkel</strong>--Definierar den HRMA-vinkel bortom vilken HF får ett oändligt värde.</li><li><strong>Lutning</strong>--Fastställer lutningen för den räta linje som används med nyckelorden för horisontalfaktor<strong>Linjär</strong>och<strong>Omvänd linjär</strong>. Lutningen anges som ett bråk av förändring på y-axeln delat med förändringen på x-axeln (45 procent lutning är 1/45, vilket blir indata som 0,02222).</li><li><strong>Sidovärde</strong>--Fastställer HF när HRMA är större än eller lika med 45 grader och mindre än 90 grader när nyckelordet för horisontalfaktor<strong>Framåt</strong>anges.</li><li><strong>Tabellnamn</strong>--Identifierar namnet på den tabell som definierar HF.</li></ul>",
	"@@Path-Distance_Horizontal-Raster_tag0@@": "Ett raster som definierar den horisontella riktningen för varje cell.",
	"@@Path-Distance_Horizontal-Raster_tag1@@": "Värdena på rastret måste vara heltal från 0 till 360, där 0 grader är norr, eller riktat mot skärmens överkant och ökar medurs. Platta områden bör ges värdet −1. Värdena på varje plats kommer att användas i kombination med <strong>Horisontalfaktor</strong> för att fastställa den uppkomna horisontella kostnaden när man flyttar från en cell till dess grannar.",
	"@@Path-Distance_Maximum-Distance_tag0@@": "Tröskeln som de ackumulerade kostnadsvärdena inte får överstiga. Om en ackumulerad kostnad för ett avstånd överstiger detta värde kommer utdatavärdet för cellens placering att vara NoData. Det maximala avståndet definierar den utbredning för vilken de ackumulerade avståndkostnaderna beräknas. Standardavståndet är till udatarastrets utbredning.",
	"@@Path-Distance_Multiplier-to-Apply-to-Costs_tag0@@": "En multiplikator som kan användas på kostnadsvärden.",
	"@@Path-Distance_Multiplier-to-Apply-to-Costs_tag1@@": "Denna parameter tillåter kontroll av färdläget eller magnituden vid en källa. Ju högre multiplikator, desto högre kostnad för att flytta igenom varje cell.",
	"@@Path-Distance_Multiplier-to-Apply-to-Costs_tag2@@": "Värdena måste vara större än noll. Standard är 1.",
	"@@Path-Distance_Multiplier-to-Apply-to-Costs_tag3@@": "Ett numeriskt värde (dubbelt) eller ett fält från <strong>Källraster</strong> kan användas för denna parameter.",
	"@@Path-Distance_Source-Raster_tag0@@": "Det obligatoriska indatarastret med källplatser.",
	"@@Path-Distance_Source-Raster_tag1@@": "Detta är ett raster som identifierar de celler eller platser från vilka den lägsta ackumulerade avståndskostnaden för varje utdatacellplats beräknas.",
	"@@Path-Distance_Source-Raster_tag2@@": "Det kan vara av heltalstyp eller flyttalstyp.",
	"@@Path-Distance_Start-Cost_tag0@@": "Startkostnaden från vilken kostnadsberäkningarna ska börja. Denna parameter tillåter specifikation av den fasta kostnaden som kan associeras med en källa. I stället för att börja på kostnaden 0, börjar kostnadsalgoritmen med det angivna värdet.",
	"@@Path-Distance_Start-Cost_tag1@@": "Värdet måste vara noll eller högre. Standard är 0.",
	"@@Path-Distance_Surface-Raster_tag0@@": "Ett raster som definierar höjdvärdena för varje cellplats.",
	"@@Path-Distance_Surface-Raster_tag1@@": "Värdena används för att beräkna det faktiska täckta ytavståndet vid passage mellan celler.",
	"@@Path-Distance_Travel-Direction_tag0@@": "Definierar resenärens riktning vid användning av källans motståndskostnad och källans startkostnad.",
	"@@Path-Distance_Travel-Direction_tag1@@": "<strong>Från källa</strong> – Källans motståndskostnad och källans startkostnad kommer att användas med början vid indatakällan för att flytta ut till icke-källcellerna. Det här är standardinställningen.",
	"@@Path-Distance_Travel-Direction_tag3@@": "<strong>Till källa</strong> – Källans motståndskostnad och källans startkostnad kommer att användas med början vid varje icke-källcell för att flytta tillbaka till indatakällan.",
	"@@Path-Distance_Travel-Direction_tag5@@": "Ange antingen nyckelordet <strong>Från källa</strong> eller <strong>Till källa</strong>, som ska tillämpas på alla källor, eller ange ett fält i <strong>Källraster</strong> som innehåller de nyckelord som ska identifiera färdriktning för varje källa. Det fältet måste innehålla strängen ${FROM_SOURCE} eller ${TO_SOURCE}.",
	"@@Path-Distance_verticalfactor_tag0@@": "<p>Definierar förhållandet mellan den vertikala kostnadsfaktorn och den vertikala relativa rörelsevinkeln (VRMA).</p><p>Det finns flera faktorer med modifierare som identifierar ett definierat vertikalt faktordiagram. Dessutom kan en tabell användas till att skapa ett anpassat diagram. Diagrammen används till att identifiera den vertikala faktor som används vid beräkning av den totala kostnaden för att flytta in i en angränsande cell.</p><p>I förklaringarna nedan används två förkortningar: VF och VRMA. VF står för vertikalfaktor, som definierar den vertikala svårigheten man möter när man flyttar från en cell till nästa. VRMA står för vertical relative moving angle, dvs. vertikal relativ rörelsevinkel, vilket identifierar lutningsvinkel mellan FRÅN-cellen och TILL-cellen.</p><p><strong>Vertikalfaktor</strong>-typerna innehåller följande:</p><ul><li><strong>Binär</strong>--Anger att om VRMA är större än den låga klippvinkeln och mindre än den höga klippvinkeln, får VF det värde som är kopplat till nollfaktorn. Annars får det ett oändligt värde.</li><li><strong>Linjär</strong>--Anger att VF är en linjär funktion av VRMA.</li><li><strong>Symmetrisk linjär</strong>--Anger att VF är en linjär funktion av VRMA på antingen den positiva eller negativa sidan av VRMA och att de två linjära funktionerna är symmetriska med avseende på VF (y)-axel.</li><li><strong>Omvänd linjär</strong>--Anger att VF är en inverterad linjär funktion av VRMA.</li><li><strong>Symmetriskt inverterad linjär</strong>--Anger att VF är en inverterad linjär funktion av VRMA på antingen den positiva eller negativa sidan av VRMA och att de två linjära funktionerna är symmetriska med avseende på VF (y)-axeln.</li><li><strong>Cos</strong>--Anger att VF är den cosinusbaserade funktionen av VRMA.</li><li><strong>Sec</strong>--Anger att VF är den sekantbaserade funktionen av VRMA.</li><li><strong>Cos-Sec</strong>--Anger att VF är den cosinusbaserade funktionen av VRMA när VRMA är negativt och den sekantbaserade funktionen av VRMA när VRMA inte är negativt.</li><li><strong>Sec-Cos</strong>--Anger att VF är den sekantbaserade funktionen av VRMA när VRMA är negativt och den cosinusbaserade funktionen av VRMA när VRMA inte är negativt.</li><li><strong>Tablell</strong>--Identifierar att en tabellfil kommer att användas för att definiera det vertikalfaktorsdiagram som används för att bestämma VF-värden.</li></ul><p>Modifierarna till de vertikala sökorden är följande:</p><ul><li><strong>Nollfaktor</strong>--Fastställer den vertikalfaktor som ska användas när VRMA är noll. Denna faktor positionerar y-interceptet av den angivna funktionen. Per definition är nollfaktorn inte tillämplig på de trigonometriska vertikalfunktionerna (COS, SEK, COS-SEK eller SEK-COS). Y-intercept definieras av dessa funktioner.</li><li><strong>Låg klippvinkel</strong>--Definierar den VRMA-vinkel under vilken VF får ett oändligt värde.</li><li><strong>Hög klippvinkel</strong>-- Definierar den VRMA-vinkel ovanför vilken VF får ett oändligt värde.</li><li><strong>Lutning</strong>--Fastställer lutningen för den räta linje som används med vertikalfaktornyckelorden<strong>Linjär</strong>och<strong>Omvänd linjär</strong>. Lutningen anges som ett bråk av förändring på y-axeln delat med förändringen på x-axeln (45 procent lutning är 1/45, vilket blir indata som 0,02222).</li><li><strong>Tabellnamn</strong>--Identifierar namnet på den tabell som definierar VF.</li></ul>",
	"@@Path-Distance_Vertical-Raster_tag0@@": "Definierar förhållandet mellan den vertikala kostnadsfaktorn och den vertikala relativa rörelsevinkeln (VRMA).",
	"@@Path-Distance_Vertical-Raster_tag1@@": "Värdena används till att beräkna lutningen som används för att identifiera den vertikala faktor som uppkommit vid förflyttning från en cell till en annan.",
	"@@Path-Distance-Allocation_Accumulative-Cost-Resistance-Rate_tag0@@": "Denna parameter simulerar den ökade ansträngningen för att få bukt med kostnaderna när den ackumulerade kostnaden ökar. Den används för att modellera resenärens trötthet. Den ökande ackumulerade kostnaden för att nå en cell multipliceras med motståndskostnaden och läggs till i kostnaden för att flytta till nästa cell.",
	"@@Path-Distance-Allocation_Accumulative-Cost-Resistance-Rate_tag1@@": "Det är en modifierad version av en formel för sammansatt ränta (ränta på ränta) som används för att beräkna den synliga kostnaden för att flytta genom en cell. Eftersom värdet av motståndskostnaden ökar, ökar kostnaden för de celler som besöks senare. Ju högre motståndskostnad, desto högre kostnad för att nå nästa cell, vilken läggs samman för varje efterföljande rörelse. Eftersom motståndskostnaden kan liknas vid en sammansatt ränta och eftersom ackumulerade kostnadsvärden i allmänhet är mycket stora, föreslås små motståndvärden, till exempel 0,005 eller ännu mindre, beroende på de ackumulerade kostnadsvärdena.",
	"@@Path-Distance-Allocation_Accumulative-Cost-Resistance-Rate_tag2@@": "Värdet måste vara större än noll. Standardkapaciteten är till udatarastrets gräns.",
	"@@Path-Distance-Allocation_Capacity_tag0@@": "Definierar resenärens kostnadskapaciteten för en källa. Kostnadsberäkningarna fortsätter för varje källa tills den angivna kapaciteten uppnås.",
	"@@Path-Distance-Allocation_Capacity_tag1@@": "Värdet måste vara större än noll. Standardkapaciteten är till udatarastrets gräns.",
	"@@Path-Distance-Allocation_Cost-Raster_tag0@@": "Ett obligatoriskt indataraster som definierar kostnaden eller impedansen för att flytta planimetriskt genom varje cell. Värdet i varje cellposition motsvarar kostnad-per-enhetsavståndet för att flytta genom cellen. Varje cellpositions värde multipliceras med cellupplösningen och kompenserar även för diagonal rörelse för att få fram den totala kostnaden för att passera genom cellen.",
	"@@Path-Distance-Allocation_Cost-Raster_tag1@@": "Värdena <strong>Kostnadsraster</strong> kan vara heltal eller flyttal, men de kan inte vara negativa eller noll.",
	"@@Path-Distance-Allocation_horizontalfactor_tag0@@": "<p>Definierar förhållandet mellan den horisontella kostnadsfaktorn och den horisontella relativa rörelsevinkeln (HRMA).</p><p>Det finns flera faktorer med modifierare som identifierar ett definierat vertikalt faktordiagram. Dessutom kan en tabell användas till att skapa ett anpassat diagram. Diagrammen används till att identifiera den vertikala faktor som används vid beräkning av den totala kostnaden för att flytta in i en angränsande cell.</p><p>I förklaringarna nedan används två förkortningar: HF och HRMA. HF står för horisontalfaktor, som definierar den horisontala svårigheten man möter när man flyttar från en cell till nästa. HRMA står för horizontal relative moving angle, dvs. horisontell relativ rörelsevinkel, vilket identifierar vinkeln mellan den horisontella riktningen från en cell och rörelseriktningen.</p><p><strong>Horisontalfaktor</strong>-typerna innehåller följande:</p><ul><li><strong>Binär</strong>--Anger att om HRMA är mindre än klippvinkeln, får HF det värde som är kopplat till nollfaktorn. Annars får det ett oändligt värde.</li><li><strong>Framåt</strong>--Anger att endast rörelse framåt tillåts. HRMA måste vara större än eller lika med 0 och mindre än 90 grader (0 &lt;= HRMA &lt; 90). Om HRMA är större än 0 och mindre än 45 grader, får HF för cellen det värde som är kopplat till nollfaktorn. Om HRMA är större än eller lika med 45 grader, används sidovärdesmodifierarens värde. HF-värdet för ett valfritt HRMA-värde som är lika med eller större än 90 grader får ett oändligt värde.</li><li><strong>Linjär</strong>--Anger att HF är en inverterad linjär funktion av HRMA.</li><li><strong>Omvänd linjär</strong>--Anger att HF är en inverterad linjär funktion av HRMA.</li><li><strong>Tabell</strong>--Identifierar att en tabellfil kommer att användas för att definiera det horisontalfaktorsdiagram som används för att bestämma HF-värden.</li></ul><p>Följande är modifierare av horisontalfaktorer:</p><ul><li><strong>Nollfaktor</strong>--Fastställer den horisontalfaktor som ska användas när HRMA är noll. Denna faktor positionerar y-interceptet för någon av horisontalfaktorsfunktionerna.</li><li><strong>Klippvinkel</strong>--Definierar den HRMA-vinkel bortom vilken HF får ett oändligt värde.</li><li><strong>Lutning</strong>--Fastställer lutningen för den räta linje som används med nyckelorden för horisontalfaktor<strong>Linjär</strong>och<strong>Omvänd linjär</strong>. Lutningen anges som ett bråk av förändring på y-axeln delat med förändringen på x-axeln (45 procent lutning är 1/45, vilket blir indata som 0,02222).</li><li><strong>Sidovärde</strong>--Fastställer HF när HRMA är större än eller lika med 45 grader och mindre än 90 grader när nyckelordet för horisontalfaktor<strong>Framåt</strong>anges.</li><li><strong>Tabellnamn</strong>--Identifierar namnet på den tabell som definierar HF.</li></ul>",
	"@@Path-Distance-Allocation_Horizontal-Raster_tag0@@": "Ett raster som definierar den horisontella riktningen för varje cell.",
	"@@Path-Distance-Allocation_Horizontal-Raster_tag1@@": "Värdena på rastret måste vara heltal från 0 till 360, där 0 grader är norr, eller riktat mot skärmens överkant och ökar medurs. Platta områden bör ges värdet −1. Värdena på varje plats kommer att användas i kombination med <strong>Horisontalfaktor</strong> för att fastställa den uppkomna horisontella kostnaden när man flyttar från en cell till dess grannar.",
	"@@Path-Distance-Allocation_Maximum-Distance_tag0@@": "Tröskeln som de ackumulerade kostnadsvärdena inte får överstiga. Om en ackumulerad kostnad för ett avstånd överstiger detta värde kommer utdatavärdet för cellens placering att vara NoData. Det maximala avståndet definierar den utbredning för vilken de ackumulerade avståndkostnaderna beräknas. Standardavståndet är till udatarastrets utbredning.",
	"@@Path-Distance-Allocation_Multiplier-to-Apply-to-Costs_tag0@@": "En multiplikator som kan användas på kostnadsvärden.",
	"@@Path-Distance-Allocation_Multiplier-to-Apply-to-Costs_tag1@@": "Denna parameter tillåter kontroll av färdläget eller magnituden vid en källa. Ju högre multiplikator, desto högre kostnad för att flytta igenom varje cell.",
	"@@Path-Distance-Allocation_Multiplier-to-Apply-to-Costs_tag2@@": "Värdena måste vara större än noll. Standard är 1.",
	"@@Path-Distance-Allocation_Multiplier-to-Apply-to-Costs_tag3@@": "Ett numeriskt värde (dubbelt) eller ett fält från <strong>Källraster</strong> kan användas för denna parameter.",
	"@@Path-Distance-Allocation_Source-Field_tag0@@": "Det fält som används för att tilldela värden till källplatser. Det måste vara av heltalstyp. Om <strong>Värderaster</strong> har ställts in kommer värdena i dessa indata att ges företräde framför varje inställning för <strong>Källfält</strong>.",
	"@@Path-Distance-Allocation_Source-Raster_tag0@@": "Det obligatoriska indatarastret med källplatser.",
	"@@Path-Distance-Allocation_Source-Raster_tag1@@": "Detta är ett raster som identifierar de celler eller platser från vilka den lägsta ackumulerade avståndskostnaden för varje utdatacellplats beräknas.",
	"@@Path-Distance-Allocation_Source-Raster_tag2@@": "Det kan vara av heltalstyp eller flyttalstyp.",
	"@@Path-Distance-Allocation_Start-Cost_tag0@@": "Startkostnaden från vilken kostnadsberäkningarna ska börja. Denna parameter tillåter specifikation av den fasta kostnaden som kan associeras med en källa. I stället för att börja på kostnaden 0, börjar kostnadsalgoritmen med det angivna värdet.",
	"@@Path-Distance-Allocation_Start-Cost_tag1@@": "Värdet måste vara noll eller högre. Standard är 0.",
	"@@Path-Distance-Allocation_Surface-Raster_tag0@@": "Ett raster som definierar höjdvärdena för varje cellplats.",
	"@@Path-Distance-Allocation_Surface-Raster_tag1@@": "Värdena används för att beräkna det faktiska täckta ytavståndet vid passage mellan celler.",
	"@@Path-Distance-Allocation_Travel-Direction_tag0@@": "Definierar resenärens riktning vid användning av källans motståndskostnad och källans startkostnad.",
	"@@Path-Distance-Allocation_Travel-Direction_tag1@@": "<strong>Från källa</strong> – Källans motståndskostnad och källans startkostnad kommer att användas med början vid indatakällan för att flytta ut till icke-källcellerna. Det här är standardinställningen.",
	"@@Path-Distance-Allocation_Travel-Direction_tag3@@": "<strong>Till källa</strong> – Källans motståndskostnad och källans startkostnad kommer att användas med början vid varje icke-källcell för att flytta tillbaka till indatakällan.",
	"@@Path-Distance-Allocation_Travel-Direction_tag5@@": "Ange antingen nyckelordet <strong>Från källa</strong> eller <strong>Till källa</strong>, som ska tillämpas på alla källor, eller ange ett fält i <strong>Källraster</strong> som innehåller de nyckelord som ska identifiera färdriktning för varje källa. Det fältet måste innehålla strängen ${FROM_SOURCE} eller ${TO_SOURCE}.",
	"@@Path-Distance-Allocation_Value-Raster_tag0@@": "Indatarasterheltalet som identifierar de zonvärden som ska användas för varje indatakällplats. För varje källplatscell kommer det värdet som definieras av <strong>Värderaster</strong> att tilldelas till alla celler som allokerats till källplatsen för beräkningen. <strong>Värderaster</strong> ges företräde framför alla eventuella inställningar av <strong>Källfält</strong>.",
	"@@Path-Distance-Allocation_verticalfactor_tag0@@": "<p>Definierar förhållandet mellan den vertikala kostnadsfaktorn och den vertikala relativa rörelsevinkeln (VRMA).</p><p>Det finns flera faktorer med modifierare som identifierar ett definierat vertikalt faktordiagram. Dessutom kan en tabell användas till att skapa ett anpassat diagram. Diagrammen används till att identifiera den vertikala faktor som används vid beräkning av den totala kostnaden för att flytta in i en angränsande cell.</p><p>I förklaringarna nedan används två förkortningar: VF och VRMA. VF står för vertikalfaktor, som definierar den vertikala svårigheten man möter när man flyttar från en cell till nästa. VRMA står för vertical relative moving angle, dvs. vertikal relativ rörelsevinkel, vilket identifierar lutningsvinkel mellan FRÅN-cellen och TILL-cellen.</p><p><strong>Vertikalfaktor</strong>-typerna innehåller följande:</p><ul><li><strong>Binär</strong>--Anger att om VRMA är större än den låga klippvinkeln och mindre än den höga klippvinkeln, får VF det värde som är kopplat till nollfaktorn. Annars får det ett oändligt värde.</li><li><strong>Linjär</strong>--Anger att VF är en linjär funktion av VRMA.</li><li><strong>Symmetrisk linjär</strong>--Anger att VF är en linjär funktion av VRMA på antingen den positiva eller negativa sidan av VRMA och att de två linjära funktionerna är symmetriska med avseende på VF (y)-axel.</li><li><strong>Omvänd linjär</strong>--Anger att VF är en inverterad linjär funktion av VRMA.</li><li><strong>Symmetriskt inverterad linjär</strong>--Anger att VF är en inverterad linjär funktion av VRMA på antingen den positiva eller negativa sidan av VRMA och att de två linjära funktionerna är symmetriska med avseende på VF (y)-axeln.</li><li><strong>Cos</strong>--Anger att VF är den cosinusbaserade funktionen av VRMA.</li><li><strong>Sec</strong>--Anger att VF är den sekantbaserade funktionen av VRMA.</li><li><strong>Cos-Sec</strong>--Anger att VF är den cosinusbaserade funktionen av VRMA när VRMA är negativt och den sekantbaserade funktionen av VRMA när VRMA inte är negativt.</li><li><strong>Sec-Cos</strong>--Anger att VF är den sekantbaserade funktionen av VRMA när VRMA är negativt och den cosinusbaserade funktionen av VRMA när VRMA inte är negativt.</li><li><strong>Tablell</strong>--Identifierar att en tabellfil kommer att användas för att definiera det vertikalfaktorsdiagram som används för att bestämma VF-värden.</li></ul><p>Modifierarna till de vertikala sökorden är följande:</p><ul><li><strong>Nollfaktor</strong>--Fastställer den vertikalfaktor som ska användas när VRMA är noll. Denna faktor positionerar y-interceptet av den angivna funktionen. Per definition är nollfaktorn inte tillämplig på de trigonometriska vertikalfunktionerna (COS, SEK, COS-SEK eller SEK-COS). Y-intercept definieras av dessa funktioner.</li><li><strong>Låg klippvinkel</strong>--Definierar den VRMA-vinkel under vilken VF får ett oändligt värde.</li><li><strong>Hög klippvinkel</strong>-- Definierar den VRMA-vinkel ovanför vilken VF får ett oändligt värde.</li><li><strong>Lutning</strong>--Fastställer lutningen för den räta linje som används med vertikalfaktornyckelorden<strong>Linjär</strong>och<strong>Omvänd linjär</strong>. Lutningen anges som ett bråk av förändring på y-axeln delat med förändringen på x-axeln (45 procent lutning är 1/45, vilket blir indata som 0,02222).</li><li><strong>Tabellnamn</strong>--Identifierar namnet på den tabell som definierar VF.</li></ul>",
	"@@Path-Distance-Allocation_Vertical-Raster_tag0@@": "Definierar förhållandet mellan den vertikala kostnadsfaktorn och den vertikala relativa rörelsevinkeln (VRMA).",
	"@@Path-Distance-Allocation_Vertical-Raster_tag1@@": "Värdena används till att beräkna lutningen som används för att identifiera den vertikala faktor som uppkommit vid förflyttning från en cell till en annan.",
	"@@Path-Distance-Back-Link_Accumulative-Cost-Resistance-Rate_tag0@@": "Denna parameter simulerar den ökade ansträngningen för att få bukt med kostnaderna när den ackumulerade kostnaden ökar. Den används för att modellera resenärens trötthet. Den ökande ackumulerade kostnaden för att nå en cell multipliceras med motståndskostnaden och läggs till i kostnaden för att flytta till nästa cell.",
	"@@Path-Distance-Back-Link_Accumulative-Cost-Resistance-Rate_tag1@@": "Det är en modifierad version av en formel för sammansatt ränta (ränta på ränta) som används för att beräkna den synliga kostnaden för att flytta genom en cell. Eftersom värdet av motståndskostnaden ökar, ökar kostnaden för de celler som besöks senare. Ju högre motståndskostnad, desto högre kostnad för att nå nästa cell, vilken läggs samman för varje efterföljande rörelse. Eftersom motståndskostnaden kan liknas vid en sammansatt ränta och eftersom ackumulerade kostnadsvärden i allmänhet är mycket stora, föreslås små motståndvärden, till exempel 0,005 eller ännu mindre, beroende på de ackumulerade kostnadsvärdena.",
	"@@Path-Distance-Back-Link_Accumulative-Cost-Resistance-Rate_tag2@@": "Värdet måste vara större än noll. Standardkapaciteten är till udatarastrets gräns.",
	"@@Path-Distance-Back-Link_Capacity_tag0@@": "Definierar resenärens kostnadskapaciteten för en källa. Kostnadsberäkningarna fortsätter för varje källa tills den angivna kapaciteten uppnås.",
	"@@Path-Distance-Back-Link_Capacity_tag1@@": "Värdet måste vara större än noll. Standardkapaciteten är till udatarastrets gräns.",
	"@@Path-Distance-Back-Link_Cost-Raster_tag0@@": "Ett obligatoriskt indataraster som definierar kostnaden eller impedansen för att flytta planimetriskt genom varje cell. Värdet i varje cellposition motsvarar kostnad-per-enhetsavståndet för att flytta genom cellen. Varje cellpositions värde multipliceras med cellupplösningen och kompenserar även för diagonal rörelse för att få fram den totala kostnaden för att passera genom cellen.",
	"@@Path-Distance-Back-Link_Cost-Raster_tag1@@": "Värdena <strong>Kostnadsraster</strong> kan vara heltal eller flyttal, men de kan inte vara negativa eller noll.",
	"@@Path-Distance-Back-Link_horizontalfactor_tag0@@": "<p>Definierar förhållandet mellan den horisontella kostnadsfaktorn och den horisontella relativa rörelsevinkeln (HRMA).</p><p>Det finns flera faktorer med modifierare som identifierar ett definierat vertikalt faktordiagram. Dessutom kan en tabell användas till att skapa ett anpassat diagram. Diagrammen används till att identifiera den vertikala faktor som används vid beräkning av den totala kostnaden för att flytta in i en angränsande cell.</p><p>I förklaringarna nedan används två förkortningar: HF och HRMA. HF står för horisontalfaktor, som definierar den horisontala svårigheten man möter när man flyttar från en cell till nästa. HRMA står för horizontal relative moving angle, dvs. horisontell relativ rörelsevinkel, vilket identifierar vinkeln mellan den horisontella riktningen från en cell och rörelseriktningen.</p><p><strong>Horisontalfaktor</strong>-typerna innehåller följande:</p><ul><li><strong>Binär</strong>--Anger att om HRMA är mindre än klippvinkeln, får HF det värde som är kopplat till nollfaktorn. Annars får det ett oändligt värde.</li><li><strong>Framåt</strong>--Anger att endast rörelse framåt tillåts. HRMA måste vara större än eller lika med 0 och mindre än 90 grader (0 &lt;= HRMA &lt; 90). Om HRMA är större än 0 och mindre än 45 grader, får HF för cellen det värde som är kopplat till nollfaktorn. Om HRMA är större än eller lika med 45 grader, används sidovärdesmodifierarens värde. HF-värdet för ett valfritt HRMA-värde som är lika med eller större än 90 grader får ett oändligt värde.</li><li><strong>Linjär</strong>--Anger att HF är en inverterad linjär funktion av HRMA.</li><li><strong>Omvänd linjär</strong>--Anger att HF är en inverterad linjär funktion av HRMA.</li><li><strong>Tabell</strong>--Identifierar att en tabellfil kommer att användas för att definiera det horisontalfaktorsdiagram som används för att bestämma HF-värden.</li></ul><p>Följande är modifierare av horisontalfaktorer:</p><ul><li><strong>Nollfaktor</strong>--Fastställer den horisontalfaktor som ska användas när HRMA är noll. Denna faktor positionerar y-interceptet för någon av horisontalfaktorsfunktionerna.</li><li><strong>Klippvinkel</strong>--Definierar den HRMA-vinkel bortom vilken HF får ett oändligt värde.</li><li><strong>Lutning</strong>--Fastställer lutningen för den räta linje som används med nyckelorden för horisontalfaktor<strong>Linjär</strong>och<strong>Omvänd linjär</strong>. Lutningen anges som ett bråk av förändring på y-axeln delat med förändringen på x-axeln (45 procent lutning är 1/45, vilket blir indata som 0,02222).</li><li><strong>Sidovärde</strong>--Fastställer HF när HRMA är större än eller lika med 45 grader och mindre än 90 grader när nyckelordet för horisontalfaktor<strong>Framåt</strong>anges.</li><li><strong>Tabellnamn</strong>--Identifierar namnet på den tabell som definierar HF.</li></ul>",
	"@@Path-Distance-Back-Link_Horizontal-Raster_tag0@@": "Ett raster som definierar den horisontella riktningen för varje cell.",
	"@@Path-Distance-Back-Link_Horizontal-Raster_tag1@@": "Värdena på rastret måste vara heltal från 0 till 360, där 0 grader är norr, eller riktat mot skärmens överkant och ökar medurs. Platta områden bör ges värdet −1. Värdena på varje plats kommer att användas i kombination med <strong>Horisontalfaktor</strong> för att fastställa den uppkomna horisontella kostnaden när man flyttar från en cell till dess grannar.",
	"@@Path-Distance-Back-Link_Maximum-Distance_tag0@@": "Tröskeln som de ackumulerade kostnadsvärdena inte får överstiga. Om en ackumulerad kostnad för ett avstånd överstiger detta värde kommer utdatavärdet för cellens placering att vara NoData. Det maximala avståndet definierar den utbredning för vilken de ackumulerade avståndkostnaderna beräknas. Standardavståndet är till udatarastrets utbredning.",
	"@@Path-Distance-Back-Link_Multiplier-to-Apply-to-Costs_tag0@@": "En multiplikator som kan användas på kostnadsvärden.",
	"@@Path-Distance-Back-Link_Multiplier-to-Apply-to-Costs_tag1@@": "Denna parameter tillåter kontroll av färdläget eller magnituden vid en källa. Ju högre multiplikator, desto högre kostnad för att flytta igenom varje cell.",
	"@@Path-Distance-Back-Link_Multiplier-to-Apply-to-Costs_tag2@@": "Värdena måste vara större än noll. Standard är 1.",
	"@@Path-Distance-Back-Link_Multiplier-to-Apply-to-Costs_tag3@@": "Ett numeriskt värde (dubbelt) eller ett fält från <strong>Källraster</strong> kan användas för denna parameter.",
	"@@Path-Distance-Back-Link_Source-Raster_tag0@@": "Det obligatoriska indatarastret med källplatser.",
	"@@Path-Distance-Back-Link_Source-Raster_tag1@@": "Detta är ett raster som identifierar de celler eller platser från vilka den lägsta ackumulerade avståndskostnaden för varje utdatacellplats beräknas.",
	"@@Path-Distance-Back-Link_Source-Raster_tag2@@": "Det kan vara av heltalstyp eller flyttalstyp.",
	"@@Path-Distance-Back-Link_Start-Cost_tag0@@": "Startkostnaden från vilken kostnadsberäkningarna ska börja. Denna parameter tillåter specifikation av den fasta kostnaden som kan associeras med en källa. I stället för att börja på kostnaden 0, börjar kostnadsalgoritmen med det angivna värdet.",
	"@@Path-Distance-Back-Link_Start-Cost_tag1@@": "Värdet måste vara noll eller högre. Standard är 0.",
	"@@Path-Distance-Back-Link_Surface-Raster_tag0@@": "Ett raster som definierar höjdvärdena för varje cellplats.",
	"@@Path-Distance-Back-Link_Surface-Raster_tag1@@": "Värdena används för att beräkna det faktiska täckta ytavståndet vid passage mellan celler.",
	"@@Path-Distance-Back-Link_Travel-Direction_tag0@@": "Definierar resenärens riktning vid användning av källans motståndskostnad och källans startkostnad.",
	"@@Path-Distance-Back-Link_Travel-Direction_tag1@@": "<strong>Från källa</strong> – Källans motståndskostnad och källans startkostnad kommer att användas med början vid indatakällan för att flytta ut till icke-källcellerna. Det här är standardinställningen.",
	"@@Path-Distance-Back-Link_Travel-Direction_tag3@@": "<strong>Till källa</strong> – Källans motståndskostnad och källans startkostnad kommer att användas med början vid varje icke-källcell för att flytta tillbaka till indatakällan.",
	"@@Path-Distance-Back-Link_Travel-Direction_tag5@@": "Ange antingen nyckelordet <strong>Från källa</strong> eller <strong>Till källa</strong>, som ska tillämpas på alla källor, eller ange ett fält i <strong>Källraster</strong> som innehåller de nyckelord som ska identifiera färdriktning för varje källa. Det fältet måste innehålla strängen ${FROM_SOURCE} eller ${TO_SOURCE}.",
	"@@Path-Distance-Back-Link_verticalfactor_tag0@@": "<p>Definierar förhållandet mellan den vertikala kostnadsfaktorn och den vertikala relativa rörelsevinkeln (VRMA).</p><p>Det finns flera faktorer med modifierare som identifierar ett definierat vertikalt faktordiagram. Dessutom kan en tabell användas till att skapa ett anpassat diagram. Diagrammen används till att identifiera den vertikala faktor som används vid beräkning av den totala kostnaden för att flytta in i en angränsande cell.</p><p>I förklaringarna nedan används två förkortningar: VF och VRMA. VF står för vertikalfaktor, som definierar den vertikala svårigheten man möter när man flyttar från en cell till nästa. VRMA står för vertical relative moving angle, dvs. vertikal relativ rörelsevinkel, vilket identifierar lutningsvinkel mellan FRÅN-cellen och TILL-cellen.</p><p><strong>Vertikalfaktor</strong>-typerna innehåller följande:</p><ul><li><strong>Binär</strong>--Anger att om VRMA är större än den låga klippvinkeln och mindre än den höga klippvinkeln, får VF det värde som är kopplat till nollfaktorn. Annars får det ett oändligt värde.</li><li><strong>Linjär</strong>--Anger att VF är en linjär funktion av VRMA.</li><li><strong>Symmetrisk linjär</strong>--Anger att VF är en linjär funktion av VRMA på antingen den positiva eller negativa sidan av VRMA och att de två linjära funktionerna är symmetriska med avseende på VF (y)-axel.</li><li><strong>Omvänd linjär</strong>--Anger att VF är en inverterad linjär funktion av VRMA.</li><li><strong>Symmetriskt inverterad linjär</strong>--Anger att VF är en inverterad linjär funktion av VRMA på antingen den positiva eller negativa sidan av VRMA och att de två linjära funktionerna är symmetriska med avseende på VF (y)-axeln.</li><li><strong>Cos</strong>--Anger att VF är den cosinusbaserade funktionen av VRMA.</li><li><strong>Sec</strong>--Anger att VF är den sekantbaserade funktionen av VRMA.</li><li><strong>Cos-Sec</strong>--Anger att VF är den cosinusbaserade funktionen av VRMA när VRMA är negativt och den sekantbaserade funktionen av VRMA när VRMA inte är negativt.</li><li><strong>Sec-Cos</strong>--Anger att VF är den sekantbaserade funktionen av VRMA när VRMA är negativt och den cosinusbaserade funktionen av VRMA när VRMA inte är negativt.</li><li><strong>Tablell</strong>--Identifierar att en tabellfil kommer att användas för att definiera det vertikalfaktorsdiagram som används för att bestämma VF-värden.</li></ul><p>Modifierarna till de vertikala sökorden är följande:</p><ul><li><strong>Nollfaktor</strong>--Fastställer den vertikalfaktor som ska användas när VRMA är noll. Denna faktor positionerar y-interceptet av den angivna funktionen. Per definition är nollfaktorn inte tillämplig på de trigonometriska vertikalfunktionerna (COS, SEK, COS-SEK eller SEK-COS). Y-intercept definieras av dessa funktioner.</li><li><strong>Låg klippvinkel</strong>--Definierar den VRMA-vinkel under vilken VF får ett oändligt värde.</li><li><strong>Hög klippvinkel</strong>-- Definierar den VRMA-vinkel ovanför vilken VF får ett oändligt värde.</li><li><strong>Lutning</strong>--Fastställer lutningen för den räta linje som används med vertikalfaktornyckelorden<strong>Linjär</strong>och<strong>Omvänd linjär</strong>. Lutningen anges som ett bråk av förändring på y-axeln delat med förändringen på x-axeln (45 procent lutning är 1/45, vilket blir indata som 0,02222).</li><li><strong>Tabellnamn</strong>--Identifierar namnet på den tabell som definierar VF.</li></ul>",
	"@@Path-Distance-Back-Link_Vertical-Raster_tag0@@": "Definierar förhållandet mellan den vertikala kostnadsfaktorn och den vertikala relativa rörelsevinkeln (VRMA).",
	"@@Path-Distance-Back-Link_Vertical-Raster_tag1@@": "Värdena används till att beräkna lutningen som används för att identifiera den vertikala faktor som uppkommit vid förflyttning från en cell till en annan.",
	"@@Plus_Cellsize-Type_tag0@@": "Välj vilka celler som ska användas i utdatarastret. Om alla indatacellernas storlekar är identiska ger alla alternativen samma resultat.",
	"@@Plus_Cellsize-Type_tag1@@": "Först av – använd den första cellens storlek i indatarastren.",
	"@@Plus_Cellsize-Type_tag2@@": "Sist av – använd den sista cellens storlek i indatarastren.",
	"@@Plus_Cellsize-Type_tag3@@": "Max av – använd den största cellens storlek i indatarastren. Det här är standardinställningen.",
	"@@Plus_Cellsize-Type_tag4@@": "Medel av – använd den genomsnittliga cellstorleken i indatarastren.",
	"@@Plus_Cellsize-Type_tag5@@": "Min. av – använd den minsta cellens storlek i indatarastren.",
	"@@Plus_Extent-Type_tag0@@": "Välj vilken utbredning som ska användas i utdatarastret:",
	"@@Plus_Extent-Type_tag1@@": "Först av – använd det första indatarastrets utbredning för att bestämma bearbetningsutbredningen.",
	"@@Plus_Extent-Type_tag2@@": "Snittet mellan – använd de överlappande pixlarnas utbredning för att bestämma bearbetningsutbredningen. Det här är standardinställningen.",
	"@@Plus_Extent-Type_tag3@@": "Sist av – använd det sista indatarastrets utbredning för att bestämma bearbetningsutbredningen.",
	"@@Plus_Extent-Type_tag4@@": "Unionen av – använd alla rastrens utbredning för att bestämma bearbetningsutbredningen.",
	"@@Plus_Raster_tag0@@": "De indata vilkas värden ska läggas till.",
	"@@Plus_Raster_tag1@@": "Ett konstant värde kan användas som indata för denna parameter, förutsatt att ett raster anges för den andra parametern.",
	"@@Plus_Raster2_tag0@@": "De indata vilkas värden ska läggas till i indata nummer ett.",
	"@@Plus_Raster2_tag1@@": "Ett konstant värde kan användas som indata för denna parameter, förutsatt att ett raster anges för den andra parametern.",
	"@@Local_Cellsize-Type_tag0@@": "Välj vilka celler som ska användas i utdatarastret. Om alla indatacellernas storlekar är identiska ger alla alternativen samma resultat.",
	"@@Local_Cellsize-Type_tag1@@": "Först av – använd den första cellens storlek i indatarastren.",
	"@@Local_Cellsize-Type_tag2@@": "Sist av – använd den sista cellens storlek i indatarastren.",
	"@@Local_Cellsize-Type_tag3@@": "Max av – använd den största cellens storlek i indatarastren. Det här är standardinställningen.",
	"@@Local_Cellsize-Type_tag4@@": "Medel av – använd den genomsnittliga cellstorleken i indatarastren.",
	"@@Local_Cellsize-Type_tag5@@": "Min av – använd den minsta cellens storlek i indatarastren.",
	"@@Local_Extent-Type_tag0@@": "Välj vilken utbredning som ska användas i utdatarastret:",
	"@@Local_Extent-Type_tag1@@": "Först av – använd det första indatarastrets utbredning för att bestämma bearbetningsutbredningen.",
	"@@Local_Extent-Type_tag2@@": "Snittet mellan – använd de överlappande pixlarnas utbredning för att bestämma bearbetningsutbredningen. Det här är standardinställningen.",
	"@@Local_Extent-Type_tag3@@": "Sist av – använd det sista indatarastrets utbredning för att bestämma bearbetningsutbredningen.",
	"@@Local_Extent-Type_tag4@@": "Unionen av – använd alla rastrens utbredning för att bestämma bearbetningsutbredningen.",
	"@@Local_Raster_tag0@@": "De indata vilkas värden ska läggas till.",
	"@@Local_Raster_tag1@@": "Ett konstant värde kan användas som indata för denna parameter, förutsatt att ett raster anges för den andra parametern.",
	"@@Local_Raster2_tag0@@": "De indata vilkas värden ska läggas till i indata nummer ett.",
	"@@Local_Raster2_tag1@@": "Ett konstant värde kan användas som indata för denna parameter, förutsatt att ett raster anges för den andra parametern.",
	"@@Local_False-Raster_tag0@@": "De indata vilkas värden ska användas som utdatapixelvärden om villkoret är falskt. Det kan vara ett heltal, ett flyttalsraster eller ett konstant värde.",
	"@@Local_True-Raster_tag0@@": "De indata vilkas värden ska användas som utdatapixelvärden om villkoret är sant. Det kan vara ett heltal, ett flyttalsraster eller ett konstant värde.",
	"@@Power_Cellsize-Type_tag0@@": "Välj vilka celler som ska användas i utdatarastret. Om alla indatacellernas storlekar är identiska ger alla alternativen samma resultat.",
	"@@Power_Cellsize-Type_tag1@@": "Först av – använd den första cellens storlek i indatarastren.",
	"@@Power_Cellsize-Type_tag2@@": "Sist av – använd den sista cellens storlek i indatarastren.",
	"@@Power_Cellsize-Type_tag3@@": "Max av – använd den största cellens storlek i indatarastren. Det här är standardinställningen.",
	"@@Power_Cellsize-Type_tag4@@": "Medel av – använd den genomsnittliga cellstorleken i indatarastren.",
	"@@Power_Cellsize-Type_tag5@@": "Min. av – använd den minsta cellens storlek i indatarastren.",
	"@@Power_Extent-Type_tag0@@": "Välj vilken utbredning som ska användas i utdatarastret:",
	"@@Power_Extent-Type_tag1@@": "Först av – använd det första indatarastrets utbredning för att bestämma bearbetningsutbredningen.",
	"@@Power_Extent-Type_tag2@@": "Snittet mellan – använd de överlappande pixlarnas utbredning för att bestämma bearbetningsutbredningen. Det här är standardinställningen.",
	"@@Power_Extent-Type_tag3@@": "Sist av – använd det sista indatarastrets utbredning för att bestämma bearbetningsutbredningen.",
	"@@Power_Extent-Type_tag4@@": "Unionen av – använd alla rastrens utbredning för att bestämma bearbetningsutbredningen.",
	"@@Power_Raster_tag0@@": "De indatavärden som ska upphöjas till potensen som definieras av <strong>Raster2</strong>.",
	"@@Power_Raster_tag3@@": "Ett konstant värde kan användas som indata för denna parameter, förutsatt att ett raster anges för den andra parametern.",
	"@@Power_Raster2_tag0@@": "De indata som avgör den potens som värdena i <strong>Raster</strong> ska upphöjas till.",
	"@@Power_Raster2_tag3@@": "Ett konstant värde kan användas som indata för denna parameter, förutsatt att ett raster anges för den andra parametern.",
	"@@Radar-Calibration_Calibration-Type_tag0@@": "Typen av kalibrering som ska utföras.",
	"@@Radar-Calibration_Calibration-Type_tag1@@": "Beta-noll – funktionen returnerar radarreflektiviteten per enhetsområde i sluttande områden. Detta är standardkalibreringstypen.",
	"@@Radar-Calibration_Calibration-Type_tag2@@": "Sigma-noll – funktionen returnerar radarreflektiviteten per enhetsområde i markområden. Resultaten är 32-bitars flyttalsvärden, som vanligen ligger i intervallet 0,0 till 1,0. Ingen dataklippning utförs om det här alternativet är markerat.",
	"@@Radar-Calibration_Calibration-Type_tag3@@": "Gamma – funktionen returnerar radarreflektiviteten per enhetsområde i ett plan som är vinkelrätt mot mätriktningen.",
	"@@Radar-Calibration_Calibration-Type_tag4@@": "Inga",
	"@@Radar-Calibration_Raster_tag0@@": "Indatarastret.",
	"@@RasterInfo_Raster-Info_tag0@@": "Markera ett rasterdataset som ska användas som mall",
	"@@RasterInfo_Raster_tag0@@": "Indatarastret.",
	"@@Rasterize-Attributes_Attribute-Field-Names_tag0@@": "En lista med fält i <strong>Zonbaserad attributtabell</strong>, där varje fält avgränsas med ett kommatecken. Värdena i varje fält kommer att representeras av ett band i utdatarastret.",
	"@@Rasterize-Attributes_Background-Value_tag0@@": "Utdatabandens ursprungliga pixelvärde i ett raster innan de mappas om.",
	"@@Rasterize-Attributes_Background-Value_tag1@@": "Om en pixel inte faller inom en zon blir den kvar som bakgrundsvärdet.",
	"@@Rasterize-Attributes_Value-Raster_tag0@@": "Det obligatoriska indatarastret.",
	"@@Rasterize-Attributes_Value-Raster_tag1@@": "Indata ska vara ett singelbandsraster. Vid användning av ett multibandsraster används bara det första bandet.",
	"@@Rasterize-Attributes_Where-Clause_tag0@@": "En valfri kompletterande fråga som tillämpas på <strong>Zonbaserad attributtabell</strong>.",
	"@@Rasterize-Attributes_Where-Clause_tag3@@": "Om du använde tabellen ovan som ett exempel, skulle frågan vara ${Variable1 = 'bare earth'}.",
	"@@Rasterize-Attributes_Zonal-Attributes-Table_tag0@@": "De zonattribut som angetts som en väg till en lokal geoobjektklass, vägen till en tabell, en URL till ett geoobjekttjänstlager eller en JSON-sträng.",
	"@@Rasterize-Attributes_Zonal-Attributes-Table_tag1@@": "I JSON beskrivs de som en samling karteringar från zon-ID:n till en heltalsmatris. ${{ zoneId:[f1,f2,...,fn], ... } }",
	"@@Rasterize-Attributes_Zone-Field_tag0@@": "Fältnamnet som innehåller zonens ID-värden.",
	"@@Rasterize-Attributes_Zone-Raster_tag0@@": "Ett valfritt singelbandsraster där varje pixel innehåller det zon-ID som är kopplat till platsen. Det zon-ID som används till att leta upp raderna i zonattributtabellen för zonspecifik integrering.",
	"@@Rasterize-Attributes_Zone-Raster_tag1@@": "Ange inte denna parameter om du bara vill importera attribut.",
	"@@Rasterize-Features_Field_tag0@@": "Välj det fält du vill använda för att identifiera varje geoobjekt.",
	"@@Rasterize-Features_Input-Features_tag0@@": "Välj den geoobjektklass som ska konverteras till rasterformat.",
	"@@Rasterize-Features_Raster_tag0@@": "Välj ett raster för att definiera cellens storlek och utbredning för geoobjektkonverteringen.",
	"@@Rasterize-Features_Resolve-Overlap-Method_tag0@@": "Bestäm hur geoobjekt som överlappar varandra ska hanteras:",
	"@@Rasterize-Features_Resolve-Overlap-Method_tag1@@": "<strong>Först</strong> – De överlappande områdena kommer att tilldelas ett värde från det första datasetet i listan.",
	"@@Rasterize-Features_Resolve-Overlap-Method_tag3@@": "<strong>Sist</strong> – De överlappande områdena kommer att tilldelas ett värde från det sista datasetet i listan.",
	"@@Rasterize-Features_Resolve-Overlap-Method_tag5@@": "<strong>Minsta</strong> – De överlappande områdena kommer att tilldelas ett värde från de mindre geoobjekten.",
	"@@Rasterize-Features_Resolve-Overlap-Method_tag7@@": "<strong>Största</strong> – De överlappande områdena kommer att tilldelas ett värde från de större geoobjekten.",
	"@@Recast_Overrides_tag0@@": "En tabell med variabelnamn och användardefinierade värden som används till att modifiera ett mosaikdataset.",
	"@@Recast_Raster_tag0@@": "Den rasterprodukt som funktionen Omarbetas ska tillämpas på.",
	"@@Region-Group_Add-Link_tag0@@": "Anger om ett länkfält läggs till i tabellen.",
	"@@Region-Group_Add-Link_tag1@@": "<strong>Lägg till länk</strong> – Ett ${LINK}-objekt kommer att läggas till i utdatarastrets tabell.",
	"@@Region-Group_Add-Link_tag3@@": "<strong>Ingen länk</strong> – Attributtabellen för utdatarastret kommer bara att innehålla ${Value}- och ${Count}-objekten.",
	"@@Region-Group_Excluded-Value_tag0@@": "Identifierar ett värde på så sätt att om en cellposition innehåller värdet utvärderas ingen geografisk anslutningsmöjlighet, oavsett hur många grannar som anges (FYRA eller ÅTTA).",
	"@@Region-Group_Excluded-Value_tag1@@": "Celler med det uteslutna värdet behandlas som NoData och elimineras från beräkningarna. Cellplatser som innehåller det uteslutna värdet kommer att få 0 på utdatarastret.",
	"@@Region-Group_Excluded-Value_tag2@@": "Det uteslutna värdet kan liknas vid begreppet bakgrundsvärde eller vid att låta tillämpa en mask. Ett värde måste anges för den här parametern om <strong>${CROSS}</strong>-parametern anges.",
	"@@Region-Group_Number-of-Neighbor-Cells_tag0@@": "Antalet angränsande celler som ska användas vid utvärdering av anslutningsmöjlighet mellan cellerna.",
	"@@Region-Group_Number-of-Neighbor-Cells_tag1@@": "<strong>FYRA</strong> – Definierar anslutningsmöjlighet mellan celler av samma värde endast om cellerna är placerade direkt till vänster, höger, över eller under de fyra närmaste grannarna. Det här är standardinställningen.",
	"@@Region-Group_Number-of-Neighbor-Cells_tag3@@": "<strong>ÅTTA</strong> – Definierar anslutningsmöjlighet mellan celler av samma värde om de är placerade inom det omedelbara 8-cellsgrannskapet för varandra. Detta inbegriper till höger, vänster, över eller diagonalt mot varandra.",
	"@@Region-Group_Zone-Connectivity_tag0@@": "Definierar vilka cellvärden som bör övervägas vid testning av anslutningsmöjlighet.",
	"@@Region-Group_Zone-Connectivity_tag1@@": "<strong>INOM</strong> – Testar anslutningsmöjlighet mellan indatavärden som är lika inom samma zon. Det här är standardinställningen.",
	"@@Region-Group_Zone-Connectivity_tag3@@": "De enda cellerna som kan grupperas är celler från samma zon (värde) som uppfyller de geografiska kraven på anslutningsmöjlighet som anges av <strong>Antal grannar</strong>-parametern (fyra- eller åttavägs).",
	"@@Region-Group_Zone-Connectivity_tag6@@": "<strong>KORSA</strong> – Testar anslutningsmöjlighet enligt de geografiska krav som anges av parametern för antalet grannar mellan celler med valfria värden, utom för värdet som ska uteslutas enligt parametern för uteslutet värde.",
	"@@Region-Group_Zone-Connectivity_tag8@@": "När detta alternativ används måste ett värde för <strong>Uteslutet värde</strong>-parametern anges.",
	"@@Region-Group_Zone-Raster_tag0@@": "Det obligatoriska indataraster vars unika förbundna områden ska identifieras.",
	"@@Region-Group_Zone-Raster_tag1@@": "Det måste vara av heltalstyp.",
	"@@Region-Grow_Fill-Value-Field_tag0@@": "Fältet i attributtabellen som definierar fyllningsvärdet för pixelgruppen. I en multibandsbild tilldelas alla band detta värde.",
	"@@Region-Grow_Max-Growth-Radius-Field_tag0@@": "Fältet i attributtabellen som definierar den maximala tillväxtradien i bildens geografiska referensenheter.",
	"@@Region-Grow_Raster_tag0@@": "Det raster som du vill använda denna funktion på.",
	"@@Region-Grow_Seed-Points_tag0@@": "En punktgeoobjektklass som fungerar som första indata till algoritmen. Varje seedpunkt motsvarar en post i attributtabellen, som innehåller den maximala tillväxtradien, likhetströskeln och fyllningsvärdesinformationen.",
	"@@Region-Grow_Similarity-Threshold-Field_tag0@@": "Fältet i attributtabellen som definierar likhetströskeln som euklidiskt avstånd i det spektrala rummet.",
	"@@Remap_Allow-Unmatched-Pixel-Values_tag0@@": "Saknade värden i omklassificeringstabellen kan behålla sitt värde eller mappas om till NoData.",
	"@@Remap_Allow-Unmatched-Pixel-Values_tag1@@": "Avmarkerad – en pixel i indatarastret som inte klassificeras om i en ommappningstabell behåller sitt värde och skrivs för sin position till utdatarastret. Det här är standardinställningen.",
	"@@Remap_Allow-Unmatched-Pixel-Values_tag2@@": "Markerad – en pixel i indatarastret som inte klassificeras om i en ommappningstabell får sitt värde ommappat till NoData för sin position till utdatarastret.",
	"@@Remap_Input-Field_tag0@@": "Välj fältet som anger det indatapixelvärde som ska mappas om.",
	"@@Remap_Input-Field_tag1@@": "Om din tabell har ett värdeintervall kommer detta att vara fältet för minimivärdet och <strong>Indatamaxfält</strong>-parametern måste också anges.",
	"@@Remap_Input-Max-Field_tag0@@": "Välj fältet för maximivärde om din tabell anger ett värdeintervall.",
	"@@Remap_List_tag0@@": "Ange kartvärdena och ange det värdeintervall för maximi- och minimivärde och de nya ommappningsvärdena. Dessutom kan värdeintervallet anges som NoData-pixlar.",
	"@@Remap_Output-Field_tag0@@": "Välj det fält som ska användas som det ommappade värdet till utdata.",
	"@@Remap_Raster_tag0@@": "Indatarastret.",
	"@@Remap_Remap-Definition-Type_tag0@@": "Välj det alternativ som du vill använda för att ställa in ommappningsvärdena:",
	"@@Remap_Remap-Definition-Type_tag1@@": "Lista – ange ett intervall med pixelvärden som ska mappas till ett utdatapixelvärde.",
	"@@Remap_Remap-Table-Type_tag0@@": "Välj den typ av tabell som ska användas för att mappa om ditt indataraster:",
	"@@Remap_Remap-Table-Type_tag1@@": "Enkel – använder indata i <strong>Ommappningstabell</strong> för att mappa om pixelvärdena för <strong>Indatafält</strong> till motsvarande värde i <strong>Utdatafält</strong>-parametern. Den här metoden cachelagrar ommappningstabellen så att den kan arbeta snabbare.",
	"@@Remap_Remap-Table-Type_tag8@@": "Dynamisk – denna metod cachelagrar inte ommappningstabellen utan skapar en fråga varje gång en förfrågan görs (panorering, zoomning eller uppdatering). Om tabellen ändras kan nästa förfrågan mappa om värdena dynamiskt.",
	"@@Remap_Remap-Table-Type_tag9@@": "Omtilldelning – en specifik tabell används för omklassificeringsprocessen, där varje rad i tabellen bara mappas om baserat på varje geoobjektgräns.",
	"@@Remap_Remap-Table_tag0@@": "Leta reda på den tabell som anger dina ommappningsvärden.",
	"@@Reproject_Raster_tag0@@": "Det rasterdataset som ska projiceras om eller mappas om.",
	"@@Reproject_Spatial-Reference_tag0@@": "Det koordinatsystem som används för till att projicera om data.",
	"@@Reproject_X-Cellsize_tag0@@": "Den x-dimension som data ska mappas om till. Det här är valfritt. Om värdet är 0 eller lägre, beräknas utbredningsområdet (utbredning och cellstorlekar) från indatarastret.",
	"@@Reproject_X-Registration-Point_tag0@@": "Den x-koordinat som används till att definiera datasetets övre vänstra hörn. Den här koordinaten måste definieras i den nya geografiska referensens enheter. Om både <strong>X-cellstorlek</strong>- och <strong>Y-cellstorlek</strong>-parametrarna är större än 0, används de tillsammans med <strong>X-registreringspunkt</strong>- och <strong>Y-registreringspunkt</strong>-parametrarna för att ange utbredningsområdet i utdata.",
	"@@Reproject_Y-Cellsize_tag0@@": "Den y-dimension som data ska mappas om till. Det här är valfritt. Om värdet är 0 eller lägre, beräknas utbredningsområdet (utbredning och cellstorlekar) från indatarastret.",
	"@@Reproject_Y-Registration-Point_tag0@@": "Den y-koordinat som används till att definiera datasetets övre vänstra hörn. Den här koordinaten måste definieras i den nya geografiska referensens enheter. Om både <strong>X-cellstorlek</strong>- och <strong>Y-cellstorlek</strong>-parametrarna är större än 0, används de tillsammans med <strong>X-registreringspunkt</strong>- och <strong>Y-registreringspunkt</strong>-parametrarna för att ange utbredningsområdet i utdata.",
	"@@Resample_Input-Cellsize_tag0@@": "Indatarastrets pixelcellstorlek.",
	"@@Resample_Output-Cellsize_tag0@@": "Utdatarastrets pixelcellstorlek. Cellstorleken kan ändras, men rasterdatasetets utbredning förblir densamma. Omsampling från en användardefinierad cellstorlek kan vara mycket långsammare än systemets standardalternativ, eftersom systemets omsampling bearbetar den minsta mängden data från närmast möjliga lösning.",
	"@@Resample_Raster_tag0@@": "Det indataraster som ska samplas om.",
	"@@Resample_Resampling-Type_tag0@@": "<strong>Närmaste granne</strong> – Beräknar utdatapixelvärdet med närmaste indatapixel. NoData-pixlar förblir oförändrade i rasterdatasetet i utdata. Det här är standardinställningen.",
	"@@Resample_Resampling-Type_tag2@@": "<strong>Bilinjär interpolation</strong> – Beräknar pixelvärdet med hjälp av det avståndsviktade värdet av de fyra närmaste pixlarna. Denna metod är beräkningsmässigt effektiv för bearbetningen.",
	"@@Resample_Resampling-Type_tag4@@": "<strong>Kubisk interpolation</strong> – Fastställer det nya värdet i en pixel baserat på inpassningen av en mjuk kurva genom de 16 närmaste indatapixelcentren.",
	"@@Resample_Resampling-Type_tag6@@": "<strong>Majoritet</strong> – Beräknar pixelvärden med majoritetsvärdet av de 16 närmaste pixlarna. NoData-pixlar förblir oförändrade i rasterdatasetet i utdata.",
	"@@Resample_Resampling-Type_tag8@@": "<strong>Bilinjär interpolering plus</strong> – Använder <strong>Bilinjär interpolation</strong>, förutom att pixlarna längs kanterna definieras som NoData och inte kopieras eller beaktas i beräkningen. Använd <strong>Bilinjär interpolering plus</strong> för tiledata eftersom kanterna då matchar bättre.",
	"@@Resample_Resampling-Type_tag14@@": "<strong>Gaussisk oskärpa</strong> – Tillämpar gaussisk faltning på källrastret och beräknar pixelvärdet med det avståndsviktade värdet av de fyra närmaste pixlarna från det oskarpa rastret. Detta passar när man ska ta bort brus omsamplade data och när man ska sampla ned till en större pixelstorlek.",
	"@@Resample_Resampling-Type_tag16@@": "<strong>Gaussisk oskärpa plus</strong> – Använder samma metod som <strong>Gaussisk oskärpa</strong>, förutom att pixlarna längs kanterna definieras som NoData och inte kopieras eller beaktas i beräkningen. Använd <strong>Gaussisk oskärpa plus</strong> för tiledata eftersom kanterna då matchar bättre.",
	"@@Resample_Resampling-Type_tag22@@": "<strong>Genomsnitt</strong> – Beräknar pixelvärden med det genomsnittliga värdet av alla överlappande pixlar för varje målpixel.",
	"@@Resample_Resampling-Type_tag24@@": "<strong>Minimum</strong> – Beräknar pixelvärden med minimivärdet av alla överlappande pixlar. NoData-pixlar förblir oförändrade i rasterdatasetet i utdata.",
	"@@Resample_Resampling-Type_tag26@@": "<strong>Maximum</strong> – Passar för kontinuerliga data. Den ger en jämnare utdatabild än omsamplingsmetoden för närmaste granne.",
	"@@Resample_Resampling-Type_tag28@@": "<strong>Vektorgenomsnitt</strong> – Beräknar ett vektorgenomsnitt av magnitud–riktning med alla involverade pixlar. Denna metod passar bara för tvåbandsraster som representerar magnitud och riktning. Den konverterar först magnitud-riktning till U-V, och tar sedan det aritmetiska medelvärdet över alla involverade pixlar för att få fram U-V för målpixeln och omvandlar det tillbaka till magnitud–riktning.",
	"@@Round-Down_Cellsize-Type_tag0@@": "Välj vilka celler som ska användas i utdatarastret. Om alla indatacellernas storlekar är identiska ger alla alternativen samma resultat.",
	"@@Round-Down_Cellsize-Type_tag1@@": "Först av – använd den första cellens storlek i indatarastren.",
	"@@Round-Down_Cellsize-Type_tag2@@": "Sist av – använd den sista cellens storlek i indatarastren.",
	"@@Round-Down_Cellsize-Type_tag3@@": "Max av – använd den största cellens storlek i indatarastren. Det här är standardinställningen.",
	"@@Round-Down_Cellsize-Type_tag4@@": "Medel av – använd den genomsnittliga cellstorleken i indatarastren.",
	"@@Round-Down_Cellsize-Type_tag5@@": "Min. av – använd den minsta cellens storlek i indatarastren.",
	"@@Round-Down_Extent-Type_tag0@@": "Välj vilken utbredning som ska användas i utdatarastret:",
	"@@Round-Down_Extent-Type_tag1@@": "Först av – använd det första indatarastrets utbredning för att bestämma bearbetningsutbredningen.",
	"@@Round-Down_Extent-Type_tag2@@": "Snittet mellan – använd de överlappande pixlarnas utbredning för att bestämma bearbetningsutbredningen. Det här är standardinställningen.",
	"@@Round-Down_Extent-Type_tag3@@": "Sist av – använd det sista indatarastrets utbredning för att bestämma bearbetningsutbredningen.",
	"@@Round-Down_Extent-Type_tag4@@": "Unionen av – använd alla rastrens utbredning för att bestämma bearbetningsutbredningen.",
	"@@Round-Down_Raster_tag0@@": "Indatavärdena som ska avrundas nedåt.",
	"@@Round-Up_Cellsize-Type_tag0@@": "Välj vilka celler som ska användas i utdatarastret. Om alla indatacellernas storlekar är identiska ger alla alternativen samma resultat.",
	"@@Round-Up_Cellsize-Type_tag1@@": "Först av – använd den första cellens storlek i indatarastren.",
	"@@Round-Up_Cellsize-Type_tag2@@": "Sist av – använd den sista cellens storlek i indatarastren.",
	"@@Round-Up_Cellsize-Type_tag3@@": "Max av – använd den största cellens storlek i indatarastren. Det här är standardinställningen.",
	"@@Round-Up_Cellsize-Type_tag4@@": "Medel av – använd den genomsnittliga cellstorleken i indatarastren.",
	"@@Round-Up_Cellsize-Type_tag5@@": "Min. av – använd den minsta cellens storlek i indatarastren.",
	"@@Round-Up_Extent-Type_tag0@@": "Välj vilken utbredning som ska användas i utdatarastret:",
	"@@Round-Up_Extent-Type_tag1@@": "Först av – använd det första indatarastrets utbredning för att bestämma bearbetningsutbredningen.",
	"@@Round-Up_Extent-Type_tag2@@": "Snittet mellan – använd de överlappande pixlarnas utbredning för att bestämma bearbetningsutbredningen. Det här är standardinställningen.",
	"@@Round-Up_Extent-Type_tag3@@": "Sist av – använd det sista indatarastrets utbredning för att bestämma bearbetningsutbredningen.",
	"@@Round-Up_Extent-Type_tag4@@": "Unionen av – använd alla rastrens utbredning för att bestämma bearbetningsutbredningen.",
	"@@Round-Up_Raster_tag0@@": "Indatavärdena som ska avrundas uppåt.",
	"@@Segment-Mean-Shift_Minimum-Segment-Size-in-Pixels_tag0@@": "Den minsta segmentstorleken, mätt i pixlar Detta värde är relaterat till din minsta mappningsenhet och filtrerar ut mindre block av pixlar. Alla segment som är mindre än det angivna värdet slås ihop med sina bäst passande grannsegment.",
	"@@Segment-Mean-Shift_Raster_tag0@@": "Det indataraster som ska segmenteras.",
	"@@Segment-Mean-Shift_Segment-boundaries-only_tag0@@": "Segmentgränserna ritas med en svart konturlinje runt varje segment. Det här är användbart så att du kan särskilja närliggande segment med liknande färger.",
	"@@Segment-Mean-Shift_Segment-boundaries-only_tag1@@": "Avmarkerad – segmentgränserna visas inte. Det här är standardinställningen.",
	"@@Segment-Mean-Shift_Segment-boundaries-only_tag2@@": "Markerad – segmentgränserna visas med svarta konturlinjer runt varje segment.",
	"@@Segment-Mean-Shift_Spatial-Detail_tag0@@": "Den relativa betydelsen av att separera objekt baserat på geografiska egenskaper.",
	"@@Segment-Mean-Shift_Spatial-Detail_tag1@@": "De giltiga heltalsvärdena är mellan 1 och 20. Lägre värden resulterar i bredare klasser och mer utjämning. Ett högre värde passar till att skilja mellan geoobjekt som är geografiskt små och samlade i kluster. Till exempel i stadsmiljö kan du klassificera allmänt oframkomliga ytgeoobjekt med en mindre geografiskt detaljrikedom, eller du kan klassificera byggnader och vägar som separata klasser med en högre geografisk detaljrikedom.",
	"@@Segment-Mean-Shift_Spectral-Detail_tag0@@": "Den relativa betydelsen av att separera objekt baserat på färgegenskaper.",
	"@@Segment-Mean-Shift_Spectral-Detail_tag1@@": "De giltiga flyttalsvärdena är mellan 1,0 och 20,0. Lägre värden resulterar i bredare klasser och mer utjämning. Ett högre värde passar när du vill skilja mellan geoobjekt med i någon grad liknande spektrala egenskaper. Med en högre spektral detaljrikedom i ett skogsområde kan du till exempel lättare skilja mellan olika trädslag.",
	"@@Segment-Mean-Shift_maximumsegmentsizeinpixels_tag0@@": "<p>Maximal segmentstorlek. Segment som är större än angiven storlek kommer att delas. Använd den här parametern för att förhindra artefakter i utdatalagret som kommer från stora segment. Standard är -1.</p>",
	"@@Sentinel-1-Radiometric-Calibration_Calibration-Type_tag0@@": "Välj en av fyra typer av kalibrering:",
	"@@Sentinel-1-Radiometric-Calibration_Calibration-Type_tag1@@": "<strong>Beta-noll</strong> – ger ett resultat med radarljusstyrkekoefficienten.",
	"@@Sentinel-1-Radiometric-Calibration_Calibration-Type_tag3@@": "<strong>Sigma-noll</strong> – bakåtstrålningen returneras till antennen från ett enhetsområde på marken som är relaterat till markintervallet.",
	"@@Sentinel-1-Radiometric-Calibration_Calibration-Type_tag5@@": "<strong>Gamma</strong> – mätning av avgiven och returnerad energi som är användbar när man tar fram strålningsdiagram för antenner.",
	"@@Sentinel-1-Radiometric-Calibration_Calibration-Type_tag7@@": "<strong>Ingen</strong> – tillämpa inte någon korrigering. Det här är standardinställningen.",
	"@@Sentinel-1-Radiometric-Calibration_Raster_tag0@@": "Det indataraster av typ Sentinel-1 Level-1 GRD eller SLC som du vill bearbeta.",
	"@@Sentinel-1-Radiometric-Calibration_Raster_tag1@@": "Funktionen använder LUT-filen till att antingen tillämpa den termiska korrigeringen eller till att ta bort korrigeringen, beroende på innehållet i LUT-filen.",
	"@@Sentinel-1-Thermal-Noise-Removal_Raster_tag0@@": "Det indataraster av typen Sentinel-1 som du vill bearbeta.",
	"@@Sentinel-1-Thermal-Noise-Removal_Raster_tag1@@": "Funktionen använder LUT-filen till att antingen tillämpa den termiska korrigeringen eller till att ta bort korrigeringen, beroende på innehållet i LUT-filen.",
	"@@Set-Null_Cellsize-Type_tag0@@": "Välj vilka celler som ska användas i utdatarastret. Om alla indatacellernas storlekar är identiska ger alla alternativen samma resultat.",
	"@@Set-Null_Cellsize-Type_tag1@@": "Först av – använd den första cellens storlek i indatarastren.",
	"@@Set-Null_Cellsize-Type_tag2@@": "Sist av – använd den sista cellens storlek i indatarastren.",
	"@@Set-Null_Cellsize-Type_tag3@@": "Max av – använd den största cellens storlek i indatarastren. Det här är standardinställningen.",
	"@@Set-Null_Cellsize-Type_tag4@@": "Medel av – använd den genomsnittliga cellstorleken i indatarastren.",
	"@@Set-Null_Cellsize-Type_tag5@@": "Min. av – använd den minsta cellens storlek i indatarastren.",
	"@@Set-Null_Extent-Type_tag0@@": "Välj vilken utbredning som ska användas i utdatarastret:",
	"@@Set-Null_Extent-Type_tag1@@": "Först av – använd det första indatarastrets utbredning för att bestämma bearbetningsutbredningen.",
	"@@Set-Null_Extent-Type_tag2@@": "Snittet mellan – använd de överlappande pixlarnas utbredning för att bestämma bearbetningsutbredningen. Det här är standardinställningen.",
	"@@Set-Null_Extent-Type_tag3@@": "Sist av – använd det sista indatarastrets utbredning för att bestämma bearbetningsutbredningen.",
	"@@Set-Null_Extent-Type_tag4@@": "Unionen av – använd alla rastrens utbredning för att bestämma bearbetningsutbredningen.",
	"@@Set-Null_False-Raster_tag0@@": "De indata vilkas värden ska användas som utdatapixelvärden om villkoret är falskt. Det kan vara ett heltal, ett flyttalsraster eller ett konstant värde.",
	"@@Set-Null_Raster_tag0@@": "Det indataraster som representerar det booleska resultatet av en logisk-matematisk rasterfunktion. Värdena kommer att vara antingen 1 (sant) eller 0 (falskt). Det kan vara ett heltal eller ett flyttalsraster.",
	"@@Shaded-Relief_Altitude_tag0@@": "Höjden är solens höjdvinkel ovanför horisonten och går från 0 till 90 grader. Värdet 0 grader anger att solen ligger precis på horisonten, på samma horisontalplan som referensramen. Värdet 90 grader anger att solen står i zenit, rakt ovanför. Standard är 45 grader över horisonten.",
	"@@Shaded-Relief_Azimuth_tag0@@": "Azimut är solens relativa position över horisonten (i grader). Positionen anges solens vinkel mätt medurs, rakt norrifrån. En azimut på 0 grader anger norr, öster är 90 grader, söder 180 grader och väst är 270 grader.",
	"@@Shaded-Relief_Color-Scheme-Type_tag0@@": "Ange om en färgramp eller en färgkarta ska användas för att visa den skuggade reliefen.",
	"@@Shaded-Relief_Color-Scheme-Type_tag1@@": "<strong>Färgramp</strong> – När du väljer <strong>Färgramp</strong> blir du uppmanad att välja en lämplig färgramp.",
	"@@Shaded-Relief_Color-Scheme-Type_tag5@@": "<strong>Färgkarta</strong> – När du väljer <strong>Färgkarta</strong> blir du att uppmanad att ange vilken färgkartefil som ska användas.",
	"@@Shaded-Relief_Disable-default-edge-pixel-interpolation_tag0@@": "Ange om standardinterpolering av kantpixlar ska inaktiveras.",
	"@@Shaded-Relief_Disable-default-edge-pixel-interpolation_tag1@@": "Avmarkerad – bilinjär omsampling kommer att tillämpas enhetligt så att den skuggade reliefen samplas om. Det här är standardinställningen.",
	"@@Shaded-Relief_Disable-default-edge-pixel-interpolation_tag2@@": "Markerad – bilinjär omsampling används inom den skuggade reliefen utom längs rastrets gränser eller bredvid pixlar med NoData. Dessa pixlar fylls med NoData eftersom detta reducerar eventuella skarpa kanteffekter som annars kan uppträda.",
	"@@Shaded-Relief_Disable-default-edge-pixel-interpolation_tag3@@": "Med det här alternativet undviks omsamplingsartefakter som kan uppstå längs kanterna av ett raster. Utdatapixlarna längs rastrets gräns eller bredvid pixlar utan något värde fylls med NoData. Därför rekommenderas att det här alternativet endast används när det finns andra raster med överlappande pixlar. När det finns överlappande pixlar kommer de här områdena med NoData att visa de överlappande pixelvärdena i stället för att vara tomma.",
	"@@Shaded-Relief_Raster_tag0@@": "Indatahöjdrastret.",
	"@@Shaded-Relief_Scaling_tag0@@": "Det skuggade resultatet skalas dynamiskt genom att z-faktorn justeras med ett av två alternativ:",
	"@@Shaded-Relief_Scaling_tag1@@": "<strong>Ingen</strong> – ingen skalning. Det här är idealiskt för ett enstaka rasterdataset som omfattar ett lokalt område. Detta rekommenderas inte för världsomfattande dataset med stora höjdvariationer eller flerskaliga kartor eftersom det kommer att producera terrängrelief med liten variation i små skalor.",
	"@@Shaded-Relief_Scaling_tag3@@": "<strong>Justerad</strong> – En ickelinjär justering tillämpas med standardinställningen <strong>Pixelstorlekspotens</strong> och <strong>Pixelstorleksfaktor</strong>, som rymmer en mängd olika höjdändringar (skala) allt eftersom kartvyn zoomas in och ut. <strong>Justerad</strong>-alternativet rekommenderas vid användning av ett världsomfattande dataset.",
	"@@Shaded-Relief_Z-Factor_tag0@@": "Z-faktorn är en skalningsfaktor som används vid konvertering av höjdvärden för två ändamål:",
	"@@Shaded-Relief_Z-Factor_tag1@@": "För att konvertera höjdenheterna (t.ex. meter eller fot) till datasetets horisontella koordinatenheter, som kan vara fot, meter eller grader",
	"@@Shaded-Relief_Z-Factor_tag2@@": "Lägga till vertikal förstoring för visuell effekt",
	"@@Shaded-Relief_Z-Factor_tag3@@": "Det skuggade resultatet skalas dynamiskt genom att z-faktorn justeras med ett av två alternativ:",
	"@@Shaded-Relief_Z-Factor_tag4@@": "<strong>Ingen</strong> – ingen skalning. Det här är idealiskt för ett enstaka rasterdataset som omfattar ett lokalt område. Detta rekommenderas inte för världsomfattande dataset med stora höjdvariationer eller flerskaliga kartor eftersom det kommer att producera terrängrelief med liten variation i små skalor.",
	"@@Shaded-Relief_Z-Factor_tag6@@": "<strong>Justerad</strong> – En ickelinjär justering tillämpas med standardinställningen <strong>Pixelstorlekspotens</strong> och <strong>Pixelstorleksfaktor</strong>, som rymmer en mängd olika höjdändringar (skala) allt eftersom kartvyn zoomas in och ut. <strong>Justerad</strong>-alternativet rekommenderas vid användning av ett världsomfattande dataset.",
	"@@Shaded-Relief_hillshadetype_tag0@@": "Styr terrängskuggningens belysningskälla.",
	"@@Shaded-Relief_hillshadetype_tag1@@": "<strong>Traditionell</strong> – beräknar terrängskuggningen från en enda belysningsriktning. Du kan ställa in alternativen <strong>Azimut</strong> och <strong>Höjd</strong> för att styra ljuskällans placering. Det här är standardinställningen.",
	"@@Shaded-Relief_hillshadetype_tag2@@": "<strong>Flerriktad</strong> – kombinerar ljus från flera ljuskällor för att representera en förbättrad visualisering av terrängen.",
	"@@Shaded-Relief_PSPower_tag0@@": "<strong>Pixelstorlekspotensen</strong> står för förändringar i höjd (eller skala) när kartvyn zoomas in och ut. Det är exponenten för pixelstorleksvillkoret i ekvationen som styr hur ofta <strong>Z-faktorn</strong> förändras för att undvika betydande reliefförluster.",
	"@@Shaded-Relief_PSPower_tag1@@": "Den här parametern är endast giltig när <strong>Skalning</strong>-typen är <strong>Justerad</strong>. Standardvärdet är 0,664.",
	"@@Shaded-Relief_PSZFactor_tag0@@": "<strong>Pixelstorleksfaktorn</strong> står för förändringar i skala när kartvyn zoomas in och ut. Den styr hur ofta <strong>Z-faktorn</strong> ändras.",
	"@@Shaded-Relief_PSZFactor_tag1@@": "Den här parametern är endast giltig när <strong>Skalning</strong>-typen är <strong>Justerad</strong>. Standardvärdet är 0,024.",
	"@@Sin_Cellsize-Type_tag0@@": "Välj vilka celler som ska användas i utdatarastret. Om alla indatacellernas storlekar är identiska ger alla alternativen samma resultat.",
	"@@Sin_Cellsize-Type_tag1@@": "Först av – använd den första cellens storlek i indatarastren.",
	"@@Sin_Cellsize-Type_tag2@@": "Sist av – använd den sista cellens storlek i indatarastren.",
	"@@Sin_Cellsize-Type_tag3@@": "Max av – använd den största cellens storlek i indatarastren. Det här är standardinställningen.",
	"@@Sin_Cellsize-Type_tag4@@": "Medel av – använd den genomsnittliga cellstorleken i indatarastren.",
	"@@Sin_Cellsize-Type_tag5@@": "Min. av – använd den minsta cellens storlek i indatarastren.",
	"@@Sin_Extent-Type_tag0@@": "Välj vilken utbredning som ska användas i utdatarastret:",
	"@@Sin_Extent-Type_tag1@@": "Först av – använd det första indatarastrets utbredning för att bestämma bearbetningsutbredningen.",
	"@@Sin_Extent-Type_tag2@@": "Snittet mellan – använd de överlappande pixlarnas utbredning för att bestämma bearbetningsutbredningen. Det här är standardinställningen.",
	"@@Sin_Extent-Type_tag3@@": "Sist av – använd det sista indatarastrets utbredning för att bestämma bearbetningsutbredningen.",
	"@@Sin_Extent-Type_tag4@@": "Unionen av – använd alla rastrens utbredning för att bestämma bearbetningsutbredningen.",
	"@@Sin_Raster_tag0@@": "De indata för vilka sinus ska beräknas.",
	"@@SinH_Cellsize-Type_tag0@@": "Välj vilka celler som ska användas i utdatarastret. Om alla indatacellernas storlekar är identiska ger alla alternativen samma resultat.",
	"@@SinH_Cellsize-Type_tag1@@": "Först av – använd den första cellens storlek i indatarastren.",
	"@@SinH_Cellsize-Type_tag2@@": "Sist av – använd den sista cellens storlek i indatarastren.",
	"@@SinH_Cellsize-Type_tag3@@": "Max av – använd den största cellens storlek i indatarastren. Det här är standardinställningen.",
	"@@SinH_Cellsize-Type_tag4@@": "Medel av – använd den genomsnittliga cellstorleken i indatarastren.",
	"@@SinH_Cellsize-Type_tag5@@": "Min. av – använd den minsta cellens storlek i indatarastren.",
	"@@SinH_Extent-Type_tag0@@": "Välj vilken utbredning som ska användas i utdatarastret:",
	"@@SinH_Extent-Type_tag1@@": "Först av – använd det första indatarastrets utbredning för att bestämma bearbetningsutbredningen.",
	"@@SinH_Extent-Type_tag2@@": "Snittet mellan – använd de överlappande pixlarnas utbredning för att bestämma bearbetningsutbredningen. Det här är standardinställningen.",
	"@@SinH_Extent-Type_tag3@@": "Sist av – använd det sista indatarastrets utbredning för att bestämma bearbetningsutbredningen.",
	"@@SinH_Extent-Type_tag4@@": "Unionen av – använd alla rastrens utbredning för att bestämma bearbetningsutbredningen.",
	"@@SinH_Raster_tag0@@": "De indata för vilka hyperbolisk sinus ska beräknas.",
	"@@Sink_Flow-Direction-Raster_tag0@@": "Det indataraster som visar riktningen för flödet ut ur varje cell.",
	"@@Sink_Flow-Direction-Raster_tag1@@": "Flödesriktningsrastret kan skapas genom att man kör funktionen <strong>Flödesriktning</strong>.",
	"@@Slope_DEM_tag0@@": "Indatahöjdrastret.",
	"@@Slope_Disable-default-edge-pixel-interpolation_tag0@@": "Med det här alternativet undviks omsamplingsartefakter som kan uppstå längs kanterna av ett raster. Utdatapixlarna längs rastrets gräns eller bredvid pixlar utan något värde fylls med NoData. Därför rekommenderas att det här alternativet endast används när det finns andra raster med överlappande pixlar. När det finns överlappande pixlar kommer de här områdena med NoData att visa de överlappande pixelvärdena i stället för att vara tomma.",
	"@@Slope_Disable-default-edge-pixel-interpolation_tag1@@": "Avmarkerad – bilinjär omsampling kommer att tillämpas enhetligt på din lutning. Det här är standardinställningen.",
	"@@Slope_Disable-default-edge-pixel-interpolation_tag2@@": "Markerad – bilinjär omsampling används inom lutningen utom längs rastrets gränser eller bredvid pixlar med NoData. Dessa pixlar fylls med NoData eftersom detta reducerar eventuella skarpa kanteffekter som annars kan uppträda.",
	"@@Slope_Scaling_tag0@@": "Sluttningens lutning kan ges i utdata antingen som ett värde uttryckt i grader eller procent. Det finns tre alternativ för <strong>Skalning</strong>:",
	"@@Slope_Scaling_tag3@@": "<strong>Grad</strong> – Sluttningens lutning beräknas i grader. Värdena kan vara mellan 0 och 90.",
	"@@Slope_Scaling_tag5@@": "<strong>Procentökning</strong> – Sluttningens lutning beräknas som procentvärden. Värdena kan vara från 0 till ett oändligt värde. En plan yta motsvarar 0 procent stigning, medan en 45-gradersyta motsvarar 100 procent stigning. Allt eftersom ytan blir mer vertikal blir procenttalet som anger stigningen allt större.",
	"@@Slope_Scaling_tag7@@": "<strong>Skalad</strong> – Sluttningens lutning beräknas på samma sätt som DEGREE, men z-faktorn justeras för skala. Använder <strong>Pixelstorlekspotens</strong>- och <strong>Pixelstorleksfaktor</strong>-värdena, som svarar för upplösningsändringarna (skala) allt eftersom kartvyn zoomas in och ut. Detta rekommenderas vid användning av världsomfattande dataset – särskilt när man använder sluttningar som ytor för visualisering.",
	"@@Slope_Scaling_tag13@@": "Z-faktorn justeras med hjälp av följande ekvation:",
	"@@Slope_Scaling_tag14@@": "Justerad Z-faktor = (Z-faktor) + (pixelstorlek)",
	"@@Slope_Scaling_tag15@@": "× (Pixelstorleksfaktor)",
	"@@Slope_Scaling_tag16@@": "Pixelstorlekspotens",
	"@@Slope_Z-Factor_tag0@@": "<strong>Z-faktorn</strong> är en skalningsfaktor som används vid konvertering av höjdvärden för två ändamål:",
	"@@Slope_Z-Factor_tag3@@": "För att konvertera höjdenheterna (t.ex. meter eller fot) till datasetets horisontella koordinatenheter, som kan vara fot, meter eller grader",
	"@@Slope_Z-Factor_tag4@@": "Lägga till vertikal förstoring för visuell effekt",
	"@@Slope_PSPower_tag0@@": "<strong>Pixelstorlekspotensen</strong> står för förändringar i höjd (eller skala) när kartvyn zoomas in och ut. Det är exponenten för pixelstorleksvillkoret i ekvationen som styr hur ofta <strong>Z-faktorn</strong> förändras för att undvika betydande reliefförluster.",
	"@@Slope_PSPower_tag1@@": "Den här parametern är endast giltig när <strong>Skalning</strong>-typen är <strong>Skalad</strong>. Standardvärdet är 0,664.",
	"@@Slope_PSZFactor_tag0@@": "<strong>Pixelstorleksfaktorn</strong> står för förändringar i skala när kartvyn zoomas in och ut. Den styr hur ofta <strong>Z-faktorn</strong> ändras.",
	"@@Slope_PSZFactor_tag1@@": "Den här parametern är endast giltig när <strong>Skalning</strong>-typen är <strong>Skalad</strong>. Standardvärdet är 0,024.",
	"@@Snap-Pour-Point_Flow-Accumulation-Raster_tag0@@": "Indataflödets ackumulationsrasterlager.",
	"@@Snap-Pour-Point_Flow-Accumulation-Raster_tag1@@": "Detta kan skapas med funktionen <strong>Flödesackumulering</strong>.",
	"@@Snap-Pour-Point_Pour-Point-Field_tag0@@": "Fält som används för att tilldela värden till hällpunktsplatser.",
	"@@Snap-Pour-Point_Pour-Point-Raster_tag0@@": "De hällpunktsplatser i indata som ska snappas.",
	"@@Snap-Pour-Point_Pour-Point-Raster_tag1@@": "För ett indatarasterlager kommer alla celler som inte är NoData (dvs. alla celler som har ett värde) att betraktas som hällpunkter och kommer att snappas.",
	"@@Snap-Pour-Point_Snap-Distance_tag0@@": "Det maximala avståndet i kartenheter till sökningen efter en cell med högre ackumulerat flöde.",
	"@@Speckle_Additive-Noise-Mean_tag0@@": "Anger medelvärdet för additivt brus. Ett högre brusmedelvärde ger mindre utjämning, medan ett lägre värde resulterar i mer utjämning.",
	"@@Speckle_Additive-Noise-Mean_tag1@@": "Den här parametern är endast giltig när <strong>Filtertyp</strong> är <strong>Lee-filter</strong> och <strong>Brusmodell</strong> är <strong>Additivt brus</strong> eller <strong>Additivt och multiplikativt brus</strong>. Standardvärdet är 0.",
	"@@Speckle_Damping-Factor_tag0@@": "Anger den exponentiella dämpningseffektens utbredning på filtrering. Ett större dämpningsvärde bevarar kanterna bättre men utjämnar i mindre grad, medan ett lägre värde ger mer utjämning. Värdet 0 resulterar i samma utdata som ett lågpassfilter.",
	"@@Speckle_Damping-Factor_tag1@@": "Den här parametern är endast giltig när <strong>Filtertyp</strong> är <strong>Förstärkt Lee-filter</strong> eller <strong>Frostfilter</strong>. Standardvärdet är 1.",
	"@@Speckle_Filter-Size_tag0@@": "Anger storleken på det pixelfönster som används till att filtrera brus:",
	"@@Speckle_Filter-Size_tag1@@": "3x3",
	"@@Speckle_Filter-Size_tag2@@": "5x5",
	"@@Speckle_Filter-Size_tag3@@": "7x7",
	"@@Speckle_Filter-Size_tag4@@": "9x9",
	"@@Speckle_Filter-Size_tag5@@": "11x11",
	"@@Speckle_Filter-Type_tag0@@": "Anger typen av filter som ska användas i utjämningsalgoritmen för att ta bort fläckbrus:",
	"@@Speckle_Filter-Type_tag1@@": "<strong>Lee-filter</strong> – Reducerar fläckbrus genom tillämpning av en geografiskt filter för varje pixel i en bild, som filtrerar data baserat på lokal statistik som beräknas inom en kvadratfönster. Detta filter är användbart när du vill utjämna fläckdata som har en additiv eller multiplikativ komponent. Det här är standardinställningen.",
	"@@Speckle_Filter-Type_tag3@@": "<strong>Förstärkt Lee-filter</strong> – En anpassad version av Lee-filtret som inkluderar <strong>Dämpningsfaktor</strong> och <strong>Antal granskningar</strong>. Detta filter är användbart när du vill minska fläckarna och samtidigt bevara texturinformationen.",
	"@@Speckle_Filter-Type_tag9@@": "<strong>Frostfilter</strong> – Reducerar fläckbrus med en exponentiellt dämpat cirkelformat symmetriskt filter som använder lokal statistik inom enskilda filterfönster. Detta filter är användbart när du vill minska fläckarna och samtidigt bevara kanter i radarbilder.",
	"@@Speckle_Filter-Type_tag11@@": "<strong>Kuan-filter</strong> – I likhet med Lee-filtret är detta filter tillämpligt på geografiska filter till varje pixel i en bild och filtrerar data baserat på lokal statistik som beräknats inom ett kvadratfönster. Detta filter är användbart när du vill minska fläckarna och samtidigt bevara kanter i radarbilder.",
	"@@Speckle_Multiplicative-Noise-Mean_tag0@@": "Anger medelvärdet för multiplikativt brus. Ett högre brusmedelvärde ger mindre utjämning, medan ett lägre värde resulterar i mer utjämning.",
	"@@Speckle_Multiplicative-Noise-Mean_tag1@@": "Den här parametern är endast giltig när <strong>Filtertyp</strong> är <strong>Lee-filter</strong> och <strong>Brusmodell</strong> är <strong>Additivt brus</strong> eller <strong>Additivt och multiplikativt brus</strong>. Standardvärdet är 1.",
	"@@Speckle_Noise-Model_tag0@@": "Anger den typ av brus som reducerar radarbildens kvalitet:",
	"@@Speckle_Noise-Model_tag1@@": "<strong>Multiplikativt brus</strong> – Slumpmässigt signalbrus som multipliceras in i den relevanta signalen under upptagning eller överföring",
	"@@Speckle_Noise-Model_tag3@@": "<strong>Additivt brus</strong> – Slumpmässigt signalbrus som adderas in i den relevanta signalen under upptagning eller överföring",
	"@@Speckle_Noise-Model_tag5@@": "<strong>Additivt och multiplikativt brus</strong> – Additivt och multiplikativt brus",
	"@@Speckle_Noise-Variance_tag0@@": "Anger radarbildens brusvarians.",
	"@@Speckle_Noise-Variance_tag1@@": "Den här parametern är endast giltig när <strong>Filtertyp</strong> är <strong>Lee-filter</strong> och <strong>Brusmodell</strong> är <strong>Additivt brus</strong> eller <strong>Additivt och multiplikativt brus</strong>. Standardvärdet är 0,25.",
	"@@Speckle_Number-of-Looks_tag0@@": "Anger antalet utseende för bilden, vilket styr bildförbättring och uppskattar brusvariansen. Ett lägre värde resulterar i mer utjämning, medan ett högre värde bevarar fler bildgeoobjekt.",
	"@@Speckle_Number-of-Looks_tag1@@": "Den här parametern är endast giltig när <strong>Filtertyp</strong> är <strong>Lee-filter</strong> och <strong>Brusmodell</strong> är <strong>Multiplikativt brus</strong>, eller när <strong>Filtertyp</strong> är <strong>Kuan-filter</strong>. Standardvärdet är 1.",
	"@@Speckle_Raster_tag0@@": "Indatarastret.",
	"@@Spectral-Conversion_Conversion-Matrix_tag0@@": "Matrisen som används till att konvertera indatarastret.",
	"@@Spectral-Conversion_Conversion-Matrix_tag1@@": "Den ekvation som används för att utföra konverteringen är:",
	"@@Spectral-Conversion_Conversion-Matrix_tag2@@": "Output Band_R = Weight_P * Band_C",
	"@@Spectral-Conversion_Conversion-Matrix_tag3@@": "där:",
	"@@Spectral-Conversion_Conversion-Matrix_tag4@@": "Band_R är ett utdataband, där R är ett tal från 1 till antalet utdataband.",
	"@@Spectral-Conversion_Conversion-Matrix_tag5@@": "Weight_P är en kommaavgränsad lista över vikter, 1 för varje indataband. Summan av vikterna för varje band ska vara lika med 1.",
	"@@Spectral-Conversion_Conversion-Matrix_tag6@@": "Band_C är indatabilden, där C är ett tal från 1 till antalet band i indatabilden.",
	"@@Spectral-Conversion_Raster_tag0@@": "Indatarastret.",
	"@@Spectral-Conversion_Raster_tag1@@": "Detta kan vara ett rasterdataset, ett mosaikdataset eller en bildtjänst.",
	"@@Spectral-Conversion_Size_tag0@@": "Antal rader och kolumner i <strong>Konverteringsmatris</strong>.",
	"@@Square_Cellsize-Type_tag0@@": "Välj vilka celler som ska användas i utdatarastret. Om alla indatacellernas storlekar är identiska ger alla alternativen samma resultat.",
	"@@Square_Cellsize-Type_tag1@@": "Först av – använd den första cellens storlek i indatarastren.",
	"@@Square_Cellsize-Type_tag2@@": "Sist av – använd den sista cellens storlek i indatarastren.",
	"@@Square_Cellsize-Type_tag3@@": "Max av – använd den största cellens storlek i indatarastren. Det här är standardinställningen.",
	"@@Square_Cellsize-Type_tag4@@": "Medel av – använd den genomsnittliga cellstorleken i indatarastren.",
	"@@Square_Cellsize-Type_tag5@@": "Min. av – använd den minsta cellens storlek i indatarastren.",
	"@@Square_Extent-Type_tag0@@": "Välj vilken utbredning som ska användas i utdatarastret:",
	"@@Square_Extent-Type_tag1@@": "Först av – använd det första indatarastrets utbredning för att bestämma bearbetningsutbredningen.",
	"@@Square_Extent-Type_tag2@@": "Snittet mellan – använd de överlappande pixlarnas utbredning för att bestämma bearbetningsutbredningen. Det här är standardinställningen.",
	"@@Square_Extent-Type_tag3@@": "Sist av – använd det sista indatarastrets utbredning för att bestämma bearbetningsutbredningen.",
	"@@Square_Extent-Type_tag4@@": "Unionen av – använd alla rastrens utbredning för att bestämma bearbetningsutbredningen.",
	"@@Square_Raster_tag0@@": "Indatavärdena som ska kvadreras.",
	"@@Square-Root_Cellsize-Type_tag0@@": "Välj vilka celler som ska användas i utdatarastret. Om alla indatacellernas storlekar är identiska ger alla alternativen samma resultat.",
	"@@Square-Root_Cellsize-Type_tag1@@": "Först av – använd den första cellens storlek i indatarastren.",
	"@@Square-Root_Cellsize-Type_tag2@@": "Sist av – använd den sista cellens storlek i indatarastren.",
	"@@Square-Root_Cellsize-Type_tag3@@": "Max av – använd den största cellens storlek i indatarastren. Det här är standardinställningen.",
	"@@Square-Root_Cellsize-Type_tag4@@": "Medel av – använd den genomsnittliga cellstorleken i indatarastren.",
	"@@Square-Root_Cellsize-Type_tag5@@": "Min. av – använd den minsta cellens storlek i indatarastren.",
	"@@Square-Root_Extent-Type_tag0@@": "Välj vilken utbredning som ska användas i utdatarastret:",
	"@@Square-Root_Extent-Type_tag1@@": "Först av – använd det första indatarastrets utbredning för att bestämma bearbetningsutbredningen.",
	"@@Square-Root_Extent-Type_tag2@@": "Snittet mellan – använd de överlappande pixlarnas utbredning för att bestämma bearbetningsutbredningen. Det här är standardinställningen.",
	"@@Square-Root_Extent-Type_tag3@@": "Sist av – använd det sista indatarastrets utbredning för att bestämma bearbetningsutbredningen.",
	"@@Square-Root_Extent-Type_tag4@@": "Unionen av – använd alla rastrens utbredning för att bestämma bearbetningsutbredningen.",
	"@@Square-Root_Raster_tag0@@": "De indatavärden som används till att hitta kvadratroten.",
	"@@Statistics-and-Histogram_Define-Statistics-and-Histogram_tag0@@": "Ange statistikvärdena för varje band.",
	"@@Statistics-and-Histogram_Define-Statistics-and-Histogram_tag1@@": "Kolumnen ${Histogram} är ett skrivskyddat fält som kan fyllas med hjälp av <strong>Import</strong>-parametern. Om du importerar en histogramfil markeras kolumnen ${Histogram} som <strong>Definierad</strong>.",
	"@@Statistics-and-Histogram_Import_tag0@@": "Importera statistik- och histograminformationen från en befintlig raster- eller XML-fil.",
	"@@Statistics-and-Histogram_Raster_tag0@@": "Det indataraster som kräver att statistiken och histogrammet anges.",
	"@@Statistics-and-Histogram_Statistics_tag0@@": "Ange statistikvärdena för varje band.",
	"@@Stream-Link_Flow-Direction-Raster_tag0@@": "Det indataraster som visar riktningen för flödet ut ur varje cell.",
	"@@Stream-Link_Flow-Direction-Raster_tag1@@": "Flödesriktningsrastret kan skapas genom att man kör funktionen <strong>Flödesriktning</strong>.",
	"@@Stream-Link_Stream-Raster_tag0@@": "Det indataströmraster som representerar ett linjärt strömnätverk.",
	"@@Stream-Order_Flow-Direction-Raster_tag0@@": "Det indataraster som visar riktningen för flödet ut ur varje cell.",
	"@@Stream-Order_Flow-Direction-Raster_tag1@@": "Flödesriktningsrastret kan skapas genom att man kör funktionen <strong>Flödesriktning</strong>.",
	"@@Stream-Order_Order-Method_tag0@@": "Den metod som används för att tilldela strömordning.",
	"@@Stream-Order_Order-Method_tag1@@": "<strong>STRAHLER</strong> – Den metod för strömordning som föreslogs av Strahler 1952. Strömordningen ökar bara när strömmar av samma ordning skär varandra. Skärningspunkten mellan en första och andra ordningens länk förblir en andra ordningens länk, snarare än att skapa en tredje ordningens länk. Det här är standardinställningen.",
	"@@Stream-Order_Order-Method_tag3@@": "<strong>SHREVE</strong> – Den metod för strömordning enligt magnitud som föreslogs av Shreve 1967. Alla länkar utan biflöden tilldelas en magnituden (storleksordningen) ett. Magnituder är additiva i nedförsbacke. När två länkar skär varandra läggs deras magnituder till och tilldelas till nedförslutningens länk.",
	"@@Stream-Order_Stream-Raster_tag0@@": "Ett indataströmraster som representerar ett linjärt strömnätverk.",
	"@@Stretch_Auto-Gamma_tag0@@": "Använd <strong>Autogamma</strong> för att beräkna gamma från datasetets statistik och histogram. Statistiken kan vara skattad statistik från själva funktionen, eller den kan skattas av programvaran om du väljer ett lager.",
	"@@Stretch_Dynamic-Range-Adjustment_tag0@@": "Markera <strong>Dynamisk intervalljustering</strong>-kryssrutan om du vill att statistiken ska beräknas endast från de pixlar som visas på skärmen. Det här alternativet används vanligen när bilden ska publiceras och användas i en webbapplikation som inte kan utföra denna typ av sträckning.",
	"@@Stretch_Estimate-Statistics_tag0@@": "Markera <strong>Beräkna statistik</strong>-kryssrutan om du vill göra en skattning av din statistik. Den skattade statistiken beräknas från ett 1 000 gånger 1 000 stort sampel från rastrets centrum och används av sträckningen.",
	"@@Stretch_Estimate-Statistics_tag3@@": "Om detta markeras och rastret innehåller statistik eller om du har angett värden i <strong>Statistik</strong>-tabellen, används de i stället för att en skattning görs, såvida inte sträckningen kräver ett histogram. Om sträckningen kräver ett histogram som inte existerar, kommer det att skattas.",
	"@@Stretch_Gamma_tag0@@": "Använd skjutreglaget för att manuellt ställa in <strong>Gamma</strong>-värde.",
	"@@Stretch_Number-Of-Standard-Deviations_tag0@@": "Ange n-värdet för hur många standardavvikelser som ska användas. Denna metod används för att understryka hur mycket geoobjektvärden kan variera från medelvärdet. Den fungerar bäst när den används på normalfördelade data.",
	"@@Stretch_Output-Maximum_tag0@@": "Ange det högsta pixelvärdet för histogrammet.",
	"@@Stretch_Output-Maximum_tag1@@": "<strong>Minimum för utdata</strong> och <strong>Maximum för utdata</strong> kommer att ange värden som sedan kommer att vara linjärt kontraststräckta.",
	"@@Stretch_Output-Minimum_tag0@@": "Ange det lägsta pixelvärdet för histogrammet.",
	"@@Stretch_Output-Minimum_tag1@@": "<strong>Minimum för utdata</strong> och <strong>Maximum för utdata</strong> kommer att ange värden som sedan kommer att vara linjärt kontraststräckta.",
	"@@Stretch_Percent-Clip-Maximum_tag0@@": "Ange den procentandel av de höga värdena som ska undantas från sträckningen.",
	"@@Stretch_Percent-Clip-Maximum_tag1@@": "De giltiga värdena är mellan 0 och 99.",
	"@@Stretch_Percent-Clip-Minimum_tag0@@": "Ange den procentandel av de låga värdena som ska undantas från sträckningen.",
	"@@Stretch_Percent-Clip-Minimum_tag1@@": "De giltiga värdena är mellan 0 och 99.",
	"@@Stretch_Raster_tag0@@": "Det indataraster som ska kontraststräckas.",
	"@@Stretch_Sigmoid-Strength-Level_tag0@@": "<strong>Styrkenivå</strong> avgör hur mycket av den sigmoidala funktionen som ska användas i sträckningen. Ett lågt värde, som 1, kommer endast att använda den mittersta delen av kurvan, vilket tenderar att producera matta och bleka färger. Ett högt värde, som 6, kommer att använda hela kurvan, vilket tenderar att producera starka och intensiva färger.",
	"@@Stretch_Statistics_tag0@@": "Du kan ange din egen statistik i dialogrutan. Som standard hämtas statistiken från data, men alla värden som du anger i denna parameter kommer att användas i stället.",
	"@@Stretch_Type_tag0@@": "Välj typ av sträckningsmetod:",
	"@@Stretch_Type_tag1@@": "Ingen – ingen kontraststräckning",
	"@@Stretch_Type_tag2@@": "StdDev – standardavvikelsesträckning",
	"@@Stretch_Type_tag3@@": "MinMax – minimum–maximum-sträckning",
	"@@Stretch_Type_tag4@@": "PercentMinMax – procentuell klippsträckning",
	"@@Stretch_Type_tag5@@": "Sigmoid – sigmoidsträckning",
	"@@Stretch_Use-Gamma_tag0@@": "Markera <strong>Använd gamma</strong>-kryssrutan om du vill använda en gammasträckning.",
	"@@Swath_Cellsize_tag0@@": "Cellstorleken för utdatarastret identifieras automatiskt, men du kan ändra detta. Cellstorleken kan ändras, men rasterdatasetets utbredning förblir densamma.",
	"@@Swath_Interpolation-Method_tag0@@": "Det finns fyra omsamplingsmetoder för den här funktionen:",
	"@@Swath_Interpolation-Method_tag1@@": "<strong>Närmaste granne</strong> – Beräknar pixelvärdet med hjälp av närmaste pixel. Om det inte finns någon källpixel kan det inte skapas någon ny pixel i utdata.",
	"@@Swath_Interpolation-Method_tag3@@": "<strong>Bilinjär</strong> – Beräknar pixelvärdet med hjälp av det avståndsviktade värdet av de fyra närmaste pixlarna.",
	"@@Swath_Interpolation-Method_tag5@@": "<strong>Linjär tinning</strong> – Använder ett triangulärt oregelbundet nätverk från mittpunkter i varje cell i det oregelbundna rastret för att interpolera en yta som sedan konverteras till ett regelbundet raster.",
	"@@Swath_Interpolation-Method_tag7@@": "<strong>Naturlig granne</strong> – Utför en tilldelning av närmaste granne och är den snabbaste av interpolationsmetoderna. Den används främst för diskreta data, till exempel en klassificering av markanvändning, eftersom den inte ändrar cellernas värden. Den maximala geografiska felet kommer att vara halva cellstorleken.",
	"@@Swath_Raster_tag0@@": "Det oregelbundna rutnätsrastret som ska samplas om.",
	"@@Tan_Cellsize-Type_tag0@@": "Välj vilka celler som ska användas i utdatarastret. Om alla indatacellernas storlekar är identiska ger alla alternativen samma resultat.",
	"@@Tan_Cellsize-Type_tag1@@": "Först av – använd den första cellens storlek i indatarastren.",
	"@@Tan_Cellsize-Type_tag2@@": "Sist av – använd den sista cellens storlek i indatarastren.",
	"@@Tan_Cellsize-Type_tag3@@": "Max av – använd den största cellens storlek i indatarastren. Det här är standardinställningen.",
	"@@Tan_Cellsize-Type_tag4@@": "Medel av – använd den genomsnittliga cellstorleken i indatarastren.",
	"@@Tan_Cellsize-Type_tag5@@": "Min. av – använd den minsta cellens storlek i indatarastren.",
	"@@Tan_Extent-Type_tag0@@": "Välj vilken utbredning som ska användas i utdatarastret:",
	"@@Tan_Extent-Type_tag1@@": "Först av – använd det första indatarastrets utbredning för att bestämma bearbetningsutbredningen.",
	"@@Tan_Extent-Type_tag2@@": "Snittet mellan – använd de överlappande pixlarnas utbredning för att bestämma bearbetningsutbredningen. Det här är standardinställningen.",
	"@@Tan_Extent-Type_tag3@@": "Sist av – använd det sista indatarastrets utbredning för att bestämma bearbetningsutbredningen.",
	"@@Tan_Extent-Type_tag4@@": "Unionen av – använd alla rastrens utbredning för att bestämma bearbetningsutbredningen.",
	"@@Tan_Raster_tag0@@": "De indata för vilka tangens ska beräknas.",
	"@@TanH_Cellsize-Type_tag0@@": "Välj vilka celler som ska användas i utdatarastret. Om alla indatacellernas storlekar är identiska ger alla alternativen samma resultat.",
	"@@TanH_Cellsize-Type_tag1@@": "Först av – använd den första cellens storlek i indatarastren.",
	"@@TanH_Cellsize-Type_tag2@@": "Sist av – använd den sista cellens storlek i indatarastren.",
	"@@TanH_Cellsize-Type_tag3@@": "Max av – använd den största cellens storlek i indatarastren. Det här är standardinställningen.",
	"@@TanH_Cellsize-Type_tag4@@": "Medel av – använd den genomsnittliga cellstorleken i indatarastren.",
	"@@TanH_Cellsize-Type_tag5@@": "Min. av – använd den minsta cellens storlek i indatarastren.",
	"@@TanH_Extent-Type_tag0@@": "Välj vilken utbredning som ska användas i utdatarastret:",
	"@@TanH_Extent-Type_tag1@@": "Först av – använd det första indatarastrets utbredning för att bestämma bearbetningsutbredningen.",
	"@@TanH_Extent-Type_tag2@@": "Snittet mellan – använd de överlappande pixlarnas utbredning för att bestämma bearbetningsutbredningen. Det här är standardinställningen.",
	"@@TanH_Extent-Type_tag3@@": "Sist av – använd det sista indatarastrets utbredning för att bestämma bearbetningsutbredningen.",
	"@@TanH_Extent-Type_tag4@@": "Unionen av – använd alla rastrens utbredning för att bestämma bearbetningsutbredningen.",
	"@@TanH_Raster_tag0@@": "De indata för vilka hyperbolisk tangens ska beräknas.",
	"@@Tasseled-Cap_Raster_tag0@@": "Det indataraster som Tasseled Cap-transformationen ska utföras på.",
	"@@Times_Cellsize-Type_tag0@@": "Välj vilka celler som ska användas i utdatarastret. Om alla indatacellernas storlekar är identiska ger alla alternativen samma resultat.",
	"@@Times_Cellsize-Type_tag1@@": "Först av – använd den första cellens storlek i indatarastren.",
	"@@Times_Cellsize-Type_tag2@@": "Sist av – använd den sista cellens storlek i indatarastren.",
	"@@Times_Cellsize-Type_tag3@@": "Max av – använd den största cellens storlek i indatarastren. Det här är standardinställningen.",
	"@@Times_Cellsize-Type_tag4@@": "Medel av – använd den genomsnittliga cellstorleken i indatarastren.",
	"@@Times_Cellsize-Type_tag5@@": "Min. av – använd den minsta cellens storlek i indatarastren.",
	"@@Times_Extent-Type_tag0@@": "Välj vilken utbredning som ska användas i utdatarastret:",
	"@@Times_Extent-Type_tag1@@": "Först av – använd det första indatarastrets utbredning för att bestämma bearbetningsutbredningen.",
	"@@Times_Extent-Type_tag2@@": "Snittet mellan – använd de överlappande pixlarnas utbredning för att bestämma bearbetningsutbredningen. Det här är standardinställningen.",
	"@@Times_Extent-Type_tag3@@": "Sist av – använd det sista indatarastrets utbredning för att bestämma bearbetningsutbredningen.",
	"@@Times_Extent-Type_tag4@@": "Unionen av – använd alla rastrens utbredning för att bestämma bearbetningsutbredningen.",
	"@@Times_Raster_tag0@@": "De indata som innehåller värdena som ska kvadreras.",
	"@@Times_Raster_tag1@@": "Ett konstant värde kan användas som indata för denna parameter, förutsatt att ett raster anges för den andra parametern.",
	"@@Times_Raster2_tag0@@": "De indata som innehåller värden som indata nummer ett ska multipliceras med.",
	"@@Times_Raster2_tag1@@": "Ett konstant värde kan användas som indata för denna parameter, förutsatt att ett raster anges för den andra parametern.",
	"@@Transpose-Bits_Bit-Pattern_tag0@@": "Välj den typ av omgörning som ska utföras eller ange en anpassad variant:",
	"@@Transpose-Bits_Bit-Pattern_tag1@@": "Landsat 8 – cirrus",
	"@@Transpose-Bits_Bit-Pattern_tag2@@": "Landsat 8 – moln",
	"@@Transpose-Bits_Bit-Pattern_tag3@@": "Landsat 8 – molnskugga",
	"@@Transpose-Bits_Bit-Pattern_tag4@@": "Landsat 8 – avsedd fyllning",
	"@@Transpose-Bits_Bit-Pattern_tag5@@": "Landsat 8 – utelämnad ram",
	"@@Transpose-Bits_Bit-Pattern_tag6@@": "Landsat 8 – snö/is",
	"@@Transpose-Bits_Bit-Pattern_tag7@@": "Landsat 8 – terrängocklusion",
	"@@Transpose-Bits_Bit-Pattern_tag8@@": "Landsat 8 – växtlighet",
	"@@Transpose-Bits_Bit-Pattern_tag9@@": "Landsat 8 – vatten",
	"@@Transpose-Bits_Bit-Pattern_tag10@@": "Användardefinierad",
	"@@Transpose-Bits_Constant-Value_tag0@@": "Ett valfritt värde som ska användas till att fylla i alla bitar som inte är involverade i omgörningen. Den här parametern exponeras när <strong>Generera fyllningsraster från konstant</strong>-parametern är inställd på <strong>Ja</strong>.",
	"@@Transpose-Bits_Fill-Raster_tag0@@": "Ange ett rasterdataset som ska användas till att fylla i alla bitar som inte är involverade i omgörningen. Den här parametern exponeras när <strong>Generera fyllningsraster från konstant</strong>-parametern är inställd på <strong>Nej</strong>.",
	"@@Transpose-Bits_Generate-Fill-Raster-from-Constant_tag0@@": "Generera ett fyllningsraster med ett konstant värde:",
	"@@Transpose-Bits_Generate-Fill-Raster-from-Constant_tag1@@": "<strong>Ja</strong> – Ett raster kommer att skapas med ett konstant värde för att fylla i de bitar som inte är involverade i omgörningen. Det här är standardinställningen.",
	"@@Transpose-Bits_Generate-Fill-Raster-from-Constant_tag3@@": "<strong>Nej</strong> – Ett raster kommer att skapas med pixelvärden från ett befintligt rasterdataset för att fylla i de bitar som inte är involverade i omgörningen.",
	"@@Transpose-Bits_Output-Bit-and-Input-Bit_tag0@@": "En skrivskyddad tabell som visar utdatabitarna och de indata som ska vara i deras ställe.",
	"@@Transpose-Bits_Raster_tag0@@": "Det indataraster som ska packas upp och mappas om.",
	"@@Unit-Conversion_From-Unit_tag0@@": "Pixlarnas ursprungliga enhetstyp.",
	"@@Unit-Conversion_Raster_tag0@@": "Indatarastret som ska innehålla de konverterade enheterna.",
	"@@Unit-Conversion_To-Unit_tag0@@": "Pixlarnas konverterade enhetstyp.",
	"@@Vector-Field_Angle-Reference-System_tag0@@": "Anger hur riktningskomponenten uppmättes.",
	"@@Vector-Field_Angle-Reference-System_tag1@@": "Geografisk – 0° pekar rakt norrut och 90° pekar rakt österut",
	"@@Vector-Field_Angle-Reference-System_tag2@@": "Aritmetisk – 0° pekar rakt österut och 90° pekar rakt norrut",
	"@@Vector-Field_Input-Data-Type_tag0@@": "Den typ av vektorfält som dina indata representerar.",
	"@@Vector-Field_Input-Data-Type_tag1@@": "Okänt – det är okänt om indata representerar U-V eller magnitud–riktning.",
	"@@Vector-Field_Input-Data-Type_tag2@@": "U-V – indata representerar U- och V-komponenterna.",
	"@@Vector-Field_Input-Data-Type_tag3@@": "Magnitud-riktning – indata representerar styrka och riktning.",
	"@@Vector-Field_Output-Data-Type_tag0@@": "Anger den typ av vektorfält som utdata kommer att representera.",
	"@@Vector-Field_Output-Data-Type_tag1@@": "Magnitud-riktning – utdata representerar styrka och riktning.",
	"@@Vector-Field_Output-Data-Type_tag2@@": "U-V – utdata representerar U- och V-komponenterna",
	"@@Vector-Field_Raster1_tag0@@": "Det första indatarastret.",
	"@@Vector-Field_Raster1_tag1@@": "Detta kommer att vara antingen U-värdet eller magnituden.",
	"@@Vector-Field_Raster2_tag0@@": "Det andra indatarastret.",
	"@@Vector-Field_Raster2_tag1@@": "Detta kommer att vara antingen V-värdet eller riktningen.",
	"@@Viewshed_Analysis-Method_tag0@@": "Välj den metod som synligheten ska beräknas med. Detta alternativ gör att du kan göra viss avkall på precision för att uppnå bättre prestanda.",
	"@@Viewshed_Analysis-Method_tag1@@": "Alla siktlinjer – en siktlinje tillämpas på varje pixel i rastret för att fastställa synliga områden. Det här är standardmetoden.",
	"@@Viewshed_Analysis-Method_tag2@@": "Siktlinjer för omkrets – siktlinjer utförs endast till pixlarna på de synliga områdenas omkrets i syfte att etablera synlighetsområden. Den här metoden har bättre prestanda än <strong>Alla siktlinjer</strong>-metoden eftersom färre siktlinjer ingår i beräkningen.",
	"@@Viewshed_Analysis-Type_tag0@@": "Välj vilken typ av synlighetsanalys du vill utföra, antingen genom att bestämma hur synlig varje cell ska vara för observatörerna, eller genom att identifiera vilka observatörer som ska vara synliga för varje ytplats.",
	"@@Viewshed_Analysis-Type_tag1@@": "Frekvens – antal gånger som varje pixelplats i indataytrastret kan ses av observationsplatserna i indata (som punkter eller brytpunkter för polylinjeobservatörsgeoobjekt). Det här är standardinställningen.",
	"@@Viewshed_Analysis-Type_tag2@@": "Observatörer – utdata anger exakt vilka observatörspunkter som ska vara synliga från varje rasterytplacering. Det tillåtna maximala antalet observatörer i indata är 32 med den här analystypen.",
	"@@Viewshed_Horizontal-End-Angle_tag0@@": "Detta värde definierar slutvinkeln för det horisontella skanningsintervallet. Värdet ska anges i grader från 0 till 360,0, där 0 är orienterat åt norr. Standardvärdet är 360,0.",
	"@@Viewshed_Horizontal-End-Angle_tag1@@": "Det kan vara ett fält i <strong>Observatörsgeoobjekt</strong>-indatadatasetet eller ett numeriskt värde. Om denna parameter är inställd på ett värde, kommer det värdet att tillämpas för alla observatörer. Om du vill ange olika värden för varje observatör, ställer du in den här parametern på ett fält i <strong>Observatörsgeoobjekt</strong>-datasetet.",
	"@@Viewshed_Horizontal-Start-Angle_tag0@@": "Detta värde definierar startvinkeln för det horisontella skanningsintervallet. Värdet ska anges i grader från 0 till 360,0, där 0 är orienterat åt norr. Standardvärdet är 0.",
	"@@Viewshed_Horizontal-Start-Angle_tag1@@": "Det kan vara ett fält i <strong>Observatörsgeoobjekt</strong>-indatasetet eller ett numeriskt värde. Om denna parameter är inställd på ett värde, kommer det värdet att tillämpas för alla observatörer. Om du vill ange olika värden för varje observatör, ställer du in den här parametern på ett fält i <strong>Observatörsgeoobjekt</strong>-datasetet.",
	"@@Viewshed_Inner-Radius-is-3D-Distance_tag0@@": "Typ av avstånd för den inre radieparametern.",
	"@@Viewshed_Inner-Radius-is-3D-Distance_tag1@@": "Avmarkerad – <strong>Inre radie</strong> ska tolkas som ett 2D-avstånd. Det här är standardinställningen.",
	"@@Viewshed_Inner-Radius-is-3D-Distance_tag4@@": "Markerad – <strong>Inre radie</strong> ska tolkas som ett 3D-avstånd.",
	"@@Viewshed_Inner-Radius_tag0@@": "Det här värdet anger det startavstånd (minimiavstånd) från vilket synlighet bestäms. Pixlar närmare än det här avståndet bedöms inte vara synliga i utdata, men de kan fortfarande blockera synligheten för pixlar mellan <strong>Inre radie</strong> och <strong>Yttre radie</strong>. Standardvärdet är 0.",
	"@@Viewshed_Inner-Radius_tag5@@": "Det kan vara ett fält i <strong>Observatörsgeoobjekt</strong>-indatasetet eller ett numeriskt värde. Om denna parameter är inställd på ett värde, kommer det värdet att tillämpas för alla observatörer. Om du vill ange olika värden för varje observatör, ställer du in den här parametern på ett fält i <strong>Observatörsgeoobjekt</strong>-datasetet.",
	"@@Viewshed_Observer-Elevation_tag0@@": "Detta värde används för att definiera observatörspunkternas eller brytpunkternas ythöjder.",
	"@@Viewshed_Observer-Elevation_tag1@@": "Det kan vara ett fält i <strong>Observatörsgeoobjekt</strong>-indatasetet eller ett numeriskt värde. Om denna parameter inte anges kommer observatörshöjden att hämtas från ytrastret med bilinjär interpolation. Om denna parameter är inställd på ett värde, kommer det värdet att tillämpas för alla observatörer. Om du vill ange olika värden för varje observatör, ställer du in den här parametern på ett fält i <strong>Observatörsgeoobjekt</strong>-datasetet.",
	"@@Viewshed_Observer-Features_tag0@@": "Den obligatoriska indatageoobjektklassen som identifierar observatörsplatserna. Den kan vara punkt, multipunkt eller polylinjegeoobjekt.",
	"@@Viewshed_Observer-Features_tag1@@": "Indatageoobjektklassen omvandlas till ett 3D-geocentriskt koordinatsystem under synlighetsberäkningen. Observatörer utanför ytrastrets utbredning eller som är placerade i NoData-celler, ignoreras i beräkningen.",
	"@@Viewshed_Observer-Offset_tag0@@": "Detta värde anger ett vertikalt avstånd (i ytenheter) som ska läggas till observatörshöjden. Det bör vara ett positivt heltal eller flyttalsvärde.",
	"@@Viewshed_Observer-Offset_tag1@@": "Det kan vara ett fält i <strong>Observatörsgeoobjekt</strong>-indatasetet eller ett numeriskt värde. Om denna parameter är inställd på ett värde, kommer det värdet att tillämpas för alla observatörer. Om du vill ange olika värden för varje observatör, ställer du in den här parametern på ett fält i <strong>Observatörsgeoobjekt</strong>-datasetet.",
	"@@Viewshed_Outer-Radius-is-3D-Distance_tag0@@": "Typ av avstånd för den yttre radieparametern.",
	"@@Viewshed_Outer-Radius-is-3D-Distance_tag1@@": "Avmarkerad – <strong>Yttre radie</strong> ska tolkas som ett 2D-avstånd. Det här är standardinställningen.",
	"@@Viewshed_Outer-Radius-is-3D-Distance_tag4@@": "Markerad – <strong>Yttre radie</strong> ska tolkas som ett 3D-avstånd.",
	"@@Viewshed_Outer-Radius_tag0@@": "Det här värdet anger det maximala avståndet från vilken synlighet bestäms. Pixlar utanför detta avstånd utesluts från analysen.",
	"@@Viewshed_Outer-Radius_tag1@@": "Det kan vara ett fält i <strong>Observatörsgeoobjekt</strong>-indatasetet eller ett numeriskt värde. Om denna parameter är inställd på ett värde, kommer det värdet att tillämpas för alla observatörer. Om du vill ange olika värden för varje observatör, ställer du in den här parametern på ett fält i <strong>Observatörsgeoobjekt</strong>-datasetet.",
	"@@Viewshed_Raster_tag0@@": "Det obligatoriska indataytrastret. Det kan vara ett heltal eller ett flyttalsraster.",
	"@@Viewshed_Raster_tag1@@": "Indata omvandlas till ett 3D-geocentriskt koordinatsystem under synlighetsberäkningen. NoData-celler på indatarastret blockera inte synlighetsbestämningen.",
	"@@Viewshed_Refractive-Coefficient_tag0@@": "Koefficienten för refraktion av synligt ljus i luften.",
	"@@Viewshed_Refractive-Coefficient_tag1@@": "Standardvärdet är 0,13.",
	"@@Viewshed_Surface-Offset_tag0@@": "Detta värde anger det vertikala avståndet (i ytenheter) som ska adderas till z-värdet för varje målpixel eftersom det bedöms för synlighet. Det bör vara ett positivt heltal eller flyttalsvärde.",
	"@@Viewshed_Surface-Offset_tag1@@": "Det kan vara ett fält i <strong>Observatörsgeoobjekt</strong>-indatasetet eller ett numeriskt värde. Om denna parameter är inställd på ett värde, kommer det värdet att tillämpas för alla observatörer. Om du vill ange olika värden för varje observatör, ställer du in den här parametern på ett fält i <strong>Observatörsgeoobjekt</strong>-datasetet.",
	"@@Viewshed_Vertical-Error_tag0@@": "Mängden osäkerhet, mätt som medelkvadratrotsfel, i ythöjdvärdena. Det är ett flyttal som representerar det förväntade felet i indatahöjdvärdena. När denna parameter tilldelas ett värde större än 0, blir utdatasynlighetsrastret flyttal. I detta fall representerar varje pixelvärde på utdatasynlighetrastret summan av sannolikheterna för att cellen är synlig för någon av observatörerna.",
	"@@Viewshed_Vertical-Error_tag1@@": "När <strong>Analystyp</strong> är <strong>Observatörer</strong> eller <strong>Analysmetod</strong> är <strong>Siktlinjer för omkrets</strong>, inaktiveras parametern.",
	"@@Viewshed_Vertical-Lower-Angle_tag0@@": "Detta värde definierar den nedre vertikala vinkelgränsen för skanningen nedanför ett horisontalplan. Värdet ska anges i grader från -90,0 till 0, vilket kan vara ett heltal eller ett flyttal. Standardvärdet är -90,0.",
	"@@Viewshed_Vertical-Lower-Angle_tag1@@": "Det kan vara ett fält i <strong>Observatörsgeoobjekt</strong>-indatasetet eller ett numeriskt värde. Om denna parameter är inställd på ett värde, kommer det värdet att tillämpas för alla observatörer. Om du vill ange olika värden för varje observatör, ställer du in den här parametern på ett fält i <strong>Observatörsgeoobjekt</strong>-datasetet.",
	"@@Viewshed_Vertical-Upper-Angle_tag0@@": "Detta värde definierar den övre vertikala vinkelgränsen för skanningen ovanför ett horisontalplan. Värdet ska anges i grader från 0 till 90,0, vilket kan vara ett heltal eller ett flyttal. Standardvärdet är 90,0.",
	"@@Viewshed_Vertical-Upper-Angle_tag1@@": "Det kan vara ett fält i <strong>Observatörsgeoobjekt</strong>-indatasetet eller ett numeriskt värde. Om denna parameter är inställd på ett värde, kommer det värdet att tillämpas för alla observatörer. Om du vill ange olika värden för varje observatör, ställer du in den här parametern på ett fält i <strong>Observatörsgeoobjekt</strong>-datasetet.",
	"@@Watershed_Flow-Direction-Raster_tag0@@": "Det indataraster som visar riktningen för flödet ut ur varje cell.",
	"@@Watershed_Flow-Direction-Raster_tag1@@": "Flödesriktningsrastret kan skapas genom att man kör funktionen <strong>Flödesriktning</strong>.",
	"@@Watershed_Pour-Point(s)-Raster_tag0@@": "Indatahällpunktsplatserna.",
	"@@Watershed_Pour-Point(s)-Raster_tag1@@": "Detta raster representerar celler ovanför vilka avrinningsområdet, eller flodområdet, kommer att fastställas. Alla celler som inte är NoData används som källceller.",
	"@@Watershed_Pour-Point-Field_tag0@@": "Fält som används för att tilldela värden till hällpunktsplatser.",
	"@@Watershed_Pour-Point-Field_tag1@@": "Om det är ett dataset med rasterhällpunkter, används ${Value} som standard.",
	"@@Weighted-Overlay_Cellsize-Type_tag0@@": "Välj vilka celler som ska användas i utdatarastret. Om alla indatacellernas storlekar är identiska ger alla alternativen samma resultat.",
	"@@Weighted-Overlay_Cellsize-Type_tag1@@": "Först av – använd den första cellens storlek i indatarastren.",
	"@@Weighted-Overlay_Cellsize-Type_tag2@@": "Min. av – använd den minsta cellens storlek i indatarastren.",
	"@@Weighted-Overlay_Cellsize-Type_tag3@@": "Max av – använd den största cellens storlek i indatarastren. Det här är standardinställningen.",
	"@@Weighted-Overlay_Cellsize-Type_tag4@@": "Medel av – använd den genomsnittliga cellstorleken i indatarastren.",
	"@@Weighted-Overlay_Cellsize-Type_tag5@@": "Sist av – använd den sista cellens storlek i indatarastren.",
	"@@Weighted-Overlay_Extent-Type_tag0@@": "Välj vilken utbredning som ska användas i utdatarastret:",
	"@@Weighted-Overlay_Extent-Type_tag1@@": "Först av – använd det första indatarastrets utbredning för att bestämma bearbetningsutbredningen.",
	"@@Weighted-Overlay_Extent-Type_tag2@@": "Snittet mellan – använd de överlappande pixlarnas utbredning för att bestämma bearbetningsutbredningen. Det här är standardinställningen.",
	"@@Weighted-Overlay_Extent-Type_tag3@@": "Unionen av – använd alla rastrens utbredning för att bestämma bearbetningsutbredningen.",
	"@@Weighted-Overlay_Extent-Type_tag4@@": "Sist av – använd det sista indatarastrets utbredning för att bestämma bearbetningsutbredningen.",
	"@@Weighted-Overlay_Scales_tag0@@": "Intervallet för de nya värden som de gamla värden ska mappas om med.",
	"@@Weighted-Overlay_Weighted-Overlay-Table_tag0@@": "Den viktade överlagringstabellen består av fyra delar:",
	"@@Weighted-Overlay_Weighted-Overlay-Table_tag1@@": "Lager – alla indataraster måste vara av typen heltal.",
	"@@Weighted-Overlay_Weighted-Overlay-Table_tag2@@": "Inflytande – varje indataraster viktas enligt dess betydelse, eller dess inflytande, som en relativ procentandel. Summan av procentinflytandeviktningarna måste vara 100, och varje viktning måste anges med heltalsvärden.",
	"@@Weighted-Overlay_Weighted-Overlay-Table_tag3@@": "Fält – ett heltal eller strängfält i indatarastret som ska användas för viktningen.",
	"@@Weighted-Overlay_Weighted-Overlay-Table_tag4@@": "Ommappningstabell – varje värde i ett indataraster tilldelas ett nytt skalvärdet baserat på ommappningstabellen. Skalvärdet kan vara ett giltigt värde eller en NoData-värde.",
	"@@Weighted-Sum_Cellsize-Type_tag0@@": "Välj vilka celler som ska användas i utdatarastret. Om alla indatacellernas storlekar är identiska ger alla alternativen samma resultat.",
	"@@Weighted-Sum_Cellsize-Type_tag1@@": "Först av – använd den första cellens storlek i indatarastren.",
	"@@Weighted-Sum_Cellsize-Type_tag2@@": "Sist av – använd den sista cellens storlek i indatarastren.",
	"@@Weighted-Sum_Cellsize-Type_tag3@@": "Max av – använd den största cellens storlek i indatarastren. Det här är standardinställningen.",
	"@@Weighted-Sum_Cellsize-Type_tag4@@": "Medel av – använd den genomsnittliga cellstorleken i indatarastren.",
	"@@Weighted-Sum_Cellsize-Type_tag5@@": "Min. av – använd den minsta cellens storlek i indatarastren.",
	"@@Weighted-Sum_Extent-Type_tag0@@": "Välj vilken utbredning som ska användas i utdatarastret:",
	"@@Weighted-Sum_Extent-Type_tag1@@": "Först av – använd det första indatarastrets utbredning för att bestämma bearbetningsutbredningen.",
	"@@Weighted-Sum_Extent-Type_tag2@@": "Snittet mellan – använd de överlappande pixlarnas utbredning för att bestämma bearbetningsutbredningen. Det här är standardinställningen.",
	"@@Weighted-Sum_Extent-Type_tag3@@": "Sist av – använd det sista indatarastrets utbredning för att bestämma bearbetningsutbredningen.",
	"@@Weighted-Sum_Extent-Type_tag4@@": "Unionen av – använd alla rastrens utbredning för att bestämma bearbetningsutbredningen.",
	"@@Weighted-Sum_Weighted-Sum-Table_tag0@@": "Den viktade summatabellen definieras av tre egenskaper:",
	"@@Weighted-Sum_Weighted-Sum-Table_tag1@@": "Lager – det raster som ska viktas.",
	"@@Weighted-Sum_Weighted-Sum-Table_tag2@@": "Fält – fältet i det raster som ska användas för viktningen.",
	"@@Weighted-Sum_Weighted-Sum-Table_tag3@@": "Vikt – det viktvärde med vilket rastret ska multipliceras. Det kan vara ett valfritt positivt eller negativt decimaltal.",
	"@@Wind-Chill_Temperature-Raster_tag0@@": "Ett singelbandsraster där pixelvärdena representerar omgivningens lufttemperatur.",
	"@@Wind-Chill_Temperature-Units_tag0@@": "Den måttenhet som är kopplad till indatatemperaturrastret. Tillgängliga indataenheter är Celsius, Fahrenheit och Kelvin.",
	"@@Wind-Chill_Wind-Chill-Units_tag0@@": "Den måttenhet som är kopplad till utdatarastret. Tillgängliga utdataenheter är Celsius, Fahrenheit och Kelvin.",
	"@@Wind-Chill_Wind-Speed-Raster_tag0@@": "Ett singelbandsraster där pixelvärdena vindhastigheten.",
	"@@Wind-Chill_Wind-Speed-Units_tag0@@": "Definierar måttenheten för vindhastighetsrastret:",
	"@@Wind-Chill_Wind-Speed-Units_tag1@@": "Miles i timmen (mph)",
	"@@Wind-Chill_Wind-Speed-Units_tag2@@": "Kilometer i timmen (km/h)",
	"@@Wind-Chill_Wind-Speed-Units_tag3@@": "Meter per sekund (m/s)",
	"@@Wind-Chill_Wind-Speed-Units_tag4@@": "Fot per sekund (ft/s)",
	"@@Wind-Chill_Wind-Speed-Units_tag5@@": "Knop (kn)",
	"@@Zonal-Remap_Background-Value_tag0@@": "Utdatarastrets ursprungliga pixelvärde innan indatapixlarna mappas om.",
	"@@Zonal-Remap_Default-Output-Value_tag0@@": "Det värde som ska tilldelas till en pixel som inte uppfyller något av villkoren som angetts i <strong>Zonbaserad attributtabell</strong>.",
	"@@Zonal-Remap_Default-Output-Value_tag3@@": "Detta kommer också att vara utdatapixelns värde om antingen <strong>Fältnamn för utdatavärde</strong>-parametern inte anges eller om det motsvarande zonbaserade tröskelvärdets utdatavärdet inte anges i <strong>Zonbaserad attributtabell</strong>.",
	"@@Zonal-Remap_Maximum-Value-Field-Name_tag0@@": "Fältnamnet som innehåller det högsta värdet under vilket en indatapixel mappas om.",
	"@@Zonal-Remap_Maximum-Value-Field-Name_tag1@@": "Om det inte anges eller om fältets värdet är null, testas inte pixelvärdena för högsta värde.",
	"@@Zonal-Remap_Minimum-Value-Field-Name_tag0@@": "Fältnamnet som innehåller det lägsta värdet över vilket en indatapixel mappas om.",
	"@@Zonal-Remap_Minimum-Value-Field-Name_tag1@@": "Om det inte anges eller om fältets värdet är null, testas inte pixelvärdena för lägsta värde.",
	"@@Zonal-Remap_Output-Value-Field-Name_tag0@@": "Fältnamnet som innehåller målvärdet till vilket en indatapixel mappas om.",
	"@@Zonal-Remap_Output-Value-Field-Name_tag1@@": "Om det inte anges eller om fältets värdet är null, anges ommappade pixelvärden till <strong>Standardutdatavärde</strong>.",
	"@@Zonal-Remap_Value-Raster_tag0@@": "Ett obligatoriskt singelbandsraster i indata som innehåller pixelvärden ska mappas om.",
	"@@Zonal-Remap_Where-Clause_tag0@@": "En valfri fråga som tillämpas på <strong>Zonbaserad attributtabell</strong>.",
	"@@Zonal-Remap_Where-Clause_tag3@@": "Om du använde tabellen ovan som ett exempel, skulle frågan vara ${Variable1 = 'bare earth' AND Variable2 = 'California'}.",
	"@@Zonal-Remap_Zonal-Attributes-Table_tag0@@": "En obligatorisk indatatabell som innehåller minst tre fält. Den måste ha ett lägsta tröskelvärde, ett högsta tröskelvärde och ett målvärde. Målvärdet är det fält som kommer att innehålla det ommappade värdet.",
	"@@Zonal-Remap_Zonal-Attributes-Table_tag1@@": "Filens format kan vara en geoobjektklass, en geoobjekttjänst eller en valfri tabelltyp som stöds av ArcGIS.",
	"@@Zonal-Remap_Zone-Field_tag0@@": "Fältnamnet i <strong>Zonbaserad attributtabell</strong> som innehåller zonens ID-värden.",
	"@@Zonal-Remap_Zone-Field_tag3@@": "Zonens ID-värden är direkt knutna till zon-ID:na i ditt zonraster. De ger en annan nivå av filtrering under ommappning. Om det inte finns något zon-ID som är kopplat till viss post i tabellen, deltar den inte i ommappningen.",
	"@@Zonal-Remap_Zone-Raster_tag0@@": "Ett singelbandsraster där varje pixel definierar zoner som är kopplade till en viss plats. En zon definieras som alla områden i indata som har samma värde. Områdena behöver inte vara sammanhängande.",
	"@@Predict-Using-Trend_dimensiondefinition_tag0@@": "Anger metod för att tillhandahålla dimensionsvärden för förutsägelser.",
	"@@Predict-Using-Trend_dimensiondefinition_tag1@@": "<strong>Efter värde</strong> – Förutsägelsen kommer att beräknas för ett enda dimensionsvärde. Du kanske till exempel vill förutsäga årsnederbörden för år 2050, 2100 och 2150. Det här är standardinställningen.",
	"@@Predict-Using-Trend_dimensiondefinition_tag2@@": "<strong>Efter intervall</strong> – Förutsägelsen kommer att beräknas för ett intervall av dimensionen definierad av ett start- och slutvärde. Du kanske till exempel vill förutsäga årsnederbörden för varje år mellan 2050 och 2150.",
	"@@Predict-Using-Trend_end_tag0@@": "Dimensionsintervall för slutdatum, höjd eller djup som ska användas i förutsägelsen.",
	"@@Predict-Using-Trend_end_tag1@@": "Denna parameter krävs när parametern <strong>Dimensionsdefinition</strong> är inställd till <strong>Efter intervall</strong>.",
	"@@Predict-Using-Trend_raster_tag0@@": "Flerdimensionella raster som indata från <strong>Generera trend</strong>-funktionen.",
	"@@Predict-Using-Trend_start_tag0@@": "Dimensionsintervall för startdatum, höjd eller djup som ska användas i förutsägelsen.",
	"@@Predict-Using-Trend_start_tag1@@": "Denna parameter krävs när parametern <strong>Dimensionsdefinition</strong> är inställd till <strong>Efter intervall</strong>.",
	"@@Predict-Using-Trend_unit_tag0@@": "Enheten som ska användas för värdeintervallet. Den här parametern gäller endast när analysdimensionen är en tidsdimension.",
	"@@Predict-Using-Trend_unit_tag1@@": "<strong>Timmar</strong> – Förutsägelsen beräknas för varje timme i det tidsintervall som beskrivs av parametrarna <strong>Start</strong>, <strong>Slut</strong> och <strong>Värdeintervall</strong>.",
	"@@Predict-Using-Trend_unit_tag2@@": "<strong>Dagar</strong> – Förutsägelsen beräknas för varje dag i det tidsintervall som beskrivs av parametrarna <strong>Start</strong>, <strong>Slut</strong> och <strong>Värdeintervall</strong>.",
	"@@Predict-Using-Trend_unit_tag3@@": "<strong>Veckor</strong> – Förutsägelsen beräknas för varje vecka i det tidsintervall som beskrivs av parametrarna <strong>Start</strong>, <strong>Slut</strong> och <strong>Värdeintervall</strong>.",
	"@@Predict-Using-Trend_unit_tag4@@": "<strong>Månader</strong> – Förutsägelsen beräknas för varje månad i det tidsintervall som beskrivs av parametrarna <strong>Start</strong>, <strong>Slut</strong> och <strong>Värdeintervall</strong>.",
	"@@Predict-Using-Trend_unit_tag5@@": "<strong>År</strong> – Förutsägelsen beräknas för varje år i det tidsintervall som beskrivs av parametrarna <strong>Start</strong>, <strong>Slut</strong> och <strong>Värdeintervall</strong>.",
	"@@Predict-Using-Trend_valueinterval_tag0@@": "Antal steg mellan två dimensionsvärden som ska inkluderas i förutsägelsen. Standardvärdet är 1.",
	"@@Predict-Using-Trend_valueinterval_tag1@@": "Denna parameter krävs när parametern <strong>Dimensionsdefinition</strong> är inställd till <strong>Efter intervall</strong>.",
	"@@Predict-Using-Trend_values_tag0@@": "Dimensionsvärdet eller -värdena som ska användas i förutsägelsen.",
	"@@Predict-Using-Trend_values_tag1@@": "Formatet för tid, djup och höjdvärden måste matcha formatet på de dimensionsvärden som använts för att generera trendrastret. Om trendrastret genererades för StdTime-dimensionen, bör formatet vara YYYY-MM-DDTHH:MM:SS, till exempel 2050-01-01T00:00:00. Flera värden separeras av ett semikolon.",
	"@@Process-Raster-Collection_aggregationfunction_tag0@@": "Ange rasterfunktionsmallen som ska användas för att aggregera flera sektorer till färre sektorer eller en enda sektor.",
	"@@Process-Raster-Collection_dimension_tag0@@": "Aggregeringsdimension. Den dimension längs vilken variablerna ska aggregeras.",
	"@@Process-Raster-Collection_itemfunction_tag0@@": "Ange rasterfunktionsmallen som ska användas för att bearbeta varje sektor eller objekt i indatarastersamlingen.",
	"@@Process-Raster-Collection_keywordinterval_tag0@@": "Anger det nyckelordsintervall som kommer att användas vid aggregering längs dimensionen. Denna parameter krävs när parametern <strong>Typ</strong> är inställd till <strong>Intervallnyckelord</strong> och aggregeringen måste vara över tiden.",
	"@@Process-Raster-Collection_keywordinterval_tag1@@": "<strong>Timvis</strong> – Datavärdena aggregeras till timvisa tidssteg och resultatet inkluderar varje timme i tidsserien.",
	"@@Process-Raster-Collection_keywordinterval_tag2@@": "<strong>Dagligen</strong> – Datavärdena aggregeras till dagliga tidssteg och resultatet inkluderar varje dag i tidsserien.",
	"@@Process-Raster-Collection_keywordinterval_tag3@@": "<strong>Veckovis</strong> – Datavärdena aggregeras till veckovisa tidssteg och resultatet inkluderar varje vecka i tidsserien.",
	"@@Process-Raster-Collection_keywordinterval_tag4@@": "<strong>Vart tionde år</strong> – Datavärdena aggregeras till 3 perioder om 10 dagar var. Den sista perioden kan innehålla fler eller färre än 10 dagar. Utdata inkluderar 3 tidsdelar för varje månad.",
	"@@Process-Raster-Collection_keywordinterval_tag5@@": "<strong>Vart femte år</strong> – Datavärdena aggregeras till 6 perioder om 5 dagar var. Den sista perioden kan innehålla fler eller färre än 5 dagar. Utdata inkluderar 6 tidsdelar för varje månad.",
	"@@Process-Raster-Collection_keywordinterval_tag6@@": "<strong>Månader</strong> – Datavärdena aggregeras till månatliga tidssteg och resultatet inkluderar varje månad i tidsserien.",
	"@@Process-Raster-Collection_keywordinterval_tag7@@": "<strong>Kvartal</strong> – Datavärdena aggregeras till kvartalsvisa tidssteg och resultatet inkluderar varje kvartal i tidsserien.",
	"@@Process-Raster-Collection_keywordinterval_tag8@@": "<strong>År</strong> – Datavärdena aggregeras till årliga tidssteg och resultatet inkluderar varje år i tidsserien.",
	"@@Process-Raster-Collection_keywordinterval_tag9@@": "<strong>Återkommer dagligen</strong> – Datavärdena aggregeras till dagliga tidssteg och resultatet inkluderar ett aggregerat värde per juliansk dag. Utdata inkluderar maximalt 366 dagsbaserade tidsdelar.",
	"@@Process-Raster-Collection_keywordinterval_tag10@@": "<strong>Återkommer veckovis</strong> – Datavärdena aggregeras till veckovisa tidssteg och resultatet inkluderar ett aggregerat värde per vecka. Utdata inkluderar maximalt 53 veckobaserade tidsdelar.",
	"@@Process-Raster-Collection_keywordinterval_tag11@@": "<strong>Återkommer månadsvis</strong> – Datavärdena aggregeras till månadsvisa tidssteg och resultatet inkluderar ett aggregerat värde per månad. Utdata inkluderar maximalt 12 månadsbaserade tidsdelar.",
	"@@Process-Raster-Collection_keywordinterval_tag12@@": "<strong>Återkommer varje kvartal</strong> – Datavärdena aggregeras till kvartalsvisa tidssteg och resultatet inkluderar ett aggregerat värde per kvartal. Utdata inkluderar maximalt 4 kvartalsbaserade tidsdelar.",
	"@@Process-Raster-Collection_maximumvalue_tag0@@": "Maximalt värde för ett intervall.",
	"@@Process-Raster-Collection_maximumvalue_tag1@@": "Denna parameter krävs när parametern <strong>Typ</strong> är inställd till <strong>Intervallområden</strong>.",
	"@@Process-Raster-Collection_minimumvalue_tag0@@": "Minimalt värde för ett intervall.",
	"@@Process-Raster-Collection_minimumvalue_tag1@@": "Denna parameter krävs när parametern <strong>Typ</strong> är inställd till <strong>Intervallområden</strong>.",
	"@@Process-Raster-Collection_processingfunction_tag0@@": "Ange rasterfunktionsmallen som ska användas för att visa det bearbetade rasterlagret.",
	"@@Process-Raster-Collection_rastercollection_tag0@@": "Flerdimensionellt rasterdataset för indata, mosaiklager eller mosaikdataset.",
	"@@Process-Raster-Collection_type_tag0@@": "Anger dimensionsintervall för vilka data ska aggregeras.",
	"@@Process-Raster-Collection_type_tag1@@": "<strong>Alla</strong> – Datavärdena aggregeras över alla sektorer. Det här är standardinställningen.",
	"@@Process-Raster-Collection_type_tag2@@": "<strong>Intervallnyckelord</strong> – Variabeldata aggregeras med ett allmänt känt intervall.",
	"@@Process-Raster-Collection_type_tag3@@": "<strong>Intervallområden</strong> – Variabeldata aggregeras mellan angivna par av värden eller datum.",
	"@@Process-Raster-Collection_type_tag4@@": "<strong>Intervallvärden</strong> – Variabeldata aggregeras med intervall och enheter som användaren anger.",
	"@@Process-Raster-Collection_unit_tag0@@": "Enheten som ska användas för intervallvärdet. Denna parameter krävs när parametern <strong>Dimension</strong> är ett tidsfält och parametern <strong>Typ</strong> är inställd till <strong>Intervallvärde</strong>.",
	"@@Process-Raster-Collection_unit_tag1@@": "Om du aggregerar över något annat än tid är det här alternativet inte tillgängligt och enheten för intervallvärdet motsvarar variabelenheten för flerdimensionella rasterindata.",
	"@@Process-Raster-Collection_unit_tag2@@": "<strong>Timmar</strong> – Datavärdena aggregeras till timvisa tidsdelar vid angivet intervall.",
	"@@Process-Raster-Collection_unit_tag3@@": "<strong>Dagar</strong> – Datavärdena aggregeras till dagliga tidsdelar vid angivet intervall.",
	"@@Process-Raster-Collection_unit_tag4@@": "<strong>Veckor</strong> – Datavärdena aggregeras till veckovisa tidsdelar vid angivet intervall.",
	"@@Process-Raster-Collection_unit_tag5@@": "<strong>Månader</strong> – Datavärdena aggregeras till månatliga tidsdelar vid angivet intervall.",
	"@@Process-Raster-Collection_unit_tag6@@": "<strong>År</strong> – Datavärdena aggregeras till årliga tidsdelar vid angivet intervall.",
	"@@Process-Raster-Collection_valueinterval_tag0@@": "Storleken på det intervall som ska användas för aggregeringen. Denna parameter krävs när parametern <strong>Typ</strong> är inställd till <strong>Intervallvärde</strong>.",
	"@@Process-Raster-Collection_valueinterval_tag1@@": "För att till exempel aggregera 30 års månadsbaserade temperaturdata till femårsökningar, anger du 5 som <strong>Värdeintervall</strong> och anger <strong>Enhet</strong> till <strong>År</strong>.",
	"@@Linear-Spectral-Unmixing_non-negative_tag0@@": "Specificerar alternativen för att definiera utdatapixelvärden.",
	"@@Linear-Spectral-Unmixing_non-negative_tag1@@": "Markerad – Inga negativa utdatavärden finns.",
	"@@Linear-Spectral-Unmixing_non-negative_tag2@@": "Avmarkerad – Det kan finnas negativa värden för andelen marktäckning.",
	"@@Linear-Spectral-Unmixing_raster_tag0@@": "Indatarastret.",
	"@@Linear-Spectral-Unmixing_spectralprofile_tag0@@": "Fil med spektral profil för indata.",
	"@@Linear-Spectral-Unmixing_spectralprofiletype_tag0@@": "Spektral information för olika marktäckningsklasser.",
	"@@Linear-Spectral-Unmixing_spectralprofiletype_tag1@@": "<strong>Spektral profil</strong> – En definitionsfil för klassificerare (${.ecd}), genererad från verktyget <strong><strong>Klassificerare för tågets maximala sannolikhet</strong></strong>, eller en JavaScript Object Notation-fil (${.json}) som innehåller klassens spektrala profiler.",
	"@@Linear-Spectral-Unmixing_spectralprofiletype_tag2@@": "<strong>Övningsexempel</strong> – Polygongeoobjekt eller en övningsexempelgeoobjektklass, genererad från <strong>Hanterare för övningsexempel</strong>.",
	"@@Linear-Spectral-Unmixing_sumtoone_tag0@@": "Specificerar alternativen för att definiera utdatapixelvärden.",
	"@@Linear-Spectral-Unmixing_sumtoone_tag1@@": "Markerad – Klassvärden för varje pixel tillhandahålls i decimalformat där summan av alla klasser är lika med 1. Till exempel, klass 1 = 0,16, klass 2 = 0,24, klass 3 = 0,60.",
	"@@Linear-Spectral-Unmixing_sumtoone_tag2@@": "Avmarkerad – Summan av alla klasser i en pixel kan överstiga 1.",
	"@@Linear-Spectral-Unmixing_trainingfeature_tag0@@": "Fil med indataträningsgeoobjekt.",
	"@@Aggregate_aggregationtechnique_tag0@@": "Metoden som används för aggregering. Värdena av indatacellerna som omges av de grövre utdatacellerna aggregeras med en av de följande statistikerna:",
	"@@Aggregate_aggregationtechnique_tag1@@": "<strong>Summa</strong> – Totalsumman av indatacellerna. Det här är standardinställningen.",
	"@@Aggregate_aggregationtechnique_tag2@@": "<strong>Maximum</strong> – Det största värdet av indatacellerna.",
	"@@Aggregate_aggregationtechnique_tag3@@": "<strong>Medelvärde</strong> – Medelvärdet av indatacellerna.",
	"@@Aggregate_aggregationtechnique_tag4@@": "<strong>Median</strong> – Medianvärdet av indatacellerna.",
	"@@Aggregate_aggregationtechnique_tag5@@": "<strong>Minimum</strong> – Det minsta värdet av indatacellerna.",
	"@@Aggregate_cellfactor_tag0@@": "Faktorn med vilken cellstorleken av indatarastret ska multipliceras.",
	"@@Aggregate_cellfactor_tag1@@": "Till exempel skulle ett cellfaktorvärde på tre resultera i en utdatacellstorlek som är tre gånger större än indatarastret.",
	"@@Aggregate_expandextentifneeded_tag0@@": "Definierar hur man ska hantera gränserna för indatarastret när dess rader eller kolumner inte är en multipel av cellfaktorn.",
	"@@Aggregate_expandextentifneeded_tag1@@": "Markerad – Expanderar de övre eller högra gränserna för indatarastret så att det totala antalet celler i en rad eller kolumn är en multipel av cellfaktorn. Med det här alternativet kan utdatarastret täcka en större geografisk utbredning än indatarastret. Det här är standardinställningen.",
	"@@Aggregate_expandextentifneeded_tag2@@": "Avmarkerad – Minskar antalet rader eller kolumner i utdatarastret. Detta förkortar de återstående cellerna i de övre eller högra gränserna för indatarastret, så att det totala antalet rader eller kolumner i indatarastret blir en multipel av cellfaktorn. Med det här alternativet kan utdatarastret täcka en mindre geografisk utbredning än indatarastret.",
	"@@Aggregate_ignorenodataincalculations_tag0@@": "Anger om ${NoData}-värden ska ignoreras av aggregationsberäkningen.",
	"@@Aggregate_ignorenodataincalculations_tag1@@": "Markerad – Anger att om det finns ${NoData}-värden för någon av cellerna som faller inom den geografiska utbredningen av en större cell i utdatarastret, så ignoreras ${NoData}-värden när värdet för utdatacellers placering ska fastställas. Enbart indataceller inom utbredningen för utdatacellen som har datavärden används för att fastställa värdet av utdatacellen. Det här är standardinställningen.",
	"@@Aggregate_ignorenodataincalculations_tag2@@": "Avmarkerad – Anger att om någon cell som faller inom den geografiska utbredningen av en större cell i utdatarastret har ett värde på ${NoData}, så blir värdet för den utdatacellens placering ${NoData}. När det här alternativet används innebär det att när celler inom en aggregering innehåller värdet ${NoData}, finns det inte tillräckligt mycket information för att utföra de angivna beräkningarna som krävs för att fastställa ett utdatavärde.",
	"@@Aggregate_raster_tag0@@": "Det indataraster som ska aggregeras.",
	"@@Expand_numberofcells_tag0@@": "Antal celler att expandera med.",
	"@@Expand_numberofcells_tag1@@": "Värdet måste vara ett heltal och kan vara 1 eller högre.",
	"@@Expand_raster_tag0@@": "Det indataraster för vilket de identifierade zonerna ska expanderas.",
	"@@Expand_raster_tag1@@": "Det måste vara av heltalstyp.",
	"@@Expand_zonevalues_tag0@@": "Listan med zoner som ska expanderas.",
	"@@Expand_zonevalues_tag1@@": "Zonvärdena måste vara heltal och de kan stå i valfri ordning.",
	"@@Expand_zonevalues_tag2@@": "När du anger flera zoner använder du ett blanksteg för att separera zonvärdena.",
	"@@Multidimensional-Filter_dimension_tag0@@": "Dimension att extrahera variabler från.",
	"@@Multidimensional-Filter_dimensiondefinition_tag0@@": "Anger metoden som ska användas för att indela dimensionen.",
	"@@Multidimensional-Filter_dimensiondefinition_tag1@@": "<strong>Alla</strong> – Hela intervallet för varje dimension används. Det här är standardinställningen.",
	"@@Multidimensional-Filter_dimensiondefinition_tag2@@": "<strong>Efter värde</strong> – Dimensionen indelas med hjälp av ett dimensionsvärde eller en lista med värden.",
	"@@Multidimensional-Filter_dimensiondefinition_tag3@@": "<strong>Efter intervall</strong> – Dimensionen indelas med hjälp av ett intervall eller en lista med intervall.",
	"@@Multidimensional-Filter_dimensiondefinition_tag4@@": "<strong>Efter iteration</strong> – Dimensionen indelas med hjälp av en angiven intervallstorlek.",
	"@@Multidimensional-Filter_endoffirstiteration_tag0@@": "Slutet på det första intervallet. Detta intervall används för att upprepa över datasetet. Denna parameter krävs när parametern <strong>Dimensionsdefinition</strong> är angiven till <strong>Efter iteration</strong>.",
	"@@Multidimensional-Filter_maximumvalue_tag0@@": "Maximalt värde för intervallet. Denna parameter krävs när parametern <strong>Dimensionsdefinition</strong> är inställd till <strong>Efter intervall</strong>.",
	"@@Multidimensional-Filter_minimumvalue_tag0@@": "Minimivärdet för intervallet. Denna parameter krävs när parametern <strong>Dimensionsdefinition</strong> är inställd till <strong>Efter intervall</strong>.",
	"@@Multidimensional-Filter_raster_tag0@@": "Flerdimensionellt raster som indata.",
	"@@Multidimensional-Filter_ranges_tag0@@": "<p>Intervallområden specificerade i en tabell används för att aggregera grupper av värden. De lägsta och högsta värdena anger intervallet som ska tas med.</p><p>Den här parametern krävs när parametern<strong>Typ</strong>anges som<strong>Intervallområden</strong>.</p>",
	"@@Multidimensional-Filter_startoffirstiteration_tag0@@": "Början på det första intervallet. Detta intervall används för att upprepa över datasetet. Denna parameter krävs när parametern <strong>Dimensionsdefinition</strong> är angiven till <strong>Efter iteration</strong>.",
	"@@Multidimensional-Filter_step_tag0@@": "Frekvensen enligt vilken data kommer indelas. Denna parameter krävs när parametern <strong>Dimensionsdefinition</strong> är inställd till <strong>Efter iteration</strong>. Standard är 3.",
	"@@Multidimensional-Filter_unit_tag0@@": "Specificerar iterationsenheten. Denna parameter krävs när parametern <strong>Dimensionsdefinition</strong> är inställd till <strong>Efter iteration</strong> och parametern <strong>Dimension</strong> är inställd till <strong>StdTid</strong>.",
	"@@Multidimensional-Filter_value_tag0@@": "Värdet för de angivna dimensionerna. Denna parameter krävs när parametern <strong>Dimensionsdefinition</strong> är inställd till <strong>Efter värde</strong>.",
	"@@Multidimensional-Filter_variables_tag0@@": "Variablerna som ska inkluderas i utdata för flerdimensionellt rasterlager. Om ingen variabel anges används den första variabeln.",
	"@@Multidimensional-Filter_dimensionless_tag0@@": "Anger om lagret ska ha dimensionsvärden. Alternativet är bara tillgängligt om en enda sektor är vald för att skapa ett lager.",
	"@@Multidimensional-Filter_dimensionless_tag1@@": "Markerat – Lagret får inga dimensionsvärden.",
	"@@Multidimensional-Filter_dimensionless_tag2@@": "Omarkerat – Lagret får ett dimensionsvärde. Det här är standardinställningen.",
	"@@Multidimensional-Raster_interpolationcellsize_tag0@@": "Cellstorleken på den interpolerade rastret. Standardvärdet är ${1}.",
	"@@Multidimensional-Raster_interpolationmethod_tag0@@": "Omsamplingsmetoden används för att interpolera oregelbundna data.",
	"@@Multidimensional-Raster_interpolationmethod_tag1@@": "<strong>Närmaste granne</strong> – Beräknar utdatapixelvärdet med närmaste indatapixel. Om det inte finns någon källpixel kan det inte skapas någon ny pixel i utdata. Det här är standardinställningen.",
	"@@Multidimensional-Raster_interpolationmethod_tag2@@": "<strong>Linjär tinning</strong> – Använder ett triangulärt oregelbundet nätverk från mittpunkten i varje pixel i det oregelbundna rastret för att interpolera en yta som sedan konverteras till ett regelbundet raster.",
	"@@Multidimensional-Raster_interpolationmethod_tag3@@": "<strong>Naturlig granne</strong> – Söker efter den närmaste delmängden av indataprover till en frågepunkt och tillämpar viktningarna på dem, baserat på proportionella områden för att interpolera ett värde.",
	"@@Multidimensional-Raster_interpolationmethod_tag4@@": "<strong>Inverterad avståndsviktning</strong> – Fastställer värdena i pixeln med en linjärt viktad kombination av en uppsättning punkter eller pixlar. Vikten är en funktion av det inverterade avståndet från kända punkter eller pixlar.",
	"@@Multidimensional-Raster_raster_tag0@@": "Flerdimensionellt raster som indata.",
	"@@Multidimensional-Raster_variables_tag0@@": "Variabler eller variabler som ska inkluderas i det flerdimensionella rasterlagret.",
	"@@Random_distribution_tag0@@": "Specificera vilken slumpmässig värdedistributionsmetod som ska användas.",
	"@@Random_distribution_tag1@@": "<strong>Enhetlig</strong> (Minimum, Maximum) – En enhetlig distribution med ett definierat intervall. Standardvärdena är 0 för Minimum och 1 för Maximum. Det här är standardinställningen.",
	"@@Random_distribution_tag2@@": "<strong>Heltal</strong> (Minimum, Maximum) – En heltalsdistribution med ett definierat intervall. Standardvärdena är 1 för Minimum och 10 för Maximum.",
	"@@Random_distribution_tag3@@": "<strong>Normal</strong> (Medel, Standardavvikelse) – En normal distribution med en definierad medel- och standardavvikelse. Standardvärdena är 0 för Medel och 1 för Standardavvikelse.",
	"@@Random_distribution_tag4@@": "<strong>Exponentiell</strong> (Medel) – En exponentiell distribution med ett definierat medelvärde. Standardvärdet är 1.",
	"@@Random_distribution_tag5@@": "<strong>Poisson</strong> (Medel) – En Poisson-distribution med ett definierat medelvärde. Standardvärdet är 1.",
	"@@Random_distribution_tag6@@": "<strong>Gamma</strong> (Alfa, Beta) – En gammadistribution med en definierad alfa och beta. Standardvärdena är 1 för alfa och 1 för beta.",
	"@@Random_distribution_tag7@@": "<strong>Binomial</strong> (N, Sannolikhet) – En binomialfördelning med definierad N och sannolikhet. Standardvärdena är 10 för N och 0,5 för Sannolikhet.",
	"@@Random_distribution_tag8@@": "<strong>Geometrisk</strong> (Sannolikhet) – En geometrisk distribution med en definierad sannolikhet. Standardvärdet är 0,5.",
	"@@Random_distribution_tag9@@": "<strong>Negativ binomial</strong> (r, Sannolikhet) – En Pascal-distribution definierad r och sannolikhet. Standardvärdena är 10,0 för r och 0,5 för Sannolikhet.",
	"@@Random_randomnumbergenerator_tag0@@": "Specificera algoritmen för slumpgeneratorn som använder seeden och distributionen för att producera en sekvens av slumpmässiga tal. Följande alternativ finns tillgängliga:",
	"@@Random_randomnumbergenerator_tag1@@": "Standard C Rand",
	"@@Random_randomnumbergenerator_tag2@@": "ACM samlad algoritm 599",
	"@@Random_randomnumbergenerator_tag3@@": "Mersenne Twister",
	"@@Random_randomnumbergenerator_tag4@@": "Standardvärdet är Mersenne Twister.",
	"@@Random_rasterinfo_tag0@@": "Använd <strong>Ladda mallraster</strong>-knappen för att läsa in en mall från en katalog eller portal.",
	"@@Random_seed_tag0@@": "Seeden är ett heltal och används för att initiera slumptalsgeneratorn. Standardvärdet är 1.",
	"@@Shrink_numberofcells_tag0@@": "Antal celler som varje specificerad zon ska krympas med.",
	"@@Shrink_numberofcells_tag1@@": "Värdet måste vara ett heltal och kan vara 1 eller högre.",
	"@@Shrink_raster_tag0@@": "Det indataraster för vilket de identifierade zonerna ska krympas.",
	"@@Shrink_raster_tag1@@": "Det måste vara av heltalstyp.",
	"@@Shrink_zonevalues_tag0@@": "Listan med zoner som ska krympas.",
	"@@Shrink_zonevalues_tag1@@": "Zonvärdena måste vara heltal och de kan stå i valfri ordning.",
	"@@Shrink_zonevalues_tag2@@": "När du anger flera zoner använder du ett blanksteg för att separera zonvärdena.",
	"@@Distance-Accumulation_costraster_tag0@@": "Ett raster som definierar kostnaden eller impedansen för att flytta planimetriskt genom varje cell. Värdet i varje cellposition motsvarar kostnad-per-enhetsavståndet för att flytta genom cellen. Varje cellpositions värde multipliceras med cellupplösningen och kompenserar även för diagonal rörelse för att få fram den totala kostnaden för att passera genom cellen.",
	"@@Distance-Accumulation_costraster_tag1@@": "Värdena för <strong>Kostnadsraster</strong> kan vara heltal eller flyttal, men de kan inte vara negativa eller noll.",
	"@@Distance-Accumulation_distancemethod_tag0@@": "Avgör om avståndet ska beräknas med en planmetod (platt jordyta) eller en geodetisk metod (ellipsoid).",
	"@@Distance-Accumulation_distancemethod_tag1@@": "Plan – planmätningar använder 2D-kartesisk matematik för att beräkna längd och area. Alternativet är endast tillgängligt vid mätning i ett projicerat koordinatsystem, och 2D-planet i detta koordinatsystem kommer att användas som grund för mätningarna.",
	"@@Distance-Accumulation_distancemethod_tag2@@": "Geodetisk – den kortaste linjen mellan två punkter på jordens yta på en rotationsellipsoid (ellipsoid). Det innebär att resultatet inte förändras beroende på indata- eller utdataprojektion.",
	"@@Distance-Accumulation_distancemethod_tag3@@": "<strong>Obs!</strong> En användning för en geodetisk linje är när du vill bestämma det kortaste avståndet mellan två städer för ett flygplans flygväg. Detta är också känt som en storcirkellinje om den baseras på en sfär snarare än en ellipsoid.",
	"@@Distance-Accumulation_generatebackdirectionbandasadditionalbandinoutput_tag0@@": "Avgör om endast ett avståndsackumuleringsraster skapas, eller om ett multibandsraster som består av både avståndsackumuleringsraster och tillbakariktningsraster skapas.",
	"@@Distance-Accumulation_generatebackdirectionbandasadditionalbandinoutput_tag1@@": "Avmarkerad – Resultatet är avståndsackumuleringsraster. Detta är ett singelbandresultat. Det här är standardinställningen.",
	"@@Distance-Accumulation_generatebackdirectionbandasadditionalbandinoutput_tag2@@": "Markerad – Ett multibandresultat skapas. Det första bandet är avståndsackumuleringsrastret och det andra bandet är tillbakariktningsrastret.",
	"@@Distance-Accumulation_generatebackdirectionbandasadditionalbandinoutput_tag3@@": "Tillbakariktningsrastret beräknar riktningen i grader för varje cell mot en angränsande cell längs den kortaste vägen tillbaka till den närmaste källan samtidigt som det undviker hinder.",
	"@@Distance-Accumulation_horizontalfactor_tag0@@": "<p>Definierar förhållandet mellan den horisontella kostnadsfaktorn och den horisontella relativa rörelsevinkeln (HRMA).</p><p>Det finns flera faktorer med modifierare som identifierar ett definierat vertikalt faktordiagram. Dessutom kan en tabell användas till att skapa ett anpassat diagram. Diagrammen används till att identifiera den vertikala faktor som används vid beräkning av den totala kostnaden för att flytta in i en angränsande cell.</p><p>I förklaringarna nedan används två förkortningar: HF och HRMA. HF står för horisontalfaktor, som definierar den horisontala svårigheten man möter när man flyttar från en cell till nästa. HRMA står för horizontal relative moving angle, dvs. horisontell relativ rörelsevinkel, vilket identifierar vinkeln mellan den horisontella riktningen från en cell och rörelseriktningen.</p><p><strong>Horisontalfaktor</strong>-typerna innehåller följande:</p><ul><li><strong>Binär</strong>--Anger att om HRMA är mindre än klippvinkeln, får HF det värde som är kopplat till nollfaktorn. Annars får det ett oändligt värde.</li><li><strong>Framåt</strong>--Anger att endast rörelse framåt tillåts. HRMA måste vara större än eller lika med 0 och mindre än 90 grader (0 &lt;= HRMA &lt; 90). Om HRMA är större än 0 och mindre än 45 grader, får HF för cellen det värde som är kopplat till nollfaktorn. Om HRMA är större än eller lika med 45 grader, används sidovärdesmodifierarens värde. HF-värdet för ett valfritt HRMA-värde som är lika med eller större än 90 grader får ett oändligt värde.</li><li><strong>Linjär</strong>--Anger att HF är en inverterad linjär funktion av HRMA.</li><li><strong>Omvänd linjär</strong>--Anger att HF är en inverterad linjär funktion av HRMA.</li><li><strong>Tabell</strong>--Identifierar att en tabellfil kommer att användas för att definiera det horisontalfaktorsdiagram som används för att bestämma HF-värden.</li></ul><p>Följande är modifierare av horisontalfaktorer:</p><ul><li><strong>Nollfaktor</strong>--Fastställer den horisontalfaktor som ska användas när HRMA är noll. Denna faktor positionerar y-interceptet för någon av horisontalfaktorsfunktionerna.</li><li><strong>Klippvinkel</strong>--Definierar den HRMA-vinkel bortom vilken HF får ett oändligt värde.</li><li><strong>Lutning</strong>--Fastställer lutningen för den räta linje som används med nyckelorden för horisontalfaktor<strong>Linjär</strong>och<strong>Omvänd linjär</strong>. Lutningen anges som ett bråk av förändring på y-axeln delat med förändringen på x-axeln (45 procent lutning är 1/45, vilket blir indata som 0,02222).</li><li><strong>Sidovärde</strong>--Fastställer HF när HRMA är större än eller lika med 45 grader och mindre än 90 grader när nyckelordet för horisontalfaktor<strong>Framåt</strong>anges.</li><li><strong>Tabellnamn</strong>--Identifierar namnet på den tabell som definierar HF.</li></ul>",
	"@@Distance-Accumulation_horizontalraster_tag0@@": "Ett raster som definierar den horisontella riktningen för varje cell.",
	"@@Distance-Accumulation_horizontalraster_tag1@@": "Värdena på rastret måste vara heltal från 0 till 360, där 0 grader är norr, eller riktat mot skärmens överkant och ökar medurs. Platta områden bör ges värdet −1. Värdena på varje plats kommer att användas i kombination med <strong>Horisontalfaktor</strong> för att fastställa den uppkomna horisontella kostnaden när man flyttar från en cell till dess grannar.",
	"@@Distance-Accumulation_initialaccumulation_tag0@@": "Kostnad för inledande ackumulering för att påbörja kostnadsberäkningen. Denna parameter tillåter specifikation av den fasta kostnaden som kan associeras med en källa. I stället för att börja på kostnaden 0, börjar kostnadsalgoritmen med det angivna värdet.",
	"@@Distance-Accumulation_initialaccumulation_tag1@@": "Ett numeriskt värde (dubbelt) eller ett fält från <strong>Källraster</strong> kan användas för denna parameter.",
	"@@Distance-Accumulation_initialaccumulation_tag2@@": "Värdet måste vara noll eller högre. Standard är 0.",
	"@@Distance-Accumulation_maximumaccumulation_tag0@@": "Definierar resenärens maximala ackumulerade kostnad för en källa. Kostnadsberäkningarna fortsätter för varje källa tills den angivna kapaciteten uppnås.",
	"@@Distance-Accumulation_maximumaccumulation_tag1@@": "Ett numeriskt värde (dubbelt) eller ett fält från <strong>Källraster</strong> kan användas för denna parameter.",
	"@@Distance-Accumulation_maximumaccumulation_tag2@@": "Värdet måste vara större än noll. Standardkapaciteten är till udatarastrets gräns.",
	"@@Distance-Accumulation_multipliertoapplytocosts_tag0@@": "En multiplikator som kan användas på kostnadsvärden.",
	"@@Distance-Accumulation_multipliertoapplytocosts_tag1@@": "Denna parameter tillåter kontroll av färdläget eller magnituden vid en källa. Ju högre multiplikator, desto högre kostnad för att flytta igenom varje cell.",
	"@@Distance-Accumulation_multipliertoapplytocosts_tag2@@": "Ett numeriskt värde (dubbelt) eller ett fält från <strong>Källraster</strong> kan användas för denna parameter.",
	"@@Distance-Accumulation_multipliertoapplytocosts_tag3@@": "Värdena måste vara större än noll. Standard är 1.",
	"@@Distance-Accumulation_rasterbarriers_tag0@@": "Det raster som definierar hindren.",
	"@@Distance-Accumulation_rasterbarriers_tag1@@": "Datasetet måste innehålla NoData där det inte finns några hinder. Hindren representeras av giltiga värden inklusive noll.",
	"@@Distance-Accumulation_rasterbarriers_tag2@@": "Hindren kan definieras av ett heltal eller ett flyttalsraster.",
	"@@Distance-Accumulation_sourceraster_tag0@@": "Indatakällans platser.",
	"@@Distance-Accumulation_sourceraster_tag1@@": "Detta är ett rasterdataset som identifierar de celler eller platser från vilka den lägsta ackumulerade avståndskostnaden för varje utdatacellplats beräknas.",
	"@@Distance-Accumulation_sourceraster_tag2@@": "Det kan vara av heltalstyp eller flyttalstyp.",
	"@@Distance-Accumulation_surfaceraster_tag0@@": "Ett raster som definierar höjdvärdena för varje cellplats.",
	"@@Distance-Accumulation_surfaceraster_tag1@@": "Värdena används för att beräkna det faktiska täckta ytavståndet vid passage mellan celler.",
	"@@Distance-Accumulation_traveldirection_tag0@@": "Definierar resenärens riktning vid användning av vertikalfaktor, horisontalfaktor och källans motståndskostnad.",
	"@@Distance-Accumulation_traveldirection_tag1@@": "<strong>Från källa</strong> – Vertikalfaktor, horisontalfaktor och källans motståndskostnad kommer att användas med början vid indatakällan för att flytta ut till icke-källcellerna. Det här är standardinställningen.",
	"@@Distance-Accumulation_traveldirection_tag2@@": "<strong>Till källa</strong> – Vertikalfaktor, horisontalfaktor och källans motståndskostnad kommer att användas med början vid varje icke-källcell för att flytta tillbaka till indatakällan.",
	"@@Distance-Accumulation_traveldirection_tag3@@": "Ange antingen nyckelordet <strong>Från källa</strong> eller <strong>Till källa</strong>, som ska tillämpas på alla källor, eller ange ett fält i <strong>Källraster</strong> som innehåller de nyckelord som ska identifiera färdriktning för varje källa. Det fältet måste innehålla strängen ${FROM_SOURCE} eller ${TO_SOURCE}.",
	"@@Distance-Accumulation_verticalfactor_tag0@@": "<p>Definierar förhållandet mellan den vertikala kostnadsfaktorn och den vertikala relativa rörelsevinkeln (VRMA).</p><p>Det finns flera faktorer med modifierare som identifierar ett definierat vertikalt faktordiagram. Dessutom kan en tabell användas till att skapa ett anpassat diagram. Diagrammen används till att identifiera den vertikala faktor som används vid beräkning av den totala kostnaden för att flytta in i en angränsande cell.</p><p>I förklaringarna nedan används två förkortningar: VF och VRMA. VF står för vertikalfaktor, som definierar den vertikala svårigheten man möter när man flyttar från en cell till nästa. VRMA står för vertical relative moving angle, dvs. vertikal relativ rörelsevinkel, vilket identifierar lutningsvinkel mellan FRÅN-cellen och TILL-cellen.</p><p><strong>Vertikalfaktor</strong>-typerna innehåller följande:</p><ul><li><strong>Binär</strong>--Anger att om VRMA är större än den låga klippvinkeln och mindre än den höga klippvinkeln, får VF det värde som är kopplat till nollfaktorn. Annars får det ett oändligt värde.</li><li><strong>Linjär</strong>--Anger att VF är en linjär funktion av VRMA.</li><li><strong>Symmetrisk linjär</strong>--Anger att VF är en linjär funktion av VRMA på antingen den positiva eller negativa sidan av VRMA och att de två linjära funktionerna är symmetriska med avseende på VF (y)-axel.</li><li><strong>Omvänd linjär</strong>--Anger att VF är en inverterad linjär funktion av VRMA.</li><li><strong>Symmetriskt inverterad linjär</strong>--Anger att VF är en inverterad linjär funktion av VRMA på antingen den positiva eller negativa sidan av VRMA och att de två linjära funktionerna är symmetriska med avseende på VF (y)-axeln.</li><li><strong>Cos</strong>--Anger att VF är den cosinusbaserade funktionen av VRMA.</li><li><strong>Sec</strong>--Anger att VF är den sekantbaserade funktionen av VRMA.</li><li><strong>Cos-Sec</strong>--Anger att VF är den cosinusbaserade funktionen av VRMA när VRMA är negativt och den sekantbaserade funktionen av VRMA när VRMA inte är negativt.</li><li><strong>Sec-Cos</strong>--Anger att VF är den sekantbaserade funktionen av VRMA när VRMA är negativt och den cosinusbaserade funktionen av VRMA när VRMA inte är negativt.</li><li><strong>Tablell</strong>--Identifierar att en tabellfil kommer att användas för att definiera det vertikalfaktorsdiagram som används för att bestämma VF-värden.</li></ul><p>Modifierarna till de vertikala sökorden är följande:</p><ul><li><strong>Nollfaktor</strong>--Fastställer den vertikalfaktor som ska användas när VRMA är noll. Denna faktor positionerar y-interceptet av den angivna funktionen. Per definition är nollfaktorn inte tillämplig på de trigonometriska vertikalfunktionerna (COS, SEK, COS-SEK eller SEK-COS). Y-intercept definieras av dessa funktioner.</li><li><strong>Låg klippvinkel</strong>--Definierar den VRMA-vinkel under vilken VF får ett oändligt värde.</li><li><strong>Hög klippvinkel</strong>-- Definierar den VRMA-vinkel ovanför vilken VF får ett oändligt värde.</li><li><strong>Lutning</strong>--Fastställer lutningen för den räta linje som används med vertikalfaktornyckelorden<strong>Linjär</strong>och<strong>Omvänd linjär</strong>. Lutningen anges som ett bråk av förändring på y-axeln delat med förändringen på x-axeln (45 procent lutning är 1/45, vilket blir indata som 0,02222).</li><li><strong>Tabellnamn</strong>--Identifierar namnet på den tabell som definierar VF.</li></ul>",
	"@@Distance-Accumulation_verticalraster_tag0@@": "Definierar förhållandet mellan den vertikala kostnadsfaktorn och den vertikala relativa rörelsevinkeln (VRMA).",
	"@@Distance-Accumulation_verticalraster_tag1@@": "Värdena används till att beräkna lutningen som används för att identifiera den vertikala faktor som uppkommit vid förflyttning från en cell till en annan.",
	"@@Distance-Allocation_costraster_tag0@@": "Ett raster som definierar kostnaden eller impedansen för att flytta planimetriskt genom varje cell. Värdet i varje cellposition motsvarar kostnad-per-enhetsavståndet för att flytta genom cellen. Varje cellpositions värde multipliceras med cellupplösningen och kompenserar även för diagonal rörelse för att få fram den totala kostnaden för att passera genom cellen.",
	"@@Distance-Allocation_costraster_tag1@@": "Värdena för <strong>Kostnadsraster</strong> kan vara heltal eller flyttal, men de kan inte vara negativa eller noll.",
	"@@Distance-Allocation_distancemethod_tag0@@": "Avgör om avståndet ska beräknas med en planmetod (platt jordyta) eller en geodetisk metod (ellipsoid).",
	"@@Distance-Allocation_distancemethod_tag1@@": "Plan – planmätningar använder 2D-kartesisk matematik för att beräkna längd och area. Alternativet är endast tillgängligt vid mätning i ett projicerat koordinatsystem, och 2D-planet i detta koordinatsystem kommer att användas som grund för mätningarna.",
	"@@Distance-Allocation_distancemethod_tag2@@": "Geodetisk – den kortaste linjen mellan två punkter på jordens yta på en rotationsellipsoid (ellipsoid). Det innebär att resultatet inte förändras beroende på indata- eller utdataprojektion.",
	"@@Distance-Allocation_distancemethod_tag3@@": "<strong>Obs!</strong> En användning för en geodetisk linje är när du vill bestämma det kortaste avståndet mellan två städer för ett flygplans flygväg. Detta är också känt som en storcirkellinje om den baseras på en sfär snarare än en ellipsoid.",
	"@@Distance-Allocation_horizontalfactor_tag0@@": "<p>Definierar förhållandet mellan den horisontella kostnadsfaktorn och den horisontella relativa rörelsevinkeln (HRMA).</p><p>Det finns flera faktorer med modifierare som identifierar ett definierat vertikalt faktordiagram. Dessutom kan en tabell användas till att skapa ett anpassat diagram. Diagrammen används till att identifiera den vertikala faktor som används vid beräkning av den totala kostnaden för att flytta in i en angränsande cell.</p><p>I förklaringarna nedan används två förkortningar: HF och HRMA. HF står för horisontalfaktor, som definierar den horisontala svårigheten man möter när man flyttar från en cell till nästa. HRMA står för horizontal relative moving angle, dvs. horisontell relativ rörelsevinkel, vilket identifierar vinkeln mellan den horisontella riktningen från en cell och rörelseriktningen.</p><p><strong>Horisontalfaktor</strong>-typerna innehåller följande:</p><ul><li><strong>Binär</strong>--Anger att om HRMA är mindre än klippvinkeln, får HF det värde som är kopplat till nollfaktorn. Annars får det ett oändligt värde.</li><li><strong>Framåt</strong>--Anger att endast rörelse framåt tillåts. HRMA måste vara större än eller lika med 0 och mindre än 90 grader (0 &lt;= HRMA &lt; 90). Om HRMA är större än 0 och mindre än 45 grader, får HF för cellen det värde som är kopplat till nollfaktorn. Om HRMA är större än eller lika med 45 grader, används sidovärdesmodifierarens värde. HF-värdet för ett valfritt HRMA-värde som är lika med eller större än 90 grader får ett oändligt värde.</li><li><strong>Linjär</strong>--Anger att HF är en inverterad linjär funktion av HRMA.</li><li><strong>Omvänd linjär</strong>--Anger att HF är en inverterad linjär funktion av HRMA.</li><li><strong>Tabell</strong>--Identifierar att en tabellfil kommer att användas för att definiera det horisontalfaktorsdiagram som används för att bestämma HF-värden.</li></ul><p>Följande är modifierare av horisontalfaktorer:</p><ul><li><strong>Nollfaktor</strong>--Fastställer den horisontalfaktor som ska användas när HRMA är noll. Denna faktor positionerar y-interceptet för någon av horisontalfaktorsfunktionerna.</li><li><strong>Klippvinkel</strong>--Definierar den HRMA-vinkel bortom vilken HF får ett oändligt värde.</li><li><strong>Lutning</strong>--Fastställer lutningen för den räta linje som används med nyckelorden för horisontalfaktor<strong>Linjär</strong>och<strong>Omvänd linjär</strong>. Lutningen anges som ett bråk av förändring på y-axeln delat med förändringen på x-axeln (45 procent lutning är 1/45, vilket blir indata som 0,02222).</li><li><strong>Sidovärde</strong>--Fastställer HF när HRMA är större än eller lika med 45 grader och mindre än 90 grader när nyckelordet för horisontalfaktor<strong>Framåt</strong>anges.</li><li><strong>Tabellnamn</strong>--Identifierar namnet på den tabell som definierar HF.</li></ul>",
	"@@Distance-Allocation_horizontalraster_tag0@@": "Ett raster som definierar den horisontella riktningen för varje cell.",
	"@@Distance-Allocation_horizontalraster_tag1@@": "Värdena på rastret måste vara heltal från 0 till 360, där 0 grader är norr, eller riktat mot skärmens överkant och ökar medurs. Platta områden bör ges värdet −1. Värdena på varje plats kommer att användas i kombination med <strong>Horisontalfaktor</strong> för att fastställa den uppkomna horisontella kostnaden när man flyttar från en cell till dess grannar.",
	"@@Distance-Allocation_initialaccumulation_tag0@@": "Kostnad för inledande ackumulering för att påbörja kostnadsberäkningen. Denna parameter tillåter specifikation av den fasta kostnaden som kan associeras med en källa. I stället för att börja på kostnaden 0, börjar kostnadsalgoritmen med det angivna värdet.",
	"@@Distance-Allocation_initialaccumulation_tag1@@": "Ett numeriskt värde (dubbelt) eller ett fält från <strong>Källraster</strong> kan användas för denna parameter.",
	"@@Distance-Allocation_initialaccumulation_tag2@@": "Värdet måste vara noll eller högre. Standard är 0.",
	"@@Distance-Allocation_maximumaccumulation_tag0@@": "Definierar resenärens maximala ackumulerade kostnad för en källa. Kostnadsberäkningarna fortsätter för varje källa tills den angivna kapaciteten uppnås.",
	"@@Distance-Allocation_maximumaccumulation_tag1@@": "Ett numeriskt värde (dubbelt) eller ett fält från <strong>Källraster</strong> kan användas för denna parameter.",
	"@@Distance-Allocation_maximumaccumulation_tag2@@": "Värdet måste vara större än noll. Standardkapaciteten är till udatarastrets gräns.",
	"@@Distance-Allocation_multipliertoapplytocosts_tag0@@": "En multiplikator som kan användas på kostnadsvärden.",
	"@@Distance-Allocation_multipliertoapplytocosts_tag1@@": "Denna parameter tillåter kontroll av färdläget eller magnituden vid en källa. Ju högre multiplikator, desto högre kostnad för att flytta igenom varje cell.",
	"@@Distance-Allocation_multipliertoapplytocosts_tag2@@": "Värdena måste vara större än noll. Standard är 1.",
	"@@Distance-Allocation_multipliertoapplytocosts_tag3@@": "Ett numeriskt värde (dubbelt) eller ett fält från <strong>Källraster</strong> kan användas för denna parameter.",
	"@@Distance-Allocation_rasterbarriers_tag0@@": "Det raster som definierar hindren.",
	"@@Distance-Allocation_rasterbarriers_tag1@@": "Datasetet måste innehålla NoData där det inte finns några hinder. Hindren representeras av giltiga värden inklusive noll.",
	"@@Distance-Allocation_rasterbarriers_tag2@@": "Hindren kan definieras av ett heltal eller ett flyttalsraster.",
	"@@Distance-Allocation_sourcefield_tag0@@": "Det fält som används för att tilldela värden till källplatser. Det måste vara av heltalstyp.",
	"@@Distance-Allocation_sourceraster_tag0@@": "Indatakällans platser.",
	"@@Distance-Allocation_sourceraster_tag1@@": "Detta är ett rasterdataset som identifierar de celler eller platser från vilka den lägsta ackumulerade avståndskostnaden för varje utdatacellplats beräknas.",
	"@@Distance-Allocation_sourcerowandcolumnbands_tag0@@": "Avgör om endast tilldelningsrastret ska skapas eller om ett multibandresultat skapas.",
	"@@Distance-Allocation_sourcerowandcolumnbands_tag1@@": "Avmarkerad – Resultatet är avståndstilldelningsraster. Detta är ett singelbandresultat. Det här är standardinställningen.",
	"@@Distance-Allocation_sourcerowandcolumnbands_tag2@@": "Markerad – Ett multibandraster skapas. Det första bandet är avståndstilldelningsrastret, det andra bandet innehåller ett radindex och det tredje bandet innehåller ett kolumnindex. Dessa index identifierar platsen för källcellen som är den lägsta ackumulerade avståndskostnaden bort.",
	"@@Distance-Allocation_surfaceraster_tag0@@": "Ett raster som definierar höjdvärdena för varje cellplats.",
	"@@Distance-Allocation_surfaceraster_tag1@@": "Värdena används för att beräkna det faktiska täckta ytavståndet vid passage mellan celler.",
	"@@Distance-Allocation_traveldirection_tag0@@": "Definierar resenärens riktning vid användning av vertikalfaktor, horisontalfaktor och källans motståndskostnad.",
	"@@Distance-Allocation_traveldirection_tag1@@": "<strong>Från källa</strong> – Vertikalfaktor, horisontalfaktor och källans motståndskostnad kommer att användas med början vid indatakällan för att flytta ut till icke-källcellerna. Det här är standardinställningen.",
	"@@Distance-Allocation_traveldirection_tag2@@": "<strong>Till källa</strong> – Vertikalfaktor, horisontalfaktor och källans motståndskostnad kommer att användas med början vid varje icke-källcell för att flytta tillbaka till indatakällan.",
	"@@Distance-Allocation_traveldirection_tag3@@": "Ange antingen nyckelordet <strong>Från källa</strong> eller <strong>Till källa</strong>, som ska tillämpas på alla källor, eller ange ett fält i <strong>Källraster</strong> som innehåller de nyckelord som ska identifiera färdriktning för varje källa. Det fältet måste innehålla strängen ${FROM_SOURCE} eller ${TO_SOURCE}.",
	"@@Distance-Allocation_verticalfactor_tag0@@": "<p>Definierar förhållandet mellan den vertikala kostnadsfaktorn och den vertikala relativa rörelsevinkeln (VRMA).</p><p>Det finns flera faktorer med modifierare som identifierar ett definierat vertikalt faktordiagram. Dessutom kan en tabell användas till att skapa ett anpassat diagram. Diagrammen används till att identifiera den vertikala faktor som används vid beräkning av den totala kostnaden för att flytta in i en angränsande cell.</p><p>I förklaringarna nedan används två förkortningar: VF och VRMA. VF står för vertikalfaktor, som definierar den vertikala svårigheten man möter när man flyttar från en cell till nästa. VRMA står för vertical relative moving angle, dvs. vertikal relativ rörelsevinkel, vilket identifierar lutningsvinkel mellan FRÅN-cellen och TILL-cellen.</p><p><strong>Vertikalfaktor</strong>-typerna innehåller följande:</p><ul><li><strong>Binär</strong>--Anger att om VRMA är större än den låga klippvinkeln och mindre än den höga klippvinkeln, får VF det värde som är kopplat till nollfaktorn. Annars får det ett oändligt värde.</li><li><strong>Linjär</strong>--Anger att VF är en linjär funktion av VRMA.</li><li><strong>Symmetrisk linjär</strong>--Anger att VF är en linjär funktion av VRMA på antingen den positiva eller negativa sidan av VRMA och att de två linjära funktionerna är symmetriska med avseende på VF (y)-axel.</li><li><strong>Omvänd linjär</strong>--Anger att VF är en inverterad linjär funktion av VRMA.</li><li><strong>Symmetriskt inverterad linjär</strong>--Anger att VF är en inverterad linjär funktion av VRMA på antingen den positiva eller negativa sidan av VRMA och att de två linjära funktionerna är symmetriska med avseende på VF (y)-axeln.</li><li><strong>Cos</strong>--Anger att VF är den cosinusbaserade funktionen av VRMA.</li><li><strong>Sec</strong>--Anger att VF är den sekantbaserade funktionen av VRMA.</li><li><strong>Cos-Sec</strong>--Anger att VF är den cosinusbaserade funktionen av VRMA när VRMA är negativt och den sekantbaserade funktionen av VRMA när VRMA inte är negativt.</li><li><strong>Sec-Cos</strong>--Anger att VF är den sekantbaserade funktionen av VRMA när VRMA är negativt och den cosinusbaserade funktionen av VRMA när VRMA inte är negativt.</li><li><strong>Tablell</strong>--Identifierar att en tabellfil kommer att användas för att definiera det vertikalfaktorsdiagram som används för att bestämma VF-värden.</li></ul><p>Modifierarna till de vertikala sökorden är följande:</p><ul><li><strong>Nollfaktor</strong>--Fastställer den vertikalfaktor som ska användas när VRMA är noll. Denna faktor positionerar y-interceptet av den angivna funktionen. Per definition är nollfaktorn inte tillämplig på de trigonometriska vertikalfunktionerna (COS, SEK, COS-SEK eller SEK-COS). Y-intercept definieras av dessa funktioner.</li><li><strong>Låg klippvinkel</strong>--Definierar den VRMA-vinkel under vilken VF får ett oändligt värde.</li><li><strong>Hög klippvinkel</strong>-- Definierar den VRMA-vinkel ovanför vilken VF får ett oändligt värde.</li><li><strong>Lutning</strong>--Fastställer lutningen för den räta linje som används med vertikalfaktornyckelorden<strong>Linjär</strong>och<strong>Omvänd linjär</strong>. Lutningen anges som ett bråk av förändring på y-axeln delat med förändringen på x-axeln (45 procent lutning är 1/45, vilket blir indata som 0,02222).</li><li><strong>Tabellnamn</strong>--Identifierar namnet på den tabell som definierar VF.</li></ul>",
	"@@Distance-Allocation_verticalraster_tag0@@": "Definierar förhållandet mellan den vertikala kostnadsfaktorn och den vertikala relativa rörelsevinkeln (VRMA).",
	"@@Distance-Allocation_verticalraster_tag1@@": "Värdena används till att beräkna lutningen som används för att identifiera den vertikala faktor som uppkommit vid förflyttning från en cell till en annan.",
	"@@Euclidean-Back-Direction_cellsize_tag0@@": "Den cellstorlek som utdatarastret skapas vid.",
	"@@Euclidean-Back-Direction_cellsize_tag1@@": "Om cellstorleken har angetts uttryckligen i <strong>Miljöer</strong>, angetts uttryckligen i Analysmiljö, blir det standardcellstorleken. Om den inte har angetts blir utdatacellstorleken densamma som <strong>Källraster</strong>.",
	"@@Euclidean-Back-Direction_distancemethod_tag0@@": "Avgör om avståndet ska beräknas med en planmetod (platt jordyta) eller en geodetisk metod (ellipsoid).",
	"@@Euclidean-Back-Direction_distancemethod_tag1@@": "Plan – planmätningar använder 2D-kartesisk matematik för att beräkna längd och area. Alternativet är endast tillgängligt vid mätning i ett projicerat koordinatsystem, och 2D-planet i detta koordinatsystem kommer att användas som grund för mätningarna.",
	"@@Euclidean-Back-Direction_distancemethod_tag2@@": "Geodetisk – den kortaste linjen mellan två punkter på jordens yta på en rotationsellipsoid (ellipsoid). Det innebär att resultatet inte förändras beroende på indata- eller utdataprojektion.",
	"@@Euclidean-Back-Direction_distancemethod_tag3@@": "<strong>Obs!</strong> En användning för en geodetisk linje är när du vill bestämma det kortaste avståndet mellan två städer för ett flygplans flygväg. Detta är också känt som en storcirkellinje om den baseras på en sfär snarare än en ellipsoid.",
	"@@Euclidean-Back-Direction_maximumdistance_tag0@@": "Definierar tröskelavståndet inom vilket riktningen till den närmaste källan ska beräknas. Om avståndet till den närmaste källan överskrider detta kommer utdata för den cellen att vara NoData.",
	"@@Euclidean-Back-Direction_maximumdistance_tag1@@": "Standardavståndet är till udatarastrets utbredning.",
	"@@Euclidean-Back-Direction_rasterbarriers_tag0@@": "Det raster som definierar hindren.",
	"@@Euclidean-Back-Direction_rasterbarriers_tag1@@": "Datasetet måste innehålla NoData där det inte finns några hinder. Hindren representeras av giltiga värden inklusive noll.",
	"@@Euclidean-Back-Direction_rasterbarriers_tag2@@": "Hindren kan definieras av ett heltal eller ett flyttalsraster.",
	"@@Euclidean-Back-Direction_sourceraster_tag0@@": "Ett rasterdataset som identifierar de celler eller platser till vilka den euklidiska riktningen för varje utdatacellplats beräknas.",
	"@@Euclidean-Back-Direction_sourceraster_tag1@@": "Indatatypen kan vara heltal eller flyttal.",
	"@@Cost-Path_costbacklinkraster_tag0@@": "Namnet på en bakåtlänks rasterlager för en kostnad som används till att bestämma vägen tillbaka till en källa via den mest kostnadseffektiva rutten.",
	"@@Cost-Path_costbacklinkraster_tag1@@": "För varje cell i bakåtlänksrastret finns ett värde som identifierar grannen som är nästa cell på rutten med den lägsta ackumulerade kostnaden från cellen till en enda källcell eller en uppsättning källceller.",
	"@@Cost-Path_costdistanceraster_tag0@@": "Namnet på ett raster för en avståndskostnad som ska användas till att bestämma den mest kostnadseffektiva rutten från destinationsplatserna till en källa.",
	"@@Cost-Path_costdistanceraster_tag1@@": "Rastret för avståndskostnad skapas vanligen med funktionen Kostnad för avstånd, Kostnadsallokering eller Bakåtlänk för kostnad. Rasterlagret för avståndskostnad lagrar för varje cell den lägsta ackumulerade avståndskostnaden över en kostnadsyta från varje cell till en uppsättning källceller.",
	"@@Cost-Path_destinationfield_tag0@@": "Fältet som används för att erhålla värden för destinationsplatser. Geoobjektdata i indata måste innehålla minst ett giltigt fält.",
	"@@Cost-Path_destinationraster_tag0@@": "Ett rasterdatasetlager som identifierar de celler från vilka den billigaste rutten kan bestämmas till den mest kostnadseffektiva källan.",
	"@@Cost-Path_destinationraster_tag1@@": "Indatarasterlagret består av celler som har giltiga värden (noll är ett giltigt värde), och de återstående cellerna måste tilldelas NoData.",
	"@@Cost-Path_forceflowdirectionconventionforbacklinkraster_tag0@@": "Tvingar funktionen att behandla bakåtlänksrastret för indata som ett flödesriktningsraster. Flödesriktningsraster kan ha ett heltal med värden från 0-255.",
	"@@Cost-Path_forceflowdirectionconventionforbacklinkraster_tag1@@": "Avmarkerad – Om värdena av det specificerade bakåtlänksrastret är heltal i intervallet 0-8, behandlas datasetet som ett raster för bakåtlänkskostnad. Om värdena är från 0-255 behandlas indata som ett flödesriktningsraster. Om värdena är från 0-360 och av flyttalstyp behandlas indata som ett tillbakariktningsraster.",
	"@@Cost-Path_forceflowdirectionconventionforbacklinkraster_tag2@@": "Markerad – Rastret som tillhandahålls för bakåtlänksraster behandlas som ett flödesriktningsraster. Använd det här alternativet om flödesriktningsrastret har ett maxvärde på 8 eller mindre.",
	"@@Cost-Path_pathtype_tag0@@": "Ett nyckelord som definierar hur värden och zoner i inkommande destinationsdata kommer att tolkas i kostnadsberäkningar för rutter. Följande alternativ finns:",
	"@@Cost-Path_pathtype_tag1@@": "<strong>Varje cell</strong> – För varje cell med giltiga värden i inkommande destinationsdata avgörs en billigaste rutt som sedan sparas i utdatarastret. Med det här alternativet behandlas varje cell i inkommande destinationsdata separat, och en billigaste rutt bestäms för varje cell.",
	"@@Cost-Path_pathtype_tag2@@": "<strong>Varje zon</strong> – För varje zon med giltiga värden i inkommande destinationsdata avgörs en billigaste rutt som sedan sparas i utdatarastret. Med det här alternativet börjar den billigaste rutten för varje zon vid cellen med den lägsta kostnaden för avståndsviktning i zonen.",
	"@@Cost-Path_pathtype_tag3@@": "<strong>Bästa enskild</strong> – För varje cell i inkommande destinationsdata härleds en billigaste rutt från cellen med lägst antal rutter med lägst kostnad till källcellerna.",
	"@@Cell-Statistics_cellsizetype_tag0@@": "Välj vilka celler som ska användas i utdatarastret. Om alla indatacellernas storlekar är identiska ger alla alternativen samma resultat.",
	"@@Cell-Statistics_cellsizetype_tag1@@": "Först av – använd den första cellens storlek i indatarastren.",
	"@@Cell-Statistics_cellsizetype_tag2@@": "Min. av – använd den minsta cellens storlek i indatarastren.",
	"@@Cell-Statistics_cellsizetype_tag3@@": "Max av – använd den största cellens storlek i indatarastren. Det här är standardinställningen.",
	"@@Cell-Statistics_cellsizetype_tag4@@": "Medel av – använd den genomsnittliga cellstorleken i indatarastren.",
	"@@Cell-Statistics_cellsizetype_tag5@@": "Sist av – använd den sista cellens storlek i indatarastren.",
	"@@Cell-Statistics_extenttype_tag0@@": "Välj vilken utbredning som ska användas i utdatarastret:",
	"@@Cell-Statistics_extenttype_tag1@@": "Först av – använd det första indatarastrets utbredning för att bestämma bearbetningsutbredningen.",
	"@@Cell-Statistics_extenttype_tag2@@": "Snittet mellan – använd de överlappande pixlarnas utbredning för att bestämma bearbetningsutbredningen. Det här är standardinställningen.",
	"@@Cell-Statistics_extenttype_tag3@@": "Unionen av – använd alla rastrens utbredning för att bestämma bearbetningsutbredningen.",
	"@@Cell-Statistics_extenttype_tag4@@": "Sist av – använd det sista indatarastrets utbredning för att bestämma bearbetningsutbredningen.",
	"@@Cell-Statistics_processasmultiband_tag0@@": "Avgör hur banden i indatarastren bearbetas.",
	"@@Cell-Statistics_processasmultiband_tag1@@": "Avmarkerad – Alla multibandindata bearbetas som singelband. Det här är standardinställningen.",
	"@@Cell-Statistics_processasmultiband_tag2@@": "Markerad – Alla multibandindata bearbetas som multiband.",
	"@@Cell-Statistics_rasters_tag0@@": "Listan över raster från vilka statistiken ska beräknas pixel för pixel.",
	"@@Cell-Statistics_percentileinterpolationtype_tag0@@": "<p>Anger metod för interpolering som ska användas när angivet percentilvärde ligger mellan två indatacellvärden.</p><ul><li><strong>Autoidentifiering</strong>--Om indatarastret är av typen heltalspixel, används metoden<strong>Närmast</strong>. Om indatarastret är av flyttalspixeltyp används metoden<strong>Linjär</strong>. Det här är standardinställningen.</li><li><strong>Närmast</strong> – Det närmaste tillgängliga värdet används till önskad percentil. I det här fallet är utdatapixeltypen samma som rastren i indatavärdet.</li><li><strong>Linjär</strong>--Det viktade medelvärdet av de två omgivande värdena från den önskade percentilen används. I det här fallet är utdatapixeltypen flyttal.</li></ul><p>Det här alternativet är bara tillgängligt om parametern<strong>Åtgärds</strong>-typ är inställd på<strong>Median</strong>eller<strong>Percentil</strong>.</p>",
	"@@Cell-Statistics_percentilevalue_tag0@@": "<p>Percentilen som ska beräknas. Standard är 90 för den nittionde percentilen.</p><p>Värdena kan vara från 0 till 100. Percentilen 0 motsvarar i huvudsak statistikkategorin Minimum, och den 100:e percentilen motsvarar Maximum. Värdet 50 ger i huvudsak samma resultat som statistikkategorin Median.</p><p>Det här alternativet är bara tillgängligt om parametern<strong>Åtgärd</strong>är inställd på<strong>Percentil</strong>.</p>",
	"@@Optimal-Path-As-Raster_backdirectionrasterorflowdirectionraster_tag0@@": "Tillbakariktningsrastret innehåller beräknade riktningar i grader. Riktningen identifierar nästa cell längs den optimala vägen tillbaka till den lägsta ackumulerade kostnadskällan samtidigt som hinder undviks.",
	"@@Optimal-Path-As-Raster_backdirectionrasterorflowdirectionraster_tag1@@": "Värdeintervallet är från 0 till 360 grader, med 0 reserverat för ursprungsceller. Östlig riktning (höger) är 90, och värdena ökar medurs (180 är söder, 270 är väster och 360 är norr).",
	"@@Optimal-Path-As-Raster_destinationfield_tag0@@": "Fältet som används för att erhålla värden för destinationsplatser.",
	"@@Optimal-Path-As-Raster_destinationraster_tag0@@": "Ett rasterdatasetlager som identifierar de celler från vilka den optimala vägen kan bestämmas till den mest kostnadseffektiva källan. Dessa indata är obligatoriska.",
	"@@Optimal-Path-As-Raster_destinationraster_tag1@@": "Indatarasterlagret består av celler som har giltiga värden (noll är ett giltigt värde), och de återstående cellerna måste tilldelas NoData.",
	"@@Optimal-Path-As-Raster_distanceaccumulationraster_tag0@@": "Avståndsackumuleringsrastret används för att avgöra den optimala vägen från destinationerna till källorna. Avståndsackumuleringsrastret skapas vanligen med funktionen <strong>Avståndsackumulering</strong>. Varje cell i avståndsackumuleringsrastret representerar den lägsta ackumulerade avståndskostnaden över en yta från varje cell till en uppsättning källceller.",
	"@@Optimal-Path-As-Raster_pathtype_tag0@@": "Anger ett nyckelord som definierar hur värden och zoner i inkommande destinationsdata kommer att tolkas i kostnadsberäkningar för rutter.",
	"@@Optimal-Path-As-Raster_pathtype_tag1@@": "<strong>Varje zon</strong> – För varje zon med giltiga värden i inkommande destinationsdata avgörs en billigaste rutt som sedan sparas i utdatarastret. Med det här alternativet börjar den optimala vägen för varje zon vid cellen med den lägsta kostnaden för avståndsviktning i zonen.",
	"@@Optimal-Path-As-Raster_pathtype_tag2@@": "<strong>Bästa enskild</strong> – För varje cell i inkommande destinationsdata härleds en optimal väg från cellen med lägst antal rutter med lägst kostnad till källcellerna.",
	"@@Optimal-Path-As-Raster_pathtype_tag3@@": "<strong>Varje cell</strong> – För varje cell med giltiga värden i inkommande destinationsdata avgörs en optimal väg. Med det här alternativet behandlas varje cell i inkommande destinationsdata separat, och en optimal rutt bestäms för varje cell.",
	"@@CCDC-Analysis_bandsfordetectingchange_tag0@@": "De bandidentifierare som ska användas för förändringsdetektion. Om inga bandidentifierare anges, används alla band från indatarasterdatasetet.",
	"@@CCDC-Analysis_bandsfordetectingchange_tag1@@": "ID-värdena ska vara heltal avgränsade med blanksteg.",
	"@@CCDC-Analysis_bandsfortemporalmasking_tag0@@": "De bandidentifierare för det gröna bandet och SWIR-bandet som ska användas för att maskera för moln, molnskugga och snö. Om inga bandidentifierare anges utförs ingen maskning.",
	"@@CCDC-Analysis_bandsfortemporalmasking_tag1@@": "ID-värdena ska vara heltal avgränsade med blanksteg.",
	"@@CCDC-Analysis_bandsfortemporalmasking_tag2@@": "Den här parametern specificerar vilka band som ska användas för att maska moln, molnskugga och snö. Eftersom molnskugga och snö visas mycket mörka i det kortvågiga infraröda bandet (SWIR) och moln och snö är mycket ljusa i det gröna bandet, rekommenderas det att bandindexen för SWIR-bandet och det gröna bandet maskas.",
	"@@CCDC-Analysis_chi-squaredthresholdfordetectchange_tag0@@": "Chikvadrattröskelvärdet för förändringssannolikhet. Om en observation har en beräknad förändringssannolikhet som är ovanför det här tröskelvärdet, flaggas den som en anomali, som är en potentiell förändringshändelse. Standardvärdet är 0,99.",
	"@@CCDC-Analysis_minimumconsecutiveanomalyobservations_tag0@@": "Det lägsta antalet sammanhängande anomaliobservationer som måste inträffa innan en händelse anses vara en förändring. En pixel måste flaggas som en anomali i det angivna antalet sammanhängande tidsdelar innan den anses vara en verklig förändring. Standard är 6.",
	"@@CCDC-Analysis_raster_tag0@@": "Flerdimensionellt rasterlager som indata.",
	"@@CCDC-Analysis_updatingfittingfrequency(inyears)_tag0@@": "Frekvensen för att uppdatera tidsseriemodellen med nya observationer. Standard är att uppdatera modellen en gång om året.",
	"@@CCDC-Analysis_updatingfittingfrequency(inyears)_tag1@@": "Parametern definierar hur ofta tidsseriemodellen ska uppdateras med nya observationer. Att uppdatera en modell ofta kan vara beräkningsmässigt kostsamt och fördelarna kan vara minimala. Om det till exempel finns 365 sektorer eller tydliga observationer per år i det flerdimensionella rastret, och uppdateringsfrekvensen är för varje observation, blir bearbetningen 365 gånger så beräkningsmässigt kostsam jämfört med att uppdatera en gång om året, men noggrannheten kanske inte blir högre.",
	"@@Trend-To-RGB_modeltype_tag0@@": "Typen av modellinformation som ska konverteras till RGB.",
	"@@Trend-To-RGB_modeltype_tag1@@": "Linjär – Linjär trendinformation konverteras till RGB. Det här är standardinställningen.",
	"@@Trend-To-RGB_modeltype_tag2@@": "Harmonisk – Harmonisk trendinformation konverteras till RGB.",
	"@@Trend-To-RGB_raster_tag0@@": "Trendraster som indata.",
	"@@LandTrendr-Analysis_bestmodelproportion_tag0@@": "<p>Det bästa värdet för modellproportion. Under modellurvalsprocessen beräknar verktyget p-värdet för varje modell och väljer en modell som har flest brytpunkter samtidigt som den bibehåller det minsta (mest signifikanta) p-värdet baserat på detta proportionsvärde. Ett värde på 1 innebär att modellen har det lägsta p-värdet men kanske inte har ett högt antal brytpunkter. Standard är 1,25.</p>",
	"@@LandTrendr-Analysis_maximumnumberofsegments_tag0@@": "<p>Det maximala antalet segment som ska anpassas till tidsserien för varje pixel. Standard är 5.</p>",
	"@@LandTrendr-Analysis_minimumnumberofobservations_tag0@@": "<p>Det minsta antal giltiga observationer som krävs för att utföra anpassning. Antalet år i det flerdimensionella datasetet för indata måste vara lika med eller större än detta värde. Standard är 6.</p>",
	"@@LandTrendr-Analysis_outputotherbands_tag0@@": "<p>Anger huruvida andra band ska inkluderas i resultaten.</p><ul><li>Markerat – Andra band kommer att inkluderas i resultaten. Segmenterings- och brytpunktsinformation från det ursprungliga segmenteringsbandet som anges i parametern<strong>Bearbetar band</strong> anpassas också till återstående band i multibandsbilderna. Modellresultaten inkluderar segmenteringsbandet först, sedan de återstående banden.</li><li>Avmarkerat – Övriga band tas inte med. Det här är standardinställningen.</li></ul>",
	"@@LandTrendr-Analysis_preventoneyearrecovery_tag0@@": "<p>Anger huruvida segment som visar ett års återhämtning ska uteslutas.</p><ul><li>Markerat – Segment som uppvisar ett års återhämtning kommer att uteslutas. Det här är standardinställningen.</li><li>Avmarkerat – Segment som uppvisar ett års återhämtning utesluts inte.</li></ul>",
	"@@LandTrendr-Analysis_processingband_tag0@@": "<p>Det band som används för att segmentera pixelvärdesbanorna över tid. Välj det band som bäst registrerar ändringarna i det geoobjekt som du vill observera.</p>",
	"@@LandTrendr-Analysis_p-valuethreshold_tag0@@": "<p>Tröskelvärdet för p-värdet för en modell som ska väljas. När brytpunkterna har upptäckts i det inledande steget av modellanpassningen kommer verktyget att passa varje segment och beräkna p-värdet för att bestämma modellens signifikans. För nästa iteration minskar modellen antalet segment med ett och omberäknar p-värdet. Detta fortsätter, och om p-värdet är lägre än det värde som anges i den här parametern, väljs modellen och verktyget slutar söka efter en bättre modell. Om ingen sådan modell har valts väljer verktyget en modell med ett p-värde som är lägre än det<strong>lägsta p-värdet × bästa modellproportionsvärde</strong>. Standard är 0,01.</p>",
	"@@LandTrendr-Analysis_raster_tag0@@": "<p>Flerdimensionellt Landsat-rasterlager som indata.</p>",
	"@@LandTrendr-Analysis_recoveryhasincreasetrend_tag0@@": "<p>Anger om återhämtningen har en ökande (positiv) trend.</p><ul><li>Markerat – Återhämtningen har en ökande trend. Det här är standardinställningen</li><li>Omarkerat – Återhämtningen har en minskande trend.</li></ul>",
	"@@LandTrendr-Analysis_recoverythreshold_tag0@@": "<p>Tröskelvärdet för återhämtning i år. Om ett segment har en återhämtningshastighet som är snabbare än<strong>1/återhämtningströskel</strong>, ignoreras segmentet och inkluderas inte i tidsseriens modell. Värdet måste vara mellan 0 och 1. Standard är 0,25.</p>",
	"@@LandTrendr-Analysis_snappingdate_tag0@@": "<p>Det datum som används för att välja en sektor för varje år i det flerdimensionella indatasetet. Sektorn med det datum som är närmast snappningsdatumet väljs. Den här parametern är obligatorisk om indatasetet innehåller underårsdata.</p>",
	"@@LandTrendr-Analysis_spikethreshold_tag0@@": "<p>Tröskelvärdet som ska användas för att dämpa toppar eller avvikelser i pixelvärdets bana. Värdet måste vara mellan 0 och 1 där 1 innebär ingen dämpning. Standard är 0,9.</p>",
	"@@LandTrendr-Analysis_vertexcountovershoot_tag0@@": "<p>Antalet ytterligare brytpunkter bortom<strong>max_num_segments + 1</strong>som kan användas för att passa modellen under det inledande stadiet för att identifiera brytpunkter. Senare i modelleringsprocessen kommer antalet ytterligare brytpunkter att minskas till<strong>max_num_segments + 1</strong>. Standard är 2.</p>",
	"@@Merge-Rasters_rasters_tag0@@": "<p>De indatarasterdataset eller flerdimensionella rasterdataset som ska sammanfogas.</p>",
	"@@Merge-Rasters_resolveoverlapmethod_tag0@@": "<p>Anger vilken metod som ska användas för att hantera överlappande pixlar i de kombinerade dataseten.</p><ul><li><strong>Först </strong> – Pixelvärdet i överlappande områden är värdet från det första rastret i listan med indataraster. Det här är standardinställningen.</li><li><strong>Senast</strong> – Pixelvärdet i de överlappande ytorna är värdet från det senaste rastret i listan med indataraster.</li><li><strong>Min</strong> – Pixelvärdet i de överlappande ytorna är det minsta värdet av de överlappande pixlarna.</li><li><strong>Max</strong> – Pixelvärdet i de överlappande ytorna är det maximala värdet för överlappande pixlar.</li><li><strong>Medelvärde</strong> – pixelvärdet i de överlappande ytorna är genomsnittet av de överlappande pixlarna.</li><li><strong>Summa</strong> – pixelvärdet i de överlappande ytorna är summan av överlappande pixlar.</li></ul>",
	"@@Generate-Trend_cycleunit_tag0@@": "<p>Anger vilken tidsenhet som ska användas för längden på en harmonisk cykel.</p><ul><li><strong>Dagar</strong> – Enheten för längden på den harmoniska cykeln är dagar.</li><li><strong>År</strong> – Enheten för längden på den harmoniska cykeln är år. Det här är standardinställningen.</li></ul>",
	"@@Generate-Trend_dimensionname_tag0@@": "<p>Den dimension längs vilken en trend extraheras för variabeln eller variablerna som valts i analysen.</p>",
	"@@Generate-Trend_harmonicfrequency_tag0@@": "<p>Frekvenssiffra som ska användas i trendinpassningen. Den här parametern anger frekvensen för cykler under ett år. Standardvärdet är 1 eller en harmonisk cykel per år.</p><p>Denna parameter inkluderas bara i trendanalysen för en harmonisk regression.</p>",
	"@@Generate-Trend_ignorenodata_tag0@@": "<p>Anger huruvida NoData-värden ignoreras i analysen.</p><ul><li>Markerad – Analysen inkluderar alla giltiga pixlar längs en given dimension och ignorerar eventuella NoData-pixlar. Det här är standardinställningen.</li><li>Omarkerat – Analysen resulterar i NoData om det finns NoData-värden för pixlarna längs en angiven dimension.</li></ul>",
	"@@Generate-Trend_lengthofcycle_tag0@@": "<p>Längden av periodisk variation att modellera. Enheten är dagar, oavsett indatas tidsenhet. Till exempel har blads grönhet en stark variationscykel under ett enda år, så cykellängden är 365,25, även om indata är månatlig grönhet. Temperaturdata per timme har en stark variationscykel under en enda dag, så cykellängden är 1.</p><p>Standardlängden är 365,25 dagar för data som varierar enligt en årlig cykel.</p>",
	"@@Generate-Trend_p-valueofslopecoefficient_tag0@@": "<p>Anger om p-värdesstatistiken för lutningskoefficienten för trendlinjen ska beräknas.</p><ul><li>Markerat – P-värdet beräknas och visas i detaljerna när funktionen slutförs.</li><li>Omarkerat – P-värdet beräknas inte. Det här är standardinställningen.</li></ul>",
	"@@Generate-Trend_polynomialorder_tag0@@": "<p>Polynomordningssiffra som ska användas i trendinpassningen. Denna parameter anger polynomordningen. Standardvärdet är 2 eller andra ordningens polynom.</p><p>Parametern inkluderas bara i trendanalysen för en polynomregression.</p>",
	"@@Generate-Trend_r-squared_tag0@@": "<p>Anger om statistiken för R-kvadratens goodness-of-fit ska beräknas för trendanpassningen.</p><ul><li>Markerat – R-kvadraten beräknas och visas i detaljuppgifterna när funktionen är klar.</li><li>Avmarkerat – R-kvadraten beräknas inte. Det här är standardinställningen.</li></ul>",
	"@@Generate-Trend_raster_tag0@@": "<p>Flerdimensionellt raster som indata.</p>",
	"@@Generate-Trend_rmse_tag0@@": "<p>Anger om medelkvadratrotsfelet för trendanpassningslinjen ska genereras.</p><ul><li>Markerat – Medelkvadratrotsfelet beräknas och visas i detaljerna när funktionen slutförts. Det här är standardinställningen.</li><li>Omarkerat – Medelkvadratrotsfelet beräknas inte.</li></ul>",
	"@@Generate-Trend_seasonalperiod_tag0@@": "<p>Anger vilken tidsenhet som ska användas för längden på en säsongsperiod när Seasonal-Kendall-testet utförs.</p><ul><li>Dagar - Enheten för säsongsperiodens längd är dagar. Det här är standardinställningen.</li><li>Månader – Enheten för säsongsperiodens längd är månader.</li></ul>",
	"@@Generate-Trend_trendtype_tag0@@": "<p>Anger typ av linje som ska användas för anpassning till pixelvärdena längs en dimension.</p><ul><li><strong>Linjär</strong> – Anpassar pixelvärdena till en variabel längs en linjär trendlinje. Det här är standardinställningen.</li><li><strong>Harmonisk</strong> – Anpassar pixelvärdena till en variabel längs en harmonisk trendlinje.</li><li><strong>Polynom</strong> – Anpassar pixelvärdena till en variabel längs en andra ordnings polynomtrendlinje.</li><li><strong>Mann-Kendall</strong> – Variabla pixelvärden utvärderas med hjälp av Mann-Kendall-trendtestet.</li><li><strong>Seasonal Kendall</strong> – Variabla pixelvärden utvärderas med hjälp av Seasonal-Kendall-trendtestet.</li></ul>",
	"@@Compute-Change_cellsizetype_tag0@@": "<p>Välj vilka celler som ska användas i utdatarastret. Om alla indatacellernas storlekar är identiska ger alla alternativen samma resultat.</p><ul><li>Först av – använd den första cellens storlek i indatarastren.</li><li>Min. av – använd den minsta cellens storlek i alla indataraster.</li><li>Max av – använd den största cellens storlek i alla indataraster. Det här är standardinställningen.</li><li>Medel av – använd den genomsnittliga cellstorleken i alla indataraster.</li><li>Sist av – använd den sista cellens storlek i indatarastren.</li></ul>",
	"@@Compute-Change_computechangemethod_tag0@@": "<p>Metoden som används för beräkning.</p><ul><li><strong>Skillnad</strong> – Den matematiska skillnaden, eller subtraktionen, mellan pixelvärdena i indatarastren beräknas. Det här är standardinställningen.</li><li><strong>Relativ skillnad</strong> -- Skillnaden i pixelvärden, med hänsyn tagen till magnituden för de värden som jämförs, beräknas.</li><li><strong>Kategorisk skillnad</strong> -- Skillnaden mellan två kategoriska eller tematiska raster beräknas, där utdata innehåller klassövergångar som inträffade mellan de båda rastren.</li><li><strong>Spektralt euklidiskt avstånd</strong> -- Det euklidiska avståndet mellan pixelvärdena för två flerbandsraset beräknas.</li><li><strong>Spektral vinkelskillnad</strong> -- Den spektrala vinkeln mellan pixelvärdena för två flerbandsraster beräknas. Utdata är i radianer.</li><li><strong>Band med störst förändring</strong> -- Bandet som orsakat störst förändring i varje pixel mellan två flerbandsraster beräknas.</li></ul><p>Om<strong>Metod för Beräkna förändring</strong>är inställt på<strong>Kategorisk skillnad</strong>och ett av indata inte är kategoriskt, beräknas en enkel skillnad.</p>",
	"@@Compute-Change_definetransitioncolors_tag0@@": "<p>Ange vilken metod som ska användas för att symbolisera pixlarna som har ändrade klasser.</p><ul><li><strong>Genomsnittliga från- och till-färger </strong> – Färgen på pixeln blir medelvärdet av färgen på den ursprungliga klassen och färgen på dess slutliga klass.</li><li><strong>Använd från-färger</strong> – Färgen på pixeln blir den ursprungliga klassens färg.</li><li><strong>Använd till-färger</strong> – Färgen på pixeln blir den slutliga klassens färg.</li></ul>",
	"@@Compute-Change_extenttype_tag0@@": "<p>Välj vilken utbredning som ska användas i utdatarastret:</p><ul><li>Först av – använd det första indatarastrets utbredning för att bestämma bearbetningsutbredningen.</li><li>Snittet mellan – använd de överlappande pixlarnas utbredning för att bestämma bearbetningsutbredningen. Det här är standardinställningen.</li><li>Unionen av – använd alla rastrens utbredning för att bestämma bearbetningsutbredningen.</li><li>Sist av – använd det sista indatarastrets utbredning för att bestämma bearbetningsutbredningen.</li></ul>",
	"@@Compute-Change_filtermethod_tag0@@": "<p>Välj filtermetod för beräkning av kategoriska förändringar.</p><ul><li><strong>Behåll alla</strong> – Alla klasser ingår i utdata, och ingen filtrering utförs. Välj det här alternativet om du vill se förändring och bevarande i ett enda dataset.</li><li><strong>Behåll endast ändrade pixlar</strong> – Endast de klasser som har ändrats från en klasstyp till en annan klasstyp ingår i utdata. Välj det här alternativet om du bara är intresserad av förändringar.</li><li><strong>Behåll endast oförändrade pixlar</strong> – Endast de klasser som inte har ändrats ingår i utdata. Välj det här alternativet om du bara är intresserad av bevarande.</li></ul>",
	"@@Compute-Change_fromclassvalues_tag0@@": "<p>Klassvärdena från det<strong>Frånraster</strong>som ska tas med i beräkningen, om du jämför två kategoriska raster. Detta är en avgränsad lista med heltalsvärden som motsvarar fältet <strong>ClassValue</strong> i indatarasterdatasetet.</p>",
	"@@Compute-Change_fromraster_tag0@@": "<p>Det första rastret som ska användas i beräkningen. Utvärdera förändringar från tid 1 (tidigare) till tid 2 (senare) genom att ange tid 1-rastret här.</p>",
	"@@Compute-Change_toclassvalues_tag0@@": "<p>Klassvärdena från det<strong>Tillraster</strong>som ska tas med i beräkningen, om du jämför två kategoriska raster. Detta är en avgränsad lista med heltalsvärden som motsvarar fältet <strong>ClassValue</strong> i indatarasterdatasetet.</p>",
	"@@Compute-Change_toraster_tag0@@": "<p>Det andra rastret som ska användas i beräkningen. Utvärdera förändringar från tid 1 (tidigare) till tid 2 (senare) genom att ange tid 2-rastret.</p>",
	"@@Compute-Change_usecolormethod_tag0@@": "<p>Ange vilken metod som ska användas för att symbolisera pixlarna som har ändrade klasser.</p><ul><li><strong>Genomsnittliga från- och till-färger </strong> – Färgen på pixeln blir medelvärdet av färgen på den ursprungliga klassen och färgen på dess slutliga klass.</li><li><strong>Använd från-färger</strong> – Färgen på pixeln blir den ursprungliga klassens färg.</li><li><strong>Använd till-färger</strong> – Färgen på pixeln blir den slutliga klassens färg.</li></ul>",
	"@@Compute-Change_fieldnameforclassnamesinfromraster_tag0@@": "<p>Ett fält som lagrar klassnamn i indata<strong>Från raster</strong>. Verktyget söker automatiskt efter fältet<strong>Klassnamn</strong>eller fältet<strong>Class_Name</strong>som ska användas.</p><p>Använd det här alternativet om indata inte innehåller dessa standardfältnamn.</p>",
	"@@Compute-Change_fieldnameforclassnamesintoraster_tag0@@": "<p>Ett fält som lagrar klassnamn i indata<strong>Till raster</strong>. Verktyget söker automatiskt efter fältet<strong>Klassnamn</strong>eller fältet<strong>Class_Name</strong>som ska användas.</p><p>Använd det här alternativet om indata inte innehåller dessa standardfältnamn.</p>",
	"@@Statistics_numberofcolumns_tag0@@": "<p>Antalet pixelkolumner som ska användas i en fokal grannskapsdimension.</p>",
	"@@Statistics_numberofrows_tag0@@": "<p>Antalet pixelrader som ska användas i en fokal grannskapsdimension.</p>",
	"@@Statistics_onlyfillnodatapixels_tag0@@": "<p>Fyller i NoData-mellanrum i utdata. Det här är användbart när dina bilder kan ha utelämnat linjer.</p>",
	"@@Statistics_raster_tag0@@": "<p>Det indataraster som den fokala statistiken ska utföras på.</p>",
	"@@Statistics_statisticstype_tag0@@": "<p>Följande är de sju typerna av fokala statistiska funktioner:</p><ul><li>Minimum – beräknar minimivärdet för pixlarna i grannskapet.</li><li>Maximum – beräknar maximivärdet för pixlarna i grannskapet.</li><li>Medel – beräknar medelvärdet för pixlarna i grannskapet. Det här är standardinställningen.</li><li>Standardavvikelse – Beräknar standardavvikelsevärdet för pixlarna i grannskapet.</li><li>Median - Beräknar medianvärdet för pixlarna i grannskapet.</li><li>Majoritet - Beräknar majoritetsvärdet, eller det värde som förekommer oftast, av pixlarna i grannskapet.</li><li>Minoritet - Beräknar minoritetsvärdet, eller det värde som förekommer minst ofta, av pixlarna i grannskapet.</li></ul>",
	"@@Detect-Change-Using-Change-Analysis_changedirection_tag0@@": "<p>Anger vilken förändringsriktning som ska tas med i analysen</p><p>. Parametern är endast tillgänglig när förändringsanalysrastret för indata är utdata från LandTrendr-verktygen.</p><ul><li><strong>Alla riktningar</strong> – Alla förändringsriktningar inkluderas i utdata. Det här är standardinställningen.</li><li><strong>Ökande</strong> – Endast förändringar i positiv eller ökande riktning ingår i utdata.</li><li><strong>Minskande</strong> – Endast förändringar i negativ eller minskande riktning ingår i utdata.</li></ul>",
	"@@Detect-Change-Using-Change-Analysis_changetype_tag0@@": "<p>Anger förändringsinformation att beräkna.</p><ul><li><strong>Tid för senaste förändring</strong> – Varje pixel innehåller datumet för den senaste förändringen för den pixeln i tidsserien. Det här är standardinställningen.</li><li><strong>Tid för tidigaste förändringen</strong> – Varje pixel innehåller datumet för den tidigaste förändringen för den pixeln i tidsserien.</li><li><strong>Tid för största förändring</strong> – Varje pixel innehåller datumet för den mest signifikanta förändringen för den pixeln i tidsserien.</li><li><strong>Antal förändringar</strong> – Varje pixel innehåller det totala antalet gånger pixeln ändrats i tidsserien.</li><li><strong>Tid för längsta förändring</strong> – Varje pixel innehåller datumet för förändring för det längsta övergångssegmentet i tidsserien.</li><li><strong>Tid för kortaste förändring</strong> – Varje pixel innehåller datumet för förändring för det kortaste övergångssegmentet i tidsserien.</li><li><strong>Tid för snabbaste förändring</strong> – Varje pixel innehåller datumet för förändring i slutet av den övergång som inträffade snabbast.</li><li><strong>Tid för långsammaste förändring</strong> – Varje pixel innehåller datumet för förändring i slutet av den övergång som inträffade långsammast.</li></ul>",
	"@@Detect-Change-Using-Change-Analysis_filterbyduration_tag0@@": "<p>Anger om du vill filtrera efter förändringsvaraktigheten.</p><p></p><ul><li>Markerat – Filtrera resultat efter varaktighet så att endast de ändringar som varade en viss tid tas med i utdata.</li><li>Omarkerat – Filtrera inte resultaten efter varaktighet. Det här är standardinställningen.</li></ul><p>Den här parametern är endast tillgänglig när indataändringsanalysrastret är utdata från LandTrendr-verktygen.</p><p>Om parametern är markerad, måste du ställa in parametrarna<strong>Minsta varaktighet</strong>och<strong>Största varaktighet</strong>för filtrering.</p>",
	"@@Detect-Change-Using-Change-Analysis_filterbymagnitude_tag0@@": "<p>Anger om du vill filtrera efter förändringens magnitud.</p><ul><li>Markerat – Filtrera resultat efter magnitud så att endast förändringar av en viss magnitud inkluderas i utdata.</li><li>Omarkerat – filtrera inte resultaten efter magnitud. Det här är standardinställningen.</li></ul><p>Den här parametern är endast tillgänglig när indataändringsanalysrastret är utdata från LandTrendr-verktygen.</p><p>Om parametern är markerad, måste du ställa in parametrarna<strong>Minsta magnitud</strong>och<strong>Största magnitud</strong>för filtrering.</p>",
	"@@Detect-Change-Using-Change-Analysis_filterbyyear_tag0@@": "<p>Anger om utdata ska begränsas med ett intervall av år.</p><ul><li>Markerat – Filtrera resultat så att endast förändringar som inträffade inom ett visst intervall av år inkluderas i utdata.</li><li>Omarkerat – Filtrera inte resultaten efter år. Det här är standardinställningen.</li></ul><p>Om parametern är markerad måste du ange parametrarna<strong>Minimivärde</strong>och<strong>Maximivärde</strong>för filtrering.</p>",
	"@@Detect-Change-Using-Change-Analysis_filterbystartvalue_tag0@@": "<p>Filtrera resultat efter startvärde så att endast ändringar av ett angivet startvärde inkluderas i utdata.</p>",
	"@@Detect-Change-Using-Change-Analysis_filterbyendvalue_tag0@@": "<p>Filtrera resultat efter slutvärde så att endast ändringar av ett angivet slutvärde inkluderas i utdata.</p>",
	"@@Detect-Change-Using-Change-Analysis_maximumnumberofchanges_tag0@@": "<p>Det maximala antalet förändringar per pixel som ska beräknas. Det angivna antalet motsvarar antalet band i utdatarastret. Standard är 1, vilket innebär att endast ett ändringsdatum beräknas, och utdatarastret innehåller bara ett band.</p><p>Parametern är inte tillgänglig när parametern<strong>Ändra typ</strong>är inställd till<strong>Antal förändringar</strong>.</p>",
	"@@Detect-Change-Using-Change-Analysis_raster_tag0@@": "<p>Indataförändringsanalysrastret.</p>",
	"@@Detect-Change-Using-Change-Analysis_segmentdate_tag0@@": "<p>Anger om datum ska extraheras i början eller slutet av ett förändringssegment.</p><p>Parametern är endast tillgänglig när indataförändringsanalysrastret är utdata från LandTrendr-verktygen. </p><ul><li><strong>Början av segment</strong> – Extrahera datumet i början av ett förändringssegment. Det här är standardinställningen.</li><li><strong>Slutet av segment</strong> – Extrahera datumet i slutet av ett förändringssegment.</li></ul>",
	"@@Kernel-Density_areaunits_tag0@@": "<p>Areaenheterna för utdatatäthetsvärdena.</p><ul><li>Kartans kvadratenheter – för kvadraten på de linjära enheterna i den geografiska referensen i utdata.</li><li>Kvadratmiles – för amerikanska miles.</li><li>Kvadratkilometer – för kilometer.</li><li>Acres – för amerikanska acres.</li><li>Hektar – för hektar.</li><li>Kvadratmeter – för meter.</li><li>Kvadratyards – för amerikanska yards.</li><li>Kvadratfot – för amerikanska fot.</li><li>Kvadrattum – för amerikanska tum.</li><li>Kvadratcentimeter – för centimeter.</li><li>Kvadratmillimeter – för millimeter.</li></ul>",
	"@@Kernel-Density_cellsize_tag0@@": "<p>Pixelstorleken för rasterutdatasetet. Om värdet <strong>Cellstorlek</strong> har angetts i geobearbetningsmiljöerna är det standardinställningen.</p>",
	"@@Kernel-Density_inputbarriers_tag0@@": "<p>Datasetet som definierar hinder.</p><p>Hindren kan vara ett geoobjektlager med polylinje- eller polygongeoobjekt.</p>",
	"@@Kernel-Density_inputfeatures_tag0@@": "<p>Den indatapunkt eller de linjegeoobjekt som densiteten ska beräknas för.</p>",
	"@@Kernel-Density_method_tag0@@": "<p>Avgör om den kortaste vägen ska användas på en sfärisk (geodetisk) eller en plan jordyta (planmetoden).</p><ul><li><strong>Plan</strong> – Använd plana avstånd mellan geoobjekten. Det här är standardinställningen.</li><li><strong>Geodetisk</strong> – Använder geodetiska avstånd mellan geoobjekt. Den här metoden tar hänsyn till en rotationsellipsoids kurvatur och hanterar data nära polerna och den internationella datumlinjen på ett korrekt sätt.</li></ul><p>Du bör använda metoden<strong>Geodetisk</strong>med data som lagrats i ett koordinatsystem som inte lämpar sig för avståndsmätningar och på valfri analys som omfattar ett stort geografiskt område. Till exempel bör Web Mercator och andra geografiska koordinatsystem använda <strong>Geodetisk</strong>-metoden.</p>",
	"@@Kernel-Density_outputcellvalues_tag0@@": "<p>Avgör vad värdena i utdatarastret representerar.</p><ul><li><strong>Densiteter</strong> – Utdatavärdena representerar värdet för förutsagd densitet. Det här är standardinställningen.</li><li><strong>Förväntade antal</strong> – Utdatavärdena representerar den förutsagda mängden fenomen inom varje pixel. Eftersom pixelvärdet är kopplat till det angivna värdet för<strong>Cellstorlek</strong>, kan inte resultatrastret samplas om till en annan pixelstorlek och fortfarande representera mängden fenomen.</li></ul>",
	"@@Kernel-Density_populationfield_tag0@@": "<p>Fält som anger befolkningsvärden för varje geoobjekt. Värdet i<strong>Befolkningsfält</strong> är det antal eller den kvantitet som ska spridas över hela landskapet för att skapa en sammanhängande yta. Värden i<strong>Befolkningsfält</strong>kan vara heltal eller flyttal.</p><p>Fältets alternativ och standardbeteende listas nedan i prioritetsordning.</p><ul><li>Använd<strong>Inget</strong>om inget objekt eller särskilt värde används, och varje geoobjekt räknas en gång.</li><li>Använd<strong>Form</strong>om indatageoobjekten innehåller Z.</li><li>Annars är standardfältet<strong>POPULATION</strong>, eller någon godkänd härledd befolkning: <ul><li><strong>POPULATIONxxxx</strong>där<strong>xxxx</strong>kan vara något giltigt tecken, till exempel<strong>POPULATION6</strong>,<strong>POPULATION1974</strong>eller<strong>POPULATIONROADTYPE</strong>.</li><li><strong>POP</strong>.</li><li><strong>POPxxxx</strong>.</li><li>Om inget av ovanstående gäller, är standardvärdet<strong>Ingen</strong>.</li></ul></li></ul>",
	"@@Kernel-Density_searchradius_tag0@@": "<p>Sökningsradien inom vilken densiteten ska beräknas. Enheterna baseras på projektionens linjära enhet.</p><p>Om enheterna till exempel uttrycks i meter – för att omfatta alla geoobjekt i ett område inom 1 kilometer – anger du sökningsradien till 1609,344 (eftersom 1 mile är 1 609,344 meter).</p>",
	"@@Zonal-Statistics_ignorenodataincalculations_tag0@@": "<p>Anger om<strong>NoData</strong>-värden i<strong>Värderastret</strong> kommer att påverka resultaten av den zon som de hamnar i.</p><ul><li><strong>Ja</strong> – Inom ett visst område kommer bara pixlar som har ett värde i <strong>Värderaster</strong> att användas för att bestämma utdatavärdet för den zonen.<strong>NoData</strong>-pixlar i <strong>i Värderaster</strong> ignoreras i den statistiska beräkningen. Det här är standardinställningen.</li><li><strong>Nej</strong> – Inom ett visst område: om det finns <strong>NoData</strong>-pixlar i <strong>Värderaster</strong>, bedöms det inte finnas tillräckligt med information för att utföra statistikberäkningar för alla pixlar i den zonen. Därför får hela zonen <strong>NoData</strong>-värdet på utdatarastret.</li></ul>",
	"@@Zonal-Statistics_percentileinterpolationtype_tag0@@": "<p>Avgör vilken metod för interpolering av percentil som ska användas när antalet värden från indatarastret som ska beräknas är jämnt.</p><ul><li><strong>Autoidentifiering</strong> – Om indatarastret är av typen heltalspixel, används metoden <strong>Närmast</strong>. Om indatavärderastret är av flyttalspixeltyp används metoden <strong>Linjär</strong>. Det här är standardinställningen.</li><li><strong>Närmast</strong> – Det närmaste tillgängliga värdet används till önskad percentil. I det här fallet är utdatapixeltypen samma som rastret i indatavärdet.</li><li><strong>Linjär</strong> – Det viktade medelvärdet av de två omgivande värdena från den önskade percentilen används. I det här fallet är utdatapixeltypen flyttal.</li></ul>",
	"@@Zonal-Statistics_percentilevalue_tag0@@": "<p>Percentilen som ska beräknas. Standard är 90 för den nittionde percentilen.</p><p>Värdena kan vara från 0 till 100. Den 0:e percentilen är i grunden samma som statistiken Minimum, och den 100:e percentilen motsvarar Maximum. Värdet 50 ger i huvudsak samma resultat som statistikkategorin Median.</p>",
	"@@Zonal-Statistics_processasmultidimensional_tag0@@": "<p>Avgör hur det flerdimensionella indatarastret bearbetas.</p><ul><li><strong>Aktuell sektor</strong> – Statistiken beräknas från den aktuella sektorn av ett flerdimensionellt dataset. Det här är standardinställningen.</li><li><strong>Alla sektorer</strong> – Statistiken beräknas för alla dimensioner (som tid eller djup) av ett flerdimensionellt dataset.</li></ul>",
	"@@Zonal-Statistics_statisticstype_tag0@@": "<p>Statistiktyp som ska beräknas.</p><ul><li><strong>Medel</strong> – Beräknar medelvärdet för alla pixlar i<strong>Värderaster</strong>som tillhör samma zon som utdatapixeln.</li><li><strong>Majoritet</strong> –Bestämmer vilket värde som förekommer oftast av alla pixlar i<strong>Värderaster</strong>som tillhör samma zon som utdatapixeln.</li><li><strong>Maximum</strong> – Bestämmer det största värdet av alla pixlar i<strong>Värderaster</strong>som tillhör samma zon som utdatapixeln.</li><li><strong>Median</strong> – Bestämmer medianvärdet av alla pixlar i<strong>Värderaster</strong>som tillhör samma zon som utdatapixeln.</li><li><strong>Minimum</strong>- – Bestämmer det minsta värdet av alla pixlar i <strong>Värderaster</strong>som tillhör samma zon som utdatapixeln.</li><li><strong>Minoritet</strong> – Bestämmer vilket värde som förekommer mest sällan av alla pixlar i<strong>Värderaster</strong>som tillhör samma zon som utdatapixeln.</li><li><strong>Percentil</strong> – Beräknar en percentil av alla pixlar i<strong>Värderaster</strong>som tillhör samma zon som utdatapixeln. Den 90:e percentilen beräknas som standard. Du kan bestämma vilken percentil som ska beräknas med parametern<strong>Percentilvärde</strong>.</li><li><strong>Intervall</strong> – Beräknar differensen mellan det största och det minsta värdet av alla pixlar i<strong>Värderaster</strong>som tillhör samma zon som utdatapixeln.</li><li><strong>Standardavvikelse</strong> – Beräknar standardavvikelsen för alla pixlar i<strong>Värderaster</strong>som tillhör samma zon som utdatapixeln.</li><li><strong>Summa</strong> – Beräknar det totala värdet för alla pixlar i<strong>Värderaster</strong>som tillhör samma zon som utdatapixeln.</li><li><strong>Variation</strong> – Beräknar antalet unika värden för alla pixlar<strong>Värderaster</strong>som tillhör samma zon som utdatapixeln.</li></ul>",
	"@@Zonal-Statistics_valueraster_tag0@@": "<p>Raster som innehåller de värden som statistiken ska beräknas på.</p>",
	"@@Zonal-Statistics_zonefield_tag0@@": "<p>Fält som innehåller de värden som definierar varje zon. Det kan vara ett heltalsfält eller ett strängfält i zonrastret.</p>",
	"@@Zonal-Statistics_zoneraster_tag0@@": "<p>Dataset som definierar zonerna. Zonerna kan definieras av ett heltalsraster.</p>",
	"@@Zonal-Statistics_calculatecircularstatistics_tag0@@": "<p>Anger hur statistiktypen beräknas.</p><ul><li><strong>Aritmetiskt</strong> -- Beräknar aritmetisk statistik. Det här är standardinställningen.</li><li><strong>Cirkulär</strong> -- Beräknar cirkulär statistik som passar för cykliska kvantiteter, t.ex. kompassriktning i grader, dagtid och bråkdelar av reella tal.</li></ul>",
	"@@Zonal-Statistics_circularwrapvalue_tag0@@": "<p>Högsta möjliga värde (övre gräns) i cykliska data. Det är ett positivt tal, med ett standardvärde på 360. Det här värdet representerar samma kvantitet som det lägsta möjliga värdet (nedre gräns).</p><p>Den här parametern är bara tillämplig när cirkulär statistik beräknas.</p>",
	"@@Boundary-Clean-function_inputraster_tag0@@": "<p>Indatarastret som gränsen mellan zoner ska utjämnas för.</p><p>Det måste vara av heltalstyp.</p>",
	"@@Boundary-Clean-function_runexpansionandshrinkingtwice_tag0@@": "<p>Anger hur många gånger utjämningsprocessen ska ske: två gånger eller en gång.</p><ul><li><p><strong>Markerat</strong> – Utför processen för expansion och krympning två gånger. För den första gången utförs åtgärden enligt den angivna sorteringstypen. Sedan utförs ytterligare en åtgärd för expansion och krympning med prioriteten omvänd. Det här är standardinställningen.</p></li><li><p><strong>Omarkerat</strong> – Utför processen för expansion och krympning en gång i enlighet med sorteringstypen.</p></li></ul>",
	"@@Boundary-Clean-function_sorttype_tag0@@": "<p>Anger vilken typ av sortering som ska användas i utjämningsprocessen. Sorteringen avgör med vilken prioritet celler ska kunna expandera till sina grannar.</p><p>Sorteringen kan göras baserat på zonvärde eller zonområde.</p><ul><li><p><strong>Sortera inte</strong> – Zonerna sorteras inte efter storlek. Zoner med större värden har högre prioritet att expandera till zoner med lägre värden i utjämnade utdata. Det här är standardinställningen.</p></li><li><p><strong>Fallande</strong> – Sorterar zoner i fallande ordning efter storlek. Zoner med större totala ytor har högre prioritet att expandera till zoner med mindre totala ytor. Det här alternativet brukar eliminera eller minska förekomsten av celler från mindre zoner i utjämnade utdata.</p></li><li><p><strong>Stigande</strong> – Sorterar zoner i stigande ordning efter storlek. Zoner med mindre totala ytor har högre prioritet att expandera till zoner med större totala ytor. Det här alternativet brukar bevara eller öka förekomsten av celler från mindre zoner i utjämnade utdata.</p></li></ul>",
	"@@Aggregate-Multidimensional_dimension_tag0@@": "<p>Aggregeringsdimension. Den dimension längs vilken variablerna ska aggregeras.</p>",
	"@@Aggregate-Multidimensional_dimensiondefinition_tag0@@": "<p>Anger vilken metod som ska användas för att filtrera flerdimensionella indata innan aggregeringen utförs.</p><ul><li><strong>Alla</strong> – Hela intervallet för varje dimension används. Detta är standardinställningen.</li><li><strong>Efter värde</strong>– Dimensionen indelas med hjälp av ett dimensionsvärde eller en lista med värden.</li><li><strong>Efter intervall</strong> – Dimensionen indelas med hjälp av ett intervall eller en lista med intervall.</li><li><strong>Efter iteration</strong> – Dimensionen indelas med hjälp av en angiven intervallstorlek.</li></ul>",
	"@@Aggregate-Multidimensional_iterationdefinitionparameters_tag0@@": "<p>Med parametrarna för Iterationsdefinition kan du definiera dimensionsvärden som ska användas för att filtrera flerdimensionella indata för analys när parametern<strong>Dimensionsdefinition</strong>är inställd på<strong>Efter iteration</strong>.</p><ul><li><strong>Dimension</strong> – Dimensionen som ska användas för filtrering.</li><li><strong>Början av första iterationen</strong> – Början på det första intervallet. Intervallet används för att upprepa genom datasetet.</li><li><strong>Slut på den första iterationen</strong> – Slutet på det första intervallet. Det här intervallet används för att upprepa genom datasetet.</li><li><strong>Steg</strong> – Frekvensen enligt vilken data kommer indelas.</li><li><strong>Enheten</strong> – Iterationsenheten.</li></ul>",
	"@@Aggregate-Multidimensional_keywordinterval_tag0@@": "<p>Anger vilket nyckelordsintervall som ska användas vid aggregering längs dimensionen.</p><p>Parametern krävs när parametern<strong>Typ</strong>anges till<strong>Intervallnyckelord</strong>.</p><ul><li><strong>Timvis</strong> – Datavärdena aggregeras till timvisa tidssteg och resultatet inkluderar varje timme i tidsserien. Detta är standardvärdet</li><li><strong>Dagligen</strong> – Datavärdena aggregeras i dagliga tidssteg, och resultatet inkluderar varje dag i tidsserien.</li><li><strong>Veckovis</strong> – Datavärdena aggregeras i veckotidssteg, och resultatet inkluderar varje vecka i tidsserien.</li><li><strong>Tiotal</strong> – Datavärdena aggregeras till 3 perioder på 10 dagar var. Den sista perioden kan innehålla fler eller färre än 10 dagar. Utdata innehåller 3 delar per månad.</li><li><strong>Femtal</strong> – Datavärdena aggregeras till 6 perioder om 5 dagar var. Den sista perioden kan innehålla fler eller färre än 5 dagar. Utdata omfattar 6 delar per månad.</li><li><strong>Månadsvis</strong> – Datavärdena aggregeras till månadsvisa tidssteg, och resultatet inkluderar varje månad i tidsserien.</li><li><strong>Kvartalsvis</strong> – Datavärdena aggregeras till kvartalssteg, och resultatet inkluderar varje kvartal i tidsserien.</li><li><strong>Årligen</strong> – Datavärdena aggregeras till årliga tidssteg, och resultatet omfattar varje år i tidsserien.</li><li><strong>Återkommer dagligen</strong> – Datavärdena aggregeras till dagliga tidssteg och resultatet inkluderar ett aggregerat värde per juliansk dag. Utdata inkluderar som mest 366 dagliga tidsdelar.</li><li><strong>Återkommer veckovis</strong> – Datavärdena aggregeras till veckovisa tidssteg och resultatet inkluderar ett aggregerat värde per vecka. Utdata inkluderar maximalt 53 tidsdelar varje vecka.</li><li><strong>Återkommer månadsvis</strong> – Datavärdena aggregeras till månadsvisa tidssteg och resultatet inkluderar ett aggregerat värde per månad. Utdata inkluderar som mest 12 månadsvisa tidsdelar.</li><li><strong>Återkommer kvartalsvis</strong> – Datavärdena aggregeras till årsvisa tidssteg och resultatet inkluderar ett aggregerat värde per år. Utdata inkluderar maximalt 4 kvartalsbaserade tidsdelar.</li></ul>",
	"@@Aggregate-Multidimensional_operation_tag0@@": "<p>Anger den matematiska metoden som ska användas för att kombinera de aggregerade delarna i ett intervall.</p><ul><li><strong>Majoritet</strong> – Pixelvärdet som inträffade oftast kommer att beräknas över alla delar i intervallet.</li><li><strong>Maximum</strong> – Det maximala värdet för en pixel beräknas över alla delar i intervallet.</li><li><strong>Medel</strong> – Medelvärdet av en pixels värden beräknas över alla delar i intervallet. Detta är standardvärdet.</li><li><strong>Median</strong> – Medianvärdet för en pixel beräknas för alla delar i intervallet.</li><li><strong>Minimum</strong> – Det minsta värdet för en pixel beräknas över alla delar i intervallet.</li><li><strong>Minoritet</strong> – Pixelvärdet som inträffade minst ofta beräknas över alla delar i intervallet.</li><li><strong>Intervall</strong> – Värdeintervallet för en pixel beräknas över alla delar i intervallet.</li><li><strong>Standardavvikelse</strong> – Standardavvikelsen för en pixels värden beräknas över alla delar i intervallet.</li><li><strong>Summa</strong> – Summan av en pixels värden beräknas över alla delar i intervallet.</li><li><strong>Varians</strong> – Antalet unika pixelvärden beräknas över alla delar i intervallet.</li></ul><p>Alla alternativ har också en motsvarighet med ett alternativ för att ignorera NoData. Dessa utför den matematiska åtgärden på alla giltiga pixlar längs dimensionen och ignorerar eventuella NoData-pixlar.</p>",
	"@@Aggregate-Multidimensional_ranges_tag0@@": "<p>Intervallområden specificerade i en tabell används för att aggregera grupper av värden. De lägsta och högsta värdena anger intervallet som ska tas med.</p><p>Den här parametern krävs när parametern<strong>Typ</strong>anges som<strong>Intervallområden</strong>.</p>",
	"@@Aggregate-Multidimensional_raster_tag0@@": "<p>Flerdimensionellt raster som indata.</p>",
	"@@Aggregate-Multidimensional_type_tag0@@": "<p>Anger dimensionsintervall för vilka data ska aggregeras.</p><ul><li><strong>Alla</strong> – Variabeldata aggregeras över alla sektorer. Detta är standardvärdet.</li><li><strong>Intervallnyckelord</strong> – Variabeldata aggregeras med ett allmänt känt intervall.</li><li><strong>Intervallvärde</strong> – Variabeldata aggregeras med ett användarspecificerat intervall och en enhet.</li><li><strong>Intervallområden</strong> – Variabeldata aggregeras mellan angivna värden eller datum.</li></ul>",
	"@@Aggregate-Multidimensional_valueinterval_tag0@@": "<p>Storleken på det intervall som används för aggregeringen.</p><p>Den här parametern krävs när parametern<strong>Typ</strong>är inställd till<strong>Intervallvärde</strong>.</p>",
	"@@Aggregate-Multidimensional_values_tag0@@": "<p>Dimensionsvärdena som används för att filtrera flerdimensionella indata för analys. Denna parameter krävs när parametern<strong>Dimensionsdefinition</strong>är inställd till<strong>Efter värde</strong>.</p>",
	"@@Aggregate-Multidimensional_variables_tag0@@": "<p>Variabel/variabler som ska aggregeras längs den angivna dimensionen.</p>",
	"@@Predict-Using-Regression_inputdefinitionfile_tag0@@": "<p>Indatadefinitionsfilen för Esri-regression (<strong>.ecd</strong>), som innehåller statistik och information för det specifika datasetet, regressionsmodellen, samt valda attribut.</p>",
	"@@Predict-Using-Regression_rasters_tag0@@": "<p>Rasterdatasetet eller dataset som representerar prediktorvariablerna. Det kan vara ett enstaka bandraster, flerbandsraster, flerdimensionellt raster, mosaikdataset eller en rastersamling.</p>",
	"@@Cell-Statistics_operation_tag0@@": "<p>Den typ av statistikberäkning som du vill utföra.</p><p>De tillgängliga statistiska kategorierna är<strong>Majoritet</strong>,<strong>Maximum</strong>,<strong>Medel</strong>,<strong>Median</strong>,<strong>Minimum</strong>,<strong>Minoritet</strong>,<strong>Percentil</strong>,<strong>Intervall</strong>,<strong>Standardavvikelse</strong>,<strong>Summa</strong> och<strong>Variation</strong>.</p><p>Standard är<strong>Medel</strong>.</p>",
	"@@Colormap-To-RGB_randomlyassigncolortounmappedpixels_tag0@@": "<p>Färger tilldelas slumpvis till pixlar som inte ingår i färgkartan.</p><ul><li>Omarkerade--ofyllda pixlar tilldelas inte någon färg. Det här är standardinställningen.</li><li>Markerade--ofyllda pixlar tilldelas en färg.</li></ul>",
	"@@Pansharpen_sensor_tag0@@": "<p>När Gram-Schmidt-algoritmen väljs kan du också ange den sensor som samlade in multibandsrastret för indata. När du väljer sensortyp ställs även lämpliga bandvikter in.</p>",
	"@@Dimensional-Moving-Statistics_backwardwindow_tag0@@": "<p>Värdet för hur många sektorer före eller efter som ska inkluderas i det definierade fönstret. Värdet måste vara ett positivt heltal från 1 till 100. Standardvärdet är 1.</p><p>Enheten för den här parametern är sektor.</p>",
	"@@Dimensional-Moving-Statistics_circularwrapvalue_tag0@@": "<p>Värdet som kommer att användas för att avrunda ett linjärt värde till intervallet för ett angivet cirkulärt medelvärde.</p><p>Dess värde måste vara positivt. Standardvärdet är 360 grader.</p>",
	"@@Dimensional-Moving-Statistics_dimension_tag0@@": "<p>Namnet på dimensionen längs vilken fönstret flyttas.</p><p>Standardvärdet är den första dimensionen förutom x,y som finns i det flerdimensionella rasterlagret som indata.</p>",
	"@@Dimensional-Moving-Statistics_forwardwindow_tag0@@": "<p>Värdet för hur många sektorer efter eller under som ska inkluderas i det definierade fönstret. Värdet måste vara ett positivt heltal från 1 till 100. Standardvärdet är 1.</p><p>Enheten för den här parametern är sektor.</p>",
	"@@Dimensional-Moving-Statistics_inputraster_tag0@@": "<p>Indatarastret kan bara vara ett flerdimensionellt raster i utdatamolnrasterformat (<strong>.crf</strong>-fil).</p>",
	"@@Dimensional-Moving-Statistics_nodatahandling_tag0@@": "<p>Anger hur NoData-värden ska hanteras av den statistiska beräkningen.</p><ul><li><strong>Data</strong>--NoData-värden i värdeindata ignoreras i resultaten för det definierade fönstret som de faller inom. Det här är standardinställningen.</li><li><strong>NoData</strong>--utdatavärden blir NoData om inga NoData-värden finns i det definierade fönstret.</li><li><strong>Fyll i NoData</strong>--NoData-cellvärden ersätts med den valda statistiken i det definierade fönstret.</li></ul>",
	"@@Dimensional-Moving-Statistics_percentileinterpolationtype_tag0@@": "<p>Anger metod för interpolering som används när percentilvärdet faller mellan två cellvärden.</p><ul><li><strong>Autoidentifiering</strong>--Om indatarastret är av typen heltalspixel, används metoden<strong>Närmast</strong>. Om indatarastret är av flyttalspixeltyp används metoden<strong>Linjär</strong>. Det här är standardinställningen.</li><li><strong>Närmast</strong>--Det närmaste tillgängliga värdet till percentilen används. I det här fallet kommer utdatapixeltypen att vara samma som rastret i indatavärdet.</li><li><strong>Linjär</strong>--Det viktade medelvärdet av de två omgivande värdena från percentilen används. I det här fallet är utdatapixeltypen flyttal.</li></ul>",
	"@@Dimensional-Moving-Statistics_percentilevalue_tag0@@": "<p>Percentilen som beräknas när<strong>Percentil</strong>väljs som statistiktyp. Standard är 90 för den nittionde percentilen.</p><p>Värdena kan vara från 0 till 100. Den 0:e percentilen motsvarar i huvudsak statistikkategorin Minimum, och den 100:e percentilen motsvarar statistikkategorin Maximum, med undantaget att resultatet blir ett flyttal. Värdet 50 ger samma resultat som statistikkategorin Median.</p>",
	"@@Dimensional-Moving-Statistics_statisticstype_tag0@@": "<p>Anger statistiktypen som ska beräknas.</p><p></p><ul><li><strong>Medelvärde</strong>--Medelvärdet (genomsnittsvärdet) för cellerna i det definierade fönstret beräknas. Det här är standardinställningen.</li><li><strong>Cirkulärt medelvärde</strong>--Det cirkulära medelvärdet för cellerna i det definierade fönstret beräknas. När statistiktypen har valts blir parametern<strong>Cirkulärt radbrytningsvärde</strong>tillgänglig.</li><li><strong>Majoritet</strong>--Majoriteten (värde som förekommer oftast) av cellerna i det definierade fönstret identifieras.</li><li><strong>Maximum</strong>--Maximum (högsta värde) av cellerna i det definierade fönstret identifieras.</li><li><strong>Medelvärde</strong>--Medelvärdet av cellerna i grannskapet identifieras.</li><li><strong>Minimum</strong>--Minimum (lägsta värde) av cellerna i grannskapet identifieras.</li><li><strong>Percentil</strong>--En percentil för cellerna i grannskapet beräknas. När den här statistiktypen har valts blir parametrarna<strong>Percentilvärde</strong>och<strong>Interpoleringstyp för percentil</strong>tillgängliga. Använd dessa nya parametrar för att utse percentilen som ska beräkna och välja vilken interpoleringstyp som ska användas.</li></ul>",
	"@@Interpolate-Raster-By-Dimension_dimension_tag0@@": "<p>Dimensionen som ska användas för interpolering.</p><p>Denna parameter krävs när parametern<strong>Dimensionsdefinition</strong>är inställd till<strong>Efter intervall</strong>.</p>",
	"@@Interpolate-Raster-By-Dimension_dimensiondefinition_tag0@@": "<p>Anger vilken metod som kommer att användas för att filtrera flerdimensionella indata innan interpoleringen utförs.</p><ul><li><strong>Efter värden</strong>--Dimensionen indelas med hjälp av ett dimensionsvärde eller en lista med värden.</li><li><strong>Efter intervall</strong>--Dimensionen indelas med hjälp av ett intervall eller en lista med intervall.</li><li><strong>Efter målraster</strong>--Dimensionen indelas med hjälp av ett specifikt flerdimensionellt raster som mål.</li></ul>",
	"@@Interpolate-Raster-By-Dimension_endofinterval_tag0@@": "<p>Slutet på intervallet, som används för att upprepa över datasetet.</p><p>Denna parameter krävs när parametern<strong>Dimensionsdefinition</strong>är inställd till<strong>Efter intervall</strong>.</p>",
	"@@Interpolate-Raster-By-Dimension_ignorenodata_tag0@@": "<p>Anger huruvida NoData-värden ignoreras i analysen.</p><ul><li>Omarkerad--analysen resulterar i NoData om det finns NoData-värden i intilliggande sektorer. Det här är standardinställningen.</li><li>Markerad--Analysen använder bara sektorer som har giltiga pixlar och ignorerar NoData-sektorer.</li></ul>",
	"@@Interpolate-Raster-By-Dimension_interpolationmethod_tag0@@": "<p>Ange metoden som kommer att användas för att interpolera rastret.</p><ul><li><strong>Linjär</strong>--Utdatan interpoleras linjärt med hjälp av intilliggande sektorer. Det här är standardinställningen.</li><li><strong>Närmaste granne</strong>--Utdatan använder den närmaste tillgängliga sektorn.</li></ul>",
	"@@Interpolate-Raster-By-Dimension_raster_tag0@@": "<p>Flerdimensionellt raster som indata.</p>",
	"@@Interpolate-Raster-By-Dimension_startofinterval_tag0@@": "<p>Början på intervallet, som används för att upprepa över datasetet.</p><p>Denna parameter krävs när parametern<strong>Dimensionsdefinition</strong>är inställd till<strong>Efter intervall</strong>.</p>",
	"@@Interpolate-Raster-By-Dimension_step_tag0@@": "<p>Frekvensen enligt vilken data kommer att interpoleras.</p><p>Denna parameter krävs när parametern<strong>Dimensionsdefinition</strong>är inställd till<strong>Efter intervall</strong>.</p>",
	"@@Interpolate-Raster-By-Dimension_targetraster_tag0@@": "<p>Målrastret som anges av dimensionsdefinitionen.</p><p>Denna parameter krävs när parametern<strong>Dimensionsdefinition</strong>är inställd till<strong>Efter målraster</strong>.</p>",
	"@@Interpolate-Raster-By-Dimension_unit_tag0@@": "<p>Intervallenheten.</p><p>Denna parameter krävs när parametern<strong>Dimensionsdefinition</strong>är inställd till<strong>Efter intervall</strong>.</p>",
	"@@Interpolate-Raster-By-Dimension_values_tag0@@": "<p>Dimensionsvärdena som ska användas för att filtrera multidimensionella data som indata för analys.</p><p>Denna parameter krävs när parametern<strong>Dimensionsdefinition</strong>är inställd till<strong>Efter värden</strong>.</p>",
	"@@Interpolate-Raster-By-Dimension_variables_tag0@@": "<p>Variabel/variabler som kommer att interpoleras av dimensionsdefinitionen.</p>",
	"@@Terrain-Flatten_calibrationtype_tag0@@": "<p>Anger om utdata terrängutplattas med<strong>Sigma-noll</strong>eller<strong>Gamma-noll</strong>.</p><ul><li><strong>Gamma-noll</strong> -- Beta-noll-bakåtstrålningen normaliseras med enhetsområdet för ett plan som lokalt tangerar DEM, allmänt känt som den lokala infallsvinkeln. Det här är standardinställningen.</li><li><strong>Sigma-noll</strong> --Beta-noll-bakåtstrålningen normaliseras med en DEM för att beräkna området.</li></ul>",
	"@@Terrain-Flatten_dem_tag0@@": "<p>DEM-indata.</p><p>DEM används för att beräkna det lokala belysta området.</p>",
	"@@Terrain-Flatten_geoid_tag0@@": "<p>Anger om det vertikala referenssystemet för DEM-indata transformeras till elliptisk höjd. De flesta höjddataset refererar till ortometrisk höjd över havsytan, så i dessa fall krävs en korrigering för att konvertera till elliptisk höjd.</p><ul><li>Markerat -- En geoidkorrigering görs för att konvertera ortometrisk höjd till elliptisk höjd (baserat på EGM96 Geoid). Det här är standardinställningen.</li><li>Omarkerat -- Ingen geoidkorrigering görs. Använd endast det här alternativet om DEM uttrycks i elliptisk höjd.</li></ul>",
	"@@Terrain-Flatten_raster_tag0@@": "<p>Radarindata.</p><p>Det här rastret måste först kalibreras radiometriskt till beta-noll.</p>",
	"@@Create-Color-Composite_blueexpression_tag0@@": "<p>Beräkningen som är tilldelad till det tredje bandet.</p><p>Ett bandnamn, band-ID eller ett algebrauttryck som använder sig av banden.</p><p>Operatorerna som stöds är enställiga, plus (+), minus (-), gånger (*) och delat med (/).</p>",
	"@@Create-Color-Composite_greenexpression_tag0@@": "<p>Beräkningen som är tilldelad till det andra bandet.</p><p>Ett bandnamn, band-ID eller ett algebrauttryck som använder sig av banden.</p><p>Operatorerna som stöds är enställiga, plus (+), minus (-), gånger (*) och delat med (/).</p>",
	"@@Create-Color-Composite_inputraster_tag0@@": "<p>Indata för flerbandsrasterdata.</p>",
	"@@Create-Color-Composite_method_tag0@@": "<p>Anger metoden som ska användas för att extrahera band.</p><ul><li>Bandnamn -- Använder det bandnamn som representerar våglängdsintervallet på det elektromagnetiska spektrumet (som rött, nära infrarött, termiskt infrarött) eller polarisering (som VH, VV, HH eller HV) Det här är standardinställningen.</li><li>Band-ID:n -- Bandnumret (som B1, B2 eller B3) kommer att användas.</li></ul>",
	"@@Create-Color-Composite_redexpression_tag0@@": "<p>Beräkningen som är tilldelad till det första bandet.</p><p>Ett bandnamn, band-ID eller ett algebrauttryck som använder sig av banden.</p><p>Operatorerna som stöds är enställiga, plus (+), minus (-), gånger (*) och delat med (/).</p>",
	"@@Surface-Parameters_localsurfacetype_tag0@@": "<p>Välj typ av ytfunktion som anpassas runt målcellen.</p><ul><li>Kvadratisk -- En kvadratisk ytfunktion anpassas efter cellerna i grannskapet. Det här är standardtypen.</li><li>Bikvadratisk -- En bikvadratisk ytfunktion anpassas efter cellerna i grannskapet.</li></ul>",
	"@@Surface-Parameters_neighborhooddistance_tag0@@": "<p>Utdata beräknas över detta avstånd från målcellcentret. Det bestämmer närområdesstorleken. Standardvärdet är indatarastrets cellstorlek, vilket resulterar i ett närområde på 3x3.</p>",
	"@@Surface-Parameters_outputslopemeasurement_tag0@@": "<p>Mätenheterna (grader eller procentandelar) som används för utdatarastret för lutning. Den här parametern är bara aktiv när<strong>Parametertyp</strong>är<strong>Lutning</strong>.</p><ul><li>Grad -- Sluttningens lutning beräknas i grader. Det här är standardvärdet.</li><li>Stigning i procent -- Sluttningens lutning beräknas som stigning i procent, kallas också för procentens lutning.</li></ul>",
	"@@Surface-Parameters_parametertype_tag0@@": "<p>Anger typen av utdataytparameter som beräknas.</p><ul><li>Sluttning -- Frekvens för höjdändring beräknas. Det här är standardvärdet.</li><li>Lutningsriktning -- Lutningens riktning för den högsta graden av skillnad för varje cell beräknas.</li><li>Medelkurvatur -- Den totala kurvaturen hos ytan mäts. Det beräknas som genomsnittet av minimal och maximal kurvatur. Den här kurvaturen beskriver den inneboende stationäriteten eller konkaviteten hos ytan, oberoende av riktning eller gravitationens inverkan.</li><li>Tangentialkurvatur (normal kontur) -- Den geometriska normala kurvaturen vinkelrät mot lutningslinjen, som tangerar höjdkurvelinjen mäts. Den här kurvaturen används vanligen för att karakterisera flödets konvergens eller divergens över ytan.</li><li>Profilkurvatur (normal lutningslinje) -- Den geometriska normala kurvaturen längs lutningslinjen mäts. Den här kurvaturen används vanligen för att karakterisera flödets konvergens och divergens över ytan.</li><li>Plankurvatur (projicerad kontur) -- Kurvaturen längs höjdkurvelinjerna mäts.</li><li>Geodetisk krökning höjdkurva -- Förändringstakten i lutningsvinkel längs höjdkurvelinjer mäts.</li><li>Gaussisk kurvatur -- Den övergripande kurvaturen hos ytan mäts. Det beräknas som produkten av den minimala och maximala kurvaturen.</li><li>Casorati-kurvatur -- Den generella kurvaturen hos ytan mäts. Det kan vara noll eller något annat tal.</li></ul>",
	"@@Surface-Parameters_projectgeodesicazimuths_tag0@@": "<p>Anger om geodetiska azimuter projiceras för att korrigera vinkelförvrängningen som orsakas av den spatiala referens för utdata. Den här parametern är bara aktiv när <strong>Parametertyp</strong>är<strong>Lutningsriktning</strong>.</p><ul><li>Omarkerat -- Geodetiska azimuter projiceras inte. Det här är standardvärdet.</li><li>Markerat -- Geodetiska azimuter projiceras.</li></ul>",
	"@@Surface-Parameters_raster_tag0@@": "<p>Indataytrastret. Det kan vara ett heltal eller ett flyttalsraster.</p>",
	"@@Surface-Parameters_useadaptiveneighborhood_tag0@@": "<p>Anger om avståndet till närområde kommer att variera med landskapsförändringar (adaptiv). Det maximala avståndet bestäms av avståndet till närområdet. Det minsta avståndet är indatarastrets cellstorlek.</p><ul><li>Omarkerat -- Ett enda (fast) avstånd till närområdet används på alla platser. Det här är standardvärdet.</li><li>Markerat -- Ett adaptivt avstånd till närområdet används på alla platser.</li></ul>",
	"@@Surface-Parameters_useequatorialaspect_tag0@@": "<p>Anger om lutningsriktning kommer att mätas från en punkt på ekvatorn eller från Nordpolen. Den här parametern är bara aktiv när<strong>Parametertyp</strong>är<strong>Lutningsriktning</strong>.</p><ul><li>Omarkerat -- Lutningsriktning mäts från Nordpolen. Det här är standardvärdet.</li><li>Omarkerat -- Lutningsriktning mäts från en punkt på ekvatorn.</li></ul>",
	"@@Surface-Parameters_zunit_tag0@@": "<p>Den linjära enheten för vertikala z-värden.</p><p>Det definieras av ett vertikalt koordinatsystem, om det finns. Om ett vertikalt koordinatsystem inte finns ska z-enheten definieras från enhetslistan för att säkerställa korrekt geodetisk beräkning.</p><ul><li>Tum -- Den linjära enheten kommer att vara tum.</li><li>Fot -- Den linjära enheten kommer att vara fot.</li><li>Yard-- Den linjära enheten kommer att vara yard.</li><li>Us-mile -- Den linjära enheten kommer att vara amerikanska mil.</li><li>Nautisk mil -- Den linjära enheten kommer att vara nautiska mil.</li><li>Millimeter -- Den linjära enheten kommer att vara millimeter.</li><li>Centimeter -- Den linjära enheten kommer att vara centimeter.</li><li>Meter -- Den linjära enheten kommer att vara meter. Det här är standardvärdet.</li><li>Kilometer -- Den linjära enheten kommer att vara kilometer.</li><li>Decimeter -- Den linjära enheten kommer att vara decimeter.</li></ul>",
	"@@Surface-Parameters_analysismask_tag0@@": "<p>Ett raster som anger platserna där analysen ska utföras.</p><p>Rastret kan vara av heltals- eller flyttalstyp.</p><p>Masken kommer att bestå av alla celler med ett giltigt värde, inklusive noll. Celler som är NoData i inmatningsmasken blir NoData i utdata.</p>",
	"@@Geometric-Median_cellsizetype_tag0@@": "<p>Välj vilka celler som ska användas i utdatarastret. Om alla indatacellernas storlekar är identiska ger alla alternativen samma resultat.</p><ul><li>Först av – använd den första cellens storlek i indatarastren.</li><li>Min. av – använd den minsta cellens storlek i alla indataraster.</li><li>Max av – använd den största cellens storlek i alla indataraster. Det här är standardinställningen.</li><li>Medel av – använd den genomsnittliga cellstorleken i alla indataraster.</li><li>Sist av – använd den sista cellens storlek i indatarastren.</li></ul>",
	"@@Geometric-Median_epsilon_tag0@@": "<p>Anger konvergensvärdet mellan två sammanhängande iterationer. När epsilon är mindre än eller lika med det angivna värdet stoppas iterationen och resultatet av den sista iterationen används.</p>",
	"@@Geometric-Median_extenttype_tag0@@": "<p>Välj vilken utbredning som ska användas i utdatarastret:</p><ul><li><p>Först av – använd det första indatarastrets utbredning för att bestämma bearbetningsutbredningen.</p></li><li>Snittet mellan – använd de överlappande pixlarnas utbredning för att bestämma bearbetningsutbredningen. Det här är standardinställningen.</li><li>Unionen av – använd alla rastrens utbredning för att bestämma bearbetningsutbredningen.</li><li>Sist av – använd det sista indatarastrets utbredning för att bestämma bearbetningsutbredningen.</li></ul>",
	"@@Geometric-Median_maximumnumberofiterations_tag0@@": "<p>Anger maximalt antal upprepningar som ska slutföras. Beräkningen avslutas när det här värdet nås oavsett <strong>epsilon</strong>inställningen.</p>",
	"@@Geometric-Median_rasters_tag0@@": "<p>Indataflerbandsrastren.</p>",
	"@@Least-Cost-Corridor_inputaccumulativecostdistanceraster1_tag0@@": "<p>Indatarastret representerar ackumulerad avståndskostnad från den första källan.</p><p>Det bör vara ett ackumulerat resultat för avståndskostnad från funktionen<strong>Avståndsackumulering</strong>eller<strong>Avståndsallokering</strong>.</p>",
	"@@Least-Cost-Corridor_inputaccumulativecostdistanceraster2_tag0@@": "<p>Indatarastret representerar ackumulerad avståndskostnad från den andra källan.</p><p>Det bör vara ett ackumulerat resultat för avståndskostnad från funktionen<strong>Avståndsackumulering</strong>eller<strong>Avståndsallokering</strong>.</p>",
	"@@Least-Cost-Corridor_inputbackdirectionraster1_tag0@@": "<p>Indatatillbakafördelningsrastret från den första källan. </p><p>Det här är ett rasterdataset som identifierar riktningen för nästa cell längs den billigaste rutten tillbaka till den första källan. Detta är utdata från funktionen<strong>Avståndsackumulering</strong>eller<strong>Avståndsallokering</strong>.</p>",
	"@@Least-Cost-Corridor_inputbackdirectionraster2_tag0@@": "<p>Indatatillbakafördelningsrastret från den andra källan.</p><p>Det här är ett rasterdataset som identifierar riktningen för nästa cell längs den billigaste rutten tillbaka till den första källan. Detta är utdata från funktionen<strong>Avståndsackumulering</strong>eller<strong>Avståndsallokering</strong>.</p>",
	"@@Least-Cost-Corridor_threshold_tag0@@": "<p>En tröskel för procent eller ackumulerade kostnader som fastställer om en angiven cell ska inkluderas i utdatarastret för korridoren.</p><p>När parametern<strong>Tröskelmetod</strong>är inställd på<strong>Procent av lägsta kostnad</strong> visar det angivna värdet procentökningen som ska tillämpas från det minsta värdet av de summerade ackumulerade rastren för avståndskostnad. När parametern<strong>Tröskelmetod</strong>är inställd på<strong>Ackumulerad kostnad</strong> visar värdet på celler som har en summerad ackumulerad kostnad lika med eller under värdet som kommer att inkluderas i korridoren.</p><p>Den här parametern är bara aktiv om parametern<strong>Tröskelmetod</strong>är inställd på<strong>Procent av lägsta kostnad</strong>eller<strong>Ackumulerad kostnad</strong>.</p>",
	"@@Least-Cost-Corridor_thresholdmethod_tag0@@": "<p>Anger hur tröskeln ska definieras.</p><p></p><ul><li><strong>Ingen tröskel</strong> -- Ingen tröskel tillämpas, och den resulterande korridoren kommer att täcka den fulla utbredningen av indatarastren. Det här är standardinställningen.</li><li><strong>Procent av lägsta kostnad</strong> -- Tröskeln definieras som en procentsats av det minsta värdet av raster för den summerade ackumulerade avståndskostnaden.</li><li><strong>Ackumulerad kostnad</strong> -- Tröskeln definieras i ackumulerade avståndskostnadsenheter.</li></ul>"
};
const helpTexts_sv = {
	rfxArgsHelpTexts: rfxArgsHelpTexts
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (helpTexts_sv);


//# sourceMappingURL=help-texts.sv-56096940.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,