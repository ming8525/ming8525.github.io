"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_arcgis-25cc6b"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/add-item-dbbe2f57.js":
/*!**************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/add-item-dbbe2f57.js ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ addItemState),
/* harmony export */   b: () => (/* binding */ addItemUrlState),
/* harmony export */   c: () => (/* binding */ addItemRequestState),
/* harmony export */   d: () => (/* binding */ addItemStore)
/* harmony export */ });
/* harmony import */ var _index_05956cab_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-05956cab.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-05956cab.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */


const addItemStore = (0,_index_05956cab_js__WEBPACK_IMPORTED_MODULE_0__.c)({
    typeKeywords: [],
    customParameters: [],
    analyzedLocationTypes: [],
    allowStoredAuth: true,
    isSecured: null,
    checkAuth: false
});
// Entire add item state object
const addItemState = addItemStore.state;
// Subsets of add item state
const addItemRequestState = addItemStore.state;
const addItemUrlState = addItemStore.state;



//# sourceMappingURL=add-item-dbbe2f57.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-new-item-pages-data-store-select-bdfs-hdfs.entry.js":
/*!****************************************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-new-item-pages-data-store-select-bdfs-hdfs.entry.js ***!
  \****************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   arcgis_new_item_pages_data_store_select_bdfs_hdfs: () => (/* binding */ ArcgisNewItemPagesDataStoreSelectBdfsHdfs)
/* harmony export */ });
/* harmony import */ var _index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-e3bf7da7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-e3bf7da7.js");
/* harmony import */ var _ui_bca7bcd1_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ui-bca7bcd1.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/ui-bca7bcd1.js");
/* harmony import */ var _add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./add-item-dbbe2f57.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/add-item-dbbe2f57.js");
/* harmony import */ var _index_05956cab_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./index-05956cab.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-05956cab.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */





const arcgisNewItemPagesDataStoreSelectBdfsHdfsCss = ".input-label{margin-top:1.25rem}.kerberos-info{margin-right:1rem}.kerberos-label{cursor:pointer;-webkit-user-select:none;-moz-user-select:none;user-select:none}";

const ArcgisNewItemPagesDataStoreSelectBdfsHdfs = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.newItemUpdatePage = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "newItemUpdatePage", 7);
        this.path = "";
        this.username = "";
        this.useKerberos = false;
        this.keytabLocations = "";
        this.principalUser = "";
        this.principalRealm = "";
        this.error = null;
    }
    async componentWillLoad() {
        this.i18n = _ui_bca7bcd1_js__WEBPACK_IMPORTED_MODULE_1__.u.i18n.dataStoreSelectBdfs;
        this.path = _add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_2__.a.bdfsHdfsPath || "";
        this.username = _add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_2__.a.bdfsHdfsUsername || "";
        this.useKerberos = _add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_2__.a.useKerberos || false;
        if (this.useKerberos) {
            this.keytabLocations = _add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_2__.a.keytabLocations;
            this.principalUser = _add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_2__.a.principalUser;
            this.principalRealm = _add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_2__.a.principalRealm;
        }
    }
    handleNext() {
        const { path, username, useKerberos, keytabLocations, principalUser, principalRealm } = this;
        if (!path) {
            this.error = "noPathSelected";
            return;
        }
        _add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_2__.a.bdfsHdfsPath = path;
        _add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_2__.a.bdfsHdfsUsername = username;
        _add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_2__.a.useKerberos = useKerberos;
        _add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_2__.a.keytabLocations = keytabLocations;
        _add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_2__.a.principalUser = principalUser;
        _add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_2__.a.principalRealm = principalRealm;
        this.newItemUpdatePage.emit("dataStoreSelectServerList");
    }
    render() {
        const { i18n, error, path, username, useKerberos, keytabLocations, principalUser, principalRealm } = this;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-new-item-description", { header: i18n.locationInfo }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "input-label" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, i18n.path.heading, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-input", { key: "publisher-folder-path", placeholder: i18n.path.hdfsPlaceholder, value: path, required: true, onCalciteInputChange: (e) => {
                const path = e.target.value;
                this.path = path;
            } }))), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "input-label" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, i18n.username, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-input", { key: "username", value: username, required: true, onCalciteInputChange: (e) => {
                const username = e.target.value;
                this.username = username;
            } }))), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "input-label" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { layout: "inline", class: "kerberos-label" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: "kerberos-info" }, i18n.useKerberos), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-switch", { checked: useKerberos, onCalciteSwitchChange: (e) => {
                const useKerberos = e.currentTarget.checked;
                this.useKerberos = useKerberos;
            }, scale: "l" }))), useKerberos && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.F, null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "input-label" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, i18n.keytabLocations, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-input", { key: "keytab-locations", value: keytabLocations, required: true, onCalciteInputChange: (e) => {
                const keytabLocations = e.target.value;
                this.keytabLocations = keytabLocations;
            } }))), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "input-label" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, i18n.principalUser, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-input", { key: "principal-user", value: principalUser, required: true, onCalciteInputChange: (e) => {
                const principalUser = e.target.value;
                this.principalUser = principalUser;
            } }))), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "input-label" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, i18n.principalRealm, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-input", { key: "principal-realm", value: principalRealm, required: true, onCalciteInputChange: (e) => {
                const principalRealm = e.target.value;
                this.principalRealm = principalRealm;
            } }))))), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-new-item-alert", { heading: error && i18n.errors[error].heading, description: error && i18n.errors[error].description, active: error !== null, onAlertDismiss: () => {
                this.error = null;
            } })));
    }
};
ArcgisNewItemPagesDataStoreSelectBdfsHdfs.style = arcgisNewItemPagesDataStoreSelectBdfsHdfsCss;



//# sourceMappingURL=arcgis-new-item-pages-data-store-select-bdfs-hdfs.entry.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-05956cab.js":
/*!***********************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-05956cab.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   c: () => (/* binding */ createStore)
/* harmony export */ });
/* harmony import */ var _index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-e3bf7da7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-e3bf7da7.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */


const appendToMap = (map, propName, value) => {
    const items = map.get(propName);
    if (!items) {
        map.set(propName, [value]);
    }
    else if (!items.includes(value)) {
        items.push(value);
    }
};
const debounce = (fn, ms) => {
    let timeoutId;
    return (...args) => {
        if (timeoutId) {
            clearTimeout(timeoutId);
        }
        timeoutId = setTimeout(() => {
            timeoutId = 0;
            fn(...args);
        }, ms);
    };
};

/**
 * Check if a possible element isConnected.
 * The property might not be there, so we check for it.
 *
 * We want it to return true if isConnected is not a property,
 * otherwise we would remove these elements and would not update.
 *
 * Better leak in Edge than to be useless.
 */
const isConnected = (maybeElement) => !('isConnected' in maybeElement) || maybeElement.isConnected;
const cleanupElements = debounce((map) => {
    for (let key of map.keys()) {
        map.set(key, map.get(key).filter(isConnected));
    }
}, 2000);
const stencilSubscription = () => {
    if (typeof _index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.g !== 'function') {
        // If we are not in a stencil project, we do nothing.
        // This function is not really exported by @stencil/core.
        return {};
    }
    const elmsToUpdate = new Map();
    return {
        dispose: () => elmsToUpdate.clear(),
        get: (propName) => {
            const elm = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.g)();
            if (elm) {
                appendToMap(elmsToUpdate, propName, elm);
            }
        },
        set: (propName) => {
            const elements = elmsToUpdate.get(propName);
            if (elements) {
                elmsToUpdate.set(propName, elements.filter(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f));
            }
            cleanupElements(elmsToUpdate);
        },
        reset: () => {
            elmsToUpdate.forEach((elms) => elms.forEach(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f));
            cleanupElements(elmsToUpdate);
        },
    };
};

const unwrap = (val) => (typeof val === 'function' ? val() : val);
const createObservableMap = (defaultState, shouldUpdate = (a, b) => a !== b) => {
    const unwrappedState = unwrap(defaultState);
    let states = new Map(Object.entries(unwrappedState !== null && unwrappedState !== void 0 ? unwrappedState : {}));
    const handlers = {
        dispose: [],
        get: [],
        set: [],
        reset: [],
    };
    const reset = () => {
        var _a;
        // When resetting the state, the default state may be a function - unwrap it to invoke it.
        // otherwise, the state won't be properly reset
        states = new Map(Object.entries((_a = unwrap(defaultState)) !== null && _a !== void 0 ? _a : {}));
        handlers.reset.forEach((cb) => cb());
    };
    const dispose = () => {
        // Call first dispose as resetting the state would
        // cause less updates ;)
        handlers.dispose.forEach((cb) => cb());
        reset();
    };
    const get = (propName) => {
        handlers.get.forEach((cb) => cb(propName));
        return states.get(propName);
    };
    const set = (propName, value) => {
        const oldValue = states.get(propName);
        if (shouldUpdate(value, oldValue, propName)) {
            states.set(propName, value);
            handlers.set.forEach((cb) => cb(propName, value, oldValue));
        }
    };
    const state = (typeof Proxy === 'undefined'
        ? {}
        : new Proxy(unwrappedState, {
            get(_, propName) {
                return get(propName);
            },
            ownKeys(_) {
                return Array.from(states.keys());
            },
            getOwnPropertyDescriptor() {
                return {
                    enumerable: true,
                    configurable: true,
                };
            },
            has(_, propName) {
                return states.has(propName);
            },
            set(_, propName, value) {
                set(propName, value);
                return true;
            },
        }));
    const on = (eventName, callback) => {
        handlers[eventName].push(callback);
        return () => {
            removeFromArray(handlers[eventName], callback);
        };
    };
    const onChange = (propName, cb) => {
        const unSet = on('set', (key, newValue) => {
            if (key === propName) {
                cb(newValue);
            }
        });
        // We need to unwrap the defaultState because it might be a function.
        // Otherwise we might not be sending the right reset value.
        const unReset = on('reset', () => cb(unwrap(defaultState)[propName]));
        return () => {
            unSet();
            unReset();
        };
    };
    const use = (...subscriptions) => {
        const unsubs = subscriptions.reduce((unsubs, subscription) => {
            if (subscription.set) {
                unsubs.push(on('set', subscription.set));
            }
            if (subscription.get) {
                unsubs.push(on('get', subscription.get));
            }
            if (subscription.reset) {
                unsubs.push(on('reset', subscription.reset));
            }
            if (subscription.dispose) {
                unsubs.push(on('dispose', subscription.dispose));
            }
            return unsubs;
        }, []);
        return () => unsubs.forEach((unsub) => unsub());
    };
    const forceUpdate = (key) => {
        const oldValue = states.get(key);
        handlers.set.forEach((cb) => cb(key, oldValue, oldValue));
    };
    return {
        state,
        get,
        set,
        on,
        onChange,
        use,
        dispose,
        reset,
        forceUpdate,
    };
};
const removeFromArray = (array, item) => {
    const index = array.indexOf(item);
    if (index >= 0) {
        array[index] = array[array.length - 1];
        array.length--;
    }
};

const createStore = (defaultState, shouldUpdate) => {
    const map = createObservableMap(defaultState, shouldUpdate);
    map.use(stencilSubscription());
    return map;
};



//# sourceMappingURL=index-05956cab.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/ui-bca7bcd1.js":
/*!********************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/ui-bca7bcd1.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ uiStore),
/* harmony export */   u: () => (/* binding */ uiStoreState)
/* harmony export */ });
/* harmony import */ var _index_05956cab_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-05956cab.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-05956cab.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */


const uiStore = (0,_index_05956cab_js__WEBPACK_IMPORTED_MODULE_0__.c)({
    nextText: "next",
    workflow: "content",
    scale: "m",
    disableScroll: false,
    featureFlags: {}
});
const uiStoreState = uiStore.state;



//# sourceMappingURL=ui-bca7bcd1.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2lkZ2V0cy9jaHVua3MvYXJjZ2lzX2FuYWx5c2lzX25vZGVfbW9kdWxlc19hcmNnaXNfYXBwLWNvbXBvbmVudHNfZGlzdF9lc21fYXJjZ2lzLTI1Y2M2Yi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ3VEOztBQUV2RCxxQkFBcUIscURBQVc7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRWdHOztBQUVoRzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDdEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ2dHO0FBQzNDO0FBQ007QUFDOUI7O0FBRTdCLG1FQUFtRSxtQkFBbUIsZUFBZSxrQkFBa0IsZ0JBQWdCLGVBQWUseUJBQXlCLHNCQUFzQixpQkFBaUI7O0FBRXROO0FBQ0E7QUFDQSxRQUFRLHFEQUFnQjtBQUN4QixpQ0FBaUMscURBQVc7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLDhDQUFZO0FBQ2hDLG9CQUFvQixvREFBWTtBQUNoQyx3QkFBd0Isb0RBQVk7QUFDcEMsMkJBQTJCLG9EQUFZO0FBQ3ZDO0FBQ0EsbUNBQW1DLG9EQUFZO0FBQy9DLGlDQUFpQyxvREFBWTtBQUM3QyxrQ0FBa0Msb0RBQVk7QUFDOUM7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLDhFQUE4RTtBQUM5RjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVEsb0RBQVk7QUFDcEIsUUFBUSxvREFBWTtBQUNwQixRQUFRLG9EQUFZO0FBQ3BCLFFBQVEsb0RBQVk7QUFDcEIsUUFBUSxvREFBWTtBQUNwQixRQUFRLG9EQUFZO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQiwyRkFBMkY7QUFDM0csZ0JBQWdCLHFEQUFDLGNBQWMscURBQUMsa0NBQWtDLDJCQUEyQixHQUFHLHFEQUFDLFVBQVUsc0JBQXNCLEVBQUUscURBQUMsMkNB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b3VyY2VzIjpbIndlYnBhY2s6Ly9leGItY2xpZW50Ly4vZXh0ZW5zaW9ucy93aWRnZXRzL2FyY2dpcy9hbmFseXNpcy9ub2RlX21vZHVsZXMvQGFyY2dpcy9hcHAtY29tcG9uZW50cy9kaXN0L2VzbS9hZGQtaXRlbS1kYmJlMmY1Ny5qcyIsIndlYnBhY2s6Ly9leGItY2xpZW50Ly4vZXh0ZW5zaW9ucy93aWRnZXRzL2FyY2dpcy9hbmFseXNpcy9ub2RlX21vZHVsZXMvQGFyY2dpcy9hcHAtY29tcG9uZW50cy9kaXN0L2VzbS9hcmNnaXMtbmV3LWl0ZW0tcGFnZXMtZGF0YS1zdG9yZS1zZWxlY3QtYmRmcy1oZGZzLmVudHJ5LmpzIiwid2VicGFjazovL2V4Yi1jbGllbnQvLi9leHRlbnNpb25zL3dpZGdldHMvYXJjZ2lzL2FuYWx5c2lzL25vZGVfbW9kdWxlcy9AYXJjZ2lzL2FwcC1jb21wb25lbnRzL2Rpc3QvZXNtL2luZGV4LTA1OTU2Y2FiLmpzIiwid2VicGFjazovL2V4Yi1jbGllbnQvLi9leHRlbnNpb25zL3dpZGdldHMvYXJjZ2lzL2FuYWx5c2lzL25vZGVfbW9kdWxlcy9AYXJjZ2lzL2FwcC1jb21wb25lbnRzL2Rpc3QvZXNtL3VpLWJjYTdiY2QxLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQWxsIG1hdGVyaWFsIGNvcHlyaWdodCBFU1JJLCBBbGwgUmlnaHRzIFJlc2VydmVkLCB1bmxlc3Mgb3RoZXJ3aXNlIHNwZWNpZmllZC5cbiAqIHY0LjAuNThcbiAqL1xuaW1wb3J0IHsgYyBhcyBjcmVhdGVTdG9yZSB9IGZyb20gJy4vaW5kZXgtMDU5NTZjYWIuanMnO1xuXG5jb25zdCBhZGRJdGVtU3RvcmUgPSBjcmVhdGVTdG9yZSh7XG4gICAgdHlwZUtleXdvcmRzOiBbXSxcbiAgICBjdXN0b21QYXJhbWV0ZXJzOiBbXSxcbiAgICBhbmFseXplZExvY2F0aW9uVHlwZXM6IFtdLFxuICAgIGFsbG93U3RvcmVkQXV0aDogdHJ1ZSxcbiAgICBpc1NlY3VyZWQ6IG51bGwsXG4gICAgY2hlY2tBdXRoOiBmYWxzZVxufSk7XG4vLyBFbnRpcmUgYWRkIGl0ZW0gc3RhdGUgb2JqZWN0XG5jb25zdCBhZGRJdGVtU3RhdGUgPSBhZGRJdGVtU3RvcmUuc3RhdGU7XG4vLyBTdWJzZXRzIG9mIGFkZCBpdGVtIHN0YXRlXG5jb25zdCBhZGRJdGVtUmVxdWVzdFN0YXRlID0gYWRkSXRlbVN0b3JlLnN0YXRlO1xuY29uc3QgYWRkSXRlbVVybFN0YXRlID0gYWRkSXRlbVN0b3JlLnN0YXRlO1xuXG5leHBvcnQgeyBhZGRJdGVtU3RhdGUgYXMgYSwgYWRkSXRlbVVybFN0YXRlIGFzIGIsIGFkZEl0ZW1SZXF1ZXN0U3RhdGUgYXMgYywgYWRkSXRlbVN0b3JlIGFzIGQgfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YWRkLWl0ZW0tZGJiZTJmNTcuanMubWFwIiwiLyohXG4gKiBBbGwgbWF0ZXJpYWwgY29weXJpZ2h0IEVTUkksIEFsbCBSaWdodHMgUmVzZXJ2ZWQsIHVubGVzcyBvdGhlcndpc2Ugc3BlY2lmaWVkLlxuICogdjQuMC41OFxuICovXG5pbXBvcnQgeyByIGFzIHJlZ2lzdGVySW5zdGFuY2UsIGMgYXMgY3JlYXRlRXZlbnQsIGgsIEYgYXMgRnJhZ21lbnQgfSBmcm9tICcuL2luZGV4LWUzYmY3ZGE3LmpzJztcbmltcG9ydCB7IHUgYXMgdWlTdG9yZVN0YXRlIH0gZnJvbSAnLi91aS1iY2E3YmNkMS5qcyc7XG5pbXBvcnQgeyBhIGFzIGFkZEl0ZW1TdGF0ZSB9IGZyb20gJy4vYWRkLWl0ZW0tZGJiZTJmNTcuanMnO1xuaW1wb3J0ICcuL2luZGV4LTA1OTU2Y2FiLmpzJztcblxuY29uc3QgYXJjZ2lzTmV3SXRlbVBhZ2VzRGF0YVN0b3JlU2VsZWN0QmRmc0hkZnNDc3MgPSBcIi5pbnB1dC1sYWJlbHttYXJnaW4tdG9wOjEuMjVyZW19LmtlcmJlcm9zLWluZm97bWFyZ2luLXJpZ2h0OjFyZW19LmtlcmJlcm9zLWxhYmVse2N1cnNvcjpwb2ludGVyOy13ZWJraXQtdXNlci1zZWxlY3Q6bm9uZTstbW96LXVzZXItc2VsZWN0Om5vbmU7dXNlci1zZWxlY3Q6bm9uZX1cIjtcblxuY29uc3QgQXJjZ2lzTmV3SXRlbVBhZ2VzRGF0YVN0b3JlU2VsZWN0QmRmc0hkZnMgPSBjbGFzcyB7XG4gICAgY29uc3RydWN0b3IoaG9zdFJlZikge1xuICAgICAgICByZWdpc3Rlckluc3RhbmNlKHRoaXMsIGhvc3RSZWYpO1xuICAgICAgICB0aGlzLm5ld0l0ZW1VcGRhdGVQYWdlID0gY3JlYXRlRXZlbnQodGhpcywgXCJuZXdJdGVtVXBkYXRlUGFnZVwiLCA3KTtcbiAgICAgICAgdGhpcy5wYXRoID0gXCJcIjtcbiAgICAgICAgdGhpcy51c2VybmFtZSA9IFwiXCI7XG4gICAgICAgIHRoaXMudXNlS2VyYmVyb3MgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5rZXl0YWJMb2NhdGlvbnMgPSBcIlwiO1xuICAgICAgICB0aGlzLnByaW5jaXBhbFVzZXIgPSBcIlwiO1xuICAgICAgICB0aGlzLnByaW5jaXBhbFJlYWxtID0gXCJcIjtcbiAgICAgICAgdGhpcy5lcnJvciA9IG51bGw7XG4gICAgfVxuICAgIGFzeW5jIGNvbXBvbmVudFdpbGxMb2FkKCkge1xuICAgICAgICB0aGlzLmkxOG4gPSB1aVN0b3JlU3RhdGUuaTE4bi5kYXRhU3RvcmVTZWxlY3RCZGZzO1xuICAgICAgICB0aGlzLnBhdGggPSBhZGRJdGVtU3RhdGUuYmRmc0hkZnNQYXRoIHx8IFwiXCI7XG4gICAgICAgIHRoaXMudXNlcm5hbWUgPSBhZGRJdGVtU3RhdGUuYmRmc0hkZnNVc2VybmFtZSB8fCBcIlwiO1xuICAgICAgICB0aGlzLnVzZUtlcmJlcm9zID0gYWRkSXRlbVN0YXRlLnVzZUtlcmJlcm9zIHx8IGZhbHNlO1xuICAgICAgICBpZiAodGhpcy51c2VLZXJiZXJvcykge1xuICAgICAgICAgICAgdGhpcy5rZXl0YWJMb2NhdGlvbnMgPSBhZGRJdGVtU3RhdGUua2V5dGFiTG9jYXRpb25zO1xuICAgICAgICAgICAgdGhpcy5wcmluY2lwYWxVc2VyID0gYWRkSXRlbVN0YXRlLnByaW5jaXBhbFVzZXI7XG4gICAgICAgICAgICB0aGlzLnByaW5jaXBhbFJlYWxtID0gYWRkSXRlbVN0YXRlLnByaW5jaXBhbFJlYWxtO1xuICAgICAgICB9XG4gICAgfVxuICAgIGhhbmRsZU5leHQoKSB7XG4gICAgICAgIGNvbnN0IHsgcGF0aCwgdXNlcm5hbWUsIHVzZUtlcmJlcm9zLCBrZXl0YWJMb2NhdGlvbnMsIHByaW5jaXBhbFVzZXIsIHByaW5jaXBhbFJlYWxtIH0gPSB0aGlzO1xuICAgICAgICBpZiAoIXBhdGgpIHtcbiAgICAgICAgICAgIHRoaXMuZXJyb3IgPSBcIm5vUGF0aFNlbGVjdGVkXCI7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgYWRkSXRlbVN0YXRlLmJkZnNIZGZzUGF0aCA9IHBhdGg7XG4gICAgICAgIGFkZEl0ZW1TdGF0ZS5iZGZzSGRmc1VzZXJuYW1lID0gdXNlcm5hbWU7XG4gICAgICAgIGFkZEl0ZW1TdGF0ZS51c2VLZXJiZXJvcyA9IHVzZUtlcmJlcm9zO1xuICAgICAgICBhZGRJdGVtU3RhdGUua2V5dGFiTG9jYXRpb25zID0ga2V5dGFiTG9jYXRpb25zO1xuICAgICAgICBhZGRJdGVtU3RhdGUucHJpbmNpcGFsVXNlciA9IHByaW5jaXBhbFVzZXI7XG4gICAgICAgIGFkZEl0ZW1TdGF0ZS5wcmluY2lwYWxSZWFsbSA9IHByaW5jaXBhbFJlYWxtO1xuICAgICAgICB0aGlzLm5ld0l0ZW1VcGRhdGVQYWdlLmVtaXQoXCJkYXRhU3RvcmVTZWxlY3RTZXJ2ZXJMaXN0XCIpO1xuICAgIH1cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIGNvbnN0IHsgaTE4biwgZXJyb3IsIHBhdGgsIHVzZXJuYW1lLCB1c2VLZXJiZXJvcywga2V5dGFiTG9jYXRpb25zLCBwcmluY2lwYWxVc2VyLCBwcmluY2lwYWxSZWFsbSB9ID0gdGhpcztcbiAgICAgICAgcmV0dXJuIChoKFwiZGl2XCIsIG51bGwsIGgoXCJhcmNnaXMtbmV3LWl0ZW0tZGVzY3JpcHRpb25cIiwgeyBoZWFkZXI6IGkxOG4ubG9jYXRpb25JbmZvIH0pLCBoKFwiZGl2XCIsIHsgY2xhc3M6IFwiaW5wdXQtbGFiZWxcIiB9LCBoKFwiY2FsY2l0ZS1sYWJlbFwiLCBudWxsLCBpMThuLnBhdGguaGVhZGluZywgaChcImNhbGNpdGUtaW5wdXRcIiwgeyBrZXk6IFwicHVibGlzaGVyLWZvbGRlci1wYXRoXCIsIHBsYWNlaG9sZGVyOiBpMThuLnBhdGguaGRmc1BsYWNlaG9sZGVyLCB2YWx1ZTogcGF0aCwgcmVxdWlyZWQ6IHRydWUsIG9uQ2FsY2l0ZUlucHV0Q2hhbmdlOiAoZSkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHBhdGggPSBlLnRhcmdldC52YWx1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLnBhdGggPSBwYXRoO1xuICAgICAgICAgICAgfSB9KSkpLCBoKFwiZGl2XCIsIHsgY2xhc3M6IFwiaW5wdXQtbGFiZWxcIiB9LCBoKFwiY2FsY2l0ZS1sYWJlbFwiLCBudWxsLCBpMThuLnVzZXJuYW1lLCBoKFwiY2FsY2l0ZS1pbnB1dFwiLCB7IGtleTogXCJ1c2VybmFtZVwiLCB2YWx1ZTogdXNlcm5hbWUsIHJlcXVpcmVkOiB0cnVlLCBvbkNhbGNpdGVJbnB1dENoYW5nZTogKGUpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCB1c2VybmFtZSA9IGUudGFyZ2V0LnZhbHVlO1xuICAgICAgICAgICAgICAgIHRoaXMudXNlcm5hbWUgPSB1c2VybmFtZTtcbiAgICAgICAgICAgIH0gfSkpKSwgaChcImRpdlwiLCB7IGNsYXNzOiBcImlucHV0LWxhYmVsXCIgfSwgaChcImNhbGNpdGUtbGFiZWxcIiwgeyBsYXlvdXQ6IFwiaW5saW5lXCIsIGNsYXNzOiBcImtlcmJlcm9zLWxhYmVsXCIgfSwgaChcInNwYW5cIiwgeyBjbGFzczogXCJrZXJiZXJvcy1pbmZvXCIgfSwgaTE4bi51c2VLZXJiZXJvcyksIGgoXCJjYWxjaXRlLXN3aXRjaFwiLCB7IGNoZWNrZWQ6IHVzZUtlcmJlcm9zLCBvbkNhbGNpdGVTd2l0Y2hDaGFuZ2U6IChlKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgdXNlS2VyYmVyb3MgPSBlLmN1cnJlbnRUYXJnZXQuY2hlY2tlZDtcbiAgICAgICAgICAgICAgICB0aGlzLnVzZUtlcmJlcm9zID0gdXNlS2VyYmVyb3M7XG4gICAgICAgICAgICB9LCBzY2FsZTogXCJsXCIgfSkpKSwgdXNlS2VyYmVyb3MgJiYgKGgoRnJhZ21lbnQsIG51bGwsIGgoXCJkaXZcIiwgeyBjbGFzczogXCJpbnB1dC1sYWJlbFwiIH0sIGgoXCJjYWxjaXRlLWxhYmVsXCIsIG51bGwsIGkxOG4ua2V5dGFiTG9jYXRpb25zLCBoKFwiY2FsY2l0ZS1pbnB1dFwiLCB7IGtleTogXCJrZXl0YWItbG9jYXRpb25zXCIsIHZhbHVlOiBrZXl0YWJMb2NhdGlvbnMsIHJlcXVpcmVkOiB0cnVlLCBvbkNhbGNpdGVJbnB1dENoYW5nZTogKGUpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBrZXl0YWJMb2NhdGlvbnMgPSBlLnRhcmdldC52YWx1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLmtleXRhYkxvY2F0aW9ucyA9IGtleXRhYkxvY2F0aW9ucztcbiAgICAgICAgICAgIH0gfSkpKSwgaChcImRpdlwiLCB7IGNsYXNzOiBcImlucHV0LWxhYmVsXCIgfSwgaChcImNhbGNpdGUtbGFiZWxcIiwgbnVsbCwgaTE4bi5wcmluY2lwYWxVc2VyLCBoKFwiY2FsY2l0ZS1pbnB1dFwiLCB7IGtleTogXCJwcmluY2lwYWwtdXNlclwiLCB2YWx1ZTogcHJpbmNpcGFsVXNlciwgcmVxdWlyZWQ6IHRydWUsIG9uQ2FsY2l0ZUlucHV0Q2hhbmdlOiAoZSkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHByaW5jaXBhbFVzZXIgPSBlLnRhcmdldC52YWx1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLnByaW5jaXBhbFVzZXIgPSBwcmluY2lwYWxVc2VyO1xuICAgICAgICAgICAgfSB9KSkpLCBoKFwiZGl2XCIsIHsgY2xhc3M6IFwiaW5wdXQtbGFiZWxcIiB9LCBoKFwiY2FsY2l0ZS1sYWJlbFwiLCBudWxsLCBpMThuLnByaW5jaXBhbFJlYWxtLCBoKFwiY2FsY2l0ZS1pbnB1dFwiLCB7IGtleTogXCJwcmluY2lwYWwtcmVhbG1cIiwgdmFsdWU6IHByaW5jaXBhbFJlYWxtLCByZXF1aXJlZDogdHJ1ZSwgb25DYWxjaXRlSW5wdXRDaGFuZ2U6IChlKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgcHJpbmNpcGFsUmVhbG0gPSBlLnRhcmdldC52YWx1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLnByaW5jaXBhbFJlYWxtID0gcHJpbmNpcGFsUmVhbG07XG4gICAgICAgICAgICB9IH0pKSkpKSwgaChcImFyY2dpcy1uZXctaXRlbS1hbGVydFwiLCB7IGhlYWRpbmc6IGVycm9yICYmIGkxOG4uZXJyb3JzW2Vycm9yXS5oZWFkaW5nLCBkZXNjcmlwdGlvbjogZXJyb3IgJiYgaTE4bi5lcnJvcnNbZXJyb3JdLmRlc2NyaXB0aW9uLCBhY3RpdmU6IGVycm9yICE9PSBudWxsLCBvbkFsZXJ0RGlzbWlzczogKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuZXJyb3IgPSBudWxsO1xuICAgICAgICAgICAgfSB9KSkpO1xuICAgIH1cbn07XG5BcmNnaXNOZXdJdGVtUGFnZXNEYXRhU3RvcmVTZWxlY3RCZGZzSGRmcy5zdHlsZSA9IGFyY2dpc05ld0l0ZW1QYWdlc0RhdGFTdG9yZVNlbGVjdEJkZnNIZGZzQ3NzO1xuXG5leHBvcnQgeyBBcmNnaXNOZXdJdGVtUGFnZXNEYXRhU3RvcmVTZWxlY3RCZGZzSGRmcyBhcyBhcmNnaXNfbmV3X2l0ZW1fcGFnZXNfZGF0YV9zdG9yZV9zZWxlY3RfYmRmc19oZGZzIH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFyY2dpcy1uZXctaXRlbS1wYWdlcy1kYXRhLXN0b3JlLXNlbGVjdC1iZGZzLWhkZnMuZW50cnkuanMubWFwIiwiLyohXG4gKiBBbGwgbWF0ZXJpYWwgY29weXJpZ2h0IEVTUkksIEFsbCBSaWdodHMgUmVzZXJ2ZWQsIHVubGVzcyBvdGhlcndpc2Ugc3BlY2lmaWVkLlxuICogdjQuMC41OFxuICovXG5pbXBvcnQgeyBnIGFzIGdldFJlbmRlcmluZ1JlZiwgZiBhcyBmb3JjZVVwZGF0ZSB9IGZyb20gJy4vaW5kZXgtZTNiZjdkYTcuanMnO1xuXG5jb25zdCBhcHBlbmRUb01hcCA9IChtYXAsIHByb3BOYW1lLCB2YWx1ZSkgPT4ge1xuICAgIGNvbnN0IGl0ZW1zID0gbWFwLmdldChwcm9wTmFtZSk7XG4gICAgaWYgKCFpdGVtcykge1xuICAgICAgICBtYXAuc2V0KHByb3BOYW1lLCBbdmFsdWVdKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoIWl0ZW1zLmluY2x1ZGVzKHZhbHVlKSkge1xuICAgICAgICBpdGVtcy5wdXNoKHZhbHVlKTtcbiAgICB9XG59O1xuY29uc3QgZGVib3VuY2UgPSAoZm4sIG1zKSA9PiB7XG4gICAgbGV0IHRpbWVvdXRJZDtcbiAgICByZXR1cm4gKC4uLmFyZ3MpID0+IHtcbiAgICAgICAgaWYgKHRpbWVvdXRJZCkge1xuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXRJZCk7XG4gICAgICAgIH1cbiAgICAgICAgdGltZW91dElkID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICB0aW1lb3V0SWQgPSAwO1xuICAgICAgICAgICAgZm4oLi4uYXJncyk7XG4gICAgICAgIH0sIG1zKTtcbiAgICB9O1xufTtcblxuLyoqXG4gKiBDaGVjayBpZiBhIHBvc3NpYmxlIGVsZW1lbnQgaXNDb25uZWN0ZWQuXG4gKiBUaGUgcHJvcGVydHkgbWlnaHQgbm90IGJlIHRoZXJlLCBzbyB3ZSBjaGVjayBmb3IgaXQuXG4gKlxuICogV2Ugd2FudCBpdCB0byByZXR1cm4gdHJ1ZSBpZiBpc0Nvbm5lY3RlZCBpcyBub3QgYSBwcm9wZXJ0eSxcbiAqIG90aGVyd2lzZSB3ZSB3b3VsZCByZW1vdmUgdGhlc2UgZWxlbWVudHMgYW5kIHdvdWxkIG5vdCB1cGRhdGUuXG4gKlxuICogQmV0dGVyIGxlYWsgaW4gRWRnZSB0aGFuIHRvIGJlIHVzZWxlc3MuXG4gKi9cbmNvbnN0IGlzQ29ubmVjdGVkID0gKG1heWJlRWxlbWVudCkgPT4gISgnaXNDb25uZWN0ZWQnIGluIG1heWJlRWxlbWVudCkgfHwgbWF5YmVFbGVtZW50LmlzQ29ubmVjdGVkO1xuY29uc3QgY2xlYW51cEVsZW1lbnRzID0gZGVib3VuY2UoKG1hcCkgPT4ge1xuICAgIGZvciAobGV0IGtleSBvZiBtYXAua2V5cygpKSB7XG4gICAgICAgIG1hcC5zZXQoa2V5LCBtYXAuZ2V0KGtleSkuZmlsdGVyKGlzQ29ubmVjdGVkKSk7XG4gICAgfVxufSwgMjAwMCk7XG5jb25zdCBzdGVuY2lsU3Vic2NyaXB0aW9uID0gKCkgPT4ge1xuICAgIGlmICh0eXBlb2YgZ2V0UmVuZGVyaW5nUmVmICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIC8vIElmIHdlIGFyZSBub3QgaW4gYSBzdGVuY2lsIHByb2plY3QsIHdlIGRvIG5vdGhpbmcuXG4gICAgICAgIC8vIFRoaXMgZnVuY3Rpb24gaXMgbm90IHJlYWxseSBleHBvcnRlZCBieSBAc3RlbmNpbC9jb3JlLlxuICAgICAgICByZXR1cm4ge307XG4gICAgfVxuICAgIGNvbnN0IGVsbXNUb1VwZGF0ZSA9IG5ldyBNYXAoKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBkaXNwb3NlOiAoKSA9PiBlbG1zVG9VcGRhdGUuY2xlYXIoKSxcbiAgICAgICAgZ2V0OiAocHJvcE5hbWUpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGVsbSA9IGdldFJlbmRlcmluZ1JlZigpO1xuICAgICAgICAgICAgaWYgKGVsbSkge1xuICAgICAgICAgICAgICAgIGFwcGVuZFRvTWFwKGVsbXNUb1VwZGF0ZSwgcHJvcE5hbWUsIGVsbSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogKHByb3BOYW1lKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBlbGVtZW50cyA9IGVsbXNUb1VwZGF0ZS5nZXQocHJvcE5hbWUpO1xuICAgICAgICAgICAgaWYgKGVsZW1lbnRzKSB7XG4gICAgICAgICAgICAgICAgZWxtc1RvVXBkYXRlLnNldChwcm9wTmFtZSwgZWxlbWVudHMuZmlsdGVyKGZvcmNlVXBkYXRlKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjbGVhbnVwRWxlbWVudHMoZWxtc1RvVXBkYXRlKTtcbiAgICAgICAgfSxcbiAgICAgICAgcmVzZXQ6ICgpID0+IHtcbiAgICAgICAgICAgIGVsbXNUb1VwZGF0ZS5mb3JFYWNoKChlbG1zKSA9PiBlbG1zLmZvckVhY2goZm9yY2VVcGRhdGUpKTtcbiAgICAgICAgICAgIGNsZWFudXBFbGVtZW50cyhlbG1zVG9VcGRhdGUpO1xuICAgICAgICB9LFxuICAgIH07XG59O1xuXG5jb25zdCB1bndyYXAgPSAodmFsKSA9PiAodHlwZW9mIHZhbCA9PT0gJ2Z1bmN0aW9uJyA/IHZhbCgpIDogdmFsKTtcbmNvbnN0IGNyZWF0ZU9ic2VydmFibGVNYXAgPSAoZGVmYXVsdFN0YXRlLCBzaG91bGRVcGRhdGUgPSAoYSwgYikgPT4gYSAhPT0gYikgPT4ge1xuICAgIGNvbnN0IHVud3JhcHBlZFN0YXRlID0gdW53cmFwKGRlZmF1bHRTdGF0ZSk7XG4gICAgbGV0IHN0YXRlcyA9IG5ldyBNYXAoT2JqZWN0LmVudHJpZXModW53cmFwcGVkU3RhdGUgIT09IG51bGwgJiYgdW53cmFwcGVkU3RhdGUgIT09IHZvaWQgMCA/IHVud3JhcHBlZFN0YXRlIDoge30pKTtcbiAgICBjb25zdCBoYW5kbGVycyA9IHtcbiAgICAgICAgZGlzcG9zZTogW10sXG4gICAgICAgIGdldDogW10sXG4gICAgICAgIHNldDogW10sXG4gICAgICAgIHJlc2V0OiBbXSxcbiAgICB9O1xuICAgIGNvbnN0IHJlc2V0ID0gKCkgPT4ge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIC8vIFdoZW4gcmVzZXR0aW5nIHRoZSBzdGF0ZSwgdGhlIGRlZmF1bHQgc3RhdGUgbWF5IGJlIGEgZnVuY3Rpb24gLSB1bndyYXAgaXQgdG8gaW52b2tlIGl0LlxuICAgICAgICAvLyBvdGhlcndpc2UsIHRoZSBzdGF0ZSB3b24ndCBiZSBwcm9wZXJseSByZXNldFxuICAgICAgICBzdGF0ZXMgPSBuZXcgTWFwKE9iamVjdC5lbnRyaWVzKChfYSA9IHVud3JhcChkZWZhdWx0U3RhdGUpKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiB7fSkpO1xuICAgICAgICBoYW5kbGVycy5yZXNldC5mb3JFYWNoKChjYikgPT4gY2IoKSk7XG4gICAgfTtcbiAgICBjb25zdCBkaXNwb3NlID0gKCkgPT4ge1xuICAgICAgICAvLyBDYWxsIGZpcnN0IGRpc3Bvc2UgYXMgcmVzZXR0aW5nIHRoZSBzdGF0ZSB3b3VsZFxuICAgICAgICAvLyBjYXVzZSBsZXNzIHVwZGF0ZXMgOylcbiAgICAgICAgaGFuZGxlcnMuZGlzcG9zZS5mb3JFYWNoKChjYikgPT4gY2IoKSk7XG4gICAgICAgIHJlc2V0KCk7XG4gICAgfTtcbiAgICBjb25zdCBnZXQgPSAocHJvcE5hbWUpID0+IHtcbiAgICAgICAgaGFuZGxlcnMuZ2V0LmZvckVhY2goKGNiKSA9PiBjYihwcm9wTmFtZSkpO1xuICAgICAgICByZXR1cm4gc3RhdGVzLmdldChwcm9wTmFtZSk7XG4gICAgfTtcbiAgICBjb25zdCBzZXQgPSAocHJvcE5hbWUsIHZhbHVlKSA9PiB7XG4gICAgICAgIGNvbnN0IG9sZFZhbHVlID0gc3RhdGVzLmdldChwcm9wTmFtZSk7XG4gICAgICAgIGlmIChzaG91bGRVcGRhdGUodmFsdWUsIG9sZFZhbHVlLCBwcm9wTmFtZSkpIHtcbiAgICAgICAgICAgIHN0YXRlcy5zZXQocHJvcE5hbWUsIHZhbHVlKTtcbiAgICAgICAgICAgIGhhbmRsZXJzLnNldC5mb3JFYWNoKChjYikgPT4gY2IocHJvcE5hbWUsIHZhbHVlLCBvbGRWYWx1ZSkpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBjb25zdCBzdGF0ZSA9ICh0eXBlb2YgUHJveHkgPT09ICd1bmRlZmluZWQnXG4gICAgICAgID8ge31cbiAgICAgICAgOiBuZXcgUHJveHkodW53cmFwcGVkU3RhdGUsIHtcbiAgICAgICAgICAgIGdldChfLCBwcm9wTmFtZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBnZXQocHJvcE5hbWUpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG93bktleXMoXykge1xuICAgICAgICAgICAgICAgIHJldHVybiBBcnJheS5mcm9tKHN0YXRlcy5rZXlzKCkpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGdldE93blByb3BlcnR5RGVzY3JpcHRvcigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBoYXMoXywgcHJvcE5hbWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3RhdGVzLmhhcyhwcm9wTmFtZSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2V0KF8sIHByb3BOYW1lLCB2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHNldChwcm9wTmFtZSwgdmFsdWUpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfSkpO1xuICAgIGNvbnN0IG9uID0gKGV2ZW50TmFtZSwgY2FsbGJhY2spID0+IHtcbiAgICAgICAgaGFuZGxlcnNbZXZlbnROYW1lXS5wdXNoKGNhbGxiYWNrKTtcbiAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgIHJlbW92ZUZyb21BcnJheShoYW5kbGVyc1tldmVudE5hbWVdLCBjYWxsYmFjayk7XG4gICAgICAgIH07XG4gICAgfTtcbiAgICBjb25zdCBvbkNoYW5nZSA9IChwcm9wTmFtZSwgY2IpID0+IHtcbiAgICAgICAgY29uc3QgdW5TZXQgPSBvbignc2V0JywgKGtleSwgbmV3VmFsdWUpID0+IHtcbiAgICAgICAgICAgIGlmIChrZXkgPT09IHByb3BOYW1lKSB7XG4gICAgICAgICAgICAgICAgY2IobmV3VmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgLy8gV2UgbmVlZCB0byB1bndyYXAgdGhlIGRlZmF1bHRTdGF0ZSBiZWNhdXNlIGl0IG1pZ2h0IGJlIGEgZnVuY3Rpb24uXG4gICAgICAgIC8vIE90aGVyd2lzZSB3ZSBtaWdodCBub3QgYmUgc2VuZGluZyB0aGUgcmlnaHQgcmVzZXQgdmFsdWUuXG4gICAgICAgIGNvbnN0IHVuUmVzZXQgPSBvbigncmVzZXQnLCAoKSA9PiBjYih1bndyYXAoZGVmYXVsdFN0YXRlKVtwcm9wTmFtZV0pKTtcbiAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgIHVuU2V0KCk7XG4gICAgICAgICAgICB1blJlc2V0KCk7XG4gICAgICAgIH07XG4gICAgfTtcbiAgICBjb25zdCB1c2UgPSAoLi4uc3Vic2NyaXB0aW9ucykgPT4ge1xuICAgICAgICBjb25zdCB1bnN1YnMgPSBzdWJzY3JpcHRpb25zLnJlZHVjZSgodW5zdWJzLCBzdWJzY3JpcHRpb24pID0+IHtcbiAgICAgICAgICAgIGlmIChzdWJzY3JpcHRpb24uc2V0KSB7XG4gICAgICAgICAgICAgICAgdW5zdWJzLnB1c2gob24oJ3NldCcsIHN1YnNjcmlwdGlvbi5zZXQpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzdWJzY3JpcHRpb24uZ2V0KSB7XG4gICAgICAgICAgICAgICAgdW5zdWJzLnB1c2gob24oJ2dldCcsIHN1YnNjcmlwdGlvbi5nZXQpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzdWJzY3JpcHRpb24ucmVzZXQpIHtcbiAgICAgICAgICAgICAgICB1bnN1YnMucHVzaChvbigncmVzZXQnLCBzdWJzY3JpcHRpb24ucmVzZXQpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzdWJzY3JpcHRpb24uZGlzcG9zZSkge1xuICAgICAgICAgICAgICAgIHVuc3Vicy5wdXNoKG9uKCdkaXNwb3NlJywgc3Vic2NyaXB0aW9uLmRpc3Bvc2UpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB1bnN1YnM7XG4gICAgICAgIH0sIFtdKTtcbiAgICAgICAgcmV0dXJuICgpID0+IHVuc3Vicy5mb3JFYWNoKCh1bnN1YikgPT4gdW5zdWIoKSk7XG4gICAgfTtcbiAgICBjb25zdCBmb3JjZVVwZGF0ZSA9IChrZXkpID0+IHtcbiAgICAgICAgY29uc3Qgb2xkVmFsdWUgPSBzdGF0ZXMuZ2V0KGtleSk7XG4gICAgICAgIGhhbmRsZXJzLnNldC5mb3JFYWNoKChjYikgPT4gY2Ioa2V5LCBvbGRWYWx1ZSwgb2xkVmFsdWUpKTtcbiAgICB9O1xuICAgIHJldHVybiB7XG4gICAgICAgIHN0YXRlLFxuICAgICAgICBnZXQsXG4gICAgICAgIHNldCxcbiAgICAgICAgb24sXG4gICAgICAgIG9uQ2hhbmdlLFxuICAgICAgICB1c2UsXG4gICAgICAgIGRpc3Bvc2UsXG4gICAgICAgIHJlc2V0LFxuICAgICAgICBmb3JjZVVwZGF0ZSxcbiAgICB9O1xufTtcbmNvbnN0IHJlbW92ZUZyb21BcnJheSA9IChhcnJheSwgaXRlbSkgPT4ge1xuICAgIGNvbnN0IGluZGV4ID0gYXJyYXkuaW5kZXhPZihpdGVtKTtcbiAgICBpZiAoaW5kZXggPj0gMCkge1xuICAgICAgICBhcnJheVtpbmRleF0gPSBhcnJheVthcnJheS5sZW5ndGggLSAxXTtcbiAgICAgICAgYXJyYXkubGVuZ3RoLS07XG4gICAgfVxufTtcblxuY29uc3QgY3JlYXRlU3RvcmUgPSAoZGVmYXVsdFN0YXRlLCBzaG91bGRVcGRhdGUpID0+IHtcbiAgICBjb25zdCBtYXAgPSBjcmVhdGVPYnNlcnZhYmxlTWFwKGRlZmF1bHRTdGF0ZSwgc2hvdWxkVXBkYXRlKTtcbiAgICBtYXAudXNlKHN0ZW5jaWxTdWJzY3JpcHRpb24oKSk7XG4gICAgcmV0dXJuIG1hcDtcbn07XG5cbmV4cG9ydCB7IGNyZWF0ZVN0b3JlIGFzIGMgfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXgtMDU5NTZjYWIuanMubWFwIiwiLyohXG4gKiBBbGwgbWF0ZXJpYWwgY29weXJpZ2h0IEVTUkksIEFsbCBSaWdodHMgUmVzZXJ2ZWQsIHVubGVzcyBvdGhlcndpc2Ugc3BlY2lmaWVkLlxuICogdjQuMC41OFxuICovXG5pbXBvcnQgeyBjIGFzIGNyZWF0ZVN0b3JlIH0gZnJvbSAnLi9pbmRleC0wNTk1NmNhYi5qcyc7XG5cbmNvbnN0IHVpU3RvcmUgPSBjcmVhdGVTdG9yZSh7XG4gICAgbmV4dFRleHQ6IFwibmV4dFwiLFxuICAgIHdvcmtmbG93OiBcImNvbnRlbnRcIixcbiAgICBzY2FsZTogXCJtXCIsXG4gICAgZGlzYWJsZVNjcm9sbDogZmFsc2UsXG4gICAgZmVhdHVyZUZsYWdzOiB7fVxufSk7XG5jb25zdCB1aVN0b3JlU3RhdGUgPSB1aVN0b3JlLnN0YXRlO1xuXG5leHBvcnQgeyB1aVN0b3JlIGFzIGEsIHVpU3RvcmVTdGF0ZSBhcyB1IH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVpLWJjYTdiY2QxLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==