"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_arcgis-raster-function-editor_-80e72e"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/common-strings.nl-bb99c2fc.js":
/*!**************************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/common-strings.nl-bb99c2fc.js ***!
  \**************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   addRaster: () => (/* binding */ addRaster),
/* harmony export */   addScalar: () => (/* binding */ addScalar),
/* harmony export */   breadcrumb: () => (/* binding */ breadcrumb),
/* harmony export */   breadcrumbEditor: () => (/* binding */ breadcrumbEditor),
/* harmony export */   cancel: () => (/* binding */ cancel),
/* harmony export */   category: () => (/* binding */ category),
/* harmony export */   categoryNames: () => (/* binding */ categoryNames),
/* harmony export */   close: () => (/* binding */ close),
/* harmony export */   copy: () => (/* binding */ copy),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   defaultModelName: () => (/* binding */ defaultModelName),
/* harmony export */   definitionQuery: () => (/* binding */ definitionQuery),
/* harmony export */   description: () => (/* binding */ description),
/* harmony export */   deselectFunction: () => (/* binding */ deselectFunction),
/* harmony export */   details: () => (/* binding */ details),
/* harmony export */   dialogTitle: () => (/* binding */ dialogTitle),
/* harmony export */   dontSave: () => (/* binding */ dontSave),
/* harmony export */   enterFURL: () => (/* binding */ enterFURL),
/* harmony export */   enterURL: () => (/* binding */ enterURL),
/* harmony export */   error: () => (/* binding */ error),
/* harmony export */   errorTitle: () => (/* binding */ errorTitle),
/* harmony export */   everyone: () => (/* binding */ everyone),
/* harmony export */   f32PixelType: () => (/* binding */ f32PixelType),
/* harmony export */   f64PixelType: () => (/* binding */ f64PixelType),
/* harmony export */   failedToLoadLayer: () => (/* binding */ failedToLoadLayer),
/* harmony export */   folder: () => (/* binding */ folder),
/* harmony export */   general: () => (/* binding */ general),
/* harmony export */   groupFieldName: () => (/* binding */ groupFieldName),
/* harmony export */   groupItemsBy: () => (/* binding */ groupItemsBy),
/* harmony export */   groups: () => (/* binding */ groups),
/* harmony export */   invalidRFTMessage: () => (/* binding */ invalidRFTMessage),
/* harmony export */   isDataset: () => (/* binding */ isDataset),
/* harmony export */   isPublic: () => (/* binding */ isPublic),
/* harmony export */   item: () => (/* binding */ item),
/* harmony export */   itemGroup: () => (/* binding */ itemGroup),
/* harmony export */   loadingLayer: () => (/* binding */ loadingLayer),
/* harmony export */   matchVariables: () => (/* binding */ matchVariables),
/* harmony export */   mosaic: () => (/* binding */ mosaic),
/* harmony export */   multidimensionalRules: () => (/* binding */ multidimensionalRules),
/* harmony export */   name: () => (/* binding */ name),
/* harmony export */   noTagErrorMsg: () => (/* binding */ noTagErrorMsg),
/* harmony export */   noTitleErrorMsg: () => (/* binding */ noTitleErrorMsg),
/* harmony export */   noTitleTagErrorMsg: () => (/* binding */ noTitleTagErrorMsg),
/* harmony export */   ok: () => (/* binding */ ok),
/* harmony export */   organization: () => (/* binding */ organization),
/* harmony export */   outputPixelType: () => (/* binding */ outputPixelType),
/* harmony export */   owner: () => (/* binding */ owner),
/* harmony export */   parameter: () => (/* binding */ parameter),
/* harmony export */   parameters: () => (/* binding */ parameters),
/* harmony export */   properties: () => (/* binding */ properties),
/* harmony export */   raster: () => (/* binding */ raster),
/* harmony export */   rasterFunctionEditor: () => (/* binding */ rasterFunctionEditor),
/* harmony export */   rasterFunctions: () => (/* binding */ rasterFunctions),
/* harmony export */   rfxLicenseInfo: () => (/* binding */ rfxLicenseInfo),
/* harmony export */   s16PixelType: () => (/* binding */ s16PixelType),
/* harmony export */   s32PixelType: () => (/* binding */ s32PixelType),
/* harmony export */   s8PixelType: () => (/* binding */ s8PixelType),
/* harmony export */   save: () => (/* binding */ save),
/* harmony export */   saveAs: () => (/* binding */ saveAs),
/* harmony export */   saveUtils: () => (/* binding */ saveUtils),
/* harmony export */   savingMessage: () => (/* binding */ savingMessage),
/* harmony export */   scalar: () => (/* binding */ scalar),
/* harmony export */   search: () => (/* binding */ search),
/* harmony export */   selectFeature: () => (/* binding */ selectFeature),
/* harmony export */   selectFunction: () => (/* binding */ selectFunction),
/* harmony export */   selectRaster: () => (/* binding */ selectRaster),
/* harmony export */   serviceURL: () => (/* binding */ serviceURL),
/* harmony export */   setGroupSharing: () => (/* binding */ setGroupSharing),
/* harmony export */   setSharingLevel: () => (/* binding */ setSharingLevel),
/* harmony export */   share: () => (/* binding */ share),
/* harmony export */   shareWith: () => (/* binding */ shareWith),
/* harmony export */   success: () => (/* binding */ success),
/* harmony export */   tagFieldName: () => (/* binding */ tagFieldName),
/* harmony export */   tags: () => (/* binding */ tags),
/* harmony export */   title: () => (/* binding */ title),
/* harmony export */   toolDetailsEditor: () => (/* binding */ toolDetailsEditor),
/* harmony export */   toolEditor: () => (/* binding */ toolEditor),
/* harmony export */   toolModeler: () => (/* binding */ toolModeler),
/* harmony export */   tryAgain: () => (/* binding */ tryAgain),
/* harmony export */   type: () => (/* binding */ type),
/* harmony export */   u16PixelType: () => (/* binding */ u16PixelType),
/* harmony export */   u32PixelType: () => (/* binding */ u32PixelType),
/* harmony export */   u8PixelType: () => (/* binding */ u8PixelType),
/* harmony export */   unionDimensions: () => (/* binding */ unionDimensions),
/* harmony export */   unknownPixelType: () => (/* binding */ unknownPixelType),
/* harmony export */   unsavedTitle: () => (/* binding */ unsavedTitle),
/* harmony export */   unsavedWarningExisting: () => (/* binding */ unsavedWarningExisting),
/* harmony export */   unsavedWarningNew: () => (/* binding */ unsavedWarningNew),
/* harmony export */   userStartDirection: () => (/* binding */ userStartDirection),
/* harmony export */   variables: () => (/* binding */ variables),
/* harmony export */   viewerModeMessage: () => (/* binding */ viewerModeMessage),
/* harmony export */   viewerModeTitle: () => (/* binding */ viewerModeTitle),
/* harmony export */   warning: () => (/* binding */ warning)
/* harmony export */ });
const ok = "OK";
const cancel = "Afbreken";
const enterURL = "Imageservice URL invoeren";
const serviceURL = "Service-URL";
const selectRaster = "Raster selecteren";
const failedToLoadLayer = "Kaartlaag laden mislukt";
const loadingLayer = "Kaartlaag laden";
const selectFeature = "Objectlaag selecteren";
const enterFURL = "Featureservice URL invoeren";
const addRaster = "Rastervariabele toevoegen";
const addScalar = "Constante toevoegen";
const raster = "Raster";
const scalar = "Scalair";
const defaultModelName = "Template rasterfunctie";
const general = "Algemeen";
const parameters = "Parameters";
const variables = "Variabelen";
const name = "Naam";
const description = "Beschrijving";
const parameter = "Parameter";
const isPublic = "IsOpenbaar";
const isDataset = "IsDataset";
const unknownPixelType = "Onbekend";
const outputPixelType = "Uitvoerpixeltype";
const u8PixelType = "8 bits niet-ondertekend";
const s8PixelType = "8 bits ondertekend";
const u16PixelType = "16 bits niet-ondertekend";
const s16PixelType = "16 bits ondertekend";
const u32PixelType = "32 bits niet-ondertekend";
const s32PixelType = "32 bits ondertekend";
const f32PixelType = "32 bits zwevend";
const f64PixelType = "64 bits dubbel";
const properties = "Eigenschappen";
const multidimensionalRules = "Multidimensionale Regels";
const matchVariables = "Overeenkomstvariabelen";
const unionDimensions = "Verenigingsdimensies";
const rasterFunctionEditor = {
	invalidRFTMessage: "De rasterfunctietemplate is niet geldig.",
	rfxArgsEditor: {
		outputRaster: "OutputRaster",
		raster: "Raster",
		unsupportedDataTypeWarning: "De volgende argumenten worden niet weergegeven omdat ze momenteel niet worden ondersteund.",
		unsupportedFunction: "Bevat momenteel ondersteunde rasterfuncties."
	},
	rfxRasterInput: {
		selectLayer: "Kaartlaag selecteren",
		browseLayers: "Blader door lagen",
		rfxVariable: "RasterFunctieVariable"
	},
	rfxBandCombinationEditor: {
		methodLabel: "Methode",
		bandLabel: "Band",
		combinationLabel: "Combinatie"
	},
	rfxRemapGrid: {
		minimum: "Minimum",
		maximum: "Maximum",
		output: "Uitvoer",
		noData: "NoData",
		remapValuesLabel: "Waarden opnieuw bepalen"
	},
	rfxNamedRasterEditor: {
		rasterVariables: "Rastervariabelen",
		deleteSelectedVars: "Geselecteerde variabelen verwijderen"
	},
	rfxClippingGeometry: {
		clippingLayer: "Kaartlaag knippen",
		clippingRaster: "Raster knippen",
		clippingGeometry: "Geometrie bijsnijden",
		customExtent: "Aangepaste extent",
		outputExtent: "Uitvoerextent",
		currentExtent: "Huidige kaartextent",
		drawLabel: "Tekenen"
	},
	rfxCustomExtent: {
		top: "Boven",
		right: "Rechts",
		bottom: "Onder",
		left: "Links"
	},
	rfxRasterArrayEditor: {
		moveUp: "Naar boven verplaatsen",
		moveDown: "Naar beneden verplaatsen",
		remove: "Verwijderen"
	},
	rfxStatisticsGrid: {
		stdDev: "Std. Afw",
		min: "Min",
		max: "Max",
		mean: "Mediaan"
	},
	rfxWeightedSumTableEditor: {
		weightedSumTable: "Gewogen Somtabel",
		id: "ID",
		layer: "Kaartlaag",
		field: "Veld",
		weight: "Gewicht",
		value: "Waarde",
		selectLayer: "Kaartlaag selecteren"
	},
	rfxWeightedOverlayTableEditor: {
		weightedOverlayTable: "Weighted Overlay-tabel",
		id: "ID",
		layer: "Kaartlaag",
		field: "Veld",
		influence: "Invloed",
		sumOfInfluence: "Som van invloed",
		value: "Waarde",
		remapTable: "Remaptabel",
		scale: "Schaal",
		scales: "Schalen",
		selectRaster: "Raster selecteren"
	},
	rfxFeatureSelect: {
		addFeatureLayer: "Bladeren naar een objectlaag",
		addPointLayer: "Bladeren naar een puntlaag"
	},
	rfxFieldSelect: {
		value: "Waarde",
		count: "Aantal"
	},
	rfxAttributeTable: {
		tableType: "Tabeltype",
		manual: "Handmatig",
		external: "Extern",
		minVal: "Minimumwaarde",
		maxVal: "Maximumwaarde",
		baseClassName: "Klasse basisnaam",
		colorScheme: "Kleurenschema",
		defaultClassName: "Label_",
		generateTable: "Tabel genereren",
		browseTable: "Tabel Bekijken",
		value: "Waarde",
		classname: "Klassenaam",
		color: "Kleur"
	},
	rfxFieldNumberSwitchable: {
		number: "Numeriek",
		field: "Veld",
		string: "Tekenreeks",
		linearUnit: "Lineaire eenheid"
	},
	rfxPropertySet: {
		name: "Naam",
		value: "Waarde"
	},
	rfxConversionGrid: {
		size: "Grootte"
	},
	rfxTransposeBit: {
		bitPattern: "Bitpatroon",
		outputBit: "Uitvoerbit",
		inputBit: "Invoerbit"
	},
	rfxSpatialReference: {
		placeHolder: "Verfijnen op trefwoord",
		coordinateSystem: "Coördinatensysteem",
		gcs: "Geografisch coördinaatsysteem",
		pcs: "Geprojecteerd coördinaatsysteem",
		vcs: "Verticaal coördinaatsysteem"
	}
};
const rfxLicenseInfo = "Deze rasterfunctietemplate kan worden gebruikt om uw satellietbeelden te verwerken met behulp van ArcGIS Image Server.";
const rasterFunctions = {
	rfx: {
		aCosHName: "ACosH",
		aCosHSnip: "Berekent de inverse hyperbole cosinus van cellen in een raster.",
		aCosHDesc: "De functie berekent de inverse hyperbole cosinus van de pixels in een raster.",
		aCosName: "ACos",
		aCosSnip: "Berekent de inverse cosinus van de pixels in een raster.",
		aCosDesc: "Deze rasterfunctie berekent de arccosinus van cellen in een raster. In de wiskunde hebben alle trigonometrische functies een gedefinieerd bereik van geldige invoerwaarden, het domein genoemd. De uitvoerwaarden van elke functie hebben ook een gedefinieerd bereik. Voor deze tool is het domein [-1, 1] en het bereik is [0, pi].",
		aSinHName: "ASinH",
		aSinHSnip: "Berekent de inverse hyperbole sinus van cellen in een raster.",
		aSinHDesc: "De functie berekent de inverse hyperbole sinus van de pixels in een raster.",
		aSinName: "ASin",
		aSinSnip: "Berekent de inverse sinus van cellen in een raster.",
		aSinDesc: "De functie berekent de inverse sinus van de pixels in een raster.",
		aTan2Name: "ATan2",
		aTan2Snip: "Berekent de inverse tangens (gebaseerd op x,y) van cellen in een raster.",
		aTan2Desc: "De functie berekent de inverse tangens (gebaseerd op x,y) van de pixels in een raster.",
		aTanHName: "ATanH",
		aTanHSnip: "Berekent de inverse hyperbole tangens van cellen in een raster.",
		aTanHDesc: "De functie berekent de inverse hyperbole tangens van de pixels in een raster.",
		aTanName: "ATan",
		aTanSnip: "Berekent de inverse tangens van cellen in een raster.",
		aTanDesc: "De functie berekent de inverse tangens van de pixels in een raster.",
		absName: "Abs",
		absSnip: "Berekent de absolute waarde van de cellen in een raster.",
		absDesc: "De Abs-functie berekent de absolute waarde van de pixels in een raster.",
		reflectanceName: "Schijnbare reflectie",
		reflectanceSnip: "Zet onbewerkte beelden om in waarden voor Top of Atmosphere door rekening te houden met sensoreigenschappen, de positie van de zon en de acquisitietijd.",
		reflectanceDesc: "Met deze functie worden de waarden voor het digitale aantal (DN) van de beeldhelderheid aangepast voor sommige satellietsensoren. De aanpassingen zijn gebaseerd op de hoogte van de zon, de opnamedatum en de sensoreigenschappen om de versterking en bias in te stellen voor elke band. Deze functie wordt gebruikt om de reflectantie- of helderheidswaarden van sommige satellietbeelden aan te passen op basis van de scèneverlichting en sensorversterkingsinstellingen. De afbeeldingen zijn aangepast aan een theoretisch gebruikelijke belichtingsvoorwaarde, dus er moet minder variatie zijn tussen scenes van verschillende data en verschillende sensoren. Dit kan handig zijn voor beeldclassificatie, kleurbalans en mozaïeken. Deze functie kan alleen worden gebruikt met specifieke afbeeldingen. De toepasselijke sensoren zijn Landsat MSS, Landsat TM, Landsat ETM+, Landsat 8, IKONOS, QuickBird, GeoEye-1, RapidEye, DMCii, WorldView-1, WorldView-2, SPOT 6 en Pleiades.<div><br/>De functie voert twee correcties uit. De eerste is gebaseerd op de versterkingsinstellingen. De oorspronkelijke helderheidswaarden worden opnieuw gemaakt uit de afbeeldingswaarden door de versterkingsvergelijkingen om te keren. De tweede correctie heeft te maken met verschillen in zonhoek en helderheid. De oorspronkelijke helderheidswaarden worden aangepast aan gewone lichtomstandigheden door scenes te normaliseren die zijn vastgelegd onder variabele belichtingsomstandigheden. In het algemeen geldt dat, hoewel het gegevenstype van de uitvoerafbeelding hetzelfde is als het gegevenstype van de invoerafbeelding, de uitvoerwaarden lager zijn dan de invoerwaarden en worden bijgesneden naar het geldige gegevensbereik.</div>",
		argStatisticsName: "ArgStatistieken",
		argStatisticsSnip: "Berekent argstatistieken inclusief Arg Max, Arg Min, Arg Median en Duration.",
		argStatisticsDesc: "De functie berekent arg-statistieken. Er zijn vier methoden in de ArgStatistics-functie: ArgMax, ArgMin, ArgMedian en Duration.",
		arithmeticName: "Rekenkundig",
		arithmeticSnip: "Voert een rekenkundige bewerking uit tussen twee rasters of een raster en een scalair.",
		arithmeticDesc: "De rekenkundige functie voert een rekenkundige bewerking uit tussen twee rasters of een raster en een scalair en omgekeerd.",
		aspectSlopeName: "Aspect-Helling",
		aspectSlopeSnip: "Creëert een raster dat tegelijkertijd het aspect (richting) en de helling (steilheid) van een continu oppervlak weergeeft, zoals weergegeven in een digitaal hoogtemodel.",
		aspectSlopeDesc: "De functie Aspect Slope creëert een rasterlaag die tegelijkertijd het aspect en de helling van een oppervlak weergeeft. Aspect identificeert de richting bergafwaarts van de maximale mate van verandering in waarde van elke pixel tot de buurcellen. Aspect kan worden gezien als de hellingrichting. De waarden van de uitgaande raster zal de kompasrichting van het aspect zijn, weergegeven door een tint (kleur). Helling geeft de mate van verandering in de hoogte weer voor elke pixel van het digitaal elevatiemodel (DEM). Helling geeft de steilte van het oppervlak weer en wordt gesymboliseerd in drie klassen die worden weergegeven met behulp van kleurverzadiging (helderheid).<div><br/>De pixelwaarden in het uitvoeraspect-hellingsraster weerspiegelen een combinatie van aspect en helling. Pixels met waarden onder 20 worden als plat beschouwd en worden grijs weergegeven. Aspect-hellingwaarden van 21 en hoger worden als volgt weergegeven met variërende verzadiging: 21 tot 30 —Lage hellingsverzadiging, 31 tot 40—Gemiddelde hellingsverzadiging, 41 en hoger—Hoge hellingsverzadiging</div>",
		aspectName: "Aspect",
		aspectSnip: "Geeft aan in welke richting een pixel wordt weergegeven, waarbij 0 richting het noorden ligt en de hoeken met de klok mee toenemen tot 360.",
		aspectDesc: "De functie Aspect identificeert de richting bergafwaarts van de maximale mate van verandering in waarde van elke cel tot de buurcellen. Aspect kan worden gezien als de hellingrichting. De waarden van de uitvoerraster zal de kompasrichting van het aspect zijn.<div><br/>De invoer voor deze functie is Invoerraster. De aspectfunctie wordt vaak toegepast op een digitaal hoogtemodel (DEM). Standaard wordt het aspect weergegeven als een grijswaardenafbeelding. U kunt de functie Colormap toevoegen om een bepaald kleurenschema op te geven of de persoon die het mozaïek bekijkt, toestaan de symbologie met zijn eigen kleurenschema te wijzigen.</div>",
		tableName: "Attribuuttabel",
		tableSnip: "Gebruikt een tabel om de waarden in een dataset te benoemen en te symboliseren. Kolommen voor de tabel zijn door komma's gescheiden: PixelValue, AttributeName, RedValue, GreenValue, BlueValue.",
		tableDesc: "Met de functie Attribuuttabel kunt u een attribuuttabel definiëren om een mozaïekdataset of rasterdataset met één band te symboliseren. <div><br/>Dit is handig wanneer u afbeeldingen wilt presenteren die een classificatie hebben ondergaan voor landgebruik, zoals bosland, wetlands, akkerland en stedelijk gebied. Als uw tabel velden met de namen rood, groen en blauw bevat, worden de waarden in die velden ook als een kleurenschema gebruikt bij het renderen van de afbeelding.</div>",
		bandArithmeticName: "Band rekenkundig",
		bandArithmeticSnip: "Berekent indexen met vooraf gedefinieerde formules of een door de gebruiker gedefinieerde expressie.",
		bandArithmeticDesc: "De functie Band rekenkundig voert een rekenkundige bewerking uit op de banden van een rasterdataset. U kunt vooraf gedefinieerde algoritmen kiezen of u kunt uw eigen formule met één regel invoeren. De ondersteunde operators zijn -, +, /, * en unary -.",
		thresholdName: "Binaire drempel",
		thresholdSnip: "Organiseert continue gegevens in de voorgrond en achtergrond door de covariantie tussen de twee klassen te minimaliseren.",
		thresholdDesc: "Wanneer een rasterdataset een bimodale verdeling heeft, maakt deze functie een nieuw raster dat de gegevens verdeelt in twee afzonderlijke klassen. Hiermee wordt een klasse met een lage waarde weergegeven met zwarte pixels en een klasse met een hoge waarde weergegeven met witte pixels.",
		bitwiseAndName: "Bitwise en",
		bitwiseAndSnip: "Voert een Bitwise en-bewerking uit op de binaire waarden van twee invoerrasters.",
		bitwiseAndDesc: "Bitwise en voert een Bitwise en-bewerking uit op de binaire waarden van twee invoerrasters",
		bitwiseLeftShiftName: "Bitwise verschuiving links",
		bitwiseLeftShiftSnip: "Voert een Bitwise verschuiving links-bewerking uit op de binaire waarden van twee invoerrasters.",
		bitwiseLeftShiftDesc: "Bitwise verschuiving links voert een Bitwise verschuiving links bewerking uit op de binaire waarden van twee invoerrasters",
		bitwiseNotName: "Bitwise Not",
		bitwiseNotSnip: "Voert een Bitwise Not (aanvulling)-bewerking uit op de binaire waarden van twee invoerrasters.",
		bitwiseNotDesc: "De functie voert een Bitwise Not-bewerking (aanvulling) uit op de binaire waarden van een invoerraster.",
		bitwiseOrName: "Bitwise of",
		bitwiseOrSnip: "Voert een Bitwise of-bewerking uit op de binaire waarden van twee invoerrasters.",
		bitwiseOrDesc: "De functie voert Bitwise of-bewerking uit op de binaire waarden van twee invoerrasters. ",
		bitwiseRightShiftName: "Bitwise verschuiving rechts",
		bitwiseRightShiftSnip: "Voert een Bitwise verschuiving rechts-bewerking uit op de binaire waarden van twee invoerrasters.",
		bitwiseRightShiftDesc: "De functie voert een Bitwise verschuiving rechts-bewerking uit op de binaire waarden van twee invoerrasters.",
		bitwiseXorName: "Bitwise Xof",
		bitwiseXorSnip: "Voert een Bitwise eXclusive Of-bewerking uit op de binaire waarden van twee invoerrasters.",
		bitwiseXorDesc: "De functie voert een Bitwise eXclusive Of-bewerking uit op de binaire waarden van twee invoerrasters",
		booleanAndName: "Boolean en",
		booleanAndSnip: "Voert een Boolean en-bewerking uit op de celwaarden van twee invoerrasters. Als beide invoerwaarden waar zijn (niet nul), is de uitvoerwaarde 1. Als één of beide invoeren niet waar zijn (nul), is de uitvoer 0.",
		booleanAndDesc: "De functie voert een Boolean en-bewerking uit op de pixelwaarden van twee ingangen. Als beide invoerwaarden waar zijn (niet nul), is de uitvoerwaarde 1. Als één of beide invoerwaarden niet waar zijn (nul), is de uitvoerwaarde 0. ",
		booleanNotName: "Boolean Not",
		booleanNotSnip: "Voert een Boolean Not-bewerking (aanvulling) uit op de celwaarden van het invoerraster. Als de invoerwaarden waar zijn (niet nul), is de uitvoerwaarde 0. Als de invoerwaarden niet waar zijn (nul), is de uitvoer 1.",
		booleanNotDesc: "De functie voert een Boolean Not-bewerking (aanvulling) uit op de pixelwaarden van het invoerraster. Als beide invoerwaarden waar zijn (niet nul), is de uitvoerwaarde 0. Als beide invoerwaarden niet waar zijn (nul), is de uitvoerwaarde 1.",
		booleanOrName: "Boolean of",
		booleanOrSnip: "Voert een Boolean Not-bewerking uit op de celwaarden van de twee invoerrasters. Als één of beide invoerwaarden waar zijn (niet nul), is de uitvoerwaarde 1. Als beide invoerwaarden niet waar zijn (nul), is de uitvoer 0.",
		booleanOrDesc: "De functie voert Boolean Not-bewerking uit op de celwaarden van twee invoerrasters. Als één of beide invoerwaarden waar zijn (niet nul), is de uitvoerwaarde 1. Als beide invoerwaarden niet waar zijn (nul), is de uitvoerwaarde 0.",
		booleanXorName: "Boolean Xof",
		booleanXorSnip: "Voert een Boolean eXclusive of-bewerking uit op de celwaarden van twee invoerrasters. Als één invoerwaarde waar is (niet nul) en de andere waarde is niet waar (nul), is de uitvoer 1. Als beide invoerwaarden waar of niet waar zijn, is de uitvoer 0.",
		booleanXorDesc: "De functie voert een Boolean of-bewerking uit op de celwaarden van twee invoerrasters. Als één invoerwaarde waar is (niet nul) en de andere waarde is niet waar (nul), is de uitvoerwaarde 1. Als beide invoerwaarden waar of niet waar zijn, is de uitvoerwaarde 0.",
		bufferedRasterName: "Gebufferd",
		bufferedRasterSnip: "Buffert de laatst benaderde pixelblok(ken).",
		bufferedRasterDesc: "De functie Gebufferd wordt gebruikt om de prestaties van complexe functieketens te optimaliseren. Het slaat de uitvoer op in het geheugen van het deel van de functieketen dat ervoor komt. <div><br/>Voeg deze functie toe in de Functie-editor waar u de uitvoer wilt opslaan.</div>",
		rasterCalculatorName: "Rekenmachine",
		rasterCalculatorSnip: "Berekent een raster van een op rasters gebaseerde rekenkundige expressie.",
		rasterCalculatorDesc: "Met de functie Rekenmachine kunt u expressies maken en uitvoeren en deze opnemen in functieketens.",
		cellStatisticsName: "Celstatistieken",
		cellStatisticsSnip: "Berekent statistieken per cel van meerdere rasters. De beschikbare statistieken zijn: meerderheid, maximum, gemiddelde, mediaan, minimum, minderheid, percentiel, bereik, standaardafwijking, som en variëteit.",
		cellStatisticsDesc: "Deze functie berekent statistieken van meerdere rasters, op een pixel-per-pixel basis. De beschikbare statistieken zijn: meerderheid, maximum, gemiddelde, mediaan, minimum, minderheid, bereik, standaardafwijking, som en variëteit.",
		classifyName: "Classificeren",
		classifySnip: "Wijst elke pixel toe aan een klasse. Voeg aanvullende gegevens toe, zoals een gesegmenteerde afbeelding.",
		classifyDesc: "Deze rasterfunctie classificeert een rasterdataset op basis van een Esri Classifier Definition (.ecd)-bestand en rasterdatasetinvoer. Het .ecd-bestand dat wordt gebruikt in de functie Classificeren bevat alle informatie voor een specifieke dataset en classifier en wordt gegenereerd door de classificatietools voor trainingen, zoals de Train Support Vector Machine of Train Random Trees-tools.",
		clipName: "Bijsnijden",
		clipSnip: "Stelt de mate van een raster in met behulp van coördinaten of een andere dataset.",
		clipDesc: "Met deze functie wordt een raster bijgesneden met behulp van een rechthoekige vorm volgens de gedefinieerde extensies of wordt een raster bijgesneden in de vorm van een objectklasse van een invoerpolygoon. De vorm die het bijsnijden definieert, kan de reikwijdte van het raster bijsnijden of een gebied in het raster bijsnijden.",
		colorspaceConversionName: "Kleurmodelconversie",
		colorspaceConversionSnip: "Converteert een raster van RGB naar HSV en omgekeerd.",
		colorspaceConversionDesc: "De functie Kleurmodelconversie converteert het kleurenmodel van een afbeelding van de tint-, verzadigings- en waarde (HSV) naar rood, groen en blauw (RGB) of omgekeerd.<div><br/>Deze functie kan worden gebruikt in een mozaïekgegevensset.</div>",
		colormapToRGBName: "Colormap naar RGB",
		colormapToRGBSnip: "Converteert een single-band raster met een Colormap naar een driebanden (rood, groen en blauw) raster.",
		colormapToRGBDesc: "Deze functie converteert een single-band raster met een Colormap naar een driebanden (rood, groen en blauw) raster.<div><br/>Deze functie is handig wanneer u een driebandsraster moet maken van een enkelbandraster met een bijbehorende Colormap. De waarden in de Colormap worden gebruikt om elke rode, groene en blauwe band te maken. Deze functie kan worden gebruikt in een mozaïekgegevensset.</div>",
		colormapName: "Kleurmap",
		colormapSnip: "Wijzigt pixelwaarden om de rastergegevens weer te geven als grijswaarden- of een rood, groen, blauw (RGB) -afbeelding, gebaseerd op een Colormap of kleurverloop.",
		colormapDesc: "De functie Colormap is een type rasterdata-renderer. Het transformeert de pixelwaarden om de rasterdata weer te geven als een grijsschaal of een RGB-kleurenafbeelding op basis van een kleurenschema of specifieke kleuren in een Colormapbestand. U kunt een Colormap gebruiken om geanalyseerde gegevens weer te geven, zoals een geclassificeerde afbeelding of bij het weergeven van een topografische kaart (of een indexkleurgescande afbeelding).<div><br/>Colormaps bevatten een reeks waarden die zijn gekoppeld aan kleuren die worden gebruikt om een enkelbandraster consistent weer te geven met dezelfde kleuren. Elke pixelwaarde is gekoppeld aan een kleur, gedefinieerd als een reeks RGB-waarden. Colormaps kunnen elke bitdiepte ondersteunen, behalve zwevende komma. Ze ondersteunen ook positieve en negatieve waarden en kunnen Colormaps met ontbrekende waarden bevatten. Bij het weergeven van een dataset met een Colormap met ontbrekende waarden, worden de pixels met die ontbrekende waarden niet weergegeven.</div>",
		complexName: "Complex",
		complexSnip: "Haalt de grootte uit complexe getallen.",
		complexDesc: "Deze functie berekent de grootte van complexe waarden.<div><br/>Deze functie wordt meestal gebruikt bij RADAR-beelden met een complex datatype. Kan worden gebruikt in een mozaïekgegevensset.</div>",
		compositeBandName: "Samengestelde banden",
		compositeBandSnip: "Combineert meerdere datasets in een multiband-raster.",
		compositeBandDesc: "Met de functie Samengestelde banden kunt u rasters combineren om een multiband-afbeelding te vormen.",
		conName: "Voorwaardelijk",
		conSnip: "Voert een voorwaardelijke als, dan, andere-bewerking uit. Wanneer een Voorwaardelijke operator wordt gebruikt, moeten er gewoonlijk twee of meer aaneengekoppelde functies zijn, waarbij één functie de criteria vermeldt en de tweede functie de Voorwaardelijke operator is die de criteria gebruikt en dicteert wat de ware en onware uitvoer zou moeten zijn.",
		conDesc: "De functie Voorwaardelijk stelt de pixels van het uitvoerraster in op basis van een als\\dan-evaluatie van elke invoerpixel. Het retourneert pixelwaarden van het ware raster als de voorwaardelijke evaluatie waar is (1) of retourneert de pixelwaarden van het onware raster als de voorwaardelijke evaluatie onwaar is (0). Dit criterium wordt gespecificeerd door de uitvoer van een logische rekenkundige functie, die het invoerraster zal zijn.",
		constantName: "Constante",
		constantSnip: "Creëert een virtueel raster met een waarde van één pixel.",
		constantDesc: "Met deze functie wordt een virtueel raster gemaakt met een waarde van één pixel die kan worden gebruikt in rasterfunctietemplates en om een mozaïekdataset te verwerken.<div><br/>De constante waarde wordt gebruikt voor elke pixelwaarde in het raster.</div>",
		contourName: "Contour",
		contourSnip: "Maakt contourlijnen.",
		contourDesc: "De functie Contour genereert contourlijnen door punten samen te voegen met dezelfde hoogte ten opzichte van een rasterhoogtedataset. De contouren zijn isolijnen die zijn gemaakt als rasters voor visualisatie. De volgende belangrijke eigenschappen maken deze functie krachtig: contouren worden snel en dynamisch gegenereerd op zeer grote datareeksen, zoals de World Elevation; contouren kunnen glad worden gemaakt voor een cartografisch mooier uiterlijk met behoud van de nauwkeurigheid van de contouren; dynamische controle over de contourinterval is aanwezig; uitvoeropties omvatten contourlijnen, indexcontouren en gevulde contouren.<div><br/>Het maken van een contourlaag als een rasterproduct is waardevol voor een breed scala aan toepassingen, omdat de contouren op een kaart kunnen worden gelegd en informatie over het terrein kunnen verschaffen zonder de onderliggende gegevens te verbergen. Ze zijn nuttig in toepassingen zoals techniek, landbouw en waterbeheer.</div>",
		contrastBrightnessName: "Contrast en helderheid",
		contrastBrightnessSnip: "Past het contrast en de helderheid van een raster aan.",
		contrastBrightnessDesc: "De functie Contrast en helderheid verbetert de weergave van rasterdata door de helderheid en het contrast in het beeld aan te passen. Helderheid verhoogt bijvoorbeeld de totale lichtheid van de afbeelding—bijvoorbeeld, waardoor donkere kleuren lichter en lichtere kleuren witter—worden terwijl contrast het verschil tussen de donkerste en lichtste kleuren aanpast.<div><br/>Met deze functie worden de pixelwaarden gewijzigd; darom moet deze functie worden gebruikt als u de weergave van de gegevens wilt verbeteren en niet als u de gegevens wilt gebruiken als onderdeel van een analyse waarvoor de onbewerkte pixelwaarden moeten worden gebruikt. Deze functie is handig wanneer u de gegevens publiceert als een afbeeldingsservice die in toepassingen kan worden gebruikt zonder dat u het contrast en de helderheid van de afbeelding kunt wijzigen of om ervoor te zorgen dat deze wordt weergegeven met de instellingen van uw voorkeur.</div>",
		convolutionName: "Convolutie",
		convolutionSnip: "Past een filter toe om te verscherpen, vervagen, randen te detecteren, vloeiend te maken of voor een verloop over een raster.",
		convolutionDesc: "De functie Convolutie voert filtering uit op de pixelwaarden in een afbeelding, die kan worden gebruikt voor het verscherpen van een afbeelding, vervaging van een afbeelding, het detecteren van randen in een afbeelding of andere op kernel gebaseerde verbeteringen. Filters worden gebruikt om de kwaliteit van de rasterafbeelding te verbeteren door onjuiste gegevens te verwijderen of functies in de gegevens te verbeteren. Deze convolutiefilters worden toegepast op een bewegende, elkaar overlappende kernel (venster of buurt), zoals 3 bij 3. Convolutiefilters berekenen de pixelwaarde op basis van het gewicht van de buren.",
		corridorName: "Corridor",
		corridorSnip: "Berekent de som van de cumulatieve kosten voor twee accummulatieve invoerrasters.",
		corridorDesc: "De functie Corridor berekent de som van de cumulatieve kosten voor twee accummulatieve kosteninvoerrasters. Hoewel er twee rasters voor de invoer kunnen worden gebruikt, moeten het om een zinvol resultaat te krijgen, ongewijzigde accumulatieve kostenuitvoerrasters zijn. De volgorde van de twee invoeren is niet relevant.",
		cosHName: "CosH",
		cosHSnip: "Berekent de hyperbole cosinus van cellen in een raster.",
		cosHDesc: "De functie berekent de hyperbole cosinus van de pixels in een raster.",
		cosName: "Cos",
		cosSnip: "Berekent de cosinus van een cel in een raster.",
		cosDesc: "De functie berekent de cosinus van de pixels in een raster.",
		costAllocationName: "Kostentoewijzing",
		costAllocationSnip: "Berekent voor elke cel de bron met de laagste kosten op basis van de minst cumulatieve kosten over een kostenoppervlak.",
		costAllocationDesc: "De functie Kostentoewijzing berekent voor elke cel de bron met de laagste kosten op basis van de minst cumulatieve kosten over een kostenoppervlak.",
		costBackLinkName: "Cost Back Link",
		costBackLinkSnip: "Definieert de buur die de volgende cel is op het minst accumulatieve kostenpad naar de bron met de minste kosten.",
		costBackLinkDesc: "De functie Cost Back Link definieert de volgende aangrenzende cel op het minst accumulatieve kostenpad naar de bron met de minste kosten.<div><br/>Het raster van de back link bevat waarden van nul tot en met acht die de richting bepalen of de volgende aangrenzende cel (de volgende cel) identificeren langs het minst accumulatieve kostenpad van een cel om de bron met de minste kosten te bereiken. Als het pad naar de rechterbuur moet gaan, krijgt de cel de waarde 1, 2 voor de diagonale cel rechtsonder en gaat deze met de klok mee verder. De waarde 0 is gereserveerd voor broncellen.</div>",
		costDistanceName: "Kostenafstand",
		costDistanceSnip: "Berekent de laagste cumulatieve kostenafstand voor elke cel van of naar de bron met de laagste kosten over een kostenoppervlak.",
		costDistanceDesc: "De functie Kostenafstand berekent de kleinste cumulatieve kostenafstand voor elke cel van of naar de bron met de laagste kosten over een kostenoppervlak.",
		costPathName: "Kostenpad",
		costPathSnip: "Berekent het pad met de minste kosten van een bron naar een bestemming.",
		costPathDesc: "De globale functie Kostenpad berekent het pad met de laagste kosten van een bron naar een bestemming.<div><br/>Deze functie produceert een uitvoerraster waarmee het pad met de minste kosten of paden van geselecteerde locaties naar de dichtstbijzijnde broncel worden vastgelegd binnen het geaccumuleerde kostenoppervlak, in termen van kostenafstand.</div>",
		curvatureName: "Kromming",
		curvatureSnip: "Berekent de kromming van een rasteroppervlak, optioneel inclusief profiel en vlakkromming.",
		curvatureDesc: "De functie Kromming geeft de vorm of kromming van de helling weer. Een deel van een oppervlak kan hol of bol zijn; dat is te zien aan de krommingswaarde. De kromming wordt berekend door de tweede afgeleide van het oppervlak te berekenen.<div><br/>De uitvoer van de krommingsfunctie kan worden gebruikt om de fysieke kenmerken van een drainagebekken te beschrijven om erosie- en afvoerprocessen te begrijpen. De krommingswaarde kan worden gebruikt om bodemerosiepatronen te zoeken of de verdeling van water op het land. De profielkromming beïnvloedt de versnelling en vertraging van de stroming en beïnvloedt daarmee de erosie en afzetting. De kromming van de vlakke vorm beïnvloedt de convergentie en divergentie van de stroming.</div>",
		divideName: "Delen door",
		divideSnip: "Verdeelt de waarden van twee rasters op een cel-voor-cel basis.",
		divideDesc: "De functie Delen door deelt de waarden van twee rasters op een pixel-voor-pixel basis.",
		elevationVoidFillName: "Elevation Void Fill",
		elevationVoidFillSnip: "Creëert pixels waar gaten voorkomen in uw hoogtegegevens.",
		elevationVoidFillDesc: "De functie Elevation Void Fill wordt gebruikt om pixels te creëren waar gaten voorkomen in uw hoogtegegevens.<div><br/>Gaten treden op wanneer er geen verzamelde punten zijn binnen het gebied dat wordt weergegeven door een pixel in het resulterende raster. Gaten worden vaak veroorzaakt door waterlichamen, klasse-type selectie of uitsluiting. Leegtevulling wordt meestal gebruikt bij het genereren van een grondoppervlak.</div>",
		equalToName: "Gelijk aan",
		equalToSnip: "Voert een relationele gelijk-aan-bewerking uit op twee invoeren op cel-voor-cel basis. Retourneert 1 voor cellen waarbij het eerste raster gelijk is aan het tweede raster en 0 voor cellen waar ze niet gelijk zijn.",
		equalToDesc: "De functie voert een gelijk-aan-bewerking uit op twee rasters op een pixel-per-pixel basis. Het retourneert de waarde 1 voor pixels waarbij het eerste raster gelijk is aan het tweede raster en waarde 0 voor pixels waar ze niet gelijk zijn.",
		eucAllocationName: "Euclidische toewijzing",
		eucAllocationSnip: "Berekent voor elke cel de dichtstbijzijnde bron op basis van de Euclidische afstand.",
		eucAllocationDesc: "De functie Euclidische toewijzing berekent voor elke cel de dichtstbijzijnde bron op basis van de Euclidische afstand.",
		eucDirectionName: "Euclidische richting",
		eucDirectionSnip: "Berekent voor elke cel de richting in graden naar de dichtstbijzijnde bron.",
		eucDirectionDesc: "De functie Euclidische richting berekent voor elke cel de richting in graden naar de dichtstbijzijnde bron. <div><br/>De richting wordt berekend vanaf elk celcentrum tot het midden van de broncel die het dichtst bij is. Het bereik van de waarden loopt van 0 graden tot 360 graden, met 0 gereserveerd voor de broncellen. Oost (rechts) is 90 en de waarden lopen rechtsom (180 is zuid, 270 is west en 360 is noord).</div>",
		eucDistanceName: "Euclidische afstand",
		eucDistanceSnip: "Berekent voor elke cel de Euclidische afstand naar de dichtstbijzijnde bron.",
		eucDistanceDesc: "De functie Euclidische afstand berekent voor elke cel de Euclidische afstand naar de dichtstbijzijnde bron.",
		exp10Name: "Exp10",
		exp10Snip: "Berekent de basis 10 exponentiële cellen in een raster.",
		exp10Desc: "De functie Exp 10 berekent de basis 10 exponentiële pixels in een raster.",
		exp2Name: "Exp2",
		exp2Snip: "Berekent de basis 2 exponentiële cellen in een raster.",
		exp2Desc: "De functie berekent de basis 2 exponentiële pixels in een raster.",
		expName: "Exp",
		expSnip: "Berekent de basis e exponentiële cellen in een raster.",
		expDesc: "De functie berekent de basis e exponentiële pixels in een raster.",
		extractBandName: "Banden exporteren",
		extractBandSnip: "Geeft aan met welke banden moet worden gewerkt bij het gebruik van multibands-datasets.",
		extractBandDesc: " Met de functie Banden exporteren kunt u een of meer banden exporteren uit, of opnieuw ordenen in, een multibands rasterdataset.<div><br/>U kunt de functie Banden exporteren gebruiken voor andere functies, zoals Aritmetisch, om te bepalen welke banden worden gebruikt als invoer in de volgende functie.</div>",
		fillName: "Vulling",
		fillSnip: "Vult putjes in een oppervlakraster om kleine onvolkomenheden in de gegevens te verwijderen.",
		fillDesc: "De globale functie Vullen lokaliseert en vult putten en pieken in een hoogteoppervlakraster om kleine onvolkomenheden in de gegevens te verwijderen. De functie vult een iteratief proces in totdat alle putten zijn gevuld binnen de opgegeven Z-limiet.<div><br/>Wanneer een hoogtevlak wordt gemaakt met Ortho Mapping-tools of met andere middelen, zijn er vaak kleine maar significante fouten in de vorm van putten en pieken in de gegevens. In fotogrammetrie worden putten en pieken vaak gaten en pieken genoemd. Omdat oppervlaktegegevens vaak worden gebruikt in modellering, zoals hydrologische modellering, is het belangrijk om deze fouten met putten en pieken op een manier te corrigeren die consistent is met de omringende gegevens.</div>",
		floatName: "Zweven",
		floatSnip: "Converteert elke celwaarde van een raster in een zwevende-puntweergave.",
		floatDesc: "De functie Zweven converteert elke pixelwaarde van een raster in een zwevende-puntweergave.",
		flowAccumulationName: "Stroomaccumulatie",
		flowAccumulationSnip: "Creëert een raster van geaccumuleerde stroom in elke cel. Een gewichtsfactor kan optioneel worden toegepast.",
		flowAccumulationDesc: "Met de algemene functie Stroomaccumulatie wordt een raster van geaccumuleerde stroom in elk pixel gemaakt, zoals bepaald door het verzamelen van het gewicht voor alle pixels die in elke neerwaartse pixel vloeien. Als er geen gewichtsraster is, wordt een gewicht van 1 toegepast op elke pixel en is de waarde van pixels in het uitvoerraster het aantal pixels dat in elke pixel stroomt.<div><br/>Uitvoerpixels met een hoge stroomaccumulatie zijn gebieden met geconcentreerde stroom en kunnen worden gebruikt om stroomkanalen te identificeren. Uitvoerpixels met een stroomaccumulatie van nul zijn lokale topografische hoogtepunten en kunnen worden gebruikt om bergkammen te identificeren.</div>",
		flowDirectionName: "Stroomrichting",
		flowDirectionSnip: "Creëert een raster van stroomrichting van elke cel naar de steilste neerwaartse buur.",
		flowDirectionDesc: "Een van de sleutels tot het afleiden van hydrologische eigenschappen van een oppervlak is het vermogen om de stroomrichting van elke pixel in het raster te bepalen. De rasterfunctie van de Stroomrichting neemt een oppervlak als invoer en creëert een raster van stroomrichting van elke pixel naar de steilste neerwaartse buur. De functie Stroomrichting ondersteunt drie stroommodelmethoden: de D8 (acht richtingen), Multi-Flow Direction (MFD) en D-Infinity (DINF). ",
		flowDistanceName: "Stroomafstand",
		flowDistanceSnip: "Berekent, voor elke cel, de minimale neerwaartse horizontale of verticale afstand tot cellen op een stroom of rivier waarin ze stromen.",
		flowDistanceDesc: "Voor elke pixel berekent de functie de minimale neerwaartse horizontale of verticale afstand tot pixel(s) op een rivier of stroom waarin ze stromen. Als er een optioneel stroomrichtingraster is, wordt/worden de neerwaartse richting(en) beperkt tot die die worden gedefinieerd door het raster van de invoerstroomrichting. De uitvoer is een stroomafstandraster.",
		focalName: "Focale statistieken",
		focalSnip: "Berekent focale statistieken voor elke pixel van een afbeelding op basis van een gedefinieerde focale buurt.",
		focalDesc: "De functie Focale statistieken berekent focale statistieken voor elke pixel van een afbeelding op basis van een gedefinieerde focale buurt.",
		geometricName: "Geometrisch",
		geometricSnip: "Verhoogt de positienauwkeurigheid van een dataset door rekening te houden met de hoogte.",
		geometricDesc: "De functie Geometrisch produceert een orthogerectificeerde afbeelding op basis van een sensordefinitie en een terreinmodel. Het verhoogt de positienauwkeurigheid van een dataset door rekening te houden met de hoogte.",
		grayscaleName: "Grijstinten",
		grayscaleSnip: "Converteert een multiband-afbeelding naar een afbeelding in grijstinten met één band.",
		grayscaleDesc: "Met deze functie converteert u een multiband-afbeelding naar een afbeelding in grijstinten met één band.<div><br/>Deze functie past gespecificeerde gewichten toe op elk van de invoerbanden en normaliseert het uitvoerbeeld. De gewichten worden vaak toegepast omdat sommige banden afhankelijk van de toepassing van variabel belang zijn. De blauwe band bevat bijvoorbeeld vaak meer ruis dan andere banden.</div>",
		greaterThanEqualName: "Groter dan of gelijk aan",
		greaterThanEqualSnip: "Voert een Relationele-groter-dan-gelijk-aan-bewerking uit op twee invoeren op cel-voor-cel basis. Retourneert 1 voor cellen waarvan het eerste raster groter is dan of gelijk is aan het tweede raster en 0 als dit niet het geval is.",
		greaterThanEqualDesc: "De functie voert een Relationele-groter-dan-of-gelijk-aan-bewerking uit op twee invoeren op een pixel-per-pixel basis. Het retourneert een waarde van 1 voor pixels waarbij het eerste raster groter is dan of gelijk aan het tweede raster en een waarde van 0 voor pixels waarbij het eerste raster niet groter is dan of gelijk is aan het tweede raster.",
		greaterThanName: "Groter dan",
		greaterThanSnip: "Voert een Relationele-groter-dan-bewerking uit op twee invoeren op cel-voor-cel basis. Retourneert 1 voor cellen waarbij het eerste groter is dan het tweede raster en 0 voor cellen als dit niet het geval is.",
		greaterThanDesc: "De functie voert een Relationele-groter-dan-bewerking uit op twee invoeren op een pixel-per-pixel basis. Retourneert een waarde van 1 voor pixels waarbij het eerste raster groter is dan of gelijk aan het tweede raster en een waarde van 0 voor pixels waarbij het eerste raster niet groter is dan het tweede raster.",
		heatIndexName: "Warmte-index",
		heatIndexSnip: "Combineert de omgevingsluchttemperatuur en de relatieve vochtigheid om de schijnbare temperatuur terug te brengen.",
		heatIndexDesc: "Deze functie berekent de schijnbare temperatuur op basis van de omgevingstemperatuur en relatieve vochtigheid. De schijnbare temperatuur wordt vaak beschreven als hoe heet het voor het menselijk lichaam is.<div><br/>Deze index kan nuttig zijn voor het berekenen van de gevaren die verband houden met medische problemen zoals spierkramp, uitdroging, hitte-uitputting of een ernstige zonnesteek op warme en vochtige dagen. Als de relatieve vochtigheid hoog is, wordt het steeds moeilijker voor het lichaam om zweet te verdampen, waardoor een mens niet meer effectief op natuurlijke manier kan afkoelen. Kaarten met warmte-adviezen of waarschuwingen zijn vaak een gevolg van het herclassificeren van het resultaat van de warmte-index naar klassen, waarbij hoe hoger de indexwaarde is, hoe groter de kans is dat het eerder een waarschuwing dan een advies wordt.</div>",
		hillshadeName: "Bergschaduwen",
		hillshadeSnip: "Creëert een 3D-weergave van het oppervlak, waarbij de relatieve positie van de zon in aanmerking wordt genomen voor het verduisteren van het beeld.",
		hillshadeDesc: "De functie Bergschaduw produceert een 3D-weergave in grijstinten van het terreinoppervlak, waarbij de relatieve positie van de zon in aanmerking wordt genomen voor het verduisteren van het beeld. <div><br/>Bergschaduw is een techniek voor het visualiseren van terrein dat wordt bepaald door een lichtbron en de helling en het aspect van het hoogtevlak. Het is een kwalitatieve methode voor het visualiseren van topografie en geeft geen absolute hoogtewaarden. </div>",
		intName: "Int",
		intSnip: "Converteert elke celwaarde van een raster naar een geheel getal door af te korten.",
		intDesc: "De functie Int converteert elke pixelwaarde van een raster naar een geheel getal door af te korten.",
		interpolateIrregularDataName: "Interpoleren van onregelmatige gegevens",
		interpolateIrregularDataSnip: "Interpoleert van pointclouds of onregelmatige rasters.",
		interpolateIrregularDataDesc: "Sommige netCDF- of HDF-datasets slaan hun geolocatie op als onregelmatig verdeelde rijen pixels of puntgegevens. Bij het toevoegen van deze datasets aan een mozaïekdataset, neemt de interpolerende onregelmatige gegevensfunctie de onregelmatig gerasterde gegevens op en herverzamelt deze zodat elke pixel een uniforme grootte heeft en vierkant is.<div><br/>Bij het toevoegen van variabelen uit netCDF of HDF aan een mozaïekdataset, wordt automatisch gecontroleerd of de gegevens regelmatig worden gerangschikt. Als dit niet het geval is, kan de interpoleerfunctie voor onregelmatige data worden gebruikt om de onregelmatige gegevens om te zetten in een raster dat regelmatig wordt gerasterd. U kunt de interpolatiemethode en de celgrootte wijzigen die worden gebruikt in de interpoleerfunctie voor onregelmatige datarasters. Voor rasterdata op regelmatige afstanden wordt geen interpolatie toegepast en worden de gegevens gelezen zoals ze zijn.</div>",
		isNullName: "Is null",
		isNullSnip: "Bepaalt welke waarden van de invoerrasters NoData zijn op een cel-voor-cel basis. Retourneert een waarde van 1 als de invoerwaarden NoData zijn en 0 voor cellen die dat niet zijn.",
		isNullDesc: "De Is null-functie bepaalt welke waarden van het invoerraster NoData zijn op een pixel-voor-pixel basis. Het geeft een waarde van 1 als de invoerwaarde NoData is en een waarde van 0 voor pixels die geen NoData zijn.",
		kernelDensityName: "Kerndichtheid",
		kernelDensitySnip: "Berekent een magnitude-per-eenheid gebied van punt- of polylijnobjecten met behulp van een kernfunctie om een vloeiend, taps toelopend oppervlak op elk punt of polylijn te passen.",
		kernelDensityDesc: "Deze functie berekent een magnitude-per-eenheid gebied van punt- of polylijnobjecten met behulp van een kernfunctie om een vloeiend, taps toelopend oppervlak op elk punt of polylijn te passen.",
		keyMetadataName: "Belangrijke metadata",
		keyMetadataSnip: "Overschrijft of voegt belangrijke metadata van een raster in een functieketen in.",
		keyMetadataDesc: "Met deze functie kunt u metadata van een raster invoegen of vervangen.<div><br/>De informatie in belangrijke metadata wordt gebruikt om de toepassing te helpen bij sommige bewerkingen en weergaven, waaronder het verstrekken van nuttige informatie, zoals de sensornaam, bandnamen of cloud cover die aan de beelden is gekoppeld.</div>",
		shortestPathName: "Laagste kostenpad",
		shortestPathSnip: "Voert een kostenafstandsanalyse uit met bron- en bestemmingsinvoer die vervolgens wordt gebruikt om het pad met de minste kosten van een bron naar een bestemming te bepalen.",
		shortestPathDesc: "De functie Laagste kostenpad berekent het pad met de laagste kosten van een bron naar een bestemming. De minst cumulatieve kostenafstand wordt berekend voor elke pixel over een kostenoppervlak naar de dichtstbijzijnde bron. Dit produceert een uitvoerraster waarmee het pad met de minste kosten of paden van geselecteerde locaties naar de dichtstbijzijnde bronpixels vastgelegd binnen het geaccumuleerde kostenoppervlak, in termen van kostenafstand.<div><br/>Aan elk pad met de laagste kosten wordt een waarde toegewezen wanneer deze tijdens het scanproces wordt aangetroffen. De eindpixel op het bronraster van een kostenpad krijgt een waarde van 1. Het eerste pad krijgt een waarde van 3, de tweede 4, enzovoort. Wanneer meerdere paden samenvloeien en de resterende afstand naar een bron op dezelfde route volgen, krijgt het segment waar de twee paden samen komen een waarde van 2. Het samengevoegde deel van het pad kan niet de waarde van een van de paden krijgen toegewezen, omdat het samengevoegde deel bij beide routes hoort.</div>",
		lessThanEqualName: "Kleiner dan of gelijk aan",
		lessThanEqualSnip: "Voert een Relationele-kleiner-dan-gelijk-aan-bewerking uit op twee invoeren op een cel-voor-cel basis. Retourneert 1 voor cellen waarvan het eerste raster kleiner is dan of gelijk is aan het tweede raster en 0 als dit niet het geval is.",
		lessThanEqualDesc: "De functie voert een Relationele-kleiner-dan-of-gelijk-aan-bewerking uit op twee invoeren op een pixel-per-pixel basis. Het retourneert een waarde van 1 voor pixels waarbij het eerste raster kleiner is dan of gelijk aan het tweede raster en een waarde van 0 voor pixels waarbij het niet kleiner is dan of gelijk is aan het tweede raster.",
		lessThanName: "Kleiner dan",
		lessThanSnip: "Voert een Relationele-kleiner-dan-bewerking uit op twee invoeren op een cel-voor-cel basis. Retourneert 1 voor cellen waarvan het eerste raster kleiner is dan het tweede raster en 0 als dit niet het geval is.",
		lessThanDesc: "De functie voert een Relationele-kleiner-dan-bewerking uit op twee invoeren op een pixel-per-pixel basis. Het retourneert een waarde van 1 voor pixels waarbij het eerste raster kleiner is dan het tweede raster en een waarde van 0 waarbij het niet kleiner is dan het tweede raster.",
		lnName: "Ln",
		lnSnip: "Berekent het natuurlijke logaritme (basis e) van cellen in een raster.",
		lnDesc: "De functie Ln berekent het natuurlijk logaritme (basis e) van elk pixel in een raster.",
		log10Name: "Log10",
		log10Snip: "Berekent de basis 10 logaritme van cellen in een raster.",
		log10Desc: "De functie Log10 berekent de basis 10 logaritme van elk pixel in een raster.",
		log2Name: "Log2",
		log2Snip: "Berekent de basis 2 logaritme van cellen in een raster.",
		log2Desc: "De functie Log2 berekent de basis 2 logaritme van elk pixel in een raster.",
		lookupName: "Opzoeken",
		lookupSnip: "Maakt een nieuw raster door waarden op te zoeken die in een ander veld in de tabel van het invoerraster zijn gevonden.",
		lookupDesc: "De functie maakt een nieuw raster door waarden op te zoeken die in een ander veld in de tabel van het invoerraster zijn gevonden.",
		mlClassifyName: "ML Classificeren",
		mlClassifySnip: "Classificeert afbeeldingen met behulp van een per-pixel benadering. Gemengde pixels worden toegewezen aan het object met het hoogste percentage in dat pixel.",
		mlClassifyDesc: "Met de functie ML Classificeren kunt u onder toezicht een classificatie uitvoeren, met behulp van het classificatie-algoritme voor maximale waarschijnlijkheid, op een rasterdataset of mozaïekdataset. Voor deze functie is een classificatiesignatuurbestand vereist.",
		maskName: "Masker",
		maskSnip: "Stelt waarden in die u niet wilt weergeven.",
		maskDesc: "Deze rasterfunctie stelt waarden in die u niet in uw raster wilt weergeven. Met behulp van de functie Masker geeft u een of meer NoData-waarden of een reeks geldige pixelwaarden op. ",
		minusName: "Min",
		minusSnip: "Hiermee wordt de waarde van het tweede invoerraster van de waarde van het eerste invoerraster afgetrokken op een cel-voor-cel-basis.",
		minusDesc: "De functie Minus trekt de waarde van het tweede invoerrooster af van de waarde van het eerste invoerraster op een pixel per pixel basis.",
		modName: "Mod",
		modSnip: "Vindt de rest (modulo) van het eerste raster wanneer het gedeeld wordt door het tweede raster op een cel-voor-cel basis.",
		modDesc: "Mod-functie vindt de rest (modulo) van het eerste raster, gedeeld door het tweede raster op een pixel-voor-pixel basis. De volgorde van de invoer is belangrijk en beïnvloedt het resultaat van de uitvoer.",
		mosaicRastersName: "Mozaïekrasters",
		mosaicRastersSnip: "Voegt verschillende rasterdatasets samen om één dataset te maken.",
		mosaicRastersDesc: "De functie Mozaïekrasters maakt een mozaïekafbeelding uit meerdere afbeeldingen. Wanneer er overlapping is tussen de afbeeldingen, zijn er verschillende methoden waaruit u kunt kiezen om te bepalen welke afbeeldingen worden weergegeven.",
		ndviColorizedName: "NDVI ingekleurd",
		ndviColorizedSnip: "Creëert een multiband-dataset die de gezondheid van de vegetatie vertegenwoordigt, op basis van het verschil tussen de rode en de nabij-infraroodbanden.",
		ndviColorizedDesc: "De functie NDVI Ingekleurd past de NDVI-functie toe op het invoerbeeld en gebruikt vervolgens een kleurkaart of kleurverloop om het resultaat weer te geven.",
		ndviName: "NDVI",
		ndviSnip: "Berekent de Normalized Difference Vegetation Index (NDVI)",
		ndviDesc: "De NDVI-functie maakt een dataset met één band die de gezondheid van de vegetatie weergeeft, op basis van het verschil tussen de rode en de nabij-infraroodbanden.<div><br/>NDVI is een gestandaardiseerde index zodat u een beeld komt vormen van de groenheid, ook wel relatieve biomassa genoemd. Deze index maakt gebruik van het contrast van de kenmerken van de twee banden van een multispectraal rasterdataset; de chlorofylpigmentabsorptie in de rode band en de hoge reflectiviteit van plantaardige materialen in het nabij-infrarood (NIR) band. Extreem lage of negatieve NDVI-waarden vertegenwoordigen gebieden zonder enige vegetatie, zoals wolken, water of sneeuw. Zeer lage waarden vertegenwoordigen gebieden met weinig tot geen vegetatie, zoals beton, rotsen of kale grond. Gematigde waarden vertegenwoordigen gebieden met struiken en grasland. Hoge waarden vertegenwoordigen bosgebieden en weelderige vegetatie.</div>",
		negateName: "Negatie",
		negateSnip: "Wijzigt het teken (vermenigvuldigd met -1) van de celwaarden van het invoerraster op cel voor cel basis.",
		negateDesc: "De functie Negatie verandert het teken (vermendigvulgd met -1) van de pixelwaarden van het invoerraster op een pixel ",
		nibbleName: "Nibble",
		nibbleSnip: "Vervangt cellen van een raster die overeenkomen met een masker met de waarden van naaste buren.",
		nibbleDesc: "Met de functie Nibble kan aan geselecteerde gebieden van een raster de waarde van hun dichtstbijzijnde buur worden toegewezen. Dit is handig voor het bewerken van gebieden van een raster waar de gegevens mogelijk onjuist zijn.",
		notEqualName: "Niet gelijk",
		notEqualSnip: "Voert een Relationele niet- gelijk-aan-bewerking uit op twee invoeren op cel-voor-cel basis. Retourneert 1 voor cellen waarvan het eerste raster niet gelijk is aan het tweede raster en 0 als het gelijk is.",
		notEqualDesc: "De functie voert een Relationele-niet-gelijk-aan-bewerking uit op twee invoeren op een pixel-per-pixel basis. Het retourneert een waarde van 1 voor pixels waarbij het eerste raster niet gelijk is aan het tweede raster en een waarde van 0 voor pixels waarbij het gelijk is aan het tweede raster.",
		pansharpeningName: "Pansharpen",
		pansharpeningSnip: "Verhoogt kunstmatig de ruimtelijke resolutie van een multibandbeeld door deze te fuseren met een panchromatisch beeld met hogere resolutie.",
		pansharpeningDesc: "De functie Pansharpening gebruikt een panchromatisch beeld met hogere resolutie of een rasterband om te fuseren met een multiband rasterdataset met een lagere resolutie om de ruimtelijke resolutie van het multibandbeeld te vergroten.<div><br/>Het doel van pansharpening is om een visueel beeld van hogere kwaliteit te creëren. Aangezien de technieken de radiometrie en spectrale karakteristieken van de multibandbeelden veranderen, moeten beelden met pansharpening voorzichtig worden gebruikt voor analytische detectiedoeleinden.</div>",
		pathAllocationName: "Padafstandtoewijzing",
		pathAllocationSnip: "Berekent de bron met de laagste kosten voor elke cel op basis van de minst cumulatieve kosten over een kostenoppervlak, waarbij rekening wordt gehouden met de oppervlakafstand samen met de horizontale en verticale kostenfactoren.",
		pathAllocationDesc: "De functie Padafstandtoewijzing berekent de dichtstbijzijnde bron voor elke cel op basis van de minst cumulatieve kosten over een kostenoppervlak, waarbij rekening wordt gehouden met oppervlakafstand en horizontale en verticale kostenfactoren.",
		pathBackLinkName: "Path Distance Back Link",
		pathBackLinkSnip: "Definieert de buur die de volgende cel is op het minst cumulatieve kostenpad naar de bron met de laagste kosten, waarbij rekening wordt gehouden met de oppervlakafstand samen met horizontale en verticale kostenfactoren.",
		pathBackLinkDesc: "De functie Path Distance Back Link identificeert de directionaliteit van de buur die de volgende cel is op het minst cumulatieve kostenpad naar de dichtstbijzijnde bron, rekening houdend met oppervlakafstand en horizontale en verticale kostenfactoren.",
		pathDistanceName: "Padafstand",
		pathDistanceSnip: "Berekent voor elke cel de minst cumulatieve kostenafstand van of naar de bron met de minste kosten, waarbij rekening wordt gehouden met oppervlakafstand samen met horizontale en verticale kostenfactoren.",
		pathDistanceDesc: "De functie Padafstand berekent voor elke cel de minst cumulatieve kostenafstand naar de dichtstbijzijnde bron, waarbij rekening wordt gehouden met oppervlakafstand en horizontale en verticale kostenfactoren.",
		plusName: "Plus",
		plusSnip: "Voegt de waarden van twee rasters toe op een cel-voor-cel basis.",
		plusDesc: "Plusfunctie voegt de waarden van twee rasters op een pixel-voor-pixel basis toe.",
		powerName: "Macht",
		powerSnip: "Verhoogt de celwaarden in een raster naar de macht van de waarden in een ander raster.",
		powerDesc: "De functie Macht verhoogt de pixelwaarden in een raster naar de macht van de waarden die in een ander raster zijn gevonden.",
		radarCalibrationName: "Radarkalibratie",
		radarCalibrationSnip: "Converteert RADARSAT-2-terugverstrooiing.",
		radarCalibrationDesc: "Deze functie kan worden gebruikt voor het kalibreren van RADARSAT-2-beelden in een mozaïekdataset of als een rasterproduct. Kalibratie wordt uitgevoerd op radarbeelden, zodat de pixelwaarden een getrouwe weergave zijn van de terugverstrooiing van de radar.",
		rasterInfoName: "RasterInfo",
		rasterInfoSnip: "Wijzigt eigenschappen van het raster, zoals bitdiepte, NoData-waarde, celgrootte, enzovoort.",
		rasterInfoDesc: "De Rasterinfo opent een dialoogvenster met eigenschappen van rasterdata, zoals het aantal kolommen en rijen, het aantal banden, het pixeltype, de omvang en de ruimtelijke referentie. U kunt deze eigenschappen bewerken door een rasterdataset te selecteren die u als template kunt gebruiken. ",
		rasterizeAttributesName: "Attributen rasteren",
		rasterizeAttributesSnip: "Verrijkt een raster door extra banden die zijn afgeleid van waarden van gespecificeerde attributen van een externe tabel of een objectservice.",
		rasterizeAttributesDesc: "De functie Attributen rasteren verrijkt een raster door banden toe te voegen die zijn afgeleid van waarden van gespecificeerde attributen, van een externe tabel of een objectservice. U kunt optioneel een zoneraster en het bijbehorende kenmerk voor zone-ID opgeven om zoeken op basis van regio's in te schakelen.",
		rasterizeFeatureClassName: "Objecten rasteren",
		rasterizeFeatureClassSnip: "Converteert objecten naar raster.",
		rasterizeFeatureClassDesc: "Met deze functie worden polygoon-, polylijn- en puntobjectklassedata geconverteerd naar een rasterlaag.<div><br/>Aan objecten worden pixelwaarden toegewezen op basis van OBJECTID van de objecten (standaard). Optioneel kunnen de pixelwaarden worden gebaseerd op een veld met door de gebruiker gedefinieerde waarden in de attribuuttabel van het invoerobject.</div>",
		recastName: "Herschikken",
		recastSnip: "Wijzigt de parameters van een functieketen in een mozaïekdataset of beeldservice. Dit wordt vaak gebruikt met LAS-datasets om te voorkomen dat een afzonderlijke mozaïekdataset moet worden gemaakt voor verschillende weergaven van het terrein.",
		recastDesc: "De functie Herschikken wordt gebruikt om de functieparameter die in een mozaïekdataset of beeldservice wordt gebruikt, dynamisch te wijzigen zonder de wijzigingen fysiek aan te houden.",
		regionGroupName: "Regiogroep",
		regionGroupSnip: "Voor elke cel in de uitvoer wordt de identificatie geregistreerd van het aangesloten gebied waartoe die cel behoort. Aan elke regio wordt een uniek nummer toegewezen.",
		regionGroupDesc: "De globale functie van de Regiogroep registreert voor elke cel in de uitvoer de identificatie van het aangesloten gebied waartoe die cel behoort. Aan elke regio wordt een uniek nummer toegewezen.<div><br/>Het eerste gescande gebied krijgt waarde één, de tweede twee, enzovoort, totdat aan alle gebieden een waarde is toegewezen. De scan beweegt van links naar rechts en van boven naar beneden. De waarden die zijn toegewezen aan de uitvoerzones zijn gebaseerd op wanneer ze worden gevonden tijdens het scanproces.</div>",
		regionGrowName: "Regiogroei",
		regionGrowSnip: "Laat regio's groeien vanaf beginpunten.",
		regionGrowDesc: "De functie Regiogroep groepeert naburige pixels in groepen, afhankelijk van de opgegeven radius vanaf het beginpunt. Aan de groep pixels of objecten wordt een opgegeven vulwaarde toegewezen.",
		remapName: "Remap",
		remapSnip: "Wijzigt pixelwaarden door nieuwe waarden toe te wijzen aan bereiken van pixelwaarden of door een externe tabel te gebruiken.",
		remapDesc: "Met de functie Remap kunt u de pixelwaarden wijzigen of herindelen van de rastergegevens. Dit kan worden gedaan door een bereik van pixelwaarden op te geven om aan een uitvoerpixelwaarde toe te wijzen, of door een tabel te gebruiken om de pixelwaarden toe te wijzen aan de uitvoerpixelwaarde.",
		reprojectName: "Herprojecteren",
		reprojectSnip: "Wijzigt de projectie van een rasterdataset, mozaïekdataset of rasteritem in een mozaïekdataset. Het kan ook de gegevens resamplen naar een nieuwe celgrootte en een oorsprong definiëren.",
		reprojectDesc: "De functie Opnieuw projecteren wijzigt de projectie van een rasterdataset, mozaïekdataset of rasteritem in een mozaïekdataset. Het kan ook de gegevens resamplen naar een nieuwe celgrootte en een oorsprong definiëren.<div><br/>De functie Opnieuw projecteren kan worden gebruikt bij het maken van een cache uit een raster- of mozaïekdataset die zich niet in de vereiste projectie bevindt. Als u bijvoorbeeld een gecachte imageservice maakt die mogelijk wordt geïntegreerd door toepassingen met andere cachediensten, is het belangrijk dat ze allemaal in dezelfde projectie zijn. Dit is vaak een Web Mercator-projectie. Omdat de mozaïekdataset niet opnieuw kan worden geprojecteerd, kunt u twee dingen doen—u kunt een gemarkeerde mozaïekdataset maken van uw mozaïekdataset in de benodigde projectie, of de functie Opnieuw projecteren toevoegen aan de functieketen van de mozaïekdataset. Een ander voorbeeld gebruikt deze functie op het rasteritem in een mozaïekdataset. Als u de functie Raster in cache gebruikt, wilt u mogelijk de functie Herprojecten invoegen, zodat de cache in de nieuwe projectie wordt gemaakt. Rasteritems in een mozaïekdataset kunnen in de cache worden opgeslagen wanneer de verwerking intensief is en u een snelle imageservice wilt publiceren, zonder de volledige imageservice in cache op te slaan.</div>",
		resampleName: "Resample",
		resampleSnip: "Verandert de celgrootte van een raster.",
		resampleDesc: "De functie Resample wijzigt de celgrootte, het resampletype of beide.<div><br/>De functie Resample mag alleen worden gebruikt met specifieke computervereisten; bijvoorbeeld wanneer u de wind of de huidige magnituderichting berekent waarvoor resampling vanuit de bronresolutie nodig is.</div>",
		roundDownName: "Naar beneden afronden",
		roundDownSnip: "Retourneert de volgende lagere gehele waarde, net voorgesteld als een zwevend punt, voor elke cel in een raster.",
		roundDownDesc: "De functie Naar beneden afronden retourneert het volgende lagere gehele getal, als zwevende puntwaarde, voor elke pixel in een raster.",
		roundUpName: "Naar boven afronden",
		roundUpSnip: "Retourneert de volgende hogere gehele waarde, net voorgesteld als een zwevend punt, voor elke cel in een raster.",
		roundUpDesc: "Naar beneden afronden retourneert het volgende hogere gehele getal, als zwevende puntwaarde, voor elke pixel in een raster.",
		segmentMeanShiftName: "Segment Mean Shift",
		segmentMeanShiftSnip: "Groepeer aangrenzende pixels met vergelijkbare spectrale kenmerken samen in segmenten.",
		segmentMeanShiftDesc: "Met deze functie identificeert u voorwerpen, objecten of segmenten in uw afbeeldingen door aangrenzende pixels samen te voegen die vergelijkbare spectrale en ruimtelijke kenmerken hebben. U kunt de hoeveelheid ruimtelijke en spectrale afvlakking regelen om zo interessante kenmerken af te leiden.",
		s1RadiometricCalibrationName: "Sentinel-1 Radiometrische kalibratie",
		s1RadiometricCalibrationSnip: "Voert verschillende soorten radiometrische kalibratie uit op Sentinel-1-data.",
		s1RadiometricCalibrationDesc: "Deze rasterfunctie voert drie verschillende kalibraties uit voor Sentinel 1-datasets, inclusief bèta-nul en gamma, en voert de gekalibreerde dataset uit. Het doel van de SAR-kalibratie is satellietbeelden te bieden waarin pixelwaarden direct kunnen worden gerelateerd aan de radarterugverstrooiing van de scene. Hoewel niet-gekalibreerde SAR-satellietbeelden voldoende zijn voor een kwalitatief gebruik, zijn gekalibreerde SAR-beelden essentieel voor het kwantitatieve gebruik van SAR-data.<div><br/>Typische SAR-dataverwerking, die beelden van niveau 1 produceert, omvat geen radiometrische correcties en significante radiometrische gemiddelde afwijkingen. Daarom is het noodzakelijk om radiometrische correctie toe te passen op SAR-beelden, zodat de pixelwaarden van de afbeeldingen echt de terugverstrooiing van de radar van het reflecterende oppervlak weergeven. Radiometrische correctie is ook nodig voor de vergelijking van SAR-beelden die met verschillende sensoren zijn verkregen of met dezelfde sensor op verschillende tijdstippen, in verschillende modi of door verschillende processors zijn verwerkt.</div>",
		s1ThermalNoiseRemovalName: "Sentinel-1 thermische ruis verwijderen",
		s1ThermalNoiseRemovalSnip: "Verwijdert thermische ruis uit Sentinel-1-data.",
		s1ThermalNoiseRemovalDesc: "Thermische ruiscorrectie kan worden toegepast op Sentinel-1 Level-1 Single Look Complex (SLC)-producten, evenals Level-1 Ground Range Detection (GRD)-producten die nog niet zijn gecorrigeerd. De operator kan deze correctie ook verwijderen op basis van de productannotaties om het ruissignaal dat werd verwijderd opnieuw in te voeren om het originele product te produceren. Productannotaties worden overeenkomstig bijgewerkt om de correctie opnieuw toe te passen. ",
		setNullName: "Null instellen",
		setNullSnip: "Null instellen stelt de geïdentificeerde cellocaties in op NoData, op basis van de specifieke criteria. Het retourneert NoData als de voorwaardelijke evaluatie waar is en retourneert de waarde gespecificeerd door een ander raster als het onwaar is.",
		setNullDesc: "De functie Null instellen stelt de geïdentificeerde pixels in op NoData, op basis van de specifieke criteria. Het retourneert NoData als de voorwaardelijke evaluatie waar is (1) of retourneert de waarde gespecificeerd in het onware raster als de voorwaardelijke evaluatie onwaar is (0). Dit criterium wordt gespecificeerd door de uitvoer van een logische rekenkundige functie, die het invoerraster zal zijn.",
		shadedReliefName: "Shaded Relief",
		shadedReliefSnip: "Creëert een multiband, kleurgecodeerde 3D-weergave van het oppervlak, waarbij de relatieve positie van de zon in aanmerking wordt genomen voor het verduisteren van het beeld.",
		shadedReliefDesc: "De functie Shaded Relief creëert een 3D-weergave in kleur van het terrein door de beelden van de hoogtecodering en de reliëfschaduwmethoden samen te voegen. Deze functie gebruikt de hoogte- en azimutheigenschappen om de positie van de zon te bepalen.<div><br/></div>",
		sinHName: "SinH",
		sinHSnip: "Berekent de hyperbole sinus van cellen in een raster.",
		sinHDesc: "De functie berekent de hyperbole sinus van de pixels in een raster.",
		sinName: "Sin",
		sinSnip: "Berekent de sinus van cellen in een raster.",
		sinDesc: "De functie berekent de sinus van de pixels in een raster.",
		slopeName: "Helling",
		slopeSnip: "Berekent de veranderingssnelheid van één pixelwaarde naar zijn buren.",
		slopeDesc: "Deze rasterfunctie berekent de helling en geeft de mate van verandering in de hoogte weer voor elke pixel van het digitaal elevatiemodel (DEM). Het is de eerste afgeleide van een DEM.<div><br/>Deze functie gebruikt een versnelde atan()-functie. Het is zes keer sneller en de benaderingsfout is altijd minder dan 0,3 graden.</div>",
		speckleName: "Spikkel",
		speckleSnip: "Biedt filters om de ruis weg te nemen van radardatsets van synthetische apertuur.",
		speckleDesc: "Spikkel is de hoogfrequente ruis op radargegevens. De afbeeldingen gegenereerd door synthetische apertuurradar (SAR)-systemen zijn sterk onderhevig aan spikkeleffecten door de verwerking van verstrooide signalen en interferentie van elektromagnetische golven die worden verstrooid van oppervlakken of objecten. Deze Spikkel-functie filtert de gespikkelde radardataset en effent de ruis met behoud van de randen of scherpe objecten in de afbeelding.",
		spectralConversionName: "Spectrale conversie",
		spectralConversionSnip: "Past een matrix toe op een multiband-afbeelding.",
		spectralConversionDesc: "De functie Spectrale conversie past een matrix toe op een multiband-afbeelding om de kleurwaarden van de uitvoer te beïnvloeden.<div><br/>Sommige sensoren verzamelen geen blauwe banden vanwege een lage verhouding tussen signaal en ruis. Dit kan bijvoorbeeld worden gebruikt om een infraroodbeeld met valse kleuren om te zetten in een meer natuurlijke kleurenafbeelding.</div>",
		squareRootName: "Vierkantswortel",
		squareRootSnip: "Berekent de vierkantswortel van de cellen in een raster.",
		squareRootDesc: "De functie Vierkantswortel berekent de vierkantswortel van de pixelwaarden in een raster.",
		squareName: "Vierkant",
		squareSnip: "Berekent het vierkant van de cellen in een raster.",
		squareDesc: "De functie Vierkant berekent het vierkant van de pixelwaarden in een raster.",
		statisticsHistogramName: "Statistieken en histogram",
		statisticsHistogramSnip: "Statistieken en histogram definiëren of koppelen.",
		statisticsHistogramDesc: "De functie Statistieken en histogram wordt gebruikt om de statistieken en het histogram van een raster te definiëren. U kunt deze functie aan het einde van de functieketen invoegen om de statistieken en het histogram van een raster function template (RFT) te beschrijven. Dit kan nodig zijn om de standaardweergave van het verwerkingsresultaat te regelen, vooral bij het definiëren van een functieketen die veel functies bevat.<div><br/>U kunt statistieken definiëren door de waarden in te voeren of te importeren uit een rasterdataset of een XML-bestand. Histogrammen kunnen alleen worden gedefinieerd door een bestand te importeren.</div>",
		statisticsName: "Statistieken",
		statisticsSnip: "Berekent focale statistieken voor elke pixel van een afbeelding op basis van een gedefinieerde focale buurt.",
		statisticsDesc: "De functie Statistieken berekent focale statistieken voor elke pixel van een afbeelding op basis van een gedefinieerde focale buurt.<div><br/>De functie Statistieken kan worden gebruikt om gedropte lijnen in een afbeelding te vullen. Gedropte lijnen worden vaak veroorzaakt door problemen in de sensor waar geen data wordt verzameld. Dit is gebeurd in sensoren zoals Landsat 7's Enhanced Thematic Mapper Plus (ETM+). Deze ontbrekende gegevens veroorzaken problemen voor de analyse en ook bij het bekijken van de afbeeldingen. Er is weinig dat kan worden gedaan wanneer de beelden worden gebruikt voor analyse; als er echter een overlappende afbeelding is, kan deze worden gebruikt in plaats van de ontbrekende inhoud. Hetzelfde kan worden gedaan als de afbeelding wordt gebruikt voor visualisatie. Er is echter niet altijd een extra afbeelding om de ontbrekende inhoud in te vullen, dus deze moet worden afgeleid van de bestaande gegevens.</div>",
		streamLinkName: "Stream Link",
		streamLinkSnip: "Wijst unieke waarden toe aan secties van een raster-lineair netwerk tussen kruispunten.",
		streamLinkDesc: "De globale functie Stream Link wijst unieke waarden toe aan secties van een raster-lineair netwerk tussen kruispunten.<div><br/>Links zijn de secties van een stroomkanaal dat twee opeenvolgende kruispunten verbindt, een kruispunt en de uitvoer of een kruispunt en de afvoerkloof. In de hydrologie worden deze streamsegmenten bereiken genoemd. Een kruispunt is gerelateerd aan een stortpunt en helpt bij het afbakenen van een stroomgebied of drainagebekkengrens.</div>",
		stretchName: "Uitrekken",
		stretchSnip: "Verbetert een afbeelding door het weergegeven waardebereik aan te passen. Dit verandert niets aan de onderliggende pixelwaarden. Als een pixel een waarde buiten het opgegeven bereik heeft, wordt deze weergegeven als de minimum- of maximumwaarde.",
		stretchDesc: "De functie Uitrekken verbetert een afbeelding door eigenschappen zoals helderheid, contrast en gamma te wijzigen door middel van meerdere uittrektypes. Deze functie gebruikt de statistieken van de rasters binnen de mozaïekdataset; daarom moet u als u deze functie gebruikt ervoor zorgen dat de statistieken zijn berekend.<div><br/>Het uitrektype definieert een histogramrek die op de rasters wordt toegepast om hun uiterlijk te verbeteren. Uitrekken verbetert de weergave van de data door de pixelwaarden langs een histogram te verspreiden van de minimum- en maximumwaarden die worden gedefinieerd door hun bitdiepte. </div>",
		swathName: "Swath",
		swathSnip: "Interpoleert van onregelmatige rasters of swath-data.",
		swathDesc: "Sommige netCDF- of HDF-datasets slaan hun geolocatie op als onregelmatig verdeelde rijen. Bij het toevoegen van deze datasets aan een mozaïekdataset, neemt de functie swath de onregelmatig gerasterde gegevens op en herverzamelt deze zodat elke pixel een uniforme grootte heeft en vierkant is.<div><br/>Bij het toevoegen van variabelen uit netCDF of HDF aan een mozaïekdataset, wordt automatisch gecontroleerd of de gegevens regelmatig worden gerangschikt. Als dat niet het geval is, wordt de functie swath automatisch toegepast om het onregelmatige raster om te zetten in punten en vervolgens naar een rooster dat regelmatig wordt gerasterd. U kunt de interpolatiemethode en de celgrootte wijzigen die worden gebruikt in de swath raster-functie. Voor rasterdata op regelmatige afstanden wordt geen interpolatie toegepast en worden de gegevens gelezen zoals ze zijn.</div>",
		tanHName: "TanH",
		tanHSnip: "Berekent de hyperbole tangens van cellen in een raster.",
		tanHDesc: "De functie berekent de hyperbole tangens van de pixels in een raster.",
		tanName: "Tan",
		tanSnip: "Berekent de tangens van cellen in een raster.",
		tanDesc: "De functie berekent de tangens van de pixels in een raster. ",
		tasseledCapName: "Tasseled Cap (Kauth-Thomas)",
		tasseledCapSnip: "Berekent niveaus van vegetatie, natheid en helderheid. Deze techniek is gebaseerd op coëfficiënten die specifiek voor een sensor moeten worden berekend.",
		tasseledCapDesc: "De Tasseled Cap (Kauth-Thomas) transformatie is ontworpen voor het analyseren en in kaart brengen van vegetatiefenomenen en veranderingen in stedelijke ontwikkeling gedetecteerd door verschillende satellietsensorsystemen. Het staat bekend als de Tasseled Cap-transformatie vanwege de vorm van de grafische distributie van data. De transformatie biedt een rationale voor de patronen gevonden in Landsat MSS-data van landbouwvelden als een functie van de levenscyclus van het gewas. Omdat de gewassen groeien van zaad tot volwassenheid, is er een netto toename van nabij-infrarood en een afname van de rode reflectie op basis van de kleur van de grond<div><br/>Het nut van deze transformatie is uitgebreid van het monitoren van gewassen tot het analyseren en in kaart brengen van vegetatie om verschillende toepassingen te ondersteunen, zoals bosbouw, industrieel vegetatiemanagement, het in kaart brengen en beheren van ecosystemen, inventarisatie en monitoring voor het sekwestreren van koolstof en credits, stedelijke ontwikkeling en meer. Het is ook uitgebreid van ondersteunende Landsat MSS naar andere populaire satellietsystemen zoals Landsat TM, Landsat ETM+, Landsat 8, IKONOS, QuickBird, WorldView-2 en RapidEye multispectrale sensoren.</div>",
		timesName: "Aantal keer",
		timesSnip: "Vermenigvuldigt de waarden van twee rasters op een cel-voor-cel basis.",
		timesDesc: "De functie Vermenigvuldig verdeelt de waarden van twee rasters op een pixel-voor-pixel basis.",
		transposeBitsName: "Transpose Bits",
		transposeBitsSnip: "Pakt de bits van de invoerpixel uit en kent ze toe aan specifieke bits in de uitvoerpixel. Het doel van deze functie is om bits van een aantal ingangen te manipuleren, zoals de Landsat 8-kwaliteitsbandproducten.",
		transposeBitsDesc: "De functie Transpose Bit pakt de bits van de invoerpixel uit en kent ze toe aan specifieke bits in de uitvoerpixel. Het doel van deze functie is om bits van een aantal ingangen te manipuleren, zoals de Landsat 8-kwaliteitsbandproducten.",
		unitConversionName: "Eenheidsconversie",
		unitConversionSnip: "Verandert waarden van de ene meeteenheid naar de andere.",
		unitConversionDesc: "Deze functie converteert pixels van de ene eenheid naar de andere. Het ondersteunt de conversie van afstand, snelheid en temperatuur.",
		vectorFieldName: "Vectorveld",
		vectorFieldSnip: "Geeft datasets weer met zowel magnitude (u) als richting (v) als pijlen waarbij magnitude wordt weergegeven door de grootte en de richting wordt weergegeven door de hoek van de pijl.",
		vectorFieldDesc: "De functie Vectorveld wordt gebruikt om twee rasters samen te stellen en om te zetten in een tweeband raster van het datatype Magnitude-Direction of datatype U-V.<div><br/>De U-waarde wordt soms de zonale snelheid genoemd en de V-waarde wordt soms de meridionale snelheid genoemd.</div>",
		viewshed2Name: "Viewshed",
		viewshed2Snip: "Bepaalt de rasteroppervlaklocaties die zichtbaar zijn voor een aantal waarnemerobjecten met behulp van geodetische methoden.",
		viewshed2Desc: "De functie Viewshed bepaalt de rasteroppervlaklocaties die zichtbaar zijn voor een aantal waarnemerobjecten met behulp van geodetische methoden<div><br/>De zichtbaarheid van elk pixelcentrum wordt bepaald door een gezichtslijntest tussen het doel en elke waarnemer. Als een waarnemer het doel in het midden van de pixel kan zien, wordt de pixel als zichtbaar beschouwd. Deze tool houdt altijd rekening met de kromming van de aarde wanneer de zichtbaarheid wordt bepaald.</div>",
		watershedName: "Watershed",
		watershedSnip: "Bepaalt het bijdragende gebied boven een set cellen in een raster.",
		watershedDesc: "De globale functie Stroomgebied bepaalt het bijdragende gebied boven een set pixels in een raster. Stroomgebieden zijn afgebakend van een stroomrichtingraster dat de stroomrichting van elke pixel identificeert.",
		weightedOverlayName: "Gewogen overlapping",
		weightedOverlaySnip: "Overlapt verschillende rasters met behulp van een gemeenschappelijke meetschaal en weegt elk op basis van het belang ervan.",
		weightedOverlayDesc: "Met deze functie kunt u verschillende rasters over elkaar leggen met behulp van een gemeenschappelijke meetschaal en elk wegen op basis van het belang ervan.",
		weightedSumName: "Gewogen som",
		weightedSumSnip: "Weegt en voegt een reeks rasters toe op een cel-voor-cel basis.",
		weightedSumDesc: "Met de functie Gewogen som kunt u verschillende rasters over elkaar leggen en ze vermenigvuldigen met het opgegeven gewicht en ze optellen.",
		windchillName: "Gevoelstemperatuur",
		windchillSnip: "Combineert omgevingsluchttemperatuur en windsnelheid om de factor gevoelstemperatuur te berekenen.",
		windchillDesc: "De functie Gevoelstemperatuur is handig voor het identificeren van gevaarlijke winteromstandigheden die, afhankelijk van de blootstelling aan de weersomstandigheden, kunnen resulteren in bevriezing of zelfs onderkoeling. Gevoelstemperatuur is een manier om te meten hoe koud iemand het zal hebben als rekening wordt gehouden met al koude temperaturen. Hoe sneller de windsnelheid, hoe sneller het lichaam warmte verliest en hoe kouder men het krijgt.",
		zonalRemapName: "Opnieuw toewijzen op basis van zones",
		zonalRemapSnip: "Pixels in een raster opnieuw toewijzen op basis van zones die zijn gedefinieerd in een ander raster en zoneafhankelijke waardetoewijzing die in een tabel is gedefinieerd.",
		zonalRemapDesc: "Met deze functie kunt u pixels in een raster opnieuw toewijzen op basis van zones die zijn gedefinieerd in een ander raster en zoneafhankelijke waardetoewijzing die in een tabel is vastgelegd.",
		zonalStatisticsName: "Gebiedsstatistieken",
		zonalStatisticsSnip: "Berekent statistieken over waarden van een raster in de zones van een andere dataset.",
		zonalStatisticsDesc: "De functie berekent statistieken over waarden van een raster in de zones van een andere dataset. Een zone is gedefinieerd als alle gebieden in de invoer die dezelfde waarde hebben. Deze gebieden hoeven niet aaneengesloten te zijn. Als de zone- en waarde-invoer beide rasters zijn met dezelfde resolutie, worden ze direct gebruikt. Als de resoluties anders zijn, wordt een interne resampling toegepast om de resoluties overeen te laten komen voordat de zonebewerking wordt uitgevoerd.",
		flowLengthName: "Stromingslengte",
		flowLengthSnip: "Berekent de stroomopwaartse of stroomafwaartse afstand, of gewogen afstand, langs het stromingstraject voor elke cel.",
		flowLengthDesc: "Dit is een globale rasterfunctie. Deze functie creëert een rasterlaag van stroomopwaartse of stroomafwaartse afstand, of gewogen afstand, langs het stromingstraject voor elke cel.<div><br/>Een primaire toepassing van de functie Stromingslengte is het berekenen van de lengte van het langste stromingstraject binnen een bepaald bekken. Deze maat wordt vaak gebruikt om de concentratietijd van een bekken te berekenen. Dit wordt gedaan met de optie Stroomopwaarts. De functie kan ook worden gebruikt om afstandsdiagrammen te maken van hypothetische neerslag en afvloeiingen met behulp van het gewichtenraster als een belemmering voor een neerwaartse beweging.</div>",
		streamOrderName: "Stromingsvolgorde",
		streamOrderSnip: "Wijst een numerieke volgorde toe aan segmenten van een raster die takken van een lineair netwerk voorstellen",
		streamOrderDesc: "Dit is een globale rasterfunctie. Deze functie creëert een rasterlaag die een numerieke volgorde toekent aan segmenten van een raster die aftakkingen van een lineair netwerk voorstellen.<div><br/>De output van de functie Stromingsvolgorde zal van hogere kwaliteit zijn als de input van de stroommrasterlaag en de input stromingsrichting van de rasterlaag worden van hetzelfde oppervlak afgeleid. Als het stroomraster is afgeleid van een gerasterde stroomdataset, dan is de output mogelijk niet bruikbaar, omdat de richting op celbasis niet zal overeenkomen met de locatie van de stroomcellen. De resultaten van de functie Stroomaccumulatie kunnen worden gebruikt om een rasterstroomnetwerk te creëren door een drempelwaarde toe te passen voor het selecteren van cellen met een hoge geaccumuleerde stroom. Zo worden bijvoorbeeld cellen met meer dan 100 cellen gebruikt om het stroomnet te definiëren. Gebruik de Con- of Set Null-functie om een stroomnetwerkraster te maken waarbij stroomaccumulatiewaarden van 100 of meer naar één raster gaan en de rest naar de achtergrond wordt geplaatst (NoData). Het resulterende stroomnetwerk kan worden gebruikt in de functie Stromingsvolgorde. Deze functie ondersteunt alleen een D8-invoerstroomrichtingrasterlaag. D8-stromingsrichtingen kunnen met behulp van de functie Stroomrichting worden aangemaakt en met de standaardstroomrichting type D8 worden uitgevoerd.</div>",
		snapPourPointName: "Stortpunt koppelen",
		snapPourPointSnip: "Koppelt stortpunten aan de cel met de hoogste stroomaccumulatie binnen een bepaalde afstand",
		snapPourPointDesc: "Dit is een globale rasterfunctie. Deze functie koppelt stortpunten aan de cel van de hoogste stroomaccumulatie binnen een bepaalde afstand.<div><br/>De functie Stortpunten koppelen wordt gebruikt om de selectie van punten met een hoge geaccumuleerde stroming te garanderen bij het afbakenen van afwateringsbekkens met behulp van de functie Stroomgebied. Stortpunten koppelen zoekt binnen een korte afstand rond de gespecificeerde stortpunten voor de cel met de hoogste geaccumuleerde stroming en verplaatst het stortpunt naar die locatie. De uitgang is een gehele rasterlaag wanneer de oorspronkelijke stortlocaties zijn gekoppeld aan locaties met een hogere geaccumuleerde stroming.</div>",
		sinkName: "Basin",
		sinkSnip: "Creëert een raster dat alle putten of gebieden van interne drainage identificeert",
		sinkDesc: "Dit is een globale rasterfunctie. Deze functie creëert een rasterlaag die alle basins of gebieden van interne drainage identificeert. Een put is een cel of set van ruimtelijk verbonden cellen met een stroomrichting die niet kan worden toegewezen aan één van de acht geldige waarden in een stromingsrichtingraster. Dit kan gebeuren wanneer alle aangrenzende cellen hoger zijn dan de verwerkende cel of wanneer twee cellen in elkaar vloeien, waardoor een tweecellenlus ontstaat.<div><br/>De functie Put ondersteunt alleen een D8-ingangstromingsrichting rasterlaag. D8-stromingsrichtingen kunnen met behulp van de functie Stroomrichting worden aangemaakt en met de standaardstroomrichting type D8 worden uitgevoerd. De uitgang van de functie Put is een geheel raster, waarbij aan elke put een unieke waarde wordt toegekend. Deze unieke waarden hebben een bereik dat ligt tussen één en het totale aantal putten. Als het totaal aantal putten bijvoorbeeld 1000 is, variëren de unieke waarden van 1 tot 1000.</div>",
		aggregateName: "Aggregeren",
		aggregateSnip: "Genereert een versie met een verkleinde resolutie van een raster.",
		aggregateDesc: "De functie Aggregeren herstelt een invoerraster naar een grovere resolutie op basis van een gespecificeerde aggregatiestrategie. Elke uitvoercel bevat de som, het minimum, het maximum, het gemiddelde of de mediaan van de invoercellen die door de omvang van die cel worden bestreken.<div><br/>U kunt de factor opgeven waarmee de celgrootte van het invoerraster vermenigvuldigd moet worden. Bijvoorbeeld, een celfactorwaarde van 3 zou resulteren in een uitvoer waarbij de celgrootte drie keer groter is dan die van het invoerraster. U kunt bepalen hoe de omvang van de uitvoer moet worden verwerkt als het aantal rijen of kolommen in de invoer geen exacte veelvoud is van de celfactor. Standaard worden de boven- en rechtergrenzen uitgebreid tot een grotere ruimtelijke omvang dan die van het invoerraster, zodat alle invoercellen worden verwerkt. Als alternatief kunnen de boven- en rechtergrenzen worden gereduceerd tot een kleiner aantal rijen en kolommen, zodat het aantal verwerkte rijen en kolommen een exacte veelvoud is van de celfactor. U kunt bepalen hoe NoData-cellen moeten worden behandeld door de aggregatieberekening. In het standaardmechanisme worden NoData-cellen die in de ruimtelijke omvang van een grotere cel in het uitvoerraster vallen genegeerd bij het bepalen van de waarde van die uitvoercel. Als alternatief kunt u opgeven dat als er ook maar één enkele invoer NoData-cel binnen de ruimtelijke omvang van een uitvoercel is, die cel NoData in het uitvoerraster zal zijn.</div>",
		ccdcName: "CCDC-analyse",
		ccdcSnip: "Evalueert veranderingen in pixelwaarden in de loop van de tijd met behulp van het Continuous Change Detection and Classification (CCDC)-algoritme en genereert modelresultaten.",
		ccdcDesc: "De CCDC-analysefunctie evalueert veranderingen in pixelwaarden na verloop van tijd met behulp van het Continuous Change Detection and Classification (CCDC)-algoritme en genereert een multidimensionaal raster dat de modelresultaten bevat. Het wordt alleen ondersteund in combinatie met de functie 'Detect Change Using Change Analysis' in een rasterfunctietemplate. Om een rasteruitvoer te produceren, verbindt u de CCDC-analysefunctie met de functie Detect Change Using Change Analysis-functie, slaat u op als een rasterfunctietemplate en voert u Rasteranalyse uit met de functietemplate.<div><br/>Deze functie maakt gebruik van het Continuous Change Detection and Classification (CCDC)-algoritme om veranderingen in de pixelwaarden in de loop van de tijd te evalueren voor meerdere afbeeldingen. In een tijdreeks van optische beelden of beeldderivaten (bijvoorbeeld NDVI) kunnen pixelwaarden om verschillende redenen fluctueren: 1. Seizoensverandering -- Pixelwaardeveranderingen weerspiegelen veranderingen in de vegetatie als gevolg van seizoensgebonden variaties in temperatuur en neerslag. Op het noordelijk halfrond verwachten we bijvoorbeeld in de zomer een hogere dichtheid van de groene vegetatie te zien dan in de winter; 2. Geleidelijke verandering -- Pixelwaardeveranderingen weerspiegelen trends in de vegetatie of het oppervlaktewater als gevolg van klimaatvariabiliteit of landbeheer op lange termijn. Zo kan bijvoorbeeld de kale grond geleidelijk aan toenemen als gevolg van een langdurige daling van de neerslag; en 3. Abrupte verandering -- Pixelwaardeveranderingen weerspiegelen veranderingen in de landbedekking die plotseling optreden als gevolg van ontbossing, stedelijke ontwikkeling, natuurrampen, enzovoort. Het CCDC-algoritme identificeert alle drie de veranderingstypes met als hoofddoel het identificeren van abrupte veranderingen. Harmonische regressie- en trendmodellen zijn afgestemd op de data om seizoensgebonden en geleidelijke veranderingen in te schatten. Plotselinge afwijkingen van de trendmodellen zijn aanwijzingen voor abrupte veranderingen.<div><br/>Het CCDC-algoritme is oorspronkelijk ontworpen voor Landsat TM, Landsat ETM+ en Landsat OLI data Surface Reflectance of Brightness Temperature data. . Maar de functie Verandering detecteren met behulp van veranderingsanalyse in combinatie met deze functie detecteert veranderingen voor multibandbeelden van elke ondersteunde sensor, evenals van afzonderlijke bandbeeldderivaten, zoals bandindexen. U kunt bijvoorbeeld een continue veranderingsdetectie uitvoeren op een Normalize Difference Vegetation Index (NDVI) raster, omdat abrupte veranderingen in NDVI indicatief kunnen zijn voor ontbossing.</div>",
		computeChangeName: "Verandering berekenen",
		computeChangeSnip: "Berekent het verschil tussen twee categorische of continue rasterdatasets.",
		computeChangeDesc: "De functie \"Verandering berekenen\" kan worden gebruikt om de verschillen tussen twee geclassificeerde rasters op te sommen voor de analyse van landbedekkingsverandering of het kan worden gebruikt om veranderingen tussen twee single-band continu rasters te onderzoeken, zoals hoogte, temperatuur, bladerbedekking, enzovoort.",
		detectChangeName: "Verandering detecteren met behulp van veranderingsanalyse",
		detectChangeSnip: "Genereert een rasterlaag met informatie over pixelveranderingen met behulp van het uitvoer veranderingsanalyseraster.",
		detectChangeDesc: "<div>De functie Verandering detecteren met behulp van veranderingsanalyse genereert een rasterlaag met informatie over pixelveranderingen met behulp van het uitvoerraster voor de analyse van veranderingen. Het veranderingsanalyseraster moet worden gegenereerd door de tool Veranderingen analyseren met behulp van CCDC of de tool Veranderingen analyseren met behulp van de LandTrendr of de CCDC-analyserasterfunctie of de rasterfunctie LandTrendr-analyse.</div><br><div>Deze rasterfunctie kan worden gecombineerd met de CCDC analyse rasterfunctie of de rasterfunctie van de LandTrendr-analyse in een rasterobject. Om een permanente rasteruitvoer te produceren verbindt u de CCDC-analyse of LandTrendr-analyse uitvoer met de functie Veranderen met behulp van Wijzigingsanalyse, slaat u op als een rasterfunctietemplate en voert u Rasteranalyse uit met de template.</div><br><div>De parameter<strong>Type Wijzigen</strong> geeft de informatie aan die wordt gegenereerd. De informatie wordt gehaald uit het veranderingsanalyseraster. Wanneer u deze functie op de uitvoer van de CCDC-functie/tool uitvoert, kunt u kiezen uit de volgende opties:</div><ul><li><strong>Tijdstip van laatste wijziging</strong>--de meest recente datum en tijd waarop een pixel is gemarkeerd als zijnde gewijzigd.</li><li><strong>Tijdstip van vroegste wijziging</strong>--de vroegste datum en tijd waarop een pixel is gemarkeerd als zijnde gewijzigd.</li><li><strong>Tijdstip van grootste wijziging</strong>--de datum en tijd waarop de berekende wijziging het meest significant was voor een pixel.</li><li> <strong>Aantal wijzigingen</strong>--Het totale aantal keren dat de pixel is gewijzigd.</li></ul><div>Bij het uitvoeren van deze functie op de uitvoer van de LandTrendr-functie/tool zijn de volgende extra opties beschikbaar:</div><ul><li><strong>Tijdstip van langste wijziging</strong>--Het tijdstip waarop een pixel is gemarkeerd als zijnde gewijzigd, aan het begin of einde van de langste periode van wijziging.</li><li><strong>Tijdstip van kortste wijziging</strong>--Het tijdstip waarop een pixel is gemarkeerd als zijnde gewijzigd, aan het begin of einde van de kortste periode van wijziging.</li><li><strong>Tijdstip van snelste wijziging</strong>--de datum waarop een pixel als gewijzigd is gemarkeerd, aan het begin of einde van de snelste veranderingsperiode.</li><li><strong>Tijdstip van langzaamste wijziging</strong>--de datum waarop een pixel als gewijzigd is gemarkeerd, aan het begin of einde van de langzaamste veranderingsperiode.</li></ul><div>Het uitvoerraster is een multibandraster waarin elke band wijzigingsinformatie bevat, afhankelijk van het geselecteerde wijzigingstype en het maximale aantal wijzigingen dat is gespecificeerd. Als bijvoorbeeld <strong>Type wijzigen</strong> is ingesteld op <strong>Tijd vroegste verandering</strong> en <strong>Maximum aantal veranderingen</strong> is ingesteld op 2, berekent de functie voor elke pixel de twee vroegste data waarop de verandering zich in de gehele tijdreeks heeft voorgedaan. Het resultaat is een raster waarin de eerste band de data van de vroegste verandering per pixel bevat, en de tweede band de data van de op één na oudste verandering per pixel.</div><br><div>Wanneer u deze functie toepast op de uitvoer van de LandTrendr tools, kunt u kiezen of u de datum die het begin van een verandering markeert of het einde van een verandering extraheert met behulp van de parameter <strong>Segmentdatum</strong> . Om bijvoorbeeld te begrijpen hoe de meest recente verandering in de tijdreeks begon, stelt u de <strong>Veranderingstype</strong> in op <strong>Tijdstip van de laatste verandering</strong> en de <strong>Segmentdatum</strong> tot <strong>Begin van het segment</strong>.</div><br><div>Gebruik de volgende filterparameters om meer specifieke wijzigingsdatums uit uw wijzigingsanalyseraster te halen:</div><ul><li><strong>Filter op jaar</strong>--Identificeer wijzigingen die binnen een bepaalde tijdsperiode zijn opgetreden, bijvoorbeeld als u op zoek bent naar wijzigingen die zijn opgetreden in een landschap gedurende vijf jaar droogte.</li><li><strong>Filter op duur</strong>--Identificeer wijzigingen die zijn opgetreden gedurende een bepaalde tijdspanne, bijvoorbeeld als u alleen op zoek bent naar abrupte wijzigingen die zijn opgetreden gedurende 1 of 2 jaar. U kunt de duur die u interesseert berekenen aan de hand van de formule <strong>eindjaar - beginjaar +1</strong>. Hiaten in de tijdreeks zullen worden opgenomen.</li><li><strong>Filter op grootte</strong>--Identificeer veranderingen van een bepaalde grootte, bijvoorbeeld als u alleen op zoek bent naar grote veranderingen in de vegetatie-index NDVI. De grootte is een absolute waarde, dus de minimum- en maximumwaarde kunnen niet negatief zijn. Gebruik de parameter <strong>Richting veranderen</strong> om een richtingsverandering aan te geven</li></ul>",
		distanceAccumulationName: "Afstandsaccumulatie",
		distanceAccumulationSnip: "Berekent de verzamelde afstand voor elke cel naar de bronnen met mogelijkheid tot lineaire afstand, kostenafstand, afstand daadwerkelijk oppervlak alsmede verticale en horizontale kostenfactoren.",
		distanceAccumulationDesc: "Afstandsaccumulatie berekent de afstand tot elke locatie in het onderzoeksgebied tot de dichtstbijzijnde, of goedkoopste, bron. Als alleen de bronnen voor de invoer zijn voorzien, dan wordt een rechte afstand berekend tot elke locatie in het onderzoeksgebied. Als beide bronnen en barrières als invoer worden gebruikt, dan berekent Afstandsaccumulatie de lineaire afstand rond de barrières. Voor zowel de bron- als de barrièreraster moet de achtergrondwaarde NoData zijn, terwijl bronnen en barrières met geldige celwaarden worden weergegeven. Geldige waarden bevatten nul. <div><br/>Wanneer een oppervlakteraster als invoer wordt geleverd, dan wordt de werkelijke oppervlakteafstand tussen de cellen berekend. Voor het uitvoeren van een kostenanalyse met behulp van Afstandsaccumulatie is een kostenoppervlak nodig. Als er een kostenoppervlak wordt voorzien, dan is het resultaat een geaccumuleerd kostenafstandsraster. Wanneer horizontale en verticale factoren worden geleverd, dan wordt de directionaliteit geaccumuleerd als kosten. Er zijn vier bronkenmerken die kunnen worden gebruikt. Deze kenmerken, die zowel van de bron als van de verplaatsers van de bron kunnen zijn, worden gecontroleerd door specifieke parameters: 1. De initiële accumulatie: stelt de initiële kosten in voordat de verplaatsing begint. 2. Maximale accumulatie: specificeert hoeveel kosten een bron kan accumuleren voordat hij zijn limiet bereikt. 3. Vermenigvuldigingsfactor voor de kosten: specificeert de wijze van reizen of de grootte bij de bron. 4. Reisrichting: identificeert of de verplaatser begint bij een bron en zich verplaatst naar niet-bronlocaties, of, begint bij niet-bronlocaties en zich terug verplaatst naar een bron.<div><br/>Standaard is het resultaat van Afstandsaccumulatie een enkele band, dat is het afstandsaccumulatieraster. Er kan echter ook een tweede band worden gecreëerd, de band terugweg. Deze band geeft vanuit elke locatie in het onderzoeksgebied aan in welke richting je moet gaan om de goedkoopste bron te bereiken. Beide banden zijn nodig om optimale paden binnen het onderzoeksgebied te bepalen. Gebruik om een pad te genereren eerst de functie Band extraheren om het raster afstandsaccumulatie en het raster terugweg te extraheren. Gebruik deze lagen als invoer voor de functie Kostenpad. Gebruik in deze functie het raster afstandsaccumulatie als de invoer Raster afstand kosten en het raster terugweg als de invoer Raster terugkoppeling kosten.</div>",
		distanceAllocationName: "Afstandtoewijzing",
		distanceAllocationSnip: "Berekent de afstandstoewijzing voor elke cel tot de gegeven bronnen op basis van de lineaire afstand, kostenafstand, daadwerkelijke oppervlakte-afstand en verticale en horizontale kostenfactoren.",
		distanceAllocationDesc: "Afstandstoewijzing berekent aan welke bron elke locatie in het onderzoeksgebied wordt toegewezen. Als alleen de bronnen zijn voorzien voor de invoer, dan worden de locaties toegewezen met behulp van een lineaire afstand tot de dichtstbijzijnde bron. Als beide bronnen en barrières als invoer worden gebruikt, dan berekent Afstandtoewijzing de lineaire afstand rond barrières om te bepalen aan welke bron een locatie wordt toegewezen. Voor zowel de bron- als de barrièreraster moet de achtergrondwaarde NoData zijn, terwijl bronnen en barrières met geldige celwaarden worden weergegeven. Geldige waarden bevatten nul.<div><br/>Voor het uitvoeren van een kostenanalyse met behulp van Afstandtoewijzing is een kostenoppervlak nodig. Als er een kostenoppervlak wordt opgegeven, dan is het resultaat een verdeelraster op basis van de cumulatieve kosten, niet op basis van de lineaire afstand. Wanneer horizontale en verticale factoren worden geleverd, dan wordt de directionaliteit geaccumuleerd als kosten. Wanneer er een oppervlakteraster wordt geleverd als invoer, dan wordt bij de bepaling van de allocatie de werkelijke oppervlakteafstand berekend die wordt afgelegd tussen de cellen. Er zijn vier bronkenmerken die kunnen worden gebruikt. Deze kenmerken, die zowel van de bron als van de verplaatsers van de bron kunnen zijn, worden gecontroleerd door specifieke parameters: 1. Initiële accumulatie: stelt de initiële kosten in voordat de verplaatsing begint. 2. Maximale accumulatie: specificeert hoeveel kosten een bron kan accumuleren voordat hij zijn limiet bereikt. 3. Vermenigvuldigingsfactor voor de kosten: specificeert de wijze van reizen of de grootte bij de bron. 4. Reisrichting: identificeert of de verplaatser begint bij een bron en zich verplaatst naar niet-bronlocaties, of, begint bij niet-bronlocaties en zich terug verplaatst naar een bron.<div><br/>Standaard is het resultaat van Afstandstoewijzing een enkele band, dat is het afstandstoewijzingsraster. Het aanvinken van de Booleaanse optie Genereer bronrij en kolom als extra banden in de uitvoer zal resulteren in een multibandraster bestaande uit drie banden. De eerste band is de afstandtoewijzingsband, de tweede band bevat een rijindex en de derde band bevat een kolomindex. Deze indexen identificeren de locatie van de broncel die de minst geaccumuleerde kostenafstand is. De bronrij-index en de bronkolomindex kunnen samen worden gebruikt om de intensiteit in kaart te brengen. Als u een locatie in uw onderzoeksgebied over de banden twee en drie bevraagt, weet u de rij en de kolom van de laagste kostenbron voor die locatie.</div>",
		eucBackDirectionName: "Euclidische terugweg",
		eucBackDirectionSnip: "Berekent voor elke cel de richting, in graden, naar de naburige cel langs het kortste pad terug naar de dichtstbijzijnde bron, terwijl barrières worden vermeden.",
		eucBackDirectionDesc: "De Euclidische terugweg resulteert in een continu drijfpuntraster dat de richting in graden terug naar de dichtstbijzijnde bron weergeeft, terwijl barrières worden vermeden, als er barrières worden aangebracht.<div><br/>De ingangen naar Euclidische terugweg zijn de bron waarvoor de richting wordt berekend. Een optionele invoer is een raster dat barrières binnen het onderzoeksgebied vertegenwoordigt. Voor zowel de bron- als de barrièreraster moet de achtergrondwaarde NoData zijn, terwijl bronnen en barrières met geldige waarden worden weergegeven. Geldige waarden bevatten nul. Standaard verwerkt de berekening de gecombineerde omvang van de bronnen en barrières, plus 2 rijen en kolommen. Als de analyse alleen nodig is binnen een bepaalde afstand van de bronnen, dan kan de parameter Maximale afstand worden gebruikt. Euclidische terugweg ondersteunt zowel een Planaire methode als een Geodetische methode in de berekening. De berekening Planaire methode wordt uitgevoerd op een geprojecteerd plat vlak met behulp van een 2D Cartesiaans coördinatensysteem. De berekening van de geodetische methode wordt uitgevoerd op de ellipsoïde, wat betekent dat de resultaten, ongeacht de in- of uitvoerprojectie, niet veranderen.<div><br/>Het resultaat van de functie Euclidische terugweg kan samen met het resultaat van de functie Euclidische afstand worden gebruikt om de kortste paden van locaties binnen het onderzoeksgebied terug naar de bron te bepalen. Zowel het resultaat van de Euclidische terugweg als het resultaat van de Euclidische afstand worden in de functie Kostenpad gebruikt, samen met de bestemmingen om de kortste paden te genereren.</div>",
		expandName: "Uitklappen",
		expandSnip: "Klapt geselecteerde zones van een raster uit met een bepaald aantal cellen.",
		expandDesc: "Met de functie Uitklappen kunt u rasters veralgemenen of vereenvoudigen door bepaalde zones groter te maken. U kunt ook de hoeveelheid veralgemening die zal optreden controleren.<div><br/>De zones die u selecteert, worden groter door uitbreiding naar andere zones. Conceptueel kunnen de geselecteerde zonewaarden worden gezien als voorgrondzones, terwijl de andere waarden achtergrondzones blijven. De voorgrondzones kunnen zich uitbreiden naar de achtergrondzones.<div><br/>De hoeveelheid generalisatie kan worden geregeld met de parameter Aantal cellen. Standaard is deze waarde 1, wat betekent dat de geselecteerde zones zich uitbreiden in een matie die overeenkomt met de grootte van een cel. Om de mate van generalisatie te verhogen, kunt u een grotere waarde voor deze parameter opgeven. Conceptueel is dit als het uitvoeren van de tool zo vaak als het opgegeven aantal, waarbij de resultaten van de vorige run de input zijn voor de volgende iteratie.</div>",
		trendAnalysisName: "Trend genereren",
		trendAnalysisSnip: "Schat de trend voor elke pixel in een afmeting voor een of meerdere variabelen in een multidimensionaal raster.",
		trendAnalysisDesc: "<div>Deze functie kan worden gebruikt om gegevens langs een lineaire, harmonische of polynomiale trendlijn te plaatsen, of het kan worden gebruikt om trenddetectie uit te voeren met behulp van de Mann-Kendall of Seasonal-Kendall test.</div><br><div>Het uitvoertrendraster dat met deze functie wordt gegenereerd, wordt gebruikt als input voor de <strong>Predict Using Trend</strong> functie.</div><br><div>De Mann-Kendall en Seasonal-Kendall tests worden gebruikt om te bepalen of er een monotone trend in de gegevens zit. Ze zijn niet-parametrisch, wat betekent dat ze niet uitgaan van een specifieke verdeling van gegevens. De Mann-Kendall test houdt geen rekening met seriële correlatie of seizoensgebonden effecten. Als de gegevens seizoensgebonden zijn, is de Seasonal-Kendall-test geschikter.</div><br><div>Als de tool wordt gebruikt om de Mann-Kendall- of Seasonal-Kendall-test uit te voeren, is de output een vijfbanden-raster als volgt:</div><ul><li>Band 1 = Sen's slope</li><li>Band 2 = p-waarde</li><li>Band 3 = Mann-Kendall score (S)</li><li>Band 4 = S Variance</li><li>Band 4 = S Variance</li><li>Band 5 = Z-score</li></ul><div>De output van de Mann-Kendall of Seasonal-Kendall test kan worden gebruikt om te bepalen welke pixels in uw multidimensionale tijdreeksen een statistisch significante trend hebben. U kunt deze informatie gebruiken in combinatie met de lineaire, harmonische of polynomiale trendanalyse om significante trends in uw tijdreeksen te extraheren. U kunt een masker inclusief pixels met significante p-waarden genereren, het masker op het multidimensionale raster toepassen en dit gemaskerde multidimensionale raster gebruiken als input voor de tool om een lineaire, harmonische of polynomiale trendanalyse uit te voeren.</div><br><div>Er zijn drie trendlijnopties voor het aanpassen van een trend aan de variabele waarden langs een dimensie: lineair, polynomiaal en harmonisch.</div><br><div>Voor de lineaire trendanalyse is de output een drie-bands raster als volgt:</div><ul><li>Band 1 = Helling</li><li>Band 2 = Onderscheppen</li><li>Band 3 = Root Mean Square Error (RMSE) of de fout rond de best passende lijn</li></ul><div>Voor polynomiale trendanalyse is het aantal banden in de uitgang afhankelijk van de polynomiale volgorde. Tweede-orde polynomiale montage produceert een vier-bands raster als volgt:</div><ul><li>Band 1 = Polynomiaal_2</li><li>Band 2 = Polynomiaal_1</li><li>Band 3 = Polynomiaal_0</li><li>Band 4 = RMSE</li></ul><div>Polynomiaal beslag van derde orde produceert een vijfbandsraster als volgt:</div><ul><li>Band 1 = Polynomiaal_3</li><li>Band 2 = Polynomiaal_2</li><li>Band 3 = Polynomiaal_1</li><li>Band 4 = Polynomiaal_0</li><li>Band 5 = RMSE</li></ul><div>Voor de harmonische trendanalyse is het aantal banden in de uitgang afhankelijk van de harmonische frequentie. Wanneer de frequentie op 1 staat, is de uitgang een vijfbandsraster als volgt:</div><ul><li>Band 1 = Slope</li><li>Band 2 = Intercept</li><li>Band 3 = Harmonic_sin1</li><li>Band 4 = Harmonic_cos1</li><li>Band 5 = RMSE</li></ul><div>Wanneer de frequentie op 2 is ingesteld, is de uitgang een zevenbandsraster als volgt:</div><ul><li>Band 1 = Slope</li><li>Band 2 = Intercept</li><li>Band 3 = Harmonic_sin1</li><li>Band 4 = Harmonic_sin2</li><li>Band 5 = Harmonic_sin2</li><li>Band 6 = Harmonic_cos2</li><li>Band 7 = RMSE</li></ul><div>De parameter <strong>Lengte van de cyclus</strong> voor de analyse van harmonische trends wordt gebruikt om het aantal en de lengte van de cycli aan te geven die u gedurende een dag of een jaar in uw gegevens verwacht te zien. Als u bijvoorbeeld verwacht dat uw gegevens twee variatiecycli in een jaar zullen doorlopen, zal de lengte van de cyclus 182,5 dagen of 0,5 jaar zijn. Als er om de drie uur temperatuurgegevens worden verzameld en er is één variatiecyclus per dag, dan is de lengte van de cyclus één dag.</div><br><div>De parameter <strong>Frequentie</strong> voor de analyse van harmonische tendensen wordt gebruikt om het harmonische model te beschrijven dat bij de gegevens past. Als de frequentie op 1 wordt ingesteld, wordt een combinatie van lineaire en de harmonische curve van de eerste volgorde gebruikt om het model te passen. Als de frequentie 2 is, zal een combinatie van lineaire, eerste volgorde harmonische curve, en tweede volgorde harmonische curve worden gebruikt om de gegevens aan te passen. Als de frequentie 3 is, wordt een extra harmonische curve van de derde volgorde gebruikt om de gegevens te modelleren, enzovoort.</div><br><div>Model goodness-of-fit statistieken kunnen gegenereerd worden als optionele outputs. De root mean-square error (RMSE), R-kwadraat en de trendhelling p-waarde kunnen worden berekend en gesymboliseerd. Symboliseer de uitvoertrendrasterlaag met behulp van de <strong>RGB</strong> symbologie en specificeer de statistieken als de rode, groene en blauwe banden</div><br>",
		spectralUnmixingName: "Lineaire spectrale ontmenging",
		spectralUnmixingSnip: "Voert subpixelclassificatie uit en berekent de fractionele overvloed aan verschillende landbedekkingstypes voor individuele pixels.",
		spectralUnmixingDesc: "De functie Lineaire spectrale ontmenging berekent de fractionele dekking voor individuele pixels die meerdere landbedekkingstypes bevatten. Het genereert een multibandlaag, waarbij elke band overeenkomt met de fractionele overvloed van elke landbedekkingsklasse. U kunt het bijvoorbeeld gebruiken om een landbedekkingsclassificatie uit te voeren op een multispectraal beeld om fotosynthetische vegetatie, kale grond en dode of niet-fotosynthetische vegetatie te identificeren.<div><br/>De volgorde van het uitvoermultibandraster volgt de volgorde van de invoer spectraal profiel. Het aantal klassen mag niet groter zijn dan het aantal banden in het invoerraster. U kunt bijvoorbeeld geen informatie over meer dan 8 klassen uit een 8-bands raster halen.</div>",
		multidimensionalFilterName: "Multidimensionale filter",
		interpolateRasterByDimensionFunctionName: "Raster interpoleren op afmeting",
		interpolateRasterByDimensionFunctionSnip: "Interpoleert een multidimensionaal raster met opgegeven dimensiewaarden, gebruik makend van aangrenzende slices.",
		interpolateRasterByDimensionFunctionDesc: "<p>Deze functie stelt u ertoe in staat pixelwaarden te schatten voor een ongedefinieerde dimensieslice in een multidimensionaal raster. Als u bijvoorbeeld een gegevensset hebt die de oceaantemperatuur aan het oppervlak en die op 100 meter onder zeeniveau bevat en de temperatuur op 50 meter onder zeeniveau wilt schatten, kunt u deze functie gebruiken om een schatting voor die diepte te krijgen met behulp van de dimensiedefinitie By Values (Op waarden).</p><p>U kunt ook een maandelijkse gegevensset downsamplen naar een dagelijkse gegevenset via de dimensiedefinitie By Interval (Op interval) en het opgeven van de Stap-parameterwaarde als 1 en de Eenheid-parameter als dagen.</p><p>Gebruik de dimensiedefinitie By Target Raster (Op doelraster) om de waarde voor het doelraster te schatten.</p>",
		multidimensionalFilterSnip: "Maakt een rasterlaag van een multidimensionale rasterdataset of een multidimensionale rasterlaag door data in stukjes op te delen aan de hand van gedefinieerde variabelen en afmetingen.",
		multidimensionalFilterDesc: "Het Multidimensionale filter creëert een multidimensionale rasterlaag door een subset van variabelen uit een multidimensionaal raster te filteren en te extraheren. U hebt bijvoorbeeld een multidimensionale dataset die 30 jaar aan maandelijkse neerslaggegevens bevat, en u wilt alleen gegevens voor elke januari extraheren om te zien hoe de neerslag voor die maand is veranderd.<div><br/>Gebruik de parameter Dimensiedefinitie om dimensies te snijden met behulp van een interval, een waarde of een reeks van waarden. Als u bijvoorbeeld over 10 jaar gegevens over het zeezoutgehalte beschikt, die maandelijks worden verzameld en op zowel 2 meter diepte als op 500 meter, kunt u voor de volgende scenario's gebruik maken van de verschillende dimensioneringsopties. Scenario 1: Extraheer de zoutgehaltegegevens voor de maand januari over de periode van 10 jaar. Kies Op waarden, stel Dimensie in op StdTijd en stel Waarden in op Januari. Scenario 2: Verdeel de zoutgehaltegegevens over een dieptebereik van 0 tot 150 meter. Kies op Op bereik, stel Dimensie in op StdZ en stel Minimumwaarde in op -150 en Maximumwaarde op 0. Scenario 3: Extraheer de zoutgehaltegegevens voor de eerste 10 dagen van elke januari over een periode van 10 jaar. Kies Per iteratie, stel Dimensie in op StdTime, stel Start van de eerste iteratie en Einde van de eerste iteratie in op het overeenkomstige begin en einde van de iteratieperiode, stel Stap in op 1, en stel Eenheid in op Jaren.</div>",
		multidimensionalRasterName: "Multidimensionaal raster",
		multidimensionalRasterSnip: "Voegt multidimensionale gegevens toe aan een kaart als een multidimensionale rasterlaag.",
		multidimensionalRasterDesc: "De functie Multidimensionaal raster voegt multidimensionale gegevens toe aan een kaart als een multidimensionale rasterlaag. Deze functie is nuttig bij het uitvoeren van rasteranalyses met behulp van een functieketen.<div><br/>Ondersteunde multidimensionale rasterdatasets zijn onder andere netCDF, GRIB, HDF en Esri's CRF. Multidimensionale mosaic datasets worden ook ondersteund.</div>",
		optimalPathAsRasterName: "Optimaal pad als raster",
		optimalPathAsRasterSnip: "Berekent het pad met de minste kosten van een bron naar een bestemming.",
		optimalPathAsRasterDesc: "Deze globale functie produceert een uitvoerraster waarmee het optimale pad of paden van geselecteerde locaties naar de dichtstbijzijnde broncel worden vastgelegd binnen het geaccumuleerde kostenoppervlak, in termen van kostenafstand.<div><br/>Een of meer van de gewogen kostenfuncties (Afstandsaccumulatie of Afstandtoewijzing) moeten over het algemeen worden uitgevoerd voordat de functie Optimaal pad als raster worden uitgevoerd om de input afstandsaccumulatie en terugwegrasters te creëren. Dit zijn verplichte invoerrasterlagen voor de functie Optimaal pad. De waarden op de uitvoer optimaal pad geven het aantal paden op een bepaalde locatie weer. In veel gevallen volgen de paden dezelfde route, waarbij een bron wordt verlaten en vervolgens wordt afgeweken om naar verschillende bestemmingen te gaan. Zo geeft een waarde van één aan dat er op een bepaalde locatie slechts één optimaal pad is, terwijl een waarde van vijf betekent dat er op die locatie vijf optimale paden door die cel in het onderzoeksgebied lopen.<div><br/>De ingevoerde bestemmingsgegevens moeten een rasterlaag zijn. De set bestemmingscellen bestaat uit alle cellen in het invoerraster die geldige waarden hebben. Cellen die NoData waarden hebben zijn niet in de set opgenomen. De waarde nul wordt beschouwd als een legitieme bestemming. Een bestemmingsraster kan worden gemaakt met behulp van de extractietools. Als u bestemmings- of bronobjecten heeft, kunt u deze met behulp van de Rasterize Features-functie omzetten naar een raster. Gebruik de afstandaccumulatie of de raster terugweg als de rasterinvoer voor de functie rasterisatie. Dit zorgt ervoor dat de functie wordt gerasterd met behulp van dezelfde celgrootte, omvang en ruimtelijke referentie als de andere rasters die in de functie Optimaal pad als raster gaan. De functie Optimaal pad als raster kan ook worden gebruikt om de weg van de minste weerstand af te leiden langs een digitaal hoogtemodel (DEM). Gebruik in dit geval de DEM voor het accumulatieraster invoerafstabden de uitgang van de functie Stroomrichting voor het raster terugweg.</div>",
		trendName: "Voorspellen met behulp van trends",
		trendSnip: "Berekent een voorspeld multidimensionaal raster met behulp van het uitgevoerde trendraster van de functie Trend genereren of de geoprocessingtool Trendraster genereren.",
		trendDesc: "De functie Voorspellen met behulp van trends berekent een voorspelde multidimensionale rasterlaag met behulp van het uitvoertrendraster van de functie Trend genereren of de geoprocessingtool Trendraster genereren.",
		rasterCollectionName: "Rastercollectie verzamelen",
		rasterCollectionSnip: "Verwerkt elk stukje in een multidimensionaal raster of elk item in een mozaïekraster. Deze functie kan ook meerdere stukjes samenvoegen tot één stukje.",
		rasterCollectionDesc: "De functie Rastercollectie verzamelen verwerkt elke stukje in een multidimensionaal raster of elk item in een mozaïekraster. Deze functie kan ook meerdere stukjes samenvoegen tot één stukje.<div><br/>Deze functie verwerkt elk stukje in een multidimensionaal raster of mozaïekraster met behulp van een rasterfunctietemplate. Deze functie ondersteunt de volgende opties: 1. Specificeer een rasterfunctietemplate voor Itemfunctie. U hebt bijvoorbeeld een mozaïekdataset met 20 jaar Landsat-beelden en u wilt de NDVI voor elke scene in de tijdreeks berekenen. Specificeer voor Itemfunctie een rasterfunctietemplate die de NDVI rasterfunctie bevat. 2. Specificeer een rasterfunctietemplate voor de functie Aggregatie. U hebt bijvoorbeeld een multidimensionaal raster dat 10 jaar dagelijkse temperatuurgegevens bevat en u wilt de maximale temperatuur voor elk jaar berekenen. Geef in de functie Aggregatie een template op voor een rasterfunctietemplate op die de functie Celstatistieken bevat, waarbij de bewerking is ingesteld op Maximum. Stel onder de definitie Aggregatie de Dimensie in op StdTijd, stel Type in op Interval trefwoord en stel de Trefwoord Interval in op Jaarlijks. Houd er rekening mee dat als de invoermozaïek dataset niet multidimensionaal is, de aggregatiefunctie de aggregatiedefinitie niet zal honoreren. De aggregatiefunctie zal alle items of elke groep samenvoegen tot één als ze zijn gedefinieerd in de template van de aggregatiefunctie. Voor meer informatie over het gebruik van groepen in een mozaïekdataset, zie Mozaïekdataset-items gebruiken in Rasterfunctietemplates. 3. Specificeer een rasterfunctietemplate voor de functie Verwerking. De functie of functieketen in deze template wordt gebruikt om het nieuwe verwerkte raster weer te geven. Specificeer bijvoorbeeld een rasterfunctietemplate die de functie Kleurenkaart bevat om te wijzigen hoe de verwerkte rasterlaag wordt weergegeven. Houd er rekening mee dat als de invoer een multidimensionaal raster is, de verwerkingsfunctie wordt toegepast op het huidige stukje. Als de invoer een mozaïeklaag of mozaïekdataset is, wordt de verwerkingsfunctie toegepast op het mozaïekraster met behulp van de eerste methode om overlappingen op te lossen. 3. Specificeer templates voor elke combinatie van de drie functies. U hebt bijvoorbeeld een mozaïekdataset met tijdreeksen Landsat-beelden en u wilt een compositiefoto van maximaal NDVI genereren. Specificeer voor Itemfunctie een rasterfunctietemplate die de NDVI rasterfunctie bevat. Geef voor de functie Aggregatie een template op voor een rasterfunctietemplate op die de functie Celstatistieken bevat, waarbij de bewerking is ingesteld op Maximum. Specificeer voor de verwerkingsfunctie een rasterfunctietemplate die de functie Kleurenkaart bevat. Zorg dat de volgorde van de functieverwerking de volgorde van de invoerparameters volgt. Zo zal bijvoorbeeld de Itemfunctie als eerste worden verwerkt.</div>",
		randomName: "Willekeurig",
		randomSnip: "Creëert een raster met willekeurige pixelwaarden die zijn afgeleid van een pseudorandom-verdeling. Verschillende verdelingen en willekeurige nummergeneratoren worden ondersteund.",
		randomDesc: "De functie Willekeurig creëert een raster met willekeurige pixelwaarden dat kan worden gebruikt in rasterfunctietemplates of mozaïekdatasets.<div><br/>Hoewel veel functies werken op een of meer invoerrasters, heeft de functie Willekeurig geen invoerraster nodig. Dit betekent dat het zich meer gedraagt als een rasterdataset dan als een functie, dus er moet bijzondere zorg worden besteed aan het toevoegen aan of verwijderen van de functieketen.</div>",
		shrinkName: "Krimpen",
		shrinkSnip: "Krimpt de geselecteerde zones met een bepaald aantal cellen door ze te vervangen door de waarde van de cel die het meest voorkomt in de buurt.",
		shrinkDesc: "Met de functie Globaal krimpen u rasters veralgemenen of vereenvoudigen door bepaalde zones kleiner te maken. U kunt ook de hoeveelheid veralgemening die zal optreden controleren.<div><br/>De zones die u selecteert zullen krimpen, of kleiner worden, door cellen uit de omliggende zones uit te klappen. Conceptueel kunnen de geselecteerde zonewaarden worden gezien als voorgrondzones, terwijl de andere waarden achtergrondzones blijven. De cellen in de voorgrondzones kunnen worden vervangen door cellen in de achtergrondzones. Dunne eilandjes binnen een zone, die als gedeelde grenzen met de zone kunnen worden beschouwd, kunnen ook worden vervangen.<div><br/>De hoeveelheid generalisatie kan worden geregeld met de parameter Aantal cellen. Standaard is deze waarde 1, wat betekent dat de geselecteerde zones zullen krimpen met de grootte die overeenkomt met de grootte van een cel. Om de mate van generalisatie te verhogen, kunt u een grotere waarde voor deze parameter opgeven. Conceptueel is dit als het uitvoeren van de tool zo vaak als het opgegeven aantal, waarbij de resultaten van de vorige run de input zijn voor de volgende iteratie.</div>",
		trendToRGBName: "Trend naar RGB",
		trendToRGBSnip: "Converteert een trendraster naar driebanden (rood, groen en blauw) raster.",
		trendToRGBDesc: "De functie Trend naar RGB converteert een trendraster naar een driebanden (rood, groen en blauw) raster. De trendraster wordt gegenereerd van de rasterfunctie Trend genereren of de rasterfunctie CCDC-analyse.<div><br/>Deze functie is nuttig voor het visualiseren van modelcoefficiëntiedata van de functie Trend genereren of de functie CCDC-analyse. Beide functies schatten trends in veranderende pixelwaarden in, maar de resultaten van de functies zijn moeilijk direct te interpreteren.<div><br/>Zoals bij veel rasterfuncties is het mogelijk dat u Dynamic Range Adjustment (DRA) moet gebruiken om de resultaten van deze functie beter weer te geven.</div>",
		landTrendrName: "LandTrendr analyse",
		landTrendrSnip: "Evalueert veranderingen in pixelwaarden na verloop van tijd met behulp van de Landsat-based detectie van trends in verstoring en herstel (LandTrendr)- methode en genereert een multidimensionaal raster dat de modelresultaten bevat.",
		landTrendrDesc: "Deze rasterfunctie kan alleen worden gebruikt als invoer voor de rasterfunctie 'Detect Change Using Change Analysis'. Om een rasteruitvoer te genereren, verbindt u de LandTrendr-analysefunctie met de functie Detect Change Using Change Analysis-functie in een rasterfunctietemplate en gebruikt u de template als invoer in de geoprocessingtool Generate Raster From Raster-functie. Het resultaat is een raster met informatie over het tijdstip waarop pixelwaarden zijn gewijzigd.<div><br>Het doel van deze rasterfunctie is om veranderingen in een geobserveerd object te extraheren, dus de ideale multidimensionale invoer moet een consistente observatie door de tijd heen vastleggen en mag geen atmosferische of sensorinterferentie, wolken of wolkenschaduw bevatten. De beste methode is om gegevens te gebruiken die zijn genormaliseerd en kunnen worden gemaskeerd met een QA-band, bijvoorbeeld Landsat Collection 1 Surface Reflectance-producten met een wolkenmasker.<div><br>De functie voert een analyse uit op één afbeelding per jaar en het aantal jaarlijkse stukken moet gelijk zijn aan of groter zijn dan de waarde gespecificeerd in de parameted <strong>Minimaal aantal observaties</strong>. Het wordt aanbevolen om voor minimaal zes jaar aan data te hebben.<div><br>Als u maandelijkse, wekelijkse of dagelijkse data hebt, is het raadzaam om verschillende afbeeldingen van elk jaar te selecteren (bij voorkeur van hetzelfde seizoen), wolken en wolkenschaduw te verwijderen en de afbeeldingen te combineren om een enkele afbeelding te genereren die de waarneming goed vastlegt. Als maandelijkse, wekelijkse of dagelijkse gegevens worden verstrekt als het multidimensionale invoerraster, identificeert de functie één segment voor analyse op basis van de datum die het dichtst bij de datum in de parameter <strong>Snappingdatum</strong>.<div><br>Een object in een landschap heeft vaak tijd nodig om te herstellen van een niet-permanente verandering, zoals een bosbrand of een insectenplaag. Stel de parameter Hersteldrempel in om de herstelsnelheid te regelen die door het model wordt herkend. Een afzonderlijk segment kan geen herstelsnelheid hebben die sneller is dan 1/hersteldrempel.<div><br>Het herstel van een verandering in landschap kan in positieve of negatieve richting plaatsvinden. Wanneer een landschap bijvoorbeeld bosverlies vertoont, laat een tijdreeks van vegetatie-indexwaarden een daling van de indexwaarden zien, en het herstel toont een geleidelijke toename van de vegetatie-indexwaarden of een positieve hersteltrend. Specificeer de richting van de hersteltrend met de parameter <strong>Herstel heeft een stijgende trend</strong>.",
		aggregateMultidimensionalName: "Multidimensionaal aggregeren",
		aggregateMultidimensionalSnip: "Combineert bestaande multidimensionale gegevens van rastervariabelen langs een dimensie.",
		aggregateMultidimensionalDesc: "De functie Multidimensionaal aggregeren creëert een multidimensionale rasterlaag door bestaande multidimensionale rastervariabele gegevens langs een afmeting te combineren.<div><br>Gebruik de <strong>Dimensiedefinitie</strong> parameter om eerst de invoergegevens te filteren die u wenst te aggregeren. Als u bijvoorbeeld 30 jaar aan maandelijkse gegevens hebt, maar u wilt alleen een geaggregeerde laag maken voor de eerste 15 jaar, dan kunt u de parameter <strong>Dimensiedefinitie</strong> gebruiken om de jaren op te geven die u in de analyse wilt opnemen. Extractiegegevens<div><br><ul><li>voor de maand januari over de periode 10 jaar. Kies <strong>Op waarden</strong>, stel <strong>Dimensie</strong> in op <strong>StdTime</strong> en stel <strong>Waarden</strong> in op <strong>januari</strong>.</li><li> Splits zoutgegevens over een diepte van 0 tot 150 meter. Kies <strong>Op bereik</strong>, stel <strong>Dimensie</strong> in op <strong>StdZ</strong> en stel <strong>Minimumwaarde</strong> in op <strong>-150</strong> en <strong>Maximumwaarde</strong> op <strong>0.</strong>.</li><li>Voer zoutgegevens uit voor de eerste 10 dagen van elke januari over een periode van 10 jaar. Kies <strong>Op iteratie</strong> en stel <strong>Dimensie</strong> in op <strong>StdTime</strong>, stel <strong>Start van eerste iteratie</strong> en <strong>Eind van de eerste iteratie</strong> in op het overeenkomende begin en einde van de iteratieperiode, stel <strong>Stap</strong> in op <strong>1</strong> en stel <strong>Eenheid</strong> inop <strong>Jaren</strong>.</li></ul><div><br>Gebruik de parameters <strong>Aggregatiedefinitie</strong> om de afmeting te kiezen om de afmeting te kiezen en het aggregatieinterval met behulp van een trefwoord, een waarde of een reeks waarden. Als u bijvoorbeeld 30 jaar aan gegevens over de zeeoppervlaktetemperatuur hebt, dagelijks verzameld en op elke 5 meter diepte tot 100 meter, kunt u de verschillende intervalopties gebruiken voor de volgende scenario's:<div><br><ul><li>Dagelijkse temperatuurgegevens samenvoegen tot maandelijkse gegevens, waarbij het resultaat een multidimensionaal raster is met 12 tijdschijven, en elke schijf is het totaal van elke maand over alle jaren heen. Kies <strong>Interval trefwoord</strong> en stel het trefwoord in op <strong>Maandelijks terugkerend</strong>.</li><li> Aggereer dagelijkse temperatuurgegevens in maandelijkse gegevens, waarbij het resultaat een multidimensionaal raster is met 360 stukken, of 12 tijdsdelen per jaar (30 jaar x 12 maanden = 360 stukken). Kies <strong>Interval trefwoord</strong> en stel het trefwoord in op <strong>Maandelijks</strong>.</li><li>Aggregeer maandelijkse temperatuurgegevens in intervallen van 4 maanden. Kies <strong>Intervalwaarde</strong>, stel <strong>Waarde-interval</strong> in op 4, en stel <strong>Eenheid</strong> in op <strong>Maanden</strong>.</li><li>Aggregeer temperatuurdata van 0 tot 25 meter, vervolgens van 25 tot 50 meter, vervolgens van 50 tot 100 meter. Kies <strong>Intervalbereiken</strong> en specificeer minimum- en maximale dieptes als <strong>0 25; 25 50; 50 100</strong>.</li></ul>",
		mergeRastersName: "Rasters samenvoegen",
		mergeRastersSnip: "Combineert ruimtelijk meerdere rastergegevenssets of over variabelen en dimensies heen.",
		mergeRastersDesc: "Deze functie maakt een samengevoegd raster uit een lijst met rasters. Als u bijvoorbeeld een mozaïekgegevensset hebt die 30 jaar aan maandelijkse neerslaggegevens bevat en een andere gegevensset met 10 jaar aan maandelijkse temperatuurgegevens, kunt u deze combineren tot een multidimensionaal raster met beide variabelen. <div><br>Als de multidimensionale ingevoerde rasters verschillende variabelen bevatten, zal het multidimensionale uitvoerraster alle variabelen bevatten. <div><br>Als de multidimensionale ingevoerde rasters verschillende dimensies of dimensiewaarden bevatten, zal het multidimensionale outputraster alle dimensies en dimensiewaarden bevatten. <div><br>Als de multidimensionale ingevoerde rasters dezelfde afmetingen en variabelen bevatten, maar verschillende ruimtelijke extensies, zal het multidimensionale outputraster de variabelen en dimensies over de samengevoegde ruimtelijke extensies bevatten.<div><br>Deze functie kan ook worden gebruikt als u meerdere rasters hebt die u als één item, zoals het berekenen van dezelfde statistieken voor iedereen, of bij kleurbalans, zodat u niet elke afbeelding afzonderlijk hoeft te balanceren. Dit is handig wanneer u werkt met afbeeldingen die zijn opgeslagen als afzonderlijke tegels vanwege beperkingen in de bestandsgrootte; op deze manier worden de tegels behandeld als onderdeel van dezelfde afbeelding.",
		boundaryCleanName: "Schone grens",
		boundaryCleanSnip: "Maakt de grens tussen de zones glad.",
		boundaryCleanDesc: "<p>De functie veralgemeent of vereenvoudigt de rasters door de grenzen tussen de zones glad te strijken. De functie biedt mogelijkheden om te controleren hoe de cellen van de zones in de invoer de afvlakking beïnvloeden en de hoeveelheid afvlakking die zal worden toegepast. Elke invoercel wordt geëvalueerd met behulp van zijn acht directe buren.</p><p>Het afvlakkingsproces sorteert de buurcellen eerst op een bepaalde prioriteit. De prioriteit bepaalt welke zone van de aangrenzende cellen de waarde van de verwerkingscel in de uitgang kan vervangen.</p><p>De prioriteit kan gebaseerd zijn op de waarde van de zones of de grootte van de zones. De parameter <strong>Sorteertype</strong> bepaalt het te gebruiken sorteertype. </p><p>De standaardinstelling <strong>Niet sorteren</strong> beoordeelt de prioriteit op basis van de waarde van de zones. Cellen uit zones met grotere waarden hebben een hogere prioriteit om uit te breiden naar zones met kleinere waarden.</p><p>De grootte, of de totale oppervlakte, van de zones kan worden gebruikt om de prioriteit te sorteren. Met de instelling <strong>Aflopend</strong> worden de zones in aflopende volgorde op grootte gesorteerd. De zones met grotere totale oppervlakten zullen de prioriteit hebben om uit te breiden naar zones met kleinere oppervlakten. Met de instelling <strong>Oplopend</strong> is het tegenovergestelde het geval: zones met kleinere totale oppervlakten zullen de prioriteit hebben om uit te breiden naar zones met grotere totale oppervlakten.</p><p>De hoeveelheid afvlakking wordt geregeld door de parameter <strong>Uitzetten en krimpen twee keer uitvoeren</strong> die het aantal keren bepaalt dat het uitzettings- en krimpproces wordt uitgevoerd.</p><p>Met de onaangevinkte instelling wordt het uitzet- en krimpproces één keer uitgevoerd. Met de aangevinkte instelling wordt het uitzet- en krimpproces twee keer uitgevoerd, waardoor de zonegrenzen extra worden gladgestreken.</p><p>Als de waarden van alle acht buurcellen gelijk zijn aan die van de verwerkingscel, behoudt de uitgangscel de waarde van de invoercel.</p>",
		predictUsingRegressionName: "Voorspellen met regressie",
		predictUsingRegressionSnip: "Berekent een voorspeld raster op basis van de invoer van rastergegevens en een regressiemodel. Het regressiemodel is de uitvoer van het raster geoprocessing tool van het<strong>regressiemodel Train Random Trees</strong>.",
		predictUsingRegressionDesc: "<p>Het regressiemodel is gedefinieerd in aan Esri-regressiedefinitiebestand (.ecd). Het bevat alle informatie voor een sepcifieke gegevensset of een set gegevenssets, en het regressiemodel, en wordt gegenereerd door het raster geoprocessing tool van het <strong>regressiemodel Train Random Trees</strong>. </p><p>De input kan een enkele band, een meervoudige band of een multidimensionaal raster zijn, of een lijst van deze types. De types inputrasters moeten van hetzelfde type van het raster dat is aangeleerd door het regressiemodel.</p><ul><li>Wanneer de input een meervoudige band heeft, wordt elke band behandeld als een variabele van een voorspeller. De banden moeten in dezelfde volgorde als de meervoudige band-input zijn voor de trainingtool van het regressiemodel.</li><li>Wanneer de input een multidimensionaal raster is, wordt elke variabele behandeld als de variabele van een voorspeller en moet de variabele een enkele band zijn en een tijddimensie hebben. De volgorde en namen van de variabelen moeten dezelfde zijn als de input wanneer het regressiemodel werd getraind. De output is een multidimensionaal raster.</li><li>De input kan een lijst van items zijn. Het aantal items en de volgorde van de items moeten dezelfde zijn als de input wanneer het regressiemodel werd getraind.</li></ul>",
		dimensionalMovingStatisticsName: "Dimensionale bewegende statistieken",
		dimensionalMovingStatisticsSnip: "Berekent statistieken over een bewegend venster op multidimensionale gegevens langs een gespecificeerde dimensie.",
		dimensionalMovingStatisticsDesc: "<p>De functie Dimensional Moving Statistics berekent diverse statistieken binnen een vooraf gedefinieerd venster voor alle dimensiewaarden binnen een dimensie. Deze functie neemt een multidimensionale rasterlaag als invoer en maakt een multidimensionale rasterlaag, die dezelfde dimensionale grootte heeft als de invoerlaag, als uitvoer.</p><p>U kunt een dimensie opgeven waarvoor dimensiewaarden worden overwogen tijdens berekening. Het berekent standaard langs de eerste niet-ruimtelijke dimensie. U kunt ook een venstergrootte specificeren door de parameters voor het Backward-venster en het Forward-venster te specificeren.</p><p>Wanneer het statistiektype op Percentiel is ingesteld, worden de parameters Percentile Value en Percentile Interpolation Type beschikbaar. U kunt deze parameters gebruiken om respectievelijk het percentiel te specificeren dat moet worden berekend en het interpolatietype te kiezen dat moet worden gebruikt. Wanneer het statistiektype is ingesteld op Circular Mean, wordt de parameter Circular Wrap Value beschikbaar. De circular wrap value wordt gebruikt om een lineaire waarde om te zetten in het bereik van een opgegeven circulair gemiddelde.</p>",
		terrainFlattenFunctionName: "Terrein effenen",
		terrainFlattenFunctionSnip: "Corrigeert de ingevoerde SAR-gegevens (SAR = synthetic aperture radar) voor radiometrische vervormingen als gevolg van topografie.",
		terrainFlattenFunctionDesc: "<p>De rasterfunctie van Terrein effenen corrigeert de ingevoerde SAR-gegevens (SAR = synthetic aperture radar) voor radiometrische vervormingen als gevolg van topografie.</p><p>De ingevoerde radargegevens moeten eerst worden gekalibreerd op beta nul. Gebruik de tool Apply Radiometric Calibration om radargegevens op beta nul te kalibreren.</p><p>Als de ingevoerde DEM niet de volledige SAR-gegevensset omspant, zal de tool GeenData-waarden uitvoeren voor de pixels die buiten de DEM-extent vallen voor gamma nul-, sigma nul-, verstrooiingsgebied- en geometrische vervormingsuitvoer. De tool zal voor het geometrische vervormingsmasker onbepaalde waarden uitvoeren voor pixels die buiten de DEM-extent vallen.</p><p>De ingevoerde DEM moet in het geografisch coördinaatsysteem WGS 1984 (EPSG:4326) vallen.</p>",
		createColorCompositeFunctionName: "Kleurencomposiet maken",
		createColorCompositeFunctionSnip: "Maakt een raster met drie banden uit een multiband-rasterdataset, waarbij elke band een algebraïsche berekening op basis van bandalgebra kan gebruiken.",
		createColorCompositeFunctionDesc: "<p>De rasterfunctie Kleurencomposiet maken maakt een raster met drie banden uit een multiband-rasterdatasetband een algebraïsche berekening op basis van bandalgebra kan gebruiken.</p><p>Wanneer u een bandrekenkundig algoritme definieert, kunt u voor elke uitdrukking een eenregelige algebraïsche formule invoeren om een multiband-uitvoer te creëren. De ondersteunde operators zijn unair, plus (+), min (-), vermenigvuldigen (*) en gedeeld door (/).</p><p>Wanneer u een Band-id in een uitdrukking gebruikt, dient u de band te identificeren door het bandnummer de prefix B of b te geven.</p><p>Een veel voorkomende bandcombinatie die voor SAR (synthetic aperture radar) wordt gebruikt in lineaire eenheden is VV voor rood, VH voor groen en VV/VH voor blauw. Als de invoergegevens in decibel zijn aangegeven, moet de bandcombinatie VV zijn voor rood, VH voor groen en VV-VH voor blauw.</p>",
		surfaceParametersName: "Oppervlakteparameters",
		surfaceParametersSnip: "Bepaalt parameters van een oppervlakteraster zoals aspect, helling, en verschillende soorten krommingen met behulp van geodetische methoden.",
		surfaceParametersDesc: "<p>De functie Oppervlakteparameters bepaalt parameters van een oppervlakteraster zoals aspect, helling en verschillende soorten krommingen met behulp van geodetische methoden.</p><p>Deze functie kan voor de volgende toepassingen worden gebruikt:</p><ul><li>Bereken aspect en helling met behulp van geodetische methoden.</li><li>Berekenen van verschillende soorten krommingen van een ingevoerd oppervlakteraster, bijvoorbeeld <strong>Tangentiële (normale contour) kromming</strong> die de topografische convergentie en divergentie van de stroming over het oppervlak karakteriseert.</li></ul>",
		leastCostCorridorName: "Goedkoopste corridor",
		leastCostCorridorSnip: "Berekent de som van twee cumulatieve kostenafstandrasters met de optie een drempel toe te passen op basis van een percentage of van cumulatieve kosten.",
		leastCostCorridorDesc: "<p>De invoerrasters moeten bestaan uit de afstandsaccumulatie- en terugwegrasteruitvoer uit de functie <strong>Afstandsaccumulatie</strong> of <strong>Afstandstoewijzing</strong>. Deze moeten worden gebaseerd op kostenafstand en dezelfde parameterinstellingen moeten worden gebruikt bij het maken van de lagen voor elke bron. Er mogen bij het maken van deze rasters geen parameters worden gebruikt die gebaseerd zijn op directionaliteit (horizontale factor, verticale factor en reisrichting).</p><p>De waarden in het uitvoercorridorraster zijn de som van de cumulatieve kosten voor het bereiken van een gegeven locatie met dezelfde eenheden als de ingevoerde cumulatieve kostenafstandrasters.</p><p>Als een opgegeven <strong>Drempel</strong>waarde bij het optellen van de twee afstandsaccumulatierasters hoger is dan de maximale cumulatieve kosten, zal het uitvoercorridorraster hetzelfde gebied dekken als de invoeraccumulatierasters.</p><p>Als een opgegeven drempelwaarde lager is dan de minimumwaarde in het corridorraster, wordt een waarschuwing geretourneerd en zal het uitvoerraster leeg zijn.</p><p>Het uitvoercorridorraster kan cellen bevatten die licht hogere cumulatieve kosten hebben dan de drempelwaarde. Dit is afkomstig uit de terugwegrasters die cellen gebruiken waaraan licht hogere kosten zijn toegewezen dan de drempelwaarde om de verbinding tussen losgekoppelde cellen en de corridor te herstellen.</p>",
		geometricMedianName: "Geometrische mediaan",
		geometricMedianSnip: "De functie Geometrische mediaan berekent de geometrische mediaan voor pixels in een tijdreeks van multibandafbeeldingen.",
		geometricMedianDesc: "<p>Deze functie reduceert ruis en uitzonderingen in tijdreeksafbeeldingen door een geometrische mediaan-pixel te berekenen voor elke pixelarray in de afbeeldingsstapel. Het algoritme onderhoudt de specale relaties tussen banden in de pixelspectra, zodat de uitvoer kan worden gebruikt in analyse, zoals vegetatie-indicatoren.</p><p>Wolken en schaduwen moeten met de QA-band voor de gegevensset worden gemaskeerd voordat deze functie wordt toegepast.</p><p>Als de invoerafbeelding een zwevende punt is, zoals een oppervlakreflectie met waarden tussen 0 en 1, zou een epsilonwaarde van 0,001 kwalitatief goede resultaten moeten produceren.</p>"
	},
	rfxArgs: {
		rasterName: "Raster",
		colorSchemeTypeName: "Type kleurenschema",
		colormapName: "Kleurmap",
		colormapNameName: "Naam kleurmap",
		colorRampName: "Kleurverloop",
		contrastOffsetName: "Contrast-offset",
		brightnessOffsetName: "Helderheidscompensatie",
		methodName: "Methode",
		bandNamesName: "Bandnamen",
		bandWavelengthsName: "Band golflengten",
		bandIdsName: "Band ID's",
		missingBandActionName: "Actie Ontbrekende band",
		conversionParametersName: "Conversieparameters",
		hillshadeTypeName: "Type schaduwreliëf",
		azimuthName: "Azimut",
		altitudeName: "Hoogte",
		slopeTypeName: "Schalen",
		zFactorName: "Z-factor",
		PSPowerName: "Vermogen pixelgrootte",
		PSZFactorName: "Factor pixelgrootte",
		removeEdgeEffectName: "Standaardinterpolatie van randpixel deactiveren",
		fromUnitName: "Van unit",
		toUnitName: "Naar unit",
		rasterTypeName: "Type",
		minName: "Uitvoerminimum",
		maxName: "Uitvoermaximum",
		minPercentName: "Minimum van percentclip",
		maxPercentName: "Maximum van percentclip",
		numberOfStandardDeviationName: "Aantal standaardafwijkingen",
		sigmoidStrengthLevelName: "Niveau van de Sigmoid-sterkte",
		estimateStatsHistogramName: "Statistieken schatten",
		DRAName: "Aanpassing van het dynamisch bereik",
		statisticsName: "Statistieken",
		histogramsName: "Histogrammen",
		statisticsHistogramName: "Statistieken en Histogram Definiëren",
		computeGammaName: "Auto Gamma",
		useGammaName: "Gamma gebruiken",
		gammaName: "Gamma",
		inputNamesName: "Namen",
		expressionName: "Expressie",
		cellsizeTypeName: "Type celgrootte",
		extentTypeName: "Extenttype",
		classifierDefinitionFileName: "Invoerdefinitiebestand",
		raster1Name: "Raster1",
		raster2Name: "Raster2",
		raster3Name: "Raster3",
		trueRasterName: "Ware raster",
		falseRasterName: "Onware raster",
		noDataInterpretationName: "NoData-interpretatie",
		noDataValuesName: "NoData-waarden",
		includedRangesName: "Inclusief reeksen",
		curvatureTypeName: "Curvaturetype",
		rastersName: "Rasters",
		attributeTableName: "Tabel",
		attributeTableTypeName: "Tabeltype",
		rowsName: "Aantal rijen",
		columnsName: "Aantal kolommen",
		kernelName: "Kernel",
		mirrorEdgesName: "Spiegelranden",
		influencesName: "Invloeden",
		fieldsName: "Velden",
		remapsName: "Remaptabel",
		evalFromName: "Evaluatieschaal van",
		evalToName: "Evaluatieschaal tot",
		weightsName: "Gewichten",
		DEMName: "DEM",
		shortRangeIDWRadiusName: "Kort bereik IDW Radius",
		maxVoidWidthName: "Max. breedte leegte",
		sigmaGaussianName: "Bewerkelijk Smoothing",
		contourTypeName: "Contourtype",
		zBaseName: "Z-basis",
		numberOfContoursName: "Aantal contouren",
		contourIntervalName: "Contourinterval",
		nthContourLineInBoldName: "Nth contourlijn vet",
		featureClassName: "Invoerobjecten",
		classIndexFieldName: "Veld",
		resolveOverlapMethodName: "Overlapmethode oplossen",
		resamplingTypeName: "Resampling Type",
		inputCellsizeName: "Invoer celgrootte",
		outputCellsizeName: "Uitvoer celgrootte",
		pointFeatureClassName: "Beginpunten",
		maxGrowthRadiusFieldName: "Max groothoekveld",
		similarityThresholdFieldName: "Gelijkwaardigheidsdrempelveld",
		fillValueFieldName: "Vulwaardeveld",
		spectralDetailName: "Spectraal detail [1..20]",
		spatialDetailName: "Spatiaal detail [1..20]",
		minNumPixelsPerSegmentName: "Minimumgrootte van segmenten in pixels",
		boundariesOnlyName: "Enkel grenzen van segmenten",
		statisticsTypeName: "Statistiektype",
		fillNoDataOnlyName: "Enkel NoData-pixels vullen",
		inputDataTypeName: "Invoerdatatype",
		angleReferenceSystemName: "Hoekreferentiesysteem",
		outputDataTypeName: "Uitvoergegevenstype",
		inputSamplePointFeatureClassName: "Invoervoorbeelden",
		valueFieldName: "Waardeveld",
		rasterInfoName: "Rasterinfo",
		interpolationMethodName: "Interpolatiemethode",
		radiusName: "Straal",
		radianceGainValuesName: "Stralingstoename",
		radianceBiasValuesName: "Straling gemiddelde afwijking",
		reflectedGainValuesName: "Reflectiewinst",
		reflectedBiasValuesName: "Reflectievertekening",
		sunElevationName: "Zonelevatie (graden)",
		albedoName: "Albedo",
		scaleFactorName: "Schaalfactor",
		offsetName: "Offset",
		thresholdTypeName: "Drempeltype",
		thresholdsName: "Drempels",
		undefinedClassName: "Ongedefinieerde klasse",
		minValueName: "Min",
		maxValueName: "Max",
		operationName: "Werk",
		clippingTypeName: "Kniptype",
		clippingGeometryName: "Geometrie/raster afknippen",
		extentName: "Uitvoerextent",
		useInputFeatureGeometryName: "Invoerobjecten gebruiken voor het knippen van geometrie",
		remapDefinitionTypeName: "Definitietype opnieuw in kaart brengen",
		inputRangeName: "Invoerbereiken",
		outputValuesName: "Uitvoerwaarden",
		noDataRangeName: "NoData-bereiken",
		inputFieldName: "Invoerveld",
		outputFieldName: "Uitvoerveld",
		inputMaxFieldName: "Maximumveld voor invoer (optioneel)",
		remapTableTypeName: "Tabeltype opnieuw in kaart brengen",
		allowUnmatchedName: "Sta ongeëvenaarde pixelwaarden toe",
		changeMissingValuesToNoDataName: "Ontbrekende waarden veranderen naar NoData",
		visibleBandIDName: "Zichtbare band-ID",
		infraredBandIDName: "Infrarode band-ID",
		scientificOutputName: "Wetenschappelijke uitvoer",
		bandIndexesName: "Bandindexen",
		constantName: "Constante",
		weightName: "Gewicht",
		minimumName: "Minimum",
		maximumName: "Maximum",
		sourceDataName: "Bronraster",
		sourceFieldName: "Bronveld",
		costRasterName: "Kostraster",
		maxDistanceName: "Maximumafstand",
		valueRasterName: "Waarderaster",
		costMultiplierName: "Vermenigvuldigingsfactor om toe te passen op de kosten",
		startCostName: "Kosten starten",
		accumCostResistanceRateName: "Weerstandstempo van accumulatieve kosten",
		capacityName: "Capaciteit",
		travelDirectionName: "Routerichting",
		cellSizeName: "Celgrootte",
		populationFieldName: "Populatieveld",
		areaUnitsName: "Oppervlakte-eenheden",
		outputValueTypeName: "Uitvoercelwaarden",
		barriersName: "Invoerbarrières",
		destinationDataName: "Bestemmingsraster",
		destinationFieldName: "Bestemmingsveld",
		pathTypeName: "Padtype",
		observerFeaturesName: "Observeerderobjecten",
		analysisMethodName: "Analysemethode",
		analysisTypeName: "Analysetype",
		verticalErrorName: "Verticale fout",
		refractivityCoefficientName: "Refractiecoëfficiënt",
		surfaceOffsetName: "Oppervlaktecompensatie",
		observerElevationName: "Observeerderelevatie",
		observerOffsetName: "Observeerdercompensatie",
		innerRadiusName: "Binnenste straal",
		innerRadiusIs3DDistanceName: "Binnenste Radius is 3D-afstand",
		outerRadiusName: "Buitenste straal",
		outerRadiusIs3DDistanceName: "Buitenste Radius is 3D-afstand",
		horizontalStartAngleName: "Horizontale starthoek",
		horizontalEndAngleName: "Horizontale eindhoek",
		verticalUpperAngleName: "Verticale bovenhoek",
		verticalLowerAngleName: "Verticale benedenhoek",
		zoneDataName: "Zoneraster",
		zoneFieldName: "Zoneveld",
		ignoreNoDataName: "NoData negeren in berekeningen",
		temperatureRasterName: "Temperatuurraster",
		inTemperatureUnitsName: "Temperatuureenheden",
		outHeatIndexTemperatureUnitsName: "Warmte-indexeenheden",
		relativeHumidityRasterName: "Raster voor relatieve vochtigheid",
		outWindChillTemperatureUnitsName: "Eenheden voor gevoelstemperatuur",
		windSpeedRasterName: "Windsnelheidsraster",
		inWindSpeedUnitsName: "Windsnelheidseenheden",
		valueName: "Waarde",
		propertyName: "Eigendomsnaam",
		jsonName: "Metadata JSON",
		zoneTableName: "Tabel met zoneattributen",
		attributeFieldNames: "Veldnamen van attributen",
		backgroundName: "Achtergrondwaarde",
		whereClauseName: "Waar-bepaling",
		minimumValueFieldName: "Minimumwaarde voor veldnaam",
		maximumValueFieldName: "Maximumwaarde voor veldnaam",
		outValueFieldName: "Uitvoerwaarde van veldnaam",
		defaultValueName: "Standaarduitvoerwaarde",
		conversionMatrixName: "Conversiematrix",
		IsPseudoColorOutputName: "Is een pseudokleurenuitvoer",
		unmappedAsRandomColorName: "Willekeurig kleur aan niet-toegewezen pixels toewijzen",
		distanceMethodName: "Afstandmethode",
		flowDirRasterName: "Stroomrichting raster",
		pourPointName: "Stortpunt(en) raster",
		pourPointFieldName: "Stortpunt veld",
		constantZName: "Constante Z",
		zOffsetName: "Z Offset",
		geoIdName: "Geoïde",
		calibrationTypeName: "Kalibratietype",
		filterTypeName: "Filtertype",
		filterSizeName: "Filtergrootte",
		noiseModelName: "Noisemodel",
		noiseVarianceName: "Noise-variatie",
		additiveNoiseMeanName: "Gemiddelde toegevoegd noise",
		multiplicativeNoiseMeanName: "Gemiddelde vermenigvuldigd noise",
		numberofLooksName: "Aantal looks",
		dampingFactorName: "Dempingsfactor",
		maskRasterName: "Maskerraster",
		nibbleValuesName: "Gebruik NoData-waarden als ze de naaste buur zijn",
		nibbleNoDataName: "Nibble NoData-cellen",
		zLimitName: "Z Limiet",
		flowDirectionTypeName: "Stroomrichting type",
		weightRasterName: "Gewichtsraster",
		forceEdgeName: "Forceer alle randcellen om naar buiten te stromen",
		streamRasterName: "Stroomraster",
		surfaceRasterName: "Oppervlakraster",
		conversionType: "Conversietype",
		distanceRaster1: "Afstandsraster 1",
		distanceRaster2: "Afstandsraster 2",
		costDistanceRaster: "Kostenafstandraster",
		costBacklinkRaster: "Kostenraster backlink",
		overridesName: "Overschrijden",
		fieldName: "Veld",
		signatureFileOrUrl: "Handtekeningbestand of URL",
		redName: "Rood",
		greenName: "Groen",
		blueName: "Blauw",
		infraredName: "Infrarood",
		panchromaticName: "Panchromatisch",
		multispectralName: "Multispectraal",
		pansharpeningType: "Pansharpening type",
		sensorName: "Sensor",
		spatialReferenceName: "Ruimtelijke referentie",
		xCellsizeName: "X Celgrootte",
		yCellsizeName: "Y Celgrootte",
		xOriginName: "X Registratiepunt",
		yOriginName: "Y Registratiepunt",
		percentileName: "Percentielwaarde",
		neighborhoodType: "Type buurt",
		widthName: "Breedte",
		heightName: "Hoogte",
		startAngleName: "Starthoek",
		endAngleName: "Eindhoek",
		neighborhoodValues: "Buurtwaarden",
		horizontalRaster: "Horizontaal raster",
		horizontalFactor: "Horizontale factor",
		verticalRaster: "Verticaal raster",
		verticalFactor: "Verticale factor",
		streamRaster: "Stroomraster",
		flowDirRaster: "Stroomrichting raster",
		numberNeighborCells: "Aantal buurcellen",
		zoneConnectivity: "Zone-connectiviteit",
		addLinkBehavior: "Voeg koppeling toe",
		excludedValue: "Uitgesloten waarde",
		constantFillCheck: "Genereer opvulraster van constante",
		fillRaster: "Opvulraster",
		constantFillValue: "Constante waarde",
		inputBitPositions: "Invoerbit",
		outputBitPositions: "Uitvoerbit",
		distanceTypeName: "Afstandstype",
		barrierDataName: "Rasterbarrières",
		pourPointDataName: "Stortpuntraster",
		accumulationRasterName: "Stroomaccumulatieraster",
		snapDistanceName: "Snap-afstand",
		orderMethodName: "Andere methode",
		directionMeasurementName: "Richting van meting",
		processAsMultiband: "Verwerken als multiband",
		processMultidimensional: "Verwerken als multidimensionaal",
		forceFlowDirectionConvention: "Forceer stroomrichting naar backlinkraster",
		initialAccumulation: "Initiële accumulatie",
		maximumAccumulation: "Maximale accumulatie",
		sourceLocationBands: "Genereer bronrij en kolom als extra banden in de uitvoer",
		backDirectionBand: "Genereer de terugrichting als extra band in output",
		numberOfCells: "Aantal cellen",
		zoneValues: "Zonewaarden",
		shrinkMethod: "Krimpmethode",
		expandMethod: "Uitvergrootmethode",
		inputSpectralProfileType: "Type spectraal profiel",
		spectralProfileFileName: "Spectraal profiel",
		trainingFeatureFileName: "Opleidingsobject",
		nonNegative: "Niet-negatief",
		sumToOne: "Som op één",
		randomDistribution: "Distributie",
		meanName: "Mediaan",
		probabilityName: "Kans",
		alphaName: "Alpha",
		betaName: "Bèta",
		rName: "r",
		nName: "N",
		seed: "Begin",
		randomNumberGenerator: "Willekeurige nummergeneratie",
		cellFactor: "Celfactor",
		aggregationType: "Aggregatietechniek",
		extentHandling: "Extent uitvouwen indien nodig",
		trendAnalysisDimensionName: "Formaatnaam",
		trendAnalysisType: "Trendtype",
		harmonicFrequency: "Harmonische frequentie",
		polynomialOrder: "Polynomiale volgorde",
		cycleLengthName: "Lengte van de cyclus",
		trendAnalysisRMSE: "RMSE",
		trendAnalysisR2: "R-Squared",
		trendAnalysisSlopePValue: "P-waarde van de hellingshoekcoëfficiënt",
		trendAnalysisSeasonalPeriod: "Seizoensperiode",
		cycleUnitName: "Cycluseenheid",
		predictDimensionValues: "Waarden",
		dimensionDefinitionType: "Formaatdefinitie",
		predictDimensionStart: "Start",
		predictDimensionEnd: "Einde",
		predictDimensionInterval: "Waarde-interval",
		dimensionUnit: "Eenheid",
		interpolationCellsizeName: "Interpolatie celgrootte",
		variableName: "Variabelen",
		dimensionlessName: "Maatloos",
		mdimDefinition: "Formaatdefinitie",
		dimensionName: "Afmeting",
		iterationStart: "Begin van de eerste iteratie",
		iterationEnd: "Einde van de eerste iteratie",
		intervalStart: "Start van interval",
		intervalEnd: "Einde van interval",
		stepName: "Stap",
		rangesName: "Bereik",
		minValue: "Minimumwaarde",
		maxValue: "Maximumwaarde",
		changeAnalysisRasterName: "Analyseraster wijzigen",
		changeTypeName: "Type Wijzigen",
		segmentDate: "Segmentdata",
		changeDirectionName: "Richting wijzigen",
		maxNumChangesName: "Maximaal aantal veranderingen",
		filterByYear: "Filteren op jaar",
		minimumYear: "Minimumwaarde",
		maximumYear: "Maximumwaarde",
		filterByDuration: "Filteren op duur",
		minimumDuration: "Minimumduur",
		maximumDuration: "Maximumduur",
		filterByMagnitude: "Filteren op magnitude",
		minimumMagnitude: "Minimummagnitude",
		maximumMagnitude: "Maximummagnitude",
		filterByStartValue: "Filteren op startwaarde",
		minimumStartValue: "Minimale startwaarde",
		maximumStartValue: "Maximale startwaarde",
		filterByEndValue: "Filteren op eindwaarde",
		minimumEndValue: "Minimale eindwaarde",
		maximumEndValue: "Maximale eindwaarde",
		modelTypeName: "Modeltype",
		fromRasterName: "Van raster",
		toRasterName: "Naar raster",
		computeChangeMethod: "Veranderingsmethode berekenen",
		fromClassValues: "Van klassewaarden (voorbeeld: 2 5)",
		toClassValues: "Naar klassewaarden (voorbeeld: 2 5)",
		keepMethod: "Filtermethode",
		useColorMethod: "Transitiekleuren bepalen",
		detectChangeBands: "Banden voor het detecteren van wijzigingen (starten bij 0)",
		tmaskBands: "Banden voor tijdelijke maskering (starten bij 0)",
		chiSquaredThreshold: "Chi-kwadraat drempel voor het detecteren van verandering",
		minAnomaly: "Observaties minimum opeenvolgende anomalie",
		updatingFrequency: "Bijwerken van de pasfrequentie (in jaren)",
		distanceAccumulationRasterName: "Raster afstandsaccumulatie",
		costBackdirectionRasterName: "Raster terugweg of stroomrichting",
		rasterCollectionName: "Rastercollectie",
		itemFunctionName: "Itemfunctie",
		aggregationFunctionName: "Aggregatiefunctie",
		processingFunctionName: "Verwerkingsfunctie",
		aggregationDefinitionName: "Aggregatiedefinitie",
		queryGeometryName: "Query-geometrie",
		factorFunctionZeroFactor: "Nulfactor",
		factorFunctionCutAngle: "Snijhoek",
		factorFunctionSideFactor: "Zijfactor",
		factorFunctionSlope: "Helling",
		factorFunctionLowCutAngle: "Lage snijhoek",
		factorFunctionHighCutAngle: "Hoge snijhoek",
		factorFunctionCosPower: "Kracht cosinus",
		factorFunctionSecPower: "Kracht snijlijn",
		factorFunctionTablePath: "Tabelpad",
		processingBand: "Verwerkingsband",
		processingBandName: "Naam verwerkingsband",
		snappingDate: "Snappingdatum",
		maxNumSegments: "Maximaal aantal segmenten",
		vertexCountOvershoot: "Vertex Count Overshoot",
		spikeThreshold: "Piekdrempel",
		recoveryThreshold: "Hersteldrempel",
		minNumObs: "Minimum aantal observaties",
		pValueThreshold: "P-waarde drempel",
		bestModelProportion: "Beste modelverhouding",
		preventOneYearRecovery: "Een jaar herstel voorkomen",
		recoveryIncreaseTrend: "Herstel heeft toenemende trend",
		outputOtherBands: "Uitvoer overige banden",
		sortType: "Sorteertype",
		numberOfRuns: "Uitzetten en krimpen twee keer uitvoeren",
		percentileValue: "Percentielwaarde",
		percentileInterpolationType: "Percentielinterpolatietype",
		rasterInfoProperty: "Eigendom",
		rasterInfoValue: "Waarde",
		rasterInfoColumns: "Kolommen",
		rasterInfoRows: "Rijen",
		rasterInfoBandCount: "Aantal banden",
		rasterInfoPixelSizeX: "Celgrootte X",
		rasterInfoPixelSizeY: "Celgrootte Y",
		rasterInfoPixelType: "Pixeltype",
		rasterExtentTop: "Boven",
		rasterExtentBottom: "Onder",
		rasterExtentLeft: "Links",
		rasterExtentRight: "Rechts",
		rasterStatisticsNotCalculated: "Statistieken zijn niet berekend.",
		spatialReferenceProjection: "Projectie",
		spatialReferenceWkid: "WKID",
		spatialReferenceLatestWkid: "Vorige WKID",
		spatialReferenceWkt: "WKT",
		spatialReferenceVcsWkid: "VCSWKID",
		spatialReferenceLatestVcsWkid: "Vorige VCSWKID",
		spatialReferenceAuthority: "Autoriteit",
		spatialReferenceLinearUnit: "Lineaire eenheid",
		spatialReferenceAngularUnit: "Hoekige eenheid",
		spatialReferenceFalseEasting: "False easting",
		spatialReferenceFalseNorthing: "False northing",
		spatialReferenceCentralMeridian: "Centrale meridiaan",
		spatialReferencePrimeMeridian: "Nulmeridiaan",
		spatialReferenceStandardParallel1: "Standaard parallel 1",
		spatialReferenceStandardParallel2: "Standaard parallel 2",
		spatialReferenceLatitudeOfOrigin: "Breedtegraad van oorsprong",
		spatialReferenceAuxiliarySphereType: "Type Auxiliary Sphere",
		spatialReferenceDatum: "Datum",
		spatialReferenceSpheroid: "Bolvormig",
		spatialReferenceSemimajorAxis: "Halve lange as",
		spatialReferenceSemiminorAxis: "Halve korte as",
		spatialReferenceInverseFlattening: "Omgekeerde afvlakking",
		inputDefinitionFileName: "Invoerdefinitiebestand",
		deleteName: "Verwijderen",
		addVariableName: "Variabele toevoegen",
		maxNumPixelsPerSegment: "Minimumgrootte van segmenten in pixels",
		forwardWindowName: "Venster Voorwaarts",
		backwardWindowName: "Venster Achterwaarts",
		noDataHandlingName: "NoData Handling",
		circularWrapValueName: "Waarde circulaire wikkeling",
		fromClassNameFieldName: "Veldnaam voor klassenaam in van raster",
		toClassNameFieldName: "Veldnaam voor klassenaam in naar raster",
		targetRasterName: "Doelraster",
		circularWrapValue: "Waarde circulaire wikkeling",
		bandIndexesR: "Rode expressie",
		bandIndexesG: "Groene expressie",
		bandIndexesB: "Blauwe expressie",
		exampleName: "Voorbeeld",
		inputName: "Invoer",
		outputName: "Uitvoer",
		optionalName: "Optioneel",
		browseDefinitionFile: "Definitiebestand bladeren",
		selectDefinitionFile: "Invoerdefinitiebestand selecteren",
		inputDefinitionURL: "Definitiebestand URL invoer",
		enterDefinitionFileURL: "Definitiebestand URL invoeren",
		browseXMLFile: "XML-bestand bladeren",
		selectStatsFile: "Selecteer statistieken en histogrambestand",
		enterXMLFileURL: "XML-bestand URL invoeren",
		xmlFileURL: "XML-bestand URL",
		circularCalculation: "Circulaire statistieken berekenen",
		localSurfaceType: "Plaatselijk oppervlaktetype",
		surfaceParameterType: "Parametertype",
		neighborhoodDistance: "Afstand tot de buurt",
		useAdaptiveNeighborhood: "Gebruik Adaptieve buurt",
		outputSlopeType: "Meting uitgangshelling",
		projectAzimuths: "Project Geodetische Azimuths",
		useEquatorialAspect: "Gebruik Equatoriaal Aspect",
		zUnit: "Z-Eenheid",
		analysisMask: "Analysemasker",
		stdDeviation: "Standaarddeviatie",
		"true": "True",
		"false": "False",
		costDistanceRaster1: "Cumulatief kosten-afstandraster 1 invoeren",
		costDistanceRaster2: "Cumulatief kosten-afstandraster 2 invoeren",
		threshold: "Drempel",
		thresholdMethod: "Drempelmethode",
		directionRaster1: "Terugwegraster 1 invoeren",
		directionRaster2: "Terugwegraster 2 invoeren",
		maxIterations: "Maximumaantal iteraties",
		epsilon: "Epsilon"
	},
	enumLabels: {
		attributeTableTypeManual: "Handmatig",
		attributeTableTypeExternal: "Extern",
		clrSchemeTypeColormap: "Kleurmap",
		clrSchemeTypeColorRamp: "Kleurverloop",
		colormapTypeElevation: "Hoogte",
		colormapTypeGray: "Grijs",
		colormapTypeNDVI: "NDVI",
		colormapTypeNDVI2: "NDVI2",
		colormapTypeNDVI3: "NDVI3",
		colormapTypeRandom: "Willekeurig",
		none: "Geen",
		slopeTypeAdjusted: "Gecorrigeerd",
		slopeTypeDegree: "Graad",
		slopeTypePercentRise: "Procentstijging",
		slopeTypeScaled: "Geschaald",
		stretchTypeMinMax: "MinMax",
		stretchTypePercentMinMax: "ProcentMinMax",
		stretchTypeSigmoid: "Sigmoide",
		stretchTypeStdDev: "StdDev",
		hillshadeTypeSimple: "Traditioneel",
		hillshadeTypeMultidirectional: "Multidirectioneel",
		bandComboByNames: "Bandnamen",
		bandComboByWavelength: "Band golflengten",
		bandComboByIDs: "Band ID's",
		missingBandActionBestMatch: "Beste match",
		missingBandActionFail: "Mislukt",
		unitTypeCelsius: "Celsius",
		unitTypeCentimeters: "Centimeter",
		unitTypeDecimeters: "Decimeter",
		unitTypeFahrenheit: "Fahrenheit",
		unitTypeFeet: "Voet",
		unitTypeFeetPerSec: "Voet per seconde (ft/s)",
		unitTypeInches: "Inch",
		unitTypeKelvin: "Kelvin",
		unitTypeKilometers: "Kilometer",
		unitTypeKmsPerHour: "Kilometer per uur (km/u)",
		unitTypeKnots: "Knopen (kn)",
		unitTypeMeters: "Meter",
		unitTypeMetersPerSec: "Meter per seconde (m/s)",
		unitTypeMiles: "Mijl",
		unitTypeMilesPerHour: "Mijl per uur (mpu)",
		unitTypeMillimeters: "Millimeter",
		unitTypeNauticalMiles: "Zeemijl",
		unitTypeYards: "Yard",
		unitTypeDecimalDegrees: "Decimale graden",
		unitTypePoints: "Punten",
		unitTypeUnknown: "Onbekend",
		unitTypeSqMapUnits: "Vierkante kaarteenheden",
		unitTypeSqMiles: "Vierkante mijl",
		unitTypeSqKms: "Vierkante kilometer",
		unitTypeAcres: "Hectare",
		unitTypeHectares: "Hectare",
		unitTypeSqYards: "Vierkante yard",
		unitTypeSqFt: "Vierkante voet",
		unitTypeSqInches: "Vierkante inch",
		unitTypeSqMts: "Vierkante meter",
		unitTypeSqCms: "Vierkante centimeter",
		unitTypeSqMms: "Vierkante millimeter",
		cellsizeTypeFirst: "Eerste van",
		cellsizeTypeMin: "Min van",
		cellsizeTypeMax: "Max van",
		cellsizeTypeMean: "Gemiddelde van",
		cellsizeTypeLast: "Laatste van",
		extentTypeFirst: "Eerste van",
		extentTypeIntersection: "Kruispunt van",
		extentTypeUnion: "Vereniging van",
		extentTypeLast: "Laatste van",
		noDataInterpretAny: "Komt overeen met",
		noDataInterpretAll: "Komt overeen met alles",
		curvatureTypeStandard: "Standaard",
		curvatureTypeProfile: "Profiel",
		curvatureTypePlanform: "Planform",
		filterTypeLineDetectionHorizontal: "Lijndetectie horizontaal",
		filterTypeLineDetectionVertical: "Lijndetectie verticaal",
		filterTypeLineDetectionLeftDiagonal: "Lijndetectie links diagonaal",
		filterTypeLineDetectionRightDiagonal: "Lijndetectie rechts diagonaal",
		filterTypeGradientNorth: "Overgang noord",
		filterTypeGradientWest: "Overgang west",
		filterTypeGradientEast: "Overgang oost",
		filterTypeGradientSouth: "Overgang zuid",
		filterTypeGradientNorthEast: "Overgang noord-oost",
		filterTypeGradientNorthWest: "Overgang noord-west",
		filterTypeSmoothArithmeticMean: "Versoepeling rekenkundige betekenis",
		filterTypeSmoothing3x3: "Versoepeling 3x3",
		filterTypeSmoothing5x5: "Versoepeling 5x5",
		filterTypeSharpening3x3: "Verscherping 3x3",
		filterTypeSharpening5x5: "Verscherping 5x5",
		filterTypeLaplacian3x3: "Laplacian 3x3",
		filterTypeLaplacian5x5: "Laplacian 5x5",
		filterTypeSobelHorizontal: "Sobel Horizontaal",
		filterTypeSobelVertical: "Sobel Verticaal",
		filterTypeSharpen: "Verscherpen",
		filterTypeSharpen2: "Meer verscherpen",
		filterTypePointSpread: "Puntverspreiding",
		userDefined: "Gebruikergedefinieerd",
		ContourTypeLines: "Contourlijnen",
		ContourTypeFill: "Contourvulling",
		ContourTypeSmoothOnly: "Alleen glad oppervlak",
		rasterizeFirst: "Eerste",
		rasterizeLast: "Laatste",
		rasterizeSmallest: "Kleinste",
		rasterizeLargest: "Grootste",
		resamplingTypeNearest: "Dichtstbijzijnde Buur",
		resamplingTypeBilinear: "Bilineaire Interpolatie",
		resamplingTypeCubic: "Kubieke Convolutie",
		resamplingTypeMajority: "Meerderheid",
		resamplingTypeBilinearPlus: "Bilineaire Interpolatie Plus",
		resamplingTypeGauss: "Gauss Vervagen",
		resamplingTypeGaussPlus: "Gauss Vervagen Plus",
		resamplingTypeAverage: "Gemiddelde",
		resamplingTypeMinimum: "Minimum",
		resamplingTypeMaximum: "Maximum",
		resamplingTypeVectorAvg: "Vectorgemiddelde",
		minimum: "Minimum",
		maximum: "Maximum",
		mean: "Mediaan",
		stdDeviation: "Standaarddeviatie",
		uvMagDirTypeUV: "U-V",
		uvMagDirTypeMagDir: "Magnituderichting",
		unknown: "Onbekend",
		angleRefSysGeographic: "Geografisch",
		angleRefSysArithmetic: "Rekenkundig",
		interpolateIrregularDataNearest: "Dichtstbijzijnde buur",
		interpolateIrregularDataBilinear: "Bilineair",
		interpolateIrregularDataTinningLinear: "Lineaire verdunning",
		interpolateIrregularDataTinningNaturalNeighbor: "Natuurlijke buur",
		interpolateIrregularDataTinningIDW: "Omgekeerde afstand gewogen",
		esriRasterThresholdTypeConstant: "Constante",
		esriRasterThresholdTypeOtsu: "Otsu",
		esriRasterThresholdTypeTsai: "Tsai",
		esriRasterThresholdTypeKapur: "Kapur",
		esriRasterThresholdTypeKittler: "Kittler",
		esriRasterThresholdTypeRosin: "Hars",
		argStatsTypeMax: "Arg Max",
		argStatsTypeMin: "Arg Min",
		argStatsTypeMedian: "Arg Median",
		argStatsTypeDuration: "Duur",
		arithmeticOpPlus: "Plus",
		arithmeticOpMinus: "Min",
		arithmeticOpMultiply: "Vermenigvuldigen",
		arithmeticOpDivide: "Delen door",
		arithmeticOpPower: "Macht",
		arithmeticOpMode: "Modus",
		clipTypeOutside: "Knippen buiten",
		clipTypeInside: "Knippen binnen",
		yes: "Ja",
		no: "Nee",
		densities: "Dichtheden",
		expectedCounts: "Verwachte tellingen",
		planar: "Planair",
		geodesic: "Geodetisch",
		eachCell: "Elke cel",
		eachZone: "Elke zone",
		bestSingle: "Beste enkel",
		allSightlines: "Alle zichtlijnen",
		perimeterSightlines: "Perimeter zichtlijnen",
		frequency: "Frequentie",
		observers: "Waarnemers",
		majority: "Meerderheid",
		median: "Mediaan",
		minority: "Minderheid",
		percentile: "Percentiel",
		range: "Bereik",
		sum: "Som",
		variety: "Variëteit",
		ndvi: "NDVI",
		savi: "SAVI",
		bandArithmeticMethodTSAVI: "Getransformeerde SAVI",
		bandArithmeticMethodMSAVI: "Aangepaste SAVI",
		bandArithmeticMethodSultan: "Sultan's formule",
		gemi: "GEMI",
		pvi: "PVI",
		gvi: "GVI (Landsat TM)",
		vari: "VARI",
		sr: "SR",
		gndvi: "GNDVI",
		ndvire: "NDVIre",
		srre: "SRre",
		mtvi2: "MTVI2",
		rtviCore: "RTVICore",
		cire: "CIre",
		cig: "CIg",
		ndwi: "NDWI",
		evi: "EVI",
		ironOxide: "IJzeroxide",
		ferrousMinerals: "IJzerhoudende mineralen",
		clayMinerals: "Kleimineralen",
		wndwi: "WNDWI",
		bai: "BAI",
		mndwi: "MNDWI",
		nbr: "NBR",
		ndbi: "NDBI",
		ndmi: "NDMI",
		ndsi: "NDSI",
		localSquareRoot: "Vierkantswortel",
		localACos: "ACos",
		localASin: "ASin",
		localATan: "ATan",
		localATanH: "ATanH",
		localAbs: "Abs",
		localBitwiseNot: "Bitwise Not",
		localBooleanNot: "Boolean Not",
		localCos: "Cos",
		localCosH: "CosH",
		localExp: "Exp",
		localExp10: "Exp10",
		localExp2: "Exp2",
		localInt: "Int",
		localIsNull: "Is null",
		localFloat: "Getal met decimalen",
		localLn: "Ln",
		localLog10: "Log10",
		localLog2: "Log2",
		localNegate: "Ontkennen",
		localRoundDown: "Naar beneden afronden",
		localRoundUp: "Naar boven afronden",
		localSin: "Sin",
		localSinH: "SinH",
		localTan: "Tan",
		localTanH: "TanH",
		localACosH: "ACosH",
		localASinH: "ASinH",
		localPlus: "Plus",
		localMinus: "Min",
		localTimes: "Aantal keer",
		localPower: "Macht",
		localBitwiseAnd: "Bitwise en",
		localBitwiseLeftShift: "Bitwise verschuiving links",
		localBitwiseOr: "Bitwise of",
		localBitwiseRightShift: "Bitwise verschuiving rechts",
		localBitwiseXor: "Bitwise Xof",
		localBooleanAnd: "Boolean en",
		localBooleanOr: "Boolean of",
		localBooleanXor: "Boolean Xof",
		localDivide: "Delen door",
		localEqualTo: "Gelijk aan",
		localGreaterThan: "Groter dan",
		localGreaterThanEqual: "Groter dan of gelijk aan",
		localLessThan: "Kleiner dan",
		localLessThanEqual: "Kleiner dan of gelijk aan",
		localMod: "Mod",
		localNotEqual: "Niet gelijk",
		localATan2: "ATan2",
		localSquare: "Vierkant",
		localSetNull: "Null instellen",
		remapDefTypeList: "Lijst",
		remapDefTypeTable: "Tabel",
		remapTableTypeSimple: "Eenvoudig",
		remapTableTypeDynamic: "Dynamisch",
		remapTableTypeReassignment: "Hertoewijzing",
		geomCorrectionByConstZ: "Constante Z gebruiken",
		geomCorrectionByDEM: "DEM gebruiken",
		radarCalibBetaNought: "Beta nul",
		radarCalibSigmaNought: "Sigma nul",
		radarCalibGammaNought: "Gamma nul",
		speckleFilterTypeLee: "Lee Filter",
		speckleFilterTypeEnhancedLee: "Verbeterde Lee Filter",
		speckleFilterTypeFrost: "Frost-filter",
		speckleFilterTypeKuan: "Kuan-filter",
		speckleNoiseModelMul: "Vermenigvuldigd noise",
		speckleNoiseModelAdd: "Toegevoegd noise",
		speckleNoiseModelAddnMul: "Toegevoegd en vermenigvuldigd noise",
		mosaicOpTypeFirst: "Eerste",
		mosaicOpTypeLast: "Laatste",
		mosaicOpTypeMin: "Min",
		mosaicOpTypeMax: "Max",
		mosaicOpTypeMean: "Mediaan",
		mosaicOpTypeBlend: "Mengsel",
		mosaicOpTypeSum: "Som",
		integer: "Integer",
		rfxD8: "D8",
		rfxMFD: "MFD",
		dinf: "Dinf",
		vertical: "Verticaal",
		horizontal: "Horizontaal",
		localCellStatisticsMajority: "Meerderheid",
		localCellStatisticsMax: "Maximum",
		localCellStatisticsMean: "Mediaan",
		localCellStatisticsMedian: "Mediaan",
		localCellStatisticsMin: "Minimum",
		localCellStatisticsMinority: "Minderheid",
		localCellStatisticsRange: "Bereik",
		localCellStatisticsStdDev: "Standaarddeviatie",
		localCellStatisticsSum: "Som",
		localCellStatisticsVariety: "Variëteit",
		localCellStatisticsMajorityIgnoreND: "Meerderheid (Negeer NoData)",
		localCellStatisticsMaxIgnoreND: "Maximum (Negeer NoData)",
		localCellStatisticsMeanIgnoreND: "Gemiddelde (Negeer NoData)",
		localCellStatisticsMedianIgnoreND: "Mediaan (Negeer NoData)",
		localCellStatisticsMinIgnoreND: "Minimum (Negeer NoData)",
		localCellStatisticsMinorityIgnoreND: "Minderheid (Negeer NoData)",
		localCellStatisticsRangeIgnoreND: "Reeks (Negeer NoData)",
		localCellStatisticsStdDevIgnoreND: "Standaardafwijking (Negeer NoData)",
		localCellStatisticsSumIgnoreND: "Som (Negeer NoData)",
		localCellStatisticsVarietyIgnoreND: "Variëteit (Negeer NoData)",
		localCellStatisticsTypePercentileIgnoreND: "Percentiel (NoData negeren)",
		fromSource: "Van bron",
		toSource: "Naar bron",
		colorspaceConversionRgbToHsv: "RGB naar HSV",
		colorspaceConversionHsvToRgb: "HSV naar RGB",
		pansharpenTypeIHS: "IHS",
		pansharpenTypeBrovey: "Brovey",
		pansharpenTypeEsri: "Esri",
		pansharpenTypeMean: "Mediaan",
		pansharpenTypeGramSchmidt: "Gram-Schmidt",
		rectangleNeighborhood: "Rechthoek",
		circleNeighborhood: "Cirkel",
		annulusNeighborhood: "Annulus",
		wedgeNeighborhood: "Wedge",
		irregularNeighborhood: "Onregelmatig",
		weightNeighborhood: "Gewicht",
		four: "Vier",
		eight: "Acht",
		within: "In",
		cross: "Kruis",
		addLink: "Voeg koppeling toe",
		noLink: "Geen koppeling",
		weightedMean: "Gewogen gemiddelde",
		ls8QCBitPatternCirrus: "Landsat 8 Cirrus",
		ls8QCBitPatternCloud: "Landsat 8 Cirrus",
		ls8QCBitPatternCloudShadow: "Landsat 8 Cloud Shadow",
		ls8QCBitPatternDesignatedFill: "Landsat 8 Designated Fill",
		ls8QCBitPatternDroppedFrame: "Landsat 8 Dropped Frame",
		ls8QCBitPatternSnowIce: "Landsat 8 Snow/Ice",
		ls8QCBitPatternTerrainOcclusion: "Landsat 8 Terrain Occlusion",
		ls8QCBitPatternVegetation: "Landsat 8 Vegetation",
		ls8QCBitPatternWater: "Landsat 8 Water",
		downStream: "Downstream",
		upStream: "Upstream",
		strahler: "STRAHLER",
		shreve: "SHREVE",
		currentSlice: "Huidige doorsnede",
		allSlices: "Alle doorsnedes",
		expandDistance: "AFSTAND",
		expandMorphological: "MORFOLOGISCH",
		spectralProfileFile: "Spectraal profiel",
		trainingFeatureFile: "Opleidingsobject",
		randomDistributionTypeUniform: "Uniform",
		randomDistributionTypeUniformInteger: "Geheel getal",
		randomDistributionTypeNormal: "Normaal",
		randomDistributionTypeExponential: "Exponentieel",
		randomDistributionTypePoisson: "Poisson",
		randomDistributionTypeGamma: "Gamma",
		randomDistributionTypeBinomial: "Binomiaal",
		randomDistributionTypeGeometric: "Geometrisch",
		randomDistributionTypeNegativeBinomial: "Negatieve binomiaal",
		randomGeneratorTypeStandardCRand: "Standaard C Rand",
		randomGeneratorTypeAlgorithmACM599: "ACM verzameld algoritme 599",
		randomGeneratorTypeMersenneTwister: "Mersenne Twister",
		sumName: "Som",
		medainName: "Mediaan",
		trendLinear: "Lineair",
		trendHarmonic: "Harmonisch",
		trendPolynomial: "Polynomiaal",
		trendMannKendall: "Mann-Kendall",
		trendSeasonalKendall: "Seasonal-Kendall",
		dimensionByValue: "Op waarde",
		dimensionByInterval: "Op interval",
		mdimDefTypeAll: "Alle",
		mdimDefTypeByValues: "Op waarden",
		mdimDefTypeByRanges: "Op bereik",
		mdimDefTypeByIteration: "Op iteratie",
		mdimDefTypeByInterval: "Op interval",
		mdimDefTypeByTargetRaster: "Op doelraster",
		esriTimeUnitsHours: "Uren",
		esriTimeUnitsDays: "Dagen",
		esriTimeUnitsWeeks: "Weken",
		esriTimeUnitsMonths: "Maanden",
		esriTimeUnitsYears: "Jaren",
		esriTimeIntervalKeywordHourly: "Elk uur",
		esriTimeIntervalKeywordDaily: "Dagelijks",
		esriTimeIntervalKeywordWeekly: "Wekelijks",
		esriTimeIntervalKeywordDekadly: "Dekadly",
		esriTimeIntervalKeywordPentadly: "Pentadly",
		esriTimeIntervalKeywordMonthly: "Maandelijks",
		esriTimeIntervalKeywordQuarterly: "Per kwartaal",
		esriTimeIntervalKeywordYearly: "Jaarlijks",
		esriTimeIntervalKeywordRecurringDaily: "Dagelijks terugkerend",
		esriTimeIntervalKeywordRecurringWeekly: "Wekelijks terugkerend",
		esriTimeIntervalKeywordRecurringMonthly: "Maandelijks terugkerend",
		esriTimeIntervalKeywordRecurringQuarterly: "Elk kwartaal terugkerend",
		aggDefTypeAll: "Alle",
		aggDefTypeIntervalKeyword: "Intervaltrefwoord",
		aggDefTypeIntervalValue: "Intervalwaarde",
		aggDefTypeIntervalRanges: "Intervalbereiken",
		latestChange: "Tijd van de laatste verandering",
		earliestChange: "Tijd van de vroegste verandering",
		largestChange: "Tijd van de grootste verandering",
		numberOfChanges: "Aantal wijzigingen",
		longestChange: "Tijd van langste wijziging",
		shortestChange: "Tijd van kortste wijziging",
		fastestChange: "Tijd van snelste wijziging",
		slowestChange: "Tijd van langzaamste wijziging",
		allChanges: "Alle",
		increaseChanges: "Vergroten",
		decreaseChanges: "Verkleinen",
		segmentBeginning: "Begin van segment",
		segmentEnd: "Eind van segment",
		esriComputeChangeMethodDifference: "Verschil",
		esriComputeChangeMethodRelativeDifference: "Relatief verschil",
		esriComputeChangeMethodCategorical: "Categorisch verschil",
		esriComputeChangeMethodMultispectralEuclideanDistance: "Spectrale Euclidische afstand",
		esriComputeChangeMethodMultispectralAngularDifference: "Spectraal hoekverschil",
		esriComputeChangeMethodMultispectralAxisWithBiggestChange: "Band met meeste verandering",
		esriComputeChangeKeepAll: "Alles behouden",
		esriComputeChangeKeepChangedOnly: "Enkel gewijzigde pixels behouden",
		esriComputeChangeKeepUnchangedOnly: "Enkel ongewijzigde pixels behouden",
		esriComputeChangeUseColorAverage: "Gemiddelde van en naar kleuren",
		esriComputeChangeUseColorFrom: "Gebruiken van kleuren",
		esriComputeChangeUseColorTo: "Gebruiken naar kleuren",
		factorFunctionBinary: "Binair",
		factorFunctionForward: "Voorwaarts",
		factorFunctionLinear: "Lineair",
		factorFunctionInvLinear: "Omgekeerd Lineair",
		factorFunctionTable: "Tabel",
		factorFunctionSymLinear: "Symmetrisch lineair",
		factorFunctionSymInvLinear: "Symmetrisch omgekeerd lineair",
		factorFunctionCos: "Cosinus",
		factorFunctionSec: "Snijlijn",
		factorFunctionCosSec: "Cosinus snijlijn",
		factorFunctionSecCos: "Snijlijn cosinus",
		noSort: "Niet sorteren",
		ascend: "Oplopend",
		descend: "Aflopend",
		autoDetect: "Auto-detect",
		nearest: "Dichtstbijzijnde",
		linear: "Lineair",
		esriMonthJanuary: "Januari",
		esriMonthFebruary: "Februari",
		esriMonthMarch: "Maart",
		esriMonthApril: "April",
		esriMonthMay: "Mei",
		esriMonthJune: "Juni",
		esriMonthJuly: "Juli",
		esriMonthAugust: "Augustus",
		esriMonthSeptember: "September",
		esriMonthOctober: "Oktober",
		esriMonthNovember: "November",
		esriMonthDecember: "December",
		dimensionalMovingIgnoreNoData: "Gegevens",
		dimensionalMovingPropagateNoData: "NoData",
		dimensionalMovingFillOnlyNoData: "NoData invullen",
		circularMean: "Circulair gemiddelde",
		circularName: "Circulair",
		arithmeticName: "Rekenkundig",
		slopeName: "Helling",
		aspectName: "Aspect",
		meanCurvature: "Gemiddelde kromming",
		profileCurvature: "Profiel (normale hellingslijn) kromming",
		tangentialCurvature: "Tangentiële (normale contour) kromming",
		planCurvature: "Plan (geprojecteerde contour) kromming",
		contourGeodesicTorsion: "Contour geodetische torsie",
		gaussianCurvature: "Gaussiaanse kromming",
		casoratiCurvature: "Casorati kromming",
		localSurfaceTypeQuadratic: "Quadratic",
		localSurfaceTypeBiquadratic: "Biquadratic",
		thresholdNoThreshold: "Geen drempel",
		thresholdPercentLeastCost: "Percentage van goedkoopste",
		thresholdAccumulativeCost: "Cumulatieve kosten",
		clrmapTypeHillshade: "Bergschaduwen"
	},
	categoryLabels: {
		sourceCharacteristics: "Bronkenmerken",
		neighborhoodSettings: "Buurtinstellingen",
		statistics: "Statistieken",
		gamma: "Gamma",
		viewshedParameters: "Viewshed-parameters",
		observerParameters: "Observer-parameters",
		irregularDataInterpolation: "Onregelmatige gegevensinterpolatie",
		modelStatistics: "Modelstatistieken",
		aggregationDef: "Aggregatiedefinitie",
		filterByAttributes: "Filteren op attributen",
		percentileName: "Percentiel",
		rasterInfo: "Rasterinformatie",
		extent: "Extent",
		spatialReference: "Ruimtelijke referentie"
	},
	outputRasterHelpTexts: {
		outputName: "<p>De naam van de laag die wordt aangemaakt en toegevoegd aan de kaart.</p>",
		resultType: "<p>Het type output dat wordt gemaakt. De uitvoer kan bestaan uit getegelde beeldlagen of dynamische beeldlagen.</p>",
		saveResultIn: "<p>De naam van de map in <b>Mijn content</b> waar het resultaat wordt opgeslagen.</p>"
	},
	analysisEnvironmentsHelpTexts: {
		description: "<p>Omgevingsinstellingen voor analyse in Map Viewer. </p>",
		outSR: "<p>Specificeert het coördinatensysteem voor de analyse en de resultaatlaag.</p>",
		extent: "<p>Specificeert voor de analyse te gebruiken gebied.</p>",
		snapRaster: "<p>Past de extent van de uitvoer aan zodat deze overeenkomt met de celuitlijning van de opgegeven snaprasterlaag.</p>",
		cellSize: "<p>Bepaalt de celgrootte of resolutie die wordt gebruikt voor de analyse en om de uitvoerrasterlaag te maken.</p>",
		mask: "<p>Specificeert een maskerlaag waarin alleen de cellen die binnen het maskergebied vallen voor de analyse worden gebruikt.</p>",
		resamplingMethod: "<p>Specificeert hoe pixelwaarden moeten worden geïnterpoleerd wanneer de invoer- en uitvoerrasters niet op één lijn liggen.</p>"
	},
	mainGenStrings: {
		unsupportedDataType: "Niet-ondersteund type",
		currentlyUnsupported: " Er wordt gewerkt aan een standaard-editor voor de ${missingType}; deze is binnenkort beschikbaar. Tijdelijke plaatshouder voor tekstvak voor het specificeren van op tekenreeksen gebaseerde invoer.",
		unsupportedOverrideWarning: "Er is binnenkort een overschrijvingsonderdeel beschikbaar voor de editor, dat een betere UX biedt voor werk met de volgende parameter(s):",
		overrideWidgetMissing: "Overschrijvingsonderdeel editor ontbreekt!",
		uiIncomplete: "Taakindiening is mislukt. De functie kan niet worden uitgevoerd omdat een aantal van de vereiste velden onvolledig is of ontbreekt in de UI.",
		count: "Aantal",
		selectVariables: "Variabelen selecteren",
		selectFeature: "Feature layer selecteren",
		greaterThanErrorMessage: "De invoerwaarde moet groter zijn dan ${min}",
		lesserThanErrorMessage: "De invoerwaarde moet kleiner zijn dan ${max}",
		greaterThanOrEqualErrorMessage: "De invoerwaarde moet groter dan of gelijk zijn aan ${min}",
		lesserThanOrEqualErrorMessage: "De invoerwaarde moet kleiner dan of gelijk zijn aan ${max}",
		allowScalar: "Selecteer een laag of voer een constante in",
		selectField: "Veld selecteren",
		parameterRequired: "Deze parameter is vereist.",
		enterAValue: "Voer een waarde in...",
		invalidInput: "De ingevoerde waarde is niet geldig.",
		itemNotFound: "Het item bestaat niet of is niet toegankelijk.",
		itemPermissionDenied: "U heeft geen toegangsmachtigingen voor dit item.",
		layerNotAvailable: "Kaartlaag laden mislukt ${layerName}.",
		multipleLayersNotAvailable: "Kaartlaag ${layerName} en andere laden mislukt.",
		learnMoreLabel: "Meer informatie",
		fieldNotAvailable: "Veld laden mislukt.",
		allowAnalysis: "Analyse is niet toegestaan op de image service.",
		allowAnalysisReason: "Een of meer lagen van de kaart zijn hier niet opgenomen omdat ze geen analyse mogelijk maken.",
		learnMoreText: "Meer informatie",
		atLeastOneRasterInput: "Ten minste één invoerlaag moet een rasterlaag zijn.",
		browseAnalysisLayers: "Blader door lagen",
		activeMapViewExtent: "Huidige extent van de kaart gebruiken",
		chooseRaster: "Raster knippen kiezen",
		chooseGeometry: "Geometrie bijsnijden kiezen",
		resultType: "Resultaattype",
		saveInFolder: "Opslaan in map",
		outputName: "Uitvoernaam",
		outputLayerType: "Uitvoer kaartlaagtype",
		dynamicImageryLayer: "Dynamische imagery layer",
		tiledImageryLayer: "Tiled imagery layer",
		custom: "Aangepast",
		loading: "Bezig met laden...",
		layerMissing: "Een of meer lagen van de kaart worden hier niet vermeld omdat daarin geen analyse is toegestaan. Meer informatie.",
		browseCoordinateSystems: "Coördinatensystemen doorbladeren",
		unableToRepopulateOutSR: "Kan uitvoercoördinatensysteem niet invullen.",
		defaultTitle: "Meer bekijken",
		"ARC (equal arc-second)": "ARC (gelijke boogseconde)",
		Africa: "Afrika",
		Antarctica: "Antarctica",
		Argentina: "Argentinië",
		Asia: "Azië",
		"Asteroid Belt": "Asteroïdengordel",
		"Atlantic Ocean": "Atlantische Oceaan",
		Australia: "Australië",
		"Australia and New Zealand": "Australië en Nieuw-Zeeland",
		Austria: "Oostenrijk",
		"BLM (US Feet)": "BLM (US Feet)",
		Bangladesh: "Bangladesh",
		"Beijing 1954": "Beijing 1954",
		Bhutan: "Bhutan",
		CGCS2000: "CGCS2000",
		Canada: "Canada",
		Caribbean: "Caribisch gebied",
		"Caribbean Sea": "Caribische zee",
		"Central America": "Midden-Amerika",
		"Central and North America": "Midden- en Noord-Amerika",
		Colombia: "Colombia",
		Continental: "Continentaal",
		"County Systems": "County Systems",
		"Democratic Republic of the Congo": "Democratische Republiek Congo",
		"EPSG Arctic": "EPSG Arctic",
		Earth: "Aarde",
		"Ellipsoidal-based": "Ellipsoïdaal",
		Europe: "Europa",
		Finland: "Finland",
		France: "Frankrijk",
		"GSK 2011": "GSK 2011",
		"Gauss Kruger": "Gauss Kruger",
		"Geographic Coordinate Systems": "Geografische coördinatensystemen",
		Germany: "Duitsland",
		"Gravity-related": "Zwaartekrachtgerelateerde",
		"Greenwich-based": "Greenwich-gebaseerd",
		"Highways England": "Snelwegen Engeland",
		Illinois: "Illinois",
		"Indian Ocean": "Indische Oceaan",
		"Indian Subcontinent": "Indisch subcontinent",
		Indiana: "Indiana",
		Indonesia: "Indonesië",
		Iowa: "Iowa",
		"Ireland and United Kingdom": "Ierland en Verenigd Koninkrijk",
		Italy: "Italië",
		Japan: "Japan",
		Jupiter: "Jupiter",
		Kansas: "Kansas",
		"Las Vegas": "Las Vegas",
		Libya: "Libië",
		Malaysia: "Maleisië",
		"Malaysia and Singapore": "Maleisië en Singapore",
		Mars: "Mars",
		Mercury: "Mercurius",
		Minnesota: "Minnesota",
		Montana: "Montana",
		"NAD 1927": "NAD 1927",
		"NAD 1927 (US Feet)": "NAD 1927 (US Feet)",
		"NAD 1983": "NAD 1983",
		"NAD 1983 (2011)": "NAD 1983 (2011)",
		"NAD 1983 (2011) (Intl Feet)": "NAD 1983 (2011) (Intl Feet)",
		"NAD 1983 (2011) (Meters)": "NAD 1983 (2011) (Meters)",
		"NAD 1983 (2011) (US Feet)": "NAD 1983 (2011) (US Feet)",
		"NAD 1983 (CORS96) (Intl Feet)": "NAD 1983 (CORS96) (Intl Feet)",
		"NAD 1983 (CORS96) (Meters)": "NAD 1983 (CORS96) (Meters)",
		"NAD 1983 (CORS96) (US Feet)": "NAD 1983 (CORS96) (US Feet)",
		"NAD 1983 (Intl Feet)": "NAD 1983 (Intl Feet)",
		"NAD 1983 (Meters)": "NAD 1983 (Meters)",
		"NAD 1983 (PA11) (Meters)": "NAD 1983 (PA11) (Meters)",
		"NAD 1983 (PA11) (US Feet)": "NAD 1983 (PA11) (US Feet)",
		"NAD 1983 (US Feet)": "NAD 1983 (US Feet)",
		"NAD 1983 HARN (Intl Feet)": "NAD 1983 HARN (Intl Feet)",
		"NAD 1983 HARN (Meters)": "NAD 1983 HARN (Meters)",
		"NAD 1983 HARN (US Feet)": "NAD 1983 HARN (US Feet)",
		"NAD 1983 NSRS2007 (Intl Feet)": "NAD 1983 NSRS2007 (Intl Feet)",
		"NAD 1983 NSRS2007 (Meters)": "NAD 1983 NSRS2007 (Meters)",
		"NAD 1983 NSRS2007 (US Feet)": "NAD 1983 NSRS2007 (US Feet)",
		"National Grids": "National Grids",
		Navajo: "Navajo",
		Neptune: "Neptunus",
		"New Beijing": "New Beijing",
		"New Zealand": "Nieuw-Zeeland",
		"North America": "Noord-Amerika",
		"Northern Hemisphere": "Noordelijk halfrond",
		Norway: "Noorwegen",
		Oceans: "Oceanen",
		Oregon: "Oregon",
		"Other GCS": "Overig GCS",
		"Pacific Ocean": "Stille Oceaan",
		Pluto: "Pluto",
		Polar: "Polair",
		Portugal: "Portugal",
		"Projected Coordinate Systems": "Geprojecteerde coördinatensystemen",
		"Pulkovo 1942": "Pulkovo 1942",
		"Pulkovo 1995": "Pulkovo 1995",
		Replaced: "Vervangen",
		"SAD 1969": "SAD 1969",
		SIRGAS: "SIRGAS",
		"SIRGAS 2000": "SIRGAS 2000",
		Saturn: "Saturnus",
		"Solar System": "Zonnestelsel",
		"South Africa": "Zuid-Afrika",
		"South America": "Zuid-Amerika",
		"South Korea": "Zuid-Korea",
		"Southern Hemisphere": "Zuidelijk halfrond",
		"Spheroid-based": "Sferoïdaal",
		"State Plane": "Staatsvlak",
		"State Systems": "Staatssystemen",
		Sweden: "Zweden",
		"Switzerland and Liechtenstein": "Zwitserland en Liechtenstein",
		Texas: "Texas",
		Tribal: "Tribal",
		Turkey: "Turkije",
		"US Feet": "US Feet",
		"USA and territories": "USA en gebieden",
		UTM: "UTM",
		Ukraine: "Oekraïne",
		"Unknown Height Systems": "Onbekende hoogtesystemen",
		Uranus: "Uranus",
		Venus: "Venus",
		"Vertical Coordinate Systems": "Verticale coördinatensystemen",
		Vietnam: "Vietnam",
		"WGS 1972": "WGS 1972",
		"WGS 1984": "WGS 1984",
		Wisconsin: "Wisconsin",
		"Wisconsin CRS": "Wisconsin CRS",
		World: "Wereld",
		"World (Sphere-based)": "Wereld (op bolbasis)",
		Wyoming: "Wyoming",
		"Xian 1980": "Xian 1980",
		done: "Gereed",
		noResults: "Kan geen resultaten vinden",
		searchPlaceholder: "Naam of WKID",
		browseTemplate: "Door rasterfunctiesjablonen bladeren",
		saveTemplate: "Rasterfunctiesjabloon opslaan",
		preview: "Voorbeeld",
		previewDescription: "Geef een voorbeeld weer voordat de analyse wordt uitgevoerd.",
		showPreview: "Voorbeeld weergeven",
		previewLayer: "Voorbeeld laag ${number}",
		newPreview: "Nieuw voorbeeld",
		previewPopup: "Schakel het voorbeeld van de analyseresultaten in op basis van de invoerparameters.",
		updatePreviewLayer: "Geselecteerde voorbeeldlaag updaten",
		createPreviewLayer: "Nieuwe voorbeeldlaag maken",
		maximumPreviewAllowed: "Maximumaantal toegestane voorbeeldlagen: ${maxCount}",
		previewFailure: "Deze voorbeeldlaag is niet beschikbaar. Controleer de invoerparameters en werk de voorbeeldlaag opnieuw bij.",
		header: "Item selecteren",
		content: "Er zijn niet-opgeslagen wijzigingen in ${rftTitle}. Als u opnieuw begint met een nieuwe sjabloon, gaan al die wijzigingen verloren.",
		dontSave: "Niet opslaan",
		"continue": "Doorgaan",
		stretch: "Aanpassen aan venster",
		pan: "Pannen",
		newTemplate: "Nieuwe sjabloon maken",
		openTemplate: "Sjabloon openen",
		addFunction: "Rasterfuncties toevoegen",
		addConstant: "Constante toevoegen",
		addRaster: "Rastervariabele toevoegen",
		move: "Verplaatsen",
		zoom: "Zoomen",
		saveAs: "Opslaan als",
		clear: "Wissen",
		addRasterFunctionTitle: "Rasterfuncties toevoegen",
		templatePropertiesTitle: "Eigenschappen sjabloon",
		browseRFT: "Door rasterfunctiesjablonen bladeren",
		defaultToolDescription: "${toolTitle} analysetool.",
		openToolText: "Tool openen",
		toolDropdownText: "Tool vervolgkeuzelijst",
		addToMap: "Bevestigen en aan kaart toevoegen",
		confirm: "Bevestigen",
		select: "Selecteren",
		selectTask: "Taak selecteren",
		unsupportedLayer: "Deze parameter biedt geen ondersteuning voor de volgende kaartlagen: ${layerName}.",
		viewDetails: "Volledige itemdetails bekijken",
		rename: "Naam wijzigen",
		duplicate: "Dupliceren",
		launch: "Openen voor uitvoering",
		templateEditor: "Sjablooneditor",
		createItem: "Rasterfunctiesjabloon opslaan",
		actionLabel: "Filteren",
		filterPopoverHeading: "De functies filteren",
		defaultSearchPlaceholder: "Op naam zoeken",
		settings: "Instellingen",
		summary: "Samenvatting",
		definitionQuery: "Definitiequery",
		matchVariables: "Overeenkomstvariabelen",
		unionDimension: "Samenvoegingsafmeting",
		nameEditorPlaceholder: "Titel invoeren",
		summaryEditorPlaceholder: "Voer een korte beschrijving in.",
		definitionQueryPlaceholder: "Invoeren...",
		upload: "Uploaden",
		chooseImage: "Klik om een bestand te kiezen",
		update: "Bijwerken",
		thumbnailErrors: {
			wrongImageType: "Verkeerd beeldtype geselecteerd",
			notAvailable: "Thumbnail is niet beschikbaar",
			loadError: "Kan afbeelding niet laden",
			chooseFile: "Klik om bestand te kiezen"
		}
	}
};
const copy = "Kopiëren";
const save = "Opslaan";
const title = "Titel";
const folder = "Folder";
const tags = "Labels";
const savingMessage = "Item opslaan in";
const shareWith = "Delen met";
const share = "Delen";
const setSharingLevel = "Deelniveau instellen";
const setGroupSharing = "Groep delen instellen";
const owner = "Eigenaar";
const organization = "Organisatie";
const everyone = "Iedereen (openbaar)";
const groups = "Groepen:";
const type = "Type";
const mosaic = "Mozaïek";
const itemGroup = "Itemgroep";
const item = "Item";
const definitionQuery = "Definition Query";
const groupItemsBy = "Items groeperen op";
const groupFieldName = "Veldnaam groeperen";
const tagFieldName = "Veldnaam taggen";
const noTitleTagErrorMsg = "U moet een titel en tags opgeven voor uw item zodat er naar uw kaart kan worden gezocht.";
const noTitleErrorMsg = "U moet een titel opgeven voor uw item.";
const noTagErrorMsg = "U moet minimaal één tag opgeven zodat uw item kan worden gevonden via zoekacties.";
const error = "Fout";
const warning = "Waarschuwing";
const success = "Succes";
const details = "Details:";
const tryAgain = "Opnieuw proberen";
const toolModeler = {
	save: "Opslaan",
	editProperties: "Eigenschappen bewerken",
	saveAs: "Opslaan als",
	savingNotification: "Wijzigingen in item opslaan ...",
	savingTitle: "Opslaan",
	saveFailedMessage: "wijzigingen opslaan mislukt.",
	saveWithErrorsMessage: "Wijzigingen zijn opgeslagen met de volgende fouten.",
	viewItemMessage: "Bekijk het opgeslagen item",
	here: "here.",
	itemCreatedMessage: "Er is een nieuw item gemaakt.",
	clickToViewItemMessage: "Klik op OK om de pagina met itemdetails weer te geven; klik op Annuleren om door te gaan.",
	readingFailed: "De geselecteerde rasterfunctietemplate kon niet worden geladen.",
	failedToLoadXML: "De geselecteerde rasterfunctietemplate kon niet worden geladen in XML-formaat.",
	learnMore: "Meer informatie",
	overwriteTitle: "Overschrijven bevestigen",
	overwriteMessage: "Wilt u het bestaande item overschrijven?",
	overwriteSuccessMessage: "Het item is bijgewerkt."
};
const toolEditor = {
	run: "Uitvoeren",
	save: "Opslaan",
	deleteSelected: "Verwijder geselecteerde items",
	addRaster: "Raster toevoegen",
	addScalar: "Scalair toevoegen",
	layout: "Automatische lay-out",
	errorTitle: "Fout",
	invalidToolMessage: "Rasterfunctietemplate is niet geldig.",
	out: "Uit",
	zoomIn: "Zoom In",
	zoomOut: "Zoom Out",
	zoomToFit: "Aanpassen aan venster",
	panOn: "Omschakelen naar panmodus",
	panOff: "Panmodus uitschakelen",
	defaultModelName: "Toolmodel",
	defaultRasterName: "Raster"
};
const toolDetailsEditor = {
	defaultToolName: "Template rasterfunctie",
	defaultToolDescription: "Voeg een korte samenvatting over de rasterfunctie toe.",
	defaultHelpText: "Klik op het Help-pictogram om de helptekst te bewerken.",
	editHelpTitle: "Help bewerken",
	saveLabel: "Opslaan",
	cancelLabel: "Afbreken",
	thumbnail: {
		wrongImageType: "Verkeerd beeldtype geselecteerd",
		notAvailable: "Thumbnail niet beschikbaar",
		loadError: "Kon de afbeelding niet laden",
		chooseFile: "Klik om bestand te kiezen."
	}
};
const saveUtils = {
	thumbnail: "Miniatuur",
	sharing: "Delen"
};
const close = "Sluiten";
const unsavedWarningExisting = "Wilt u de wijzigingen in het item opslaan <b>${itemTitle}</b> ?";
const unsavedWarningNew = "Wilt u uw wijzigingen opslaan?";
const saveAs = "Opslaan als";
const dontSave = "Niet opslaan";
const unsavedTitle = "Niet-opgeslagen wijzigingen";
const invalidRFTMessage = "De gemaakte rasterfunctietemplate is niet geldig.";
const errorTitle = "Fout";
const breadcrumb = "Raster Function Editor";
const breadcrumbEditor = "Content > Raster Function Editor";
const viewerModeTitle = "Alleen lezen";
const viewerModeMessage = "Rasterfunctie template-item is alleen-lezen. Veranderingen zijn niet opgeslagen.";
const userStartDirection = "Selecteer een functie om een rasterfunctietemplate te maken.";
const selectFunction = "Functie toevoegen";
const deselectFunction = "Functie verwijderen";
const dialogTitle = "Systeem";
const category = "Categorieën";
const search = "Rasterfuncties zoeken";
const categoryNames = {
	analysis: "Analyse",
	appearance: "Weergave",
	classification: "Classificatie",
	conversion: "Conversie",
	correction: "Correctie",
	dataManagement: "Databeheer",
	distance: "Afstand",
	distanceLegacy: "Afstand (Legacy)",
	hydrology: "Hydrologie",
	math: "Berekeningen",
	mathConditional: "Rekenkundig: Voorwaardelijk",
	mathLogical: "Rekenkundig: logisch",
	mathTrigonometric: "Rekenkundig: trigonometrisch",
	reclass: "Herclassificeren",
	statistical: "Statistisch",
	surface: "Oppervlak"
};
const commonStrings_nl = {
	ok: ok,
	cancel: cancel,
	enterURL: enterURL,
	serviceURL: serviceURL,
	selectRaster: selectRaster,
	failedToLoadLayer: failedToLoadLayer,
	loadingLayer: loadingLayer,
	selectFeature: selectFeature,
	enterFURL: enterFURL,
	addRaster: addRaster,
	addScalar: addScalar,
	raster: raster,
	scalar: scalar,
	defaultModelName: defaultModelName,
	general: general,
	parameters: parameters,
	variables: variables,
	name: name,
	description: description,
	parameter: parameter,
	isPublic: isPublic,
	isDataset: isDataset,
	unknownPixelType: unknownPixelType,
	outputPixelType: outputPixelType,
	u8PixelType: u8PixelType,
	s8PixelType: s8PixelType,
	u16PixelType: u16PixelType,
	s16PixelType: s16PixelType,
	u32PixelType: u32PixelType,
	s32PixelType: s32PixelType,
	f32PixelType: f32PixelType,
	f64PixelType: f64PixelType,
	properties: properties,
	multidimensionalRules: multidimensionalRules,
	matchVariables: matchVariables,
	unionDimensions: unionDimensions,
	rasterFunctionEditor: rasterFunctionEditor,
	rfxLicenseInfo: rfxLicenseInfo,
	rasterFunctions: rasterFunctions,
	copy: copy,
	save: save,
	title: title,
	folder: folder,
	tags: tags,
	savingMessage: savingMessage,
	shareWith: shareWith,
	share: share,
	setSharingLevel: setSharingLevel,
	setGroupSharing: setGroupSharing,
	owner: owner,
	organization: organization,
	everyone: everyone,
	groups: groups,
	type: type,
	mosaic: mosaic,
	itemGroup: itemGroup,
	item: item,
	definitionQuery: definitionQuery,
	groupItemsBy: groupItemsBy,
	groupFieldName: groupFieldName,
	tagFieldName: tagFieldName,
	noTitleTagErrorMsg: noTitleTagErrorMsg,
	noTitleErrorMsg: noTitleErrorMsg,
	noTagErrorMsg: noTagErrorMsg,
	error: error,
	warning: warning,
	success: success,
	details: details,
	tryAgain: tryAgain,
	toolModeler: toolModeler,
	toolEditor: toolEditor,
	toolDetailsEditor: toolDetailsEditor,
	saveUtils: saveUtils,
	close: close,
	unsavedWarningExisting: unsavedWarningExisting,
	unsavedWarningNew: unsavedWarningNew,
	saveAs: saveAs,
	dontSave: dontSave,
	unsavedTitle: unsavedTitle,
	invalidRFTMessage: invalidRFTMessage,
	errorTitle: errorTitle,
	breadcrumb: breadcrumb,
	breadcrumbEditor: breadcrumbEditor,
	viewerModeTitle: viewerModeTitle,
	viewerModeMessage: viewerModeMessage,
	userStartDirection: userStartDirection,
	selectFunction: selectFunction,
	deselectFunction: deselectFunction,
	dialogTitle: dialogTitle,
	category: category,
	search: search,
	categoryNames: categoryNames
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (commonStrings_nl);


//# sourceMappingURL=common-strings.nl-bb99c2fc.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,