"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_arcgis-raster-function-editor_-a1425a"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/rfx-cte-factor-function-editor-312f39de.js":
/*!***************************************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/rfx-cte-factor-function-editor-312f39de.js ***!
  \***************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   R: () => (/* binding */ RfxCteFactorFunctionEditor)
/* harmony export */ });
/* harmony import */ var _index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-da1b7138.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/index-da1b7138.js");
/* harmony import */ var _localization_helper_4819b67d_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./localization-helper-4819b67d.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/localization-helper-4819b67d.js");
/* harmony import */ var _arcgis_core_core_lang_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @arcgis/core/core/lang.js */ "@arcgis/core/core/lang.js");
/* harmony import */ var _type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./type-gaurds-1840747f.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/type-gaurds-1840747f.js");
/* harmony import */ var _ui_utils_928a4096_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ui-utils-928a4096.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/ui-utils-928a4096.js");
/* harmony import */ var _interfaces_d0c68944_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./interfaces-d0c68944.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/interfaces-d0c68944.js");
/* harmony import */ var _arcgis_core_identity_IdentityManager_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @arcgis/core/identity/IdentityManager.js */ "@arcgis/core/identity/IdentityManager.js");
/* harmony import */ var _arcgis_core_core_urlUtils_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @arcgis/core/core/urlUtils.js */ "@arcgis/core/core/urlUtils.js");
/* harmony import */ var _arcgis_core_layers_Layer_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @arcgis/core/layers/Layer.js */ "@arcgis/core/layers/Layer.js");
/* harmony import */ var _arcgis_core_layers_ImageryLayer_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @arcgis/core/layers/ImageryLayer.js */ "@arcgis/core/layers/ImageryLayer.js");
/* harmony import */ var _arcgis_core_smartMapping_raster_renderers_stretch_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @arcgis/core/smartMapping/raster/renderers/stretch.js */ "@arcgis/core/smartMapping/raster/renderers/stretch.js");
/* harmony import */ var _arcgis_core_request_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @arcgis/core/request.js */ "@arcgis/core/request.js");
/* harmony import */ var _arcgis_core_rest_support_AlgorithmicColorRamp_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @arcgis/core/rest/support/AlgorithmicColorRamp.js */ "@arcgis/core/rest/support/AlgorithmicColorRamp.js");
/* harmony import */ var _arcgis_core_rest_support_MultipartColorRamp_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @arcgis/core/rest/support/MultipartColorRamp.js */ "@arcgis/core/rest/support/MultipartColorRamp.js");
/* harmony import */ var _arcgis_core_Color_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @arcgis/core/Color.js */ "@arcgis/core/Color.js");
/* harmony import */ var _colorRampUtils_8bdd46c5_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./colorRampUtils-8bdd46c5.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/colorRampUtils-8bdd46c5.js");
/* harmony import */ var _sanitize_number_d84114f7_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./sanitize-number-d84114f7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/sanitize-number-d84114f7.js");
/* harmony import */ var _arcgis_core_rest_geoprocessor_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @arcgis/core/rest/geoprocessor.js */ "@arcgis/core/rest/geoprocessor.js");
/* harmony import */ var _arcgis_core_portal_PortalItem_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @arcgis/core/portal/PortalItem.js */ "@arcgis/core/portal/PortalItem.js");




















const verticalFactorTypes = {
    BINARY: "factorFunctionBinary",
    LINEAR: "factorFunctionLinear",
    SYM_LINEAR: "factorFunctionSymLinear",
    INVERSE_LINEAR: "factorFunctionInvLinear",
    SYM_INVERSE_LINEAR: "factorFunctionSymInvLinear",
    COS: "factorFunctionCos",
    SEC: "factorFunctionSec",
    COS_SEC: "factorFunctionCosSec",
    SEC_COS: "factorFunctionSecCos"
    // TABLE: "factorFunctionTable"  // not yet supported
};
const horizontalFactorTypes = {
    BINARY: "factorFunctionBinary",
    FORWARD: "factorFunctionForward",
    LINEAR: "factorFunctionLinear",
    INVERSE_LINEAR: "factorFunctionInvLinear"
    // TABLE: "factorFunctionTable"  // not yet supported
};
const factorFunctionTypeModifiers = {
    zeroFactor: "factorFunctionZeroFactor",
    cutAngle: "factorFunctionCutAngle",
    sideValue: "factorFunctionSideFactor",
    slope: "factorFunctionSlope",
    lowCutAngle: "factorFunctionLowCutAngle",
    highCutAngle: "factorFunctionHighCutAngle",
    power: "localPower",
    cosPower: "factorFunctionCosPower",
    secPower: "factorFunctionSecPower",
    table: "factorFunctionTablePath"
};
/**
 * ***************************************************************************
 *                          Vertical Factor Modifiers
 * ***************************************************************************
 *
 * Keyword                   ZF      LCA    HCA    Slope  Power  CP    SP
 * ------------------------  ------  -----  -----  -----  -----  -----  -----
 * Binary                    1.0     -30    30     ~      ~      ~      ~
 * Linear                    1.0     -90    90      1/90  ~      ~      ~
 * Symmetric linear          1.0     -90    90      1/90  ~      ~      ~
 * Inverse linear            1.0     -45    45     -1/45  ~      ~      ~
 * Symmetric inverse linear  1.0     -45    45     -1/45  ~      ~      ~
 * Cos                       ~       -90    90     ~      1.0    ~      ~
 * Sec                       ~       -90    90     ~      1.0    ~      ~
 * Cos_sec                   ~       -90    90     ~      ~      1.0    1.0
 * Sec_cos                   ~       -90    90     ~      ~      1.0    1.0
 *
 */
const verticalFactorModifiers = {
    BINARY: {
        zeroFactor: 1.0,
        lowCutAngle: -30,
        highCutAngle: 30
    },
    LINEAR: {
        zeroFactor: 1.0,
        lowCutAngle: -90,
        highCutAngle: 90,
        slope: 1 / 90
    },
    SYM_LINEAR: {
        zeroFactor: 1.0,
        lowCutAngle: -90,
        highCutAngle: 90,
        slope: 1 / 90
    },
    INVERSE_LINEAR: {
        zeroFactor: 1.0,
        lowCutAngle: -45,
        highCutAngle: 45,
        slope: -(1 / 45)
    },
    SYM_INVERSE_LINEAR: {
        zeroFactor: 1.0,
        lowCutAngle: -45,
        highCutAngle: 45,
        slope: -(1 / 45)
    },
    COS: {
        lowCutAngle: -90,
        highCutAngle: 90,
        power: 1.0
    },
    SEC: {
        lowCutAngle: -90,
        highCutAngle: 90,
        power: 1.0
    },
    COS_SEC: {
        lowCutAngle: -90,
        highCutAngle: 90,
        cosPower: 1.0,
        secPower: 1.0
    },
    SEC_COS: {
        lowCutAngle: -90,
        highCutAngle: 90,
        cosPower: 1.0,
        secPower: 1.0
    }
};
/**
 * ***************************************************************************
 *                          Horizontal Factor Modifiers
 * ***************************************************************************
 *
 * Keywords         Zero factor   Cut angle     Slope   Side value
 * --------------   -----------   -----------   -----   ---------
 * Binary           1.0            45           ~       ~
 * Forward          0.5            45 (fixed)   ~       1.0
 * Linear           0.5           181            1/90   ~
 * Inverse linear   2.0           180           -1/90   ~
 */
const horizotalFactorModifiers = {
    BINARY: {
        zeroFactor: 1.0,
        cutAngle: 45
    },
    FORWARD: {
        zeroFactor: 0.5,
        // cutAngle: 45, // fixed so do not show in editor
        sideValue: 1
    },
    LINEAR: {
        zeroFactor: 0.5,
        cutAngle: 181,
        slope: 1 / 90
    },
    INVERSE_LINEAR: {
        zeroFactor: 2.0,
        cutAngle: 180,
        slope: -(1 / 90)
    }
};
const HelpClickHandlerKeys = {
    inputArgHelpClickHandler: "inputArgHelpClickHandler"
};
const component = "rfx-factor-function-editor";
const HTMLClasses = {
    container: `${component}__container`,
    select: `${component}__select`,
    text: `${component}__text`
};

const rfxCteFactorFunctionEditorCss = ":root{--calcite-color-brand:#007ac2;--calcite-color-brand-hover:#00619b;--calcite-color-brand-press:#004874;--calcite-color-status-info:#00619b;--calcite-color-status-success:#35ac46;--calcite-color-status-warning:#edd317;--calcite-color-status-danger:#d83020;--calcite-color-status-danger-hover:#a82b1e;--calcite-color-status-danger-press:#7c1d13;--calcite-color-background:#f8f8f8;--calcite-color-foreground-1:#ffffff;--calcite-color-foreground-2:#f3f3f3;--calcite-color-foreground-3:#eaeaea;--calcite-color-text-1:#151515;--calcite-color-text-2:#4a4a4a;--calcite-color-text-3:#6a6a6a;--calcite-color-text-inverse:#ffffff;--calcite-color-text-link:#00619b;--calcite-color-border-1:#cacaca;--calcite-color-border-2:#d4d4d4;--calcite-color-border-3:#dfdfdf;--calcite-color-border-input:#949494;--rfx-quarter-spacing:0.25rem;--rfx-half-spacing:0.5rem;--rfx-three-quarter-spacing:0.75rem;--rfx-full-spacing:1rem;--rfx-component-default-width:100%;--rfx-ui-border-input:var(--calcite-color-border-2);--rfx-popover-content-min-height:30vh;--rfx-popover-content-max-height:60vh;--rfx-popover-content-height:45vh;--rfx-widget-content-height:30vh}:host{height:100%;margin-bottom:var(--rfx-half-spacing)}.rfx-factor-function-editor__container{border:1px var(--calcite-color-border-1) solid;border-radius:var(--calcite-border-radius);padding:var(--rfx-half-spacing);margin-bottom:var(--rfx-half-spacing)}.rfx-factor-function-editor__select{padding:var(--rfx-quarter-spacing) var(--rfx-quarter-spacing) 0 var(--rfx-quarter-spacing)}.rfx-factor-function-editor__text{padding:0.5em 0 0.5em 0}";

const RfxCteFactorFunctionEditor = class {
    constructor(hostRef) {
        (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.rfxArgumentChange = (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "rfxArgumentChange", 7);
        /**
         * Stores event handlers for help action click, stored in connected callback to avoid
         * fetching function on each render ( to avoid common bad practice )
         */
        this.helpActionClickEventHandlers = new Map();
        /**
         * The same override widget is used for both vertical factor function override
         * and horizontal factor function override; hence define mode.
         */
        this.factorFunctionMode = null;
        /**
         * value and i18n strings key value pairs
         * for Dropdown options in vertical factor
         * key value should be the key values from verticalFactorModifiers
         * value should be corresponding i18n string from rfxArgs
         */
        this.verticalFactorTypes = verticalFactorTypes;
        /**
         * value and i18n strings key value pairs
         * for Dropdown options in horizontal factor
         * key value should be the key values from horizontalFactorModifiers
         * value should be corresponding i18n string from rfxArgs
         */
        this.horizontalFactorTypes = horizontalFactorTypes;
        /**
         * value and i18n strings key value pairs
         * for display string for Table below dropdown
         * common for both vertical and horizontal factor types
         * key value should be the key values from vertical/horizontalFactorModifiers
         * value should be corresponding i18n string from enumLabels
         */
        this.factorFunctionTypeModifiers = factorFunctionTypeModifiers;
        this.verticalFactorModifiers = verticalFactorModifiers;
        this.horizotalFactorModifiers = horizotalFactorModifiers;
        /**
         * Grid Schema
         */
        this.gridSchema = {
            gridLayout: {},
            gridOptions: [],
            hasBorder: false,
            hasHeader: false,
            canAdd: false,
            hasIdColumn: false,
            canRemove: false,
            isStacked: true
        };
        /**
         * holds store of factor function type select
         */
        this.store = [];
        /**
         * value of factor function type select
         */
        this.factorFunctionType = null;
        this.handleFactorFunctionTypeChange = (e) => {
            e.stopPropagation();
            const element = e.target;
            const value = element.value;
            this.factorFunctionType = value;
            const gridStore = this.createDataObjects(this.factorFunctionType);
            this.gridStore = gridStore;
        };
        this.updateGridValue = (event) => {
            const { detail: { gridOptions } } = event;
            if ((0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_3__.i)(gridOptions)) {
                return;
            }
            const gridStore = this.gridStore;
            gridStore.forEach((storeItem, index) => {
                storeItem.factorModifierValue = gridOptions[index].factorModifierValue;
                return storeItem;
            });
            this.gridStore = [...gridStore];
        };
        this.gridStore = [];
        this.widgetArgs = undefined;
        this.value = undefined;
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    connectedCallback() {
        this.processWidgetArgs(this.widgetArgs);
    }
    async componentWillLoad() {
        ({ strings: this.strings, dir: this.direction } = await (0,_localization_helper_4819b67d_js__WEBPACK_IMPORTED_MODULE_1__.b)(this.hostElement, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.g)(".")));
        this.setupInitialState();
    }
    componentWillRender() {
        this.initGrid();
        this.setWidgetValue();
    }
    componentDidLoad() {
        this.attachHelpClickEventHandlers();
    }
    //--------------------------------------------------------------------------
    //
    //  Private Methods
    //
    //--------------------------------------------------------------------------
    /**
     * All validation logic of widgetArgs -> mainly the inputArgs and triggerAttributes
     * goes here
     */
    processWidgetArgs({ inputArgs, triggerArgs }) {
        // should have only one inputArg
        Object.keys(inputArgs).forEach((_inputArg) => {
            const rfxArg = inputArgs[_inputArg];
            this.inputArg = rfxArg;
            rfxArg.input = this.hostElement;
        });
        // this.triggerArgs should have only 1 key
        Object.keys(triggerArgs).forEach((triggerArgKey) => {
            const triggerArg = triggerArgs[triggerArgKey];
            this.triggerArg = triggerArg;
            this.factorFunctionMode =
                triggerArgKey.indexOf("vertical") >= 0
                    ? "VERTICAL"
                    : triggerArgKey.indexOf("horizontal") >= 0
                        ? "HORIZONTAL"
                        : null;
            triggerArg?.input?.addEventListener("rfxArgumentChange", ({ detail: { value } }) => {
                this.handleTriggerArgChange(value);
            });
        });
    }
    setupInitialState() {
        this.store = this.getFactorFunctionTypesStore();
        const persistedData = this.inputArg?.value;
        const { factorFunctionType, gridData } = this.parseWidgetValue(persistedData);
        this.factorFunctionType = factorFunctionType ?? this.store[0]?.key;
        const gridStore = this.createDataObjects(this.factorFunctionType);
        // if persisted data is present override the gridStore
        if (!(0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_3__.i)(gridData)) {
            gridStore.forEach((storeItem, index) => {
                storeItem.factorModifierValue = gridData[index];
                return storeItem;
            });
        }
        this.gridStore = gridStore;
    }
    /**
     * Creates an array of data objects, expected input of form: { zeroFactor: 1.0, cutAngle: 45 }
     * use factorFunctionTypeModifiers object to push the i18n display name for appropriate modifier
     * Format is such that, it is understood by the rfx-grid
     * @returns {Object[]} An array of data objects.
     */
    createDataObjects(factorFunctionType) {
        // get Modifiers for that factorFunctionType
        const factorFunctionTypeModifier = this.getFactorFunctionTypeModifier(factorFunctionType);
        const widgetData = [];
        if (!factorFunctionTypeModifier) {
            return widgetData;
        }
        Object.keys(factorFunctionTypeModifier).forEach((modifier, index) => {
            widgetData.push({
                id: index + 1,
                factorModifier: this.strings[this.factorFunctionTypeModifiers[modifier]],
                factorModifierValue: (0,_sanitize_number_d84114f7_js__WEBPACK_IMPORTED_MODULE_16__.f)(factorFunctionTypeModifier[modifier], 3)
            });
        });
        return widgetData;
    }
    initGrid() {
        /* Shell Layout as the column headers won't be visible
         * | modifier Text | modifier value | (name)
         * | string        | long           | (dataType)
         * | false         | true           | (isEditable)
         */
        const gridLayout = {
            factorModifier: {
                uiType: _interfaces_d0c68944_js__WEBPACK_IMPORTED_MODULE_5__.G.text
            },
            factorModifierValue: {
                uiType: _interfaces_d0c68944_js__WEBPACK_IMPORTED_MODULE_5__.G.number
            }
        };
        // set when data is persisted & whenever factor function type is changed
        const gridOptions = this.gridStore;
        this.gridSchema = {
            ...this.gridSchema,
            gridLayout,
            gridOptions
        };
    }
    attachHelpClickEventHandlers() {
        const inputArgHelpClickHandler = this.widgetArgs.onHelpActionClick({
            heading: this.inputArg.displayName,
            referenceElement: this.widgetContainer,
            helpTextID: this.inputArg?.helpTextID
        });
        this.helpActionClickEventHandlers.set(HelpClickHandlerKeys.inputArgHelpClickHandler, inputArgHelpClickHandler);
    }
    /**
     * handles raster change, mainly used to clear value when raster is removed
     */
    handleTriggerArgChange(value) {
        const isRasterRemoved = (0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_3__.i)(value);
        if (!isRasterRemoved) {
            return;
        }
        this.setWidgetValue();
    }
    /**
     * function returns store for creating Factor Function Types Select
     */
    getFactorFunctionTypesStore() {
        let store;
        switch (this.factorFunctionMode) {
            case "VERTICAL":
                store = this.verticalFactorTypes;
                break;
            case "HORIZONTAL":
                store = this.horizontalFactorTypes;
                break;
        }
        const selectOptions = Object.keys(store).map((selectOption) => {
            return {
                key: selectOption,
                label: this.strings[store[selectOption]]
            };
        });
        return selectOptions;
    }
    /**
     * @factorFunctionType {string} - key of either verticalFactorTypes or horizontalFactorTypes
     * function which returns the Factor Function Type Modifier;
     * using verticalFactorModifiers, horizotalFactorModifiers and factorFunctionMode
     */
    getFactorFunctionTypeModifier(factorFunctionType) {
        let factorFunctionTypeModifier;
        switch (this.factorFunctionMode) {
            case "VERTICAL":
                factorFunctionTypeModifier = this.verticalFactorModifiers[factorFunctionType];
                break;
            case "HORIZONTAL":
                factorFunctionTypeModifier = this.horizotalFactorModifiers[factorFunctionType];
                break;
        }
        return factorFunctionTypeModifier;
    }
    /**
     * Function parses the widget Value and return data in fromat accepted by
     * grid store and the factorFunctionTypeSelect widget
     * @param {string} widgetValue usually of the format "BINARY 12 2.5 0.3"
     */
    parseWidgetValue(widgetValue) {
        if ((0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_3__.i)(widgetValue)) {
            return {
                gridData: undefined,
                factorFunctionType: undefined
            };
        }
        // widgetValue                                       // BINARY 10 10 2
        const widgetValueFragments = widgetValue.split(" "); // ["BINARY", "10", "10", "2"]
        const factorFunctionType = widgetValueFragments[0]; // ["BINARY"]
        const factorFunctionGridData = widgetValueFragments.splice(1); // ["10", "10", "2"]
        return {
            gridData: factorFunctionGridData,
            factorFunctionType: factorFunctionType
        };
    }
    setWidgetValue() {
        const widgetValue = `${this.factorFunctionType} ${this.gridStore
            .map((option) => option.factorModifierValue)
            .join(" ")}`;
        const isTriggerArgPresent = !(0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_3__.i)(this.triggerArg?.input?.value);
        const value = isTriggerArgPresent ? widgetValue : undefined;
        this.value = value;
    }
    render() {
        return ((0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { alignment: "start", scale: _ui_utils_928a4096_js__WEBPACK_IMPORTED_MODULE_4__.U.Scale, layout: "default", ref: (e) => {
                this.widgetContainer = e;
            } }, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("rfx-label", { label: this.inputArg.displayName, onRfxLabelHelpActionClick: () => this.helpActionClickEventHandlers.get(HelpClickHandlerKeys.inputArgHelpClickHandler)() }), (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: HTMLClasses.container }, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: HTMLClasses.select }, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: HTMLClasses.text }, this.strings.type), (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("rfx-dtex-common-select", { options: this.store, value: this.factorFunctionType, onRfxArgumentChange: this.handleFactorFunctionTypeChange })), (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("rfx-grid", { hasHeader: this.gridSchema.hasHeader, canAdd: this.gridSchema.canAdd, hasIdColumn: this.gridSchema.hasIdColumn, gridLayout: this.gridSchema.gridLayout, gridOptions: this.gridSchema.gridOptions, hasBorder: this.gridSchema.hasBorder, canRemove: this.gridSchema.canRemove, isStacked: this.gridSchema.isStacked, onRfxGridOptionChange: this.updateGridValue })))));
    }
    static get assetsDirs() { return ["t9n"]; }
    get hostElement() { return (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.a)(this); }
};
RfxCteFactorFunctionEditor.style = rfxCteFactorFunctionEditorCss;



//# sourceMappingURL=rfx-cte-factor-function-editor-312f39de.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/rfx-cte-factor-function-editor.entry.js":
/*!************************************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/rfx-cte-factor-function-editor.entry.js ***!
  \************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   rfx_cte_factor_function_editor: () => (/* reexport safe */ _rfx_cte_factor_function_editor_312f39de_js__WEBPACK_IMPORTED_MODULE_0__.R)
/* harmony export */ });
/* harmony import */ var _rfx_cte_factor_function_editor_312f39de_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./rfx-cte-factor-function-editor-312f39de.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/rfx-cte-factor-function-editor-312f39de.js");
/* harmony import */ var _index_da1b7138_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index-da1b7138.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/index-da1b7138.js");
/* harmony import */ var _localization_helper_4819b67d_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./localization-helper-4819b67d.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/localization-helper-4819b67d.js");
/* harmony import */ var _arcgis_core_core_lang_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @arcgis/core/core/lang.js */ "@arcgis/core/core/lang.js");
/* harmony import */ var _type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./type-gaurds-1840747f.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/type-gaurds-1840747f.js");
/* harmony import */ var _getTag_96af029d_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./_getTag-96af029d.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/_getTag-96af029d.js");
/* harmony import */ var _ui_utils_928a4096_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./ui-utils-928a4096.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/ui-utils-928a4096.js");
/* harmony import */ var _interfaces_d0c68944_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./interfaces-d0c68944.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/interfaces-d0c68944.js");
/* harmony import */ var _arcgis_core_identity_IdentityManager_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @arcgis/core/identity/IdentityManager.js */ "@arcgis/core/identity/IdentityManager.js");
/* harmony import */ var _arcgis_core_core_urlUtils_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @arcgis/core/core/urlUtils.js */ "@arcgis/core/core/urlUtils.js");
/* harmony import */ var _arcgis_core_layers_Layer_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @arcgis/core/layers/Layer.js */ "@arcgis/core/layers/Layer.js");
/* harmony import */ var _arcgis_core_layers_ImageryLayer_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @arcgis/core/layers/ImageryLayer.js */ "@arcgis/core/layers/ImageryLayer.js");
/* harmony import */ var _arcgis_core_smartMapping_raster_renderers_stretch_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @arcgis/core/smartMapping/raster/renderers/stretch.js */ "@arcgis/core/smartMapping/raster/renderers/stretch.js");
/* harmony import */ var _arcgis_core_request_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @arcgis/core/request.js */ "@arcgis/core/request.js");
/* harmony import */ var _arcgis_core_rest_support_AlgorithmicColorRamp_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @arcgis/core/rest/support/AlgorithmicColorRamp.js */ "@arcgis/core/rest/support/AlgorithmicColorRamp.js");
/* harmony import */ var _arcgis_core_rest_support_MultipartColorRamp_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @arcgis/core/rest/support/MultipartColorRamp.js */ "@arcgis/core/rest/support/MultipartColorRamp.js");
/* harmony import */ var _arcgis_core_Color_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @arcgis/core/Color.js */ "@arcgis/core/Color.js");
/* harmony import */ var _colorRampUtils_8bdd46c5_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./colorRampUtils-8bdd46c5.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/colorRampUtils-8bdd46c5.js");
/* harmony import */ var _sanitize_number_d84114f7_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./sanitize-number-d84114f7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/sanitize-number-d84114f7.js");
/* harmony import */ var _arcgis_core_rest_geoprocessor_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! @arcgis/core/rest/geoprocessor.js */ "@arcgis/core/rest/geoprocessor.js");
/* harmony import */ var _arcgis_core_portal_PortalItem_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! @arcgis/core/portal/PortalItem.js */ "@arcgis/core/portal/PortalItem.js");






















//# sourceMappingURL=rfx-cte-factor-function-editor.entry.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/sanitize-number-d84114f7.js":
/*!************************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/sanitize-number-d84114f7.js ***!
  \************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ formatNumberToLocale),
/* harmony export */   f: () => (/* binding */ formatNumber),
/* harmony export */   i: () => (/* binding */ isValidNumber),
/* harmony export */   p: () => (/* binding */ parseNumber),
/* harmony export */   s: () => (/* binding */ sanitizeNumber)
/* harmony export */ });
/* harmony import */ var _localization_helper_4819b67d_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./localization-helper-4819b67d.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/localization-helper-4819b67d.js");
/* harmony import */ var _type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./type-gaurds-1840747f.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/type-gaurds-1840747f.js");



/**
 * Indicates if a provided number value is valid.
 * An invalid value is: undefined | NaN | Infinite | -Infinite | null
 * See for more details:
 *   - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isFinite
 *   - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN
 * @param {number | undefined | null} value value to check
 * @returns {boolean} if valid or not
 */
function isValidNumber(value) {
    return value !== undefined && value !== null && Number.isNaN(value) === false && Number.isFinite(value) === true;
}
/**
 * Returns a string representation of the provided number for use with calcite-input. It also
 * guards against invalid types following this logic:
 *   - If the value is valid (not NaN, finite), the value is returned as a string
 *   - If not and if a valid default value is provided, the default value is returned as a string
 *   - If not, an empty string is returned
 * @param value
 * @param defaultValue
 * @returns a sanitized string
 */
function sanitizeNumber(value, defaultValue) {
    let returnedValue;
    if (value !== null) {
        const testedValue = typeof value === "string" ? Number.parseFloat(value) : value;
        if (isValidNumber(testedValue))
            returnedValue = testedValue;
        else if (isValidNumber(defaultValue))
            returnedValue = defaultValue;
    }
    return returnedValue === undefined ? "" : `${returnedValue}`;
}
/**
 * Parses a value string to a number for use with calcite-input. If the string is empty, it will return undefined.
 * If the string is otherwise invalid, it will return NaN.
 * @param value calcite-input value
 * @returns {number | undefined} the parsed number
 */
function parseNumber(value) {
    if (value === "")
        return undefined;
    return Number.parseFloat(value);
}
/**
 * Formats a number to a specified number of decimal places.
 *
 * @param {number} value - The number to format.
 * @param {number} [fractionDigits=3] - The number of decimal places to include in the formatted number. Defaults to 3.
 * @returns {number|undefined} - The formatted number, or undefined if the input value is empty.
 */
function formatNumber(value, fractionDigits = 3) {
    if ((0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_1__.i)(value))
        return undefined;
    return Number.parseFloat(value.toFixed(fractionDigits));
}
/**
 * Formats a number or string representing a number according to the locale, passing Intl number format options
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/ReferenceGlobal_Objects/Intl/NumberFormat/NumberFormat#options
 * @param {number | string | undefined} value to be formatted and localized
 * @param {Intl.NumberFormatOptions} formatOptions options object matching Intl.NumberFormat
 * @returns {string} localized / rounded string
 */
function formatNumberToLocale(value, formatOptions) {
    let formattedValue = "";
    if (!(0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_1__.i)(value) && !Number.isNaN(value)) {
        const localeCode = (0,_localization_helper_4819b67d_js__WEBPACK_IMPORTED_MODULE_0__.g)().locale;
        formattedValue = Intl.NumberFormat(localeCode, formatOptions).format(Number(value));
    }
    return formattedValue;
}



//# sourceMappingURL=sanitize-number-d84114f7.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/ui-utils-928a4096.js":
/*!*****************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/ui-utils-928a4096.js ***!
  \*****************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   C: () => (/* binding */ CalciteScale),
/* harmony export */   U: () => (/* binding */ UIDefaults),
/* harmony export */   a: () => (/* binding */ CalciteOverlayPositioning)
/* harmony export */ });
const UIDefaults = {
    Scale: "s",
    PopoverTimer: 60
};
const CalciteScale = {
    s: "s",
    m: "m"
};
const CalciteOverlayPositioning = {
    absolute: "absolute",
    fixed: "fixed"
};



//# sourceMappingURL=ui-utils-928a4096.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,