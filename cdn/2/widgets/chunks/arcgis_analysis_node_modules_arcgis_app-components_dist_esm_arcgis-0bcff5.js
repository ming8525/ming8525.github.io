"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_arcgis-0bcff5"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-raster-multidimensional-variable-info.entry.js":
/*!***********************************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-raster-multidimensional-variable-info.entry.js ***!
  \***********************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   arcgis_raster_multidimensional_variable_info: () => (/* binding */ ArcgisRasterMultidimensionalVariableInfo)
/* harmony export */ });
/* harmony import */ var _index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-e3bf7da7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-e3bf7da7.js");
/* harmony import */ var _loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./loadModules-b4ac1247.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-b4ac1247.js");
/* harmony import */ var _multidimensional_69f3968f_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./multidimensional-69f3968f.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/multidimensional-69f3968f.js");
/* harmony import */ var _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./languageUtil-ef0e54b2.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-ef0e54b2.js");
/* harmony import */ var _commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./commonFunctions-b0830e9e.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/commonFunctions-b0830e9e.js");
/* harmony import */ var _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./commonEnums-fcf13661.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/commonEnums-fcf13661.js");
/* harmony import */ var _dom_4d367677_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./dom-4d367677.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-4d367677.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */








const arcgisRasterMultidimensionalVariableInfoCss = ":host{display:flex;flex:1 1 auto}:host .accordion-item-content,:host .accordion-item-header{--calcite-accordion-item-border:transparent}.info-section-container{border:none;--calcite-color-border-2:transparent}.info-section{padding-bottom:0.5rem;overflow-y:auto;--calcite-accordion-item-border:transparent;background-color:white}.info-general{padding:10px 15px;background-color:white}.info-content{margin:10px 10px}.info-content .info-block{color:var(--calcite-color-text-3, gray);max-height:4rem;min-height:1rem;overflow:hidden}.info-content .info-block .info-text{width:100%;word-break:normal;text-overflow:ellipsis;font-size:var(--calcite-font-size--2)}.popover{z-index:100}.table{width:100%;background-color:#ffffff;border-collapse:collapse;border-spacing:0;border:1px solid var(--calcite-color-border-1);text-align:left;overflow:auto;font-size:var(--calcite-font-size--2);color:var(--calcite-color-text-1);line-height:1.5rem}.table caption{text-align:left;margin-top:5px}.table td{display:table-cell;vertical-align:inherit}.table td:first-child{width:30%}.table th,.table td{font-weight:300;padding:2px 5px;text-align:left}.table tr:nth-child(odd){background-color:#f8f8f8}.table.table-bordered tr{border-bottom:1px solid var(--calcite-color-border-1)}.table.table-bordered tr:last-child{border-bottom:none}.table.table-bordered tr td:first-child{border-right:1px solid var(--calcite-color-border-1)}.table.table-borderless{border:none}.arcgis--rtl .table.table-bordered tr td:first-child{border-left:1px solid var(--calcite-color-border-1);border-right:none}";

const ArcgisRasterMultidimensionalVariableInfo = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisRasterMultidimensionalVariableInfoDismiss = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisRasterMultidimensionalVariableInfoDismiss", 7);
        this.variableInfo = undefined;
        this.popoverProps = undefined;
        this.showStatistics = false;
        this.showDimensionSummary = false;
        this.useTable = true;
        this.keepActiveDimension = true;
        this.strings = undefined;
        this.activeDimensionName = null;
        this.isOpen = false;
    }
    watchVariableInfo(_newValue, oldValue) {
        if (this.keepActiveDimension && this.dimensionEL && oldValue) {
            // calcite-accordion doesn't expose active/expanded item or public item select/close event
            const activeItem = this.dimensionEL.querySelector("calcite-accordion-item[active]");
            if (activeItem) {
                const index = activeItem.getAttribute("dimension-index");
                const dimension = oldValue.dimensions[index];
                this.activeDimensionName = dimension.name;
            }
            else {
                this.activeDimensionName = null;
            }
        }
        else {
            this.activeDimensionName = null;
        }
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    async componentWillLoad() {
        [this.intl] = await (0,_loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_1__.l)(["esri/intl"]);
        this.messages = await this.intl.fetchMessageBundle("esri/core/t9n/Units");
    }
    componentDidLoad() {
        this.isOpen = true;
    }
    // --------------------------------------------------------------------------
    //
    // Public Methods
    //
    // --------------------------------------------------------------------------
    async setFocus(focusId) {
        var _a, _b;
        if (focusId === "dismiss-button") {
            (_a = this.panelElement) === null || _a === void 0 ? void 0 : _a.setFocus();
            return;
        }
        (_b = this.hostElement) === null || _b === void 0 ? void 0 : _b.focus();
    }
    async reposition() {
        var _a;
        (_a = this.popoverNode) === null || _a === void 0 ? void 0 : _a.reposition();
    }
    // --------------------------------------------------------------------------
    //
    //  Render methods
    //
    // --------------------------------------------------------------------------
    render() {
        const statsTable = this.showStatistics && this.renderStatistics();
        const dimensionsList = this.renderDimensions();
        const variableInfoBlock = ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-accordion", { class: "info-section-container", selectionMode: "single", ref: (el) => (this.dimensionEL = el) }, statsTable, dimensionsList));
        const { popoverProps, variableInfo } = this;
        const width = `${popoverProps.refElement.getBoundingClientRect().width}px`;
        const label = variableInfo.unit
            ? `${variableInfo.name} (${variableInfo.unit})`
            : `${variableInfo.name}`;
        const summary = this.showDimensionSummary
            ? variableInfo.dimensions
                .map((dimInfo) => `${dimInfo.name}: ${dimInfo.values.length}`)
                .join(", ")
            : null;
        const generalInfoBlock = this.renderGeneralInfo();
        const dir = (0,_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_3__.g)(this.hostElement);
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.H, { class: "js-app-flyout" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-popover", { dir: dir, placement: popoverProps.placement || "leading-start", open: this.isOpen, pointerDisabled: true, referenceElement: popoverProps.refElement, offsetDistance: popoverProps.offsetDistance || 0, offsetSkidding: popoverProps.offsetSkidding || 0, triggerDisabled: true, label: label, class: "popover", style: { width }, ref: (node) => (this.popoverNode = node) }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-panel", { ref: (el) => (this.panelElement = el), heading: label, description: summary, class: {
                panel: true,
                [_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_3__.C.rtl]: dir === "rtl"
            }, closable: true, onCalcitePanelClose: () => this.arcgisRasterMultidimensionalVariableInfoDismiss.emit() }, generalInfoBlock, variableInfoBlock))));
    }
    renderGeneralInfo() {
        const strings = this.strings.multidimensionalInfo;
        const { unit, description } = this.variableInfo;
        const hasColormap = !!this.variableInfo.colormap;
        return this.renderInfoSection([
            { name: strings.description, description: description || strings.none },
            { name: strings.unit, description: unit || strings.none },
            { name: strings.colormap, description: hasColormap ? strings.present : strings.none }
        ], null, "info-general");
    }
    renderInfoSection(nameDescriptions, caption, css) {
        return this.useTable ? ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: css }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("table", { class: "table table-bordered" }, caption && (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("caption", null, caption), nameDescriptions.map(({ name, description }) => ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("tr", null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("td", null, name), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("td", null, description))))))) : ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: `info-content ${css !== null && css !== void 0 ? css : ""}` }, nameDescriptions.map(({ name, description }) => ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { scale: "s" }, name, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "info-block" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "info-text" }, description)))))));
    }
    renderStatistics() {
        const { name, statistics } = this.variableInfo;
        if (!(statistics === null || statistics === void 0 ? void 0 : statistics.length)) {
            return null;
        }
        const strings = this.strings.multidimensionalInfo;
        const mins = this._formatStats(statistics.map(({ min }) => min));
        const maxs = this._formatStats(statistics.map(({ max }) => max));
        const means = this._formatStats(statistics.map(({ avg }) => avg));
        const stddevs = this._formatStats(statistics.map(({ stddev }) => stddev));
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-accordion-item", { "icon-position": "start", heading: strings.statistics, key: `${name}-stats}`, class: "info-section" }, this.renderInfoSection([
            { name: strings.minimum, description: mins },
            { name: strings.maximum, description: maxs },
            { name: strings.mean, description: means },
            { name: strings.stddev, description: stddevs }
        ])));
    }
    renderDimensions() {
        const { multidimensionalInfo: strings } = this.strings;
        const { name, dimensions } = this.variableInfo;
        return dimensions.map((dimensionInfo, i) => {
            const { name: dimName, values, interval, intervalUnit, hasRegularIntervals, extent } = dimensionInfo;
            let dimensionLabel = dimName === "StdTime"
                ? strings.stdTimeDimension
                : dimName === "StdZ"
                    ? strings.stdZDimension
                    : strings.generalDimension.replace("${dimensionName}", dimName);
            dimensionLabel += ` (${values.length})`;
            const intervalUnitLabel = this._formatUnit(intervalUnit);
            const intervalLabel = interval
                ? `${interval} (${hasRegularIntervals ? strings.regular : strings.irregular})`
                : "";
            const from = (0,_multidimensional_69f3968f_js__WEBPACK_IMPORTED_MODULE_2__.f)(extent[0], dimensionInfo, { intl: this.intl });
            const to = (0,_multidimensional_69f3968f_js__WEBPACK_IMPORTED_MODULE_2__.f)(extent[1], dimensionInfo, { intl: this.intl });
            const extentLabel = `${from} - ${to}`;
            return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-accordion-item", { "icon-position": "start", expanded: dimName === this.activeDimensionName, heading: dimensionLabel, "dimension-index": i, key: `${name}-${dimName}`, class: "info-section" }, this.renderInfoSection([
                { name: strings.interval, description: intervalLabel },
                { name: strings.intervalUnit, description: intervalUnitLabel },
                { name: strings.extent, description: extentLabel }
            ])));
        });
    }
    // --------------------------------------------------------------------------
    //
    //  Private methods
    //
    // --------------------------------------------------------------------------
    _formatStats(values) {
        return values.map((value) => this.intl.formatNumber(value)).join("; ");
    }
    _formatUnit(unit) {
        var _a, _b, _c;
        if (unit) {
            const srcUnit = unit.replace("esri", "");
            unit = srcUnit.toLowerCase();
            unit = (_c = (_a = this.strings.time[unit]) !== null && _a !== void 0 ? _a : (_b = this.messages.units[unit]) === null || _b === void 0 ? void 0 : _b.plural) !== null && _c !== void 0 ? _c : srcUnit;
        }
        return unit !== null && unit !== void 0 ? unit : "";
    }
    get hostElement() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
    static get watchers() { return {
        "variableInfo": ["watchVariableInfo"]
    }; }
};
ArcgisRasterMultidimensionalVariableInfo.style = arcgisRasterMultidimensionalVariableInfoCss;



//# sourceMappingURL=arcgis-raster-multidimensional-variable-info.entry.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/multidimensional-69f3968f.js":
/*!**********************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/multidimensional-69f3968f.js ***!
  \**********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ getMultidimensionalInfo),
/* harmony export */   b: () => (/* binding */ getDefaultDimensionSliceValue),
/* harmony export */   c: () => (/* binding */ getMultidimensionalDefinition),
/* harmony export */   f: () => (/* binding */ formatDimensionValue),
/* harmony export */   g: () => (/* binding */ getClippedDimensionInfo),
/* harmony export */   i: () => (/* binding */ isTimeDimension),
/* harmony export */   m: () => (/* binding */ minVersionRFTMultidimensionalInfo),
/* harmony export */   u: () => (/* binding */ updateDimensionalDefinition)
/* harmony export */ });
/* harmony import */ var _commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./commonFunctions-b0830e9e.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/commonFunctions-b0830e9e.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */


const minVersionRFTMultidimensionalInfo = 10.9;
function formatTime(value, options) {
    const date = new Date(value);
    const { useFriendlyISOFormat, intl, format } = options;
    if (useFriendlyISOFormat && intl) {
        return intl.formatDate(date, Object.assign(Object.assign({}, intl.convertDateFormatToIntlOptions(format !== null && format !== void 0 ? format : "short-date-long-time")), { timeZone: "UTC" }));
    }
    let isoTimeString = new Date(value).toISOString();
    isoTimeString = isoTimeString.slice(0, isoTimeString.indexOf(".")) + "Z";
    return isoTimeString;
}
function formatMonth(value_base1, intl, format = "long") {
    // using an arbitrary date (the day the code was written) to avoid side effects of setMonth near the end of the month
    // setMonth will move the date to the next month when new month doesn't have current date (e.g. 9/31, 2/30)
    // date = new Date(2002, 9, 31); date.setMonth(8); console.log(date.toLocaleDateString())
    const date = new Date(2022, 9, 10);
    date.setMonth(value_base1 - 1);
    return intl.formatDate(date, { month: format });
}
function formatQuarter(value_base1, intl) {
    const startMonth = formatMonth((value_base1 - 1) * 3 + 1, intl, "short");
    const endMonth = formatMonth(value_base1 * 3, intl, "short");
    return `${startMonth} - ${endMonth}`;
}
function formatDimensionValue(value, dimensionInfo, options = {}) {
    var _a, _b, _c, _d;
    if (value == null) {
        return "";
    }
    const { intl, useRecurringTimeLabel } = options;
    if (useRecurringTimeLabel && intl && !Array.isArray(value)) {
        const intervalUnit = (_a = dimensionInfo.intervalUnit) === null || _a === void 0 ? void 0 : _a.toLowerCase().trim();
        // weekly and daily are not supported yet
        const canUseRecurringTimeLabel = isRecurringTimeDimension(dimensionInfo) && (intervalUnit === "months" || intervalUnit === "quarters");
        if (canUseRecurringTimeLabel) {
            return intervalUnit === "months" ? formatMonth(value, intl) : formatQuarter(value, intl);
        }
    }
    // this is prefered when labeling a slider alike control
    const lastElement = (_b = dimensionInfo.values) === null || _b === void 0 ? void 0 : _b[dimensionInfo.values.length - 1];
    if (options.useStartOrEndForRangedValue && Array.isArray(value) && value.length === 2 && Array.isArray(lastElement)) {
        const isLastElement = value.join("-") === lastElement.join("-");
        value = isLastElement ? value[1] : value[0];
    }
    const isTime = isTimeDimension(dimensionInfo);
    if (!isTime) {
        return Array.isArray(value)
            ? value.map((element) => { var _a; return (_a = intl === null || intl === void 0 ? void 0 : intl.formatNumber(element)) !== null && _a !== void 0 ? _a : String(element); }).join(" - ")
            : (_c = intl === null || intl === void 0 ? void 0 : intl.formatNumber(value)) !== null && _c !== void 0 ? _c : String(value);
    }
    if (options.useFriendlyISOFormat && !options.format) {
        let resolution = (_d = dimensionInfo.intervalUnit) === null || _d === void 0 ? void 0 : _d.toLowerCase().trim();
        let { interval, extent } = dimensionInfo;
        if (resolution === "months") {
            if (interval > 11) {
                resolution = "year";
            }
        }
        else if (resolution === "days") {
            if (interval > 364) {
                resolution = "year";
            }
            else if (interval > 27) {
                resolution = "months";
            }
        }
        else if (resolution === "hours") {
            resolution = "days";
        }
        if (!["years", "months", "days"].includes(resolution) && (extent === null || extent === void 0 ? void 0 : extent.length)) {
            const interval = (extent[1] - extent[0]) / dimensionInfo.values.length;
            const day = 86400000;
            if (interval >= 365 * day) {
                resolution = "years";
            }
            else if (interval >= 28 * day) {
                resolution = "months";
            }
        }
        const format = resolution === "years" ? "year" : resolution === "months" ? "short-month-year" : "short-date";
        options = Object.assign({ format }, options);
    }
    return Array.isArray(value)
        ? value.map((element) => formatTime(element, options)).join(" - ")
        : formatTime(value, options);
}
function getClippedDimensionInfo(dimensionInfo, multidimensionalSubset) {
    var _a;
    const constraint = (_a = multidimensionalSubset === null || multidimensionalSubset === void 0 ? void 0 : multidimensionalSubset.dimensions) === null || _a === void 0 ? void 0 : _a.find(({ name }) => name === dimensionInfo.name);
    if (!(constraint === null || constraint === void 0 ? void 0 : constraint.extent)) {
        return dimensionInfo;
    }
    const extent = [...constraint.extent];
    const values = dimensionInfo.values.filter((value) => {
        // must be contained, intersection is not sufficient
        if (Array.isArray(value)) {
            if (!(0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_0__.i)(extent[1]) || extent[0] === extent[1]) {
                return value[0] === extent[0];
            }
            return value[0] >= extent[0] && value[0] <= extent[1] && value[1] >= extent[0] && value[1] <= extent[1];
        }
        return value >= extent[0] && value <= extent[1];
    });
    // this is a special case, when last slice of a ranged dimension series is used
    if (values.length === 0) {
        const lastValue = dimensionInfo.values[dimensionInfo.values.length - 1];
        if (Array.isArray(lastValue) && lastValue[1] === extent[0]) {
            values.push(lastValue);
        }
    }
    return Object.assign(Object.assign({}, dimensionInfo), { extent, values });
}
function getDefaultDimensionSliceValue(dimensionInfo) {
    var _a;
    const { values, extent, name } = dimensionInfo;
    let value = (_a = values === null || values === void 0 ? void 0 : values[0]) !== null && _a !== void 0 ? _a : extent[0];
    if (name.toLowerCase() === "stdz" &&
        !dimensionInfo.hasRanges &&
        Math.abs(extent[1]) <= Math.abs(extent[0])) {
        if (values === null || values === void 0 ? void 0 : values.length) {
            value = values[values.length - 1];
        }
        else {
            value = extent[1];
        }
    }
    return value;
}
function getMultidimensionalDefinition(layer) {
    var _a, _b;
    return layer.type === "imagery-tile"
        ? layer.multidimensionalDefinition
        : (_b = ((_a = layer.mosaicRule) !== null && _a !== void 0 ? _a : layer._defaultServiceMosaicRule)) === null || _b === void 0 ? void 0 : _b.multidimensionalDefinition;
}
async function getMultidimensionalInfo(layer, useRawSourceInfo) {
    var _a, _b;
    if (layer.type === "imagery-tile") {
        return layer.rasterInfo.multidimensionalInfo;
    }
    const { rasterFunction, version } = layer;
    if (useRawSourceInfo ||
        version <= minVersionRFTMultidimensionalInfo ||
        !rasterFunction ||
        ((_a = rasterFunction.functionName) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === "none") {
        return layer.serviceRasterInfo.multidimensionalInfo;
    }
    const rasterInfo = (_b = (await layer.generateRasterInfo(layer.rasterFunction))) !== null && _b !== void 0 ? _b : layer.serviceRasterInfo;
    return rasterInfo.multidimensionalInfo;
}
function isTimeDimension(dimensionInfo, ignoreRecuring = false) {
    return dimensionInfo.name === "StdTime" && (ignoreRecuring || !dimensionInfo.recurring);
}
function isRecurringTimeDimension(dimensionInfo) {
    return dimensionInfo.name === "StdTime" && !!dimensionInfo.recurring;
}
function updateDimensionalDefinition(def, dimensionInfo, activeMultidimensionalSubset) {
    dimensionInfo = getClippedDimensionInfo(dimensionInfo, activeMultidimensionalSubset);
    const originalFormattedValue = formatDimensionValue(def.values[0], dimensionInfo);
    const hasOriginalFormattedValue = dimensionInfo.values.some((val) => originalFormattedValue === formatDimensionValue(val, dimensionInfo));
    if (!hasOriginalFormattedValue) {
        // get default slice value when def.values is invalid
        const value = getDefaultDimensionSliceValue(dimensionInfo);
        def.values = [value];
    }
}



//# sourceMappingURL=multidimensional-69f3968f.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,