"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_arcgis-raster-function-editor_-c46b13"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/common-strings.hu-6eebefc3.js":
/*!**************************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/common-strings.hu-6eebefc3.js ***!
  \**************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   addRaster: () => (/* binding */ addRaster),
/* harmony export */   addScalar: () => (/* binding */ addScalar),
/* harmony export */   breadcrumb: () => (/* binding */ breadcrumb),
/* harmony export */   breadcrumbEditor: () => (/* binding */ breadcrumbEditor),
/* harmony export */   cancel: () => (/* binding */ cancel),
/* harmony export */   category: () => (/* binding */ category),
/* harmony export */   categoryNames: () => (/* binding */ categoryNames),
/* harmony export */   close: () => (/* binding */ close),
/* harmony export */   copy: () => (/* binding */ copy),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   defaultModelName: () => (/* binding */ defaultModelName),
/* harmony export */   definitionQuery: () => (/* binding */ definitionQuery),
/* harmony export */   description: () => (/* binding */ description),
/* harmony export */   deselectFunction: () => (/* binding */ deselectFunction),
/* harmony export */   details: () => (/* binding */ details),
/* harmony export */   dialogTitle: () => (/* binding */ dialogTitle),
/* harmony export */   dontSave: () => (/* binding */ dontSave),
/* harmony export */   enterFURL: () => (/* binding */ enterFURL),
/* harmony export */   enterURL: () => (/* binding */ enterURL),
/* harmony export */   error: () => (/* binding */ error),
/* harmony export */   errorTitle: () => (/* binding */ errorTitle),
/* harmony export */   everyone: () => (/* binding */ everyone),
/* harmony export */   f32PixelType: () => (/* binding */ f32PixelType),
/* harmony export */   f64PixelType: () => (/* binding */ f64PixelType),
/* harmony export */   failedToLoadLayer: () => (/* binding */ failedToLoadLayer),
/* harmony export */   folder: () => (/* binding */ folder),
/* harmony export */   general: () => (/* binding */ general),
/* harmony export */   groupFieldName: () => (/* binding */ groupFieldName),
/* harmony export */   groupItemsBy: () => (/* binding */ groupItemsBy),
/* harmony export */   groups: () => (/* binding */ groups),
/* harmony export */   invalidRFTMessage: () => (/* binding */ invalidRFTMessage),
/* harmony export */   isDataset: () => (/* binding */ isDataset),
/* harmony export */   isPublic: () => (/* binding */ isPublic),
/* harmony export */   item: () => (/* binding */ item),
/* harmony export */   itemGroup: () => (/* binding */ itemGroup),
/* harmony export */   loadingLayer: () => (/* binding */ loadingLayer),
/* harmony export */   matchVariables: () => (/* binding */ matchVariables),
/* harmony export */   mosaic: () => (/* binding */ mosaic),
/* harmony export */   multidimensionalRules: () => (/* binding */ multidimensionalRules),
/* harmony export */   name: () => (/* binding */ name),
/* harmony export */   noTagErrorMsg: () => (/* binding */ noTagErrorMsg),
/* harmony export */   noTitleErrorMsg: () => (/* binding */ noTitleErrorMsg),
/* harmony export */   noTitleTagErrorMsg: () => (/* binding */ noTitleTagErrorMsg),
/* harmony export */   ok: () => (/* binding */ ok),
/* harmony export */   organization: () => (/* binding */ organization),
/* harmony export */   outputPixelType: () => (/* binding */ outputPixelType),
/* harmony export */   owner: () => (/* binding */ owner),
/* harmony export */   parameter: () => (/* binding */ parameter),
/* harmony export */   parameters: () => (/* binding */ parameters),
/* harmony export */   properties: () => (/* binding */ properties),
/* harmony export */   raster: () => (/* binding */ raster),
/* harmony export */   rasterFunctionEditor: () => (/* binding */ rasterFunctionEditor),
/* harmony export */   rasterFunctions: () => (/* binding */ rasterFunctions),
/* harmony export */   rfxLicenseInfo: () => (/* binding */ rfxLicenseInfo),
/* harmony export */   s16PixelType: () => (/* binding */ s16PixelType),
/* harmony export */   s32PixelType: () => (/* binding */ s32PixelType),
/* harmony export */   s8PixelType: () => (/* binding */ s8PixelType),
/* harmony export */   save: () => (/* binding */ save),
/* harmony export */   saveAs: () => (/* binding */ saveAs),
/* harmony export */   saveUtils: () => (/* binding */ saveUtils),
/* harmony export */   savingMessage: () => (/* binding */ savingMessage),
/* harmony export */   scalar: () => (/* binding */ scalar),
/* harmony export */   search: () => (/* binding */ search),
/* harmony export */   selectFeature: () => (/* binding */ selectFeature),
/* harmony export */   selectFunction: () => (/* binding */ selectFunction),
/* harmony export */   selectRaster: () => (/* binding */ selectRaster),
/* harmony export */   serviceURL: () => (/* binding */ serviceURL),
/* harmony export */   setGroupSharing: () => (/* binding */ setGroupSharing),
/* harmony export */   setSharingLevel: () => (/* binding */ setSharingLevel),
/* harmony export */   share: () => (/* binding */ share),
/* harmony export */   shareWith: () => (/* binding */ shareWith),
/* harmony export */   success: () => (/* binding */ success),
/* harmony export */   tagFieldName: () => (/* binding */ tagFieldName),
/* harmony export */   tags: () => (/* binding */ tags),
/* harmony export */   title: () => (/* binding */ title),
/* harmony export */   toolDetailsEditor: () => (/* binding */ toolDetailsEditor),
/* harmony export */   toolEditor: () => (/* binding */ toolEditor),
/* harmony export */   toolModeler: () => (/* binding */ toolModeler),
/* harmony export */   tryAgain: () => (/* binding */ tryAgain),
/* harmony export */   type: () => (/* binding */ type),
/* harmony export */   u16PixelType: () => (/* binding */ u16PixelType),
/* harmony export */   u32PixelType: () => (/* binding */ u32PixelType),
/* harmony export */   u8PixelType: () => (/* binding */ u8PixelType),
/* harmony export */   unionDimensions: () => (/* binding */ unionDimensions),
/* harmony export */   unknownPixelType: () => (/* binding */ unknownPixelType),
/* harmony export */   unsavedTitle: () => (/* binding */ unsavedTitle),
/* harmony export */   unsavedWarningExisting: () => (/* binding */ unsavedWarningExisting),
/* harmony export */   unsavedWarningNew: () => (/* binding */ unsavedWarningNew),
/* harmony export */   userStartDirection: () => (/* binding */ userStartDirection),
/* harmony export */   variables: () => (/* binding */ variables),
/* harmony export */   viewerModeMessage: () => (/* binding */ viewerModeMessage),
/* harmony export */   viewerModeTitle: () => (/* binding */ viewerModeTitle),
/* harmony export */   warning: () => (/* binding */ warning)
/* harmony export */ });
const ok = "OK";
const cancel = "Mégse";
const enterURL = "Raszteres adatszolgáltatás URL-címének megadása";
const serviceURL = "Szolgáltatás URL-címe";
const selectRaster = "Raszer kiválasztás";
const failedToLoadLayer = "Nem sikerült betölteni a réteget";
const loadingLayer = "Réteg betöltése";
const selectFeature = "Vektoros réteg kijelölése";
const enterFURL = "Vektoros adatszolgáltatás URL-címének megadása";
const addRaster = "Raszterváltozók hozzáadása";
const addScalar = "Állandó hozzáadása";
const raster = "Raszter";
const scalar = "Skalár";
const defaultModelName = "Raszterfunkció-sablon";
const general = "Általános";
const parameters = "Paraméterek";
const variables = "Változók";
const name = "Név";
const description = "Leírás";
const parameter = "Paraméter";
const isPublic = "Nyilvános";
const isDataset = "Adathalmaz";
const unknownPixelType = "Ismeretlen";
const outputPixelType = "Kimeneti pixel típusa";
const u8PixelType = "8 Bit Unsigned";
const s8PixelType = "8 Bit Signed";
const u16PixelType = "16 Bit Unsigned";
const s16PixelType = "16 Bit Signed";
const u32PixelType = "32 Bit Unsigned";
const s32PixelType = "32 Bit Signed";
const f32PixelType = "32 Bit Float";
const f64PixelType = "64 Bit Double";
const properties = "Tulajdonságok";
const multidimensionalRules = "Többdimenziós szabályok";
const matchVariables = "Változók párosítása";
const unionDimensions = "Unió méretei";
const rasterFunctionEditor = {
	invalidRFTMessage: "Ez a raszterfunkció-sablon érvénytelen.",
	rfxArgsEditor: {
		outputRaster: "Kimeneti raszter",
		raster: "Raszter",
		unsupportedDataTypeWarning: "A következő argumentumok nem jelennek meg, mivel jelenleg nem támogatottak.",
		unsupportedFunction: "Jelenleg nem támogatott raszterfunkció(ka)t tartalmaz."
	},
	rfxRasterInput: {
		selectLayer: "Réteg kiválasztása",
		browseLayers: "Rétegek tallózása",
		rfxVariable: "RaszterFunkcióVáltozó"
	},
	rfxBandCombinationEditor: {
		methodLabel: "Módszer",
		bandLabel: "Sáv",
		combinationLabel: "Kombináció"
	},
	rfxRemapGrid: {
		minimum: "Minimum",
		maximum: "Maximum",
		output: "Kimenet",
		noData: "NoData",
		remapValuesLabel: "Újraleképezési értékek"
	},
	rfxNamedRasterEditor: {
		rasterVariables: "Raszterváltozók",
		deleteSelectedVars: "Kiválasztott változók eltávolítása"
	},
	rfxClippingGeometry: {
		clippingLayer: "Réteg kivágása",
		clippingRaster: "Kivágási raszter",
		clippingGeometry: "Kivágási geometria",
		customExtent: "Egyéni kiterjedés",
		outputExtent: "Kimeneti kiterjedés",
		currentExtent: "Aktuális térképkiterjedés",
		drawLabel: "Rajzolás"
	},
	rfxCustomExtent: {
		top: "Fent",
		right: "Jobb",
		bottom: "Lent",
		left: "Bal"
	},
	rfxRasterArrayEditor: {
		moveUp: "Feljebb",
		moveDown: "Lejjebb",
		remove: "Eltávolítás"
	},
	rfxStatisticsGrid: {
		stdDev: "Std. Dev.",
		min: "Min.",
		max: "Max.",
		mean: "Átlag"
	},
	rfxWeightedSumTableEditor: {
		weightedSumTable: "Súlyozott összegek táblája",
		id: "Azonosító",
		layer: "Réteg",
		field: "Mező",
		weight: "Súly",
		value: "Érték",
		selectLayer: "Réteg kiválasztása"
	},
	rfxWeightedOverlayTableEditor: {
		weightedOverlayTable: "Súlyozott átfedési táblázat",
		id: "Azonosító",
		layer: "Réteg",
		field: "Mező",
		influence: "Hatás",
		sumOfInfluence: "Összesített hatás",
		value: "Érték",
		remapTable: "Tábla újbóli leképezése",
		scale: "Méretarány",
		scales: "Méretarányok",
		selectRaster: "Raszter kiválasztása"
	},
	rfxFeatureSelect: {
		addFeatureLayer: "Vektoros réteg tallózása",
		addPointLayer: "Pontréteg tallózása"
	},
	rfxFieldSelect: {
		value: "Érték",
		count: "Darabszám"
	},
	rfxAttributeTable: {
		tableType: "Táblatípus",
		manual: "Manuális",
		external: "Külső",
		minVal: "Minimum érték",
		maxVal: "Maximum érték",
		baseClassName: "Osztályalap neve",
		colorScheme: "Színséma",
		defaultClassName: "Felirat_",
		generateTable: "Tábla létrehozása",
		browseTable: "Tábla tallózása",
		value: "Érték",
		classname: "OsztályNév",
		color: "Szín"
	},
	rfxFieldNumberSwitchable: {
		number: "Numerikus",
		field: "Mező",
		string: "Karakterlánc",
		linearUnit: "Lineáris egység"
	},
	rfxPropertySet: {
		name: "Név",
		value: "Érték"
	},
	rfxConversionGrid: {
		size: "Méret"
	},
	rfxTransposeBit: {
		bitPattern: "Bitminta",
		outputBit: "Kimeneti bit",
		inputBit: "Bemeneti bit"
	},
	rfxSpatialReference: {
		placeHolder: "Szűkítés kulcsszó alapján",
		coordinateSystem: "Koordináta-rendszer",
		gcs: "Földrajzi koordináta-rendszer",
		pcs: "Vetületi koordináta-rendszer",
		vcs: "Vertikális koordináta-rendszer"
	}
};
const rfxLicenseInfo = "Ezzel a raszterfunkció-sablonnal dolgozhatja fel a távérzékelt felvételeit az ArcGIS Image Server használatával.";
const rasterFunctions = {
	rfx: {
		aCosHName: "ACosH",
		aCosHSnip: "Kiszámítja a raszter celláinak inverz hiperbolikus koszinuszát.",
		aCosHDesc: "Ez a funkció kiszámítja a raszter pixeleinek inverz hiperbolikus koszinuszát.",
		aCosName: "ACos",
		aCosSnip: "Kiszámítja a raszter celláinak inverz koszinuszát.",
		aCosDesc: "Ez a raszterfunkció kiszámítja a raszter celláinak inverz koszinuszát. A matematikában az összes trigonometrikus függvény esetében van a bementi értékeknek egy érvényességi tartománya, ez az ún. értékkészlet. Az összes függvény kimenti értékei szintén egy meghatározott tartományba esnek, ez az ún. értéktartomány. Ennél az eszköznél az értékkészlet [-1, 1], az értéktartomány pedig [0, pi].",
		aSinHName: "ASinH",
		aSinHSnip: "Kiszámítja a raszter celláinak inverz hiperbolikus szinuszát.",
		aSinHDesc: "Ez a funkció kiszámítja a raszter pixeleinek inverz hiperbolikus szinuszát.",
		aSinName: "ASin",
		aSinSnip: "Kiszámítja a raszter celláinak inverz szinuszát.",
		aSinDesc: "Ez a funkció kiszámítja a raszter pixeleinek inverz szinuszát.",
		aTan2Name: "ATan2",
		aTan2Snip: "Kiszámítja a raszter celláinak inverz tangensét (az x,y alapján).",
		aTan2Desc: "Ez a funkció kiszámítja a raszter pixeleinek inverz tangensét (az x,y alapján).",
		aTanHName: "ATanH",
		aTanHSnip: "Kiszámítja a raszter celláinak inverz hiperbolikus tangensét.",
		aTanHDesc: "Ez a funkció kiszámítja a raszter pixeleinek inverz hiperbolikus tangensét.",
		aTanName: "ATan",
		aTanSnip: "Kiszámítja a raszter celláinak inverz tangensét.",
		aTanDesc: "Ez a funkció kiszámítja a raszter pixeleinek inverz tangensét.",
		absName: "Abs",
		absSnip: "Kiszámítja a raszter celláinak abszolút értékét.",
		absDesc: "Az Abs funkció kiszámítja a raszter pixeleinek abszolút értékét.",
		reflectanceName: "Látható visszaverődési együttható",
		reflectanceSnip: "A nyers képeket a légkör felső részének értékeire alakítja át a szenzor tulajdonságainak, a nap pozíciójának és a felvételi időnek figyelembevételével.",
		reflectanceDesc: "Ez a funkció módosítja egyes műholdas szenzor képének fényerejét megadó digitális szám (DN) értékeit. Ezek a módosítások a nap magasságán, a felvételezés dátumán és a szenzor tulajdonságain alapulnak az erősítés és a torzítás sávonkénti beállításához. Ezzel a funkcióval lehet módosítani egyes műholdas felvételek visszaverődési együttható vagy fényesség értékeit a terep megvilágítási és a szenzor-erősítési beállítások alapján. A képek egy elméletileg közös megvilágítási állapothoz vannak igazítva, így kisebbnek kell lennie az eltérésnek a különböző időpontokban készült, különböző szenzorokból származó felvételek között. Ez hasznos lehet a képosztályozásnál, a szín-kiegyensúlyozásnál és a mozaikkészítésnél. Ezt a funkciót csak meghatározott távérzékelt felvételekkel lehet használni. Az alkalmazható szenzorok a Landsat MSS, a Landsat TM, a Landsat ETM+, a Landsat 8, az IKONOS, a QuickBird, a GeoEye-1, a RapidEye, a DMCii, a WorldView-1, a WorldView-2, a SPOT 6 és a Pleiades.<div><br/>Ez a funkció két korrekciót alkalmaz. Az első az erősítés beállításain alapul. Az eredeti fényerőértékeket a képértékekből hozza létre újra az erősítési egyenletek megfordításával. A második korrekció a napszög és a fényerő különbségeihez kapcsolódik. Az eredeti fényerőértékeket egy közös megvilágítási állapothoz igazítja a különböző megvilágítási körülmények között rögzített terep normalizálásával. Általában, míg a kimeneti képadattípus megegyezik a bemeneti képadattípussal, a kimeneti értékek alacsonyabbak a bemeneti értékeknél, és az érvényes adattartományba kerülnek.</div>",
		argStatisticsName: "Arg.statisztika",
		argStatisticsSnip: "Arg. statisztikákat számít ki, beleértve az Arg.max, az Arg.min, az Arg.közép és az Időtartam értékeket.",
		argStatisticsDesc: "Ez a funkció arg. statisztikákat számít ki. Az Arg.statisztika funkcióban négy módszer van: az Arg.max, az Arg.min, az Arg.közép és az Időtartam.",
		arithmeticName: "Aritmetikai",
		arithmeticSnip: "Számtani műveletet hajt végre két raszter vagy egy raszter és egy skalár között.",
		arithmeticDesc: "Az aritmetikai függvény számtani műveletet hajt végre két raszter vagy egy raszter és egy skalár között, és fordítva.",
		aspectSlopeName: "Kitettség-Lejtés",
		aspectSlopeSnip: "Létrehoz egy rasztert, amely egyidejűleg megjeleníti egy folyamatos felület kitettségét (irányát) és lejtését (meredekségét), ahogy azt egy digitális magasságmodell mutatja.",
		aspectSlopeDesc: "A Kitettség-Lejtés funkció egy raszterréteget hoz létre, amely egyidejűleg jeleníti meg a felület kitettségét és lejtését. A kitettség a szomszédos pixelek közötti, legnagyobb mértékű értékváltozáshoz tartozó lejtő irányát határozza meg. A kitettség felfogható lejtésirányként is. A kimeneti raszter értékei a kitettség iránytű szerinti irányai lesznek, melyeket színárnyalatok (színek) képviselnek. A lejtőszög a magasság változásának mértékét mutatja a digitális magasságmodell (DMM) minden egyes pixeléhez. A lejtőszög a felszín meredekségét mutatja, és három osztályba van jelképezve, melyeket színtelítettséggel (fényerővel) jelenít meg.<div><br/>A kimeneti kitettség-lejtés raszter pixelei a kitettség és a lejtés kombinációját tükrözik. A 20 alatti értékű pixelek laposnak tekinthetők, és szürke színnel jelennek meg. A 21 és annál magasabb kitettség-lejtés értékek változó telítettséggel jelennek meg a következők szerint: 21–30 —Alacsony lejtőtelítettség, 31–40—Közepes lejtőtelítettség, 41 és nagyobb—Magas lejtőtelítettség</div>",
		aspectName: "Kitettség",
		aspectSnip: "Megmutatja, hogy milyen irányba néz egy pixel, ahol 0 északra esik, és a szög az óramutató járásával megegyező irányban 360-ig emelkedik.",
		aspectDesc: "A Kitettség funkció a szomszédos cellák közötti, legnagyobb mértékű értékváltozáshoz tartozó lejtő irányát határozza meg. A kitettség felfogható lejtésirányként is. A kimeneti raszter értékei a kitettség iránytű szerinti irányai lesznek.<div><br/>Ennek a funkciónak a bemenete a bemeneti raszter. A Kitettség funkciót gyakran alkalmazzák digitális magasságmodellre (DMM). Alapértelmezés szerint a kitettség szürkeárnyalatos képként jelenik meg. Hozzáadhatja a Színtérkép funkciót egy adott színséma megadásához, vagy engedélyezheti a mozaikot megtekintő személy számára, hogy saját színsémájával módosítsa a szimbólumrendszert.</div>",
		tableName: "Attribútumtábla",
		tableSnip: "Táblázatot használ az adatkészlet értékeinek megnevezésére és szimbolizálására. A táblázat oszlopai vesszővel vannak elválasztva: PixelValue, AttributeName, RedValue, GreenValue, BlueValue.",
		tableDesc: "Az Attribútumtábla funkció lehetővé teszi, hogy egy attribútumtáblát definiáljon egy egysávos mozaik-adathalmaz vagy raszteres adathalmaz szimbolizálására. <div><br/>Ez akkor hasznos, ha a felszínhasználatra besorolt távérzékelt felvételeket szeretné bemutatni, mint például az erdőterület, a vizes élőhelyek, a termőföldek és a városi területek. Ezen túlmenően, ha a táblázatban piros, zöld és kék nevű mezők szerepelnek, akkor azokban a mezőkben szereplő értékek színtérképként jelennek meg a kép kirajzolásakor.</div>",
		bandArithmeticName: "Sávaritmetika",
		bandArithmeticSnip: "Előre definiált képletekkel vagy a felhasználó által definiált kifejezéssel számítja ki az indexeket.",
		bandArithmeticDesc: "A Sávaritmetika funkció számtani műveletet hajt végre egy raszteres adathalmaz sávjain. Választhat az előre definiált algoritmusok közül, vagy megadhatja saját egysoros képletét. A támogatott operátorok -,+,/,*, és egyváltozós -.",
		thresholdName: "Bináris küszöbérték",
		thresholdSnip: "A folytonos adatokat előtérbe és háttérbe szervezi, a két osztály közötti kovariancia minimalizálásával.",
		thresholdDesc: "Ha egy raszteres adathalmaz bimodális eloszlással rendelkezik, ez a funkció új rasztert hoz létre, amely az adatokat két külön osztályba osztja. Egy alacsony értékű osztályt hoz létre, amely fekete pixelekkel jelenik meg, és egy nagy értékű osztályt fehér pixelekkel.",
		bitwiseAndName: "Bitenkénti És",
		bitwiseAndSnip: "Bitenkénti És műveletet hajt végre két bemeneti raszter bináris értékein.",
		bitwiseAndDesc: "Bitenkénti és Bitenkénti És műveletet hajt végre két bemeneti raszter bináris értékein",
		bitwiseLeftShiftName: "Bitenkénti Balra Tolás",
		bitwiseLeftShiftSnip: "Bitenkénti Balra Tolás műveletet hajt végre két bemeneti raszter bináris értékein.",
		bitwiseLeftShiftDesc: "A Bitenkénti Balra Tolás egy Bitenkénti Balra Tolás műveletet hajt végre két bemeneti raszter bináris értékein",
		bitwiseNotName: "Bitenkénti Negáció",
		bitwiseNotSnip: "Bitenkénti Negáció (komplementer) műveletet hajt végre két bemeneti raszter bináris értékein.",
		bitwiseNotDesc: "A funkció Bitenkénti Negáció (komplementer) műveletet hajt végre egy bemeneti raszter bináris értékén.",
		bitwiseOrName: "Bitenkénti Vagy",
		bitwiseOrSnip: "Bitenkénti Vagy műveletet hajt végre két bemeneti raszter bináris értékein.",
		bitwiseOrDesc: "A funkció Bitenkénti Vagy műveletet hajt végre két bemeneti raszter bináris értékein. ",
		bitwiseRightShiftName: "Bitenkénti Jobbra Tolás",
		bitwiseRightShiftSnip: "Bitenkénti Jobbra Tolás műveletet hajt végre két bemeneti raszter bináris értékein.",
		bitwiseRightShiftDesc: "A funkció Bitenkénti Jobbra Tolás műveletet hajt végre két bemeneti raszter bináris értékein.",
		bitwiseXorName: "Bitenkénti Kizáró Vagy",
		bitwiseXorSnip: "Bitenkénti Kizáró Vagy műveletet hajt végre két bemeneti raszter bináris értékein.",
		bitwiseXorDesc: "A funkció Bitenkénti Kizáró Vagy műveletet hajt végre két bemeneti raszter bináris értékein.",
		booleanAndName: "Logikai És",
		booleanAndSnip: "Logikai És műveletet hajt végre két bemeneti raszter cellaértékein. Ha mindkét bemeneti érték igaz (nem nulla), akkor a kimeneti érték 1. Ha az egyik vagy mindkét bemenet hamis (nulla), akkor a kimenet 0.",
		booleanAndDesc: "A funkció Logikai És műveletet hajt végre két bemenet pixelértékein. Ha mindkét bemeneti érték igaz (nem nulla), akkor a kimeneti érték 1. Ha az egyik vagy mindkét bemeneti érték hamis (nulla), akkor a kimeneti érték 0. ",
		booleanNotName: "Logikai Negáció",
		booleanNotSnip: "Logikai Negáció (komplementer) műveletet hajt végre a bemeneti raszter cellaértékein. Ha a bemeneti érték igaz (nem nulla), akkor a kimeneti érték 0. Ha a bemeneti érték hamis (nulla), akkor a kimenet 1.",
		booleanNotDesc: "A funkció Logikai Negáció (komplementer) műveletet hajt végre a bemeneti raszter pixelértékein. Ha a bemeneti érték igaz (nem nulla), akkor a kimeneti érték 0. Ha a bemeneti érték hamis (nulla), akkor a kimeneti érték 1.",
		booleanOrName: "Logikai Vagy",
		booleanOrSnip: "Logikai Vagy műveletet hajt végre két bemeneti raszter cellaértékein. Ha az egyik vagy mindkét bemeneti érték igaz (nem nulla), akkor a kimeneti érték 1. Ha mindkét bemeneti érték hamis (nulla), akkor a kimenet 0.",
		booleanOrDesc: "A funkció Logikai Vagy műveletet hajt végre két bemeneti raszter cellaértékein. Ha az egyik vagy mindkét bemeneti érték igaz (nem nulla), akkor a kimeneti érték 1. Ha mindkét bemeneti érték hamis (nulla), akkor a kimeneti érték 0.",
		booleanXorName: "Logikai Kizáró Vagy",
		booleanXorSnip: "Logikai Kizáró Vagy műveletet hajt végre két bemeneti raszter cellaértékein. Ha az egyik bemeneti érték igaz (nem nulla), és a másik hamis (nulla), akkor a kimenet 1. Ha mindkét bemeneti érték igaz, vagy mindkettő hamis, akkor a kimenet 0.",
		booleanXorDesc: "A funkció Logikai Kizáró Vagy műveletet hajt végre két bemeneti raszter cellaértékein. Ha az egyik bemeneti érték igaz (nem nulla), és a másik érték hamis (nulla), akkor a kimeneti érték 1. Ha mindkét bemeneti érték igaz, vagy mindkettő hamis, akkor a kimeneti érték 0.",
		bufferedRasterName: "Bufferelt",
		bufferedRasterSnip: "A legutóbb elért pixelblokko(ka)t buffereli.",
		bufferedRasterDesc: "A Bufferelt funkció a komplex műveletsorok teljesítményének optimalizálására szolgál. Tárolja a kimenetet a műveletsor azon részének memóriájában, amely előtte van. <div><br/>Oda helyezze be ezt a funkciót a Funkciószerkesztőbe, ahol a kimenetet tárolni kívánja.</div>",
		rasterCalculatorName: "Kalkulátor",
		rasterCalculatorSnip: "Kiszámít egy rasztert egy raszteralapú matematikai kifejezésből.",
		rasterCalculatorDesc: "A Kalkulátor funkcióval kifejezéseket hozhat létre és futtathat, és ezeket műveletsorokba is beillesztheti.",
		cellStatisticsName: "Cellastatisztika",
		cellStatisticsSnip: "Cellánkénti statisztikát számít több raszterből. A rendelkezésre álló statisztikák a többség, a maximum, az átlag, a medián, a minimum, a percentilis, a kisebbség, a terjedelem, a szórás, az összeg és a változatosság.",
		cellStatisticsDesc: "Ez a funkció statisztikát számít több raszterből, pixelenkénti alapon. A rendelkezésre álló statisztikák a többség, a maximum, az átlag, a medián, a minimum, a kisebbség, a terjedelem, a szórás, az összeg és a változatosság.",
		classifyName: "Osztályozás",
		classifySnip: "Minden egyes pixelt egy osztályhoz rendel. Kiegészítő adatokat, például szegmentált képet is tartalmaz.",
		classifyDesc: "Ez a raszterfunkció egy raszteres adathalmazt osztályoz egy Esri Classifier Definition (.ecd) fájl és raszteres adathalmaz-bemenetek alapján. Az Osztályozás funkcióban használt .ecd fájl tartalmazza az adott adathalmazra és osztályozóra vonatkozó összes információt, és az osztályozási képzési eszköz hozza létre, például a Train Support Vector Machine vagy a Train Random Trees.",
		clipName: "Kivágás",
		clipSnip: "Koordináták vagy más adathalmaz használatával állítja be a raszter kiterjedését.",
		clipDesc: "Ez a funkció egy rasztert vág ki téglalap alakú formában a megadott értékek szerint, vagy egy bemeneti polygon típusú vektoroselem-osztály alakjában vágja ki a rasztert. A kivágást meghatározó alakzat kivághatja a raszter kiterjedését vagy kivághat egy raszteren belüli területet.",
		colorspaceConversionName: "Színmodellátváltás",
		colorspaceConversionSnip: "A rasztert átváltja RGB-ről HSV-re, és fordítva.",
		colorspaceConversionDesc: "A Színmodellátváltás funkció a kép színmodelljét a színárnyalat, a telítettség és az érték (HSV) színteréről pirosra, zöldre és kékre (RGB) alakítja át, vagy fordítva.<div><br/>Ez a funkció mozaik-adathalmazban használható.</div>",
		colormapToRGBName: "Színtérképből RGB-re",
		colormapToRGBSnip: "Egysávos rasztert alakít át színtérképpel háromsávos (piros, zöld és kék) raszterre.",
		colormapToRGBDesc: "Ez a funkció egysávos rasztert alakít át színtérképpel háromsávos (piros, zöld és kék) raszterre.<div><br/>Ez a funkció akkor hasznos, ha háromsávos rasztert kell létrehoznia egysávos raszterből egy hozzá tartozó színtérképpel. A színtérképben található értékeket használja a piros, zöld és kék sáv létrehozására. Ez a funkció mozaik-adathalmazban használható.</div>",
		colormapName: "Színtérkép",
		colormapSnip: "Megváltoztatja a pixelértékeket a raszteradatok szürkeárnyalatként vagy piros, zöld, kék (RGB) képként való megjelenítéséhez színtérkép vagy színskála alapján.",
		colormapDesc: "A Színtérkép funkció a raszteres adatok renderelésének egy típusa. Átalakítja a pixelértékeket a raszteradatok szürkeárnyalatként vagy RGB színképként való megjelenítéséhez színséma vagy színtérképfájlban levő megadott színek alapján. Színtérkép segítségével ábrázolhatja az elemzett adatokat, például egy kategorizált képnél vagy amikor megjelenít egy topográfiai térképet (vagy egy színesen szkennelt indexképet).<div><br/>A színtérképek olyan értékkészletet tartalmaznak, amelyek az egysávos raszter következetes megjelenítéséhez használt színekhez kapcsolódnak, azonos színekkel. Minden pixelértékhez hozzá van rendelve egy szín, amely az RGB értékek halmazaként van meghatározva. A színtérképek bármilyen bitmélységet képesek támogatni, kivéve a lebegőpontos értéket. Támogatják a pozitív és negatív értékeket is, és hiányzó színleképezési értékeket is tartalmazhatnak. Ha hiányzó értékeket tartalmazó színtérképpel rendelkező adathalmazt jelenít meg, az ezekkel a hiányzó értékekkel rendelkező pixelek nem jelennek meg.</div>",
		complexName: "Összetett",
		complexSnip: "Kinyeri a nagyságot a komplex számokból.",
		complexDesc: "Ez a funkció kiszámítja a komplex értékek nagyságát.<div><br/>Ezt a funkciót általában RADAR távérzékelt felvételekkel használják, amelyek összetett adattípusúak. Mozaik-adathalmazban használható.</div>",
		compositeBandName: "Kompozit Sávok",
		compositeBandSnip: "Több adathalmazt egyesít egy többsávos raszterbe.",
		compositeBandDesc: "A Kompozit Sávok funkció lehetővé teszi a raszterek kombinálását egy többsávos kép létrehozásához.",
		conName: "Feltételes",
		conSnip: "Feltételes If, Then, Else műveletet hajt végre. A Feltételes operátor használatakor általában két vagy több funkciót kell összeláncolni, ahol az egyik funkció a kritériumokat adja meg, a második funkció pedig a Feltételes operátor, amely a kritériumokat használja és megmondja, hogy mik legyenek az igaz és a hamis kimenetek.",
		conDesc: "A Feltételes funkció a kimeneti raszter pixeleit minden egyes bemeneti pixel if\\else értékelése alapján állítja be. Az Igaz Raszter pixelértékeit adja vissza, ha a feltételes értékelés igaz (1), vagy a Hamis raszter pixelértékeit adja vissza, ha a feltételes értékelés hamis (0). Ezt a kritériumot egy logikai matematikai függvény kimenete határozza meg, amely a bemeneti raszter lesz.",
		constantName: "Állandó",
		constantSnip: "Virtuális rasztert hoz létre egyetlen pixelértékkel.",
		constantDesc: "Ez a funkció egy virtuális rasztert hoz létre egyetlen pixelértékkel, amely raszteres funkciósablonokban és mozaik-adathalmaz feldolgozására használható.<div><br/>Az állandó értéket használja a raszter minden pixelértékére.</div>",
		contourName: "Kontúr",
		contourSnip: "Kontúrvonalakat hoz létre.",
		contourDesc: "A Kontúr funkció kontúrvonalakat hoz létre a raszteres magassági adathalmazból származó azonos magasságú pontok egyesítésével. A kontúrok a megjelenítéshez raszterként létrehozott izovonalak. A következő fő jellemzők teszik ezt a funkciót hatékonnyá: a kontúrokat gyorsan és dinamikusan hozza létre nagyon nagy adathalmazokon, mint például a World Elevation; a kontúrok simíthatók, hogy a térképeknek jobb kartográfiai megjelenést biztosítsanak, miközben megtartják a kontúrok pontosságát; a szintköz dinamikus vezérlése biztosított; a kimeneti opciók közé tartoznak a szintvonalak, a főszintvonalak és a kitöltött szintvonalak.<div><br/>A kontúrréteg létrehozása raszteres termékként alkalmazások széles köre számára értékes, mivel a kontúrok a térképre ráhelyezhetők, és a terepre vonatkozó információkkal szolgálnak a mögöttes adatok kitakarása nélkül. Ezek hasznosak olyan alkalmazásokban, mint például a mérnöki munka, a mezőgazdaság és a vízgazdálkodás.</div>",
		contrastBrightnessName: "Kontraszt és Fényerő",
		contrastBrightnessSnip: "Egy raszter kontrasztját és fényerejét állítja be.",
		contrastBrightnessDesc: "A Kontraszt és Fényerő funkció javítja a raszteres adatok megjelenését a képen belüli fényerő és kontraszt módosításával. A fényerő növeli a kép általános világosságát, például—a sötét színek világosabbá tételével és a világosabb színek fehérebbé tételével,—míg kontraszt a legsötétebb és a legvilágosabb színek közötti különbséget állítja be.<div><br/>E funkció használata megváltoztatja a pixelértékeket; ezért ezt a funkciót akkor kell használni, ha javítani kívánja az adatok megjelenését, és akkor nem, ha az adatokat olyan elemzés részeként kívánja használni, amely a nyers pixelértékeket igényli. Ez a funkció akkor hasznos, ha az adatokat olyan képszolgáltatásként teszi közzé, amely alkalmazásokban használható a képek kontrasztjának és fényerejének változtatási lehetősége nélkül, vagy ha azt szeretné biztosítani, hogy az Ön kívánt beállításaival jelenjen meg.</div>",
		convolutionName: "Konvolúció",
		convolutionSnip: "Szűrőt alkalmaz egy raszter élesítéséhez, elmosódottá tételéhez, élek észleléséhez, simításhoz vagy lejtés észleléséhez.",
		convolutionDesc: "A Konvolúció funkció egy kép pixelértékeinek szűrését végzi, amely a kép élesítésére, a kép elmosódottá tételére, a képen belüli élek észlelésére vagy más kernel-alapú képjavításra használható. A szűrőket a raszterkép minőségének javítására használja a hamis adatok kiküszöbölésével vagy az adatokban levő vektoros elemek javításával. Ezeket a konvolúciós szűrőket egy mozgó, átfedő kernelre (ablak vagy szomszédság), például 3-szor 3-asra alkalmazzák. A konvolúciós szűrők a szomszédok súlya alapján kiszámítják a pixelértéket.",
		corridorName: "Vonalmenti",
		corridorSnip: "A kumulatív költségek összegét számítja ki két bemeneti kumulatív raszterből.",
		corridorDesc: "A Vonalmenti funkció a kumulatív költségek összegét számítja ki két bemeneti kumulatív költségraszterből. Bár a bemenethez bármilyen két raszter használható, értelmezhető eredmény eléréséhez változatlan kumulatív költség kimeneti rasztereknek kell lenniük. A két bemenet sorrendje irreleváns.",
		cosHName: "CosH",
		cosHSnip: "Kiszámítja a raszter celláinak hiperbolikus koszinuszát.",
		cosHDesc: "Ez a funkció kiszámítja a raszter pixeleinek hiperbolikus koszinuszát.",
		cosName: "Cos",
		cosSnip: "Kiszámítja a raszter egy cellájának koszinuszát.",
		cosDesc: "Ez a funkció kiszámítja a raszter pixeleinek koszinuszát.",
		costAllocationName: "Költségallokáció",
		costAllocationSnip: "Minden egyes cellára kiszámítja a legkisebb költségű forrást, amely a legkisebb kumulatív költségen alapul a költségfelszínen.",
		costAllocationDesc: "A Költségallokáció funkció minden egyes cellára kiszámítja a legkisebb költségű forrást, amely a legkisebb kumulatív költségen alapul a költségfelszínen.",
		costBackLinkName: "Költség Visszahivatkozás",
		costBackLinkSnip: "Meghatározza a szomszédot, amely a legkisebb költségű forrás felé vezető legkisebb kumulatív költségútvonalon található következő cella.",
		costBackLinkDesc: "A Költség Visszahivatkozás funkció meghatározza a szomszédot, amely a legkisebb költségű forrás felé vezető legkisebb kumulatív költségútvonalon található következő cella.<div><br/>A visszahivatkozási raszter nullától nyolcig terjedő értékeket tartalmaz, amelyek meghatározzák az irányt vagy azonosítják a következő szomszédos cellát (a soron következő cellát) a cellától a legkisebb kumulatív költségútvonal mentén, a legkisebb költségű forrás eléréséhez. Ha az útvonal a jobb szomszédba vezet, akkor 1 lesz a cellához hozzárendelt érték, 2 lesz az átlósan jobb oldali alsó cellához, és az óramutató járásával megegyező irányban folytatódik. A 0 érték a forráscellák számára van fenntartva.</div>",
		costDistanceName: "Költségtávolság",
		costDistanceSnip: "Minden egyes cellára kiszámítja a legkisebb kumulatív költségtávolságot a legkisebb költségű forrástól vagy forrás felé a költségfelszínen.",
		costDistanceDesc: "A Költségtávolság funkció minden egyes cellára kiszámítja a legkisebb kumulatív költségtávolságot a legkisebb költségű forrástól vagy forrás felé a költségfelszínen.",
		costPathName: "Költségútvonal",
		costPathSnip: "Kiszámítja a legkisebb költségű útvonalat a kiindulóponttól a célállomásig.",
		costPathDesc: "A globális Költségútvonal funkció kiszámítja a legkisebb költségű útvonalat a kiindulóponttól a célállomásig.<div><br/>Ez a funkció olyan kimeneti rasztert hoz létre, amely rögzíti a legkisebb költségű útvonalat vagy útvonalakat a kiválasztott helyektől a kumulatív költségfelületen belül meghatározott, a költségtávolság szempontjából legközelebbi forráscellához.</div>",
		curvatureName: "Görbület",
		curvatureSnip: "Kiszámítja a raszter felszínének görbületét, opcionálisan beleértve a profilt valamint a felszíni görbületeket.",
		curvatureDesc: "A Görbület funkció a lejtés alakját vagy görbületét mutatja meg. A felület egy része lehet konkáv vagy konvex; ezt a görbületi értéket megnézve mondhatja meg. A görbület kiszámítása a felszín második deriváltjának számításával történik.<div><br/>A Görbület funkció kimenete használható a vízelvezető medence fizikai jellemzőinek leírására az eróziós és a lefolyási folyamatok megértése érdekében. A görbület értéke felhasználható a talajerózió mintáinak, valamint a szárazföldi víz eloszlásának megállapítására. A profil görbülete befolyásolja az áramlás gyorsulását és lassulását, és így befolyásolja az eróziót és a lerakódást. A felszíni görbületek befolyásolja az áramlás konvergenciáját és divergenciáját.</div>",
		divideName: "Osztás",
		divideSnip: "Két raszter értékeit osztja el cellánkénti alapon.",
		divideDesc: "Az Osztás funkció két raszter értékeit osztja el pixelenkénti alapon.",
		elevationVoidFillName: "Üres Helyek Kitöltése",
		elevationVoidFillSnip: "Pixeleket hoz létre, ahol hézagok vannak a magassági adatokban.",
		elevationVoidFillDesc: "Az Üres Helyek Kitöltése funkcióval pixeleket hozhat létre, ahol a magasságban hézagok vannak.<div><br/>Az üres helyek akkor fordulnak elő, ha a kapott raszterben a pixel által képviselt területen nincsenek pontok. Az üres helyeket gyakran okozza víztestek, az osztálytípus kiválasztása vagy kizárás. Az üres helyek kitöltését leggyakrabban talajfelszín előállításakor használják.</div>",
		equalToName: "Egyenlő",
		equalToSnip: "Relációs egyenlő műveletet hajt végre két bemeneten cellánkénti alapon. 1 értéket ad vissza olyan celláknál, ahol az első raszter megegyezik a második raszterrel, és 0 értéket azoknál a celláknál, ahol nem.",
		equalToDesc: "A funkció egyenlő műveletet hajt végre két raszteren pixelenkénti alapon. 1 értéket ad vissza olyan pixeleknél, ahol az első raszter megegyezik a második raszterrel, és 0 értéket ad vissza azoknál a pixeleknél, ahol nem egyenlőek.",
		eucAllocationName: "Euklideszi Allokáció",
		eucAllocationSnip: "Minden cellára kiszámítja a legközelebbi forrást az euklideszi távolság alapján.",
		eucAllocationDesc: "Az Euklideszi Allokáció funkció minden cellára kiszámítja a legközelebbi forrást az euklideszi távolság alapján.",
		eucDirectionName: "Euklideszi Irány",
		eucDirectionSnip: "Fokokban számítja ki minden cellára a legközelebbi forrás irányát.",
		eucDirectionDesc: "Az Euklideszi Irány funkció fokokban számítja ki minden cellára a legközelebbi forrás irányát. <div><br/>Az irányt minden egyes cella középpontjától a hozzá legközelebb eső forráscella középpontjáig számítja ki. Az értéktartomány 0 foktól 360 fokig terjed, a 0 a forráscellák számára van fenntartva. Egyenesen kelet felé (jobbra) 90, és az értékek az óramutató járásával megegyező irányban emelkednek (180 dél, 270 nyugat, 360 pedig észak).</div>",
		eucDistanceName: "Euklideszi Távolság",
		eucDistanceSnip: "Minden cellára kiszámítja az euklideszi távolságot a legközelebbi forrásig.",
		eucDistanceDesc: "Az Euklideszi Távolság funkció minden cellára kiszámítja az euklideszi távolságot a legközelebbi forrásig.",
		exp10Name: "Exp10",
		exp10Snip: "Kiszámítja a raszter celláinak 10-es alapú hatványértékeit.",
		exp10Desc: "Az Exp 10 funkció kiszámítja a raszter pixeleinek 10-es alapú hatványértékeit.",
		exp2Name: "Exp2",
		exp2Snip: "Kiszámítja a raszter celláinak 2-es alapú hatványértékeit.",
		exp2Desc: "Ez a funkció kiszámítja a raszter pixeleinek 2-es alapú hatványértékeit.",
		expName: "Exp",
		expSnip: "Kiszámítja a raszter celláinak e alapú hatványértékeit.",
		expDesc: "Ez a funkció kiszámítja a raszter pixeleinek e alapú hatványértékeit.",
		extractBandName: "Sávkinyerés",
		extractBandSnip: "Meghatározza, hogy melyik sávokkal dolgozzon, ha többsávos adathalmazokat használ.",
		extractBandDesc: " A Sávkinyerés funkció lehetővé teszi, hogy egy vagy több sávot kinyerjen egy többsávos raszteres adathalmazból, vagy újrarendezze benne a sávokat.<div><br/>A Sávkinyerés funkciót más, például aritmetikai funkciók előtt használhatja, hogy meghatározza, mely sávokat használja bemenetként a következő funkció.</div>",
		fillName: "Kitöltés",
		fillSnip: "Kitölti a süllyedéseket egy felszíni raszterben, hogy eltávolítsa az adatok kis hiányosságait.",
		fillDesc: "A globális Kitöltés funkció megkeresi és kitölti a süllyedéseket és csúcsokat egy magassági felszíni raszterben, hogy eltávolítsa az adatok hiányosságait. A funkció egy ismétlődő folyamatban végzi a kitöltést mindaddig, amíg az összes süllyedést ki nem tölti a megadott Z határon belül.<div><br/>Ha Ortografikus térképkezelő eszközökkel vagy más módon egy magassági felszín jön létre, süllyedések és csúcsok formájában gyakran vannak kicsi, de jelentős hibák az adatokban. A fotogrammetriában a süllyedéseket és csúcsokat gyakran hézagoknak és kiugró pontoknak hívják. Mivel a modellezés, például hidrológiai modellezés során gyakran használnak felszíni adatokat, fontos, hogy ezek a süllyedési és csúcshibák a környező adatokkal összhangban legyenek korrigálva.</div>",
		floatName: "Lebegőpontos",
		floatSnip: "A raszter minden cellaértékét lebegőpontos ábrázolásúvá alakítja.",
		floatDesc: "A Lebegőpontos funkció a raszter minden pixelértékét lebegőpontos ábrázolásúvá alakítja.",
		flowAccumulationName: "Áramlási akkumuláció",
		flowAccumulationSnip: "Az egyes cellákba akkumulálódó áramlás raszterét hozza létre. Opcionálisan súlyozási tényező is alkalmazható.",
		flowAccumulationDesc: "Az Áramlási Akkumuláció globális funkció minden egyes pixelben akkumulálódott áramlás raszterét hozza létre, amit úgy határoz meg, hogy minden lejtő pixelbe áramló összes pixel súlyát akkumulálja. Ha nincs megadva súlyozó raszter, akkor minden pixelre 1 értékű súlyt alkalmaz, és a kimeneti raszterben a pixelek értéke az egyes pixelekbe áramló pixelek száma.<div><br/>A nagy áramlási akkumulációjú kimeneti pixelek koncentrált áramlási területek, és vízáramlási csatornák azonosítására használhatók. A nulla áramlási akkumulációjú kimeneti pixelek helyi topográfiai csúcsok, és gerincek azonosítására használhatók.</div>",
		flowDirectionName: "Áramlási irány",
		flowDirectionSnip: "Egy áramlási irány rasztert hoz létre minden cellától a legmeredekebben lejtő szomszédjához.",
		flowDirectionDesc: "A felület hidrológiai jellemzőinek meghatározásához az egyik kulcs az a képesség, hogy meg lehessen határozni az áramlás irányát a raszter minden pixeléről. Az Áramlási Irány raszterfunkció bemenetként veszi fel a felszínt, és egy áramlási irány rasztert hoz létre minden pixeltől a legmeredekebben lejtő szomszédjához. Az Áramlási Irány funkció három áramlási modellezési módszert támogat: ezek a D8 (nyolc irány), a többszörös áramlási irány (MFD) és a D-Infinity (DINF). ",
		flowDistanceName: "Áramlási Távolság",
		flowDistanceSnip: "Minden cellához kiszámítja a lejtő minimális vízszintes vagy függőleges távolságát egy folyóban vagy patakban elhelyezkedő cellá(k)ig, amelybe áramlik.",
		flowDistanceDesc: "A funkció minden pixelhez kiszámítja a lejtő minimális vízszintes vagy függőleges távolságát egy folyóban vagy patakban elhelyezkedő pixel(ek)ig, amelybe áramlik. Ha egy opcionális áramlási irány raszter is rendelkezésre áll, akkor a lejtők irányai a bemeneti áramlási irány raszter által meghatározottakra korlátozódnak. A kimenet áramlási távolság raszter.",
		focalName: "Fokális Statisztika",
		focalSnip: "Kiszámítja az egyes pixelek meghatározott fokális környezeten alapuló fokális statisztikáit.",
		focalDesc: "A Fokális Statisztika funkció kiszámítja az egyes pixelek meghatározott fokális környezeten alapuló fokális statisztikáit.",
		geometricName: "Geometriai",
		geometricSnip: "Növeli az adathalmaz pozíciópontosságát a magasság számításával.",
		geometricDesc: "A Geometriai funkció egy ortorektifikált képet készít egy szenzordefiníció és egy felszínmodell alapján. Ez növeli az adathalmaz pozíciópontosságát a magasság számításával.",
		grayscaleName: "Szürkeárnyalat",
		grayscaleSnip: "Egysávos szürkeárnyalatos képpé alakít át egy többsávos képet.",
		grayscaleDesc: "Ez a funkció egysávos szürkeárnyalatos képpé alakít át egy többsávos képet.<div><br/>Ez a funkció az egyes bemeneti sávokra meghatározott súlyozást alkalmaz, és normalizálja a kimeneti képet. Gyakran alkalmaznak súlyozást, mert az alkalmazástól függően bizonyos sávok változó jelentőséggel bírnak. Például a kék sáv gyakran több zajt tartalmaz, mint a többi sáv.</div>",
		greaterThanEqualName: "Nagyobb Vagy Egyenlő",
		greaterThanEqualSnip: "Relációs nagyobb vagy egyenlő műveletet hajt végre két bemeneten cellánkénti alapon. 1 értéket ad vissza olyan celláknál, ahol az első raszter nagyobb vagy egyenlő a második raszterrel, és 0 értéket, ahol nem.",
		greaterThanEqualDesc: "A funkció Relációs nagyobb vagy egyenlő műveletet hajt végre két bemeneten pixelenkénti alapon. 1 értéket ad vissza az olyan pixeleknél, ahol az első raszter nagyobb vagy egyenlő a második raszterrel, és 0 értéket ad vissza az olyan pixelek esetén, ahol az első raszter nem nagyobb vagy egyenlő a második raszterrel.",
		greaterThanName: "Nagyobb, mint",
		greaterThanSnip: "Relációs nagyobb, mint műveletet hajt végre két bemeneten cellánkénti alapon. 1 értéket ad vissza olyan celláknál, ahol az első raszter nagyobb, mint a második raszter, és 0 értéket az olyan celláknál, ahol nem.",
		greaterThanDesc: "A funkció Relációs nagyobb, mint műveletet hajt végre két bemeneten pixelenkénti alapon. 1 értéket ad vissza az olyan pixeleknél, ahol az első raszter nagyobb a második raszternél, és 0 értéket ad vissza az olyan pixelek esetén, ahol az első raszter nem nagyobb a második raszternél.",
		heatIndexName: "Hőindex",
		heatIndexSnip: "A környezeti levegő hőmérsékletét és a relatív páratartalmat kombinálja a látszólagos hőmérséklet eléréséhez.",
		heatIndexDesc: "Ez a funkció a környezeti hőmérséklet és a relatív páratartalom alapján számítja ki a látszólagos hőmérsékletet. A látszólagos hőmérsékletet gyakran úgy írják le, hogy milyen melegnek érzi azt az emberi test.<div><br/>Ez az index hasznos lehet az olyan orvosi problémákkal kapcsolatos veszélyek kiszámításához, mint az izomgörcs, a kiszáradás, a hőségtől való kimerülés, vagy a meleg és nedves napokon bekövetkező súlyosabb hőguta. Ha a relatív páratartalom magas, egyre nehezebbé válik a test izzadságának elpárologtatása, így az emberek nem tudnak természetes módon hatékonyan lehűlni. A hőséggel kapcsolatos tanácsok vagy figyelmeztetések térképei gyakran a hőindex eredményeinek osztályba sorolásának termékei, ahol minél magasabb az indexérték, annál valószínűbb, hogy figyelmeztetés lesz, nem csak tanácsadás.</div>",
		hillshadeName: "Domborzatárnyékolás",
		hillshadeSnip: "A felszín szürkeárnyalatos 3D-s megjelenítését hozza létre, a nap viszonylagos helyzetét figyelembe véve a kép árnyékolásánál",
		hillshadeDesc: "A Domborzatárnyékolás funkció a terepfelszín szürkeárnyalatos 3D-s megjelenítését hozza létre, a nap viszonylagos helyzetét figyelembe véve a kép árnyékolásánál. <div><br/>A domborzatárnyékolás a fényforrás és a magasságfelszín lejtése és lejtésiránya által meghatározott domborzat megjelenítésére szolgáló technika. Ez egy minőségi módszer a topográfia megjelenítésére, és nem ad abszolút magasságértékeket. </div>",
		intName: "Int",
		intSnip: "A raszter minden cellaértékét csonkolással egész számra alakítja.",
		intDesc: "Az Int funkció egy raszter minden pixelértékét csonkolással egész számra alakítja.",
		interpolateIrregularDataName: "Szabálytalan Adatok Interpolálása",
		interpolateIrregularDataSnip: "Pontfelhőkből vagy szabálytalan rácshálókból interpolál.",
		interpolateIrregularDataDesc: "Néhány netCDF vagy HDF adathalmaz a földrajzi helyet szabálytalanul elhelyezett tömbökben pixelek vagy pontadatok formájában tárolja. Amikor ezeket az adathalmazokat mozaik-adathalmazhoz adja hozzá, a Szabálytalan Adatok Interpolálása funkció átveszi a szabálytalan rácshálós adatokat, és újraszámítja azokat, így minden pixel egységes méretű és négyzet alakú lesz.<div><br/>Ha netCDF vagy HDF forrásból ad hozzá változókat mozaik-adathalmazhoz, akkor automatikusan ellenőrzi, hogy szabályosan vannak-e tömbösítve az adatok. Ha nem, a Szabálytalan Adatok Interpolálása funkció használható a szabálytalan adatok szabályos rácshálós raszterré alakítására. Megváltoztathatja a szabálytalan adatok interpolálása raszterfunkcióban használt interpolációs módszert és a cellaméretet. Szabályosan elhelyezett raszteradatok esetén nem alkalmaz interpolációt, és az adatokat eredeti formában fogja beolvasni.</div>",
		isNullName: "Null Értékű",
		isNullSnip: "Cellánkénti alapon meghatározza, hogy a bemeneti raszterek mely értékei NoData értékűek. 1 értéket ad vissza, ha a bemeneti értékek NoData értékűek, és 0 értéket azoknál a celláknál, amelyek nem.",
		isNullDesc: "A Null Értékű funkció pixelenkénti alapon meghatározza, hogy a bemeneti raszter mely értékei NoData értékűek. 1 értéket ad vissza, ha a bemeneti érték NoData, és 0 értéket azoknál a pixeleknél, amelyek nem NoData értékűek.",
		kernelDensityName: "Kernelsűrűség",
		kernelDensitySnip: "Pontból vagy vonallánc típusú vektoros elemből számítja ki az egységnyi területre eső nagyságot egy kernelfüggvény segítségével, hogy kisimított kúpfelületet illesszen minden egyes pontra vagy vonalláncra.",
		kernelDensityDesc: "Ez a funkció pontból vagy vonallánc típusú vektoros elemből számítja ki az egységnyi területre eső nagyságot egy kernelfüggvény segítségével, hogy kisimított kúpfelületet illesszen minden egyes pontra vagy vonalláncra.",
		keyMetadataName: "Fő metaadatok",
		keyMetadataSnip: "Felülbírálja vagy beilleszti a fő metaadatokat egy műveletsorban.",
		keyMetadataDesc: "Ez a funkció lehetővé teszi egy raszter fő metaadatainak beillesztését vagy felülbírálását.<div><br/>A fő metaadatokban található információk segítik az alkalmazást bizonyos feldolgozással és rendereléssel, beleértve néhány hasznos információt, például az érzékelő neve, a sávnevek vagy a távérzékelt felvételhez kapcsolódó felhőtakaró.</div>",
		shortestPathName: "Legolcsóbb Útvonal",
		shortestPathSnip: "Költségtávolság-elemzést végez a kiindulópont és a célállomás bemenetek használatával, amely segítségével megállapítja a legolcsóbb útvonalat a kiindulóponttól a célállomásig.",
		shortestPathDesc: "A Legolcsóbb Útvonal funkció kiszámítja a legkisebb költséggel járó útvonalat a kiindulóponttól a célállomásig. A legkisebb kumulatív költségtávolságot számítja ki a legközelebbi forrásig minden egyes pixelhez egy költségfelszínen. Ez egy olyan kimeneti rasztert hoz létre, amely rögzíti a legolcsóbb útvonalat vagy útvonalakat a kiválasztott helyektől a kumulatív költségfelületen belül meghatározott, a költségtávolság szempontjából legközelebbi forráspixelhez.<div><br/>Mindegyik legolcsóbb útvonalhoz a szkennelési folyamat során rendel hozzá egy értéket. A költségútvonal forrásraszterén a végponti pixel 1-es értéket kap. Az első útvonal 3-as értéket kap, a második 4-est, és így tovább. Ha több útvonal egyesül, és követi a fennmaradó távolságot egy ugyanazon az úton lévő forráshoz, akkor az a szegmens, ahol a két útvonal együtt mozog, 2-es értéket kap. Az útvonal egyesített részéhez nem rendelhető hozzá az egyik útvonal értéke, mivel az egyesített rész mindkét útvonalhoz hozzátartozik.</div>",
		lessThanEqualName: "Kisebb Vagy Egyenlő",
		lessThanEqualSnip: "Relációs kisebb vagy egyenlő műveletet hajt végre két bemeneten cellánkénti alapon. 1 értéket ad vissza olyan celláknál, ahol az első raszter kisebb vagy egyenlő a második raszterrel, és 0 értéket, ahol nem.",
		lessThanEqualDesc: "A funkció relációs kisebb vagy egyenlő műveletet hajt végre két bemeneten pixelenkénti alapon. 1 értéket ad vissza az olyan pixeleknél, ahol az első raszter kisebb vagy egyenlő a második raszterrel, és 0 értéket ad vissza, ahol nem kisebb vagy egyenlő a második raszterrel.",
		lessThanName: "Kisebb, mint",
		lessThanSnip: "Relációs kisebb, mint műveletet hajt végre két bemeneten cellánkénti alapon. 1 értéket ad vissza olyan celláknál, ahol az első raszter kisebb, mint a második raszter, és 0 értéket, ahol nem.",
		lessThanDesc: "A funkció relációs kisebb, mint műveletet hajt végre két bemeneten pixelenkénti alapon. 1 értéket ad vissza az olyan pixeleknél, ahol az első raszter kisebb a második raszternél, és 0 értéket ad vissza, ahol nem kisebb a második raszternél.",
		lnName: "Ln",
		lnSnip: "Egy raszter celláinak természetes alapú (e alapú) logaritmusát számítja ki.",
		lnDesc: "Az Ln funkció egy raszter összes pixelének természetes alapú (e alapú) logaritmusát számítja ki.",
		log10Name: "Log10",
		log10Snip: "Egy raszter celláinak 10-es alapú logaritmusát számítja ki.",
		log10Desc: "A Log10 funkció egy raszter összes pixelének 10-es alapú logaritmusát számítja ki.",
		log2Name: "Log2",
		log2Snip: "Egy raszter celláinak 2-es alapú logaritmusát számítja ki.",
		log2Desc: "A Log2 funkció egy raszter összes pixelének 2-es alapú logaritmusát számítja ki.",
		lookupName: "Keresés",
		lookupSnip: "Új rasztert hoz létre a bemeneti raszter táblázatának egy másik mezőjében található értékek keresésével.",
		lookupDesc: "A funkció új rasztert hoz létre a bemeneti raszter táblázatának egy másik mezőjében található értékek keresésével.",
		mlClassifyName: "ML osztályozás",
		mlClassifySnip: "A távérzékelt felvételeket pixelenkénti megközelítéssel osztályozza. Vegyes pixelek vannak hozzárendelve a vektoros elemhez, a legnagyobb százalékértékkel.",
		mlClassifyDesc: "Az ML osztályozás funkció lehetővé teszi a felügyelt osztályozás elvégzését a maximális valószínűség osztályozási algoritmus segítségével, raszteres adathalmazban vagy mozaik-adathalmazban. Ehhez a funkcióhoz osztályozási fájlra van szükség.",
		maskName: "Maszk:",
		maskSnip: "Azokat az értékeket állítja be, amelyeket nem kíván megjeleníteni.",
		maskDesc: "Ez a raszterfunkció azokat az értékeket állítja be, amelyeket nem kíván megjeleníteni a raszterben. A Maszk funkció használatával egy vagy több NoData értéket vagy érvényes pixel értékek tartományát adhatja meg. ",
		minusName: "Mínusz",
		minusSnip: "Kivonja a második bemeneti raszter értékét az első bemeneti raszter értékéből, cellánkénti alapon.",
		minusDesc: "A mínusz funkció kivonja a második bemeneti raszter értékét az első bemeneti raszter értékéből, pixelenkénti alapon.",
		modName: "Moduló",
		modSnip: "Az első raszter maradék értékét (modulo) adja meg, miután a második raszterrel elosztja cellánkénti alapon.",
		modDesc: "A Moduló funkció az első raszter maradék értékét (modulo) adja meg, miután a második raszterrel elosztja pixelenkénti alapon. A bemenetek sorrendje fontos, és befolyásolja a kimeneti eredményt.",
		mosaicRastersName: "Mozaik-raszterek",
		mosaicRastersSnip: "Összefűzi a raszteres adathalmazok készletét egy adathalmaz létrehozásához.",
		mosaicRastersDesc: "A Mozaik-raszterek funkció több képből mozaikképet hoz létre. Ha átfedés van a képek között, többféle módszer közül választhat annak meghatározásához, hogy mely képeket jelenítse meg.",
		ndviColorizedName: "Színezett NDVI",
		ndviColorizedSnip: "Létrehoz egy többsávos adathalmazt, amely a növényzet egészségét ábrázolja, a vörös és közeli infravörös sávok közötti különbség alapján.",
		ndviColorizedDesc: "A Színezett NDVI funkció az NDVI funkciót alkalmazza a bemeneti képen, majd egy színtérképet vagy színskálát használva jeleníti meg az eredményt.",
		ndviName: "NDVI",
		ndviSnip: "Kiszámítja a normalizált vegetációs indexet (NDVI).",
		ndviDesc: "Az NDVI funkció egy egysávos adathalmazt hoz létre, amely a növényzet egészségét ábrázolja, a vörös és közeli infravörös sávok közötti különbség alapján.<div><br/>Az NDVI egy standardizált index, amely lehetővé teszi a zöldességet vagy más néven a relatív biomasszát megjelenítő kép létrehozását. Ez az index egy multispektrális raszteres adathalmaz két sávjának jellemzői közötti kontrasztot használja ki: a klorofillpigment elnyelését a látható vörös sávban és a növények anyagainak magas fényvisszaverő képességét a közeli infravörös (NIR) sávban. A rendkívül alacsony vagy negatív NDVI értékek olyan területeket képviselnek, amelyek egyáltalán nem rendelkeznek vegetációval, mint például a felhő, a víz vagy a hó. A nagyon alacsony értékek kevés növényzetet vagy annak teljes hiányát képviselik, mint például a beton, a kőzet vagy a csupasz talaj. A mérsékelt értékek cserjés és gyepes területet jelentenek. A magas értékek erdőterületeket és buja növényzetet jeleznek.</div>",
		negateName: "Negálás",
		negateSnip: "Megváltoztatja a bemeneti raszter cellaértékeinek előjelét (szorozza -1-gyel) cellánkénti alapon.",
		negateDesc: "A Negálás funkció megváltoztatja a bemeneti raszter pixelértékeinek előjelét (szorozza -1-gyel) egy pixelen ",
		nibbleName: "Elvétel",
		nibbleSnip: "Egy maszkhoz tartozó raszter celláit helyettesíti a legközelebbi szomszédok értékeivel.",
		nibbleDesc: "Az Elvétel globális funkció lehetővé teszi a legközelebbi szomszéd értékének hozzárendelését a raszter egyes területeihez. Ez egy raszter olyan területeinek szerkesztésénél hasznos, ahol az adatok hibásak lehetnek.",
		notEqualName: "Nem Egyenlő",
		notEqualSnip: "Relációs nem egyenlő műveletet hajt végre két bemeneten cellánkénti alapon. 1 értéket ad vissza olyan celláknál, ahol az első raszter nem egyenlő a második raszterrel, és 0 értéket, ahol egyenlő.",
		notEqualDesc: "A funkció relációs nem egyenlő műveletet hajt végre két bemeneten pixelenkénti alapon. 1 értéket ad vissza az olyan pixeleknél, ahol az első raszter nem egyenlő a második raszterrel, és 0 értéket ad vissza az olyan pixeleknél, ahol egyenlő a második raszterrel.",
		pansharpeningName: "Pánkromatikus élesítés",
		pansharpeningSnip: "Mesterségesen növeli egy többsávos kép térbeli felbontását egy nagyobb felbontású pánkromatikus képpel való egyesítéssel.",
		pansharpeningDesc: "A Pánkromatikus Élesítés funkció nagyobb felbontású pánkromatikus képet vagy raszteres sávot használ alacsonyabb felbontású, többsávos raszteres adathalmazzal való egyesítéshez, hogy növelje a többsávos kép térbeli felbontását.<div><br/>A pánkromatikus élesítés célja egy jobb minőségű vizuális kép létrehozása. Mivel a technikák megváltoztatják a többsávos távérzékelt felvételek radiometriáját és spektrális jellemzőit, a pánkromatikus élesített távérzékelt felvételeket óvatosan kell használni az analitikai távérzékelés céljára.</div>",
		pathAllocationName: "Útvonal–Távolság Hozzárendelés",
		pathAllocationSnip: "Minden egyes cellára kiszámítja a legolcsóbb forrást a legkisebb kumulatív költség alapján a költségfelszínen, miközben figyelembe veszi a felszíni távolságot a vízszintes és függőleges költségtényezőkkel együtt.",
		pathAllocationDesc: "Az Útvonal–Távolság Hozzárendelés funkció minden egyes cellára kiszámítja a legközelebbi forrást a legkisebb kumulatív költség alapján a költségfelszínen, miközben figyelembe veszi a felszíni távolságot és a vízszintes és függőleges költségtényezőket.",
		pathBackLinkName: "Útvonal–távolság visszahivatkozás",
		pathBackLinkSnip: "Meghatározza a szomszédot, amely a legolcsóbb forrás felé vezető legkisebb kumulatív költségútvonalon található következő cella, miközben figyelembe veszi a felszíni távolságot és a vízszintes és függőleges költségtényezőket.",
		pathBackLinkDesc: "Az Útvonal–Távolság Visszahivatkozás funkció azonosítja a szomszéd irányítottságát, amely a legközelebbi forrás felé vezető legkisebb kumulatív költségútvonalon található következő cella, miközben figyelembe veszi a felszíni távolságot és a vízszintes és függőleges költségtényezőket.",
		pathDistanceName: "Útvonaltávolság",
		pathDistanceSnip: "Minden egyes cellára kiszámítja a legolcsóbb forráshoz vagy forrástól a legkisebb kumulatív költségtávolságot, miközben figyelembe veszi a felszíni távolságot a vízszintes és függőleges költségtényezőkkel együtt.",
		pathDistanceDesc: "Az Útvonaltávolság funkció minden egyes cellára kiszámítja a legközelebbi forráshoz tartozó legkisebb kumulatív költségtávolságot, miközben figyelembe veszi a felszíni távolságot és a vízszintes és függőleges költségtényezőket.",
		plusName: "Plusz",
		plusSnip: "Két raszter értékeit adja össze (összegzi) cellánkénti alapon.",
		plusDesc: "A Plusz funkció két raszter értékeit adja össze (összegzi) pixelenkénti alapon.",
		powerName: "Hatvány",
		powerSnip: "Egy raszterben lévő cellaértékeket emeli egy másik raszterben található értékek szerinti hatványra.",
		powerDesc: "A Hatvány funkció egy raszterben lévő pixelértékeket emel egy másik raszterben található értékek szerinti hatványra.",
		radarCalibrationName: "Radar Kalibráció",
		radarCalibrationSnip: "Átalakítja a RADARSAT-2 visszaszórást.",
		radarCalibrationDesc: "Ezzel a funkcióval kalibrálhat RADARSAT-2 távérzékelt felvételeket mozaik-adathalmazban vagy raszteres termékként. A kalibrálást úgy végzi el a radarfelvételeken, hogy a pixelértékek hűen tükrözik a radar visszaszórását.",
		rasterInfoName: "Raszterinformáció",
		rasterInfoSnip: "Módosítja a raszter tulajdonságait, például a bitmélységet, a NoData értéket, a cellaméretet stb.",
		rasterInfoDesc: "A Raszterinformáció egy párbeszédpanelt nyit meg raszteres adathalmaz tulajdonságaival, például az oszlopok és sorok számával, a sávok számával, a pixel típusával, a kiterjedéssel és a térbeli referenciával. Úgy is szerkesztheti ezeket a tulajdonságokat, hogy sablonként való használatra kiválaszt egy raszteres adathalmazt. ",
		rasterizeAttributesName: "Raszter Attribútumok",
		rasterizeAttributesSnip: "Gazdagítja a rasztert egy külső tábla vagy egy vektoros szolgáltatás megadott attribútumainak értékeiből származó további sávok hozzáadásával.",
		rasterizeAttributesDesc: "A Raszter Attribútumok funkció gazdagítja a rasztert a megadott attribútumok értékeiből származó sávok hozzáadásával, egy külső táblából vagy egy vektoros szolgáltatásból. Megadhat egy zóna rasztert és a hozzárendelt zónaazonosító attribútumot a régió alapú keresés engedélyezéséhez.",
		rasterizeFeatureClassName: "Vektoros elemek raszteressé alakítása",
		rasterizeFeatureClassSnip: "Átalakítja a vektoros elemet raszterré.",
		rasterizeFeatureClassDesc: "Ez a funkció raszteres réteggé alakítja át a sokszög, a vonallánc és a pontszerű vektoroselem-osztályú adatokat.<div><br/>A vektoros elemekhez a vektoros elemek OBJECTID (alapértelmezett) azonosítója alapján rendeli hozzá a pixelértékeket. Opcionálisan a pixelértékek a bemeneti vektoros elem attribútumtáblájában szereplő felhasználó által definiált értékmezőn is alapulhatnak.</div>",
		recastName: "Átdolgozás",
		recastSnip: "Módosítja a műveletsor paramétereit egy mozaik-adathalmazban vagy képszolgáltatásban. Gyakran használják az LAS adathalmazokkal, hogy elkerüljék a különféle mozaik-adathalmazok létrehozását a felszín különböző ábrázolásaihoz.",
		recastDesc: "Az Átdolgozás funkció segítségével a mozaik-adathalmazban vagy a képszolgáltatásban használt funkcióparaméter dinamikusan módosítható anélkül, hogy a változások fizikailag megmaradnának.",
		regionGroupName: "Régiócsoport",
		regionGroupSnip: "A kimenet minden egyes cellájához rögzíti annak a csatlakozó régiónak az azonosítását, amelyhez a cella tartozik. Mindegyik régióhoz egyedi szám tartozik.",
		regionGroupDesc: "A Régiócsoport globális funkció a kimenet minden egyes cellájához rögzíti annak a csatlakozó régiónak az azonosítását, amelyhez a cella tartozik. Mindegyik régióhoz egyedi szám tartozik.<div><br/>Az első szkennelt régió megkapja az egyes értéket, a második a kettest, és így tovább, amíg az összes régió értéket nem kap. A szkennelés balról jobbra, felülről lefelé halad. A kimeneti zónákhoz rendelt értékek azon alapulnak, hogy mikor kerültek sorra a szkennelési folyamatban.</div>",
		regionGrowName: "Régiónövelés",
		regionGrowSnip: "Régiókat növel a kezdőpontoktól.",
		regionGrowDesc: "A Régiónövelés funkció a szomszédos pixeleket csoportokba sorolja a kezdőponttól induló, megadott sugártól függően. A pixelek vagy objektumok csoportjához hozzárendel egy meghatározott kitöltési értéket.",
		remapName: "Újraleképezés",
		remapSnip: "Módosítja a pixelértékeket a pixelértékek tartományaihoz hozzárendelt új pixelértékekkel vagy egy külső táblázat használatával.",
		remapDesc: "Az Újraleképezés funkcióval lehetősége adódik módosítani vagy másik osztályba sorolni a raszteres adatok pixelértékeit. Ezt úgy lehet elvégezni, hogy megadja a pixelértékek tartományát egy kimeneti pixelértékre való leképezéshez, vagy egy táblázat használatával adja meg, hogy mely pixelértékeket képezzen le a kimeneti pixelértékre.",
		reprojectName: "Újravetítés",
		reprojectSnip: "Módosítja egy raszteres adathalmaz, mozaik-adathalmaz vagy raszterelem vetületét egy mozaik-adathalmazban. Az adatokat új cellaméretre is újramintavételezheti és meghatározhat egy kiindulópontot.",
		reprojectDesc: "Az Újravetítés funkció módosítja egy raszteres adathalmaz, mozaik-adathalmaz vagy raszterelem vetületét egy mozaik-adathalmazban. Az adatokat új cellaméretre is újramintavételezheti és meghatározhat egy kiindulópontot.<div><br/>Az Újravetítés funkció használható gyorsítótár létrehozásakor egy olyan raszteres vagy mozaik-adathalmazból, amely nincs a kívánt vetületben. Ha például olyan gyorsítótárazott képszolgáltatást hoz létre, amely alkalmazásokkal más gyorsítótárazott szolgáltatásokkal integrálható, akkor fontos, hogy mindegyikük ugyanabban a vetületben legyen. Ez gyakran egy Web Mercator vetület. Mivel a mozaik-adathalmazt nem lehet újravetíteni, két dolog közül választhat,—vagy hozzon létre egy hivatkozott mozaik-adathalmazt a mozaik-adathalmazból a szükséges vetületben, vagy tegye be az Újravetítés funkciót a mozaik-adathalmaz műveletsorába. Egy másik példa ezt a funkciót használja egy mozaik-adathalmazban található raszterelemen. A Gyorsítótárazott raszter funkció használatánál behelyezheti az Újravetítés funkciót, így a gyorsítótár az új vetületben jön létre. A mozaik-adathalmazban található raszterelemek gyorsítótárba kerülhetnek, amikor a feldolgozás intenzív, és megpróbál közzétenni egy gyors képszolgáltatást, a teljes képszolgáltatás gyorsítótárazása nélkül.</div>",
		resampleName: "Újramintavételezés",
		resampleSnip: "Megváltoztatja egy raszter cellaméretét.",
		resampleDesc: "Az Újramintavételezés funkció megváltoztatja a cellaméretet, az újramintavételezés típusát, vagy mindkettőt.<div><br/>Az Újra-mintavételezés funkciót csak meghatározott számítási követelményeknél szabad használni; például, amikor kiszámítja a szelet vagy az aktuális nagyság–irányt, amely a forrásfelbontásból újra-mintavételezést igényel.</div>",
		roundDownName: "Lekerekítés",
		roundDownSnip: "A következő alacsonyabb egész számot adja vissza lebegőpontos értékként megjelenítve egy raszter minden egyes cellájához.",
		roundDownDesc: "A Lekerekítés funkció a következő alacsonyabb egész számot adja vissza lebegőpontos értékként egy raszter minden egyes pixeléhez.",
		roundUpName: "Felkerekítés",
		roundUpSnip: "A következő magasabb egész számot adja vissza lebegőpontos értékként megjelenítve egy raszter minden egyes cellájához.",
		roundUpDesc: "A Felkerekítés funkció a következő magasabb egész számot adja vissza lebegőpontos értékként egy raszter minden egyes pixeléhez.",
		segmentMeanShiftName: "Szegmensátlag Eltolása",
		segmentMeanShiftSnip: "Szegmensekbe csoportosítja a hasonló spektrális jellemzőkkel bíró szomszédos pixeleket.",
		segmentMeanShiftDesc: "Ez a funkció azonosítja a távérzékelt felvételek objektumait, vektoros elemeit vagy szegmenseit a szomszédos pixelek csoportosításával, amelyek hasonló spektrális és térbeli jellemzőkkel rendelkeznek. A térbeli és spektrális simítás mértékét szabályozhatja, hogy segítse az érdeklődésre számot tartó vektoros elemek képzését.",
		s1RadiometricCalibrationName: "Sentinel-1 Radiometrikus Kalibráció",
		s1RadiometricCalibrationSnip: "Különböző típusú radiometrikus kalibrálásokat végez a Sentinel-1 adatokon.",
		s1RadiometricCalibrationDesc: "Ez a raszterfunkció három különböző kalibrálást végez a Sentinel 1 adathalmazokhoz, beleértve a béta nullát és a gammát, és kalibrált adathalmazt adja kimenetként. A SAR-kalibrálás célja, hogy olyan távérzékelt felvételeket biztosítson, amelyekben a pixelértékek közvetlenül a terep radar-visszaszórásához kapcsolódhatnak. Bár a kalibrálatlan SAR távérzékelt felvételek elégségesek a kvalitatív használathoz, a kalibrált SAR képek elengedhetetlenek a SAR-adatok kvantitatív használatához.<div><br/>A tipikus SAR adatfeldolgozás, amely 1. szintű képeket készít, nem tartalmaz radiometriai korrekciókat, és jelentős radiometriás torzítás marad benne. Ezért szükséges radiometriai korrekciót alkalmazni a SAR képekre, hogy a képek pixelértékei valóban megfeleljenek a visszaverő felszín radar-visszaszórásának. Radiometrikus korrekció szükséges a különböző szenzorokkal szerzett SAR képek, vagy ugyanazzal a szenzorral különböző időpontokban, különböző módokon szerzett vagy különböző processzorok által feldolgozott képek összehasonlításához is.</div>",
		s1ThermalNoiseRemovalName: "Sentinel-1 Hőzaj Eltávolítása",
		s1ThermalNoiseRemovalSnip: "Eltávolítja a hőzajt a Sentinel-1 adatokból.",
		s1ThermalNoiseRemovalDesc: "A termikus zaj korrekciója alkalmazható a Sentinel-1 Level-1 Single Look Complex (SLC) termékekre, valamint a Level-1 Ground Range Detection (GRD) termékekre, amelyeket még nem javítottak. Az operátor a termék annotációi alapján eltávolíthatja ezt a korrekciót az eredeti termék előállításához eltávolított zajjel újbóli bevezetésével. A termék annotációi ennek megfelelően frissülnek a korrekció újbóli alkalmazásának lehetővé tétele érdekében. ",
		setNullName: "Null beállítása",
		setNullSnip: "A Null beállítása meghatározott kritériumok alapján azonosított cellák helyét NoData értékre állítja. NoData értéket ad vissza, ha a feltételes értékelés igaz, és egy másik raszterben meghatározott értéket ad vissza, ha hamis.",
		setNullDesc: "A Null Beállítása funkció a meghatározott kritériumok alapján azonosított pixeleket NoData értékűre állítja. NoData értéket ad vissza, ha a feltételes értékelés igaz (1), és a Hamis raszterben meghatározott értéket adja vissza, ha a feltételes értékelés hamis (0). Ezt a kritériumot egy logikai matematikai függvény kimenete határozza meg, amely a bemeneti raszter lesz.",
		shadedReliefName: "Árnyékolt Terepmodell",
		shadedReliefSnip: "A felszín többsávos, színkódolt 3D-s megjelenítését hozza létre, a nap viszonylagos helyzetét figyelembe véve a kép árnyékolásánál.",
		shadedReliefDesc: "Az Árnyékolt Terepmodell funkció létrehozza a felszín színes 3D-s ábrázolását a magasságkódolású és a domborzatárnyékolási módszerek egyesítésével. Ez a funkció a magassági és azimut tulajdonságokat használja a nap pozíciójának meghatározásához.<div><br/></div>",
		sinHName: "SinH",
		sinHSnip: "Kiszámítja a raszter celláinak hiperbolikus szinuszát.",
		sinHDesc: "Ez a funkció kiszámítja a raszter pixeleinek hiperbolikus szinuszát.",
		sinName: "Sin",
		sinSnip: "Kiszámítja a raszter celláinak szinuszát.",
		sinDesc: "Ez a funkció kiszámítja a raszter pixeleinek szinuszát.",
		slopeName: "Meredekség",
		slopeSnip: "A változás mértékét számítja ki egy pixelérték és a szomszédai között.",
		slopeDesc: "Ez a raszterfunkció a digitális magasságmodell (DMM) minden egyes cellájához kiszámítja a meredekséget, ami a magasság változásának mértéke. Ez a DMM első deriváltja.<div><br/>Ez a funkció egy gyorsított atan() funkciót használ. Ez hatszor gyorsabb, és a közelítési hiba mindig 0,3 fok alatt marad.</div>",
		speckleName: "Folt",
		speckleSnip: "Szűrőket biztosít a szintetikus apertúrájú radar-adathalmazok zajmentesítésére.",
		speckleDesc: "A Folt a radaradatok magas frekvenciájú zaja. A szintetikus apertúrájú radar (SAR) rendszerek által létrehozott képek nagymértékben ki vannak téve a foltosodási hatásoknak a szétszóródó jelek feldolgozása és a felszínről vagy a tárgyakról szétszóródó elektromágneses hullámok interferenciája miatt. Ez a Folt funkció megszűri a foltos radar-adathalmazt és kisimítja a zajt, miközben megtartja a kép éleit vagy éles vektoros elemeit.",
		spectralConversionName: "Spektrális Konverzió",
		spectralConversionSnip: "Egy mátrixot alkalmaz egy többsávos képre.",
		spectralConversionDesc: "A Spektrális Konverzió funkció egy mátrixot alkalmaz egy többsávos képre, hogy befolyásolja a kimenet színértékeit.<div><br/>Egyes szenzorok nem gyűjtenek kék sávokat alacsony jel–zaj viszony miatt. Ez például egy hamis színes infravörös kép áltermészetes színes képre való átalakítására használható.</div>",
		squareRootName: "Négyzetgyök",
		squareRootSnip: "Kiszámítja a raszter cellaértékeinek négyzetgyökét.",
		squareRootDesc: "A Négyzetgyök funkció kiszámítja a raszter pixelértékeinek négyzetgyökét.",
		squareName: "Négyzet",
		squareSnip: "Kiszámítja a raszter cellaértékeinek négyzetét.",
		squareDesc: "A Négyzet kiszámítja a raszter pixelértékeinek négyzetét.",
		statisticsHistogramName: "Statisztika és hisztogram",
		statisticsHistogramSnip: "Statisztikát és hisztogramot definiál vagy társít.",
		statisticsHistogramDesc: "A Statisztika és Hisztogram funkció segítségével definiálható egy raszter statisztikája és hisztogramja. Ezt a funkciót a műveletsor végén helyezheti el, hogy leírja a raszterfunkció-sablon (RFT) statisztikáját és hisztogramját. Erre szükség lehet a feldolgozási eredmény alapértelmezett megjelenítésének vezérléséhez, különösen olyan műveletsor definiálásánál, amely sok funkciót tartalmaz.<div><br/>A statisztikákat az értékek beírásával adhatja meg, illetve raszteres adathalmazból vagy XML-fájlból importálhatja. Hisztogramokat csak fájl importálásával lehet meghatározni.</div>",
		statisticsName: "Statisztika",
		statisticsSnip: "Kiszámítja az egyes pixelek meghatározott fokális környezeten alapuló fokális statisztikáit.",
		statisticsDesc: "A Statisztika funkció kiszámítja az egyes pixelek meghatározott fokális környezeten alapuló fokális statisztikáit.<div><br/>A Statisztika funkció használható egy képben levő kiesett vonalak kitöltésére. A kiesett vonalakat gyakran a szenzor problémái okozzák, amikor nem gyűjtik be az adatokat. Ez olyan érzékelőkben történt meg, mint például a Landsat 7 Enhanced Thematic Mapper Plus (ETM +). Ezek a hiányzó adatok problémákat okoznak az elemzésben és a távérzékelt felvételek megjelenítésében is. Keveset lehet tenni a távérzékelt felvételek elemzésében; ha azonban van egy átfedő kép, akkor az használható a hiányzó tartalom helyett. Ugyanezt lehet tenni, ha a távérzékelt felvételeket megjelenítésre használják. A hiányzó tartalom kitöltéséhez azonban nem mindig áll rendelkezésre extra kép, így a meglévő adatokból kell származtatni.</div>",
		streamLinkName: "Áramlás-kapcsolat",
		streamLinkSnip: "Egyedi értékeket rendel egy raszteres lineáris hálózat szekcióihoz a metszéspontok között.",
		streamLinkDesc: "A globális Áramlás-kapcsolat funkció egyedi értékeket rendel egy raszteres lineáris hálózat szekcióihoz a metszéspontok között.<div><br/>A kapcsolatok egy vízáramlási csatorna szekciói, amelyek két egymást követő csomópontot, egy csomópontot és a kimenetet, vagy egy csomópontot és a vízelvezető választóvonalat összekötik. A hidrológiában ezeket a vízáramlási szekciókat kiterjedéseknek is nevezik. A csomópont egy kifolyási ponthoz kapcsolódik, és segít határvonalat létrehozni egy vízgyűjtő terület vagy részvízgyűjtő vízhálózati elem határánál.</div>",
		stretchName: "Nyújtás",
		stretchSnip: "A megjelenített értékek tartományának beállításával javít egy képet. Ez nem változtatja meg a mögötte levő pixelértékeket. Ha egy pixel értéke a megadott tartományon kívül esik, akkor minimum vagy maximum értékként jelenik meg.",
		stretchDesc: "A Nyújtás funkció egy kép olyan tulajdonságait javítja, mint a fényerő, a kontraszt és a gamma megváltoztatásával több nyújtási típuson keresztül. Ez a funkció a mozaik-adathalmazban található raszterek statisztikáit használja; ezért ennek a funkciónak a használatánál győződjön meg arról, hogy kiszámították-e a statisztikákat.<div><br/>A nyújtás típusa határozza meg azt a hisztogramnyújtást, amelyet a raszterekre alkalmaz a megjelenés fokozására. A nyújtás javítja az adatok megjelenését azáltal, hogy kiterjeszti a pixelértékeket egy hisztogram mentén a bitmélységük által meghatározott minimális és maximális értékek alapján. </div>",
		swathName: "Rend",
		swathSnip: "Szabálytalan rácsokhálókból vagy a rend adatokból interpolál.",
		swathDesc: "Néhány netCDF vagy HDF adathalmaz a földrajzi helyet szabálytalanul elhelyezett tömbökben tárolja. Amikor ezeket az adathalmazokat mozaik-adathalmazhoz adja hozzá, a Rend funkció átveszi a szabálytalan rácshálós adatokat, és újraszámítja azokat, így minden pixel egységes méretű és négyzet alakú lesz.<div><br/>Ha netCDF vagy HDF forrásból ad hozzá változókat mozaik-adathalmazhoz, akkor automatikusan ellenőrzi, hogy szabályosan vannak-e tömbösítve az adatok. Ha nem, a rend funkciót használja automatikusan a szabálytalan raszter pontokká, majd szabályos rácshálós raszterré alakítására. Megváltoztathatja a rend raszterfunkcióban használt interpolációs módszert és a cellaméretet. Szabályosan elhelyezett raszteradatok esetén nem alkalmaz interpolációt, az adatokat eredeti formában fogja beolvasni.</div>",
		tanHName: "TanH",
		tanHSnip: "Kiszámítja a raszter celláinak hiperbolikus tangensét.",
		tanHDesc: "Ez a funkció kiszámítja a raszter pixeleinek hiperbolikus tangensét.",
		tanName: "Tan",
		tanSnip: "Kiszámítja a raszter celláinak tangensét.",
		tanDesc: "Ez a funkció kiszámítja a raszter pixeleinek tangensét. ",
		tasseledCapName: "Tasseled Cap (Kauth-Thomas)",
		tasseledCapSnip: "Kiszámítja a növényzet, a nedvesség és a fényerő szintjét. Ez a technika olyan együtthatókra támaszkodik, amelyeket kifejezetten egy érzékelőhöz kell kiszámítani.",
		tasseledCapDesc: "A Tasseled Cap (Kauth-Thomas) transzformáció célja a különböző műholdas szenzor rendszerek által észlelt vegetációs jelenségek és városfejlesztési változások elemzése és térképen való ábrázolása. Tasseled Cap transzformáció néven ismert az adatok grafikus eloszlásának alakja miatt. A transzformáció indokolja a Landsat MSS mezőgazdasági mezők adatait a termés életciklusának függvényében. Lényegében, ahogy a növények a magtól az érettségig nőnek, nettó növekedés tapasztalható a közeli infravörös sávban, és csökkenés a vörös fényvisszaverődésben a talaj színe alapján.<div><br/>Ennek a transzformációnak a hasznossága kiterjedt a növények megfigyelésétől a növényzet elemzéséig és térképes ábrázolásáig, amivel sokféle alkalmazást támogat, többek között az erdészet, az ipari növényzetkezelés, az ökoszisztéma térképes ábrázolása és kezelése, a karbonszekvesztráció és -kreditek leltározása és nyomon követése, valamint a városfejlesztés. A Landsat MSS támogatása több népszerű műholdas rendszerrel bővült, melyek a Landsat TM, a Landsat ETM+, a Landsat 8, az IKONOS, a QuickBird, a WorldView-2 és a RapidEye multispektrális szenzorok.</div>",
		timesName: "Szorzás",
		timesSnip: "Két raszter értékeit szorozza össze cellánkénti alapon.",
		timesDesc: "A Szorzás funkció két raszter értékeit szorozza össze pixelenkénti alapon.",
		transposeBitsName: "Bitek Transzponálása",
		transposeBitsSnip: "Kicsomagolja a bemeneti pixel bitjeit, és leképezi azokat a kimeneti pixel meghatározott bitjeire. Ennek a funkciónak a célja a több bemenetből, például a Landsat 8 minőségi sáv termékeiből származó bitek kezelése.",
		transposeBitsDesc: "A Bitek Transzponálása funkció kicsomagolja a bemeneti pixel bitjeit, és leképezi azokat a kimeneti pixel meghatározott bitjeire. Ennek a funkciónak a célja a több bemenetből, például a Landsat 8 minőségi sáv termékeiből származó bitek kezelése.",
		unitConversionName: "Mértékegység Átváltása",
		unitConversionSnip: "Értékeket vált át egyik mértékegységről a másikra.",
		unitConversionDesc: "Ez a funkció a pixeleket egy mértékegységről egy másikra konvertálja. A távolság, a sebesség és a hőmérséklet átváltását támogatja.",
		vectorFieldName: "Vektor Mező",
		vectorFieldSnip: "Nagyságot (u) és irányt (v) magában foglaló adathalmazokat jelenít meg nyilakkal, ahol a nagyságot a nyíl mérete, az irányt pedig a nyíl szöge képviseli.",
		vectorFieldDesc: "A Vektor Mező funkciót két raszter összeállítására és kétsávos raszterre való átalakítására használják, amely vagy Nagyság–irány vagy U-V adattípusú.<div><br/>Az U értéket néha zónasebességnek, a V értéket pedig meridiánsebességnek is hívják.</div>",
		viewshed2Name: "Belátható Terület",
		viewshed2Snip: "Azokat a helyeket határozza meg geodéziai módszerrel egy raszteres felszínen, amelyek egy megfigyelői vektoros elemek készlete számára láthatók.",
		viewshed2Desc: "A Belátható Terület funkció azokat a helyeket határozza meg geodéziai módszerrel egy raszteres felszínen, amelyek megfigyelői vektoros elemek egy készlete számára láthatók.<div><br/>Az egyes pixelközpontok láthatóságát a cél és az egyes megfigyelők közötti rálátási teszteléssel határozza meg. Ha egy megfigyelő láthatja a célpontot a pixel középpontjában, akkor a pixelt láthatónak tekinti. Ez az eszköz mindig figyelembe veszi a föld görbületét a láthatóság meghatározásánál.</div>",
		watershedName: "Vízgyűjtő Terület",
		watershedSnip: "Az összefolyási területet határozza meg egy raszter cellahalmazán.",
		watershedDesc: "A Vízgyűjtő Terület funkció az összefolyási területet határozza meg egy raszter pixelhalmazán. A vízgyűjtő területeket egy áramlási irányos raszter határozza meg, amely azonosítja az áramlási irányt minden pixelről.",
		weightedOverlayName: "Súlyozott Átfedés",
		weightedOverlaySnip: "Több közös mérési méretarányú raszter átfedését és fontosságának megfelelő súlyozását végzi el.",
		weightedOverlayDesc: "Ez a funkció lehetővé teszi több közös mérési méretarányú raszter átfedését és fontosságának megfelelő súlyozását.",
		weightedSumName: "Súlyozott Összeg",
		weightedSumSnip: "Súlyozást végez és rasztertömböket ad hozzá cellánkénti alapon.",
		weightedSumDesc: "A Súlyozott Összeg funkció lehetővé teszi több raszter egymásra helyezését, mindegyiket megszorozva az adott súlyukkal, és összeadva őket.",
		windchillName: "Szélhűtés",
		windchillSnip: "A környezeti levegő hőmérsékletét és a szélsebességet egyesíti a szélhűtési tényező kiszámításához.",
		windchillDesc: "A Szélhűtés funkció hasznos olyan veszélyes téli körülmények azonosítására, amelyek az elemek való kitettség idejétől függően fagyási sérülést vagy akár kihűlést okozhatnak. A szélhűtés egy olyan módszer, amellyel a szél figyelembe vételével mérhető, hogy az egyén milyen hideget érez a már egyébként is hideg hőmérsékleten. Minél nagyobb a szélsebesség, annál gyorsabban veszít hőt a test, és annál hidegebb érzete lesz.",
		zonalRemapName: "Zónára Vonatkozó Újraleképezés",
		zonalRemapSnip: "Újból leképezi egy raszter pixeleit egy másik raszter és egy táblában megadott zónafüggő értékleképezés által definiált zónák alapján.",
		zonalRemapDesc: "Ez a funkció lehetővé teszi egy raszter pixeleinek újbóli leképezését egy másik raszter és egy táblában megadott zónafüggő értékleképezés által definiált zónák alapján.",
		zonalStatisticsName: "Zónastatisztika",
		zonalStatisticsSnip: "Egy raszter értékeinek statisztikáját számítja ki egy másik adathalmaz zónáiban.",
		zonalStatisticsDesc: "A funkció egy raszter értékeinek statisztikáját számítja ki egy másik adathalmaz zónáiban. Egy zóna a bemenet minden olyan területe, amely azonos értékkel rendelkezik. Ezeknek a területeknek nem kell folytonosnak lenniük. Ha mind a zóna, mind az értékbemenetek azonos felbontásúak, akkor ezeket közvetlenül használja. Ha a felbontások eltérőek, akkor belső újramintavételezést alkalmaz, hogy a felbontások a zónára vonatkozó művelet végrehajtása előtt megegyezzenek.",
		flowLengthName: "Áramlási hosszúság (Flow Length)",
		flowLengthSnip: "Kiszámítja az áramlásiránnyal ellentétes, áramlásirányú vagy súlyozott távolságot az egyes cellák áramlási útvonala mentén.",
		flowLengthDesc: "Ez egy globális raszterfunkció. Ezzel a funkcióval az áramlásiránnyal ellentétes, áramlásirányú vagy súlyozott távolságú raszteres réteget hozhat létre az egyes cellák áramlási útvonala mentén.<div><br/>Az Áramlási hosszúság funkció elsősorban arra szolgál, hogy segítségével kiszámítsák egy medencében a leghosszabb áramlási útvonal hosszúságát. Ezt az értéket gyakran használják a medencében való összegyülekezés idejének kiszámításához. Ezt az Áramlásiránnyal ellentétes irány (Upstream) opcióval lehet megtenni. Ezzel a funkcióval távolság-terület diagramokat lehet létrehozni hipotetikus esőzési és lefolyási eseményekről, melynek során a súlyrasztert impedanciaként alkalmazzák a lejtőn lefelé tartó mozgáshoz.</div>",
		streamOrderName: "Vízfolyás-rend (Stream Order)",
		streamOrderSnip: "Sorszámot rendel hozzá a lineáris hálózat ágait leképező raszter szegmenseihez.",
		streamOrderDesc: "Ez egy globális raszterfunkció. Ez a funkció egy raszteres réteget hoz létre, amelyik sorszámot rendel hozzá a lineáris hálózat ágait leképező raszter szegmenseihez.<div><br/>A Vízfolyás-rend funkció magasabb minőséget eredményez, ha a bemeneti adatfolyam raszteres rétege és a bemeneti áramlási irány raszteres rétege egyazon felszínből származik. Ha a vízfolyás-rend egy raszterezett vízfolyás-adathalmazból származik, előfordulhat, hogy az eredmény használhatatlan lesz, mivel cellánkénti alapon az irány nem felel meg az rendűség helyének. Az Áramlási akkumuláció (Flow Accumulation) funkció eredményeit felhasználva, a magas akkumulálódó áramlással rendelkező cellákat egy küszöbérték alkalmazásával kiválasztva raszteres adatfolyam-hálózatot lehet létrehozni. Például a több mint 100 beáramló cellával rendelkező cellák az áramlási-hálózat meghatározására használhatók. A Con vagy Null beállítása funkcióval hozzon létre egy vízfolyás hálózatot, ahol 100-as vagy annál nagyobb összegyülekezett lefolyás esetén az érték 1-re vált, és a maradék a háttérbe kerül (NoData). Az így kapott áramlási-hálózat az Vízfolyás-rend (Stream Order) funkcióban használható. Ez a funkció csak D8 bemenő áramlási irány raszteres réteget támogat. D8 áramlási irányokat az Áramlási irány (Flow Direction) funkcióval lehet létrehozni, és az alapértelmezett D8 áramlási irány típussal lehet futtatni.</div>",
		snapPourPointName: "Kifolyásipont-csatolás (Snap Pour Point)",
		snapPourPointSnip: "Kifolyási pontokat csatol az adott távolságon belüli legnagyobb összegyülekező lefolyást tartalmazó cellához",
		snapPourPointDesc: "Ez egy globális raszterfunkció. Ezzel a funkcióval kifolyási pontokat lehet az adott távolságon belüli legnagyobb összegyülekezett lefolyást tartalmazó cellához csatolni.<div><br/>A Kifolyásipont-csatolás funkcióval biztosítani lehet a nagy áramlási akkumulációval rendelkező pontok kiválasztását a csatornahálózati medencéknek a Vízgyűjtő terület funkcióval történő kijelölésekor. A Kifolyásipont-csatolás (Snap Pour Point) funkcióval a meghatározott kifolyási pontok körül adott távolságban lehet megkeresni a legnagyobb összegyülekezett lefolyást tartalmazó cellát, és oda áthelyezni a kifolyási pontot. Az eredmény egy egész számú raszteres réteg, ahol a kifolyási pontok eredeti helyei nagyobb összegyülekező lefolyással rendelkező helyekhez vannak csatolva.</div>",
		sinkName: "Nyelő (Sink)",
		sinkSnip: "Olyan raszteres réteg hozható létre, amellyel beazonosítható minden helyi nyelő és belső vízgyűjtővel rendelkező terület.",
		sinkDesc: "Ez egy globális raszterfunkció. Ezzel a funkcióval olyan raszteres réteg hozható létre, amellyel beazonosítható minden helyi nyelő vagy belső vízgyűjtővel rendelkező terület. A nyelő egy olyan cella vagy cellák térben összekapcsolt halmaza, amely áramlási irányához nem rendelhető hozzá az áramlásiirány-raszterek nyolc érvényes értékének egyike sem. Ez olyankor történhet meg, ha minden szomszédos cella magasabb a feldolgozó cellánál, vagy ha két cella egymásba folyik, kétcellás hurkot képezve.<div><br/>A Nyelő funkció csak D8 bemenő áramlási irány raszteres réteget támogat. D8 áramlási irányokat az Áramlási irány (Flow Direction) funkcióval lehet létrehozni, és az alapértelmezett D8 áramlási irány típussal lehet futtatni. A Nyelő (Sink) funkció egy olyan egész számú rasztert eredményez, amely minden nyelőhöz egyedi értéket rendel hozzá. Ezek az egyedi értékek 1 és a helyi nyelők teljes száma közötti értéket vehetnek fel. Ha például a helyi nyelők teljes száma 1000, az egyedi értékek az 1 és 1000 közötti tartományból kerülnek ki.</div>",
		aggregateName: "Összevonás",
		aggregateSnip: "Egy alacsonyabb felbontású verziót hoz létre egy raszterből.",
		aggregateDesc: "Az Összevonás funkció újra-mintavételezést végez egy bemeneti raszteren egy durvább felbontásra egy meghatározott összevonási stratégia alapján. Mindegyik kimeneti cella tartalmazza az adott cella kiterjedése által magában foglalt bemeneti cellák összegét, minimumát, maximumát, átlagát vagy mediánját.<div><br/>Megadhatja azt a tényezőt, amellyel a bemeneti raszter cellaméretét meg kell szorozni. Például ha a cellatényező értéke 3, az olyan kimenetet eredményez, amelyben a cellaméret háromszor nagyobb, mint a bemeneti raszteré. Meghatározhatja a kimenet kiterjedése kezelésének módját arra az esetre, amikor a bemenetben a sorok vagy oszlopok száma nem egész számú többszöröse a cellatényezőnek. Alapértelmezés szerint a felső és a jobb oldali határok lesznek kiterjesztve a bemeneti raszterénél nagyobb térbeli kiterjedés lefedéséhez, hogy az összes bemeneti cella biztosan fel legyen dolgozva. A felső és jobb oldali határok ugyanígy csökkenthetők is kisebb kiterjedés lefedéséhez, hogy a feldolgozott sorok és oszlopok száma a cellatényező egész számú többszöröse legyen. Meghatározhatja, hogy az összevonási számítás hogyan kezelje a NoData cellákat. Az alapértelmezett mechanizmus, hogy a kimeneti raszteren lévő nagyobb cella térbeli kiterjedésébe eső bemeneti NoData cellákat figyelmen kívül hagyja az adott kimeneti cella értékének meghatározásakor. Vagy beállítható az is, hogy ha csak egyetlen bemeneti NoData cella is található egy kimenet cella térbeli kiterjedésén belül, az a cella NoData lesz a kimeneti raszteren is.</div>",
		ccdcName: "CCDC-elemzés",
		ccdcSnip: "A pixelértékek időbeli változását értékeli ki az ún. Folyamatos Változásészlelés és -Osztályozás (Continuous Change Detection and Classification, CCDC) algoritmus segítségével, és elkészíti a modell eredményeit.",
		ccdcDesc: "A CCDC-elemzési funkció a pixelértékek időbeli változását értékeli ki az ún. Folyamatos Változásészlelés és -Osztályozás (Continuous Change Detection and Classification, CCDC) algoritmus segítségével, és elkészíti a modell eredményeit tartalmazó többdimenziós rasztert. A használata kizárólag a Változásészlelés változáselemzéssel funkcióval együtt támogatott raszterfunkció-sablonban. Raszteres kimenet létrehozásához kapcsolja össze a CCDC-elemzés funkciót a Változásészlelés változáselemzéssel funkcióval, mentse raszterfunkció-sablonként, és futtassa a Raszterelemzést a funkciósablonnal.<div><br/>Ez a funkció a Folyamatos Változásészlelés és -Osztályozás (CCDC) algoritmust használja a pixelértékek időbeli változásának kiértékeléséhez egy képhalmazon. Optikai távérzékelt felvételekből vagy azokból származó elemekből (például NDVI) készült idősorokon a pixelértékek több okból is ingadozhatnak: 1. Szezonális változás – a pixelértékek változása a növényzet szezonális hőmérséklet- és csapadékmennyiség-változásából adódó változását tükrözi. Az északi féltekén például nagyobb sűrűségű zöld vegetációra számítunk nyáron, mint télen; 2. Fokozatos változás – a pixelértékek változása a vegetáció vagy a felszíni víz éghajlatváltozásból vagy hosszú távú termőföldkezelésből eredő trendjeit tükrözi. Például egy területen fokozatosan nőhet a vegetáció nélküli talaj a csapadékmennyiség hosszú távú csökkenése miatt; és 3. Hirtelen változás – a pixelértékek változása a felszínborítás hirtelen, például erdőirtás, városfejlesztés, természeti katasztrófa stb. miatt bekövetkező változását tükrözik. A CCDC algoritmus mindhárom változástípust felismeri, és elsődleges célja a hirtelen változás azonosítása. Az adatokra harmonikus regressziót és trendmodelleket illeszt a szezonális és fokozatos változás becsléséhez, és a trendmodellektől való hirtelen eltérések jelzik a hirtelen változást.<div><br/>A CCDC algoritmust eredetileg Landsat TM, Landsat ETM+ és Landsat OLI data felszíni visszaverődési és fényerő-hőmérsékleti adatok mérésére tervezték. Ugyanakkor a Változásészlelés változáselemzéssel funkció ezzel a funkcióval együtt alkalmazva észlelni fogja a bármely támogatott szenzorból kapott többsávos távérzékelt felvételek változásait, és az egysávos távérzékelt felvételekből származó elemek, például a sávindexek változásait. Például normalizált különbség szerinti vegetációs index (NDVI) raszteren végezhető folyamatos változásészlelés, mert az NDVI hirtelen változásai jelezhetik az erdőirtást.</div>",
		computeChangeName: "Változás kiszámítása",
		computeChangeSnip: "Kiszámítja a különbséget két kategorikus vagy folytonos raszteres adathalmaz között.",
		computeChangeDesc: "A Változás kiszámítása funkció két osztályozott raszter közötti különbség számbavételére használható a felszínborítás-változás elemzéséhez, ezenkívül használható két egysávos folytonos raszter, például magasság, hőmérséklet, lombkorona-fedettség stb. közötti különbség megvizsgálására.",
		detectChangeName: "Változásészlelés változáselemzéssel",
		detectChangeSnip: "Pixelváltozással kapcsolatos információkat tartalmazó raszteres réteget hoz létre a kimenetként kapott változáselemzési rasztert felhasználva.",
		detectChangeDesc: "<div>A Változásészlelés változáselemzéssel funkció pixelváltozással kapcsolatos információkat tartalmazó raszteres réteget hoz létre a változáselemzési rasztert felhasználva. A változáselemzési rasztert a Változások elemzése CCDC használatával eszközzel vagy a Változások elemzése LandTrendr használatával eszközzel kell létrehozni, illetve a CCDC-elemzés raszterfunkcióval vagy a LandTrendr-elemzés raszterfunkcióval.</div><br><div>Ez a raszterfunkció együtt használható a CCDC-elemzés raszterfunkcióval vagy a LandTrend-elemzés raszterfunkcióval egy raszterfunkció-sablonban. Állandó raszteres kimenet létrehozásához kapcsolja össze a CCDC-elemzés vagy a LandTrend-elemzés funkciót a Változásészlelés változáselemzéssel funkcióval, mentse raszterfunkció-sablonként, és futtassa a Raszterelemzést a sablonnal.</div><br><div>A <strong>Változás típusa</strong> paraméter jelzi a létrehozott információt. Az információ a változáselemzésből olvasható ki. Amikor a CCDC funkció/eszköz kimenetén futtatja ezt a függvényt, a következő lehetőségek közül választhat:</div><ul><li><strong>Utolsó változás időpontja</strong> - A legutolsó dátum és idő, amikor egy pixel módosítottnak lett megjelölve.</li><li><strong>Legkorábbi változás időpontja</strong> - A legkorábbi dátum és idő, amikor egy pixel módosítottnak lett megjelölve.</li><li><strong>Legnagyobb változás időpontja</strong> - Az a dátum és idő, amikor a számított módosítás a legszignifikánsabb volt egy pixelnél.</li><li> <strong>Változások száma</strong> - Az a szám, ahányszor a pixel változott.</li></ul><div>Amikor olyan kimeneten futtatja ezt a függvényt a LandTrendr funkcióból/eszközből származik, a következő további lehetőségek érhetők el:</div><ul><li><strong>Leghosszabb változás ideje</strong> - Az a dátum, amikor egy pixel módosítottnak lett megjelölve, a leghosszabb változás kezdetén vagy végén.</li><li><strong>Legrövidebb változás ideje</strong> - Az a dátum, amikor egy pixel módosítottnak lett megjelölve, a legrövidebb változás kezdetén vagy végén.</li><li><strong>Leggyorsabb változás ideje</strong> - Az a dátum, amikor egy pixel módosítottnak lett megjelölve, a leggyorsabb változás kezdetén vagy végén.</li><li><strong>Leglassabb változás ideje</strong> - Az a dátum, amikor egy pixel módosítottnak lett megjelölve, a leglassabb változás kezdetén vagy végén.</li></ul><div>A kimeneti raszter egy többsávos raszter, amelyben mindegyik sáv változási adatokat tartalmaz a választott változási típustól valamint a megadott változások maximális számától függően. Ha például a <strong>Változás típusa</strong> paraméter a <strong>Legkorábbi változás időpontja</strong> értékre van beállítva, és a <strong>Változások maximális száma</strong> paraméter értéke 2, akkor a függvény azt a két legkorábbi dátumot számítja ki, amikor változás történt az idősorban minden pixelnél. Az eredmény egy raszter, amelyben az első sáv tartalmazza a legkorábbi változás dátumát pixelenként, és a második sáv tartalmazza a második legkorábbi változás dátumát pixelenként.Amikor ezt a függvényt a LandTrendr eszközök kimenetén alkalmazza, választhat, hogy a változás kezdetét vagy a változás végét jelző dátumot kívánja-e kiolvasni a Szakasz dátuma paraméter hasz</strong><strong></div><br><div>nálatával . Ha például meg szeretné tudni, hogyan kezdődött a legutolsó változás az idősorban, a <strong>Változás típusa</strong> paramétert állítsa az <strong>Utolsó változás időpontja</strong> értékre, és a <strong>Szakasz dátuma</strong> paramétert állítsa a <strong>Szakasz eleje</strong> értékre.</div><br><div>A következő szűrési paraméterek használatával olvashat ki konkrét dátumokat a változáselemzési raszterből:</div><ul><li><strong>Szűrés év szerint</strong> - Azonosíthatja a meghatározott időtartamon belül történt változásokat, például megkeresheti azokat a változásokat, amelyek egy tájon történtek az ötéves aszály idején.</li><li><strong>Szűrés időtartam szerint</strong> - Azonosíthatja a megadott számú év során történt változásokat, például megkeresheti a hirtelen változásokat, amelyek 1 vagy 2 év alatt történtek. A megfelelő időtartamot a <strong>záró év - kezdő év +1</strong> képlettel számíthatja ki. Az idősorban lévő réseket tartalmazni fogja.</li><li><strong>Szűrés nagyság szerint</strong> - Azonosíthatja a megadott nagyságú változásokat, ha például csak a nagy változásokat keresi a normalizált vegetációs indexben (NDVI). A nagyság abszolút érték, ezért a minimális és a maximális érték nem lehet negatív. Irányra vonatkozó változás megadásához használja a <strong>Változás iránya</strong> paramétert.</li></ul>",
		distanceAccumulationName: "Távolságakkumuláció",
		distanceAccumulationSnip: "Az egyes cellák forrástól vett kumulatív távolságát számítja ki, megengedve az egyenes vonalú távolság, a költségtávolság, a valódi felszíni távolság, valamint a függőleges és vízszintes költségtényezők használatát.",
		distanceAccumulationDesc: "A Távolságakkumuláció a vizsgálati területen lévő helyek legközelebbi vagy legolcsóbban elérhető forrástól vett távolságát számítja ki. Ha bemenetként csak a forrásokat adjuk meg, akkor az egyenes vonalú távolságát számítja ki az egyes helyekhez. Ha bemenetként forrásokat és akadályokat is használunk, akkor a Távolságakkumuláció az akadályokat megkerülő egyenes vonalú távolságot számítja ki. A háttérértéknek a forrásraszternél és az akadályraszternél is NoData típusúnak kell lennie, míg a forrásokat és akadályokat érvényes cellaértékeknek kell jelölniük. Érvényes érték a nulla is. <div><br/>Ha felszínrasztert adunk meg bemenetként, a funkció a cellák közötti tényleges felszíni távolságot számítja ki. Ha a Távolságakkumuláció segítségével költségelemzést szeretnénk elvégezni, költségfelszínre lesz szükségünk. Költségfelszín megadásakor az eredmény kumulatív költségtávolság-raszter lesz. A vízszintes és függőleges tényezők megadásakor figyelembe veszi az irányt is a költség akkumulálása során. Négyféle forráskarakterisztika használható. Ezeket a karakterisztikákat, amelyek tartozhatnak a forráshoz vagy a forrásból elmozduló elemekhez, meghatározott paraméterek vezérlik: 1. Kezdeti akkumuláció: a kezdeti költséget állítja be a mozgás megkezdése előtt. 2. Maximális akkumuláció: azt határozza meg, hogy mennyi költség halmozódhat fel egy forrásnál, mielőtt elérné a korlátját. 3. A költségek szorzótényezője: az utazás módját vagy nagyságát határozza meg a forrásnál. 4. Utazás iránya: azt azonosítja, hogy az elmozduló elem egy forrásból indul és nem forrásnak számító helyek felé mozog vagy fordítva.<div><br/>Alapértelmezés szerint a Távolságakkumuláció eredménye egyetlen sáv: a távolságakkumuláció-raszter. Azonban létrehozható egy második sáv is: a vissziránysáv.  Ez a sáv azt mutatja, hogy a vizsgálati területen található összes helyből indulva milyen irányba kell haladni, hogy eljussunk a legolcsóbban elérhető forráshoz.  Mindkét sávra szükség lesz az optimális útvonalak megállapításához a vizsgálati területen belül. Egy útvonal létrehozásához először használja a Sávkinyerés funkciót a távolságakkumuláció-raszter és a visszirányraszter kinyeréséhez. Használja ezeket a rétegeket a Költségútvonal funkció bemeneteként. A funkcióban a távolságakkumuláció-rasztert használja a Költségtávolság-raszter bemenetként, a visszirányrasztert pedig a Költség-visszahivatkozási raszter bemenetként.</div>",
		distanceAllocationName: "Távolság-hozzárendelés",
		distanceAllocationSnip: "Az egyes cellák távolság-hozzárendelését számítja ki a megadott forrásokhoz egyenes vonalú távolság, költségtávolság, valódi felszíni távolság, valamint a függőleges és vízszintes költségtényezők alapján.",
		distanceAllocationDesc: "A Távolság-hozzárendelés kiszámítja, hogy a vizsgálati területen található helyek melyik forráshoz vannak hozzárendelve. Ha bemenetként csak a forrásokat adjuk meg, akkor az egyenes vonalú távolság felhasználásával rendeli a helyeket a legközelebbi forrásokhoz. Ha bemenetként forrásokat és akadályokat is használunk, akkor a Távolság-hozzárendelés az akadályokat megkerülő egyenes vonalú távolságot számítja ki, és abból állapítja meg, hogy egy hely melyik forráshoz legyen hozzárendelve. A háttérértéknek a forrásraszternél és az akadályraszternél is NoData típusúnak kell lennie, míg a forrásokat és akadályokat érvényes cellaértékeknek kell jelölniük. Érvényes érték a nulla is.<div><br/>Ha a Távolság-hozzárendelés segítségével költségelemzést szeretnénk elvégezni, költségfelszínre lesz szükségünk. Költségfelszín megadásakor az eredmény a kumulatív költség alapú, nem pedig az egyenes vonalú távolság alapján készült hozzárendelés-raszter lesz. A vízszintes és függőleges tényezők megadásakor figyelembe veszi az irányt is a költség akkumulálása során. Ha felszínrasztert adunk meg bemenetként, a funkció a cellák közötti áthaladáskor bejárt tényleges felszíni távolságot számítja ki a hozzárendelés megállapításakor. Négyféle forráskarakterisztika használható. Ezeket a karakterisztikákat, amelyek tartozhatnak a forráshoz vagy a forrásból elmozduló elemekhez, meghatározott paraméterek vezérlik: 1. Kezdeti akkumuláció: a kezdeti költséget állítja be a mozgás megkezdése előtt. 2. Maximális akkumuláció: azt határozza meg, hogy mennyi költség halmozódhat fel egy forrásnál, mielőtt elérné a korlátját. 3. A költségek szorzótényezője: az utazás módját vagy nagyságát határozza meg a forrásnál. 4. Utazás iránya: azt azonosítja, hogy az elmozduló elem egy forrásból indul és nem forrásnak számító helyek felé mozog vagy fordítva.<div><br/>Alapértelmezés szerint a Távolság-hozzárendelés eredménye egyetlen sáv: a távolság-hozzárendelési raszter. A Forrás sor és oszlop létrehozása a kimenet kiegészítő hullámhossztartományaiként logikai beállítás megjelölése esetén három sávot tartalmazó többsávos rasztert kapunk eredményként. Az első sáv a távolság-hozzárendelési sáv, a második sáv tartalmazza a sorindexet, a harmadik pedig az oszlopindexet. Ezek az indexek azonosítják annak a forráscellának a helyét, amely a legkisebb kumulált költségtávolságnyira van. A forrás sorindex és forrás oszlopindex együttesen intenzitástérképek készítésére használható. Ha a vizsgálati területen található bármelyik helyhez lekérdezi a második és harmadik sávot, tudni fogja az adott helyhez tartozó legolcsóbban elérhető forrás sorát és oszlopát.</div>",
		eucBackDirectionName: "Euklideszi visszirány",
		eucBackDirectionSnip: "Mindegyik cellához kiszámítja az irányt fokokban a szomszédos cella felé, a legrövidebb útvonal mentén, vissza a legközelebbi forrásig, elkerülve az akadályokat.",
		eucBackDirectionDesc: "Az Euklideszi visszirány funkció eredménye egy folytonos lebegőpontos raszter, amelyben a legközelebbi forráshoz való visszajutás iránya található fokokban, elkerülve az akadályokat, ha adtak meg akadályokat.<div><br/>Az Euklideszi visszirány bemenete az a forrás, amely felé az irányt ki kell számítani. Opcionális bementként megadható egy raszter, amelyen a vizsgálati területen található akadályok szerepelnek. A háttérértéknek a forrásraszternél és az akadályraszternél is NoData típusúnak kell lennie, míg a forrásokat és akadályokat érvényes értékeknek kell jelölniük. Érvényes érték a nulla is. Alapértelmezés szerint a számítás a források és akadályok együttes kiterjedése plusz 2 sor és oszlop erejéig történik. Ha az elemzésre a forrásoktól csak meghatározott távolságig van szükség, akkor a Maximális távolság paraméter használható. Az Euklideszi visszirány támogatja a síkbeli és a geodéziai módszert is a számításnál. A síkbeli módszert alkalmazó számítás lapos vetületi síkon történik 2D Descartes-féle koordináta-rendszerben. A geodéziai módszert alkalmazó számítás az ellipszoidon történik, ami azt jelenti, hogy az eredmények nem változnak, függetlenül a bemeneti vagy kimeneti vetülettől.<div><br/>Az Euklideszi visszirány funkció eredményét az Euklideszi távolság funkció eredményével együtt használva megállapítható a legrövidebb útvonal a vizsgálati területen található helyektől a forrásig. A Költségútvonal funkció a célállomások mellett az Euklideszi visszirány eredményét és az Euklideszi távolság eredményét is használja a legrövidebb útvonalak létrehozásához.</div>",
		expandName: "Kibontás",
		expandSnip: "Egy raszter kiválasztott zónáit bontja ki zónánként a megadott számú cellával.",
		expandDesc: "A Kibontás globális funkcióval általánosíthatja vagy egyszerűsítheti a rasztereket egyes zónák nagyobbá tételével. A megvalósuló generalizálás mértéke is szabályozható.<div><br/>A kiválasztott zónák mérete megnő, és más zónákba nyúlik át. A kiválasztott zónaértékek fogalmilag előtérzónáknak tekinthetők, míg a többi érték marad háttérzóna. Az előtérzónák belenyúlhatnak a háttérzónákba.<div><br/>A megvalósuló generalizálás mértéke a Cellák száma paraméterrel szabályozható. Alapértelmezés szerint ez az érték 1, ami azt jelenti, hogy a kiválasztott zónák egy cella méretének megfelelő mértékben bővülnek. A generalizálás mértékének növeléséhez adjon nagyobb értéket a paraméternek. Fogalmilag ez úgy képzelhető el, mintha a megadott számszor futtatnánk az eszközt, és a következő iterációban mindig az előző iteráció eredménye lenne a bemenet.</div>",
		trendAnalysisName: "Trend létrehozása",
		trendAnalysisSnip: "Az egyes pixelek trendjét becsüli meg egy dimenzió mentén egy többdimenziós raszter egy vagy több változója esetén.",
		trendAnalysisDesc: "<div>Ezzel a funkcióval lineáris, harmonikus vagy polinomiális trendvonalhoz illeszthetők az adatok, vagy felhasználhatók trendelemzés végrehajtásához a Mann-Kendall vagy a Seasonal-Kendall teszt használatával.</div><br><div>A funkcióval létrehozott kimeneti trendraszter használható az <strong>Előrejelzés trenddel</strong> funkció bemeneteként.</div><br><div>A Mann-Kendall és a Seasonal-Kendall teszt használható annak megállapítására, hogy található-e monoton trend az adatokban. Ezekhez nem tartoznak paraméterek, ami azt jelenti, hogy nem feltételeznek meghatározott adateloszlást. A Mann-Kendall teszt nem veszi figyelembe a sorozatok korrelációját és a szezonális hatásokat. Ha az adatok szezonálisak, a Seasonal-Kendall teszt megfelelőbb.</div><br><div>Ha az eszközt a Mann-Kendall vagy a Seasonal-Kendall teszt végrehajtására használja, a kimenet egy ötsávos raszter a következők szerint:</div><ul><li>1. sáv = Sen-féle lejtési módszer</li><li>2- sáv = p érték</li><li>3. sáv = Mann-Kendall pontszám (S)</li><li>4. sáv = S Variance</li><li>4. sáv = S variancia</li><li>5. sáv = Z pontszám</li></ul><div>A Mann-Kendall vagy a Seasonal-Kendall teszt kimenete használható annak meghatározására, hogy a többdimenziós idősorban hány pixelnek van statisztikailag szignifikáns trendje. Ezt az információt a lineáris, a harmonikus vagy a polinomiális trendelemzéssel együtt használhatja az idősorban található szignifikáns trendek kiolvasásához. Létrehozhat maszkot, amely tartalmazza a szignifikáns p értékű pixeleket, a maszkot alkalmazhatja a többdimenziós raszterre az eszköz bemeneteként a lineáris, a harmonikus vagy a polinomiális trendelemzés végrehajtásához.</div><br><div>Három trendvonal-beállítás választható, amelyekkel a trendek a változóértékekhez illeszthetők egy dimenzió mentén: lineáris, polinomiális és harmonikus.</div><br><div>A lineáris trendelemzés esetén a kimenet egy háromsávos raszter a következők szerint:</div><ul><li>1. sáv = Lejtés</li><li>2. sáv = Tengelymetszet</li><li>3. sáv = Átlagos négyzetes hiba gyöke (RMSE), vagy a legjobban illeszkedő vonal körüli hiba</li></ul><div>A polinomiális trendelemzés esetén a sávok száma a kimenetben a polinomiális sorrendtől függ. A másodfokú polinomiális illesztés négysávos rasztert eredményez a következők szerint:</div><ul><li>1. sáv = Polinomiális_2</li><li>2. sáv = Polinomiális_1</li><li>3. sáv = Polinomiális_0</li><li>4. sáv = RMSE</li></ul><div>A harmadfokú polinomiális illesztés ötsávos rasztert eredményez a következők szerint:</div><ul><li>1. sáv = Polinomiális_3</li><li>2. sáv = Polinomiális_2</li><li>3. sáv = Polinomiális_1</li><li>4. sáv = Polinomiális_0</li><li>5. sáv = RMSE</li></ul><div>A harmonikus trendelemzés esetén a kimenetben lévő sávok száma a harmonikus gyakoriságtól függ. Ha a gyakoriság beállítása 1, akkor a kimenet egy ötsávos raszter a következők szerint:</div><ul><li>1. sáv = Lejtés</li><li>2. sáv = Tengelymetszet</li><li>3. sáv = Harmonikus_sin1</li><li>4. sáv = Harmonikus_cos1</li><li>5. sáv = RMSE</li></ul><div>Ha a gyakoriság beállítása 2, akkor a kimenet egy hétsávos raszter a következők szerint:</div><ul><li>1. sáv = Lejtés</li><li>2. sáv = Tengelymetszet</li><li>3. sáv = Harmonikus_sin1</li><li>4. sáv = Harmonikus_cos1</li><li>5. sáv = Harmonikus_sin2</li><li>6. sáv = Harmonikus_cos2</li><li>7. sáv = RMSE</li></ul><div>A harmonikus trendelemzés <strong>Periódus hossza</strong> paramétere használható annak jelzésére, hogy mennyi és milyen hosszú periódust szeretne látni az adatokban a nap vagy az év folyamán. Ha például azt várja, hogy az adatok két változási perióduson mennek át egy évben, akkor a periódus hossza 182,5 nap vagy 0,5 év lesz. Ha háromóránként gyűjtött hőmérsékleti adatai vannak, és naponta egy változási periódus van, akkor a periódus hossza egy nap.</div><br><div>A harmonikus trendelemzés <strong>Gyakoriság</strong> paramétere használható az adatokhoz illesztendő harmonikus modell leírására. Ha a gyakoriság beállítása 1, akkor a lineáris és az elsőfokú harmonikus görbe kombinációja lesz használva a modell illesztéséhez. Ha a gyakoriság beállítása 2, akkor a lineáris, az elsőfokú harmonikus görbe és a másodfokú harmonikus görbe kombinációja lesz használva az adatok illesztéséhez. Ha a gyakoriság beállítása 3, akkor egy további harmadfokú harmonikus görbe lesz használva az adatok modellezéséhez és így tovább.</div><br><div>A modell előrejelzési képessége is létrehozható választható kimenetként. Kiszámítható és jelölhető az átlagos négyzetes hiba gyöke (RMSE), az R négyzet és a trend lejtésének p értéke. A kimenet trendraszterrétegének jelöléséhez az <strong>RGB</strong> szimbólumrendszert használhatja, és a statisztikai adatokat piros, kék és zöld sávval adhatja meg.</div><br>",
		spectralUnmixingName: "Lineáris spektrális szétbontás",
		spectralUnmixingSnip: "A részpixeleket osztályozza, és kiszámítja, hogy az egyes pixelekben milyen gyakorisággal fordulnak elő a különböző típusú felszínborítások.",
		spectralUnmixingDesc: "A Lineáris spektrális szétbontás funkció kiszámítja a többféle típusú felszínborítást tartalmazó pixelek részleges borítását. Egy többsávos réteget hoz létre, amelyben mindegyik sáv az egyes felszínborítás-osztályok gyakoriságának felel meg. Használható például egy multispektrális kép felszínborításának osztályozásra, hogy azonosítani tudja a fotoszintetizáló vegetációt, a vegetáció nélküli talajt és a halott vagy nem fotoszintetizáló vegetációt.<div><br/>A kimeneti többsávos raszter rangja a bemeneti spektrális profil rangját követi. Az osztályok száma nem haladhatja meg a bemeneti raszter sávjainak számát. Nem nyerhet ki például információt több mint 8 osztályról egy 8 sávos raszterből.</div>",
		multidimensionalFilterName: "Többdimenziós szűrő",
		interpolateRasterByDimensionFunctionName: "Raszter interpolálása dimenzió szerint",
		interpolateRasterByDimensionFunctionSnip: "Szomszádos szeletzek segítségével megadott dimenzióértékeknél interpolál többdimenziós rasztert.",
		interpolateRasterByDimensionFunctionDesc: "<p>A funkció segítségével pixelértéket becsülhet meg egy többdimenziós raszteren belüli, definiálatlan dimenziószeletre vonatkozóan. Például ha a felszíni és a felszín alatt 100 méteres mélyég óceánhőmérsékleteit tartalmazó adathalmazzal rendelkezik, és az óceánfelszín alatti 50 méteres mélység hőmérsékletére vonatkozóan kíván becslést tenni, akkor az Értékek szerint dimenziódefiníciót használva kaphat becslést a funkció segítségével erre a mélységre vonatkozóan.</p><p>Az Intervallum szerint dimenziódefiníciót használva a Lépés paraméter értékeként az 1-et, a Mértékegység paraméter értékeként pedig a Nap lehetőséget megadva a havi adathalmazt napi adathalmazra is lecsökkentheti.</p><p>A Cél raszter szerint dimenziódefiníciót használva becslést készíthet a Cél raszter értékére vonatkozóan.</p>",
		multidimensionalFilterSnip: "Egy raszteres réteget hoz létre egy többdimenziós raszteres adathalmazból vagy egy többdimenziós raszteres rétegből az adatok meghatározott változók és dimenziók mentén történő felszeletelésével.",
		multidimensionalFilterDesc: "A Többdimenziós szűrő egy többdimenziós raszteres réteget hoz létre szűréssel és változók egy részhalmazának kinyerésével egy többdimenziós raszterből. Például rendelkezik egy többdimenziós adathalmazzal, amely 30 évnyi havi csapadékadatot tartalmaz, de csak a januárok adatait szeretné kinyerni, mert azt szeretné látni, hogyan változott a csapadék abban a hónapban.<div><br/>A dimenziók felszeleteléséhez a Méretdefiníció paramétert használhatja egy intervallumot vagy értéktartományt megadva. Ha például rendelkezik 10 évnyi, havonta, 500 méter mélységig 2 méterenként gyűjtött sótartalomadattal az óceánról, akkor a különböző dimenziódefiníciókat használhatja a következő esetekben. 1. eset: Sótartalomadatok kinyerése január hónapra vonatkozóan az elmúlt 10 éves időszakból. Válassza az Értékek szerint lehetőséget, a Dimenziót állítsa StdTime-ra, az Értékeket pedig januárra. 2. eset: Sótartalomadatok felszeletelése a 0–150 méter mélységtartományban. Válassza a Tartományok szerint lehetőséget, a Dimenziót állítsa StdZ-re, a Minimum értéket állítsa −150-re a Maximum értéket pedig 0-ra. 3. eset: Sótartalomadatok kinyerése minden január első 10 napjára vonatkozóan az elmúlt 10 éves időszakból. Válassza az Iteráció szerint lehetőséget, a Dimenziót állítsa StdTime-ra, adja meg az Első iteráció eleje és az Első iteráció vége beállítást a kívánt időszaknak megfelelően, a Lépést állítsa 1-re, a Mértékegységet pedig évre.</div>",
		multidimensionalRasterName: "Többdimenziós raszter",
		multidimensionalRasterSnip: "Többdimenziós adatokat ad egy térképhez többdimenziós raszteres rétegként.",
		multidimensionalRasterDesc: "A Többdimenziós raszter funkció többdimenziós adatokat ad egy térképhez többdimenziós raszteres rétegként. Ez a funkció akkor hasznos, amikor raszterelemzési munkafolyamatokat végez műveletsor segítségével.<div><br/>A következő többdimenziós raszteres adathalmazokat támogatja: netCDF, GRIB, HDF és az Esri CRF formátuma. Szintén támogatja a többdimenziós mozaik-adathalmazokat.</div>",
		optimalPathAsRasterName: "Optimális útvonal raszterként",
		optimalPathAsRasterSnip: "Kiszámítja a legkisebb költségű útvonalat a kiindulóponttól a célállomásig.",
		optimalPathAsRasterDesc: "Ez a globális funkció olyan kimeneti rasztert hoz létre, amely rögzíti az optimális útvonalat vagy útvonalakat a kiválasztott helyektől a kumulatív költségfelületen belül meghatározott, a költségtávolság szempontjából legközelebbi forráscellához.<div><br/>Az Optimális útvonal raszterként funkció futtatása előtt általában futtatni kell egy vagy több súlyozott költségfunkciót (Távolságakkumuláció vagy Távolság-hozzárendelés) a bemeneti távolságakkumuláció- és visszirányraszter létrehozásához. Ezek az Optimális útvonal funkció kötelező bemeneti raszteres rétegei. A kimeneti optimális útvonalon lévő értékek az egy adott helyen rendelkezésre álló útvonalak számát jelölik. Sok esetben az útvonalak ugyanarra indulnak, amikor elhagyják a forrást, majd szétválnak, és más célállomásra mennek. Ha az érték egy, az például azt jelenti, hogy egy adott helyen csak egy optimális útvonal áll rendelkezésre, míg az öt azt jelenti, hogy azon a helyen öt optimális útvonal van, amely keresztül megy a vizsgálati terület azon celláján.<div><br/>A bemeneti célállomásadatnak raszteres rétegnek kell lennie. A célállomáscellák halmaza tartalmazza a bementi raszter összes érvényes értékkel rendelkező celláját. A NoData értékkel rendelkező cellákat a halmaz nem tartalmazza. A nulla érték érvényes célállomásnak számít. A célállomásraszter az adatkinyerő eszközökkel hozható létre. Ha vektoros célállomás- vagy forráselemekkel rendelkezik, ezeket átalakíthatja raszteressé a Vektoros elemek raszteressé alakítása funkcióval. A raszterizáló funkció Raszter bemeneteként használja a távolságakkumuláció- vagy a visszirányrasztert. Ez biztosítja, hogy a vektoros elem ugyanazzal a cellamérettel, kiterjedéssel és térbeli referenciával legyen raszteressé alakítva, mint az Optimális útvonal raszterként funkció többi bemeneti rasztere. Az Optimális útvonal raszterként funkció használható a legkisebb ellenállású útvonal meghatározására is egy digitális magasságmodellen (DMM). Ebben az esetben használja a DMM-et mint bemeneti távolságakkumuláció-raszter és az Áramlási irány funkció kimenetét visszirányraszterként.</div>",
		trendName: "Előrejelzés trenddel",
		trendSnip: "Egy előre jelzett többdimenziós raszteres réteget számol ki a Trend létrehozása vagy a Trendraszter létrehozása téradat-feldolgozó eszközből származó kimeneti trendraszter segítségével.",
		trendDesc: "Az Előrejelzés trenddel funkció egy előre jelzett többdimenziós raszteres réteget számol ki a Trend létrehozása vagy a Trendraszter létrehozása téradat-feldolgozó eszközből származó kimeneti trendraszter segítségével.",
		rasterCollectionName: "Folyamatraszter-gyűjtemény",
		rasterCollectionSnip: "Egy többdimenziós raszterben lévő összes szeletet vagy egy mozaikraszterben lévő összes elemet dolgozza fel. Ezzel a funkcióval ezenkívül több szelet is összevonható egyetlen szeletté.",
		rasterCollectionDesc: "A Folyamatraszter-gyűjtemény funkció egy többdimenziós raszterben lévő összes szeletet vagy egy mozaikraszterben lévő összes elemet dolgozza fel. Ezzel a funkcióval ezenkívül több szelet is összevonható egyetlen szeletté.<div><br/>Ez a funkció egy többdimenziós raszterben vagy mozaikraszterben lévő összes szeletet dolgozza fel raszterfunkció-sablon segítségével. A funkció a következő beállításokat támogatja: 1. Raszterfunkció-sablon megadása az Elem funkció számára. Például rendelkezik egy, 20 évnyi Landsat távérzékelt felvételeket tartalmazó mozaik-adathalmazzal, és szeretné kiszámítani az NDVI-t az idősorban szereplő összes elemhez. Az Elem funkcióhoz adjon meg egy, az NDVI raszterfunkciót tartalmazó raszterfunkció-sablont. 2. Raszterfunkció-sablon megadása az Összevonás funkció számára. Például rendelkezik egy, 10 évnyi napi hőmérsékletadatot tartalmazó, többdimenziós raszterrel, és ki szeretné számítani a legmagasabb hőmérsékletet mindegyik évhez. Az Összevonás funkcióban adjon meg egy, a Cellastatisztika funkciót tartalmazó raszterfunkció-sablont úgy, hogy műveletnek a Maximumot válassza. Az Összevonási definíció alatt a Dimenziót állítsa StdTime-ra, a Típust Intervallumkulcsszóra, majd az Intervallumkulcsszót Évesre. Ügyeljen arra, hogy ha a bemeneti mozaik-adathalmaz nem többdimenziós, az összevonás funkció nem fogja betartani az összevonási definíciót. Az összevonás funkció az összes elemet vagy mindegyik csoportot eggyé vonja össze, ha meg vannak határozva az összevonás funkció sablonjában. A mozaik-adathalmazban lévő csoportok használatáról bővebben lásd: Mozaikadathalmaz-elemek használata raszterfunkció-sablonokban. 3. Raszterfunkció-sablon megadása a Feldolgozás funkció számára. A sablonban szereplő funkció vagy műveletsor szerepe az új feldolgozott raszter megjelenítése. Adjon meg például a Színtérkép funkciót tartalmazó raszterfunkció-sablont, ha módosítani szeretné a feldolgozott raszteres réteg megjelenítésének módját. Ügyeljen arra, hogy ha a bemenet többdimenziós raszter, a feldolgozás funkció az aktuálisan megjelenített szeletet dolgozza fel. Ha a bemenet egy mozaikréteg vagy egy mozaik-adathalmaz, a feldolgozás funkció a mozaikrasztert dolgozza fel, és az átfedések feloldásához az Első módszert alkalmazza. 3. A három funkció kombinációihoz adjon meg sablonokat. Például idősoros Landsat távérzékelt felvételeket tartalmazó mozaik-adathalmazzal rendelkezik, és szeretné létrehozni a maximális NDVI kompozit képét. Az Elem funkcióhoz adjon meg egy, az NDVI raszterfunkciót tartalmazó raszterfunkció-sablont. Az Összevonás funkcióhoz adjon meg egy, a Cellastatisztika funkciót tartalmazó raszterfunkció-sablont úgy, hogy műveletnek a Maximumot válassza. A Feldolgozás funkcióhoz adjon meg egy, a Színtérkép funkciót tartalmazó raszterfunkció-sablont. Ügyeljen arra, hogy a funkció feldolgozási sorrendje a bemeneti paraméterek sorrendjét követi. Például az Elem funkció lesz először feldolgozva.</div>",
		randomName: "Véletlen",
		randomSnip: "Egy pszeudovéletlen eloszlásból húzott, véletlenszerű pixelértékekkel rendelkező rasztert hoz létre. Többféle eloszlást és véletlenszám-generátort támogat.",
		randomDesc: "A Véletlen funkció raszterfunkció-sablonokban és mozaik-adathalmazokban használható, véletlenszerű pixelértékeket tartalmazó rasztert hoz létre.<div><br/>Habár sok funkció egy vagy több bemeneti raszterrel működik, a Véletlen funkció nem igényel bemeneti rasztert. Ez azt jelenti, hogy inkább raszteres adathalmazként működik, mint funkcióként, ezért különösen ügyelni kell, amikor hozzáadjuk a műveletsorhoz vagy kivesszük a műveletsorból.</div>",
		shrinkName: "Zsugorítás",
		shrinkSnip: "A kiválasztott zónákat zsugorítja meghatározott számú cellával úgy, hogy felcseréli azokat annak a cellának az értékére, amely a leggyakrabban előfordul a szomszédságában.",
		shrinkDesc: "A Zsugorítás globális funkcióval általánosíthatja vagy egyszerűsítheti a rasztereket egyes zónák kisebbé tételével. A megvalósuló generalizálás mértéke is szabályozható.<div><br/>A kiválasztott zónák zsugorodnak, vagyis a méretük csökken azáltal, hogy a környező zónák cellái átnyúlnak ezekbe. A kiválasztott zónaértékek fogalmilag előtérzónáknak tekinthetők, míg a többi érték marad háttérzóna. Az előtérzónákban lévő cellák felcserélhetők a háttérzónákban lévő cellákra. Ezenkívül felcserélhetők az egy zónában található vékony szigetek is, amelyek úgy tekinthetők, mintha közös határvonalaik lennének a zónával.<div><br/>A megvalósuló generalizálás mértéke a Cellák száma paraméterrel szabályozható. Alapértelmezés szerint ez az érték 1, ami azt jelenti, hogy a kiválasztott zónák egy cella méretének megfelelő mértékben zsugorodnak. A generalizálás mértékének növeléséhez adjon nagyobb értéket a paraméternek. Fogalmilag ez úgy képzelhető el, mintha a megadott számszor futtatnánk az eszközt, és a következő iterációban mindig az előző iteráció eredménye lenne a bemenet.</div>",
		trendToRGBName: "Trendből RGB",
		trendToRGBSnip: "Egy trendrasztert alakít át háromsávos (piros, zöld és kék) raszterré.",
		trendToRGBDesc: "A Trendből RGB funkció egy trendrasztert alakít át háromsávos (piros, zöld és kék) raszterré. A trendraszter a Trendraszter létrehozása funkció vagy a CCDC-elemzés raszterfunkció segítségével jön létre.<div><br/>Ez a funkció a Trend létrehozása funkcióból vagy a CCDC-elemzés funkcióból származó modellegyüttható-adatok szemléltetése céljából hasznos. Mindkét funkció trendeket becsül a változó pixelértékekben, de a funkciók eredményei közvetlenül nehezen értelmezhetők.<div><br/>Mint számos raszterfunkciónál, előfordulhat, hogy Dinamikus tartománybeállítást (DRA) kell használnia a funkció eredményeinek jobb megjelenítéséhez.</div>",
		landTrendrName: "LandTrendr-elemzés",
		landTrendrSnip: "Az egyensúly felbomlása és helyreállása tendenciáinak Landsat-alapú észlelését használva értékeli a pixelértékek változását az idővel, és a modelleredményeket tartalmazó változáselemzési rasztert hoz létre.",
		landTrendrDesc: "Ez a raszterfüggvény csak bemenetként használható a Változásészlelés változáselemzéssel raszterfunkcióhoz. Raszteres kimenet létrehozásához kapcsolja össze a LandTrendr-elemzés funkciót a Változásészlelés változáselemzéssel funkcióval egy raszterfüggvénysablonban, majd használja a sablont bemenetként a Raszter létrehozása raszterfüggvényből téradat-feldolgozó eszközben. Az eredmény a pixelértékek megváltozásának időpontjával kapcsolatos információt tartalmazó raszter.<div><br>E raszterfüggvény arra szolgál, hogy kivonja a megfigyelt vektoros elem változásait, azaz az ideális bemeneti többdimenziós távérzékelt felvételek optimális esetben konzisztens megfigyelést rögzítenek az idővel, és nem tartalmaznak légköri vagy szenzori eredetű interferenciát, felhőket vagy felhőárnyékot. A legjobb megoldás a normalizált, QA sávval maszkolható adatok (például Landsat Collection 1 Surface Reflectance-termékek felhőmaszkkal) használata.<div><br>A funkció évente egy kép alapján végez elemzést, az évszeletek száma pedig legalább a <strong>Megfigyelések minimális száma</strong> paraméterben megadott érték kell legyen. Célszerű, ha legalább hat év adatai rendelkezésre állnak.<div><br>Ha havi, heti vagy napi adatai vannak, ajánlott több képet választani mindegyik évből (lehetőség szerint ugyanabból az évszakból), eltávolítani a felhőket és a felhők árnyékát, majd a képeket kombinálva egyetlen, a megfigyelést jól rögzítő képet létrehozni. Ha bemeneti többdimenziós raszterként heti, havi vagy napi adatok állnak rendelkezésre, a funkció egyetlen szeletet azonosít a <strong>Hozzáillesztés dátuma</strong> paraméterben megadotthoz legközelebbi dátum alapján való elemzés céljára.<div><br>A táj valamely jellemzője esetében gyakran időbe telik a nem állandó változás (például erdőtűz vagy rovarfertőzés) utáni helyreállás. Ha szabályozni szeretné a modell által felismert helyreállás ütemét, állítsa be a Helyreállítási küszöbérték paramétert. Önálló szegmens helyreállítási üteme nem lehet gyorsabb a helyreállítási küszöbérték reciprokánál.<div><br>A táj változásából való helyreállás kedvező és kedvezőtlen irányú is lehet. Például ha erdőkár fordul elő a tájban, a vegetációs index értékeinek idősora az indexértékek csökkenését mutatja, a helyreállás pedig a vegetációs index értékeinek fokozatos növekedését, vagy pozitív helyreállási tendenciát mutat. <strong>A helyreállás trendje növekvő</strong> paraméterrel megadhatja a helyreállási tendencia irányát.",
		aggregateMultidimensionalName: "Többdimenziós raszter összevonása",
		aggregateMultidimensionalSnip: "A meglévő többdimenziós raszterváltozó-adatokat egyetlen dimenzió mentén összesíti.",
		aggregateMultidimensionalDesc: "A Többdimenziós raszter összevonása funkció többdimenziós raszterréteget hoz létre a meglévő többdimenziós raszterváltozó-adatok valamely dimenzió mentén való kombinálásával.<div><br>A(z) <strong>Dimenziódefiníció</strong> paraméterrel először szűrje az összevonni kívánt bemeneti adatokat. Például ha 30 évre visszamenően vannak havi adatai, de csak az első 15 évre vonatkozóan szeretne összesített réteget létrehozni, a(z) <strong>Dimenziódefiníció</strong> paraméterrel megadhatja azokat az éveket, amelyeket elemezni kíván.<div><br><ul><li>Vonja ki a sótartalomra vonatkozó adatokat január hónapra vonatkozóan egy 10 éves időszak során. Válassza az <strong> Értékek szerint</strong> lehetőséget, állítsa a<strong>Dimenzió</strong> paramétert <strong> StdTime </strong>értékre, az <strong> Értékek </strong> paramétert pedig <strong> Január</strong> értékre.</li><li>Szeletelje a sótartalomra vonatkozó adatokat 0-tól 150 méterig terjedő mélységtartományra. Válassza a <strong> Tartományok szerint </strong> lehetőséget, állítsa a <strong> Dimenzió </strong> paramétert <strong> StdZ </strong> értékre, majd állítsa a <strong> Minimum érték </strong> értékét <strong> -150 </strong>, a <strong> Maximum érték </strong> értékét pedig <strong>0</strong> értékre. </li><li>Vonja ki a sótartalomadatokat egy 10 éves időszak minden januárjának első 10 napjára vonatkozóan. Válassza az <strong> Iteráció szerint </strong> lehetőséget, állítsa a <strong> Dimenzió </strong> paramétert <strong> StdTime </strong> értékre, állítsa az <strong> Első iteráció kezdete </strong> és az <strong> Első iteráció vége </strong> értékét az iterációs időszak megfelelő kezdetére és végére, állítsa a <strong> Lépés </strong> paramétert <strong>1</strong> értékre, a <strong> Mértékegység </strong> paramétert pedig <strong> Év </strong>értékre.</li></ul><div><br>Használja az <strong> Összevonási definíció </strong> paraméteret a a felmérni kívánt dimenzió és az összesítési időszak kulcsszó, érték vagy értéktartomány segítségével történő kiválasztására. Például ha 30 évnyi, havonta és 100 méter mélységig 5 méterenként, naponta gyűjtött tengerfelszíni hőmérsékleti adattal rendelkezik, akkor a különböző intervallumopciókat használhatja a következő forgatókönyvek esetén:<div><br><ul><li>Összesítse a napi hőmérsékleti adatokat havi adatokká úgy, hogy az eredmény egy többdimenziós raszter legyen 12 időszelettel; mindegyik szelet egy-egy hónap összesítése legyen a teljes időintervallumra vonatkozóan. Válassza az <strong> Intervallumkulcsszó </strong> lehetőséget, és állítsa a kulcsszót <strong> Ismétlődő havi </strong> értékre.</li><li>Összesítse a napi hőmérsékleti adatokat havi adatokká úgy, hogy az eredmény egy többdimenziós raszter legyen 360 szelettel; vagy évente 12 szelettel (30 év × 12 hónap = 360 szelet) . Válassza az <strong> Intervallumkulcsszó </strong> lehetőséget, és állítsa a kulcsszót <strong> Havi </strong>értékre.</li><li>Összesítse a havi hőmérsékleti adatokat 4 hónapos intervallumokba. Válassza az <strong> Intervallumérték</strong>, lehetőséget, állítsa az <strong> Értékintervallum </strong> értékét 4-re, a <strong> Mértékegység </strong> paramétert pedig <strong> Hónap </strong>értékre.</li><li>Összesítse a hőmérsékleti adatokat 0-tól 25 méterig, majd 25-től 50 méterig, ezt követően pedig 50 métertől 100 méterig. Válassza az <strong> Intervallumtartományok </strong> paramétert, és adja meg a legkisebb és a legnagyobb mélységet, például <strong>0 25; 25 50; 50 100</strong>.</li></ul>",
		mergeRastersName: "Raszterek egyesítése",
		mergeRastersSnip: "Több raszteradathalmazt egyesít térben vagy változókon és dimenziókon keresztül.",
		mergeRastersDesc: "Ez a funkció raszterek listájából hoz létre egyesített rasztert. Például egy ha 30 év havi csapadékadatait tartalmazó mozaik-adathalmazzal, és egy másik, 10 év havi hőmérsékleti adatait tartalmazó adathalmazzal rendelkezik, akkor a mindkét változót magában foglaló többdimenziós taszterré kombinálhatja őket. <div><br>Ha a bemeneti többdimenziós raszterek különböző változókat tartalmaznak, akkor a kimeneti többdimenziós raszter valamennyi változót magában foglalja majd. <div><br>Ha a bemeneti többdimenziós raszterek különböző dimenziókat vagy dimenzióértékeket tartalmaznak, akkor a kimeneti többdimenziós raszter valamennyi dimenziót és dimenzióértéket magában foglalja majd. <div><br>Ha a bemeneti többdimenziós raszterek ugyanazokat a dimenziókat és változókat tartalmazzák, de a térbeli kiterjedések különbözők, a kimeneti többdimenziós raszter az egyesített térbeli kiterjedésekre kiterjedően foglalja majd magában a változókat és a dimenziókat.<div><br>Ez a funkció akkor is használható, amikor több olyan rasztere van, amelyeket egyetlen elemként kíván kezelni, például ugyanazt a statisztikát számítaná ki valamennyire vonatkozóan, vagy amikor színkiegyenlítést alkalmazna, hogy ne kelljen külön-külön színkiegyenlítést végeznie mindegyik képnél. Hasznos, ha a fájlméretkorlátok miatt különálló csempeként tárolt távérzékelt adatokkal kell dolgozni; ilyen módon a csempéket a rendszer ugyanazon kép részeként kezeli majd a rendszer.",
		boundaryCleanName: "Határ tisztítása",
		boundaryCleanSnip: "Simítja a zónák közötti határt.",
		boundaryCleanDesc: "<p>A funkció általánossá teszi, vagyis egyszerűsíti a rasztereket a zónák közötti határok simításával. A funkció lehetőséget biztosít annak szabályozásához, hogyan befolyásolják a bemenet zónáinak cellái a simítást, valamint az alkalmazandó simítás mennyiségét. Mindegyik bemeneti cella kiértékelése a nyolc közvetlen szomszédjának használatával történik.</p><p>A simítási folyamat először a szomszédos cellákat rendezi meghatározott prioritás szerint. A prioritás határozza meg, hogy a szomszédos cellák közül melyik zóna cserélheti le a feldolgozott cella értékét a kimenetben.</p><p>A prioritás alapja lehet a zónák értéke vagy a zónák mérete. A <strong>Rendezés típusa</strong> paraméter határozza meg a használandó rendezési típust. </p><p>Az alapértelmezett <strong>Nincs rendezés</strong> beállítás a zónák értéke alapján méri fel a prioritást. A nagyobb értékű zónák cellái magasabb prioritást kapnak a kisebb értékű zónákba való kiterjesztésre.</p><p>A zónák mérete, vagyis teljes területe használható a prioritás rendezéséhez. A <strong>Csökkenő</strong> beállítással a zónák csökkenő sorrendben rendezhetők. A nagyobb teljes területű zónák prioritást kapnak a kisebb területű zónákba való kiterjesztésre. A <strong>Növekvő</strong> beállítással ennek ellenkezője történik: a kisebb teljes területű zónák kapják a prioritást a nagyobb területű zónákba való kiterjesztésre.</p><p>A simítás mértékét a <strong>Kiterjesztés és zsugorítás futtatása kétszer</strong> paraméter szabályozza, amely meghatározza, hogy hányszor lesz végrehajtva a kiterjesztés és a zsugorítás.</p><p>Ha a beállítás nincs bejelölve, a kiterjesztési és a zsugorítási folyamat egyszer lesz végrehajtva. Ha a beállítás be van jelölve, a kiterjesztési és a zsugorítási folyamat kétszer lesz végrehajtva, ami a zónahatárok további simítását eredményezi.</p><p>Ha a nyolc szomszédos cella értéke megegyezik a feldolgozott cella értékével, akkor a kimeneti cella meg fogja tartani a bemeneti cella értékét.</p>",
		predictUsingRegressionName: "Regressziós előrejelzés",
		predictUsingRegressionSnip: "Előrejelzett raszter kiszámítása raszteradatok és egy regressziós modell alapján. A regressziós modell a <strong>Train Random Trees Regression Model</strong> raszteres téradat-feldolgozó eszköz kimenete.",
		predictUsingRegressionDesc: "<p>A regressziós modellt egy Esri regressziós definíció (.ecd) fájlban kell definiálni. A <strong>Train Random Trees Regression Model</strong> raszter téradat-feldolgozó eszköz által generált, egy adott adatkészletre vagy adatkészletek halmazára és a regressziós modellre vonatkozó összes információt tartalmazza.</p><p>A bemenet lehet egy sáv, egy többsávos vagy egy többdimenziós raszter, vagy ezek listája. A bemeneti raszterek típusának meg kell egyeznie a regressziós modell által képzett raszter típusával.</p><ul><li>Ha a bemenet egy többsávos raszter, minden egyes sávot prediktív változóként kell kezelni. A sávoknak ugyanabban a sorrendben kell lenniük, mint a regressziós modellképző eszköz többsávos bemenetének.</li><li>Ha a bemenet egy többdimenziós raszter, akkor minden változót prediktorváltozóként kell kezelni, és a változónak egysávosnak és idődimenzióval kell rendelkeznie. A változók sorrendjének és nevének meg kell egyeznie a regressziós modell betanításakor megadottakkal. A kimenet egy többdimenziós raszter.</li><li>A bemenet lehet elemek listája. A tételek számának és sorrendjének meg kell egyeznie a regressziós modell betanításakor megadott adatokkal.</li></ul>",
		dimensionalMovingStatisticsName: "Dimenziós mozgó statisztika",
		dimensionalMovingStatisticsSnip: "Statisztikákat számol egy mozgó ablakon keresztül multidimenziós adatokon egy megadott dimenzió mentén.",
		dimensionalMovingStatisticsDesc: "<p>A Dimenziós mozgó statisztika funkció egy meghatározott ablakon belül számít ki különféle statisztikákat egy dimenzió mentén elhelyezkedő valamennyi dimenzióértékre vonatkozóan. Ez a funkció a többdimenziós raszterréteget veszi kiindulásul, és a kiindulási réteggel azonos dimenzióméretű töbdimenziós raszteres réteget hoz létre eredményül.</p><p>Megadhatja azt a dimenziót, amelyre vonatkozóan a funkció figyelembe veszi a dimenzióértékeket. Alapértelmezés szerint az első nem térbeli dimenzió mentén végez számítást. A Hátra ablak és az Előre ablak paramétert megadva ablakméretet határozhat meg.</p><p>Ha a Statisztika típusának beállítása Percentilis, akkor a Percentilis érték és a Percentilis interpolációtípusa paraméter is hozzáférhetővé válik. Ezekkel a paraméterekkel megadhatja (rendre) a számítási percentilist és kiválaszthatja a használni kívánt interpolációtípust. Ha a Statisztika típusa Körív átlag, hozzáférhetővé válik a Körkörös csomagolás értéke paraméter. A körkörös csomagolás értéke egy lineáris érték adott körkörös átlag tartományára való átalakítására szolgál.</p>",
		terrainFlattenFunctionName: "Terep simítása",
		terrainFlattenFunctionSnip: "Korrigálja a szintetikus apertúrájú radar (SAR) bemeneti adatait a domborzat okozta radiometrikus torzulások miatt.",
		terrainFlattenFunctionDesc: "<p>A Terep simítása raszter funkció korrigálja a bemeneti szintetikus apertúrájú radar (SAR) adatokat a domborzat okozta radiometrikus torzulások miatt.</p><p>A bemeneti radaradatokat először béta nullára kell kalibrálni. A Radiometrikus kalibráció alkalmazása eszközzel a radaradatokat béta nullára kalibrálhatja.</p><p>Ha a bemeneti DEM nem terjed ki a teljes SAR-adatkészletre, az eszköz a gamma nullára, a sigma nullára, a szórási területre és a geometriai torzításra vonatkozóan NoData értékeket ad ki a DEM kiterjedésén kívüli pixelekre. A geometriai torzítási maszk kimeneténél az eszköz meghatározatlan értékeket ad ki a DEM kiterjedésén kívüli pixelekre.</p><p>A bemeneti DEM-nek a WGS 1984 (EPSG:4326) földrajzi koordináta-rendszerben kell lennie.</p>",
		createColorCompositeFunctionName: "RGB-kompozit létrehozása",
		createColorCompositeFunctionSnip: "Háromsávos rasztert hoz létre egy többsávos raszter adathalmazból, amelyben minden egyes sáv a sávalgebrán alapuló algebrai számítást használhat.",
		createColorCompositeFunctionDesc: "<p>Az RGB-kompozit raszter létrehozása funkció egy háromsávos rasztert hoz létre egy többsávos raszteradatkészletből, amelyben minden sáv használhat sávalgebrán alapuló algebrai számítást.</p><p>A sávaritmetikai algoritmus meghatározásakor minden kifejezéshez egysoros algebrai képletet adhat meg a többsávos kimenet létrehozásához. A támogatott operátorok unárisak, plusz (+), mínusz (-), szorzat (*) és osztás (/).</p><p>Ha egy kifejezésben sávazonosítót használ, a sávot a sávszám elé B vagy b előtaggal kell azonosítani.</p><p>A szintetikus apertúrájú radar (SAR) esetében lineáris egységekben használt gyakori sávkombináció a VV a vörös, a VH a zöld és a VV/VH a kék. Ha a bemeneti adatok decibelben vannak megadva, a sávkombinációnak VV-nek kell lennie a piros, VH-nak a zöld és VV-VH-nak a kék sávhoz.</p>",
		surfaceParametersName: "Felszínparaméterek",
		surfaceParametersSnip: "Felszínraszter paramétereit, például kitettséget, lejtőt és többféle görbületet határoz meg geodéziai módszerek használatával.",
		surfaceParametersDesc: "<p>A Felszínparaméterek függvény egy felszínraszter paramétereit, például kitettséget, lejtőt és többféle görbületet határoz meg geodéziai módszerek használatával.</p><p>Ez a függvény a következő alkalmazásokhoz használható:</p><ul><li>Kitettség és lejtő számítása geodéziai módszerek használatával.</li><li>Különféle görbületek számítása bemeneti felszínraszterből, például <strong>Tangenciális (normál kontúrú) görbület,</strong> amely az áramlás topográfiai konvergenciáját és divergenciáját jellemzi a felszín mentén.</li></ul>",
		leastCostCorridorName: "Legolcsóbb vonalmenti buffer",
		leastCostCorridorSnip: "Két kumulatív költségtávolsági raszter összegét számítja ki a százalékos vagy kumulatív költségen alapuló küszöbérték alkalmazásának lehetőségével.",
		leastCostCorridorDesc: "<p>A bemeneti rasztereknek a<strong>Távolságakkumuláció</strong>vagy a<strong>Távolság-hozzárendelés</strong>függvényből kimenő távolsággyűjtési és visszirányú rasztereknek kell lenniük. Ezeknek a költségtávolságon kell alapulniuk, és az egyes források rétegeinek létrehozásakor ugyanazokat a paraméterbeállításokat kell használni. Az irányultságtól függő paraméterek (vízszintes tényező, függőleges tényező és haladási irány) nem használhatók e raszterek létrehozásához.</p><p>A kimeneti vonalmenti raszter értékei az adott hely elérésének kumulatív költségeinek összege, ugyanazokkal az egységekkel, mint a bemeneti kumulatív költségtávolság rasztereké.</p><p>Ha a megadott <strong>Küszöbérték</strong> nagyobb, mint a két távolságakkumulációs raszter összegzésekor a maximális kumulatívköltség, akkor a kimeneti vonalmenti raszter ugyanazt a területet fogja lefedni, mint a bemeneti kumulatív raszterek.</p><p>Ha a megadott küszöbérték kisebb, mint a vonalmenti raszter minimális értéke, a rendszer figyelmeztető üzenetet küld vissza, és a kimeneti raszter üres lesz.</p><p>A kimeneti vonalmenti raszter tartalmazhat olyan cellákat, amelyek kumulatív költségei valamivel nagyobbak, mint a küszöbérték. Ez a visszirányú raszterekből származik, amelyek a küszöbértéknél valamivel magasabb költségekkel rendelkező cellákat használnak a folyosóhoz nem kapcsolódó cellák összekapcsolására.</p>",
		geometricMedianName: "Geometriai középérték",
		geometricMedianSnip: "A Geometriai középérték függvény a többsávos képsorozat pixeleinek geometriai középértékét számítja ki.",
		geometricMedianDesc: "<p>Ez a függvény csökkenti a zajt és a kiugró értékeket az idősoros képeken azáltal, hogy az egész képhalmaz minden egyes képponttömbjre kiszámítja a geometriai középértékű képpontot. Az algoritmus megőrzi a sávok közötti spektrális kapcsolatokat a képpontok spektrumában, így a kimenet felhasználható az elemzésekben, például a növényzeti indexekben.</p><p>A függvény alkalmazása előtt a felhőket és árnyékokat az adatkészlet QA sávjának használatával kell maszkolni.</p><p>Ha a bemeneti kép lebegőpontos (például a felületi visszaverődés 0 és 1 közötti értékekkel), a 0,001-es epszilon értéknek minőségi eredményeket kell adnia.</p>"
	},
	rfxArgs: {
		rasterName: "Raszter",
		colorSchemeTypeName: "Színséma típusa",
		colormapName: "Színtérkép",
		colormapNameName: "Színtérkép neve",
		colorRampName: "Színskála",
		contrastOffsetName: "Kontraszteltolás",
		brightnessOffsetName: "Fényerő eltolása",
		methodName: "Módszer",
		bandNamesName: "Sávnevek",
		bandWavelengthsName: "Sávhullámhosszok",
		bandIdsName: "Sávazonosítók",
		missingBandActionName: "Hiányzó sávművelet",
		conversionParametersName: "Konverziós paraméterek",
		hillshadeTypeName: "Domborzatárnyékolás típusa",
		azimuthName: "Azimut",
		altitudeName: "Magasság",
		slopeTypeName: "Skálázás",
		zFactorName: "Z tényező",
		PSPowerName: "Pixelméret-erősség",
		PSZFactorName: "Pixelméret-tényező",
		removeEdgeEffectName: "Az élek alapértelmezett pixelinterpolációjának letiltása",
		fromUnitName: "Az egységből",
		toUnitName: "Az egységhez",
		rasterTypeName: "Típus",
		minName: "Kimenet minimuma",
		maxName: "Kimenet maximuma",
		minPercentName: "Hisztogramvágás minimuma",
		maxPercentName: "Hisztogramvágás maximuma",
		numberOfStandardDeviationName: "Szórás többszöröse",
		sigmoidStrengthLevelName: "Szigmoid szint",
		estimateStatsHistogramName: "Közelítő statisztika",
		DRAName: "Dinamikus tartománybeállítás",
		statisticsName: "Statisztika",
		histogramsName: "Hisztogramok",
		statisticsHistogramName: "Statisztika és hisztogram definiálása",
		computeGammaName: "Automatikus gamma",
		useGammaName: "Gamma használata",
		gammaName: "Gamma",
		inputNamesName: "Nevek",
		expressionName: "Kifejezés",
		cellsizeTypeName: "Cellaméret típusa",
		extentTypeName: "Kiterjedés típusa",
		classifierDefinitionFileName: "Bemenő definíciós fájl",
		raster1Name: "Raszter1",
		raster2Name: "Raszter2",
		raster3Name: "Raszter3",
		trueRasterName: "Igaz raszter",
		falseRasterName: "Hamis raszter",
		noDataInterpretationName: "NincsAdat értelmezése",
		noDataValuesName: "NincsAdat értékek",
		includedRangesName: "Befoglalt tartományok",
		curvatureTypeName: "Görbülettípus",
		rastersName: "Raszterek",
		attributeTableName: "Táblázat",
		attributeTableTypeName: "Táblatípus",
		rowsName: "Sorok száma",
		columnsName: "Oszlopok száma",
		kernelName: "Kernel",
		mirrorEdgesName: "Élek tükrözése",
		influencesName: "Hatások",
		fieldsName: "Mezők",
		remapsName: "Tábla újbóli leképezése",
		evalFromName: "Értékelési skála kezdőpontja",
		evalToName: "Értékelési skála végpontja",
		weightsName: "Súlyok",
		DEMName: "DMM",
		shortRangeIDWRadiusName: "Rövid hatótávolságú IDW sugár",
		maxVoidWidthName: "Max. üres szélesség",
		sigmaGaussianName: "Adaptív simítás",
		contourTypeName: "Kontúrtípus",
		zBaseName: "Z alap",
		numberOfContoursName: "Kontúrok száma",
		contourIntervalName: "Kontúr-intervallum",
		nthContourLineInBoldName: "N-edik kontúrvonal vastagítva",
		featureClassName: "Bemeneti vektoros elemek",
		classIndexFieldName: "Mező",
		resolveOverlapMethodName: "Átfedés feloldásának módja",
		resamplingTypeName: "Újramintavételezés típusa",
		inputCellsizeName: "Bemenő cellaméret",
		outputCellsizeName: "Kimeneti cellaméret",
		pointFeatureClassName: "Mágnespontok",
		maxGrowthRadiusFieldName: "Max. növekedési sugár mezője",
		similarityThresholdFieldName: "Hasonlósági küszöb mezője",
		fillValueFieldName: "Kitöltési érték mezője",
		spectralDetailName: "Spektrális részletek [1...20]",
		spatialDetailName: "Térbeli részletek [1...20]",
		minNumPixelsPerSegmentName: "Minimális szegmensméret pixelben",
		boundariesOnlyName: "Csak szegmenshatárok",
		statisticsTypeName: "Statisztika típusa",
		fillNoDataOnlyName: "Csak a NincsAdat pixelek kitöltése",
		inputDataTypeName: "Bemenő adattípus",
		angleReferenceSystemName: "Szöghivatkozási rendszer",
		outputDataTypeName: "Kimeneti adattípus",
		inputSamplePointFeatureClassName: "Bemenő minták",
		valueFieldName: "Értékmező",
		rasterInfoName: "Raszterinformáció",
		interpolationMethodName: "Interpolációs módszer",
		radiusName: "Sugár",
		radianceGainValuesName: "Sugárzási bevétel",
		radianceBiasValuesName: "Sugárzás torzítása",
		reflectedGainValuesName: "Visszaverődési együttható erősítési tényezője",
		reflectedBiasValuesName: "Visszaverődési együttható torzítása",
		sunElevationName: "Napmagasság (fok)",
		albedoName: "Albedó",
		scaleFactorName: "Skálázási tényező",
		offsetName: "Eltolás",
		thresholdTypeName: "Küszöbérték típusa",
		thresholdsName: "Küszöbértékek",
		undefinedClassName: "Definiálatlan osztály",
		minValueName: "Min.",
		maxValueName: "Max.",
		operationName: "Művelet",
		clippingTypeName: "Kivágástípus",
		clippingGeometryName: "Kivágási geometria / raszter",
		extentName: "Kimeneti kiterjedés",
		useInputFeatureGeometryName: "A bemeneti vektoros elem használata a kivágási geometriához",
		remapDefinitionTypeName: "Definíciótípus újraleképezése",
		inputRangeName: "Bemeneti tartományok",
		outputValuesName: "Kimeneti értékek",
		noDataRangeName: "NincsAdat tartományok",
		inputFieldName: "Bemeneti mező",
		outputFieldName: "Kimeneti mező",
		inputMaxFieldName: "Bemeneti maximális mező (opcionális)",
		remapTableTypeName: "Táblatípus újraleképezése",
		allowUnmatchedName: "Nem egyeztetett pixelértékek engedélyezése",
		changeMissingValuesToNoDataName: "Hiányzó adatok átalakítása NoData értékekké",
		visibleBandIDName: "Látható sáv azonosítója",
		infraredBandIDName: "Infravörös sáv azonosítója",
		scientificOutputName: "Tudományos kimenet",
		bandIndexesName: "Sávindexek",
		constantName: "Állandó",
		weightName: "Súly",
		minimumName: "Minimum",
		maximumName: "Maximum",
		sourceDataName: "Forrásraszter",
		sourceFieldName: "Forrásmező",
		costRasterName: "Költségraszter",
		maxDistanceName: "Maximális távolság",
		valueRasterName: "Értékraszter",
		costMultiplierName: "A költségekre alkalmazandó szorzótényező",
		startCostName: "Költség indítása",
		accumCostResistanceRateName: "Kumulatív költségrezisztencia-ráta",
		capacityName: "Kapacitás",
		travelDirectionName: "Utazás iránya",
		cellSizeName: "Cellaméret",
		populationFieldName: "Népesség mező",
		areaUnitsName: "Terület-mértékegységek",
		outputValueTypeName: "Kimeneti cellaértékek",
		barriersName: "Bemeneti akadályok",
		destinationDataName: "Célállomás raszter",
		destinationFieldName: "Célállomás mező",
		pathTypeName: "Útvonaltípus",
		observerFeaturesName: "Megfigyelői vektoros elemek",
		analysisMethodName: "Elemzési módszer",
		analysisTypeName: "Elemzés típusa",
		verticalErrorName: "Függőleges hiba",
		refractivityCoefficientName: "Fénytörési együttható",
		surfaceOffsetName: "Felszín eltolása",
		observerElevationName: "Megfigyelői magasság",
		observerOffsetName: "Megfigyelői eltolás",
		innerRadiusName: "Belső sugár",
		innerRadiusIs3DDistanceName: "Belső sugár a 3D távolság",
		outerRadiusName: "Külső sugár",
		outerRadiusIs3DDistanceName: "Külső sugár a 3D távolság",
		horizontalStartAngleName: "Vízszintes kezdőszög",
		horizontalEndAngleName: "Vízszintes végszög",
		verticalUpperAngleName: "Függőleges felső szögérték",
		verticalLowerAngleName: "Függőleges alsó szögérték",
		zoneDataName: "Zóna raszter",
		zoneFieldName: "Zóna mező",
		ignoreNoDataName: "NoData értékek figyelmen kívül hagyása a számításoknál",
		temperatureRasterName: "Hőmérséklet raszter",
		inTemperatureUnitsName: "Hőmérséklet mértékegységei",
		outHeatIndexTemperatureUnitsName: "Hőindex mértékegységei",
		relativeHumidityRasterName: "Relatív páratartalom raszter",
		outWindChillTemperatureUnitsName: "Hőérzet mértékegységei",
		windSpeedRasterName: "Szélsebesség raszter",
		inWindSpeedUnitsName: "Szélsebesség mértékegységei",
		valueName: "Érték",
		propertyName: "Tulajdonság neve",
		jsonName: "Metaadat JSON",
		zoneTableName: "Zóna attribútumtábla",
		attributeFieldNames: "Attribútum-mezőnevek",
		backgroundName: "Háttérérték",
		whereClauseName: "Where feltétel",
		minimumValueFieldName: "Minimumérték mezőneve",
		maximumValueFieldName: "Maximumérték mezőneve",
		outValueFieldName: "Kimeneti érték mezőneve",
		defaultValueName: "Alapértelmezett kimeneti érték",
		conversionMatrixName: "Átváltási mátrix",
		IsPseudoColorOutputName: "Álszínes kimenet",
		unmappedAsRandomColorName: "Színek véletlenszerű hozzárendelése a nem leképezett pixelekhez",
		distanceMethodName: "Távolság módszer",
		flowDirRasterName: "Áramlási irány raszter",
		pourPointName: "Kifolyási pont(ok) rasztere",
		pourPointFieldName: "Kifolyási pont mező",
		constantZName: "Állandó Z",
		zOffsetName: "Z eltolás",
		geoIdName: "Geoid",
		calibrationTypeName: "Kalibráció típusa",
		filterTypeName: "Szűrőtípus",
		filterSizeName: "Szűrőméret",
		noiseModelName: "Zajmodell",
		noiseVarianceName: "Zaj varianciája",
		additiveNoiseMeanName: "Additív zaj átlaga",
		multiplicativeNoiseMeanName: "Multiplikatív zaj átlaga",
		numberofLooksName: "Nézetek száma",
		dampingFactorName: "Csillapítási tényező",
		maskRasterName: "Maszk raszter",
		nibbleValuesName: "Használja a NoData értéket, ha az a legközelebbi szomszéd",
		nibbleNoDataName: "NoData cellák elvétele",
		zLimitName: "Z határérték",
		flowDirectionTypeName: "Áramlási irány típusa",
		weightRasterName: "Súlyraszter",
		forceEdgeName: "Az élen lévő cellák kifelé áramlásának kényszerítése",
		streamRasterName: "Áramlási raszter",
		surfaceRasterName: "Felszínraszter",
		conversionType: "Az átalakítás típusa",
		distanceRaster1: "Távolságraszter 1",
		distanceRaster2: "Távolságraszter 2",
		costDistanceRaster: "Költségtávolság-raszter",
		costBacklinkRaster: "Költség-visszahivatkozási raszter",
		overridesName: "Felülbírálások",
		fieldName: "Mező",
		signatureFileOrUrl: "Aláírásfájl vagy URL",
		redName: "Vörös",
		greenName: "Zöld",
		blueName: "Kék",
		infraredName: "Infravörös",
		panchromaticName: "Pánkromatikus",
		multispectralName: "Multispektrális",
		pansharpeningType: "Pánkromatikus élesítés típusa",
		sensorName: "Szenzor",
		spatialReferenceName: "Vonatkoztatási rendszer",
		xCellsizeName: "X cellaméret",
		yCellsizeName: "Y cellaméret",
		xOriginName: "X regisztrációs pont",
		yOriginName: "Y regisztrációs pont",
		percentileName: "Percentilis érték",
		neighborhoodType: "Környék típusa",
		widthName: "Szélesség",
		heightName: "Magasság",
		startAngleName: "Kiindulási szög",
		endAngleName: "Beérkezési szög",
		neighborhoodValues: "Szomszédok értékei",
		horizontalRaster: "Vízszintes raszter",
		horizontalFactor: "Vízszintes tényező",
		verticalRaster: "Függőleges raszter",
		verticalFactor: "Függőleges tényező",
		streamRaster: "Áramlási raszter",
		flowDirRaster: "Áramlási irány raszter",
		numberNeighborCells: "Szomszédos cellák száma",
		zoneConnectivity: "Zóna-összekapcsolhatóság",
		addLinkBehavior: "Hivatkozás hozzáadása",
		excludedValue: "Kizárt érték",
		constantFillCheck: "Kitöltés raszter létrehozása állandóból",
		fillRaster: "Kitöltés raszter",
		constantFillValue: "Állandó érték",
		inputBitPositions: "Bemeneti bit",
		outputBitPositions: "Kimeneti bit",
		distanceTypeName: "Távolság típusa",
		barrierDataName: "Raszteres akadályok",
		pourPointDataName: "Kifolyási pont rasztere",
		accumulationRasterName: "Áramlási akkumuláció rasztere",
		snapDistanceName: "Távolság illesztése",
		orderMethodName: "Rendezési módszer",
		directionMeasurementName: "Mérés iránya",
		processAsMultiband: "Feldolgozás többsávosként",
		processMultidimensional: "Feldolgozás többdimenziósként",
		forceFlowDirectionConvention: "Áramlási irány konvenciójának kényszerítése a visszahivatkozási raszterra",
		initialAccumulation: "Kezdeti akkumuláció",
		maximumAccumulation: "Maximális akkumuláció",
		sourceLocationBands: "Forrás sor és oszlop létrehozása a kimenet kiegészítő hullámhossztartományaiként",
		backDirectionBand: "Visszirány létrehozása a kimenet kiegészítő hullámhossztartományaként",
		numberOfCells: "Cellák száma",
		zoneValues: "Zónaértékek",
		shrinkMethod: "Zsugorítási metódus",
		expandMethod: "Kibontási metódus",
		inputSpectralProfileType: "Spektrális profil típusa",
		spectralProfileFileName: "Spektrális profil",
		trainingFeatureFileName: "Képzési funkció",
		nonNegative: "Nem negatív",
		sumToOne: "Egy összegű",
		randomDistribution: "Eloszlás",
		meanName: "Átlag",
		probabilityName: "Valószínűség",
		alphaName: "Alfa",
		betaName: "Béta",
		rName: "r",
		nName: "É",
		seed: "Mágnes",
		randomNumberGenerator: "Véletlenszám-generátor",
		cellFactor: "Cellatényező",
		aggregationType: "Összevonási módszer",
		extentHandling: "Kiterjedés kibontása (szükség esetén)",
		trendAnalysisDimensionName: "Méret neve",
		trendAnalysisType: "Trendtípus",
		harmonicFrequency: "Harmonikus frekvencia",
		polynomialOrder: "Polinom sorrend",
		cycleLengthName: "Ciklushossz",
		trendAnalysisRMSE: "RMSE",
		trendAnalysisR2: "R-négyzet",
		trendAnalysisSlopePValue: "Lejtésegyüttható P értéke",
		trendAnalysisSeasonalPeriod: "Szezonális időszak",
		cycleUnitName: "Ciklusegység",
		predictDimensionValues: "Értékek",
		dimensionDefinitionType: "Méretdefiníció",
		predictDimensionStart: "Indítás",
		predictDimensionEnd: "Vége",
		predictDimensionInterval: "Értékintervallum",
		dimensionUnit: "Mértékegység",
		interpolationCellsizeName: "Interpolációs cellaméret",
		variableName: "Változók",
		dimensionlessName: "Dimenzió nélküli",
		mdimDefinition: "Méretdefiníció",
		dimensionName: "Dimenzió",
		iterationStart: "Első iteráció eleje",
		iterationEnd: "Első iteráció vége",
		intervalStart: "Intervallum kezdete",
		intervalEnd: "Intervallum vége",
		stepName: "Lépés",
		rangesName: "Tartományok",
		minValue: "Minimum érték",
		maxValue: "Maximum érték",
		changeAnalysisRasterName: "Elemzési raszter megváltoztatása",
		changeTypeName: "Változás típusa",
		segmentDate: "Szakasz dátuma",
		changeDirectionName: "Irány módosítása",
		maxNumChangesName: "Változások maximális száma",
		filterByYear: "Szűrés év szerint",
		minimumYear: "Minimum érték",
		maximumYear: "Maximum érték",
		filterByDuration: "Szűrés időtartam szerint",
		minimumDuration: "Minimum időtartam",
		maximumDuration: "Maximum időtartam",
		filterByMagnitude: "Szűrés nagyság szerint",
		minimumMagnitude: "Minimum nagyság",
		maximumMagnitude: "Maximum nagyság",
		filterByStartValue: "Szűrés kezdő érték szerint",
		minimumStartValue: "Minimális kezdő érték",
		maximumStartValue: "Maximális kezdő érték",
		filterByEndValue: "Szűrés záró érték szerint",
		minimumEndValue: "Minimális záró érték",
		maximumEndValue: "Maximális záró érték",
		modelTypeName: "Modelltípus",
		fromRasterName: "Kezdő raszter",
		toRasterName: "Záró raszter",
		computeChangeMethod: "Változás kiszámítása metódus",
		fromClassValues: "Kezdő osztályértékek (például: 2 5)",
		toClassValues: "Záró osztályértékek (például: 2 5)",
		keepMethod: "Szűrési módszer",
		useColorMethod: "Átmenetszínek meghatározása",
		detectChangeBands: "Változásészlelési sávok (0-tól kezdődik)",
		tmaskBands: "Időbeli maszkolási sávok (0-tól kezdődik)",
		chiSquaredThreshold: "Khí-négyzet küszöbértéke a változásészleléshez",
		minAnomaly: "Egymást követő megfigyelt anomáliák minimális száma",
		updatingFrequency: "Illesztési gyakoriság frissítése (években)",
		distanceAccumulationRasterName: "Távolságakkumuláció-raszter",
		costBackdirectionRasterName: "Visszirány- vagy áramlásiirány-raszter",
		rasterCollectionName: "Rasztergyűjtemény",
		itemFunctionName: "Elemfunkció",
		aggregationFunctionName: "Összevonási funkció",
		processingFunctionName: "Feldolgozási funkció",
		aggregationDefinitionName: "Összevonási definíció",
		queryGeometryName: "Geometria lekérdezése",
		factorFunctionZeroFactor: "Nulltényező",
		factorFunctionCutAngle: "Levágási szög",
		factorFunctionSideFactor: "Mellék tényező",
		factorFunctionSlope: "Lejtés",
		factorFunctionLowCutAngle: "Alsó levágási szög",
		factorFunctionHighCutAngle: "Felső levágási szög",
		factorFunctionCosPower: "Koszinusz hatvány",
		factorFunctionSecPower: "Metszet hatványa",
		factorFunctionTablePath: "Tábla útvonal",
		processingBand: "Feldolgozási hullámhossz",
		processingBandName: "Feldolgozási hullámhossz neve",
		snappingDate: "Hozzáillesztés dátuma",
		maxNumSegments: "Szegmensek maximális száma",
		vertexCountOvershoot: "Csomópontszám-túlnyúlás",
		spikeThreshold: "Túlnyúló vonal küszöbértéke",
		recoveryThreshold: "Helyreállítási küszöbérték",
		minNumObs: "Megfigyelések minimális száma",
		pValueThreshold: "P érték küszöbértéke",
		bestModelProportion: "Legjobb modell méretaránya",
		preventOneYearRecovery: "Egy éves helyreállítás megakadályozása",
		recoveryIncreaseTrend: "A helyreállítás trendje növekvő",
		outputOtherBands: "Más hullámhosszok megadása kimenetként",
		sortType: "Rendezés típusa",
		numberOfRuns: "Kiterjesztés és zsugorítás futtatása kétszer",
		percentileValue: "Percentilis érték",
		percentileInterpolationType: "Percentilis interpolációtípusa",
		rasterInfoProperty: "Tulajdonság",
		rasterInfoValue: "Érték",
		rasterInfoColumns: "Oszlopok",
		rasterInfoRows: "Sorok",
		rasterInfoBandCount: "Hullámhossztartományok száma",
		rasterInfoPixelSizeX: "X cellaméret",
		rasterInfoPixelSizeY: "Y cellaméret",
		rasterInfoPixelType: "Pixelméret",
		rasterExtentTop: "Fent",
		rasterExtentBottom: "Lent",
		rasterExtentLeft: "Bal",
		rasterExtentRight: "Jobbra",
		rasterStatisticsNotCalculated: "A statisztika kiszámítása nem történt meg.",
		spatialReferenceProjection: "Vetület",
		spatialReferenceWkid: "WKID",
		spatialReferenceLatestWkid: "Előző WKID",
		spatialReferenceWkt: "WKT",
		spatialReferenceVcsWkid: "VCSWKID",
		spatialReferenceLatestVcsWkid: "Előző VCSWKID",
		spatialReferenceAuthority: "Hatóság",
		spatialReferenceLinearUnit: "Lineáris egység",
		spatialReferenceAngularUnit: "Szögegység",
		spatialReferenceFalseEasting: "Hamis pozitív x-érték",
		spatialReferenceFalseNorthing: "Hamis pozitív y-érték",
		spatialReferenceCentralMeridian: "Kezdő hosszúsági kör",
		spatialReferencePrimeMeridian: "Kiinduló meridián",
		spatialReferenceStandardParallel1: "Kúp- vagy hengervetület érintési pontján található szélességi kör 1.",
		spatialReferenceStandardParallel2: "Kúp- vagy hengervetület érintési pontján található szélességi kör 2.",
		spatialReferenceLatitudeOfOrigin: "Origó szélessége",
		spatialReferenceAuxiliarySphereType: "Auxiliary Sphere típusú",
		spatialReferenceDatum: "Geodézia dátum",
		spatialReferenceSpheroid: "Forgási ellipszoid",
		spatialReferenceSemimajorAxis: "Fél nagytengely",
		spatialReferenceSemiminorAxis: "Fél kistengely",
		spatialReferenceInverseFlattening: "Inverz lapítottság",
		inputDefinitionFileName: "Bemenő definíciós fájl",
		deleteName: "Törlés",
		addVariableName: "Változó hozzáadása",
		maxNumPixelsPerSegment: "Maximális szegmensméret pixelben",
		forwardWindowName: "Előre ablak",
		backwardWindowName: "Hátra ablak",
		noDataHandlingName: "NoData érték kezelése",
		circularWrapValueName: "Körkörös csomagolás értéke",
		fromClassNameFieldName: "Mezőnév az osztálynevekhez a Raszterről",
		toClassNameFieldName: "Mezőnév az osztálynevekhez a Raszterhez",
		targetRasterName: "Cél raszter",
		circularWrapValue: "Körkörös csomagolás értéke",
		bandIndexesR: "Piros kifejezés",
		bandIndexesG: "Zöld kifejezés",
		bandIndexesB: "Kék kifejezés",
		exampleName: "Példa",
		inputName: "Bemenet",
		outputName: "Kimenet",
		optionalName: "Opcionális",
		browseDefinitionFile: "Definíciós fájl tallózása",
		selectDefinitionFile: "Bemenő definíciós fájl választása",
		inputDefinitionURL: "Bemenő definíciós fájl URL-címe",
		enterDefinitionFileURL: "Definíciós fájl URL-címének megadása",
		browseXMLFile: "XML-fájl tallózása",
		selectStatsFile: "Statisztikai és hisztogramfájl választása",
		enterXMLFileURL: "XML-fájl URL-címének megadása",
		xmlFileURL: "XML-fájl URL-címe",
		circularCalculation: "Körkörös statisztika számítása",
		localSurfaceType: "Helyi felszín típusa",
		surfaceParameterType: "Paraméter típusa",
		neighborhoodDistance: "Szomszédság távolsága",
		useAdaptiveNeighborhood: "Adaptív szomszédságtávolság használata",
		outputSlopeType: "Kimeneti lejtés mértéke",
		projectAzimuths: "Projekt geodéziai azimutjai",
		useEquatorialAspect: "Ekvatoriális vetület használata",
		zUnit: "Z egység",
		analysisMask: "Elemzési maszk",
		stdDeviation: "Szórás",
		"true": "Igaz",
		"false": "Hamis",
		costDistanceRaster1: "Bemeneti kumulatív költségtávolság-raszter 1",
		costDistanceRaster2: "Bemeneti kumulatív költségtávolság-raszter 2",
		threshold: "Küszöbérték",
		thresholdMethod: "Küszöbérték módszer",
		directionRaster1: "Bemenet visszirányú raszter 1",
		directionRaster2: "Bemenet visszirányú raszter 2",
		maxIterations: "Iterációk maximális száma",
		epsilon: "Epsilon"
	},
	enumLabels: {
		attributeTableTypeManual: "Egyedi",
		attributeTableTypeExternal: "Külső",
		clrSchemeTypeColormap: "Színtérkép",
		clrSchemeTypeColorRamp: "Színskála",
		colormapTypeElevation: "Magasság",
		colormapTypeGray: "Szürke",
		colormapTypeNDVI: "NDVI",
		colormapTypeNDVI2: "NDVI2",
		colormapTypeNDVI3: "NDVI3",
		colormapTypeRandom: "Véletlen",
		none: "Nincs",
		slopeTypeAdjusted: "Igazított",
		slopeTypeDegree: "Fok",
		slopeTypePercentRise: "Százalékos emelkedés",
		slopeTypeScaled: "Skálázott",
		stretchTypeMinMax: "MinMax",
		stretchTypePercentMinMax: "Százalékos MinMax",
		stretchTypeSigmoid: "Sigmoid",
		stretchTypeStdDev: "Szórás",
		hillshadeTypeSimple: "Hagyományos",
		hillshadeTypeMultidirectional: "Többirányú",
		bandComboByNames: "Sávnevek",
		bandComboByWavelength: "Sávhullámhosszok",
		bandComboByIDs: "Sávazonosítók",
		missingBandActionBestMatch: "Legjobb egyezés",
		missingBandActionFail: "Sikertelen",
		unitTypeCelsius: "Celsius",
		unitTypeCentimeters: "Centiméter",
		unitTypeDecimeters: "Deciméter",
		unitTypeFahrenheit: "Fahrenheit",
		unitTypeFeet: "Láb",
		unitTypeFeetPerSec: "Láb per másodperc (ft/s)",
		unitTypeInches: "Hüvelyk",
		unitTypeKelvin: "Kelvin",
		unitTypeKilometers: "Kilométer",
		unitTypeKmsPerHour: "Kilométer per óra (km/h)",
		unitTypeKnots: "Csomó (kn)",
		unitTypeMeters: "Méter",
		unitTypeMetersPerSec: "Méter per másodperc (m/s)",
		unitTypeMiles: "Mérföld",
		unitTypeMilesPerHour: "Mérföld per óra (mph)",
		unitTypeMillimeters: "Milliméter",
		unitTypeNauticalMiles: "Tengeri mérföld",
		unitTypeYards: "Yard",
		unitTypeDecimalDegrees: "Tized fok",
		unitTypePoints: "Pontok",
		unitTypeUnknown: "Ismeretlen",
		unitTypeSqMapUnits: "négyzet-térképegység",
		unitTypeSqMiles: "Négyzetmérföld",
		unitTypeSqKms: "Négyzetkilométer",
		unitTypeAcres: "Acre",
		unitTypeHectares: "Hektár",
		unitTypeSqYards: "Négyzetyard",
		unitTypeSqFt: "Négyzetláb",
		unitTypeSqInches: "Négyzethüvelyk",
		unitTypeSqMts: "Négyzetméter",
		unitTypeSqCms: "Négyzetcentiméter",
		unitTypeSqMms: "Négyzetmilliméter",
		cellsizeTypeFirst: "Első",
		cellsizeTypeMin: "Minimum",
		cellsizeTypeMax: "Maximum",
		cellsizeTypeMean: "Átlag",
		cellsizeTypeLast: "Utolsó",
		extentTypeFirst: "Első",
		extentTypeIntersection: "Metszet",
		extentTypeUnion: "Unió",
		extentTypeLast: "Utolsó",
		noDataInterpretAny: "Bármely egyezés",
		noDataInterpretAll: "Összes egyezés",
		curvatureTypeStandard: "Standard",
		curvatureTypeProfile: "Profil",
		curvatureTypePlanform: "Vízgyűjtők és vízválasztók görbülete",
		filterTypeLineDetectionHorizontal: "Vízszintes élkeresés",
		filterTypeLineDetectionVertical: "Függőleges élkeresés",
		filterTypeLineDetectionLeftDiagonal: "Bal átlós élkeresés",
		filterTypeLineDetectionRightDiagonal: "Jobb átlós élkeresés",
		filterTypeGradientNorth: "Gradiens észak",
		filterTypeGradientWest: "Gradiens nyugat",
		filterTypeGradientEast: "Gradiens kelet",
		filterTypeGradientSouth: "Gradiens dél",
		filterTypeGradientNorthEast: "Gradiens északkelet",
		filterTypeGradientNorthWest: "Gradiens északnyugat",
		filterTypeSmoothArithmeticMean: "Simított aritmetikai átlag",
		filterTypeSmoothing3x3: "Simítás 3x3",
		filterTypeSmoothing5x5: "Simítás 5x5",
		filterTypeSharpening3x3: "Élesítés 3x3",
		filterTypeSharpening5x5: "Élesítés 5x5",
		filterTypeLaplacian3x3: "Laplace-i 3x3",
		filterTypeLaplacian5x5: "Laplace-i 5x5",
		filterTypeSobelHorizontal: "Sobel vízszintes",
		filterTypeSobelVertical: "Sobel függőleges",
		filterTypeSharpen: "Élesítés",
		filterTypeSharpen2: "Erősebb élesítés",
		filterTypePointSpread: "Pontszórás",
		userDefined: "Felhasználó által meghatározott",
		ContourTypeLines: "Kontúrvonalak",
		ContourTypeFill: "Kontúrkitöltés",
		ContourTypeSmoothOnly: "Csak felszínsimítás",
		rasterizeFirst: "Első",
		rasterizeLast: "Utolsó",
		rasterizeSmallest: "Legkisebb",
		rasterizeLargest: "Legnagyobb",
		resamplingTypeNearest: "Legközelebbi szomszéd",
		resamplingTypeBilinear: "Bilineáris interpoláció",
		resamplingTypeCubic: "Köbös konvolúció",
		resamplingTypeMajority: "Többség",
		resamplingTypeBilinearPlus: "Bilineáris interpoláció plusz",
		resamplingTypeGauss: "Gauss-elmosás",
		resamplingTypeGaussPlus: "Gauss-elmosás plusz",
		resamplingTypeAverage: "Átlag",
		resamplingTypeMinimum: "Minimum",
		resamplingTypeMaximum: "Maximum",
		resamplingTypeVectorAvg: "Vektoros átlag",
		minimum: "Minimum",
		maximum: "Maximum",
		mean: "Átlag",
		stdDeviation: "Szabványos szórás",
		uvMagDirTypeUV: "U-V",
		uvMagDirTypeMagDir: "Nagyság–irány",
		unknown: "Ismeretlen",
		angleRefSysGeographic: "Földrajzi",
		angleRefSysArithmetic: "Aritmetikai",
		interpolateIrregularDataNearest: "Legközelebbi szomszéd",
		interpolateIrregularDataBilinear: "Bilineáris",
		interpolateIrregularDataTinningLinear: "Lineáris Tinning",
		interpolateIrregularDataTinningNaturalNeighbor: "Természetes szomszédság",
		interpolateIrregularDataTinningIDW: "Súlyozott inverz távolság",
		esriRasterThresholdTypeConstant: "Állandó",
		esriRasterThresholdTypeOtsu: "Otsu",
		esriRasterThresholdTypeTsai: "Tsai",
		esriRasterThresholdTypeKapur: "Kapur",
		esriRasterThresholdTypeKittler: "Kittler",
		esriRasterThresholdTypeRosin: "Rosin",
		argStatsTypeMax: "Arg. max",
		argStatsTypeMin: "Arg. min",
		argStatsTypeMedian: "Arg. közép",
		argStatsTypeDuration: "Időtartam",
		arithmeticOpPlus: "Plusz",
		arithmeticOpMinus: "Mínusz",
		arithmeticOpMultiply: "Szorzás",
		arithmeticOpDivide: "Osztás",
		arithmeticOpPower: "Hatvány",
		arithmeticOpMode: "Mód",
		clipTypeOutside: "Vágás kívül",
		clipTypeInside: "Vágás belül",
		yes: "Igen",
		no: "Nem",
		densities: "Sűrűségek",
		expectedCounts: "Várható számok",
		planar: "Síkbeli",
		geodesic: "Geodéziai",
		eachCell: "Minden cella",
		eachZone: "Minden zóna",
		bestSingle: "Legjobb egyedülálló",
		allSightlines: "Minden rálátási vonal",
		perimeterSightlines: "Kerületi rálátási vonalak",
		frequency: "Gyakoriság",
		observers: "Megfigyelők",
		majority: "Többség",
		median: "Medián",
		minority: "Kisebbség",
		percentile: "Percentilis",
		range: "Tartomány",
		sum: "Összeg",
		variety: "Sokféleség",
		ndvi: "NDVI",
		savi: "SAVI",
		bandArithmeticMethodTSAVI: "Transzformált SAVI",
		bandArithmeticMethodMSAVI: "Módosított SAVI",
		bandArithmeticMethodSultan: "Sultan-képlet",
		gemi: "GEMI",
		pvi: "PVI",
		gvi: "GVI (Landsat TM)",
		vari: "VARI",
		sr: "SR",
		gndvi: "GNDVI",
		ndvire: "NDVIre",
		srre: "SRre",
		mtvi2: "MTVI2",
		rtviCore: "RTVIMag",
		cire: "CIre",
		cig: "CIg",
		ndwi: "NDWI",
		evi: "EVI",
		ironOxide: "Vas-oxid",
		ferrousMinerals: "Vastartalmú ásványok",
		clayMinerals: "Agyagásványok",
		wndwi: "WNDWI",
		bai: "BAI",
		mndwi: "MNDWI",
		nbr: "NBR",
		ndbi: "NDBI",
		ndmi: "NDMI",
		ndsi: "NDSI",
		localSquareRoot: "Négyzetgyök",
		localACos: "ACos",
		localASin: "ASin",
		localATan: "ATan",
		localATanH: "ATanH",
		localAbs: "Abs",
		localBitwiseNot: "Bitenkénti negáció",
		localBooleanNot: "Logikai negáció",
		localCos: "Cos",
		localCosH: "CosH",
		localExp: "Exp",
		localExp10: "Exp10",
		localExp2: "Exp2",
		localInt: "Int",
		localIsNull: "Null értékű",
		localFloat: "Float",
		localLn: "Ln",
		localLog10: "Log10",
		localLog2: "Log2",
		localNegate: "Negálás",
		localRoundDown: "Lekerekítés",
		localRoundUp: "Felkerekítés",
		localSin: "Sin",
		localSinH: "SinH",
		localTan: "Tan",
		localTanH: "TanH",
		localACosH: "ACosH",
		localASinH: "ASinH",
		localPlus: "Plusz",
		localMinus: "Mínusz",
		localTimes: "Szorzás",
		localPower: "Hatvány",
		localBitwiseAnd: "Bitenkénti és",
		localBitwiseLeftShift: "Bitenkénti balra tolás",
		localBitwiseOr: "Bitenkénti vagy",
		localBitwiseRightShift: "Bitenkénti jobbra tolás",
		localBitwiseXor: "Bitenkénti kizáró vagy",
		localBooleanAnd: "Logikai és",
		localBooleanOr: "Logikai vagy",
		localBooleanXor: "Logikai kizáró vagy",
		localDivide: "Osztás",
		localEqualTo: "Egyenlő",
		localGreaterThan: "Nagyobb, mint",
		localGreaterThanEqual: "Nagyobb vagy egyenlő",
		localLessThan: "Kisebb, mint",
		localLessThanEqual: "Kisebb vagy egyenlő",
		localMod: "Módusz",
		localNotEqual: "Nem egyenlő",
		localATan2: "ATan2",
		localSquare: "Négyzet",
		localSetNull: "Null beállítása",
		remapDefTypeList: "Lista",
		remapDefTypeTable: "Táblázat",
		remapTableTypeSimple: "Egyszerű",
		remapTableTypeDynamic: "Dinamikus",
		remapTableTypeReassignment: "Újbóli hozzárendelés",
		geomCorrectionByConstZ: "Állandó Z használata",
		geomCorrectionByDEM: "DMM használata",
		radarCalibBetaNought: "Béta-nulla",
		radarCalibSigmaNought: "Szigma-nulla",
		radarCalibGammaNought: "Gamma-nulla",
		speckleFilterTypeLee: "Lee szűrő",
		speckleFilterTypeEnhancedLee: "Haladó Lee szűrő",
		speckleFilterTypeFrost: "Frost szűrő",
		speckleFilterTypeKuan: "Kuan szűrő",
		speckleNoiseModelMul: "Multiplikatív zaj",
		speckleNoiseModelAdd: "Additív zaj",
		speckleNoiseModelAddnMul: "Additív és multiplikatív zaj",
		mosaicOpTypeFirst: "Első",
		mosaicOpTypeLast: "Utolsó",
		mosaicOpTypeMin: "Min.",
		mosaicOpTypeMax: "Max.",
		mosaicOpTypeMean: "Átlag",
		mosaicOpTypeBlend: "Összemosás",
		mosaicOpTypeSum: "Összeg",
		integer: "Egész szám",
		rfxD8: "D8",
		rfxMFD: "MFD",
		dinf: "Dinf",
		vertical: "Függőleges",
		horizontal: "Vízszintes",
		localCellStatisticsMajority: "Többség",
		localCellStatisticsMax: "Maximum",
		localCellStatisticsMean: "Átlag",
		localCellStatisticsMedian: "Medián",
		localCellStatisticsMin: "Minimum",
		localCellStatisticsMinority: "Kisebbség",
		localCellStatisticsRange: "Tartomány",
		localCellStatisticsStdDev: "Szabványos szórás",
		localCellStatisticsSum: "Összeg",
		localCellStatisticsVariety: "Sokféleség",
		localCellStatisticsMajorityIgnoreND: "Többség (NoData érték figyelmen kívül hagyása)",
		localCellStatisticsMaxIgnoreND: "Maximum (NoData érték figyelmen kívül hagyása)",
		localCellStatisticsMeanIgnoreND: "Átlag (NoData érték figyelmen kívül hagyása)",
		localCellStatisticsMedianIgnoreND: "Medián (NoData érték figyelmen kívül hagyása)",
		localCellStatisticsMinIgnoreND: "Minimum (NoData érték figyelmen kívül hagyása)",
		localCellStatisticsMinorityIgnoreND: "Kisebbség (NoData érték figyelmen kívül hagyása)",
		localCellStatisticsRangeIgnoreND: "Tartomány (NoData érték figyelmen kívül hagyása)",
		localCellStatisticsStdDevIgnoreND: "Szabványos szórás (NoData érték figyelmen kívül hagyása)",
		localCellStatisticsSumIgnoreND: "Összeg (NoData érték figyelmen kívül hagyása)",
		localCellStatisticsVarietyIgnoreND: "Sokféleség (NoData érték figyelmen kívül hagyása)",
		localCellStatisticsTypePercentileIgnoreND: "Százalékos érték (NoData figyelmen kívül hagyása)",
		fromSource: "Forrástól",
		toSource: "Forráshoz",
		colorspaceConversionRgbToHsv: "RGB-ről HSV-re",
		colorspaceConversionHsvToRgb: "HSV-ről RGB-re",
		pansharpenTypeIHS: "IHS",
		pansharpenTypeBrovey: "Brovey",
		pansharpenTypeEsri: "Esri",
		pansharpenTypeMean: "Átlag",
		pansharpenTypeGramSchmidt: "Gram-Schmidt",
		rectangleNeighborhood: "Téglalap",
		circleNeighborhood: "Kör",
		annulusNeighborhood: "Körgyűrű",
		wedgeNeighborhood: "Ék",
		irregularNeighborhood: "Szabálytalan",
		weightNeighborhood: "Súly",
		four: "Négy",
		eight: "Nyolc",
		within: "Belül",
		cross: "Kereszt",
		addLink: "Hivatkozás hozzáadása",
		noLink: "Nincs hivatkozás",
		weightedMean: "Súlyozott átlag",
		ls8QCBitPatternCirrus: "Landsat 8 cirrus",
		ls8QCBitPatternCloud: "Landsat 8 felhő",
		ls8QCBitPatternCloudShadow: "Landsat 8 felhőárnyék",
		ls8QCBitPatternDesignatedFill: "Landsat 8 kijelölt kitöltés",
		ls8QCBitPatternDroppedFrame: "Landsat 8 kihagyott képkocka",
		ls8QCBitPatternSnowIce: "Landsat 8 hó/jég",
		ls8QCBitPatternTerrainOcclusion: "Landsat 8 domborzati takarás",
		ls8QCBitPatternVegetation: "Landsat 8 vegetáció",
		ls8QCBitPatternWater: "Landsat 8 víz",
		downStream: "Áramlásirány",
		upStream: "Áramlásiránnyal ellentétes irány",
		strahler: "STRAHLER",
		shreve: "SHREVE",
		currentSlice: "Aktuális szelet",
		allSlices: "Minden szelet",
		expandDistance: "TÁVOLSÁG",
		expandMorphological: "MORFOLÓGIAI",
		spectralProfileFile: "Spektrális profil",
		trainingFeatureFile: "Képzési funkció",
		randomDistributionTypeUniform: "Egységes",
		randomDistributionTypeUniformInteger: "Egész szám",
		randomDistributionTypeNormal: "Normál",
		randomDistributionTypeExponential: "Hatványkitevős",
		randomDistributionTypePoisson: "Poisson",
		randomDistributionTypeGamma: "Gamma",
		randomDistributionTypeBinomial: "Binomiális",
		randomDistributionTypeGeometric: "Geometriai",
		randomDistributionTypeNegativeBinomial: "Negatív binomiális",
		randomGeneratorTypeStandardCRand: "Standard C Rand",
		randomGeneratorTypeAlgorithmACM599: "ACM-gyűjtött algoritmus 599",
		randomGeneratorTypeMersenneTwister: "Mersenne Twister",
		sumName: "Összeg",
		medainName: "Medián",
		trendLinear: "Lineáris",
		trendHarmonic: "Harmonikus",
		trendPolynomial: "Polinom",
		trendMannKendall: "Mann-Kendall",
		trendSeasonalKendall: "Seasonal-Kendall",
		dimensionByValue: "Érték szerint",
		dimensionByInterval: "Időköz szerint",
		mdimDefTypeAll: "Összes",
		mdimDefTypeByValues: "Értékek szerint",
		mdimDefTypeByRanges: "Tartományok szerint",
		mdimDefTypeByIteration: "Iteráció szerint",
		mdimDefTypeByInterval: "Intervallum szerint",
		mdimDefTypeByTargetRaster: "Cél raszter szerint",
		esriTimeUnitsHours: "Óra",
		esriTimeUnitsDays: "nap(ok)",
		esriTimeUnitsWeeks: "Hét",
		esriTimeUnitsMonths: "Hónap",
		esriTimeUnitsYears: "Év",
		esriTimeIntervalKeywordHourly: "Óránként",
		esriTimeIntervalKeywordDaily: "Napi",
		esriTimeIntervalKeywordWeekly: "Heti",
		esriTimeIntervalKeywordDekadly: "Tíznapos",
		esriTimeIntervalKeywordPentadly: "Ötnapos",
		esriTimeIntervalKeywordMonthly: "Havi",
		esriTimeIntervalKeywordQuarterly: "Negyedéves",
		esriTimeIntervalKeywordYearly: "Évente",
		esriTimeIntervalKeywordRecurringDaily: "Naponta ismétlődve",
		esriTimeIntervalKeywordRecurringWeekly: "Hetente ismétlődve",
		esriTimeIntervalKeywordRecurringMonthly: "Havonta ismétlődve",
		esriTimeIntervalKeywordRecurringQuarterly: "Negyedévente ismétlődve",
		aggDefTypeAll: "Összes",
		aggDefTypeIntervalKeyword: "Intervallumkulcsszó",
		aggDefTypeIntervalValue: "Intervallumérték",
		aggDefTypeIntervalRanges: "Intervallumtartományok",
		latestChange: "Legutolsó változás időpontja",
		earliestChange: "Legelső változás időpontja",
		largestChange: "Legnagyobb változás időpontja",
		numberOfChanges: "Változások száma",
		longestChange: "Leghosszabb változás ideje",
		shortestChange: "Legrövidebb változás ideje",
		fastestChange: "Leggyorsabb változás ideje",
		slowestChange: "Leglassabb változás ideje",
		allChanges: "Összes",
		increaseChanges: "Növelés",
		decreaseChanges: "Csökkentés",
		segmentBeginning: "Szakasz eleje",
		segmentEnd: "Szakasz vége",
		esriComputeChangeMethodDifference: "Különbség",
		esriComputeChangeMethodRelativeDifference: "Relatív különbség",
		esriComputeChangeMethodCategorical: "Kategóriakülönbség",
		esriComputeChangeMethodMultispectralEuclideanDistance: "Spektrális Euklideszi Távolság",
		esriComputeChangeMethodMultispectralAngularDifference: "Spektrális szögeltérés",
		esriComputeChangeMethodMultispectralAxisWithBiggestChange: "A legtöbb változással rendelkező hullámhossz-tartomány",
		esriComputeChangeKeepAll: "Összes megőrzése",
		esriComputeChangeKeepChangedOnly: "Csak a módosult pixelek megőrzése",
		esriComputeChangeKeepUnchangedOnly: "Csak a nem módosult pixelek megőrzése",
		esriComputeChangeUseColorAverage: "Átlagos kezdő és befejező színek",
		esriComputeChangeUseColorFrom: "Kezdő színek használata",
		esriComputeChangeUseColorTo: "Befejező színek használata",
		factorFunctionBinary: "Bináris",
		factorFunctionForward: "Előre",
		factorFunctionLinear: "Lineáris",
		factorFunctionInvLinear: "Inverz lineáris",
		factorFunctionTable: "Táblázat",
		factorFunctionSymLinear: "Szimmetrikus lineáris",
		factorFunctionSymInvLinear: "Szimmetrikus inverz lineáris",
		factorFunctionCos: "Koszinusz",
		factorFunctionSec: "Metszővonal",
		factorFunctionCosSec: "Metszővonal koszinusza",
		factorFunctionSecCos: "Metszet koszinusza",
		noSort: "Nincs rendezés",
		ascend: "Növekvő",
		descend: "Csökkenő",
		autoDetect: "Automatikus észlelés",
		nearest: "Legközelebbi",
		linear: "Lineáris",
		esriMonthJanuary: "Január",
		esriMonthFebruary: "Február",
		esriMonthMarch: "Március",
		esriMonthApril: "Április",
		esriMonthMay: "Május",
		esriMonthJune: "Június",
		esriMonthJuly: "Július",
		esriMonthAugust: "Augusztus",
		esriMonthSeptember: "Szeptember",
		esriMonthOctober: "Október",
		esriMonthNovember: "November",
		esriMonthDecember: "December",
		dimensionalMovingIgnoreNoData: "Adatok",
		dimensionalMovingPropagateNoData: "NoData",
		dimensionalMovingFillOnlyNoData: "NoData kitöltése",
		circularMean: "Körív átlag",
		circularName: "Körkörös",
		arithmeticName: "Aritmetikai",
		slopeName: "Meredekség",
		aspectName: "Kitettség",
		meanCurvature: "Átlag görbület",
		profileCurvature: "Profil (normál lejtésű) görbület",
		tangentialCurvature: "Tangenciális (normál kontúrú) görbület",
		planCurvature: "Sík (vetületi kontúrú) görbület",
		contourGeodesicTorsion: "Kontúr geodéziai torziója",
		gaussianCurvature: "Gauss-görbe",
		casoratiCurvature: "Casorati-görbület",
		localSurfaceTypeQuadratic: "Kvadratikus",
		localSurfaceTypeBiquadratic: "Bikvadratikus",
		thresholdNoThreshold: "Nincs küszöbérték",
		thresholdPercentLeastCost: "Legolcsóbb százalékos értéke",
		thresholdAccumulativeCost: "Kumulatív költség",
		clrmapTypeHillshade: "Domborzatárnyékolás"
	},
	categoryLabels: {
		sourceCharacteristics: "Forrásjellemzők",
		neighborhoodSettings: "Szomszédsági beállítások",
		statistics: "Statisztika",
		gamma: "Gamma",
		viewshedParameters: "Belátható terület paraméterei",
		observerParameters: "Megfigyelési pozíció paraméterei",
		irregularDataInterpolation: "Szabálytalan adatinterpoláció",
		modelStatistics: "Modellstatisztika",
		aggregationDef: "Összevonási definíció",
		filterByAttributes: "Szűrés attribútumok szerint",
		percentileName: "Percentilis",
		rasterInfo: "Raszterinformáció",
		extent: "Kiterjedés",
		spatialReference: "Vonatkoztatási rendszer"
	},
	outputRasterHelpTexts: {
		outputName: "<p>A létrehozni és a térképhez hozzáadni kívánt réteg neve.</p>",
		resultType: "<p>A létrejövő kimenet típusa. A kimenetek csempézett távérzékelési rétegek vagy pedig dinamikus távérzékelési rétegek lehetnek.</p>",
		saveResultIn: "<p>A <b>Saját tartalom</b> azon mappájának neve, ahová az eredmény mentése történik.</p>"
	},
	analysisEnvironmentsHelpTexts: {
		description: "<p>Környezeti beállítások a Map Viewerben történő elemzéshez. </p>",
		outSR: "<p>Meghatározza a koordináta-rendszert az elemzéshez és az eredményréteghez.</p>",
		extent: "<p>Az elemzéshez használandó területet határozza meg.</p>",
		snapRaster: "<p>A kimenet kiterjedését állítja be, hogy megfeleljen a megadott raszterillesztési réteg cellaigazításának.</p>",
		cellSize: "<p>Meghatározza az elemzéshez és a kimeneti raszterréteg létrehozáshoz használt cellaméretet vagy felbontást.</p>",
		mask: "<p>Maszkréteget határoz meg, amelyben csak a maszkterületen belüli cellák lesznek használva az elemzéshez.</p>",
		resamplingMethod: "<p>Megadja a pixelértékek interpolálásának módját, ha a bemeneti és kimeneti raszterek nem egyeznek.</p>"
	},
	mainGenStrings: {
		unsupportedDataType: "Nem támogatott típus",
		currentlyUnsupported: " A(z) ${missingType} alapértelmezett szerkesztője fel van függesztve, de hamarosan megjelenik. Ideiglenes helyőrző szövegmező a karakterlánc alapú bemenetek megadásához.",
		unsupportedOverrideWarning: "A felülbírálati szerkesztő komponens, amely jobb felhasználói felületet biztosít a következő paraméterekkel való munkához, még nem készült el, de hamarosan megjelenik:",
		overrideWidgetMissing: "A felülbírálati szerkesztő komponens hiányzik!",
		uiIncomplete: "A feladat beküldése nem sikerült. A funkciót nem lehet futtatni, mert néhány szükséges mező nem teljes vagy hiányzik a felhasználói felületről.",
		count: "Darabszám",
		selectVariables: "Változók kiválasztása",
		selectFeature: "Válasszon ki vektoros réteget",
		greaterThanErrorMessage: "A bemeneti szám értéke több mint ${min} kell legyen.",
		lesserThanErrorMessage: "A bemeneti szám értéke ${max} alatti kell legyen.",
		greaterThanOrEqualErrorMessage: "A bemeneti szám értéke legalább ${min} kell legyen.",
		lesserThanOrEqualErrorMessage: "A bemeneti szám értéke legfeljebb ${max} lehet.",
		allowScalar: "Válasszon réteget, vagy pedig adja meg a kívánt állandót.",
		selectField: "Mező kiválasztása",
		parameterRequired: "Ez a paraméter kötelező.",
		enterAValue: "Adja meg a kívánt értéket…",
		invalidInput: "A megadott érték nem érvényes.",
		itemNotFound: "Az elem nem létezik vagy nem érhető el.",
		itemPermissionDenied: "Nincs jogosultsága ennek az elemnek az elérésére.",
		layerNotAvailable: "Nem sikerült betölteni a(z) ${layerName} réteget",
		multipleLayersNotAvailable: "Nem sikerült betölteni a(z) ${layerName} réteget és egyebeket.",
		learnMoreLabel: "További információ",
		fieldNotAvailable: "Nem sikerült betölteni a mezőt.",
		allowAnalysis: "A képszolgáltatáson nem engfedélyezet az elemzés.",
		allowAnalysisReason: "A térkép egy vagy több rétege itt nem szerepel, mert nem teszi lehetővé az elemzést.",
		learnMoreText: "További információ",
		atLeastOneRasterInput: "Legalább egy bemeneti rétegnek raszteres rétegnek kell lennie.",
		browseAnalysisLayers: "Rétegek tallózása",
		activeMapViewExtent: "Az aktuális térképkiterjedés használata",
		chooseRaster: "Kivágási raszter kiválasztása",
		chooseGeometry: "Kivágási geometria kiválasztása",
		resultType: "Eredmény típusa",
		saveInFolder: "Mentés mappába",
		outputName: "Kimenet neve",
		outputLayerType: "Kimeneti réteg típusa",
		dynamicImageryLayer: "Dinamikus távérzékelési réteg",
		tiledImageryLayer: "Csempézett távérzékelési réteg",
		custom: "Egyéni",
		loading: "Betöltés...",
		layerMissing: "A térkép egy vagy több rétege itt nem szerepel, mert nem teszi lehetővé az elemzést. További információ.",
		browseCoordinateSystems: "Koordináta-rendszerek tallózása",
		unableToRepopulateOutSR: "Nem sikerült kitölteni a kimeneti koordináta-rendszert.",
		defaultTitle: "Részletek megjelenítése",
		"ARC (equal arc-second)": "ARC (egyenlő ívmásodperc)",
		Africa: "Afrika",
		Antarctica: "Antarktisz",
		Argentina: "Argentína",
		Asia: "Ázsia",
		"Asteroid Belt": "Aszteroida öv",
		"Atlantic Ocean": "Atlanti-óceán",
		Australia: "Ausztrália",
		"Australia and New Zealand": "Ausztrália és Új-Zéland",
		Austria: "Ausztria",
		"BLM (US Feet)": "BLM (US láb)",
		Bangladesh: "Banglades",
		"Beijing 1954": "Beijing 1954",
		Bhutan: "Bhután",
		CGCS2000: "CGCS2000",
		Canada: "Kanada",
		Caribbean: "Karib-térség",
		"Caribbean Sea": "Karib-tenger",
		"Central America": "Közép-Amerika",
		"Central and North America": "Közép- és Észak-Amerika",
		Colombia: "Kolumbia",
		Continental: "Kontinentális",
		"County Systems": "Megyei rendszerek",
		"Democratic Republic of the Congo": "Kongói Demokratikus Köztársaság",
		"EPSG Arctic": "EPSG Arctic",
		Earth: "Föld",
		"Ellipsoidal-based": "Ellipszis alapú",
		Europe: "Európa",
		Finland: "Finnország",
		France: "Franciaország",
		"GSK 2011": "GSK 2011",
		"Gauss Kruger": "Gauss Kruger",
		"Geographic Coordinate Systems": "Földrajzi koordináta-rendszer",
		Germany: "Németország",
		"Gravity-related": "Gravitációs",
		"Greenwich-based": "Greenwich-i alapú",
		"Highways England": "Autópályák Angliában",
		Illinois: "Illinois",
		"Indian Ocean": "Indiai-óceán",
		"Indian Subcontinent": "Indiai szubkontinens",
		Indiana: "Indiana",
		Indonesia: "Indonézia",
		Iowa: "Iowa",
		"Ireland and United Kingdom": "Írország és az Egyesült Királyság",
		Italy: "Olaszország",
		Japan: "Japán",
		Jupiter: "Jupiter",
		Kansas: "Kansas",
		"Las Vegas": "Las Vegas",
		Libya: "Líbia",
		Malaysia: "Malajzia",
		"Malaysia and Singapore": "Malajzia és Szingapúr",
		Mars: "Mars",
		Mercury: "Merkúr",
		Minnesota: "Minnesota",
		Montana: "Montana",
		"NAD 1927": "NAD 1927",
		"NAD 1927 (US Feet)": "NAD 1927 (US láb)",
		"NAD 1983": "NAD 1983",
		"NAD 1983 (2011)": "NAD 1983 (2011)",
		"NAD 1983 (2011) (Intl Feet)": "NAD 1983 (2011) (nemz. láb)",
		"NAD 1983 (2011) (Meters)": "NAD 1983 (2011) (méter)",
		"NAD 1983 (2011) (US Feet)": "NAD 1983 (2011) (US láb)",
		"NAD 1983 (CORS96) (Intl Feet)": "NAD 1983 (CORS96) (nemz. láb)",
		"NAD 1983 (CORS96) (Meters)": "NAD 1983 (CORS96) (méter)",
		"NAD 1983 (CORS96) (US Feet)": "NAD 1983 (CORS96) (US láb)",
		"NAD 1983 (Intl Feet)": "NAD 1983 (nemz. láb)",
		"NAD 1983 (Meters)": "NAD 1983 (méter)",
		"NAD 1983 (PA11) (Meters)": "NAD 1983 (PA11) (méter)",
		"NAD 1983 (PA11) (US Feet)": "NAD 1983 (PA11) (US láb)",
		"NAD 1983 (US Feet)": "NAD 1983 (US láb)",
		"NAD 1983 HARN (Intl Feet)": "NAD 1983 HARN (nemz. láb)",
		"NAD 1983 HARN (Meters)": "NAD 1983 HARN (méter)",
		"NAD 1983 HARN (US Feet)": "NAD 1983 HARN (US láb)",
		"NAD 1983 NSRS2007 (Intl Feet)": "NAD 1983 NSRS2007 (nemz. láb)",
		"NAD 1983 NSRS2007 (Meters)": "NAD 1983 NSRS2007 (méter)",
		"NAD 1983 NSRS2007 (US Feet)": "NAD 1983 NSRS2007 (US láb)",
		"National Grids": "Nemzeti hálózatok",
		Navajo: "Navajo",
		Neptune: "Neptunusz",
		"New Beijing": "New Beijing",
		"New Zealand": "Új-Zéland",
		"North America": "Észak-Amerika",
		"Northern Hemisphere": "Északi félteke",
		Norway: "Norvégia",
		Oceans: "Oceánok",
		Oregon: "Oregon",
		"Other GCS": "Egyéb GCS",
		"Pacific Ocean": "Csendes-óceán",
		Pluto: "Plútó",
		Polar: "Poláris",
		Portugal: "Portugália",
		"Projected Coordinate Systems": "Vetületi koordináta-rendszer",
		"Pulkovo 1942": "Pulkovo 1942",
		"Pulkovo 1995": "Pulkovo 1995",
		Replaced: "Lecserélve",
		"SAD 1969": "SAD 1969",
		SIRGAS: "SIRGAS",
		"SIRGAS 2000": "SIRGAS 2000",
		Saturn: "Szaturnusz",
		"Solar System": "Naprendszer",
		"South Africa": "Dél-Afrika",
		"South America": "Dél-Amerika",
		"South Korea": "Dél-Korea",
		"Southern Hemisphere": "Déli félteke",
		"Spheroid-based": "Gömb alakú",
		"State Plane": "Állami síkság",
		"State Systems": "Állami rendszerek",
		Sweden: "Svédország",
		"Switzerland and Liechtenstein": "Svájc és Liechtenstein",
		Texas: "Texas",
		Tribal: "Törzsi",
		Turkey: "Törökország",
		"US Feet": "US láb",
		"USA and territories": "USA és egyéb területek",
		UTM: "UTM",
		Ukraine: "Ukrajna",
		"Unknown Height Systems": "Ismeretlen magassági rendszerek",
		Uranus: "Uránusz",
		Venus: "Vénusz",
		"Vertical Coordinate Systems": "Vertikális koordináta-rendszer",
		Vietnam: "Vietnam",
		"WGS 1972": "WGS 1972",
		"WGS 1984": "WGS 1984",
		Wisconsin: "Wisconsin",
		"Wisconsin CRS": "Wisconsin CRS",
		World: "Világ",
		"World (Sphere-based)": "Világ (gömb alapú)",
		Wyoming: "Wyoming",
		"Xian 1980": "Xian 1980",
		done: "Kész",
		noResults: "Nincs találat",
		searchPlaceholder: "Név vagy WKID",
		browseTemplate: "Raszterfüggvénysablonok tallózása",
		saveTemplate: "Raszterfunkció-sablon mentése",
		preview: "Előnézet",
		previewDescription: "Az elemzés futtatása előtt az eredmény előnézete.",
		showPreview: "Előnézet megjelenítése",
		previewLayer: "${number} Réteg előnézetének megtekintése",
		newPreview: "Új előnézet",
		previewPopup: "Az elemzési eredmények előnézetének engedélyezése a bemeneti paraméterek alapján.",
		updatePreviewLayer: "A kiválasztott előnézeti réteg frissítése",
		createPreviewLayer: "Új előnézeti réteg létrehozása",
		maximumPreviewAllowed: "A megengedett előnézeti rétegek maximális száma: ${maxCount}",
		previewFailure: "Ez az előnézeti réteg nem érhető el. Ellenőrizze a bemeneti paramétereket, és frissítse újra ezt az előnézeti réteget.",
		header: "Elem kiválasztása",
		content: "Önnek nem mentett módosításai vannak itt: ${rftTitle}. Ha új sablonnal kezdi újra, akkor ezek a változtatások elvesznek.",
		dontSave: "Ne mentse",
		"continue": "Folytatás",
		stretch: "Igazítás ablakhoz",
		pan: "Pásztázás",
		newTemplate: "Új sablon létrehozása",
		openTemplate: "Sablon megnyitása",
		addFunction: "Raszterfunkciók hozzáadása",
		addConstant: "Állandó hozzáadása",
		addRaster: "Raszterváltozók hozzáadása",
		move: "Mozgatás",
		zoom: "Nagyítás/kicsinyítés",
		saveAs: "Mentés másként",
		clear: "Törlés",
		addRasterFunctionTitle: "Raszterfunkciók hozzáadása",
		templatePropertiesTitle: "Sablon tulajdonságai",
		browseRFT: "Raszterfüggvénysablonok tallózása",
		defaultToolDescription: "${toolTitle} elemzőeszköz.",
		openToolText: "Eszköz megnyitása",
		toolDropdownText: "Eszköz legördülő menüje",
		addToMap: "Megerősítés, majd hozzáadás a térképhez",
		confirm: "Megerősít",
		select: "Kiválasztás",
		selectTask: "Feladat kiválasztása",
		unsupportedLayer: "Ez a paraméter nem támogatja a következő rétegeket: ${layerName}.",
		viewDetails: "Elem összes részletének megtekintése",
		rename: "Átnevezés",
		duplicate: "Duplikált",
		launch: "Megnyitás futtatáshoz",
		templateEditor: "Sablonszerkesztő",
		createItem: "Raszterfunkció-sablon mentése",
		actionLabel: "Szűrő",
		filterPopoverHeading: "Függvények szűrése",
		defaultSearchPlaceholder: "Keresés név alapján",
		settings: "Beállítások",
		summary: "Összefoglalás",
		definitionQuery: "Definíciós lekérdezés",
		matchVariables: "Változók párosítása",
		unionDimension: "Uniós méret",
		nameEditorPlaceholder: "Cím megadása",
		summaryEditorPlaceholder: "Adjon meg egy rövid leírást.",
		definitionQueryPlaceholder: "Beírás...",
		upload: "Feltöltés",
		chooseImage: "Fájl választásához kattintson",
		update: "Frissítés",
		thumbnailErrors: {
			wrongImageType: "Érvénytelen képtípust választott ki",
			notAvailable: "A bélyegkép nem érhető el",
			loadError: "Nem sikerült betölteni a képet",
			chooseFile: "Fájl választásához kattintson"
		}
	}
};
const copy = "Másolás";
const save = "Mentés";
const title = "Beosztás";
const folder = "Mappa";
const tags = "Címkék";
const savingMessage = "Elem mentése ide:";
const shareWith = "Megosztás a következővel:";
const share = "Megosztás";
const setSharingLevel = "Megosztás szint beállítása";
const setGroupSharing = "Csoportmegosztás beállítása";
const owner = "Tulajdonos";
const organization = "Szervezet";
const everyone = "Mindenki (nyilvános)";
const groups = "Csoportok:";
const type = "Típus";
const mosaic = "Mozaik";
const itemGroup = "Elemcsoport";
const item = "Tétel";
const definitionQuery = "Lekérdezés deklarálása";
const groupItemsBy = "Elemek csoportosítási szempontja";
const groupFieldName = "Mezőnév csoportosítása";
const tagFieldName = "Mezőnév címkézése";
const noTitleTagErrorMsg = "Címet kell adnia az elemnek, és címkéket kell megadnia, hogy a térkép kereshető legyen.";
const noTitleErrorMsg = "Meg kell adnia az elem címét.";
const noTagErrorMsg = "Legalább egy címkét meg kell adnia, hogy az elem kereshető legyen.";
const error = "Hiba";
const warning = "Figyelmeztetés";
const success = "Sikerült";
const details = "Részletek:";
const tryAgain = "Próbálja meg újra";
const toolModeler = {
	save: "Mentés",
	editProperties: "Tulajdonságok szerkesztése",
	saveAs: "Mentés másként",
	savingNotification: "Elem módosításainak mentése...",
	savingTitle: "Mentés folyamatban",
	saveFailedMessage: "Nem sikerült a módosítások mentése.",
	saveWithErrorsMessage: "A módosításokat a következő hibákkal sikerült menteni.",
	viewItemMessage: "A mentett elem megtekintése",
	here: "itt.",
	itemCreatedMessage: "Új elem jött létre.",
	clickToViewItemMessage: "Kattintson az OK gombra az elem részleteit tartalmazó oldal megtekintéséhez; a folytatáshoz kattintson a Mégse gombra.",
	readingFailed: "Nem sikerült a kiválasztott raszterfunkció-sablon betöltése.",
	failedToLoadXML: "Nem sikerült a kiválasztott raszterfunkció-sablon XML-formátumú betöltése.",
	learnMore: "További információ",
	overwriteTitle: "Felülírás jóváhagyása",
	overwriteMessage: "Szeretné felülírni a meglévő elemet?",
	overwriteSuccessMessage: "Az elem frissült."
};
const toolEditor = {
	run: "Futtatás",
	save: "Mentés",
	deleteSelected: "Kiválasztott elemek törlése",
	addRaster: "Raszter hozzáadása",
	addScalar: "Skalár hozzáadása",
	layout: "Automatikus elrendezés",
	errorTitle: "Hiba",
	invalidToolMessage: "A raszterfunkció-sablon érvénytelen.",
	out: "Ki",
	zoomIn: "Nagyítás",
	zoomOut: "Kicsinyítés",
	zoomToFit: "Ablakhoz igazítás",
	panOn: "Váltás pásztázás módra",
	panOff: "Pásztázás mód kikapcsolása",
	defaultModelName: "Eszközmodell",
	defaultRasterName: "Raszter"
};
const toolDetailsEditor = {
	defaultToolName: "Raszterfunkció-sablon",
	defaultToolDescription: "Adjon hozzá egy rövid összefoglalót a sablonról.",
	defaultHelpText: "Kattintson a súgóikonra a súgó szövegének szerkesztéséhez",
	editHelpTitle: "Szerkesztés, Súgó",
	saveLabel: "Mentés",
	cancelLabel: "Mégse",
	thumbnail: {
		wrongImageType: "Érvénytelen képtípust választott ki",
		notAvailable: "A bélyegkép nem érhető el",
		loadError: "Nem sikerült betölteni a képet",
		chooseFile: "Fájl választásához kattintson"
	}
};
const saveUtils = {
	thumbnail: "Bélyegkép",
	sharing: "Megosztás"
};
const close = "Bezárás";
const unsavedWarningExisting = "Szeretné menteni a(z) <b>${itemTitle}</b> elem módosításait?";
const unsavedWarningNew = "Szeretné menteni a módosításokat?";
const saveAs = "Mentés másként";
const dontSave = "Ne mentse";
const unsavedTitle = "Nem mentett módosítások";
const invalidRFTMessage = "A létrehozott raszterfunkció-sablon érvénytelen.";
const errorTitle = "Hiba";
const breadcrumb = "Raszteres funkciószerkesztő";
const breadcrumbEditor = "Tartalom > Raszteres funkciószerkesztő";
const viewerModeTitle = "Csak olvasható";
const viewerModeMessage = "A raszterfunkció-sablon elem csak olvasható. A módosítások nem menthetők.";
const userStartDirection = "Egy raszterfunkció-sablon létrehozásának elkezdéséhez válasszon funkciót.";
const selectFunction = "Funkció hozzáadása";
const deselectFunction = "Funkció eltávolítása";
const dialogTitle = "Rendszer";
const category = "Kategóriák";
const search = "Raszterfunkciók keresése";
const categoryNames = {
	analysis: "Elemzés",
	appearance: "Megjelenés",
	classification: "Osztályozás",
	conversion: "Átváltás",
	correction: "Javítás",
	dataManagement: "Adatkezelés",
	distance: "Távolság",
	distanceLegacy: "Távolság (régi)",
	hydrology: "Hidrológia",
	math: "Matematikai",
	mathConditional: "Matematikai: Feltételes",
	mathLogical: "Matematikai: Logikai",
	mathTrigonometric: "Matematikai: Trigonometrikus",
	reclass: "Újraosztályozás",
	statistical: "Statisztikai",
	surface: "Felszín"
};
const commonStrings_hu = {
	ok: ok,
	cancel: cancel,
	enterURL: enterURL,
	serviceURL: serviceURL,
	selectRaster: selectRaster,
	failedToLoadLayer: failedToLoadLayer,
	loadingLayer: loadingLayer,
	selectFeature: selectFeature,
	enterFURL: enterFURL,
	addRaster: addRaster,
	addScalar: addScalar,
	raster: raster,
	scalar: scalar,
	defaultModelName: defaultModelName,
	general: general,
	parameters: parameters,
	variables: variables,
	name: name,
	description: description,
	parameter: parameter,
	isPublic: isPublic,
	isDataset: isDataset,
	unknownPixelType: unknownPixelType,
	outputPixelType: outputPixelType,
	u8PixelType: u8PixelType,
	s8PixelType: s8PixelType,
	u16PixelType: u16PixelType,
	s16PixelType: s16PixelType,
	u32PixelType: u32PixelType,
	s32PixelType: s32PixelType,
	f32PixelType: f32PixelType,
	f64PixelType: f64PixelType,
	properties: properties,
	multidimensionalRules: multidimensionalRules,
	matchVariables: matchVariables,
	unionDimensions: unionDimensions,
	rasterFunctionEditor: rasterFunctionEditor,
	rfxLicenseInfo: rfxLicenseInfo,
	rasterFunctions: rasterFunctions,
	copy: copy,
	save: save,
	title: title,
	folder: folder,
	tags: tags,
	savingMessage: savingMessage,
	shareWith: shareWith,
	share: share,
	setSharingLevel: setSharingLevel,
	setGroupSharing: setGroupSharing,
	owner: owner,
	organization: organization,
	everyone: everyone,
	groups: groups,
	type: type,
	mosaic: mosaic,
	itemGroup: itemGroup,
	item: item,
	definitionQuery: definitionQuery,
	groupItemsBy: groupItemsBy,
	groupFieldName: groupFieldName,
	tagFieldName: tagFieldName,
	noTitleTagErrorMsg: noTitleTagErrorMsg,
	noTitleErrorMsg: noTitleErrorMsg,
	noTagErrorMsg: noTagErrorMsg,
	error: error,
	warning: warning,
	success: success,
	details: details,
	tryAgain: tryAgain,
	toolModeler: toolModeler,
	toolEditor: toolEditor,
	toolDetailsEditor: toolDetailsEditor,
	saveUtils: saveUtils,
	close: close,
	unsavedWarningExisting: unsavedWarningExisting,
	unsavedWarningNew: unsavedWarningNew,
	saveAs: saveAs,
	dontSave: dontSave,
	unsavedTitle: unsavedTitle,
	invalidRFTMessage: invalidRFTMessage,
	errorTitle: errorTitle,
	breadcrumb: breadcrumb,
	breadcrumbEditor: breadcrumbEditor,
	viewerModeTitle: viewerModeTitle,
	viewerModeMessage: viewerModeMessage,
	userStartDirection: userStartDirection,
	selectFunction: selectFunction,
	deselectFunction: deselectFunction,
	dialogTitle: dialogTitle,
	category: category,
	search: search,
	categoryNames: categoryNames
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (commonStrings_hu);


//# sourceMappingURL=common-strings.hu-6eebefc3.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,