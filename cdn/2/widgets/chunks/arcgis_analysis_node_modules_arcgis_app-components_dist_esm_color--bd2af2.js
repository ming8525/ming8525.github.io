"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_color--bd2af2"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/color-16791b45.js":
/*!***********************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/color-16791b45.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ alphaToTransparency),
/* harmony export */   c: () => (/* binding */ create),
/* harmony export */   i: () => (/* binding */ isNullEquivalentColor),
/* harmony export */   t: () => (/* binding */ transparencyToAlpha)
/* harmony export */ });
/* harmony import */ var _symbolUtils_f207d979_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./symbolUtils-f207d979.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/symbolUtils-f207d979.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */


// we allow users to enter 1 decimal as a transparency % value
const alphaToTransparency = (alpha) => Number(((1 - alpha) * 100).toFixed(1));
const transparencyToAlpha = (transparency) => Number((1 - transparency / 100).toFixed(3));
const nullEquivalentColor = [0, 0, 0, 0];
function create(color, json = false) {
    const colorToCreate = color !== null && color !== void 0 ? color : nullEquivalentColor;
    return json ? _symbolUtils_f207d979_js__WEBPACK_IMPORTED_MODULE_0__.e.Color.fromJSON(colorToCreate) : new _symbolUtils_f207d979_js__WEBPACK_IMPORTED_MODULE_0__.e.Color(colorToCreate);
}
function isNullEquivalentColor({ r, g, b, a }) {
    return r === 0 && g === 0 && b === 0 && a === 0;
}



//# sourceMappingURL=color-16791b45.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/colorRampUtils-8d9a3bed.js":
/*!********************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/colorRampUtils-8d9a3bed.js ***!
  \********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   A: () => (/* binding */ markerPlacementStepMin),
/* harmony export */   B: () => (/* binding */ markerPlacementRandomnessMax),
/* harmony export */   C: () => (/* binding */ CSS),
/* harmony export */   D: () => (/* binding */ markerPlacementRandomnessMin),
/* harmony export */   E: () => (/* binding */ expand2D),
/* harmony export */   F: () => (/* binding */ categoriesToTags),
/* harmony export */   a: () => (/* binding */ maxWidthInPx),
/* harmony export */   b: () => (/* binding */ supportedStyles),
/* harmony export */   c: () => (/* binding */ defaultVisibleColorSectionParts),
/* harmony export */   d: () => (/* binding */ defaultVisibleMarkerSectionParts),
/* harmony export */   e: () => (/* binding */ defaultVisibleColorRampSectionParts),
/* harmony export */   f: () => (/* binding */ flipColorRampStops),
/* harmony export */   g: () => (/* binding */ defaultVisibleExtraStrokeSectionParts),
/* harmony export */   h: () => (/* binding */ defaultVisibleStrokeSectionParts),
/* harmony export */   i: () => (/* binding */ maxDisplayedSymbolLayers),
/* harmony export */   j: () => (/* binding */ colorStorageId),
/* harmony export */   k: () => (/* binding */ opacityMax),
/* harmony export */   l: () => (/* binding */ rotationMax),
/* harmony export */   m: () => (/* binding */ minWidthInPx),
/* harmony export */   n: () => (/* binding */ sizeMin),
/* harmony export */   o: () => (/* binding */ opacityMin),
/* harmony export */   p: () => (/* binding */ pointPreviewOptions),
/* harmony export */   q: () => (/* binding */ sizeMax),
/* harmony export */   r: () => (/* binding */ rotationMin),
/* harmony export */   s: () => (/* binding */ supportedArrows),
/* harmony export */   t: () => (/* binding */ hatchFillOffsetMax),
/* harmony export */   u: () => (/* binding */ hatchFillOffsetMin),
/* harmony export */   v: () => (/* binding */ hatchFillSeparationMax),
/* harmony export */   w: () => (/* binding */ hatchFillSeparationMin),
/* harmony export */   x: () => (/* binding */ animationDurationMax),
/* harmony export */   y: () => (/* binding */ animationDurationMin),
/* harmony export */   z: () => (/* binding */ markerPlacementStepMax)
/* harmony export */ });
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */
const CSS = {
    customSymbolContent: "custom-symbol-content",
    autoAdjustLabel: "auto-adjust-label",
    styleDropdown: "style-dropdown",
    arrowDropdown: "arrow-dropdown",
    iconDropdown: "icon-dropdown",
    iconDropdownSelected: "icon-dropdown--selected",
    iconDropdownItemContent: "icon-dropdown-item-content",
    colorRampFlipper: "color-ramp-flipper",
    scroller: "scroller",
    colorRampSelection: "color-ramp-selection",
    sectionToggleDisabled: "section-toggle--disabled",
    autoAdjustCheckbox: "auto-adjust-checkbox",
    contentGroup: "content-group",
    colorLockedInfo: "color-locked-info",
    message: "message",
    // symbol button
    container: "container",
    label: "label",
    openIcon: "open-icon",
    symbol: "symbol",
    changeSymbolTrigger: "change-symbol-trigger"
};
const categoriesToTags = {
    all: ["*"],
    light: ["light"],
    dark: ["dark"],
    redsAndYellows: ["oranges", "reds", "yellows"],
    greens: ["greens"],
    blues: ["blues"],
    purplesAndPinks: ["purples", "pinks"],
    browns: ["browns"],
    grays: ["grays"],
    bright: ["bright"],
    subdued: ["subdued"],
    colorblindFriendly: ["colorblind-friendly"]
};
const supportedArrows = ["none", "begin", "end", "begin-end"];
const supportedStyles = [
    "solid",
    "dash",
    "dot",
    "dash-dot",
    "long-dash-dot-dot",
    "short-dash",
    "short-dot",
    "short-dash-dot",
    "short-dash-dot-dot",
    "long-dash",
    "long-dash-dot"
];
const defaultVisibleMarkerSectionParts = {
    size: true,
    preview: true,
    rotation: true
};
const defaultVisibleExtraStrokeSectionParts = {
    style: true,
    arrow: true,
    width: true,
    autoStrokeAdjust: false
};
const defaultVisibleColorSectionParts = {
    suggestedColors: true,
    customColor: true,
    transparency: true
};
const defaultVisibleColorRampSectionParts = {
    colorRamps: true,
    transparency: true
};
const defaultVisibleStrokeSectionParts = {
    extra: true
};
const colorStorageId = "arcgis-symbol-styler-storage-colors";
const pointPreviewOptions = {
    size: 24,
    maxSize: 24
};
const opacityMax = 100;
const opacityMin = 0;
const maxWidthInPx = 18;
const minWidthInPx = 0;
const rotationMax = 360;
const rotationMin = 0;
const sizeMax = 150;
const sizeMin = 1;
const markerPlacementStepMax = 200;
const markerPlacementStepMin = 0;
const markerPlacementRandomnessMax = 100;
const markerPlacementRandomnessMin = 0;
const maxDisplayedSymbolLayers = 10;
const hatchFillSeparationMax = 200;
const hatchFillSeparationMin = 0;
const hatchFillOffsetMax = 100;
const hatchFillOffsetMin = 0;
const animationDurationMax = 120;
const animationDurationMin = 0;

function flipColorRampStops(stops, is2d = false) {
    return is2d ? flipFlattened2DRamp(stops) : stops.slice().reverse();
}
function flipFlattened2DRamp(flat2dStops) {
    const numClasses = Math.sqrt(flat2dStops.length);
    const ramp2d = expand2D(flat2dStops);
    const oldRamp = ramp2d.reverse();
    const flippedRamp = [];
    // Flip 2D matrix of colors by 90 degrees in clockwise direction.
    for (let i = 0; i < numClasses; i++) {
        const newRow = [];
        oldRamp.forEach((oldRow) => newRow.push(oldRow[i]));
        flippedRamp.push(newRow);
    }
    return flatten2D(flippedRamp).reverse();
}
function expand2D(stops, focus) {
    let expandedArray = [];
    const numClasses = Math.sqrt(stops.length);
    // Focus decides whether we reverse the outer/inner arrays or not.
    const codes = (focus || "HH").split("");
    const startRowCode = codes[0];
    const startColCode = codes[1];
    const reverseEachRow = startColCode !== "H";
    for (let i = 0; i < numClasses; i++) {
        let row = [];
        for (let j = 0; j < numClasses; j++) {
            const index = i * numClasses + j;
            row.push(stops[index]);
        }
        if (reverseEachRow) {
            row.reverse();
        }
        expandedArray.push(row);
    }
    if (startRowCode === "L") {
        expandedArray.reverse();
    }
    return expandedArray;
}
function flatten2D(array2d, focus) {
    // Returns a flattened array from the given 2d array.
    // array2d is assumed to have the layout structure outlined at:
    // renderers/utils:getClassValuesForRelationship.
    // Order of elements in the output array is determined by "focus".
    // "focus" can be: HH, HL, LH or LL. Default is "HH".
    let flatArray = [];
    // clone to avoid modifying source data
    array2d = array2d.slice().map((colors) => colors.slice());
    // Focus decides whether we reverse the outer/inner arrays or not.
    const codes = (focus || "HH").split(""), startRowCode = codes[0], startColCode = codes[1];
    if (startRowCode === "L") {
        array2d.reverse();
    }
    const reverseEachRow = startColCode === "H";
    array2d.forEach((row) => {
        if (reverseEachRow) {
            row.slice().reverse();
        }
        flatArray = flatArray.concat(row);
    });
    return flatArray;
}



//# sourceMappingURL=colorRampUtils-8d9a3bed.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-ef0e54b2.js":
/*!******************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-ef0e54b2.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   C: () => (/* binding */ CSS_UTILITY),
/* harmony export */   a: () => (/* binding */ formatDate),
/* harmony export */   b: () => (/* binding */ formatPlural),
/* harmony export */   f: () => (/* binding */ formatNumber),
/* harmony export */   g: () => (/* binding */ getElementDir),
/* harmony export */   l: () => (/* binding */ languageMap)
/* harmony export */ });
/* harmony import */ var _loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./loadModules-b4ac1247.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-b4ac1247.js");
/* harmony import */ var _dom_4d367677_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dom-4d367677.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-4d367677.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */



const languageMap = new Map([
    ["ar", "ar"],
    ["bg", "bg"],
    ["bs", "bs"],
    ["ca", "ca"],
    ["cs", "cs"],
    ["da", "da"],
    ["de", "de"],
    ["el", "el"],
    ["en", "en"],
    ["es", "es"],
    ["et", "et"],
    ["fi", "fi"],
    ["fr", "fr"],
    ["he", "he"],
    ["hr", "hr"],
    ["hu", "hu"],
    ["id", "id"],
    ["it", "it"],
    ["ja", "ja"],
    ["ko", "ko"],
    ["lt", "lt"],
    ["lv", "lv"],
    ["nb", "nb"],
    ["nl", "nl"],
    ["pl", "pl"],
    ["pt-br", "pt-BR"],
    ["pt-pt", "pt-PT"],
    ["ro", "ro"],
    ["ru", "ru"],
    ["sk", "sk"],
    ["sl", "sl"],
    ["sr", "sr"],
    ["sv", "sv"],
    ["th", "th"],
    ["tr", "tr"],
    ["uk", "uk"],
    ["vi", "vi"],
    ["zh-cn", "zh-CN"],
    ["zh-hk", "zh-HK"],
    ["zh-tw", "zh-TW"]
]);
// rtl
function getElementDir(el) {
    return getElementProp(el, "dir", "ltr");
}
function getElementProp(el, prop, value) {
    const closestWithProp = (0,_dom_4d367677_js__WEBPACK_IMPORTED_MODULE_1__.c)(el, `[${prop}]`);
    return closestWithProp ? closestWithProp.getAttribute(prop) : value;
}
// css
const CSS_UTILITY = {
    rtl: "arcgis--rtl"
};
async function formatNumber(number, options) {
    const { api, type, places } = options || {};
    if (api === 4) {
        const [intl] = await (0,_loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_0__.l)(["esri/intl"]);
        const numberFormatIntlOptions = intl.convertNumberFormatToIntlOptions({
            places,
            style: type,
            digitSeparator: true
        });
        return intl.formatNumber(number, Object.assign(Object.assign({}, numberFormatIntlOptions), { style: type }));
    }
    const [dojoNumber] = await (0,_loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_0__.l)(["dojo/number"]);
    return dojoNumber.format(number, {
        type,
        places,
        pattern: options === null || options === void 0 ? void 0 : options.pattern
    });
}
const cache = {};
function formatDate(date) {
    const lang = document.documentElement.lang;
    const dayShortMonthYear = {
        year: "numeric",
        month: "short",
        day: "numeric"
    };
    if (!cache[lang]) {
        cache[lang] = new Intl.DateTimeFormat(document.documentElement.lang, dayShortMonthYear);
    }
    return cache[lang].format(date);
}
function formatPlural(lang, stringObj, number) {
    const singles = ["id", "ja", "ko", "th", "vi", "zh-cn", "zh-hk", "zh-tw"];
    const likeEnglish = [
        "en",
        "ca",
        "da",
        "de",
        "el",
        "es",
        "et",
        "fi",
        "hi",
        "hu",
        "it",
        "nb",
        "nl",
        "pt-pt",
        "sv",
        "tr"
    ];
    const locale = lang !== null && lang !== void 0 ? lang : "en";
    // if the number is one, or it is a "simple" language, return the 1 string
    if (number === 1 || singles.includes(locale)) {
        return stringObj.single.replace("${number}", "1");
    }
    // if the number is not 1 and the language uses the same pluralization strategy as english,
    // return the multiple string
    if (number !== 1 && likeEnglish.includes(locale)) {
        return stringObj.multiple.replace("${number}", `${number}`);
    }
    // if none of the above worked, return the "unknown" string
    return stringObj.unknown.replace("${number}", `${number}`);
}



//# sourceMappingURL=languageUtil-ef0e54b2.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2lkZ2V0cy9jaHVua3MvYXJjZ2lzX2FuYWx5c2lzX25vZGVfbW9kdWxlc19hcmNnaXNfYXBwLWNvbXBvbmVudHNfZGlzdF9lc21fY29sb3ItLWJkMmFmMi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQzZEOztBQUU3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsdURBQVcscUNBQXFDLHVEQUFXO0FBQzdFO0FBQ0EsaUNBQWlDLFlBQVk7QUFDN0M7QUFDQTs7QUFFdUc7O0FBRXZHOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNwQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixnQkFBZ0I7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixnQkFBZ0I7QUFDcEM7QUFDQSx3QkFBd0IsZ0JBQWdCO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVpMEI7O0FBRWowQjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDektBO0FBQ0E7QUFDQTtBQUNBO0FBQzZEO0FBQ2M7O0FBRTNFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsbURBQWlDLFNBQVMsS0FBSztBQUMzRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksb0JBQW9CO0FBQ2hDO0FBQ0EsNkJBQTZCLDJEQUFXO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULHVFQUF1RSw4QkFBOEIsYUFBYTtBQUNsSDtBQUNBLCtCQUErQiwyREFBVztBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJDQUEyQyxPQUFPO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkNBQTZDLE9BQU8sTUFBTSxPQUFPO0FBQ2pFO0FBQ0E7QUFDQSx3Q0FBd0MsT0FBTyxNQUFNLE9BQU87QUFDNUQ7O0FBRXlIOztBQUV6SCIsInNvdXJjZXMiOlsid2VicGFjazovL2V4Yi1jbGllbnQvLi9leHRlbnNpb25zL3dpZGdldHMvYXJjZ2lzL2FuYWx5c2lzL25vZGVfbW9kdWxlcy9AYXJjZ2lzL2FwcC1jb21wb25lbnRzL2Rpc3QvZXNtL2NvbG9yLTE2NzkxYjQ1LmpzIiwid2VicGFjazovL2V4Yi1jbGllbnQvLi9leHRlbnNpb25zL3dpZGdldHMvYXJjZ2lzL2FuYWx5c2lzL25vZGVfbW9kdWxlcy9AYXJjZ2lzL2FwcC1jb21wb25lbnRzL2Rpc3QvZXNtL2NvbG9yUmFtcFV0aWxzLThkOWEzYmVkLmpzIiwid2VicGFjazovL2V4Yi1jbGllbnQvLi9leHRlbnNpb25zL3dpZGdldHMvYXJjZ2lzL2FuYWx5c2lzL25vZGVfbW9kdWxlcy9AYXJjZ2lzL2FwcC1jb21wb25lbnRzL2Rpc3QvZXNtL2xhbmd1YWdlVXRpbC1lZjBlNTRiMi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEFsbCBtYXRlcmlhbCBjb3B5cmlnaHQgRVNSSSwgQWxsIFJpZ2h0cyBSZXNlcnZlZCwgdW5sZXNzIG90aGVyd2lzZSBzcGVjaWZpZWQuXG4gKiB2NC4wLjU4XG4gKi9cbmltcG9ydCB7IGUgYXMgZXNyaU1vZHVsZXMgfSBmcm9tICcuL3N5bWJvbFV0aWxzLWYyMDdkOTc5LmpzJztcblxuLy8gd2UgYWxsb3cgdXNlcnMgdG8gZW50ZXIgMSBkZWNpbWFsIGFzIGEgdHJhbnNwYXJlbmN5ICUgdmFsdWVcbmNvbnN0IGFscGhhVG9UcmFuc3BhcmVuY3kgPSAoYWxwaGEpID0+IE51bWJlcigoKDEgLSBhbHBoYSkgKiAxMDApLnRvRml4ZWQoMSkpO1xuY29uc3QgdHJhbnNwYXJlbmN5VG9BbHBoYSA9ICh0cmFuc3BhcmVuY3kpID0+IE51bWJlcigoMSAtIHRyYW5zcGFyZW5jeSAvIDEwMCkudG9GaXhlZCgzKSk7XG5jb25zdCBudWxsRXF1aXZhbGVudENvbG9yID0gWzAsIDAsIDAsIDBdO1xuZnVuY3Rpb24gY3JlYXRlKGNvbG9yLCBqc29uID0gZmFsc2UpIHtcbiAgICBjb25zdCBjb2xvclRvQ3JlYXRlID0gY29sb3IgIT09IG51bGwgJiYgY29sb3IgIT09IHZvaWQgMCA/IGNvbG9yIDogbnVsbEVxdWl2YWxlbnRDb2xvcjtcbiAgICByZXR1cm4ganNvbiA/IGVzcmlNb2R1bGVzLkNvbG9yLmZyb21KU09OKGNvbG9yVG9DcmVhdGUpIDogbmV3IGVzcmlNb2R1bGVzLkNvbG9yKGNvbG9yVG9DcmVhdGUpO1xufVxuZnVuY3Rpb24gaXNOdWxsRXF1aXZhbGVudENvbG9yKHsgciwgZywgYiwgYSB9KSB7XG4gICAgcmV0dXJuIHIgPT09IDAgJiYgZyA9PT0gMCAmJiBiID09PSAwICYmIGEgPT09IDA7XG59XG5cbmV4cG9ydCB7IGFscGhhVG9UcmFuc3BhcmVuY3kgYXMgYSwgY3JlYXRlIGFzIGMsIGlzTnVsbEVxdWl2YWxlbnRDb2xvciBhcyBpLCB0cmFuc3BhcmVuY3lUb0FscGhhIGFzIHQgfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29sb3ItMTY3OTFiNDUuanMubWFwIiwiLyohXG4gKiBBbGwgbWF0ZXJpYWwgY29weXJpZ2h0IEVTUkksIEFsbCBSaWdodHMgUmVzZXJ2ZWQsIHVubGVzcyBvdGhlcndpc2Ugc3BlY2lmaWVkLlxuICogdjQuMC41OFxuICovXG5jb25zdCBDU1MgPSB7XG4gICAgY3VzdG9tU3ltYm9sQ29udGVudDogXCJjdXN0b20tc3ltYm9sLWNvbnRlbnRcIixcbiAgICBhdXRvQWRqdXN0TGFiZWw6IFwiYXV0by1hZGp1c3QtbGFiZWxcIixcbiAgICBzdHlsZURyb3Bkb3duOiBcInN0eWxlLWRyb3Bkb3duXCIsXG4gICAgYXJyb3dEcm9wZG93bjogXCJhcnJvdy1kcm9wZG93blwiLFxuICAgIGljb25Ecm9wZG93bjogXCJpY29uLWRyb3Bkb3duXCIsXG4gICAgaWNvbkRyb3Bkb3duU2VsZWN0ZWQ6IFwiaWNvbi1kcm9wZG93bi0tc2VsZWN0ZWRcIixcbiAgICBpY29uRHJvcGRvd25JdGVtQ29udGVudDogXCJpY29uLWRyb3Bkb3duLWl0ZW0tY29udGVudFwiLFxuICAgIGNvbG9yUmFtcEZsaXBwZXI6IFwiY29sb3ItcmFtcC1mbGlwcGVyXCIsXG4gICAgc2Nyb2xsZXI6IFwic2Nyb2xsZXJcIixcbiAgICBjb2xvclJhbXBTZWxlY3Rpb246IFwiY29sb3ItcmFtcC1zZWxlY3Rpb25cIixcbiAgICBzZWN0aW9uVG9nZ2xlRGlzYWJsZWQ6IFwic2VjdGlvbi10b2dnbGUtLWRpc2FibGVkXCIsXG4gICAgYXV0b0FkanVzdENoZWNrYm94OiBcImF1dG8tYWRqdXN0LWNoZWNrYm94XCIsXG4gICAgY29udGVudEdyb3VwOiBcImNvbnRlbnQtZ3JvdXBcIixcbiAgICBjb2xvckxvY2tlZEluZm86IFwiY29sb3ItbG9ja2VkLWluZm9cIixcbiAgICBtZXNzYWdlOiBcIm1lc3NhZ2VcIixcbiAgICAvLyBzeW1ib2wgYnV0dG9uXG4gICAgY29udGFpbmVyOiBcImNvbnRhaW5lclwiLFxuICAgIGxhYmVsOiBcImxhYmVsXCIsXG4gICAgb3Blbkljb246IFwib3Blbi1pY29uXCIsXG4gICAgc3ltYm9sOiBcInN5bWJvbFwiLFxuICAgIGNoYW5nZVN5bWJvbFRyaWdnZXI6IFwiY2hhbmdlLXN5bWJvbC10cmlnZ2VyXCJcbn07XG5jb25zdCBjYXRlZ29yaWVzVG9UYWdzID0ge1xuICAgIGFsbDogW1wiKlwiXSxcbiAgICBsaWdodDogW1wibGlnaHRcIl0sXG4gICAgZGFyazogW1wiZGFya1wiXSxcbiAgICByZWRzQW5kWWVsbG93czogW1wib3Jhbmdlc1wiLCBcInJlZHNcIiwgXCJ5ZWxsb3dzXCJdLFxuICAgIGdyZWVuczogW1wiZ3JlZW5zXCJdLFxuICAgIGJsdWVzOiBbXCJibHVlc1wiXSxcbiAgICBwdXJwbGVzQW5kUGlua3M6IFtcInB1cnBsZXNcIiwgXCJwaW5rc1wiXSxcbiAgICBicm93bnM6IFtcImJyb3duc1wiXSxcbiAgICBncmF5czogW1wiZ3JheXNcIl0sXG4gICAgYnJpZ2h0OiBbXCJicmlnaHRcIl0sXG4gICAgc3ViZHVlZDogW1wic3ViZHVlZFwiXSxcbiAgICBjb2xvcmJsaW5kRnJpZW5kbHk6IFtcImNvbG9yYmxpbmQtZnJpZW5kbHlcIl1cbn07XG5jb25zdCBzdXBwb3J0ZWRBcnJvd3MgPSBbXCJub25lXCIsIFwiYmVnaW5cIiwgXCJlbmRcIiwgXCJiZWdpbi1lbmRcIl07XG5jb25zdCBzdXBwb3J0ZWRTdHlsZXMgPSBbXG4gICAgXCJzb2xpZFwiLFxuICAgIFwiZGFzaFwiLFxuICAgIFwiZG90XCIsXG4gICAgXCJkYXNoLWRvdFwiLFxuICAgIFwibG9uZy1kYXNoLWRvdC1kb3RcIixcbiAgICBcInNob3J0LWRhc2hcIixcbiAgICBcInNob3J0LWRvdFwiLFxuICAgIFwic2hvcnQtZGFzaC1kb3RcIixcbiAgICBcInNob3J0LWRhc2gtZG90LWRvdFwiLFxuICAgIFwibG9uZy1kYXNoXCIsXG4gICAgXCJsb25nLWRhc2gtZG90XCJcbl07XG5jb25zdCBkZWZhdWx0VmlzaWJsZU1hcmtlclNlY3Rpb25QYXJ0cyA9IHtcbiAgICBzaXplOiB0cnVlLFxuICAgIHByZXZpZXc6IHRydWUsXG4gICAgcm90YXRpb246IHRydWVcbn07XG5jb25zdCBkZWZhdWx0VmlzaWJsZUV4dHJhU3Ryb2tlU2VjdGlvblBhcnRzID0ge1xuICAgIHN0eWxlOiB0cnVlLFxuICAgIGFycm93OiB0cnVlLFxuICAgIHdpZHRoOiB0cnVlLFxuICAgIGF1dG9TdHJva2VBZGp1c3Q6IGZhbHNlXG59O1xuY29uc3QgZGVmYXVsdFZpc2libGVDb2xvclNlY3Rpb25QYXJ0cyA9IHtcbiAgICBzdWdnZXN0ZWRDb2xvcnM6IHRydWUsXG4gICAgY3VzdG9tQ29sb3I6IHRydWUsXG4gICAgdHJhbnNwYXJlbmN5OiB0cnVlXG59O1xuY29uc3QgZGVmYXVsdFZpc2libGVDb2xvclJhbXBTZWN0aW9uUGFydHMgPSB7XG4gICAgY29sb3JSYW1wczogdHJ1ZSxcbiAgICB0cmFuc3BhcmVuY3k6IHRydWVcbn07XG5jb25zdCBkZWZhdWx0VmlzaWJsZVN0cm9rZVNlY3Rpb25QYXJ0cyA9IHtcbiAgICBleHRyYTogdHJ1ZVxufTtcbmNvbnN0IGNvbG9yU3RvcmFnZUlkID0gXCJhcmNnaXMtc3ltYm9sLXN0eWxlci1zdG9yYWdlLWNvbG9yc1wiO1xuY29uc3QgcG9pbnRQcmV2aWV3T3B0aW9ucyA9IHtcbiAgICBzaXplOiAyNCxcbiAgICBtYXhTaXplOiAyNFxufTtcbmNvbnN0IG9wYWNpdHlNYXggPSAxMDA7XG5jb25zdCBvcGFjaXR5TWluID0gMDtcbmNvbnN0IG1heFdpZHRoSW5QeCA9IDE4O1xuY29uc3QgbWluV2lkdGhJblB4ID0gMDtcbmNvbnN0IHJvdGF0aW9uTWF4ID0gMzYwO1xuY29uc3Qgcm90YXRpb25NaW4gPSAwO1xuY29uc3Qgc2l6ZU1heCA9IDE1MDtcbmNvbnN0IHNpemVNaW4gPSAxO1xuY29uc3QgbWFya2VyUGxhY2VtZW50U3RlcE1heCA9IDIwMDtcbmNvbnN0IG1hcmtlclBsYWNlbWVudFN0ZXBNaW4gPSAwO1xuY29uc3QgbWFya2VyUGxhY2VtZW50UmFuZG9tbmVzc01heCA9IDEwMDtcbmNvbnN0IG1hcmtlclBsYWNlbWVudFJhbmRvbW5lc3NNaW4gPSAwO1xuY29uc3QgbWF4RGlzcGxheWVkU3ltYm9sTGF5ZXJzID0gMTA7XG5jb25zdCBoYXRjaEZpbGxTZXBhcmF0aW9uTWF4ID0gMjAwO1xuY29uc3QgaGF0Y2hGaWxsU2VwYXJhdGlvbk1pbiA9IDA7XG5jb25zdCBoYXRjaEZpbGxPZmZzZXRNYXggPSAxMDA7XG5jb25zdCBoYXRjaEZpbGxPZmZzZXRNaW4gPSAwO1xuY29uc3QgYW5pbWF0aW9uRHVyYXRpb25NYXggPSAxMjA7XG5jb25zdCBhbmltYXRpb25EdXJhdGlvbk1pbiA9IDA7XG5cbmZ1bmN0aW9uIGZsaXBDb2xvclJhbXBTdG9wcyhzdG9wcywgaXMyZCA9IGZhbHNlKSB7XG4gICAgcmV0dXJuIGlzMmQgPyBmbGlwRmxhdHRlbmVkMkRSYW1wKHN0b3BzKSA6IHN0b3BzLnNsaWNlKCkucmV2ZXJzZSgpO1xufVxuZnVuY3Rpb24gZmxpcEZsYXR0ZW5lZDJEUmFtcChmbGF0MmRTdG9wcykge1xuICAgIGNvbnN0IG51bUNsYXNzZXMgPSBNYXRoLnNxcnQoZmxhdDJkU3RvcHMubGVuZ3RoKTtcbiAgICBjb25zdCByYW1wMmQgPSBleHBhbmQyRChmbGF0MmRTdG9wcyk7XG4gICAgY29uc3Qgb2xkUmFtcCA9IHJhbXAyZC5yZXZlcnNlKCk7XG4gICAgY29uc3QgZmxpcHBlZFJhbXAgPSBbXTtcbiAgICAvLyBGbGlwIDJEIG1hdHJpeCBvZiBjb2xvcnMgYnkgOTAgZGVncmVlcyBpbiBjbG9ja3dpc2UgZGlyZWN0aW9uLlxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtQ2xhc3NlczsgaSsrKSB7XG4gICAgICAgIGNvbnN0IG5ld1JvdyA9IFtdO1xuICAgICAgICBvbGRSYW1wLmZvckVhY2goKG9sZFJvdykgPT4gbmV3Um93LnB1c2gob2xkUm93W2ldKSk7XG4gICAgICAgIGZsaXBwZWRSYW1wLnB1c2gobmV3Um93KTtcbiAgICB9XG4gICAgcmV0dXJuIGZsYXR0ZW4yRChmbGlwcGVkUmFtcCkucmV2ZXJzZSgpO1xufVxuZnVuY3Rpb24gZXhwYW5kMkQoc3RvcHMsIGZvY3VzKSB7XG4gICAgbGV0IGV4cGFuZGVkQXJyYXkgPSBbXTtcbiAgICBjb25zdCBudW1DbGFzc2VzID0gTWF0aC5zcXJ0KHN0b3BzLmxlbmd0aCk7XG4gICAgLy8gRm9jdXMgZGVjaWRlcyB3aGV0aGVyIHdlIHJldmVyc2UgdGhlIG91dGVyL2lubmVyIGFycmF5cyBvciBub3QuXG4gICAgY29uc3QgY29kZXMgPSAoZm9jdXMgfHwgXCJISFwiKS5zcGxpdChcIlwiKTtcbiAgICBjb25zdCBzdGFydFJvd0NvZGUgPSBjb2Rlc1swXTtcbiAgICBjb25zdCBzdGFydENvbENvZGUgPSBjb2Rlc1sxXTtcbiAgICBjb25zdCByZXZlcnNlRWFjaFJvdyA9IHN0YXJ0Q29sQ29kZSAhPT0gXCJIXCI7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW1DbGFzc2VzOyBpKyspIHtcbiAgICAgICAgbGV0IHJvdyA9IFtdO1xuICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IG51bUNsYXNzZXM7IGorKykge1xuICAgICAgICAgICAgY29uc3QgaW5kZXggPSBpICogbnVtQ2xhc3NlcyArIGo7XG4gICAgICAgICAgICByb3cucHVzaChzdG9wc1tpbmRleF0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXZlcnNlRWFjaFJvdykge1xuICAgICAgICAgICAgcm93LnJldmVyc2UoKTtcbiAgICAgICAgfVxuICAgICAgICBleHBhbmRlZEFycmF5LnB1c2gocm93KTtcbiAgICB9XG4gICAgaWYgKHN0YXJ0Um93Q29kZSA9PT0gXCJMXCIpIHtcbiAgICAgICAgZXhwYW5kZWRBcnJheS5yZXZlcnNlKCk7XG4gICAgfVxuICAgIHJldHVybiBleHBhbmRlZEFycmF5O1xufVxuZnVuY3Rpb24gZmxhdHRlbjJEKGFycmF5MmQsIGZvY3VzKSB7XG4gICAgLy8gUmV0dXJucyBhIGZsYXR0ZW5lZCBhcnJheSBmcm9tIHRoZSBnaXZlbiAyZCBhcnJheS5cbiAgICAvLyBhcnJheTJkIGlzIGFzc3VtZWQgdG8gaGF2ZSB0aGUgbGF5b3V0IHN0cnVjdHVyZSBvdXRsaW5lZCBhdDpcbiAgICAvLyByZW5kZXJlcnMvdXRpbHM6Z2V0Q2xhc3NWYWx1ZXNGb3JSZWxhdGlvbnNoaXAuXG4gICAgLy8gT3JkZXIgb2YgZWxlbWVudHMgaW4gdGhlIG91dHB1dCBhcnJheSBpcyBkZXRlcm1pbmVkIGJ5IFwiZm9jdXNcIi5cbiAgICAvLyBcImZvY3VzXCIgY2FuIGJlOiBISCwgSEwsIExIIG9yIExMLiBEZWZhdWx0IGlzIFwiSEhcIi5cbiAgICBsZXQgZmxhdEFycmF5ID0gW107XG4gICAgLy8gY2xvbmUgdG8gYXZvaWQgbW9kaWZ5aW5nIHNvdXJjZSBkYXRhXG4gICAgYXJyYXkyZCA9IGFycmF5MmQuc2xpY2UoKS5tYXAoKGNvbG9ycykgPT4gY29sb3JzLnNsaWNlKCkpO1xuICAgIC8vIEZvY3VzIGRlY2lkZXMgd2hldGhlciB3ZSByZXZlcnNlIHRoZSBvdXRlci9pbm5lciBhcnJheXMgb3Igbm90LlxuICAgIGNvbnN0IGNvZGVzID0gKGZvY3VzIHx8IFwiSEhcIikuc3BsaXQoXCJcIiksIHN0YXJ0Um93Q29kZSA9IGNvZGVzWzBdLCBzdGFydENvbENvZGUgPSBjb2Rlc1sxXTtcbiAgICBpZiAoc3RhcnRSb3dDb2RlID09PSBcIkxcIikge1xuICAgICAgICBhcnJheTJkLnJldmVyc2UoKTtcbiAgICB9XG4gICAgY29uc3QgcmV2ZXJzZUVhY2hSb3cgPSBzdGFydENvbENvZGUgPT09IFwiSFwiO1xuICAgIGFycmF5MmQuZm9yRWFjaCgocm93KSA9PiB7XG4gICAgICAgIGlmIChyZXZlcnNlRWFjaFJvdykge1xuICAgICAgICAgICAgcm93LnNsaWNlKCkucmV2ZXJzZSgpO1xuICAgICAgICB9XG4gICAgICAgIGZsYXRBcnJheSA9IGZsYXRBcnJheS5jb25jYXQocm93KTtcbiAgICB9KTtcbiAgICByZXR1cm4gZmxhdEFycmF5O1xufVxuXG5leHBvcnQgeyBtYXJrZXJQbGFjZW1lbnRTdGVwTWluIGFzIEEsIG1hcmtlclBsYWNlbWVudFJhbmRvbW5lc3NNYXggYXMgQiwgQ1NTIGFzIEMsIG1hcmtlclBsYWNlbWVudFJhbmRvbW5lc3NNaW4gYXMgRCwgZXhwYW5kMkQgYXMgRSwgY2F0ZWdvcmllc1RvVGFncyBhcyBGLCBtYXhXaWR0aEluUHggYXMgYSwgc3VwcG9ydGVkU3R5bGVzIGFzIGIsIGRlZmF1bHRWaXNpYmxlQ29sb3JTZWN0aW9uUGFydHMgYXMgYywgZGVmYXVsdFZpc2libGVNYXJrZXJTZWN0aW9uUGFydHMgYXMgZCwgZGVmYXVsdFZpc2libGVDb2xvclJhbXBTZWN0aW9uUGFydHMgYXMgZSwgZmxpcENvbG9yUmFtcFN0b3BzIGFzIGYsIGRlZmF1bHRWaXNpYmxlRXh0cmFTdHJva2VTZWN0aW9uUGFydHMgYXMgZywgZGVmYXVsdFZpc2libGVTdHJva2VTZWN0aW9uUGFydHMgYXMgaCwgbWF4RGlzcGxheWVkU3ltYm9sTGF5ZXJzIGFzIGksIGNvbG9yU3RvcmFnZUlkIGFzIGosIG9wYWNpdHlNYXggYXMgaywgcm90YXRpb25NYXggYXMgbCwgbWluV2lkdGhJblB4IGFzIG0sIHNpemVNaW4gYXMgbiwgb3BhY2l0eU1pbiBhcyBvLCBwb2ludFByZXZpZXdPcHRpb25zIGFzIHAsIHNpemVNYXggYXMgcSwgcm90YXRpb25NaW4gYXMgciwgc3VwcG9ydGVkQXJyb3dzIGFzIHMsIGhhdGNoRmlsbE9mZnNldE1heCBhcyB0LCBoYXRjaEZpbGxPZmZzZXRNaW4gYXMgdSwgaGF0Y2hGaWxsU2VwYXJhdGlvbk1heCBhcyB2LCBoYXRjaEZpbGxTZXBhcmF0aW9uTWluIGFzIHcsIGFuaW1hdGlvbkR1cmF0aW9uTWF4IGFzIHgsIGFuaW1hdGlvbkR1cmF0aW9uTWluIGFzIHksIG1hcmtlclBsYWNlbWVudFN0ZXBNYXggYXMgeiB9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb2xvclJhbXBVdGlscy04ZDlhM2JlZC5qcy5tYXAiLCIvKiFcbiAqIEFsbCBtYXRlcmlhbCBjb3B5cmlnaHQgRVNSSSwgQWxsIFJpZ2h0cyBSZXNlcnZlZCwgdW5sZXNzIG90aGVyd2lzZSBzcGVjaWZpZWQuXG4gKiB2NC4wLjU4XG4gKi9cbmltcG9ydCB7IGwgYXMgbG9hZE1vZHVsZXMgfSBmcm9tICcuL2xvYWRNb2R1bGVzLWI0YWMxMjQ3LmpzJztcbmltcG9ydCB7IGMgYXMgY2xvc2VzdEVsZW1lbnRDcm9zc1NoYWRvd0JvdW5kYXJ5IH0gZnJvbSAnLi9kb20tNGQzNjc2NzcuanMnO1xuXG5jb25zdCBsYW5ndWFnZU1hcCA9IG5ldyBNYXAoW1xuICAgIFtcImFyXCIsIFwiYXJcIl0sXG4gICAgW1wiYmdcIiwgXCJiZ1wiXSxcbiAgICBbXCJic1wiLCBcImJzXCJdLFxuICAgIFtcImNhXCIsIFwiY2FcIl0sXG4gICAgW1wiY3NcIiwgXCJjc1wiXSxcbiAgICBbXCJkYVwiLCBcImRhXCJdLFxuICAgIFtcImRlXCIsIFwiZGVcIl0sXG4gICAgW1wiZWxcIiwgXCJlbFwiXSxcbiAgICBbXCJlblwiLCBcImVuXCJdLFxuICAgIFtcImVzXCIsIFwiZXNcIl0sXG4gICAgW1wiZXRcIiwgXCJldFwiXSxcbiAgICBbXCJmaVwiLCBcImZpXCJdLFxuICAgIFtcImZyXCIsIFwiZnJcIl0sXG4gICAgW1wiaGVcIiwgXCJoZVwiXSxcbiAgICBbXCJoclwiLCBcImhyXCJdLFxuICAgIFtcImh1XCIsIFwiaHVcIl0sXG4gICAgW1wiaWRcIiwgXCJpZFwiXSxcbiAgICBbXCJpdFwiLCBcIml0XCJdLFxuICAgIFtcImphXCIsIFwiamFcIl0sXG4gICAgW1wia29cIiwgXCJrb1wiXSxcbiAgICBbXCJsdFwiLCBcImx0XCJdLFxuICAgIFtcImx2XCIsIFwibHZcIl0sXG4gICAgW1wibmJcIiwgXCJuYlwiXSxcbiAgICBbXCJubFwiLCBcIm5sXCJdLFxuICAgIFtcInBsXCIsIFwicGxcIl0sXG4gICAgW1wicHQtYnJcIiwgXCJwdC1CUlwiXSxcbiAgICBbXCJwdC1wdFwiLCBcInB0LVBUXCJdLFxuICAgIFtcInJvXCIsIFwicm9cIl0sXG4gICAgW1wicnVcIiwgXCJydVwiXSxcbiAgICBbXCJza1wiLCBcInNrXCJdLFxuICAgIFtcInNsXCIsIFwic2xcIl0sXG4gICAgW1wic3JcIiwgXCJzclwiXSxcbiAgICBbXCJzdlwiLCBcInN2XCJdLFxuICAgIFtcInRoXCIsIFwidGhcIl0sXG4gICAgW1widHJcIiwgXCJ0clwiXSxcbiAgICBbXCJ1a1wiLCBcInVrXCJdLFxuICAgIFtcInZpXCIsIFwidmlcIl0sXG4gICAgW1wiemgtY25cIiwgXCJ6aC1DTlwiXSxcbiAgICBbXCJ6aC1oa1wiLCBcInpoLUhLXCJdLFxuICAgIFtcInpoLXR3XCIsIFwiemgtVFdcIl1cbl0pO1xuLy8gcnRsXG5mdW5jdGlvbiBnZXRFbGVtZW50RGlyKGVsKSB7XG4gICAgcmV0dXJuIGdldEVsZW1lbnRQcm9wKGVsLCBcImRpclwiLCBcImx0clwiKTtcbn1cbmZ1bmN0aW9uIGdldEVsZW1lbnRQcm9wKGVsLCBwcm9wLCB2YWx1ZSkge1xuICAgIGNvbnN0IGNsb3Nlc3RXaXRoUHJvcCA9IGNsb3Nlc3RFbGVtZW50Q3Jvc3NTaGFkb3dCb3VuZGFyeShlbCwgYFske3Byb3B9XWApO1xuICAgIHJldHVybiBjbG9zZXN0V2l0aFByb3AgPyBjbG9zZXN0V2l0aFByb3AuZ2V0QXR0cmlidXRlKHByb3ApIDogdmFsdWU7XG59XG4vLyBjc3NcbmNvbnN0IENTU19VVElMSVRZID0ge1xuICAgIHJ0bDogXCJhcmNnaXMtLXJ0bFwiXG59O1xuYXN5bmMgZnVuY3Rpb24gZm9ybWF0TnVtYmVyKG51bWJlciwgb3B0aW9ucykge1xuICAgIGNvbnN0IHsgYXBpLCB0eXBlLCBwbGFjZXMgfSA9IG9wdGlvbnMgfHwge307XG4gICAgaWYgKGFwaSA9PT0gNCkge1xuICAgICAgICBjb25zdCBbaW50bF0gPSBhd2FpdCBsb2FkTW9kdWxlcyhbXCJlc3JpL2ludGxcIl0pO1xuICAgICAgICBjb25zdCBudW1iZXJGb3JtYXRJbnRsT3B0aW9ucyA9IGludGwuY29udmVydE51bWJlckZvcm1hdFRvSW50bE9wdGlvbnMoe1xuICAgICAgICAgICAgcGxhY2VzLFxuICAgICAgICAgICAgc3R5bGU6IHR5cGUsXG4gICAgICAgICAgICBkaWdpdFNlcGFyYXRvcjogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGludGwuZm9ybWF0TnVtYmVyKG51bWJlciwgT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBudW1iZXJGb3JtYXRJbnRsT3B0aW9ucyksIHsgc3R5bGU6IHR5cGUgfSkpO1xuICAgIH1cbiAgICBjb25zdCBbZG9qb051bWJlcl0gPSBhd2FpdCBsb2FkTW9kdWxlcyhbXCJkb2pvL251bWJlclwiXSk7XG4gICAgcmV0dXJuIGRvam9OdW1iZXIuZm9ybWF0KG51bWJlciwge1xuICAgICAgICB0eXBlLFxuICAgICAgICBwbGFjZXMsXG4gICAgICAgIHBhdHRlcm46IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5wYXR0ZXJuXG4gICAgfSk7XG59XG5jb25zdCBjYWNoZSA9IHt9O1xuZnVuY3Rpb24gZm9ybWF0RGF0ZShkYXRlKSB7XG4gICAgY29uc3QgbGFuZyA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5sYW5nO1xuICAgIGNvbnN0IGRheVNob3J0TW9udGhZZWFyID0ge1xuICAgICAgICB5ZWFyOiBcIm51bWVyaWNcIixcbiAgICAgICAgbW9udGg6IFwic2hvcnRcIixcbiAgICAgICAgZGF5OiBcIm51bWVyaWNcIlxuICAgIH07XG4gICAgaWYgKCFjYWNoZVtsYW5nXSkge1xuICAgICAgICBjYWNoZVtsYW5nXSA9IG5ldyBJbnRsLkRhdGVUaW1lRm9ybWF0KGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5sYW5nLCBkYXlTaG9ydE1vbnRoWWVhcik7XG4gICAgfVxuICAgIHJldHVybiBjYWNoZVtsYW5nXS5mb3JtYXQoZGF0ZSk7XG59XG5mdW5jdGlvbiBmb3JtYXRQbHVyYWwobGFuZywgc3RyaW5nT2JqLCBudW1iZXIpIHtcbiAgICBjb25zdCBzaW5nbGVzID0gW1wiaWRcIiwgXCJqYVwiLCBcImtvXCIsIFwidGhcIiwgXCJ2aVwiLCBcInpoLWNuXCIsIFwiemgtaGtcIiwgXCJ6aC10d1wiXTtcbiAgICBjb25zdCBsaWtlRW5nbGlzaCA9IFtcbiAgICAgICAgXCJlblwiLFxuICAgICAgICBcImNhXCIsXG4gICAgICAgIFwiZGFcIixcbiAgICAgICAgXCJkZVwiLFxuICAgICAgICBcImVsXCIsXG4gICAgICAgIFwiZXNcIixcbiAgICAgICAgXCJldFwiLFxuICAgICAgICBcImZpXCIsXG4gICAgICAgIFwiaGlcIixcbiAgICAgICAgXCJodVwiLFxuICAgICAgICBcIml0XCIsXG4gICAgICAgIFwibmJcIixcbiAgICAgICAgXCJubFwiLFxuICAgICAgICBcInB0LXB0XCIsXG4gICAgICAgIFwic3ZcIixcbiAgICAgICAgXCJ0clwiXG4gICAgXTtcbiAgICBjb25zdCBsb2NhbGUgPSBsYW5nICE9PSBudWxsICYmIGxhbmcgIT09IHZvaWQgMCA/IGxhbmcgOiBcImVuXCI7XG4gICAgLy8gaWYgdGhlIG51bWJlciBpcyBvbmUsIG9yIGl0IGlzIGEgXCJzaW1wbGVcIiBsYW5ndWFnZSwgcmV0dXJuIHRoZSAxIHN0cmluZ1xuICAgIGlmIChudW1iZXIgPT09IDEgfHwgc2luZ2xlcy5pbmNsdWRlcyhsb2NhbGUpKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmdPYmouc2luZ2xlLnJlcGxhY2UoXCIke251bWJlcn1cIiwgXCIxXCIpO1xuICAgIH1cbiAgICAvLyBpZiB0aGUgbnVtYmVyIGlzIG5vdCAxIGFuZCB0aGUgbGFuZ3VhZ2UgdXNlcyB0aGUgc2FtZSBwbHVyYWxpemF0aW9uIHN0cmF0ZWd5IGFzIGVuZ2xpc2gsXG4gICAgLy8gcmV0dXJuIHRoZSBtdWx0aXBsZSBzdHJpbmdcbiAgICBpZiAobnVtYmVyICE9PSAxICYmIGxpa2VFbmdsaXNoLmluY2x1ZGVzKGxvY2FsZSkpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZ09iai5tdWx0aXBsZS5yZXBsYWNlKFwiJHtudW1iZXJ9XCIsIGAke251bWJlcn1gKTtcbiAgICB9XG4gICAgLy8gaWYgbm9uZSBvZiB0aGUgYWJvdmUgd29ya2VkLCByZXR1cm4gdGhlIFwidW5rbm93blwiIHN0cmluZ1xuICAgIHJldHVybiBzdHJpbmdPYmoudW5rbm93bi5yZXBsYWNlKFwiJHtudW1iZXJ9XCIsIGAke251bWJlcn1gKTtcbn1cblxuZXhwb3J0IHsgQ1NTX1VUSUxJVFkgYXMgQywgZm9ybWF0RGF0ZSBhcyBhLCBmb3JtYXRQbHVyYWwgYXMgYiwgZm9ybWF0TnVtYmVyIGFzIGYsIGdldEVsZW1lbnREaXIgYXMgZywgbGFuZ3VhZ2VNYXAgYXMgbCB9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1sYW5ndWFnZVV0aWwtZWYwZTU0YjIuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9