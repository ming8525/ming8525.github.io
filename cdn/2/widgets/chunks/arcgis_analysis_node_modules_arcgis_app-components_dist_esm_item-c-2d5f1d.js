"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_item-c-2d5f1d"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/classification-7bcadbab.js":
/*!********************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/classification-7bcadbab.js ***!
  \********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ requestItemClassificationValue),
/* harmony export */   e: () => (/* binding */ evaluateValueExpression),
/* harmony export */   i: () => (/* binding */ isAttributeEnabled),
/* harmony export */   r: () => (/* binding */ requestClassificationSchema),
/* harmony export */   s: () => (/* binding */ submitItemClassificationValue)
/* harmony export */ });
/* harmony import */ var _config_75adf962_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./config-75adf962.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/config-75adf962.js");
/* harmony import */ var _loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./loadModules-b4ac1247.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-b4ac1247.js");
/* harmony import */ var _portal_d518b571_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./portal-d518b571.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/portal-d518b571.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */




function requestItemClassificationValue(url) {
    return (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_2__.r)(url);
}
function requestClassificationSchema(url) {
    return (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_2__.r)(url);
}
function submitItemClassificationValue(url, classificationValue) {
    const data = { classification: JSON.stringify(classificationValue) };
    return (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_2__.r)(url, data, {}, "post");
}
async function isAttributeEnabled(attributeId, classificationSchema, valueJson) {
    var _a;
    const attributeIdVal = (_a = classificationSchema === null || classificationSchema === void 0 ? void 0 : classificationSchema.attributes) === null || _a === void 0 ? void 0 : _a[attributeId];
    const isAttributeEnabled = attributeIdVal === null || attributeIdVal === void 0 ? void 0 : attributeIdVal.isAttributeEnabled;
    if (!attributeIdVal) {
        return false;
    }
    if (!isAttributeEnabled) {
        return true;
    }
    const arcadeInput = {
        schemaJsonString: JSON.stringify(classificationSchema),
        valueJsonString: valueJson,
        attributeId: attributeId
    };
    const arcadeScriptExecutor = await getExecutor(isAttributeEnabled);
    return arcadeScriptExecutor.execute(arcadeInput);
}
async function evaluateValueExpression(attributeId, classificationSchema, valueJson) {
    var _a, _b;
    const attributeIdVal = (_a = classificationSchema === null || classificationSchema === void 0 ? void 0 : classificationSchema.attributes) === null || _a === void 0 ? void 0 : _a[attributeId];
    const valueExpression = attributeIdVal === null || attributeIdVal === void 0 ? void 0 : attributeIdVal.valueExpression;
    const validValues = attributeIdVal === null || attributeIdVal === void 0 ? void 0 : attributeIdVal.validValues;
    const validValuesMap = attributeIdVal === null || attributeIdVal === void 0 ? void 0 : attributeIdVal.validValuesMap;
    if (!attributeIdVal) {
        return null;
    }
    if (!!(validValues === null || validValues === void 0 ? void 0 : validValues.length)) {
        return validValues;
    }
    if (!!validValuesMap && !!((_b = Object.keys(validValuesMap)) === null || _b === void 0 ? void 0 : _b.length)) {
        return validValuesMap;
    }
    if (!valueExpression) {
        return null;
    }
    const arcadeInput = {
        schemaJsonString: JSON.stringify(classificationSchema),
        valueJsonString: valueJson,
        attributeId: attributeId
    };
    const arcadeScriptExecutor = await getExecutor(valueExpression);
    return arcadeScriptExecutor.execute(arcadeInput);
}
async function getExecutor(arcadeExpressionInput) {
    if ((_config_75adf962_js__WEBPACK_IMPORTED_MODULE_0__.c === null || _config_75adf962_js__WEBPACK_IMPORTED_MODULE_0__.c === void 0 ? void 0 : _config_75adf962_js__WEBPACK_IMPORTED_MODULE_0__.c.api) === 3) {
        return getExecutor3x(arcadeExpressionInput);
    }
    const [arcade] = await (0,_loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_1__.l)(["esri/arcade"]);
    return arcade.createArcadeExecutor(arcadeExpressionInput, {
        variables: [
            {
                name: "schemaJsonString",
                type: "text"
            },
            {
                name: "valueJsonString",
                type: "text"
            },
            {
                name: "attributeId",
                type: "text"
            }
        ]
    });
}
async function getExecutor3x(arcadeExpressionInput) {
    const [visualizationProfile] = await (0,_loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_1__.l)(["esri/arcadeProfiles/visualizationProfile"]);
    /* const profile = */ await visualizationProfile.initialize([arcadeExpressionInput]);
    // TODO: implement working executor in 3.x here
    return {
        execute: () => false
    };
}



//# sourceMappingURL=classification-7bcadbab.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/item-classification-category_4.entry.js":
/*!*********************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/item-classification-category_4.entry.js ***!
  \*********************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   item_classification_category: () => (/* binding */ ClassificationCategory),
/* harmony export */   item_classification_content: () => (/* binding */ ClassificationContent),
/* harmony export */   item_classification_info: () => (/* binding */ ClassificationInfo),
/* harmony export */   item_classification_notification: () => (/* binding */ ClassificationNotification)
/* harmony export */ });
/* harmony import */ var _index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-e3bf7da7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-e3bf7da7.js");
/* harmony import */ var _classification_7bcadbab_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./classification-7bcadbab.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/classification-7bcadbab.js");
/* harmony import */ var _config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./config-75adf962.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/config-75adf962.js");
/* harmony import */ var _index_05956cab_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./index-05956cab.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-05956cab.js");
/* harmony import */ var _loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./loadModules-b4ac1247.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-b4ac1247.js");
/* harmony import */ var _portal_d518b571_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./portal-d518b571.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/portal-d518b571.js");
/* harmony import */ var _url_4c3ae54c_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./url-4c3ae54c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/url-4c3ae54c.js");
/* harmony import */ var _functional_44de8fcf_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./functional-44de8fcf.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-44de8fcf.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */









const itemClassificationCategoryCss = ".itemClassificationCategory{margin:1.25rem}";

const ClassificationCategory = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.i18n = undefined;
        this.classificationCategoryArr = undefined;
        this.classificationType = undefined;
        this.setClassificationType = undefined;
        this.setItemClassificationValue = undefined;
    }
    getClassificationType(value) {
        return this.classificationCategoryArr.find((classificationType) => classificationType.value === value);
    }
    changeClassificationCategory(e) {
        const target = e.target;
        if (target.value) {
            const selectedClassificationType = target.value;
            const classificationType = this.getClassificationType(selectedClassificationType);
            this.setClassificationType(classificationType);
            this.setItemClassificationValue({ classification: classificationType === null || classificationType === void 0 ? void 0 : classificationType.label });
        }
    }
    configureClassificationCategoryMenu() {
        return this.classificationCategoryArr.map((category) => {
            var _a;
            return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-combobox-item", { id: category.id, selected: category.id === ((_a = this.classificationType) === null || _a === void 0 ? void 0 : _a.id), key: category.id, value: category.value, textLabel: category.label }));
        });
    }
    render() {
        var _a;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "itemClassificationCategory" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("label", { htmlFor: "classificationCategory", id: "classificationCategoryLabel" }, this.i18n.itemClassificationLabel), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-combobox", { id: "classificationCategory", label: this.i18n.itemClassificationCategoryLabel, selectionMode: "single", scale: "m", onCalciteComboboxChange: this.changeClassificationCategory.bind(this), value: (_a = this.classificationType) === null || _a === void 0 ? void 0 : _a.value, placeholder: this.i18n.searchForCategory }, this.configureClassificationCategoryMenu())));
    }
};
ClassificationCategory.style = itemClassificationCategoryCss;

const itemClassificationContentCss = ".itemClassificationContent{margin:1rem}";

const ClassificationContent = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisItemClassificationContentDisplayNotification = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisItemClassificationContentDisplayNotification", 7);
        this.attributeElementsCopy = {};
        this.createUIElements = async (attributeId, attributeValue, isEnabled) => {
            var _a;
            let attributeInputElement;
            if (isEnabled) {
                const layoutElement = ((_a = this.classificationSchema.layoutElements) === null || _a === void 0 ? void 0 : _a[attributeId]) || "text";
                const itemClassificationValue = structuredClone(this.itemClassificationValue);
                if (layoutElement.includes("-select")) {
                    try {
                        const valueExpressionResult = await (0,_classification_7bcadbab_js__WEBPACK_IMPORTED_MODULE_1__.e)(attributeId, this.classificationSchema, JSON.stringify(itemClassificationValue));
                        if (layoutElement === "multi-select") {
                            attributeInputElement = this.renderMultiSelectElement({ attributeValue, itemClassificationValue, attributeId, valueExpressionResult });
                        }
                        else if (layoutElement === "multi-grouped-select") {
                            attributeInputElement = this.renderGroupedMultiSelectElement({ attributeValue, itemClassificationValue, attributeId, valueExpressionResult });
                        }
                        else if (layoutElement === "single-select") {
                            attributeInputElement = this.renderSingleSelectElement({ attributeValue, itemClassificationValue, attributeId, valueExpressionResult });
                        }
                    }
                    catch (error) {
                        this.arcgisItemClassificationContentDisplayNotification.emit({
                            alertIndicatorActive: true,
                            alertIndicatorColor: "danger",
                            alertIndicatorIcon: "exclamation-mark-triangle",
                            alertIndicatorInfo: error === null || error === void 0 ? void 0 : error.message
                        });
                    }
                }
                else {
                    if (layoutElement === "checkbox") {
                        attributeInputElement = this.renderCheckbox({ attributeValue, itemClassificationValue, attributeId });
                    }
                    else if (layoutElement === "text") {
                        attributeInputElement = this.renderInputTextBox({ attributeValue, itemClassificationValue, attributeId });
                    }
                    else if (layoutElement === "date") {
                        attributeInputElement = this.renderDatePickerElement({ attributeValue, itemClassificationValue, attributeId });
                    }
                }
                this.attributeElementsCopy = Object.assign(Object.assign({}, this.attributeElementsCopy), { [attributeId]: attributeInputElement });
                this.attributeElements = structuredClone(this.attributeElementsCopy);
            }
        };
        // group multiple selection combobox
        this.renderGroupedMultiSelectElement = (inputData) => {
            return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-item-classification-input-grouped-multiple-selection", { isSaving: this.isSaving, inputData: inputData });
        };
        // single selection combobox
        this.renderSingleSelectElement = (inputData) => {
            return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-item-classification-input-single-selection", { isSaving: this.isSaving, inputData: inputData });
        };
        // checkbox
        this.renderCheckbox = (inputData) => {
            return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-item-classification-input-checkbox", { isSaving: this.isSaving, inputData: inputData });
        };
        // input textbox
        this.renderInputTextBox = (inputData) => {
            return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-item-classification-input-textbox", { isSaving: this.isSaving, inputData: inputData });
        };
        // input date picker
        this.renderDatePickerElement = (inputData) => {
            return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-item-classification-input-date", { isSaving: this.isSaving, inputData: inputData });
        };
        this.switchCategoryTab = (e) => {
            this.setAttributeCategory(e.target.selectedTitle.id);
        };
        this.renderCategoryTabTitles = () => {
            var _a;
            return (_a = this.classificationSchema.attributeCategories) === null || _a === void 0 ? void 0 : _a.map(category => {
                return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-tab-title", { selected: this.attributeCategory === category, key: category, id: category }, category);
            });
        };
        this.renderCategoryTabContent = () => {
            var _a;
            return (_a = this.classificationSchema.attributeCategories) === null || _a === void 0 ? void 0 : _a.map(category => {
                return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-tab", { class: "classification-tab", selected: this.attributeCategory === category, key: `tab_${category}`, id: `tab_${category}` }, this.renderClassificationContent(category));
            });
        };
        this.renderClassificationContent = (category) => {
            var _a, _b;
            return (_b = (_a = this.classificationContentArr) === null || _a === void 0 ? void 0 : _a[category]) === null || _b === void 0 ? void 0 : _b.map((inputComponent, index) => ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { id: `${category}_${index}`, key: `${category}_${index}` }, inputComponent)));
        };
        this.itemClassificationValue = undefined;
        this.classificationSchema = undefined;
        this.attributeCategory = undefined;
        this.setAttributeCategory = undefined;
        this.setItemClassificationValue = undefined;
        this.isSaving = undefined;
        this.attributeElements = null;
        this.classificationContentArr = null;
    }
    componentWillLoad() {
        this.createClassificationContent();
    }
    async createClassificationContent() {
        var _a, _b;
        this.attributeElementsCopy = {};
        if ((_a = this.classificationSchema) === null || _a === void 0 ? void 0 : _a.attributes) {
            const sortedAttributes = Object.entries((_b = this.classificationSchema) === null || _b === void 0 ? void 0 : _b.attributes).sort(([, a], [, b]) => a['position'] - b['position']);
            for (let index in sortedAttributes) {
                const attributeId = sortedAttributes[index][0];
                const attributeValue = sortedAttributes[index][1];
                try {
                    const isEnabled = await (0,_classification_7bcadbab_js__WEBPACK_IMPORTED_MODULE_1__.i)(attributeId, this.classificationSchema, JSON.stringify(this.itemClassificationValue));
                    this.createUIElements(attributeId, attributeValue, isEnabled);
                }
                catch (error) {
                    this.arcgisItemClassificationContentDisplayNotification.emit({
                        alertIndicatorActive: true,
                        alertIndicatorColor: "danger",
                        alertIndicatorIcon: "exclamation-mark-triangle",
                        alertIndicatorInfo: error === null || error === void 0 ? void 0 : error.message
                    });
                    break;
                }
            }
        }
    }
    handleAttributeElementsChange() {
        const preRenderClassificationContent = (classificationSchema) => {
            // Three types: "General", "Need to know"
            const classificationContentArrCopy = {};
            classificationSchema === null || classificationSchema === void 0 ? void 0 : classificationSchema.attributeCategories.forEach(value => classificationContentArrCopy[value] = []);
            const sortedAttributes = Object.entries(classificationSchema === null || classificationSchema === void 0 ? void 0 : classificationSchema.attributes).sort(([, a], [, b]) => a['position'] - b['position']);
            sortedAttributes === null || sortedAttributes === void 0 ? void 0 : sortedAttributes.forEach(([attributeId, attributeValue]) => {
                var _a;
                const attribute = this.attributeElements[attributeId];
                if (!!attribute) {
                    const categoryName = ((_a = attributeValue === null || attributeValue === void 0 ? void 0 : attributeValue.attributeCategory) === null || _a === void 0 ? void 0 : _a.name) || "Default";
                    classificationContentArrCopy[categoryName].push(attribute);
                }
            });
            this.classificationContentArr = structuredClone(classificationContentArrCopy);
        };
        if (!!this.attributeElements) {
            preRenderClassificationContent(this.classificationSchema);
        }
    }
    // multiple selection combobox
    renderMultiSelectElement(inputData) {
        return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-item-classification-input-multiple-selection", { isSaving: this.isSaving, inputData: inputData });
    }
    changeClassificationVal(itemClassificationValue) {
        this.setItemClassificationValue(itemClassificationValue.detail);
    }
    render() {
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "itemClassificationContent" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-tabs", null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-tab-nav", { slot: "title-group", onCalciteTabChange: this.switchCategoryTab.bind(this) }, this.renderCategoryTabTitles()), this.renderCategoryTabContent())));
    }
    static get watchers() { return {
        "itemClassificationValue": ["createClassificationContent"],
        "attributeElements": ["handleAttributeElementsChange"]
    }; }
};
ClassificationContent.style = itemClassificationContentCss;

const itemClassificationInfoCss = ".itemClassificationInfo{margin:1.25rem}.classification-info-desc{word-wrap:break-word;margin-top:0}";

const ClassificationInfo = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.i18n = undefined;
        this.itemClassificationValue = undefined;
        this.classificationSchema = undefined;
    }
    getClassificationColor() {
        var _a;
        const classificationType = (_a = this.classificationSchema) === null || _a === void 0 ? void 0 : _a.classifications.find(type => { var _a; return type.id == ((_a = this.itemClassificationValue) === null || _a === void 0 ? void 0 : _a.classification); });
        return (classificationType === null || classificationType === void 0 ? void 0 : classificationType.color) || "Green";
    }
    encodeToDelimitedString() {
        var _a, _b, _c;
        let result = '';
        if ((_a = this.itemClassificationValue) === null || _a === void 0 ? void 0 : _a.classification) {
            result = `${result}classification::${this.itemClassificationValue.classification}//`;
        }
        if ((_b = this.classificationSchema) === null || _b === void 0 ? void 0 : _b.attributes) {
            const sortedAttributes = (_c = Object.entries(this.classificationSchema.attributes)) === null || _c === void 0 ? void 0 : _c.sort(([, a], [, b]) => a["position"] - b["position"]);
            sortedAttributes.forEach(([key]) => {
                var _a;
                if (!!((_a = this.itemClassificationValue) === null || _a === void 0 ? void 0 : _a[key])) {
                    const classificationValueStr = this.classificationSchema.layoutElements[key].includes("multi")
                        ?
                            this.itemClassificationValue[key].join(";")
                        :
                            this.itemClassificationValue[key];
                    result = `${result}${key}::${classificationValueStr}//`;
                }
            });
        }
        return result;
    }
    render() {
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "itemClassificationInfo" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("label", { htmlFor: "classificationInfo", id: "classificationInfoLabel" }, this.i18n.currentSelections), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { id: "classificationInfo", style: { backgroundColor: this.getClassificationColor() } }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("p", { class: "classification-info-desc" }, this.encodeToDelimitedString()))));
    }
};
ClassificationInfo.style = itemClassificationInfoCss;

const itemClassificationNotificationCss = ".classification-notification-handler{z-index:9000}";

const ClassificationNotification = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisItemClassificationNotificationClose = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisItemClassificationNotificationClose", 7);
        this.closeModal = () => {
            this.arcgisItemClassificationNotificationClose.emit(false);
        };
        this.i18n = undefined;
        this.alertIndicator = undefined;
    }
    render() {
        return (
        // Notification modal after the response of the web request has been received
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-alert", { class: "classification-notification-handler", icon: this.alertIndicator.alertIndicatorIcon, label: this.i18n.classificationNotificationHandler, scale: "m", autoClose: true, autoCloseDuration: "medium", open: this.alertIndicator.alertIndicatorActive, kind: this.alertIndicator.alertIndicatorType, "aria-hidden": !this.alertIndicator.alertIndicatorActive, onCalciteAlertClose: this.closeModal.bind(this) }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "message" }, this.alertIndicator.alertIndicatorInfo)));
    }
};
ClassificationNotification.style = itemClassificationNotificationCss;



//# sourceMappingURL=item-classification-category_4.entry.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2lkZ2V0cy9jaHVua3MvYXJjZ2lzX2FuYWx5c2lzX25vZGVfbW9kdWxlc19hcmNnaXNfYXBwLWNvbXBvbmVudHNfZGlzdF9lc21faXRlbS1jLTJkNWYxZC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ3dEO0FBQ0s7QUFDVDs7QUFFcEQ7QUFDQSxXQUFXLHNEQUFPO0FBQ2xCO0FBQ0E7QUFDQSxXQUFXLHNEQUFPO0FBQ2xCO0FBQ0E7QUFDQSxtQkFBbUI7QUFDbkIsV0FBVyxzREFBTyxjQUFjO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUyxrREFBVyxhQUFhLGtEQUFXLHVCQUF1QixrREFBVztBQUM5RTtBQUNBO0FBQ0EsMkJBQTJCLDJEQUFXO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLHlDQUF5QywyREFBVztBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRTRLOztBQUU1Szs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQy9GQTtBQUNBO0FBQ0E7QUFDQTtBQUNpRjtBQUNvQjtBQUN2RTtBQUNEO0FBQ007QUFDTDtBQUNIO0FBQ087O0FBRWxDLG1FQUFtRSxlQUFlOztBQUVsRjtBQUNBO0FBQ0EsUUFBUSxxREFBZ0I7QUFDeEI7QUFDQTtBQUNBO0FB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Q0E7QUFDQSx3QkFBd0IsT0FBTyxrQkFBa0IsNENBQTRDO0FBQzdGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxRUFBcUU7QUFDckU7QUFDQTtBQUNBLGdDQUFnQyxPQUFPLEVBQUUsSUFBSSxJQUFJLHVCQUF1QjtBQUN4RTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixxREFBQyxVQUFVLGlDQUFpQyxFQUFFLHFEQUFDLFlBQVksOERBQThELGdDQUFnQyxxREFBQyxVQUFVLG1DQUFtQyxrREFBa0QsRUFBRSxxREFBQyxRQUFRLG1DQUFtQztBQUN2VDtBQUNBO0FBQ0E7O0FBRUEsZ0ZBQWdGLGFBQWE7O0FBRTdGO0FBQ0E7QUFDQSxRQUFRLHFEQUFnQjtBQUN4Qix5REFBeUQscURBQVc7QUFDcEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSxxREFBQyxvQkFBb0IsbVpBQW1aLEVBQUUscURBQUMsVUFBVSxpQkFBaUI7QUFDOWM7QUFDQTtBQUNBOztBQUV3Tzs7QUFFeE8iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9leGItY2xpZW50Ly4vZXh0ZW5zaW9ucy93aWRnZXRzL2FyY2dpcy9hbmFseXNpcy9ub2RlX21vZHVsZXMvQGFyY2dpcy9hcHAtY29tcG9uZW50cy9kaXN0L2VzbS9jbGFzc2lmaWNhdGlvbi03YmNhZGJhYi5qcyIsIndlYnBhY2s6Ly9leGItY2xpZW50Ly4vZXh0ZW5zaW9ucy93aWRnZXRzL2FyY2dpcy9hbmFseXNpcy9ub2RlX21vZHVsZXMvQGFyY2dpcy9hcHAtY29tcG9uZW50cy9kaXN0L2VzbS9pdGVtLWNsYXNzaWZpY2F0aW9uLWNhdGVnb3J5XzQuZW50cnkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBBbGwgbWF0ZXJpYWwgY29weXJpZ2h0IEVTUkksIEFsbCBSaWdodHMgUmVzZXJ2ZWQsIHVubGVzcyBvdGhlcndpc2Ugc3BlY2lmaWVkLlxuICogdjQuMC41OFxuICovXG5pbXBvcnQgeyBjIGFzIGNvbmZpZ1N0YXRlIH0gZnJvbSAnLi9jb25maWctNzVhZGY5NjIuanMnO1xuaW1wb3J0IHsgbCBhcyBsb2FkTW9kdWxlcyB9IGZyb20gJy4vbG9hZE1vZHVsZXMtYjRhYzEyNDcuanMnO1xuaW1wb3J0IHsgciBhcyByZXF1ZXN0IH0gZnJvbSAnLi9wb3J0YWwtZDUxOGI1NzEuanMnO1xuXG5mdW5jdGlvbiByZXF1ZXN0SXRlbUNsYXNzaWZpY2F0aW9uVmFsdWUodXJsKSB7XG4gICAgcmV0dXJuIHJlcXVlc3QodXJsKTtcbn1cbmZ1bmN0aW9uIHJlcXVlc3RDbGFzc2lmaWNhdGlvblNjaGVtYSh1cmwpIHtcbiAgICByZXR1cm4gcmVxdWVzdCh1cmwpO1xufVxuZnVuY3Rpb24gc3VibWl0SXRlbUNsYXNzaWZpY2F0aW9uVmFsdWUodXJsLCBjbGFzc2lmaWNhdGlvblZhbHVlKSB7XG4gICAgY29uc3QgZGF0YSA9IHsgY2xhc3NpZmljYXRpb246IEpTT04uc3RyaW5naWZ5KGNsYXNzaWZpY2F0aW9uVmFsdWUpIH07XG4gICAgcmV0dXJuIHJlcXVlc3QodXJsLCBkYXRhLCB7fSwgXCJwb3N0XCIpO1xufVxuYXN5bmMgZnVuY3Rpb24gaXNBdHRyaWJ1dGVFbmFibGVkKGF0dHJpYnV0ZUlkLCBjbGFzc2lmaWNhdGlvblNjaGVtYSwgdmFsdWVKc29uKSB7XG4gICAgdmFyIF9hO1xuICAgIGNvbnN0IGF0dHJpYnV0ZUlkVmFsID0gKF9hID0gY2xhc3NpZmljYXRpb25TY2hlbWEgPT09IG51bGwgfHwgY2xhc3NpZmljYXRpb25TY2hlbWEgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGNsYXNzaWZpY2F0aW9uU2NoZW1hLmF0dHJpYnV0ZXMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYVthdHRyaWJ1dGVJZF07XG4gICAgY29uc3QgaXNBdHRyaWJ1dGVFbmFibGVkID0gYXR0cmlidXRlSWRWYWwgPT09IG51bGwgfHwgYXR0cmlidXRlSWRWYWwgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGF0dHJpYnV0ZUlkVmFsLmlzQXR0cmlidXRlRW5hYmxlZDtcbiAgICBpZiAoIWF0dHJpYnV0ZUlkVmFsKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKCFpc0F0dHJpYnV0ZUVuYWJsZWQpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGNvbnN0IGFyY2FkZUlucHV0ID0ge1xuICAgICAgICBzY2hlbWFKc29uU3RyaW5nOiBKU09OLnN0cmluZ2lmeShjbGFzc2lmaWNhdGlvblNjaGVtYSksXG4gICAgICAgIHZhbHVlSnNvblN0cmluZzogdmFsdWVKc29uLFxuICAgICAgICBhdHRyaWJ1dGVJZDogYXR0cmlidXRlSWRcbiAgICB9O1xuICAgIGNvbnN0IGFyY2FkZVNjcmlwdEV4ZWN1dG9yID0gYXdhaXQgZ2V0RXhlY3V0b3IoaXNBdHRyaWJ1dGVFbmFibGVkKTtcbiAgICByZXR1cm4gYXJjYWRlU2NyaXB0RXhlY3V0b3IuZXhlY3V0ZShhcmNhZGVJbnB1dCk7XG59XG5hc3luYyBmdW5jdGlvbiBldmFsdWF0ZVZhbHVlRXhwcmVzc2lvbihhdHRyaWJ1dGVJZCwgY2xhc3NpZmljYXRpb25TY2hlbWEsIHZhbHVlSnNvbikge1xuICAgIHZhciBfYSwgX2I7XG4gICAgY29uc3QgYXR0cmlidXRlSWRWYWwgPSAoX2EgPSBjbGFzc2lmaWNhdGlvblNjaGVtYSA9PT0gbnVsbCB8fCBjbGFzc2lmaWNhdGlvblNjaGVtYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogY2xhc3NpZmljYXRpb25TY2hlbWEuYXR0cmlidXRlcykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hW2F0dHJpYnV0ZUlkXTtcbiAgICBjb25zdCB2YWx1ZUV4cHJlc3Npb24gPSBhdHRyaWJ1dGVJZFZhbCA9PT0gbnVsbCB8fCBhdHRyaWJ1dGVJZFZhbCA9PT0gdm9pZCAwID8gdm9pZCAwIDogYXR0cmlidXRlSWRWYWwudmFsdWVFeHByZXNzaW9uO1xuICAgIGNvbnN0IHZhbGlkVmFsdWVzID0gYXR0cmlidXRlSWRWYWwgPT09IG51bGwgfHwgYXR0cmlidXRlSWRWYWwgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGF0dHJpYnV0ZUlkVmFsLnZhbGlkVmFsdWVzO1xuICAgIGNvbnN0IHZhbGlkVmFsdWVzTWFwID0gYXR0cmlidXRlSWRWYWwgPT09IG51bGwgfHwgYXR0cmlidXRlSWRWYWwgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGF0dHJpYnV0ZUlkVmFsLnZhbGlkVmFsdWVzTWFwO1xuICAgIGlmICghYXR0cmlidXRlSWRWYWwpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGlmICghISh2YWxpZFZhbHVlcyA9PT0gbnVsbCB8fCB2YWxpZFZhbHVlcyA9PT0gdm9pZCAwID8gdm9pZCAwIDogdmFsaWRWYWx1ZXMubGVuZ3RoKSkge1xuICAgICAgICByZXR1cm4gdmFsaWRWYWx1ZXM7XG4gICAgfVxuICAgIGlmICghIXZhbGlkVmFsdWVzTWFwICYmICEhKChfYiA9IE9iamVjdC5rZXlzKHZhbGlkVmFsdWVzTWFwKSkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmxlbmd0aCkpIHtcbiAgICAgICAgcmV0dXJuIHZhbGlkVmFsdWVzTWFwO1xuICAgIH1cbiAgICBpZiAoIXZhbHVlRXhwcmVzc2lvbikge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgY29uc3QgYXJjYWRlSW5wdXQgPSB7XG4gICAgICAgIHNjaGVtYUpzb25TdHJpbmc6IEpTT04uc3RyaW5naWZ5KGNsYXNzaWZpY2F0aW9uU2NoZW1hKSxcbiAgICAgICAgdmFsdWVKc29uU3RyaW5nOiB2YWx1ZUpzb24sXG4gICAgICAgIGF0dHJpYnV0ZUlkOiBhdHRyaWJ1dGVJZFxuICAgIH07XG4gICAgY29uc3QgYXJjYWRlU2NyaXB0RXhlY3V0b3IgPSBhd2FpdCBnZXRFeGVjdXRvcih2YWx1ZUV4cHJlc3Npb24pO1xuICAgIHJldHVybiBhcmNhZGVTY3JpcHRFeGVjdXRvci5leGVjdXRlKGFyY2FkZUlucHV0KTtcbn1cbmFzeW5jIGZ1bmN0aW9uIGdldEV4ZWN1dG9yKGFyY2FkZUV4cHJlc3Npb25JbnB1dCkge1xuICAgIGlmICgoY29uZmlnU3RhdGUgPT09IG51bGwgfHwgY29uZmlnU3RhdGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGNvbmZpZ1N0YXRlLmFwaSkgPT09IDMpIHtcbiAgICAgICAgcmV0dXJuIGdldEV4ZWN1dG9yM3goYXJjYWRlRXhwcmVzc2lvbklucHV0KTtcbiAgICB9XG4gICAgY29uc3QgW2FyY2FkZV0gPSBhd2FpdCBsb2FkTW9kdWxlcyhbXCJlc3JpL2FyY2FkZVwiXSk7XG4gICAgcmV0dXJuIGFyY2FkZS5jcmVhdGVBcmNhZGVFeGVjdXRvcihhcmNhZGVFeHByZXNzaW9uSW5wdXQsIHtcbiAgICAgICAgdmFyaWFibGVzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJzY2hlbWFKc29uU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJ0ZXh0XCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJ2YWx1ZUpzb25TdHJpbmdcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcInRleHRcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcImF0dHJpYnV0ZUlkXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJ0ZXh0XCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0pO1xufVxuYXN5bmMgZnVuY3Rpb24gZ2V0RXhlY3V0b3IzeChhcmNhZGVFeHByZXNzaW9uSW5wdXQpIHtcbiAgICBjb25zdCBbdmlzdWFsaXphdGlvblByb2ZpbGVdID0gYXdhaXQgbG9hZE1vZHVsZXMoW1wiZXNyaS9hcmNhZGVQcm9maWxlcy92aXN1YWxpemF0aW9uUHJvZmlsZVwiXSk7XG4gICAgLyogY29uc3QgcHJvZmlsZSA9ICovIGF3YWl0IHZpc3VhbGl6YXRpb25Qcm9maWxlLmluaXRpYWxpemUoW2FyY2FkZUV4cHJlc3Npb25JbnB1dF0pO1xuICAgIC8vIFRPRE86IGltcGxlbWVudCB3b3JraW5nIGV4ZWN1dG9yIGluIDMueCBoZXJlXG4gICAgcmV0dXJuIHtcbiAgICAgICAgZXhlY3V0ZTogKCkgPT4gZmFsc2VcbiAgICB9O1xufVxuXG5leHBvcnQgeyByZXF1ZXN0SXRlbUNsYXNzaWZpY2F0aW9uVmFsdWUgYXMgYSwgZXZhbHVhdGVWYWx1ZUV4cHJlc3Npb24gYXMgZSwgaXNBdHRyaWJ1dGVFbmFibGVkIGFzIGksIHJlcXVlc3RDbGFzc2lmaWNhdGlvblNjaGVtYSBhcyByLCBzdWJtaXRJdGVtQ2xhc3NpZmljYXRpb25WYWx1ZSBhcyBzIH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNsYXNzaWZpY2F0aW9uLTdiY2FkYmFiLmpzLm1hcCIsIi8qIVxuICogQWxsIG1hdGVyaWFsIGNvcHlyaWdodCBFU1JJLCBBbGwgUmlnaHRzIFJlc2VydmVkLCB1bmxlc3Mgb3RoZXJ3aXNlIHNwZWNpZmllZC5cbiAqIHY0LjAuNThcbiAqL1xuaW1wb3J0IHsgciBhcyByZWdpc3Rlckluc3RhbmNlLCBoLCBjIGFzIGNyZWF0ZUV2ZW50IH0gZnJvbSAnLi9pbmRleC1lM2JmN2RhNy5qcyc7XG5pbXBvcnQgeyBlIGFzIGV2YWx1YXRlVmFsdWVFeHByZXNzaW9uLCBpIGFzIGlzQXR0cmlidXRlRW5hYmxlZCB9IGZyb20gJy4vY2xhc3NpZmljYXRpb24tN2JjYWRiYWIuanMnO1xuaW1wb3J0ICcuL2NvbmZpZy03NWFkZjk2Mi5qcyc7XG5pbXBvcnQgJy4vaW5kZXgtMDU5NTZjYWIuanMnO1xuaW1wb3J0ICcuL2xvYWRNb2R1bGVzLWI0YWMxMjQ3LmpzJztcbmltcG9ydCAnLi9wb3J0YWwtZDUxOGI1NzEuanMnO1xuaW1wb3J0ICcuL3VybC00YzNhZTU0Yy5qcyc7XG5pbXBvcnQgJy4vZnVuY3Rpb25hbC00NGRlOGZjZi5qcyc7XG5cbmNvbnN0IGl0ZW1DbGFzc2lmaWNhdGlvbkNhdGVnb3J5Q3NzID0gXCIuaXRlbUNsYXNzaWZpY2F0aW9uQ2F0ZWdvcnl7bWFyZ2luOjEuMjVyZW19XCI7XG5cbmNvbnN0IENsYXNzaWZpY2F0aW9uQ2F0ZWdvcnkgPSBjbGFzcyB7XG4gICAgY29uc3RydWN0b3IoaG9zdFJlZikge1xuICAgICAgICByZWdpc3Rlckluc3RhbmNlKHRoaXMsIGhvc3RSZWYpO1xuICAgICAgICB0aGlzLmkxOG4gPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuY2xhc3NpZmljYXRpb25DYXRlZ29yeUFyciA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5jbGFzc2lmaWNhdGlvblR5cGUgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuc2V0Q2xhc3NpZmljYXRpb25UeXBlID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLnNldEl0ZW1DbGFzc2lmaWNhdGlvblZhbHVlID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBnZXRDbGFzc2lmaWNhdGlvblR5cGUodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2xhc3NpZmljYXRpb25DYXRlZ29yeUFyci5maW5kKChjbGFzc2lmaWNhdGlvblR5cGUpID0+IGNsYXNzaWZpY2F0aW9uVHlwZS52YWx1ZSA9PT0gdmFsdWUpO1xuICAgIH1cbiAgICBjaGFuZ2VDbGFzc2lmaWNhdGlvbkNhdGVnb3J5KGUpIHtcbiAgICAgICAgY29uc3QgdGFyZ2V0ID0gZS50YXJnZXQ7XG4gICAgICAgIGlmICh0YXJnZXQudmFsdWUpIHtcbiAgICAgICAgICAgIGNvbnN0IHNlbGVjdGVkQ2xhc3NpZmljYXRpb25UeXBlID0gdGFyZ2V0LnZhbHVlO1xuICAgICAgICAgICAgY29uc3QgY2xhc3NpZmljYXRpb25UeXBlID0gdGhpcy5nZXRDbGFzc2lmaWNhdGlvblR5cGUoc2VsZWN0ZWRDbGFzc2lmaWNhdGlvblR5cGUpO1xuICAgICAgICAgICAgdGhpcy5zZXRDbGFzc2lmaWNhdGlvblR5cGUoY2xhc3NpZmljYXRpb25UeXBlKTtcbiAgICAgICAgICAgIHRoaXMuc2V0SXRlbUNsYXNzaWZpY2F0aW9uVmFsdWUoeyBjbGFzc2lmaWNhdGlvbjogY2xhc3NpZmljYXRpb25UeXBlID09PSBudWxsIHx8IGNsYXNzaWZpY2F0aW9uVHlwZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogY2xhc3NpZmljYXRpb25UeXBlLmxhYmVsIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNvbmZpZ3VyZUNsYXNzaWZpY2F0aW9uQ2F0ZWdvcnlNZW51KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jbGFzc2lmaWNhdGlvbkNhdGVnb3J5QXJyLm1hcCgoY2F0ZWdvcnkpID0+IHtcbiAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgIHJldHVybiAoaChcImNhbGNpdGUtY29tYm9ib3gtaXRlbVwiLCB7IGlkOiBjYXRlZ29yeS5pZCwgc2VsZWN0ZWQ6IGNhdGVnb3J5LmlkID09PSAoKF9hID0gdGhpcy5jbGFzc2lmaWNhdGlvblR5cGUpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5pZCksIGtleTogY2F0ZWdvcnkuaWQsIHZhbHVlOiBjYXRlZ29yeS52YWx1ZSwgdGV4dExhYmVsOiBjYXRlZ29yeS5sYWJlbCB9KSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgcmV0dXJuIChoKFwiZGl2XCIsIHsgY2xhc3M6IFwiaXRlbUNsYXNzaWZpY2F0aW9uQ2F0ZWdvcnlcIiB9LCBoKFwibGFiZWxcIiwgeyBodG1sRm9yOiBcImNsYXNzaWZpY2F0aW9uQ2F0ZWdvcnlcIiwgaWQ6IFwiY2xhc3NpZmljYXRpb25DYXRlZ29yeUxhYmVsXCIgfSwgdGhpcy5pMThuLml0ZW1DbGFzc2lmaWNhdGlvbkxhYmVsKSwgaChcImNhbGNpdGUtY29tYm9ib3hcIiwgeyBpZDogXCJjbGFzc2lmaWNhdGlvbkNhdGVnb3J5XCIsIGxhYmVsOiB0aGlzLmkxOG4uaXRlbUNsYXNzaWZpY2F0aW9uQ2F0ZWdvcnlMYWJlbCwgc2VsZWN0aW9uTW9kZTogXCJzaW5nbGVcIiwgc2NhbGU6IFwibVwiLCBvbkNhbGNpdGVDb21ib2JveENoYW5nZTogdGhpcy5jaGFuZ2VDbGFzc2lmaWNhdGlvbkNhdGVnb3J5LmJpbmQodGhpcyksIHZhbHVlOiAoX2EgPSB0aGlzLmNsYXNzaWZpY2F0aW9uVHlwZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnZhbHVlLCBwbGFjZWhvbGRlcjogdGhpcy5pMThuLnNlYXJjaEZvckNhdGVnb3J5IH0sIHRoaXMuY29uZmlndXJlQ2xhc3NpZmljYXRpb25DYXRlZ29yeU1lbnUoKSkpKTtcbiAgICB9XG59O1xuQ2xhc3NpZmljYXRpb25DYXRlZ29yeS5zdHlsZSA9IGl0ZW1DbGFzc2lmaWNhdGlvbkNhdGVnb3J5Q3NzO1xuXG5jb25zdCBpdGVtQ2xhc3NpZmljYXRpb25Db250ZW50Q3NzID0gXCIuaXRlbUNsYXNzaWZpY2F0aW9uQ29udGVudHttYXJnaW46MXJlbX1cIjtcblxuY29uc3QgQ2xhc3NpZmljYXRpb25Db250ZW50ID0gY2xhc3Mge1xuICAgIGNvbnN0cnVjdG9yKGhvc3RSZWYpIHtcbiAgICAgICAgcmVnaXN0ZXJJbnN0YW5jZSh0aGlzLCBob3N0UmVmKTtcbiAgICAgICAgdGhpcy5hcmNnaXNJdGVtQ2xhc3NpZmljYXRpb25Db250ZW50RGlzcGxheU5vdGlmaWNhdGlvbiA9IGNyZWF0ZUV2ZW50KHRoaXMsIFwiYXJjZ2lzSXRlbUNsYXNzaWZpY2F0aW9uQ29udGVudERpc3BsYXlOb3RpZmljYXRpb25cIiwgNyk7XG4gICAgICAgIHRoaXMuYXR0cmlidXRlRWxlbWVudHNDb3B5ID0ge307XG4gICAgICAgIHRoaXMuY3JlYXRlVUlFbGVtZW50cyA9IGFzeW5jIChhdHRyaWJ1dGVJZCwgYXR0cmlidXRlVmFsdWUsIGlzRW5hYmxlZCkgPT4ge1xuICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgbGV0IGF0dHJpYnV0ZUlucHV0RWxlbWVudDtcbiAgICAgICAgICAgIGlmIChpc0VuYWJsZWQpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBsYXlvdXRFbGVtZW50ID0gKChfYSA9IHRoaXMuY2xhc3NpZmljYXRpb25TY2hlbWEubGF5b3V0RWxlbWVudHMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYVthdHRyaWJ1dGVJZF0pIHx8IFwidGV4dFwiO1xuICAgICAgICAgICAgICAgIGNvbnN0IGl0ZW1DbGFzc2lmaWNhdGlvblZhbHVlID0gc3RydWN0dXJlZENsb25lKHRoaXMuaXRlbUNsYXNzaWZpY2F0aW9uVmFsdWUpO1xuICAgICAgICAgICAgICAgIGlmIChsYXlvdXRFbGVtZW50LmluY2x1ZGVzKFwiLXNlbGVjdFwiKSkge1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdmFsdWVFeHByZXNzaW9uUmVzdWx0ID0gYXdhaXQgZXZhbHVhdGVWYWx1ZUV4cHJlc3Npb24oYXR0cmlidXRlSWQsIHRoaXMuY2xhc3NpZmljYXRpb25TY2hlbWEsIEpTT04uc3RyaW5naWZ5KGl0ZW1DbGFzc2lmaWNhdGlvblZhbHVlKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobGF5b3V0RWxlbWVudCA9PT0gXCJtdWx0aS1zZWxlY3RcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZUlucHV0RWxlbWVudCA9IHRoaXMucmVuZGVyTXVsdGlTZWxlY3RFbGVtZW50KHsgYXR0cmlidXRlVmFsdWUsIGl0ZW1DbGFzc2lmaWNhdGlvblZhbHVlLCBhdHRyaWJ1dGVJZCwgdmFsdWVFeHByZXNzaW9uUmVzdWx0IH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAobGF5b3V0RWxlbWVudCA9PT0gXCJtdWx0aS1ncm91cGVkLXNlbGVjdFwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlSW5wdXRFbGVtZW50ID0gdGhpcy5yZW5kZXJHcm91cGVkTXVsdGlTZWxlY3RFbGVtZW50KHsgYXR0cmlidXRlVmFsdWUsIGl0ZW1DbGFzc2lmaWNhdGlvblZhbHVlLCBhdHRyaWJ1dGVJZCwgdmFsdWVFeHByZXNzaW9uUmVzdWx0IH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAobGF5b3V0RWxlbWVudCA9PT0gXCJzaW5nbGUtc2VsZWN0XCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGVJbnB1dEVsZW1lbnQgPSB0aGlzLnJlbmRlclNpbmdsZVNlbGVjdEVsZW1lbnQoeyBhdHRyaWJ1dGVWYWx1ZSwgaXRlbUNsYXNzaWZpY2F0aW9uVmFsdWUsIGF0dHJpYnV0ZUlkLCB2YWx1ZUV4cHJlc3Npb25SZXN1bHQgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFyY2dpc0l0ZW1DbGFzc2lmaWNhdGlvbkNvbnRlbnREaXNwbGF5Tm90aWZpY2F0aW9uLmVtaXQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsZXJ0SW5kaWNhdG9yQWN0aXZlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsZXJ0SW5kaWNhdG9yQ29sb3I6IFwiZGFuZ2VyXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxlcnRJbmRpY2F0b3JJY29uOiBcImV4Y2xhbWF0aW9uLW1hcmstdHJpYW5nbGVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGVydEluZGljYXRvckluZm86IGVycm9yID09PSBudWxsIHx8IGVycm9yID09PSB2b2lkIDAgPyB2b2lkIDAgOiBlcnJvci5tZXNzYWdlXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGxheW91dEVsZW1lbnQgPT09IFwiY2hlY2tib3hcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlSW5wdXRFbGVtZW50ID0gdGhpcy5yZW5kZXJDaGVja2JveCh7IGF0dHJpYnV0ZVZhbHVlLCBpdGVtQ2xhc3NpZmljYXRpb25WYWx1ZSwgYXR0cmlidXRlSWQgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAobGF5b3V0RWxlbWVudCA9PT0gXCJ0ZXh0XCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZUlucHV0RWxlbWVudCA9IHRoaXMucmVuZGVySW5wdXRUZXh0Qm94KHsgYXR0cmlidXRlVmFsdWUsIGl0ZW1DbGFzc2lmaWNhdGlvblZhbHVlLCBhdHRyaWJ1dGVJZCB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChsYXlvdXRFbGVtZW50ID09PSBcImRhdGVcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlSW5wdXRFbGVtZW50ID0gdGhpcy5yZW5kZXJEYXRlUGlja2VyRWxlbWVudCh7IGF0dHJpYnV0ZVZhbHVlLCBpdGVtQ2xhc3NpZmljYXRpb25WYWx1ZSwgYXR0cmlidXRlSWQgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5hdHRyaWJ1dGVFbGVtZW50c0NvcHkgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHRoaXMuYXR0cmlidXRlRWxlbWVudHNDb3B5KSwgeyBbYXR0cmlidXRlSWRdOiBhdHRyaWJ1dGVJbnB1dEVsZW1lbnQgfSk7XG4gICAgICAgICAgICAgICAgdGhpcy5hdHRyaWJ1dGVFbGVtZW50cyA9IHN0cnVjdHVyZWRDbG9uZSh0aGlzLmF0dHJpYnV0ZUVsZW1lbnRzQ29weSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIC8vIGdyb3VwIG11bHRpcGxlIHNlbGVjdGlvbiBjb21ib2JveFxuICAgICAgICB0aGlzLnJlbmRlckdyb3VwZWRNdWx0aVNlbGVjdEVsZW1lbnQgPSAoaW5wdXREYXRhKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gaChcImFyY2dpcy1pdGVtLWNsYXNzaWZpY2F0aW9uLWlucHV0LWdyb3VwZWQtbXVsdGlwbGUtc2VsZWN0aW9uXCIsIHsgaXNTYXZpbmc6IHRoaXMuaXNTYXZpbmcsIGlucHV0RGF0YTogaW5wdXREYXRhIH0pO1xuICAgICAgICB9O1xuICAgICAgICAvLyBzaW5nbGUgc2VsZWN0aW9uIGNvbWJvYm94XG4gICAgICAgIHRoaXMucmVuZGVyU2luZ2xlU2VsZWN0RWxlbWVudCA9IChpbnB1dERhdGEpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBoKFwiYXJjZ2lzLWl0ZW0tY2xhc3NpZmljYXRpb24taW5wdXQtc2luZ2xlLXNlbGVjdGlvblwiLCB7IGlzU2F2aW5nOiB0aGlzLmlzU2F2aW5nLCBpbnB1dERhdGE6IGlucHV0RGF0YSB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgLy8gY2hlY2tib3hcbiAgICAgICAgdGhpcy5yZW5kZXJDaGVja2JveCA9IChpbnB1dERhdGEpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBoKFwiYXJjZ2lzLWl0ZW0tY2xhc3NpZmljYXRpb24taW5wdXQtY2hlY2tib3hcIiwgeyBpc1NhdmluZzogdGhpcy5pc1NhdmluZywgaW5wdXREYXRhOiBpbnB1dERhdGEgfSk7XG4gICAgICAgIH07XG4gICAgICAgIC8vIGlucHV0IHRleHRib3hcbiAgICAgICAgdGhpcy5yZW5kZXJJbnB1dFRleHRCb3ggPSAoaW5wdXREYXRhKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gaChcImFyY2dpcy1pdGVtLWNsYXNzaWZpY2F0aW9uLWlucHV0LXRleHRib3hcIiwgeyBpc1NhdmluZzogdGhpcy5pc1NhdmluZywgaW5wdXREYXRhOiBpbnB1dERhdGEgfSk7XG4gICAgICAgIH07XG4gICAgICAgIC8vIGlucHV0IGRhdGUgcGlja2VyXG4gICAgICAgIHRoaXMucmVuZGVyRGF0ZVBpY2tlckVsZW1lbnQgPSAoaW5wdXREYXRhKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gaChcImFyY2dpcy1pdGVtLWNsYXNzaWZpY2F0aW9uLWlucHV0LWRhdGVcIiwgeyBpc1NhdmluZzogdGhpcy5pc1NhdmluZywgaW5wdXREYXRhOiBpbnB1dERhdGEgfSk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuc3dpdGNoQ2F0ZWdvcnlUYWIgPSAoZSkgPT4ge1xuICAgICAgICAgICAgdGhpcy5zZXRBdHRyaWJ1dGVDYXRlZ29yeShlLnRhcmdldC5zZWxlY3RlZFRpdGxlLmlkKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5yZW5kZXJDYXRlZ29yeVRhYlRpdGxlcyA9ICgpID0+IHtcbiAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgIHJldHVybiAoX2EgPSB0aGlzLmNsYXNzaWZpY2F0aW9uU2NoZW1hLmF0dHJpYnV0ZUNhdGVnb3JpZXMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5tYXAoY2F0ZWdvcnkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBoKFwiY2FsY2l0ZS10YWItdGl0bGVcIiwgeyBzZWxlY3RlZDogdGhpcy5hdHRyaWJ1dGVDYXRlZ29yeSA9PT0gY2F0ZWdvcnksIGtleTogY2F0ZWdvcnksIGlkOiBjYXRlZ29yeSB9LCBjYXRlZ29yeSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5yZW5kZXJDYXRlZ29yeVRhYkNvbnRlbnQgPSAoKSA9PiB7XG4gICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICByZXR1cm4gKF9hID0gdGhpcy5jbGFzc2lmaWNhdGlvblNjaGVtYS5hdHRyaWJ1dGVDYXRlZ29yaWVzKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EubWFwKGNhdGVnb3J5ID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaChcImNhbGNpdGUtdGFiXCIsIHsgY2xhc3M6IFwiY2xhc3NpZmljYXRpb24tdGFiXCIsIHNlbGVjdGVkOiB0aGlzLmF0dHJpYnV0ZUNhdGVnb3J5ID09PSBjYXRlZ29yeSwga2V5OiBgdGFiXyR7Y2F0ZWdvcnl9YCwgaWQ6IGB0YWJfJHtjYXRlZ29yeX1gIH0sIHRoaXMucmVuZGVyQ2xhc3NpZmljYXRpb25Db250ZW50KGNhdGVnb3J5KSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5yZW5kZXJDbGFzc2lmaWNhdGlvbkNvbnRlbnQgPSAoY2F0ZWdvcnkpID0+IHtcbiAgICAgICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgICAgICByZXR1cm4gKF9iID0gKF9hID0gdGhpcy5jbGFzc2lmaWNhdGlvbkNvbnRlbnRBcnIpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYVtjYXRlZ29yeV0pID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5tYXAoKGlucHV0Q29tcG9uZW50LCBpbmRleCkgPT4gKGgoXCJkaXZcIiwgeyBpZDogYCR7Y2F0ZWdvcnl9XyR7aW5kZXh9YCwga2V5OiBgJHtjYXRlZ29yeX1fJHtpbmRleH1gIH0sIGlucHV0Q29tcG9uZW50KSkpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLml0ZW1DbGFzc2lmaWNhdGlvblZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmNsYXNzaWZpY2F0aW9uU2NoZW1hID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmF0dHJpYnV0ZUNhdGVnb3J5ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLnNldEF0dHJpYnV0ZUNhdGVnb3J5ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLnNldEl0ZW1DbGFzc2lmaWNhdGlvblZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmlzU2F2aW5nID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmF0dHJpYnV0ZUVsZW1lbnRzID0gbnVsbDtcbiAgICAgICAgdGhpcy5jbGFzc2lmaWNhdGlvbkNvbnRlbnRBcnIgPSBudWxsO1xuICAgIH1cbiAgICBjb21wb25lbnRXaWxsTG9hZCgpIHtcbiAgICAgICAgdGhpcy5jcmVhdGVDbGFzc2lmaWNhdGlvbkNvbnRlbnQoKTtcbiAgICB9XG4gICAgYXN5bmMgY3JlYXRlQ2xhc3NpZmljYXRpb25Db250ZW50KCkge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICB0aGlzLmF0dHJpYnV0ZUVsZW1lbnRzQ29weSA9IHt9O1xuICAgICAgICBpZiAoKF9hID0gdGhpcy5jbGFzc2lmaWNhdGlvblNjaGVtYSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmF0dHJpYnV0ZXMpIHtcbiAgICAgICAgICAgIGNvbnN0IHNvcnRlZEF0dHJpYnV0ZXMgPSBPYmplY3QuZW50cmllcygoX2IgPSB0aGlzLmNsYXNzaWZpY2F0aW9uU2NoZW1hKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuYXR0cmlidXRlcykuc29ydCgoWywgYV0sIFssIGJdKSA9PiBhWydwb3NpdGlvbiddIC0gYlsncG9zaXRpb24nXSk7XG4gICAgICAgICAgICBmb3IgKGxldCBpbmRleCBpbiBzb3J0ZWRBdHRyaWJ1dGVzKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgYXR0cmlidXRlSWQgPSBzb3J0ZWRBdHRyaWJ1dGVzW2luZGV4XVswXTtcbiAgICAgICAgICAgICAgICBjb25zdCBhdHRyaWJ1dGVWYWx1ZSA9IHNvcnRlZEF0dHJpYnV0ZXNbaW5kZXhdWzFdO1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGlzRW5hYmxlZCA9IGF3YWl0IGlzQXR0cmlidXRlRW5hYmxlZChhdHRyaWJ1dGVJZCwgdGhpcy5jbGFzc2lmaWNhdGlvblNjaGVtYSwgSlNPTi5zdHJpbmdpZnkodGhpcy5pdGVtQ2xhc3NpZmljYXRpb25WYWx1ZSkpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNyZWF0ZVVJRWxlbWVudHMoYXR0cmlidXRlSWQsIGF0dHJpYnV0ZVZhbHVlLCBpc0VuYWJsZWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hcmNnaXNJdGVtQ2xhc3NpZmljYXRpb25Db250ZW50RGlzcGxheU5vdGlmaWNhdGlvbi5lbWl0KHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsZXJ0SW5kaWNhdG9yQWN0aXZlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgYWxlcnRJbmRpY2F0b3JDb2xvcjogXCJkYW5nZXJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsZXJ0SW5kaWNhdG9ySWNvbjogXCJleGNsYW1hdGlvbi1tYXJrLXRyaWFuZ2xlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBhbGVydEluZGljYXRvckluZm86IGVycm9yID09PSBudWxsIHx8IGVycm9yID09PSB2b2lkIDAgPyB2b2lkIDAgOiBlcnJvci5tZXNzYWdlXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgaGFuZGxlQXR0cmlidXRlRWxlbWVudHNDaGFuZ2UoKSB7XG4gICAgICAgIGNvbnN0IHByZVJlbmRlckNsYXNzaWZpY2F0aW9uQ29udGVudCA9IChjbGFzc2lmaWNhdGlvblNjaGVtYSkgPT4ge1xuICAgICAgICAgICAgLy8gVGhyZWUgdHlwZXM6IFwiR2VuZXJhbFwiLCBcIk5lZWQgdG8ga25vd1wiXG4gICAgICAgICAgICBjb25zdCBjbGFzc2lmaWNhdGlvbkNvbnRlbnRBcnJDb3B5ID0ge307XG4gICAgICAgICAgICBjbGFzc2lmaWNhdGlvblNjaGVtYSA9PT0gbnVsbCB8fCBjbGFzc2lmaWNhdGlvblNjaGVtYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogY2xhc3NpZmljYXRpb25TY2hlbWEuYXR0cmlidXRlQ2F0ZWdvcmllcy5mb3JFYWNoKHZhbHVlID0+IGNsYXNzaWZpY2F0aW9uQ29udGVudEFyckNvcHlbdmFsdWVdID0gW10pO1xuICAgICAgICAgICAgY29uc3Qgc29ydGVkQXR0cmlidXRlcyA9IE9iamVjdC5lbnRyaWVzKGNsYXNzaWZpY2F0aW9uU2NoZW1hID09PSBudWxsIHx8IGNsYXNzaWZpY2F0aW9uU2NoZW1hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBjbGFzc2lmaWNhdGlvblNjaGVtYS5hdHRyaWJ1dGVzKS5zb3J0KChbLCBhXSwgWywgYl0pID0+IGFbJ3Bvc2l0aW9uJ10gLSBiWydwb3NpdGlvbiddKTtcbiAgICAgICAgICAgIHNvcnRlZEF0dHJpYnV0ZXMgPT09IG51bGwgfHwgc29ydGVkQXR0cmlidXRlcyA9PT0gdm9pZCAwID8gdm9pZCAwIDogc29ydGVkQXR0cmlidXRlcy5mb3JFYWNoKChbYXR0cmlidXRlSWQsIGF0dHJpYnV0ZVZhbHVlXSkgPT4ge1xuICAgICAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgICAgICBjb25zdCBhdHRyaWJ1dGUgPSB0aGlzLmF0dHJpYnV0ZUVsZW1lbnRzW2F0dHJpYnV0ZUlkXTtcbiAgICAgICAgICAgICAgICBpZiAoISFhdHRyaWJ1dGUpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY2F0ZWdvcnlOYW1lID0gKChfYSA9IGF0dHJpYnV0ZVZhbHVlID09PSBudWxsIHx8IGF0dHJpYnV0ZVZhbHVlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBhdHRyaWJ1dGVWYWx1ZS5hdHRyaWJ1dGVDYXRlZ29yeSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLm5hbWUpIHx8IFwiRGVmYXVsdFwiO1xuICAgICAgICAgICAgICAgICAgICBjbGFzc2lmaWNhdGlvbkNvbnRlbnRBcnJDb3B5W2NhdGVnb3J5TmFtZV0ucHVzaChhdHRyaWJ1dGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5jbGFzc2lmaWNhdGlvbkNvbnRlbnRBcnIgPSBzdHJ1Y3R1cmVkQ2xvbmUoY2xhc3NpZmljYXRpb25Db250ZW50QXJyQ29weSk7XG4gICAgICAgIH07XG4gICAgICAgIGlmICghIXRoaXMuYXR0cmlidXRlRWxlbWVudHMpIHtcbiAgICAgICAgICAgIHByZVJlbmRlckNsYXNzaWZpY2F0aW9uQ29udGVudCh0aGlzLmNsYXNzaWZpY2F0aW9uU2NoZW1hKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBtdWx0aXBsZSBzZWxlY3Rpb24gY29tYm9ib3hcbiAgICByZW5kZXJNdWx0aVNlbGVjdEVsZW1lbnQoaW5wdXREYXRhKSB7XG4gICAgICAgIHJldHVybiBoKFwiYXJjZ2lzLWl0ZW0tY2xhc3NpZmljYXRpb24taW5wdXQtbXVsdGlwbGUtc2VsZWN0aW9uXCIsIHsgaXNTYXZpbmc6IHRoaXMuaXNTYXZpbmcsIGlucHV0RGF0YTogaW5wdXREYXRhIH0pO1xuICAgIH1cbiAgICBjaGFuZ2VDbGFzc2lmaWNhdGlvblZhbChpdGVtQ2xhc3NpZmljYXRpb25WYWx1ZSkge1xuICAgICAgICB0aGlzLnNldEl0ZW1DbGFzc2lmaWNhdGlvblZhbHVlKGl0ZW1DbGFzc2lmaWNhdGlvblZhbHVlLmRldGFpbCk7XG4gICAgfVxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuIChoKFwiZGl2XCIsIHsgY2xhc3M6IFwiaXRlbUNsYXNzaWZpY2F0aW9uQ29udGVudFwiIH0sIGgoXCJjYWxjaXRlLXRhYnNcIiwgbnVsbCwgaChcImNhbGNpdGUtdGFiLW5hdlwiLCB7IHNsb3Q6IFwidGl0bGUtZ3JvdXBcIiwgb25DYWxjaXRlVGFiQ2hhbmdlOiB0aGlzLnN3aXRjaENhdGVnb3J5VGFiLmJpbmQodGhpcykgfSwgdGhpcy5yZW5kZXJDYXRlZ29yeVRhYlRpdGxlcygpKSwgdGhpcy5yZW5kZXJDYXRlZ29yeVRhYkNvbnRlbnQoKSkpKTtcbiAgICB9XG4gICAgc3RhdGljIGdldCB3YXRjaGVycygpIHsgcmV0dXJuIHtcbiAgICAgICAgXCJpdGVtQ2xhc3NpZmljYXRpb25WYWx1ZVwiOiBbXCJjcmVhdGVDbGFzc2lmaWNhdGlvbkNvbnRlbnRcIl0sXG4gICAgICAgIFwiYXR0cmlidXRlRWxlbWVudHNcIjogW1wiaGFuZGxlQXR0cmlidXRlRWxlbWVudHNDaGFuZ2VcIl1cbiAgICB9OyB9XG59O1xuQ2xhc3NpZmljYXRpb25Db250ZW50LnN0eWxlID0gaXRlbUNsYXNzaWZpY2F0aW9uQ29udGVudENzcztcblxuY29uc3QgaXRlbUNsYXNzaWZpY2F0aW9uSW5mb0NzcyA9IFwiLml0ZW1DbGFzc2lmaWNhdGlvbkluZm97bWFyZ2luOjEuMjVyZW19LmNsYXNzaWZpY2F0aW9uLWluZm8tZGVzY3t3b3JkLXdyYXA6YnJlYWstd29yZDttYXJnaW4tdG9wOjB9XCI7XG5cbmNvbnN0IENsYXNzaWZpY2F0aW9uSW5mbyA9IGNsYXNzIHtcbiAgICBjb25zdHJ1Y3Rvcihob3N0UmVmKSB7XG4gICAgICAgIHJlZ2lzdGVySW5zdGFuY2UodGhpcywgaG9zdFJlZik7XG4gICAgICAgIHRoaXMuaTE4biA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5pdGVtQ2xhc3NpZmljYXRpb25WYWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5jbGFzc2lmaWNhdGlvblNjaGVtYSA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgZ2V0Q2xhc3NpZmljYXRpb25Db2xvcigpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBjb25zdCBjbGFzc2lmaWNhdGlvblR5cGUgPSAoX2EgPSB0aGlzLmNsYXNzaWZpY2F0aW9uU2NoZW1hKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY2xhc3NpZmljYXRpb25zLmZpbmQodHlwZSA9PiB7IHZhciBfYTsgcmV0dXJuIHR5cGUuaWQgPT0gKChfYSA9IHRoaXMuaXRlbUNsYXNzaWZpY2F0aW9uVmFsdWUpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jbGFzc2lmaWNhdGlvbik7IH0pO1xuICAgICAgICByZXR1cm4gKGNsYXNzaWZpY2F0aW9uVHlwZSA9PT0gbnVsbCB8fCBjbGFzc2lmaWNhdGlvblR5cGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGNsYXNzaWZpY2F0aW9uVHlwZS5jb2xvcikgfHwgXCJHcmVlblwiO1xuICAgIH1cbiAgICBlbmNvZGVUb0RlbGltaXRlZFN0cmluZygpIHtcbiAgICAgICAgdmFyIF9hLCBfYiwgX2M7XG4gICAgICAgIGxldCByZXN1bHQgPSAnJztcbiAgICAgICAgaWYgKChfYSA9IHRoaXMuaXRlbUNsYXNzaWZpY2F0aW9uVmFsdWUpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jbGFzc2lmaWNhdGlvbikge1xuICAgICAgICAgICAgcmVzdWx0ID0gYCR7cmVzdWx0fWNsYXNzaWZpY2F0aW9uOjoke3RoaXMuaXRlbUNsYXNzaWZpY2F0aW9uVmFsdWUuY2xhc3NpZmljYXRpb259Ly9gO1xuICAgICAgICB9XG4gICAgICAgIGlmICgoX2IgPSB0aGlzLmNsYXNzaWZpY2F0aW9uU2NoZW1hKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuYXR0cmlidXRlcykge1xuICAgICAgICAgICAgY29uc3Qgc29ydGVkQXR0cmlidXRlcyA9IChfYyA9IE9iamVjdC5lbnRyaWVzKHRoaXMuY2xhc3NpZmljYXRpb25TY2hlbWEuYXR0cmlidXRlcykpID09PSBudWxsIHx8IF9jID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYy5zb3J0KChbLCBhXSwgWywgYl0pID0+IGFbXCJwb3NpdGlvblwiXSAtIGJbXCJwb3NpdGlvblwiXSk7XG4gICAgICAgICAgICBzb3J0ZWRBdHRyaWJ1dGVzLmZvckVhY2goKFtrZXldKSA9PiB7XG4gICAgICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgICAgIGlmICghISgoX2EgPSB0aGlzLml0ZW1DbGFzc2lmaWNhdGlvblZhbHVlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Fba2V5XSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY2xhc3NpZmljYXRpb25WYWx1ZVN0ciA9IHRoaXMuY2xhc3NpZmljYXRpb25TY2hlbWEubGF5b3V0RWxlbWVudHNba2V5XS5pbmNsdWRlcyhcIm11bHRpXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICA/XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pdGVtQ2xhc3NpZmljYXRpb25WYWx1ZVtrZXldLmpvaW4oXCI7XCIpXG4gICAgICAgICAgICAgICAgICAgICAgICA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pdGVtQ2xhc3NpZmljYXRpb25WYWx1ZVtrZXldO1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBgJHtyZXN1bHR9JHtrZXl9Ojoke2NsYXNzaWZpY2F0aW9uVmFsdWVTdHJ9Ly9gO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuIChoKFwiZGl2XCIsIHsgY2xhc3M6IFwiaXRlbUNsYXNzaWZpY2F0aW9uSW5mb1wiIH0sIGgoXCJsYWJlbFwiLCB7IGh0bWxGb3I6IFwiY2xhc3NpZmljYXRpb25JbmZvXCIsIGlkOiBcImNsYXNzaWZpY2F0aW9uSW5mb0xhYmVsXCIgfSwgdGhpcy5pMThuLmN1cnJlbnRTZWxlY3Rpb25zKSwgaChcImRpdlwiLCB7IGlkOiBcImNsYXNzaWZpY2F0aW9uSW5mb1wiLCBzdHlsZTogeyBiYWNrZ3JvdW5kQ29sb3I6IHRoaXMuZ2V0Q2xhc3NpZmljYXRpb25Db2xvcigpIH0gfSwgaChcInBcIiwgeyBjbGFzczogXCJjbGFzc2lmaWNhdGlvbi1pbmZvLWRlc2NcIiB9LCB0aGlzLmVuY29kZVRvRGVsaW1pdGVkU3RyaW5nKCkpKSkpO1xuICAgIH1cbn07XG5DbGFzc2lmaWNhdGlvbkluZm8uc3R5bGUgPSBpdGVtQ2xhc3NpZmljYXRpb25JbmZvQ3NzO1xuXG5jb25zdCBpdGVtQ2xhc3NpZmljYXRpb25Ob3RpZmljYXRpb25Dc3MgPSBcIi5jbGFzc2lmaWNhdGlvbi1ub3RpZmljYXRpb24taGFuZGxlcnt6LWluZGV4OjkwMDB9XCI7XG5cbmNvbnN0IENsYXNzaWZpY2F0aW9uTm90aWZpY2F0aW9uID0gY2xhc3Mge1xuICAgIGNvbnN0cnVjdG9yKGhvc3RSZWYpIHtcbiAgICAgICAgcmVnaXN0ZXJJbnN0YW5jZSh0aGlzLCBob3N0UmVmKTtcbiAgICAgICAgdGhpcy5hcmNnaXNJdGVtQ2xhc3NpZmljYXRpb25Ob3RpZmljYXRpb25DbG9zZSA9IGNyZWF0ZUV2ZW50KHRoaXMsIFwiYXJjZ2lzSXRlbUNsYXNzaWZpY2F0aW9uTm90aWZpY2F0aW9uQ2xvc2VcIiwgNyk7XG4gICAgICAgIHRoaXMuY2xvc2VNb2RhbCA9ICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuYXJjZ2lzSXRlbUNsYXNzaWZpY2F0aW9uTm90aWZpY2F0aW9uQ2xvc2UuZW1pdChmYWxzZSk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuaTE4biA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5hbGVydEluZGljYXRvciA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAvLyBOb3RpZmljYXRpb24gbW9kYWwgYWZ0ZXIgdGhlIHJlc3BvbnNlIG9mIHRoZSB3ZWIgcmVxdWVzdCBoYXMgYmVlbiByZWNlaXZlZFxuICAgICAgICBoKFwiY2FsY2l0ZS1hbGVydFwiLCB7IGNsYXNzOiBcImNsYXNzaWZpY2F0aW9uLW5vdGlmaWNhdGlvbi1oYW5kbGVyXCIsIGljb246IHRoaXMuYWxlcnRJbmRpY2F0b3IuYWxlcnRJbmRpY2F0b3JJY29uLCBsYWJlbDogdGhpcy5pMThuLmNsYXNzaWZpY2F0aW9uTm90aWZpY2F0aW9uSGFuZGxlciwgc2NhbGU6IFwibVwiLCBhdXRvQ2xvc2U6IHRydWUsIGF1dG9DbG9zZUR1cmF0aW9uOiBcIm1lZGl1bVwiLCBvcGVuOiB0aGlzLmFsZXJ0SW5kaWNhdG9yLmFsZXJ0SW5kaWNhdG9yQWN0aXZlLCBraW5kOiB0aGlzLmFsZXJ0SW5kaWNhdG9yLmFsZXJ0SW5kaWNhdG9yVHlwZSwgXCJhcmlhLWhpZGRlblwiOiAhdGhpcy5hbGVydEluZGljYXRvci5hbGVydEluZGljYXRvckFjdGl2ZSwgb25DYWxjaXRlQWxlcnRDbG9zZTogdGhpcy5jbG9zZU1vZGFsLmJpbmQodGhpcykgfSwgaChcImRpdlwiLCB7IHNsb3Q6IFwibWVzc2FnZVwiIH0sIHRoaXMuYWxlcnRJbmRpY2F0b3IuYWxlcnRJbmRpY2F0b3JJbmZvKSkpO1xuICAgIH1cbn07XG5DbGFzc2lmaWNhdGlvbk5vdGlmaWNhdGlvbi5zdHlsZSA9IGl0ZW1DbGFzc2lmaWNhdGlvbk5vdGlmaWNhdGlvbkNzcztcblxuZXhwb3J0IHsgQ2xhc3NpZmljYXRpb25DYXRlZ29yeSBhcyBpdGVtX2NsYXNzaWZpY2F0aW9uX2NhdGVnb3J5LCBDbGFzc2lmaWNhdGlvbkNvbnRlbnQgYXMgaXRlbV9jbGFzc2lmaWNhdGlvbl9jb250ZW50LCBDbGFzc2lmaWNhdGlvbkluZm8gYXMgaXRlbV9jbGFzc2lmaWNhdGlvbl9pbmZvLCBDbGFzc2lmaWNhdGlvbk5vdGlmaWNhdGlvbiBhcyBpdGVtX2NsYXNzaWZpY2F0aW9uX25vdGlmaWNhdGlvbiB9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1pdGVtLWNsYXNzaWZpY2F0aW9uLWNhdGVnb3J5XzQuZW50cnkuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9