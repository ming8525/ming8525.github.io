"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_portal-68dbcb"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/config-75adf962.js":
/*!************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/config-75adf962.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   c: () => (/* binding */ configState),
/* harmony export */   o: () => (/* binding */ onConfigChange)
/* harmony export */ });
/* harmony import */ var _index_05956cab_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-05956cab.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-05956cab.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */


const configStore = (0,_index_05956cab_js__WEBPACK_IMPORTED_MODULE_0__.c)({
    portal: null,
    user: null,
    api: 4,
    scale: "m"
});
const configState = configStore.state;
const onConfigChange = configStore.onChange;



//# sourceMappingURL=config-75adf962.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-44de8fcf.js":
/*!****************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-44de8fcf.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ arrayToLookupMap),
/* harmony export */   b: () => (/* binding */ unique),
/* harmony export */   c: () => (/* binding */ throttle),
/* harmony export */   d: () => (/* binding */ debounce),
/* harmony export */   e: () => (/* binding */ escapeRegExp),
/* harmony export */   f: () => (/* binding */ arraysAreEquivalent),
/* harmony export */   g: () => (/* binding */ chunk),
/* harmony export */   i: () => (/* binding */ isDefined),
/* harmony export */   m: () => (/* binding */ minDelay),
/* harmony export */   t: () => (/* binding */ timeout),
/* harmony export */   u: () => (/* binding */ uniqueBy)
/* harmony export */ });
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */
/**
 * Call a function only after it has not been called for n milliseconds
 * @param fn    - function to call
 * @param delay - delay in milliseconds
 */
const debounce = (fn, delay) => {
    let timeout;
    let status = "idle";
    function flush(...args) {
        status = "flushed";
        return debounced(...args);
    }
    function invoke(...args) {
        status = "invoked";
        return debounced(...args);
    }
    function cancel(...args) {
        status = "cancelled";
        return debounced(...args);
    }
    function getStatus() {
        return status;
    }
    const debounced = (...args) => new Promise((resolve) => {
        switch (status) {
            case "flushed":
                status = "idle";
                if (timeout) {
                    clearTimeout(timeout);
                    resolve(fn(...args));
                }
                else {
                    resolve(null);
                }
                break;
            case "invoked":
                clearTimeout(timeout);
                status = "idle";
                resolve(fn(...args));
                break;
            case "cancelled":
                clearTimeout(timeout);
                status = "idle";
                resolve(null);
                break;
            default:
                if (timeout) {
                    clearTimeout(timeout);
                }
                status = "pending";
                timeout = setTimeout(() => {
                    status = "idle";
                    return resolve(fn(...args));
                }, delay);
                break;
        }
    });
    debounced.flush = flush;
    debounced.invoke = invoke;
    debounced.cancel = cancel;
    debounced.getStatus = getStatus;
    return debounced;
};
/**
 * Call a function only after n milliseconds have elapsed
 * @param fn    - function to call
 * @param delay - delay in milliseconds
 */
const throttle = (fn, delay) => {
    let timeout;
    return (...args) => new Promise((resolve) => {
        if (timeout) {
            return;
        }
        timeout = setTimeout(() => {
            clearTimeout(timeout);
            timeout = undefined;
            resolve(fn(...args));
        }, delay);
    });
};
function escapeRegExp(str) {
    return str.replace(/[.*+?^${}()|[\]\\]/g, "\\$&"); // $& means the whole matched string
}
function isDefined(value) {
    return value !== undefined && value !== null;
}
/**
 * Set a minimum time for a promise to resolve (useful for preventing flash of loaders)
 */
async function minDelay(promise, minDelay) {
    await Promise.all([promise, timeout(minDelay)]);
    return promise;
}
/**
 * Helper method to inline setTimeout as an await in async functions
 */
function timeout(ms) {
    return new Promise((resolve) => setTimeout(resolve, ms));
}
const arrayToLookupMap = (dataArr, getKeyAndItem) => Object.fromEntries((dataArr || []).map((item) => {
    const { key, data } = getKeyAndItem(item);
    return [key, data];
}));
/**
 * Check whether two arrays have the same number of elements
 * and whether they contain the same elements
 * regardless of order
 */
const arraysAreEquivalent = (arr1, arr2) => arr1.length === arr2.length && arr1.reduce((memo, str) => memo && arr2.indexOf(str) > -1, true);
function uniqueBy(myArr, getItemId) {
    const resultArr = [];
    const lookupMap = {};
    myArr.forEach((item) => {
        const id = getItemId(item);
        if (lookupMap[id] == null) {
            lookupMap[id] = item;
            resultArr.push(item);
        }
    });
    return resultArr;
}
function unique(myArr) {
    const primitives = { boolean: {}, number: {}, string: {} };
    const objs = [];
    return myArr.filter((item) => {
        let type = typeof item;
        if (type in primitives) {
            return primitives[type].hasOwnProperty(item) ? false : (primitives[type][item] = true);
        }
        else {
            return objs.indexOf(item) >= 0 ? false : objs.push(item);
        }
    });
}
const chunk = (arr, size) => [...Array(Math.ceil(arr.length / size))].map((_, i) => arr.slice(size * i, size + size * i));



//# sourceMappingURL=functional-44de8fcf.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-05956cab.js":
/*!***********************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-05956cab.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   c: () => (/* binding */ createStore)
/* harmony export */ });
/* harmony import */ var _index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-e3bf7da7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-e3bf7da7.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */


const appendToMap = (map, propName, value) => {
    const items = map.get(propName);
    if (!items) {
        map.set(propName, [value]);
    }
    else if (!items.includes(value)) {
        items.push(value);
    }
};
const debounce = (fn, ms) => {
    let timeoutId;
    return (...args) => {
        if (timeoutId) {
            clearTimeout(timeoutId);
        }
        timeoutId = setTimeout(() => {
            timeoutId = 0;
            fn(...args);
        }, ms);
    };
};

/**
 * Check if a possible element isConnected.
 * The property might not be there, so we check for it.
 *
 * We want it to return true if isConnected is not a property,
 * otherwise we would remove these elements and would not update.
 *
 * Better leak in Edge than to be useless.
 */
const isConnected = (maybeElement) => !('isConnected' in maybeElement) || maybeElement.isConnected;
const cleanupElements = debounce((map) => {
    for (let key of map.keys()) {
        map.set(key, map.get(key).filter(isConnected));
    }
}, 2000);
const stencilSubscription = () => {
    if (typeof _index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.g !== 'function') {
        // If we are not in a stencil project, we do nothing.
        // This function is not really exported by @stencil/core.
        return {};
    }
    const elmsToUpdate = new Map();
    return {
        dispose: () => elmsToUpdate.clear(),
        get: (propName) => {
            const elm = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.g)();
            if (elm) {
                appendToMap(elmsToUpdate, propName, elm);
            }
        },
        set: (propName) => {
            const elements = elmsToUpdate.get(propName);
            if (elements) {
                elmsToUpdate.set(propName, elements.filter(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f));
            }
            cleanupElements(elmsToUpdate);
        },
        reset: () => {
            elmsToUpdate.forEach((elms) => elms.forEach(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f));
            cleanupElements(elmsToUpdate);
        },
    };
};

const unwrap = (val) => (typeof val === 'function' ? val() : val);
const createObservableMap = (defaultState, shouldUpdate = (a, b) => a !== b) => {
    const unwrappedState = unwrap(defaultState);
    let states = new Map(Object.entries(unwrappedState !== null && unwrappedState !== void 0 ? unwrappedState : {}));
    const handlers = {
        dispose: [],
        get: [],
        set: [],
        reset: [],
    };
    const reset = () => {
        var _a;
        // When resetting the state, the default state may be a function - unwrap it to invoke it.
        // otherwise, the state won't be properly reset
        states = new Map(Object.entries((_a = unwrap(defaultState)) !== null && _a !== void 0 ? _a : {}));
        handlers.reset.forEach((cb) => cb());
    };
    const dispose = () => {
        // Call first dispose as resetting the state would
        // cause less updates ;)
        handlers.dispose.forEach((cb) => cb());
        reset();
    };
    const get = (propName) => {
        handlers.get.forEach((cb) => cb(propName));
        return states.get(propName);
    };
    const set = (propName, value) => {
        const oldValue = states.get(propName);
        if (shouldUpdate(value, oldValue, propName)) {
            states.set(propName, value);
            handlers.set.forEach((cb) => cb(propName, value, oldValue));
        }
    };
    const state = (typeof Proxy === 'undefined'
        ? {}
        : new Proxy(unwrappedState, {
            get(_, propName) {
                return get(propName);
            },
            ownKeys(_) {
                return Array.from(states.keys());
            },
            getOwnPropertyDescriptor() {
                return {
                    enumerable: true,
                    configurable: true,
                };
            },
            has(_, propName) {
                return states.has(propName);
            },
            set(_, propName, value) {
                set(propName, value);
                return true;
            },
        }));
    const on = (eventName, callback) => {
        handlers[eventName].push(callback);
        return () => {
            removeFromArray(handlers[eventName], callback);
        };
    };
    const onChange = (propName, cb) => {
        const unSet = on('set', (key, newValue) => {
            if (key === propName) {
                cb(newValue);
            }
        });
        // We need to unwrap the defaultState because it might be a function.
        // Otherwise we might not be sending the right reset value.
        const unReset = on('reset', () => cb(unwrap(defaultState)[propName]));
        return () => {
            unSet();
            unReset();
        };
    };
    const use = (...subscriptions) => {
        const unsubs = subscriptions.reduce((unsubs, subscription) => {
            if (subscription.set) {
                unsubs.push(on('set', subscription.set));
            }
            if (subscription.get) {
                unsubs.push(on('get', subscription.get));
            }
            if (subscription.reset) {
                unsubs.push(on('reset', subscription.reset));
            }
            if (subscription.dispose) {
                unsubs.push(on('dispose', subscription.dispose));
            }
            return unsubs;
        }, []);
        return () => unsubs.forEach((unsub) => unsub());
    };
    const forceUpdate = (key) => {
        const oldValue = states.get(key);
        handlers.set.forEach((cb) => cb(key, oldValue, oldValue));
    };
    return {
        state,
        get,
        set,
        on,
        onChange,
        use,
        dispose,
        reset,
        forceUpdate,
    };
};
const removeFromArray = (array, item) => {
    const index = array.indexOf(item);
    if (index >= 0) {
        array[index] = array[array.length - 1];
        array.length--;
    }
};

const createStore = (defaultState, shouldUpdate) => {
    const map = createObservableMap(defaultState, shouldUpdate);
    map.use(stencilSubscription());
    return map;
};



//# sourceMappingURL=index-05956cab.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/portal-d518b571.js":
/*!************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/portal-d518b571.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ getPortalRestInfo),
/* harmony export */   b: () => (/* binding */ getPortalRestInfoFromUrl),
/* harmony export */   c: () => (/* binding */ clearCache),
/* harmony export */   d: () => (/* binding */ formRequest),
/* harmony export */   e: () => (/* binding */ getToken),
/* harmony export */   f: () => (/* binding */ fromCache),
/* harmony export */   g: () => (/* binding */ getRestBaseUrl),
/* harmony export */   h: () => (/* binding */ getPortalToken),
/* harmony export */   i: () => (/* binding */ isWebTierAuth),
/* harmony export */   j: () => (/* binding */ hasModernHomePageEnabled),
/* harmony export */   k: () => (/* binding */ getHomePageConfig),
/* harmony export */   l: () => (/* binding */ getMemberDefaults),
/* harmony export */   m: () => (/* binding */ isPortalBackedBySDS),
/* harmony export */   n: () => (/* binding */ getUserId),
/* harmony export */   o: () => (/* binding */ inCache),
/* harmony export */   p: () => (/* binding */ pollForStatus),
/* harmony export */   q: () => (/* binding */ queryGroups),
/* harmony export */   r: () => (/* binding */ request),
/* harmony export */   s: () => (/* binding */ getPortalRestBaseUrl),
/* harmony export */   t: () => (/* binding */ getFederatedServers),
/* harmony export */   u: () => (/* binding */ isKubernetes)
/* harmony export */ });
/* harmony import */ var _loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./loadModules-b4ac1247.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-b4ac1247.js");
/* harmony import */ var _config_75adf962_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./config-75adf962.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/config-75adf962.js");
/* harmony import */ var _url_4c3ae54c_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./url-4c3ae54c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/url-4c3ae54c.js");
/* harmony import */ var _functional_44de8fcf_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./functional-44de8fcf.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-44de8fcf.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */





function getToken(portal) {
    var _a, _b, _c, _d;
    portal !== null && portal !== void 0 ? portal : (portal = _config_75adf962_js__WEBPACK_IMPORTED_MODULE_1__.c === null || _config_75adf962_js__WEBPACK_IMPORTED_MODULE_1__.c === void 0 ? void 0 : _config_75adf962_js__WEBPACK_IMPORTED_MODULE_1__.c.portal);
    return (
    // @ts-ignore
    ((_a = portal === null || portal === void 0 ? void 0 : portal.credential) === null || _a === void 0 ? void 0 : _a.token) || (portal === null || portal === void 0 ? void 0 : portal.token) || ((_c = (_b = portal === null || portal === void 0 ? void 0 : portal.user) === null || _b === void 0 ? void 0 : _b.credential) === null || _c === void 0 ? void 0 : _c.token) || ((_d = portal === null || portal === void 0 ? void 0 : portal.portalUser) === null || _d === void 0 ? void 0 : _d.token) || "");
}

function useSSL(url) {
    var _a;
    const { config } = _config_75adf962_js__WEBPACK_IMPORTED_MODULE_1__.c;
    // if user logged in via pop-up in viewer, the page might still be under http but the self response might have allSSL
    if (window.location.protocol === "https:" || ((_a = config === null || config === void 0 ? void 0 : config.self) === null || _a === void 0 ? void 0 : _a.allSSL) === true) {
        return url.replace("http:", "https:");
    }
    return url;
}
async function formRequest(url, form, options = {}, method) {
    const [esriRequest] = await (0,_loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_0__.l)(["esri/request"]);
    const { api } = _config_75adf962_js__WEBPACK_IMPORTED_MODULE_1__.c;
    if (!url.includes("f=")) {
        form.append("f", "json");
    }
    const token = getToken();
    if (token && !form.has("token")) {
        form.append("token", token);
    }
    return new Promise((resolve, reject) => {
        if (api === 3) {
            const request = { url: options.addSSL === false ? url : useSSL(url), form, timeout: options.timeout || 0 };
            const v3Options = method === "post" ? Object.assign({ usePost: true }, options) : options;
            esriRequest(request, v3Options).then(resolve, reject);
        }
        else {
            esriRequest(url, Object.assign(Object.assign({ body: form }, options), { timeout: options.timeout || 0, method: method || "auto" }))
                .then((response) => {
                resolve(response.data);
            })
                .catch((error) => reject(error));
        }
    });
}
async function request(url, params = {}, options = {}, method, extraOption) {
    const [esriRequest] = await (0,_loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_0__.l)(["esri/request"]);
    // TODO: refactor this dude out
    const { api, portal } = _config_75adf962_js__WEBPACK_IMPORTED_MODULE_1__.c;
    const { customToken, addTokenManually, addSSL } = options;
    const content = Object.assign({}, params);
    if (!url.includes("f=") && (extraOption === null || extraOption === void 0 ? void 0 : extraOption.excludeJson) !== true) {
        content.f = "json";
    }
    if (customToken) {
        content.token = customToken;
    }
    else {
        if (addTokenManually !== false) {
            const token = await getPortalToken(portal, api);
            content.token = token;
        }
    }
    const requestUrl = addSSL === false ? url : useSSL(url);
    if (api === 3) {
        const v3Request = Object.assign({ url: requestUrl, content, timeout: options.timeout || 0 }, extraOption === null || extraOption === void 0 ? void 0 : extraOption.v3Request);
        if (options.withCredentials) {
            v3Request.withCredentials = options.withCredentials;
        }
        const v3Options = method === "post" ? Object.assign({ usePost: true }, options) : options;
        return esriRequest(v3Request, v3Options);
    }
    else {
        const v4Options = Object.assign(Object.assign(Object.assign({ query: content, method: method || "auto" }, options), { timeout: options.timeout || 0 }), ((options === null || options === void 0 ? void 0 : options.disableIdentityLookup) ? { authMode: "anonymous" } : {}));
        const response = await esriRequest(requestUrl, v4Options);
        return response.data;
    }
}
// https://devtopia.esri.com/WebGIS/arcgis-portal-app/blob/master/src/js/arcgisonline/pages/item/widgets/typeOptions/featureSupport.ts#L37-L66
const ASYNC_INTERVALS = [
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 15, 15, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 120
];
function asyncIntervalTimerFunction(callCount) {
    // if call count out of bounds, use last interval, otherwise use interval at callCount
    const index = callCount > -1 && callCount < ASYNC_INTERVALS.length - 1 ? callCount : ASYNC_INTERVALS.length - 1;
    // ASYNC_INTERVALS defined in seconds, convert to milliseconds on return
    return ASYNC_INTERVALS[index] * 1000;
}
const pollForStatus = async (url, options, method) => {
    var _a, _b;
    const pendingStatuses = (_a = options === null || options === void 0 ? void 0 : options.pendingStatuses) !== null && _a !== void 0 ? _a : ["processing", "partial", "Pending", "InProgress", "EXECUTING"];
    const successStatuses = (_b = options === null || options === void 0 ? void 0 : options.successStatuses) !== null && _b !== void 0 ? _b : ["completed", "Completed", "COMPLETED"];
    let pollCount = 0;
    const poll = async () => {
        // Keep polling status until either completed or failed
        // Do failures report as success (status 200)? May need to manually throw error on status check failure
        const statusResponse = await request(url, options === null || options === void 0 ? void 0 : options.requestParams, {}, method);
        const status = statusResponse.status || statusResponse.jobStatus;
        if (pendingStatuses.includes(status)) {
            await (0,_functional_44de8fcf_js__WEBPACK_IMPORTED_MODULE_3__.t)(asyncIntervalTimerFunction(pollCount++));
            return poll();
        }
        else if (successStatuses.includes(status)) {
            return statusResponse;
        }
        else {
            throw statusResponse;
        }
    };
    try {
        return poll();
    }
    catch (e) {
        console.error(e);
        throw e;
    }
};

const cache = {};
const requestCache = {};
const cacheMetadata = {};
/**
 * Allows memory caching of requests which are expected to be called multiple times
 * @param requester - function which fetches the data to be cached
 * @param key - unique global name for this cache type - see {@link CacheType}
 * @param id - unique id for this result inside this particular cache
 */
async function fromCache(requester, key, id, cacheOption) {
    var _a, _b, _c, _d;
    const cacheExpirationTime = (_b = (_a = cacheMetadata[key]) === null || _a === void 0 ? void 0 : _a[id]) === null || _b === void 0 ? void 0 : _b.expireAt;
    const isExpired = !!cacheExpirationTime && new Date().getTime() > cacheExpirationTime;
    if (((_c = cache[key]) === null || _c === void 0 ? void 0 : _c[id]) && !isExpired) {
        return cache[key][id];
    }
    if (!requestCache[key]) {
        requestCache[key] = {};
    }
    // If it's expired, we want to re-run the entire request again, not just using the old promise
    // else we'll use the outdated data
    if (!requestCache[key][id] || isExpired) {
        requestCache[key][id] = requester();
    }
    const result = (await requestCache[key][id]);
    if (!cache[key]) {
        cache[key] = {};
    }
    if (!cacheMetadata[key]) {
        cacheMetadata[key] = {};
    }
    cache[key][id] = result;
    if (cacheOption) {
        const { expireAfter, getExpireAfterFromResult } = cacheOption;
        const expireAt = getExpireAfterFromResult || expireAfter
            ? new Date().getTime() + ((_d = getExpireAfterFromResult === null || getExpireAfterFromResult === void 0 ? void 0 : getExpireAfterFromResult(result)) !== null && _d !== void 0 ? _d : expireAfter)
            : null;
        cacheMetadata[key][id] = Object.assign(Object.assign({}, cacheMetadata[key][id]), { expireAt });
    }
    return result;
}
/**
 * Checks for a value in the cache and returns if there
 * If missing, no requests will be performed
 * @param key - unique global name for this cache type - see {@link CacheType}
 * @param id - unique id for this result inside this particular cache, will clear all entries if not provided
 * @example
 * inCache("serviceInfo", "uniqueitemid");
 */
function inCache(key, id) {
    var _a;
    return (_a = cache === null || cache === void 0 ? void 0 : cache[key]) === null || _a === void 0 ? void 0 : _a[id];
}
/**
 * Clear a particular cache entry or all entries for a particular cache type
 * @param key - unique global name for this cache type - see {@link CacheType}
 * @param id - unique id for this result inside this particular cache, will clear all entries if not provided
 * @example
 * clearCache("userGroups", "unique");
 * clearCache("userGroups");
 */
const clearCache = (key, id) => {
    var _a, _b;
    if (id) {
        (_a = cache[key]) === null || _a === void 0 ? true : delete _a[id];
        (_b = requestCache[key]) === null || _b === void 0 ? true : delete _b[id];
    }
    else {
        delete cache[key];
        delete requestCache[key];
    }
};

function getRestBaseUrl(portal) {
    var _a;
    const { portal: configPortal, config } = _config_75adf962_js__WEBPACK_IMPORTED_MODULE_1__.c || {};
    return (_a = (0,_url_4c3ae54c_js__WEBPACK_IMPORTED_MODULE_2__.a)(config === null || config === void 0 ? void 0 : config.restBaseUrl)) !== null && _a !== void 0 ? _a : getPortalRestBaseUrl(portal || configPortal);
}
function getPortalRestBaseUrl(portal) {
    var _a;
    return (0,_url_4c3ae54c_js__WEBPACK_IMPORTED_MODULE_2__.a)((_a = portal.restUrl) !== null && _a !== void 0 ? _a : portal.portalUrl);
}
function getUserId(user) {
    var _a, _b;
    return (_a = user === null || user === void 0 ? void 0 : user.id) !== null && _a !== void 0 ? _a : (_b = user === null || user === void 0 ? void 0 : user.sourceJSON) === null || _b === void 0 ? void 0 : _b.id;
}
function isWebTierAuth(portal) {
    var _a, _b;
    return (_a = portal === null || portal === void 0 ? void 0 : portal.isWebTierAuth) !== null && _a !== void 0 ? _a : (_b = portal.sourceJSON) === null || _b === void 0 ? void 0 : _b.isWebTierAuth;
}
function isOrgPastLegacyHomePageCutOffDate(portal) {
    const legacyCutOffDate = new Date("June 30, 2020").getTime();
    if (!portal.isPortal) {
        return portal.created >= legacyCutOffDate;
    }
    else {
        return false;
    }
}
function isKubernetes(portal) {
    var _a;
    const portalDeploymentType = portal.portalDeploymentType || ((_a = portal.sourceJSON) === null || _a === void 0 ? void 0 : _a.portalDeploymentType);
    return portalDeploymentType === "ArcGISEnterpriseOnKubernetes";
}
function isEnterpriseSetToModernHomePageOnly(portal) {
    var _a;
    return portal.isPortal && ((_a = portal.portalProperties) === null || _a === void 0 ? void 0 : _a.homePage) === "modernOnly";
}
function hasModernHomePageEnabled(portal) {
    var _a, _b;
    if (!portal.isPortal) {
        // organizations created after this date never have access to the legacy home page
        return ((_a = portal.portalProperties) === null || _a === void 0 ? void 0 : _a.homePage) === "modern" || isOrgPastLegacyHomePageCutOffDate(portal);
    }
    else {
        return ((_b = portal.portalProperties) === null || _b === void 0 ? void 0 : _b.homePage) === "modern" || isEnterpriseSetToModernHomePageOnly(portal);
    }
}
async function getHomePageConfig(portal) {
    return fromCache(() => request(`${getRestBaseUrl(portal)}portals/self/resources/home.page.json`), "homePageConfig", portal.id);
}
async function getMemberDefaults(portal) {
    return fromCache(() => request(`${getRestBaseUrl(portal)}portals/self/userDefaultSettings`), "memberDefaults", portal.id);
}
/**
 * Get the portal's token and also handle web-tier authentication Enterprise case
 */
const getPortalToken = async (portal, api) => {
    var _a;
    // `portal` can be unexpectedly undefined
    // https://devtopia.esri.com/WebGIS/arcgis-app-components/pull/5113
    if (!(portal === null || portal === void 0 ? void 0 : portal.isPortal) || !isWebTierAuth(portal)) {
        return getToken(portal);
    }
    const { token } = await fromCache(() => getPlatformSelf(portal, api !== null && api !== void 0 ? api : _config_75adf962_js__WEBPACK_IMPORTED_MODULE_1__.c === null || _config_75adf962_js__WEBPACK_IMPORTED_MODULE_1__.c === void 0 ? void 0 : _config_75adf962_js__WEBPACK_IMPORTED_MODULE_1__.c.api), "platformSelf", (_a = getUserId(portal.user)) !== null && _a !== void 0 ? _a : portal.id, { getExpireAfterFromResult: (result) => result.expires_in });
    return token;
};
/**
 * Get the active client id. Defaults to "arcgisonline".
 */
const getClientId = async (portal, api) => {
    var _a, _b, _c;
    const is3x = api === 3;
    const [IdentityManager] = await _loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_0__.e.loadModules([is3x ? "esri/IdentityManager" : "esri/identity/IdentityManager"]);
    const credential = await fromCache(() => IdentityManager.getCredential(getRestBaseUrl(portal), { oAuthPopupConfirmation: false }), "credential", getUserId(portal.user));
    return ((_c = (is3x
        ? (_a = credential._oAuthCred) === null || _a === void 0 ? void 0 : _a.appId
        : (_b = credential.oAuthState) === null || _b === void 0 ? void 0 : _b.appId)) !== null && _c !== void 0 ? _c : "arcgisonline");
};
/**
 * Useful to get the token in web-tier authenticated Enterprise portals
 * Based on https://devtopia.esri.com/WebGIS/arcgis-js-api/blob/master/esri/IdentityManagerBase.js#L1952-L1966
 */
const getPlatformSelf = async (portal, apiVersion) => {
    const appId = await getClientId(portal, apiVersion);
    const headers = {
        "X-Esri-Auth-Client-Id": appId,
        "X-Esri-Auth-Redirect-Uri": window.location.href.replace(/#.*$/, "")
    };
    return request(`${getRestBaseUrl(portal)}/oauth2/platformSelf`, {}, {
        disableIdentityLookup: true,
        headers: apiVersion === 4 ? headers : undefined,
        // To avoid infinite loop since `request` will call this again
        addTokenManually: false,
        withCredentials: true
    }, "post", { v3Request: { headers } });
};
/**
 * `portal.queryGroups` expects slightly different formats in 3.x vs 4.x
 * This is a version-agnostic replacement
 **/
async function queryGroups(params = {}, portal) {
    return request(`${getRestBaseUrl(portal)}/community/groups`, params);
}
/**
 * Get the on premise portals federated servers (must be signed in user to make this call)
 */
const getFederatedServers = async (user, portal) => {
    var _a;
    // Since the user must be signed in to make the call, this is required
    if (!user) {
        return [];
    }
    const restBaseUrl = `${(0,_url_4c3ae54c_js__WEBPACK_IMPORTED_MODULE_2__.a)((_a = portal.restUrl) !== null && _a !== void 0 ? _a : portal.portalUrl)}portals/self/servers`;
    const result = await fromCache(() => request(restBaseUrl), "selfServers", portal.id);
    return result === null || result === void 0 ? void 0 : result.servers;
};
const getPortalRestInfo = (portal) => {
    return getPortalRestInfoFromUrl(getPortalRestBaseUrl(portal));
};
const getPortalRestInfoFromUrl = (url) => {
    var _a;
    // Sometimes serviceUrl/info will return nothing so we need to extract the `rest` out
    const infoUrl = `${(0,_url_4c3ae54c_js__WEBPACK_IMPORTED_MODULE_2__.a)((_a = (0,_url_4c3ae54c_js__WEBPACK_IMPORTED_MODULE_2__.g)(url)) !== null && _a !== void 0 ? _a : url)}info`;
    // Most likely this info won't change so it's safe to use `fromCache`
    return fromCache(() => request(infoUrl, {}, { addTokenManually: false }), "portalInfo", infoUrl);
};
const isPortalBackedBySDS = async (portal, user) => {
    if (portal.isBackedBySDS) {
        return { result: true };
    }
    if (!portal.isPortal) {
        return { result: true };
    }
    try {
        // Only on-premise portals need to be checked if they support sds
        // https://devtopia.esri.com/WebGIS/arcgis-portal-app/issues/3112
        // Get the hosted managed federated Servers (this call requires a signed in user)
        const hostedServers = getHostedFederatedServer(user, portal);
        return { result: !!(hostedServers === null || hostedServers === void 0 ? void 0 : hostedServers[0]) };
    }
    catch (error) {
        console.error(error);
        return { error: { code: "unhandledError", message: JSON.stringify(error) }, result: false };
    }
};
/**
 * Get the on premise portals hosted federated servers
 */
const getHostedFederatedServer = async (user, portal) => {
    var _a;
    const federatedServers = (_a = (await getFederatedServers(user, portal))) !== null && _a !== void 0 ? _a : [];
    return federatedServers.filter((server) => server.isHosted)[0];
};



//# sourceMappingURL=portal-d518b571.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/url-4c3ae54c.js":
/*!*********************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/url-4c3ae54c.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ addTrailingSlashIfMissing),
/* harmony export */   b: () => (/* binding */ geoJsonRegExp),
/* harmony export */   c: () => (/* binding */ agsRegExp),
/* harmony export */   g: () => (/* binding */ getRestUrlFromUrl),
/* harmony export */   p: () => (/* binding */ parseAGSServerInfo),
/* harmony export */   r: () => (/* binding */ regexServerType),
/* harmony export */   s: () => (/* binding */ specialCharactersRegExp),
/* harmony export */   v: () => (/* binding */ validArcgisRestServicePath)
/* harmony export */ });
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */
const specialCharactersRegExp = /\+|\?|\/|\(|\)|\\|\!|\#|\"|\||\*|\:|<|>|\%|\$|\@|\'|\^|\[|\]|\,|\=|\;/gi;
const geoJsonRegExp = /(\.|outputFormat=)json|geojson$/i;
const agsRegExp = /\/ags\//gi;

const serverTypes = "MapServer|GeocodeServer|GPServer|GeometryServer|ImageServer|NAServer|FeatureServer|GeoDataServer|GlobeServer|MobileServer|WMServer|SceneServer|VectorTileServer|StreamServer|WorkspaceServer|GeoenrichmentServer|VideoServer";
const regexServerType = new RegExp(`http.+\/(${serverTypes})`);
const validArcgisRestServicePath = `\/arcgis\/rest\/services|\/rest\/services|\/arcgis\/services|\/arcgis\/rest`;
const serverInfoExp = `(?<server>http.+(?:${validArcgisRestServicePath})(?:\/?.*\/(?<name>.*)\/(?<type>${serverTypes})))(?!.*\/${serverTypes})\/?(?<soe>\\d+)?.*`;
/** Returns an array containing the input url, base server url, server name, server type, and layer index (if entered).
 * Example: [
 * "https://sampleserver6.arcgisonline.com/arcgis/rest/services/FeatureServer/500",
 * "https://sampleserver6.arcgisonline.com/arcgis/rest/services/TestService/FeatureServer",
 * "TestService",
 * "FeatureServer",
 * "500"
 * ]  */
const regexServerInfo = new RegExp(serverInfoExp, "i");

const parseAGSServerInfo = (url) => {
    const extractedInfo = url.match(regexServerInfo);
    if (!extractedInfo) {
        const containsAGS = url.match(agsRegExp);
        // Type is always MapServer for /ags/ services
        return containsAGS ? { baseServerUrl: url, serverName: null, serverType: "MapServer", index: null } : null;
    }
    const [, baseServerUrl, serverName, serverType, indexStr] = extractedInfo;
    const index = parseInt(indexStr);
    return { baseServerUrl, serverName, serverType, index: isNaN(index) ? null : index };
};
const getRestUrlFromUrl = (url) => {
    if (!url) {
        return null;
    }
    const extractedInfo = url.match(validArcgisRestServicePath);
    if (!extractedInfo) {
        return null;
    }
    const urlParts = url.split("/rest");
    return urlParts.length < 2 ? null : `${urlParts[0]}/rest/`;
};
const addTrailingSlashIfMissing = (url) => url && url.charAt(url.length - 1) !== "/" ? `${url}/` : url;



//# sourceMappingURL=url-4c3ae54c.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,