"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_arcgis-raster-function-editor_-49a7cf"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/functions-f1f2dffd.js":
/*!******************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/functions-f1f2dffd.js ***!
  \******************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ getFunctionsAndCategories),
/* harmony export */   b: () => (/* binding */ getRFxDefinitionProperties),
/* harmony export */   c: () => (/* binding */ cellStatsOperations),
/* harmony export */   d: () => (/* binding */ getFunctionTemplate),
/* harmony export */   e: () => (/* binding */ getFunctionName),
/* harmony export */   f: () => (/* binding */ functionTypes),
/* harmony export */   g: () => (/* binding */ getSchema),
/* harmony export */   h: () => (/* binding */ getRFTFunctionIdentifier),
/* harmony export */   i: () => (/* binding */ hasGlobalFunction),
/* harmony export */   j: () => (/* binding */ appConfig)
/* harmony export */ });
/* harmony import */ var _arcgis_core_core_lang_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @arcgis/core/core/lang.js */ "@arcgis/core/core/lang.js");
/* harmony import */ var _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./resources-27c66f5c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/resources-27c66f5c.js");
/* harmony import */ var _type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./type-gaurds-1840747f.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/type-gaurds-1840747f.js");




async function getSchema(locale) {
    const functionStrings = await (0,_resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.f)(locale);
    const enums = await (0,_resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.g)();
    const schema = {
        HillshadeFunction: {
            name: functionStrings.rasterFunctions.rfx.hillshadeName,
            snippet: functionStrings.rasterFunctions.rfx.hillshadeSnip,
            description: functionStrings.rasterFunctions.rfx.hillshadeDesc,
            category: "surface",
            icon: "hillshade.png",
            helpID: "hillshade-function.htm",
            rasterFunctionArguments: {
                DEM: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.rasterName,
                    hidden: false,
                    helpTextID: "hillshade_dem"
                },
                HillshadeType: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.long,
                    displayName: functionStrings.rasterFunctions.rfxArgs.hillshadeTypeName,
                    hidden: false,
                    defaultValue: 0,
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.esriHillshadeTypes
                    },
                    editorStateTrigger: {
                        active: true,
                        triggers: [
                            {
                                values: [1],
                                inactive: ["Azimuth", "Altitude"],
                                autoRevert: true
                            }
                        ]
                    },
                    helpTextID: "hillshade_hillshadetype"
                },
                Azimuth: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.double,
                    displayName: functionStrings.rasterFunctions.rfxArgs.azimuthName,
                    hidden: false,
                    defaultValue: 315,
                    helpTextID: "hillshade_azimuth"
                },
                Altitude: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.double,
                    displayName: functionStrings.rasterFunctions.rfxArgs.altitudeName,
                    hidden: false,
                    defaultValue: 45,
                    helpTextID: "hillshade_altitude"
                },
                SlopeType: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.long,
                    displayName: functionStrings.rasterFunctions.rfxArgs.slopeTypeName,
                    hidden: false,
                    defaultValue: 1,
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.esriSlopeTypes13
                    },
                    editorStateTrigger: {
                        active: true,
                        triggers: [
                            {
                                values: [3],
                                active: ["PSPower", "PSZFactor"],
                                autoRevert: true
                            }
                        ]
                    },
                    helpTextID: "hillshade_slopetype"
                },
                ZFactor: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.double,
                    displayName: functionStrings.rasterFunctions.rfxArgs.zFactorName,
                    hidden: false,
                    defaultValue: 1,
                    helpTextID: "hillshade_zfactor"
                },
                PSPower: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.double,
                    displayName: functionStrings.rasterFunctions.rfxArgs.PSPowerName,
                    hidden: false,
                    defaultValue: 0.664,
                    helpTextID: "hillshade_pspower"
                },
                PSZFactor: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.double,
                    displayName: functionStrings.rasterFunctions.rfxArgs.PSZFactorName,
                    hidden: false,
                    defaultValue: 0.024,
                    helpTextID: "hillshade_pszfactor"
                },
                RemoveEdgeEffect: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.boolean,
                    displayName: functionStrings.rasterFunctions.rfxArgs.removeEdgeEffectName,
                    hidden: false,
                    defaultValue: false,
                    helpTextID: "hillshade_removeedgeeffect"
                }
            }
        },
        AspectFunction: {
            name: functionStrings.rasterFunctions.rfx.aspectName,
            snippet: functionStrings.rasterFunctions.rfx.aspectSnip,
            description: functionStrings.rasterFunctions.rfx.aspectDesc,
            category: "surface",
            icon: "aspect.png",
            helpID: "aspect-function.htm",
            rasterFunctionArguments: {
                Raster: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.rasterName,
                    hidden: false,
                    helpTextID: "aspect_raster"
                }
            }
        },
        ColormapFunction: {
            name: functionStrings.rasterFunctions.rfx.colormapName,
            snippet: functionStrings.rasterFunctions.rfx.colormapSnip,
            description: functionStrings.rasterFunctions.rfx.colormapDesc,
            category: "conversion",
            icon: "colormap.png",
            helpID: "colormap-function.htm",
            rasterFunctionArguments: {
                Raster: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.rasterName,
                    hidden: false,
                    helpTextID: "colormap_raster"
                },
                ColorSchemeType: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.long,
                    displayName: functionStrings.rasterFunctions.rfxArgs.colorSchemeTypeName,
                    defaultValue: 0,
                    hidden: false,
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.colorSchemeTypes
                    },
                    editorStateTrigger: {
                        active: true,
                        triggers: [
                            {
                                values: [0],
                                active: ["ColormapName"],
                                inactive: ["ColorRamp"],
                                autoRevert: true
                            }
                        ]
                    },
                    helpTextID: "colormap_colorschemetype"
                },
                Colormap: {
                    required: true,
                    displayName: functionStrings.rasterFunctions.rfxArgs.colormapName,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.colormap,
                    hidden: true
                },
                ColormapName: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.colormapName,
                    hidden: false,
                    defaultValue: "Gray",
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.colormapTypes
                    },
                    helpTextID: "colormap_colormapname"
                },
                ColorRamp: {
                    required: true,
                    displayName: functionStrings.rasterFunctions.rfxArgs.colorRampName,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.colorRamp,
                    hidden: false,
                    helpTextID: "colormap_colorramp"
                }
            }
        },
        ContrastBrightnessFunction: {
            name: functionStrings.rasterFunctions.rfx.contrastBrightnessName,
            snippet: functionStrings.rasterFunctions.rfx.contrastBrightnessSnip,
            description: functionStrings.rasterFunctions.rfx.contrastBrightnessDesc,
            category: "appearance",
            icon: "contrastBrightness.png",
            helpID: "contrast-and-brightness-function.htm",
            rasterFunctionArguments: {
                Raster: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.rasterName,
                    hidden: false,
                    helpTextID: "contrastandbrightness_raster"
                },
                ContrastOffset: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.double,
                    displayName: functionStrings.rasterFunctions.rfxArgs.contrastOffsetName,
                    hidden: false,
                    defaultValue: 0,
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.range,
                        min: -100,
                        max: 100
                    },
                    helpTextID: "contrastandbrightness_contrastoffset"
                },
                BrightnessOffset: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.double,
                    displayName: functionStrings.rasterFunctions.rfxArgs.brightnessOffsetName,
                    hidden: false,
                    defaultValue: 0,
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.range,
                        min: -100,
                        max: 100
                    },
                    helpTextID: "contrastandbrightness_brightnessoffset"
                }
            }
        },
        ExtractBandFunction: {
            name: functionStrings.rasterFunctions.rfx.extractBandName,
            snippet: functionStrings.rasterFunctions.rfx.extractBandSnip,
            description: functionStrings.rasterFunctions.rfx.extractBandDesc,
            category: "dataManagement",
            icon: "extractBand.png",
            helpID: "extract-bands-function.htm",
            rasterFunctionArguments: {
                Raster: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.rasterName,
                    hidden: false,
                    helpTextID: "extractbands_raster"
                },
                Method: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.long,
                    displayName: functionStrings.rasterFunctions.rfxArgs.methodName,
                    hidden: false,
                    defaultValue: 2,
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.bandComboMethods
                    },
                    editorStateTrigger: {
                        active: false,
                        triggers: [
                            {
                                values: [0],
                                active: ["BandNames"],
                                inactive: ["BandWavelengths", "BandIds"]
                            },
                            {
                                values: [1],
                                active: ["BandWavelengths"],
                                inactive: ["BandNames", "BandIds"]
                            },
                            {
                                values: [2],
                                active: ["BandIds"],
                                inactive: ["BandNames", "BandWavelengths"]
                            }
                        ]
                    },
                    helpTextID: "extractbands_method"
                },
                BandNames: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.stringArray,
                    displayName: functionStrings.rasterFunctions.rfxArgs.bandNamesName,
                    hidden: false,
                    defaultValue: ["Red", "Green", "Blue"]
                },
                BandWavelengths: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.doubleArray,
                    displayName: functionStrings.rasterFunctions.rfxArgs.bandWavelengthsName,
                    hidden: false,
                    defaultValue: [600, 400, 200]
                },
                BandIds: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.longArray,
                    displayName: functionStrings.rasterFunctions.rfxArgs.bandIdsName,
                    hidden: false,
                    defaultValue: [0, 1, 2]
                },
                MissingBandAction: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.long,
                    displayName: functionStrings.rasterFunctions.rfxArgs.missingBandActionName,
                    hidden: false,
                    defaultValue: 0,
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.esriMissingBandActions
                    },
                    helpTextID: "extractbands_missingbandaction"
                }
            },
            editorArgumentOverride: {
                active: true,
                overrides: [
                    {
                        argumentNames: ["Method", "BandNames", "BandWavelengths", "BandIds"],
                        widget: {
                            path: "rfx-cte-band-combination-editor"
                        },
                        helpTextIDs: {
                            extractbands_band: "extractbands_band",
                            extractbands_combination: "extractbands_combination",
                            extractbands_method: "extractbands_method"
                        }
                    }
                ]
            }
        },
        GrayscaleFunction: {
            name: functionStrings.rasterFunctions.rfx.grayscaleName,
            snippet: functionStrings.rasterFunctions.rfx.grayscaleSnip,
            description: functionStrings.rasterFunctions.rfx.grayscaleDesc,
            category: "conversion",
            icon: "grayscale.png",
            helpID: "grayscale-function.htm",
            rasterFunctionArguments: {
                Raster: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.rasterName,
                    hidden: false,
                    helpTextID: "grayscale_raster"
                },
                ConversionParameters: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.doubleArray,
                    dataTypeAttributes: {
                        type: "bandmatrix",
                        nBands: "Raster",
                        cols: 1,
                        displayNames: [functionStrings.rasterFunctions.rfxArgs.weightName]
                    },
                    displayName: functionStrings.rasterFunctions.rfxArgs.conversionParametersName,
                    hidden: false,
                    defaultValue: [0.299, 0.587, 0.114],
                    helpTextID: "grayscale_conversionparameters"
                }
            }
        },
        ShadedReliefFunction: {
            name: functionStrings.rasterFunctions.rfx.shadedReliefName,
            snippet: functionStrings.rasterFunctions.rfx.shadedReliefSnip,
            description: functionStrings.rasterFunctions.rfx.shadedReliefDesc,
            category: "surface",
            icon: "shadedRelief.png",
            helpID: "shaded-relief-function.htm",
            rasterFunctionArguments: {
                Raster: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.rasterName,
                    hidden: false,
                    helpTextID: "shadedrelief_raster"
                },
                ColorSchemeType: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.long,
                    displayName: functionStrings.rasterFunctions.rfxArgs.colorSchemeTypeName,
                    hidden: true,
                    defaultValue: 1,
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.colorSchemeTypes
                    },
                    editorStateTrigger: {
                        active: true,
                        triggers: [
                            {
                                values: [1],
                                active: ["ColorRamp"],
                                inactive: ["Colormap"],
                                autoRevert: true
                            }
                        ]
                    }
                },
                ColorRamp: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.colorRamp,
                    displayName: functionStrings.rasterFunctions.rfxArgs.colorRampName,
                    hidden: false,
                    helpTextID: "shadedrelief_colorramp"
                },
                HillshadeType: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.long,
                    displayName: functionStrings.rasterFunctions.rfxArgs.hillshadeTypeName,
                    hidden: false,
                    defaultValue: 0,
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.esriHillshadeTypes
                    },
                    editorStateTrigger: {
                        active: true,
                        triggers: [
                            {
                                values: [1],
                                inactive: ["Azimuth", "Altitude"],
                                autoRevert: true
                            }
                        ]
                    },
                    helpTextID: "shadedrelief_hillshadetype"
                },
                Colormap: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.colormap,
                    displayName: functionStrings.rasterFunctions.rfxArgs.colormapName,
                    hidden: true
                },
                Azimuth: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.double,
                    displayName: functionStrings.rasterFunctions.rfxArgs.azimuthName,
                    hidden: false,
                    defaultValue: 315,
                    helpTextID: "shadedrelief_azimuth"
                },
                Altitude: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.double,
                    displayName: functionStrings.rasterFunctions.rfxArgs.altitudeName,
                    hidden: false,
                    defaultValue: 45,
                    helpTextID: "shadedrelief_altitude"
                },
                SlopeType: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.long,
                    displayName: functionStrings.rasterFunctions.rfxArgs.slopeTypeName,
                    hidden: false,
                    defaultValue: 1,
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.esriSlopeTypes13
                    },
                    editorStateTrigger: {
                        active: true,
                        triggers: [
                            {
                                values: [3],
                                active: ["PSPower", "PSZFactor"],
                                autoRevert: true
                            }
                        ]
                    },
                    helpTextID: "shadedrelief_slopetype"
                },
                ZFactor: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.double,
                    displayName: functionStrings.rasterFunctions.rfxArgs.zFactorName,
                    hidden: false,
                    defaultValue: 1,
                    helpTextID: "shadedrelief_zfactor"
                },
                PSPower: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.double,
                    displayName: functionStrings.rasterFunctions.rfxArgs.PSPowerName,
                    hidden: false,
                    defaultValue: 0.664,
                    helpTextID: "shadedrelief_pspower"
                },
                PSZFactor: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.double,
                    displayName: functionStrings.rasterFunctions.rfxArgs.PSZFactorName,
                    hidden: false,
                    defaultValue: 0.024,
                    helpTextID: "shadedrelief_pszfactor"
                },
                RemoveEdgeEffect: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.boolean,
                    displayName: functionStrings.rasterFunctions.rfxArgs.removeEdgeEffectName,
                    hidden: false,
                    defaultValue: false,
                    helpTextID: "shadedrelief_removeedgeeffect"
                }
            }
        },
        SlopeFunction: {
            name: functionStrings.rasterFunctions.rfx.slopeName,
            snippet: functionStrings.rasterFunctions.rfx.slopeSnip,
            description: functionStrings.rasterFunctions.rfx.slopeDesc,
            category: "surface",
            icon: "slope.png",
            helpID: "slope-function.htm",
            rasterFunctionArguments: {
                DEM: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.DEMName,
                    hidden: false,
                    helpTextID: "slope_dem"
                },
                SlopeType: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.long,
                    displayName: functionStrings.rasterFunctions.rfxArgs.slopeTypeName,
                    hidden: false,
                    defaultValue: 1,
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.esriSlopeTypes
                    },
                    editorStateTrigger: {
                        active: true,
                        triggers: [
                            {
                                values: [3],
                                active: ["PSPower", "PSZFactor"],
                                autoRevert: true
                            }
                        ]
                    },
                    helpTextID: "slope_slopetype"
                },
                Zfactor: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.double,
                    displayName: functionStrings.rasterFunctions.rfxArgs.zFactorName,
                    hidden: false,
                    defaultValue: 1,
                    helpTextID: "slope_zfactor"
                },
                PSPower: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.double,
                    displayName: functionStrings.rasterFunctions.rfxArgs.PSPowerName,
                    hidden: false,
                    defaultValue: 0.664,
                    helpTextID: "slope_pspower"
                },
                PSZFactor: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.double,
                    displayName: functionStrings.rasterFunctions.rfxArgs.PSZFactorName,
                    hidden: false,
                    defaultValue: 0.024,
                    helpTextID: "slope_pszfactor"
                },
                RemoveEdgeEffect: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.boolean,
                    displayName: functionStrings.rasterFunctions.rfxArgs.removeEdgeEffectName,
                    hidden: false,
                    defaultValue: false,
                    helpTextID: "slope_removeedgeeffect"
                }
            }
        },
        UnitConversionFunction: {
            name: functionStrings.rasterFunctions.rfx.unitConversionName,
            snippet: functionStrings.rasterFunctions.rfx.unitConversionSnip,
            description: functionStrings.rasterFunctions.rfx.unitConversionDesc,
            category: "conversion",
            icon: "unitConversion.png",
            helpID: "unit-conversion-function.htm",
            rasterFunctionArguments: {
                Raster: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.rasterName,
                    hidden: false,
                    helpTextID: "unitconversion_raster"
                },
                FromUnit: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.long,
                    displayName: functionStrings.rasterFunctions.rfxArgs.fromUnitName,
                    hidden: false,
                    defaultValue: 3,
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.esriUnitConversionFxUnitTypes
                    },
                    helpTextID: "unitconversion_fromunit"
                },
                ToUnit: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.long,
                    displayName: functionStrings.rasterFunctions.rfxArgs.toUnitName,
                    hidden: false,
                    defaultValue: 10,
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.esriUnitConversionFxUnitTypes
                    },
                    helpTextID: "unitconversion_tounit"
                }
            },
            editorArgumentOverride: {
                active: true,
                overrides: [
                    {
                        argumentNames: ["FromUnit", "ToUnit"],
                        widget: {
                            path: "rfx-cte-unit-picker"
                        }
                    }
                ]
            }
        },
        StretchFunction: {
            name: functionStrings.rasterFunctions.rfx.stretchName,
            snippet: functionStrings.rasterFunctions.rfx.stretchSnip,
            description: functionStrings.rasterFunctions.rfx.stretchDesc,
            category: "appearance",
            icon: "stretch.png",
            helpID: "stretch-function.htm",
            rasterFunctionArguments: {
                Raster: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.rasterName,
                    hidden: false,
                    helpTextID: "stretch_raster"
                },
                StretchType: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.long,
                    displayName: functionStrings.rasterFunctions.rfxArgs.rasterTypeName,
                    hidden: false,
                    defaultValue: 0,
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.esriRasterStretchTypes
                    },
                    editorStateTrigger: {
                        active: true,
                        triggers: [
                            {
                                values: [0, 5],
                                inactive: ["MinPercent", "MaxPercent", "NumberOfStandardDeviation", "SigmoidStrengthLevel"]
                            },
                            {
                                values: [3],
                                active: ["NumberOfStandardDeviation"],
                                inactive: ["MinPercent", "MaxPercent", "SigmoidStrengthLevel"]
                            },
                            {
                                values: [6],
                                active: ["MinPercent", "MaxPercent"],
                                inactive: ["NumberOfStandardDeviation", "SigmoidStrengthLevel"]
                            },
                            {
                                values: [9],
                                active: ["SigmoidStrengthLevel"],
                                inactive: ["MinPercent", "MaxPercent", "NumberOfStandardDeviation"]
                            }
                        ]
                    },
                    helpTextID: "stretch_stretchtype"
                },
                Min: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.double,
                    displayName: functionStrings.rasterFunctions.rfxArgs.minName,
                    hidden: false,
                    defaultValue: 0,
                    helpTextID: "stretch_min"
                },
                Max: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.double,
                    displayName: functionStrings.rasterFunctions.rfxArgs.maxName,
                    hidden: false,
                    defaultValue: 255,
                    helpTextID: "stretch_max"
                },
                MinPercent: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.double,
                    displayName: functionStrings.rasterFunctions.rfxArgs.minPercentName,
                    hidden: false,
                    defaultValue: 0.25,
                    helpTextID: "stretch_minpercent"
                },
                MaxPercent: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.double,
                    displayName: functionStrings.rasterFunctions.rfxArgs.maxPercentName,
                    hidden: false,
                    defaultValue: 0.5,
                    helpTextID: "stretch_maxpercent"
                },
                NumberOfStandardDeviation: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.double,
                    displayName: functionStrings.rasterFunctions.rfxArgs.numberOfStandardDeviationName,
                    hidden: false,
                    defaultValue: 2,
                    helpTextID: "stretch_numberofstandarddeviation"
                },
                SigmoidStrengthLevel: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.long,
                    displayName: functionStrings.rasterFunctions.rfxArgs.sigmoidStrengthLevelName,
                    hidden: false,
                    defaultValue: 2,
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.numList,
                        start: 1,
                        count: 6,
                        inc: 1,
                        asc: true
                    },
                    helpTextID: "stretch_sigmoidstrengthlevel"
                },
                EstimateStatsHistogram: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.boolean,
                    displayName: functionStrings.rasterFunctions.rfxArgs.estimateStatsHistogramName,
                    hidden: false,
                    defaultValue: false,
                    categoryRefId: "rfxArgCat_Statistics",
                    helpTextID: "stretch_estimatestatshistogram"
                },
                DRA: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.boolean,
                    displayName: functionStrings.rasterFunctions.rfxArgs.DRAName,
                    hidden: false,
                    defaultValue: false,
                    categoryRefId: "rfxArgCat_Statistics",
                    helpTextID: "stretch_dra"
                },
                Statistics: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.arrayOfRasterStatistics,
                    displayName: functionStrings.rasterFunctions.rfxArgs.statisticsName,
                    hidden: false,
                    categoryRefId: "rfxArgCat_Statistics",
                    helpTextID: "stretch_statistics"
                },
                Histograms: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.arrayOfRasterHistogram,
                    displayName: functionStrings.rasterFunctions.rfxArgs.histogramsName,
                    hidden: true,
                    categoryRefId: "rfxArgCat_Statistics"
                },
                ComputeGamma: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.boolean,
                    displayName: functionStrings.rasterFunctions.rfxArgs.computeGammaName,
                    hidden: false,
                    defaultValue: false,
                    categoryRefId: "rfxArgCat_Gamma",
                    helpTextID: "stretch_computegamma"
                },
                UseGamma: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.boolean,
                    displayName: functionStrings.rasterFunctions.rfxArgs.useGammaName,
                    hidden: false,
                    defaultValue: false,
                    categoryRefId: "rfxArgCat_Gamma",
                    helpTextID: "stretch_usegamma"
                },
                Gamma: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.doubleArray,
                    displayName: functionStrings.rasterFunctions.rfxArgs.gammaName,
                    hidden: false,
                    categoryRefId: "rfxArgCat_Gamma",
                    helpTextID: "stretch_gamma"
                }
            },
            editorArgumentOverride: {
                active: true,
                overrides: [
                    {
                        argumentNames: ["Gamma"],
                        triggerArguments: ["Raster"],
                        widget: {
                            path: "rfx-cte-gamma-editor"
                        }
                    }
                ]
            }
        },
        RasterCalculatorFunction: {
            name: functionStrings.rasterFunctions.rfx.rasterCalculatorName,
            snippet: functionStrings.rasterFunctions.rfx.rasterCalculatorSnip,
            description: functionStrings.rasterFunctions.rfx.rasterCalculatorDesc,
            category: "math",
            icon: "rasterCalculator.png",
            helpID: "calculator-function.htm",
            rasterFunctionArguments: {
                Rasters: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.rasterArray,
                    displayName: functionStrings.rasterFunctions.rfxArgs.rastersName,
                    hidden: false,
                    allowScalar: true
                },
                InputNames: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.stringArray,
                    displayName: functionStrings.rasterFunctions.rfxArgs.inputNamesName,
                    hidden: false
                },
                Expression: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.expressionName,
                    hidden: false,
                    helpTextID: "calculator_expression"
                },
                CellsizeType: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.long,
                    displayName: functionStrings.rasterFunctions.rfxArgs.cellsizeTypeName,
                    hidden: false,
                    defaultValue: 2,
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.esriCellsizeTypes
                    },
                    helpTextID: "calculator_cellsizetype"
                },
                ExtentType: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.long,
                    displayName: functionStrings.rasterFunctions.rfxArgs.extentTypeName,
                    hidden: false,
                    defaultValue: 1,
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.esriExtentTypes
                    },
                    helpTextID: "calculator_extenttype"
                }
            },
            editorArgumentOverride: {
                active: true,
                overrides: [
                    {
                        argumentNames: ["Rasters", "InputNames"],
                        widget: {
                            path: "rfx-cte-named-raster-editor"
                        },
                        helpTextIDs: {
                            calculator_rastervariables: "calculator_rastervariables"
                        }
                    }
                ]
            }
        },
        ClassifyFunction: {
            name: functionStrings.rasterFunctions.rfx.classifyName,
            snippet: functionStrings.rasterFunctions.rfx.classifySnip,
            description: functionStrings.rasterFunctions.rfx.classifyDesc,
            category: "classification",
            icon: "classify.png",
            helpID: "classify-function.htm",
            rasterFunctionArguments: {
                Raster: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.rasterName,
                    hidden: false,
                    helpTextID: "classify_raster"
                },
                ClassifierDefinitionFile: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.file,
                    fileExtSupported: ["ecd"],
                    displayName: functionStrings.rasterFunctions.rfxArgs.classifierDefinitionFileName,
                    hidden: false,
                    helpTextID: "classify_classifierdefinitionfile"
                },
                Raster2: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.raster2Name,
                    hidden: false,
                    helpTextID: "classify_raster2"
                }
            }
        },
        MaskFunction: {
            name: functionStrings.rasterFunctions.rfx.maskName,
            snippet: functionStrings.rasterFunctions.rfx.maskSnip,
            description: functionStrings.rasterFunctions.rfx.maskDesc,
            category: "dataManagement",
            icon: "mask.png",
            helpID: "mask-function.htm",
            rasterFunctionArguments: {
                Raster: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.rasterName,
                    hidden: false,
                    helpTextID: "mask_raster"
                },
                NoDataInterpretation: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.long,
                    displayName: functionStrings.rasterFunctions.rfxArgs.noDataInterpretationName,
                    hidden: false,
                    defaultValue: 0,
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.esriNoDataInterpretationTypes
                    },
                    helpTextID: "mask_nodatainterpretation"
                },
                NoDataValues: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.stringArray,
                    displayName: functionStrings.rasterFunctions.rfxArgs.noDataValuesName,
                    hidden: false,
                    dataTypeAttributes: {
                        type: "bandmatrix",
                        nBands: "Raster",
                        cols: 1,
                        defaultValue: null,
                        displayNames: [functionStrings.rasterFunctions.rfxArgs.noDataValuesName]
                    },
                    helpTextID: "mask_nodatavalues"
                },
                IncludedRanges: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.doubleArray,
                    displayName: functionStrings.rasterFunctions.rfxArgs.includedRangesName,
                    hidden: false,
                    defaultValue: [0, 0],
                    dataTypeAttributes: {
                        type: "bandmatrix",
                        nBands: "Raster",
                        cols: 2,
                        displayNames: [
                            functionStrings.rasterFunctions.rfxArgs.minimumName,
                            functionStrings.rasterFunctions.rfxArgs.maximumName
                        ]
                    },
                    helpTextID: "mask_includedranges"
                },
                Invert: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.boolean,
                    hidden: true,
                    defaultValue: false
                }
            }
        },
        ColormapToRGBFunction: {
            name: functionStrings.rasterFunctions.rfx.colormapToRGBName,
            snippet: functionStrings.rasterFunctions.rfx.colormapToRGBSnip,
            description: functionStrings.rasterFunctions.rfx.colormapToRGBDesc,
            category: "conversion",
            icon: "colormapToRGB.png",
            helpID: "colormap-to-rgb-function.htm",
            rasterFunctionArguments: {
                Raster: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.rasterName,
                    hidden: false,
                    helpTextID: "colormaptorgb_raster"
                },
                UnmappedAsRandomColor: {
                    required: false,
                    displayName: functionStrings.rasterFunctions.rfxArgs.unmappedAsRandomColorName,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.boolean,
                    hidden: false,
                    defaultValue: false,
                    helpTextID: "colormaptorgb_unmappedasrandomcolor"
                }
            }
        },
        CurvatureFunction: {
            name: functionStrings.rasterFunctions.rfx.curvatureName,
            snippet: functionStrings.rasterFunctions.rfx.curvatureSnip,
            description: functionStrings.rasterFunctions.rfx.curvatureDesc,
            category: "surface",
            icon: "curvature.png",
            helpID: "curvature-function.htm",
            rasterFunctionArguments: {
                Raster: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.DEMName,
                    hidden: false,
                    helpTextID: "curvature_raster"
                },
                CurvatureType: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.long,
                    displayName: functionStrings.rasterFunctions.rfxArgs.curvatureTypeName,
                    hidden: false,
                    defaultValue: 0,
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.esriCurvatureTypes
                    },
                    helpTextID: "curvature_curvaturetype"
                },
                ZFactor: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.double,
                    displayName: functionStrings.rasterFunctions.rfxArgs.zFactorName,
                    hidden: false,
                    defaultValue: 1,
                    helpTextID: "curvature_zfactor"
                }
            }
        },
        CompositeBandFunction: {
            name: functionStrings.rasterFunctions.rfx.compositeBandName,
            snippet: functionStrings.rasterFunctions.rfx.compositeBandSnip,
            description: functionStrings.rasterFunctions.rfx.compositeBandDesc,
            category: "dataManagement",
            icon: "compositeBand.png",
            helpID: "composite-bands-function.htm",
            rasterFunctionArguments: {
                Rasters: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.rasterArray,
                    displayName: functionStrings.rasterFunctions.rfxArgs.rastersName,
                    hidden: false,
                    helpTextID: "compositebands_rasters"
                },
                CellsizeType: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.long,
                    displayName: functionStrings.rasterFunctions.rfxArgs.cellsizeTypeName,
                    hidden: false,
                    defaultValue: 2,
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.esriCellsizeTypes
                    },
                    helpTextID: "compositebands_cellsizetype"
                }
            }
        },
        TableFunction: {
            name: functionStrings.rasterFunctions.rfx.tableName,
            snippet: functionStrings.rasterFunctions.rfx.tableSnip,
            description: functionStrings.rasterFunctions.rfx.tableDesc,
            category: "dataManagement",
            icon: "table.png",
            helpID: "attribute-table-function.htm",
            rasterFunctionArguments: {
                Raster: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.rasterName,
                    hidden: false,
                    helpTextID: "attributetable_raster"
                },
                AttributeTableAsRecordSet: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.table,
                    displayName: functionStrings.rasterFunctions.rfxArgs.attributeTableName,
                    hidden: false
                }
            },
            editorArgumentOverride: {
                active: true,
                overrides: [
                    {
                        argumentNames: ["Raster", "AttributeTableAsRecordSet"],
                        widget: {
                            path: "rfx-cte-attribute-table"
                        },
                        helpTextIDs: {
                            attributetable_raster: "attributetable_raster"
                        }
                    }
                ]
            }
        },
        ConvolutionFunction: {
            name: functionStrings.rasterFunctions.rfx.convolutionName,
            snippet: functionStrings.rasterFunctions.rfx.convolutionSnip,
            description: functionStrings.rasterFunctions.rfx.convolutionDesc,
            category: "appearance",
            icon: "convolution.png",
            helpID: "convolution-function.htm",
            rasterFunctionArguments: {
                Raster: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.rasterName,
                    hidden: false,
                    helpTextID: "convolution_raster"
                },
                ConvolutionType: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.long,
                    displayName: functionStrings.rasterFunctions.rfxArgs.rasterTypeName,
                    hidden: false,
                    defaultValue: 19,
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.esriRasterFilterTypes
                    }
                },
                Rows: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.long,
                    displayName: functionStrings.rasterFunctions.rfxArgs.rowsName,
                    hidden: false,
                    defaultValue: 3,
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.numList,
                        start: 1,
                        count: 100,
                        inc: 1,
                        asc: true
                    }
                },
                Columns: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.long,
                    displayName: functionStrings.rasterFunctions.rfxArgs.columnsName,
                    hidden: false,
                    defaultValue: 3,
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.numList,
                        start: 1,
                        count: 100,
                        inc: 1,
                        asc: true
                    }
                },
                Kernel: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.doubleArray,
                    displayName: functionStrings.rasterFunctions.rfxArgs.kernelName,
                    hidden: false,
                    helpTextID: "convolution_kernel"
                },
                MirrorEdges: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.boolean,
                    displayName: functionStrings.rasterFunctions.rfxArgs.mirrorEdgesName,
                    hidden: true,
                    defaultValue: false
                }
            },
            editorArgumentOverride: {
                active: true,
                overrides: [
                    {
                        argumentNames: ["ConvolutionType", "Rows", "Columns", "Kernel"],
                        widget: {
                            path: "rfx-cte-kernel-selector"
                        },
                        helpTextIDs: {
                            convolution_type: "convolution_type",
                            convolution_kernel: "convolution_kernel"
                        }
                    }
                ]
            }
        },
        StatisticsHistogramFunction: {
            name: functionStrings.rasterFunctions.rfx.statisticsHistogramName,
            snippet: functionStrings.rasterFunctions.rfx.statisticsHistogramSnip,
            description: functionStrings.rasterFunctions.rfx.statisticsHistogramDesc,
            category: "appearance",
            icon: "statisticsHistogram.png",
            helpID: "statistics-and-histogram-function.htm",
            hidden: false,
            rasterFunctionArguments: {
                Raster: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.rasterName,
                    hidden: false,
                    helpTextID: "statisticsandhistogram_raster"
                },
                Statistics: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.rasterStatisticsArray,
                    displayName: functionStrings.rasterFunctions.rfxArgs.statisticsHistogramName,
                    hidden: false,
                    helpTextID: "statisticsandhistogram_statistics"
                },
                Histograms: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.rasterHistogramArray,
                    displayName: functionStrings.rasterFunctions.rfxArgs.histogramsName,
                    hidden: true
                }
            }
        },
        WeightedOverlayFunction: {
            name: functionStrings.rasterFunctions.rfx.weightedOverlayName,
            snippet: functionStrings.rasterFunctions.rfx.weightedOverlaySnip,
            description: functionStrings.rasterFunctions.rfx.weightedOverlayDesc,
            category: "analysis",
            icon: "weightedOverlay.png",
            hidden: false,
            helpID: "weighted-overlay-function.htm",
            rasterFunctionArguments: {
                Rasters: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.rasterArray,
                    displayName: functionStrings.rasterFunctions.rfxArgs.rastersName,
                    hidden: false
                },
                Influences: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.doubleArray,
                    displayName: functionStrings.rasterFunctions.rfxArgs.influencesName,
                    hidden: false
                },
                Fields: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.stringArray,
                    displayName: functionStrings.rasterFunctions.rfxArgs.fieldsName,
                    hidden: false
                },
                Remaps: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.stringArray,
                    displayName: functionStrings.rasterFunctions.rfxArgs.remapsName,
                    hidden: false
                },
                EvalFrom: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.long,
                    displayName: functionStrings.rasterFunctions.rfxArgs.evalFromName,
                    hidden: false,
                    defaultValue: 1
                },
                EvalTo: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.long,
                    displayName: functionStrings.rasterFunctions.rfxArgs.evalToName,
                    hidden: false,
                    defaultValue: 9
                },
                CellsizeType: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.long,
                    displayName: functionStrings.rasterFunctions.rfxArgs.cellsizeTypeName,
                    hidden: false,
                    defaultValue: 2,
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.esriCellsizeTypes
                    },
                    helpTextID: "weightedoverlay_cellsizetype"
                },
                ExtentType: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.long,
                    displayName: functionStrings.rasterFunctions.rfxArgs.extentTypeName,
                    hidden: false,
                    defaultValue: 1,
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.esriExtentTypes
                    },
                    helpTextID: "weightedoverlay_extenttype"
                }
            },
            editorArgumentOverride: {
                active: true,
                overrides: [
                    {
                        argumentNames: ["Rasters", "Influences", "Fields", "Remaps", "EvalFrom", "EvalTo"],
                        widget: {
                            path: "rfx-cte-weighted-overlay-table-editor"
                        },
                        helpTextIDs: {
                            weightedoverlay_weightedoverlaytable: "weightedoverlay_weightedoverlaytable",
                            weightedoverlay_remaptable: "weightedoverlay_remaptable",
                            weightedoverlay_scales: "weightedoverlay_scales"
                        }
                    }
                ]
            }
        },
        WeightedSumFunction: {
            name: functionStrings.rasterFunctions.rfx.weightedSumName,
            snippet: functionStrings.rasterFunctions.rfx.weightedSumSnip,
            description: functionStrings.rasterFunctions.rfx.weightedSumDesc,
            category: "analysis",
            icon: "weightedSum.png",
            helpID: "weighted-sum-function.htm",
            rasterFunctionArguments: {
                Rasters: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.rasterArray,
                    displayName: functionStrings.rasterFunctions.rfxArgs.rastersName,
                    hidden: false
                },
                Fields: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.stringArray,
                    displayName: functionStrings.rasterFunctions.rfxArgs.fieldsName,
                    hidden: false
                },
                Weights: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.doubleArray,
                    displayName: functionStrings.rasterFunctions.rfxArgs.weightsName,
                    hidden: false
                },
                CellsizeType: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.long,
                    displayName: functionStrings.rasterFunctions.rfxArgs.cellsizeTypeName,
                    hidden: false,
                    defaultValue: 2,
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.esriCellsizeTypes
                    },
                    helpTextID: "weightedsum_cellsizetype"
                },
                ExtentType: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.long,
                    displayName: functionStrings.rasterFunctions.rfxArgs.extentTypeName,
                    hidden: false,
                    defaultValue: 1,
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.esriExtentTypes
                    },
                    helpTextID: "weightedsum_extenttype"
                }
            },
            editorArgumentOverride: {
                active: true,
                overrides: [
                    {
                        argumentNames: ["Rasters", "Fields", "Weights"],
                        widget: {
                            path: "rfx-cte-weighted-sum-table-editor"
                        },
                        helpTextIDs: {
                            weightedsum_weightedsumtable: "weightedsum_weightedsumtable"
                        }
                    }
                ]
            }
        },
        ElevationVoidFillFunction: {
            name: functionStrings.rasterFunctions.rfx.elevationVoidFillName,
            snippet: functionStrings.rasterFunctions.rfx.elevationVoidFillSnip,
            description: functionStrings.rasterFunctions.rfx.elevationVoidFillDesc,
            category: "surface",
            icon: "elevationVoidFill.png",
            helpID: "elevation-void-fill-function.htm",
            rasterFunctionArguments: {
                Raster: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.DEMName,
                    hidden: false,
                    helpTextID: "elevationvoidfill_raster"
                },
                ShortRangeIDWRadius: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.double,
                    displayName: functionStrings.rasterFunctions.rfxArgs.shortRangeIDWRadiusName,
                    hidden: false,
                    defaultValue: -1,
                    helpTextID: "elevationvoidfill_shortrangeidwradius"
                },
                MaxVoidWidth: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.double,
                    displayName: functionStrings.rasterFunctions.rfxArgs.maxVoidWidthName,
                    hidden: false,
                    defaultValue: -1,
                    helpTextID: "elevationvoidfill_maxvoidwidth"
                }
            }
        },
        ContourFunction: {
            name: functionStrings.rasterFunctions.rfx.contourName,
            snippet: functionStrings.rasterFunctions.rfx.contourSnip,
            description: functionStrings.rasterFunctions.rfx.contourDesc,
            category: "surface",
            icon: "contour.png",
            helpID: "contour-function.htm",
            rasterFunctionArguments: {
                DEM: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.rasterName,
                    hidden: false,
                    helpTextID: "contour_dem"
                },
                SigmaGaussian: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.double,
                    displayName: functionStrings.rasterFunctions.rfxArgs.sigmaGaussianName,
                    hidden: false,
                    defaultValue: 2.5,
                    helpTextID: "contour_sigmagaussian"
                },
                ContourType: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.long,
                    displayName: functionStrings.rasterFunctions.rfxArgs.contourTypeName,
                    hidden: false,
                    defaultValue: 0,
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.esriContourTypes
                    },
                    helpTextID: "contour_contourtype"
                },
                ZBase: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.double,
                    displayName: functionStrings.rasterFunctions.rfxArgs.zBaseName,
                    hidden: false,
                    defaultValue: 0,
                    helpTextID: "contour_zbase"
                },
                NumberOfContours: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.long,
                    displayName: functionStrings.rasterFunctions.rfxArgs.numberOfContoursName,
                    hidden: false,
                    defaultValue: 0,
                    helpTextID: "contour_numberofcontours"
                },
                ContourInterval: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.double,
                    displayName: functionStrings.rasterFunctions.rfxArgs.contourIntervalName,
                    hidden: false,
                    defaultValue: 100,
                    helpTextID: "contour_contourinterval"
                },
                NthContourLineInBold: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.long,
                    displayName: functionStrings.rasterFunctions.rfxArgs.nthContourLineInBoldName,
                    hidden: false,
                    defaultValue: 5,
                    helpTextID: "contour_nthcontourlineinbold"
                },
                ZFactor: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.double,
                    displayName: functionStrings.rasterFunctions.rfxArgs.zFactorName,
                    hidden: false,
                    defaultValue: 1,
                    helpTextID: "contour_zfactor"
                }
            }
        },
        RasterizeFeatureClassFunction: {
            name: functionStrings.rasterFunctions.rfx.rasterizeFeatureClassName,
            snippet: functionStrings.rasterFunctions.rfx.rasterizeFeatureClassSnip,
            description: functionStrings.rasterFunctions.rfx.rasterizeFeatureClassDesc,
            category: "conversion",
            icon: "rasterizeFeatureClass.png",
            helpID: "rasterize-features-function.htm",
            rasterFunctionArguments: {
                Raster: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.rasterName,
                    hidden: false,
                    helpTextID: "rasterizefeatures_raster"
                },
                FeatureClass: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.featureClass,
                    displayName: functionStrings.rasterFunctions.rfxArgs.featureClassName,
                    hidden: false,
                    helpTextID: "rasterizefeatures_featureclass"
                },
                ClassIndexField: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.classIndexFieldName,
                    hidden: false,
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.fields,
                        argumentName: "FeatureClass"
                    },
                    helpTextID: "rasterizefeatures_classindexfield"
                },
                ResolveOverlapMethod: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.long,
                    displayName: functionStrings.rasterFunctions.rfxArgs.resolveOverlapMethodName,
                    hidden: false,
                    defaultValue: 0,
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.esriRasterizeResolveOverlapMethod
                    },
                    helpTextID: "rasterizefeatures_resolveoverlapmethod"
                }
            }
        },
        ResampleFunction: {
            name: functionStrings.rasterFunctions.rfx.resampleName,
            snippet: functionStrings.rasterFunctions.rfx.resampleSnip,
            description: functionStrings.rasterFunctions.rfx.resampleDesc,
            category: "dataManagement",
            icon: "resample.png",
            helpID: "resample-function.htm",
            rasterFunctionArguments: {
                Raster: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.rasterName,
                    hidden: false,
                    helpTextID: "resample_raster"
                },
                ResamplingType: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.long,
                    displayName: functionStrings.rasterFunctions.rfxArgs.resamplingTypeName,
                    hidden: false,
                    defaultValue: 0,
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.rstResamplingTypes
                    },
                    helpTextID: "resample_resamplingtype"
                },
                InputCellsize: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.cellSize,
                    displayName: functionStrings.rasterFunctions.rfxArgs.inputCellsizeName,
                    hidden: false,
                    helpTextID: "resample_inputcellsize"
                },
                OutputCellsize: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.cellSize,
                    displayName: functionStrings.rasterFunctions.rfxArgs.outputCellsizeName,
                    hidden: false,
                    helpTextID: "resample_outputcellsize"
                }
            }
        },
        RegionGrowFunction: {
            name: functionStrings.rasterFunctions.rfx.regionGrowName,
            snippet: functionStrings.rasterFunctions.rfx.regionGrowSnip,
            description: functionStrings.rasterFunctions.rfx.regionGrowDesc,
            category: "classification",
            icon: "regionGrow.png",
            helpID: "region-grow-function.htm",
            rasterFunctionArguments: {
                Raster: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.rasterName,
                    hidden: false,
                    helpTextID: "regiongrow_raster"
                },
                PointFeatureClass: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.featureClass,
                    displayName: functionStrings.rasterFunctions.rfxArgs.pointFeatureClassName,
                    hidden: false,
                    helpTextID: "regiongrow_pointfeatureclass"
                },
                MaxGrowthRadiusField: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.maxGrowthRadiusFieldName,
                    hidden: false,
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.fields,
                        argumentName: "PointFeatureClass"
                    },
                    helpTextID: "regiongrow_maxgrowthradiusfield"
                },
                SimilarityThresholdField: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.similarityThresholdFieldName,
                    hidden: false,
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.fields,
                        argumentName: "PointFeatureClass"
                    },
                    helpTextID: "regiongrow_similaritythresholdfield"
                },
                FillValueField: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.fillValueFieldName,
                    hidden: false,
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.fields,
                        argumentName: "PointFeatureClass"
                    },
                    helpTextID: "regiongrow_fillvaluefield"
                }
            }
        },
        SegmentMeanShiftFunction: {
            name: functionStrings.rasterFunctions.rfx.segmentMeanShiftName,
            snippet: functionStrings.rasterFunctions.rfx.segmentMeanShiftSnip,
            description: functionStrings.rasterFunctions.rfx.segmentMeanShiftDesc,
            category: "classification",
            icon: "segmentMeanShift.png",
            helpID: "segment-mean-shift-function.htm",
            rasterFunctionArguments: {
                Raster: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.rasterName,
                    hidden: false,
                    helpTextID: "segmentmeanshift_raster"
                },
                SpectralDetail: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.double,
                    displayName: functionStrings.rasterFunctions.rfxArgs.spectralDetailName,
                    hidden: false,
                    defaultValue: 15.5,
                    helpTextID: "segmentmeanshift_spectraldetail"
                },
                SpatialDetail: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.long,
                    displayName: functionStrings.rasterFunctions.rfxArgs.spatialDetailName,
                    hidden: false,
                    defaultValue: 15,
                    helpTextID: "segmentmeanshift_spatialdetail"
                },
                MinNumPixelsPerSegment: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.long,
                    displayName: functionStrings.rasterFunctions.rfxArgs.minNumPixelsPerSegmentName,
                    hidden: false,
                    defaultValue: 20,
                    helpTextID: "segmentmeanshift_minnumpixelspersegment"
                },
                BoundariesOnly: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.boolean,
                    displayName: functionStrings.rasterFunctions.rfxArgs.boundariesOnlyName,
                    hidden: false,
                    defaultValue: false,
                    helpTextID: "segmentmeanshift_boundariesonly"
                },
                MaxNumPixelsPerSegment: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.long,
                    displayName: functionStrings.rasterFunctions.rfxArgs.maxNumPixelsPerSegment,
                    hidden: false,
                    defaultValue: -1,
                    helpTextID: "segmentmeanshift_maxnumpixelspersegment"
                }
            }
        },
        StatisticsFunction: {
            name: functionStrings.rasterFunctions.rfx.statisticsName,
            snippet: functionStrings.rasterFunctions.rfx.statisticsSnip,
            description: functionStrings.rasterFunctions.rfx.statisticsDesc,
            category: "statistical",
            icon: "statistics.png",
            helpID: "statistics-function.htm",
            rasterFunctionArguments: {
                Raster: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.rasterName,
                    hidden: false,
                    helpTextID: "statistics_raster"
                },
                StatisticsType: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.long,
                    displayName: functionStrings.rasterFunctions.rfxArgs.statisticsTypeName,
                    hidden: false,
                    defaultValue: 3,
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.esriFocalStatisticTypes
                    },
                    helpTextID: "statistics_statisticstype"
                },
                Rows: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.long,
                    displayName: functionStrings.rasterFunctions.rfxArgs.rowsName,
                    categoryRefId: "rfxArgCat_NeighborhoodSettings",
                    hidden: false,
                    defaultValue: 3,
                    helpTextID: "statistics_rows"
                },
                Columns: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.long,
                    displayName: functionStrings.rasterFunctions.rfxArgs.columnsName,
                    categoryRefId: "rfxArgCat_NeighborhoodSettings",
                    hidden: false,
                    defaultValue: 3,
                    helpTextID: "statistics_columns"
                },
                FillNoDataOnly: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.boolean,
                    displayName: functionStrings.rasterFunctions.rfxArgs.fillNoDataOnlyName,
                    hidden: false,
                    defaultValue: false,
                    helpTextID: "statistics_fillnodataonly"
                }
            }
        },
        VectorFieldFunction: {
            name: functionStrings.rasterFunctions.rfx.vectorFieldName,
            snippet: functionStrings.rasterFunctions.rfx.vectorFieldSnip,
            description: functionStrings.rasterFunctions.rfx.vectorFieldDesc,
            category: "conversion",
            icon: "vectorField.png",
            helpID: "vector-field-function.htm",
            rasterFunctionArguments: {
                Raster1: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.raster1Name,
                    hidden: false,
                    helpTextID: "vectorfield_raster1"
                },
                Raster2: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.raster2Name,
                    hidden: false,
                    helpTextID: "vectorfield_raster2"
                },
                InputDataType: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.inputDataTypeName,
                    hidden: false,
                    defaultValue: "Unknown",
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.uvMagDirUnkTypes
                    },
                    editorStateTrigger: {
                        active: true,
                        triggers: [
                            {
                                values: ["Vector-MagDir"],
                                active: ["AngleReferenceSystem"],
                                autoRevert: true
                            }
                        ]
                    },
                    helpTextID: "vectorfield_inputdatatype"
                },
                AngleReferenceSystem: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.long,
                    displayName: functionStrings.rasterFunctions.rfxArgs.angleReferenceSystemName,
                    hidden: false,
                    defaultValue: 0,
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.esriAngleReferenceSystemTypes
                    },
                    helpTextID: "vectorfield_anglereferencesystem"
                },
                OutputDataType: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.outputDataTypeName,
                    hidden: false,
                    defaultValue: "Vector-MagDir",
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.uvMagDirTypes
                    },
                    helpTextID: "vectorfield_outputdatatype"
                }
            }
        },
        InterpolateIrregularDataFunction: {
            name: functionStrings.rasterFunctions.rfx.interpolateIrregularDataName,
            snippet: functionStrings.rasterFunctions.rfx.interpolateIrregularDataSnip,
            description: functionStrings.rasterFunctions.rfx.interpolateIrregularDataDesc,
            category: "dataManagement",
            icon: "interpolateIrregularData.png",
            helpID: "interpolate-irregular-data.htm",
            rasterFunctionArguments: {
                PointFeatureClass: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.featureClass,
                    dataTypeAttributes: {
                        type: "point",
                        hasZ: true
                    },
                    displayName: functionStrings.rasterFunctions.rfxArgs.inputSamplePointFeatureClassName,
                    hidden: false,
                    helpTextID: "interpolateirregulardata_pointfeatureclass"
                },
                ValueField: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.valueFieldName,
                    hidden: false,
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.fields,
                        argumentName: "PointFeatureClass"
                    },
                    helpTextID: "interpolateirregulardata_valuefield"
                },
                RasterInfo: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.rasterInfo,
                    displayName: functionStrings.rasterFunctions.rfxArgs.cellSizeName,
                    hidden: false,
                    helpTextID: "interpolateirregulardata_cellsize"
                },
                InterpolationMethod: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.long,
                    displayName: functionStrings.rasterFunctions.rfxArgs.interpolationMethodName,
                    hidden: false,
                    defaultValue: 0,
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.esriInterpolateIrregularDataMethods
                    },
                    editorValueTrigger: {
                        active: true,
                        triggers: [
                            {
                                values: [0],
                                changedArgs: [
                                    {
                                        Radius: 3
                                    }
                                ]
                            },
                            {
                                values: [2, 3],
                                changedArgs: [
                                    {
                                        Radius: 0.5
                                    }
                                ]
                            },
                            {
                                values: [4],
                                changedArgs: [
                                    {
                                        Radius: 9
                                    }
                                ]
                            }
                        ]
                    },
                    helpTextID: "interpolateirregulardata_interpolationmethod"
                },
                Radius: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.double,
                    displayName: functionStrings.rasterFunctions.rfxArgs.radiusName,
                    hidden: false,
                    defaultValue: 0,
                    helpTextID: "interpolateirregulardata_radius"
                }
            },
            editorArgumentOverride: {
                active: true,
                overrides: [
                    {
                        argumentNames: ["RasterInfo"],
                        widget: {
                            path: "rfx-cte-raster-info-cell-size-editor"
                        }
                    }
                ]
            }
        },
        ReflectanceFunction: {
            name: functionStrings.rasterFunctions.rfx.reflectanceName,
            snippet: functionStrings.rasterFunctions.rfx.reflectanceSnip,
            description: functionStrings.rasterFunctions.rfx.reflectanceDesc,
            category: "correction",
            icon: "reflectance.png",
            helpID: "apparent-reflectance-function.htm",
            hidden: false,
            rasterFunctionArguments: {
                Raster: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.rasterName,
                    hidden: false,
                    helpTextID: "apparentreflectance_raster"
                },
                RadianceGainValues: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.doubleArray,
                    displayName: functionStrings.rasterFunctions.rfxArgs.radianceGainValuesName,
                    hidden: false,
                    helpTextID: "apparentreflectance_radiancegainvalues"
                },
                RadianceBiasValues: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.doubleArray,
                    displayName: functionStrings.rasterFunctions.rfxArgs.radianceBiasValuesName,
                    hidden: false,
                    helpTextID: "apparentreflectance_radiancebiasvalues"
                },
                ReflectanceGainValues: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.doubleArray,
                    displayName: functionStrings.rasterFunctions.rfxArgs.reflectedGainValuesName,
                    hidden: false,
                    helpTextID: "apparentreflectance_reflectancegainvalues"
                },
                ReflectanceBiasValues: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.doubleArray,
                    displayName: functionStrings.rasterFunctions.rfxArgs.reflectedBiasValuesName,
                    hidden: false,
                    helpTextID: "apparentreflectance_reflectancebiasvalues"
                },
                SunElevation: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.double,
                    displayName: functionStrings.rasterFunctions.rfxArgs.sunElevationName,
                    hidden: false,
                    defaultValue: 0,
                    helpTextID: "apparentreflectance_sunelevation"
                },
                Albedo: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.boolean,
                    displayName: functionStrings.rasterFunctions.rfxArgs.albedoName,
                    hidden: false,
                    defaultValue: false,
                    helpTextID: "apparentreflectance_albedo"
                },
                ScaleFactor: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.long,
                    displayName: functionStrings.rasterFunctions.rfxArgs.scaleFactorName,
                    hidden: false,
                    defaultValue: 2147483647,
                    helpTextID: "apparentreflectance_scalefactor"
                },
                Offset: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.long,
                    displayName: functionStrings.rasterFunctions.rfxArgs.offsetName,
                    hidden: false,
                    defaultValue: 2147483647,
                    helpTextID: "apparentreflectance_offset"
                }
            }
        },
        ThresholdFunction: {
            name: functionStrings.rasterFunctions.rfx.thresholdName,
            snippet: functionStrings.rasterFunctions.rfx.thresholdSnip,
            description: functionStrings.rasterFunctions.rfx.thresholdDesc,
            category: "analysis",
            icon: "threshold.png",
            helpID: "binary-thresholding-function.htm",
            rasterFunctionArguments: {
                Raster: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.rasterName,
                    hidden: false,
                    helpTextID: "binarythresholding_raster"
                },
                ThresholdType: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.long,
                    displayName: functionStrings.rasterFunctions.rfxArgs.thresholdTypeName,
                    hidden: true,
                    defaultValue: 1,
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.esriRasterThresholdTypes
                    }
                },
                Thresholds: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.doubleArray,
                    displayName: functionStrings.rasterFunctions.rfxArgs.thresholdsName,
                    hidden: true
                }
            }
        },
        ArgStatisticsFunction: {
            name: functionStrings.rasterFunctions.rfx.argStatisticsName,
            snippet: functionStrings.rasterFunctions.rfx.argStatisticsSnip,
            description: functionStrings.rasterFunctions.rfx.argStatisticsDesc,
            category: "statistical",
            icon: "argStatistics.png",
            helpID: "argstatistics-function.htm",
            rasterFunctionArguments: {
                Rasters: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.rasterArray,
                    displayName: functionStrings.rasterFunctions.rfxArgs.rastersName,
                    hidden: false,
                    helpTextID: "argstatistics_rasters"
                },
                ArgStatisticsType: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.long,
                    displayName: functionStrings.rasterFunctions.rfxArgs.methodName,
                    hidden: false,
                    defaultValue: 0,
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.esriArgStatisticsTypes
                    },
                    editorStateTrigger: {
                        active: true,
                        triggers: [
                            {
                                values: [0],
                                active: ["UndefinedClass"],
                                inactive: ["MinValue", "MaxValue"]
                            },
                            {
                                values: [1],
                                active: ["UndefinedClass"],
                                inactive: ["MinValue", "MaxValue"]
                            },
                            {
                                values: [2],
                                active: [""],
                                inactive: ["UndefinedClass", "MinValue", "MaxValue"]
                            },
                            {
                                values: [3],
                                active: ["MinValue", "MaxValue"],
                                inactive: ["UndefinedClass"]
                            }
                        ]
                    },
                    helpTextID: "argstatistics_argstatisticstype"
                },
                UndefinedClass: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.long,
                    displayName: functionStrings.rasterFunctions.rfxArgs.undefinedClassName,
                    hidden: false,
                    defaultValue: 100,
                    helpTextID: "argstatistics_undefinedclass"
                },
                MinValue: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.double,
                    displayName: functionStrings.rasterFunctions.rfxArgs.minValueName,
                    hidden: false,
                    defaultValue: 1,
                    helpTextID: "argstatistics_minvalue"
                },
                MaxValue: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.double,
                    displayName: functionStrings.rasterFunctions.rfxArgs.maxValueName,
                    hidden: false,
                    defaultValue: 1,
                    helpTextID: "argstatistics_maxvalue"
                },
                IgnoreNoData: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.boolean,
                    displayName: functionStrings.rasterFunctions.rfxArgs.ignoreNoDataName,
                    hidden: false,
                    defaultValue: true,
                    helpTextID: "argstatistics_ignorenodata"
                }
            }
        },
        ArithmeticFunction: {
            name: functionStrings.rasterFunctions.rfx.arithmeticName,
            snippet: functionStrings.rasterFunctions.rfx.arithmeticSnip,
            description: functionStrings.rasterFunctions.rfx.arithmeticDesc,
            category: "math",
            icon: "arithmetic.png",
            helpID: "arithmetic-function.htm",
            rasterFunctionArguments: {
                Raster: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.rasterName,
                    hidden: false,
                    allowScalar: true,
                    helpTextID: "arithmetic_raster"
                },
                Raster2: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.raster2Name,
                    hidden: false,
                    allowScalar: true,
                    helpTextID: "arithmetic_raster2"
                },
                Operation: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.long,
                    displayName: functionStrings.rasterFunctions.rfxArgs.operationName,
                    hidden: false,
                    defaultValue: 1,
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.esriRasterArithmeticOperations
                    },
                    helpTextID: "arithmetic_operation"
                },
                CellsizeType: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.long,
                    displayName: functionStrings.rasterFunctions.rfxArgs.cellsizeTypeName,
                    hidden: false,
                    defaultValue: 2,
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.esriCellsizeTypes
                    },
                    helpTextID: "arithmetic_cellsizetype"
                },
                ExtentType: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.long,
                    displayName: functionStrings.rasterFunctions.rfxArgs.extentTypeName,
                    hidden: false,
                    defaultValue: 1,
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.esriExtentTypes
                    },
                    helpTextID: "arithmetic_extenttype"
                }
            }
        },
        ClipFunction: {
            name: functionStrings.rasterFunctions.rfx.clipName,
            snippet: functionStrings.rasterFunctions.rfx.clipSnip,
            description: functionStrings.rasterFunctions.rfx.clipDesc,
            category: "dataManagement",
            icon: "clip.png",
            helpID: "clip-function.htm",
            rasterFunctionArguments: {
                Raster: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.rasterName,
                    hidden: false,
                    helpTextID: "clip_raster"
                },
                ClippingType: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.long,
                    displayName: functionStrings.rasterFunctions.rfxArgs.clippingTypeName,
                    hidden: false,
                    defaultValue: 1,
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.esriRasterClippingTypes
                    },
                    helpTextID: "clip_clippingtype"
                },
                ClippingRaster: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.clippingGeometryName,
                    hidden: false,
                    helpTextID: "clip_clippingraster"
                },
                ClippingGeometry: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.geometry,
                    displayName: functionStrings.rasterFunctions.rfxArgs.clippingGeometryName,
                    hidden: false
                },
                Extent: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.extent,
                    displayName: functionStrings.rasterFunctions.rfxArgs.extentName,
                    hidden: false
                },
                UseInputFeatureGeometry: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.boolean,
                    displayName: functionStrings.rasterFunctions.rfxArgs.useInputFeatureGeometryName,
                    hidden: true
                }
            },
            editorArgumentOverride: {
                active: true,
                overrides: [
                    {
                        argumentNames: ["ClippingRaster", "ClippingGeometry", "Extent"],
                        triggerArguments: ["Raster", "ClippingType", "UseInputFeatureGeometry"],
                        widget: {
                            path: "rfx-cte-clipping-geometry"
                        },
                        helpTextIDs: {
                            clip_clippinggeometryorraster: "clip_clippinggeometryorraster",
                            clip_useinputfeaturesforclippinggeometry: "clip_useinputfeaturesforclippinggeometry",
                            clip_outputextent: "clip_outputextent"
                        }
                    }
                ]
            }
        },
        RemapFunction: {
            name: functionStrings.rasterFunctions.rfx.remapName,
            snippet: functionStrings.rasterFunctions.rfx.remapSnip,
            description: functionStrings.rasterFunctions.rfx.remapDesc,
            category: "reclass",
            icon: "remap.png",
            helpID: "remap-function.htm",
            rasterFunctionArguments: {
                Raster: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.rasterName,
                    hidden: false,
                    helpTextID: "remap_raster"
                },
                UseTable: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.boolean,
                    hidden: true,
                    displayName: functionStrings.rasterFunctions.rfxArgs.remapDefinitionTypeName,
                    defaultValue: false,
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.remapDefinitionTypes
                    }
                },
                InputRanges: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.doubleArray,
                    displayName: functionStrings.rasterFunctions.rfxArgs.inputRangeName,
                    hidden: false
                },
                OutputValues: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.doubleArray,
                    displayName: functionStrings.rasterFunctions.rfxArgs.outputValuesName,
                    hidden: false
                },
                NoDataRanges: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.doubleArray,
                    displayName: functionStrings.rasterFunctions.rfxArgs.noDataRangeName,
                    hidden: false
                },
                Table: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.table,
                    displayName: functionStrings.rasterFunctions.rfxArgs.remapsName,
                    hidden: true
                },
                InputField: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.inputFieldName,
                    hidden: true
                },
                OutputField: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.outputFieldName,
                    hidden: true
                },
                InputMaxField: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.inputMaxFieldName,
                    hidden: true
                },
                RemapTableType: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.long,
                    displayName: functionStrings.rasterFunctions.rfxArgs.remapTableTypeName,
                    hidden: true,
                    defaultValue: 1,
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.remapTableTypes
                    }
                },
                AllowUnmatched: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.boolean,
                    displayName: functionStrings.rasterFunctions.rfxArgs.changeMissingValuesToNoDataName,
                    reverseDisplayValue: true,
                    hidden: false,
                    defaultValue: true,
                    helpTextID: "remap_allowunmatched"
                }
            },
            editorArgumentOverride: {
                active: true,
                overrides: [
                    {
                        argumentNames: ["InputRanges", "OutputValues", "NoDataRanges"],
                        widget: {
                            path: "rfx-cte-remap-grid"
                        }
                    }
                ]
            }
        },
        NDVIFunction: {
            name: functionStrings.rasterFunctions.rfx.ndviName,
            snippet: functionStrings.rasterFunctions.rfx.ndviSnip,
            description: functionStrings.rasterFunctions.rfx.ndviDesc,
            category: "analysis",
            icon: "ndvi.png",
            helpID: "ndvi-function.htm",
            rasterFunctionArguments: {
                Raster: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.rasterName,
                    hidden: false,
                    helpTextID: "ndvi_raster"
                },
                VisibleBandID: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.long,
                    displayName: functionStrings.rasterFunctions.rfxArgs.visibleBandIDName,
                    hidden: false,
                    defaultValue: 0,
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.bandIndex,
                        argumentName: "Raster"
                    },
                    helpTextID: "ndvi_visiblebandid"
                },
                InfraredBandID: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.long,
                    displayName: functionStrings.rasterFunctions.rfxArgs.infraredBandIDName,
                    hidden: false,
                    defaultValue: 0,
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.bandIndex,
                        argumentName: "Raster"
                    },
                    helpTextID: "ndvi_infraredbandid"
                },
                ScientificOutput: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.boolean,
                    displayName: functionStrings.rasterFunctions.rfxArgs.scientificOutputName,
                    hidden: false,
                    helpTextID: "ndvi_scientificoutput"
                }
            }
        },
        BandArithmeticFunction: {
            name: functionStrings.rasterFunctions.rfx.bandArithmeticName,
            snippet: functionStrings.rasterFunctions.rfx.bandArithmeticSnip,
            description: functionStrings.rasterFunctions.rfx.bandArithmeticDesc,
            category: "math",
            icon: "bandArithmetic.png",
            helpID: "band-arithmetic-function.htm",
            rasterFunctionArguments: {
                Raster: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.rasterName,
                    hidden: false,
                    helpTextID: "bandarithmetic_raster"
                },
                Method: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.long,
                    displayName: functionStrings.rasterFunctions.rfxArgs.methodName,
                    hidden: false,
                    defaultValue: 1,
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.bandArithmeticMethods
                    },
                    helpTextID: "bandarithmetic_method"
                },
                BandIndexes: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.bandIndexesName,
                    hidden: false,
                    helpTextID: "bandarithmetic_bandindexes"
                }
            },
            editorArgumentOverride: {
                active: true,
                overrides: [
                    {
                        argumentNames: ["BandIndexes"],
                        triggerArguments: ["Method"],
                        widget: {
                            path: "rfx-cte-band-arithmetic-band-indexes-editor"
                        },
                        helpTextIDs: {
                            bandarithmetic_bandindexes: "bandarithmetic_bandindexes"
                        }
                    }
                ]
            }
        },
        ConstantFunction: {
            name: functionStrings.rasterFunctions.rfx.constantName,
            snippet: functionStrings.rasterFunctions.rfx.constantSnip,
            description: functionStrings.rasterFunctions.rfx.constantDesc,
            category: "dataManagement",
            icon: "constant.png",
            helpID: "",
            rasterFunctionArguments: {
                Constant: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.doubleArray,
                    displayName: functionStrings.rasterFunctions.rfxArgs.constantName,
                    hidden: false,
                    defaultValue: [1],
                    helpTextID: "constant_constant"
                },
                RasterInfo: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.rasterInfo,
                    displayName: functionStrings.rasterFunctions.rfxArgs.rasterInfoName,
                    hidden: false,
                    helpTextID: "constant_rasterinfo"
                },
                Statistics: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.rasterStatisticsArray,
                    displayName: functionStrings.rasterFunctions.rfxArgs.statisticsName,
                    hidden: true
                }
            }
        },
        CostAllocation: {
            name: functionStrings.rasterFunctions.rfx.costAllocationName,
            snippet: functionStrings.rasterFunctions.rfx.costAllocationSnip,
            description: functionStrings.rasterFunctions.rfx.costAllocationDesc,
            hidden: true,
            category: "distanceLegacy",
            icon: "costAllocation.png",
            helpID: "cost-allocation-global-function.htm",
            rasterFunctionArguments: {
                ToolName: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: true,
                    defaultValue: "CostAllocation_sa"
                },
                PrimaryInputParameterName: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: true,
                    defaultValue: "in_source_data"
                },
                OutputRasterParameterName: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: true,
                    defaultValue: "out_allocation_raster"
                },
                in_source_data: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.sourceDataName,
                    hidden: false,
                    helpTextID: "costallocation_insourcedata"
                },
                source_field: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.sourceFieldName,
                    hidden: false,
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.fields,
                        argumentName: "in_source_data"
                    },
                    helpTextID: "costallocation_sourcefield"
                },
                in_cost_raster: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.costRasterName,
                    hidden: false,
                    helpTextID: "costallocation_incostraster"
                },
                maximum_distance: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.double,
                    displayName: functionStrings.rasterFunctions.rfxArgs.maxDistanceName,
                    hidden: false,
                    helpTextID: "costallocation_maximumdistance"
                },
                in_value_raster: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.valueRasterName,
                    hidden: false,
                    helpTextID: "costallocation_invalueraster"
                },
                source_cost_multiplier: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.costMultiplierName,
                    hidden: false,
                    categoryRefId: "rfxArgCat_SourceCharacteristics",
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.switchable,
                        attributes: [
                            {
                                type: "number"
                            },
                            {
                                type: "field",
                                argumentName: "in_source_data"
                            }
                        ]
                    },
                    helpTextID: "costallocation_sourcecostmultiplier"
                },
                source_start_cost: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.startCostName,
                    hidden: false,
                    categoryRefId: "rfxArgCat_SourceCharacteristics",
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.switchable,
                        attributes: [
                            {
                                type: "number"
                            },
                            {
                                type: "field",
                                argumentName: "in_source_data"
                            }
                        ]
                    },
                    helpTextID: "costallocation_sourcestartcost"
                },
                source_resistance_rate: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.accumCostResistanceRateName,
                    hidden: false,
                    categoryRefId: "rfxArgCat_SourceCharacteristics",
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.switchable,
                        attributes: [
                            {
                                type: "number"
                            },
                            {
                                type: "field",
                                argumentName: "in_source_data"
                            }
                        ]
                    },
                    helpTextID: "costallocation_sourceresistancerate"
                },
                source_capacity: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.capacityName,
                    hidden: false,
                    categoryRefId: "rfxArgCat_SourceCharacteristics",
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.switchable,
                        attributes: [
                            {
                                type: "number"
                            },
                            {
                                type: "field",
                                argumentName: "in_source_data"
                            }
                        ]
                    },
                    helpTextID: "costallocation_sourcecapacity"
                },
                source_direction: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.travelDirectionName,
                    hidden: false,
                    categoryRefId: "rfxArgCat_SourceCharacteristics",
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.switchable,
                        attributes: [
                            {
                                type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                                enum: enums.gpsaTravelDirections,
                                defaultValue: "FROM_SOURCE"
                            },
                            {
                                type: "field",
                                argumentName: "in_source_data"
                            }
                        ]
                    },
                    helpTextID: "costallocation_sourcedirection"
                }
            }
        },
        CostBackLink: {
            name: functionStrings.rasterFunctions.rfx.costBackLinkName,
            snippet: functionStrings.rasterFunctions.rfx.costBackLinkSnip,
            description: functionStrings.rasterFunctions.rfx.costBackLinkDesc,
            hidden: true,
            category: "distanceLegacy",
            icon: "costBackLink.png",
            helpID: "cost-back-link-function.htm",
            rasterFunctionArguments: {
                ToolName: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: true,
                    defaultValue: "CostBackLink_sa"
                },
                PrimaryInputParameterName: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: true,
                    defaultValue: "in_source_data"
                },
                OutputRasterParameterName: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: true,
                    defaultValue: "out_backlink_raster"
                },
                in_source_data: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.sourceDataName,
                    hidden: false,
                    helpTextID: "costbacklink_insourcedata"
                },
                in_cost_raster: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.costRasterName,
                    hidden: false,
                    helpTextID: "costbacklink_incostraster"
                },
                maximum_distance: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.double,
                    displayName: functionStrings.rasterFunctions.rfxArgs.maxDistanceName,
                    hidden: false,
                    helpTextID: "costbacklink_maximumdistance"
                },
                source_cost_multiplier: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.costMultiplierName,
                    hidden: false,
                    categoryRefId: "rfxArgCat_SourceCharacteristics",
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.switchable,
                        attributes: [
                            {
                                type: "number"
                            },
                            {
                                type: "field",
                                argumentName: "in_source_data"
                            }
                        ]
                    },
                    helpTextID: "costbacklink_sourcecostmultiplier"
                },
                source_start_cost: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.startCostName,
                    hidden: false,
                    categoryRefId: "rfxArgCat_SourceCharacteristics",
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.switchable,
                        attributes: [
                            {
                                type: "number"
                            },
                            {
                                type: "field",
                                argumentName: "in_source_data"
                            }
                        ]
                    },
                    helpTextID: "costbacklink_sourcestartcost"
                },
                source_resistance_rate: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.accumCostResistanceRateName,
                    hidden: false,
                    categoryRefId: "rfxArgCat_SourceCharacteristics",
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.switchable,
                        attributes: [
                            {
                                type: "number"
                            },
                            {
                                type: "field",
                                argumentName: "in_source_data"
                            }
                        ]
                    },
                    helpTextID: "costbacklink_sourceresistancerate"
                },
                source_capacity: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.capacityName,
                    hidden: false,
                    categoryRefId: "rfxArgCat_SourceCharacteristics",
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.switchable,
                        attributes: [
                            {
                                type: "number"
                            },
                            {
                                type: "field",
                                argumentName: "in_source_data"
                            }
                        ]
                    },
                    helpTextID: "costbacklink_sourcecapacity"
                },
                source_direction: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.travelDirectionName,
                    hidden: false,
                    categoryRefId: "rfxArgCat_SourceCharacteristics",
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.switchable,
                        attributes: [
                            {
                                type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                                enum: enums.gpsaTravelDirections,
                                defaultValue: "FROM_SOURCE"
                            },
                            {
                                type: "field",
                                argumentName: "in_source_data"
                            }
                        ]
                    },
                    helpTextID: "costbacklink_sourcedirection"
                }
            }
        },
        CostDistance: {
            name: functionStrings.rasterFunctions.rfx.costDistanceName,
            snippet: functionStrings.rasterFunctions.rfx.costDistanceSnip,
            description: functionStrings.rasterFunctions.rfx.costDistanceDesc,
            hidden: true,
            category: "distanceLegacy",
            icon: "costDistance.png",
            helpID: "cost-distance-global-function.htm",
            rasterFunctionArguments: {
                ToolName: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: true,
                    defaultValue: "CostDistance_sa"
                },
                PrimaryInputParameterName: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: true,
                    defaultValue: "in_source_data"
                },
                OutputRasterParameterName: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: true,
                    defaultValue: "out_distance_raster"
                },
                in_source_data: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.sourceDataName,
                    hidden: false,
                    helpTextID: "costdistance_insourcedata"
                },
                in_cost_raster: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.costRasterName,
                    hidden: false,
                    helpTextID: "costdistance_incostraster"
                },
                maximum_distance: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.double,
                    displayName: functionStrings.rasterFunctions.rfxArgs.maxDistanceName,
                    hidden: false,
                    helpTextID: "costdistance_maximumdistance"
                },
                source_cost_multiplier: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.costMultiplierName,
                    hidden: false,
                    categoryRefId: "rfxArgCat_SourceCharacteristics",
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.switchable,
                        attributes: [
                            {
                                type: "number"
                            },
                            {
                                type: "field",
                                argumentName: "in_source_data"
                            }
                        ]
                    },
                    helpTextID: "costdistance_sourcecostmultiplier"
                },
                source_start_cost: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.startCostName,
                    hidden: false,
                    categoryRefId: "rfxArgCat_SourceCharacteristics",
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.switchable,
                        attributes: [
                            {
                                type: "number"
                            },
                            {
                                type: "field",
                                argumentName: "in_source_data"
                            }
                        ]
                    },
                    helpTextID: "costdistance_sourcestartcost"
                },
                source_resistance_rate: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.accumCostResistanceRateName,
                    hidden: false,
                    categoryRefId: "rfxArgCat_SourceCharacteristics",
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.switchable,
                        attributes: [
                            {
                                type: "number"
                            },
                            {
                                type: "field",
                                argumentName: "in_source_data"
                            }
                        ]
                    },
                    helpTextID: "costdistance_sourceresistancerate"
                },
                source_capacity: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.capacityName,
                    hidden: false,
                    categoryRefId: "rfxArgCat_SourceCharacteristics",
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.switchable,
                        attributes: [
                            {
                                type: "number"
                            },
                            {
                                type: "field",
                                argumentName: "in_source_data"
                            }
                        ]
                    },
                    helpTextID: "costdistance_sourcecapacity"
                },
                source_direction: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.travelDirectionName,
                    hidden: false,
                    categoryRefId: "rfxArgCat_SourceCharacteristics",
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.switchable,
                        attributes: [
                            {
                                type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                                enum: enums.gpsaTravelDirections,
                                defaultValue: "FROM_SOURCE"
                            },
                            {
                                type: "field",
                                argumentName: "in_source_data"
                            }
                        ]
                    },
                    helpTextID: "costdistance_sourcedirection"
                }
            }
        },
        CostPath: {
            name: functionStrings.rasterFunctions.rfx.costPathName,
            snippet: functionStrings.rasterFunctions.rfx.costPathSnip,
            description: functionStrings.rasterFunctions.rfx.costPathDesc,
            hidden: true,
            category: "distanceLegacy",
            icon: "costPath.png",
            helpID: "cost-path-function.htm",
            rasterFunctionArguments: {
                ToolName: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: true,
                    defaultValue: "CostPath_sa"
                },
                PrimaryInputParameterName: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: true,
                    defaultValue: "in_destination_data"
                },
                OutputRasterParameterName: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: true,
                    defaultValue: "out_raster"
                },
                in_destination_data: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.destinationDataName,
                    hidden: false,
                    helpTextID: "costpath_indestinationdata"
                },
                destination_field: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.destinationFieldName,
                    hidden: false,
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.fields,
                        argumentName: "in_destination_data"
                    },
                    helpTextID: "costpath_destinationfield"
                },
                in_cost_distance_raster: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.costDistanceRaster,
                    hidden: false,
                    helpTextID: "costpath_incostdistanceraster"
                },
                in_cost_backlink_raster: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.costBacklinkRaster,
                    hidden: false,
                    helpTextID: "costpath_incostbacklinkraster"
                },
                path_type: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.pathTypeName,
                    hidden: false,
                    defaultValue: "EACH_CELL",
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.gpsaLeastCostPathTypes
                    },
                    helpTextID: "costpath_pathtype"
                },
                force_flow_direction_convention: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.boolean,
                    displayName: functionStrings.rasterFunctions.rfxArgs.forceFlowDirectionConvention,
                    hidden: false,
                    defaultValue: false,
                    helpTextID: "costpath_forceflowdirectionconvention"
                }
            }
        },
        EucAllocation: {
            name: functionStrings.rasterFunctions.rfx.eucAllocationName,
            snippet: functionStrings.rasterFunctions.rfx.eucAllocationSnip,
            description: functionStrings.rasterFunctions.rfx.eucAllocationDesc,
            hidden: true,
            category: "distanceLegacy",
            icon: "eucAllocation.png",
            helpID: "euclidean-allocation-global-function.htm",
            rasterFunctionArguments: {
                ToolName: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: true,
                    defaultValue: "EucAllocation_sa"
                },
                PrimaryInputParameterName: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: true,
                    defaultValue: "in_source_data"
                },
                OutputRasterParameterName: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: true,
                    defaultValue: "out_allocation_raster"
                },
                in_source_data: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.sourceDataName,
                    hidden: false,
                    helpTextID: "euclideanallocation_insourcedata"
                },
                source_field: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.sourceFieldName,
                    hidden: false,
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.fields,
                        argumentName: "in_source_data"
                    },
                    helpTextID: "euclideanallocation_sourcefield"
                },
                in_barrier_data: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.barrierDataName,
                    hidden: false,
                    helpTextID: "euclideanallocation_inbarrierdata"
                },
                maximum_distance: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.double,
                    displayName: functionStrings.rasterFunctions.rfxArgs.maxDistanceName,
                    hidden: false,
                    helpTextID: "euclideanallocation_maximumdistance"
                },
                in_value_raster: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.valueRasterName,
                    hidden: false,
                    helpTextID: "euclideanallocation_invalueraster"
                },
                cell_size: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.double,
                    displayName: functionStrings.rasterFunctions.rfxArgs.cellSizeName,
                    hidden: false,
                    helpTextID: "euclideanallocation_cellsize"
                },
                distance_method: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.distanceMethodName,
                    hidden: false,
                    defaultValue: "PLANAR",
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.gpsaDistanceMethods
                    },
                    helpTextID: "euclideanallocation_distancemethod"
                }
            }
        },
        EucDistance: {
            name: functionStrings.rasterFunctions.rfx.eucDistanceName,
            snippet: functionStrings.rasterFunctions.rfx.eucDistanceSnip,
            description: functionStrings.rasterFunctions.rfx.eucDistanceDesc,
            hidden: true,
            category: "distanceLegacy",
            icon: "eucDistance.png",
            helpID: "euclidean-distance-global-function.htm",
            rasterFunctionArguments: {
                ToolName: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: true,
                    defaultValue: "EucDistance_sa"
                },
                PrimaryInputParameterName: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: true,
                    defaultValue: "in_source_data"
                },
                OutputRasterParameterName: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: true,
                    defaultValue: "out_distance_raster"
                },
                in_source_data: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.sourceDataName,
                    hidden: false,
                    helpTextID: "euclideandistance_insourcedata"
                },
                in_barrier_data: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.barrierDataName,
                    hidden: false,
                    helpTextID: "euclideandistance_inbarrierdata"
                },
                maximum_distance: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.double,
                    displayName: functionStrings.rasterFunctions.rfxArgs.maxDistanceName,
                    hidden: false,
                    helpTextID: "euclideandistance_maximumdistance"
                },
                cell_size: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.double,
                    displayName: functionStrings.rasterFunctions.rfxArgs.cellSizeName,
                    hidden: false,
                    helpTextID: "euclideandistance_cellsize"
                },
                distance_method: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.distanceMethodName,
                    hidden: false,
                    defaultValue: "PLANAR",
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.gpsaDistanceMethods
                    },
                    helpTextID: "euclideandistance_distancemethod"
                }
            }
        },
        EucDirection: {
            name: functionStrings.rasterFunctions.rfx.eucDirectionName,
            snippet: functionStrings.rasterFunctions.rfx.eucDirectionSnip,
            description: functionStrings.rasterFunctions.rfx.eucDirectionDesc,
            hidden: true,
            category: "distanceLegacy",
            icon: "eucDirection.png",
            helpID: "euclidean-direction-function.htm",
            rasterFunctionArguments: {
                ToolName: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: true,
                    defaultValue: "EucDirection_sa"
                },
                PrimaryInputParameterName: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: true,
                    defaultValue: "in_source_data"
                },
                OutputRasterParameterName: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: true,
                    defaultValue: "out_direction_raster"
                },
                in_source_data: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.sourceDataName,
                    hidden: false,
                    helpTextID: "euclideandirection_insourcedata"
                },
                in_barrier_data: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.barrierDataName,
                    hidden: false,
                    helpTextID: "euclideandirection_inbarrierdata"
                },
                maximum_distance: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.double,
                    displayName: functionStrings.rasterFunctions.rfxArgs.maxDistanceName,
                    hidden: false,
                    helpTextID: "euclideandirection_maximumdistance"
                },
                cell_size: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.double,
                    displayName: functionStrings.rasterFunctions.rfxArgs.cellSizeName,
                    hidden: false,
                    helpTextID: "euclideandirection_cellsize"
                },
                distance_method: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.distanceMethodName,
                    hidden: false,
                    defaultValue: "PLANAR",
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.gpsaDistanceMethods
                    },
                    helpTextID: "euclideandirection_distancemethod"
                }
            }
        },
        KernelDensity: {
            name: functionStrings.rasterFunctions.rfx.kernelDensityName,
            snippet: functionStrings.rasterFunctions.rfx.kernelDensitySnip,
            description: functionStrings.rasterFunctions.rfx.kernelDensityDesc,
            category: "analysis",
            icon: "kernelDensity.png",
            helpID: "kernel-density-global-function.htm",
            rasterFunctionArguments: {
                ToolName: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: true,
                    defaultValue: "KernelDensity_sa"
                },
                PrimaryInputParameterName: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: true,
                    defaultValue: "in_features"
                },
                OutputRasterParameterName: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: true,
                    defaultValue: "out_raster"
                },
                RasterInfo: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.rasterInfo,
                    hidden: true,
                    defaultValue: {
                        pixelType: 9,
                        bandCount: 1
                    }
                },
                in_features: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.featureClass,
                    displayName: functionStrings.rasterFunctions.rfxArgs.featureClassName,
                    hidden: false,
                    helpTextID: "kerneldensity_infeatures"
                },
                population_field: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.populationFieldName,
                    defaultValue: "NONE",
                    hidden: false,
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.fields,
                        argumentName: "in_features",
                        otherOptions: {
                            NONE: functionStrings.rasterFunctions.enumLabels.none
                        }
                    },
                    helpTextID: "kerneldensity_populationfield"
                },
                cell_size: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.double,
                    displayName: functionStrings.rasterFunctions.rfxArgs.cellSizeName,
                    hidden: false,
                    helpTextID: "kerneldensity_cellsize"
                },
                search_radius: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.double,
                    displayName: functionStrings.rasterFunctions.rfxArgs.radiusName,
                    hidden: false,
                    helpTextID: "kerneldensity_searchradius"
                },
                area_unit_scale_factor: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.areaUnitsName,
                    hidden: false,
                    defaultValue: "SQUARE_MAP_UNITS",
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.gpsaKernelDensityAreaUnitTypes
                    },
                    helpTextID: "kerneldensity_areaunitscalefactor"
                },
                out_cell_values: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.outputValueTypeName,
                    hidden: false,
                    defaultValue: "DENSITIES",
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.gpsaKernelDensityOutValTypes
                    },
                    helpTextID: "kerneldensity_outcellvalues"
                },
                method: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.methodName,
                    hidden: false,
                    defaultValue: "PLANAR",
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.gpsaKernelDensityMethods
                    },
                    helpTextID: "kerneldensity_method"
                },
                in_barriers: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.featureClass,
                    dataTypeAttributes: {
                        type: ["polygon", "line"]
                    },
                    displayName: functionStrings.rasterFunctions.rfxArgs.barriersName,
                    hidden: false,
                    helpTextID: "kerneldensity_inbarriers"
                }
            }
        },
        ShortestPath: {
            name: functionStrings.rasterFunctions.rfx.shortestPathName,
            snippet: functionStrings.rasterFunctions.rfx.shortestPathSnip,
            description: functionStrings.rasterFunctions.rfx.shortestPathDesc,
            hidden: true,
            category: "distanceLegacy",
            icon: "shortestPath.png",
            helpID: "",
            rasterFunctionArguments: {
                ToolName: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: true,
                    defaultValue: "ShortestPath"
                },
                PrimaryInputParameterName: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: true,
                    defaultValue: "in_source_data"
                },
                OutputRasterParameterName: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: true,
                    defaultValue: "out_path_raster"
                },
                in_source_data: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.sourceDataName,
                    hidden: false,
                    helpTextID: "leastcostpath_insourcedata"
                },
                in_destination_data: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.destinationDataName,
                    hidden: false,
                    helpTextID: "leastcostpath_indestinationdata"
                },
                destination_field: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.destinationFieldName,
                    hidden: false,
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.fields,
                        argumentName: "in_destination_data"
                    },
                    helpTextID: "leastcostpath_destinationfield"
                },
                in_cost_raster: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.costRasterName,
                    hidden: false,
                    helpTextID: "leastcostpath_incostraster"
                },
                path_type: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.pathTypeName,
                    hidden: false,
                    defaultValue: "EACH_CELL",
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.gpsaLeastCostPathTypes
                    },
                    helpTextID: "leastcostpath_pathtype"
                },
                maximum_distance: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.double,
                    displayName: functionStrings.rasterFunctions.rfxArgs.maxDistanceName,
                    hidden: false,
                    helpTextID: "leastcostpath_maximumdistance"
                },
                source_cost_multiplier: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.costMultiplierName,
                    hidden: false,
                    categoryRefId: "rfxArgCat_SourceCharacteristics",
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.switchable,
                        attributes: [
                            {
                                type: "number"
                            },
                            {
                                type: "field",
                                argumentName: "in_source_data"
                            }
                        ]
                    },
                    helpTextID: "leastcostpath_sourcecostmultiplier"
                },
                source_start_cost: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.startCostName,
                    hidden: false,
                    categoryRefId: "rfxArgCat_SourceCharacteristics",
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.switchable,
                        attributes: [
                            {
                                type: "number"
                            },
                            {
                                type: "field",
                                argumentName: "in_source_data"
                            }
                        ]
                    },
                    helpTextID: "leastcostpath_sourcestartcost"
                },
                source_resistance_rate: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.accumCostResistanceRateName,
                    hidden: false,
                    categoryRefId: "rfxArgCat_SourceCharacteristics",
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.switchable,
                        attributes: [
                            {
                                type: "number"
                            },
                            {
                                type: "field",
                                argumentName: "in_source_data"
                            }
                        ]
                    },
                    helpTextID: "leastcostpath_sourceresistancerate"
                },
                source_capacity: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.capacityName,
                    hidden: false,
                    categoryRefId: "rfxArgCat_SourceCharacteristics",
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.switchable,
                        attributes: [
                            {
                                type: "number"
                            },
                            {
                                type: "field",
                                argumentName: "in_source_data"
                            }
                        ]
                    },
                    helpTextID: "leastcostpath_sourcecapacity"
                },
                source_direction: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.travelDirectionName,
                    hidden: false,
                    categoryRefId: "rfxArgCat_SourceCharacteristics",
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.switchable,
                        attributes: [
                            {
                                type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                                enum: enums.gpsaTravelDirections,
                                defaultValue: "FROM_SOURCE"
                            },
                            {
                                type: "field",
                                argumentName: "in_source_data"
                            }
                        ]
                    },
                    helpTextID: "leastcostpath_sourcedirection"
                }
            }
        },
        PathDistance: {
            name: functionStrings.rasterFunctions.rfx.pathDistanceName,
            snippet: functionStrings.rasterFunctions.rfx.pathDistanceSnip,
            description: functionStrings.rasterFunctions.rfx.pathDistanceDesc,
            hidden: true,
            category: "distanceLegacy",
            icon: "pathDistance.png",
            helpID: "path-distance-global-function.htm",
            rasterFunctionArguments: {
                ToolName: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: true,
                    defaultValue: "PathDistance_sa"
                },
                PrimaryInputParameterName: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: true,
                    defaultValue: "in_source_data"
                },
                OutputRasterParameterName: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: true,
                    defaultValue: "out_distance_raster"
                },
                in_source_data: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.sourceDataName,
                    hidden: false,
                    helpTextID: "pathdistance_insourcedata"
                },
                in_cost_raster: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.costRasterName,
                    hidden: false,
                    helpTextID: "pathdistance_incostraster"
                },
                in_surface_raster: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.surfaceRasterName,
                    hidden: false,
                    helpTextID: "pathdistance_insurfaceraster"
                },
                in_horizontal_raster: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.horizontalRaster,
                    hidden: false,
                    editorStateTrigger: {
                        active: true,
                        triggers: [
                            {
                                values: [],
                                checkValuePresent: true,
                                active: ["horizontal_factor"],
                                inactive: [],
                                autoRevert: true
                            }
                        ]
                    },
                    helpTextID: "pathdistance_inhorizontalraster"
                },
                horizontal_factor: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.horizontalFactor,
                    hidden: false,
                    helpTextID: "pathdistance_horizontalfactor"
                },
                in_vertical_raster: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.verticalRaster,
                    hidden: false,
                    editorStateTrigger: {
                        active: true,
                        triggers: [
                            {
                                values: [],
                                checkValuePresent: true,
                                active: ["vertical_factor"],
                                inactive: [],
                                autoRevert: true
                            }
                        ]
                    },
                    helpTextID: "pathdistance_inverticalraster"
                },
                vertical_factor: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.verticalFactor,
                    hidden: false,
                    helpTextID: "pathdistance_verticalfactor"
                },
                maximum_distance: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.double,
                    displayName: functionStrings.rasterFunctions.rfxArgs.maxDistanceName,
                    hidden: false,
                    helpTextID: "pathdistance_maximumdistance"
                },
                source_cost_multiplier: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.costMultiplierName,
                    hidden: false,
                    categoryRefId: "rfxArgCat_SourceCharacteristics",
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.switchable,
                        attributes: [
                            {
                                type: "number"
                            },
                            {
                                type: "field",
                                argumentName: "in_source_data"
                            }
                        ]
                    },
                    helpTextID: "pathdistance_sourcecostmultiplier"
                },
                source_start_cost: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.startCostName,
                    hidden: false,
                    categoryRefId: "rfxArgCat_SourceCharacteristics",
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.switchable,
                        attributes: [
                            {
                                type: "number"
                            },
                            {
                                type: "field",
                                argumentName: "in_source_data"
                            }
                        ]
                    },
                    helpTextID: "pathdistance_sourcestartcost"
                },
                source_resistance_rate: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.accumCostResistanceRateName,
                    hidden: false,
                    categoryRefId: "rfxArgCat_SourceCharacteristics",
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.switchable,
                        attributes: [
                            {
                                type: "number"
                            },
                            {
                                type: "field",
                                argumentName: "in_source_data"
                            }
                        ]
                    },
                    helpTextID: "pathdistance_sourceresistancerate"
                },
                source_capacity: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.capacityName,
                    hidden: false,
                    categoryRefId: "rfxArgCat_SourceCharacteristics",
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.switchable,
                        attributes: [
                            {
                                type: "number"
                            },
                            {
                                type: "field",
                                argumentName: "in_source_data"
                            }
                        ]
                    },
                    helpTextID: "pathdistance_sourcecapacity"
                },
                source_direction: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.travelDirectionName,
                    hidden: false,
                    categoryRefId: "rfxArgCat_SourceCharacteristics",
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.switchable,
                        attributes: [
                            {
                                type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                                enum: enums.gpsaTravelDirections,
                                defaultValue: "FROM_SOURCE"
                            },
                            {
                                type: "field",
                                argumentName: "in_source_data"
                            }
                        ]
                    },
                    helpTextID: "pathdistance_sourcedirection"
                }
            },
            editorArgumentOverride: {
                active: true,
                overrides: [
                    {
                        argumentNames: ["horizontal_factor"],
                        triggerArguments: ["in_horizontal_raster"],
                        widget: {
                            path: "rfx-cte-factor-function-editor"
                        }
                    },
                    {
                        argumentNames: ["vertical_factor"],
                        triggerArguments: ["in_vertical_raster"],
                        widget: {
                            path: "rfx-cte-factor-function-editor"
                        }
                    }
                ]
            }
        },
        PathBackLink: {
            name: functionStrings.rasterFunctions.rfx.pathBackLinkName,
            snippet: functionStrings.rasterFunctions.rfx.pathBackLinkSnip,
            description: functionStrings.rasterFunctions.rfx.pathBackLinkDesc,
            hidden: true,
            category: "distanceLegacy",
            icon: "pathBackLink.png",
            helpID: "path-distance-backlink-global-function.htm",
            rasterFunctionArguments: {
                ToolName: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: true,
                    defaultValue: "PathBackLink_sa"
                },
                PrimaryInputParameterName: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: true,
                    defaultValue: "in_source_data"
                },
                OutputRasterParameterName: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: true,
                    defaultValue: "out_backlink_raster"
                },
                in_source_data: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.sourceDataName,
                    hidden: false,
                    helpTextID: "pathdistancebacklink_insourcedata"
                },
                in_cost_raster: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.costRasterName,
                    hidden: false,
                    helpTextID: "pathdistancebacklink_incostraster"
                },
                in_surface_raster: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.surfaceRasterName,
                    hidden: false,
                    helpTextID: "pathdistancebacklink_insurfaceraster"
                },
                in_horizontal_raster: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.horizontalRaster,
                    hidden: false,
                    editorStateTrigger: {
                        active: true,
                        triggers: [
                            {
                                values: [],
                                checkValuePresent: true,
                                active: ["horizontal_factor"],
                                inactive: [],
                                autoRevert: true
                            }
                        ]
                    },
                    helpTextID: "pathdistancebacklink_inhorizontalraster"
                },
                horizontal_factor: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.horizontalFactor,
                    hidden: false,
                    helpTextID: "pathdistancebacklink_horizontalfactor"
                },
                in_vertical_raster: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.verticalRaster,
                    hidden: false,
                    editorStateTrigger: {
                        active: true,
                        triggers: [
                            {
                                values: [],
                                checkValuePresent: true,
                                active: ["vertical_factor"],
                                inactive: [],
                                autoRevert: true
                            }
                        ]
                    },
                    helpTextID: "pathdistancebacklink_inverticalraster"
                },
                vertical_factor: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.verticalFactor,
                    hidden: false,
                    helpTextID: "pathdistancebacklink_verticalfactor"
                },
                maximum_distance: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.double,
                    displayName: functionStrings.rasterFunctions.rfxArgs.maxDistanceName,
                    hidden: false,
                    helpTextID: "pathdistancebacklink_maximumdistance"
                },
                source_cost_multiplier: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.costMultiplierName,
                    hidden: false,
                    categoryRefId: "rfxArgCat_SourceCharacteristics",
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.switchable,
                        attributes: [
                            {
                                type: "number"
                            },
                            {
                                type: "field",
                                argumentName: "in_source_data"
                            }
                        ]
                    },
                    helpTextID: "pathdistancebacklink_sourcecostmultiplier"
                },
                source_start_cost: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.startCostName,
                    hidden: false,
                    categoryRefId: "rfxArgCat_SourceCharacteristics",
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.switchable,
                        attributes: [
                            {
                                type: "number"
                            },
                            {
                                type: "field",
                                argumentName: "in_source_data"
                            }
                        ]
                    },
                    helpTextID: "pathdistancebacklink_sourcestartcost"
                },
                source_resistance_rate: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.accumCostResistanceRateName,
                    hidden: false,
                    categoryRefId: "rfxArgCat_SourceCharacteristics",
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.switchable,
                        attributes: [
                            {
                                type: "number"
                            },
                            {
                                type: "field",
                                argumentName: "in_source_data"
                            }
                        ]
                    },
                    helpTextID: "pathdistancebacklink_sourceresistancerate"
                },
                source_capacity: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.capacityName,
                    hidden: false,
                    categoryRefId: "rfxArgCat_SourceCharacteristics",
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.switchable,
                        attributes: [
                            {
                                type: "number"
                            },
                            {
                                type: "field",
                                argumentName: "in_source_data"
                            }
                        ]
                    },
                    helpTextID: "pathdistancebacklink_sourcecapacity"
                },
                source_direction: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.travelDirectionName,
                    hidden: false,
                    categoryRefId: "rfxArgCat_SourceCharacteristics",
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.switchable,
                        attributes: [
                            {
                                type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                                enum: enums.gpsaTravelDirections,
                                defaultValue: "FROM_SOURCE"
                            },
                            {
                                type: "field",
                                argumentName: "in_source_data"
                            }
                        ]
                    },
                    helpTextID: "pathdistancebacklink_sourcedirection"
                }
            },
            editorArgumentOverride: {
                active: true,
                overrides: [
                    {
                        argumentNames: ["horizontal_factor"],
                        triggerArguments: ["in_horizontal_raster"],
                        widget: {
                            path: "rfx-cte-factor-function-editor"
                        }
                    },
                    {
                        argumentNames: ["vertical_factor"],
                        triggerArguments: ["in_vertical_raster"],
                        widget: {
                            path: "rfx-cte-factor-function-editor"
                        }
                    }
                ]
            }
        },
        PathAllocation: {
            name: functionStrings.rasterFunctions.rfx.pathAllocationName,
            snippet: functionStrings.rasterFunctions.rfx.pathAllocationSnip,
            description: functionStrings.rasterFunctions.rfx.pathAllocationDesc,
            hidden: true,
            category: "distanceLegacy",
            icon: "pathAllocation.png",
            helpID: "path-distance-allocation-global-function.htm",
            rasterFunctionArguments: {
                ToolName: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: true,
                    defaultValue: "PathAllocation_sa"
                },
                PrimaryInputParameterName: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: true,
                    defaultValue: "in_source_data"
                },
                OutputRasterParameterName: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: true,
                    defaultValue: "out_distance_raster"
                },
                in_source_data: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.sourceDataName,
                    hidden: false,
                    helpTextID: "pathdistanceallocation_insourcedata"
                },
                in_cost_raster: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.costRasterName,
                    hidden: false,
                    helpTextID: "pathdistanceallocation_incostraster"
                },
                in_surface_raster: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.surfaceRasterName,
                    hidden: false,
                    helpTextID: "pathdistanceallocation_insurfaceraster"
                },
                in_horizontal_raster: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.horizontalRaster,
                    hidden: false,
                    editorStateTrigger: {
                        active: true,
                        triggers: [
                            {
                                values: [],
                                checkValuePresent: true,
                                active: ["horizontal_factor"],
                                inactive: [],
                                autoRevert: true
                            }
                        ]
                    },
                    helpTextID: "pathdistanceallocation_inhorizontalraster"
                },
                horizontal_factor: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.horizontalFactor,
                    hidden: false,
                    helpTextID: "pathdistanceallocation_horizontalfactor"
                },
                in_vertical_raster: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.verticalRaster,
                    hidden: false,
                    editorStateTrigger: {
                        active: true,
                        triggers: [
                            {
                                values: [],
                                checkValuePresent: true,
                                active: ["vertical_factor"],
                                inactive: [],
                                autoRevert: true
                            }
                        ]
                    },
                    helpTextID: "pathdistanceallocation_inverticalraster"
                },
                vertical_factor: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.verticalFactor,
                    hidden: false,
                    helpTextID: "pathdistanceallocation_verticalfactor"
                },
                maximum_distance: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.double,
                    displayName: functionStrings.rasterFunctions.rfxArgs.maxDistanceName,
                    hidden: false,
                    helpTextID: "pathdistanceallocation_maximumdistance"
                },
                in_value_raster: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.valueRasterName,
                    hidden: false,
                    helpTextID: "pathdistanceallocation_invalueraster"
                },
                source_field: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.sourceFieldName,
                    hidden: false,
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.fields,
                        argumentName: "in_source_data"
                    },
                    helpTextID: "pathdistanceallocation_sourcefield"
                },
                source_cost_multiplier: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.costMultiplierName,
                    hidden: false,
                    categoryRefId: "rfxArgCat_SourceCharacteristics",
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.switchable,
                        attributes: [
                            {
                                type: "number"
                            },
                            {
                                type: "field",
                                argumentName: "in_source_data"
                            }
                        ]
                    },
                    helpTextID: "pathdistanceallocation_sourcecostmultiplier"
                },
                source_start_cost: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.startCostName,
                    hidden: false,
                    categoryRefId: "rfxArgCat_SourceCharacteristics",
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.switchable,
                        attributes: [
                            {
                                type: "number"
                            },
                            {
                                type: "field",
                                argumentName: "in_source_data"
                            }
                        ]
                    },
                    helpTextID: "pathdistanceallocation_sourcestartcost"
                },
                source_resistance_rate: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.accumCostResistanceRateName,
                    hidden: false,
                    categoryRefId: "rfxArgCat_SourceCharacteristics",
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.switchable,
                        attributes: [
                            {
                                type: "number"
                            },
                            {
                                type: "field",
                                argumentName: "in_source_data"
                            }
                        ]
                    },
                    helpTextID: "pathdistanceallocation_sourceresistancerate"
                },
                source_capacity: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.capacityName,
                    hidden: false,
                    categoryRefId: "rfxArgCat_SourceCharacteristics",
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.switchable,
                        attributes: [
                            {
                                type: "number"
                            },
                            {
                                type: "field",
                                argumentName: "in_source_data"
                            }
                        ]
                    },
                    helpTextID: "pathdistanceallocation_sourcecapacity"
                },
                source_direction: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.travelDirectionName,
                    hidden: false,
                    categoryRefId: "rfxArgCat_SourceCharacteristics",
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.switchable,
                        attributes: [
                            {
                                type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                                enum: enums.gpsaTravelDirections,
                                defaultValue: "FROM_SOURCE"
                            },
                            {
                                type: "field",
                                argumentName: "in_source_data"
                            }
                        ]
                    },
                    helpTextID: "pathdistanceallocation_sourcedirection"
                }
            },
            editorArgumentOverride: {
                active: true,
                overrides: [
                    {
                        argumentNames: ["horizontal_factor"],
                        triggerArguments: ["in_horizontal_raster"],
                        widget: {
                            path: "rfx-cte-factor-function-editor"
                        }
                    },
                    {
                        argumentNames: ["vertical_factor"],
                        triggerArguments: ["in_vertical_raster"],
                        widget: {
                            path: "rfx-cte-factor-function-editor"
                        }
                    }
                ]
            }
        },
        Viewshed2: {
            name: functionStrings.rasterFunctions.rfx.viewshed2Name,
            snippet: functionStrings.rasterFunctions.rfx.viewshed2Snip,
            description: functionStrings.rasterFunctions.rfx.viewshed2Desc,
            category: "surface",
            icon: "viewshed2.png",
            helpID: "viewshed-global-function.htm",
            rasterFunctionArguments: {
                ToolName: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: true,
                    defaultValue: "Viewshed2_sa"
                },
                PrimaryInputParameterName: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: true,
                    defaultValue: "in_raster"
                },
                OutputRasterParameterName: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: true,
                    defaultValue: "out_raster"
                },
                in_raster: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.rasterName,
                    hidden: false,
                    helpTextID: "viewshed_inraster"
                },
                in_observer_features: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.featureClass,
                    displayName: functionStrings.rasterFunctions.rfxArgs.observerFeaturesName,
                    hidden: false,
                    helpTextID: "viewshed_inobserverfeatures"
                },
                analysis_method: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.analysisMethodName,
                    hidden: false,
                    defaultValue: "ALL_SIGHTLINES",
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.gpsaViewshedAnalysisMethods
                    },
                    categoryRefId: "rfxArgCat_ViewshedParameters",
                    helpTextID: "viewshed_analysismethod"
                },
                analysis_type: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.analysisTypeName,
                    hidden: false,
                    defaultValue: "FREQUENCY",
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.gpsaViewshedAnalysisTypes
                    },
                    categoryRefId: "rfxArgCat_ViewshedParameters",
                    helpTextID: "viewshed_analysistype"
                },
                vertical_error: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.verticalErrorName,
                    hidden: false,
                    defaultValue: "0 Meters",
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.linearUnit,
                        enum: enums.gpsaLinearUnitTypes
                    },
                    categoryRefId: "rfxArgCat_ViewshedParameters",
                    helpTextID: "viewshed_verticalerror"
                },
                refractivity_coefficient: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.double,
                    displayName: functionStrings.rasterFunctions.rfxArgs.refractivityCoefficientName,
                    hidden: false,
                    defaultValue: 0.13,
                    categoryRefId: "rfxArgCat_ViewshedParameters",
                    helpTextID: "viewshed_refractivitycoefficient"
                },
                surface_offset: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.surfaceOffsetName,
                    hidden: false,
                    defaultValue: "0 Meters",
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.switchable,
                        attributes: [
                            {
                                type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.linearUnit,
                                enum: enums.gpsaLinearUnitTypes
                            },
                            {
                                type: "field",
                                argumentName: "in_observer_features"
                            }
                        ]
                    },
                    categoryRefId: "rfxArgCat_ObserverParameters",
                    helpTextID: "viewshed_surfaceoffset"
                },
                observer_elevation: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.observerElevationName,
                    hidden: false,
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.switchable,
                        attributes: [
                            {
                                type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.linearUnit,
                                enum: enums.gpsaLinearUnitTypes
                            },
                            {
                                type: "field",
                                argumentName: "in_observer_features"
                            }
                        ]
                    },
                    categoryRefId: "rfxArgCat_ObserverParameters",
                    helpTextID: "viewshed_observerelevation"
                },
                observer_offset: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.observerOffsetName,
                    hidden: false,
                    defaultValue: "1 Meters",
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.switchable,
                        attributes: [
                            {
                                type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.linearUnit,
                                enum: enums.gpsaLinearUnitTypes
                            },
                            {
                                type: "field",
                                argumentName: "in_observer_features"
                            }
                        ]
                    },
                    categoryRefId: "rfxArgCat_ObserverParameters",
                    helpTextID: "viewshed_observeroffset"
                },
                inner_radius: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.innerRadiusName,
                    hidden: false,
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.switchable,
                        attributes: [
                            {
                                type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.linearUnit,
                                enum: enums.gpsaLinearUnitTypes
                            },
                            {
                                type: "field",
                                argumentName: "in_observer_features"
                            }
                        ]
                    },
                    categoryRefId: "rfxArgCat_ObserverParameters",
                    helpTextID: "viewshed_innerradius"
                },
                inner_radius_is_3d: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.boolean,
                    displayName: functionStrings.rasterFunctions.rfxArgs.innerRadiusIs3DDistanceName,
                    hidden: false,
                    defaultValue: false,
                    categoryRefId: "rfxArgCat_ObserverParameters",
                    helpTextID: "viewshed_innerradiusis3d"
                },
                outer_radius: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.outerRadiusName,
                    hidden: false,
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.switchable,
                        attributes: [
                            {
                                type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.linearUnit,
                                enum: enums.gpsaLinearUnitTypes
                            },
                            {
                                type: "field",
                                argumentName: "in_observer_features"
                            }
                        ]
                    },
                    categoryRefId: "rfxArgCat_ObserverParameters",
                    helpTextID: "viewshed_outerradius"
                },
                outer_radius_is_3d: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.boolean,
                    displayName: functionStrings.rasterFunctions.rfxArgs.outerRadiusIs3DDistanceName,
                    hidden: false,
                    defaultValue: false,
                    categoryRefId: "rfxArgCat_ObserverParameters",
                    helpTextID: "viewshed_outerradiusis3d"
                },
                horizontal_start_angle: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.horizontalStartAngleName,
                    hidden: false,
                    defaultValue: "0",
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.switchable,
                        attributes: [
                            {
                                type: "number"
                            },
                            {
                                type: "field",
                                argumentName: "in_observer_features"
                            }
                        ]
                    },
                    categoryRefId: "rfxArgCat_ObserverParameters",
                    helpTextID: "viewshed_horizontalstartangle"
                },
                horizontal_end_angle: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.horizontalEndAngleName,
                    hidden: false,
                    defaultValue: "360",
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.switchable,
                        attributes: [
                            {
                                type: "number"
                            },
                            {
                                type: "field",
                                argumentName: "in_observer_features"
                            }
                        ]
                    },
                    categoryRefId: "rfxArgCat_ObserverParameters",
                    helpTextID: "viewshed_horizontalendangle"
                },
                vertical_upper_angle: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.verticalUpperAngleName,
                    hidden: false,
                    defaultValue: "90",
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.switchable,
                        attributes: [
                            {
                                type: "number"
                            },
                            {
                                type: "field",
                                argumentName: "in_observer_features"
                            }
                        ]
                    },
                    categoryRefId: "rfxArgCat_ObserverParameters",
                    helpTextID: "viewshed_verticalupperangle"
                },
                vertical_lower_angle: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.verticalLowerAngleName,
                    hidden: false,
                    defaultValue: "-90",
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.switchable,
                        attributes: [
                            {
                                type: "number"
                            },
                            {
                                type: "field",
                                argumentName: "in_observer_features"
                            }
                        ]
                    },
                    categoryRefId: "rfxArgCat_ObserverParameters",
                    helpTextID: "viewshed_verticallowerangle"
                }
            }
        },
        ZonalStatistics: {
            name: functionStrings.rasterFunctions.rfx.zonalStatisticsName,
            snippet: functionStrings.rasterFunctions.rfx.zonalStatisticsSnip,
            description: functionStrings.rasterFunctions.rfx.zonalStatisticsDesc,
            category: "statistical",
            icon: "zonalStatistics.png",
            helpID: "zonal-statistics-global-function.htm",
            rasterFunctionArguments: {
                ToolName: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: true,
                    defaultValue: "ZonalStatistics_sa"
                },
                PrimaryInputParameterName: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: true,
                    defaultValue: "in_value_raster"
                },
                OutputRasterParameterName: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: true,
                    defaultValue: "out_raster"
                },
                in_zone_data: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.zoneDataName,
                    hidden: false,
                    helpTextID: "zonalstatistics_inzonedata"
                },
                zone_field: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.zoneFieldName,
                    hidden: false,
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.fields,
                        argumentName: "in_zone_data"
                    },
                    helpTextID: "zonalstatistics_zonefield"
                },
                in_value_raster: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.valueRasterName,
                    hidden: false,
                    helpTextID: "zonalstatistics_invalueraster"
                },
                statistics_type: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.statisticsTypeName,
                    hidden: false,
                    defaultValue: "MEAN",
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.gpsaZonalStatisticsTypes
                    },
                    editorStateTrigger: {
                        active: true,
                        triggers: [
                            {
                                values: ["PERCENTILE"],
                                active: ["percentile_value"],
                                inactive: [],
                                autoRevert: true
                            },
                            {
                                values: ["PERCENTILE", "MEDIAN"],
                                active: ["percentile_interpolation_type"],
                                inactive: [],
                                autoRevert: true
                            },
                            {
                                values: ["MAXIMUM", "MINIMUM", "RANGE", "PERCENTILE", "MEDIAN", "SUM"],
                                active: [],
                                inactive: ["circular_calculation", "circular_wrap_value"],
                                autoRevert: true
                            }
                        ]
                    },
                    helpTextID: "zonalstatistics_statisticstype"
                },
                percentile_value: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.double,
                    displayName: functionStrings.rasterFunctions.rfxArgs.percentileValue,
                    hidden: false,
                    categoryRefId: "rfxArgCat_Percentile",
                    defaultValue: 90,
                    helpTextID: "zonalstatistics_percentilevalue"
                },
                percentile_interpolation_type: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.percentileInterpolationType,
                    hidden: false,
                    categoryRefId: "rfxArgCat_Percentile",
                    defaultValue: "AUTO_DETECT",
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.gpsaZonalPercentileInterpolationTypes
                    },
                    helpTextID: "zonalstatistics_percentileinterpolationtype"
                },
                circular_calculation: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.circularCalculation,
                    hidden: false,
                    defaultValue: "ARITHMETIC",
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.gpsaCircularCalculation
                    },
                    editorStateTrigger: {
                        active: true,
                        triggers: [
                            {
                                values: ["ARITHMETIC"],
                                active: [],
                                inactive: ["circular_wrap_value"],
                                autoRevert: true
                            }
                        ]
                    },
                    helpTextID: "zonalstatistics_circularcalculation"
                },
                circular_wrap_value: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.double,
                    displayName: functionStrings.rasterFunctions.rfxArgs.circularWrapValue,
                    hidden: false,
                    defaultValue: 360,
                    helpTextID: "zonalstatistics_circularwrapvalue"
                },
                ignore_nodata: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.ignoreNoDataName,
                    hidden: false,
                    defaultValue: "DATA",
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.gpsaIgnoreNoData
                    },
                    helpTextID: "zonalstatistics_ignorenodata"
                },
                process_as_multidimensional: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.processMultidimensional,
                    hidden: false,
                    defaultValue: "CURRENT_SLICE",
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.gpsaProcessAsMultidimensionalOptions
                    },
                    helpTextID: "zonalstatistics_processasmultidimensional"
                }
            },
            editorArgumentOverride: {
                active: true,
                overrides: [
                    {
                        argumentNames: ["statistics_type"],
                        triggerArguments: ["in_value_raster"],
                        triggerAttributes: "pixelType:in_value_raster,float,MEAN|MAXIMUM|MINIMUM|RANGE|STD|SUM",
                        widget: {
                            path: "rfx-cte-filtered-argument-editor"
                        }
                    },
                    {
                        argumentNames: ["percentile_value"],
                        triggerAttributes: "minValue:0;maxValue:100",
                        widget: {
                            path: "rfx-cte-ranged-value-editor"
                        }
                    }
                ]
            }
        },
        HeatIndex: {
            name: functionStrings.rasterFunctions.rfx.heatIndexName,
            snippet: functionStrings.rasterFunctions.rfx.heatIndexSnip,
            description: functionStrings.rasterFunctions.rfx.heatIndexDesc,
            category: "analysis",
            icon: "heatIndex.png",
            helpID: "heat-index.htm",
            rasterFunctionArguments: {
                PythonModule: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: true,
                    defaultValue: "[functions]System\\HeatIndex.py"
                },
                ClassName: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: true,
                    defaultValue: "HeatIndex"
                },
                temperature: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.temperatureRasterName,
                    hidden: false,
                    helpTextID: "heatindex_temperature"
                },
                units: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.inTemperatureUnitsName,
                    hidden: false,
                    defaultValue: "Fahrenheit",
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.pyStdTemperatureUnitTypes
                    },
                    helpTextID: "heatindex_units"
                },
                rh: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.relativeHumidityRasterName,
                    hidden: false,
                    helpTextID: "heatindex_rh"
                },
                outunits: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.outHeatIndexTemperatureUnitsName,
                    hidden: false,
                    defaultValue: "Fahrenheit",
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.pyStdTemperatureUnitTypes
                    },
                    helpTextID: "heatindex_outunits"
                }
            }
        },
        Windchill: {
            name: functionStrings.rasterFunctions.rfx.windchillName,
            snippet: functionStrings.rasterFunctions.rfx.windchillSnip,
            description: functionStrings.rasterFunctions.rfx.windchillDesc,
            category: "analysis",
            icon: "windchill.png",
            helpID: "wind-chill-function.htm",
            rasterFunctionArguments: {
                PythonModule: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: true,
                    defaultValue: "[functions]System\\Windchill.py"
                },
                ClassName: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: true,
                    defaultValue: "Windchill"
                },
                temperature: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.temperatureRasterName,
                    hidden: false,
                    helpTextID: "windchill_temperature"
                },
                tunits: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.inTemperatureUnitsName,
                    hidden: false,
                    defaultValue: "Fahrenheit",
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.pyStdTemperatureUnitTypes
                    },
                    helpTextID: "windchill_tunits"
                },
                ws: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.windSpeedRasterName,
                    hidden: false,
                    helpTextID: "windchill_ws"
                },
                wunits: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.inWindSpeedUnitsName,
                    hidden: false,
                    defaultValue: "mph",
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.pyStdWindspeedUnitTypes
                    },
                    helpTextID: "windchill_wunits"
                },
                ounits: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.outWindChillTemperatureUnitsName,
                    hidden: false,
                    defaultValue: "Fahrenheit",
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.pyStdTemperatureUnitTypes
                    },
                    helpTextID: "windchill_ounits"
                }
            }
        },
        KeyMetadata: {
            name: functionStrings.rasterFunctions.rfx.keyMetadataName,
            snippet: functionStrings.rasterFunctions.rfx.keyMetadataSnip,
            description: functionStrings.rasterFunctions.rfx.keyMetadataDesc,
            category: "dataManagement",
            icon: "keyMetadata.png",
            helpID: "key-metadata-function.htm",
            rasterFunctionArguments: {
                PythonModule: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: true,
                    defaultValue: "[functions]System\\KeyMetadata.py"
                },
                ClassName: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: true,
                    defaultValue: "KeyMetadata"
                },
                raster: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.rasterName,
                    hidden: false,
                    helpTextID: "keymetadata_raster"
                },
                property: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.propertyName,
                    hidden: false,
                    helpTextID: "keymetadata_property"
                },
                value: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.valueName,
                    hidden: false,
                    helpTextID: "keymetadata_value"
                },
                bands: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.bandNamesName,
                    hidden: false,
                    helpTextID: "keymetadata_bands"
                },
                json: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.jsonName,
                    hidden: false,
                    helpTextID: "keymetadata_json"
                }
            }
        },
        RasterizeAttributes: {
            name: functionStrings.rasterFunctions.rfx.rasterizeAttributesName,
            snippet: functionStrings.rasterFunctions.rfx.rasterizeAttributesSnip,
            description: functionStrings.rasterFunctions.rfx.rasterizeAttributesDesc,
            category: "conversion",
            icon: "rasterizeAttributes.png",
            helpID: "rasterize-attributes-function.htm",
            rasterFunctionArguments: {
                PythonModule: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: true,
                    defaultValue: "[functions]System\\RasterizeAttributes.py"
                },
                ClassName: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: true,
                    defaultValue: "RasterizeAttributes"
                },
                vraster: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.valueRasterName,
                    hidden: false,
                    helpTextID: "rasterizeattributes_vraster"
                },
                zraster: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.zoneDataName,
                    hidden: false,
                    helpTextID: "rasterizeattributes_zraster"
                },
                ztable: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.zoneTableName,
                    hidden: false,
                    helpTextID: "rasterizeattributes_ztable"
                },
                zid: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.zoneFieldName,
                    hidden: false,
                    helpTextID: "rasterizeattributes_zid"
                },
                attribs: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.attributeFieldNames,
                    hidden: false,
                    helpTextID: "rasterizeattributes_attribs"
                },
                background: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.double,
                    displayName: functionStrings.rasterFunctions.rfxArgs.backgroundName,
                    hidden: false,
                    helpTextID: "rasterizeattributes_background"
                },
                where: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.whereClauseName,
                    hidden: false,
                    helpTextID: "rasterizeattributes_where"
                }
            }
        },
        ZonalRemap: {
            name: functionStrings.rasterFunctions.rfx.zonalRemapName,
            snippet: functionStrings.rasterFunctions.rfx.zonalRemapSnip,
            description: functionStrings.rasterFunctions.rfx.zonalRemapDesc,
            category: "reclass",
            icon: "zonalRemap.png",
            helpID: "zonal-remap-function.htm",
            rasterFunctionArguments: {
                PythonModule: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: true,
                    defaultValue: "[functions]System\\ZonalRemap.py"
                },
                ClassName: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: true,
                    defaultValue: "ZonalRemap"
                },
                vraster: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.valueRasterName,
                    hidden: false,
                    helpTextID: "zonalremap_vraster"
                },
                zraster: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.zoneDataName,
                    hidden: false,
                    helpTextID: "zonalremap_zraster"
                },
                ztable: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.zoneTableName,
                    hidden: false,
                    helpTextID: "zonalremap_ztable"
                },
                zid: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.zoneFieldName,
                    hidden: false,
                    defaultValue: "ZoneID",
                    helpTextID: "zonalremap_zid"
                },
                zmin: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.minimumValueFieldName,
                    hidden: false,
                    defaultValue: "ZoneMin",
                    helpTextID: "zonalremap_zmin"
                },
                zmax: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.maximumValueFieldName,
                    hidden: false,
                    defaultValue: "ZoneMax",
                    helpTextID: "zonalremap_zmax"
                },
                zval: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.outValueFieldName,
                    hidden: false,
                    defaultValue: "ZoneValue",
                    helpTextID: "zonalremap_zval"
                },
                background: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.double,
                    displayName: functionStrings.rasterFunctions.rfxArgs.backgroundName,
                    hidden: false,
                    defaultValue: 0,
                    helpTextID: "zonalremap_background"
                },
                defzval: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.double,
                    displayName: functionStrings.rasterFunctions.rfxArgs.defaultValueName,
                    hidden: false,
                    defaultValue: 255,
                    helpTextID: "zonalremap_defzval"
                },
                where: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.whereClauseName,
                    hidden: false,
                    helpTextID: "zonalremap_where"
                }
            }
        },
        AspectSlope: {
            name: functionStrings.rasterFunctions.rfx.aspectSlopeName,
            snippet: functionStrings.rasterFunctions.rfx.aspectSlopeSnip,
            description: functionStrings.rasterFunctions.rfx.aspectSlopeDesc,
            category: "surface",
            icon: "aspectSlope.png",
            helpID: "aspect-slope-function.htm",
            rasterFunctionArguments: {
                PythonModule: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: true,
                    defaultValue: "[functions]System\\AspectSlope.py"
                },
                ClassName: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: true,
                    defaultValue: "AspectSlope"
                },
                raster: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.rasterName,
                    hidden: false,
                    helpTextID: "aspectslope_raster"
                },
                zf: {
                    required: true,
                    displayName: functionStrings.rasterFunctions.rfxArgs.zFactorName,
                    hidden: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.double,
                    defaultValue: 1,
                    helpTextID: "aspectslope_zf"
                }
            }
        },
        LocalFunction: {
            rasterFunctionArguments: {
                Rasters: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.rasterArray,
                    hidden: false,
                    allowScalar: true,
                    displayName: functionStrings.rasterFunctions.rfxArgs.rastersName,
                    nElementsArgument: "Operation",
                    elementInfos: [
                        {
                            values: [78],
                            inputArgs: [
                                {
                                    required: true,
                                    displayName: functionStrings.rasterFunctions.rfxArgs.rasterName,
                                    hidden: false,
                                    allowScalar: true,
                                    helpTextID: "local_raster"
                                },
                                {
                                    required: true,
                                    displayName: functionStrings.rasterFunctions.rfxArgs.trueRasterName,
                                    hidden: false,
                                    allowScalar: true,
                                    helpTextID: "local_inraster2"
                                },
                                {
                                    required: true,
                                    displayName: functionStrings.rasterFunctions.rfxArgs.falseRasterName,
                                    hidden: false,
                                    allowScalar: true,
                                    helpTextID: "local_inraster3"
                                }
                            ]
                        },
                        {
                            values: [1, 2, 3, 5, 11, 12, 14, 15, 16, 17, 19, 20, 23, 24, 28, 29, 33, 34, 44, 46, 61],
                            inputArgs: [
                                {
                                    required: true,
                                    displayName: functionStrings.rasterFunctions.rfxArgs.rasterName,
                                    hidden: false,
                                    allowScalar: true,
                                    helpTextID: "local_raster"
                                },
                                {
                                    required: true,
                                    displayName: functionStrings.rasterFunctions.rfxArgs.raster2Name,
                                    hidden: false,
                                    allowScalar: true,
                                    helpTextID: "local_inraster2"
                                }
                            ]
                        },
                        {
                            values: [50],
                            inputArgs: [
                                {
                                    required: true,
                                    displayName: functionStrings.rasterFunctions.rfxArgs.rasterName,
                                    hidden: false,
                                    allowScalar: true,
                                    helpTextID: "local_raster"
                                },
                                {
                                    required: true,
                                    displayName: functionStrings.rasterFunctions.rfxArgs.falseRasterName,
                                    hidden: false,
                                    allowScalar: true,
                                    helpTextID: "local_inraster2"
                                }
                            ]
                        },
                        {
                            values: [
                                4, 6, 7, 8, 9, 10, 13, 18, 21, 22, 25, 26, 27, 30, 31, 32, 35, 36, 37, 45, 48, 49, 51, 52, 53, 56, 57,
                                59, 60
                            ],
                            inputArgs: [
                                {
                                    required: true,
                                    displayName: functionStrings.rasterFunctions.rfxArgs.rasterName,
                                    hidden: false,
                                    //dont allow to add a scalar value if the function is having only one input
                                    allowScalar: false,
                                    helpTextID: "local_raster"
                                }
                            ]
                        }
                    ]
                },
                Operation: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.long,
                    hidden: true,
                    displayName: functionStrings.rasterFunctions.rfxArgs.operationName,
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.localFunctionOperations
                    },
                    helpTextID: "local_operation"
                },
                CellsizeType: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.long,
                    displayName: functionStrings.rasterFunctions.rfxArgs.cellsizeTypeName,
                    hidden: false,
                    defaultValue: 2,
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.esriCellsizeTypes
                    },
                    helpTextID: "local_cellsizetype"
                },
                ExtentType: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.long,
                    displayName: functionStrings.rasterFunctions.rfxArgs.extentTypeName,
                    hidden: false,
                    defaultValue: 1,
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.esriExtentTypes
                    },
                    helpTextID: "local_extenttype"
                }
            }
        },
        CellStatisticsFunction: {
            name: functionStrings.rasterFunctions.rfx.cellStatisticsName,
            snippet: functionStrings.rasterFunctions.rfx.cellStatisticsSnip,
            description: functionStrings.rasterFunctions.rfx.cellStatisticsDesc,
            category: "statistical",
            icon: "cellStatistics.png",
            helpID: "cell-statistics-function.htm",
            rasterFunctionArguments: {
                Rasters: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.rasterArray,
                    hidden: false,
                    allowScalar: true,
                    displayName: functionStrings.rasterFunctions.rfxArgs.rastersName,
                    helpTextID: "cellstatistics_rasters"
                },
                Operation: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.long,
                    hidden: false,
                    defaultValue: 40,
                    displayName: functionStrings.rasterFunctions.rfxArgs.operationName,
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.cellStatisticsTypes
                    },
                    editorStateTrigger: {
                        active: true,
                        triggers: [
                            {
                                values: [93, 94],
                                active: ["PercentileValue"],
                                inactive: [],
                                autoRevert: true
                            },
                            {
                                values: [93, 94, 41, 69],
                                active: ["PercentileInterpolationType"],
                                inactive: [],
                                autoRevert: true
                            }
                        ]
                    },
                    helpTextID: "cellstatistics_operation"
                },
                ProcessAsMultiband: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.boolean,
                    displayName: functionStrings.rasterFunctions.rfxArgs.processAsMultiband,
                    hidden: false,
                    helpTextID: "cellstatistics_processasmultiband"
                },
                PercentileValue: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.double,
                    displayName: functionStrings.rasterFunctions.rfxArgs.percentileValue,
                    hidden: false,
                    defaultValue: 90,
                    helpTextID: "cellstatistics_percentilevalue"
                },
                PercentileInterpolationType: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.percentileInterpolationType,
                    hidden: false,
                    defaultValue: "AUTO_DETECT",
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.gpsaZonalPercentileInterpolationTypes
                    },
                    helpTextID: "cellstatistics_percentileinterpolationtype"
                },
                CellsizeType: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.long,
                    displayName: functionStrings.rasterFunctions.rfxArgs.cellsizeTypeName,
                    hidden: false,
                    defaultValue: 2,
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.esriCellsizeTypes
                    },
                    helpTextID: "cellstatistics_cellsizetype"
                },
                ExtentType: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.long,
                    displayName: functionStrings.rasterFunctions.rfxArgs.extentTypeName,
                    hidden: false,
                    defaultValue: 1,
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.esriExtentTypes
                    },
                    helpTextID: "cellstatistics_extenttype"
                }
            }
        },
        SpectralConversionFunction: {
            name: functionStrings.rasterFunctions.rfx.spectralConversionName,
            snippet: functionStrings.rasterFunctions.rfx.spectralConversionSnip,
            description: functionStrings.rasterFunctions.rfx.spectralConversionDesc,
            category: "conversion",
            icon: "spectralConversion.png",
            helpID: "spectral-conversion-function.htm",
            hidden: false,
            rasterFunctionArguments: {
                Raster: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.rasterName,
                    hidden: false,
                    helpTextID: "spectralconversion_raster"
                },
                ConversionMatrix: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.doubleArray,
                    displayName: functionStrings.rasterFunctions.rfxArgs.conversionMatrixName,
                    hidden: false,
                    helpTextID: "spectralconversion_conversionmatrix"
                },
                IsPseudoColorOutput: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.boolean,
                    displayName: functionStrings.rasterFunctions.rfxArgs.IsPseudoColorOutputName,
                    hidden: true
                }
            },
            editorArgumentOverride: {
                active: true,
                overrides: [
                    {
                        argumentNames: ["ConversionMatrix"],
                        triggerArguments: ["Raster"],
                        widget: {
                            path: "rfx-cte-conversion-grid"
                        },
                        helpTextIDs: {
                            spectralconversion_size: "spectralconversion_size"
                        }
                    }
                ]
            }
        },
        Watershed: {
            name: functionStrings.rasterFunctions.rfx.watershedName,
            snippet: functionStrings.rasterFunctions.rfx.watershedSnip,
            description: functionStrings.rasterFunctions.rfx.watershedDesc,
            category: "hydrology",
            icon: "watershed.png",
            helpID: "watershed-function.htm",
            rasterFunctionArguments: {
                ToolName: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: true,
                    defaultValue: "Watershed_sa"
                },
                PrimaryInputParameterName: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: true,
                    defaultValue: "in_flow_direction_raster"
                },
                OutputRasterParameterName: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: true,
                    defaultValue: "out_raster"
                },
                in_flow_direction_raster: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    hidden: false,
                    displayName: functionStrings.rasterFunctions.rfxArgs.flowDirRasterName,
                    helpTextID: "watershed_inflowdirectionraster"
                },
                in_pour_point_data: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    hidden: false,
                    displayName: functionStrings.rasterFunctions.rfxArgs.pourPointName,
                    helpTextID: "watershed_inpourpointdata"
                },
                pour_point_field: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: false,
                    displayName: functionStrings.rasterFunctions.rfxArgs.pourPointFieldName,
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.fields,
                        argumentName: "in_pour_point_data"
                    },
                    helpTextID: "watershed_pourpointfield"
                }
            }
        },
        GeometricFunction: {
            name: functionStrings.rasterFunctions.rfx.geometricName,
            snippet: functionStrings.rasterFunctions.rfx.geometricSnip,
            description: functionStrings.rasterFunctions.rfx.geometricDesc,
            category: "correction",
            icon: "geometric.png",
            helpID: "geometric-function.htm",
            rasterFunctionArguments: {
                Raster: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.rasterName,
                    hidden: false,
                    helpTextID: "geometric_raster"
                },
                UseDEM: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.boolean,
                    displayName: functionStrings.rasterFunctions.rfxArgs.methodName,
                    hidden: false,
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.geometricCorrectionMethods
                    },
                    defaultValue: false,
                    editorStateTrigger: {
                        active: true,
                        triggers: [
                            {
                                values: [true],
                                active: ["DEM", "ZFactor", "ZOffset", "CorrectGeoid"],
                                inactive: ["ConstantZ"],
                                autoRevert: true
                            }
                        ]
                    },
                    helpTextID: "geometric_usedem"
                },
                ConstantZ: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.double,
                    displayName: functionStrings.rasterFunctions.rfxArgs.constantZName,
                    hidden: false,
                    defaultValue: 0,
                    helpTextID: "geometric_constantz"
                },
                DEM: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.DEMName,
                    hidden: false,
                    helpTextID: "geometric_dem"
                },
                ZFactor: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.double,
                    displayName: functionStrings.rasterFunctions.rfxArgs.zFactorName,
                    hidden: false,
                    defaultValue: 1,
                    helpTextID: "geometric_zfactor"
                },
                ZOffset: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.double,
                    displayName: functionStrings.rasterFunctions.rfxArgs.zOffsetName,
                    hidden: false,
                    defaultValue: 0,
                    helpTextID: "geometric_zoffset"
                },
                CorrectGeoid: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.boolean,
                    displayName: functionStrings.rasterFunctions.rfxArgs.geoIdName,
                    hidden: false,
                    defaultValue: false,
                    helpTextID: "geometric_correctgeoid"
                },
                Tolerance: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.double,
                    displayName: "Tolerance (Pixels)",
                    hidden: false,
                    defaultValue: 0,
                    helpTextID: "geometric_tolerance"
                }
            }
        },
        RadarCalibrationFunction: {
            name: functionStrings.rasterFunctions.rfx.radarCalibrationName,
            snippet: functionStrings.rasterFunctions.rfx.radarCalibrationSnip,
            description: functionStrings.rasterFunctions.rfx.radarCalibrationDesc,
            category: "correction",
            icon: "radarCalibration.png",
            helpID: "radar-calibration-function.htm",
            rasterFunctionArguments: {
                Raster: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.rasterName,
                    hidden: false,
                    helpTextID: "radarcalibration_raster"
                },
                CalibrationType: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.long,
                    displayName: functionStrings.rasterFunctions.rfxArgs.calibrationTypeName,
                    hidden: false,
                    defaultValue: 3,
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.esriRadarCalibrations
                    },
                    helpTextID: "radarcalibration_calibrationtype"
                }
            }
        },
        S1RadiometricCalibrationFunction: {
            name: functionStrings.rasterFunctions.rfx.s1RadiometricCalibrationName,
            snippet: functionStrings.rasterFunctions.rfx.s1RadiometricCalibrationSnip,
            description: functionStrings.rasterFunctions.rfx.s1RadiometricCalibrationDesc,
            category: "correction",
            icon: "s1RadiometricCalibration.png",
            helpID: "sentinel-1-radiometric-calibration.htm",
            rasterFunctionArguments: {
                Raster: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.rasterName,
                    hidden: false,
                    helpTextID: "sentinel1radiometriccalibration_raster"
                },
                CalibrationType: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.long,
                    displayName: functionStrings.rasterFunctions.rfxArgs.calibrationTypeName,
                    hidden: false,
                    defaultValue: 3,
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.esriRadarCalibrations
                    },
                    helpTextID: "sentinel1radiometriccalibration_calibrationtype"
                }
            }
        },
        SpeckleFunction: {
            name: functionStrings.rasterFunctions.rfx.speckleName,
            snippet: functionStrings.rasterFunctions.rfx.speckleSnip,
            description: functionStrings.rasterFunctions.rfx.speckleDesc,
            category: "correction",
            icon: "speckle.png",
            helpID: "speckle-function.htm",
            rasterFunctionArguments: {
                Raster: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.rasterName,
                    hidden: false,
                    helpTextID: "speckle_raster"
                },
                FilterType: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.long,
                    displayName: functionStrings.rasterFunctions.rfxArgs.filterTypeName,
                    hidden: false,
                    defaultValue: 0,
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.esriSpeckleFilterTypes
                    },
                    editorStateTrigger: {
                        active: true,
                        triggers: [
                            {
                                values: [0],
                                active: ["NoiseModel"],
                                inactive: ["DampFactor"],
                                autoRevert: true
                            },
                            {
                                values: [1],
                                active: ["NLooks", "DampFactor"],
                                inactive: ["NoiseVar", "AdditiveNoiseMean", "MultiplicativeNoiseMean"],
                                autoRevert: false
                            },
                            {
                                values: [2],
                                active: ["DampFactor"],
                                inactive: ["NoiseVar", "AdditiveNoiseMean", "MultiplicativeNoiseMean", "NLooks"],
                                autoRevert: false
                            },
                            {
                                values: [3],
                                active: ["NLooks"],
                                inactive: ["NoiseVar", "AdditiveNoiseMean", "MultiplicativeNoiseMean", "DampFactor"],
                                autoRevert: false
                            }
                        ]
                    },
                    helpTextID: "speckle_filtertype"
                },
                FilterSize: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.long,
                    displayName: functionStrings.rasterFunctions.rfxArgs.filterSizeName,
                    hidden: false,
                    defaultValue: 0,
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.esriSpeckleFilterKernelTypes
                    },
                    helpTextID: "speckle_filtersize"
                },
                NoiseModel: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.long,
                    displayName: functionStrings.rasterFunctions.rfxArgs.noiseModelName,
                    hidden: false,
                    defaultValue: 0,
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.esriSpeckleNoiseModelTypes
                    },
                    editorStateTrigger: {
                        active: true,
                        triggers: [
                            {
                                values: [0],
                                active: ["MultiplicativeNoiseMean", "NLooks"],
                                inactive: ["NoiseVar", "AdditiveNoiseMean"],
                                autoRevert: false
                            },
                            {
                                values: [1],
                                active: ["NoiseVar"],
                                inactive: ["AdditiveNoiseMean", "MultiplicativeNoiseMean", "NLooks"],
                                autoRevert: false
                            },
                            {
                                values: [2],
                                active: ["NoiseVar", "AdditiveNoiseMean", "MultiplicativeNoiseMean"],
                                inactive: ["NLooks"],
                                autoRevert: false
                            }
                        ]
                    },
                    helpTextID: "speckle_noisemodel"
                },
                NoiseVar: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.double,
                    displayName: functionStrings.rasterFunctions.rfxArgs.noiseVarianceName,
                    hidden: false,
                    defaultValue: 0.25,
                    helpTextID: "speckle_noisevar"
                },
                AdditiveNoiseMean: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.double,
                    displayName: functionStrings.rasterFunctions.rfxArgs.additiveNoiseMeanName,
                    hidden: false,
                    defaultValue: 0,
                    helpTextID: "speckle_additivenoisemean"
                },
                MultiplicativeNoiseMean: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.double,
                    displayName: functionStrings.rasterFunctions.rfxArgs.multiplicativeNoiseMeanName,
                    hidden: false,
                    defaultValue: 1,
                    helpTextID: "speckle_multiplicativenoisemean"
                },
                NLooks: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.long,
                    displayName: functionStrings.rasterFunctions.rfxArgs.numberofLooksName,
                    hidden: false,
                    defaultValue: 1,
                    helpTextID: "speckle_nlooks"
                },
                DampFactor: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.double,
                    displayName: functionStrings.rasterFunctions.rfxArgs.dampingFactorName,
                    hidden: false,
                    defaultValue: 1,
                    helpTextID: "speckle_dampfactor"
                }
            }
        },
        MosaicRastersFunction: {
            name: functionStrings.rasterFunctions.rfx.mosaicRastersName,
            snippet: functionStrings.rasterFunctions.rfx.mosaicRastersSnip,
            description: functionStrings.rasterFunctions.rfx.mosaicRastersDesc,
            category: "dataManagement",
            icon: "mosaicRasters.png",
            helpID: "mosaic-rasters.htm",
            rasterFunctionArguments: {
                Rasters: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.rasterArray,
                    displayName: functionStrings.rasterFunctions.rfxArgs.rastersName,
                    hidden: false,
                    helpTextID: "mosaicrasters_rasters"
                },
                MosaicType: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.long,
                    displayName: functionStrings.rasterFunctions.rfxArgs.operationName,
                    hidden: false,
                    defaultValue: 6,
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.esriMosaicOperatorTypes
                    },
                    helpTextID: "mosaicrasters_mosaictype"
                }
            }
        },
        Nibble: {
            name: functionStrings.rasterFunctions.rfx.nibbleName,
            snippet: functionStrings.rasterFunctions.rfx.nibbleSnip,
            description: functionStrings.rasterFunctions.rfx.nibbleDesc,
            category: "dataManagement",
            icon: "nibble.png",
            helpID: "nibble-function.htm",
            rasterFunctionArguments: {
                ToolName: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: true,
                    defaultValue: "Nibble_sa"
                },
                PrimaryInputParameterName: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: true,
                    defaultValue: "in_raster"
                },
                OutputRasterParameterName: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: true,
                    defaultValue: "out_raster"
                },
                in_raster: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.rasterName,
                    hidden: false,
                    helpTextID: "nibble_inraster"
                },
                in_mask_raster: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.maskRasterName,
                    hidden: false,
                    helpTextID: "nibble_inmaskraster"
                },
                nibble_values: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.nibbleValuesName,
                    hidden: false,
                    defaultValue: "ALL_VALUES",
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.gpsaNibbleValues
                    },
                    helpTextID: "nibble_nibblevalues"
                },
                nibble_nodata: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.nibbleNoDataName,
                    hidden: false,
                    defaultValue: "PRESERVE_NODATA",
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.gpsaNibbleNoData
                    },
                    helpTextID: "nibble_nibblenodata"
                },
                in_zone_raster: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.zoneDataName,
                    hidden: false,
                    helpTextID: "nibble_inzoneraster"
                }
            }
        },
        SwathFunction: {
            name: functionStrings.rasterFunctions.rfx.swathName,
            snippet: functionStrings.rasterFunctions.rfx.swathSnip,
            description: functionStrings.rasterFunctions.rfx.swathDesc,
            category: "dataManagement",
            icon: "swath.png",
            helpID: "swath.htm",
            rasterFunctionArguments: {
                Raster: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.rasterName,
                    hidden: false,
                    helpTextID: "swath_raster"
                },
                InterpolationMethod: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.long,
                    displayName: functionStrings.rasterFunctions.rfxArgs.interpolationMethodName,
                    hidden: false,
                    defaultValue: 0,
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.esriSwathInterpolationMethods
                    },
                    helpTextID: "swath_interpolationmethod"
                },
                RasterInfo: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.rasterInfo,
                    displayName: functionStrings.rasterFunctions.rfxArgs.cellSizeName,
                    hidden: false,
                    helpTextID: "swath_cellsize"
                }
            },
            editorArgumentOverride: {
                active: true,
                overrides: [
                    {
                        argumentNames: ["RasterInfo"],
                        widget: {
                            path: "rfx-cte-raster-info-cell-size-editor"
                        }
                    }
                ]
            }
        },
        Fill: {
            name: functionStrings.rasterFunctions.rfx.fillName,
            snippet: functionStrings.rasterFunctions.rfx.fillSnip,
            description: functionStrings.rasterFunctions.rfx.fillDesc,
            category: "hydrology",
            icon: "fill.png",
            helpID: "fill-raster-function.htm",
            rasterFunctionArguments: {
                ToolName: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: true,
                    defaultValue: "Fill_sa"
                },
                PrimaryInputParameterName: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: true,
                    defaultValue: "in_surface_raster"
                },
                OutputRasterParameterName: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: true,
                    defaultValue: "out_surface_raster"
                },
                in_surface_raster: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.rasterName,
                    hidden: false,
                    helpTextID: "fill_insurfaceraster"
                },
                z_limit: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.double,
                    displayName: functionStrings.rasterFunctions.rfxArgs.zLimitName,
                    hidden: false,
                    helpTextID: "fill_zlimit"
                }
            }
        },
        FlowAccumulation: {
            name: functionStrings.rasterFunctions.rfx.flowAccumulationName,
            snippet: functionStrings.rasterFunctions.rfx.flowAccumulationSnip,
            description: functionStrings.rasterFunctions.rfx.flowAccumulationDesc,
            category: "hydrology",
            icon: "flowAccumulation.png",
            helpID: "flow-accumulation-raster-function.htm",
            rasterFunctionArguments: {
                ToolName: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: true,
                    defaultValue: "FlowAccumulation_sa"
                },
                PrimaryInputParameterName: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: true,
                    defaultValue: "in_flow_direction_raster"
                },
                OutputRasterParameterName: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: true,
                    defaultValue: "out_accumulation_raster"
                },
                in_flow_direction_raster: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.flowDirRasterName,
                    hidden: false,
                    helpTextID: "flowaccumulation_inflowdirectionraster"
                },
                in_weight_raster: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.weightRasterName,
                    hidden: false,
                    helpTextID: "flowaccumulation_inweightraster"
                },
                data_type: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.outputDataTypeName,
                    hidden: false,
                    defaultValue: "FLOAT",
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.gpsaOutputDataType
                    },
                    helpTextID: "flowaccumulation_datatype"
                },
                flow_direction_type: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.flowDirectionTypeName,
                    hidden: false,
                    defaultValue: "D8",
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.gpsaFlowDirectionType
                    },
                    helpTextID: "flowaccumulation_flowdirectiontype"
                }
            }
        },
        FlowDirection: {
            name: functionStrings.rasterFunctions.rfx.flowDirectionName,
            snippet: functionStrings.rasterFunctions.rfx.flowDirectionSnip,
            description: functionStrings.rasterFunctions.rfx.flowDirectionDesc,
            category: "hydrology",
            icon: "flowDirection.png",
            helpID: "flow-direction-raster-function.htm",
            rasterFunctionArguments: {
                ToolName: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: true,
                    defaultValue: "FlowDirection_sa"
                },
                PrimaryInputParameterName: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: true,
                    defaultValue: "in_surface_raster"
                },
                OutputRasterParameterName: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: true,
                    defaultValue: "out_flow_direction_raster"
                },
                in_surface_raster: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.rasterName,
                    hidden: false,
                    helpTextID: "flowdirection_insurfaceraster"
                },
                force_flow: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.forceEdgeName,
                    hidden: false,
                    defaultValue: "NORMAL",
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.gpsaForceFlow
                    },
                    helpTextID: "flowdirection_forceflow"
                },
                flow_direction_type: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.flowDirectionTypeName,
                    hidden: false,
                    defaultValue: "D8",
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.gpsaFlowDirectionType
                    },
                    helpTextID: "flowdirection_flowdirectiontype"
                }
            }
        },
        FlowDistance: {
            name: functionStrings.rasterFunctions.rfx.flowDistanceName,
            snippet: functionStrings.rasterFunctions.rfx.flowDistanceSnip,
            description: functionStrings.rasterFunctions.rfx.flowDistanceDesc,
            category: "hydrology",
            icon: "flowDistance.png",
            helpID: "flow-distance-function.htm",
            rasterFunctionArguments: {
                ToolName: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: true,
                    defaultValue: "FlowDistance_sa"
                },
                PrimaryInputParameterName: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: true,
                    defaultValue: "in_stream_raster"
                },
                OutputRasterParameterName: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: true,
                    defaultValue: "out_raster"
                },
                in_stream_raster: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.streamRasterName,
                    hidden: false,
                    helpTextID: "flowdistance_instreamraster"
                },
                in_surface_raster: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.surfaceRasterName,
                    hidden: false,
                    helpTextID: "flowdistance_insurfaceraster"
                },
                in_flow_direction_raster: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    hidden: false,
                    displayName: functionStrings.rasterFunctions.rfxArgs.flowDirRasterName,
                    helpTextID: "flowdistance_inflowdirectionraster"
                },
                distance_type: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.distanceTypeName,
                    hidden: false,
                    defaultValue: "VERTICAL",
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.gpsaFlowDistanceType
                    },
                    helpTextID: "flowdistance_distancetype"
                },
                flow_direction_type: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.flowDirectionTypeName,
                    hidden: false,
                    defaultValue: "D8",
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.gpsaFlowDirectionType
                    },
                    helpTextID: "flowdistance_flowdirectiontype"
                },
                statistics_type: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.statisticsTypeName,
                    hidden: false,
                    defaultValue: "MINIMUM",
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.gpsaFlowDistanceStatsType
                    },
                    helpTextID: "flowdistance_statisticstype"
                }
            }
        },
        FlowLength: {
            name: functionStrings.rasterFunctions.rfx.flowLengthName,
            snippet: functionStrings.rasterFunctions.rfx.flowLengthSnip,
            description: functionStrings.rasterFunctions.rfx.flowLengthDesc,
            category: "hydrology",
            icon: "flowLength.png",
            helpID: "flow-length-function.htm",
            rasterFunctionArguments: {
                ToolName: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: true,
                    defaultValue: "FlowLength_sa"
                },
                PrimaryInputParameterName: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: true,
                    defaultValue: "in_flow_direction_raster"
                },
                OutputRasterParameterName: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: true,
                    defaultValue: "out_raster"
                },
                in_flow_direction_raster: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.flowDirRaster,
                    hidden: false,
                    helpTextID: "flowlength_inflowdirectionraster"
                },
                direction_measurement: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.directionMeasurementName,
                    hidden: false,
                    defaultValue: "DOWNSTREAM",
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.gpsaDirectionMeasurementType
                    },
                    helpTextID: "flowlength_directionmeasurement"
                },
                in_weight_raster: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.weightRasterName,
                    hidden: false,
                    helpTextID: "flowlength_inweightraster"
                },
                MatchVariable: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.boolean,
                    hidden: true
                },
                UnionDimension: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.boolean,
                    hidden: true
                }
            }
        },
        Corridor: {
            name: functionStrings.rasterFunctions.rfx.corridorName,
            snippet: functionStrings.rasterFunctions.rfx.corridorSnip,
            description: functionStrings.rasterFunctions.rfx.corridorDesc,
            hidden: true,
            category: "distanceLegacy",
            icon: "corridor.png",
            helpID: "corridor-global-function.htm",
            rasterFunctionArguments: {
                ToolName: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: true,
                    defaultValue: "Corridor_sa"
                },
                PrimaryInputParameterName: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: true,
                    defaultValue: "in_distance_raster1"
                },
                OutputRasterParameterName: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: true,
                    defaultValue: "out_raster"
                },
                in_distance_raster1: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.distanceRaster1,
                    hidden: false,
                    helpTextID: "corridor_indistanceraster1"
                },
                in_distance_raster2: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.distanceRaster2,
                    hidden: false,
                    helpTextID: "corridor_indistanceraster2"
                }
            }
        },
        StreamLink: {
            name: functionStrings.rasterFunctions.rfx.streamLinkName,
            snippet: functionStrings.rasterFunctions.rfx.streamLinkSnip,
            description: functionStrings.rasterFunctions.rfx.streamLinkDesc,
            category: "hydrology",
            icon: "streamLink.png",
            helpID: "stream-link-function.htm",
            rasterFunctionArguments: {
                ToolName: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: true,
                    defaultValue: "StreamLink_sa"
                },
                PrimaryInputParameterName: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: true,
                    defaultValue: "in_stream_raster"
                },
                OutputRasterParameterName: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: true,
                    defaultValue: "out_raster"
                },
                in_stream_raster: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.streamRaster,
                    hidden: false,
                    helpTextID: "streamlink_instreamraster"
                },
                in_flow_direction_raster: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.flowDirRaster,
                    hidden: false,
                    helpTextID: "streamlink_inflowdirectionraster"
                }
            }
        },
        StreamOrder: {
            name: functionStrings.rasterFunctions.rfx.streamOrderName,
            snippet: functionStrings.rasterFunctions.rfx.streamOrderSnip,
            description: functionStrings.rasterFunctions.rfx.streamOrderDesc,
            category: "hydrology",
            icon: "streamOrder.png",
            helpID: "stream-order-function.htm",
            rasterFunctionArguments: {
                ToolName: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: true,
                    defaultValue: "StreamOrder_sa"
                },
                PrimaryInputParameterName: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: true,
                    defaultValue: "in_stream_raster"
                },
                OutputRasterParameterName: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: true,
                    defaultValue: "out_raster"
                },
                in_stream_raster: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.streamRaster,
                    hidden: false,
                    helpTextID: "streamorder_instreamraster"
                },
                in_flow_direction_raster: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.flowDirRaster,
                    hidden: false,
                    helpTextID: "streamorder_inflowdirectionraster"
                },
                order_method: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.orderMethodName,
                    hidden: false,
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.gpsaOrderMethodType
                    },
                    defaultValue: "STRAHLER",
                    helpTextID: "streamorder_ordermethod"
                },
                MatchVariable: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.boolean,
                    hidden: true
                },
                UnionDimension: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.boolean,
                    hidden: true
                }
            }
        },
        RegionGroup: {
            name: functionStrings.rasterFunctions.rfx.regionGroupName,
            snippet: functionStrings.rasterFunctions.rfx.regionGroupSnip,
            description: functionStrings.rasterFunctions.rfx.regionGroupDesc,
            category: "dataManagement",
            icon: "regionGroup.png",
            helpID: "region-group-global-function.htm",
            rasterFunctionArguments: {
                ToolName: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: true,
                    defaultValue: "RegionGroup_sa"
                },
                PrimaryInputParameterName: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: true,
                    defaultValue: "in_raster"
                },
                OutputRasterParameterName: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: true,
                    defaultValue: "out_raster"
                },
                in_raster: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.zoneDataName,
                    hidden: false,
                    helpTextID: "regiongroup_inraster"
                },
                number_neighbors: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.numberNeighborCells,
                    hidden: false,
                    defaultValue: "FOUR",
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.gpsaNumberNeighborCells
                    },
                    helpTextID: "regiongroup_numberneighbors"
                },
                zone_connectivity: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.zoneConnectivity,
                    hidden: false,
                    defaultValue: "WITHIN",
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.gpsaZoneConnectivity
                    },
                    helpTextID: "regiongroup_zoneconnectivity"
                },
                add_link: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.addLinkBehavior,
                    hidden: false,
                    defaultValue: "ADD_LINK",
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.gpsaAddLink
                    },
                    helpTextID: "regiongroup_addlink"
                },
                excluded_value: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.long,
                    displayName: functionStrings.rasterFunctions.rfxArgs.excludedValue,
                    hidden: false,
                    defaultValue: 0,
                    helpTextID: "regiongroup_excludedvalue"
                }
            }
        },
        BufferedRasterFunction: {
            name: functionStrings.rasterFunctions.rfx.bufferedRasterName,
            snippet: functionStrings.rasterFunctions.rfx.bufferedRasterSnip,
            description: functionStrings.rasterFunctions.rfx.bufferedRasterDesc,
            category: "dataManagement",
            icon: "bufferedRaster.png",
            helpID: "buffered-function.htm",
            rasterFunctionArguments: {
                Raster: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.rasterName,
                    hidden: false,
                    helpTextID: "buffered_raster"
                }
            },
            // Unless this is mentioned for single argument RFTs,
            // it is assumed that there is no wrapper arguments object
            hasArgumentsObject: true
        },
        ColorspaceConversionFunction: {
            name: functionStrings.rasterFunctions.rfx.colorspaceConversionName,
            snippet: functionStrings.rasterFunctions.rfx.colorspaceConversionSnip,
            description: functionStrings.rasterFunctions.rfx.colorspaceConversionDesc,
            category: "conversion",
            icon: "colorspaceConversion.png",
            helpID: "colorspaceconversion.htm",
            rasterFunctionArguments: {
                Raster: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.rasterName,
                    hidden: false,
                    helpTextID: "colormodelconversion_raster"
                },
                ConversionType: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.long,
                    displayName: functionStrings.rasterFunctions.rfxArgs.conversionType,
                    hidden: false,
                    defaultValue: 0,
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.colorspaceConversionTypes
                    },
                    helpTextID: "colormodelconversion_conversiontype"
                }
            }
        },
        ComplexFunction: {
            name: functionStrings.rasterFunctions.rfx.complexName,
            snippet: functionStrings.rasterFunctions.rfx.complexSnip,
            description: functionStrings.rasterFunctions.rfx.complexDesc,
            category: "conversion",
            icon: "complex.png",
            helpID: "complex-function.htm",
            rasterFunctionArguments: {
                Raster: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.rasterName,
                    hidden: false,
                    helpTextID: "complex_raster"
                }
            }
        },
        TasseledCapFunction: {
            name: functionStrings.rasterFunctions.rfx.tasseledCapName,
            snippet: functionStrings.rasterFunctions.rfx.tasseledCapSnip,
            description: functionStrings.rasterFunctions.rfx.tasseledCapDesc,
            category: "analysis",
            icon: "tasseledCap.png",
            helpID: "tasseled-cap-function.htm",
            rasterFunctionArguments: {
                Raster: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.rasterName,
                    hidden: false,
                    helpTextID: "tasseledcap_raster"
                }
            }
        },
        RasterInfoFunction: {
            name: functionStrings.rasterFunctions.rfx.rasterInfoName,
            snippet: functionStrings.rasterFunctions.rfx.rasterInfoSnip,
            description: functionStrings.rasterFunctions.rfx.rasterInfoDesc,
            category: "dataManagement",
            icon: "rasterInfo.png",
            helpID: "raster-info-function.htm",
            rasterFunctionArguments: {
                Raster: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.rasterName,
                    hidden: false,
                    helpTextID: "rasterinfo_raster"
                },
                RasterInfo: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.rasterInfo,
                    displayName: functionStrings.rasterFunctions.rfxArgs.rasterInfoName,
                    hidden: false,
                    helpTextID: "rasterinfo_rasterinfo"
                },
                Statistics: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.rasterStatisticsArray,
                    displayName: functionStrings.rasterFunctions.rfxArgs.statisticsName,
                    hidden: true
                },
                Overwrite: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.boolean,
                    hidden: true
                }
            }
        },
        RecastFunction: {
            name: functionStrings.rasterFunctions.rfx.recastName,
            snippet: functionStrings.rasterFunctions.rfx.recastSnip,
            description: functionStrings.rasterFunctions.rfx.recastDesc,
            category: "dataManagement",
            icon: "recast.png",
            helpID: "recast-function.htm",
            hidden: false,
            rasterFunctionArguments: {
                Raster: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.rasterName,
                    hidden: false,
                    helpTextID: "recast_raster"
                },
                Arguments: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.propertySet,
                    displayName: functionStrings.rasterFunctions.rfxArgs.overridesName,
                    hidden: false,
                    helpTextID: "recast_arguments"
                }
            }
        },
        LookupFunction: {
            name: functionStrings.rasterFunctions.rfx.lookupName,
            snippet: functionStrings.rasterFunctions.rfx.lookupSnip,
            description: functionStrings.rasterFunctions.rfx.lookupDesc,
            category: "reclass",
            icon: "lookup.png",
            helpID: "lookup-function.htm",
            rasterFunctionArguments: {
                Raster: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.rasterName,
                    hidden: false,
                    helpTextID: "lookup_raster"
                },
                Field: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.fieldName,
                    hidden: false,
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.fields,
                        argumentName: "Raster"
                    },
                    helpTextID: "lookup_field"
                }
            }
        },
        MLClassifyFunction: {
            name: functionStrings.rasterFunctions.rfx.mlClassifyName,
            snippet: functionStrings.rasterFunctions.rfx.mlClassifySnip,
            description: functionStrings.rasterFunctions.rfx.mlClassifyDesc,
            category: "classification",
            icon: "mlClassify.png",
            helpID: "ml-classify-function.htm",
            rasterFunctionArguments: {
                Raster: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.rasterName,
                    hidden: false,
                    helpTextID: "mlclassify_raster"
                },
                SignatureFile: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.signatureFileOrUrl,
                    hidden: false,
                    helpTextID: "mlclassify_signaturefile"
                }
            }
        },
        PansharpeningFunction: {
            name: functionStrings.rasterFunctions.rfx.pansharpeningName,
            snippet: functionStrings.rasterFunctions.rfx.pansharpeningSnip,
            description: functionStrings.rasterFunctions.rfx.pansharpeningDesc,
            category: "appearance",
            icon: "pansharpening.png",
            helpID: "pansharpening-function.htm",
            rasterFunctionArguments: {
                MSImage: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.multispectralName,
                    hidden: false,
                    helpTextID: "pansharpen_msimage"
                },
                PanImage: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.panchromaticName,
                    hidden: false,
                    helpTextID: "pansharpen_panimage"
                },
                PansharpeningType: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.long,
                    displayName: functionStrings.rasterFunctions.rfxArgs.pansharpeningType,
                    hidden: false,
                    defaultValue: 2,
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.pansharpeningTypes
                    },
                    editorStateTrigger: {
                        active: true,
                        triggers: [
                            {
                                values: [4],
                                active: ["Sensor"],
                                inactive: [],
                                autoRevert: true
                            },
                            {
                                values: [3],
                                active: [],
                                inactive: ["Weights"],
                                autoRevert: true
                            }
                        ]
                    },
                    editorValueTrigger: {
                        active: true,
                        triggers: [
                            {
                                values: [0, 1],
                                changedArgs: [
                                    {
                                        Weights: [0.334, 0.333, 0.333, 0]
                                    }
                                ]
                            },
                            {
                                values: [2],
                                changedArgs: [
                                    {
                                        Weights: [0.166, 0.167, 0.167, 0.5]
                                    }
                                ]
                            }
                        ]
                    },
                    helpTextID: "pansharpen_pansharpeningtype"
                },
                Sensor: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.sensorName,
                    hidden: false,
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.sensorTypes
                    },
                    helpTextID: "pansharpen_sensor"
                },
                Weights: {
                    displayName: functionStrings.rasterFunctions.rfxArgs.weightsName,
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.doubleArray,
                    hidden: false,
                    defaultValue: [0.166, 0.167, 0.167, 0.5],
                    dataTypeAttributes: {
                        type: "bandmatrix",
                        cols: 4,
                        hasIdColumn: false,
                        isExtensible: false,
                        displayNames: [
                            functionStrings.rasterFunctions.rfxArgs.redName,
                            functionStrings.rasterFunctions.rfxArgs.greenName,
                            functionStrings.rasterFunctions.rfxArgs.blueName,
                            functionStrings.rasterFunctions.rfxArgs.infraredName
                        ]
                    },
                    helpTextID: "pansharpen_weights"
                }
            },
            editorArgumentOverride: {
                active: true,
                overrides: [
                    {
                        argumentNames: ["Sensor"],
                        triggerArguments: ["Weights"],
                        widget: {
                            path: "rfx-cte-pansharpen-sensor-picker"
                        }
                    }
                ]
            }
        },
        ReprojectFunction: {
            name: functionStrings.rasterFunctions.rfx.reprojectName,
            snippet: functionStrings.rasterFunctions.rfx.reprojectSnip,
            description: functionStrings.rasterFunctions.rfx.reprojectDesc,
            category: "dataManagement",
            icon: "reproject.png",
            helpID: "reproject-function.htm",
            rasterFunctionArguments: {
                Raster: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.rasterName,
                    hidden: false,
                    helpTextID: "reproject_raster"
                },
                SpatialReference: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.spatialReference,
                    displayName: functionStrings.rasterFunctions.rfxArgs.spatialReferenceName,
                    hidden: false,
                    helpTextID: "reproject_spatialreference"
                },
                XCellsize: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.double,
                    displayName: functionStrings.rasterFunctions.rfxArgs.xCellsizeName,
                    hidden: false,
                    defaultValue: 0,
                    helpTextID: "reproject_xcellsize"
                },
                YCellsize: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.double,
                    displayName: functionStrings.rasterFunctions.rfxArgs.yCellsizeName,
                    hidden: false,
                    defaultValue: 0,
                    helpTextID: "reproject_ycellsize"
                },
                XOrigin: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.double,
                    displayName: functionStrings.rasterFunctions.rfxArgs.xOriginName,
                    hidden: false,
                    defaultValue: 0,
                    helpTextID: "reproject_xorigin"
                },
                YOrigin: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.double,
                    displayName: functionStrings.rasterFunctions.rfxArgs.yOriginName,
                    hidden: false,
                    defaultValue: 0,
                    helpTextID: "reproject_yorigin"
                }
            }
        },
        S1ThermalNoiseRemovalFunction: {
            name: functionStrings.rasterFunctions.rfx.s1ThermalNoiseRemovalName,
            snippet: functionStrings.rasterFunctions.rfx.s1ThermalNoiseRemovalSnip,
            description: functionStrings.rasterFunctions.rfx.s1ThermalNoiseRemovalDesc,
            category: "correction",
            icon: "s1ThermalNoiseRemoval.png",
            helpID: "sentinel-1-thermal-noise-removal.htm",
            rasterFunctionArguments: {
                Raster: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.rasterName,
                    hidden: false,
                    helpTextID: "sentinel1thermalnoiseremoval_raster"
                }
            }
        },
        FocalFunction: {
            name: functionStrings.rasterFunctions.rfx.focalName,
            snippet: functionStrings.rasterFunctions.rfx.focalSnip,
            description: functionStrings.rasterFunctions.rfx.focalDesc,
            category: "statistical",
            icon: "focal.png",
            helpID: "focal-statistics-function.htm",
            rasterFunctionArguments: {
                Raster: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.rasterName,
                    hidden: false,
                    helpTextID: "focalstatistics_raster"
                },
                NeighborhoodType: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.long,
                    displayName: functionStrings.rasterFunctions.rfxArgs.neighborhoodType,
                    hidden: false,
                    defaultValue: 1,
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.esriFocalNeighborhoodTypes
                    },
                    categoryRefId: "rfxArgCat_NeighborhoodSettings",
                    editorStateTrigger: {
                        active: true,
                        triggers: [
                            {
                                values: [1],
                                active: ["Width", "Height"],
                                inactive: ["Radius", "InnerRadius", "OuterRadius", "StartAngle", "EndAngle", "NeighborhoodValues"]
                            },
                            {
                                values: [2],
                                active: ["Radius"],
                                inactive: [
                                    "Width",
                                    "Height",
                                    "InnerRadius",
                                    "OuterRadius",
                                    "StartAngle",
                                    "EndAngle",
                                    "NeighborhoodValues"
                                ]
                            },
                            {
                                values: [3],
                                active: ["InnerRadius", "OuterRadius"],
                                inactive: ["Width", "Height", "Radius", "StartAngle", "EndAngle", "NeighborhoodValues"]
                            },
                            {
                                values: [4],
                                active: ["Radius", "StartAngle", "EndAngle"],
                                inactive: ["Width", "Height", "InnerRadius", "OuterRadius", "NeighborhoodValues"]
                            },
                            {
                                values: [5, 6],
                                active: ["Width", "Height", "NeighborhoodValues"],
                                inactive: ["Radius", "InnerRadius", "OuterRadius", "StartAngle", "EndAngle"]
                            }
                        ]
                    },
                    helpTextID: "focalstatistics_neighborhoodtype"
                },
                Width: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.long,
                    displayName: functionStrings.rasterFunctions.rfxArgs.widthName,
                    hidden: false,
                    defaultValue: 3,
                    categoryRefId: "rfxArgCat_NeighborhoodSettings"
                },
                Height: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.long,
                    displayName: functionStrings.rasterFunctions.rfxArgs.heightName,
                    hidden: false,
                    defaultValue: 3,
                    categoryRefId: "rfxArgCat_NeighborhoodSettings"
                },
                InnerRadius: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.long,
                    displayName: functionStrings.rasterFunctions.rfxArgs.innerRadiusName,
                    hidden: false,
                    defaultValue: 1,
                    categoryRefId: "rfxArgCat_NeighborhoodSettings"
                },
                OuterRadius: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.long,
                    displayName: functionStrings.rasterFunctions.rfxArgs.outerRadiusName,
                    hidden: false,
                    defaultValue: 3,
                    categoryRefId: "rfxArgCat_NeighborhoodSettings"
                },
                Radius: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.long,
                    displayName: functionStrings.rasterFunctions.rfxArgs.radiusName,
                    hidden: false,
                    defaultValue: 3,
                    categoryRefId: "rfxArgCat_NeighborhoodSettings"
                },
                StartAngle: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.double,
                    displayName: functionStrings.rasterFunctions.rfxArgs.startAngleName,
                    hidden: false,
                    defaultValue: 0,
                    categoryRefId: "rfxArgCat_NeighborhoodSettings"
                },
                EndAngle: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.double,
                    displayName: functionStrings.rasterFunctions.rfxArgs.endAngleName,
                    hidden: false,
                    defaultValue: 90,
                    categoryRefId: "rfxArgCat_NeighborhoodSettings"
                },
                NeighborhoodValues: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.doubleArray,
                    displayName: functionStrings.rasterFunctions.rfxArgs.neighborhoodValues,
                    hidden: false,
                    defaultValue: [0, 1, 0, 1, 1, 1, 0, 1, 0],
                    categoryRefId: "rfxArgCat_NeighborhoodSettings"
                },
                StatisticType: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.long,
                    displayName: functionStrings.rasterFunctions.rfxArgs.statisticsTypeName,
                    hidden: false,
                    defaultValue: 3,
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.esriGAFocalStatisticsTypes
                    },
                    categoryRefId: "rfxArgCat_FocalStatistics",
                    editorStateTrigger: {
                        active: true,
                        triggers: [
                            {
                                values: [12],
                                active: ["Percentile"],
                                autoRevert: true
                            }
                        ]
                    },
                    helpTextID: "focalstatistics_statistictype"
                },
                Percentile: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.double,
                    displayName: functionStrings.rasterFunctions.rfxArgs.percentileName,
                    hidden: false,
                    defaultValue: 90,
                    categoryRefId: "rfxArgCat_FocalStatistics",
                    helpTextID: "focalstatistics_percentile"
                },
                NoDataPolicy: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.boolean,
                    displayName: functionStrings.rasterFunctions.rfxArgs.ignoreNoDataName,
                    hidden: false,
                    defaultValue: true,
                    helpTextID: "focalstatistics_nodatapolicy"
                }
            },
            editorArgumentOverride: {
                active: true,
                overrides: [
                    {
                        argumentNames: ["StatisticType"],
                        triggerArguments: ["Raster", "NeighborhoodType"],
                        triggerAttributes: "pixelType:Raster,float,3|2|4|5|12|7|8|9;value:NeighborhoodType,6,3|8|9",
                        widget: {
                            path: "rfx-cte-filtered-argument-editor"
                        }
                    },
                    {
                        argumentNames: ["NeighborhoodType"],
                        triggerArguments: ["StatisticType"],
                        triggerAttributes: "value:StatisticType,1|2|4|5|6|7|10,1|2|3|4|5",
                        widget: {
                            path: "rfx-cte-filtered-argument-editor"
                        }
                    },
                    {
                        argumentNames: ["NeighborhoodValues"],
                        triggerArguments: ["Width", "Height", "NeighborhoodType"],
                        widget: {
                            path: "rfx-cte-neighborhood-values"
                        }
                    },
                    {
                        argumentNames: ["Width"],
                        triggerAttributes: "minValue:1",
                        widget: {
                            path: "rfx-cte-ranged-value-editor"
                        }
                    },
                    {
                        argumentNames: ["Height"],
                        triggerAttributes: "minValue:1",
                        widget: {
                            path: "rfx-cte-ranged-value-editor"
                        }
                    },
                    {
                        argumentNames: ["Radius"],
                        triggerAttributes: "minValue:1",
                        widget: {
                            path: "rfx-cte-ranged-value-editor"
                        }
                    },
                    {
                        argumentNames: ["InnerRadius"],
                        triggerAttributes: "minValue:1;lessThan:OuterRadius",
                        triggerArguments: ["OuterRadius"],
                        widget: {
                            path: "rfx-cte-ranged-value-editor"
                        }
                    },
                    {
                        argumentNames: ["OuterRadius"],
                        triggerAttributes: "minValue:2;greaterThan:InnerRadius",
                        triggerArguments: ["InnerRadius"],
                        widget: {
                            path: "rfx-cte-ranged-value-editor"
                        }
                    },
                    {
                        argumentNames: ["Percentile"],
                        triggerAttributes: "minValue:0;maxValue:100",
                        widget: {
                            path: "rfx-cte-ranged-value-editor"
                        }
                    }
                ]
            }
        },
        TransposeBitsFunction: {
            name: functionStrings.rasterFunctions.rfx.transposeBitsName,
            snippet: functionStrings.rasterFunctions.rfx.transposeBitsSnip,
            description: functionStrings.rasterFunctions.rfx.transposeBitsDesc,
            category: "dataManagement",
            icon: "transposeBits.png",
            helpID: "transpose-bits-function.htm",
            hidden: false,
            rasterFunctionArguments: {
                Raster: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.rasterName,
                    hidden: false,
                    helpTextID: "transposebits_raster"
                },
                ConstantFillCheck: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.boolean,
                    displayName: functionStrings.rasterFunctions.rfxArgs.constantFillCheck,
                    hidden: false,
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.boolean
                    },
                    defaultValue: true,
                    editorStateTrigger: {
                        active: true,
                        triggers: [
                            {
                                values: [true],
                                active: ["ConstantFillValue"],
                                inactive: ["FillRaster"],
                                autoRevert: true
                            }
                        ]
                    },
                    helpTextID: "transposebits_constantfillcheck"
                },
                FillRaster: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.fillRaster,
                    hidden: false,
                    helpTextID: "transposebits_fillraster"
                },
                ConstantFillValue: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.long,
                    defaultValue: 0,
                    displayName: functionStrings.rasterFunctions.rfxArgs.constantFillValue,
                    hidden: false,
                    helpTextID: "transposebits_constantfillvalue"
                },
                InputBitPositions: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.longArray,
                    displayName: functionStrings.rasterFunctions.rfxArgs.inputBitPositions,
                    hidden: false
                },
                OutputBitPositions: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.longArray,
                    displayName: functionStrings.rasterFunctions.rfxArgs.outputBitPositions,
                    hidden: false
                }
            },
            editorArgumentOverride: {
                active: true,
                overrides: [
                    {
                        argumentNames: ["InputBitPositions", "OutputBitPositions"],
                        widget: {
                            path: "rfx-cte-transpose-bit"
                        },
                        helpTextIDs: {
                            transposebits_bitpattern: "transposebits_bitpattern"
                        }
                    }
                ]
            }
        },
        Sink: {
            name: functionStrings.rasterFunctions.rfx.sinkName,
            snippet: functionStrings.rasterFunctions.rfx.sinkSnip,
            description: functionStrings.rasterFunctions.rfx.sinkDesc,
            category: "hydrology",
            icon: "sink.png",
            helpID: "sink-function.htm",
            rasterFunctionArguments: {
                ToolName: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: true,
                    defaultValue: "Sink_sa"
                },
                PrimaryInputParameterName: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: true,
                    defaultValue: "in_flow_direction_raster"
                },
                OutputRasterParameterName: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: true,
                    defaultValue: "out_raster"
                },
                in_flow_direction_raster: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.flowDirRaster,
                    hidden: false,
                    helpTextID: "sink_inflowdirectionraster"
                },
                MatchVariable: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.boolean,
                    hidden: true
                },
                UnionDimension: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.boolean,
                    hidden: true
                }
            }
        },
        SnapPourPoint: {
            name: functionStrings.rasterFunctions.rfx.snapPourPointName,
            snippet: functionStrings.rasterFunctions.rfx.snapPourPointSnip,
            description: functionStrings.rasterFunctions.rfx.snapPourPointDesc,
            category: "hydrology",
            icon: "snapPourPoint.png",
            helpID: "snap-pour-point-function.htm",
            rasterFunctionArguments: {
                ToolName: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: true,
                    defaultValue: "SnapPourPoint_sa"
                },
                PrimaryInputParameterName: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: true,
                    defaultValue: "in_pour_point_data"
                },
                OutputRasterParameterName: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: true,
                    defaultValue: "out_raster"
                },
                in_pour_point_data: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.pourPointDataName,
                    hidden: false,
                    helpTextID: "snappourpoint_inpourpointdata"
                },
                in_accumulation_raster: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.accumulationRasterName,
                    hidden: false,
                    helpTextID: "snappourpoint_inaccumulationraster"
                },
                snap_distance: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.double,
                    displayName: functionStrings.rasterFunctions.rfxArgs.snapDistanceName,
                    hidden: false,
                    defaultValue: 0,
                    helpTextID: "snappourpoint_snapdistance"
                },
                pour_point_field: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: false,
                    displayName: functionStrings.rasterFunctions.rfxArgs.pourPointFieldName,
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.fields,
                        argumentName: "in_pour_point_data"
                    },
                    helpTextID: "snappourpoint_pourpointfield"
                },
                MatchVariable: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.boolean,
                    hidden: true
                },
                UnionDimension: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.boolean,
                    hidden: true
                }
            }
        },
        EucBackDirection: {
            name: functionStrings.rasterFunctions.rfx.eucBackDirectionName,
            snippet: functionStrings.rasterFunctions.rfx.eucBackDirectionSnip,
            description: functionStrings.rasterFunctions.rfx.eucBackDirectionDesc,
            hidden: true,
            category: "distanceLegacy",
            icon: "eucBackDirection.png",
            helpID: "euclidean-back-direction-function.htm",
            rasterFunctionArguments: {
                ToolName: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: true,
                    defaultValue: "EucBackDirection_sa"
                },
                PrimaryInputParameterName: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: true,
                    defaultValue: "in_source_data"
                },
                OutputRasterParameterName: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: true,
                    defaultValue: "out_back_direction_raster"
                },
                in_source_data: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.sourceDataName,
                    hidden: false,
                    helpTextID: "eucbackdirection_insourcedata"
                },
                in_barrier_data: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.barrierDataName,
                    hidden: false,
                    helpTextID: "eucbackdirection_inbarrierdata"
                },
                maximum_distance: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.double,
                    hidden: false,
                    displayName: functionStrings.rasterFunctions.rfxArgs.maxDistanceName,
                    helpTextID: "eucbackdirection_maximumdistance"
                },
                cell_size: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.double,
                    hidden: false,
                    displayName: functionStrings.rasterFunctions.rfxArgs.cellSizeName,
                    helpTextID: "eucbackdirection_cellsize"
                },
                distance_method: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: false,
                    displayName: functionStrings.rasterFunctions.rfxArgs.distanceMethodName,
                    defaultValue: "PLANAR",
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.gpsaDistanceMethods
                    },
                    helpTextID: "eucbackdirection_distancemethod"
                }
            }
        },
        DistanceAllocation: {
            name: functionStrings.rasterFunctions.rfx.distanceAllocationName,
            snippet: functionStrings.rasterFunctions.rfx.distanceAllocationSnip,
            description: functionStrings.rasterFunctions.rfx.distanceAllocationDesc,
            category: "distance",
            icon: "distanceAllocation.png",
            helpID: "distance-allocation-global-function.htm",
            rasterFunctionArguments: {
                ToolName: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: true,
                    defaultValue: "DistanceAllocation_sa"
                },
                PrimaryInputParameterName: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: true,
                    defaultValue: "in_source_data"
                },
                OutputRasterParameterName: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: true,
                    defaultValue: "out_distance_allocation_raster"
                },
                in_source_data: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.sourceDataName,
                    hidden: false,
                    helpTextID: "distanceallocation_insourcedata"
                },
                source_field: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.sourceFieldName,
                    hidden: false,
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.fields,
                        argumentName: "in_source_data"
                    },
                    helpTextID: "distanceallocation_sourcefield"
                },
                in_barrier_data: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.barrierDataName,
                    hidden: false,
                    helpTextID: "distanceallocation_inbarrierdata"
                },
                in_surface_raster: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.surfaceRasterName,
                    hidden: false,
                    helpTextID: "distanceallocation_insurfaceraster"
                },
                in_cost_raster: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.costRasterName,
                    hidden: false,
                    helpTextID: "distanceallocation_incostraster"
                },
                in_vertical_raster: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.verticalRaster,
                    hidden: false,
                    editorStateTrigger: {
                        active: true,
                        triggers: [
                            {
                                values: [],
                                checkValuePresent: true,
                                active: ["vertical_factor"],
                                inactive: [],
                                autoRevert: true
                            }
                        ]
                    },
                    helpTextID: "distanceallocation_inverticalraster"
                },
                vertical_factor: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.verticalFactor,
                    hidden: false,
                    helpTextID: "distanceallocation_verticalfactor"
                },
                in_horizontal_raster: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.horizontalRaster,
                    hidden: false,
                    editorStateTrigger: {
                        active: true,
                        triggers: [
                            {
                                values: [],
                                checkValuePresent: true,
                                active: ["horizontal_factor"],
                                inactive: [],
                                autoRevert: true
                            }
                        ]
                    },
                    helpTextID: "distanceallocation_inhorizontalraster"
                },
                horizontal_factor: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.horizontalFactor,
                    hidden: false,
                    helpTextID: "distanceallocation_horizontalfactor"
                },
                generate_source_location_bands: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.boolean,
                    displayName: functionStrings.rasterFunctions.rfxArgs.sourceLocationBands,
                    hidden: false,
                    defaultValue: false,
                    helpTextID: "distanceallocation_generatesourcelocationbands"
                },
                distance_method: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: false,
                    displayName: functionStrings.rasterFunctions.rfxArgs.distanceMethodName,
                    defaultValue: "PLANAR",
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.gpsaDistanceMethods
                    },
                    helpTextID: "distanceallocation_distancemethod"
                },
                source_initial_accumulation: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.initialAccumulation,
                    hidden: false,
                    categoryRefId: "rfxArgCat_SourceCharacteristics",
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.switchable,
                        attributes: [
                            {
                                type: "number"
                            },
                            {
                                type: "field",
                                argumentName: "in_source_data"
                            }
                        ]
                    },
                    helpTextID: "distanceallocation_sourceinitialaccumulation"
                },
                source_maximum_accumulation: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.maximumAccumulation,
                    hidden: false,
                    categoryRefId: "rfxArgCat_SourceCharacteristics",
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.switchable,
                        attributes: [
                            {
                                type: "number"
                            },
                            {
                                type: "field",
                                argumentName: "in_source_data"
                            }
                        ]
                    },
                    helpTextID: "distanceallocation_sourcemaximumaccumulation"
                },
                source_cost_multiplier: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.costMultiplierName,
                    hidden: false,
                    categoryRefId: "rfxArgCat_SourceCharacteristics",
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.switchable,
                        attributes: [
                            {
                                type: "number"
                            },
                            {
                                type: "field",
                                argumentName: "in_source_data"
                            }
                        ]
                    },
                    helpTextID: "distanceallocation_sourcecostmultiplier"
                },
                source_direction: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.travelDirectionName,
                    hidden: false,
                    categoryRefId: "rfxArgCat_SourceCharacteristics",
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.switchable,
                        attributes: [
                            {
                                type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                                enum: enums.gpsaTravelDirections,
                                defaultValue: "FROM_SOURCE"
                            },
                            {
                                type: "field",
                                argumentName: "in_source_data"
                            }
                        ]
                    },
                    helpTextID: "distanceallocation_sourcedirection"
                }
            },
            editorArgumentOverride: {
                active: true,
                overrides: [
                    {
                        argumentNames: ["horizontal_factor"],
                        triggerArguments: ["in_horizontal_raster"],
                        widget: {
                            path: "rfx-cte-factor-function-editor"
                        }
                    },
                    {
                        argumentNames: ["vertical_factor"],
                        triggerArguments: ["in_vertical_raster"],
                        widget: {
                            path: "rfx-cte-factor-function-editor"
                        }
                    }
                ]
            }
        },
        DistanceAccumulation: {
            name: functionStrings.rasterFunctions.rfx.distanceAccumulationName,
            snippet: functionStrings.rasterFunctions.rfx.distanceAccumulationSnip,
            description: functionStrings.rasterFunctions.rfx.distanceAccumulationDesc,
            category: "distance",
            icon: "distanceAccumulation.png",
            helpID: "distance-accumulation-global-function.htm",
            rasterFunctionArguments: {
                ToolName: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: true,
                    defaultValue: "DistanceAccumulation_sa"
                },
                PrimaryInputParameterName: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: true,
                    defaultValue: "in_source_data"
                },
                OutputRasterParameterName: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: true,
                    defaultValue: "out_distance_accumulation_raster"
                },
                in_source_data: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.sourceDataName,
                    hidden: false,
                    helpTextID: "distanceaccumulation_insourcedata"
                },
                in_barrier_data: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.barrierDataName,
                    hidden: false,
                    helpTextID: "distanceaccumulation_inbarrierdata"
                },
                in_surface_raster: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.surfaceRasterName,
                    hidden: false,
                    helpTextID: "distanceaccumulation_insurfaceraster"
                },
                in_cost_raster: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.costRasterName,
                    hidden: false,
                    helpTextID: "distanceaccumulation_incostraster"
                },
                in_vertical_raster: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.verticalRaster,
                    hidden: false,
                    editorStateTrigger: {
                        active: true,
                        triggers: [
                            {
                                values: [],
                                checkValuePresent: true,
                                active: ["vertical_factor"],
                                inactive: [],
                                autoRevert: true
                            }
                        ]
                    },
                    helpTextID: "distanceaccumulation_inverticalraster"
                },
                vertical_factor: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.verticalFactor,
                    hidden: false,
                    helpTextID: "distanceaccumulation_verticalfactor"
                },
                in_horizontal_raster: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.horizontalRaster,
                    hidden: false,
                    editorStateTrigger: {
                        active: true,
                        triggers: [
                            {
                                values: [],
                                checkValuePresent: true,
                                active: ["horizontal_factor"],
                                inactive: [],
                                autoRevert: true
                            }
                        ]
                    },
                    helpTextID: "distanceaccumulation_inhorizontalraster"
                },
                horizontal_factor: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.horizontalFactor,
                    hidden: false,
                    helpTextID: "distanceaccumulation_horizontalfactor"
                },
                generate_back_direction_band: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.boolean,
                    displayName: functionStrings.rasterFunctions.rfxArgs.backDirectionBand,
                    hidden: false,
                    defaultValue: false,
                    helpTextID: "distanceaccumulation_generatebackdirectionband"
                },
                distance_method: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: false,
                    displayName: functionStrings.rasterFunctions.rfxArgs.distanceMethodName,
                    defaultValue: "PLANAR",
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.gpsaDistanceMethods
                    },
                    helpTextID: "distanceaccumulation_distancemethod"
                },
                source_initial_accumulation: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.initialAccumulation,
                    hidden: false,
                    categoryRefId: "rfxArgCat_SourceCharacteristics",
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.switchable,
                        attributes: [
                            {
                                type: "number"
                            },
                            {
                                type: "field",
                                argumentName: "in_source_data"
                            }
                        ]
                    },
                    helpTextID: "distanceaccumulation_sourceinitialaccumulation"
                },
                source_maximum_accumulation: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.maximumAccumulation,
                    hidden: false,
                    categoryRefId: "rfxArgCat_SourceCharacteristics",
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.switchable,
                        attributes: [
                            {
                                type: "number"
                            },
                            {
                                type: "field",
                                argumentName: "in_source_data"
                            }
                        ]
                    },
                    helpTextID: "distanceaccumulation_sourcemaximumaccumulation"
                },
                source_cost_multiplier: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.costMultiplierName,
                    hidden: false,
                    categoryRefId: "rfxArgCat_SourceCharacteristics",
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.switchable,
                        attributes: [
                            {
                                type: "number"
                            },
                            {
                                type: "field",
                                argumentName: "in_source_data"
                            }
                        ]
                    },
                    helpTextID: "distanceaccumulation_sourcecostmultiplier"
                },
                source_direction: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.travelDirectionName,
                    hidden: false,
                    categoryRefId: "rfxArgCat_SourceCharacteristics",
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.switchable,
                        attributes: [
                            {
                                type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                                enum: enums.gpsaTravelDirections,
                                defaultValue: "FROM_SOURCE"
                            },
                            {
                                type: "field",
                                argumentName: "in_source_data"
                            }
                        ]
                    },
                    helpTextID: "distanceaccumulation_sourcedirection"
                }
            },
            editorArgumentOverride: {
                active: true,
                overrides: [
                    {
                        argumentNames: ["horizontal_factor"],
                        triggerArguments: ["in_horizontal_raster"],
                        widget: {
                            path: "rfx-cte-factor-function-editor"
                        }
                    },
                    {
                        argumentNames: ["vertical_factor"],
                        triggerArguments: ["in_vertical_raster"],
                        widget: {
                            path: "rfx-cte-factor-function-editor"
                        }
                    }
                ]
            }
        },
        Shrink: {
            name: functionStrings.rasterFunctions.rfx.shrinkName,
            snippet: functionStrings.rasterFunctions.rfx.shrinkSnip,
            description: functionStrings.rasterFunctions.rfx.shrinkDesc,
            category: "dataManagement",
            icon: "shrink.png",
            helpID: "shrink-function.htm",
            rasterFunctionArguments: {
                ToolName: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: true,
                    defaultValue: "Shrink_sa"
                },
                PrimaryInputParameterName: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: true,
                    defaultValue: "in_raster"
                },
                OutputRasterParameterName: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: true,
                    defaultValue: "out_raster"
                },
                in_raster: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.rasterName,
                    hidden: false,
                    helpTextID: "shrink_inraster"
                },
                number_cells: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.long,
                    displayName: functionStrings.rasterFunctions.rfxArgs.numberOfCells,
                    hidden: false,
                    defaultValue: 1,
                    helpTextID: "shrink_numbercells"
                },
                zone_values: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.longArray,
                    displayName: functionStrings.rasterFunctions.rfxArgs.zoneValues,
                    hidden: false,
                    helpTextID: "shrink_zonevalues"
                },
                shrink_method: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.shrinkMethod,
                    hidden: true,
                    defaultValue: "DISTANCE",
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.gpsaExpandMethod
                    }
                }
            }
        },
        BoundaryClean: {
            name: functionStrings.rasterFunctions.rfx.boundaryCleanName,
            snippet: functionStrings.rasterFunctions.rfx.boundaryCleanSnip,
            description: functionStrings.rasterFunctions.rfx.boundaryCleanDesc,
            category: "dataManagement",
            icon: "boundaryClean.png",
            helpID: "boundary-clean-function.htm",
            rasterFunctionArguments: {
                ToolName: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: true,
                    defaultValue: "BoundaryClean_sa"
                },
                PrimaryInputParameterName: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: true,
                    defaultValue: "in_raster"
                },
                OutputRasterParameterName: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: true,
                    defaultValue: "out_raster"
                },
                in_raster: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.rasterName,
                    hidden: false,
                    helpTextID: "boundaryclean_inraster"
                },
                sort_type: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.sortType,
                    hidden: false,
                    defaultValue: "NO_SORT",
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.gpsaSortType
                    },
                    helpTextID: "boundaryclean_sorttype"
                },
                number_of_runs: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.boolean,
                    displayName: functionStrings.rasterFunctions.rfxArgs.numberOfRuns,
                    hidden: false,
                    defaultValue: true,
                    helpTextID: "boundaryclean_numberofruns"
                }
            }
        },
        Expand: {
            name: functionStrings.rasterFunctions.rfx.expandName,
            snippet: functionStrings.rasterFunctions.rfx.expandSnip,
            description: functionStrings.rasterFunctions.rfx.expandDesc,
            category: "dataManagement",
            icon: "expand.png",
            helpID: "expand-function.htm",
            rasterFunctionArguments: {
                ToolName: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: true,
                    defaultValue: "Expand_sa"
                },
                PrimaryInputParameterName: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: true,
                    defaultValue: "in_raster"
                },
                OutputRasterParameterName: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: true,
                    defaultValue: "out_raster"
                },
                in_raster: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.rasterName,
                    hidden: false,
                    helpTextID: "expand_inraster"
                },
                number_cells: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.long,
                    displayName: functionStrings.rasterFunctions.rfxArgs.numberOfCells,
                    hidden: false,
                    defaultValue: 1,
                    helpTextID: "expand_numbercells"
                },
                zone_values: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.longArray,
                    displayName: functionStrings.rasterFunctions.rfxArgs.zoneValues,
                    hidden: false,
                    helpTextID: "expand_zonevalues"
                },
                expand_method: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.expandMethod,
                    hidden: true,
                    defaultValue: "DISTANCE",
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.gpsaExpandMethod
                    }
                }
            }
        },
        SpectralUnmixingFunction: {
            name: functionStrings.rasterFunctions.rfx.spectralUnmixingName,
            snippet: functionStrings.rasterFunctions.rfx.spectralUnmixingSnip,
            description: functionStrings.rasterFunctions.rfx.spectralUnmixingDesc,
            category: "classification",
            icon: "spectralUnmixing.png",
            helpID: "linear-spectral-unmixing.htm",
            rasterFunctionArguments: {
                Raster: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.rasterName,
                    hidden: false,
                    helpTextID: "spectralunmixing_raster"
                },
                SpectralProfileType: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.long,
                    displayName: functionStrings.rasterFunctions.rfxArgs.inputSpectralProfileType,
                    hidden: false,
                    defaultValue: 0,
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.spectralProfileFileTypes
                    },
                    editorStateTrigger: {
                        active: true,
                        triggers: [
                            {
                                values: [0],
                                active: ["SpectralProfileFile"],
                                inactive: ["TrainingFeature"],
                                autoRevert: true
                            }
                        ]
                    },
                    helpTextID: "spectralunmixing_spectralprofiletype"
                },
                SpectralProfileFile: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.spectralProfileFileName,
                    hidden: false,
                    helpTextID: "spectralunmixing_spectralprofilefile"
                },
                TrainingFeature: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.featureClass,
                    displayName: functionStrings.rasterFunctions.rfxArgs.trainingFeatureFileName,
                    hidden: false,
                    helpTextID: "spectralunmixing_trainingfeature"
                },
                NonNegative: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.boolean,
                    displayName: functionStrings.rasterFunctions.rfxArgs.nonNegative,
                    hidden: false,
                    defaultValue: false,
                    helpTextID: "spectralunmixing_nonnegative"
                },
                SumToOne: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.boolean,
                    displayName: functionStrings.rasterFunctions.rfxArgs.sumToOne,
                    hidden: false,
                    defaultValue: false,
                    helpTextID: "spectralunmixing_sumtoone"
                }
            }
        },
        RandomFunction: {
            name: functionStrings.rasterFunctions.rfx.randomName,
            snippet: functionStrings.rasterFunctions.rfx.randomSnip,
            description: functionStrings.rasterFunctions.rfx.randomDesc,
            category: "dataManagement",
            icon: "random.png",
            helpID: "random-function.htm",
            rasterFunctionArguments: {
                Distribution: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.long,
                    displayName: functionStrings.rasterFunctions.rfxArgs.randomDistribution,
                    hidden: false,
                    defaultValue: 1,
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.randomDistributionType
                    },
                    editorStateTrigger: {
                        active: true,
                        triggers: [
                            {
                                values: [1],
                                active: ["MinimumUniform", "MaximumUniform"],
                                inactive: [
                                    "MinimumInteger",
                                    "MaximumInteger",
                                    "NormalMean",
                                    "ExponentialMean",
                                    "StandardDeviation",
                                    "Alpha",
                                    "Beta",
                                    "N",
                                    "Probability",
                                    "r"
                                ]
                            },
                            {
                                values: [2],
                                active: ["MinimumInteger", "MaximumInteger"],
                                inactive: [
                                    "MinimumUniform",
                                    "MaximumUniform",
                                    "NormalMean",
                                    "ExponentialMean",
                                    "StandardDeviation",
                                    "Alpha",
                                    "Beta",
                                    "N",
                                    "Probability",
                                    "r"
                                ]
                            },
                            {
                                values: [3],
                                active: ["NormalMean", "StandardDeviation"],
                                inactive: [
                                    "MinimumUniform",
                                    "MaximumUniform",
                                    "MinimumInteger",
                                    "MaximumInteger",
                                    "ExponentialMean",
                                    "Alpha",
                                    "Beta",
                                    "N",
                                    "Probability",
                                    "r"
                                ]
                            },
                            {
                                values: [4],
                                active: ["ExponentialMean"],
                                inactive: [
                                    "MinimumUniform",
                                    "MaximumUniform",
                                    "MinimumInteger",
                                    "MaximumInteger",
                                    "NormalMean",
                                    "StandardDeviation",
                                    "Alpha",
                                    "Beta",
                                    "N",
                                    "Probability",
                                    "r"
                                ]
                            },
                            {
                                values: [5],
                                active: ["ExponentialMean"],
                                inactive: [
                                    "MinimumUniform",
                                    "MaximumUniform",
                                    "MinimumInteger",
                                    "MaximumInteger",
                                    "NormalMean",
                                    "StandardDeviation",
                                    "Alpha",
                                    "Beta",
                                    "N",
                                    "Probability",
                                    "r"
                                ]
                            },
                            {
                                values: [6],
                                active: ["Alpha", "Beta"],
                                inactive: [
                                    "MinimumUniform",
                                    "MaximumUniform",
                                    "MinimumInteger",
                                    "MaximumInteger",
                                    "NormalMean",
                                    "StandardDeviation",
                                    "ExponentialMean",
                                    "N",
                                    "Probability",
                                    "r"
                                ]
                            },
                            {
                                values: [7],
                                active: ["N", "Probability"],
                                inactive: [
                                    "MinimumUniform",
                                    "MaximumUniform",
                                    "MinimumInteger",
                                    "MaximumInteger",
                                    "NormalMean",
                                    "StandardDeviation",
                                    "ExponentialMean",
                                    "Alpha",
                                    "Beta",
                                    "r"
                                ]
                            },
                            {
                                values: [8],
                                active: ["Probability"],
                                inactive: [
                                    "MinimumUniform",
                                    "MaximumUniform",
                                    "MinimumInteger",
                                    "MaximumInteger",
                                    "NormalMean",
                                    "StandardDeviation",
                                    "ExponentialMean",
                                    "Alpha",
                                    "Beta",
                                    "N",
                                    "r"
                                ]
                            },
                            {
                                values: [9],
                                active: ["r", "Probability"],
                                inactive: [
                                    "MinimumUniform",
                                    "MaximumUniform",
                                    "MinimumInteger",
                                    "MaximumInteger",
                                    "NormalMean",
                                    "StandardDeviation",
                                    "ExponentialMean",
                                    "Alpha",
                                    "Beta",
                                    "N"
                                ]
                            }
                        ]
                    },
                    helpTextID: "random_distribution"
                },
                MinimumUniform: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.double,
                    displayName: functionStrings.rasterFunctions.rfxArgs.minimumName,
                    hidden: false,
                    defaultValue: 0
                },
                MaximumUniform: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.double,
                    displayName: functionStrings.rasterFunctions.rfxArgs.maximumName,
                    hidden: false,
                    defaultValue: 1
                },
                MinimumInteger: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.long,
                    displayName: functionStrings.rasterFunctions.rfxArgs.minimumName,
                    hidden: false,
                    defaultValue: 1
                },
                MaximumInteger: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.long,
                    displayName: functionStrings.rasterFunctions.rfxArgs.maximumName,
                    hidden: false,
                    defaultValue: 10
                },
                NormalMean: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.double,
                    displayName: functionStrings.rasterFunctions.rfxArgs.meanName,
                    hidden: false,
                    defaultValue: 0.0
                },
                StandardDeviation: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.double,
                    displayName: functionStrings.rasterFunctions.rfxArgs.stdDeviation,
                    hidden: false,
                    defaultValue: 1.0
                },
                ExponentialMean: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.double,
                    displayName: functionStrings.rasterFunctions.rfxArgs.meanName,
                    hidden: false,
                    defaultValue: 1.0
                },
                Alpha: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.double,
                    displayName: functionStrings.rasterFunctions.rfxArgs.alphaName,
                    hidden: false,
                    defaultValue: 1.0
                },
                Beta: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.double,
                    displayName: functionStrings.rasterFunctions.rfxArgs.betaName,
                    hidden: false,
                    defaultValue: 1.0
                },
                N: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.long,
                    displayName: functionStrings.rasterFunctions.rfxArgs.nName,
                    hidden: false,
                    defaultValue: 10
                },
                r: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.double,
                    displayName: functionStrings.rasterFunctions.rfxArgs.rName,
                    hidden: false,
                    defaultValue: 10.0
                },
                Probability: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.double,
                    displayName: functionStrings.rasterFunctions.rfxArgs.probabilityName,
                    hidden: false,
                    defaultValue: 0.5
                },
                Seed: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.long,
                    displayName: functionStrings.rasterFunctions.rfxArgs.seed,
                    hidden: false,
                    defaultValue: 1,
                    helpTextID: "random_seed"
                },
                GeneratorType: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.long,
                    displayName: functionStrings.rasterFunctions.rfxArgs.randomNumberGenerator,
                    hidden: false,
                    defaultValue: 2,
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.randomGeneratorType
                    },
                    helpTextID: "random_generatortype"
                },
                RasterInfo: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.rasterInfo,
                    displayName: functionStrings.rasterFunctions.rfxArgs.rasterInfoName,
                    hidden: false,
                    helpTextID: "random_rasterinfo"
                }
            }
        },
        AggregateFunction: {
            name: functionStrings.rasterFunctions.rfx.aggregateName,
            snippet: functionStrings.rasterFunctions.rfx.aggregateSnip,
            description: functionStrings.rasterFunctions.rfx.aggregateDesc,
            category: "dataManagement",
            icon: "aggregate.png",
            helpID: "aggregate-function.htm",
            rasterFunctionArguments: {
                Raster: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.rasterName,
                    hidden: false,
                    helpTextID: "aggregate_raster"
                },
                CellFactor: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.long,
                    displayName: functionStrings.rasterFunctions.rfxArgs.cellFactor,
                    hidden: false,
                    defaultValue: 2,
                    helpTextID: "aggregate_cellfactor"
                },
                AggregationType: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.aggregationType,
                    hidden: false,
                    defaultValue: 9,
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.gpsaAggregationTypes
                    },
                    helpTextID: "aggregate_aggregationtype"
                },
                ExpandHandling: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.boolean,
                    displayName: functionStrings.rasterFunctions.rfxArgs.extentHandling,
                    hidden: false,
                    defaultValue: true,
                    helpTextID: "aggregate_expandhandling"
                },
                IgnoreNoData: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.boolean,
                    displayName: functionStrings.rasterFunctions.rfxArgs.ignoreNoDataName,
                    hidden: false,
                    defaultValue: true,
                    helpTextID: "aggregate_ignorenodata"
                }
            }
        },
        TrendAnalysisFunction: {
            name: functionStrings.rasterFunctions.rfx.trendAnalysisName,
            snippet: functionStrings.rasterFunctions.rfx.trendAnalysisSnip,
            description: functionStrings.rasterFunctions.rfx.trendAnalysisDesc,
            category: "analysis",
            icon: "trendAnalysis.png",
            helpID: "generate-trend.htm",
            rasterFunctionArguments: {
                Raster: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.rasterName,
                    hidden: false,
                    helpTextID: "trendanalysis_raster"
                },
                DimensionName: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.trendAnalysisDimensionName,
                    hidden: false,
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.rasterDimensions,
                        argumentName: "Raster"
                    },
                    editorStateTrigger: {
                        active: true,
                        triggers: [
                            {
                                values: ["StdTime"],
                                active: ["CycleUnit"],
                                inactive: [],
                                autoRevert: true
                            }
                        ]
                    },
                    helpTextID: "trendanalysis_dimensionname"
                },
                RegressionType: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.long,
                    displayName: functionStrings.rasterFunctions.rfxArgs.trendAnalysisType,
                    hidden: false,
                    defaultValue: 0,
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.esriTrendAnalysisTypes
                    },
                    editorStateTrigger: {
                        active: true,
                        triggers: [
                            {
                                values: [0],
                                active: ["SlopePValue", "RMSE", "R2"],
                                inactive: ["Frequency", "Order", "CycleLength", "CycleUnit", "SeasonalPeriod"]
                            },
                            {
                                values: [1],
                                active: ["Frequency", "SlopePValue", "RMSE", "R2", "CycleLength", "CycleUnit"],
                                inactive: ["Order", "SeasonalPeriod"]
                            },
                            {
                                values: [2],
                                active: ["Order", "RMSE", "R2"],
                                inactive: ["Frequency", "SlopePValue", "CycleLength", "CycleUnit", "SeasonalPeriod"]
                            },
                            {
                                values: [3] /* Mann-Kendall */,
                                active: [],
                                inactive: [
                                    "Frequency",
                                    "Order",
                                    "SlopePValue",
                                    "CycleLength",
                                    "CycleUnit",
                                    "SeasonalPeriod",
                                    "RMSE",
                                    "R2"
                                ]
                            },
                            {
                                values: [4],
                                active: ["SeasonalPeriod"],
                                inactive: ["Order", "Frequency", "SlopePValue", "CycleLength", "CycleUnit", "RMSE", "R2"]
                            }
                        ]
                    },
                    helpTextID: "trendanalysis_regressiontype"
                },
                CycleLength: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.double,
                    displayName: functionStrings.rasterFunctions.rfxArgs.cycleLengthName,
                    hidden: false,
                    defaultValue: 1,
                    helpTextID: "trendanalysis_cyclelength"
                },
                CycleUnit: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.cycleUnitName,
                    hidden: false,
                    defaultValue: "YEARS",
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.esriCycleUnits
                    },
                    helpTextID: "trendanalysis_cycleunit"
                },
                Frequency: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.long,
                    displayName: functionStrings.rasterFunctions.rfxArgs.harmonicFrequency,
                    hidden: false,
                    defaultValue: 1,
                    helpTextID: "trendanalysis_frequency"
                },
                Order: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.long,
                    displayName: functionStrings.rasterFunctions.rfxArgs.polynomialOrder,
                    hidden: false,
                    defaultValue: 2,
                    helpTextID: "trendanalysis_order"
                },
                IgnoreNoData: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.boolean,
                    displayName: functionStrings.rasterFunctions.rfxArgs.ignoreNoDataName,
                    hidden: false,
                    defaultValue: true,
                    helpTextID: "trendanalysis_ignorenodata"
                },
                RMSE: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.boolean,
                    displayName: functionStrings.rasterFunctions.rfxArgs.trendAnalysisRMSE,
                    categoryRefId: "rfxArgCat_ModelStatistics",
                    hidden: false,
                    defaultValue: true,
                    helpTextID: "trendanalysis_rmse"
                },
                R2: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.boolean,
                    displayName: functionStrings.rasterFunctions.rfxArgs.trendAnalysisR2,
                    categoryRefId: "rfxArgCat_ModelStatistics",
                    hidden: false,
                    defaultValue: false,
                    helpTextID: "trendanalysis_r2"
                },
                SlopePValue: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.boolean,
                    displayName: functionStrings.rasterFunctions.rfxArgs.trendAnalysisSlopePValue,
                    categoryRefId: "rfxArgCat_ModelStatistics",
                    hidden: false,
                    defaultValue: false,
                    helpTextID: "trendanalysis_slopepvalue"
                },
                SeasonalPeriod: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.trendAnalysisSeasonalPeriod,
                    hidden: false,
                    defaultValue: "DAYS",
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.esriTrendSeasonlPeriod
                    },
                    helpTextID: "trendanalysis_seasonalperiod"
                }
            }
        },
        TrendFunction: {
            name: functionStrings.rasterFunctions.rfx.trendName,
            snippet: functionStrings.rasterFunctions.rfx.trendSnip,
            description: functionStrings.rasterFunctions.rfx.trendDesc,
            category: "analysis",
            icon: "trend.png",
            helpID: "predict-using-trend.htm",
            rasterFunctionArguments: {
                Raster: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.rasterName,
                    hidden: false,
                    helpTextID: "trend_raster"
                },
                DimensionDefinitionType: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.long,
                    displayName: functionStrings.rasterFunctions.rfxArgs.dimensionDefinitionType,
                    hidden: false,
                    defaultValue: 0,
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.dimensionDefinitionTypes
                    },
                    editorStateTrigger: {
                        active: true,
                        triggers: [
                            {
                                values: [0],
                                active: ["DimensionValues"],
                                inactive: ["DimensionStart", "DimensionEnd", "DimensionInterval", "DimensionUnit"]
                            },
                            {
                                values: [1],
                                active: ["DimensionStart", "DimensionEnd", "DimensionInterval", "DimensionUnit"],
                                inactive: ["DimensionValues"]
                            }
                        ]
                    },
                    helpTextID: "trend_dimensiondefinitiontype"
                },
                DimensionValues: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.predictDimensionValues,
                    hidden: false,
                    helpTextID: "trend_dimensionvalues"
                },
                DimensionStart: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.predictDimensionStart,
                    hidden: false,
                    helpTextID: "trend_dimensionstart"
                },
                DimensionEnd: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.predictDimensionEnd,
                    hidden: false,
                    helpTextID: "trend_dimensionend"
                },
                DimensionInterval: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.double,
                    displayName: functionStrings.rasterFunctions.rfxArgs.predictDimensionInterval,
                    hidden: false,
                    defaultValue: 1,
                    helpTextID: "trend_dimensioninterval"
                },
                DimensionUnit: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.dimensionUnit,
                    hidden: false,
                    defaultValue: "HOURS",
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.esriMdimTimeIntervalUnits
                    },
                    helpTextID: "trend_dimensionunit"
                }
            }
        },
        MultidimensionalRasterFunction: {
            name: functionStrings.rasterFunctions.rfx.multidimensionalRasterName,
            snippet: functionStrings.rasterFunctions.rfx.multidimensionalRasterSnip,
            description: functionStrings.rasterFunctions.rfx.multidimensionalRasterDesc,
            category: "dataManagement",
            icon: "multidimensionalRaster.png",
            helpID: "multidimensional-raster.htm",
            rasterFunctionArguments: {
                Raster: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.rasterName,
                    hidden: false,
                    helpTextID: "multidimensionalraster_raster"
                },
                Variables: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.stringArray,
                    hidden: false,
                    displayName: functionStrings.rasterFunctions.rfxArgs.variableName,
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.rasterVariables,
                        argumentName: "Raster"
                    },
                    helpTextID: "multidimensionalraster_variables"
                },
                InterpolationMethod: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.long,
                    displayName: functionStrings.rasterFunctions.rfxArgs.interpolationMethodName,
                    hidden: false,
                    categoryRefId: "rfxArgCat_IrregularDataInterpolation",
                    defaultValue: 0,
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.esriInterpolateIrregularDataMethods
                    },
                    helpTextID: "multidimensionalraster_interpolationmethod"
                },
                InterpolationCellsize: {
                    required: true,
                    displayName: functionStrings.rasterFunctions.rfxArgs.interpolationCellsizeName,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.double,
                    hidden: false,
                    defaultValue: 1,
                    categoryRefId: "rfxArgCat_IrregularDataInterpolation",
                    helpTextID: "multidimensionalraster_interpolationcellsize"
                }
            }
        },
        MultidimensionalFilterFunction: {
            name: functionStrings.rasterFunctions.rfx.multidimensionalFilterName,
            snippet: functionStrings.rasterFunctions.rfx.multidimensionalFilterSnip,
            description: functionStrings.rasterFunctions.rfx.multidimensionalFilterDesc,
            category: "dataManagement",
            icon: "multidimensionalFilter.png",
            helpID: "multidimensional-filter.htm",
            rasterFunctionArguments: {
                Raster: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.rasterName,
                    hidden: false,
                    helpTextID: "multidimensionalfilter_raster"
                },
                Filter: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: false,
                    displayName: functionStrings.rasterFunctions.rfxArgs.variableName,
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.mdimdef,
                        argumentName: "Raster",
                        helpTextIDs: {
                            variables: "multidimensionalfilter_variables",
                            dimension: "multidimensionalfilter_dimension",
                            dimensiondefinition: "multidimensionalfilter_dimensiondefinition",
                            values: "multidimensionalfilter_values",
                            ranges: "multidimensionalfilter_ranges",
                            maximumvalue: "multidimensionalfilter_maximumvalue",
                            minimumvalue: "Multidimensional-Filter_minimumvalue",
                            startof: "multidimensionalfilter_startoffirstiteration",
                            endof: "multidimensionalfilter_endoffirstiteration",
                            step: "multidimensionalfilter_step",
                            unit: "multidimensionalfilter_unit"
                        }
                    },
                    helpTextID: "multidimensionalfilter_filter"
                },
                Dimensionless: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.boolean,
                    hidden: false,
                    displayName: functionStrings.rasterFunctions.rfxArgs.dimensionlessName,
                    defaultValue: false,
                    helpTextID: "multidimensionalfilter_dimensionless"
                }
            },
            editorArgumentOverride: {
                active: true,
                overrides: [
                    {
                        argumentNames: ["Dimensionless"],
                        triggerArguments: ["Raster", "Filter"],
                        widget: {
                            path: "rfx-cte-dimensionless-editor"
                        }
                    }
                ]
            }
        },
        DetectChangeFunction: {
            name: functionStrings.rasterFunctions.rfx.detectChangeName,
            snippet: functionStrings.rasterFunctions.rfx.detectChangeSnip,
            description: functionStrings.rasterFunctions.rfx.detectChangeDesc,
            category: "analysis",
            icon: "detectChange.png",
            helpID: "detect-change-using-change-analysis-function.htm",
            rasterFunctionArguments: {
                Raster: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.changeAnalysisRasterName,
                    hidden: false,
                    helpTextID: "detectchange_raster"
                },
                SegmentDate: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.long,
                    displayName: functionStrings.rasterFunctions.rfxArgs.segmentDate,
                    hidden: false,
                    defaultValue: 0,
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.esriSegmentDate
                    },
                    helpTextID: "detectchange_segmentdate"
                },
                ChangeDirection: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.long,
                    hidden: false,
                    displayName: functionStrings.rasterFunctions.rfxArgs.changeDirectionName,
                    defaultValue: 0,
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.esriChangeDirection
                    },
                    helpTextID: "detectchange_changedirection"
                },
                ChangeType: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.long,
                    hidden: false,
                    displayName: functionStrings.rasterFunctions.rfxArgs.changeTypeName,
                    defaultValue: 0,
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.esriDetectChangeTypes
                    },
                    editorStateTrigger: {
                        active: true,
                        triggers: [
                            {
                                values: [3],
                                active: [],
                                inactive: ["MaxNumberChanges", "SegmentDate"],
                                autoRevert: true
                            }
                        ]
                    },
                    helpTextID: "detectchange_changetype"
                },
                MaxNumberChanges: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.long,
                    hidden: false,
                    displayName: functionStrings.rasterFunctions.rfxArgs.maxNumChangesName,
                    defaultValue: 1,
                    helpTextID: "detectchange_maxnumberchanges"
                },
                FilterByYear: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.boolean,
                    categoryRefId: "rfxArgCat_FilterByAttributes",
                    hidden: false,
                    displayName: functionStrings.rasterFunctions.rfxArgs.filterByYear,
                    defaultValue: false,
                    editorStateTrigger: {
                        active: true,
                        triggers: [
                            {
                                values: [true],
                                active: ["MinimumYear", "MaximumYear"],
                                inactive: [],
                                autoRevert: true
                            }
                        ]
                    },
                    helpTextID: "detectchange_filterbyyear"
                },
                MinimumYear: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.long,
                    categoryRefId: "rfxArgCat_FilterByAttributes",
                    hidden: false,
                    defaultValue: 0,
                    displayName: functionStrings.rasterFunctions.rfxArgs.minimumYear
                },
                MaximumYear: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.long,
                    categoryRefId: "rfxArgCat_FilterByAttributes",
                    hidden: false,
                    defaultValue: 0,
                    displayName: functionStrings.rasterFunctions.rfxArgs.maximumYear
                },
                FilterByDuration: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.boolean,
                    categoryRefId: "rfxArgCat_FilterByAttributes",
                    hidden: false,
                    displayName: functionStrings.rasterFunctions.rfxArgs.filterByDuration,
                    defaultValue: false,
                    editorStateTrigger: {
                        active: true,
                        triggers: [
                            {
                                values: [true],
                                active: ["MinimumDuration", "MaximumDuration"],
                                inactive: [],
                                autoRevert: true
                            }
                        ]
                    },
                    helpTextID: "detectchange_filterbyduration"
                },
                MinimumDuration: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.double,
                    categoryRefId: "rfxArgCat_FilterByAttributes",
                    hidden: false,
                    displayName: functionStrings.rasterFunctions.rfxArgs.minimumDuration
                },
                MaximumDuration: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.double,
                    categoryRefId: "rfxArgCat_FilterByAttributes",
                    hidden: false,
                    displayName: functionStrings.rasterFunctions.rfxArgs.maximumDuration
                },
                FilterByMagnitude: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.boolean,
                    categoryRefId: "rfxArgCat_FilterByAttributes",
                    hidden: false,
                    displayName: functionStrings.rasterFunctions.rfxArgs.filterByMagnitude,
                    defaultValue: false,
                    editorStateTrigger: {
                        active: true,
                        triggers: [
                            {
                                values: [true],
                                active: ["MinimumMagnitude", "MaximumMagnitude"],
                                inactive: [],
                                autoRevert: true
                            }
                        ]
                    },
                    helpTextID: "detectchange_filterbymagnitude"
                },
                MinimumMagnitude: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.double,
                    categoryRefId: "rfxArgCat_FilterByAttributes",
                    hidden: false,
                    displayName: functionStrings.rasterFunctions.rfxArgs.minimumMagnitude
                },
                MaximumMagnitude: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.double,
                    categoryRefId: "rfxArgCat_FilterByAttributes",
                    hidden: false,
                    displayName: functionStrings.rasterFunctions.rfxArgs.maximumMagnitude
                },
                FilterByStartValue: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.boolean,
                    categoryRefId: "rfxArgCat_FilterByAttributes",
                    hidden: false,
                    displayName: functionStrings.rasterFunctions.rfxArgs.filterByStartValue,
                    defaultValue: false,
                    editorStateTrigger: {
                        active: true,
                        triggers: [
                            {
                                values: [true],
                                active: ["MinimumStartValue", "MaximumStartValue"],
                                inactive: [],
                                autoRevert: true
                            }
                        ]
                    },
                    helpTextID: "detectchange_filterbystartvalue"
                },
                MinimumStartValue: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.double,
                    categoryRefId: "rfxArgCat_FilterByAttributes",
                    hidden: false,
                    displayName: functionStrings.rasterFunctions.rfxArgs.minimumStartValue
                },
                MaximumStartValue: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.double,
                    categoryRefId: "rfxArgCat_FilterByAttributes",
                    hidden: false,
                    displayName: functionStrings.rasterFunctions.rfxArgs.maximumStartValue
                },
                FilterByEndValue: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.boolean,
                    categoryRefId: "rfxArgCat_FilterByAttributes",
                    hidden: false,
                    displayName: functionStrings.rasterFunctions.rfxArgs.filterByEndValue,
                    defaultValue: false,
                    editorStateTrigger: {
                        active: true,
                        triggers: [
                            {
                                values: [true],
                                active: ["MinimumEndValue", "MaximumEndValue"],
                                inactive: [],
                                autoRevert: true
                            }
                        ]
                    },
                    helpTextID: "detectchange_filterbyendvalue"
                },
                MinimumEndValue: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.double,
                    categoryRefId: "rfxArgCat_FilterByAttributes",
                    hidden: false,
                    displayName: functionStrings.rasterFunctions.rfxArgs.minimumEndValue
                },
                MaximumEndValue: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.double,
                    categoryRefId: "rfxArgCat_FilterByAttributes",
                    hidden: false,
                    displayName: functionStrings.rasterFunctions.rfxArgs.maximumEndValue
                },
                changeAnalysisType: {
                    required: false,
                    hidden: true,
                    isPseudoArg: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    editorStateTrigger: {
                        active: true,
                        triggers: [
                            {
                                inactive: [
                                    "SegmentDate",
                                    "ChangeDirection",
                                    "FilterByDuration",
                                    "MinimumDuration",
                                    "MaximumDuration",
                                    "FilterByMagnitude",
                                    "MinimumMagnitude",
                                    "MaximumMagnitude",
                                    "FilterByStartValue",
                                    "MinimumStartValue",
                                    "MaximumStartValue",
                                    "FilterByEndValue",
                                    "MinimumEndValue",
                                    "MaximumEndValue"
                                ],
                                autoRevert: true,
                                values: ["CCDC"]
                            }
                        ]
                    }
                }
            },
            editorArgumentOverride: {
                active: true,
                overrides: [
                    {
                        argumentNames: ["ChangeType", "changeAnalysisType"],
                        triggerArguments: ["Raster"],
                        widget: {
                            path: "rfx-cte-detect-change-type-picker"
                        },
                        helpTextIDs: {
                            detectchange_changetype: "detectchange_changetype"
                        }
                    }
                ]
            }
        },
        TrendToRGBFunction: {
            name: functionStrings.rasterFunctions.rfx.trendToRGBName,
            snippet: functionStrings.rasterFunctions.rfx.trendToRGBSnip,
            description: functionStrings.rasterFunctions.rfx.trendToRGBDesc,
            category: "conversion",
            icon: "trendToRGB.png",
            helpID: "trend-to-rgb-function.htm",
            rasterFunctionArguments: {
                Raster: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.rasterName,
                    hidden: false,
                    helpTextID: "trendtorgb_raster"
                },
                ModelType: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.long,
                    hidden: false,
                    displayName: functionStrings.rasterFunctions.rfxArgs.modelTypeName,
                    defaultValue: 0,
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.esriRenderTrendTypes
                    },
                    helpTextID: "trendtorgb_modeltype"
                }
            }
        },
        ComputeChangeFunction: {
            name: functionStrings.rasterFunctions.rfx.computeChangeName,
            snippet: functionStrings.rasterFunctions.rfx.computeChangeSnip,
            description: functionStrings.rasterFunctions.rfx.computeChangeDesc,
            category: "analysis",
            icon: "computeChange.png",
            helpID: "compute-change-function.htm",
            rasterFunctionArguments: {
                Raster: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.fromRasterName,
                    hidden: false,
                    helpTextID: "computechange_raster"
                },
                Raster2: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.toRasterName,
                    hidden: false,
                    helpTextID: "computechange_raster2"
                },
                Method: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.long,
                    hidden: false,
                    displayName: functionStrings.rasterFunctions.rfxArgs.computeChangeMethod,
                    defaultValue: 0,
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.esriComputeChangeMethods
                    },
                    editorStateTrigger: {
                        active: true,
                        triggers: [
                            {
                                values: [2],
                                active: [
                                    "FromClassValues",
                                    "ToClassValues",
                                    "FromClassNameFieldName",
                                    "ToClassNameFieldName",
                                    "KeepMethod",
                                    "UseColorMethod"
                                ],
                                inactive: [],
                                autoRevert: true
                            }
                        ]
                    },
                    helpTextID: "computechange_method"
                },
                FromClassValues: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.longArray,
                    hidden: false,
                    displayName: functionStrings.rasterFunctions.rfxArgs.fromClassValues,
                    helpTextID: "computechange_fromclassvalues"
                },
                ToClassValues: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.longArray,
                    hidden: false,
                    displayName: functionStrings.rasterFunctions.rfxArgs.toClassValues,
                    helpTextID: "computechange_toclassvalues"
                },
                FromClassNameFieldName: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: false,
                    displayName: functionStrings.rasterFunctions.rfxArgs.fromClassNameFieldName,
                    helpTextID: "computechange_fromclassnamefieldname"
                },
                ToClassNameFieldName: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: false,
                    displayName: functionStrings.rasterFunctions.rfxArgs.toClassNameFieldName,
                    helpTextID: "computechange_toclassnamefieldname"
                },
                KeepMethod: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.long,
                    hidden: false,
                    displayName: functionStrings.rasterFunctions.rfxArgs.keepMethod,
                    defaultValue: 1,
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.esriComputeChangeKeepMethods
                    },
                    helpTextID: "computechange_keepmethod"
                },
                UseColorMethod: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.long,
                    hidden: false,
                    displayName: functionStrings.rasterFunctions.rfxArgs.useColorMethod,
                    defaultValue: 0,
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.esriComputeChangeUseColorMethods
                    },
                    helpTextID: "computechange_usecolormethod"
                },
                CellsizeType: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.long,
                    hidden: false,
                    displayName: functionStrings.rasterFunctions.rfxArgs.cellsizeTypeName,
                    defaultValue: 2,
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.esriCellsizeTypes
                    },
                    helpTextID: "computechange_cellsizetype"
                },
                ExtentType: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.long,
                    hidden: false,
                    displayName: functionStrings.rasterFunctions.rfxArgs.extentTypeName,
                    defaultValue: 1,
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.esriExtentTypes
                    },
                    helpTextID: "computechange_extenttype"
                }
            }
        },
        CCDCFunction: {
            name: functionStrings.rasterFunctions.rfx.ccdcName,
            snippet: functionStrings.rasterFunctions.rfx.ccdcSnip,
            description: functionStrings.rasterFunctions.rfx.ccdcDesc,
            category: "analysis",
            icon: "ccdc.png",
            helpID: "ccdc-analysis-function.htm",
            rasterFunctionArguments: {
                Raster: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.rasterName,
                    hidden: false,
                    helpTextID: "ccdc_raster"
                },
                BandIDs: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.longArray,
                    displayName: functionStrings.rasterFunctions.rfxArgs.detectChangeBands,
                    hidden: false,
                    helpTextID: "ccdc_bandids"
                },
                TmaskBandIDs: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.longArray,
                    displayName: functionStrings.rasterFunctions.rfxArgs.tmaskBands,
                    hidden: false,
                    helpTextID: "ccdc_tmaskbandids"
                },
                ChiSquareProb: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.double,
                    displayName: functionStrings.rasterFunctions.rfxArgs.chiSquaredThreshold,
                    hidden: false,
                    defaultValue: 0.99,
                    helpTextID: "ccdc_chisquareprob"
                },
                MinNumberAnomaly: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.long,
                    displayName: functionStrings.rasterFunctions.rfxArgs.minAnomaly,
                    hidden: false,
                    defaultValue: 6,
                    helpTextID: "ccdc_minnumberanomaly"
                },
                UpdatingFrequency: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.long,
                    displayName: functionStrings.rasterFunctions.rfxArgs.updatingFrequency,
                    hidden: false,
                    defaultValue: 1,
                    helpTextID: "ccdc_updatingfrequency"
                }
            }
        },
        OptimalPathAsRaster: {
            name: functionStrings.rasterFunctions.rfx.optimalPathAsRasterName,
            snippet: functionStrings.rasterFunctions.rfx.optimalPathAsRasterSnip,
            description: functionStrings.rasterFunctions.rfx.optimalPathAsRasterDesc,
            category: "distance",
            icon: "optimalPathAsRaster.png",
            helpID: "optimal-path-as-raster.htm",
            rasterFunctionArguments: {
                ToolName: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: true,
                    defaultValue: "OptimalPathAsRaster_sa"
                },
                PrimaryInputParameterName: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: true,
                    defaultValue: "in_destination_data"
                },
                OutputRasterParameterName: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: true,
                    defaultValue: "out_path_accumulation_raster"
                },
                in_destination_data: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.destinationDataName,
                    hidden: false,
                    helpTextID: "optimalpathasraster_indestinationdata"
                },
                destination_field: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.destinationFieldName,
                    hidden: false,
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.fields,
                        argumentName: "in_destination_data"
                    },
                    helpTextID: "optimalpathasraster_destinationfield"
                },
                in_distance_accumulation_raster: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.distanceAccumulationRasterName,
                    hidden: false,
                    helpTextID: "optimalpathasraster_indistanceaccumulationraster"
                },
                in_back_direction_raster: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.costBackdirectionRasterName,
                    hidden: false,
                    helpTextID: "optimalpathasraster_inbackdirectionraster"
                },
                path_type: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: false,
                    displayName: functionStrings.rasterFunctions.rfxArgs.pathTypeName,
                    defaultValue: "EACH_ZONE",
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.gpsaLeastCostPathTypes
                    },
                    helpTextID: "optimalpathasraster_pathtype"
                }
            }
        },
        RasterCollectionFunction: {
            name: functionStrings.rasterFunctions.rfx.rasterCollectionName,
            snippet: functionStrings.rasterFunctions.rfx.rasterCollectionSnip,
            description: functionStrings.rasterFunctions.rfx.rasterCollectionDesc,
            category: "analysis",
            icon: "rasterCollection.png",
            helpID: "process-raster-collection.htm",
            // hidden: true,
            rasterFunctionArguments: {
                RasterCollection: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.rasterName,
                    hidden: false,
                    helpTextID: "rastercollection_rastercollection"
                },
                ItemFunction: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.rfxtemplate,
                    displayName: functionStrings.rasterFunctions.rfxArgs.itemFunctionName,
                    hidden: false,
                    helpTextID: "rastercollection_itemfunction"
                },
                AggregationFunction: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.rfxtemplate,
                    displayName: functionStrings.rasterFunctions.rfxArgs.aggregationFunctionName,
                    hidden: false,
                    helpTextID: "rastercollection_aggregationfunction"
                },
                ProcessingFunction: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.rfxtemplate,
                    displayName: functionStrings.rasterFunctions.rfxArgs.processingFunctionName,
                    hidden: false,
                    helpTextID: "rastercollection_processingfunction"
                },
                WhereClause: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.whereClauseName,
                    hidden: true
                },
                AggregationDefinition: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.dimensionName,
                    hidden: false,
                    categoryRefId: "rfxArgCat_AggregationDef",
                    helpTextID: "rastercollection_dimension",
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.aggregationdef,
                        argumentName: "RasterCollection",
                        helpTextIDs: {
                            maximumvalue: "rastercollection_maximumvalue",
                            minimumvalue: "rastercollection_minimumvalue",
                            keywordinterval: "rastercollection_keywordinterval",
                            type: "rastercollection_type",
                            unit: "rastercollection_unit",
                            valueinterval: "rastercollection_valueinterval",
                            dimension: "rastercollection_dimension"
                        }
                    }
                },
                QueryGeometry: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.geometry,
                    displayName: functionStrings.rasterFunctions.rfxArgs.queryGeometryName,
                    hidden: true
                }
            }
        },
        LandTrendrFunction: {
            name: functionStrings.rasterFunctions.rfx.landTrendrName,
            snippet: functionStrings.rasterFunctions.rfx.landTrendrSnip,
            description: functionStrings.rasterFunctions.rfx.landTrendrDesc,
            category: "analysis",
            icon: "landTrendr.png",
            helpID: "landtrendr-analysis.htm",
            rasterFunctionArguments: {
                Raster: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.rasterName,
                    hidden: false,
                    helpTextID: "landtrendr_raster"
                },
                ProcessingBand: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.processingBandName,
                    hidden: false,
                    defaultValue: "Band_1",
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.bandName,
                        argumentName: "Raster"
                    },
                    helpTextID: "landtrendr_processingband"
                },
                SnappingDate: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.snappingDate,
                    hidden: false,
                    defaultValue: "06-30",
                    helpTextID: "landtrendr_snappingdate"
                },
                MaxSegments: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.long,
                    displayName: functionStrings.rasterFunctions.rfxArgs.maxNumSegments,
                    hidden: false,
                    defaultValue: 5,
                    helpTextID: "landtrendr_maxsegments"
                },
                VertexCountOvershoot: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.long,
                    displayName: functionStrings.rasterFunctions.rfxArgs.vertexCountOvershoot,
                    hidden: false,
                    defaultValue: 2,
                    helpTextID: "landtrendr_vertexcountovershoot"
                },
                SpikeThreshold: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.double,
                    displayName: functionStrings.rasterFunctions.rfxArgs.spikeThreshold,
                    hidden: false,
                    defaultValue: 0.9,
                    helpTextID: "landtrendr_spikethreshold"
                },
                RecoveryThreshold: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.double,
                    displayName: functionStrings.rasterFunctions.rfxArgs.recoveryThreshold,
                    hidden: false,
                    defaultValue: 0.25,
                    helpTextID: "landtrendr_recoverythreshold"
                },
                MinObs: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.long,
                    displayName: functionStrings.rasterFunctions.rfxArgs.minNumObs,
                    hidden: false,
                    defaultValue: 6,
                    helpTextID: "landtrendr_minobs"
                },
                PValueThreshold: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.double,
                    displayName: functionStrings.rasterFunctions.rfxArgs.pValueThreshold,
                    hidden: false,
                    defaultValue: 0.01,
                    helpTextID: "landtrendr_pvaluethreshold"
                },
                BestModelProportion: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.double,
                    displayName: functionStrings.rasterFunctions.rfxArgs.bestModelProportion,
                    hidden: false,
                    defaultValue: 1.25,
                    helpTextID: "landtrendr_bestmodelproportion"
                },
                PreventOneYearRecovery: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.boolean,
                    displayName: functionStrings.rasterFunctions.rfxArgs.preventOneYearRecovery,
                    hidden: false,
                    defaultValue: true,
                    helpTextID: "landtrendr_preventoneyearrecovery"
                },
                RecoveryIncreaseTrend: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.boolean,
                    displayName: functionStrings.rasterFunctions.rfxArgs.recoveryIncreaseTrend,
                    hidden: false,
                    defaultValue: true,
                    helpTextID: "landtrendr_recoveryincreasetrend"
                },
                OutputOtherBands: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.boolean,
                    displayName: functionStrings.rasterFunctions.rfxArgs.outputOtherBands,
                    hidden: false,
                    defaultValue: false,
                    helpTextID: "landtrendr_outputotherbands"
                }
            }
        },
        MergeRastersFunction: {
            name: functionStrings.rasterFunctions.rfx.mergeRastersName,
            snippet: functionStrings.rasterFunctions.rfx.mergeRastersSnip,
            description: functionStrings.rasterFunctions.rfx.mergeRastersDesc,
            category: "dataManagement",
            icon: "mergeRasters.png",
            helpID: "merge-raster-function.htm",
            rasterFunctionArguments: {
                Rasters: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.rasterArray,
                    displayName: functionStrings.rasterFunctions.rfxArgs.rastersName,
                    hidden: false,
                    helpTextID: "mergerasters_rasters"
                },
                mosaicOperator: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.resolveOverlapMethodName,
                    hidden: false,
                    defaultValue: "MT_FIRST",
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.esriResolveOverlapMethods
                    },
                    helpTextID: "mergerasters_mosaicoperator"
                }
            }
        },
        PredictUsingRegressionFunction: {
            name: functionStrings.rasterFunctions.rfx.predictUsingRegressionName,
            snippet: functionStrings.rasterFunctions.rfx.predictUsingRegressionSnip,
            description: functionStrings.rasterFunctions.rfx.predictUsingRegressionDesc,
            category: "classification",
            icon: "predictUsingRegression.png",
            helpID: "predict-using-regression.htm",
            rasterFunctionArguments: {
                Rasters: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.rasterArray,
                    displayName: functionStrings.rasterFunctions.rfxArgs.rastersName,
                    hidden: false,
                    helpTextID: "predictusingregression_rasters"
                },
                RegressionDefinitionFile: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.file,
                    fileExtSupported: ["ecd"],
                    displayName: functionStrings.rasterFunctions.rfxArgs.inputDefinitionFileName,
                    hidden: false,
                    helpTextID: "predictusingregression_regressiondefinitionfile"
                }
            }
        },
        DimensionalMovingStatisticsFunction: {
            name: functionStrings.rasterFunctions.rfx.dimensionalMovingStatisticsName,
            snippet: functionStrings.rasterFunctions.rfx.dimensionalMovingStatisticsSnip,
            description: functionStrings.rasterFunctions.rfx.dimensionalMovingStatisticsDesc,
            category: "statistical",
            icon: "dimensionalMovingStatistics.png",
            helpID: "dimensional-moving-statistics.htm",
            rasterFunctionArguments: {
                Raster: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.rasterName,
                    hidden: false,
                    helpTextID: "dimensionalmovingstatistics_raster"
                },
                Dimension: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.dimensionName,
                    hidden: false,
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.rasterDimensions,
                        argumentName: "Raster"
                    },
                    helpTextID: "dimensionalmovingstatistics_dimension"
                },
                BackwardWindow: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.long,
                    displayName: functionStrings.rasterFunctions.rfxArgs.backwardWindowName,
                    defaultValue: 1,
                    hidden: false,
                    helpTextID: "dimensionalmovingstatistics_backwardwindow"
                },
                ForwardWindow: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.long,
                    displayName: functionStrings.rasterFunctions.rfxArgs.forwardWindowName,
                    defaultValue: 1,
                    hidden: false,
                    helpTextID: "dimensionalmovingstatistics_forwardwindow"
                },
                NoDataHandling: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.long,
                    displayName: functionStrings.rasterFunctions.rfxArgs.noDataHandlingName,
                    defaultValue: -1,
                    hidden: false,
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.esriGANoDataHandling
                    },
                    helpTextID: "dimensionalmovingstatistics_nodatahandling"
                },
                StatisticsType: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.long,
                    displayName: functionStrings.rasterFunctions.rfxArgs.statisticsTypeName,
                    defaultValue: 3,
                    hidden: false,
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.esriGADimensionalMovingStatisticsTypes
                    },
                    editorStateTrigger: {
                        active: true,
                        triggers: [
                            {
                                values: [12],
                                active: ["PercentileValue"],
                                inactive: [],
                                autoRevert: true
                            },
                            {
                                values: [4, 12],
                                active: ["PercentileInterpolationType"],
                                inactive: [],
                                autoRevert: true
                            },
                            {
                                values: [13],
                                active: ["CircularWrapValue"],
                                inactive: [],
                                autoRevert: true
                            }
                        ]
                    },
                    helpTextID: "dimensionalmovingstatistics_statisticstype"
                },
                PercentileValue: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.double,
                    displayName: functionStrings.rasterFunctions.rfxArgs.percentileValue,
                    hidden: false,
                    defaultValue: 90,
                    helpTextID: "dimensionalmovingstatistics_percentilevalue"
                },
                PercentileInterpolationType: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.percentileInterpolationType,
                    hidden: false,
                    defaultValue: "AUTO_DETECT",
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.gpsaZonalPercentileInterpolationTypes
                    },
                    helpTextID: "dimensionalmovingstatistics_percentileinterpolationtype"
                },
                CircularWrapValue: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.double,
                    displayName: functionStrings.rasterFunctions.rfxArgs.circularWrapValueName,
                    defaultValue: 360,
                    hidden: false,
                    helpTextID: "dimensionalmovingstatistics_circularwrapvalue"
                }
            },
            editorArgumentOverride: {
                active: true,
                overrides: [
                    {
                        argumentNames: ["PercentileValue"],
                        triggerAttributes: "minValue:0;maxValue:100",
                        widget: {
                            path: "rfx-cte-ranged-value-editor"
                        }
                    }
                ]
            }
        },
        InterpolateRasterByDimensionFunction: {
            name: functionStrings.rasterFunctions.rfx.interpolateRasterByDimensionFunctionName,
            snippet: functionStrings.rasterFunctions.rfx.interpolateRasterByDimensionFunctionSnip,
            description: functionStrings.rasterFunctions.rfx.interpolateRasterByDimensionFunctionDesc,
            category: "dataManagement",
            icon: "interpolateRasterByDimensionFunction.png",
            helpID: "interpolate-raster-by-dimension.htm",
            rasterFunctionArguments: {
                Raster: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.rasterName,
                    hidden: false,
                    helpTextID: "interpolaterasterbydimension_raster"
                },
                DimensionDefinition: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: false,
                    displayName: functionStrings.rasterFunctions.rfxArgs.variableName,
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.mdimdef,
                        attributes: "interpolateByDim",
                        argumentName: "Raster",
                        helpTextIDs: {
                            variables: "interpolaterasterbydimension_variables",
                            dimension: "interpolaterasterbydimension_dimension",
                            dimensiondefinition: "interpolaterasterbydimension_dimensiondefinition",
                            values: "interpolaterasterbydimension_values",
                            startof: "interpolaterasterbydimension_startofinterval",
                            endof: "interpolaterasterbydimension_endofinterval",
                            step: "interpolaterasterbydimension_step",
                            unit: "interpolaterasterbydimension_unit",
                            targetraster: "interpolaterasterbydimension_targetraster"
                        }
                    },
                    helpTextID: "interpolaterasterbydimension_variables"
                },
                InterpolationMethod: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.long,
                    displayName: functionStrings.rasterFunctions.rfxArgs.interpolationMethodName,
                    hidden: false,
                    defaultValue: 0,
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.esriInterpolateByDimMethods
                    },
                    helpTextID: "interpolaterasterbydimension_interpolationmethod"
                },
                IgnoreNoData: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.boolean,
                    displayName: functionStrings.rasterFunctions.rfxArgs.ignoreNoDataName,
                    hidden: false,
                    defaultValue: false,
                    helpTextID: "interpolaterasterbydimension_ignorenodata"
                }
            }
        },
        TerrainFlattenFunction: {
            name: functionStrings.rasterFunctions.rfx.terrainFlattenFunctionName,
            snippet: functionStrings.rasterFunctions.rfx.terrainFlattenFunctionSnip,
            description: functionStrings.rasterFunctions.rfx.terrainFlattenFunctionDesc,
            category: "SAR",
            icon: "terrainFlatten.png",
            helpID: "terrain-flatten-function.htm",
            hidden: true,
            rasterFunctionArguments: {
                Raster: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.rasterName,
                    hidden: false,
                    helpTextID: "terrainflatten_raster"
                },
                DEM: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    hidden: false,
                    displayName: functionStrings.rasterFunctions.rfxArgs.DEMName,
                    helpTextID: "terrainflatten_dem"
                },
                CorrectGeoid: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.boolean,
                    displayName: functionStrings.rasterFunctions.rfxArgs.geoIdName,
                    hidden: false,
                    defaultValue: true,
                    helpTextID: "terrainflatten_correctgeoid"
                },
                CalibrationType: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.long,
                    displayName: functionStrings.rasterFunctions.rfxArgs.calibrationTypeName,
                    hidden: false,
                    defaultValue: 0,
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.esriFlattenCalibrationTypes
                    },
                    helpTextID: "terrainflatten_calibrationtype"
                }
            }
        },
        CreateColorCompositeFunction: {
            name: functionStrings.rasterFunctions.rfx.createColorCompositeFunctionName,
            snippet: functionStrings.rasterFunctions.rfx.createColorCompositeFunctionSnip,
            description: functionStrings.rasterFunctions.rfx.createColorCompositeFunctionDesc,
            category: "dataManagement",
            icon: "createColorComposite.png",
            helpID: "create-color-composite-function.htm",
            rasterFunctionArguments: {
                Raster: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.rasterName,
                    hidden: false,
                    helpTextID: "createcolorcomposite_raster"
                },
                Method: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.long,
                    hidden: false,
                    displayName: functionStrings.rasterFunctions.rfxArgs.methodName,
                    defaultValue: 2,
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.bandCompositeMethods
                    },
                    helpTextID: "createcolorcomposite_method"
                },
                BandIndexesR: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.bandIndexesR,
                    hidden: false,
                    helpTextID: "createcolorcomposite_bandindexesr"
                },
                BandIndexesG: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.bandIndexesG,
                    hidden: false,
                    helpTextID: "createcolorcomposite_bandindexesg"
                },
                BandIndexesB: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.bandIndexesB,
                    hidden: false,
                    helpTextID: "createcolorcomposite_bandindexesb"
                }
            }
        },
        SurfaceParamFunction: {
            name: functionStrings.rasterFunctions.rfx.surfaceParametersName,
            snippet: functionStrings.rasterFunctions.rfx.surfaceParametersSnip,
            description: functionStrings.rasterFunctions.rfx.surfaceParametersDesc,
            category: "surface",
            icon: "surfaceParameters.png",
            helpID: "surface-parameters-function.htm",
            rasterFunctionArguments: {
                Raster: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.rasterName,
                    hidden: false,
                    helpTextID: "surfaceparam_raster"
                },
                SurfaceCalculation: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.long,
                    hidden: false,
                    displayName: functionStrings.rasterFunctions.rfxArgs.surfaceParameterType,
                    defaultValue: 4,
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.esriSurfaceParameterType
                    },
                    editorStateTrigger: {
                        active: true,
                        triggers: [
                            {
                                values: [4],
                                active: ["SlopeType"],
                                inactive: ["ProjectAzimuths", "UseEquatorialAspect"],
                                autoRevert: false
                            },
                            {
                                values: [5],
                                active: ["ProjectAzimuths", "UseEquatorialAspect"],
                                inactive: ["SlopeType"],
                                autoRevert: false
                            },
                            {
                                values: [1],
                                inactive: ["SlopeType", "ProjectAzimuths", "UseEquatorialAspect"]
                            },
                            {
                                values: [2],
                                inactive: ["SlopeType", "ProjectAzimuths", "UseEquatorialAspect"],
                                autoRevert: false
                            },
                            {
                                values: [3],
                                inactive: ["SlopeType", "ProjectAzimuths", "UseEquatorialAspect"],
                                autoRevert: false
                            },
                            {
                                values: [6],
                                inactive: ["SlopeType", "ProjectAzimuths", "UseEquatorialAspect"],
                                autoRevert: false
                            },
                            {
                                values: [7],
                                inactive: ["SlopeType", "ProjectAzimuths", "UseEquatorialAspect"],
                                autoRevert: false
                            },
                            {
                                values: [8],
                                inactive: ["SlopeType", "ProjectAzimuths", "UseEquatorialAspect"],
                                autoRevert: false
                            },
                            {
                                values: [9],
                                inactive: ["SlopeType", "ProjectAzimuths", "UseEquatorialAspect"],
                                autoRevert: false
                            }
                        ]
                    },
                    helpTextID: "surfaceparam_surfacecalculation"
                },
                LocalSurface: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.long,
                    hidden: false,
                    displayName: functionStrings.rasterFunctions.rfxArgs.localSurfaceType,
                    defaultValue: 1,
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.esriLocalSurfaceType
                    },
                    helpTextID: "surfaceparam_localsurface"
                },
                AnalysisScaleWithUnits: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.neighborhoodDistance,
                    hidden: false,
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.linearUnit,
                        enum: enums.gpsaLinearUnitTypes
                    },
                    defaultValue: "1 Meters",
                    helpTextID: "surfaceparam_analysisscalewithunits"
                },
                UseAdaptiveScale: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.boolean,
                    displayName: functionStrings.rasterFunctions.rfxArgs.useAdaptiveNeighborhood,
                    hidden: false,
                    defaultValue: false,
                    helpTextID: "surfaceparam_useadaptivescale"
                },
                ZUnit: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: false,
                    displayName: functionStrings.rasterFunctions.rfxArgs.zUnit,
                    defaultValue: "Meters",
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.gpsaLinearUnitTypes
                    },
                    helpTextID: "surfaceparam_zunit"
                },
                SlopeType: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.long,
                    hidden: false,
                    displayName: functionStrings.rasterFunctions.rfxArgs.outputSlopeType,
                    defaultValue: 1,
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.outputSlopeType
                    },
                    helpTextID: "surfaceparam_slopetype"
                },
                ProjectAzimuths: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.boolean,
                    displayName: functionStrings.rasterFunctions.rfxArgs.projectAzimuths,
                    hidden: false,
                    defaultValue: false,
                    helpTextID: "surfaceparam_projectazimuths"
                },
                UseEquatorialAspect: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.boolean,
                    displayName: functionStrings.rasterFunctions.rfxArgs.useEquatorialAspect,
                    hidden: false,
                    defaultValue: false,
                    helpTextID: "surfaceparam_useequatorialaspect"
                },
                AnalysisMask: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.analysisMask,
                    hidden: false,
                    helpTextID: "surfaceparam_analysismask"
                }
            }
        },
        LeastCostCorridor: {
            name: functionStrings.rasterFunctions.rfx.leastCostCorridorName,
            snippet: functionStrings.rasterFunctions.rfx.leastCostCorridorSnip,
            description: functionStrings.rasterFunctions.rfx.leastCostCorridorDesc,
            category: "distance",
            icon: "leastCostCorridor.png",
            helpID: "least-cost-corridor-global-function.htm",
            rasterFunctionArguments: {
                ToolName: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: true,
                    defaultValue: "LeastCostCorridor_sa"
                },
                PrimaryInputParameterName: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: true,
                    defaultValue: "in_accumulative_cost_distance_raster1"
                },
                OutputRasterParameterName: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    hidden: true,
                    defaultValue: "out_raster"
                },
                in_accumulative_cost_distance_raster1: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.costDistanceRaster1,
                    hidden: false,
                    helpTextID: "leastcostcorridor_inaccumulativecostdistanceraster1"
                },
                in_back_direction_raster1: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.directionRaster1,
                    hidden: false,
                    helpTextID: "leastcostcorridor_inbackdirectionraster1"
                },
                in_accumulative_cost_distance_raster2: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.costDistanceRaster2,
                    hidden: false,
                    helpTextID: "leastcostcorridor_inaccumulativecostdistanceraster2"
                },
                in_back_direction_raster2: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.raster,
                    displayName: functionStrings.rasterFunctions.rfxArgs.directionRaster2,
                    hidden: false,
                    helpTextID: "leastcostcorridor_inbackdirectionraster2"
                },
                threshold_method: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.thresholdMethod,
                    hidden: false,
                    defaultValue: "NO_THRESHOLD",
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.esriLeastCostThresholdMethod
                    },
                    editorStateTrigger: {
                        active: true,
                        triggers: [
                            {
                                values: ["NO_THRESHOLD"],
                                active: [],
                                inactive: ["threshold"],
                                autoRevert: false
                            },
                            {
                                values: ["PERCENT_OF_LEAST_COST"],
                                active: ["threshold"],
                                inactive: [],
                                autoRevert: false
                            },
                            {
                                values: ["ACCUMULATIVE_COST"],
                                active: ["threshold"],
                                inactive: [],
                                autoRevert: false
                            }
                        ]
                    },
                    helpTextID: "leastcostcorridor_thresholdmethod"
                },
                threshold: {
                    required: false,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.double,
                    displayName: functionStrings.rasterFunctions.rfxArgs.threshold,
                    hidden: false,
                    helpTextID: "leastcostcorridor_threshold"
                }
            }
        },
        GeometricMedianFunction: {
            name: functionStrings.rasterFunctions.rfx.geometricMedianName,
            snippet: functionStrings.rasterFunctions.rfx.geometricMedianSnip,
            description: functionStrings.rasterFunctions.rfx.geometricMedianDesc,
            category: "dataManagement",
            icon: "geometricMedian.png",
            helpID: "geometric-median-function.htm",
            rasterFunctionArguments: {
                Rasters: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.rasterArray,
                    displayName: functionStrings.rasterFunctions.rfxArgs.rastersName,
                    hidden: false,
                    allowScalar: false,
                    helpTextID: "geometricmedian_rasters"
                },
                Epsilon: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.double,
                    displayName: functionStrings.rasterFunctions.rfxArgs.epsilon,
                    hidden: false,
                    defaultValue: 0.001,
                    helpTextID: "geometricmedian_epsilon"
                },
                MaxIteration: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.string,
                    displayName: functionStrings.rasterFunctions.rfxArgs.maxIterations,
                    hidden: false,
                    defaultValue: 10,
                    helpTextID: "geometricmedian_maxiteration"
                },
                CellsizeType: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.long,
                    displayName: functionStrings.rasterFunctions.rfxArgs.cellsizeTypeName,
                    hidden: false,
                    defaultValue: 2,
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.esriCellsizeTypes
                    },
                    helpTextID: "geometricmedian_cellsizetype"
                },
                ExtentType: {
                    required: true,
                    dataType: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.d.long,
                    displayName: functionStrings.rasterFunctions.rfxArgs.extentTypeName,
                    hidden: false,
                    defaultValue: 1,
                    domain: {
                        type: _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.a.list,
                        enum: enums.esriExtentTypes
                    },
                    helpTextID: "geometricmedian_extenttype"
                }
            }
        }
    };
    return schema;
}

// per operator info lookup for Local fx...
const LOCAL_RFX_OP_INFO_LUT = {
    1: { opName: "plus", category: "math", icon: "plus.png", helpID: "plus-function.htm" },
    2: { opName: "minus", category: "math", icon: "minus.png", helpID: "minus.htm" },
    3: { opName: "times", category: "math", icon: "times.png", helpID: "times-function.htm" },
    4: { opName: "squareRoot", category: "math", icon: "squareRoot.png", helpID: "square-root-function.htm" },
    5: { opName: "power", category: "math", icon: "power.png", helpID: "power-function.htm" },
    6: { opName: "aCos", category: "mathTrigonometric", icon: "aCos.png", helpID: "acos-function.htm" },
    7: { opName: "aSin", category: "mathTrigonometric", icon: "aSin.png", helpID: "asin-function.htm" },
    8: { opName: "aTan", category: "mathTrigonometric", icon: "aTan.png", helpID: "atan-function.htm" },
    9: { opName: "aTanH", category: "mathTrigonometric", icon: "aTanH.png", helpID: "atanh-function.htm" },
    10: { opName: "abs", category: "math", icon: "abs.png", helpID: "abs-function.htm" },
    11: { opName: "bitwiseAnd", category: "mathLogical", icon: "bitwiseAnd.png", helpID: "bitwise-and-function.htm" },
    12: {
        opName: "bitwiseLeftShift",
        category: "mathLogical",
        icon: "bitwiseLeftShift.png",
        helpID: "bitwise-left-shift-function.htm"
    },
    13: { opName: "bitwiseNot", category: "mathLogical", icon: "bitwiseNot.png", helpID: "bitwise-not-function.htm" },
    14: { opName: "bitwiseOr", category: "mathLogical", icon: "bitwiseOr.png", helpID: "bitwise-or-function.htm" },
    15: {
        opName: "bitwiseRightShift",
        category: "mathLogical",
        icon: "bitwiseRightShift.png",
        helpID: "bitwise-right-shift-function.htm"
    },
    16: { opName: "bitwiseXor", category: "mathLogical", icon: "bitwiseXor.png", helpID: "bitwise-xor-function.htm" },
    17: { opName: "booleanAnd", category: "mathLogical", icon: "booleanAnd.png", helpID: "boolean-and-function.htm" },
    18: { opName: "booleanNot", category: "mathLogical", icon: "booleanNot.png", helpID: "boolean-not-function.htm" },
    19: { opName: "booleanOr", category: "mathLogical", icon: "booleanOr.png", helpID: "boolean-or-function.htm" },
    20: { opName: "booleanXor", category: "mathLogical", icon: "booleanXor.png", helpID: "boolean-xor-function.htm" },
    21: { opName: "cos", category: "mathTrigonometric", icon: "cos.png", helpID: "cos-function.htm" },
    22: { opName: "cosH", category: "mathTrigonometric", icon: "cosH.png", helpID: "cosh-function.htm" },
    23: { opName: "divide", category: "math", icon: "divide.png", helpID: "divide-function.htm" },
    24: { opName: "equalTo", category: "mathLogical", icon: "equalTo.png", helpID: "equal-to-function.htm" },
    25: { opName: "exp", category: "math", icon: "exp.png", helpID: "exp-function.htm" },
    26: { opName: "exp10", category: "math", icon: "exp10.png", helpID: "exp10-function.htm" },
    27: { opName: "exp2", category: "math", icon: "exp2.png", helpID: "exp2-function.htm" },
    28: { opName: "greaterThan", category: "mathLogical", icon: "greaterThan.png", helpID: "greater-than-function.htm" },
    29: {
        opName: "greaterThanEqual",
        category: "mathLogical",
        icon: "greaterThanEqual.png",
        helpID: "greater-than-equal-function.htm"
    },
    30: { opName: "int", category: "math", icon: "int.png", helpID: "int-function.htm" },
    31: { opName: "isNull", category: "mathLogical", icon: "isNull.png", helpID: "is-null-function.htm" },
    32: { opName: "float", category: "math", icon: "float.png", helpID: "float-function.htm" },
    33: { opName: "lessThan", category: "mathLogical", icon: "lessThan.png", helpID: "less-than-function.htm" },
    34: {
        opName: "lessThanEqual",
        category: "mathLogical",
        icon: "lessThanEqual.png",
        helpID: "less-than-equal-function.htm"
    },
    35: { opName: "ln", category: "math", icon: "ln.png", helpID: "ln-function.htm" },
    36: { opName: "log10", category: "math", icon: "log10.png", helpID: "log10-function.htm" },
    37: { opName: "log2", category: "math", icon: "log2.png", helpID: "log2-function.htm" },
    44: { opName: "mod", category: "math", icon: "mod.png", helpID: "mod-function.htm" },
    45: { opName: "negate", category: "math", icon: "negate.png", helpID: "negate-function.htm" },
    46: { opName: "notEqual", category: "mathLogical", icon: "notEqual.png", helpID: "not-equal-function.htm" },
    48: { opName: "roundDown", category: "math", icon: "roundDown.png", helpID: "round-down-function.htm" },
    49: { opName: "roundUp", category: "math", icon: "roundUp.png", helpID: "round-up-function.htm" },
    50: { opName: "setNull", category: "mathConditional", icon: "setNull.png", helpID: "set-null-function.htm" },
    51: { opName: "sin", category: "mathTrigonometric", icon: "sin.png", helpID: "sin-function.htm" },
    52: { opName: "sinH", category: "mathTrigonometric", icon: "sinH.png", helpID: "sinh-function.htm" },
    53: { opName: "square", category: "math", icon: "square.png", helpID: "square-function.htm" },
    56: { opName: "tan", category: "mathTrigonometric", icon: "tan.png", helpID: "tan-function.htm" },
    57: { opName: "tanH", category: "mathTrigonometric", icon: "tanH.png", helpID: "tanh-function.htm" },
    59: { opName: "aCosH", category: "mathTrigonometric", icon: "aCosH.png", helpID: "acosh-function.htm" },
    60: { opName: "aSinH", category: "mathTrigonometric", icon: "aSinH.png", helpID: "asinh-function.htm" },
    61: { opName: "aTan2", category: "mathTrigonometric", icon: "aTan2.png", helpID: "atan2-function.htm" },
    78: { opName: "con", category: "mathConditional", icon: "con1.png", helpID: "con-function.htm" }
};

const appConfig = {
    learnMoreDocDefaultURL: "https://docuat.arcgis.com/en/arcgis-online/analyze/raster-function-template-mv-ra.htm",
    learnMoreDocBaseURL: "https://docuat.arcgis.com/en/arcgis-online/",
    learnMoreDocDefaultHelpID: "raster-function-template-mv-ra.htm",
    learnMoreDocPreviewHelpID: "#ESRI_STEP_90347DF1F2C440BDB7B4D10AABAE178B"
};

const functionTypes = {
    local: "LocalFunction",
    gpAdapter: "GPAdapterFunction",
    pythonAdapter: "PythonAdapterFunction"
};
const cellStatsOperations = [
    38, 39, 40, 41, 42, 43, 47, 54, 55, 58, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 93, 94
];
const defaultIconBasePath = "./css/images/rfx/";
let commonStrings = null;
const getRFxDefinitionProperties = {
    getPrefix: (rfxSchema, key) => {
        return key.indexOf("LocalFunction") > -1
            ? rfxSchema.name
            : (key.charAt(0).toLowerCase() + key.slice(1)).replace("Function", "");
    },
    getTitle: (rfxSchema, prefix) => {
        return commonStrings.rasterFunctions.rfx[prefix + "Name"] || rfxSchema.name || prefix;
    },
    getCategoryAndTitle: (rfxSchema) => {
        const category = rfxSchema.category || "analysis";
        return {
            category,
            categoryTitle: commonStrings.categoryNames[category]
        };
    },
    getName: (key) => {
        return key;
    },
    getSnippet: (rfxSchema, prefix) => {
        return commonStrings.rasterFunctions.rfx[prefix + "Snip"] || rfxSchema.snippet || "?...?!";
    },
    getDescription: (rfxSchema, prefix) => {
        return (commonStrings.rasterFunctions.rfx[prefix + "Desc"] || rfxSchema.description || "?...?!<div><br/>?...?!</div>");
    },
    getIcon: (rfxSchema, prefix) => {
        return defaultIconBasePath + (rfxSchema.icon || prefix + ".png");
    }
};
/**
 * Creates a RFT definition based on a RFx schema.
 *
 * @function createRFxDefinition
 * @param {RFxSchema} rfxSchema - The RFx schema object.
 * @param {string} key - The key for the RFx.
 * @param {string} [type] - The type of RFx template.
 * @param {RFxTemplate} [rftData] - The RFx template data.
 * @returns {RFTDefinition} A RFT definition object.
 */
function createRFxDefinition({ rfxSchema, key, type }) {
    const prefix = getRFxDefinitionProperties.getPrefix(rfxSchema, key);
    const rfxDef = {
        type: type || "RasterFunctionTemplate",
        title: getRFxDefinitionProperties.getTitle(rfxSchema, prefix),
        category: getRFxDefinitionProperties.getCategoryAndTitle(rfxSchema).category,
        categoryTitle: getRFxDefinitionProperties.getCategoryAndTitle(rfxSchema).categoryTitle,
        name: getRFxDefinitionProperties.getName(key),
        snippet: getRFxDefinitionProperties.getSnippet(rfxSchema, prefix),
        description: getRFxDefinitionProperties.getDescription(rfxSchema, prefix),
        icon: getRFxDefinitionProperties.getIcon(rfxSchema, prefix),
        helpID: rfxSchema.helpID || appConfig.learnMoreDocDefaultHelpID
    };
    return rfxDef;
}
/**
 * gets the function type from the function schema.
 *
 * @function getFunctionType
 * @param {RFxSchema} rfxSchema - The RFx schema object.
 * @param {string} functionName - The key for the RFx..
 * @returns {string} function type.
 */
function getFunctionType(rfxSchema, functionName) {
    const rfxArgs = rfxSchema.rasterFunctionArguments;
    let type = functionName;
    if (type === "CellStatisticsFunction") {
        type = "LocalFunction";
    }
    else if (rfxArgs) {
        if (rfxArgs.PythonModule && rfxArgs.ClassName) {
            type = "PythonAdapterFunction";
        }
        else if (rfxArgs.ToolName && rfxArgs.PrimaryInputParameterName && rfxArgs.OutputRasterParameterName) {
            type = "GPAdapterFunction";
        }
    }
    return type;
}
/**
 * Creates list of all supported functions and their definition.
 *
 * @function getFunctionsAndCategories
 * @public
 * @returns {Promise<{RFTDefinition[], string[]}>} A promise that resolves with the list of RFT definitions.
 */
async function getFunctionsAndCategories() {
    const sysRFxDefs = [];
    const sysRFxCategories = new Set();
    commonStrings = await (0,_resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.f)();
    const schema = await getSchema();
    for (const key in schema) {
        if (key === "LocalFunction") {
            const rfxSchemaCpy = (0,_arcgis_core_core_lang_js__WEBPACK_IMPORTED_MODULE_0__.clone)(schema[key]);
            const elmInfos = rfxSchemaCpy.rasterFunctionArguments.Rasters.elementInfos;
            delete rfxSchemaCpy.rasterFunctionArguments.Rasters.elementInfos;
            elmInfos.forEach((elmInfo) => {
                elmInfo.values.forEach((opCode) => {
                    const info = LOCAL_RFX_OP_INFO_LUT[opCode];
                    if (info) {
                        rfxSchemaCpy.name = info.opName;
                        rfxSchemaCpy.icon = `${info.opName}${".png"}`;
                        rfxSchemaCpy.category = info.category || "math";
                        rfxSchemaCpy.helpID = info.helpID;
                    }
                    else {
                        rfxSchemaCpy.category = "math";
                        rfxSchemaCpy.name = "";
                    }
                    sysRFxDefs.push(createRFxDefinition({ rfxSchema: rfxSchemaCpy, key: `${key}${"__"}${opCode}`, type: key }));
                    sysRFxCategories.add(rfxSchemaCpy.category);
                });
            });
        }
        else if (schema[key].hidden !== true) {
            const type = getFunctionType(schema[key], key);
            const rfxDefinition = createRFxDefinition({ rfxSchema: schema[key], key, type });
            sysRFxDefs.push(rfxDefinition);
            sysRFxCategories.add(rfxDefinition.category);
        }
    }
    // add NDVI-colorized
    sysRFxDefs.push(createRFxDefinition({
        rfxSchema: { name: "ndvi colorized", category: "analysis", helpID: "ndvi-colorized-function.htm" },
        key: "ndviColorizedFunction"
    }));
    /** commenting this for the current release as its hidden */
    // add Aggregate Multidimensional Function
    // sysRFxDefs.push(
    //   createRFxDefinition({
    //     rfxSchema: { name: "aggregate multidimensional", category: "dataManagement", helpID: "aggregate-multidimensional-function.htm" },
    //     key: "aggregateMultidimensionalFunction"
    //   })
    // );
    return {
        rfxFunctions: sysRFxDefs.sort((a, b) => a.title.localeCompare(b.title)),
        rfxCategories: [...sysRFxCategories].sort()
    };
}
/**
 * Creates a Raster Function Variable based on the given name and argument information.
 * @param {string} name - The name of the Raster Function Variable.
 * @param {object} argInfo - Information about the argument of the Raster Function Variable.
 * @returns {object} A Raster Function Variable with the following properties:
 *  name: string - The name of the Raster Function Variable.
 *  isPublic: boolean - Whether or not the variable is public.
 *  isDataset: boolean - Whether or not the variable is a dataset.
 *  value: any - The value of the variable.
 *  type: string - The type of the variable.
 */
function createRasterFunctionVariable({ name, argInfo }) {
    const rfv = {
        name: name,
        isPublic: false,
        isDataset: argInfo.dataType === "raster",
        value: argInfo.defaultValue,
        displayName: argInfo.displayName,
        type: "RasterFunctionVariable"
    };
    if (argInfo.dataType === "rasterarray") {
        rfv.value = { elements: [], type: "ArgumentArray" };
    }
    else if (rfv.value && argInfo.dataType === "rasterinfo") {
        rfv.value.type = "RasterInfo";
    }
    return rfv;
}
/**
 * Builds a raster function template (RFT) from a raster function schema (RFxSchema).
 * @param {string} type - The type of RFT to create (e.g. "LocalFunction").
 * @param {RFxSchema} rfxSchema - The RFxSchema to use for building the RFT.
 * @returns {RFxTemplate} The resulting RFT.
 */
function buildRFTFromRFxSchema({ type, rfxSchema }) {
    const rfx = {
        type: type,
        pixelType: "Unknown",
        name: rfxSchema.name || type,
        description: rfxSchema.snippet || ""
    };
    const rfxArgs = {};
    let rfxArg;
    const args = rfxSchema.rasterFunctionArguments;
    for (const key in args) {
        rfxArg = createRasterFunctionVariable({ name: key, argInfo: args[key] });
        rfxArgs[key] = rfxArg;
    }
    if (type === "LocalFunction" && rfxSchema.NRasters) {
        const argInfo = { dataType: "raster" };
        const rastersArg = rfxArgs.Rasters;
        rastersArg.name = "_Rasters";
        for (let i = 0; i < rfxSchema.NRasters; ++i) {
            rastersArg.value.elements.push(createRasterFunctionVariable({ name: i == 0 ? "Raster" : i == 1 ? "InRaster2" : "InRaster3", argInfo }));
        }
    }
    if (Object.keys(rfxArgs).length > 1 || rfxSchema.hasArgumentsObject) {
        rfxArgs.type = type + "Arguments";
    }
    if (type === "TableFunction" && rfxArgs && rfxArgs.AttributeTableAsRecordSet) {
        delete rfxArgs.AttributeTableAsRecordSet;
    }
    return {
        name: rfx.name,
        description: rfx.description,
        function: rfx,
        arguments: rfxArgs.type ? rfxArgs : rfxArg,
        functionType: 0,
        thumbnail: "",
        thumbnailEx: "",
        help: ""
    };
}
/**
 * @private
 * Retrieves a function schema of the local function with the operatinal code.
 * @param {string} functionName - The name of the function to get the template for.
 * @param {HashMap<RFxSchema>} schema - the entire schema of the functions
 * @returns {RFxSchema} schema of a particular local function
 */
function getLocalFunctionSchema(functionName, schema) {
    const opCode = Number.parseInt(functionName.split("__")[1], 10);
    const rfxSchema = schema.LocalFunction;
    rfxSchema.NRasters = rfxSchema.rasterFunctionArguments.Rasters.elementInfos.find((elemInfo) => elemInfo.values.indexOf(opCode) > -1)?.inputArgs.length;
    rfxSchema.rasterFunctionArguments.Operation.defaultValue = opCode;
    return rfxSchema;
}
/**
 * @private
 * Create the RFT for AggregateMultidimensional function
 * @param {HashMap<RFxSchema>} schema - the entire schema of the functions
 * @returns {RFxTemplate} Template data of aggregate multidimensional function
 */
function buildAggregateMultidimensionalRFT(schema, strings) {
    // Raster -> Mdimdef
    // Aggregation def -> cell stats
    const cellStats = buildRFTFromRFxSchema({ type: "CellStatisticsFunction", rfxSchema: schema.CellStatisticsFunction });
    for (const key in cellStats.arguments) {
        const arg = cellStats.arguments[key];
        if (key === "Operation") {
            arg.isPublic = true;
            arg.value = 40;
        }
        else if (key === "PercentileValue") {
            arg.isPublic = true;
        }
        else if (key === "PercentileInterpolationType") {
            arg.isPublic = true;
        }
    }
    cellStats.type = "RasterFunctionTemplate";
    cellStats.name = cellStats.description = "Raster Function Template";
    cellStats.customFunction = "aggregatemultidimensional";
    cellStats.function.customFunction = true;
    cellStats.function.type = "LocalFunction";
    cellStats.arguments.type = "LocalFunctionArguments";
    const mdimfilter = buildRFTFromRFxSchema({
        type: "MultidimensionalFilterFunction",
        rfxSchema: schema.MultidimensionalFilterFunction
    });
    for (const key in mdimfilter.arguments) {
        const arg = mdimfilter.arguments[key];
        if (key === "Raster") {
            arg.isPublic = true;
        }
        else if (key === "Filter") {
            arg.isPublic = true;
        }
    }
    mdimfilter.type = "RasterFunctionTemplate";
    mdimfilter.name = mdimfilter.description = "Raster Function Template";
    mdimfilter.function.customFunction = true;
    mdimfilter.customFunction = "aggregatemultidimensional";
    const aggrMdim = buildRFTFromRFxSchema({
        type: "RasterCollectionFunction",
        rfxSchema: schema.RasterCollectionFunction
    });
    for (const key in aggrMdim.arguments) {
        const arg = aggrMdim.arguments[key];
        if (key === "RasterCollection") {
            aggrMdim.arguments[key] = mdimfilter; // replace RFV with RFT
        }
        else if (key === "AggregationFunction") {
            aggrMdim.arguments[key] = cellStats; // replace RFV with RFT
        }
        else if (key === "AggregationDefinition") {
            arg.isPublic = true;
        }
    }
    aggrMdim.name = strings.rasterFunctions.rfx.aggregateMultidimensionalName;
    aggrMdim.description = strings.rasterFunctions.rfx.aggregateMultidimensionalSnip;
    aggrMdim.function.name = strings.rasterFunctions.rfx.aggregateMultidimensionalName;
    aggrMdim.function.description = strings.rasterFunctions.rfx.aggregateMultidimensionalSnip;
    aggrMdim.function.customFunction = true;
    aggrMdim.customFunction = "aggregatemultidimensional";
    return aggrMdim;
}
/**
 * @private
 * Create the RFT for NDVI colorized function
 * @param {HashMap<RFxSchema>} schema - the entire schema of the functions
 * @returns {RFxTemplate} Template data of NVDI colorized function
 */
function buildNDVIColorizedFunction(schema, strings) {
    const ndvi = buildRFTFromRFxSchema({ type: "NDVIFunction", rfxSchema: schema.NDVIFunction });
    for (const key in ndvi.arguments) {
        const arg = ndvi.arguments[key];
        if (key === "Raster") {
            arg.isPublic = true;
        }
        else if (key === "VisibleBandID" || key === "InfraredBandID") {
            arg.value = 0;
            arg.isPublic = true;
        }
    }
    ndvi.type = "RasterFunctionTemplate";
    ndvi.name = "Raster Function Template ";
    ndvi.description = "Raster Function Template";
    ndvi.customFunction = "ndvicolorized";
    const ndviClrzd = buildRFTFromRFxSchema({ type: "ColormapFunction", rfxSchema: schema.ColormapFunction });
    for (const key in ndviClrzd.arguments) {
        const arg = ndviClrzd.arguments[key];
        if (key === "Raster") {
            ndviClrzd.arguments[key] = ndvi; // replace RFV with RFT
        }
        else if (key === "ColormapName") {
            arg.value = "NDVI3";
            arg.isPublic = true;
        }
        else if (key === "ColorSchemeType" || key === "ColorRamp") {
            arg.isPublic = true;
        }
    }
    ndviClrzd.name = strings.rasterFunctions.rfx.ndviColorizedName;
    ndviClrzd.description = strings.rasterFunctions.rfx.ndviColorizedSnip;
    ndviClrzd.customFunction = "ndvicolorized";
    return ndviClrzd;
}
/**
 * Retrieves a function template for a given function name.
 * @param {string} functionName - The name of the function to get the template for.
 *
 */
async function getFunctionTemplate(functionName) {
    const schema = await getSchema();
    commonStrings = await (0,_resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.f)();
    let rfxSchema, type;
    if (functionName === "aggregateMultidimensionalFunction") {
        return buildAggregateMultidimensionalRFT(schema, commonStrings);
    }
    if (functionName === "ndviColorizedFunction") {
        return buildNDVIColorizedFunction(schema, commonStrings);
    }
    if (functionName.indexOf("LocalFunction") > -1) {
        rfxSchema = getLocalFunctionSchema(functionName, schema);
        type = "LocalFunction";
    }
    else {
        rfxSchema = schema[functionName];
        type = getFunctionType(rfxSchema, functionName);
    }
    return buildRFTFromRFxSchema({ type, rfxSchema });
}
/**
 * Primarly used to function with getFunctionSchema function
 * function takes an RFxArguments object as input and returns the name of the corresponding function,
 * based on the function type specified in the arguments.
 * @param rfxArgs
 * @returns string
 */
function getFunctionName(rfxArgs) {
    let widgetName;
    const functionType = rfxArgs.type.replace("Arguments", "");
    const localFunctionOperations = _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.h.localFunctionOperations;
    if (functionType.toLowerCase() === functionTypes.local.toLowerCase()) {
        const operation = rfxArgs.Operation, operationValue = operation && operation.value;
        const localOp = localFunctionOperations.find((op) => op.key === operationValue);
        if (!(0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_2__.i)(localOp)) {
            return localOp.label;
        }
        if (cellStatsOperations.indexOf(operationValue) >= 0) {
            widgetName = "CellStatisticsFunction";
        }
    }
    if (functionType.toLowerCase() === functionTypes.gpAdapter.toLowerCase()) {
        const toolNameArg = rfxArgs.ToolName;
        widgetName = toolNameArg && toolNameArg.value && toolNameArg.value.replace("_sa", "");
    }
    if (functionType.toLowerCase() === functionTypes.pythonAdapter.toLowerCase()) {
        let classname = rfxArgs.ClassName;
        if (classname && classname.value) {
            classname = classname.value;
        }
        widgetName = classname;
    }
    return widgetName || functionType;
}
/**
 * TODO: combine "getFunctionName" into this.
 * Gets the name of the RFxTemplate.
 * @param rfxTemplate The RFxTemplate object to get the name from.
 * @returns The name of the RFxTemplate.
 */
function getRFTFunctionIdentifier(rfxTemplate) {
    const functionType = rfxTemplate?.function?.type;
    const functionArguments = rfxTemplate?.arguments;
    const specialCaseMap = _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.h.rfxNameSpecialCases;
    const localFunctionOperations = _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.h.localFunctionOperations;
    switch (functionType) {
        case functionTypes.local:
            const operationValue = functionArguments?.Operation?.value;
            const localOp = localFunctionOperations.find((op) => op.key === operationValue);
            if (!(0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_2__.i)(localOp)) {
                return `${functionType}${"__"}${localOp.key}`;
            }
            else if (cellStatsOperations.indexOf(operationValue) >= 0) {
                return "CellStatisticsFunction";
            }
            break;
        case functionTypes.pythonAdapter: {
            const pyClassName = functionArguments?.ClassName?.value;
            return pyClassName || null;
        }
        case functionTypes.gpAdapter: {
            const toolNameValue = functionArguments?.ToolName?.value?.replace("_sa", "");
            return toolNameValue || null;
        }
        default: {
            const specialCase = specialCaseMap.find((sc) => sc.key === functionType);
            return specialCase?.value || functionType || null;
        }
    }
    return null;
}
async function hasGlobalFunction(rft, locale) {
    // Get global functions for english locale even if its not the current locale
    const globalFunctions = await (0,_resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.b)("en");
    if (locale !== "en") {
        const localizedGlobalFunctions = await (0,_resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_1__.b)(locale);
        globalFunctions.push(...localizedGlobalFunctions);
    }
    const stack = [rft];
    while (stack.length > 0) {
        const currentRft = stack.shift();
        for (const rftKeys in currentRft) {
            if (rftKeys === "function" && globalFunctions.indexOf(currentRft[rftKeys].name) > -1) {
                return true; // Found a global function
            }
            else if (currentRft[rftKeys] && typeof currentRft[rftKeys] === "object") {
                stack.push(currentRft[rftKeys]);
            }
        }
    }
    return false; // No global function found
}



//# sourceMappingURL=functions-f1f2dffd.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,