"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_arcgis-smart-m-492bf8"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-smart-mapping-class-breaks-color-slider.entry.js":
/*!*************************************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-smart-mapping-class-breaks-color-slider.entry.js ***!
  \*************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   arcgis_smart_mapping_class_breaks_color_slider: () => (/* binding */ ArcgisSmartMappingClassBreaksColorSlider)
/* harmony export */ });
/* harmony import */ var _index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-e3bf7da7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-e3bf7da7.js");
/* harmony import */ var _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./raster-unique-value-0976ec7f.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/raster-unique-value-0976ec7f.js");
/* harmony import */ var _loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./loadModules-b4ac1247.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-b4ac1247.js");
/* harmony import */ var _precision_06a73672_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./precision-06a73672.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/precision-06a73672.js");
/* harmony import */ var _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./commonEnums-fcf13661.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/commonEnums-fcf13661.js");
/* harmony import */ var _color_d6da0a9a_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./color-d6da0a9a.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/color-d6da0a9a.js");
/* harmony import */ var _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./languageUtil-ef0e54b2.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-ef0e54b2.js");
/* harmony import */ var _dom_4d367677_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./dom-4d367677.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-4d367677.js");
/* harmony import */ var _locale_050b6db9_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./locale-050b6db9.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-050b6db9.js");
/* harmony import */ var _index_05956cab_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./index-05956cab.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-05956cab.js");
/* harmony import */ var _commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./commonFunctions-b0830e9e.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/commonFunctions-b0830e9e.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */












const arcgisSmartMappingClassBreaksColorSliderCss = ".slider-box{height:320px}.slider-box .esri-classed-color-slider{min-width:200px}.slider-box .esri-classed-color-slider .esri-slider .esri-slider__content{height:175px}.slider-box .esri-classed-color-slider .esri-slider .esri-slider__label,.slider-box .esri-classed-color-slider .esri-slider .esri-slider__min,.slider-box .esri-classed-color-slider .esri-slider .esri-slider__max{text-decoration:underline}.slider-box .esri-classed-color-slider .esri-slider .esri-slider__label:hover,.slider-box .esri-classed-color-slider .esri-slider .esri-slider__min:hover,.slider-box .esri-classed-color-slider .esri-slider .esri-slider__max:hover{border:1px solid #bbb;background-color:#f3f3f3;text-decoration:none;z-index:1}.slider-box-buttons-front{display:flex}";

const ArcgisSmartMappingClassBreaksColorSlider = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisSmartMappingClassBreaksColorSliderChange = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingClassBreaksColorSliderChange", 7);
        this.arcgisSmartMappingClassBreaksColorSliderError = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingClassBreaksColorSliderError", 7);
        this.styleSheetStatus = "not-loaded";
    }
    // -------------------------------------------------------------------
    //
    //  Render Methods
    //
    // -------------------------------------------------------------------
    render() {
        const { config } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.H, null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("link", { rel: "stylesheet", href: `${config.jsapiUrl}/themes/light/main.css`, onLoad: () => {
                this.styleSheetStatus = "loaded";
                (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
            }, onError: () => {
                this.styleSheetStatus = "failed";
                (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
            } }), this.styleSheetStatus === "loaded"
            ? this.renderClassBreaksColorSlider()
            : this.styleSheetStatus === "not-loaded"
                ? this.renderClassBreaksColorSliderLoading()
                : null));
    }
    renderClassBreaksColorSlider() {
        const { layer: smLayer, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        const renderer = layer.renderer;
        if (renderer.classBreakInfos.length === 1) {
            if (this.classBreaksColorSlider) {
                this.classBreaksColorSlider.destroy();
                this.classBreaksColorSlider = undefined;
            }
        }
        else {
            const ok = this.prepareClassBreaksColorSlider();
            if (ok || this.classBreaksColorSlider) {
                return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "slider-box" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, strings.panels.classBreaks.dataRange), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "slider-box-buttons-front" }, this.renderInvertButton()), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { ref: (node) => {
                        if (node) {
                            this.afterClassBreaksColorSliderCreate(node);
                        }
                    } })));
            }
            else {
                return this.renderClassBreaksColorSliderLoading();
            }
        }
    }
    renderInvertButton() {
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-action", { text: strings.panels.classBreaks.invertSlider, icon: "arrowUpDown", onClick: () => this.handleInvertSlider() }));
    }
    renderClassBreaksColorSliderLoading() {
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "slider-box" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-loader", { label: strings.loading })));
    }
    // -------------------------------------------------------------------
    //
    //  Private methods
    //
    // -------------------------------------------------------------------
    prepareClassBreaksColorSlider() {
        const { layer: smLayer, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        const renderer = layer.renderer;
        let min;
        let max;
        min = renderer.classBreakInfos[0].minValue;
        max = renderer.classBreakInfos[renderer.classBreakInfos.length - 1].maxValue;
        ({ min, max } = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ad)({ min, max }));
        const breaks = (0,_color_d6da0a9a_js__WEBPACK_IMPORTED_MODULE_5__.g)();
        const precision = (0,_precision_06a73672_js__WEBPACK_IMPORTED_MODULE_3__.g)(breaks);
        const config = { min, max, breaks, precision };
        if (!this.classBreaksColorSlider) {
            this.classBreaksColorSlider = new modules.ClassedColorSlider(config);
            this.createclassBreaksColorSliderChangeEvents();
        }
        else {
            this.classBreaksColorSlider.set(config);
        }
        return (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ac)(this.classBreaksColorSlider);
    }
    afterClassBreaksColorSliderCreate(node) {
        if (!this.classBreaksColorSlider.container) {
            const divNode = document.createElement("div");
            node.append(divNode);
            this.classBreaksColorSlider.container = divNode;
        }
    }
    createclassBreaksColorSliderChangeEvents() {
        const { layer: smLayer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        if (!this.classBreaksColorSlider) {
            return;
        }
        this.classBreaksColorSlider.on("min-change", (info) => {
            const renderer = layer.renderer;
            const infos = renderer.classBreakInfos;
            if (info.value > infos[0].maxValue) {
                this.handleMinMaxChange(infos[0].maxValue, infos[infos.length - 1].maxValue);
            }
            else {
                this.handleMinMaxChange(info.value, infos[infos.length - 1].maxValue);
            }
        });
        this.classBreaksColorSlider.on("max-change", (info) => {
            const renderer = layer.renderer;
            const infos = renderer.classBreakInfos;
            if (info.value < infos[infos.length - 1].minValue) {
                this.handleMinMaxChange(infos[0].minValue, infos[infos.length - 1].minValue);
            }
            else {
                this.handleMinMaxChange(infos[0].minValue, info.value);
            }
        });
        this.classBreaksColorSlider.on("thumb-change", () => this.updateRendererBreaks(this.classBreaksColorSlider.breaks));
        this.classBreaksColorSlider.on("thumb-drag", () => this.updateRendererBreaks(this.classBreaksColorSlider.breaks));
    }
    handleInvertSlider() {
        const { layer: smLayer, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        const renderer = layer.renderer;
        let colors = renderer.classBreakInfos.map((classBreakInfo) => {
            return ((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.t)(classBreakInfo.symbol) ||
                new modules.esriColor({ r: 64, g: 64, b: 64, a: 1 }));
        });
        colors = colors.reverse();
        renderer.classBreakInfos.map((classBreakInfo, idx) => {
            if ((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.t)(classBreakInfo.symbol)) {
                (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.r)(classBreakInfo.symbol, colors[idx]);
            }
        });
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
        this.arcgisSmartMappingClassBreaksColorSliderChange.emit({ invertColors: true });
    }
    handleMinMaxChange(min, max) {
        const { layer: smLayer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        const renderer = layer.renderer;
        let minClassBreak = renderer.classBreakInfos[0];
        let maxClassBreak = renderer.classBreakInfos[renderer.classBreakInfos.length - 1];
        minClassBreak.minValue = min;
        minClassBreak.label = `${minClassBreak.minValue.toLocaleString()} - ${minClassBreak.maxValue.toLocaleString()}`;
        maxClassBreak.maxValue = max;
        maxClassBreak.label = `${maxClassBreak.minValue.toLocaleString()} - ${maxClassBreak.maxValue.toLocaleString()}`;
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
        this.arcgisSmartMappingClassBreaksColorSliderChange.emit({ updateValues: true });
    }
    updateRendererBreaks(breaks) {
        const { layer: smLayer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        const renderer = layer.renderer;
        renderer.classBreakInfos.forEach((classBreakInfo, idx) => {
            if (classBreakInfo.minValue !== breaks[idx].min ||
                classBreakInfo.maxValue !== breaks[idx].max) {
                classBreakInfo.minValue = breaks[idx].min;
                classBreakInfo.maxValue = breaks[idx].max;
                classBreakInfo.label = `${classBreakInfo.minValue.toLocaleString()} - ${classBreakInfo.maxValue.toLocaleString()}`;
            }
        });
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
        this.arcgisSmartMappingClassBreaksColorSliderChange.emit({ updateValues: true });
    }
    get hostElement() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisSmartMappingClassBreaksColorSlider.style = arcgisSmartMappingClassBreaksColorSliderCss;



//# sourceMappingURL=arcgis-smart-mapping-class-breaks-color-slider.entry.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,