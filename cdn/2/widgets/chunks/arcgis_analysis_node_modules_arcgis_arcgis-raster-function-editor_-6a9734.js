"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_arcgis-raster-function-editor_-6a9734"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/help-texts.pt-BR-564f93b3.js":
/*!*************************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/help-texts.pt-BR-564f93b3.js ***!
  \*************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   rfxArgsHelpTexts: () => (/* binding */ rfxArgsHelpTexts)
/* harmony export */ });
const rfxArgsHelpTexts = {
	"@@Abs_Cellsize-Type_tag0@@": "Escolha que tamanho de célula deve ser utilizado no raster de saída. Se todos os tamanhos de célula de entrada forem os mesmos, todas as opções renderão os mesmos resultados.",
	"@@Abs_Cellsize-Type_tag1@@": "Primeiro De--Utiliza o primeiro tamanho de célula dos rasters de entrada.",
	"@@Abs_Cellsize-Type_tag2@@": "Último De--Utiliza o último tamanho de célula dos rasters de entrada.",
	"@@Abs_Cellsize-Type_tag3@@": "Máximo De--Utiliza o maior tamanho de célula de todos os rasters de entrada. Este é o padrão.",
	"@@Abs_Cellsize-Type_tag4@@": "Média De--Utiliza o tamanho médio de célula de todos os rasters de entrada.",
	"@@Abs_Cellsize-Type_tag5@@": "Mínimo De--Utiliza o menor tamanho de célula de todos os rasters de entrada.",
	"@@Abs_Extent-Type_tag0@@": "Escolha qual extensão deve ser utilizada no raster de saída:",
	"@@Abs_Extent-Type_tag1@@": "Primeiro De--Utiliza a extensão do primeiro raster de entrada para determinar a extensão de processamento.",
	"@@Abs_Extent-Type_tag2@@": "Intersecção De--Utiliza a extensão dos pixels de sobreposição para determinar a extensão de processamento. Este é o padrão.",
	"@@Abs_Extent-Type_tag3@@": "Última De--Utiliza a extensão do último raster de entrada para determinar a extensão de processamento.",
	"@@Abs_Extent-Type_tag4@@": "União De--Utiliza a extensão de todos os rasters para determinar a extensão de processamento.",
	"@@Abs_Raster_tag0@@": "O raster de entrada para calcular os valores absolutos.",
	"@@ACos_Cellsize-Type_tag0@@": "Escolha que tamanho de célula deve ser utilizado no raster de saída. Se todos os tamanhos de célula de entrada forem os mesmos, todas as opções renderão os mesmos resultados.",
	"@@ACos_Cellsize-Type_tag1@@": "Primeiro De--Utiliza o primeiro tamanho de célula dos rasters de entrada.",
	"@@ACos_Cellsize-Type_tag2@@": "Último De--Utiliza o último tamanho de célula dos rasters de entrada.",
	"@@ACos_Cellsize-Type_tag3@@": "Máximo De--Utiliza o maior tamanho de célula de todos os rasters de entrada. Este é o padrão.",
	"@@ACos_Cellsize-Type_tag4@@": "Média De--Utiliza o tamanho médio de célula de todos os rasters de entrada.",
	"@@ACos_Cellsize-Type_tag5@@": "Mínimo De--Utiliza o menor tamanho de célula de todos os rasters de entrada.",
	"@@ACos_Extent-Type_tag0@@": "Escolha qual extensão deve ser utilizada no raster de saída:",
	"@@ACos_Extent-Type_tag1@@": "Primeiro De--Utiliza a extensão do primeiro raster de entrada para determinar a extensão de processamento.",
	"@@ACos_Extent-Type_tag2@@": "Intersecção De--Utiliza a extensão dos pixels de sobreposição para determinar a extensão de processamento. Este é o padrão.",
	"@@ACos_Extent-Type_tag3@@": "Última De--Utiliza a extensão do último raster de entrada para determinar a extensão de processamento.",
	"@@ACos_Extent-Type_tag4@@": "União De--Utiliza a extensão de todos os rasters para determinar a extensão de processamento.",
	"@@ACos_Raster_tag0@@": "A entrada para calcular os valores de co-seno inverso.",
	"@@ACosH_Cellsize-Type_tag0@@": "Escolha que tamanho de célula deve ser utilizado no raster de saída. Se todos os tamanhos de célula de entrada forem os mesmos, todas as opções renderão os mesmos resultados.",
	"@@ACosH_Cellsize-Type_tag1@@": "Primeiro De--Utiliza o primeiro tamanho de célula dos rasters de entrada.",
	"@@ACosH_Cellsize-Type_tag2@@": "Último De--Utiliza o último tamanho de célula dos rasters de entrada.",
	"@@ACosH_Cellsize-Type_tag3@@": "Máximo De--Utiliza o maior tamanho de célula de todos os rasters de entrada. Este é o padrão.",
	"@@ACosH_Cellsize-Type_tag4@@": "Média De--Utiliza o tamanho médio de célula de todos os rasters de entrada.",
	"@@ACosH_Cellsize-Type_tag5@@": "Mínimo De--Utiliza o menor tamanho de célula de todos os rasters de entrada.",
	"@@ACosH_Extent-Type_tag0@@": "Escolha qual extensão deve ser utilizada no raster de saída:",
	"@@ACosH_Extent-Type_tag1@@": "Primeiro De--Utiliza a extensão do primeiro raster de entrada para determinar a extensão de processamento.",
	"@@ACosH_Extent-Type_tag2@@": "Intersecção De--Utiliza a extensão dos pixels de sobreposição para determinar a extensão de processamento. Este é o padrão.",
	"@@ACosH_Extent-Type_tag3@@": "Última De--Utiliza a extensão do último raster de entrada para determinar a extensão de processamento.",
	"@@ACosH_Extent-Type_tag4@@": "União De--Utiliza a extensão de todos os rasters para determinar a extensão de processamento.",
	"@@ACosH_Raster_tag0@@": "A entrada para calcular os valores de co-seno hiperbólico inverso.",
	"@@Apparent-Reflectance_Albedo_tag0@@": "Os resultados da função Reflectância Aparente também podem ser expressos como Albedo, que é a porcentagem da energia disponível refletida pela superfície planetária. Os dados de Albedo são utilizados por usuários científicos para modelagem complexa e aplicações técnicas de sensoriamento remoto.",
	"@@Apparent-Reflectance_Albedo_tag1@@": "Desmarcado--A função retorna valores de reflectância aparente. Este é o padrão.",
	"@@Apparent-Reflectance_Albedo_tag2@@": "Marcado--A função retorna valores de ponto flutuante de 32 bits, que geralmente estão no intervalo de 0.0 a 1.0. Não é realizado nenhum recorte de dados se esta opção for selecionada.",
	"@@Apparent-Reflectance_Albedo_tag3@@": "Já que o tipo de dados de saída para Albedo é ponto flutuante, você deve definir explicitamente o <strong>Tipo de Pixel de Saída</strong> preferido para flutuante de 32-bits ou duplo de 64-bits. O parâmetro <strong>Tipo de Pixel de Saída</strong> está localizado na guia <strong>Geral</strong> na função de raster <strong>Reflectância Aparente</strong> . Se o <strong>Tipo de Pixel de Saída</strong> não estiver corretamente configurado para a opção <strong>Albedo</strong>, os valores resultantes serão inválidos e será fornecido um valor de 0.",
	"@@Apparent-Reflectance_Offset_tag0@@": "Seu valor de Albedo com escala pode opcionalmente ter um valor de deslocamento:",
	"@@Apparent-Reflectance_Offset_tag1@@": "Para tipos de dados não atribuídos de 16 bits, o deslocamento de escala padrão é 5.000.",
	"@@Apparent-Reflectance_Offset_tag2@@": "Para tipos de dados não atribuídos de 8 bits, o deslocamento de escala padrão é 0.",
	"@@Apparent-Reflectance_Offset_tag3@@": "Nenhuma escala é aplicada quando a saída é Albedo.",
	"@@Apparent-Reflectance_Radiance-Gains-and-Bias-Values-per-Band_tag0@@": "Você pode configurar ou editar manualmente este valor para cada banda. As informações apropriadas podem ser lidas a partir dos metadados do produto de raster de entrada.",
	"@@Apparent-Reflectance_Raster_tag0@@": "O produto raster no qual a reflectância aparente será aplicada.",
	"@@Apparent-Reflectance_Scale-Factor_tag0@@": "O seu valor de saída da reflectância aparente pode ser expresso como um número inteiro. O fator de escala é multiplicado pelo Albedo para converter todos os valores de ponto flutuante em valores inteiros.",
	"@@Apparent-Reflectance_Scale-Factor_tag1@@": "Se o fator de escala for ${0} ou não especificado, a escala padrão será aplicada dependendo do tipo de pixel dos dados de entrada:",
	"@@Apparent-Reflectance_Scale-Factor_tag2@@": "Para tipos de dados não atribuídos de 16 bits, o fator de escala padrão é  50.000.",
	"@@Apparent-Reflectance_Scale-Factor_tag3@@": "Para tipos de dados não atribuídos de 8 bits, o fator de escala padrão é  255.",
	"@@Apparent-Reflectance_Scale-Factor_tag4@@": "O fator de escala sempre é aplicado quando a saída é uma reflectância aparente. Nenhuma escala é aplicada quando a saída é Albedo.",
	"@@Apparent-Reflectance_Sun-Elevation_tag0@@": "Este é o valor de elevação do Sol, expresso em graus. Este será preenchido pelo sistema se a informação apropriada puder ser lida a partir dos metadados. Você pode configurar ou editar manualmente este valor.",
	"@@ArgStatistics_Max_tag0@@": "O valor máximo que você configurou é o valor mais alto igual ou menor ao término da duração.",
	"@@ArgStatistics_Max_tag1@@": "Esta entrada é somente aplicável quando o método for Duração.",
	"@@ArgStatistics_Method_tag0@@": "Selecione o método de estatística para calcular:",
	"@@ArgStatistics_Method_tag1@@": "Arg Máx--O parâmetro do máximo, que retorna o ${Band index} que o pixel fornecido atinge seu valor mínimo de todas as bandas. Todas as bandas do raster de cada raster de entrada são atribuídas a um índice de banda incremental baseado em 0, que primeiro é ordenado pelo índice do raster de entrada e então pela ordem de banda relativa dentro de cada raster de entrada.",
	"@@ArgStatistics_Method_tag2@@": "Arg Mediano--O parâmetro da média, que retorna o ${Band index} que o pixel fornecido atinge seu valor médio de todas as bandas.",
	"@@ArgStatistics_Method_tag3@@": "Arg Mín--O parâmetro do mínimo, que retorna o ${Band index} que o pixel fornecido atinge seu valor mínimo de todas as bandas.",
	"@@ArgStatistics_Method_tag4@@": "Duração--O método Duração encontra os elementos consecutivos mais longos no conjunto, onde cada elemento tem um valor maior ou igual a <strong>Mín</strong> e menor ou igual a <strong>Máx</strong> e então retorna seu comprimento.",
	"@@ArgStatistics_Min_tag0@@": "O valor mínimo que você configurou é o valor mais baixo igual ou maior ao início da duração.",
	"@@ArgStatistics_Min_tag1@@": "Esta entrada é somente aplicável quando o método for Duração.",
	"@@ArgStatistics_Rasters_tag0@@": "O raster de entrada que você irá executar os vários métodos estatísticos.",
	"@@ArgStatistics_Undefined-Class_tag0@@": "Uma entrada da constante que será retornada quando nenhum máximo, mínimo ou mediana definitivo puder ser calculado. O cenário mais comum é quando o valor máximo ou mínimo ocorre mais de uma vez entre os valores de todas as bandas. O valor padrão desta constante indefinida é 100.",
	"@@ArgStatistics_Undefined-Class_tag1@@": "A classe indefinida é aplicável somente quando o método for <strong>ArgMax</strong>, <strong>ArgMin</strong> ou <strong>ArgMedian</strong>.",
	"@@ArgStatistics_ignorenodata_tag0@@": "Denota se os valores de NoData são ignorados pelo cálculo de estatística.",
	"@@ArgStatistics_ignorenodata_tag1@@": "Marcado--A análise incluirá todos os pixels válidos nos rasters de entrada e ignorará todos os pixels de NoData.",
	"@@ArgStatistics_ignorenodata_tag2@@": "Desmarcado--A análise resultará em NoData se houver algum valor de NoData para os pixels nos rasters de entrada. Este é o padrão.",
	"@@Arithmetic_Cellsize-Type_tag0@@": "Escolha que tamanho de célula deve ser utilizado no raster de saída. Se todos os tamanhos de célula de entrada forem os mesmos, todas as opções renderão os mesmos resultados.",
	"@@Arithmetic_Cellsize-Type_tag1@@": "Primeiro De--Utiliza o primeiro tamanho de célula dos rasters de entrada.",
	"@@Arithmetic_Cellsize-Type_tag2@@": "Último De--Utiliza o último tamanho de célula dos rasters de entrada.",
	"@@Arithmetic_Cellsize-Type_tag3@@": "Máximo De--Utiliza o maior tamanho de célula de todos os rasters de entrada. Este é o padrão.",
	"@@Arithmetic_Cellsize-Type_tag4@@": "Média De--Utiliza o tamanho médio de célula de todos os rasters de entrada.",
	"@@Arithmetic_Cellsize-Type_tag5@@": "Mínimo De--Utiliza o menor tamanho de célula de todos os rasters de entrada.",
	"@@Arithmetic_Extent-Type_tag0@@": "Escolha qual extensão deve ser utilizada no raster de saída:",
	"@@Arithmetic_Extent-Type_tag1@@": "Primeiro De--Utiliza a extensão do primeiro raster de entrada para determinar a extensão de processamento.",
	"@@Arithmetic_Extent-Type_tag2@@": "Intersecção De--Utiliza a extensão dos pixels de sobreposição para determinar a extensão de processamento. Este é o padrão.",
	"@@Arithmetic_Extent-Type_tag3@@": "Última De--Utiliza a extensão do último raster de entrada para determinar a extensão de processamento.",
	"@@Arithmetic_Extent-Type_tag4@@": "União De--Utiliza a extensão de todos os rasters para determinar a extensão de processamento.",
	"@@Arithmetic_Operation_tag0@@": "A operação aritmética para ser executada entre os dois rasters de entrada.",
	"@@Arithmetic_Operation_tag1@@": "Estas opções são as seguintes:",
	"@@Arithmetic_Operation_tag2@@": "<strong>Dividir</strong>--Gera saída do resultado divisível entre os valores de pixels correspondentes de cada raster.",
	"@@Arithmetic_Operation_tag4@@": "<strong>Menos</strong>--Gera saída da diferença entre valores de pixels correspondentes de cada raster. Isto pode ser utilizado para calcular detecção de alteração.",
	"@@Arithmetic_Operation_tag6@@": "<strong>Modo</strong>--Gera saída do valor do pixel de todos os pixels sobrepostos que mais ocorrem. Por exemplo, se houver seis bandas em um raster, haverá seis pixels sobrepostos. Para os valores 4, 5, 6, 4, 7, 9, o valor de modo é 4.",
	"@@Arithmetic_Operation_tag8@@": "<strong>Multiplicar</strong>--Gera saídas do produto dos valores de pixels correspondentes de cada raster. Isto pode ser utilizado para executar algumas funções de custo.",
	"@@Arithmetic_Operation_tag10@@": "<strong>Mais</strong>--Gera saída da soma de todos os valores de pixel correspondentes de cada raster.",
	"@@Arithmetic_Operation_tag12@@": "<strong>Potência</strong>--Gera a saída do produto dos valores de pixels correspondente elevado à potência do raster de entrada ou scalar.",
	"@@Arithmetic_Raster_tag0@@": "O primeiro conjunto de dados raster de entrada.",
	"@@Arithmetic_Raster2_tag0@@": "O segundo conjunto de dados raster de entrada.",
	"@@ASin_Cellsize-Type_tag0@@": "Escolha que tamanho de célula deve ser utilizado no raster de saída. Se todos os tamanhos de célula de entrada forem os mesmos, todas as opções renderão os mesmos resultados.",
	"@@ASin_Cellsize-Type_tag1@@": "Primeiro De--Utiliza o primeiro tamanho de célula dos rasters de entrada.",
	"@@ASin_Cellsize-Type_tag2@@": "Último De--Utiliza o último tamanho de célula dos rasters de entrada.",
	"@@ASin_Cellsize-Type_tag3@@": "Máximo De--Utiliza o maior tamanho de célula de todos os rasters de entrada. Este é o padrão.",
	"@@ASin_Cellsize-Type_tag4@@": "Média De--Utiliza o tamanho médio de célula de todos os rasters de entrada.",
	"@@ASin_Cellsize-Type_tag5@@": "Mínimo De--Utiliza o menor tamanho de célula de todos os rasters de entrada.",
	"@@ASin_Extent-Type_tag0@@": "Escolha qual extensão deve ser utilizada no raster de saída:",
	"@@ASin_Extent-Type_tag1@@": "Primeiro De--Utiliza a extensão do primeiro raster de entrada para determinar a extensão de processamento.",
	"@@ASin_Extent-Type_tag2@@": "Intersecção De--Utiliza a extensão dos pixels de sobreposição para determinar a extensão de processamento. Este é o padrão.",
	"@@ASin_Extent-Type_tag3@@": "Última De--Utiliza a extensão do último raster de entrada para determinar a extensão de processamento.",
	"@@ASin_Extent-Type_tag4@@": "União De--Utiliza a extensão de todos os rasters para determinar a extensão de processamento.",
	"@@ASin_Raster_tag0@@": "A entrada para calcular os valores de seno inverso.",
	"@@ASinH_Cellsize-Type_tag0@@": "Escolha que tamanho de célula deve ser utilizado no raster de saída. Se todos os tamanhos de célula de entrada forem os mesmos, todas as opções renderão os mesmos resultados.",
	"@@ASinH_Cellsize-Type_tag1@@": "Primeiro De--Utiliza o primeiro tamanho de célula dos rasters de entrada.",
	"@@ASinH_Cellsize-Type_tag2@@": "Último De--Utiliza o último tamanho de célula dos rasters de entrada.",
	"@@ASinH_Cellsize-Type_tag3@@": "Máximo De--Utiliza o maior tamanho de célula de todos os rasters de entrada. Este é o padrão.",
	"@@ASinH_Cellsize-Type_tag4@@": "Média De--Utiliza o tamanho médio de célula de todos os rasters de entrada.",
	"@@ASinH_Cellsize-Type_tag5@@": "Mínimo De--Utiliza o menor tamanho de célula de todos os rasters de entrada.",
	"@@ASinH_Extent-Type_tag0@@": "Escolha qual extensão deve ser utilizada no raster de saída:",
	"@@ASinH_Extent-Type_tag1@@": "Primeiro De--Utiliza a extensão do primeiro raster de entrada para determinar a extensão de processamento.",
	"@@ASinH_Extent-Type_tag2@@": "Intersecção De--Utiliza a extensão dos pixels de sobreposição para determinar a extensão de processamento. Este é o padrão.",
	"@@ASinH_Extent-Type_tag3@@": "Última De--Utiliza a extensão do último raster de entrada para determinar a extensão de processamento.",
	"@@ASinH_Extent-Type_tag4@@": "União De--Utiliza a extensão de todos os rasters para determinar a extensão de processamento.",
	"@@ASinH_Raster_tag0@@": "A entrada para calcular os valores de seno hiperbólico inverso.",
	"@@Aspect_Raster_tag0@@": "O DEM de entrada utilizado para derivar o conjunto de dados de aspecto.",
	"@@Aspect-Slope_Raster_tag0@@": "O DEM de entrada.",
	"@@Aspect-Slope_Z-Factor_tag0@@": "O fator de escala utilizado para converter os valores de elevação para seguir dois propósitos:",
	"@@Aspect-Slope_Z-Factor_tag1@@": "Converte as unidades de elevação (como metros ou pés) em unidades de coordenadas horizontais do conjunto de dados, que podem ser pés, metros ou graus.",
	"@@Aspect-Slope_Z-Factor_tag2@@": "Adiciona exagero vertical para efeito visual.",
	"@@ATan_Cellsize-Type_tag0@@": "Escolha que tamanho de célula deve ser utilizado no raster de saída. Se todos os tamanhos de célula de entrada forem os mesmos, todas as opções renderão os mesmos resultados.",
	"@@ATan_Cellsize-Type_tag1@@": "Primeiro De--Utiliza o primeiro tamanho de célula dos rasters de entrada.",
	"@@ATan_Cellsize-Type_tag2@@": "Último De--Utiliza o último tamanho de célula dos rasters de entrada.",
	"@@ATan_Cellsize-Type_tag3@@": "Máximo De--Utiliza o maior tamanho de célula de todos os rasters de entrada. Este é o padrão.",
	"@@ATan_Cellsize-Type_tag4@@": "Média De--Utiliza o tamanho médio de célula de todos os rasters de entrada.",
	"@@ATan_Cellsize-Type_tag5@@": "Mínimo De--Utiliza o menor tamanho de célula de todos os rasters de entrada.",
	"@@ATan_Extent-Type_tag0@@": "Escolha qual extensão deve ser utilizada no raster de saída:",
	"@@ATan_Extent-Type_tag1@@": "Primeiro De--Utiliza a extensão do primeiro raster de entrada para determinar a extensão de processamento.",
	"@@ATan_Extent-Type_tag2@@": "Intersecção De--Utiliza a extensão dos pixels de sobreposição para determinar a extensão de processamento. Este é o padrão.",
	"@@ATan_Extent-Type_tag3@@": "Última De--Utiliza a extensão do último raster de entrada para determinar a extensão de processamento.",
	"@@ATan_Extent-Type_tag4@@": "União De--Utiliza a extensão de todos os rasters para determinar a extensão de processamento.",
	"@@ATan_Raster_tag0@@": "A entrada para calcular os valores tangente inverso.",
	"@@ATan2_Cellsize-Type_tag0@@": "Escolha que tamanho de célula deve ser utilizado no raster de saída. Se todos os tamanhos de célula de entrada forem os mesmos, todas as opções renderão os mesmos resultados.",
	"@@ATan2_Cellsize-Type_tag1@@": "Primeiro De--Utiliza o primeiro tamanho de célula dos rasters de entrada.",
	"@@ATan2_Cellsize-Type_tag2@@": "Último De--Utiliza o último tamanho de célula dos rasters de entrada.",
	"@@ATan2_Cellsize-Type_tag3@@": "Máximo De--Utiliza o maior tamanho de célula de todos os rasters de entrada. Este é o padrão.",
	"@@ATan2_Cellsize-Type_tag4@@": "Média De--Utiliza o tamanho médio de célula de todos os rasters de entrada.",
	"@@ATan2_Cellsize-Type_tag5@@": "Mínimo De--Utiliza o menor tamanho de célula de todos os rasters de entrada.",
	"@@ATan2_Extent-Type_tag0@@": "Escolha qual extensão deve ser utilizada no raster de saída:",
	"@@ATan2_Extent-Type_tag1@@": "Primeiro De--Utiliza a extensão do primeiro raster de entrada para determinar a extensão de processamento.",
	"@@ATan2_Extent-Type_tag2@@": "Intersecção De--Utiliza a extensão dos pixels de sobreposição para determinar a extensão de processamento. Este é o padrão.",
	"@@ATan2_Extent-Type_tag3@@": "Última De--Utiliza a extensão do último raster de entrada para determinar a extensão de processamento.",
	"@@ATan2_Extent-Type_tag4@@": "União De--Utiliza a extensão de todos os rasters para determinar a extensão de processamento.",
	"@@ATan2_Raster_tag0@@": "A entrada que especifica o numerador, ou valor y, para utilizar ao calcular a tangente inversa.",
	"@@ATan2_Raster2_tag0@@": "A entrada que especifica o denominador, ou valor x, para utilizar ao calcular a tangente inversa.",
	"@@ATanH_Cellsize-Type_tag0@@": "Escolha que tamanho de célula deve ser utilizado no raster de saída. Se todos os tamanhos de célula de entrada forem os mesmos, todas as opções renderão os mesmos resultados.",
	"@@ATanH_Cellsize-Type_tag1@@": "Primeiro De--Utiliza o primeiro tamanho de célula dos rasters de entrada.",
	"@@ATanH_Cellsize-Type_tag2@@": "Último De--Utiliza o último tamanho de célula dos rasters de entrada.",
	"@@ATanH_Cellsize-Type_tag3@@": "Máximo De--Utiliza o maior tamanho de célula de todos os rasters de entrada. Este é o padrão.",
	"@@ATanH_Cellsize-Type_tag4@@": "Média De--Utiliza o tamanho médio de célula de todos os rasters de entrada.",
	"@@ATanH_Cellsize-Type_tag5@@": "Mínimo De--Utiliza o menor tamanho de célula de todos os rasters de entrada.",
	"@@ATanH_Extent-Type_tag0@@": "Escolha qual extensão deve ser utilizada no raster de saída:",
	"@@ATanH_Extent-Type_tag1@@": "Primeiro De--Utiliza a extensão do primeiro raster de entrada para determinar a extensão de processamento.",
	"@@ATanH_Extent-Type_tag2@@": "Intersecção De--Utiliza a extensão dos pixels de sobreposição para determinar a extensão de processamento. Este é o padrão.",
	"@@ATanH_Extent-Type_tag3@@": "Última De--Utiliza a extensão do último raster de entrada para determinar a extensão de processamento.",
	"@@ATanH_Extent-Type_tag4@@": "União De--Utiliza a extensão de todos os rasters para determinar a extensão de processamento.",
	"@@ATanH_Raster_tag0@@": "A entrada para calcular os valores tangente hiperbólico inverso.",
	"@@Attribute-Table_Raster_tag0@@": "O raster de entrada.",
	"@@Attribute-Table_Table-Type_tag0@@": "A tabela de atributo de entrada pode ser inserida utilizando o tipo <strong>Manual</strong> onde você atribui um nome de classe e uma cor para cada valor ou você pode referenciar uma tabela existente que é proveniente de um arquivo ${.dbf}.",
	"@@Band-Arithmetic_Band-Indexes_tag0@@": "Defina sua fórmula aritmética de banda se você escolheu  <strong>Usuário Definido</strong> para seu <strong>Método</strong>.",
	"@@Band-Arithmetic_Band-Indexes_tag5@@": "Se você escolheu um índice pré-definido para o seu <strong>Método</strong>, defina as bandas adequadas do seu conjunto de dados raster de entrada que correspondam ao índice.",
	"@@Band-Arithmetic_Method_tag0@@": "O tipo de algoritmo aritmético da banda que você deseja implantar. Você pode definir seu algoritmo personalizado ou escolher um índice pré-definido.",
	"@@Band-Arithmetic_Method_tag1@@": "<strong>BAI</strong>--Índice de Área Queimada",
	"@@Band-Arithmetic_Method_tag2@@": "<strong>CIg</strong>--Índice de Clorofila - Verde",
	"@@Band-Arithmetic_Method_tag3@@": "<strong>CIre</strong>--Índice de Clorofila - Broda Vermelha",
	"@@Band-Arithmetic_Method_tag4@@": "<strong>Minerais de Barro</strong>--Relação de Minerais de Barro",
	"@@Band-Arithmetic_Method_tag5@@": "<strong>EVI</strong>--Índice de Vegetação Realçada",
	"@@Band-Arithmetic_Method_tag6@@": "<strong>Minerais Férreos</strong>--Relação de Minerais Férreos",
	"@@Band-Arithmetic_Method_tag7@@": "<strong>GEMI</strong>--Índice de Monitoramento Ambiental Global",
	"@@Band-Arithmetic_Method_tag8@@": "<strong>GNDVI</strong>--Índice de Vegetação de Diferença Normalizada do Verde",
	"@@Band-Arithmetic_Method_tag9@@": "<strong>GVI (Landsat TM)</strong>--Índice de Vegetação Verde do Landsat TM",
	"@@Band-Arithmetic_Method_tag10@@": "<strong>Óxido de Ferro</strong>--Relação de Óxido de Ferro",
	"@@Band-Arithmetic_Method_tag11@@": "<strong>MNDWI</strong>--Índice da Água de Diferença Normalizada Modificada",
	"@@Band-Arithmetic_Method_tag12@@": "<strong>MTVI2</strong>--Índice de Vegetação Triangular Modificado (segundo interação)",
	"@@Band-Arithmetic_Method_tag13@@": "<strong>SAVI Transformado</strong>--Índice de Vegetação Modificado e Ajustado para Solo",
	"@@Band-Arithmetic_Method_tag14@@": "<strong>NBR</strong>--Índice de Relação Normalizada",
	"@@Band-Arithmetic_Method_tag15@@": "<strong>NDBI</strong>--Índice de Diferença Normalizada",
	"@@Band-Arithmetic_Method_tag16@@": "<strong>NDMI</strong>--Índice de Diferença de Umidade Normalizado",
	"@@Band-Arithmetic_Method_tag17@@": "<strong>NDSI</strong>--Índice de Neve de Diferença Normalizada",
	"@@Band-Arithmetic_Method_tag18@@": "<strong>NDVI</strong>--Índice de Vegetação de Diferença Normalizada",
	"@@Band-Arithmetic_Method_tag19@@": "<strong>NDVIre</strong>--Índice de Vegetação de Diferença Normalizada da Borda Vermelha",
	"@@Band-Arithmetic_Method_tag20@@": "<strong>NDWI</strong>--Índice da Água de Diferença Normalizada",
	"@@Band-Arithmetic_Method_tag21@@": "<strong>PVI</strong>--Índice de Vegetação Perpendicular",
	"@@Band-Arithmetic_Method_tag22@@": "<strong>RTVICore</strong>--Índice de Vegetação Triangulada de Borda Vermelha",
	"@@Band-Arithmetic_Method_tag23@@": "<strong>SAVI</strong>--Índice de Vegetação Ajustado para Solo",
	"@@Band-Arithmetic_Method_tag24@@": "<strong>SR</strong>--Proporção Simples",
	"@@Band-Arithmetic_Method_tag25@@": "<strong>SRre</strong>—Proporção Simples de Segmento Vermelho",
	"@@Band-Arithmetic_Method_tag26@@": "<strong>Fórmula de Sultan</strong>--Fórmula de Sultan",
	"@@Band-Arithmetic_Method_tag27@@": "<strong>SAVI Transformado</strong>--Índice de Vegetação Transformado e Ajustado para Solo",
	"@@Band-Arithmetic_Method_tag28@@": "<strong>Usuário Definido</strong>--Permite a você definir sua expressão aritmética de banda personalizada.",
	"@@Band-Arithmetic_Method_tag29@@": "<strong>VARI</strong>--Índice Resistente Atmosfericamente Visível",
	"@@Band-Arithmetic_Method_tag30@@": "<strong>WNDWI</strong>--Índice da Água de Diferença Normalizada Ponderada",
	"@@Band-Arithmetic_Raster_tag0@@": "O raster de entrada.",
	"@@Binary-Thresholding_Raster_tag0@@": "O raster de entrada.",
	"@@Bitwise-And_Cellsize-Type_tag0@@": "Escolha que tamanho de célula deve ser utilizado no raster de saída. Se todos os tamanhos de célula de entrada forem os mesmos, todas as opções renderão os mesmos resultados.",
	"@@Bitwise-And_Cellsize-Type_tag1@@": "Primeiro De--Utiliza o primeiro tamanho de célula dos rasters de entrada.",
	"@@Bitwise-And_Cellsize-Type_tag2@@": "Último De--Utiliza o último tamanho de célula dos rasters de entrada.",
	"@@Bitwise-And_Cellsize-Type_tag3@@": "Máximo De--Utiliza o maior tamanho de célula de todos os rasters de entrada. Este é o padrão.",
	"@@Bitwise-And_Cellsize-Type_tag4@@": "Média De--Utiliza o tamanho médio de célula de todos os rasters de entrada.",
	"@@Bitwise-And_Cellsize-Type_tag5@@": "Mínimo De--Utiliza o menor tamanho de célula de todos os rasters de entrada.",
	"@@Bitwise-And_Extent-Type_tag0@@": "Escolha qual extensão deve ser utilizada no raster de saída:",
	"@@Bitwise-And_Extent-Type_tag1@@": "Primeiro De--Utiliza a extensão do primeiro raster de entrada para determinar a extensão de processamento.",
	"@@Bitwise-And_Extent-Type_tag2@@": "Intersecção De--Utiliza a extensão dos pixels de sobreposição para determinar a extensão de processamento. Este é o padrão.",
	"@@Bitwise-And_Extent-Type_tag3@@": "Última De--Utiliza a extensão do último raster de entrada para determinar a extensão de processamento.",
	"@@Bitwise-And_Extent-Type_tag4@@": "União De--Utiliza a extensão de todos os rasters para determinar a extensão de processamento.",
	"@@Bitwise-And_Raster_tag0@@": "A primeira entrada para utilizar nesta operação bitwise.",
	"@@Bitwise-And_Raster_tag1@@": "Um valor constante pode ser utilizado como uma entrada para este parâmetro, fornecendo um raster que é especificado para o outro parâmetro.",
	"@@Bitwise-And_Raster2_tag0@@": "A segunda entrada para utilizar nesta operação bitwise.",
	"@@Bitwise-And_Raster2_tag1@@": "Um valor constante pode ser utilizado como uma entrada para este parâmetro, fornecendo um raster que é especificado para o outro parâmetro.",
	"@@Bitwise-Left-Shift_Cellsize-Type_tag0@@": "Escolha que tamanho de célula deve ser utilizado no raster de saída. Se todos os tamanhos de célula de entrada forem os mesmos, todas as opções renderão os mesmos resultados.",
	"@@Bitwise-Left-Shift_Cellsize-Type_tag1@@": "Primeiro De--Utiliza o primeiro tamanho de célula dos rasters de entrada.",
	"@@Bitwise-Left-Shift_Cellsize-Type_tag2@@": "Último De--Utiliza o último tamanho de célula dos rasters de entrada.",
	"@@Bitwise-Left-Shift_Cellsize-Type_tag3@@": "Máximo De--Utiliza o maior tamanho de célula de todos os rasters de entrada. Este é o padrão.",
	"@@Bitwise-Left-Shift_Cellsize-Type_tag4@@": "Média De--Utiliza o tamanho médio de célula de todos os rasters de entrada.",
	"@@Bitwise-Left-Shift_Cellsize-Type_tag5@@": "Mínimo De--Utiliza o menor tamanho de célula de todos os rasters de entrada.",
	"@@Bitwise-Left-Shift_Extent-Type_tag0@@": "Escolha qual extensão deve ser utilizada no raster de saída:",
	"@@Bitwise-Left-Shift_Extent-Type_tag1@@": "Primeiro De--Utiliza a extensão do primeiro raster de entrada para determinar a extensão de processamento.",
	"@@Bitwise-Left-Shift_Extent-Type_tag2@@": "Intersecção De--Utiliza a extensão dos pixels de sobreposição para determinar a extensão de processamento. Este é o padrão.",
	"@@Bitwise-Left-Shift_Extent-Type_tag3@@": "Última De--Utiliza a extensão do último raster de entrada para determinar a extensão de processamento.",
	"@@Bitwise-Left-Shift_Extent-Type_tag4@@": "União De--Utiliza a extensão de todos os rasters para determinar a extensão de processamento.",
	"@@Bitwise-Left-Shift_Raster_tag0@@": "A entrada para executar a mudança.",
	"@@Bitwise-Left-Shift_Raster_tag1@@": "Um valor constante pode ser utilizado como uma entrada para este parâmetro, fornecendo um raster que é especificado para o outro parâmetro.",
	"@@Bitwise-Left-Shift_Raster2_tag0@@": "A entrada definindo o número de posições para mudança dos bits.",
	"@@Bitwise-Left-Shift_Raster2_tag1@@": "Um valor constante pode ser utilizado como uma entrada para este parâmetro, fornecendo um raster que é especificado para o outro parâmetro.",
	"@@Bitwise-Not_Cellsize-Type_tag0@@": "Escolha que tamanho de célula deve ser utilizado no raster de saída. Se todos os tamanhos de célula de entrada forem os mesmos, todas as opções renderão os mesmos resultados.",
	"@@Bitwise-Not_Cellsize-Type_tag1@@": "Primeiro De--Utiliza o primeiro tamanho de célula dos rasters de entrada.",
	"@@Bitwise-Not_Cellsize-Type_tag2@@": "Último De--Utiliza o último tamanho de célula dos rasters de entrada.",
	"@@Bitwise-Not_Cellsize-Type_tag3@@": "Máximo De--Utiliza o maior tamanho de célula de todos os rasters de entrada. Este é o padrão.",
	"@@Bitwise-Not_Cellsize-Type_tag4@@": "Média De--Utiliza o tamanho médio de célula de todos os rasters de entrada.",
	"@@Bitwise-Not_Cellsize-Type_tag5@@": "Mínimo De--Utiliza o menor tamanho de célula de todos os rasters de entrada.",
	"@@Bitwise-Not_Extent-Type_tag0@@": "Escolha qual extensão deve ser utilizada no raster de saída:",
	"@@Bitwise-Not_Extent-Type_tag1@@": "Primeiro De--Utiliza a extensão do primeiro raster de entrada para determinar a extensão de processamento.",
	"@@Bitwise-Not_Extent-Type_tag2@@": "Intersecção De--Utiliza a extensão dos pixels de sobreposição para determinar a extensão de processamento. Este é o padrão.",
	"@@Bitwise-Not_Extent-Type_tag3@@": "Última De--Utiliza a extensão do último raster de entrada para determinar a extensão de processamento.",
	"@@Bitwise-Not_Extent-Type_tag4@@": "União De--Utiliza a extensão de todos os rasters para determinar a extensão de processamento.",
	"@@Bitwise-Not_Raster_tag0@@": "O raster de entrada para executar a operação Bitwise Não (complemento).",
	"@@Bitwise-Or_Cellsize-Type_tag0@@": "Escolha que tamanho de célula deve ser utilizado no raster de saída. Se todos os tamanhos de célula de entrada forem os mesmos, todas as opções renderão os mesmos resultados.",
	"@@Bitwise-Or_Cellsize-Type_tag1@@": "Primeiro De--Utiliza o primeiro tamanho de célula dos rasters de entrada.",
	"@@Bitwise-Or_Cellsize-Type_tag2@@": "Último De--Utiliza o último tamanho de célula dos rasters de entrada.",
	"@@Bitwise-Or_Cellsize-Type_tag3@@": "Máximo De--Utiliza o maior tamanho de célula de todos os rasters de entrada. Este é o padrão.",
	"@@Bitwise-Or_Cellsize-Type_tag4@@": "Média De--Utiliza o tamanho médio de célula de todos os rasters de entrada.",
	"@@Bitwise-Or_Cellsize-Type_tag5@@": "Mínimo De--Utiliza o menor tamanho de célula de todos os rasters de entrada.",
	"@@Bitwise-Or_Extent-Type_tag0@@": "Escolha qual extensão deve ser utilizada no raster de saída:",
	"@@Bitwise-Or_Extent-Type_tag1@@": "Primeiro De--Utiliza a extensão do primeiro raster de entrada para determinar a extensão de processamento.",
	"@@Bitwise-Or_Extent-Type_tag2@@": "Intersecção De--Utiliza a extensão dos pixels de sobreposição para determinar a extensão de processamento. Este é o padrão.",
	"@@Bitwise-Or_Extent-Type_tag3@@": "Última De--Utiliza a extensão do último raster de entrada para determinar a extensão de processamento.",
	"@@Bitwise-Or_Extent-Type_tag4@@": "União De--Utiliza a extensão de todos os rasters para determinar a extensão de processamento.",
	"@@Bitwise-Or_Raster_tag0@@": "A primeira entrada para utilizar nesta operação bitwise.",
	"@@Bitwise-Or_Raster_tag1@@": "Um valor constante pode ser utilizado como uma entrada para este parâmetro, fornecendo um raster que é especificado para o outro parâmetro.",
	"@@Bitwise-Or_Raster2_tag0@@": "A segunda entrada para utilizar nesta operação bitwise.",
	"@@Bitwise-Or_Raster2_tag1@@": "Um valor constante pode ser utilizado como uma entrada para este parâmetro, fornecendo um raster que é especificado para o outro parâmetro.",
	"@@Bitwise-Right-Shift_Cellsize-Type_tag0@@": "Escolha que tamanho de célula deve ser utilizado no raster de saída. Se todos os tamanhos de célula de entrada forem os mesmos, todas as opções renderão os mesmos resultados.",
	"@@Bitwise-Right-Shift_Cellsize-Type_tag1@@": "Primeiro De--Utiliza o primeiro tamanho de célula dos rasters de entrada.",
	"@@Bitwise-Right-Shift_Cellsize-Type_tag2@@": "Último De--Utiliza o último tamanho de célula dos rasters de entrada.",
	"@@Bitwise-Right-Shift_Cellsize-Type_tag3@@": "Máximo De--Utiliza o maior tamanho de célula de todos os rasters de entrada. Este é o padrão.",
	"@@Bitwise-Right-Shift_Cellsize-Type_tag4@@": "Média De--Utiliza o tamanho médio de célula de todos os rasters de entrada.",
	"@@Bitwise-Right-Shift_Cellsize-Type_tag5@@": "Mínimo De--Utiliza o menor tamanho de célula de todos os rasters de entrada.",
	"@@Bitwise-Right-Shift_Extent-Type_tag0@@": "Escolha qual extensão deve ser utilizada no raster de saída:",
	"@@Bitwise-Right-Shift_Extent-Type_tag1@@": "Primeiro De--Utiliza a extensão do primeiro raster de entrada para determinar a extensão de processamento.",
	"@@Bitwise-Right-Shift_Extent-Type_tag2@@": "Intersecção De--Utiliza a extensão dos pixels de sobreposição para determinar a extensão de processamento. Este é o padrão.",
	"@@Bitwise-Right-Shift_Extent-Type_tag3@@": "Última De--Utiliza a extensão do último raster de entrada para determinar a extensão de processamento.",
	"@@Bitwise-Right-Shift_Extent-Type_tag4@@": "União De--Utiliza a extensão de todos os rasters para determinar a extensão de processamento.",
	"@@Bitwise-Right-Shift_Raster_tag0@@": "A entrada para executar a mudança.",
	"@@Bitwise-Right-Shift_Raster_tag1@@": "Um valor constante pode ser utilizado como uma entrada para este parâmetro, fornecendo um raster que é especificado para o outro parâmetro.",
	"@@Bitwise-Right-Shift_Raster2_tag0@@": "A entrada definindo o número de posições para mudança dos bits.",
	"@@Bitwise-Right-Shift_Raster2_tag1@@": "Um valor constante pode ser utilizado como uma entrada para este parâmetro, fornecendo um raster que é especificado para o outro parâmetro.",
	"@@Bitwise-Xor_Cellsize-Type_tag0@@": "Escolha que tamanho de célula deve ser utilizado no raster de saída. Se todos os tamanhos de célula de entrada forem os mesmos, todas as opções renderão os mesmos resultados.",
	"@@Bitwise-Xor_Cellsize-Type_tag1@@": "Primeiro De--Utiliza o primeiro tamanho de célula dos rasters de entrada.",
	"@@Bitwise-Xor_Cellsize-Type_tag2@@": "Último De--Utiliza o último tamanho de célula dos rasters de entrada.",
	"@@Bitwise-Xor_Cellsize-Type_tag3@@": "Máximo De--Utiliza o maior tamanho de célula de todos os rasters de entrada. Este é o padrão.",
	"@@Bitwise-Xor_Cellsize-Type_tag4@@": "Média De--Utiliza o tamanho médio de célula de todos os rasters de entrada.",
	"@@Bitwise-Xor_Cellsize-Type_tag5@@": "Mínimo De--Utiliza o menor tamanho de célula de todos os rasters de entrada.",
	"@@Bitwise-Xor_Extent-Type_tag0@@": "Escolha qual extensão deve ser utilizada no raster de saída:",
	"@@Bitwise-Xor_Extent-Type_tag1@@": "Primeiro De--Utiliza a extensão do primeiro raster de entrada para determinar a extensão de processamento.",
	"@@Bitwise-Xor_Extent-Type_tag2@@": "Intersecção De--Utiliza a extensão dos pixels de sobreposição para determinar a extensão de processamento. Este é o padrão.",
	"@@Bitwise-Xor_Extent-Type_tag3@@": "Última De--Utiliza a extensão do último raster de entrada para determinar a extensão de processamento.",
	"@@Bitwise-Xor_Extent-Type_tag4@@": "União De--Utiliza a extensão de todos os rasters para determinar a extensão de processamento.",
	"@@Bitwise-Xor_Raster_tag0@@": "A primeira entrada para utilizar nesta operação bitwise.",
	"@@Bitwise-Xor_Raster_tag1@@": "Um valor constante pode ser utilizado como uma entrada para este parâmetro, fornecendo um raster que é especificado para o outro parâmetro.",
	"@@Bitwise-Xor_Raster2_tag0@@": "A segunda entrada para utilizar nesta operação bitwise.",
	"@@Bitwise-Xor_Raster2_tag1@@": "Um valor constante pode ser utilizado como uma entrada para este parâmetro, fornecendo um raster que é especificado para o outro parâmetro.",
	"@@Boolean-and_Cellsize-Type_tag0@@": "Escolha que tamanho de célula deve ser utilizado no raster de saída. Se todos os tamanhos de célula de entrada forem os mesmos, todas as opções renderão os mesmos resultados.",
	"@@Boolean-and_Cellsize-Type_tag1@@": "Primeiro De--Utiliza o primeiro tamanho de célula dos rasters de entrada.",
	"@@Boolean-and_Cellsize-Type_tag2@@": "Último De--Utiliza o último tamanho de célula dos rasters de entrada.",
	"@@Boolean-and_Cellsize-Type_tag3@@": "Máximo De--Utiliza o maior tamanho de célula de todos os rasters de entrada. Este é o padrão.",
	"@@Boolean-and_Cellsize-Type_tag4@@": "Média De--Utiliza o tamanho médio de célula de todos os rasters de entrada.",
	"@@Boolean-and_Cellsize-Type_tag5@@": "Mínimo De--Utiliza o menor tamanho de célula de todos os rasters de entrada.",
	"@@Boolean-and_Extent-Type_tag0@@": "Escolha qual extensão deve ser utilizada no raster de saída:",
	"@@Boolean-and_Extent-Type_tag1@@": "Primeiro De--Utiliza a extensão do primeiro raster de entrada para determinar a extensão de processamento.",
	"@@Boolean-and_Extent-Type_tag2@@": "Intersecção De--Utiliza a extensão dos pixels de sobreposição para determinar a extensão de processamento. Este é o padrão.",
	"@@Boolean-and_Extent-Type_tag3@@": "Última De--Utiliza a extensão do último raster de entrada para determinar a extensão de processamento.",
	"@@Boolean-and_Extent-Type_tag4@@": "União De--Utiliza a extensão de todos os rasters para determinar a extensão de processamento.",
	"@@Boolean-and_Raster_tag0@@": "A primeira entrada para utilizar nesta operação Boolean.",
	"@@Boolean-and_Raster_tag1@@": "Um valor constante pode ser utilizado como uma entrada para este parâmetro, fornecendo um raster que é especificado para o outro parâmetro.",
	"@@Boolean-and_Raster2_tag0@@": "A segunda entrada para utilizar nesta operação Boolean.",
	"@@Boolean-and_Raster2_tag1@@": "Um valor constante pode ser utilizado como uma entrada para este parâmetro, fornecendo um raster que é especificado para o outro parâmetro.",
	"@@Boolean-Not_Cellsize-Type_tag0@@": "Escolha que tamanho de célula deve ser utilizado no raster de saída. Se todos os tamanhos de célula de entrada forem os mesmos, todas as opções renderão os mesmos resultados.",
	"@@Boolean-Not_Cellsize-Type_tag1@@": "Primeiro De--Utiliza o primeiro tamanho de célula dos rasters de entrada.",
	"@@Boolean-Not_Cellsize-Type_tag2@@": "Último De--Utiliza o último tamanho de célula dos rasters de entrada.",
	"@@Boolean-Not_Cellsize-Type_tag3@@": "Máximo De--Utiliza o maior tamanho de célula de todos os rasters de entrada. Este é o padrão.",
	"@@Boolean-Not_Cellsize-Type_tag4@@": "Média De--Utiliza o tamanho médio de célula de todos os rasters de entrada.",
	"@@Boolean-Not_Cellsize-Type_tag5@@": "Mínimo De--Utiliza o menor tamanho de célula de todos os rasters de entrada.",
	"@@Boolean-Not_Extent-Type_tag0@@": "Escolha qual extensão deve ser utilizada no raster de saída:",
	"@@Boolean-Not_Extent-Type_tag1@@": "Primeiro De--Utiliza a extensão do primeiro raster de entrada para determinar a extensão de processamento.",
	"@@Boolean-Not_Extent-Type_tag2@@": "Intersecção De--Utiliza a extensão dos pixels de sobreposição para determinar a extensão de processamento. Este é o padrão.",
	"@@Boolean-Not_Extent-Type_tag3@@": "Última De--Utiliza a extensão do último raster de entrada para determinar a extensão de processamento.",
	"@@Boolean-Not_Extent-Type_tag4@@": "União De--Utiliza a extensão de todos os rasters para determinar a extensão de processamento.",
	"@@Boolean-Not_Raster_tag0@@": "A primeira entrada para utilizar nesta operação Boolean.",
	"@@Boolean-Or_Cellsize-Type_tag0@@": "Escolha que tamanho de célula deve ser utilizado no raster de saída. Se todos os tamanhos de célula de entrada forem os mesmos, todas as opções renderão os mesmos resultados.",
	"@@Boolean-Or_Cellsize-Type_tag1@@": "Primeiro De--Utiliza o primeiro tamanho de célula dos rasters de entrada.",
	"@@Boolean-Or_Cellsize-Type_tag2@@": "Último De--Utiliza o último tamanho de célula dos rasters de entrada.",
	"@@Boolean-Or_Cellsize-Type_tag3@@": "Máximo De--Utiliza o maior tamanho de célula de todos os rasters de entrada. Este é o padrão.",
	"@@Boolean-Or_Cellsize-Type_tag4@@": "Média De--Utiliza o tamanho médio de célula de todos os rasters de entrada.",
	"@@Boolean-Or_Cellsize-Type_tag5@@": "Mínimo De--Utiliza o menor tamanho de célula de todos os rasters de entrada.",
	"@@Boolean-Or_Extent-Type_tag0@@": "Escolha qual extensão deve ser utilizada no raster de saída:",
	"@@Boolean-Or_Extent-Type_tag1@@": "Primeiro De--Utiliza a extensão do primeiro raster de entrada para determinar a extensão de processamento.",
	"@@Boolean-Or_Extent-Type_tag2@@": "Intersecção De--Utiliza a extensão dos pixels de sobreposição para determinar a extensão de processamento. Este é o padrão.",
	"@@Boolean-Or_Extent-Type_tag3@@": "Última De--Utiliza a extensão do último raster de entrada para determinar a extensão de processamento.",
	"@@Boolean-Or_Extent-Type_tag4@@": "União De--Utiliza a extensão de todos os rasters para determinar a extensão de processamento.",
	"@@Boolean-Or_Raster_tag0@@": "A primeira entrada para utilizar nesta operação Boolean.",
	"@@Boolean-Or_Raster_tag1@@": "Um valor constante pode ser utilizado como uma entrada para este parâmetro, fornecendo um raster que é especificado para o outro parâmetro.",
	"@@Boolean-Or_Raster2_tag0@@": "A segunda entrada para utilizar nesta operação Boolean.",
	"@@Boolean-Or_Raster2_tag1@@": "Um valor constante pode ser utilizado como uma entrada para este parâmetro, fornecendo um raster que é especificado para o outro parâmetro.",
	"@@Boolean-Xor_Cellsize-Type_tag0@@": "Escolha que tamanho de célula deve ser utilizado no raster de saída. Se todos os tamanhos de célula de entrada forem os mesmos, todas as opções renderão os mesmos resultados.",
	"@@Boolean-Xor_Cellsize-Type_tag1@@": "Primeiro De--Utiliza o primeiro tamanho de célula dos rasters de entrada.",
	"@@Boolean-Xor_Cellsize-Type_tag2@@": "Último De--Utiliza o último tamanho de célula dos rasters de entrada.",
	"@@Boolean-Xor_Cellsize-Type_tag3@@": "Máximo De--Utiliza o maior tamanho de célula de todos os rasters de entrada. Este é o padrão.",
	"@@Boolean-Xor_Cellsize-Type_tag4@@": "Média De--Utiliza o tamanho médio de célula de todos os rasters de entrada.",
	"@@Boolean-Xor_Cellsize-Type_tag5@@": "Mínimo De--Utiliza o menor tamanho de célula de todos os rasters de entrada.",
	"@@Boolean-Xor_Extent-Type_tag0@@": "Escolha qual extensão deve ser utilizada no raster de saída:",
	"@@Boolean-Xor_Extent-Type_tag1@@": "Primeiro De--Utiliza a extensão do primeiro raster de entrada para determinar a extensão de processamento.",
	"@@Boolean-Xor_Extent-Type_tag2@@": "Intersecção De--Utiliza a extensão dos pixels de sobreposição para determinar a extensão de processamento. Este é o padrão.",
	"@@Boolean-Xor_Extent-Type_tag3@@": "Última De--Utiliza a extensão do último raster de entrada para determinar a extensão de processamento.",
	"@@Boolean-Xor_Extent-Type_tag4@@": "União De--Utiliza a extensão de todos os rasters para determinar a extensão de processamento.",
	"@@Boolean-Xor_Raster_tag0@@": "A primeira entrada para utilizar nesta operação Boolean.",
	"@@Boolean-Xor_Raster_tag1@@": "Um valor constante pode ser utilizado como uma entrada para este parâmetro, fornecendo um raster que é especificado para o outro parâmetro.",
	"@@Boolean-Xor_Raster2_tag0@@": "A segunda entrada para utilizar nesta operação Boolean.",
	"@@Boolean-Xor_Raster2_tag1@@": "Um valor constante pode ser utilizado como uma entrada para este parâmetro, fornecendo um raster que é especificado para o outro parâmetro.",
	"@@Buffered_Raster_tag0@@": "O raster de entrada a ser armazenado na memória.",
	"@@Calculator_Cellsize-Type_tag0@@": "O tamanho da célula utilizada para criar o raster de saída.",
	"@@Calculator_Cellsize-Type_tag1@@": "Você pode escolher o tamanho da célula de saída a partir das opções seguintes na lista suspensa:",
	"@@Calculator_Cellsize-Type_tag2@@": "<strong>Primeiro De</strong>--O tamanho de célula da primeira variável de raster.",
	"@@Calculator_Cellsize-Type_tag4@@": "<strong>Mínimo De</strong>--O tamanho de célula mínimo dos rasters de entrada.",
	"@@Calculator_Cellsize-Type_tag6@@": "<strong>Máximo De</strong>--O tamanho de célula máximo dos rasters de entrada.",
	"@@Calculator_Cellsize-Type_tag8@@": "<strong>Média De</strong>--O tamanho de célula média dos rasters de entrada.",
	"@@Calculator_Cellsize-Type_tag10@@": "<strong>Último De</strong>--O tamanho de célula da última variável de raster.",
	"@@Calculator_Cellsize-Type_tag12@@": "A seleção padrão é <strong>Máxima De</strong>.",
	"@@Calculator_Expression_tag0@@": "Construa uma expressão algébrica para executar análise espacial no raster de entrada.",
	"@@Calculator_Expression_tag1@@": "Todas as funções matemáticas existentes podem ser chamadas para construir a expressão. Os operadores disponíveis são listados abaixo.",
	"@@Calculator_Expression_tag2@@": "Operações Aritméticas",
	"@@Calculator_Expression_tag3@@": "Adição: +",
	"@@Calculator_Expression_tag4@@": "Divisão: /",
	"@@Calculator_Expression_tag5@@": "Modulo: %",
	"@@Calculator_Expression_tag6@@": "Multiplicação: *",
	"@@Calculator_Expression_tag7@@": "Potência: **",
	"@@Calculator_Expression_tag8@@": "Subtração: -",
	"@@Calculator_Expression_tag9@@": "Operações Booleanas",
	"@@Calculator_Expression_tag10@@": "E Booleano: &&",
	"@@Calculator_Expression_tag11@@": "Ou Booleano: ||",
	"@@Calculator_Expression_tag12@@": "Operações de Relação",
	"@@Calculator_Expression_tag13@@": "Igual A: ==",
	"@@Calculator_Expression_tag14@@": "Maior que: >",
	"@@Calculator_Expression_tag15@@": "Maior ou Igual a: >=",
	"@@Calculator_Expression_tag16@@": "Menor que: <",
	"@@Calculator_Expression_tag17@@": "Menor ou Igual a: <=",
	"@@Calculator_Expression_tag18@@": "Diferente de: !=",
	"@@Calculator_Expression_tag19@@": "Operações Adicionais",
	"@@Calculator_Expression_tag20@@": "Mínimo de dois rasters em uma base por pixel: min(a,b)",
	"@@Calculator_Expression_tag21@@": "Máximo de dois rasters em uma base por pixel: max(a,b)",
	"@@Calculator_Expression_tag22@@": "Aqui estão alguns exemplos de expressões:",
	"@@Calculator_Expression_tag23@@": "Instrução Condicional Simples: em um raster (denotado por T) localiza valores de elevação acima de 4.000 pés e fornece a estas áreas um valor de 1 e todas outras áreas um valor de 0.",
	"@@Calculator_Expression_tag24@@": "Con(T > 4000, 1, 0)",
	"@@Calculator_Expression_tag25@@": "Instrução Condicional Agrupada: localiza áreas onde o declive (denotado por b1)) está abaixo de 10 graus e NDVI (denotado por b2) está acima de 0.5 e fornece a estas áreas um valor de 1. Para todas outras áreas, atribua um valor de 2 se a declividade estiver acima de 10 graus e elevação (denotada por b3) estiver acima de 2.500 pés. Todas outras áreas tem um valor de 3 atribuída.",
	"@@Calculator_Expression_tag26@@": "Con((b1 < 10 && b2 > .5, 1, Con(b1 > 10 && b3 > 2500, 2, 3)))",
	"@@Calculator_extenttype_tag0@@": "<p>Escolha qual extensão deve ser usada no raster de saída:</p><ul><li><p>Primeiro De-Use a extensão do primeiro raster de entrada para determinar a extensão de processamento.</p></li><li>Intersecção De-Use a extensão dos pixels sobrepostos para determinar a extensão de processamento. Este é o padrão.</li><li>União De--Use a extensão de todos os rasters para determinar a extensão de processamento.</li><li>Último De--Use a extensão do último raster de entrada para determinar a extensão de processamento.</li></ul>",
	"@@Calculator_Raster-Variables_tag0@@": "O nome de variável definida pelo usuário e o raster de entrada.",
	"@@Classify_Input-Definition-File_tag0@@": "O arquivo de Definição do Classificador da Esri de entrada (${.ecd}) que contém a estatística e outras informações de classificação do conjunto de dados específico, classificador e atributos escolhidos.",
	"@@Classify_Raster_tag0@@": "O conjunto de dados raster que você deseja classificar.",
	"@@Classify_Raster2_tag0@@": "Um conjunto de dados raster subordinado opcional para incorporar no classificador, como uma imagem segmentada, imagem multispectral ou dados de elevação, utilizado para gerar uma definição de classificação mais robusta para seu conjunto de dados. O conjunto de dados raster deste o parâmetro deve corresponder ao utilizado para criar o arquivo de Definição do Classificador da Esri.",
	"@@Clip_Clipping-Geometry-or-Raster_tag0@@": "O seguinte pode ser utilizado para especificar a extensão de recorte:",
	"@@Clip_Clipping-Geometry-or-Raster_tag1@@": "<strong>Raster de Recorte</strong>--Extensão do raster de recorte",
	"@@Clip_Clipping-Geometry-or-Raster_tag3@@": "<strong>Extensão Personalizada</strong>--Coordenadas X e Y mínima e máxima",
	"@@Clip_Clipping-Geometry-or-Raster_tag5@@": "<strong>Extensão de Mapa Atual</strong>--Extensão da visualização do mapa atual",
	"@@Clip_Clipping-Raster_tag0@@": "A camada de raster para recortar.",
	"@@Clip_Clipping-Type_tag0@@": "Especifique se deseja reter a área de dentro ou de fora de sua geometria de recorte.",
	"@@Clip_Clipping-Type_tag1@@": "<strong>Recortar Dentro</strong>--Imagens dentro das extensões de recorte serão removidas.",
	"@@Clip_Clipping-Type_tag3@@": "<strong>Recortar Fora</strong>--Imagens fora das extensões de recorte serão removidas.",
	"@@Clip_Custom-Extent_tag0@@": "Especifique as quatro coordenadas que definem a extensão do caixa delimitadora utilizada para recortar o raster.",
	"@@Clip_Output-Extent_tag0@@": "As coordenadas x e y da extensão de recorte atual.",
	"@@Clip_Output-Extent_tag1@@": "O botão <strong>Capturar Extensão do Mapa Atual</strong> utiliza a extensão de visualização do mapa ativo.",
	"@@Clip_Raster_tag0@@": "A camada raster de entrada.",
	"@@Clip_Use-Input-Features-for-Clipping-Geometry_tag0@@": "Quando selecionado, os dados são recortados de acordo com a geometria da classe de feição especificada.",
	"@@Clip_Use-Input-Features-for-Clipping-Geometry_tag1@@": "Desmarcado--A função utiliza a geometria de recorte especificada pelo <strong>Retângulo</strong>. Este é o padrão.",
	"@@Clip_Use-Input-Features-for-Clipping-Geometry_tag4@@": "Marcado--A função utiliza a geometria de recorte definida por uma classe de feição.",
	"@@Color-Model-Conversion_Conversion-Type_tag0@@": "O tipo de conversão de cor para executar:",
	"@@Color-Model-Conversion_Conversion-Type_tag1@@": "HSV para RGB",
	"@@Color-Model-Conversion_Conversion-Type_tag2@@": "RGB para HSV",
	"@@Color-Model-Conversion_Raster_tag0@@": "O raster de entrada.",
	"@@Colormap_Color-Ramp_tag0@@": "Escolha uma rampa de cores pré-existente.",
	"@@Colormap_Color-Scheme-Type_tag0@@": "Escolha o tipo de esquema de cores para renderizar seu raster de entrada",
	"@@Colormap_Color-Scheme-Type_tag1@@": "Rampa de Cores--Utilize uma rampa de cores.",
	"@@Colormap_Color-Scheme-Type_tag2@@": "Mapa de cores--Utilize um mapa de cores pré-existente.",
	"@@Colormap_Colormap_tag0@@": "Os seguintes mapas de cores padrão estão disponíveis a partir da lista suspensa:",
	"@@Colormap_Colormap_tag1@@": "Elevação--Uma mapa de cores que altera gradualmente de ciano para roxo para preto.",
	"@@Colormap_Colormap_tag2@@": "Cinza--Um mapa de cores que altera gradualmente de preto para branco.",
	"@@Colormap_Colormap_tag7@@": "Relevo Sombreado--Um mapa colorido em escala de cinza para visualizar uma representação 3D da superfície do terreno, com a posição relativa do Sol levada em consideração para sombrear a imagem.",
	"@@Colormap_Colormap_tag3@@": "NDVI--Um mapa de cores para visualizar vegetação. Valores próximos de zero são azul. Os valores baixos são marrons. Então as cores alteram gradualmente de vermelho, para laranja, para amarelo, para verde e para preto já que o índice de vegetação vai de baixo para alto.",
	"@@Colormap_Colormap_tag4@@": "NDVI2--Um mapa de cores para visualizar vegetação. Os valores baixos variam de branco para verde. Então as cores variam de cinza, para roxo, para violeta, para azul escuro e para preto já que o índice de vegetação vai de baixo para alto.",
	"@@Colormap_Colormap_tag5@@": "NDVI3--Um mapa de cores para visualizar vegetação. Valores próximos de zero são azul. Então as cores alteram gradualmente de vermelho, para laranja e para verde já que o índice de vegetação vai de baixo para alto.",
	"@@Colormap_Colormap_tag6@@": "Aleatório--Um mapa de cores aleatório.",
	"@@Colormap_Raster_tag0@@": "O raster de entrada.",
	"@@Colormap-To-RGB_Raster_tag0@@": "O raster de mapa de cores de entrada.",
	"@@Complex_Raster_tag0@@": "O raster de entrada.",
	"@@Composite-Bands_Rasters_tag0@@": "Utilize a lista suspensa ou o botão <strong>Procurar</strong> para escolher as entradas do raster.",
	"@@Composite-Bands_cellsizetype_tag0@@": "<p>Escolha qual tamanho de célula usar no raster de saída. Se todos os tamanhos de células de entrada forem iguais, todas as opções produzirão os mesmos resultados.</p><ul><li>Primeiro De--Use o tamanho da primeira célula dos rasters de entrada.</li><li>Mín De--Use o menor tamanho de célula de todos os rasters de entrada.</li><li>Máx De--Use o maior tamanho de célula de todos os rasters de entrada. Este é o padrão.</li><li>Média De--Use o tamanho médio da célula de todos os rasters de entrada.</li><li>Último De--Use o tamanho da última célula dos rasters de entrada.</li></ul>",
	"@@Con-function_Cellsize-Type_tag0@@": "Escolha que tamanho de célula deve ser utilizado no raster de saída. Se todos os tamanhos de célula de entrada forem os mesmos, todas as opções renderão os mesmos resultados.",
	"@@Con-function_Cellsize-Type_tag1@@": "Primeiro De--Utiliza o primeiro tamanho de célula dos rasters de entrada.",
	"@@Con-function_Cellsize-Type_tag2@@": "Último De--Utiliza o último tamanho de célula dos rasters de entrada.",
	"@@Con-function_Cellsize-Type_tag3@@": "Máximo De--Utiliza o maior tamanho de célula de todos os rasters de entrada. Este é o padrão.",
	"@@Con-function_Cellsize-Type_tag4@@": "Média De--Utiliza o tamanho médio de célula de todos os rasters de entrada.",
	"@@Con-function_Cellsize-Type_tag5@@": "Mínimo De--Utiliza o menor tamanho de célula de todos os rasters de entrada.",
	"@@Con_Extent-Type_tag0@@": "Escolha qual extensão deve ser utilizada no raster de saída:",
	"@@Con_Extent-Type_tag1@@": "Primeiro De--Utiliza a extensão do primeiro raster de entrada para determinar a extensão de processamento.",
	"@@Con_Extent-Type_tag2@@": "Intersecção De--Utiliza a extensão dos pixels de sobreposição para determinar a extensão de processamento. Este é o padrão.",
	"@@Con_Extent-Type_tag3@@": "Última De--Utiliza a extensão do último raster de entrada para determinar a extensão de processamento.",
	"@@Con_Extent-Type_tag4@@": "União De--Utiliza a extensão de todos os rasters para determinar a extensão de processamento.",
	"@@Con_False-Raster_tag0@@": "A entrada cujos valores serão utilizados como os valores de pixel de saída se a condição for falsa. Pode ser um raster inteiro, um de ponto flutuante ou um valor constante.",
	"@@Con_Raster_tag0@@": "O raster de entrada que representa o resultado Boolean de uma função de raster matemática lógica. Os valores serão 1 (para verdadeiro) ou 0 (para falso). Pode ser um raster inteiro ou de ponto flutuante.",
	"@@Con_True-Raster_tag0@@": "A entrada cujos valores serão utilizados como os valores de pixel de saída se a condição for verdadeira. Pode ser um raster inteiro, um de ponto flutuante ou um valor constante.",
	"@@Constant_Constant_tag0@@": "O valor da constante a ser adicionada ao raster virtual.",
	"@@Constant_Raster-Info_tag0@@": "Utilize o botão <strong>Carregar raster de modelo</strong> para carregar um modelo de um diretório ou portal.",
	"@@Contour_Adaptive-Smoothing_tag0@@": "A quantidade de suavização para aplicar na linha da curva de nível. O valor padrão é 2.5.",
	"@@Contour_Adaptive-Smoothing_tag1@@": "Um valor menor produz uma linha da curva de nível com mais granularidade e menor suavização, enquanto um valor maior produz uma linha da curva de nível com mais suavização que aparece menos irregular.",
	"@@Contour_Contour-Interval_tag0@@": "A diferença em altitude entre as linhas da curva de nível.",
	"@@Contour_Contour-Interval_tag1@@": "Um pequeno intervalo da curva de nível é utilizado em áreas relativamente planas, enquanto intervalos da curva de nível maiores são utilizados em variáveis ou terrenos montanhosos.",
	"@@Contour_Contour-Type_tag0@@": "O tipo da curva de nível a ser criada:",
	"@@Contour_Contour-Type_tag1@@": "<strong>Preenchimento de curva de nível</strong>--Preenche a área entre cada linha da curva de nível com o valor de elevação quantificado.",
	"@@Contour_Contour-Type_tag3@@": "<strong>Linhas de curva de nível</strong>--Junta pontos de igual elevação para criar uma linha que representa elevação constante.",
	"@@Contour_Contour-Type_tag5@@": "<strong>Somente suavizar curva de nível</strong>--Suaviza a camada de elevação de entrada, mas não produz curvas de nível.",
	"@@Contour_Nth-Contour-Line-In-Bold_tag0@@": "A curva de nível de índice, que é representada como uma linha em negrito.",
	"@@Contour_Nth-Contour-Line-In-Bold_tag1@@": "O valor padrão é 5; deste modo, cada 5ª linha da curva de nível está em negrito.",
	"@@Contour_Number-Of-Contours_tag0@@": "O número de curvas de nível a serem geradas na visualização. Isto ajusta dinamicamente o intervalo da curva de nível para ajustar o terreno na visualização enquanto mantém intervalos padronizados, como 1, 5, 10 e assim por diante.",
	"@@Contour_Raster_tag0@@": "Um conjunto de dados raster de elevação de única banda.",
	"@@Contour_Z-Base_tag0@@": "O valor da curva de nível base. As curvas de nível são geradas acima e abaixo deste valor conforme necessário para cobrir o intervalo de valor inteiro do raster de entrada. O padrão é 0.",
	"@@Contour_Z-Base_tag1@@": "Um valor de 0 representa normalmente o nível médio do mar, dependendo do conjunto de dados de elevação de origem.",
	"@@Contour_Z-Factor_tag0@@": "O fator de conversão da unidade utilizado ao gerar as curvas de nível. O valor padrão é 1.",
	"@@Contour_Z-Factor_tag1@@": "As linhas da curva de nível são geradas com base em valores z no raster de entrada, que são normalmente medidas em unidades de metros ou pés. Com o valor padrão de 1, as curvas de nível estarão nas mesmas unidades dos valores z do raster de entrada. Para criar curvas de nível em uma unidade diferente daquelas em valores z, configure um valor apropriado para o fator z. Note que não é necessário ter a superfície x,y e as unidades z da superfície serem consistentes para esta ferramenta.",
	"@@Contour_Z-Factor_tag2@@": "Por exemplo, se os valores de elevação no seu raster de entrada estiverem em pés, mas você deseja que as curvas de nível sejam geradas com base nas unidades de metros, configure o fator z para 0.3048 (pois 1 pé = 0.3048 metros).",
	"@@Contrast-and-Brightness_Brightness-Offset_tag0@@": "Ajusta o brilho da camada raster.",
	"@@Contrast-and-Brightness_Brightness-Offset_tag1@@": "Você pode utilizar o controle deslizante para modificar o deslocamento de brilho ou você pode digitar um valor.",
	"@@Contrast-and-Brightness_Contrast-Offset_tag0@@": "Ajusta o contraste da camada raster.",
	"@@Contrast-and-Brightness_Contrast-Offset_tag1@@": "Você pode utilizar o controle deslizante para modificar o deslocamento de contraste ou você pode digitar um valor.",
	"@@Contrast-and-Brightness_Raster_tag0@@": "O raster de entrada para editar o brilho e contraste.",
	"@@Convolution_kernel_tag0@@": "<p>Esta tabela mostra como cada pixel será ponderado no processo de filtragem. Esta tabela pode ser editada se você escolher <strong>Usuário Definido</strong>como o<strong>Tipo</strong>.</p>",
	"@@Convolution_Raster_tag0@@": "O conjunto de dados raster de entrada.",
	"@@Convolution_Type_tag0@@": "Selecione o tipo de filtro que deseja criar. Há opções para nitidez, desfoque e detectar extremidades ou você pode definir seu próprio filtro baseado em núcleo",
	"@@Corridor_Distance-Raster-1_tag0@@": "O primeiro raster de distância de entrada. Devia ser uma saída de distância de custo acumulado  da Distância de Custo ou Distância do Caminho.",
	"@@Corridor_Distance-Raster-2_tag0@@": "O segundo raster de distância de entrada. Devia ser uma saída de distância de custo acumulado  da Distância de Custo ou Distância do Caminho.",
	"@@Cos_Cellsize-Type_tag0@@": "Escolha que tamanho de célula deve ser utilizado no raster de saída. Se todos os tamanhos de célula de entrada forem os mesmos, todas as opções renderão os mesmos resultados.",
	"@@Cos_Cellsize-Type_tag1@@": "Primeiro De--Utiliza o primeiro tamanho de célula dos rasters de entrada.",
	"@@Cos_Cellsize-Type_tag2@@": "Último De--Utiliza o último tamanho de célula dos rasters de entrada.",
	"@@Cos_Cellsize-Type_tag3@@": "Máximo De--Utiliza o maior tamanho de célula de todos os rasters de entrada. Este é o padrão.",
	"@@Cos_Cellsize-Type_tag4@@": "Média De--Utiliza o tamanho médio de célula de todos os rasters de entrada.",
	"@@Cos_Cellsize-Type_tag5@@": "Mínimo De--Utiliza o menor tamanho de célula de todos os rasters de entrada.",
	"@@Cos_Extent-Type_tag0@@": "Escolha qual extensão deve ser utilizada no raster de saída:",
	"@@Cos_Extent-Type_tag1@@": "Primeiro De--Utiliza a extensão do primeiro raster de entrada para determinar a extensão de processamento.",
	"@@Cos_Extent-Type_tag2@@": "Intersecção De--Utiliza a extensão dos pixels de sobreposição para determinar a extensão de processamento. Este é o padrão.",
	"@@Cos_Extent-Type_tag3@@": "Última De--Utiliza a extensão do último raster de entrada para determinar a extensão de processamento.",
	"@@Cos_Extent-Type_tag4@@": "União De--Utiliza a extensão de todos os rasters para determinar a extensão de processamento.",
	"@@Cos_Raster_tag0@@": "A entrada para calcular os valores co-seno.",
	"@@CosH_Cellsize-Type_tag0@@": "Escolha que tamanho de célula deve ser utilizado no raster de saída. Se todos os tamanhos de célula de entrada forem os mesmos, todas as opções renderão os mesmos resultados.",
	"@@CosH_Cellsize-Type_tag1@@": "Primeiro De--Utiliza o primeiro tamanho de célula dos rasters de entrada.",
	"@@CosH_Cellsize-Type_tag2@@": "Último De--Utiliza o último tamanho de célula dos rasters de entrada.",
	"@@CosH_Cellsize-Type_tag3@@": "Máximo De--Utiliza o maior tamanho de célula de todos os rasters de entrada. Este é o padrão.",
	"@@CosH_Cellsize-Type_tag4@@": "Média De--Utiliza o tamanho médio de célula de todos os rasters de entrada.",
	"@@CosH_Cellsize-Type_tag5@@": "Mínimo De--Utiliza o menor tamanho de célula de todos os rasters de entrada.",
	"@@CosH_Extent-Type_tag0@@": "Escolha qual extensão deve ser utilizada no raster de saída:",
	"@@CosH_Extent-Type_tag1@@": "Primeiro De--Utiliza a extensão do primeiro raster de entrada para determinar a extensão de processamento.",
	"@@CosH_Extent-Type_tag2@@": "Intersecção De--Utiliza a extensão dos pixels de sobreposição para determinar a extensão de processamento. Este é o padrão.",
	"@@CosH_Extent-Type_tag3@@": "Última De--Utiliza a extensão do último raster de entrada para determinar a extensão de processamento.",
	"@@CosH_Extent-Type_tag4@@": "União De--Utiliza a extensão de todos os rasters para determinar a extensão de processamento.",
	"@@CosH_Raster_tag0@@": "A entrada para calcular os valores de co-seno hiperbólico.",
	"@@Cost-Allocation_Accumulative-Cost-Resistance-Rate_tag0@@": "Este parâmetro simula o aumento no esforço para superar custos com os aumentos de custo acumulativo. É utilizado para modelar a fadiga do viajante. O custo acumulativo crescente para alcançar uma célula é multiplicado pela taxa de resistência e adicionado ao custo para movimento na célula subsequente.",
	"@@Cost-Allocation_Accumulative-Cost-Resistance-Rate_tag1@@": "É uma versão modificada de uma fórmula de taxa de juros composta que é utilizada para calcular o custo aparente de movimento de uma célula. Conforme o valor da taxa de resistência aumentar, ela aumentará o custo das células que forem visitadas posteriormente. Quanto maior a taxa de resistência, mais alto o custo para alcançar a próxima célula, que é composta de cada movimento subsequente. Já que a taxa de resistência é semelhante a uma taxa composta e geralmente os valores de custo acumulativo são muito grandes, taxas de resistência pequenas são sugeridas, tal como, 0.005 ou até menor, dependendo dos valores de custo acumulativo.",
	"@@Cost-Allocation_Accumulative-Cost-Resistance-Rate_tag2@@": "O valor deve ser maior que zero. A capacidade padrão é a extremidade do raster de saída.",
	"@@Cost-Allocation_Accumulative-Cost-Resistance-Rate_tag3@@": "Um valor numérico (duplo) ou um campo a partir do <strong>Raster de Origem</strong> pode ser utilizado para este parâmetro.",
	"@@Cost-Allocation_Capacity_tag0@@": "Define a capacidade de custo do viajante para uma origem. Os cálculos de custo continuam para cada origem até que a capacidade especificada seja alcançada.",
	"@@Cost-Allocation_Capacity_tag1@@": "O valor deve ser maior que zero. A capacidade padrão é a extremidade do raster de saída.",
	"@@Cost-Allocation_Capacity_tag2@@": "Um valor numérico (duplo) ou um campo a partir do <strong>Raster de Origem</strong> pode ser utilizado para este parâmetro.",
	"@@Cost-Allocation_Cost-Raster_tag0@@": "Um raster de entrada exigido definindo o custo ou impedância para mover de forma plana através de cada célula. O valor em cada local de célula representa a distância de unidade por custo para mover por ele. Cada valor de local da célula é multiplicado pela resolução da célula, e também compensando por movimento diagonal para obter o custo total de passagem pela célula.",
	"@@Cost-Allocation_Cost-Raster_tag1@@": "Os valores do <strong>Raster de Custo</strong> podem ser inteiro ou ponto flutuante, mas eles não podem ser negativos ou zero.",
	"@@Cost-Allocation_Maximum-Distance_tag0@@": "O limite que os valores de custo acumulativo não podem exceder. Se um valor de distância de custo acumulativo exceder este valor, o valor de saída de local da célula será ${NoData}. A distância máxima define a extensão em que as distâncias de custo acumulativo são calculadas. A distância padrão é a extensão do raster de saída.",
	"@@Cost-Allocation_Multiplier-to-Apply-to-Costs_tag0@@": "Um multiplicador para aplicar aos valores de custo.",
	"@@Cost-Allocation_Multiplier-to-Apply-to-Costs_tag1@@": "Este parâmetro permite o controle do modo de viagem ou a magnitude em uma origem. Quanto maior o multiplicador, maior o custo para mover por cada célula.",
	"@@Cost-Allocation_Multiplier-to-Apply-to-Costs_tag2@@": "Os valores devem ser maiores que zero. O padrão é 1.",
	"@@Cost-Allocation_Multiplier-to-Apply-to-Costs_tag3@@": "Um valor numérico (duplo) ou um campo a partir do <strong>Raster de Origem</strong> pode ser utilizado para este parâmetro.",
	"@@Cost-Allocation_Source-Field_tag0@@": "O campo utilizado para atribuir valores para os locais de origem. Ele deve ser um tipo inteiro. Se o <strong>Raster de Valor</strong> foi configurado, os valores nesta entrada assumirão o comando de precedência de qualquer configuração do <strong>Campo de Origem</strong>.",
	"@@Cost-Allocation_Source-Raster_tag0@@": "O raster de entrada exigido de localizações de origem.",
	"@@Cost-Allocation_Source-Raster_tag1@@": "Este é um raster que identifica as células ou localizações de onde é calculada a menor distância de custo acumulada para cada localização da célula de saída.",
	"@@Cost-Allocation_Source-Raster_tag2@@": "Se a entrada <strong>Raster de Origem</strong> for de ponto flutuante, e <strong>Raster de Valor</strong> deve ser configurado, e ele deve ser um inteiro. O <strong>Raster de Valor</strong> assumirá o comando de precedência de qualquer configuração do <strong>Campo de Origem</strong>.",
	"@@Cost-Allocation_Start-Cost_tag0@@": "O custo de início para iniciar os cálculos de custo. Este parâmetro permite a especificação do custo fixo associado com uma origem. Em vez de iniciar a um custo de 0, o algoritmo de custo começará com o valor especificado.",
	"@@Cost-Allocation_Start-Cost_tag1@@": "O valor deve ser zero ou maior. O padrão é 0.",
	"@@Cost-Allocation_Travel-Direction_tag0@@": "Define a direção do viajante ao aplicar a taxa de resistência de origem e o custo inicial de origem.",
	"@@Cost-Allocation_Travel-Direction_tag1@@": "<strong>Da Origem</strong>—A taxa de resistência de origem e custo inicial de origem serão aplicados no início da origem de entrada e saindo para células diferentes da origem. Este é o padrão.",
	"@@Cost-Allocation_Travel-Direction_tag3@@": "<strong>Para Origem</strong>—A taxa de resistência de origem e custo inicial de origem serão aplicados no início de cada célula diferente da origem e movendo de volta para a origem de entrada.",
	"@@Cost-Allocation_Travel-Direction_tag5@@": "Especifique a palavra-chave <strong>Da Origem</strong> ou <strong>Para Origem</strong> , que será aplicada a todas as origens ou especifique um campo no <strong>Raster de Origem</strong> que contém as palavras-chaves para identificar a direção de viagem de cada origem. O campo deve conter a string ${FROM_SOURCE} ou ${TO_SOURCE}.",
	"@@Cost-Allocation_Value-Raster_tag0@@": "O raster inteiro de entrada que identifica os valores de zona a serem utilizados para cada localização de origem de entrada. Para cada célula do local de origem, o valor definido pelo <strong>Raster de Valor</strong> será atribuído para todas as células alocadas no local de origem do cálculo. O <strong>Raster de Valor</strong> assumirá o comando de precedência de qualquer configuração do <strong>Campo de Origem</strong>.",
	"@@Cost-Back-Link_Accumulative-Cost-Resistance-Rate_tag0@@": "Este parâmetro simula o aumento no esforço para superar custos com os aumentos de custo acumulativo. É utilizado para modelar a fadiga do viajante. O custo acumulativo crescente para alcançar uma célula é multiplicado pela taxa de resistência e adicionado ao custo para movimento na célula subsequente.",
	"@@Cost-Back-Link_Accumulative-Cost-Resistance-Rate_tag1@@": "É uma versão modificada de uma fórmula de taxa de juros composta que é utilizada para calcular o custo aparente de movimento de uma célula. Conforme o valor da taxa de resistência aumentar, ela aumentará o custo das células que forem visitadas posteriormente. Quanto maior a taxa de resistência, mais alto o custo para alcançar a próxima célula, que é composta de cada movimento subsequente. Já que a taxa de resistência é semelhante a uma taxa composta e geralmente os valores de custo acumulativo são muito grandes, taxas de resistência pequenas são sugeridas, tal como, 0.005 ou até menor, dependendo dos valores de custo acumulativo.",
	"@@Cost-Back-Link_Accumulative-Cost-Resistance-Rate_tag2@@": "O valor deve ser maior que zero. A capacidade padrão é a extremidade do raster de saída.",
	"@@Cost-Back-Link_Accumulative-Cost-Resistance-Rate_tag3@@": "Um valor numérico (duplo) ou um campo a partir do <strong>Raster de Origem</strong> pode ser utilizado para este parâmetro.",
	"@@Cost-Back-Link_Capacity_tag0@@": "Define a capacidade de custo do viajante para uma origem. Os cálculos de custo continuam para cada origem até que a capacidade especificada seja alcançada.",
	"@@Cost-Back-Link_Capacity_tag1@@": "O valor deve ser maior que zero. A capacidade padrão é a extremidade do raster de saída.",
	"@@Cost-Back-Link_Capacity_tag2@@": "Um valor numérico (duplo) ou um campo a partir do <strong>Raster de Origem</strong> pode ser utilizado para este parâmetro.",
	"@@Cost-Back-Link_Cost-Raster_tag0@@": "Um raster de entrada exigido definindo o custo ou impedância para mover de forma plana através de cada célula. O valor em cada local de célula representa a distância de unidade por custo para mover por ele. Cada valor de local da célula é multiplicado pela resolução da célula, e também compensando por movimento diagonal para obter o custo total de passagem pela célula.",
	"@@Cost-Back-Link_Cost-Raster_tag1@@": "Os valores do <strong>Raster de Custo</strong> podem ser inteiro ou ponto flutuante, mas eles não podem ser negativos ou zero.",
	"@@Cost-Back-Link_Maximum-Distance_tag0@@": "O limite que os valores de custo acumulativo não podem exceder. Se um valor de distância de custo acumulativo exceder este valor, o valor de saída de local da célula será NoData. A distância máxima define a extensão em que as distâncias de custo acumulativo são calculadas. A distância padrão é a extensão do raster de saída.",
	"@@Cost-Back-Link_Multiplier-to-Apply-to-Costs_tag0@@": "Um multiplicador para aplicar aos valores de custo.",
	"@@Cost-Back-Link_Multiplier-to-Apply-to-Costs_tag1@@": "Este parâmetro permite o controle do modo de viagem ou a magnitude em uma origem. Quanto maior o multiplicador, maior o custo para mover por cada célula.",
	"@@Cost-Back-Link_Multiplier-to-Apply-to-Costs_tag2@@": "Os valores devem ser maiores que zero. O padrão é 1.",
	"@@Cost-Back-Link_Multiplier-to-Apply-to-Costs_tag3@@": "Um valor numérico (duplo) ou um campo a partir do <strong>Raster de Origem</strong> pode ser utilizado para este parâmetro.",
	"@@Cost-Back-Link_Source-Raster_tag0@@": "O raster de entrada exigido de localizações de origem.",
	"@@Cost-Back-Link_Source-Raster_tag1@@": "Este é um raster que identifica as células ou localizações de onde é calculada a menor distância de custo acumulada para cada localização da célula de saída.",
	"@@Cost-Back-Link_Start-Cost_tag0@@": "O custo de início para iniciar os cálculos de custo. Este parâmetro permite a especificação do custo fixo associado com uma origem. Em vez de iniciar a um custo de 0, o algoritmo de custo começará com o valor especificado.",
	"@@Cost-Back-Link_Start-Cost_tag1@@": "O valor deve ser zero ou maior. O padrão é 0.",
	"@@Cost-Back-Link_Travel-Direction_tag0@@": "Define a direção do viajante ao aplicar a taxa de resistência de origem e o custo inicial de origem.",
	"@@Cost-Back-Link_Travel-Direction_tag1@@": "<strong>Da Origem</strong>—A taxa de resistência de origem e custo inicial de origem serão aplicados no início da origem de entrada e saindo para células diferentes da origem. Este é o padrão.",
	"@@Cost-Back-Link_Travel-Direction_tag3@@": "<strong>Para Origem</strong>—A taxa de resistência de origem e custo inicial de origem serão aplicados no início de cada célula diferente da origem e movendo de volta para a origem de entrada.",
	"@@Cost-Back-Link_Travel-Direction_tag5@@": "Especifique a palavra-chave <strong>Da Origem</strong> ou <strong>Para Origem</strong> , que será aplicada a todas as origens ou especifique um campo no <strong>Raster de Origem</strong> que contém as palavras-chaves para identificar a direção de viagem de cada origem. O campo deve conter a string ${FROM_SOURCE} ou ${TO_SOURCE}.",
	"@@Cost-Distance_Accumulative-Cost-Resistance-Rate_tag0@@": "Este parâmetro simula o aumento no esforço para superar custos com os aumentos de custo acumulativo. É utilizado para modelar a fadiga do viajante. O custo acumulativo crescente para alcançar uma célula é multiplicado pela taxa de resistência e adicionado ao custo para movimento na célula subsequente.",
	"@@Cost-Distance_Accumulative-Cost-Resistance-Rate_tag1@@": "É uma versão modificada de uma fórmula de taxa de juros composta que é utilizada para calcular o custo aparente de movimento de uma célula. Conforme o valor da taxa de resistência aumentar, ela aumentará o custo das células que forem visitadas posteriormente. Quanto maior a taxa de resistência, mais alto o custo para alcançar a próxima célula, que é composta de cada movimento subsequente. Já que a taxa de resistência é semelhante a uma taxa composta e geralmente os valores de custo acumulativo são muito grandes, taxas de resistência pequenas são sugeridas, tal como, 0.005 ou até menor, dependendo dos valores de custo acumulativo.",
	"@@Cost-Distance_Accumulative-Cost-Resistance-Rate_tag2@@": "O valor deve ser maior que zero. A capacidade padrão é a extremidade do raster de saída.",
	"@@Cost-Distance_Accumulative-Cost-Resistance-Rate_tag3@@": "Um valor numérico (duplo) ou um campo a partir do <strong>Raster de Origem</strong> pode ser utilizado para este parâmetro.",
	"@@Cost-Distance_Capacity_tag0@@": "Define a capacidade de custo do viajante para uma origem. Os cálculos de custo continuam para cada origem até que a capacidade especificada seja alcançada.",
	"@@Cost-Distance_Capacity_tag1@@": "O valor deve ser maior que zero. A capacidade padrão é a extremidade do raster de saída.",
	"@@Cost-Distance_Capacity_tag2@@": "Um valor numérico (duplo) ou um campo a partir do <strong>Raster de Origem</strong> pode ser utilizado para este parâmetro.",
	"@@Cost-Distance_Cost-Raster_tag0@@": "Um raster de entrada exigido definindo o custo ou impedância para mover de forma plana através de cada célula. O valor em cada local de célula representa a distância de unidade por custo para mover por ele. Cada valor de local da célula é multiplicado pela resolução da célula, e também compensando por movimento diagonal para obter o custo total de passagem pela célula.",
	"@@Cost-Distance_Cost-Raster_tag1@@": "Os valores do <strong>Raster de Custo</strong> podem ser inteiro ou ponto flutuante, mas eles não podem ser negativos ou zero.",
	"@@Cost-Distance_Maximum-Distance_tag0@@": "O limite que os valores de custo acumulativo não podem exceder. Se um valor de distância de custo acumulativo exceder este valor, o valor de saída de local da célula será NoData. A distância máxima define a extensão em que as distâncias de custo acumulativo são calculadas. A distância padrão é a extensão do raster de saída.",
	"@@Cost-Distance_Multiplier-to-Apply-to-Costs_tag0@@": "Um multiplicador para aplicar aos valores de custo.",
	"@@Cost-Distance_Multiplier-to-Apply-to-Costs_tag1@@": "Este parâmetro permite o controle do modo de viagem ou a magnitude em uma origem. Quanto maior o multiplicador, maior o custo para mover por cada célula.",
	"@@Cost-Distance_Multiplier-to-Apply-to-Costs_tag2@@": "Os valores devem ser maiores que zero. O padrão é 1.",
	"@@Cost-Distance_Multiplier-to-Apply-to-Costs_tag3@@": "Um valor numérico (duplo) ou um campo a partir do <strong>Raster de Origem</strong> pode ser utilizado para este parâmetro.",
	"@@Cost-Distance_Source-Raster_tag0@@": "O raster de entrada exigido de localizações de origem.",
	"@@Cost-Distance_Source-Raster_tag1@@": "Este é um raster que identifica as células ou localizações de onde é calculada a menor distância de custo acumulada para cada localização da célula de saída.",
	"@@Cost-Distance_Start-Cost_tag0@@": "O custo de início para iniciar os cálculos de custo. Este parâmetro permite a especificação do custo fixo associado com uma origem. Em vez de iniciar a um custo de 0, o algoritmo de custo começará com o valor especificado.",
	"@@Cost-Distance_Start-Cost_tag1@@": "O valor deve ser zero ou maior. O padrão é 0.",
	"@@Cost-Distance_Travel-Direction_tag0@@": "Define a direção do viajante ao aplicar a taxa de resistência de origem e o custo inicial de origem.",
	"@@Cost-Distance_Travel-Direction_tag1@@": "<strong>Da Origem</strong>—A taxa de resistência de origem e custo inicial de origem serão aplicados no início da origem de entrada e saindo para células diferentes da origem. Este é o padrão.",
	"@@Cost-Distance_Travel-Direction_tag3@@": "<strong>Para Origem</strong>—A taxa de resistência de origem e custo inicial de origem serão aplicados no início de cada célula diferente da origem e movendo de volta para a origem de entrada.",
	"@@Cost-Distance_Travel-Direction_tag5@@": "Especifique a palavra-chave <strong>Da Origem</strong> ou <strong>Para Origem</strong> , que será aplicada a todas as origens ou especifique um campo no <strong>Raster de Origem</strong> que contém as palavras-chaves para identificar a direção de viagem de cada origem. O campo deve conter a string ${FROM_SOURCE} ou ${TO_SOURCE}.",
	"@@Curvature_Curvature-Type_tag0@@": "O tipo de curvatura acentua diferentes aspectos da declividade. Há três opções de curvatura:",
	"@@Curvature_Curvature-Type_tag1@@": "Forma Plana--É perpendicular à direção de declividade máxima. Isto afeta a convergência e divergência do fluxo através da superfície.",
	"@@Curvature_Curvature-Type_tag2@@": "Perfil--É paralelo à declividade e indica a direção de declividade máxima. Isto afeta a aceleração e desaceleração do fluxo através da superfície.",
	"@@Curvature_Curvature-Type_tag3@@": "Padrão--Combina ambas as curvaturas de <strong>Perfil</strong> e <strong>Forma Plana</strong>.",
	"@@Curvature_DEM_tag0@@": "Um raster do modelo digital e elevação (DEM).",
	"@@Curvature_Z-Factor_tag0@@": "O fator z ajusta as unidades de medida para as unidades z quando elas forem diferentes de unidades x,y da superfície de entrada. Se as unidades x,y e unidades z estiverem nas mesmas unidades de medida, o fator z será 1. Os valores z da superfície de entrada são multiplicados pelo fator z ao calcular a superfície de saída final. Por exemplo, se as suas unidades z estiverem em pés e suas unidades x,y em metros, você utilizará um fator z de 0.3048 para converter suas unidades z de pés para metros , pé = 0.3048 metros.",
	"@@Divide_Cellsize-Type_tag0@@": "Escolha que tamanho de célula deve ser utilizado no raster de saída. Se todos os tamanhos de célula de entrada forem os mesmos, todas as opções renderão os mesmos resultados.",
	"@@Divide_Cellsize-Type_tag1@@": "Primeiro De--Utiliza o primeiro tamanho de célula dos rasters de entrada.",
	"@@Divide_Cellsize-Type_tag2@@": "Último De--Utiliza o último tamanho de célula dos rasters de entrada.",
	"@@Divide_Cellsize-Type_tag3@@": "Máximo De--Utiliza o maior tamanho de célula de todos os rasters de entrada. Este é o padrão.",
	"@@Divide_Cellsize-Type_tag4@@": "Média De--Utiliza o tamanho médio de célula de todos os rasters de entrada.",
	"@@Divide_Cellsize-Type_tag5@@": "Mínimo De--Utiliza o menor tamanho de célula de todos os rasters de entrada.",
	"@@Divide_Extent-Type_tag0@@": "Escolha qual extensão deve ser utilizada no raster de saída:",
	"@@Divide_Extent-Type_tag1@@": "Primeiro De--Utiliza a extensão do primeiro raster de entrada para determinar a extensão de processamento.",
	"@@Divide_Extent-Type_tag2@@": "Intersecção De--Utiliza a extensão dos pixels de sobreposição para determinar a extensão de processamento. Este é o padrão.",
	"@@Divide_Extent-Type_tag3@@": "Última De--Utiliza a extensão do último raster de entrada para determinar a extensão de processamento.",
	"@@Divide_Extent-Type_tag4@@": "União De--Utiliza a extensão de todos os rasters para determinar a extensão de processamento.",
	"@@Divide_Raster_tag0@@": "A entrada cujo valor será dividido pela segunda entrada.",
	"@@Divide_Raster_tag1@@": "Um número pode ser utilizado como uma entrada deste parâmetro, fornecendo um raster que é especificado para ${Raster2}.",
	"@@Divide_Raster2_tag0@@": "A entrada cujo valor que será dividido pela primeira entrada.",
	"@@Divide_Raster2_tag1@@": "Um número pode ser utilizado como uma entrada deste parâmetro, fornecendo um raster que é especificado para ${Raster}.",
	"@@Elevation-Void-Fill_DEM_tag0@@": "O DEM de entrada.",
	"@@Elevation-Void-Fill_Max-Void-Width_tag0@@": "O valor máximo de largura do vazio é utilizado para especificar o maior tamanho de um vazio que você deseja preencher. Se a largura ou a altura da caixa delimitadora em torno do vazio for maior que o valor máximo de largura do vazio, o vazio não será preenchido. As unidades deste parâmetro são as mesmas das unidades utilizadas no sistema de referência espacial.",
	"@@Elevation-Void-Fill_Max-Void-Width_tag1@@": "Se este parâmetro estiver em branco ou tiver um valor de ${0}, nenhuma largura máxima será utilizada, e todos os vazios serão preenchidos. Um valor de ${-1} significa que não haverá preenchimento de vazio.",
	"@@Elevation-Void-Fill_Short-Range-IDW-Radius_tag0@@": "O raio de pesquisa máximo que será utilizado para preenchimento do vazio. Um vazio que estiver mais longe, de qualquer pixel válido, que este valor de limite, permanecerá como um vazio. As unidades deste parâmetro são as mesmas das unidades utilizadas no sistema de referência espacial.",
	"@@Elevation-Void-Fill_Short-Range-IDW-Radius_tag1@@": "Se o valor deste parâmetro estiver em branco,${0} ou ${-1} este parâmetro não será utilizado.",
	"@@Equal-to_Cellsize-Type_tag0@@": "Escolha que tamanho de célula deve ser utilizado no raster de saída. Se todos os tamanhos de célula de entrada forem os mesmos, todas as opções renderão os mesmos resultados.",
	"@@Equal-to_Cellsize-Type_tag1@@": "Primeiro De--Utiliza o primeiro tamanho de célula dos rasters de entrada.",
	"@@Equal-to_Cellsize-Type_tag2@@": "Último De--Utiliza o último tamanho de célula dos rasters de entrada.",
	"@@Equal-to_Cellsize-Type_tag3@@": "Máximo De--Utiliza o maior tamanho de célula de todos os rasters de entrada. Este é o padrão.",
	"@@Equal-to_Cellsize-Type_tag4@@": "Média De--Utiliza o tamanho médio de célula de todos os rasters de entrada.",
	"@@Equal-to_Cellsize-Type_tag5@@": "Mínimo De--Utiliza o menor tamanho de célula de todos os rasters de entrada.",
	"@@Equal-to_Extent-Type_tag0@@": "Escolha qual extensão deve ser utilizada no raster de saída:",
	"@@Equal-to_Extent-Type_tag1@@": "Primeiro De--Utiliza a extensão do primeiro raster de entrada para determinar a extensão de processamento.",
	"@@Equal-to_Extent-Type_tag2@@": "Intersecção De--Utiliza a extensão dos pixels de sobreposição para determinar a extensão de processamento. Este é o padrão.",
	"@@Equal-to_Extent-Type_tag3@@": "Última De--Utiliza a extensão do último raster de entrada para determinar a extensão de processamento.",
	"@@Equal-to_Extent-Type_tag4@@": "União De--Utiliza a extensão de todos os rasters para determinar a extensão de processamento.",
	"@@Equal-to_Raster_tag0@@": "A entrada que será utilizada pela comparação por igualdade pela segunda entrada.",
	"@@Equal-to_Raster_tag1@@": "Um valor constante pode ser utilizado como uma entrada para este parâmetro, fornecendo um raster que é especificado para o outro parâmetro.",
	"@@Equal-to_Raster2_tag0@@": "A entrada que será utilizada pela comparação por igualdade pela primeira entrada.",
	"@@Equal-to_Raster2_tag1@@": "Um valor constante pode ser utilizado como uma entrada para este parâmetro, fornecendo um raster que é especificado para o outro parâmetro.",
	"@@Euclidean-Allocation_Cellsize_tag0@@": "O tamanho da célula na qual o raster de saída será criado.",
	"@@Euclidean-Allocation_Cellsize_tag1@@": "Se o tamanho de célula foi explicitamente definido nos <strong>Ambientes</strong>, que serão o tamanho de célula padrão. Se não foi configurado, o tamanho da célula de saída será o mesmo que o <strong>Raster de Origem</strong>.",
	"@@Euclidean-Allocation_Distance-Method_tag0@@": "Determina o cálculo da distância utilizando um método plano (Terra plana) ou um método geodésico (elipsóide).",
	"@@Euclidean-Allocation_Distance-Method_tag1@@": "Geodésico--A linha mais curta entre dois pontos na superfície da Terra em um esferóide (elipsóide). Portanto, não importando a projeção de entrada ou de saída, os resultados não alteram. Um uso para uma linha geodésica é quando você deseja determinar a menor distância entre duas cidades para a trajetória de voo de um avião. Isto também é conhecido como uma linha de grande círculo se for baseada em uma esfera e não em um elipsóide.",
	"@@Euclidean-Allocation_Distance-Method_tag2@@": "Planar--As medições planares utilizam matemáticas Cartesianas 2D para calcular área e comprimento. A opção está disponível somente ao medir em um sistema de coordenadas planas e o plano 2D deste sistema de coordenadas será utilizado como base para as medições.",
	"@@Euclidean-Allocation_Maximum-Distance_tag0@@": "Define a distância de limite dentro da origem mais próxima que será determinada. Se a distância da fonte mais próxima exceder isto, a saída desta célula será ${NoData}.",
	"@@Euclidean-Allocation_Maximum-Distance_tag1@@": "A distância padrão é a extensão do raster de saída.",
	"@@Euclidean-Allocation_Raster-Barriers_tag0@@": "O raster que define as barreiras.",
	"@@Euclidean-Allocation_Raster-Barriers_tag1@@": "O conjunto de dados deve conter ${NoData} onde não houver barreiras. As barreiras são representadas por valores válidos, incluindo zero.",
	"@@Euclidean-Allocation_Raster-Barriers_tag2@@": "As barreiras podem definidas por um raster inteiro ou de ponto flutuante.",
	"@@Euclidean-Allocation_Source-Field_tag0@@": "O campo utilizado para atribuir valores para os locais de origem. Ele deve ser um tipo inteiro. Se o <strong>Raster de Valor</strong> foi configurado, os valores nesta entrada assumirão o comando de precedência de qualquer configuração do <strong>Campo de Origem</strong>.",
	"@@Euclidean-Allocation_Source-Raster_tag0@@": "Um raster de entrada exigido que identifica as localizações de origem. Baseado em distância Euclideana, a origem mais próxima será determinado para cada célula na saída",
	"@@Euclidean-Allocation_Source-Raster_tag1@@": "O tipo de entrada pode ser um tipo inteiro ou de ponto flutuante.",
	"@@Euclidean-Allocation_Value-Raster_tag0@@": "O raster inteiro de entrada que identifica os valores de zona a serem utilizados para cada localização de origem de entrada. Para cada célula do local de origem, o valor definido pelo <strong>Raster de Valor</strong> será atribuído para todas as células alocadas no local de origem do cálculo. O <strong>Raster de Valor</strong> assumirá o comando de precedência de qualquer configuração do <strong>Campo de Origem</strong>.",
	"@@Euclidean-Direction_Cellsize_tag0@@": "O tamanho da célula na qual o raster de saída será criado.",
	"@@Euclidean-Direction_Cellsize_tag1@@": "Se o tamanho de célula foi explicitamente definido nos <strong>Ambientes</strong>, que serão o tamanho de célula padrão. Se não foi configurado, o tamanho da célula de saída será o mesmo que o <strong>Raster de Origem</strong>.",
	"@@Euclidean-Direction_Distance-Method_tag0@@": "Determina o cálculo da distância utilizando um método plano (Terra plana) ou um método geodésico (elipsóide).",
	"@@Euclidean-Direction_Distance-Method_tag1@@": "Geodésico--A linha mais curta entre dois pontos na superfície da Terra em um esferóide (elipsóide). Portanto, não importando a projeção de entrada ou de saída, os resultados não alteram. Um uso para uma linha geodésica é quando você deseja determinar a menor distância entre duas cidades para a trajetória de voo de um avião. Isto também é conhecido como uma linha de grande círculo se for baseada em uma esfera e não em um elipsóide.",
	"@@Euclidean-Direction_Distance-Method_tag2@@": "Planar--As medições planares utilizam matemáticas Cartesianas 2D para calcular área e comprimento. A opção está disponível somente ao medir em um sistema de coordenadas planas e o plano 2D deste sistema de coordenadas será utilizado como base para as medições.",
	"@@Euclidean-Direction_Maximum-Distance_tag0@@": "Define a distância de limite dentro da direção até a origem mais próxima que será calculada. Se a distância da fonte mais próxima exceder isto, a saída desta célula será ${NoData}.",
	"@@Euclidean-Direction_Maximum-Distance_tag1@@": "A distância padrão é a extensão do raster de saída.",
	"@@Euclidean-Direction_Raster-Barriers_tag0@@": "O raster que define as barreiras.",
	"@@Euclidean-Direction_Raster-Barriers_tag1@@": "O conjunto de dados deve conter NoData, onde não há barreiras. As barreiras são representadas por valores válidos, incluindo zero.",
	"@@Euclidean-Direction_Raster-Barriers_tag2@@": "As barreiras podem definidas por um raster inteiro ou de ponto flutuante.",
	"@@Euclidean-Direction_Source-Raster_tag0@@": "O raster de entrada exigido que identifica as células ou locais onde a direção Euclideana de cada localização de célula de saída é calculada.",
	"@@Euclidean-Direction_Source-Raster_tag1@@": "O tipo de entrada pode ser um tipo inteiro ou de ponto flutuante.",
	"@@Euclidean-Distance_Cellsize_tag0@@": "O tamanho da célula na qual o raster de saída será criado.",
	"@@Euclidean-Distance_Cellsize_tag1@@": "Se o tamanho de célula foi explicitamente definido nos <strong>Ambientes</strong>, que serão o tamanho de célula padrão. Se não foi configurado, o tamanho da célula de saída será o mesmo que o <strong>Raster de Origem</strong>.",
	"@@Euclidean-Distance_Distance-Method_tag0@@": "Determina o cálculo da distância utilizando um método plano (Terra plana) ou um método geodésico (elipsóide).",
	"@@Euclidean-Distance_Distance-Method_tag1@@": "Geodésico--A linha mais curta entre dois pontos na superfície da Terra em um esferóide (elipsóide). Portanto, não importando a projeção de entrada ou de saída, os resultados não alteram. Um uso para uma linha geodésica é quando você deseja determinar a menor distância entre duas cidades para a trajetória de voo de um avião. Isto também é conhecido como uma linha de grande círculo se for baseada em uma esfera e não em um elipsóide.",
	"@@Euclidean-Distance_Distance-Method_tag2@@": "Planar--As medições planares utilizam matemáticas Cartesianas 2D para calcular área e comprimento. A opção está disponível somente ao medir em um sistema de coordenadas planas e o plano 2D deste sistema de coordenadas será utilizado como base para as medições.",
	"@@Euclidean-Distance_Maximum-Distance_tag0@@": "O limite que os valores de distância acumulativa não podem exceder. Se uma distância Euclidiana acumulativa exceder este valor, o valor de saída de local da célula será NoData.",
	"@@Euclidean-Distance_Maximum-Distance_tag1@@": "A distância padrão é a extensão do raster de saída.",
	"@@Euclidean-Distance_Raster-Barriers_tag0@@": "O raster que define as barreiras.",
	"@@Euclidean-Distance_Raster-Barriers_tag1@@": "O conjunto de dados deve conter ${NoData} onde não houver barreiras. As barreiras são representadas por valores válidos, incluindo zero.",
	"@@Euclidean-Distance_Raster-Barriers_tag2@@": "As barreiras podem definidas por um raster inteiro ou de ponto flutuante.",
	"@@Euclidean-Distance_Source-Raster_tag0@@": "O raster de entrada exigido que identifica as células ou locais onde a distância Euclideana de cada célula de saída é calculada.",
	"@@Euclidean-Distance_Source-Raster_tag1@@": "O tipo de entrada pode ser um tipo inteiro ou de ponto flutuante.",
	"@@Exp_Cellsize-Type_tag0@@": "Escolha que tamanho de célula deve ser utilizado no raster de saída. Se todos os tamanhos de célula de entrada forem os mesmos, todas as opções renderão os mesmos resultados.",
	"@@Exp_Cellsize-Type_tag1@@": "Primeiro De--Utiliza o primeiro tamanho de célula dos rasters de entrada.",
	"@@Exp_Cellsize-Type_tag2@@": "Último De--Utiliza o último tamanho de célula dos rasters de entrada.",
	"@@Exp_Cellsize-Type_tag3@@": "Máximo De--Utiliza o maior tamanho de célula de todos os rasters de entrada. Este é o padrão.",
	"@@Exp_Cellsize-Type_tag4@@": "Média De--Utiliza o tamanho médio de célula de todos os rasters de entrada.",
	"@@Exp_Cellsize-Type_tag5@@": "Mínimo De--Utiliza o menor tamanho de célula de todos os rasters de entrada.",
	"@@Exp_Extent-Type_tag0@@": "Escolha qual extensão deve ser utilizada no raster de saída:",
	"@@Exp_Extent-Type_tag1@@": "Primeiro De--Utiliza a extensão do primeiro raster de entrada para determinar a extensão de processamento.",
	"@@Exp_Extent-Type_tag2@@": "Intersecção De--Utiliza a extensão dos pixels de sobreposição para determinar a extensão de processamento. Este é o padrão.",
	"@@Exp_Extent-Type_tag3@@": "Última De--Utiliza a extensão do último raster de entrada para determinar a extensão de processamento.",
	"@@Exp_Extent-Type_tag4@@": "União De--Utiliza a extensão de todos os rasters para determinar a extensão de processamento.",
	"@@Exp_Raster_tag0@@": "Os valores de entrada para localizar a base e exponencial.",
	"@@Exp10_Cellsize-Type_tag0@@": "Escolha que tamanho de célula deve ser utilizado no raster de saída. Se todos os tamanhos de célula de entrada forem os mesmos, todas as opções renderão os mesmos resultados.",
	"@@Exp10_Cellsize-Type_tag1@@": "Primeiro De--Utiliza o primeiro tamanho de célula dos rasters de entrada.",
	"@@Exp10_Cellsize-Type_tag2@@": "Último De--Utiliza o último tamanho de célula dos rasters de entrada.",
	"@@Exp10_Cellsize-Type_tag3@@": "Máximo De--Utiliza o maior tamanho de célula de todos os rasters de entrada. Este é o padrão.",
	"@@Exp10_Cellsize-Type_tag4@@": "Média De--Utiliza o tamanho médio de célula de todos os rasters de entrada.",
	"@@Exp10_Cellsize-Type_tag5@@": "Mínimo De--Utiliza o menor tamanho de célula de todos os rasters de entrada.",
	"@@Exp10_Extent-Type_tag0@@": "Escolha qual extensão deve ser utilizada no raster de saída:",
	"@@Exp10_Extent-Type_tag1@@": "Primeiro De--Utiliza a extensão do primeiro raster de entrada para determinar a extensão de processamento.",
	"@@Exp10_Extent-Type_tag2@@": "Intersecção De--Utiliza a extensão dos pixels de sobreposição para determinar a extensão de processamento. Este é o padrão.",
	"@@Exp10_Extent-Type_tag3@@": "Última De--Utiliza a extensão do último raster de entrada para determinar a extensão de processamento.",
	"@@Exp10_Extent-Type_tag4@@": "União De--Utiliza a extensão de todos os rasters para determinar a extensão de processamento.",
	"@@Exp10_Raster_tag0@@": "Os valores de entrada para localizar a base 10 exponencial.",
	"@@Exp2_Cellsize-Type_tag0@@": "Escolha que tamanho de célula deve ser utilizado no raster de saída. Se todos os tamanhos de célula de entrada forem os mesmos, todas as opções renderão os mesmos resultados.",
	"@@Exp2_Cellsize-Type_tag1@@": "Primeiro De--Utiliza o primeiro tamanho de célula dos rasters de entrada.",
	"@@Exp2_Cellsize-Type_tag2@@": "Último De--Utiliza o último tamanho de célula dos rasters de entrada.",
	"@@Exp2_Cellsize-Type_tag3@@": "Máximo De--Utiliza o maior tamanho de célula de todos os rasters de entrada. Este é o padrão.",
	"@@Exp2_Cellsize-Type_tag4@@": "Média De--Utiliza o tamanho médio de célula de todos os rasters de entrada.",
	"@@Exp2_Cellsize-Type_tag5@@": "Mínimo De--Utiliza o menor tamanho de célula de todos os rasters de entrada.",
	"@@Exp2_Extent-Type_tag0@@": "Escolha qual extensão deve ser utilizada no raster de saída:",
	"@@Exp2_Extent-Type_tag1@@": "Primeiro De--Utiliza a extensão do primeiro raster de entrada para determinar a extensão de processamento.",
	"@@Exp2_Extent-Type_tag2@@": "Intersecção De--Utiliza a extensão dos pixels de sobreposição para determinar a extensão de processamento. Este é o padrão.",
	"@@Exp2_Extent-Type_tag3@@": "Última De--Utiliza a extensão do último raster de entrada para determinar a extensão de processamento.",
	"@@Exp2_Extent-Type_tag4@@": "União De--Utiliza a extensão de todos os rasters para determinar a extensão de processamento.",
	"@@Exp2_Raster_tag0@@": "Os valores de entrada para localizar a base 2 exponencial.",
	"@@Extract-Bands_Band_tag0@@": "Selecione as bandas para extrair de uma lista baseado na opção de parâmetro <strong>Método</strong> utilizado.",
	"@@Extract-Bands_Combination_tag0@@": "A combinação de banda ou ordem da banda. A lista de seleção depende na opção <strong>Método</strong> especificada. Por exemplo, se <strong>Método</strong> for <strong>Nomes de Banda</strong>, você pode selecionar uma combinação de Azul, Verde e Vermelho para extrair uma imagem de cor natural.",
	"@@Extract-Bands_Method_tag0@@": "Selecione um dos seguintes métodos para extrair bandas:",
	"@@Extract-Bands_Method_tag1@@": "<strong>IDs de Banda</strong>--A designação de banda ou número, que é único para cada sensor. Estes podem ser idênticos aos <strong>Nomes de Banda</strong>.",
	"@@Extract-Bands_Method_tag4@@": "<strong>Nomes da Banda</strong>--Utilize o nome de banda representando o intervalo de comprimento de onda no espectro eletromagnético (por exemplo, Vermelho, Próximo de Infra Vermelho, Infra Vermelho Térmico). Isto também pode ser designado como um ID de número de banda.",
	"@@Extract-Bands_Method_tag6@@": "<strong>Comprimentos de Ondas da Banda</strong>--O comprimentos de ondas no espectro eletromagnético.",
	"@@Extract-Bands_Missing-Band-Action_tag0@@": "Especifique a ação que ocorrerá quando uma banda dentro da lista de extração de banda não estiver disponível.",
	"@@Extract-Bands_Missing-Band-Action_tag1@@": "<strong>Melhor Correspondente</strong>--Localiza a melhor banda disponível para utilizar no lugar da banda ausente baseado em comprimento de onda, de forma que a função não falhará",
	"@@Extract-Bands_Missing-Band-Action_tag3@@": "<strong>Falha</strong>--Se o conjunto de dados de entrada estiver ausente, qualquer banda especificada no parâmetro <strong>Banda</strong>, a função falhará.",
	"@@Extract-Bands_Raster_tag0@@": "O produto raster do qual a banda ou bandas serão extraídos.",
	"@@Fill_Raster_tag0@@": "Um raster de elevação de única banda.",
	"@@Fill_Z-Limit_tag0@@": "A diferença de elevação máxima entre uma depressão e seu ponto de escoamento a ser preenchido.",
	"@@Fill_Z-Limit_tag1@@": "A menos que um valor seja especificado para este parâmetro, todas as depressões serão preenchidas, não importando a profundidade.",
	"@@Fill_Z-Limit_tag2@@": "O valor para <strong>Limite Z</strong> deve ser maior que zero.",
	"@@Float_Cellsize-Type_tag0@@": "Escolha que tamanho de célula deve ser utilizado no raster de saída. Se todos os tamanhos de célula de entrada forem os mesmos, todas as opções renderão os mesmos resultados.",
	"@@Float_Cellsize-Type_tag1@@": "Primeiro De--Utiliza o primeiro tamanho de célula dos rasters de entrada.",
	"@@Float_Cellsize-Type_tag2@@": "Último De--Utiliza o último tamanho de célula dos rasters de entrada.",
	"@@Float_Cellsize-Type_tag3@@": "Máximo De--Utiliza o maior tamanho de célula de todos os rasters de entrada. Este é o padrão.",
	"@@Float_Cellsize-Type_tag4@@": "Média De--Utiliza o tamanho médio de célula de todos os rasters de entrada.",
	"@@Float_Cellsize-Type_tag5@@": "Mínimo De--Utiliza o menor tamanho de célula de todos os rasters de entrada.",
	"@@Float_Extent-Type_tag0@@": "Escolha qual extensão deve ser utilizada no raster de saída:",
	"@@Float_Extent-Type_tag1@@": "Primeiro De--Utiliza a extensão do primeiro raster de entrada para determinar a extensão de processamento.",
	"@@Float_Extent-Type_tag2@@": "Intersecção De--Utiliza a extensão dos pixels de sobreposição para determinar a extensão de processamento. Este é o padrão.",
	"@@Float_Extent-Type_tag3@@": "Última De--Utiliza a extensão do último raster de entrada para determinar a extensão de processamento.",
	"@@Float_Extent-Type_tag4@@": "União De--Utiliza a extensão de todos os rasters para determinar a extensão de processamento.",
	"@@Float_Raster_tag0@@": "O raster de entrada a ser convertido para ponto flutuante.",
	"@@Flow-Accumulation_Flow-Direction-Raster_tag0@@": "O raster de entrada que mostra a direção do fluxo de cada célula.",
	"@@Flow-Accumulation_Flow-Direction-Raster_tag1@@": "O raster de direção do fluxo pode ser criado executando a função <strong>Direção do Fluxo</strong>.",
	"@@Flow-Accumulation_Flow-Direction-Type_tag0@@": "Define o tipo do raster de direção de fluxo de entrada.",
	"@@Flow-Accumulation_Flow-Direction-Type_tag1@@": "<strong>D8</strong>--O raster de direção de fluxo de entrada é de tipo D8. Este é o padrão.",
	"@@Flow-Accumulation_Flow-Direction-Type_tag3@@": "<strong>DINF</strong>--O raster de direção de fluxo de entrada é de tipo D-Infinity (DINF).",
	"@@Flow-Accumulation_Flow-Direction-Type_tag5@@": "<strong>MFD</strong>--O raster de direção de fluxo de entrada é de tipo Direção de Fluxo Múltiplo (MFD).",
	"@@Flow-Accumulation_Output-Data-Type_tag0@@": "O raster de acumulação de saída pode ser do tipo inteiro ou ponto flutuante.",
	"@@Flow-Accumulation_Output-Data-Type_tag1@@": "<strong>Flutuante</strong>--O raster de saída será do tipo ponto flutuante. Este é o padrão.",
	"@@Flow-Accumulation_Output-Data-Type_tag3@@": "<strong>Inteiro</strong>--O raster de saída será do tipo inteiro.",
	"@@Flow-Accumulation_Weight-Raster_tag0@@": "Um raster de entrada opcional para aplicar um peso para cada pixel.",
	"@@Flow-Accumulation_Weight-Raster_tag1@@": "Se nenhum raster peso for especificado, um peso padrão de 1 será aplicado a cada pixel.",
	"@@Flow-Direction_Flow-Direction-Type_tag0@@": "Define o tipo do raster de direção de fluxo de entrada.",
	"@@Flow-Direction_Flow-Direction-Type_tag1@@": "<strong>D8</strong>--O raster de direção de fluxo de entrada é de tipo D8. Este é o padrão.",
	"@@Flow-Direction_Flow-Direction-Type_tag3@@": "<strong>DINF</strong>--O raster de direção de fluxo de entrada é de tipo D-Infinity (DINF).",
	"@@Flow-Direction_Flow-Direction-Type_tag5@@": "<strong>MFD</strong>--O raster de direção de fluxo de entrada é de tipo Direção de Fluxo Múltiplo (MFD).",
	"@@Flow-Direction_Force-all-edge-cells-to-flow-outward_tag0@@": "Especifique se pixels de extremidade sempre irão fluir externamente ou seguir regras de fluxo normais.",
	"@@Flow-Direction_Force-all-edge-cells-to-flow-outward_tag1@@": "<strong>Não</strong>--Se a queda máxima no lado de dentro de um pixel de extremidade for maior que zero, a direção de fluxo será determinada como normal; caso contrário, a direção de fluxo será em direção à extremidade. Os pixels que devem fluir a partir da extremidade do raster de superfície até o lado de dentro seguirão. Este é o padrão.",
	"@@Flow-Direction_Force-all-edge-cells-to-flow-outward_tag3@@": "<strong>Sim</strong>--Todos os pixels na extremidade do raster de superfície irão fluir externamente a partir do raster de superfície.",
	"@@Flow-Direction_Raster_tag0@@": "O raster de entrada representando uma superfície de elevação contínua.",
	"@@Flow-Distance_Distance-Type_tag0@@": "Determine se o componente vertical ou horizontal da distância de fluxo será calculado.",
	"@@Flow-Distance_Distance-Type_tag1@@": "<strong>Horizontal</strong>--Os cálculos de distância de fluxo representam o componente horizontal da distância de fluxo de cada pixel no domínio para os pixels no fluxo em que eles fluem.",
	"@@Flow-Distance_Distance-Type_tag3@@": "<strong>Vertical</strong>--Os cálculos de distância de fluxo representam o componente vertical da distância de fluxo de cada pixel no domínio para os pixels no fluxo em que eles fluem. Este é o padrão.",
	"@@Flow-Distance_Flow-Direction-Raster_tag0@@": "O raster de entrada que mostra a direção do fluxo de cada pixel.",
	"@@Flow-Distance_Flow-Direction-Raster_tag1@@": "Quando um raster de direção de fluxo for fornecido, a direção de declividade será limitada para os definidos pelas direções de fluxo de entrada.",
	"@@Flow-Distance_Flow-Direction-Raster_tag2@@": "O raster de direção do fluxo pode ser criado utilizando a função Direção do Fluxo.",
	"@@Flow-Distance_Flow-Direction-Type_tag0@@": "Define o tipo do raster de direção de fluxo de entrada.",
	"@@Flow-Distance_Flow-Direction-Type_tag1@@": "<strong>D8</strong>--O raster de direção de fluxo de entrada é de tipo D8. Este é o padrão.",
	"@@Flow-Distance_Flow-Direction-Type_tag3@@": "<strong>DINF</strong>--O raster de direção de fluxo de entrada é de tipo D-Infinity (DINF).",
	"@@Flow-Distance_Flow-Direction-Type_tag5@@": "<strong>MFD</strong>--O raster de direção de fluxo de entrada é de tipo Direção de Fluxo Múltiplo (MFD).",
	"@@Flow-Distance_Statistics-Type_tag0@@": "Determina o tipo de estatística utilizado para computar distância de fluxo sobre os caminhos de fluxo múltiplos. Se houver somente um único caminho de fluxo de cada célula para uma célula no fluxo, todos tipos de estatísticas produzirão o mesmo resultado.",
	"@@Flow-Distance_Statistics-Type_tag1@@": "<strong>Mínimo</strong>--Onde houver caminhos de fluxo múltiplos, distância de fluxo mínima computada. Este é o padrão.",
	"@@Flow-Distance_Statistics-Type_tag3@@": "<strong>Média Ponderada</strong>--Onde houver caminhos de fluxo múltiplos, uma média ponderada de distância de fluxo é computada. Proporção de fluxo de uma célula para suas células a jusante vizinhas são utilizadas como pesos para computar a média ponderada.",
	"@@Flow-Distance_Statistics-Type_tag5@@": "<strong>Máximo</strong>--Quando houver caminhos de fluxo múltiplos, a distância de fluxo máxima é computada.",
	"@@Flow-Distance_Stream-Raster_tag0@@": "Um raster do fluxo de entrada que representa uma rede de fluxo linear.",
	"@@Flow-Distance_Surface-Raster_tag0@@": "O raster de entrada representando uma superfície de elevação contínua.",
	"@@Flow-Length_Direction-of-Measurement_tag0@@": "A direção de medida ao longo do caminho de fluxo.",
	"@@Flow-Length_Direction-of-Measurement_tag1@@": "<strong>Corrente Inativa</strong>--Calcula a distância de declividade ao longo do caminho de fluxo, de cada célula para uma depressão ou saída na extremidade do raster.",
	"@@Flow-Length_Direction-of-Measurement_tag3@@": "<strong>Corrente Ativa</strong>--Calcula a distância de aclive mais longa ao longo do caminho do fluxo, de cada célula até o a parte superior da divisão de drenagem.",
	"@@Flow-Length_Flow-Direction-Raster_tag0@@": "O raster de entrada que mostra a direção do fluxo de cada célula.",
	"@@Flow-Length_Flow-Direction-Raster_tag1@@": "O raster de direção do fluxo pode ser criado executando a função <strong>Direção do Fluxo</strong>.",
	"@@Flow-Length_Weight-Raster_tag0@@": "Um raster de entrada opcional para aplicar um peso para cada célula.",
	"@@Flow-Length_Weight-Raster_tag1@@": "Se nenhum raster peso for especificado, um peso padrão de 1 será aplicado a cada célula.",
	"@@Focal-Statistics_Ignore-NoData-in-calculations_tag0@@": "Denota se os valores ${NoData} são ignorados pelo cálculo estatístico.",
	"@@Focal-Statistics_Ignore-NoData-in-calculations_tag1@@": "<strong>Marcado</strong>--Especifica que se o valor ${NoData} existe dentro de uma vizinhança, o valor ${NoData} será ignorado. Somente células dentro da vizinhança que tenham valores de dados serão utilizadas em determinar o valor de saída. Este é o padrão.",
	"@@Focal-Statistics_Ignore-NoData-in-calculations_tag3@@": "<strong>Desmarcado</strong>--Especifica isto se qualquer célula em uma vizinhança tiver um valor ${NoData}, a saída da célula de processamento será ${NoData}.",
	"@@Focal-Statistics_Neighborhood_tag0@@": "O formato da área ao redor de cada célula utilizada para calcular a estatística.",
	"@@Focal-Statistics_Neighborhood_tag1@@": "Cada vizinhança tem parâmetros adicionais para definir a forma.",
	"@@Focal-Statistics_Neighborhood_tag2@@": "Anelar, Raio Interno, Raio Externo",
	"@@Focal-Statistics_Neighborhood_tag3@@": "Círculo, Raio",
	"@@Focal-Statistics_Neighborhood_tag4@@": "Valores Irregular, Largura, Altura, Vizinhança",
	"@@Focal-Statistics_Neighborhood_tag5@@": "Retângulo, Largura, Altura",
	"@@Focal-Statistics_Neighborhood_tag6@@": "Cunha, Raio, ângulo Inicial, ângulo Final",
	"@@Focal-Statistics_Neighborhood_tag7@@": "Valores de Peso, Largura, Altura, Vizinhança",
	"@@Focal-Statistics_Neighborhood_tag8@@": "A vizinhança de Irregular permite você especificar uma vizinhança formada irregularmente em torno da célula de processamento. Utilize a tabela de valores de Vizinhança para definir a forma do núcleo de vizinhança. Um valor de 0 para uma posição de célula indica que a célula não é parte da vizinhança e não será utilizada para processamento. Um valor de 1 indica que sua célula correspondente (e valor) seja um membro da vizinhança.",
	"@@Focal-Statistics_Neighborhood_tag9@@": "A vizinhança de Peso é semelhante ao tipo de vizinhança irregular, em que permite a você definir uma vizinhança irregular em torno da célula de processamento, mas ele permite a você aplicar pesos adicionalmente para os valores de entrada. Os valores no núcleo de peso especifica quais posições de célula devem ser incluídos dentro da vizinhança e os pesos pelos quais eles serão multiplicados. Utilize um valor de 0 para excluir uma célula de processamento. Positivo, negativo e valores decimais são todas as opções válidas para utilizar como um peso. Para o tipo de vizinhança de Peso, somente as estatísticas de Média, Desvio Padrão ou Soma são suportadas.",
	"@@Focal-Statistics_Percentile-Value_tag0@@": "Denota qual percentil calcular quando <strong>Percentil</strong> for selecionado como o tipo de estatística. O padrão é 90, para o percentil de 90°.",
	"@@Focal-Statistics_Percentile-Value_tag3@@": "Os valores podem variar de 0 até 100. O percentil 0° é equivalente essencialmente para a estatística Mínima e o percentil 100° equivalente ao Máximo, com a exceção que o resultado será de ponto flutuante. Um valor de 50 irá produzir essencialmente o mesmo resultado como a estatística Mediana.",
	"@@Focal-Statistics_Raster_tag0@@": "O raster de entrada exigido.",
	"@@Focal-Statistics_Statistics-Type_tag0@@": "A tipo de estatística a ser calculado.",
	"@@Focal-Statistics_Statistics-Type_tag1@@": "<strong>Maioria</strong>--Calcula a maioria (valor que ocorre com mais frequencia) das células na vizinhança.",
	"@@Focal-Statistics_Statistics-Type_tag3@@": "<strong>Máximo</strong>--Calcula o máximo (maior valor) das células na vizinhança.",
	"@@Focal-Statistics_Statistics-Type_tag5@@": "<strong>Média</strong>--Calcula a média (valor médio) das células na vizinhança.",
	"@@Focal-Statistics_Statistics-Type_tag7@@": "<strong>Mediano</strong>--Calcula a média das células na vizinhança.",
	"@@Focal-Statistics_Statistics-Type_tag9@@": "<strong>Mínimo</strong>--Calcula o mínimo (menor valor) das células na vizinhança.",
	"@@Focal-Statistics_Statistics-Type_tag11@@": "<strong>Minoria</strong>--Calcula a minoria (valor que ocorre com menos frequencia) das células na vizinhança.",
	"@@Focal-Statistics_Statistics-Type_tag13@@": "<strong>Percentil</strong>--Calcula um percentil das células na vizinhança. Você pode determinar qual percentil calcular com o parâmetro <strong>Valor Percentil</strong>.",
	"@@Focal-Statistics_Statistics-Type_tag17@@": "<strong>Intervalo</strong>--Calcula o intervalo (diferença entre valores maiores e menores) das células na vizinhança.",
	"@@Focal-Statistics_Statistics-Type_tag19@@": "<strong>Desvio Padrão</strong>--Calcula o desvio padrão das células na vizinhança.",
	"@@Focal-Statistics_Statistics-Type_tag21@@": "<strong>Soma</strong>--Calcula a soma (total de todos os valores) das células na vizinhança.",
	"@@Focal-Statistics_Statistics-Type_tag23@@": "<strong>Variedade</strong>--Calcula a variedade (o número de valores únicos) das células na vizinhança.",
	"@@Focal-Statistics_Statistics-Type_tag25@@": "Se o raster de entrada for ponto flutuante, somente os tipos estatísticos Média, Máximo, Mediano, Mínimo, Percentil, Intervalo, Desvio Padrão e Soma estão disponíveis.",
	"@@Focal-Statistics_Statistics-Type_tag26@@": "Para Média, Mediano, Percentil e Desvio Padrão, a saída é sempre de ponto flutuante.",
	"@@Focal-Statistics_Statistics-Type_tag27@@": "O tipo estatístico padrão é Média.",
	"@@Geometric_Constant-Z_tag0@@": "Especifique uma elevação constante para utilizar a função Geométrica.",
	"@@Geometric_DEM_tag0@@": "Especifique o DEM para utilizar para função Geométrica. Você pode utilizar um DEM contido no conjunto de dados do mosaico como um conjunto de dados raster ou como um conjunto de dados do mosaico cuja saída é um DEM.",
	"@@Geometric_Geoid_tag0@@": "A maior parte dos conjuntos de dados de elevação, tais como, USGS NED ou ArcGIS Online World Elevation, são alturas ortométricas, então é necessário selecionar a correção de Geóide para compatibilidade com satélite RPCs, que exige alturas de elipsóides. Marque a caixa de seleção <strong>Geóide</strong> para aplicar a correção de geóide (EGM96) para os valores z, a menos que seu DEM já esteja referenciado para alturas de elipsóides.",
	"@@Geometric_Method_tag0@@": "Escolha o método de elevação da função geométrica:",
	"@@Geometric_Method_tag1@@": "Utilizar Constante Z--Especifique uma elevação constante para executar a função Geométrica.",
	"@@Geometric_Method_tag2@@": "Utilizar Constante Z--Especifique uma elevação constante para executar a função Geométrica.",
	"@@Geometric_Raster_tag0@@": "O raster de entrada.",
	"@@Geometric_Z-Factor_tag0@@": "Coeficientes de satélite polinomiais racionais (RPCs) são dimensionados para conjunto de dados de elevação com as unidades verticais em metros. Se sua elevação utiliza outras unidades verticais, insira um <strong>Fator Z</strong> para redimensionar para metros. Por exemplo, se as suas unidades de elevação estiverem em pés, você utilizará um valor de 0.3048 para converter suas unidades de elevação de pés para metros.",
	"@@Geometric_Z-Offset_tag0@@": "O valor de base a ser adicionado ao valor de elevação no DEM. Este pode ser utilizado para valores de elevação do deslocamento que não começam no nível do mar.",
	"@@Geometric_Tolerance_tag0@@": "Especifique o erro máximo tolerável na função geométrica, dado em número de pixels. O padrão para o tipo raster NITF (NCDRD) é dois.",
	"@@Grayscale_Raster_tag0@@": "O raster de entrada.",
	"@@Grayscale_Conversion-Parameters_tag0@@": "Os pesos de cada uma das bandas incluindo o raster de entrada.",
	"@@Greater-Than_Cellsize-Type_tag0@@": "Escolha que tamanho de célula deve ser utilizado no raster de saída. Se todos os tamanhos de célula de entrada forem os mesmos, todas as opções renderão os mesmos resultados.",
	"@@Greater-Than_Cellsize-Type_tag1@@": "Primeiro De--Utiliza o primeiro tamanho de célula dos rasters de entrada.",
	"@@Greater-Than_Cellsize-Type_tag2@@": "Último De--Utiliza o último tamanho de célula dos rasters de entrada.",
	"@@Greater-Than_Cellsize-Type_tag3@@": "Máximo De--Utiliza o maior tamanho de célula de todos os rasters de entrada. Este é o padrão.",
	"@@Greater-Than_Cellsize-Type_tag4@@": "Média De--Utiliza o tamanho médio de célula de todos os rasters de entrada.",
	"@@Greater-Than_Cellsize-Type_tag5@@": "Mínimo De--Utiliza o menor tamanho de célula de todos os rasters de entrada.",
	"@@Greater-Than_Extent-Type_tag0@@": "Escolha qual extensão deve ser utilizada no raster de saída:",
	"@@Greater-Than_Extent-Type_tag1@@": "Primeiro De--Utiliza a extensão do primeiro raster de entrada para determinar a extensão de processamento.",
	"@@Greater-Than_Extent-Type_tag2@@": "Intersecção De--Utiliza a extensão dos pixels de sobreposição para determinar a extensão de processamento. Este é o padrão.",
	"@@Greater-Than_Extent-Type_tag3@@": "Última De--Utiliza a extensão do último raster de entrada para determinar a extensão de processamento.",
	"@@Greater-Than_Extent-Type_tag4@@": "União De--Utiliza a extensão de todos os rasters para determinar a extensão de processamento.",
	"@@Greater-Than_Raster_tag0@@": "A entrada sendo testada para determinar se ela for maior que a segunda entrada.",
	"@@Greater-Than_Raster_tag1@@": "Um valor constante pode ser utilizado como uma entrada para este parâmetro, fornecendo um raster que é especificado para o outro parâmetro.",
	"@@Greater-Than_Raster2_tag0@@": "A entrada em que a primeira entrada é testada para ser maior.",
	"@@Greater-Than_Raster2_tag1@@": "Um valor constante pode ser utilizado como uma entrada para este parâmetro, fornecendo um raster que é especificado para o outro parâmetro.",
	"@@Greater-Than-Equal_Cellsize-Type_tag0@@": "Escolha que tamanho de célula deve ser utilizado no raster de saída. Se todos os tamanhos de célula de entrada forem os mesmos, todas as opções renderão os mesmos resultados.",
	"@@Greater-Than-Equal_Cellsize-Type_tag1@@": "Primeiro De--Utiliza o primeiro tamanho de célula dos rasters de entrada.",
	"@@Greater-Than-Equal_Cellsize-Type_tag2@@": "Último De--Utiliza o último tamanho de célula dos rasters de entrada.",
	"@@Greater-Than-Equal_Cellsize-Type_tag3@@": "Máximo De--Utiliza o maior tamanho de célula de todos os rasters de entrada. Este é o padrão.",
	"@@Greater-Than-Equal_Cellsize-Type_tag4@@": "Média De--Utiliza o tamanho médio de célula de todos os rasters de entrada.",
	"@@Greater-Than-Equal_Cellsize-Type_tag5@@": "Mínimo De--Utiliza o menor tamanho de célula de todos os rasters de entrada.",
	"@@Greater-Than-Equal_Extent-Type_tag0@@": "Escolha qual extensão deve ser utilizada no raster de saída:",
	"@@Greater-Than-Equal_Extent-Type_tag1@@": "Primeiro De--Utiliza a extensão do primeiro raster de entrada para determinar a extensão de processamento.",
	"@@Greater-Than-Equal_Extent-Type_tag2@@": "Intersecção De--Utiliza a extensão dos pixels de sobreposição para determinar a extensão de processamento. Este é o padrão.",
	"@@Greater-Than-Equal_Extent-Type_tag3@@": "Última De--Utiliza a extensão do último raster de entrada para determinar a extensão de processamento.",
	"@@Greater-Than-Equal_Extent-Type_tag4@@": "União De--Utiliza a extensão de todos os rasters para determinar a extensão de processamento.",
	"@@Greater-Than-Equal_Raster_tag0@@": "A entrada sendo testada para determinar se ela for maior ou igual que a segunda entrada.",
	"@@Greater-Than-Equal_Raster_tag1@@": "Um valor constante pode ser utilizado como uma entrada para este parâmetro, fornecendo um raster que é especificado para o outro parâmetro.",
	"@@Greater-Than-Equal_Raster2_tag0@@": "A entrada em que a primeira entrada é testada para ser maior que ou igual a.",
	"@@Greater-Than-Equal_Raster2_tag1@@": "Um valor constante pode ser utilizado como uma entrada para este parâmetro, fornecendo um raster que é especificado para o outro parâmetro.",
	"@@Heat-Index_Heat-Index-Units_tag0@@": "A unidade de medida associada com o raster de saída. As unidades de saída disponíveis são Celsius, Fahrenheit e Kelvin.",
	"@@Heat-Index_Relative-Humidity-Raster_tag0@@": "Um raster de banda única onde os valores de pixel representam umidade relativa como um valor de porcentagem entre 0 e 100.",
	"@@Heat-Index_Temperature-Raster_tag0@@": "Um raster de banda única onde os valores de pixel representam a temperatura do ar.",
	"@@Heat-Index_Temperature-Units_tag0@@": "A unidade de medida associada com o raster de temperatura de entrada. As unidades de entrada disponíveis são Celsius, Fahrenheit e Kelvin.",
	"@@Hillshade_Altitude_tag0@@": "A altitude é o ângulo de elevação do sol acima do horizonte e intervalos de 0 a 90 graus. Um valor de 0 graus indica que o sol está no horizonte, isto é, no avião horizontal mesmo que a borda de referência. Um valor de 90 graus indica que o sol está diretamente acima",
	"@@Hillshade_Altitude_tag1@@": "Este parâmetro é somente válido quando <strong>Tipo de  Relevo Sombreado</strong> for <strong>Tradicional</strong> . O padrão é 45 graus acima do horizonte.",
	"@@Hillshade_Azimuth_tag0@@": "O azimute é a posição relativa do sol ao longo do horizonte (em graus). Esta posição é indicada pelo ângulo do sol medido à direita ao norte. Um azimute de 0 graus indica norte, o leste é 90 graus, sul é 180 graus e oeste é 270 graus.",
	"@@Hillshade_Azimuth_tag1@@": "Este parâmetro é somente válido quando <strong>Tipo de  Relevo Sombreado</strong> for <strong>Tradicional</strong> . O padrão é 315 graus, que é a partir do noroeste.",
	"@@Hillshade_Disable-default-edge-pixel-interpolation_tag0@@": "A utilização desta opção evita quaisquer artefatos de reamostragem que podem ocorrer ao longo das extremidades de um raster. Os pixels de saída ao longo da extremidade de um raster ou ao lado dos pixels sem um valor serão preenchidos com NoData; portanto, é recomendado que esta opção seja utilizada com conjuntos de dados de mosaico de elevação que tenham sobreposição. Quando a sobreposição de pixels estiver disponível, as áreas de NoData irão exibir os valores de pixel de sobreposição em vez pixels em branco.",
	"@@Hillshade_Disable-default-edge-pixel-interpolation_tag1@@": "Desmarcado--A reamostragem bilinear será uniformemente aplicada para reamostrar sua relevo sombreado. Utilize esta opção quando o conjunto de dados do mosaico contendo seus dados raster de elevação for ligada. Este é o padrão.",
	"@@Hillshade_Disable-default-edge-pixel-interpolation_tag2@@": "Marcado--A reamostragem bilinear será utilizada dentro da relevo sombreado exceto ao longo das extremidades dos rasters ou ao lado de pixels de NoData. Estes pixels serão preenchidos com NoData e exibirão os valores de pixels de sobreposição, já que eles reduzirão quaisquer efeitos de segmento que podem ocorrer. Utilize esta opção quando o conjunto de dados do mosaico contendo seus dados raster de elevação que consistem de itens de sobreposição ou mosaicos.",
	"@@Hillshade_Disable-default-edge-pixel-interpolation_tag3@@": "Os resultados da função podem ser dependentes de dados. Se você observar artefatos de limite de mosaico em sua saída, selecione a condição alternada da caixa de seleção.",
	"@@Hillshade_Hillshade-Type_tag0@@": "Controla a origem da iluminação do relevo sombreado:",
	"@@Hillshade_Hillshade-Type_tag1@@": "Tradicional--Calcula relevo sombreado de uma direção de iluminação única. Este é o padrão. Você pode configurar o <strong>Azimute</strong> e <strong>Altitude</strong> para controlar a localização da fonte de luz.",
	"@@Hillshade_Hillshade-Type_tag6@@": "Multidirecional--Combina luz de fontes múltiplas para representar uma visualização realçada do terreno.",
	"@@Hillshade_Pixel-Size-Factor_tag0@@": "Fator de Tamanho do Pixel é responsável pelas mudanças na escala à medida que o visualizador amplia ou reduz o zoom na exibição do mapa. Controla a taxa na qual o <strong>Fator Z</strong> é alterado.",
	"@@Hillshade_Pixel-Size-Factor_tag3@@": "Este parâmetro é válido somente quando o tipo <strong>Dimensionamento</strong> é Ajustado. O valor padrão é 0,024.",
	"@@Hillshade_Pixel-Size-Power_tag0@@": "Potência de Tamanho do Pixel é responsável pelas mudanças de altitude (ou escala) à medida que o visualizador amplia ou reduz na exibição do mapa. É o expoente aplicado ao termo de tamanho do pixel na equação que controla a taxa na qual o <strong>Fator Z</strong> muda para evitar uma perda significante de relevo.",
	"@@Hillshade_Pixel-Size-Power_tag3@@": "Este parâmetro é válido somente quando o tipo <strong>Dimensionamento</strong> é Ajustado. O valor padrão é 0,664.",
	"@@Hillshade_Raster_tag0@@": "O conjunto de dados de elevação de entrada.",
	"@@Hillshade_Scaling_tag0@@": "O resultado sombreado é dimensionado dinamicamente ajustando o fator z utilizando uma de duas opções:",
	"@@Hillshade_Scaling_tag1@@": "Ajustado--Isto aplica um ajuste não-linear utilizando os valores padrão de <strong>Potência de Tamanho do Pixel</strong> e <strong>Fator de Tamanho do Pixel</strong> que acomodam uma grande variedade de alterações de altitude (escala) à medida que o visualizador amplia ou reduz. A configuração do parâmetro <strong>Ajustado</strong> é recomendada ao utilizar um conjunto de dados mundial.",
	"@@Hillshade_Scaling_tag8@@": "Nenhum—Nenhum dimensionamento é aplicado. Isto é ideal para um único conjunto de dados raster cobrindo uma área local. Isto não é recomendado para conjuntos de dados mundiais com grandes variações em mapas de elevação ou de várias escalas pois produzirá relevo do terreno com pouca variação em pequenas escalas.",
	"@@Hillshade_Z-Factor_tag0@@": "O fator Z é um fator de escala utilizado para converter os valores de elevação para dois propósitos:",
	"@@Hillshade_Z-Factor_tag1@@": "Converte as unidades de elevação (como metros ou pés) em unidades de coordenadas horizontais do conjunto de dados, que podem ser pés, metros ou graus.",
	"@@Hillshade_Z-Factor_tag2@@": "Adiciona exagero vertical para efeito visual.",
	"@@Int_Cellsize-Type_tag0@@": "Escolha que tamanho de célula deve ser utilizado no raster de saída. Se todos os tamanhos de célula de entrada forem os mesmos, todas as opções renderão os mesmos resultados.",
	"@@Int_Cellsize-Type_tag1@@": "Primeiro De--Utiliza o primeiro tamanho de célula dos rasters de entrada.",
	"@@Int_Cellsize-Type_tag2@@": "Último De--Utiliza o último tamanho de célula dos rasters de entrada.",
	"@@Int_Cellsize-Type_tag3@@": "Máximo De--Utiliza o maior tamanho de célula de todos os rasters de entrada. Este é o padrão.",
	"@@Int_Cellsize-Type_tag4@@": "Média De--Utiliza o tamanho médio de célula de todos os rasters de entrada.",
	"@@Int_Cellsize-Type_tag5@@": "Mínimo De--Utiliza o menor tamanho de célula de todos os rasters de entrada.",
	"@@Int_Extent-Type_tag0@@": "Escolha qual extensão deve ser utilizada no raster de saída:",
	"@@Int_Extent-Type_tag1@@": "Primeiro De--Utiliza a extensão do primeiro raster de entrada para determinar a extensão de processamento.",
	"@@Int_Extent-Type_tag2@@": "Intersecção De--Utiliza a extensão dos pixels de sobreposição para determinar a extensão de processamento. Este é o padrão.",
	"@@Int_Extent-Type_tag3@@": "Última De--Utiliza a extensão do último raster de entrada para determinar a extensão de processamento.",
	"@@Int_Extent-Type_tag4@@": "União De--Utiliza a extensão de todos os rasters para determinar a extensão de processamento.",
	"@@Int_Raster_tag0@@": "O raster de entrada a ser convertido para inteiro.",
	"@@Interpolate-Irregular-Data_Cellsize_tag0@@": "O tamanho da célula do raster de saída será automaticamente detectado; no entanto, você pode mudar isto. Enquanto o tamanho da célula puder ser alterado, a extensão do conjunto de dados raster permanecerá a mesma.",
	"@@Interpolate-Irregular-Data_Input-Samples_tag0@@": "Os dados de pontos de entrada.",
	"@@Interpolate-Irregular-Data_Interpolation-Method_tag0@@": "Há quatro métodos de reamostragem para esta função:",
	"@@Interpolate-Irregular-Data_Interpolation-Method_tag1@@": "<strong>Distância Ponderada Inversa</strong>--Determina os valores de células utilizando uma combinação linearmente ponderada de um conjunto de pontos ou células de amostra. O peso é uma função do inverso da distância dos pontos ou células conhecidos.",
	"@@Interpolate-Irregular-Data_Interpolation-Method_tag3@@": "<strong>TIM Linear</strong>--Utiliza uma rede irregular triangular a partir de pontos centrais de cada célula no raster irregular para interpolar uma superfície que é então convertida em um raster regular.",
	"@@Interpolate-Irregular-Data_Interpolation-Method_tag5@@": "<strong>Vizinho Natural</strong>--Localiza o subconjunto mais próximo de amostras de entrada para um ponto de consulta e aplica pesos a eles com base em áreas proporcionadas para interpolar um valor.",
	"@@Interpolate-Irregular-Data_Interpolation-Method_tag7@@": "<strong>Vizinho Mais Próximo</strong>--Calcula o valor de pixel utilizando o pixel mais próximo. Se não existir nenhum pixel de origem, nenhum novo pixel poderá ser criado na saída. Este é o padrão.",
	"@@Interpolate-Irregular-Data_Search-Radius_tag0@@": "Identifica o número de pixels a serem incluídos no método de reamostragem selecionado. O valor padrão é ${3} pixels.",
	"@@Interpolate-Irregular-Data_Value-Field_tag0@@": "Se você selecionar uma classe de feição de ponto como entrada, você precisará identificar o campo na tabela de atributos com o valor de pontos",
	"@@Is-Null_Cellsize-Type_tag0@@": "Escolha que tamanho de célula deve ser utilizado no raster de saída. Se todos os tamanhos de célula de entrada forem os mesmos, todas as opções renderão os mesmos resultados.",
	"@@Is-Null_Cellsize-Type_tag1@@": "Primeiro De--Utiliza o primeiro tamanho de célula dos rasters de entrada.",
	"@@Is-Null_Cellsize-Type_tag2@@": "Último De--Utiliza o último tamanho de célula dos rasters de entrada.",
	"@@Is-Null_Cellsize-Type_tag3@@": "Máximo De--Utiliza o maior tamanho de célula de todos os rasters de entrada. Este é o padrão.",
	"@@Is-Null_Cellsize-Type_tag4@@": "Média De--Utiliza o tamanho médio de célula de todos os rasters de entrada.",
	"@@Is-Null_Cellsize-Type_tag5@@": "Mínimo De--Utiliza o menor tamanho de célula de todos os rasters de entrada.",
	"@@Is-Null_Extent-Type_tag0@@": "Escolha qual extensão deve ser utilizada no raster de saída:",
	"@@Is-Null_Extent-Type_tag1@@": "Primeiro De--Utiliza a extensão do primeiro raster de entrada para determinar a extensão de processamento.",
	"@@Is-Null_Extent-Type_tag2@@": "Intersecção De--Utiliza a extensão dos pixels de sobreposição para determinar a extensão de processamento. Este é o padrão.",
	"@@Is-Null_Extent-Type_tag3@@": "Última De--Utiliza a extensão do último raster de entrada para determinar a extensão de processamento.",
	"@@Is-Null_Extent-Type_tag4@@": "União De--Utiliza a extensão de todos os rasters para determinar a extensão de processamento.",
	"@@Is-Null_Raster_tag0@@": "O raster de entrada sendo testado para identificar as células que são ${NoData} (nulo).",
	"@@Is-Null_Raster_tag1@@": "A entrada pode ser do tipo de ponto flutuante ou inteiro.",
	"@@Key-Metadata_Band-Names_tag0@@": "Isto é utilizado para anular os nomes de banda de um raster. É uma string separada por vírgula representando nomes de bandas atualizados.",
	"@@Key-Metadata_Band-Names_tag1@@": "Este parâmetro é opcional.",
	"@@Key-Metadata_Metadata-JSON_tag0@@": "Os metadados chaves a ser injetado no raster de saída descrito como uma string JSON representando uma coleção de pares de valores chaves. O seguinte é um exemplo de uma string JSON que pode ser utilizada como uma entrada para esta função. Todas as entradas deste parâmetro devem seguir o mesmo formato.",
	"@@Key-Metadata_Metadata-JSON_tag1@@": "String JSON representando metadados chaves",
	"@@Key-Metadata_Metadata-JSON_tag2@@": "{ \"CloudCover\": 4, \"BandProperties\":[ { \"BandName\": \"Blue\", \"WavelengthMin\": 445, \"WavelengthMax\": 516 }, { \"BandName\": \"Green\", \"WavelengthMin\": 506, \"WavelengthMax\": 595 }, ]}",
	"@@Key-Metadata_Property-Name_tag0@@": "O nome da propriedade da chave de nível do conjunto de dados para substituir.",
	"@@Key-Metadata_Raster_tag0@@": "O raster ou conjunto de dados do mosaico contendo metadados chave que você gostaria de inserir ou substituir.",
	"@@Key-Metadata_Value_tag0@@": "O valor de substituição da propriedade da chave do nível do conjunto de dados que você deseja definir.",
	"@@Least-Cost-Path_Accumulative-Cost-Resistance-Rate_tag0@@": "Este parâmetro simula o aumento no esforço para superar custos com os aumentos de custo acumulativo. É utilizado para modelar a fadiga do viajante. O custo acumulativo crescente para alcançar uma célula é multiplicado pela taxa de resistência e adicionado ao custo para movimento na célula subsequente.",
	"@@Least-Cost-Path_Accumulative-Cost-Resistance-Rate_tag1@@": "É uma versão modificada de uma fórmula de taxa de juros composta que é utilizada para calcular o custo aparente de movimento de uma célula. Conforme o valor da taxa de resistência aumentar, ela aumentará o custo das células que forem visitadas posteriormente. Quanto maior a taxa de resistência, mais alto o custo para alcançar a próxima célula, que é composta de cada movimento subsequente. Já que a taxa de resistência é semelhante a uma taxa composta e geralmente os valores de custo acumulativo são muito grandes, taxas de resistência pequenas são sugeridas, tal como, 0.005 ou até menor, dependendo dos valores de custo acumulativo.",
	"@@Least-Cost-Path_Accumulative-Cost-Resistance-Rate_tag2@@": "O valor deve ser maior que zero. A capacidade padrão é a extremidade do raster de saída.",
	"@@Least-Cost-Path_Capacity_tag0@@": "Define a capacidade de custo do viajante para uma origem. Os cálculos de custo continuam para cada origem até que a capacidade especificada seja alcançada.",
	"@@Least-Cost-Path_Capacity_tag1@@": "O valor deve ser maior que zero. A capacidade padrão é a extremidade do raster de saída.",
	"@@Least-Cost-Path_Cost-Raster_tag0@@": "Um raster de entrada exigido definindo o custo ou impedância para mover de forma plana através de cada célula. O valor em cada local de célula representa a distância de unidade por custo para mover por ele. Cada valor de local da célula é multiplicado pela resolução da célula, e também compensando por movimento diagonal para obter o custo total de passagem pela célula.",
	"@@Least-Cost-Path_Cost-Raster_tag1@@": "Os valores do <strong>Raster de Custo</strong> podem ser inteiro ou ponto flutuante, mas eles não podem ser negativos ou zero.",
	"@@Least-Cost-Path_Destination-Field_tag0@@": "O campo utilizado para obter valores das localizações de destino.",
	"@@Least-Cost-Path_Destination-Raster_tag0@@": "Uma raster de entrada exigida que identifica os pixels do qual o caminho de menor custo é determinado para a origem de menor custo. Esta entrada consiste em pixels que têm valores válidos e os pixels restantes devem ser atribuídos para ${NoData}. Valores de 0 são válidos.",
	"@@Least-Cost-Path_Maximum-Distance_tag0@@": "O limite que os valores de custo acumulativo não podem exceder. Se um valor de distância de custo acumulativo exceder este valor, o valor de saída de local da célula será ${NoData}. A distância máxima define a extensão em que as distâncias de custo acumulativo são calculadas. A distância padrão é a extensão do raster de saída.",
	"@@Least-Cost-Path_Multiplier-to-Apply-to-Costs_tag0@@": "Este parâmetro permite o controle do modo de viagem ou a magnitude em uma origem. Quanto maior o multiplicador, maior o custo para mover por cada célula.",
	"@@Least-Cost-Path_Multiplier-to-Apply-to-Costs_tag1@@": "Os valores devem ser maiores que zero. O padrão é 1.",
	"@@Least-Cost-Path_Path-Type_tag0@@": "Uma palavra-chave que define a maneira pela qual os valores e zonas nos dados de destino de entrada serão interpretados nos cálculos do caminho de custo:",
	"@@Least-Cost-Path_Path-Type_tag1@@": "<strong>Único Melhor</strong>--Para todos os pixels ou locais nos dados de destino de entrada, o caminho de menor custo é derivado do pixel com o mínimo dos caminhos de menor custo até o local de origem.",
	"@@Least-Cost-Path_Path-Type_tag3@@": "<strong>Cada Célula</strong>--Um caminho de menor custo é determinado para cada pixel com valores válidos nos dados de destino de entrada e salvo no raster de saída. Cada célula dos dados de destino de entrada é tratada separadamente e um caminho de menor custo é determinado para cada célula.",
	"@@Least-Cost-Path_Path-Type_tag5@@": "<strong>Cada Zona</strong>--Um caminho de menor custo é determinado para cada zona nos dados de destino de entrada e salvo no raster de saída. O caminho de menor custo de cada zona começa no pixel com a menor ponderação de distância de custo na zona.",
	"@@Least-Cost-Path_Source-Raster_tag0@@": "Este é um raster de entrada exigido que identifica as células ou localizações de onde é calculada a menor distância de custo acumulada para cada localização da célula de saída.",
	"@@Least-Cost-Path_Start-Cost_tag0@@": "O custo de início para iniciar os cálculos de custo. Este parâmetro permite a especificação do custo fixo associado com uma origem. Em vez de iniciar a um custo de 0, o algoritmo de custo começará com o valor especificado.",
	"@@Least-Cost-Path_Start-Cost_tag1@@": "O valor deve ser zero ou maior. O padrão é 0.",
	"@@Least-Cost-Path_Travel-Direction_tag0@@": "Define a direção do viajante ao aplicar a taxa de resistência de origem e o custo inicial de origem.",
	"@@Least-Cost-Path_Travel-Direction_tag1@@": "<strong>Da Origem</strong>—A taxa de resistência de origem e custo inicial de origem serão aplicados no início da origem de entrada e saindo para células diferentes da origem. Este é o padrão.",
	"@@Least-Cost-Path_Travel-Direction_tag3@@": "<strong>Para Origem</strong>—A taxa de resistência de origem e custo inicial de origem serão aplicados no início de cada célula diferente da origem e movendo de volta para a origem de entrada.",
	"@@Least-Cost-Path_Travel-Direction_tag5@@": "Especifique a palavra-chave <strong>Da Origem</strong> ou <strong>Para Origem</strong> , que será aplicada a todas as origens ou especifique um campo no <strong>Raster de Origem</strong> que contém as palavras-chaves para identificar a direção de viagem de cada origem. O campo deve conter a string ${FROM_SOURCE} ou ${TO_SOURCE}.",
	"@@Less-Than_Cellsize-Type_tag0@@": "Escolha que tamanho de célula deve ser utilizado no raster de saída. Se todos os tamanhos de célula de entrada forem os mesmos, todas as opções renderão os mesmos resultados.",
	"@@Less-Than_Cellsize-Type_tag1@@": "Primeiro De--Utiliza o primeiro tamanho de célula dos rasters de entrada.",
	"@@Less-Than_Cellsize-Type_tag2@@": "Último De--Utiliza o último tamanho de célula dos rasters de entrada.",
	"@@Less-Than_Cellsize-Type_tag3@@": "Máximo De--Utiliza o maior tamanho de célula de todos os rasters de entrada. Este é o padrão.",
	"@@Less-Than_Cellsize-Type_tag4@@": "Média De--Utiliza o tamanho médio de célula de todos os rasters de entrada.",
	"@@Less-Than_Cellsize-Type_tag5@@": "Mínimo De--Utiliza o menor tamanho de célula de todos os rasters de entrada.",
	"@@Less-Than_Extent-Type_tag0@@": "Escolha qual extensão deve ser utilizada no raster de saída:",
	"@@Less-Than_Extent-Type_tag1@@": "Primeiro De--Utiliza a extensão do primeiro raster de entrada para determinar a extensão de processamento.",
	"@@Less-Than_Extent-Type_tag2@@": "Intersecção De--Utiliza a extensão dos pixels de sobreposição para determinar a extensão de processamento. Este é o padrão.",
	"@@Less-Than_Extent-Type_tag3@@": "Última De--Utiliza a extensão do último raster de entrada para determinar a extensão de processamento.",
	"@@Less-Than_Extent-Type_tag4@@": "União De--Utiliza a extensão de todos os rasters para determinar a extensão de processamento.",
	"@@Less-Than_Raster_tag0@@": "A entrada sendo testada para determinar se ele for menor que a segunda entrada.",
	"@@Less-Than_Raster_tag1@@": "Um valor constante pode ser utilizado como uma entrada para este parâmetro, fornecendo um raster que é especificado para o outro parâmetro.",
	"@@Less-Than_Raster2_tag0@@": "A entrada em que a primeira entrada é testada para ser menor que.",
	"@@Less-Than_Raster2_tag1@@": "Um valor constante pode ser utilizado como uma entrada para este parâmetro, fornecendo um raster que é especificado para o outro parâmetro.",
	"@@Less-Than-Equal_Cellsize-Type_tag0@@": "Escolha que tamanho de célula deve ser utilizado no raster de saída. Se todos os tamanhos de célula de entrada forem os mesmos, todas as opções renderão os mesmos resultados.",
	"@@Less-Than-Equal_Cellsize-Type_tag1@@": "Primeiro De--Utiliza o primeiro tamanho de célula dos rasters de entrada.",
	"@@Less-Than-Equal_Cellsize-Type_tag2@@": "Último De--Utiliza o último tamanho de célula dos rasters de entrada.",
	"@@Less-Than-Equal_Cellsize-Type_tag3@@": "Máximo De--Utiliza o maior tamanho de célula de todos os rasters de entrada. Este é o padrão.",
	"@@Less-Than-Equal_Cellsize-Type_tag4@@": "Média De--Utiliza o tamanho médio de célula de todos os rasters de entrada.",
	"@@Less-Than-Equal_Cellsize-Type_tag5@@": "Mínimo De--Utiliza o menor tamanho de célula de todos os rasters de entrada.",
	"@@Less-Than-Equal_Extent-Type_tag0@@": "Escolha qual extensão deve ser utilizada no raster de saída:",
	"@@Less-Than-Equal_Extent-Type_tag1@@": "Primeiro De--Utiliza a extensão do primeiro raster de entrada para determinar a extensão de processamento.",
	"@@Less-Than-Equal_Extent-Type_tag2@@": "Intersecção De--Utiliza a extensão dos pixels de sobreposição para determinar a extensão de processamento. Este é o padrão.",
	"@@Less-Than-Equal_Extent-Type_tag3@@": "Última De--Utiliza a extensão do último raster de entrada para determinar a extensão de processamento.",
	"@@Less-Than-Equal_Extent-Type_tag4@@": "União De--Utiliza a extensão de todos os rasters para determinar a extensão de processamento.",
	"@@Less-Than-Equal_Raster_tag0@@": "A entrada sendo testada para determinar se ela for menor ou igual à segunda entrada.",
	"@@Less-Than-Equal_Raster_tag1@@": "Um valor constante pode ser utilizado como uma entrada para este parâmetro, fornecendo um raster que é especificado para o outro parâmetro.",
	"@@Less-Than-Equal_Raster2_tag0@@": "A entrada em que a primeira entrada é testada para ser menor ou igual.",
	"@@Less-Than-Equal_Raster2_tag1@@": "Um valor constante pode ser utilizado como uma entrada para este parâmetro, fornecendo um raster que é especificado para o outro parâmetro.",
	"@@Ln_Cellsize-Type_tag0@@": "Escolha que tamanho de célula deve ser utilizado no raster de saída. Se todos os tamanhos de célula de entrada forem os mesmos, todas as opções renderão os mesmos resultados.",
	"@@Ln_Cellsize-Type_tag1@@": "Primeiro De--Utiliza o primeiro tamanho de célula dos rasters de entrada.",
	"@@Ln_Cellsize-Type_tag2@@": "Último De--Utiliza o último tamanho de célula dos rasters de entrada.",
	"@@Ln_Cellsize-Type_tag3@@": "Máximo De--Utiliza o maior tamanho de célula de todos os rasters de entrada. Este é o padrão.",
	"@@Ln_Cellsize-Type_tag4@@": "Média De--Utiliza o tamanho médio de célula de todos os rasters de entrada.",
	"@@Ln_Cellsize-Type_tag5@@": "Mínimo De--Utiliza o menor tamanho de célula de todos os rasters de entrada.",
	"@@Ln_Extent-Type_tag0@@": "Escolha qual extensão deve ser utilizada no raster de saída:",
	"@@Ln_Extent-Type_tag1@@": "Primeiro De--Utiliza a extensão do primeiro raster de entrada para determinar a extensão de processamento.",
	"@@Ln_Extent-Type_tag2@@": "Intersecção De--Utiliza a extensão dos pixels de sobreposição para determinar a extensão de processamento. Este é o padrão.",
	"@@Ln_Extent-Type_tag3@@": "Última De--Utiliza a extensão do último raster de entrada para determinar a extensão de processamento.",
	"@@Ln_Extent-Type_tag4@@": "União De--Utiliza a extensão de todos os rasters para determinar a extensão de processamento.",
	"@@Ln_Raster_tag0@@": "Os valores de entrada para localizar o logaritmo natural (Ln).",
	"@@Log10_Cellsize-Type_tag0@@": "Escolha que tamanho de célula deve ser utilizado no raster de saída. Se todos os tamanhos de célula de entrada forem os mesmos, todas as opções renderão os mesmos resultados.",
	"@@Log10_Cellsize-Type_tag1@@": "Primeiro De--Utiliza o primeiro tamanho de célula dos rasters de entrada.",
	"@@Log10_Cellsize-Type_tag2@@": "Último De--Utiliza o último tamanho de célula dos rasters de entrada.",
	"@@Log10_Cellsize-Type_tag3@@": "Máximo De--Utiliza o maior tamanho de célula de todos os rasters de entrada. Este é o padrão.",
	"@@Log10_Cellsize-Type_tag4@@": "Média De--Utiliza o tamanho médio de célula de todos os rasters de entrada.",
	"@@Log10_Cellsize-Type_tag5@@": "Mínimo De--Utiliza o menor tamanho de célula de todos os rasters de entrada.",
	"@@Log10_Extent-Type_tag0@@": "Escolha qual extensão deve ser utilizada no raster de saída:",
	"@@Log10_Extent-Type_tag1@@": "Primeiro De--Utiliza a extensão do primeiro raster de entrada para determinar a extensão de processamento.",
	"@@Log10_Extent-Type_tag2@@": "Intersecção De--Utiliza a extensão dos pixels de sobreposição para determinar a extensão de processamento. Este é o padrão.",
	"@@Log10_Extent-Type_tag3@@": "Última De--Utiliza a extensão do último raster de entrada para determinar a extensão de processamento.",
	"@@Log10_Extent-Type_tag4@@": "União De--Utiliza a extensão de todos os rasters para determinar a extensão de processamento.",
	"@@Log10_Raster_tag0@@": "Os valores de entrada para localizar o logaritmo base 10.",
	"@@Log2_Cellsize-Type_tag0@@": "Escolha que tamanho de célula deve ser utilizado no raster de saída. Se todos os tamanhos de célula de entrada forem os mesmos, todas as opções renderão os mesmos resultados.",
	"@@Log2_Cellsize-Type_tag1@@": "Primeiro De--Utiliza o primeiro tamanho de célula dos rasters de entrada.",
	"@@Log2_Cellsize-Type_tag2@@": "Último De--Utiliza o último tamanho de célula dos rasters de entrada.",
	"@@Log2_Cellsize-Type_tag3@@": "Máximo De--Utiliza o maior tamanho de célula de todos os rasters de entrada. Este é o padrão.",
	"@@Log2_Cellsize-Type_tag4@@": "Média De--Utiliza o tamanho médio de célula de todos os rasters de entrada.",
	"@@Log2_Cellsize-Type_tag5@@": "Mínimo De--Utiliza o menor tamanho de célula de todos os rasters de entrada.",
	"@@Log2_Extent-Type_tag0@@": "Escolha qual extensão deve ser utilizada no raster de saída:",
	"@@Log2_Extent-Type_tag1@@": "Primeiro De--Utiliza a extensão do primeiro raster de entrada para determinar a extensão de processamento.",
	"@@Log2_Extent-Type_tag2@@": "Intersecção De--Utiliza a extensão dos pixels de sobreposição para determinar a extensão de processamento. Este é o padrão.",
	"@@Log2_Extent-Type_tag3@@": "Última De--Utiliza a extensão do último raster de entrada para determinar a extensão de processamento.",
	"@@Log2_Extent-Type_tag4@@": "União De--Utiliza a extensão de todos os rasters para determinar a extensão de processamento.",
	"@@Log2_Raster_tag0@@": "Os valores de entrada para localizar o logaritmo base 2.",
	"@@Lookup_Field_tag0@@": "O campo contendo os valores desejados para um novo raster.",
	"@@Lookup_Field_tag1@@": "Tem que ser de um tipo numérico.",
	"@@Lookup_Raster_tag0@@": "O raster de entrada que contém um campo do qual criar um novo raster.",
	"@@Lookup_Raster_tag1@@": "Ele será do tipo inteiro ou de ponto flutuante.",
	"@@Mask_Included-Ranges_tag0@@": "As faixas incluídas podem ser especificadas para cada banda especificando um valor mínimo e máximo; quaisquer valores fora da faixa será retornado como ${NoData}. Um pixel é incluído se o valor do pixel cair dentro de qualquer uma das faixas especificadas. Portanto, se a banda 1 tiver uma faixa de 5–10 e banda 2 tiver uma faixa de 15–20 e o valor de pixel da banda 1 for 8, este pixel não será mascarado.",
	"@@Mask_NoData-Interpretation_tag0@@": "Isto é referente a como os <strong>Valores ${NoData}</strong> impactarão a imagem de saída.",
	"@@Mask_NoData-Interpretation_tag3@@": "Você pode selecionar das seguintes duas opções:",
	"@@Mask_NoData-Interpretation_tag4@@": "<strong>Corresponder Todos</strong>--Os valores de ${NoData} que você especifica para cada banda devem ocorrer no mesmo pixel da imagem de saída para conter o pixel de ${NoData}.",
	"@@Mask_NoData-Interpretation_tag6@@": "<strong>Corresponder Qualquer</strong>--Se o valor de ${NoData} que você especifica ocorrer para um pixel em uma banda especificada, este pixel na imagem de saída será ${NoData}. Este é o padrão.",
	"@@Mask_NoData-Values_tag0@@": "Os valores NoData podem ser especificados para cada banda. Você pode especificar mais de um valor inserindo uma lista delimitada por espaço.",
	"@@Mask_Raster_tag0@@": "O raster de entrada.",
	"@@Minus_Cellsize-Type_tag0@@": "Escolha que tamanho de célula deve ser utilizado no raster de saída. Se todos os tamanhos de célula de entrada forem os mesmos, todas as opções renderão os mesmos resultados.",
	"@@Minus_Cellsize-Type_tag1@@": "Primeiro De--Utiliza o primeiro tamanho de célula dos rasters de entrada.",
	"@@Minus_Cellsize-Type_tag2@@": "Último De--Utiliza o último tamanho de célula dos rasters de entrada.",
	"@@Minus_Cellsize-Type_tag3@@": "Máximo De--Utiliza o maior tamanho de célula de todos os rasters de entrada. Este é o padrão.",
	"@@Minus_Cellsize-Type_tag4@@": "Média De--Utiliza o tamanho médio de célula de todos os rasters de entrada.",
	"@@Minus_Cellsize-Type_tag5@@": "Mínimo De--Utiliza o menor tamanho de célula de todos os rasters de entrada.",
	"@@Minus_Extent-Type_tag0@@": "Escolha qual extensão deve ser utilizada no raster de saída:",
	"@@Minus_Extent-Type_tag1@@": "Primeiro De--Utiliza a extensão do primeiro raster de entrada para determinar a extensão de processamento.",
	"@@Minus_Extent-Type_tag2@@": "Intersecção De--Utiliza a extensão dos pixels de sobreposição para determinar a extensão de processamento. Este é o padrão.",
	"@@Minus_Extent-Type_tag3@@": "Última De--Utiliza a extensão do último raster de entrada para determinar a extensão de processamento.",
	"@@Minus_Extent-Type_tag4@@": "União De--Utiliza a extensão de todos os rasters para determinar a extensão de processamento.",
	"@@Minus_Raster_tag0@@": "A entrada da qual subtrair os valores na segunda entrada.",
	"@@Minus_Raster_tag1@@": "Um valor constante pode ser utilizado como uma entrada para este parâmetro, fornecendo um raster que é especificado para o outro parâmetro.",
	"@@Minus_Raster2_tag0@@": "Os valores de entrada para subtrair dos valores na primeira entrada.",
	"@@Minus_Raster2_tag1@@": "Um valor constante pode ser utilizado como uma entrada para este parâmetro, fornecendo um raster que é especificado para o outro parâmetro.",
	"@@ML-Classify_Raster_tag0@@": "O raster de entrada para classificar utilizando o algoritmo de classificação de probabilidade máximo.",
	"@@ML-Classify_Signature-File-or-URL_tag0@@": "O arquivo de assinatura ${.gsg}.",
	"@@Mod_Cellsize-Type_tag0@@": "Escolha que tamanho de célula deve ser utilizado no raster de saída. Se todos os tamanhos de célula de entrada forem os mesmos, todas as opções renderão os mesmos resultados.",
	"@@Mod_Cellsize-Type_tag1@@": "Primeiro De--Utiliza o primeiro tamanho de célula dos rasters de entrada.",
	"@@Mod_Cellsize-Type_tag2@@": "Último De--Utiliza o último tamanho de célula dos rasters de entrada.",
	"@@Mod_Cellsize-Type_tag3@@": "Máximo De--Utiliza o maior tamanho de célula de todos os rasters de entrada. Este é o padrão.",
	"@@Mod_Cellsize-Type_tag4@@": "Média De--Utiliza o tamanho médio de célula de todos os rasters de entrada.",
	"@@Mod_Cellsize-Type_tag5@@": "Mínimo De--Utiliza o menor tamanho de célula de todos os rasters de entrada.",
	"@@Mod_Extent-Type_tag0@@": "Escolha qual extensão deve ser utilizada no raster de saída:",
	"@@Mod_Extent-Type_tag1@@": "Primeiro De--Utiliza a extensão do primeiro raster de entrada para determinar a extensão de processamento.",
	"@@Mod_Extent-Type_tag2@@": "Intersecção De--Utiliza a extensão dos pixels de sobreposição para determinar a extensão de processamento. Este é o padrão.",
	"@@Mod_Extent-Type_tag3@@": "Última De--Utiliza a extensão do último raster de entrada para determinar a extensão de processamento.",
	"@@Mod_Extent-Type_tag4@@": "União De--Utiliza a extensão de todos os rasters para determinar a extensão de processamento.",
	"@@Mod_Raster_tag0@@": "A entrada do numerador.",
	"@@Mod_Raster_tag1@@": "Um valor constante pode ser utilizado como uma entrada para este parâmetro, fornecendo um raster que é especificado para o outro parâmetro.",
	"@@Mod_Raster2_tag0@@": "A entrada do denominador.",
	"@@Mod_Raster2_tag1@@": "Um valor constante pode ser utilizado como uma entrada para este parâmetro, fornecendo um raster que é especificado para o outro parâmetro.",
	"@@Mosaic-Rasters_Operation_tag0@@": "Solucione qualquer conflito ao ter partes de duas ou mais imagens que se sobrepõem. As opções incluem o seguinte:",
	"@@Mosaic-Rasters_Operation_tag1@@": "<strong>Combinar</strong>--Calcula e exibe uma média dos pixels sobrepostos dando mais peso aos pixels que estão mais próximos de imagens vizinhas de forma que a saída seja uma imagem mais suave. Este é o padrão.",
	"@@Mosaic-Rasters_Operation_tag3@@": "<strong>Primeiro</strong>--Exibe os pixels a partir da primeira imagem na lista de imagens sobrepondo uma área fornecida.",
	"@@Mosaic-Rasters_Operation_tag5@@": "<strong>Último</strong>--Exibe os pixels a partir da última imagem na lista de imagens sobrepondo uma área fornecida.",
	"@@Mosaic-Rasters_Operation_tag7@@": "<strong>Máximo</strong>--Exibe o pixel de valor mais alto de todas as camadas de sobreposição. Com esta opção, você não tem nenhuma garantia de exibir os pixels de apenas uma imagem na área de sobreposição mas ao invés, uma combinação de todas as camadas potenciais.",
	"@@Mosaic-Rasters_Operation_tag9@@": "<strong>Média</strong>--Calcula e exibe uma média dos pixels de sobreposição.",
	"@@Mosaic-Rasters_Operation_tag11@@": "<strong>Mínimo</strong>--Exibe o pixel de valor mais baixo de todas as camadas de sobreposição. Com esta opção, você não tem nenhuma garantia de exibir os pixels de apenas uma imagem na área de sobreposição mas ao invés, uma combinação de todas as camadas potenciais.",
	"@@Mosaic-Rasters_Rasters_tag0@@": "Selecione os rasters que deseja gerar o mosaico junto para formar uma imagem.",
	"@@NDVI_Infrared-Band-ID_tag0@@": "Especifica o ID da banda que representa a parte infravermelha próxima do espectro eletromagnético.",
	"@@NDVI_Raster_tag0@@": "O raster multiespectral de entrada.",
	"@@NDVI_Scientific-Output_tag0@@": "Os valores de saída irão variar de -1.0 a 1.0, que é utilizado em muitos aplicativos científicos.",
	"@@NDVI_Visible-Band-ID_tag0@@": "Especifica o ID da banda que representa a parte vermelha do espectro eletromagnético.",
	"@@NDVI-Colorized_Color-Ramp_tag0@@": "Escolha um esquema de cores pré-definido da lista suspensa.",
	"@@NDVI-Colorized_Color-Scheme-Type_tag0@@": "Escolha qual tipo de esquema de cor para definir a cor da saída NDVI:",
	"@@NDVI-Colorized_Color-Scheme-Type_tag1@@": "Mapa de cores--Escolha um mapa de cores pré-definido a partir da lista suspensa. Alternativamente, você pode procurar por um arquivo de mapa de cores persistido que exista.",
	"@@NDVI-Colorized_Color-Scheme-Type_tag2@@": "Rampa de Cores--Escolha um esquema de cores pré-definidas a partir da lista suspensa.",
	"@@NDVI-Colorized_Colormap_tag0@@": "Escolha um mapa de cores pré-definido da lista suspensa. Alternativamente, você pode procurar por um arquivo de mapa de cores existente.",
	"@@NDVI-Colorized_Infrared-Band-ID_tag0@@": "Especifica o ID da banda que representa a parte infravermelha próxima do espectro eletromagnético.",
	"@@NDVI-Colorized_Raster_tag0@@": "O raster multiespectral de entrada.",
	"@@NDVI-Colorized_Scientific-Output_tag0@@": "Os valores de saída irão variar de -1.0 a 1.0, que é utilizado em muitos aplicativos científicos.",
	"@@NDVI-Colorized_Visible-Band-ID_tag0@@": "Especifica o ID da banda que representa a parte vermelha do espectro eletromagnético.",
	"@@Negate_Cellsize-Type_tag0@@": "Escolha que tamanho de célula deve ser utilizado no raster de saída. Se todos os tamanhos de célula de entrada forem os mesmos, todas as opções renderão os mesmos resultados.",
	"@@Negate_Cellsize-Type_tag1@@": "Primeiro De--Utiliza o primeiro tamanho de célula dos rasters de entrada.",
	"@@Negate_Cellsize-Type_tag2@@": "Último De--Utiliza o último tamanho de célula dos rasters de entrada.",
	"@@Negate_Cellsize-Type_tag3@@": "Máximo De--Utiliza o maior tamanho de célula de todos os rasters de entrada. Este é o padrão.",
	"@@Negate_Cellsize-Type_tag4@@": "Média De--Utiliza o tamanho médio de célula de todos os rasters de entrada.",
	"@@Negate_Cellsize-Type_tag5@@": "Mínimo De--Utiliza o menor tamanho de célula de todos os rasters de entrada.",
	"@@Negate_Extent-Type_tag0@@": "Escolha qual extensão deve ser utilizada no raster de saída:",
	"@@Negate_Extent-Type_tag1@@": "Primeiro De--Utiliza a extensão do primeiro raster de entrada para determinar a extensão de processamento.",
	"@@Negate_Extent-Type_tag2@@": "Intersecção De--Utiliza a extensão dos pixels de sobreposição para determinar a extensão de processamento. Este é o padrão.",
	"@@Negate_Extent-Type_tag3@@": "Última De--Utiliza a extensão do último raster de entrada para determinar a extensão de processamento.",
	"@@Negate_Extent-Type_tag4@@": "União De--Utiliza a extensão de todos os rasters para determinar a extensão de processamento.",
	"@@Negate_Raster_tag0@@": "O raster de entrada para ser negado (multiplicado por -1).",
	"@@Nibble_Mask-Raster_tag0@@": "O raster de entrada exigido utilizado como a máscara.",
	"@@Nibble_Mask-Raster_tag1@@": "Células com NoData já que seu valor será extraído no <strong>Raster</strong> de entrada.",
	"@@Nibble_Mask-Raster_tag4@@": "O raster de máscara pode ser do tipo inteiro ou de ponto flutuante.",
	"@@Nibble_Nibble-NoData-cells_tag0@@": "Define se células NoData no raster de entrada permanecerão NoData no raster de saída.",
	"@@Nibble_Nibble-NoData-cells_tag1@@": "<strong>Não</strong>--Especifica que células NoData no raster de entrada permanecerão NoData na saída. Este é o padrão.",
	"@@Nibble_Nibble-NoData-cells_tag3@@": "<strong>Sim</strong>--Especifica que as células de NoData no raster de entrada e dentro da máscara possam ser extraídos em valores de células de saída válidas.",
	"@@Nibble_Raster_tag0@@": "O raster de entrada exigido que será extraído.",
	"@@Nibble_Raster_tag1@@": "O raster de entrada pode ser do tipo inteiro ou de ponto flutuante.",
	"@@Nibble_Use-NoData-values-if-they-are-the-nearest-neighbor_tag0@@": "Define se valores ${NoData} no raster de entrada têm permissão para extrair na área definida pelo raster de máscara.",
	"@@Nibble_Use-NoData-values-if-they-are-the-nearest-neighbor_tag1@@": "<strong>Sim</strong>--Especifica que o valor do vizinho mais próximo será utilizado, seja ${NoData} ou outro valor de dados no raster de entrada. Os valores ${NoData} no raster de entrada, são livres para utilizar as áreas definidas na máscara se eles forem o vizinho mais próximo. Este é o padrão.",
	"@@Nibble_Use-NoData-values-if-they-are-the-nearest-neighbor_tag3@@": "<strong>Não</strong>--Especifica que somente os valores dos dados são livres para serem utilizados nas áreas definidas no raster da máscara. Os valores ${NoData} no raster de entrada não são permitidos para utilizarem as áreas definidas no raster da máscara se eles forem o vizinho mais próximo.",
	"@@Nibble_Zone-Raster_tag0@@": "O raster de zona de entrada.",
	"@@Nibble_Zone-Raster_tag1@@": "Uma zona são todas as células em um raster que têm o mesmo valor, sejam elas contíguas ou não. A camada da zona de entrada define a forma, alores e locais das zonas. O raster de zona pode ser do tipo de ponto flutuante ou inteiro.",
	"@@Not-Equal_Cellsize-Type_tag0@@": "Escolha que tamanho de célula deve ser utilizado no raster de saída. Se todos os tamanhos de célula de entrada forem os mesmos, todas as opções renderão os mesmos resultados.",
	"@@Not-Equal_Cellsize-Type_tag1@@": "Primeiro De--Utiliza o primeiro tamanho de célula dos rasters de entrada.",
	"@@Not-Equal_Cellsize-Type_tag2@@": "Último De--Utiliza o último tamanho de célula dos rasters de entrada.",
	"@@Not-Equal_Cellsize-Type_tag3@@": "Máximo De--Utiliza o maior tamanho de célula de todos os rasters de entrada. Este é o padrão.",
	"@@Not-Equal_Cellsize-Type_tag4@@": "Média De--Utiliza o tamanho médio de célula de todos os rasters de entrada.",
	"@@Not-Equal_Cellsize-Type_tag5@@": "Mínimo De--Utiliza o menor tamanho de célula de todos os rasters de entrada.",
	"@@Not-Equal_Extent-Type_tag0@@": "Escolha qual extensão deve ser utilizada no raster de saída:",
	"@@Not-Equal_Extent-Type_tag1@@": "Primeiro De--Utiliza a extensão do primeiro raster de entrada para determinar a extensão de processamento.",
	"@@Not-Equal_Extent-Type_tag2@@": "Intersecção De--Utiliza a extensão dos pixels de sobreposição para determinar a extensão de processamento. Este é o padrão.",
	"@@Not-Equal_Extent-Type_tag3@@": "Última De--Utiliza a extensão do último raster de entrada para determinar a extensão de processamento.",
	"@@Not-Equal_Extent-Type_tag4@@": "União De--Utiliza a extensão de todos os rasters para determinar a extensão de processamento.",
	"@@Not-Equal_Raster_tag0@@": "A entrada que será comparada com a desigualdade pela segunda entrada.",
	"@@Not-Equal_Raster_tag1@@": "Um valor constante pode ser utilizado como uma entrada para este parâmetro, fornecendo um raster que é especificado para o outro parâmetro.",
	"@@Not-Equal_Raster2_tag0@@": "A entrada que será comparada com a primeira entrada para desigualdade.",
	"@@Not-Equal_Raster2_tag1@@": "Um valor constante pode ser utilizado como uma entrada para este parâmetro, fornecendo um raster que é especificado para o outro parâmetro.",
	"@@Pansharpening_Multispectral_tag0@@": "O raster multiespectral que você deseja refinar com a utilização da banda pancromática.",
	"@@Pansharpening_Panchromatic_tag0@@": "O raster de banda única de alta resolução que será utilizado para mover o raster multiespectral de resolução mais baixa.",
	"@@Pansharpening_Pansharpening-Type_tag0@@": "Escolha a algoritmo de nitidez que deseja utilizar.",
	"@@Pansharpening_Pansharpening-Type_tag1@@": "Brovey--Utiliza o algoritmo de Brovey baseado na modelagem espectral para juntar os dados.",
	"@@Pansharpening_Pansharpening-Type_tag2@@": "Esri--Utiliza o algoritmo da ESRI baseado na modelagem espectral para juntar os dados.",
	"@@Pansharpening_Pansharpening-Type_tag3@@": "Gram-Schmidt--Utiliza o algoritmo de nitidez espectral Gram-Schmidt para nitidez de dados multiespectrais.",
	"@@Pansharpening_Pansharpening-Type_tag4@@": "IHS--Utiliza o espaço de cores da Intensidade, Contraste e Saturação para juntar os dados.",
	"@@Pansharpening_Pansharpening-Type_tag5@@": "Média--Utiliza o valor médio entre os valores do vermelho, verde e azul e o valor de pixel pancromático.",
	"@@Pansharpening_Weights_tag0@@": "Especifique os pesos para as bandas vermelha, verde, azul e infravermelha. Todos os valores devem estar dentro do intervalo de 0 a 1.",
	"@@Path-Distance_Accumulative-Cost-Resistance-Rate_tag0@@": "Este parâmetro simula o aumento no esforço para superar custos com os aumentos de custo acumulativo. É utilizado para modelar a fadiga do viajante. O custo acumulativo crescente para alcançar uma célula é multiplicado pela taxa de resistência e adicionado ao custo para movimento na célula subsequente.",
	"@@Path-Distance_Accumulative-Cost-Resistance-Rate_tag1@@": "É uma versão modificada de uma fórmula de taxa de juros composta que é utilizada para calcular o custo aparente de movimento de uma célula. Conforme o valor da taxa de resistência aumentar, ela aumentará o custo das células que forem visitadas posteriormente. Quanto maior a taxa de resistência, mais alto o custo para alcançar a próxima célula, que é composta de cada movimento subsequente. Já que a taxa de resistência é semelhante a uma taxa composta e geralmente os valores de custo acumulativo são muito grandes, taxas de resistência pequenas são sugeridas, tal como, 0.005 ou até menor, dependendo dos valores de custo acumulativo.",
	"@@Path-Distance_Accumulative-Cost-Resistance-Rate_tag2@@": "O valor deve ser maior que zero. A capacidade padrão é a extremidade do raster de saída.",
	"@@Path-Distance_Capacity_tag0@@": "Define a capacidade de custo do viajante para uma origem. Os cálculos de custo continuam para cada origem até que a capacidade especificada seja alcançada.",
	"@@Path-Distance_Capacity_tag1@@": "O valor deve ser maior que zero. A capacidade padrão é a extremidade do raster de saída.",
	"@@Path-Distance_Cost-Raster_tag0@@": "Um raster de entrada exigido definindo o custo ou impedância para mover de forma plana através de cada célula. O valor em cada local de célula representa a distância de unidade por custo para mover por ele. Cada valor de local da célula é multiplicado pela resolução da célula, e também compensando por movimento diagonal para obter o custo total de passagem pela célula.",
	"@@Path-Distance_Cost-Raster_tag1@@": "Os valores do <strong>Raster de Custo</strong> podem ser inteiro ou ponto flutuante, mas eles não podem ser negativos ou zero.",
	"@@Path-Distance_horizontalfactor_tag0@@": "<p>Define a relação entre o fator de custo horizontal e o ângulo de movimento relativo horizontal (HRMA).</p><p>Há vários fatores com modificadores que identificam um gráfico de fator vertical definido. Adicionalmente, uma tabela pode ser utilizada para criar um gráfico personalizado. Os gráficos são usados ​​para identificar o fator vertical usado no cálculo do custo total de alteração para uma célula vizinha.</p><p>Nas explicações a seguir, são utilizadas duas siglas: HF e HRMA. HF significa fator horizontal, que define a dificuldade horizontal encontrada ao mover de uma célula para a próxima. HRMA significa ângulo de movimento relativo horizontal, que identifica o ângulo entre a direção horizontal de uma célula e a direção de movimento.</p><p><strong>Tipos de fator horizontal</strong>incluem o seguinte:</p><ul><li><strong>Binário</strong>--Indica que se o HRMA for menor que o ângulo de corte, o HF é definido com o valor associado ao fator zero; caso contrário, é infinito.</li><li><strong>Para frente</strong>--Estabelece que apenas o movimento para frente é permitido. O HRMA deve ser maior ou igual a 0 e menor que 90 graus (0 &lt; = HRMA &lt; 90). Se o HRMA for maior que 0 e menor que 45 graus, o HF para a célula é configurada para o valor associado com o fator zero. Se o HRMA for maior ou igual a 45 graus, o modificador de valor lateral é utilizado. O HF para qualquer valor HRMA igual ou superior a 90 graus é definido como infinito.</li><li><strong>Linear</strong>--Especifica que o HF é uma função linear do HRMA.</li><li><strong>Linear Inverso</strong>--Especifica que o HF é uma função linear inversa do HRMA.</li><li><strong>Tabela</strong>--Identifica que um arquivo de tabela será usado para definir o gráfico de fator horizontal usado para determinar os HFs.</li></ul><p>Os modificadores para os fatores horizontais incluem o seguinte:</p><ul><li><strong>Fator Zero</strong>--O fator horizontal a ser usado quando o HRMA for zero. Este fator posiciona a interceptação y para qualquer uma das funções de fator horizontal.</li><li><strong>Recortar ângulo</strong>--Define o ângulo HRMA além do qual o HF será definido para o infinito.</li><li><strong>Declividade</strong>--Estabelece a inclinação da linha reta usada com as palavras-chave de fator horizontal<strong>Linear</strong>e<strong>Linear Inverso</strong>. A declividade é especificada como uma fração da subida ao longo do curso (por exemplo, declividade de 45 porcento é 1/45, que é inserida como 0.02222).</li><li><strong>Valor lateral</strong>--Estabelece o HF quando o HRMA é maior ou igual a 45 graus e menor que 90 graus quando a palavra-chave fator horizontal<strong>Para frente</strong>for especificada.</li><li><strong>Nome da tabela</strong>--Identifica o nome da tabela que define o HF.</li></ul>",
	"@@Path-Distance_Horizontal-Raster_tag0@@": "Um raster definindo a direção horizontal em cada local de célula.",
	"@@Path-Distance_Horizontal-Raster_tag1@@": "Os valores no raster devem ser inteiros de 0 a 360, com 0 graus sendo Norte ou em direção ao topo da tela e aumentando no sentido horário. As áreas planas recebem um valor de -1. Os valores em cada localização serão utilizados junto com o <strong>Fator Horizontal</strong> para determinar o custo horizontal incorrido ao mover uma célula para seus vizinhos.",
	"@@Path-Distance_Maximum-Distance_tag0@@": "O limite que os valores de custo acumulativo não podem exceder. Se um valor de distância de custo acumulativo exceder este valor, o valor de saída de local da célula será NoData. A distância máxima define a extensão em que as distâncias de custo acumulativo são calculadas. A distância padrão é a extensão do raster de saída.",
	"@@Path-Distance_Multiplier-to-Apply-to-Costs_tag0@@": "Um multiplicador para aplicar aos valores de custo.",
	"@@Path-Distance_Multiplier-to-Apply-to-Costs_tag1@@": "Este parâmetro permite o controle do modo de viagem ou a magnitude em uma origem. Quanto maior o multiplicador, maior o custo para mover por cada célula.",
	"@@Path-Distance_Multiplier-to-Apply-to-Costs_tag2@@": "Os valores devem ser maiores que zero. O padrão é 1.",
	"@@Path-Distance_Multiplier-to-Apply-to-Costs_tag3@@": "Um valor numérico (duplo) ou um campo a partir do <strong>Raster de Origem</strong> pode ser utilizado para este parâmetro.",
	"@@Path-Distance_Source-Raster_tag0@@": "O raster de entrada exigido de localizações de origem.",
	"@@Path-Distance_Source-Raster_tag1@@": "Este é um raster que identifica as células ou localizações de onde é calculada a menor distância de custo acumulada para cada localização da célula de saída.",
	"@@Path-Distance_Source-Raster_tag2@@": "Pode ser um tipo inteiro ou de ponto flutuante.",
	"@@Path-Distance_Start-Cost_tag0@@": "O custo de início para iniciar os cálculos de custo. Este parâmetro permite a especificação do custo fixo associado com uma origem. Em vez de iniciar a um custo de 0, o algoritmo de custo começará com o valor especificado.",
	"@@Path-Distance_Start-Cost_tag1@@": "O valor deve ser zero ou maior. O padrão é 0.",
	"@@Path-Distance_Surface-Raster_tag0@@": "Um raster definindo os valores de elevação em cada local de célula.",
	"@@Path-Distance_Surface-Raster_tag1@@": "Os valores são utilizados para calcular a distância de superfície real coberta ao analisar entre as células.",
	"@@Path-Distance_Travel-Direction_tag0@@": "Define a direção do viajante ao aplicar a taxa de resistência de origem e o custo inicial de origem.",
	"@@Path-Distance_Travel-Direction_tag1@@": "<strong>Da Origem</strong>—A taxa de resistência de origem e custo inicial de origem serão aplicados no início da origem de entrada e saindo para células diferentes da origem. Este é o padrão.",
	"@@Path-Distance_Travel-Direction_tag3@@": "<strong>Para Origem</strong>—A taxa de resistência de origem e custo inicial de origem serão aplicados no início de cada célula diferente da origem e movendo de volta para a origem de entrada.",
	"@@Path-Distance_Travel-Direction_tag5@@": "Especifique a palavra-chave <strong>Da Origem</strong> ou <strong>Para Origem</strong> , que será aplicada a todas as origens ou especifique um campo no <strong>Raster de Origem</strong> que contém as palavras-chaves para identificar a direção de viagem de cada origem. O campo deve conter a string ${FROM_SOURCE} ou ${TO_SOURCE}.",
	"@@Path-Distance_verticalfactor_tag0@@": "<p>Define a relação entre o fator de custo vertical e o ângulo de movimento relativo vertical (VRMA).</p><p>Há vários fatores com modificadores que identificam um gráfico de fator vertical definido. Adicionalmente, uma tabela pode ser utilizada para criar um gráfico personalizado. Os gráficos são usados ​​para identificar o fator vertical usado no cálculo do custo total de alteração para uma célula vizinha.</p><p>Nas explicações a seguir, são utilizadas duas siglas: VF e VRMA. VF significa fator vertical, que define a dificuldade horizontal encontrada ao mover de uma célula para a próxima. VRMA significa ângulo de movimento relativo vertical, que identifica o ângulo de declividade entre a célula DE, ou de processamento, e a célula PARA.</p><p><strong>Tipos de fator vertical</strong>incluem os seguintes:</p><ul><li><strong>Binário</strong>--Especifica que se o VRMA for maior que o ângulo de recorte baixo e menor que o ângulo de recorte alto, o VF é definido com o valor associado ao fator zero; caso contrário, é infinito.</li><li><strong>Linear</strong>--Indica que o VF é uma função linear do VRMA.</li><li><strong>Linear Simétrico</strong>--Especifica que o VF é uma função linear do VRMA no lado negativo ou positivo do VRMA, respectivamente, e as duas funções lineares são simétricas em relação ao eixo (y) VF.</li><li><strong>Linear Inverso</strong>--Indica que o VF é uma função linear inversa do VRMA.</li><li><strong>Linear Inverso Simétrico</strong>--Especifica que o VF é uma função linear inversa do VRMA no lado negativo ou positivo do VRMA, respectivamente, e as duas funções lineares são simétricas em relação ao eixo (y) VF.</li><li><strong>Cos</strong>--Identifica o VF como a função baseada no cosseno do VRMA.</li><li><strong>Sec</strong>--Identifica o VF como a função baseada na secante do VRMA.</li><li><strong>Cos-Sec</strong>--Especifica que o VF é a função baseada no cosseno do VRMA quando o VRMA é negativo e a função baseada na secante do VRMA quando o VRMA não é negativo.</li><li><strong>Sec-Cos</strong>--Especifica que o VF é a função baseada na secante do VRMA quando o VRMA é negativo e a função baseada no cosseno do VRMA quando o VRMA não é negativo.</li><li><strong>Tabela</strong>--Identifica que um arquivo de tabela será usado para definir o gráfico de fator vertical que é usado para determinar o VFs.</li></ul><p>Os modificadores para as palavras-chave verticais incluem o seguinte:</p><ul><li><strong>Fator Zero</strong>--Estabelece o fator vertical usado quando o VRMA é zero. Este fator posiciona a opção interceptar y da função especificada. Por definição, o fator zero não é aplicável a qualquer uma das funções verticais trigonométricas (COS, SEC, COS-SEC ou SEC-COS). A interceptação y é definida por essas funções.</li><li><strong>Ângulo de recorte baixo</strong>--Define o ângulo VRMA abaixo do qual a VF será definida para o infinito.</li><li><strong>Ângulo de recorte alto</strong>--Define o ângulo VRMA acima do qual a VF será definida para o infinito.</li><li><strong>Declividade</strong>--Estabelece a declividade da linha reta usada com a palavras-chave de fator vertical<strong>Linear</strong>e<strong>Linear Inverso</strong>. A declividade é especificada como uma fração da subida ao longo do curso (por exemplo, declividade de 45 porcento é 1/45, que é inserida como 0.02222).</li><li><strong>Nome da tabela</strong>--Identifica o nome da tabela que define o VF.</li></ul>",
	"@@Path-Distance_Vertical-Raster_tag0@@": "Define o relacionamento entre o fator de custo vertical e o ângulo de movimento relativo vertical (VRMA).",
	"@@Path-Distance_Vertical-Raster_tag1@@": "Os valores são utilizados para calcular a declividade para identificar o fator vertical incorrido ao mover de uma célula para outra.",
	"@@Path-Distance-Allocation_Accumulative-Cost-Resistance-Rate_tag0@@": "Este parâmetro simula o aumento no esforço para superar custos com os aumentos de custo acumulativo. É utilizado para modelar a fadiga do viajante. O custo acumulativo crescente para alcançar uma célula é multiplicado pela taxa de resistência e adicionado ao custo para movimento na célula subsequente.",
	"@@Path-Distance-Allocation_Accumulative-Cost-Resistance-Rate_tag1@@": "É uma versão modificada de uma fórmula de taxa de juros composta que é utilizada para calcular o custo aparente de movimento de uma célula. Conforme o valor da taxa de resistência aumentar, ela aumentará o custo das células que forem visitadas posteriormente. Quanto maior a taxa de resistência, mais alto o custo para alcançar a próxima célula, que é composta de cada movimento subsequente. Já que a taxa de resistência é semelhante a uma taxa composta e geralmente os valores de custo acumulativo são muito grandes, taxas de resistência pequenas são sugeridas, tal como, 0.005 ou até menor, dependendo dos valores de custo acumulativo.",
	"@@Path-Distance-Allocation_Accumulative-Cost-Resistance-Rate_tag2@@": "O valor deve ser maior que zero. A capacidade padrão é a extremidade do raster de saída.",
	"@@Path-Distance-Allocation_Capacity_tag0@@": "Define a capacidade de custo do viajante para uma origem. Os cálculos de custo continuam para cada origem até que a capacidade especificada seja alcançada.",
	"@@Path-Distance-Allocation_Capacity_tag1@@": "O valor deve ser maior que zero. A capacidade padrão é a extremidade do raster de saída.",
	"@@Path-Distance-Allocation_Cost-Raster_tag0@@": "Um raster de entrada exigido definindo o custo ou impedância para mover de forma plana através de cada célula. O valor em cada local de célula representa a distância de unidade por custo para mover por ele. Cada valor de local da célula é multiplicado pela resolução da célula, e também compensando por movimento diagonal para obter o custo total de passagem pela célula.",
	"@@Path-Distance-Allocation_Cost-Raster_tag1@@": "Os valores do <strong>Raster de Custo</strong> podem ser inteiro ou ponto flutuante, mas eles não podem ser negativos ou zero.",
	"@@Path-Distance-Allocation_horizontalfactor_tag0@@": "<p>Define a relação entre o fator de custo horizontal e o ângulo de movimento relativo horizontal (HRMA).</p><p>Há vários fatores com modificadores que identificam um gráfico de fator vertical definido. Adicionalmente, uma tabela pode ser utilizada para criar um gráfico personalizado. Os gráficos são usados ​​para identificar o fator vertical usado no cálculo do custo total de alteração para uma célula vizinha.</p><p>Nas explicações a seguir, são utilizadas duas siglas: HF e HRMA. HF significa fator horizontal, que define a dificuldade horizontal encontrada ao mover de uma célula para a próxima. HRMA significa ângulo de movimento relativo horizontal, que identifica o ângulo entre a direção horizontal de uma célula e a direção de movimento.</p><p><strong>Tipos de fator horizontal</strong>incluem o seguinte:</p><ul><li><strong>Binário</strong>--Indica que se o HRMA for menor que o ângulo de corte, o HF é definido com o valor associado ao fator zero; caso contrário, é infinito.</li><li><strong>Para frente</strong>--Estabelece que apenas o movimento para frente é permitido. O HRMA deve ser maior ou igual a 0 e menor que 90 graus (0 &lt; = HRMA &lt; 90). Se o HRMA for maior que 0 e menor que 45 graus, o HF para a célula é configurada para o valor associado com o fator zero. Se o HRMA for maior ou igual a 45 graus, o modificador de valor lateral é utilizado. O HF para qualquer valor HRMA igual ou superior a 90 graus é definido como infinito.</li><li><strong>Linear</strong>--Especifica que o HF é uma função linear do HRMA.</li><li><strong>Linear Inverso</strong>--Especifica que o HF é uma função linear inversa do HRMA.</li><li><strong>Tabela</strong>--Identifica que um arquivo de tabela será usado para definir o gráfico de fator horizontal usado para determinar os HFs.</li></ul><p>Os modificadores para os fatores horizontais incluem o seguinte:</p><ul><li><strong>Fator Zero</strong>--O fator horizontal a ser usado quando o HRMA for zero. Este fator posiciona a interceptação y para qualquer uma das funções de fator horizontal.</li><li><strong>Recortar ângulo</strong>--Define o ângulo HRMA além do qual o HF será definido para o infinito.</li><li><strong>Declividade</strong>--Estabelece a inclinação da linha reta usada com as palavras-chave de fator horizontal<strong>Linear</strong>e<strong>Linear Inverso</strong>. A declividade é especificada como uma fração da subida ao longo do curso (por exemplo, declividade de 45 porcento é 1/45, que é inserida como 0.02222).</li><li><strong>Valor lateral</strong>--Estabelece o HF quando o HRMA é maior ou igual a 45 graus e menor que 90 graus quando a palavra-chave fator horizontal<strong>Para frente</strong>for especificada.</li><li><strong>Nome da tabela</strong>--Identifica o nome da tabela que define o HF.</li></ul>",
	"@@Path-Distance-Allocation_Horizontal-Raster_tag0@@": "Um raster definindo a direção horizontal em cada local de célula.",
	"@@Path-Distance-Allocation_Horizontal-Raster_tag1@@": "Os valores no raster devem ser inteiros de 0 a 360, com 0 graus sendo Norte ou em direção ao topo da tela e aumentando no sentido horário. As áreas planas recebem um valor de -1. Os valores em cada localização serão utilizados junto com o <strong>Fator Horizontal</strong> para determinar o custo horizontal incorrido ao mover uma célula para seus vizinhos.",
	"@@Path-Distance-Allocation_Maximum-Distance_tag0@@": "O limite que os valores de custo acumulativo não podem exceder. Se um valor de distância de custo acumulativo exceder este valor, o valor de saída de local da célula será NoData. A distância máxima define a extensão em que as distâncias de custo acumulativo são calculadas. A distância padrão é a extensão do raster de saída.",
	"@@Path-Distance-Allocation_Multiplier-to-Apply-to-Costs_tag0@@": "Um multiplicador para aplicar aos valores de custo.",
	"@@Path-Distance-Allocation_Multiplier-to-Apply-to-Costs_tag1@@": "Este parâmetro permite o controle do modo de viagem ou a magnitude em uma origem. Quanto maior o multiplicador, maior o custo para mover por cada célula.",
	"@@Path-Distance-Allocation_Multiplier-to-Apply-to-Costs_tag2@@": "Os valores devem ser maiores que zero. O padrão é 1.",
	"@@Path-Distance-Allocation_Multiplier-to-Apply-to-Costs_tag3@@": "Um valor numérico (duplo) ou um campo a partir do <strong>Raster de Origem</strong> pode ser utilizado para este parâmetro.",
	"@@Path-Distance-Allocation_Source-Field_tag0@@": "O campo utilizado para atribuir valores para os locais de origem. Ele deve ser um tipo inteiro. Se o <strong>Raster de Valor</strong> foi configurado, os valores nesta entrada assumirão o comando de precedência de qualquer configuração do <strong>Campo de Origem</strong>.",
	"@@Path-Distance-Allocation_Source-Raster_tag0@@": "O raster de entrada exigido de localizações de origem.",
	"@@Path-Distance-Allocation_Source-Raster_tag1@@": "Este é um raster que identifica as células ou localizações de onde é calculada a menor distância de custo acumulada para cada localização da célula de saída.",
	"@@Path-Distance-Allocation_Source-Raster_tag2@@": "Pode ser um tipo inteiro ou de ponto flutuante.",
	"@@Path-Distance-Allocation_Start-Cost_tag0@@": "O custo de início para iniciar os cálculos de custo. Este parâmetro permite a especificação do custo fixo associado com uma origem. Em vez de iniciar a um custo de 0, o algoritmo de custo começará com o valor especificado.",
	"@@Path-Distance-Allocation_Start-Cost_tag1@@": "O valor deve ser zero ou maior. O padrão é 0.",
	"@@Path-Distance-Allocation_Surface-Raster_tag0@@": "Um raster definindo os valores de elevação em cada local de célula.",
	"@@Path-Distance-Allocation_Surface-Raster_tag1@@": "Os valores são utilizados para calcular a distância de superfície real coberta ao analisar entre as células.",
	"@@Path-Distance-Allocation_Travel-Direction_tag0@@": "Define a direção do viajante ao aplicar a taxa de resistência de origem e o custo inicial de origem.",
	"@@Path-Distance-Allocation_Travel-Direction_tag1@@": "<strong>Da Origem</strong>—A taxa de resistência de origem e custo inicial de origem serão aplicados no início da origem de entrada e saindo para células diferentes da origem. Este é o padrão.",
	"@@Path-Distance-Allocation_Travel-Direction_tag3@@": "<strong>Para Origem</strong>—A taxa de resistência de origem e custo inicial de origem serão aplicados no início de cada célula diferente da origem e movendo de volta para a origem de entrada.",
	"@@Path-Distance-Allocation_Travel-Direction_tag5@@": "Especifique a palavra-chave <strong>Da Origem</strong> ou <strong>Para Origem</strong> , que será aplicada a todas as origens ou especifique um campo no <strong>Raster de Origem</strong> que contém as palavras-chaves para identificar a direção de viagem de cada origem. O campo deve conter a string ${FROM_SOURCE} ou ${TO_SOURCE}.",
	"@@Path-Distance-Allocation_Value-Raster_tag0@@": "O raster inteiro de entrada que identifica os valores de zona a serem utilizados para cada localização de origem de entrada. Para cada célula do local de origem, o valor definido pelo <strong>Raster de Valor</strong> será atribuído para todas as células alocadas no local de origem do cálculo. O <strong>Raster de Valor</strong> assumirá o comando de precedência de qualquer configuração do <strong>Campo de Origem</strong>.",
	"@@Path-Distance-Allocation_verticalfactor_tag0@@": "<p>Define a relação entre o fator de custo vertical e o ângulo de movimento relativo vertical (VRMA).</p><p>Há vários fatores com modificadores que identificam um gráfico de fator vertical definido. Adicionalmente, uma tabela pode ser utilizada para criar um gráfico personalizado. Os gráficos são usados ​​para identificar o fator vertical usado no cálculo do custo total de alteração para uma célula vizinha.</p><p>Nas explicações a seguir, são utilizadas duas siglas: VF e VRMA. VF significa fator vertical, que define a dificuldade horizontal encontrada ao mover de uma célula para a próxima. VRMA significa ângulo de movimento relativo vertical, que identifica o ângulo de declividade entre a célula DE, ou de processamento, e a célula PARA.</p><p><strong>Tipos de fator vertical</strong>incluem os seguintes:</p><ul><li><strong>Binário</strong>--Especifica que se o VRMA for maior que o ângulo de recorte baixo e menor que o ângulo de recorte alto, o VF é definido com o valor associado ao fator zero; caso contrário, é infinito.</li><li><strong>Linear</strong>--Indica que o VF é uma função linear do VRMA.</li><li><strong>Linear Simétrico</strong>--Especifica que o VF é uma função linear do VRMA no lado negativo ou positivo do VRMA, respectivamente, e as duas funções lineares são simétricas em relação ao eixo (y) VF.</li><li><strong>Linear Inverso</strong>--Indica que o VF é uma função linear inversa do VRMA.</li><li><strong>Linear Inverso Simétrico</strong>--Especifica que o VF é uma função linear inversa do VRMA no lado negativo ou positivo do VRMA, respectivamente, e as duas funções lineares são simétricas em relação ao eixo (y) VF.</li><li><strong>Cos</strong>--Identifica o VF como a função baseada no cosseno do VRMA.</li><li><strong>Sec</strong>--Identifica o VF como a função baseada na secante do VRMA.</li><li><strong>Cos-Sec</strong>--Especifica que o VF é a função baseada no cosseno do VRMA quando o VRMA é negativo e a função baseada na secante do VRMA quando o VRMA não é negativo.</li><li><strong>Sec-Cos</strong>--Especifica que o VF é a função baseada na secante do VRMA quando o VRMA é negativo e a função baseada no cosseno do VRMA quando o VRMA não é negativo.</li><li><strong>Tabela</strong>--Identifica que um arquivo de tabela será usado para definir o gráfico de fator vertical que é usado para determinar o VFs.</li></ul><p>Os modificadores para as palavras-chave verticais incluem o seguinte:</p><ul><li><strong>Fator Zero</strong>--Estabelece o fator vertical usado quando o VRMA é zero. Este fator posiciona a opção interceptar y da função especificada. Por definição, o fator zero não é aplicável a qualquer uma das funções verticais trigonométricas (COS, SEC, COS-SEC ou SEC-COS). A interceptação y é definida por essas funções.</li><li><strong>Ângulo de recorte baixo</strong>--Define o ângulo VRMA abaixo do qual a VF será definida para o infinito.</li><li><strong>Ângulo de recorte alto</strong>--Define o ângulo VRMA acima do qual a VF será definida para o infinito.</li><li><strong>Declividade</strong>--Estabelece a declividade da linha reta usada com a palavras-chave de fator vertical<strong>Linear</strong>e<strong>Linear Inverso</strong>. A declividade é especificada como uma fração da subida ao longo do curso (por exemplo, declividade de 45 porcento é 1/45, que é inserida como 0.02222).</li><li><strong>Nome da tabela</strong>--Identifica o nome da tabela que define o VF.</li></ul>",
	"@@Path-Distance-Allocation_Vertical-Raster_tag0@@": "Define o relacionamento entre o fator de custo vertical e o ângulo de movimento relativo vertical (VRMA).",
	"@@Path-Distance-Allocation_Vertical-Raster_tag1@@": "Os valores são utilizados para calcular a declividade para identificar o fator vertical incorrido ao mover de uma célula para outra.",
	"@@Path-Distance-Back-Link_Accumulative-Cost-Resistance-Rate_tag0@@": "Este parâmetro simula o aumento no esforço para superar custos com os aumentos de custo acumulativo. É utilizado para modelar a fadiga do viajante. O custo acumulativo crescente para alcançar uma célula é multiplicado pela taxa de resistência e adicionado ao custo para movimento na célula subsequente.",
	"@@Path-Distance-Back-Link_Accumulative-Cost-Resistance-Rate_tag1@@": "É uma versão modificada de uma fórmula de taxa de juros composta que é utilizada para calcular o custo aparente de movimento de uma célula. Conforme o valor da taxa de resistência aumentar, ela aumentará o custo das células que forem visitadas posteriormente. Quanto maior a taxa de resistência, mais alto o custo para alcançar a próxima célula, que é composta de cada movimento subsequente. Já que a taxa de resistência é semelhante a uma taxa composta e geralmente os valores de custo acumulativo são muito grandes, taxas de resistência pequenas são sugeridas, tal como, 0.005 ou até menor, dependendo dos valores de custo acumulativo.",
	"@@Path-Distance-Back-Link_Accumulative-Cost-Resistance-Rate_tag2@@": "O valor deve ser maior que zero. A capacidade padrão é a extremidade do raster de saída.",
	"@@Path-Distance-Back-Link_Capacity_tag0@@": "Define a capacidade de custo do viajante para uma origem. Os cálculos de custo continuam para cada origem até que a capacidade especificada seja alcançada.",
	"@@Path-Distance-Back-Link_Capacity_tag1@@": "O valor deve ser maior que zero. A capacidade padrão é a extremidade do raster de saída.",
	"@@Path-Distance-Back-Link_Cost-Raster_tag0@@": "Um raster de entrada exigido definindo o custo ou impedância para mover de forma plana através de cada célula. O valor em cada local de célula representa a distância de unidade por custo para mover por ele. Cada valor de local da célula é multiplicado pela resolução da célula, e também compensando por movimento diagonal para obter o custo total de passagem pela célula.",
	"@@Path-Distance-Back-Link_Cost-Raster_tag1@@": "Os valores do <strong>Raster de Custo</strong> podem ser inteiro ou ponto flutuante, mas eles não podem ser negativos ou zero.",
	"@@Path-Distance-Back-Link_horizontalfactor_tag0@@": "<p>Define a relação entre o fator de custo horizontal e o ângulo de movimento relativo horizontal (HRMA).</p><p>Há vários fatores com modificadores que identificam um gráfico de fator vertical definido. Adicionalmente, uma tabela pode ser utilizada para criar um gráfico personalizado. Os gráficos são usados ​​para identificar o fator vertical usado no cálculo do custo total de alteração para uma célula vizinha.</p><p>Nas explicações a seguir, são utilizadas duas siglas: HF e HRMA. HF significa fator horizontal, que define a dificuldade horizontal encontrada ao mover de uma célula para a próxima. HRMA significa ângulo de movimento relativo horizontal, que identifica o ângulo entre a direção horizontal de uma célula e a direção de movimento.</p><p><strong>Tipos de fator horizontal</strong>incluem o seguinte:</p><ul><li><strong>Binário</strong>--Indica que se o HRMA for menor que o ângulo de corte, o HF é definido com o valor associado ao fator zero; caso contrário, é infinito.</li><li><strong>Para frente</strong>--Estabelece que apenas o movimento para frente é permitido. O HRMA deve ser maior ou igual a 0 e menor que 90 graus (0 &lt; = HRMA &lt; 90). Se o HRMA for maior que 0 e menor que 45 graus, o HF para a célula é configurada para o valor associado com o fator zero. Se o HRMA for maior ou igual a 45 graus, o modificador de valor lateral é utilizado. O HF para qualquer valor HRMA igual ou superior a 90 graus é definido como infinito.</li><li><strong>Linear</strong>--Especifica que o HF é uma função linear do HRMA.</li><li><strong>Linear Inverso</strong>--Especifica que o HF é uma função linear inversa do HRMA.</li><li><strong>Tabela</strong>--Identifica que um arquivo de tabela será usado para definir o gráfico de fator horizontal usado para determinar os HFs.</li></ul><p>Os modificadores para os fatores horizontais incluem o seguinte:</p><ul><li><strong>Fator Zero</strong>--O fator horizontal a ser usado quando o HRMA for zero. Este fator posiciona a interceptação y para qualquer uma das funções de fator horizontal.</li><li><strong>Recortar ângulo</strong>--Define o ângulo HRMA além do qual o HF será definido para o infinito.</li><li><strong>Declividade</strong>--Estabelece a inclinação da linha reta usada com as palavras-chave de fator horizontal<strong>Linear</strong>e<strong>Linear Inverso</strong>. A declividade é especificada como uma fração da subida ao longo do curso (por exemplo, declividade de 45 porcento é 1/45, que é inserida como 0.02222).</li><li><strong>Valor lateral</strong>--Estabelece o HF quando o HRMA é maior ou igual a 45 graus e menor que 90 graus quando a palavra-chave fator horizontal<strong>Para frente</strong>for especificada.</li><li><strong>Nome da tabela</strong>--Identifica o nome da tabela que define o HF.</li></ul>",
	"@@Path-Distance-Back-Link_Horizontal-Raster_tag0@@": "Um raster definindo a direção horizontal em cada local de célula.",
	"@@Path-Distance-Back-Link_Horizontal-Raster_tag1@@": "Os valores no raster devem ser inteiros de 0 a 360, com 0 graus sendo Norte ou em direção ao topo da tela e aumentando no sentido horário. As áreas planas recebem um valor de -1. Os valores em cada localização serão utilizados junto com o <strong>Fator Horizontal</strong> para determinar o custo horizontal incorrido ao mover uma célula para seus vizinhos.",
	"@@Path-Distance-Back-Link_Maximum-Distance_tag0@@": "O limite que os valores de custo acumulativo não podem exceder. Se um valor de distância de custo acumulativo exceder este valor, o valor de saída de local da célula será NoData. A distância máxima define a extensão em que as distâncias de custo acumulativo são calculadas. A distância padrão é a extensão do raster de saída.",
	"@@Path-Distance-Back-Link_Multiplier-to-Apply-to-Costs_tag0@@": "Um multiplicador para aplicar aos valores de custo.",
	"@@Path-Distance-Back-Link_Multiplier-to-Apply-to-Costs_tag1@@": "Este parâmetro permite o controle do modo de viagem ou a magnitude em uma origem. Quanto maior o multiplicador, maior o custo para mover por cada célula.",
	"@@Path-Distance-Back-Link_Multiplier-to-Apply-to-Costs_tag2@@": "Os valores devem ser maiores que zero. O padrão é 1.",
	"@@Path-Distance-Back-Link_Multiplier-to-Apply-to-Costs_tag3@@": "Um valor numérico (duplo) ou um campo a partir do <strong>Raster de Origem</strong> pode ser utilizado para este parâmetro.",
	"@@Path-Distance-Back-Link_Source-Raster_tag0@@": "O raster de entrada exigido de localizações de origem.",
	"@@Path-Distance-Back-Link_Source-Raster_tag1@@": "Este é um raster que identifica as células ou localizações de onde é calculada a menor distância de custo acumulada para cada localização da célula de saída.",
	"@@Path-Distance-Back-Link_Source-Raster_tag2@@": "Pode ser um tipo inteiro ou de ponto flutuante.",
	"@@Path-Distance-Back-Link_Start-Cost_tag0@@": "O custo de início para iniciar os cálculos de custo. Este parâmetro permite a especificação do custo fixo associado com uma origem. Em vez de iniciar a um custo de 0, o algoritmo de custo começará com o valor especificado.",
	"@@Path-Distance-Back-Link_Start-Cost_tag1@@": "O valor deve ser zero ou maior. O padrão é 0.",
	"@@Path-Distance-Back-Link_Surface-Raster_tag0@@": "Um raster definindo os valores de elevação em cada local de célula.",
	"@@Path-Distance-Back-Link_Surface-Raster_tag1@@": "Os valores são utilizados para calcular a distância de superfície real coberta ao analisar entre as células.",
	"@@Path-Distance-Back-Link_Travel-Direction_tag0@@": "Define a direção do viajante ao aplicar a taxa de resistência de origem e o custo inicial de origem.",
	"@@Path-Distance-Back-Link_Travel-Direction_tag1@@": "<strong>Da Origem</strong>—A taxa de resistência de origem e custo inicial de origem serão aplicados no início da origem de entrada e saindo para células diferentes da origem. Este é o padrão.",
	"@@Path-Distance-Back-Link_Travel-Direction_tag3@@": "<strong>Para Origem</strong>—A taxa de resistência de origem e custo inicial de origem serão aplicados no início de cada célula diferente da origem e movendo de volta para a origem de entrada.",
	"@@Path-Distance-Back-Link_Travel-Direction_tag5@@": "Especifique a palavra-chave <strong>Da Origem</strong> ou <strong>Para Origem</strong> , que será aplicada a todas as origens ou especifique um campo no <strong>Raster de Origem</strong> que contém as palavras-chaves para identificar a direção de viagem de cada origem. O campo deve conter a string ${FROM_SOURCE} ou ${TO_SOURCE}.",
	"@@Path-Distance-Back-Link_verticalfactor_tag0@@": "<p>Define a relação entre o fator de custo vertical e o ângulo de movimento relativo vertical (VRMA).</p><p>Há vários fatores com modificadores que identificam um gráfico de fator vertical definido. Adicionalmente, uma tabela pode ser utilizada para criar um gráfico personalizado. Os gráficos são usados ​​para identificar o fator vertical usado no cálculo do custo total de alteração para uma célula vizinha.</p><p>Nas explicações a seguir, são utilizadas duas siglas: VF e VRMA. VF significa fator vertical, que define a dificuldade horizontal encontrada ao mover de uma célula para a próxima. VRMA significa ângulo de movimento relativo vertical, que identifica o ângulo de declividade entre a célula DE, ou de processamento, e a célula PARA.</p><p><strong>Tipos de fator vertical</strong>incluem os seguintes:</p><ul><li><strong>Binário</strong>--Especifica que se o VRMA for maior que o ângulo de recorte baixo e menor que o ângulo de recorte alto, o VF é definido com o valor associado ao fator zero; caso contrário, é infinito.</li><li><strong>Linear</strong>--Indica que o VF é uma função linear do VRMA.</li><li><strong>Linear Simétrico</strong>--Especifica que o VF é uma função linear do VRMA no lado negativo ou positivo do VRMA, respectivamente, e as duas funções lineares são simétricas em relação ao eixo (y) VF.</li><li><strong>Linear Inverso</strong>--Indica que o VF é uma função linear inversa do VRMA.</li><li><strong>Linear Inverso Simétrico</strong>--Especifica que o VF é uma função linear inversa do VRMA no lado negativo ou positivo do VRMA, respectivamente, e as duas funções lineares são simétricas em relação ao eixo (y) VF.</li><li><strong>Cos</strong>--Identifica o VF como a função baseada no cosseno do VRMA.</li><li><strong>Sec</strong>--Identifica o VF como a função baseada na secante do VRMA.</li><li><strong>Cos-Sec</strong>--Especifica que o VF é a função baseada no cosseno do VRMA quando o VRMA é negativo e a função baseada na secante do VRMA quando o VRMA não é negativo.</li><li><strong>Sec-Cos</strong>--Especifica que o VF é a função baseada na secante do VRMA quando o VRMA é negativo e a função baseada no cosseno do VRMA quando o VRMA não é negativo.</li><li><strong>Tabela</strong>--Identifica que um arquivo de tabela será usado para definir o gráfico de fator vertical que é usado para determinar o VFs.</li></ul><p>Os modificadores para as palavras-chave verticais incluem o seguinte:</p><ul><li><strong>Fator Zero</strong>--Estabelece o fator vertical usado quando o VRMA é zero. Este fator posiciona a opção interceptar y da função especificada. Por definição, o fator zero não é aplicável a qualquer uma das funções verticais trigonométricas (COS, SEC, COS-SEC ou SEC-COS). A interceptação y é definida por essas funções.</li><li><strong>Ângulo de recorte baixo</strong>--Define o ângulo VRMA abaixo do qual a VF será definida para o infinito.</li><li><strong>Ângulo de recorte alto</strong>--Define o ângulo VRMA acima do qual a VF será definida para o infinito.</li><li><strong>Declividade</strong>--Estabelece a declividade da linha reta usada com a palavras-chave de fator vertical<strong>Linear</strong>e<strong>Linear Inverso</strong>. A declividade é especificada como uma fração da subida ao longo do curso (por exemplo, declividade de 45 porcento é 1/45, que é inserida como 0.02222).</li><li><strong>Nome da tabela</strong>--Identifica o nome da tabela que define o VF.</li></ul>",
	"@@Path-Distance-Back-Link_Vertical-Raster_tag0@@": "Define o relacionamento entre o fator de custo vertical e o ângulo de movimento relativo vertical (VRMA).",
	"@@Path-Distance-Back-Link_Vertical-Raster_tag1@@": "Os valores são utilizados para calcular a declividade para identificar o fator vertical incorrido ao mover de uma célula para outra.",
	"@@Plus_Cellsize-Type_tag0@@": "Escolha que tamanho de célula deve ser utilizado no raster de saída. Se todos os tamanhos de célula de entrada forem os mesmos, todas as opções renderão os mesmos resultados.",
	"@@Plus_Cellsize-Type_tag1@@": "Primeiro De--Utiliza o primeiro tamanho de célula dos rasters de entrada.",
	"@@Plus_Cellsize-Type_tag2@@": "Último De--Utiliza o último tamanho de célula dos rasters de entrada.",
	"@@Plus_Cellsize-Type_tag3@@": "Máximo De--Utiliza o maior tamanho de célula de todos os rasters de entrada. Este é o padrão.",
	"@@Plus_Cellsize-Type_tag4@@": "Média De--Utiliza o tamanho médio de célula de todos os rasters de entrada.",
	"@@Plus_Cellsize-Type_tag5@@": "Mínimo De--Utiliza o menor tamanho de célula de todos os rasters de entrada.",
	"@@Plus_Extent-Type_tag0@@": "Escolha qual extensão deve ser utilizada no raster de saída:",
	"@@Plus_Extent-Type_tag1@@": "Primeiro De--Utiliza a extensão do primeiro raster de entrada para determinar a extensão de processamento.",
	"@@Plus_Extent-Type_tag2@@": "Intersecção De--Utiliza a extensão dos pixels de sobreposição para determinar a extensão de processamento. Este é o padrão.",
	"@@Plus_Extent-Type_tag3@@": "Última De--Utiliza a extensão do último raster de entrada para determinar a extensão de processamento.",
	"@@Plus_Extent-Type_tag4@@": "União De--Utiliza a extensão de todos os rasters para determinar a extensão de processamento.",
	"@@Plus_Raster_tag0@@": "A entrada cujos valores serão adicionados.",
	"@@Plus_Raster_tag1@@": "Um valor constante pode ser utilizado como uma entrada para este parâmetro, fornecendo um raster que é especificado para o outro parâmetro.",
	"@@Plus_Raster2_tag0@@": "A entrada cujos valores serão adicionados à primeira entrada.",
	"@@Plus_Raster2_tag1@@": "Um valor constante pode ser utilizado como uma entrada para este parâmetro, fornecendo um raster que é especificado para o outro parâmetro.",
	"@@Local_Cellsize-Type_tag0@@": "Escolha que tamanho de célula deve ser utilizado no raster de saída. Se todos os tamanhos de célula de entrada forem os mesmos, todas as opções renderão os mesmos resultados.",
	"@@Local_Cellsize-Type_tag1@@": "Primeiro De--Utiliza o primeiro tamanho de célula dos rasters de entrada.",
	"@@Local_Cellsize-Type_tag2@@": "Último De--Utiliza o último tamanho de célula dos rasters de entrada.",
	"@@Local_Cellsize-Type_tag3@@": "Máximo De--Utiliza o maior tamanho de célula de todos os rasters de entrada. Este é o padrão.",
	"@@Local_Cellsize-Type_tag4@@": "Média De--Utiliza o tamanho médio de célula de todos os rasters de entrada.",
	"@@Local_Cellsize-Type_tag5@@": "Mínimo De--Utiliza o menor tamanho de célula de todos os rasters de entrada.",
	"@@Local_Extent-Type_tag0@@": "Escolha qual extensão deve ser utilizada no raster de saída:",
	"@@Local_Extent-Type_tag1@@": "Primeiro De--Utiliza a extensão do primeiro raster de entrada para determinar a extensão de processamento.",
	"@@Local_Extent-Type_tag2@@": "Intersecção De--Utiliza a extensão dos pixels de sobreposição para determinar a extensão de processamento. Este é o padrão.",
	"@@Local_Extent-Type_tag3@@": "Última De—Utiliza a extensão do último raster de entrada para determinar a extensão de processamento.",
	"@@Local_Extent-Type_tag4@@": "União De--Utiliza a extensão de todos os rasters para determinar a extensão de processamento.",
	"@@Local_Raster_tag0@@": "A entrada cujos valores serão adicionados.",
	"@@Local_Raster_tag1@@": "Um valor constante pode ser utilizado como uma entrada para este parâmetro, fornecendo um raster que é especificado para o outro parâmetro.",
	"@@Local_Raster2_tag0@@": "A entrada cujos valores serão adicionados à primeira entrada.",
	"@@Local_Raster2_tag1@@": "Um valor constante pode ser utilizado como uma entrada para este parâmetro, fornecendo um raster que é especificado para o outro parâmetro.",
	"@@Local_False-Raster_tag0@@": "A entrada cujos valores serão utilizados como os valores de pixel de saída se a condição for falsa. Pode ser um raster inteiro, um de ponto flutuante ou um valor constante.",
	"@@Local_True-Raster_tag0@@": "A entrada cujos valores serão utilizados como os valores de pixel de saída se a condição for verdadeira. Pode ser um raster inteiro, um de ponto flutuante ou um valor constante.",
	"@@Power_Cellsize-Type_tag0@@": "Escolha que tamanho de célula deve ser utilizado no raster de saída. Se todos os tamanhos de célula de entrada forem os mesmos, todas as opções renderão os mesmos resultados.",
	"@@Power_Cellsize-Type_tag1@@": "Primeiro De--Utiliza o primeiro tamanho de célula dos rasters de entrada.",
	"@@Power_Cellsize-Type_tag2@@": "Último De--Utiliza o último tamanho de célula dos rasters de entrada.",
	"@@Power_Cellsize-Type_tag3@@": "Máximo De--Utiliza o maior tamanho de célula de todos os rasters de entrada. Este é o padrão.",
	"@@Power_Cellsize-Type_tag4@@": "Média De--Utiliza o tamanho médio de célula de todos os rasters de entrada.",
	"@@Power_Cellsize-Type_tag5@@": "Mínimo De--Utiliza o menor tamanho de célula de todos os rasters de entrada.",
	"@@Power_Extent-Type_tag0@@": "Escolha qual extensão deve ser utilizada no raster de saída:",
	"@@Power_Extent-Type_tag1@@": "Primeiro De--Utiliza a extensão do primeiro raster de entrada para determinar a extensão de processamento.",
	"@@Power_Extent-Type_tag2@@": "Intersecção De--Utiliza a extensão dos pixels de sobreposição para determinar a extensão de processamento. Este é o padrão.",
	"@@Power_Extent-Type_tag3@@": "Última De--Utiliza a extensão do último raster de entrada para determinar a extensão de processamento.",
	"@@Power_Extent-Type_tag4@@": "União De--Utiliza a extensão de todos os rasters para determinar a extensão de processamento.",
	"@@Power_Raster_tag0@@": "Os valores de entrada a serem aumentados para a potência definida por <strong>Raster2</strong>.",
	"@@Power_Raster_tag3@@": "Um valor constante pode ser utilizado como uma entrada para este parâmetro, fornecendo um raster que é especificado para o outro parâmetro.",
	"@@Power_Raster2_tag0@@": "A entrada que determina a potência em que os valores de <strong>Raster</strong> serão elevados.",
	"@@Power_Raster2_tag3@@": "Um valor constante pode ser utilizado como uma entrada para este parâmetro, fornecendo um raster que é especificado para o outro parâmetro.",
	"@@Radar-Calibration_Calibration-Type_tag0@@": "O tipo de calibração a ser executada.",
	"@@Radar-Calibration_Calibration-Type_tag1@@": "Beta-zero--A função retorna a refletividade do radar por unidade de área na faixa inclinada. Este é o tipo de calibração padrão.",
	"@@Radar-Calibration_Calibration-Type_tag2@@": "Sigma-zero--A função retorna a refletividade do radar por unidade de área na faixa da superfície. Os resultados são valores de ponto flutuante de 32 bits, que geralmente estão no intervalo de 0.0 a 1.0. Não é realizado nenhum recorte de dados se esta opção for selecionada.",
	"@@Radar-Calibration_Calibration-Type_tag3@@": "Gama--A função retorna a refletividade do radar por unidade de área no plano perpendicular à direção da medição.",
	"@@Radar-Calibration_Calibration-Type_tag4@@": "Nenhum",
	"@@Radar-Calibration_Raster_tag0@@": "O raster de entrada.",
	"@@RasterInfo_Raster-Info_tag0@@": "Selecione um conjunto de dados raster para utilizar como um modelo",
	"@@RasterInfo_Raster_tag0@@": "O raster de entrada.",
	"@@Rasterize-Attributes_Attribute-Field-Names_tag0@@": "Uma lista de campos na <strong>Tabela de Atributos Zonais</strong>, onde cada campo é separado por uma vírgula. Os valores em cada campo serão representados por uma banda no raster de saída.",
	"@@Rasterize-Attributes_Background-Value_tag0@@": "O valor de pixel inicial das bandas de saída em um raster, antes de ser remapeado.",
	"@@Rasterize-Attributes_Background-Value_tag1@@": "Se um pixel não estiver dentro de uma zona, ele permanecerá como o valor do plano de fundo.",
	"@@Rasterize-Attributes_Value-Raster_tag0@@": "O raster de entrada exigido.",
	"@@Rasterize-Attributes_Value-Raster_tag1@@": "A entrada deve ser um raster de única banda. Se um raster de múltiplas bandas for utilizado, somente a primeira banda será utilizada.",
	"@@Rasterize-Attributes_Where-Clause_tag0@@": "Uma consulta adicional opcional aplicada na <strong>Tabela de Atributos Zonais</strong>.",
	"@@Rasterize-Attributes_Where-Clause_tag3@@": "Se você estiver utilizando a tabela acima como um exemplo, a consulta seria ${Variable1 = 'bare earth'}.",
	"@@Rasterize-Attributes_Zonal-Attributes-Table_tag0@@": "Os atributos zonais especificados como um caminho para uma classe de feição local, o caminho para uma tabela, a URL para uma camada de serviço da feição ou uma string de JSON.",
	"@@Rasterize-Attributes_Zonal-Attributes-Table_tag1@@": "No JSON, é descrito como uma coleção de mapeamento de IDs da zona para um conjunto de números inteiros. ${{ zoneId:[f1,f2,...,fn], ... } }",
	"@@Rasterize-Attributes_Zone-Field_tag0@@": "O nome de campo que contém os valores de ID da zona.",
	"@@Rasterize-Attributes_Zone-Raster_tag0@@": "Um raster opcional de única banda onde cada pixel contém o ID da zona associado à localização. O ID da zona é utilizado para pesquisar linhas na tabela de atributos zonais para a ingestão específica da zona.",
	"@@Rasterize-Attributes_Zone-Raster_tag1@@": "Deixe este parâmetro não especificado se você desejar somente importar o atributo.",
	"@@Rasterize-Features_Field_tag0@@": "Selecione o campo a ser utilizado para identificar cada feição.",
	"@@Rasterize-Features_Input-Features_tag0@@": "Selecione a classe de feição para converter em formato de raster.",
	"@@Rasterize-Features_Raster_tag0@@": "Selecione um raster para definir o tamanho da célula e extensão para a conversão da feição.",
	"@@Rasterize-Features_Resolve-Overlap-Method_tag0@@": "Determine como gerenciar feições que se sobrepõem:",
	"@@Rasterize-Features_Resolve-Overlap-Method_tag1@@": "<strong>Primeiro</strong>--As áreas de sobreposição receberão um valor do primeiro conjunto de dados listado.",
	"@@Rasterize-Features_Resolve-Overlap-Method_tag3@@": "<strong>Último</strong>--As áreas de sobreposição receberão um valor do último conjunto de dados listado.",
	"@@Rasterize-Features_Resolve-Overlap-Method_tag5@@": "<strong>Menor</strong>--As áreas de sobreposição receberão um valor da menor das feições.",
	"@@Rasterize-Features_Resolve-Overlap-Method_tag7@@": "<strong>Maior</strong>--As áreas de sobreposição receberão um valor da maior das feições.",
	"@@Recast_Overrides_tag0@@": "Uma tabela de nomes de variáveis e valores definidos pelo usuário utilizados para modificar um conjunto de dados do mosaico.",
	"@@Recast_Raster_tag0@@": "O produto raster no qual a a função Remodelar será aplicada.",
	"@@Region-Group_Add-Link_tag0@@": "Especifica se um campo de link é adicionado à tabela de saída.",
	"@@Region-Group_Add-Link_tag1@@": "<strong>Adicionar Link</strong>--Um item do item ${LINK} será adicionado à tabela do raster de saída.",
	"@@Region-Group_Add-Link_tag3@@": "<strong>Nenhum Link</strong>--A tabela de atributos do raster de saída conterá somente os itens ${Value} e ${Count}.",
	"@@Region-Group_Excluded-Value_tag0@@": "Identifica um valor que, se um local da célula tiver o valor, nenhuma conectividade espacial será avaliada, independentemente de como o número de vizinhos for especificado (QUATRO ou OITO).",
	"@@Region-Group_Excluded-Value_tag1@@": "Células com o valor excluído serão tratadas como NoData e serão eliminadas dos cálculos. Os locais das células que contêm o valor excluído receberão 0 no raster de saída.",
	"@@Region-Group_Excluded-Value_tag2@@": "O valor excluído é semelhante ao conceito de valor do plano de fundo ou com a aplicação de uma máscara. Um valor deve ser especificado para este parâmetro se o parâmetro <strong>${CROSS}</strong> for especificado.",
	"@@Region-Group_Number-of-Neighbor-Cells_tag0@@": "O número de células vizinhas a serem utilizadas na avaliação da conectividade entre células.",
	"@@Region-Group_Number-of-Neighbor-Cells_tag1@@": "<strong>QUATRO</strong>--Define a conectividade entre células do mesmo valor somente se as células estiverem diretamente à esquerda, direita, acima ou abaixo de cada um dos quatro vizinhos mais próximos. Este é o padrão.",
	"@@Region-Group_Number-of-Neighbor-Cells_tag3@@": "<strong>OITO</strong>--Define a conectividade entre células do mesmo valor se elas estiverem nas vizinhanças imediatas de oito células uma da outra. Isso inclui à direita, esquerda, acima ou diagonal entre si.",
	"@@Region-Group_Zone-Connectivity_tag0@@": "Define quais valores da célula devem ser considerados ao testar a conectividade.",
	"@@Region-Group_Zone-Connectivity_tag1@@": "<strong>DENTRO</strong>--Testa a conectividade entre valores de entrada que são os mesmos dentro da mesma zona. Este é o padrão.",
	"@@Region-Group_Zone-Connectivity_tag3@@": "As únicas células que podem ser agrupadas são células da mesma zona (valor) que atendem os requisitos espaciais de conectividade especificada pelo parâmetro <strong>Número de vizinhos</strong> (modo quatro ou modo oito).",
	"@@Region-Group_Zone-Connectivity_tag6@@": "<strong>CRUZAR</strong>--Testa a conectividade pelos requisitos espaciais especificados pelo parâmetro do número de vizinhos entre células com quaisquer valores, exceto pelo valor identificado como excluído pelo parâmetro de valor excluído.",
	"@@Region-Group_Zone-Connectivity_tag8@@": "Quando esta opção for utilizada, um valor do parâmetro <strong>Valor excluído</strong> deve ser especificado.",
	"@@Region-Group_Zone-Raster_tag0@@": "O raster de entrada exigido cujas regiões conectadas únicas serão identificadas.",
	"@@Region-Group_Zone-Raster_tag1@@": "Ele deve ser um tipo inteiro.",
	"@@Region-Grow_Fill-Value-Field_tag0@@": "O campo na tabela de atributos que define o valor de preenchimento para o grupo de pixels. Em uma imagem de múltiplas bandas, todas as bandas receberão este valor.",
	"@@Region-Grow_Max-Growth-Radius-Field_tag0@@": "O campo na tabela de atributos que define o raio de crescimento máximo, nas unidades de referência espacial da imagem.",
	"@@Region-Grow_Raster_tag0@@": "O raster que você deseja executar esta função.",
	"@@Region-Grow_Seed-Points_tag0@@": "Uma classe de feição de ponto, servindo como origens iniciais para o algoritmo. Cada ponto de origem corresponde a uma entrada na tabela de atributos, que contém o raio de crescimento máximo, o limite de similaridade e informações do valor de preenchimento.",
	"@@Region-Grow_Similarity-Threshold-Field_tag0@@": "O campo na tabela de atributos que define o limite de similaridade, como distância Euclidiana no espaço espectral.",
	"@@Remap_Allow-Unmatched-Pixel-Values_tag0@@": "Valores ausentes na tabela de reclassificação podem manter seu valor ou serem remapeados para NoData.",
	"@@Remap_Allow-Unmatched-Pixel-Values_tag1@@": "Desmarcado--Qualquer pixel do raster de entrada que não seja reclassificado em uma tabela de remapeamento manterá seu valor e será gravado na sua localização no raster de saída. Este é o padrão.",
	"@@Remap_Allow-Unmatched-Pixel-Values_tag2@@": "Marcado--Qualquer pixel do raster de entrada que não seja reclassificado em uma tabela de remapeamento terá seu valor remapeado para NoData na sua localização no raster de saída.",
	"@@Remap_Input-Field_tag0@@": "Escolha o campo que especifica o valor do pixel de entrada que será remapeado.",
	"@@Remap_Input-Field_tag1@@": "Se a sua tabela tiver um intervalo de valores, este será o campo de valor mínimo e o parâmetro <strong>Campo Máximo de Entrada</strong> também precisará ser especificado.",
	"@@Remap_Input-Max-Field_tag0@@": "Escolha o campo de valor máximo se a sua tabela especificar um intervalo de valores.",
	"@@Remap_List_tag0@@": "Especifique os valores de mapa e especifique o intervalo de valores mínimo e máximo e os novos valores de remapeamento. Além disso, o intervalo de valores pode ser definido como pixels de NoData.",
	"@@Remap_Output-Field_tag0@@": "Escolha o campo que será utilizado como o valor remapeado de saída.",
	"@@Remap_Raster_tag0@@": "O raster de entrada.",
	"@@Remap_Remap-Definition-Type_tag0@@": "Escolha a opção que você deseja utilizar para definir os valores de remapeamento:",
	"@@Remap_Remap-Definition-Type_tag1@@": "Lista--Especifique um intervalo de valores de pixel para mapear um valor de pixel de saída",
	"@@Remap_Remap-Table-Type_tag0@@": "Escolha o tipo de tabela que você utilizará para remapear seu raster de entrada:",
	"@@Remap_Remap-Table-Type_tag1@@": "Simples--Utiliza a entrada da <strong>Tabela de Remapeamento</strong> para remapear valores de pixel do <strong>Campo de Entrada</strong> para o valor correspondente no parâmetro <strong>Campo de Saída</strong>. Este método gera cache da tabela de remapeamento para que ele possa executar mais rapidamente.",
	"@@Remap_Remap-Table-Type_tag8@@": "Dinâmico--Este método não gera cache da tabela de remapeamento e fará uma consulta toda vez que uma solicitação for feita (mover, zoom ou atualizar). Se a tabela for alterada, a próxima solicitação poderá dinamicamente remapear os valores de acordo.",
	"@@Remap_Remap-Table-Type_tag9@@": "Reatribuição--Uma tabela específica utilizada para o processo de reclassificação, onde cada linha na tabela será remapeada somente com base em cada limite da feição.",
	"@@Remap_Remap-Table_tag0@@": "Navegue até a tabela que define seus valores de remapeamento.",
	"@@Reproject_Raster_tag0@@": "O conjunto de dados raster a ser reprojetado ou reamostrado.",
	"@@Reproject_Spatial-Reference_tag0@@": "O sistema de coordenadas utilizado para reprojetar os dados.",
	"@@Reproject_X-Cellsize_tag0@@": "A dimensão x na qual os dados devem ser reamostrados. Isto é opcional. Se o valor for 0 ou menor, o envelope de saída (extensão e tamanhos da célula) será calculado a partir do raster de entrada.",
	"@@Reproject_X-Registration-Point_tag0@@": "A coordenada x utilizada para definir o canto superior esquerdo do conjunto de dados. Esta coordenada deve ser definida nas unidades da nova referência espacial. Se ambos os parâmetros <strong>Tamanho da Célula X</strong> e <strong>Tamanho da Célula Y</strong> forem maiores que 0, eles serão utilizados junto com os parâmetros <strong>Ponto de Registro X</strong> e <strong>Ponto de Registro Y</strong> para definir o envelope de saída.",
	"@@Reproject_Y-Cellsize_tag0@@": "A dimensão y na qual os dados devem ser reamostrados. Isto é opcional. Se o valor for 0 ou menor, o envelope de saída (extensão e tamanhos da célula) será calculado a partir do raster de entrada.",
	"@@Reproject_Y-Registration-Point_tag0@@": "A coordenada y utilizada para definir o canto superior esquerdo do conjunto de dados. Esta coordenada deve ser definida nas unidades da nova referência espacial. Se ambos os parâmetros <strong>Tamanho da Célula X</strong> e <strong>Tamanho da Célula Y</strong> forem maiores que 0, eles serão utilizados junto com os parâmetros <strong>Ponto de Registro X</strong> e <strong>Ponto de Registro Y</strong> para definir o envelope de saída.",
	"@@Resample_Input-Cellsize_tag0@@": "O tamanho da célula de pixel do raster de entrada.",
	"@@Resample_Output-Cellsize_tag0@@": "O tamanho da célula de pixel do raster de saída. O tamanho de célula pode ser alterado, mas a extensão do conjunto de dados raster permanecerá o mesmo. A reamostragem de um tamanho de célula definido pelo usuário pode ser muito mais lenta que o padrão do sistema, pois a reamostragem padrão do sistema processa a quantidade mínima de dados a partir da resolução mais próxima possível.",
	"@@Resample_Raster_tag0@@": "O raster de entrada a ser reamostrado.",
	"@@Resample_Resampling-Type_tag0@@": "<strong>Vizinho Mais Próximo</strong>--Calcula o valor de pixel de saída utilizando o pixel de entrada mais próximo. Os pixels de NoData permanecerão inalterados no conjunto de dados raster de saída. Este é o padrão.",
	"@@Resample_Resampling-Type_tag2@@": "<strong>Interpolação Bilinear</strong>--Calcula o valor de pixel utilizando o valor ponderado pela distância de quatro pixels mais próximos. Este método é computacionalmente eficiente para processar.",
	"@@Resample_Resampling-Type_tag4@@": "<strong>Convolução Cúbica</strong>--Determina o novo valor de um pixel baseado no ajuste de uma curva de suavização através de 16 centros do pixel célula de entrada mais próximo.",
	"@@Resample_Resampling-Type_tag6@@": "<strong>Maioria</strong>--Calcula valor de pixel utilizando o valor de pixel de maioria nos 16 pixels mais próximos. Os pixels de NoData permanecerão inalterados no conjunto de dados raster de saída.",
	"@@Resample_Resampling-Type_tag8@@": "<strong>Interpolação Bilinear Adicional</strong>--Utiliza  <strong>Interpolação Bilinear</strong>, exceto os pixeis ao longo das extremidades, que são definidos como NoData e não são reproduzidos ou considerados no cálculo. Utilize <strong>Interpolação Bilinear Adicional</strong> para dados mosaicados, pois as extremidades combinarão melhor.",
	"@@Resample_Resampling-Type_tag14@@": "<strong>Gauss Blur</strong>—Aplica uma convolução Gaussiana no raster de origem e calcula o valor do pixel utilizando o valor de distância ponderada de quatro pixels mais próximos do raster desfocado. É apropriado para remover ruídos em dados reamostrados e para deixar a amostragem em um tamanho de pixel maior.",
	"@@Resample_Resampling-Type_tag16@@": "<strong>Gauss Blur Adicional</strong>—Utiliza o mesmo método que <strong>Gauss Blur</strong>, exceto os pixels ao longo das extremidades que são definidos como NoData e não são replicados ou considerados no cálculo. Utilize <strong>Gauss Blur Adicional</strong> para dados mosaicados, pois as extremidades combinarão melhor.",
	"@@Resample_Resampling-Type_tag22@@": "<strong>Média</strong>—Calcula valores de pixel utilizando o valor médio de todos os pixels sobrepostos, para cada pixel de destino.",
	"@@Resample_Resampling-Type_tag24@@": "<strong>Mínimo</strong>—Calcula o valor de pixel utilizando o valor mínimo de todos os pixels sobrepostos. Os pixels de NoData permanecerão inalterados no conjunto de dados raster de saída.",
	"@@Resample_Resampling-Type_tag26@@": "<strong>Máximo</strong>—Apropriado para dados contínuos, produz uma imagem de saída mais suave do que o método de reamostragem Vizinho Mais Próximo.",
	"@@Resample_Resampling-Type_tag28@@": "<strong>Média de Vetor</strong>—Calcula a média de vetor da direção de magnitude utilizando todos os pixels envolvidos. Este método é aplicável somente aos rasters de duas bandas que representam magnitude e direção. Primeiro, converte a direção-magnitude em U-V e, em seguida, utiliza a média aritmética em todos os pixels envolvidos para obter o U-V do pixel de destino e converte-o novamente para direção-magnitude.",
	"@@Round-Down_Cellsize-Type_tag0@@": "Escolha que tamanho de célula deve ser utilizado no raster de saída. Se todos os tamanhos de célula de entrada forem os mesmos, todas as opções renderão os mesmos resultados.",
	"@@Round-Down_Cellsize-Type_tag1@@": "Primeiro De--Utiliza o primeiro tamanho de célula dos rasters de entrada.",
	"@@Round-Down_Cellsize-Type_tag2@@": "Último De--Utiliza o último tamanho de célula dos rasters de entrada.",
	"@@Round-Down_Cellsize-Type_tag3@@": "Máximo De--Utiliza o maior tamanho de célula de todos os rasters de entrada. Este é o padrão.",
	"@@Round-Down_Cellsize-Type_tag4@@": "Média De--Utiliza o tamanho médio de célula de todos os rasters de entrada.",
	"@@Round-Down_Cellsize-Type_tag5@@": "Mínimo De--Utiliza o menor tamanho de célula de todos os rasters de entrada.",
	"@@Round-Down_Extent-Type_tag0@@": "Escolha qual extensão deve ser utilizada no raster de saída:",
	"@@Round-Down_Extent-Type_tag1@@": "Primeiro De--Utiliza a extensão do primeiro raster de entrada para determinar a extensão de processamento.",
	"@@Round-Down_Extent-Type_tag2@@": "Intersecção De--Utiliza a extensão dos pixels de sobreposição para determinar a extensão de processamento. Este é o padrão.",
	"@@Round-Down_Extent-Type_tag3@@": "Última De--Utiliza a extensão do último raster de entrada para determinar a extensão de processamento.",
	"@@Round-Down_Extent-Type_tag4@@": "União De--Utiliza a extensão de todos os rasters para determinar a extensão de processamento.",
	"@@Round-Down_Raster_tag0@@": "Os valores de entrada a serem arredondados para baixo.",
	"@@Round-Up_Cellsize-Type_tag0@@": "Escolha que tamanho de célula deve ser utilizado no raster de saída. Se todos os tamanhos de célula de entrada forem os mesmos, todas as opções renderão os mesmos resultados.",
	"@@Round-Up_Cellsize-Type_tag1@@": "Primeiro De--Utiliza o primeiro tamanho de célula dos rasters de entrada.",
	"@@Round-Up_Cellsize-Type_tag2@@": "Último De--Utiliza o último tamanho de célula dos rasters de entrada.",
	"@@Round-Up_Cellsize-Type_tag3@@": "Máximo De--Utiliza o maior tamanho de célula de todos os rasters de entrada. Este é o padrão.",
	"@@Round-Up_Cellsize-Type_tag4@@": "Média De--Utiliza o tamanho médio de célula de todos os rasters de entrada.",
	"@@Round-Up_Cellsize-Type_tag5@@": "Mínimo De--Utiliza o menor tamanho de célula de todos os rasters de entrada.",
	"@@Round-Up_Extent-Type_tag0@@": "Escolha qual extensão deve ser utilizada no raster de saída:",
	"@@Round-Up_Extent-Type_tag1@@": "Primeiro De--Utiliza a extensão do primeiro raster de entrada para determinar a extensão de processamento.",
	"@@Round-Up_Extent-Type_tag2@@": "Intersecção De--Utiliza a extensão dos pixels de sobreposição para determinar a extensão de processamento. Este é o padrão.",
	"@@Round-Up_Extent-Type_tag3@@": "Última De--Utiliza a extensão do último raster de entrada para determinar a extensão de processamento.",
	"@@Round-Up_Extent-Type_tag4@@": "União De--Utiliza a extensão de todos os rasters para determinar a extensão de processamento.",
	"@@Round-Up_Raster_tag0@@": "Os valores de entrada a serem arredondados para cima.",
	"@@Segment-Mean-Shift_Minimum-Segment-Size-in-Pixels_tag0@@": "Tamanho mínimo do segmento, medido em pixels. Este valor está relacionado à sua unidade de mapeamento mínima e filtrará blocos de pixels menores. Todos os segmentos menores que o valor especificado mesclarão os segmentos menores com o segmento vizinho mais adequado.",
	"@@Segment-Mean-Shift_Raster_tag0@@": "O raster de entrada a ser segmentado.",
	"@@Segment-Mean-Shift_Segment-boundaries-only_tag0@@": "Os limites do segmento são desenhados como uma linha de contorno preta em torno de cada segmento. Isso é útil para que você possa distinguir segmentos adjacentes com cores semelhantes.",
	"@@Segment-Mean-Shift_Segment-boundaries-only_tag1@@": "Desmarcado--Os limites do segmento não são exibidos. Este é o padrão.",
	"@@Segment-Mean-Shift_Segment-boundaries-only_tag2@@": "Marcado--Os limites do segmento são exibidos com linhas de contorno pretas em torno de cada segmento.",
	"@@Segment-Mean-Shift_Spatial-Detail_tag0@@": "A importância relativa de separar objetos com base em características espaciais.",
	"@@Segment-Mean-Shift_Spatial-Detail_tag1@@": "Os valores inteiros válidos variam de 1 até 20. Valores menores resultam em classes amplas e mais suaves. Um valor mais alto é apropriado para discriminar entre feições espacialmente pequenas e agrupadas. Por exemplo, em uma cena urbana, você pode classificar feições de superfície impermeáveis gerais utilizando um valor menor de detalhe espacial, ou pode classificar edifícios e estradas como classes separadas utilizando um valor mais alto de detalhe espacial.",
	"@@Segment-Mean-Shift_Spectral-Detail_tag0@@": "A importância relativa de separar objetos com base em características de cor.",
	"@@Segment-Mean-Shift_Spectral-Detail_tag1@@": "Os valores de ponto flutuante válidos variam de 1,0 até 20,0. Valores menores resultam em classes amplas e mais suaves. Um valor mais alto é apropriado quando você deseja discriminar entre feições com características espectrais semelhantes. Por exemplo, o uso de um valor mais alto de detalhe espectral em uma cena florestal permite a você distinguir melhor as diferentes espécies de árvores.",
	"@@Segment-Mean-Shift_maximumsegmentsizeinpixels_tag0@@": "<p>O tamanho máximo de um segmento. Os segmentos maiores do que o tamanho especificado serão divididos. Use este parâmetro para evitar artefatos na camada de saída resultantes de grandes segmentos. O padrão é -1.</p>",
	"@@Sentinel-1-Radiometric-Calibration_Calibration-Type_tag0@@": "Selecione um dos quatro tipos de calibração:",
	"@@Sentinel-1-Radiometric-Calibration_Calibration-Type_tag1@@": "<strong>Beta zero</strong>--produz uma saída contendo o coeficiente de brilho do radar.",
	"@@Sentinel-1-Radiometric-Calibration_Calibration-Type_tag3@@": "<strong>Sigma zero</strong>--a retrodispersão retornada à antena a partir de uma unidade de área na superfície, relacionada ao alcance da superfície.",
	"@@Sentinel-1-Radiometric-Calibration_Calibration-Type_tag5@@": "<strong>Gama</strong>--medição da energia emitida e retornada útil para determinar padrões de antena.",
	"@@Sentinel-1-Radiometric-Calibration_Calibration-Type_tag7@@": "<strong>Nenhum</strong>--não aplica uma correção. Este é o padrão.",
	"@@Sentinel-1-Radiometric-Calibration_Raster_tag0@@": "O raster de entrada GRD ou SLC Sentinel-1 Nível 1 que você deseja processar.",
	"@@Sentinel-1-Radiometric-Calibration_Raster_tag1@@": "A função utilizará o arquivo LUT para aplicar a correção térmica ou para remover a correção, dependendo do conteúdo da LUT.",
	"@@Sentinel-1-Thermal-Noise-Removal_Raster_tag0@@": "O raster de entrada Sentinel-1 que você deseja processar.",
	"@@Sentinel-1-Thermal-Noise-Removal_Raster_tag1@@": "A função utilizará o arquivo LUT para aplicar a correção térmica ou para remover a correção, dependendo do conteúdo da LUT.",
	"@@Set-Null_Cellsize-Type_tag0@@": "Escolha que tamanho de célula deve ser utilizado no raster de saída. Se todos os tamanhos de célula de entrada forem os mesmos, todas as opções renderão os mesmos resultados.",
	"@@Set-Null_Cellsize-Type_tag1@@": "Primeiro De--Utiliza o primeiro tamanho de célula dos rasters de entrada.",
	"@@Set-Null_Cellsize-Type_tag2@@": "Último De--Utiliza o último tamanho de célula dos rasters de entrada.",
	"@@Set-Null_Cellsize-Type_tag3@@": "Máximo De--Utiliza o maior tamanho de célula de todos os rasters de entrada. Este é o padrão.",
	"@@Set-Null_Cellsize-Type_tag4@@": "Média De--Utiliza o tamanho médio de célula de todos os rasters de entrada.",
	"@@Set-Null_Cellsize-Type_tag5@@": "Mínimo De--Utiliza o menor tamanho de célula de todos os rasters de entrada.",
	"@@Set-Null_Extent-Type_tag0@@": "Escolha qual extensão deve ser utilizada no raster de saída:",
	"@@Set-Null_Extent-Type_tag1@@": "Primeiro De--Utiliza a extensão do primeiro raster de entrada para determinar a extensão de processamento.",
	"@@Set-Null_Extent-Type_tag2@@": "Intersecção De--Utiliza a extensão dos pixels de sobreposição para determinar a extensão de processamento. Este é o padrão.",
	"@@Set-Null_Extent-Type_tag3@@": "Última De--Utiliza a extensão do último raster de entrada para determinar a extensão de processamento.",
	"@@Set-Null_Extent-Type_tag4@@": "União De--Utiliza a extensão de todos os rasters para determinar a extensão de processamento.",
	"@@Set-Null_False-Raster_tag0@@": "A entrada cujos valores serão utilizados como os valores de pixel de saída se a condição for falsa. Pode ser um raster inteiro, um de ponto flutuante ou um valor constante.",
	"@@Set-Null_Raster_tag0@@": "O raster de entrada que representa o resultado Boolean de uma função de raster matemática lógica. Os valores serão 1 (para verdadeiro) ou 0 (para falso). Pode ser um raster inteiro ou de ponto flutuante.",
	"@@Shaded-Relief_Altitude_tag0@@": "A altitude é o ângulo de elevação do sol acima do horizonte e intervalos de 0 a 90 graus. Um valor de 0 graus indica que o sol está no horizonte, isto é, no avião horizontal mesmo que a borda de referência. Um valor de 90 graus indica que o sol está diretamente acima O padrão é 45 graus acima do horizonte.",
	"@@Shaded-Relief_Azimuth_tag0@@": "O azimute é a posição relativa do sol ao longo do horizonte (em graus). Esta posição é indicada pelo ângulo do sol medido à direita ao norte. Um azimute de 0 graus indica norte, o leste é 90 graus, sul é 180 graus e oeste é 270 graus.",
	"@@Shaded-Relief_Color-Scheme-Type_tag0@@": "Especifique se uma rampa de cores ou um mapa de cores será utilizado para exibir o relevo sombreado.",
	"@@Shaded-Relief_Color-Scheme-Type_tag1@@": "<strong>Rampa de Cores</strong>--Quando você escolher <strong>Rampa de Cores</strong> você será solicitado a selecionar uma rampa de cores apropriada.",
	"@@Shaded-Relief_Color-Scheme-Type_tag5@@": "<strong>Mapa de Cores</strong>--Quando você escolher <strong>Mapa de Cores</strong> você será solicitado a especificar o arquivo do mapa de cores a ser utilizado.",
	"@@Shaded-Relief_Disable-default-edge-pixel-interpolation_tag0@@": "Especifique se a interpolação de pixel do segmento padrão deve ser desativada.",
	"@@Shaded-Relief_Disable-default-edge-pixel-interpolation_tag1@@": "Desmarcado--A reamostragem bilinear será uniformemente aplicada para reamostrar o relevo sombreado. Este é o padrão.",
	"@@Shaded-Relief_Disable-default-edge-pixel-interpolation_tag2@@": "Marcado--A reamostragem bilinear será utilizada dentro do relevo sombreado, exceto ao longo de segmentos dos rasters ou ao lado dos pixels de NoData. Estes pixels serão preenchidos com NoData, já que ele reduzirá quaisquer efeitos de segmento que podem ocorrer.",
	"@@Shaded-Relief_Disable-default-edge-pixel-interpolation_tag3@@": "Utilizar esta opção evitará quaisquer artefatos de reamostragem que podem ocorrer ao longo das extremidades de um raster. Os pixels de saída ao longo do segmento de um raster ou ao lado dos pixels sem um valor serão preenchidos com NoData; portanto, é recomendado que esta opção seja utilizada somente quando houver outros rasters com pixels de sobreposição disponíveis. Quando a sobreposição de pixels estiver disponível, estas áreas de NoData irão exibir os valores de pixel de sobreposição em vez de estar branco.",
	"@@Shaded-Relief_Raster_tag0@@": "O raster de elevação de entrada.",
	"@@Shaded-Relief_Scaling_tag0@@": "O resultado sombreado é dimensionado dinamicamente ajustando o fator z utilizando uma de duas opções:",
	"@@Shaded-Relief_Scaling_tag1@@": "<strong>Nenhum</strong>--Nenhum dimensionamento é aplicado. Isto é ideal para um único conjunto de dados raster cobrindo uma área local. Isto não é recomendado para conjuntos de dados mundiais com grandes variações em mapas de elevação ou de várias escalas, pois produzirá relevo do terreno com pouca variação em pequenas escalas.",
	"@@Shaded-Relief_Scaling_tag3@@": "<strong>Ajustado</strong>--Um ajuste não-linear é aplicado utilizando os valores padrão de <strong>Potência de Tamanho do Pixel</strong> e <strong>Fator de Tamanho do Pixel</strong> que acomodam uma grande variedade de alterações de altitude (escala) à medida que o visualizador amplia ou reduz. A opção <strong>Ajustado</strong> é recomendada ao utilizar um conjunto de dados mundial.",
	"@@Shaded-Relief_Z-Factor_tag0@@": "O fator Z é um fator de escala utilizado para converter os valores de elevação para dois propósitos:",
	"@@Shaded-Relief_Z-Factor_tag1@@": "Para converter as unidades de elevação (como metros ou pés) em unidades de coordenadas horizontais do conjunto de dados, que podem ser pés, metros ou graus",
	"@@Shaded-Relief_Z-Factor_tag2@@": "Para adicionar exagero vertical para efeito visual",
	"@@Shaded-Relief_Z-Factor_tag3@@": "O resultado sombreado é dimensionado dinamicamente ajustando o fator z utilizando uma de duas opções:",
	"@@Shaded-Relief_Z-Factor_tag4@@": "<strong>Nenhum</strong>--Nenhum dimensionamento é aplicado. Isto é ideal para um único conjunto de dados raster cobrindo uma área local. Isto não é recomendado para conjuntos de dados mundiais com grandes variações em mapas de elevação ou de várias escalas, pois produzirá relevo do terreno com pouca variação em pequenas escalas.",
	"@@Shaded-Relief_Z-Factor_tag6@@": "<strong>Ajustado</strong>--Um ajuste não-linear é aplicado utilizando os valores padrão de <strong>Potência de Tamanho do Pixel</strong> e <strong>Fator de Tamanho do Pixel</strong> que acomodam uma grande variedade de alterações de altitude (escala) à medida que o visualizador amplia ou reduz. A opção <strong>Ajustado</strong> é recomendada ao utilizar um conjunto de dados mundial.",
	"@@Shaded-Relief_hillshadetype_tag0@@": "Controla a fonte da iluminação do relevo sombreado.",
	"@@Shaded-Relief_hillshadetype_tag1@@": "<strong>Tradicional</strong>--Calcula relevo sombreado a partir de uma única direção de iluminação. Você pode configurar as opções de <strong>Azimute</strong> e <strong>Altitude</strong> para controlar a localização da fonte de luz. Este é o padrão.",
	"@@Shaded-Relief_hillshadetype_tag2@@": "<strong>Multidirecional</strong>--Combina a luz de múltiplas fontes para representar uma visualização realçada do terreno.",
	"@@Shaded-Relief_PSPower_tag0@@": "<strong>Potência de Tamanho do Pixel</strong> é responsável pelas mudanças de altitude (ou escala) à medida que o visualizador amplia ou reduz na exibição do mapa. É o expoente aplicado ao termo de tamanho do pixel na equação que controla a taxa na qual o <strong>Fator Z</strong> muda para evitar uma perda significante de relevo.",
	"@@Shaded-Relief_PSPower_tag1@@": "Este parâmetro é válido somente quando o tipo <strong>Dimensionamento</strong> é <strong>Ajustado</strong>. O valor padrão é 0,664.",
	"@@Shaded-Relief_PSZFactor_tag0@@": "<strong>Fator de Tamanho do Pixel</strong> é responsável pelas mudanças na escala à medida que o visualizador amplia ou reduz o zoom na exibição do mapa. Controla a taxa na qual o <strong>Fator Z</strong> é alterado.",
	"@@Shaded-Relief_PSZFactor_tag1@@": "Este parâmetro é válido somente quando o tipo <strong>Dimensionamento</strong> é <strong>Ajustado</strong>. O valor padrão é 0,024.",
	"@@Sin_Cellsize-Type_tag0@@": "Escolha que tamanho de célula deve ser utilizado no raster de saída. Se todos os tamanhos de célula de entrada forem os mesmos, todas as opções renderão os mesmos resultados.",
	"@@Sin_Cellsize-Type_tag1@@": "Primeiro De--Utiliza o primeiro tamanho de célula dos rasters de entrada.",
	"@@Sin_Cellsize-Type_tag2@@": "Último De--Utiliza o último tamanho de célula dos rasters de entrada.",
	"@@Sin_Cellsize-Type_tag3@@": "Máximo De--Utiliza o maior tamanho de célula de todos os rasters de entrada. Este é o padrão.",
	"@@Sin_Cellsize-Type_tag4@@": "Média De--Utiliza o tamanho médio de célula de todos os rasters de entrada.",
	"@@Sin_Cellsize-Type_tag5@@": "Mínimo De--Utiliza o menor tamanho de célula de todos os rasters de entrada.",
	"@@Sin_Extent-Type_tag0@@": "Escolha qual extensão deve ser utilizada no raster de saída:",
	"@@Sin_Extent-Type_tag1@@": "Primeiro De--Utiliza a extensão do primeiro raster de entrada para determinar a extensão de processamento.",
	"@@Sin_Extent-Type_tag2@@": "Intersecção De--Utiliza a extensão dos pixels de sobreposição para determinar a extensão de processamento. Este é o padrão.",
	"@@Sin_Extent-Type_tag3@@": "Última De--Utiliza a extensão do último raster de entrada para determinar a extensão de processamento.",
	"@@Sin_Extent-Type_tag4@@": "União De--Utiliza a extensão de todos os rasters para determinar a extensão de processamento.",
	"@@Sin_Raster_tag0@@": "A entrada para calcular os valores de seno.",
	"@@SinH_Cellsize-Type_tag0@@": "Escolha que tamanho de célula deve ser utilizado no raster de saída. Se todos os tamanhos de célula de entrada forem os mesmos, todas as opções renderão os mesmos resultados.",
	"@@SinH_Cellsize-Type_tag1@@": "Primeiro De--Utiliza o primeiro tamanho de célula dos rasters de entrada.",
	"@@SinH_Cellsize-Type_tag2@@": "Último De--Utiliza o último tamanho de célula dos rasters de entrada.",
	"@@SinH_Cellsize-Type_tag3@@": "Máximo De--Utiliza o maior tamanho de célula de todos os rasters de entrada. Este é o padrão.",
	"@@SinH_Cellsize-Type_tag4@@": "Média De--Utiliza o tamanho médio de célula de todos os rasters de entrada.",
	"@@SinH_Cellsize-Type_tag5@@": "Mínimo De--Utiliza o menor tamanho de célula de todos os rasters de entrada.",
	"@@SinH_Extent-Type_tag0@@": "Escolha qual extensão deve ser utilizada no raster de saída:",
	"@@SinH_Extent-Type_tag1@@": "Primeiro De--Utiliza a extensão do primeiro raster de entrada para determinar a extensão de processamento.",
	"@@SinH_Extent-Type_tag2@@": "Intersecção De--Utiliza a extensão dos pixels de sobreposição para determinar a extensão de processamento. Este é o padrão.",
	"@@SinH_Extent-Type_tag3@@": "Última De--Utiliza a extensão do último raster de entrada para determinar a extensão de processamento.",
	"@@SinH_Extent-Type_tag4@@": "União De--Utiliza a extensão de todos os rasters para determinar a extensão de processamento.",
	"@@SinH_Raster_tag0@@": "A entrada para calcular os valores de seno hiperbólico.",
	"@@Sink_Flow-Direction-Raster_tag0@@": "O raster de entrada que mostra a direção do fluxo de cada célula.",
	"@@Sink_Flow-Direction-Raster_tag1@@": "O raster de direção do fluxo pode ser criado executando a função <strong>Direção do Fluxo</strong>.",
	"@@Slope_DEM_tag0@@": "O raster de elevação de entrada.",
	"@@Slope_Disable-default-edge-pixel-interpolation_tag0@@": "Utilizar esta opção evitará quaisquer artefatos de reamostragem que podem ocorrer ao longo das extremidades de um raster. Os pixels de saída ao longo do segmento de um raster ou ao lado dos pixels sem um valor serão preenchidos com NoData; portanto, é recomendado que esta opção seja utilizada somente quando houver outros rasters com pixels de sobreposição disponíveis. Quando a sobreposição de pixels estiver disponível, estas áreas de NoData irão exibir os valores de pixel de sobreposição em vez de estar branco.",
	"@@Slope_Disable-default-edge-pixel-interpolation_tag1@@": "Desmarcado--A reamostragem bilinear será uniformemente aplicada para reamostrar sua declividade. Este é o padrão.",
	"@@Slope_Disable-default-edge-pixel-interpolation_tag2@@": "Marcado--A reamostragem bilinear será utilizada dentro da declividade, exceto ao longo de segmentos dos rasters ou ao lado dos pixels de NoData. Estes pixels serão preenchidos com NoData, já que ele reduzirá quaisquer efeitos de segmento que podem ocorrer.",
	"@@Slope_Scaling_tag0@@": "A inclinação de declividade pode ser a saída como um valor em graus, ou percentual de subida. Há três opções para <strong>Dimensionamento</strong>:",
	"@@Slope_Scaling_tag3@@": "<strong>Grau</strong>--A inclinação de declividade é calculada em graus. Os valores variam de 0 até 90.",
	"@@Slope_Scaling_tag5@@": "<strong>Porcentagem de Aumento</strong>--A inclinação de declividade é calculada como valores de porcentagem. Os valores variam de 0 até infinito. Uma superfície plana é 0 porcento de elevação, considerando que uma superfície de 45 graus é 100 porcento de elevação. Como a superfície se torna mais vertical, a porcentagem de elevação se torna maior de forma crescente.",
	"@@Slope_Scaling_tag7@@": "<strong>Dimensionado</strong>--A inclinação de declividade é calculada da mesma forma que DEGREE, mas o fator z é ajustado por escala. Utiliza os valores de <strong>Potência de Tamanho do Pixel</strong> e <strong>Fator de Tamanho do Pixel</strong> que respondem pelas alterações de resolução (escala) quando o visualizador ampliar e reduzir o zoom. Isto é recomendado ao utilizar conjunto de dados mundial--particularmente ao utilizar declividade como uma superfície para visualização.",
	"@@Slope_Scaling_tag13@@": "O fator z é ajustado utilizando a equação seguinte:",
	"@@Slope_Scaling_tag14@@": "Fator Z Ajustado = (Fator Z) + (Tamanho do Pixel)",
	"@@Slope_Scaling_tag15@@": "x (Fator de Tamanho do Pixel)",
	"@@Slope_Scaling_tag16@@": "Potência de Tamanho do Pixel",
	"@@Slope_Z-Factor_tag0@@": "O </strong>Fator Z</strong> é um fator de escala utilizado para converter os valores de elevação para dois propósitos:",
	"@@Slope_Z-Factor_tag3@@": "Para converter as unidades de elevação (como metros ou pés) em unidades de coordenadas horizontais do conjunto de dados, que podem ser pés, metros ou graus",
	"@@Slope_Z-Factor_tag4@@": "Para adicionar exagero vertical para efeito visual",
	"@@Slope_PSPower_tag0@@": "<strong>Potência de Tamanho do Pixel</strong> é responsável pelas mudanças de altitude (ou escala) à medida que o visualizador amplia ou reduz na exibição do mapa. É o expoente aplicado ao termo de tamanho do pixel na equação que controla a taxa na qual o <strong>Fator Z</strong> muda para evitar uma perda significante de relevo.",
	"@@Slope_PSPower_tag1@@": "Este parâmetro é válido somente quando o tipo <strong>Dimensionamento</strong> é <strong>Dimensionado</strong>. O valor padrão é 0,664.",
	"@@Slope_PSZFactor_tag0@@": "<strong>Fator de Tamanho do Pixel</strong> é responsável pelas mudanças na escala à medida que o visualizador amplia ou reduz o zoom na exibição do mapa. Controla a taxa na qual o <strong>Fator Z</strong> é alterado.",
	"@@Slope_PSZFactor_tag1@@": "Este parâmetro é válido somente quando o tipo <strong>Dimensionamento</strong> é <strong>Dimensionado</strong>. O valor padrão é 0,024.",
	"@@Snap-Pour-Point_Flow-Accumulation-Raster_tag0@@": "A camada do raster de acumulação do fluxo de entrada.",
	"@@Snap-Pour-Point_Flow-Accumulation-Raster_tag1@@": "Isto pode ser criado com a função <strong>Acumulação de Fluxo</strong>.",
	"@@Snap-Pour-Point_Pour-Point-Field_tag0@@": "O campo utilizado para atribuir valores aos locais do ponto de escoamento.",
	"@@Snap-Pour-Point_Pour-Point-Raster_tag0@@": "Os locais do ponto de escoamento de entrada que devem ser ajustados.",
	"@@Snap-Pour-Point_Pour-Point-Raster_tag1@@": "Para uma camada raster de entrada, todas as células que não são NoData (ou seja, têm um valor) serão consideradas pontos de escoamento e serão ajustadas.",
	"@@Snap-Pour-Point_Snap-Distance_tag0@@": "A distância máxima, em unidades do mapa, para procurar uma célula de maior fluxo acumulado.",
	"@@Speckle_Additive-Noise-Mean_tag0@@": "Especifica o valor médio do ruído aditivo. Um valor médio de ruído maior produzirá menos suavização, enquanto um valor menor resultará em mais suavização.",
	"@@Speckle_Additive-Noise-Mean_tag1@@": "Este parâmetro é somente válido quando o <strong>Tipo de Filtro</strong> for <strong>Filtro Lee</strong> e o <strong>Modelo de Ruído</strong> é <strong>Ruído Aditivo</strong> ou <strong>Ruído Aditivo e Multiplicativo</strong>. O valor padrão é 0.",
	"@@Speckle_Damping-Factor_tag0@@": "Especifica a extensão do efeito de amortecimento exponencial na filtragem. Um valor de amortecimento maior preserva melhor os segmentos, mas suaviza menos, enquanto um valor menor produz mais suavização. Um valor 0 resulta na mesma saída que um filtro  de passagem baixa.",
	"@@Speckle_Damping-Factor_tag1@@": "Este parâmetro é válido somente quando o <strong>Tipo de Filtro</strong> é <strong>Filtro de Lee Melhorado</strong> ou <strong>Filtro de Frost</strong>. O valor padrão é 1.",
	"@@Speckle_Filter-Size_tag0@@": "Especifica o tamanho da janela de pixel utilizada para filtrar o ruído:",
	"@@Speckle_Filter-Size_tag1@@": "3x3",
	"@@Speckle_Filter-Size_tag2@@": "5x5",
	"@@Speckle_Filter-Size_tag3@@": "7x7",
	"@@Speckle_Filter-Size_tag4@@": "9x9",
	"@@Speckle_Filter-Size_tag5@@": "11x11",
	"@@Speckle_Filter-Type_tag0@@": "Especifica o tipo de filtro a ser utilizado no algoritmo de suavização para remover o ruído de manchas:",
	"@@Speckle_Filter-Type_tag1@@": "<strong>Filtro de Lee</strong>--Reduz o ruído de manchas aplicando um filtro espacial para cada pixel em uma imagem, que filtra os dados com base em estatísticas locais calculadas dentro de uma janela de equação. Este filtro é útil quando você deseja suavizar dados manchados que têm um componente aditivo ou multiplicativo. Este é o padrão.",
	"@@Speckle_Filter-Type_tag3@@": "<strong>Filtro de Lee Melhorado</strong>--Uma versão adaptada do filtro de Lee que inclui <strong>Fator de Amortecimento</strong> e <strong>Número de Visualizações</strong>. Este filtro é útil quando você deseja reduzir manchas, preservando as informações de textura.",
	"@@Speckle_Filter-Type_tag9@@": "<strong>Filtro de Frost</strong>--Reduz o ruído de manchas com um filtro circular simétrico exponencialmente amortecido que utiliza estatísticas locais em janelas de filtro individuais. Este filtro é útil quando você deseja reduzir manchas enquanto preserva as bordas nas imagens de radar.",
	"@@Speckle_Filter-Type_tag11@@": "<strong>Filtro de Kuan</strong>--Semelhante ao filtro de Lee, este filtro aplica um filtro espacial a cada pixel em uma imagem e filtra os dados com base nas estatísticas locais calculadas em uma janela de equação. Este filtro é útil quando você deseja reduzir manchas enquanto preserva as bordas nas imagens de radar.",
	"@@Speckle_Multiplicative-Noise-Mean_tag0@@": "Especifica o valor médio do ruído multiplicativo. Um valor médio de ruído maior produzirá menos suavização, enquanto um valor menor resultará em mais suavização.",
	"@@Speckle_Multiplicative-Noise-Mean_tag1@@": "Este parâmetro é somente válido quando o <strong>Tipo de Filtro</strong> for <strong>Filtro Lee</strong> e o <strong>Modelo de Ruído</strong> é <strong>Ruído Aditivo</strong> ou <strong>Ruído Aditivo e Multiplicativo</strong>. O valor padrão é 1.",
	"@@Speckle_Noise-Model_tag0@@": "Especifica o tipo de ruído que está reduzindo a qualidade da imagem do radar:",
	"@@Speckle_Noise-Model_tag1@@": "<strong>Ruído Multiplicativo</strong>--Ruído de sinal aleatório que é multiplicado no sinal relevante durante a captura ou transmissão",
	"@@Speckle_Noise-Model_tag3@@": "<strong>Ruído Aditivo</strong>--Ruído de sinal aleatório que é adicionado no sinal relevante durante a captura ou transmissão",
	"@@Speckle_Noise-Model_tag5@@": "<strong>Ruído Aditivo e Multiplicativo</strong>--Ambos modelos de ruído",
	"@@Speckle_Noise-Variance_tag0@@": "Especifica a variação de ruído da imagem do radar.",
	"@@Speckle_Noise-Variance_tag1@@": "Este parâmetro é somente válido quando o <strong>Tipo de Filtro</strong> for <strong>Filtro Lee</strong> e o <strong>Modelo de Ruído</strong> é <strong>Ruído Aditivo</strong> ou <strong>Ruído Aditivo e Multiplicativo</strong>. O valor padrão é 0,25.",
	"@@Speckle_Number-of-Looks_tag0@@": "Especifica o número de aparências da imagem, que controla a suavização da imagem e estima a variação do ruído. Um valor menor resulta em mais suavização, enquanto um valor maior retém mais feições de imagem.",
	"@@Speckle_Number-of-Looks_tag1@@": "Este parâmetro é somente válido quando o <strong>Tipo de Filtro</strong> for <strong>Filtro de Lee</strong> e o <strong>Modelo de Ruído</strong> for <strong>Ruído Multiplicativo</strong> ou quando o <strong>Tipo de Filtro</strong> for <strong>Filtro de Kuan</strong>. O valor padrão é 1.",
	"@@Speckle_Raster_tag0@@": "O raster de entrada.",
	"@@Spectral-Conversion_Conversion-Matrix_tag0@@": "A matriz utilizada para converter o raster de entrada.",
	"@@Spectral-Conversion_Conversion-Matrix_tag1@@": "A equação para executar esta conversão é:",
	"@@Spectral-Conversion_Conversion-Matrix_tag2@@": "Output Band_R = Weight_P * Band_C",
	"@@Spectral-Conversion_Conversion-Matrix_tag3@@": "Onde:",
	"@@Spectral-Conversion_Conversion-Matrix_tag4@@": "Band_R é uma banda de saída, onde R é um número de 1 até o número de bandas de saída.",
	"@@Spectral-Conversion_Conversion-Matrix_tag5@@": "Weight_P é uma lista de pesos delimitada por vírgula, 1 para cada banda de entrada. A soma dos pesos de cada banda deve ser igual a 1.",
	"@@Spectral-Conversion_Conversion-Matrix_tag6@@": "Band_C é a imagem de entrada, onde C é um número 1 para o número de bandas da imagem de entrada.",
	"@@Spectral-Conversion_Raster_tag0@@": "O raster de entrada.",
	"@@Spectral-Conversion_Raster_tag1@@": "Isto pode ser um conjunto de dados raster, um conjunto de dados do mosaico ou um serviço de imagem.",
	"@@Spectral-Conversion_Size_tag0@@": "O número de linhas e colunas na <strong>Matriz de Conversão</strong>.",
	"@@Square_Cellsize-Type_tag0@@": "Escolha que tamanho de célula deve ser utilizado no raster de saída. Se todos os tamanhos de célula de entrada forem os mesmos, todas as opções renderão os mesmos resultados.",
	"@@Square_Cellsize-Type_tag1@@": "Primeiro De--Utiliza o primeiro tamanho de célula dos rasters de entrada.",
	"@@Square_Cellsize-Type_tag2@@": "Último De--Utiliza o último tamanho de célula dos rasters de entrada.",
	"@@Square_Cellsize-Type_tag3@@": "Máximo De--Utiliza o maior tamanho de célula de todos os rasters de entrada. Este é o padrão.",
	"@@Square_Cellsize-Type_tag4@@": "Média De--Utiliza o tamanho médio de célula de todos os rasters de entrada.",
	"@@Square_Cellsize-Type_tag5@@": "Mínimo De--Utiliza o menor tamanho de célula de todos os rasters de entrada.",
	"@@Square_Extent-Type_tag0@@": "Escolha qual extensão deve ser utilizada no raster de saída:",
	"@@Square_Extent-Type_tag1@@": "Primeiro De--Utiliza a extensão do primeiro raster de entrada para determinar a extensão de processamento.",
	"@@Square_Extent-Type_tag2@@": "Intersecção De--Utiliza a extensão dos pixels de sobreposição para determinar a extensão de processamento. Este é o padrão.",
	"@@Square_Extent-Type_tag3@@": "Última De--Utiliza a extensão do último raster de entrada para determinar a extensão de processamento.",
	"@@Square_Extent-Type_tag4@@": "União De--Utiliza a extensão de todos os rasters para determinar a extensão de processamento.",
	"@@Square_Raster_tag0@@": "Os valores de entrada a serem equacionados.",
	"@@Square-Root_Cellsize-Type_tag0@@": "Escolha que tamanho de célula deve ser utilizado no raster de saída. Se todos os tamanhos de célula de entrada forem os mesmos, todas as opções renderão os mesmos resultados.",
	"@@Square-Root_Cellsize-Type_tag1@@": "Primeiro De--Utiliza o primeiro tamanho de célula dos rasters de entrada.",
	"@@Square-Root_Cellsize-Type_tag2@@": "Último De--Utiliza o último tamanho de célula dos rasters de entrada.",
	"@@Square-Root_Cellsize-Type_tag3@@": "Máximo De--Utiliza o maior tamanho de célula de todos os rasters de entrada. Este é o padrão.",
	"@@Square-Root_Cellsize-Type_tag4@@": "Média De--Utiliza o tamanho médio de célula de todos os rasters de entrada.",
	"@@Square-Root_Cellsize-Type_tag5@@": "Mínimo De--Utiliza o menor tamanho de célula de todos os rasters de entrada.",
	"@@Square-Root_Extent-Type_tag0@@": "Escolha qual extensão deve ser utilizada no raster de saída:",
	"@@Square-Root_Extent-Type_tag1@@": "Primeiro De--Utiliza a extensão do primeiro raster de entrada para determinar a extensão de processamento.",
	"@@Square-Root_Extent-Type_tag2@@": "Intersecção De--Utiliza a extensão dos pixels de sobreposição para determinar a extensão de processamento. Este é o padrão.",
	"@@Square-Root_Extent-Type_tag3@@": "Última De--Utiliza a extensão do último raster de entrada para determinar a extensão de processamento.",
	"@@Square-Root_Extent-Type_tag4@@": "União De--Utiliza a extensão de todos os rasters para determinar a extensão de processamento.",
	"@@Square-Root_Raster_tag0@@": "Os valores de entrada utilizados para encontrar a raiz quadrada.",
	"@@Statistics-and-Histogram_Define-Statistics-and-Histogram_tag0@@": "Especifique os valores de estatísticas para cada banda.",
	"@@Statistics-and-Histogram_Define-Statistics-and-Histogram_tag1@@": "A coluna ${Histogram} é um campo somente para leitura que pode ser preenchido utilizando o parâmetro <strong>Importar</strong>. Se você importar um arquivo de histograma, a coluna ${Histogram} será marcada como <strong>Definida</strong>.",
	"@@Statistics-and-Histogram_Import_tag0@@": "Importe a estatística e informações de histograma de um raster ou arquivo XML existente.",
	"@@Statistics-and-Histogram_Raster_tag0@@": "O raster de entrada que exige as estatísticas e histograma a serem configurados.",
	"@@Statistics-and-Histogram_Statistics_tag0@@": "Especifique os valores de estatísticas para cada banda.",
	"@@Stream-Link_Flow-Direction-Raster_tag0@@": "O raster de entrada que mostra a direção do fluxo de cada célula.",
	"@@Stream-Link_Flow-Direction-Raster_tag1@@": "O raster de direção do fluxo pode ser criado executando a função <strong>Direção do Fluxo</strong>.",
	"@@Stream-Link_Stream-Raster_tag0@@": "O raster de entrada que representa uma rede de fluxo linear.",
	"@@Stream-Order_Flow-Direction-Raster_tag0@@": "O raster de entrada que mostra a direção do fluxo de cada célula.",
	"@@Stream-Order_Flow-Direction-Raster_tag1@@": "O raster de direção do fluxo pode ser criado executando a função <strong>Direção do Fluxo</strong>.",
	"@@Stream-Order_Order-Method_tag0@@": "O método utilizado para atribuir a ordem do fluxo.",
	"@@Stream-Order_Order-Method_tag1@@": "<strong>STRAHLER</strong>--O método de ordenação de fluxo proposto por Strahler em 1952. A ordem do fluxo somente aumenta quando fluxos do mesmo pedido se interseccionam. A intersecção de um link de primeira e segunda ordem permanecerá um link de segunda ordem, em vez de criar um link de terceira ordem. Este é o padrão.",
	"@@Stream-Order_Order-Method_tag3@@": "<strong>SHREVE</strong>--O método de ordenação de fluxo por magnitude, proposto por Shreve em 1967. Todos os links sem tributários recebem uma magnitude (ordem) de um. As magnitudes são declividades aditivas. Quando dois links se interseccionam, suas magnitudes são adicionadas e atribuídas ao link de declividade.",
	"@@Stream-Order_Stream-Raster_tag0@@": "Um raster do fluxo de entrada que representa uma rede de fluxo linear.",
	"@@Stretch_Auto-Gamma_tag0@@": "Utilize <strong>Gama Automático</strong> para calcular o gama a partir das estatísticas e histograma do conjunto de dados. As estatísticas podem ser as estatísticas estimadas pela própria função, ou as estatísticas podem ser estimadas pelo software se você escolher uma camada.",
	"@@Stretch_Dynamic-Range-Adjustment_tag0@@": "Marque a caixa de seleção <strong>Ajuste de Intervalo Dinâmico</strong> se desejar que as estatísticas sejam calculadas somente com os pixels exibidos na tela. Esta opção geralmente é aplicada quando a imagem for publicada e utilizada em um aplicativo da web que não pode executar este tipo de extensão.",
	"@@Stretch_Estimate-Statistics_tag0@@": "Marque a caixa de seleção <strong>Estimar Estatística</strong> se você deseja estimar sua estatística. As estatísticas estimadas são calculadas a partir de uma amostragem de 1000 por 1000 do centro do raster e utilizadas pelo contraste.",
	"@@Stretch_Estimate-Statistics_tag3@@": "Se isto for marcado e o raster tiver estatísticas, ou você inseriu valores na tabela <strong>Estatísticas</strong>, eles serão utilizados em vez de estimados, a menos que o contraste exija um histograma. Se o contraste exigir um histograma que não exista, ele será estimado.",
	"@@Stretch_Gamma_tag0@@": "Utilize a barra do controle deslizante para definir manualmente o valor de <strong>Gama</strong>.",
	"@@Stretch_Number-Of-Standard-Deviations_tag0@@": "Especifique o valor n para o número de desvios padrão a serem utilizados. Este método é utilizado para enfatizar quanto os valores da feição variam em relação ao valor médio; é melhor quando utilizado em dados normalmente distribuídos.",
	"@@Stretch_Output-Maximum_tag0@@": "Defina o valor de pixel mais alto para o histograma.",
	"@@Stretch_Output-Maximum_tag1@@": "O <strong>Mínimo de Saída</strong> e <strong>Máximo de Saída</strong> configurará a faixa de valores que serão então contrastados linearmente.",
	"@@Stretch_Output-Minimum_tag0@@": "Defina o valor de pixel mais baixo para o histograma.",
	"@@Stretch_Output-Minimum_tag1@@": "O <strong>Mínimo de Saída</strong> e <strong>Máximo de Saída</strong> configurará a faixa de valores que serão então contrastados linearmente.",
	"@@Stretch_Percent-Clip-Maximum_tag0@@": "Especifique a porcentagem dos valores altos a serem excluídos da extensão.",
	"@@Stretch_Percent-Clip-Maximum_tag1@@": "Os valores válidos variam de 0 até 99.",
	"@@Stretch_Percent-Clip-Minimum_tag0@@": "Especifique a porcentagem dos valores baixos a serem excluídos da extensão.",
	"@@Stretch_Percent-Clip-Minimum_tag1@@": "Os valores válidos variam de 0 até 99.",
	"@@Stretch_Raster_tag0@@": "O raster de entrada para ampliar o contraste.",
	"@@Stretch_Sigmoid-Strength-Level_tag0@@": "O <strong>Nível de Contraste</strong> determina quanto da função sigmoidal será utilizada no contraste. Um valor baixo como 1 utilizará somente a parte do meio da curva, que tende a produzir cores opacas e fracas. Um valor alto como 6 utilizará toda a curva, que tende a produzir cores fortes e nítidas.",
	"@@Stretch_Statistics_tag0@@": "Você pode inserir suas próprias estatísticas na caixa de diálogo. Por padrão, as estatísticas são recuperadas dos dados; no entanto, quaisquer valores inseridos neste parâmetro serão utilizados",
	"@@Stretch_Type_tag0@@": "Escolha o método de contrate:",
	"@@Stretch_Type_tag1@@": "Nenhum--Sem contraste",
	"@@Stretch_Type_tag2@@": "StdDev--contraste de Desvio Padrão",
	"@@Stretch_Type_tag3@@": "MinMax--contraste de Mínimo-Máximo",
	"@@Stretch_Type_tag4@@": "PercentMinMax--contraste de Recorte da Porcentagem",
	"@@Stretch_Type_tag5@@": "Sigmoid--contraste de Sigmóide",
	"@@Stretch_Use-Gamma_tag0@@": "Marque a caixa de seleção <strong>Utilizar Gama</strong> se você deseja aplicar um contraste de gama.",
	"@@Swath_Cellsize_tag0@@": "O tamanho de célula do raster de saída será detectado automaticamente; entretanto, você pode alterar isto se desejar. O tamanho de célula pode ser alterado, mas a extensão do conjunto de dados raster permanecerá o mesmo.",
	"@@Swath_Interpolation-Method_tag0@@": "Há quatro métodos de reamostragem para esta função:",
	"@@Swath_Interpolation-Method_tag1@@": "<strong>Vizinho Mais Próximo</strong>--Calcula o valor de pixel utilizando o pixel mais próximo. Se não existir nenhum pixel de origem, nenhum novo pixel poderá ser criado na saída.",
	"@@Swath_Interpolation-Method_tag3@@": "<strong>Bilinear</strong>--Calcula o valor de pixel utilizando o valor ponderado pela distância dos quatro pixels mais próximos.",
	"@@Swath_Interpolation-Method_tag5@@": "<strong>TIM Linear</strong>--Utiliza uma rede irregular triangulada a partir de pontos centrais de cada célula no raster irregular para interpolar uma superfície que é então convertida em um raster regular.",
	"@@Swath_Interpolation-Method_tag7@@": "<strong>Vizinho Natural</strong>--Executa uma tarefa de vizinho mais próximo e é o mais rápido dos métodos de interpolação. É principalmente utilizado em dados discretos, como classificação de uso do solo, desde que não altere os valores das células. O erro espacial máximo será a metade do tamanho da célula.",
	"@@Swath_Raster_tag0@@": "O raster irregularmente quadriculado a ser reamostrado.",
	"@@Tan_Cellsize-Type_tag0@@": "Escolha que tamanho de célula deve ser utilizado no raster de saída. Se todos os tamanhos de célula de entrada forem os mesmos, todas as opções renderão os mesmos resultados.",
	"@@Tan_Cellsize-Type_tag1@@": "Primeiro De--Utiliza o primeiro tamanho de célula dos rasters de entrada.",
	"@@Tan_Cellsize-Type_tag2@@": "Último De--Utiliza o último tamanho de célula dos rasters de entrada.",
	"@@Tan_Cellsize-Type_tag3@@": "Máximo De--Utiliza o maior tamanho de célula de todos os rasters de entrada. Este é o padrão.",
	"@@Tan_Cellsize-Type_tag4@@": "Média De--Utiliza o tamanho médio de célula de todos os rasters de entrada.",
	"@@Tan_Cellsize-Type_tag5@@": "Mínimo De--Utiliza o menor tamanho de célula de todos os rasters de entrada.",
	"@@Tan_Extent-Type_tag0@@": "Escolha qual extensão deve ser utilizada no raster de saída:",
	"@@Tan_Extent-Type_tag1@@": "Primeiro De--Utiliza a extensão do primeiro raster de entrada para determinar a extensão de processamento.",
	"@@Tan_Extent-Type_tag2@@": "Intersecção De--Utiliza a extensão dos pixels de sobreposição para determinar a extensão de processamento. Este é o padrão.",
	"@@Tan_Extent-Type_tag3@@": "Última De--Utiliza a extensão do último raster de entrada para determinar a extensão de processamento.",
	"@@Tan_Extent-Type_tag4@@": "União De--Utiliza a extensão de todos os rasters para determinar a extensão de processamento.",
	"@@Tan_Raster_tag0@@": "A entrada para calcular os valores da tangente.",
	"@@TanH_Cellsize-Type_tag0@@": "Escolha que tamanho de célula deve ser utilizado no raster de saída. Se todos os tamanhos de célula de entrada forem os mesmos, todas as opções renderão os mesmos resultados.",
	"@@TanH_Cellsize-Type_tag1@@": "Primeiro De--Utiliza o primeiro tamanho de célula dos rasters de entrada.",
	"@@TanH_Cellsize-Type_tag2@@": "Último De--Utiliza o último tamanho de célula dos rasters de entrada.",
	"@@TanH_Cellsize-Type_tag3@@": "Máximo De--Utiliza o maior tamanho de célula de todos os rasters de entrada. Este é o padrão.",
	"@@TanH_Cellsize-Type_tag4@@": "Média De--Utiliza o tamanho médio de célula de todos os rasters de entrada.",
	"@@TanH_Cellsize-Type_tag5@@": "Mínimo De--Utiliza o menor tamanho de célula de todos os rasters de entrada.",
	"@@TanH_Extent-Type_tag0@@": "Escolha qual extensão deve ser utilizada no raster de saída:",
	"@@TanH_Extent-Type_tag1@@": "Primeiro De--Utiliza a extensão do primeiro raster de entrada para determinar a extensão de processamento.",
	"@@TanH_Extent-Type_tag2@@": "Intersecção De--Utiliza a extensão dos pixels de sobreposição para determinar a extensão de processamento. Este é o padrão.",
	"@@TanH_Extent-Type_tag3@@": "Última De--Utiliza a extensão do último raster de entrada para determinar a extensão de processamento.",
	"@@TanH_Extent-Type_tag4@@": "União De--Utiliza a extensão de todos os rasters para determinar a extensão de processamento.",
	"@@TanH_Raster_tag0@@": "A entrada para calcular os valores da tangente hiperbólica.",
	"@@Tasseled-Cap_Raster_tag0@@": "O raster de entrada para executar a transformação Tasseled Cap.",
	"@@Times_Cellsize-Type_tag0@@": "Escolha que tamanho de célula deve ser utilizado no raster de saída. Se todos os tamanhos de célula de entrada forem os mesmos, todas as opções renderão os mesmos resultados.",
	"@@Times_Cellsize-Type_tag1@@": "Primeiro De--Utiliza o primeiro tamanho de célula dos rasters de entrada.",
	"@@Times_Cellsize-Type_tag2@@": "Último De--Utiliza o último tamanho de célula dos rasters de entrada.",
	"@@Times_Cellsize-Type_tag3@@": "Máximo De--Utiliza o maior tamanho de célula de todos os rasters de entrada. Este é o padrão.",
	"@@Times_Cellsize-Type_tag4@@": "Média De--Utiliza o tamanho médio de célula de todos os rasters de entrada.",
	"@@Times_Cellsize-Type_tag5@@": "Mínimo De--Utiliza o menor tamanho de célula de todos os rasters de entrada.",
	"@@Times_Extent-Type_tag0@@": "Escolha qual extensão deve ser utilizada no raster de saída:",
	"@@Times_Extent-Type_tag1@@": "Primeiro De--Utiliza a extensão do primeiro raster de entrada para determinar a extensão de processamento.",
	"@@Times_Extent-Type_tag2@@": "Intersecção De--Utiliza a extensão dos pixels de sobreposição para determinar a extensão de processamento. Este é o padrão.",
	"@@Times_Extent-Type_tag3@@": "Última De--Utiliza a extensão do último raster de entrada para determinar a extensão de processamento.",
	"@@Times_Extent-Type_tag4@@": "União De--Utiliza a extensão de todos os rasters para determinar a extensão de processamento.",
	"@@Times_Raster_tag0@@": "A entrada que contém os valores a serem multiplicados.",
	"@@Times_Raster_tag1@@": "Um valor constante pode ser utilizado como uma entrada para este parâmetro, fornecendo um raster que é especificado para o outro parâmetro.",
	"@@Times_Raster2_tag0@@": "A entrada que contém os valores pelos quais a primeira entrada será multiplicada.",
	"@@Times_Raster2_tag1@@": "Um valor constante pode ser utilizado como uma entrada para este parâmetro, fornecendo um raster que é especificado para o outro parâmetro.",
	"@@Transpose-Bits_Bit-Pattern_tag0@@": "Escolha o tipo de transposição para executar ou especificar um valor personalizado:",
	"@@Transpose-Bits_Bit-Pattern_tag1@@": "Landsat 8 Cirros",
	"@@Transpose-Bits_Bit-Pattern_tag2@@": "Landsat 8 Nuvem",
	"@@Transpose-Bits_Bit-Pattern_tag3@@": "Landsat 8 Sombra de Nuvem",
	"@@Transpose-Bits_Bit-Pattern_tag4@@": "Landsat 8 Preenchimento Designado",
	"@@Transpose-Bits_Bit-Pattern_tag5@@": "Landsat 8 Estrutura Danificada",
	"@@Transpose-Bits_Bit-Pattern_tag6@@": "Landsat 8 Neve/Gelo",
	"@@Transpose-Bits_Bit-Pattern_tag7@@": "Landsat 8 Oclusão de Terreno",
	"@@Transpose-Bits_Bit-Pattern_tag8@@": "Landsat 8 Vegetação",
	"@@Transpose-Bits_Bit-Pattern_tag9@@": "Landsat 8 Água",
	"@@Transpose-Bits_Bit-Pattern_tag10@@": "Usuário Definido",
	"@@Transpose-Bits_Constant-Value_tag0@@": "Um valor opcional que será utilizado para preencher todos os bits que não estão envolvidos na transposição. Este parâmetro é exposto quando o parâmetro <strong>Gerar Raster de Preenchimento pela Constante</strong> for configurado para <strong>Sim</strong>.",
	"@@Transpose-Bits_Fill-Raster_tag0@@": "Especifique um conjunto de dados raster a ser utilizado para preencher todos os bits que não estão envolvidos na transposição. Este parâmetro é exposto quando o parâmetro <strong>Gerar Raster de Preenchimento pela Constante</strong> for configurada para <strong>Não</strong>.",
	"@@Transpose-Bits_Generate-Fill-Raster-from-Constant_tag0@@": "Gere um raster de preenchimento utilizando um valor constante:",
	"@@Transpose-Bits_Generate-Fill-Raster-from-Constant_tag1@@": "<strong>Sim</strong>--Um raster será gerado utilizando um valor constante para preencher os bits não envolvidos na transposição. Este é o padrão.",
	"@@Transpose-Bits_Generate-Fill-Raster-from-Constant_tag3@@": "<strong>Não</strong>--Um raster será gerado utilizando valores de pixel do conjunto de dados raster existente para preencher os bits não envolvidos na transposição.",
	"@@Transpose-Bits_Output-Bit-and-Input-Bit_tag0@@": "Uma tabela de somente leitura que mostra os bits de saída e as entradas que estarão no seu lugar.",
	"@@Transpose-Bits_Raster_tag0@@": "O raster de entrada para descompactar e remapear.",
	"@@Unit-Conversion_From-Unit_tag0@@": "O tipo de unidade original dos pixels.",
	"@@Unit-Conversion_Raster_tag0@@": "O raster de entrada que conterá as unidades convertidas.",
	"@@Unit-Conversion_To-Unit_tag0@@": "O tipo de unidade convertida dos pixels.",
	"@@Vector-Field_Angle-Reference-System_tag0@@": "Especifica como o componente de direção foi medido.",
	"@@Vector-Field_Angle-Reference-System_tag1@@": "Geográfico--pontos de 0° devido ao Norte, e pontos de 90° devido ao Leste",
	"@@Vector-Field_Angle-Reference-System_tag2@@": "Aritmético--pontos de 0° devido ao Leste, e pontos de 90° devido ao Norte",
	"@@Vector-Field_Input-Data-Type_tag0@@": "O tipo de campo vetorial que suas entradas representam.",
	"@@Vector-Field_Input-Data-Type_tag1@@": "Desconhecido--Não se sabe se as entradas representam U-V ou Magnitude-Direção.",
	"@@Vector-Field_Input-Data-Type_tag2@@": "U-V--Os dados de entrada representam os componentes U e V.",
	"@@Vector-Field_Input-Data-Type_tag3@@": "Magnitude-Direção--Os dados de entrada representam magnitude e direção.",
	"@@Vector-Field_Output-Data-Type_tag0@@": "Especifica o tipo de campo vetorial que sua saída representará.",
	"@@Vector-Field_Output-Data-Type_tag1@@": "Magnitude-Direção--Os dados de saída representam magnitude e direção.",
	"@@Vector-Field_Output-Data-Type_tag2@@": "U-V--Os dados de saída representam os componentes U e V.",
	"@@Vector-Field_Raster1_tag0@@": "O primeiro raster de entrada.",
	"@@Vector-Field_Raster1_tag1@@": "Este será o valor U ou a magnitude.",
	"@@Vector-Field_Raster2_tag0@@": "O segundo raster de entrada.",
	"@@Vector-Field_Raster2_tag1@@": "Este será o valor V ou a direção.",
	"@@Viewshed_Analysis-Method_tag0@@": "Escolha o método pelo qual a visibilidade será calculada. Esta opção permite a você alterar alguma precisão para aumentar o desempenho.",
	"@@Viewshed_Analysis-Method_tag1@@": "Todas as Linhas de Visada--Uma linha de visada é executada para cada pixel no raster para estabelecer áreas visíveis. Este é o método padrão.",
	"@@Viewshed_Analysis-Method_tag2@@": "Linhas de Visada do Perímetro--As linhas de visada são executadas somente para os pixels no perímetro das áreas visíveis para estabelecer as áreas de visibilidade. Este método tem um desempenho melhor que o método <strong>Todas as Linhas de Visão</strong> já que menos linhas de visão são executadas no cálculo.",
	"@@Viewshed_Analysis-Type_tag0@@": "Escolha qual tipo de análise de visibilidade você deseja executar, determinando o quão visível cada célula é para os observadores ou identificando para cada local da superfície que observadores são visíveis.",
	"@@Viewshed_Analysis-Type_tag1@@": "Frequência--O número de vezes que cada local de pixel no raster de superfície de entrada pode ser visualizado pelos locais de observação de entrada (como pontos ou vértices para feições de polilinha do observador). Este é o padrão.",
	"@@Viewshed_Analysis-Type_tag2@@": "Observadores--A saída identifica exatamente quais pontos do observador são visíveis a partir de cada local da superfície do raster. O número máximo permitido de observadores de entrada é 32 com este tipo de análise.",
	"@@Viewshed_Horizontal-End-Angle_tag0@@": "Este valor define o ângulo final da faixa de digitalização horizontal. O valor deve ser especificado em graus de 0 a 360,0, onde 0 é orientado ao Norte. O valor padrão é 360.0.",
	"@@Viewshed_Horizontal-End-Angle_tag1@@": "Pode ser um campo no conjunto de dados de <strong>Feições do Observador</strong> de entrada ou um valor numérico. Se este parâmetro estiver configurado para um valor, então o valor será aplicado para todos os observadores. Para especificar diferentes valores para cada observador, configure este parâmetro para um campo no conjunto de dados de <strong>Feições do Observador</strong> de entrada.",
	"@@Viewshed_Horizontal-Start-Angle_tag0@@": "Este valor define o ângulo inicial da faixa de digitalização horizontal. O valor deve ser especificado em graus de 0 a 360,0, onde 0 é orientado ao Norte. O valor padrão é 0.",
	"@@Viewshed_Horizontal-Start-Angle_tag1@@": "Pode ser um campo no conjunto de dados de <strong>Feições do Observador</strong> de entrada ou um valor numérico. Se este parâmetro estiver configurado para um valor, então o valor será aplicado para todos os observadores. Para especificar diferentes valores para cada observador, configure este parâmetro para um campo no conjunto de dados de <strong>Feições do Observador</strong> de entrada.",
	"@@Viewshed_Inner-Radius-is-3D-Distance_tag0@@": "Tipo de distância do parâmetro de raio interno.",
	"@@Viewshed_Inner-Radius-is-3D-Distance_tag1@@": "Desmarcado—O <strong>Raio Interno</strong> é interpretado como uma distância 2D. Este é o padrão.",
	"@@Viewshed_Inner-Radius-is-3D-Distance_tag4@@": "Marcado—O <strong>Raio Interno</strong> é interpretado como uma distância 3D.",
	"@@Viewshed_Inner-Radius_tag0@@": "Este valor define a distância inicial (mínima) da qual a visibilidade é determinada. Os pixels mais próximos que esta distância não são considerados visíveis na saída, mas ainda podem bloquear a visibilidade dos pixels entre o <strong>Raio Interno</strong> e o <strong>Raio Externo</strong>. O valor padrão é 0.",
	"@@Viewshed_Inner-Radius_tag5@@": "Pode ser um campo no conjunto de dados de <strong>Feições do Observador</strong> de entrada ou um valor numérico. Se este parâmetro estiver configurado para um valor, então o valor será aplicado para todos os observadores. Para especificar diferentes valores para cada observador, configure este parâmetro para um campo no conjunto de dados de <strong>Feições do Observador</strong> de entrada.",
	"@@Viewshed_Observer-Elevation_tag0@@": "Este valor é utilizado para definir as elevações de superfície dos pontos do observador ou vértices.",
	"@@Viewshed_Observer-Elevation_tag1@@": "Pode ser um campo no conjunto de dados de <strong>Feições do Observador</strong> de entrada ou um valor numérico. Se este parâmetro não for especificado, a elevação de observador será obtida do raster de superfície utilizando interpolação bilinear. Se este parâmetro for configurado para um valor, então o valor será aplicado para todos os observadores. Para especificar diferentes valores para cada observador, configure este parâmetro para um campo no conjunto de dados de <strong>Feições do Observador</strong> de entrada.",
	"@@Viewshed_Observer-Features_tag0@@": "A classe de feição de entrada exigida que identifica os locais do observador. Pode ser feições de ponto, pontos múltiplos ou polilinha.",
	"@@Viewshed_Observer-Features_tag1@@": "A classe de feição de entrada é transformada em um sistema de coordenadas geocêntricas 3D durante o cálculo de visibilidade. Observadores fora da extensão do raster de superfície ou localizados em pixels de NoData serão ignorados no cálculo.",
	"@@Viewshed_Observer-Offset_tag0@@": "Este valor indica uma distância vertical (nas unidades de superfície) a ser adicionado para elevação do observador. Deve ser um valor inteiro positivo ou de ponto flutuante.",
	"@@Viewshed_Observer-Offset_tag1@@": "Pode ser um campo no conjunto de dados de <strong>Feições do Observador</strong> de entrada ou um valor numérico. Se este parâmetro estiver configurado para um valor, então o valor será aplicado para todos os observadores. Para especificar diferentes valores para cada observador, configure este parâmetro para um campo no conjunto de dados de <strong>Feições do Observador</strong> de entrada.",
	"@@Viewshed_Outer-Radius-is-3D-Distance_tag0@@": "Tipo de distância do parâmetro de raio externo.",
	"@@Viewshed_Outer-Radius-is-3D-Distance_tag1@@": "Desmarcado—O <strong>Raio Externo</strong> é interpretado como uma distância 2D. Este é o padrão.",
	"@@Viewshed_Outer-Radius-is-3D-Distance_tag4@@": "Marcado—O <strong>Raio Externo</strong> é interpretado como uma distância 3D.",
	"@@Viewshed_Outer-Radius_tag0@@": "Este valor define a distância máxima de que a visibilidade é determinada. Pixels além desta distância são excluídos da análise.",
	"@@Viewshed_Outer-Radius_tag1@@": "Pode ser um campo no conjunto de dados de <strong>Feições do Observador</strong> de entrada ou um valor numérico. Se este parâmetro estiver configurado para um valor, então o valor será aplicado para todos os observadores. Para especificar diferentes valores para cada observador, configure este parâmetro para um campo no conjunto de dados de <strong>Feições do Observador</strong> de entrada.",
	"@@Viewshed_Raster_tag0@@": "O raster de superfície de entrada exigido. Pode ser um raster inteiro ou de ponto flutuante.",
	"@@Viewshed_Raster_tag1@@": "A entrada é transformada em um sistema de coordenadas geocêntricas 3D durante o cálculo de visibilidade. As células de NoData no raster de entrada não bloqueiam a determinação da visibilidade.",
	"@@Viewshed_Refractive-Coefficient_tag0@@": "Coeficiente de refração da luz visível no ar.",
	"@@Viewshed_Refractive-Coefficient_tag1@@": "O valor padrão é 0,13.",
	"@@Viewshed_Surface-Offset_tag0@@": "Este valor indica uma distância vertical (em unidades de superfície) a ser adicionada ao valor z de cada pixel de destino como é considerado para visibilidade. Deve ser um valor inteiro positivo ou de ponto flutuante.",
	"@@Viewshed_Surface-Offset_tag1@@": "Pode ser um campo no conjunto de dados de <strong>Feições do Observador</strong> de entrada ou um valor numérico. Se este parâmetro estiver configurado para um valor, então o valor será aplicado para todos os observadores. Para especificar diferentes valores para cada observador, configure este parâmetro para um campo no conjunto de dados de <strong>Feições do Observador</strong> de entrada.",
	"@@Viewshed_Vertical-Error_tag0@@": "A quantidade de incerteza, medida como erro Médio Quadrático (RMSE), nos valores de elevação da superfície. É um valor de ponto flutuante representando o erro esperado dos valores de elevação de entrada. Quando este parâmetro for atribuído a um valor maior que 0, o raster de visibilidade de saída será de ponto flutuante. Neste caso, cada valor de pixel no raster de visibilidade de saída representa a soma de probabilidades que a célula é visível para quaisquer um dos observadores.",
	"@@Viewshed_Vertical-Error_tag1@@": "Quando o <strong>Tipo de Análise</strong> for <strong>Observadores</strong> ou o <strong>Método de Análise</strong> for <strong>Linhas de Visão do Perímetro</strong>, este parâmetro é desativado.",
	"@@Viewshed_Vertical-Lower-Angle_tag0@@": "Este valor define o limite do ângulo vertical inferior da digitalização abaixo do plano horizontal. O valor deve ser especificado em graus de -90,0 para 0, que pode ser de ponto inteiro ou flutuante. O valor padrão é -90,0.",
	"@@Viewshed_Vertical-Lower-Angle_tag1@@": "Pode ser um campo no conjunto de dados de <strong>Feições do Observador</strong> de entrada ou um valor numérico. Se este parâmetro estiver configurado para um valor, então o valor será aplicado para todos os observadores. Para especificar diferentes valores para cada observador, configure este parâmetro para um campo no conjunto de dados de <strong>Feições do Observador</strong> de entrada.",
	"@@Viewshed_Vertical-Upper-Angle_tag0@@": "Este valor define o limite do ângulo vertical superior da digitalização acima do plano horizontal. O valor deve ser especificado em graus de 0 para 90,0, que pode ser de ponto inteiro ou flutuante. O valor padrão é 90.0.",
	"@@Viewshed_Vertical-Upper-Angle_tag1@@": "Pode ser um campo no conjunto de dados de <strong>Feições do Observador</strong> de entrada ou um valor numérico. Se este parâmetro estiver configurado para um valor, então o valor será aplicado para todos os observadores. Para especificar diferentes valores para cada observador, configure este parâmetro para um campo no conjunto de dados de <strong>Feições do Observador</strong> de entrada.",
	"@@Watershed_Flow-Direction-Raster_tag0@@": "O raster de entrada que mostra a direção do fluxo de cada célula.",
	"@@Watershed_Flow-Direction-Raster_tag1@@": "O raster de direção do fluxo pode ser criado executando a função <strong>Direção do Fluxo</strong>.",
	"@@Watershed_Pour-Point(s)-Raster_tag0@@": "Localizações de ponto de escoamento de entrada.",
	"@@Watershed_Pour-Point(s)-Raster_tag1@@": "Este raster representa células acima da área de contribuição ou captação que será determinada. Todas as células que não são NoData serão utilizadas como células de origem.",
	"@@Watershed_Pour-Point-Field_tag0@@": "O campo utilizado para atribuir valores aos locais do ponto de escoamento.",
	"@@Watershed_Pour-Point-Field_tag1@@": "Para um conjunto de dados raster do ponto de escoamento, ${Value} é utilizado por padrão.",
	"@@Weighted-Overlay_Cellsize-Type_tag0@@": "Escolha que tamanho de célula deve ser utilizado no raster de saída. Se todos os tamanhos de célula de entrada forem os mesmos, todas as opções renderão os mesmos resultados.",
	"@@Weighted-Overlay_Cellsize-Type_tag1@@": "Primeiro De--Utiliza o primeiro tamanho de célula dos rasters de entrada.",
	"@@Weighted-Overlay_Cellsize-Type_tag2@@": "Mínimo De--Utiliza o menor tamanho de célula de todos os rasters de entrada.",
	"@@Weighted-Overlay_Cellsize-Type_tag3@@": "Máximo De--Utiliza o maior tamanho de célula de todos os rasters de entrada. Este é o padrão.",
	"@@Weighted-Overlay_Cellsize-Type_tag4@@": "Média De--Utiliza o tamanho médio de célula de todos os rasters de entrada.",
	"@@Weighted-Overlay_Cellsize-Type_tag5@@": "Último De--Utiliza o último tamanho de célula dos rasters de entrada.",
	"@@Weighted-Overlay_Extent-Type_tag0@@": "Escolha qual extensão deve ser utilizada no raster de saída:",
	"@@Weighted-Overlay_Extent-Type_tag1@@": "Primeiro De--Utiliza a extensão do primeiro raster de entrada para determinar a extensão de processamento.",
	"@@Weighted-Overlay_Extent-Type_tag2@@": "Intersecção De--Utiliza a extensão dos pixels de sobreposição para determinar a extensão de processamento. Este é o padrão.",
	"@@Weighted-Overlay_Extent-Type_tag3@@": "União De--Utiliza a extensão de todos os rasters para determinar a extensão de processamento.",
	"@@Weighted-Overlay_Extent-Type_tag4@@": "Última De--Utiliza a extensão do último raster de entrada para determinar a extensão de processamento.",
	"@@Weighted-Overlay_Scales_tag0@@": "O intervalo para os novos valores pelos quais remapear os valores antigos.",
	"@@Weighted-Overlay_Weighted-Overlay-Table_tag0@@": "A tabela de sobreposição ponderada consiste em quatro partes:",
	"@@Weighted-Overlay_Weighted-Overlay-Table_tag1@@": "Camada--Todos os rasters de entrada devem ser do tipo inteiro.",
	"@@Weighted-Overlay_Weighted-Overlay-Table_tag2@@": "Influência--Cada raster de entrada é ponderado de acordo com sua importância ou influência, como uma porcentagem relativa. A soma dos pesos percentuais de influência deve ser igual a 100 e cada peso deve ser especificado por valores inteiros.",
	"@@Weighted-Overlay_Weighted-Overlay-Table_tag3@@": "Campo--O campo de string ou inteiro no raster de entrada a ser utilizado para ponderação.",
	"@@Weighted-Overlay_Weighted-Overlay-Table_tag4@@": "Tabela Remapeada--Cada valor em um raster de entrada recebe um novo valor de escala com base na tabela remapeada. O valor de escala pode ser um valor válido ou um valor de NoData.",
	"@@Weighted-Sum_Cellsize-Type_tag0@@": "Escolha que tamanho de célula deve ser utilizado no raster de saída. Se todos os tamanhos de célula de entrada forem os mesmos, todas as opções renderão os mesmos resultados.",
	"@@Weighted-Sum_Cellsize-Type_tag1@@": "Primeiro De--Utiliza o primeiro tamanho de célula dos rasters de entrada.",
	"@@Weighted-Sum_Cellsize-Type_tag2@@": "Último De--Utiliza o último tamanho de célula dos rasters de entrada.",
	"@@Weighted-Sum_Cellsize-Type_tag3@@": "Máximo De--Utiliza o maior tamanho de célula de todos os rasters de entrada. Este é o padrão.",
	"@@Weighted-Sum_Cellsize-Type_tag4@@": "Média De--Utiliza o tamanho médio de célula de todos os rasters de entrada.",
	"@@Weighted-Sum_Cellsize-Type_tag5@@": "Mínimo De--Utiliza o menor tamanho de célula de todos os rasters de entrada.",
	"@@Weighted-Sum_Extent-Type_tag0@@": "Escolha qual extensão deve ser utilizada no raster de saída:",
	"@@Weighted-Sum_Extent-Type_tag1@@": "Primeiro De--Utiliza a extensão do primeiro raster de entrada para determinar a extensão de processamento.",
	"@@Weighted-Sum_Extent-Type_tag2@@": "Intersecção De--Utiliza a extensão dos pixels de sobreposição para determinar a extensão de processamento. Este é o padrão.",
	"@@Weighted-Sum_Extent-Type_tag3@@": "Última De--Utiliza a extensão do último raster de entrada para determinar a extensão de processamento.",
	"@@Weighted-Sum_Extent-Type_tag4@@": "União De--Utiliza a extensão de todos os rasters para determinar a extensão de processamento.",
	"@@Weighted-Sum_Weighted-Sum-Table_tag0@@": "A tabela de soma ponderada é definida por três propriedades:",
	"@@Weighted-Sum_Weighted-Sum-Table_tag1@@": "Camada--O raster sendo ponderado.",
	"@@Weighted-Sum_Weighted-Sum-Table_tag2@@": "Campo--O campo de raster a ser utilizado para ponderação.",
	"@@Weighted-Sum_Weighted-Sum-Table_tag3@@": "Peso--O valor do peso pelo qual multiplicar o raster. Pode ser qualquer valor decimal positivo ou negativo.",
	"@@Wind-Chill_Temperature-Raster_tag0@@": "Um raster de banda única onde os valores de pixel representam a temperatura do ar.",
	"@@Wind-Chill_Temperature-Units_tag0@@": "A unidade de medida associada com o raster de temperatura de entrada. As unidades de entrada disponíveis são Celsius, Fahrenheit e Kelvin.",
	"@@Wind-Chill_Wind-Chill-Units_tag0@@": "A unidade de medida associada com o raster de saída. As unidades de saída disponíveis são Celsius, Fahrenheit e Kelvin.",
	"@@Wind-Chill_Wind-Speed-Raster_tag0@@": "Um raster de banda única onde os valores de pixel representam a velocidade do vento.",
	"@@Wind-Chill_Wind-Speed-Units_tag0@@": "Define a unidade de medida do raster de velocidade-vento:",
	"@@Wind-Chill_Wind-Speed-Units_tag1@@": "Milhas por Hora (mph)",
	"@@Wind-Chill_Wind-Speed-Units_tag2@@": "Quilômetros Por Hora (km/h)",
	"@@Wind-Chill_Wind-Speed-Units_tag3@@": "Metros por Segundos (m/s)",
	"@@Wind-Chill_Wind-Speed-Units_tag4@@": "Pés por Segundo (ft/s)",
	"@@Wind-Chill_Wind-Speed-Units_tag5@@": "Nó (kn)",
	"@@Zonal-Remap_Background-Value_tag0@@": "O valor de pixel inicial do raster de saída, antes dos pixels de entrada serem remapeados.",
	"@@Zonal-Remap_Default-Output-Value_tag0@@": "O valor que será atribuído a um pixel que não atende nenhuma das condições definidas na <strong>Tabela de Atributos Zonais</strong>.",
	"@@Zonal-Remap_Default-Output-Value_tag3@@": "Isto também será o valor do pixel de saída se o parâmetro <strong>Nome de Campo de Valor de Saída</strong> for mantido como não especificado ou se o valor de saída do limite zonal correspondente for mantido como não especificado na <strong>Tabela de Atributos Zonais</strong>.",
	"@@Zonal-Remap_Maximum-Value-Field-Name_tag0@@": "O nome de campo contendo o valor máximo abaixo, que um pixel de entrada é remapeado.",
	"@@Zonal-Remap_Maximum-Value-Field-Name_tag1@@": "Se manter não especificado ou se o valor de campo for nulo, os valores de pixel não serão testados para máximo.",
	"@@Zonal-Remap_Minimum-Value-Field-Name_tag0@@": "O nome de campo contendo o valor mínimo acima, que um pixel de entrada é remapeado.",
	"@@Zonal-Remap_Minimum-Value-Field-Name_tag1@@": "Se manter não especificado ou se o valor de campo for nulo, os valores de pixel não serão testados para mínimo.",
	"@@Zonal-Remap_Output-Value-Field-Name_tag0@@": "O nome de campo contendo o valor de destino que um pixel de entrada é remapeado.",
	"@@Zonal-Remap_Output-Value-Field-Name_tag1@@": "Se for mantido como não especificado ou se o valor de campo for nulo, os valores de pixel remapeados serão definidos para <strong>Valor de Saída Padrão</strong>.",
	"@@Zonal-Remap_Value-Raster_tag0@@": "Uma entrada do raster de banda única exigida contendo valores de pixel para remapear.",
	"@@Zonal-Remap_Where-Clause_tag0@@": "Uma consulta opcional aplicada na <strong>Tabela de Atributos Zonais</strong>.",
	"@@Zonal-Remap_Where-Clause_tag3@@": "Se você estiver utilizando a tabela acima como um exemplo, a consulta seria ${Variable1 = 'bare earth' AND Variable2 = 'California'}.",
	"@@Zonal-Remap_Zonal-Attributes-Table_tag0@@": "Uma tabela de entrada exigida contendo pelo menos três campos. Deve ter um valor de limite mínimo, valor de limite máximo e valor de destino. O valor de destino é o campo que conterá o valor remapeado.",
	"@@Zonal-Remap_Zonal-Attributes-Table_tag1@@": "O formato do arquivo pode ser uma classe de feição, serviço de feição ou qualquer tipo de tabela que o ArcGIS suporta.",
	"@@Zonal-Remap_Zone-Field_tag0@@": "O nome de campo na <strong>Tabela de Atributos Zonais</strong>, que contém os valores de ID da zona.",
	"@@Zonal-Remap_Zone-Field_tag3@@": "Os valores de ID da zona estão diretamente ligados aos IDs das zonas em seu raster zonal. Eles fornecem outro nível de filtro durante o remapeamento. Se não houver nenhum ID de zona associado com um registro particular na tabela, ele não participará do remapeamento.",
	"@@Zonal-Remap_Zone-Raster_tag0@@": "Um raster de banda única onde cada pixel define zonas associadas com uma localização em particular. A zona é definida por todos os locais na entrada que tenham o mesmo valor. As áreas não têm que ser contíguas.",
	"@@Predict-Using-Trend_dimensiondefinition_tag0@@": "Especifica o método utilizado para fornecer valores de dimensão de previsão.",
	"@@Predict-Using-Trend_dimensiondefinition_tag1@@": "<strong>Por Valor</strong>--A previsão será calculada para um valor de dimensão única. Por exemplo, você deseja prever a precipitação anual pelos anos 2050, 2100 e 2150. Este é o padrão.",
	"@@Predict-Using-Trend_dimensiondefinition_tag2@@": "<strong>Por Intervalo</strong>--A previsão será calculada para um intervalo da dimensão definida por um valor inicial e um valor final. Por exemplo, você deseja prever a precipitação anual para cada ano entre 2050 e 2150.",
	"@@Predict-Using-Trend_end_tag0@@": "A data final, altura ou profundidade do intervalo de dimensão a ser utilizado na previsão.",
	"@@Predict-Using-Trend_end_tag1@@": "Este parâmetro é exigido quando o parâmetro <strong>Definição de Dimensão</strong> for configurado para <strong>Por Intervalo</strong>.",
	"@@Predict-Using-Trend_raster_tag0@@": "O raster de tendência multidimensional de entrada a partir da função <strong>Gerar Tendência</strong>.",
	"@@Predict-Using-Trend_start_tag0@@": "A data inicial, altura ou profundidade do intervalo de dimensão a ser utilizado na previsão.",
	"@@Predict-Using-Trend_start_tag1@@": "Este parâmetro é exigido quando o parâmetro <strong>Definição de Dimensão</strong> for configurado para <strong>Por Intervalo</strong>.",
	"@@Predict-Using-Trend_unit_tag0@@": "A unidade que será utilizada para o intervalo de valor. Este parâmetro somente se aplica quando a dimensão de análise for uma dimensão de tempo.",
	"@@Predict-Using-Trend_unit_tag1@@": "<strong>Horas</strong>--A previsão será calculada a cada hora no intervalo de tempo descrito pelos parâmetros <strong>Inicial</strong>, <strong>Final</strong> e <strong>Intervalo de Valor</strong>.",
	"@@Predict-Using-Trend_unit_tag2@@": "<strong>Dias</strong>--A previsão será calculada a cada dia no intervalo de tempo descrito pelos parâmetros <strong>Inicial</strong>, <strong>Final</strong> e <strong>Intervalo de Valor</strong>.",
	"@@Predict-Using-Trend_unit_tag3@@": "<strong>Semenas</strong>--A previsão será calculada a cada semana no intervalo de tempo descrito pelos parâmetros <strong>Inicial</strong>, <strong>Final</strong> e <strong>Intervalo de Valor</strong>.",
	"@@Predict-Using-Trend_unit_tag4@@": "<strong>Meses</strong>--A previsão será calculada a cada mês no intervalo de tempo descrito pelos parâmetros <strong>Inicial</strong>, <strong>Final</strong> e <strong>Intervalo de Valor</strong>.",
	"@@Predict-Using-Trend_unit_tag5@@": "<strong>Anos</strong>--A previsão será calculada a cada ano no intervalo de tempo descrito pelos parâmetros <strong>Inicial</strong>, <strong>Final</strong> e <strong>Intervalo de Valor</strong>.",
	"@@Predict-Using-Trend_valueinterval_tag0@@": "O número de etapas entre dois valores de dimensão a ser incluído na previsão. O valor padrão é 1.",
	"@@Predict-Using-Trend_valueinterval_tag1@@": "Este parâmetro é exigido quando o parâmetro <strong>Definição de Dimensão</strong> for configurado para <strong>Por Intervalo</strong>.",
	"@@Predict-Using-Trend_values_tag0@@": "O valor de dimensão ou valores a serem utilizados na previsão.",
	"@@Predict-Using-Trend_values_tag1@@": "O formato do tempo, profundidade, e valores de altura devem corresponder ao formato dos valores de dimensão utilizados para gerar o raster de tendência. Se o raster de tendência foi gerado para a dimensão StdTime, o formato deve ser YYYY-MM-DDTHH:MM:SS, por exemplo, 2050-01-01T00:00:00. Múltiplos valores são separados com um ponto-e-vírgula.",
	"@@Process-Raster-Collection_aggregationfunction_tag0@@": "Especifique o modelo de função raster utilizado para agregar divisões múltiplas em poucas divisões ou uma divisão única.",
	"@@Process-Raster-Collection_dimension_tag0@@": "A dimensão de agregação. Esta é a dimensão ao longo das variáveis que serão agregadas.",
	"@@Process-Raster-Collection_itemfunction_tag0@@": "Especifique o modelo de função raster utilizado para processar cada divisão ou item na coleção de raster de entrada.",
	"@@Process-Raster-Collection_keywordinterval_tag0@@": "Especifica o intervalo de palavra-chave que será utilizado ao  agregar ao longo da dimensão. Este parâmetro é exigido quando <strong>Tipo</strong> é configurado para <strong>Palavra-Chave do Intervalo</strong> e a agregação deve ser através do tempo.",
	"@@Process-Raster-Collection_keywordinterval_tag1@@": "<strong>A Cada Hora</strong>--Os valores de dados serão agregados em etapas de tempo de hora em hora e o resultado incluirá cada hora na série de tempo.",
	"@@Process-Raster-Collection_keywordinterval_tag2@@": "<strong>Diariamente</strong>--Os valores de dados serão agregados em etapas de tempo diárias e o resultado incluirá cada dia na série de tempo.",
	"@@Process-Raster-Collection_keywordinterval_tag3@@": "<strong>Semanalmente</strong>--Os valores de data serão agregados em etapas de tempo semanais e o resultado incluirá cada semana na série de tempo.",
	"@@Process-Raster-Collection_keywordinterval_tag4@@": "<strong>Por Década</strong>--Os valores de dados serão agregados em 3 períodos de 10 dias cada. O último período pode conter mais ou menos do que 10 dias. A saída incluirá 3 divisões para cada mês.",
	"@@Process-Raster-Collection_keywordinterval_tag5@@": "<strong>Pentadial</strong>--Os valores de dados serão agregados em 6 períodos de 5 dias cada. O último período pode conter mais ou menos do que 5 dias. A saída incluirá 6 divisões para cada mês.",
	"@@Process-Raster-Collection_keywordinterval_tag6@@": "<strong>Mensalmente</strong>--Os valores de dados serão agregados em etapas de tempo mensais e o resultado incluirá cada mês na série de tempo.",
	"@@Process-Raster-Collection_keywordinterval_tag7@@": "<strong>Trimestralmente</strong>--Os valores de data serão agregados em etapas de tempo trimestrais e o resultado incluirá cada trimestre na série de tempo.",
	"@@Process-Raster-Collection_keywordinterval_tag8@@": "<strong>Anualmente</strong>--Os valores de dados serão agregados em etapas de tempo anuais e o resultado incluirá cada ano na série de tempo.",
	"@@Process-Raster-Collection_keywordinterval_tag9@@": "<strong>Diariamente recorrente</strong>--Os valores de dados serão agregados em etapas de tempo diárias e o resultado incluirá um valor agregado por dia Juliano. A saída incluirá, no máximo, 366 divisões de tempo diárias.",
	"@@Process-Raster-Collection_keywordinterval_tag10@@": "<strong>Semanalmente recorrente</strong>--Os valores de dados serão agregados em etapas de tempo mensais e o resultado incluirá um valor agregado por semana. A saída incluirá, no máximo, 53 divisões de tempo mensais.",
	"@@Process-Raster-Collection_keywordinterval_tag11@@": "<strong>Mensalmente recorrente</strong>--Os valores de dados serão agregados em etapas de tempo mensais e o resultado incluirá um valor agregado por mês. A saída incluirá, no máximo, 12 divisões de tempo mensais.",
	"@@Process-Raster-Collection_keywordinterval_tag12@@": "<strong>Trimestralmente recorrente</strong>--Os valores de dados serão agregados em etapas de tempo semestrais e o resultado incluirá um valor agregado por trimestre. A saída incluirá, no máximo, 4 divisões de tempo trimestrais.",
	"@@Process-Raster-Collection_maximumvalue_tag0@@": "O valor máximo para um intervalo.",
	"@@Process-Raster-Collection_maximumvalue_tag1@@": "Este parâmetro é exigido quando o parâmetro <strong>Tipo</strong> for configurado para <strong>Faixas de Intervalo</strong>.",
	"@@Process-Raster-Collection_minimumvalue_tag0@@": "O valor mínimo para um intervalo.",
	"@@Process-Raster-Collection_minimumvalue_tag1@@": "Este parâmetro é exigido quando o parâmetro <strong>Tipo</strong> for configurado para <strong>Faixas de Intervalo</strong>.",
	"@@Process-Raster-Collection_processingfunction_tag0@@": "Especifique o modelo de função do raster utilizado para exibir a camada raster processada.",
	"@@Process-Raster-Collection_rastercollection_tag0@@": "O raster multidimensional, camada de mosaico ou conjunto de dados do mosaico de entrada.",
	"@@Process-Raster-Collection_type_tag0@@": "Especifica o intervalo de dimensão em que os dados serão agregados.",
	"@@Process-Raster-Collection_type_tag1@@": "<strong>Todos</strong>--Os valores de dados serão agregados por todas as divisões. Este é o padrão.",
	"@@Process-Raster-Collection_type_tag2@@": "<strong>Palavra-Chave do Intervalo</strong>--Os dados de variável serão agregados utilizando um intervalo comumente conhecido.",
	"@@Process-Raster-Collection_type_tag3@@": "<strong>Faixas de Intervalos</strong>--Os dados da variável serão agregadas entre pares de valores ou datas especificados.",
	"@@Process-Raster-Collection_type_tag4@@": "<strong>Valores de Intervalo</strong>--Os dados da variável serão agregados utilizando um intervalo e unidade especificados pelo usuário.",
	"@@Process-Raster-Collection_unit_tag0@@": "A unidade que será utilizada para o valor de deslocamento. Este parâmetro é exigido quando <strong>Dimensão</strong> for um campo de tempo e o parâmetro <strong>Tipo</strong> for definido para <strong>Valor de Intervalo</strong>.",
	"@@Process-Raster-Collection_unit_tag1@@": "Se você estiver agregando qualquer coisa diferente do tempo, esta opção não estará disponível e a unidade do valor de intervalo irá corresponder à unidade da variável dos dados raster multidimensional de entrada.",
	"@@Process-Raster-Collection_unit_tag2@@": "<strong>Horas</strong>--Os valores de dados serão agregados em divisões de tempo em hora em hora no intervalo fornecido.",
	"@@Process-Raster-Collection_unit_tag3@@": "<strong>Dias</strong>--Os valores de dados serão agregados em divisões de tempo diários no intervalo fornecido.",
	"@@Process-Raster-Collection_unit_tag4@@": "<strong>Semanas</strong>--Os valores de dados serão agregados em divisões de tempo semanais no intervalo fornecido.",
	"@@Process-Raster-Collection_unit_tag5@@": "<strong>Meses</strong>--Os valores de dados serão agregados em divisões de tempo mensais no intervalo fornecido.",
	"@@Process-Raster-Collection_unit_tag6@@": "<strong>Anos</strong>--Os valores de dados serão agregados em divisões de tempo anuais no intervalo fornecido.",
	"@@Process-Raster-Collection_valueinterval_tag0@@": "O tamanho do intervalo que será utilizado para a agregação. Este parâmetro é exigido quando o parâmetro <strong>Tipo</strong> for configurado para <strong>Valor de Intervalo</strong>.",
	"@@Process-Raster-Collection_valueinterval_tag1@@": "Por exemplo, para agregar 30 anos de dados de temperatura mensais em incrementos de 5 anos, insira 5 como o <strong>Intervalo de Valor</strong>, e especifique <strong>Unidade</strong> como <strong>Anos</strong>.",
	"@@Linear-Spectral-Unmixing_non-negative_tag0@@": "Especifica as opções para definir os valores de pixel de saída.",
	"@@Linear-Spectral-Unmixing_non-negative_tag1@@": "Marcado--Não haverá valores de saída negativos.",
	"@@Linear-Spectral-Unmixing_non-negative_tag2@@": "Desmarcado--Pode haver valores negativos da cobertura fracionária do solo.",
	"@@Linear-Spectral-Unmixing_raster_tag0@@": "O raster de entrada.",
	"@@Linear-Spectral-Unmixing_spectralprofile_tag0@@": "O arquivo do perfil espectral de entrada.",
	"@@Linear-Spectral-Unmixing_spectralprofiletype_tag0@@": "As informações espectrais para as diferentes classes de cobertura do solo.",
	"@@Linear-Spectral-Unmixing_spectralprofiletype_tag1@@": "<strong>Perfil Espectral</strong>--Um arquivo de definição do classificador (${.ecd}), gerado a partir da ferramenta <strong><strong>Classificador de Máxima Verossimilhança de Treinamento</strong></strong>, ou um arquivo JavaScript Object Notation (${.json}) que contém os perfis espectrais da classe.",
	"@@Linear-Spectral-Unmixing_spectralprofiletype_tag2@@": "<strong>Feição de Treinamento</strong>--Feições de polígono ou uma classe de feição de amostra de treinamento, gerada a partir do <strong>Gerenciador das Amostras de Treinamento</strong>.",
	"@@Linear-Spectral-Unmixing_sumtoone_tag0@@": "Especifica as opções para definir os valores de pixel de saída.",
	"@@Linear-Spectral-Unmixing_sumtoone_tag1@@": "Marcado--Os valores de classe para cada pixel são fornecidos no formato decimal, com a soma de todas as classes igual a 1. Por exemplo, Class1 = 0.16 ; Class2 = 0.24; Class3 = 0.60.",
	"@@Linear-Spectral-Unmixing_sumtoone_tag2@@": "Desmarcado--A soma de todas as classes em um pixel pode exceder 1.",
	"@@Linear-Spectral-Unmixing_trainingfeature_tag0@@": "O arquivo da feição de treinamento de entrada.",
	"@@Aggregate_aggregationtechnique_tag0@@": "O método utilizado para agregação. Os valores das células de entrada englobadas pelas células de saída mais grossas são agregados por uma das seguintes estatísticas:",
	"@@Aggregate_aggregationtechnique_tag1@@": "<strong>Soma</strong>--O total das células de entrada. Este é o padrão.",
	"@@Aggregate_aggregationtechnique_tag2@@": "<strong>Máximo</strong>--O maior valor das células de entrada.",
	"@@Aggregate_aggregationtechnique_tag3@@": "<strong>Média</strong>--O valor médio das células de entrada.",
	"@@Aggregate_aggregationtechnique_tag4@@": "<strong>Mediana</strong>--O valor de mediana das células de entrada.",
	"@@Aggregate_aggregationtechnique_tag5@@": "<strong>Mínimo</strong>--O menor valor das células de entrada.",
	"@@Aggregate_cellfactor_tag0@@": "O fator pelo qual multiplicar o tamanho da célula do raster de entrada.",
	"@@Aggregate_cellfactor_tag1@@": "Por exemplo, um valor de fator da célula igual a três resultaria em um tamanho de célula de saída três vezes maior que o do raster de entrada.",
	"@@Aggregate_expandextentifneeded_tag0@@": "Define como lidar com os limites do raster de entrada quando suas linhas ou colunas não forem um múltiplo de fator da célula.",
	"@@Aggregate_expandextentifneeded_tag1@@": "Marcado--Expande os limites superior ou direito do raster de entrada para que o número total de células em uma linha ou coluna seja um múltiplo de fator da célula. Com esta opÃ§Ã£o, o raster de saÃ­da pode cobrir uma extensÃ£o espacial maior que o raster de entrada. Este é o padrão.",
	"@@Aggregate_expandextentifneeded_tag2@@": "Desmarcado--Reduz o número de linhas ou colunas no raster de saída. Isto trunca as células restantes nos limites superior ou direito do raster de entrada, tornando o número de linhas ou colunas no raster de entrada um múltiplo de fator da célula. Com esta opÃ§Ã£o, o raster de saÃ­da pode cobrir uma extensÃ£o espacial menor que o raster de entrada.",
	"@@Aggregate_ignorenodataincalculations_tag0@@": "Denota se os valores ${NoData} são ignorados pelo cálculo de agregação.",
	"@@Aggregate_ignorenodataincalculations_tag1@@": "Marcado--Especifica que se existir valores de ${NoData} para qualquer uma das células que caem dentro da extensão espacial de uma célula maior no raster de saída, os valores de ${NoData} serão ignorados ao determinar o valor dos locais da célula de saída. Somente células de entrada dentro da extensão da célula de saída com valores de dados serão utilizadas para determinar o valor da célula de saída. Este é o padrão.",
	"@@Aggregate_ignorenodataincalculations_tag2@@": "Desmarcado--Especifica que se qualquer célula que cair dentro da extensão espacial de uma célula maior no raster de saída tiver um valor de ${NoData}, o valor para este local da célula de saída será ${NoData}. Quando esta opção é utilizada, fica implícito que quando as células em uma agregação contêm o valor de ${NoData}, há informações insuficientes para executar os cálculos especificados necessários para determinar um valor de saída.",
	"@@Aggregate_raster_tag0@@": "O raster de entrada a ser agregado.",
	"@@Expand_numberofcells_tag0@@": "O número de células a serem expandidas.",
	"@@Expand_numberofcells_tag1@@": "O valor deve ser inteiro e pode ser 1 ou maior.",
	"@@Expand_raster_tag0@@": "O raster de entrada para a qual as zonas identificadas devem ser expandidas.",
	"@@Expand_raster_tag1@@": "Ele deve ser um tipo inteiro.",
	"@@Expand_zonevalues_tag0@@": "A lista de zonas a serem expandidas.",
	"@@Expand_zonevalues_tag1@@": "Os valores de zona devem ser inteiros e podem estar em qualquer ordem.",
	"@@Expand_zonevalues_tag2@@": "Para especificar múltiplas zonas, utilize um espaço para separar os valores da zona.",
	"@@Multidimensional-Filter_dimension_tag0@@": "A dimensão para extrair variáveis.",
	"@@Multidimensional-Filter_dimensiondefinition_tag0@@": "Especifica o método que será utilizado para dividir a dimensão.",
	"@@Multidimensional-Filter_dimensiondefinition_tag1@@": "<strong>Todos</strong>--O intervalo total para cada dimensão será utilizado. Este é o padrão.",
	"@@Multidimensional-Filter_dimensiondefinition_tag2@@": "<strong>Por Valores</strong>--A dimensão será dividida utilizando um valor de dimensão ou lista de valores.",
	"@@Multidimensional-Filter_dimensiondefinition_tag3@@": "<strong>Por Intervalos</strong>--A dimensão será dividida utilizando um intervalo ou lista de valores.",
	"@@Multidimensional-Filter_dimensiondefinition_tag4@@": "<strong>Por Iteração</strong>--A dimensão será dividida em um tamanho de intervalo especificado.",
	"@@Multidimensional-Filter_endoffirstiteration_tag0@@": "O final do primeiro intervalo. Este intervalo é utilizado para iterar o conjunto de dados. Este parâmetro é exigido quando o parâmetro <strong>Definição de Dimensão</strong> é definido para <strong>Por Iteração</strong>.",
	"@@Multidimensional-Filter_maximumvalue_tag0@@": "O valor máximo para o intervalo. Este parâmetro é exigido quando o parâmetro <strong>Definição de Dimensão</strong> é definido para <strong>Por Intervalos</strong>.",
	"@@Multidimensional-Filter_minimumvalue_tag0@@": "O valor mínimo para o intervalo. Este parâmetro é exigido quando o parâmetro <strong>Definição de Dimensão</strong> é definido para <strong>Por Intervalos</strong>.",
	"@@Multidimensional-Filter_raster_tag0@@": "O raster multidimensional de entrada.",
	"@@Multidimensional-Filter_ranges_tag0@@": "<p>As faixas de intervalo especificadas em uma tabela serão utilizadas para agregar grupos de valores. Os valores mínimo e máximo especificam as faixas a serem incluídas.</p><p>Este parâmetro é exigido quando o parâmetro<strong>Tipo</strong> é configurado para <strong>Faixas de Intervalo</strong>.</p>",
	"@@Multidimensional-Filter_startoffirstiteration_tag0@@": "O começo do primeiro intervalo. Este intervalo é utilizado para iterar o conjunto de dados. Este parâmetro é exigido quando o parâmetro <strong>Definição de Dimensão</strong> é definido para <strong>Por Iteração</strong>.",
	"@@Multidimensional-Filter_step_tag0@@": "A frequência na qual os dados serão divididos. Este parâmetro é exigido quando o parâmetro <strong>Definição de Dimensão</strong> é definido para <strong>Por Iteração</strong>. O padrão é 3.",
	"@@Multidimensional-Filter_unit_tag0@@": "Especifica a unidade de iteração. Este parâmetro é exigido quando o parâmetro <strong>Definição de Dimensão</strong> é definido para <strong>Por Iteração</strong> e o parâmetro <strong>Dimensão</strong> é definido para <strong>Hora Padrão</strong>.",
	"@@Multidimensional-Filter_value_tag0@@": "O valor para a dimensão especificada. Este parâmetro é exigido quando o parâmetro <strong>Definição de Dimensão</strong> for configurado para <strong>Por Valores</strong>.",
	"@@Multidimensional-Filter_variables_tag0@@": "As variáveis que serão incluídas na camada de raster multidimensional de saída. Se nenhuma variável for especificada, a primeira variável será utilizada.",
	"@@Multidimensional-Filter_dimensionless_tag0@@": "Especifica se a camada deve ter valores de dimensão. Esta opção está disponível somente se uma única parte estiver selecionada para criar uma camada.",
	"@@Multidimensional-Filter_dimensionless_tag1@@": "Marcado--A camada não terá valores de dimensão.",
	"@@Multidimensional-Filter_dimensionless_tag2@@": "Desmarcado--A camada terá valores de dimensão. Este é o padrão.",
	"@@Multidimensional-Raster_interpolationcellsize_tag0@@": "O tamanho da célula do raster interpolado. O valor padrão é ${1}.",
	"@@Multidimensional-Raster_interpolationmethod_tag0@@": "O método de reamostragem utilizado para interpolar dados irregulares.",
	"@@Multidimensional-Raster_interpolationmethod_tag1@@": "<strong>Vizinho Mais Próximo</strong>--Calcula o valor de pixel de saída utilizando o pixel de entrada mais próximo. Se não existir nenhum pixel de origem, nenhum novo pixel poderá ser criado na saída. Este é o padrão.",
	"@@Multidimensional-Raster_interpolationmethod_tag2@@": "<strong>TIM Linear</strong>--Utiliza uma rede irregular triangulada a partir de pontos centrais de cada pixel no raster irregular para interpolar uma superfície que é então convertida em um raster regular.",
	"@@Multidimensional-Raster_interpolationmethod_tag3@@": "<strong>Vizinho Natural</strong>--Localiza o subconjunto mais próximo de amostras de entrada para um ponto de consulta e aplica pesos a eles com base em áreas proporcionadas para interpolar um valor.",
	"@@Multidimensional-Raster_interpolationmethod_tag4@@": "<strong>Distância Ponderada Inversa</strong>--Determina os valores de pixel utilizando uma combinação linearmente ponderada de um conjunto de pontos ou pixels de amostra. O peso é uma função do inverso da distância dos pontos ou pixels conhecidos.",
	"@@Multidimensional-Raster_raster_tag0@@": "O raster multidimensional de entrada.",
	"@@Multidimensional-Raster_variables_tag0@@": "A variável ou variáveis a serem incluídas na camada de raster multidimensional.",
	"@@Random_distribution_tag0@@": "Especifique o método de distribuição de valor aleatório a ser utilizado.",
	"@@Random_distribution_tag1@@": "<strong>Uniforme</strong> (Mínimo, Máximo)--Uma distribuição uniforme com um intervalo definido. Os valores padrão são 0 para Mínimo e 1 para Máximo. Este é o padrão.",
	"@@Random_distribution_tag2@@": "<strong>Inteiro</strong> (Mínimo, Máximo)--Uma distribuição de valor inteiro com um intervalo definido. Os valores padrão são 1 para Mínimo e 10 para Máximo.",
	"@@Random_distribution_tag3@@": "<strong>Normal</strong> (Média, Desvio Padrão)--Uma distribuição normal com média e desvio padrão definidos. Os valores padrão são 0 para Média e 1 para Desvio Padrão.",
	"@@Random_distribution_tag4@@": "<strong>Exponencial</strong> (Média)--Uma distribuição exponencial com uma média definida. O valor padrão é 1.",
	"@@Random_distribution_tag5@@": "<strong>Poisson</strong> (Média)--Uma distribuição de Poisson com uma média definida. O valor padrão é 1.",
	"@@Random_distribution_tag6@@": "<strong>Gama</strong> (Alfa, Beta)--Uma distribuição de gama com um alfa e beta definidos. Os valores padrão são 1 para Alfa e 1 para Beta.",
	"@@Random_distribution_tag7@@": "<strong>Binomial</strong> (N, Probabilidade)--Uma distribuição binomial com um N e probabilidade definidos. Os valores padrão são 10 para N e 0.5 para Probabilidade.",
	"@@Random_distribution_tag8@@": "<strong>Geométrica</strong> (Probabilidade)--Uma distribuição geométrica com uma probabilidade definida. O valor padrão é 0,5.",
	"@@Random_distribution_tag9@@": "<strong>Binomial Negativa</strong> (r, Probabilidade)--Uma distribuição de Pascal com um r e probabilidade definidos. Os valores padrão são 10.0 para r e 0.5 para Probabilidade.",
	"@@Random_randomnumbergenerator_tag0@@": "Especifique o algoritmo do gerador aleatório que utiliza a origem e a distribuição para produzir uma sequência de números aleatórios. As opções disponíveis são as seguintes:",
	"@@Random_randomnumbergenerator_tag1@@": "Standard C Rand",
	"@@Random_randomnumbergenerator_tag2@@": "Algoritmo ACM coletado 599",
	"@@Random_randomnumbergenerator_tag3@@": "Mersenne Twister",
	"@@Random_randomnumbergenerator_tag4@@": "O valor padrão é Mersenne Twister.",
	"@@Random_rasterinfo_tag0@@": "Utilize o botão <strong>Carregar raster de modelo</strong> para carregar um modelo de um diretório ou portal.",
	"@@Random_seed_tag0@@": "A origem é um valor inteiro e é utilizado para iniciar o gerador de número aleatório. O valor padrão é 1.",
	"@@Shrink_numberofcells_tag0@@": "O número de células pelas quais reduzir cada zona especificada.",
	"@@Shrink_numberofcells_tag1@@": "O valor deve ser inteiro e pode ser 1 ou maior.",
	"@@Shrink_raster_tag0@@": "O raster de entrada para a qual as zonas identificadas devem ser reduzidas.",
	"@@Shrink_raster_tag1@@": "Ele deve ser um tipo inteiro.",
	"@@Shrink_zonevalues_tag0@@": "A lista de zonas a serem reduzidas.",
	"@@Shrink_zonevalues_tag1@@": "Os valores de zona devem ser inteiros e podem estar em qualquer ordem.",
	"@@Shrink_zonevalues_tag2@@": "Para especificar múltiplas zonas, utilize um espaço para separar os valores da zona.",
	"@@Distance-Accumulation_costraster_tag0@@": "Um raster definindo o custo ou impedância para mover de forma plana através de cada célula. O valor em cada local de célula representa a distância de unidade por custo para mover por ele. Cada valor de local da célula é multiplicado pela resolução da célula, e também compensando por movimento diagonal para obter o custo total de passagem pela célula.",
	"@@Distance-Accumulation_costraster_tag1@@": "Os valores do <strong>Raster de Custo</strong> podem ser inteiro ou ponto flutuante, mas eles não podem ser negativos ou zero.",
	"@@Distance-Accumulation_distancemethod_tag0@@": "Determina o cálculo da distância utilizando um método plano (Terra plana) ou um método geodésico (elipsóide).",
	"@@Distance-Accumulation_distancemethod_tag1@@": "Planar--As medições planares utilizam matemáticas Cartesianas 2D para calcular área e comprimento. A opção está disponível somente ao medir em um sistema de coordenadas planas e o plano 2D deste sistema de coordenadas será utilizado como base para as medições.",
	"@@Distance-Accumulation_distancemethod_tag2@@": "Geodésico--A linha mais curta entre dois pontos na superfície da Terra em um esferóide (elipsóide). Portanto, não importando a projeção de entrada ou de saída, os resultados não alteram.",
	"@@Distance-Accumulation_distancemethod_tag3@@": "<strong>Nota:</strong> um uso para uma linha geodésica é quando você deseja determinar a menor distância entre duas cidades para a trajetória de voo de um avião. Isto também é conhecido como uma linha de grande círculo se for baseada em uma esfera e não em um elipsóide.",
	"@@Distance-Accumulation_generatebackdirectionbandasadditionalbandinoutput_tag0@@": "Determina se somente o raster de acumulação de distância é criado ou um raster de múltiplas bandas que consiste no raster de acumulação de distância e no raster de direção é criado.",
	"@@Distance-Accumulation_generatebackdirectionbandasadditionalbandinoutput_tag1@@": "Desmarcado--O resultado é o raster de acumulação de distância. Este é um resultado de banda única. Este é o padrão.",
	"@@Distance-Accumulation_generatebackdirectionbandasadditionalbandinoutput_tag2@@": "Marcado--Um resultado de múltiplas bandas é criado. A primeira banda é o raster de acumulação de distância e a segunda banda é o raster de direção de volta..",
	"@@Distance-Accumulation_generatebackdirectionbandasadditionalbandinoutput_tag3@@": "O raster da direção de volta calcula, para cada célula, a direção, em graus, até a célula vizinha ao longo do caminho mais curto de volta até a fonte mais próxima, evitando barreiras.",
	"@@Distance-Accumulation_horizontalfactor_tag0@@": "<p>Define a relação entre o fator de custo horizontal e o ângulo de movimento relativo horizontal (HRMA).</p><p>Há vários fatores com modificadores que identificam um gráfico de fator vertical definido. Adicionalmente, uma tabela pode ser utilizada para criar um gráfico personalizado. Os gráficos são usados ​​para identificar o fator vertical usado no cálculo do custo total de alteração para uma célula vizinha.</p><p>Nas explicações a seguir, são utilizadas duas siglas: HF e HRMA. HF significa fator horizontal, que define a dificuldade horizontal encontrada ao mover de uma célula para a próxima. HRMA significa ângulo de movimento relativo horizontal, que identifica o ângulo entre a direção horizontal de uma célula e a direção de movimento.</p><p><strong>Tipos de fator horizontal</strong>incluem o seguinte:</p><ul><li><strong>Binário</strong>--Indica que se o HRMA for menor que o ângulo de corte, o HF é definido com o valor associado ao fator zero; caso contrário, é infinito.</li><li><strong>Para frente</strong>--Estabelece que apenas o movimento para frente é permitido. O HRMA deve ser maior ou igual a 0 e menor que 90 graus (0 &lt; = HRMA &lt; 90). Se o HRMA for maior que 0 e menor que 45 graus, o HF para a célula é configurada para o valor associado com o fator zero. Se o HRMA for maior ou igual a 45 graus, o modificador de valor lateral é utilizado. O HF para qualquer valor HRMA igual ou superior a 90 graus é definido como infinito.</li><li><strong>Linear</strong>--Especifica que o HF é uma função linear do HRMA.</li><li><strong>Linear Inverso</strong>--Especifica que o HF é uma função linear inversa do HRMA.</li><li><strong>Tabela</strong>--Identifica que um arquivo de tabela será usado para definir o gráfico de fator horizontal usado para determinar os HFs.</li></ul><p>Os modificadores para os fatores horizontais incluem o seguinte:</p><ul><li><strong>Fator Zero</strong>--O fator horizontal a ser usado quando o HRMA for zero. Este fator posiciona a interceptação y para qualquer uma das funções de fator horizontal.</li><li><strong>Recortar ângulo</strong>--Define o ângulo HRMA além do qual o HF será definido para o infinito.</li><li><strong>Declividade</strong>--Estabelece a inclinação da linha reta usada com as palavras-chave de fator horizontal<strong>Linear</strong>e<strong>Linear Inverso</strong>. A declividade é especificada como uma fração da subida ao longo do curso (por exemplo, declividade de 45 porcento é 1/45, que é inserida como 0.02222).</li><li><strong>Valor lateral</strong>--Estabelece o HF quando o HRMA é maior ou igual a 45 graus e menor que 90 graus quando a palavra-chave fator horizontal<strong>Para frente</strong>for especificada.</li><li><strong>Nome da tabela</strong>--Identifica o nome da tabela que define o HF.</li></ul>",
	"@@Distance-Accumulation_horizontalraster_tag0@@": "Um raster definindo a direção horizontal em cada local de célula.",
	"@@Distance-Accumulation_horizontalraster_tag1@@": "Os valores no raster devem ser inteiros de 0 a 360, com 0 graus sendo Norte ou em direção ao topo da tela e aumentando no sentido horário. As áreas planas recebem um valor de -1. Os valores em cada localização serão utilizados junto com o <strong>Fator Horizontal</strong> para determinar o custo horizontal incorrido ao mover uma célula para seus vizinhos.",
	"@@Distance-Accumulation_initialaccumulation_tag0@@": "O custo acumulativo inicial para iniciar o cálculo de custo. Este parâmetro permite a especificação do custo fixo associado com uma origem. Em vez de iniciar a um custo de 0, o algoritmo de custo começará com o valor especificado.",
	"@@Distance-Accumulation_initialaccumulation_tag1@@": "Um valor numérico (duplo) ou um campo a partir do <strong>Raster de Origem</strong> pode ser utilizado para este parâmetro.",
	"@@Distance-Accumulation_initialaccumulation_tag2@@": "O valor deve ser zero ou maior. O padrão é 0.",
	"@@Distance-Accumulation_maximumaccumulation_tag0@@": "Define o custo máximo acumulativo do viajante para uma origem. Os cálculos de custo continuam para cada origem até que a capacidade especificada seja alcançada.",
	"@@Distance-Accumulation_maximumaccumulation_tag1@@": "Um valor numérico (duplo) ou um campo a partir do <strong>Raster de Origem</strong> pode ser utilizado para este parâmetro.",
	"@@Distance-Accumulation_maximumaccumulation_tag2@@": "O valor deve ser maior que zero. A capacidade padrão é a extremidade do raster de saída.",
	"@@Distance-Accumulation_multipliertoapplytocosts_tag0@@": "Um multiplicador para aplicar aos valores de custo.",
	"@@Distance-Accumulation_multipliertoapplytocosts_tag1@@": "Este parâmetro permite o controle do modo de viagem ou a magnitude em uma origem. Quanto maior o multiplicador, maior o custo para mover por cada célula.",
	"@@Distance-Accumulation_multipliertoapplytocosts_tag2@@": "Um valor numérico (duplo) ou um campo a partir do <strong>Raster de Origem</strong> pode ser utilizado para este parâmetro.",
	"@@Distance-Accumulation_multipliertoapplytocosts_tag3@@": "Os valores devem ser maiores que zero. O padrão é 1.",
	"@@Distance-Accumulation_rasterbarriers_tag0@@": "O raster que define as barreiras.",
	"@@Distance-Accumulation_rasterbarriers_tag1@@": "O conjunto de dados deve conter NoData, onde não há barreiras. As barreiras são representadas por valores válidos, incluindo zero.",
	"@@Distance-Accumulation_rasterbarriers_tag2@@": "As barreiras podem definidas por um raster inteiro ou de ponto flutuante.",
	"@@Distance-Accumulation_sourceraster_tag0@@": "Os locais de origem de entrada.",
	"@@Distance-Accumulation_sourceraster_tag1@@": "Este é um conjunto de dados raster que identifica as células ou localizações de onde é calculada a menor distância de custo acumulada para cada localização da célula de saída.",
	"@@Distance-Accumulation_sourceraster_tag2@@": "Pode ser um tipo inteiro ou de ponto flutuante.",
	"@@Distance-Accumulation_surfaceraster_tag0@@": "Um raster definindo os valores de elevação em cada local de célula.",
	"@@Distance-Accumulation_surfaceraster_tag1@@": "Os valores são utilizados para calcular a distância de superfície real coberta ao analisar entre as células.",
	"@@Distance-Accumulation_traveldirection_tag0@@": "Define a direção do viajante ao aplicar o fator vertical, fator horizontal e a taxa de resistência de origem.",
	"@@Distance-Accumulation_traveldirection_tag1@@": "<strong>Da Origem</strong>--O fator vertical, fator horizontal e a taxa de resistência de origem serão aplicados no início da origem de entrada e saindo para células diferentes da origem. Este é o padrão.",
	"@@Distance-Accumulation_traveldirection_tag2@@": "<strong>Para Origem</strong>--O fator vertical, fator horizontal e a taxa de resistência de origem serão aplicados no início de cada célula diferente da origem e movendo de volta para a origem de entrada.",
	"@@Distance-Accumulation_traveldirection_tag3@@": "Especifique a palavra-chave <strong>Da Origem</strong> ou <strong>Para Origem</strong> , que será aplicada a todas as origens ou especifique um campo no <strong>Raster de Origem</strong> que contém as palavras-chaves para identificar a direção de viagem de cada origem. O campo deve conter a string ${FROM_SOURCE} ou ${TO_SOURCE}.",
	"@@Distance-Accumulation_verticalfactor_tag0@@": "<p>Define a relação entre o fator de custo vertical e o ângulo de movimento relativo vertical (VRMA).</p><p>Há vários fatores com modificadores que identificam um gráfico de fator vertical definido. Adicionalmente, uma tabela pode ser utilizada para criar um gráfico personalizado. Os gráficos são usados ​​para identificar o fator vertical usado no cálculo do custo total de alteração para uma célula vizinha.</p><p>Nas explicações a seguir, são utilizadas duas siglas: VF e VRMA. VF significa fator vertical, que define a dificuldade horizontal encontrada ao mover de uma célula para a próxima. VRMA significa ângulo de movimento relativo vertical, que identifica o ângulo de declividade entre a célula DE, ou de processamento, e a célula PARA.</p><p><strong>Tipos de fator vertical</strong>incluem os seguintes:</p><ul><li><strong>Binário</strong>--Especifica que se o VRMA for maior que o ângulo de recorte baixo e menor que o ângulo de recorte alto, o VF é definido com o valor associado ao fator zero; caso contrário, é infinito.</li><li><strong>Linear</strong>--Indica que o VF é uma função linear do VRMA.</li><li><strong>Linear Simétrico</strong>--Especifica que o VF é uma função linear do VRMA no lado negativo ou positivo do VRMA, respectivamente, e as duas funções lineares são simétricas em relação ao eixo (y) VF.</li><li><strong>Linear Inverso</strong>--Indica que o VF é uma função linear inversa do VRMA.</li><li><strong>Linear Inverso Simétrico</strong>--Especifica que o VF é uma função linear inversa do VRMA no lado negativo ou positivo do VRMA, respectivamente, e as duas funções lineares são simétricas em relação ao eixo (y) VF.</li><li><strong>Cos</strong>--Identifica o VF como a função baseada no cosseno do VRMA.</li><li><strong>Sec</strong>--Identifica o VF como a função baseada na secante do VRMA.</li><li><strong>Cos-Sec</strong>--Especifica que o VF é a função baseada no cosseno do VRMA quando o VRMA é negativo e a função baseada na secante do VRMA quando o VRMA não é negativo.</li><li><strong>Sec-Cos</strong>--Especifica que o VF é a função baseada na secante do VRMA quando o VRMA é negativo e a função baseada no cosseno do VRMA quando o VRMA não é negativo.</li><li><strong>Tabela</strong>--Identifica que um arquivo de tabela será usado para definir o gráfico de fator vertical que é usado para determinar o VFs.</li></ul><p>Os modificadores para as palavras-chave verticais incluem o seguinte:</p><ul><li><strong>Fator Zero</strong>--Estabelece o fator vertical usado quando o VRMA é zero. Este fator posiciona a opção interceptar y da função especificada. Por definição, o fator zero não é aplicável a qualquer uma das funções verticais trigonométricas (COS, SEC, COS-SEC ou SEC-COS). A interceptação y é definida por essas funções.</li><li><strong>Ângulo de recorte baixo</strong>--Define o ângulo VRMA abaixo do qual a VF será definida para o infinito.</li><li><strong>Ângulo de recorte alto</strong>--Define o ângulo VRMA acima do qual a VF será definida para o infinito.</li><li><strong>Declividade</strong>--Estabelece a declividade da linha reta usada com a palavras-chave de fator vertical<strong>Linear</strong>e<strong>Linear Inverso</strong>. A declividade é especificada como uma fração da subida ao longo do curso (por exemplo, declividade de 45 porcento é 1/45, que é inserida como 0.02222).</li><li><strong>Nome da tabela</strong>--Identifica o nome da tabela que define o VF.</li></ul>",
	"@@Distance-Accumulation_verticalraster_tag0@@": "Define o relacionamento entre o fator de custo vertical e o ângulo de movimento relativo vertical (VRMA).",
	"@@Distance-Accumulation_verticalraster_tag1@@": "Os valores são utilizados para calcular a declividade para identificar o fator vertical incorrido ao mover de uma célula para outra.",
	"@@Distance-Allocation_costraster_tag0@@": "Um raster definindo o custo ou impedância para mover de forma plana através de cada célula. O valor em cada local de célula representa a distância de unidade por custo para mover por ele. Cada valor de local da célula é multiplicado pela resolução da célula, e também compensando por movimento diagonal para obter o custo total de passagem pela célula.",
	"@@Distance-Allocation_costraster_tag1@@": "Os valores do <strong>Raster de Custo</strong> podem ser inteiro ou ponto flutuante, mas eles não podem ser negativos ou zero.",
	"@@Distance-Allocation_distancemethod_tag0@@": "Determina o cálculo da distância utilizando um método plano (Terra plana) ou um método geodésico (elipsóide).",
	"@@Distance-Allocation_distancemethod_tag1@@": "Planar--As medições planares utilizam matemáticas Cartesianas 2D para calcular área e comprimento. A opção está disponível somente ao medir em um sistema de coordenadas planas e o plano 2D deste sistema de coordenadas será utilizado como base para as medições.",
	"@@Distance-Allocation_distancemethod_tag2@@": "Geodésico--A linha mais curta entre dois pontos na superfície da Terra em um esferóide (elipsóide). Portanto, não importando a projeção de entrada ou de saída, os resultados não alteram.",
	"@@Distance-Allocation_distancemethod_tag3@@": "<strong>Nota:</strong> um uso para uma linha geodésica é quando você deseja determinar a menor distância entre duas cidades para a trajetória de voo de um avião. Isto também é conhecido como uma linha de grande círculo se for baseada em uma esfera e não em um elipsóide.",
	"@@Distance-Allocation_horizontalfactor_tag0@@": "<p>Define a relação entre o fator de custo horizontal e o ângulo de movimento relativo horizontal (HRMA).</p><p>Há vários fatores com modificadores que identificam um gráfico de fator vertical definido. Adicionalmente, uma tabela pode ser utilizada para criar um gráfico personalizado. Os gráficos são usados ​​para identificar o fator vertical usado no cálculo do custo total de alteração para uma célula vizinha.</p><p>Nas explicações a seguir, são utilizadas duas siglas: HF e HRMA. HF significa fator horizontal, que define a dificuldade horizontal encontrada ao mover de uma célula para a próxima. HRMA significa ângulo de movimento relativo horizontal, que identifica o ângulo entre a direção horizontal de uma célula e a direção de movimento.</p><p><strong>Tipos de fator horizontal</strong>incluem o seguinte:</p><ul><li><strong>Binário</strong>--Indica que se o HRMA for menor que o ângulo de corte, o HF é definido com o valor associado ao fator zero; caso contrário, é infinito.</li><li><strong>Para frente</strong>--Estabelece que apenas o movimento para frente é permitido. O HRMA deve ser maior ou igual a 0 e menor que 90 graus (0 &lt; = HRMA &lt; 90). Se o HRMA for maior que 0 e menor que 45 graus, o HF para a célula é configurada para o valor associado com o fator zero. Se o HRMA for maior ou igual a 45 graus, o modificador de valor lateral é utilizado. O HF para qualquer valor HRMA igual ou superior a 90 graus é definido como infinito.</li><li><strong>Linear</strong>--Especifica que o HF é uma função linear do HRMA.</li><li><strong>Linear Inverso</strong>--Especifica que o HF é uma função linear inversa do HRMA.</li><li><strong>Tabela</strong>--Identifica que um arquivo de tabela será usado para definir o gráfico de fator horizontal usado para determinar os HFs.</li></ul><p>Os modificadores para os fatores horizontais incluem o seguinte:</p><ul><li><strong>Fator Zero</strong>--O fator horizontal a ser usado quando o HRMA for zero. Este fator posiciona a interceptação y para qualquer uma das funções de fator horizontal.</li><li><strong>Recortar ângulo</strong>--Define o ângulo HRMA além do qual o HF será definido para o infinito.</li><li><strong>Declividade</strong>--Estabelece a inclinação da linha reta usada com as palavras-chave de fator horizontal<strong>Linear</strong>e<strong>Linear Inverso</strong>. A declividade é especificada como uma fração da subida ao longo do curso (por exemplo, declividade de 45 porcento é 1/45, que é inserida como 0.02222).</li><li><strong>Valor lateral</strong>--Estabelece o HF quando o HRMA é maior ou igual a 45 graus e menor que 90 graus quando a palavra-chave fator horizontal<strong>Para frente</strong>for especificada.</li><li><strong>Nome da tabela</strong>--Identifica o nome da tabela que define o HF.</li></ul>",
	"@@Distance-Allocation_horizontalraster_tag0@@": "Um raster definindo a direção horizontal em cada local de célula.",
	"@@Distance-Allocation_horizontalraster_tag1@@": "Os valores no raster devem ser inteiros de 0 a 360, com 0 graus sendo Norte ou em direção ao topo da tela e aumentando no sentido horário. As áreas planas recebem um valor de -1. Os valores em cada localização serão utilizados junto com o <strong>Fator Horizontal</strong> para determinar o custo horizontal incorrido ao mover uma célula para seus vizinhos.",
	"@@Distance-Allocation_initialaccumulation_tag0@@": "O custo acumulativo inicial para iniciar o cálculo de custo. Este parâmetro permite a especificação do custo fixo associado com uma origem. Em vez de iniciar a um custo de 0, o algoritmo de custo começará com o valor especificado.",
	"@@Distance-Allocation_initialaccumulation_tag1@@": "Um valor numérico (duplo) ou um campo a partir do <strong>Raster de Origem</strong> pode ser utilizado para este parâmetro.",
	"@@Distance-Allocation_initialaccumulation_tag2@@": "O valor deve ser zero ou maior. O padrão é 0.",
	"@@Distance-Allocation_maximumaccumulation_tag0@@": "Define o custo máximo acumulativo do viajante para uma origem. Os cálculos de custo continuam para cada origem até que a capacidade especificada seja alcançada.",
	"@@Distance-Allocation_maximumaccumulation_tag1@@": "Um valor numérico (duplo) ou um campo a partir do <strong>Raster de Origem</strong> pode ser utilizado para este parâmetro.",
	"@@Distance-Allocation_maximumaccumulation_tag2@@": "O valor deve ser maior que zero. A capacidade padrão é a extremidade do raster de saída.",
	"@@Distance-Allocation_multipliertoapplytocosts_tag0@@": "Um multiplicador para aplicar aos valores de custo.",
	"@@Distance-Allocation_multipliertoapplytocosts_tag1@@": "Este parâmetro permite o controle do modo de viagem ou a magnitude em uma origem. Quanto maior o multiplicador, maior o custo para mover por cada célula.",
	"@@Distance-Allocation_multipliertoapplytocosts_tag2@@": "Os valores devem ser maiores que zero. O padrão é 1.",
	"@@Distance-Allocation_multipliertoapplytocosts_tag3@@": "Um valor numérico (duplo) ou um campo a partir do <strong>Raster de Origem</strong> pode ser utilizado para este parâmetro.",
	"@@Distance-Allocation_rasterbarriers_tag0@@": "O raster que define as barreiras.",
	"@@Distance-Allocation_rasterbarriers_tag1@@": "O conjunto de dados deve conter NoData, onde não há barreiras. As barreiras são representadas por valores válidos, incluindo zero.",
	"@@Distance-Allocation_rasterbarriers_tag2@@": "As barreiras podem definidas por um raster inteiro ou de ponto flutuante.",
	"@@Distance-Allocation_sourcefield_tag0@@": "O campo utilizado para atribuir valores para os locais de origem. Ele deve ser um tipo inteiro.",
	"@@Distance-Allocation_sourceraster_tag0@@": "Os locais de origem de entrada.",
	"@@Distance-Allocation_sourceraster_tag1@@": "Este é um conjunto de dados raster que identifica as células ou localizações de onde é calculada a menor distância de custo acumulada para cada localização da célula de saída.",
	"@@Distance-Allocation_sourcerowandcolumnbands_tag0@@": "Determina se somente o raster de alocação é criado ou se um resultado de múltiplas bandas é criado.",
	"@@Distance-Allocation_sourcerowandcolumnbands_tag1@@": "Desmarcado--O resultado é o raster de alocação de distância. Este é um resultado de banda única. Este é o padrão.",
	"@@Distance-Allocation_sourcerowandcolumnbands_tag2@@": "Marcado--Um raster de múltiplas bandas é criado. A primeira banda é o raster de alocação de distância, a segunda banda contém um índice de linha e a terceira banda contém um índice de coluna. Estes índices identificam o local da célula de origem que é a menor distância de custo acumulada.",
	"@@Distance-Allocation_surfaceraster_tag0@@": "Um raster definindo os valores de elevação em cada local de célula.",
	"@@Distance-Allocation_surfaceraster_tag1@@": "Os valores são utilizados para calcular a distância de superfície real coberta ao analisar entre as células.",
	"@@Distance-Allocation_traveldirection_tag0@@": "Define a direção do viajante ao aplicar o fator vertical, fator horizontal e a taxa de resistência de origem.",
	"@@Distance-Allocation_traveldirection_tag1@@": "<strong>Da Origem</strong>--O fator vertical, fator horizontal e a taxa de resistência de origem serão aplicados no início da origem de entrada e saindo para células diferentes da origem. Este é o padrão.",
	"@@Distance-Allocation_traveldirection_tag2@@": "<strong>Para Origem</strong>--O fator vertical, fator horizontal e a taxa de resistência de origem serão aplicados no início de cada célula diferente da origem e movendo de volta para a origem de entrada.",
	"@@Distance-Allocation_traveldirection_tag3@@": "Especifique a palavra-chave <strong>Da Origem</strong> ou <strong>Para Origem</strong> , que será aplicada a todas as origens ou especifique um campo no <strong>Raster de Origem</strong> que contém as palavras-chaves para identificar a direção de viagem de cada origem. O campo deve conter a string ${FROM_SOURCE} ou ${TO_SOURCE}.",
	"@@Distance-Allocation_verticalfactor_tag0@@": "<p>Define a relação entre o fator de custo vertical e o ângulo de movimento relativo vertical (VRMA).</p><p>Há vários fatores com modificadores que identificam um gráfico de fator vertical definido. Adicionalmente, uma tabela pode ser utilizada para criar um gráfico personalizado. Os gráficos são usados ​​para identificar o fator vertical usado no cálculo do custo total de alteração para uma célula vizinha.</p><p>Nas explicações a seguir, são utilizadas duas siglas: VF e VRMA. VF significa fator vertical, que define a dificuldade horizontal encontrada ao mover de uma célula para a próxima. VRMA significa ângulo de movimento relativo vertical, que identifica o ângulo de declividade entre a célula DE, ou de processamento, e a célula PARA.</p><p><strong>Tipos de fator vertical</strong>incluem os seguintes:</p><ul><li><strong>Binário</strong>--Especifica que se o VRMA for maior que o ângulo de recorte baixo e menor que o ângulo de recorte alto, o VF é definido com o valor associado ao fator zero; caso contrário, é infinito.</li><li><strong>Linear</strong>--Indica que o VF é uma função linear do VRMA.</li><li><strong>Linear Simétrico</strong>--Especifica que o VF é uma função linear do VRMA no lado negativo ou positivo do VRMA, respectivamente, e as duas funções lineares são simétricas em relação ao eixo (y) VF.</li><li><strong>Linear Inverso</strong>--Indica que o VF é uma função linear inversa do VRMA.</li><li><strong>Linear Inverso Simétrico</strong>--Especifica que o VF é uma função linear inversa do VRMA no lado negativo ou positivo do VRMA, respectivamente, e as duas funções lineares são simétricas em relação ao eixo (y) VF.</li><li><strong>Cos</strong>--Identifica o VF como a função baseada no cosseno do VRMA.</li><li><strong>Sec</strong>--Identifica o VF como a função baseada na secante do VRMA.</li><li><strong>Cos-Sec</strong>--Especifica que o VF é a função baseada no cosseno do VRMA quando o VRMA é negativo e a função baseada na secante do VRMA quando o VRMA não é negativo.</li><li><strong>Sec-Cos</strong>--Especifica que o VF é a função baseada na secante do VRMA quando o VRMA é negativo e a função baseada no cosseno do VRMA quando o VRMA não é negativo.</li><li><strong>Tabela</strong>--Identifica que um arquivo de tabela será usado para definir o gráfico de fator vertical que é usado para determinar o VFs.</li></ul><p>Os modificadores para as palavras-chave verticais incluem o seguinte:</p><ul><li><strong>Fator Zero</strong>--Estabelece o fator vertical usado quando o VRMA é zero. Este fator posiciona a opção interceptar y da função especificada. Por definição, o fator zero não é aplicável a qualquer uma das funções verticais trigonométricas (COS, SEC, COS-SEC ou SEC-COS). A interceptação y é definida por essas funções.</li><li><strong>Ângulo de recorte baixo</strong>--Define o ângulo VRMA abaixo do qual a VF será definida para o infinito.</li><li><strong>Ângulo de recorte alto</strong>--Define o ângulo VRMA acima do qual a VF será definida para o infinito.</li><li><strong>Declividade</strong>--Estabelece a declividade da linha reta usada com a palavras-chave de fator vertical<strong>Linear</strong>e<strong>Linear Inverso</strong>. A declividade é especificada como uma fração da subida ao longo do curso (por exemplo, declividade de 45 porcento é 1/45, que é inserida como 0.02222).</li><li><strong>Nome da tabela</strong>--Identifica o nome da tabela que define o VF.</li></ul>",
	"@@Distance-Allocation_verticalraster_tag0@@": "Define o relacionamento entre o fator de custo vertical e o ângulo de movimento relativo vertical (VRMA).",
	"@@Distance-Allocation_verticalraster_tag1@@": "Os valores são utilizados para calcular a declividade para identificar o fator vertical incorrido ao mover de uma célula para outra.",
	"@@Euclidean-Back-Direction_cellsize_tag0@@": "O tamanho da célula na qual o raster de saída será criado.",
	"@@Euclidean-Back-Direction_cellsize_tag1@@": "Se o tamanho da célula foi explicitamente definido em <strong>Ambientes</strong>, que será o tamanho de célula padrão. Se não foi configurado, o tamanho da célula de saída será o mesmo que o <strong>Raster de Origem</strong>.",
	"@@Euclidean-Back-Direction_distancemethod_tag0@@": "Determina o cálculo da distância utilizando um método plano (Terra plana) ou um método geodésico (elipsóide).",
	"@@Euclidean-Back-Direction_distancemethod_tag1@@": "Planar--As medições planares utilizam matemáticas Cartesianas 2D para calcular área e comprimento. A opção está disponível somente ao medir em um sistema de coordenadas planas e o plano 2D deste sistema de coordenadas será utilizado como base para as medições.",
	"@@Euclidean-Back-Direction_distancemethod_tag2@@": "Geodésico--A linha mais curta entre dois pontos na superfície da Terra em um esferóide (elipsóide). Portanto, não importando a projeção de entrada ou de saída, os resultados não alteram.",
	"@@Euclidean-Back-Direction_distancemethod_tag3@@": "<strong>Nota:</strong> um uso para uma linha geodésica é quando você deseja determinar a menor distância entre duas cidades para a trajetória de voo de um avião. Isto também é conhecido como uma linha de grande círculo se for baseada em uma esfera e não em um elipsóide.",
	"@@Euclidean-Back-Direction_maximumdistance_tag0@@": "Define a distância de limite dentro da direção até a origem mais próxima que será calculada. Se a distância até a origem mais próxima exceder isto, a saída desta célula será NoData.",
	"@@Euclidean-Back-Direction_maximumdistance_tag1@@": "A distância padrão é a extensão do raster de saída.",
	"@@Euclidean-Back-Direction_rasterbarriers_tag0@@": "O raster que define as barreiras.",
	"@@Euclidean-Back-Direction_rasterbarriers_tag1@@": "O conjunto de dados deve conter NoData, onde não há barreiras. As barreiras são representadas por valores válidos, incluindo zero.",
	"@@Euclidean-Back-Direction_rasterbarriers_tag2@@": "As barreiras podem definidas por um raster inteiro ou de ponto flutuante.",
	"@@Euclidean-Back-Direction_sourceraster_tag0@@": "O conjunto de dados raster que identifica as células ou locais onde a direção Euclideana de cada localização da célula de saída é calculada.",
	"@@Euclidean-Back-Direction_sourceraster_tag1@@": "O tipo de entrada pode ser um tipo inteiro ou de ponto flutuante.",
	"@@Cost-Path_costbacklinkraster_tag0@@": "O nome de uma camada raster de link do retorno de custo utilizado para determinar o caminho para retornar a uma origem via o caminho de menor custo.",
	"@@Cost-Path_costbacklinkraster_tag1@@": "Para cada célula no raster de link do retorno de custo, um valor identifica o vizinho que é a próxima célula no caminho de menor custo acumulado da célula para uma única célula de origem ou conjunto de células de origem.",
	"@@Cost-Path_costdistanceraster_tag0@@": "O nome de um raster de distância de custo a ser utilizado para determinar o caminho de menor custo a partir de localizações de destino para uma origem.",
	"@@Cost-Path_costdistanceraster_tag1@@": "O raster de distância de custo é normalmente criado com a função Distância de Custo, Alocação de Custo ou Link de Custo de Volta. A camada de raster de distância de custo armazena, para cada célula, a distância de custo mínima acumulativa sobre uma superfície de custo de cada célula para um conjunto de células de origem.",
	"@@Cost-Path_destinationfield_tag0@@": "O campo utilizado para obter valores das localizações de destino. Os dados de feição de entrada devem conter pelo menos um campo válido.",
	"@@Cost-Path_destinationraster_tag0@@": "Uma camada de conjunto de dados raster que identifica estas células das quais o caminho de menor custo é determinado para a origem de menor custo.",
	"@@Cost-Path_destinationraster_tag1@@": "A camada de raster de entrada consiste em células com valores válidos (zero é um valor válido) e as células restantes deve ser atribuídas para NoData.",
	"@@Cost-Path_forceflowdirectionconventionforbacklinkraster_tag0@@": "Força a função a tratar o raster de vínculo de retorno de entrada como um raster de direção do fluxo. Rasters de direção do fluxo podem ter números inteiros com valores de 0-255.",
	"@@Cost-Path_forceflowdirectionconventionforbacklinkraster_tag1@@": "Desmarcado--Se os valores do raster de vínculo de retorno especificados forem números inteiros no intervalo de 0-8, o conjunto de dados será tratado como um raster de vínculo de retorno de custo. Se os valores forem de 0-255, a entrada será tratada como um raster de direção do fluxo. Se os valores forem de 0-360 e ponto flutuante, a entrada será tratada como um raster de direção de volta.",
	"@@Cost-Path_forceflowdirectionconventionforbacklinkraster_tag2@@": "Marcado--O raster fornecido para o raster de vínculo de retorno será tratado como um raster de direção do fluxo. Utilize esta opção para que o raster de direção do fluxo tenha um valor máximo de 8 ou menos.",
	"@@Cost-Path_pathtype_tag0@@": "Uma palavra-chave que define a maneira pela qual os valores e zonas nos dados de destino de entrada serão interpretados nos cálculos do caminho de custo. Estas opções são as seguintes:",
	"@@Cost-Path_pathtype_tag1@@": "<strong>Cada Célula</strong>--Para cada célula com valores válidos nos dados de destino de entrada, um caminho de menor custo é determinado e salvo no raster de saída. Com esta opção, cada célula dos dados de destino de entrada é tratada separadamente e um caminho de menor custo é determinado para cada célula.",
	"@@Cost-Path_pathtype_tag2@@": "<strong>Cada Zona</strong>--Para cada zona nos dados de destino de entrada, um caminho de menor custo é determinado e salvo no raster de saída. Com esta opção, o caminho de menor custo para cada zona começa na célula com a menor ponderação de distância de custo na zona.",
	"@@Cost-Path_pathtype_tag3@@": "<strong>Único Melhor</strong>--Para todas as células dos dados de destino de entrada, o caminho de menor custo é derivado da célula com o mínimo dos caminhos de menor custo até as células de origem.",
	"@@Cell-Statistics_cellsizetype_tag0@@": "Escolha que tamanho de célula deve ser utilizado no raster de saída. Se todos os tamanhos de célula de entrada forem os mesmos, todas as opções renderão os mesmos resultados.",
	"@@Cell-Statistics_cellsizetype_tag1@@": "Primeiro De--Utiliza o primeiro tamanho de célula dos rasters de entrada.",
	"@@Cell-Statistics_cellsizetype_tag2@@": "Mínimo De--Utiliza o menor tamanho de célula de todos os rasters de entrada.",
	"@@Cell-Statistics_cellsizetype_tag3@@": "Máximo De--Utiliza o maior tamanho de célula de todos os rasters de entrada. Este é o padrão.",
	"@@Cell-Statistics_cellsizetype_tag4@@": "Média De--Utiliza o tamanho médio de célula de todos os rasters de entrada.",
	"@@Cell-Statistics_cellsizetype_tag5@@": "Último De--Utiliza o último tamanho de célula dos rasters de entrada.",
	"@@Cell-Statistics_extenttype_tag0@@": "Escolha qual extensão deve ser utilizada no raster de saída:",
	"@@Cell-Statistics_extenttype_tag1@@": "Primeiro De--Utiliza a extensão do primeiro raster de entrada para determinar a extensão de processamento.",
	"@@Cell-Statistics_extenttype_tag2@@": "Intersecção De--Utiliza a extensão dos pixels de sobreposição para determinar a extensão de processamento. Este é o padrão.",
	"@@Cell-Statistics_extenttype_tag3@@": "União De--Utiliza a extensão de todos os rasters para determinar a extensão de processamento.",
	"@@Cell-Statistics_extenttype_tag4@@": "Última De--Utiliza a extensão do último raster de entrada para determinar a extensão de processamento.",
	"@@Cell-Statistics_processasmultiband_tag0@@": "Determina como as bandas de rasters de entrada são processadas.",
	"@@Cell-Statistics_processasmultiband_tag1@@": "Desmarcado--Todas as entradas de múltiplas bandas serão processadas como bandas únicas. Este é o padrão.",
	"@@Cell-Statistics_processasmultiband_tag2@@": "Marcado--Todas as entradas de múltiplas bandas serão processadas como múltiplas bandas.",
	"@@Cell-Statistics_rasters_tag0@@": "A lista de rasters a partir da qual calcular estatísticas, em uma base de pixel por pixel.",
	"@@Cell-Statistics_percentileinterpolationtype_tag0@@": "<p>Especifica o método de interpolação a ser usado quando o valor do percentil especificado fica entre dois valores de célula de entrada.</p><ul><li><strong>Auto-detectar</strong>--Se os rasters de entrada forem do tipo de pixel inteiro, o método<strong>Mais próximo</strong>será utilizado. Se o raster de entrada for do tipo pixel de ponto flutuante, então o método <strong>Linear</strong>será usado. Este é o padrão.</li><li><strong>Mais próximo</strong>-O valor disponível mais próximo do percentil desejado é usado. Neste caso, o tipo de pixel de saída é o mesmo que o raster de valor de entrada.</li><li><strong>Linear</strong>-A média ponderada dos dois valores circundantes do percentil desejado é usada. Neste caso, o tipo de pixel de saída é ponto flutuante.</li></ul><p>Esta opção só estará disponível se o parâmetro de tipo<strong>Operação</strong> estiver definido para <strong>Mediano</strong>ou <strong>Percentil</strong>.</p>",
	"@@Cell-Statistics_percentilevalue_tag0@@": "<p>O percentil para calcular. O padrão é 90, para o 90º percentil.</p><p>Os valores podem variar de 0 a 100. O 0º percentil é essencialmente equivalente à estatística mínima e o 100º percentil é equivalente à máxima. Um valor de 50 produzirá essencialmente o mesmo resultado que a estatística média.</p><p>Esta opção está disponível apenas se o parâmetro<strong>Operação</strong>estiver definido para<strong>Percentil</strong>.</p>",
	"@@Optimal-Path-As-Raster_backdirectionrasterorflowdirectionraster_tag0@@": "O raster de direção de volta contém as direções calculadas em graus. A direção identifica a próxima célula ao longo do caminho favorável de volta até a origem de custo acumulativo mais próxima, evitando barreiras.",
	"@@Optimal-Path-As-Raster_backdirectionrasterorflowdirectionraster_tag1@@": "A faixa de valores é de 0 graus a 360 graus, com 0 reservado para as células de origem. Devido ao Leste (direita) ser 90 e os valores aumentarem no sentido horário (180 é Sul, 270 é Oeste e 360 é Norte).",
	"@@Optimal-Path-As-Raster_destinationfield_tag0@@": "O campo utilizado para obter valores das localizações de destino.",
	"@@Optimal-Path-As-Raster_destinationraster_tag0@@": "Uma camada de conjunto de dados raster que identifica estas células das quais o caminho favorável é determinado para a origem de menor custo. Esta entrada é exigida.",
	"@@Optimal-Path-As-Raster_destinationraster_tag1@@": "A camada de raster de entrada consiste em células com valores válidos (zero é um valor válido) e as células restantes deve ser atribuídas para NoData.",
	"@@Optimal-Path-As-Raster_distanceaccumulationraster_tag0@@": "O raster de acumulação de distância é utilizado para determinar o caminho favorável dos destinos até as origens. O raster de acumulação de distância é geralmente criado com a função <strong>Acumulação de Distância</strong>. Cada célula do raster de acumulação de distância representa a distância cumulativa de custo mínima sobre uma superfície de cada célula até um conjunto de células de origem.",
	"@@Optimal-Path-As-Raster_pathtype_tag0@@": "Especifica uma palavra-chave que define a maneira pela qual os valores e zonas nos dados de destino de entrada serão interpretados nos cálculos do caminho de custo.",
	"@@Optimal-Path-As-Raster_pathtype_tag1@@": "<strong>Cada Zona</strong>--Para cada zona nos dados de destino de entrada, um caminho de menor custo é determinado e salvo no raster de saída. Com esta opção, o caminho favorável para cada zona começa na célula com a menor distância ponderada de custo na zona.",
	"@@Optimal-Path-As-Raster_pathtype_tag2@@": "<strong>Único Melhor</strong>--Para todas as células dos dados de destino de entrada, o caminho favorável é derivado da célula com o mínimo dos caminhos de menor custo até as células de origem.",
	"@@Optimal-Path-As-Raster_pathtype_tag3@@": "<strong>Cada Célula</strong>--Para cada célula com valores válidos nos dados de destino de entrada, um caminho favorável é determinado. Com esta opção, cada célula dos dados de destino de entrada é tratada separadamente e um caminho favorável é determinado para cada célula.",
	"@@CCDC-Analysis_bandsfordetectingchange_tag0@@": "Os IDs de banda a serem utilizados na detecção de alterações. Se nenhum ID de banda for fornecido, todas as bandas do conjunto de dados raster de entrada serão utilizadas.",
	"@@CCDC-Analysis_bandsfordetectingchange_tag1@@": "Os valores do ID devem ser inteiros separados por espaços.",
	"@@CCDC-Analysis_bandsfortemporalmasking_tag0@@": "Os IDs de banda de banda verde e da banda SWIR, a serem utilizados para mascarar nuvens, sombras de nuvens e neve. Se nenhum ID de banda for fornecido, não ocorrerá o mascaramento.",
	"@@CCDC-Analysis_bandsfortemporalmasking_tag1@@": "Os valores do ID devem ser inteiros separados por espaços.",
	"@@CCDC-Analysis_bandsfortemporalmasking_tag2@@": "Este parâmetro especifica as bandas a serem utilizadas para mascarar nuvens, sombras de nuvens e neve. Pelo fato da sombra das nuvens e a neve aparecerem muito escuras na banda de infravermelho de ondas curtas (SWIR) e as nuvens e a neve serem muito brilhantes na banda verde, é recomendado que os índices de banda das bandas SWIR e verde sejam mascarados.",
	"@@CCDC-Analysis_chi-squaredthresholdfordetectchange_tag0@@": "O limite de probabilidade de alteração do qui-quadrado. Se uma observação tiver uma probabilidade de alteração calculada que estiver acima deste limite, ela será sinalizada como uma anomalia, que é um evento de alteração em potencial. O valor padrão é 0,99.",
	"@@CCDC-Analysis_minimumconsecutiveanomalyobservations_tag0@@": "O número mínimo de observações de anomalias consecutivas que devem ocorrer antes que um evento seja considerado uma alteração. Um pixel deve ser sinalizado como uma anomalia para o número especificado de intervalos de tempo consecutivos antes de ser considerado uma alteração real. O padrão é 6.",
	"@@CCDC-Analysis_raster_tag0@@": "A camada raster multidimensional de entrada.",
	"@@CCDC-Analysis_updatingfittingfrequency(inyears)_tag0@@": "A frequência na qual atualizar o modelo da série de tempo com novas observações. O padrão é atualizar o modelo a cada 1 ano.",
	"@@CCDC-Analysis_updatingfittingfrequency(inyears)_tag1@@": "Este parâmetro define com que frequência o modelo da série de tempo será atualizado com novas observações. Atualizar um modelo com frequência pode ser computacionalmente caro e o benefício pode ser mínimo. Por exemplo, se houver 365 partes ou observações claras por ano no raster multidimensional e a frequência de atualização for para todas as observações, o processamento será 365 vezes mais caro em termos de computação comparado à atualização uma vez por ano, mas a precisão pode não ser maior.",
	"@@Trend-To-RGB_modeltype_tag0@@": "O tipo de informação do modelo a ser convertido para RGB.",
	"@@Trend-To-RGB_modeltype_tag1@@": "Linear--As informações de tendência linear serão convertidas para RGB. Este é o padrão.",
	"@@Trend-To-RGB_modeltype_tag2@@": "Harmônico--As informações de tendência harmônica serão convertidas para RGB.",
	"@@Trend-To-RGB_raster_tag0@@": "O raster de tendência de entrada.",
	"@@LandTrendr-Analysis_bestmodelproportion_tag0@@": "<p>O valor de melhor proporção do modelo. Durante o processo de seleção do modelo, a ferramenta calculará o valor p para cada modelo e selecionará um modelo que tenha mais vértices, enquanto mantém o menor (mais significativo) valor p com base neste valor de proporção. Um valor de 1 significa que o modelo tem o valor p mais baixo, mas pode não ter um grande número de vértices. O padrao é 1.25.</p>",
	"@@LandTrendr-Analysis_maximumnumberofsegments_tag0@@": "<p>O número máximo de segmentos a serem ajustados à série de tempo para cada pixel. O padrão é 5.</p>",
	"@@LandTrendr-Analysis_minimumnumberofobservations_tag0@@": "<p>O número mínimo de observações válidas necessárias para realizar o ajuste. O número de anos no conjunto de dados multidimensional de entrada deve ser igual ou maior que este valor. O padrão é 6.</p>",
	"@@LandTrendr-Analysis_outputotherbands_tag0@@": "<p>Especifica se outras bandas estarão incluídas nos resultados.</p><ul><li>Marcado--Outras bandas serão incluídas nos resultados. As informações de segmentação e vértices da banda de segmentação inicial especificadas no parâmetro <strong>Banda de Processamento</strong> também serão ajustadas a bandas restantes nas imagens de múltiplas bandas. Os resultados do modelo incluirão primeiro a banda de segmentação, depois as bandas restantes.</li><li>Desmarcado--Outras bandas não serão incluídas. Este é o padrão.</li></ul>",
	"@@LandTrendr-Analysis_preventoneyearrecovery_tag0@@": "<p>Especifica se os segmentos que apresentam uma recuperação de um ano serão excluídos.</p><ul><li>Marcado--Os segmentos que apresentarem recuperação de um ano serão excluídos. Este é o padrão.</li><li>Desmarcado--Os segmentos que apresentam uma recuperação de um ano não serão excluídos.</li></ul>",
	"@@LandTrendr-Analysis_processingband_tag0@@": "<p>A banda a ser usada para segmentar as trajetórias de valor do pixel ao longo do tempo. Escolha a banda que melhor capturará as alterações na feição que você deseja observar.</p>",
	"@@LandTrendr-Analysis_p-valuethreshold_tag0@@": "<p>O limite do valor p para um modelo a ser selecionado. Após os vértices serem detectados no estágio inicial de ajuste do modelo, a ferramenta ajustará cada segmento e calculará o valor p para determinar a significância do modelo. Na próxima iteração, o modelo diminuirá o número de segmentos em um e recalculará o valor p. Isto continuará e, se o valor p for menor do que o valor especificado neste parâmetro, o modelo será selecionado e a ferramenta deixará de buscar um modelo melhor. Se nenhum modelo for selecionado, a ferramenta selecionará um modelo com um valor p menor que o <strong>valor p mais baixo x melhor valor de proporção do modelo</strong>. O padrão é 0.01.</p>",
	"@@LandTrendr-Analysis_raster_tag0@@": "<p>A camada raster multidimensional de entrada do Landsat.</p>",
	"@@LandTrendr-Analysis_recoveryhasincreasetrend_tag0@@": "<p>Especifica se a recuperação tem uma tendência crescente (positiva).</p><ul><li>Marcado--A recuperação tem uma tendência crescente. Este é o padrão.</li><li>Desmarcado--A recuperação tem uma tendência decrescente.</li></ul>",
	"@@LandTrendr-Analysis_recoverythreshold_tag0@@": "<p>O valor do limite de recuperação, em anos. Se um segmento tiver uma taxa de recuperação mais rápida do que<strong>1/limite de recuperação</strong>, o segmento será descartado e não incluído no modelo da série de tempo. O valor deve variar entre 0 e 1. O valor padrão é 0.25.</p>",
	"@@LandTrendr-Analysis_snappingdate_tag0@@": "<p>A data usada para selecionar uma divisão para cada ano no conjunto de dados multidimensional de entrada. A divisão com a data mais próxima da data de ajuste será selecionada. Este parâmetro é exigido se o conjunto de dados de entrada tiver dados subanuais.</p>",
	"@@LandTrendr-Analysis_spikethreshold_tag0@@": "<p>O limite a ser usado para atenuar picos ou anomalias na trajetória de valor do pixel. O valor deve variar entre 0 e 1, onde 1 significa sem atenuação. O padrão é 0.9.</p>",
	"@@LandTrendr-Analysis_vertexcountovershoot_tag0@@": "<p>O número de vértices adicionais além<strong>max_num_segments + 1</strong>que pode ser usado para ajustar o modelo durante o estágio inicial de identificação dos vértices. Mais tarde no processo de modelagem, o número de vértices adicionais será reduzido para <strong>max_num_segments + 1</strong>. O padrão é 2.</p>",
	"@@Merge-Rasters_rasters_tag0@@": "<p>Os conjuntos de dados raster de entrada ou conjuntos de dados raster multidimensionais para juntar.</p>",
	"@@Merge-Rasters_resolveoverlapmethod_tag0@@": "<p>Especifica o método a ser usado para resolver pixels sobrepostos nos conjuntos de dados combinados.</p><ul><li><strong>Primeiro</strong>—O valor do pixel nas áreas sobrepostas é o valor do primeiro raster na lista de rasters de entrada. Este é o padrão.</li><li><strong>Último</strong>--O valor do pixel nas áreas sobrepostas é o valor do último raster na lista de raster de entrada.</li><li><strong>Min</strong>--O valor do pixel nas áreas sobrepostas é o valor mínimo dos pixels sobrepostos.</li><li><strong>Máx</strong>--O valor do pixel nas áreas sobrepostas é o valor máximo dos pixels sobrepostos.</li><li><strong>Média</strong>--O valor do pixel nas áreas sobrepostas é a média dos pixels sobrepostos.</li><li><strong>Soma</strong>--O valor do pixel nas áreas sobrepostas é a soma total dos pixels sobrepostos.</li></ul>",
	"@@Generate-Trend_cycleunit_tag0@@": "<p>Especifica a unidade de tempo a ser usada para a duração de um ciclo harmônico.</p><ul><li><strong>Dias</strong>--A unidade para a duração do ciclo harmônico é dias.</li><li><strong>Anos</strong>—A unidade do comprimento do ciclo harmônico é de anos. Este é o padrão.</li></ul>",
	"@@Generate-Trend_dimensionname_tag0@@": "<p>A dimensão ao longo da qual uma tendência será extraída para a variável ou variáveis selecionadas na análise.</p>",
	"@@Generate-Trend_harmonicfrequency_tag0@@": "<p>O número de frequência para utilizar no ajuste da tendência. Este parâmetro especifica a frequência de ciclos em um ano. O valor padrão é 1, ou um ciclo harmônico por ano.</p><p>Este parâmetro é somente incluído na análise de tendência para uma regressão harmônica.</p>",
	"@@Generate-Trend_ignorenodata_tag0@@": "<p>Especifica se os valores de NoData são ignorados na análise.</p><ul><li>Marcado--A análise incluirá todos os pixels válidos ao longo de uma dimensão fornecida e ignorará quaisquer pixels de NoData. Este é o padrão.</li><li>Desmarcado--A análise resultará em NoData se houver quaisquer valores de NoData dos pixels ao longo da dimensão fornecida.</li></ul>",
	"@@Generate-Trend_lengthofcycle_tag0@@": "<p>O comprimento do modelo de variação periódico. A unidade é em dias, independentemente da unidade de tempo dos dados de entrada. Por exemplo, o verde da folha geralmente tem um forte ciclo de variação em um único ano, então a duração do ciclo é 365,25, mesmo se os dados de entrada forem o verde mensal. Os dados de temperatura por hora têm um forte ciclo de variação ao longo de um único dia, então a duração do ciclo é 1.</p><p>A duração padrão são 365.25 dias para dados que variam em um ciclo anual.</p>",
	"@@Generate-Trend_p-valueofslopecoefficient_tag0@@": "<p>Especifica se deve calcular a estatística do valor p para o coeficiente de inclinação da linha de tendência.</p><ul><li>Marcado--O valor p será calculado e exibido nos detalhes quando a função for concluída.</li><li>Desmarcado--O valor p não será calculado. Este é o padrão.</li></ul>",
	"@@Generate-Trend_polynomialorder_tag0@@": "<p>O número de ordem polinomial para utilizar no ajuste da tendência. Este parâmetro especifica a ordem de polinômio. O valor padrão é 2 ou polinômio de segunda ordem.</p><p>Este parâmetro é incluído somente na análise de tendência para uma regressão polinomial.</p>",
	"@@Generate-Trend_r-squared_tag0@@": "<p>Especifica se deve calcular a estatística de adequação de R-quadrada para a linha de ajuste de tendência.</p><ul><li>Marcado--A R-quadrada será calculada e exibida nos detalhes quando a função for concluída.</li><li>Desmarcado--A R-quadrada não será calculada. Este é o padrão.</li></ul>",
	"@@Generate-Trend_raster_tag0@@": "<p>O raster multidimensional de entrada.</p>",
	"@@Generate-Trend_rmse_tag0@@": "<p>Especifica se deve gerar o erro quadrático médio (RMSE) da linha de ajuste da tendência.</p><ul><li>Marcado--O RMSE será calculado e exibido nos detalhes quando a função for concluída. Este é o padrão.</li><li>Desmarcado—O RMSE não será calculado.</li></ul>",
	"@@Generate-Trend_seasonalperiod_tag0@@": "<p>Especifica a unidade de tempo a ser usada para a duração de um período sazonal ao realizar o teste de Sazonal-Kendall.</p><ul><li>Dias--A unidade para a duração do período sazonal é dias. Este é o padrão.</li><li>Meses--A unidade para a duração do período sazonal é meses.</li></ul>",
	"@@Generate-Trend_trendtype_tag0@@": "<p>Especifica o tipo de linha a ser usada para ajustar aos valores de pixel ao longo de uma dimensão.</p><ul><li><strong>Linear</strong>--Ajusta os valores de pixel para uma variável ao longo de uma linha de tendência linear. Este é o padrão.</li><li><strong>Harmônico</strong>--Ajusta os valores de pixel para uma variável ao longo de uma linha de tendência harmônica.</li><li><strong>Polinomial</strong>--Ajusta os valores de pixel para uma variável ao longo de uma linha de tendência polinomial de segunda ordem.</li><li><strong>Mann-Kendall</strong>--Os valores de pixel da variável serão avaliados usando o teste de tendência de Mann-Kendall.</li><li><strong>Kendall Sazonal</strong>--Os valores de pixel da variável serão avaliados usando o teste de tendência Sazonal-Kendall.</li></ul>",
	"@@Compute-Change_cellsizetype_tag0@@": "<p>Escolha que tamanho de célula deve ser utilizado no raster de saída. Se todos os tamanhos de células de entrada forem iguais, todas as opções produzirão os mesmos resultados.</p><ul><li>Primeiro De--Use o tamanho da primeira célula dos rasters de entrada.</li><li>Mín De--Use o menor tamanho de célula de todos os rasters de entrada.</li><li>Máx De--Use o maior tamanho de célula de todos os rasters de entrada. Este é o padrão.</li><li>Média De--Use o tamanho médio da célula de todos os rasters de entrada.</li><li>Último De--Use o tamanho da última célula dos rasters de entrada.</li></ul>",
	"@@Compute-Change_computechangemethod_tag0@@": "<p>O método usado para cálculo.</p><ul><li><strong>Diferença</strong>--A diferença matemática ou subtração, entre os valores de pixel nos rasters de entrada será calculada. Este é o padrão.</li><li><strong>Diferença relativa</strong>--A diferença nos valores de pixel, contabilizando as magnitudes dos valores sendo comparados, será calculada.</li><li><strong>Diferença Categórica</strong>--A diferença entre dois rasters categóricos ou temáticos será calculada, onde a saída contém transições de classe que ocorreram entre os dois rasters.</li><li><strong>Distância Euclidiana Espectral</strong>--A distância Euclidiana entre os valores de pixel de dois rasters multibanda será calculada.</li><li><strong>Diferença de Ângulo Espectral</strong>--O ângulo espectral entre os valores de pixel de dois rasters multibanda será calculado. A saída está em radianos.</li><li><strong>Banda com mais mudanças</strong>--A banda que representa a maior mudança em cada pixel entre dois rasters multibanda será calculada.</li></ul><p>Se <strong>Computar Método de Alteração</strong>for deinido para<strong>Diferença Categórica</strong>e uma das entradas não for categórica, será calculada uma diferença simples.</p>",
	"@@Compute-Change_definetransitioncolors_tag0@@": "<p>Especifique o método a ser usado para simbolizar os pixels que mudaram de classe.</p><ul><li><strong>Média De E Para Cores</strong>--A cor do pixel será a média da cor de sua classe original e a cor de sua classe final.</li><li><strong>Uso De Cores</strong>--A cor do pixel será a cor de sua classe original.</li><li><strong>Uso Para Cores</strong>--A cor do pixel será a cor de sua classe final.</li></ul>",
	"@@Compute-Change_extenttype_tag0@@": "<p>Escolha qual extensão deve ser usada no raster de saída:</p><ul><li>Primeiro de - Use a extensão do primeiro raster de entrada para determinar a extensão do processamento.</li><li>Interseção de - Use a extensão dos pixels sobrepostos para determinar a extensão do processamento. Este é o padrão.</li><li>União De--Use a extensão de todos os rasters para determinar a extensão de processamento.</li><li>Último De--Use a extensão do último raster de entrada para determinar a extensão de processamento.</li></ul>",
	"@@Compute-Change_filtermethod_tag0@@": "<p>Escolha o método de filtro para cálculo de alteração categórica.</p><ul><li><strong>Manter Todos</strong>--Todas as classes são incluídas na saída e nenhuma filtragem ocorrerá. Escolha esta opção para visualizar a alteração e persistência em um único conjunto de dados.</li><li><strong>Manter Somente Pixels Alterados</strong>--Somente as classes que mudaram de um tipo de classe para outro tipo de classe são incluídas na saída. Escolha esta opção se você estiver interessado somente na alteração.</li><li><strong>Manter Somente Pixels Não Alterados</strong>--Somente as classes que não foram alteradas são incluídas na saída. Escolha esta opção se você estiver interessado somente na persistência.</li></ul>",
	"@@Compute-Change_fromclassvalues_tag0@@": "<p>Os valores de classe da opção<strong>Do Raster</strong>a serem incluídos no cálculo, se comparar dois rasters categóricos. Esta é uma lista delimitada por espaços de valores inteiros correspondentes ao campo <strong>ClassValue</strong> em seu conjunto de dados raster de entrada.</p>",
	"@@Compute-Change_fromraster_tag0@@": "<p>O primeiro raster a ser usado no cálculo. Para avaliar a alteração da hora 1 (anterior) para a hora 2 (posterior), insira o raster de tempo 1 aqui.</p>",
	"@@Compute-Change_toclassvalues_tag0@@": "<p>Os valores de classe da opção <strong>Para Raster</strong> a serem incluídos no cálculo, se comparar dois rasters categóricos. Esta é uma lista delimitada por espaços de valores inteiros correspondentes ao campo <strong>ClassValue</strong> em seu conjunto de dados raster de entrada.</p>",
	"@@Compute-Change_toraster_tag0@@": "<p>O segundo raster a ser usado no cálculo. Para avaliar a alteração da hora 1 (anterior) para a hora 2 (posterior), insira o raster de tempo 2.</p>",
	"@@Compute-Change_usecolormethod_tag0@@": "<p>Especifique o método a ser usado para simbolizar os pixels que mudaram de classe.</p><ul><li><strong>Média De E Para Cores</strong>--A cor do pixel será a média da cor de sua classe original e a cor de sua classe final.</li><li><strong>Uso De Cores</strong>--A cor do pixel será a cor de sua classe original.</li><li><strong>Uso Para Cores</strong>--A cor do pixel será a cor de sua classe final.</li></ul>",
	"@@Compute-Change_fieldnameforclassnamesinfromraster_tag0@@": "<p>Um campo que armazena nomes de classes na entrada<strong>Do Raster</strong>. A ferramenta procura automaticamente pelo campo<strong>ClassName</strong> ou campo<strong>Class_Name</strong> para utilizar.</p><p>Use esta opção se a entrada não contiver esses nomes de campo padrão.</p>",
	"@@Compute-Change_fieldnameforclassnamesintoraster_tag0@@": "<p>Um campo que armazena nomes de classes na entrada<strong>Para Raster</strong>. A ferramenta irá procurar automaticamente pelo campo<strong>ClassName</strong> ou campo<strong>Class_Name</strong> para utilizar.</p><p>Use esta opção se a entrada não contiver esses nomes de campo padrão.</p>",
	"@@Statistics_numberofcolumns_tag0@@": "<p>O número de colunas do pixel a serem utilizadas em uma dimensão de vizinhança focal.</p>",
	"@@Statistics_numberofrows_tag0@@": "<p>O número de linhas do pixel a serem utilizadas em uma dimensão de vizinhança focal.</p>",
	"@@Statistics_onlyfillnodatapixels_tag0@@": "<p>Preenche os intervalos de NoData na saída. Isto é útil quando suas imagens podem ter linhas caídas.</p>",
	"@@Statistics_raster_tag0@@": "<p>O raster de entrada para executar estatísticas focais.</p>",
	"@@Statistics_statisticstype_tag0@@": "<p>A seguir estão os sete tipos de funções de estatística focais:</p><ul><li>Mínimo--Calcula o valor mínimo dos pixels na vizinhança.</li><li>Máximo--Calcula o valor máximo dos pixels na vizinhança.</li><li>Média--Calcula o valor médio dos pixels na vizinhança. Este é o padrão.</li><li>Desvio padrão - Calcula o valor do desvio padrão dos pixels na vizinhança.<li></li>Mediano - Calcula o valor médio dos pixels na vizinhança.</li><li>Maioridade - Calcula o valor majoritário, ou o valor que ocorre com mais frequência, dos pixels na vizinhança.</li><li>Minoridade - Calcula o valor minoritário, ou o valor que ocorre com menos frequência, dos pixels na vizinhança.</li></ul>",
	"@@Detect-Change-Using-Change-Analysis_changedirection_tag0@@": "<p>Especifica a direção da mudança a ser incluída na análise.</p><p>Este parâmetro está disponível apenas quando o raster da análise de mudança de entrada é a saída das ferramentas LandTrendr.</p><ul><li><strong>Todas as direções</strong>-Todas as direções de mudança são incluídas na saída. Este é o padrão.</li><li><strong>Aumentando</strong>-Somente a mudança na direção positiva ou crescente é incluída na saída.</li><li><strong>Diminuindo</strong>-Somente a mudança na direção negativa ou decrescente é incluída na saída.</li></ul>",
	"@@Detect-Change-Using-Change-Analysis_changetype_tag0@@": "<p>Especifica as informações de alteração a serem calculadas.</p><ul><li><strong>Hora da última alteração</strong>-cada pixel contém a data da alteração mais recente para aquele pixel na série de tempo. Este é o padrão.</li><li><strong>Hora da primeira mudança</strong>- Cada pixel contém a data da primeira alteração para aquele pixel na série de tempo.</li><li><strong>Hora da maior mudança</strong>-Cada pixel contém a data da alteração mais significativa para aquele pixel na série de tempo.</li><li><strong>Número de Alterações</strong>-Cada pixel contém o número total de vezes que o pixel mudou na série de tempo.</li><li><strong>Tempo de Alteração Mais Longa</strong>-Cada pixel contém a data de alteração no final do segmento de transição mais longo na série de tempo.</li><li><strong>Tempo da Menor Alteração</strong>-Cada pixel contém a data de alteração no final do segmento de transição mais curta na série de tempo.</li><li><strong>Tempo da Alteração mais Rápida</strong>-Cada pixel contém a data de alteração no final da transição que ocorreu mais rapidamente.</li><li><strong>Tempo de Alteração mais Lenta</strong>-Cada pixel contém a data de alteração no final da transição que ocorreu mais lentamente.</li></ul>",
	"@@Detect-Change-Using-Change-Analysis_filterbyduration_tag0@@": "<p>Especifica se deve ser filtrado pela duração da alteração.</p><p></p><ul><li>Verificado-Filtra os resultados por duração para que apenas as mudanças que duraram um determinado período de tempo sejam incluídas na saída.</li><li>Desmarcado-Não filtra os resultados por duração. Este é o padrão.</li></ul><p>Este parâmetro está disponível apenas quando o raster de análise de alteração de entrada é a saída das ferramentas LandTrendr.</p><p>Se este parâmetro for marcado, você deve definir os parâmetros<strong>Duração Mínima</strong>e<strong>Duração Máxima</strong> para filtragem.</p>",
	"@@Detect-Change-Using-Change-Analysis_filterbymagnitude_tag0@@": "<p>Especifica se deve ser filtrado por magnitude de alteração.</p><ul><li>Verificado-Filtra os resultados por magnitude para que apenas as alterações de uma determinada magnitude sejam incluídas na saída.</li><li>Desmarcado-Não filtra resultados por magnitude. Este é o padrão.</li></ul><p>Este parâmetro está disponível apenas quando o raster de análise de alteração de entrada é a saída das ferramentas LandTrendr.</p><p>Se este parâmetro for marcado, você deve definir os parâmetros<strong>Magnitude Mínima</strong>e<strong>Magnitude Máxima</strong>para filtragem.</p>",
	"@@Detect-Change-Using-Change-Analysis_filterbyyear_tag0@@": "<p>Especifica se a saída deve ser limitada em um intervalo de anos.</p><ul><li>Verificado-Filtra os resultados para que apenas as alterações ocorridas em um intervalo específico de anos sejam incluídas na saída.</li><li>Desmarcado-Não filtra os resultados por ano. Este é o padrão.</li></ul><p>Se este parâmetro estiver marcado, você deve definir os parâmetros<strong>Valor Mínimo</strong>e<strong>Valor Máximo</strong>para filtrar.</p>",
	"@@Detect-Change-Using-Change-Analysis_filterbystartvalue_tag0@@": "<p>Filtre os resultados por valor inicial para que apenas as alterações de um determinado valor inicial sejam incluídas na saída.</p>",
	"@@Detect-Change-Using-Change-Analysis_filterbyendvalue_tag0@@": "<p>Filtre os resultados por valor final para que apenas as alterações de um determinado valor final sejam incluídas na saída.</p>",
	"@@Detect-Change-Using-Change-Analysis_maximumnumberofchanges_tag0@@": "<p>O número máximo de alterações por pixel a ser calculado. O número inserido corresponde ao número de bandas no raster de saída. O padrão é 1, o que significa que apenas uma data de alteração é calculada e o raster de saída contém apenas uma banda.</p><p>Este parâmetro não está disponível quando o parâmetro<strong>Alterar Tipo</strong>estiver configurado para<strong>Número de Alterações</strong>.</p>",
	"@@Detect-Change-Using-Change-Analysis_raster_tag0@@": "<p>O raster de análise de alteração de entrada.</p>",
	"@@Detect-Change-Using-Change-Analysis_segmentdate_tag0@@": "<p>Especifica se deve ser extraída a data no início de um segmento de alteração ou no final.</p><p>Este parâmetro está disponível apenas quando o raster de análise de alteração de entrada é a saída das ferramentas LandTrendr.</p><ul><li><strong>Início do segmento</strong>--Extrai a data no início de um segmento de alteração. Este é o padrão.</li><li><strong>Final do segmento</strong>--Extraia a data no final de um segmento de alteração.</li></ul>",
	"@@Kernel-Density_areaunits_tag0@@": "<p>As unidades de área dos valores de densidade de saída.</p><ul><li>Unidades do Mapa Quadrado-Para o quadrado das unidades lineares da referência espacial de saída.</li><li>Milhas Quadradas--Para milhas (EUA).</li><li>Quilômetros Quadrados--Para quilômetros.</li><li>Acres--Para acres (EUA).</li><li>Hectares-Para hectares.</li><li>Metros Quadrados--Para metros.</li><li>Jardas Quadradas--Para jardas (EUA).</li><li>Pés Quadrados--Para pés (EUA).</li><li>Polegadas Quadradas--Para polegadas (EUA).</li><li>Centímetros Quadrados--Para centímetros.</li><li>Milímetros Quadrados--Para milímetros.</li></ul>",
	"@@Kernel-Density_cellsize_tag0@@": "<p>O tamanho de pixel do conjunto de dados raster de saída. Se o valor de<strong>Cellsize</strong>foi definido nos ambientes de geoprocessamento, é o padrão.</p>",
	"@@Kernel-Density_inputbarriers_tag0@@": "<p>O conjunto de dados que define as barreiras.</p><p>As barreiras podem ser uma camada de feição de polilinha ou de polígono.</p>",
	"@@Kernel-Density_inputfeatures_tag0@@": "<p>O ponto de entrada ou feições de linha para calcular a densidade.</p>",
	"@@Kernel-Density_method_tag0@@": "<p>Determina se deve usar um caminho mais curto em um método esferóide (geodésico) ou plano de terra (planar).</p><ul><li><strong>Planar-</strong>Usa distâncias planas entre as feições. Este é o padrão.</li><li><strong>Geodésico</strong>-Usa distâncias geodésicas entre feições. Este método leva em consideração a curvatura do esferóide e lida corretamente com dados próximos aos pólos e da linha de dados internacional.</li></ul><p>Recomenda-se que você use o método <strong>Geodésico</strong> com dados armazenados em um sistema de coordenadas que não é apropriado para medições de distância e qualquer análise que abrange um grande área geográfica. Por exemplo, Web Mercator ou qualquer sistema de coordenadas geográficas deve usar o método<strong>Geodésico</strong>.</p>",
	"@@Kernel-Density_outputcellvalues_tag0@@": "<p>Determina o que os valores no raster de saída representam.</p><ul><li><strong>Densidades</strong>--Os valores de saída representam o valor de densidade. Este é o padrão.</li><li><strong>Contagens esperadas</strong>-Os valores de saída representam a quantidade prevista do fenômeno dentro de cada pixel. Já que o valor do pixel está vinculado ao valor especificado de <strong>Cellsize</strong>, o raster resultante não pode ser reamostrado para um tamanho de pixel diferente e ainda assim representar a quantidade do fenômeno.</li></ul>",
	"@@Kernel-Density_populationfield_tag0@@": "<p>Valores de população denotando campos de cada feição. O valor<strong>Campo de População</strong>é a contagem ou quantidade para ser espalhado através da paisagem para criar uma superfície contínua. Valores no<strong>Campo de População</strong>pode ser inteiro ou ponto flutuante.</p><p>As opções e comportamentos padrão para o campo estão listados abaixo em ordem de prioridade.</p><ul><li>Utilize<strong>Nenhum</strong>se nenhum item ou valor especial for utilizado e cada feição será contada uma vez.</li><li>Utilize<strong>Forma</strong>Se as feições de entrada contiver Z.</li><li>Caso contrário, o campo padrão é<strong>POPULATION</strong>, ou qualquer derivado aceitável de população:<ul><li><strong>POPULATIONxxxx</strong>onde<strong>xxxx</strong>pode ser qualquer caractere válido, como<strong>POPULATION6</strong>,<strong>POPULATION1974</strong>, ou<strong>POPULATIONROADTYPE</strong>.</li><li><strong>POP</strong>.</li><li><strong>POPxxxx</strong>.</li><li>Se nenhum acima se aplicar, o padrão é<strong>Nenhum</strong>.</li></ul></li></ul>",
	"@@Kernel-Density_searchradius_tag0@@": "<p>O raio de pesquisa para calcular densidade. As unidades são baseadas na unidade linear da projeção.</p><p>Por exemplo, se as unidades estiverem em metros-para incluir todos as feições em uma vizinhança de uma milha-defina o raio de pesquisa igual a 1609,344 (já que 1 milha é 1609,344 metros).</p>",
	"@@Zonal-Statistics_ignorenodataincalculations_tag0@@": "<p>Denota se valores<strong>NoData</strong>no<strong>Raster de Valor</strong>influenciará os resultados da zona que eles caem dentro.</p><ul><li><strong>Sim</strong>--Dentro de qualquer zona particular, somente pixels que têm um valor no<strong>Raster de Valor</strong>será utilizado na determinação do valor de saída para esta zona.Pixels <strong>NoData</strong>no<strong>Raster de Valor</strong>serão ignorados no cálculo estatístico. Este é o padrão.</li><li><strong>Não</strong>--Dentro de qualquer zona particular, se quaisquer pixels<strong>NoData</strong>existir no<strong>Raster de Valor</strong>, considera-se que não há informação suficiente para realizar cálculos estatísticos para todos os pixels daquela zona; portanto, toda a zona receberá valor<strong>NoData</strong>no raster de saída.</li></ul>",
	"@@Zonal-Statistics_percentileinterpolationtype_tag0@@": "<p>Determina o método de interpolação de percentil a ser usado quando o número de valores do raster de entrada a ser calculado for uniforme.</p><ul><li><strong>Auto-detectar</strong>--Se o raster de valor de entrada for do tipo pixel inteiro, o método<strong>Mais próximo</strong>é utilizado. Se o raster de valor de entrada for do tipo pixel de ponto flutuante, então o método <strong>Linear</strong>será usado. Este é o padrão.</li><li><strong>Mais próximo</strong>-O valor disponível mais próximo do percentil desejado é usado. Neste caso, o tipo de pixel de saída é o mesmo que o raster de valor de entrada.</li><li><strong>Linear</strong>-A média ponderada dos dois valores circundantes do percentil desejado é usada. Neste caso, o tipo de pixel de saída é o ponto flutuante.</li></ul>",
	"@@Zonal-Statistics_percentilevalue_tag0@@": "<p>O percentil para calcular. O padrão é 90, para o 90º percentil.</p><p>Os valores podem variar de 0 a 100. O 0º percentil é essencialmente equivalente à estatística Mínima e o 100º percentil é equivalente à Máxima. Um valor de 50 produzirá essencialmente o mesmo resultado que a estatística Mediana.</p>",
	"@@Zonal-Statistics_processasmultidimensional_tag0@@": "<p>Determina como a raster de valor multidimensional de entrada é processado.</p><ul><li><strong>Divisão Atual</strong>-As estatísticas serão calculadas a partir da divisão atual de um conjunto de dados multidimensional. Este é o padrão.</li><li><strong>Todas as divisões</strong>-As estatísticas serão calculadas para todas as dimensões (como tempo ou profundidade) de um conjunto de dados multidimensional.</li></ul>",
	"@@Zonal-Statistics_statisticstype_tag0@@": "<p>O tipo estatístico a ser calculado.</p><ul><li><strong>Média</strong>--Calcula a média de todos os pixels no<strong>Raster de Valor</strong>que pertence a mesma zona que o pixel de saída.</li><li><strong>Maioria</strong>--Determina o valor que ocorre com mais frequência de todos os pixels no<strong>Raster de Valor</strong>que pertence a mesma zona que o pixel de saída.</li><li><strong>Máximo</strong>--Determina o maior valor de todos os pixels no<strong>Raster de Valor</strong>que pertence a mesma zona que o pixel de saída.</li><li><strong>Mediano</strong>--Determina o valor mediano de todos os pixeis no<strong>Raster de Valor</strong>que pertence a mesma zona que o pixel de saída.</li><li><strong>Mínimo</strong>--Determina o menor valor de todos os pixels no<strong>Raster de Valor</strong>que pertence a mesma zona que o pixel de saída.</li><li><strong>Minoria</strong>--Determina o valor que ocorre com menos frequência de todos os pixels no<strong>Raster de Valor</strong>que pertence a mesma zona que o pixel de saída.</li><li><strong>Percentil</strong>--Calcula um percentil de todos os pixels no<strong>Raster de Valor</strong>que pertence a mesma zona que o pixel de saída. O 90º percentil é calculado por padrão. Você pode determinar qual percentil calcular com o parâmetro<strong>Valor Percentil</strong>.</li><li><strong>Intervalo</strong>--Calcula a diferença entre a maior e menor valor de todos os pixels no<strong>Raster de Valor</strong>que pertence a mesma zona que o pixel de saída.</li><li><strong>Desvio Padrão</strong>--Calcula o desvio padrão de todos os pixels no<strong>Raster de Valor</strong>que pertence a mesma zona que o pixel de saída.</li><li><strong>Soma</strong>--Calcula o valor do total de todos os pixels no<strong>Raster de Valor</strong>que pertence a mesma zona que o pixel de saída.</li><li><strong>Variedade</strong>--Calcula o número de valores únicos para todos os pixels no<strong>Raster de Valor</strong>que pertence a mesma zona que o pixel de saída.</li></ul>",
	"@@Zonal-Statistics_valueraster_tag0@@": "<p>Raster que contém os valores ao calcular uma estatística.</p>",
	"@@Zonal-Statistics_zonefield_tag0@@": "<p>O campo que mantém os valores que definem cada zona. Pode ser um campo de string ou inteiro do raster de zona.</p>",
	"@@Zonal-Statistics_zoneraster_tag0@@": "<p>O conjunto de dados que define as zonas. As zonas podem ser definidas por um raster inteiro.</p>",
	"@@Zonal-Statistics_calculatecircularstatistics_tag0@@": "<p>Especifica como o tipo de estatística será calculado.</p><ul><li><strong>Aritmética</strong>--Calcula estatísticas aritméticas. Este é o padrão.</li><li><strong>Circular</strong>--Calcula estatísticas circulares apropriadas para quantidades cíclicas, como direção da bússola em graus, dias e partes fracionárias de números reais.</li></ul>",
	"@@Zonal-Statistics_circularwrapvalue_tag0@@": "<p>O valor mais alto possível (limite superior) nos dados cíclicos. É um número positivo, com um valor padrão de 360. Este valor também representa a mesma quantidade que o menor valor possível (limite inferior).</p><p>Este parâmetro é aplicável apenas quando as estatísticas circulares são calculadas.</p>",
	"@@Boundary-Clean-function_inputraster_tag0@@": "<p>O raster de entrada para o qual o limite entre as zonas será suavizado.</p><p>Deve ser do tipo inteiro.</p>",
	"@@Boundary-Clean-function_runexpansionandshrinkingtwice_tag0@@": "<p>Especifica o número de vezes que o processo de suavização ocorrerá, duas ou uma vez.</p><ul><li><p><strong>Verificado</strong>-Executa uma operação de expansão e redução duas vezes. Pela primeira vez, a operação é executada de acordo com o tipo de classificação especificado. Então, uma expansão adicional e operação de redução é executada com a prioridade invertida. Este é o padrão.</p></li><li><p><strong>Não verificado</strong>-Executa a operação de expansão e redução uma vez, de acordo com o tipo de classificação.</p></li></ul>",
	"@@Boundary-Clean-function_sorttype_tag0@@": "<p>Especifica o tipo de classificação a ser usado no processo de suavização. A classificação determina a prioridade pela qual as células podem se expandir em seus vizinhos.<p></p>A classificação pode ser feita com base no valor da zona ou área da zona.</p><ul><li><p><strong>Não classificar-</strong>As zonas não são classificadas por tamanho. Zonas com valores maiores têm uma prioridade mais alta para expandir em zonas com valores menores na saída suavizada. Este é o padrão.</p></li><li><p><strong>Decrescente</strong>-Classifica as zonas em ordem decrescente por tamanho. Zonas com total de áreas maiores têm uma prioridade mais alta para expandir em zonas com total de áreas menores. Esta opção tende a eliminar ou reduzir a prevalência de células de zonas menores na saída suavizada.</p></li><li><p><strong>Crescente</strong>- Classifica as zonas em ordem crescente por tamanho. Zonas com total de áreas menores têm uma prioridade mais alta para expandir em zonas com total de áreas maiores. Esta opção tende a preservar ou aumentar a prevalência de células de zonas menores na saída suavizada.</p></li></ul>",
	"@@Aggregate-Multidimensional_dimension_tag0@@": "<p>A dimensão de agregação. Esta é a dimensão ao longo das variáveis que serão agregadas.</p>",
	"@@Aggregate-Multidimensional_dimensiondefinition_tag0@@": "<p>Especifica o método a ser usado para filtrar os dados multidimensionais de entrada antes de executar a agregação.</p><ul><li><strong>Todos</strong>--A faixa completa para cada dimensão será usada. Este é o padrão.</li><li><strong>Por Valores</strong>--A dimensão será dividida usando um valor de dimensão ou lista de valores.</li><li><strong>Por Intervalos</strong>--A dimensão será divivida usando um intervalo ou uma lista de intervalos.</li><li><strong>Por Iteração</strong>--A dimensão será dividida em um tamanho de intervalo especificado.</li></ul>",
	"@@Aggregate-Multidimensional_iterationdefinitionparameters_tag0@@": "<p>Os parâmetros de Definição da Iteração permitem definir os valores de dimensão a serem usados para filtrar os dados multidimensionais de entrada para análise quando o parâmetro <strong>Definição da Dimensão</strong>estiver definido para<strong>Por Iteração</strong>.</p><ul><li><strong>Dimensão</strong>--A dimensão a usar para filtrar.</li><li><strong>Iniciar da primeira iteração</strong>--O início do primeiro intervalo. Este intervalo é usado para iterar no conjunto de dados.</li><li><strong>Finalizar da primeira iteração</strong>--O final do primeiro intervalo. Este intervalo é usado para iterar no conjunto de dados.</li><li><strong>Etapa</strong>--A frequência com a qual os dados serão divididos.</li><li><strong>Unidade</strong>--A unidade de iteração.</li></ul>",
	"@@Aggregate-Multidimensional_keywordinterval_tag0@@": "<p>Especifica o intervalo da palavra-chave que será usada ao agregar ao longo da dimensão.</p><p>Este parâmetro é exigido quando o parâmetro <strong>Tipo</strong>é definido para<strong>Palavra-Chave do Intervalo</strong>.</p><ul><li><strong>Por Hora</strong>--Os valores de dados são agregados em etapas de hora em hora e o resultado inclui cada hora na série de tempo. Este e o padrão.</li><li><strong>Diariamente</strong>--Os valores de dados são agregados em etapas de tempo diárias e o resultado inclui todos os dias da série de tempo.</li><li><strong>Semanalmente</strong>--Os valores de dados são agregados em intervalos de tempo semanais e o resultado inclui todas as semanas na série de tempo.</li><li><strong>Cada Dez</strong>--Os valores de dados são agregados em 3 períodos de 10 dias cada. O último período pode conter mais ou menos do que 10 dias. A saída inclui 3 divisões para cada mês.</li><li><strong>Cada Cinco</strong>--Os valores de dados são agregados em 6 períodos de 5 dias cada. O último período pode conter mais ou menos do que 5 dias. A saída inclui 6 divisões para cada mês.</li><li><strong>Mensalmente</strong>--Os valores de dados são agregados em intervalos de tempo mensais e o resultado inclui todos os meses da série de tempo.</li><li><strong>Trimestralmente</strong>--Os valores de dados são agregados em etapas trimestrais, e o resultado inclui todos os trimestres da série de tempo.</li><li><strong>Anualmente</strong>--Os valores de dados são agregados em intervalos de tempo anuais, e o resultado inclui todos os anos na série de tempo.</li><li><strong>Diariamente Recorrente</strong>--Os valores de dados são agregados em etapas de tempo diárias e o resultado inclui um valor agregado por dia Juliano. A saída inclui, no máximo, 366 divisões de tempo diárias.</li><li><strong>Semanalmente Recorrente</strong>--Os valores de dados são agregados em intervalos de tempo semanais e o resultado inclui um valor agregado por semana. A saída inclui, no máximo, 53 divisões de tempo semanais.</li><li><strong>Mensalmente Recorrente</strong>--Os valores de dados são agregados em intervalos de tempo mensais e o resultado inclui um valor agregado por mês. A saída inclui, no máximo, 12 divisões de tempo mensais.</li><li><strong>Trimestralmente Recorrente</strong>--Os valores de dados são agregados em etapas trimestrais e os resultados incluem um valor agregado por trimestre. A saída inclui, no máximo, 4 divisões de tempo trimestrais.</li></ul>",
	"@@Aggregate-Multidimensional_operation_tag0@@": "<p>Especifica o método matemático que será usado para combinar as divisões agregadas em um intervalo.</p><ul><li><strong>Maioria</strong>--O valor de pixel que ocorreu com mais frequência será calculado em todas as divisões no intervalo.</li><li><strong>Máximo</strong>--O valor máximo de um pixel será calculado em todas as divisões do intervalo.</li><li><strong>Média</strong>--A média dos valores de um pixel será calculada em todas as divisões do intervalo. Este é o padrão.</li><li><strong>Mediana</strong>--O valor mediano de um pixel será calculado em todas as divisões do intervalo.</li><li><strong>Mínimo</strong>--O valor mínimo de um pixel será calculado em todas as divisões do intervalo.</li><li><strong>Minoria</strong>--O valor de pixel que ocorreu com menos frequência será calculado em todas as divisões no intervalo.</li><li><strong>Range</strong>--O intervalo de valores para um pixel será calculado em todas as divisões do intervalo.</li><li><strong>Desvio Padrão</strong>--O desvio padrão dos valores de um pixel será calculado em todas as divisões do intervalo.</li><li><strong>Soma</strong>--A soma dos valores de um pixel será calculada em todas as divisões do intervalo.</li><li><strong>Variação</strong>--O número dos valores de pixel exclusivos será calculado em todas as divisões no intervalo.</li></ul><p>Todas as opções também têm um equivalente com a opção Ignorar NoData. Eles realizarão a operação matemática em todos os pixels válidos ao longo da dimensão e ignorarão quaisquer pixels de NoData.</p>",
	"@@Aggregate-Multidimensional_ranges_tag0@@": "<p>As faixas de intervalo especificadas em uma tabela serão utilizadas para agregar grupos de valores. Os valores mínimo e máximo especificam as faixas a serem incluídas.</p><p>Este parâmetro é exigido quando o parâmetro<strong>Tipo</strong> é configurado para <strong>Faixas de Intervalo</strong>.</p>",
	"@@Aggregate-Multidimensional_raster_tag0@@": "<p>O raster multidimensional de entrada.</p>",
	"@@Aggregate-Multidimensional_type_tag0@@": "<p>Especifica o intervalo de dimensão no qual os dados serão agregados</p><ul><li><strong>Todos</strong>--Os dados da variável serão agregados em todas as divisões. Este é o padrão.</li><li><strong>Palavra-Chave do Intervalo</strong>--Os dados da variável serão agregados usando um intervalo comumente conhecido.</li><li><strong>Valor de Intervalo</strong>--Os dados da variável serão agregados usando um intervalo especificado pelo usuário e unidade.</li><li><strong>Faixas de Intervalos</strong>--Os dados de variável serão agregados entre pares especificados de valores ou datas.</li></ul>",
	"@@Aggregate-Multidimensional_valueinterval_tag0@@": "<p>O tamanho do intervalo usado para a agregação.</p><p>Este parâmetro é exigido quando o prâmetro<strong>Tipo</strong>é definido para<strong>Valor de Intervalo</strong>.</p>",
	"@@Aggregate-Multidimensional_values_tag0@@": "<p>Os valores de dimensão a usar para filtrar dados multidimensionais de entrada para análise. Este parâmetro é exigido quando o parâmetro<strong>Definição da Dimensão</strong>é definido para<strong>Por Valores</strong>.</p>",
	"@@Aggregate-Multidimensional_variables_tag0@@": "<p>A variável ou variáveis que serão agregadas ao longo da dimensão fornecida.</p>",
	"@@Predict-Using-Regression_inputdefinitionfile_tag0@@": "<p>O arquivo da definição de regressão da Esri de entrada (<strong>.ecd</strong>) que contém as estatísticas e informações para o conjunto de dados específico, modelo de regressão e atributos escolhidos.</p>",
	"@@Predict-Using-Regression_rasters_tag0@@": "<p>O conjunto de dados raster ou conjuntos de dados que representam as variáveis preditoras. Pode ser um raster de banda única, raster de múltiplas bandas, raster multidimensional, conjunto de dados de mosaico ou uma coleção de raster.</p>",
	"@@Cell-Statistics_operation_tag0@@": "<p>O tipo de cálculo estatístico que você deseja realizar.</p><p>As estatísticas disponíveis são<strong>Maioria</strong>,<strong>Máximo</strong>,<strong>Média</strong>,<strong>Mediana</strong>,<strong>Mínimo</strong>,<strong>Minoria</strong>,<strong>Percentil</strong>,<strong>Intervalo</strong>,<strong>Desvio Padrão</strong>,<strong>Soma</strong>, e<strong>Variedade</strong>.</p><p>O padrão é<strong>Média</strong>.</p>",
	"@@Colormap-To-RGB_randomlyassigncolortounmappedpixels_tag0@@": "<p>As cores são atribuídas aleatoriamente a pixels que não estão incluídos no mapa de cores.</p><ul><li>Desmarcado--Os pixels não mapeados não recebem uma cor. Este é o padrão.</li><li>Marcado—Pixels não mapeados tem uma cor atribuída.</li></ul>",
	"@@Pansharpen_sensor_tag0@@": "<p>Quando o algorítimo Gram-Schmidt é escolhido, você também pode especificar o sensor que coletou a entrada do raster de múltiplas bandas. A escolha do tipo de sensor configurará pesos de banda apropriados.</p>",
	"@@Dimensional-Moving-Statistics_backwardwindow_tag0@@": "<p>O valor de quantas divisões antes ou acima devem ser incluídas na janela definida. O valor deve ser um número inteiro positivo de 1 a 100. O valor padrão é 1.</p><p>A unidade deste parâmetro é divisão.</p>",
	"@@Dimensional-Moving-Statistics_circularwrapvalue_tag0@@": "<p>O valor que será usado para arredondar um valor linear para o intervalo de uma determinada média circular.</p><p>Seu valor deve ser positivo. O valor padrão é 360 graus.</p>",
	"@@Dimensional-Moving-Statistics_dimension_tag0@@": "<p>O nome da dimensão ao longo da qual a janela se moverá.</p><p>O valor padrão é a primeira dimensão diferente de x,y encontrada no raster multidimensional de entrada.</p>",
	"@@Dimensional-Moving-Statistics_forwardwindow_tag0@@": "<p>O valor de quantas divisões depois ou abaixo devem ser incluídas na janela definida. O valor deve ser um número inteiro positivo de 1 a 100. O valor padrão é 1.</p><p>A unidade deste parâmetro é divisão.</p>",
	"@@Dimensional-Moving-Statistics_inputraster_tag0@@": "<p>O raster de entrada só pode ser um raster multidimensional no Cloud Raster Format (arquivo<strong>.crf</strong>).</p>",
	"@@Dimensional-Moving-Statistics_nodatahandling_tag0@@": "<p>Especifica como os valores NoData serão tratados pelo cálculo estatístico.</p><ul><li><strong>Dados</strong>--Os valores NoData na entrada de valor serão ignorados nos resultados da janela definida em que se enquadram. Este é o padrão.</li><li><strong>NoData</strong>--Os valores de saída serão NoData se houver algum valor NoData na entrada dentro da janela definida.</li><li><strong>Preencher NoData</strong>--Os valores das células NoData serão substituídos usando a estatística selecionada dentro da janela definida.</li></ul>",
	"@@Dimensional-Moving-Statistics_percentileinterpolationtype_tag0@@": "<p>Especifica o método de interpolação que será usado quando o valor do percentil estiver entre dois valores de célula.</p><ul><li><strong>Auto-detectar</strong>--Se o raster de entrada for do tipo de pixel inteiro, o método <strong>Mais Próximo</strong> será usado. Se o raster de entrada for do tipo pixel flutuante, será usado o método<strong>Linear</strong>. Este é o padrão.</li><li><strong>Mais próximo</strong>--Será usado o valor disponível mais próximo do percentil. Neste caso, o tipo de pixel de saída será o mesmo do raster de valor de entrada.</li><li><strong>Linear</strong>--A média ponderada dos dois valores circundantes do percentil será usada. Nesse caso, o tipo de pixel de saída será o ponto flutuante.</li></ul>",
	"@@Dimensional-Moving-Statistics_percentilevalue_tag0@@": "<p>O percentil que será calculado quando<strong>Percentil</strong>for selecionado como o tipo de estatística. O padrão é 90, para o 90º percentil.</p><p>Os valores podem variar de 0 a 100. O percentil 0 é essencialmente equivalente à estatística mínima, e o percentil 100 é equivalente à estatística máxima, com exceção de que o resultado será de ponto flutuante. Um valor de 50 produzirá o mesmo resultado que a estatística mediana.</p>",
	"@@Dimensional-Moving-Statistics_statisticstype_tag0@@": "<p>Especifica o tipo de estatística a ser calculada.</p><p></p><ul><li><strong>Média</strong>--A média (valor médio) das células na janela definida será calculada. Este é o padrão.</li><li><strong>Média Circular</strong>--A média circular das células na janela definida será calculada. Quando este tipo de estatística for selecionado, o parâmetro<strong>Valor de Quebra Circular</strong>torna-se disponível.</li><li><strong>Maioria</strong>--A maioria (valor que ocorre com mais frequência) das células na janela definida será identificada.</li><li><strong>Máximo</strong>--O máximo (o maior valor) das células na janela definida será identificado.</li><li><strong>Média</strong>--A mediana das células da vizinhança será identificada.</li><li><strong>Mínimo</strong>--O mínimo (menor valor) das células na vizinhança será identificado.</li><li><strong>Percentil</strong>--Será calculado um percentil das células da vizinhança. Quando este tipo de estatística é selecionado, os parâmetros<strong>Valor Percentil</strong>and<strong>Tipo de Interpolação de Percentil</strong> ficam disponíveis. Use esses novos parâmetros para designar o percentil para calcular e escolher o tipo de interpolação a ser usado, respectivamente.</li></ul>",
	"@@Interpolate-Raster-By-Dimension_dimension_tag0@@": "<p>A dimensão a ser usada para interpolação.</p><p>Este parâmetro é necessário quando o parâmetro<strong>Definição de dimensão</strong>for definido para<strong>Por Intervalo</strong>.</p>",
	"@@Interpolate-Raster-By-Dimension_dimensiondefinition_tag0@@": "<p>Especifica o método que será usado para filtrar os dados multidimensionais de entrada antes de realizar a interpolação.</p><ul><li><strong>Por Valores</strong>--A dimensão será dividida usando um valor de dimensão ou uma lista de valores.</li><li><strong>Por Intervalo</strong>--A dimensão será dividida usando um intervalo ou uma lista de intervalos.</li><li><strong>Por Raster de Destino</strong>--A dimensão será dividida usando um raster multidimensional de destino específico.</li></ul>",
	"@@Interpolate-Raster-By-Dimension_endofinterval_tag0@@": "<p>O fim do intervalo, que é usado para iterar pelo conjunto de dados.</p><p>Este parâmetro é necessário quando o parâmetro<strong>Definição de Dimensão</strong>for definido para<strong>Por Intervalo</strong>.</p>",
	"@@Interpolate-Raster-By-Dimension_ignorenodata_tag0@@": "<p>Especifica se os valores NoData serão ignorados na análise.</p><ul><li>Desmarcado--A análise resultará em NoData se houver valores NoData em divisões adjacentes. Este é o padrão.</li><li>Marcado--A análise usará apenas divisões com pixels válidos e ignorará divisões NoData.</li></ul>",
	"@@Interpolate-Raster-By-Dimension_interpolationmethod_tag0@@": "<p>Especifica o método que será usado para interpolar o raster.</p><ul><li><strong>Linear</strong>--A saída será interpolada linearmente usando as divisões adjacentes. Este é o padrão.</li><li><strong>Vizinho mais próximo</strong>--A saída usará a divisão adjacente mais próxima.</li></ul>",
	"@@Interpolate-Raster-By-Dimension_raster_tag0@@": "<p>O raster multidimensional de entrada.</p>",
	"@@Interpolate-Raster-By-Dimension_startofinterval_tag0@@": "<p>O início do intervalo, que é usado para iterar pelo conjunto de dados.</p><p>Este parâmetro é necessário quando o parâmetro<strong>Definição de Dimensão</strong>for definido para<strong>Por Intervalo</strong>.</p>",
	"@@Interpolate-Raster-By-Dimension_step_tag0@@": "<p>A frequência com que os dados serão interpolados.</p><p>Este parâmetro é necessário quando o parâmetro<strong>Definição de Dimensão</strong>for definido para<strong>Por Intervalo</strong>.</p>",
	"@@Interpolate-Raster-By-Dimension_targetraster_tag0@@": "<p>O raster de destino especificado pela definição de dimensão.</p><p>Este parâmetro é necessário quando o parâmetro<strong>Definição de Dimensão</strong>for definido para<strong>Por Raster de Destino</strong>.</p>",
	"@@Interpolate-Raster-By-Dimension_unit_tag0@@": "<p>A unidade de intervalo.</p><p>Este parâmetro é necessário quando o parâmetro<strong>Definição de Dimensão</strong>for definido para<strong>Por Intervalo</strong>.</p>",
	"@@Interpolate-Raster-By-Dimension_values_tag0@@": "<p>Os valores dimensionais a serem usados ​​para filtrar os dados multidimensionais de entrada para análise.</p><p>Este parâmetro é necessário quando o parâmetro<strong>Definição de Dimensão</strong>for definido para<strong>Por Valores</strong>.</p>",
	"@@Interpolate-Raster-By-Dimension_variables_tag0@@": "<p>A variável ou variáveis ​​que serão interpoladas pela definição da dimensão.</p>",
	"@@Terrain-Flatten_calibrationtype_tag0@@": "<p>Especifica se a saída será terreno plano usando<strong>Sigma zero</strong>or<strong>Gamma zero</strong>.</p><ul><li><strong>Gamma zero</strong>--A retrodispersão nula beta será normalizada usando a área unitária de um plano tangente localmente ao DEM, comumente conhecido como ângulo de incidência local. Este é o padrão.</li><li><strong>Sigma zero</strong>--A retrodispersão beta zero será normalizada usando um DEM para calcular a área.</li></ul>",
	"@@Terrain-Flatten_dem_tag0@@": "<p>O DEM de entrada.</p><p>O DEM é usado para estimar a área iluminada local.</p>",
	"@@Terrain-Flatten_geoid_tag0@@": "<p>Especifica se o sistema de referência vertical do DEM de entrada será transformado em altura elipsoidal. A maioria dos conjuntos de dados de elevação são referenciados à altura ortométrica do nível do mar, portanto, é necessária uma correção nesses casos para converter em altura elipsoidal.</p><ul><li>Marcado--Uma correção do geóide será feita para converter a altura ortométrica em altura elipsoidal (com base no geóide EGM96). Este é o padrão.</li><li>Desmarcado--Nenhuma correção de geóide será feita. Use esta opção somente se o DEM for expresso em altura elipsoidal.</li></ul>",
	"@@Terrain-Flatten_raster_tag0@@": "<p>Os dados do radar de entrada.</p><p>Este raster deve primeiro ser calibrado radiometricamente para beta zero.</p>",
	"@@Create-Color-Composite_blueexpression_tag0@@": "<p>O cálculo atribuído à terceira banda.</p><p>Um nome de banda, ID de banda ou uma expressão algébrica usando as bandas.</p><p>Os operadores suportados são unários: mais (+), menos (-), vezes (*) e divisão (/).</p>",
	"@@Create-Color-Composite_greenexpression_tag0@@": "<p>O cálculo atribuído à segunda banda.</p><p>Um nome de banda, ID de banda ou uma expressão algébrica usando as bandas.</p><p>Os operadores suportados são unários: mais (+), menos (-), vezes (*) e divisão (/).</p>",
	"@@Create-Color-Composite_inputraster_tag0@@": "<p>Os dados raster multibanda de entrada.</p>",
	"@@Create-Color-Composite_method_tag0@@": "<p>Especifica o método que será usado para extrair bandas.</p><ul><li>Nomes de Bandas--O nome de banda que representa o intervalo de comprimento de onda no espectro eletromagnético (como vermelho, infravermelho próximo ou infravermelho térmico) ou a polarização (como VH, VV, HH ou HV) será usado. Este é o padrão.</li><li>IDs de Banda -- O número da banda (como B1, B2 ou B3) será usado.</li></ul>",
	"@@Create-Color-Composite_redexpression_tag0@@": "<p>O cálculo atribuído à primeira banda.</p><p>Um nome de banda, ID de banda ou uma expressão algébrica usando as bandas.</p><p>Os operadores suportados são unários: mais (+), menos (-), vezes (*) e divisão (/).</p>",
	"@@Surface-Parameters_localsurfacetype_tag0@@": "<p>Escolha o tipo de função de superfície que será ajustada ao redor da célula alvo.</p><ul><li>Quadrática--Uma função de superfície quadrática será ajustada às células da vizinhança. Este é o tipo padrão.</li><li>Biquadrático--Uma função de superfície biquadrática será ajustada às células da vizinhança.</li></ul>",
	"@@Surface-Parameters_neighborhooddistance_tag0@@": "<p>A saída será calculada sobre esta distância do centro da célula alvo. Determina o tamanho do bairro. O valor padrão é o tamanho da célula raster de entrada, resultando em uma vizinhança de 3 por 3.</p>",
	"@@Surface-Parameters_outputslopemeasurement_tag0@@": "<p>As unidades de medida (graus ou porcentagens) que serão usadas para o raster de inclinação de saída. Este parâmetro só está ativo quando<strong>Tipo de parâmetro</strong>for<strong>Declividade</strong>.</p><ul><li>Grau--A inclinação da declividade será calculada em graus. Este é o padrão.</li><li>Aumento percentual--A inclinação da declividade será calculada como aumento percentual, também conhecido como inclinação percentual.</li></ul>",
	"@@Surface-Parameters_parametertype_tag0@@": "<p>Especifica o tipo de parâmetro de superfície de saída que será calculado.</p><ul><li>Declividade--A taxa de mudança na elevação será calculada. Este é o padrão.</li><li>Aspecto--A direção do declive da taxa máxima de mudança para cada célula será calculada.</li><li>Curvatura Média--A curvatura geral da superfície será medida. É calculado como a média da curvatura mínima e máxima. Esta curvatura descreve a convexidade intrínseca ou concavidade da superfície, independente da direção ou influência da gravidade.</li><li>Curvatura tangencial (curva de nível normal)--A curvatura normal geométrica perpendicular à linha de declividade, tangente à linha de curva de nível será medida. Esta curvatura é normalmente aplicada para caracterizar a convergência ou divergência do fluxo através da superfície.</li><li>Curvatura de Perfil (linha de declividade normal)--A curvatura normal geométrica ao longo da linha de declividade será medida. Esta curvatura é normalmente aplicada para caracterizar a aceleração e desaceleração do fluxo ao longo da superfície.</li><li>Plano (curva de nível plana) Curvatura--A curvatura ao longo das linhas de curva de nível será medida.</li><li>Torção Geodésica de Curva de nível--A taxa de mudança no ângulo de declividade ao longo das curvas de nível será medida.</li><li>Curvatura Gaussian--A curvatura geral da superfície será medida. É calculado como o produto da curvatura mínima e máxima.</li><li>Curvatura Casorati--A curvatura geral da superfície será medida. Pode ser zero ou qualquer outro número positivo.</li></ul>",
	"@@Surface-Parameters_projectgeodesicazimuths_tag0@@": "<p>Especifica se os azimutes geodésicos serão projetados para corrigir a distorção do ângulo causada pela referência espacial de saída. Este parâmetro só está ativo quando<strong>Tipo de parâmetro</strong>for<strong>Aspecto</strong>.</p><ul><li>Desmarcado--Azimutes geodésicos não serão projetados. Este é o padrão.</li><li>Marcado--Azimutes geodésicos serão projetados.</li></ul>",
	"@@Surface-Parameters_raster_tag0@@": "<p>O raster de superfície de entrada. Pode ser um raster inteiro ou de ponto flutuante.</p>",
	"@@Surface-Parameters_useadaptiveneighborhood_tag0@@": "<p>Especifica se a distância da vizinhança variará com as mudanças da paisagem (adaptativa). A distância máxima é determinada pela distância da vizinhança. A distância mínima é o tamanho da célula raster de entrada.</p><ul><li>Desmarcado--Uma distância de vizinhança única (fixa) será usada em todos os locais. Este é o padrão.</li><li>Marcado--Uma distância de vizinhança adaptativa será usada em todos os locais.</li></ul>",
	"@@Surface-Parameters_useequatorialaspect_tag0@@": "<p>Especifica se o aspecto será medido a partir de um ponto no equador ou do pólo norte. Este parâmetro só está ativo quando<strong>Tipo de parâmetro</strong>for<strong>Aspecto</strong>.</p><ul><li>Desmarcado--O aspecto será medido a partir do pólo norte. Este é o padrão.</li><li>Marcado--O aspecto será medido a partir de um ponto no equador.</li></ul>",
	"@@Surface-Parameters_zunit_tag0@@": "<p>A unidade linear de valores z verticais.</p><p>É definido por um sistema de coordenadas vertical se existir. Se não existir um sistema de coordenadas verticais, a unidade z deve ser definida a partir da lista de unidades, para garantir o cálculo geodésico correto.</p><ul><li>Polegada--A unidade linear será polegadas.</li><li>Pé--A unidade linear será pés.</li><li>Jarda--A unidade linear será jardas.</li><li>Milha dos EUA--A unidade linear será milhas.</li><li>Milha náutica--A unidade linear será milhas náuticas.</li><li>Milímetro--A unidade linear será milímetros.</li><li>Centímetro--A unidade linear será centímetros.</li><li>Metro--A unidade linear será metros. Este é o padrão.</li><li>Quilômetro--A unidade linear será quilômetros.</li><li>Decímetro--A unidade linear será decímetros.</li></ul>",
	"@@Surface-Parameters_analysismask_tag0@@": "<p>Um raster que especifica os locais onde a análise ocorrerá.</p><p>O raster pode ser do tipo inteiro ou de ponto flutuante.</p><p>Todas as células com valor válido, inclusive zero, irão compor a máscara. As células que são NoData na entrada da máscara serão NoData na saída.</p>",
	"@@Geometric-Median_cellsizetype_tag0@@": "<p>Escolha que tamanho de célula deve ser utilizado no raster de saída. Se todos os tamanhos de células de entrada forem iguais, todas as opções produzirão os mesmos resultados.</p><ul><li>Primeiro De--Use o tamanho da primeira célula dos rasters de entrada.</li><li>Mín De--Use o menor tamanho de célula de todos os rasters de entrada.</li><li>Máx De--Use o maior tamanho de célula de todos os rasters de entrada. Este é o padrão.</li><li>Média De--Use o tamanho médio da célula de todos os rasters de entrada.</li><li>Último De--Use o tamanho da última célula dos rasters de entrada.</li></ul>",
	"@@Geometric-Median_epsilon_tag0@@": "<p>Especifica o valor de convergência entre duas iterações consecutivas. Quando epsilon é menor ou igual ao valor especificado, a iteração é interrompida e o resultado da última iteração é usado.</p>",
	"@@Geometric-Median_extenttype_tag0@@": "<p>Escolha qual extensão deve ser usada no raster de saída:</p><ul><li><p>Primeiro De-Use a extensão do primeiro raster de entrada para determinar a extensão de processamento.</p></li><li>Intersecção De-Use a extensão dos pixels sobrepostos para determinar a extensão de processamento. Este é o padrão.</li><li>União De--Use a extensão de todos os rasters para determinar a extensão de processamento.</li><li>Último De--Use a extensão do último raster de entrada para determinar a extensão de processamento.</li></ul>",
	"@@Geometric-Median_maximumnumberofiterations_tag0@@": "<p>Especifica o número máximo de iterações a serem concluídas. A computação termina quando esse valor é alcançado, independentemente da configuração <strong>Epsilon</strong>.</p>",
	"@@Geometric-Median_rasters_tag0@@": "<p>Os rasters de múltiplas bandas de entrada.</p>",
	"@@Least-Cost-Corridor_inputaccumulativecostdistanceraster1_tag0@@": "<p>O raster de entrada representando a distância de custo acumulativo da primeira fonte.</p><p>Deve ser uma saída da distância de custo acumulada da função<strong>Acumulação de Distância</strong>ou<strong>Alocação de Distância</strong>.</p>",
	"@@Least-Cost-Corridor_inputaccumulativecostdistanceraster2_tag0@@": "<p>O raster de entrada representando a distância de custo acumulativo da segunda fonte.</p><p>Deve ser uma saída de distância de custo acumulada da função<strong>Acumulação de Distância</strong>ou<strong>Alocação de Distância</strong>.</p>",
	"@@Least-Cost-Corridor_inputbackdirectionraster1_tag0@@": "<p>O raster de direção de volta de entrada da primeira fonte.</p><p>Este é um conjunto de dados raster que identifica a direção da próxima célula ao longo do caminho de menor custo de volta à primeira fonte. Este é a saída da função <strong>Acumulação de Distância</strong>ou<strong>Alocação de Distância</strong>.</p>",
	"@@Least-Cost-Corridor_inputbackdirectionraster2_tag0@@": "<p>O raster de direção de volta de entrada da segunda fonte.</p><p>Este é um conjunto de dados raster que identifica a direção da próxima célula ao longo do caminho de menor custo de volta à primeira fonte. Este é a saída da função <strong>Acumulação de Distância</strong>ou<strong>Alocação de Distância</strong>.</p>",
	"@@Least-Cost-Corridor_threshold_tag0@@": "<p>Um percentual ou limite de custo acumulativo que determinará se uma certa célula será incluída no raster do corredor de saída.</p><p>Quando o parâmetro<strong>Método de limite</strong> está defiido para<strong>Porcentagem de menor custo</strong>, o valor especificado indica o aumento percentual a ser aplicado a partir do valor mínimo dos rasters de distância de custo acumulativo somados. Quando o parâmetro <strong>Método de limite</strong> está definido para<strong>Custo acumulativo</strong>, o valor indica células com custo acumulativo somado igual ou inferior ao valor que será incluído no corredor.</p><p>Este parâmetro estará ativo somente se o parâmetro<strong>Método de limite</strong>estiver definido para<strong>Porcentagem de menor custo</strong>ou<strong>Custo acumulativo</strong>.</p>",
	"@@Least-Cost-Corridor_thresholdmethod_tag0@@": "<p>Especifica como o limite será definido.</p><p></p><ul><li><strong>Sem Limite</strong>--Nenhum limite será aplicado e o corredor resultante cobrirá toda a extensão dos rasters de entrada. Isto é o padrão.</li><li><strong>Porcentagem de Menor Custo</strong>--O limite será definido como uma porcentagem do valor mínimo dos rasters de distância de custo acumulativo somados.</li><li><strong>Custo Acumulativo</strong>--O limite será definido em unidades de distância de custo acumulativo.</li></ul>"
};
const helpTexts_ptBR = {
	rfxArgsHelpTexts: rfxArgsHelpTexts
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (helpTexts_ptBR);


//# sourceMappingURL=help-texts.pt-BR-564f93b3.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,